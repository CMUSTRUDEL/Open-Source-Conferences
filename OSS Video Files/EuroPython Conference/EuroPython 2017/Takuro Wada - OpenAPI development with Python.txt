Title: Takuro Wada - OpenAPI development with Python
Publication date: 2017-09-17
Playlist: EuroPython 2017
Description: 
	"OpenAPI development with Python
[EuroPython 2017 - Talk - 2017-07-11 - PythonAnywhere Room]
[Rimini, Italy]

Goal

After this session, audiences will get
- Basic knowledge of OpenAPI (Swagger)
- Ecosystem of OpenAPI(Swagger) and tools related to Python and knowledge to make use of them in their own projects 

Audience

(1) This talk is for:
- Developers who are creating or using API services such as web applications, mobile applications and all other kinds of applications

(2) Audience will be expected to have (prerequisite):
- Basic knowledge of development with API (REST and others) 
- Basic knowledge of Python

Outline

Introduction (3min)


Agenda of this talk
Myself introduction


OpenAPI(Swagger) introduction and basics (8min)


What is OpenAPI and what is the relation with Swagger? (5min)
Comparison with other frameworks for APIs (3min)

api blueprint, json schema and ..


OpenAPI ecosystem and tools (8min)


OpenAPI(Swagger) core tools (4min)

Swagger editor, Swagger codegen and Swagger UI

OpenAPI tools related to Python (4min)

Some tools for python api development with OpenAPI



Actual case study with OpenAPI and Python (8min)


Introduce our projects with OpenAPI, Python and other program (like Angular, Typescript and so on) and explain how swagger is well working in our company


Recap and Conclusion (2min)

License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2017.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:04,120 --> 00:00:10,180
okay thank you for the introduction or I

00:00:08,110 --> 00:00:13,510
will talk about the open API development

00:00:10,180 --> 00:00:16,900
with Python first let me introduce

00:00:13,510 --> 00:00:19,410
myself my name is Tucker owada and I'm a

00:00:16,900 --> 00:00:22,090
software engineer in Cabo goo in

00:00:19,410 --> 00:00:26,440
ku-ku-ku-ku inc a japanese startup which

00:00:22,090 --> 00:00:28,750
providing manufacturing service which

00:00:26,440 --> 00:00:31,330
connects the people who want to create

00:00:28,750 --> 00:00:34,360
something and the factory who can make

00:00:31,330 --> 00:00:38,440
it and I was the speaker we were present

00:00:34,360 --> 00:00:41,050
2016 and up icon GP 2015 and I'm also

00:00:38,440 --> 00:00:43,320
member of swagger collagen our Technical

00:00:41,050 --> 00:00:47,110
Committee are passing in typescript and

00:00:43,320 --> 00:00:50,370
gold or my pointers Internet so pretty

00:00:47,110 --> 00:00:54,670
solid and this is it today's a danger

00:00:50,370 --> 00:00:58,870
and in the past I will talk about what

00:00:54,670 --> 00:01:02,530
is open API so introduction of Opera API

00:00:58,870 --> 00:01:06,580
and basics and second I will talk about

00:01:02,530 --> 00:01:09,039
open API tools so introduction some

00:01:06,580 --> 00:01:11,979
YouTube tools how to increase your

00:01:09,039 --> 00:01:14,080
productivity and the final part of this

00:01:11,979 --> 00:01:17,590
presentation I will talk about the

00:01:14,080 --> 00:01:23,229
actual case study of my company using

00:01:17,590 --> 00:01:27,660
open API and Python ok so first what is

00:01:23,229 --> 00:01:30,429
open API so who knows about our API and

00:01:27,660 --> 00:01:36,240
who are using it for your project

00:01:30,429 --> 00:01:38,770
ok thank you so open API is a literary

00:01:36,240 --> 00:01:41,080
API description language which is

00:01:38,770 --> 00:01:44,050
focusing on creating favoring and

00:01:41,080 --> 00:01:47,770
promising vendor-neutral description

00:01:44,050 --> 00:01:50,739
format so what can i what can do with

00:01:47,770 --> 00:01:54,849
open api so it's simple you can write

00:01:50,739 --> 00:01:57,910
your API stick with open api so the

00:01:54,849 --> 00:02:01,539
simple form of detail open api is

00:01:57,910 --> 00:02:05,920
supporting two type of format Yama and

00:02:01,539 --> 00:02:08,470
Jason and it's based on JSON schema

00:02:05,920 --> 00:02:13,209
jeezum schema is vocabulary to annotate

00:02:08,470 --> 00:02:15,910
and vary it Jason so it's R it makes use

00:02:13,209 --> 00:02:18,820
of LGM skin function

00:02:15,910 --> 00:02:19,840
and ultimately API is originally known

00:02:18,820 --> 00:02:23,650
as swagger

00:02:19,840 --> 00:02:28,360
so swagger is renamed to open API owned

00:02:23,650 --> 00:02:32,050
in 2016 so in this session I will use

00:02:28,360 --> 00:02:34,660
the Warworld swagger often but do not

00:02:32,050 --> 00:02:40,600
confuse it it's the almost the same

00:02:34,660 --> 00:02:44,910
unique meaning of open API and yeah so

00:02:40,600 --> 00:02:48,940
how to use the open API so open API is

00:02:44,910 --> 00:02:52,750
API spec itself so you can use it as a

00:02:48,940 --> 00:02:56,410
peer judgment and open API core tools

00:02:52,750 --> 00:03:00,340
can generate good-looking document which

00:02:56,410 --> 00:03:04,120
means it generates HTML CSS and

00:03:00,340 --> 00:03:06,790
JavaScript automatically so once you

00:03:04,120 --> 00:03:09,810
write you API spec and generate the

00:03:06,790 --> 00:03:10,930
document you can share it with your team

00:03:09,810 --> 00:03:13,570
front-end

00:03:10,930 --> 00:03:17,470
buckland or deeper pods or non

00:03:13,570 --> 00:03:21,280
developers or if your service has public

00:03:17,470 --> 00:03:23,670
API you can generate the document for

00:03:21,280 --> 00:03:29,020
any developers all over the world

00:03:23,670 --> 00:03:30,370
ok so another way to use open API is a

00:03:29,020 --> 00:03:35,140
API tools

00:03:30,370 --> 00:03:39,220
I mean memory code generator so for

00:03:35,140 --> 00:03:42,910
example if you write API spec you can

00:03:39,220 --> 00:03:45,940
generate source code for validating

00:03:42,910 --> 00:03:51,340
request data from clients in server-side

00:03:45,940 --> 00:03:57,459
or generate code for API calling part in

00:03:51,340 --> 00:04:02,020
clients ok so there are severe buggin of

00:03:57,459 --> 00:04:04,660
API and a visit open API is originally

00:04:02,020 --> 00:04:09,760
known as swagger and it's renamed open

00:04:04,660 --> 00:04:14,100
API in 2016 so version 1.2 and version

00:04:09,760 --> 00:04:20,109
3.0 it's released in what's released in

00:04:14,100 --> 00:04:22,900
2014 so it's known as swagger and new

00:04:20,109 --> 00:04:27,760
major version next image major version

00:04:22,900 --> 00:04:30,169
3.0 will be released in DeRay 2017 so

00:04:27,760 --> 00:04:33,319
this month maybe next week

00:04:30,169 --> 00:04:37,639
will it will be released so I think it's

00:04:33,319 --> 00:04:42,020
so hot technology yeah and there are

00:04:37,639 --> 00:04:45,710
some computers of OPI so the kind of

00:04:42,020 --> 00:04:49,580
language is called categorized as a left

00:04:45,710 --> 00:04:53,240
- Adi deal description language and when

00:04:49,580 --> 00:04:57,430
one is run a RESTful API modeling

00:04:53,240 --> 00:04:59,990
language it's a yellow base language and

00:04:57,430 --> 00:05:03,830
another one is a PA blueprint

00:04:59,990 --> 00:05:08,029
it's markdown base by the way the

00:05:03,830 --> 00:05:10,849
developer API Breen is a Pieri which is

00:05:08,029 --> 00:05:15,219
acquired or grew in the beginning of

00:05:10,849 --> 00:05:19,819
this year and there are many more tools

00:05:15,219 --> 00:05:22,879
in open API then - - so if you are

00:05:19,819 --> 00:05:26,270
starting to learning these kind - I

00:05:22,879 --> 00:05:30,319
recommend I recommend you to assess from

00:05:26,270 --> 00:05:35,360
open API and I investigate Google Trends

00:05:30,319 --> 00:05:38,180
of these three open API also known as

00:05:35,360 --> 00:05:44,770
swagger is gathering more attention than

00:05:38,180 --> 00:05:48,439
others in the market so it's technology

00:05:44,770 --> 00:05:53,240
again so ok

00:05:48,439 --> 00:05:57,439
next open API tools I will insert - in

00:05:53,240 --> 00:06:01,089
some air PNP a tools so there are two

00:05:57,439 --> 00:06:05,659
categories big categories open API tools

00:06:01,089 --> 00:06:08,300
one is core tools those tools are

00:06:05,659 --> 00:06:10,939
developed by open API team through our

00:06:08,300 --> 00:06:15,319
team so kind of off shell 2

00:06:10,939 --> 00:06:18,830
and the other is community tools which

00:06:15,319 --> 00:06:21,879
which are developed by community I mean

00:06:18,830 --> 00:06:25,069
software developer all over the wall and

00:06:21,879 --> 00:06:27,800
because this is your Python I will

00:06:25,069 --> 00:06:32,330
introduce Python tool in position but

00:06:27,800 --> 00:06:38,509
you can find so many language tools of

00:06:32,330 --> 00:06:40,879
API okay so start from core tools I want

00:06:38,509 --> 00:06:44,000
to introduce three tools in the system

00:06:40,879 --> 00:06:49,280
swoggle UI swagger editor and

00:06:44,000 --> 00:06:53,360
swagger collagen and queso swagger UI so

00:06:49,280 --> 00:06:58,370
what are you are is a to depth show you

00:06:53,360 --> 00:07:02,420
ABS back with a beautiful format so once

00:06:58,370 --> 00:07:06,590
you write your API spec with your Jason

00:07:02,420 --> 00:07:08,840
and give it to swagger UI so whether you

00:07:06,590 --> 00:07:14,390
are automatically render the document

00:07:08,840 --> 00:07:18,410
other HTML and the CSS and JavaScript

00:07:14,390 --> 00:07:23,030
and the swagger UI is also providing

00:07:18,410 --> 00:07:27,080
feature that call your API directory

00:07:23,030 --> 00:07:32,570
from your browser page so you can use it

00:07:27,080 --> 00:07:45,740
as artists to for your API so let's see

00:07:32,570 --> 00:07:51,260
example this is the right Audrey this is

00:07:45,740 --> 00:07:55,729
arrived demo and this is showing the pet

00:07:51,260 --> 00:08:00,760
to stores IPS Peck you can find some API

00:07:55,729 --> 00:08:04,790
definitions and you can try it here and

00:08:00,760 --> 00:08:09,770
send actually a request to the server

00:08:04,790 --> 00:08:16,190
and see the results in this page okay

00:08:09,770 --> 00:08:19,760
back to the presentation okay next next

00:08:16,190 --> 00:08:24,490
is a swagger editor as well it sure is a

00:08:19,760 --> 00:08:27,280
with we expect edger in web browser of

00:08:24,490 --> 00:08:30,910
these tools provides in gear features

00:08:27,280 --> 00:08:36,110
like syntax highlighting on completion

00:08:30,910 --> 00:08:39,020
real-time specter edition so if once you

00:08:36,110 --> 00:08:43,339
write in buried document in the swagger

00:08:39,020 --> 00:08:45,710
editor swagger it will notice you you

00:08:43,339 --> 00:08:49,070
are writing in buried click Elroy number

00:08:45,710 --> 00:08:54,440
bra bra bra immediately so it's very

00:08:49,070 --> 00:08:57,620
useful and if you go to the URL you can

00:08:54,440 --> 00:09:03,440
see the right demo you can try you

00:08:57,620 --> 00:09:06,850
spec writing at the site okay so next

00:09:03,440 --> 00:09:11,360
swagger cogent so that called gem

00:09:06,850 --> 00:09:14,470
providing function to generate servers

00:09:11,360 --> 00:09:18,320
and clients called from your API spec so

00:09:14,470 --> 00:09:21,320
once you write your abs back with open

00:09:18,320 --> 00:09:24,830
API and give it to a guy collagen you

00:09:21,320 --> 00:09:28,430
can generate a multi multi group kind of

00:09:24,830 --> 00:09:32,180
code including multiple language like

00:09:28,430 --> 00:09:34,610
Java typescript golem Python and so many

00:09:32,180 --> 00:09:35,300
other running slow B or C press press

00:09:34,610 --> 00:09:40,600
yep

00:09:35,300 --> 00:09:44,030
and of course some language are provided

00:09:40,600 --> 00:09:47,810
those servers code in the clients called

00:09:44,030 --> 00:09:52,030
are can be generated for some some

00:09:47,810 --> 00:09:53,270
language it's very useful it's powerful

00:09:52,030 --> 00:09:56,300
yes

00:09:53,270 --> 00:10:00,520
next come to tools there are many Python

00:09:56,300 --> 00:10:03,020
tools for open API so many tools are

00:10:00,520 --> 00:10:06,200
introduced in the swagger of show

00:10:03,020 --> 00:10:10,820
websites so if you go there you can find

00:10:06,200 --> 00:10:15,020
many tools registered and those tools

00:10:10,820 --> 00:10:18,340
are providing function VAR data or code

00:10:15,020 --> 00:10:20,750
generator or spec parser insulin and

00:10:18,340 --> 00:10:24,100
some towards off of the specific

00:10:20,750 --> 00:10:28,880
framework I'll like frost or pyramid

00:10:24,100 --> 00:10:31,580
bottle and today I want to introduce one

00:10:28,880 --> 00:10:35,420
of these tools it's very good

00:10:31,580 --> 00:10:38,210
the tool is verbal core verbal core is

00:10:35,420 --> 00:10:40,820
Python library that as client-side and

00:10:38,210 --> 00:10:43,790
server-side supports for open API and

00:10:40,820 --> 00:10:49,670
its support thousand two hundred

00:10:43,790 --> 00:10:53,000
thousand three and develop yl and I I

00:10:49,670 --> 00:10:56,240
think it's good feature is that it's not

00:10:53,000 --> 00:10:58,700
dedicated to any specific primal so you

00:10:56,240 --> 00:11:02,150
can use it in your own Python project

00:10:58,700 --> 00:11:05,330
today and it's very simple to use no

00:11:02,150 --> 00:11:08,600
complicated setting and providing with

00:11:05,330 --> 00:11:10,230
features like starred Asian and

00:11:08,600 --> 00:11:14,520
measuring and

00:11:10,230 --> 00:11:17,850
cheering and yeah and calcium warrants

00:11:14,520 --> 00:11:21,980
for type conversion I will mention this

00:11:17,850 --> 00:11:25,770
function next so let's see the example

00:11:21,980 --> 00:11:29,070
so in this issue I will use this scheme

00:11:25,770 --> 00:11:32,910
the name is booked and the type is

00:11:29,070 --> 00:11:37,980
object which has property ID as integer

00:11:32,910 --> 00:11:42,570
title each string and alter a string as

00:11:37,980 --> 00:11:47,240
well and ID is required property and to

00:11:42,570 --> 00:11:52,620
use verbal core you need to prepare

00:11:47,240 --> 00:11:55,890
prepare so first load gamify with open

00:11:52,620 --> 00:11:57,870
API spec and verbal core is also

00:11:55,890 --> 00:12:01,710
supporting JSON so you can use JSON

00:11:57,870 --> 00:12:04,350
stick as well and number two create a

00:12:01,710 --> 00:12:07,800
brothel course big object using from

00:12:04,350 --> 00:12:12,830
disk method and number three retrieve

00:12:07,800 --> 00:12:17,880
book definition from Lowe's pick and

00:12:12,830 --> 00:12:22,110
final finally you can call Verity scheme

00:12:17,880 --> 00:12:26,580
object to validate your data so in this

00:12:22,110 --> 00:12:31,110
code the target variable is will be very

00:12:26,580 --> 00:12:35,010
dated so what will happen if the

00:12:31,110 --> 00:12:37,650
Umbridge data is given let's see the

00:12:35,010 --> 00:12:40,770
example so if we if required property ID

00:12:37,650 --> 00:12:45,500
isn't it not defined indict so in this

00:12:40,770 --> 00:12:49,760
example I give empty dick to the method

00:12:45,500 --> 00:12:53,460
but ID is required so it's in buried

00:12:49,760 --> 00:12:56,100
this is a result so variation error

00:12:53,460 --> 00:12:58,860
exception is raised and the message is

00:12:56,100 --> 00:13:02,310
ID it's required property that's correct

00:12:58,860 --> 00:13:08,670
and another example if for a property

00:13:02,310 --> 00:13:11,930
has embodied type for you so the book

00:13:08,670 --> 00:13:18,060
definition title should be string that

00:13:11,930 --> 00:13:23,649
distict has a title with into u1 so it's

00:13:18,060 --> 00:13:26,680
in Britt then virginal error is also

00:13:23,649 --> 00:13:30,129
waste as well as the rust example and

00:13:26,680 --> 00:13:33,240
the message is one is not type stream

00:13:30,129 --> 00:13:38,860
okay that's correct it's very zoo and

00:13:33,240 --> 00:13:45,970
next amatuer amature means a convert

00:13:38,860 --> 00:13:49,050
dick type object to a pipe so you the

00:13:45,970 --> 00:13:53,529
prepare procedure is the same as

00:13:49,050 --> 00:13:57,279
variation and you will use a marshal

00:13:53,529 --> 00:13:59,709
scheme algebraic object to a marshal so

00:13:57,279 --> 00:14:03,399
let's see the example I'm I'm now giving

00:13:59,709 --> 00:14:06,879
this big ID 1 title Merchant of Venice

00:14:03,399 --> 00:14:10,899
and author William Shakespeare and this

00:14:06,879 --> 00:14:14,139
is a good result so Python move the

00:14:10,899 --> 00:14:17,529
object is such a free credit book object

00:14:14,139 --> 00:14:20,350
author William Shakespeare ID 1 and the

00:14:17,529 --> 00:14:23,199
title Merchant of Venice and one of a

00:14:20,350 --> 00:14:29,319
good feature or measuring in Oates

00:14:23,199 --> 00:14:33,160
automatic type conversion so I added a

00:14:29,319 --> 00:14:37,029
new property release date which has a

00:14:33,160 --> 00:14:43,660
string type with form of date date

00:14:37,029 --> 00:14:48,370
format and right see another example so

00:14:43,660 --> 00:14:53,259
I added a release date key and with

00:14:48,370 --> 00:14:58,269
Vario string Vario 2017 high under seven

00:14:53,259 --> 00:15:01,829
- garan and let's see the result this is

00:14:58,269 --> 00:15:04,870
a result so the release date is

00:15:01,829 --> 00:15:09,040
converted automatically to gauge time

00:15:04,870 --> 00:15:13,720
the date object yeah that's very useful

00:15:09,040 --> 00:15:17,889
and powerful and verbal core has a

00:15:13,720 --> 00:15:23,850
default divine for months bytes a date a

00:15:17,889 --> 00:15:27,809
double date time a float in 32 or and

00:15:23,850 --> 00:15:32,620
those definitions are you can find in

00:15:27,809 --> 00:15:34,629
home a third PI operable core and you

00:15:32,620 --> 00:15:37,020
can also define your custom format by

00:15:34,629 --> 00:15:40,440
yourself there

00:15:37,020 --> 00:15:43,130
document for the procedure so if you're

00:15:40,440 --> 00:15:49,110
interesting refer that you all allele

00:15:43,130 --> 00:15:52,050
and the fire part of Michelle is sorry

00:15:49,110 --> 00:15:55,490
final part of rebel core is module

00:15:52,050 --> 00:15:58,800
so it's inverse procedure of mojo so

00:15:55,490 --> 00:16:02,250
convert by some model object to addicts

00:15:58,800 --> 00:16:05,520
so in this example I created a book

00:16:02,250 --> 00:16:07,800
object which has ID 1 title margin to

00:16:05,520 --> 00:16:12,900
Venus of the William Shakespeare and the

00:16:07,800 --> 00:16:19,350
release date is a date object 2017 711

00:16:12,900 --> 00:16:22,440
and it this is a result release date is

00:16:19,350 --> 00:16:27,540
automatically converted to a string with

00:16:22,440 --> 00:16:30,450
date haunt is that fantastic and there

00:16:27,540 --> 00:16:34,830
are many good features I do not mention

00:16:30,450 --> 00:16:37,680
today so you can refer the document or I

00:16:34,830 --> 00:16:41,790
I've created some example of rubber core

00:16:37,680 --> 00:16:45,750
so you can go to see the example at the

00:16:41,790 --> 00:16:49,370
u OS ok so the final part of the

00:16:45,750 --> 00:16:52,920
presentation at share of case study so

00:16:49,370 --> 00:16:56,160
project overview or we are providing

00:16:52,920 --> 00:16:58,530
system which name is cub connect and cub

00:16:56,160 --> 00:17:00,420
connect is monitoring cloud platform

00:16:58,530 --> 00:17:02,880
which connect people who want to make

00:17:00,420 --> 00:17:06,839
something and the factory who can make

00:17:02,880 --> 00:17:11,850
it insertion process is done by a I

00:17:06,839 --> 00:17:14,910
trained with deep learning and this is a

00:17:11,850 --> 00:17:18,180
system architecture so in the cub

00:17:14,910 --> 00:17:21,110
connect very big two part front inside

00:17:18,180 --> 00:17:25,560
and back inside and front M is

00:17:21,110 --> 00:17:28,920
implemented with anger with types type

00:17:25,560 --> 00:17:32,970
script and back-end is implemented by

00:17:28,920 --> 00:17:34,980
Python and cub connect is connecting

00:17:32,970 --> 00:17:38,160
other services like manufacturing

00:17:34,980 --> 00:17:42,150
management service which enables the

00:17:38,160 --> 00:17:45,480
factory to manage their orders from

00:17:42,150 --> 00:17:48,300
clients or payment or partition does

00:17:45,480 --> 00:17:50,490
something like that and also connecting

00:17:48,300 --> 00:17:54,450
data analyzing service

00:17:50,490 --> 00:17:58,740
so we're dealing CAD data to the not

00:17:54,450 --> 00:18:02,460
only to the a lot also 3d so data online

00:17:58,740 --> 00:18:05,640
service under eyes chatter data to

00:18:02,460 --> 00:18:11,700
calculate size a Boreum something like

00:18:05,640 --> 00:18:16,710
set to create coalition so we are using

00:18:11,700 --> 00:18:21,870
open API for those port ok Red Sea's

00:18:16,710 --> 00:18:27,740
detail so we're using open API in cup

00:18:21,870 --> 00:18:32,190
cracked in the three part so one is

00:18:27,740 --> 00:18:36,420
generate API document using SWA by UI

00:18:32,190 --> 00:18:40,410
and the next is called triumph call

00:18:36,420 --> 00:18:44,780
generis for API calling swagger collagen

00:18:40,410 --> 00:18:50,520
using to Agra coaching and we're

00:18:44,780 --> 00:18:54,120
creating we're using open API to very

00:18:50,520 --> 00:18:58,760
date for variation of request parameter

00:18:54,120 --> 00:19:03,929
from clients using brothel core yeah and

00:18:58,760 --> 00:19:09,660
we are also using open api with other

00:19:03,929 --> 00:19:13,190
services so it's we're using generate

00:19:09,660 --> 00:19:16,890
api a judgment with war value i and

00:19:13,190 --> 00:19:20,370
creating code generation using code

00:19:16,890 --> 00:19:24,710
generation for api calling using web

00:19:20,370 --> 00:19:27,240
koujun so implementation workflow so

00:19:24,710 --> 00:19:32,940
there are big two parts the one is

00:19:27,240 --> 00:19:35,850
design so we need to first design a peer

00:19:32,940 --> 00:19:38,429
structure and write open API spec this

00:19:35,850 --> 00:19:41,280
is important ways and next

00:19:38,429 --> 00:19:45,990
implementation so once you write API

00:19:41,280 --> 00:19:47,880
spec some part of front-end can be

00:19:45,990 --> 00:19:50,910
generated automatically uses swagger

00:19:47,880 --> 00:19:53,820
collagen and the logical chain can

00:19:50,910 --> 00:19:56,730
generate mock server as well so the

00:19:53,820 --> 00:19:59,130
front-end development can be completely

00:19:56,730 --> 00:20:01,830
isolated from back-end development and

00:19:59,130 --> 00:20:03,440
also back-end development can be

00:20:01,830 --> 00:20:07,759
operated from

00:20:03,440 --> 00:20:11,179
that development so a bill to process

00:20:07,759 --> 00:20:15,610
can be implemented in Peru it's a very

00:20:11,179 --> 00:20:18,830
effective so impression for open API

00:20:15,610 --> 00:20:22,490
using open API to decrease your task so

00:20:18,830 --> 00:20:25,039
much so document generation called

00:20:22,490 --> 00:20:27,980
generation is they're useful and from

00:20:25,039 --> 00:20:30,169
then front end and back end or API

00:20:27,980 --> 00:20:34,669
provider and API consume and can be

00:20:30,169 --> 00:20:41,990
implemented in parallel so it's very

00:20:34,669 --> 00:20:44,419
productive I think a recap so open API

00:20:41,990 --> 00:20:45,700
is hot technology to describe API

00:20:44,419 --> 00:20:48,350
specification

00:20:45,700 --> 00:20:52,549
there are many tool to increase your

00:20:48,350 --> 00:20:57,190
productivity with optimal API you'll one

00:20:52,549 --> 00:21:01,970
actual case with open api of my company

00:20:57,190 --> 00:21:06,440
so hot tools and require more

00:21:01,970 --> 00:21:09,049
contributors so as i said new open API

00:21:06,440 --> 00:21:13,159
spec version 3.0 will be released in

00:21:09,049 --> 00:21:16,639
july 2017 and there are many added good

00:21:13,159 --> 00:21:18,700
features but we can not make use of

00:21:16,639 --> 00:21:24,230
these good features

00:21:18,700 --> 00:21:27,620
if tools does not support it so first

00:21:24,230 --> 00:21:30,919
need to support open API spec version 3

00:21:27,620 --> 00:21:36,470
as soon as possible ok let's contribute

00:21:30,919 --> 00:21:41,480
it and fire we are hurrying so if you're

00:21:36,470 --> 00:21:45,110
interesting Python or 3d print I mean

00:21:41,480 --> 00:21:47,149
now if you're like Python and the sushi

00:21:45,110 --> 00:21:52,399
and the ninja you are the right person

00:21:47,149 --> 00:21:54,909
for my company so go to the URL that's

00:21:52,399 --> 00:21:54,909
it thank you

00:22:04,070 --> 00:22:07,520
we have time for questions

00:22:17,810 --> 00:22:25,190
hello thanks for your your talk I know

00:22:21,620 --> 00:22:28,340
in the spec design you can have a

00:22:25,190 --> 00:22:31,550
description for any element civilized

00:22:28,340 --> 00:22:33,050
luggage I know in the document

00:22:31,550 --> 00:22:35,180
specifications you can have a

00:22:33,050 --> 00:22:39,200
description where you can say meaning

00:22:35,180 --> 00:22:42,440
things about the elements but I was

00:22:39,200 --> 00:22:44,960
wondering in terms of best practices to

00:22:42,440 --> 00:22:49,550
document your API what would you

00:22:44,960 --> 00:22:52,280
recommend would be the swagger UI or

00:22:49,550 --> 00:22:55,610
anything or any other tool that you know

00:22:52,280 --> 00:23:01,160
about it regarding documentation exactly

00:22:55,610 --> 00:23:03,710
ah yeah swagger UI is a kind of a good

00:23:01,160 --> 00:23:08,090
documentation tool I think I mentioned

00:23:03,710 --> 00:23:11,480
in this presentation about there is

00:23:08,090 --> 00:23:14,930
another document generator for operate

00:23:11,480 --> 00:23:19,130
the aspects for example swagger collagen

00:23:14,930 --> 00:23:24,920
can generate a static HTML document and

00:23:19,130 --> 00:23:28,570
you can define styles by yourself so you

00:23:24,920 --> 00:23:35,470
can choose a depends on your situation

00:23:28,570 --> 00:23:35,470
all right thing ok any other questions

00:23:36,340 --> 00:23:40,270
if not I've got one

00:23:45,620 --> 00:23:53,039
yeah thank you for a talk so I have a

00:23:49,019 --> 00:23:56,250
question regarding more more complex

00:23:53,039 --> 00:24:00,090
validation scenarios so for example you

00:23:56,250 --> 00:24:03,840
can say that a field is required in the

00:24:00,090 --> 00:24:07,799
input data but you might have let's say

00:24:03,840 --> 00:24:10,260
that is required if some other field is

00:24:07,799 --> 00:24:13,190
not present in the input data

00:24:10,260 --> 00:24:18,149
so basically Inter field validation

00:24:13,190 --> 00:24:21,210
scenarios and maybe other validation

00:24:18,149 --> 00:24:24,440
which depends on the context so how

00:24:21,210 --> 00:24:28,830
extensible is the default validation

00:24:24,440 --> 00:24:34,860
with JSON schema and if you encountered

00:24:28,830 --> 00:24:38,549
any problems with it ah-so ah-so using

00:24:34,860 --> 00:24:46,130
Braddock or it's better in JSON skin I

00:24:38,549 --> 00:24:50,159
said so it can very date very very date

00:24:46,130 --> 00:24:54,539
constraint defined in JSON schema so if

00:24:50,159 --> 00:24:58,289
you want to complicate it Perdition you

00:24:54,539 --> 00:25:07,139
need to choose another tool or write

00:24:58,289 --> 00:25:10,220
your code to very late hit I think and I

00:25:07,139 --> 00:25:13,139
wanted to ask is there support in

00:25:10,220 --> 00:25:14,730
opening P I to define what an error

00:25:13,139 --> 00:25:17,399
format is going to be like so can I also

00:25:14,730 --> 00:25:19,230
document what the JSON structure if I

00:25:17,399 --> 00:25:21,419
want to document this field is required

00:25:19,230 --> 00:25:25,620
you forgot to do this is there is there

00:25:21,419 --> 00:25:28,620
is there support for that sorry for

00:25:25,620 --> 00:25:30,600
errors like I have a validation error is

00:25:28,620 --> 00:25:34,350
there a standard because I've seen I can

00:25:30,600 --> 00:25:37,110
define for my inputs and also I'm

00:25:34,350 --> 00:25:39,510
assuming my outputs but can I also

00:25:37,110 --> 00:25:41,720
define the format of the output of error

00:25:39,510 --> 00:25:41,720
messages

00:25:49,470 --> 00:25:57,039
something like this field is required is

00:25:52,870 --> 00:26:00,160
that also documented in the schema yes

00:25:57,039 --> 00:26:08,289
this is documented schema okay thank you

00:26:00,160 --> 00:26:10,030
okay we have any other questions if not

00:26:08,289 --> 00:26:10,620
let's give a big hand for speaker thank

00:26:10,030 --> 00:26:16,380
you

00:26:10,620 --> 00:26:16,380

YouTube URL: https://www.youtube.com/watch?v=OYTtlEUSDBE


