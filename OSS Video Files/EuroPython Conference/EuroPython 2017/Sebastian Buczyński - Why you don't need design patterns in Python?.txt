Title: Sebastian BuczyÅ„ski - Why you don't need design patterns in Python?
Publication date: 2017-09-17
Playlist: EuroPython 2017
Description: 
	"Why you don't need design patterns in Python?
[EuroPython 2017 - Talk - 2017-07-11 - PyCharm Room]
[Rimini, Italy]

Exactly 23 years have passed since release of one of the biggest IT classics - ""Design Patterns: Elements of Reusable Object-Oriented Software"". Contents of the book had considerable influence on dominant programming languages of those days. However, design patterns were not glorified by everyone. Voices of rational critic appeared, pointing out that design patterns are just ways to compensate for missing languages features by tons of clumsy code. If one implements design patterns in Python by the book, they will get code that looks awkward, at best. This talk is to present Python's features that either simplifies or eliminates need for implementing design patterns. Even if you don't know what design patterns are - don't worry. You still may see some new interesting Python's features and their usage.

License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2017.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:03,530 --> 00:00:12,080
hi everyone I want to tell you a little

00:00:08,480 --> 00:00:16,759
story of course not about myself it will

00:00:12,080 --> 00:00:18,740
be a story of a Python developer not so

00:00:16,759 --> 00:00:22,070
long ago there was a Python developer

00:00:18,740 --> 00:00:26,240
and throughout his career that lasted

00:00:22,070 --> 00:00:30,289
already at several years he righted a

00:00:26,240 --> 00:00:33,830
few thousands of lines of code and he

00:00:30,289 --> 00:00:37,070
was in love with his favorite framework

00:00:33,830 --> 00:00:38,930
and he became so proficient in the tools

00:00:37,070 --> 00:00:43,100
he used daily that he even became a

00:00:38,930 --> 00:00:45,860
mentor for his teammates and he praised

00:00:43,100 --> 00:00:48,020
all the tools heals because they were

00:00:45,860 --> 00:00:51,140
able to solve all his problems he deals

00:00:48,020 --> 00:00:53,960
with dealt with in daily work and after

00:00:51,140 --> 00:00:55,699
all he was quite good and this really

00:00:53,960 --> 00:00:59,899
boosted his self-confidence and this

00:00:55,699 --> 00:01:04,640
isn't surprising of course knowing a

00:00:59,899 --> 00:01:06,649
framework was not his only asset he

00:01:04,640 --> 00:01:09,010
practiced writing tests rigorously and

00:01:06,649 --> 00:01:11,630
applied TDD whenever it was applicable

00:01:09,010 --> 00:01:13,580
he was doing his best to make sure that

00:01:11,630 --> 00:01:16,240
the code he written was not only correct

00:01:13,580 --> 00:01:18,740
and well tested but also readable and

00:01:16,240 --> 00:01:22,369
easy to understand by any other

00:01:18,740 --> 00:01:24,560
teammates and every night before falling

00:01:22,369 --> 00:01:26,689
asleep he was reading a zen of python to

00:01:24,560 --> 00:01:30,619
write a code that would never violate

00:01:26,689 --> 00:01:33,829
any of its verses in other words he was

00:01:30,619 --> 00:01:37,280
doing his best and he was expecting the

00:01:33,829 --> 00:01:41,479
other teammates to do the say the same

00:01:37,280 --> 00:01:48,909
thing and and then he was assigned to a

00:01:41,479 --> 00:01:51,110
new project that changed everything well

00:01:48,909 --> 00:01:53,119
despite the fact that our hero was

00:01:51,110 --> 00:01:57,950
proficient with his tools and he know

00:01:53,119 --> 00:01:59,509
them inside out they were not well

00:01:57,950 --> 00:02:04,310
suited for the project he was assigned

00:01:59,509 --> 00:02:06,740
to because so valuable this experience

00:02:04,310 --> 00:02:10,489
may be when the weight of the project

00:02:06,740 --> 00:02:13,520
there is very business part it's far

00:02:10,489 --> 00:02:15,680
outside this framework and it's it can

00:02:13,520 --> 00:02:16,750
no longer be resolved by this framework

00:02:15,680 --> 00:02:19,939
essential

00:02:16,750 --> 00:02:22,400
so he started to create his own closet

00:02:19,939 --> 00:02:25,250
his own modules and he's also own

00:02:22,400 --> 00:02:28,849
abstractions and he felt that they were

00:02:25,250 --> 00:02:30,379
clumsy and they do not be as good as the

00:02:28,849 --> 00:02:36,379
well thought components of a framework

00:02:30,379 --> 00:02:40,400
he used daily UC frameworks are set of

00:02:36,379 --> 00:02:43,579
powerful building blocks if you use them

00:02:40,400 --> 00:02:46,790
for a problem that they were created for

00:02:43,579 --> 00:02:49,400
you're fine and you shouldn't bother any

00:02:46,790 --> 00:02:52,700
other options but the problem arises

00:02:49,400 --> 00:02:55,400
when there is a there is an issue that

00:02:52,700 --> 00:02:58,790
they simply don't fit and you try to I

00:02:55,400 --> 00:03:01,819
know effectively screw driving using a

00:02:58,790 --> 00:03:04,939
hammer and for example what would be the

00:03:01,819 --> 00:03:07,849
jangle good for if you did that need to

00:03:04,939 --> 00:03:11,139
use its models at all so what's left I

00:03:07,849 --> 00:03:14,060
don't know the views that implies the

00:03:11,139 --> 00:03:17,840
system and the routing and that's all

00:03:14,060 --> 00:03:19,609
any other reach capabilities of Jenga

00:03:17,840 --> 00:03:23,599
were not used so why would you do that

00:03:19,609 --> 00:03:26,060
and the problem why our develop

00:03:23,599 --> 00:03:28,609
developer was start was that he lacked

00:03:26,060 --> 00:03:32,720
the thinking outside the box beyond his

00:03:28,609 --> 00:03:35,540
manual and luckily he noted this problem

00:03:32,720 --> 00:03:37,609
easily enough to came up with an idea of

00:03:35,540 --> 00:03:39,500
asking someone maybe more experienced

00:03:37,609 --> 00:03:42,799
maybe more interested in software

00:03:39,500 --> 00:03:45,500
engineering and he had a friend a Java

00:03:42,799 --> 00:03:48,769
developer and he asked her for an advice

00:03:45,500 --> 00:03:50,900
what should I do if my tools are not

00:03:48,769 --> 00:03:54,829
good enough for me for this particular

00:03:50,900 --> 00:03:57,859
problem and he said she said take a look

00:03:54,829 --> 00:04:00,620
at design patterns they are meant to be

00:03:57,859 --> 00:04:04,340
reusable concept to produce elegant code

00:04:00,620 --> 00:04:06,440
and nice solutions and are based on many

00:04:04,340 --> 00:04:11,870
years of experience people that are much

00:04:06,440 --> 00:04:15,290
smarter than we are so he wrote took the

00:04:11,870 --> 00:04:17,359
design patterns took the 23 years of

00:04:15,290 --> 00:04:22,669
book and try to implement some of those

00:04:17,359 --> 00:04:25,400
using examples there however the design

00:04:22,669 --> 00:04:27,380
patterns are not like libraries or tools

00:04:25,400 --> 00:04:29,240
that he does so far so they are not

00:04:27,380 --> 00:04:31,039
really too easy to use solution

00:04:29,240 --> 00:04:33,590
that you just import in your code and

00:04:31,039 --> 00:04:36,319
start using they are more like recites

00:04:33,590 --> 00:04:38,960
like draft for solutions if you have

00:04:36,319 --> 00:04:43,310
this particular problem and they fit

00:04:38,960 --> 00:04:45,830
like you have analogy then you can use

00:04:43,310 --> 00:04:50,720
them but they are just just outlined

00:04:45,830 --> 00:04:54,199
they are not ready to use maybe you are

00:04:50,720 --> 00:04:57,199
thinking what are they good for good for

00:04:54,199 --> 00:05:02,300
you if they are written in some old

00:04:57,199 --> 00:05:06,889
books by some C++ guys where there's a

00:05:02,300 --> 00:05:09,650
funny fact about IT namely our brand has

00:05:06,889 --> 00:05:14,240
some kind of amnesia and he 20 or 30

00:05:09,650 --> 00:05:16,069
years or so we forgot about all concepts

00:05:14,240 --> 00:05:18,710
all the ideas and then we discover them

00:05:16,069 --> 00:05:19,370
again and we like oh my god this is so

00:05:18,710 --> 00:05:23,599
amazing

00:05:19,370 --> 00:05:26,300
cool for example let's take and I think

00:05:23,599 --> 00:05:30,050
IO and it's co-routines here cool idea

00:05:26,300 --> 00:05:34,669
the event loop except it's nothing new

00:05:30,050 --> 00:05:39,380
because the this is almost 50 years old

00:05:34,669 --> 00:05:43,000
now and it's been around in 70s but we

00:05:39,380 --> 00:05:46,490
just now got it to the Python and

00:05:43,000 --> 00:05:49,960
another thing to consider when you think

00:05:46,490 --> 00:05:53,870
about patterns is that are they

00:05:49,960 --> 00:05:56,000
applicable today and well the book was

00:05:53,870 --> 00:05:59,300
written 23 years ago which there were

00:05:56,000 --> 00:06:02,870
different tools in charge instead of

00:05:59,300 --> 00:06:04,520
Python so Python simplifies a lot of

00:06:02,870 --> 00:06:06,590
things and this is what this talk will

00:06:04,520 --> 00:06:08,449
be about more about the tools and less

00:06:06,590 --> 00:06:10,280
about the design patterns because you

00:06:08,449 --> 00:06:12,500
will see that some of them are also

00:06:10,280 --> 00:06:15,020
present in Python but they are are they

00:06:12,500 --> 00:06:17,300
invisible or you cannot differentiate

00:06:15,020 --> 00:06:20,960
one from another because there are so so

00:06:17,300 --> 00:06:23,750
simple but the main benefit from design

00:06:20,960 --> 00:06:25,490
patterns or at least learning the

00:06:23,750 --> 00:06:28,639
application in Python in some limited

00:06:25,490 --> 00:06:30,770
way would be for you to extend your

00:06:28,639 --> 00:06:34,430
toolbox of the programmer and as a

00:06:30,770 --> 00:06:36,729
result become not only a better Python

00:06:34,430 --> 00:06:39,729
programmer but a better programmer in

00:06:36,729 --> 00:06:39,729
general

00:06:39,910 --> 00:06:45,890
okay so let's start with the first

00:06:41,840 --> 00:06:48,020
pattern there is a sometimes considered

00:06:45,890 --> 00:06:51,620
an anti-pattern a singlet on this is the

00:06:48,020 --> 00:06:54,890
situation when you have a class and in

00:06:51,620 --> 00:06:57,320
any moment of life time of a program you

00:06:54,890 --> 00:07:00,230
need only one instance of a given class

00:06:57,320 --> 00:07:02,780
only one object systems there might be

00:07:00,230 --> 00:07:05,570
several reasons for that maybe all the

00:07:02,780 --> 00:07:07,460
objects will be the same so why should I

00:07:05,570 --> 00:07:11,770
bother in my create new things every

00:07:07,460 --> 00:07:13,880
time and maybe there is a business

00:07:11,770 --> 00:07:16,280
motivation behind it that there would be

00:07:13,880 --> 00:07:18,830
no more than one object or maybe

00:07:16,280 --> 00:07:20,240
creating an object costs a lot takes a

00:07:18,830 --> 00:07:23,060
lot of time and you just want to avoid

00:07:20,240 --> 00:07:25,600
it to get some speed up and for such

00:07:23,060 --> 00:07:27,920
cases we can use a singleton pattern and

00:07:25,600 --> 00:07:30,230
beside uniqueness the results of one

00:07:27,920 --> 00:07:32,870
requirement namely you need to have a

00:07:30,230 --> 00:07:36,290
clear way to get an instance and note

00:07:32,870 --> 00:07:38,360
that this is a single item so what is

00:07:36,290 --> 00:07:41,810
Google Inc a little you may find

00:07:38,360 --> 00:07:47,120
following solution and this uses the

00:07:41,810 --> 00:07:52,220
magic dunder new meters that is using

00:07:47,120 --> 00:07:55,400
during creation so this solution comes

00:07:52,220 --> 00:07:58,570
down to using a class level attribute

00:07:55,400 --> 00:08:01,930
that will store your only instance and

00:07:58,570 --> 00:08:05,990
eventually you return this whenever it's

00:08:01,930 --> 00:08:08,060
necessary using this is quite simple you

00:08:05,990 --> 00:08:10,910
just create as usual as you would like

00:08:08,060 --> 00:08:12,650
to create the other object and of course

00:08:10,910 --> 00:08:14,870
you can use this implementation in your

00:08:12,650 --> 00:08:18,410
programs but please don't call yourself

00:08:14,870 --> 00:08:22,460
Python users anymore because you know

00:08:18,410 --> 00:08:26,660
there is one very serious flaw I can see

00:08:22,460 --> 00:08:29,720
this and this is that it's not clear for

00:08:26,660 --> 00:08:32,000
a client of this class if he creates a

00:08:29,720 --> 00:08:35,690
singlet on if it's really an unique

00:08:32,000 --> 00:08:37,610
object because we use unusual syntax for

00:08:35,690 --> 00:08:41,330
creating a new object so you might get

00:08:37,610 --> 00:08:44,200
surprised if that you really you getting

00:08:41,330 --> 00:08:46,580
is the same thing over and over again a

00:08:44,200 --> 00:08:49,580
slightly better approach is to use a

00:08:46,580 --> 00:08:51,100
class method a class method because

00:08:49,580 --> 00:08:53,500
disadvantages

00:08:51,100 --> 00:08:57,459
small-scale and it also does not block

00:08:53,500 --> 00:08:59,170
you from creating unusual instance well

00:08:57,459 --> 00:09:02,380
you could do the same by clearing that

00:08:59,170 --> 00:09:05,980
class level instance variable but we

00:09:02,380 --> 00:09:09,610
don't want to go that far however since

00:09:05,980 --> 00:09:12,069
we have Python and it's 2017 there is a

00:09:09,610 --> 00:09:14,410
simpler way and actually it's been

00:09:12,069 --> 00:09:17,649
around in Python for several years I

00:09:14,410 --> 00:09:21,490
guess or more and this is you can just

00:09:17,649 --> 00:09:24,850
create an instance object in your module

00:09:21,490 --> 00:09:27,790
and later in your code just import the

00:09:24,850 --> 00:09:33,670
object instead of class and this will

00:09:27,790 --> 00:09:36,130
achieve actually the same thing so I

00:09:33,670 --> 00:09:38,440
told you that some patterns are present

00:09:36,130 --> 00:09:41,680
in Python and this is true about single

00:09:38,440 --> 00:09:44,230
atom this is not an obvious fact but

00:09:41,680 --> 00:09:49,120
there is a creature in Python that you

00:09:44,230 --> 00:09:51,180
use it countless times and actually meet

00:09:49,120 --> 00:09:55,420
the requirements from cigarette on and

00:09:51,180 --> 00:09:58,389
this creature is called a module so

00:09:55,420 --> 00:10:00,939
let's consider this after importing a

00:09:58,389 --> 00:10:04,000
module at least once there is exactly

00:10:00,939 --> 00:10:07,000
one instance of it in this modules big

00:10:04,000 --> 00:10:09,339
object you can very easy and very

00:10:07,000 --> 00:10:12,880
clearly get an instance of a module

00:10:09,339 --> 00:10:15,730
using import statement and if you need

00:10:12,880 --> 00:10:18,670
you can recreate the instance using

00:10:15,730 --> 00:10:22,959
reload so this actually adds something

00:10:18,670 --> 00:10:26,610
to this pattern so the conclusion about

00:10:22,959 --> 00:10:29,860
single item is that using this most

00:10:26,610 --> 00:10:32,550
simplest solutions would be our way out

00:10:29,860 --> 00:10:37,029
instead of creating some clumsy classes

00:10:32,550 --> 00:10:39,459
and if I am speaking about modules there

00:10:37,029 --> 00:10:41,199
is another pattern that very gets

00:10:39,459 --> 00:10:45,819
simplified thanks to them and this is

00:10:41,199 --> 00:10:49,209
phosphate let's say we have a project

00:10:45,819 --> 00:10:50,920
that is consisting of many distinct

00:10:49,209 --> 00:10:54,130
components and we can quite easily

00:10:50,920 --> 00:10:56,649
assign them to some groups responsible

00:10:54,130 --> 00:10:59,170
for certain functionalities for example

00:10:56,649 --> 00:11:00,730
we have a group with users that is

00:10:59,170 --> 00:11:03,579
responsible for getting user

00:11:00,730 --> 00:11:04,190
authentication and so on we have a group

00:11:03,579 --> 00:11:07,580
response

00:11:04,190 --> 00:11:09,980
blog post creation retrieving and other

00:11:07,580 --> 00:11:11,870
stuff and we have some things related to

00:11:09,980 --> 00:11:16,460
getting advertisements based on the

00:11:11,870 --> 00:11:19,550
content mm another connection between

00:11:16,460 --> 00:11:20,750
these classes might look like this and I

00:11:19,550 --> 00:11:21,710
don't have to tell you that this is a

00:11:20,750 --> 00:11:24,080
terrible idea

00:11:21,710 --> 00:11:26,810
because you get a tight coupling between

00:11:24,080 --> 00:11:28,730
these classes and anytime you want to

00:11:26,810 --> 00:11:31,280
change something in a class that has

00:11:28,730 --> 00:11:32,990
many connections with others then there

00:11:31,280 --> 00:11:38,390
is a probability then you will break

00:11:32,990 --> 00:11:41,120
things and also it's very complicated to

00:11:38,390 --> 00:11:43,900
get a desired functionality because you

00:11:41,120 --> 00:11:48,770
may not know what what's behind this

00:11:43,900 --> 00:11:51,230
subsystem yes and this is what facets

00:11:48,770 --> 00:11:54,470
this is issue what firstly tries to

00:11:51,230 --> 00:11:57,320
address you introduced in original

00:11:54,470 --> 00:11:59,420
pattern and extra class that will be

00:11:57,320 --> 00:12:01,970
your interface to the entire sub module

00:11:59,420 --> 00:12:04,790
you are no longer allowed to use this

00:12:01,970 --> 00:12:08,170
class directly under no circumstances

00:12:04,790 --> 00:12:13,970
all requests that go to this subsystem

00:12:08,170 --> 00:12:15,680
must go through the faucet and of course

00:12:13,970 --> 00:12:18,320
you can go on with default

00:12:15,680 --> 00:12:20,830
implementation like using class methods

00:12:18,320 --> 00:12:23,600
all over and creating another class but

00:12:20,830 --> 00:12:26,000
perhaps this is an over engineering

00:12:23,600 --> 00:12:28,340
under engineered solution in Python if

00:12:26,000 --> 00:12:30,980
all you need is just a top-level package

00:12:28,340 --> 00:12:34,970
that will get a bunch of functions

00:12:30,980 --> 00:12:38,690
inside just look how clear it looks

00:12:34,970 --> 00:12:41,270
compared to the idea of modules the only

00:12:38,690 --> 00:12:44,210
thing you use outside this package is

00:12:41,270 --> 00:12:46,790
imports from this init file everything

00:12:44,210 --> 00:12:50,540
that in these sub packages it's hidden

00:12:46,790 --> 00:12:53,600
you may not use it outside and this is

00:12:50,540 --> 00:12:57,190
how you hide the complexity of probably

00:12:53,600 --> 00:13:02,330
very complicated advertising sub system

00:12:57,190 --> 00:13:07,100
so this pattern is it doesn't sound like

00:13:02,330 --> 00:13:09,380
very original or something but it helps

00:13:07,100 --> 00:13:11,300
you organize your code and there is very

00:13:09,380 --> 00:13:15,100
little need for class in vitam if you

00:13:11,300 --> 00:13:18,980
can do this is the same in plain module

00:13:15,100 --> 00:13:23,089
another pattern is comment a comment is

00:13:18,980 --> 00:13:25,819
an object-oriented callback the original

00:13:23,089 --> 00:13:28,699
implementation assumed that it will be

00:13:25,819 --> 00:13:32,060
helpful for example doing a graphical

00:13:28,699 --> 00:13:36,079
user interfaces because you see when you

00:13:32,060 --> 00:13:39,019
want for example heaven reaction and

00:13:36,079 --> 00:13:40,610
clicking an item in menu you don't want

00:13:39,019 --> 00:13:43,100
to pass too many information to the

00:13:40,610 --> 00:13:45,350
graphical interface with the same

00:13:43,100 --> 00:13:47,149
reasons as the facet so you don't want

00:13:45,350 --> 00:13:50,569
to have too many connections in your

00:13:47,149 --> 00:13:54,730
system and the comment was meant to pass

00:13:50,569 --> 00:13:57,829
and configure during runtime your things

00:13:54,730 --> 00:14:01,459
its interface assume that you have only

00:13:57,829 --> 00:14:04,250
one method which is execute and the

00:14:01,459 --> 00:14:09,079
thing that uses comment would just run

00:14:04,250 --> 00:14:11,060
execute when it needs to of course in

00:14:09,079 --> 00:14:13,639
Python is over-engineered because we can

00:14:11,060 --> 00:14:16,279
use just a plain function to achieve the

00:14:13,639 --> 00:14:18,079
same thing and since functions are first

00:14:16,279 --> 00:14:20,810
class citizens in Python which means

00:14:18,079 --> 00:14:22,850
that we can create by function during

00:14:20,810 --> 00:14:25,670
runtime we can pass it to another

00:14:22,850 --> 00:14:28,160
function and we can return it then there

00:14:25,670 --> 00:14:30,500
is no need to create a class but I

00:14:28,160 --> 00:14:32,630
remind you this were quite different

00:14:30,500 --> 00:14:36,130
times where the basic building block was

00:14:32,630 --> 00:14:39,920
class so you have classes everywhere and

00:14:36,130 --> 00:14:42,529
if everything that your comment is doing

00:14:39,920 --> 00:14:45,259
is just calling and other functions of

00:14:42,529 --> 00:14:47,420
another object with some parameters then

00:14:45,259 --> 00:14:50,240
maybe you can use the standard libraries

00:14:47,420 --> 00:14:53,060
beauties which is functions partial and

00:14:50,240 --> 00:14:55,100
this one allows you to just prepare a

00:14:53,060 --> 00:15:01,670
collabo object that will be accessible

00:14:55,100 --> 00:15:03,829
later to use by the conclusion we do

00:15:01,670 --> 00:15:08,209
really stuff like this in Python which

00:15:03,829 --> 00:15:11,389
making graphical user interfaces so this

00:15:08,209 --> 00:15:15,680
is button a very little usage in Python

00:15:11,389 --> 00:15:19,220
right now and another button is a

00:15:15,680 --> 00:15:21,709
visitor and this is actually adopted in

00:15:19,220 --> 00:15:25,130
Python and it's it's used but for

00:15:21,709 --> 00:15:28,160
certain amount of problems let's say we

00:15:25,130 --> 00:15:31,040
have a complicated nested structure the

00:15:28,160 --> 00:15:32,990
we need to traverse and for each such

00:15:31,040 --> 00:15:35,690
note we would like to execute our own

00:15:32,990 --> 00:15:39,279
logic and this is an example of abstract

00:15:35,690 --> 00:15:42,560
syntax trees and this is a your code

00:15:39,279 --> 00:15:45,860
represented a sub structure and this is

00:15:42,560 --> 00:15:47,959
really use of pilings and other lenders

00:15:45,860 --> 00:15:51,050
which get your code

00:15:47,959 --> 00:15:55,069
turn them into such structure and then

00:15:51,050 --> 00:15:57,319
for each node it does distinct logic for

00:15:55,069 --> 00:15:59,509
example a root element is always a

00:15:57,319 --> 00:16:03,439
module and this is represent the whole

00:15:59,509 --> 00:16:07,069
code the first thing you have this is

00:16:03,439 --> 00:16:10,850
import statement and this is represented

00:16:07,069 --> 00:16:13,370
as distinct in note yeah and pilant has

00:16:10,850 --> 00:16:16,459
different checkers different strategies

00:16:13,370 --> 00:16:21,230
different guidelines for any of these

00:16:16,459 --> 00:16:23,870
elements so it is much more clear to

00:16:21,230 --> 00:16:26,930
just separate this and this is what

00:16:23,870 --> 00:16:30,079
visitor is about is it's about getting

00:16:26,930 --> 00:16:35,120
now what is this node and separating

00:16:30,079 --> 00:16:37,759
this person from others if we had a

00:16:35,120 --> 00:16:39,769
static typing just like in Java then we

00:16:37,759 --> 00:16:43,189
could just implement it like this we

00:16:39,769 --> 00:16:46,970
would have a method visit and the

00:16:43,189 --> 00:16:49,490
argument would point us what type is

00:16:46,970 --> 00:16:52,639
this implementation about yeah we get a

00:16:49,490 --> 00:16:54,189
clear distinction about what what to do

00:16:52,639 --> 00:16:56,420
next

00:16:54,189 --> 00:16:58,959
of course we don't have such things in

00:16:56,420 --> 00:17:02,839
Python and the first knife

00:16:58,959 --> 00:17:06,049
implementation will amount to using big

00:17:02,839 --> 00:17:07,579
if-else statements which I don't have to

00:17:06,049 --> 00:17:11,679
add to you that this is ugly

00:17:07,579 --> 00:17:15,740
and this is gross pretty and it's slow

00:17:11,679 --> 00:17:18,199
luckily we can use the dynamic nature of

00:17:15,740 --> 00:17:22,939
Python and create functions that we will

00:17:18,199 --> 00:17:27,350
call them later us as usual methods

00:17:22,939 --> 00:17:30,470
after we assemble a methods name we can

00:17:27,350 --> 00:17:32,809
just get it from our object and call it

00:17:30,470 --> 00:17:35,290
just as usual functions and this will

00:17:32,809 --> 00:17:39,220
work fine too mmm

00:17:35,290 --> 00:17:42,910
but having spied on at least Freda I'm

00:17:39,220 --> 00:17:46,180
sorry having at least Python 3.4 we have

00:17:42,910 --> 00:17:49,570
this single dispatch functionality which

00:17:46,180 --> 00:17:52,510
this is the closest we can get comparing

00:17:49,570 --> 00:17:56,140
to Java so it's directing

00:17:52,510 --> 00:17:58,300
implementations for arguments type it's

00:17:56,140 --> 00:18:00,190
usage is quite complicated I will get it

00:17:58,300 --> 00:18:02,740
step-by-step so first of all we

00:18:00,190 --> 00:18:05,200
implement the single dispatch and we get

00:18:02,740 --> 00:18:08,140
a default implementation of course the

00:18:05,200 --> 00:18:11,740
default if we did not have a specialized

00:18:08,140 --> 00:18:14,650
version for this time we will be want to

00:18:11,740 --> 00:18:20,080
write exception that this no handler is

00:18:14,650 --> 00:18:22,860
for this I think then we would start

00:18:20,080 --> 00:18:25,900
implementing our own specialized in

00:18:22,860 --> 00:18:28,810
implementations using take a look at

00:18:25,900 --> 00:18:31,750
this decorator because we don't use

00:18:28,810 --> 00:18:35,080
single dispatch we use the visit

00:18:31,750 --> 00:18:37,660
decorator that register and this

00:18:35,080 --> 00:18:40,420
decorator gets the only argument which

00:18:37,660 --> 00:18:43,270
is a type a type of a first argument to

00:18:40,420 --> 00:18:47,010
this function and whenever you call a

00:18:43,270 --> 00:18:50,680
visit with a type like in this place

00:18:47,010 --> 00:18:55,720
then this registered function will be

00:18:50,680 --> 00:18:57,790
called unluckily this has been my major

00:18:55,720 --> 00:19:00,610
disadvantage and namely it cannot be

00:18:57,790 --> 00:19:03,820
used in classes because there's always a

00:19:00,610 --> 00:19:08,250
first argument is a class it would have

00:19:03,820 --> 00:19:14,230
to be reimplemented by hand in such case

00:19:08,250 --> 00:19:18,130
mmm okay and the last design pattern is

00:19:14,230 --> 00:19:21,310
decorator and decorator pattern is not

00:19:18,130 --> 00:19:23,470
what you might think of when you hear a

00:19:21,310 --> 00:19:27,070
word decorator it's not a decorator

00:19:23,470 --> 00:19:28,750
function in Python it will become more

00:19:27,070 --> 00:19:32,320
clear when I will show in an examples

00:19:28,750 --> 00:19:34,570
and now some requirement it can extend

00:19:32,320 --> 00:19:37,420
the behavior of a given object during

00:19:34,570 --> 00:19:39,310
runtime and it can be used multiple

00:19:37,420 --> 00:19:42,670
times with different

00:19:39,310 --> 00:19:43,630
decorator patterns and no order is not

00:19:42,670 --> 00:19:45,600
important

00:19:43,630 --> 00:19:47,380
they will should work in the same way or

00:19:45,600 --> 00:19:54,010
at least have

00:19:47,380 --> 00:19:55,930
a meaning desired so a decorator when

00:19:54,010 --> 00:19:59,740
you decorate an object you have to get

00:19:55,930 --> 00:20:02,110
the same thing back which means as a

00:19:59,740 --> 00:20:04,680
user of class you shouldn't be aware

00:20:02,110 --> 00:20:08,170
that this uses a decorator so with any

00:20:04,680 --> 00:20:10,600
there is any attribute on the object

00:20:08,170 --> 00:20:14,770
then it should be also present on a

00:20:10,600 --> 00:20:17,380
decorator and for example if we have

00:20:14,770 --> 00:20:19,210
such class then it has two methods get

00:20:17,380 --> 00:20:21,190
text and get number and we would have

00:20:19,210 --> 00:20:27,640
two we would like to decorate one of

00:20:21,190 --> 00:20:30,940
them by adding some both HTML markup

00:20:27,640 --> 00:20:33,460
then we have also to implement it the

00:20:30,940 --> 00:20:35,440
other function which is also which is of

00:20:33,460 --> 00:20:37,240
course redundant and this is just

00:20:35,440 --> 00:20:41,530
writing a code for for our code for

00:20:37,240 --> 00:20:43,810
making functionalities but what happens

00:20:41,530 --> 00:20:47,560
actually if we request an attribute on

00:20:43,810 --> 00:20:49,810
the class and we use the dot and the

00:20:47,560 --> 00:20:52,120
methods on classes and it fields

00:20:49,810 --> 00:20:55,810
I'll just attribute and this is a logic

00:20:52,120 --> 00:20:58,270
we can plug in so first at all Python

00:20:55,810 --> 00:21:01,330
calls a special dunder get attribute

00:20:58,270 --> 00:21:04,330
method and this looks for properties in

00:21:01,330 --> 00:21:06,700
the object itself if it wasn't found

00:21:04,330 --> 00:21:09,430
then don't regret at Adel I know

00:21:06,700 --> 00:21:11,650
wonderful naming is called and by

00:21:09,430 --> 00:21:16,120
defaulting just raises an exception that

00:21:11,650 --> 00:21:20,020
this property was not found and looking

00:21:16,120 --> 00:21:24,400
for properties is by dictionaries that

00:21:20,020 --> 00:21:27,790
are per class and per object level okay

00:21:24,400 --> 00:21:31,900
if the same property is present on class

00:21:27,790 --> 00:21:36,640
and on object then an object has has

00:21:31,900 --> 00:21:39,070
priority so to get decorative simplified

00:21:36,640 --> 00:21:44,110
we can just implement the method we need

00:21:39,070 --> 00:21:47,710
and for any other thing we just return

00:21:44,110 --> 00:21:50,890
the stuff from the original object and

00:21:47,710 --> 00:21:58,679
this frees you from need to implement

00:21:50,890 --> 00:22:00,390
all this unnecessary stuff okay to get

00:21:58,679 --> 00:22:02,610
compatibility would also have to

00:22:00,390 --> 00:22:05,610
implement the other method but that's a

00:22:02,610 --> 00:22:09,059
different story I guess so

00:22:05,610 --> 00:22:11,600
to sum up a Python is a very flexible

00:22:09,059 --> 00:22:16,320
tool much different from what we have

00:22:11,600 --> 00:22:18,960
almost 25 years ago and many of these

00:22:16,320 --> 00:22:24,210
things you might finger either redundant

00:22:18,960 --> 00:22:26,970
or extra arts just for it but in Python

00:22:24,210 --> 00:22:29,010
there is there are multiple places when

00:22:26,970 --> 00:22:31,799
we can plug in our all logic and

00:22:29,010 --> 00:22:37,860
customize on nearly every aspect of

00:22:31,799 --> 00:22:40,559
creation objects to run time however the

00:22:37,860 --> 00:22:44,549
very important question arises is magic

00:22:40,559 --> 00:22:47,760
they showed you in some limited way is

00:22:44,549 --> 00:22:51,480
worth the effort should we use really

00:22:47,760 --> 00:22:55,830
the magic well it depends the read

00:22:51,480 --> 00:22:58,590
ability wins some in there are cases

00:22:55,830 --> 00:23:01,980
when using this stuff will spare you

00:22:58,590 --> 00:23:04,470
some effort and any other things that we

00:23:01,980 --> 00:23:06,120
just created now I see a fancy Python

00:23:04,470 --> 00:23:09,929
feature let's use it it's a wrapper

00:23:06,120 --> 00:23:12,330
bubbly wrong idea and there are free

00:23:09,929 --> 00:23:14,100
things from me that I want you to take

00:23:12,330 --> 00:23:17,220
from this presentation to become a

00:23:14,100 --> 00:23:20,100
better programmers in general so first

00:23:17,220 --> 00:23:23,460
of all get to know with your tools and

00:23:20,100 --> 00:23:26,280
know them well and this is like

00:23:23,460 --> 00:23:29,990
vocabulary like having a name for

00:23:26,280 --> 00:23:33,059
everything you see the second way is to

00:23:29,990 --> 00:23:35,280
get inspiration from other languages and

00:23:33,059 --> 00:23:37,950
communities because there is not much

00:23:35,280 --> 00:23:40,980
interest in Python community in general

00:23:37,950 --> 00:23:44,190
in software engineering there is not

00:23:40,980 --> 00:23:46,880
much talks on this top subject on

00:23:44,190 --> 00:23:49,710
conferences there is not much books and

00:23:46,880 --> 00:23:52,500
the last thing I haven't spoken earlier

00:23:49,710 --> 00:23:55,590
is to know a business domain of your

00:23:52,500 --> 00:23:58,620
project because if you know your tools

00:23:55,590 --> 00:24:00,450
you have a vocabulary if you get

00:23:58,620 --> 00:24:03,000
inspiration from the languages you know

00:24:00,450 --> 00:24:05,730
the software engineering stuff you you

00:24:03,000 --> 00:24:07,650
have a grammar but a real value a real

00:24:05,730 --> 00:24:10,590
meaning what you do

00:24:07,650 --> 00:24:13,200
it's in this point so even if you write

00:24:10,590 --> 00:24:15,930
a beautiful code and know all the tricks

00:24:13,200 --> 00:24:18,330
and you still won't be able to solve a

00:24:15,930 --> 00:24:20,550
problems of your business of a company

00:24:18,330 --> 00:24:25,800
you work for then this is all for

00:24:20,550 --> 00:24:27,690
nothing and just to sum up and my name

00:24:25,800 --> 00:24:31,260
is Sebastian buchinsky I work for

00:24:27,690 --> 00:24:33,990
estates next the biggest software Python

00:24:31,260 --> 00:24:36,059
house in Europe I block underbred

00:24:33,990 --> 00:24:40,580
current collector depth-x

00:24:36,059 --> 00:24:40,580
and that's all folks

00:24:46,250 --> 00:24:51,409
okay we have time for about two to three

00:24:49,070 --> 00:24:55,820
quick questions so who has a quick

00:24:51,409 --> 00:25:00,830
question anyone know everyone has hungry

00:24:55,820 --> 00:25:02,690
there at once so it's less of a question

00:25:00,830 --> 00:25:05,809
but more asking for a comment of you

00:25:02,690 --> 00:25:08,120
because in my opinion actually I come

00:25:05,809 --> 00:25:09,620
from the Java development community and

00:25:08,120 --> 00:25:11,150
design patterns are really important and

00:25:09,620 --> 00:25:13,400
I also realize they're really important

00:25:11,150 --> 00:25:16,100
in Python for example the facade pattern

00:25:13,400 --> 00:25:20,690
you mentioned sorry I will give it short

00:25:16,100 --> 00:25:22,880
but my question for your comment is you

00:25:20,690 --> 00:25:25,760
said that design patterns are not really

00:25:22,880 --> 00:25:29,690
important in title but of the 23

00:25:25,760 --> 00:25:31,760
patterns in the Gang of Four book sorry

00:25:29,690 --> 00:25:33,650
like are they actually really not

00:25:31,760 --> 00:25:35,690
important or are they important to

00:25:33,650 --> 00:25:37,400
implement sometimes or just forget about

00:25:35,690 --> 00:25:39,049
them so what's your opinion on the

00:25:37,400 --> 00:25:48,140
design patterns and the importance and

00:25:39,049 --> 00:25:50,210
pay so I mean your title was my design

00:25:48,140 --> 00:25:53,809
patterns are not important in Python but

00:25:50,210 --> 00:25:57,350
honestly is it important to learn these

00:25:53,809 --> 00:26:00,500
and then implement them or I'm sorry I

00:25:57,350 --> 00:26:02,690
can't really make my question okay so

00:26:00,500 --> 00:26:07,730
your question was about is it worth to

00:26:02,690 --> 00:26:09,919
learn the okay so essentially I think

00:26:07,730 --> 00:26:11,740
that this is a tricky part for less

00:26:09,919 --> 00:26:16,309
experienced people here because they

00:26:11,740 --> 00:26:19,940
learn unnecessary stuff and the there is

00:26:16,309 --> 00:26:22,909
a gap in our community and this is an

00:26:19,940 --> 00:26:25,730
established set of well false best

00:26:22,909 --> 00:26:29,510
practices I think this should be

00:26:25,730 --> 00:26:32,360
prepared by someone maybe and this

00:26:29,510 --> 00:26:35,419
should be well propagated throughout the

00:26:32,360 --> 00:26:39,049
community so they do not have to learn

00:26:35,419 --> 00:26:41,600
from other code from 23 years of books

00:26:39,049 --> 00:26:45,320
because they are not relevant today so

00:26:41,600 --> 00:26:51,559
we need just a new set and counterparts

00:26:45,320 --> 00:26:53,280
for Python ok anyone has a question one

00:26:51,559 --> 00:26:55,200
location nope

00:26:53,280 --> 00:26:56,660
well then it's time for lunch I would

00:26:55,200 --> 00:27:02,789
think giving ma'am

00:26:56,660 --> 00:27:02,789

YouTube URL: https://www.youtube.com/watch?v=G5OeYHCJuv0


