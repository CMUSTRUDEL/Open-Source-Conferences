Title: Roberto De Ioris - AAA Games with Unreal Engine 4 and Python
Publication date: 2017-09-17
Playlist: EuroPython 2017
Description: 
	"AAA Games with Unreal Engine 4 and Python
[EuroPython 2017 - Talk - 2017-07-10 - Anfiteatro 2]
[Rimini, Italy]

Unreal Engine is the game industry leading platform for developing AAA Videogames. Now you can script your gameplay logic, automate your development pipelines or test your productions with Python too. The UnrealEnginePython plugin aims at covering the whole feature set of  Unreal Engine 4 and extending it with the huge modules library available in the Python world.

The talk will briefly introduce the Unreal Engine platform and its capabilities as well as how it can be programmed without the python plugin (Blueprints and C++).

The biggest part of the talk will focus on how the Unreal Engine 4 patterns are mapped to the python plugin, what is already working and what you can expect from future developments.

No prior knowledge of game/graphics programming is required,  and if you are in the movie or cartoon industry you can get interesting infos too

License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2017.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:10,849 --> 00:00:18,770
hi everyone you hear me yeah okay so how

00:00:15,869 --> 00:00:22,500
many of you play video games

00:00:18,770 --> 00:00:26,369
great how many of you develop video

00:00:22,500 --> 00:00:32,460
games how many of you would like to

00:00:26,369 --> 00:00:37,050
develop video games better okay again

00:00:32,460 --> 00:00:38,820
how many of you know there is a tool for

00:00:37,050 --> 00:00:42,570
those of you that don't know this tool

00:00:38,820 --> 00:00:44,460
it is the engine the framework that has

00:00:42,570 --> 00:00:46,170
been used for developed the following

00:00:44,460 --> 00:00:49,789
titles if you are video game player you

00:00:46,170 --> 00:00:52,199
should recognize at least one of them

00:00:49,789 --> 00:00:57,359
here's the word one of the masterpieces

00:00:52,199 --> 00:01:01,199
for the current Xbox second this is the

00:00:57,359 --> 00:01:07,259
seventh Restatement Street Fighter I

00:01:01,199 --> 00:01:09,720
hope everyone knows it the recently

00:01:07,259 --> 00:01:11,729
announced dark stylist tree this company

00:01:09,720 --> 00:01:14,189
started with its own engine with the

00:01:11,729 --> 00:01:18,150
previous two installment then moved to

00:01:14,189 --> 00:01:20,970
aerial and read forth this is not so

00:01:18,150 --> 00:01:24,119
famous but it is a it is a Kickstarter

00:01:20,970 --> 00:01:26,610
the successful Kickstarter made by the

00:01:24,119 --> 00:01:31,350
designer of the original Castlevania

00:01:26,610 --> 00:01:34,350
series and even the remake of Final

00:01:31,350 --> 00:01:38,460
Fantasy 7 that is one of the most famous

00:01:34,350 --> 00:01:41,670
and beautiful games ever made it is in

00:01:38,460 --> 00:01:46,770
work with aerial Engine 4 and a lot of

00:01:41,670 --> 00:01:48,600
more titles so before starting working

00:01:46,770 --> 00:01:51,509
with a real engine Ford you need to get

00:01:48,600 --> 00:01:53,130
it for those of you that do not know you

00:01:51,509 --> 00:01:55,259
do not know it

00:01:53,130 --> 00:01:57,240
a real engines for its open source is

00:01:55,259 --> 00:02:00,119
not free software but it is open source

00:01:57,240 --> 00:02:03,090
so you register on the aerial engine

00:02:00,119 --> 00:02:05,610
dot-com site and then you get access to

00:02:03,090 --> 00:02:07,409
the github repository where you can

00:02:05,610 --> 00:02:09,810
clone the source code of the whole

00:02:07,409 --> 00:02:13,049
engine and the editor you can eventually

00:02:09,810 --> 00:02:18,269
build it for Linux Windows Mac or

00:02:13,049 --> 00:02:20,070
download Bunny will use our epic if the

00:02:18,269 --> 00:02:21,750
company that make a real engine makes

00:02:20,070 --> 00:02:23,010
money basically

00:02:21,750 --> 00:02:25,860
epic actions

00:02:23,010 --> 00:02:29,519
for the five percenter when you start

00:02:25,860 --> 00:02:33,540
earning more than $2,000 only for games

00:02:29,519 --> 00:02:35,519
if you make simulations or feelings or

00:02:33,540 --> 00:02:37,879
where there is not considered can be

00:02:35,519 --> 00:02:40,739
considered a game it is free for use

00:02:37,879 --> 00:02:45,330
once you download the engine you get

00:02:40,739 --> 00:02:49,079
something like that on the left side on

00:02:45,330 --> 00:02:51,239
the left side you have a list of the

00:02:49,079 --> 00:02:53,819
actors an actor is something that you

00:02:51,239 --> 00:02:56,310
can drag on the world the world is a

00:02:53,819 --> 00:02:58,410
representation of your game each actor

00:02:56,310 --> 00:03:00,750
can have its logical so you can program

00:02:58,410 --> 00:03:01,290
them and when you hit play your game

00:03:00,750 --> 00:03:04,590
starts

00:03:01,290 --> 00:03:07,140
if those two chair a cable and I don't

00:03:04,590 --> 00:03:09,239
know what it is that strange shadow on

00:03:07,140 --> 00:03:12,690
the table is does not impress you I've

00:03:09,239 --> 00:03:14,849
prepared another screen shot I think

00:03:12,690 --> 00:03:19,680
it's way better and can show you how

00:03:14,849 --> 00:03:22,019
much powerful is aerial engine for we

00:03:19,680 --> 00:03:24,120
are programmers so this is the most

00:03:22,019 --> 00:03:27,120
interesting question for for us how we

00:03:24,120 --> 00:03:32,190
program area and report by default you

00:03:27,120 --> 00:03:34,760
can program your game logic with C++

00:03:32,190 --> 00:03:37,049
that I suppose everyone know and

00:03:34,760 --> 00:03:43,430
blueprints how many of you knows what a

00:03:37,049 --> 00:03:48,169
blueprint is okay no one battle

00:03:43,430 --> 00:03:52,049
everyone knows two plus plus right okay

00:03:48,169 --> 00:03:58,470
this is a blueprint it is basically

00:03:52,049 --> 00:04:02,010
visual scripting on the left you see our

00:03:58,470 --> 00:04:04,620
events node it means when the spacebar

00:04:02,010 --> 00:04:07,739
event so when you press the spacebar on

00:04:04,620 --> 00:04:11,660
your keyboard do something in this cases

00:04:07,739 --> 00:04:14,129
jump so your character we start jumping

00:04:11,660 --> 00:04:17,459
even if you're not a programmer it

00:04:14,129 --> 00:04:21,510
should be easy understandable low as it

00:04:17,459 --> 00:04:23,639
goes effective this is another example

00:04:21,510 --> 00:04:26,460
of blueprint we have another inventor

00:04:23,639 --> 00:04:30,720
less control on your on your keyboard

00:04:26,460 --> 00:04:32,550
and then we spawn so we generate a new

00:04:30,720 --> 00:04:34,440
actor in which case a missile

00:04:32,550 --> 00:04:36,720
so we baggage we basically shot a

00:04:34,440 --> 00:04:39,990
missile from the position

00:04:36,720 --> 00:04:42,900
our pleasure they get actor transform on

00:04:39,990 --> 00:04:44,730
the lower left is to extracting the

00:04:42,900 --> 00:04:46,890
transformer transforming their gaming

00:04:44,730 --> 00:04:48,870
world and the linear algebra Lord is the

00:04:46,890 --> 00:04:54,420
description of position rotation is

00:04:48,870 --> 00:04:57,210
scaling on an object in space this is

00:04:54,420 --> 00:04:59,010
another example of blueprint the same

00:04:57,210 --> 00:05:01,940
one as before but without delaying of

00:04:59,010 --> 00:05:04,740
the added with only that node we can

00:05:01,940 --> 00:05:06,360
implement some form of cooldown for your

00:05:04,740 --> 00:05:09,090
weapon so you don't start shooting

00:05:06,360 --> 00:05:14,550
missiles one after another but you slow

00:05:09,090 --> 00:05:17,010
down them by 0.2 seconds then you can

00:05:14,550 --> 00:05:19,380
you may want to start working with the

00:05:17,010 --> 00:05:21,150
vector map it is very common in game

00:05:19,380 --> 00:05:23,790
development to start working with with

00:05:21,150 --> 00:05:28,980
vectors and then you gazel II start with

00:05:23,790 --> 00:05:35,420
this kind of poetic or you can do

00:05:28,980 --> 00:05:39,060
universe now don't get me wrong

00:05:35,420 --> 00:05:40,860
scripting with blueprint is effectively

00:05:39,060 --> 00:05:42,780
programming blue beans remove only the

00:05:40,860 --> 00:05:45,570
syntax part of programming if you

00:05:42,780 --> 00:05:49,500
respect all of the good programming

00:05:45,570 --> 00:05:53,730
rules it is very hard to make this kind

00:05:49,500 --> 00:05:57,450
of mess by following your most common

00:05:53,730 --> 00:05:59,460
sense and good design rule groupings are

00:05:57,450 --> 00:06:01,560
effectively really cool this is a

00:05:59,460 --> 00:06:03,570
debugging session so in real time while

00:06:01,560 --> 00:06:05,820
your games run you can see the nodes

00:06:03,570 --> 00:06:07,830
highlighting you can stop and you can

00:06:05,820 --> 00:06:12,110
make black point you can see the value

00:06:07,830 --> 00:06:12,110
of variables to change and so on

00:06:13,040 --> 00:06:17,070
before starting programming the real

00:06:15,450 --> 00:06:20,670
engine you have to know a bunch of

00:06:17,070 --> 00:06:24,630
concepts the object is the main class in

00:06:20,670 --> 00:06:27,840
the sense of C++ that is used by by the

00:06:24,630 --> 00:06:30,510
engine basically anything is in the

00:06:27,840 --> 00:06:35,280
editor and in your game is a subclass of

00:06:30,510 --> 00:06:38,580
you object an actor is a subclass of the

00:06:35,280 --> 00:06:41,520
object they can be spawned so generated

00:06:38,580 --> 00:06:45,150
on your world so it is effectively been

00:06:41,520 --> 00:06:46,470
seen on the world apone is a subclass of

00:06:45,150 --> 00:06:48,540
an actor

00:06:46,470 --> 00:06:51,210
a phone is a special actor because it

00:06:48,540 --> 00:06:54,060
can be processed by process it means a

00:06:51,210 --> 00:06:58,140
controller a controller to be a keyboard

00:06:54,060 --> 00:07:01,590
a mouse a joy that everything yet that

00:06:58,140 --> 00:07:04,470
can extract abstract the human player or

00:07:01,590 --> 00:07:07,800
an AI controller for artificial

00:07:04,470 --> 00:07:10,020
intelligence a character is a subclass

00:07:07,800 --> 00:07:12,650
of phone that has all the same

00:07:10,020 --> 00:07:15,750
characteristics characteristics of bone

00:07:12,650 --> 00:07:17,760
but for anthropomorphic figures so you

00:07:15,750 --> 00:07:22,770
have a human with a skeleton that can

00:07:17,760 --> 00:07:25,020
jump around crouch and so on then we

00:07:22,770 --> 00:07:27,570
have component component are usable

00:07:25,020 --> 00:07:33,180
pieces of code lacuna you can attach to

00:07:27,570 --> 00:07:35,550
all of the previous classes if you have

00:07:33,180 --> 00:07:40,950
a reduce the some other engine like

00:07:35,550 --> 00:07:45,060
unity or godo you may be used to the

00:07:40,950 --> 00:07:48,330
peak par digna so you basically write a

00:07:45,060 --> 00:07:55,260
single function update peak it depends

00:07:48,330 --> 00:07:57,210
on how the editor use it and then this

00:07:55,260 --> 00:08:00,390
single function you make all of your

00:07:57,210 --> 00:08:02,669
game logic that that function is run 60

00:08:00,390 --> 00:08:05,370
times per second 39% depends on the

00:08:02,669 --> 00:08:07,290
frame rate of your game in a real engine

00:08:05,370 --> 00:08:10,580
for using the tick is considered an

00:08:07,290 --> 00:08:12,870
anti-pattern you have to rely on events

00:08:10,580 --> 00:08:15,120
on the left you can see a bunch of

00:08:12,870 --> 00:08:18,240
events of example events are defined so

00:08:15,120 --> 00:08:22,110
explode the move forward path and and so

00:08:18,240 --> 00:08:25,020
on so you should always follow event

00:08:22,110 --> 00:08:27,390
pardon why first of all for code

00:08:25,020 --> 00:08:31,560
organization we have already seen how

00:08:27,390 --> 00:08:35,849
easy is to generate spaghetti with

00:08:31,560 --> 00:08:38,190
blueprints so thinking in an invented

00:08:35,849 --> 00:08:43,110
way should simplify the organization of

00:08:38,190 --> 00:08:46,380
your code or visual code events are

00:08:43,110 --> 00:08:48,480
Network friendly a real engine includes

00:08:46,380 --> 00:08:51,089
a natural stacker out-of-the-box and

00:08:48,480 --> 00:08:53,450
whenever you use events that events can

00:08:51,089 --> 00:08:55,980
be propagated on clients on the server

00:08:53,450 --> 00:08:57,760
broadcast actor the role of the clients

00:08:55,980 --> 00:09:00,430
to a bunch of clients and

00:08:57,760 --> 00:09:03,640
on as your religion you'll get time

00:09:00,430 --> 00:09:05,470
management for free events can be

00:09:03,640 --> 00:09:07,300
triggered by an emissions - for example

00:09:05,470 --> 00:09:11,170
if you have a running animation you can

00:09:07,300 --> 00:09:13,900
trigger an event when the photo of your

00:09:11,170 --> 00:09:15,970
character is on the ground I don't know

00:09:13,900 --> 00:09:22,020
for spawning particles so for doing

00:09:15,970 --> 00:09:25,150
noise most important game development

00:09:22,020 --> 00:09:27,760
it's done by a lot of different figures

00:09:25,150 --> 00:09:31,060
from programmers to artists to some

00:09:27,760 --> 00:09:33,310
designer level designer architect and

00:09:31,060 --> 00:09:37,110
and so on so there are a lot of

00:09:33,310 --> 00:09:39,550
non-programmers the in a team so

00:09:37,110 --> 00:09:42,730
following the event pattern should

00:09:39,550 --> 00:09:47,050
simplify the explanation of your gaming

00:09:42,730 --> 00:09:52,050
roots to non-programmers when a why

00:09:47,050 --> 00:09:55,750
should I use blueprint over C++

00:09:52,050 --> 00:09:57,970
unfortunately not all of the C++

00:09:55,750 --> 00:10:01,900
low-level API is exposed to blueprint

00:09:57,970 --> 00:10:04,390
only a little subset on the other side

00:10:01,900 --> 00:10:08,050
the writing material reading shaders

00:10:04,390 --> 00:10:10,150
materials in the ovule engine Jericho is

00:10:08,050 --> 00:10:13,030
extremely easy with the blubins is

00:10:10,150 --> 00:10:17,980
extremely hard with C++ or with the

00:10:13,030 --> 00:10:21,460
native languages of shaders interfacing

00:10:17,980 --> 00:10:26,080
with C or C++ library is basically a

00:10:21,460 --> 00:10:27,250
master it is very rare they all included

00:10:26,080 --> 00:10:32,290
the library in the engines will be

00:10:27,250 --> 00:10:34,810
enough for your for your work build a

00:10:32,290 --> 00:10:37,650
good designer glue printer are really

00:10:34,810 --> 00:10:42,910
easy to read even for non-programmers

00:10:37,650 --> 00:10:45,490
this is a personal thing blueprints are

00:10:42,910 --> 00:10:52,590
sometimes too much talent for me during

00:10:45,490 --> 00:10:55,900
ever then this is the central tropical

00:10:52,590 --> 00:10:59,320
in addition to C++ improvement we can

00:10:55,900 --> 00:11:02,710
now program our game logic or eventually

00:10:59,320 --> 00:11:04,870
script a rolly editor with python it is

00:11:02,710 --> 00:11:06,820
a it is an open source project you can

00:11:04,870 --> 00:11:08,330
freely download it it's supported on

00:11:06,820 --> 00:11:13,910
Linux Mac and

00:11:08,330 --> 00:11:16,910
the windows why I did it first of all my

00:11:13,910 --> 00:11:20,000
dream was to code the triple a level

00:11:16,910 --> 00:11:22,520
game with Python instead of C++ or

00:11:20,000 --> 00:11:26,690
eventually proving unfortunately I

00:11:22,520 --> 00:11:30,740
miserably fail why when after the first

00:11:26,690 --> 00:11:32,960
release of the project I obviously

00:11:30,740 --> 00:11:35,030
started checking comments on a radix

00:11:32,960 --> 00:11:38,140
Facebook and all of the channels where I

00:11:35,030 --> 00:11:41,120
posted the announcement of the release I

00:11:38,140 --> 00:11:45,950
did not realize that for the game

00:11:41,120 --> 00:11:48,230
industry coding in C++ is not seen as a

00:11:45,950 --> 00:11:51,560
problem as something that slowed down

00:11:48,230 --> 00:11:55,570
your work obviously there are a lot of

00:11:51,560 --> 00:11:58,460
more or less miyabi's programmer that

00:11:55,570 --> 00:12:01,610
really welcome the deprecated but the

00:11:58,460 --> 00:12:04,960
vast majority of mashrou programmers

00:12:01,610 --> 00:12:08,000
throw on it without thinking twice

00:12:04,960 --> 00:12:10,580
so instead of stopping working right

00:12:08,000 --> 00:12:15,400
away I started asking my colleagues and

00:12:10,580 --> 00:12:19,250
the other company doing games how I

00:12:15,400 --> 00:12:21,800
should change the direction of the

00:12:19,250 --> 00:12:26,630
development so after a bunch of chats

00:12:21,800 --> 00:12:29,270
with these people I came up with this

00:12:26,630 --> 00:12:31,070
list of tasks first of all the main

00:12:29,270 --> 00:12:33,650
project in the Tripoli industry is

00:12:31,070 --> 00:12:36,320
managing it tons of assets there are a

00:12:33,650 --> 00:12:39,170
lot of artists musicians that throw

00:12:36,320 --> 00:12:41,330
assets in the project and is access must

00:12:39,170 --> 00:12:42,890
be managed by programmer assets can

00:12:41,330 --> 00:12:46,070
change and the programmer have to change

00:12:42,890 --> 00:12:49,580
again what is not to assets and so on so

00:12:46,070 --> 00:12:52,550
scripting doing your description of your

00:12:49,580 --> 00:12:54,740
development pipeline it is something

00:12:52,550 --> 00:12:57,590
really wanted by the game industry

00:12:54,740 --> 00:13:00,800
especially before for artists in the 2d

00:12:57,590 --> 00:13:02,600
areas modeling an amazing so on

00:13:00,800 --> 00:13:04,310
Python is already present in their

00:13:02,600 --> 00:13:08,090
development pipeline a lot of animators

00:13:04,310 --> 00:13:09,860
script the working pipeline so having

00:13:08,090 --> 00:13:11,900
the ability to use the same streets the

00:13:09,860 --> 00:13:13,120
same codebase even into the end the game

00:13:11,900 --> 00:13:18,640
engine will be

00:13:13,120 --> 00:13:21,100
really interesting unit testing as well

00:13:18,640 --> 00:13:23,440
as functional testing is not really

00:13:21,100 --> 00:13:26,770
different practice in the gaming

00:13:23,440 --> 00:13:29,080
industry most of the time because the

00:13:26,770 --> 00:13:30,520
writing test in student surplus but you

00:13:29,080 --> 00:13:32,350
really are the few failure of tests

00:13:30,520 --> 00:13:35,290
generally it means a segmentation fault

00:13:32,350 --> 00:13:37,630
or a crash you have to restart your work

00:13:35,290 --> 00:13:40,800
from from the beginning so he mean

00:13:37,630 --> 00:13:46,330
having the ability or running unit tests

00:13:40,800 --> 00:13:48,880
was an interesting thing there is a lot

00:13:46,330 --> 00:13:51,310
you know there is a lot of Python in the

00:13:48,880 --> 00:13:53,260
scientific and academic world and the

00:13:51,310 --> 00:13:55,270
data visualization is another

00:13:53,260 --> 00:13:58,750
interesting topic for them so having a

00:13:55,270 --> 00:14:02,310
really powerful 3d engine would be

00:13:58,750 --> 00:14:05,880
really useful to show their their work

00:14:02,310 --> 00:14:09,279
another almost strange thing is

00:14:05,880 --> 00:14:13,870
simplifying the best versioning of their

00:14:09,279 --> 00:14:19,209
work a good part of a game is composed

00:14:13,870 --> 00:14:25,209
by binary data but you cannot version so

00:14:19,209 --> 00:14:28,180
well so for a lot of areas it will be

00:14:25,209 --> 00:14:32,620
very interesting to write code that we

00:14:28,180 --> 00:14:35,380
generate the status of the of your

00:14:32,620 --> 00:14:40,930
project and eventually write Triple A

00:14:35,380 --> 00:14:46,450
games with the engine so I started in

00:14:40,930 --> 00:14:49,150
August last year I didn't have high high

00:14:46,450 --> 00:14:52,450
expectation it was more of a toy project

00:14:49,150 --> 00:14:54,790
for me first step was obviously

00:14:52,450 --> 00:14:57,459
embedding a fight on virtual machine

00:14:54,790 --> 00:15:00,610
into the engine having a console for

00:14:57,459 --> 00:15:05,080
issuing Python comments and obviously

00:15:00,610 --> 00:15:07,779
running code and getting output if you

00:15:05,080 --> 00:15:10,779
do not know I am the author of the USG

00:15:07,779 --> 00:15:12,940
project so I have a really huge

00:15:10,779 --> 00:15:16,000
experience in embedding Python in C and

00:15:12,940 --> 00:15:19,390
C++ application so it was pretty easy

00:15:16,000 --> 00:15:21,379
for me to reach this level in basically

00:15:19,390 --> 00:15:27,289
a couple of hours of

00:15:21,379 --> 00:15:31,009
development here you see a console built

00:15:27,289 --> 00:15:33,739
over the native rearranging graphical

00:15:31,009 --> 00:15:39,099
user interface ID should be imports this

00:15:33,739 --> 00:15:42,229
car manga and I get the day output I was

00:15:39,099 --> 00:15:49,279
really really really happy but then the

00:15:42,229 --> 00:15:52,639
hard work starts the challenge I already

00:15:49,279 --> 00:15:55,249
told you that the most important class

00:15:52,639 --> 00:15:57,199
into the engine is the new object one is

00:15:55,249 --> 00:16:01,639
the class from where all the other ones

00:15:57,199 --> 00:16:04,339
Phoenix so I needed to find a mapping

00:16:01,639 --> 00:16:08,329
between a new object native C++ class

00:16:04,339 --> 00:16:10,699
and a file on another class following

00:16:08,329 --> 00:16:13,099
these rules this mapping must be faster

00:16:10,699 --> 00:16:17,179
in this time of the development I was

00:16:13,099 --> 00:16:19,699
really true I was still trying to use

00:16:17,179 --> 00:16:20,839
these plug-in to write tripoli games so

00:16:19,699 --> 00:16:24,619
performance we're really really

00:16:20,839 --> 00:16:27,619
important this mapping must take into

00:16:24,619 --> 00:16:29,769
account that both are real engine in

00:16:27,619 --> 00:16:32,989
both Python up their garbage collection

00:16:29,769 --> 00:16:34,609
C++ as obviously not a garbage

00:16:32,989 --> 00:16:40,429
collection but a real engine implemented

00:16:34,609 --> 00:16:43,220
one a funny thing in the real engine

00:16:40,429 --> 00:16:45,709
structure is that the properties of

00:16:43,220 --> 00:16:49,100
classes and functions and classes are

00:16:45,709 --> 00:16:51,919
built like you object so I needed to

00:16:49,100 --> 00:16:54,139
find a way to map this particular

00:16:51,919 --> 00:16:56,209
behavior even to Python obviously venom

00:16:54,139 --> 00:17:00,459
Python both classes and properties can

00:16:56,209 --> 00:17:06,169
be objects those are the solutions for

00:17:00,459 --> 00:17:10,610
managing the Python new object mapping I

00:17:06,169 --> 00:17:15,620
give the C++ 11 mapper to do not know

00:17:10,610 --> 00:17:20,659
C++ only added in 2011 standard the

00:17:15,620 --> 00:17:23,089
ability to addictions or fascist when

00:17:20,659 --> 00:17:25,610
they related to fight on object goes out

00:17:23,089 --> 00:17:28,240
of scope the garbage collector no fight

00:17:25,610 --> 00:17:31,460
on with very probably destroy it I

00:17:28,240 --> 00:17:35,010
prevent the garbage collector to destroy

00:17:31,460 --> 00:17:38,700
you object and map it to it because

00:17:35,010 --> 00:17:42,420
a real engine make a different decision

00:17:38,700 --> 00:17:44,970
by the right on little machine so I must

00:17:42,420 --> 00:17:46,650
ensure that you object and not destroy

00:17:44,970 --> 00:17:49,740
it without a real engine doing it

00:17:46,650 --> 00:17:51,770
because it will mean a crash of the roll

00:17:49,740 --> 00:17:56,460
editor

00:17:51,770 --> 00:17:59,670
whenever from Python I access the value

00:17:56,460 --> 00:18:02,070
object mapping I need to always check

00:17:59,670 --> 00:18:04,080
that the map view object is still valid

00:18:02,070 --> 00:18:05,570
because if it is if it is still not

00:18:04,080 --> 00:18:08,610
available

00:18:05,570 --> 00:18:12,330
it means the real engine has figured out

00:18:08,610 --> 00:18:14,550
that you object so the Python mappings

00:18:12,330 --> 00:18:18,240
maps to something that is no more valid

00:18:14,550 --> 00:18:22,830
and then as radically exposed properties

00:18:18,240 --> 00:18:26,730
and function as Python equivalent after

00:18:22,830 --> 00:18:29,940
a couple of days I came up with this so

00:18:26,730 --> 00:18:36,200
I can directly call Python script for a

00:18:29,940 --> 00:18:36,200
real engine inaudible event next step

00:18:37,850 --> 00:18:46,920
there are I think hundreds of C++

00:18:43,590 --> 00:18:49,380
classes into the editor I I think there

00:18:46,920 --> 00:18:53,160
are thousands but let's say hundreds of

00:18:49,380 --> 00:18:59,910
classes into the real engine editor and

00:18:53,160 --> 00:19:03,420
engine mapping each of them at wha

00:18:59,910 --> 00:19:06,270
Python class will be a huge work out

00:19:03,420 --> 00:19:08,730
work that I'm not going to do but the

00:19:06,270 --> 00:19:12,590
real engine exposes a reflection system

00:19:08,730 --> 00:19:16,950
so I can basically get a reference to a

00:19:12,590 --> 00:19:19,710
classroom using a string my objective

00:19:16,950 --> 00:19:22,050
was to do something like that so import

00:19:19,710 --> 00:19:26,430
the character class like if it is a

00:19:22,050 --> 00:19:28,980
native photo class and spoon in the last

00:19:26,430 --> 00:19:32,070
line a character so an instance of a

00:19:28,980 --> 00:19:34,190
character into the hello don't be scared

00:19:32,070 --> 00:19:37,950
for the slider

00:19:34,190 --> 00:19:39,420
this is how you write extension in C for

00:19:37,950 --> 00:19:43,980
fourth I dunno

00:19:39,420 --> 00:19:45,960
the interesting part is line 150 that

00:19:43,980 --> 00:19:48,600
find object camelcase

00:19:45,960 --> 00:19:52,710
function this is how we access

00:19:48,600 --> 00:19:55,409
the reflection system map of a real

00:19:52,710 --> 00:19:57,240
engine basically with find object we

00:19:55,409 --> 00:20:02,580
find a reference to a class with that

00:19:57,240 --> 00:20:06,690
name and online 155 we build a mapping

00:20:02,580 --> 00:20:11,700
within that data object and it's Python

00:20:06,690 --> 00:20:13,769
equivalent so now I have a way to to get

00:20:11,700 --> 00:20:17,070
a reference to an areal engine another

00:20:13,769 --> 00:20:23,190
class using a string in Python what I do

00:20:17,070 --> 00:20:28,850
with this I don't know if you can read

00:20:23,190 --> 00:20:31,889
it this is basically how hacker for

00:20:28,850 --> 00:20:37,440
faking the import system of Python

00:20:31,889 --> 00:20:41,909
basically whenever you import check the

00:20:37,440 --> 00:20:45,450
last line from faking porter dot classes

00:20:41,909 --> 00:20:48,750
the getter method of figure class is

00:20:45,450 --> 00:20:50,789
called so I use this technique to fake

00:20:48,750 --> 00:20:52,909
the in persistence so whenever you're

00:20:50,789 --> 00:20:56,730
imported from a real engine dot classes

00:20:52,909 --> 00:21:01,100
especially get submitted is triggered

00:20:56,730 --> 00:21:04,889
returning the equivalent classes

00:21:01,100 --> 00:21:08,100
incredibly incredibly I have unexpected

00:21:04,889 --> 00:21:09,269
results positive unexpected results the

00:21:08,100 --> 00:21:11,100
same approach work is even

00:21:09,269 --> 00:21:12,960
infrastructure in a real engineer there

00:21:11,100 --> 00:21:15,450
are objects and there are structures

00:21:12,960 --> 00:21:17,340
structures are taught by a by value like

00:21:15,450 --> 00:21:19,230
in the vast majority of languages and

00:21:17,340 --> 00:21:22,710
even for announced so with the same

00:21:19,230 --> 00:21:25,769
approach I can import the three main

00:21:22,710 --> 00:21:28,740
structures of oil engine and without

00:21:25,769 --> 00:21:31,850
knowing it without having an idea that I

00:21:28,740 --> 00:21:35,970
could really reach this kind of coverage

00:21:31,850 --> 00:21:39,330
eighty percent of the real engine for

00:21:35,970 --> 00:21:41,820
reflection system was ready so with my

00:21:39,330 --> 00:21:43,950
pattern plug-in I was already able to do

00:21:41,820 --> 00:21:50,879
all of the things we can already do with

00:21:43,950 --> 00:21:53,149
blueprint so it was a huge success third

00:21:50,879 --> 00:21:53,149
challenge

00:21:55,119 --> 00:22:00,820
scripting the development pipeline

00:21:57,789 --> 00:22:03,169
includes even a generating blueprint

00:22:00,820 --> 00:22:05,179
programmatically I know it could be

00:22:03,169 --> 00:22:09,139
something strange is like generating a

00:22:05,179 --> 00:22:13,429
language with another language but this

00:22:09,139 --> 00:22:15,320
is what people of game developers ask me

00:22:13,429 --> 00:22:18,139
especially individual in a real engine

00:22:15,320 --> 00:22:20,840
animators generally add the logic to

00:22:18,139 --> 00:22:24,139
their animation using blueprints so for

00:22:20,840 --> 00:22:29,539
them it's way more easy to use Python to

00:22:24,139 --> 00:22:32,749
generate doesn't know that notes the

00:22:29,539 --> 00:22:35,809
results are not really pretty for a

00:22:32,749 --> 00:22:40,700
photonic star but it is how this is how

00:22:35,809 --> 00:22:45,440
you can build a blueprints graph with

00:22:40,700 --> 00:22:48,440
Python what I needed to do to reach this

00:22:45,440 --> 00:22:53,379
point and is to implement Python the

00:22:48,440 --> 00:22:53,379
classes abstraction classes for graphs

00:22:54,070 --> 00:23:07,070
the gray the groundlings reader notes

00:22:59,289 --> 00:23:09,559
the big blocks and pins the arrows and

00:23:07,070 --> 00:23:15,409
the things that generate spaghetti every

00:23:09,559 --> 00:23:17,869
time the current state of the art can be

00:23:15,409 --> 00:23:20,359
seen in this tutorial basically with

00:23:17,869 --> 00:23:25,330
only Python you can generate a whole

00:23:20,359 --> 00:23:27,679
monster with its animation its brain I

00:23:25,330 --> 00:23:29,330
don't remember if you can do really a

00:23:27,679 --> 00:23:35,059
lot of things in this it is a pretty

00:23:29,330 --> 00:23:38,330
huge tutorial as before I get unexpected

00:23:35,059 --> 00:23:41,570
results this time not very positive I

00:23:38,330 --> 00:23:43,970
get the ability to script animation

00:23:41,570 --> 00:23:45,780
graphs for free it is good the other

00:23:43,970 --> 00:23:49,100
three are the

00:23:45,780 --> 00:23:51,420
bless the way in a real engine - right

00:23:49,100 --> 00:23:55,470
artificial intelligence

00:23:51,420 --> 00:23:56,870
they are like state state machine on

00:23:55,470 --> 00:23:59,760
steroids

00:23:56,870 --> 00:24:04,680
unfortunately I started getting crashes

00:23:59,760 --> 00:24:07,230
all over the base what happened I was

00:24:04,680 --> 00:24:09,330
obviously working in a way not expected

00:24:07,230 --> 00:24:12,840
by Epicure developers so I started

00:24:09,330 --> 00:24:14,370
messing with the dress code I've started

00:24:12,840 --> 00:24:17,520
playing at the same level of success

00:24:14,370 --> 00:24:22,560
class so with every error results in a

00:24:17,520 --> 00:24:25,440
brutal crash of the engine I was playing

00:24:22,560 --> 00:24:27,300
it as a visual editor so basically

00:24:25,440 --> 00:24:30,000
everything I do from Python should be

00:24:27,300 --> 00:24:33,000
doable even in there into the idle if it

00:24:30,000 --> 00:24:36,090
is not possible expect only failing from

00:24:33,000 --> 00:24:38,370
from aerial engine and especially the

00:24:36,090 --> 00:24:41,250
reflection system does not like messing

00:24:38,370 --> 00:24:46,770
up with their internal structures after

00:24:41,250 --> 00:24:50,010
a balcony this system has become really

00:24:46,770 --> 00:24:53,510
solid but it requires the one year of

00:24:50,010 --> 00:24:58,200
full-time development fourth challenge

00:24:53,510 --> 00:25:00,210
unit test here you can see a unit test

00:24:58,200 --> 00:25:03,120
ejecting that when I create a new

00:25:00,210 --> 00:25:05,640
material new shader for your graphics

00:25:03,120 --> 00:25:09,510
card and I give a name to it that name

00:25:05,640 --> 00:25:16,920
is effectively put into the the engine

00:25:09,510 --> 00:25:20,490
these are pretty easy test case first of

00:25:16,920 --> 00:25:23,010
all when we run the test from the

00:25:20,490 --> 00:25:26,520
command line with my test however you

00:25:23,010 --> 00:25:28,350
generally do from Pascha and so on a new

00:25:26,520 --> 00:25:30,690
python interpreter a new fool python

00:25:28,350 --> 00:25:34,800
interpreter is generated on your system

00:25:30,690 --> 00:25:36,390
so when the test and the whole data

00:25:34,800 --> 00:25:40,440
generated by name is erased and

00:25:36,390 --> 00:25:42,510
destroyed we cannot generate a whole new

00:25:40,440 --> 00:25:44,310
pattern interpreter into a real language

00:25:42,510 --> 00:25:46,170
will be generating a whole new

00:25:44,310 --> 00:25:50,190
unreal engine editor for running a

00:25:46,170 --> 00:25:52,500
single test so my solution was

00:25:50,190 --> 00:25:56,310
generating a Python a sub interpreter

00:25:52,500 --> 00:25:58,470
the Python CBI allows you to generate a

00:25:56,310 --> 00:26:01,020
new copy

00:25:58,470 --> 00:26:04,110
the Python mr. machine that can be

00:26:01,020 --> 00:26:07,340
destroyed without destroying the main

00:26:04,110 --> 00:26:11,490
visceral machine so when you run test

00:26:07,340 --> 00:26:13,230
written in Python a new Python mr.

00:26:11,490 --> 00:26:16,549
machine is spawned without destroying

00:26:13,230 --> 00:26:19,169
the original 182 runs with the dead

00:26:16,549 --> 00:26:20,850
standard output and standard error are

00:26:19,169 --> 00:26:24,270
mapped to the aerial Engine Python

00:26:20,850 --> 00:26:27,659
console the window we seen before and a

00:26:24,270 --> 00:26:32,340
teacher tests which run of tests we do

00:26:27,659 --> 00:26:35,789
rollback this is one of the feature of

00:26:32,340 --> 00:26:38,250
your rearranging the shot me most it is

00:26:35,789 --> 00:26:41,220
not documented with so well it is really

00:26:38,250 --> 00:26:43,429
hit them I discovered this for for case

00:26:41,220 --> 00:26:47,549
I was checking sources and I found it

00:26:43,429 --> 00:26:50,100
basically each operation in the real

00:26:47,549 --> 00:26:54,270
engine editor is a transactional one

00:26:50,100 --> 00:26:56,820
like in a database system so I can build

00:26:54,270 --> 00:27:00,090
my tester and roll back rode back

00:26:56,820 --> 00:27:02,909
everything they do in the atom so I am

00:27:00,090 --> 00:27:06,030
free to generate actors into the world

00:27:02,909 --> 00:27:14,309
check the detail good and then destroy

00:27:06,030 --> 00:27:16,830
them obviously the game taking place

00:27:14,309 --> 00:27:20,570
still something I really want to do in

00:27:16,830 --> 00:27:21,830
Python so I've started having at this

00:27:20,570 --> 00:27:25,830
abstraction

00:27:21,830 --> 00:27:28,890
they are subclasses of actor phone

00:27:25,830 --> 00:27:33,380
character Python compound in Python we

00:27:28,890 --> 00:27:36,830
will see later what is it they are a

00:27:33,380 --> 00:27:40,260
wrapper for the relative the counterpart

00:27:36,830 --> 00:27:47,039
but the with the ability to call Python

00:27:40,260 --> 00:27:49,320
code at specific events after a bunch of

00:27:47,039 --> 00:27:51,990
tests and crashes all over the place I

00:27:49,320 --> 00:27:55,049
decided to use a proxy pattern for

00:27:51,990 --> 00:27:57,179
mapping Python classes to native the

00:27:55,049 --> 00:28:01,260
real engine objects so basically you

00:27:57,179 --> 00:28:03,539
write another Python class a special

00:28:01,260 --> 00:28:06,570
attribute is injected in this class so

00:28:03,539 --> 00:28:10,200
you get access to the native Python

00:28:06,570 --> 00:28:12,080
object this is an example of an actor

00:28:10,200 --> 00:28:15,260
fully written in

00:28:12,080 --> 00:28:17,210
on the begin play method is

00:28:15,260 --> 00:28:21,740
automatically called when the game

00:28:17,210 --> 00:28:23,630
starts and the tick method Alby this is

00:28:21,740 --> 00:28:27,800
an anti-pattern it's called a table

00:28:23,630 --> 00:28:30,380
refresh of the of the game the

00:28:27,800 --> 00:28:33,380
interesting party are in that self you

00:28:30,380 --> 00:28:35,090
objective you can see your right or to

00:28:33,380 --> 00:28:37,280
the location the third view object

00:28:35,090 --> 00:28:41,360
attribute that is injected by a real

00:28:37,280 --> 00:28:45,530
engine when you map another class to an

00:28:41,360 --> 00:28:50,120
already existing object why I chose this

00:28:45,530 --> 00:28:52,250
approach first of all for almost say

00:28:50,120 --> 00:28:55,220
freeloading at each play iteration once

00:28:52,250 --> 00:28:58,580
you load a model or a class into the

00:28:55,220 --> 00:29:00,530
pattern vehicle machine that model is

00:28:58,580 --> 00:29:03,740
resonant that code is resonant but

00:29:00,530 --> 00:29:05,260
during development you want to change

00:29:03,740 --> 00:29:07,640
code when you do web development

00:29:05,260 --> 00:29:12,380
generally you restart the application

00:29:07,640 --> 00:29:15,410
server to to see code modification we

00:29:12,380 --> 00:29:17,120
can't restart the whole arena engine

00:29:15,410 --> 00:29:20,930
editor because it requires a bunch of

00:29:17,120 --> 00:29:25,100
seconds to to spawn so in this way I can

00:29:20,930 --> 00:29:27,740
call a simple entry load from from

00:29:25,100 --> 00:29:30,710
Python to reload the code of a Plexiglas

00:29:27,740 --> 00:29:32,900
in this way as I have a clean separation

00:29:30,710 --> 00:29:34,730
between a real engine for in Python

00:29:32,900 --> 00:29:38,270
especially from the garbage collection

00:29:34,730 --> 00:29:40,550
point of view as the class is not really

00:29:38,270 --> 00:29:44,830
tied in I can destroy one of them

00:29:40,550 --> 00:29:47,510
without bothering too much the other one

00:29:44,830 --> 00:29:51,250
this is something I found really

00:29:47,510 --> 00:29:53,630
interesting but others don't

00:29:51,250 --> 00:29:55,880
once you have packaged your game you

00:29:53,630 --> 00:29:59,180
have your executable with all of your

00:29:55,880 --> 00:30:02,030
vital scripts into the project directory

00:29:59,180 --> 00:30:05,000
you are free to change the fight on the

00:30:02,030 --> 00:30:08,530
Python files and basically modify all of

00:30:05,000 --> 00:30:11,230
the game logic logic I understand is not

00:30:08,530 --> 00:30:13,880
interesting thing to do for a game

00:30:11,230 --> 00:30:16,760
developer or something that it doesn't

00:30:13,880 --> 00:30:19,870
want to do from its customer obviously

00:30:16,760 --> 00:30:22,950
you are free to include not the dot PI

00:30:19,870 --> 00:30:27,659
files in your build the making of the

00:30:22,950 --> 00:30:30,090
my one goodbye to another advantage of

00:30:27,659 --> 00:30:32,730
using proxy parts and that is that they

00:30:30,090 --> 00:30:36,720
can change during gameplay the class

00:30:32,730 --> 00:30:39,179
mapped to an object a character could be

00:30:36,720 --> 00:30:41,340
mapped at some time of the game to a

00:30:39,179 --> 00:30:46,260
class and then remap got to another one

00:30:41,340 --> 00:30:48,659
during gameplay this is another

00:30:46,260 --> 00:30:51,299
challenge I'm still working on and I'm

00:30:48,659 --> 00:30:54,740
still failing at it for those people

00:30:51,299 --> 00:30:58,980
that don't like the proxy pattern

00:30:54,740 --> 00:31:04,769
basically I want to allow the developer

00:30:58,980 --> 00:31:08,240
to subclass native a real engine classes

00:31:04,769 --> 00:31:12,289
with Python classes with something a bit

00:31:08,240 --> 00:31:19,049
strange and immoral for for some people

00:31:12,289 --> 00:31:22,080
as you can see as aerial engine uses C++

00:31:19,049 --> 00:31:24,809
and it's strictly typed I've used Python

00:31:22,080 --> 00:31:29,549
3 a notation for specifying a real

00:31:24,809 --> 00:31:33,440
engine what type of value this function

00:31:29,549 --> 00:31:33,440
taken and talking about on chip own

00:31:37,070 --> 00:31:46,080
those are the steps I did for reaching

00:31:40,380 --> 00:31:52,649
this broken result I use the pad

00:31:46,080 --> 00:31:54,929
orientation for enforcing types might um

00:31:52,649 --> 00:31:57,299
be KML and something like a data

00:31:54,929 --> 00:31:59,940
description language so I use Python to

00:31:57,299 --> 00:32:02,460
inform a real engine or now to build its

00:31:59,940 --> 00:32:05,870
internal classes I needed to rely on

00:32:02,460 --> 00:32:12,870
meta programming a lot and a lot of pain

00:32:05,870 --> 00:32:20,610
for reaching it result why fight on meta

00:32:12,870 --> 00:32:23,159
programming because character the class

00:32:20,610 --> 00:32:25,470
from each master cleaner it is an object

00:32:23,159 --> 00:32:30,029
it is not a class so I need to write

00:32:25,470 --> 00:32:33,460
some logic to hear it from an object

00:32:30,029 --> 00:32:38,440
that is not a class and generate and you

00:32:33,460 --> 00:32:42,940
this is how you can fake the narrative

00:32:38,440 --> 00:32:45,460
system you can see the funny subclass is

00:32:42,940 --> 00:32:50,800
a child of a class that is an instance

00:32:45,460 --> 00:32:51,220
of fake based class it will blow your

00:32:50,800 --> 00:32:59,410
mind

00:32:51,220 --> 00:33:03,400
understand unfortunately as I already

00:32:59,410 --> 00:33:07,720
said is the really begin it will crash

00:33:03,400 --> 00:33:09,580
your your system incredibly as different

00:33:07,720 --> 00:33:12,460
behaviors on different ten generation I

00:33:09,580 --> 00:33:16,240
really have no idea or I did I mean it

00:33:12,460 --> 00:33:20,100
happens it is absolutely a good exercise

00:33:16,240 --> 00:33:23,530
to know how a real engine internals work

00:33:20,100 --> 00:33:25,720
I think it is not so earthly because the

00:33:23,530 --> 00:33:28,690
proxy public needs way more safer and

00:33:25,720 --> 00:33:30,580
solid but it's obviously a lot really

00:33:28,690 --> 00:33:35,140
really cool so I think I will try to

00:33:30,580 --> 00:33:37,920
improve it what does he need to do to

00:33:35,140 --> 00:33:42,520
improve the project I would like to

00:33:37,920 --> 00:33:44,290
stabilize this subtracting ABI I would

00:33:42,520 --> 00:33:45,670
like to introduce mobile integration

00:33:44,290 --> 00:33:49,420
because currently you can build game

00:33:45,670 --> 00:33:53,080
soda for Linux Windows and Mac you I

00:33:49,420 --> 00:33:53,680
would like a stronger integration with

00:33:53,080 --> 00:33:56,200
pdbs

00:33:53,680 --> 00:34:00,190
for simplify debugging of Fido script

00:33:56,200 --> 00:34:06,790
into the engine this is a really huge

00:34:00,190 --> 00:34:09,810
task covered there or C++ API I've still

00:34:06,790 --> 00:34:13,419
adventure of the dog sir first of all

00:34:09,810 --> 00:34:17,050
should they follow in the C part

00:34:13,419 --> 00:34:20,020
integration of pyonium should I follow

00:34:17,050 --> 00:34:24,520
the fight on C coding styler so

00:34:20,020 --> 00:34:27,250
underscore lowercase or the C++ 11 with

00:34:24,520 --> 00:34:29,470
full camel case in the example code you

00:34:27,250 --> 00:34:31,389
have seen before the implementation of

00:34:29,470 --> 00:34:33,669
reflection you have seen a through

00:34:31,389 --> 00:34:37,919
different style in the code it is

00:34:33,669 --> 00:34:40,360
something really really ugly but

00:34:37,919 --> 00:34:42,190
currency of the spirit made a decision

00:34:40,360 --> 00:34:45,230
should they invest more on threads

00:34:42,190 --> 00:34:48,710
threads are supported out-of-the-box

00:34:45,230 --> 00:34:52,100
the Gila has become not a huge problem I

00:34:48,710 --> 00:34:54,770
added a bunch of tricks to reduce its

00:34:52,100 --> 00:34:58,520
impact by default the binaries you

00:34:54,770 --> 00:35:03,160
download from the sides of the not ready

00:34:58,520 --> 00:35:08,560
enabled there are bills we trade labels

00:35:03,160 --> 00:35:11,030
when I started the project a lot of

00:35:08,560 --> 00:35:17,690
Python developers are really used to

00:35:11,030 --> 00:35:20,180
Maya to be CEO Maxim want to use QT in

00:35:17,690 --> 00:35:22,010
their project so I invested a lot in

00:35:20,180 --> 00:35:24,760
easy integration between between faculty

00:35:22,010 --> 00:35:28,600
and Phi side into the engine

00:35:24,760 --> 00:35:31,250
nowadays I have exposed the then at it

00:35:28,600 --> 00:35:33,860
graphically using gimme user interface

00:35:31,250 --> 00:35:38,740
of aerial engine so it is called later

00:35:33,860 --> 00:35:43,130
so it is a good solution instead of QT

00:35:38,740 --> 00:35:46,610
later is better on purpose represents or

00:35:43,130 --> 00:35:50,300
C negresses so you can write some kind

00:35:46,610 --> 00:35:53,510
of readable interface I've implemented

00:35:50,300 --> 00:35:56,180
it in PI donor trying to give to the

00:35:53,510 --> 00:35:59,870
developer the same taste of the C++ one

00:35:56,180 --> 00:36:03,410
this is how you can generate a window in

00:35:59,870 --> 00:36:05,240
the real engine with a bath or Nanak

00:36:03,410 --> 00:36:08,240
center when the button is clicked the

00:36:05,240 --> 00:36:10,520
cellular final function is called into

00:36:08,240 --> 00:36:16,760
the bathroom there is a text block with

00:36:10,520 --> 00:36:19,100
a simple string currently I'm dreaming

00:36:16,760 --> 00:36:20,930
about more orchestration the game

00:36:19,100 --> 00:36:23,480
industry there is still a lot of a

00:36:20,930 --> 00:36:27,650
manual work I would like to integrate

00:36:23,480 --> 00:36:30,610
the acting for behavior test another

00:36:27,650 --> 00:36:33,560
dream is build some kind of

00:36:30,610 --> 00:36:37,220
domain-specific language for writing

00:36:33,560 --> 00:36:39,980
shaders so material and or rubles and

00:36:37,220 --> 00:36:45,170
obviously someone music Inc for jubilee

00:36:39,980 --> 00:36:49,010
gameplay these two company Cadillac only

00:36:45,170 --> 00:36:52,640
from Los Angeles and you think it's from

00:36:49,010 --> 00:36:55,290
Toronto Canada they heavily sponsored

00:36:52,640 --> 00:36:58,890
the development of the project data

00:36:55,290 --> 00:37:02,490
at least dozens dozens of company

00:36:58,890 --> 00:37:05,670
already heavily using it but this true

00:37:02,490 --> 00:37:10,109
are the ones that put money into the

00:37:05,670 --> 00:37:12,420
effort if you are into the scientific

00:37:10,109 --> 00:37:16,230
academic world and we would like to

00:37:12,420 --> 00:37:18,390
start to draw in your academic

00:37:16,230 --> 00:37:21,180
researcher results into a powerful

00:37:18,390 --> 00:37:23,910
graphical engines it is a really gentle

00:37:21,180 --> 00:37:27,270
introduction for Podesta that includes

00:37:23,910 --> 00:37:30,660
matplotlib the into your game so

00:37:27,270 --> 00:37:34,650
basically whenever the player works over

00:37:30,660 --> 00:37:37,140
one of that cholera tube the graphs on

00:37:34,650 --> 00:37:40,440
the car Specter it is updated with

00:37:37,140 --> 00:37:47,780
generating and generating annual a new

00:37:40,440 --> 00:37:50,700
pie chart I need to switch laptop

00:37:47,780 --> 00:37:53,940
because unfortunately a real engine is

00:37:50,700 --> 00:37:56,720
able to meltdown my issue mister Pro so

00:37:53,940 --> 00:37:56,720
give me a minute

00:39:04,180 --> 00:39:15,220
okay can you see it so this is the third

00:39:10,900 --> 00:39:18,309
person template you can generate from

00:39:15,220 --> 00:39:20,799
the standard aerial engine distribution

00:39:18,309 --> 00:39:25,299
I have added on the level a bunch of

00:39:20,799 --> 00:39:27,849
faces of formal spaces so when I play

00:39:25,299 --> 00:39:35,279
the game I can move into the world and

00:39:27,849 --> 00:39:35,279
six park in an endosome wall during a

00:39:35,309 --> 00:39:44,950
two hundred eight hundred Sheldon and so

00:39:38,740 --> 00:39:47,710
on my exact objective now is to allow

00:39:44,950 --> 00:39:51,760
the player the money limit to see and

00:39:47,710 --> 00:39:54,039
recognize faces uses using facial

00:39:51,760 --> 00:39:57,539
recognition included in open energy be

00:39:54,039 --> 00:40:02,200
of a computer vision all in Python

00:39:57,539 --> 00:40:06,279
first step is adding a Python actor into

00:40:02,200 --> 00:40:09,720
the scene it will implement the highs

00:40:06,279 --> 00:40:13,539
the side of our player

00:40:09,720 --> 00:40:19,240
so in the list of actors I searched for

00:40:13,539 --> 00:40:22,569
my actor and I drag it into the same on

00:40:19,240 --> 00:40:24,309
the right side you can see the fields

00:40:22,569 --> 00:40:32,250
where you can specify the model and the

00:40:24,309 --> 00:40:32,250
class to map to this actor we will start

00:40:34,260 --> 00:40:49,630
with this simple code into the init

00:40:41,020 --> 00:40:53,619
method we better you initialize a timer

00:40:49,630 --> 00:40:56,440
of 1 seconds begin play you simply print

00:40:53,619 --> 00:40:58,690
some message into the console and then

00:40:56,440 --> 00:41:01,420
this value of tail our timer is

00:40:58,690 --> 00:41:03,640
decreased a terrific and when it reaches

00:41:01,420 --> 00:41:05,500
zero it means the time has elapsed at

00:41:03,640 --> 00:41:08,289
the end we start counting it is our very

00:41:05,500 --> 00:41:15,000
important other just to check the python

00:41:08,289 --> 00:41:15,000
actor is is working so the model is i

00:41:15,160 --> 00:41:17,280
earth

00:41:23,950 --> 00:41:34,690
and the class is site which is our

00:41:29,980 --> 00:41:37,750
special console hit play and on the

00:41:34,690 --> 00:41:38,549
bottom you should see on red the lapse

00:41:37,750 --> 00:41:43,319
in time

00:41:38,549 --> 00:41:43,319
so our Python actor is really working

00:41:44,940 --> 00:41:53,230
let's go on second step is adding as a

00:41:50,200 --> 00:41:57,119
special component to our actor

00:41:53,230 --> 00:41:59,589
it is the scene capture component 2d

00:41:57,119 --> 00:42:03,640
basically you can see it as a visceral

00:41:59,589 --> 00:42:06,369
camera that track anything it sees and

00:42:03,640 --> 00:42:09,849
save it into a text or a text ariza

00:42:06,369 --> 00:42:13,150
memory area into the your graphics card

00:42:09,849 --> 00:42:17,200
that can be drawn on the screen during

00:42:13,150 --> 00:42:19,390
the initialization we generate a special

00:42:17,200 --> 00:42:22,299
texture known as the render target it is

00:42:19,390 --> 00:42:26,700
where our capture conflict will write

00:42:22,299 --> 00:42:30,880
data that called it what I'm saying I

00:42:26,700 --> 00:42:32,859
create a text or 512 or 512 you should

00:42:30,880 --> 00:42:36,069
always try to use the power of through

00:42:32,859 --> 00:42:40,809
text when doing game development it is a

00:42:36,069 --> 00:42:43,180
transient object it means it is not an

00:42:40,809 --> 00:42:46,750
asset on your pipeline when the game

00:42:43,180 --> 00:42:49,779
ends this object is destroyed the

00:42:46,750 --> 00:42:51,430
special curve is called automatically if

00:42:49,779 --> 00:42:53,920
defined before

00:42:51,430 --> 00:42:57,190
initializing components in your actor so

00:42:53,920 --> 00:43:00,519
we want to have a new component so we

00:42:57,190 --> 00:43:03,250
use the Zook to create it this is how we

00:43:00,519 --> 00:43:07,779
have a component in our code the same

00:43:03,250 --> 00:43:12,069
capture one we specify in which text he

00:43:07,779 --> 00:43:15,400
has to write data and we specify that we

00:43:12,069 --> 00:43:17,500
want the linear values of the colors it

00:43:15,400 --> 00:43:19,829
is something I will not want to invest

00:43:17,500 --> 00:43:24,539
time in this player is not the tropical

00:43:19,829 --> 00:43:30,609
interesting for for us so I go there and

00:43:24,539 --> 00:43:31,960
change the model to eyes second right

00:43:30,609 --> 00:43:37,030
play

00:43:31,960 --> 00:43:39,910
and here you can see by actor with a new

00:43:37,030 --> 00:43:42,940
component scene castle on the right it

00:43:39,910 --> 00:43:45,460
is already tracking it what is it

00:43:42,940 --> 00:43:49,030
unfortunately we cannot see what the

00:43:45,460 --> 00:43:52,600
player is seeing before that's doing

00:43:49,030 --> 00:43:56,230
this we have to fix another problem this

00:43:52,600 --> 00:43:59,020
PI actor has no position into the world

00:43:56,230 --> 00:44:10,030
our objective is to attach it over the

00:43:59,020 --> 00:44:14,880
head of the player here all is the same

00:44:10,030 --> 00:44:19,510
once the game starts we get a reference

00:44:14,880 --> 00:44:24,400
to the phone used by the player in our

00:44:19,510 --> 00:44:28,270
case the manikin the robot working on

00:44:24,400 --> 00:44:32,130
the on the screen and then we attack our

00:44:28,270 --> 00:44:35,710
cell phone the object they injected the

00:44:32,130 --> 00:44:37,870
field into the proxy class and we attach

00:44:35,710 --> 00:44:40,930
it to the mesh component of the

00:44:37,870 --> 00:44:47,590
mannequins into its head bone what is a

00:44:40,930 --> 00:44:50,530
bone here you can see our players and on

00:44:47,590 --> 00:45:00,010
the left you see the bones mapping to

00:44:50,530 --> 00:45:02,260
its measure bonzer are magically objects

00:45:00,010 --> 00:45:08,950
map the to a group of vertices so

00:45:02,260 --> 00:45:13,660
whenever I move a bones vertices follow

00:45:08,950 --> 00:45:19,110
it so our objective is not touched our

00:45:13,660 --> 00:45:19,110
eyes to the head of the real

00:45:22,180 --> 00:45:25,180
surprise

00:45:29,280 --> 00:45:36,200
so if we go back you see the third

00:45:31,890 --> 00:45:45,630
person character it is our mannequin as

00:45:36,200 --> 00:45:50,370
pilot for second as it child okay here

00:45:45,630 --> 00:45:53,940
you can see the axis of the character

00:45:50,370 --> 00:45:55,590
and here you can see the axis of our

00:45:53,940 --> 00:45:57,540
fight on actor as you can see it is

00:45:55,590 --> 00:46:00,480
moving because they have the of the

00:45:57,540 --> 00:46:10,290
mannequin by while in idle to some come

00:46:00,480 --> 00:46:14,070
of breath okay next step we want to

00:46:10,290 --> 00:46:16,620
develop add a head-up display some kind

00:46:14,070 --> 00:46:22,260
of 3d graphics onto the screen so we can

00:46:16,620 --> 00:46:26,820
see what the player is seeing we have

00:46:22,260 --> 00:46:29,480
added this code so we spawn a new actor

00:46:26,820 --> 00:46:32,700
into the scene had is another factor

00:46:29,480 --> 00:46:35,910
directly specifying the vital model in

00:46:32,700 --> 00:46:38,970
the pattern class to use we get a

00:46:35,910 --> 00:46:40,650
reference to the proxy class mapped to

00:46:38,970 --> 00:46:43,860
this tab that's a week we can start

00:46:40,650 --> 00:46:45,840
injecting values into it and we specify

00:46:43,860 --> 00:46:49,020
into the proxy class which is the

00:46:45,840 --> 00:46:51,300
texture to draw and finally we tell the

00:46:49,020 --> 00:46:55,620
engine that is new Python heart should

00:46:51,300 --> 00:46:57,930
be the player one so the default created

00:46:55,620 --> 00:47:04,140
one is destroyed that so our Python one

00:46:57,930 --> 00:47:06,300
will be you this is our harder hard

00:47:04,140 --> 00:47:09,150
proxy class expects you to define a draw

00:47:06,300 --> 00:47:11,550
hot metal the way you can call graphics

00:47:09,150 --> 00:47:16,980
primitives like join textures the lines

00:47:11,550 --> 00:47:19,050
rectangles and so on until texture to

00:47:16,980 --> 00:47:22,650
draw I remember you it is defined in the

00:47:19,050 --> 00:47:25,590
other class it is not defined it exits

00:47:22,650 --> 00:47:28,860
from the main method if it is defined it

00:47:25,590 --> 00:47:35,300
will start drawing it at the zero zero

00:47:28,860 --> 00:47:35,300
position so top left with these sides so

00:47:51,000 --> 00:47:53,780
so therefore

00:47:56,300 --> 00:48:05,190
okay on the top left you can see what

00:48:00,660 --> 00:48:09,840
the they are seeing you can see even the

00:48:05,190 --> 00:48:12,510
balancing when it runs or when breath so

00:48:09,840 --> 00:48:18,810
basically we have a texture containing

00:48:12,510 --> 00:48:24,210
all of the pixel the player using next

00:48:18,810 --> 00:48:28,110
step for good results OpenCV needs a

00:48:24,210 --> 00:48:33,930
grayscale image so we need to generate a

00:48:28,110 --> 00:48:42,840
grey scale variants of this texture the

00:48:33,930 --> 00:48:46,410
split using this is the fifth one this

00:48:42,840 --> 00:48:48,930
time we import the CV - it is the

00:48:46,410 --> 00:48:52,860
wrapper for open C be a new pilot

00:48:48,930 --> 00:48:59,730
because of in Sibelius new pi/4 is full

00:48:52,860 --> 00:49:04,200
of the data in the tick method of our

00:48:59,730 --> 00:49:08,640
Iser we get the data at a byte array of

00:49:04,200 --> 00:49:11,190
the texture of the data we are seeing we

00:49:08,640 --> 00:49:14,040
inform we generate a new new file a

00:49:11,190 --> 00:49:16,890
giving a special dimensions so we have a

00:49:14,040 --> 00:49:21,150
three dimensional array with four

00:49:16,890 --> 00:49:25,230
components LGB a and the sides of the

00:49:21,150 --> 00:49:28,320
texture and we use this open CB function

00:49:25,230 --> 00:49:30,210
to convert to this texture from vga to

00:49:28,320 --> 00:49:33,090
greyscale so basically we have a bite

00:49:30,210 --> 00:49:36,480
for a single pixel of the image on the

00:49:33,090 --> 00:49:44,130
other side the hard class is changed it

00:49:36,480 --> 00:49:47,940
is now in the hub stack on the model we

00:49:44,130 --> 00:49:51,210
create another texture with a single

00:49:47,940 --> 00:49:55,410
channel for for color another transient

00:49:51,210 --> 00:49:57,840
transient texture this time we need to

00:49:55,410 --> 00:50:00,420
cooperate with a real engine garbage

00:49:57,840 --> 00:50:03,180
collector because this texture is never

00:50:00,420 --> 00:50:05,430
used by all engine it even does not know

00:50:03,180 --> 00:50:07,380
it exists so after a bunch of time it

00:50:05,430 --> 00:50:08,650
will destroy it we do not want this so

00:50:07,380 --> 00:50:11,230
we inform with this mess

00:50:08,650 --> 00:50:13,420
that we are responsible for destroying

00:50:11,230 --> 00:50:18,300
it when they fight on objective

00:50:13,420 --> 00:50:21,580
destroyed and in addition to drawing

00:50:18,300 --> 00:50:27,160
what they're facing in full-color we

00:50:21,580 --> 00:50:30,340
draw another texture below it without

00:50:27,160 --> 00:50:32,050
ignoring transparency channel because we

00:50:30,340 --> 00:50:39,630
have a single byte four inch taller so I

00:50:32,050 --> 00:50:39,630
needed to add these additional values so

00:50:45,030 --> 00:50:52,570
so we have the same view but in

00:50:48,730 --> 00:50:56,760
grayscale now OpenCV is able to

00:50:52,570 --> 00:51:01,290
recognize faces from the below image

00:50:56,760 --> 00:51:04,480
this is the last version of the code

00:51:01,290 --> 00:51:06,670
this is this remain the same all of the

00:51:04,480 --> 00:51:18,340
available logical has been done in the

00:51:06,670 --> 00:51:21,550
heart so we set up a cascade classifier

00:51:18,340 --> 00:51:25,440
it is the way OpenCV uses Becca

00:51:21,550 --> 00:51:30,670
algorithm Province EB uses to detect

00:51:25,440 --> 00:51:34,290
something in this case I have feed it

00:51:30,670 --> 00:51:40,000
with the information about frontal faces

00:51:34,290 --> 00:51:45,040
and then at each iteration I try to

00:51:40,000 --> 00:51:50,230
detect faces this function detect

00:51:45,040 --> 00:51:53,770
multiscale and it will return and quadra

00:51:50,230 --> 00:51:57,660
dimensional array with the information

00:51:53,770 --> 00:51:57,660
about where the face is

00:52:05,000 --> 00:52:17,060
ok you should see green see it ok

00:52:11,420 --> 00:52:22,040
whenever you detect a face let's see if

00:52:17,060 --> 00:52:25,910
we can recognize Spock here it is it is

00:52:22,040 --> 00:52:34,160
even recognizing Donna I push spoke

00:52:25,910 --> 00:52:37,240
awake people with bear that are really

00:52:34,160 --> 00:52:43,820
hard to recognize but this time is

00:52:37,240 --> 00:52:46,430
staking it you never okay I don't know

00:52:43,820 --> 00:52:50,150
if it is a good thing but it is not able

00:52:46,430 --> 00:52:52,210
to recognize a terminator I don't know

00:52:50,150 --> 00:52:55,760
if you there babe

00:52:52,210 --> 00:53:00,560
it is interesting that is not able to

00:52:55,760 --> 00:53:02,750
recognize sera corner I think it is

00:53:00,560 --> 00:53:05,780
because of the goggles of the battle

00:53:02,750 --> 00:53:11,540
goggle so that are really strange for to

00:53:05,780 --> 00:53:13,609
recognized for a machine last part by

00:53:11,540 --> 00:53:16,700
default a real engine has no features

00:53:13,609 --> 00:53:21,410
for using the webcam of your mobile

00:53:16,700 --> 00:53:25,310
phone or your of your laptop but OpenCV

00:53:21,410 --> 00:53:30,470
is able to do it so I created this cube

00:53:25,310 --> 00:53:37,849
and I added it a Python component method

00:53:30,470 --> 00:53:40,880
with the utils webcam cluster that

00:53:37,849 --> 00:53:43,760
initialize a video capture create a

00:53:40,880 --> 00:53:49,160
transient texture with the sides of the

00:53:43,760 --> 00:53:51,920
text to my webcam is able to to manage

00:53:49,160 --> 00:53:54,589
and I assign that texture to the

00:53:51,920 --> 00:53:57,290
material to the shader assigned to the

00:53:54,589 --> 00:54:00,790
to the cube at every frame I try to

00:53:57,290 --> 00:54:03,920
capture image from the web camera I

00:54:00,790 --> 00:54:06,830
convert it to a suitable format for my

00:54:03,920 --> 00:54:09,220
graphics card and I assign the data to

00:54:06,830 --> 00:54:09,220
my text

00:54:16,099 --> 00:54:20,450
okay I think you should see me

00:54:24,350 --> 00:54:31,810
oh okay it is see me

00:54:35,390 --> 00:54:48,189
thank you

00:54:36,780 --> 00:54:48,189
[Applause]

00:54:49,000 --> 00:55:01,610
yes work who has a question for Alberto

00:54:53,690 --> 00:55:04,190
I had been working for Crytek for five

00:55:01,610 --> 00:55:07,520
years and I know what game development

00:55:04,190 --> 00:55:12,020
is and I know what pain it is to code

00:55:07,520 --> 00:55:17,420
game logic in C++ or in Lua script and

00:55:12,020 --> 00:55:22,280
how hard we look unitary mo Lua script

00:55:17,420 --> 00:55:26,030
is not so painful as yes yes but anyway

00:55:22,280 --> 00:55:29,120
so I think integrating game game logic

00:55:26,030 --> 00:55:33,440
and coordinate and Python is a really

00:55:29,120 --> 00:55:40,100
great idea and it's absolutely brilliant

00:55:33,440 --> 00:55:42,910
so it's Bravo I yes and I wanted to ask

00:55:40,100 --> 00:55:46,400
you did you have any performance issues

00:55:42,910 --> 00:55:49,010
especially in thick methods calling it

00:55:46,400 --> 00:55:53,360
in update loop and everything

00:55:49,010 --> 00:55:55,820
performance issues yes yes I started

00:55:53,360 --> 00:55:58,090
having performance issues when I started

00:55:55,820 --> 00:56:00,560
doing it too much with the game

00:55:58,090 --> 00:56:04,880
acquiring everything Gila is one of them

00:56:00,560 --> 00:56:07,670
must've a part into the pattern vector

00:56:04,880 --> 00:56:09,470
machine so the default build view you

00:56:07,670 --> 00:56:10,850
get from the site of the guild

00:56:09,470 --> 00:56:14,000
completely disabled so you cannot use

00:56:10,850 --> 00:56:20,290
Python threads and the impact of Python

00:56:14,000 --> 00:56:23,330
is not so bad last year blueprints was

00:56:20,290 --> 00:56:25,250
an interpreted language and Python was

00:56:23,330 --> 00:56:27,200
faster than blueprints

00:56:25,250 --> 00:56:30,230
now blueprints are compiled to native

00:56:27,200 --> 00:56:33,670
C++ code so unfortunately are faster

00:56:30,230 --> 00:56:41,050
than the Bible thank you

00:56:33,670 --> 00:56:41,050
another question come on

00:56:47,220 --> 00:56:53,920
just a quick question how do people

00:56:51,339 --> 00:56:55,630
interact with Python inside unreal is

00:56:53,920 --> 00:56:59,800
there only the rattle or is there also

00:56:55,630 --> 00:57:01,990
an ability to maybe ten the the ribbon

00:56:59,800 --> 00:57:03,790
bar there on top like putting little

00:57:01,990 --> 00:57:06,670
script into recharacterization

00:57:03,790 --> 00:57:09,730
I cannot hear you oh sorry I try again I

00:57:06,670 --> 00:57:14,579
was wondering how people would interact

00:57:09,730 --> 00:57:18,010
with the Python inside unreal is there

00:57:14,579 --> 00:57:20,950
so I saw the rattle of Bentley and just

00:57:18,010 --> 00:57:23,440
it's the own also a thing plan to put

00:57:20,950 --> 00:57:25,750
like code snippets into buttons on the

00:57:23,440 --> 00:57:30,540
top of the ribbon for users that are

00:57:25,750 --> 00:57:36,940
maybe not so much also deep into coding

00:57:30,540 --> 00:57:39,180
and I was just wondering he GUI all

00:57:36,940 --> 00:57:39,180
right

00:57:48,370 --> 00:57:56,780
yeah I am so I thought the repple so

00:57:53,960 --> 00:58:00,020
people wouldn't interact with unreal in

00:57:56,780 --> 00:58:03,560
Python via the rental and maybe there's

00:58:00,020 --> 00:58:06,020
some recurring tasks people have while

00:58:03,560 --> 00:58:08,420
working with unreal I was wondering if

00:58:06,020 --> 00:58:10,730
there was also planned maybe to have

00:58:08,420 --> 00:58:14,600
some of these buttons that I see on the

00:58:10,730 --> 00:58:16,780
top - - in corporate Titan snippet in

00:58:14,600 --> 00:58:16,780
there

00:58:18,850 --> 00:58:39,170
yeah yeah I imagine cool okay mmm

00:58:36,560 --> 00:58:40,820
another question no no I don't need to

00:58:39,170 --> 00:58:43,340
run okay that's fine

00:58:40,820 --> 00:58:49,300
Thank You Roberto

00:58:43,340 --> 00:58:49,300

YouTube URL: https://www.youtube.com/watch?v=_38csFR5Hrw


