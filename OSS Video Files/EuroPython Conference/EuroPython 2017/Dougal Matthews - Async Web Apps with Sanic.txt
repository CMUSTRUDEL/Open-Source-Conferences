Title: Dougal Matthews - Async Web Apps with Sanic
Publication date: 2017-09-17
Playlist: EuroPython 2017
Description: 
	Async Web Apps with Sanic
[EuroPython 2017 - Talk - 2017-07-10 - Anfiteatro 1]
[Rimini, Italy]

This talk will introduce you to Sanic, the Python 3 web framework that supports async request handlers with a simple, Flask-like, API.

We will start with a Sanic overview and compare it with other similar options before looking at the API and working through a basic app. Our goal here will be to get a feel for the Sanic API and demonstrate how it fits together. After this we will cover some of the more unique and interesting possibilities with Sanic, such as support for websockets and HTTP2.

A web framework is often only as powerful as its ecosystem, so we will take a look at some of the popular Sanic extensions for databases, templating and testing.

License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2017.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:04,150 --> 00:00:10,270
I am thanks everyone for coming along

00:00:06,399 --> 00:00:12,309
today the first thing that I want to

00:00:10,270 --> 00:00:14,370
sort of talk about quickly is this of

00:00:12,309 --> 00:00:16,509
the error I made in the title of my talk

00:00:14,370 --> 00:00:20,169
specifically is to do with the word app

00:00:16,509 --> 00:00:22,480
I mean what what is a web app so if you

00:00:20,169 --> 00:00:24,489
just ignore that and just think of it as

00:00:22,480 --> 00:00:27,820
more as building web things of sanics

00:00:24,489 --> 00:00:30,669
and which I know is not much more

00:00:27,820 --> 00:00:33,340
helpful but you'll maybe understand more

00:00:30,669 --> 00:00:36,370
as I go into the talk but I think it

00:00:33,340 --> 00:00:37,989
wasn't the the best title so what I

00:00:36,370 --> 00:00:40,269
really want to do today is talk to you

00:00:37,989 --> 00:00:43,839
about my journey learning sanic and

00:00:40,269 --> 00:00:45,850
learning the async IO ecosystem in terms

00:00:43,839 --> 00:00:50,649
of doings of web development and web

00:00:45,850 --> 00:00:53,949
frameworks but first of all just quickly

00:00:50,649 --> 00:00:55,749
Who am I I'm a Scottish pythonista and

00:00:53,949 --> 00:00:59,679
speaking of which is extremely hot here

00:00:55,749 --> 00:01:01,089
and my hotel AC is not working so if I

00:00:59,679 --> 00:01:03,699
fall asleep it still I didn't sleep well

00:01:01,089 --> 00:01:05,710
last night and otherwise I'm in the

00:01:03,699 --> 00:01:07,090
Platinum class co-organizer I'm an

00:01:05,710 --> 00:01:08,650
open-source maintainer of a number of

00:01:07,090 --> 00:01:11,470
projects the probably the most popular

00:01:08,650 --> 00:01:13,870
is MK Docs but I've actually been fairly

00:01:11,470 --> 00:01:18,130
inactive on that lately I'm a nothing

00:01:13,870 --> 00:01:21,370
site developer Red Hat as my job and in

00:01:18,130 --> 00:01:23,920
the past 15 years almost I've done a lot

00:01:21,370 --> 00:01:25,780
of Jango and flask development so I've

00:01:23,920 --> 00:01:26,530
done quite a lot of web development but

00:01:25,780 --> 00:01:30,370
this has been really quite an

00:01:26,530 --> 00:01:32,730
interesting lesson for me in terms of

00:01:30,370 --> 00:01:35,290
learning about async web frameworks

00:01:32,730 --> 00:01:37,870
because while the actual web development

00:01:35,290 --> 00:01:40,330
can be very similar there's quite a nice

00:01:37,870 --> 00:01:42,310
service there's quite a specific mindset

00:01:40,330 --> 00:01:47,080
that you need to take because otherwise

00:01:42,310 --> 00:01:48,310
they're kind of pitfalls at your hip but

00:01:47,080 --> 00:01:51,400
first of all I just want to talk a bit

00:01:48,310 --> 00:01:55,210
about how we how we got to this ok so

00:01:51,400 --> 00:01:56,770
you're checking updating and how did we

00:01:55,210 --> 00:02:00,070
get to this point of where people are

00:01:56,770 --> 00:02:03,340
able to use async i/o for their for this

00:02:00,070 --> 00:02:04,780
kind of development and I think a lot of

00:02:03,340 --> 00:02:06,880
it comes from the transition that's

00:02:04,780 --> 00:02:08,679
happening from Python 2 to 3 I feel like

00:02:06,880 --> 00:02:10,869
as a community we are kind of at the

00:02:08,679 --> 00:02:12,489
tipping point where most people should

00:02:10,869 --> 00:02:13,989
either be on Python 3 by now or they

00:02:12,489 --> 00:02:15,849
should have a clear transition to Python

00:02:13,989 --> 00:02:17,060
3 that's underway and if not you're

00:02:15,849 --> 00:02:18,470
going to be enough

00:02:17,060 --> 00:02:20,510
of a nasty place and not too long I

00:02:18,470 --> 00:02:23,270
think but if you can make the assumption

00:02:20,510 --> 00:02:25,430
that most people are on Python 3 then

00:02:23,270 --> 00:02:26,930
most of them are also on Python 3.3 or

00:02:25,430 --> 00:02:33,470
above which means they have the ability

00:02:26,930 --> 00:02:35,690
to use async i/o so this talk is not

00:02:33,470 --> 00:02:37,970
really about what async i/o is I just

00:02:35,690 --> 00:02:39,739
want to quickly define it for people as

00:02:37,970 --> 00:02:41,480
I can which is a fairly tricky thing to

00:02:39,739 --> 00:02:43,160
do because it's a it's something which

00:02:41,480 --> 00:02:46,760
could have multiple talks itself it's a

00:02:43,160 --> 00:02:51,320
quite a big project essentially a teenth

00:02:46,760 --> 00:02:53,660
i/o provides people a way to have single

00:02:51,320 --> 00:02:57,110
threaded concurrent code using

00:02:53,660 --> 00:02:58,790
co-routines and essentially you have an

00:02:57,110 --> 00:03:02,000
event loop so this is something which

00:02:58,790 --> 00:03:04,790
isn't particularly new it's not an

00:03:02,000 --> 00:03:06,800
innovation in a sink io twisted is been

00:03:04,790 --> 00:03:09,680
doing it for a long time tornado done it

00:03:06,800 --> 00:03:15,470
more recently no gif made it very

00:03:09,680 --> 00:03:17,269
popular in the JavaScript world however

00:03:15,470 --> 00:03:18,769
I think the sort of the real important

00:03:17,269 --> 00:03:20,810
thing about Asian clio is it's given

00:03:18,769 --> 00:03:22,400
everyone a common base to work on you

00:03:20,810 --> 00:03:23,630
don't end up with silos where there's

00:03:22,400 --> 00:03:25,100
all these sort of twisted projects

00:03:23,630 --> 00:03:27,440
everyone's can hopefully everyone all

00:03:25,100 --> 00:03:29,420
start moving towards Asia and Cairo is

00:03:27,440 --> 00:03:30,829
the standard event loop which they can

00:03:29,420 --> 00:03:32,690
then build an ecosystem around and

00:03:30,829 --> 00:03:33,950
improve things so I think that's a

00:03:32,690 --> 00:03:35,090
really important and I think that's the

00:03:33,950 --> 00:03:37,790
most important thing with the Asian

00:03:35,090 --> 00:03:39,680
curve has actually done I have a

00:03:37,790 --> 00:03:41,959
confession to make that initially when I

00:03:39,680 --> 00:03:43,549
tried a sinkhole that was about two to

00:03:41,959 --> 00:03:45,079
three years ago I essentially just

00:03:43,549 --> 00:03:49,850
missed it I didn't like it it felt

00:03:45,079 --> 00:03:52,549
awkward and for those of it remember and

00:03:49,850 --> 00:03:54,440
I guess I was before Python 3.5 you had

00:03:52,549 --> 00:03:56,200
to use a decorator to specify

00:03:54,440 --> 00:03:58,459
co-routines you had to use yield from

00:03:56,200 --> 00:04:00,859
and I just felt kind of awkward to me it

00:03:58,459 --> 00:04:02,570
didn't feel like regular Python but with

00:04:00,859 --> 00:04:03,950
the addition of the async and await

00:04:02,570 --> 00:04:05,299
keywords I feel like it's a lot more

00:04:03,950 --> 00:04:07,280
natural and a lot more comfortable to

00:04:05,299 --> 00:04:08,359
use I have some examples of these so if

00:04:07,280 --> 00:04:10,900
you're not too familiar with them you'll

00:04:08,359 --> 00:04:10,900
see them in a bit

00:04:11,320 --> 00:04:16,340
the the point of that is I've had a lot

00:04:13,700 --> 00:04:17,930
better experience using async ah this

00:04:16,340 --> 00:04:19,250
time around so do you have lived in the

00:04:17,930 --> 00:04:20,780
past and you've maybe dismissed it for

00:04:19,250 --> 00:04:23,330
similar reasons it might be might be

00:04:20,780 --> 00:04:26,919
time to start taking a second look and

00:04:23,330 --> 00:04:29,140
that then takes us to sanic which is the

00:04:26,919 --> 00:04:31,050
distinguished find default altogether

00:04:29,140 --> 00:04:33,030
sanic is a small

00:04:31,050 --> 00:04:36,900
teamed their bones web framework it's

00:04:33,030 --> 00:04:37,949
got a similar scope to flask I don't

00:04:36,900 --> 00:04:39,900
know if they have any plans to change

00:04:37,949 --> 00:04:42,840
that over time I suspect probably not

00:04:39,900 --> 00:04:44,280
and it's going to so classic is really

00:04:42,840 --> 00:04:45,840
powerful for being minimal but then it's

00:04:44,280 --> 00:04:47,520
really powerful because of ecosystem

00:04:45,840 --> 00:04:49,319
that's built around it and I think the

00:04:47,520 --> 00:04:51,720
sonic over time will have any ecosystem

00:04:49,319 --> 00:04:57,930
which hopefully build certain ads the

00:04:51,720 --> 00:05:00,090
sort of similar levels of power and if

00:04:57,930 --> 00:05:02,159
anyone's sort of wondering what what is

00:05:00,090 --> 00:05:04,110
special about Sonic and using async IO

00:05:02,159 --> 00:05:06,120
why is it worth the effort compared to

00:05:04,110 --> 00:05:06,650
flask walking you do you can't do

00:05:06,120 --> 00:05:10,919
otherwise

00:05:06,650 --> 00:05:13,319
so I frankly if I had to explain and

00:05:10,919 --> 00:05:16,469
this is because I'm probably not an

00:05:13,319 --> 00:05:18,300
async iox but essentially the the event

00:05:16,469 --> 00:05:19,919
loop allows you to sustain or keep it

00:05:18,300 --> 00:05:22,349
multiple connections open at the same

00:05:19,919 --> 00:05:24,599
time so that means you can take multiple

00:05:22,349 --> 00:05:26,400
requests and process them and you'll

00:05:24,599 --> 00:05:30,240
just be waiting for IO so say for

00:05:26,400 --> 00:05:32,610
example you have a Oh a web app which

00:05:30,240 --> 00:05:35,099
has an endpoint which request something

00:05:32,610 --> 00:05:36,210
from a database when you're Pro reaches

00:05:35,099 --> 00:05:38,250
a point where it makes a request to the

00:05:36,210 --> 00:05:39,690
database it can release that IO will

00:05:38,250 --> 00:05:41,669
happen in the background essentially and

00:05:39,690 --> 00:05:42,120
then another request can be processed at

00:05:41,669 --> 00:05:43,199
a time

00:05:42,120 --> 00:05:46,169
and you'll keep like switching between

00:05:43,199 --> 00:05:50,400
the different events on sorry these

00:05:46,169 --> 00:05:53,219
different tasks on the event loop so say

00:05:50,400 --> 00:05:54,870
for example the the equivalent and say

00:05:53,219 --> 00:05:56,490
something like flask would be that every

00:05:54,870 --> 00:05:57,840
request will be processed one by one it

00:05:56,490 --> 00:06:00,120
would wait for the request to start to

00:05:57,840 --> 00:06:02,909
finish and then the be completely

00:06:00,120 --> 00:06:06,690
sequential whereas with a Sinclar their

00:06:02,909 --> 00:06:08,460
concurrent essentially and for people

00:06:06,690 --> 00:06:10,650
that don't understand the sonic

00:06:08,460 --> 00:06:14,340
reference the web framework is named

00:06:10,650 --> 00:06:15,930
after this internet meme which is maybe

00:06:14,340 --> 00:06:17,940
a sign of how seriously is that that's

00:06:15,930 --> 00:06:21,270
acting quite well with the Python

00:06:17,940 --> 00:06:22,620
ecosystem I think and and the I don't

00:06:21,270 --> 00:06:25,949
fully understand the meme like to say

00:06:22,620 --> 00:06:27,870
but essentially I think he was a kid or

00:06:25,949 --> 00:06:30,000
somebody I'd done a really bad drawing

00:06:27,870 --> 00:06:31,620
of Sonic the Hedgehog and people just

00:06:30,000 --> 00:06:36,599
found a hilarious and shared it and you

00:06:31,620 --> 00:06:38,430
know these things explode but I

00:06:36,599 --> 00:06:39,990
mentioned that there is a kind of

00:06:38,430 --> 00:06:41,580
explosion around

00:06:39,990 --> 00:06:43,080
async i/o recently in terms of

00:06:41,580 --> 00:06:45,210
frameworks and options so

00:06:43,080 --> 00:06:47,400
what made me think sonic over the others

00:06:45,210 --> 00:06:48,659
there are a whole bunch of others of

00:06:47,400 --> 00:06:52,590
competing web frameworks which are

00:06:48,659 --> 00:06:53,610
hoping to get users and the number of

00:06:52,590 --> 00:06:55,259
reasons and honestly they're fairly

00:06:53,610 --> 00:06:56,729
simple it just seemed buy the easiest to

00:06:55,259 --> 00:06:58,889
you that was quickest to get started

00:06:56,729 --> 00:07:02,189
with and that someone's done last before

00:06:58,889 --> 00:07:03,479
it seems very familiar and it just

00:07:02,189 --> 00:07:05,310
didn't really get in my way if I it

00:07:03,479 --> 00:07:07,469
essentially provides you with a way of

00:07:05,310 --> 00:07:09,689
doing your question or your responses

00:07:07,469 --> 00:07:11,909
and then you can pull out to other parts

00:07:09,689 --> 00:07:13,349
of her as you need which is exactly how

00:07:11,909 --> 00:07:18,330
it feels when you're watching with flask

00:07:13,349 --> 00:07:20,969
as well I think it will I saw I started

00:07:18,330 --> 00:07:23,099
using it initially probably in early

00:07:20,969 --> 00:07:25,530
January I think and I think I was quite

00:07:23,099 --> 00:07:26,819
lucky as well to be honest it seemed

00:07:25,530 --> 00:07:29,729
like the most active and it seemed like

00:07:26,819 --> 00:07:32,039
the nicest to use but then it's looking

00:07:29,729 --> 00:07:33,449
back it's that's now it's really the

00:07:32,039 --> 00:07:34,860
only one that's gained traction that's

00:07:33,449 --> 00:07:36,569
the only one that's really active and

00:07:34,860 --> 00:07:38,039
get help with lots of issues and pull

00:07:36,569 --> 00:07:39,960
requests and like community discussion

00:07:38,039 --> 00:07:41,789
so I think I jumped on the correct

00:07:39,960 --> 00:07:44,340
protein there which was definitely

00:07:41,789 --> 00:07:48,389
partially luck but also probably a

00:07:44,340 --> 00:07:50,699
testament to how easy was to use and

00:07:48,389 --> 00:07:53,969
getting started is as easy as you would

00:07:50,699 --> 00:07:56,909
expect there is one catch and I found

00:07:53,969 --> 00:07:59,190
out that Sonic doesn't actually work on

00:07:56,909 --> 00:08:01,770
Windows at the moment the reason for

00:07:59,190 --> 00:08:05,069
this is that rather than using native

00:08:01,770 --> 00:08:08,009
async io actually the UV loop this is a

00:08:05,069 --> 00:08:11,550
faster implementation of async IO

00:08:08,009 --> 00:08:13,199
written in slicin and largely on say on

00:08:11,550 --> 00:08:14,520
Macs and Linux that's just an

00:08:13,199 --> 00:08:16,020
implementation detail you can ignore

00:08:14,520 --> 00:08:18,029
they're compatible and dropped and

00:08:16,020 --> 00:08:19,529
replacements that you find install sonic

00:08:18,029 --> 00:08:21,599
on Windows you actually get an error at

00:08:19,529 --> 00:08:23,250
the moment I thought it would fall back

00:08:21,599 --> 00:08:24,659
to in Cairo but I found out earlier

00:08:23,250 --> 00:08:27,270
somebody showed me in Windows really

00:08:24,659 --> 00:08:29,520
actually just the installation will fail

00:08:27,270 --> 00:08:32,760
and complain the UV loop is not does not

00:08:29,520 --> 00:08:34,699
support Windows so I'm not sure if I was

00:08:32,760 --> 00:08:36,510
a rational or what happened but

00:08:34,699 --> 00:08:40,079
hopefully it'll be a way to use on

00:08:36,510 --> 00:08:44,370
Windows at some point so this is the

00:08:40,079 --> 00:08:46,380
list of the mandatory hello world will

00:08:44,370 --> 00:08:49,440
show you the sort of the very bare-bones

00:08:46,380 --> 00:08:51,300
API and again I'm going to reference

00:08:49,440 --> 00:08:53,240
flask quite a lot there will seem very

00:08:51,300 --> 00:08:55,660
familiar to splash developers

00:08:53,240 --> 00:08:57,550
unfortunately with layout of the

00:08:55,660 --> 00:09:00,370
room is quite hard for me to point up

00:08:57,550 --> 00:09:03,000
there even with my laser pointer it's

00:09:00,370 --> 00:09:07,600
kind of above me but you can see the

00:09:03,000 --> 00:09:10,029
sanic has the context of that and that's

00:09:07,600 --> 00:09:12,279
probably why I include that in the name

00:09:10,029 --> 00:09:16,060
of my toes title but essentially you

00:09:12,279 --> 00:09:16,569
define an app to represent the what

00:09:16,060 --> 00:09:18,250
you're building

00:09:16,569 --> 00:09:21,189
and then you add roots to it just like

00:09:18,250 --> 00:09:25,899
you would in flask the key difference

00:09:21,189 --> 00:09:27,939
here is the async keyword so if you're

00:09:25,899 --> 00:09:31,269
not familiar with async i/o this is the

00:09:27,939 --> 00:09:33,670
syntax it was added in Python 3.5 or I

00:09:31,269 --> 00:09:36,819
think all right did not write down the

00:09:33,670 --> 00:09:38,589
brush in here and what that does is it

00:09:36,819 --> 00:09:40,180
tells python that this is a crow routine

00:09:38,589 --> 00:09:42,310
this function so that means that you can

00:09:40,180 --> 00:09:48,370
await on it and it can await another

00:09:42,310 --> 00:09:49,660
co-routines internally inside it but

00:09:48,370 --> 00:09:51,910
otherwise this is just a very simple

00:09:49,660 --> 00:09:54,579
example it just returns the plain text

00:09:51,910 --> 00:09:55,870
color world and it's a fully working

00:09:54,579 --> 00:09:58,420
example so as long as you've got Sonic

00:09:55,870 --> 00:10:03,310
installed you can just run that and when

00:09:58,420 --> 00:10:06,160
you do this is the alpha the UK and so

00:10:03,310 --> 00:10:09,430
this is the obviously the ASCII version

00:10:06,160 --> 00:10:10,750
of the drawing that we seen earlier and

00:10:09,430 --> 00:10:12,490
this is one of the the things I think

00:10:10,750 --> 00:10:14,470
sonic is doing really well we could do

00:10:12,490 --> 00:10:16,000
with some more innovation in an ASCII

00:10:14,470 --> 00:10:18,939
art and entertainment when you're

00:10:16,000 --> 00:10:21,370
running your apps and jerking a slide is

00:10:18,939 --> 00:10:23,259
actually reasonably useful because that

00:10:21,370 --> 00:10:25,509
will only appear when you're running

00:10:23,259 --> 00:10:27,220
their app in debug mode so it's a good

00:10:25,509 --> 00:10:34,240
kind of red flag that you forgotten to

00:10:27,220 --> 00:10:36,180
turn debug off otherwise there is a the

00:10:34,240 --> 00:10:38,500
kind of standard things you would expect

00:10:36,180 --> 00:10:40,720
this is just a quick example showing you

00:10:38,500 --> 00:10:42,939
how you'd return text plain text like we

00:10:40,720 --> 00:10:44,680
did in the first example returning Jason

00:10:42,939 --> 00:10:46,480
and running turning HTML which could

00:10:44,680 --> 00:10:49,029
obviously be like a rendered ginger

00:10:46,480 --> 00:10:50,380
template or something like that but why

00:10:49,029 --> 00:10:52,240
don't really want to do is basically

00:10:50,380 --> 00:10:54,819
talk you through the documentation talk

00:10:52,240 --> 00:10:56,350
you through the API so we're going to

00:10:54,819 --> 00:10:59,500
try and just do a slightly more

00:10:56,350 --> 00:11:03,230
interesting example and hopefully I can

00:10:59,500 --> 00:11:05,030
talk you through that so

00:11:03,230 --> 00:11:07,970
I think WebSockets are one of the best

00:11:05,030 --> 00:11:12,320
ways to demonstrate why an async IO

00:11:07,970 --> 00:11:13,910
framework can be useful for those of you

00:11:12,320 --> 00:11:17,420
that don't know WebSockets are a way for

00:11:13,910 --> 00:11:19,520
your JavaScript to speak to your server

00:11:17,420 --> 00:11:21,890
in essentially real-time communication

00:11:19,520 --> 00:11:23,960
so rather than polling for updates for

00:11:21,890 --> 00:11:26,600
example they'll open a connection when

00:11:23,960 --> 00:11:28,100
the page loads and then they'll just sit

00:11:26,600 --> 00:11:29,570
there waiting a web actually they can

00:11:28,100 --> 00:11:30,980
send data to the server as well but

00:11:29,570 --> 00:11:33,500
they'll also receive data from the

00:11:30,980 --> 00:11:35,960
server it's a two-way communication and

00:11:33,500 --> 00:11:38,840
essentially instantaneous I mean other

00:11:35,960 --> 00:11:41,510
than the sort of network latency that

00:11:38,840 --> 00:11:43,640
allows you to do real real-time or

00:11:41,510 --> 00:11:47,680
websites which is really good for things

00:11:43,640 --> 00:11:50,930
like chat or notifications and so on

00:11:47,680 --> 00:11:53,870
anyway for the WebSocket supporting

00:11:50,930 --> 00:11:55,100
sanics you need this extra package so

00:11:53,870 --> 00:11:57,920
this is an optional dependency

00:11:55,100 --> 00:12:00,170
essentially it's an async i/o WebSocket

00:11:57,920 --> 00:12:02,390
library which is really nice so even if

00:12:00,170 --> 00:12:04,130
you want to do something with async ro

00:12:02,390 --> 00:12:05,720
and WebSockets but not with Flajnik

00:12:04,130 --> 00:12:08,390
necessarily I think this is the best

00:12:05,720 --> 00:12:09,800
option and it's written by I think is

00:12:08,390 --> 00:12:12,560
one of the jungle core developers

00:12:09,800 --> 00:12:17,590
originally but not using Django itself

00:12:12,560 --> 00:12:20,780
as far as the more so when you have

00:12:17,590 --> 00:12:23,390
installed that you can then use the app

00:12:20,780 --> 00:12:26,620
dot WebSocket and function or decorate

00:12:23,390 --> 00:12:29,770
so sorry to define a WebSocket endpoint

00:12:26,620 --> 00:12:33,260
so again this is a very simple example

00:12:29,770 --> 00:12:36,620
we have the async keyword to tell us a

00:12:33,260 --> 00:12:39,860
curry teen and then we have the tool

00:12:36,620 --> 00:12:40,790
wait I can't actually point I can't read

00:12:39,860 --> 00:12:46,670
that so I'm just going to have to

00:12:40,790 --> 00:12:48,080
explain it and that's if you use this

00:12:46,670 --> 00:12:50,000
stuff if this can seem like quite a

00:12:48,080 --> 00:12:51,770
strange pattern because it looks to you

00:12:50,000 --> 00:12:53,630
like this function could just lock up

00:12:51,770 --> 00:12:56,060
indefinitely because it's a while true

00:12:53,630 --> 00:12:57,740
it's an infinite loop but actually every

00:12:56,060 --> 00:12:59,960
time you get to the awake so when you

00:12:57,740 --> 00:13:02,690
have the await WebSocket don't send and

00:12:59,960 --> 00:13:04,910
the wait WebSocket don't receive it will

00:13:02,690 --> 00:13:06,170
actually the i/o for that will happen in

00:13:04,910 --> 00:13:07,910
the background it will be waiting there

00:13:06,170 --> 00:13:09,590
for something to be sent or something to

00:13:07,910 --> 00:13:11,150
be received and then or return to the

00:13:09,590 --> 00:13:12,639
event loop and then other requests can

00:13:11,150 --> 00:13:17,529
be processed can

00:13:12,639 --> 00:13:19,970
so this is why it's so important to have

00:13:17,529 --> 00:13:21,649
something like a sink I go for this way

00:13:19,970 --> 00:13:23,660
you can have concurrent requests you

00:13:21,649 --> 00:13:25,160
can't really do WebSockets and something

00:13:23,660 --> 00:13:27,470
like Flast because it requires you

00:13:25,160 --> 00:13:30,620
maintain the request you maintain the

00:13:27,470 --> 00:13:35,110
connection and keeping many connections

00:13:30,620 --> 00:13:37,370
open in plastics doesn't really work and

00:13:35,110 --> 00:13:38,480
the same applies to some Django and

00:13:37,370 --> 00:13:42,139
things there are ways to do it in

00:13:38,480 --> 00:13:43,129
general now and sort of what people used

00:13:42,139 --> 00:13:44,629
to do is they would run something like

00:13:43,129 --> 00:13:46,579
tornado or twisted and they'd have a

00:13:44,629 --> 00:13:48,680
WebSocket server and then they've had

00:13:46,579 --> 00:13:50,240
the Django or Flast server and then they

00:13:48,680 --> 00:13:51,680
speak to each other behind the scenes

00:13:50,240 --> 00:13:53,180
and they'd sort of send notifications

00:13:51,680 --> 00:13:56,660
that you have to deal with keeping them

00:13:53,180 --> 00:13:57,920
all in sync and everything anyway this

00:13:56,660 --> 00:13:59,180
is a very simple example from the

00:13:57,920 --> 00:14:03,160
documentation and I think we can do

00:13:59,180 --> 00:14:05,899
something a bit better so in danger of

00:14:03,160 --> 00:14:07,399
angering the demo gods if you could all

00:14:05,899 --> 00:14:09,019
just try and go to this web address will

00:14:07,399 --> 00:14:13,220
be kind of interesting to see like this

00:14:09,019 --> 00:14:15,620
works at all and you won't use much data

00:14:13,220 --> 00:14:18,559
so you can use your regular cellular

00:14:15,620 --> 00:14:20,199
data and thankfully if you're a European

00:14:18,559 --> 00:14:24,439
you won't have any roaming charges now

00:14:20,199 --> 00:14:25,430
but essentially what this does is it

00:14:24,439 --> 00:14:27,019
shows the number of people that are

00:14:25,430 --> 00:14:30,259
connected to it and it shows a list of

00:14:27,019 --> 00:14:32,000
the user agents of people connected I'm

00:14:30,259 --> 00:14:35,350
trying to load it now so it might take a

00:14:32,000 --> 00:14:40,519
moment for the Heroku app to start up

00:14:35,350 --> 00:14:44,019
has anyone managed to load it how many

00:14:40,519 --> 00:14:44,019
people are connected does it tell you

00:14:48,189 --> 00:14:56,809
okay all right I was worried this might

00:14:53,000 --> 00:14:58,250
happen but it's a bit unnecessarily

00:14:56,809 --> 00:14:59,360
today this one showing you I can still

00:14:58,250 --> 00:15:03,500
walk you through the code in the same

00:14:59,360 --> 00:15:06,079
way 20-plus that's pretty good so I've

00:15:03,500 --> 00:15:08,870
done a demo of this tolkien in Glasgow

00:15:06,079 --> 00:15:11,240
and I had far less people have it and

00:15:08,870 --> 00:15:14,089
I've no idea how many can handle before

00:15:11,240 --> 00:15:15,829
it falls over so but it seems to be

00:15:14,089 --> 00:15:19,999
better than the Wi-Fi but that's not too

00:15:15,829 --> 00:15:24,940
surprising how many thirty-one that's

00:15:19,999 --> 00:15:26,560
pretty good and yeah so all of you are

00:15:24,940 --> 00:15:28,660
basically all your requests are

00:15:26,560 --> 00:15:30,010
concurrently open and all being handled

00:15:28,660 --> 00:15:34,800
and they're sitting in the background

00:15:30,010 --> 00:15:37,090
waiting for the i/o events to finish and

00:15:34,800 --> 00:15:38,680
the nice thing about it is how little

00:15:37,090 --> 00:15:42,970
code is actually required to make this

00:15:38,680 --> 00:15:46,750
this demo and so this is a slide where I

00:15:42,970 --> 00:15:48,250
really needed to be able to point but

00:15:46,750 --> 00:15:50,350
I'll just talk to it from top to bottom

00:15:48,250 --> 00:15:52,720
so the first two variables atop the

00:15:50,350 --> 00:15:55,050
connected equals set and the user agents

00:15:52,720 --> 00:15:57,460
they're essentially tracking the

00:15:55,050 --> 00:15:58,870
WebSockets are connected just so the

00:15:57,460 --> 00:16:00,700
number of WebSocket is they're connected

00:15:58,870 --> 00:16:02,260
with the set the user agents is then

00:16:00,700 --> 00:16:07,000
just a dictionary of user agents which I

00:16:02,260 --> 00:16:08,470
routinely send it to the browser and we

00:16:07,000 --> 00:16:11,470
have our routine again which is called

00:16:08,470 --> 00:16:13,180
feed and when the request is opened the

00:16:11,470 --> 00:16:16,390
WebSocket is added to the connected set

00:16:13,180 --> 00:16:18,220
and then we just take the user agent

00:16:16,390 --> 00:16:21,280
from the request and add that to the

00:16:18,220 --> 00:16:22,390
user agent dictionary and I have a

00:16:21,280 --> 00:16:24,160
little printing statement which was

00:16:22,390 --> 00:16:25,810
useful from the console and I probably

00:16:24,160 --> 00:16:26,950
should have removed that fully enough I

00:16:25,810 --> 00:16:29,950
said that the last time I gave this talk

00:16:26,950 --> 00:16:32,380
and I never remove it but then we go

00:16:29,950 --> 00:16:36,250
into the the actual loop which is

00:16:32,380 --> 00:16:38,230
happening here which is then sending the

00:16:36,250 --> 00:16:39,820
data back to the client so what you can

00:16:38,230 --> 00:16:41,650
see is I've got a WebSocket I'll send

00:16:39,820 --> 00:16:43,030
and it's just sending Jason or sending

00:16:41,650 --> 00:16:45,190
the user agents which is addictive I

00:16:43,030 --> 00:16:46,210
said and then the WebSocket I'm just

00:16:45,190 --> 00:16:47,230
doing the length of that so actually

00:16:46,210 --> 00:16:51,370
sending the number of so it's more

00:16:47,230 --> 00:16:53,230
efficient and then we await them that

00:16:51,370 --> 00:16:55,600
data to be sent and it just happens over

00:16:53,230 --> 00:16:58,000
and over and what we have the next line

00:16:55,600 --> 00:17:00,340
is the async our fleet so that it's

00:16:58,000 --> 00:17:02,290
sweeping 0.1 second so that means it's

00:17:00,340 --> 00:17:05,620
sending the information updates to the

00:17:02,290 --> 00:17:09,040
client every 0.1 second assuming

00:17:05,620 --> 00:17:10,089
everything goes okay the one thing

00:17:09,040 --> 00:17:12,400
that's really important to here and this

00:17:10,089 --> 00:17:14,680
is an example of what you need to

00:17:12,400 --> 00:17:17,140
understand based in Cairo and make sure

00:17:14,680 --> 00:17:20,020
you don't do anything which is blocking

00:17:17,140 --> 00:17:22,120
you can't use or you could be a bad idea

00:17:20,020 --> 00:17:23,439
you shouldn't use the time dot sleep

00:17:22,120 --> 00:17:25,689
function here if you have to use the

00:17:23,439 --> 00:17:27,610
async i/o sleep because wasted when you

00:17:25,689 --> 00:17:30,010
use the kind of sleep they would just

00:17:27,610 --> 00:17:32,080
block that loop at that point but when

00:17:30,010 --> 00:17:33,430
you use async i/o sleep then releases

00:17:32,080 --> 00:17:35,710
back to the event loop and allows other

00:17:33,430 --> 00:17:38,470
requests to be processed

00:17:35,710 --> 00:17:40,090
so the thing with something like a

00:17:38,470 --> 00:17:41,170
Shinto is not that you can't do blocking

00:17:40,090 --> 00:17:42,520
code it's just that you need to make

00:17:41,170 --> 00:17:44,200
sure your protocol in a way that isn't

00:17:42,520 --> 00:17:46,060
blocking and this is one of the gotchas

00:17:44,200 --> 00:17:48,070
I find it's because you might be trying

00:17:46,060 --> 00:17:49,810
to use a third-party library if that

00:17:48,070 --> 00:17:53,560
library does anything blocking then that

00:17:49,810 --> 00:17:55,570
will affect your your run as well and

00:17:53,560 --> 00:17:58,780
then in this finally part of the retry

00:17:55,570 --> 00:18:01,600
finally we just do some cleanup so we've

00:17:58,780 --> 00:18:04,360
removed the connected WebSocket and then

00:18:01,600 --> 00:18:05,770
we removed the user region and print out

00:18:04,360 --> 00:18:08,890
just the number of connected sockets for

00:18:05,770 --> 00:18:09,970
my debugging again so the if anyone

00:18:08,890 --> 00:18:11,560
still has open you'll see that that

00:18:09,970 --> 00:18:12,940
number will decrease as people start to

00:18:11,560 --> 00:18:15,700
close it as well so it's quite nice you

00:18:12,940 --> 00:18:18,220
get the real lot of the nice optically

00:18:15,700 --> 00:18:20,680
real-time updates there and so for

00:18:18,220 --> 00:18:22,960
example this could be a very simple tool

00:18:20,680 --> 00:18:25,420
T to show people how many other people

00:18:22,960 --> 00:18:27,700
are looking our webpage which perhaps

00:18:25,420 --> 00:18:29,620
could create like FOMO because you know

00:18:27,700 --> 00:18:32,050
it's like 20 people are looking at this

00:18:29,620 --> 00:18:37,030
hotel booking now I think there's one

00:18:32,050 --> 00:18:38,170
less where I go under the wraps and I

00:18:37,030 --> 00:18:40,960
mean the one thing I should know about

00:18:38,170 --> 00:18:43,540
the WebSocket so when somebody closes

00:18:40,960 --> 00:18:45,310
the tab and the next time that we try

00:18:43,540 --> 00:18:46,540
and send data to that WebSocket you'll

00:18:45,310 --> 00:18:48,760
actually get an exception which is

00:18:46,540 --> 00:18:50,350
something like a WebSocket closed so

00:18:48,760 --> 00:18:52,990
that's when you break out that loop and

00:18:50,350 --> 00:18:54,760
that's when the finally is called so we

00:18:52,990 --> 00:18:56,230
never close the WebSocket on the client

00:18:54,760 --> 00:18:59,710
on the server side that's only ever done

00:18:56,230 --> 00:19:02,650
on the client side and then sanik just

00:18:59,710 --> 00:19:04,270
handles that exception as I like end of

00:19:02,650 --> 00:19:05,620
requests I'd saying it doesn't it

00:19:04,270 --> 00:19:09,610
doesn't treat it as an error if like

00:19:05,620 --> 00:19:11,500
we're done we're good and then just for

00:19:09,610 --> 00:19:14,230
completeness this is the JavaScript I

00:19:11,500 --> 00:19:15,520
wrote and it's kind of horrible it turns

00:19:14,230 --> 00:19:18,370
out it's actually quite hard to do

00:19:15,520 --> 00:19:20,370
something very completely in JavaScript

00:19:18,370 --> 00:19:22,300
when you want to deal with WebSockets

00:19:20,370 --> 00:19:24,250
I'm not really going to talk through

00:19:22,300 --> 00:19:25,540
this I mostly added so there's anyone

00:19:24,250 --> 00:19:27,430
stumbles process-wise they've got a

00:19:25,540 --> 00:19:30,430
mostly complete example they can work

00:19:27,430 --> 00:19:32,500
with and I actually have all the code in

00:19:30,430 --> 00:19:34,630
a github repository so if anyone's

00:19:32,500 --> 00:19:37,660
interested I can link you to I forgot to

00:19:34,630 --> 00:19:41,920
add a link to my slides but it's pretty

00:19:37,660 --> 00:19:43,300
easy to find it all but what I found

00:19:41,920 --> 00:19:45,520
really exciting and really fun about

00:19:43,300 --> 00:19:48,310
writing this is the full thing is only

00:19:45,520 --> 00:19:49,450
81 oh sorry 85 lens of code so that's

00:19:48,310 --> 00:19:51,880
the Python the HTM

00:19:49,450 --> 00:19:55,560
with JavaScript the Heroku config which

00:19:51,880 --> 00:19:57,670
is only a couple lines admittedly but

00:19:55,560 --> 00:20:00,040
creating something like this was it was

00:19:57,670 --> 00:20:01,630
fun but also you can see the path of how

00:20:00,040 --> 00:20:05,380
this could be useful even though it's

00:20:01,630 --> 00:20:07,600
such a short awright of course with

00:20:05,380 --> 00:20:09,820
something like WebSockets the complexity

00:20:07,600 --> 00:20:11,860
comes at the next stage it's what you do

00:20:09,820 --> 00:20:13,990
with this so say for example if every

00:20:11,860 --> 00:20:15,700
WebSocket was making a request from the

00:20:13,990 --> 00:20:17,710
database you could potentially be in

00:20:15,700 --> 00:20:21,180
danger of overloading your database with

00:20:17,710 --> 00:20:23,680
connections so on Heroku and so in the

00:20:21,180 --> 00:20:26,590
the a perm I'm using something for and

00:20:23,680 --> 00:20:29,170
my non-poor yeah not this one it uses a

00:20:26,590 --> 00:20:30,490
Heroku Postgres and I'm on one of the

00:20:29,170 --> 00:20:32,350
chief of T so you only get 20

00:20:30,490 --> 00:20:34,450
connections or something so it's very

00:20:32,350 --> 00:20:37,000
easy to have too many web sockets open

00:20:34,450 --> 00:20:38,230
that you run house connections but you

00:20:37,000 --> 00:20:40,030
can get around these problems using

00:20:38,230 --> 00:20:41,440
things like PG done so push best bouncer

00:20:40,030 --> 00:20:43,260
and have that running on each of your

00:20:41,440 --> 00:20:45,790
Heroku dynos which then means you has

00:20:43,260 --> 00:20:47,710
essentially 100 connections or so which

00:20:45,790 --> 00:20:50,980
only translate into one or two real

00:20:47,710 --> 00:20:53,740
connections but that's just an example

00:20:50,980 --> 00:20:56,530
that beer so this is a very simple one

00:20:53,740 --> 00:21:02,350
but you will find that the complexity

00:20:56,530 --> 00:21:03,370
does come later and I did say I'm not

00:21:02,350 --> 00:21:04,570
going to read through the documentation

00:21:03,370 --> 00:21:06,130
of sanik but I just wanted to highlight

00:21:04,570 --> 00:21:07,780
a couple of these of the common features

00:21:06,130 --> 00:21:09,760
that people have asked me about the

00:21:07,780 --> 00:21:11,800
sonic have list of it and I have this so

00:21:09,760 --> 00:21:13,480
just to quickly mention them class-based

00:21:11,800 --> 00:21:15,700
views are there and so these are very

00:21:13,480 --> 00:21:18,400
like flasks class-based fees so this

00:21:15,700 --> 00:21:20,410
means that rather than having a standard

00:21:18,400 --> 00:21:22,330
function to handle your requests you can

00:21:20,410 --> 00:21:24,160
have a class which breaks out your post

00:21:22,330 --> 00:21:26,470
gates and the other types of requests

00:21:24,160 --> 00:21:29,470
which is quite a nice way of doing it

00:21:26,470 --> 00:21:31,510
and there are blueprints and these are

00:21:29,470 --> 00:21:34,180
again very much like flasks blueprints

00:21:31,510 --> 00:21:35,650
you can see that they actually say in

00:21:34,180 --> 00:21:39,700
the styling documentation that they are

00:21:35,650 --> 00:21:41,980
flasks like I think so they they really

00:21:39,700 --> 00:21:44,080
are trying to mimic the flask API where

00:21:41,980 --> 00:21:45,820
it makes sense so the blueprints are a

00:21:44,080 --> 00:21:49,240
way for you to write reusable apps which

00:21:45,820 --> 00:21:50,170
can then be added onto endpoints so it's

00:21:49,240 --> 00:21:52,450
kind of hard to explain they're

00:21:50,170 --> 00:21:54,250
basically it's for making reusable web

00:21:52,450 --> 00:21:57,160
apps or components to go in part of web

00:21:54,250 --> 00:21:59,470
apps and there's also an opinionated

00:21:57,160 --> 00:22:01,000
configuration which provides multiple

00:21:59,470 --> 00:22:02,440
ways of loading up the config they're

00:22:01,000 --> 00:22:03,160
essentially acting like a dictionary so

00:22:02,440 --> 00:22:05,110
it's easy to

00:22:03,160 --> 00:22:06,700
still the conflict how you want and then

00:22:05,110 --> 00:22:12,460
support for things like cookies and so

00:22:06,700 --> 00:22:14,110
on and everything you said expect so

00:22:12,460 --> 00:22:17,140
when it comes to testing you need

00:22:14,110 --> 00:22:20,560
another optional dependency so this is a

00:22:17,140 --> 00:22:24,610
IO HTTP which as far as I'm aware is the

00:22:20,560 --> 00:22:26,940
most common of HTTP requesting async IO

00:22:24,610 --> 00:22:30,160
library so essentially it says of the

00:22:26,940 --> 00:22:32,820
requests those facing tayo although I

00:22:30,160 --> 00:22:36,730
did here the request is going to have a

00:22:32,820 --> 00:22:38,980
async compatible sort parts that I added

00:22:36,730 --> 00:22:40,680
at some point I don't know when anyway

00:22:38,980 --> 00:22:43,240
for now this is I think the most popular

00:22:40,680 --> 00:22:45,640
and sanik uses internally to make

00:22:43,240 --> 00:22:48,430
requests to itself which allows you to

00:22:45,640 --> 00:22:50,560
then test your app with it and it's my

00:22:48,430 --> 00:22:52,870
understanding and this is a very simple

00:22:50,560 --> 00:22:55,600
example of how how you use it and really

00:22:52,870 --> 00:22:57,970
testing the sanic is simple because your

00:22:55,600 --> 00:23:01,210
sanic Claire is such a narrow layer in

00:22:57,970 --> 00:23:02,470
your app but the challenges I found with

00:23:01,210 --> 00:23:04,690
testing were actually much harder in

00:23:02,470 --> 00:23:07,990
general when using an async i/o and app

00:23:04,690 --> 00:23:09,910
just because so when you have all your

00:23:07,990 --> 00:23:11,680
code expects to be run on an event loop

00:23:09,910 --> 00:23:13,990
so that means essentially your tests

00:23:11,680 --> 00:23:16,090
have to set up an event loop run it once

00:23:13,990 --> 00:23:17,590
and then tear it down again which is

00:23:16,090 --> 00:23:20,140
quite an overhead for each of your tests

00:23:17,590 --> 00:23:21,610
and if any of your tests misbehave so

00:23:20,140 --> 00:23:23,680
for example they don't shut down the

00:23:21,610 --> 00:23:25,090
event we properly for some reason then

00:23:23,680 --> 00:23:26,770
you'll have a test which just gets

00:23:25,090 --> 00:23:31,210
walking because it's waiting resaw like

00:23:26,770 --> 00:23:32,650
an event leave this part open and yes so

00:23:31,210 --> 00:23:34,420
something I would actually really

00:23:32,650 --> 00:23:36,040
interested in and this is kind of a

00:23:34,420 --> 00:23:38,170
request out to anyone else that knows

00:23:36,040 --> 00:23:42,400
about this is some input and how to best

00:23:38,170 --> 00:23:44,740
test async i/o or asynchronous at just

00:23:42,400 --> 00:23:47,890
in general somebody should talk on that

00:23:44,740 --> 00:23:52,450
or a blog post or something that's my

00:23:47,890 --> 00:23:54,010
request but it's definitely not a fault

00:23:52,450 --> 00:23:56,170
on sanic itself I think is just more

00:23:54,010 --> 00:24:00,910
inherent complexity of your overalls of

00:23:56,170 --> 00:24:02,650
architecture as it changes this is just

00:24:00,910 --> 00:24:05,260
a small note so this is something that I

00:24:02,650 --> 00:24:07,840
missed when I first was using sanic and

00:24:05,260 --> 00:24:09,970
it greatly impacts the performance so

00:24:07,840 --> 00:24:13,350
the thing you should be looking at in

00:24:09,970 --> 00:24:16,060
this slide is the worker is equal eight

00:24:13,350 --> 00:24:17,020
so if you don't provide this some

00:24:16,060 --> 00:24:19,480
encourages people to

00:24:17,020 --> 00:24:22,660
worker and what it means is it will

00:24:19,480 --> 00:24:24,820
spawn up multiple processes which will

00:24:22,660 --> 00:24:26,620
then route your requests across these

00:24:24,820 --> 00:24:30,700
processes and handle them so obviously

00:24:26,620 --> 00:24:32,290
nature apps run a lot faster and so this

00:24:30,700 --> 00:24:34,570
is quite similar to something like G

00:24:32,290 --> 00:24:36,790
unicorn which will spin up say multiple

00:24:34,570 --> 00:24:38,890
Django works flasks processes and route

00:24:36,790 --> 00:24:41,200
the requests but then with sanic you

00:24:38,890 --> 00:24:43,870
have essentially an event loop in each

00:24:41,200 --> 00:24:45,400
request sorry in each process so you've

00:24:43,870 --> 00:24:46,750
got multiple event loops going on and

00:24:45,400 --> 00:24:52,000
you should be able to get quite a large

00:24:46,750 --> 00:24:54,010
group it doing that the documentation or

00:24:52,000 --> 00:24:57,640
the sanic developers at least they seem

00:24:54,010 --> 00:25:00,640
to recommend one water CPU that you want

00:24:57,640 --> 00:25:01,900
to dedicate to Sonic and so if you have

00:25:00,640 --> 00:25:04,150
a fork or machine you might want to give

00:25:01,900 --> 00:25:05,440
it all four cores and use for workers or

00:25:04,150 --> 00:25:11,470
you might have fun me also running on

00:25:05,440 --> 00:25:13,750
they're similar you only give it to the

00:25:11,470 --> 00:25:15,820
the ecosystem is probably the biggest

00:25:13,750 --> 00:25:17,680
sacrifice that you'll make if you were

00:25:15,820 --> 00:25:20,680
to head in this direction compared with

00:25:17,680 --> 00:25:23,640
using some more established framework so

00:25:20,680 --> 00:25:25,510
there is a small reasonable set of

00:25:23,640 --> 00:25:27,070
extensions listed in the stomach

00:25:25,510 --> 00:25:30,070
documentation that seems to be the best

00:25:27,070 --> 00:25:32,020
sub collection of them but it does feel

00:25:30,070 --> 00:25:33,040
like your mileage will vary a lot with

00:25:32,020 --> 00:25:37,360
all of them

00:25:33,040 --> 00:25:40,720
and more often than not you end up

00:25:37,360 --> 00:25:42,850
having to roll your own integration so

00:25:40,720 --> 00:25:45,250
there was as I've tried a few there was

00:25:42,850 --> 00:25:48,940
a sonic limiter which is a rate limiter

00:25:45,250 --> 00:25:50,530
and that seemed to work pretty well but

00:25:48,940 --> 00:25:51,850
then I tried it another one to do with

00:25:50,530 --> 00:25:54,850
session handling and actually that

00:25:51,850 --> 00:25:56,920
didn't work well for me because it

00:25:54,850 --> 00:25:58,360
didn't provide the backend I needed so I

00:25:56,920 --> 00:26:01,660
ended up writing my own session handling

00:25:58,360 --> 00:26:04,120
which is kind of a pain and really I

00:26:01,660 --> 00:26:06,940
should probably rip that out and I'm

00:26:04,120 --> 00:26:08,860
really sorry about you know like a sonic

00:26:06,940 --> 00:26:10,870
push press sessions or something that

00:26:08,860 --> 00:26:13,470
I've not done that yet everyone's

00:26:10,870 --> 00:26:18,010
interested I could look into doing it

00:26:13,470 --> 00:26:19,450
and then there's you then have to start

00:26:18,010 --> 00:26:20,680
looking at how you would integrate with

00:26:19,450 --> 00:26:22,180
other systems so I've mentioned

00:26:20,680 --> 00:26:23,920
postgrads every time so it's not a

00:26:22,180 --> 00:26:28,390
surprise to people I'll be doing that

00:26:23,920 --> 00:26:30,450
and the thing with poke press is you

00:26:28,390 --> 00:26:32,130
need to make sure using a non-blocking

00:26:30,450 --> 00:26:35,510
postman's library so the most common one

00:26:32,130 --> 00:26:37,770
is a aokiji and it nicely provides

00:26:35,510 --> 00:26:39,720
integration with SQL alchemy so that

00:26:37,770 --> 00:26:42,690
allows you to use SQL alchemy with a

00:26:39,720 --> 00:26:44,310
non-blocking connection but it only

00:26:42,690 --> 00:26:46,830
allows you to use certain parts of our

00:26:44,310 --> 00:26:50,940
alchemy so you can only use the core API

00:26:46,830 --> 00:26:52,290
you can not use the RM api so people are

00:26:50,940 --> 00:26:53,790
familiar with this Creole alchemy you'll

00:26:52,290 --> 00:26:55,350
probably people tend to use one of the

00:26:53,790 --> 00:26:59,940
other that you don't tend to move use

00:26:55,350 --> 00:27:01,050
both I used the ORM API until I started

00:26:59,940 --> 00:27:03,630
doing this and then I had to use the

00:27:01,050 --> 00:27:04,890
core API and they're both binders just I

00:27:03,630 --> 00:27:06,300
don't know it's just a payment you have

00:27:04,890 --> 00:27:10,640
to be aware of what you can and can't

00:27:06,300 --> 00:27:10,640
use otherwise your relative of trouble

00:27:11,030 --> 00:27:17,070
so I think it is kind of interesting to

00:27:15,300 --> 00:27:20,790
think about when should you you consider

00:27:17,070 --> 00:27:22,320
using sanic and so I my talk title has

00:27:20,790 --> 00:27:23,400
to do with whether I don't I don't think

00:27:22,320 --> 00:27:25,410
people should really be looking at

00:27:23,400 --> 00:27:27,240
building a large web app but sanic you

00:27:25,410 --> 00:27:29,850
want to think of it more about high

00:27:27,240 --> 00:27:32,820
throughput services something you need

00:27:29,850 --> 00:27:34,140
to go really fast and or something like

00:27:32,820 --> 00:27:35,400
a micro service would work really well

00:27:34,140 --> 00:27:36,540
so it's something that's quite

00:27:35,400 --> 00:27:39,660
lightweight there's going to get lots of

00:27:36,540 --> 00:27:40,920
requests or a bit smaller web apps do

00:27:39,660 --> 00:27:42,330
work and it's not to say that you

00:27:40,920 --> 00:27:43,830
couldn't do a larger web app I think

00:27:42,330 --> 00:27:45,090
it's just when you start to require

00:27:43,830 --> 00:27:46,560
things like sessions and then you start

00:27:45,090 --> 00:27:48,120
to have to roll your own and you'll need

00:27:46,560 --> 00:27:50,040
off but I'm not sure of as many

00:27:48,120 --> 00:27:52,560
authentication packages out there it

00:27:50,040 --> 00:27:53,910
just becomes a lot of work so maybe as

00:27:52,560 --> 00:27:55,320
the ecosystem grows and maybe you'll

00:27:53,910 --> 00:27:56,880
become more like flask where you can

00:27:55,320 --> 00:27:59,850
just add these extensions and it becomes

00:27:56,880 --> 00:28:01,350
almost like a full stack framework but

00:27:59,850 --> 00:28:07,430
at the moment I think it works quite

00:28:01,350 --> 00:28:09,840
wireless of discrete small services and

00:28:07,430 --> 00:28:12,510
I just quickly want to note the other

00:28:09,840 --> 00:28:14,730
options are available and this is

00:28:12,510 --> 00:28:16,530
something which is a bit of a tongue

00:28:14,730 --> 00:28:18,030
twister to explain but I think a project

00:28:16,530 --> 00:28:21,180
that we should be keeping an eye on is

00:28:18,030 --> 00:28:23,010
UV corn so this is this is by tom

00:28:21,180 --> 00:28:24,930
Christie he's the author of the Django

00:28:23,010 --> 00:28:29,030
rest framework so he's very well

00:28:24,930 --> 00:28:33,450
experienced in this kind of area and

00:28:29,030 --> 00:28:38,670
Yuva corn is a common do of G unicorn

00:28:33,450 --> 00:28:41,790
and UV loop so he's essentially writing

00:28:38,670 --> 00:28:43,080
an async I oversee o of T unicorn but

00:28:41,790 --> 00:28:45,019
using the UV loop

00:28:43,080 --> 00:28:48,240
than the standard piece in Collinwood

00:28:45,019 --> 00:28:50,519
and this will then use the a HCI

00:28:48,240 --> 00:28:52,590
interface rather than the WSGI interface

00:28:50,519 --> 00:28:54,179
which is the standard web server gateway

00:28:52,590 --> 00:28:57,029
interface use bicycle asking django and

00:28:54,179 --> 00:29:00,090
everyone else the reason that this is so

00:28:57,029 --> 00:29:02,370
important is also spanic for example it

00:29:00,090 --> 00:29:04,590
kind of has to mangle async are on top

00:29:02,370 --> 00:29:11,640
of WSGI which is never designed for

00:29:04,590 --> 00:29:13,649
async so yeah I would definitely check

00:29:11,640 --> 00:29:15,899
out user corns that I know it's not not

00:29:13,649 --> 00:29:17,760
ready yet Tom aji tweeted a couple days

00:29:15,899 --> 00:29:20,159
ago I see in the if he thinks it's not

00:29:17,760 --> 00:29:21,149
ready for primetime I think it's

00:29:20,159 --> 00:29:25,289
definitely gonna be a promising option

00:29:21,149 --> 00:29:26,399
for the future and with that I think I'm

00:29:25,289 --> 00:29:28,080
actually ready for questions which is

00:29:26,399 --> 00:29:30,950
good because I'm almost out of time so

00:29:28,080 --> 00:29:30,950
I'm not sure we have time for questions

00:29:36,690 --> 00:29:41,489
we don't have time for questions but

00:29:39,299 --> 00:29:50,309
this statute the last talking this whole

00:29:41,489 --> 00:29:54,210
so please did you try and manage to

00:29:50,309 --> 00:29:56,580
success configuring WebSocket secure yes

00:29:54,210 --> 00:29:58,639
so the example I had was actually using

00:29:56,580 --> 00:30:01,830
WebSockets secure so haru-kun mate

00:29:58,639 --> 00:30:07,799
magically made the app or on HTTP for me

00:30:01,830 --> 00:30:09,659
and it's using so you can see the in the

00:30:07,799 --> 00:30:12,629
top line there it says it figures out

00:30:09,659 --> 00:30:13,889
whether I should use WS s or WS that's

00:30:12,629 --> 00:30:18,299
the protocol for the WebSocket

00:30:13,889 --> 00:30:20,970
connection okay we have four own fun so

00:30:18,299 --> 00:30:24,119
I'm asking okay so yeah it seems to just

00:30:20,970 --> 00:30:26,340
work which is right I had very little to

00:30:24,119 --> 00:30:28,470
do with it can you show the

00:30:26,340 --> 00:30:30,359
configuration file someone telling you

00:30:28,470 --> 00:30:32,929
have configuration for suffice for sign

00:30:30,359 --> 00:30:36,179
also where you provide this participate

00:30:32,929 --> 00:30:44,899
so because I ran out on Heroku I so

00:30:36,179 --> 00:30:44,899
handled for me and okay and a question

00:30:47,710 --> 00:30:59,210
so maybe you picked Sanok over for

00:30:54,440 --> 00:31:00,770
example a Oh HTTP for speed right and no

00:30:59,210 --> 00:31:04,340
not necessarily for speed I actually

00:31:00,770 --> 00:31:07,090
tried a i/o HTTP which is one of the I

00:31:04,340 --> 00:31:09,980
guess other more popular frameworks and

00:31:07,090 --> 00:31:11,480
so I only experimented with it for a

00:31:09,980 --> 00:31:13,880
short time and I think he was probably

00:31:11,480 --> 00:31:17,660
more just the API I'm not sure how

00:31:13,880 --> 00:31:19,100
similar it is and I did I'm afraid I

00:31:17,660 --> 00:31:21,680
can't remember the comparison well

00:31:19,100 --> 00:31:23,390
enough now to comment really but I just

00:31:21,680 --> 00:31:25,400
found it didn't enjoy it as much perhaps

00:31:23,390 --> 00:31:28,210
with the best way here or it wasn't as

00:31:25,400 --> 00:31:31,880
easy to get started press ok so do a

00:31:28,210 --> 00:31:33,950
quick follow up maybe comment or call

00:31:31,880 --> 00:31:37,820
for comment so do you feel that we are

00:31:33,950 --> 00:31:39,500
getting too many frameworks or maybe we

00:31:37,820 --> 00:31:42,320
should focus for example on creating

00:31:39,500 --> 00:31:44,360
libraries so every other framework

00:31:42,320 --> 00:31:46,550
doesn't have to you know repeat mistakes

00:31:44,360 --> 00:31:49,700
of every other framework for example in

00:31:46,550 --> 00:31:50,990
the clan I guess some I mean are we

00:31:49,700 --> 00:31:53,210
creating too many I don't know like the

00:31:50,990 --> 00:31:53,960
answer is kind of yes and no I do think

00:31:53,210 --> 00:31:56,690
this is why

00:31:53,960 --> 00:31:58,730
Tom's project user corn is important

00:31:56,690 --> 00:32:01,250
because it's implementing the base layer

00:31:58,730 --> 00:32:02,720
and I think a more correct way and then

00:32:01,250 --> 00:32:04,370
maybe over time something like Sonic

00:32:02,720 --> 00:32:05,840
could move to that and then hopefully

00:32:04,370 --> 00:32:09,100
they could then remove a bunch of the

00:32:05,840 --> 00:32:14,150
nastiness they've had to do and maybe a

00:32:09,100 --> 00:32:15,710
HTTP could do the same so yeah it's hard

00:32:14,150 --> 00:32:17,240
to say because I think also there's a

00:32:15,710 --> 00:32:18,170
lot of innovation going on at the moment

00:32:17,240 --> 00:32:19,820
so it's important for people to

00:32:18,170 --> 00:32:22,100
experiment in different ways I think

00:32:19,820 --> 00:32:29,710
over time we will start to converge

00:32:22,100 --> 00:32:29,710
together and hopefully thank you know

00:32:38,370 --> 00:32:47,590
and how do you deal with logging in a

00:32:42,100 --> 00:32:48,760
synchronous environment ask you a

00:32:47,590 --> 00:32:56,020
question I'm not sure if there's any

00:32:48,760 --> 00:32:57,280
particular I've not done anything

00:32:56,020 --> 00:33:00,820
particularly special with it to be

00:32:57,280 --> 00:33:02,680
honest I maybe need to check my logins

00:33:00,820 --> 00:33:08,380
not working let's check my login working

00:33:02,680 --> 00:33:11,080
okay our actual try to ask you maybe you

00:33:08,380 --> 00:33:13,120
can actually try to keep unique request

00:33:11,080 --> 00:33:14,470
ID for each requesting that included in

00:33:13,120 --> 00:33:16,540
all the logs so they can actually

00:33:14,470 --> 00:33:18,400
combine if you all these are all

00:33:16,540 --> 00:33:19,890
connected then isolates from the other

00:33:18,400 --> 00:33:23,040
one

00:33:19,890 --> 00:33:23,040
anyone else

00:33:37,880 --> 00:33:43,429
I can answer the one regarding clogging

00:33:40,400 --> 00:33:45,799
also sonic has implemented logging so

00:33:43,429 --> 00:33:48,080
you can just import local library and do

00:33:45,799 --> 00:33:51,230
login does emit and that then you fight

00:33:48,080 --> 00:33:52,970
on free that way and it's very hard to

00:33:51,230 --> 00:33:56,750
overwrite the default logger

00:33:52,970 --> 00:33:58,669
I tried and failed and what you can also

00:33:56,750 --> 00:34:04,280
pass the configuration for the logger

00:33:58,669 --> 00:34:10,730
like from the dick that's also used by

00:34:04,280 --> 00:34:14,690
other vital application configuring from

00:34:10,730 --> 00:34:16,580
the from the dog from the geek the same

00:34:14,690 --> 00:34:18,760
things like the bicycle a very old

00:34:16,580 --> 00:34:18,760
fighter

00:34:18,790 --> 00:34:27,900
ok thanks a lot to the Rick Rick

00:34:22,710 --> 00:34:27,900

YouTube URL: https://www.youtube.com/watch?v=wb0lk4e9DEg


