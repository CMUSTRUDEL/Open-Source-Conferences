Title: Leblond Emmanuel - Bringing Python to Godot game engine
Publication date: 2017-09-17
Playlist: EuroPython 2017
Description: 
	"Bringing Python to Godot game engine
[EuroPython 2017 - Talk - 2017-07-10 - PyCharm Room]
[Rimini, Italy]

https://godotengine.org/
Godot is an advanced, feature-packed, multi-platform 2D and 3D open source game engine.
The project has joined the Software Freedom Conservancy project and it growing community makes it hopes to become a real alternative to Unity&amp;GameMaker.

This talk cover a year long journey of the port of Python as a scripting language for the engine, starting from a rant against Godot's Python-like proprietary language.

We will have a look at Godot's internal architecture as  is it itself a real interpreter with it garbage collector, dynamic typing, introspection and even builtin custom scripting language. All of this having to work next to our Python interpreter and communicate back and forth with it.

Finally we will see the different approaches that have been tried to bind Python to Godot each with there own pros&amp;cons:


Using Micropython interpreter instead of CPython
Using PyBind11 to statically bind to Godot C++ API
Using CFFI and rely on a 3rd party C API

The audience should have some basic knowledge of C level computing (static vs dynamic language, compilation &amp; linking).

License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2017.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:03,490 --> 00:00:15,640
Simon 11 please welcome came on stage so

00:00:12,160 --> 00:00:17,740
hi everyone thank you for coming welcome

00:00:15,640 --> 00:00:19,420
to this conference first let me

00:00:17,740 --> 00:00:22,930
introduce myself

00:00:19,420 --> 00:00:25,119
I'm Emmanuel most of the time I'm not

00:00:22,930 --> 00:00:28,390
doing game programming and I'm doing web

00:00:25,119 --> 00:00:30,970
stuff it's kind of hobby for me

00:00:28,390 --> 00:00:32,739
I'm kind of people you know which every

00:00:30,970 --> 00:00:34,600
six months I get a really great idea for

00:00:32,739 --> 00:00:36,700
gaming so I like oh I stood ready to do

00:00:34,600 --> 00:00:39,399
that and so I started working on the

00:00:36,700 --> 00:00:41,470
game and after like two months and end

00:00:39,399 --> 00:00:45,190
up I realized I spent all my time making

00:00:41,470 --> 00:00:47,920
a game engine and not again so I get

00:00:45,190 --> 00:00:49,480
pretty disappointed and I just it and so

00:00:47,920 --> 00:00:51,370
last time I had this kind of very great

00:00:49,480 --> 00:00:53,739
idea I said okay this time I will messed

00:00:51,370 --> 00:00:56,200
up I would just take your an existing

00:00:53,739 --> 00:00:58,239
game engine and focus 100% on my game

00:00:56,200 --> 00:01:01,420
and that's how I met goda

00:00:58,239 --> 00:01:04,030
so what's good on Godot is a

00:01:01,420 --> 00:01:05,860
full-featured it is just like one binary

00:01:04,030 --> 00:01:09,340
which get everything and the sync all

00:01:05,860 --> 00:01:12,430
around in just one package so there is

00:01:09,340 --> 00:01:18,460
plenty of features like physical engine

00:01:12,430 --> 00:01:20,950
2d 3d rendering audio engine script you

00:01:18,460 --> 00:01:23,560
can do profiling you have the input

00:01:20,950 --> 00:01:25,960
which is managed for you basically you

00:01:23,560 --> 00:01:28,270
have all the the hassle the boilerplate

00:01:25,960 --> 00:01:31,840
we are all already done for you as you

00:01:28,270 --> 00:01:33,549
just focus on the on the game those are

00:01:31,840 --> 00:01:36,189
really great features about god oh it's

00:01:33,549 --> 00:01:39,180
it's open source it's MIT license so

00:01:36,189 --> 00:01:40,540
meaning you can basically do your own

00:01:39,180 --> 00:01:42,790
game

00:01:40,540 --> 00:01:45,490
clothes you can sell it you have not to

00:01:42,790 --> 00:01:47,829
pay anything and one thing which was

00:01:45,490 --> 00:01:49,869
really important for me it's it has

00:01:47,829 --> 00:01:52,990
Linux support so you don't have to go to

00:01:49,869 --> 00:01:57,280
Windows and develop your game on Windows

00:01:52,990 --> 00:02:00,070
because it's kind of boring so now it's

00:01:57,280 --> 00:02:03,610
time for a little demo on what Jordan

00:02:00,070 --> 00:02:06,670
looks like so it's basically if you

00:02:03,610 --> 00:02:09,700
already account to Unity game engine it

00:02:06,670 --> 00:02:13,840
looks kind of the same so you have this

00:02:09,700 --> 00:02:16,319
this panel which is a Euro main scene of

00:02:13,840 --> 00:02:19,590
the game I can do note there is

00:02:16,319 --> 00:02:21,810
how bit too much there is my level so

00:02:19,590 --> 00:02:24,420
basically what you do by building a game

00:02:21,810 --> 00:02:26,459
is you create this the scene with plenty

00:02:24,420 --> 00:02:28,469
of node so you can see on the right side

00:02:26,459 --> 00:02:30,480
you have node for basically everything

00:02:28,469 --> 00:02:32,819
so here is kind of bonus it's coming

00:02:30,480 --> 00:02:38,489
because we're on platform game every

00:02:32,819 --> 00:02:41,700
enemy are also sorry every enemy is also

00:02:38,489 --> 00:02:44,310
endowed like this you can customize

00:02:41,700 --> 00:02:46,620
every node here with a plenty of all of

00:02:44,310 --> 00:02:50,159
our properties one great thing about

00:02:46,620 --> 00:02:52,530
girdle is you can nest seen inside

00:02:50,159 --> 00:02:55,799
themes so what does it means is for

00:02:52,530 --> 00:02:57,599
example this enemy right now in our main

00:02:55,799 --> 00:03:00,959
scene it looks like it's just a simple

00:02:57,599 --> 00:03:04,739
node but in fact if we look at it it's

00:03:00,959 --> 00:03:06,840
much more complex in fact our little guy

00:03:04,739 --> 00:03:10,439
is composed of plenty of nodes so it

00:03:06,840 --> 00:03:13,650
itself a scene you can see that there is

00:03:10,439 --> 00:03:16,379
a hitbox here for example there is a

00:03:13,650 --> 00:03:19,019
sprite there is animation and now we can

00:03:16,379 --> 00:03:21,419
tweak this this little guy how we want

00:03:19,019 --> 00:03:24,799
for example I can show the working

00:03:21,419 --> 00:03:28,579
animation and work and it like that

00:03:24,799 --> 00:03:32,340
another thing I can do is to plug

00:03:28,579 --> 00:03:35,459
scripts on any node I want to extend it

00:03:32,340 --> 00:03:40,229
so for example we can see on enemy it

00:03:35,459 --> 00:03:42,540
has a script here it's a it's a custom

00:03:40,229 --> 00:03:45,479
language which is called a GG script

00:03:42,540 --> 00:03:47,549
it's kind of look alike Python it's

00:03:45,479 --> 00:03:50,840
inspired by Python which is not Python

00:03:47,549 --> 00:03:54,090
so there is no self keyword for example

00:03:50,840 --> 00:03:54,829
there is constant when we'll get about

00:03:54,090 --> 00:03:58,709
it later

00:03:54,829 --> 00:04:01,530
so with this script I can extend what

00:03:58,709 --> 00:04:03,989
the the node can do I can attach new

00:04:01,530 --> 00:04:09,239
property for example I can create new

00:04:03,989 --> 00:04:13,109
function connect to signal etc etc so if

00:04:09,239 --> 00:04:15,720
I go back to my main scene here so I can

00:04:13,109 --> 00:04:18,449
start missing a bit around I can move

00:04:15,720 --> 00:04:21,630
this guy here I can change a bit the the

00:04:18,449 --> 00:04:25,380
map how it looks like I didn't sing like

00:04:21,630 --> 00:04:29,290
that I can for example add a new a new

00:04:25,380 --> 00:04:32,710
current theme here just to put the coin

00:04:29,290 --> 00:04:37,020
and if I'm good I can start running the

00:04:32,710 --> 00:04:40,300
game so here it is it didn't crash

00:04:37,020 --> 00:04:42,160
incredible and so here it is I have my

00:04:40,300 --> 00:04:44,170
my Gannon giant with all the physics

00:04:42,160 --> 00:04:48,760
already done we see I'm really pretty

00:04:44,170 --> 00:04:51,940
cool about it and so it just works so

00:04:48,760 --> 00:04:54,130
one thing about the gaming giant is G

00:04:51,940 --> 00:04:57,040
script it's always a question that I'll

00:04:54,130 --> 00:05:00,550
cure every time is why is it so why did

00:04:57,040 --> 00:05:02,610
just create from scratch a new game

00:05:00,550 --> 00:05:05,020
language a new script language

00:05:02,610 --> 00:05:07,870
reinventing the wheel instead of just

00:05:05,020 --> 00:05:09,310
taking Python or taking Lua which is

00:05:07,870 --> 00:05:12,400
already designed for this kind of use

00:05:09,310 --> 00:05:14,590
case in order to answer this question we

00:05:12,400 --> 00:05:21,400
should look at how Godel works from the

00:05:14,590 --> 00:05:22,690
inside so if we look at later that the

00:05:21,400 --> 00:05:25,210
in gÃ¶del you have your scene and

00:05:22,690 --> 00:05:27,400
everything is a nod so if we look at for

00:05:25,210 --> 00:05:30,400
example to denote which is basically you

00:05:27,400 --> 00:05:33,310
get the nod and you add some property to

00:05:30,400 --> 00:05:36,190
move it into a 2d space so for example

00:05:33,310 --> 00:05:38,620
here you have a rotation so for the

00:05:36,190 --> 00:05:41,370
moment is really simple C++ code but

00:05:38,620 --> 00:05:44,620
what you do in go-to is you add this

00:05:41,370 --> 00:05:46,810
macro GD class and this function bind

00:05:44,620 --> 00:05:49,720
method and basically what you're doing

00:05:46,810 --> 00:05:53,650
by doing this is you add introspection

00:05:49,720 --> 00:05:55,210
into your class so now with these things

00:05:53,650 --> 00:05:58,300
you can do two things you can if you

00:05:55,210 --> 00:06:02,470
want to to create a game only using C++

00:05:58,300 --> 00:06:06,430
connecting to the C++ godo API you can

00:06:02,470 --> 00:06:09,010
do it just the classical C++ wait just

00:06:06,430 --> 00:06:11,380
like this so you use a new keyword you

00:06:09,010 --> 00:06:15,370
create an object and then you use the

00:06:11,380 --> 00:06:18,430
arrows to call the function or you can

00:06:15,370 --> 00:06:22,600
go through this thing which is called

00:06:18,430 --> 00:06:25,060
class DV we this singleton and using the

00:06:22,600 --> 00:06:27,670
singleton in fact you go dynamically so

00:06:25,060 --> 00:06:29,890
it's during runtime that you will ask

00:06:27,670 --> 00:06:33,130
the game engine you ask class DV to

00:06:29,890 --> 00:06:36,160
retrieve the class which is named node

00:06:33,130 --> 00:06:38,860
2d to instantiate it and then after that

00:06:36,160 --> 00:06:41,550
you ask to retrieve the function set

00:06:38,860 --> 00:06:44,160
rotation and to apply it to this object

00:06:41,550 --> 00:06:47,070
and if you apply for example the wrong

00:06:44,160 --> 00:06:48,900
function to the wrong object it won't

00:06:47,070 --> 00:06:52,050
blow out like a sex holes or something

00:06:48,900 --> 00:06:55,230
like that you just really end up with an

00:06:52,050 --> 00:06:56,970
error object you can handle nicely you

00:06:55,230 --> 00:07:00,120
can see all around there is those a

00:06:56,970 --> 00:07:02,640
variant object if you think about it I

00:07:00,120 --> 00:07:05,340
mean you just like in Python in fact in

00:07:02,640 --> 00:07:07,200
C Python you have just your C Python

00:07:05,340 --> 00:07:10,190
interpreter which has not been compiled

00:07:07,200 --> 00:07:12,600
by you and you have your your scripts

00:07:10,190 --> 00:07:16,410
everything every variable in your script

00:07:12,600 --> 00:07:19,050
is represented inside the C Python as a

00:07:16,410 --> 00:07:21,020
PI object structure and so this PI

00:07:19,050 --> 00:07:25,290
object can contain basically everything

00:07:21,020 --> 00:07:27,090
afloat an object a class etc so it's

00:07:25,290 --> 00:07:28,980
just like this in in god or you have

00:07:27,090 --> 00:07:32,670
this variant class which contain

00:07:28,980 --> 00:07:35,730
anything so what's about Gd script G

00:07:32,670 --> 00:07:38,700
script is look very simpler than the

00:07:35,730 --> 00:07:41,010
dynamic interface but in fact is exactly

00:07:38,700 --> 00:07:45,260
the same thing it's just a convenient

00:07:41,010 --> 00:07:48,710
way to wrap the C++ dynamic API of Goten

00:07:45,260 --> 00:07:51,570
so putting animal putting another way

00:07:48,710 --> 00:07:54,360
you can see that you have on the Left

00:07:51,570 --> 00:07:57,690
what is a cool functionality of godo

00:07:54,360 --> 00:08:00,150
which is so this violent class which

00:07:57,690 --> 00:08:03,600
contain basically anything and this

00:08:00,150 --> 00:08:05,280
class DB structure which can contain all

00:08:03,600 --> 00:08:08,700
the information you can retrieve at

00:08:05,280 --> 00:08:12,000
runtime about the node and on the right

00:08:08,700 --> 00:08:14,460
side you have a really simple G Street

00:08:12,000 --> 00:08:17,340
module which is basically two thing one

00:08:14,460 --> 00:08:19,290
is a compiler to turn your your good ol

00:08:17,340 --> 00:08:21,600
human readable source code into byte

00:08:19,290 --> 00:08:24,000
code and another thing is just a really

00:08:21,600 --> 00:08:26,790
tiny interpreter which take every byte

00:08:24,000 --> 00:08:29,070
code one by one and just call the

00:08:26,790 --> 00:08:32,970
equivalent code which is provided by

00:08:29,070 --> 00:08:35,160
class DB so in the end it's it's a

00:08:32,970 --> 00:08:38,460
really simple module it's something that

00:08:35,160 --> 00:08:40,260
is not like you using a really big very

00:08:38,460 --> 00:08:42,030
big interpreter with plenty of property

00:08:40,260 --> 00:08:44,190
and functionality and so on it's just

00:08:42,030 --> 00:08:48,180
something real tiny really simple on a

00:08:44,190 --> 00:08:52,050
real and it's deeply integrated with

00:08:48,180 --> 00:08:53,550
gÃ¶del so it works pretty well so there

00:08:52,050 --> 00:08:54,840
is nothing to fear about this G

00:08:53,550 --> 00:08:56,450
descriptor it's

00:08:54,840 --> 00:09:00,830
one of the few youth kids we're

00:08:56,450 --> 00:09:03,570
inventing a new language is fine but

00:09:00,830 --> 00:09:07,260
we're here for Python not for GT script

00:09:03,570 --> 00:09:10,020
and in fact I really love Python and

00:09:07,260 --> 00:09:12,690
when I start using this game and join

00:09:10,020 --> 00:09:14,430
with godo with G discrete story I was

00:09:12,690 --> 00:09:17,160
always thinking about pythons you know

00:09:14,430 --> 00:09:19,320
we could do this better in Python for

00:09:17,160 --> 00:09:21,870
example I could take these game logic

00:09:19,320 --> 00:09:24,360
outside of the engine and start unit

00:09:21,870 --> 00:09:26,910
testing in with PI tests so it would be

00:09:24,360 --> 00:09:31,080
a much more easier to do this thing I

00:09:26,910 --> 00:09:33,840
could also for example plug the Python

00:09:31,080 --> 00:09:36,930
ecosystem into my game for example start

00:09:33,840 --> 00:09:39,390
using the PI touch library to use the

00:09:36,930 --> 00:09:40,170
machine learning to create AI or ads and

00:09:39,390 --> 00:09:42,780
stuff like that

00:09:40,170 --> 00:09:45,540
so I end up realizing what I really

00:09:42,780 --> 00:09:48,330
wanted is I should spend a couple of

00:09:45,540 --> 00:09:50,850
week maybe a month into trying to put

00:09:48,330 --> 00:09:53,730
Python into girdle and then after that I

00:09:50,850 --> 00:09:56,220
will go back to my game and the time I

00:09:53,730 --> 00:09:58,230
will save because now I asked Python and

00:09:56,220 --> 00:10:02,390
go with really worth it and so I will

00:09:58,230 --> 00:10:06,330
recover my time invested into doing this

00:10:02,390 --> 00:10:08,970
so now how do we do that

00:10:06,330 --> 00:10:11,940
the first thing we have to do is to tell

00:10:08,970 --> 00:10:14,340
Google there is a new player in in the

00:10:11,940 --> 00:10:17,040
game which is a Python and know if it

00:10:14,340 --> 00:10:18,780
finds out that he's asked to load a dot

00:10:17,040 --> 00:10:21,150
P I file it should come to see our

00:10:18,780 --> 00:10:23,880
module so doing this is pretty simple

00:10:21,150 --> 00:10:25,530
there is already a generic class in godo

00:10:23,880 --> 00:10:27,090
which represent what the script

00:10:25,530 --> 00:10:30,240
languages and so we have to implement

00:10:27,090 --> 00:10:32,100
this the second thing is we have to

00:10:30,240 --> 00:10:34,560
create bindings so we have to create

00:10:32,100 --> 00:10:37,260
binding class for Python to manipulate

00:10:34,560 --> 00:10:39,930
the other object so there is pretty

00:10:37,260 --> 00:10:42,240
simple object like building like Nasdaq

00:10:39,930 --> 00:10:43,770
server for example and our more dynamics

00:10:42,240 --> 00:10:45,870
one like the note I was paying you

00:10:43,770 --> 00:10:48,150
before so for the node we can use the

00:10:45,870 --> 00:10:51,330
class Sydney is a class DB API to create

00:10:48,150 --> 00:10:54,420
the binding just lazily only when there

00:10:51,330 --> 00:10:56,880
are needed at runtime the only trick we

00:10:54,420 --> 00:11:00,500
have to cater to make sure about it with

00:10:56,880 --> 00:11:03,930
those things is we must be sure to

00:11:00,500 --> 00:11:06,030
manipulate the godel object through all

00:11:03,930 --> 00:11:07,610
binding and not copy the data because

00:11:06,030 --> 00:11:09,740
most of the time you

00:11:07,610 --> 00:11:12,589
get data from girdle you started

00:11:09,740 --> 00:11:14,899
modifying it them a bit you return them

00:11:12,589 --> 00:11:19,100
to go to and then go to doing stuff

00:11:14,899 --> 00:11:22,279
reading it modifying it etc next thing

00:11:19,100 --> 00:11:25,550
is converting violent into PI object so

00:11:22,279 --> 00:11:28,459
the way go to represent dynamic type

00:11:25,550 --> 00:11:30,260
into the way Python represent dynamic

00:11:28,459 --> 00:11:33,140
type so it really straightforward there

00:11:30,260 --> 00:11:35,089
is no big deal now this and the much

00:11:33,140 --> 00:11:37,490
more complex thing is handled memory

00:11:35,089 --> 00:11:40,760
because now we end up with two different

00:11:37,490 --> 00:11:42,649
garbage collector one for Godot and one

00:11:40,760 --> 00:11:45,620
for Python and we have to make them work

00:11:42,649 --> 00:11:48,800
all together and most of the time what

00:11:45,620 --> 00:11:51,380
happened is you start creating an object

00:11:48,800 --> 00:11:54,380
from inside Python for example you pass

00:11:51,380 --> 00:11:57,019
it to go to and so from the point to the

00:11:54,380 --> 00:11:59,120
Python point of view there is not much

00:11:57,019 --> 00:12:01,970
about it about this memory so it can

00:11:59,120 --> 00:12:03,920
start to clean it to erase it and so

00:12:01,970 --> 00:12:06,860
it's brought up at any time when go to

00:12:03,920 --> 00:12:10,640
start to actually read those data so we

00:12:06,860 --> 00:12:13,310
have to take care about this and now we

00:12:10,640 --> 00:12:16,120
can talk about the implementation so I

00:12:13,310 --> 00:12:19,660
said I was planning for something like

00:12:16,120 --> 00:12:22,160
one month let's say to implement this I

00:12:19,660 --> 00:12:25,610
didn't well as planned so it's been one

00:12:22,160 --> 00:12:27,949
year now so I started at the really

00:12:25,610 --> 00:12:30,560
beginning using micro Python the reason

00:12:27,949 --> 00:12:33,140
why it's first the the guy behind

00:12:30,560 --> 00:12:35,600
Google's already tried to put Python on

00:12:33,140 --> 00:12:38,690
Godot and the set binding was real pain

00:12:35,600 --> 00:12:40,670
in the ass and so it was a lot of time

00:12:38,690 --> 00:12:43,190
and the code wasn't really it again so

00:12:40,670 --> 00:12:44,089
it didn't work at all so I said ok let's

00:12:43,190 --> 00:12:46,730
try something else

00:12:44,089 --> 00:12:48,560
the good thing about micro Python seems

00:12:46,730 --> 00:12:51,440
there is a lot of customization you can

00:12:48,560 --> 00:12:54,230
do when you choose to bold it you can

00:12:51,440 --> 00:12:56,839
disable plenty of feature in order to

00:12:54,230 --> 00:12:59,180
have your interpreter consume less RAM

00:12:56,839 --> 00:13:01,339
and have less functionality so maybe you

00:12:59,180 --> 00:13:03,260
can see making a sandbox because you

00:13:01,339 --> 00:13:08,079
reduce a lot of functionality of your

00:13:03,260 --> 00:13:11,839
scripts so it seemed very interesting

00:13:08,079 --> 00:13:14,899
the trouble about it is a micro Python

00:13:11,839 --> 00:13:15,560
is designed to be run on microcontroller

00:13:14,899 --> 00:13:18,529
so on

00:13:15,560 --> 00:13:21,140
system which are really limited with

00:13:18,529 --> 00:13:23,210
memory which is not what you do when you

00:13:21,140 --> 00:13:27,200
are running game basically of a gigabyte

00:13:23,210 --> 00:13:29,690
of ram so the the trouble with it is the

00:13:27,200 --> 00:13:32,870
C API is really lower level that it

00:13:29,690 --> 00:13:34,970
would be with C Python for example so

00:13:32,870 --> 00:13:37,430
for example when you are working with

00:13:34,970 --> 00:13:40,100
strings you're not really working with

00:13:37,430 --> 00:13:42,410
strings most of the time the strings are

00:13:40,100 --> 00:13:44,240
all collected together and during the

00:13:42,410 --> 00:13:46,040
compilation time micro pension is

00:13:44,240 --> 00:13:48,710
looking for if there is some strings

00:13:46,040 --> 00:13:50,210
that are reused from time to time and if

00:13:48,710 --> 00:13:52,790
they are the same they're just all

00:13:50,210 --> 00:13:54,350
connect them together and so in the end

00:13:52,790 --> 00:13:56,800
you don't mind flate a string you just

00:13:54,350 --> 00:13:59,029
manipulate an ID on the string so

00:13:56,800 --> 00:14:01,400
everything is like this in micro Python

00:13:59,029 --> 00:14:05,540
so it makes the API much more difficult

00:14:01,400 --> 00:14:08,690
to work with and so yeah it's it was

00:14:05,540 --> 00:14:13,580
really hard to work the other thing is

00:14:08,690 --> 00:14:16,130
it's not 100% isin so I said I wanted to

00:14:13,580 --> 00:14:18,500
have all the green eyes Python ecosystem

00:14:16,130 --> 00:14:21,160
with it but with micro Python for

00:14:18,500 --> 00:14:24,020
example you don't have the same C API

00:14:21,160 --> 00:14:27,170
you don't support really dynamic stuff

00:14:24,020 --> 00:14:30,620
so there is plenty of libraries that

00:14:27,170 --> 00:14:32,600
won't work with micro Python one example

00:14:30,620 --> 00:14:35,270
is for the moment there is no support

00:14:32,600 --> 00:14:37,240
for the PVV library which is under

00:14:35,270 --> 00:14:39,980
symbol and you think about it because

00:14:37,240 --> 00:14:42,440
micro Python it's for microcontroller

00:14:39,980 --> 00:14:44,780
and when you run your code on microphone

00:14:42,440 --> 00:14:47,630
for you don't have access to a CDN STD

00:14:44,780 --> 00:14:49,880
out so you just don't gdug it with PDB

00:14:47,630 --> 00:14:52,040
but when you are working with a game

00:14:49,880 --> 00:14:54,890
it's much different you really want to

00:14:52,040 --> 00:14:56,900
be able to just put a PDB everywhere and

00:14:54,890 --> 00:14:58,000
jump in and start doing introspection

00:14:56,900 --> 00:15:02,930
and so on

00:14:58,000 --> 00:15:04,700
so it was not read their side so around

00:15:02,930 --> 00:15:07,339
this time we got the fold them in

00:15:04,700 --> 00:15:10,130
Belgium and just after the fold them

00:15:07,339 --> 00:15:12,380
still in Belgium was the really first go

00:15:10,130 --> 00:15:13,910
to come so all the global programmer met

00:15:12,380 --> 00:15:15,800
there it was a really fun time

00:15:13,910 --> 00:15:18,080
especially because it Belgium and so you

00:15:15,800 --> 00:15:20,450
eat fries and you drink beer she's very

00:15:18,080 --> 00:15:23,600
good for programmers and so we had a lot

00:15:20,450 --> 00:15:26,940
of ID and so I realized micro passion

00:15:23,600 --> 00:15:31,290
just won't do it and so I switch to

00:15:26,940 --> 00:15:35,700
cpython with pipe in 11 pipe in the van

00:15:31,290 --> 00:15:38,520
is a C++ library which is kind of it's

00:15:35,700 --> 00:15:41,730
does kind of magical tricks with C++

00:15:38,520 --> 00:15:45,030
templates so basically you have your C++

00:15:41,730 --> 00:15:49,500
class you wrap it with a pipe in eleven

00:15:45,030 --> 00:15:52,080
and you magically end up with a Python

00:15:49,500 --> 00:15:55,020
module so it works really well it's

00:15:52,080 --> 00:15:58,740
really elegant you you feel like you are

00:15:55,020 --> 00:16:01,410
working with Python from within C++ but

00:15:58,740 --> 00:16:03,660
the trouble is you are doing really

00:16:01,410 --> 00:16:05,850
static template so you have your C++

00:16:03,660 --> 00:16:08,520
class you bind it and then you get it

00:16:05,850 --> 00:16:10,530
into Python but the way go-to works is

00:16:08,520 --> 00:16:13,830
much more dynamic like I said you have

00:16:10,530 --> 00:16:16,290
this you have this class DB things when

00:16:13,830 --> 00:16:19,920
you can do introspection but you cannot

00:16:16,290 --> 00:16:22,800
use it here with pipe in 11th so in the

00:16:19,920 --> 00:16:27,360
end you end up but I end up having to

00:16:22,800 --> 00:16:28,260
write scripts which pass all the source

00:16:27,360 --> 00:16:32,460
code of gÃ¶del

00:16:28,260 --> 00:16:36,810
in order to get back the the C++ API and

00:16:32,460 --> 00:16:39,510
then generate glue code for for scripts

00:16:36,810 --> 00:16:43,020
before bindings so in the end it was

00:16:39,510 --> 00:16:45,930
like 100,000 line of C++ with templates

00:16:43,020 --> 00:16:47,250
everywhere generated the completion of

00:16:45,930 --> 00:16:49,020
this was a real nightmare it was

00:16:47,250 --> 00:16:54,660
something like 5 minutes just for this

00:16:49,020 --> 00:16:57,990
file with 5 gigabytes of RAM used and in

00:16:54,660 --> 00:17:02,280
the end you you add up like up to 100

00:16:57,990 --> 00:17:05,940
megabytes of to your final binary so it

00:17:02,280 --> 00:17:09,060
was yeah it works but it was really not

00:17:05,940 --> 00:17:11,100
elegant and reconned or some to work

00:17:09,060 --> 00:17:13,470
with I mean every time I had to do just

00:17:11,100 --> 00:17:16,730
a simple change I have to wait more than

00:17:13,470 --> 00:17:21,050
5 minutes just to see the recompilation

00:17:16,730 --> 00:17:25,260
so yeah it was kind of painful but

00:17:21,050 --> 00:17:28,590
anytime there was a always the Guru the

00:17:25,260 --> 00:17:31,290
Guru community was always there and so

00:17:28,590 --> 00:17:35,370
we had a new meeting at multiline in

00:17:31,290 --> 00:17:35,730
Paris we even have the name developer of

00:17:35,370 --> 00:17:37,950
godo

00:17:35,730 --> 00:17:40,220
which is from Argentina so we cannot

00:17:37,950 --> 00:17:43,020
him in person normally but he went there

00:17:40,220 --> 00:17:45,780
with his wife or his vacation it was

00:17:43,020 --> 00:17:48,360
kind of really nice and so we talked a

00:17:45,780 --> 00:17:52,380
lot about all the trouble and so I end

00:17:48,360 --> 00:17:55,530
up there was a new feature into inside

00:17:52,380 --> 00:17:58,770
gÃ¶del which was they created a capi

00:17:55,530 --> 00:18:00,870
build on top of the C++ API and so it

00:17:58,770 --> 00:18:03,180
was a real game-changer because with

00:18:00,870 --> 00:18:07,860
this C API I could just drop everything

00:18:03,180 --> 00:18:09,780
and switch to c FF i which was a really

00:18:07,860 --> 00:18:11,850
good choice if you saw the conference

00:18:09,780 --> 00:18:16,200
from the are unsure this morning

00:18:11,850 --> 00:18:18,960
so basically c fe phi is solving every

00:18:16,200 --> 00:18:22,020
problem what you do is just you create a

00:18:18,960 --> 00:18:24,600
script in the script you say i want to

00:18:22,020 --> 00:18:26,540
use from into python this function and

00:18:24,600 --> 00:18:30,300
this function you just copy-paste the

00:18:26,540 --> 00:18:32,250
function signature then you put your

00:18:30,300 --> 00:18:35,010
python code you say ok i want to update

00:18:32,250 --> 00:18:38,910
this code into my module and you end up

00:18:35,010 --> 00:18:41,100
with defining okay I want this python

00:18:38,910 --> 00:18:43,530
function to look like this function in

00:18:41,100 --> 00:18:45,690
to see if it goes from C then you run

00:18:43,530 --> 00:18:47,460
the script and you end up with one C

00:18:45,690 --> 00:18:50,520
file you just have to compile and you

00:18:47,460 --> 00:18:54,840
get your module the absolutely great

00:18:50,520 --> 00:18:58,650
thing about this is you most of your

00:18:54,840 --> 00:19:01,020
binding are done in Python so it means

00:18:58,650 --> 00:19:04,170
that you have no longer to combine you

00:19:01,020 --> 00:19:06,150
just compile once and given all your

00:19:04,170 --> 00:19:08,880
most of your code is Python you just

00:19:06,150 --> 00:19:10,620
load it dynamically and so you can

00:19:08,880 --> 00:19:12,330
change everything and any time and you

00:19:10,620 --> 00:19:18,050
don't have to recombine so compared to

00:19:12,330 --> 00:19:21,060
pipe in 11 it was like a game changer on

00:19:18,050 --> 00:19:23,220
top of that you got type ID for free

00:19:21,060 --> 00:19:25,320
which means the the compiler is a

00:19:23,220 --> 00:19:28,410
compatibility is here it's reaching and

00:19:25,320 --> 00:19:31,350
so yeah just I mean pipe is just a

00:19:28,410 --> 00:19:33,060
really good use case for I mean game

00:19:31,350 --> 00:19:35,070
engine is a really good use case for pi

00:19:33,060 --> 00:19:36,990
PI because it's always the same loop

00:19:35,070 --> 00:19:39,900
which is ran always the same script same

00:19:36,990 --> 00:19:42,960
data so the just-in-time compilation can

00:19:39,900 --> 00:19:45,500
really do a boost so I hope it will make

00:19:42,960 --> 00:19:49,890
it boost eventually and Gotha

00:19:45,500 --> 00:19:53,430
so you are here and now we have a data

00:19:49,890 --> 00:19:56,250
which is available it was released the

00:19:53,430 --> 00:19:57,660
last week in a hurry because we had this

00:19:56,250 --> 00:20:00,270
conference and so I have something to

00:19:57,660 --> 00:20:03,960
show but it works totally well I didn't

00:20:00,270 --> 00:20:07,200
find any bugs so far but that's why we

00:20:03,960 --> 00:20:10,650
need you to find the bug I'm sure

00:20:07,200 --> 00:20:13,260
there's plenty of them yeah

00:20:10,650 --> 00:20:15,240
the other thing is the pie pie so I said

00:20:13,260 --> 00:20:20,940
it would be a really really nice feature

00:20:15,240 --> 00:20:24,059
to have it the only really for ball is a

00:20:20,940 --> 00:20:26,280
folder moment I'm using the new version

00:20:24,059 --> 00:20:29,100
of a doddle because Goro is a kind of

00:20:26,280 --> 00:20:32,130
really young project I mean it's been

00:20:29,100 --> 00:20:34,559
open sourced in 2014 so it's been three

00:20:32,130 --> 00:20:36,900
years there worked a lot on it so there

00:20:34,559 --> 00:20:40,860
is plenty of new feature this new reader

00:20:36,900 --> 00:20:43,830
which is the 3.0 is a which is coming

00:20:40,860 --> 00:20:45,929
soon it will change a lot of things they

00:20:43,830 --> 00:20:48,480
all all change the three renderer for

00:20:45,929 --> 00:20:51,990
example the new physically based

00:20:48,480 --> 00:20:54,840
rendering they are not the scenes I mean

00:20:51,990 --> 00:20:57,510
they changed a lot a lot of things the

00:20:54,840 --> 00:21:00,990
thing is now the release is in alpha so

00:20:57,510 --> 00:21:04,980
I got go-to in alpha I got my module

00:21:00,990 --> 00:21:09,030
which is really early so I believe it is

00:21:04,980 --> 00:21:12,000
a beta and now I'm building with this pi

00:21:09,030 --> 00:21:15,240
PI which is in beta also for pi PI 3.5

00:21:12,000 --> 00:21:18,260
so we have 1 alpha 2 beta all together

00:21:15,240 --> 00:21:22,559
and so it ended up with a big seg fault

00:21:18,260 --> 00:21:26,010
but it does so we have to find out and

00:21:22,559 --> 00:21:28,770
then with the to go next thing would be

00:21:26,010 --> 00:21:33,510
in the editor integration because right

00:21:28,770 --> 00:21:35,520
now it's kind of wrong if you see like I

00:21:33,510 --> 00:21:37,470
said the editor is really nice because

00:21:35,520 --> 00:21:39,929
everything is packed together so it

00:21:37,470 --> 00:21:42,270
looks really interesting but right now

00:21:39,929 --> 00:21:46,380
if I want you to give out my script with

00:21:42,270 --> 00:21:48,840
I put PDD somewhere for example it's not

00:21:46,380 --> 00:21:52,230
like that it's you have to go to the

00:21:48,840 --> 00:21:54,600
console like this ugly console and use

00:21:52,230 --> 00:21:58,740
PDB like that it would be much better to

00:21:54,600 --> 00:22:00,900
be able to use a debugger panel here in

00:21:58,740 --> 00:22:03,030
order to do all the stuff and the nice

00:22:00,900 --> 00:22:05,850
things would be to be to have a auto

00:22:03,030 --> 00:22:08,190
completion for the folder code the

00:22:05,850 --> 00:22:12,450
Python code into the botton editor in

00:22:08,190 --> 00:22:14,700
the in gÃ¶del and last but not least I

00:22:12,450 --> 00:22:20,160
think the most important thing would be

00:22:14,700 --> 00:22:22,560
to add I mean right now the C API I use

00:22:20,160 --> 00:22:24,750
with the SSI is not complete enough I

00:22:22,560 --> 00:22:28,320
have access to the Bolton I have access

00:22:24,750 --> 00:22:33,150
to the class DB stuff to you my

00:22:28,320 --> 00:22:35,610
introspection but the way I register my

00:22:33,150 --> 00:22:38,760
module to go to say ok there is a new

00:22:35,610 --> 00:22:42,420
modules for for a programming language

00:22:38,760 --> 00:22:45,390
from script language on the program I'm

00:22:42,420 --> 00:22:49,230
still using C++ so what that it means is

00:22:45,390 --> 00:22:51,540
I have to release an interior engine I

00:22:49,230 --> 00:22:52,590
compile myself with the triple of type I

00:22:51,540 --> 00:22:56,100
love Python

00:22:52,590 --> 00:22:57,630
sorry and I have to give it to the

00:22:56,100 --> 00:22:59,790
people which is really cumbersome

00:22:57,630 --> 00:23:02,390
because I should support a Windows I

00:22:59,790 --> 00:23:05,040
should support Linux Mac OS and etc and

00:23:02,390 --> 00:23:07,679
it's not like the philosophy of Godot is

00:23:05,040 --> 00:23:09,480
you have just one binary and then you

00:23:07,679 --> 00:23:11,940
just kind of use it you don't have to

00:23:09,480 --> 00:23:13,650
recompile stuff and so on so the really

00:23:11,940 --> 00:23:16,380
important thing I think I'm going to

00:23:13,650 --> 00:23:19,380
work on is to improve the C API in order

00:23:16,380 --> 00:23:21,870
to just be able to compile go to as a

00:23:19,380 --> 00:23:25,919
shared library just a simple dot s or

00:23:21,870 --> 00:23:29,190
stuff which you can just drop on the on

00:23:25,919 --> 00:23:31,530
your game folder and then go doe will

00:23:29,190 --> 00:23:35,040
see these things with load it and then

00:23:31,530 --> 00:23:37,320
you got the pythons report like that

00:23:35,040 --> 00:23:39,660
the really good things would be to have

00:23:37,320 --> 00:23:41,820
it on the assets throw because you can

00:23:39,660 --> 00:23:45,059
see on good ol you have an asset store

00:23:41,820 --> 00:23:47,850
just like in unity for the moment it's a

00:23:45,059 --> 00:23:49,470
snippet of code of TD scripts code but

00:23:47,850 --> 00:23:51,870
it would be real good you know you start

00:23:49,470 --> 00:23:54,090
your new project you go on the asset

00:23:51,870 --> 00:23:57,000
store you double-click on the Python and

00:23:54,090 --> 00:24:00,450
then you get to item just like that so

00:23:57,000 --> 00:24:03,330
that would be the the final goal and I

00:24:00,450 --> 00:24:06,179
think if I finish this I could go back

00:24:03,330 --> 00:24:08,840
to working my again I thought I forgot

00:24:06,179 --> 00:24:17,129
what it was about by the way

00:24:08,840 --> 00:24:19,860
yes hello thank you very much just one

00:24:17,129 --> 00:24:22,980
more thing I will be on I would be all

00:24:19,860 --> 00:24:25,110
this week and on the European and I will

00:24:22,980 --> 00:24:27,299
also be on the Sprint which are this

00:24:25,110 --> 00:24:29,519
weekend so if you intercede into the in

00:24:27,299 --> 00:24:31,679
the project and want to hang out to just

00:24:29,519 --> 00:24:35,429
tell me and we will code all together

00:24:31,679 --> 00:24:38,159
thank you okay we've got some time for

00:24:35,429 --> 00:24:47,909
questions if you have one please write

00:24:38,159 --> 00:24:50,580
your fan we have a microphone thank you

00:24:47,909 --> 00:24:53,309
for the token of course question is what

00:24:50,580 --> 00:24:59,539
about performance in comparison to

00:24:53,309 --> 00:25:03,509
eighth grade there is two thing first is

00:24:59,539 --> 00:25:05,399
GD Street is already known to be slow I

00:25:03,509 --> 00:25:07,769
mean there is people complaining about

00:25:05,399 --> 00:25:09,749
it now we have no idea if it's because

00:25:07,769 --> 00:25:10,470
it's real slow or because people are

00:25:09,749 --> 00:25:13,379
just compelled

00:25:10,470 --> 00:25:15,659
comparing GD script to C++ so there need

00:25:13,379 --> 00:25:19,700
to be some test which needs to be done

00:25:15,659 --> 00:25:23,309
that nobody has done them yet so maybe

00:25:19,700 --> 00:25:26,009
if I ran then shock right now Python is

00:25:23,309 --> 00:25:28,139
faster than G Street even it there is a

00:25:26,009 --> 00:25:29,999
big binding because Jesus Creek is not

00:25:28,139 --> 00:25:35,100
optimized but I don't think it's the

00:25:29,999 --> 00:25:37,320
case but anyway I think to improve the

00:25:35,100 --> 00:25:41,429
performance on this binding there is a

00:25:37,320 --> 00:25:44,879
PI pi so that's my hope I wish really

00:25:41,429 --> 00:25:49,679
hard that pipe I will make Python really

00:25:44,879 --> 00:25:52,139
fast and so the binding layer which make

00:25:49,679 --> 00:25:55,279
things slower but not that slow because

00:25:52,139 --> 00:25:55,279
you get a boost from pi PI

00:26:00,620 --> 00:26:10,400
do you support mobile export like iOS or

00:26:04,580 --> 00:26:15,770
Android you mean to support Android yeah

00:26:10,400 --> 00:26:18,980
we support IO invincible i io s this

00:26:15,770 --> 00:26:22,370
engine has been used for releasing the

00:26:18,980 --> 00:26:26,420
mr. bean game on Android and iOS for

00:26:22,370 --> 00:26:36,320
example you can play it is free I don't

00:26:26,420 --> 00:26:40,760
have to share on it this may be a

00:26:36,320 --> 00:26:44,660
related question but does go to make it

00:26:40,760 --> 00:26:47,750
easier to distribute games for PC and

00:26:44,660 --> 00:26:49,670
does your like Python integration and pi

00:26:47,750 --> 00:26:52,220
PI stuff make it harder to distribute

00:26:49,670 --> 00:26:54,920
games sorry I didn't get your question

00:26:52,220 --> 00:26:58,640
could you please speak louder please

00:26:54,920 --> 00:27:00,950
so when you want to publish games for

00:26:58,640 --> 00:27:04,580
people to use and you want to use them

00:27:00,950 --> 00:27:08,570
on PC does go to help with that and does

00:27:04,580 --> 00:27:12,380
using pi PI as part of pi PI or C Python

00:27:08,570 --> 00:27:16,910
as part of a godo game make it harder to

00:27:12,380 --> 00:27:19,010
to publish games basically when you read

00:27:16,910 --> 00:27:21,290
the game is just like you have your

00:27:19,010 --> 00:27:25,130
folder which contain your assets and

00:27:21,290 --> 00:27:27,710
your your script and you put the binder

00:27:25,130 --> 00:27:29,630
the binary of gÃ¶del just the program you

00:27:27,710 --> 00:27:31,550
just put it inside your folder and you

00:27:29,630 --> 00:27:34,520
get to you everything is ok everything

00:27:31,550 --> 00:27:36,980
works there is more advanced way to do

00:27:34,520 --> 00:27:39,260
it if you want for example to to Street

00:27:36,980 --> 00:27:43,820
your code in order or not I think people

00:27:39,260 --> 00:27:46,400
can easily read what it is done Morton's

00:27:43,820 --> 00:27:48,980
that you can also do I think now there

00:27:46,400 --> 00:27:53,420
are people working on supporting the the

00:27:48,980 --> 00:27:55,910
steam API to release game with steam so

00:27:53,420 --> 00:27:58,340
yeah there is work on it and already

00:27:55,910 --> 00:28:01,330
game which has been shipped with so on I

00:27:58,340 --> 00:28:01,330
think it works

00:28:05,650 --> 00:28:15,099
thank you

00:28:08,060 --> 00:28:15,099

YouTube URL: https://www.youtube.com/watch?v=SK0BtxHROdg


