Title: Yigit Guler - Understanding Celery & CeleryBeat
Publication date: 2017-09-17
Playlist: EuroPython 2017
Description: 
	"Understanding Celery & CeleryBeat
[EuroPython 2017 - Talk - 2017-07-10 - Arengo]
[Rimini, Italy]

Celery is a distributed task queue for Python. Although it is most popular in the web development ecosystem, it has a wide area of usage from system management to IoT devices. With Celery, transforming a function into a task is quite easy and can add great performance &amp; usability to the applications that we build.

This talk aims to give attendants a general overview on Celery and its uses. We will walk through the core Celery architecture by introducing key components with the help of various real-world examples. This will also lead to an understanding of the task queue systems in general. Attendants will also gain knowledge about Celerybeat; a tool that focuses on scheduling tasks.

We will be looking for the answers to the following questions:

What is a distributed task queue?
What are the main elements of Celery?
When should we use Celery tasks?
How do we use Celery Beat?

Attendants should have a basic knowledge of Python, and a minor development experience.

License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2017.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:04,520 --> 00:00:10,290
hi everyone today I'm going to talk

00:00:07,890 --> 00:00:14,879
about salary this will be an

00:00:10,290 --> 00:00:17,760
introductory presentation so if you use

00:00:14,879 --> 00:00:20,039
that in your daily life or familiar with

00:00:17,760 --> 00:00:22,080
it this presentation won't add many

00:00:20,039 --> 00:00:25,020
things to you but if you don't know

00:00:22,080 --> 00:00:27,750
anything about Saturday or if you find

00:00:25,020 --> 00:00:31,440
tasks use complicated in general this

00:00:27,750 --> 00:00:32,790
presentation might be useful for you so

00:00:31,440 --> 00:00:36,510
my name is heat

00:00:32,790 --> 00:00:40,320
I am from Istanbul Turkey and this will

00:00:36,510 --> 00:00:44,520
be my first Europe item talk so wish me

00:00:40,320 --> 00:00:47,520
luck I am a member of Python Istanbul

00:00:44,520 --> 00:00:49,620
community we are making weekly and

00:00:47,520 --> 00:00:52,800
monthly meetings and they are planning

00:00:49,620 --> 00:00:57,720
to organize a Pike on Turkey hopefully

00:00:52,800 --> 00:01:00,420
next year so be sure to see there I work

00:00:57,720 --> 00:01:03,570
in hippo it's a company where we build

00:01:00,420 --> 00:01:05,880
products so companies and startups come

00:01:03,570 --> 00:01:09,540
up with their ideas and we transform

00:01:05,880 --> 00:01:13,950
them into applications and we use salary

00:01:09,540 --> 00:01:15,960
heavily in our back-end team so before

00:01:13,950 --> 00:01:18,750
starting I want to talk a little bit

00:01:15,960 --> 00:01:21,390
about the beauty of the pythons in my

00:01:18,750 --> 00:01:24,240
opinion the beauty of Python comes from

00:01:21,390 --> 00:01:26,310
its diverse use people from many

00:01:24,240 --> 00:01:30,350
different backgrounds use Python every

00:01:26,310 --> 00:01:33,330
day from web development to astronomical

00:01:30,350 --> 00:01:36,210
calculations python is being used

00:01:33,330 --> 00:01:38,880
everywhere so it's a great opportunity

00:01:36,210 --> 00:01:41,640
for web developers to take a great

00:01:38,880 --> 00:01:44,159
advantage from the huge knowledge of the

00:01:41,640 --> 00:01:46,500
Academical site in their project for

00:01:44,159 --> 00:01:49,500
example if you are making a website you

00:01:46,500 --> 00:01:53,159
can easily integrate an image

00:01:49,500 --> 00:01:56,130
recognition library just by adding some

00:01:53,159 --> 00:01:58,850
lines of code but the same applies for

00:01:56,130 --> 00:02:01,110
the people from other domains as well

00:01:58,850 --> 00:02:03,420
imagine that you are an academician and

00:02:01,110 --> 00:02:06,659
working on an algorithm you can easily

00:02:03,420 --> 00:02:10,289
transform your transform your project to

00:02:06,659 --> 00:02:13,550
a web project by importing a small micro

00:02:10,289 --> 00:02:14,830
framework and make it web ready

00:02:13,550 --> 00:02:18,640
however

00:02:14,830 --> 00:02:21,100
the web itself has a problem its patient

00:02:18,640 --> 00:02:25,860
list have you ever seen these kinds of

00:02:21,100 --> 00:02:29,850
errors many this is mostly happens when

00:02:25,860 --> 00:02:34,120
the function the the Python function

00:02:29,850 --> 00:02:37,480
become gets very slow and cannot provide

00:02:34,120 --> 00:02:40,930
the response in the given time so we

00:02:37,480 --> 00:02:45,210
will get into late detail later so I

00:02:40,930 --> 00:02:51,930
created a an imaginary web page where

00:02:45,210 --> 00:02:55,840
people get somehow and we get their DNA

00:02:51,930 --> 00:03:00,760
files and analyze their DNA and generate

00:02:55,840 --> 00:03:03,460
a PDF file and send them that PDF file

00:03:00,760 --> 00:03:09,790
as an email and then show a thank you

00:03:03,460 --> 00:03:12,280
response when you look at the runtimes

00:03:09,790 --> 00:03:14,920
of each function in our imaginary

00:03:12,280 --> 00:03:16,930
scenario getting the user takes only 50

00:03:14,920 --> 00:03:19,530
milliseconds which is possible because

00:03:16,930 --> 00:03:22,420
probably it's just a database connection

00:03:19,530 --> 00:03:25,710
analyzing the DNA let's imagine that it

00:03:22,420 --> 00:03:29,380
takes 5 minutes which is I think ok in

00:03:25,710 --> 00:03:33,700
in these times and sending the email it

00:03:29,380 --> 00:03:35,710
takes about two seconds and yeah then we

00:03:33,700 --> 00:03:39,160
display the thank-you message so let's

00:03:35,710 --> 00:03:43,570
imagine that you are a visitor of this

00:03:39,160 --> 00:03:46,330
page and for the 5 minutes and 2 seconds

00:03:43,570 --> 00:03:49,630
the only thing that you see is just a

00:03:46,330 --> 00:03:53,710
white page this is definitely not the

00:03:49,630 --> 00:03:55,750
best user experience in 2017 and most

00:03:53,710 --> 00:03:58,330
probably you would never see this

00:03:55,750 --> 00:04:01,420
message because most of the browser's

00:03:58,330 --> 00:04:05,940
just lose their hopes on webpages that

00:04:01,420 --> 00:04:08,860
are slower than 2 minutes so most likely

00:04:05,940 --> 00:04:11,260
your users will just see a white page

00:04:08,860 --> 00:04:13,900
and then an L page and then they will

00:04:11,260 --> 00:04:17,380
try again and try again and after 50

00:04:13,900 --> 00:04:22,720
minutes they will receive 3 emails with

00:04:17,380 --> 00:04:25,810
the same PDF files so what if these two

00:04:22,720 --> 00:04:26,889
heavy functions could be out of our

00:04:25,810 --> 00:04:30,219
function what

00:04:26,889 --> 00:04:32,770
if that would be a way to give these two

00:04:30,219 --> 00:04:36,430
functions to someone else to another

00:04:32,770 --> 00:04:39,699
process sometime later and continue to

00:04:36,430 --> 00:04:44,110
our routine and display the thank you

00:04:39,699 --> 00:04:47,860
message so in that case we would get rid

00:04:44,110 --> 00:04:50,229
of these two heavy functions and just

00:04:47,860 --> 00:04:54,069
give the tank your response to the user

00:04:50,229 --> 00:04:58,210
in 50 milliseconds and this is where

00:04:54,069 --> 00:05:01,659
celery arrives this is the exact use

00:04:58,210 --> 00:05:05,319
case of celery when you have a function

00:05:01,659 --> 00:05:09,729
that you want to outsource say that it

00:05:05,319 --> 00:05:11,979
comes to your help using celery you can

00:05:09,729 --> 00:05:15,099
assign a task to some workers and

00:05:11,979 --> 00:05:17,860
continue on your team you will get into

00:05:15,099 --> 00:05:20,620
the details later about whatever code is

00:05:17,860 --> 00:05:22,620
what a task is but generally you can put

00:05:20,620 --> 00:05:27,009
everything that can be put out of

00:05:22,620 --> 00:05:29,050
request-response cycle so what this can

00:05:27,009 --> 00:05:32,710
be anything heavy

00:05:29,050 --> 00:05:36,009
for example sending emails sending an

00:05:32,710 --> 00:05:38,680
email can take up to three seconds or

00:05:36,009 --> 00:05:40,750
maybe more or sending push notifications

00:05:38,680 --> 00:05:43,930
imagine that you are you need to send

00:05:40,750 --> 00:05:48,750
100 push notifications to different

00:05:43,930 --> 00:05:52,029
people just as a result of an action

00:05:48,750 --> 00:05:54,789
resizing and editing images are always a

00:05:52,029 --> 00:05:58,270
pain especially when you deal with high

00:05:54,789 --> 00:06:01,149
resolution images and third party that

00:05:58,270 --> 00:06:05,139
data storage solutions like s3 and they

00:06:01,149 --> 00:06:08,310
are the most common reason of 502 errors

00:06:05,139 --> 00:06:11,710
in my opinion and there are also some

00:06:08,310 --> 00:06:13,930
tasks that take time like taking backups

00:06:11,710 --> 00:06:20,759
the normalization and data sync issues

00:06:13,930 --> 00:06:24,610
with third-party integrations this is an

00:06:20,759 --> 00:06:27,460
exemplary seller architecture here we

00:06:24,610 --> 00:06:30,550
see that we have an application we have

00:06:27,460 --> 00:06:33,430
a message queue and we have one or more

00:06:30,550 --> 00:06:34,560
workers so this is we will see this

00:06:33,430 --> 00:06:36,500
slide

00:06:34,560 --> 00:06:39,450
many times during this presentation

00:06:36,500 --> 00:06:42,570
because this is the basic cellular

00:06:39,450 --> 00:06:44,730
architecture we don't care for the

00:06:42,570 --> 00:06:47,760
result data base or anything this is the

00:06:44,730 --> 00:06:51,150
simplest possible implementation so

00:06:47,760 --> 00:06:55,860
let's look at each element and analyze

00:06:51,150 --> 00:06:59,010
what they do the application is our main

00:06:55,860 --> 00:07:02,669
application I mean in this case it's our

00:06:59,010 --> 00:07:05,580
view controller function so this is the

00:07:02,669 --> 00:07:07,530
part where we want to make it faster

00:07:05,580 --> 00:07:11,520
this is the part that wants to outsource

00:07:07,530 --> 00:07:13,650
some of these tasks to someone else what

00:07:11,520 --> 00:07:16,169
it said it can be a website or any kind

00:07:13,650 --> 00:07:20,330
of project Silla has a great support for

00:07:16,169 --> 00:07:24,990
applications because an application just

00:07:20,330 --> 00:07:27,450
need to give the function name that it

00:07:24,990 --> 00:07:31,470
wants led to execute and provide

00:07:27,450 --> 00:07:34,410
necessary arguments that's all the

00:07:31,470 --> 00:07:36,840
application should give the function

00:07:34,410 --> 00:07:39,150
name take the arguments Celebes

00:07:36,840 --> 00:07:43,640
transform them into Pickle or json

00:07:39,150 --> 00:07:46,080
string and record it to the database

00:07:43,640 --> 00:07:49,710
celery has a beauty in support for

00:07:46,080 --> 00:07:52,080
Django because once it was a Django

00:07:49,710 --> 00:07:54,060
project now it's open to all Python

00:07:52,080 --> 00:07:57,840
projects it has support for 'the last

00:07:54,060 --> 00:07:59,160
bottle pyramid and tornado and many

00:07:57,840 --> 00:08:03,630
other frameworks

00:07:59,160 --> 00:08:07,590
it even has support for PHP so if you

00:08:03,630 --> 00:08:10,320
are writing a PHP PHP program you can

00:08:07,590 --> 00:08:12,690
also use celery because all you have to

00:08:10,320 --> 00:08:14,940
know is the name of the function that

00:08:12,690 --> 00:08:17,820
you should you want to run and the

00:08:14,940 --> 00:08:21,500
necessary arguments so you can even see

00:08:17,820 --> 00:08:25,020
realize with jason through a PHP project

00:08:21,500 --> 00:08:28,229
and the task use this was the main huge

00:08:25,020 --> 00:08:30,750
thing you see in the middle and this is

00:08:28,229 --> 00:08:34,440
very important because celery needs to

00:08:30,750 --> 00:08:38,039
record these tasks to a database to a

00:08:34,440 --> 00:08:42,450
specialized database and then process

00:08:38,039 --> 00:08:46,350
one by one there are many available task

00:08:42,450 --> 00:08:47,450
queues rabbitmq i don't know if you

00:08:46,350 --> 00:08:51,820
heard of it but it

00:08:47,450 --> 00:08:56,390
the very popular message queue database

00:08:51,820 --> 00:08:59,270
it's it's the most supported one by

00:08:56,390 --> 00:09:01,730
salary but Reddy is also being heavily

00:08:59,270 --> 00:09:06,560
used with salary because you can use

00:09:01,730 --> 00:09:08,210
salary readies in other issues as well

00:09:06,560 --> 00:09:10,790
for example you can use the same salary

00:09:08,210 --> 00:09:14,210
instance for the caching of your website

00:09:10,790 --> 00:09:17,300
and the task management and there is

00:09:14,210 --> 00:09:21,230
support for other databases for couchdb

00:09:17,300 --> 00:09:25,370
MongoDB Amazon ask us if you don't want

00:09:21,230 --> 00:09:28,850
to deal with any database and workers

00:09:25,370 --> 00:09:31,460
workers is a specific term for salary

00:09:28,850 --> 00:09:35,240
you can imagine this as another another

00:09:31,460 --> 00:09:39,050
application that is written by salary

00:09:35,240 --> 00:09:42,590
guys and it will just work and pull the

00:09:39,050 --> 00:09:44,900
database if there is any task so it will

00:09:42,590 --> 00:09:46,610
always ask do you have a new task

00:09:44,900 --> 00:09:48,860
do you have a new test do you have a new

00:09:46,610 --> 00:09:51,110
task day and night and when there's a

00:09:48,860 --> 00:09:55,760
new task is to mark that task as

00:09:51,110 --> 00:09:58,360
assigned and process it so when we look

00:09:55,760 --> 00:10:01,370
back you see that the application

00:09:58,360 --> 00:10:03,620
prepares the task data which is the name

00:10:01,370 --> 00:10:05,230
of the function and the arguments send

00:10:03,620 --> 00:10:08,690
them to the message queue which is a

00:10:05,230 --> 00:10:11,060
specialized database and as all

00:10:08,690 --> 00:10:13,910
databases - when they record something

00:10:11,060 --> 00:10:17,480
on their data on their data storage they

00:10:13,910 --> 00:10:19,430
give an ID so it gives back the ID so

00:10:17,480 --> 00:10:22,220
that the application can track the

00:10:19,430 --> 00:10:25,700
status of that task is it processing is

00:10:22,220 --> 00:10:29,120
it process that is the renner or what

00:10:25,700 --> 00:10:31,790
and there might be one or multiple

00:10:29,120 --> 00:10:34,910
workers but you should have at least one

00:10:31,790 --> 00:10:38,150
worker to process this task in the queue

00:10:34,910 --> 00:10:39,650
and they can be anywhere they can be in

00:10:38,150 --> 00:10:43,040
the same instance they can be in

00:10:39,650 --> 00:10:47,000
different physical machines difficult

00:10:43,040 --> 00:10:51,290
different locations so let's move our

00:10:47,000 --> 00:10:55,310
heavy tasks to salary you remember our

00:10:51,290 --> 00:10:56,740
example what we want is to get user DNA

00:10:55,310 --> 00:10:59,920
information prepared

00:10:56,740 --> 00:11:04,330
PDF file and email that PDF file to the

00:10:59,920 --> 00:11:07,029
user before doing that the first thing

00:11:04,330 --> 00:11:09,550
that you should do is to set up a broker

00:11:07,029 --> 00:11:13,930
database this is the biggest dependency

00:11:09,550 --> 00:11:17,980
of salary and for this example I decided

00:11:13,930 --> 00:11:21,899
to use reddit because it's very commonly

00:11:17,980 --> 00:11:27,390
used and also we should install say a

00:11:21,899 --> 00:11:29,980
true tip it's the easiest part and then

00:11:27,390 --> 00:11:32,860
let's look again what we are going to

00:11:29,980 --> 00:11:38,890
transfer we are going to take these two

00:11:32,860 --> 00:11:42,310
functions and give it to settle so we

00:11:38,890 --> 00:11:46,690
create a new file named tasks PI and we

00:11:42,310 --> 00:11:50,080
create a function inside so what we do

00:11:46,690 --> 00:11:53,649
here is basically we have a function

00:11:50,080 --> 00:11:55,600
that calls these two functions so when I

00:11:53,649 --> 00:11:57,310
call this function with DNA file an

00:11:55,600 --> 00:12:02,680
email it will first analyze it and then

00:11:57,310 --> 00:12:06,000
send email with the attachment in order

00:12:02,680 --> 00:12:09,070
to make this as a salary task you should

00:12:06,000 --> 00:12:12,220
import salary and define a salary

00:12:09,070 --> 00:12:13,839
application while defining salary

00:12:12,220 --> 00:12:17,620
application of course we can give many

00:12:13,839 --> 00:12:20,890
details but as this is an introduction

00:12:17,620 --> 00:12:22,959
speech so we just give a name and the

00:12:20,890 --> 00:12:27,220
broker URL so that say that we can

00:12:22,959 --> 00:12:32,170
connect to this message database while

00:12:27,220 --> 00:12:34,750
creating tasks and consuming tests but

00:12:32,170 --> 00:12:38,890
this is not enough we should define that

00:12:34,750 --> 00:12:43,350
this function belongs to salary so we

00:12:38,890 --> 00:12:46,450
add this decorator on top of it and

00:12:43,350 --> 00:12:49,959
thanks to this decorator celery will

00:12:46,450 --> 00:12:54,820
know that it has such a task

00:12:49,959 --> 00:12:57,550
so while waking up the worker it will

00:12:54,820 --> 00:13:01,390
look for the tasks and it will prepare a

00:12:57,550 --> 00:13:03,910
list of tasks that it knows and it will

00:13:01,390 --> 00:13:09,120
execute when the right time will come

00:13:03,910 --> 00:13:15,220
and we go back to our view function and

00:13:09,120 --> 00:13:21,279
we get the user and we give the DNA file

00:13:15,220 --> 00:13:26,139
and the user so when we execute this

00:13:21,279 --> 00:13:29,380
function in this form what we will see

00:13:26,139 --> 00:13:31,839
did not surprise us we will see five

00:13:29,380 --> 00:13:35,889
minutes of white screen and then a

00:13:31,839 --> 00:13:42,389
message maybe because we just call that

00:13:35,889 --> 00:13:42,389
function we didn't wanted to that salary

00:13:42,810 --> 00:13:48,519
we didn't transfer this to a salary task

00:13:45,699 --> 00:13:50,529
so what we have to do is to add a delay

00:13:48,519 --> 00:13:53,500
at the end of the function this is a

00:13:50,529 --> 00:13:55,720
shortened short cut function there are

00:13:53,500 --> 00:13:59,050
other ways to do that with more

00:13:55,720 --> 00:14:03,069
information but when we add this delay

00:13:59,050 --> 00:14:07,209
at the end of the function the Python

00:14:03,069 --> 00:14:11,170
will not run this function but instead

00:14:07,209 --> 00:14:13,600
of it salary package will create the

00:14:11,170 --> 00:14:15,569
task by the functions name function name

00:14:13,600 --> 00:14:18,189
and the three arguments we sent and

00:14:15,569 --> 00:14:20,470
recorded to the database and as soon as

00:14:18,189 --> 00:14:23,139
it it gets recorded to the database and

00:14:20,470 --> 00:14:24,910
get the ID it will continue to its

00:14:23,139 --> 00:14:28,870
routine and display the thank-you

00:14:24,910 --> 00:14:31,750
message so as Reedus and other databases

00:14:28,870 --> 00:14:33,610
are quite fast maybe in a couple of

00:14:31,750 --> 00:14:36,970
milliseconds it will pass that part and

00:14:33,610 --> 00:14:41,829
display the user a nice message so the

00:14:36,970 --> 00:14:47,050
user will not wait for that task it's

00:14:41,829 --> 00:14:50,949
nice to use the least happy solve the

00:14:47,050 --> 00:14:54,040
message but he will not receive the

00:14:50,949 --> 00:14:58,000
message if we wait 5 minutes 10 minutes

00:14:54,040 --> 00:14:58,420
a day there will be no email in the

00:14:58,000 --> 00:15:01,839
Inbox

00:14:58,420 --> 00:15:04,449
why because there is no other period we

00:15:01,839 --> 00:15:08,110
recorded into the database we know that

00:15:04,449 --> 00:15:10,810
we have to execute this task but there

00:15:08,110 --> 00:15:15,339
is no one to execute so we should wake

00:15:10,810 --> 00:15:16,990
up a worker this is the easiest way to

00:15:15,339 --> 00:15:22,209
wake up workers

00:15:16,990 --> 00:15:28,240
this I open this log level to better

00:15:22,209 --> 00:15:29,950
visual visualization and if we type this

00:15:28,240 --> 00:15:35,080
function and we have salary installed

00:15:29,950 --> 00:15:37,600
this is this will be what we see by the

00:15:35,080 --> 00:15:40,029
way ancillary if you don't see any red

00:15:37,600 --> 00:15:42,580
lines this means that you are very lucky

00:15:40,029 --> 00:15:46,300
everything is ok it connected to

00:15:42,580 --> 00:15:49,120
database everything is good and here you

00:15:46,300 --> 00:15:53,890
can see the tasks you see there is a

00:15:49,120 --> 00:15:54,760
list of tasks so this item is known by

00:15:53,890 --> 00:15:59,770
salary

00:15:54,760 --> 00:16:02,920
so if salary sees such a task it will

00:15:59,770 --> 00:16:06,580
just go and execute it and as soon as we

00:16:02,920 --> 00:16:11,200
run the salary workers you will see this

00:16:06,580 --> 00:16:14,709
line because we already recorded a new

00:16:11,200 --> 00:16:17,860
task in the task database and it will

00:16:14,709 --> 00:16:21,880
receive the task and start working on it

00:16:17,860 --> 00:16:26,160
and after about 5 minutes you will see

00:16:21,880 --> 00:16:29,110
the competition message of this task

00:16:26,160 --> 00:16:33,940
this is just 5 minutes because I just

00:16:29,110 --> 00:16:36,670
put some sleep functions inside and

00:16:33,940 --> 00:16:39,910
another nice part about failure is that

00:16:36,670 --> 00:16:42,370
as you know some there are some

00:16:39,910 --> 00:16:45,520
functions that can create problems

00:16:42,370 --> 00:16:47,589
especially third-party integrations when

00:16:45,520 --> 00:16:50,529
you make an integration in an email

00:16:47,589 --> 00:16:52,420
service or an integration with a push

00:16:50,529 --> 00:16:55,720
notification service there is a great

00:16:52,420 --> 00:16:59,649
chance that they can they can have some

00:16:55,720 --> 00:17:02,649
technical problems and if you do this in

00:16:59,649 --> 00:17:06,339
your view controller functions this will

00:17:02,649 --> 00:17:08,679
mean that your website will will crash

00:17:06,339 --> 00:17:11,230
because of the third parties and if you

00:17:08,679 --> 00:17:14,290
put everything inside a try function it

00:17:11,230 --> 00:17:17,350
will not give errors to a user but it

00:17:14,290 --> 00:17:20,860
will not make the job so one of the

00:17:17,350 --> 00:17:24,280
biggest advantages of using salary is

00:17:20,860 --> 00:17:26,640
that you can just reach right asks for

00:17:24,280 --> 00:17:29,700
example you can set a test

00:17:26,640 --> 00:17:33,240
retry limit for example you can say plea

00:17:29,700 --> 00:17:37,290
try this test three times by waiting one

00:17:33,240 --> 00:17:40,880
minute before each trials this way you

00:17:37,290 --> 00:17:45,030
can improve the chance of executing your

00:17:40,880 --> 00:17:48,000
required tasks also salary tasks can

00:17:45,030 --> 00:17:51,360
create new tests so if you will iterate

00:17:48,000 --> 00:17:54,120
over thousands of users and send them

00:17:51,360 --> 00:17:56,460
emails you don't need to do this in ones

00:17:54,120 --> 00:17:58,830
you can just have a function that

00:17:56,460 --> 00:18:01,890
generates other federal function is

00:17:58,830 --> 00:18:04,530
salary tasks this way when you are I

00:18:01,890 --> 00:18:07,530
trade over a list and generate thousands

00:18:04,530 --> 00:18:10,860
of new tasks the workers will go on one

00:18:07,530 --> 00:18:14,010
by one over these tasks and execute them

00:18:10,860 --> 00:18:16,800
and if one of them fail only that little

00:18:14,010 --> 00:18:19,140
one will be executed again this is a

00:18:16,800 --> 00:18:22,800
huge advantage especially if you are

00:18:19,140 --> 00:18:25,440
dealing with emails because the worst

00:18:22,800 --> 00:18:28,860
thing that can happen to a developer is

00:18:25,440 --> 00:18:30,720
not to shut down the server but send

00:18:28,860 --> 00:18:33,480
wrong emails because if you shut down

00:18:30,720 --> 00:18:37,110
the server only the people who are on

00:18:33,480 --> 00:18:39,090
the site you'll see that you did some

00:18:37,110 --> 00:18:42,300
bad things but if you send wrong emails

00:18:39,090 --> 00:18:44,210
everybody will see those emails or push

00:18:42,300 --> 00:18:47,520
notifications they are the same so that

00:18:44,210 --> 00:18:52,080
is quite useful on handling these kind

00:18:47,520 --> 00:18:55,410
of errands situations and in steadily

00:18:52,080 --> 00:18:58,470
there is also a great tool that we

00:18:55,410 --> 00:19:01,490
frequently use periodic tasks in my

00:18:58,470 --> 00:19:04,260
opinion any website or any project

00:19:01,490 --> 00:19:08,820
sooner or later will require periodic

00:19:04,260 --> 00:19:11,430
tasks in order to run periodic tasks we

00:19:08,820 --> 00:19:15,900
have a tool named Stella rivet it comes

00:19:11,430 --> 00:19:18,390
inside the salary package and it's quite

00:19:15,900 --> 00:19:21,300
easy to set up however many people

00:19:18,390 --> 00:19:24,030
confuse salary bit because they think

00:19:21,300 --> 00:19:26,520
that if they have workers the life and

00:19:24,030 --> 00:19:29,220
if they define the salary with periodic

00:19:26,520 --> 00:19:31,590
tasks everything will work smoothly but

00:19:29,220 --> 00:19:36,999
in fact that's not true because workers

00:19:31,590 --> 00:19:41,409
just exit tasks or they cannot invoke

00:19:36,999 --> 00:19:43,379
niphas by themselves so you can thinks a

00:19:41,409 --> 00:19:48,149
little bit as a separate application

00:19:43,379 --> 00:19:51,279
that sends tasks to the message queue so

00:19:48,149 --> 00:19:53,229
you should imagine just like your

00:19:51,279 --> 00:19:56,769
application so you have to keep your

00:19:53,229 --> 00:19:59,019
application alive using supervisor or

00:19:56,769 --> 00:20:00,219
something like that and you have to keep

00:19:59,019 --> 00:20:02,739
your workers alive

00:20:00,219 --> 00:20:07,239
also you have to keep the celerity

00:20:02,739 --> 00:20:11,709
process alive there are three types of

00:20:07,239 --> 00:20:14,409
schedules time data schedules are the

00:20:11,709 --> 00:20:18,309
easiest one you just give a time

00:20:14,409 --> 00:20:20,789
interval and the task just runs this is

00:20:18,309 --> 00:20:25,059
dependent to the start time of the

00:20:20,789 --> 00:20:27,999
salary beat so if you start the beat 30

00:20:25,059 --> 00:20:30,399
seconds after the task will be initiated

00:20:27,999 --> 00:20:35,499
30 seconds after the task will be

00:20:30,399 --> 00:20:38,469
created again so and so forth if you

00:20:35,499 --> 00:20:42,009
have if you need to have more control on

00:20:38,469 --> 00:20:44,279
when the task will be fired you can use

00:20:42,009 --> 00:20:48,369
cron table schedules and you can say

00:20:44,279 --> 00:20:51,899
send these do this thing at this time

00:20:48,369 --> 00:20:56,619
for example in this case we are sending

00:20:51,899 --> 00:21:02,529
email digests every Friday at 5:30 p.m.

00:20:56,619 --> 00:21:03,579
and it's that easy to implement this you

00:21:02,529 --> 00:21:05,139
only think that you should take

00:21:03,579 --> 00:21:08,739
attention is the time zone of course

00:21:05,139 --> 00:21:11,979
because this will be filed by the time

00:21:08,739 --> 00:21:15,879
zone of the server's so please be aware

00:21:11,979 --> 00:21:19,689
and there are solar schedules as well if

00:21:15,879 --> 00:21:22,629
you want to file tasks by the position

00:21:19,689 --> 00:21:25,359
of the Earth and Sun if you can use this

00:21:22,629 --> 00:21:28,719
one for example if you want to fire a

00:21:25,359 --> 00:21:32,319
new task when it's sunset at Istanbul

00:21:28,719 --> 00:21:35,739
you can just give solar sunset and the

00:21:32,319 --> 00:21:38,469
coordinates of Istanbul and it will send

00:21:35,739 --> 00:21:42,579
the new task just at the right moment

00:21:38,469 --> 00:21:46,599
then it's the sunset at Istanbul there

00:21:42,579 --> 00:21:48,410
are different types so there are dusk

00:21:46,599 --> 00:21:51,260
civil task nautical

00:21:48,410 --> 00:21:54,080
that astronomical so if you have time

00:21:51,260 --> 00:21:57,770
you can check all of these and find the

00:21:54,080 --> 00:22:00,110
best one there are great additions the

00:21:57,770 --> 00:22:02,270
the one that I want to talk will be

00:22:00,110 --> 00:22:06,350
flower because I don't have too much

00:22:02,270 --> 00:22:10,310
time flower is the tool to monitor your

00:22:06,350 --> 00:22:12,860
salary workers all they do is are they

00:22:10,310 --> 00:22:14,990
processing the task so I strongly

00:22:12,860 --> 00:22:19,010
suggest you to use flowers if you use

00:22:14,990 --> 00:22:21,980
steadily and some last words it's a

00:22:19,010 --> 00:22:24,380
great and simple tool for time-consuming

00:22:21,980 --> 00:22:27,350
tasks I know that there are many people

00:22:24,380 --> 00:22:29,990
who hate celery I think they have a club

00:22:27,350 --> 00:22:31,940
of celery haters but I think this is

00:22:29,990 --> 00:22:34,070
mostly because old versions the new

00:22:31,940 --> 00:22:36,680
version especially the version 4 is

00:22:34,070 --> 00:22:39,590
quite stable and if you had bad

00:22:36,680 --> 00:22:42,230
experiences with celery I suggest you to

00:22:39,590 --> 00:22:45,020
give a try again you vote the you will

00:22:42,230 --> 00:22:46,790
be surprised you should you should never

00:22:45,020 --> 00:22:49,220
forget that arguments will be serialized

00:22:46,790 --> 00:22:51,590
and then save so never pass general

00:22:49,220 --> 00:22:55,100
models as an argument because they will

00:22:51,590 --> 00:22:58,790
be serialized as a string and if you do

00:22:55,100 --> 00:23:01,490
that you will have problems corrupt data

00:22:58,790 --> 00:23:05,770
problems and everything and celery

00:23:01,490 --> 00:23:08,300
sometimes is too easy to cover

00:23:05,770 --> 00:23:11,390
architectural problems so imagine that

00:23:08,300 --> 00:23:14,450
you have a faulty architecture and you

00:23:11,390 --> 00:23:17,210
just remove everything or you make too

00:23:14,450 --> 00:23:19,550
much the normalizations and then instead

00:23:17,210 --> 00:23:22,010
of fixing this thing and removing them

00:23:19,550 --> 00:23:26,060
the normalizations you can easily get

00:23:22,010 --> 00:23:29,300
into the trap of using celery to prepare

00:23:26,060 --> 00:23:33,410
those generalizations it will be a bad

00:23:29,300 --> 00:23:39,680
decision so please avoid that so I think

00:23:33,410 --> 00:23:42,740
I'm in time and thank you thank you very

00:23:39,680 --> 00:23:45,470
much very interesting I hope there are

00:23:42,740 --> 00:23:48,670
many questions yeah so I think here

00:23:45,470 --> 00:23:48,670
what's the first one yeah

00:23:52,530 --> 00:23:57,060
okay thank you for a talk and I have

00:23:54,900 --> 00:23:58,980
several questions but I have probably

00:23:57,060 --> 00:24:01,200
the most interesting one is like how

00:23:58,980 --> 00:24:04,230
would you compare salary - more like

00:24:01,200 --> 00:24:08,430
work flow operation tools like Luigi or

00:24:04,230 --> 00:24:10,080
airflow and like when tasks have

00:24:08,430 --> 00:24:12,450
dependency on each other that you told

00:24:10,080 --> 00:24:15,420
like the tasks can produce other tasks

00:24:12,450 --> 00:24:18,630
it's like this most interesting and I

00:24:15,420 --> 00:24:20,820
have like three minor questions yeah

00:24:18,630 --> 00:24:24,270
should I ask him right first thing I did

00:24:20,820 --> 00:24:28,890
is use those the other one so I don't

00:24:24,270 --> 00:24:29,340
know yeah okay and the question for a

00:24:28,890 --> 00:24:30,960
queue

00:24:29,340 --> 00:24:33,000
you told that there are several back-end

00:24:30,960 --> 00:24:35,550
supported and that's how a we try to

00:24:33,000 --> 00:24:38,160
normalize some guarantees for Q's

00:24:35,550 --> 00:24:40,860
because like you mentioned sqs and SKS

00:24:38,160 --> 00:24:43,110
doesn't guarantee you order and also it

00:24:40,860 --> 00:24:46,500
doesn't guarantee exactly once rule for

00:24:43,110 --> 00:24:49,650
task queue mm-hmm and like what if if

00:24:46,500 --> 00:24:52,380
you use SQ s GS SES there is a chance

00:24:49,650 --> 00:24:54,870
that work tubercles workers will receive

00:24:52,380 --> 00:24:58,530
one message yes we experience many

00:24:54,870 --> 00:25:00,780
problems with a stress and for for six

00:24:58,530 --> 00:25:03,150
months we used STS in many projects but

00:25:00,780 --> 00:25:05,940
we had many problems with Siddeley I

00:25:03,150 --> 00:25:07,920
don't know why but they just didn't work

00:25:05,940 --> 00:25:11,610
or the problems that you mentioned

00:25:07,920 --> 00:25:14,840
happened the same task receiving by to

00:25:11,610 --> 00:25:17,970
work wrist so we we went back to

00:25:14,840 --> 00:25:21,570
RabbitMQ which rabbitmq it's quite easy

00:25:17,970 --> 00:25:23,520
to set up and you feel that it's the

00:25:21,570 --> 00:25:27,150
it's the original one that is written

00:25:23,520 --> 00:25:29,490
for so if you have big cubes and if you

00:25:27,150 --> 00:25:32,510
have complex few operations I strongly

00:25:29,490 --> 00:25:36,540
suggest to have rabbitmq not release not

00:25:32,510 --> 00:25:39,800
anything else but riveting view or a

00:25:36,540 --> 00:25:42,810
similar met specific message queue

00:25:39,800 --> 00:25:46,350
system okay and like another question is

00:25:42,810 --> 00:25:48,600
about crontab scheduler your example was

00:25:46,350 --> 00:25:50,820
very simple but for instance in normal

00:25:48,600 --> 00:25:53,160
cron at least in started standard cron

00:25:50,820 --> 00:25:57,870
there are issues with schedules like

00:25:53,160 --> 00:26:00,600
last Sunday of months we didn't expect

00:25:57,870 --> 00:26:02,940
any problem I'm using force so like is

00:26:00,600 --> 00:26:04,779
it based on cron or like it's a separate

00:26:02,940 --> 00:26:07,269
implementation of cross key

00:26:04,779 --> 00:26:09,759
in my as far as I know it's a separate

00:26:07,269 --> 00:26:12,009
implementation but the biggest problem

00:26:09,759 --> 00:26:15,549
with chrome tabs is that when you change

00:26:12,009 --> 00:26:20,289
one of the schedules as it records it to

00:26:15,549 --> 00:26:23,799
a text file the last run time it creates

00:26:20,289 --> 00:26:26,830
problems so it might be possible that it

00:26:23,799 --> 00:26:28,779
is being fired before you want so what I

00:26:26,830 --> 00:26:31,029
do generally at the beginning of each

00:26:28,779 --> 00:26:35,559
seller task that will be filed by a cron

00:26:31,029 --> 00:26:38,379
task is to add a control key and add

00:26:35,559 --> 00:26:41,080
something to reduce with some expire

00:26:38,379 --> 00:26:44,649
time and make sure that it will never

00:26:41,080 --> 00:26:46,929
ever run before time especially this is

00:26:44,649 --> 00:26:49,149
crucial in in mailings because for

00:26:46,929 --> 00:26:54,119
example if you want to send a mailing at

00:26:49,149 --> 00:26:59,440
Friday and you change the time in Monday

00:26:54,119 --> 00:27:01,029
you it just gets fired so we had control

00:26:59,440 --> 00:27:04,389
blocks at the beginning of the tasks

00:27:01,029 --> 00:27:07,600
okay and final question are about your

00:27:04,389 --> 00:27:10,419
you have an application object of celery

00:27:07,600 --> 00:27:12,159
at import time used to instantiated in

00:27:10,419 --> 00:27:14,289
import import time does it have side

00:27:12,159 --> 00:27:16,480
effects of like creating connection when

00:27:14,289 --> 00:27:19,929
just you import when you create an

00:27:16,480 --> 00:27:22,359
instance or epilady I didn't take

00:27:19,929 --> 00:27:23,529
students in a problem like because like

00:27:22,359 --> 00:27:25,359
when you start testing it you have

00:27:23,529 --> 00:27:28,840
import side effects and import your data

00:27:25,359 --> 00:27:31,179
text generally bad practice yeah but I

00:27:28,840 --> 00:27:37,509
didn't experience in with rolling it

00:27:31,179 --> 00:27:40,649
thank you next question yeah do

00:27:37,509 --> 00:27:40,649
something for diversity

00:27:43,899 --> 00:27:48,740
hi thank you for the talk first of all

00:27:46,190 --> 00:27:50,960
and the question is what is the

00:27:48,740 --> 00:27:53,509
advantage of the salary if I'm using it

00:27:50,960 --> 00:27:55,850
only for the background workers in

00:27:53,509 --> 00:27:58,940
comparison to you whiskey is too low for

00:27:55,850 --> 00:28:02,029
instance in my opinion the biggest

00:27:58,940 --> 00:28:05,840
advantage is that you can use Sallee

00:28:02,029 --> 00:28:08,330
from anywhere so you don't need to you

00:28:05,840 --> 00:28:10,850
don't need to operate it only single

00:28:08,330 --> 00:28:13,669
thing and you can send tests from

00:28:10,850 --> 00:28:15,080
various locations you can use I don't

00:28:13,669 --> 00:28:18,499
know if that supports for example

00:28:15,080 --> 00:28:20,269
periodic tasks so if you have a salary

00:28:18,499 --> 00:28:23,440
installed in your architecture you can

00:28:20,269 --> 00:28:26,690
just use it in in many tasks as possible

00:28:23,440 --> 00:28:30,139
and also I don't know if they have retry

00:28:26,690 --> 00:28:32,240
or not they have I didn't know okay so I

00:28:30,139 --> 00:28:34,129
think one more question and I think he

00:28:32,240 --> 00:28:35,659
is still over there so I think you can

00:28:34,129 --> 00:28:43,460
ask them all the questions I'm pretty

00:28:35,659 --> 00:28:45,559
sure you will ok so yeah thank you for

00:28:43,460 --> 00:28:47,269
that talk so you're saying you're living

00:28:45,559 --> 00:28:49,789
this heavily in production do you have

00:28:47,269 --> 00:28:51,950
any tips on how to operate very

00:28:49,789 --> 00:28:53,720
efficiently what kind of message give

00:28:51,950 --> 00:28:55,519
you use you mentioned before on me an

00:28:53,720 --> 00:28:57,980
impression that you switch from VMs and

00:28:55,519 --> 00:29:00,619
service to Robbie thank you is that what

00:28:57,980 --> 00:29:04,970
using production for the different alum

00:29:00,619 --> 00:29:07,700
yeah we tried the 3ds and rabbitmq it

00:29:04,970 --> 00:29:10,700
both works very well but rabbitmq is of

00:29:07,700 --> 00:29:12,980
course whether the only problem that I

00:29:10,700 --> 00:29:15,289
see when you have too many tasks I mean

00:29:12,980 --> 00:29:17,240
like millions of tasks I have some

00:29:15,289 --> 00:29:21,169
friends here that they are dealing with

00:29:17,240 --> 00:29:24,279
some ecommerce business and yeah there

00:29:21,169 --> 00:29:29,090
might be problems when you have too much

00:29:24,279 --> 00:29:31,159
tasks you should take attention to the

00:29:29,090 --> 00:29:33,110
overall performance of the system

00:29:31,159 --> 00:29:35,539
because there might be object

00:29:33,110 --> 00:29:38,450
dependencies the same objects might be

00:29:35,539 --> 00:29:40,009
reached by different tasks and you

00:29:38,450 --> 00:29:43,070
should avoid that as much as possible

00:29:40,009 --> 00:29:43,820
because it gets the code complicated it

00:29:43,070 --> 00:29:46,009
gets

00:29:43,820 --> 00:29:48,590
debugging complicated so you shouldn't

00:29:46,009 --> 00:29:50,960
too much rely on tasks especially to

00:29:48,590 --> 00:29:52,630
periodic tasks okay and what happens if

00:29:50,960 --> 00:29:54,940
you have a task that fails me

00:29:52,630 --> 00:29:58,000
time there just raise an exception or do

00:29:54,940 --> 00:30:00,460
you think your boss say exactly like you

00:29:58,000 --> 00:30:02,470
have analyzed DNA and the sanema say

00:30:00,460 --> 00:30:05,200
send email says does that mean that you

00:30:02,470 --> 00:30:08,050
file the entire you try all you just try

00:30:05,200 --> 00:30:10,390
to enjoy this feels kinda seems

00:30:08,050 --> 00:30:12,190
inefficient us five hours of compute

00:30:10,390 --> 00:30:14,230
time for the second yes so that's why

00:30:12,190 --> 00:30:17,260
you can you can divide into sub tasks

00:30:14,230 --> 00:30:20,020
and okay any recursively great so from

00:30:17,260 --> 00:30:22,450
analyze DNA you don't schedule assigned

00:30:20,020 --> 00:30:25,240
mean yes okay that's more efficient

00:30:22,450 --> 00:30:26,590
thank you thank you okay so let's spend

00:30:25,240 --> 00:30:31,140
again

00:30:26,590 --> 00:30:31,140

YouTube URL: https://www.youtube.com/watch?v=kDoHrFLkahA


