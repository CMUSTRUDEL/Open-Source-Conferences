Title: Piotr Dyba - CyberSecurity.bootcamp()
Publication date: 2017-09-17
Playlist: EuroPython 2017
Description: 
	"CyberSecurity.bootcamp()
[EuroPython 2017 - Talk - 2017-07-11 - Arengo]
[Rimini, Italy]

Cyber-security is a critical part of all distributed applications. By understanding and implementing proper security measures, you guard your own resources against malicious attackers as well as provide a secure environment for all relevant parties. 

The purpose of the talk is to show starting points on how to improve security in python applications by destroying a few servers during the presentation. It will provide the most important information and will cover:


Threat modeling
Common attack vectors on Python applications. 
Why python is not vulnerable to some kinds of attacks.
Why is eval so dangerous?
Improving server deployment and security management.
Automated security testing.
Pentesting.
Who is a CISO and why is cyber-security awareness in the company so important nowadays.


Basic knowledge of networking, python and REST is advised.

License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2017.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:04,170 --> 00:00:08,580
okay good morning I hope we are

00:00:06,600 --> 00:00:09,460
enjoying Europe right on now let's talk

00:00:08,580 --> 00:00:17,590
a little bit about

00:00:09,460 --> 00:00:20,170
cybersecurity as soon as and before we

00:00:17,590 --> 00:00:22,689
start I have three disclaimers first one

00:00:20,170 --> 00:00:24,340
this is all my opinion the following

00:00:22,689 --> 00:00:26,349
transition is my opinion and I'm not

00:00:24,340 --> 00:00:28,090
getting paid by any of the companies or

00:00:26,349 --> 00:00:31,329
open source project for mentioning them

00:00:28,090 --> 00:00:33,790
and third I had to cut out some parts

00:00:31,329 --> 00:00:35,440
for DevOps from my speaking part but

00:00:33,790 --> 00:00:38,710
they will be in still in the

00:00:35,440 --> 00:00:42,420
presentation and blue color you can ask

00:00:38,710 --> 00:00:44,859
me after the presentation about them so

00:00:42,420 --> 00:00:47,140
I'll start with briefly describing

00:00:44,859 --> 00:00:49,839
myself then I will talk a little bit

00:00:47,140 --> 00:00:52,960
about what is the cybersecurity and why

00:00:49,839 --> 00:00:55,059
we should focus on it currently then we

00:00:52,960 --> 00:00:58,059
will do together at threat modeling of

00:00:55,059 --> 00:01:00,249
an application and I will finish with

00:00:58,059 --> 00:01:03,579
some more tips for where to start able

00:01:00,249 --> 00:01:05,620
with the cyber security and I have one

00:01:03,579 --> 00:01:08,380
request please ask questions after the

00:01:05,620 --> 00:01:11,350
presentation and I will also appreciate

00:01:08,380 --> 00:01:14,710
feedback face to face or by email after

00:01:11,350 --> 00:01:17,380
the presentation is over so my name is

00:01:14,710 --> 00:01:20,649
Gilda bath you can also call me Peter

00:01:17,380 --> 00:01:23,020
fine I'm came from Poznan Poland which

00:01:20,649 --> 00:01:25,450
is two and a half drive from Berlin also

00:01:23,020 --> 00:01:28,540
bigger city and about 15 hour drive from

00:01:25,450 --> 00:01:30,490
here very mini I work at f-secure Poland

00:01:28,540 --> 00:01:33,520
where I'm a team leader and a software

00:01:30,490 --> 00:01:37,360
engineer and a project called rapid at

00:01:33,520 --> 00:01:40,240
graphics detection service I'm also a

00:01:37,360 --> 00:01:42,750
leading mentor at my ladies where we are

00:01:40,240 --> 00:01:46,060
currently having up to 220 students

00:01:42,750 --> 00:01:48,430
which is our achievement as we are

00:01:46,060 --> 00:01:50,460
running over three years now and we will

00:01:48,430 --> 00:01:52,659
be starting fourth year this year and

00:01:50,460 --> 00:01:56,439
probably I will talk a little bit about

00:01:52,659 --> 00:01:58,090
it more on the flash box and so let's

00:01:56,439 --> 00:02:01,659
start from the scratch what is cyber

00:01:58,090 --> 00:02:04,630
security cyber security is means and

00:02:01,659 --> 00:02:10,440
protocols to defend your resources and

00:02:04,630 --> 00:02:12,970
devices from attacker damage or test so

00:02:10,440 --> 00:02:15,760
cyber security doesn't start at

00:02:12,970 --> 00:02:18,640
application level it starts at hardware

00:02:15,760 --> 00:02:21,760
so the policies and protocols for your

00:02:18,640 --> 00:02:23,890
employees how to handle equipment how

00:02:21,760 --> 00:02:27,640
handle servers what are the server's

00:02:23,890 --> 00:02:30,159
policy access and what can employ bring

00:02:27,640 --> 00:02:32,500
to the company so it often happens that

00:02:30,159 --> 00:02:35,019
employees should be banned to bring

00:02:32,500 --> 00:02:38,409
other own pan drives so there won't be

00:02:35,019 --> 00:02:41,709
for example a source code leak and then

00:02:38,409 --> 00:02:44,620
we can go to hardening our software

00:02:41,709 --> 00:02:49,030
architecture software services which

00:02:44,620 --> 00:02:50,859
we'll focus on in this talk okay cyber

00:02:49,030 --> 00:02:53,049
security is becoming more and more

00:02:50,859 --> 00:02:54,970
important as you are seeing the number

00:02:53,049 --> 00:02:57,909
of leaks and attacks is growing

00:02:54,970 --> 00:03:00,280
exponentially the biggest leak happened

00:02:57,909 --> 00:03:05,139
this year and it was over 1.3 billion

00:03:00,280 --> 00:03:08,709
user accounts data it's more than most

00:03:05,139 --> 00:03:12,909
of the years beforehand and it's still

00:03:08,709 --> 00:03:16,959
increasing and who remember the screen

00:03:12,909 --> 00:03:19,090
from just two weeks ago yeah not petia

00:03:16,959 --> 00:03:23,709
laid waste on many companies across the

00:03:19,090 --> 00:03:26,440
globe just in one day and some companies

00:03:23,709 --> 00:03:28,870
are still recovering from it there are

00:03:26,440 --> 00:03:32,980
two very known publicly known work cases

00:03:28,870 --> 00:03:35,160
like TNT so the career the company and

00:03:32,980 --> 00:03:38,530
Rabin the corporates Kroger company

00:03:35,160 --> 00:03:41,590
Rabin is a really nice example of well

00:03:38,530 --> 00:03:44,199
executed recovery during which in less

00:03:41,590 --> 00:03:46,989
than 24 hours company change their

00:03:44,199 --> 00:03:51,340
server architecture from Windows to

00:03:46,989 --> 00:03:53,650
Linux in less than 24 hours sounds great

00:03:51,340 --> 00:03:55,120
right but there were we assume they were

00:03:53,650 --> 00:03:59,849
prepared for something like to happen

00:03:55,120 --> 00:04:03,940
and this graph shows a number of attacks

00:03:59,849 --> 00:04:05,769
per day from our public honeypot network

00:04:03,940 --> 00:04:08,829
which we are which I'm developing am

00:04:05,769 --> 00:04:12,190
with my team it's 2 to 16 million

00:04:08,829 --> 00:04:15,280
attacks per day so who knows what a

00:04:12,190 --> 00:04:18,639
honeypot is raise your hand please ok

00:04:15,280 --> 00:04:24,210
quite few for the rest I will explain a

00:04:18,639 --> 00:04:26,229
honeypot as a server that is a trap

00:04:24,210 --> 00:04:28,060
interesting tougher attacker because it

00:04:26,229 --> 00:04:31,020
should be easy to access where we can

00:04:28,060 --> 00:04:32,820
monitor and lock the actions of the

00:04:31,020 --> 00:04:35,400
attacker

00:04:32,820 --> 00:04:38,550
but it won't affect our server

00:04:35,400 --> 00:04:41,340
architecture at this possible server a

00:04:38,550 --> 00:04:46,110
trap where we emulate services like SSH

00:04:41,340 --> 00:04:47,940
SMTP HTTP etc and involved and our team

00:04:46,110 --> 00:04:52,230
we are doing everything in Python Puri

00:04:47,940 --> 00:04:54,480
and this is the data we are also

00:04:52,230 --> 00:04:58,260
gathering so the username and passwords

00:04:54,480 --> 00:05:00,480
and a nice home it's mostly both the

00:04:58,260 --> 00:05:03,480
data probably we assume nobody is trying

00:05:00,480 --> 00:05:06,300
to look login another SSH to using root

00:05:03,480 --> 00:05:08,760
root password but because the intensity

00:05:06,300 --> 00:05:11,760
of the scanning with those traditionals

00:05:08,760 --> 00:05:13,860
we assume that some people don't change

00:05:11,760 --> 00:05:16,740
that so they are still scanning using

00:05:13,860 --> 00:05:18,450
the default data for some services like

00:05:16,740 --> 00:05:20,870
raspberry pi is quite highlighting it's

00:05:18,450 --> 00:05:20,870
this place

00:05:23,460 --> 00:05:31,010
so currently we established that cyber

00:05:27,420 --> 00:05:34,620
security is important paraphrasing this

00:05:31,010 --> 00:05:37,080
this nice comics it's important that we

00:05:34,620 --> 00:05:39,480
start the death incorporating the cyber

00:05:37,080 --> 00:05:51,090
security at the beginning of the project

00:05:39,480 --> 00:05:52,680
not after we get hacked okay one of the

00:05:51,090 --> 00:05:55,380
basic things that we should start doing

00:05:52,680 --> 00:05:58,260
when we approach cyber security its

00:05:55,380 --> 00:06:00,480
third modeling a tad approach for

00:05:58,260 --> 00:06:04,050
analyzing a security of application or a

00:06:00,480 --> 00:06:06,630
system it should be structured and

00:06:04,050 --> 00:06:09,120
identify quantify and address the

00:06:06,630 --> 00:06:11,610
security risks associated with the

00:06:09,120 --> 00:06:14,700
target of the modeling now let's imagine

00:06:11,610 --> 00:06:16,700
we are Batman everybody knows the Batman

00:06:14,700 --> 00:06:21,780
well who doesn't know who is a Batman

00:06:16,700 --> 00:06:24,060
one person I think is trolling anyway we

00:06:21,780 --> 00:06:28,230
have four main assets we have our base

00:06:24,060 --> 00:06:30,750
of operations so our Batcave

00:06:28,230 --> 00:06:32,190
we have Alfred our Butler's who handles

00:06:30,750 --> 00:06:36,150
everything for us and we have

00:06:32,190 --> 00:06:40,050
informations in form of emails and texts

00:06:36,150 --> 00:06:43,290
now we have threads we have three main

00:06:40,050 --> 00:06:46,620
threat which is police our archenemy

00:06:43,290 --> 00:06:49,530
Joker and the

00:06:46,620 --> 00:06:53,070
let's quantify doctors so Alfred is

00:06:49,530 --> 00:06:55,430
irreplaceable he's a human being he also

00:06:53,070 --> 00:06:58,230
had access to all of our systems and

00:06:55,430 --> 00:07:01,170
assets so he will be our highest

00:06:58,230 --> 00:07:04,350
priority when defending and the highest

00:07:01,170 --> 00:07:05,070
risk at the same time then we have our

00:07:04,350 --> 00:07:07,680
Batcave

00:07:05,070 --> 00:07:10,050
but we can rebuild it it's just

00:07:07,680 --> 00:07:14,850
equipment and lastly we have information

00:07:10,050 --> 00:07:17,280
so emails and text messages that that

00:07:14,850 --> 00:07:19,620
can show where are we going or what are

00:07:17,280 --> 00:07:22,169
we doing but honestly we can mitigate

00:07:19,620 --> 00:07:26,460
the press and the journal and that place

00:07:22,169 --> 00:07:29,250
because we can handle them lastly let's

00:07:26,460 --> 00:07:31,500
try mitigating those issues so we can

00:07:29,250 --> 00:07:33,810
obscure Alfred's location and his

00:07:31,500 --> 00:07:37,410
identity but in current world it is

00:07:33,810 --> 00:07:39,360
really hard to do then the bad case is

00:07:37,410 --> 00:07:41,910
much simpler task because there are

00:07:39,360 --> 00:07:43,530
security systems traps misleading base

00:07:41,910 --> 00:07:47,190
of operations we have a ton of

00:07:43,530 --> 00:07:50,040
possibilities - to handle the problems

00:07:47,190 --> 00:07:52,140
concerning about Batcave and for the

00:07:50,040 --> 00:07:53,910
emails and messages we can start

00:07:52,140 --> 00:07:55,740
encrypting them which is the basic

00:07:53,910 --> 00:07:57,690
approach and obviously we should be

00:07:55,740 --> 00:08:02,370
cautious when typing something that may

00:07:57,690 --> 00:08:05,580
be delicate for us now we will start

00:08:02,370 --> 00:08:09,900
working about on our application that

00:08:05,580 --> 00:08:11,760
will try to make secure and so as an

00:08:09,900 --> 00:08:14,430
hour button example will start for

00:08:11,760 --> 00:08:17,820
identifying our assets purpose of the

00:08:14,430 --> 00:08:21,690
users the next step will be identifying

00:08:17,820 --> 00:08:24,270
them our interactions with with the

00:08:21,690 --> 00:08:29,160
third party software and other parts of

00:08:24,270 --> 00:08:31,169
our service and then this is one of the

00:08:29,160 --> 00:08:34,169
most important things the IDL so access

00:08:31,169 --> 00:08:40,800
control list so who can do exactly what

00:08:34,169 --> 00:08:43,020
and just by specifying this and using

00:08:40,800 --> 00:08:46,440
those ACLs or during the whole

00:08:43,020 --> 00:08:51,870
application development you can defend

00:08:46,440 --> 00:08:53,850
yourself against many other things one

00:08:51,870 --> 00:08:55,410
tip if you are already started

00:08:53,850 --> 00:08:56,430
developing your application and you have

00:08:55,410 --> 00:08:58,890
a proper developed

00:08:56,430 --> 00:09:01,890
methods you may reduce your data flow

00:08:58,890 --> 00:09:05,160
diagrams or application UML's as a base

00:09:01,890 --> 00:09:07,950
of the decomposition of the application

00:09:05,160 --> 00:09:11,089
phase behavior tests and integration

00:09:07,950 --> 00:09:13,860
tests are also useful for just that

00:09:11,089 --> 00:09:17,089
there are a few frame or strikes tried

00:09:13,860 --> 00:09:19,860
our application software frame IAS s

00:09:17,089 --> 00:09:22,790
that should give us a reliable output

00:09:19,860 --> 00:09:26,550
that should include logging and auditing

00:09:22,790 --> 00:09:29,120
and just to be one one page auditing is

00:09:26,550 --> 00:09:31,860
who's it worth and possibly why and

00:09:29,120 --> 00:09:33,390
logging is what's happening and those

00:09:31,860 --> 00:09:36,540
are two different things that we should

00:09:33,390 --> 00:09:39,750
distinguish and probably have the data

00:09:36,540 --> 00:09:42,270
in different services afterwards then we

00:09:39,750 --> 00:09:45,029
have authentication and authorization

00:09:42,270 --> 00:09:47,300
and again to be on the same page because

00:09:45,029 --> 00:09:53,640
it's also often misleading

00:09:47,300 --> 00:09:56,640
authentication s asserting if the person

00:09:53,640 --> 00:09:59,700
who claims to be it's the person who

00:09:56,640 --> 00:10:03,800
hood is and authorization is a process

00:09:59,700 --> 00:10:09,420
of determining who is allowed to do what

00:10:03,800 --> 00:10:11,580
configuration so configuration

00:10:09,420 --> 00:10:14,150
management so where do we store the

00:10:11,580 --> 00:10:23,010
configuration and who has access to it

00:10:14,150 --> 00:10:25,920
then data storing and data process data

00:10:23,010 --> 00:10:28,110
storage and data transit so if we are

00:10:25,920 --> 00:10:30,320
storing the data securely encrypted and

00:10:28,110 --> 00:10:33,180
if the data in the transit is also

00:10:30,320 --> 00:10:36,959
encrypted so if we use TLS for example

00:10:33,180 --> 00:10:42,329
and last managing and handling

00:10:36,959 --> 00:10:49,320
exceptions and what we should do when an

00:10:42,329 --> 00:10:51,510
exception occurs the protocols okay now

00:10:49,320 --> 00:10:54,029
we need to measure the severity of the

00:10:51,510 --> 00:10:58,320
tracks we may encounter we can approach

00:10:54,029 --> 00:11:00,420
turtle by ourselves we using a messenger

00:10:58,320 --> 00:11:03,750
online and figuring what is the most

00:11:00,420 --> 00:11:06,420
important but we can also use CVS s the

00:11:03,750 --> 00:11:08,710
common vulnerability scoring system this

00:11:06,420 --> 00:11:12,010
is basically two factors like app exact

00:11:08,710 --> 00:11:14,350
attack complexity and privileges user

00:11:12,010 --> 00:11:17,200
interaction scope confidentiality

00:11:14,350 --> 00:11:21,310
integrity and availability all together

00:11:17,200 --> 00:11:25,860
can give us a reference point but it's

00:11:21,310 --> 00:11:28,360
for example hard to measure how much how

00:11:25,860 --> 00:11:30,730
how the attack world model will be

00:11:28,360 --> 00:11:34,240
complex we usually don't know that so

00:11:30,730 --> 00:11:35,920
it's wise to put both values and take an

00:11:34,240 --> 00:11:38,350
average or leave it as arranged for

00:11:35,920 --> 00:11:41,260
comparisons and we need to remember that

00:11:38,350 --> 00:11:44,620
this tool is just a tool to help not an

00:11:41,260 --> 00:11:47,350
Oracle what we should do and as

00:11:44,620 --> 00:11:49,630
mentioned before use cases emails and

00:11:47,350 --> 00:11:52,450
abuse cases especially abuse cases UML

00:11:49,630 --> 00:11:55,120
will greatly help us de do creating what

00:11:52,450 --> 00:11:59,740
we should do whether we should start and

00:11:55,120 --> 00:12:03,370
what are our my priorities next we need

00:11:59,740 --> 00:12:06,550
to address the issue at hand so we have

00:12:03,370 --> 00:12:08,649
four ways to four ways to do that first

00:12:06,550 --> 00:12:11,529
one has completely removed that's the

00:12:08,649 --> 00:12:14,920
nice way but not always possible because

00:12:11,529 --> 00:12:17,860
of the task at hand we may not be able

00:12:14,920 --> 00:12:21,220
to mitigate to remove it at all but we

00:12:17,860 --> 00:12:24,839
may need to mitigate it because for

00:12:21,220 --> 00:12:29,980
example is too expensive to remove it

00:12:24,839 --> 00:12:32,529
for many different issues then the third

00:12:29,980 --> 00:12:33,880
option is we can take the risk and

00:12:32,529 --> 00:12:38,950
address it later

00:12:33,880 --> 00:12:41,650
for example because because if there is

00:12:38,950 --> 00:12:43,240
an issue for example and the outside

00:12:41,650 --> 00:12:46,390
person and the newest user can traverse

00:12:43,240 --> 00:12:51,040
over a file directory with some random

00:12:46,390 --> 00:12:53,140
names of our users cuts pictures of our

00:12:51,040 --> 00:12:55,480
users cuts so we don't really care if

00:12:53,140 --> 00:12:58,029
you get the pictures probably our users

00:12:55,480 --> 00:13:00,190
don't care also and you need to type

00:12:58,029 --> 00:13:02,320
some chart and random gibberish just to

00:13:00,190 --> 00:13:06,190
get the picture so there's much more

00:13:02,320 --> 00:13:09,730
work on the attacker side than on ours

00:13:06,190 --> 00:13:13,510
to achieve anything and fourth option is

00:13:09,730 --> 00:13:17,170
a pretend there is no issue I don't

00:13:13,510 --> 00:13:18,339
recommend that and so for example if a

00:13:17,170 --> 00:13:20,069
person

00:13:18,339 --> 00:13:23,499
a person can dole out our conflicts or

00:13:20,069 --> 00:13:25,389
password databases and we don't do

00:13:23,499 --> 00:13:30,069
anything about it we are just asking to

00:13:25,389 --> 00:13:32,110
be hacked so let's start making a threat

00:13:30,069 --> 00:13:37,059
another of our simple imaginary

00:13:32,110 --> 00:13:38,980
application in PHP so as everyone knows

00:13:37,059 --> 00:13:43,990
PHP is very secure and hack-proof

00:13:38,980 --> 00:13:47,529
language probably as secure as Internet

00:13:43,990 --> 00:13:49,600
Explorer was a few years back it was not

00:13:47,529 --> 00:13:51,939
maybe the best browser for seeing the

00:13:49,600 --> 00:13:58,389
internet but it was definitely the best

00:13:51,939 --> 00:14:02,110
browser for Internet to see you so of

00:13:58,389 --> 00:14:04,149
course we will not be using PHP because

00:14:02,110 --> 00:14:08,980
PHP should stand only for Python has

00:14:04,149 --> 00:14:11,680
power so let good an application using

00:14:08,980 --> 00:14:14,920
angularjs for front-end Fanning for

00:14:11,680 --> 00:14:19,689
backend and PostgreSQL and and Lennox

00:14:14,920 --> 00:14:23,850
for other things we will be having a

00:14:19,689 --> 00:14:27,759
home endpoint for serving the HTML and

00:14:23,850 --> 00:14:29,980
JavaScript we will also have longing

00:14:27,759 --> 00:14:31,569
endpoint dedicated just a dot and some

00:14:29,980 --> 00:14:38,040
lists and one instance use for other

00:14:31,569 --> 00:14:40,839
blogs and users so how can we hug our up

00:14:38,040 --> 00:14:42,459
considering now front-end there are

00:14:40,839 --> 00:14:45,579
possibly there are many possibilities

00:14:42,459 --> 00:14:47,649
that we should think of every developer

00:14:45,579 --> 00:14:50,920
that use JavaScript may find some

00:14:47,649 --> 00:14:53,920
witnesses but probably someone did that

00:14:50,920 --> 00:14:56,800
for us already and of course there's a

00:14:53,920 --> 00:14:59,470
huge project called open web application

00:14:56,800 --> 00:15:01,600
security project or was in short and

00:14:59,470 --> 00:15:03,970
it's good to remember this name because

00:15:01,600 --> 00:15:06,610
it will be many times in this

00:15:03,970 --> 00:15:08,769
presentation and it's called

00:15:06,610 --> 00:15:12,459
collaboratively developed by thousands

00:15:08,769 --> 00:15:15,129
of applicants of users it consists not

00:15:12,459 --> 00:15:17,529
only examples of attacks measures their

00:15:15,129 --> 00:15:20,199
severity but also includes a business

00:15:17,529 --> 00:15:21,999
level on a communication so also a

00:15:20,199 --> 00:15:28,320
non-technical person like a project

00:15:21,999 --> 00:15:31,450
manager can handle and tol tell the

00:15:28,320 --> 00:15:33,550
upwards that we need to really do that

00:15:31,450 --> 00:15:35,920
something about it

00:15:33,550 --> 00:15:37,839
OS is much bigger acknowledged than only

00:15:35,920 --> 00:15:40,480
the threats it also consists information

00:15:37,839 --> 00:15:45,190
regarding tools books events and other

00:15:40,480 --> 00:15:48,190
interesting sites and projects and what

00:15:45,190 --> 00:15:51,160
one thing is very important about OS it

00:15:48,190 --> 00:15:55,120
publishes a list of most commonly used

00:15:51,160 --> 00:15:58,270
attack vectors in the past years at the

00:15:55,120 --> 00:16:01,510
last one we are seeing here is from 2013

00:15:58,270 --> 00:16:03,970
and the second the newest one should

00:16:01,510 --> 00:16:07,180
come up this year quite soon they were

00:16:03,970 --> 00:16:12,300
aiming from July they have some chances

00:16:07,180 --> 00:16:15,790
and I will go briefly by all of the

00:16:12,300 --> 00:16:18,190
attack vectors and explain some of them

00:16:15,790 --> 00:16:20,860
that are less obvious

00:16:18,190 --> 00:16:24,160
so injection who did hear something

00:16:20,860 --> 00:16:26,470
about SQL injection of course most of

00:16:24,160 --> 00:16:28,750
you not all so SQL injection is

00:16:26,470 --> 00:16:33,160
basically to inject your own SQL code

00:16:28,750 --> 00:16:38,500
into the SQL that is around by our API

00:16:33,160 --> 00:16:40,089
for example drop tables users and then

00:16:38,500 --> 00:16:43,420
we have broken authentication and

00:16:40,089 --> 00:16:45,850
session management and the issue here is

00:16:43,420 --> 00:16:46,450
that many applications don't store

00:16:45,850 --> 00:16:49,420
propellor

00:16:46,450 --> 00:16:52,360
their users so it is easy to hijack

00:16:49,420 --> 00:16:54,990
other user session cross-site scripting

00:16:52,360 --> 00:16:58,420
this one is really fun because it allows

00:16:54,990 --> 00:17:00,910
allows an attacker to run a script on

00:16:58,420 --> 00:17:04,720
others users browsers so it will not

00:17:00,910 --> 00:17:06,819
affect us directly but it may made our

00:17:04,720 --> 00:17:10,179
other users download some malware or

00:17:06,819 --> 00:17:15,040
send the additional store web page to a

00:17:10,179 --> 00:17:19,120
to attacker server insecure direct

00:17:15,040 --> 00:17:22,750
object reference who doesn't understand

00:17:19,120 --> 00:17:25,459
this one there are few fees for friends

00:17:22,750 --> 00:17:29,690
not not so many people understand that

00:17:25,459 --> 00:17:31,990
and we'll just move on security with

00:17:29,690 --> 00:17:34,370
configuration is really obvious

00:17:31,990 --> 00:17:37,809
sensitive data exposure so if we are

00:17:34,370 --> 00:17:40,309
exposing something more than we want to

00:17:37,809 --> 00:17:42,470
making function level access control is

00:17:40,309 --> 00:17:43,940
a TLS I will talk about it a little bit

00:17:42,470 --> 00:17:46,429
more later

00:17:43,940 --> 00:17:52,159
cross-site request forgery so who knows

00:17:46,429 --> 00:17:53,480
Django okay so I think everyone when you

00:17:52,159 --> 00:17:55,640
you should remember that when you are

00:17:53,480 --> 00:17:58,220
using Django temple in which and

00:17:55,640 --> 00:18:02,330
designing your forms

00:17:58,220 --> 00:18:05,779
you were inputting a CSRF token in the

00:18:02,330 --> 00:18:08,029
beginning of that form someone did not

00:18:05,779 --> 00:18:11,000
include that in their template bruce is

00:18:08,029 --> 00:18:14,840
rising hand that's great

00:18:11,000 --> 00:18:17,320
wonderful because this minimizes the

00:18:14,840 --> 00:18:20,539
chances of your form to being abused

00:18:17,320 --> 00:18:23,299
which is really good if you are not

00:18:20,539 --> 00:18:25,309
doing that you should start doing that

00:18:23,299 --> 00:18:27,669
it's just a line one line of code engine

00:18:25,309 --> 00:18:32,620
in jungle temple in which other Jinja

00:18:27,669 --> 00:18:35,179
that will save you from a lot of trouble

00:18:32,620 --> 00:18:39,260
using components with no variabilities

00:18:35,179 --> 00:18:42,260
as obvious and and validated redirects

00:18:39,260 --> 00:18:45,919
and forwards you should validate your

00:18:42,260 --> 00:18:49,340
forward justice use case and if you want

00:18:45,919 --> 00:18:51,620
to play with any of these important

00:18:49,340 --> 00:18:53,750
abilities by yourself there are two

00:18:51,620 --> 00:18:56,000
projects the beatbox project and the OS

00:18:53,750 --> 00:18:58,880
broken broken web application project

00:18:56,000 --> 00:19:00,679
that allows you to run a image of an

00:18:58,880 --> 00:19:02,419
application that has all of the

00:19:00,679 --> 00:19:04,220
different abilities and there's even a

00:19:02,419 --> 00:19:06,590
scoring test and there you can choose

00:19:04,220 --> 00:19:09,070
even a level how hard the

00:19:06,590 --> 00:19:11,450
vulnerabilities should be to notice and

00:19:09,070 --> 00:19:14,870
the application is also obviously

00:19:11,450 --> 00:19:16,610
written in PHP so it's that's why it's

00:19:14,870 --> 00:19:19,850
very easy to hack Python is a little bit

00:19:16,610 --> 00:19:23,360
more prominent in this matter and I will

00:19:19,850 --> 00:19:28,850
talk about the pretty soon now so for

00:19:23,360 --> 00:19:31,159
our angularjs there may be an injection

00:19:28,850 --> 00:19:34,669
coming there but we should validate the

00:19:31,159 --> 00:19:36,530
injection on the back end so injection

00:19:34,669 --> 00:19:39,020
won't happen on our front end there

00:19:36,530 --> 00:19:41,210
we broke up our education session

00:19:39,020 --> 00:19:44,860
management may happen is the JavaScript

00:19:41,210 --> 00:19:47,990
so it's not the bug proof completely

00:19:44,860 --> 00:19:51,230
cross-subsidies cross-site scripting so

00:19:47,990 --> 00:19:53,810
it's SS definitely may happen and it

00:19:51,230 --> 00:19:55,930
often happens on JavaScript part and may

00:19:53,810 --> 00:19:59,840
it cannot happen on the backend part

00:19:55,930 --> 00:20:04,580
because it's not exposed and that matter

00:19:59,840 --> 00:20:10,190
and rest of them is more obvious we'll

00:20:04,580 --> 00:20:12,650
move forward to the summary and that

00:20:10,190 --> 00:20:15,110
it's the angularjs mitigates most of

00:20:12,650 --> 00:20:19,490
them by itself out of the box and even

00:20:15,110 --> 00:20:22,460
handles some of them completely so as

00:20:19,490 --> 00:20:23,480
long as our developers don't do anything

00:20:22,460 --> 00:20:25,550
really stupid

00:20:23,480 --> 00:20:30,620
we are fine when using the basic

00:20:25,550 --> 00:20:32,870
angularjs but it's important when we are

00:20:30,620 --> 00:20:36,860
extending without external libraries and

00:20:32,870 --> 00:20:39,950
that will review their code and I will

00:20:36,860 --> 00:20:42,920
also mention that a year later so sanic

00:20:39,950 --> 00:20:44,990
sanic is a Python web framework that's

00:20:42,920 --> 00:20:49,460
using is using I think I owe a new build

00:20:44,990 --> 00:20:51,280
so what can go wrong there and of course

00:20:49,460 --> 00:20:55,700
there can be some Python code injection

00:20:51,280 --> 00:20:59,830
but not really unless you are using eval

00:20:55,700 --> 00:21:02,260
or exact or pickle which picker is quite

00:20:59,830 --> 00:21:05,750
obvious case because even in the

00:21:02,260 --> 00:21:09,290
documentation as it's explicitly said

00:21:05,750 --> 00:21:13,010
not to speak hell with user input the

00:21:09,290 --> 00:21:13,400
exact and eval also are not the best

00:21:13,010 --> 00:21:18,050
idea

00:21:13,400 --> 00:21:21,320
so for Python the problem usually exists

00:21:18,050 --> 00:21:24,410
between char and the keyboard so the

00:21:21,320 --> 00:21:26,920
developer so it's on your hands to make

00:21:24,410 --> 00:21:29,900
your application secure on Python level

00:21:26,920 --> 00:21:35,750
but many people wonder why we would like

00:21:29,900 --> 00:21:38,060
to use exact or evil well good I will

00:21:35,750 --> 00:21:39,710
get the back story and I forgot to

00:21:38,060 --> 00:21:41,750
mention there is an beautiful

00:21:39,710 --> 00:21:46,010
explanation on why we should in here why

00:21:41,750 --> 00:21:48,230
the pickle is so fragile in terms of

00:21:46,010 --> 00:21:49,270
security and there was even a bug and

00:21:48,230 --> 00:21:51,700
twisted into five

00:21:49,270 --> 00:21:54,640
eleven that you could exploit easily

00:21:51,700 --> 00:21:57,730
it's fix it but this is our very good

00:21:54,640 --> 00:21:59,200
example how pickle can be exploited and

00:21:57,730 --> 00:22:04,420
urs if you are and more interested in

00:21:59,200 --> 00:22:07,530
this part there is a link below I need

00:22:04,420 --> 00:22:11,530
to minimize my other window because its

00:22:07,530 --> 00:22:15,370
position okay now moving to level and

00:22:11,530 --> 00:22:17,370
exact and you can see two coats and

00:22:15,370 --> 00:22:20,710
ensure if my contour is what we know

00:22:17,370 --> 00:22:22,600
that both do the same thing the first

00:22:20,710 --> 00:22:25,540
one is just simple code the second one

00:22:22,600 --> 00:22:29,610
is compiled and executed code as you can

00:22:25,540 --> 00:22:34,470
see it runs 30 or even 40 times faster

00:22:29,610 --> 00:22:39,130
when executing a compiled code then the

00:22:34,470 --> 00:22:42,460
normally run code even 40 times faster

00:22:39,130 --> 00:22:45,340
and Python freefall for 3.5 this is a

00:22:42,460 --> 00:22:48,280
huge difference in the code execution

00:22:45,340 --> 00:22:50,920
times that can be used but it can also

00:22:48,280 --> 00:22:53,740
be abused so we have issue here but also

00:22:50,920 --> 00:22:57,760
we have advantages so we can use

00:22:53,740 --> 00:23:01,570
obviously exactly level in our code but

00:22:57,760 --> 00:23:04,660
we just need to do it carefully and for

00:23:01,570 --> 00:23:06,250
the AVO example and as you can see

00:23:04,660 --> 00:23:08,860
implementing

00:23:06,250 --> 00:23:11,830
or that takes a string and do some

00:23:08,860 --> 00:23:13,539
calculation even a simple equation at

00:23:11,830 --> 00:23:15,220
the earthiness of Norton and ten lines

00:23:13,539 --> 00:23:17,860
of code probably built can be done

00:23:15,220 --> 00:23:19,150
simple but just to show eval will just

00:23:17,860 --> 00:23:21,789
take the equation and give you the

00:23:19,150 --> 00:23:25,030
result of the equation so it's much

00:23:21,789 --> 00:23:31,120
easier and it also can handle much more

00:23:25,030 --> 00:23:35,650
complicated equations okay pictures are

00:23:31,120 --> 00:23:39,370
so fast so we have SQL injections SQL

00:23:35,650 --> 00:23:41,280
injection should not happen when you are

00:23:39,370 --> 00:23:44,020
developing a your application Python

00:23:41,280 --> 00:23:45,460
unless you are implementing SQL by

00:23:44,020 --> 00:23:48,940
yourself

00:23:45,460 --> 00:23:52,960
jungle RM and SQL our Hemi are quite

00:23:48,940 --> 00:23:56,110
secure with Destin additionally and we

00:23:52,960 --> 00:23:59,049
didn't find any way of exploitation by

00:23:56,110 --> 00:24:02,730
our consultancy team that would allow

00:23:59,049 --> 00:24:06,510
you to exploit anything in this orange

00:24:02,730 --> 00:24:10,179
but there is a third option

00:24:06,510 --> 00:24:14,590
Python injection and SQL injection and

00:24:10,179 --> 00:24:17,049
it's possible and it's doable and many

00:24:14,590 --> 00:24:18,909
people doesn't know that that and none

00:24:17,049 --> 00:24:21,610
it will do use pickle as an object

00:24:18,909 --> 00:24:24,640
storage and PostgreSQL or other SQL

00:24:21,610 --> 00:24:28,360
databases and when you are using SQL

00:24:24,640 --> 00:24:30,940
databases and store a pickle then a user

00:24:28,360 --> 00:24:33,820
can input your Python code there for

00:24:30,940 --> 00:24:36,880
example this one nice liner which will

00:24:33,820 --> 00:24:39,549
delete also all things on your machine

00:24:36,880 --> 00:24:41,740
when I drowned and just for doing that

00:24:39,549 --> 00:24:43,809
routine like post an object like post

00:24:41,740 --> 00:24:46,390
and then refer the page to read the post

00:24:43,809 --> 00:24:48,760
and it will be executed and it's

00:24:46,390 --> 00:24:52,059
possible and you it's hard to mitigate

00:24:48,760 --> 00:24:55,179
this problem you can approach that issue

00:24:52,059 --> 00:24:57,010
in two ways by not using pickle and

00:24:55,179 --> 00:24:59,890
using JSON for storing the information

00:24:57,010 --> 00:25:02,080
that will be needed for a class builder

00:24:59,890 --> 00:25:07,260
later on we are want to go through the

00:25:02,080 --> 00:25:11,830
light to store a class and for storing

00:25:07,260 --> 00:25:14,039
dicks and least just them it's better to

00:25:11,830 --> 00:25:17,169
use JSON purely we can also try

00:25:14,039 --> 00:25:19,380
mitigating that by writing our all anti

00:25:17,169 --> 00:25:22,770
Python pickle injection

00:25:19,380 --> 00:25:27,150
validation but usual it's hard because

00:25:22,770 --> 00:25:30,210
this code you can make into base64 and

00:25:27,150 --> 00:25:34,800
then import base64 and eval the output

00:25:30,210 --> 00:25:35,340
of the base64 encoding decoding so it's

00:25:34,800 --> 00:25:39,000
hard

00:25:35,340 --> 00:25:42,990
below is a simple SQL injection that

00:25:39,000 --> 00:25:46,500
will drop user table and most people use

00:25:42,990 --> 00:25:48,090
the users table name even so if not they

00:25:46,500 --> 00:25:50,370
can also run other code execution that

00:25:48,090 --> 00:25:53,640
will tell them your database schema

00:25:50,370 --> 00:25:58,650
just by adding the apostrophe on the

00:25:53,640 --> 00:26:02,990
beginning and so as you can see Python

00:25:58,650 --> 00:26:05,730
has more vulnerabilities then then a

00:26:02,990 --> 00:26:08,520
front-end and written in JavaScript but

00:26:05,730 --> 00:26:11,970
most of them are already mitigated out

00:26:08,520 --> 00:26:14,340
of the box by Python as I as and as I

00:26:11,970 --> 00:26:17,130
told you before the most the main issue

00:26:14,340 --> 00:26:20,100
is with the developer so understand your

00:26:17,130 --> 00:26:23,670
site it's important that you will care

00:26:20,100 --> 00:26:26,010
for the careful development and proper

00:26:23,670 --> 00:26:28,230
means and I will tell you now how you

00:26:26,010 --> 00:26:30,420
can do that the first thing is when

00:26:28,230 --> 00:26:32,550
choosing a library try to choose the

00:26:30,420 --> 00:26:34,110
more common one because it's already

00:26:32,550 --> 00:26:36,450
being used for more for more users and

00:26:34,110 --> 00:26:39,720
if you are not using a common library or

00:26:36,450 --> 00:26:42,390
Python project you should go through the

00:26:39,720 --> 00:26:44,790
code yourself and see if the data is not

00:26:42,390 --> 00:26:58,980
being sent on each post for example to

00:26:44,790 --> 00:27:00,360
KGB or NSA and then I use okay so using

00:26:58,980 --> 00:27:03,500
old dated libraries may also lead to

00:27:00,360 --> 00:27:08,280
some issues there's a well example of

00:27:03,500 --> 00:27:11,040
Ubuntu 1404 which has you already free

00:27:08,280 --> 00:27:15,450
already install it but this version has

00:27:11,040 --> 00:27:16,710
the pack in SSL configuration and that

00:27:15,450 --> 00:27:19,800
can be exploited

00:27:16,710 --> 00:27:25,080
so just updating will save you from

00:27:19,800 --> 00:27:27,770
being hacked those are the summaries for

00:27:25,080 --> 00:27:27,770
the dev ops

00:27:27,860 --> 00:27:34,309
it's quite funny because nginx and

00:27:31,850 --> 00:27:36,679
Apache if you do be or both girls girl

00:27:34,309 --> 00:27:39,350
has much more much less attack vectors

00:27:36,679 --> 00:27:43,880
but they are still dying being hacked

00:27:39,350 --> 00:27:47,500
quite often so let's get back to our

00:27:43,880 --> 00:27:50,870
blog application so we have three users

00:27:47,500 --> 00:27:54,919
everyone can access our blog posts and

00:27:50,870 --> 00:27:57,289
read them registered user can additional

00:27:54,919 --> 00:28:02,600
right to the blog admins can manage the

00:27:57,289 --> 00:28:05,840
users and delete the post so when we are

00:28:02,600 --> 00:28:07,700
the composing the application in the

00:28:05,840 --> 00:28:10,340
first table we can see what the user can

00:28:07,700 --> 00:28:14,750
do from what the standard I said before

00:28:10,340 --> 00:28:17,179
and now we need to project that until

00:28:14,750 --> 00:28:20,840
the relation protect that on the

00:28:17,179 --> 00:28:23,779
database interaction so logging on near

00:28:20,840 --> 00:28:25,279
it quite obvious logout it's important

00:28:23,779 --> 00:28:31,519
it doesn't need to even access the

00:28:25,279 --> 00:28:35,510
database and so on and for the rest of

00:28:31,519 --> 00:28:38,809
actions so our API level actions we have

00:28:35,510 --> 00:28:41,059
get post delete someone may need to use

00:28:38,809 --> 00:28:45,799
put I will focus only on this resistant

00:28:41,059 --> 00:28:49,190
for now for the home directory get it

00:28:45,799 --> 00:28:52,429
sufficient for all users for logging

00:28:49,190 --> 00:28:54,409
only posts and we can extend that only

00:28:52,429 --> 00:28:56,929
post from anonymous users so a lot user

00:28:54,409 --> 00:29:00,350
shouldn't be able to look again again

00:28:56,929 --> 00:29:02,240
again to your application and for logout

00:29:00,350 --> 00:29:06,649
it should be also only available for

00:29:02,240 --> 00:29:08,570
enrolled users or admins and for the

00:29:06,649 --> 00:29:10,610
rest it will depend how does your

00:29:08,570 --> 00:29:13,880
structure of your product works looks

00:29:10,610 --> 00:29:21,200
like and what are your company policies

00:29:13,880 --> 00:29:24,139
for architecture and IP I okay so we

00:29:21,200 --> 00:29:26,600
finish our the composition phase of the

00:29:24,139 --> 00:29:31,010
application we have everything we need

00:29:26,600 --> 00:29:35,269
we can now go to determining and Ryan

00:29:31,010 --> 00:29:38,760
ranking the threads so what is the most

00:29:35,269 --> 00:29:44,530
valued part of our business

00:29:38,760 --> 00:29:47,740
it will depend on our business approach

00:29:44,530 --> 00:29:50,200
it may be our information so the

00:29:47,740 --> 00:29:52,750
block-post the users or convey

00:29:50,200 --> 00:29:55,450
nationality so user emails and their

00:29:52,750 --> 00:29:58,720
passwords depending on our business

00:29:55,450 --> 00:30:02,650
model may vary and how can they be

00:29:58,720 --> 00:30:05,730
targeted someone gets admin access so he

00:30:02,650 --> 00:30:09,160
can do anything in our application

00:30:05,730 --> 00:30:13,810
export the data did a whole application

00:30:09,160 --> 00:30:16,420
etc someone gets a user level access he

00:30:13,810 --> 00:30:18,970
can spam other users and possibly may

00:30:16,420 --> 00:30:22,630
access to their emails which can be also

00:30:18,970 --> 00:30:27,670
another spam attack vector next one are

00:30:22,630 --> 00:30:29,530
for DevOps so those attacks savage

00:30:27,670 --> 00:30:33,940
server all nation so on the

00:30:29,530 --> 00:30:36,100
infrastructure level next our

00:30:33,940 --> 00:30:40,210
application source code can also be a

00:30:36,100 --> 00:30:43,090
targeted attack now when someone gain

00:30:40,210 --> 00:30:46,350
access to our version control system he

00:30:43,090 --> 00:30:49,360
can place some malicious code there and

00:30:46,350 --> 00:30:51,850
if we don't have a proper review it will

00:30:49,360 --> 00:30:53,920
pass trial quite easily even if we have

00:30:51,850 --> 00:30:55,750
a proper review he can may still just

00:30:53,920 --> 00:31:01,210
click by himself because his owner of

00:30:55,750 --> 00:31:03,340
the version control system and even if

00:31:01,210 --> 00:31:05,260
he gains on a read access it will be

00:31:03,340 --> 00:31:08,050
much easier for him to find a

00:31:05,260 --> 00:31:12,630
vulnerability in our source code then

00:31:08,050 --> 00:31:12,630
without knowing the source code itself

00:31:14,130 --> 00:31:17,640
ok and

00:31:21,670 --> 00:31:26,590
as mentioned in the beginning depending

00:31:24,770 --> 00:31:35,500
on our business level the business

00:31:26,590 --> 00:31:35,500
approach we may have different different

00:31:36,970 --> 00:31:42,470
different authorities and the funding

00:31:39,320 --> 00:31:44,630
for example our users credit card

00:31:42,470 --> 00:31:47,840
numbers login password may be much more

00:31:44,630 --> 00:31:50,150
important than defending our post

00:31:47,840 --> 00:31:52,310
database because usual we can recover

00:31:50,150 --> 00:31:56,120
when someone deletes the mine database

00:31:52,310 --> 00:31:58,850
we usually have a backup but if we lose

00:31:56,120 --> 00:32:01,030
our username passwords or more credit

00:31:58,850 --> 00:32:04,060
cards we will not have an user anymore

00:32:01,030 --> 00:32:08,420
we'll all go away

00:32:04,060 --> 00:32:10,160
so risk mitigation one of the basic

00:32:08,420 --> 00:32:13,370
things we can do is adding multi-factor

00:32:10,160 --> 00:32:17,600
authentication for the user admins level

00:32:13,370 --> 00:32:21,500
access and also we can try limiting the

00:32:17,600 --> 00:32:27,200
range of the AP IPS that I can access

00:32:21,500 --> 00:32:30,200
the admin panel at all and it's good

00:32:27,200 --> 00:32:32,480
approach if your application is a micro

00:32:30,200 --> 00:32:35,090
service so you can move all the admin

00:32:32,480 --> 00:32:43,190
panel to another micro service it's also

00:32:35,090 --> 00:32:45,440
a good policy and then for the spam we

00:32:43,190 --> 00:32:46,760
can limit post per days which may be not

00:32:45,440 --> 00:32:50,120
convenient for our users

00:32:46,760 --> 00:32:54,230
as per our shorter sessions and adding

00:32:50,120 --> 00:32:56,090
CAPTCHA usual is also a nice idea I will

00:32:54,230 --> 00:32:58,280
skip the DevOps part because we are

00:32:56,090 --> 00:33:03,530
running over all time of all time out of

00:32:58,280 --> 00:33:05,660
time already and part of the mitigation

00:33:03,530 --> 00:33:07,940
should be done already on unit test

00:33:05,660 --> 00:33:10,810
level so when you are making unit tests

00:33:07,940 --> 00:33:12,650
don't focus only on happy pass do the

00:33:10,810 --> 00:33:15,350
run pass also

00:33:12,650 --> 00:33:17,930
so all exception handling and rising

00:33:15,350 --> 00:33:19,880
exception should also be done on the

00:33:17,930 --> 00:33:24,770
unit test level it will mitigate some of

00:33:19,880 --> 00:33:26,540
the security issues and there's one

00:33:24,770 --> 00:33:29,600
right one nice project I will mention

00:33:26,540 --> 00:33:33,560
four more maybe more four levels sshh

00:33:29,600 --> 00:33:33,970
sshh TDD that hides our SSH access in

00:33:33,560 --> 00:33:37,570
buckling

00:33:33,970 --> 00:33:40,620
side so on the same port we have HTTP

00:33:37,570 --> 00:33:40,620
and SSH access

00:33:41,760 --> 00:33:47,050
okay now tooling for automation for

00:33:45,460 --> 00:33:51,250
Python will have dedicated library

00:33:47,050 --> 00:33:55,450
called banded it analyzed our code using

00:33:51,250 --> 00:33:58,930
abstract syntax tree can be easily

00:33:55,450 --> 00:34:01,120
integrated with jenkins and it will find

00:33:58,930 --> 00:34:04,750
the most common vulnerabilities in our

00:34:01,120 --> 00:34:07,090
application like exec and evolution be

00:34:04,750 --> 00:34:09,460
highlighted it works similar to pet a

00:34:07,090 --> 00:34:11,500
tool or pylons it will get a nice report

00:34:09,460 --> 00:34:13,360
after running the application then we

00:34:11,500 --> 00:34:15,430
have sonarqube this is much bigger

00:34:13,360 --> 00:34:19,480
project that handles over 20 languages

00:34:15,430 --> 00:34:21,790
like javascript HTML and more and has a

00:34:19,480 --> 00:34:25,090
dedicated jenkees plugin with security

00:34:21,790 --> 00:34:27,190
gates that will allow you to not pass

00:34:25,090 --> 00:34:30,730
the code if you have found a

00:34:27,190 --> 00:34:33,240
vulnerability in our code test

00:34:30,730 --> 00:34:36,130
I really recommend looking at sonarqube

00:34:33,240 --> 00:34:38,800
because it's all in one tool it's free

00:34:36,130 --> 00:34:43,840
you can host it yourself or you can buy

00:34:38,800 --> 00:34:46,780
it as a service next we have automatic

00:34:43,840 --> 00:34:50,200
scanning tools we have Japan burp Java

00:34:46,780 --> 00:34:52,810
is created by OS project it's free it

00:34:50,200 --> 00:34:55,210
has it has

00:34:52,810 --> 00:34:58,900
janki's ready plugins and it's dedicated

00:34:55,210 --> 00:35:01,720
to all web application just first run of

00:34:58,900 --> 00:35:04,240
the most common issues will probably

00:35:01,720 --> 00:35:08,910
make allow you to find some security

00:35:04,240 --> 00:35:11,770
bugs burp is more commercial alternative

00:35:08,910 --> 00:35:14,980
and it doesn't have a drink spamming

00:35:11,770 --> 00:35:19,180
plugin already and it should be coming

00:35:14,980 --> 00:35:21,880
up soon both of them are web scanners so

00:35:19,180 --> 00:35:25,030
they will map your site and try execute

00:35:21,880 --> 00:35:29,890
common attack metals and patterns then

00:35:25,030 --> 00:35:33,220
we have Metasploit which is more based

00:35:29,890 --> 00:35:37,870
on more infrastructure based and system

00:35:33,220 --> 00:35:41,980
based attack framework and SQL not it's

00:35:37,870 --> 00:35:45,410
for all SQL interactions and our project

00:35:41,980 --> 00:35:49,990
that could be attacked

00:35:45,410 --> 00:35:52,820
and lastly we have copy this is a Python

00:35:49,990 --> 00:35:56,750
library that allows us to prepare any

00:35:52,820 --> 00:36:01,190
kind of DCP or ICMP packages and also

00:35:56,750 --> 00:36:03,440
UDP data grams with any payload lastly

00:36:01,190 --> 00:36:06,740
there is commercial solutions and

00:36:03,440 --> 00:36:08,869
managed service like qualities

00:36:06,740 --> 00:36:12,079
Nathan ASIS which is one of the most

00:36:08,869 --> 00:36:14,089
popular I think and a secure ID or the

00:36:12,079 --> 00:36:16,160
advantage of managed services that you

00:36:14,089 --> 00:36:17,869
will receive a report that does not

00:36:16,160 --> 00:36:21,170
concern that should not contain any

00:36:17,869 --> 00:36:23,329
false positives from the from the

00:36:21,170 --> 00:36:30,950
scanners because scanners usually brings

00:36:23,329 --> 00:36:35,710
you some a false positive skill and ok I

00:36:30,950 --> 00:36:38,000
will need to go fast Lee and who is up

00:36:35,710 --> 00:36:40,880
why do we need to append testing and

00:36:38,000 --> 00:36:43,490
what is a pen tester pen test and short

00:36:40,880 --> 00:36:48,200
it's an auto acid attack on application

00:36:43,490 --> 00:36:51,079
or upper aura in our infrastructure we

00:36:48,200 --> 00:36:53,420
should do pen testing for removing all

00:36:51,079 --> 00:36:55,310
the security weaknesses and also for

00:36:53,420 --> 00:37:01,609
compliant or compliant like PCI

00:36:55,310 --> 00:37:03,740
compliance and what's the target of a

00:37:01,609 --> 00:37:05,660
pen test so usually when pen tester is

00:37:03,740 --> 00:37:08,030
attacking our application he has two

00:37:05,660 --> 00:37:12,280
goals obtain interesting information or

00:37:08,030 --> 00:37:12,280
elevating his access to an admin level

00:37:12,579 --> 00:37:18,680
best-case scenario it should be done by

00:37:14,839 --> 00:37:21,140
a third party and we should use also the

00:37:18,680 --> 00:37:24,109
automated tools I mentioned before we

00:37:21,140 --> 00:37:27,020
should do also it when we end a

00:37:24,109 --> 00:37:28,670
developmental cycle or when we have a

00:37:27,020 --> 00:37:30,740
new big feature that may be vulnerable

00:37:28,670 --> 00:37:33,319
to attack that other parts of

00:37:30,740 --> 00:37:36,740
application are not but who is a pen

00:37:33,319 --> 00:37:39,349
tester pen tester quite obviously it's a

00:37:36,740 --> 00:37:41,950
person who performs a pen test it's not

00:37:39,349 --> 00:37:45,650
a method of time testing is the person

00:37:41,950 --> 00:37:48,230
you can also call them security

00:37:45,650 --> 00:37:50,780
consultants hackers white house just

00:37:48,230 --> 00:37:53,420
remember not to call them crackers or

00:37:50,780 --> 00:37:55,910
black hat which means basically criminal

00:37:53,420 --> 00:37:57,410
because they will become sub and you

00:37:55,910 --> 00:37:59,960
don't want to have a sub hacker

00:37:57,410 --> 00:38:03,710
your team really you don't want to have

00:37:59,960 --> 00:38:06,140
that and also there is something called

00:38:03,710 --> 00:38:08,390
red teaming drill that's more acts more

00:38:06,140 --> 00:38:10,520
extensive than a normal pen testing

00:38:08,390 --> 00:38:13,160
because it starts on security level

00:38:10,520 --> 00:38:14,810
usually a red teaming drill has budget

00:38:13,160 --> 00:38:19,610
for the physical Dementors like

00:38:14,810 --> 00:38:23,960
destroyed locks broken windows also it

00:38:19,610 --> 00:38:29,720
covers planting bugs one important thing

00:38:23,960 --> 00:38:32,210
is that is when earth team drill goes

00:38:29,720 --> 00:38:35,060
undetected that means you have really

00:38:32,210 --> 00:38:37,400
big issues because an attacker when he

00:38:35,060 --> 00:38:39,770
achieves his goals for example burns a

00:38:37,400 --> 00:38:42,980
box and record your conversation with

00:38:39,770 --> 00:38:45,170
your boss starts being noisy to a level

00:38:42,980 --> 00:38:50,510
when some someone who'd should have

00:38:45,170 --> 00:38:53,300
noticed it okay there are three major

00:38:50,510 --> 00:38:56,060
approaches when contesting the white box

00:38:53,300 --> 00:38:59,390
so our consultant has access to

00:38:56,060 --> 00:39:01,670
everything including our production

00:38:59,390 --> 00:39:05,750
servers configurations documentation

00:39:01,670 --> 00:39:09,440
source code etc then we have gray box

00:39:05,750 --> 00:39:12,080
texting we limit his access to the our

00:39:09,440 --> 00:39:14,180
infrastructure here has accessed basic

00:39:12,080 --> 00:39:16,340
access to application and possibly a

00:39:14,180 --> 00:39:19,520
moderator access if it's obtainable by a

00:39:16,340 --> 00:39:22,280
user and he has still access to our

00:39:19,520 --> 00:39:24,470
documentation and our source code the

00:39:22,280 --> 00:39:26,510
attack becomes then targeted because he

00:39:24,470 --> 00:39:29,780
can find witnesses in our source code

00:39:26,510 --> 00:39:32,780
and try to exploit them and then there

00:39:29,780 --> 00:39:35,120
is black box so attacker does not know

00:39:32,780 --> 00:39:37,070
anything about our application except

00:39:35,120 --> 00:39:39,980
what it's available on the internet

00:39:37,070 --> 00:39:42,080
public internet he doesn't have access

00:39:39,980 --> 00:39:44,390
to the source code but he may obtain it

00:39:42,080 --> 00:39:48,620
during the attack also think goes for

00:39:44,390 --> 00:39:50,210
the documentation then last thing which

00:39:48,620 --> 00:39:54,950
is becoming more and more popular a

00:39:50,210 --> 00:39:57,350
seesaw which is security informations of

00:39:54,950 --> 00:40:01,190
the six cyber security

00:39:57,350 --> 00:40:04,220
it's sorry chief information security

00:40:01,190 --> 00:40:06,880
officer that's responsible for many

00:40:04,220 --> 00:40:09,260
things I like into the response things

00:40:06,880 --> 00:40:11,420
information risk management

00:40:09,260 --> 00:40:14,330
information regulatory compliance so for

00:40:11,420 --> 00:40:17,750
example PCI Data Protection Act or do do

00:40:14,330 --> 00:40:20,030
in Poland and also for IT security and

00:40:17,750 --> 00:40:22,220
security awareness in the company and

00:40:20,030 --> 00:40:23,960
the last one is currently very important

00:40:22,220 --> 00:40:26,720
because of the phishing attacks that may

00:40:23,960 --> 00:40:31,430
happen even awful on our non technical

00:40:26,720 --> 00:40:34,910
staff and if we are getting hacked there

00:40:31,430 --> 00:40:35,900
are four circles of being boned one

00:40:34,910 --> 00:40:41,240
being hacked

00:40:35,900 --> 00:40:42,920
ayuh by a bot or script kiddie and being

00:40:41,240 --> 00:40:45,830
attacked by very known vulnerability

00:40:42,920 --> 00:40:48,230
both of them are very shameful for your

00:40:45,830 --> 00:40:53,120
company you will be a mention on the

00:40:48,230 --> 00:40:54,980
internet and very nice ways and for the

00:40:53,120 --> 00:40:57,320
security people they probably should

00:40:54,980 --> 00:41:01,130
surfing their career choices it's that

00:40:57,320 --> 00:41:04,010
bad early and then being Hackett by a

00:41:01,130 --> 00:41:05,660
quite new vulnerability it may happen we

00:41:04,010 --> 00:41:08,840
didn't patch our system so we need to

00:41:05,660 --> 00:41:11,630
improve our protocols and lastly we are

00:41:08,840 --> 00:41:15,950
attacked by unknown vulnerability or

00:41:11,630 --> 00:41:18,170
so-called third eye which is also

00:41:15,950 --> 00:41:20,000
approved that our security till this

00:41:18,170 --> 00:41:24,380
point where that good the attacker

00:41:20,000 --> 00:41:26,990
needed to use something new two

00:41:24,380 --> 00:41:29,150
important things and not thing at this

00:41:26,990 --> 00:41:31,340
particular result of attack doesn't mean

00:41:29,150 --> 00:41:33,170
we are we're not hacked or not being

00:41:31,340 --> 00:41:35,900
owned for a longer period of time

00:41:33,170 --> 00:41:39,140
because the target of attack maybe just

00:41:35,900 --> 00:41:41,380
to acquire some information and the last

00:41:39,140 --> 00:41:44,360
year Garten report said that it takes

00:41:41,380 --> 00:41:47,000
200 days on average for a company to

00:41:44,360 --> 00:41:49,580
notice an attack imagine what can happen

00:41:47,000 --> 00:41:57,140
in 200 days with your infrastructure

00:41:49,580 --> 00:42:00,500
being owned by an malicious user so

00:41:57,140 --> 00:42:02,210
internet is changing and years ago it

00:42:00,500 --> 00:42:04,640
was commonly advice for example to move

00:42:02,210 --> 00:42:07,460
SSH to a higher port now we have masks

00:42:04,640 --> 00:42:10,010
on so we don't have to there's no point

00:42:07,460 --> 00:42:13,940
of moving it and actually it may mess

00:42:10,010 --> 00:42:17,380
your firewalls if you move an protocol

00:42:13,940 --> 00:42:20,360
to a different number than it should be

00:42:17,380 --> 00:42:22,700
estimation now we are ordering strangers

00:42:20,360 --> 00:42:25,310
to bring us home

00:42:22,700 --> 00:42:30,240
and this is a curated list of

00:42:25,310 --> 00:42:32,460
interesting links that may help you go

00:42:30,240 --> 00:42:34,380
into cybersecurity some of them were

00:42:32,460 --> 00:42:37,859
mentioned if something was not mentioned

00:42:34,380 --> 00:42:40,680
as an awesome security or github or on

00:42:37,859 --> 00:42:42,810
the OS project site last thing just from

00:42:40,680 --> 00:42:45,359
to the yesterday there's a great talk

00:42:42,810 --> 00:42:48,060
about passwords and why we should not

00:42:45,359 --> 00:42:50,700
use them on the Euro Python I hope I

00:42:48,060 --> 00:42:53,880
will see it again on YouTube soon at

00:42:50,700 --> 00:42:57,000
work done by Justin Meyer yesterday in

00:42:53,880 --> 00:42:59,670
the morning and I hope you enjoyed my

00:42:57,000 --> 00:43:03,210
talk and learn something I don't know

00:42:59,670 --> 00:43:05,950
how to summon the Dark Lord yet but I

00:43:03,210 --> 00:43:09,810
will gladly answer your questions

00:43:05,950 --> 00:43:09,810
[Applause]

00:43:11,660 --> 00:43:23,070
we have time for one question so if you

00:43:19,280 --> 00:43:24,620
if you ask a pen tester to pen test your

00:43:23,070 --> 00:43:27,420
system you said there are three ways

00:43:24,620 --> 00:43:29,160
which one because I mean the white box

00:43:27,420 --> 00:43:30,780
you just give everything and the black

00:43:29,160 --> 00:43:33,420
box you don't give anything what would

00:43:30,780 --> 00:43:36,450
you suggest if you have a system and you

00:43:33,420 --> 00:43:39,600
want to pentane pencils like which of

00:43:36,450 --> 00:43:43,220
these approaches would you take honestly

00:43:39,600 --> 00:43:46,140
it roughly depends on your budget and

00:43:43,220 --> 00:43:47,910
your ability to sustain your service

00:43:46,140 --> 00:43:49,560
during a pen test when bug boxing

00:43:47,910 --> 00:43:51,270
because black box testing is quite

00:43:49,560 --> 00:43:53,670
demanding because it's done on the

00:43:51,270 --> 00:43:55,530
production system so unless you can

00:43:53,670 --> 00:43:58,290
scale up to handle the black box testing

00:43:55,530 --> 00:44:01,050
maybe gray box will be much more advise

00:43:58,290 --> 00:44:02,940
it and it's not a white box testing also

00:44:01,050 --> 00:44:05,670
all of the tests should be used

00:44:02,940 --> 00:44:08,130
different results so when you are having

00:44:05,670 --> 00:44:10,530
for example periodically pen testing

00:44:08,130 --> 00:44:18,270
it's wise to change the methods so we

00:44:10,530 --> 00:44:20,350
will get a different outcome and thank

00:44:18,270 --> 00:44:23,739
you for a chop

00:44:20,350 --> 00:44:23,739

YouTube URL: https://www.youtube.com/watch?v=Mu-hWspzdxI


