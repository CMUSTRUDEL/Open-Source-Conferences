Title: RafaÅ‚ Nowicki - Python REST frameworks review
Publication date: 2017-09-17
Playlist: EuroPython 2017
Description: 
	"Python REST frameworks review
[EuroPython 2017 - Talk - 2017-07-10 - PyCharm Room]
[Rimini, Italy]

Number of libraries for building RESTful web applications is growing up. Selecting best framework becomes hard decision for web developers.

During the presentation I will go through best libraries I can recommend for building RESTful web applications.

Selection of libraries will be subjective, based on my experience with building microservices in Python. I will share code examples, weaknesses and strengths for each library. I hope everyone will find something that best suits his needs.

License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2017.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:03,700 --> 00:00:10,309
welcome everyone my name is sarah for

00:00:07,820 --> 00:00:15,200
Nowitzki and currently I'm working at a

00:00:10,309 --> 00:00:16,869
testings next here I am because this is

00:00:15,200 --> 00:00:20,779
a software house currently I'm working

00:00:16,869 --> 00:00:23,060
for a client who is one of the biggest

00:00:20,779 --> 00:00:25,939
math and marketing agencies and here we

00:00:23,060 --> 00:00:31,460
are making the asset management platform

00:00:25,939 --> 00:00:36,320
of for them by some my micro services

00:00:31,460 --> 00:00:41,920
mostly so this is the agenda I will

00:00:36,320 --> 00:00:46,490
start with a short introduction the goal

00:00:41,920 --> 00:00:49,970
then the main part and part of the

00:00:46,490 --> 00:00:55,330
presentation is about three as

00:00:49,970 --> 00:01:00,110
frameworks the next I will briefly

00:00:55,330 --> 00:01:05,210
describe that the next three each part

00:01:00,110 --> 00:01:08,860
each each framework will will be

00:01:05,210 --> 00:01:14,180
presented the features the crude example

00:01:08,860 --> 00:01:17,080
and the reason and I will finish with

00:01:14,180 --> 00:01:23,240
the summary and content question and

00:01:17,080 --> 00:01:26,030
answers session ok so every time when I

00:01:23,240 --> 00:01:29,440
was designing the micro service and/or I

00:01:26,030 --> 00:01:32,960
was a weakness witness of of the

00:01:29,440 --> 00:01:37,250
designing new new new products I've

00:01:32,960 --> 00:01:43,610
always seen the same descended

00:01:37,250 --> 00:01:46,460
discussions which tool are best for our

00:01:43,610 --> 00:01:49,060
needs will be best for the fourth for

00:01:46,460 --> 00:01:53,870
the product and the answer is quite

00:01:49,060 --> 00:01:59,390
quite often like the same that that we

00:01:53,870 --> 00:02:02,240
used recently so the best solutions are

00:01:59,390 --> 00:02:06,020
that we already know that are already

00:02:02,240 --> 00:02:11,629
discovered and if their business

00:02:06,020 --> 00:02:13,879
requirements that that that the business

00:02:11,629 --> 00:02:16,520
need is as soon as possible

00:02:13,879 --> 00:02:19,430
then we

00:02:16,520 --> 00:02:25,820
cut off and go back to the solutions

00:02:19,430 --> 00:02:30,560
that that we already know and I'd like

00:02:25,820 --> 00:02:36,230
to share with you the the frames that I

00:02:30,560 --> 00:02:40,400
that I checked you know in order to do

00:02:36,230 --> 00:02:43,370
that to do something different so maybe

00:02:40,400 --> 00:02:45,980
you will be able to to answer the

00:02:43,370 --> 00:02:48,020
following question which has framework

00:02:45,980 --> 00:02:52,400
best suit to my needs

00:02:48,020 --> 00:02:57,950
and I will start with the jungle rest

00:02:52,400 --> 00:03:01,520
framework the grf is is one one of the

00:02:57,950 --> 00:03:04,310
first that I have learned that framework

00:03:01,520 --> 00:03:08,050
has been designed for for jungle

00:03:04,310 --> 00:03:15,400
it has great integration with jungle

00:03:08,050 --> 00:03:18,560
that documentation is also really nice

00:03:15,400 --> 00:03:20,330
the framework framework is complex so it

00:03:18,560 --> 00:03:22,160
also needs that the completely

00:03:20,330 --> 00:03:27,260
documented documentation and this is

00:03:22,160 --> 00:03:29,060
what can you find here and another

00:03:27,260 --> 00:03:36,710
feature is the browsable

00:03:29,060 --> 00:03:40,580
API so GRF allows you to to live

00:03:36,710 --> 00:03:44,530
check the your endpoints on the webpage

00:03:40,580 --> 00:03:48,350
so you don't need you don't need any

00:03:44,530 --> 00:03:55,340
postman or any other tool to to check

00:03:48,350 --> 00:03:59,270
the the request this is them a simple

00:03:55,340 --> 00:04:03,590
view set so in the RF you could provide

00:03:59,270 --> 00:04:06,320
the Creator am endpoints used by two

00:04:03,590 --> 00:04:09,710
ways one of them is using API views and

00:04:06,320 --> 00:04:15,800
another one is to use the view sets and

00:04:09,710 --> 00:04:20,450
use muted is is like a managing the API

00:04:15,800 --> 00:04:25,960
views so here this is an example of user

00:04:20,450 --> 00:04:30,130
view set we have two two methods which

00:04:25,960 --> 00:04:34,030
which we simply say what has been

00:04:30,130 --> 00:04:38,050
returned on on list methods it will be

00:04:34,030 --> 00:04:44,070
the result of the of the list end point

00:04:38,050 --> 00:04:47,919
and what's returned in retrieve will be

00:04:44,070 --> 00:04:50,680
returned in in this case you user

00:04:47,919 --> 00:04:55,090
details so you simply return the

00:04:50,680 --> 00:04:59,500
response and and put the data that you

00:04:55,090 --> 00:05:00,900
want to have that you want to your

00:04:59,500 --> 00:05:04,870
client

00:05:00,900 --> 00:05:06,610
read and in this case is the iteration

00:05:04,870 --> 00:05:10,389
through the through the user so so in

00:05:06,610 --> 00:05:13,680
list view you get the user names list

00:05:10,389 --> 00:05:17,979
and in which we trees you get the

00:05:13,680 --> 00:05:21,639
username email and full name case with

00:05:17,979 --> 00:05:28,509
all the values for for particular user

00:05:21,639 --> 00:05:30,699
and mapping for view says you already

00:05:28,509 --> 00:05:37,180
know the lists and retrieve there is

00:05:30,699 --> 00:05:39,789
also create for for for post request the

00:05:37,180 --> 00:05:42,729
list is for get weaker request on on

00:05:39,789 --> 00:05:46,150
collection retrieve is on is a get

00:05:42,729 --> 00:05:50,020
request on on item updates and partial

00:05:46,150 --> 00:05:52,960
update is is put and patch mapping and

00:05:50,020 --> 00:05:56,320
this throw is it is just delete by

00:05:52,960 --> 00:06:02,099
default you get here the PK but you can

00:05:56,320 --> 00:06:06,729
simply change it through the attribute

00:06:02,099 --> 00:06:09,789
in your view sir so this is the

00:06:06,729 --> 00:06:15,970
model-based view set the this is this is

00:06:09,789 --> 00:06:18,639
really this is why why I'm using the DRF

00:06:15,970 --> 00:06:21,340
or for one of the products if you have

00:06:18,639 --> 00:06:25,030
the project where there is a lot of a

00:06:21,340 --> 00:06:29,260
lot of models that you want to of

00:06:25,030 --> 00:06:35,770
overlap with the recruit

00:06:29,260 --> 00:06:40,200
then then by simple declaring the second

00:06:35,770 --> 00:06:46,140
class the first class is a sterilizer

00:06:40,200 --> 00:06:50,200
second class is just all you need to

00:06:46,140 --> 00:06:56,290
wrap the model combined wrap the model

00:06:50,200 --> 00:07:01,630
to the to your API and by default you

00:06:56,290 --> 00:07:08,800
get full crude create read update and

00:07:01,630 --> 00:07:12,130
delete and how to how to set up the URLs

00:07:08,800 --> 00:07:14,620
you can see you can when you're using

00:07:12,130 --> 00:07:18,640
the view sets you can use the Reuters

00:07:14,620 --> 00:07:28,120
and this is like like you your register

00:07:18,640 --> 00:07:32,620
new give you set but you can also do

00:07:28,120 --> 00:07:37,390
this with the known from Django way so

00:07:32,620 --> 00:07:41,260
by because the visit ect is is also the

00:07:37,390 --> 00:07:45,730
view class so you can use the S view and

00:07:41,260 --> 00:07:49,740
and put it the URL that that you that

00:07:45,730 --> 00:07:53,550
you really need and this is this is more

00:07:49,740 --> 00:07:59,770
detail example so we have to tune out

00:07:53,550 --> 00:08:06,730
one for user 1 4 1 4 groups hmm and by

00:07:59,770 --> 00:08:10,810
declaring registering that the user and

00:08:06,730 --> 00:08:14,710
group Reuters you will get the pattern

00:08:10,810 --> 00:08:16,870
like users it is this advice from the

00:08:14,710 --> 00:08:21,460
front from the first regular expression

00:08:16,870 --> 00:08:23,700
from the first argument or in case when

00:08:21,460 --> 00:08:25,200
you when you need details

00:08:23,700 --> 00:08:28,540
[Music]

00:08:25,200 --> 00:08:30,610
DJ's action you get the PK by default

00:08:28,540 --> 00:08:33,190
but but if you trying to do if you can

00:08:30,610 --> 00:08:36,099
get whatever you want and this is and

00:08:33,190 --> 00:08:39,209
here you also have them at the name so

00:08:36,099 --> 00:08:42,869
you can you can use it all around your

00:08:39,209 --> 00:08:50,369
you jungle up or or even if in the in

00:08:42,869 --> 00:08:54,480
the other api's so if you really if you

00:08:50,369 --> 00:08:59,550
already use jungle and you need fruit as

00:08:54,480 --> 00:09:02,819
I mentioned for for models the DRF will

00:08:59,550 --> 00:09:04,550
will do for this and it is the obvious

00:09:02,819 --> 00:09:09,420
choice

00:09:04,550 --> 00:09:12,589
another one was graceful so this is the

00:09:09,420 --> 00:09:16,350
library create for flask surprise

00:09:12,589 --> 00:09:20,790
compared to a jungle the jungle strain

00:09:16,350 --> 00:09:24,779
work is it contains the minimum actually

00:09:20,790 --> 00:09:30,240
the the RM is not included awesome to

00:09:24,779 --> 00:09:33,149
ask you can decide what to use it's

00:09:30,240 --> 00:09:37,529
great for for building lightweights IP

00:09:33,149 --> 00:09:40,860
eyes and better way to organize your

00:09:37,529 --> 00:09:44,220
resources you have to be honest to

00:09:40,860 --> 00:09:48,959
system the biggest value for for using

00:09:44,220 --> 00:09:51,360
it so I I will go through few X few

00:09:48,959 --> 00:09:54,139
examples but actually it's a one example

00:09:51,360 --> 00:09:58,319
so we can treat the slides like one page

00:09:54,139 --> 00:10:04,679
so starts from the from the top you

00:09:58,319 --> 00:10:11,549
don't just just keep track on the on the

00:10:04,679 --> 00:10:14,309
users which is currently the the default

00:10:11,549 --> 00:10:18,449
variable in this in this file so we have

00:10:14,309 --> 00:10:24,990
the users dictionary structure and I

00:10:18,449 --> 00:10:28,499
will save the users by the by the key in

00:10:24,990 --> 00:10:34,529
the identifier and and and the details

00:10:28,499 --> 00:10:41,129
in value and what is really nice

00:10:34,529 --> 00:10:44,529
the and well-known at the flask restful

00:10:41,129 --> 00:10:49,660
use the request parser

00:10:44,529 --> 00:10:52,540
it works really similar to our cursor so

00:10:49,660 --> 00:10:56,589
here you can you can set that the

00:10:52,540 --> 00:11:00,730
arguments that that will be used and you

00:10:56,589 --> 00:11:07,720
can say what type of the of it is or is

00:11:00,730 --> 00:11:12,759
required on now so let's go to the

00:11:07,720 --> 00:11:15,550
resources and here we have them the

00:11:12,759 --> 00:11:17,050
method called get and post so this will

00:11:15,550 --> 00:11:18,839
be the currently in the literacy

00:11:17,050 --> 00:11:23,800
research the collection resource and

00:11:18,839 --> 00:11:29,379
here in get request we will return the

00:11:23,800 --> 00:11:32,019
list of the of the oil we of the users

00:11:29,379 --> 00:11:39,459
which is only the attributes from the

00:11:32,019 --> 00:11:47,439
from the previous slide and on post will

00:11:39,459 --> 00:11:53,829
get the the username and and five and up

00:11:47,439 --> 00:11:59,230
and save it to the to the already

00:11:53,829 --> 00:12:02,439
existing dictionary and here you can you

00:11:59,230 --> 00:12:07,350
can see that that the sterilization is

00:12:02,439 --> 00:12:13,660
is behind so you don't you don't need to

00:12:07,350 --> 00:12:16,720
to remember about the serialization on

00:12:13,660 --> 00:12:21,970
on your on your site so that the league

00:12:16,720 --> 00:12:27,399
will be just converted to the to the

00:12:21,970 --> 00:12:30,730
JSON this is the user resource so this

00:12:27,399 --> 00:12:33,300
is for for for item and heroes have

00:12:30,730 --> 00:12:36,160
known get delete and pop and put its

00:12:33,300 --> 00:12:42,129
more cleared and then the use it for for

00:12:36,160 --> 00:12:48,449
for DRF but anyway here you have forget

00:12:42,129 --> 00:12:52,360
you you rice actually use the abhart

00:12:48,449 --> 00:12:56,500
this is the method from from from flask

00:12:52,360 --> 00:12:56,840
restful which throws 404 and and the

00:12:56,500 --> 00:12:59,870
party

00:12:56,840 --> 00:13:02,480
third party particular message and then

00:12:59,870 --> 00:13:07,070
on delete we remove the user by the key

00:13:02,480 --> 00:13:10,490
from from the dicks for put we find we

00:13:07,070 --> 00:13:15,440
just override that the value for for

00:13:10,490 --> 00:13:18,920
this one and this is this is the the

00:13:15,440 --> 00:13:22,880
place where we where we do all the setup

00:13:18,920 --> 00:13:28,090
so the first and last last line is is

00:13:22,880 --> 00:13:33,170
flask and this is all you need is just

00:13:28,090 --> 00:13:36,830
create a new API instance on this on

00:13:33,170 --> 00:13:39,010
this glass cap and add the resources you

00:13:36,830 --> 00:13:43,820
have to control full control of naming

00:13:39,010 --> 00:13:51,890
of name space on it so no one one will

00:13:43,820 --> 00:13:56,630
will do this for you and so far if you

00:13:51,890 --> 00:14:00,880
have a flask it make sense to them to

00:13:56,630 --> 00:14:07,340
replace your API written in flask to

00:14:00,880 --> 00:14:12,920
restful to to forest full to have hang

00:14:07,340 --> 00:14:14,990
things organized but if it still not

00:14:12,920 --> 00:14:22,030
what you really need let let's go to

00:14:14,990 --> 00:14:26,740
that next one so the cycle cycle is

00:14:22,030 --> 00:14:29,240
working on the Python actually it was

00:14:26,740 --> 00:14:34,330
tighten that but but the outer

00:14:29,240 --> 00:14:38,270
recommends to to use to use it on it

00:14:34,330 --> 00:14:42,530
because of the of the performance so

00:14:38,270 --> 00:14:49,190
that this icon is minimalistic web web

00:14:42,530 --> 00:14:53,120
framework and and it's really reliable

00:14:49,190 --> 00:14:55,460
and high performance so there are a

00:14:53,120 --> 00:15:02,610
bunch of benchmarks on the on the fly

00:14:55,460 --> 00:15:08,129
con page so it

00:15:02,610 --> 00:15:12,600
the outer really did great work with

00:15:08,129 --> 00:15:14,670
with optimal optimizing this one so that

00:15:12,600 --> 00:15:20,819
the reason for this is just focus on on

00:15:14,670 --> 00:15:24,509
one single case this HTTP API will go

00:15:20,819 --> 00:15:28,339
quite similar example then we go through

00:15:24,509 --> 00:15:28,339
the restful api

00:15:28,819 --> 00:15:37,860
plus stressful mmm so starting from the

00:15:32,790 --> 00:15:41,639
top we have the same user structure and

00:15:37,860 --> 00:15:45,179
let's go to the to the roof users you

00:15:41,639 --> 00:15:52,290
can you can see that I only import this

00:15:45,179 --> 00:15:54,709
icon and JSON libraries so the name

00:15:52,290 --> 00:15:58,679
convention for the method is it's quite

00:15:54,709 --> 00:16:03,239
quite similar but you need to add on in

00:15:58,679 --> 00:16:06,449
private practice so on get you get you

00:16:03,239 --> 00:16:09,720
use it set the body this is quite

00:16:06,449 --> 00:16:14,160
different than in flask restful this is

00:16:09,720 --> 00:16:20,549
because you get in as erect view and

00:16:14,160 --> 00:16:26,329
read the reference to the object so we

00:16:20,549 --> 00:16:30,269
you don't we don't return anything

00:16:26,329 --> 00:16:34,259
instead of none so it's enough to just

00:16:30,269 --> 00:16:36,419
set that that the body attribute with

00:16:34,259 --> 00:16:40,769
the values and here there is no

00:16:36,419 --> 00:16:47,489
serialization so so we need to do JSON

00:16:40,769 --> 00:16:51,509
dump on this and on posts methods its

00:16:47,489 --> 00:16:54,600
the disk out make more complicated but

00:16:51,509 --> 00:16:59,100
it still it may look more complicated

00:16:54,600 --> 00:17:01,589
but it is to do the same so we extract

00:16:59,100 --> 00:17:07,409
the button at the body from from the

00:17:01,589 --> 00:17:12,990
stream then then I realized the body and

00:17:07,409 --> 00:17:17,909
then do the same get that actually

00:17:12,990 --> 00:17:23,360
popped the username and show the proper

00:17:17,909 --> 00:17:27,630
message if if the user exists and set up

00:17:23,360 --> 00:17:32,190
the value is if it doesn't so here we

00:17:27,630 --> 00:17:36,299
can see that there is the return this is

00:17:32,190 --> 00:17:39,179
because this has been this because the

00:17:36,299 --> 00:17:41,340
way off of off assigning that the

00:17:39,179 --> 00:17:43,770
attributes the regress and reverse which

00:17:41,340 --> 00:17:46,399
represented responses so if I would

00:17:43,770 --> 00:17:50,940
forget about this then

00:17:46,399 --> 00:17:52,279
then another than is the user won't

00:17:50,940 --> 00:17:58,549
exists

00:17:52,279 --> 00:18:03,450
the code will try set the user anyway

00:17:58,549 --> 00:18:06,840
this is the user resource and here we

00:18:03,450 --> 00:18:14,909
have quite similar situation

00:18:06,840 --> 00:18:21,029
so when the user doesn't exist so you

00:18:14,909 --> 00:18:25,620
you get the 404 and the message on

00:18:21,029 --> 00:18:29,990
delete we remove the user from from the

00:18:25,620 --> 00:18:35,399
dicks and on put we update the user and

00:18:29,990 --> 00:18:39,990
this is this is the same code is

00:18:35,399 --> 00:18:42,240
actually repeating here so the the point

00:18:39,990 --> 00:18:49,980
of serialization so every time you need

00:18:42,240 --> 00:18:55,289
to read from a stream allows loaded the

00:18:49,980 --> 00:18:59,690
JSON and and then do what you want so

00:18:55,289 --> 00:18:59,690
here you get two other additional steps

00:19:00,320 --> 00:19:10,740
this is the way of of setting setting up

00:19:07,850 --> 00:19:14,580
the URLs here we also have the full

00:19:10,740 --> 00:19:18,149
control of all namespace so the best

00:19:14,580 --> 00:19:26,549
practice is to to keep it in one place

00:19:18,149 --> 00:19:31,949
or just or just shared the way of share

00:19:26,549 --> 00:19:37,829
your pattern with your ecologist so this

00:19:31,949 --> 00:19:43,229
is great if you if if everything that

00:19:37,829 --> 00:19:48,929
you do is is the API and you're you

00:19:43,229 --> 00:19:51,869
really focused on on the performance so

00:19:48,929 --> 00:19:58,559
there are a few more libraries that that

00:19:51,869 --> 00:20:01,919
I have tried and because I don't have

00:19:58,559 --> 00:20:06,109
enough time to to go through to to to

00:20:01,919 --> 00:20:07,559
every of this this is that's why it it's

00:20:06,109 --> 00:20:11,609
together

00:20:07,559 --> 00:20:14,219
so as this is deadens we could so called

00:20:11,609 --> 00:20:19,169
framework for human beings so the

00:20:14,219 --> 00:20:25,219
general idea is to to easily build and

00:20:19,169 --> 00:20:28,979
deploy customizable api and a lot of a

00:20:25,219 --> 00:20:32,429
lot of things are set up in just JSON

00:20:28,979 --> 00:20:35,549
structure or just the big structure in

00:20:32,429 --> 00:20:38,779
Python and this this is the natives in

00:20:35,549 --> 00:20:46,319
this have the 1980 support for MongoDB

00:20:38,779 --> 00:20:52,279
but as as extensions it can be used for

00:20:46,319 --> 00:20:57,509
SQL elasticsearch and and and another

00:20:52,279 --> 00:21:08,759
backends another one that tasty pie this

00:20:57,509 --> 00:21:11,609
is a few years ago it was the I use this

00:21:08,759 --> 00:21:16,169
I use it for for one of the jungle

00:21:11,609 --> 00:21:24,199
products and and it works well well

00:21:16,169 --> 00:21:26,009
unfortunately it's not it's not

00:21:24,199 --> 00:21:30,050
developed anymore

00:21:26,009 --> 00:21:35,380
so the version freeze on all point 13

00:21:30,050 --> 00:21:42,170
it do simply things like the DRS I mean

00:21:35,380 --> 00:21:44,780
they really did a lot of for you but but

00:21:42,170 --> 00:21:47,570
you had you had surreal little and view

00:21:44,780 --> 00:21:52,550
in one class and AP star this is

00:21:47,570 --> 00:21:55,010
actually this is not a framework for for

00:21:52,550 --> 00:21:57,140
for building pretzel application it's

00:21:55,010 --> 00:22:00,260
just a frame for forbidden building any

00:21:57,140 --> 00:22:06,860
ap ice but I think it's it for dimension

00:22:00,260 --> 00:22:11,230
and and maybe you would be interested in

00:22:06,860 --> 00:22:14,600
in more in modern on more details on it

00:22:11,230 --> 00:22:19,820
so this is the the outer is the same for

00:22:14,600 --> 00:22:23,170
for DRS and a P star is primal designed

00:22:19,820 --> 00:22:26,500
for for fighting three light and

00:22:23,170 --> 00:22:31,220
internal in general helps building the

00:22:26,500 --> 00:22:36,200
AP ice so if you want to follow restful

00:22:31,220 --> 00:22:41,510
pattern then you need to take care of it

00:22:36,200 --> 00:22:46,090
on your own and some re so the number of

00:22:41,510 --> 00:22:49,340
restful frameworks is still limited and

00:22:46,090 --> 00:22:51,980
this is like this is a good way a good

00:22:49,340 --> 00:22:58,310
thing and also the bad feel the bad

00:22:51,980 --> 00:23:06,170
think so and the best because we may

00:22:58,310 --> 00:23:09,860
expect any other any other libraries or

00:23:06,170 --> 00:23:11,510
framers that that we could use but but

00:23:09,860 --> 00:23:16,490
but from the others from the other hand

00:23:11,510 --> 00:23:18,710
we have a great combined which is jungle

00:23:16,490 --> 00:23:21,080
renders that framework for for ranking

00:23:18,710 --> 00:23:26,480
jungle apps and there is currently no

00:23:21,080 --> 00:23:29,810
competition for for this the flake on is

00:23:26,480 --> 00:23:33,460
still best choice for for micro-services

00:23:29,810 --> 00:23:37,480
I didn't find any other

00:23:33,460 --> 00:23:42,580
and any other focused on on the on the

00:23:37,480 --> 00:23:47,200
performance and things towards mention

00:23:42,580 --> 00:23:49,779
is that live library just supports you

00:23:47,200 --> 00:23:51,909
with writing crystal AP ice but big

00:23:49,779 --> 00:23:54,309
framers create a tea eyes for you

00:23:51,909 --> 00:23:56,710
and this is this is this is the

00:23:54,309 --> 00:24:02,610
difference between that the Frog

00:23:56,710 --> 00:24:05,710
frameworks and and and and libraries and

00:24:02,610 --> 00:24:09,490
currently I can say that that that the

00:24:05,710 --> 00:24:14,070
framework is only the DRF from from from

00:24:09,490 --> 00:24:14,070
those lists so thank you

00:24:19,700 --> 00:24:26,030
so if you have any questions or or just

00:24:22,570 --> 00:24:29,360
just you want to share the like

00:24:26,030 --> 00:24:33,290
libraries that that you know and I meet

00:24:29,360 --> 00:24:34,790
two three yeah if you have a question

00:24:33,290 --> 00:24:37,540
please raise your hand we have time for

00:24:34,790 --> 00:24:37,540
a couple of them

00:24:45,910 --> 00:24:53,390
ume yeah Thank you very

00:24:49,040 --> 00:24:55,510
just a quick question have you I was

00:24:53,390 --> 00:24:56,660
wondering why you haven't considered

00:24:55,510 --> 00:24:58,850
tyramine

00:24:56,660 --> 00:25:00,950
or pyramid framework and your

00:24:58,850 --> 00:25:05,210
presentation maybe there is a good

00:25:00,950 --> 00:25:07,400
reason for it but what's just a small

00:25:05,210 --> 00:25:12,950
airing why as far as I know the pyro me

00:25:07,400 --> 00:25:17,900
I think that there is okay so it's more

00:25:12,950 --> 00:25:20,330
the web framework rather than rather

00:25:17,900 --> 00:25:23,810
than that the framework or the library

00:25:20,330 --> 00:25:32,060
focused on on building the restful api

00:25:23,810 --> 00:25:38,750
so that's why I skip it but yeah so does

00:25:32,060 --> 00:25:41,540
it satisfy if there is one more great

00:25:38,750 --> 00:25:47,620
framework it's called last crest plus

00:25:41,540 --> 00:25:51,410
it's written on top of slot so the most

00:25:47,620 --> 00:25:54,310
tasty fish of it is model specification

00:25:51,410 --> 00:25:59,780
and swaggered documentation generation

00:25:54,310 --> 00:26:02,960
junga rest framework has junga rest

00:25:59,780 --> 00:26:05,720
wager but it doesn't handle models

00:26:02,960 --> 00:26:09,740
generation in swagger specification and

00:26:05,720 --> 00:26:13,030
the last rest was does it okay and I

00:26:09,740 --> 00:26:15,190
consider using it in real project and

00:26:13,030 --> 00:26:18,520
it's really great

00:26:15,190 --> 00:26:18,520
okay thanks

00:26:29,560 --> 00:26:34,860
finish another somewhere that one must

00:26:32,320 --> 00:26:34,860
waste in this

00:26:38,440 --> 00:26:46,570
I so like one thing one more premium

00:26:43,720 --> 00:26:48,880
that we used is not that restful one but

00:26:46,570 --> 00:26:51,760
we use a lot of cherry pie because I

00:26:48,880 --> 00:26:54,070
think the most lightweight web framework

00:26:51,760 --> 00:26:56,950
that's available and it works pretty

00:26:54,070 --> 00:26:59,050
fine with the rest api but that was who

00:26:56,950 --> 00:27:00,210
what I want to mention and I have a

00:26:59,050 --> 00:27:03,400
question because

00:27:00,210 --> 00:27:07,930
those frameworks they have pretty useful

00:27:03,400 --> 00:27:10,870
tools I call RAM or routing or other

00:27:07,930 --> 00:27:14,320
stuff but I think that the really

00:27:10,870 --> 00:27:18,100
important things when designing retro

00:27:14,320 --> 00:27:20,890
IPI is the restfulness of them so the

00:27:18,100 --> 00:27:23,260
question is to use swagger or or any

00:27:20,890 --> 00:27:26,170
other tools for keeping the restful api

00:27:23,260 --> 00:27:30,190
being the restful or what's your

00:27:26,170 --> 00:27:34,530
experience in that yeah so for for micro

00:27:30,190 --> 00:27:39,090
services we used the swagger as you said

00:27:34,530 --> 00:27:41,830
but for example in the way more

00:27:39,090 --> 00:27:47,800
monolithic service service based on

00:27:41,830 --> 00:27:53,980
jungle the drug label API were fine for

00:27:47,800 --> 00:28:04,660
us so so yeah that internal in in

00:27:53,980 --> 00:28:08,340
general does it and was the name of this

00:28:04,660 --> 00:28:15,790
this framework that that we started with

00:28:08,340 --> 00:28:19,619
cherry pie okay thanks thank you

00:28:15,790 --> 00:28:19,619

YouTube URL: https://www.youtube.com/watch?v=HhKSgRvfF20


