Title: Patrick Arminio - Django and Graphql
Publication date: 2017-09-17
Playlist: EuroPython 2017
Description: 
	"Django and Graphql
[EuroPython 2017 - Talk - 2017-07-11 - Anfiteatro 1]
[Rimini, Italy]

The web is constantly evolving, that is even more true with the frontend world. You don’t have anymore the traditional webapp, in fact you now have two apps, backend and frontend. But how do they communicate? Traditionally we have always created REST APIs, but now, there’s a new player. GraphQL!

License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2017.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:04,140 --> 00:00:10,139
hi everyone welcome to my talk

00:00:07,170 --> 00:00:13,049
my my I'm Patrick and you can find me

00:00:10,139 --> 00:00:17,010
online that with Patrick 91 almost

00:00:13,049 --> 00:00:18,510
everywhere and I worked at web pageantry

00:00:17,010 --> 00:00:21,920
which is called sync studios we do

00:00:18,510 --> 00:00:25,440
website for clients and also we have

00:00:21,920 --> 00:00:27,090
internet projects we email use jungle

00:00:25,440 --> 00:00:30,150
well it really depends on what we are

00:00:27,090 --> 00:00:33,390
building so we change technologies biota

00:00:30,150 --> 00:00:35,850
but yeah we try to use new technology as

00:00:33,390 --> 00:00:38,579
soon as possible because it it's good to

00:00:35,850 --> 00:00:40,290
keep up to speed with the new stuff

00:00:38,579 --> 00:00:44,460
that's going on on the web especially on

00:00:40,290 --> 00:00:46,020
the front end so the modern web as what

00:00:44,460 --> 00:00:47,880
default developers we have seen the

00:00:46,020 --> 00:00:50,250
evolution of the web so from static

00:00:47,880 --> 00:00:52,140
website to website with small

00:00:50,250 --> 00:00:54,989
interaction to website completely

00:00:52,140 --> 00:00:58,140
interactive and one of the best practice

00:00:54,989 --> 00:00:59,790
is to use a REST API for the

00:00:58,140 --> 00:01:05,189
communication between the client and the

00:00:59,790 --> 00:01:07,560
server and but yet REST API are good but

00:01:05,189 --> 00:01:09,150
sometimes you need something that that's

00:01:07,560 --> 00:01:12,180
better than it because there are some

00:01:09,150 --> 00:01:14,729
issues one of the most combination is

00:01:12,180 --> 00:01:16,500
too many codes so for example imagine

00:01:14,729 --> 00:01:19,950
that you have an API that gets the user

00:01:16,500 --> 00:01:21,990
in an ID you get something like this

00:01:19,950 --> 00:01:24,060
which is fine for example if you only

00:01:21,990 --> 00:01:26,040
need to see to show the user name but if

00:01:24,060 --> 00:01:28,350
you need for example the defense names

00:01:26,040 --> 00:01:31,020
you need to do a call for followed all

00:01:28,350 --> 00:01:33,270
of the user and this is as you can

00:01:31,020 --> 00:01:34,799
imagine not good especially for the for

00:01:33,270 --> 00:01:38,400
the user experience of your application

00:01:34,799 --> 00:01:40,320
website so one solution is to create a

00:01:38,400 --> 00:01:42,659
new endpoint which is user with friends

00:01:40,320 --> 00:01:46,680
which we return the user with the

00:01:42,659 --> 00:01:48,570
friends and so on but then you need also

00:01:46,680 --> 00:01:52,920
the avatar for the user then you get

00:01:48,570 --> 00:01:54,479
another endpoint but in another page you

00:01:52,920 --> 00:01:56,340
just need the username and need the

00:01:54,479 --> 00:01:58,920
image in the avatar so you fit another

00:01:56,340 --> 00:02:02,340
one and so on and so forth

00:01:58,920 --> 00:02:04,200
and then this is only one case but

00:02:02,340 --> 00:02:07,170
imagine if you have many endpoints it's

00:02:04,200 --> 00:02:09,209
going to get really bad so on another

00:02:07,170 --> 00:02:13,530
solution like a workout that you can do

00:02:09,209 --> 00:02:16,350
is to put on everything that you can get

00:02:13,530 --> 00:02:18,900
from from the resource for a competitor

00:02:16,350 --> 00:02:21,240
the user with the friends and the avatar

00:02:18,900 --> 00:02:24,600
but then you are sending too much data

00:02:21,240 --> 00:02:25,860
you're wasting bytes and it's not again

00:02:24,600 --> 00:02:29,100
it's not a good experience for the end

00:02:25,860 --> 00:02:32,670
user because you are wasting their money

00:02:29,100 --> 00:02:34,770
actually especially in foreign country

00:02:32,670 --> 00:02:38,700
so it's and too much data in this big

00:02:34,770 --> 00:02:40,380
block one solution is capture graphical

00:02:38,700 --> 00:02:43,860
is a query language created by Facebook

00:02:40,380 --> 00:02:46,350
II around 2012 but as only made

00:02:43,860 --> 00:02:50,160
open-source like two years ago around

00:02:46,350 --> 00:02:51,450
2015 and they say in the specification

00:02:50,160 --> 00:02:53,730
the graph QL is designed to build

00:02:51,450 --> 00:02:55,890
clarification by providing an intuitive

00:02:53,730 --> 00:02:59,150
flexible syntax and system and so on

00:02:55,890 --> 00:03:01,440
this is really complicated for me and I

00:02:59,150 --> 00:03:03,600
never read the old document the

00:03:01,440 --> 00:03:05,250
specification end because I always saw

00:03:03,600 --> 00:03:07,710
the example which is something like this

00:03:05,250 --> 00:03:09,930
this is graph QL SQL is a query language

00:03:07,710 --> 00:03:12,390
where you can specify from the client

00:03:09,930 --> 00:03:15,960
what you actually need for example in

00:03:12,390 --> 00:03:19,050
this case you are asking to get the

00:03:15,960 --> 00:03:20,970
username email and the friend's name and

00:03:19,050 --> 00:03:24,630
you get when you do this call you get

00:03:20,970 --> 00:03:27,060
something like this so you only get what

00:03:24,630 --> 00:03:30,080
you actually need and it's really it's

00:03:27,060 --> 00:03:33,690
really easy to use but one of the most

00:03:30,080 --> 00:03:36,150
powerful features and yes also one of

00:03:33,690 --> 00:03:37,920
the most liked feature is types so

00:03:36,150 --> 00:03:39,690
everything in your college type so

00:03:37,920 --> 00:03:42,480
basically your schema is going to have

00:03:39,690 --> 00:03:45,690
types for example for epu screen you

00:03:42,480 --> 00:03:48,240
have a user type you just got a name and

00:03:45,690 --> 00:03:50,130
email there are strings and are always

00:03:48,240 --> 00:03:52,320
there as fancy from the exclamation mark

00:03:50,130 --> 00:03:54,240
and then you have a list of friends and

00:03:52,320 --> 00:03:57,330
friend is another type which is going to

00:03:54,240 --> 00:04:00,060
have probably name an email as well then

00:03:57,330 --> 00:04:03,920
another feature is introspection so

00:04:00,060 --> 00:04:06,570
basically every Java endpoint is gonna

00:04:03,920 --> 00:04:08,670
expose some metadata so you can get all

00:04:06,570 --> 00:04:10,590
the types for example in this case you

00:04:08,670 --> 00:04:12,720
can use graphical which is an IDE in

00:04:10,590 --> 00:04:16,530
browser so it gives you a complete on

00:04:12,720 --> 00:04:18,330
your API and the arguments and the

00:04:16,530 --> 00:04:20,220
fields so for example is getting the

00:04:18,330 --> 00:04:23,250
product related to the name description

00:04:20,220 --> 00:04:25,940
and is getting the picture with sized

00:04:23,250 --> 00:04:29,210
500 and so on

00:04:25,940 --> 00:04:31,310
so right now I've shown you degree which

00:04:29,210 --> 00:04:34,310
is basically the way to get data for

00:04:31,310 --> 00:04:37,670
week after L but also you need to change

00:04:34,310 --> 00:04:41,090
the backend data for example like me

00:04:37,670 --> 00:04:44,540
with REST API to do pasta bread part

00:04:41,090 --> 00:04:47,000
requests or deletes so we have 2l you

00:04:44,540 --> 00:04:51,430
always use one single end bow and the

00:04:47,000 --> 00:04:54,680
one single HTTP where would easily post

00:04:51,430 --> 00:04:56,900
to change data use mutations which is a

00:04:54,680 --> 00:04:58,490
way to mutate it on the server and then

00:04:56,900 --> 00:05:00,680
you also have another operation type

00:04:58,490 --> 00:05:04,370
which is subscription which is similar

00:05:00,680 --> 00:05:06,890
to the degree where you subscribe to the

00:05:04,370 --> 00:05:11,000
update street which is using you usually

00:05:06,890 --> 00:05:13,220
use WebSockets so a quiz done it's like

00:05:11,000 --> 00:05:16,310
this as I show you have some fields and

00:05:13,220 --> 00:05:17,690
also you can never saw some arguments so

00:05:16,310 --> 00:05:20,150
for example in this case is going to get

00:05:17,690 --> 00:05:24,110
a human with ID 1000 to name the

00:05:20,150 --> 00:05:27,380
it--with unit of put but it is only a

00:05:24,110 --> 00:05:30,230
short hand for the queen the actual the

00:05:27,380 --> 00:05:32,630
extended version of the operation the

00:05:30,230 --> 00:05:35,060
the variation is this one so basically

00:05:32,630 --> 00:05:37,030
specify your patient type as I said you

00:05:35,060 --> 00:05:39,040
can have Queen mutation and a

00:05:37,030 --> 00:05:41,270
subscription and maybe in the future

00:05:39,040 --> 00:05:43,910
can-can they can extend the

00:05:41,270 --> 00:05:45,680
specification then you have an

00:05:43,910 --> 00:05:47,780
oppression name which is basically used

00:05:45,680 --> 00:05:50,570
mainly for debugging so you get logs on

00:05:47,780 --> 00:05:52,790
the server without and yes also have

00:05:50,570 --> 00:05:54,200
some variable definitions which include

00:05:52,790 --> 00:05:56,270
the type that you define and then you

00:05:54,200 --> 00:05:58,280
have the selection set when you run this

00:05:56,270 --> 00:05:58,550
query you get the data that you asked

00:05:58,280 --> 00:06:01,310
for

00:05:58,550 --> 00:06:03,260
well yeah this is a Python conference so

00:06:01,310 --> 00:06:05,960
you want to use this with Python and

00:06:03,260 --> 00:06:07,790
clear this with Python you just use

00:06:05,960 --> 00:06:12,620
graph in your field which is a library

00:06:07,790 --> 00:06:14,270
that implements the job to a server so

00:06:12,620 --> 00:06:17,450
you install it and then you can just

00:06:14,270 --> 00:06:19,610
import like this import the library you

00:06:17,450 --> 00:06:21,860
create a class of queen in this case I'm

00:06:19,610 --> 00:06:24,410
creating a class we just got only one

00:06:21,860 --> 00:06:27,320
field which is a look and then for each

00:06:24,410 --> 00:06:29,390
field you create our function which is

00:06:27,320 --> 00:06:31,190
called resolve underscore the field and

00:06:29,390 --> 00:06:34,130
you can return what the field is going

00:06:31,190 --> 00:06:36,710
to return and also you can use the

00:06:34,130 --> 00:06:38,450
arguments and do some magic stuff and

00:06:36,710 --> 00:06:38,810
then you can fit the schema from the

00:06:38,450 --> 00:06:40,880
queen

00:06:38,810 --> 00:06:43,370
and you can you can exceed your degree

00:06:40,880 --> 00:06:46,190
but yeah this don't get smelly about

00:06:43,370 --> 00:06:47,900
jungle and there is an extension to get

00:06:46,190 --> 00:06:49,760
your fiend which is covering jungle

00:06:47,900 --> 00:06:54,139
which is similar to graffiti but it's

00:06:49,760 --> 00:06:57,080
got some nice features for jungle very

00:06:54,139 --> 00:07:00,770
easy to to use it you can stall like

00:06:57,080 --> 00:07:03,650
this and then you have to extend this

00:07:00,770 --> 00:07:05,840
color ups with graphing jungle and then

00:07:03,650 --> 00:07:09,350
we have to create a main schema which is

00:07:05,840 --> 00:07:11,900
needs to be specifying the settings my

00:07:09,350 --> 00:07:14,030
convention is to use a folder called API

00:07:11,900 --> 00:07:15,979
and the schema file and inside this

00:07:14,030 --> 00:07:17,240
limit value will be the schema which is

00:07:15,979 --> 00:07:19,760
being imported from all the other

00:07:17,240 --> 00:07:24,380
applications then we have to add the

00:07:19,760 --> 00:07:26,510
graphical view in this case I'm adding

00:07:24,380 --> 00:07:29,380
the graphical view under graph QL the

00:07:26,510 --> 00:07:33,020
structural and also I'm nibbling

00:07:29,380 --> 00:07:36,770
graphical so I can debug the API without

00:07:33,020 --> 00:07:38,990
doing any code and then you like this

00:07:36,770 --> 00:07:40,820
you if you have an ingredient model you

00:07:38,990 --> 00:07:43,070
can just import this and you can create

00:07:40,820 --> 00:07:44,750
an ingredient type with the jungle

00:07:43,070 --> 00:07:47,090
object type that's provided by graphene

00:07:44,750 --> 00:07:48,650
jungle and it's going to create all the

00:07:47,090 --> 00:07:51,110
fields for you so you don't have to do

00:07:48,650 --> 00:07:53,479
any of some functions you can sit do it

00:07:51,110 --> 00:07:55,100
if you need to do some custom stuff but

00:07:53,479 --> 00:07:56,720
it's done for you if you don't need to

00:07:55,100 --> 00:08:02,690
change anything then you can create a

00:07:56,720 --> 00:08:05,570
query where you have to specify the the

00:08:02,690 --> 00:08:07,639
equation and this is something a bit

00:08:05,570 --> 00:08:10,400
tricky because since you can do nested

00:08:07,639 --> 00:08:12,320
fields with caffeine you need to be

00:08:10,400 --> 00:08:17,330
careful that you are not doing and +1

00:08:12,320 --> 00:08:20,090
quiz because it's not it's going to be

00:08:17,330 --> 00:08:22,039
but on the performance side so you can

00:08:20,090 --> 00:08:24,289
you can check the fees are needed and

00:08:22,039 --> 00:08:26,600
you can do select related or professor

00:08:24,289 --> 00:08:31,190
layton if needed and then you get a

00:08:26,600 --> 00:08:33,950
schema from the way so one of the

00:08:31,190 --> 00:08:38,209
problem that we had a work is to add

00:08:33,950 --> 00:08:40,310
authentication on the API and basically

00:08:38,209 --> 00:08:42,650
since we are using jungle it's really

00:08:40,310 --> 00:08:44,420
easy to do authentication gov't well in

00:08:42,650 --> 00:08:46,700
this case is just a jungle your normal

00:08:44,420 --> 00:08:49,520
view so you can use any method that you

00:08:46,700 --> 00:08:53,910
like for example we

00:08:49,520 --> 00:08:55,620
we were using GWT tokens but you can

00:08:53,910 --> 00:08:57,090
also use sessions ogron's if you don't

00:08:55,620 --> 00:08:59,400
have a single web page application if

00:08:57,090 --> 00:09:02,220
you're only using traffic to add to an

00:08:59,400 --> 00:09:06,960
arm some part of the website and yeah

00:09:02,220 --> 00:09:08,970
you can use any any jungle stuff then

00:09:06,960 --> 00:09:12,330
you have the permission this is a

00:09:08,970 --> 00:09:16,980
different paradigm on doing Queen so for

00:09:12,330 --> 00:09:18,930
the permission you basically you don't

00:09:16,980 --> 00:09:22,680
really have missions models but you have

00:09:18,930 --> 00:09:24,270
permissions on the actual fields and

00:09:22,680 --> 00:09:26,040
which is I think it's really good

00:09:24,270 --> 00:09:28,020
because you can say for example if I'm

00:09:26,040 --> 00:09:31,170
not as a super user I can see the user

00:09:28,020 --> 00:09:36,360
email and define log as understand the

00:09:31,170 --> 00:09:39,060
user I can only see the user name but if

00:09:36,360 --> 00:09:41,730
you for example need to have integration

00:09:39,060 --> 00:09:44,160
with rest framework for example you

00:09:41,730 --> 00:09:48,480
already have an API this is something

00:09:44,160 --> 00:09:51,660
that is not working right now and I made

00:09:48,480 --> 00:09:53,550
a poor record that you can have a look

00:09:51,660 --> 00:09:56,880
at it if you want and you can also use

00:09:53,550 --> 00:09:59,100
I'm using in on one of the projects I

00:09:56,880 --> 00:10:01,020
work because I need mainly some use

00:09:59,100 --> 00:10:05,280
cases to test it and see if there is any

00:10:01,020 --> 00:10:07,020
bugs basically what I've done is to do

00:10:05,280 --> 00:10:09,210
you can you can use a graphing jungle

00:10:07,020 --> 00:10:12,000
with our jungle area materializer so you

00:10:09,210 --> 00:10:16,250
don't have to specify this utilizer

00:10:12,000 --> 00:10:19,680
again for especially for the mutations

00:10:16,250 --> 00:10:24,800
then I would like to touch on a bit of

00:10:19,680 --> 00:10:28,410
the security just since you can do

00:10:24,800 --> 00:10:31,050
nested fields some malicious user can do

00:10:28,410 --> 00:10:33,240
like big quiz so for example they can

00:10:31,050 --> 00:10:35,550
net they can add like 100 level or

00:10:33,240 --> 00:10:38,250
nesting so one of the solutions I think

00:10:35,550 --> 00:10:40,620
it's been adopted by github which is

00:10:38,250 --> 00:10:44,130
using actually in production and also

00:10:40,620 --> 00:10:46,680
its public is to just limit the number

00:10:44,130 --> 00:10:48,240
of nesting that you can have and for

00:10:46,680 --> 00:10:51,210
example if the nesting level is more

00:10:48,240 --> 00:10:53,250
than 10 they just up the query just it's

00:10:51,210 --> 00:10:57,510
probably something that a bit strange

00:10:53,250 --> 00:11:00,180
and also you have long piece because

00:10:57,510 --> 00:11:02,100
since you can post a specify arguments

00:11:00,180 --> 00:11:02,720
you maybe you can end up with a grave

00:11:02,100 --> 00:11:06,410
that

00:11:02,720 --> 00:11:08,150
too much time and I think Facebook is

00:11:06,410 --> 00:11:09,920
doing something like this basically they

00:11:08,150 --> 00:11:11,360
have a timer than degree one degree is

00:11:09,920 --> 00:11:12,980
going to take more than one second they

00:11:11,360 --> 00:11:16,790
just stopped degree and there is no

00:11:12,980 --> 00:11:20,830
nothing which i think is what we should

00:11:16,790 --> 00:11:20,830
do because one second is really too much

00:11:25,540 --> 00:11:34,820
so this is the back end part for the

00:11:31,010 --> 00:11:37,400
front end so that this is you can still

00:11:34,820 --> 00:11:40,970
use any client that you like to do post

00:11:37,400 --> 00:11:43,610
request to the web server but there are

00:11:40,970 --> 00:11:48,170
two main libraries that you can use for

00:11:43,610 --> 00:11:51,580
doing queries graph calculus one is to

00:11:48,170 --> 00:11:54,050
relate relay which is on your right and

00:11:51,580 --> 00:11:57,980
basically it's a library developed by

00:11:54,050 --> 00:11:59,720
Facebook it's it's only for a year so if

00:11:57,980 --> 00:12:01,850
use react this is probably one of

00:11:59,720 --> 00:12:03,440
probably the best solution because it

00:12:01,850 --> 00:12:07,280
supported by face but the only problem

00:12:03,440 --> 00:12:11,330
is that developments that is that led by

00:12:07,280 --> 00:12:15,110
Facebook so they made they to stuff only

00:12:11,330 --> 00:12:18,140
if they like but it's really good and

00:12:15,110 --> 00:12:22,130
and the other solution is a folder which

00:12:18,140 --> 00:12:24,440
is I think it's community based and they

00:12:22,130 --> 00:12:25,760
see they had clients for for vanilla

00:12:24,440 --> 00:12:27,350
JavaScript if you don't use any

00:12:25,760 --> 00:12:31,910
framework they all said clients for you

00:12:27,350 --> 00:12:38,480
jes react single so angular and some

00:12:31,910 --> 00:12:42,050
other one I I was really fast on this

00:12:38,480 --> 00:12:44,030
tour sorry so going to add some bit on

00:12:42,050 --> 00:12:48,400
the content box I don't have side but

00:12:44,030 --> 00:12:50,540
basically with those tool you can do

00:12:48,400 --> 00:12:52,880
there are some other features I haven't

00:12:50,540 --> 00:12:54,770
told about graphical but some of those

00:12:52,880 --> 00:12:58,640
are for example fragments so you can

00:12:54,770 --> 00:13:02,030
have like some components that depends

00:12:58,640 --> 00:13:04,430
on other data so you can basically you

00:13:02,030 --> 00:13:05,990
can only do one quick including the

00:13:04,430 --> 00:13:08,270
components and then you get everything

00:13:05,990 --> 00:13:10,940
we just want we example if you have an

00:13:08,270 --> 00:13:14,060
about page and then you have for example

00:13:10,940 --> 00:13:15,750
the user name and in one place and

00:13:14,060 --> 00:13:17,400
example you have the use of

00:13:15,750 --> 00:13:20,610
and in another page you can combine the

00:13:17,400 --> 00:13:26,490
way from those components and it's going

00:13:20,610 --> 00:13:29,580
to do only one Queen and also one of the

00:13:26,490 --> 00:13:32,430
issue is caching since the you since you

00:13:29,580 --> 00:13:35,270
are doing post requests you cannot cast

00:13:32,430 --> 00:13:39,450
you cannot use something like varnish or

00:13:35,270 --> 00:13:41,400
pure jungle caching because you are

00:13:39,450 --> 00:13:43,110
doing pasta pressed so one of the

00:13:41,400 --> 00:13:46,530
solution that's being implemented by

00:13:43,110 --> 00:13:49,650
both Facebook will relay and Apolo is to

00:13:46,530 --> 00:13:51,030
use client-side caching so of all is

00:13:49,650 --> 00:13:51,600
really good at this basically when you

00:13:51,030 --> 00:13:53,790
do a query

00:13:51,600 --> 00:13:55,410
it's going to cast the results asked for

00:13:53,790 --> 00:13:56,670
you so if you do the deck way again it's

00:13:55,410 --> 00:14:00,030
not going to hold the server it's kinda

00:13:56,670 --> 00:14:05,040
just return the data and other solutions

00:14:00,030 --> 00:14:06,540
could be to use to analyze the the

00:14:05,040 --> 00:14:09,270
decree that you're doing and two

00:14:06,540 --> 00:14:12,540
questions on those ones but it's a bit

00:14:09,270 --> 00:14:17,130
harder than the just pure recipe eyes

00:14:12,540 --> 00:14:19,170
because said you're just doing post

00:14:17,130 --> 00:14:23,190
calls and probably this is gone input

00:14:19,170 --> 00:14:28,200
because Jeff GL is quite new but like a

00:14:23,190 --> 00:14:31,610
lot a lot of companies are using in

00:14:28,200 --> 00:14:35,790
production like Facebook of course

00:14:31,610 --> 00:14:38,370
Shopify and it about the main ones and

00:14:35,790 --> 00:14:40,110
they're really pushing it to the limit

00:14:38,370 --> 00:14:44,370
and they're also contributing to the

00:14:40,110 --> 00:14:46,380
spec which is very good so yeah that's

00:14:44,370 --> 00:14:50,540
my talk if any any questions please feel

00:14:46,380 --> 00:15:01,280
free to do it and yeah thank you

00:14:50,540 --> 00:15:01,280
[Applause]

00:15:10,560 --> 00:15:15,319
hey thank you for the great dog so my

00:15:13,410 --> 00:15:17,639
first question is how you deal with

00:15:15,319 --> 00:15:20,160
imagination using clunker

00:15:17,639 --> 00:15:21,990
sorry I do pagination how do I shall we

00:15:20,160 --> 00:15:25,220
open it how do we deal with pagination

00:15:21,990 --> 00:15:27,629
oh yeah there is one of the ways using

00:15:25,220 --> 00:15:30,509
basically is come up with that sort of

00:15:27,629 --> 00:15:32,819
pagination system so as I said you can

00:15:30,509 --> 00:15:37,410
specify the the arguments in the clean

00:15:32,819 --> 00:15:38,939
let me see if I can find it yeah so in

00:15:37,410 --> 00:15:40,889
this case for example I'm specifying the

00:15:38,939 --> 00:15:44,550
ID but you can also specify for example

00:15:40,889 --> 00:15:46,949
the start on the end and I think yeah

00:15:44,550 --> 00:15:49,079
relay is doing something if it's using

00:15:46,949 --> 00:15:51,509
the like edges so basically instead of

00:15:49,079 --> 00:15:52,949
returning the the list of the user in

00:15:51,509 --> 00:15:56,490
this case you will return a list of it

00:15:52,949 --> 00:15:59,370
so you can get the IDS and the yet

00:15:56,490 --> 00:16:00,839
starts at the end the end ID maybe if

00:15:59,370 --> 00:16:02,790
you just to me I can show you some

00:16:00,839 --> 00:16:03,899
example because without for this part

00:16:02,790 --> 00:16:06,689
too

00:16:03,899 --> 00:16:09,540
thank you and my second question is

00:16:06,689 --> 00:16:12,149
while using Django rest framework or

00:16:09,540 --> 00:16:14,699
some kind of a restful approach you can

00:16:12,149 --> 00:16:17,850
really easily specify which endpoint is

00:16:14,699 --> 00:16:18,600
public and which endpoint is private can

00:16:17,850 --> 00:16:20,430
you do this

00:16:18,600 --> 00:16:22,379
we are rough curl because you have only

00:16:20,430 --> 00:16:24,000
one endpoint and can you specify that

00:16:22,379 --> 00:16:27,660
these data is public and the data is not

00:16:24,000 --> 00:16:29,279
probably well the answer is yes but I

00:16:27,660 --> 00:16:33,540
don't know how to do it because I didn't

00:16:29,279 --> 00:16:36,389
have to do it but I was watching a

00:16:33,540 --> 00:16:39,569
circle graph joined by github basically

00:16:36,389 --> 00:16:43,379
dead doing something like this they have

00:16:39,569 --> 00:16:45,809
two ways to do this first one is since

00:16:43,379 --> 00:16:48,449
they have the DfE is public and they can

00:16:45,809 --> 00:16:50,519
also for example you can with your

00:16:48,449 --> 00:16:50,850
application you can log as a specific

00:16:50,519 --> 00:16:54,240
user

00:16:50,850 --> 00:16:56,220
they have permissions they check before

00:16:54,240 --> 00:16:58,500
even doing the pre detect the fields are

00:16:56,220 --> 00:17:01,319
you asking for and the check if this we

00:16:58,500 --> 00:17:04,350
feel is can be accessed by the current

00:17:01,319 --> 00:17:07,169
user then they run the query whether H

00:17:04,350 --> 00:17:09,870
or one error and the other one is the

00:17:07,169 --> 00:17:12,569
schema the schemas public usually so

00:17:09,870 --> 00:17:14,130
basically when you expose like some

00:17:12,569 --> 00:17:17,640
fields is going to end up on the Queen

00:17:14,130 --> 00:17:20,549
on the schema schema definition and have

00:17:17,640 --> 00:17:22,799
some metadata on the some fields

00:17:20,549 --> 00:17:24,929
basically they say or discreet that

00:17:22,799 --> 00:17:28,830
these field is only for

00:17:24,929 --> 00:17:31,230
so when their love does it up they so

00:17:28,830 --> 00:17:33,510
they can see that feel but when I'm

00:17:31,230 --> 00:17:37,679
using as a public user to them it's not

00:17:33,510 --> 00:17:43,830
shown all right thank you any more

00:17:37,679 --> 00:17:46,350
questions oh thank you

00:17:43,830 --> 00:17:49,529
you said that a lot of companies use it

00:17:46,350 --> 00:17:52,890
graphical already for Django graphene

00:17:49,529 --> 00:17:54,510
did you take any open source project

00:17:52,890 --> 00:17:56,639
that's reference to see their problems

00:17:54,510 --> 00:17:58,500
how they handled it or would you

00:17:56,639 --> 00:18:02,340
recommend any open source project to

00:17:58,500 --> 00:18:06,240
look at at certain just starting with

00:18:02,340 --> 00:18:08,549
graphene and all this stack would you

00:18:06,240 --> 00:18:12,659
recommend some open source project as a

00:18:08,549 --> 00:18:15,450
reference so I think there is there was

00:18:12,659 --> 00:18:17,190
a Star Wars API which was done in Python

00:18:15,450 --> 00:18:20,370
and Django same I think and there is the

00:18:17,190 --> 00:18:25,200
same for tough gel so you can just

00:18:20,370 --> 00:18:27,870
Google 4sw API or SWT a graph QL or Star

00:18:25,200 --> 00:18:30,269
Wars API graphical that's one this

00:18:27,870 --> 00:18:34,139
alright we had one more question with

00:18:30,269 --> 00:18:36,539
you you mentioned mutations do you have

00:18:34,139 --> 00:18:38,730
any example or could you talk about how

00:18:36,539 --> 00:18:42,330
these mutations are done through the

00:18:38,730 --> 00:18:44,779
query yeah I have an example I just came

00:18:42,330 --> 00:18:44,779
a second

00:18:53,800 --> 00:18:59,910
so basically our mutation is pretty

00:18:56,020 --> 00:18:59,910
similar to a query

00:19:10,340 --> 00:19:16,360
I have to remember well done if it's

00:19:13,370 --> 00:19:16,360
probably not psychic

00:19:24,110 --> 00:19:32,220
okay that's impatient this crazy specify

00:19:27,210 --> 00:19:34,650
the depression name than the name of the

00:19:32,220 --> 00:19:37,620
mutation which is is on server-side mini

00:19:34,650 --> 00:19:39,030
and then you specify some input in this

00:19:37,620 --> 00:19:41,910
case I have an input which is called

00:19:39,030 --> 00:19:43,950
input and then this is the type as I

00:19:41,910 --> 00:19:45,960
said I'm using JSON web token one of the

00:19:43,950 --> 00:19:51,030
reason why I did the practice for the

00:19:45,960 --> 00:19:53,790
invitations for for graphene jungle is

00:19:51,030 --> 00:19:56,210
because I wanted to use this serialize

00:19:53,790 --> 00:19:58,710
err which does everything for me and

00:19:56,210 --> 00:20:00,420
yeah as I said the mutation is similar

00:19:58,710 --> 00:20:02,310
to a query so you can yeah you have to

00:20:00,420 --> 00:20:05,130
pass the inputs of course then you can

00:20:02,310 --> 00:20:09,930
get data you can specify the data a1

00:20:05,130 --> 00:20:20,910
black okay do you want to see the jungle

00:20:09,930 --> 00:20:23,700
part of this yeah it is actually

00:20:20,910 --> 00:20:26,310
it's similar to the when use Django

00:20:23,700 --> 00:20:28,830
object type from caffeine jungle so use

00:20:26,310 --> 00:20:30,630
very similar mutation they you specify

00:20:28,830 --> 00:20:35,250
the steriliser plus then it's going to

00:20:30,630 --> 00:20:37,910
create the new mutation for you and yeah

00:20:35,250 --> 00:20:42,960
I'm just adding a token field just to

00:20:37,910 --> 00:20:45,470
just because I need it all right any

00:20:42,960 --> 00:20:45,470
more questions

00:20:45,980 --> 00:20:49,390
all right then give particular path

00:20:48,720 --> 00:20:56,099
again

00:20:49,390 --> 00:20:56,099

YouTube URL: https://www.youtube.com/watch?v=9y3zD1UxLZs


