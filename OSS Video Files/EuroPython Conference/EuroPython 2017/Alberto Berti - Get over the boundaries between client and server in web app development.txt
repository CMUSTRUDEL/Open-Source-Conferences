Title: Alberto Berti - Get over the boundaries between client and server in web app development
Publication date: 2017-09-17
Playlist: EuroPython 2017
Description: 
	"Get over the boundaries between client and server in web app development
[EuroPython 2017 - Talk - 2017-07-11 - Anfiteatro 2]
[Rimini, Italy]

The practice in the development of advanced web applications is to break it into two main areas where the effort on the server, with the typical WSGI environments, focuses on data access configuration whereas the application logic is delegated mostly to the client through the use of JavaScript frameworks.

The reason for this separation into two roles lies in the need to use JavaScript on the browser and the fact that the communication channel (HTTP) and the way in which the application state is handled on the server side is still that thought to serve full web pages.

In this talk I'll show a framework and an application where the line between the two worlds is blurred and where it is possible to think of the application in terms of unity, with the two components that cooperate equally and communicate without thinking in terms of URLs or HTTP verbs .

This is made possible by the asynchronous/reactive management of the processing from the database driver to the user interaction, the use of websocket for communication and the use of Python (optional) for the development of the client part.

Some technologies used are: PostgreSQL, the ""asyncpg"" driver, the ""aiohttp"" web server, Crossbar (http://crossbar.io) for the websocket comms, pkg ""metapensiero.sphinx.patchdb"" for schema upgrades, the package ""metapensiero.reactive"" and ""metapensiero.signal"" for the management of reactive event streams,the package ""Javascripthon"" for Py3 to ES6 JS transpiling.

License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2017.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:04,150 --> 00:00:13,259
hello so I am a better I am co-founder

00:00:08,650 --> 00:00:16,570
of a small company that offers

00:00:13,259 --> 00:00:21,579
development and system integration

00:00:16,570 --> 00:00:24,220
services and today I will present you a

00:00:21,579 --> 00:00:29,110
framework and an application that we

00:00:24,220 --> 00:00:32,250
built to bring back fun in to the

00:00:29,110 --> 00:00:37,420
development of web app web applications

00:00:32,250 --> 00:00:43,089
so what I mean with web application

00:00:37,420 --> 00:00:48,730
usually web application today means many

00:00:43,089 --> 00:00:54,999
things but for the purpose of this this

00:00:48,730 --> 00:00:58,289
talk I mean those applications that are

00:00:54,999 --> 00:01:02,969
usual usually developed today to replace

00:00:58,289 --> 00:01:08,910
a desktop application that used to

00:01:02,969 --> 00:01:14,430
assess and relational databases and show

00:01:08,910 --> 00:01:22,810
data to the user let the user filters

00:01:14,430 --> 00:01:28,120
query sort they usually show many data

00:01:22,810 --> 00:01:31,540
at once they usually offer advanced

00:01:28,120 --> 00:01:35,830
filtering sorting capabilities and so on

00:01:31,540 --> 00:01:39,450
and usually they had those application

00:01:35,830 --> 00:01:46,060
are used for data entry and so they show

00:01:39,450 --> 00:01:50,830
very complex forms and they show master

00:01:46,060 --> 00:01:56,430
data tables and so on I think that such

00:01:50,830 --> 00:02:05,020
application have a narrower a narrower

00:01:56,430 --> 00:02:08,830
user base than then public web web web

00:02:05,020 --> 00:02:12,099
page publishing and so on usually they

00:02:08,830 --> 00:02:15,269
are those application are called single

00:02:12,099 --> 00:02:15,269
page applications

00:02:16,310 --> 00:02:24,860
many times they are installed on premise

00:02:21,660 --> 00:02:29,280
or there

00:02:24,860 --> 00:02:33,870
we studied on cloud and then used inside

00:02:29,280 --> 00:02:39,450
an internet or so on so the the

00:02:33,870 --> 00:02:44,760
framework we developed is its goal is to

00:02:39,450 --> 00:02:48,870
serve those this kind of applications is

00:02:44,760 --> 00:02:53,630
not to serve 10,000 web pages to

00:02:48,870 --> 00:02:57,810
anonymous users usually the user of our

00:02:53,630 --> 00:03:02,220
application is always unknown users so

00:02:57,810 --> 00:03:05,940
it the first the first thing it does he

00:03:02,220 --> 00:03:16,830
does is to enter is a credentials and

00:03:05,940 --> 00:03:20,540
log into the system so to today how it's

00:03:16,830 --> 00:03:25,560
built an application using Python tools

00:03:20,540 --> 00:03:29,310
usually we start with developing the

00:03:25,560 --> 00:03:34,230
database structure and so on and then we

00:03:29,310 --> 00:03:40,860
pick our favorite server framework like

00:03:34,230 --> 00:03:41,720
Django pyramid the turbo gears flask and

00:03:40,860 --> 00:03:47,100
so on

00:03:41,720 --> 00:03:51,959
maybe we develop an object relational

00:03:47,100 --> 00:03:58,220
mapper on top of our database but it's

00:03:51,959 --> 00:04:05,420
not not always needed usually we expose

00:03:58,220 --> 00:04:08,190
those data using using rest services or

00:04:05,420 --> 00:04:14,630
get and post

00:04:08,190 --> 00:04:20,280
entry point and so on but but then

00:04:14,630 --> 00:04:23,580
because they are Web Apps and then we we

00:04:20,280 --> 00:04:28,500
choose we pick a JavaScript framework

00:04:23,580 --> 00:04:33,510
and we develop all the application level

00:04:28,500 --> 00:04:39,060
logic to with with JavaScript so all the

00:04:33,510 --> 00:04:42,180
user interaction all the the flow of the

00:04:39,060 --> 00:04:47,100
of the user inside application and so on

00:04:42,180 --> 00:04:52,740
is coded in JavaScript how many of you

00:04:47,100 --> 00:04:58,620
do that for example is it fun

00:04:52,740 --> 00:05:03,420
is he still fun so I don't think that if

00:04:58,620 --> 00:05:06,030
it's so fun and yes dealing with

00:05:03,420 --> 00:05:08,460
JavaScript is inevitable because there

00:05:06,030 --> 00:05:15,360
is nothing else on the on the on the

00:05:08,460 --> 00:05:19,850
browser and but stressful because it has

00:05:15,360 --> 00:05:24,840
many consequences many things that you

00:05:19,850 --> 00:05:30,030
maybe learn one time and then you you

00:05:24,840 --> 00:05:36,300
forget something you know about its base

00:05:30,030 --> 00:05:39,920
types not a number and so on and every

00:05:36,300 --> 00:05:44,390
time you you approach the development of

00:05:39,920 --> 00:05:49,110
JavaScript web application usually the

00:05:44,390 --> 00:05:52,380
Machine REO as those available to kids

00:05:49,110 --> 00:05:56,700
is changed because it changes with a

00:05:52,380 --> 00:06:00,630
very fast piece and usually the

00:05:56,700 --> 00:06:03,210
JavaScript community reinvent the wheel

00:06:00,630 --> 00:06:13,180
every time

00:06:03,210 --> 00:06:18,849
in a in a fancier more more quick way

00:06:13,180 --> 00:06:26,500
and so on but for us that we want to

00:06:18,849 --> 00:06:31,139
code in in Python it seems not so good

00:06:26,500 --> 00:06:32,740
to always learn a new JavaScript

00:06:31,139 --> 00:06:36,000
framework

00:06:32,740 --> 00:06:38,979
maybe the version 2 of the the

00:06:36,000 --> 00:06:42,900
JavaScript that we learn of some month

00:06:38,979 --> 00:06:49,990
ago that changed the language from

00:06:42,900 --> 00:06:52,590
JavaScript to typescript and so on and

00:06:49,990 --> 00:06:55,930
many times did the libraries of

00:06:52,590 --> 00:06:58,659
JavaScript libraries have comparative to

00:06:55,930 --> 00:07:02,110
those available in Python and to the

00:06:58,659 --> 00:07:12,159
standard library do have very poor

00:07:02,110 --> 00:07:14,409
quality we you end up installing tens of

00:07:12,159 --> 00:07:17,740
megabytes hundreds of megabytes of

00:07:14,409 --> 00:07:21,940
JavaScript code just to to let your

00:07:17,740 --> 00:07:24,099
toolkit work and so and sometimes you

00:07:21,940 --> 00:07:29,680
don't understand why you have to want to

00:07:24,099 --> 00:07:33,879
install out of all those things so many

00:07:29,680 --> 00:07:37,360
care of you can say that that is six is

00:07:33,879 --> 00:07:41,379
better because that classes promises

00:07:37,360 --> 00:07:46,300
iterator generators many some of these

00:07:41,379 --> 00:07:50,469
these features are come from Python and

00:07:46,300 --> 00:07:53,770
also they it has map and set and that

00:07:50,469 --> 00:07:56,650
are implemented natively that for the

00:07:53,770 --> 00:08:01,419
first time you can put not just the

00:07:56,650 --> 00:08:05,529
strings into dictionary keys but you can

00:08:01,419 --> 00:08:08,669
use every any kind of object object as

00:08:05,529 --> 00:08:15,039
key and this is a surely an advantage

00:08:08,669 --> 00:08:16,240
and but then for example when I learn

00:08:15,039 --> 00:08:21,310
about week my

00:08:16,240 --> 00:08:25,270
up week said I I thought that they were

00:08:21,310 --> 00:08:28,240
comparable comparable to do to those of

00:08:25,270 --> 00:08:32,380
aberrant into into the Python standard

00:08:28,240 --> 00:08:36,520
library and so I said fantastic very

00:08:32,380 --> 00:08:41,640
very they were whatever wise I was

00:08:36,520 --> 00:08:47,670
waiting for because then I can I can

00:08:41,640 --> 00:08:52,029
keep weak links to object without

00:08:47,670 --> 00:08:55,930
worrying when when that to free those

00:08:52,029 --> 00:08:59,890
links and so it's very nice feature but

00:08:55,930 --> 00:09:04,870
then you learned I'll discover that for

00:08:59,890 --> 00:09:10,770
example week week maps you cannot know

00:09:04,870 --> 00:09:14,020
what's inside a week map just the if you

00:09:10,770 --> 00:09:18,220
if you know what's inside the week map

00:09:14,020 --> 00:09:24,040
is that is because you have put it there

00:09:18,220 --> 00:09:28,300
so it's not possible to to ask ask a

00:09:24,040 --> 00:09:32,079
week by week map for its keys is not

00:09:28,300 --> 00:09:35,110
possible to it iterate over its its keys

00:09:32,079 --> 00:09:40,540
or values and so on it's just possible

00:09:35,110 --> 00:09:45,570
to check given an object if to check if

00:09:40,540 --> 00:09:50,160
it's a key in that object and it seems

00:09:45,570 --> 00:09:54,329
incredibly wrong to me but the

00:09:50,160 --> 00:10:00,760
JavaScript community found that that

00:09:54,329 --> 00:10:04,930
feature is dead so they some of the more

00:10:00,760 --> 00:10:10,560
one of the more prominent JavaScript

00:10:04,930 --> 00:10:14,140
developers said that it as it is a

00:10:10,560 --> 00:10:18,730
security feature something that you can

00:10:14,140 --> 00:10:22,329
that it's really useful because you you

00:10:18,730 --> 00:10:27,820
can have an object that no one can look

00:10:22,329 --> 00:10:31,240
into but but I think that it is

00:10:27,820 --> 00:10:37,210
a misunderstanding of what a week map

00:10:31,240 --> 00:10:40,810
should should do it should firstly give

00:10:37,210 --> 00:10:44,649
you a way to use weak links who weak

00:10:40,810 --> 00:10:49,810
references to other objects and then

00:10:44,649 --> 00:10:52,450
maybe a being used a security property

00:10:49,810 --> 00:10:59,560
or security object because you cannot

00:10:52,450 --> 00:11:04,630
look into it so JavaScript even EEMA

00:10:59,560 --> 00:11:11,520
scripts ethics as many many things that

00:11:04,630 --> 00:11:17,410
seems wrong from Python Python file and

00:11:11,520 --> 00:11:22,870
so if you read the blogs and articles

00:11:17,410 --> 00:11:26,430
around the internet some of suggest that

00:11:22,870 --> 00:11:30,279
you should use for example typescript

00:11:26,430 --> 00:11:35,380
which is a very very good language that

00:11:30,279 --> 00:11:39,370
has interfaces types but for example few

00:11:35,380 --> 00:11:44,459
days ago I found this example in a more

00:11:39,370 --> 00:11:48,580
Abbott's blog actually when they were

00:11:44,459 --> 00:11:53,850
they were explaining why they chose the

00:11:48,580 --> 00:11:58,480
type script and you see that code where

00:11:53,850 --> 00:12:03,880
and foo is declared as an an array that

00:11:58,480 --> 00:12:08,050
can contain just birds and in the neck

00:12:03,880 --> 00:12:10,740
on the next row day they add an animal

00:12:08,050 --> 00:12:15,420
which is a the

00:12:10,740 --> 00:12:18,629
the the superclass of bird and the the

00:12:15,420 --> 00:12:20,069
typescript the interpreter and checker

00:12:18,629 --> 00:12:26,929
is okay with that

00:12:20,069 --> 00:12:30,170
so while while having types made as

00:12:26,929 --> 00:12:35,490
maintaining the cold and so on

00:12:30,170 --> 00:12:40,670
did the language that has typed in its

00:12:35,490 --> 00:12:48,619
name fails a check a very single simple

00:12:40,670 --> 00:12:52,170
block of code so again I would say what

00:12:48,619 --> 00:12:55,679
seemed a very very strange to me and

00:12:52,170 --> 00:12:58,649
that's that's because I know that that I

00:12:55,679 --> 00:13:03,119
have we have to deal with JavaScript

00:12:58,649 --> 00:13:11,279
typescript CoffeeScript what you want

00:13:03,119 --> 00:13:15,920
stripped but I will put it in a cage and

00:13:11,279 --> 00:13:23,399
control it from from very I will like to

00:13:15,920 --> 00:13:27,509
at least so it's not for about talking

00:13:23,399 --> 00:13:31,980
about JavaScript so let's get back to

00:13:27,509 --> 00:13:37,319
Python and what the role of Python in

00:13:31,980 --> 00:13:41,009
modern web applications usually when you

00:13:37,319 --> 00:13:45,749
have such a such a separation between

00:13:41,009 --> 00:13:48,179
application logic and data as logic one

00:13:45,749 --> 00:13:54,449
the first developed in JavaScript and

00:13:48,179 --> 00:13:58,529
the second developed in in in Python the

00:13:54,449 --> 00:14:01,279
pythons server that you develop in one

00:13:58,529 --> 00:14:01,279
of such

00:14:01,580 --> 00:14:09,120
application service that I told you

00:14:04,260 --> 00:14:14,400
before is used like a data hat you

00:14:09,120 --> 00:14:18,710
expose your data so some way and really

00:14:14,400 --> 00:14:22,910
for me and for us the the fun part of

00:14:18,710 --> 00:14:29,610
developing application stops when we

00:14:22,910 --> 00:14:31,680
developed our database structure we we

00:14:29,610 --> 00:14:38,190
confront with with the customer about

00:14:31,680 --> 00:14:42,450
the domain data and so on and really

00:14:38,190 --> 00:14:47,730
what comes after the database structure

00:14:42,450 --> 00:14:53,850
big exposing the Creator REST API create

00:14:47,730 --> 00:14:57,450
I get a post API it's it's boring we we

00:14:53,850 --> 00:15:02,520
do really need that when do you do we

00:14:57,450 --> 00:15:07,800
really need raised api's and so on we

00:15:02,520 --> 00:15:14,010
think that we need we need the REST API

00:15:07,800 --> 00:15:16,950
is just when when you your service as to

00:15:14,010 --> 00:15:23,750
your application as to interface with

00:15:16,950 --> 00:15:28,050
other services by using standardized

00:15:23,750 --> 00:15:33,930
interfaces such a raised as rest and so

00:15:28,050 --> 00:15:38,100
on or if you give you an API to your

00:15:33,930 --> 00:15:40,230
user to to use and to interact with the

00:15:38,100 --> 00:15:46,220
foreign interaction with your

00:15:40,230 --> 00:15:52,560
application instead of using the GUI

00:15:46,220 --> 00:15:56,370
this is the the normal way of our Django

00:15:52,560 --> 00:16:00,540
pyramid the flask you name it

00:15:56,370 --> 00:16:08,960
do they work more or less more or less

00:16:00,540 --> 00:16:12,960
they all they all wait for arm for a

00:16:08,960 --> 00:16:19,280
request and then they will

00:16:12,960 --> 00:16:23,010
the request contains all the the data

00:16:19,280 --> 00:16:27,650
the context data that your application

00:16:23,010 --> 00:16:33,660
your controller and ylim need to need to

00:16:27,650 --> 00:16:37,490
understand what it should do and then it

00:16:33,660 --> 00:16:41,670
retrieves the data from the database it

00:16:37,490 --> 00:16:45,360
builds up our response and stream it

00:16:41,670 --> 00:16:48,870
back to the client maybe it saves some

00:16:45,360 --> 00:16:53,250
some data in a session that usually is

00:16:48,870 --> 00:16:57,360
use like a poor man dictionary and and

00:16:53,250 --> 00:17:00,240
then your object are destroyed and your

00:16:57,360 --> 00:17:09,949
system is waiting for the next query

00:17:00,240 --> 00:17:09,949
next get past or patch and so on oh

00:17:10,160 --> 00:17:18,300
where the the things all are the things

00:17:13,470 --> 00:17:21,449
because we are still still those who

00:17:18,300 --> 00:17:27,050
free circuits are still used today to do

00:17:21,449 --> 00:17:31,710
desktop application oh well things with

00:17:27,050 --> 00:17:36,330
always developing an application with

00:17:31,710 --> 00:17:40,250
desktop tool kits those that were that

00:17:36,330 --> 00:17:42,260
are now supplemented by by web

00:17:40,250 --> 00:17:45,240
application and so on

00:17:42,260 --> 00:17:53,190
usually developing application wind with

00:17:45,240 --> 00:18:00,420
pike ET and a GDK the role of the gtk or

00:17:53,190 --> 00:18:03,030
QT toolkit and python is they they

00:18:00,420 --> 00:18:08,610
they're in their interaction is much

00:18:03,030 --> 00:18:13,340
more type of tiger title than then then

00:18:08,610 --> 00:18:17,130
with web apps in web apps we have the

00:18:13,340 --> 00:18:21,990
the application logic completely moved

00:18:17,130 --> 00:18:24,710
to the client boot but instead in in

00:18:21,990 --> 00:18:29,360
normal desktop application we

00:18:24,710 --> 00:18:33,289
we have the that the the application

00:18:29,360 --> 00:18:39,500
logic logic is completely driven by by

00:18:33,289 --> 00:18:44,110
fightin with that of classes and we you

00:18:39,500 --> 00:18:50,720
I widgets' that the toolkit provide us

00:18:44,110 --> 00:18:55,520
so they are very different from today

00:18:50,720 --> 00:18:59,870
web application our we found ourselves

00:18:55,520 --> 00:19:05,090
in at the end of the last year in the

00:18:59,870 --> 00:19:08,480
need of decide if we were maintaining

00:19:05,090 --> 00:19:14,240
and not an old application developed

00:19:08,480 --> 00:19:17,779
with one of those those frameworks it's

00:19:14,240 --> 00:19:23,919
much much older indeed it was developed

00:19:17,779 --> 00:19:29,090
in suriname dope in dope or two we have

00:19:23,919 --> 00:19:37,700
made a decision instead of replacing it

00:19:29,090 --> 00:19:40,520
with a new app and we we wanted to to

00:19:37,700 --> 00:19:46,480
bring back the fun into to web

00:19:40,520 --> 00:19:50,929
development so we we developed the

00:19:46,480 --> 00:19:55,390
framework from scratch and the idea was

00:19:50,929 --> 00:20:00,200
is to use on a signal system not just to

00:19:55,390 --> 00:20:04,549
achieve better concurrency but also to

00:20:00,200 --> 00:20:11,179
ease the maintenance on the server of

00:20:04,549 --> 00:20:14,570
the state of the application we we

00:20:11,179 --> 00:20:18,710
thought to have to equal system on the

00:20:14,570 --> 00:20:23,029
on the server and the client and to add

00:20:18,710 --> 00:20:29,600
them freely talk to each other using

00:20:23,029 --> 00:20:32,779
modern FPC systems that can use HTTP as

00:20:29,600 --> 00:20:36,320
by as a back-end protocol but but that

00:20:32,779 --> 00:20:37,570
that they obstruct you from the notion

00:20:36,320 --> 00:20:42,429
of

00:20:37,570 --> 00:20:52,929
having an HTTP and even they work

00:20:42,429 --> 00:20:56,999
without without HTTP at all so we we

00:20:52,929 --> 00:21:03,850
developed and these framework raccoon

00:20:56,999 --> 00:21:07,600
with postures and focus at the at the

00:21:03,850 --> 00:21:13,629
bottom level order all the the framework

00:21:07,600 --> 00:21:17,499
has to be a synchronous so we we choose

00:21:13,629 --> 00:21:23,889
a sync PG to drive to the data access to

00:21:17,499 --> 00:21:31,210
the the database and SQL alchemy to

00:21:23,889 --> 00:21:38,769
construct the queries crossbar have been

00:21:31,210 --> 00:21:41,230
chosen to as the intercommunication

00:21:38,769 --> 00:21:46,269
backbone between the two pieces on the

00:21:41,230 --> 00:21:50,529
client and the server and a hae o HTTP

00:21:46,269 --> 00:21:53,940
is used as an extra HTTP publisher for

00:21:50,529 --> 00:21:57,100
the stuff that cannot be transferred via

00:21:53,940 --> 00:22:03,369
for the initialization part and so on

00:21:57,100 --> 00:22:06,249
then we use the SQL Acme but not the OEM

00:22:03,369 --> 00:22:12,129
because the object relational mapper

00:22:06,249 --> 00:22:15,159
cannot be use with sync code and and the

00:22:12,129 --> 00:22:18,009
RPC which was crossbar because it allows

00:22:15,159 --> 00:22:22,869
it it allows your system to interface

00:22:18,009 --> 00:22:26,799
not just between Python and indiscreet

00:22:22,869 --> 00:22:31,210
but between many many different

00:22:26,799 --> 00:22:35,499
languages and as both are twisted and

00:22:31,210 --> 00:22:41,850
the signal and a secure client library

00:22:35,499 --> 00:22:46,320
and as such nice features like

00:22:41,850 --> 00:22:49,650
I wrote transfer between the caller and

00:22:46,320 --> 00:22:53,250
the callee if the collie raises an arrow

00:22:49,650 --> 00:22:56,220
this arrow is brought back to the Nicola

00:22:53,250 --> 00:23:03,270
and so on it's really nice and as many

00:22:56,220 --> 00:23:07,560
features so we designed an API that our

00:23:03,270 --> 00:23:11,940
API as composed by a tree of nodes

00:23:07,560 --> 00:23:16,350
object that where the initialization is

00:23:11,940 --> 00:23:20,520
split into parts because and the under

00:23:16,350 --> 00:23:23,370
in it cannot be an a synchronous method

00:23:20,520 --> 00:23:29,580
so we have to split the initialization

00:23:23,370 --> 00:23:33,000
into part and node is a mixing class

00:23:29,580 --> 00:23:36,570
they just deal with the communication

00:23:33,000 --> 00:23:41,790
part of the problem the rest of the of

00:23:36,570 --> 00:23:44,190
the of the the object is supposed to do

00:23:41,790 --> 00:23:47,760
it's your application logic and so on

00:23:44,190 --> 00:23:54,750
what the node class gives you is a way

00:23:47,760 --> 00:23:57,120
to declare callable things and signals

00:23:54,750 --> 00:24:01,950
and handlers at the at the class level

00:23:57,120 --> 00:24:08,180
with the decorators and so on and it

00:24:01,950 --> 00:24:08,180
does that in a way that it's possible to

00:24:09,080 --> 00:24:19,760
it's possible to to construct your your

00:24:16,560 --> 00:24:23,640
object trees with the relative

00:24:19,760 --> 00:24:30,110
references to each other and then attach

00:24:23,640 --> 00:24:35,510
them to to the cross buyer connection

00:24:30,110 --> 00:24:40,070
machinery and have them published on the

00:24:35,510 --> 00:24:44,210
evident published here you see some the

00:24:40,070 --> 00:24:47,760
nodes and the methods and the signals

00:24:44,210 --> 00:24:51,330
signals are events that

00:24:47,760 --> 00:24:58,500
that the nodes are allows you to declare

00:24:51,330 --> 00:25:03,420
a to use so this is a let's jump to an

00:24:58,500 --> 00:25:05,000
example of of the of a test and you see

00:25:03,420 --> 00:25:11,130
that

00:25:05,000 --> 00:25:15,000
Adaline 12 we have we have the first

00:25:11,130 --> 00:25:19,830
node which is just another way that it's

00:25:15,000 --> 00:25:24,540
used for structure and then we have two

00:25:19,830 --> 00:25:30,360
other nodes the second and the third

00:25:24,540 --> 00:25:35,210
with where we customize where we could

00:25:30,360 --> 00:25:40,370
we customize our and we added some

00:25:35,210 --> 00:25:46,950
anderson signals and enter a signal and

00:25:40,370 --> 00:25:50,910
Nicole so on those the the node is

00:25:46,950 --> 00:25:52,770
automatically automatically is

00:25:50,910 --> 00:25:56,430
automatically instrumented to expose

00:25:52,770 --> 00:26:00,920
those methods and you see that for

00:25:56,430 --> 00:26:09,360
example the the line code third a line

00:26:00,920 --> 00:26:14,810
17 that that calls the third the third

00:26:09,360 --> 00:26:19,650
node with with a with a relative path it

00:26:14,810 --> 00:26:23,880
depends on where those nodes are mounted

00:26:19,650 --> 00:26:27,870
into are bound to there is a base path

00:26:23,880 --> 00:26:31,580
this is test and then first is bound to

00:26:27,870 --> 00:26:36,780
base class first that will become

00:26:31,580 --> 00:26:42,330
test dot first and then third is is

00:26:36,780 --> 00:26:46,650
bound to base dot third and then the

00:26:42,330 --> 00:26:50,700
first name node adds the second as with

00:26:46,650 --> 00:26:55,190
the name second and so it's it's a node

00:26:50,700 --> 00:27:00,770
part we become for test

00:26:55,190 --> 00:27:07,900
dot dot first dot second and so you saw

00:27:00,770 --> 00:27:14,660
before that that's the end layer on line

00:27:07,900 --> 00:27:18,760
25 listen for for the the the the signal

00:27:14,660 --> 00:27:24,050
on first second and although these are

00:27:18,760 --> 00:27:28,580
relative relative addresses that when

00:27:24,050 --> 00:27:33,100
they are realized when the the the node

00:27:28,580 --> 00:27:41,690
is connected to the machinery which is

00:27:33,100 --> 00:27:44,900
in line in line 37 and 38 and so on in

00:27:41,690 --> 00:27:48,200
this is a variable available also in

00:27:44,900 --> 00:27:50,300
JavaScript this is actual JavaScript

00:27:48,200 --> 00:27:59,870
code and it is in JavaScript code

00:27:50,300 --> 00:28:05,840
because we use a tool we made to to

00:27:59,870 --> 00:28:09,560
compile Python to JavaScript and Punto

00:28:05,840 --> 00:28:13,790
yes it compiles we use the same syntax

00:28:09,560 --> 00:28:16,610
the same as traction and then we compile

00:28:13,790 --> 00:28:20,930
them to to JavaScript to a JavaScript

00:28:16,610 --> 00:28:25,520
that also are very old browser can

00:28:20,930 --> 00:28:29,710
concur on and that has no synchronous no

00:28:25,520 --> 00:28:34,360
promises and so on this is actually a

00:28:29,710 --> 00:28:38,510
anatomy of our accession of our

00:28:34,360 --> 00:28:41,030
application user a user session oh it

00:28:38,510 --> 00:28:46,190
starts there is the service that is the

00:28:41,030 --> 00:28:49,370
only thing that is posted both HTTP and

00:28:46,190 --> 00:28:56,180
crossbar and connects to crossbar and

00:28:49,370 --> 00:28:57,980
then each other side can can talk to

00:28:56,180 --> 00:29:02,179
each other very

00:28:57,980 --> 00:29:06,320
very very freely I have many more slides

00:29:02,179 --> 00:29:09,409
but I'm out of time so if you are

00:29:06,320 --> 00:29:12,230
interested we have developed the

00:29:09,409 --> 00:29:16,669
application is nearly complete I cannot

00:29:12,230 --> 00:29:20,630
show you it now but if you are

00:29:16,669 --> 00:29:23,990
interested we will I can show you we can

00:29:20,630 --> 00:29:35,120
give you an Asus and Adam attitude to

00:29:23,990 --> 00:29:39,919
the application we will probably publish

00:29:35,120 --> 00:29:42,769
this framework when it's it's ready it's

00:29:39,919 --> 00:29:44,840
in good shape we need to support

00:29:42,769 --> 00:29:49,909
completely separate it from from the

00:29:44,840 --> 00:29:54,590
application but it's going very well it

00:29:49,909 --> 00:29:59,260
are as more four thousand thousand four

00:29:54,590 --> 00:30:03,919
hundred commits so if uni if you want to

00:29:59,260 --> 00:30:06,350
see the code just ask me or drop me a

00:30:03,919 --> 00:30:12,140
line thank you

00:30:06,350 --> 00:30:16,650
[Applause]

00:30:12,140 --> 00:30:22,260
thanks over-representation questions go

00:30:16,650 --> 00:30:23,440
back - no thanks again

00:30:22,260 --> 00:30:28,869
Thanks

00:30:23,440 --> 00:30:28,869

YouTube URL: https://www.youtube.com/watch?v=saQsCY1MUBM


