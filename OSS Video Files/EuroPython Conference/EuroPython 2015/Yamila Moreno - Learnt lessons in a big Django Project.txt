Title: Yamila Moreno - Learnt lessons in a big Django Project
Publication date: 2015-08-08
Playlist: EuroPython 2015
Description: 
	Yamila Moreno - Learnt lessons in a big Django Project
[EuroPython 2015]
[24 July 2015]
[Bilbao, Euskadi, Spain]

A Django project, developed for 2 years is a valuable source of
anecdotes and wisdom. This talk is a review on the decissions, about
human and tech, that my team took during the project. I'll point out
the good decissions as well as the bad ones, those which made us learn
"the hard way".

Both good and bad decissions taught us a lot, and here I compile them,
together with a handful of tips which can amuse and, hopefully,
inspire the audience, specially those who are facing for the first
time a big project.
Captions: 
	00:00:00,589 --> 00:00:06,270
um hello to everyone and thanks for

00:00:03,840 --> 00:00:07,830
being here in my talk about ten lessons

00:00:06,270 --> 00:00:12,330
that I learned you have the younger

00:00:07,830 --> 00:00:15,330
project introduce myself I'm jameelah

00:00:12,330 --> 00:00:17,940
marina these are my Twitter on my github

00:00:15,330 --> 00:00:20,250
account two years ago I found it with

00:00:17,940 --> 00:00:23,010
another I finished as in Spain the

00:00:20,250 --> 00:00:24,960
Spanish Python Association and we

00:00:23,010 --> 00:00:28,410
organized the first pythoness in Madrid

00:00:24,960 --> 00:00:33,719
then we also also co-founded by ladies

00:00:28,410 --> 00:00:37,350
explain I'm a software developer in cali

00:00:33,719 --> 00:00:41,850
dos it's a company that i could found it

00:00:37,350 --> 00:00:44,340
four years ago and we work only mostly

00:00:41,850 --> 00:00:47,190
ninety-nine percent with open source and

00:00:44,340 --> 00:00:50,280
it's important and we'll see later in

00:00:47,190 --> 00:00:53,190
cali Leo's we work with we make web

00:00:50,280 --> 00:00:58,260
applications big applications usually

00:00:53,190 --> 00:01:00,260
for with Django as well as other

00:00:58,260 --> 00:01:06,659
technologies that python and django are

00:01:00,260 --> 00:01:08,700
part of our stack so this talk is about

00:01:06,659 --> 00:01:11,310
the good and the bad decisions that we

00:01:08,700 --> 00:01:14,280
made during a big django project it's

00:01:11,310 --> 00:01:16,770
especially if the project was the

00:01:14,280 --> 00:01:20,130
complete renovation of our roadmap of a

00:01:16,770 --> 00:01:21,780
website in spain quite famous and it's

00:01:20,130 --> 00:01:23,939
meant for all of you who are starting

00:01:21,780 --> 00:01:27,650
with web development or may be facing

00:01:23,939 --> 00:01:32,009
for the first time a big a big project

00:01:27,650 --> 00:01:34,950
the the website this project is the gear

00:01:32,009 --> 00:01:37,829
up soul in spain is quite famous reps

00:01:34,950 --> 00:01:40,079
elisa massive oil company and the gear

00:01:37,829 --> 00:01:45,060
of solace part of the marketing strategy

00:01:40,079 --> 00:01:48,770
they it's a roadmap which you can search

00:01:45,060 --> 00:01:53,009
for roots and it also has many advice of

00:01:48,770 --> 00:01:55,799
tourism gastronomy and accommodation so

00:01:53,009 --> 00:01:59,399
it's a baby with a in this project we

00:01:55,799 --> 00:02:02,759
needed to change completely the brand

00:01:59,399 --> 00:02:05,490
and give a new style but also we needed

00:02:02,759 --> 00:02:07,770
to keep the original essence and the

00:02:05,490 --> 00:02:09,660
creative team focused on five main

00:02:07,770 --> 00:02:11,550
features which were tourists and

00:02:09,660 --> 00:02:12,740
gastronomic cards search engine a

00:02:11,550 --> 00:02:15,410
powerful mob

00:02:12,740 --> 00:02:19,100
a planner to organize the trips and

00:02:15,410 --> 00:02:22,580
looked after the deter content I said it

00:02:19,100 --> 00:02:25,880
was big how big so we had 80,000

00:02:22,580 --> 00:02:28,340
touristic cards more than 500 articles

00:02:25,880 --> 00:02:31,190
and growing this amount of data maybe is

00:02:28,340 --> 00:02:33,890
not so impressive with all big data but

00:02:31,190 --> 00:02:36,260
it was quite difficult to show all of

00:02:33,890 --> 00:02:39,020
them in a map at a time and very quickly

00:02:36,260 --> 00:02:41,180
with filters on everything the first

00:02:39,020 --> 00:02:44,090
illest talk about 18 months and we spent

00:02:41,180 --> 00:02:47,420
another six months with a transfer to

00:02:44,090 --> 00:02:50,090
any team and adding new features and in

00:02:47,420 --> 00:02:53,750
the present time the the project is

00:02:50,090 --> 00:02:57,110
being evolved the original team were to

00:02:53,750 --> 00:02:59,810
you eggs one designer one from 10-6

00:02:57,110 --> 00:03:01,910
backends the product owner and as well

00:02:59,810 --> 00:03:03,650
as the correct the core team we had the

00:03:01,910 --> 00:03:06,410
content managers the translation team

00:03:03,650 --> 00:03:08,360
the IT team from repsol the academy that

00:03:06,410 --> 00:03:10,130
restaurant mia because we have lots of

00:03:08,360 --> 00:03:14,410
people giving their opinion to build a

00:03:10,130 --> 00:03:17,540
team in the project sorry we work with

00:03:14,410 --> 00:03:19,940
within the agile methodology so we use

00:03:17,540 --> 00:03:23,750
dismal iteration which are explains two

00:03:19,940 --> 00:03:26,300
weeks a sprint we made 42 a sprint 600

00:03:23,750 --> 00:03:29,930
user stories and more than 1300 points

00:03:26,300 --> 00:03:32,170
so this was a project this is like what

00:03:29,930 --> 00:03:34,340
I mean with a big project on with this

00:03:32,170 --> 00:03:36,800
context in mind let's talk about the

00:03:34,340 --> 00:03:39,410
decisions one of the first things that

00:03:36,800 --> 00:03:41,180
you have to face when you are making a

00:03:39,410 --> 00:03:43,310
project no matter if it's big or it's

00:03:41,180 --> 00:03:46,430
small is that they're to chapter the

00:03:43,310 --> 00:03:49,130
structure if the project is a small you

00:03:46,430 --> 00:03:51,620
can keep on the purpose and bc of jungle

00:03:49,130 --> 00:03:54,860
with the back and the front coupled but

00:03:51,620 --> 00:03:56,660
a bigger project will face bigger and

00:03:54,860 --> 00:03:59,510
harder challenges and you need a

00:03:56,660 --> 00:04:01,970
stronger foundations in the Arabs all

00:03:59,510 --> 00:04:05,690
for instance we started developing this

00:04:01,970 --> 00:04:08,780
website and six months later we were

00:04:05,690 --> 00:04:11,060
asked to expose an API for third-party

00:04:08,780 --> 00:04:14,270
applications for mobile applications a

00:04:11,060 --> 00:04:16,280
mobile version of the map and several

00:04:14,270 --> 00:04:19,400
other integrations and we were

00:04:16,280 --> 00:04:23,450
unprepared we really we had some API

00:04:19,400 --> 00:04:24,100
modules but it wasn't really an API from

00:04:23,450 --> 00:04:27,280
one

00:04:24,100 --> 00:04:29,230
type and we struggle to update to the

00:04:27,280 --> 00:04:31,480
new requirements so the lesson that we

00:04:29,230 --> 00:04:33,730
learned the hard way was completely

00:04:31,480 --> 00:04:37,630
separate API and from project because

00:04:33,730 --> 00:04:39,310
API is usually stable or maybe more

00:04:37,630 --> 00:04:42,580
stable on the front projects change

00:04:39,310 --> 00:04:45,430
every day and you can add lots of new

00:04:42,580 --> 00:04:47,910
clients or new applications consuming

00:04:45,430 --> 00:04:52,060
the API so different life cycles

00:04:47,910 --> 00:04:55,240
completely separate as well as being

00:04:52,060 --> 00:04:57,730
prepared on the big picture it's also

00:04:55,240 --> 00:05:00,850
necessary to Peter / in smaller modules

00:04:57,730 --> 00:05:04,000
for instance we knew we had to make a

00:05:00,850 --> 00:05:05,980
road map but we didn't know the the map

00:05:04,000 --> 00:05:09,490
provided because they customers didn't

00:05:05,980 --> 00:05:12,430
Holland made it's mine we thought it was

00:05:09,490 --> 00:05:14,590
google maps but it wasn't sure so we

00:05:12,430 --> 00:05:18,490
prepare an isolated module with was

00:05:14,590 --> 00:05:21,420
talking to our our inner code and this

00:05:18,490 --> 00:05:27,120
module was the only inter to talk to the

00:05:21,420 --> 00:05:29,860
uncertain map provider finally we

00:05:27,120 --> 00:05:32,800
integrate with google marks and we

00:05:29,860 --> 00:05:34,690
didn't change but google maps changed

00:05:32,800 --> 00:05:37,360
the API two months later after the

00:05:34,690 --> 00:05:39,310
integration because they can do this and

00:05:37,360 --> 00:05:43,690
we only needed to change in this

00:05:39,310 --> 00:05:46,480
isolated module to be like in very back

00:05:43,690 --> 00:05:49,720
with you with sorry with very few are

00:05:46,480 --> 00:05:52,720
few effort we were prepared to to update

00:05:49,720 --> 00:05:54,160
the requirements of Google API so be

00:05:52,720 --> 00:05:57,340
ready for changes but don't over

00:05:54,160 --> 00:05:59,530
engineer if difficult to know when are

00:05:57,340 --> 00:06:02,680
being prepared and grant or engineer and

00:05:59,530 --> 00:06:05,170
some rules may be useful and the role

00:06:02,680 --> 00:06:06,670
that is the lesson 3 is refactoring

00:06:05,170 --> 00:06:08,410
abstract the second time you have the

00:06:06,670 --> 00:06:10,780
chance that means that if you are

00:06:08,410 --> 00:06:13,030
working within a method for instance how

00:06:10,780 --> 00:06:15,100
you have to pass a string you can pass

00:06:13,030 --> 00:06:16,990
the string within the method but the

00:06:15,100 --> 00:06:20,140
second time that in other part of the

00:06:16,990 --> 00:06:22,810
code you need to purchasing remember

00:06:20,140 --> 00:06:25,800
that code that you did and after this

00:06:22,810 --> 00:06:29,050
test this new functionality in our UTS

00:06:25,800 --> 00:06:30,990
isolated and call the new function the

00:06:29,050 --> 00:06:35,169
new method for everywhere in the code

00:06:30,990 --> 00:06:37,430
that way you will brief actor the second

00:06:35,169 --> 00:06:41,840
time and not

00:06:37,430 --> 00:06:44,180
before you need it okay so before

00:06:41,840 --> 00:06:46,640
continuing lestari out a very little

00:06:44,180 --> 00:06:49,130
survey please raise your hands those of

00:06:46,640 --> 00:06:53,900
you who have heard about the laws of

00:06:49,130 --> 00:06:56,420
thermodynamics okay is more people of

00:06:53,900 --> 00:06:58,910
course you already my talk now raise

00:06:56,420 --> 00:07:02,450
your hand if you know by heart the fifth

00:06:58,910 --> 00:07:03,950
law of thermodynamics yeah I was

00:07:02,450 --> 00:07:05,720
expecting that it's pretty common to

00:07:03,950 --> 00:07:08,270
forget it and it's a very important law

00:07:05,720 --> 00:07:10,010
which says sooner rather than later you

00:07:08,270 --> 00:07:13,640
will make about it's not me it's

00:07:10,010 --> 00:07:16,040
thermodynamics it must be true but being

00:07:13,640 --> 00:07:18,530
that true the next lesson is like quite

00:07:16,040 --> 00:07:21,290
easy because you have to test test test

00:07:18,530 --> 00:07:23,590
if you have a big application a big

00:07:21,290 --> 00:07:27,530
project you need to intensively test the

00:07:23,590 --> 00:07:31,520
the code because you will you will need

00:07:27,530 --> 00:07:33,890
to be sure that your new code won't

00:07:31,520 --> 00:07:36,740
break the behavior of the application

00:07:33,890 --> 00:07:39,670
and you will need to to help your

00:07:36,740 --> 00:07:42,410
colleagues to add new features without

00:07:39,670 --> 00:07:44,600
breaking your whole your previous code

00:07:42,410 --> 00:07:48,290
so you need to test whenever you are

00:07:44,600 --> 00:07:52,310
adding cold and in the other soul for

00:07:48,290 --> 00:07:54,620
instance even if all of us knew that you

00:07:52,310 --> 00:07:57,890
have to test we wrote test but not many

00:07:54,620 --> 00:08:00,710
and we struggle because some part of the

00:07:57,890 --> 00:08:02,390
code made us fear and we didn't want to

00:08:00,710 --> 00:08:05,240
touch it only the person who originally

00:08:02,390 --> 00:08:07,190
wrote that code was in charge to change

00:08:05,240 --> 00:08:10,400
it because we didn't trust ourselves

00:08:07,190 --> 00:08:12,980
which is normal and in python and django

00:08:10,400 --> 00:08:15,440
you have lots of duties and libraries

00:08:12,980 --> 00:08:18,140
and tools to test by test a unit test

00:08:15,440 --> 00:08:20,090
and other libraries to mock stab

00:08:18,140 --> 00:08:24,490
inspired you need to know about testing

00:08:20,090 --> 00:08:27,350
and really really test your application

00:08:24,490 --> 00:08:29,150
in django when you are developing with

00:08:27,350 --> 00:08:31,460
genuine this is like specifically for

00:08:29,150 --> 00:08:33,500
genuine python you need to know about

00:08:31,460 --> 00:08:35,990
the strongest point which is the

00:08:33,500 --> 00:08:37,880
community if you go to Geetha you are

00:08:35,990 --> 00:08:41,150
going to find like thousands of projects

00:08:37,880 --> 00:08:43,550
with Python or Django tags so when you

00:08:41,150 --> 00:08:45,290
are when you need something for the

00:08:43,550 --> 00:08:48,530
application you have to think that maybe

00:08:45,290 --> 00:08:50,170
probably someone has solved before you

00:08:48,530 --> 00:08:52,839
and probably

00:08:50,170 --> 00:08:54,940
person has done tests and documentation

00:08:52,839 --> 00:08:57,610
and has done better than you are going

00:08:54,940 --> 00:09:03,519
to do and you don't need to put effort

00:08:57,610 --> 00:09:05,709
that so that community helps us to meet

00:09:03,519 --> 00:09:07,720
one important point in the web

00:09:05,709 --> 00:09:10,959
development which is don't reinvent the

00:09:07,720 --> 00:09:13,089
wheel but sometimes the library that

00:09:10,959 --> 00:09:15,190
define doesn't exactly do what you want

00:09:13,089 --> 00:09:17,680
or maybe too big and it's a very big

00:09:15,190 --> 00:09:19,510
dependency to add into your project and

00:09:17,680 --> 00:09:23,079
you just need a very little thing maybe

00:09:19,510 --> 00:09:27,180
you need the whole control of the what's

00:09:23,079 --> 00:09:30,399
happening so in that case is a very good

00:09:27,180 --> 00:09:33,970
that by that I can give to you is that

00:09:30,399 --> 00:09:36,490
you have to know the internals and don't

00:09:33,970 --> 00:09:39,490
be afraid to do it yourself in python

00:09:36,490 --> 00:09:42,790
and django they are it's open source so

00:09:39,490 --> 00:09:45,399
you can hack almost everything and you

00:09:42,790 --> 00:09:49,420
can add new features and you can improve

00:09:45,399 --> 00:09:52,839
and extend as you want so no Python no

00:09:49,420 --> 00:09:55,959
jungle and don't be afraid to to do

00:09:52,839 --> 00:10:00,399
yourself as well as this big headers

00:09:55,959 --> 00:10:03,550
there are other good practices maybe

00:10:00,399 --> 00:10:07,779
they are not so technical but they are

00:10:03,550 --> 00:10:10,449
also very very important for instance if

00:10:07,779 --> 00:10:13,290
you have been working like friday in web

00:10:10,449 --> 00:10:16,360
development you will know this this

00:10:13,290 --> 00:10:18,640
lesson but nevertheless it's important

00:10:16,360 --> 00:10:20,980
to say it so use a distribute source

00:10:18,640 --> 00:10:23,410
control manager you have git and

00:10:20,980 --> 00:10:26,410
mercurial mercurial is made with Python

00:10:23,410 --> 00:10:28,000
very cool you can hack it subversion is

00:10:26,410 --> 00:10:30,760
not distributed through bration is from

00:10:28,000 --> 00:10:33,279
the past don't use a subversion did or

00:10:30,760 --> 00:10:36,220
mercurial or other if i don't really

00:10:33,279 --> 00:10:39,430
don't know others but maybe so with

00:10:36,220 --> 00:10:43,390
these kind of tools doing you will

00:10:39,430 --> 00:10:46,569
ensure your code to be to be breathable

00:10:43,390 --> 00:10:49,029
you can go through the history of the

00:10:46,569 --> 00:10:52,300
changes you can undo changes if you

00:10:49,029 --> 00:10:54,430
don't want to and when many people are

00:10:52,300 --> 00:10:56,769
committing into the same base code base

00:10:54,430 --> 00:11:00,640
you need to to use something like this

00:10:56,769 --> 00:11:02,830
in the Arabs all we knew this but we

00:11:00,640 --> 00:11:06,660
introduce a new

00:11:02,830 --> 00:11:09,340
procedure which is like the lesson eight

00:11:06,660 --> 00:11:15,120
useful request as a basic procedure to

00:11:09,340 --> 00:11:18,640
have features to master that means that

00:11:15,120 --> 00:11:21,760
when we were starting a new feature we

00:11:18,640 --> 00:11:25,450
created a new branch from master and

00:11:21,760 --> 00:11:28,660
then we develop the cold we developed

00:11:25,450 --> 00:11:32,020
the test and the documentation and when

00:11:28,660 --> 00:11:33,310
we were comfortable with the result we

00:11:32,020 --> 00:11:35,560
made a pull request and another

00:11:33,310 --> 00:11:38,160
colleague was in charge of reviewing

00:11:35,560 --> 00:11:40,810
this code and testing it and maybe

00:11:38,160 --> 00:11:44,010
suggestions and improvements that way

00:11:40,810 --> 00:11:47,080
all the code which was entering in

00:11:44,010 --> 00:11:49,090
master was reviewed by two people the

00:11:47,080 --> 00:11:52,390
original developer and the reviewer and

00:11:49,090 --> 00:11:55,210
at first we thought that it would make

00:11:52,390 --> 00:11:57,340
like time overhead we were loose enough

00:11:55,210 --> 00:11:59,710
time and it was all the contrary we were

00:11:57,340 --> 00:12:03,100
making less box from the very beginning

00:11:59,710 --> 00:12:04,810
it was a very very good new procedure to

00:12:03,100 --> 00:12:08,920
adding to our team and it's very

00:12:04,810 --> 00:12:13,960
recommended so when often overlooked

00:12:08,920 --> 00:12:16,660
issue is documentation maybe we think

00:12:13,960 --> 00:12:19,270
that we called so so well that we don't

00:12:16,660 --> 00:12:22,030
need to document our code well no it's

00:12:19,270 --> 00:12:26,290
not that you need to document your call

00:12:22,030 --> 00:12:28,750
as much as you can and do it okay do it

00:12:26,290 --> 00:12:31,420
well in gear of salt for instant we had

00:12:28,750 --> 00:12:36,100
to documentation one for the internal

00:12:31,420 --> 00:12:38,800
team concerning the the reasons of the

00:12:36,100 --> 00:12:42,490
some decisions of design concerning the

00:12:38,800 --> 00:12:45,070
versions the deployment concerning the

00:12:42,490 --> 00:12:47,980
code and we had a different repository

00:12:45,070 --> 00:12:49,570
for the API documentation which was

00:12:47,980 --> 00:12:52,810
meant for those developers who were

00:12:49,570 --> 00:12:55,270
consuming the API and they only there

00:12:52,810 --> 00:12:57,310
for them only responses and status

00:12:55,270 --> 00:13:01,750
matter and everything else is they don't

00:12:57,310 --> 00:13:05,230
mind so we made those two documentation

00:13:01,750 --> 00:13:09,310
and for the new features concerning the

00:13:05,230 --> 00:13:11,590
API we made also pull requests and we

00:13:09,310 --> 00:13:13,900
use this kind of documentation driven

00:13:11,590 --> 00:13:15,440
development which meant that for any you

00:13:13,900 --> 00:13:17,630
any new

00:13:15,440 --> 00:13:19,940
concerning the API we made first a pull

00:13:17,630 --> 00:13:22,610
request into the API documentation

00:13:19,940 --> 00:13:25,310
repository and the colleague in charge

00:13:22,610 --> 00:13:27,440
to review it was someone of the front

00:13:25,310 --> 00:13:30,500
team because they are they were the

00:13:27,440 --> 00:13:33,590
first people using the API so if they

00:13:30,500 --> 00:13:36,050
when we agree with this API

00:13:33,590 --> 00:13:39,280
documentation they've acting to the

00:13:36,050 --> 00:13:41,990
start developing and it's like the

00:13:39,280 --> 00:13:44,030
design by contract but focus on a higher

00:13:41,990 --> 00:13:47,450
level of functionality for us it really

00:13:44,030 --> 00:13:49,340
worked very very good finally and it's

00:13:47,450 --> 00:13:52,510
very important when you are working with

00:13:49,340 --> 00:13:57,020
Django with Python or maybe with other

00:13:52,510 --> 00:13:59,090
open-source tools you are using you are

00:13:57,020 --> 00:14:02,990
taking advantage of the open source

00:13:59,090 --> 00:14:05,900
ecosystem so those tons of libraries

00:14:02,990 --> 00:14:08,690
that make your code better and your life

00:14:05,900 --> 00:14:10,940
happier our part of I ago system

00:14:08,690 --> 00:14:13,220
and it's important that you should give

00:14:10,940 --> 00:14:15,410
something back to the system so when you

00:14:13,220 --> 00:14:18,580
are developing make as much open source

00:14:15,410 --> 00:14:21,350
as you can there are many many ways to

00:14:18,580 --> 00:14:23,630
to contribute is not necessary to be a

00:14:21,350 --> 00:14:26,690
top knocked engineer you can report a

00:14:23,630 --> 00:14:29,450
bug you can fix a bug maybe create a

00:14:26,690 --> 00:14:31,310
tutorial you can create a workshop a

00:14:29,450 --> 00:14:35,720
fantastic works off of jungle girls and

00:14:31,310 --> 00:14:39,800
you can of course release a library if

00:14:35,720 --> 00:14:44,540
you have done this in the Arabs all we

00:14:39,800 --> 00:14:46,490
have sorry inca laters we have contracts

00:14:44,540 --> 00:14:49,010
with our customers and the in the

00:14:46,490 --> 00:14:51,530
contract they agreed to to release

00:14:49,010 --> 00:14:54,380
non-critical code so whenever we are

00:14:51,530 --> 00:14:56,060
working and we need to we discover some

00:14:54,380 --> 00:14:59,810
part that would be useful for others we

00:14:56,060 --> 00:15:02,540
can make that to be a library release

00:14:59,810 --> 00:15:04,520
the library and then we use the Disco

00:15:02,540 --> 00:15:08,300
Dazz an external library but isn't it

00:15:04,520 --> 00:15:12,350
have and it's a available for anyone who

00:15:08,300 --> 00:15:14,750
wants to and also in colliders we have

00:15:12,350 --> 00:15:17,390
developed our own product so we are on

00:15:14,750 --> 00:15:20,510
our customers and we have release it

00:15:17,390 --> 00:15:23,889
from the very beginning it's called Tyga

00:15:20,510 --> 00:15:26,589
young and it's made with Django

00:15:23,889 --> 00:15:28,359
and with angular and we are very happy

00:15:26,589 --> 00:15:31,389
and very proud to share it with the

00:15:28,359 --> 00:15:33,790
community but if you want to sell it you

00:15:31,389 --> 00:15:35,709
want to give in to the while and if you

00:15:33,790 --> 00:15:38,319
want to the community to contribute with

00:15:35,709 --> 00:15:42,850
you you need to follow those steps and

00:15:38,319 --> 00:15:45,489
maybe other steps to make it easy and

00:15:42,850 --> 00:15:48,399
clear how to contribute you need to make

00:15:45,489 --> 00:15:51,399
test documentation and you make to like

00:15:48,399 --> 00:15:53,410
a beautiful API you have to put some

00:15:51,399 --> 00:15:55,899
effort in making things good not only

00:15:53,410 --> 00:15:59,079
for performance but also to share with

00:15:55,899 --> 00:16:02,739
the community these are the 10 are

00:15:59,079 --> 00:16:07,239
lessons that I can give to you I learned

00:16:02,739 --> 00:16:10,449
during two year project me most of them

00:16:07,239 --> 00:16:12,129
applied to any big project but some some

00:16:10,449 --> 00:16:13,629
of them apply specifically for jungle

00:16:12,129 --> 00:16:16,589
because you need to know which are the

00:16:13,629 --> 00:16:19,629
good maintained errs which are the the

00:16:16,589 --> 00:16:23,139
obsolete libraries and and it's

00:16:19,629 --> 00:16:27,629
important to know so I think that that's

00:16:23,139 --> 00:16:27,629
it and do you have any questions

00:16:36,500 --> 00:16:40,639
any questions Kris Medlen

00:16:47,220 --> 00:16:52,569
I'm so you mentioned that you agree the

00:16:50,709 --> 00:16:55,620
documentation for the API up front

00:16:52,569 --> 00:16:59,199
before you started coding did you then

00:16:55,620 --> 00:17:01,240
write the tests against that agreed API

00:16:59,199 --> 00:17:03,759
before you then side coating up the API

00:17:01,240 --> 00:17:05,230
or start done in parallel how did that

00:17:03,759 --> 00:17:07,539
work because it would be really nice to

00:17:05,230 --> 00:17:09,039
go to agree the API and then you know

00:17:07,539 --> 00:17:13,240
you know what the test should be I

00:17:09,039 --> 00:17:18,610
suppose so you are asking if we wrote

00:17:13,240 --> 00:17:20,020
this on the documentation yes oh yes I

00:17:18,610 --> 00:17:21,429
wanted once you've agreed in the

00:17:20,020 --> 00:17:24,459
documentation while the API is going to

00:17:21,429 --> 00:17:25,600
be did you then write tests that then

00:17:24,459 --> 00:17:27,730
obviously fail because you haven't

00:17:25,600 --> 00:17:31,120
written that thing yet I'm gonna write

00:17:27,730 --> 00:17:34,450
the Advocate about documentation we have

00:17:31,120 --> 00:17:36,850
tried several things but in the end what

00:17:34,450 --> 00:17:38,860
we made is just right in the

00:17:36,850 --> 00:17:42,669
documentation by hand because we didn't

00:17:38,860 --> 00:17:44,919
use any specific tool the tests were

00:17:42,669 --> 00:17:48,490
about the implementation so when we

00:17:44,919 --> 00:17:53,250
started implementing we made the test

00:17:48,490 --> 00:17:56,320
maybe TDD for that specific part but the

00:17:53,250 --> 00:17:58,960
synchronizing the API documentation with

00:17:56,320 --> 00:18:04,350
the implementation it's a matter of the

00:17:58,960 --> 00:18:04,350
human effort yeah sure okay thanks

00:18:06,900 --> 00:18:12,720
and a question I have myself you said

00:18:09,620 --> 00:18:14,250
thus your customer agreed for you to

00:18:12,720 --> 00:18:16,260
open source parts of the project was

00:18:14,250 --> 00:18:18,720
that something they were happy to do or

00:18:16,260 --> 00:18:23,450
do they need convincing if they are

00:18:18,720 --> 00:18:23,450
happy yeah well as Amy suggested open so

00:18:23,570 --> 00:18:29,400
they are happy because at the first time

00:18:26,940 --> 00:18:31,770
maybe didn't know us but when we are

00:18:29,400 --> 00:18:34,500
like signing the contract they know us

00:18:31,770 --> 00:18:37,110
and we have like convince them that it's

00:18:34,500 --> 00:18:39,330
very cool to be part of that and of

00:18:37,110 --> 00:18:41,490
course it's mandatory for the first

00:18:39,330 --> 00:18:44,790
thing so if not a decision that we share

00:18:41,490 --> 00:18:47,370
with the customer but but they are not

00:18:44,790 --> 00:18:48,900
like forced they feel comfortable with

00:18:47,370 --> 00:18:51,900
the decision and they feel very happy

00:18:48,900 --> 00:18:54,650
because we have shown them that I am NOT

00:18:51,900 --> 00:18:58,050
implementing my own API i am using

00:18:54,650 --> 00:19:00,840
cameras framework so if they don't want

00:18:58,050 --> 00:19:05,640
to release i will i will write my own

00:19:00,840 --> 00:19:09,510
api and which is crazy so they are happy

00:19:05,640 --> 00:19:11,520
and sometimes they go saying with other

00:19:09,510 --> 00:19:14,490
colleagues like oh we are in this

00:19:11,520 --> 00:19:20,240
open-source technology and so on so they

00:19:14,490 --> 00:19:20,240
are quite a puppy thanks any questions

00:19:25,650 --> 00:19:32,310
thanks for that so you said you were the

00:19:28,590 --> 00:19:33,740
people behind tiger I oh yeah just a

00:19:32,310 --> 00:19:36,180
question i haven't check in a while but

00:19:33,740 --> 00:19:39,360
last time i seen it there was no live

00:19:36,180 --> 00:19:43,200
demo do you have life demo already like

00:19:39,360 --> 00:19:46,650
them of thailand yeah we have Tyga in

00:19:43,200 --> 00:19:48,930
taiga yo Tyga dot IO is the web dude you

00:19:46,650 --> 00:19:52,200
can sign up and you can okay play with

00:19:48,930 --> 00:19:55,860
it and so and you can start it on

00:19:52,200 --> 00:19:58,700
premise so we welcome thanks and if you

00:19:55,860 --> 00:20:04,200
want a specific demo we can talk later

00:19:58,700 --> 00:20:07,070
okay I can review us something in the

00:20:04,200 --> 00:20:07,070
pot

00:20:14,669 --> 00:20:21,899
are you mentioned separation of retinol

00:20:17,879 --> 00:20:23,759
and API mm-hmm so how do you separate it

00:20:21,899 --> 00:20:26,190
and at the same time how do make sure

00:20:23,759 --> 00:20:29,100
that you are actually using the API or

00:20:26,190 --> 00:20:32,460
do you writing a different access

00:20:29,100 --> 00:20:38,190
methods and different code paths for

00:20:32,460 --> 00:20:40,649
your front end um in in our case the

00:20:38,190 --> 00:20:44,279
front team and the back team we are

00:20:40,649 --> 00:20:46,529
together so we agree even the

00:20:44,279 --> 00:20:49,769
architecture from the very beginning but

00:20:46,529 --> 00:20:52,590
nevertheless the in the project we have

00:20:49,769 --> 00:20:55,679
those mock-ups which are the that and

00:20:52,590 --> 00:20:58,590
the design and the customer agrees the

00:20:55,679 --> 00:21:00,570
functionality so as long as the as we

00:20:58,590 --> 00:21:03,049
are exposing the data and the front is

00:21:00,570 --> 00:21:07,619
consuming the data and the customer is

00:21:03,049 --> 00:21:10,950
agreeing with the result we are like if

00:21:07,619 --> 00:21:13,799
the is the only the only proof that we

00:21:10,950 --> 00:21:21,090
can take is the approval of the customer

00:21:13,799 --> 00:21:26,869
I think is that what you asked in ok any

00:21:21,090 --> 00:21:26,869
more questions no ok thanks very much

00:21:31,380 --> 00:21:33,440

YouTube URL: https://www.youtube.com/watch?v=5hULMNzKgJg


