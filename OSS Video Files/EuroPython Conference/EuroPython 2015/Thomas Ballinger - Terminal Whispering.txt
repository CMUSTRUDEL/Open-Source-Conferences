Title: Thomas Ballinger - Terminal Whispering
Publication date: 2015-08-08
Playlist: EuroPython 2015
Description: 
	Thomas Ballinger - Terminal Whispering
[EuroPython 2015]
[23 July 2015]
[Bilbao, Euskadi, Spain]

The terminal emulators we run so many of our programming tools in are
more powerful than we remember to give them credit for, and the key to
that power is understanding the interface. This talk will cover
terminal colors and styles, writing to arbitrary portions of the
screen, handling signals from the terminal, determining the terminal's
dimensions and scrollback buffer behavior.

Terminal programming can get hairy; along the way we'll deal with
encoding issues, consider cross platform concerns, acknowledge 4
decades' worth of standards for terminal communication, and consider
that humans at interactive terminals may not be the only users of our
interfaces. By gaining an understanding of these issues, we'll be able
choose from the abstractions over them offered by Python libraries
Urwid, Blessings, and Python Prompt Toolkit.

This talk requires minimal Python knowledge, but does assume
familiarity with command line tools in a unix environment.

An abbreviated version of this talk was presented at PyCon 2015 in
MontrÃ©al: https://www.youtube.com/watch?v=WAitSilLDUA With the
additional time I'd hope to present more code examples, a more in-
depth tour of existing libraries and more practical advice about
writing programs that use the terminal, and an additional example of a
difficult terminal details: dealing with reflowing of text in modern
terminal emulators like GNOME Terminal and iTerm.
Captions: 
	00:00:01,310 --> 00:00:05,580
and we already know how to do that

00:00:03,870 --> 00:00:06,690
pretty much we're gonna say print and

00:00:05,580 --> 00:00:08,220
we'll see that anything on the next line

00:00:06,690 --> 00:00:09,780
here's something interesting I just did

00:00:08,220 --> 00:00:11,309
get status and we saw some stuff in

00:00:09,780 --> 00:00:13,410
color here's something else interesting

00:00:11,309 --> 00:00:14,490
I just used LS and I should mention it

00:00:13,410 --> 00:00:17,190
for this presentation if you've got a

00:00:14,490 --> 00:00:19,619
computer with you and you can get to a

00:00:17,190 --> 00:00:21,029
you know unix-style terminal there's

00:00:19,619 --> 00:00:22,710
some stuff you can try interactively and

00:00:21,029 --> 00:00:24,539
one of the things you should try is LS

00:00:22,710 --> 00:00:26,550
here because you'll see that as you

00:00:24,539 --> 00:00:29,550
change the size of your terminal

00:00:26,550 --> 00:00:31,619
emulator window the output of LS changes

00:00:29,550 --> 00:00:34,079
it dynamically decides how many columns

00:00:31,619 --> 00:00:34,739
of output to use based on the size of

00:00:34,079 --> 00:00:36,630
your terminal

00:00:34,739 --> 00:00:39,540
so there's another kind of mystery that

00:00:36,630 --> 00:00:41,460
we'd like to solve today how to do color

00:00:39,540 --> 00:00:43,410
how to do LS so that's doing different

00:00:41,460 --> 00:00:44,700
things differently also LS gives you

00:00:43,410 --> 00:00:45,600
different output if you're piping it

00:00:44,700 --> 00:00:47,430
versus if you're looking at it

00:00:45,600 --> 00:00:50,449
interactively so those are some of the

00:00:47,430 --> 00:00:52,469
things that we'd like to learn how to do

00:00:50,449 --> 00:00:54,420
here's some other ways that we use our

00:00:52,469 --> 00:00:56,579
terminals we've got top here which is

00:00:54,420 --> 00:00:57,989
filling up the whole screen and maybe we

00:00:56,579 --> 00:01:00,420
couldn't know how to do that by printing

00:00:57,989 --> 00:01:01,920
a bunch of text really quickly and then

00:01:00,420 --> 00:01:03,420
waiting and then printing it again but

00:01:01,920 --> 00:01:05,790
that's not what's happening because as

00:01:03,420 --> 00:01:06,720
we soon we quit it all goes away so

00:01:05,790 --> 00:01:08,700
there's something else going on here

00:01:06,720 --> 00:01:11,369
that's there's a third or fourth mystery

00:01:08,700 --> 00:01:15,119
if you're keeping count how many another

00:01:11,369 --> 00:01:17,490
thing is is once we know how to save

00:01:15,119 --> 00:01:19,500
build up an interface like this we're

00:01:17,490 --> 00:01:20,909
gonna be able to do stuff like I just

00:01:19,500 --> 00:01:23,220
went to quickly we're gonna be able to

00:01:20,909 --> 00:01:25,530
do things like build a fully windowed

00:01:23,220 --> 00:01:27,150
system we can build basically graphical

00:01:25,530 --> 00:01:29,700
user interface applications we're gonna

00:01:27,150 --> 00:01:31,650
call text user interfaces this is PUD B

00:01:29,700 --> 00:01:33,770
it's the debugger that I like to use

00:01:31,650 --> 00:01:37,439
it's kind of a nice interface over P DB

00:01:33,770 --> 00:01:38,880
and you can imagine you have a lot of

00:01:37,439 --> 00:01:39,990
opportunities open to you as soon as you

00:01:38,880 --> 00:01:41,759
want to use your interface you don't

00:01:39,990 --> 00:01:43,470
have to jump to QT you don't have to go

00:01:41,759 --> 00:01:45,720
to the web you could use something like

00:01:43,470 --> 00:01:47,009
this and even if you take nothing else

00:01:45,720 --> 00:01:49,530
from this talk this is a great debugger

00:01:47,009 --> 00:01:51,329
you should you should use it all right

00:01:49,530 --> 00:01:53,460
what our terminal is what what I mean by

00:01:51,329 --> 00:01:55,470
this is when I say the word terminal I'm

00:01:53,460 --> 00:01:56,939
talking about this thing you can see

00:01:55,470 --> 00:01:58,170
I've even got them a little Mac thing

00:01:56,939 --> 00:02:00,360
there that's sort of important because

00:01:58,170 --> 00:02:01,950
this is only gonna be relevant to UNIX

00:02:00,360 --> 00:02:03,479
terminals portions of this are relevant

00:02:01,950 --> 00:02:04,740
to Windows things but I'm not gonna I

00:02:03,479 --> 00:02:08,129
don't know how much I'm not gonna go

00:02:04,740 --> 00:02:09,780
into how much I need a terminal emulator

00:02:08,129 --> 00:02:11,220
and we say emulator because the thing

00:02:09,780 --> 00:02:15,690
that we're emulating is these things

00:02:11,220 --> 00:02:17,459
video terminals but a video terminal is

00:02:15,690 --> 00:02:19,440
already a meeting something else and

00:02:17,459 --> 00:02:21,390
that was originally a teletype machine

00:02:19,440 --> 00:02:24,750
maybe an electronic typewriter that

00:02:21,390 --> 00:02:26,550
sends signals these have been around for

00:02:24,750 --> 00:02:28,620
about a hundred years we've had these

00:02:26,550 --> 00:02:30,000
for a long time we had a typewriter and

00:02:28,620 --> 00:02:32,610
you could change it so that it sent

00:02:30,000 --> 00:02:36,050
signals I'm gonna read a little bit of

00:02:32,610 --> 00:02:38,670
text from an ad from 1957 this was the

00:02:36,050 --> 00:02:42,780
50th anniversary year of a teletype

00:02:38,670 --> 00:02:44,640
corporation see a teletype printer is a

00:02:42,780 --> 00:02:46,379
communications device with a keyboard

00:02:44,640 --> 00:02:48,660
similar to a typewriter that enables you

00:02:46,379 --> 00:02:50,819
to send and receive printed messages so

00:02:48,660 --> 00:02:53,340
this is this is copy for maybe a

00:02:50,819 --> 00:02:54,330
business person in the 50s to figure out

00:02:53,340 --> 00:02:56,310
that they wanted to one of these things

00:02:54,330 --> 00:02:57,420
they say things like with it you can

00:02:56,310 --> 00:02:59,340
send

00:02:57,420 --> 00:03:01,560
wouldn't written word can be sent

00:02:59,340 --> 00:03:03,480
instantaneously by wire within the

00:03:01,560 --> 00:03:05,760
office or plant or clear across the

00:03:03,480 --> 00:03:08,760
country to a single destination or many

00:03:05,760 --> 00:03:10,500
at a time so we're starting with this

00:03:08,760 --> 00:03:12,659
model of a terminal as basically a

00:03:10,500 --> 00:03:14,340
typewriter where it's not connected to

00:03:12,659 --> 00:03:16,709
anything your finger hits a key that

00:03:14,340 --> 00:03:19,860
causes the you know the arm actuator

00:03:16,709 --> 00:03:22,140
thing to hit to put ink on paper that's

00:03:19,860 --> 00:03:23,370
our beginner but then we add the

00:03:22,140 --> 00:03:24,540
teletype part where we're sending a

00:03:23,370 --> 00:03:26,430
signal over a metal wire to an

00:03:24,540 --> 00:03:28,140
application maybe that's a telegraph

00:03:26,430 --> 00:03:30,510
operator somewhere else in another part

00:03:28,140 --> 00:03:33,659
of the country maybe that's a computer

00:03:30,510 --> 00:03:35,340
program and then maybe we send send

00:03:33,659 --> 00:03:37,080
signals back somehow I don't know

00:03:35,340 --> 00:03:39,959
there's maybe some metal wire involved

00:03:37,080 --> 00:03:41,670
signal processing or something let's

00:03:39,959 --> 00:03:43,560
look at a modernized version we're gonna

00:03:41,670 --> 00:03:46,680
say we have these system calls like f

00:03:43,560 --> 00:03:48,780
read to return bytes we have F right

00:03:46,680 --> 00:03:50,700
we're just gonna print things and now

00:03:48,780 --> 00:03:52,349
we're using a terminal emulator there's

00:03:50,700 --> 00:03:53,580
some gooey stuff that happens that we're

00:03:52,349 --> 00:03:55,590
not gonna get into to get this stuff to

00:03:53,580 --> 00:03:59,189
the screen and still keep presses right

00:03:55,590 --> 00:04:01,080
go to the terminal because this is the

00:03:59,189 --> 00:04:03,209
Python talk we're gonna talk about print

00:04:01,080 --> 00:04:08,299
and input instead this is a Python 3

00:04:03,209 --> 00:04:10,200
talk so input means Ryan put in Python 2

00:04:08,299 --> 00:04:11,879
the first thing we should look at is

00:04:10,200 --> 00:04:13,980
what bytes we can write to a terminal

00:04:11,879 --> 00:04:15,810
and what happens when we write them so

00:04:13,980 --> 00:04:18,509
I've grayed out if you can tell some of

00:04:15,810 --> 00:04:19,949
the reading portions there well what

00:04:18,509 --> 00:04:22,079
bytes can be sent first off we can send

00:04:19,949 --> 00:04:24,550
ASCII bytes this is kind of boring for

00:04:22,079 --> 00:04:27,039
most part we have literals

00:04:24,550 --> 00:04:29,139
Python 3 here you can say sis not

00:04:27,039 --> 00:04:30,940
standard out dot buffer dot right and

00:04:29,139 --> 00:04:32,620
then send some bytes those will end up

00:04:30,940 --> 00:04:35,470
at your terminal you can try this now if

00:04:32,620 --> 00:04:38,800
you want and then we also have control

00:04:35,470 --> 00:04:41,349
characters that we can send these are

00:04:38,800 --> 00:04:43,690
like the really small ASCII bytes all

00:04:41,349 --> 00:04:47,740
right let's give us a shot here saying

00:04:43,690 --> 00:04:50,490
that I was going to try this here

00:04:47,740 --> 00:04:53,729
imports oops

00:04:50,490 --> 00:04:59,770
important sis and we're gonna do sis dot

00:04:53,729 --> 00:05:02,590
stand out dot buffer dot right we could

00:04:59,770 --> 00:05:03,759
write some byte string here but this is

00:05:02,590 --> 00:05:05,080
gonna be a little confusing to look at

00:05:03,759 --> 00:05:06,909
because we've got a return value down

00:05:05,080 --> 00:05:09,009
here so I'm gonna do something a little

00:05:06,909 --> 00:05:11,110
bit different and you can do this too

00:05:09,009 --> 00:05:13,000
you've got computer there I'm gonna run

00:05:11,110 --> 00:05:15,099
a server over here that's just listening

00:05:13,000 --> 00:05:17,110
for bytes so we're not gonna see the

00:05:15,099 --> 00:05:21,250
input and output interleaved and then

00:05:17,110 --> 00:05:23,860
over here we're gonna do import socket I

00:05:21,250 --> 00:05:27,900
see little socket on socket that's done

00:05:23,860 --> 00:05:31,060
let me connect this thing and let's send

00:05:27,900 --> 00:05:33,159
some bikes great alright so now we can

00:05:31,060 --> 00:05:34,930
tell that when we send ASCII bytes we

00:05:33,159 --> 00:05:39,610
get simple things like this we're just

00:05:34,930 --> 00:05:41,529
sending them over here's our ASCII table

00:05:39,610 --> 00:05:43,330
we're looking right now at the ones on

00:05:41,529 --> 00:05:44,800
the right kind of boring but there's all

00:05:43,330 --> 00:05:46,300
this other stuff that n remember this

00:05:44,800 --> 00:05:48,400
all makes sense in the context of a

00:05:46,300 --> 00:05:51,849
typewriter ASCII things are this is this

00:05:48,400 --> 00:05:53,620
is typewriter x so what do these do

00:05:51,849 --> 00:05:56,469
let's look at it let's try a few of them

00:05:53,620 --> 00:05:58,150
now one we could try that you'll

00:05:56,469 --> 00:06:01,930
probably know what's gonna happen here

00:05:58,150 --> 00:06:05,349
is that send what happens when we write

00:06:01,930 --> 00:06:06,490
a newline guesses as to what's gonna

00:06:05,349 --> 00:06:07,750
happen there this is this one you should

00:06:06,490 --> 00:06:10,300
be able to predicts because we write new

00:06:07,750 --> 00:06:12,819
lines all the time the cursor went down

00:06:10,300 --> 00:06:14,940
to the next line okay you can sort of

00:06:12,819 --> 00:06:18,639
imagine that's what would have happens

00:06:14,940 --> 00:06:23,440
let's try something else here we're

00:06:18,639 --> 00:06:26,199
gonna write now a backslash of b ideas

00:06:23,440 --> 00:06:29,860
what's gonna happen here and once use

00:06:26,199 --> 00:06:32,379
this one look you look the cursor is

00:06:29,860 --> 00:06:33,699
moving backwards so this is a thing that

00:06:32,379 --> 00:06:35,770
sort of makes sense on a typewriter you

00:06:33,699 --> 00:06:37,960
could move it back and forth and now we

00:06:35,770 --> 00:06:40,750
could do something like

00:06:37,960 --> 00:06:41,800
overwrite that with a space so you could

00:06:40,750 --> 00:06:44,110
see how we can implement make it

00:06:41,800 --> 00:06:46,780
backspace thing um maybe we could also

00:06:44,110 --> 00:06:48,940
do a carriage return which means move

00:06:46,780 --> 00:06:50,830
the carriage of the typewriter back to

00:06:48,940 --> 00:06:53,440
where I started and that was the cursor

00:06:50,830 --> 00:06:56,050
over here so we've just unlocked the

00:06:53,440 --> 00:06:58,569
power well the ability to rewrite a line

00:06:56,050 --> 00:07:01,990
and what that lets us do is progress

00:06:58,569 --> 00:07:03,849
bars so here the program that has a

00:07:01,990 --> 00:07:04,960
progress bar we can now do this just

00:07:03,849 --> 00:07:06,430
with this knowledge of being able to

00:07:04,960 --> 00:07:10,810
write a carriage return to rewrite the

00:07:06,430 --> 00:07:12,370
current line how would we go about doing

00:07:10,810 --> 00:07:14,199
that in Python that we might do

00:07:12,370 --> 00:07:15,789
something like this just the general

00:07:14,199 --> 00:07:18,639
shape of the code the important parts

00:07:15,789 --> 00:07:20,680
here are let's see that we're flushing

00:07:18,639 --> 00:07:22,180
so there are some buffering going on it

00:07:20,680 --> 00:07:23,560
will look like it a little bit later but

00:07:22,180 --> 00:07:25,389
it may be important to flush if you're

00:07:23,560 --> 00:07:26,949
writing not writing a new line we're

00:07:25,389 --> 00:07:28,599
writing a standard error also we're not

00:07:26,949 --> 00:07:30,009
writing byte strings anymore this is

00:07:28,599 --> 00:07:32,289
still Python 3 but now we're writing

00:07:30,009 --> 00:07:36,729
right I hope this Python 3 but now we're

00:07:32,289 --> 00:07:38,680
writing unicode strings and we'll get in

00:07:36,729 --> 00:07:40,060
a little bit to how that works but this

00:07:38,680 --> 00:07:42,610
code would work perfectly well for

00:07:40,060 --> 00:07:44,139
progress bar so now you can add progress

00:07:42,610 --> 00:07:45,909
bars to your interactive tools who

00:07:44,139 --> 00:07:48,099
writes command-line tools that someone

00:07:45,909 --> 00:07:49,720
might run in a terminal sometime right

00:07:48,099 --> 00:07:51,849
oh we need utilities for this all the

00:07:49,720 --> 00:07:55,320
time it can be fun to add some of these

00:07:51,849 --> 00:07:57,550
features to them so what else we've got

00:07:55,320 --> 00:08:00,759
all right so we can do terminal encoding

00:07:57,550 --> 00:08:02,590
say that we're terminals generally have

00:08:00,759 --> 00:08:04,570
an encoding in fact Lee had it the whole

00:08:02,590 --> 00:08:06,460
time but the ASCII stuff overlaps

00:08:04,570 --> 00:08:08,800
because it was utf-8 if you try this I

00:08:06,460 --> 00:08:10,719
won't try it now but this gives us an na

00:08:08,800 --> 00:08:12,130
and then we can just say assist dot

00:08:10,719 --> 00:08:13,930
standard out dot right if we're using

00:08:12,130 --> 00:08:18,070
Unicode strings because I don't we'll

00:08:13,930 --> 00:08:19,210
take care of the encoding for us now

00:08:18,070 --> 00:08:19,780
let's talk about some things that don't

00:08:19,210 --> 00:08:21,969
make sense

00:08:19,780 --> 00:08:24,070
on typewriters these only really make

00:08:21,969 --> 00:08:26,650
sense on these video terminals on the

00:08:24,070 --> 00:08:32,820
ansi escape sequences before we look at

00:08:26,650 --> 00:08:32,820
them let's try one here I'm gonna write

00:08:33,300 --> 00:08:37,479
slash x1 B if you're not familiar with

00:08:36,159 --> 00:08:38,919
this syntax this is a way of specifying

00:08:37,479 --> 00:08:45,250
a byte that doesn't have a nice

00:08:38,919 --> 00:08:47,140
printable representation open 33m oh it

00:08:45,250 --> 00:08:49,170
doesn't look like anything happens all

00:08:47,140 --> 00:08:50,940
right so the lesson here well

00:08:49,170 --> 00:08:53,820
less to get less when we're about to

00:08:50,940 --> 00:08:55,500
learn is that terminals have state so

00:08:53,820 --> 00:08:56,940
when I've sent those bytes it said oh

00:08:55,500 --> 00:08:59,040
I'm gonna start writing in yellow now

00:08:56,940 --> 00:09:01,620
and then when I sent more bytes we're

00:08:59,040 --> 00:09:04,260
still stuck in this yellow mode so this

00:09:01,620 --> 00:09:05,910
is the kind of thing that you know it's

00:09:04,260 --> 00:09:07,230
good to know the way you signal this to

00:09:05,910 --> 00:09:08,970
the terminal is you send it some special

00:09:07,230 --> 00:09:10,380
bytes and some of the bytes don't mean

00:09:08,970 --> 00:09:13,579
put characters on the screen they mean

00:09:10,380 --> 00:09:15,510
change your state for future invocations

00:09:13,579 --> 00:09:17,010
let's look up some of the other kinds of

00:09:15,510 --> 00:09:19,139
things we can do here

00:09:17,010 --> 00:09:20,430
these Anthony of the were dancing

00:09:19,139 --> 00:09:22,829
implies or some standardization that

00:09:20,430 --> 00:09:24,600
happened here right we can move the

00:09:22,829 --> 00:09:26,699
cursor around the screen we can clear

00:09:24,600 --> 00:09:27,990
the entire screen we can hide the cursor

00:09:26,699 --> 00:09:29,339
so that you can print things without

00:09:27,990 --> 00:09:31,019
seeing where the cursor is writing right

00:09:29,339 --> 00:09:34,529
now start writing in bold start writing

00:09:31,019 --> 00:09:36,000
in red so there's a lot of this and you

00:09:34,529 --> 00:09:38,370
can just start playing with this now a

00:09:36,000 --> 00:09:40,350
great Wikipedia page as we went on Nancy

00:09:38,370 --> 00:09:42,360
escape sequences which describes hey

00:09:40,350 --> 00:09:43,620
here's how to write in red here's how to

00:09:42,360 --> 00:09:47,490
write in blue here's how to make

00:09:43,620 --> 00:09:51,630
something bold so now look a little

00:09:47,490 --> 00:09:54,570
parable say it's it's 19 we start this

00:09:51,630 --> 00:09:55,980
so it's the years 1984 that you can do

00:09:54,570 --> 00:09:59,640
this live it I think he has it up right

00:09:55,980 --> 00:10:00,839
now and you log into some BBS system or

00:09:59,640 --> 00:10:02,820
something you tell that somewhere and

00:10:00,839 --> 00:10:04,529
start sending you sequences and it's

00:10:02,820 --> 00:10:05,940
really cool like maybe you're 12 and you

00:10:04,529 --> 00:10:09,170
think it's really cool or maybe you're

00:10:05,940 --> 00:10:11,399
14 you think it's really cool but

00:10:09,170 --> 00:10:13,350
unfortunately on your friends you know

00:10:11,399 --> 00:10:14,880
terminal these show up correctly but on

00:10:13,350 --> 00:10:16,890
yours they don't quite show up right so

00:10:14,880 --> 00:10:19,920
this is the kind of first iteration of

00:10:16,890 --> 00:10:22,949
who uses JavaScript sometimes a little

00:10:19,920 --> 00:10:25,079
bit who uses jQuery so there's this

00:10:22,949 --> 00:10:27,540
thing called jQuery and JavaScript that

00:10:25,079 --> 00:10:29,279
became popular for in this abridged

00:10:27,540 --> 00:10:31,769
history of I'm telling have two main

00:10:29,279 --> 00:10:33,540
reasons one it papered over differences

00:10:31,769 --> 00:10:35,490
in browsers and this was huge right

00:10:33,540 --> 00:10:36,990
their browser incompatibilities so we

00:10:35,490 --> 00:10:38,459
have that same problem with terminals um

00:10:36,990 --> 00:10:41,819
different terminals behaved differently

00:10:38,459 --> 00:10:43,470
we still have us to some extent but like

00:10:41,819 --> 00:10:44,970
Jake where it's less necessary now

00:10:43,470 --> 00:10:46,380
because things are more standardised

00:10:44,970 --> 00:10:49,110
people are more likely to be using the

00:10:46,380 --> 00:10:50,699
same kinds of terminals the other reason

00:10:49,110 --> 00:10:52,260
I think jQuery became popular is it's a

00:10:50,699 --> 00:10:54,779
nice interface and we're gonna look at

00:10:52,260 --> 00:10:56,100
some libraries and Python that's

00:10:54,779 --> 00:10:59,270
similarly give you a better interface

00:10:56,100 --> 00:11:01,430
than the native one

00:10:59,270 --> 00:11:03,260
so we have compatibility concerns I was

00:11:01,430 --> 00:11:04,730
talking about the first things we did

00:11:03,260 --> 00:11:05,930
that were come up with databases of

00:11:04,730 --> 00:11:07,340
different terminals how you do these

00:11:05,930 --> 00:11:10,040
different capabilities in different

00:11:07,340 --> 00:11:13,310
terminals term cap and then term info

00:11:10,040 --> 00:11:15,710
did this then we wrote in a library for

00:11:13,310 --> 00:11:17,780
applications to use called curses that

00:11:15,710 --> 00:11:19,640
accesses these databases and lets you

00:11:17,780 --> 00:11:21,110
say oh I want to draw a square and it

00:11:19,640 --> 00:11:24,080
will figure out how to do that and some

00:11:21,110 --> 00:11:26,330
lower-level things too on your machine

00:11:24,080 --> 00:11:28,610
you can probably say man T put or do a

00:11:26,330 --> 00:11:31,670
try T put space and you have to know

00:11:28,610 --> 00:11:34,010
some magic sequences and that will and

00:11:31,670 --> 00:11:36,280
look up in that database how to make

00:11:34,010 --> 00:11:38,360
things read how to move the cursor up

00:11:36,280 --> 00:11:40,640
and then another thing you can look at

00:11:38,360 --> 00:11:42,200
is info CMP was gonna dump like

00:11:40,640 --> 00:11:47,030
information about these mappings with

00:11:42,200 --> 00:11:49,070
your particular terminal set up here is

00:11:47,030 --> 00:11:50,510
an example so something you can do if

00:11:49,070 --> 00:11:52,730
you don't want to learn the Python ways

00:11:50,510 --> 00:11:55,070
to do this you can shell out and say hey

00:11:52,730 --> 00:11:56,810
I want to clear the screen and that's

00:11:55,070 --> 00:11:58,040
maybe easier to learn but we don't want

00:11:56,810 --> 00:11:59,630
to do that you can do these kinds of

00:11:58,040 --> 00:12:02,900
things probably in bash to probably

00:11:59,630 --> 00:12:04,670
system commands you have but instead we

00:12:02,900 --> 00:12:06,680
want to use blessings blessings is a

00:12:04,670 --> 00:12:08,150
wrapper over curses which is the normal

00:12:06,680 --> 00:12:09,830
kind of interface that we use for

00:12:08,150 --> 00:12:11,030
accessing these databases of how to do a

00:12:09,830 --> 00:12:13,750
different thing in a different terminal

00:12:11,030 --> 00:12:15,860
but it's much nicer here we're doing

00:12:13,750 --> 00:12:17,330
print this and thing in bold now the

00:12:15,860 --> 00:12:19,070
important thing to know about blessings

00:12:17,330 --> 00:12:22,040
is that mostly it just gives you strings

00:12:19,070 --> 00:12:23,810
so T dot bold of hi there is gonna be a

00:12:22,040 --> 00:12:26,330
string and it's still your job to print

00:12:23,810 --> 00:12:27,290
that string but it's gonna be built for

00:12:26,330 --> 00:12:31,580
you so you don't have to type in those

00:12:27,290 --> 00:12:33,440
escape sequences right so let's solve

00:12:31,580 --> 00:12:36,410
the fullscreen mystery with blessings so

00:12:33,440 --> 00:12:37,910
we saw before that using top the entire

00:12:36,410 --> 00:12:41,510
screen was taken up we could write

00:12:37,910 --> 00:12:48,310
things and then all went away so one

00:12:41,510 --> 00:12:51,170
more of these let's try from blessings

00:12:48,310 --> 00:12:55,600
import terminal we build one of these

00:12:51,170 --> 00:12:55,600
things which looks at our settings

00:12:56,550 --> 00:13:00,000
this looks at our settings and figures

00:12:58,709 --> 00:13:01,350
out oh you have this kind of terminal

00:13:00,000 --> 00:13:04,399
looking at the environmental variable

00:13:01,350 --> 00:13:10,940
term and then we can say something like

00:13:04,399 --> 00:13:14,930
what we're gonna send here is T dot

00:13:10,940 --> 00:13:17,310
let's do enter enter full screen and

00:13:14,930 --> 00:13:19,050
then we're gonna encode that for our

00:13:17,310 --> 00:13:20,399
terminal and now we recommend full

00:13:19,050 --> 00:13:21,740
screen thing you can see it kept the

00:13:20,399 --> 00:13:23,490
current line and there's some some

00:13:21,740 --> 00:13:26,040
differences in how four different

00:13:23,490 --> 00:13:29,839
terminals do this but now we can write

00:13:26,040 --> 00:13:35,390
stuff and then we could send our exit

00:13:29,839 --> 00:13:35,390
and we're back into our original one

00:13:37,010 --> 00:13:40,620
alright so these are some of the kinds

00:13:38,880 --> 00:13:42,120
of things we can do by writing bytes to

00:13:40,620 --> 00:13:45,680
the terminal so this is just knowing the

00:13:42,120 --> 00:13:48,060
language to speak it's kind of in in

00:13:45,680 --> 00:13:49,770
in-band signaling where we send bytes

00:13:48,060 --> 00:13:52,410
some of the bytes don't result on things

00:13:49,770 --> 00:13:53,550
being on the screen high curse or

00:13:52,410 --> 00:13:56,250
alternate screen you can read them for

00:13:53,550 --> 00:13:57,330
yourself and you can read man pages that

00:13:56,250 --> 00:13:59,790
will tell you more about how these

00:13:57,330 --> 00:14:01,770
different ones work alright next let's

00:13:59,790 --> 00:14:04,860
talk about what happens when the user

00:14:01,770 --> 00:14:06,750
types of the keyboard you probably are

00:14:04,860 --> 00:14:08,970
familiar with you can say raw input or

00:14:06,750 --> 00:14:10,649
input in Python and it's gonna wait

00:14:08,970 --> 00:14:14,070
until the user types a whole line of

00:14:10,649 --> 00:14:17,040
text and then hits Enter so how does

00:14:14,070 --> 00:14:18,120
that how does that kind of work first

00:14:17,040 --> 00:14:21,329
off there's this thing called the line

00:14:18,120 --> 00:14:23,490
discipline which describes when you hit

00:14:21,329 --> 00:14:25,020
what keys what's gonna do when these

00:14:23,490 --> 00:14:28,770
bytes become available to the

00:14:25,020 --> 00:14:30,540
application from a read call you can

00:14:28,770 --> 00:14:31,920
kind of play with see you know how this

00:14:30,540 --> 00:14:33,990
is implemented in the kernel and you can

00:14:31,920 --> 00:14:36,060
see how they're implemented by playing

00:14:33,990 --> 00:14:37,380
with Trikke if you type cat and then

00:14:36,060 --> 00:14:38,910
type some stuff you'll see that you

00:14:37,380 --> 00:14:39,510
don't have control a you don't have

00:14:38,910 --> 00:14:42,420
control

00:14:39,510 --> 00:14:45,329
e as your kind of Emacs style read lines

00:14:42,420 --> 00:14:46,709
shortcuts all of you have is kind of

00:14:45,329 --> 00:14:49,380
reprint because we list them here

00:14:46,709 --> 00:14:52,709
backspace delete word reprint delete

00:14:49,380 --> 00:14:54,899
line and the application can't get that

00:14:52,709 --> 00:14:59,820
what the contents of that buffer until

00:14:54,899 --> 00:15:02,700
you hit enter and then there are a lot

00:14:59,820 --> 00:15:04,290
of other terminal settings this is look

00:15:02,700 --> 00:15:08,410
one that we're gonna use as an example

00:15:04,290 --> 00:15:10,390
is echoing so normally right when

00:15:08,410 --> 00:15:12,220
let's go back to our typewriter analogy

00:15:10,390 --> 00:15:14,830
if you have a typewriter your finger

00:15:12,220 --> 00:15:17,170
hits the key ink goes to the paper right

00:15:14,830 --> 00:15:19,120
now and then a signal is sent and then

00:15:17,170 --> 00:15:20,500
maybe on this maybe copper line it comes

00:15:19,120 --> 00:15:22,450
back and the teletypewriter could do

00:15:20,500 --> 00:15:24,940
something else but it's always gonna hit

00:15:22,450 --> 00:15:26,380
there right hitting the key the act of

00:15:24,940 --> 00:15:29,080
hitting the key causes anger to go to

00:15:26,380 --> 00:15:31,030
paper so it doesn't make sense I mean

00:15:29,080 --> 00:15:32,320
that's where this echoing thing comes

00:15:31,030 --> 00:15:35,110
from but we're not stuck with that

00:15:32,320 --> 00:15:36,460
anymore with our video terminals and the

00:15:35,110 --> 00:15:38,440
way we're gonna do this is with this

00:15:36,460 --> 00:15:40,690
other interface is out-of-band signaling

00:15:38,440 --> 00:15:41,800
where I say to kind of get and set here

00:15:40,690 --> 00:15:43,930
we can get and set these different

00:15:41,800 --> 00:15:44,980
attributes about the terminal and say

00:15:43,930 --> 00:15:48,330
you know what I don't actually want you

00:15:44,980 --> 00:15:50,980
to every time you hit a key show that

00:15:48,330 --> 00:15:52,450
let's look at those here again the

00:15:50,980 --> 00:15:54,610
relevant man pages are probably the best

00:15:52,450 --> 00:15:56,200
place to read exactly about how to do

00:15:54,610 --> 00:16:01,600
this but we're just gonna skip that and

00:15:56,200 --> 00:16:03,550
talk in detail about echoing sqv why -

00:16:01,600 --> 00:16:05,800
echo turns off echo so this is a command

00:16:03,550 --> 00:16:07,600
line program you probably have and then

00:16:05,800 --> 00:16:15,520
you can write echoes turned off we can

00:16:07,600 --> 00:16:18,960
try this real quick oh now I can type

00:16:15,520 --> 00:16:23,740
but you can't see it oh and then we can

00:16:18,960 --> 00:16:25,570
stty echo now we're back when your

00:16:23,740 --> 00:16:27,910
terminals no weird say state you'll

00:16:25,570 --> 00:16:30,370
probably want to type reset like this if

00:16:27,910 --> 00:16:32,590
it doesn't help so who's who's catted of

00:16:30,370 --> 00:16:34,090
a binary file or somehow your terminal

00:16:32,590 --> 00:16:37,450
gets into a pretty weird state through a

00:16:34,090 --> 00:16:38,440
weird font maybe it gets messed up and

00:16:37,450 --> 00:16:40,720
you're like shoot what am I gonna do

00:16:38,440 --> 00:16:42,250
okay so you want to type reset and then

00:16:40,720 --> 00:16:43,240
when that doesn't work you probably want

00:16:42,250 --> 00:16:44,320
to type it again because there was

00:16:43,240 --> 00:16:45,760
something already in the buffer that

00:16:44,320 --> 00:16:48,220
made it so you what you actually typed

00:16:45,760 --> 00:16:50,410
was blah blah blah reset so that's

00:16:48,220 --> 00:16:52,390
that's the other big hint from this type

00:16:50,410 --> 00:16:54,790
reset twice that I feel like that saves

00:16:52,390 --> 00:16:56,260
me a lot so we could turn back on echo

00:16:54,790 --> 00:16:58,060
here let's do it in Python though we

00:16:56,260 --> 00:16:59,950
want to using Python there is get pass

00:16:58,060 --> 00:17:01,660
in the standard library which uses this

00:16:59,950 --> 00:17:02,620
so let's look at the source for get pass

00:17:01,660 --> 00:17:05,920
and see how that works

00:17:02,620 --> 00:17:07,870
I had mostly so this is real code from

00:17:05,920 --> 00:17:09,640
the Python standard library I would

00:17:07,870 --> 00:17:13,569
worry about just the shape of this

00:17:09,640 --> 00:17:15,100
generally term iOS TC getattr is the the

00:17:13,569 --> 00:17:16,660
thing that we're saying like hey show me

00:17:15,100 --> 00:17:18,400
the status of all those knobs and then

00:17:16,660 --> 00:17:20,560
you do some bit math stuff and you say

00:17:18,400 --> 00:17:21,820
set the knobs in these ways I'm calling

00:17:20,560 --> 00:17:23,320
them knobs because imagine we

00:17:21,820 --> 00:17:24,730
have our video terminal right here maybe

00:17:23,320 --> 00:17:26,140
there's a knob on it and it comes

00:17:24,730 --> 00:17:28,240
through and says hey please set your

00:17:26,140 --> 00:17:29,080
terminal in this mode you say oh okay

00:17:28,240 --> 00:17:30,910
I'll do that

00:17:29,080 --> 00:17:33,010
that's kind of what we're doing here

00:17:30,910 --> 00:17:35,800
then really important we have the Tri

00:17:33,010 --> 00:17:38,620
finally so the terminal is a resource

00:17:35,800 --> 00:17:40,060
external to your program so if you don't

00:17:38,620 --> 00:17:43,390
want to mess it up in that way that

00:17:40,060 --> 00:17:45,460
happens to us all the time and then you

00:17:43,390 --> 00:17:46,480
should be careful about you know you

00:17:45,460 --> 00:17:49,300
wouldn't have done that when I have an

00:17:46,480 --> 00:17:50,920
error without and then not clean up

00:17:49,300 --> 00:17:52,540
after yourself and then not restore the

00:17:50,920 --> 00:17:54,310
terminal to that echo state and that's

00:17:52,540 --> 00:17:56,590
when you have to type reset so we want

00:17:54,310 --> 00:17:59,380
to do this but it's Python so this would

00:17:56,590 --> 00:18:00,640
be a good fit for a context manager in

00:17:59,380 --> 00:18:02,050
fact it will look at some libraries that

00:18:00,640 --> 00:18:03,490
do provide these kinds of context

00:18:02,050 --> 00:18:04,990
managers but the sort of thing we want

00:18:03,490 --> 00:18:06,760
to do is say oh I want to modify

00:18:04,990 --> 00:18:09,130
standard in I want to change it in these

00:18:06,760 --> 00:18:11,760
ways and then once we're done I want to

00:18:09,130 --> 00:18:14,560
undo those changes

00:18:11,760 --> 00:18:16,360
here's using that context manager all

00:18:14,560 --> 00:18:18,970
right so here the kinds of things that

00:18:16,360 --> 00:18:20,290
we can do by setting these knobs I'm not

00:18:18,970 --> 00:18:22,050
going to go into exactly what they are

00:18:20,290 --> 00:18:25,570
because we're gonna use libraries that

00:18:22,050 --> 00:18:26,710
paper over them but if you know that

00:18:25,570 --> 00:18:28,180
these things are possible you can look

00:18:26,710 --> 00:18:29,560
up how to do them I'll turn off echo

00:18:28,180 --> 00:18:31,900
send keys Amelia I'm just reading again

00:18:29,560 --> 00:18:36,490
OS that is Addie oh this is great this

00:18:31,900 --> 00:18:39,430
is does it look like a TTY is the thing

00:18:36,490 --> 00:18:41,200
that you're wired up to a terminal an

00:18:39,430 --> 00:18:43,180
interactive one and that's how LS is

00:18:41,200 --> 00:18:44,620
saying Oh should I display things in

00:18:43,180 --> 00:18:46,780
columns based on the width of the screen

00:18:44,620 --> 00:18:48,100
or should I be just putting them out

00:18:46,780 --> 00:18:49,920
because you're piping this to grep and

00:18:48,100 --> 00:18:52,330
you want each thing on a different line

00:18:49,920 --> 00:18:53,800
and it's your responsibility if you

00:18:52,330 --> 00:18:55,180
start doing these fancy terminal things

00:18:53,800 --> 00:18:57,130
to make sure that your program still

00:18:55,180 --> 00:19:00,670
works well with piping if it's supposed

00:18:57,130 --> 00:19:03,700
to and probably should if it doesn't

00:19:00,670 --> 00:19:04,840
then you get in the situation where you

00:19:03,700 --> 00:19:06,700
have a program that only works

00:19:04,840 --> 00:19:09,070
interactively and now someone else has

00:19:06,700 --> 00:19:10,240
to try to use it in a script and the way

00:19:09,070 --> 00:19:11,680
there are ways to do that we'll look at

00:19:10,240 --> 00:19:13,840
it a sec but it'd be nice if you can

00:19:11,680 --> 00:19:15,460
just work check to see if you should be

00:19:13,840 --> 00:19:19,120
doing fancy formatting or not with this

00:19:15,460 --> 00:19:21,250
is a TTY call what else we have sweet

00:19:19,120 --> 00:19:23,170
growing characters ok mapping bytes to

00:19:21,250 --> 00:19:25,720
keys so again you can do this with cat

00:19:23,170 --> 00:19:27,760
if you type cat enter and then use your

00:19:25,720 --> 00:19:29,200
arrow keys you'll see that first of all

00:19:27,760 --> 00:19:31,450
your arrow keys don't work but secondly

00:19:29,200 --> 00:19:34,270
that several bytes are being written

00:19:31,450 --> 00:19:35,539
there so there's this mapping of bytes

00:19:34,270 --> 00:19:37,070
if you hit a

00:19:35,539 --> 00:19:38,539
yeah it's gonna be a but if you hit f11

00:19:37,070 --> 00:19:40,489
you get something funny if you do

00:19:38,539 --> 00:19:41,779
shift-tab you have something so if

00:19:40,489 --> 00:19:43,279
you're writing a program that's supposed

00:19:41,779 --> 00:19:45,470
to interpret these it's your job to

00:19:43,279 --> 00:19:46,429
figure out how to deal with this and

00:19:45,470 --> 00:19:48,529
again there are libraries you should

00:19:46,429 --> 00:19:53,450
probably use but it can be helpful to to

00:19:48,529 --> 00:19:56,419
see that this is what's happening what

00:19:53,450 --> 00:19:58,879
change there no white sent without being

00:19:56,419 --> 00:20:01,549
typed this is a what we'll look at this

00:19:58,879 --> 00:20:03,289
quickly this is a fun exercise where do

00:20:01,549 --> 00:20:05,029
you really understand how your terminals

00:20:03,289 --> 00:20:07,309
kind of working we're gonna write some

00:20:05,029 --> 00:20:09,379
bytes to our even try this now we're

00:20:07,309 --> 00:20:12,950
gonna write these bytes to our terminal

00:20:09,379 --> 00:20:15,200
and what the term is gonna do in

00:20:12,950 --> 00:20:16,849
response to this is write some bytes on

00:20:15,200 --> 00:20:18,349
standard in that we're supposed to read

00:20:16,849 --> 00:20:20,239
figure out they didn't come from the

00:20:18,349 --> 00:20:22,429
user their response to our query and

00:20:20,239 --> 00:20:24,499
interpret and it doesn't really make

00:20:22,429 --> 00:20:26,869
sense if you're in that buffer and you

00:20:24,499 --> 00:20:28,519
only make the data available to the

00:20:26,869 --> 00:20:29,749
application when they hit enter mode you

00:20:28,519 --> 00:20:30,999
should be in C break or one of these

00:20:29,749 --> 00:20:33,440
other modes we'll talk about in a sec

00:20:30,999 --> 00:20:35,989
but if you try this now you'll probably

00:20:33,440 --> 00:20:38,179
get something like this and that prompts

00:20:35,989 --> 00:20:39,320
there on purpose on the prompt if there

00:20:38,179 --> 00:20:42,200
will be characters because they've been

00:20:39,320 --> 00:20:43,700
written on standard in and it's just

00:20:42,200 --> 00:20:45,169
funny to think about that a program

00:20:43,700 --> 00:20:46,879
could write to standard in or that you

00:20:45,169 --> 00:20:49,429
could end up with characters there that

00:20:46,879 --> 00:20:50,690
appear in your buffer like this and what

00:20:49,429 --> 00:20:53,509
it's really trying to say is like this

00:20:50,690 --> 00:20:55,309
is a cursor query it's saying where is

00:20:53,509 --> 00:20:56,629
the cursor on the screen and you don't

00:20:55,309 --> 00:20:58,639
need this form much but occasionally you

00:20:56,629 --> 00:21:02,720
do when you're doing interesting

00:20:58,639 --> 00:21:04,039
resizing things briefly signals this is

00:21:02,720 --> 00:21:05,539
just another thing that we can get in

00:21:04,039 --> 00:21:07,249
set we can say hey you know what when

00:21:05,539 --> 00:21:09,440
you do control see I don't want that to

00:21:07,249 --> 00:21:11,119
cause a signal that will you know cause

00:21:09,440 --> 00:21:12,679
a signal hander to run and I have to set

00:21:11,119 --> 00:21:15,169
that up I would rather have this other

00:21:12,679 --> 00:21:17,479
thing happen I just want the control see

00:21:15,169 --> 00:21:21,470
let me figure it out some of the signals

00:21:17,479 --> 00:21:23,539
we can get say Gant control c TS c p is

00:21:21,470 --> 00:21:25,729
the suspend thing winches for there's a

00:21:23,539 --> 00:21:27,409
window change and the thing to know

00:21:25,729 --> 00:21:29,899
about this are these three different

00:21:27,409 --> 00:21:31,429
modes cooked raw and c break cooked is

00:21:29,899 --> 00:21:33,649
the normal terminal mode where in its

00:21:31,429 --> 00:21:35,599
line buffered echo is on these are

00:21:33,649 --> 00:21:36,739
groups of different settings that you

00:21:35,599 --> 00:21:39,919
might want to use if you're writing a

00:21:36,739 --> 00:21:41,869
interactive program raw is this mode

00:21:39,919 --> 00:21:45,080
where all the signal handlers are turned

00:21:41,869 --> 00:21:47,029
off I may be on I think all and hitting

00:21:45,080 --> 00:21:48,440
Keys just passes those keys immediately

00:21:47,029 --> 00:21:49,410
directly of your programs you could say

00:21:48,440 --> 00:21:51,690
read and you would get

00:21:49,410 --> 00:21:53,310
immediately and c-break is a hybrid

00:21:51,690 --> 00:21:54,810
where you still have the signal handling

00:21:53,310 --> 00:21:56,400
this is probably what you want to use

00:21:54,810 --> 00:21:57,660
because you still want the user to be

00:21:56,400 --> 00:22:00,930
able to you know break out of the

00:21:57,660 --> 00:22:05,220
program with ctrl C but you get the keys

00:22:00,930 --> 00:22:08,520
right away all right so now we're gonna

00:22:05,220 --> 00:22:10,550
go through some of these alright so

00:22:08,520 --> 00:22:13,950
we'll do questions later but these are

00:22:10,550 --> 00:22:15,240
what I found useful some tools that are

00:22:13,950 --> 00:22:16,410
useful for this how we should actually

00:22:15,240 --> 00:22:18,630
be doing this because I think it's fun

00:22:16,410 --> 00:22:20,250
to experiment with the actual codes but

00:22:18,630 --> 00:22:22,040
then once you know that you should be

00:22:20,250 --> 00:22:24,570
using some library on top of it instead

00:22:22,040 --> 00:22:26,940
the first off is blessings that Eric

00:22:24,570 --> 00:22:28,500
Rose wrote we looked at it earlier you

00:22:26,940 --> 00:22:30,180
want to be using this is basically a

00:22:28,500 --> 00:22:32,580
Sibley library to use a nice wrapper

00:22:30,180 --> 00:22:35,400
over curses that lets you say things

00:22:32,580 --> 00:22:38,400
like we see here write this in bold move

00:22:35,400 --> 00:22:40,980
the cursor over here write this text but

00:22:38,400 --> 00:22:43,050
there's some cooler stuff that's in

00:22:40,980 --> 00:22:45,990
blessed which is a fork of blessings by

00:22:43,050 --> 00:22:47,700
Jeff Quest and it's almost merged but

00:22:45,990 --> 00:22:49,890
it's been almost merged for about a year

00:22:47,700 --> 00:22:52,050
so if you want to go play with this

00:22:49,890 --> 00:22:53,760
right now I would use blessed and then

00:22:52,050 --> 00:22:55,380
hopefully the next month or something

00:22:53,760 --> 00:22:57,450
it'll all the features will be merged

00:22:55,380 --> 00:22:59,730
back in there's a branch on the blest

00:22:57,450 --> 00:23:01,890
you know on the github for blessings

00:22:59,730 --> 00:23:04,200
that has all these features they've been

00:23:01,890 --> 00:23:05,370
refactored a little bit already factored

00:23:04,200 --> 00:23:07,290
they've been changed a little bit

00:23:05,370 --> 00:23:09,390
this lets you do cool stuff like the T

00:23:07,290 --> 00:23:10,680
dot C break so that puts us in C break

00:23:09,390 --> 00:23:13,410
modes or keys available to us

00:23:10,680 --> 00:23:15,210
immediately t dot in key translates the

00:23:13,410 --> 00:23:16,860
bytes and the buffer into a key press

00:23:15,210 --> 00:23:19,560
with a pretty name and we can say ah

00:23:16,860 --> 00:23:23,570
that was space la ah that was shift ctrl

00:23:19,560 --> 00:23:26,040
T or something and also some interesting

00:23:23,570 --> 00:23:27,510
formatting things anyway just a great

00:23:26,040 --> 00:23:29,100
job there's some really cool stuff in

00:23:27,510 --> 00:23:31,200
this and if you just want to play with

00:23:29,100 --> 00:23:33,570
this now I would start with blessed and

00:23:31,200 --> 00:23:36,450
then hopefully it'll be merged soon with

00:23:33,570 --> 00:23:40,380
blessings or wid that's how we were

00:23:36,450 --> 00:23:43,530
doing PUD B this is a shoot this is Ian

00:23:40,380 --> 00:23:45,600
I forgot em now they wrote this and it's

00:23:43,530 --> 00:23:47,250
a widget library it's like if you want

00:23:45,600 --> 00:23:48,390
to be using your terminal for some kind

00:23:47,250 --> 00:23:49,590
of full screen application this is

00:23:48,390 --> 00:23:51,180
probably what you want

00:23:49,590 --> 00:23:52,470
it works like a GUI library if you're

00:23:51,180 --> 00:23:54,870
familiar with QT or something it's gonna

00:23:52,470 --> 00:23:58,560
be kind of like that or WX python or

00:23:54,870 --> 00:24:00,870
something here again let's remind you

00:23:58,560 --> 00:24:01,320
that pew DB is cool well it's gonna take

00:24:00,870 --> 00:24:03,240
too long

00:24:01,320 --> 00:24:05,280
pew DB the debugger we saw is

00:24:03,240 --> 00:24:08,100
pretty cool some other tools that use

00:24:05,280 --> 00:24:09,559
this for getting now but there's some

00:24:08,100 --> 00:24:12,150
other ones that you use it that are

00:24:09,559 --> 00:24:13,200
similar pretty neat right you want to

00:24:12,150 --> 00:24:14,240
write things like this this is pretty

00:24:13,200 --> 00:24:17,880
cool

00:24:14,240 --> 00:24:20,429
Clint and click are two command-line

00:24:17,880 --> 00:24:21,990
utility libraries so if you're still

00:24:20,429 --> 00:24:23,670
writing this column response style

00:24:21,990 --> 00:24:25,170
application but you want to progress

00:24:23,670 --> 00:24:28,110
work but you want to print something

00:24:25,170 --> 00:24:29,640
that is wide as the terminal you want to

00:24:28,110 --> 00:24:31,830
have something in red you want to wait

00:24:29,640 --> 00:24:33,330
for a key these are maybe the libraries

00:24:31,830 --> 00:24:35,280
you want to use I've not used these much

00:24:33,330 --> 00:24:37,470
so I can't talk about them much but I've

00:24:35,280 --> 00:24:40,590
heard buzz about both of them that

00:24:37,470 --> 00:24:44,520
they're they were good read line if you

00:24:40,590 --> 00:24:46,530
want fancy editing on the command line

00:24:44,520 --> 00:24:47,610
this is probably what you want you don't

00:24:46,530 --> 00:24:49,890
want to re-implement this from scratch

00:24:47,610 --> 00:24:52,800
this gives you control a control e I

00:24:49,890 --> 00:24:54,330
think in Python 3 for now this is kind

00:24:52,800 --> 00:24:56,970
of enabled by default as with the tab

00:24:54,330 --> 00:24:59,720
completion and things but if you want

00:24:56,970 --> 00:25:04,200
your own tab completion you can use this

00:24:59,720 --> 00:25:05,400
and a lot of the times when people I

00:25:04,200 --> 00:25:06,600
think want to do fancy terminal stuff

00:25:05,400 --> 00:25:08,640
they're thinking of the things they get

00:25:06,600 --> 00:25:10,380
for free with red line so red line is a

00:25:08,640 --> 00:25:11,940
way to put in user space what usually

00:25:10,380 --> 00:25:13,740
happens in kernel space normally the

00:25:11,940 --> 00:25:15,660
kernel is in charge of buffering up

00:25:13,740 --> 00:25:17,580
these characters letting you do a few

00:25:15,660 --> 00:25:19,950
things like deleting a word or deleting

00:25:17,580 --> 00:25:21,929
the line but red line that says alright

00:25:19,950 --> 00:25:24,090
I'm going to see routine I'm going to

00:25:21,929 --> 00:25:27,210
put us in C break mode so we get those

00:25:24,090 --> 00:25:28,800
signals immediately and then you know so

00:25:27,210 --> 00:25:30,600
I get a key and then it can say oh you

00:25:28,800 --> 00:25:32,160
did control a I know that that means

00:25:30,600 --> 00:25:33,870
move the cursor back to the beginning of

00:25:32,160 --> 00:25:36,270
the line oh you did control e I'll

00:25:33,870 --> 00:25:37,740
modify it this way so you're in user

00:25:36,270 --> 00:25:39,720
space while you're doing that stuff and

00:25:37,740 --> 00:25:41,610
you can modify read line and I've done a

00:25:39,720 --> 00:25:42,780
little bit of this kind of forking red

00:25:41,610 --> 00:25:44,190
line to do interesting things with it

00:25:42,780 --> 00:25:48,510
and it's kind of fun because lots of

00:25:44,190 --> 00:25:49,740
programs use it next up okay this is a

00:25:48,510 --> 00:25:51,630
program that I wrote which I shouldn't

00:25:49,740 --> 00:25:54,990
spend too much time on but we wrote it

00:25:51,630 --> 00:25:57,210
for B Python which is the thing I had in

00:25:54,990 --> 00:25:59,010
the left tab before I'm this is an older

00:25:57,210 --> 00:26:01,440
version where we're having a little demo

00:25:59,010 --> 00:26:04,260
of what keys you're pressing but

00:26:01,440 --> 00:26:06,450
similarly to Irwin the idea is what if

00:26:04,260 --> 00:26:07,710
you had the whole terminal as a canvas

00:26:06,450 --> 00:26:10,350
you just paint over it

00:26:07,710 --> 00:26:12,720
except it's more of a hybrid where you

00:26:10,350 --> 00:26:15,600
still have you know a common response

00:26:12,720 --> 00:26:16,830
kind of thing but you get two pop-up

00:26:15,600 --> 00:26:18,480
windows over it or

00:26:16,830 --> 00:26:20,190
you get two we're gonna do insect you

00:26:18,480 --> 00:26:24,390
can rewind back so we're gonna do

00:26:20,190 --> 00:26:26,580
control R and sec here comes it's we're

00:26:24,390 --> 00:26:28,080
getting lots of text first but you can

00:26:26,580 --> 00:26:29,850
do things there we go so we really wound

00:26:28,080 --> 00:26:31,350
back up so these are things that don't

00:26:29,850 --> 00:26:33,360
make sense you know if you're doing this

00:26:31,350 --> 00:26:35,549
kind of thing you can't be using red

00:26:33,360 --> 00:26:37,350
line anymore you can't be using the

00:26:35,549 --> 00:26:39,779
normal egg you need full control of the

00:26:37,350 --> 00:26:42,210
terminal and I shouldn't spend too much

00:26:39,779 --> 00:26:45,929
time on this because Python prompt tool

00:26:42,210 --> 00:26:47,850
kit by Jonathan someone or other is much

00:26:45,929 --> 00:26:49,710
better it's just better code it's better

00:26:47,850 --> 00:26:51,269
than the library that I wrote I don't

00:26:49,710 --> 00:26:54,299
think we're gonna migrate B python

00:26:51,269 --> 00:26:55,559
anytime soon but this is great and if

00:26:54,299 --> 00:26:59,269
you want to do there's some great

00:26:55,559 --> 00:27:02,039
interactive my sequel and Postgres

00:26:59,269 --> 00:27:03,419
interface library or interface tools

00:27:02,039 --> 00:27:05,250
that have been written with this this is

00:27:03,419 --> 00:27:06,840
great for I want a command-line tool but

00:27:05,250 --> 00:27:12,149
I want the pop-up auto completion but I

00:27:06,840 --> 00:27:15,149
want an editor in my command line and

00:27:12,149 --> 00:27:16,500
here's a brief little of this the cool

00:27:15,149 --> 00:27:21,389
thing that they're doing there is this

00:27:16,500 --> 00:27:24,240
full you know editing anywhere kind of

00:27:21,389 --> 00:27:26,220
ipython style describe I'll just wait

00:27:24,240 --> 00:27:27,630
for it to pop up here so it pops up at

00:27:26,220 --> 00:27:31,350
what looks like an editor but you're

00:27:27,630 --> 00:27:33,929
still in your terminal there's a Oh

00:27:31,350 --> 00:27:36,269
camel repple called you top that does

00:27:33,929 --> 00:27:39,450
some of this the Julia repple has some

00:27:36,269 --> 00:27:40,919
of these things but it's just nicer this

00:27:39,450 --> 00:27:42,720
is a syntax error and it popped me back

00:27:40,919 --> 00:27:43,590
up to where the syntax error was this is

00:27:42,720 --> 00:27:47,250
pretty cool

00:27:43,590 --> 00:27:48,840
I don't know a bunch about it okay a

00:27:47,250 --> 00:27:51,389
concept we should be familiar with is a

00:27:48,840 --> 00:27:52,980
PTY there's a pseudo terminal this is

00:27:51,389 --> 00:27:54,870
what you use when you run want to run

00:27:52,980 --> 00:27:58,070
another program in such a way that it

00:27:54,870 --> 00:27:58,070
looks like it's using a terminal

00:27:58,399 --> 00:28:02,700
probably you should be using a library

00:28:00,149 --> 00:28:05,100
over it okay so a PTY lets you do kind

00:28:02,700 --> 00:28:06,990
of neat things like take the output of a

00:28:05,100 --> 00:28:08,250
program and re-render it what we're

00:28:06,990 --> 00:28:09,919
doing here this looks kind of like

00:28:08,250 --> 00:28:11,610
python it's a working Python interpreter

00:28:09,919 --> 00:28:13,289
except that there's a case

00:28:11,610 --> 00:28:15,240
transformation thing going on every five

00:28:13,289 --> 00:28:17,850
seconds or something it flips the case

00:28:15,240 --> 00:28:19,769
so it's just just kind of funny but you

00:28:17,850 --> 00:28:21,450
could imagine kind of transforming the

00:28:19,769 --> 00:28:22,980
output of some program so this is a

00:28:21,450 --> 00:28:25,870
pseudo terminal so it's also how

00:28:22,980 --> 00:28:28,419
terminal emulators are written

00:28:25,870 --> 00:28:31,299
and when I first saw this was people

00:28:28,419 --> 00:28:33,370
writing tools for assisted nethack play

00:28:31,299 --> 00:28:35,890
so they're writing they're playing a

00:28:33,370 --> 00:28:37,570
game and they're not gonna you know

00:28:35,890 --> 00:28:39,960
change the code for nethack at all just

00:28:37,570 --> 00:28:43,750
one of these rogue like overhead things

00:28:39,960 --> 00:28:45,730
but they want to modify the input in the

00:28:43,750 --> 00:28:48,760
output so this can sit between you and

00:28:45,730 --> 00:28:50,860
some other program you probably want to

00:28:48,760 --> 00:28:52,659
look at P expects which is a Python

00:28:50,860 --> 00:28:54,730
version of the expects program for this

00:28:52,659 --> 00:28:56,440
is for interacting with command-line

00:28:54,730 --> 00:29:00,070
tools that want to be interactive they

00:28:56,440 --> 00:29:03,039
want to have a user at the helm but you

00:29:00,070 --> 00:29:04,960
want to script them of course okay a

00:29:03,039 --> 00:29:06,850
cool tool here if you've got a computer

00:29:04,960 --> 00:29:10,240
open you I try right now typing telnet

00:29:06,850 --> 00:29:12,010
space term cast IO Jessie didn't write

00:29:10,240 --> 00:29:13,570
the original term cast but he wrote the

00:29:12,010 --> 00:29:15,460
Python versions and the Python

00:29:13,570 --> 00:29:17,740
conference so here you should you should

00:29:15,460 --> 00:29:20,080
check these out he's written this is the

00:29:17,740 --> 00:29:21,970
idea that because terminal sessions are

00:29:20,080 --> 00:29:23,590
just a series of bytes you could beam

00:29:21,970 --> 00:29:25,000
those bytes to everybody you could say

00:29:23,590 --> 00:29:27,600
hey hey check out these bytes I guess we

00:29:25,000 --> 00:29:27,600
should try this now

00:29:38,540 --> 00:29:42,650
all right I think I'm not online it's

00:29:40,310 --> 00:29:43,700
probably the problem right all right so

00:29:42,650 --> 00:29:47,540
it's not oh thank you

00:29:43,700 --> 00:29:50,780
orgy right all right we'll skip this for

00:29:47,540 --> 00:29:52,490
now but the gist is you can see if

00:29:50,780 --> 00:29:54,200
someone else has a session and they're

00:29:52,490 --> 00:29:55,640
sending oh I sent this byte I sent the

00:29:54,200 --> 00:29:57,320
byte that makes it red I sent the byte

00:29:55,640 --> 00:30:00,110
that move the cursor over here you could

00:29:57,320 --> 00:30:01,580
just get those bytes and then replay

00:30:00,110 --> 00:30:04,600
them in your own terminal and you have

00:30:01,580 --> 00:30:06,470
very high fidelity kind of low bandwidth

00:30:04,600 --> 00:30:09,140
screencasting basically of just your

00:30:06,470 --> 00:30:10,790
terminal sorry check this out

00:30:09,140 --> 00:30:12,440
also you can it's easy to broadcast your

00:30:10,790 --> 00:30:13,940
own terminal session if you mostly work

00:30:12,440 --> 00:30:17,120
in a terminal or you could broadcast a

00:30:13,940 --> 00:30:20,180
tea mug session something like that and

00:30:17,120 --> 00:30:23,720
a more web friendly version and user

00:30:20,180 --> 00:30:26,990
friendly version of this is I remember

00:30:23,720 --> 00:30:29,690
how to pronounce it anybody ask ask

00:30:26,990 --> 00:30:31,580
anima a nice way to pronounce it that

00:30:29,690 --> 00:30:33,680
has the word cinema and ASCII in it and

00:30:31,580 --> 00:30:35,930
doesn't have ass and and other words in

00:30:33,680 --> 00:30:37,520
it but this is a cool tool for recording

00:30:35,930 --> 00:30:40,310
a terminal session and then making it

00:30:37,520 --> 00:30:41,870
playable in a browser and finally I'm

00:30:40,310 --> 00:30:44,690
gonna talk about a few ways that I've

00:30:41,870 --> 00:30:47,000
used interesting terminal things here's

00:30:44,690 --> 00:30:50,410
one where I'm using I think this is a

00:30:47,000 --> 00:30:52,340
maybe a common possible use for

00:30:50,410 --> 00:30:53,570
interesting escape sequences and

00:30:52,340 --> 00:30:55,940
formatting and things which is

00:30:53,570 --> 00:30:57,860
formatting test failures this is one

00:30:55,940 --> 00:30:59,300
where we're doing it in B Python we said

00:30:57,860 --> 00:31:01,010
like hey there's something funny instead

00:30:59,300 --> 00:31:02,270
of any it says armadillo and we kind of

00:31:01,010 --> 00:31:04,280
highlight those and if you're doing your

00:31:02,270 --> 00:31:06,530
own terminal it also blinks just kind of

00:31:04,280 --> 00:31:10,640
fun and then I have another program

00:31:06,530 --> 00:31:12,320
where I needed to test that the window

00:31:10,640 --> 00:31:13,820
resizing was working correctly so

00:31:12,320 --> 00:31:16,520
there's a program called team XP which

00:31:13,820 --> 00:31:20,210
lets you script T moxon Python and I

00:31:16,520 --> 00:31:22,700
have some tests that open a team ox

00:31:20,210 --> 00:31:24,200
session and then try resizing the window

00:31:22,700 --> 00:31:26,630
and see if we're treating that correctly

00:31:24,200 --> 00:31:28,970
and this is I just found that with the

00:31:26,630 --> 00:31:30,410
easiest terminal emulator that I was

00:31:28,970 --> 00:31:32,180
scriptable so you see it's running these

00:31:30,410 --> 00:31:33,650
tests and not yet it's gonna run the

00:31:32,180 --> 00:31:36,710
test in a second and we'll see a

00:31:33,650 --> 00:31:38,090
resizing team-ups window to test to see

00:31:36,710 --> 00:31:43,280
if we're kind of correctly treating

00:31:38,090 --> 00:31:44,960
these things and that's about it I have

00:31:43,280 --> 00:31:46,850
some kind of further reading things this

00:31:44,960 --> 00:31:49,910
is not posted anywhere yet but I will

00:31:46,850 --> 00:31:51,770
let you know on Twitter when I finally

00:31:49,910 --> 00:31:52,310
have a blog post up that lists all these

00:31:51,770 --> 00:31:53,390
resources

00:31:52,310 --> 00:31:57,100
or at least a version of the slides

00:31:53,390 --> 00:31:57,100
that's accessible thanks

00:32:01,650 --> 00:32:07,820
I think we have a few minutes for

00:32:05,790 --> 00:32:07,820
questions

00:32:15,700 --> 00:32:22,240
it's maybe not a good question but how

00:32:20,330 --> 00:32:26,539
does this syntax for the special

00:32:22,240 --> 00:32:31,669
characters work like the /x 1 bracket

00:32:26,539 --> 00:32:33,019
sure yeah yeah so just there is that

00:32:31,669 --> 00:32:35,000
when you have Python string

00:32:33,019 --> 00:32:37,309
representations you can do stuff like

00:32:35,000 --> 00:32:39,649
whoops you can there there are multiple

00:32:37,309 --> 00:32:41,210
temptations for a string where I guess

00:32:39,649 --> 00:32:43,879
we're gonna fight on three so I guess

00:32:41,210 --> 00:32:48,590
these are gonna be like unicode strings

00:32:43,879 --> 00:32:59,919
here but if you say slash X 61 and then

00:32:48,590 --> 00:33:02,840
you say a these are identical / x 61 so

00:32:59,919 --> 00:33:05,899
/ x 61 is a way of describing in fact it

00:33:02,840 --> 00:33:10,970
may be it's clear if we try org this is

00:33:05,899 --> 00:33:13,000
you know this is hex right right but in

00:33:10,970 --> 00:33:17,419
those special characters you had like

00:33:13,000 --> 00:33:20,960
other letters like one m and n is it's

00:33:17,419 --> 00:33:23,389
not so what is it right right so just

00:33:20,960 --> 00:33:27,759
when python render strings um some of

00:33:23,389 --> 00:33:31,220
them end up so if i say slash x61 /x o -

00:33:27,759 --> 00:33:33,620
some poops not word sometimes it renders

00:33:31,220 --> 00:33:36,350
them sometimes some letters have pretty

00:33:33,620 --> 00:33:40,309
renderings like 61 some don't or a hex

00:33:36,350 --> 00:33:42,679
61 and some don't like Oh - so it's in

00:33:40,309 --> 00:33:45,159
the Python repper code where it says ah

00:33:42,679 --> 00:33:51,190
this one isn't if we try printing it

00:33:45,159 --> 00:33:51,190
then it's gonna just not print no sorry

00:33:51,879 --> 00:33:55,460
right we just don't see it because it's

00:33:53,960 --> 00:33:56,450
not like a printable thing when you send

00:33:55,460 --> 00:33:59,990
that to a terminal it doesn't do

00:33:56,450 --> 00:34:01,610
anything so it's just a different way

00:33:59,990 --> 00:34:03,320
it's just like you can put single quotes

00:34:01,610 --> 00:34:04,399
or double quotes around a string it's a

00:34:03,320 --> 00:34:06,860
different way of describing the same

00:34:04,399 --> 00:34:08,119
literal and then in the print method it

00:34:06,860 --> 00:34:11,379
says ah does this one have a pretty

00:34:08,119 --> 00:34:14,960
representation or not is that not

00:34:11,379 --> 00:34:18,440
exactly oh sorry I get that but you had

00:34:14,960 --> 00:34:22,490
those special terminal characters like

00:34:18,440 --> 00:34:27,010
you know /x 1b bracket 1 and something

00:34:22,490 --> 00:34:29,380
and I don't know if yeah what is it

00:34:27,010 --> 00:34:31,899
we did because I had problems with it

00:34:29,380 --> 00:34:34,929
because I have a setup I have a Windows

00:34:31,899 --> 00:34:37,659
machine talking to remote Linux within

00:34:34,929 --> 00:34:39,580
that through Tmax and through midnight

00:34:37,659 --> 00:34:42,330
commander and I basically have problems

00:34:39,580 --> 00:34:45,940
with character encoding all the time

00:34:42,330 --> 00:34:47,409
yeah so that is I mean the first one is

00:34:45,940 --> 00:34:49,720
an escape byte so it's that that

00:34:47,409 --> 00:34:51,730
rendered byte the next one is a real

00:34:49,720 --> 00:34:54,639
open square bracket then it's a real

00:34:51,730 --> 00:34:56,560
three a real one and then an M so they

00:34:54,639 --> 00:34:58,030
really are those characters here the

00:34:56,560 --> 00:34:59,350
difficult one to deal with I think is

00:34:58,030 --> 00:35:01,030
the the first one the escape character

00:34:59,350 --> 00:35:02,260
which and I have you know similarly

00:35:01,030 --> 00:35:03,640
similar setups where it's like okay I've

00:35:02,260 --> 00:35:05,650
got this thing and then I've got T MUX

00:35:03,640 --> 00:35:07,600
and then I'm as a staged in somewhere do

00:35:05,650 --> 00:35:11,560
you have to trace it through each level

00:35:07,600 --> 00:35:13,300
and hope it kind of passes it through so

00:35:11,560 --> 00:35:16,780
but then what we're looking at really is

00:35:13,300 --> 00:35:18,970
so the start writing in red is 1 2 3 4 5

00:35:16,780 --> 00:35:21,370
bytes because the first one is the

00:35:18,970 --> 00:35:22,990
escape fight and then it's a real open

00:35:21,370 --> 00:35:24,220
square bracket and if you'll read the

00:35:22,990 --> 00:35:26,680
Wikipedia article on the ansi escape

00:35:24,220 --> 00:35:28,570
sequences it please hand waves about it

00:35:26,680 --> 00:35:31,300
a little bit it says all right when we

00:35:28,570 --> 00:35:33,580
have a sequence it's gonna be more than

00:35:31,300 --> 00:35:35,320
2 bytes we use this longer escape thing

00:35:33,580 --> 00:35:38,430
instead of just an escape character we

00:35:35,320 --> 00:35:41,020
use the open square bracket as well so

00:35:38,430 --> 00:35:42,880
ya get the pass through is difficult

00:35:41,020 --> 00:35:44,050
yeah I've had trouble with that as well

00:35:42,880 --> 00:35:45,580
because you have to trace it at each

00:35:44,050 --> 00:35:47,020
level are you really getting those bytes

00:35:45,580 --> 00:35:49,390
and they're not invisible bytes so you

00:35:47,020 --> 00:35:52,770
have to do it like to a file and then

00:35:49,390 --> 00:35:52,770
use something that can read those bytes

00:35:59,840 --> 00:36:03,440
when talking about the read line

00:36:01,760 --> 00:36:06,950
library you mentioned several key

00:36:03,440 --> 00:36:09,890
bindings like control leg mentally what

00:36:06,950 --> 00:36:12,380
would be the authoritative source for

00:36:09,890 --> 00:36:14,660
all of those key bindings because I like

00:36:12,380 --> 00:36:16,490
you've seen probably seen that their

00:36:14,660 --> 00:36:18,260
support their support for that in Mac OS

00:36:16,490 --> 00:36:22,960
but it's sort of sometimes it works

00:36:18,260 --> 00:36:25,400
sometimes some of them don't but I've

00:36:22,960 --> 00:36:29,480
googled for a read line I don't remember

00:36:25,400 --> 00:36:31,550
what cited was I was at I've just Google

00:36:29,480 --> 00:36:33,320
for read line shortcuts and I found one

00:36:31,550 --> 00:36:35,000
that looked kind of authoritative and so

00:36:33,320 --> 00:36:37,780
we had to do this for B Python wery

00:36:35,000 --> 00:36:40,220
implemented all read line basically and

00:36:37,780 --> 00:36:42,550
so I learned a lot of red line shortcuts

00:36:40,220 --> 00:36:45,140
I didn't know about whatever it is meta

00:36:42,550 --> 00:36:48,410
closed bracket is it or something maybe

00:36:45,140 --> 00:36:50,090
it's met a slash that runs copies down

00:36:48,410 --> 00:36:58,400
the previous word or something there's a

00:36:50,090 --> 00:37:00,650
lot of these I only write sure yeah yeah

00:36:58,400 --> 00:37:02,240
so it's using real read line it might

00:37:00,650 --> 00:37:03,910
think it should and it's looking at your

00:37:02,240 --> 00:37:06,230
dot input are see and things like that

00:37:03,910 --> 00:37:08,240
so I don't know but I would blame

00:37:06,230 --> 00:37:10,160
whoever implemented that whoever wrote

00:37:08,240 --> 00:37:12,020
that program either they're not using

00:37:10,160 --> 00:37:13,670
read line correctly or they

00:37:12,020 --> 00:37:18,860
reimplemented it and only re-implemented

00:37:13,670 --> 00:37:21,910
some of those shortcuts we still have

00:37:18,860 --> 00:37:21,910
time for one short question

00:37:27,000 --> 00:37:33,210
hello what was the name of that cool

00:37:29,840 --> 00:37:38,610
interactive cool that's exactly the

00:37:33,210 --> 00:37:43,070
question I was hoping to get it's great

00:37:38,610 --> 00:37:43,070
you should all check it out really good

00:37:43,670 --> 00:37:47,550
look at that and then capitalized how

00:37:45,990 --> 00:37:49,770
does that work oh those the docks that's

00:37:47,550 --> 00:37:52,410
not great check this out I can undo now

00:37:49,770 --> 00:37:53,970
eh it's not defined anymore Wow yeah you

00:37:52,410 --> 00:37:55,800
should check this out this is great I'll

00:37:53,970 --> 00:37:57,420
be sprinting on this because I've just

00:37:55,800 --> 00:37:59,100
ignored some issues and pull requests

00:37:57,420 --> 00:38:00,300
that have come up so at least on

00:37:59,100 --> 00:38:02,400
Saturday I'll be looking at this a bit

00:38:00,300 --> 00:38:04,050
and it was I think we have bite-size

00:38:02,400 --> 00:38:09,470
bugs if anyone wants to kind of help

00:38:04,050 --> 00:38:09,470

YouTube URL: https://www.youtube.com/watch?v=qOoKR8qEglU


