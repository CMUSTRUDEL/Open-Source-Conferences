Title: Stephan Erb - Release Management with Devpi
Publication date: 2015-08-08
Playlist: EuroPython 2015
Description: 
	Stephan Erb - Release Management with Devpi
[EuroPython 2015]
[22 July 2015]
[Bilbao, Euskadi, Spain]

Devpi is an open source PyPi-compatible package server. Its versatile
features make it the Swiss Army knife of Python package and release
management, enabling anyone to shape a custom release workflow.

In this talk, I will detail how we use our company-wide Devpi
installation in order to share a large set of packages across teams,
deploy binary packages to our application servers, and mix and mash
open source packages with our own. With Devpi being a critical part of
our release and deployment infrastructure, I will also cover our high-
availability setup and how we perform major version updates with
minimal downtime.

While this talk is not meant to be an exhaustive introduction of all
available Devpi features, it can offer insights on how Devpi can be
used at a larger scale.
Captions: 
	00:00:00,000 --> 00:00:05,310
but still in this pipeline we have to

00:00:03,090 --> 00:00:08,250
think about how we do we get our

00:00:05,310 --> 00:00:11,099
packages from our developer desktop into

00:00:08,250 --> 00:00:12,960
our production service and we normally

00:00:11,099 --> 00:00:16,080
use those with packages and with version

00:00:12,960 --> 00:00:19,550
version packet packages but we still

00:00:16,080 --> 00:00:21,869
need some kind of process to do this so

00:00:19,550 --> 00:00:24,449
we will now look at the problem app that

00:00:21,869 --> 00:00:25,890
we had at least one guy did something

00:00:24,449 --> 00:00:28,590
that wasn't that good and then we'll

00:00:25,890 --> 00:00:32,099
somehow step-by-step see how we can

00:00:28,590 --> 00:00:34,710
improve this process so we summer used

00:00:32,099 --> 00:00:36,630
to have or we had a guy that had the

00:00:34,710 --> 00:00:40,800
package let's call this package possum

00:00:36,630 --> 00:00:43,290
with with version 120 and there was a

00:00:40,800 --> 00:00:45,149
back in this package and it's all all is

00:00:43,290 --> 00:00:48,750
tooling around this with well the

00:00:45,149 --> 00:00:50,850
difficult so what he ended up doing to

00:00:48,750 --> 00:00:53,370
fix the back in this package was to

00:00:50,850 --> 00:00:56,070
unpack the tarball fix the pricing

00:00:53,370 --> 00:00:57,750
inside repackage everything and then you

00:00:56,070 --> 00:00:59,640
wanted to deploy this to production and

00:00:57,750 --> 00:01:02,879
obviously that not the way you want to

00:00:59,640 --> 00:01:05,729
do a way you want to do things what you

00:01:02,879 --> 00:01:07,979
also try to attach a golden copy to this

00:01:05,729 --> 00:01:09,570
particular package so that you knew that

00:01:07,979 --> 00:01:11,939
this was a special one and not the

00:01:09,570 --> 00:01:15,270
ordinary other one with the unfixed back

00:01:11,939 --> 00:01:17,610
yeah and then as you can imagine if you

00:01:15,270 --> 00:01:20,130
go ahead and let you developers do stuff

00:01:17,610 --> 00:01:24,299
like this you will get burned rather

00:01:20,130 --> 00:01:26,880
quickly so I'm I don't want to blame the

00:01:24,299 --> 00:01:28,470
developers because we somehow all of us

00:01:26,880 --> 00:01:31,740
do this we take the past of the least

00:01:28,470 --> 00:01:33,270
resistance and yeah if this path it's

00:01:31,740 --> 00:01:35,520
not what you want you have to invest

00:01:33,270 --> 00:01:38,189
into tools and processes to somewhere

00:01:35,520 --> 00:01:40,920
improve this one yeah and we will now

00:01:38,189 --> 00:01:42,420
look at what we did so basically we had

00:01:40,920 --> 00:01:45,180
this problem it's about okay how do we

00:01:42,420 --> 00:01:47,840
solve this and our solution was that we

00:01:45,180 --> 00:01:50,460
say okay we need immutable packages so

00:01:47,840 --> 00:01:52,530
when we create a python package we want

00:01:50,460 --> 00:01:55,259
to create it only once and then store it

00:01:52,530 --> 00:01:57,180
forever and when we give a version for

00:01:55,259 --> 00:02:00,950
this pizen package we want to derive

00:01:57,180 --> 00:02:04,020
this version from our git repository so

00:02:00,950 --> 00:02:06,750
that we know exactly okay it has this

00:02:04,020 --> 00:02:08,429
guitar and their five commits after it

00:02:06,750 --> 00:02:11,099
with this check Sam so we know exactly

00:02:08,429 --> 00:02:13,560
when we see a package what what's the

00:02:11,099 --> 00:02:15,750
code that somewhere is in this package

00:02:13,560 --> 00:02:18,630
last but not least we want to have those

00:02:15,750 --> 00:02:20,520
wheels this means we don't don't want to

00:02:18,630 --> 00:02:22,800
use sauce distributions but wheel

00:02:20,520 --> 00:02:24,840
packages because the wheels basically

00:02:22,800 --> 00:02:27,030
just a trip archive of your pricing

00:02:24,840 --> 00:02:29,010
files and c code and whatever and your

00:02:27,030 --> 00:02:31,769
installation you just unpack the wheel

00:02:29,010 --> 00:02:33,930
or pip and pick the wheels for you so

00:02:31,769 --> 00:02:37,170
this is much safer than a source

00:02:33,930 --> 00:02:38,580
distribution and what you also do is

00:02:37,170 --> 00:02:41,130
when we install the package we pin

00:02:38,580 --> 00:02:43,019
everything so we are basically sure that

00:02:41,130 --> 00:02:45,330
not only a packages of this version but

00:02:43,019 --> 00:02:50,340
also all your requirements are as you

00:02:45,330 --> 00:02:52,980
expected I shot example how we actually

00:02:50,340 --> 00:02:55,290
do this because um most of our internal

00:02:52,980 --> 00:02:57,720
tools use a open source package called

00:02:55,290 --> 00:03:00,480
setuptools SCM or we use the wrapper

00:02:57,720 --> 00:03:02,760
around which we call pi scaffold um but

00:03:00,480 --> 00:03:04,860
the idea is basically all the same I've

00:03:02,760 --> 00:03:07,380
an example a repository here it's called

00:03:04,860 --> 00:03:11,519
also called possum now it has to get

00:03:07,380 --> 00:03:13,380
tags and wondered 1 1 dot 0 and when you

00:03:11,519 --> 00:03:15,330
go ahead and create your pricing set up

00:03:13,380 --> 00:03:17,670
I Buddhist Wheel so we build a wheel

00:03:15,330 --> 00:03:19,950
what possum does it goes ahead at what

00:03:17,670 --> 00:03:22,140
they set up to SCM does it goes ahead

00:03:19,950 --> 00:03:24,720
looks at your text so sees okay they

00:03:22,140 --> 00:03:27,570
have to tag one at one and it's ok if

00:03:24,720 --> 00:03:29,940
two commits that go beyond the Stags I

00:03:27,570 --> 00:03:32,310
would create a version number called so

00:03:29,940 --> 00:03:35,040
one dot too because it increments by one

00:03:32,310 --> 00:03:38,370
and then the number of commits I've made

00:03:35,040 --> 00:03:40,829
and each exam so basically if you want

00:03:38,370 --> 00:03:43,109
unique version numbers for your pictures

00:03:40,829 --> 00:03:48,150
look at setuptools STM it will basically

00:03:43,109 --> 00:03:50,010
solve this for you so what from the

00:03:48,150 --> 00:03:54,090
stuff we've mentioned before we now have

00:03:50,010 --> 00:03:55,799
the the foundation laid out we have

00:03:54,090 --> 00:03:57,959
packages that have unique version

00:03:55,799 --> 00:03:59,510
numbers but now we have to upload them

00:03:57,959 --> 00:04:01,950
somewhere because it's not enough that

00:03:59,510 --> 00:04:03,930
you've created a unique package on your

00:04:01,950 --> 00:04:06,930
desktop or on jenkins or whatever but

00:04:03,930 --> 00:04:09,540
you have to do something with it and for

00:04:06,930 --> 00:04:13,410
us is it we upload those packages to def

00:04:09,540 --> 00:04:16,380
p def PS a package server for bison

00:04:13,410 --> 00:04:17,970
packages and four wheels and it's

00:04:16,380 --> 00:04:19,799
developer Holger critical and has the

00:04:17,970 --> 00:04:23,070
great advantage that it's compatible

00:04:19,799 --> 00:04:25,140
with pi p python org so you can use a

00:04:23,070 --> 00:04:26,170
dress in the way you would look here we

00:04:25,140 --> 00:04:27,730
give spy p

00:04:26,170 --> 00:04:30,910
but you can run it on your hand the

00:04:27,730 --> 00:04:33,460
whole hardware and your own on stack so

00:04:30,910 --> 00:04:35,020
you don't have to upload your packages

00:04:33,460 --> 00:04:38,770
to the internet but can use your local

00:04:35,020 --> 00:04:41,140
the local deputy server short example

00:04:38,770 --> 00:04:42,820
how this looks like in the first line we

00:04:41,140 --> 00:04:44,740
say okay I want to talk with this def

00:04:42,820 --> 00:04:47,890
tee server and this particular user on

00:04:44,740 --> 00:04:49,990
and this index we log in as this user

00:04:47,890 --> 00:04:52,330
and then say okay upload this package

00:04:49,990 --> 00:04:55,240
and the package ends up on the server

00:04:52,330 --> 00:04:56,830
and what you basically see in the last

00:04:55,240 --> 00:04:58,750
line it's rather easy to install a

00:04:56,830 --> 00:05:01,000
package it's an ordinary type command

00:04:58,750 --> 00:05:03,610
you just specify the index you want to

00:05:01,000 --> 00:05:05,590
install from so you check the oil off

00:05:03,610 --> 00:05:09,550
your desk I server lefty server and

00:05:05,590 --> 00:05:12,010
can't stop from it so basically from a

00:05:09,550 --> 00:05:15,310
pure perspective of what HP office that

00:05:12,010 --> 00:05:19,270
that's it for for the view of one

00:05:15,310 --> 00:05:22,870
developer the developers also get a web

00:05:19,270 --> 00:05:24,430
web website also similar to pipe a pass

00:05:22,870 --> 00:05:28,000
on drug you get the metadata you get

00:05:24,430 --> 00:05:29,710
protect assessment uploaded so ya see

00:05:28,000 --> 00:05:31,690
you see this documentation in the doc

00:05:29,710 --> 00:05:35,410
string that's basically what you get out

00:05:31,690 --> 00:05:37,390
of the out of the box so we can now look

00:05:35,410 --> 00:05:41,080
at the entire workflow that we have

00:05:37,390 --> 00:05:43,690
we've built so what you see is we have

00:05:41,080 --> 00:05:45,820
our developers they check in to get so

00:05:43,690 --> 00:05:48,390
you get great Tex and commit and

00:05:45,820 --> 00:05:53,170
whatever and then Jenkins goes ahead

00:05:48,390 --> 00:05:56,440
fetches the latest latest let's check

00:05:53,170 --> 00:05:58,390
out bill please packages runs all tests

00:05:56,440 --> 00:06:01,750
and once all you need an integration

00:05:58,390 --> 00:06:03,700
tests of past hour Jenkins drops go

00:06:01,750 --> 00:06:06,580
ahead and upload these packages to our

00:06:03,700 --> 00:06:09,370
identity server and we basically store

00:06:06,580 --> 00:06:10,780
all our pictures on FB forever and then

00:06:09,370 --> 00:06:13,750
when we want to install something from

00:06:10,780 --> 00:06:16,600
production we just look at def p install

00:06:13,750 --> 00:06:18,970
from there and yeah that's how we

00:06:16,600 --> 00:06:20,620
somewhat do do these things and I guess

00:06:18,970 --> 00:06:22,420
for some of you in the audience this

00:06:20,620 --> 00:06:25,870
might all already be a workflow that

00:06:22,420 --> 00:06:28,030
suitable for our said blue yonder is a

00:06:25,870 --> 00:06:31,170
little bit more difficult at least

00:06:28,030 --> 00:06:34,650
because we only have a few constraints

00:06:31,170 --> 00:06:37,090
first of all we have multiple teams that

00:06:34,650 --> 00:06:39,160
collaborate so with multiple teams

00:06:37,090 --> 00:06:41,530
multiple artifact that upload stuff

00:06:39,160 --> 00:06:42,820
and we want to somehow keep the

00:06:41,530 --> 00:06:46,960
artifacts of these different teams

00:06:42,820 --> 00:06:49,210
separated so good example before we used

00:06:46,960 --> 00:06:52,030
FP we just said one network share and we

00:06:49,210 --> 00:06:53,800
placed all other packages in a large

00:06:52,030 --> 00:06:56,920
folder on this network share and it was

00:06:53,800 --> 00:06:59,230
summer total chaos because some

00:06:56,920 --> 00:07:00,880
sometimes people upload stuff and buggy

00:06:59,230 --> 00:07:03,610
versions and you didn't know didn't know

00:07:00,880 --> 00:07:05,020
who did want so for our new solution was

00:07:03,610 --> 00:07:08,050
dead for you want to separate teams a

00:07:05,020 --> 00:07:12,220
little bit like namespaces so that the

00:07:08,050 --> 00:07:14,230
first constraint second constraint is we

00:07:12,220 --> 00:07:16,750
have not only passing code but we also

00:07:14,230 --> 00:07:19,810
ship stuff like fortran code or numpy or

00:07:16,750 --> 00:07:22,930
whatever so stuff let's compiled and we

00:07:19,810 --> 00:07:24,850
don't want to we don't want to compile

00:07:22,930 --> 00:07:28,390
reduction so we don't want to have GCC

00:07:24,850 --> 00:07:30,490
on our production service and we don't

00:07:28,390 --> 00:07:32,410
want to spend the time compiling our

00:07:30,490 --> 00:07:35,470
desktop so what we do is we upload

00:07:32,410 --> 00:07:37,570
binary packages to destin all into form

00:07:35,470 --> 00:07:42,070
google so we must support this place as

00:07:37,570 --> 00:07:45,990
well and the last thing is even though

00:07:42,070 --> 00:07:48,460
we want to keep our teams separated we

00:07:45,990 --> 00:07:50,920
still want to somehow have it easy to

00:07:48,460 --> 00:07:52,540
manage their dependency so if my package

00:07:50,920 --> 00:07:54,520
depends on the package of another team

00:07:52,540 --> 00:07:55,660
and the Muslims open source packages we

00:07:54,520 --> 00:07:59,020
have to somehow provide a solution

00:07:55,660 --> 00:08:00,880
that's working for all of this and then

00:07:59,020 --> 00:08:03,640
we'll now look into the Deaf pbox and

00:08:00,880 --> 00:08:09,060
there so we can see how it how we

00:08:03,640 --> 00:08:11,350
achieve this so okay up to your FB usage

00:08:09,060 --> 00:08:14,620
shortly back to the example we've seen

00:08:11,350 --> 00:08:16,780
before here to two important things to

00:08:14,620 --> 00:08:20,890
notice first of all we look at the wheel

00:08:16,780 --> 00:08:22,900
I've said that we want to upload we want

00:08:20,890 --> 00:08:25,150
to upload binary packages and those are

00:08:22,900 --> 00:08:26,700
built on a specific distribution for

00:08:25,150 --> 00:08:30,820
example on our Jenkins who go ahead and

00:08:26,700 --> 00:08:32,530
build a package on debian 7 or on debian

00:08:30,820 --> 00:08:34,570
eight but unfortunately this same

00:08:32,530 --> 00:08:36,669
package won't run on debian 7 because

00:08:34,570 --> 00:08:40,030
we've compiled against some system

00:08:36,669 --> 00:08:42,099
library so it won't work and will some

00:08:40,030 --> 00:08:44,050
the really formats someone has a support

00:08:42,099 --> 00:08:47,530
of this but unfortunately only says the

00:08:44,050 --> 00:08:49,690
linux but it doesn't say what kind of so

00:08:47,530 --> 00:08:51,889
we have we have we need to work around

00:08:49,690 --> 00:08:53,509
to this when we lay out at FP

00:08:51,889 --> 00:08:55,369
users in industries and this is the

00:08:53,509 --> 00:08:58,519
second important thing is using the

00:08:55,369 --> 00:09:01,369
upper corner AFP is a little bit weird

00:08:58,519 --> 00:09:02,959
if we support users and indices and you

00:09:01,369 --> 00:09:05,299
can mount have multiple users and

00:09:02,959 --> 00:09:07,009
multiple indices in its users can use

00:09:05,299 --> 00:09:08,389
multiple entities it's a little bit like

00:09:07,009 --> 00:09:10,040
github work it up you have multiple

00:09:08,389 --> 00:09:12,290
users and each either kind of multiple

00:09:10,040 --> 00:09:16,369
repositories it's the same and FP just

00:09:12,290 --> 00:09:18,040
with users and indices and yeah you can

00:09:16,369 --> 00:09:22,579
think of an index just like a bag of

00:09:18,040 --> 00:09:25,999
your pricing packages okay so how do we

00:09:22,579 --> 00:09:29,359
use this to manage our stuff so what we

00:09:25,999 --> 00:09:31,939
ended up doing is we created for each

00:09:29,359 --> 00:09:35,989
team we created FB user so they have

00:09:31,939 --> 00:09:38,449
their own credentials to login and then

00:09:35,989 --> 00:09:40,970
for each operating system that we

00:09:38,449 --> 00:09:42,679
support we create one index and when we

00:09:40,970 --> 00:09:44,839
now build packages on Jenkins we upload

00:09:42,679 --> 00:09:46,009
to this particular index so when we

00:09:44,839 --> 00:09:47,389
build on debian seven we upload to

00:09:46,009 --> 00:09:50,119
debian seven when you build on debian

00:09:47,389 --> 00:09:51,949
eight we upload to debian eight this

00:09:50,119 --> 00:09:55,069
works for these binary packages but

00:09:51,949 --> 00:09:57,860
there's also packages like they're pure

00:09:55,069 --> 00:09:59,480
pies and packages low compiled stuff you

00:09:57,860 --> 00:10:01,309
don't always want to upload these to all

00:09:59,480 --> 00:10:03,559
your approach of the operating system

00:10:01,309 --> 00:10:06,079
indices so we also introduced a

00:10:03,559 --> 00:10:08,269
so-called generic index where you upload

00:10:06,079 --> 00:10:09,799
this pure python packages and then we

00:10:08,269 --> 00:10:12,319
use a feature of def p which is called

00:10:09,799 --> 00:10:15,529
index inheritance so we can say okay

00:10:12,319 --> 00:10:17,689
this debian seven index inherits from

00:10:15,529 --> 00:10:19,669
the generic index and then you can see

00:10:17,689 --> 00:10:24,379
on the debian seven index all packages

00:10:19,669 --> 00:10:26,149
that are also available on generic so

00:10:24,379 --> 00:10:30,709
this is basically the queue for one team

00:10:26,149 --> 00:10:33,199
but I society of multiple teams and so

00:10:30,709 --> 00:10:34,999
what we do is we create one of these

00:10:33,199 --> 00:10:36,980
users for each team and then have a

00:10:34,999 --> 00:10:39,739
so-called aggregation index or we call

00:10:36,980 --> 00:10:41,989
it the platform index and it inherits

00:10:39,739 --> 00:10:43,399
from the corresponding teams so if you

00:10:41,989 --> 00:10:46,009
look at the platform index it has a

00:10:43,399 --> 00:10:47,629
let's say debian seven index and this

00:10:46,009 --> 00:10:49,129
Derby and seven index inherits from the

00:10:47,629 --> 00:10:51,949
Debian seven in details of all the

00:10:49,129 --> 00:10:53,600
different teams so in the end when a

00:10:51,949 --> 00:10:55,579
user wants to install the library or

00:10:53,600 --> 00:10:58,100
whatever you just write this command

00:10:55,579 --> 00:11:00,470
line below so you say ok people stole my

00:10:58,100 --> 00:11:02,360
package from this index server or from

00:11:00,470 --> 00:11:04,549
this def pie and on the stuffed i take

00:11:02,360 --> 00:11:05,840
this platform and the last part is the

00:11:04,549 --> 00:11:07,190
operating system you want to use

00:11:05,840 --> 00:11:08,870
and then you get the precompiled

00:11:07,190 --> 00:11:12,740
packages for this particular operating

00:11:08,870 --> 00:11:18,820
system so this is basically how we

00:11:12,740 --> 00:11:24,020
install all of our pictures except a few

00:11:18,820 --> 00:11:27,080
specialties and one of these is that our

00:11:24,020 --> 00:11:29,240
there our team flag and now we have the

00:11:27,080 --> 00:11:32,000
open source packages these are not

00:11:29,240 --> 00:11:34,430
little bear already power crafted by our

00:11:32,000 --> 00:11:35,870
teams but basically all what's available

00:11:34,430 --> 00:11:39,020
in the open source community let's say

00:11:35,870 --> 00:11:40,700
jungle and requests and whatever and the

00:11:39,020 --> 00:11:44,210
different teams depend on those open

00:11:40,700 --> 00:11:46,070
source packages so the software won't

00:11:44,210 --> 00:11:49,490
work without them but we have to upload

00:11:46,070 --> 00:11:51,290
them somewhere and what we decided is ok

00:11:49,490 --> 00:11:53,120
we summer treat the whole open source

00:11:51,290 --> 00:11:55,310
community as one team in our company and

00:11:53,120 --> 00:11:56,630
created one particular user for them

00:11:55,310 --> 00:11:59,930
again with the different operating

00:11:56,630 --> 00:12:01,550
system in this is and we now have a

00:11:59,930 --> 00:12:04,370
company-wide list where all packages

00:12:01,550 --> 00:12:06,050
stand and let we depend on and we built

00:12:04,370 --> 00:12:09,530
those using it to which we called st

00:12:06,050 --> 00:12:11,800
builder it uploads them to the torah OSS

00:12:09,530 --> 00:12:14,570
user and from there we can install them

00:12:11,800 --> 00:12:17,800
so yeah that's basically the stuff for

00:12:14,570 --> 00:12:20,930
what we use for libraries and so on but

00:12:17,800 --> 00:12:23,690
that's after a thing yeah sometimes you

00:12:20,930 --> 00:12:25,640
have packages which we are not a library

00:12:23,690 --> 00:12:28,340
but a specific application with a

00:12:25,640 --> 00:12:29,990
specific configuration that supposed to

00:12:28,340 --> 00:12:32,090
run at one specific mission and you

00:12:29,990 --> 00:12:33,620
don't really want to share for example

00:12:32,090 --> 00:12:35,120
and we do machine learning models so

00:12:33,620 --> 00:12:37,280
when you have a model for one specific

00:12:35,120 --> 00:12:39,350
customer you don't want to upload it to

00:12:37,280 --> 00:12:40,910
the upper provider part because then

00:12:39,350 --> 00:12:43,310
everybody could use it but they are not

00:12:40,910 --> 00:12:45,230
supposed to oil it wouldn't make any

00:12:43,310 --> 00:12:47,120
sense for them so we also create

00:12:45,230 --> 00:12:49,700
consumer industries which are basically

00:12:47,120 --> 00:12:51,830
just indices inheriting from the family

00:12:49,700 --> 00:12:56,630
platform so they get everything but can

00:12:51,830 --> 00:12:58,520
also upload their own stuff yeah that's

00:12:56,630 --> 00:13:00,530
basically our index layout how we use it

00:12:58,520 --> 00:13:03,710
and it can get that some of you think

00:13:00,530 --> 00:13:06,860
that's totally complicated and somewhat

00:13:03,710 --> 00:13:10,010
unnecessary but for us it has been a

00:13:06,860 --> 00:13:12,520
great success um we somehow introduced

00:13:10,010 --> 00:13:15,050
left in our company about a year ago

00:13:12,520 --> 00:13:17,459
within days or even days or weeks

00:13:15,050 --> 00:13:20,040
everybody has migrated to use it

00:13:17,459 --> 00:13:22,170
the adoption is in great and in this one

00:13:20,040 --> 00:13:25,259
year we have uploaded about 10,000

00:13:22,170 --> 00:13:28,459
packages and documentation tar balls we

00:13:25,259 --> 00:13:31,230
upload those to about 350 indices and

00:13:28,459 --> 00:13:33,899
yeah those has been downloaded about all

00:13:31,230 --> 00:13:36,110
the downloads accumulated to about 18

00:13:33,899 --> 00:13:40,019
terabytes so it's quite a lot for

00:13:36,110 --> 00:13:45,179
packages but we were able to do all this

00:13:40,019 --> 00:13:47,519
with only yeah small nations was 44 cars

00:13:45,179 --> 00:13:49,800
and for big load of rm30 whole setup is

00:13:47,519 --> 00:13:54,300
rather like blade yeah which is somewhat

00:13:49,800 --> 00:13:56,939
it creating and so but we are now using

00:13:54,300 --> 00:14:00,480
all of this on Jenkins on desktop and

00:13:56,939 --> 00:14:03,240
service everywhere and we somewhat have

00:14:00,480 --> 00:14:05,459
the problem if efd goes down most of our

00:14:03,240 --> 00:14:08,819
developers can go home for the state

00:14:05,459 --> 00:14:10,589
because yeah when they commit stuff the

00:14:08,819 --> 00:14:12,929
Jenkins job won't run because they can't

00:14:10,589 --> 00:14:16,619
upload the packages so basically if

00:14:12,929 --> 00:14:18,509
testicles down we can we can work so we

00:14:16,619 --> 00:14:22,040
have to invest how do we make the stable

00:14:18,509 --> 00:14:27,059
how do we keep it up all the time and

00:14:22,040 --> 00:14:28,529
this is how we do it so there this is

00:14:27,059 --> 00:14:30,540
now a single house set up so we just

00:14:28,529 --> 00:14:33,660
look what processes are running on this

00:14:30,540 --> 00:14:37,350
house so at the front we have an engine

00:14:33,660 --> 00:14:39,809
X to some of the recommended setup but

00:14:37,350 --> 00:14:41,670
what we now do we use a replica and a

00:14:39,809 --> 00:14:44,040
master and this is a concept of def p

00:14:41,670 --> 00:14:48,299
which somewhat a you can think of it as

00:14:44,040 --> 00:14:50,850
a let's say transparent cash if you talk

00:14:48,299 --> 00:14:52,110
to the replica it can directly serve

00:14:50,850 --> 00:14:53,790
your packages with you if you want to

00:14:52,110 --> 00:14:56,069
install something but if you want to

00:14:53,790 --> 00:14:57,899
upload a package the replica

00:14:56,069 --> 00:15:01,110
transparently talks to the master the

00:14:57,899 --> 00:15:03,569
master yeah performed the state change

00:15:01,110 --> 00:15:04,829
uploads your package and finally replica

00:15:03,569 --> 00:15:07,649
conserve your request in jest ok

00:15:04,829 --> 00:15:10,290
everything worked for us this is the

00:15:07,649 --> 00:15:12,299
great advantage that the time we want to

00:15:10,290 --> 00:15:14,309
do a backup of the master we can simply

00:15:12,299 --> 00:15:16,679
go ahead disable the master but the

00:15:14,309 --> 00:15:18,540
replica is still up so the requests will

00:15:16,679 --> 00:15:20,879
come down go to the engine the internet

00:15:18,540 --> 00:15:24,269
will pass into the replica replica will

00:15:20,879 --> 00:15:26,309
allow people to install packages if an

00:15:24,269 --> 00:15:28,079
upload and someone tries to upload a

00:15:26,309 --> 00:15:29,490
package this won't work but at least we

00:15:28,079 --> 00:15:31,830
can serve traffic

00:15:29,490 --> 00:15:33,870
if the if the backup is done we

00:15:31,830 --> 00:15:36,480
reactivate the master my producing works

00:15:33,870 --> 00:15:39,839
again so we can sum up to see row down

00:15:36,480 --> 00:15:41,580
time update update or backup for

00:15:39,839 --> 00:15:43,200
installations and it also helps when we

00:15:41,580 --> 00:15:45,510
have to do my true version update of def

00:15:43,200 --> 00:15:47,730
p there you have to export of the state

00:15:45,510 --> 00:15:50,220
from the master create a new master

00:15:47,730 --> 00:15:52,740
import all data again and this also a

00:15:50,220 --> 00:15:55,020
case where we can use to set up so we

00:15:52,740 --> 00:15:58,610
just disable the master create a new one

00:15:55,020 --> 00:16:01,260
but the replica still serving traffic

00:15:58,610 --> 00:16:03,120
now this is a single host setup but you

00:16:01,260 --> 00:16:08,430
still have the problem okay this single

00:16:03,120 --> 00:16:10,770
host might go down so we some havoc

00:16:08,430 --> 00:16:14,010
extended this through a multi multi host

00:16:10,770 --> 00:16:18,360
set up the idea is basically the same

00:16:14,010 --> 00:16:20,610
you have to host reverse proxy in front

00:16:18,360 --> 00:16:23,970
which basically routes incoming traffic

00:16:20,610 --> 00:16:26,670
to one health or the other and on each

00:16:23,970 --> 00:16:29,040
we gain of a replica and a single master

00:16:26,670 --> 00:16:31,050
we are talking to deftly support only

00:16:29,040 --> 00:16:34,770
one master but that's not a problem in

00:16:31,050 --> 00:16:36,329
our case because we we basically to get

00:16:34,770 --> 00:16:39,300
the same guarantee yet we have every

00:16:36,329 --> 00:16:41,370
before because if the host a goes down

00:16:39,300 --> 00:16:46,020
it's alright because hoes be still there

00:16:41,370 --> 00:16:48,300
to serve traffic using his replica if b

00:16:46,020 --> 00:16:52,440
goes down we can still serve traffic and

00:16:48,300 --> 00:16:54,029
also upload packages and for after the

00:16:52,440 --> 00:16:55,290
serving traffic part is this important

00:16:54,029 --> 00:16:57,899
that we always want to allow people to

00:16:55,290 --> 00:16:59,820
install packages because if they can't

00:16:57,899 --> 00:17:02,730
upload packages they're always I only do

00:16:59,820 --> 00:17:06,179
this during day time so we also can fix

00:17:02,730 --> 00:17:08,699
our house set up during office hours but

00:17:06,179 --> 00:17:10,920
the installation path also has to work

00:17:08,699 --> 00:17:14,150
at night so this is basically a great

00:17:10,920 --> 00:17:17,490
setup for us because yeah we are somehow

00:17:14,150 --> 00:17:18,870
we we don't need really neat yeah we

00:17:17,490 --> 00:17:23,699
don't need to stand up at night to fix

00:17:18,870 --> 00:17:26,339
this yeah this is some of the how we

00:17:23,699 --> 00:17:28,230
used to FP the general structure just a

00:17:26,339 --> 00:17:31,890
short repetition what what you've seen

00:17:28,230 --> 00:17:35,220
so as far as I said we create wheel

00:17:31,890 --> 00:17:37,740
packages so binary packages we give them

00:17:35,220 --> 00:17:40,500
unique version numbers using it we then

00:17:37,740 --> 00:17:42,140
upload all this to def p entities with

00:17:40,500 --> 00:17:45,160
one index operating system

00:17:42,140 --> 00:17:47,810
here's one fact that I've missed before

00:17:45,160 --> 00:17:50,570
we flag all our deaf peers as

00:17:47,810 --> 00:17:51,950
nonvolatile this means you can upload

00:17:50,570 --> 00:17:53,720
new packages to them but you can't

00:17:51,950 --> 00:17:56,690
override existing ones and you can't

00:17:53,720 --> 00:17:58,430
delete existing ones so this is

00:17:56,690 --> 00:18:00,680
important because then we yeah we can

00:17:58,430 --> 00:18:02,330
say we only create packages and a user

00:18:00,680 --> 00:18:03,620
doesn't has to have to feel that once

00:18:02,330 --> 00:18:05,000
you've installed something and installs

00:18:03,620 --> 00:18:07,130
again you get in other words nor

00:18:05,000 --> 00:18:09,950
whatever but he's always sure to get the

00:18:07,130 --> 00:18:14,750
right one yeah last thing is we create

00:18:09,950 --> 00:18:17,630
users for internal teams and so yeah

00:18:14,750 --> 00:18:21,200
that's basically it and if you're adopt

00:18:17,630 --> 00:18:22,790
this set up the first three steps might

00:18:21,200 --> 00:18:24,530
be enough for you for now but in the

00:18:22,790 --> 00:18:26,000
future if you think about okay it has to

00:18:24,530 --> 00:18:28,490
be highly available you can look into

00:18:26,000 --> 00:18:33,980
the replica feature and use it for you

00:18:28,490 --> 00:18:36,770
advantage okay so but one last tip for

00:18:33,980 --> 00:18:38,810
you if you decide okay this is somewhat

00:18:36,770 --> 00:18:40,790
interesting to legend that we have

00:18:38,810 --> 00:18:44,090
learned that might help you first of all

00:18:40,790 --> 00:18:46,730
you want to serve a set of a test server

00:18:44,090 --> 00:18:48,650
that your users can use grass we had

00:18:46,730 --> 00:18:51,200
many cases where people created new boot

00:18:48,650 --> 00:18:53,270
jobs when your artifacts and as you know

00:18:51,200 --> 00:18:54,950
Jenkins yeah your first Jenkins threw up

00:18:53,270 --> 00:18:59,060
your first run won't always succeed so

00:18:54,950 --> 00:19:00,440
you get many broken packages and then

00:18:59,060 --> 00:19:02,510
the people had to come to us and say

00:19:00,440 --> 00:19:04,460
okay can you please delete this package

00:19:02,510 --> 00:19:06,020
because yeah someone messed up the

00:19:04,460 --> 00:19:08,240
versioning or whatever but all these

00:19:06,020 --> 00:19:09,500
index a nonvolatile is I can't delete it

00:19:08,240 --> 00:19:12,140
themselves they have to come to us and

00:19:09,500 --> 00:19:14,180
this is somewhat overhead and you can

00:19:12,140 --> 00:19:16,850
solve this play out if you all to give

00:19:14,180 --> 00:19:20,840
them a server let's say let's do a test

00:19:16,850 --> 00:19:22,400
FP server dressed installed there just

00:19:20,840 --> 00:19:26,480
somewhat helping there and then other

00:19:22,400 --> 00:19:28,700
thing is you is somewhere advisable to

00:19:26,480 --> 00:19:32,180
not let your users used FB client

00:19:28,700 --> 00:19:33,620
directly it has some important command

00:19:32,180 --> 00:19:34,910
line argument that you have to use in a

00:19:33,620 --> 00:19:37,160
straight environment or when you are

00:19:34,910 --> 00:19:39,980
using stuff like it s TM and people tend

00:19:37,160 --> 00:19:42,830
to forget it so here using client rapper

00:19:39,980 --> 00:19:44,510
you can somehow fix those arguments for

00:19:42,830 --> 00:19:49,190
all of your users so they can't do it

00:19:44,510 --> 00:19:52,250
wrong yeah so that's basically the run

00:19:49,190 --> 00:19:53,780
through through our setup I hope you've

00:19:52,250 --> 00:19:55,950
enjoyed it so thank you for your

00:19:53,780 --> 00:19:57,960
attention I'm open for class

00:19:55,950 --> 00:20:01,490
no but you can also come by our booth

00:19:57,960 --> 00:20:01,490
and afghan score afterwards

00:20:07,680 --> 00:20:21,340
any questions yes you were talking about

00:20:17,050 --> 00:20:24,490
those the group for all the dependencies

00:20:21,340 --> 00:20:28,630
from the open source community can def p

00:20:24,490 --> 00:20:34,690
work like proxying repository for them

00:20:28,630 --> 00:20:37,540
yeah right so if I request a new package

00:20:34,690 --> 00:20:39,460
that Kevin hasn't been downloaded and I

00:20:37,540 --> 00:20:42,250
target the fight that I would download

00:20:39,460 --> 00:20:44,260
it and catch it for later right def p

00:20:42,250 --> 00:20:46,690
has a mirroring feature so by default

00:20:44,260 --> 00:20:48,940
you wouldn't need this OSS index how we

00:20:46,690 --> 00:20:50,500
use it but if all def p has a special

00:20:48,940 --> 00:20:54,010
specific user and in dec it's called

00:20:50,500 --> 00:20:56,740
route / pi p and you get all packages

00:20:54,010 --> 00:20:58,450
from piper python little by default so

00:20:56,740 --> 00:21:01,809
you don't have to do anything manually

00:20:58,450 --> 00:21:04,330
it's just as we decided okay we want to

00:21:01,809 --> 00:21:06,730
repackage all those packages as wheels

00:21:04,330 --> 00:21:09,040
and most of them are not available i

00:21:06,730 --> 00:21:12,220
squealed on puppy pad Murdock so we

00:21:09,040 --> 00:21:15,100
somehow say okay we want to upload them

00:21:12,220 --> 00:21:17,290
specifically and it also has the

00:21:15,100 --> 00:21:19,360
advantage if you somewhat do this meant

00:21:17,290 --> 00:21:21,100
with this menu or somehow manual step

00:21:19,360 --> 00:21:24,460
that you say okay I want to explicitly

00:21:21,100 --> 00:21:25,750
say these should be on my def p that if

00:21:24,460 --> 00:21:27,130
the company that's for example we do

00:21:25,750 --> 00:21:30,790
software as a service so we have to look

00:21:27,130 --> 00:21:33,370
at the licenses we are using so we are

00:21:30,790 --> 00:21:35,620
not allowed to use any pepper or all of

00:21:33,370 --> 00:21:37,240
package on that awhile when the internet

00:21:35,620 --> 00:21:40,300
but we have to look at the licenses for

00:21:37,240 --> 00:21:41,740
example B's video MIT is ok so we

00:21:40,300 --> 00:21:43,780
somewhat do this license check when

00:21:41,740 --> 00:21:45,670
users say okay please add this package

00:21:43,780 --> 00:21:47,530
on this versions to this large white

00:21:45,670 --> 00:21:49,540
list and then our tool girls ahead and

00:21:47,530 --> 00:21:51,940
upload them automatically so we have

00:21:49,540 --> 00:21:53,740
this step in between but you don't need

00:21:51,940 --> 00:21:57,690
it you can by default use the PI P

00:21:53,740 --> 00:22:00,040
mirroring feature yeah okay thank you

00:21:57,690 --> 00:22:03,640
how do you do our syndication when

00:22:00,040 --> 00:22:06,760
installing packages so I assume the debt

00:22:03,640 --> 00:22:08,110
pizer is available publicly so the like

00:22:06,760 --> 00:22:11,320
in the internet so the service can

00:22:08,110 --> 00:22:12,910
actually install from it and giving our

00:22:11,320 --> 00:22:14,410
syndication during install or doing

00:22:12,910 --> 00:22:16,429
uploads exactly because I think you

00:22:14,410 --> 00:22:18,980
upload private packages so will not ever

00:22:16,429 --> 00:22:22,369
we should be able to install them it's

00:22:18,980 --> 00:22:24,440
that's a problem somehow and the service

00:22:22,369 --> 00:22:26,409
standing in our company only internally

00:22:24,440 --> 00:22:28,970
so it's not available from the internet

00:22:26,409 --> 00:22:31,249
this is someone feasible fast because we

00:22:28,970 --> 00:22:34,429
don't run stuff on the open club but

00:22:31,249 --> 00:22:38,210
only on our own computers on our own

00:22:34,429 --> 00:22:39,740
data centers so this works for us AFP by

00:22:38,210 --> 00:22:42,799
default you have passwords when you

00:22:39,740 --> 00:22:45,080
upload stuff you can use l-dub users

00:22:42,799 --> 00:22:46,909
elder groups for authentication or just

00:22:45,080 --> 00:22:49,940
users you created yourself on the DFT

00:22:46,909 --> 00:22:53,749
server that works but your install

00:22:49,940 --> 00:22:55,399
there's no authentication there so by

00:22:53,749 --> 00:22:57,049
default if you know an index and user

00:22:55,399 --> 00:23:00,499
and the package that's there you can

00:22:57,049 --> 00:23:02,269
install it yeah that's recurrent so the

00:23:00,499 --> 00:23:05,600
only way we'll be basic also something

00:23:02,269 --> 00:23:07,669
something like that from HTTP once again

00:23:05,600 --> 00:23:09,409
please basic authentication would work

00:23:07,669 --> 00:23:12,379
that's what we use but I thought maybe

00:23:09,409 --> 00:23:14,509
there's a better a better solution there

00:23:12,379 --> 00:23:17,330
that might work um I would be interested

00:23:14,509 --> 00:23:19,460
to talk to you after what so yeah but

00:23:17,330 --> 00:23:21,700
for now we have it it's basically open

00:23:19,460 --> 00:23:21,700
part

00:23:28,050 --> 00:23:34,050
thanks for the talk so you mentioned

00:23:30,510 --> 00:23:37,500
earlier that you like to use to build

00:23:34,050 --> 00:23:40,500
wheels and in your private repositories

00:23:37,500 --> 00:23:42,210
but also use the mirroring feature so is

00:23:40,500 --> 00:23:43,920
there any way that I can have like a

00:23:42,210 --> 00:23:46,380
local and that's with my packages that

00:23:43,920 --> 00:23:48,390
are aren't exposed still use the

00:23:46,380 --> 00:23:51,060
mirroring feature but I can build a

00:23:48,390 --> 00:23:54,510
wheel for lxml or non pie or whatever

00:23:51,060 --> 00:23:56,550
that works that works um because I said

00:23:54,510 --> 00:23:58,500
you have this root PI P index and what

00:23:56,550 --> 00:24:00,330
you can do is you can in when you have

00:23:58,500 --> 00:24:02,430
your own index you can inherit from this

00:24:00,330 --> 00:24:03,960
little puppy so first of all you will

00:24:02,430 --> 00:24:05,730
see your packages and all from the

00:24:03,960 --> 00:24:07,560
internet and if you send aside okay I

00:24:05,730 --> 00:24:10,170
want this specific package of the wheel

00:24:07,560 --> 00:24:12,750
you read packages as a wheel and upload

00:24:10,170 --> 00:24:14,490
it to your index and then you basically

00:24:12,750 --> 00:24:17,190
get the rest of the interview packages

00:24:14,490 --> 00:24:18,750
and this one as a wheel but there's one

00:24:17,190 --> 00:24:21,900
thing you have to look out for that

00:24:18,750 --> 00:24:24,630
somewhere a security issue because if

00:24:21,900 --> 00:24:26,400
you defeat or it's a feature when you

00:24:24,630 --> 00:24:27,870
upload a package that's available on

00:24:26,400 --> 00:24:31,260
your index and also in the internet def

00:24:27,870 --> 00:24:33,690
p goes ahead and says okay I won't look

00:24:31,260 --> 00:24:36,510
at at the internet for this package

00:24:33,690 --> 00:24:38,580
anymore because otherwise some guy might

00:24:36,510 --> 00:24:39,930
go to popeyes no dork and upload the

00:24:38,580 --> 00:24:41,370
package your private package with a

00:24:39,930 --> 00:24:44,340
higher version number and then it would

00:24:41,370 --> 00:24:46,800
get this so there's a wide twisting

00:24:44,340 --> 00:24:48,570
feature and you explicitly say i upload

00:24:46,800 --> 00:24:52,050
this one at the wheel please also look

00:24:48,570 --> 00:24:54,240
for other stuff on the internet let's so

00:24:52,050 --> 00:24:57,840
I kind of have to pin the version if I

00:24:54,240 --> 00:25:02,570
upload lxml 34 and 35 gets uploaded I

00:24:57,840 --> 00:25:02,570
have to rebuild it step right over again

00:25:13,129 --> 00:25:18,330
thanks for the talk firstly secondly do

00:25:16,080 --> 00:25:19,980
you support something like snapshotting

00:25:18,330 --> 00:25:21,990
I want to deploy a version and

00:25:19,980 --> 00:25:24,690
production and i want to know that

00:25:21,990 --> 00:25:26,700
version 2 point 0 for example only has

00:25:24,690 --> 00:25:29,940
the set of packages and i want to still

00:25:26,700 --> 00:25:31,259
be able to develop further so

00:25:29,940 --> 00:25:33,440
unfortunately didn't get the question

00:25:31,259 --> 00:25:38,429
but can you repeat it please you support

00:25:33,440 --> 00:25:40,470
snapshotting of indexes by default this

00:25:38,429 --> 00:25:42,990
knows that feature but you can somehow

00:25:40,470 --> 00:25:45,059
rebuild it yourself I mean there's a

00:25:42,990 --> 00:25:46,919
feature called you can deaf people staff

00:25:45,059 --> 00:25:48,659
be pushed so you can say okay on this

00:25:46,919 --> 00:25:50,279
particular index is this text in this

00:25:48,659 --> 00:25:53,460
version and I want to move it to another

00:25:50,279 --> 00:25:56,009
index without modifying it so you can

00:25:53,460 --> 00:25:57,389
basically do this snapshotting like okay

00:25:56,009 --> 00:25:58,860
now move all this package to another

00:25:57,389 --> 00:26:03,110
index and then that can't be modified

00:25:58,860 --> 00:26:05,399
it's just what you what you want yeah

00:26:03,110 --> 00:26:08,220
maybe an explanation why we don't use

00:26:05,399 --> 00:26:09,990
this feature because yeah we have some

00:26:08,220 --> 00:26:12,110
guys now company that likes to automate

00:26:09,990 --> 00:26:14,940
stuff so they put simply automate this

00:26:12,110 --> 00:26:16,350
deaf people command and then there

00:26:14,940 --> 00:26:17,909
wouldn't be any advantage so we said

00:26:16,350 --> 00:26:19,860
okay we don't need it because they will

00:26:17,909 --> 00:26:24,320
automate it anyway at the end of the

00:26:19,860 --> 00:26:27,799
train comes open yeah any more questions

00:26:24,320 --> 00:26:27,799
okay thanks very much

00:26:32,730 --> 00:26:34,790

YouTube URL: https://www.youtube.com/watch?v=re7dtwYy5sc


