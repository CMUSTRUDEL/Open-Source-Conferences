Title: Hitul Mistry - Python Multithreading and Multiprocessing: Concurrency and Parallelism
Publication date: 2015-08-08
Playlist: EuroPython 2015
Description: 
	Hitul Mistry - Python Multithreading and Multiprocessing: Concurrency and Parallelism
[EuroPython 2015]
[20 July 2015]
[Bilbao, Euskadi, Spain]

In this talk, people will get introduced to python threading and
multiprocessing packages. This talk will cover
multiprocessing/threaded development best practices, problems occurs
in development, things to know before multiprocessing/multi-threading.
After this talk attendees will be able to develop
multiprocessing/threaded applications.

This talk will cover threads, global interpreter lock, thread pool,
processes, process pool, synchronization locks - Lock & RLock ,
semaphores, events, condition, timer, pipes, queue, shared memory.
This talk will also cover best practices and problems in
multiprocessing and threaded application development.
Captions: 
	00:00:02,480 --> 00:00:07,790
yeah thank you thank you everybody so

00:00:05,370 --> 00:00:09,840
basically these talk peace about

00:00:07,790 --> 00:00:12,240
multi-processing multithreading

00:00:09,840 --> 00:00:14,730
concurrency and parallelism so this talk

00:00:12,240 --> 00:00:17,400
is basically for threading and

00:00:14,730 --> 00:00:19,410
processing so basically while doing a

00:00:17,400 --> 00:00:22,109
programming using a threads and

00:00:19,410 --> 00:00:24,300
processing video mistakes I to use rails

00:00:22,109 --> 00:00:26,099
right to use processes in different

00:00:24,300 --> 00:00:28,830
programming language different compilers

00:00:26,099 --> 00:00:30,570
has a different different conditions to

00:00:28,830 --> 00:00:33,540
anchor dissonance and methodologies to

00:00:30,570 --> 00:00:35,910
execute trade processes so in this talk

00:00:33,540 --> 00:00:38,070
I will start from basics like how to

00:00:35,910 --> 00:00:40,260
start a thread how to process and a

00:00:38,070 --> 00:00:42,210
basic thing from that we will slowly go

00:00:40,260 --> 00:00:46,700
to advanced topics and we will cover

00:00:42,210 --> 00:00:51,719
some internals of Nazi Python as well ok

00:00:46,700 --> 00:00:54,390
yeah so let me t ba tell me about about

00:00:51,719 --> 00:00:57,120
myself bit about myself so basically i

00:00:54,390 --> 00:00:58,590
started my career with a swing or there

00:00:57,120 --> 00:01:00,239
was a software engineer and letter

00:00:58,590 --> 00:01:02,340
currently i am working as a senior

00:01:00,239 --> 00:01:04,890
platform software engineer adsorptions i

00:01:02,340 --> 00:01:08,189
have experience of development of large

00:01:04,890 --> 00:01:10,350
scale scale a large scale fault orders

00:01:08,189 --> 00:01:13,740
and mission critical systems and some

00:01:10,350 --> 00:01:17,340
atl's as well and I passing it about a

00:01:13,740 --> 00:01:21,900
web backend and infrastructure and I'm a

00:01:17,340 --> 00:01:24,720
Python East and I am goofer yeah so

00:01:21,900 --> 00:01:27,450
basically of what is paralyzed amande

00:01:24,720 --> 00:01:31,079
what is concurrency so usually people I

00:01:27,450 --> 00:01:34,259
mean usually people do a mistake in this

00:01:31,079 --> 00:01:37,530
terms so many people think that pile ism

00:01:34,259 --> 00:01:39,869
and concurrency is same but reality the

00:01:37,530 --> 00:01:43,560
both are different they both are not

00:01:39,869 --> 00:01:47,340
same so basically paralyzed embarrassin

00:01:43,560 --> 00:01:52,439
is like to add more processor borkar

00:01:47,340 --> 00:01:56,040
more core cpu cores to to make

00:01:52,439 --> 00:02:00,750
computation faster it is to add workers

00:01:56,040 --> 00:02:02,729
to add more codes to to your task so

00:02:00,750 --> 00:02:05,219
suppose you are executing something I

00:02:02,729 --> 00:02:07,229
mean executing a sometimes on some task

00:02:05,219 --> 00:02:09,929
or doing some computation or something

00:02:07,229 --> 00:02:12,170
that you are adding more goals more

00:02:09,929 --> 00:02:15,620
processors small workers into

00:02:12,170 --> 00:02:19,099
way to make it faster now there another

00:02:15,620 --> 00:02:21,950
town except conference concurrency is

00:02:19,099 --> 00:02:25,130
little built-in related with a

00:02:21,950 --> 00:02:26,900
parallelism concurrency is to permit a

00:02:25,130 --> 00:02:29,480
multiple tasks to proceed without

00:02:26,900 --> 00:02:32,150
waiting for each other so for example i

00:02:29,480 --> 00:02:36,260
have 4 processor like for CP course or

00:02:32,150 --> 00:02:39,489
force or forces are in which me so how

00:02:36,260 --> 00:02:43,069
do utilize them perfectly how do I mean

00:02:39,489 --> 00:02:46,420
paralyze a task in between it's like 22

00:02:43,069 --> 00:02:49,880
so for an example i have 4 cpu cores and

00:02:46,420 --> 00:02:52,400
i want to divide all the workload with

00:02:49,880 --> 00:02:57,400
all the cpus so it's about concurrency

00:02:52,400 --> 00:03:00,890
so concurrency tails with that things ok

00:02:57,400 --> 00:03:03,620
so that's a palace in one example there

00:03:00,890 --> 00:03:06,440
is a eight boxes on left hand side and

00:03:03,620 --> 00:03:09,950
there is a two ways so there are two

00:03:06,440 --> 00:03:13,850
guys two buggers whose task is to or

00:03:09,950 --> 00:03:17,239
take one box from left hand side and put

00:03:13,850 --> 00:03:19,640
it on right hand side so here two ways

00:03:17,239 --> 00:03:24,049
are there and two workers are there so

00:03:19,640 --> 00:03:26,600
they will do this work I mean one by one

00:03:24,049 --> 00:03:28,880
I mean first of all it will in a

00:03:26,600 --> 00:03:32,120
parallel manner or so first of all that

00:03:28,880 --> 00:03:35,000
both guy will move or take that box they

00:03:32,120 --> 00:03:38,510
will go on b1 and both the ways and they

00:03:35,000 --> 00:03:42,230
will put it on right now parallelism

00:03:38,510 --> 00:03:44,720
needs to add one more I mean one more

00:03:42,230 --> 00:03:47,510
worker on board of both sides so like I

00:03:44,720 --> 00:03:52,030
have added two workers so total working

00:03:47,510 --> 00:03:56,239
for workers so it's a parison so now

00:03:52,030 --> 00:03:57,980
here in this example I have to be so

00:03:56,239 --> 00:04:00,410
like even though i have four burgers

00:03:57,980 --> 00:04:02,120
then also i cannot get the speed ups

00:04:00,410 --> 00:04:05,660
here the reason is that there are two

00:04:02,120 --> 00:04:07,430
ways so at a time a1 workers work he can

00:04:05,660 --> 00:04:10,760
come in town I mean for burger cannot

00:04:07,430 --> 00:04:13,280
work at a time so here concurrency comes

00:04:10,760 --> 00:04:17,000
in concurrency is like to create a more

00:04:13,280 --> 00:04:19,489
ways to execute it pad yeah so that's

00:04:17,000 --> 00:04:21,820
the term parallelism and concurrency is

00:04:19,489 --> 00:04:21,820
about

00:04:23,580 --> 00:04:29,230
another term is a multithreading and

00:04:26,740 --> 00:04:33,310
multiprocessing so it's a very simple

00:04:29,230 --> 00:04:37,330
term it's like to our CP Amina your

00:04:33,310 --> 00:04:40,030
operating system's ability to 2l to run

00:04:37,330 --> 00:04:42,400
your multiple task in parallel manner

00:04:40,030 --> 00:04:44,230
using a threads or processes it's a

00:04:42,400 --> 00:04:48,810
multi threading and multiprocessing it

00:04:44,230 --> 00:04:52,240
is a very simple term it's too and

00:04:48,810 --> 00:04:55,090
trails are nothing but they are part of

00:04:52,240 --> 00:04:58,650
processes as someone we can call it a

00:04:55,090 --> 00:05:02,500
lightweight processes and processes are

00:04:58,650 --> 00:05:07,450
it describes a program which we are

00:05:02,500 --> 00:05:09,340
executing so multi threading and

00:05:07,450 --> 00:05:11,500
multiprocessing is like that there are

00:05:09,340 --> 00:05:12,850
too many puppies and they are eating

00:05:11,500 --> 00:05:15,340
everything they are they are dealing

00:05:12,850 --> 00:05:17,440
with their old stuff so it is a

00:05:15,340 --> 00:05:21,670
parallelism they parallely acting the

00:05:17,440 --> 00:05:25,480
stuff okay so let's have a demo how to

00:05:21,670 --> 00:05:28,450
start a thread in a Python it is very

00:05:25,480 --> 00:05:31,380
easy to start a new thread then API is

00:05:28,450 --> 00:05:31,380
really really easy

00:05:44,479 --> 00:05:51,780
so medically three trading is a module

00:05:49,470 --> 00:05:54,509
which deals with the threads in the air

00:05:51,780 --> 00:05:57,360
python and 3ds they basically circle ass

00:05:54,509 --> 00:06:00,060
which deals with a normal I mean traits

00:05:57,360 --> 00:06:03,000
so first of all let us create one

00:06:00,060 --> 00:06:05,340
function which will do a simple very

00:06:03,000 --> 00:06:11,160
simple stuff it will do a print hello

00:06:05,340 --> 00:06:14,240
world Oh sod so it will do very simple

00:06:11,160 --> 00:06:17,970
stuff now what I will do is I will

00:06:14,240 --> 00:06:22,199
creating a new trade checked so in a

00:06:17,970 --> 00:06:25,440
target being specify I have function

00:06:22,199 --> 00:06:27,360
name and enough arguments we will

00:06:25,440 --> 00:06:30,000
specify argument is with the bank blank

00:06:27,360 --> 00:06:32,639
because there is no argument Tito start

00:06:30,000 --> 00:06:36,000
it will start a thread Tito join so it's

00:06:32,639 --> 00:06:39,240
a it's a method which which will wait

00:06:36,000 --> 00:06:42,210
until your trade execution stops now I

00:06:39,240 --> 00:06:44,310
am going to run this how so it's

00:06:42,210 --> 00:06:46,470
straight started it printed it and

00:06:44,310 --> 00:06:50,400
that's it so that was a very basic

00:06:46,470 --> 00:06:54,870
example of threads so in a Python it's

00:06:50,400 --> 00:06:57,780
very easy so basically this is a python

00:06:54,870 --> 00:07:00,840
3d it is a module it's a high level

00:06:57,780 --> 00:07:03,510
model under the under it is a base model

00:07:00,840 --> 00:07:05,669
is a thread module which we should not

00:07:03,510 --> 00:07:07,470
choose it basically it so we should

00:07:05,669 --> 00:07:11,220
always use a threading module because

00:07:07,470 --> 00:07:15,090
thread is inherited in training module

00:07:11,220 --> 00:07:16,860
in Python 3 or thread module is renamed

00:07:15,090 --> 00:07:19,560
to underscore trade so that's why it's

00:07:16,860 --> 00:07:21,990
like I mean this would not use it I mean

00:07:19,560 --> 00:07:25,560
kinda manually and another thing another

00:07:21,990 --> 00:07:29,310
model added into Python jury's dummy 3d

00:07:25,560 --> 00:07:32,490
module which provides so whenever so if

00:07:29,310 --> 00:07:34,740
there is no 3 underscore thread modules

00:07:32,490 --> 00:07:37,740
available then it will raise importer

00:07:34,740 --> 00:07:41,430
that's fine Python 3 there is a dummy

00:07:37,740 --> 00:07:46,979
training module which we can use at the

00:07:41,430 --> 00:07:49,470
depth yeah so basically python python 3

00:07:46,979 --> 00:07:51,389
HR systems rates so whenever we start

00:07:49,470 --> 00:07:53,550
here we start a thread at the time it

00:07:51,389 --> 00:07:55,260
will open it will request operating

00:07:53,550 --> 00:07:56,910
system to start a thread

00:07:55,260 --> 00:08:00,360
and operating system will manage

00:07:56,910 --> 00:08:02,400
everything so for example I just called

00:08:00,360 --> 00:08:04,770
the start method so it will call the

00:08:02,400 --> 00:08:08,190
system I mean operating systems API to

00:08:04,770 --> 00:08:10,680
start a new thread and in a linux

00:08:08,190 --> 00:08:13,740
machine is POSIX threads so basically

00:08:10,680 --> 00:08:17,190
POSIX is nothing but in older days there

00:08:13,740 --> 00:08:19,280
was like many there was many hardwood

00:08:17,190 --> 00:08:22,230
hardware manufacturers they used to

00:08:19,280 --> 00:08:25,800
provide their own eps and everything and

00:08:22,230 --> 00:08:27,740
it was creating a some trouble for

00:08:25,800 --> 00:08:29,790
developers because they had to fight

00:08:27,740 --> 00:08:31,950
different different API for different

00:08:29,790 --> 00:08:33,630
different vendors that's why one new

00:08:31,950 --> 00:08:36,690
standard define for that and it's a

00:08:33,630 --> 00:08:39,870
POSIX so in a Python there is a

00:08:36,690 --> 00:08:43,680
piece-rate library sir so it is being

00:08:39,870 --> 00:08:47,340
used by five hundreds in a windows oh I

00:08:43,680 --> 00:08:51,330
mean api is provided by windows which if

00:08:47,340 --> 00:08:53,400
implemented in python and yeah all the

00:08:51,330 --> 00:08:55,950
scheduling is will be managed by

00:08:53,400 --> 00:08:58,860
operating system so how do speech a

00:08:55,950 --> 00:09:00,900
thread how do how to do it or everything

00:08:58,860 --> 00:09:06,660
will be managed by operating system

00:09:00,900 --> 00:09:09,050
Python will not deal with it yeah ok so

00:09:06,660 --> 00:09:13,320
those so that's the one thing lags

00:09:09,050 --> 00:09:16,280
execute so let me show you some another

00:09:13,320 --> 00:09:16,280
example of trade

00:09:22,440 --> 00:09:24,470
Oh

00:09:40,410 --> 00:09:46,829
so basically I am like looping a deal

00:09:43,860 --> 00:09:53,339
and is not greater than zero so now i

00:09:46,829 --> 00:10:02,220
will try to yeah so now i specify a

00:09:53,339 --> 00:10:12,779
target a function named to Cal and RTS

00:10:02,220 --> 00:10:15,060
too ok and i am defining another trade

00:10:12,779 --> 00:10:26,490
because i am going to start two threads

00:10:15,060 --> 00:10:31,139
at a time ok now i will start a thread

00:10:26,490 --> 00:10:36,360
to thread one first so after this method

00:10:31,139 --> 00:10:40,379
this I mean it will start starting three

00:10:36,360 --> 00:10:43,670
two I will wait for 381 to complete wait

00:10:40,379 --> 00:10:43,670
for 32 to complete

00:10:56,209 --> 00:11:05,019
you

00:10:57,889 --> 00:11:05,019
sorry okay Oh

00:11:13,429 --> 00:11:18,869
okay okay let's let us keep this for now

00:11:16,319 --> 00:11:20,519
so basically it is like whenever I will

00:11:18,869 --> 00:11:23,160
execute two threads at a time for

00:11:20,519 --> 00:11:26,729
examples one method it's taking two

00:11:23,160 --> 00:11:29,099
seconds to complete it and what I am

00:11:26,729 --> 00:11:32,909
doing is I am executing to I mean two

00:11:29,099 --> 00:11:37,439
threads using it using the same method

00:11:32,909 --> 00:11:40,470
and actually it should I mean running

00:11:37,439 --> 00:11:42,389
parallel more MORE but in a Python when

00:11:40,470 --> 00:11:45,659
we are starting more than one trade they

00:11:42,389 --> 00:11:49,079
will not run in a peril so basically I

00:11:45,659 --> 00:11:52,279
know in a Python parallel parallel

00:11:49,079 --> 00:11:55,649
running of threads is a forbidden I mean

00:11:52,279 --> 00:11:58,049
number of any number of threads you are

00:11:55,649 --> 00:12:01,409
opening you cannot run in a time in

00:11:58,049 --> 00:12:03,209
battle so it's a it's a log at processor

00:12:01,409 --> 00:12:05,519
level so basically if you have a 2

00:12:03,209 --> 00:12:07,019
processor then it will be parallel but

00:12:05,519 --> 00:12:10,139
if you have a single processor with a

00:12:07,019 --> 00:12:12,629
multi multiple course then it will power

00:12:10,139 --> 00:12:14,699
3 are then one thread will run at a time

00:12:12,629 --> 00:12:18,839
so that is a GL it is a global

00:12:14,699 --> 00:12:21,059
interpreter lock so it's a it is a

00:12:18,839 --> 00:12:24,389
blueberry deputy log it's implemented by

00:12:21,059 --> 00:12:26,850
them so whenever one thread is running

00:12:24,389 --> 00:12:29,039
at the time it will take a lot and it

00:12:26,850 --> 00:12:31,439
will not allow any other thread to

00:12:29,039 --> 00:12:34,439
execute until that trade execution

00:12:31,439 --> 00:12:37,289
complete coverage so that is that is a

00:12:34,439 --> 00:12:40,739
one thing it is a pil it is suitable for

00:12:37,289 --> 00:12:42,869
i 0 i abound operations the reason is

00:12:40,739 --> 00:12:44,669
that whenever there is I operation or

00:12:42,869 --> 00:12:48,089
something running on to it that the time

00:12:44,669 --> 00:12:50,279
it will release its log and it will I

00:12:48,089 --> 00:12:53,399
mean it will give its control to another

00:12:50,279 --> 00:12:55,379
thread and that will start I mean that

00:12:53,399 --> 00:12:57,539
will kind of the trade will continue or

00:12:55,379 --> 00:12:59,369
continue the execution so that's why

00:12:57,539 --> 00:13:03,089
it's bit platter for i/o bound

00:12:59,369 --> 00:13:05,459
application because it also releases the

00:13:03,089 --> 00:13:11,009
GI elbram intubated log on read rights

00:13:05,459 --> 00:13:12,749
and resume methods of like yeah then it

00:13:11,009 --> 00:13:15,689
is bad for CPU bound applications

00:13:12,749 --> 00:13:17,249
because the reason is that like it way

00:13:15,689 --> 00:13:18,690
possible burn through it takes a too

00:13:17,249 --> 00:13:20,700
much cpu

00:13:18,690 --> 00:13:23,070
and it will never give a chance to

00:13:20,700 --> 00:13:25,320
another I mean I mean another

00:13:23,070 --> 00:13:27,900
application but there isn't handling for

00:13:25,320 --> 00:13:31,280
CP bound applications as well but

00:13:27,900 --> 00:13:35,100
although it is not suitable to you see

00:13:31,280 --> 00:13:37,320
so basically luminita BTW log is runs

00:13:35,100 --> 00:13:40,350
like this it will run whenever there is

00:13:37,320 --> 00:13:42,990
I 0 at the time GL will reduce its log

00:13:40,350 --> 00:13:46,230
then another thread will run and this is

00:13:42,990 --> 00:13:50,070
how the global interpreter works in a

00:13:46,230 --> 00:13:54,540
Python so one more thing is there in

00:13:50,070 --> 00:13:57,300
Python or so to 44 simple case if there

00:13:54,540 --> 00:13:58,890
is a bound or something I application

00:13:57,300 --> 00:14:03,000
desire at the time it will release a lot

00:13:58,890 --> 00:14:05,220
but what for application or functional

00:14:03,000 --> 00:14:08,370
calculation which is taking too much

00:14:05,220 --> 00:14:11,220
time it is holding a cpu at the time

00:14:08,370 --> 00:14:14,280
python has are handling for this kind of

00:14:11,220 --> 00:14:16,620
applications so what Python does is like

00:14:14,280 --> 00:14:19,950
python python has a peak events was

00:14:16,620 --> 00:14:23,460
indeed for most all the traits so what

00:14:19,950 --> 00:14:27,780
it will do every 10 ms it will it will

00:14:23,460 --> 00:14:30,930
send it it will ok it will what it will

00:14:27,780 --> 00:14:33,180
do it will mean really unreleased on

00:14:30,930 --> 00:14:35,670
release a lock it will send operating

00:14:33,180 --> 00:14:40,830
system or signal to unreleased that I

00:14:35,670 --> 00:14:42,870
winter thread and sew and again quite so

00:14:40,830 --> 00:14:45,810
operating system will reschedule it by

00:14:42,870 --> 00:14:49,590
itself so it's like to send a signal

00:14:45,810 --> 00:14:51,990
dopamine system to our two leaves a lot

00:14:49,590 --> 00:14:56,040
of that specific trade even though it is

00:14:51,990 --> 00:14:58,430
running and so so so operating system

00:14:56,040 --> 00:15:02,700
will refrigerate to or to be straight or

00:14:58,430 --> 00:15:04,920
Cuba acquire or with you and you can

00:15:02,700 --> 00:15:09,390
change it using an SOS not set and

00:15:04,920 --> 00:15:12,570
excited interval thread pull thread

00:15:09,390 --> 00:15:14,430
pulls are due whenever you want to stick

00:15:12,570 --> 00:15:18,180
a number of threads you want to open and

00:15:14,430 --> 00:15:20,880
you have too many too many tasks to do

00:15:18,180 --> 00:15:24,180
and you don't want to open more than I

00:15:20,880 --> 00:15:25,980
mean more than allows pros are threads

00:15:24,180 --> 00:15:27,960
so at that time you can use the thread

00:15:25,980 --> 00:15:29,310
straights are nothing but it's kind of a

00:15:27,960 --> 00:15:31,500
queue

00:15:29,310 --> 00:15:35,190
you are aiding your task and it will

00:15:31,500 --> 00:15:39,540
assign it to a assignee to Allah of it

00:15:35,190 --> 00:15:41,520
open threads so basically thread pool is

00:15:39,540 --> 00:15:43,350
like when you are starting you have to

00:15:41,520 --> 00:15:47,040
tell it that I want to start the Chazz

00:15:43,350 --> 00:15:49,980
for cpu and if you will and then then it

00:15:47,040 --> 00:15:53,279
will the queue that all the inserted

00:15:49,980 --> 00:15:56,910
arguments and everything and it will put

00:15:53,279 --> 00:15:59,940
it assign them to all the all the

00:15:56,910 --> 00:16:04,130
started threads so it is like pretty

00:15:59,940 --> 00:16:06,779
good and there are some methods so I

00:16:04,130 --> 00:16:09,240
cannot I'm sorry again because of time

00:16:06,779 --> 00:16:13,770
constrain I cannot throw system but it

00:16:09,240 --> 00:16:17,430
is a similar to processes threads it is

00:16:13,770 --> 00:16:20,040
very similar to trades it is a it is a

00:16:17,430 --> 00:16:23,190
model to interact with the processes to

00:16:20,040 --> 00:16:28,020
start stop and to do various of lessons

00:16:23,190 --> 00:16:29,580
on the processes of yeah so Python will

00:16:28,020 --> 00:16:31,140
create a system legal processes so

00:16:29,580 --> 00:16:32,460
whenever will start a process at the

00:16:31,140 --> 00:16:35,580
time it will create a child process

00:16:32,460 --> 00:16:38,010
under the Python poses yeah and good

00:16:35,580 --> 00:16:39,750
news is that like it it will bypass a

00:16:38,010 --> 00:16:42,420
global interpreter lock which is there

00:16:39,750 --> 00:16:44,520
in the threads so if you are starting a

00:16:42,420 --> 00:16:46,800
more than one processes then it will

00:16:44,520 --> 00:16:49,140
that they are poke your calculation your

00:16:46,800 --> 00:16:51,089
your program will run in a parallel in a

00:16:49,140 --> 00:16:53,460
trades it will not happen if you are

00:16:51,089 --> 00:16:56,010
starting a fourth-rate then at a time

00:16:53,460 --> 00:16:59,610
one thread will work my on but in the

00:16:56,010 --> 00:17:03,540
process is it will run I mean any minute

00:16:59,610 --> 00:17:06,000
it works on both linux and windows yeah

00:17:03,540 --> 00:17:08,130
like thread pool you can start a process

00:17:06,000 --> 00:17:10,470
pool as well if you want to restrict the

00:17:08,130 --> 00:17:13,199
number of processes like at a time that

00:17:10,470 --> 00:17:15,209
will be four processes running then you

00:17:13,199 --> 00:17:19,949
can do it and tax will be distributed

00:17:15,209 --> 00:17:23,250
across them yeah there can be this kind

00:17:19,949 --> 00:17:25,949
of situation well as well like many many

00:17:23,250 --> 00:17:28,500
many processes can interface two

00:17:25,949 --> 00:17:31,050
variables and different different memory

00:17:28,500 --> 00:17:33,030
accesses to of different processes so

00:17:31,050 --> 00:17:34,470
how to deal with that so it is a

00:17:33,030 --> 00:17:36,390
basically dead dead low kind of

00:17:34,470 --> 00:17:38,370
situation where you have a resource to

00:17:36,390 --> 00:17:41,260
more than one resources resources can be

00:17:38,370 --> 00:17:43,300
anything or network resource of files or

00:17:41,260 --> 00:17:47,470
any kind of resource can be the can be

00:17:43,300 --> 00:17:49,930
so like thread a pond to bond to

00:17:47,470 --> 00:17:53,830
resource one and and thread be want

00:17:49,930 --> 00:17:57,580
resource one and they both allocated I

00:17:53,830 --> 00:17:59,620
mean to source accordingly also there

00:17:57,580 --> 00:18:02,290
can be one more situation where like

00:17:59,620 --> 00:18:05,350
this can occur if so it's like 38 one

00:18:02,290 --> 00:18:07,560
wants object 1 and 3 2 also what so

00:18:05,350 --> 00:18:12,400
object same objects at the time

00:18:07,560 --> 00:18:14,790
situation can occur there are semaphore

00:18:12,400 --> 00:18:18,340
semaphore for this kind of situation and

00:18:14,790 --> 00:18:21,220
it was invented by a Dutch computer

00:18:18,340 --> 00:18:23,470
scientist semaphore can be of three

00:18:21,220 --> 00:18:26,860
types it is a binary simmer for counter

00:18:23,470 --> 00:18:29,110
semaphore and mutex Emma put in a Python

00:18:26,860 --> 00:18:32,800
binary in bouticks MF over our shrimp

00:18:29,110 --> 00:18:37,120
and in a counter it is also provided so

00:18:32,800 --> 00:18:40,390
let me show you two more okay so

00:18:37,120 --> 00:18:42,940
basically it is a log and in our state

00:18:40,390 --> 00:18:45,730
transload so locks and the try and log

00:18:42,940 --> 00:18:48,250
are 22 if you are executing something at

00:18:45,730 --> 00:18:51,400
the time if you want to restrict some

00:18:48,250 --> 00:18:54,100
code that if one process is executing it

00:18:51,400 --> 00:18:56,440
then no but no no I mean no no other

00:18:54,100 --> 00:18:59,350
process should executed in a panel at

00:18:56,440 --> 00:19:03,040
the time you can use a locks and Arlo

00:18:59,350 --> 00:19:05,830
Arlo can lock is different in the terms

00:19:03,040 --> 00:19:07,810
of execution so our log can be used in a

00:19:05,830 --> 00:19:11,080
recursion whenever you are doing

00:19:07,810 --> 00:19:13,930
recursion at the time this would use our

00:19:11,080 --> 00:19:18,580
love because it is furthered and locks

00:19:13,930 --> 00:19:22,440
are for a normal school so this is a

00:19:18,580 --> 00:19:25,150
code so there is a part 1 and part 2 I

00:19:22,440 --> 00:19:28,210
can acquire the lock and I can release

00:19:25,150 --> 00:19:30,550
the lock whenever I want so that that a

00:19:28,210 --> 00:19:33,640
code which relies in between lock

00:19:30,550 --> 00:19:35,920
acquire and raw police will run I mean

00:19:33,640 --> 00:19:37,630
so whenever that part is running at the

00:19:35,920 --> 00:19:39,910
time no other process will run it it

00:19:37,630 --> 00:19:43,330
will wait until that are that code

00:19:39,910 --> 00:19:47,160
execution stops in some process so so it

00:19:43,330 --> 00:19:50,430
is for synchronization between processes

00:19:47,160 --> 00:19:53,410
ok so there is a library for semaphore

00:19:50,430 --> 00:19:55,690
semaphore is another way to deal with

00:19:53,410 --> 00:20:01,050
this kind of situations semaphore is too

00:19:55,690 --> 00:20:06,010
so so our Singapore is we can define

00:20:01,050 --> 00:20:08,980
like our number one number like what are

00:20:06,010 --> 00:20:12,190
the maximum count like if I will define

00:20:08,980 --> 00:20:14,530
some number like nine then release and

00:20:12,190 --> 00:20:18,700
acquire should be according to it so

00:20:14,530 --> 00:20:22,750
it's like if I am acquiring a nine logs

00:20:18,700 --> 00:20:25,150
and so so so whenever I will acquire a

00:20:22,750 --> 00:20:27,160
nine logs so there will be a current

00:20:25,150 --> 00:20:30,520
value of semaphore it will be a 0

00:20:27,160 --> 00:20:33,850
because the reason is that you have to

00:20:30,520 --> 00:20:37,150
reduce that log so whenever someone come

00:20:33,850 --> 00:20:39,250
I mean some process will come to execute

00:20:37,150 --> 00:20:41,680
it at the temp it have to wait until

00:20:39,250 --> 00:20:44,550
some release will I mean lock release

00:20:41,680 --> 00:20:46,570
will come so it is for it is for

00:20:44,550 --> 00:20:49,480
semaphore this condition of over is

00:20:46,570 --> 00:20:51,580
suitable when you want to have some

00:20:49,480 --> 00:20:54,430
limits some Network limit or something

00:20:51,580 --> 00:20:56,830
for example you want to society I mean

00:20:54,430 --> 00:20:59,290
some very last number of a tree to be

00:20:56,830 --> 00:21:01,360
request you want to send 10 degrees at a

00:20:59,290 --> 00:21:07,600
time at the time you can set number

00:21:01,360 --> 00:21:10,660
accordingly and you can use it ok

00:21:07,600 --> 00:21:13,770
bounded Singapore is like whenever we

00:21:10,660 --> 00:21:17,260
reach 20 at the time are instead of

00:21:13,770 --> 00:21:20,200
waiting for waiting it will raise a

00:21:17,260 --> 00:21:22,990
value error so it is basically suited

00:21:20,200 --> 00:21:29,380
for same application but it is of

00:21:22,990 --> 00:21:33,280
different type yeah there is one more

00:21:29,380 --> 00:21:36,250
thing is add events so events are

00:21:33,280 --> 00:21:38,410
basically it will it will so basically

00:21:36,250 --> 00:21:41,560
there are many conditions occurs in

00:21:38,410 --> 00:21:45,230
programming where we want to wait until

00:21:41,560 --> 00:21:47,960
some some some condition so for example

00:21:45,230 --> 00:21:50,570
I want to set that whenever I will get

00:21:47,960 --> 00:21:53,570
some flag from network or activity

00:21:50,570 --> 00:21:56,480
requires response than only all the

00:21:53,570 --> 00:21:58,790
process should start or it should start

00:21:56,480 --> 00:22:01,549
its execution or start I mean it's

00:21:58,790 --> 00:22:03,440
processing until that it should pose or

00:22:01,549 --> 00:22:06,860
something so in this kind of situation

00:22:03,440 --> 00:22:10,010
what we can do is like I mean whenever

00:22:06,860 --> 00:22:12,260
we can we can write even dot wait in

00:22:10,010 --> 00:22:17,150
different different where we want to

00:22:12,260 --> 00:22:20,660
wait Paragon want to stop then we can

00:22:17,150 --> 00:22:22,490
event dot said so whenever event I said

00:22:20,660 --> 00:22:25,820
that the term wet weight will not work

00:22:22,490 --> 00:22:29,059
but when we will do event or clear at

00:22:25,820 --> 00:22:30,919
the time all the weight will I mean so

00:22:29,059 --> 00:22:34,370
so wherever that program will come to

00:22:30,919 --> 00:22:36,980
that point it will wait until that until

00:22:34,370 --> 00:22:40,130
we call even dot side it will be a

00:22:36,980 --> 00:22:45,620
blotting until we will call even dirtier

00:22:40,130 --> 00:22:48,320
a timer is also the timer is to execute

00:22:45,620 --> 00:22:50,750
a function after some interval so if you

00:22:48,320 --> 00:22:52,760
want to execute some like function after

00:22:50,750 --> 00:22:54,919
some seconds 30 seconds or something

00:22:52,760 --> 00:22:58,660
that we can use it that function and

00:22:54,919 --> 00:23:01,340
yeah delay can be there for example I

00:22:58,660 --> 00:23:04,429
was at that I go to execute this after

00:23:01,340 --> 00:23:06,950
30 seconds and it may possible it will

00:23:04,429 --> 00:23:08,780
execute after 31 second 32 seconds the

00:23:06,950 --> 00:23:10,760
reason is that it is losing thread

00:23:08,780 --> 00:23:12,530
internally so because of global

00:23:10,760 --> 00:23:14,900
interpreter lock or something it may

00:23:12,530 --> 00:23:18,919
possible I mean diligent with our in

00:23:14,900 --> 00:23:20,929
this function in this pipes pipes are

00:23:18,919 --> 00:23:23,450
basically a data channels that can be

00:23:20,929 --> 00:23:28,280
used for inter process communication so

00:23:23,450 --> 00:23:30,590
it's a it's a it's it is a channel so it

00:23:28,280 --> 00:23:35,360
basically returns to file descriptor of

00:23:30,590 --> 00:23:38,780
14 of right and 14 read so whatever you

00:23:35,360 --> 00:23:41,780
write too bright it will be catch by

00:23:38,780 --> 00:23:44,630
Colonel and you can read that choosing a

00:23:41,780 --> 00:23:47,510
read object also basically there python

00:23:44,630 --> 00:23:50,900
provides a 212 two types of pipes it's

00:23:47,510 --> 00:23:52,380
OS dot pipe and multiprocessing got 50 s

00:23:50,900 --> 00:23:55,650
dot pipe is

00:23:52,380 --> 00:23:58,680
interface on top of linux kernel so

00:23:55,650 --> 00:24:03,090
whenever we request to open a pipe it

00:23:58,680 --> 00:24:05,220
will open a pipe on top of I mean it

00:24:03,090 --> 00:24:07,890
will it will ask the operating system to

00:24:05,220 --> 00:24:11,550
open a new pipe and it's just interface

00:24:07,890 --> 00:24:15,270
to start and stop like pipe and to deal

00:24:11,550 --> 00:24:19,680
with it pi plus one restriction it's in

00:24:15,270 --> 00:24:21,810
a linux it has a 64gb of limit in it

00:24:19,680 --> 00:24:25,680
using encoding and decoding while

00:24:21,810 --> 00:24:29,220
sending and receiving a data and in a

00:24:25,680 --> 00:24:32,160
linux it is implemented using a life of

00:24:29,220 --> 00:24:34,650
46 46 anders and we know it is

00:24:32,160 --> 00:24:37,460
implemented using a create pipe method

00:24:34,650 --> 00:24:39,930
api which is being provided and

00:24:37,460 --> 00:24:42,690
multiprocessing dot pipe with socket

00:24:39,930 --> 00:24:47,820
implement ins implementation sockets are

00:24:42,690 --> 00:24:51,120
files of time in memory mapped in memory

00:24:47,820 --> 00:24:53,730
files objects and it is a full double a

00:24:51,120 --> 00:24:57,420
duplex so it will it will also give you

00:24:53,730 --> 00:25:01,590
the read and write objects but i mean

00:24:57,420 --> 00:25:05,820
both has on the both fair you can't do a

00:25:01,590 --> 00:25:07,890
communication it it uses a pickle to

00:25:05,820 --> 00:25:10,320
sender data pickle is nothing but it's a

00:25:07,890 --> 00:25:13,200
kind of comparison probably not not a

00:25:10,320 --> 00:25:16,170
comparison but on an object sending you

00:25:13,200 --> 00:25:21,260
can send object to bias and pickling

00:25:16,170 --> 00:25:23,370
your data queue is also the queue

00:25:21,260 --> 00:25:25,740
implementation is threads python

00:25:23,370 --> 00:25:28,770
supports three kind of cues first in

00:25:25,740 --> 00:25:31,320
first out last in first out and priority

00:25:28,770 --> 00:25:36,540
queues and it disposes and thread thread

00:25:31,320 --> 00:25:39,240
self say state can be used so if you if

00:25:36,540 --> 00:25:42,480
you like if you want to sell some

00:25:39,240 --> 00:25:45,990
variable directly in between processes

00:25:42,480 --> 00:25:49,560
then we can use a sad state so state is

00:25:45,990 --> 00:25:51,840
basically I mean say state are to say at

00:25:49,560 --> 00:25:54,530
some variable in between or some data

00:25:51,840 --> 00:25:57,570
spice and data structure in between so

00:25:54,530 --> 00:25:59,930
yeah so in pipes we can share some

00:25:57,570 --> 00:26:03,030
textual data or that we look data only

00:25:59,930 --> 00:26:04,370
it's a simple file like objects you can

00:26:03,030 --> 00:26:07,250
write anything into

00:26:04,370 --> 00:26:09,550
received other end but if you want to

00:26:07,250 --> 00:26:12,320
use a data structure in between

00:26:09,550 --> 00:26:16,370
interposes then you can use said memory

00:26:12,320 --> 00:26:19,040
so here it punk and provides as thin as

00:26:16,370 --> 00:26:24,080
well and they all the all the structures

00:26:19,040 --> 00:26:26,510
are thread and ptosis safe so basically

00:26:24,080 --> 00:26:29,900
the values and arrays are multiple

00:26:26,510 --> 00:26:35,600
modules I mean classes so so so you can

00:26:29,900 --> 00:26:40,490
use them so that is an example of shared

00:26:35,600 --> 00:26:43,090
memory process value and erin so it's a

00:26:40,490 --> 00:26:46,700
arrays basically nothing but it's a

00:26:43,090 --> 00:26:49,490
python array of implementation vita some

00:26:46,700 --> 00:26:55,309
more trading and I mean support for

00:26:49,490 --> 00:26:57,559
multiple interposes sharing and there is

00:26:55,309 --> 00:27:00,710
another thing which we can use is

00:26:57,559 --> 00:27:02,750
manager manager objects fox and new

00:27:00,710 --> 00:27:05,390
process whenever we'll start it so

00:27:02,750 --> 00:27:09,050
manager gives of one benefit that we can

00:27:05,390 --> 00:27:10,640
use a week and stuff we can start out we

00:27:09,050 --> 00:27:13,700
can take a dictionary object we can take

00:27:10,640 --> 00:27:16,490
a least object so it's a very good for

00:27:13,700 --> 00:27:19,700
if you want to mix I reenlist but it is

00:27:16,490 --> 00:27:22,580
lower than said substrate that i

00:27:19,700 --> 00:27:25,400
mentioned array and values but yeah we

00:27:22,580 --> 00:27:27,470
can use it and manager starts new

00:27:25,400 --> 00:27:30,640
process whenever we will create object

00:27:27,470 --> 00:27:35,000
out of it it will give it gives a a

00:27:30,640 --> 00:27:39,110
proxy object which supports namespaces

00:27:35,000 --> 00:27:41,750
leaks locks returns log semaphore found

00:27:39,110 --> 00:27:46,220
a log condition event queues value an

00:27:41,750 --> 00:27:47,660
array yeah manager can be used to

00:27:46,220 --> 00:27:49,550
substrate on different computer

00:27:47,660 --> 00:27:51,980
processes as well so for an example I am

00:27:49,550 --> 00:27:55,130
on computer 1 and I want to say or that

00:27:51,980 --> 00:27:57,080
data with another computer on another

00:27:55,130 --> 00:28:00,440
computers process then I can use a

00:27:57,080 --> 00:28:04,670
manager to do it but child any slower

00:28:00,440 --> 00:28:07,910
then said memory and yeah idea don't do

00:28:04,670 --> 00:28:09,830
it our side state as much as possible

00:28:07,910 --> 00:28:13,670
the reason is that it will decrease your

00:28:09,830 --> 00:28:15,380
speed indian because it's a it's a

00:28:13,670 --> 00:28:16,770
threading needs and I mean they are they

00:28:15,380 --> 00:28:18,480
all are trade self and ever

00:28:16,770 --> 00:28:20,670
doing so that is why if you are writing

00:28:18,480 --> 00:28:24,630
something into it so until you right

00:28:20,670 --> 00:28:28,260
into it it will the block you until that

00:28:24,630 --> 00:28:30,330
time here so also one more things would

00:28:28,260 --> 00:28:34,440
be diggin clear whatever object we are

00:28:30,330 --> 00:28:37,260
using in I mean multiprocessing argue I

00:28:34,440 --> 00:28:40,740
mean that's a state it should be B cable

00:28:37,260 --> 00:28:42,360
it should be i mean p cable in it in

00:28:40,740 --> 00:28:44,550
your pipes we should also care about

00:28:42,360 --> 00:28:47,250
this thing whatever object we are using

00:28:44,550 --> 00:28:48,960
it should be p cable I mean p cable in

00:28:47,250 --> 00:28:52,140
the science like we should be able to

00:28:48,960 --> 00:28:54,180
convert it into p confirm it zombie

00:28:52,140 --> 00:28:55,910
processes so we should take care about

00:28:54,180 --> 00:28:58,560
zombie zombie processes are nothing but

00:28:55,910 --> 00:29:00,330
like even though my program stoves i am

00:28:58,560 --> 00:29:03,600
executing something i started multi

00:29:00,330 --> 00:29:05,520
proposals under master process i have

00:29:03,600 --> 00:29:07,800
stopped that master process even though

00:29:05,520 --> 00:29:09,870
that child processes are running so

00:29:07,800 --> 00:29:11,910
there are the some people say zombie

00:29:09,870 --> 00:29:14,070
processes so how to deal with that

00:29:11,910 --> 00:29:16,260
ptosis is so whenever we stop some

00:29:14,070 --> 00:29:19,140
program we do kind of a CD at the time

00:29:16,260 --> 00:29:22,110
some signal linux and windows sent some

00:29:19,140 --> 00:29:25,770
special a signal to a python and we can

00:29:22,110 --> 00:29:27,720
handle that signal and we should send

00:29:25,770 --> 00:29:29,510
that all the signal handle that signal

00:29:27,720 --> 00:29:32,310
and we should or terminate that

00:29:29,510 --> 00:29:35,940
processes or we can send the same signal

00:29:32,310 --> 00:29:38,190
to that processes as well here our

00:29:35,940 --> 00:29:41,070
terminating processes so instead of

00:29:38,190 --> 00:29:44,940
terminate try to close it or try some

00:29:41,070 --> 00:29:46,980
events or something so that our

00:29:44,940 --> 00:29:49,850
conditions or something so that what we

00:29:46,980 --> 00:29:54,090
saw that sort of terminate will

00:29:49,850 --> 00:29:57,020
gradually stop it's like you are I mean

00:29:54,090 --> 00:30:01,110
taking a plug off for your computer so

00:29:57,020 --> 00:30:03,960
it it will give you very results so for

00:30:01,110 --> 00:30:07,020
example if you are fighting the file

00:30:03,960 --> 00:30:09,630
over I mean doing some stuff then it way

00:30:07,020 --> 00:30:14,400
possible I mean you will get corrupted

00:30:09,630 --> 00:30:15,930
data or something and yeah you I mean in

00:30:14,400 --> 00:30:18,900
global variable whenever you are using

00:30:15,930 --> 00:30:21,000
global variable then it may possible in

00:30:18,900 --> 00:30:22,770
the child possible and it is possible

00:30:21,000 --> 00:30:25,110
that in the child possesses you will not

00:30:22,770 --> 00:30:29,100
get the same values as you are getting

00:30:25,110 --> 00:30:32,270
in a global weightless yeah yeah that's

00:30:29,100 --> 00:30:34,590
it okay thank you very much at all

00:30:32,270 --> 00:30:39,000
unfortunately we don't have time for

00:30:34,590 --> 00:30:41,490
questions sorry there's no time for

00:30:39,000 --> 00:30:42,960
questions today but just scratch hit

00:30:41,490 --> 00:30:44,730
tool afterwards if you have something to

00:30:42,960 --> 00:30:45,810
say and I thank you very much look

00:30:44,730 --> 00:30:47,960
forward to seeing you the rest of the

00:30:45,810 --> 00:30:47,960

YouTube URL: https://www.youtube.com/watch?v=6EBBWv6tuA8


