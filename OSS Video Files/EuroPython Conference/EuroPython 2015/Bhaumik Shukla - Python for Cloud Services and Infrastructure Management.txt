Title: Bhaumik Shukla - Python for Cloud Services and Infrastructure Management
Publication date: 2015-08-08
Playlist: EuroPython 2015
Description: 
	Bhaumik Shukla - Python for Cloud Services and Infrastructure Management
[EuroPython 2015]
[24 July 2015]
[Bilbao, Euskadi, Spain]

This talk is about how python is used in cloud computing as well as
used while configuring cloud infrastructure. It also gives brief about
tools and technologies/libraries can be used for number of tasks while
cloud development/execution. Developers and all python lovers are the
perfect audience for this talk. They will get the brief about reliable
stack of python based tools used in cloud development and also will be
sharing the experience with python.

Summary:
Python in cloud. 
Kind of services can be build with python.
Python based tools used in deployment and configuration management for
the cloud.
For every python lovers - How to create a python friendly cloud
infrastructure with great reliable combination of many stable tools.
Stability.
Experience sharing.
Captions: 
	00:00:03,230 --> 00:00:11,090
hello everyone am I audible right ok so

00:00:11,300 --> 00:00:21,060
here I am talking about Python for cloud

00:00:15,690 --> 00:00:25,130
services and infrastructure let me tell

00:00:21,060 --> 00:00:28,800
you something about myself I'm barmak I

00:00:25,130 --> 00:00:33,120
came from India I have around five years

00:00:28,800 --> 00:00:39,149
of development experience I'm a open

00:00:33,120 --> 00:00:42,570
source savvy guy hello Python I do some

00:00:39,149 --> 00:00:48,360
DevOps and site reliability things but

00:00:42,570 --> 00:00:51,660
my core will be the cloud so let me tell

00:00:48,360 --> 00:00:54,480
you my current product and a little bit

00:00:51,660 --> 00:00:59,190
about it so we have developed a

00:00:54,480 --> 00:01:03,000
smartphone case which can read your body

00:00:59,190 --> 00:01:08,310
whiter when you place finger on the case

00:01:03,000 --> 00:01:13,229
like this and it will read your BP ECG

00:01:08,310 --> 00:01:16,170
heart rate skin temperature spo2 and it

00:01:13,229 --> 00:01:19,890
will show those things on your mobile

00:01:16,170 --> 00:01:26,159
and sync it with the cloud so I walked

00:01:19,890 --> 00:01:33,290
on the cloud part yeah so this talk is

00:01:26,159 --> 00:01:33,290
all about cloud and internal components

00:01:33,770 --> 00:01:42,570
so yeah to build any web application or

00:01:37,520 --> 00:01:46,290
any cloud services we have these

00:01:42,570 --> 00:01:50,970
questions first like from where to start

00:01:46,290 --> 00:01:55,710
which tools we can use how to integrate

00:01:50,970 --> 00:02:00,840
staff and things needs to be taken care

00:01:55,710 --> 00:02:06,810
of so from this presentation you will

00:02:00,840 --> 00:02:09,000
get all these answers may be so yeah so

00:02:06,810 --> 00:02:12,480
I will let you know the Python friendly

00:02:09,000 --> 00:02:13,830
stack that i have been using since three

00:02:12,480 --> 00:02:18,600
plus years

00:02:13,830 --> 00:02:21,510
and which is very reliable so of course

00:02:18,600 --> 00:02:24,240
any application any web application or

00:02:21,510 --> 00:02:29,040
any cloud service will have this kind of

00:02:24,240 --> 00:02:32,310
take this kind of set of components you

00:02:29,040 --> 00:02:35,730
need to prepare where there will be some

00:02:32,310 --> 00:02:41,100
web framework wsj server task queue

00:02:35,730 --> 00:02:45,720
database login caching and many other

00:02:41,100 --> 00:02:52,140
things yeah we also need to take care

00:02:45,720 --> 00:02:54,590
about other components like this so we

00:02:52,140 --> 00:02:58,290
will discuss all these things later on

00:02:54,590 --> 00:03:00,030
so start with where to start the first

00:02:58,290 --> 00:03:02,250
thing will be the web framework let's

00:03:00,030 --> 00:03:06,440
finalize the surface web framework what

00:03:02,250 --> 00:03:06,440
kind of framework we are going to use

00:03:07,459 --> 00:03:14,160
when it comes to the Python we have two

00:03:11,400 --> 00:03:18,300
famous framework available which is

00:03:14,160 --> 00:03:23,340
chango and flask chango is like fully

00:03:18,300 --> 00:03:28,830
armed and no fully included things

00:03:23,340 --> 00:03:31,350
inside django but flask well it's kind

00:03:28,830 --> 00:03:35,160
of a small framework which is very

00:03:31,350 --> 00:03:40,470
extensible so you can attach other

00:03:35,160 --> 00:03:44,430
things with this flask so these two are

00:03:40,470 --> 00:03:46,530
most famous I always prefer chango

00:03:44,430 --> 00:03:49,350
because it has a few things included

00:03:46,530 --> 00:03:51,000
like authentication is there so you

00:03:49,350 --> 00:03:59,430
don't need to worry about all other

00:03:51,000 --> 00:04:01,440
things yeah so how to run web our web

00:03:59,430 --> 00:04:04,680
application so we need wsj server

00:04:01,440 --> 00:04:10,560
whiskey server okay so what kind of

00:04:04,680 --> 00:04:15,510
whiskey server we need it basically gets

00:04:10,560 --> 00:04:18,109
the what whiskeys are what does it gets

00:04:15,510 --> 00:04:22,490
the data from the upper layer and

00:04:18,109 --> 00:04:24,930
process the data inside the process and

00:04:22,490 --> 00:04:27,400
generate one output which can be a

00:04:24,930 --> 00:04:30,630
response and send it back to you

00:04:27,400 --> 00:04:38,320
quest if it is a request-response thing

00:04:30,630 --> 00:04:44,340
so we have a two good whiskey sour

00:04:38,320 --> 00:04:44,340
available in Python these two are most

00:04:44,639 --> 00:04:55,180
famous so one is G unicorn and one is

00:04:49,479 --> 00:04:58,900
micro whiskey or you whiskey I generally

00:04:55,180 --> 00:05:02,139
prefer you whiskey because it has much

00:04:58,900 --> 00:05:05,860
more configuration power there is no

00:05:02,139 --> 00:05:09,400
specific reason to you can choose any of

00:05:05,860 --> 00:05:15,940
them so yeah we should have some whiskey

00:05:09,400 --> 00:05:19,990
sour next question will be a database so

00:05:15,940 --> 00:05:23,949
what kind of database we are we need I

00:05:19,990 --> 00:05:26,910
mean either it's a SQL database or no

00:05:23,949 --> 00:05:33,400
SQL database it's based on our use case

00:05:26,910 --> 00:05:37,229
so if we have some data elements which

00:05:33,400 --> 00:05:42,720
we need to be relational so we need some

00:05:37,229 --> 00:05:46,780
some sort of SQL data a sequel database

00:05:42,720 --> 00:05:50,530
so these are few databases that we can

00:05:46,780 --> 00:05:54,690
go for postgresql is there my sequel is

00:05:50,530 --> 00:05:57,340
there and mordy before no SQL so

00:05:54,690 --> 00:06:00,760
currently in that product in that cloud

00:05:57,340 --> 00:06:05,320
we use MongoDB for the ninety percent of

00:06:00,760 --> 00:06:09,780
the transactions so no SQL you can use

00:06:05,320 --> 00:06:16,990
for if you have some unstructured data

00:06:09,780 --> 00:06:21,849
so yeah that's the thing next is the web

00:06:16,990 --> 00:06:23,380
server so any client any requests will

00:06:21,849 --> 00:06:25,960
not directly communicate to the device

00:06:23,380 --> 00:06:27,460
key server it will pass through the web

00:06:25,960 --> 00:06:32,320
server so we have server will take care

00:06:27,460 --> 00:06:35,919
of all the requests it handled it and

00:06:32,320 --> 00:06:38,500
pass it to the whiskey server which

00:06:35,919 --> 00:06:40,530
server will process it and this return

00:06:38,500 --> 00:06:44,650
back the response

00:06:40,530 --> 00:06:50,789
so this is the general architecture we

00:06:44,650 --> 00:06:56,590
need to figure out these two are almost

00:06:50,789 --> 00:06:58,509
in use frame a web server or actually

00:06:56,590 --> 00:07:02,190
these two takes fifty percent of

00:06:58,509 --> 00:07:06,250
internet traffic right now combined Lee

00:07:02,190 --> 00:07:10,690
so yeah either you can go for a party or

00:07:06,250 --> 00:07:16,000
you can go for engine X and Gen X mostly

00:07:10,690 --> 00:07:19,630
known for a speed and apathy mostly has

00:07:16,000 --> 00:07:23,139
some configuration power so based on

00:07:19,630 --> 00:07:26,680
your use cases you need to define your

00:07:23,139 --> 00:07:31,900
web server yeah this is very interesting

00:07:26,680 --> 00:07:37,900
next is the task queue so when you want

00:07:31,900 --> 00:07:40,240
to perform some ad hoc tasks like on

00:07:37,900 --> 00:07:42,310
some requests like if you are creating

00:07:40,240 --> 00:07:44,680
one account what create account occurs

00:07:42,310 --> 00:07:47,229
comes and you want to generate some

00:07:44,680 --> 00:07:53,919
newsletter or some email thing so that

00:07:47,229 --> 00:07:55,750
can be done in a distributed way so you

00:07:53,919 --> 00:08:00,789
should have a task queue which can

00:07:55,750 --> 00:08:03,280
perform all these things so if you write

00:08:00,789 --> 00:08:06,190
your task you it's good but we should

00:08:03,280 --> 00:08:09,039
not write our own task you because all

00:08:06,190 --> 00:08:12,400
it's already there which can solve few

00:08:09,039 --> 00:08:15,430
problems like queuing like a retry

00:08:12,400 --> 00:08:19,740
mechanism for example there is one task

00:08:15,430 --> 00:08:24,690
came to send one email to a customer

00:08:19,740 --> 00:08:30,159
which has been which just registered

00:08:24,690 --> 00:08:32,469
himself on our website so if there is

00:08:30,159 --> 00:08:36,099
something failure happen we should have

00:08:32,469 --> 00:08:39,719
some mechanism to retry that so that is

00:08:36,099 --> 00:08:44,140
one some time out some scheduling or

00:08:39,719 --> 00:08:47,980
some status of the task maybe so that

00:08:44,140 --> 00:08:52,290
can be solved by some existing task

00:08:47,980 --> 00:08:54,130
queues salaries most famous they're

00:08:52,290 --> 00:08:56,680
ready skews there

00:08:54,130 --> 00:09:01,210
I always been for salary because it has

00:08:56,680 --> 00:09:07,360
a good dashboard as well and it has good

00:09:01,210 --> 00:09:16,420
monitoring of tasks so yeah you can go

00:09:07,360 --> 00:09:23,320
for salary so next is logging so logging

00:09:16,420 --> 00:09:25,360
can be a event based or the full logging

00:09:23,320 --> 00:09:29,620
feature could be a you can log

00:09:25,360 --> 00:09:33,460
everything or some specific so i always

00:09:29,620 --> 00:09:40,360
prefer sentry over them because sentry

00:09:33,460 --> 00:09:42,880
has a good logging power as well plus it

00:09:40,360 --> 00:09:47,680
provides one good dashboard where you

00:09:42,880 --> 00:09:51,210
can search your data event based data

00:09:47,680 --> 00:09:55,860
and all the events you can monitor it

00:09:51,210 --> 00:09:58,990
from it it also provide notification

00:09:55,860 --> 00:10:00,490
when you configure your event like if

00:09:58,990 --> 00:10:03,820
any error occurs you should get one

00:10:00,490 --> 00:10:09,580
email so that can be done by the Sentry

00:10:03,820 --> 00:10:13,750
or cloud what is under the option so can

00:10:09,580 --> 00:10:15,750
go for it yeah you also need to take

00:10:13,750 --> 00:10:18,760
care about other components as i said

00:10:15,750 --> 00:10:22,390
like source control it's a must thing i

00:10:18,760 --> 00:10:24,870
think everybody does this so yeah a

00:10:22,390 --> 00:10:27,970
specific version if i want to check out

00:10:24,870 --> 00:10:32,170
some specific person so source control

00:10:27,970 --> 00:10:34,330
it do it all things and also proud good

00:10:32,170 --> 00:10:39,580
history and accountability remote remote

00:10:34,330 --> 00:10:43,300
accessibility so yeah this to our most

00:10:39,580 --> 00:10:52,030
famous source control system one is gate

00:10:43,300 --> 00:10:55,440
and svn we use get there so a deployment

00:10:52,030 --> 00:10:59,380
and configurations so this to our most

00:10:55,440 --> 00:11:02,260
important thing out of after the

00:10:59,380 --> 00:11:03,370
development when you want to check out

00:11:02,260 --> 00:11:06,240
your repository in the cloud and

00:11:03,370 --> 00:11:09,450
remotely access the server and

00:11:06,240 --> 00:11:15,270
execute some SSH put some commands

00:11:09,450 --> 00:11:22,770
through ssh or maybe that can be done so

00:11:15,270 --> 00:11:26,940
few things are there like fabric we use

00:11:22,770 --> 00:11:30,270
it has a good as such base remotely

00:11:26,940 --> 00:11:32,760
accessibility and an civil chef puppet

00:11:30,270 --> 00:11:36,300
can be used for the configurations

00:11:32,760 --> 00:11:39,300
management and deployment could be

00:11:36,300 --> 00:11:42,300
automated node manually like we should

00:11:39,300 --> 00:11:46,370
not do that so Jenkins is that Jenkins

00:11:42,300 --> 00:11:50,850
will do all the automatic deployment

00:11:46,370 --> 00:11:53,100
initiation after getting deployed all

00:11:50,850 --> 00:11:59,839
the things we should have keep our eyes

00:11:53,100 --> 00:12:05,100
on process and system and activities so

00:11:59,839 --> 00:12:06,959
we need to monitor system like how many

00:12:05,100 --> 00:12:11,540
nodes are there in our server system and

00:12:06,959 --> 00:12:15,209
cloud each service has their health and

00:12:11,540 --> 00:12:19,380
we need to monitor all those thing for

00:12:15,209 --> 00:12:22,860
that purpose we use nag yours neggers

00:12:19,380 --> 00:12:26,040
provide a very good monitoring platform

00:12:22,860 --> 00:12:27,899
where we can monitor all the system as

00:12:26,040 --> 00:12:31,829
well as processes when I say process is

00:12:27,899 --> 00:12:33,990
it means that is that can be a you SS

00:12:31,829 --> 00:12:37,500
their processes I mean you whiskey

00:12:33,990 --> 00:12:41,720
processes or engine X is there so we can

00:12:37,500 --> 00:12:43,950
monitor anjanette from the nature's or

00:12:41,720 --> 00:12:47,750
MongoDB server is running well or not so

00:12:43,950 --> 00:12:50,010
that can be monitored through naggers

00:12:47,750 --> 00:12:53,730
Center is a kind of monitoring service

00:12:50,010 --> 00:12:56,339
where we always monitor our locks if any

00:12:53,730 --> 00:12:58,950
error occurred if any unusual thing

00:12:56,339 --> 00:13:02,730
happened then we can directly be

00:12:58,950 --> 00:13:08,130
notified by an email so sentry is good

00:13:02,730 --> 00:13:09,660
kind of monitoring service there it's

00:13:08,130 --> 00:13:11,720
basically a logging system but it

00:13:09,660 --> 00:13:16,020
provides some kind of montville

00:13:11,720 --> 00:13:19,390
supervisor is there so a supervisor will

00:13:16,020 --> 00:13:21,670
do and control your

00:13:19,390 --> 00:13:26,040
processes you can start you can stop

00:13:21,670 --> 00:13:29,230
from their dashboard so you can allocate

00:13:26,040 --> 00:13:36,400
something you can configure by your use

00:13:29,230 --> 00:13:41,080
case the super horizon is also there so

00:13:36,400 --> 00:13:42,940
yeah cash is also one part of cloud

00:13:41,080 --> 00:13:45,610
where we need to have some cash

00:13:42,940 --> 00:13:48,280
mechanism based on you use case if we

00:13:45,610 --> 00:13:50,650
are serving a static content on a

00:13:48,280 --> 00:13:53,500
website then we should have or some

00:13:50,650 --> 00:13:58,360
front-end cash and if we are serving

00:13:53,500 --> 00:14:01,090
some content of not the static content

00:13:58,360 --> 00:14:04,360
but some content which can be reusable

00:14:01,090 --> 00:14:07,300
or frequently asked so some caching

00:14:04,360 --> 00:14:14,580
mechanism we can implement by ready sore

00:14:07,300 --> 00:14:14,580
memcache d we use Redis there so yeah

00:14:14,640 --> 00:14:24,310
messenger so in messaging I would like

00:14:21,490 --> 00:14:28,930
to share one use case where messaging

00:14:24,310 --> 00:14:32,740
can help maybe you have a multiple app

00:14:28,930 --> 00:14:35,530
servers or multiple DB servers or let's

00:14:32,740 --> 00:14:38,710
take an example of app servers for

00:14:35,530 --> 00:14:41,290
example three observers are there if one

00:14:38,710 --> 00:14:44,410
observer is doing some tasks and wants

00:14:41,290 --> 00:14:47,770
to notify others that I have done this

00:14:44,410 --> 00:14:51,930
task now you can start so at that time

00:14:47,770 --> 00:14:55,870
messaging can be useful we use our mq

00:14:51,930 --> 00:14:58,180
rabbitmq many people says which provides

00:14:55,870 --> 00:15:00,820
some pop sub mechanism public and sub

00:14:58,180 --> 00:15:06,250
publishin and subscriber where

00:15:00,820 --> 00:15:08,890
subscriber can join and subscribe to the

00:15:06,250 --> 00:15:10,780
server and it will be notified when any

00:15:08,890 --> 00:15:16,780
chair if we publish something on the

00:15:10,780 --> 00:15:22,570
channel so yeah it can so it is the

00:15:16,780 --> 00:15:25,630
messaging does it yeah virtual injury so

00:15:22,570 --> 00:15:28,810
I love this feature because it provides

00:15:25,630 --> 00:15:33,279
one isolated of Python environment in

00:15:28,810 --> 00:15:35,560
your system because even you can have an

00:15:33,279 --> 00:15:39,339
of Python environment in the system and

00:15:35,560 --> 00:15:41,220
you if you are working on a different

00:15:39,339 --> 00:15:45,519
different project you always have a

00:15:41,220 --> 00:15:48,639
different different dependencies so what

00:15:45,519 --> 00:15:51,370
children we will help there you can

00:15:48,639 --> 00:15:56,309
create one environment you can install

00:15:51,370 --> 00:15:58,920
the dependencies like I need some

00:15:56,309 --> 00:16:01,290
dependency of version one part o and

00:15:58,920 --> 00:16:06,999
none as a project you need some

00:16:01,290 --> 00:16:11,559
dependency of 1.1 so it will be isolated

00:16:06,999 --> 00:16:16,569
for each of them so yeah it's really

00:16:11,559 --> 00:16:21,009
great feature analytics yeah you always

00:16:16,569 --> 00:16:23,259
would like to see your users data or how

00:16:21,009 --> 00:16:25,749
your users are using your website maybe

00:16:23,259 --> 00:16:30,249
your application your clients are using

00:16:25,749 --> 00:16:33,309
your things so analytics can be done

00:16:30,249 --> 00:16:35,079
from done by either you can use google

00:16:33,309 --> 00:16:37,899
analytics for the static page where

00:16:35,079 --> 00:16:40,449
javascript can you know send data to the

00:16:37,899 --> 00:16:43,569
cloud and it will show you on the dash

00:16:40,449 --> 00:16:48,579
code or you can use internal analytics

00:16:43,569 --> 00:16:51,519
where you can build your own dashboard

00:16:48,579 --> 00:16:54,610
so there are a few tools available like

00:16:51,519 --> 00:16:56,620
graphite is their stress d is there

00:16:54,610 --> 00:17:02,559
which can send the old the matrix to the

00:16:56,620 --> 00:17:09,640
cloud and graphite will know arrange it

00:17:02,559 --> 00:17:15,819
into the graph y a few other things we

00:17:09,640 --> 00:17:17,679
need to take care of is scaling it

00:17:15,819 --> 00:17:22,419
depends on your use case what kind of

00:17:17,679 --> 00:17:24,909
usage you have you may have a database

00:17:22,419 --> 00:17:29,230
overload so you can scale your database

00:17:24,909 --> 00:17:32,679
vertically or horizontally you can have

00:17:29,230 --> 00:17:35,559
a performance-based scaling where you do

00:17:32,679 --> 00:17:37,450
your system your application to number

00:17:35,559 --> 00:17:40,750
of applications are not sufficient so

00:17:37,450 --> 00:17:44,559
you can you may scare those application

00:17:40,750 --> 00:17:46,290
servers you should have you may have

00:17:44,559 --> 00:17:48,900
periodic backup of your data

00:17:46,290 --> 00:17:52,590
which can be done through a Jenkins and

00:17:48,900 --> 00:17:57,180
of fabric jobs or that you need to

00:17:52,590 --> 00:17:59,580
figure out how you can do it so any our

00:17:57,180 --> 00:18:03,330
application and periodic backups may

00:17:59,580 --> 00:18:05,460
provide a data reliability so your data

00:18:03,330 --> 00:18:08,280
always be there if you have set up all

00:18:05,460 --> 00:18:11,490
those things then and load balancing is

00:18:08,280 --> 00:18:13,190
that where you know what car through

00:18:11,490 --> 00:18:18,110
engine eggs or through a pipe you can

00:18:13,190 --> 00:18:18,110
kind of a load balance your load yeah

00:18:22,940 --> 00:18:26,900
that's it n equations

00:18:39,680 --> 00:18:46,720

YouTube URL: https://www.youtube.com/watch?v=et0Hnntk3-s


