Title: Ana Balica - Demystifying Mixins with Django
Publication date: 2015-08-08
Playlist: EuroPython 2015
Description: 
	Ana Balica - Demystifying Mixins with Django
[EuroPython 2015]
[24 July 2015]
[Bilbao, Euskadi, Spain]

Mixins are a great way to keep an application decoupled. This talk is
about building mixins and dissecting what's behing the mixin "magic"
and that, in fact, there is no magic involved at all. The main focus
will be on Django framework while digging into mixins. When using
Django class-based views, mixins feel very natural.

**Goal**: by the end of this talk, every developer should be confident
about creating his or her own custom mixins.

**Prerequisites:**
 - basic understanding of OOP principles and their application in Python
 - Django web framework

Generally mixins in Python are pretty straight-forward, easy to create
and use. Nevertheless a lot of developers stay away from them. I think
attendees of this talk will be interested to learn that mixins are not
that complex and their benefit is tremendous.
Captions: 
	00:00:06,109 --> 00:00:11,730
hola everyone I'm really excited to be

00:00:09,630 --> 00:00:13,650
at Europe Python this year and I'm

00:00:11,730 --> 00:00:15,509
really glad so many of you made it to

00:00:13,650 --> 00:00:16,350
this talk because it's Friday so yeah

00:00:15,509 --> 00:00:18,869
cool

00:00:16,350 --> 00:00:21,779
so the mystifying makes sense with

00:00:18,869 --> 00:00:23,359
Django is somewhat of an app Ian Aidid

00:00:21,779 --> 00:00:27,119
talk and it's going to be about

00:00:23,359 --> 00:00:29,490
understanding what our makes sense how

00:00:27,119 --> 00:00:31,289
they work and how to create your own

00:00:29,490 --> 00:00:34,110
make sense in the context of Django

00:00:31,289 --> 00:00:37,110
framework I'll be glad to answer all

00:00:34,110 --> 00:00:40,680
your questions by the end of this talk

00:00:37,110 --> 00:00:42,840
so my name is Anna and the simplest way

00:00:40,680 --> 00:00:46,289
to get in touch with me is via Twitter I

00:00:42,840 --> 00:00:48,660
work at potato and I absolutely love

00:00:46,289 --> 00:00:50,520
saying this sentence but seriously

00:00:48,660 --> 00:00:52,500
potato is an amazing company where we

00:00:50,520 --> 00:00:57,420
create all sorts of apps with Django and

00:00:52,500 --> 00:00:59,789
not only let's dive right in mix-ins are

00:00:57,420 --> 00:01:03,870
a controlled way of adding functionality

00:00:59,789 --> 00:01:06,689
to classes but mix-ins are not special

00:01:03,870 --> 00:01:09,060
language construct this means there is

00:01:06,689 --> 00:01:10,950
no special keyword in Python that will

00:01:09,060 --> 00:01:14,280
point to some construct and say well

00:01:10,950 --> 00:01:17,070
this is a mixin in fact mix-ins are just

00:01:14,280 --> 00:01:19,590
ordinary Python classes take a look at

00:01:17,070 --> 00:01:22,979
this short example it is a class called

00:01:19,590 --> 00:01:25,409
some mixing and it has one method that

00:01:22,979 --> 00:01:28,380
does nothing well this is a useless

00:01:25,409 --> 00:01:30,420
mixin for obvious reasons but let me

00:01:28,380 --> 00:01:33,869
draw your attention to one important bit

00:01:30,420 --> 00:01:37,200
over here our little mixing inherits

00:01:33,869 --> 00:01:40,259
from object and only from object if we

00:01:37,200 --> 00:01:42,840
are using new style Python classes so

00:01:40,259 --> 00:01:46,770
the takeaway from here is that mixes are

00:01:42,840 --> 00:01:48,960
preferably not derived classes mix-ins

00:01:46,770 --> 00:01:51,780
offer modularity and that's the main

00:01:48,960 --> 00:01:54,740
reason we want to use them when to use

00:01:51,780 --> 00:01:57,450
them well when we want to reuse a

00:01:54,740 --> 00:01:59,820
particular feature in a lot of different

00:01:57,450 --> 00:02:01,380
classes especially when this feature

00:01:59,820 --> 00:02:05,250
doesn't belong in any of the existing

00:02:01,380 --> 00:02:07,500
classes that's why mix-ins

00:02:05,250 --> 00:02:10,440
should be narrowing scope in other words

00:02:07,500 --> 00:02:12,170
have one single responsibility they're

00:02:10,440 --> 00:02:14,690
not meant to be extended

00:02:12,170 --> 00:02:19,250
and they're not meant to be instantiated

00:02:14,690 --> 00:02:21,709
I mentioned mix-ins are good in creating

00:02:19,250 --> 00:02:24,860
modular designs so let's take a closer

00:02:21,709 --> 00:02:26,810
look at this decoupling concept imagine

00:02:24,860 --> 00:02:29,270
that you have an encapsulator that has

00:02:26,810 --> 00:02:33,830
four color-coded features orange blue

00:02:29,270 --> 00:02:36,020
green and yellow so far so good imagine

00:02:33,830 --> 00:02:38,239
over time that your project grows bigger

00:02:36,020 --> 00:02:41,390
and we create new classes that

00:02:38,239 --> 00:02:44,630
encapsulate their own features at this

00:02:41,390 --> 00:02:46,730
point this code smells it's ugly

00:02:44,630 --> 00:02:50,299
there is something wrong with all those

00:02:46,730 --> 00:02:53,090
four classes because this yellow feature

00:02:50,299 --> 00:02:56,269
appears in all four of them I bet

00:02:53,090 --> 00:02:58,370
someone copy pasted it so what we need

00:02:56,269 --> 00:03:01,010
to do in this case is to extract the

00:02:58,370 --> 00:03:03,170
yellow feature and put it in a separate

00:03:01,010 --> 00:03:05,420
encapsulator so that the current and

00:03:03,170 --> 00:03:09,530
future classes can benefit from our

00:03:05,420 --> 00:03:12,739
newly created mixin and here comes the

00:03:09,530 --> 00:03:15,170
question how do we actually do that well

00:03:12,739 --> 00:03:17,480
in Python and not only the concept of

00:03:15,170 --> 00:03:19,549
mix-ins is implemented using multiple

00:03:17,480 --> 00:03:23,090
inheritance and when we talk about

00:03:19,549 --> 00:03:27,560
multiple inheritance in Python the order

00:03:23,090 --> 00:03:31,100
of inheritance matters here's how we can

00:03:27,560 --> 00:03:33,910
use a mixin say we have a class foo that

00:03:31,100 --> 00:03:36,530
inherits from base foo and some mixin

00:03:33,910 --> 00:03:38,630
you might think especially according to

00:03:36,530 --> 00:03:42,260
some naming conventions that base fool

00:03:38,630 --> 00:03:46,280
acts as a base class and some mixing is

00:03:42,260 --> 00:03:47,720
indeed a mixin nevertheless we should be

00:03:46,280 --> 00:03:48,200
reading this code in the following

00:03:47,720 --> 00:03:51,920
manner

00:03:48,200 --> 00:03:55,400
some mixin is a base class extended by

00:03:51,920 --> 00:03:57,650
base full extended by foo this might not

00:03:55,400 --> 00:04:01,069
be a problem if some mixing and base for

00:03:57,650 --> 00:04:04,850
not sharing extending or overriding any

00:04:01,069 --> 00:04:06,590
of the existing methods but if you are

00:04:04,850 --> 00:04:08,989
conscious that some mixin will be

00:04:06,590 --> 00:04:12,230
extending a method of base foo you

00:04:08,989 --> 00:04:14,420
should reverse the order well that looks

00:04:12,230 --> 00:04:16,609
much better to me an easy way to

00:04:14,420 --> 00:04:19,100
remember Python inheritance order is

00:04:16,609 --> 00:04:22,940
with is with one single arrow that goes

00:04:19,100 --> 00:04:24,550
all the way from right to left when you

00:04:22,940 --> 00:04:27,300
start chaining mix-ins

00:04:24,550 --> 00:04:32,349
be especially careful about your order

00:04:27,300 --> 00:04:35,409
so who has heard about this thing like

00:04:32,349 --> 00:04:39,400
Django like framework Django someone hmm

00:04:35,409 --> 00:04:43,210
someone yeah not-not-not yeah kind of

00:04:39,400 --> 00:04:45,460
grows in popularity I think and who has

00:04:43,210 --> 00:04:49,960
ever used class-based views that's more

00:04:45,460 --> 00:04:51,819
like a lot of people but if you didn't

00:04:49,960 --> 00:04:54,009
there's no problem I'll give you a short

00:04:51,819 --> 00:04:57,729
intro really shortly so here's a snippet

00:04:54,009 --> 00:04:59,680
snippet okay here's a snippet from the

00:04:57,729 --> 00:05:01,449
official Django documentation it is a

00:04:59,680 --> 00:05:04,030
class-based view that inherits from

00:05:01,449 --> 00:05:07,120
template view and a template view helps

00:05:04,030 --> 00:05:10,300
us render a template that's all it does

00:05:07,120 --> 00:05:13,330
and all it asks from us is to configure

00:05:10,300 --> 00:05:16,509
the name of the template class-based

00:05:13,330 --> 00:05:19,629
views in Django is one typical use case

00:05:16,509 --> 00:05:22,750
where mix-ins use where mix-ins feel

00:05:19,629 --> 00:05:27,370
very natural and so we're interested in

00:05:22,750 --> 00:05:29,800
plugging in over there and mix in yay we

00:05:27,370 --> 00:05:32,259
know two things right now we know what

00:05:29,800 --> 00:05:34,389
our mix seems and how to use them so

00:05:32,259 --> 00:05:37,479
let's go ahead and write our own first

00:05:34,389 --> 00:05:39,250
mix in the common use case in web

00:05:37,479 --> 00:05:42,699
development is to protect some of our

00:05:39,250 --> 00:05:44,830
pages so we want to enforce our end

00:05:42,699 --> 00:05:47,050
users to authenticate before accessing a

00:05:44,830 --> 00:05:50,529
page let's create a mixin that will

00:05:47,050 --> 00:05:52,509
check if the user is authenticated first

00:05:50,529 --> 00:05:54,729
thing we do we choose a good class name

00:05:52,509 --> 00:05:58,029
login required mixin it inherits from

00:05:54,729 --> 00:06:00,819
object and we place it inside some app

00:05:58,029 --> 00:06:04,210
views that PI file though it might be

00:06:00,819 --> 00:06:05,710
placed almost anywhere we would like to

00:06:04,210 --> 00:06:08,069
check if the user is authenticated

00:06:05,710 --> 00:06:11,110
before we start processing the request

00:06:08,069 --> 00:06:13,840
you might know that or might not know

00:06:11,110 --> 00:06:15,879
that but one of the first methods to be

00:06:13,840 --> 00:06:18,580
called when processing the request is

00:06:15,879 --> 00:06:20,440
dispatch we use the same signature of

00:06:18,580 --> 00:06:23,020
the dispatch method as in the base view

00:06:20,440 --> 00:06:25,750
class and now it's time to do the proper

00:06:23,020 --> 00:06:29,050
check so if you take a look at the lines

00:06:25,750 --> 00:06:32,009
eight and nine we say if the user is not

00:06:29,050 --> 00:06:35,050
authenticated raise a permission denied

00:06:32,009 --> 00:06:37,270
exception and since we don't write any

00:06:35,050 --> 00:06:38,070
Java and there is no way to out import

00:06:37,270 --> 00:06:39,870
packages let

00:06:38,070 --> 00:06:41,490
go ahead and specify on the line number

00:06:39,870 --> 00:06:45,330
two that we import permission denied

00:06:41,490 --> 00:06:47,340
from Django Cora exceptions one last

00:06:45,330 --> 00:06:49,920
thing to do is to handle the use case

00:06:47,340 --> 00:06:52,380
when a user is actually authenticated

00:06:49,920 --> 00:06:55,170
and we want to allow him or her to

00:06:52,380 --> 00:06:57,330
access the ultimate page therefore let's

00:06:55,170 --> 00:06:59,730
call the super method on dispatch and

00:06:57,330 --> 00:07:02,400
resume the work of the base method I

00:06:59,730 --> 00:07:06,690
leave it up to you to provide dogs and

00:07:02,400 --> 00:07:09,870
tasks please do that so going back to

00:07:06,690 --> 00:07:13,020
our about view we plug in the login

00:07:09,870 --> 00:07:15,210
required mix in and tada it works just

00:07:13,020 --> 00:07:17,550
like that now all the anonymous users

00:07:15,210 --> 00:07:19,470
are not allowed to trespass to the land

00:07:17,550 --> 00:07:21,840
of the super-secret information of the

00:07:19,470 --> 00:07:24,330
about Liam and that's all there is

00:07:21,840 --> 00:07:27,690
required to protect a view it's a very

00:07:24,330 --> 00:07:30,830
trivial example and there is simplified

00:07:27,690 --> 00:07:33,540
but it demonstrates a mixing in action

00:07:30,830 --> 00:07:36,450
here's how we describe graphically our

00:07:33,540 --> 00:07:38,370
latest usage of a mix in the about view

00:07:36,450 --> 00:07:41,370
inherits both from template view and

00:07:38,370 --> 00:07:44,580
from login required mixing and if you

00:07:41,370 --> 00:07:46,650
ever decide oh well I want to detail

00:07:44,580 --> 00:07:49,590
view instead instead of a template view

00:07:46,650 --> 00:07:51,090
well no problem and if you didn't see

00:07:49,590 --> 00:07:52,800
what the hell change on the slide is

00:07:51,090 --> 00:07:55,560
basically I have swapped the template

00:07:52,800 --> 00:07:56,390
view with the detail view and that's a

00:07:55,560 --> 00:07:59,400
good thing right

00:07:56,390 --> 00:08:01,290
because minimum effort is required to

00:07:59,400 --> 00:08:01,800
use a different view with no additional

00:08:01,290 --> 00:08:05,430
cost

00:08:01,800 --> 00:08:09,840
and this looks simple at least I hope it

00:08:05,430 --> 00:08:12,180
does to you does it yeah so I'm

00:08:09,840 --> 00:08:14,250
preaching here how neat others are those

00:08:12,180 --> 00:08:16,680
mix ends but what if there is a

00:08:14,250 --> 00:08:18,510
different way there are tons of

00:08:16,680 --> 00:08:21,870
different ways but there aren't

00:08:18,510 --> 00:08:24,000
necessarily good or the best so this

00:08:21,870 --> 00:08:26,460
made me think how would I do it another

00:08:24,000 --> 00:08:28,680
way I might check if the user is

00:08:26,460 --> 00:08:30,870
authenticated right in my deep right in

00:08:28,680 --> 00:08:33,630
my view but that's a stupid idea for

00:08:30,870 --> 00:08:36,560
obvious reasons so I came up with this

00:08:33,630 --> 00:08:39,150
as you'll see also there is stupid idea

00:08:36,560 --> 00:08:40,860
so I extended the template view and

00:08:39,150 --> 00:08:43,140
created a new class called log-in

00:08:40,860 --> 00:08:47,060
required template view starts to remind

00:08:43,140 --> 00:08:50,120
me of some abstract factory view Factory

00:08:47,060 --> 00:08:52,939
and I made about view to inherit from it

00:08:50,120 --> 00:08:55,040
doesn't look that bad at the moment but

00:08:52,939 --> 00:08:57,069
it actually does because every single

00:08:55,040 --> 00:08:59,720
other view the number of which I

00:08:57,069 --> 00:09:01,670
extrapolating infinity that you want to

00:08:59,720 --> 00:09:05,930
have an aloof check will be extended the

00:09:01,670 --> 00:09:07,370
same way that's exactly the same problem

00:09:05,930 --> 00:09:09,589
we have discussed at the beginning we

00:09:07,370 --> 00:09:12,610
didn't solve anything we just continued

00:09:09,589 --> 00:09:15,350
to copy-paste the of check everywhere

00:09:12,610 --> 00:09:20,209
now take a look again at this diagram

00:09:15,350 --> 00:09:23,180
it's elegant and simple alright so we

00:09:20,209 --> 00:09:24,949
all agree that mixings are fantastic how

00:09:23,180 --> 00:09:26,750
about looking a bit more inside

00:09:24,949 --> 00:09:30,769
class-based views and some common

00:09:26,750 --> 00:09:33,560
class-based views methods if we want to

00:09:30,769 --> 00:09:36,889
add a feature to a class-based view

00:09:33,560 --> 00:09:40,160
using a mixin we sometimes need to know

00:09:36,889 --> 00:09:42,379
a bit about the Django internals once

00:09:40,160 --> 00:09:43,910
the request hits the template view one

00:09:42,379 --> 00:09:46,910
of the first methods to be called is

00:09:43,910 --> 00:09:49,970
dispatch we had this one it figures out

00:09:46,910 --> 00:09:54,139
which HTM which HTTP method to call is

00:09:49,970 --> 00:09:56,480
it a gap is it a passed so it is useful

00:09:54,139 --> 00:09:58,790
to override dispatch to provide a check

00:09:56,480 --> 00:10:01,790
very early on before anything else

00:09:58,790 --> 00:10:03,759
happens to the request for example check

00:10:01,790 --> 00:10:07,759
if the user is logged in or has

00:10:03,759 --> 00:10:10,399
permission the next method get context

00:10:07,759 --> 00:10:13,550
data is also sometimes useful to be

00:10:10,399 --> 00:10:16,879
overridden it passes keyword arguments

00:10:13,550 --> 00:10:20,860
to the template context and so it is a

00:10:16,879 --> 00:10:24,079
way to add extra context to the views

00:10:20,860 --> 00:10:26,360
next one get template names is a method

00:10:24,079 --> 00:10:29,300
called by render to response and it

00:10:26,360 --> 00:10:32,269
lists all template names so it can be

00:10:29,300 --> 00:10:34,160
extended to add more flexibility to the

00:10:32,269 --> 00:10:36,589
template names if you have a different

00:10:34,160 --> 00:10:40,129
mechanism of identifying those in your

00:10:36,589 --> 00:10:43,069
Django project so by now you probably

00:10:40,129 --> 00:10:45,769
should be angrily asking me how do I

00:10:43,069 --> 00:10:47,240
know all that because all I showed you

00:10:45,769 --> 00:10:50,839
was this simple example with the

00:10:47,240 --> 00:10:52,490
template view and it looked neat but

00:10:50,839 --> 00:10:56,809
then suddenly you need to know all of

00:10:52,490 --> 00:11:00,140
this well I'd be angry too so here are

00:10:56,809 --> 00:11:01,940
some ways how you can learn more about

00:11:00,140 --> 00:11:05,030
go class bass views so my personal

00:11:01,940 --> 00:11:07,340
approach is to go to jump right into the

00:11:05,030 --> 00:11:09,350
source code and it's easy to get your

00:11:07,340 --> 00:11:11,660
head around Django source code because

00:11:09,350 --> 00:11:14,510
it has dog strings and it's pretty well

00:11:11,660 --> 00:11:16,880
structured but then of course there is a

00:11:14,510 --> 00:11:19,310
different approach you can start with

00:11:16,880 --> 00:11:22,760
Django documentation to read a bit more

00:11:19,310 --> 00:11:27,500
about base classes of class-based views

00:11:22,760 --> 00:11:30,230
and not by accident django uses mix-ins

00:11:27,500 --> 00:11:35,000
to build the class-based views and you

00:11:30,230 --> 00:11:36,920
can read about them at this URL again I

00:11:35,000 --> 00:11:39,080
highly recommend to take a look at the

00:11:36,920 --> 00:11:41,630
Django class-based views and mixin

00:11:39,080 --> 00:11:44,210
source code because if you can't really

00:11:41,630 --> 00:11:46,850
wrap your hand your head around all

00:11:44,210 --> 00:11:50,810
those mix-ins Django provides an example

00:11:46,850 --> 00:11:54,860
how to get started this little website

00:11:50,810 --> 00:11:57,560
see cbv that code at UK is an awesome

00:11:54,860 --> 00:12:00,110
resource it aggregates in one single

00:11:57,560 --> 00:12:02,450
place all the class-based views their

00:12:00,110 --> 00:12:05,480
methods where they come from their

00:12:02,450 --> 00:12:09,130
hierarchy diagrams and source code so

00:12:05,480 --> 00:12:12,110
it's really good and well-structured I

00:12:09,130 --> 00:12:15,140
made you go through all of this login

00:12:12,110 --> 00:12:17,900
required mixing code but in real life

00:12:15,140 --> 00:12:20,210
probably you don't bother implementing

00:12:17,900 --> 00:12:22,160
your own login required unless you

00:12:20,210 --> 00:12:26,420
really need to you have a specific use

00:12:22,160 --> 00:12:29,150
case basically because you have Django

00:12:26,420 --> 00:12:31,730
braces Jenko braces is a package that

00:12:29,150 --> 00:12:33,530
aggregates command mix-ins that you will

00:12:31,730 --> 00:12:37,190
need in your project and they're

00:12:33,530 --> 00:12:42,650
structured in three categories access

00:12:37,190 --> 00:12:45,230
form and other makes sense if you have

00:12:42,650 --> 00:12:49,420
been using Django for some time you're

00:12:45,230 --> 00:12:53,140
probably familiar with those decorators

00:12:49,420 --> 00:12:56,990
login required user passes tests and

00:12:53,140 --> 00:12:59,630
permission required well I wish we had

00:12:56,990 --> 00:13:02,180
something similar in Django for

00:12:59,630 --> 00:13:07,040
class-based views well good news

00:13:02,180 --> 00:13:09,710
everyone in Django 1.9 we will get login

00:13:07,040 --> 00:13:12,700
required mixing user passes tests mixing

00:13:09,710 --> 00:13:16,150
and permission required mixing

00:13:12,700 --> 00:13:19,720
yay according to the roadmap the final

00:13:16,150 --> 00:13:23,350
1.9 version will be released sometime in

00:13:19,720 --> 00:13:26,290
December and those framing cents that

00:13:23,350 --> 00:13:29,170
shadow the original Django decorators

00:13:26,290 --> 00:13:32,500
were written during the zeroes Django

00:13:29,170 --> 00:13:35,020
con Europe's prints in the evening after

00:13:32,500 --> 00:13:36,940
I gave this little talk so that's pretty

00:13:35,020 --> 00:13:41,830
cool someone was listening to the talk

00:13:36,940 --> 00:13:45,790
while I was babbling on the stage now

00:13:41,830 --> 00:13:48,640
let's get a bit more evil how about some

00:13:45,790 --> 00:13:50,920
runtime magic so what I want to do I

00:13:48,640 --> 00:13:54,690
want to plug in some behavior to my

00:13:50,920 --> 00:13:57,250
classes in the runtime dynamically I

00:13:54,690 --> 00:14:00,250
personally never had a use case where I

00:13:57,250 --> 00:14:01,350
would need that but let's try just for

00:14:00,250 --> 00:14:04,930
fun

00:14:01,350 --> 00:14:08,050
let me tell your story this is a cute

00:14:04,930 --> 00:14:10,420
mixing and the mixin assumes that we

00:14:08,050 --> 00:14:13,240
have a name attribute and what it does

00:14:10,420 --> 00:14:17,830
is one ordinary print statement oh yeah

00:14:13,240 --> 00:14:20,650
so you can see this is Python 2 and now

00:14:17,830 --> 00:14:24,030
let's introduce mr. mascot and its name

00:14:20,650 --> 00:14:28,600
attribute one extra class one attribute

00:14:24,030 --> 00:14:31,060
fairly simple now we enter the land of

00:14:28,600 --> 00:14:35,170
main to bring to life some of our

00:14:31,060 --> 00:14:37,480
classes so on line number 12 we create

00:14:35,170 --> 00:14:42,790
an instance of the mascot and his name

00:14:37,480 --> 00:14:45,370
is Damo the next line is the magic it

00:14:42,790 --> 00:14:49,120
modifies the basis of the mascot class

00:14:45,370 --> 00:14:51,820
and as the cute mix into it we are

00:14:49,120 --> 00:14:54,460
mixing it dynamically then we try to

00:14:51,820 --> 00:14:56,860
call the be cute method from the cute

00:14:54,460 --> 00:15:01,300
mixin on previously instantiated object

00:14:56,860 --> 00:15:06,100
and it works hey meat domo-kun

00:15:01,300 --> 00:15:09,160
I emphasize that this works in Python 2

00:15:06,100 --> 00:15:12,550
and we are also using all style classes

00:15:09,160 --> 00:15:17,200
I'm not inheriting from object so basis

00:15:12,550 --> 00:15:17,940
was mutable back then spooky story how

00:15:17,200 --> 00:15:21,700
about now

00:15:17,940 --> 00:15:24,580
how about if we are using Python 3 or we

00:15:21,700 --> 00:15:26,600
have new style classes is it much of a

00:15:24,580 --> 00:15:31,310
difference in code well the print font

00:15:26,600 --> 00:15:34,100
is the print is a function let's see

00:15:31,310 --> 00:15:37,029
what we can do well we can't screw up as

00:15:34,100 --> 00:15:41,449
much as with Python - because basis is

00:15:37,029 --> 00:15:44,630
immutable but we can change the dunder

00:15:41,449 --> 00:15:47,930
class attribute on an instance that we

00:15:44,630 --> 00:15:50,449
have called kumamon and create a new

00:15:47,930 --> 00:15:53,019
type that includes the cute mixin and

00:15:50,449 --> 00:15:59,050
then make use of the be cute method and

00:15:53,019 --> 00:16:01,610
this will work if you ever do this

00:15:59,050 --> 00:16:05,000
please make sure you do this for a very

00:16:01,610 --> 00:16:07,730
good reason and please provide plenty of

00:16:05,000 --> 00:16:12,680
documentation explaining the why and I

00:16:07,730 --> 00:16:15,800
have warned you be careful when you

00:16:12,680 --> 00:16:18,699
decide to use make sense because with

00:16:15,800 --> 00:16:21,550
great power comes great responsibility

00:16:18,699 --> 00:16:24,680
beware of incompatible make sense

00:16:21,550 --> 00:16:27,079
chaining too many mix-ins and overdoing

00:16:24,680 --> 00:16:30,860
make sense hence making it a nightmare

00:16:27,079 --> 00:16:34,910
to figure out the execution flow same as

00:16:30,860 --> 00:16:37,970
we advise against 100 lines long views

00:16:34,910 --> 00:16:40,040
functions and tons of decorators on your

00:16:37,970 --> 00:16:41,839
functions we also advise against

00:16:40,040 --> 00:16:44,870
class-based views that requires six

00:16:41,839 --> 00:16:46,699
mix-ins to work you're probably doing

00:16:44,870 --> 00:16:49,819
something wrong and placing too much

00:16:46,699 --> 00:16:53,630
logic into your view layer or controller

00:16:49,819 --> 00:16:54,850
layer so let's recap what we have

00:16:53,630 --> 00:16:58,490
learned so far

00:16:54,850 --> 00:17:01,360
mix-ins in Python our classes and should

00:16:58,490 --> 00:17:04,610
have one single responsibility

00:17:01,360 --> 00:17:07,959
semantically we think about mix-ins as

00:17:04,610 --> 00:17:11,209
some plug-in reusable functionality

00:17:07,959 --> 00:17:13,510
although mixes are mixed in using

00:17:11,209 --> 00:17:17,299
inheritance they're not creating a

00:17:13,510 --> 00:17:20,510
subtyping relation this means they don't

00:17:17,299 --> 00:17:23,020
adhere to Liskov principle from solid

00:17:20,510 --> 00:17:26,150
Liskov principle says the following

00:17:23,020 --> 00:17:29,330
instances of base class can be replaced

00:17:26,150 --> 00:17:32,210
with instances of derived classes and it

00:17:29,330 --> 00:17:34,490
will make sense this statement doesn't

00:17:32,210 --> 00:17:36,440
hold for make sense and that's why we

00:17:34,490 --> 00:17:39,680
say that mixes are not creating a

00:17:36,440 --> 00:17:41,930
subtyping relation

00:17:39,680 --> 00:17:46,400
I hope I convinced you that mix-ins are

00:17:41,930 --> 00:17:49,460
pretty cool and easy to create therefore

00:17:46,400 --> 00:17:52,550
I strongly encourage you to go back to

00:17:49,460 --> 00:18:07,880
your views and start writing makes sense

00:17:52,550 --> 00:18:11,270
to clean up your code thank you so if

00:18:07,880 --> 00:18:16,340
you want now you can have you get any

00:18:11,270 --> 00:18:20,090
question well I've got one to start with

00:18:16,340 --> 00:18:23,720
anyway you say six mix-ins is too much

00:18:20,090 --> 00:18:27,760
for view but what about three of them is

00:18:23,720 --> 00:18:30,590
this okay it depends on your use case

00:18:27,760 --> 00:18:32,240
normally normally you would have liked

00:18:30,590 --> 00:18:34,130
to make sense is quite okay because you

00:18:32,240 --> 00:18:37,010
probably need a login required and then

00:18:34,130 --> 00:18:39,410
that has permission quite a common use

00:18:37,010 --> 00:18:42,740
case maybe you have an extra one it's

00:18:39,410 --> 00:18:44,960
still going to be fine but you know the

00:18:42,740 --> 00:18:49,400
harder it gets to figure out where the

00:18:44,960 --> 00:18:50,900
your request flows so in this case I

00:18:49,400 --> 00:18:53,960
think they're kind of like the couple

00:18:50,900 --> 00:18:55,760
because you login you know what is doing

00:18:53,960 --> 00:18:57,260
and it has permission they both work

00:18:55,760 --> 00:18:59,600
with the dispatch and then you have an

00:18:57,260 --> 00:19:03,290
extra mixing that changes something in

00:18:59,600 --> 00:19:06,170
your context might be okay so free is

00:19:03,290 --> 00:19:12,220
still fine okay

00:19:06,170 --> 00:19:12,220
and four might be pushing it okay

00:19:13,150 --> 00:19:18,670
any more questions yes at the back

00:19:25,790 --> 00:19:31,710
and what if you want to combine the

00:19:29,190 --> 00:19:35,940
functionality of several mix-ins what's

00:19:31,710 --> 00:19:39,290
a recommended way like extending mixing

00:19:35,940 --> 00:19:44,900
sub-classing mixings or composition

00:19:39,290 --> 00:19:44,900
compositing mixing into one big mixing I

00:19:45,230 --> 00:19:51,720
would always favor composition over

00:19:48,090 --> 00:19:54,960
inheritance but I have seen use cases

00:19:51,720 --> 00:19:56,940
where a mix ends were actually extended

00:19:54,960 --> 00:20:00,710
so if you look into the source code of

00:19:56,940 --> 00:20:04,470
django braces they have one kind of base

00:20:00,710 --> 00:20:07,200
so they have a base mix in for their

00:20:04,470 --> 00:20:09,660
access mix-ins that is doing some of the

00:20:07,200 --> 00:20:12,720
basic stuff and then all the others they

00:20:09,660 --> 00:20:17,010
inherit so you can do that that's pretty

00:20:12,720 --> 00:20:19,950
valid but just be careful yeah

00:20:17,010 --> 00:20:23,460
combining them via composition I'm not

00:20:19,950 --> 00:20:30,890
sure how would you do that so can't

00:20:23,460 --> 00:20:34,890
really give you an advice more questions

00:20:30,890 --> 00:20:37,530
hungry but I don't know if they start

00:20:34,890 --> 00:20:47,340
serving food now so we might have to

00:20:37,530 --> 00:20:50,640
wait a minute anyway I think you first I

00:20:47,340 --> 00:20:51,860
was before in the decorator lectures and

00:20:50,640 --> 00:20:54,870
they were talking about how to use

00:20:51,860 --> 00:20:56,730
decorator how many you can use and you

00:20:54,870 --> 00:20:58,200
can use also decorator for classes I

00:20:56,730 --> 00:21:00,240
guess is a bit different from mixing

00:20:58,200 --> 00:21:04,590
because it's modifying the class

00:21:00,240 --> 00:21:06,960
attribute but the speaker also was

00:21:04,590 --> 00:21:08,790
talking about meta classes and I was

00:21:06,960 --> 00:21:11,460
thinking how is the relation with in

00:21:08,790 --> 00:21:13,890
meta classes and mixing and what is good

00:21:11,460 --> 00:21:16,650
to you mixing for and what it is and why

00:21:13,890 --> 00:21:20,790
would you use meta classes for if you

00:21:16,650 --> 00:21:26,840
have to use it I haven't used metal

00:21:20,790 --> 00:21:27,990
classes for creating big sense so I

00:21:26,840 --> 00:21:31,980
can't

00:21:27,990 --> 00:21:33,730
really so can I echo your question how

00:21:31,980 --> 00:21:38,820
would you use

00:21:33,730 --> 00:21:38,820
classes if you're creating make sense or

00:21:43,260 --> 00:21:50,890
instead of using mixing for adding a

00:21:47,020 --> 00:21:52,990
small methods origionally to a class

00:21:50,890 --> 00:21:55,420
like using having meta classes and

00:21:52,990 --> 00:21:58,570
redefine all those and you find all

00:21:55,420 --> 00:22:02,020
those classes already with global or

00:21:58,570 --> 00:22:07,840
more broad numbers of methods for abuse

00:22:02,020 --> 00:22:10,840
or something maybe I'm yeah I don't know

00:22:07,840 --> 00:22:15,280
much about matter classes so that might

00:22:10,840 --> 00:22:17,050
be also a problem yes so I definitely

00:22:15,280 --> 00:22:19,150
should take a look at this talk and

00:22:17,050 --> 00:22:20,710
learn actually about meta classes but

00:22:19,150 --> 00:22:23,200
I'm not sure that he matter classes you

00:22:20,710 --> 00:22:25,120
can do the same stuff so yeah definitely

00:22:23,200 --> 00:22:27,340
you can have some of your functionality

00:22:25,120 --> 00:22:29,650
separated in tomato classes that's what

00:22:27,340 --> 00:22:32,890
basically Django is doing so we have a

00:22:29,650 --> 00:22:36,100
meta classes for a set of functionality

00:22:32,890 --> 00:22:39,940
and then we have extra placed into it

00:22:36,100 --> 00:22:42,040
makes sense but I got a try maybe I can

00:22:39,940 --> 00:22:48,270
put all this code into meta classes and

00:22:42,040 --> 00:22:48,270
it will work no no no okay no just no

00:22:51,600 --> 00:22:58,600
thanks for the talk

00:22:54,090 --> 00:23:05,950
our mixings also used in are also

00:22:58,600 --> 00:23:08,260
popular in other contexts and jungle if

00:23:05,950 --> 00:23:11,140
you have any of the additional models

00:23:08,260 --> 00:23:14,920
which are outside of the django core

00:23:11,140 --> 00:23:18,730
components so if you're doing models you

00:23:14,920 --> 00:23:21,430
don't have make sense obviously if you

00:23:18,730 --> 00:23:23,170
are so we have the template layer the

00:23:21,430 --> 00:23:24,610
view layer and the model layer so the

00:23:23,170 --> 00:23:26,440
view layer is the only place where I

00:23:24,610 --> 00:23:29,200
could see make sense but then you can

00:23:26,440 --> 00:23:30,970
have extra logic extra modules where you

00:23:29,200 --> 00:23:38,350
can use mixed sense for your ordinary

00:23:30,970 --> 00:23:41,860
Python structure so I can't give an

00:23:38,350 --> 00:23:44,560
exact use case but you might have the

00:23:41,860 --> 00:23:46,720
need to use make sense but there that

00:23:44,560 --> 00:23:50,200
that's going to be already outside of

00:23:46,720 --> 00:23:53,020
go thanks

00:23:50,200 --> 00:23:55,330
I can actually I can actually add

00:23:53,020 --> 00:23:58,000
something on this one and if you do

00:23:55,330 --> 00:24:00,580
forms it's quite common to add I mix

00:23:58,000 --> 00:24:06,970
them to do like date pickers or these

00:24:00,580 --> 00:24:13,030
weird things to thank you and more

00:24:06,970 --> 00:24:16,000
questions right say maybe we can go to

00:24:13,030 --> 00:24:18,299
lunch and please thank you Anakin it was

00:24:16,000 --> 00:24:18,299

YouTube URL: https://www.youtube.com/watch?v=rMn2wC0PuXw


