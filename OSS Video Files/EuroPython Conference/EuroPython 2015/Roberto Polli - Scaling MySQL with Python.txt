Title: Roberto Polli - Scaling MySQL with Python
Publication date: 2015-08-08
Playlist: EuroPython 2015
Description: 
	Roberto Polli - Scaling MySQL with Python
[EuroPython 2015]
[20 July 2015]
[Bilbao, Euskadi, Spain]

Python is the language of choice for the orchestration part of  MySQL 5.6. 

After a brief introduction of  MySQL replication architecture, the
talk [Slides here][1] presents the python utilities released by MySQL:

 - a set of drivers in pure-python 
 - mysql-utilites for replication, management and failover
 - fabric, a tool for scaling, sharding and provisioning new servers

You will see how to:

 -  create resilient configurations in minutes
 -  use mysql-fabric to create high available infrastructures

As a plus, we'll show how we:

 -  implemented a fabric provider for provisioning new databases via docker


# Prerequisites

Basic database knowledge,  transactions, replication. 

MySQL specific concepts (eg: binary logs) are briefly introduced in the talk.


[1]: http://www.slideshare.net/ioggstream/scaling-mysql-with-python
Captions: 
	00:00:01,669 --> 00:00:10,170
so this is our agenda i will show you

00:00:05,940 --> 00:00:13,920
after brief introduction on mask UL what

00:00:10,170 --> 00:00:18,119
our Python utilities and how to use them

00:00:13,920 --> 00:00:22,170
to connect to the database in a full

00:00:18,119 --> 00:00:24,660
torrent way and how to create managing

00:00:22,170 --> 00:00:29,720
scale felt all fault-tolerant

00:00:24,660 --> 00:00:34,770
infrastructure and then after the run a

00:00:29,720 --> 00:00:38,610
bit of some drops of clothes in how to

00:00:34,770 --> 00:00:44,219
deliver a mask you are in a cloud

00:00:38,610 --> 00:00:49,350
infrastructure I stole I have to thank

00:00:44,219 --> 00:00:55,230
my company for financing these long

00:00:49,350 --> 00:00:57,930
travel from Italy to Bilbao partic works

00:00:55,230 --> 00:01:00,390
and with migration of bigoted

00:00:57,930 --> 00:01:03,180
infrastructure provides business

00:01:00,390 --> 00:01:08,310
intelligence solutions and vertical

00:01:03,180 --> 00:01:11,280
application for the financial market so

00:01:08,310 --> 00:01:14,030
you know mask UL it's a single process

00:01:11,280 --> 00:01:17,600
multi-threaded architecture what and

00:01:14,030 --> 00:01:21,560
maybe you don't know is that it has a

00:01:17,600 --> 00:01:26,400
two-tire infrastructure architecture one

00:01:21,560 --> 00:01:30,380
layer providing the SQL and connection

00:01:26,400 --> 00:01:33,090
services the other layer provides

00:01:30,380 --> 00:01:38,479
persistency heading is implemented via

00:01:33,090 --> 00:01:43,170
an API so everybody can write his own

00:01:38,479 --> 00:01:47,310
back-end plugin I strongly suggest you

00:01:43,170 --> 00:01:50,960
to follow the development of mass ql

00:01:47,310 --> 00:01:55,829
because new operation are very very nice

00:01:50,960 --> 00:01:59,490
of all the backends that maybe you know

00:01:55,829 --> 00:02:03,329
there is the you know DB which provides

00:01:59,490 --> 00:02:07,469
I see the multi versioning concurrency

00:02:03,329 --> 00:02:10,069
control and we doin undo logs so

00:02:07,469 --> 00:02:11,670
everything you need to create a

00:02:10,069 --> 00:02:14,880
consistent that the

00:02:11,670 --> 00:02:19,739
bass and another important thing is the

00:02:14,880 --> 00:02:22,620
replication is based on changelogs every

00:02:19,739 --> 00:02:27,750
transaction is recorded and to be

00:02:22,620 --> 00:02:32,100
provided to slaves those transaction

00:02:27,750 --> 00:02:34,080
logs are named binary loves so what we

00:02:32,100 --> 00:02:39,120
should we do to manage a user database

00:02:34,080 --> 00:02:41,840
it's almost a small nightmare it is

00:02:39,120 --> 00:02:44,700
managing tables indexes binary logs

00:02:41,840 --> 00:02:48,690
replication inconsistencies because if

00:02:44,700 --> 00:02:52,019
your replication you should provide a

00:02:48,690 --> 00:02:57,420
way to monitor that that actually

00:02:52,019 --> 00:03:00,150
recorded data match and what did you do

00:02:57,420 --> 00:03:03,920
yesterday you download the skreets from

00:03:00,150 --> 00:03:07,319
some blog out random queries shake

00:03:03,920 --> 00:03:10,620
strongly and then you have your solution

00:03:07,319 --> 00:03:16,230
for your database well those days are

00:03:10,620 --> 00:03:20,160
over we have the magical mask UL utility

00:03:16,230 --> 00:03:23,760
is provided by the masculine team those

00:03:20,160 --> 00:03:27,329
are written in Python includes some

00:03:23,760 --> 00:03:29,609
connectors for Django and fabric they

00:03:27,329 --> 00:03:32,400
are pure python so if you want to switch

00:03:29,609 --> 00:03:35,760
your present implementation from sip

00:03:32,400 --> 00:03:41,310
item 2 pi pi for example they work

00:03:35,760 --> 00:03:44,489
smoothly and will improve in time as

00:03:41,310 --> 00:03:49,340
soon as your python implementation

00:03:44,489 --> 00:03:52,430
improved so no more seed by bindings and

00:03:49,340 --> 00:03:55,819
those implementation are obviously

00:03:52,430 --> 00:03:58,230
multi-platform because our pure python

00:03:55,819 --> 00:04:00,299
there are you genius driver and the

00:03:58,230 --> 00:04:05,940
fabric orchestrator that we will see

00:04:00,299 --> 00:04:10,139
after so how to use masculinities it's

00:04:05,940 --> 00:04:12,690
simple just time SQL you see and you are

00:04:10,139 --> 00:04:16,470
in a new client environment common line

00:04:12,690 --> 00:04:19,350
environment a unique and 3.4 all

00:04:16,470 --> 00:04:22,700
utilities it has contacts a lap top

00:04:19,350 --> 00:04:24,250
completion and aloo

00:04:22,700 --> 00:04:26,750
as you can access each utility

00:04:24,250 --> 00:04:30,400
separately so what can we do with

00:04:26,750 --> 00:04:33,770
utilities we can check the audit log

00:04:30,400 --> 00:04:37,700
compare databases even the data if i

00:04:33,770 --> 00:04:40,910
want to check if my tree gigabyte 10

00:04:37,700 --> 00:04:43,250
gigabyte 100 gigabyte database is

00:04:40,910 --> 00:04:47,720
correctly replicated but i know that is

00:04:43,250 --> 00:04:50,450
just one table to compare i can just

00:04:47,720 --> 00:04:53,690
compare one table between two databases

00:04:50,450 --> 00:04:57,050
and check if this database this table is

00:04:53,690 --> 00:05:01,370
right those utilities can create a diff

00:04:57,050 --> 00:05:04,340
in SQL format so i can apply the

00:05:01,370 --> 00:05:10,910
resulting death to one of the database

00:05:04,340 --> 00:05:15,430
to get original sink I can even some you

00:05:10,910 --> 00:05:19,310
ready to check this to sage or to

00:05:15,430 --> 00:05:23,450
implement a resilient infrastructure for

00:05:19,310 --> 00:05:25,760
example I want to know my address book

00:05:23,450 --> 00:05:29,150
an email database that is actually

00:05:25,760 --> 00:05:34,000
unmasked UL I red mask UL disk usage and

00:05:29,150 --> 00:05:39,790
now that i have almost one gigabyte of

00:05:34,000 --> 00:05:42,940
email indexes and i get the data of the

00:05:39,790 --> 00:05:46,970
virus database those log files are

00:05:42,940 --> 00:05:49,100
essentially the redo logs of my database

00:05:46,970 --> 00:05:52,580
so even if i don't know anything about

00:05:49,100 --> 00:05:55,130
mask uli just right mask UL disk usage

00:05:52,580 --> 00:05:58,280
and I've got bunch of data and

00:05:55,130 --> 00:06:00,350
statistics and I can learn from it I get

00:05:58,280 --> 00:06:03,620
the output I check the output with the

00:06:00,350 --> 00:06:05,420
documentation I learn my square this is

00:06:03,620 --> 00:06:08,390
very useful i find it very useful for

00:06:05,420 --> 00:06:11,390
make trainings and will real life

00:06:08,390 --> 00:06:16,700
classrooms because people can learn even

00:06:11,390 --> 00:06:19,850
if we don't know everything i have

00:06:16,700 --> 00:06:22,490
connected this is a snapshot from the

00:06:19,850 --> 00:06:26,840
code of the jungle connector so if i use

00:06:22,490 --> 00:06:29,810
django i can use the jungle driver

00:06:26,840 --> 00:06:34,090
provided by mysql team it's prepared on

00:06:29,810 --> 00:06:34,090
and he checks my jungle version

00:06:35,170 --> 00:06:40,820
let's start then with the interesting

00:06:37,880 --> 00:06:45,380
part that is replication replication

00:06:40,820 --> 00:06:48,710
mass ql is almost a synchronous or semi

00:06:45,380 --> 00:06:52,370
synchronous that is the master creates a

00:06:48,710 --> 00:06:56,570
changelog records all the changes assign

00:06:52,370 --> 00:06:59,540
them a transaction ID and then the

00:06:56,570 --> 00:07:02,720
slaves connects to the master get those

00:06:59,540 --> 00:07:05,990
transaction and if you use a semi

00:07:02,720 --> 00:07:10,550
synchronous replication the master

00:07:05,990 --> 00:07:13,730
weights and doesn't acknowledge the

00:07:10,550 --> 00:07:16,870
transaction until when slaves and

00:07:13,730 --> 00:07:18,920
knowledge that the replication have been

00:07:16,870 --> 00:07:21,770
replicated the transaction of being

00:07:18,920 --> 00:07:24,350
replicated the simple diagram is the

00:07:21,770 --> 00:07:27,170
following so the master produced the

00:07:24,350 --> 00:07:30,650
changelog the slave connects to the

00:07:27,170 --> 00:07:34,220
master down laws the change loves stores

00:07:30,650 --> 00:07:38,890
locally and then applies on the local

00:07:34,220 --> 00:07:43,150
database you may guess why replication

00:07:38,890 --> 00:07:45,800
replication gives out availability it

00:07:43,150 --> 00:07:51,170
with the replication against the era

00:07:45,800 --> 00:07:56,180
scale reads but what we can even partly

00:07:51,170 --> 00:07:58,970
scare rights using different indexes on

00:07:56,180 --> 00:08:05,600
virus server for example if I have a

00:07:58,970 --> 00:08:09,110
great hard slow full text index on my

00:08:05,600 --> 00:08:11,990
master on my database I just don't

00:08:09,110 --> 00:08:15,230
provision the index on the master but I

00:08:11,990 --> 00:08:17,960
configure the slow index on the slave so

00:08:15,230 --> 00:08:20,830
I wrote on the master at full speed got

00:08:17,960 --> 00:08:25,150
almost full speed when the master

00:08:20,830 --> 00:08:31,790
replicates rights on the slave the slave

00:08:25,150 --> 00:08:35,360
schema set up the index and I run the

00:08:31,790 --> 00:08:38,240
full query the full text queries only on

00:08:35,360 --> 00:08:41,690
the slave in this way i have a very

00:08:38,240 --> 00:08:46,120
scalable infrastructure without adding

00:08:41,690 --> 00:08:48,380
complexity just with a master slaves

00:08:46,120 --> 00:08:54,070
replication but using

00:08:48,380 --> 00:08:58,100
some tricks to improve the performance I

00:08:54,070 --> 00:09:00,640
have my replicate infrastructure well

00:08:58,100 --> 00:09:04,190
there is one common one you did't e

00:09:00,640 --> 00:09:07,580
replication show that gives me the

00:09:04,190 --> 00:09:12,050
replication layout so even if I don't

00:09:07,580 --> 00:09:14,000
know my replication setup I just run

00:09:12,050 --> 00:09:17,320
this command it connects to the master

00:09:14,000 --> 00:09:20,900
start discovering all it's a slave and

00:09:17,320 --> 00:09:24,710
in one minute I've got the topology of

00:09:20,900 --> 00:09:27,290
the database even again I don't know

00:09:24,710 --> 00:09:29,390
even if I don't know how to configure

00:09:27,290 --> 00:09:32,690
replication it's just one common ahead

00:09:29,390 --> 00:09:36,590
and if I don't know how to configure

00:09:32,690 --> 00:09:40,100
replication there is another time one

00:09:36,590 --> 00:09:44,120
common that takes care to contact a

00:09:40,100 --> 00:09:47,480
master server provision I use a

00:09:44,120 --> 00:09:51,050
replication user run all the replication

00:09:47,480 --> 00:09:53,930
checks point the slaves to the master

00:09:51,050 --> 00:09:57,890
set up the replication is start

00:09:53,930 --> 00:10:00,050
downloading their binary logs again I

00:09:57,890 --> 00:10:03,260
don't know my skew Ella want to learn I

00:10:00,050 --> 00:10:05,630
just had one common I get the output all

00:10:03,260 --> 00:10:08,360
the steps that I need to set up

00:10:05,630 --> 00:10:11,870
replication moreover I get even the

00:10:08,360 --> 00:10:14,720
preliminary checks so even if I learnt

00:10:11,870 --> 00:10:16,760
mask UL five years ago and they don't

00:10:14,720 --> 00:10:20,360
know which are the checks required for

00:10:16,760 --> 00:10:27,020
replication of 57 just run this common

00:10:20,360 --> 00:10:29,630
and get the information you need I can

00:10:27,020 --> 00:10:33,020
initialize you slaves we will see it

00:10:29,630 --> 00:10:39,260
after because we are running out of time

00:10:33,020 --> 00:10:42,800
and if I have to set up my fault

00:10:39,260 --> 00:10:46,940
tolerant infrastructure I just run mysql

00:10:42,800 --> 00:10:50,300
fell over common I told him go to the

00:10:46,940 --> 00:10:53,510
master get all the slaves if the master

00:10:50,300 --> 00:10:57,170
fail you take care of configure of

00:10:53,510 --> 00:11:01,910
finding the best slave to be elected as

00:10:57,170 --> 00:11:05,360
a master then do it

00:11:01,910 --> 00:11:08,000
strip of the master elect the new slave

00:11:05,360 --> 00:11:11,330
as a master and make all the slaves

00:11:08,000 --> 00:11:16,370
point to the new master okay it's just

00:11:11,330 --> 00:11:19,790
one comment ahead but try it but before

00:11:16,370 --> 00:11:22,340
using it in production with carefully

00:11:19,790 --> 00:11:25,310
the documentation because there are many

00:11:22,340 --> 00:11:29,540
many parameters it's quite flexible and

00:11:25,310 --> 00:11:33,920
it is very useful so it's starting from

00:11:29,540 --> 00:11:37,610
zero to hero in minutes then the nice

00:11:33,920 --> 00:11:43,280
part the fabric orchestrator download

00:11:37,610 --> 00:11:48,040
the image and just running a for server

00:11:43,280 --> 00:11:48,040
infrastructure is just one command ahead

00:11:48,430 --> 00:11:53,390
fabric is a frame 0 4 managing

00:11:51,220 --> 00:11:56,350
replicating a scaling MySQL

00:11:53,390 --> 00:12:00,220
infrastructure takes a bunch of server

00:11:56,350 --> 00:12:03,260
makes of those server replication group

00:12:00,220 --> 00:12:06,560
configure the replication monitor and

00:12:03,260 --> 00:12:10,070
he'll the infrastructure makes a

00:12:06,560 --> 00:12:12,470
director for the read/write split

00:12:10,070 --> 00:12:15,710
infrastructure so I configure my client

00:12:12,470 --> 00:12:19,060
and that go to fabric get the data of

00:12:15,710 --> 00:12:22,430
the infrastructure from him and then the

00:12:19,060 --> 00:12:26,210
connector knows where is the master were

00:12:22,430 --> 00:12:28,580
the slaves and we can again contact you

00:12:26,210 --> 00:12:33,080
cannot contact the master we will

00:12:28,580 --> 00:12:36,920
contact the slave this is the

00:12:33,080 --> 00:12:39,980
infrastructure layout at the center we

00:12:36,920 --> 00:12:43,100
have the application they ask to the

00:12:39,980 --> 00:12:47,870
fabric node who is the master word

00:12:43,100 --> 00:12:51,200
slaves then contact directly the servers

00:12:47,870 --> 00:12:54,650
that are every group is a bunch of

00:12:51,200 --> 00:13:00,410
server and just contact the server for

00:12:54,650 --> 00:13:04,850
SQL so there is no Latin see the fabric

00:13:00,410 --> 00:13:07,700
is not a proxy you just get contains the

00:13:04,850 --> 00:13:10,970
data of who is the master with the slave

00:13:07,700 --> 00:13:13,120
words lays and of the many groups you

00:13:10,970 --> 00:13:13,120
are

00:13:15,139 --> 00:13:22,980
to set up we have many comments we

00:13:20,089 --> 00:13:27,509
everything starts with fabric we can

00:13:22,980 --> 00:13:29,430
manage group configure the server a

00:13:27,509 --> 00:13:33,089
configure provider we will see it after

00:13:29,430 --> 00:13:35,579
an interesting part of the talk so you

00:13:33,089 --> 00:13:39,149
have many feature you want to install

00:13:35,579 --> 00:13:43,019
fabric ok set up the listing important

00:13:39,149 --> 00:13:46,860
fabric CFG set up the credential to

00:13:43,019 --> 00:13:51,029
contact the server and just configure

00:13:46,860 --> 00:13:53,509
everything man up and Men start ok

00:13:51,029 --> 00:13:57,209
fabric is really you have a server

00:13:53,509 --> 00:14:01,829
capable of providing you a

00:13:57,209 --> 00:14:04,230
fault-tolerant infrastructure ok you set

00:14:01,829 --> 00:14:07,230
up the server and you want to create

00:14:04,230 --> 00:14:10,470
many groups let's start with one groups

00:14:07,230 --> 00:14:13,110
one high availability groups you just

00:14:10,470 --> 00:14:18,929
create the group and add for example

00:14:13,110 --> 00:14:22,199
just three server then fabric knows the

00:14:18,929 --> 00:14:26,670
server are in the same group when you

00:14:22,199 --> 00:14:30,360
promote a group one of those server is

00:14:26,670 --> 00:14:35,699
chosen as a master you can even provide

00:14:30,360 --> 00:14:38,550
a server ID once you do it this is the

00:14:35,699 --> 00:14:41,089
master the other of the slave fabric

00:14:38,550 --> 00:14:45,089
provides in initializing the slaves

00:14:41,089 --> 00:14:48,059
replicating everything and then we look

00:14:45,089 --> 00:14:51,379
up you can just look at the addresses

00:14:48,059 --> 00:14:54,120
there is one primary server and two

00:14:51,379 --> 00:15:02,009
secondary service you can even set a

00:14:54,120 --> 00:15:05,490
weight on the servers so if you want the

00:15:02,009 --> 00:15:09,779
most of the queries go to the first one

00:15:05,490 --> 00:15:11,879
you set an i oh wait or if you want to

00:15:09,779 --> 00:15:14,730
test the five dot seven you had one

00:15:11,879 --> 00:15:18,389
server with five dot seven you give it a

00:15:14,730 --> 00:15:22,700
lower weight so you don't disrupt your

00:15:18,389 --> 00:15:26,480
infrastructure is

00:15:22,700 --> 00:15:30,290
you activate he starts monitoring for

00:15:26,480 --> 00:15:32,840
full for fault then we stopped one

00:15:30,290 --> 00:15:38,450
server with mysqladmin shutdown and

00:15:32,840 --> 00:15:41,300
fabric magically switch it off the

00:15:38,450 --> 00:15:44,150
master from one of the slaves now we

00:15:41,300 --> 00:15:48,100
have a faulty server a primary server

00:15:44,150 --> 00:15:51,290
and the secondary server it's done

00:15:48,100 --> 00:15:54,110
automatically I just type the comment

00:15:51,290 --> 00:16:00,170
you see on those lives on the lights you

00:15:54,110 --> 00:16:03,260
can see it in the docker image to

00:16:00,170 --> 00:16:06,350
connect to fabric yes specify the fabric

00:16:03,260 --> 00:16:10,730
cost specified database and SQL

00:16:06,350 --> 00:16:15,610
potential if you set with right fabric

00:16:10,730 --> 00:16:19,070
goes to the master if you said read-only

00:16:15,610 --> 00:16:23,990
fabric goes to the lake if there is a

00:16:19,070 --> 00:16:29,060
fault fabric points in READ&WRITE to the

00:16:23,990 --> 00:16:34,490
new master everything from his own to

00:16:29,060 --> 00:16:37,400
provision a new oops to provision a new

00:16:34,490 --> 00:16:40,070
slave you can just clone the group on a

00:16:37,400 --> 00:16:43,430
new target so you had one server and

00:16:40,070 --> 00:16:45,500
then you clone the group on the server

00:16:43,430 --> 00:16:51,290
fabric knows with the master he takes

00:16:45,500 --> 00:16:53,600
care it in the cloud fabric and

00:16:51,290 --> 00:16:56,690
provision new machine we open stock API

00:16:53,600 --> 00:16:59,630
I didn't want to provision your machine

00:16:56,690 --> 00:17:03,339
i wanted to provision new container with

00:16:59,630 --> 00:17:12,949
Daka so I implemented this interface

00:17:03,339 --> 00:17:15,170
using a darker client now if i add a

00:17:12,949 --> 00:17:18,589
register a new provider i just reduced

00:17:15,170 --> 00:17:22,040
our provider of dhaka kind you see

00:17:18,589 --> 00:17:28,130
provided type equals dhaka then when i

00:17:22,040 --> 00:17:31,880
create a new container from my daugher

00:17:28,130 --> 00:17:35,880
provider I just tell him a new image

00:17:31,880 --> 00:17:39,390
instead of a OpenStack template

00:17:35,880 --> 00:17:42,030
and any provision a new machine a new

00:17:39,390 --> 00:17:48,300
container new database then I can just

00:17:42,030 --> 00:17:50,100
add these database to I got the

00:17:48,300 --> 00:17:53,550
information of the server from server

00:17:50,100 --> 00:17:59,060
list and I can just start this one to my

00:17:53,550 --> 00:17:59,060
I availability group and well my

00:18:01,190 --> 00:18:09,660
solution is scaling so we have only five

00:18:05,880 --> 00:18:11,520
minutes by I'm done we can see if you

00:18:09,660 --> 00:18:13,860
are interested you can contact me I will

00:18:11,520 --> 00:18:20,520
see the content out of the missing

00:18:13,860 --> 00:18:24,060
slides one thing after that is that a

00:18:20,520 --> 00:18:27,270
basic interface supports machine

00:18:24,060 --> 00:18:30,120
snapshot be another client docket

00:18:27,270 --> 00:18:35,220
volumes doesn't support the snapshot but

00:18:30,120 --> 00:18:38,630
something is moving I started to tweak

00:18:35,220 --> 00:18:42,180
about it if you are interested in these

00:18:38,630 --> 00:18:44,910
let me know we can find try to find a

00:18:42,180 --> 00:18:49,920
dog a solution that is good for me and

00:18:44,910 --> 00:18:52,890
for you so replication is easier with

00:18:49,920 --> 00:18:56,660
fabric and mass ql you can clone server

00:18:52,890 --> 00:19:00,150
file / is just one come on the head

00:18:56,660 --> 00:19:02,520
don't we just followed mass masters if

00:19:00,150 --> 00:19:06,210
you have a master server that is broken

00:19:02,520 --> 00:19:10,440
just take it and dump it don't reuse it

00:19:06,210 --> 00:19:15,030
please try fabric with darker and play

00:19:10,440 --> 00:19:18,720
with dogged volumes okay I've been hired

00:19:15,030 --> 00:19:23,060
by the time is a tyrant that's all folks

00:19:18,720 --> 00:19:23,060
thank you very much for your attention

00:19:26,080 --> 00:19:30,950
so we do have time for questions so if

00:19:29,750 --> 00:19:32,980
you have questions you surprised the run

00:19:30,950 --> 00:19:38,260
and get there the microphone over there

00:19:32,980 --> 00:19:38,260
anyone right okay many questions

00:20:11,580 --> 00:20:20,169
okay the gas how can you make I

00:20:16,049 --> 00:20:25,000
availability on a fabric server well you

00:20:20,169 --> 00:20:27,850
can implement a master-slave replication

00:20:25,000 --> 00:20:33,610
of the fabric database and you can have

00:20:27,850 --> 00:20:36,720
a cluster to implement the phone to

00:20:33,610 --> 00:20:41,679
create a resilient infrastructure on

00:20:36,720 --> 00:20:46,510
fabric anyway even if your fabric server

00:20:41,679 --> 00:20:50,260
dies mask you'll serve were using fabric

00:20:46,510 --> 00:20:52,029
connector has all the information to

00:20:50,260 --> 00:20:55,149
connect the server because when they

00:20:52,029 --> 00:20:57,279
first connect to fabric fabric gives

00:20:55,149 --> 00:21:00,549
them all the information of the

00:20:57,279 --> 00:21:04,899
infrastructure so they know who is the

00:21:00,549 --> 00:21:08,770
master and world's llave if the master

00:21:04,899 --> 00:21:12,610
server fails you should have a cluster

00:21:08,770 --> 00:21:16,450
that checks if must if fabric is up and

00:21:12,610 --> 00:21:20,980
if it's down should start another fabric

00:21:16,450 --> 00:21:24,309
instance on another machine it is very

00:21:20,980 --> 00:21:28,149
easy because fabric is a simple Python

00:21:24,309 --> 00:21:31,360
application so once you have a

00:21:28,149 --> 00:21:34,929
replicated database you just have to run

00:21:31,360 --> 00:21:40,330
in one second another fabric is tons

00:21:34,929 --> 00:21:48,250
using the replicated data base other

00:21:40,330 --> 00:21:50,950
questions yes a simple question do you

00:21:48,250 --> 00:21:55,710
know if the replication is supported in

00:21:50,950 --> 00:22:03,370
mario TBH replication I think it is

00:21:55,710 --> 00:22:09,120
supported in murrieta be but actually

00:22:03,370 --> 00:22:13,720
these kind of setup is about not only

00:22:09,120 --> 00:22:16,570
replication but to scaling easily

00:22:13,720 --> 00:22:19,809
because you can have replication with

00:22:16,570 --> 00:22:22,820
many databases the advantage of those

00:22:19,809 --> 00:22:26,240
tools is that using a

00:22:22,820 --> 00:22:31,509
simple setup gives you the ability to

00:22:26,240 --> 00:22:38,269
have many groups of databases to manage

00:22:31,509 --> 00:22:42,470
10 20 100 server easily because once you

00:22:38,269 --> 00:22:44,870
have created the group you have done you

00:22:42,470 --> 00:22:49,090
can even provision your machine if there

00:22:44,870 --> 00:22:54,110
were nothing stuck implementation you

00:22:49,090 --> 00:22:57,620
note that one of the group as to server

00:22:54,110 --> 00:23:01,700
lost you can just provision to machine

00:22:57,620 --> 00:23:05,330
clone the group to those two machine and

00:23:01,700 --> 00:23:07,730
add them so that is not only about

00:23:05,330 --> 00:23:11,389
replication it's about orchestration

00:23:07,730 --> 00:23:16,940
okay and you get the python code so you

00:23:11,389 --> 00:23:18,830
can take the code it's GPL you can take

00:23:16,940 --> 00:23:23,330
the code and you can mess it up even

00:23:18,830 --> 00:23:27,700
with utilities you can mesh utility so

00:23:23,330 --> 00:23:32,149
you need something using disk usage and

00:23:27,700 --> 00:23:34,789
audit log parsing you talk those two and

00:23:32,149 --> 00:23:39,100
took the function imported module and

00:23:34,789 --> 00:23:42,259
mesh up and create your your own

00:23:39,100 --> 00:23:45,710
application form I think the real

00:23:42,259 --> 00:23:51,740
advantage of using Python of choosing

00:23:45,710 --> 00:23:54,259
python is that it's really easy to do

00:23:51,740 --> 00:23:57,230
whatever you want with those code so

00:23:54,259 --> 00:24:03,440
don't think only about replication think

00:23:57,230 --> 00:24:06,559
big think I have a mini Lego puzzle you

00:24:03,440 --> 00:24:10,730
can take all these Lego blocks and build

00:24:06,559 --> 00:24:13,330
whatever you need we should question

00:24:10,730 --> 00:24:13,330
with you

00:24:17,450 --> 00:24:24,149
are you completely screwed if you're

00:24:19,980 --> 00:24:28,529
stuck on my sequel five dot five or no

00:24:24,149 --> 00:24:31,919
because muscular hundred six introduces

00:24:28,529 --> 00:24:35,850
the global transaction ID this global

00:24:31,919 --> 00:24:40,009
transaction ID gives the ability to

00:24:35,850 --> 00:24:44,759
easily find the most updated slave

00:24:40,009 --> 00:24:49,019
because I can just check which are the

00:24:44,759 --> 00:24:51,600
slave with many transaction applied the

00:24:49,019 --> 00:24:53,519
problem with the fact that five is that

00:24:51,600 --> 00:24:59,039
the replication is based on the position

00:24:53,519 --> 00:25:02,429
of the log file in the binary logs while

00:24:59,039 --> 00:25:05,730
in having advanced actuality you don't

00:25:02,429 --> 00:25:08,340
need to specify a position you just tell

00:25:05,730 --> 00:25:12,059
the master I have got those blocks of

00:25:08,340 --> 00:25:16,230
transaction give me the ones that I

00:25:12,059 --> 00:25:20,399
don't have whatever the position is so I

00:25:16,230 --> 00:25:25,769
can get some parts before and some parts

00:25:20,399 --> 00:25:29,070
in another side I strongly suggest to me

00:25:25,769 --> 00:25:31,980
great as soon as possible be great

00:25:29,070 --> 00:25:36,179
nicely so make your test not every

00:25:31,980 --> 00:25:38,999
application is may play nice with five

00:25:36,179 --> 00:25:42,269
dot six but look at the future look at

00:25:38,999 --> 00:25:45,210
five dot six look at five dot seven try

00:25:42,269 --> 00:25:48,840
even if it's not stable general debility

00:25:45,210 --> 00:25:51,149
five dot seven starts start to try

00:25:48,840 --> 00:25:54,539
because there are many prominent on

00:25:51,149 --> 00:25:57,559
performance and storage engine those are

00:25:54,539 --> 00:26:00,299
read change log of the five dot seven

00:25:57,559 --> 00:26:06,499
there are important stuff for people

00:26:00,299 --> 00:26:09,779
take caring of production of consistent

00:26:06,499 --> 00:26:13,919
consistency and strong okay I'm out of

00:26:09,779 --> 00:26:17,429
time we can talk at the cafeteria

00:26:13,919 --> 00:26:17,429

YouTube URL: https://www.youtube.com/watch?v=p4mCCNgyMWY


