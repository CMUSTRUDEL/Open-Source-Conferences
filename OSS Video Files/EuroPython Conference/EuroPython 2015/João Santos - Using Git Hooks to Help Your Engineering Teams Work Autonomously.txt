Title: João Santos - Using Git Hooks to Help Your Engineering Teams Work Autonomously
Publication date: 2015-08-08
Playlist: EuroPython 2015
Description: 
	João Santos - Using Git Hooks to Help Your Engineering Teams Work Autonomously
[EuroPython 2015]
[21 July 2015]
[Bilbao, Euskadi, Spain]

In this talk, Software Engineer Joao Santos will describe how the
engineering team at Zalando has been migrating to local Git hooks to
ensure that engineers can work autonomously and flexibly. Zalando---
Europe’s leading online fashion platform for men, women and children--
began shifting from SVN to Git in late 2013. Santos and his colleagues
used Python to create a Git update hook that enabled the team to
reject changes to a branch while still allowing changes to other
branches. He’ll explain why his team chose Python for this job instead
of a bash script, point out mistakes made during the process (and
solutions his team used to fix them), and the benefits generated by
this migration. He’ll also talk about turnstile: a set of open-source,
configurable, optional local Git hooks, created by the Zalando team,
that enables engineers to abide by internal rules for committing code
while following their own coding style and workflow preferences.
Captions: 
	00:00:00,000 --> 00:00:05,160
so first to present myself I'm John sent

00:00:02,460 --> 00:00:06,600
I'm a software engineer at zalando as

00:00:05,160 --> 00:00:09,750
part of continuous delivery and

00:00:06,600 --> 00:00:11,550
deployment team and today I'm going to

00:00:09,750 --> 00:00:13,469
present the path we took at zalando from

00:00:11,550 --> 00:00:15,509
the dark ages of subversion to the

00:00:13,469 --> 00:00:20,340
enlightened age of autonomous work with

00:00:15,509 --> 00:00:23,760
jeet so some quick facts about solando

00:00:20,340 --> 00:00:27,390
so you understand the context of my work

00:00:23,760 --> 00:00:31,349
where we are we have our headquarters in

00:00:27,390 --> 00:00:33,540
Berlin and we have also other offices in

00:00:31,349 --> 00:00:36,840
other places like Devlin helsinki

00:00:33,540 --> 00:00:40,260
Dortmund effort we have Martin 700

00:00:36,840 --> 00:00:43,829
actually nowadays almost 1,000 engineers

00:00:40,260 --> 00:00:46,320
and we do lots of every almost

00:00:43,829 --> 00:00:51,750
everything we do is Danny now so we do

00:00:46,320 --> 00:00:55,199
lots of development ok so the first

00:00:51,750 --> 00:00:58,140
question when talking about detox is why

00:00:55,199 --> 00:01:00,149
do we need detoxing or subversion hooks

00:00:58,140 --> 00:01:02,699
or other kinds of commits ook in the

00:01:00,149 --> 00:01:05,760
first place the answer to raise is to

00:01:02,699 --> 00:01:08,540
enforce rules that this raises the

00:01:05,760 --> 00:01:11,310
second question why do we need rules any

00:01:08,540 --> 00:01:13,020
large group organization needs rules

00:01:11,310 --> 00:01:15,540
when some rules are internal to the

00:01:13,020 --> 00:01:18,060
group's and our external and they are

00:01:15,540 --> 00:01:19,740
very important to achieve an efficient

00:01:18,060 --> 00:01:21,780
workflow to ensure quality and

00:01:19,740 --> 00:01:24,990
transparency to and 12 stakeholders and

00:01:21,780 --> 00:01:29,729
in case of solano stakeholders go from

00:01:24,990 --> 00:01:32,759
the colleague at a track next act death

00:01:29,729 --> 00:01:35,909
desk to the costumer that as rested as

00:01:32,759 --> 00:01:38,700
his credit card to investor who spent

00:01:35,909 --> 00:01:45,960
lots of his money and he trusted and

00:01:38,700 --> 00:01:47,909
believed in us second question is how

00:01:45,960 --> 00:01:50,479
enforce rules not our rules are

00:01:47,909 --> 00:01:54,000
enforcing detox same rules are enforced

00:01:50,479 --> 00:01:58,140
before deployments and rules are only

00:01:54,000 --> 00:02:00,719
monitored are not enforced so you have

00:01:58,140 --> 00:02:03,329
to look at your work flow and see what

00:02:00,719 --> 00:02:07,220
rules can be enforced up we re or with

00:02:03,329 --> 00:02:08,990
checks and what rules can be checked put

00:02:07,220 --> 00:02:12,560
after the

00:02:08,990 --> 00:02:14,510
you have moved on your workflow it's

00:02:12,560 --> 00:02:17,330
vital to keep a proper balance between

00:02:14,510 --> 00:02:19,550
two types of enforcement's because if

00:02:17,330 --> 00:02:22,010
you have too many blockers on your

00:02:19,550 --> 00:02:25,190
workflow you prevent your developers

00:02:22,010 --> 00:02:27,680
forum or from being productive but if

00:02:25,190 --> 00:02:30,530
you have too few checks and blockers you

00:02:27,680 --> 00:02:34,060
risk that bad software goes life and you

00:02:30,530 --> 00:02:38,210
break trust all stakeholders that in you

00:02:34,060 --> 00:02:40,280
so now starting point dark ages of

00:02:38,210 --> 00:02:42,350
subversion this is was the place where

00:02:40,280 --> 00:02:47,660
you we were when i arrived at so I know

00:02:42,350 --> 00:02:51,250
two years ago we had one bash script

00:02:47,660 --> 00:02:55,880
with some basic checks written

00:02:51,250 --> 00:02:58,070
pre-commit hook then we were growing as

00:02:55,880 --> 00:03:01,700
a company and we needed more rules

00:02:58,070 --> 00:03:03,680
because because it was not possible for

00:03:01,700 --> 00:03:07,460
someone to keep track of everything that

00:03:03,680 --> 00:03:09,890
was happening so and it was not possible

00:03:07,460 --> 00:03:12,440
to keep a bash script anymore it was not

00:03:09,890 --> 00:03:15,920
efficient it was not maintainable so we

00:03:12,440 --> 00:03:21,410
parted to get to the subversion Comey

00:03:15,920 --> 00:03:24,890
took from Bosch to PI turn around

00:03:21,410 --> 00:03:27,620
december two thousand two thousand four

00:03:24,890 --> 00:03:30,440
thousand thirteen we start moving from

00:03:27,620 --> 00:03:33,110
get the subversion was not good enough

00:03:30,440 --> 00:03:37,340
for eyes anymore and we had to do

00:03:33,110 --> 00:03:39,410
something so we started moving to get we

00:03:37,340 --> 00:03:44,750
still had same rules in place as before

00:03:39,410 --> 00:03:46,580
and who we knew you would still keep a

00:03:44,750 --> 00:03:47,960
subversion from sent for some time

00:03:46,580 --> 00:03:50,420
because you already had lots of teams

00:03:47,960 --> 00:03:53,330
and some teams wanted to move faster and

00:03:50,420 --> 00:03:56,600
daughter slower and not everyone wanted

00:03:53,330 --> 00:03:58,300
to move to it so we had to convince

00:03:56,600 --> 00:04:01,310
everyone and we decided to draw

00:03:58,300 --> 00:04:03,350
migration in waves so our first is he

00:04:01,310 --> 00:04:06,920
the first decision we took was to adapt

00:04:03,350 --> 00:04:12,590
the svn come it took to work on both svn

00:04:06,920 --> 00:04:15,560
and get so implemented he took is a

00:04:12,590 --> 00:04:18,470
parisi book because it it's invoked that

00:04:15,560 --> 00:04:21,320
at the same point on workflow as commit

00:04:18,470 --> 00:04:22,790
to a concept version this is when user

00:04:21,320 --> 00:04:25,340
sense changes to

00:04:22,790 --> 00:04:27,680
mood server and because it allowed us to

00:04:25,340 --> 00:04:29,690
reject the reference or branch without

00:04:27,680 --> 00:04:33,050
rejecting foot push the other

00:04:29,690 --> 00:04:36,560
alternative would get an update took but

00:04:33,050 --> 00:04:39,440
that one if you return an error code it

00:04:36,560 --> 00:04:45,830
will block to full push even if most of

00:04:39,440 --> 00:04:48,530
it is following the roof doing this at

00:04:45,830 --> 00:04:52,010
some problems this approach that some

00:04:48,530 --> 00:04:54,980
problems so the first the first problem

00:04:52,010 --> 00:04:56,840
the first problem this plan was that kit

00:04:54,980 --> 00:04:59,240
is not subversion there are different

00:04:56,840 --> 00:05:01,730
they are different in fundamental ways

00:04:59,240 --> 00:05:06,620
entei and ranked support boat would mean

00:05:01,730 --> 00:05:08,780
supper support for both of them then the

00:05:06,620 --> 00:05:10,640
other problem is that in distributed kit

00:05:08,780 --> 00:05:12,680
is more flexible than subversion which

00:05:10,640 --> 00:05:14,990
means that people don't use gate same

00:05:12,680 --> 00:05:17,930
way to use subversion and tell you don't

00:05:14,990 --> 00:05:21,890
use gate same in the same way that other

00:05:17,930 --> 00:05:23,720
people use kit and the first seems that

00:05:21,890 --> 00:05:25,520
even first seems that the line owed to

00:05:23,720 --> 00:05:27,800
migrate to get start experimenting

00:05:25,520 --> 00:05:29,870
different workflows and this was a good

00:05:27,800 --> 00:05:31,460
thing because they were very different

00:05:29,870 --> 00:05:34,970
projects and different projects have

00:05:31,460 --> 00:05:37,190
very different requirements so it makes

00:05:34,970 --> 00:05:39,440
sense for them to have a different set

00:05:37,190 --> 00:05:42,440
of best practices and slightly different

00:05:39,440 --> 00:05:44,950
rules and different pricing strategy but

00:05:42,440 --> 00:05:47,420
this also force us to rethink how we

00:05:44,950 --> 00:05:51,440
Schecter rules and how implement rules

00:05:47,420 --> 00:05:55,610
and we had to rethink to get looks so we

00:05:51,440 --> 00:05:58,790
moved to plan B where before we had 11

00:05:55,610 --> 00:06:00,920
common look for gate and subversion now

00:05:58,790 --> 00:06:04,670
we we decided to have two different

00:06:00,920 --> 00:06:09,920
hooks in practice this met this meant we

00:06:04,670 --> 00:06:12,320
worked to walk into the subversion come

00:06:09,920 --> 00:06:14,030
it took was abrogated so no more change

00:06:12,320 --> 00:06:15,770
is there because you don't want it to

00:06:14,030 --> 00:06:18,890
really support the subversion anymore

00:06:15,770 --> 00:06:23,330
and we continue to work on to get Parisi

00:06:18,890 --> 00:06:25,790
book because different teams wanted to

00:06:23,330 --> 00:06:28,810
use different workflows we moved away

00:06:25,790 --> 00:06:32,090
from to one-size-fits-all strategy and

00:06:28,810 --> 00:06:36,590
allowed teams specify set rules for for

00:06:32,090 --> 00:06:38,720
themselves so this is why who

00:06:36,590 --> 00:06:41,360
a allow teams to set rules for

00:06:38,720 --> 00:06:44,000
themselves we have a configuration

00:06:41,360 --> 00:06:46,420
format based on llamo where stash

00:06:44,000 --> 00:06:49,940
projects and repositories could mesh

00:06:46,420 --> 00:06:54,530
several rule sets by name this is

00:06:49,940 --> 00:06:57,590
similar to CSS so for example you can

00:06:54,530 --> 00:07:00,230
see there that the one team could have

00:06:57,590 --> 00:07:02,750
one general rule for themselves for

00:07:00,230 --> 00:07:05,720
their project but but for a specific

00:07:02,750 --> 00:07:10,310
repository take would change part of the

00:07:05,720 --> 00:07:12,320
rules and not to all set and a second

00:07:10,310 --> 00:07:13,760
team could have a completely different

00:07:12,320 --> 00:07:20,480
rule set because they have different

00:07:13,760 --> 00:07:23,270
needs okay the problem with T second

00:07:20,480 --> 00:07:26,360
approach and this was a reflection with

00:07:23,270 --> 00:07:29,120
adapter using two discs it looks for one

00:07:26,360 --> 00:07:31,070
year was that we had a centralized

00:07:29,120 --> 00:07:33,140
configuration which became a bottom

00:07:31,070 --> 00:07:35,600
bottleneck because it could only be

00:07:33,140 --> 00:07:39,380
changed by a small number of people and

00:07:35,600 --> 00:07:43,520
sometimes we were on vacation and it was

00:07:39,380 --> 00:07:46,700
really bad other more technical problem

00:07:43,520 --> 00:07:51,140
we had is that we were trying to check

00:07:46,700 --> 00:07:54,050
all the commits on a push because some

00:07:51,140 --> 00:07:56,570
rules apply to every single commit for

00:07:54,050 --> 00:07:58,190
example we check that we one of the

00:07:56,570 --> 00:08:01,280
rules we added oh yeah that's all I know

00:07:58,190 --> 00:08:03,260
is that every commit message has to have

00:08:01,280 --> 00:08:06,380
a ticket and for this we have to go

00:08:03,260 --> 00:08:10,670
through all comets and this was

00:08:06,380 --> 00:08:14,840
problematic for a number of reasons for

00:08:10,670 --> 00:08:17,330
example get these stories not linear so

00:08:14,840 --> 00:08:18,860
if the user marriages or a basis for my

00:08:17,330 --> 00:08:21,710
branch and we try to check all the

00:08:18,860 --> 00:08:23,830
messages in commit range for ticket ID

00:08:21,710 --> 00:08:26,900
and see if it matches to a branch

00:08:23,830 --> 00:08:29,030
branches that came from committed came

00:08:26,900 --> 00:08:32,960
from other branches by the rebates or

00:08:29,030 --> 00:08:36,440
the merge would fail to check in the end

00:08:32,960 --> 00:08:39,200
we tried to several solutions some

00:08:36,440 --> 00:08:42,380
worked way better than others in the end

00:08:39,200 --> 00:08:44,840
to the solution for this was filtering

00:08:42,380 --> 00:08:46,400
out commits that were already in a

00:08:44,840 --> 00:08:49,529
branch because this meant they were

00:08:46,400 --> 00:08:52,579
already checked before and didn't belong

00:08:49,529 --> 00:08:57,240
were not originated on this branch

00:08:52,579 --> 00:09:00,329
second problem we had is that when you

00:08:57,240 --> 00:09:03,920
merge to or from a long live branch same

00:09:00,329 --> 00:09:07,470
teams for had some very long-lived

00:09:03,920 --> 00:09:11,339
projects and they had branches for it

00:09:07,470 --> 00:09:15,029
and sometimes they differed from master

00:09:11,339 --> 00:09:17,220
for root 3 months and when they merged

00:09:15,029 --> 00:09:19,889
from master or to master or when they

00:09:17,220 --> 00:09:24,120
realized they had literally hundreds of

00:09:19,889 --> 00:09:27,029
commits to check because of some of our

00:09:24,120 --> 00:09:29,249
checks took sometimes we have pushes

00:09:27,029 --> 00:09:31,740
that took more than half an hour to

00:09:29,249 --> 00:09:38,610
check and this was not a good experience

00:09:31,740 --> 00:09:41,160
for our developers related to this and

00:09:38,610 --> 00:09:43,499
one of the slowest checks we had is a

00:09:41,160 --> 00:09:47,399
shaking code style especially for java

00:09:43,499 --> 00:09:49,350
code because we used you we use jalopy

00:09:47,399 --> 00:09:52,949
to validate code style and it runs on

00:09:49,350 --> 00:09:55,529
jvm and a tee architecture of our code

00:09:52,949 --> 00:09:58,529
validator meant we had to spawn one JVM

00:09:55,529 --> 00:10:02,309
forever changed files so if someone

00:09:58,529 --> 00:10:05,459
pushed 200 changed files we would spawn

00:10:02,309 --> 00:10:08,279
up 200 JVMs and other people who are

00:10:05,459 --> 00:10:11,100
pushing at the same time and it was

00:10:08,279 --> 00:10:13,740
going constantly freezing and slowing

00:10:11,100 --> 00:10:16,470
down or server we were able to mitigate

00:10:13,740 --> 00:10:18,509
this problem by using milk and the room

00:10:16,470 --> 00:10:22,769
that is a kind of server that keeps a

00:10:18,509 --> 00:10:24,689
JVM I life and you can run JVM programs

00:10:22,769 --> 00:10:28,259
there and we could arrange a loopy there

00:10:24,689 --> 00:10:31,470
but we had to do some workarounds to run

00:10:28,259 --> 00:10:34,379
yellow paper in parallel and we still

00:10:31,470 --> 00:10:36,179
had some performance issues went there

00:10:34,379 --> 00:10:41,399
for some reason turn were more push East

00:10:36,179 --> 00:10:44,660
and usual the last problem of this of

00:10:41,399 --> 00:10:47,279
this is that the system was inflexible

00:10:44,660 --> 00:10:49,889
sometimes people have very good reasons

00:10:47,279 --> 00:10:53,370
to ignore rules certain sometimes they

00:10:49,889 --> 00:10:55,949
pushed sentence to not that they didn't

00:10:53,370 --> 00:10:58,529
want to push and they want to do a first

00:10:55,949 --> 00:11:02,519
push and we didn't allow that sometimes

00:10:58,529 --> 00:11:03,360
they sometimes some push was a septate

00:11:02,519 --> 00:11:05,100
by mistake

00:11:03,360 --> 00:11:08,370
and once a bag and it has to be removed

00:11:05,100 --> 00:11:10,680
because it should not be there sometimes

00:11:08,370 --> 00:11:13,980
there's a bag and we reject it something

00:11:10,680 --> 00:11:16,800
that we should have accepted and because

00:11:13,980 --> 00:11:19,110
this was on our server and people's

00:11:16,800 --> 00:11:23,490
Interfax a server that they had no way

00:11:19,110 --> 00:11:25,560
to go around this the other problem the

00:11:23,490 --> 00:11:27,930
other way you we were in flexible is

00:11:25,560 --> 00:11:31,410
that because it's a remote key talk and

00:11:27,930 --> 00:11:34,019
it's living on server we only supported

00:11:31,410 --> 00:11:37,170
our internal get server for example you

00:11:34,019 --> 00:11:42,089
could not use them or get hook for our

00:11:37,170 --> 00:11:43,620
projects on github com and so our open

00:11:42,089 --> 00:11:47,839
source projects were completely

00:11:43,620 --> 00:11:50,940
unsupported in the end we I could

00:11:47,839 --> 00:11:53,430
summarize all these problems that as we

00:11:50,940 --> 00:11:55,800
try to centralize get well get is

00:11:53,430 --> 00:11:58,050
distributed we still saw our source

00:11:55,800 --> 00:12:00,240
control management system as centralized

00:11:58,050 --> 00:12:03,839
because we came from subversion and we

00:12:00,240 --> 00:12:05,850
were still thinking like subversion but

00:12:03,839 --> 00:12:09,769
it was clear that we would have to

00:12:05,850 --> 00:12:12,329
rethink our approach this process of

00:12:09,769 --> 00:12:14,490
thinking about the hooks coincided with

00:12:12,329 --> 00:12:16,940
the usage this is Lando as part of

00:12:14,490 --> 00:12:19,410
something we call radical agility

00:12:16,940 --> 00:12:21,420
zalando was getting rid of all the air

00:12:19,410 --> 00:12:24,300
keys and giving teams more autonomy and

00:12:21,420 --> 00:12:27,269
one of the new motors was autonomy

00:12:24,300 --> 00:12:29,970
instead of control and this presented a

00:12:27,269 --> 00:12:33,199
clear part for us and in the end was the

00:12:29,970 --> 00:12:36,510
solution that we are still implementing

00:12:33,199 --> 00:12:40,709
so we decided to move away from remote

00:12:36,510 --> 00:12:42,690
key talks to do a set of local he took

00:12:40,709 --> 00:12:46,050
from remote key talks to a set of local

00:12:42,690 --> 00:12:49,380
he talks when advantage of this is that

00:12:46,050 --> 00:12:51,420
he took see one commits at a time so we

00:12:49,380 --> 00:12:54,360
avoided the issues where we had a set a

00:12:51,420 --> 00:12:57,630
list of comets check and we didn't know

00:12:54,360 --> 00:13:00,440
what was what came from a merge or ebay

00:12:57,630 --> 00:13:03,269
so and what was graded in the branch and

00:13:00,440 --> 00:13:04,829
it's better adjusted to the distributed

00:13:03,269 --> 00:13:07,230
nature of kit because they are receive

00:13:04,829 --> 00:13:10,709
it by themselves and people run it on

00:13:07,230 --> 00:13:13,110
Terra local machines we decided that

00:13:10,709 --> 00:13:14,810
they should be optional because we want

00:13:13,110 --> 00:13:17,029
to test people

00:13:14,810 --> 00:13:19,040
this also means that keep books are no

00:13:17,029 --> 00:13:21,800
longer responsible for enforcing the

00:13:19,040 --> 00:13:27,590
rules instead we are creating mechanisms

00:13:21,800 --> 00:13:29,870
to ensure a level of development follows

00:13:27,590 --> 00:13:32,060
the rules before the code goes live but

00:13:29,870 --> 00:13:36,080
we don't lock anyone from pushing

00:13:32,060 --> 00:13:37,850
anything right now we did this because

00:13:36,080 --> 00:13:40,430
we believe he took should be seen as a

00:13:37,850 --> 00:13:42,950
tool 12 autonomous developers and and

00:13:40,430 --> 00:13:46,760
not as a barrier that makes their work

00:13:42,950 --> 00:13:49,490
harder we decided to make them

00:13:46,760 --> 00:13:51,380
extensible because as I said before when

00:13:49,490 --> 00:13:55,070
size doesn't fit all different teams

00:13:51,380 --> 00:13:57,320
have different needs and some sometimes

00:13:55,070 --> 00:14:00,110
we only have a small group of developers

00:13:57,320 --> 00:14:01,880
working on this model as full time and

00:14:00,110 --> 00:14:03,770
that sometimes people have others it

00:14:01,880 --> 00:14:06,860
ideas and they can implement new stuff

00:14:03,770 --> 00:14:09,680
for themselves sometimes they they don't

00:14:06,860 --> 00:14:11,180
pawn porn or four checks oh and if they

00:14:09,680 --> 00:14:13,940
don't want to install the dependencies

00:14:11,180 --> 00:14:16,460
of our checks so by being extensible

00:14:13,940 --> 00:14:19,460
they can opt out after those

00:14:16,460 --> 00:14:21,770
dependencies and we decided to make it

00:14:19,460 --> 00:14:23,390
open source because by only being and

00:14:21,770 --> 00:14:25,640
keeping open source equals to fully

00:14:23,390 --> 00:14:27,800
support autonomous teams and these also

00:14:25,640 --> 00:14:30,050
allowed us to support our teams that

00:14:27,800 --> 00:14:34,610
want to open source their code and

00:14:30,050 --> 00:14:37,040
tastes also include my team so are our

00:14:34,610 --> 00:14:41,000
new set of books that we call turnstile

00:14:37,040 --> 00:14:46,370
are available on get on github and pi PI

00:14:41,000 --> 00:14:48,170
so everyone is free to use them so if

00:14:46,370 --> 00:14:49,640
you want to install it on your machine

00:14:48,170 --> 00:14:52,760
you can just use people install

00:14:49,640 --> 00:14:56,510
turnstile car this will just insult card

00:14:52,760 --> 00:14:59,990
without any of any of any of our

00:14:56,510 --> 00:15:05,300
extensions we also have some extensions

00:14:59,990 --> 00:15:07,580
on the lentils ki Tov account so and now

00:15:05,300 --> 00:15:10,250
you want to use it on your repository

00:15:07,580 --> 00:15:13,580
what you have to use well first step

00:15:10,250 --> 00:15:16,010
this is as a turnstile y ml file in the

00:15:13,580 --> 00:15:18,140
root of the repository if you used

00:15:16,010 --> 00:15:21,110
something like travis CI a-- or

00:15:18,140 --> 00:15:23,600
something similar it's simpler the same

00:15:21,110 --> 00:15:25,480
process you just add it add file to your

00:15:23,600 --> 00:15:28,570
repository

00:15:25,480 --> 00:15:32,440
and it looks something like this you

00:15:28,570 --> 00:15:34,480
have a list of checks you want to use so

00:15:32,440 --> 00:15:36,459
you just lame them and you can give

00:15:34,480 --> 00:15:39,910
options too low all checks that they

00:15:36,459 --> 00:15:41,980
support by themselves and every check if

00:15:39,910 --> 00:15:44,680
you even if you are implementing your

00:15:41,980 --> 00:15:48,970
own check as an extension you can read

00:15:44,680 --> 00:15:54,370
this file and you have access to it so

00:15:48,970 --> 00:15:58,630
and because the way Localytics work you

00:15:54,370 --> 00:16:00,790
need to seem link talks on your door kid

00:15:58,630 --> 00:16:03,850
folder inside the repository and to make

00:16:00,790 --> 00:16:05,680
this easy turnstile supports a sub

00:16:03,850 --> 00:16:09,639
comment thats turnstile install that

00:16:05,680 --> 00:16:13,060
will automatically seem link the two

00:16:09,639 --> 00:16:15,370
looks for you and because I was already

00:16:13,060 --> 00:16:18,730
adding support for said comments I added

00:16:15,370 --> 00:16:20,620
several more we have config sub comment

00:16:18,730 --> 00:16:23,769
that right now the only thing it does is

00:16:20,620 --> 00:16:26,050
set allow you to set ferocity so if you

00:16:23,769 --> 00:16:28,449
want only to see errors you can only see

00:16:26,050 --> 00:16:30,790
the errors if you won't see everything

00:16:28,449 --> 00:16:33,130
that turnstile is doing behind scenes

00:16:30,790 --> 00:16:35,260
you can also do it you we have to

00:16:33,130 --> 00:16:38,260
install comment to have books to a

00:16:35,260 --> 00:16:42,459
specific repository we have to remove if

00:16:38,260 --> 00:16:45,300
you decide to give you don't want talks

00:16:42,459 --> 00:16:49,110
anymore for that repository the

00:16:45,300 --> 00:16:54,339
specification sup command is used for

00:16:49,110 --> 00:16:56,829
Earth check if if all your projects

00:16:54,339 --> 00:16:58,449
contain a valid specification of all

00:16:56,829 --> 00:17:01,389
your comets contain a valid

00:16:58,449 --> 00:17:05,049
specification and right now this means

00:17:01,389 --> 00:17:07,870
and if they start with an URL but i'm

00:17:05,049 --> 00:17:11,410
planning to support more stefan in the

00:17:07,870 --> 00:17:14,439
near future the upgrades of command will

00:17:11,410 --> 00:17:17,530
check ypi to see if turnstile and all

00:17:14,439 --> 00:17:19,510
right all your extensions are updated

00:17:17,530 --> 00:17:22,000
and if they are not it will offer to

00:17:19,510 --> 00:17:23,709
update everything for you and version

00:17:22,000 --> 00:17:28,120
just Prince the Virgin and is not that

00:17:23,709 --> 00:17:30,580
interesting so now if you want to create

00:17:28,120 --> 00:17:35,169
extensions to turn style how can you do

00:17:30,580 --> 00:17:38,460
it and the two way you you do it is with

00:17:35,169 --> 00:17:41,460
a set of tools and entry points

00:17:38,460 --> 00:17:44,760
so you just have if you want to add a

00:17:41,460 --> 00:17:47,700
comment you just go to the end and use

00:17:44,760 --> 00:17:49,920
the empty point turnstile comments you

00:17:47,700 --> 00:17:51,810
give the name of your self comment and

00:17:49,920 --> 00:17:54,900
this will be used to call it from

00:17:51,810 --> 00:17:58,050
comment line and you just provide module

00:17:54,900 --> 00:18:01,230
where your supplement is and that you

00:17:58,050 --> 00:18:03,390
can see more on documentation later it's

00:18:01,230 --> 00:18:05,700
same thing for checks so if you want to

00:18:03,390 --> 00:18:08,130
check something with a bow with the

00:18:05,700 --> 00:18:10,440
break a meat hook we use you also give

00:18:08,130 --> 00:18:13,650
it a name that will be used on the

00:18:10,440 --> 00:18:16,860
configuration and use you provide the

00:18:13,650 --> 00:18:18,720
module that's going to be used so you

00:18:16,860 --> 00:18:22,170
have we have three and three points

00:18:18,720 --> 00:18:25,530
right now 14 comments 14 commit message

00:18:22,170 --> 00:18:28,170
hook the text commit message and the

00:18:25,530 --> 00:18:32,090
other four pre-commit hook that that we

00:18:28,170 --> 00:18:35,370
use for checking code style for example

00:18:32,090 --> 00:18:39,870
so what we did we learn from this

00:18:35,370 --> 00:18:41,850
process first don't and this is the most

00:18:39,870 --> 00:18:44,370
important don't get stuck in the past

00:18:41,850 --> 00:18:48,270
it's very easy to make mistakes because

00:18:44,370 --> 00:18:50,250
it was always done like this and what

00:18:48,270 --> 00:18:53,130
was the best solution yesterday can be

00:18:50,250 --> 00:18:55,470
the wrong solution and today and this

00:18:53,130 --> 00:18:56,850
will be mostly like it will mostly

00:18:55,470 --> 00:18:58,860
likely be true if you change

00:18:56,850 --> 00:19:01,610
technologies because few change

00:18:58,860 --> 00:19:04,320
technologies you will have different

00:19:01,610 --> 00:19:07,230
limitations and different opportunities

00:19:04,320 --> 00:19:12,660
and you should you should rethink what

00:19:07,230 --> 00:19:14,400
you're doing and adapt to it other one

00:19:12,660 --> 00:19:16,530
other thing we learned was developing

00:19:14,400 --> 00:19:21,030
the open because this by being more

00:19:16,530 --> 00:19:24,570
transparent about what we wanted where

00:19:21,030 --> 00:19:29,550
we we are we were going we avoided

00:19:24,570 --> 00:19:31,290
assuming to match and we're and we

00:19:29,550 --> 00:19:34,200
avoided backing ourselves into a corner

00:19:31,290 --> 00:19:40,560
and we got early feedback that also

00:19:34,200 --> 00:19:44,340
avoided lots of issues we also learned

00:19:40,560 --> 00:19:47,160
that we should build tools not / ears

00:19:44,340 --> 00:19:49,110
software is meant to help people and be

00:19:47,160 --> 00:19:51,420
more to be more productive if your

00:19:49,110 --> 00:19:52,300
software is making people lose time

00:19:51,420 --> 00:19:56,470
instead of saving

00:19:52,300 --> 00:19:58,420
time you should rethink it and by

00:19:56,470 --> 00:20:00,870
rethinking our he took so we were able

00:19:58,420 --> 00:20:04,540
to move from a position where sometimes

00:20:00,870 --> 00:20:06,430
our our software was entering the

00:20:04,540 --> 00:20:08,200
productivity of our engineering teams to

00:20:06,430 --> 00:20:10,210
a position where they are useful tools

00:20:08,200 --> 00:20:22,720
to help them work autonomous

00:20:10,210 --> 00:20:25,440
autonomously so any question there's one

00:20:22,720 --> 00:20:25,440
percenter

00:20:30,090 --> 00:20:35,279
a height thank you for the talk my

00:20:32,520 --> 00:20:38,610
question is about the the cost and the

00:20:35,279 --> 00:20:40,950
fourth of any change because some you

00:20:38,610 --> 00:20:44,190
were talking about your company changing

00:20:40,950 --> 00:20:48,270
speak louder I cannot hear you oh sorry

00:20:44,190 --> 00:20:51,600
no yes yes thank you I was asking about

00:20:48,270 --> 00:20:54,870
the effort of changing in HS step

00:20:51,600 --> 00:20:57,330
because sometimes ok leaving subversion

00:20:54,870 --> 00:21:00,029
may be a good thing but changing for

00:20:57,330 --> 00:21:04,679
centralized hooks to local hoods and

00:21:00,029 --> 00:21:08,100
everything out the effort yes yes it's

00:21:04,679 --> 00:21:13,590
an art process and we are still working

00:21:08,100 --> 00:21:16,890
on it same teams and actually are doing

00:21:13,590 --> 00:21:22,289
things where we are disabling checks on

00:21:16,890 --> 00:21:24,570
the remote hook in phases and telling

00:21:22,289 --> 00:21:29,399
people now start using this and we are

00:21:24,570 --> 00:21:33,149
trying to make it compatible so the only

00:21:29,399 --> 00:21:35,610
thing that's not working same same way

00:21:33,149 --> 00:21:37,620
on the remote key talks and locally took

00:21:35,610 --> 00:21:41,309
this specification because before we

00:21:37,620 --> 00:21:44,190
only allowed people to use jireh tickets

00:21:41,309 --> 00:21:46,049
and now we customs are autonomous we

00:21:44,190 --> 00:21:48,390
want to allow them to use whatever

00:21:46,049 --> 00:21:54,240
solution they want so now we support

00:21:48,390 --> 00:21:57,539
more stuff the fortunately it's a land

00:21:54,240 --> 00:21:59,580
oh you were already used to always

00:21:57,539 --> 00:22:03,059
question everything and is one of our

00:21:59,580 --> 00:22:05,700
philosophy if you stay if you are doing

00:22:03,059 --> 00:22:07,770
same thing all the time you should

00:22:05,700 --> 00:22:10,470
question yourself and see if it's not

00:22:07,770 --> 00:22:13,909
there's no better way to do it and it is

00:22:10,470 --> 00:22:16,980
it's part of our corporate culture and

00:22:13,909 --> 00:22:19,140
it that doesn't mean that people don't

00:22:16,980 --> 00:22:21,860
don't complain that we are changing

00:22:19,140 --> 00:22:24,600
again and that we have to manage it but

00:22:21,860 --> 00:22:26,880
at least interracial relationship to

00:22:24,600 --> 00:22:29,640
this most feedback I I have is that

00:22:26,880 --> 00:22:33,120
people are happy to be able to control

00:22:29,640 --> 00:22:36,179
and when they use yolks how to use it

00:22:33,120 --> 00:22:38,399
and they don't and they are very happy

00:22:36,179 --> 00:22:42,289
that they don't have to rely on me and

00:22:38,399 --> 00:22:42,289
my team to change a step for them

00:22:50,540 --> 00:22:59,690
you can provide any samples of the kind

00:22:54,510 --> 00:22:59,690
of rules we are enforcing with that yeah

00:23:00,200 --> 00:23:07,620
so for example and this is actually from

00:23:04,230 --> 00:23:11,190
one of our open source repository as I

00:23:07,620 --> 00:23:14,700
don't remember exactly what this is a

00:23:11,190 --> 00:23:17,160
very minimum set we have more than that

00:23:14,700 --> 00:23:19,770
but for example this specification we

00:23:17,160 --> 00:23:25,560
have to specification check what it does

00:23:19,770 --> 00:23:30,270
right now is checking if your commit

00:23:25,560 --> 00:23:32,400
message starts with an URL and you have

00:23:30,270 --> 00:23:36,090
two optional out schemes right now and

00:23:32,400 --> 00:23:39,480
I'm saying that I only accept HTTPS URLs

00:23:36,090 --> 00:23:44,550
because on this case all specifications

00:23:39,480 --> 00:23:48,210
are done using github issues in the near

00:23:44,550 --> 00:23:50,990
future I want also to support on support

00:23:48,210 --> 00:23:53,700
github references so you can just put

00:23:50,990 --> 00:23:57,120
during the references that our support

00:23:53,700 --> 00:23:59,430
pack it up and also the gyro ticket IDs

00:23:57,120 --> 00:24:01,350
because we still use it at solano Wendy

00:23:59,430 --> 00:24:05,610
we wanted to make it easy for people to

00:24:01,350 --> 00:24:08,670
use it we have the branch release check

00:24:05,610 --> 00:24:12,300
that in this case uses that regex

00:24:08,670 --> 00:24:14,720
expression on the bottom to check if a

00:24:12,300 --> 00:24:17,490
branch that starts with release /

00:24:14,720 --> 00:24:19,950
something at second part s too much that

00:24:17,490 --> 00:24:22,890
one in this case it is start with heavy

00:24:19,950 --> 00:24:25,200
and follow some rules that's format we

00:24:22,890 --> 00:24:29,100
use at zalando but you can use whatever

00:24:25,200 --> 00:24:31,890
you want and to protect master branch in

00:24:29,100 --> 00:24:34,230
this case for video to commit directly

00:24:31,890 --> 00:24:42,030
to master because we want to enforce a

00:24:34,230 --> 00:24:44,900
pull request and any other questions or

00:24:42,030 --> 00:24:44,900
questions from anybody

00:24:46,720 --> 00:24:55,179
okay just just one more ting and if you

00:24:52,570 --> 00:24:58,870
want to find more information about

00:24:55,179 --> 00:25:02,530
solando we have a tech blog and external

00:24:58,870 --> 00:25:05,260
comm we have our github page github.com

00:25:02,530 --> 00:25:07,090
/ talento we have lots of open source

00:25:05,260 --> 00:25:09,100
projects there and we are going to have

00:25:07,090 --> 00:25:11,140
much more in the future we also have

00:25:09,100 --> 00:25:15,490
twitter instagram and Instagram account

00:25:11,140 --> 00:25:17,740
and a jobs page and when when one of my

00:25:15,490 --> 00:25:21,990
colleagues will give a presentation in

00:25:17,740 --> 00:25:21,990

YouTube URL: https://www.youtube.com/watch?v=pwmZ7AGhcuo


