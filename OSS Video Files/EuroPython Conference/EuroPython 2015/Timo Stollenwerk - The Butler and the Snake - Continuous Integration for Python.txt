Title: Timo Stollenwerk - The Butler and the Snake - Continuous Integration for Python
Publication date: 2015-08-08
Playlist: EuroPython 2015
Description: 
	Timo Stollenwerk - The Butler and the Snake - Continuous Integration for Python
[EuroPython 2015]
[20 July 2015]
[Bilbao, Euskadi, Spain]

Continuous Integration is a software development practice where
members of a team integrate their work frequently, leading to multiple
integrations per day. Each integration is verified by an automated
process (including tests) to detect integration errors as quickly as
possible.

This talk will introduce the basic principles for building an
effective Continuous Integration system for Python-based projects. It
will present the lessons learned from building a Jenkins-based CI
system for an Open Source project with a distributed team of more than
340 core developers that ranks  among the top 2% of all open source
projects worldwide (Plone).
Captions: 
	00:00:00,410 --> 00:00:06,540
thank you and hello everybody my talk is

00:00:04,170 --> 00:00:09,330
about massenet sad about continuous

00:00:06,540 --> 00:00:12,389
integration a few words about me I'm the

00:00:09,330 --> 00:00:14,549
Python web developer since more than 10

00:00:12,389 --> 00:00:16,890
years and most of my professional and

00:00:14,549 --> 00:00:18,810
free time I spend on a project called

00:00:16,890 --> 00:00:20,640
plone it's an open-source enterprise

00:00:18,810 --> 00:00:23,970
content management system written in

00:00:20,640 --> 00:00:26,250
Python we have around 340 core

00:00:23,970 --> 00:00:30,480
developers worldwide and blown powers

00:00:26,250 --> 00:00:33,469
websites like NASA CIA NSA what stem

00:00:30,480 --> 00:00:38,219
brazilian government and many more and

00:00:33,469 --> 00:00:40,410
since around four years I'm the leader

00:00:38,219 --> 00:00:42,030
of the plone continuous integration and

00:00:40,410 --> 00:00:44,789
testing team so we make sure that our

00:00:42,030 --> 00:00:48,930
continuous integration systems work and

00:00:44,789 --> 00:00:51,149
that our testing is in a good shape so

00:00:48,930 --> 00:00:54,180
what's continuous integration I guess

00:00:51,149 --> 00:00:57,870
everybody heard that term at some point

00:00:54,180 --> 00:00:59,489
and it's in contrast to what many people

00:00:57,870 --> 00:01:00,750
think that is like the software that you

00:00:59,489 --> 00:01:02,070
can just install and then you do

00:01:00,750 --> 00:01:04,049
continuous integration it's actually a

00:01:02,070 --> 00:01:06,689
software development practice like

00:01:04,049 --> 00:01:09,420
test-driven development for instance so

00:01:06,689 --> 00:01:11,700
this software development practice is

00:01:09,420 --> 00:01:13,710
about team members that integrate their

00:01:11,700 --> 00:01:16,770
work into a main branch of a version

00:01:13,710 --> 00:01:18,810
control system frequently and each of

00:01:16,770 --> 00:01:21,240
this integration or commits are push or

00:01:18,810 --> 00:01:23,520
pushes or whatever is verified by an

00:01:21,240 --> 00:01:25,710
automated build and test process and

00:01:23,520 --> 00:01:28,650
this out made build and test process

00:01:25,710 --> 00:01:31,740
make sure that code violations test

00:01:28,650 --> 00:01:34,079
failures our backs are detected as early

00:01:31,740 --> 00:01:36,420
as possible and also report it as early

00:01:34,079 --> 00:01:38,970
as possible to your developers we all

00:01:36,420 --> 00:01:41,189
know that this is those statistics a

00:01:38,970 --> 00:01:45,270
lockbox right that the later you detect

00:01:41,189 --> 00:01:47,820
bugs the more cost day cause right so if

00:01:45,270 --> 00:01:55,170
we detect but slowly it they're easy to

00:01:47,820 --> 00:01:57,689
to track down and easier to fix and one

00:01:55,170 --> 00:01:59,189
of the other advantages big advantages

00:01:57,689 --> 00:02:01,469
of a continuous integration system is

00:01:59,189 --> 00:02:03,360
that if you run your build and your

00:02:01,469 --> 00:02:05,009
tests automatically on a continuous

00:02:03,360 --> 00:02:07,259
basis then you know that your

00:02:05,009 --> 00:02:10,700
development and also your deployment

00:02:07,259 --> 00:02:10,700
environment is in a working state

00:02:11,250 --> 00:02:17,400
so SS at the there there are three

00:02:15,560 --> 00:02:19,380
important parts in continuous

00:02:17,400 --> 00:02:22,220
integration one is the first one is that

00:02:19,380 --> 00:02:24,720
you integrate frequently into your

00:02:22,220 --> 00:02:26,370
vertical troll system that you have an

00:02:24,720 --> 00:02:30,270
automated build and test system and that

00:02:26,370 --> 00:02:32,520
you report so keep those three items in

00:02:30,270 --> 00:02:34,500
in mind because I will come back to that

00:02:32,520 --> 00:02:36,480
our first approach in the plone

00:02:34,500 --> 00:02:38,850
community to continuous integration was

00:02:36,480 --> 00:02:43,200
actually built bought who here knows

00:02:38,850 --> 00:02:44,959
what Philpott is Oh quite a few people

00:02:43,200 --> 00:02:50,040
so bill pot is a continuous integration

00:02:44,959 --> 00:02:54,140
framework written in Python we we had it

00:02:50,040 --> 00:02:56,880
set up but it's it's quite complex and

00:02:54,140 --> 00:02:58,620
as I said it's more framework than than

00:02:56,880 --> 00:03:00,330
an out-of-the-box solution so you can't

00:02:58,620 --> 00:03:02,130
just like install built but and it will

00:03:00,330 --> 00:03:03,090
like do everything that you want you

00:03:02,130 --> 00:03:06,180
have to really know what you're doing

00:03:03,090 --> 00:03:07,800
and it's yes hard to set up so we barely

00:03:06,180 --> 00:03:10,380
used it I mean a few hard core

00:03:07,800 --> 00:03:12,570
developers used it but it wasn't really

00:03:10,380 --> 00:03:16,200
run on a continuous basis it wasn't

00:03:12,570 --> 00:03:19,140
really integrated into our in Auburn

00:03:16,200 --> 00:03:21,720
control setup and nobody really SS a

00:03:19,140 --> 00:03:25,019
like regular developer you did not even

00:03:21,720 --> 00:03:28,220
notice or knew about it and around four

00:03:25,019 --> 00:03:33,930
years ago in 2011 we introduced Hudson

00:03:28,220 --> 00:03:36,959
what's now called Jenkins into our into

00:03:33,930 --> 00:03:38,730
our process and one of the developers

00:03:36,959 --> 00:03:41,250
who like start to play around with

00:03:38,730 --> 00:03:44,579
Jenkins wrote that is like build but but

00:03:41,250 --> 00:03:46,290
with with the butler so in comparison to

00:03:44,579 --> 00:03:48,060
build thought Jenkins is really out of

00:03:46,290 --> 00:03:51,000
out-of-the-box solution you just install

00:03:48,060 --> 00:03:52,829
it and you configure you have to

00:03:51,000 --> 00:03:56,519
configure it a bit but then it it

00:03:52,829 --> 00:03:58,799
basically works so that was really nice

00:03:56,519 --> 00:04:01,140
also Jenkins comes with with a nice user

00:03:58,799 --> 00:04:02,760
interface so everybody can just go there

00:04:01,140 --> 00:04:05,730
and like check the status and stuff like

00:04:02,760 --> 00:04:08,130
that downside is it's written in Java

00:04:05,730 --> 00:04:10,019
and that's as a Python developer you

00:04:08,130 --> 00:04:13,850
always prefer of course to use a

00:04:10,019 --> 00:04:17,160
beautiful python software right but its

00:04:13,850 --> 00:04:20,190
its its job as a decent language and

00:04:17,160 --> 00:04:22,020
it's it's a very good software product

00:04:20,190 --> 00:04:24,550
in my opinion it has a huge open source

00:04:22,020 --> 00:04:26,919
community around it with

00:04:24,550 --> 00:04:30,250
any when both many plugins it's backed

00:04:26,919 --> 00:04:32,340
by a by company who offers commercial

00:04:30,250 --> 00:04:35,069
services on top of that called ploppies

00:04:32,340 --> 00:04:38,680
and we're really really happy with it so

00:04:35,069 --> 00:04:42,129
during my talk I will give you examples

00:04:38,680 --> 00:04:44,590
what we do with with Jenkins but it's

00:04:42,129 --> 00:04:46,650
not very specific to Jenkins so as I

00:04:44,590 --> 00:04:49,180
said continuous integration is a

00:04:46,650 --> 00:04:50,800
software development practice so it's

00:04:49,180 --> 00:04:52,560
about the practice and the rules that

00:04:50,800 --> 00:04:56,319
you have right it's not about the

00:04:52,560 --> 00:04:59,110
software that you actually choose so

00:04:56,319 --> 00:05:03,219
when we moved from buildbot to have some

00:04:59,110 --> 00:05:04,930
things looked a bit better but we use

00:05:03,219 --> 00:05:07,000
nightly builds I guess a lot of people

00:05:04,930 --> 00:05:09,669
do that because your your tests take

00:05:07,000 --> 00:05:11,800
quite a while and you don't want to run

00:05:09,669 --> 00:05:14,860
them on every commit for whatever reason

00:05:11,800 --> 00:05:16,629
and then you run them on nightly basis

00:05:14,860 --> 00:05:18,550
right if everybody sleeps then you can

00:05:16,629 --> 00:05:20,650
just run them for a couple of hours or

00:05:18,550 --> 00:05:23,319
whatever it takes and next morning you

00:05:20,650 --> 00:05:25,479
will get a report to your mailing list

00:05:23,319 --> 00:05:28,620
saying those this is the list of commits

00:05:25,479 --> 00:05:32,440
and now the build is either broken or

00:05:28,620 --> 00:05:34,569
it's fine the problem with that is that

00:05:32,440 --> 00:05:36,340
you don't run you're built for each

00:05:34,569 --> 00:05:38,380
integration if you if you recall the

00:05:36,340 --> 00:05:40,000
definition that I gave you up front

00:05:38,380 --> 00:05:42,430
about continuous integration the

00:05:40,000 --> 00:05:44,409
important part is that you run your

00:05:42,430 --> 00:05:47,259
build and test process for each commit

00:05:44,409 --> 00:05:49,810
because that's the only way to figure

00:05:47,259 --> 00:05:53,199
out which commit or which code change

00:05:49,810 --> 00:05:55,539
actually cost regression right if you if

00:05:53,199 --> 00:05:57,460
you have 20 commits from different

00:05:55,539 --> 00:05:59,590
people and next morning you we will see

00:05:57,460 --> 00:06:01,810
how to build this is red then somebody

00:05:59,590 --> 00:06:03,099
needs to clean that up and usually the

00:06:01,810 --> 00:06:04,960
person who cleans that up is not the

00:06:03,099 --> 00:06:07,479
person who causes the violation so it's

00:06:04,960 --> 00:06:09,610
costly to do that right and nobody does

00:06:07,479 --> 00:06:12,069
that if you are in a company you can

00:06:09,610 --> 00:06:14,469
force somebody like a poor guy or girl

00:06:12,069 --> 00:06:16,060
to like fix the fix stuff for other

00:06:14,469 --> 00:06:17,949
people but in open source community is

00:06:16,060 --> 00:06:20,169
even harder because like there are 20

00:06:17,949 --> 00:06:22,029
commits and people say hey it wasn't me

00:06:20,169 --> 00:06:24,699
write my chrome it was really like clean

00:06:22,029 --> 00:06:26,259
and and perfect so if you run them on a

00:06:24,699 --> 00:06:27,550
nightly basis you built this broken

00:06:26,259 --> 00:06:31,050
ninety nine percent of the time that

00:06:27,550 --> 00:06:34,029
that's that's at least my my experience

00:06:31,050 --> 00:06:35,469
so our software like development and

00:06:34,029 --> 00:06:37,120
release process in the plum community

00:06:35,469 --> 00:06:37,930
was like this the build was like broken

00:06:37,120 --> 00:06:39,789
99 percent

00:06:37,930 --> 00:06:42,039
to time and then before release our

00:06:39,789 --> 00:06:44,229
release manager said hey guys I want to

00:06:42,039 --> 00:06:47,199
make a release and then like two or

00:06:44,229 --> 00:06:51,789
three of the 340 developers the really

00:06:47,199 --> 00:06:53,440
hardcore guys started to like fix tests

00:06:51,789 --> 00:06:55,630
for everybody else sometimes we had like

00:06:53,440 --> 00:06:58,930
400 or 500 test papers we have around

00:06:55,630 --> 00:07:00,880
nine thousand tests in plone so people

00:06:58,930 --> 00:07:03,160
are really we set together like four day

00:07:00,880 --> 00:07:04,960
or two and we really fixed like a couple

00:07:03,160 --> 00:07:06,729
of hundred bucks before we could even

00:07:04,960 --> 00:07:09,430
make a release and then we start to make

00:07:06,729 --> 00:07:10,810
our 300 releases and then I'll release

00:07:09,430 --> 00:07:12,970
manager I could make the actual release

00:07:10,810 --> 00:07:16,780
right so that's what it tooks when we

00:07:12,970 --> 00:07:20,050
had those nightly builds so how could we

00:07:16,780 --> 00:07:22,840
solve their nightly build problem you

00:07:20,050 --> 00:07:25,330
can solve that by a following the rule

00:07:22,840 --> 00:07:27,449
that you have one build and tests /

00:07:25,330 --> 00:07:32,050
commit so how do you do that by default

00:07:27,449 --> 00:07:34,090
Jenkins use up use Pauling to pull the

00:07:32,050 --> 00:07:36,910
diversion control system like you can

00:07:34,090 --> 00:07:38,530
set it to every 30 seconds or something

00:07:36,910 --> 00:07:40,539
and it Paul's it and if when you commit

00:07:38,530 --> 00:07:43,210
is there it creates a build the problem

00:07:40,539 --> 00:07:46,180
with that is you won't fetch all the you

00:07:43,210 --> 00:07:48,099
will not get one built / commit because

00:07:46,180 --> 00:07:50,349
it could be that some like two people

00:07:48,099 --> 00:07:53,260
commit at the same time then you have

00:07:50,349 --> 00:07:55,080
like to commit and believe me those two

00:07:53,260 --> 00:07:58,599
people will say it was the other one

00:07:55,080 --> 00:08:00,699
always so you have one commit and you

00:07:58,599 --> 00:08:03,270
make sure that you have one built for

00:08:00,699 --> 00:08:05,380
that commit that with with today's

00:08:03,270 --> 00:08:07,900
version control system that's really

00:08:05,380 --> 00:08:09,490
easy because github has post kinetics if

00:08:07,900 --> 00:08:12,370
you if you host it on github or

00:08:09,490 --> 00:08:15,759
bitbucket or on your own you of your own

00:08:12,370 --> 00:08:17,680
git repository you can just create a

00:08:15,759 --> 00:08:19,720
good post commit hook that actually

00:08:17,680 --> 00:08:22,139
triggers your den consensus or is that

00:08:19,720 --> 00:08:25,240
CI instance then you can have one build

00:08:22,139 --> 00:08:26,979
/ commit so you can trace the person or

00:08:25,240 --> 00:08:29,500
the commit that was responsible so it's

00:08:26,979 --> 00:08:32,349
really easy to figure out what what goes

00:08:29,500 --> 00:08:34,000
wrong in plone is a bit more complex

00:08:32,349 --> 00:08:36,039
than that because we have those 300

00:08:34,000 --> 00:08:38,979
packages and one check out does not mean

00:08:36,039 --> 00:08:41,409
we have like the the exact same check

00:08:38,979 --> 00:08:45,130
out of all packages but i will like come

00:08:41,409 --> 00:08:46,570
to that later and then what's important

00:08:45,130 --> 00:08:49,480
is that you preserve this commit

00:08:46,570 --> 00:08:50,910
information through your continuous

00:08:49,480 --> 00:08:53,760
integration pipeline so you

00:08:50,910 --> 00:08:55,320
acid through the builds and also so that

00:08:53,760 --> 00:08:59,430
you can at the end notify people right

00:08:55,320 --> 00:09:01,830
via email or anything else so we have

00:08:59,430 --> 00:09:08,460
those three steps commit build notify

00:09:01,830 --> 00:09:10,380
and in order to be able to automatically

00:09:08,460 --> 00:09:13,020
build and test your software you need an

00:09:10,380 --> 00:09:14,450
automated build so we have tools for

00:09:13,020 --> 00:09:16,740
that in the Python community right

00:09:14,450 --> 00:09:18,570
employing we use build out it's not

00:09:16,740 --> 00:09:21,150
widely used outside there's up community

00:09:18,570 --> 00:09:23,010
the pyramid folks use it but most people

00:09:21,150 --> 00:09:25,440
use pip or easy install which are also

00:09:23,010 --> 00:09:30,060
fine you need you probably need to like

00:09:25,440 --> 00:09:33,750
wrap then wrap them into a into bash

00:09:30,060 --> 00:09:35,340
files or anything like that but you can

00:09:33,750 --> 00:09:37,470
automate your bills right if you if you

00:09:35,340 --> 00:09:41,610
do that you can use talks for instance

00:09:37,470 --> 00:09:44,280
on the CI system to to configure what's

00:09:41,610 --> 00:09:47,610
run on the only CI system and on on the

00:09:44,280 --> 00:09:49,770
Jenkins machine you can for instance use

00:09:47,610 --> 00:09:52,740
tools like shining panda that's a

00:09:49,770 --> 00:09:56,100
Jenkins plugin that allows you to create

00:09:52,740 --> 00:09:58,380
virtual ends or build outs and install

00:09:56,100 --> 00:10:00,060
things by a pip automatically so it's

00:09:58,380 --> 00:10:02,340
just a convenience tool we are not using

00:10:00,060 --> 00:10:05,100
it in a plone community because a bash

00:10:02,340 --> 00:10:06,840
script is enough but if you want to do

00:10:05,100 --> 00:10:08,970
stuff with python and you want a nice

00:10:06,840 --> 00:10:11,190
rapper than shining panda is the it's

00:10:08,970 --> 00:10:13,500
the right tool for the job so if you

00:10:11,190 --> 00:10:15,270
build if you do you're built

00:10:13,500 --> 00:10:17,340
automatically you all you all course

00:10:15,270 --> 00:10:18,720
want to use you want to run your tests

00:10:17,340 --> 00:10:21,840
right because you want to make sure they

00:10:18,720 --> 00:10:23,550
just have to actually works if you use

00:10:21,840 --> 00:10:27,590
PI tests you're lucky because you can

00:10:23,550 --> 00:10:29,940
just configure PI test to to output

00:10:27,590 --> 00:10:32,520
files that Jenkins can read out of the

00:10:29,940 --> 00:10:36,480
box jenkins java software so it has of

00:10:32,520 --> 00:10:38,990
course in xml interface but with pikas

00:10:36,480 --> 00:10:41,640
is really easy i'm not sure about other

00:10:38,990 --> 00:10:45,230
python test frameworks we have collected

00:10:41,640 --> 00:10:48,510
xml test report which is the plone

00:10:45,230 --> 00:10:51,150
rapero about it about the dope test run

00:10:48,510 --> 00:10:54,540
i won't bother you with that and then

00:10:51,150 --> 00:10:58,070
you can present those nice statistics

00:10:54,540 --> 00:11:00,940
about your failing or passing tests and

00:10:58,070 --> 00:11:03,790
the same is true for a test coverage

00:11:00,940 --> 00:11:06,220
you can use the coverage package and the

00:11:03,790 --> 00:11:07,960
Jenkins cobertura plugin to actually

00:11:06,220 --> 00:11:09,820
show that to you users so you have a

00:11:07,960 --> 00:11:12,610
nice interface that you also can show to

00:11:09,820 --> 00:11:14,590
the project manager so he or she can can

00:11:12,610 --> 00:11:18,610
track your performance and see if the

00:11:14,590 --> 00:11:20,530
Builder is broken in order to make sure

00:11:18,610 --> 00:11:22,300
that your software is not only in a

00:11:20,530 --> 00:11:24,250
working state but also does what is

00:11:22,300 --> 00:11:27,040
supposed to do you you usually need

00:11:24,250 --> 00:11:29,470
acceptance tests right and I'm a web

00:11:27,040 --> 00:11:31,810
developer so what what you usually do is

00:11:29,470 --> 00:11:33,580
URI selenium tests and we use that in

00:11:31,810 --> 00:11:35,590
the pond community for a long time but

00:11:33,580 --> 00:11:37,090
around five years ago we started with

00:11:35,590 --> 00:11:39,550
robot framework and that really gave us

00:11:37,090 --> 00:11:41,860
a boost to an account came to acceptance

00:11:39,550 --> 00:11:45,190
testing robot framework is a generic

00:11:41,860 --> 00:11:46,870
test framework with multiple plugins and

00:11:45,190 --> 00:11:51,730
one of those plugins is Jenkin that is

00:11:46,870 --> 00:11:56,490
sorry is selenium selenium too so you

00:11:51,730 --> 00:11:59,260
can write tests in this nice BDD syntax

00:11:56,490 --> 00:12:01,810
human readable not not only by

00:11:59,260 --> 00:12:04,060
programmers and robot framework and

00:12:01,810 --> 00:12:06,550
selenium will run those tests and you

00:12:04,060 --> 00:12:08,890
have all the integration necessary in

00:12:06,550 --> 00:12:11,230
Jenkins as well so you have a robot

00:12:08,890 --> 00:12:14,290
framework plugin and jenkins or or

00:12:11,230 --> 00:12:16,480
selling it selenium to plugin that that

00:12:14,290 --> 00:12:17,770
shows you all the nice outputs of robot

00:12:16,480 --> 00:12:18,940
framework or selenium the cool thing

00:12:17,770 --> 00:12:21,390
about robot framework is that it gives

00:12:18,940 --> 00:12:25,030
you a full trace back if your tests fail

00:12:21,390 --> 00:12:27,940
it goes a step by step through it and it

00:12:25,030 --> 00:12:29,920
it does an automatic screenshot of the

00:12:27,940 --> 00:12:31,780
last where the test actually failed and

00:12:29,920 --> 00:12:33,670
we have all that in a nice output that

00:12:31,780 --> 00:12:36,610
you can access and and see what what

00:12:33,670 --> 00:12:39,220
failed right and we're also using a

00:12:36,610 --> 00:12:42,000
sauce labs which is a software service

00:12:39,220 --> 00:12:44,200
that you can use to actually run your

00:12:42,000 --> 00:12:45,820
robot framework or selenium tests on

00:12:44,200 --> 00:12:47,320
different versions so they offer you all

00:12:45,820 --> 00:12:49,930
the all the versions that you could

00:12:47,320 --> 00:12:52,690
imagine because you don't want to set up

00:12:49,930 --> 00:12:55,990
your own windows machine which right it

00:12:52,690 --> 00:12:57,820
don't do it that those those services

00:12:55,990 --> 00:12:59,950
are cheap sorry for the advertising but

00:12:57,820 --> 00:13:01,480
or use any other service but use the

00:12:59,950 --> 00:13:05,470
service don't do that itself you tried

00:13:01,480 --> 00:13:07,390
it then one thing that is that is

00:13:05,470 --> 00:13:09,100
especially important for Python because

00:13:07,390 --> 00:13:11,339
it's a dynamically typed language is

00:13:09,100 --> 00:13:14,470
static code analysis so you're able to

00:13:11,339 --> 00:13:15,130
attract possible box early I guess

00:13:14,470 --> 00:13:16,990
you're all from the

00:13:15,130 --> 00:13:20,770
deal with with the with the tools Pepe

00:13:16,990 --> 00:13:22,330
pipe lights pylons we create a rapper in

00:13:20,770 --> 00:13:24,790
the plum community around those tools

00:13:22,330 --> 00:13:27,730
called plum recipe code analysis to have

00:13:24,790 --> 00:13:30,250
our best practice testable you can use

00:13:27,730 --> 00:13:34,300
that without plone but only with them

00:13:30,250 --> 00:13:37,510
build out and you can present all those

00:13:34,300 --> 00:13:39,490
if you run those code analysis script

00:13:37,510 --> 00:13:41,290
you can present them within the Jenkins

00:13:39,490 --> 00:13:43,750
violations plugin and it gives you also

00:13:41,290 --> 00:13:46,390
nice statistics about all your

00:13:43,750 --> 00:13:48,850
violations not only for Python but also

00:13:46,390 --> 00:13:52,090
i Jes Lind and all the modern stuff CSS

00:13:48,850 --> 00:13:54,100
Lind it's all it's all pluggable into

00:13:52,090 --> 00:13:56,380
the violations plugin so you can really

00:13:54,100 --> 00:13:58,510
really easily present all the

00:13:56,380 --> 00:14:00,490
information that you have to to your

00:13:58,510 --> 00:14:04,420
developers or to your project managers

00:14:00,490 --> 00:14:05,500
or everybody involved then one of the

00:14:04,420 --> 00:14:07,660
things that is really important is

00:14:05,500 --> 00:14:09,550
notifications because people need to be

00:14:07,660 --> 00:14:12,400
informed as quickly as possible about

00:14:09,550 --> 00:14:13,710
regressions and they're like many

00:14:12,400 --> 00:14:16,990
different ways you can do that in

00:14:13,710 --> 00:14:19,870
Jenkins the best way or the way that is

00:14:16,990 --> 00:14:22,720
most widely used is via email and

00:14:19,870 --> 00:14:26,940
there's an extended email plugin for

00:14:22,720 --> 00:14:30,190
Jenkins that allows you to define rules

00:14:26,940 --> 00:14:32,380
which people you want to notify so you

00:14:30,190 --> 00:14:35,500
can say if to build breaks then I want

00:14:32,380 --> 00:14:38,470
to notify like this dis mailing list and

00:14:35,500 --> 00:14:40,920
that point if the build is it's still

00:14:38,470 --> 00:14:44,140
failing then I want to do this and that

00:14:40,920 --> 00:14:46,180
so it so you can really like define all

00:14:44,140 --> 00:14:47,710
the all the rules that you want usually

00:14:46,180 --> 00:14:50,770
if you have a larger organization you

00:14:47,710 --> 00:14:53,650
want to hook it hook it hook Jenkins up

00:14:50,770 --> 00:14:56,170
with with ldap it also camp comes with a

00:14:53,650 --> 00:14:58,150
plug in 4 for github for instance or

00:14:56,170 --> 00:14:59,710
bitbucket so you can you use the

00:14:58,150 --> 00:15:01,000
authentication with that that that's

00:14:59,710 --> 00:15:02,980
really nice that's the cool thing about

00:15:01,000 --> 00:15:04,780
Jenkins that it has such a huge

00:15:02,980 --> 00:15:08,440
community that you have plugins for

00:15:04,780 --> 00:15:12,010
everything and you want you also want to

00:15:08,440 --> 00:15:13,510
show the current status to users so you

00:15:12,010 --> 00:15:16,120
can use the Jenkins dashboard plug into

00:15:13,510 --> 00:15:18,730
to have a nice dashboard or you can even

00:15:16,120 --> 00:15:22,060
go to your custom front ends it's all

00:15:18,730 --> 00:15:23,680
there you just have to choose so in the

00:15:22,060 --> 00:15:26,020
plant community we set up everything

00:15:23,680 --> 00:15:27,230
that i just presented to you and we

00:15:26,020 --> 00:15:30,860
ended up with

00:15:27,230 --> 00:15:33,740
this still so why is that I mean we put

00:15:30,860 --> 00:15:35,360
lots of effort with a lot of people into

00:15:33,740 --> 00:15:38,450
that and we build it all like by the

00:15:35,360 --> 00:15:40,700
book and the build was still broken wise

00:15:38,450 --> 00:15:42,500
why is that right I mean there are two

00:15:40,700 --> 00:15:45,980
reasons actually one of the reasons is

00:15:42,500 --> 00:15:48,470
that in for plone is hard to have this

00:15:45,980 --> 00:15:50,960
one commits one build thingy because we

00:15:48,470 --> 00:15:53,720
have those 300 packages and if you do a

00:15:50,960 --> 00:15:56,210
check out then it checks out those up to

00:15:53,720 --> 00:15:59,480
300 packages and you can't be sure that

00:15:56,210 --> 00:16:02,270
this all happens in a time frame before

00:15:59,480 --> 00:16:03,710
somebody else comes along right so

00:16:02,270 --> 00:16:05,420
that's pretty specific so i won't go

00:16:03,710 --> 00:16:07,490
into that detail but that's a problem as

00:16:05,420 --> 00:16:09,710
soon as you have like two people that

00:16:07,490 --> 00:16:11,210
could be responsible for something they

00:16:09,710 --> 00:16:14,000
will point to each other and say it was

00:16:11,210 --> 00:16:16,400
the other one right that always the case

00:16:14,000 --> 00:16:18,050
and then like the continuous integration

00:16:16,400 --> 00:16:19,580
and testing team needs to clean up and

00:16:18,050 --> 00:16:22,460
figure out what went wrong and after

00:16:19,580 --> 00:16:25,040
that you can like point it those persons

00:16:22,460 --> 00:16:27,020
and say hey it was you but I had to

00:16:25,040 --> 00:16:28,490
clean up your stuff anyways but the

00:16:27,020 --> 00:16:31,100
second thing that it's not specific to

00:16:28,490 --> 00:16:33,380
to plone is that people break the build

00:16:31,100 --> 00:16:35,960
and they just don't care I mean it's not

00:16:33,380 --> 00:16:38,330
because they're evil sometimes you just

00:16:35,960 --> 00:16:39,740
want to do like a quick fix or anything

00:16:38,330 --> 00:16:41,780
or you do a commit and you think that

00:16:39,740 --> 00:16:44,750
can't possibly break anything right I

00:16:41,780 --> 00:16:46,910
just did that like two days ago and look

00:16:44,750 --> 00:16:49,700
like good friend of mind and just it

00:16:46,910 --> 00:16:51,980
took him like two or three hours to to

00:16:49,700 --> 00:16:53,360
fix my stuff because it wasn't obvious

00:16:51,980 --> 00:16:55,460
because the commitment really looks

00:16:53,360 --> 00:16:57,260
perfect and then he wrote in to get in a

00:16:55,460 --> 00:17:00,530
github com that commit message that he

00:16:57,260 --> 00:17:02,600
wants to kill me it was like all my

00:17:00,530 --> 00:17:04,640
fault because I was tired and I just

00:17:02,600 --> 00:17:07,100
went too bad instead of like waiting for

00:17:04,640 --> 00:17:08,480
for Jenkins to pass so so it's not bad

00:17:07,100 --> 00:17:10,250
people but sometimes those things

00:17:08,480 --> 00:17:11,840
happens right you break the build maybe

00:17:10,250 --> 00:17:15,730
you don't check your emails or anything

00:17:11,840 --> 00:17:19,250
our bill takes still around 40 minutes

00:17:15,730 --> 00:17:22,550
so people break the build so how do you

00:17:19,250 --> 00:17:24,200
present prevent that as a sad like a

00:17:22,550 --> 00:17:26,540
couple of times before contains

00:17:24,200 --> 00:17:29,540
integration is the development practice

00:17:26,540 --> 00:17:33,230
so what's what maybe even more essential

00:17:29,540 --> 00:17:35,330
than a good software that helps you with

00:17:33,230 --> 00:17:37,820
that is actually that you practice that

00:17:35,330 --> 00:17:39,920
if you have agreement on the team and I

00:17:37,820 --> 00:17:42,050
think we gained a lot of experience with

00:17:39,920 --> 00:17:43,910
because we have like those 30 and 40

00:17:42,050 --> 00:17:47,030
core developers that's actually from our

00:17:43,910 --> 00:17:48,920
last year's conference in Brazil we have

00:17:47,030 --> 00:17:51,950
over half a million lines of code we

00:17:48,920 --> 00:17:56,030
have over 300 core packages so we have

00:17:51,950 --> 00:17:58,340
quite a complex software and like a huge

00:17:56,030 --> 00:18:00,590
team of developers it's not like a

00:17:58,340 --> 00:18:02,750
company where you can tell somebody to

00:18:00,590 --> 00:18:05,390
do things right so we need some

00:18:02,750 --> 00:18:09,080
agreement on the team how to like keep a

00:18:05,390 --> 00:18:11,330
green build fortunately some smart

00:18:09,080 --> 00:18:12,560
people already thought about that and

00:18:11,330 --> 00:18:14,810
came up with a few continuous

00:18:12,560 --> 00:18:17,540
integration rules or best practices that

00:18:14,810 --> 00:18:19,550
allow you to keep your green build the

00:18:17,540 --> 00:18:21,710
most important one is do not check in on

00:18:19,550 --> 00:18:23,360
a broken built it's the most important

00:18:21,710 --> 00:18:25,640
one is not do not break the build

00:18:23,360 --> 00:18:27,110
because that will not happen people will

00:18:25,640 --> 00:18:29,180
break the build and it's okay to break

00:18:27,110 --> 00:18:30,680
the build it's just important that you

00:18:29,180 --> 00:18:32,240
don't check in on a broken bill because

00:18:30,680 --> 00:18:35,660
if the build is broken and somebody else

00:18:32,240 --> 00:18:37,610
comes in and checks in then if things

00:18:35,660 --> 00:18:39,260
get complex you get more test failures

00:18:37,610 --> 00:18:41,570
and you can't figure out which commit

00:18:39,260 --> 00:18:43,340
was responsible and then people will

00:18:41,570 --> 00:18:45,890
point at each other and say it was that

00:18:43,340 --> 00:18:48,650
guy in it wasn't me right and then

00:18:45,890 --> 00:18:51,080
things will become complex so what you

00:18:48,650 --> 00:18:52,910
should do if you break the build the

00:18:51,080 --> 00:18:54,560
team should stop the entire team should

00:18:52,910 --> 00:18:56,180
stop and start fixing the build because

00:18:54,560 --> 00:18:57,760
you have a real regression right your

00:18:56,180 --> 00:19:01,400
software is not in a working state and

00:18:57,760 --> 00:19:04,550
nobody can commit if they take this

00:19:01,400 --> 00:19:06,650
purse rule seriously so the team should

00:19:04,550 --> 00:19:09,200
stop and work on that sometimes that's

00:19:06,650 --> 00:19:11,450
not happen if that's not working then

00:19:09,200 --> 00:19:12,920
it's also fine to just revert you commit

00:19:11,450 --> 00:19:14,900
sometimes it's obvious what you can do

00:19:12,920 --> 00:19:17,570
to fix it and you can just fix it but

00:19:14,900 --> 00:19:20,840
they should be a timeframe within where

00:19:17,570 --> 00:19:22,460
you should fix the back within that time

00:19:20,840 --> 00:19:24,590
frame right because otherwise you will

00:19:22,460 --> 00:19:29,360
block the build but if you do that if

00:19:24,590 --> 00:19:32,690
you stick with those rules um you can

00:19:29,360 --> 00:19:34,430
actually get a green built most of the

00:19:32,690 --> 00:19:35,930
time like not one hundred percent of the

00:19:34,430 --> 00:19:37,820
time because people will still break the

00:19:35,930 --> 00:19:40,910
built this is what see I is for right

00:19:37,820 --> 00:19:43,100
our tests take quite a long time to run

00:19:40,910 --> 00:19:45,740
if you run them all not in parallel like

00:19:43,100 --> 00:19:48,200
we do once on the CI system but simply

00:19:45,740 --> 00:19:50,120
sequentially then it takes more than one

00:19:48,200 --> 00:19:51,860
and a half hour to run our test and you

00:19:50,120 --> 00:19:52,650
can expect everybody to run all those

00:19:51,860 --> 00:19:55,410
tests rights

00:19:52,650 --> 00:20:01,710
people should use the CI system to break

00:19:55,410 --> 00:20:02,850
it but not for long so if we go with the

00:20:01,710 --> 00:20:05,580
continuous integration rules and half

00:20:02,850 --> 00:20:07,380
hour like of setup we have we have

00:20:05,580 --> 00:20:09,510
proved that our software is in a working

00:20:07,380 --> 00:20:11,520
state all the time that is pretty cool

00:20:09,510 --> 00:20:13,230
for our developers because if developers

00:20:11,520 --> 00:20:14,940
do a check out they know that the

00:20:13,230 --> 00:20:16,410
software works right before that they

00:20:14,940 --> 00:20:18,300
checked it out wanted to fix something

00:20:16,410 --> 00:20:19,500
and they had like a broken build so they

00:20:18,300 --> 00:20:21,600
had to fix something else that's

00:20:19,500 --> 00:20:23,250
frustrating we could make faster

00:20:21,600 --> 00:20:25,170
releases because our release manager did

00:20:23,250 --> 00:20:26,730
not have to ask the two or three

00:20:25,170 --> 00:20:28,890
hardcore developers to like fix all

00:20:26,730 --> 00:20:30,450
those bugs for a day he could he can

00:20:28,890 --> 00:20:32,160
just make releases because our build the

00:20:30,450 --> 00:20:36,930
screen right so you can deploy at any

00:20:32,160 --> 00:20:38,550
anytime just a few remarks about

00:20:36,930 --> 00:20:41,280
additional things that you could do

00:20:38,550 --> 00:20:42,960
scalability is important you should

00:20:41,280 --> 00:20:46,620
definitely if you have a larger project

00:20:42,960 --> 00:20:48,740
consider using a server node set up for

00:20:46,620 --> 00:20:51,780
Jenkins which Jenkins allows you to do

00:20:48,740 --> 00:20:53,400
so otherwise your if you if you have a

00:20:51,780 --> 00:20:55,830
lot of jobs running in your Jenkins

00:20:53,400 --> 00:20:58,920
machine then your UI will freeze because

00:20:55,830 --> 00:21:00,930
the server is busy so do that do that on

00:20:58,920 --> 00:21:03,180
your notes use provisioning there's

00:21:00,930 --> 00:21:05,640
nothing worse than a CI system that does

00:21:03,180 --> 00:21:07,950
not work reliably and behaves

00:21:05,640 --> 00:21:09,450
differently on the notes and you can use

00:21:07,950 --> 00:21:11,010
the Jenkins port allocate a plug-in to

00:21:09,450 --> 00:21:14,310
run things in parallel because this is

00:21:11,010 --> 00:21:16,410
what you want to do then if you have

00:21:14,310 --> 00:21:19,370
your CI system in place the next step

00:21:16,410 --> 00:21:21,600
would be continuous delivery not

00:21:19,370 --> 00:21:23,070
community integration with continuous

00:21:21,600 --> 00:21:24,960
integration you automate your testing

00:21:23,070 --> 00:21:26,910
process and your integration process

00:21:24,960 --> 00:21:29,490
with continuous deployment you automate

00:21:26,910 --> 00:21:30,750
your deployment the ideas that you for

00:21:29,490 --> 00:21:32,520
deployment you just have to push a

00:21:30,750 --> 00:21:34,560
button more or less and automatically

00:21:32,520 --> 00:21:36,900
will like deploy right a lot of

00:21:34,560 --> 00:21:39,360
companies do that these days and Jenkins

00:21:36,900 --> 00:21:43,260
grew from a CI system to is actually a

00:21:39,360 --> 00:21:45,090
system that can do CD as well and we

00:21:43,260 --> 00:21:46,670
also started to work on that we're using

00:21:45,090 --> 00:21:48,840
this release her for instance to do

00:21:46,670 --> 00:21:50,970
pythonic releases it's an awesome

00:21:48,840 --> 00:21:53,130
package if you do equities by hand stop

00:21:50,970 --> 00:21:55,650
and use s release it's perfect it's

00:21:53,130 --> 00:21:57,810
really great piece of software you can

00:21:55,650 --> 00:22:01,680
use def p for instance to make egg

00:21:57,810 --> 00:22:04,590
releases or wheels releases to test then

00:22:01,680 --> 00:22:06,150
actually your your deployment and on the

00:22:04,590 --> 00:22:07,680
jenkins side or there's a new

00:22:06,150 --> 00:22:09,150
dragon since like half a year called

00:22:07,680 --> 00:22:12,480
Jenkins work cool plugin is really a

00:22:09,150 --> 00:22:14,010
game changer in NC i-- in my opinion it

00:22:12,480 --> 00:22:17,610
allows you to create really

00:22:14,010 --> 00:22:20,100
sophisticated work flows within jenkins

00:22:17,610 --> 00:22:22,740
to run certain steps in parallel or

00:22:20,100 --> 00:22:24,930
sequentially and notify people and it's

00:22:22,740 --> 00:22:26,910
incredibly flexible I already played

00:22:24,930 --> 00:22:29,370
around with it and we definitely plan to

00:22:26,910 --> 00:22:31,170
to move to it so if you start with

00:22:29,370 --> 00:22:34,350
Jenkins I would like definitely check it

00:22:31,170 --> 00:22:36,990
out it's really really awesome so to

00:22:34,350 --> 00:22:38,640
summarize if you have a CI system and

00:22:36,990 --> 00:22:40,230
you integrate frequently you have an

00:22:38,640 --> 00:22:42,090
automated build and test system for each

00:22:40,230 --> 00:22:44,970
integration and your report as soon as

00:22:42,090 --> 00:22:48,540
possible you can get a green build like

00:22:44,970 --> 00:22:50,190
most of the time which gives you a proof

00:22:48,540 --> 00:22:51,660
that you have a software and working

00:22:50,190 --> 00:22:54,330
state that you can't deploy at any time

00:22:51,660 --> 00:22:56,370
you can ship software faster and better

00:22:54,330 --> 00:22:58,410
it's more fun for developers not

00:22:56,370 --> 00:23:01,110
frustrating for them because they they

00:22:58,410 --> 00:23:03,300
run into like failing tests and Jenkins

00:23:01,110 --> 00:23:05,160
in the last four years has been great

00:23:03,300 --> 00:23:06,810
it's it's like you have plugins for

00:23:05,160 --> 00:23:09,740
everything it's a great piece of

00:23:06,810 --> 00:23:14,280
software even though is written in Java

00:23:09,740 --> 00:23:15,780
so yeah use it if you want to know more

00:23:14,280 --> 00:23:17,970
about your continuous integration I

00:23:15,780 --> 00:23:19,530
highly recommend that book on the left

00:23:17,970 --> 00:23:21,570
side called continuous delivery from

00:23:19,530 --> 00:23:23,120
Jeff's humble and David fairly they came

00:23:21,570 --> 00:23:26,310
up with those continuous integration

00:23:23,120 --> 00:23:28,290
rules there's another book called

00:23:26,310 --> 00:23:30,390
continuous integration from the same

00:23:28,290 --> 00:23:31,980
publisher I would recommend to to buy

00:23:30,390 --> 00:23:33,570
this book because it has everything and

00:23:31,980 --> 00:23:35,730
the continuous integration chapter and

00:23:33,570 --> 00:23:39,120
that focus is really great I have to I

00:23:35,730 --> 00:23:41,880
bought to both of the books and buy this

00:23:39,120 --> 00:23:43,950
one you don't need the other one and on

00:23:41,880 --> 00:23:47,400
the right side is this is a blog post as

00:23:43,950 --> 00:23:50,400
also below where the URL is below where

00:23:47,400 --> 00:23:53,640
i wrote a blog post about our CI set up

00:23:50,400 --> 00:23:55,290
with all the plugins that we used and

00:23:53,640 --> 00:23:58,470
all the approaches so that's more in

00:23:55,290 --> 00:24:02,820
detail if you have any questions feel

00:23:58,470 --> 00:24:09,380
free to ask me on Twitter on IRC on that

00:24:02,820 --> 00:24:09,380
block the slides are there and thank you

00:24:15,030 --> 00:24:19,330
thanks Team oh we have time for two

00:24:17,410 --> 00:24:21,100
questions if there's anyone who has a

00:24:19,330 --> 00:24:27,940
question for t-mo put your hand up

00:24:21,100 --> 00:24:31,150
Thanks hi first I wanted to say that

00:24:27,940 --> 00:24:33,340
with nose test you can also output XML

00:24:31,150 --> 00:24:36,160
which can be interpreted by Jenkins and

00:24:33,340 --> 00:24:39,550
described in the web UI and my question

00:24:36,160 --> 00:24:42,370
is what do you do with flaky tests to

00:24:39,550 --> 00:24:44,380
with flaky tests today he pass a test

00:24:42,370 --> 00:24:48,040
that sometimes fail you can't prevent

00:24:44,380 --> 00:24:51,760
yeah i mean that's that's that's hard to

00:24:48,040 --> 00:24:53,620
do what we usually try to do is to to

00:24:51,760 --> 00:24:55,540
make them work reliably and if they

00:24:53,620 --> 00:24:57,310
don't work reliably we remove them

00:24:55,540 --> 00:24:58,870
because personally I don't think it

00:24:57,310 --> 00:25:00,940
makes sense to have a test that fails

00:24:58,870 --> 00:25:02,770
randomly because that does not give you

00:25:00,940 --> 00:25:05,680
any information if that if a test fails

00:25:02,770 --> 00:25:07,120
randomly it's tuna tuna use because if

00:25:05,680 --> 00:25:08,920
it fails it gives gives you no

00:25:07,120 --> 00:25:12,130
information if it passes it gives you no

00:25:08,920 --> 00:25:13,990
information so we try really hard to

00:25:12,130 --> 00:25:15,880
make it work reliably that's especially

00:25:13,990 --> 00:25:18,670
important for selenium test because the

00:25:15,880 --> 00:25:20,440
underlying technology is fragile but you

00:25:18,670 --> 00:25:22,540
can make it work reliably and Jenkins

00:25:20,440 --> 00:25:24,820
helps you a lot with that because if you

00:25:22,540 --> 00:25:26,620
run things in parallel then we will see

00:25:24,820 --> 00:25:29,560
all kinds of effects that you don't see

00:25:26,620 --> 00:25:31,900
on your local machine you have to make

00:25:29,560 --> 00:25:36,550
sure when you run selenium tests that

00:25:31,900 --> 00:25:38,770
you did you yet as you make sure that

00:25:36,550 --> 00:25:41,200
everything is there because the test can

00:25:38,770 --> 00:25:43,840
run slow and fast and it's not not easy

00:25:41,200 --> 00:25:48,880
to do but in my opinion is worth the

00:25:43,840 --> 00:25:52,090
effort to have like reliable test my

00:25:48,880 --> 00:25:55,840
question was that gujju quickly comment

00:25:52,090 --> 00:25:57,690
on on how often like developer step on

00:25:55,840 --> 00:26:00,820
each other's toes when you have so many

00:25:57,690 --> 00:26:02,830
repositories and developers like does it

00:26:00,820 --> 00:26:04,600
happen often do you regret having split

00:26:02,830 --> 00:26:06,940
them out instead of having them in one

00:26:04,600 --> 00:26:08,770
get or do you use each sub modules could

00:26:06,940 --> 00:26:12,520
you please comment on these things

00:26:08,770 --> 00:26:15,700
that's that's the big question that we

00:26:12,520 --> 00:26:18,550
always ask does it make I mean we we

00:26:15,700 --> 00:26:21,040
split our we had a big monolithic

00:26:18,550 --> 00:26:23,200
software blog and we split it onto

00:26:21,040 --> 00:26:25,480
multiple packages multiple multiple

00:26:23,200 --> 00:26:27,850
repositories and it's really great if

00:26:25,480 --> 00:26:30,640
you can as a developer like pick

00:26:27,850 --> 00:26:32,350
things and improve certain packages

00:26:30,640 --> 00:26:34,480
without having to download everything

00:26:32,350 --> 00:26:35,919
right so that's that's a great thing and

00:26:34,480 --> 00:26:37,780
we don't want to lose that on the other

00:26:35,919 --> 00:26:41,260
hand we see the amount of work that is

00:26:37,780 --> 00:26:43,000
necessary to release and keep track of

00:26:41,260 --> 00:26:44,559
all those multiple repositories and we

00:26:43,000 --> 00:26:47,350
haven't really solved that problem that

00:26:44,559 --> 00:26:50,140
you have one commit and 11 build we are

00:26:47,350 --> 00:26:53,049
close but we don't have it so it's a

00:26:50,140 --> 00:26:55,240
trade-off in the end it's it's it's hard

00:26:53,049 --> 00:27:00,600
to say I don't think that we will go

00:26:55,240 --> 00:27:05,640
back to one repository approach but I

00:27:00,600 --> 00:27:05,640
can see the the advantages that you have

00:27:06,299 --> 00:27:14,169
yeah yeah that's yet as possible yeah

00:27:10,900 --> 00:27:15,460
that that's possible but then you still

00:27:14,169 --> 00:27:16,990
do a check out and then you can't be

00:27:15,460 --> 00:27:18,640
sure that that's basically you're saying

00:27:16,990 --> 00:27:21,039
we are using actually mr. developer

00:27:18,640 --> 00:27:23,020
which is a tool that checks out all the

00:27:21,039 --> 00:27:24,190
packages for you and make sure that you

00:27:23,020 --> 00:27:26,020
have to write branches is pretty

00:27:24,190 --> 00:27:29,230
sophisticated pretty cool but it's

00:27:26,020 --> 00:27:31,750
complex and we try to store known good

00:27:29,230 --> 00:27:33,730
sets of this so we had for all our 300

00:27:31,750 --> 00:27:37,570
packages we store the version numbers or

00:27:33,730 --> 00:27:38,590
the the commits hashes and stuff like

00:27:37,570 --> 00:27:40,840
that and we try to make that

00:27:38,590 --> 00:27:44,490
reproducible but it was just too complex

00:27:40,840 --> 00:27:46,630
we failed at that that just did not work

00:27:44,490 --> 00:27:49,020
great thank you very much team a great

00:27:46,630 --> 00:27:49,020

YouTube URL: https://www.youtube.com/watch?v=uPeHwxfYB_I


