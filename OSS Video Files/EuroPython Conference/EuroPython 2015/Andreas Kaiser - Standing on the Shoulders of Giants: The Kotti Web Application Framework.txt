Title: Andreas Kaiser - Standing on the Shoulders of Giants: The Kotti Web Application Framework
Publication date: 2015-08-08
Playlist: EuroPython 2015
Description: 
	Andreas Kaiser - Standing on the Shoulders of Giants: The Kotti Web Application Framework
[EuroPython 2015]
[20 July 2015]
[Bilbao, Euskadi, Spain]

Kotti is a high-level, Pythonic web application framework based on
Pyramid, SQLAlchemy and Bootstrap 3.  It includes an extensible
Content Management System called the Kotti CMS.  Kotti is particularly
well suited for building custom applications with object level
security.  It comes with complete user and group management and
supports the concepts of global and local roles providing management
views for each of those.

The talk will give an overview on Kotti, its philosophy, history and
future. Target audience are people who want to learn what it is and
can be used for.  Because Kotti is just a rather small layer on top of
its foundations, the talk might also give some interesting insights on
how to build a solid (web) framework that suits your personal
preferences.

References:

 - http://kotti.pylonsproject.org/
 - http://kotti.readthedocs.org/en/latest/
Captions: 
	00:00:02,179 --> 00:00:08,550
I'm andreas as he said already i live

00:00:06,180 --> 00:00:11,820
and work in germany in a small town in

00:00:08,550 --> 00:00:13,410
the odds curves of to sod off I'm not

00:00:11,820 --> 00:00:15,450
really used to giving talks at

00:00:13,410 --> 00:00:17,430
conferences so please be patient with me

00:00:15,450 --> 00:00:21,150
and I hope you can stand my excellent

00:00:17,430 --> 00:00:24,029
for the next 25 minutes this talk is

00:00:21,150 --> 00:00:26,730
obviously going to be about cati it will

00:00:24,029 --> 00:00:30,029
cover why Katya came into existence in

00:00:26,730 --> 00:00:32,969
the first place who these Giants are on

00:00:30,029 --> 00:00:35,280
whose shoulders kotti is standing how

00:00:32,969 --> 00:00:37,739
could he is standing is built on top of

00:00:35,280 --> 00:00:41,250
them and finally I show you some

00:00:37,739 --> 00:00:42,960
examples to make it easier for you to

00:00:41,250 --> 00:00:47,129
understand what it's like to work with

00:00:42,960 --> 00:00:50,039
Katya so yet another web framework

00:00:47,129 --> 00:00:52,890
really and they're already dozens or

00:00:50,039 --> 00:00:55,980
even hundreds of them why not just pick

00:00:52,890 --> 00:00:58,020
one of them as a matter of fact all of

00:00:55,980 --> 00:01:01,520
the cati core developers have some

00:00:58,020 --> 00:01:03,719
common history and that history is blown

00:01:01,520 --> 00:01:05,640
plone is a full-featured condom

00:01:03,719 --> 00:01:08,970
management system it has lots and lots

00:01:05,640 --> 00:01:12,900
of add-ons and it has some unique

00:01:08,970 --> 00:01:14,790
features one of them is the object file

00:01:12,900 --> 00:01:19,409
system which is a simple yet effective

00:01:14,790 --> 00:01:22,560
way to persist objects you can more or

00:01:19,409 --> 00:01:25,140
less store plain objects into an object

00:01:22,560 --> 00:01:29,509
database and it supports a treaty or

00:01:25,140 --> 00:01:34,049
file like folder folder and file like

00:01:29,509 --> 00:01:36,600
object tree clone has some great

00:01:34,049 --> 00:01:39,299
security features it has the concepts of

00:01:36,600 --> 00:01:42,150
groups users roads and permissions which

00:01:39,299 --> 00:01:46,500
enables you to write applications with

00:01:42,150 --> 00:01:49,380
very fine grained security also

00:01:46,500 --> 00:01:53,220
workflows and absolute killer feature of

00:01:49,380 --> 00:01:58,110
clone the office of the underlying soap

00:01:53,220 --> 00:02:00,329
that was unprecedented at that time so

00:01:58,110 --> 00:02:02,520
if you have a classic content management

00:02:00,329 --> 00:02:04,560
use case or you need an enterprise

00:02:02,520 --> 00:02:07,439
content management system application

00:02:04,560 --> 00:02:09,950
it's probably a perfect solution but if

00:02:07,439 --> 00:02:13,330
you need to implement highly customized

00:02:09,950 --> 00:02:15,790
application with some CMS like features

00:02:13,330 --> 00:02:18,880
it can quickly become overkill and a

00:02:15,790 --> 00:02:20,710
major pain it often has too many

00:02:18,880 --> 00:02:23,020
features out of the box that you just

00:02:20,710 --> 00:02:26,100
don't need and you constantly find

00:02:23,020 --> 00:02:28,990
yourself fighting against the framework

00:02:26,100 --> 00:02:31,750
this is particularly caused by the

00:02:28,990 --> 00:02:34,300
underlying software stack the plone

00:02:31,750 --> 00:02:37,600
system itself is huge it consists of

00:02:34,300 --> 00:02:39,400
some 300 packages it uses multiple

00:02:37,600 --> 00:02:42,100
competing technologies under the hood

00:02:39,400 --> 00:02:45,220
which don't conform to the Zen of Python

00:02:42,100 --> 00:02:48,400
to have preferably one and exactly one

00:02:45,220 --> 00:02:51,160
obvious way to do things it's based both

00:02:48,400 --> 00:02:53,770
on the monolithic so to enter

00:02:51,160 --> 00:02:56,260
component-based sub 3 stacks it uses

00:02:53,770 --> 00:02:59,920
adapters multi adapters utilities all

00:02:56,260 --> 00:03:05,140
over the place and long story short it

00:02:59,920 --> 00:03:07,209
doesn't fit my brain so fortunately

00:03:05,140 --> 00:03:10,420
there are smarter people than me who

00:03:07,209 --> 00:03:13,510
have similar history and wants to

00:03:10,420 --> 00:03:16,900
preserve the most important features

00:03:13,510 --> 00:03:19,150
that soap pioneer back in the days this

00:03:16,900 --> 00:03:21,910
all with a modern clean and maintainable

00:03:19,150 --> 00:03:25,690
called codebase this was the birth of

00:03:21,910 --> 00:03:27,550
pyramid then known as reposed vfg the

00:03:25,690 --> 00:03:32,470
probability greatest thing about pyramid

00:03:27,550 --> 00:03:35,650
is it even fits my brain it has a small

00:03:32,470 --> 00:03:38,560
car it has excellent documentation it is

00:03:35,650 --> 00:03:41,500
pythonic and rather low level which is

00:03:38,560 --> 00:03:44,920
why you can also sort it into the group

00:03:41,500 --> 00:03:47,530
of micro frameworks and it's all you

00:03:44,920 --> 00:03:49,510
also underpinned ated which means it

00:03:47,530 --> 00:03:52,420
makes no assumptions about stuff like

00:03:49,510 --> 00:03:54,280
persistence and forms and only basic

00:03:52,420 --> 00:03:56,440
assumptions about authentication and

00:03:54,280 --> 00:03:58,510
authorization which you could call the

00:03:56,440 --> 00:04:01,690
least common denominator for all kinds

00:03:58,510 --> 00:04:03,910
of web applications this all makes it a

00:04:01,690 --> 00:04:05,830
great framework framework the framework

00:04:03,910 --> 00:04:10,840
to build your own framework which

00:04:05,830 --> 00:04:12,459
supports your opinions so pyramid only

00:04:10,840 --> 00:04:14,590
provides what you need in every web

00:04:12,459 --> 00:04:17,220
application it doesn't come with

00:04:14,590 --> 00:04:19,780
unneeded ballast and there's no need to

00:04:17,220 --> 00:04:22,660
waste time fighting the frameworks

00:04:19,780 --> 00:04:25,150
decisions this makes it a perfect

00:04:22,660 --> 00:04:27,729
foundation for your own framework

00:04:25,150 --> 00:04:29,680
so what's left to do is make some

00:04:27,729 --> 00:04:33,660
choices that Kermit doesn't make for us

00:04:29,680 --> 00:04:37,000
by intention trust we need to make our

00:04:33,660 --> 00:04:38,710
about persistence of this V you need

00:04:37,000 --> 00:04:41,949
some means of storage for most

00:04:38,710 --> 00:04:45,100
applications templating forms and user

00:04:41,949 --> 00:04:49,509
input validation and authentication and

00:04:45,100 --> 00:04:53,199
authorization sources amongst others so

00:04:49,509 --> 00:04:56,340
first resistance sequel I cami it's

00:04:53,199 --> 00:04:58,930
probably the most advanced Python object

00:04:56,340 --> 00:05:01,090
relational mapping out there it's

00:04:58,930 --> 00:05:02,949
completely database agnostic mean

00:05:01,090 --> 00:05:06,520
meaning that supports all your

00:05:02,949 --> 00:05:08,590
relational databases there's many nice

00:05:06,520 --> 00:05:11,169
useful features that Katya makes use of

00:05:08,590 --> 00:05:13,389
like hybrid properties Association

00:05:11,169 --> 00:05:17,080
proxies and ordering lists I won't go

00:05:13,389 --> 00:05:20,169
into detail here and particularly useful

00:05:17,080 --> 00:05:22,900
is that transactions can be bound to the

00:05:20,169 --> 00:05:25,630
lifecycle of a pyramid request through

00:05:22,900 --> 00:05:30,550
the use of the pyramid TM and soap top

00:05:25,630 --> 00:05:33,490
secret like of the packages so what Cody

00:05:30,550 --> 00:05:36,460
does is it implements a node class in

00:05:33,490 --> 00:05:38,560
pure sequel alchemy that implements what

00:05:36,460 --> 00:05:42,370
we had with the object file system and

00:05:38,560 --> 00:05:44,470
soap it follows the adjacency list

00:05:42,370 --> 00:05:47,139
pattern which means every node in the

00:05:44,470 --> 00:05:51,370
tree knows about its parent and its

00:05:47,139 --> 00:05:53,530
children the obviously is a single root

00:05:51,370 --> 00:05:57,610
node the one which doesn't have a parent

00:05:53,530 --> 00:06:01,840
and the node class also supports the

00:05:57,610 --> 00:06:03,880
dictionary protocol implementing the

00:06:01,840 --> 00:06:05,889
dictionary protocol means that you can

00:06:03,880 --> 00:06:10,630
treat any instance of the node class as

00:06:05,889 --> 00:06:14,080
kind of dictionary and get items by the

00:06:10,630 --> 00:06:16,900
name and key meaning get children's by

00:06:14,080 --> 00:06:20,289
their name and you can also set them

00:06:16,900 --> 00:06:23,949
like you would with dictionary so this

00:06:20,289 --> 00:06:29,680
code here actually is working code in

00:06:23,949 --> 00:06:33,010
Cote which allows you to get a child of

00:06:29,680 --> 00:06:37,110
the root element or to add a new tried

00:06:33,010 --> 00:06:37,110
to the root of type document

00:06:39,240 --> 00:06:45,970
the dictionary protocol allows us

00:06:42,160 --> 00:06:48,130
instantaneously to give us

00:06:45,970 --> 00:06:51,040
instantaneously traversal support with

00:06:48,130 --> 00:06:52,870
pyramid because pyramid only requires

00:06:51,040 --> 00:06:56,380
under under get item method to be

00:06:52,870 --> 00:07:01,140
implemented which is exactly what the

00:06:56,380 --> 00:07:05,230
dick protocol does beyond that we also

00:07:01,140 --> 00:07:07,930
have an ACL property on the node class

00:07:05,230 --> 00:07:14,740
to have persistent and inheritable

00:07:07,930 --> 00:07:16,570
access control lists in Cote equal

00:07:14,740 --> 00:07:19,420
alchemy is set up to do polymorphic

00:07:16,570 --> 00:07:21,640
queries queries this means a single

00:07:19,420 --> 00:07:25,900
query can return objects of multiple

00:07:21,640 --> 00:07:28,690
types for example if you very if you're

00:07:25,900 --> 00:07:31,960
creating for notes it will hand you back

00:07:28,690 --> 00:07:35,580
instances of document and fire if that

00:07:31,960 --> 00:07:35,580
note who happens to be of these types

00:07:36,780 --> 00:07:41,560
join table inheritance is another nice

00:07:39,550 --> 00:07:44,440
feature and seeker like me that we use

00:07:41,560 --> 00:07:46,320
in quatie it means that the class

00:07:44,440 --> 00:07:49,210
Hayashi hierarchical inheritance

00:07:46,320 --> 00:07:52,690
hierarchy is broken up among dependent

00:07:49,210 --> 00:07:55,960
tables so each class is represented by

00:07:52,690 --> 00:07:58,360
its own table and the respective table

00:07:55,960 --> 00:08:03,220
only includes attributes that are local

00:07:58,360 --> 00:08:04,690
to this class the last feature of secret

00:08:03,220 --> 00:08:07,570
alchemy that I'd like to mention our

00:08:04,690 --> 00:08:10,240
events sickle economy has a lot of them

00:08:07,570 --> 00:08:13,690
but okati TV actually only use one

00:08:10,240 --> 00:08:16,360
they'll be for flash you end a flush is

00:08:13,690 --> 00:08:19,330
basically the moment when sequel alchemy

00:08:16,360 --> 00:08:21,970
talks to the database it's not the same

00:08:19,330 --> 00:08:25,120
as a commit it's rather secret alchemy

00:08:21,970 --> 00:08:27,880
emitting sequel and sending it to the DB

00:08:25,120 --> 00:08:31,270
which can happen multiple times during a

00:08:27,880 --> 00:08:37,330
transaction of course a commit are

00:08:31,270 --> 00:08:39,150
always includes a flash a sequel I can

00:08:37,330 --> 00:08:44,520
me before flash event can trigger

00:08:39,150 --> 00:08:47,980
multiple more nuanced events in catia

00:08:44,520 --> 00:08:49,550
this is a mere convenience thing so it

00:08:47,980 --> 00:08:58,630
eases you

00:08:49,550 --> 00:08:58,630
to to have respective event subscribers

00:08:59,019 --> 00:09:05,690
so not exactly part of 'secret economy

00:09:02,360 --> 00:09:08,079
were only also closely related and also

00:09:05,690 --> 00:09:10,820
written by the same author is a lambic

00:09:08,079 --> 00:09:13,690
alembic is a package a database

00:09:10,820 --> 00:09:15,620
migration tool that supports

00:09:13,690 --> 00:09:18,470
transactional data definition language

00:09:15,620 --> 00:09:22,190
operations if your database does support

00:09:18,470 --> 00:09:25,220
it and transactional data manipulation

00:09:22,190 --> 00:09:28,700
language operations another useful

00:09:25,220 --> 00:09:31,970
feature is that it supports multiple

00:09:28,700 --> 00:09:36,320
environments this comes in extremely

00:09:31,970 --> 00:09:38,390
handy for add-ons in catia so each ad on

00:09:36,320 --> 00:09:42,910
can have its own migration environment

00:09:38,390 --> 00:09:45,740
which is independent of the others cody

00:09:42,910 --> 00:09:49,100
includes the script to perform either

00:09:45,740 --> 00:09:51,529
specific migrations or all migrations

00:09:49,100 --> 00:09:53,600
for itself and all its add-ons at once

00:09:51,529 --> 00:09:57,730
you can either upgrade to a specific

00:09:53,600 --> 00:09:59,959
version or to the latest known revision

00:09:57,730 --> 00:10:02,540
downgrades are also supported by a

00:09:59,959 --> 00:10:04,970
lambic and also by cati for the case

00:10:02,540 --> 00:10:08,240
that something goes wrong during a

00:10:04,970 --> 00:10:10,459
migration and your database that not

00:10:08,240 --> 00:10:15,170
does not support transactional data

00:10:10,459 --> 00:10:17,420
definition language so user interface

00:10:15,170 --> 00:10:19,550
unless you have a user interface

00:10:17,420 --> 00:10:21,649
designer on your team and can be sure

00:10:19,550 --> 00:10:27,350
that you will stay just use bootstrap

00:10:21,649 --> 00:10:30,140
you can do much wrong with it next forms

00:10:27,350 --> 00:10:33,890
most form libraries handle creation of

00:10:30,140 --> 00:10:35,899
forms as well as their validation kelana

00:10:33,890 --> 00:10:39,470
and deform are different in that aspect

00:10:35,899 --> 00:10:43,040
but with calendar you can define the

00:10:39,470 --> 00:10:46,279
data schema validate and deserialize

00:10:43,040 --> 00:10:50,500
HTML forms as well as JSON or XML data

00:10:46,279 --> 00:10:54,140
and serialized Python structures two

00:10:50,500 --> 00:10:58,850
strings meetings and lists that can be

00:10:54,140 --> 00:11:01,730
consumed by G form which inform only

00:10:58,850 --> 00:11:05,130
renders the form

00:11:01,730 --> 00:11:07,860
deformed to use of bootstrap 3 out of

00:11:05,130 --> 00:11:10,800
the box you could change that but we

00:11:07,860 --> 00:11:13,380
don't need to because that's the choice

00:11:10,800 --> 00:11:16,110
we also make for catia insect deform to

00:11:13,380 --> 00:11:18,240
is a merch of deform one and deform

00:11:16,110 --> 00:11:22,500
bootstrap which was a package by the

00:11:18,240 --> 00:11:29,330
cati developers that provided give for

00:11:22,500 --> 00:11:31,800
bootstrap templates for different one so

00:11:29,330 --> 00:11:34,620
reposted workflow is another package

00:11:31,800 --> 00:11:37,170
from the pylons ecosystem a Content

00:11:34,620 --> 00:11:39,110
workflow system that supports the

00:11:37,170 --> 00:11:42,180
concepts of states and transitions

00:11:39,110 --> 00:11:44,550
states define roles to permission

00:11:42,180 --> 00:11:47,550
mappings and transitions define

00:11:44,550 --> 00:11:49,800
transitions between these states and the

00:11:47,550 --> 00:11:53,100
circumstances in which they might be

00:11:49,800 --> 00:11:55,680
executed and actually this package

00:11:53,100 --> 00:11:59,460
allows us to implement the complete an

00:11:55,680 --> 00:12:07,620
exact feature set that we had in zoeb

00:11:59,460 --> 00:12:11,190
earlier depot is another giant that

00:12:07,620 --> 00:12:13,080
recently made it into cati I will cover

00:12:11,190 --> 00:12:17,010
that because I've seen there's a talk

00:12:13,080 --> 00:12:21,030
tomorrow at eleven in berea too so visit

00:12:17,010 --> 00:12:25,770
that one and that finally come to cody

00:12:21,030 --> 00:12:29,250
it safe as mentioned in the talk outline

00:12:25,770 --> 00:12:35,970
kotti is rather small package that wires

00:12:29,250 --> 00:12:39,120
up all those giants in a sensible way it

00:12:35,970 --> 00:12:41,460
was started in 2011 by tanya nui and he

00:12:39,120 --> 00:12:44,310
did the first version in just two days

00:12:41,460 --> 00:12:47,010
and that already contained the node

00:12:44,310 --> 00:12:49,470
class with all its features I learned

00:12:47,010 --> 00:12:54,930
about cutting a year later and joint the

00:12:49,470 --> 00:12:56,670
project almost immediately I'm giving

00:12:54,930 --> 00:13:04,350
the rest because I'm running out of time

00:12:56,670 --> 00:13:06,480
ahead already code quality is extremely

00:13:04,350 --> 00:13:09,110
important thing to us we have an

00:13:06,480 --> 00:13:11,910
extensive tests suit based on pie tests

00:13:09,110 --> 00:13:15,030
we make heavy use of reasonable fixtures

00:13:11,910 --> 00:13:18,360
that I exported as a pie chest plugin

00:13:15,030 --> 00:13:24,000
can be consumed by katia dons we have

00:13:18,360 --> 00:13:27,600
continuous integration we use some tools

00:13:24,000 --> 00:13:29,040
for aesthetic source code analysis we

00:13:27,600 --> 00:13:30,930
shouldn't blindly follow all of their

00:13:29,040 --> 00:13:33,180
suggestions but they can give very

00:13:30,930 --> 00:13:36,480
valuable insights on your code and help

00:13:33,180 --> 00:13:39,570
you to improve it further so and we also

00:13:36,480 --> 00:13:44,930
keep to try to keep our requirements up

00:13:39,570 --> 00:13:49,220
to date and succeed with that until now

00:13:44,930 --> 00:13:54,750
Katia is exclusively configured through

00:13:49,220 --> 00:13:56,880
any files as Scott explained pyramid and

00:13:54,750 --> 00:13:58,620
therefore also whiskey application you

00:13:56,880 --> 00:14:04,410
can run it under your preferred whiskey

00:13:58,620 --> 00:14:06,480
server almost every aspect of cody can

00:14:04,410 --> 00:14:09,510
be configured with with an option in

00:14:06,480 --> 00:14:11,850
these fights so cati provides sensible

00:14:09,510 --> 00:14:16,650
defaults for each option so that you

00:14:11,850 --> 00:14:17,850
don't have to specify any of them but

00:14:16,650 --> 00:14:20,700
the important thing to take away from

00:14:17,850 --> 00:14:23,090
this is you can can overwrite almost

00:14:20,700 --> 00:14:28,200
everything in cati but you don't need to

00:14:23,090 --> 00:14:31,320
I'm skipping those options also so let

00:14:28,200 --> 00:14:33,260
me just give you one example of how we

00:14:31,320 --> 00:14:36,560
combine multiple best-of-breed

00:14:33,260 --> 00:14:40,440
components to a fully functional system

00:14:36,560 --> 00:14:43,080
with regard through security we use

00:14:40,440 --> 00:14:45,480
secure like me to stop principles that

00:14:43,080 --> 00:14:49,110
is users and groups in the database and

00:14:45,480 --> 00:14:52,620
it Ted attach inheritable ACS to each

00:14:49,110 --> 00:14:55,620
node use pyramid for the process of

00:14:52,620 --> 00:14:58,290
authentication and authorization and we

00:14:55,620 --> 00:15:02,480
used reports that workflow to recompute

00:14:58,290 --> 00:15:08,580
these ACS on every workflow state change

00:15:02,480 --> 00:15:12,150
so code example people provide a

00:15:08,580 --> 00:15:14,280
complete cati scaphoid based on the p

00:15:12,150 --> 00:15:17,040
create to affirm pyramid with cody and

00:15:14,280 --> 00:15:20,040
after running the quant you will have a

00:15:17,040 --> 00:15:22,890
fully functional add-on for Katya with a

00:15:20,040 --> 00:15:24,480
complete test suit and continuous

00:15:22,890 --> 00:15:27,720
integration and travis also set up

00:15:24,480 --> 00:15:28,400
already that created package contains a

00:15:27,720 --> 00:15:31,100
custom

00:15:28,400 --> 00:15:33,130
type default and alternatives used for

00:15:31,100 --> 00:15:36,950
the type completely set up

00:15:33,130 --> 00:15:39,320
internationalisation structure also a

00:15:36,950 --> 00:15:44,810
migration environment for use with

00:15:39,320 --> 00:15:47,840
alembic and that scaffold is also always

00:15:44,810 --> 00:15:49,820
kept up to date to adhere to the recent

00:15:47,840 --> 00:15:52,610
coding conventions as suggested by

00:15:49,820 --> 00:15:55,100
makati team and it's as we're completely

00:15:52,610 --> 00:15:57,470
tested with on within our continuous

00:15:55,100 --> 00:16:04,520
integration infrastructure so we can be

00:15:57,470 --> 00:16:07,310
sure that it works at any time okay I

00:16:04,520 --> 00:16:10,280
have to run a bit with the custom

00:16:07,310 --> 00:16:13,880
content type looks similar to this it

00:16:10,280 --> 00:16:16,280
inherits from katia content class which

00:16:13,880 --> 00:16:18,560
is again just the same default that you

00:16:16,280 --> 00:16:22,640
should probably inherit all your types

00:16:18,560 --> 00:16:25,460
from it has a primary and foreign key to

00:16:22,640 --> 00:16:27,800
the parents table IDK column that's

00:16:25,460 --> 00:16:31,640
needed for the joint table inheritance

00:16:27,800 --> 00:16:33,860
of sequel alchemy and then it adds the

00:16:31,640 --> 00:16:35,900
attributes that are actually edit by

00:16:33,860 --> 00:16:39,740
this class in addition to the inherited

00:16:35,900 --> 00:16:42,080
ones so last there's a type info that

00:16:39,740 --> 00:16:44,270
Ted Scotty how where and under which

00:16:42,080 --> 00:16:45,710
conditions that content type should be

00:16:44,270 --> 00:16:50,780
made available through the user

00:16:45,710 --> 00:16:58,100
interface which then resides in this

00:16:50,780 --> 00:17:00,790
drop-down a calendar schema is

00:16:58,100 --> 00:17:04,310
responsible for serialization DC

00:17:00,790 --> 00:17:08,630
realization validation and form creation

00:17:04,310 --> 00:17:12,080
to deform it also inherits from the

00:17:08,630 --> 00:17:14,959
parent schema and only allows only at

00:17:12,080 --> 00:17:18,770
schema nodes that are provided by the

00:17:14,959 --> 00:17:22,130
custom content class the add and edit

00:17:18,770 --> 00:17:24,950
forms there like everything in quatie

00:17:22,130 --> 00:17:27,440
plane geometry reviews that are

00:17:24,950 --> 00:17:34,330
configured by the user view conflict

00:17:27,440 --> 00:17:36,740
decorator the actual form rendering and

00:17:34,330 --> 00:17:40,310
validation is again provided by the base

00:17:36,740 --> 00:17:41,940
classes so you don't need neat too you

00:17:40,310 --> 00:17:43,440
don't have to write a single line of

00:17:41,940 --> 00:17:46,529
out for that unless you want something

00:17:43,440 --> 00:17:48,419
to be done differently and what you see

00:17:46,529 --> 00:17:53,220
here is the complete and working example

00:17:48,419 --> 00:17:56,250
there's nothing left out so this is what

00:17:53,220 --> 00:18:03,269
the form looks like within validation

00:17:56,250 --> 00:18:06,870
error yeah last but not least here's the

00:18:03,269 --> 00:18:09,330
code for a simple view again just

00:18:06,870 --> 00:18:13,679
ordinary pyramid views just like

00:18:09,330 --> 00:18:17,870
everything cati in this first view there

00:18:13,679 --> 00:18:21,269
is a template specified for rendering

00:18:17,870 --> 00:18:23,100
and cut you use the chameleon templating

00:18:21,269 --> 00:18:26,820
language but you can choose anything

00:18:23,100 --> 00:18:37,190
that's supported by privet ok I have to

00:18:26,820 --> 00:18:37,190
come to the end ok future of Corti Corti

00:18:37,250 --> 00:18:43,100
will always stay lean and mean in all of

00:18:40,110 --> 00:18:45,539
the right ways so they won't go any

00:18:43,100 --> 00:18:48,720
features into the core that can be

00:18:45,539 --> 00:18:50,610
packaged into an error on we're even

00:18:48,720 --> 00:18:53,100
thinking of moving some features out of

00:18:50,610 --> 00:18:55,919
the car into add-ons for example we have

00:18:53,100 --> 00:18:59,909
a mass file upload feature that requires

00:18:55,919 --> 00:19:01,769
some JavaScript libraries that are up I

00:18:59,909 --> 00:19:05,519
have heavy and only required for that

00:19:01,769 --> 00:19:10,320
particular feature so the primary goal

00:19:05,519 --> 00:19:13,830
of catia is to stay lean and clean yeah

00:19:10,320 --> 00:19:18,509
and we don't have Python 3 support yet

00:19:13,830 --> 00:19:21,720
but all of our dependencies right now

00:19:18,509 --> 00:19:24,269
supported and it simply hasn't been done

00:19:21,720 --> 00:19:26,519
but it shouldn't be a lot of work and if

00:19:24,269 --> 00:19:29,399
someone would be interested in working

00:19:26,519 --> 00:19:34,730
on that conference I'd be happy to team

00:19:29,399 --> 00:19:38,419
up so thank you try out your safe and

00:19:34,730 --> 00:19:38,419
thank you for listening

00:19:40,910 --> 00:19:48,570
so we do have time would you have them

00:19:43,560 --> 00:19:53,160
for questions about five minutes see any

00:19:48,570 --> 00:19:56,310
questions yes when representing metrics

00:19:53,160 --> 00:20:02,640
and how do we correctly measure what we

00:19:56,310 --> 00:20:05,370
care thank you so with defining your

00:20:02,640 --> 00:20:08,040
content types you have the polymorphic

00:20:05,370 --> 00:20:10,290
join that will bring back the actual sub

00:20:08,040 --> 00:20:13,770
or the content types that you declare as

00:20:10,290 --> 00:20:16,670
you declare more content types on a lot

00:20:13,770 --> 00:20:18,840
of the cati queries is it doing a join

00:20:16,670 --> 00:20:22,710
across all those tables or what's the

00:20:18,840 --> 00:20:25,640
effect on performance it depends how

00:20:22,710 --> 00:20:27,990
long this join gets but actually what on

00:20:25,640 --> 00:20:31,470
relational databases are really good at

00:20:27,990 --> 00:20:35,730
this so it's never come to an issue for

00:20:31,470 --> 00:20:38,580
us yet and we have quite large systems

00:20:35,730 --> 00:20:42,300
with a lot of inherent turns and multi

00:20:38,580 --> 00:20:45,570
billion rows so it works second question

00:20:42,300 --> 00:20:47,910
if I may so I downloaded it and was just

00:20:45,570 --> 00:20:51,480
looking at the debug output with a lot

00:20:47,910 --> 00:20:54,180
of the ico checks for like a nested

00:20:51,480 --> 00:20:59,420
hierarchy of content and it seemed to be

00:20:54,180 --> 00:21:03,090
querying the database for the same ACL

00:20:59,420 --> 00:21:04,800
validations quite a bit for different

00:21:03,090 --> 00:21:07,980
parts of the UI so it didn't seem to be

00:21:04,800 --> 00:21:11,310
coaching the result is that's something

00:21:07,980 --> 00:21:13,530
that I was just noticing or is it um I

00:21:11,310 --> 00:21:15,300
don't know right now what do you mean by

00:21:13,530 --> 00:21:21,800
that you could you could show me later

00:21:15,300 --> 00:21:21,800
perhaps okay any more questions

00:21:25,800 --> 00:21:31,270
we need to get it in a microphone

00:21:28,750 --> 00:21:33,820
sizably hello thank you very much for

00:21:31,270 --> 00:21:35,410
the for the talk so I'm not really all

00:21:33,820 --> 00:21:38,710
this technology I just know the basics

00:21:35,410 --> 00:21:44,830
what would be the major advantage versus

00:21:38,710 --> 00:21:47,800
jungle of last for example yeah you

00:21:44,830 --> 00:21:51,280
cannot probably compare it directly it

00:21:47,800 --> 00:21:52,900
would compare pyramid to flask which

00:21:51,280 --> 00:21:56,140
both are my kind of microphone works

00:21:52,900 --> 00:22:00,280
Django is more macro framework if you

00:21:56,140 --> 00:22:06,520
will which contains it on its own RM and

00:22:00,280 --> 00:22:08,530
Katya is just a bundle of technologies

00:22:06,520 --> 00:22:12,400
that we use in combination with pyramid

00:22:08,530 --> 00:22:15,100
so if you like to use pyramid and your

00:22:12,400 --> 00:22:17,860
prefer to persistence layer happens to

00:22:15,100 --> 00:22:19,510
the sequel alchemy then Katya does a lot

00:22:17,860 --> 00:22:25,690
of things for you already that you can

00:22:19,510 --> 00:22:28,090
use any more questions I do have a quick

00:22:25,690 --> 00:22:32,260
one and what kind of applications do you

00:22:28,090 --> 00:22:35,920
make with this framework we do make all

00:22:32,260 --> 00:22:40,990
kinds of applications some of them with

00:22:35,920 --> 00:22:44,890
large user contributed content we do

00:22:40,990 --> 00:22:46,540
make custom applications where the small

00:22:44,890 --> 00:22:50,800
part needs a content management system

00:22:46,540 --> 00:22:56,320
but not a full-featured beats like clone

00:22:50,800 --> 00:22:59,620
or Django CMS or something like that the

00:22:56,320 --> 00:23:02,260
advantage is that the framework doesn't

00:22:59,620 --> 00:23:05,110
get in your way so you basically have a

00:23:02,260 --> 00:23:07,270
plain pyramid application with all you

00:23:05,110 --> 00:23:10,170
can do in pyramid Katya is nothing more

00:23:07,270 --> 00:23:14,550
it doesn't add conventions so it just

00:23:10,170 --> 00:23:20,320
configures pyramid in a meaningful way

00:23:14,550 --> 00:23:23,430
no questions I think we could say thank

00:23:20,320 --> 00:23:23,430

YouTube URL: https://www.youtube.com/watch?v=n8PTMoKHfkk


