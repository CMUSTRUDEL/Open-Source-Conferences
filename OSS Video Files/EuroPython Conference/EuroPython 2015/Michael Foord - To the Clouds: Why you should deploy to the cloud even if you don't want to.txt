Title: Michael Foord - To the Clouds: Why you should deploy to the cloud even if you don't want to
Publication date: 2015-08-08
Playlist: EuroPython 2015
Description: 
	Michael Foord - To the Clouds: Why you should deploy to the cloud even if you don't want to
[EuroPython 2015]
[21 July 2015]
[Bilbao, Euskadi, Spain]

Do you deploy your Python services to Amazon EC2, or to Openstack, or
even to HP cloud, joyent or Azure? Do you want to - without being tied
into any one of them? What about local full stack deployments with lxc
or kvm containers?

Even if you're convinced you don't need "the cloud" because you manage
your own servers, amazing technologies like Private clouds and MaaS,
for dynamic server management on bare metal, may change your mind.

Fed up with the cloud hype? Let us rehabilitate the buzzword! (A bit anyway.)

A fully automated cloud deployment system is essential for rapid
scaling, but it's also invaluable for full stack testing on continuous
integration systems. Even better, your service deployment and
infrastructure can be managed with Python code? (Devops distilled)

Treat your servers as cattle not as pets, for service oriented
repeatable deployments on your choice of back-end. Learn how service
orchestration is a powerful new approach to deployment management, and
do it with Python! If any of this sounds interesting then Juju maybe
for you!

In this talk we'll see a demo deployment for a Django application and
related infrastructure. We'll be looking at the key benefits of cloud
deployments and how service orchestration is different from the
"machine provisioning" approach of most existing cloud deployment
solutions.
Captions: 
	00:00:02,270 --> 00:00:13,410
can you hear me ah wonderful I'll put

00:00:05,819 --> 00:00:16,680
this one down so I'm Michael Ford I work

00:00:13,410 --> 00:00:19,920
for canonical on a project called jutsu

00:00:16,680 --> 00:00:23,160
that's written in go I've been a Python

00:00:19,920 --> 00:00:25,500
developer for about 13 years now and a

00:00:23,160 --> 00:00:30,570
Python core developer for about eight of

00:00:25,500 --> 00:00:35,969
those years I released or created unit

00:00:30,570 --> 00:00:38,520
test two and the mock library which

00:00:35,969 --> 00:00:41,219
reflects my particular interest of my

00:00:38,520 --> 00:00:44,420
particular passion for testing I think

00:00:41,219 --> 00:00:46,500
good testing practices are the only ways

00:00:44,420 --> 00:00:53,370
certainly an important part of keeping

00:00:46,500 --> 00:00:58,250
developers same and this is this is my

00:00:53,370 --> 00:00:58,250
colleague and actually my boss de mesa

00:00:59,300 --> 00:01:09,530
can't hear me i'm dimitri riding off I

00:01:06,000 --> 00:01:11,790
work with Michael in canonical on the

00:01:09,530 --> 00:01:15,000
hopefully next generation cloud

00:01:11,790 --> 00:01:27,600
orchestration framework sweet system

00:01:15,000 --> 00:01:29,759
juju and here is our talk so the talk is

00:01:27,600 --> 00:01:32,970
called to the clouds and it's about

00:01:29,759 --> 00:01:35,189
deploying applications and services to

00:01:32,970 --> 00:01:37,320
the clouds and why you should probably

00:01:35,189 --> 00:01:40,740
be deploying to the cloud even if you

00:01:37,320 --> 00:01:42,030
don't want to because we're talking

00:01:40,740 --> 00:01:44,909
about the cloud we're going to have a

00:01:42,030 --> 00:01:47,310
lot of buzz words the cloud is a piece

00:01:44,909 --> 00:01:49,409
of jargon that's had a lot of hype over

00:01:47,310 --> 00:01:51,869
the last decade really and I'm hoping

00:01:49,409 --> 00:01:54,619
that in this talk will rehabilitate the

00:01:51,869 --> 00:01:57,060
term a little bit and show how there's

00:01:54,619 --> 00:01:59,040
despite the hype there's actually a

00:01:57,060 --> 00:02:02,479
useful set of technologies and

00:01:59,040 --> 00:02:02,479
principles behind this

00:02:04,549 --> 00:02:08,970
so this photo rather stretched I'm

00:02:07,170 --> 00:02:12,810
afraid is actually one of the original

00:02:08,970 --> 00:02:14,849
computers that Google used for their in

00:02:12,810 --> 00:02:16,920
the early days of their search engine

00:02:14,849 --> 00:02:18,599
and part of their genius which i think

00:02:16,920 --> 00:02:22,080
is actually forced on the more bite out

00:02:18,599 --> 00:02:23,670
of necessity than directly I'm entirely

00:02:22,080 --> 00:02:26,549
out of genius was they built their

00:02:23,670 --> 00:02:29,280
service using cheap commodity hardware

00:02:26,549 --> 00:02:31,379
rather than the very expensive big iron

00:02:29,280 --> 00:02:34,500
mainframes that their competitors were

00:02:31,379 --> 00:02:37,769
using and a consequence of this was that

00:02:34,500 --> 00:02:40,530
they were able to scale out very rapidly

00:02:37,769 --> 00:02:43,110
very easily and very cheaply just by

00:02:40,530 --> 00:02:45,920
buying new units of an expensive

00:02:43,110 --> 00:02:49,519
commodity hardware but because there

00:02:45,920 --> 00:02:51,959
this hardware wasn't as reliable as the

00:02:49,519 --> 00:02:53,879
big iron mainframes that other people

00:02:51,959 --> 00:02:57,720
were using they built on top of it this

00:02:53,879 --> 00:03:01,769
fault tolerant architecture that as well

00:02:57,720 --> 00:03:04,349
as enabling them to add new units of

00:03:01,769 --> 00:03:08,310
hardware to their system also allowed

00:03:04,349 --> 00:03:10,319
them to take out failing hardware they

00:03:08,310 --> 00:03:14,069
eventually released this platform as a

00:03:10,319 --> 00:03:16,560
service as the google app engine amazon

00:03:14,069 --> 00:03:18,329
kind of took this to the next level with

00:03:16,560 --> 00:03:24,630
their infrastructure that they used for

00:03:18,329 --> 00:03:26,790
running a giant retail website they took

00:03:24,630 --> 00:03:31,139
a slightly different approach providing

00:03:26,790 --> 00:03:33,900
a host of virtual machines as deployment

00:03:31,139 --> 00:03:36,329
targets for their services and this

00:03:33,900 --> 00:03:38,010
infrastructure of as a service approach

00:03:36,329 --> 00:03:41,040
rather than the platform as a service

00:03:38,010 --> 00:03:43,349
approach is really loved by developers

00:03:41,040 --> 00:03:45,480
because i'm it just gives them a machine

00:03:43,349 --> 00:03:47,400
and when they just have a machine they

00:03:45,480 --> 00:03:51,359
know what to do with it they know how to

00:03:47,400 --> 00:03:54,419
deploy to it and so when amazon made

00:03:51,359 --> 00:03:56,700
their cloud public they rapidly became

00:03:54,419 --> 00:03:58,410
the dominant player in the in the public

00:03:56,700 --> 00:04:00,630
cloud market and other modern

00:03:58,410 --> 00:04:03,660
infrastructure as a service public

00:04:00,630 --> 00:04:08,579
clouds include HP cloud microsoft is

00:04:03,660 --> 00:04:11,909
your joy and openstack-based offerings a

00:04:08,579 --> 00:04:16,450
whole host of them so there are several

00:04:11,909 --> 00:04:19,860
problems that using the cloud solves

00:04:16,450 --> 00:04:23,020
and these include dependency hell

00:04:19,860 --> 00:04:25,870
resource underutilization and hardware

00:04:23,020 --> 00:04:28,930
management and the way the cloud solves

00:04:25,870 --> 00:04:31,990
these problems is by separating the

00:04:28,930 --> 00:04:34,540
deployment target that your deployment

00:04:31,990 --> 00:04:35,980
layer from your hardware layer so when

00:04:34,540 --> 00:04:38,140
you deploy to the cloud you're deploying

00:04:35,980 --> 00:04:41,650
to virtual machines without having to

00:04:38,140 --> 00:04:44,080
care about what physical machines that

00:04:41,650 --> 00:04:46,810
your service is actually running on so

00:04:44,080 --> 00:04:49,750
resource underutilization or is also

00:04:46,810 --> 00:04:51,820
equally resource overutilization a

00:04:49,750 --> 00:04:55,090
situation you you might be familiar with

00:04:51,820 --> 00:04:58,360
you have to deploy a new small public

00:04:55,090 --> 00:05:00,520
service say or an email server a dev

00:04:58,360 --> 00:05:02,530
wiki bug tracker so you need a new

00:05:00,520 --> 00:05:04,270
machine a new deploy stuff to it and you

00:05:02,530 --> 00:05:06,670
using about ten percent of its capacity

00:05:04,270 --> 00:05:09,160
or alternatively you work in a company

00:05:06,670 --> 00:05:12,550
we're getting new hardware is a really

00:05:09,160 --> 00:05:14,080
slow and painful process and so what you

00:05:12,550 --> 00:05:16,240
do is the three servers that you already

00:05:14,080 --> 00:05:20,520
have you jam everything onto that and

00:05:16,240 --> 00:05:20,520
everything runs a slow as help

00:05:22,650 --> 00:05:27,070
dependency how again situations that you

00:05:25,150 --> 00:05:29,860
may be familiar with you have a whole

00:05:27,070 --> 00:05:32,230
bunch of applications and services some

00:05:29,860 --> 00:05:33,610
of them use the same library they have

00:05:32,230 --> 00:05:35,470
the same dependency but they use

00:05:33,610 --> 00:05:38,380
different versions of the same library

00:05:35,470 --> 00:05:40,900
so you've got you have these

00:05:38,380 --> 00:05:42,700
applications that you can't deploy on

00:05:40,900 --> 00:05:44,640
the same machine they have to be located

00:05:42,700 --> 00:05:47,320
on physically different machines or

00:05:44,640 --> 00:05:49,780
alternatively you do the work you make

00:05:47,320 --> 00:05:51,900
sure they're all using the same version

00:05:49,780 --> 00:05:54,520
of the library and then what happens is

00:05:51,900 --> 00:05:56,080
you want to use some fancy new feature

00:05:54,520 --> 00:05:58,780
that comes in a newer version of the

00:05:56,080 --> 00:06:00,510
library so you deploy that for one

00:05:58,780 --> 00:06:03,660
application you forget about the other

00:06:00,510 --> 00:06:06,790
services and your your deployment breaks

00:06:03,660 --> 00:06:09,070
another application now obviously all

00:06:06,790 --> 00:06:11,410
Python libraries take backwards

00:06:09,070 --> 00:06:14,500
compatibility very seriously so this

00:06:11,410 --> 00:06:16,090
never happens in practice but I've had

00:06:14,500 --> 00:06:17,740
to do emergency roll backs of

00:06:16,090 --> 00:06:19,480
deployments because we upgraded a

00:06:17,740 --> 00:06:21,880
dependency we forgot there's some other

00:06:19,480 --> 00:06:26,070
application on the same box using the

00:06:21,880 --> 00:06:28,810
same dependency and it just broke or

00:06:26,070 --> 00:06:30,730
alternatively you do the work you

00:06:28,810 --> 00:06:33,070
you pour all your applications at the

00:06:30,730 --> 00:06:36,100
same time to use the the new version of

00:06:33,070 --> 00:06:37,900
the library and you do that you do your

00:06:36,100 --> 00:06:39,639
upgrade you do you do your new releases

00:06:37,900 --> 00:06:41,230
all in lockstep and then there's a

00:06:39,639 --> 00:06:43,360
regression in one of your applications

00:06:41,230 --> 00:06:45,820
and you have to roll back all of them at

00:06:43,360 --> 00:06:47,950
the same time there are various ways of

00:06:45,820 --> 00:06:50,470
solving this you can deploy all your

00:06:47,950 --> 00:06:51,910
services to separate machines and then

00:06:50,470 --> 00:06:54,460
you're on into back into resource

00:06:51,910 --> 00:06:58,180
underutilization or you can use virtual

00:06:54,460 --> 00:07:00,070
end to provide isolated deployment

00:06:58,180 --> 00:07:02,620
environments for all of your application

00:07:00,070 --> 00:07:04,660
again this is something that that I've

00:07:02,620 --> 00:07:07,780
done but what you then have is you then

00:07:04,660 --> 00:07:09,400
have the the same libraries in multiple

00:07:07,780 --> 00:07:12,310
different locations in non-standard

00:07:09,400 --> 00:07:14,020
places on the file system and that's a

00:07:12,310 --> 00:07:16,479
security problem and system

00:07:14,020 --> 00:07:18,130
administrators they tend to hate this

00:07:16,479 --> 00:07:20,940
solution because they like to understand

00:07:18,130 --> 00:07:23,200
and preferably be be able to control

00:07:20,940 --> 00:07:26,500
dependencies so an alternative approach

00:07:23,200 --> 00:07:28,630
is for every service that you run or

00:07:26,500 --> 00:07:32,160
even every component of every service

00:07:28,630 --> 00:07:34,630
that you run to have that in its own

00:07:32,160 --> 00:07:36,850
virtual machine where you're able to to

00:07:34,630 --> 00:07:38,410
very tightly control and specify the

00:07:36,850 --> 00:07:41,770
dependencies just for this application

00:07:38,410 --> 00:07:44,020
and then hardware management that's one

00:07:41,770 --> 00:07:45,940
of the most important and benefits of

00:07:44,020 --> 00:07:49,360
the cloud because we have this

00:07:45,940 --> 00:07:51,640
separation of our deployment layer from

00:07:49,360 --> 00:07:54,789
our physical layer we're able to deploy

00:07:51,640 --> 00:07:56,260
new services just by acquiring a new

00:07:54,789 --> 00:07:58,660
virtual machine we're able to add new

00:07:56,260 --> 00:08:01,000
machines to the cluster very easily and

00:07:58,660 --> 00:08:03,100
we're able to take out failing machines

00:08:01,000 --> 00:08:07,710
upgrade machines without shutting down

00:08:03,100 --> 00:08:10,510
running services okay next slide I think

00:08:07,710 --> 00:08:13,060
so it may be the case that you're

00:08:10,510 --> 00:08:14,919
already running a bunch of services you

00:08:13,060 --> 00:08:18,580
may have hundreds of servers you may

00:08:14,919 --> 00:08:22,210
have just a few and you certainly don't

00:08:18,580 --> 00:08:24,669
want you you feel like you don't want

00:08:22,210 --> 00:08:27,370
the cloud you certainly don't want your

00:08:24,669 --> 00:08:28,900
data or your customers data on someone

00:08:27,370 --> 00:08:31,810
else's machine maybe you don't want your

00:08:28,900 --> 00:08:34,900
data located in America or hosted by an

00:08:31,810 --> 00:08:37,659
American company and you can get some of

00:08:34,900 --> 00:08:39,789
the benefits that I've talked about just

00:08:37,659 --> 00:08:41,990
by managing virtual machines on your own

00:08:39,789 --> 00:08:45,740
servers you get this the isolated

00:08:41,990 --> 00:08:47,740
environment the only be nice if there

00:08:45,740 --> 00:08:50,089
was a framework that provided the

00:08:47,740 --> 00:08:52,250
dynamic server management aspects of

00:08:50,089 --> 00:08:53,899
this that was able to provide automatic

00:08:52,250 --> 00:08:55,700
alee provide you with new virtual

00:08:53,899 --> 00:08:57,560
machines automatically provide you with

00:08:55,700 --> 00:08:59,480
new deployment targets and make it

00:08:57,560 --> 00:09:00,980
easier to rival machines and take

00:08:59,480 --> 00:09:03,230
machines out and that's what you really

00:09:00,980 --> 00:09:04,910
want is a private private cloud and if

00:09:03,230 --> 00:09:06,709
what you want is a private cloud that

00:09:04,910 --> 00:09:12,380
problem probably means you want

00:09:06,709 --> 00:09:14,510
OpenStack a PDF export screwed up the

00:09:12,380 --> 00:09:17,330
bullet points there sorry about that so

00:09:14,510 --> 00:09:20,390
OpenStack is it's basically the private

00:09:17,330 --> 00:09:22,910
cloud it's not entirely the the only

00:09:20,390 --> 00:09:26,029
option but it's it's the giant in the

00:09:22,910 --> 00:09:27,560
world and it's written in Python it's

00:09:26,029 --> 00:09:29,209
probably one of the biggest things going

00:09:27,560 --> 00:09:30,950
on in the Python world right now so

00:09:29,209 --> 00:09:33,560
there are lots of companies both big and

00:09:30,950 --> 00:09:36,020
small hiring Python developers to work

00:09:33,560 --> 00:09:38,390
on the cloud either on it directly on

00:09:36,020 --> 00:09:42,620
OpenStack or on specific implementations

00:09:38,390 --> 00:09:46,670
of clouds both public and private using

00:09:42,620 --> 00:09:49,070
OpenStack OpenStack is huge it's huge in

00:09:46,670 --> 00:09:50,870
terms of the amount of code it's huge in

00:09:49,070 --> 00:09:52,880
terms of the amount of sub projects

00:09:50,870 --> 00:09:54,980
within OpenStack huge in terms of the

00:09:52,880 --> 00:09:56,959
functionality it provides and huge in

00:09:54,980 --> 00:09:59,300
terms of the number of people using it

00:09:56,959 --> 00:10:01,910
and contributing it and you can get all

00:09:59,300 --> 00:10:04,240
the benefits of the cloud but without

00:10:01,910 --> 00:10:08,209
having to use somebody else's

00:10:04,240 --> 00:10:10,850
implementation there oh let's go back to

00:10:08,209 --> 00:10:12,620
the lab that just to mention that there

00:10:10,850 --> 00:10:14,420
are alternatives eucalyptus certainly

00:10:12,620 --> 00:10:16,520
used to be an alternative cloud

00:10:14,420 --> 00:10:17,990
implementation they got acquired I think

00:10:16,520 --> 00:10:20,450
they got acquired by somebody by a

00:10:17,990 --> 00:10:22,459
company that has a public cloud offering

00:10:20,450 --> 00:10:24,410
using OpenStack so I don't even know if

00:10:22,459 --> 00:10:26,329
I eucalyptus currently exists and

00:10:24,410 --> 00:10:28,640
there's an alternative data center

00:10:26,329 --> 00:10:31,730
technology that I've worked with a bit

00:10:28,640 --> 00:10:33,829
called Mars metal as a service and

00:10:31,730 --> 00:10:36,200
that's another canonical product and

00:10:33,829 --> 00:10:38,570
that gives you a lot of the benefits of

00:10:36,200 --> 00:10:41,240
the cloud the dynamic server management

00:10:38,570 --> 00:10:43,490
aspects of it but with physical hardware

00:10:41,240 --> 00:10:45,800
rather than virtual machines and juju

00:10:43,490 --> 00:10:48,589
the project that we work on it can

00:10:45,800 --> 00:10:50,930
deploy you can deploy OpenStack to Mars

00:10:48,589 --> 00:10:54,199
or you can deploy deploy directly to

00:10:50,930 --> 00:10:55,930
Mars with with juju and it's Eve's full

00:10:54,199 --> 00:11:00,290
sort of density full resource

00:10:55,930 --> 00:11:03,529
utilization with Mars through using Lexi

00:11:00,290 --> 00:11:05,420
or kvm containers to the deployment

00:11:03,529 --> 00:11:07,130
targets on the physical machine so it's

00:11:05,420 --> 00:11:09,589
an interesting technology sort of a data

00:11:07,130 --> 00:11:15,470
center level technology sits below the

00:11:09,589 --> 00:11:19,160
level of OpenStack so the benefits of

00:11:15,470 --> 00:11:21,079
the cloud solving the problems depend of

00:11:19,160 --> 00:11:23,920
dependency hell Hardware management

00:11:21,079 --> 00:11:26,990
resource under utilization if you have a

00:11:23,920 --> 00:11:29,839
alongside that if you have automated

00:11:26,990 --> 00:11:32,240
fully automated deployments then the

00:11:29,839 --> 00:11:34,880
other big benefits that you get from the

00:11:32,240 --> 00:11:37,670
cloud are you get rapid the ability to

00:11:34,880 --> 00:11:40,550
rapidly scale out and easily deploy new

00:11:37,670 --> 00:11:43,459
services and you only get those if you

00:11:40,550 --> 00:11:45,440
have fully automated deployments and an

00:11:43,459 --> 00:11:47,149
important principle for fully automated

00:11:45,440 --> 00:11:51,800
deployments are that we treat our

00:11:47,149 --> 00:11:54,250
servers as livestock rather than pets so

00:11:51,800 --> 00:11:58,670
if you have a pet your pet is unique

00:11:54,250 --> 00:12:00,709
your pet has a name your name servers in

00:11:58,670 --> 00:12:03,470
the company you work for so they all

00:12:00,709 --> 00:12:06,350
have names and if your if your pet gets

00:12:03,470 --> 00:12:08,949
ill you spend a lot of time and money

00:12:06,350 --> 00:12:12,290
and effort on getting it well again

00:12:08,949 --> 00:12:14,839
whereas livestock livestock they don't

00:12:12,290 --> 00:12:16,459
tend to have names they have numbers and

00:12:14,839 --> 00:12:18,410
if your life stop getting well it's a

00:12:16,459 --> 00:12:21,079
it's a cruel world you you shoot them

00:12:18,410 --> 00:12:24,699
and you get another one and this is how

00:12:21,079 --> 00:12:24,699
we should be treating our servers

00:12:25,269 --> 00:12:30,439
deploying new services we ought to be

00:12:28,819 --> 00:12:32,870
able to tear down our application

00:12:30,439 --> 00:12:36,949
servers reprovision them with a single

00:12:32,870 --> 00:12:38,630
command without caring about what

00:12:36,949 --> 00:12:41,000
physical machine they're located on

00:12:38,630 --> 00:12:42,949
without caring anything about the

00:12:41,000 --> 00:12:44,720
machine they're located on virtual

00:12:42,949 --> 00:12:47,829
machine or physical machine and without

00:12:44,720 --> 00:12:50,870
preferably without having to worry about

00:12:47,829 --> 00:12:53,149
machine configuration now the trouble is

00:12:50,870 --> 00:12:54,860
with infrastructure as a service which

00:12:53,149 --> 00:12:57,230
is largely beaten platform-as-a-service

00:12:54,860 --> 00:13:01,360
in the market by the way except for some

00:12:57,230 --> 00:13:03,230
specific platforms like Salesforce

00:13:01,360 --> 00:13:07,010
infrastructure as a service is largely

00:13:03,230 --> 00:13:08,779
one the developers like it because the

00:13:07,010 --> 00:13:09,860
paradigm it provides is you have a

00:13:08,779 --> 00:13:12,200
machine to deploy to

00:13:09,860 --> 00:13:14,750
and what that means is although we leave

00:13:12,200 --> 00:13:16,940
some problems behind the problems of

00:13:14,750 --> 00:13:18,950
will how do we provision how do we

00:13:16,940 --> 00:13:20,750
configure how do we manage those

00:13:18,950 --> 00:13:22,339
machines how do we administer them we

00:13:20,750 --> 00:13:24,380
just take those problems with us when we

00:13:22,339 --> 00:13:26,870
go to the cloud now there are lots of

00:13:24,380 --> 00:13:29,450
tools out there that will help you with

00:13:26,870 --> 00:13:32,360
machine provisioning chef puppet

00:13:29,450 --> 00:13:34,700
saltstack and Sybil some people use

00:13:32,360 --> 00:13:36,970
docker although that's really about

00:13:34,700 --> 00:13:39,410
image-based workflows it's not really

00:13:36,970 --> 00:13:41,329
but some people are using it in this way

00:13:39,410 --> 00:13:44,120
to help with the problem of machine

00:13:41,329 --> 00:13:45,980
provisioning but these tools all require

00:13:44,120 --> 00:13:48,019
you to think about machine provisionally

00:13:45,980 --> 00:13:50,360
what's going to live on this machine how

00:13:48,019 --> 00:13:52,790
do i configure and administer this

00:13:50,360 --> 00:13:54,980
machine and as developers or even DevOps

00:13:52,790 --> 00:13:58,399
we don't really want to spend our time

00:13:54,980 --> 00:13:59,720
worrying about machine configuration or

00:13:58,399 --> 00:14:02,060
administration or at least that's not

00:13:59,720 --> 00:14:05,480
how I think about the services that I

00:14:02,060 --> 00:14:07,790
reply when I deploy an application or a

00:14:05,480 --> 00:14:10,430
deployer servicestack what I think about

00:14:07,790 --> 00:14:13,070
is I think about the components i have

00:14:10,430 --> 00:14:16,130
my application server I have a message

00:14:13,070 --> 00:14:18,760
queue I have load balancers I have a

00:14:16,130 --> 00:14:21,920
database and these are these these

00:14:18,760 --> 00:14:23,810
components are all related to each other

00:14:21,920 --> 00:14:25,490
they're all interrelated they all

00:14:23,810 --> 00:14:27,199
communicate this is how I think about my

00:14:25,490 --> 00:14:29,779
application stack but the actual

00:14:27,199 --> 00:14:32,510
deployment we tend to we're forced into

00:14:29,779 --> 00:14:34,490
thinking about our services in different

00:14:32,510 --> 00:14:38,120
ways with forced into thinking in terms

00:14:34,490 --> 00:14:41,800
of units of machines and juju is a tool

00:14:38,120 --> 00:14:45,949
that takes a slightly different approach

00:14:41,800 --> 00:14:48,140
so this diagram shows that this is

00:14:45,949 --> 00:14:50,560
through the GUI the GUI you don't have

00:14:48,140 --> 00:14:53,089
to use the gooery of course but it's a

00:14:50,560 --> 00:14:56,860
great way of visualizing services this

00:14:53,089 --> 00:14:59,390
shows deployed and related services

00:14:56,860 --> 00:15:01,579
deployed with juju and the the lines

00:14:59,390 --> 00:15:05,810
there show the relationships between the

00:15:01,579 --> 00:15:08,390
components of the services so dudu takes

00:15:05,810 --> 00:15:10,339
a different approach it's it's about

00:15:08,390 --> 00:15:13,220
service orchestration it's a tool that

00:15:10,339 --> 00:15:15,350
provides a powerful service modeling

00:15:13,220 --> 00:15:20,740
language that just happens to use

00:15:15,350 --> 00:15:20,740
virtual machines as a deployment target

00:15:21,480 --> 00:15:28,900
the the basic unit for deployment for

00:15:26,370 --> 00:15:32,800
services or service components in juju

00:15:28,900 --> 00:15:36,370
is the charm and the charm no codifies

00:15:32,800 --> 00:15:38,290
the knowledge required to deploy and

00:15:36,370 --> 00:15:40,779
configure that application and this is a

00:15:38,290 --> 00:15:43,720
very important principle of debauch

00:15:40,779 --> 00:15:45,970
DevOps a principle of automated

00:15:43,720 --> 00:15:49,990
deployment is that the knowledge about

00:15:45,970 --> 00:15:52,240
how to deploy and configure your service

00:15:49,990 --> 00:15:54,220
components rather than living in some

00:15:52,240 --> 00:15:55,779
system administrators head and then that

00:15:54,220 --> 00:15:59,110
system administrator gets a better job

00:15:55,779 --> 00:16:01,600
somewhere else and and like Guido said

00:15:59,110 --> 00:16:03,490
in his talk this morning they have

00:16:01,600 --> 00:16:05,860
deployed services using binaries and

00:16:03,490 --> 00:16:09,520
nobody knows how to get those binaries

00:16:05,860 --> 00:16:11,560
back if they so if there if some

00:16:09,520 --> 00:16:13,779
disaster occurs presumably they have

00:16:11,560 --> 00:16:16,810
lots and lots of backups because they

00:16:13,779 --> 00:16:19,330
they can't reproduce that they don't

00:16:16,810 --> 00:16:21,070
have a repeatable full stack deployment

00:16:19,330 --> 00:16:24,250
they can't automate and reproduce that

00:16:21,070 --> 00:16:27,490
you need to have your your deployment

00:16:24,250 --> 00:16:30,070
knowledge codified and charms for duty

00:16:27,490 --> 00:16:32,050
are the the codified knowledge about how

00:16:30,070 --> 00:16:34,180
to not just how to deploy the service

00:16:32,050 --> 00:16:36,910
but how it communicates with other

00:16:34,180 --> 00:16:38,740
services and these charms tend to be

00:16:36,910 --> 00:16:41,410
written in Python so when you're using

00:16:38,740 --> 00:16:43,450
do to you get to codify your deployment

00:16:41,410 --> 00:16:46,390
knowledge in Python but not just that

00:16:43,450 --> 00:16:49,839
them through the charm store there's a

00:16:46,390 --> 00:16:52,089
whole host of common infrastructure

00:16:49,839 --> 00:16:55,990
components many of which you're you're

00:16:52,089 --> 00:16:58,150
already using I'm sure whether existing

00:16:55,990 --> 00:17:02,410
charms out there so juju is sometimes

00:16:58,150 --> 00:17:03,790
called apt-get for the web so why do do

00:17:02,410 --> 00:17:06,819
I've kind of talked about some of these

00:17:03,790 --> 00:17:09,459
we get to think in terms of service

00:17:06,819 --> 00:17:11,949
orchestration think in terms of service

00:17:09,459 --> 00:17:13,809
components how they relate and connect

00:17:11,949 --> 00:17:16,360
to each other which is how we think

00:17:13,809 --> 00:17:20,980
about our application stack anyway we

00:17:16,360 --> 00:17:23,260
get to work with Python to do all this

00:17:20,980 --> 00:17:26,079
cloud independence is important as well

00:17:23,260 --> 00:17:28,510
juju will happily deploy using the same

00:17:26,079 --> 00:17:31,120
exactly the same configuration to as

00:17:28,510 --> 00:17:35,470
your joy ant HP Cloud easy

00:17:31,120 --> 00:17:38,920
to Mars and also using lexie containers

00:17:35,470 --> 00:17:40,930
to your local machine which is not just

00:17:38,920 --> 00:17:43,090
to your local machine to your CI server

00:17:40,930 --> 00:17:46,420
so you can take exactly the same

00:17:43,090 --> 00:17:48,670
production deployment configuration you

00:17:46,420 --> 00:17:51,040
can deploy that locally for running your

00:17:48,670 --> 00:17:53,620
own manual test but your CI server can

00:17:51,040 --> 00:17:56,620
also take that can come spin up the

00:17:53,620 --> 00:17:59,350
whole production stack configure their

00:17:56,620 --> 00:18:01,180
the communication configure things to

00:17:59,350 --> 00:18:04,179
talk to each other and you can run your

00:18:01,180 --> 00:18:06,070
your acceptance tests on your CI server

00:18:04,179 --> 00:18:08,470
using effectively your production

00:18:06,070 --> 00:18:10,840
configuration now you are running see I

00:18:08,470 --> 00:18:13,570
tests you are running acceptance s for

00:18:10,840 --> 00:18:15,370
your applications i seem like i said i

00:18:13,570 --> 00:18:17,080
have a particular interest in testing

00:18:15,370 --> 00:18:21,070
and i think good principle with testing

00:18:17,080 --> 00:18:24,190
is if it isn't tested it's broken if it

00:18:21,070 --> 00:18:26,410
is tested it might not be broken those

00:18:24,190 --> 00:18:27,820
are the principles i work too so testing

00:18:26,410 --> 00:18:29,980
doesn't guarantee that things work

00:18:27,820 --> 00:18:31,929
against it what it does is provide an

00:18:29,980 --> 00:18:35,230
assurance that things might work you

00:18:31,929 --> 00:18:37,809
need that assurance and through the

00:18:35,230 --> 00:18:39,630
charm store though there are many charms

00:18:37,809 --> 00:18:43,720
available things like Hadoop set

00:18:39,630 --> 00:18:47,320
postgres django django applications my

00:18:43,720 --> 00:18:48,880
sequel did I say postgres all all of the

00:18:47,320 --> 00:18:52,840
the standard components they're all

00:18:48,880 --> 00:18:55,900
charmed up there and ready to deploy so

00:18:52,840 --> 00:18:58,600
let's look at an example deployment of a

00:18:55,900 --> 00:19:02,320
django app we have 10 minutes left i'm

00:18:58,600 --> 00:19:05,440
as flight Demeter is going to show you

00:19:02,320 --> 00:19:08,770
it's a jungle app called d paste using

00:19:05,440 --> 00:19:10,120
the Django framework charm this is what

00:19:08,770 --> 00:19:12,970
we already have deployed but it's not

00:19:10,120 --> 00:19:16,050
this is a full stack and I lecture to me

00:19:12,970 --> 00:19:19,960
to take over and talk about it all right

00:19:16,050 --> 00:19:22,620
so as you can see here well the

00:19:19,960 --> 00:19:26,650
resolution is not very good but you have

00:19:22,620 --> 00:19:29,350
services represented as boxes and this

00:19:26,650 --> 00:19:30,790
is all you really care about in your

00:19:29,350 --> 00:19:32,890
deployment you don't really care that

00:19:30,790 --> 00:19:36,220
much about machines you care about your

00:19:32,890 --> 00:19:38,710
work workloads and also how are they

00:19:36,220 --> 00:19:42,370
related to each other and as you can see

00:19:38,710 --> 00:19:44,559
we have a genuine framework charm here

00:19:42,370 --> 00:19:46,799
which is a modified version of the

00:19:44,559 --> 00:19:50,970
charming available in the charm store

00:19:46,799 --> 00:19:55,509
and it's configured to run debased

00:19:50,970 --> 00:19:58,090
pulling the D triple from from from

00:19:55,509 --> 00:20:03,730
github and there are a few other things

00:19:58,090 --> 00:20:06,570
like a squid proxy also a couple of HIV

00:20:03,730 --> 00:20:09,460
oxy charms which are configured as

00:20:06,570 --> 00:20:13,470
application load balancer and cash flow

00:20:09,460 --> 00:20:17,740
bouncer we have the front end Apache and

00:20:13,470 --> 00:20:20,529
also the back end Postgres database this

00:20:17,740 --> 00:20:23,409
is the juju itself which is also charm

00:20:20,529 --> 00:20:28,149
that you may or may not deploy if you

00:20:23,409 --> 00:20:31,720
don't want to and this here is the G

00:20:28,149 --> 00:20:34,179
uniquor which is a subordinate charm 2d

00:20:31,720 --> 00:20:38,139
paste what does that mean it means that

00:20:34,179 --> 00:20:40,419
with each and every unit of debased

00:20:38,139 --> 00:20:44,320
there is a G unicorn deployed alongside

00:20:40,419 --> 00:20:46,899
it so it can be used for example for

00:20:44,320 --> 00:20:49,409
logging or other closely related

00:20:46,899 --> 00:20:53,980
services which depended upon each other

00:20:49,409 --> 00:20:56,820
and also so this is the service view

00:20:53,980 --> 00:20:59,769
this is the default view you can see and

00:20:56,820 --> 00:21:03,999
here we have the machine view which

00:20:59,769 --> 00:21:08,320
shows that we have eight machines

00:21:03,999 --> 00:21:11,950
actually lexie containers and what

00:21:08,320 --> 00:21:13,690
service is they're running on and if

00:21:11,950 --> 00:21:16,240
these were physical machine this is all

00:21:13,690 --> 00:21:18,309
running on the laptop using the local

00:21:16,240 --> 00:21:20,440
provider that I mentioned so there-there

00:21:18,309 --> 00:21:22,360
lexie containers that these services are

00:21:20,440 --> 00:21:24,009
running in which is why hardware details

00:21:22,360 --> 00:21:25,899
are not available if these were running

00:21:24,009 --> 00:21:27,549
on virtual machines that the

00:21:25,899 --> 00:21:31,090
Conservatoire constraints of the actual

00:21:27,549 --> 00:21:34,509
machines would be visible here yeah also

00:21:31,090 --> 00:21:40,690
I'll come back to this but you can also

00:21:34,509 --> 00:21:44,740
use the command line to do the same sort

00:21:40,690 --> 00:21:48,730
of inspection and management so for

00:21:44,740 --> 00:21:51,220
example if I do to state this format

00:21:48,730 --> 00:21:54,429
short like that's just the gist of what

00:21:51,220 --> 00:21:55,470
I have in my deployment and if I want to

00:21:54,429 --> 00:21:59,370
I can

00:21:55,470 --> 00:22:02,309
show a lot more details about it like

00:21:59,370 --> 00:22:04,380
what sort of workload status it is for

00:22:02,309 --> 00:22:07,470
each charm what relations are what IP

00:22:04,380 --> 00:22:10,080
addresses when it was deployed and so on

00:22:07,470 --> 00:22:13,650
and there is even a status history that

00:22:10,080 --> 00:22:16,799
shows for example I deployed this charm

00:22:13,650 --> 00:22:18,840
but it didn't come up or like it's

00:22:16,799 --> 00:22:22,380
waiting for some sort of interaction

00:22:18,840 --> 00:22:25,380
like I need to enter database details or

00:22:22,380 --> 00:22:31,440
I need to do something manually in order

00:22:25,380 --> 00:22:34,919
to enable it to work also we can easily

00:22:31,440 --> 00:22:38,159
do well not quite right now because the

00:22:34,919 --> 00:22:39,929
network is non-existent but I I would

00:22:38,159 --> 00:22:43,679
have shown you at the same exact

00:22:39,929 --> 00:22:54,890
deployment them on Amazon it's actually

00:22:43,679 --> 00:22:58,860
running if you if you can hit this right

00:22:54,890 --> 00:23:02,700
but yeah I I can show you whoever is

00:22:58,860 --> 00:23:05,940
interested later any questions course

00:23:02,700 --> 00:23:10,049
are welcome so what you can do with this

00:23:05,940 --> 00:23:13,340
you can actually see what are the

00:23:10,049 --> 00:23:16,380
details of each service you can see what

00:23:13,340 --> 00:23:18,539
units are running on it what's the

00:23:16,380 --> 00:23:21,570
configuration there are lots of things

00:23:18,539 --> 00:23:23,549
that you can tweak for each charm and

00:23:21,570 --> 00:23:26,280
this is also part of what each I'm

00:23:23,549 --> 00:23:28,320
encapsulates as a best practice and one

00:23:26,280 --> 00:23:30,150
of what we could do here is you saw that

00:23:28,320 --> 00:23:33,330
there was one running unit if we needed

00:23:30,150 --> 00:23:36,419
to scale out or app we would do juju ad

00:23:33,330 --> 00:23:38,280
unit I think Django whatever whatever

00:23:36,419 --> 00:23:41,539
this charm is called five and that would

00:23:38,280 --> 00:23:44,250
create five new units but because the

00:23:41,539 --> 00:23:47,580
the Django charm is related to the

00:23:44,250 --> 00:23:52,710
Postgres database so as the as the new

00:23:47,580 --> 00:23:55,650
units come up there's a juju knows these

00:23:52,710 --> 00:23:57,600
need to be related to the database so

00:23:55,650 --> 00:24:00,990
that and charms are comprised of hooks

00:23:57,600 --> 00:24:02,429
which are code that can run if we go on

00:24:00,990 --> 00:24:03,870
to if we go back to the slides we will

00:24:02,429 --> 00:24:06,149
have to fly through these because we

00:24:03,870 --> 00:24:08,320
have just five minutes but there's a

00:24:06,149 --> 00:24:13,120
charm that says relation joined

00:24:08,320 --> 00:24:15,159
and so new the the the new unit of the

00:24:13,120 --> 00:24:17,289
application server has joined the the

00:24:15,159 --> 00:24:19,529
Postgres database so it knows of the

00:24:17,289 --> 00:24:24,580
configuration information the the

00:24:19,529 --> 00:24:29,220
postgres charm what we don't need to

00:24:24,580 --> 00:24:32,769
generate a password and user for the app

00:24:29,220 --> 00:24:35,230
before the database sorry this is all

00:24:32,769 --> 00:24:38,799
done as part of the charm uninstall on

00:24:35,230 --> 00:24:40,870
start up a new database user is created

00:24:38,799 --> 00:24:42,460
and then as the relationship is joined

00:24:40,870 --> 00:24:45,580
to the application server that

00:24:42,460 --> 00:24:47,710
information is passed through it is that

00:24:45,580 --> 00:24:50,230
configuration it was automatically given

00:24:47,710 --> 00:24:52,539
to the to the application server as we

00:24:50,230 --> 00:24:55,240
had new units of the application server

00:24:52,539 --> 00:24:58,269
that configuration is given information

00:24:55,240 --> 00:25:00,519
is given to the new units so these these

00:24:58,269 --> 00:25:02,529
services are automatically added and

00:25:00,519 --> 00:25:04,870
configured to talk through the

00:25:02,529 --> 00:25:07,059
relationships that we've defined they're

00:25:04,870 --> 00:25:08,950
automatically configured to talk to the

00:25:07,059 --> 00:25:12,129
rest of the application so it's not just

00:25:08,950 --> 00:25:15,490
the deployment information that's

00:25:12,129 --> 00:25:17,590
codified into the charm but the

00:25:15,490 --> 00:25:19,840
configuration information how to talk to

00:25:17,590 --> 00:25:22,629
other other units of the service and as

00:25:19,840 --> 00:25:25,090
we add new units this reconfiguration

00:25:22,629 --> 00:25:27,490
this updated configuration happens

00:25:25,090 --> 00:25:29,860
automatically for us this is this is

00:25:27,490 --> 00:25:32,080
service orchestration you can see this

00:25:29,860 --> 00:25:35,409
isn't the directory tree of an example

00:25:32,080 --> 00:25:36,820
charm it's just a zip archive and you

00:25:35,409 --> 00:25:39,250
can see here that all of the different

00:25:36,820 --> 00:25:40,600
the different hooks that fire when

00:25:39,250 --> 00:25:42,519
different things happen there are

00:25:40,600 --> 00:25:46,179
actually sim linked to a single Python

00:25:42,519 --> 00:25:47,590
file and here's the install hook that

00:25:46,179 --> 00:25:53,230
actually act installs a bunch of

00:25:47,590 --> 00:25:54,970
packages on to the to the next slide so

00:25:53,230 --> 00:25:58,929
we're actually using a deploy a bundle

00:25:54,970 --> 00:26:01,330
here which is a yamel file that you can

00:25:58,929 --> 00:26:03,639
keep under version control deploy as a

00:26:01,330 --> 00:26:06,279
separate tool that the functionality is

00:26:03,639 --> 00:26:08,740
now being rolled into juju core and you

00:26:06,279 --> 00:26:11,409
can see for the for the Django charm but

00:26:08,740 --> 00:26:13,629
we're using that there's a whole bunch

00:26:11,409 --> 00:26:16,830
of configuration information stored in

00:26:13,629 --> 00:26:19,450
there and ophir gone to the next slide

00:26:16,830 --> 00:26:21,350
the relationships between the charms the

00:26:19,450 --> 00:26:23,200
and the other component

00:26:21,350 --> 00:26:25,730
the service that we're using were also

00:26:23,200 --> 00:26:28,010
defined in the deploy button so as you

00:26:25,730 --> 00:26:29,330
can see there's an awful lot to joojoo

00:26:28,010 --> 00:26:31,700
there's an awful lot more we could talk

00:26:29,330 --> 00:26:33,919
about but the basic principle of

00:26:31,700 --> 00:26:36,460
codifying our deployment and

00:26:33,919 --> 00:26:39,940
configuration information in Python

00:26:36,460 --> 00:26:43,309
being able to reuse the existing charms

00:26:39,940 --> 00:26:46,940
using virtual machines as a deployment

00:26:43,309 --> 00:26:48,799
target to get us the the benefits of the

00:26:46,940 --> 00:26:50,750
cloud of separating our deployment layer

00:26:48,799 --> 00:26:52,730
from our physical hardware and with juju

00:26:50,750 --> 00:26:55,159
being able to then just retarget that

00:26:52,730 --> 00:26:59,419
multiple backends is a very powerful

00:26:55,159 --> 00:27:02,630
combination I think we're like and this

00:26:59,419 --> 00:27:05,900
is just the example of how easy it is to

00:27:02,630 --> 00:27:08,900
do this deployment will make the the

00:27:05,900 --> 00:27:10,970
slides available as the last if we go to

00:27:08,900 --> 00:27:15,080
the last slide that has a URL and out

00:27:10,970 --> 00:27:17,690
tourism Demeter will tweet it this is

00:27:15,080 --> 00:27:19,070
deployer doing it stuff but I think

00:27:17,690 --> 00:27:22,520
that's about all we have time to kill

00:27:19,070 --> 00:27:26,419
and the strike they're available and

00:27:22,520 --> 00:27:29,000
there is also a documentation and all

00:27:26,419 --> 00:27:31,429
the different concepts of juju explained

00:27:29,000 --> 00:27:34,789
on juju charms calm there is also a live

00:27:31,429 --> 00:27:37,549
demo that you can use as a sandbox to do

00:27:34,789 --> 00:27:39,799
like experimental deployments you can

00:27:37,549 --> 00:27:42,679
then export that as the ammo file and

00:27:39,799 --> 00:27:45,919
then deployed as we show with the juju

00:27:42,679 --> 00:27:51,039
deployer to your cloud or for your local

00:27:45,919 --> 00:27:51,039
machine okay thank you very much

00:27:54,600 --> 00:28:01,290
we helped on to some questions there's a

00:27:58,390 --> 00:28:01,290
couple of questions ever

00:28:08,720 --> 00:28:16,340
well I was a I see you you like

00:28:12,390 --> 00:28:21,630
something like more top level than

00:28:16,340 --> 00:28:25,080
puppet salt or any of these but I don't

00:28:21,630 --> 00:28:28,440
really see a how a complex could it be

00:28:25,080 --> 00:28:31,380
because some when you have some simple

00:28:28,440 --> 00:28:34,950
applications you usually can configure

00:28:31,380 --> 00:28:38,610
them with three parameters or so but

00:28:34,950 --> 00:28:41,400
usually the applications that list in my

00:28:38,610 --> 00:28:45,950
company we target are really really

00:28:41,400 --> 00:28:53,130
complex where we need to have like four

00:28:45,950 --> 00:28:55,680
dot young three exams XML a to database

00:28:53,130 --> 00:28:58,770
connection etc and they are configured

00:28:55,680 --> 00:29:01,770
differently so at the end the edge cases

00:28:58,770 --> 00:29:05,100
you have are really really complex how

00:29:01,770 --> 00:29:10,490
would you you still with complexity of

00:29:05,100 --> 00:29:14,430
an application so there are quite a few

00:29:10,490 --> 00:29:17,300
very complex charms that have certainly

00:29:14,430 --> 00:29:19,590
in the order of tens you know of

00:29:17,300 --> 00:29:22,410
configuration options which are things

00:29:19,590 --> 00:29:24,930
that you cannot in the the deployer

00:29:22,410 --> 00:29:27,090
llamo obviously they all have seen

00:29:24,930 --> 00:29:29,280
defaults but there are many tens of

00:29:27,090 --> 00:29:32,310
configuration options that you can tweak

00:29:29,280 --> 00:29:34,190
in the deployer yamel what we tend to

00:29:32,310 --> 00:29:37,560
see people doing is for their own

00:29:34,190 --> 00:29:40,590
applications they will write their own

00:29:37,560 --> 00:29:42,420
charm and possibly taking like the

00:29:40,590 --> 00:29:43,830
Django framework charm they're taking

00:29:42,420 --> 00:29:46,920
that as a base if you're deploying a

00:29:43,830 --> 00:29:50,340
django app you can have fat charms that

00:29:46,920 --> 00:29:53,250
contain the application bundle itself

00:29:50,340 --> 00:29:55,200
and extra configuration information so

00:29:53,250 --> 00:29:58,440
you could merely specify the the paths

00:29:55,200 --> 00:30:03,090
to the configuration files within the

00:29:58,440 --> 00:30:04,890
charm bundle and so you would have your

00:30:03,090 --> 00:30:06,600
own charm that is specific to your

00:30:04,890 --> 00:30:09,300
application and then you would reuse

00:30:06,600 --> 00:30:13,800
existing charms for the other component

00:30:09,300 --> 00:30:15,780
pieces that are that are deployed

00:30:13,800 --> 00:30:18,510
alongside it and the good thing about

00:30:15,780 --> 00:30:20,490
charles is that we showed you an example

00:30:18,510 --> 00:30:21,450
invite them but they're actually

00:30:20,490 --> 00:30:23,789
language

00:30:21,450 --> 00:30:26,220
so you can for example if you're using

00:30:23,789 --> 00:30:28,380
chef or puppet door ansible you could

00:30:26,220 --> 00:30:31,620
reuse the same language you can use bash

00:30:28,380 --> 00:30:34,019
or whatever you like just we have a very

00:30:31,620 --> 00:30:37,769
good support for Michael like nice tools

00:30:34,019 --> 00:30:40,139
libraries unit test support coverage and

00:30:37,769 --> 00:30:44,610
benchmarking as well so I mean one of

00:30:40,139 --> 00:30:46,529
the things to notice that under the hood

00:30:44,610 --> 00:30:48,720
of course for an individual service

00:30:46,529 --> 00:30:51,179
component juju is doing machine

00:30:48,720 --> 00:30:52,889
provisioning the difference is that at

00:30:51,179 --> 00:30:55,080
the modeling layer you're not thinking

00:30:52,889 --> 00:30:56,850
in terms of machine provisionally so do

00:30:55,080 --> 00:30:57,720
to really works alongside these tools

00:30:56,850 --> 00:31:01,200
and you can see that this particular

00:30:57,720 --> 00:31:03,029
charm has a fab file it has uncibal pie

00:31:01,200 --> 00:31:04,830
this particular the Django framework

00:31:03,029 --> 00:31:07,289
charm here are done if it still is but

00:31:04,830 --> 00:31:09,899
at the point that we were created emma

00:31:07,289 --> 00:31:13,500
was originally created was actually

00:31:09,899 --> 00:31:15,120
using ansible and fabric for doing the

00:31:13,500 --> 00:31:19,350
the service installation the machine

00:31:15,120 --> 00:31:21,809
configuration I can see that juju can be

00:31:19,350 --> 00:31:24,480
useful for provisioning services where

00:31:21,809 --> 00:31:26,909
the basic building block is like a

00:31:24,480 --> 00:31:29,159
container or something or like anything

00:31:26,909 --> 00:31:32,309
that runs on the top of vm or a machine

00:31:29,159 --> 00:31:34,380
that's already running let's say but

00:31:32,309 --> 00:31:36,659
it's juju the right tool or is it

00:31:34,380 --> 00:31:39,690
intended to be tool that you can use for

00:31:36,659 --> 00:31:42,659
actually spinning up Oh dm's in the

00:31:39,690 --> 00:31:47,549
cloud and talk to like Google Cloud API

00:31:42,659 --> 00:31:50,100
or AWS API or any task is that is that

00:31:47,549 --> 00:31:53,639
too well so if you just want something

00:31:50,100 --> 00:31:56,070
to manage your your your cloud yeah I

00:31:53,639 --> 00:31:58,710
mean Google compute engine AWS or all of

00:31:56,070 --> 00:32:00,299
these things you do do to add machine it

00:31:58,710 --> 00:32:01,980
will create a new virtual machine for

00:32:00,299 --> 00:32:03,450
you you can then use that you can

00:32:01,980 --> 00:32:05,760
specify the machine you can create

00:32:03,450 --> 00:32:09,029
containers on those virtual machines and

00:32:05,760 --> 00:32:11,490
deploy components to those machines juju

00:32:09,029 --> 00:32:13,529
SSH machine number gives you an ssh

00:32:11,490 --> 00:32:15,360
connection to that specific virtual

00:32:13,529 --> 00:32:17,669
machine so if you just want something to

00:32:15,360 --> 00:32:19,950
spin up virtual machines to use as

00:32:17,669 --> 00:32:21,690
alternative workload targets there are

00:32:19,950 --> 00:32:24,870
then juju actions that allow you to run

00:32:21,690 --> 00:32:27,389
specific commands on those machines so

00:32:24,870 --> 00:32:30,010
you kind of can use it in that way it's

00:32:27,389 --> 00:32:32,490
not entirely the intended

00:32:30,010 --> 00:32:35,740
use case so it has the integration with

00:32:32,490 --> 00:32:37,840
some other api's and has it with all the

00:32:35,740 --> 00:32:41,610
cloud providers that are supported so

00:32:37,840 --> 00:32:46,360
Google compute engine AWS giant HP Cloud

00:32:41,610 --> 00:32:48,340
azurin giant yes it has within it

00:32:46,360 --> 00:32:50,140
knowledge of how to talk to those api's

00:32:48,340 --> 00:32:51,790
how to create the virtual machines how

00:32:50,140 --> 00:32:54,400
to destroy the virtual machines how to

00:32:51,790 --> 00:32:56,170
connect to them some aspects of how to

00:32:54,400 --> 00:32:57,940
configure networking on them this kind

00:32:56,170 --> 00:32:59,560
of stuff yeah it has to be that has to

00:32:57,940 --> 00:33:09,460
do that because it's doing the Machine

00:32:59,560 --> 00:33:11,200
provisioning for you a question on you

00:33:09,460 --> 00:33:14,410
mentioned that your machine should be

00:33:11,200 --> 00:33:17,290
treated like livestock yeah how do you

00:33:14,410 --> 00:33:19,180
deploy configuration changes do you take

00:33:17,290 --> 00:33:23,370
down machine as an immutable server

00:33:19,180 --> 00:33:29,050
patent know what do you reapply the

00:33:23,370 --> 00:33:30,880
right so the idea is that you go away

00:33:29,050 --> 00:33:34,240
from the actual machine configuration

00:33:30,880 --> 00:33:36,880
and instead codify what configuration

00:33:34,240 --> 00:33:39,220
your service needs within the charm and

00:33:36,880 --> 00:33:41,950
then if you need to change that

00:33:39,220 --> 00:33:44,740
configuration you specify like either

00:33:41,950 --> 00:33:46,660
tweak charm config settings or you

00:33:44,740 --> 00:33:49,950
relate it to something else which

00:33:46,660 --> 00:33:53,470
provides the functionality it needs so

00:33:49,950 --> 00:33:56,830
the actual configuration happens kind of

00:33:53,470 --> 00:33:58,960
automatically depending on how the charm

00:33:56,830 --> 00:34:01,410
is written so if for example your charm

00:33:58,960 --> 00:34:04,900
is written both as a standalone

00:34:01,410 --> 00:34:07,420
application and as a clustering solution

00:34:04,900 --> 00:34:09,399
if you just add more units to it then

00:34:07,420 --> 00:34:12,250
the charm will automatically discover

00:34:09,399 --> 00:34:17,110
those other units and set up clustering

00:34:12,250 --> 00:34:18,610
in the same way and there is a concept

00:34:17,110 --> 00:34:20,020
of chart of a charm upgrade where

00:34:18,610 --> 00:34:21,970
there's a new version of a charm right

00:34:20,020 --> 00:34:23,530
to deploy individual units can be

00:34:21,970 --> 00:34:29,399
upgraded to the next version of the

00:34:23,530 --> 00:34:29,399
charm question

00:34:37,550 --> 00:34:44,220
what do you have for auto scaling know

00:34:40,649 --> 00:34:48,270
like you a lot balance on the deploy new

00:34:44,220 --> 00:34:50,690
servers on the moon so this is kind of a

00:34:48,270 --> 00:34:53,159
high-level feature on top of for juju

00:34:50,690 --> 00:34:55,530
currently provides their plans to do

00:34:53,159 --> 00:34:58,890
things like auto scaling law balancing

00:34:55,530 --> 00:35:00,930
as part of the set features that we

00:34:58,890 --> 00:35:04,760
provide that's not what and not yet

00:35:00,930 --> 00:35:07,410
there but it's being worked on it's also

00:35:04,760 --> 00:35:09,660
we mentioned that dude is open source

00:35:07,410 --> 00:35:13,710
we're accepting contributions its own

00:35:09,660 --> 00:35:15,690
get hurt so I think the standard answer

00:35:13,710 --> 00:35:23,580
is landscape of the scaling on top of

00:35:15,690 --> 00:35:27,350
duty right that's it no how is it

00:35:23,580 --> 00:35:31,260
different than open sex heat and Morano

00:35:27,350 --> 00:35:34,040
so it's different that it's not

00:35:31,260 --> 00:35:38,580
targeting I'm not quite familiar with

00:35:34,040 --> 00:35:43,380
both of those in detail but I think that

00:35:38,580 --> 00:35:45,270
the thing is juju is not prescribing as

00:35:43,380 --> 00:35:49,020
a certain sort of cloud that it can

00:35:45,270 --> 00:35:51,900
orchestrate for example I know heat like

00:35:49,020 --> 00:35:54,780
orchestrates OpenStack whereas we do do

00:35:51,900 --> 00:35:57,390
you can orchestrate OpenStack and other

00:35:54,780 --> 00:36:05,119
clouds just as well with the same set of

00:35:57,390 --> 00:36:05,119
features and steps Marcus

00:36:08,940 --> 00:36:14,380
it is just a very quick question how

00:36:11,740 --> 00:36:17,530
popular is to do with respect to you

00:36:14,380 --> 00:36:22,600
know other kind of similar services like

00:36:17,530 --> 00:36:25,920
share for ansible or so juju is it's

00:36:22,600 --> 00:36:28,720
fully open source developed by canonical

00:36:25,920 --> 00:36:31,720
we're using it a great deal with our

00:36:28,720 --> 00:36:34,630
customers this is how and why do you

00:36:31,720 --> 00:36:38,590
exist we have cloud customers with large

00:36:34,630 --> 00:36:40,510
deployments often but not only large

00:36:38,590 --> 00:36:42,730
deployments of OpenStack where we either

00:36:40,510 --> 00:36:44,860
set it up for them or manage or manage

00:36:42,730 --> 00:36:47,710
the deployment for them so this is how

00:36:44,860 --> 00:36:49,900
we're using opens do do so juju is quite

00:36:47,710 --> 00:36:52,750
battle tested and is getting refined

00:36:49,900 --> 00:36:54,820
based on those experiences and there is

00:36:52,750 --> 00:36:57,040
community uses of particular community

00:36:54,820 --> 00:36:59,520
around the the charm creation I don't

00:36:57,040 --> 00:37:02,470
think in terms of the wider community

00:36:59,520 --> 00:37:05,350
it's as widely used as chef and puppet I

00:37:02,470 --> 00:37:08,070
think the DevOps kind of mindset is

00:37:05,350 --> 00:37:10,360
still used to thinking in terms of

00:37:08,070 --> 00:37:12,880
machine provisioning so they look for

00:37:10,360 --> 00:37:14,800
tools to do machine provisioning and the

00:37:12,880 --> 00:37:17,020
idea of service orchestration although

00:37:14,800 --> 00:37:19,840
judy has been around for a while service

00:37:17,020 --> 00:37:23,370
orchestration as a as a concept and a

00:37:19,840 --> 00:37:25,930
way of thinking I think it matches more

00:37:23,370 --> 00:37:27,940
more directly the way developers think

00:37:25,930 --> 00:37:29,290
about their application components but

00:37:27,940 --> 00:37:32,320
it's something that's only sort of

00:37:29,290 --> 00:37:35,050
gaining traction but yes because we're

00:37:32,320 --> 00:37:36,340
seeing the community of charm creators

00:37:35,050 --> 00:37:39,880
as those are obvious and people who are

00:37:36,340 --> 00:37:42,790
using jutsu and feels recently like last

00:37:39,880 --> 00:37:45,360
year we had a lot of big contributions

00:37:42,790 --> 00:37:48,670
like we're working with our partners

00:37:45,360 --> 00:37:52,210
cloud-based which actually bought that

00:37:48,670 --> 00:37:54,580
cloud in it for Windows and centos as

00:37:52,210 --> 00:37:57,010
well and I think there is a jutsu you

00:37:54,580 --> 00:37:59,320
say all this this is a Romanian company

00:37:57,010 --> 00:38:02,230
who were using jutsu they had a customer

00:37:59,320 --> 00:38:04,780
who needed Windows workloads so they did

00:38:02,230 --> 00:38:07,870
the work to juju now deploys Windows

00:38:04,780 --> 00:38:10,570
workloads and juju runs fully on centos

00:38:07,870 --> 00:38:13,690
as well as a bun to it for Windows you

00:38:10,570 --> 00:38:15,100
need an a Bunter juju state server to

00:38:13,690 --> 00:38:16,930
manage the applications but it will

00:38:15,100 --> 00:38:19,240
deploy to Windows machines but for

00:38:16,930 --> 00:38:20,320
centos you can have a fully Santos do to

00:38:19,240 --> 00:38:22,750
install if you want

00:38:20,320 --> 00:38:26,140
and that's on the server side on the

00:38:22,750 --> 00:38:29,710
client side the client is available for

00:38:26,140 --> 00:38:32,110
Windows Linux and Mac and pretty much

00:38:29,710 --> 00:38:40,770
any platform that go around song because

00:38:32,110 --> 00:38:40,770
it's it's written in go questions

00:38:43,579 --> 00:38:47,259

YouTube URL: https://www.youtube.com/watch?v=lkASgQg8vWQ


