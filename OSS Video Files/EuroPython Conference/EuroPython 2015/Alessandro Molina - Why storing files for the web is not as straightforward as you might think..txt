Title: Alessandro Molina - Why storing files for the web is not as straightforward as you might think.
Publication date: 2015-08-08
Playlist: EuroPython 2015
Description: 
	Alessandro Molina - Why storing files for the web is not as straightforward as you might think.
[EuroPython 2015]
[21 July 2015]
[Bilbao, Euskadi, Spain]

DEPOT ( http://depot.readthedocs.org/en/latest/ ) is a file storage
framework born from the experience on a project that saved a lot of
files on disk, until the day it went online and the customer system
engineering team decided to switch to Heroku, which doesn't support
storing files on disk.

The talk will cover the facets of a feature "saving files" which has
always been considered straightforward but that can become complex in
the era of cloud deployment and when infrastructure migration happens.

After exposing the major drawbacks and issues that big projects might
face on short and long terms with file storage the talk will introduce
DEPOT and how it tried to solve most of the issues while providing a
super-easy-to-use interface for developers. We will see how to use
DEPOT to provide attachments on SQLAlchemy or MongoDB and how to
handle problems like migration to a different storage backend and long
term evolution.

Like SQLAlchemy makes possible to switch your storage on the fly
without touching code, DEPOT aims at making so possible for files and
even use multiple different storages together.
Captions: 
	00:00:00,000 --> 00:00:05,879
the server side related we use of course

00:00:03,090 --> 00:00:08,429
objective c and java for mobile

00:00:05,879 --> 00:00:11,429
applications but for everything which

00:00:08,429 --> 00:00:13,769
realized on a server it's in by them i

00:00:11,429 --> 00:00:16,350
have been a member of the turbo years to

00:00:13,769 --> 00:00:18,420
web framework or development team for

00:00:16,350 --> 00:00:20,970
the last four years if you don't know

00:00:18,420 --> 00:00:24,000
it's one of the oldest web frameworks

00:00:20,970 --> 00:00:26,849
together with django and i contributed

00:00:24,000 --> 00:00:29,369
to various fight on the web libraries

00:00:26,849 --> 00:00:32,450
like the manga to be objective and matt

00:00:29,369 --> 00:00:36,210
firming which is used at swiss for.net

00:00:32,450 --> 00:00:39,270
for everything related to MongoDB i have

00:00:36,210 --> 00:00:42,329
been the bigger maintainer since this

00:00:39,270 --> 00:00:44,250
year and i worked also on tosca widgets

00:00:42,329 --> 00:00:48,059
and former code which are libraries

00:00:44,250 --> 00:00:50,850
related to validation and forms for the

00:00:48,059 --> 00:00:54,570
web so most of my work have been related

00:00:50,850 --> 00:00:56,160
to the web world for the past years what

00:00:54,570 --> 00:00:58,559
I'm going to talk you is about the

00:00:56,160 --> 00:01:01,649
project that really happened and we had

00:00:58,559 --> 00:01:04,199
at our company which started just as a

00:01:01,649 --> 00:01:07,619
plain improve of technology the customer

00:01:04,199 --> 00:01:10,920
came and said hey I want to try my idea

00:01:07,619 --> 00:01:13,439
see if it can work if works properly if

00:01:10,920 --> 00:01:16,619
people can use it and it's not a huge

00:01:13,439 --> 00:01:18,900
mess and something like that so we

00:01:16,619 --> 00:01:20,939
started with a really simple code base

00:01:18,900 --> 00:01:23,840
that then became the final product

00:01:20,939 --> 00:01:27,360
became what the customer launched as

00:01:23,840 --> 00:01:29,430
usual it happens always like this the

00:01:27,360 --> 00:01:31,650
customer canes with something is just an

00:01:29,430 --> 00:01:34,799
idea I test and then it becomes the real

00:01:31,650 --> 00:01:36,900
Frankenstein and that the core part of

00:01:34,799 --> 00:01:42,150
this product was that he saved a lot of

00:01:36,900 --> 00:01:44,490
files mostly images in this case so we

00:01:42,150 --> 00:01:46,920
decided that as it was just a proof of

00:01:44,490 --> 00:01:49,259
concept and we were really short on the

00:01:46,920 --> 00:01:53,520
budget it should be done like in two

00:01:49,259 --> 00:01:56,280
days we decided to not rely on a cloud

00:01:53,520 --> 00:01:59,790
storage because it would involve more

00:01:56,280 --> 00:02:02,460
time to bring in any library to store

00:01:59,790 --> 00:02:05,939
the files and more time or money to

00:02:02,460 --> 00:02:09,539
actually pay for the storage itself so

00:02:05,939 --> 00:02:12,500
we just decided to go for storing files

00:02:09,539 --> 00:02:16,250
on the disk and lighting engine self

00:02:12,500 --> 00:02:18,920
so the most simple solution because it

00:02:16,250 --> 00:02:22,970
was a really simple and for a proof of

00:02:18,920 --> 00:02:27,320
concept was good enough the issue is

00:02:22,970 --> 00:02:29,959
that the customer add a technical guy on

00:02:27,320 --> 00:02:33,290
his side and this guy was in charge of

00:02:29,959 --> 00:02:35,930
deciding how to deploy the solution

00:02:33,290 --> 00:02:39,380
which several switch infrastructures and

00:02:35,930 --> 00:02:42,050
so on and here started the real problem

00:02:39,380 --> 00:02:46,070
because the customer provided us the

00:02:42,050 --> 00:02:48,470
final decision with the where the

00:02:46,070 --> 00:02:51,590
software is going to run just three days

00:02:48,470 --> 00:02:53,780
before they go live so we didn't know

00:02:51,590 --> 00:02:56,390
where the software was going to run

00:02:53,780 --> 00:02:58,940
until three days before the public lunch

00:02:56,390 --> 00:03:01,760
and the issue is that as they were

00:02:58,940 --> 00:03:04,040
obviously short on budget because at the

00:03:01,760 --> 00:03:06,500
beginning was just a proof of konala G

00:03:04,040 --> 00:03:10,220
they said decided not to rent a real

00:03:06,500 --> 00:03:13,130
server and this was actually my face

00:03:10,220 --> 00:03:15,230
when they told me because they decided

00:03:13,130 --> 00:03:18,110
to go for the worst possible solution in

00:03:15,230 --> 00:03:20,660
this case they went for a free solution

00:03:18,110 --> 00:03:23,209
on a roku and the rock doesn't support

00:03:20,660 --> 00:03:24,739
storing files on disk well you can store

00:03:23,209 --> 00:03:27,739
files on this they will just disappear

00:03:24,739 --> 00:03:31,040
whenever the application relaunches so

00:03:27,739 --> 00:03:33,410
actually we couldn't deploy the software

00:03:31,040 --> 00:03:35,570
on this platform because we started a

00:03:33,410 --> 00:03:38,150
lot of files we start them on disc and

00:03:35,570 --> 00:03:43,070
we know that whenever the application

00:03:38,150 --> 00:03:47,660
restarted device would just disappear so

00:03:43,070 --> 00:03:50,180
that was a huge oops right before the

00:03:47,660 --> 00:03:52,910
launch remember that we had like three

00:03:50,180 --> 00:03:55,940
days before they go life of the world

00:03:52,910 --> 00:03:58,250
softer and so we decided to rewrite

00:03:55,940 --> 00:04:00,500
everything we had from scratch

00:03:58,250 --> 00:04:02,959
everything related to storing files

00:04:00,500 --> 00:04:05,540
generating thumbnails applauding making

00:04:02,959 --> 00:04:08,540
them available serving them everything

00:04:05,540 --> 00:04:11,269
we use just playing we just relied on

00:04:08,540 --> 00:04:13,760
engines to serve them we just save the

00:04:11,269 --> 00:04:15,500
file on these to serve them we have to

00:04:13,760 --> 00:04:18,380
switch everything to another solution

00:04:15,500 --> 00:04:21,500
which could work with a rotten in this

00:04:18,380 --> 00:04:23,960
case we decided to go with grid FS which

00:04:21,500 --> 00:04:25,470
is the file system storage of MongoDB I

00:04:23,960 --> 00:04:28,740
don't know if any of you

00:04:25,470 --> 00:04:30,840
knows what it is actually because the

00:04:28,740 --> 00:04:33,780
application well I don't MongoDB for the

00:04:30,840 --> 00:04:36,780
database and mongodb has support for

00:04:33,780 --> 00:04:38,550
storing files in MongoDB itself and it's

00:04:36,780 --> 00:04:41,010
actually a really good support because

00:04:38,550 --> 00:04:42,930
this scales through MongoDB and it's

00:04:41,010 --> 00:04:45,420
pretty fast to serve them because it's

00:04:42,930 --> 00:04:47,970
just a key-value storage so you just put

00:04:45,420 --> 00:04:49,620
the real file a MongoDB we serve it and

00:04:47,970 --> 00:04:51,960
usually it's really fast because it's

00:04:49,620 --> 00:04:56,520
going to serve it from memory if the

00:04:51,960 --> 00:04:59,550
files is able to to stay in memory the

00:04:56,520 --> 00:05:02,310
issue is that it was just a new jack we

00:04:59,550 --> 00:05:05,610
didn't have time maybe we could have

00:05:02,310 --> 00:05:08,160
time to write it properly but as we were

00:05:05,610 --> 00:05:10,140
in total panic we just started to look

00:05:08,160 --> 00:05:12,480
for the fastest solution to make

00:05:10,140 --> 00:05:15,150
everything working and so we monkey

00:05:12,480 --> 00:05:17,700
patched all the classes that were going

00:05:15,150 --> 00:05:20,370
to save data and replace them with

00:05:17,700 --> 00:05:24,150
something that saved on greed FS and

00:05:20,370 --> 00:05:27,390
then we monkey patch our whiskey salable

00:05:24,150 --> 00:05:29,970
to actually whenever a specific path was

00:05:27,390 --> 00:05:32,520
asked it went to greet FS read the data

00:05:29,970 --> 00:05:36,180
and serve them back so it was actually a

00:05:32,520 --> 00:05:38,460
huge mess a neck and it went online with

00:05:36,180 --> 00:05:41,220
practically no testing because we

00:05:38,460 --> 00:05:43,590
finished it like the day before we tried

00:05:41,220 --> 00:05:45,870
it on our testing environment but we

00:05:43,590 --> 00:05:48,000
didn't try on on the real world

00:05:45,870 --> 00:05:50,220
deployment so we didn't have time to try

00:05:48,000 --> 00:05:53,520
it on another level application for

00:05:50,220 --> 00:05:57,180
example and so we went online with just

00:05:53,520 --> 00:06:00,450
a solution after we went online and

00:05:57,180 --> 00:06:02,760
thanks God everything worked so we

00:06:00,450 --> 00:06:07,050
didn't have any major failure because

00:06:02,760 --> 00:06:09,720
actually what we did was pretty easy we

00:06:07,050 --> 00:06:12,300
came together and thought that we

00:06:09,720 --> 00:06:14,250
actually needed a better solution it was

00:06:12,300 --> 00:06:16,320
obvious for everyone in the team that

00:06:14,250 --> 00:06:18,990
this kind of thing should not happen

00:06:16,320 --> 00:06:21,870
anymore we knew that the customer change

00:06:18,990 --> 00:06:24,540
the idea we knew that we did the best

00:06:21,870 --> 00:06:27,600
possible things with the budget time and

00:06:24,540 --> 00:06:29,940
knowledge we had at the time but still

00:06:27,600 --> 00:06:32,190
we had an issue still we did the wrong

00:06:29,940 --> 00:06:35,630
choice so we wanted to find a solution

00:06:32,190 --> 00:06:38,880
that could work independently from the

00:06:35,630 --> 00:06:42,210
budget constraint from the

00:06:38,880 --> 00:06:44,910
summer change change of requirements and

00:06:42,210 --> 00:06:47,850
ideas and we decided that this solution

00:06:44,910 --> 00:06:50,910
should be a tool that our developers

00:06:47,850 --> 00:06:53,580
could use and just rely on the tool and

00:06:50,910 --> 00:06:57,090
don't care about how and where their

00:06:53,580 --> 00:06:59,570
files are going everything related to

00:06:57,090 --> 00:07:02,340
storing files should be moved to the

00:06:59,570 --> 00:07:04,770
production to the deployment phase to

00:07:02,340 --> 00:07:09,510
the configuration phase and not to

00:07:04,770 --> 00:07:13,140
decoding face so that's how actually

00:07:09,510 --> 00:07:16,410
d-pod born we create a deep odd for

00:07:13,140 --> 00:07:19,410
death purpose to make our life easier to

00:07:16,410 --> 00:07:21,510
store files and be able to just say hey

00:07:19,410 --> 00:07:24,210
Depot store this file I don't care about

00:07:21,510 --> 00:07:26,190
where you're going to start it I just

00:07:24,210 --> 00:07:28,230
want you to be able to give it back to

00:07:26,190 --> 00:07:31,830
me when you will need to serve it to the

00:07:28,230 --> 00:07:35,100
client actually we wanted it not only to

00:07:31,830 --> 00:07:38,300
be is above calls to be fast enough for

00:07:35,100 --> 00:07:40,890
most your web application use cases

00:07:38,300 --> 00:07:43,980
hanya starts the interesting part

00:07:40,890 --> 00:07:47,100
because I started talking how it was the

00:07:43,980 --> 00:07:49,380
best to design a framework that should

00:07:47,100 --> 00:07:52,770
be used in a web application environment

00:07:49,380 --> 00:07:55,410
and was related to storing files there

00:07:52,770 --> 00:07:57,600
are a few things I learned by working on

00:07:55,410 --> 00:08:00,380
to Abigail still for a few years two

00:07:57,600 --> 00:08:03,660
biggest who has been used like since

00:08:00,380 --> 00:08:07,020
2007 if i'm not wrong and so it evolved

00:08:03,660 --> 00:08:09,180
a lot we saw a lot of changes we started

00:08:07,020 --> 00:08:12,420
with a template engine which was named

00:08:09,180 --> 00:08:15,030
kid then we moved forward to gang xi and

00:08:12,420 --> 00:08:17,040
now gang she is not supported anymore so

00:08:15,030 --> 00:08:20,120
we are going to move forward to kojiki

00:08:17,040 --> 00:08:23,850
and of course every of every one of our

00:08:20,120 --> 00:08:26,490
users need to be able to continue to run

00:08:23,850 --> 00:08:29,490
its applications and for example some of

00:08:26,490 --> 00:08:32,250
our users didn't like kojiki and gang

00:08:29,490 --> 00:08:34,919
sheehan key and use the ginger to some

00:08:32,250 --> 00:08:37,229
use Necker and so on and we needed to be

00:08:34,919 --> 00:08:40,680
able to support all of them and let the

00:08:37,229 --> 00:08:42,120
users work with all of them so what I

00:08:40,680 --> 00:08:45,090
learned is actually that web

00:08:42,120 --> 00:08:48,270
applications at least for the part of

00:08:45,090 --> 00:08:51,540
developing them I'm much like a little

00:08:48,270 --> 00:08:52,380
kid they have a lot of issues they want

00:08:51,540 --> 00:08:55,410
things like

00:08:52,380 --> 00:08:57,270
I want have them to be and they might

00:08:55,410 --> 00:08:59,610
change their mind like every five

00:08:57,270 --> 00:09:01,800
seconds okay whenever you are working

00:08:59,610 --> 00:09:03,840
with developers on the web wat the web

00:09:01,800 --> 00:09:06,330
word is really fast so your

00:09:03,840 --> 00:09:08,210
infrastructure might change anytime you

00:09:06,330 --> 00:09:10,860
can I start small then you have like

00:09:08,210 --> 00:09:12,840
10,000 users the next day and you need

00:09:10,860 --> 00:09:15,660
to scan and change everything your

00:09:12,840 --> 00:09:18,330
infrastructure night start with a

00:09:15,660 --> 00:09:20,970
specific technology you decide to go

00:09:18,330 --> 00:09:25,080
with storing files on disk and then the

00:09:20,970 --> 00:09:27,600
next day you need to change to a MongoDB

00:09:25,080 --> 00:09:30,000
for storing files because you need to

00:09:27,600 --> 00:09:32,820
scale or your developers just don't like

00:09:30,000 --> 00:09:35,910
the previous idea anymore or maybe the

00:09:32,820 --> 00:09:40,140
library you are using as diet like in

00:09:35,910 --> 00:09:45,450
the case of kid when we switch the two

00:09:40,140 --> 00:09:48,600
gang xi and so everything you do for the

00:09:45,450 --> 00:09:52,560
web world requires to be far more able

00:09:48,600 --> 00:09:55,620
to change or real-time y on production

00:09:52,560 --> 00:09:58,770
because the web board environment

00:09:55,620 --> 00:10:00,450
changes pretty often okay for various

00:09:58,770 --> 00:10:02,640
reason not all of them are good

00:10:00,450 --> 00:10:04,800
sometimes it changed just because it's

00:10:02,640 --> 00:10:06,750
cool to switch to a synchronous

00:10:04,800 --> 00:10:09,810
technologies or things like that but

00:10:06,750 --> 00:10:12,570
whatever your user want to be able to

00:10:09,810 --> 00:10:15,450
change what they are working on and the

00:10:12,570 --> 00:10:17,790
third point is that automatic testing is

00:10:15,450 --> 00:10:20,250
actually something which is done for

00:10:17,790 --> 00:10:22,410
real on most web applications because

00:10:20,250 --> 00:10:24,870
it's easy to simulate the environment

00:10:22,410 --> 00:10:27,870
it's easy to perform a request and check

00:10:24,870 --> 00:10:29,790
the response so most web application one

00:10:27,870 --> 00:10:32,910
to be able to improve ought to provide

00:10:29,790 --> 00:10:35,100
automatic test and the test with so

00:10:32,910 --> 00:10:37,310
whenever you write a frame or for the

00:10:35,100 --> 00:10:40,170
web work they should make really easy to

00:10:37,310 --> 00:10:42,450
monkey patch the framework well monkey

00:10:40,170 --> 00:10:45,150
patching is the wrong term but to drive

00:10:42,450 --> 00:10:48,060
the framework in a way that it's good

00:10:45,150 --> 00:10:50,790
for making easy to write tests so to

00:10:48,060 --> 00:10:53,850
simulate the production application

00:10:50,790 --> 00:10:57,950
without needing the world production

00:10:53,850 --> 00:11:00,720
infrastructure I'll make you an example

00:10:57,950 --> 00:11:02,580
sequel alchemy is really good and one of

00:11:00,720 --> 00:11:04,830
the reason why it's really good that is

00:11:02,580 --> 00:11:06,190
able to work on sequin light because

00:11:04,830 --> 00:11:08,200
when you write tests

00:11:06,190 --> 00:11:09,910
you don't need to set up a wall my

00:11:08,200 --> 00:11:11,770
sequel environment or Pascal's

00:11:09,910 --> 00:11:14,260
environment just to run the test weight

00:11:11,770 --> 00:11:16,090
on your computer you can go with secret

00:11:14,260 --> 00:11:18,340
light or you can even go with sequel

00:11:16,090 --> 00:11:21,520
light in memory which doesn't even need

00:11:18,340 --> 00:11:25,000
to store your database at all when we

00:11:21,520 --> 00:11:27,400
decided to choose a MongoDB support

00:11:25,000 --> 00:11:29,500
library for 20 years to because whenever

00:11:27,400 --> 00:11:33,280
you start a new project in 20 years you

00:11:29,500 --> 00:11:35,650
can choose to go for sequel databases or

00:11:33,280 --> 00:11:38,020
manga to be we decided to go for me

00:11:35,650 --> 00:11:40,540
because Ming at the feature which is

00:11:38,020 --> 00:11:43,390
called the Montgomery implementation

00:11:40,540 --> 00:11:45,910
which made possible to brightest unit

00:11:43,390 --> 00:11:48,280
without needing a manga to be at all it

00:11:45,910 --> 00:11:50,620
simulated the wall DB server in

00:11:48,280 --> 00:11:52,840
memory so you can create a record check

00:11:50,620 --> 00:11:55,210
demands on without needing to even start

00:11:52,840 --> 00:11:56,980
moving to be and deport should be able

00:11:55,210 --> 00:11:59,680
to do the same thing I want to be able

00:11:56,980 --> 00:12:02,590
to save the files without needing to

00:11:59,680 --> 00:12:04,390
actually start the file storage itself

00:12:02,590 --> 00:12:06,850
or without needing to actually upload

00:12:04,390 --> 00:12:10,720
them on s free if i'm going to use

00:12:06,850 --> 00:12:13,150
Amazon Web Services so and the last

00:12:10,720 --> 00:12:15,220
point is that what I learned is actually

00:12:13,150 --> 00:12:18,700
then making things really simple and

00:12:15,220 --> 00:12:21,700
easy to use wins over providing them a

00:12:18,700 --> 00:12:24,520
huge amount of features providing a huge

00:12:21,700 --> 00:12:27,220
amount of feature survives a real big

00:12:24,520 --> 00:12:30,040
investment in trying to keep them

00:12:27,220 --> 00:12:33,460
together moving their forward keeping

00:12:30,040 --> 00:12:35,710
them in shape and so on while and

00:12:33,460 --> 00:12:37,870
usually you are not able to cover all

00:12:35,710 --> 00:12:40,210
the use cases a lot the features because

00:12:37,870 --> 00:12:42,340
maybe you are going to use just twenty

00:12:40,210 --> 00:12:45,370
percent of the features but there will

00:12:42,340 --> 00:12:49,330
be one of your user which we rely on the

00:12:45,370 --> 00:12:51,730
other eighty percent so just focus on

00:12:49,330 --> 00:12:55,420
the real important features and let you

00:12:51,730 --> 00:12:58,510
users right extensions over them if they

00:12:55,420 --> 00:13:01,510
are good the good foundation is solid

00:12:58,510 --> 00:13:03,670
then people we start relying it for

00:13:01,510 --> 00:13:05,740
writing their own extensions this is one

00:13:03,670 --> 00:13:09,070
of the reasons why for example d put

00:13:05,740 --> 00:13:11,110
doesn't have a file system structure it

00:13:09,070 --> 00:13:14,440
doesn't have directories it doesn't have

00:13:11,110 --> 00:13:16,870
the concept of collections of files you

00:13:14,440 --> 00:13:19,150
just sorta file you want the directory

00:13:16,870 --> 00:13:19,779
you want a year are key right into

00:13:19,150 --> 00:13:23,199
yourself

00:13:19,779 --> 00:13:25,389
it's not hard to store fat to set the

00:13:23,199 --> 00:13:28,269
pointer to the file somewhere where you

00:13:25,389 --> 00:13:30,160
can have the giver key and so on and in

00:13:28,269 --> 00:13:32,800
fact there is a guide which brought

00:13:30,160 --> 00:13:35,680
Depot TFS which is an extension for

00:13:32,800 --> 00:13:38,410
deeper that provides support for file

00:13:35,680 --> 00:13:41,290
system file system like because it works

00:13:38,410 --> 00:13:43,480
also on things like we defense which do

00:13:41,290 --> 00:13:45,819
not provide the file system at all it

00:13:43,480 --> 00:13:48,819
just can save that file and you cannot

00:13:45,819 --> 00:13:53,949
say I want to have a group of files in

00:13:48,819 --> 00:13:56,350
any way so the first thing we focus on

00:13:53,949 --> 00:13:59,019
is to allow for infrastructure changes

00:13:56,350 --> 00:14:01,480
because that was our first problem we

00:13:59,019 --> 00:14:04,540
had we face that problem so we knew

00:14:01,480 --> 00:14:07,649
pretty well what we needed to check and

00:14:04,540 --> 00:14:11,129
what we needed to do so the first thing

00:14:07,649 --> 00:14:13,749
three things we decided to do was to

00:14:11,129 --> 00:14:16,300
allow to configure multiple storage

00:14:13,749 --> 00:14:18,790
engines so whenever you use the pot you

00:14:16,300 --> 00:14:20,949
can say hey I want to save something

00:14:18,790 --> 00:14:23,170
here something there is something else

00:14:20,949 --> 00:14:25,569
there too I want to have three different

00:14:23,170 --> 00:14:28,930
storage engines because I want to use

00:14:25,569 --> 00:14:31,959
locals and also with FS and also amazon

00:14:28,930 --> 00:14:33,910
web services as free and we wanted to be

00:14:31,959 --> 00:14:36,579
able to switch storage engines at

00:14:33,910 --> 00:14:39,939
runtime with a graceful restart of

00:14:36,579 --> 00:14:41,620
course not that you can actually switch

00:14:39,939 --> 00:14:43,629
it in your configuration without

00:14:41,620 --> 00:14:46,779
starting the web server unless you

00:14:43,629 --> 00:14:49,480
properly Bryce and checks and it didn't

00:14:46,779 --> 00:14:52,240
have to it should continue to keep

00:14:49,480 --> 00:14:55,990
working on the previous applauded files

00:14:52,240 --> 00:14:58,089
so you can say a from now on upload

00:14:55,990 --> 00:15:00,250
files on greed FS but everything I

00:14:58,089 --> 00:15:05,559
uploaded on the disk should continue the

00:15:00,250 --> 00:15:07,540
war and the pot will do that and we want

00:15:05,559 --> 00:15:10,750
out of course to be able to rely on

00:15:07,540 --> 00:15:12,429
multiple storages concurrently so

00:15:10,750 --> 00:15:14,410
naughty you could that not only you

00:15:12,429 --> 00:15:16,720
could have with the fast as free or

00:15:14,410 --> 00:15:19,139
whatever but you could also use them in

00:15:16,720 --> 00:15:22,059
your application at the same time and

00:15:19,139 --> 00:15:25,300
this is because actually it happened for

00:15:22,059 --> 00:15:27,610
we on one of our users came and said a

00:15:25,300 --> 00:15:32,139
deeper this really cool but I want to

00:15:27,610 --> 00:15:33,580
store my avatars here my items are

00:15:32,139 --> 00:15:36,940
plotted on my social net

00:15:33,580 --> 00:15:40,270
there and whatever is a 10.5 for my own

00:15:36,940 --> 00:15:42,820
use should be on disk too so how can I

00:15:40,270 --> 00:15:45,070
use three different storage engines at

00:15:42,820 --> 00:15:48,640
the same time and this has been like the

00:15:45,070 --> 00:15:51,880
second question we had on D pod so has

00:15:48,640 --> 00:15:54,220
been a real need from our one of our

00:15:51,880 --> 00:15:56,800
users to be able to use multiple storage

00:15:54,220 --> 00:15:58,900
engines concurrently so whenever you

00:15:56,800 --> 00:16:01,660
upload a file if you do not specify

00:15:58,900 --> 00:16:04,030
anything the file goes to the default

00:16:01,660 --> 00:16:06,340
storage engine storage actually not

00:16:04,030 --> 00:16:08,710
start changing if you specify something

00:16:06,340 --> 00:16:11,650
you can drive the file to be uploaded on

00:16:08,710 --> 00:16:14,560
a specific storage and storage are

00:16:11,650 --> 00:16:18,700
actually identified by a name so that

00:16:14,560 --> 00:16:21,250
storage right now can be on greed FS but

00:16:18,700 --> 00:16:24,220
if you configure a new story which is

00:16:21,250 --> 00:16:26,260
named the same but is on s free your

00:16:24,220 --> 00:16:28,930
world files continue to be served from

00:16:26,260 --> 00:16:32,650
greedy fest and whatever you upload new

00:16:28,930 --> 00:16:34,780
will be served from s3 because the pod

00:16:32,650 --> 00:16:37,780
knows that their own files on on greed

00:16:34,780 --> 00:16:39,850
FS and the new files are on f3 and you

00:16:37,780 --> 00:16:44,070
are still using the storage which is

00:16:39,850 --> 00:16:48,490
names avatars in case of user images and

00:16:44,070 --> 00:16:52,980
then you can of course use multiple of

00:16:48,490 --> 00:16:55,930
them's on during during runtime and

00:16:52,980 --> 00:16:58,600
that's made possible because D pod as I

00:16:55,930 --> 00:17:02,260
told you has no concept of a fire Archy

00:16:58,600 --> 00:17:05,380
so it's able to identify files but by an

00:17:02,260 --> 00:17:08,170
ID and the ID is paid to the storage

00:17:05,380 --> 00:17:10,750
name so every file is uniquely

00:17:08,170 --> 00:17:13,300
identified by NID and the storage name

00:17:10,750 --> 00:17:16,839
so as far as the story just the same

00:17:13,300 --> 00:17:19,540
name and the file as the same ID he will

00:17:16,839 --> 00:17:23,620
be able to look up for that file even if

00:17:19,540 --> 00:17:26,500
the underlying storage changed ok and

00:17:23,620 --> 00:17:28,630
the other part we wanted to do is

00:17:26,500 --> 00:17:31,000
provide a really easy way to use

00:17:28,630 --> 00:17:33,400
everything so we provided something

00:17:31,000 --> 00:17:35,800
which is called the D pod manager which

00:17:33,400 --> 00:17:39,220
is in charge of actually doing all the

00:17:35,800 --> 00:17:42,220
configuration so that it could work on

00:17:39,220 --> 00:17:46,210
practically any web framework and we

00:17:42,220 --> 00:17:49,450
were not bound for example to using the

00:17:46,210 --> 00:17:51,730
any files which is what we use into

00:17:49,450 --> 00:17:54,820
abagail's phone configuration you could

00:17:51,730 --> 00:17:56,740
use yamla or whatever you want for

00:17:54,820 --> 00:17:58,870
storing configuration or you can even

00:17:56,740 --> 00:18:01,330
write the configuration in Python itself

00:17:58,870 --> 00:18:03,580
because the D pod manager is the one in

00:18:01,330 --> 00:18:06,100
charge of keeping the real configuration

00:18:03,580 --> 00:18:08,740
and is able to load it from various

00:18:06,100 --> 00:18:12,220
sources or from dictionaries or for

00:18:08,740 --> 00:18:14,950
whatever any keeps track of what you

00:18:12,220 --> 00:18:16,630
have currently active and configured so

00:18:14,950 --> 00:18:18,940
whenever you need something you go to

00:18:16,630 --> 00:18:21,220
the depot manager and say hey Deepak

00:18:18,940 --> 00:18:23,440
manager give me the storage I don't care

00:18:21,220 --> 00:18:25,450
where it is how its configured and now

00:18:23,440 --> 00:18:28,000
it was just give it to me and I will

00:18:25,450 --> 00:18:29,950
save a file there and if you don't want

00:18:28,000 --> 00:18:32,590
to get any specific tutorial you just

00:18:29,950 --> 00:18:37,149
ask for a storage and it will provide

00:18:32,590 --> 00:18:39,789
you the default one so this is a an

00:18:37,149 --> 00:18:41,950
example to from the documentation of

00:18:39,789 --> 00:18:45,010
depot which is the most important case

00:18:41,950 --> 00:18:47,890
we are just getting configuring a

00:18:45,010 --> 00:18:50,529
storage getting the storage itself

00:18:47,890 --> 00:18:52,330
installing the file on the storage so

00:18:50,529 --> 00:18:54,309
you can see that the configuration is in

00:18:52,330 --> 00:18:57,460
this case is made through a dictionary

00:18:54,309 --> 00:19:00,390
and we are configuring a default storage

00:18:57,460 --> 00:19:03,730
in this case in name default and the

00:19:00,390 --> 00:19:07,059
storage uses the grid EFS back-end and

00:19:03,730 --> 00:19:09,190
provides some additional options which

00:19:07,059 --> 00:19:12,029
are related to the back end itself so in

00:19:09,190 --> 00:19:15,340
this case it provides the MongoDB URL

00:19:12,029 --> 00:19:17,500
then we get the storage itself in this

00:19:15,340 --> 00:19:20,380
case we don't specify any specific

00:19:17,500 --> 00:19:23,710
storage so we are actually getting the

00:19:20,380 --> 00:19:26,289
default one and then we just create the

00:19:23,710 --> 00:19:29,080
file whenever we create a file on a

00:19:26,289 --> 00:19:31,210
storage we get back the file ID and we

00:19:29,080 --> 00:19:34,330
can look back for the files through the

00:19:31,210 --> 00:19:36,190
dot get method of the storage so you see

00:19:34,330 --> 00:19:38,770
that the interface is pretty similar to

00:19:36,190 --> 00:19:41,049
dictionaries just create same thing you

00:19:38,770 --> 00:19:44,230
get it back by key nothing more nothing

00:19:41,049 --> 00:19:48,039
less this is the core foundation of

00:19:44,230 --> 00:19:49,899
people and over the core foundation

00:19:48,039 --> 00:19:53,289
there are more advanced things more

00:19:49,899 --> 00:19:57,039
complex things we we focused on

00:19:53,289 --> 00:19:59,860
providing a solid foundation on which we

00:19:57,039 --> 00:20:02,650
could actually implement more advanced

00:19:59,860 --> 00:20:05,710
features and one of these features is

00:20:02,650 --> 00:20:08,470
the support for database systems like in

00:20:05,710 --> 00:20:11,350
this case we we have support for a

00:20:08,470 --> 00:20:13,480
sequel alchemy so you want to storify

00:20:11,350 --> 00:20:16,120
which is somehow related to your model

00:20:13,480 --> 00:20:18,370
liking this guy in the case of a user

00:20:16,120 --> 00:20:20,260
you have the avatar and you want to

00:20:18,370 --> 00:20:22,390
store the avatar inside the user you

00:20:20,260 --> 00:20:25,000
just declare a column which is of type

00:20:22,390 --> 00:20:27,700
upload file field and you can specify

00:20:25,000 --> 00:20:30,340
the applauded type in this case is an

00:20:27,700 --> 00:20:32,500
image rivet um Dave so whenever you

00:20:30,340 --> 00:20:35,590
upload the image it will also get a

00:20:32,500 --> 00:20:39,309
thumbnail to and then whenever you save

00:20:35,590 --> 00:20:42,220
your document or user you just assign

00:20:39,309 --> 00:20:44,980
the photo to the file and deport will

00:20:42,220 --> 00:20:48,100
upload it on whatever system whatever

00:20:44,980 --> 00:20:50,559
storage you wanted to or if you don't

00:20:48,100 --> 00:20:53,710
specify any on the default one and will

00:20:50,559 --> 00:20:59,020
link it to the to the actual model

00:20:53,710 --> 00:21:01,150
itself so i told you that one of the

00:20:59,020 --> 00:21:03,730
things we learnt is actually the web

00:21:01,150 --> 00:21:05,860
application change softens maybe the

00:21:03,730 --> 00:21:07,870
developer change maybe the technology

00:21:05,860 --> 00:21:11,049
improves whatever so it should be easy

00:21:07,870 --> 00:21:13,660
to support different technologies so in

00:21:11,049 --> 00:21:16,660
dport we were we focused on making

00:21:13,660 --> 00:21:18,490
everything a layer over layer for

00:21:16,660 --> 00:21:20,410
example we have support for sequel

00:21:18,490 --> 00:21:23,020
alchemy attachments we have support for

00:21:20,410 --> 00:21:25,419
mongodb attachment we have support for

00:21:23,020 --> 00:21:27,460
storing files on s free local files and

00:21:25,419 --> 00:21:30,010
we divest and we have implemented

00:21:27,460 --> 00:21:33,100
everything as plugins so if you want to

00:21:30,010 --> 00:21:35,200
support storing files of your own system

00:21:33,100 --> 00:21:37,150
or whatever you invented yourself you

00:21:35,200 --> 00:21:39,549
just write the plugin and everything

00:21:37,150 --> 00:21:41,890
else in dport continues to work the

00:21:39,549 --> 00:21:44,740
sequel alchemy support will continue to

00:21:41,890 --> 00:21:46,780
work even if it's written on your own

00:21:44,740 --> 00:21:49,090
plugin because you just need to

00:21:46,780 --> 00:21:52,240
implement the storage engine and nothing

00:21:49,090 --> 00:21:55,270
else and the reason files is made by a

00:21:52,240 --> 00:21:58,059
whiskey whiskey middleware so you can

00:21:55,270 --> 00:22:00,040
use it mean anywhere framework we use it

00:21:58,059 --> 00:22:02,410
with rebellious but if you have a flask

00:22:00,040 --> 00:22:05,650
user you can just attach the framework

00:22:02,410 --> 00:22:08,820
to flask and go on actually most of our

00:22:05,650 --> 00:22:11,830
users are actually flask users because

00:22:08,820 --> 00:22:13,720
because current is what most commonly

00:22:11,830 --> 00:22:17,470
used for web api so

00:22:13,720 --> 00:22:19,570
support and then it works together you

00:22:17,470 --> 00:22:22,690
view database if you don't know these

00:22:19,570 --> 00:22:26,050
it's actually a real query it's called

00:22:22,690 --> 00:22:31,030
the query of despair it's a really

00:22:26,050 --> 00:22:32,980
really long SQL query and what it means

00:22:31,030 --> 00:22:35,050
that the works of your database it means

00:22:32,980 --> 00:22:37,360
that the cops with your transaction for

00:22:35,050 --> 00:22:40,600
example you uploaded via bottom of the

00:22:37,360 --> 00:22:43,330
user but saving the user phase upload

00:22:40,600 --> 00:22:45,970
upload updating the user fails your

00:22:43,330 --> 00:22:47,740
transaction get small back as far as you

00:22:45,970 --> 00:22:50,470
have a transaction manager properly

00:22:47,740 --> 00:22:52,630
working and then he puts detect that

00:22:50,470 --> 00:22:54,850
your transaction Walt back and will

00:22:52,630 --> 00:22:59,140
recover the previous dates of the files

00:22:54,850 --> 00:23:02,020
so if you try to save a new state of the

00:22:59,140 --> 00:23:04,840
user and the state includes a new avatar

00:23:02,020 --> 00:23:06,910
and a new name and some name and storing

00:23:04,840 --> 00:23:10,120
the name and surname fails for whatever

00:23:06,910 --> 00:23:12,670
reason maybe a dialogue on something in

00:23:10,120 --> 00:23:15,310
your query or whatever people will

00:23:12,670 --> 00:23:18,790
detect it and we recover the previous

00:23:15,310 --> 00:23:21,640
states of the avatar too so you didn't

00:23:18,790 --> 00:23:25,150
say things out only the Avatar but not

00:23:21,640 --> 00:23:29,770
Nene your models will change in a car in

00:23:25,150 --> 00:23:32,530
a proper way whenever you you delete an

00:23:29,770 --> 00:23:34,360
item it actually deletes the attachments

00:23:32,530 --> 00:23:36,910
only if the deletion of the item

00:23:34,360 --> 00:23:39,460
properly worked on the database if you

00:23:36,910 --> 00:23:41,950
fail to delete the items you don't end

00:23:39,460 --> 00:23:43,990
up with an entry which is in your

00:23:41,950 --> 00:23:46,870
database but you don't have the Avatar

00:23:43,990 --> 00:23:48,930
anymore so depot detects the transaction

00:23:46,870 --> 00:23:54,010
way that we recover the files that

00:23:48,930 --> 00:23:56,470
wanted to delete and the last thing is

00:23:54,010 --> 00:23:59,290
that it should be really easy to extend

00:23:56,470 --> 00:24:01,660
so we focused on two types of extensions

00:23:59,290 --> 00:24:05,620
to provide additional behaviors over d

00:24:01,660 --> 00:24:07,990
put one is attachments themselves so

00:24:05,620 --> 00:24:10,780
whenever you provide an upload file

00:24:07,990 --> 00:24:12,970
field you can provide an applaud type

00:24:10,780 --> 00:24:16,600
the attachments are actually in charge

00:24:12,970 --> 00:24:18,790
of changing the file itself so whenever

00:24:16,600 --> 00:24:21,670
you want to replace the file with a new

00:24:18,790 --> 00:24:25,030
file you want to go foreign up for an

00:24:21,670 --> 00:24:26,500
attachment type and then you can /

00:24:25,030 --> 00:24:27,399
attachment type you can also probably

00:24:26,500 --> 00:24:30,009
feel those

00:24:27,399 --> 00:24:32,289
filters do not replace the file itself

00:24:30,009 --> 00:24:34,469
are not able to change the content

00:24:32,289 --> 00:24:36,639
itself but they can add additional

00:24:34,469 --> 00:24:40,089
information to the counter which might

00:24:36,639 --> 00:24:42,879
be additional metadata or additional

00:24:40,089 --> 00:24:45,429
files in this case and you can of course

00:24:42,879 --> 00:24:47,139
apply multiple filters for example you

00:24:45,429 --> 00:24:50,080
might have a filter which generates

00:24:47,139 --> 00:24:52,509
Tumnus and you might apply four of them

00:24:50,080 --> 00:24:54,940
because you want the more small medium

00:24:52,509 --> 00:24:57,339
and big Tumnus and it just likely have

00:24:54,940 --> 00:24:59,379
the same filter three times with

00:24:57,339 --> 00:25:01,229
different construction options and you

00:24:59,379 --> 00:25:07,239
will end up with three different

00:25:01,229 --> 00:25:10,979
thumbnails let me show you a real case

00:25:07,239 --> 00:25:16,779
of an attachment which is took from the

00:25:10,979 --> 00:25:18,519
documentation of D pod and the

00:25:16,779 --> 00:25:20,769
interesting part is actually that they

00:25:18,519 --> 00:25:23,619
not only can change the content itself

00:25:20,769 --> 00:25:25,839
but I can also add additional behaviors

00:25:23,619 --> 00:25:28,359
to the files what does it mean it means

00:25:25,839 --> 00:25:31,330
that whenever you recover the file from

00:25:28,359 --> 00:25:35,080
your file system it will be converted to

00:25:31,330 --> 00:25:37,599
data plot type so if you are plotted I

00:25:35,080 --> 00:25:40,479
provided additional methods like for

00:25:37,599 --> 00:25:43,869
example I don't know give me the

00:25:40,479 --> 00:25:47,049
Instagram of the image you can call them

00:25:43,869 --> 00:25:50,019
on your ready stored files so the pot

00:25:47,049 --> 00:25:51,820
will know the the original type of the

00:25:50,019 --> 00:25:53,529
applauded and will be able to recover

00:25:51,820 --> 00:25:55,450
with state and provide all the

00:25:53,529 --> 00:25:59,169
additional features and behaviors your

00:25:55,450 --> 00:26:01,450
file said not only to just or change the

00:25:59,169 --> 00:26:03,879
file itself or for example if you want

00:26:01,450 --> 00:26:06,879
to add additional informations the IQ

00:26:03,879 --> 00:26:11,830
want to store not only the file but also

00:26:06,879 --> 00:26:13,570
for example the num primary color for

00:26:11,830 --> 00:26:16,299
example if you want to look for the

00:26:13,570 --> 00:26:18,489
images which are red you can start that

00:26:16,299 --> 00:26:21,159
inside the file as a meta data because

00:26:18,489 --> 00:26:24,519
d-pod keeps tracks of the files and all

00:26:21,159 --> 00:26:27,330
the meter data over the file so you can

00:26:24,519 --> 00:26:30,039
add additional details of your files and

00:26:27,330 --> 00:26:32,859
this is the example of a customer

00:26:30,039 --> 00:26:35,649
parchment in this case it's applauded an

00:26:32,859 --> 00:26:38,169
image unless it's bigger than a specific

00:26:35,649 --> 00:26:40,610
resolution in case the image is bigger

00:26:38,169 --> 00:26:43,809
than that resolution liga shrinks

00:26:40,610 --> 00:26:46,730
to that side so the first thing we do is

00:26:43,809 --> 00:26:50,720
getting the content itself and its data

00:26:46,730 --> 00:26:53,059
and this is done to too well / functions

00:26:50,720 --> 00:26:57,020
because we don't know what the content

00:26:53,059 --> 00:26:59,299
is we know that the pot is going to save

00:26:57,020 --> 00:27:01,490
files but we don't know what the user is

00:26:59,299 --> 00:27:04,490
going to provide us for example in my

00:27:01,490 --> 00:27:07,429
provider file in my provide bytes in

00:27:04,490 --> 00:27:11,420
memory in my provided by taio it might

00:27:07,429 --> 00:27:13,820
provide a gif I feel if it was something

00:27:11,420 --> 00:27:16,070
uploaded from the web and we have these

00:27:13,820 --> 00:27:18,350
pretty convenient functions file phone

00:27:16,070 --> 00:27:20,630
content that whatever is the content

00:27:18,350 --> 00:27:23,210
will convert it to a proper file and

00:27:20,630 --> 00:27:26,150
it's pretty efficient because users in

00:27:23,210 --> 00:27:28,190
memory storage for files which are

00:27:26,150 --> 00:27:30,740
smaller than a site and then instance

00:27:28,190 --> 00:27:34,040
them on disc on leave the site is bigger

00:27:30,740 --> 00:27:38,270
than a maximum size then we open image

00:27:34,040 --> 00:27:42,049
check for ifs each side if the site is

00:27:38,270 --> 00:27:44,540
bigger than a specified limit we create

00:27:42,049 --> 00:27:47,900
a new thumbnail for the image of the

00:27:44,540 --> 00:27:50,240
maximum site and we replace the content

00:27:47,900 --> 00:27:53,240
we see you we see that in this case we

00:27:50,240 --> 00:27:56,270
we replace the content variable with a

00:27:53,240 --> 00:27:57,799
spoon temporary file which is that kind

00:27:56,270 --> 00:28:01,130
of temporary file which stores

00:27:57,799 --> 00:28:03,559
everything memory until you make the

00:28:01,130 --> 00:28:06,410
data bigger than the maximum sites you

00:28:03,559 --> 00:28:08,900
specify and then you save the image

00:28:06,410 --> 00:28:12,080
itself inside your spool temporary file

00:28:08,900 --> 00:28:14,960
and then gone and provide to the process

00:28:12,080 --> 00:28:17,450
content they replaced content so you

00:28:14,960 --> 00:28:19,370
just call your parent metal with the new

00:28:17,450 --> 00:28:21,950
content and in the middle you can do

00:28:19,370 --> 00:28:24,080
whatever you want because the real logic

00:28:21,950 --> 00:28:27,890
of saving the files is inside your

00:28:24,080 --> 00:28:31,520
parent implementation moving to filters

00:28:27,890 --> 00:28:33,950
we already know that we already know

00:28:31,520 --> 00:28:37,490
that attachments can have more than a

00:28:33,950 --> 00:28:40,549
filter and we already know that they run

00:28:37,490 --> 00:28:44,690
after a pod so while the attachments

00:28:40,549 --> 00:28:48,410
have runs during applaud disco runs

00:28:44,690 --> 00:28:51,169
before the file gets uploaded so in this

00:28:48,410 --> 00:28:54,200
case this is by design because if we

00:28:51,169 --> 00:28:54,930
fail in generating the thumbnail we do

00:28:54,200 --> 00:28:58,740
not want

00:28:54,930 --> 00:29:02,550
to to go on and store the data in the

00:28:58,740 --> 00:29:05,100
database for example and we end up with

00:29:02,550 --> 00:29:09,270
a user without them without avatar again

00:29:05,100 --> 00:29:11,910
so if the avatar for you user phase the

00:29:09,270 --> 00:29:14,820
D pod crashes and you won't have the

00:29:11,910 --> 00:29:17,910
other the user created at all so not

00:29:14,820 --> 00:29:22,200
only if writing on the database fails d

00:29:17,910 --> 00:29:24,780
put recovers device but also if creating

00:29:22,200 --> 00:29:27,240
the files phase you have a proper

00:29:24,780 --> 00:29:31,410
exception before saving the data to the

00:29:27,240 --> 00:29:34,050
database so we try to do the best we can

00:29:31,410 --> 00:29:36,690
to keep in sync the few things if any of

00:29:34,050 --> 00:29:38,700
the two phase you don't have done

00:29:36,690 --> 00:29:43,610
anything you haven't done anything at

00:29:38,700 --> 00:29:46,860
all then so indicates of filters

00:29:43,610 --> 00:29:49,110
actually you do not work before

00:29:46,860 --> 00:29:50,850
uploading the files but after why

00:29:49,110 --> 00:29:53,910
because filters usually provide

00:29:50,850 --> 00:29:56,670
additional behaviors and informations so

00:29:53,910 --> 00:29:59,610
in case it fails a filter is we just

00:29:56,670 --> 00:30:02,610
gone and provide the details that defy

00:29:59,610 --> 00:30:04,890
the filter failed but you're you already

00:30:02,610 --> 00:30:06,630
have the file so you can recover the

00:30:04,890 --> 00:30:09,090
additional informations from the

00:30:06,630 --> 00:30:11,190
existing file so even if you the

00:30:09,090 --> 00:30:14,190
secondary thumbnail face the medium

00:30:11,190 --> 00:30:16,200
signs thumbnail fails it's not a huge

00:30:14,190 --> 00:30:18,300
issue because you can recreate that

00:30:16,200 --> 00:30:21,530
medium site summary from the original

00:30:18,300 --> 00:30:24,450
data and as I told you you can add

00:30:21,530 --> 00:30:26,430
additional data to your files but in

00:30:24,450 --> 00:30:28,980
decades of it does not behavior so you

00:30:26,430 --> 00:30:31,980
cannot add additional methods to your

00:30:28,980 --> 00:30:34,650
object through filters anyways a simple

00:30:31,980 --> 00:30:36,870
example of a filter which actually saves

00:30:34,650 --> 00:30:40,350
the thumbnails for a specific resolution

00:30:36,870 --> 00:30:43,050
in a specific format and you see that we

00:30:40,350 --> 00:30:45,090
just received the unsaved event and

00:30:43,050 --> 00:30:47,910
inside the unsaved event we have the

00:30:45,090 --> 00:30:50,280
uploaded file and at the end of the code

00:30:47,910 --> 00:30:53,010
which mostly just created the terminal

00:30:50,280 --> 00:30:55,710
we just add to applauded file any

00:30:53,010 --> 00:30:58,200
information we want in this case we add

00:30:55,710 --> 00:31:00,900
the thumbnail ID terminal part and

00:30:58,200 --> 00:31:02,790
thumbnail URL to the uploaded file so

00:31:00,900 --> 00:31:05,100
uploaded files work like dictionaries

00:31:02,790 --> 00:31:07,530
you can add anything you want to them

00:31:05,100 --> 00:31:08,490
and you are defiled itself so the

00:31:07,530 --> 00:31:10,620
content a

00:31:08,490 --> 00:31:13,440
all the metadata you added to the file

00:31:10,620 --> 00:31:16,170
when you look back at the file so you

00:31:13,440 --> 00:31:18,929
query it back from your database you

00:31:16,170 --> 00:31:21,690
just have the tamil URL property because

00:31:18,929 --> 00:31:24,330
we added it here at the end of our code

00:31:21,690 --> 00:31:27,660
so you just get it back and look for

00:31:24,330 --> 00:31:30,450
that properly if the timer URL is none

00:31:27,660 --> 00:31:32,640
properly if you terminate field and you

00:31:30,450 --> 00:31:35,610
can recreate it from the original file

00:31:32,640 --> 00:31:38,040
and one of the core parts of the point

00:31:35,610 --> 00:31:41,309
is that it meant for the web is specific

00:31:38,040 --> 00:31:44,640
to the web so we wanted to make easy to

00:31:41,309 --> 00:31:46,980
use content delivery networks and we

00:31:44,640 --> 00:31:49,530
wanted to make easy for people to rely

00:31:46,980 --> 00:31:51,660
on the pot for saving serving data to

00:31:49,530 --> 00:31:54,030
the web so everything which is needed

00:31:51,660 --> 00:31:56,220
for sending files themselves is provided

00:31:54,030 --> 00:31:58,200
by the pot itself so when you certify

00:31:56,220 --> 00:32:00,929
the pots already gets the content type

00:31:58,200 --> 00:32:03,179
the last modified time the content

00:32:00,929 --> 00:32:05,460
length of the file itself and the file

00:32:03,179 --> 00:32:07,920
name so when you serve it back you can

00:32:05,460 --> 00:32:10,590
properly add the leaders the HD videos

00:32:07,920 --> 00:32:14,250
for that file without having to work on

00:32:10,590 --> 00:32:15,809
them yourself and we already know that

00:32:14,250 --> 00:32:18,150
whenever you want to serve them you just

00:32:15,809 --> 00:32:20,610
rely on a whiskey middle so you just

00:32:18,150 --> 00:32:23,100
create make the middle well and wrap it

00:32:20,610 --> 00:32:25,080
around your application and deport will

00:32:23,100 --> 00:32:27,660
do the proper thing to serve the files

00:32:25,080 --> 00:32:30,900
and if they break and you are stunning

00:32:27,660 --> 00:32:35,670
the files on supports HTTP itself for

00:32:30,900 --> 00:32:38,940
example in the case of s free you you

00:32:35,670 --> 00:32:41,610
can be sure that the middle well will

00:32:38,940 --> 00:32:44,280
not have defined itself but we redirect

00:32:41,610 --> 00:32:46,920
the user to the middleware itself so in

00:32:44,280 --> 00:32:48,840
case of the content delivery network you

00:32:46,920 --> 00:32:52,559
will end up serving the files from you

00:32:48,840 --> 00:32:54,900
content delivery network so please try

00:32:52,559 --> 00:32:56,520
it if you have questions or anything let

00:32:54,900 --> 00:32:59,760
me know if you find bags or anything

00:32:56,520 --> 00:33:02,700
I'll be more than happy to fix them

00:32:59,760 --> 00:33:05,340
everything is supported from Python 2 2

00:33:02,700 --> 00:33:07,860
2 dot 62 Python 3 dot 4 we haven't

00:33:05,340 --> 00:33:09,990
tested it on three dot five but it

00:33:07,860 --> 00:33:11,730
should work everything is fully

00:33:09,990 --> 00:33:13,710
documented so if you find something

00:33:11,730 --> 00:33:16,380
missing in the communication let me know

00:33:13,710 --> 00:33:18,419
we will cover it and everything is

00:33:16,380 --> 00:33:20,610
tested with one hundred percent coverage

00:33:18,419 --> 00:33:22,200
so you can be pretty sure that it works

00:33:20,610 --> 00:33:24,870
and we are already using

00:33:22,200 --> 00:33:38,510
eating production Bibles environment so

00:33:24,870 --> 00:33:46,520
try it and let me know thanks questions

00:33:38,510 --> 00:33:46,520
okay do you a microphone for them ah I

00:33:46,610 --> 00:34:08,190
know for damn asking but yeah yes okay

00:34:05,090 --> 00:34:10,950
okay he asked how much cost how much

00:34:08,190 --> 00:34:13,710
effort would be required to make it work

00:34:10,950 --> 00:34:15,990
on a singleness framework when we used

00:34:13,710 --> 00:34:18,210
it on production on javon but you

00:34:15,990 --> 00:34:20,220
haven't is not a really singleness very

00:34:18,210 --> 00:34:22,920
much but it's a synchronous but is far

00:34:20,220 --> 00:34:25,230
different from truly passing your for

00:34:22,920 --> 00:34:27,330
example or twisted because it's implicit

00:34:25,230 --> 00:34:31,140
a synchronous or not explicita

00:34:27,330 --> 00:34:33,630
synchronously so I cannot I'm not sure

00:34:31,140 --> 00:34:35,940
how much it will take to adapt the

00:34:33,630 --> 00:34:38,990
middleware itself to something like to

00:34:35,940 --> 00:34:41,550
lip which will require to move from

00:34:38,990 --> 00:34:43,290
function to call routines and so on but

00:34:41,550 --> 00:34:47,640
it should be fairly easy actually

00:34:43,290 --> 00:34:50,520
because it just gets the files and send

00:34:47,640 --> 00:34:53,310
it back to the to the content so it to

00:34:50,520 --> 00:34:56,100
the to the browser so it's a pretty good

00:34:53,310 --> 00:34:57,900
use case for a simple honest framework

00:34:56,100 --> 00:35:00,600
and the middle yourself is just 100

00:34:57,900 --> 00:35:02,670
lines of code so even if you have to

00:35:00,600 --> 00:35:06,600
rewrite this one scratchy it will take

00:35:02,670 --> 00:35:08,970
like two hours no more ok so the middle

00:35:06,600 --> 00:35:11,250
is already divided in utility functions

00:35:08,970 --> 00:35:14,220
so they coded serve themselves the file

00:35:11,250 --> 00:35:16,320
is like 10 lines of code which you can

00:35:14,220 --> 00:35:18,720
probably move to to leap or something

00:35:16,320 --> 00:35:21,000
like that but I haven't tested it only

00:35:18,720 --> 00:35:23,780
used with GM and and I know that on Jer

00:35:21,000 --> 00:35:23,780
and it works well

00:35:26,770 --> 00:35:43,080
she was before okay here we have it so

00:35:40,480 --> 00:35:46,240
you mentioned that in case of a rollback

00:35:43,080 --> 00:35:48,220
you restore the files so do you need

00:35:46,240 --> 00:35:51,790
some sort of storage for the departed

00:35:48,220 --> 00:35:54,040
cell for some metadata no actually what

00:35:51,790 --> 00:35:57,550
happens is that the pod generates a

00:35:54,040 --> 00:35:59,860
unique ID for each file so if you create

00:35:57,550 --> 00:36:02,470
a new version of the file you actually

00:35:59,860 --> 00:36:05,710
end up with a different ID and the old

00:36:02,470 --> 00:36:08,650
ID gets deleted only when the new one

00:36:05,710 --> 00:36:11,560
when the transaction gets committed so

00:36:08,650 --> 00:36:13,870
for a for a time when you have the

00:36:11,560 --> 00:36:15,550
transaction rolling you have bought the

00:36:13,870 --> 00:36:18,610
files and they have two different

00:36:15,550 --> 00:36:21,070
identifiers if the transaction goes on

00:36:18,610 --> 00:36:23,530
and suffering successfully commit it

00:36:21,070 --> 00:36:25,150
will say hey this new one is the proper

00:36:23,530 --> 00:36:27,160
one delete the old one if the

00:36:25,150 --> 00:36:29,020
transaction world back to say is a the

00:36:27,160 --> 00:36:31,300
old one was a proper one delete the new

00:36:29,020 --> 00:36:33,010
one so it just keeps both the files

00:36:31,300 --> 00:36:35,290
available at the same time and then

00:36:33,010 --> 00:36:37,870
decides we want to keep at the end of

00:36:35,290 --> 00:36:40,270
the transaction and you mention it is

00:36:37,870 --> 00:36:44,080
transparent to switch for what from one

00:36:40,270 --> 00:36:46,420
type of storage to the other so when you

00:36:44,080 --> 00:36:48,520
get a request for the file how how do

00:36:46,420 --> 00:36:50,560
you know if you need to start to serve

00:36:48,520 --> 00:36:52,600
it from the old storage system or the

00:36:50,560 --> 00:36:56,050
new one okay that's actually stored in

00:36:52,600 --> 00:36:58,210
the file meta data itself okay so every

00:36:56,050 --> 00:37:00,550
storage engine need to provide support

00:36:58,210 --> 00:37:02,830
from some kind of metadata in the case

00:37:00,550 --> 00:37:05,350
of greed efforts is towards the meta

00:37:02,830 --> 00:37:08,950
data together with the file on the DB in

00:37:05,350 --> 00:37:13,060
case of s3 instance the metadata as HTTP

00:37:08,950 --> 00:37:16,390
eaters of the of the file itself in case

00:37:13,060 --> 00:37:18,670
of the local file system it saves the

00:37:16,390 --> 00:37:21,040
g'zone file with the meta data and so on

00:37:18,670 --> 00:37:23,170
a restorer changes in charge of

00:37:21,040 --> 00:37:25,990
providing a way to add meta data to the

00:37:23,170 --> 00:37:28,390
file and then deport will rely on the

00:37:25,990 --> 00:37:32,080
meta data to know from where we should

00:37:28,390 --> 00:37:34,600
self defile itself but when you get the

00:37:32,080 --> 00:37:38,680
request from the user you only know the

00:37:34,600 --> 00:37:40,330
file name so how do you know what's the

00:37:38,680 --> 00:37:42,850
story

00:37:40,330 --> 00:37:45,250
not really because when you store the

00:37:42,850 --> 00:37:49,390
file at the low level we only know the

00:37:45,250 --> 00:37:52,000
file name but if you bound the file to a

00:37:49,390 --> 00:37:54,160
column of sequel alchemy or MongoDB or

00:37:52,000 --> 00:37:56,440
whatever inside the economy gets

00:37:54,160 --> 00:37:58,990
actually store the JSON with various

00:37:56,440 --> 00:38:01,090
information including from where to look

00:37:58,990 --> 00:38:03,820
up for additional details of the Fae

00:38:01,090 --> 00:38:06,600
file so if you use deeper than low level

00:38:03,820 --> 00:38:09,610
yes you have to provide the fallback yer

00:38:06,600 --> 00:38:11,620
yourself if you rely on the eye-level

00:38:09,610 --> 00:38:18,660
api's they already provide it for you

00:38:11,620 --> 00:38:20,920
okay um does it out of the box support

00:38:18,660 --> 00:38:25,060
uploading to a temporary URL on

00:38:20,920 --> 00:38:26,950
something like s3 sorry idea on like

00:38:25,060 --> 00:38:29,620
Swift and I think ice 3 as well you can

00:38:26,950 --> 00:38:32,860
be provided with a temporary URL to

00:38:29,620 --> 00:38:35,530
upload directly from the client would

00:38:32,860 --> 00:38:38,650
does it does it support that okay I

00:38:35,530 --> 00:38:41,520
understood not currently no as the most

00:38:38,650 --> 00:38:44,170
of the logic happens before itself the

00:38:41,520 --> 00:38:46,480
client needs to upload a file on your

00:38:44,170 --> 00:38:49,150
server which processes the daytime them

00:38:46,480 --> 00:38:51,550
uploads it on SVU cannot directly

00:38:49,150 --> 00:38:53,500
provide the debt on as free as otherwise

00:38:51,550 --> 00:38:56,590
you will lose all the metadata that

00:38:53,500 --> 00:38:58,870
deport calculates for you we will need

00:38:56,590 --> 00:39:01,300
to provide some kind of depo supporting

00:38:58,870 --> 00:39:05,740
Java skeety cells so it can get the meta

00:39:01,300 --> 00:39:09,370
data before uploading them I don't know

00:39:05,740 --> 00:39:12,510
if we have more time we can ask outside

00:39:09,370 --> 00:39:12,510
of the room thank you

00:39:15,260 --> 00:39:17,320

YouTube URL: https://www.youtube.com/watch?v=PckwHNNe8pw


