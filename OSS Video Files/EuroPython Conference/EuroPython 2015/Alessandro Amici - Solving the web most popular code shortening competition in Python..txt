Title: Alessandro Amici - Solving the web most popular code shortening competition in Python.
Publication date: 2015-08-08
Playlist: EuroPython 2015
Description: 
	Alessandro Amici - Solving the web most popular code shortening competition in Python.
[EuroPython 2015]
[24 July 2015]
[Bilbao, Euskadi, Spain]

“Code shortening” is the “sport” where participants strive to achieve
the shortest possible source code that solves a programming problem by
exploiting all the tricks and quirks of the language.

The [SIZECON on SPOJ][1] is one of the oldest and most popular code
shortening problems on the web with a bizarre twist, only character
above ASCII value 32 are counted for the penalty. During the talk we
will take a journey into some frightening depths of the Python
language in order to write shorter and shorter solutions to SIZECON
until, exploiting a number of truly mind-blowing tricks, we will reach
the current record solution of 28 characters (above ASCII 32!).

I promise I’ll show you the most obfuscated, contrived and sick python
code you have ever seen and (hopefully!) will ever see. I invite
participants to give [SIZECON][1] a try and check their score against
the [Python2][2] and [Python3][3] SPOJ rankings.

*Slides:* [http://slides.com/alessandroamici/solving-the-web-most-
popular-shortening-contest-with-python][4]

[1]: http://www.spoj.com/problems/SIZECON/
[2]: http://www.spoj.com/ranks/SIZECON/lang=PYTH%202.7
[3]: http://www.spoj.com/ranks/SIZECON/lang=PYTH%203.2.3
[4]: http://slides.com/alessandroamici/solving-the-web-most-popular-shortening-contest-with-python
Captions: 
	00:00:01,909 --> 00:00:09,450
well thank you so my name is Alessandro

00:00:05,879 --> 00:00:11,490
mission the day job I work at the oven

00:00:09,450 --> 00:00:17,880
solution who is sponsoring my talk here

00:00:11,490 --> 00:00:20,189
and we do software development in Python

00:00:17,880 --> 00:00:24,000
and we work mostly with geospatial data

00:00:20,189 --> 00:00:27,630
so geographic geography and satellite

00:00:24,000 --> 00:00:30,720
images and this kind of stuff yeah as we

00:00:27,630 --> 00:00:33,570
hope you I do coding competitions I'm

00:00:30,720 --> 00:00:35,910
not very strong i mean really people who

00:00:33,570 --> 00:00:39,750
are really great and i'm just a hobbyist

00:00:35,910 --> 00:00:42,780
but i like very much there the trail and

00:00:39,750 --> 00:00:47,100
the things you learn and crazy stuff

00:00:42,780 --> 00:00:50,160
that you are end up doing this talk will

00:00:47,100 --> 00:00:55,649
be about the code shortening shortening

00:00:50,160 --> 00:00:58,859
is a kind of coding competition where

00:00:55,649 --> 00:01:02,600
you don't try to solve a problem in the

00:00:58,859 --> 00:01:05,939
smallest amount of time or with other

00:01:02,600 --> 00:01:08,630
technical staff but you want to do it in

00:01:05,939 --> 00:01:13,610
the smallest possible source code and

00:01:08,630 --> 00:01:16,259
it's just for fun and we will go through

00:01:13,610 --> 00:01:18,570
the dissolution of one of the problem

00:01:16,259 --> 00:01:21,720
one of the most popular problems where i

00:01:18,570 --> 00:01:25,170
have the shortest solutions of them all

00:01:21,720 --> 00:01:31,200
and we will see that in this particular

00:01:25,170 --> 00:01:34,430
case it's really really interesting what

00:01:31,200 --> 00:01:39,240
you need to do to get the shortest code

00:01:34,430 --> 00:01:42,150
so first of all the coach shortening is

00:01:39,240 --> 00:01:45,240
usually say gold code golfer because you

00:01:42,150 --> 00:01:48,210
strive to do the less i mean you want to

00:01:45,240 --> 00:01:53,100
have the shortest score and it's similar

00:01:48,210 --> 00:01:57,659
to golf so i mostly use code golf as a

00:01:53,100 --> 00:02:01,860
as a way to go the sport and we will be

00:01:57,659 --> 00:02:05,700
talking about them the side con problem

00:02:01,860 --> 00:02:10,800
on spot spot is the sphere on line judge

00:02:05,700 --> 00:02:13,660
and actually if there is something i

00:02:10,800 --> 00:02:17,380
assume you read the abstract and i hope

00:02:13,660 --> 00:02:22,600
you have had a look at the coding

00:02:17,380 --> 00:02:25,540
competition yourself and I promise you

00:02:22,600 --> 00:02:28,720
to go into some frightening depth of the

00:02:25,540 --> 00:02:32,860
Python language and to show you some

00:02:28,720 --> 00:02:35,220
mind-blowing tricks and to end up

00:02:32,860 --> 00:02:37,900
showing you the mostest obfuscated

00:02:35,220 --> 00:02:40,350
controvert and see Python code you have

00:02:37,900 --> 00:02:43,210
ever seen and hopefully we'll ever see

00:02:40,350 --> 00:02:46,270
now if there is something that you I

00:02:43,210 --> 00:02:49,540
really would like you to learn from this

00:02:46,270 --> 00:02:52,720
talk is to not overemphasize abstracts

00:02:49,540 --> 00:02:55,180
because then you ever end up in a room

00:02:52,720 --> 00:03:01,060
full of people look at you and say okay

00:02:55,180 --> 00:03:06,460
I'm here blew my mind anyway let's see

00:03:01,060 --> 00:03:10,780
what we what we can't can't do so first

00:03:06,460 --> 00:03:12,670
of all for people who don't do coding

00:03:10,780 --> 00:03:15,910
competition and don't know what spa she

00:03:12,670 --> 00:03:20,130
is so spot is recording platform with an

00:03:15,910 --> 00:03:22,810
online judge basically you can upload

00:03:20,130 --> 00:03:25,090
problems and people can try to solve it

00:03:22,810 --> 00:03:28,630
it supports a huge amount of languages

00:03:25,090 --> 00:03:31,900
and he said it has a really amazing

00:03:28,630 --> 00:03:35,380
trove of problems there are around

00:03:31,900 --> 00:03:37,390
20,000 problems a lot of them are quite

00:03:35,380 --> 00:03:40,150
easy but some of them are really really

00:03:37,390 --> 00:03:42,070
hard and some of them can be done just

00:03:40,150 --> 00:03:44,440
in Python that is the only known

00:03:42,070 --> 00:03:47,080
solutions are in Python most of them are

00:03:44,440 --> 00:03:51,430
for C++ etc because they are far you

00:03:47,080 --> 00:03:54,130
need fast memory management except one

00:03:51,430 --> 00:03:56,590
of the characteristic of spot with

00:03:54,130 --> 00:04:01,600
respect to other coding competition that

00:03:56,590 --> 00:04:04,060
you know that you may know is that while

00:04:01,600 --> 00:04:07,000
users course are public and you have

00:04:04,060 --> 00:04:10,270
ranks so you know who the regulars who

00:04:07,000 --> 00:04:12,970
are the good ones and who is good in C++

00:04:10,270 --> 00:04:15,190
for Python etc solutions are not public

00:04:12,970 --> 00:04:17,410
are not made public at the end of the

00:04:15,190 --> 00:04:19,570
when you do a competition so you can

00:04:17,410 --> 00:04:21,720
actually compete any time and some of

00:04:19,570 --> 00:04:21,720
the

00:04:22,950 --> 00:04:29,650
problems are really old and they've been

00:04:25,390 --> 00:04:31,330
solved by a lot of people if you if you

00:04:29,650 --> 00:04:32,950
look into the web someone published

00:04:31,330 --> 00:04:36,850
their solution and you can find

00:04:32,950 --> 00:04:39,300
solutions for the easy problems but the

00:04:36,850 --> 00:04:44,440
hard problems are solved by people who

00:04:39,300 --> 00:04:46,540
really value their position in sports so

00:04:44,440 --> 00:04:51,790
they don't publish the code and you are

00:04:46,540 --> 00:04:54,160
not you have to do with yourself this

00:04:51,790 --> 00:04:57,040
means by the way I'm publishing the

00:04:54,160 --> 00:05:01,030
codes for one of the best solutions in

00:04:57,040 --> 00:05:03,970
Python for this problem so please do not

00:05:01,030 --> 00:05:05,920
use that solution to get half point in

00:05:03,970 --> 00:05:07,420
spots actually you have to promise it

00:05:05,920 --> 00:05:09,880
that you are not going to cover the

00:05:07,420 --> 00:05:14,830
solution etc otherwise you have to leave

00:05:09,880 --> 00:05:18,340
now sites Khan is an unusual problem

00:05:14,830 --> 00:05:22,300
usually these problems are standard

00:05:18,340 --> 00:05:25,960
algorithm problems but a sites gun is

00:05:22,300 --> 00:05:29,560
one of the few code golf problems it's

00:05:25,960 --> 00:05:32,169
really old it has been uploaded in 2005

00:05:29,560 --> 00:05:34,570
and it's actually one of the top 20 most

00:05:32,169 --> 00:05:38,260
popular problems of spaten 8000 people's

00:05:34,570 --> 00:05:40,390
try to do it and with thousand four

00:05:38,260 --> 00:05:44,020
hundred solutions in Python along

00:05:40,390 --> 00:05:46,390
actually Tim pedders one of our I mean

00:05:44,020 --> 00:05:49,960
one of the fathers of python is one of

00:05:46,390 --> 00:05:54,130
the best solver so even if in Perl he

00:05:49,960 --> 00:05:57,760
use / to do of the decision so let's go

00:05:54,130 --> 00:06:00,340
to the meet this is the statement of the

00:05:57,760 --> 00:06:02,530
problem it's called side scan or site

00:06:00,340 --> 00:06:04,150
contents and given a set of integer I

00:06:02,530 --> 00:06:05,919
mean the language three strange but

00:06:04,150 --> 00:06:08,470
given a set of integers find the sum of

00:06:05,919 --> 00:06:11,350
all positive integers in it basically

00:06:08,470 --> 00:06:14,380
you're given an input there is an ashy

00:06:11,350 --> 00:06:16,780
file and ask you file and you get the

00:06:14,380 --> 00:06:20,229
first number in the input is the number

00:06:16,780 --> 00:06:22,540
of the following integer that you have

00:06:20,229 --> 00:06:25,080
that you need to consider and that you

00:06:22,540 --> 00:06:28,960
have to some only the positive integers

00:06:25,080 --> 00:06:30,430
the score that you will get is equal to

00:06:28,960 --> 00:06:33,160
the size of the source code of your

00:06:30,430 --> 00:06:36,180
program except symbols with ascii code

00:06:33,160 --> 00:06:40,540
below equal or below 32

00:06:36,180 --> 00:06:43,470
design then you have a sample input if

00:06:40,540 --> 00:06:45,250
you get four words the number of of

00:06:43,470 --> 00:06:48,250
following numbers that you have to

00:06:45,250 --> 00:06:50,860
consider then 5 months 5 6-1 and you

00:06:48,250 --> 00:06:54,430
have only to some the positive integer

00:06:50,860 --> 00:06:56,590
so 5 plus 6 it's 11 very easy this is

00:06:54,430 --> 00:06:58,300
very easy actually it's not very

00:06:56,590 --> 00:07:03,730
interesting as a coach short-term

00:06:58,300 --> 00:07:07,840
problem by itself because it's easy now

00:07:03,730 --> 00:07:09,640
what is the solution for Python do too

00:07:07,840 --> 00:07:14,290
there is an I'm game in the sock is that

00:07:09,640 --> 00:07:16,330
I have the one of the two bath solutions

00:07:14,290 --> 00:07:18,450
I wrote one of the two best solutions

00:07:16,330 --> 00:07:23,770
that are being applauded to spot and

00:07:18,450 --> 00:07:25,720
quite quite strangely the code the

00:07:23,770 --> 00:07:28,180
problem has be published in 2005 and

00:07:25,720 --> 00:07:33,340
someone already after six months found

00:07:28,180 --> 00:07:35,830
29 solutions duty or Paula and only

00:07:33,340 --> 00:07:38,020
after nine years how about no rainbow

00:07:35,830 --> 00:07:41,140
which is very known I mean it's one of

00:07:38,020 --> 00:07:44,200
the best called shorter earth in in

00:07:41,140 --> 00:07:46,420
Python and find the solutions just days

00:07:44,200 --> 00:07:49,000
before I find I found as well as the

00:07:46,420 --> 00:07:54,010
solution so it's after nine years to

00:07:49,000 --> 00:07:56,650
people in two weeks managed to get 28 in

00:07:54,010 --> 00:07:59,560
Python 3 it more or less saima that is

00:07:56,650 --> 00:08:01,330
the solution can be rewritten II the

00:07:59,560 --> 00:08:02,830
same solutions is rewritten in patent

00:08:01,330 --> 00:08:04,270
three and it's just slightly longer

00:08:02,830 --> 00:08:10,300
because of the syntax is slightly

00:08:04,270 --> 00:08:12,220
different we are going to see the two

00:08:10,300 --> 00:08:14,340
point the pattern two solutions because

00:08:12,220 --> 00:08:19,080
it's the first one I developed and it's

00:08:14,340 --> 00:08:21,580
just slightly shorter so let's see

00:08:19,080 --> 00:08:25,930
general Python golf what is the master

00:08:21,580 --> 00:08:27,730
plan actually the steps that you do are

00:08:25,930 --> 00:08:30,190
more or less always the same first you

00:08:27,730 --> 00:08:32,860
aim to correctness you build reference

00:08:30,190 --> 00:08:34,710
solutions you need to check that you

00:08:32,860 --> 00:08:36,820
understood what the problem wants and

00:08:34,710 --> 00:08:39,700
because every time you submit

00:08:36,820 --> 00:08:42,160
resolutions first it must be correct and

00:08:39,700 --> 00:08:44,920
then they count how many characters you

00:08:42,160 --> 00:08:48,690
used to and give you a scar so first

00:08:44,920 --> 00:08:52,630
correctness then other it algorithm with

00:08:48,690 --> 00:08:55,030
usually you start with the standard

00:08:52,630 --> 00:09:00,220
algorithm and you can get to the same

00:08:55,030 --> 00:09:02,710
solution in a really large in a large

00:09:00,220 --> 00:09:04,570
number of diff with different algorithms

00:09:02,710 --> 00:09:07,300
sometimes you specialize them some type

00:09:04,570 --> 00:09:10,180
you generalize them the reason for this

00:09:07,300 --> 00:09:11,710
is that at the second on the next level

00:09:10,180 --> 00:09:14,770
the language with surgery it means that

00:09:11,710 --> 00:09:17,350
you try to find strange cancer

00:09:14,770 --> 00:09:19,180
construction in Python syntax is that

00:09:17,350 --> 00:09:20,920
usually are not used to get the call

00:09:19,180 --> 00:09:23,470
short on short and sometimes they work

00:09:20,920 --> 00:09:28,330
better with some strange algorithms with

00:09:23,470 --> 00:09:29,830
the straightforward one so let's start

00:09:28,330 --> 00:09:33,570
with the reference solutions this is

00:09:29,830 --> 00:09:37,630
around 50 characters this is the

00:09:33,570 --> 00:09:40,300
extremely non short solution you just

00:09:37,630 --> 00:09:47,320
read the first input you initialize your

00:09:40,300 --> 00:09:49,300
counter range count em t of the

00:09:47,320 --> 00:09:52,210
following number you get any number

00:09:49,300 --> 00:09:55,840
check if it's bigger than zero sum it

00:09:52,210 --> 00:09:59,170
and return the result these works if you

00:09:55,840 --> 00:10:01,150
count it which usual cool golf score

00:09:59,170 --> 00:10:06,040
that is all the characters in your

00:10:01,150 --> 00:10:09,400
solutions hundred 707 score but which

00:10:06,040 --> 00:10:14,770
sites gone since you can you don't count

00:10:09,400 --> 00:10:16,870
all spaces and new lines it's 70 you can

00:10:14,770 --> 00:10:18,850
easily rewrite it I mean everybody is

00:10:16,870 --> 00:10:23,370
able to write in in a more compact form

00:10:18,850 --> 00:10:25,870
just using some and probably using max

00:10:23,370 --> 00:10:29,020
here you already need to know that

00:10:25,870 --> 00:10:32,320
somehow the input inside the range will

00:10:29,020 --> 00:10:35,230
be evaluated before all the input inside

00:10:32,320 --> 00:10:39,280
the max input actually already does the

00:10:35,230 --> 00:10:42,400
cast into a integer so everything is is

00:10:39,280 --> 00:10:48,100
working nicely and you already get in

00:10:42,400 --> 00:10:49,810
the inner age of 45 characters in our

00:10:48,100 --> 00:10:52,930
second step is to try alternative

00:10:49,810 --> 00:10:55,720
algorithms now if you don't read the

00:10:52,930 --> 00:10:57,820
fine print like you forget the you have

00:10:55,720 --> 00:11:00,700
bizarre special character ascii

00:10:57,820 --> 00:11:02,290
character exception there's nothing to

00:11:00,700 --> 00:11:07,990
see i mean you just summing

00:11:02,290 --> 00:11:11,050
numbers let's see let's start looking at

00:11:07,990 --> 00:11:14,769
it as a standard called shortcode

00:11:11,050 --> 00:11:17,889
shortening solutions first these are all

00:11:14,769 --> 00:11:21,940
tricks that you can find on the web it's

00:11:17,889 --> 00:11:24,699
quite involved processing understanding

00:11:21,940 --> 00:11:27,279
what is what what works and what not and

00:11:24,699 --> 00:11:30,220
it's very nice and you spend a lot of

00:11:27,279 --> 00:11:33,250
sleepless night doing it but it's more

00:11:30,220 --> 00:11:35,949
or less than the first all input you can

00:11:33,250 --> 00:11:38,620
just give a shorter a two input and you

00:11:35,949 --> 00:11:43,240
will save one character this is just one

00:11:38,620 --> 00:11:48,339
characters you call it input I but it

00:11:43,240 --> 00:11:51,610
saved you one characters then the most

00:11:48,339 --> 00:11:58,110
used one of the most used tricks for

00:11:51,610 --> 00:12:01,959
code shortening is to transform for into

00:11:58,110 --> 00:12:05,339
string into string multiplication in

00:12:01,959 --> 00:12:09,490
this case you see the max 0 comma I

00:12:05,339 --> 00:12:13,630
becomes a piece of string I make it x I

00:12:09,490 --> 00:12:18,160
so I read the first numbers I do a long

00:12:13,630 --> 00:12:21,420
string of max aah max 0 dot I etc and

00:12:18,160 --> 00:12:23,980
then I about it as I valid it goes and

00:12:21,420 --> 00:12:26,199
fields all the input reach the input

00:12:23,980 --> 00:12:30,459
from there from the standard input and

00:12:26,199 --> 00:12:32,380
then this makes a big top o the valve

00:12:30,459 --> 00:12:34,930
will return a big couple that you pass

00:12:32,380 --> 00:12:37,750
to some which just give the correct

00:12:34,930 --> 00:12:39,389
results as you are summing max is making

00:12:37,750 --> 00:12:46,380
sure that you are summing only the

00:12:39,389 --> 00:12:46,380
positive values and we are down to 14

00:12:46,949 --> 00:12:52,600
now there is in a trick that I like a

00:12:50,709 --> 00:12:54,550
lot the fact that you actually can

00:12:52,600 --> 00:12:57,160
remove the sama since you are already

00:12:54,550 --> 00:12:59,350
doing an eval and you have a comma on

00:12:57,160 --> 00:13:01,149
the other side you drop the comma on the

00:12:59,350 --> 00:13:04,000
other side and put the class at the

00:13:01,149 --> 00:13:06,819
beginning now you are already doing the

00:13:04,000 --> 00:13:08,860
Sam and there is this nice trick that

00:13:06,819 --> 00:13:11,439
the sum at the beginning of the string

00:13:08,860 --> 00:13:15,279
will not be a problem because plus it's

00:13:11,439 --> 00:13:16,089
both you were a unary and the binary

00:13:15,279 --> 00:13:18,759
operator

00:13:16,089 --> 00:13:22,480
so you we are already using a lot of

00:13:18,759 --> 00:13:25,389
small tricks and Max eldri we are

00:13:22,480 --> 00:13:27,970
getting 2 35 now we starting getting

00:13:25,389 --> 00:13:31,470
closer but the closer you get the harder

00:13:27,970 --> 00:13:36,999
it is now there is one of the nicer

00:13:31,470 --> 00:13:42,959
tricks in in standard court Gulf that is

00:13:36,999 --> 00:13:48,639
you don't print stuff you input it how

00:13:42,959 --> 00:13:52,180
actually input prints the arguments

00:13:48,639 --> 00:13:54,040
before reading input so you control the

00:13:52,180 --> 00:13:57,220
whole print you already have a short

00:13:54,040 --> 00:14:00,370
name for input and you print with input

00:13:57,220 --> 00:14:02,769
actually this solution and with a syntax

00:14:00,370 --> 00:14:04,779
error but it's no problem because the

00:14:02,769 --> 00:14:06,850
the system doesn't care what happens

00:14:04,779 --> 00:14:18,999
after you have printed the solution so

00:14:06,850 --> 00:14:21,370
and we are 233 great now to my knowledge

00:14:18,999 --> 00:14:24,249
this is the shortest possible solution

00:14:21,370 --> 00:14:27,970
we'd stop using standard code shortening

00:14:24,249 --> 00:14:29,980
I can be proven wrong but I try it a lot

00:14:27,970 --> 00:14:32,829
and I didn't find anything else and I

00:14:29,980 --> 00:14:36,550
see a lot of people with 33 in the score

00:14:32,829 --> 00:14:40,179
in the ranking so I guess it's I mean I

00:14:36,550 --> 00:14:45,370
quite a dance at social if your mind

00:14:40,179 --> 00:14:49,839
blown yet so so Wow hopefully not

00:14:45,370 --> 00:14:52,179
because this was child's play you can

00:14:49,839 --> 00:14:53,589
find this stuff I mean it takes some

00:14:52,179 --> 00:14:58,089
times where you can find this stuff on

00:14:53,589 --> 00:15:01,300
the web now we left some fine print

00:14:58,089 --> 00:15:03,910
somewhere alternative algorithms

00:15:01,300 --> 00:15:07,149
actually since there is a strange

00:15:03,910 --> 00:15:10,120
exception we may use as many as ASCII

00:15:07,149 --> 00:15:13,929
characters below 32 as we want what can

00:15:10,120 --> 00:15:18,069
we do with them inside code the only

00:15:13,929 --> 00:15:22,360
legal characters are spaced tap a new

00:15:18,069 --> 00:15:23,800
line and I did not think to anything

00:15:22,360 --> 00:15:27,189
that you can really do with that because

00:15:23,800 --> 00:15:29,939
they are just spaces but you have

00:15:27,189 --> 00:15:33,529
another place where you can put

00:15:29,939 --> 00:15:36,869
real ASCII characters string literals

00:15:33,529 --> 00:15:39,899
for string literals the legal characters

00:15:36,869 --> 00:15:43,529
inside inside string literals are a lot

00:15:39,899 --> 00:15:45,839
are about 30 actually the null null

00:15:43,529 --> 00:15:49,259
ASCII characters is not legal inside

00:15:45,839 --> 00:15:52,619
Python strings must be escaped with 0 /

00:15:49,259 --> 00:15:57,599
x 0 0 and the new line is not legal

00:15:52,619 --> 00:16:00,449
because I want to do single quote string

00:15:57,599 --> 00:16:02,699
literals so it will be a new line so but

00:16:00,449 --> 00:16:07,859
I have 30 characters this is a lot I can

00:16:02,699 --> 00:16:10,529
do a big string literal as big as I want

00:16:07,859 --> 00:16:15,689
and I have to find creative way to use

00:16:10,529 --> 00:16:18,209
it now it's not that if you also to try

00:16:15,689 --> 00:16:20,099
to think what to do because the basic

00:16:18,209 --> 00:16:23,009
building blocks of your modified

00:16:20,099 --> 00:16:24,809
alternative algorithm is build a string

00:16:23,009 --> 00:16:27,809
literal with a lot of ask you special

00:16:24,809 --> 00:16:31,019
characters turn that string literal into

00:16:27,809 --> 00:16:34,949
something useful maybe code and then do

00:16:31,019 --> 00:16:36,419
something with that new string lips with

00:16:34,949 --> 00:16:39,569
new string and now it's a string

00:16:36,419 --> 00:16:45,239
actually after after you translated it

00:16:39,569 --> 00:16:50,809
into code now how can we do something

00:16:45,239 --> 00:16:53,939
with a string of code we exact it

00:16:50,809 --> 00:16:55,949
basically what we are saying is that

00:16:53,939 --> 00:16:58,949
what we are looking at what you're

00:16:55,949 --> 00:17:01,919
looking for what we are looking for is a

00:16:58,949 --> 00:17:03,869
kind of a decrypt function that takes an

00:17:01,919 --> 00:17:05,879
encrypted string something that has been

00:17:03,869 --> 00:17:09,620
encrypted into a special character

00:17:05,879 --> 00:17:13,319
decrypt it and then pass it to an exact

00:17:09,620 --> 00:17:15,360
actually these are the steps that you do

00:17:13,319 --> 00:17:17,309
to prepare the solution because you

00:17:15,360 --> 00:17:19,799
cannot write it obviously in an editor

00:17:17,309 --> 00:17:22,350
and you decide what is your original

00:17:19,799 --> 00:17:24,870
solution something that need to work we

00:17:22,350 --> 00:17:28,799
I use one of the previous solutions then

00:17:24,870 --> 00:17:30,539
you have an ASCII 32 encrypted function

00:17:28,799 --> 00:17:34,679
you need to find it that encrypts it

00:17:30,539 --> 00:17:37,919
into just a special characters then you

00:17:34,679 --> 00:17:41,149
put it into you you have to write your

00:17:37,919 --> 00:17:43,740
ass key 30 to the crib function is as

00:17:41,149 --> 00:17:45,720
few characters as you can

00:17:43,740 --> 00:17:47,190
and then you put the string there and

00:17:45,720 --> 00:17:51,240
you get a solution and you can submit

00:17:47,190 --> 00:17:54,090
the solution so what we are interested

00:17:51,240 --> 00:18:00,890
in is in buildings this ask you 30 to

00:17:54,090 --> 00:18:03,450
decrypt so do you does anybody have any

00:18:00,890 --> 00:18:08,190
suggestion what we need is something

00:18:03,450 --> 00:18:10,950
that takes as input in ASCII string

00:18:08,190 --> 00:18:14,940
literal a donkey's give string and then

00:18:10,950 --> 00:18:18,630
outputs another string with possibly

00:18:14,940 --> 00:18:20,610
Python code and it must be as short as

00:18:18,630 --> 00:18:25,230
possible because this is I mean where we

00:18:20,610 --> 00:18:29,190
want to go below 33 does anybody any

00:18:25,230 --> 00:18:35,429
idea what can be used to do this what

00:18:29,190 --> 00:18:37,860
trick we we need translate string

00:18:35,429 --> 00:18:41,550
translation translate it's the first

00:18:37,860 --> 00:18:45,630
power horse because it you don't need to

00:18:41,550 --> 00:18:50,790
import it it's a method so it's it's

00:18:45,630 --> 00:18:52,860
really long the spelling bus don't care

00:18:50,790 --> 00:18:57,660
I mean if you save the import it's ready

00:18:52,860 --> 00:18:59,220
in the ok range now put translate does

00:18:57,660 --> 00:19:01,200
it returns the copy of the string well

00:18:59,220 --> 00:19:03,480
all characters have been mapped through

00:19:01,200 --> 00:19:08,370
a given translation table which must be

00:19:03,480 --> 00:19:12,720
a string of length 256 but we can fill

00:19:08,370 --> 00:19:18,650
it with control characters so we really

00:19:12,720 --> 00:19:22,740
done it the 256 characters we just need

00:19:18,650 --> 00:19:24,780
to put inside the character that we need

00:19:22,740 --> 00:19:29,660
in the translation in the decoding in

00:19:24,780 --> 00:19:32,790
the decryption sorry this is how our

00:19:29,660 --> 00:19:34,380
decrypt function and I'll our solution

00:19:32,790 --> 00:19:37,200
will look like so we have an encrypted

00:19:34,380 --> 00:19:38,700
string it's a literal string full with

00:19:37,200 --> 00:19:41,460
ASCII characters than we have a

00:19:38,700 --> 00:19:45,750
translate we will translate it and we

00:19:41,460 --> 00:19:48,870
need to have a the Crypt table that will

00:19:45,750 --> 00:19:54,090
make this go into code that then we

00:19:48,870 --> 00:19:57,070
exact now the machinery the translation

00:19:54,090 --> 00:20:01,899
machinery our exact path The

00:19:57,070 --> 00:20:04,630
the decryption is 20 characters plus all

00:20:01,899 --> 00:20:06,970
known as the number of known as key

00:20:04,630 --> 00:20:09,669
contractors that we need to put into the

00:20:06,970 --> 00:20:11,559
trunk dead crib table I mean code is

00:20:09,669 --> 00:20:15,460
written with non-ascii cookie with

00:20:11,559 --> 00:20:18,100
non-ascii with a ski above 32 characters

00:20:15,460 --> 00:20:21,549
so we will need to put some of those

00:20:18,100 --> 00:20:26,460
into the decrypt able so we have we

00:20:21,549 --> 00:20:30,009
spend 20 characters and let's see how

00:20:26,460 --> 00:20:32,889
how many characters do we need to make a

00:20:30,009 --> 00:20:38,919
nasty control character string become

00:20:32,889 --> 00:20:41,259
some nice coat this is how you do it and

00:20:38,919 --> 00:20:44,980
I mean I leave the details actually

00:20:41,259 --> 00:20:46,629
there are small stuff like the fact that

00:20:44,980 --> 00:20:50,169
you don't want to use the first

00:20:46,629 --> 00:20:53,230
character in the crib table you can't

00:20:50,169 --> 00:20:57,220
use the thirteenth character because

00:20:53,230 --> 00:20:59,830
it's the u9 so there are small details

00:20:57,220 --> 00:21:04,240
that I wish I don't want to bother you

00:20:59,830 --> 00:21:09,429
and so if we get this the first decision

00:21:04,240 --> 00:21:11,259
that we first used we can use count the

00:21:09,429 --> 00:21:14,350
number of different characters in this

00:21:11,259 --> 00:21:16,419
and it's 19 and it's the car they are

00:21:14,350 --> 00:21:18,580
the characters they are there now

00:21:16,419 --> 00:21:21,309
obviously 20 plus 19 it's not really

00:21:18,580 --> 00:21:24,909
great we already have 33 and this is 39

00:21:21,309 --> 00:21:27,279
so we start doing tricks for example the

00:21:24,909 --> 00:21:30,129
underscore it's just stupid I can't put

00:21:27,279 --> 00:21:34,299
it I I already I was already using I and

00:21:30,129 --> 00:21:37,330
I good I can go to 18 and so and then I

00:21:34,299 --> 00:21:40,720
can do this the nice trick I don't need

00:21:37,330 --> 00:21:43,929
a zero the zero it's just interr you can

00:21:40,720 --> 00:21:47,350
just instantiate into as you already

00:21:43,929 --> 00:21:52,870
using input that has all the int and you

00:21:47,350 --> 00:21:55,629
go to 17 characters so you see we just

00:21:52,870 --> 00:21:58,120
met the old problem into a new problem

00:21:55,629 --> 00:22:00,340
this is a quite unusual shortening

00:21:58,120 --> 00:22:02,470
problem is the we are looking for a

00:22:00,340 --> 00:22:06,750
solution to a problem with us the

00:22:02,470 --> 00:22:06,750
minimum number of different characters

00:22:08,220 --> 00:22:13,150
let's call it cites crown

00:22:10,310 --> 00:22:17,300
no problem it's the same at sites can

00:22:13,150 --> 00:22:19,730
but the we are looking for the minimum

00:22:17,300 --> 00:22:22,700
number of characters so we will put

00:22:19,730 --> 00:22:26,840
aside a translate stuff it's working

00:22:22,700 --> 00:22:30,140
it's the it's a matter of fact I found

00:22:26,840 --> 00:22:33,740
at least two other way to do the

00:22:30,140 --> 00:22:36,490
decryption who could be cook who gave

00:22:33,740 --> 00:22:44,050
good results this is just a easier I

00:22:36,490 --> 00:22:47,750
spent alone wake nights on this zone now

00:22:44,050 --> 00:22:51,440
how can we do better okay we try to use

00:22:47,750 --> 00:22:54,500
the same tricks as before trying to find

00:22:51,440 --> 00:22:57,440
language tricks to get to use less and

00:22:54,500 --> 00:23:01,070
less characters but it's not as easy as

00:22:57,440 --> 00:23:03,830
it appears for example if you change the

00:23:01,070 --> 00:23:05,600
printed input it's it doesn't get you

00:23:03,830 --> 00:23:10,910
anything because the letters are already

00:23:05,600 --> 00:23:14,690
used so a lot a lot a lot of time

00:23:10,910 --> 00:23:17,900
afterwards i waive our right to

00:23:14,690 --> 00:23:21,740
something that is quite convoluted but

00:23:17,900 --> 00:23:25,220
it was 20 plus 14 that is 14 different

00:23:21,740 --> 00:23:28,340
characters and even 13 different

00:23:25,220 --> 00:23:32,420
characters and if you look at the

00:23:28,340 --> 00:23:36,230
details of this stuff i mean we it will

00:23:32,420 --> 00:23:38,720
take you some time to to understand what

00:23:36,230 --> 00:23:41,560
it does but it works i try tested all of

00:23:38,720 --> 00:23:46,790
them to be sure that it was not writing

00:23:41,560 --> 00:23:50,210
stupid things but we are 33 I mean all

00:23:46,790 --> 00:23:55,270
this work and we are back to 32 a 33

00:23:50,210 --> 00:23:55,270
solution how can we do better

00:23:58,190 --> 00:24:16,760
and now we are starting to look into the

00:24:03,120 --> 00:24:20,780
abyss so how do you write code with less

00:24:16,760 --> 00:24:25,080
different characters maybe octal strings

00:24:20,780 --> 00:24:27,390
so in an up top if you can write a

00:24:25,080 --> 00:24:31,800
string literal with just slash and

00:24:27,390 --> 00:24:35,910
numbers from 0 to seven and what do you

00:24:31,800 --> 00:24:40,920
do with the dot octal string this is

00:24:35,910 --> 00:24:44,540
print hell word I put the semicolon so

00:24:40,920 --> 00:24:48,390
you can see that this staff has all the

00:24:44,540 --> 00:24:50,280
numbers and we have to go downward is

00:24:48,390 --> 00:24:53,820
the only way forward we are inside an

00:24:50,280 --> 00:24:58,170
exact and what we want to do is another

00:24:53,820 --> 00:25:01,230
exact so this is kind of reminiscent of

00:24:58,170 --> 00:25:05,820
exception where you need to go deeper

00:25:01,230 --> 00:25:09,780
and deeper in the dreaming to actually

00:25:05,820 --> 00:25:14,240
get the work done now does it actually

00:25:09,780 --> 00:25:16,980
work it does so you can get a string

00:25:14,240 --> 00:25:21,030
exec it and inside the string you want

00:25:16,980 --> 00:25:24,990
an exact of a string literal what is

00:25:21,030 --> 00:25:30,510
nice is that if you use all the the

00:25:24,990 --> 00:25:32,690
octal characters you are back to 33 but

00:25:30,510 --> 00:25:35,820
obviously I mean here you have some

00:25:32,690 --> 00:25:39,030
working room I mean you don't need all

00:25:35,820 --> 00:25:42,570
of the numbers if you are very careful

00:25:39,030 --> 00:25:44,400
we collected something like hundred or

00:25:42,570 --> 00:25:47,520
probably more different solutions so I

00:25:44,400 --> 00:25:50,670
can just look for all the solution see

00:25:47,520 --> 00:25:55,980
if i can get a solution that doesn't use

00:25:50,670 --> 00:25:59,700
the characters a character now if you

00:25:55,980 --> 00:26:02,760
can read this this is actually a working

00:25:59,700 --> 00:26:07,460
solution and it happens to not use the

00:26:02,760 --> 00:26:07,460
character 3 in its octal representation

00:26:08,870 --> 00:26:17,670
and if you spent a knife nights looking

00:26:15,270 --> 00:26:19,860
for this stuff you write programs to see

00:26:17,670 --> 00:26:23,580
what characters you can use in all the

00:26:19,860 --> 00:26:26,610
cases I know I Sam and this is all wave

00:26:23,580 --> 00:26:29,880
this is less than than 32 it is the

00:26:26,610 --> 00:26:31,710
first oh no it is not this outer to do

00:26:29,880 --> 00:26:34,680
okay this is 32 days which is less than

00:26:31,710 --> 00:26:37,290
33 so this is the first time we managed

00:26:34,680 --> 00:26:39,210
to use this ascii character trick to get

00:26:37,290 --> 00:26:43,310
a better solution than the normal

00:26:39,210 --> 00:26:46,140
pattern golf can we do better actually I

00:26:43,310 --> 00:26:49,770
remember that once i wrote a solution

00:26:46,140 --> 00:26:52,110
with this trick that was 31 characters

00:26:49,770 --> 00:26:53,520
but i can find it anymore and its sons

00:26:52,110 --> 00:26:57,480
polish but when you download the

00:26:53,520 --> 00:26:58,890
solution it make garbage of the ascii

00:26:57,480 --> 00:27:01,380
character so i don't know what the

00:26:58,890 --> 00:27:04,950
solution is i know that there is at

00:27:01,380 --> 00:27:08,460
least 31 solution with just district and

00:27:04,950 --> 00:27:10,920
you did the number the octo number that

00:27:08,460 --> 00:27:18,090
you don't need is seven if you want it's

00:27:10,920 --> 00:27:20,940
a nice exercise but we are 32 or 33 28

00:27:18,090 --> 00:27:24,090
it's really far away how can we get in

00:27:20,940 --> 00:27:26,850
just let's come back in order to get to

00:27:24,090 --> 00:27:30,420
28 we need to remove four characters

00:27:26,850 --> 00:27:32,700
from here it means that if we accept

00:27:30,420 --> 00:27:35,160
that you are doing the exact and you

00:27:32,700 --> 00:27:39,300
have the slash and you need the double

00:27:35,160 --> 00:27:45,060
quote you have just three letters left

00:27:39,300 --> 00:27:51,060
to use how do we do it now following

00:27:45,060 --> 00:27:55,380
going on on the inception meta free met

00:27:51,060 --> 00:28:00,030
metaphor the only way is downward we do

00:27:55,380 --> 00:28:02,790
another exact of an exact of a string

00:28:00,030 --> 00:28:05,730
literal why would you do that first

00:28:02,790 --> 00:28:09,150
because you can it does not it doesn't

00:28:05,730 --> 00:28:11,640
add any anything to the score because

00:28:09,150 --> 00:28:14,220
you already have all the letters to for

00:28:11,640 --> 00:28:16,980
the string it for building there the

00:28:14,220 --> 00:28:19,399
solution inside the string and the point

00:28:16,980 --> 00:28:24,289
is that now you can build

00:28:19,399 --> 00:28:26,839
string literal as from Python a string

00:28:24,289 --> 00:28:29,929
literal you can't build because after

00:28:26,839 --> 00:28:31,849
the passing of stream of the the source

00:28:29,929 --> 00:28:35,509
code it's not a string literal anymore

00:28:31,849 --> 00:28:38,479
and a slash octal representation doesn't

00:28:35,509 --> 00:28:42,679
work so you need to one more exact in

00:28:38,479 --> 00:28:46,039
order to build the string that compose

00:28:42,679 --> 00:28:50,529
your exact string literal which is the

00:28:46,039 --> 00:28:54,710
solution so what can we do this is just

00:28:50,529 --> 00:28:57,859
to see how it works we get a statement

00:28:54,710 --> 00:29:00,379
like printer this is the octal

00:28:57,859 --> 00:29:03,049
representation this is the string that

00:29:00,379 --> 00:29:08,419
represents the akhter presentation of

00:29:03,049 --> 00:29:10,669
the of print and within the first six

00:29:08,419 --> 00:29:15,080
acha we can actually compose that string

00:29:10,669 --> 00:29:18,229
we get piped before for example the

00:29:15,080 --> 00:29:22,759
forex actually like a rep of the integer

00:29:18,229 --> 00:29:27,369
for and the rep of integer for is just

00:29:22,759 --> 00:29:29,960
the sum one plus one plus one plus one

00:29:27,369 --> 00:29:31,700
now obviously we are not going very far

00:29:29,960 --> 00:29:33,679
because rapper is really long but

00:29:31,700 --> 00:29:36,139
actually it's not that bad because II

00:29:33,679 --> 00:29:39,529
it's ready there because of the exact

00:29:36,139 --> 00:29:40,909
and the parentheses we but we are I mean

00:29:39,529 --> 00:29:44,539
it's a lot of costs because of the

00:29:40,909 --> 00:29:50,539
parentheses of the P and and are and

00:29:44,539 --> 00:29:54,489
also will also put the plaster so we now

00:29:50,539 --> 00:29:59,929
need almost the final trick this is the

00:29:54,489 --> 00:30:06,639
second to last trick what how can we

00:29:59,929 --> 00:30:06,639
shorten wrap any thicker

00:30:08,850 --> 00:30:20,050
sorry I don't yes converse runs actually

00:30:17,470 --> 00:30:21,730
repre if you look at a man page is

00:30:20,050 --> 00:30:24,309
returned esteem containing a printable

00:30:21,730 --> 00:30:26,410
representation of an object and this is

00:30:24,309 --> 00:30:28,840
the same value value yielded by

00:30:26,410 --> 00:30:32,050
conversion which is reverse quote I

00:30:28,840 --> 00:30:34,690
didn't know reverse code existed before

00:30:32,050 --> 00:30:37,930
starting to playing with short coding

00:30:34,690 --> 00:30:41,890
but this is great you through all the

00:30:37,930 --> 00:30:45,210
parenthesis and rapper away and you just

00:30:41,890 --> 00:30:50,500
get backwards you have introduced plus

00:30:45,210 --> 00:30:55,290
backwards and 13 characters and with

00:30:50,500 --> 00:31:01,809
these three characters you can build

00:30:55,290 --> 00:31:05,500
everything everything except zero you

00:31:01,809 --> 00:31:13,950
can build all the numbers 1 2 3 up to 7

00:31:05,500 --> 00:31:19,390
but not the zero so we can do all a

00:31:13,950 --> 00:31:22,809
completely arbitrary code literal string

00:31:19,390 --> 00:31:28,080
code and run it with exact exact exact

00:31:22,809 --> 00:31:35,080
with just c plus double quote 01 /

00:31:28,080 --> 00:31:43,570
reversed gamma xi e and acts but this

00:31:35,080 --> 00:31:48,460
gives you was 29 how do we get lower we

00:31:43,570 --> 00:31:50,700
don't like the 0 how do I throw the zero

00:31:48,460 --> 00:31:50,700
out

00:31:53,320 --> 00:31:59,799
you don't do single characters but you

00:31:56,980 --> 00:32:01,929
get the 60 and you put one plus one plus

00:31:59,799 --> 00:32:16,210
one plus one these are 60 I assure you

00:32:01,929 --> 00:32:19,029
and this works and we got 28 now very

00:32:16,210 --> 00:32:22,450
fast this is exactly like inception as a

00:32:19,029 --> 00:32:24,220
matter of fact and is that many exactly

00:32:22,450 --> 00:32:27,639
in exactly excite you unstable no

00:32:24,220 --> 00:32:29,769
actually you can't it does work it's a

00:32:27,639 --> 00:32:31,980
lot of work to build the dissolution

00:32:29,769 --> 00:32:38,129
because you have a lot of tricky cases

00:32:31,980 --> 00:32:41,769
but we have more or less same structural

00:32:38,129 --> 00:32:44,110
inception reality in the movie it's our

00:32:41,769 --> 00:32:46,480
Python interpreter and then we pass a

00:32:44,110 --> 00:32:48,549
string and that string the main work

00:32:46,480 --> 00:32:51,759
that we da do is that we decreased the

00:32:48,549 --> 00:32:54,340
ask you 32 encrypted string then we

00:32:51,759 --> 00:32:57,029
exact it within the first exact what we

00:32:54,340 --> 00:33:00,940
are doing we build numbers with the

00:32:57,029 --> 00:33:03,009
conversion tricks and we be all the

00:33:00,940 --> 00:33:09,330
numbers that we need and with all the

00:33:03,009 --> 00:33:11,950
pieces we build a exact + literal

00:33:09,330 --> 00:33:15,009
solution that then we exact and we go

00:33:11,950 --> 00:33:18,039
one more level d one level deeper and we

00:33:15,009 --> 00:33:21,039
pass the string literal we exact it once

00:33:18,039 --> 00:33:25,330
more and finally we run a completely

00:33:21,039 --> 00:33:27,279
arbitrary code and we choose the code

00:33:25,330 --> 00:33:30,220
that solve this particular problem but

00:33:27,279 --> 00:33:34,929
we can solve any problem with 28

00:33:30,220 --> 00:33:40,720
characters above 32 and whatever it

00:33:34,929 --> 00:33:43,659
takes for below 32 and this is my friend

00:33:40,720 --> 00:33:45,429
I premised to show you the most seek

00:33:43,659 --> 00:33:47,049
Python code you have ever seen and

00:33:45,429 --> 00:33:49,659
actually you can see it in an editor

00:33:47,049 --> 00:33:52,659
this is a hex dump of the actual

00:33:49,659 --> 00:33:55,779
solution that I submitted and obviously

00:33:52,659 --> 00:33:57,909
you don't understand anything but I can

00:33:55,779 --> 00:34:00,879
show you what happens after translation

00:33:57,909 --> 00:34:06,150
you get this very nice string as well

00:34:00,879 --> 00:34:09,530
which is the second second d player and

00:34:06,150 --> 00:34:11,970
then we get to this which is the utter

00:34:09,530 --> 00:34:16,200
representation that we want to exact and

00:34:11,970 --> 00:34:23,010
we go to this which is just the solution

00:34:16,200 --> 00:34:25,919
we start with and now it took me really

00:34:23,010 --> 00:34:27,570
a lot of time both to find the solution

00:34:25,919 --> 00:34:30,570
and to prepare the talk because it's

00:34:27,570 --> 00:34:33,330
really fuel to explain and I hope these

00:34:30,570 --> 00:34:37,919
work and your mouth in your mind is

00:34:33,330 --> 00:34:41,909
actually blown now and if it's not I

00:34:37,919 --> 00:34:49,770
have just one word and the last slide

00:34:41,909 --> 00:34:53,640
for you perl 6 characters and they did

00:34:49,770 --> 00:34:55,820
probably the same SAP with it now thank

00:34:53,640 --> 00:34:55,820
you

00:35:06,610 --> 00:35:21,050
is there any question my mind is 72

00:35:16,730 --> 00:35:24,970
blown is the Python 3 solution longer

00:35:21,050 --> 00:35:24,970
because the back text trick doesn't work

00:35:25,480 --> 00:35:31,790
let's see actually I don't remember for

00:35:29,720 --> 00:35:34,310
sure you don't have exact the exact of

00:35:31,790 --> 00:35:39,470
parentheses so you lose to at the very

00:35:34,310 --> 00:35:43,880
beginning for the parentheses then I

00:35:39,470 --> 00:35:45,530
think yes is the back the the backtick

00:35:43,880 --> 00:35:48,770
that doesn't work but I really don't

00:35:45,530 --> 00:35:52,940
know how I mean I would have to look at

00:35:48,770 --> 00:35:56,800
the the solution and that will not do

00:35:52,940 --> 00:35:56,800
much because I cannot read it but ok

00:36:03,769 --> 00:36:12,059
my brain hurts but my question is did

00:36:09,029 --> 00:36:15,119
you develop any tools for building code

00:36:12,059 --> 00:36:16,769
in the different levels actually yes I

00:36:15,119 --> 00:36:19,289
mean it's not possible to write this

00:36:16,769 --> 00:36:21,449
stuff and I did not only tools to write

00:36:19,289 --> 00:36:23,519
the code but also tool to analyze all

00:36:21,449 --> 00:36:26,519
the possibilities because whenever you

00:36:23,519 --> 00:36:29,189
try to look for solutions that means for

00:36:26,519 --> 00:36:32,069
example when octal numbers you need to

00:36:29,189 --> 00:36:33,899
do tries and actually there was a

00:36:32,069 --> 00:36:38,539
previous solution that was different it

00:36:33,899 --> 00:36:42,649
didn't use translate where I tried a

00:36:38,539 --> 00:36:45,809
huge space of functions that could do

00:36:42,649 --> 00:36:47,849
numeric translation between ascii below

00:36:45,809 --> 00:36:51,839
32 and the character that i did it for

00:36:47,849 --> 00:36:58,169
the solution so it was quite a quite a

00:36:51,839 --> 00:37:00,959
journey awesome as a matter of fact is

00:36:58,169 --> 00:37:03,479
slightly cheated you in the sense that

00:37:00,959 --> 00:37:06,659
if you look here actually there is one

00:37:03,479 --> 00:37:09,119
more trick you see the X 28 for example

00:37:06,659 --> 00:37:10,559
and there is one more trick in which if

00:37:09,119 --> 00:37:13,289
you have a zero in the octo

00:37:10,559 --> 00:37:17,789
representation sometimes you can turn to

00:37:13,289 --> 00:37:20,880
the extra decimal representation since i

00:37:17,789 --> 00:37:23,159
already had the X the X I could use that

00:37:20,880 --> 00:37:28,039
so I try to minimize the case where you

00:37:23,159 --> 00:37:32,609
needed to some very very long ones okay

00:37:28,039 --> 00:37:37,229
does the parole solution also encode in

00:37:32,609 --> 00:37:41,689
two characters underneath 32 asking 32 I

00:37:37,229 --> 00:37:46,729
would pay to see the person I didn't I

00:37:41,689 --> 00:37:50,279
guess so because there was quite in

00:37:46,729 --> 00:37:52,589
2005-2006 there was quite a lot of chat

00:37:50,279 --> 00:37:55,289
in the forum about that and they were

00:37:52,589 --> 00:37:56,819
talking about how they could not read

00:37:55,289 --> 00:37:59,699
the solution but just had a tool that

00:37:56,819 --> 00:38:01,229
built a part a first step and then

00:37:59,699 --> 00:38:03,389
another tool that beats the second step

00:38:01,229 --> 00:38:06,689
and so on and so on so I guess they were

00:38:03,389 --> 00:38:08,549
doing these kind of tricky tricks have

00:38:06,689 --> 00:38:11,010
you considered switching to paroles on

00:38:08,549 --> 00:38:15,910
language

00:38:11,010 --> 00:38:18,430
actually Tim pedders did if you look Tim

00:38:15,910 --> 00:38:27,010
pedders is actually forth in a good

00:38:18,430 --> 00:38:32,109
seven so what are you trying to do this

00:38:27,010 --> 00:38:37,990
better solution I must admit that I as I

00:38:32,109 --> 00:38:43,900
was writing the presentation had a

00:38:37,990 --> 00:38:46,809
couple of ideas I I don't want to to

00:38:43,900 --> 00:38:54,059
think of them otherwise i will need more

00:38:46,809 --> 00:38:54,059
sleepless nights or other questions

00:38:58,049 --> 00:39:02,890
what's the golf score of your entry

00:39:01,030 --> 00:39:04,960
sorry what what's the actual golf

00:39:02,890 --> 00:39:08,410
schools the length of it including the

00:39:04,960 --> 00:39:10,720
horrible characters oh I I'm sorry the

00:39:08,410 --> 00:39:12,520
Gulf source what is what is the length

00:39:10,720 --> 00:39:17,440
of the string you've actually submitted

00:39:12,520 --> 00:39:23,589
income Dingley I think it I'm not sure

00:39:17,440 --> 00:39:26,440
you mean the length of this i'm not sure

00:39:23,589 --> 00:39:31,000
i guess was several kilobytes sound like

00:39:26,440 --> 00:39:33,760
30 the limit actually there is a limit

00:39:31,000 --> 00:39:37,869
which is 15 so i mean i still had some

00:39:33,760 --> 00:39:42,130
room this is the last question can you

00:39:37,869 --> 00:39:47,559
actually submit this with a browser no

00:39:42,130 --> 00:39:49,029
no I uploaded the file yes sir this is

00:39:47,559 --> 00:39:50,740
the reason I cannot download it anymore

00:39:49,029 --> 00:39:54,910
because the brighter the browser oh

00:39:50,740 --> 00:39:57,420
maybe their code get make garbage other

00:39:54,910 --> 00:40:02,279
it when you try to download it again

00:39:57,420 --> 00:40:02,279

YouTube URL: https://www.youtube.com/watch?v=4-3zLTg3GKk


