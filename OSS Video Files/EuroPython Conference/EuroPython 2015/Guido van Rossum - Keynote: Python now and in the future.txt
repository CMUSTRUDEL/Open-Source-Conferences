Title: Guido van Rossum - Keynote: Python now and in the future
Publication date: 2015-08-08
Playlist: EuroPython 2015
Description: 
	Guido van Rossum - Keynote: Python now and in the future
[EuroPython 2015]
[21 July 2015]
[Bilbao, Euskadi, Spain]

This is *your* keynote! I will have some prepared remarks on the state
of the Python community and Python's future directions, but first and
foremost this will be an interactive Q&A session.
Captions: 
	00:00:01,410 --> 00:00:09,480
I think we can start okay so the keynote

00:00:07,290 --> 00:00:11,760
speak speaker for this morning I don't

00:00:09,480 --> 00:00:15,240
think it needs any introduction I think

00:00:11,760 --> 00:00:18,210
everybody knows Guido so we are really

00:00:15,240 --> 00:00:22,850
honored to have you here again this year

00:00:18,210 --> 00:00:22,850
so welcome widow thank you

00:00:35,629 --> 00:00:40,649
hello everybody I'm so glad to be back

00:00:38,250 --> 00:00:42,780
at your Python I can't believe I think

00:00:40,649 --> 00:00:48,839
it's been five years since the last one

00:00:42,780 --> 00:00:50,699
I attended yeah oh and Bilbao is really

00:00:48,839 --> 00:00:53,100
a beautiful place to be I've really

00:00:50,699 --> 00:00:59,309
enjoyed it so far here of inside and

00:00:53,100 --> 00:01:01,619
outside the conference center so as I

00:00:59,309 --> 00:01:03,719
wrote in the program I don't know if

00:01:01,619 --> 00:01:07,350
you've actually read that I will have

00:01:03,719 --> 00:01:09,690
some prepare to read prepared remarks on

00:01:07,350 --> 00:01:12,600
the state of the Python community and

00:01:09,690 --> 00:01:15,000
pythons future directions but first for

00:01:12,600 --> 00:01:21,360
Maus this will be an interactive Q&A

00:01:15,000 --> 00:01:25,789
session and so I warned you but there's

00:01:21,360 --> 00:01:25,789
still an update it's all going to be Q&A

00:01:26,060 --> 00:01:32,429
however don't get unduly worried to warm

00:01:30,690 --> 00:01:37,580
you up I have prepared a few questions

00:01:32,429 --> 00:01:40,560
and you can answer them now just kidding

00:01:37,580 --> 00:01:45,170
how how do you define a recursive

00:01:40,560 --> 00:01:49,410
function that computes factorial I

00:01:45,170 --> 00:01:51,780
really do have a few questions and I

00:01:49,410 --> 00:01:53,940
have some answers so my first question

00:01:51,780 --> 00:01:57,649
is what do you think of django girls

00:01:53,940 --> 00:02:02,099
because I think if Ola or Ola were here

00:01:57,649 --> 00:02:03,869
are you guys here Ola Ola oh there

00:02:02,099 --> 00:02:07,679
they're arresting they've been partying

00:02:03,869 --> 00:02:10,080
well I thought I thought it was much

00:02:07,679 --> 00:02:11,879
cupcake really great talk I love the

00:02:10,080 --> 00:02:13,769
storytelling I am terrible at

00:02:11,879 --> 00:02:18,319
storytelling there is absolutely no

00:02:13,769 --> 00:02:21,390
story in my presentation today it's just

00:02:18,319 --> 00:02:24,510
branch to branch hopping also as you can

00:02:21,390 --> 00:02:26,810
tell I cannot make pretty slides or

00:02:24,510 --> 00:02:32,300
beautiful drawings I was absolutely

00:02:26,810 --> 00:02:35,730
stunned when I heard that that Ola Ola

00:02:32,300 --> 00:02:39,180
drew that drew her own squirrels and

00:02:35,730 --> 00:02:44,159
Badgers and there were really good

00:02:39,180 --> 00:02:46,989
drawings I was like I was I was really

00:02:44,159 --> 00:02:49,370
very impressed

00:02:46,989 --> 00:02:52,099
there's another thing that I really

00:02:49,370 --> 00:02:55,579
liked in their talk they said at the end

00:02:52,099 --> 00:02:57,829
somewhere when we started we had no idea

00:02:55,579 --> 00:03:01,069
what we were doing or maybe they said we

00:02:57,829 --> 00:03:03,470
still don't know what we are doing that

00:03:01,069 --> 00:03:07,400
is very much than sort of resonates with

00:03:03,470 --> 00:03:09,829
how I looked back when I started

00:03:07,400 --> 00:03:13,069
creating Python 25 years ago Python

00:03:09,829 --> 00:03:15,590
celebrates its 25th year here I had no

00:03:13,069 --> 00:03:18,620
idea what I was doing I had no idea that

00:03:15,590 --> 00:03:23,329
a programming language needed a

00:03:18,620 --> 00:03:25,849
community with lots of different roles

00:03:23,329 --> 00:03:30,260
in the community from core developer to

00:03:25,849 --> 00:03:32,329
supporter to organizer and that's a

00:03:30,260 --> 00:03:33,920
really important thing to recognize that

00:03:32,329 --> 00:03:37,480
you don't always know what you're doing

00:03:33,920 --> 00:03:37,480
but you're still doing important work

00:03:37,690 --> 00:03:45,500
one final remark about django girls I

00:03:42,159 --> 00:03:47,209
don't know if Ola and all I realized

00:03:45,500 --> 00:03:51,250
this themselves yet but they have

00:03:47,209 --> 00:03:54,379
created a strong brand in one year and

00:03:51,250 --> 00:03:57,139
sort of if you look at their list of how

00:03:54,379 --> 00:03:59,660
do you create a django girls event they

00:03:57,139 --> 00:04:01,790
know how to keep the brand strong and

00:03:59,660 --> 00:04:03,260
sort of protected in a sense you have to

00:04:01,790 --> 00:04:07,459
register with the django girl's

00:04:03,260 --> 00:04:10,370
foundation that is that is amazing skill

00:04:07,459 --> 00:04:12,410
all by itself which which many geeks

00:04:10,370 --> 00:04:15,859
actually don't have at all I'm terrible

00:04:12,410 --> 00:04:18,560
at that kind of stuff myself so I think

00:04:15,859 --> 00:04:21,590
that a line Ola and Django girls will go

00:04:18,560 --> 00:04:23,599
very far just based on the on their

00:04:21,590 --> 00:04:26,510
first year and that's really all I have

00:04:23,599 --> 00:04:29,030
to say about Django girls so now the

00:04:26,510 --> 00:04:29,860
questions that you wanted to ask me for

00:04:29,030 --> 00:04:33,199
example

00:04:29,860 --> 00:04:38,180
why should I switch to Python 3 can't

00:04:33,199 --> 00:04:40,580
you can't you already sort of give up

00:04:38,180 --> 00:04:40,909
that whole Python 3 stuff is never gonna

00:04:40,580 --> 00:04:43,400
work

00:04:40,909 --> 00:04:46,799
look everybody around me is still using

00:04:43,400 --> 00:04:49,749
python 2.5 well actually hopefully

00:04:46,799 --> 00:04:56,229
they have they have no excuse for not

00:04:49,749 --> 00:04:58,449
being on 2.7 and so well this is a

00:04:56,229 --> 00:05:01,479
complicated question why why should you

00:04:58,449 --> 00:05:03,639
switch and and and ultimately I'm not

00:05:01,479 --> 00:05:06,969
saying that you should switch I would

00:05:03,639 --> 00:05:10,149
like you to switch but I also recognize

00:05:06,969 --> 00:05:14,469
that it's difficult to switch it feels

00:05:10,149 --> 00:05:19,360
like a lot of hard work that you could

00:05:14,469 --> 00:05:23,709
also spend instead on say improving the

00:05:19,360 --> 00:05:25,989
design of your website or adding

00:05:23,709 --> 00:05:27,849
features to your application or library

00:05:25,989 --> 00:05:30,989
and instead you would have to spend it

00:05:27,849 --> 00:05:34,809
on the sort of the Grunch work of

00:05:30,989 --> 00:05:37,389
porting to Python 3 and it is grunt work

00:05:34,809 --> 00:05:39,129
if you have a large body of code ten

00:05:37,389 --> 00:05:43,300
thousand hundred thousand lines of code

00:05:39,129 --> 00:05:46,059
millions it will take a lot of effort to

00:05:43,300 --> 00:05:49,479
port that so why would why would you

00:05:46,059 --> 00:05:52,449
even bother why not just happily stay on

00:05:49,479 --> 00:05:54,189
Python two seven because by up to seven

00:05:52,449 --> 00:05:57,039
isn't dead yet it's it's going to be

00:05:54,189 --> 00:06:00,099
supported at some level of support at

00:05:57,039 --> 00:06:02,589
least with security patches and maybe

00:06:00,099 --> 00:06:03,899
security features as needed for the next

00:06:02,589 --> 00:06:07,659
five years

00:06:03,899 --> 00:06:10,569
well Python three really is a better

00:06:07,659 --> 00:06:13,689
language and for example it is a much

00:06:10,569 --> 00:06:16,089
better language to teach and so one

00:06:13,689 --> 00:06:19,389
thing I cornered one of the holas

00:06:16,089 --> 00:06:21,369
actually both all's yesterday and they

00:06:19,389 --> 00:06:23,979
told me and they were very happy they

00:06:21,369 --> 00:06:27,519
said we do all our teaching in Python 3

00:06:23,979 --> 00:06:30,189
and I realized wow they wouldn't have

00:06:27,519 --> 00:06:33,699
been able to do any teaching using

00:06:30,189 --> 00:06:36,279
Python 3 if the Django core developers

00:06:33,699 --> 00:06:39,819
several years ago probably close to five

00:06:36,279 --> 00:06:42,129
years ago by now had actually started

00:06:39,819 --> 00:06:44,679
doing the grunt work of making django

00:06:42,129 --> 00:06:49,119
support Python 3 and in their case

00:06:44,679 --> 00:06:51,129
without dropping support for Python 2 so

00:06:49,119 --> 00:06:53,769
that grunge work actually paid off

00:06:51,129 --> 00:06:55,959
because Django girls is teaching using

00:06:53,769 --> 00:06:58,449
Python 3 which really is a better

00:06:55,959 --> 00:06:59,689
language for teaching than Python to let

00:06:58,449 --> 00:07:01,549
lots of

00:06:59,689 --> 00:07:03,679
sort of little warts have been removed

00:07:01,549 --> 00:07:09,860
from the language that make it more

00:07:03,679 --> 00:07:12,379
pleasant as a first experience so yeah

00:07:09,860 --> 00:07:16,189
that sort of Python free just is a

00:07:12,379 --> 00:07:19,579
better language and it is getting better

00:07:16,189 --> 00:07:22,699
over time if you look at the list of new

00:07:19,579 --> 00:07:24,979
things in Python 305 which is going to

00:07:22,699 --> 00:07:28,179
be come out of beta this fall

00:07:24,979 --> 00:07:31,729
that's an amazing list of new features

00:07:28,179 --> 00:07:34,699
lots of cool new stuff by from 2 on the

00:07:31,729 --> 00:07:37,579
other hand is a fine language and it

00:07:34,699 --> 00:07:40,610
will remain exactly what it is yeah well

00:07:37,579 --> 00:07:43,209
we'll fix the occasional bug but it's

00:07:40,610 --> 00:07:47,659
sort of its asymptotic ly approaching

00:07:43,209 --> 00:07:52,099
2.7 perfect and it's never going going

00:07:47,659 --> 00:07:55,519
anywhere beyond there so that's why you

00:07:52,099 --> 00:07:58,189
should switch to Python 3 because you

00:07:55,519 --> 00:08:00,229
will the only way to benefit from all

00:07:58,189 --> 00:08:02,809
the good work that core developers and

00:08:00,229 --> 00:08:08,689
other contributors do to Python is by

00:08:02,809 --> 00:08:12,259
switching so a related question may be a

00:08:08,689 --> 00:08:16,099
little dated by now is why don't you do

00:08:12,259 --> 00:08:21,229
with 2.8 release well it wouldn't really

00:08:16,099 --> 00:08:23,719
solve any problems either 2.8 is has no

00:08:21,229 --> 00:08:26,089
new features compared to 2.7 and then we

00:08:23,719 --> 00:08:27,860
might as well call it 2.7 point 10 or

00:08:26,089 --> 00:08:33,740
something like that which actually is

00:08:27,860 --> 00:08:36,559
coming out eventually or you open the

00:08:33,740 --> 00:08:40,669
floodgates of backported features from

00:08:36,559 --> 00:08:43,660
Python 3 and then porting to Python 2

00:08:40,669 --> 00:08:47,509
double 8 would be almost as difficult as

00:08:43,660 --> 00:08:50,149
by porting to Python 3 would be and a

00:08:47,509 --> 00:08:53,300
really big difference between 2 and 3

00:08:50,149 --> 00:08:56,329
that can never be split is not something

00:08:53,300 --> 00:09:01,189
that you can gradually evolve into is

00:08:56,329 --> 00:09:03,829
the Unicode change most other things you

00:09:01,189 --> 00:09:06,500
can you can write almost Python 3 code

00:09:03,829 --> 00:09:08,929
in Python 2 7 actually from future

00:09:06,500 --> 00:09:10,820
import print statement a new try except

00:09:08,929 --> 00:09:15,610
syntax and go on

00:09:10,820 --> 00:09:19,730
but unicode you just cannot switch so

00:09:15,610 --> 00:09:22,430
enough is enough no new features I want

00:09:19,730 --> 00:09:24,800
to focus the energy of the Python core

00:09:22,430 --> 00:09:27,680
development group which is already busy

00:09:24,800 --> 00:09:32,030
enough I want to focus that energy on

00:09:27,680 --> 00:09:38,180
making Python 3 better so what is my

00:09:32,030 --> 00:09:41,000
favorite Python 3.5 feature I went over

00:09:38,180 --> 00:09:43,280
the list of what is new in Python 3.5

00:09:41,000 --> 00:09:45,890
and I realized that that list is way too

00:09:43,280 --> 00:09:49,310
long there are way too many cool new

00:09:45,890 --> 00:09:52,790
things so in some sense maybe everything

00:09:49,310 --> 00:09:57,160
together is my favorite new feature and

00:09:52,790 --> 00:09:59,930
this this goes from the vastly optimized

00:09:57,160 --> 00:10:02,210
function for scanning large directories

00:09:59,930 --> 00:10:04,580
os dot skander which will be used to

00:10:02,210 --> 00:10:07,490
make always don't walk faster and sort

00:10:04,580 --> 00:10:10,370
of its app app all by itself most people

00:10:07,490 --> 00:10:12,830
will never know know it's there but it's

00:10:10,370 --> 00:10:14,810
an incredibly cool project there's a

00:10:12,830 --> 00:10:16,790
small community of people who will be

00:10:14,810 --> 00:10:19,540
very happy to hear that there is now a

00:10:16,790 --> 00:10:23,180
matrix multiply operator in the language

00:10:19,540 --> 00:10:25,430
there are no built-in types that define

00:10:23,180 --> 00:10:30,140
that operator it's an ADD sign by the

00:10:25,430 --> 00:10:33,110
way but it has its own mapping to add

00:10:30,140 --> 00:10:33,650
under function and numpy can start using

00:10:33,110 --> 00:10:36,470
this

00:10:33,650 --> 00:10:38,950
so eventually numerical Python users and

00:10:36,470 --> 00:10:42,050
scientific Python users will be able to

00:10:38,950 --> 00:10:49,390
write matrix multiply in a much more

00:10:42,050 --> 00:10:52,370
natural fashion than calling a function

00:10:49,390 --> 00:10:55,910
may be my favorite feature ought to be

00:10:52,370 --> 00:10:57,620
type hints because that's the only well

00:10:55,910 --> 00:11:01,600
that's actually one of the two but the

00:10:57,620 --> 00:11:01,600
only major pet that I offered myself

00:11:02,530 --> 00:11:09,860
it's been a huge struggle to get that

00:11:06,080 --> 00:11:11,960
pepper accepted which is kind of bizarre

00:11:09,860 --> 00:11:15,300
because I'm the bee DFL so I can just

00:11:11,960 --> 00:11:20,200
accept my own path if I want to

00:11:15,300 --> 00:11:22,360
but I I thought in this particular case

00:11:20,200 --> 00:11:24,430
that that wouldn't really be fair I

00:11:22,360 --> 00:11:28,740
wanted to have a real discussion about

00:11:24,430 --> 00:11:32,220
the benefits and I wanted to have an

00:11:28,740 --> 00:11:38,550
independent as independent as possible

00:11:32,220 --> 00:11:44,220
party to sort of validate the design and

00:11:38,550 --> 00:11:48,490
Mark Shannon author of hot pie another

00:11:44,220 --> 00:11:55,570
Python interpreter that is faster than C

00:11:48,490 --> 00:12:00,850
Python gracefully agree to be the B DFL

00:11:55,570 --> 00:12:05,140
delegate for type hints and we worked

00:12:00,850 --> 00:12:07,210
out a process and eventually using the

00:12:05,140 --> 00:12:09,670
process we worked out a compromise and

00:12:07,210 --> 00:12:12,250
I'm very happy with the outcome and that

00:12:09,670 --> 00:12:14,350
sort of the outcome really is better

00:12:12,250 --> 00:12:18,940
because of all the effort that mark put

00:12:14,350 --> 00:12:21,220
in there so thank you Mark and yet I

00:12:18,940 --> 00:12:23,230
think if you sort of if you caught me

00:12:21,220 --> 00:12:26,770
unawares and you asked me what is your

00:12:23,230 --> 00:12:30,780
favorite feature in Python 3.5 I would

00:12:26,770 --> 00:12:33,610
have to say it's pep 492 which is

00:12:30,780 --> 00:12:39,730
literally the last pep that was accepted

00:12:33,610 --> 00:12:41,800
before beta 1 its acing deaf plus and a

00:12:39,730 --> 00:12:47,670
weight expression and a weight keyword

00:12:41,800 --> 00:12:50,950
and also acing for and a sink width and

00:12:47,670 --> 00:12:55,450
it's a new more natural way of spelling

00:12:50,950 --> 00:13:00,280
co-routines that is a direct follow-up

00:12:55,450 --> 00:13:04,240
on the async i/o work that I did a few

00:13:00,280 --> 00:13:06,990
years ago and I don't think URI is here

00:13:04,240 --> 00:13:06,990
he's Canadian

00:13:07,710 --> 00:13:11,970
now that that would preclude him from

00:13:10,030 --> 00:13:18,269
attending

00:13:11,970 --> 00:13:22,229
ah but in absentia Thank You Yuri great

00:13:18,269 --> 00:13:25,259
Papp great feature and I think that a

00:13:22,229 --> 00:13:28,919
few years from now we'll look back on

00:13:25,259 --> 00:13:33,269
that as one of the big new things added

00:13:28,919 --> 00:13:38,220
to Python 3.5 so I guess that's my

00:13:33,269 --> 00:13:41,129
favorite 3.5 feature I don't know if

00:13:38,220 --> 00:13:44,299
that counts as a killer feature so

00:13:41,129 --> 00:13:49,199
another question much more humbling and

00:13:44,299 --> 00:13:52,559
a woman named I think Lena Linea from

00:13:49,199 --> 00:13:54,479
Ukraine you know who she is cornered me

00:13:52,559 --> 00:13:58,439
yesterday during lunch and asked me this

00:13:54,479 --> 00:14:02,339
and it's it's a really complicated

00:13:58,439 --> 00:14:05,399
reason I mean yes it is true there are

00:14:02,339 --> 00:14:08,239
many many open bugs in the Python bug

00:14:05,399 --> 00:14:12,349
tracker and if you if you were to pick

00:14:08,239 --> 00:14:15,209
an open bug at random from the tracker

00:14:12,349 --> 00:14:18,449
chances are very high that you'll you'll

00:14:15,209 --> 00:14:22,799
catch a bug that is years old has

00:14:18,449 --> 00:14:25,079
several patches attached to it has

00:14:22,799 --> 00:14:29,039
several core developers discussing that

00:14:25,079 --> 00:14:31,379
patch to death several renowned core

00:14:29,039 --> 00:14:35,819
developers stating that this is a good

00:14:31,379 --> 00:14:41,269
patch that needs to go in or perhaps not

00:14:35,819 --> 00:14:45,659
but long discussion proposed code and

00:14:41,269 --> 00:14:49,859
yet the bug is opened patch has not been

00:14:45,659 --> 00:14:52,319
applied why is that that are we are we

00:14:49,859 --> 00:14:55,349
just sort of is a core development group

00:14:52,319 --> 00:15:01,019
lame bunch of developers do they not

00:14:55,349 --> 00:15:03,839
accept patches is there some kind of old

00:15:01,019 --> 00:15:05,970
boys network where only patches written

00:15:03,839 --> 00:15:09,649
by a core develop existing core

00:15:05,970 --> 00:15:13,699
developers ever get accepted or what

00:15:09,649 --> 00:15:18,629
what do you have to do well there did

00:15:13,699 --> 00:15:22,769
it's it's unfortunately just a fact of

00:15:18,629 --> 00:15:25,360
life in any large project i I haven't

00:15:22,769 --> 00:15:27,670
looked but I betcha if you look at

00:15:25,360 --> 00:15:33,009
the bug tracker for Linux if they even

00:15:27,670 --> 00:15:37,809
have a bug tracker it would be even

00:15:33,009 --> 00:15:40,149
worse I remember I worked at Google on

00:15:37,809 --> 00:15:44,199
the App Engine project which had lots of

00:15:40,149 --> 00:15:46,089
external developers the project was

00:15:44,199 --> 00:15:50,170
especially in its initial stage is very

00:15:46,089 --> 00:15:52,540
popular with very vocal developers we

00:15:50,170 --> 00:15:57,009
had a huge number of issues in the

00:15:52,540 --> 00:15:59,589
tracker many of which had sort of good

00:15:57,009 --> 00:16:02,309
discussion and it was very hard for the

00:15:59,589 --> 00:16:07,899
team to admit that we just couldn't

00:16:02,309 --> 00:16:10,480
address them all and sort of when

00:16:07,899 --> 00:16:12,939
someone reports a genuine bug when you

00:16:10,480 --> 00:16:15,699
you don't have a reason to close it

00:16:12,939 --> 00:16:17,279
instantly as like that's not a bug

00:16:15,699 --> 00:16:21,429
that's a feature you misread

00:16:17,279 --> 00:16:23,170
documentation there are lots of lots of

00:16:21,429 --> 00:16:26,139
those too but those get closed right

00:16:23,170 --> 00:16:28,860
away so the ones that stay open are real

00:16:26,139 --> 00:16:32,439
bugs but they may be hard to reproduce

00:16:28,860 --> 00:16:35,829
there are a lot of bugs in the tracker

00:16:32,439 --> 00:16:39,610
that only occur on one obscure platform

00:16:35,829 --> 00:16:42,759
maybe only to one user who has a

00:16:39,610 --> 00:16:46,869
particular combination of things they do

00:16:42,759 --> 00:16:51,459
that makes the garbage collector crack

00:16:46,869 --> 00:16:53,829
up or any number of reasons

00:16:51,459 --> 00:16:55,929
there is probably some subtle bugs

00:16:53,829 --> 00:16:59,439
somewhere in cpython

00:16:55,929 --> 00:17:00,989
and nobody has been able to find it so

00:16:59,439 --> 00:17:03,879
those are bugs that don't have patches

00:17:00,989 --> 00:17:07,779
then there are bugs for feature

00:17:03,879 --> 00:17:11,350
proposals where someone actually made a

00:17:07,779 --> 00:17:13,299
patch but usually if you read the whole

00:17:11,350 --> 00:17:15,669
discussion carefully you'll find out

00:17:13,299 --> 00:17:19,569
that there is hesitancy to accept a new

00:17:15,669 --> 00:17:22,299
feature because either it is not

00:17:19,569 --> 00:17:26,589
consistent with other features of the

00:17:22,299 --> 00:17:29,279
same module or there is doubt that it's

00:17:26,589 --> 00:17:31,929
a useful feature maybe it's a three-line

00:17:29,279 --> 00:17:38,710
function that people could easily come

00:17:31,929 --> 00:17:40,720
up with for themselves maybe there is

00:17:38,710 --> 00:17:42,730
change to something existing that is a

00:17:40,720 --> 00:17:44,860
backwards a subtle backwards

00:17:42,730 --> 00:17:47,470
incompatibility that the author of the

00:17:44,860 --> 00:17:51,130
patch and maybe several reviewers even

00:17:47,470 --> 00:17:58,409
don't see they're sort of it's just

00:17:51,130 --> 00:18:02,110
really difficult to to sort of accept

00:17:58,409 --> 00:18:05,470
patches and not break stuff all the time

00:18:02,110 --> 00:18:08,770
and and I know my personal experience of

00:18:05,470 --> 00:18:10,809
course going 25 years back 25 years back

00:18:08,770 --> 00:18:12,820
I started accepting patches from others

00:18:10,809 --> 00:18:16,179
like first they were the people who

00:18:12,820 --> 00:18:18,580
worked with me in the same office after

00:18:16,179 --> 00:18:22,750
a year I started accepting patches from

00:18:18,580 --> 00:18:26,110
people all over the world and some

00:18:22,750 --> 00:18:28,059
patches are obviously improvements but

00:18:26,110 --> 00:18:30,840
they're also backwards incompatible in

00:18:28,059 --> 00:18:34,659
those early days I didn't mind if if

00:18:30,840 --> 00:18:38,440
everybody's Python code broke well that

00:18:34,659 --> 00:18:41,049
was maybe a hundred people and it would

00:18:38,440 --> 00:18:42,880
they would all have their code fixed in

00:18:41,049 --> 00:18:46,059
a few minutes and change the fix was

00:18:42,880 --> 00:18:48,340
obvious nowadays if you if you

00:18:46,059 --> 00:18:51,760
introduced a new patch that accidentally

00:18:48,340 --> 00:18:54,190
breaks someone else's existing code that

00:18:51,760 --> 00:18:55,899
other person may not even be a Python

00:18:54,190 --> 00:18:59,350
programmer they may not even realize

00:18:55,899 --> 00:19:02,260
that they're using Python it may just be

00:18:59,350 --> 00:19:06,549
some installer script that comes with

00:19:02,260 --> 00:19:08,260
their Linux distribution that breaks

00:19:06,549 --> 00:19:10,690
when they try to do a certain thing

00:19:08,260 --> 00:19:14,440
because some a new reserved word was

00:19:10,690 --> 00:19:17,620
introduced in the language by by an

00:19:14,440 --> 00:19:21,010
optimistic PAP patch there are just so

00:19:17,620 --> 00:19:23,909
many different things you have to worry

00:19:21,010 --> 00:19:27,490
about does it work across all platforms

00:19:23,909 --> 00:19:29,980
is it consistent is it easy to

00:19:27,490 --> 00:19:35,070
understand how would you write the

00:19:29,980 --> 00:19:37,960
documentation do you provide tests so

00:19:35,070 --> 00:19:41,890
also that sort of core developers have a

00:19:37,960 --> 00:19:43,840
limited amount of time and with open

00:19:41,890 --> 00:19:47,710
source development in general nobody

00:19:43,840 --> 00:19:50,320
actually gets paid to review and apply a

00:19:47,710 --> 00:19:53,110
core Python patches we're all doing it

00:19:50,320 --> 00:19:58,310
in our spare time

00:19:53,110 --> 00:20:00,530
and that also means that if if none of

00:19:58,310 --> 00:20:03,350
the core developers really cares about a

00:20:00,530 --> 00:20:06,650
particular feature and they don't care

00:20:03,350 --> 00:20:12,590
or know the person who submits the patch

00:20:06,650 --> 00:20:15,560
you can't really blame them collectively

00:20:12,590 --> 00:20:17,510
for not applying the patch if you if you

00:20:15,560 --> 00:20:20,740
have professional software development

00:20:17,510 --> 00:20:25,360
than you have presumably a commitment to

00:20:20,740 --> 00:20:29,750
releases and features that includes if

00:20:25,360 --> 00:20:32,060
you want to continue to be employed at

00:20:29,750 --> 00:20:34,340
this company you have to do a certain

00:20:32,060 --> 00:20:38,240
amount of grunt work and you do that in

00:20:34,340 --> 00:20:42,140
a rotation or sort of maybe through

00:20:38,240 --> 00:20:44,060
seniority however you resolve it when

00:20:42,140 --> 00:20:46,130
when people are paid to do software

00:20:44,060 --> 00:20:49,130
development they know that's sort of

00:20:46,130 --> 00:20:51,620
doing unpleasant work that is net still

00:20:49,130 --> 00:20:55,190
necessary is part of the job with open

00:20:51,620 --> 00:20:56,750
source you have to volunteer to do the

00:20:55,190 --> 00:20:58,610
unpleasant stuff and some core

00:20:56,750 --> 00:21:01,340
developers have been doing unpleasant

00:20:58,610 --> 00:21:03,500
stuff for such a long time that they

00:21:01,340 --> 00:21:05,120
want to take a break and sometimes that

00:21:03,500 --> 00:21:09,530
just means that there aren't enough

00:21:05,120 --> 00:21:11,570
people who know a certain area a certain

00:21:09,530 --> 00:21:14,750
module or a certain part of the

00:21:11,570 --> 00:21:16,550
interpreter well enough to be able to

00:21:14,750 --> 00:21:18,740
accept a patch even if there are other

00:21:16,550 --> 00:21:22,400
people who say this looks great to me

00:21:18,740 --> 00:21:24,890
because how much do those people know

00:21:22,400 --> 00:21:27,530
you you mean eventually there there has

00:21:24,890 --> 00:21:29,870
to be a chain of trust so anyway these

00:21:27,530 --> 00:21:34,160
these are many reasons why you have many

00:21:29,870 --> 00:21:36,430
long old bugs in a tracker there's an

00:21:34,160 --> 00:21:38,570
additional reason which is a simple

00:21:36,430 --> 00:21:44,630
statistical effect that you often

00:21:38,570 --> 00:21:48,260
overlook which is that if you sort of if

00:21:44,630 --> 00:21:51,910
you randomly were to pick a bug from the

00:21:48,260 --> 00:21:55,900
tracker that was either open or closed

00:21:51,910 --> 00:22:00,050
you would probably find a closed bug

00:21:55,900 --> 00:22:03,950
most bugs are closed quickly because

00:22:00,050 --> 00:22:05,630
they are simple things perhaps some bugs

00:22:03,950 --> 00:22:08,180
are closed because they weren't actually

00:22:05,630 --> 00:22:10,400
bugs other bugs are closed quickly

00:22:08,180 --> 00:22:16,460
because there is very simple to fix it's

00:22:10,400 --> 00:22:17,840
a typo it's a very obvious problem that

00:22:16,460 --> 00:22:20,000
everybody can agree

00:22:17,840 --> 00:22:25,580
oh yeah that's clearly there is little

00:22:20,000 --> 00:22:27,860
bug here fix fix fix done so this sort

00:22:25,580 --> 00:22:32,720
of the bugs that are easy to fix get

00:22:27,860 --> 00:22:35,390
fixed and closed easily quickly and so

00:22:32,720 --> 00:22:38,570
what remains is sort of the bugs with a

00:22:35,390 --> 00:22:40,970
longer life time contribute much more

00:22:38,570 --> 00:22:44,120
strongly towards the collection of open

00:22:40,970 --> 00:22:47,840
bugs so the sort of I think the average

00:22:44,120 --> 00:22:51,950
age of a bug probably increases linearly

00:22:47,840 --> 00:22:54,110
at least with the age of the project so

00:22:51,950 --> 00:22:56,600
in a project like Python which is 25

00:22:54,110 --> 00:23:01,220
years old even if a bug tracker isn't

00:22:56,600 --> 00:23:05,210
quite that old even if everything was

00:23:01,220 --> 00:23:07,100
was spinning perfectly and we had tons

00:23:05,210 --> 00:23:11,140
of core developers closing bugs you

00:23:07,100 --> 00:23:14,990
would still find a large number of

00:23:11,140 --> 00:23:17,930
mysteriously old and open and unclosed

00:23:14,990 --> 00:23:20,660
bugs in the tracker and that's why there

00:23:17,930 --> 00:23:25,820
are so many open bugs in the tracker as

00:23:20,660 --> 00:23:29,350
best as I can tell so another question

00:23:25,820 --> 00:23:33,650
that people always ask especially

00:23:29,350 --> 00:23:37,760
journalists who have sort of hope to get

00:23:33,650 --> 00:23:39,410
something a sort of headline worthy out

00:23:37,760 --> 00:23:42,800
of me out of me what will the future

00:23:39,410 --> 00:23:45,080
bring what's what's going to be the next

00:23:42,800 --> 00:23:48,550
big thing in Python what's what are you

00:23:45,080 --> 00:23:51,770
excited about in the next release and

00:23:48,550 --> 00:23:54,650
I'm always sort of I'm always caught

00:23:51,770 --> 00:23:56,870
unawares by that question so I had to

00:23:54,650 --> 00:23:59,000
sort of think really hard before I

00:23:56,870 --> 00:24:05,570
realized that that should also be one of

00:23:59,000 --> 00:24:07,730
my prepared questions today I I really

00:24:05,570 --> 00:24:09,980
don't know what the future brings is

00:24:07,730 --> 00:24:12,500
very much dependent on what the

00:24:09,980 --> 00:24:15,110
community cares about and and sort of

00:24:12,500 --> 00:24:19,070
what certain individuals in the

00:24:15,110 --> 00:24:22,580
community suddenly decide to spend an

00:24:19,070 --> 00:24:24,860
insane amount of time on just like 25

00:24:22,580 --> 00:24:27,080
years ago I spent an insane amount of

00:24:24,860 --> 00:24:30,530
time on Python in addition to my day job

00:24:27,080 --> 00:24:34,970
in it sort of it took over my day job

00:24:30,530 --> 00:24:38,030
for a while and I had to work out an

00:24:34,970 --> 00:24:43,460
agreement with management to be able to

00:24:38,030 --> 00:24:45,380
continue doing that so if if there's

00:24:43,460 --> 00:24:49,280
something you really really desperately

00:24:45,380 --> 00:24:55,210
want to contribute that could become the

00:24:49,280 --> 00:24:59,450
next big thing in Python I'm hoping to

00:24:55,210 --> 00:25:01,940
work more on type hints and I'm

00:24:59,450 --> 00:25:04,550
currently on a very long summer vacation

00:25:01,940 --> 00:25:07,940
when I come back to work in August I'm

00:25:04,550 --> 00:25:09,890
coming back to type hints and I'm going

00:25:07,940 --> 00:25:14,510
to work with other people interested in

00:25:09,890 --> 00:25:18,860
type hints and sort of really do stuff

00:25:14,510 --> 00:25:20,600
with that feature so that that type

00:25:18,860 --> 00:25:23,060
hints are something that people can

00:25:20,600 --> 00:25:27,050
actually use in practice it's not just a

00:25:23,060 --> 00:25:29,420
pet that has one little foothold in the

00:25:27,050 --> 00:25:32,000
standard library but there are many

00:25:29,420 --> 00:25:34,520
other things maybe in a few years I'll

00:25:32,000 --> 00:25:39,650
get bored with type hints and I'll

00:25:34,520 --> 00:25:42,410
suddenly devote my time to multi-core

00:25:39,650 --> 00:25:44,510
support getting rid of the Gil I mean

00:25:42,410 --> 00:25:47,440
it's not a topic that will go away

00:25:44,510 --> 00:25:51,470
people are working on it

00:25:47,440 --> 00:25:53,500
maybe pipe I will take over they still

00:25:51,470 --> 00:25:57,590
have a bright future ahead of them

00:25:53,500 --> 00:26:00,080
maybe Python will will get a boost on

00:25:57,590 --> 00:26:03,080
mobile platforms there is now a mobile

00:26:00,080 --> 00:26:05,690
sig where people are discussing issues

00:26:03,080 --> 00:26:10,670
like cross compiling Python for Android

00:26:05,690 --> 00:26:14,060
and iOS and that may may sort of evolve

00:26:10,670 --> 00:26:16,490
into a real capability of doing Python

00:26:14,060 --> 00:26:18,440
development for mobile platforms which

00:26:16,490 --> 00:26:20,810
would be great because you could write

00:26:18,440 --> 00:26:24,880
your application once in Python and run

00:26:20,810 --> 00:26:28,250
it both on Windows Phone Android and iOS

00:26:24,880 --> 00:26:31,520
wouldn't that be wonderful there are

00:26:28,250 --> 00:26:32,690
also people and I consider these sort of

00:26:31,520 --> 00:26:36,070
the crazy lot but

00:26:32,690 --> 00:26:39,349
yet who knows Python in the browser

00:26:36,070 --> 00:26:41,899
there was a completely insane demo from

00:26:39,349 --> 00:26:44,539
someone who had done yet another Python

00:26:41,899 --> 00:26:47,450
in the browser implementation it was

00:26:44,539 --> 00:26:49,759
someone from Mozilla and I think that it

00:26:47,450 --> 00:26:52,700
involved rust somehow or maybe I'm

00:26:49,759 --> 00:26:56,210
mixing up two different talks but there

00:26:52,700 --> 00:26:58,729
there there there is some great

00:26:56,210 --> 00:27:00,590
experimental work going on in that area

00:26:58,729 --> 00:27:02,570
and I think they have an interactive

00:27:00,590 --> 00:27:05,419
prompt that can import two or three

00:27:02,570 --> 00:27:08,450
important standard library modules but

00:27:05,419 --> 00:27:15,349
nevertheless there may be something

00:27:08,450 --> 00:27:18,229
there but sort of it's up to you and and

00:27:15,349 --> 00:27:21,470
I also hope that the rest of this this

00:27:18,229 --> 00:27:23,899
we have half an hour left and I hope

00:27:21,470 --> 00:27:29,029
that you are going to come up with

00:27:23,899 --> 00:27:31,249
questions for me now and I don't see

00:27:29,029 --> 00:27:33,590
people running up to the front with

00:27:31,249 --> 00:27:36,529
their questions but we have I think we

00:27:33,590 --> 00:27:38,269
have someone with a microphone if you

00:27:36,529 --> 00:27:42,769
could bring the microphone to the front

00:27:38,269 --> 00:27:47,139
of the room and I was actually hoping to

00:27:42,769 --> 00:27:51,109
alternate questions from men and women

00:27:47,139 --> 00:27:55,340
is there some one of the female

00:27:51,109 --> 00:28:05,269
persuasion yes would you mind coming to

00:27:55,340 --> 00:28:08,200
the front I can have a Q&A queue yeah

00:28:05,269 --> 00:28:08,200
I'm the brave one

00:28:15,669 --> 00:28:22,279
so my question is could you give us more

00:28:19,879 --> 00:28:27,350
insight into the guild problem and how

00:28:22,279 --> 00:28:33,769
this issue is being addressed haha very

00:28:27,350 --> 00:28:36,429
good the guild problem so well how much

00:28:33,769 --> 00:28:36,429
time have you got

00:28:37,990 --> 00:28:46,850
long ago Python was single-threaded and

00:28:41,600 --> 00:28:52,580
everything was happy there was computers

00:28:46,850 --> 00:28:57,649
had only a single core at some point we

00:28:52,580 --> 00:29:00,350
added a threading facility but computers

00:28:57,649 --> 00:29:02,809
were still single core so what a thread

00:29:00,350 --> 00:29:05,749
did what multiple threads did was they

00:29:02,809 --> 00:29:09,320
would basically just share that single

00:29:05,749 --> 00:29:16,429
CPU between different threads of

00:29:09,320 --> 00:29:21,649
execution Python at least see Python and

00:29:16,429 --> 00:29:25,899
Gil is a C Python problem primarily it's

00:29:21,649 --> 00:29:29,840
implemented in C and if multiple threads

00:29:25,899 --> 00:29:33,950
were to access the same object from C

00:29:29,840 --> 00:29:38,299
code they would run into race conditions

00:29:33,950 --> 00:29:41,240
a race condition is where two threads

00:29:38,299 --> 00:29:46,190
try to update some shared piece of data

00:29:41,240 --> 00:29:49,249
and they sort of they get confused like

00:29:46,190 --> 00:29:51,769
you add one to a reference count and

00:29:49,249 --> 00:29:53,869
this is a real example suppose you have

00:29:51,769 --> 00:29:56,899
two threads that are both using the same

00:29:53,869 --> 00:29:58,549
object because C Python uses reference

00:29:56,899 --> 00:30:01,549
counting as the primary garbage

00:29:58,549 --> 00:30:03,740
collection mechanism they both want to

00:30:01,549 --> 00:30:05,690
increment the reference count so the way

00:30:03,740 --> 00:30:08,600
that is done is they read the reference

00:30:05,690 --> 00:30:11,840
count into a register add one to it and

00:30:08,600 --> 00:30:14,960
write it back so in in multi-threaded

00:30:11,840 --> 00:30:18,110
code if you didn't have the Gil two

00:30:14,960 --> 00:30:19,789
threads at the sea level could do the

00:30:18,110 --> 00:30:21,470
same thing they could both read the

00:30:19,789 --> 00:30:25,279
reference count suppose it starts out

00:30:21,470 --> 00:30:27,790
with 42 they both move that into a

00:30:25,279 --> 00:30:31,520
different register

00:30:27,790 --> 00:30:33,290
updated 243 and then right back 43 and

00:30:31,520 --> 00:30:35,059
so now the reference count which

00:30:33,290 --> 00:30:37,549
logically would have to be incremented

00:30:35,059 --> 00:30:42,309
by two is actually only incremented by

00:30:37,549 --> 00:30:44,750
one if there are no more race conditions

00:30:42,309 --> 00:30:46,730
eventually the object will have a

00:30:44,750 --> 00:30:49,130
reference count of zero while it

00:30:46,730 --> 00:30:51,470
actually ought to have a reference count

00:30:49,130 --> 00:30:55,910
of one at which point it will be

00:30:51,470 --> 00:30:58,100
prematurely freed and then the remaining

00:30:55,910 --> 00:30:59,990
thread that still has a reference to

00:30:58,100 --> 00:31:02,090
that object will continue to use an

00:30:59,990 --> 00:31:04,100
object but it's actually being freed and

00:31:02,090 --> 00:31:07,120
the memory has been reallocated to some

00:31:04,100 --> 00:31:12,500
other object and all hell breaks loose

00:31:07,120 --> 00:31:15,110
so in order to prevent this one solution

00:31:12,500 --> 00:31:17,270
could be every object has its own lock

00:31:15,110 --> 00:31:19,130
and in order to increment the reference

00:31:17,270 --> 00:31:21,410
count you first grab the lock for that

00:31:19,130 --> 00:31:23,299
object then you can safely increment the

00:31:21,410 --> 00:31:25,429
reference count then you release that

00:31:23,299 --> 00:31:27,530
lock or maybe you hold on to that lock

00:31:25,429 --> 00:31:31,400
as long as you are accessing other parts

00:31:27,530 --> 00:31:34,100
of the object that would require a lot

00:31:31,400 --> 00:31:36,980
of locks and a lot of locking operations

00:31:34,100 --> 00:31:41,179
and people have experimented with that

00:31:36,980 --> 00:31:44,350
approach and the problem is that if your

00:31:41,179 --> 00:31:47,120
program does not need multiple threads

00:31:44,350 --> 00:31:50,960
just locking the sort of the locking

00:31:47,120 --> 00:31:53,600
without other threads content contention

00:31:50,960 --> 00:31:55,700
for the same four locks because there

00:31:53,600 --> 00:31:57,770
are so many reference count operations

00:31:55,700 --> 00:32:00,890
and so many other situations where you

00:31:57,770 --> 00:32:03,470
need to keep the data locked or the

00:32:00,890 --> 00:32:05,390
object locked before you can do anything

00:32:03,470 --> 00:32:08,059
with it even read it because someone

00:32:05,390 --> 00:32:12,740
else might be right it might be writing

00:32:08,059 --> 00:32:16,010
in it it would slow you down like a

00:32:12,740 --> 00:32:20,000
factor of two so Python would be twice

00:32:16,010 --> 00:32:22,220
as slow just in order to be able to

00:32:20,000 --> 00:32:24,830
support multi-core and so you would

00:32:22,220 --> 00:32:29,980
start seeing benefits only when you use

00:32:24,830 --> 00:32:34,750
three or more cores in parallel also

00:32:29,980 --> 00:32:37,490
this would have been a very difficult

00:32:34,750 --> 00:32:40,389
architectural change to see Python and

00:32:37,490 --> 00:32:44,629
it would break all C extensions

00:32:40,389 --> 00:32:48,859
so rather than introducing per object

00:32:44,629 --> 00:32:51,350
locks we introduced a single lock that

00:32:48,859 --> 00:32:53,359
locks the intents essentially locks all

00:32:51,350 --> 00:32:56,629
objects together both their reference

00:32:53,359 --> 00:32:59,059
counts and their contents and that is

00:32:56,629 --> 00:33:00,950
the global interpreter lock which if you

00:32:59,059 --> 00:33:02,799
look in the code I'm not even sure that

00:33:00,950 --> 00:33:05,269
it's called global interpreter lock

00:33:02,799 --> 00:33:07,309
although by now there might be a comment

00:33:05,269 --> 00:33:09,830
saying this is the global interpreter

00:33:07,309 --> 00:33:12,950
lock because that the term was invented

00:33:09,830 --> 00:33:18,309
long after the concept was introduced in

00:33:12,950 --> 00:33:21,499
code base so the problem is that

00:33:18,309 --> 00:33:24,679
fast-forward 10 15 years from the

00:33:21,499 --> 00:33:27,830
introduction of the Gil now multiple

00:33:24,679 --> 00:33:32,570
cores are commonly present on even on

00:33:27,830 --> 00:33:35,049
laptops and people actually would like

00:33:32,570 --> 00:33:37,999
to be able to write multi-threaded code

00:33:35,049 --> 00:33:40,039
without having to resort to multiple

00:33:37,999 --> 00:33:42,710
processes currently using the multi

00:33:40,039 --> 00:33:44,690
processing module you can use multiple

00:33:42,710 --> 00:33:52,669
cores but there are certain costs

00:33:44,690 --> 00:33:56,869
involved like you may have to import all

00:33:52,669 --> 00:34:00,409
code in every process you have to

00:33:56,869 --> 00:34:02,929
serialize through pickling your objects

00:34:00,409 --> 00:34:05,629
so very large objects or very large

00:34:02,929 --> 00:34:08,389
trees of objects are inefficient to pass

00:34:05,629 --> 00:34:12,280
around back and forth and so multi

00:34:08,389 --> 00:34:15,349
processing is not a complete solution so

00:34:12,280 --> 00:34:18,109
people would like to see melt multiple

00:34:15,349 --> 00:34:20,960
threads supported in a way that doesn't

00:34:18,109 --> 00:34:22,990
require the Gil or maybe maybe we'll

00:34:20,960 --> 00:34:31,190
have to break down and do something like

00:34:22,990 --> 00:34:33,379
the per object locks we if you sort of

00:34:31,190 --> 00:34:35,690
if he could design a language from

00:34:33,379 --> 00:34:37,129
scratch that didn't need a Gil you would

00:34:35,690 --> 00:34:42,230
probably design a language without

00:34:37,129 --> 00:34:45,889
mutable objects or you sort of limit the

00:34:42,230 --> 00:34:48,379
mutability too much more sort of to a

00:34:45,889 --> 00:34:49,909
small number of specific object types

00:34:48,379 --> 00:34:52,250
rather than making pretty much

00:34:49,909 --> 00:34:53,450
everything mutable from modules to

00:34:52,250 --> 00:34:59,440
classes

00:34:53,450 --> 00:34:59,440
to instance us two dictionaries to lists

00:35:00,460 --> 00:35:06,920
you're taking the words right out of my

00:35:03,050 --> 00:35:09,619
mouth so we have to find a compromise

00:35:06,920 --> 00:35:11,480
like like almost everything in life in

00:35:09,619 --> 00:35:17,030
my experience at least it involves

00:35:11,480 --> 00:35:18,950
compromises and we have some exceedingly

00:35:17,030 --> 00:35:23,270
clever people who have been thinking

00:35:18,950 --> 00:35:27,980
about this for a long time and exploring

00:35:23,270 --> 00:35:29,900
different different ideas like Armin

00:35:27,980 --> 00:35:32,420
Rico is working on software

00:35:29,900 --> 00:35:34,869
transactional memory probably has been

00:35:32,420 --> 00:35:39,170
working on it for five or ten years

00:35:34,869 --> 00:35:41,240
there's also a guy Trent Nelson who

00:35:39,170 --> 00:35:44,690
currently works for continuum analytics

00:35:41,240 --> 00:35:47,900
who apparently also has a brain the size

00:35:44,690 --> 00:35:50,380
of a planet because he managed to at

00:35:47,900 --> 00:35:54,290
least on Windows only on Windows

00:35:50,380 --> 00:35:56,690
introduced changes to the reference

00:35:54,290 --> 00:35:59,770
counting macros in Python and changes to

00:35:56,690 --> 00:36:05,109
the interpreter that make guilt-free

00:35:59,770 --> 00:36:09,740
execution possible in limited situations

00:36:05,109 --> 00:36:12,290
so hopefully something will will

00:36:09,740 --> 00:36:15,230
eventually happen there and there are

00:36:12,290 --> 00:36:18,170
other people who are threatening to sort

00:36:15,230 --> 00:36:20,930
of bang their head against this

00:36:18,170 --> 00:36:23,420
particular wall until it breaks and I I

00:36:20,930 --> 00:36:26,770
expect that eventually will we'll have

00:36:23,420 --> 00:36:31,310
something breaking through that wall but

00:36:26,770 --> 00:36:35,060
it's gonna be a while if you have ideas

00:36:31,310 --> 00:36:37,160
about this without chain without just

00:36:35,060 --> 00:36:42,200
redesigning the language so it would not

00:36:37,160 --> 00:36:45,040
be Python I'm all ears and I'm all the

00:36:42,200 --> 00:36:45,040
years for the next question

00:36:51,319 --> 00:36:57,859
you can start queuing if you have high

00:36:58,069 --> 00:37:03,869
are yourself using pi PI I mean do you

00:37:00,930 --> 00:37:06,569
like the JIT do like the SDM and maybe

00:37:03,869 --> 00:37:14,880
in the future do you see the pi PI being

00:37:06,569 --> 00:37:25,470
the default interpreter thanks so how do

00:37:14,880 --> 00:37:29,369
I see the future of pi pi try again if

00:37:25,470 --> 00:37:31,739
you yourself are using bye-bye and how

00:37:29,369 --> 00:37:34,369
do you like this the features of JIT the

00:37:31,739 --> 00:37:37,730
features of my PI like jet and SDM and

00:37:34,369 --> 00:37:41,029
if you see pi PI that it could become

00:37:37,730 --> 00:37:47,359
the default interpreter for my tongue

00:37:41,029 --> 00:37:47,359
okay I am NOT myself using pi PI

00:37:49,279 --> 00:37:55,470
it just doesn't naturally come up I have

00:37:52,950 --> 00:37:58,619
occasionally downloaded it and played

00:37:55,470 --> 00:38:04,140
with it for a few seconds and I'm happy

00:37:58,619 --> 00:38:07,049
with what I see but I sort of I have two

00:38:04,140 --> 00:38:11,819
basic modes in which I use PI for myself

00:38:07,049 --> 00:38:15,890
and one is I write like very short

00:38:11,819 --> 00:38:19,529
scripts to solve a very simple problem

00:38:15,890 --> 00:38:22,079
almost more like a demo and I have no

00:38:19,529 --> 00:38:24,599
reason not to use just the Python that

00:38:22,079 --> 00:38:26,700
I've already built from the C Python

00:38:24,599 --> 00:38:29,809
sources that I always have in for

00:38:26,700 --> 00:38:29,809
versions in my home directory

00:38:29,930 --> 00:38:38,519
the other mode in which I use Python is

00:38:34,319 --> 00:38:41,579
as a Dropbox engineer and we deploy code

00:38:38,519 --> 00:38:44,700
to the Dropbox production cluster which

00:38:41,579 --> 00:38:47,269
runs a specially modified version of

00:38:44,700 --> 00:38:47,269
Python 2.7

00:38:47,880 --> 00:39:00,059
all right yes I said it it's not a

00:38:53,250 --> 00:39:03,329
secret there are actually at Dropbox I

00:39:00,059 --> 00:39:07,109
believe there is one small service that

00:39:03,329 --> 00:39:09,480
does use by PI because it is faster all

00:39:07,109 --> 00:39:11,940
the rest of Dropbox does not use Python

00:39:09,480 --> 00:39:15,539
does not use PI pi because it is not

00:39:11,940 --> 00:39:21,329
sufficiently compatible or perhaps

00:39:15,539 --> 00:39:24,000
because we we would be worried that

00:39:21,329 --> 00:39:26,430
there would be a hidden incompatibility

00:39:24,000 --> 00:39:29,609
somewhere that would break our

00:39:26,430 --> 00:39:32,220
production in a very subtle way and we

00:39:29,609 --> 00:39:37,529
have enough of that without having to

00:39:32,220 --> 00:39:42,569
blame the language nevertheless what do

00:39:37,529 --> 00:39:47,730
I think of pi PI and the features it

00:39:42,569 --> 00:39:51,930
provides I think that pi PI is a very

00:39:47,730 --> 00:39:52,940
good tool in in the fight against

00:39:51,930 --> 00:39:57,240
complacency

00:39:52,940 --> 00:40:00,599
pi PI shows that you can execute Python

00:39:57,240 --> 00:40:03,930
code faster than C Python does pi PI

00:40:00,599 --> 00:40:10,460
shows that sort of pi PI provides a

00:40:03,930 --> 00:40:10,460
testbed for interesting ideas like STM

00:40:11,960 --> 00:40:19,680
if you if you look at where pi PI is

00:40:16,740 --> 00:40:23,910
actually used that's sort of at a large

00:40:19,680 --> 00:40:25,619
scale you would actually have to ask the

00:40:23,910 --> 00:40:28,289
pi PI developers I believe they are

00:40:25,619 --> 00:40:35,460
talking they're giving a talk sometime

00:40:28,289 --> 00:40:40,200
at this conference my hunch is that the

00:40:35,460 --> 00:40:43,500
sort of conservative stance is to not

00:40:40,200 --> 00:40:46,890
use pi PI unless you have a proven need

00:40:43,500 --> 00:40:52,549
for the extra speed unfortunately that

00:40:46,890 --> 00:40:55,380
sort of that that is a self-defeating

00:40:52,549 --> 00:40:58,289
principle because by the time you know

00:40:55,380 --> 00:41:01,710
that you would have benefited from the

00:40:58,289 --> 00:41:07,320
extra speed you've probably already

00:41:01,710 --> 00:41:10,230
- enough different servers that it would

00:41:07,320 --> 00:41:13,800
be a major engineering task to switch

00:41:10,230 --> 00:41:16,830
and again just like people don't like to

00:41:13,800 --> 00:41:19,339
have to spend engineering time take it

00:41:16,830 --> 00:41:22,250
away from feature development or

00:41:19,339 --> 00:41:25,380
application bug fixing and put it into

00:41:22,250 --> 00:41:27,390
porting to Python 3 they also don't like

00:41:25,380 --> 00:41:30,119
to take put that effort into testing

00:41:27,390 --> 00:41:31,920
with pi pi and there are real

00:41:30,119 --> 00:41:34,470
limitations to pi PI

00:41:31,920 --> 00:41:36,150
in a typical deployment like a Dropbox

00:41:34,470 --> 00:41:39,089
we have hundreds of third-party

00:41:36,150 --> 00:41:44,010
dependencies some of which are very old

00:41:39,089 --> 00:41:47,220
I think one or two of which we only have

00:41:44,010 --> 00:41:49,950
a binary four or at least we we have

00:41:47,220 --> 00:41:51,869
lost the art of exactly how to produce

00:41:49,950 --> 00:41:57,900
that binary from the sources that we

00:41:51,869 --> 00:42:00,089
also have that mean this these are just

00:41:57,900 --> 00:42:02,910
I mean if you ask anybody who has a

00:42:00,089 --> 00:42:05,490
million or more lines of Python code the

00:42:02,910 --> 00:42:09,570
stories are the same that mean that

00:42:05,490 --> 00:42:11,790
that's I'm just I mean a few years ago I

00:42:09,570 --> 00:42:13,920
would have been able to to sort of tell

00:42:11,790 --> 00:42:17,160
you similar stories about Python usage

00:42:13,920 --> 00:42:21,080
at Google I no longer work there so I'm

00:42:17,160 --> 00:42:24,240
I'm not telling but I still know what

00:42:21,080 --> 00:42:32,609
the situation there was like a few years

00:42:24,240 --> 00:42:36,780
ago maybe pi PI needs a better marketing

00:42:32,609 --> 00:42:44,430
team maybe they need to hire Allah and

00:42:36,780 --> 00:42:49,619
Allah brand specialists to improve their

00:42:44,430 --> 00:42:53,820
they're sort of the the perceived

00:42:49,619 --> 00:42:57,750
quality of the brand yes pi PI is really

00:42:53,820 --> 00:43:00,119
cool project but there are all these

00:42:57,750 --> 00:43:03,780
sort of check boxes that are hard to

00:43:00,119 --> 00:43:06,180
check off that make it easy to say well

00:43:03,780 --> 00:43:09,800
we'll go with with the tried and trusted

00:43:06,180 --> 00:43:09,800
Python C Python 2.7

00:43:19,010 --> 00:43:25,260
hello instead of asking one long

00:43:23,130 --> 00:43:27,960
question I'd like to ask five short

00:43:25,260 --> 00:43:37,110
questions so they just need one-word

00:43:27,960 --> 00:43:39,480
answers okay so the first one was what

00:43:37,110 --> 00:43:41,040
is your favorite web framework what is

00:43:39,480 --> 00:43:43,950
my favorite web server

00:43:41,040 --> 00:43:48,690
framework oh my sorry my favorite web

00:43:43,950 --> 00:43:51,510
framework well I I only ever write one

00:43:48,690 --> 00:43:54,240
web app in any framework and then I

00:43:51,510 --> 00:43:57,600
don't have an opportunity to write web

00:43:54,240 --> 00:44:02,190
stuff for a long time and then when I

00:43:57,600 --> 00:44:04,920
have to do some more web stuff there is

00:44:02,190 --> 00:44:09,180
a new framework I think the latest one

00:44:04,920 --> 00:44:12,110
I've tried was flask and I don't know if

00:44:09,180 --> 00:44:15,660
it's my favorite but it's cool okay and

00:44:12,110 --> 00:44:19,170
what is your favorite testing library my

00:44:15,660 --> 00:44:22,220
favorite testing library is mostly just

00:44:19,170 --> 00:44:25,140
the standard library unit test and mock

00:44:22,220 --> 00:44:28,260
in Python 3 those are all especially

00:44:25,140 --> 00:44:30,690
mocking it's very good in Python 3 in

00:44:28,260 --> 00:44:33,330
the standard library and what is your

00:44:30,690 --> 00:44:36,110
favorite text editor my favorite text

00:44:33,330 --> 00:44:36,110
editor is Emacs

00:44:39,859 --> 00:44:44,440
but if you'll allow me there is a funny

00:44:42,200 --> 00:44:55,630
story here which is that they also

00:44:44,440 --> 00:44:59,380
occasionally use VI or vim and for for

00:44:55,630 --> 00:45:02,390
historical reasons because I I used vim

00:44:59,380 --> 00:45:06,529
30 years ago before I was introduced to

00:45:02,390 --> 00:45:07,549
Emacs and switched when I use vim for

00:45:06,529 --> 00:45:11,720
five minutes

00:45:07,549 --> 00:45:16,029
it takes me 15 minutes to get used back

00:45:11,720 --> 00:45:16,029
to Emacs after I switch back to me max

00:45:18,249 --> 00:45:27,259
what is your favorite language besides

00:45:21,019 --> 00:45:35,269
Python oh I used to say C but that's

00:45:27,259 --> 00:45:38,119
kind of boring I have it from from

00:45:35,269 --> 00:45:41,890
people I trust very much that the modern

00:45:38,119 --> 00:45:45,140
C++ is actually a really good language

00:45:41,890 --> 00:45:48,140
with like the type inferencing and

00:45:45,140 --> 00:45:52,130
lambdas and smart pointers and I've

00:45:48,140 --> 00:45:54,019
dabbled a little bit in that and I found

00:45:52,130 --> 00:46:02,650
it certainly much more pleasant than old

00:45:54,019 --> 00:46:05,029
C++ like I remembered I quite liked go

00:46:02,650 --> 00:46:09,339
although I have never never actually

00:46:05,029 --> 00:46:09,339
written anything significant in it and

00:46:09,910 --> 00:46:15,319
again mostly from looking at it and

00:46:13,369 --> 00:46:16,430
talking to the designers a little bit I

00:46:15,319 --> 00:46:19,069
really like Swift

00:46:16,430 --> 00:46:22,880
I think Swift is a well-designed

00:46:19,069 --> 00:46:24,950
language using sort of steel steel

00:46:22,880 --> 00:46:30,019
features from other languages that you

00:46:24,950 --> 00:46:32,720
like which is really flattery and so

00:46:30,019 --> 00:46:37,640
they stole quite a bit from Python but

00:46:32,720 --> 00:46:40,609
they also managed to sort of make the

00:46:37,640 --> 00:46:42,499
Swift the language quite coherent you'd

00:46:40,609 --> 00:46:44,509
see it's easy to sort of come up with a

00:46:42,499 --> 00:46:46,339
language that steals the wrong features

00:46:44,509 --> 00:46:49,220
from all different languages and you end

00:46:46,339 --> 00:46:52,190
up with this this horrible Frankenstein

00:46:49,220 --> 00:46:53,610
monster of a language but Swift is the

00:46:52,190 --> 00:46:56,220
opposite thing

00:46:53,610 --> 00:46:58,530
they combined it all they're only stole

00:46:56,220 --> 00:47:01,110
stuff that fit well with their core

00:46:58,530 --> 00:47:04,110
design principles its swift open sourced

00:47:01,110 --> 00:47:06,750
oh I've heard that it has recently been

00:47:04,110 --> 00:47:09,270
open sourced I don't know how many teeth

00:47:06,750 --> 00:47:12,720
that announcement really has it could be

00:47:09,270 --> 00:47:14,880
that there is a real compiler that is

00:47:12,720 --> 00:47:18,180
not open source that is Apple optimized

00:47:14,880 --> 00:47:20,400
or there's all sorts of reasons why open

00:47:18,180 --> 00:47:23,520
sourcing is not always the same as open

00:47:20,400 --> 00:47:27,690
sourcing yeah okay and the last question

00:47:23,520 --> 00:47:33,720
is what is your favorite exception what

00:47:27,690 --> 00:47:36,170
is my favorite exception keyboard

00:47:33,720 --> 00:47:36,170
interrupt

00:47:50,440 --> 00:47:58,070
we have ten minutes I would like to hear

00:47:55,370 --> 00:48:00,400
your comments on the vitality of the

00:47:58,070 --> 00:48:04,490
planning community compared to other

00:48:00,400 --> 00:48:08,690
language communities how are we doing

00:48:04,490 --> 00:48:12,070
when it comes to general acceptance how

00:48:08,690 --> 00:48:18,560
are we doing when it comes to innovation

00:48:12,070 --> 00:48:21,320
in the language oh I'm like the worst

00:48:18,560 --> 00:48:23,360
person to ask to compare the Python

00:48:21,320 --> 00:48:27,440
community to other language communities

00:48:23,360 --> 00:48:29,750
because I'm like totally at the the

00:48:27,440 --> 00:48:33,260
center of the Python community where

00:48:29,750 --> 00:48:36,800
everything seems hunky-dory and firing

00:48:33,260 --> 00:48:39,860
on all five cylinders and sort of new

00:48:36,800 --> 00:48:42,140
stuff is always coming along and and I

00:48:39,860 --> 00:48:48,230
see lots of women in the audience much

00:48:42,140 --> 00:48:52,430
more than five years ago I believe so I

00:48:48,230 --> 00:48:58,010
I see our community as incredibly vital

00:48:52,430 --> 00:48:59,510
and and growing and and successful and I

00:48:58,010 --> 00:49:03,440
see the language as being very

00:48:59,510 --> 00:49:07,010
successful of course you someone who

00:49:03,440 --> 00:49:10,370
happens to be a big Java nut and who has

00:49:07,010 --> 00:49:12,950
been doing Java work for 25 years might

00:49:10,370 --> 00:49:15,530
perceive the Java community as exactly

00:49:12,950 --> 00:49:17,960
that and sort of at the periphery see

00:49:15,530 --> 00:49:20,900
this little Python thing that never will

00:49:17,960 --> 00:49:27,530
amount to anything so I I don't know how

00:49:20,900 --> 00:49:29,840
to compare I sort of I can easily name

00:49:27,530 --> 00:49:31,970
two language communities that when I

00:49:29,840 --> 00:49:36,880
started with Python were much more

00:49:31,970 --> 00:49:41,950
vibrant and have now sort of dwindled

00:49:36,880 --> 00:49:45,830
dramatically a Perl and tickle TK both

00:49:41,950 --> 00:49:49,400
in in 95 I went to a scripting language

00:49:45,830 --> 00:49:51,470
conference and I met Larry wall and john

00:49:49,400 --> 00:49:54,100
ousterhout and a few other people who

00:49:51,470 --> 00:49:57,470
had done script English Finnish

00:49:54,100 --> 00:49:59,810
scripting languages things

00:49:57,470 --> 00:50:02,089
and I was really looking up because

00:49:59,810 --> 00:50:03,710
pearl was like everywhere

00:50:02,089 --> 00:50:07,070
super-successful

00:50:03,710 --> 00:50:09,140
O'Reilly was running pearl conferences

00:50:07,070 --> 00:50:11,839
that had thousands of attendees or at

00:50:09,140 --> 00:50:14,839
least that's what it felt like

00:50:11,839 --> 00:50:17,690
tickle TK was clearly number two in that

00:50:14,839 --> 00:50:21,770
space and Python was just a sort of

00:50:17,690 --> 00:50:24,740
up-and-coming little guy who still had

00:50:21,770 --> 00:50:26,990
to prove themselves and had this big

00:50:24,740 --> 00:50:33,140
disadvantage of the crazy white page

00:50:26,990 --> 00:50:36,859
space and focusing more on sort of

00:50:33,140 --> 00:50:40,310
elegance than on being able to really

00:50:36,859 --> 00:50:46,430
quickly whip up the most crazy script in

00:50:40,310 --> 00:50:49,250
one line and somehow tickle TK pretty

00:50:46,430 --> 00:50:52,040
much got destroyed one after how decided

00:50:49,250 --> 00:50:57,349
that he no longer wanted to lead that

00:50:52,040 --> 00:51:00,020
community it's my feeling and pearl I

00:50:57,349 --> 00:51:04,790
think was severely damaged by the Pearl

00:51:00,020 --> 00:51:07,480
5 versus pearl six rift and that sort of

00:51:04,790 --> 00:51:10,280
even when I started with Python 3 I

00:51:07,480 --> 00:51:12,680
could see that happening in the Pearl

00:51:10,280 --> 00:51:16,700
six world and I wanted Python 3 to be

00:51:12,680 --> 00:51:18,589
much closer to PI 4 to now you could

00:51:16,700 --> 00:51:21,349
argue that looking back I still didn't

00:51:18,589 --> 00:51:23,599
know what I was doing but they still

00:51:21,349 --> 00:51:28,010
think that as a community were strong

00:51:23,599 --> 00:51:34,490
and so but maybe comparing us to pearl

00:51:28,010 --> 00:51:37,250
and tickle is easy ruby is a very very

00:51:34,490 --> 00:51:40,400
sort of happy community I believe much

00:51:37,250 --> 00:51:45,619
smaller than Python but I don't really

00:51:40,400 --> 00:51:51,339
know any numbers yeah there are sort of

00:51:45,619 --> 00:51:56,270
big languages with lots of followers PHP

00:51:51,339 --> 00:51:59,869
JavaScript that I'm sure are pretty

00:51:56,270 --> 00:52:03,950
happy but

00:51:59,869 --> 00:52:06,440
I know I mean at every Python conference

00:52:03,950 --> 00:52:09,890
there are always plenty of talks that

00:52:06,440 --> 00:52:11,869
explain in much detail something cool

00:52:09,890 --> 00:52:14,029
about JavaScript for example because you

00:52:11,869 --> 00:52:25,700
can't get very far with Python without

00:52:14,029 --> 00:52:28,339
doing JavaScript hi so this might be a

00:52:25,700 --> 00:52:30,529
bit like the power of 5 & 6 thing but

00:52:28,339 --> 00:52:33,799
are there any circumstances where you

00:52:30,529 --> 00:52:35,900
will accept breaking the C API of Python

00:52:33,799 --> 00:52:38,599
modules that you would actually consider

00:52:35,900 --> 00:52:42,220
it worthwhile to have people do the

00:52:38,599 --> 00:52:42,220
migration work to something new

00:52:43,099 --> 00:52:49,339
breaking the C API well there there are

00:52:46,880 --> 00:52:53,180
sort of two different ways of breaking

00:52:49,339 --> 00:52:56,720
it there is an ABI which is a limited

00:52:53,180 --> 00:53:00,349
set of C api's where we strive for

00:52:56,720 --> 00:53:04,210
binary compatibility so a binary

00:53:00,349 --> 00:53:07,640
extension module compiled for Python 3.4

00:53:04,210 --> 00:53:10,519
should work with 3.5 and actually

00:53:07,640 --> 00:53:16,849
there's quite a wide range but you have

00:53:10,519 --> 00:53:21,079
to sort of limit yourself to a sizable

00:53:16,849 --> 00:53:24,739
but but still limited subset of the C

00:53:21,079 --> 00:53:28,190
API on the other side of the spectrum

00:53:24,739 --> 00:53:32,630
you could argue that we're not really

00:53:28,190 --> 00:53:35,180
breaking the C API when we just change

00:53:32,630 --> 00:53:42,799
what the macros do and people who

00:53:35,180 --> 00:53:46,220
experiment with say Gil free coding

00:53:42,799 --> 00:53:49,730
often redefine the reference counting

00:53:46,220 --> 00:53:53,960
macros to do something else either sort

00:53:49,730 --> 00:53:55,880
of implicitly acquire lock or they turn

00:53:53,960 --> 00:53:59,239
them into no ops because everything is

00:53:55,880 --> 00:54:04,819
garbage collected any way or they invoke

00:53:59,239 --> 00:54:08,140
special platform dependent atomic

00:54:04,819 --> 00:54:10,640
increment and decrement instructions

00:54:08,140 --> 00:54:13,000
which means that you would have to

00:54:10,640 --> 00:54:17,520
recompile C extensions

00:54:13,000 --> 00:54:20,500
in order for them to work but that still

00:54:17,520 --> 00:54:23,950
arguably is within the bounds of the

00:54:20,500 --> 00:54:35,290
capi although not within the bounds of

00:54:23,950 --> 00:54:40,740
the the ABI compatibility beyond that we

00:54:35,290 --> 00:54:46,030
we have occasionally I believe changed

00:54:40,740 --> 00:54:49,410
api's where we found that the signature

00:54:46,030 --> 00:54:52,480
was just wrong we've but but we've

00:54:49,410 --> 00:54:55,260
almost always we've introduced a new

00:54:52,480 --> 00:54:58,270
function with the correct signature and

00:54:55,260 --> 00:55:01,510
map the old function to something that

00:54:58,270 --> 00:55:05,530
was backward compatible so we do take

00:55:01,510 --> 00:55:08,890
this pretty seriously and so the thing

00:55:05,530 --> 00:55:11,140
is that for so many people python is

00:55:08,890 --> 00:55:13,589
just a glue language that is used to

00:55:11,140 --> 00:55:17,680
glue various extension modules together

00:55:13,589 --> 00:55:21,400
that if you break the ability of using

00:55:17,680 --> 00:55:25,710
of using extension modules albeit maybe

00:55:21,400 --> 00:55:25,710
a requiring recompilation of everything

00:55:26,849 --> 00:55:34,450
pythons reason for existence would would

00:55:30,369 --> 00:55:37,150
disappear which which is unfortunately

00:55:34,450 --> 00:55:40,200
also part of the story of the difficulty

00:55:37,150 --> 00:55:43,780
for pi PI acceptance because by PI

00:55:40,200 --> 00:55:47,470
typically has a very different sort of

00:55:43,780 --> 00:55:51,420
natural API to talk to its objects from

00:55:47,470 --> 00:55:51,420
C code or C++ code

00:55:55,270 --> 00:56:08,260
last question hi I have a short question

00:56:01,210 --> 00:56:13,600
what things you hate about Python what

00:56:08,260 --> 00:56:19,530
things do I hate about Python anything

00:56:13,600 --> 00:56:19,530
having to do with package distribution

00:56:20,250 --> 00:56:29,740
version sort of version skew version

00:56:26,470 --> 00:56:36,880
dependencies that that is just such an

00:56:29,740 --> 00:56:40,540
endless mess I dread it whenever someone

00:56:36,880 --> 00:56:42,880
at the company where I work says can I

00:56:40,540 --> 00:56:45,940
ask you a simple Python question because

00:56:42,880 --> 00:56:49,000
almost invariable well let's say 50

00:56:45,940 --> 00:56:50,980
percent of the cases it's not a bifel

00:56:49,000 --> 00:56:54,600
question at all but they've got some

00:56:50,980 --> 00:57:00,450
kind of mess with the import path

00:56:54,600 --> 00:57:00,450
there's just there's just no easy answer

00:57:00,869 --> 00:57:08,980
so those that that's sort of the general

00:57:03,760 --> 00:57:13,140
area of Python that I hate so out of

00:57:08,980 --> 00:57:16,510
time sorry ok yeah we're out of time no

00:57:13,140 --> 00:57:19,560
no time for other questions so thank you

00:57:16,510 --> 00:57:19,560
we do very much for

00:57:49,109 --> 00:57:55,539
and we have a very important thing now

00:57:52,930 --> 00:58:00,819
we wanted to thank widow for coming in

00:57:55,539 --> 00:58:04,029
all the key notice so from annotation we

00:58:00,819 --> 00:58:06,910
want to walk a leader on all the

00:58:04,029 --> 00:58:10,749
keynotes so we want to give him present

00:58:06,910 --> 00:58:16,439
ability because present before God just

00:58:10,749 --> 00:58:19,059
try to give to the less here they are

00:58:16,439 --> 00:58:24,660
seen as from a stream you know taken

00:58:19,059 --> 00:58:24,660
came together

00:58:53,980 --> 00:59:04,660
thank you again thank you guys

00:58:59,349 --> 00:59:11,089
wow so now we're having coffee break

00:59:04,660 --> 00:59:14,650
just another reminder don't bring food

00:59:11,089 --> 00:59:14,650

YouTube URL: https://www.youtube.com/watch?v=bp3mCgrdMxU


