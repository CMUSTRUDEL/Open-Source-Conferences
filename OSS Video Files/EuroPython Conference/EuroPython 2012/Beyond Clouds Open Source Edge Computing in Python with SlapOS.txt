Title: Beyond Clouds Open Source Edge Computing in Python with SlapOS
Publication date: 2015-04-19
Playlist: EuroPython 2012
Description: 
	[EuroPython 2012] Jean Paul Smets - 6 JULY 2012 "Track Lasagne"
Captions: 
	00:01:30,650 --> 00:01:38,220
okay okay so the first of all this the

00:01:36,030 --> 00:01:41,280
afternoon will be from a jump-off nuts

00:01:38,220 --> 00:01:43,619
the founder of next ID and will be about

00:01:41,280 --> 00:01:53,759
open sewage computing it's called be on

00:01:43,619 --> 00:01:56,009
clouds hi so thank you so I'll prepared

00:01:53,759 --> 00:01:58,979
a short presentation I didn't have much

00:01:56,009 --> 00:02:02,570
time but still it will be sexy and there

00:01:58,979 --> 00:02:05,220
will be animation as it says in the

00:02:02,570 --> 00:02:07,740
similar you got on the website but maybe

00:02:05,220 --> 00:02:09,720
some parts are missing and after the

00:02:07,740 --> 00:02:14,040
presentation what I hope you will

00:02:09,720 --> 00:02:16,260
remember is that first the vision of

00:02:14,040 --> 00:02:18,930
cloud that we might have that cloud is

00:02:16,260 --> 00:02:21,900
about something about servers of virtual

00:02:18,930 --> 00:02:26,160
machines in data center is completely

00:02:21,900 --> 00:02:27,989
outdated already that second thing is

00:02:26,160 --> 00:02:31,080
that it's actually extremely easy to

00:02:27,989 --> 00:02:34,799
build your own cloud if you know how to

00:02:31,080 --> 00:02:36,810
implement an ERP then you don't need

00:02:34,799 --> 00:02:38,940
more than an ERP to make your own cloud

00:02:36,810 --> 00:02:41,190
and if you don't know how to implement

00:02:38,940 --> 00:02:45,720
in Europe en e way you cannot implement

00:02:41,190 --> 00:02:47,940
your own cloud so some people try to

00:02:45,720 --> 00:02:50,400
implement the cloud in a more complex

00:02:47,940 --> 00:02:52,380
way than implementing an ERP will show

00:02:50,400 --> 00:02:54,329
you that you only need to know how to

00:02:52,380 --> 00:02:57,060
implement an ERP to implement your own

00:02:54,329 --> 00:03:01,140
cloud and only two software are needed

00:02:57,060 --> 00:03:04,200
and the third thing I would like you to

00:03:01,140 --> 00:03:06,269
remember is that in the future the main

00:03:04,200 --> 00:03:10,140
issue will have with cloud is the

00:03:06,269 --> 00:03:12,390
problem of resiliency every week we get

00:03:10,140 --> 00:03:16,049
more and more news about people losing

00:03:12,390 --> 00:03:18,000
their data losing what is required to

00:03:16,049 --> 00:03:20,459
run their business because they put it

00:03:18,000 --> 00:03:23,970
on the cloud and the data has been lost

00:03:20,459 --> 00:03:27,480
forever and just two weeks ago that was

00:03:23,970 --> 00:03:29,549
for companies in Japan I think yesterday

00:03:27,480 --> 00:03:32,640
before yesterday they were issues with

00:03:29,549 --> 00:03:35,870
Salesforce it will just increase like

00:03:32,640 --> 00:03:38,400
when the aerospace and civil aviation

00:03:35,870 --> 00:03:39,740
started after some time there were more

00:03:38,400 --> 00:03:44,520
and more casualty

00:03:39,740 --> 00:03:47,340
and so how can we solve that so next

00:03:44,520 --> 00:03:51,270
Eddie we make our money by implementing

00:03:47,340 --> 00:03:54,870
ERP five in large corporations ERP five

00:03:51,270 --> 00:03:58,590
is a probably one of the first open

00:03:54,870 --> 00:04:01,110
source ERP it's very innovative and it

00:03:58,590 --> 00:04:04,140
is used so most of our customers first

00:04:01,110 --> 00:04:07,410
implemented or tried to implement Oracle

00:04:04,140 --> 00:04:10,200
OSAP then they failed they had little

00:04:07,410 --> 00:04:15,860
budget then they come to us and then it

00:04:10,200 --> 00:04:18,930
works and because in the EOP market

00:04:15,860 --> 00:04:23,160
fifty percent in European plement ation

00:04:18,930 --> 00:04:25,430
fail then well we have much more

00:04:23,160 --> 00:04:28,710
prospects and customers than we can

00:04:25,430 --> 00:04:32,850
serve in reality too it's a great market

00:04:28,710 --> 00:04:35,280
it's infinite it's proportional to the

00:04:32,850 --> 00:04:38,070
over complexity found in large companies

00:04:35,280 --> 00:04:42,180
which tends not to decrease with time

00:04:38,070 --> 00:04:45,150
and new regulations the second product

00:04:42,180 --> 00:04:48,000
we sell is a slab OS a decentralized

00:04:45,150 --> 00:04:50,610
cloud operating system our first

00:04:48,000 --> 00:04:53,640
prospects for slackers our governments

00:04:50,610 --> 00:04:59,390
who lack a bit money so they can

00:04:53,640 --> 00:05:02,400
purchase the nice enc vmware cisco etc

00:04:59,390 --> 00:05:05,280
sovereign cloud then we have an offer

00:05:02,400 --> 00:05:10,440
where we provide cloud to governments

00:05:05,280 --> 00:05:17,630
for one euro civil seven per year then

00:05:10,440 --> 00:05:25,620
we have a few people interested yep ah

00:05:17,630 --> 00:05:28,020
yeah absolutely congratulations but if

00:05:25,620 --> 00:05:32,130
they are too big we are too cheap for

00:05:28,020 --> 00:05:34,290
them so there is a kind of balance then

00:05:32,130 --> 00:05:36,720
the last product is called office jes

00:05:34,290 --> 00:05:39,210
it's a JavaScript framework which is

00:05:36,720 --> 00:05:42,000
being developed to create an alternative

00:05:39,210 --> 00:05:44,940
to Google Docs fully open source and

00:05:42,000 --> 00:05:46,980
which runs without a server will see at

00:05:44,940 --> 00:05:49,290
the end why it is important because

00:05:46,980 --> 00:05:50,449
nowadays many people think about clouds

00:05:49,290 --> 00:05:53,629
and servers

00:05:50,449 --> 00:05:55,939
on the cloud but at the same time ninety

00:05:53,629 --> 00:05:58,219
percent applications could be developed

00:05:55,939 --> 00:06:03,740
without a server which means without

00:05:58,219 --> 00:06:08,509
cloud so if cloud was after all already

00:06:03,740 --> 00:06:11,020
outdated itself we might wander so first

00:06:08,509 --> 00:06:14,240
the plan will be first I'll talk about

00:06:11,020 --> 00:06:16,789
various technologies which exist in the

00:06:14,240 --> 00:06:20,180
Python world to build your own cloud and

00:06:16,789 --> 00:06:22,069
we'll see that a majority of open-source

00:06:20,180 --> 00:06:25,490
technologies for cloud are written in

00:06:22,069 --> 00:06:27,949
Python I'll introduce then what is edge

00:06:25,490 --> 00:06:31,580
computing so you've heard maybe air

00:06:27,949 --> 00:06:34,729
computing sky computing edge computing

00:06:31,580 --> 00:06:36,680
grid computing whatever computing there

00:06:34,729 --> 00:06:38,990
will always be a new whatever computing

00:06:36,680 --> 00:06:41,870
every year to generate more sales for

00:06:38,990 --> 00:06:45,259
companies but edge computing is

00:06:41,870 --> 00:06:47,419
interesting because it is based on the

00:06:45,259 --> 00:06:50,569
idea that the servers are no longer in

00:06:47,419 --> 00:06:53,240
the data center centralized 4,000

00:06:50,569 --> 00:06:56,180
kilometers away from home but located

00:06:53,240 --> 00:06:59,719
next to the optical fiber concentrator

00:06:56,180 --> 00:07:01,639
one mile away from your home and we'll

00:06:59,719 --> 00:07:03,439
see that leaders in the web industry

00:07:01,639 --> 00:07:06,740
heavily rely on such type of

00:07:03,439 --> 00:07:08,719
architecture then i'll show you how slap

00:07:06,740 --> 00:07:11,689
OS works and how implement edge

00:07:08,719 --> 00:07:14,449
computing wisla perez give you a short

00:07:11,689 --> 00:07:17,029
demo of slab runner which is a web-based

00:07:14,449 --> 00:07:19,969
tool where we can develop applications

00:07:17,029 --> 00:07:22,430
which they're not deployed with lap OS

00:07:19,969 --> 00:07:28,819
and i'll talk to you about our future

00:07:22,430 --> 00:07:31,399
directions so first we need a definition

00:07:28,819 --> 00:07:33,409
of cloud i have at least one which

00:07:31,399 --> 00:07:36,800
doesn't change every year is the

00:07:33,409 --> 00:07:39,589
automation of IT service delivery it's

00:07:36,800 --> 00:07:43,490
very short basically you replace human

00:07:39,589 --> 00:07:46,039
doing i.t with software doing i.t you do

00:07:43,490 --> 00:07:51,080
2i t what has been done to agriculture

00:07:46,039 --> 00:07:55,249
two factories to accounting you just cut

00:07:51,080 --> 00:07:58,909
by 10 the workforce and this always work

00:07:55,249 --> 00:08:00,800
in a market economy then what to do with

00:07:58,909 --> 00:08:03,229
the ninety percent that's the question

00:08:00,800 --> 00:08:03,550
for politicians but it always happens

00:08:03,229 --> 00:08:07,320
any

00:08:03,550 --> 00:08:10,390
way then people have a certain view of

00:08:07,320 --> 00:08:13,360
automation they think it's automating

00:08:10,390 --> 00:08:17,080
the delivery of hardware through

00:08:13,360 --> 00:08:19,270
virtualization instead of purchasing a

00:08:17,080 --> 00:08:21,700
bare metal server you purchase a virtual

00:08:19,270 --> 00:08:24,610
machine online but that's very narrow

00:08:21,700 --> 00:08:28,030
view of all the possibilities to

00:08:24,610 --> 00:08:30,130
automate IT service delivery and replace

00:08:28,030 --> 00:08:32,470
human with software there are many other

00:08:30,130 --> 00:08:34,750
tools required and many other

00:08:32,470 --> 00:08:39,640
opportunities to cut the workforce with

00:08:34,750 --> 00:08:45,730
cloud so I put a list you can automate

00:08:39,640 --> 00:08:47,890
for example the orchestration a database

00:08:45,730 --> 00:08:50,380
on the one hand a front end on the other

00:08:47,890 --> 00:08:51,880
hand how do you connect the IP addresses

00:08:50,380 --> 00:08:54,300
of the front end to the back end

00:08:51,880 --> 00:08:57,190
automatically that's called services

00:08:54,300 --> 00:08:59,140
orchestration you can automate the

00:08:57,190 --> 00:09:02,080
configuration and update of the base

00:08:59,140 --> 00:09:03,910
system you can automate the provisioning

00:09:02,080 --> 00:09:05,770
of development tools to developers

00:09:03,910 --> 00:09:08,560
rather than letting them install the

00:09:05,770 --> 00:09:11,440
development environment why don't you

00:09:08,560 --> 00:09:13,510
why don't we give them a URL and in one

00:09:11,440 --> 00:09:15,610
click they get the development

00:09:13,510 --> 00:09:20,350
environment ready to start working in

00:09:15,610 --> 00:09:22,720
their browser that's then you can

00:09:20,350 --> 00:09:27,190
automate all the business process the

00:09:22,720 --> 00:09:29,530
ordering of the service request the

00:09:27,190 --> 00:09:32,110
accounting of the service usage and the

00:09:29,530 --> 00:09:34,060
generation of the invoice most people

00:09:32,110 --> 00:09:37,930
tend to forget that a cloud system

00:09:34,060 --> 00:09:39,880
without billing doesn't work and usually

00:09:37,930 --> 00:09:42,700
they think about it two years after the

00:09:39,880 --> 00:09:44,220
project start so we get many prospects

00:09:42,700 --> 00:09:47,000
for that

00:09:44,220 --> 00:09:49,700
the allocation suppose you have too much

00:09:47,000 --> 00:09:53,400
hardware and your friend has too little

00:09:49,700 --> 00:09:56,280
why don't you share and give the

00:09:53,400 --> 00:09:59,790
overcapacity from one to the other who

00:09:56,280 --> 00:10:05,220
needs more capacity or why don't we move

00:09:59,790 --> 00:10:09,200
for example server usage from countries

00:10:05,220 --> 00:10:12,360
where it's summer and they use a lot of

00:10:09,200 --> 00:10:15,240
air cooling and let's move them to a

00:10:12,360 --> 00:10:17,730
cold place during the summer so that we

00:10:15,240 --> 00:10:19,580
can optimize the environment so

00:10:17,730 --> 00:10:22,890
allocation is about allocation

00:10:19,580 --> 00:10:26,280
optimization it can be for economy for

00:10:22,890 --> 00:10:29,160
security for many different reasons it's

00:10:26,280 --> 00:10:31,200
not only about virtualization then

00:10:29,160 --> 00:10:33,390
consulting that might sound strange but

00:10:31,200 --> 00:10:36,390
we already have in Exeter a tool which

00:10:33,390 --> 00:10:40,410
partly automates the word work of human

00:10:36,390 --> 00:10:43,170
consultants to configure an ERP so for

00:10:40,410 --> 00:10:45,360
simple problems we are replacing human

00:10:43,170 --> 00:10:48,060
who used to ask questions to the small

00:10:45,360 --> 00:10:50,130
company with a software which tries to

00:10:48,060 --> 00:10:53,340
remember many cases in the past and

00:10:50,130 --> 00:10:56,820
generate a new one from the machine

00:10:53,340 --> 00:10:59,100
learning of the past and last the one

00:10:56,820 --> 00:11:01,410
you can treat resiliency is what we are

00:10:59,100 --> 00:11:05,240
going to talk more about so these are

00:11:01,410 --> 00:11:13,400
many fields where automation can be used

00:11:05,240 --> 00:11:16,410
to deliver IT service without human so

00:11:13,400 --> 00:11:19,380
virtualization was probably first

00:11:16,410 --> 00:11:23,300
covered by a great tool called nifty

00:11:19,380 --> 00:11:26,340
name it's fully developed in Python it

00:11:23,300 --> 00:11:29,310
was better than VMware when it was

00:11:26,340 --> 00:11:31,770
released you could define a virtual data

00:11:29,310 --> 00:11:35,070
center a virtual network a virtual

00:11:31,770 --> 00:11:38,190
storage a virtual computer connect them

00:11:35,070 --> 00:11:42,000
all and it was distributed over multiple

00:11:38,190 --> 00:11:45,540
data center but they don't like

00:11:42,000 --> 00:11:48,710
marketing they don't do marketing so

00:11:45,540 --> 00:11:51,540
nobody knows who knows Nifty nine here

00:11:48,710 --> 00:11:54,360
okay so only people from neck city there

00:11:51,540 --> 00:11:55,980
are friends of neck city who did it they

00:11:54,360 --> 00:11:58,620
run for example Paris

00:11:55,980 --> 00:12:00,990
website so they really run production

00:11:58,620 --> 00:12:04,020
sites with Nifty nine for three or four

00:12:00,990 --> 00:12:06,690
years it's rigged it was really better

00:12:04,020 --> 00:12:13,280
than the most expensive VMware solution

00:12:06,690 --> 00:12:13,280
at the time but as you see nobody knows

00:12:14,150 --> 00:12:20,070
cloud or is it virtualization

00:12:16,610 --> 00:12:21,930
virtualization so it's virtual solution

00:12:20,070 --> 00:12:24,840
actually it's a virtualization it's a

00:12:21,930 --> 00:12:26,370
software where you can order a virtual

00:12:24,840 --> 00:12:30,300
machine a virtual network a virtual

00:12:26,370 --> 00:12:33,630
datacenter and a virtual storage and you

00:12:30,300 --> 00:12:35,370
can order that either they provide the

00:12:33,630 --> 00:12:37,770
service in the sense you can order it

00:12:35,370 --> 00:12:40,790
online or you can take the software and

00:12:37,770 --> 00:12:43,230
implement your own private cloud with it

00:12:40,790 --> 00:12:45,510
so just have in mind I'm going to teach

00:12:43,230 --> 00:12:47,880
you how to build your own cloud using

00:12:45,510 --> 00:12:50,160
only open source and only Python

00:12:47,880 --> 00:12:53,070
software and actually I'm going not to

00:12:50,160 --> 00:12:55,800
teach you not one way to do it but three

00:12:53,070 --> 00:12:58,970
cross five prod sixth of probably more

00:12:55,800 --> 00:13:01,380
five thousand different ways of doing it

00:12:58,970 --> 00:13:05,580
so then you'll collect this game

00:13:01,380 --> 00:13:08,070
eucalyptus was a initially a way to try

00:13:05,580 --> 00:13:10,650
to get something compatible with ec2

00:13:08,070 --> 00:13:15,930
it's not Python you know maybe who knows

00:13:10,650 --> 00:13:19,470
OpenNebula it was better marketed mainly

00:13:15,930 --> 00:13:21,840
through research because it comes from a

00:13:19,470 --> 00:13:26,160
university or from academic world

00:13:21,840 --> 00:13:29,070
initially slap ways can do

00:13:26,160 --> 00:13:31,350
virtualization but that's not at all the

00:13:29,070 --> 00:13:33,900
focus it can do it for simple task it's

00:13:31,350 --> 00:13:36,180
in Python and nowadays it seems the de

00:13:33,900 --> 00:13:38,670
facto standard for managing lots of

00:13:36,180 --> 00:13:41,820
virtual machine and storage and network

00:13:38,670 --> 00:13:44,460
is OpenStack which still doesn't go as

00:13:41,820 --> 00:13:48,330
far and as reliably as nifty name was

00:13:44,460 --> 00:13:51,510
doing three or four years ago so that's

00:13:48,330 --> 00:13:53,940
a you see you have three possibilities

00:13:51,510 --> 00:13:59,580
in Python for managing at least virtual

00:13:53,940 --> 00:14:02,760
machines I think there are more and it

00:13:59,580 --> 00:14:04,620
is neither the first in history nor the

00:14:02,760 --> 00:14:07,370
more reliable or more sophisticated

00:14:04,620 --> 00:14:07,370
which wins

00:14:08,760 --> 00:14:14,080
orchestration mm well slap OS does

00:14:12,160 --> 00:14:17,710
orchestration that sits in a sense

00:14:14,080 --> 00:14:24,010
primary focus probably you all know Zhu

00:14:17,710 --> 00:14:28,780
Zhu right who knows usual okay so do you

00:14:24,010 --> 00:14:31,930
know Pyo CN I so there's a standard

00:14:28,780 --> 00:14:36,720
supported by European Union by grid

00:14:31,930 --> 00:14:36,720
consortiums called occi who knows occi

00:14:37,260 --> 00:14:42,940
congratulation and there has been trying

00:14:40,870 --> 00:14:45,820
to have been it's quite generic actually

00:14:42,940 --> 00:14:47,620
or CCI and you can build things which

00:14:45,820 --> 00:14:49,870
look like service orchestration with

00:14:47,620 --> 00:14:52,960
occi and there is one implementation in

00:14:49,870 --> 00:14:57,640
python called py or CN i and another

00:14:52,960 --> 00:15:01,780
tool called canopy who knows okay well

00:14:57,640 --> 00:15:04,390
is used industrially to implement some

00:15:01,780 --> 00:15:07,450
clouds in France and outside France

00:15:04,390 --> 00:15:09,400
already so very often people actually

00:15:07,450 --> 00:15:12,970
don't know which tools are really used

00:15:09,400 --> 00:15:15,339
to implement public clouds everybody

00:15:12,970 --> 00:15:17,530
knows OpenStack but how do you automate

00:15:15,339 --> 00:15:21,910
deployment of OpenStack for example how

00:15:17,530 --> 00:15:25,000
do you do the billing configuration the

00:15:21,910 --> 00:15:27,070
list is very long there's a fantastic

00:15:25,000 --> 00:15:29,530
page on Wikipedia to know but again you

00:15:27,070 --> 00:15:33,760
will see that be CFG to build elevation

00:15:29,530 --> 00:15:36,850
resulta python software it's very sad to

00:15:33,760 --> 00:15:39,760
see so often Python community rely on

00:15:36,850 --> 00:15:45,339
chef or puppet to do what build-out

00:15:39,760 --> 00:15:47,440
would have done so perfectly the trend

00:15:45,339 --> 00:15:52,290
is for people to tend to use share for

00:15:47,440 --> 00:16:00,210
per pet but build-out us just as well I

00:15:52,290 --> 00:16:03,430
mean do I put partly pythons development

00:16:00,210 --> 00:16:05,170
soap again from Python world was one of

00:16:03,430 --> 00:16:07,210
the first web based development

00:16:05,170 --> 00:16:10,330
environment with a flew through the web

00:16:07,210 --> 00:16:12,280
interface that's the kind of thing what

00:16:10,330 --> 00:16:14,860
everybody is trying to sell nowadays too

00:16:12,280 --> 00:16:17,350
big cooperation no need of Emacs no need

00:16:14,860 --> 00:16:22,630
of VI no need a file system

00:16:17,350 --> 00:16:24,970
just develop everything online then the

00:16:22,630 --> 00:16:28,540
other tool like upscale cloud nine who

00:16:24,970 --> 00:16:31,750
knows cloud nine okay everybody should

00:16:28,540 --> 00:16:33,880
know cloud nine it's really completely

00:16:31,750 --> 00:16:36,220
written in JavaScript runs entirely in

00:16:33,880 --> 00:16:40,210
your browser and allows you to deploy a

00:16:36,220 --> 00:16:44,560
full IDE wherever you are only through

00:16:40,210 --> 00:16:48,160
HTTP HTML and JavaScript voice web

00:16:44,560 --> 00:16:50,200
renee has also it's kind of a web-based

00:16:48,160 --> 00:16:53,590
development environment which automates

00:16:50,200 --> 00:16:56,410
your work and canopy are which is

00:16:53,590 --> 00:16:58,750
actually quite seriously serious

00:16:56,410 --> 00:17:05,650
software from if you look in dust really

00:16:58,750 --> 00:17:08,680
has that and nobody knows billing so you

00:17:05,650 --> 00:17:11,140
can use your p5 it's in Python J billing

00:17:08,680 --> 00:17:14,890
is a java application for lower billing

00:17:11,140 --> 00:17:16,480
in cloud there is a little problem when

00:17:14,890 --> 00:17:20,170
you want to do billing is that you need

00:17:16,480 --> 00:17:22,720
something which generates the bill in a

00:17:20,170 --> 00:17:25,750
recurring way whether you use the

00:17:22,720 --> 00:17:29,230
service or not usually you ship an

00:17:25,750 --> 00:17:32,140
iphone get deliver the iphone and make

00:17:29,230 --> 00:17:34,960
sure the iphone is invoiced and the

00:17:32,140 --> 00:17:39,010
person has paid for the iphone in cloud

00:17:34,960 --> 00:17:43,900
you issue invoices every month for stuff

00:17:39,010 --> 00:17:46,810
which people never use so the usage and

00:17:43,900 --> 00:17:49,330
the invoice are completely unrelated and

00:17:46,810 --> 00:17:53,470
must be automated for you know for

00:17:49,330 --> 00:17:56,380
example if you forget an amazon s3

00:17:53,470 --> 00:17:59,980
storage which costs ten cents a months

00:17:56,380 --> 00:18:06,240
or 5 cents a month's it sometimes more

00:17:59,980 --> 00:18:09,250
tiring to cancel the monthly payment

00:18:06,240 --> 00:18:12,160
than keeping keep on keeping it running

00:18:09,250 --> 00:18:14,500
for one two or three years so a huge

00:18:12,160 --> 00:18:18,280
part of the money in cloud business

00:18:14,500 --> 00:18:21,960
actually comes from service which people

00:18:18,280 --> 00:18:21,960
request pay and never use

00:18:22,900 --> 00:18:28,870
and probably open Europe you can do I

00:18:25,720 --> 00:18:31,990
cannot tell you exactly but again you

00:18:28,870 --> 00:18:36,630
see actually two or three alternatives

00:18:31,990 --> 00:18:41,950
in Python a location that's something

00:18:36,630 --> 00:18:45,850
which people know much less there's been

00:18:41,950 --> 00:18:48,240
a project called sirico some time ago in

00:18:45,850 --> 00:18:50,980
a university in France which automates

00:18:48,240 --> 00:18:53,080
optimization of a location if you don't

00:18:50,980 --> 00:18:56,950
have a good alligator or good optimizer

00:18:53,080 --> 00:19:00,280
you can't run a big infrastructure slop

00:18:56,950 --> 00:19:03,370
Lois has that can appear too so again

00:19:00,280 --> 00:19:05,410
one in Python canopy eyes in Perl its

00:19:03,370 --> 00:19:07,540
various was surprising it's only two

00:19:05,410 --> 00:19:12,300
years old software but they chose pearl

00:19:07,540 --> 00:19:15,250
to develop it and consulting well I

00:19:12,300 --> 00:19:16,780
don't know any other if you know let let

00:19:15,250 --> 00:19:20,080
me know I don't know any other project

00:19:16,780 --> 00:19:21,970
to automate human consulting for

00:19:20,080 --> 00:19:24,340
European figuration through artificial

00:19:21,970 --> 00:19:30,430
intelligence so if you know let me know

00:19:24,340 --> 00:19:33,970
and then I made this little table a is a

00:19:30,430 --> 00:19:36,820
company i know they provide

00:19:33,970 --> 00:19:38,140
virtualization to OpenStack they managed

00:19:36,820 --> 00:19:41,350
through pipette their whole

00:19:38,140 --> 00:19:43,120
infrastructure and they forgot how to do

00:19:41,350 --> 00:19:45,570
the billing then they came to us and say

00:19:43,120 --> 00:19:48,340
can't you do the billing with erp five

00:19:45,570 --> 00:19:51,610
so they cover i would say half of the

00:19:48,340 --> 00:19:55,480
requirements to build a cloud with three

00:19:51,610 --> 00:19:58,240
software the second bead wants to do a

00:19:55,480 --> 00:20:02,650
bit more so they use opennebula for

00:19:58,240 --> 00:20:04,840
virtualization juju for castration can

00:20:02,650 --> 00:20:07,150
appear for configuration and allocation

00:20:04,840 --> 00:20:10,750
cloud nine for development open your p

00:20:07,150 --> 00:20:12,280
for billing so they cover to third in a

00:20:10,750 --> 00:20:14,410
sense of what you need to build your own

00:20:12,280 --> 00:20:19,120
cloud with one two three four five

00:20:14,410 --> 00:20:20,560
software and so if you go to slap

00:20:19,120 --> 00:20:22,720
westway you only need to know to

00:20:20,560 --> 00:20:26,920
software build out I which who knows

00:20:22,720 --> 00:20:30,130
build out okay a bit but it is quite

00:20:26,920 --> 00:20:32,820
well in Python communities getting well

00:20:30,130 --> 00:20:36,640
known and your p5 and that's all and

00:20:32,820 --> 00:20:39,430
what you see which is quite funny

00:20:36,640 --> 00:20:44,300
whatever you do if you build a cloud

00:20:39,430 --> 00:20:45,890
you'll need to do invoicing whether you

00:20:44,300 --> 00:20:48,440
use a whatever you choose as a

00:20:45,890 --> 00:20:54,860
technology if you can't do the invoicing

00:20:48,440 --> 00:20:57,170
you can run your cloud and an ERP is

00:20:54,860 --> 00:21:00,200
something which is meant to take orders

00:20:57,170 --> 00:21:02,780
allocate services just like for example

00:21:00,200 --> 00:21:06,080
in in transportation industry you

00:21:02,780 --> 00:21:07,670
request an order to transport some some

00:21:06,080 --> 00:21:10,430
goods from a place to another in a

00:21:07,670 --> 00:21:13,010
container that's exactly the same as

00:21:10,430 --> 00:21:15,050
allocating a process in a computer the

00:21:13,010 --> 00:21:17,420
computer plays like a role of the

00:21:15,050 --> 00:21:19,580
container and the process your locate is

00:21:17,420 --> 00:21:25,100
like the good you carry in a container

00:21:19,580 --> 00:21:28,220
in transportation industry so there is

00:21:25,100 --> 00:21:30,050
an article so I publish that in an i

00:21:28,220 --> 00:21:32,600
triple e conference with a professor

00:21:30,050 --> 00:21:35,960
last year it's you can search in the I

00:21:32,600 --> 00:21:38,240
Triple E 2011 international workshop on

00:21:35,960 --> 00:21:41,390
performance aspects of cloud and service

00:21:38,240 --> 00:21:43,940
virtualization but in short whatever

00:21:41,390 --> 00:21:47,570
cloud system you do it will have the

00:21:43,940 --> 00:21:50,530
complexity of an ERP which is about the

00:21:47,570 --> 00:21:53,780
maximum complexity of a big software

00:21:50,530 --> 00:21:57,950
then your choice is simple will you have

00:21:53,780 --> 00:22:00,140
one year p or two or three or four it

00:21:57,950 --> 00:22:03,470
seems most people are going in a way

00:22:00,140 --> 00:22:06,050
where they want to manage something of

00:22:03,470 --> 00:22:07,910
the complexity of an ERP but they think

00:22:06,050 --> 00:22:11,090
one is not enough they want two three or

00:22:07,910 --> 00:22:15,400
four and not in one language but maybe

00:22:11,090 --> 00:22:18,050
in two or three different languages so

00:22:15,400 --> 00:22:19,760
the conclusion of this first part about

00:22:18,050 --> 00:22:23,300
python tool for clouds so they are

00:22:19,760 --> 00:22:26,480
actually for every aspect of cloud three

00:22:23,300 --> 00:22:29,690
or four good python tools then you have

00:22:26,480 --> 00:22:31,970
two ways of building your own cloud one

00:22:29,690 --> 00:22:33,620
in which you combine many tools many

00:22:31,970 --> 00:22:36,380
languages and you'll end up with a

00:22:33,620 --> 00:22:41,840
system which has the complexity of an

00:22:36,380 --> 00:22:45,590
arp at the power of two or three or you

00:22:41,840 --> 00:22:47,360
just take an EOP put a configuration

00:22:45,590 --> 00:22:51,310
system and stick it to it and you have a

00:22:47,360 --> 00:22:51,310
cloud then you only need to software

00:22:51,880 --> 00:23:00,620
then it's up to you so but just at the

00:22:57,890 --> 00:23:03,740
end will compete at one euro per year

00:23:00,620 --> 00:23:06,830
and / civil servant with lap OS which

00:23:03,740 --> 00:23:08,690
was designed to compete at the lowest

00:23:06,830 --> 00:23:10,940
possible cost so if you take any other

00:23:08,690 --> 00:23:19,610
solution probably you will be more

00:23:10,940 --> 00:23:23,840
expensive edge computing you'll see the

00:23:19,610 --> 00:23:29,840
relation soon with this introduction who

00:23:23,840 --> 00:23:33,290
knows what is a CDN okay so you know for

00:23:29,840 --> 00:23:37,070
example in Japan they have optical fiber

00:23:33,290 --> 00:23:39,680
like in Korea Russia a lot we have

00:23:37,070 --> 00:23:42,920
little bit in France we are so late

00:23:39,680 --> 00:23:46,280
compared to Russia or Korea Japan and

00:23:42,920 --> 00:23:48,830
the latency to the central office where

00:23:46,280 --> 00:23:52,490
the ftth concentrator is is about a

00:23:48,830 --> 00:23:54,560
millisecond when the people got used to

00:23:52,490 --> 00:23:56,360
get website which reply in one

00:23:54,560 --> 00:23:58,310
millisecond because some providers are

00:23:56,360 --> 00:24:01,970
putting a server directly next to the

00:23:58,310 --> 00:24:06,530
ftth concentrator then if you put your

00:24:01,970 --> 00:24:09,290
server let's say in Korea instead of

00:24:06,530 --> 00:24:12,470
Japan is no longer a millisecond it

00:24:09,290 --> 00:24:15,740
might be 10 and users complained

00:24:12,470 --> 00:24:17,690
tremendously that it is so slow it's 10

00:24:15,740 --> 00:24:23,180
millisecond to get the CSS the

00:24:17,690 --> 00:24:25,910
JavaScript the images I give you another

00:24:23,180 --> 00:24:28,370
example the first move Google did when

00:24:25,910 --> 00:24:31,370
they went to synagogue in Africa one of

00:24:28,370 --> 00:24:34,670
the first was to put their CDN directly

00:24:31,370 --> 00:24:37,580
in the premises of the orange company

00:24:34,670 --> 00:24:39,680
which provides a DSL to the country so

00:24:37,580 --> 00:24:42,820
when we look at a real industrial

00:24:39,680 --> 00:24:46,910
infrastructure of someone providing

00:24:42,820 --> 00:24:50,180
applications through the web most of the

00:24:46,910 --> 00:24:53,570
distribution of content is not done from

00:24:50,180 --> 00:24:55,700
a central place but from a place which

00:24:53,570 --> 00:24:59,410
is rather one mile away from you rather

00:24:55,700 --> 00:25:03,610
than 1,000 kilometers away from you

00:24:59,410 --> 00:25:06,850
so there's nothing new here Akamai is

00:25:03,610 --> 00:25:08,980
more than 10 years old but if we compare

00:25:06,850 --> 00:25:11,380
the two models centralizing things in a

00:25:08,980 --> 00:25:14,920
data center or distributing things to

00:25:11,380 --> 00:25:17,470
make it closer to the user at least from

00:25:14,920 --> 00:25:19,450
distribution of HTTP and website the

00:25:17,470 --> 00:25:23,440
decentralized approach is somehow

00:25:19,450 --> 00:25:26,380
already dominant so all the image we get

00:25:23,440 --> 00:25:29,010
through newspaper that everything should

00:25:26,380 --> 00:25:33,400
be centralized through cloud to reduce

00:25:29,010 --> 00:25:35,200
whichever costs so whichever way we get

00:25:33,400 --> 00:25:37,180
by centralizing things is actually

00:25:35,200 --> 00:25:39,430
ridiculous you can get the same

00:25:37,180 --> 00:25:41,020
automation in the decentralized way as

00:25:39,430 --> 00:25:44,740
you can get by putting things in the

00:25:41,020 --> 00:25:46,780
system and for many aspects of web or IT

00:25:44,740 --> 00:25:49,450
you get much better results by

00:25:46,780 --> 00:25:52,510
decentralizing we all know we all use

00:25:49,450 --> 00:25:56,110
CDN so there's a new idea called

00:25:52,510 --> 00:25:59,620
application delivery network rather than

00:25:56,110 --> 00:26:02,410
just providing for example the CSS or

00:25:59,620 --> 00:26:06,060
the JavaScript a mile away from you why

00:26:02,410 --> 00:26:09,610
not for example start a little flasks

00:26:06,060 --> 00:26:11,590
application a mile away from you then

00:26:09,610 --> 00:26:13,960
get the flask discuss with your browser

00:26:11,590 --> 00:26:18,400
with a one millisecond latency instead

00:26:13,960 --> 00:26:20,350
of 20 or 100 millisecond what are the

00:26:18,400 --> 00:26:23,560
tools nowadays to distribute

00:26:20,350 --> 00:26:25,480
applications this way because if this

00:26:23,560 --> 00:26:28,860
idea happens if some people are

00:26:25,480 --> 00:26:31,390
interested in fast response I'm sure

00:26:28,860 --> 00:26:34,960
companies are going actually to provide

00:26:31,390 --> 00:26:37,570
application delivery networks so i must

00:26:34,960 --> 00:26:39,910
say that in all the projects funded by

00:26:37,570 --> 00:26:43,570
government which we are lucky enough to

00:26:39,910 --> 00:26:45,760
participate to in france 0 in europe all

00:26:43,570 --> 00:26:48,660
the big companies nowadays are studying

00:26:45,760 --> 00:26:51,970
this idea of edge computing and how to

00:26:48,660 --> 00:26:54,460
distribute the application very close to

00:26:51,970 --> 00:26:56,950
the end user for whatever task for

00:26:54,460 --> 00:26:59,430
example image processing of satellite

00:26:56,950 --> 00:26:59,430
images

00:27:00,700 --> 00:27:08,269
so now I hope you are convinced that the

00:27:06,140 --> 00:27:12,200
idea of centralizing in the same

00:27:08,269 --> 00:27:17,390
building all the servers mmm is already

00:27:12,200 --> 00:27:19,250
an idea from the past there's a second

00:27:17,390 --> 00:27:22,250
reason which make people go towards

00:27:19,250 --> 00:27:26,769
decentralization which is the risks of

00:27:22,250 --> 00:27:32,570
cloud so the first ones are easy well if

00:27:26,769 --> 00:27:35,210
if a data center catches fire everything

00:27:32,570 --> 00:27:38,240
is lost in that data center it can be

00:27:35,210 --> 00:27:40,039
floats on on the the flood one was I

00:27:38,240 --> 00:27:42,620
think close to Washington the earthquake

00:27:40,039 --> 00:27:45,919
is in Tokyo then when one of the data

00:27:42,620 --> 00:27:49,549
center breaks there's a much worse risk

00:27:45,919 --> 00:27:52,690
than natural disaster is a bug in the

00:27:49,549 --> 00:27:56,299
replication system which was designed to

00:27:52,690 --> 00:27:59,929
provide a solution to the natural

00:27:56,299 --> 00:28:03,529
disaster so the four days of downtown of

00:27:59,929 --> 00:28:06,620
Amazon in 2011 were mostly caused by

00:28:03,529 --> 00:28:08,899
some unpredicted effect of the

00:28:06,620 --> 00:28:12,529
replication system after failure of one

00:28:08,899 --> 00:28:16,789
data center and we all know the number

00:28:12,529 --> 00:28:20,090
of bugs per 1,000 line of code is for

00:28:16,789 --> 00:28:26,950
the best eight and more 15 and very

00:28:20,090 --> 00:28:29,750
often 30 so in all I would say

00:28:26,950 --> 00:28:32,299
centralized cloud system based on the

00:28:29,750 --> 00:28:35,630
idea of replication one of the biggest

00:28:32,299 --> 00:28:39,500
risk is the risk of a bug in the

00:28:35,630 --> 00:28:41,659
replication system it's the same for

00:28:39,500 --> 00:28:44,330
storage area network I can tell you that

00:28:41,659 --> 00:28:46,940
all our ERP five customers have already

00:28:44,330 --> 00:28:49,340
destroyed their accounting through their

00:28:46,940 --> 00:28:52,600
storage area network either by typing a

00:28:49,340 --> 00:28:54,740
wrong command line or by doing a

00:28:52,600 --> 00:28:57,820
synchronization in both ways at the same

00:28:54,740 --> 00:28:57,820
time on the same partition

00:29:00,980 --> 00:29:06,570
the International working group on cloud

00:29:03,990 --> 00:29:10,860
resiliency has created a Paris ranking

00:29:06,570 --> 00:29:12,240
so it's very simple I by the way if

00:29:10,860 --> 00:29:14,370
you're interested in joining this group

00:29:12,240 --> 00:29:16,800
you are welcome is quite open we

00:29:14,370 --> 00:29:21,630
collected all the news about downtime of

00:29:16,800 --> 00:29:24,300
cloud then we computed in the last four

00:29:21,630 --> 00:29:27,630
or five years how many hours cloud

00:29:24,300 --> 00:29:29,850
providers have been down so for example

00:29:27,630 --> 00:29:32,340
one year amazon has been down for days

00:29:29,850 --> 00:29:36,150
but the next year was very good so and

00:29:32,340 --> 00:29:38,280
so we computed an average so the first

00:29:36,150 --> 00:29:43,320
value we got was seven hours downtime

00:29:38,280 --> 00:29:45,810
per year per provider in average this is

00:29:43,320 --> 00:29:49,500
39 about so we are very far away from

00:29:45,810 --> 00:29:51,930
5-9 then a company called us called said

00:29:49,500 --> 00:29:54,240
axis there is a company which puts

00:29:51,930 --> 00:29:56,670
monitoring tools all over the clouds in

00:29:54,240 --> 00:29:59,100
the world and in your browser and they

00:29:56,670 --> 00:30:01,590
tell you hey guys that's not true it's

00:29:59,100 --> 00:30:03,360
much more with our tool we didn't

00:30:01,590 --> 00:30:07,080
measure seven hours per year and the

00:30:03,360 --> 00:30:10,770
cloud but seven hours per month and the

00:30:07,080 --> 00:30:14,460
cloud provider so the reality is this

00:30:10,770 --> 00:30:15,870
downtime value is actually unknown you

00:30:14,460 --> 00:30:18,830
can compute different values in

00:30:15,870 --> 00:30:23,130
different way which is really right I

00:30:18,830 --> 00:30:26,370
couldn't tell you in a serious manner

00:30:23,130 --> 00:30:29,280
scientifically today but you see seven

00:30:26,370 --> 00:30:32,030
hours a year seven hours a month could

00:30:29,280 --> 00:30:35,430
be something in between and this is

00:30:32,030 --> 00:30:38,490
certainly unacceptable for governments

00:30:35,430 --> 00:30:40,620
or even for example for a travel agency

00:30:38,490 --> 00:30:43,260
having for example sale falls down

00:30:40,620 --> 00:30:46,230
during three hours when they are the

00:30:43,260 --> 00:30:49,350
rush time at Christmas to provide let's

00:30:46,230 --> 00:30:54,570
say travels to their customers is

00:30:49,350 --> 00:30:58,620
unacceptable so I say I have 16 minutes

00:30:54,570 --> 00:31:04,320
i right yeah so I will accelerate in

00:30:58,620 --> 00:31:06,570
short the only way to survive the

00:31:04,320 --> 00:31:08,820
problems of lack of resiliency of cloud

00:31:06,570 --> 00:31:11,880
solutions is to have a decentralized

00:31:08,820 --> 00:31:13,190
system where you don't do replication

00:31:11,880 --> 00:31:16,340
but you rather do

00:31:13,190 --> 00:31:18,530
to rise back up and restore so that if

00:31:16,340 --> 00:31:21,590
for example a system administrator calls

00:31:18,530 --> 00:31:25,640
the command erase everything the history

00:31:21,590 --> 00:31:30,830
is back up we like chili keep a previous

00:31:25,640 --> 00:31:33,230
copy before things were erased then you

00:31:30,830 --> 00:31:35,810
need for example multiple electricity

00:31:33,230 --> 00:31:38,450
suppliers multiple Network suppliers and

00:31:35,810 --> 00:31:40,550
something called an election process and

00:31:38,450 --> 00:31:43,790
that's where we have an interesting

00:31:40,550 --> 00:31:46,460
scientific background again in 1996

00:31:43,790 --> 00:31:50,210
there's a team with Shandra @z lacoste

00:31:46,460 --> 00:31:52,790
wig and Charo they proved sorry they

00:31:50,210 --> 00:31:55,070
proved in 1996 that there is no way to

00:31:52,790 --> 00:31:58,910
do a decentralized election system on

00:31:55,070 --> 00:32:00,770
the non reliable network so non reliable

00:31:58,910 --> 00:32:05,690
network is the case of the internet

00:32:00,770 --> 00:32:07,400
about 1% downloads fail for example this

00:32:05,690 --> 00:32:10,280
centralized is what we need to get

00:32:07,400 --> 00:32:11,900
something resilient but then for donated

00:32:10,280 --> 00:32:15,070
recovery there's a need of an election

00:32:11,900 --> 00:32:17,840
system and science shows it's impossible

00:32:15,070 --> 00:32:22,360
so we know by science nowadays that

00:32:17,840 --> 00:32:22,360
building a resilient cloud is impossible

00:32:22,930 --> 00:32:28,160
however we don't know that from an

00:32:26,180 --> 00:32:30,290
economic point of view what is the

00:32:28,160 --> 00:32:37,310
probability of the failure of the

00:32:30,290 --> 00:32:40,640
election algorithm so that's one topic

00:32:37,310 --> 00:32:43,550
we work on I show you this trend because

00:32:40,640 --> 00:32:46,100
more and more people are realizing that

00:32:43,550 --> 00:32:49,520
if they put a server at home on an

00:32:46,100 --> 00:32:51,710
optical fiber the average down time of

00:32:49,520 --> 00:32:55,160
for example French electricity company

00:32:51,710 --> 00:32:58,190
is 15 minutes per year it's much much

00:32:55,160 --> 00:33:00,800
less than seven hours per year the

00:32:58,190 --> 00:33:03,380
average return of solid state disk by

00:33:00,800 --> 00:33:06,440
Intel they have the best result these

00:33:03,380 --> 00:33:08,690
days one out of 1,000 fails over a

00:33:06,440 --> 00:33:10,970
period of three years that's less than

00:33:08,690 --> 00:33:14,230
the probability of a sysadmin typing the

00:33:10,970 --> 00:33:17,240
wrong command on a storage area network

00:33:14,230 --> 00:33:20,390
so but of course if you have things at

00:33:17,240 --> 00:33:22,190
home home is not fully safe you could

00:33:20,390 --> 00:33:26,250
have robbery so if it's in multiple

00:33:22,190 --> 00:33:27,690
homes that will be even safer

00:33:26,250 --> 00:33:29,610
especially if you don't know in which

00:33:27,690 --> 00:33:32,490
other home it is because nothing nobody

00:33:29,610 --> 00:33:34,740
can ask you where it is then you cannot

00:33:32,490 --> 00:33:38,880
even be blackmailed to be told where it

00:33:34,740 --> 00:33:42,180
is so there's been a lot of work so on

00:33:38,880 --> 00:33:43,980
these issues and slap OS and I can tell

00:33:42,180 --> 00:33:46,530
you that it is already being deployed

00:33:43,980 --> 00:33:49,980
nowadays by a large telecommunication

00:33:46,530 --> 00:33:52,320
company in the world to build a cloud

00:33:49,980 --> 00:33:54,060
computing environment which just works

00:33:52,320 --> 00:33:55,890
like the normal ones but instead of

00:33:54,060 --> 00:33:59,490
having a big data center with all

00:33:55,890 --> 00:34:02,240
service inside servers are located in

00:33:59,490 --> 00:34:06,720
people's home nobody knows where and

00:34:02,240 --> 00:34:08,730
maybe someday one server fails that

00:34:06,720 --> 00:34:10,980
there is an algorithm which always keep

00:34:08,730 --> 00:34:13,200
a backup on another server and able to

00:34:10,980 --> 00:34:18,960
restore it and the whole system is being

00:34:13,200 --> 00:34:21,030
tested every day so how let's see a bit

00:34:18,960 --> 00:34:23,550
how it works from a more practical point

00:34:21,030 --> 00:34:25,260
of view so slap OS as I said only to

00:34:23,550 --> 00:34:27,480
software the master and the note the

00:34:25,260 --> 00:34:31,710
master and the node the master is made

00:34:27,480 --> 00:34:33,810
with the RP 5 because an order of an

00:34:31,710 --> 00:34:36,000
iphone is not so different from an order

00:34:33,810 --> 00:34:40,500
of give me one my sequel database so a

00:34:36,000 --> 00:34:45,690
service request or purchasing banana is

00:34:40,500 --> 00:34:48,179
the same then on the notes I'd we use

00:34:45,690 --> 00:34:50,940
build out that's old community software

00:34:48,179 --> 00:34:54,240
which can rebuild a configuration of

00:34:50,940 --> 00:34:56,490
whatever we don't reinvent the wheel we

00:34:54,240 --> 00:34:58,410
use supervisor d that's also all and

00:34:56,490 --> 00:35:00,870
solid software to start and stop

00:34:58,410 --> 00:35:03,000
processes in Python and we just put a

00:35:00,870 --> 00:35:05,190
bit of glue around those to an ERP five

00:35:03,000 --> 00:35:07,500
that's goals lab great about a thousand

00:35:05,190 --> 00:35:09,920
lines of code done we have a cloud

00:35:07,500 --> 00:35:12,810
system which is already decentralized

00:35:09,920 --> 00:35:14,970
first version development time two

00:35:12,810 --> 00:35:20,010
months then writing tests to be sure

00:35:14,970 --> 00:35:22,140
that it works one year then how does it

00:35:20,010 --> 00:35:24,270
work first you install the master so I

00:35:22,140 --> 00:35:26,460
will not explain that because to install

00:35:24,270 --> 00:35:28,620
a master actually you need to already

00:35:26,460 --> 00:35:30,660
have a master the system is self hosted

00:35:28,620 --> 00:35:33,510
and the master is installed by another

00:35:30,660 --> 00:35:35,940
master so we are going back to the

00:35:33,510 --> 00:35:37,170
origin of the world so we pass this

00:35:35,940 --> 00:35:39,510
discussion

00:35:37,170 --> 00:35:46,160
you will add known so you go for example

00:35:39,510 --> 00:35:46,160
to my service do we have network oh-ho

00:35:46,430 --> 00:35:51,480
always the network so we have a

00:35:49,260 --> 00:35:54,240
forty-two percent packet loss on the

00:35:51,480 --> 00:35:58,290
ipv6 connection but it's okay it seems

00:35:54,240 --> 00:36:01,770
we have no not this one here so you say

00:35:58,290 --> 00:36:06,930
new server you put a name for example EP

00:36:01,770 --> 00:36:12,059
2012 like this if you have a debian you

00:36:06,930 --> 00:36:14,640
do a PT get slap OS node you ask him or

00:36:12,059 --> 00:36:16,710
no then it ask you a few question it

00:36:14,640 --> 00:36:20,210
will register your debian ubuntu machine

00:36:16,710 --> 00:36:23,099
like that then it will generate here

00:36:20,210 --> 00:36:27,839
certificates like this which identify

00:36:23,099 --> 00:36:31,559
every computer in we uniquely we copy

00:36:27,839 --> 00:36:35,069
this to a USB key with a default minimal

00:36:31,559 --> 00:36:38,970
linux image we plug this on the pc start

00:36:35,069 --> 00:36:41,069
and finished so all the supplies device

00:36:38,970 --> 00:36:43,290
which we are currently deploying in

00:36:41,069 --> 00:36:46,349
people's house connected to optical

00:36:43,290 --> 00:36:50,900
fiber with a big telco company installed

00:36:46,349 --> 00:37:01,890
this way and we use an 18 years old guy

00:36:50,900 --> 00:37:06,299
who i would say who sorry who found a

00:37:01,890 --> 00:37:08,460
good job this way so what can you add to

00:37:06,299 --> 00:37:12,510
it you can add bare metal servers in a

00:37:08,460 --> 00:37:14,730
data center you can add private virtual

00:37:12,510 --> 00:37:16,319
machines on your OpenStack so if you

00:37:14,730 --> 00:37:19,200
have open stocked and really want to use

00:37:16,319 --> 00:37:21,089
it just put the image of slap where's

00:37:19,200 --> 00:37:23,700
boot on it then it's registered to the

00:37:21,089 --> 00:37:25,950
subway system done many of our customers

00:37:23,700 --> 00:37:28,589
they really want vmware although it

00:37:25,950 --> 00:37:31,559
makes the database somehow to ice slower

00:37:28,589 --> 00:37:33,150
than it was before they think it's the

00:37:31,559 --> 00:37:35,910
way because they've been brainwashed

00:37:33,150 --> 00:37:38,520
that virtualization is the only way so

00:37:35,910 --> 00:37:41,640
we just give them a virtual image and we

00:37:38,520 --> 00:37:44,250
keep on doing you can take any machine

00:37:41,640 --> 00:37:46,230
from amazon OVH County whoever and

00:37:44,250 --> 00:37:48,630
register it to the master know

00:37:46,230 --> 00:37:51,359
what's more funny is that you can reuse

00:37:48,630 --> 00:37:53,310
all the PC in your office because there

00:37:51,359 --> 00:37:55,470
is slop ways for windows too based on

00:37:53,310 --> 00:37:57,720
cygwin so you double click install it

00:37:55,470 --> 00:38:01,800
then all your windows machine become

00:37:57,720 --> 00:38:05,310
nearly as nice as Linux and after that

00:38:01,800 --> 00:38:08,220
you can put it on a tablet oh that's not

00:38:05,310 --> 00:38:10,050
a joke it really works I'll show you a

00:38:08,220 --> 00:38:12,660
wordpress running on slap OS on the

00:38:10,050 --> 00:38:16,740
tablet with a five dollar cpu from china

00:38:12,660 --> 00:38:21,119
called the allwinner a10 and we run it

00:38:16,740 --> 00:38:24,720
also on mobile phones so that means we

00:38:21,119 --> 00:38:28,800
have unified the cloud not as good as

00:38:24,720 --> 00:38:30,660
the higgs boson but nearly and so that

00:38:28,800 --> 00:38:33,119
means any resource whether it's on

00:38:30,660 --> 00:38:34,920
android or mobile phone or tablet or

00:38:33,119 --> 00:38:37,260
data center but we go to private cloud

00:38:34,920 --> 00:38:40,050
that becomes the same and we can move

00:38:37,260 --> 00:38:43,050
any software any process from any of

00:38:40,050 --> 00:38:46,290
these device to any other because we are

00:38:43,050 --> 00:38:48,780
based on diversity if somebody is

00:38:46,290 --> 00:38:52,230
imagine a nasty Secret Service puts a

00:38:48,780 --> 00:38:54,290
kind of I don't know back door in a

00:38:52,230 --> 00:38:56,670
certain kernel of a certain distribution

00:38:54,290 --> 00:38:58,770
because we use different linux

00:38:56,670 --> 00:39:00,900
distribution not only one we have a

00:38:58,770 --> 00:39:03,840
chance that another distribution will

00:39:00,900 --> 00:39:06,720
keep on running and because we are

00:39:03,840 --> 00:39:08,640
compatible with Windows if it's on all

00:39:06,720 --> 00:39:11,400
linux kernel that things have been

00:39:08,640 --> 00:39:14,340
attacked and we have windows and BSD so

00:39:11,400 --> 00:39:17,250
we handle by design the diversity of

00:39:14,340 --> 00:39:21,630
computing power and we don't force any

00:39:17,250 --> 00:39:26,160
use of any specific distribution else

00:39:21,630 --> 00:39:28,920
it's too risky so you get your list of

00:39:26,160 --> 00:39:30,960
computers that's for the question but

00:39:28,920 --> 00:39:32,850
yes you still have a central point of

00:39:30,960 --> 00:39:35,130
failure well we are making a Federation

00:39:32,850 --> 00:39:38,490
of masters with a bit like a Federation

00:39:35,130 --> 00:39:39,900
of bank it's the same idea and then you

00:39:38,490 --> 00:39:42,980
can add a service and you do like this

00:39:39,900 --> 00:39:42,980
other service

00:39:44,280 --> 00:39:54,330
click I want a new service then eat key

00:39:49,520 --> 00:39:58,140
2012b what kind of service do you want a

00:39:54,330 --> 00:40:01,260
virtual machine an IDE a billing system

00:39:58,140 --> 00:40:03,120
a database well you see whether it's for

00:40:01,260 --> 00:40:05,370
storage virtual machine or whatever it's

00:40:03,120 --> 00:40:07,890
a service why do you want to handle a

00:40:05,370 --> 00:40:10,110
service of VN in a different way than a

00:40:07,890 --> 00:40:11,970
service of database it's the same

00:40:10,110 --> 00:40:19,770
concept from a management point of view

00:40:11,970 --> 00:40:21,330
so we'll add a wiki okay then next step

00:40:19,770 --> 00:40:22,920
is where you can contribute for now it

00:40:21,330 --> 00:40:25,170
takes five minutes to find the place

00:40:22,920 --> 00:40:26,970
allocate boot and start so if you want

00:40:25,170 --> 00:40:30,200
to help help us reduce it to five

00:40:26,970 --> 00:40:33,210
seconds maybe take six months work but

00:40:30,200 --> 00:40:38,940
absolutely feasible by using HTTP long

00:40:33,210 --> 00:40:44,220
polling so I confirm the service I say

00:40:38,940 --> 00:40:46,680
okay you can like I accept to pay then

00:40:44,220 --> 00:40:48,690
after that you can connect to the

00:40:46,680 --> 00:40:52,230
service so you go to the list of

00:40:48,690 --> 00:40:54,420
services you see that's the advantage of

00:40:52,230 --> 00:40:57,630
HTML presentation you can embed a

00:40:54,420 --> 00:41:00,690
browser page in a page with a zoom so

00:40:57,630 --> 00:41:03,120
you don't need to switch windows so here

00:41:00,690 --> 00:41:06,930
I have one service which is a vm here I

00:41:03,120 --> 00:41:11,340
have a service which is an IDE then the

00:41:06,930 --> 00:41:14,000
service has its URL I can click then I

00:41:11,340 --> 00:41:16,170
get into the service I just all that

00:41:14,000 --> 00:41:20,210
then I'll give you a few example of

00:41:16,170 --> 00:41:20,210
service that's a virtual machine Oh

00:41:22,740 --> 00:41:29,670
why okay doesn't react but it's by vmc

00:41:27,600 --> 00:41:32,400
that's an ERP actually that's the one of

00:41:29,670 --> 00:41:36,210
our company and that's a wordpress

00:41:32,400 --> 00:41:38,869
running on the tablet pc so if you want

00:41:36,210 --> 00:41:43,230
to see which tablet it runs on it is

00:41:38,869 --> 00:41:45,630
this one I asked him to show an example

00:41:43,230 --> 00:41:48,540
of the tablet it's a 100 euro tablet

00:41:45,630 --> 00:41:54,170
with a 10-inch screen 1 gigabyte ram and

00:41:48,540 --> 00:41:57,840
a RM processor so everything Chinese

00:41:54,170 --> 00:42:01,260
it's the first time a RM cpu costs less

00:41:57,840 --> 00:42:08,369
per burger MIPS than intel it's a big

00:42:01,260 --> 00:42:10,170
change and so we have another system

00:42:08,369 --> 00:42:12,270
where we actually don't allocate a

00:42:10,170 --> 00:42:16,260
single word press but we are located

00:42:12,270 --> 00:42:18,900
many many database with a system which

00:42:16,260 --> 00:42:20,490
does pushing pulling and everybody's

00:42:18,900 --> 00:42:23,250
talking each other to be sure that the

00:42:20,490 --> 00:42:27,840
backup are running well so now you will

00:42:23,250 --> 00:42:30,450
see why it can surpass human being this

00:42:27,840 --> 00:42:34,500
is a list of things we actually allocate

00:42:30,450 --> 00:42:37,140
yeah because if you have three or four

00:42:34,500 --> 00:42:39,660
and you must pull and push and do all

00:42:37,140 --> 00:42:43,380
the backup in all possible ways what

00:42:39,660 --> 00:42:47,160
used to be simple 18 Apache one Maria BB

00:42:43,380 --> 00:42:50,609
and no backup because people do the back

00:42:47,160 --> 00:42:53,520
up afterwards but now if you want to do

00:42:50,609 --> 00:42:55,859
things seriously you have the front end

00:42:53,520 --> 00:42:58,080
because the front end must be multiple

00:42:55,859 --> 00:43:00,210
potentially and one Maria DB and a

00:42:58,080 --> 00:43:03,750
backup Maria db2 and the back of Maria

00:43:00,210 --> 00:43:05,910
db3 we have an algorithm where we say

00:43:03,750 --> 00:43:07,920
how many replicas we want then it will

00:43:05,910 --> 00:43:10,730
do the whole orchestration of backup and

00:43:07,920 --> 00:43:15,320
services to guarantee resiliency of

00:43:10,730 --> 00:43:19,500
course no human being can handle that

00:43:15,320 --> 00:43:22,140
but with supplies and build out and

00:43:19,500 --> 00:43:26,000
actually hundred lines of code we can

00:43:22,140 --> 00:43:26,000
handle it completely automatically

00:43:26,320 --> 00:43:37,110
so how many four minutes for the demo I

00:43:30,910 --> 00:43:40,300
wanted to show quickly that's the IDE

00:43:37,110 --> 00:43:43,270
some people sometimes ask me how do you

00:43:40,300 --> 00:43:46,330
add an application to slap OS how does

00:43:43,270 --> 00:43:49,300
it look like programming slap Wes so

00:43:46,330 --> 00:43:53,470
here is some code well you just type a

00:43:49,300 --> 00:43:56,770
build-out script online you say where to

00:43:53,470 --> 00:44:00,670
download the source code for example

00:43:56,770 --> 00:44:04,420
Drupal 7 dot 14 here ok after you do

00:44:00,670 --> 00:44:07,840
that you click run then it will download

00:44:04,420 --> 00:44:12,430
compile build and make a binary cash

00:44:07,840 --> 00:44:15,490
based on the architecture done so if you

00:44:12,430 --> 00:44:22,170
know build out you know Subway's then

00:44:15,490 --> 00:44:22,170
you run your application ok

00:44:24,110 --> 00:44:28,940
then you can inspect what has been

00:44:26,600 --> 00:44:31,400
running and you see it launches an

00:44:28,940 --> 00:44:34,850
apache or chrome do monitor because also

00:44:31,400 --> 00:44:37,040
we every software for every software we

00:44:34,850 --> 00:44:40,760
put in slap OS we also explain how it

00:44:37,040 --> 00:44:42,830
should be administered to different

00:44:40,760 --> 00:44:45,430
application might have differences and

00:44:42,830 --> 00:44:49,760
min policies so you cannot actually

00:44:45,430 --> 00:44:52,390
split really sis admin and applications

00:44:49,760 --> 00:44:55,730
that's very close to the idea of DevOps

00:44:52,390 --> 00:44:58,100
so we have the maria DD the monitor we

00:44:55,730 --> 00:45:00,530
put tunnel so that we can secure ipv6

00:44:58,100 --> 00:45:03,470
connection and make different process

00:45:00,530 --> 00:45:06,890
connect through public networks which

00:45:03,470 --> 00:45:08,930
are not trustable then we inspect what

00:45:06,890 --> 00:45:11,320
has been deployed just by running the

00:45:08,930 --> 00:45:11,320
build out

00:45:15,079 --> 00:45:17,950
mm-hmm

00:45:19,940 --> 00:45:37,750
okay it's coming so i can see here up

00:45:28,330 --> 00:45:43,030
sorry they are empty i don't know why i

00:45:37,750 --> 00:45:43,030
will maybe show later during questions

00:45:47,940 --> 00:45:58,960
so future directions we have two missing

00:45:55,150 --> 00:46:02,019
things first we discovered that ipv6

00:45:58,960 --> 00:46:06,309
doesn't work in reality it was a big

00:46:02,019 --> 00:46:09,309
shock I don't mean that software are not

00:46:06,309 --> 00:46:12,250
ready for ipv6 no problem we put a

00:46:09,309 --> 00:46:15,069
tunnel with Esther no and redirect ipv6

00:46:12,250 --> 00:46:16,900
to ipv4 addresses in both ways done and

00:46:15,069 --> 00:46:20,829
we make every application compatible

00:46:16,900 --> 00:46:23,440
with ipv6 and secure not an issue the

00:46:20,829 --> 00:46:25,329
problem is that when you send a packet

00:46:23,440 --> 00:46:27,760
from Bulgaria to France which goes

00:46:25,329 --> 00:46:30,839
through Talia there's a router in Talia

00:46:27,760 --> 00:46:35,789
which have the first packet eat three

00:46:30,839 --> 00:46:40,119
bytes or something like that okay and

00:46:35,789 --> 00:46:42,579
when you take ipv6 from three actually

00:46:40,119 --> 00:46:45,460
an eighty percent of ipv6 traffic comes

00:46:42,579 --> 00:46:47,619
from France from the single isp because

00:46:45,460 --> 00:46:51,549
they were the only to provide ipv6 to

00:46:47,619 --> 00:46:55,539
their subscribers out of 200 address are

00:46:51,549 --> 00:46:59,799
located by the box three and not

00:46:55,539 --> 00:47:04,990
pingable and it's three different alarms

00:46:59,799 --> 00:47:07,750
every two hours yeah you are located 200

00:47:04,990 --> 00:47:09,700
a dress out of 200 the first we are not

00:47:07,750 --> 00:47:11,559
pingable five minutes then door two

00:47:09,700 --> 00:47:15,339
minutes then the next 32 minutes and the

00:47:11,559 --> 00:47:17,589
next 32 minutes what can you do so we

00:47:15,339 --> 00:47:20,019
have the tremendous issue due to that we

00:47:17,589 --> 00:47:22,990
were hosting a journalist site on ipv6

00:47:20,019 --> 00:47:24,160
using this technology then sometimes the

00:47:22,990 --> 00:47:25,720
people could read the newspaper

00:47:24,160 --> 00:47:27,519
sometimes not and we couldn't explain

00:47:25,720 --> 00:47:32,160
why we are not running the ipv6

00:47:27,519 --> 00:47:34,990
infrastructure from OVH largest I

00:47:32,160 --> 00:47:40,240
provide a hosting company in Europe and

00:47:34,990 --> 00:47:43,420
free well maybe 10 minutes a day simply

00:47:40,240 --> 00:47:45,400
no connection then we read an

00:47:43,420 --> 00:47:47,109
interesting report from google

00:47:45,400 --> 00:47:49,720
describing all their problems to

00:47:47,109 --> 00:47:52,990
implement ipv6 within google and whether

00:47:49,720 --> 00:47:56,769
it's respecting or not the standards so

00:47:52,990 --> 00:47:59,430
in short it doesn't work nowadays it

00:47:56,769 --> 00:48:04,830
could work

00:47:59,430 --> 00:48:07,540
but it doesn't work so we created a VPN

00:48:04,830 --> 00:48:12,010
we call it the unbreakable overlay

00:48:07,540 --> 00:48:15,700
Network every PC in home take support by

00:48:12,010 --> 00:48:20,920
upnp in their router and we make a mesh

00:48:15,700 --> 00:48:23,740
network over ipv4 between computers all

00:48:20,920 --> 00:48:26,020
over the world then on top of that we

00:48:23,740 --> 00:48:28,230
allocate ipv6 addresses and we put a

00:48:26,020 --> 00:48:31,660
dynamic routing protocol called Babel

00:48:28,230 --> 00:48:35,770
it's a protocol made by the author who

00:48:31,660 --> 00:48:39,220
demonstrated that olsr doesn't work but

00:48:35,770 --> 00:48:41,800
is yeah olsr is the protocol used by

00:48:39,220 --> 00:48:45,640
french army for connecting people on the

00:48:41,800 --> 00:48:47,560
field of a wireless mesh network but it

00:48:45,640 --> 00:48:49,360
doesn't work and Babel is something

00:48:47,560 --> 00:48:55,180
which does the same it works but is used

00:48:49,360 --> 00:48:57,700
by nobody so we tried it it works and

00:48:55,180 --> 00:49:00,550
this way we can make a network which

00:48:57,700 --> 00:49:03,820
nobody can break and also the ipv6

00:49:00,550 --> 00:49:07,090
relies on the Linux kernel no longer on

00:49:03,820 --> 00:49:10,570
routers which destroy packets so we have

00:49:07,090 --> 00:49:12,580
a solution to make a reliable ipv6

00:49:10,570 --> 00:49:15,400
Network this way that's the first

00:49:12,580 --> 00:49:19,740
direction the second future direction is

00:49:15,400 --> 00:49:23,590
to recognize that servers are useless in

00:49:19,740 --> 00:49:26,620
ninety percent applications and that the

00:49:23,590 --> 00:49:30,220
cloud model is such in a sense is

00:49:26,620 --> 00:49:34,030
meaningless this is office jas it is

00:49:30,220 --> 00:49:36,610
only running in JavaScript you can for

00:49:34,030 --> 00:49:41,370
example create a new text document only

00:49:36,610 --> 00:49:44,110
JavaScript it's a prototype for now but

00:49:41,370 --> 00:49:46,210
we are not in a hurry to finish it we

00:49:44,110 --> 00:49:49,120
really want to make it well rather than

00:49:46,210 --> 00:49:51,520
finish it quickly and when you save it

00:49:49,120 --> 00:49:53,560
has a kind of component system which

00:49:51,520 --> 00:49:55,900
will save a bit of the document

00:49:53,560 --> 00:49:58,150
encrypted on local storage another bit

00:49:55,900 --> 00:50:01,480
on a remove webdav storage another bit

00:49:58,150 --> 00:50:04,240
maybe on dropbox it can gather from the

00:50:01,480 --> 00:50:06,820
browser any available storage source as

00:50:04,240 --> 00:50:09,790
long as you can find storage for free

00:50:06,820 --> 00:50:11,650
with this model you can do something

00:50:09,790 --> 00:50:13,300
which looks like cloud because

00:50:11,650 --> 00:50:16,210
for normal user whether it's running in

00:50:13,300 --> 00:50:19,270
JavaScript inside one a back-end server

00:50:16,210 --> 00:50:21,630
nobody cares it's like it's fake cloud

00:50:19,270 --> 00:50:24,400
but for normal users it's the same and

00:50:21,630 --> 00:50:26,920
then we can actually distribute cloud

00:50:24,400 --> 00:50:30,190
application without purchasing a single

00:50:26,920 --> 00:50:32,890
server so look those who do this way

00:50:30,190 --> 00:50:35,080
they purchase zero server Google they

00:50:32,890 --> 00:50:37,660
purchase a lot of servers that's a

00:50:35,080 --> 00:50:39,720
fantastic economic advantage for the one

00:50:37,660 --> 00:50:42,790
who doesn't need to purchase the service

00:50:39,720 --> 00:50:45,550
then how do we keep the private data in

00:50:42,790 --> 00:50:48,580
such way that's why we run slap OS on

00:50:45,550 --> 00:50:50,500
mobile phones if at any time we can run

00:50:48,580 --> 00:50:53,560
a small web dev storage an

00:50:50,500 --> 00:50:55,030
authentication system on our phones then

00:50:53,560 --> 00:50:56,860
we don't need either Facebook

00:50:55,030 --> 00:51:01,150
authentication systems which are

00:50:56,860 --> 00:51:04,000
centralized so this is important because

00:51:01,150 --> 00:51:05,620
it shows there is a hope for doing more

00:51:04,000 --> 00:51:10,150
free software and open source in the

00:51:05,620 --> 00:51:12,340
future if we don't need servers to

00:51:10,150 --> 00:51:16,360
distribute applications to everyone and

00:51:12,340 --> 00:51:18,150
if it is just a Z as got to put a very

00:51:16,360 --> 00:51:20,770
small application on your mobile phone

00:51:18,150 --> 00:51:24,730
then open source developers can just

00:51:20,770 --> 00:51:28,360
write in JavaScript whatever is used by

00:51:24,730 --> 00:51:30,160
the end user and this will be stored on

00:51:28,360 --> 00:51:32,920
the mobile phone which they all already

00:51:30,160 --> 00:51:36,820
have and there will be nobody in between

00:51:32,920 --> 00:51:40,420
and it will cost nothing so this is

00:51:36,820 --> 00:51:44,110
probably the real future the two points

00:51:40,420 --> 00:51:48,220
I showed unbreakable over network and

00:51:44,110 --> 00:51:50,650
office GS are both required without ipv6

00:51:48,220 --> 00:51:53,650
and global IP addresses which connect

00:51:50,650 --> 00:51:57,120
the phone to your browser it's hard to

00:51:53,650 --> 00:51:59,650
make them talk without a third party and

00:51:57,120 --> 00:52:01,570
without office jes and a good framework

00:51:59,650 --> 00:52:04,570
it will be difficult for people to

00:52:01,570 --> 00:52:10,420
develop such applications so I think

00:52:04,570 --> 00:52:13,170
it's enough ice yeah the time is past so

00:52:10,420 --> 00:52:13,170
time to questions

00:52:18,930 --> 00:52:25,330
okay hi first question you say that the

00:52:23,170 --> 00:52:29,230
backup system issues with the clouds are

00:52:25,330 --> 00:52:31,060
reliable the party the cup system backup

00:52:29,230 --> 00:52:34,450
system issues by the clause is

00:52:31,060 --> 00:52:36,310
unreliable why did replication yes

00:52:34,450 --> 00:52:39,520
remicade application why'd you two

00:52:36,310 --> 00:52:43,590
plication system is more reliable so

00:52:39,520 --> 00:52:48,160
what is unreliable is a system where the

00:52:43,590 --> 00:52:52,210
replication are okay if you launch our

00:52:48,160 --> 00:52:55,990
synch with the not appropriate commands

00:52:52,210 --> 00:52:58,510
and you erase files on a and after you

00:52:55,990 --> 00:53:02,140
launch our thing they are you erased on

00:52:58,510 --> 00:53:05,710
B then this will make a very dangerous

00:53:02,140 --> 00:53:07,870
system for resiliency because maybe

00:53:05,710 --> 00:53:10,480
someone is going to attack system a

00:53:07,870 --> 00:53:12,910
delete some files and after our sink is

00:53:10,480 --> 00:53:17,170
run they are deleted on the rip on the

00:53:12,910 --> 00:53:20,340
clone system but if you put our started

00:53:17,170 --> 00:53:24,550
back up which is similar to our sink and

00:53:20,340 --> 00:53:27,370
if the replication is triggered not by

00:53:24,550 --> 00:53:29,980
system a but by another system which

00:53:27,370 --> 00:53:32,530
pumps from a and pushes from be with the

00:53:29,980 --> 00:53:35,800
right set of users then you don't have

00:53:32,530 --> 00:53:38,830
the risk that the an attack on a will

00:53:35,800 --> 00:53:42,370
lead to an attack on the backup and also

00:53:38,830 --> 00:53:45,010
because the backup is history you don't

00:53:42,370 --> 00:53:47,170
have the risk that deleting stuff on a

00:53:45,010 --> 00:53:52,210
will end up destroying the data on the

00:53:47,170 --> 00:53:53,950
replica that's the only reason then if a

00:53:52,210 --> 00:53:56,230
replication system has all these

00:53:53,950 --> 00:53:59,080
features not works I mean you say that

00:53:56,230 --> 00:54:02,800
if applicant Fisher's attempt to Helen

00:53:59,080 --> 00:54:05,920
errors softwares yes why did this system

00:54:02,800 --> 00:54:08,440
which is much more complex will have

00:54:05,920 --> 00:54:10,740
less and errors okay so it is not only

00:54:08,440 --> 00:54:16,930
the errors of the replication system

00:54:10,740 --> 00:54:19,990
okay one reason is the testing if every

00:54:16,930 --> 00:54:23,320
day you rebuild the architecture from

00:54:19,990 --> 00:54:25,600
scratch from the dump and through a

00:54:23,320 --> 00:54:27,190
restore from a dump of a database

00:54:25,600 --> 00:54:29,320
and then you run a test to make sure

00:54:27,190 --> 00:54:32,050
that by restoring you get something

00:54:29,320 --> 00:54:35,460
which is valid in terms of operation at

00:54:32,050 --> 00:54:39,160
least you have a real test any time that

00:54:35,460 --> 00:54:47,670
the clone is able to take over from the

00:54:39,160 --> 00:54:53,050
destroyed master so there are you sure

00:54:47,670 --> 00:54:55,530
okay okay then I give you another case

00:54:53,050 --> 00:55:01,840
but this is the more interesting one

00:54:55,530 --> 00:55:03,940
it's so I hope it's done but finished we

00:55:01,840 --> 00:55:06,730
have only two minutes left if we want we

00:55:03,940 --> 00:55:08,800
can I can see if there is any other

00:55:06,730 --> 00:55:11,470
question otherwise you can discuss this

00:55:08,800 --> 00:55:13,300
later imagine two storage area network

00:55:11,470 --> 00:55:15,940
synchronized with a real time or

00:55:13,300 --> 00:55:18,790
synchronous synchronization file system

00:55:15,940 --> 00:55:21,670
on a is destroyed due to a bag of the

00:55:18,790 --> 00:55:24,250
file system or corrupted then the

00:55:21,670 --> 00:55:28,810
replica replicates the file system in a

00:55:24,250 --> 00:55:32,140
state which is let's say partly

00:55:28,810 --> 00:55:34,080
corrupted but the corruption only is

00:55:32,140 --> 00:55:36,820
only discovered maybe after month

00:55:34,080 --> 00:55:40,240
because the impact of the corruption is

00:55:36,820 --> 00:55:44,020
not instant you see this kind of

00:55:40,240 --> 00:55:46,750
mercenary if you don't have in such a

00:55:44,020 --> 00:55:52,200
case a full backup which can be restored

00:55:46,750 --> 00:55:55,690
to rebuild the system then you are dead

00:55:52,200 --> 00:55:57,760
but that's the kind and we had such a

00:55:55,690 --> 00:56:02,740
case in one customer with a storage area

00:55:57,760 --> 00:56:05,140
network so you see look so the

00:56:02,740 --> 00:56:07,240
replication works but replicates

00:56:05,140 --> 00:56:13,840
something which is an error which is

00:56:07,240 --> 00:56:17,020
only discovered wait wait later hi yeah

00:56:13,840 --> 00:56:19,450
my questions so you say the service they

00:56:17,020 --> 00:56:22,570
are hosted some of them they are hosted

00:56:19,450 --> 00:56:24,790
at people's home yeah and I don't

00:56:22,570 --> 00:56:27,490
understand about this security and

00:56:24,790 --> 00:56:29,470
privacy and so how to ensure that the

00:56:27,490 --> 00:56:31,369
home users they won't attack on the

00:56:29,470 --> 00:56:36,259
server okay

00:56:31,369 --> 00:56:38,480
the current status of law is that if you

00:56:36,259 --> 00:56:41,059
put a server in it okay I show you

00:56:38,480 --> 00:56:43,329
something it's a catalogue of spying

00:56:41,059 --> 00:56:46,220
tools which I purchased by governments

00:56:43,329 --> 00:56:49,460
I'll show you because nowadays the state

00:56:46,220 --> 00:56:51,440
of law is nearly to force cloud

00:56:49,460 --> 00:56:53,420
providers to put back doors for

00:56:51,440 --> 00:56:55,789
government to see whatever they want and

00:56:53,420 --> 00:56:58,339
the one law and order in China would be

00:56:55,789 --> 00:57:00,549
political in France it's rather

00:56:58,339 --> 00:57:03,380
infringement on trademark and copyright

00:57:00,549 --> 00:57:05,809
which gives to the customs the right to

00:57:03,380 --> 00:57:10,670
spy you in u.s. you have the Patriot Act

00:57:05,809 --> 00:57:14,059
so every country nowadays mmm has some

00:57:10,670 --> 00:57:18,410
ways to massively spy if they wish the

00:57:14,059 --> 00:57:22,190
data in data centers and secret services

00:57:18,410 --> 00:57:24,109
do go and meet large players if

00:57:22,190 --> 00:57:26,329
everything is in homes and it's designed

00:57:24,109 --> 00:57:28,309
in a way you can't get in for example by

00:57:26,329 --> 00:57:30,970
generating a random root password that

00:57:28,309 --> 00:57:34,789
start and having no way to log in by SSH

00:57:30,970 --> 00:57:37,519
then this is less risky but it is Sorry

00:57:34,789 --> 00:57:39,499
Sorry I have a test of these expression

00:57:37,519 --> 00:57:41,900
and also that one but we are running out

00:57:39,499 --> 00:57:44,359
of time so if you want you can discuss

00:57:41,900 --> 00:57:49,539
this outside that we have to change the

00:57:44,359 --> 00:57:49,539

YouTube URL: https://www.youtube.com/watch?v=U7twgv9IhqQ


