Title: The integrators guide to duct-taping
Publication date: 2015-04-19
Playlist: EuroPython 2012
Description: 
	[EuroPython 2012] S Deponti - 5 JULY 2012 in "Track Ravioli"
Captions: 
	00:01:05,110 --> 00:01:07,199
you

00:01:27,300 --> 00:01:29,900
she

00:01:55,280 --> 00:02:00,170
okay so this talk will be held by simon

00:01:58,790 --> 00:02:02,960
le ponte which is an open source

00:02:00,170 --> 00:02:05,659
interest and has accumulated a great

00:02:02,960 --> 00:02:07,850
experience in web development and the

00:02:05,659 --> 00:02:11,540
stork is the integration integrator

00:02:07,850 --> 00:02:24,770
guide to duck typing okay thank you very

00:02:11,540 --> 00:02:27,500
much so well that's me sort of so I've

00:02:24,770 --> 00:02:30,650
been developing impact when since 2005 I

00:02:27,500 --> 00:02:34,880
work at a company called abstract where

00:02:30,650 --> 00:02:37,130
we do mainly consulting and that's how I

00:02:34,880 --> 00:02:40,459
actually accumulated a lot some

00:02:37,130 --> 00:02:42,350
experience doing integration work and I

00:02:40,459 --> 00:02:44,000
might be slightly paranoid about

00:02:42,350 --> 00:02:47,420
security in clean code which is

00:02:44,000 --> 00:02:51,550
something I actually realize yesterday

00:02:47,420 --> 00:02:56,600
evening while reviewing the slides so

00:02:51,550 --> 00:02:59,630
what's on this talk in this oak we will

00:02:56,600 --> 00:03:01,549
I will give you a high-level overview of

00:02:59,630 --> 00:03:07,280
all the problems you might be facing

00:03:01,549 --> 00:03:10,000
when doing well integration and I won't

00:03:07,280 --> 00:03:12,769
be using a lot of code examples because

00:03:10,000 --> 00:03:16,190
you know integration problems can be

00:03:12,769 --> 00:03:19,100
actually quite quite complicated and

00:03:16,190 --> 00:03:25,760
sometimes convoluted so finding a good

00:03:19,100 --> 00:03:29,090
code example was somewhat difficult okay

00:03:25,760 --> 00:03:31,810
so what's exactly duct taping duct

00:03:29,090 --> 00:03:35,930
taping is actually the generate form of

00:03:31,810 --> 00:03:38,329
integration doing during development we

00:03:35,930 --> 00:03:41,180
actually have to do usually a lot of

00:03:38,329 --> 00:03:43,730
integration because we generally don't

00:03:41,180 --> 00:03:46,760
want to for example take care of

00:03:43,730 --> 00:03:49,519
ourselves of developing code to solve a

00:03:46,760 --> 00:03:53,870
particular problem because it's complex

00:03:49,519 --> 00:03:56,989
because it's just too long or probably

00:03:53,870 --> 00:04:00,440
because you you you know you can do it

00:03:56,989 --> 00:04:03,590
in a better way but or sometimes also

00:04:00,440 --> 00:04:07,640
because you have to talk with other

00:04:03,590 --> 00:04:09,020
software other services and you actually

00:04:07,640 --> 00:04:12,860
have to integrate with them

00:04:09,020 --> 00:04:17,230
so duct taping happens when you do your

00:04:12,860 --> 00:04:20,989
integration in a suboptimal way or you

00:04:17,230 --> 00:04:24,590
or you are integrating with a suboptimal

00:04:20,989 --> 00:04:27,140
component by super flea no I don't mean

00:04:24,590 --> 00:04:30,350
it's optimal in general but suboptimal

00:04:27,140 --> 00:04:32,450
for your particular task a lot of times

00:04:30,350 --> 00:04:35,720
we might you know you might find a

00:04:32,450 --> 00:04:40,310
library or service that sort of does

00:04:35,720 --> 00:04:42,020
what you want but not quite and then you

00:04:40,310 --> 00:04:45,590
sort of start working around this

00:04:42,020 --> 00:04:47,960
problem that its yeah it does it but

00:04:45,590 --> 00:04:52,270
with a little bit of fiddling and that's

00:04:47,960 --> 00:04:55,490
feeling that is that taping actually so

00:04:52,270 --> 00:04:59,240
when you decide to integrate something

00:04:55,490 --> 00:05:02,450
it's very important that you choose the

00:04:59,240 --> 00:05:05,170
right Pete piece of code to integrate

00:05:02,450 --> 00:05:08,800
the first thing you have to look at is

00:05:05,170 --> 00:05:12,020
the best ap I mean by PA I mean actually

00:05:08,800 --> 00:05:15,590
well if it's service it doesn't maybe

00:05:12,020 --> 00:05:19,100
have a I mean not only thing as a proper

00:05:15,590 --> 00:05:21,620
API but anyway when you are integrating

00:05:19,100 --> 00:05:26,750
either if it's library a service or

00:05:21,620 --> 00:05:29,240
activity you have to check that in its

00:05:26,750 --> 00:05:31,970
documentation you can find an example

00:05:29,240 --> 00:05:34,490
for your use case if there isn't an

00:05:31,970 --> 00:05:37,100
example for your use case you'll

00:05:34,490 --> 00:05:39,380
probably end up duct taping then the

00:05:37,100 --> 00:05:40,700
second thing you should always try to

00:05:39,380 --> 00:05:44,060
prefer things that are under your

00:05:40,700 --> 00:05:45,530
control okay which is sort of weird

00:05:44,060 --> 00:05:48,410
because you say okay we are integrating

00:05:45,530 --> 00:05:51,110
something its external but by under your

00:05:48,410 --> 00:05:56,510
control I mean something that you

00:05:51,110 --> 00:05:59,740
install the to manage and very important

00:05:56,510 --> 00:06:03,110
thing it's it shouldn't be something or

00:05:59,740 --> 00:06:05,540
at least it's preferable to use stuff

00:06:03,110 --> 00:06:07,820
that doesn't actually need to pass hit

00:06:05,540 --> 00:06:11,270
big chunks of data or reprocess your

00:06:07,820 --> 00:06:15,800
data in the meantime for example any

00:06:11,270 --> 00:06:20,030
soap any any soap web service is a very

00:06:15,800 --> 00:06:22,230
big offender in this regard so the done

00:06:20,030 --> 00:06:23,820
in desoto actually I'll be

00:06:22,230 --> 00:06:26,340
sort of walking you through different

00:06:23,820 --> 00:06:28,790
levels of fecal tea so the first thing

00:06:26,340 --> 00:06:31,140
is libraries and you might say okay

00:06:28,790 --> 00:06:34,050
libraries in isn't really integrating

00:06:31,140 --> 00:06:37,080
you know if you even okay besides the

00:06:34,050 --> 00:06:38,820
hello world any more complex patent

00:06:37,080 --> 00:06:41,390
application you'll be using libraries

00:06:38,820 --> 00:06:43,950
you know import something so that

00:06:41,390 --> 00:06:47,510
technically isn't integration but

00:06:43,950 --> 00:06:51,000
sometimes if you're not using you know

00:06:47,510 --> 00:06:54,570
very well known libraries you might end

00:06:51,000 --> 00:06:57,120
up with using a library that's not quite

00:06:54,570 --> 00:06:58,950
the right one for you but you don't have

00:06:57,120 --> 00:07:00,840
any choice it's the only choice

00:06:58,950 --> 00:07:03,390
available or the other probably

00:07:00,840 --> 00:07:05,940
succulent more so what you have to do is

00:07:03,390 --> 00:07:08,610
to actually wrap the or maybe it's too

00:07:05,940 --> 00:07:12,210
low level and what you have to do is to

00:07:08,610 --> 00:07:14,310
wrap this library and to provide

00:07:12,210 --> 00:07:18,090
actually a nicer interface for you for

00:07:14,310 --> 00:07:21,270
yourself to use later on but in wrapping

00:07:18,090 --> 00:07:23,280
it's okay if you don't do wrapping and

00:07:21,270 --> 00:07:24,570
start using the library as it isn't

00:07:23,280 --> 00:07:27,390
especially if it's a very low level

00:07:24,570 --> 00:07:30,930
you're already duct taping and you will

00:07:27,390 --> 00:07:35,190
regret it very badly but even when doing

00:07:30,930 --> 00:07:37,770
wrapping you might have you might make

00:07:35,190 --> 00:07:40,290
certain errors the first thing when

00:07:37,770 --> 00:07:42,450
you're wrapping the library then this is

00:07:40,290 --> 00:07:45,240
very important is to actually understand

00:07:42,450 --> 00:07:47,330
what the library does and you can try to

00:07:45,240 --> 00:07:52,920
guess what are the design decisions

00:07:47,330 --> 00:07:54,780
behind a certain a certain API sometimes

00:07:52,920 --> 00:07:57,590
you look at the APR the first time is

00:07:54,780 --> 00:08:02,340
like what's this I mean seriously

00:07:57,590 --> 00:08:04,950
it doesn't make sense but if they've it

00:08:02,340 --> 00:08:08,490
has been written that way either the guy

00:08:04,950 --> 00:08:11,070
writing it is a complete idiot or he had

00:08:08,490 --> 00:08:13,890
to write it that way because of some

00:08:11,070 --> 00:08:18,660
internal problems and generally the

00:08:13,890 --> 00:08:21,980
latter is the more probable solution so

00:08:18,660 --> 00:08:28,770
what one thing you should never do is

00:08:21,980 --> 00:08:30,540
not respect the scope of the API okay

00:08:28,770 --> 00:08:31,560
this is a very stupid example if you

00:08:30,540 --> 00:08:34,140
have something that's called a

00:08:31,560 --> 00:08:35,729
connection it's probably not meant to be

00:08:34,140 --> 00:08:37,829
instantiated over and

00:08:35,729 --> 00:08:42,209
you should accentuate it once and then

00:08:37,829 --> 00:08:44,310
use it multiple times but the same for a

00:08:42,209 --> 00:08:46,470
lot of other things if there is an

00:08:44,310 --> 00:08:49,079
object that being an API is pretty much

00:08:46,470 --> 00:08:52,410
a singleton you should not instant ate

00:08:49,079 --> 00:08:54,959
it over and over it should actually

00:08:52,410 --> 00:08:59,130
remain a singleton evening in your

00:08:54,959 --> 00:09:01,339
wrapping the other thing is actually

00:08:59,130 --> 00:09:04,920
hiding things it is very very

00:09:01,339 --> 00:09:07,529
problematic because a lot of wrapping

00:09:04,920 --> 00:09:09,740
I've seen it's it's you know like

00:09:07,529 --> 00:09:12,089
they've wrapped the API something

00:09:09,740 --> 00:09:14,370
happens in the low-level library and

00:09:12,089 --> 00:09:17,970
then you get Oh an error occurred yeah

00:09:14,370 --> 00:09:21,920
thanks I know tell me which other and

00:09:17,970 --> 00:09:24,269
how can I actually recover from it and

00:09:21,920 --> 00:09:28,350
this is a very common error and it

00:09:24,269 --> 00:09:31,920
actually quite drives me mad Oh actually

00:09:28,350 --> 00:09:35,220
this example for example you know the

00:09:31,920 --> 00:09:38,250
the i/o error it provides you with a lot

00:09:35,220 --> 00:09:40,620
more information than you might think

00:09:38,250 --> 00:09:44,490
you know you're trying to load from a

00:09:40,620 --> 00:09:46,410
file a summer occurs and sometimes oh

00:09:44,490 --> 00:09:48,930
the file doesn't exist you go there

00:09:46,410 --> 00:09:50,600
under file exists but maybe you didn't

00:09:48,930 --> 00:09:53,910
have the right permissions or maybe the

00:09:50,600 --> 00:09:57,750
selinux in it which you'll never call

00:09:53,910 --> 00:09:59,819
otherwise if if you don't know that it's

00:09:57,750 --> 00:10:01,410
a permission problem and I are will

00:09:59,819 --> 00:10:05,910
please tell you that the fun is there

00:10:01,410 --> 00:10:10,500
but you can read it the last thing is

00:10:05,910 --> 00:10:14,010
actually reducing the flexibility of for

00:10:10,500 --> 00:10:15,209
example a low-level library it's you

00:10:14,010 --> 00:10:17,279
know quite common for a low-level

00:10:15,209 --> 00:10:20,010
library to have a lot of parameters that

00:10:17,279 --> 00:10:23,519
you're right okay I don't really want to

00:10:20,010 --> 00:10:25,709
expose this but at the same time they

00:10:23,519 --> 00:10:29,670
might be important later so while you're

00:10:25,709 --> 00:10:32,040
hiding it you shouldn't do it in a way

00:10:29,670 --> 00:10:34,260
that's not pluggable or configurable in

00:10:32,040 --> 00:10:37,860
a way because if later on you realize

00:10:34,260 --> 00:10:41,519
that for example here we have a mac size

00:10:37,860 --> 00:10:43,470
that you wore whatever something big 10

00:10:41,519 --> 00:10:44,899
maybe you might realize that by doing so

00:10:43,470 --> 00:10:46,579
for example the

00:10:44,899 --> 00:10:48,920
I don't know the is trying to

00:10:46,579 --> 00:10:52,699
instantiate the buffer that's that large

00:10:48,920 --> 00:10:58,329
and you realize later in production that

00:10:52,699 --> 00:11:00,949
it's reading up a lot a lot of memory so

00:10:58,329 --> 00:11:03,319
if you do something like this and do it

00:11:00,949 --> 00:11:06,439
repeatedly it might become soon very

00:11:03,319 --> 00:11:08,689
hard to actually go in the and refactor

00:11:06,439 --> 00:11:10,550
the whole thing out so whenever there is

00:11:08,689 --> 00:11:13,249
a parameter try to get it from an answer

00:11:10,550 --> 00:11:19,999
or a constant or whatever but don't

00:11:13,249 --> 00:11:22,639
don't actually completely hide it so and

00:11:19,999 --> 00:11:25,550
this is for Python libraries then

00:11:22,639 --> 00:11:28,970
sometimes even if most useful library is

00:11:25,550 --> 00:11:32,869
actually thankfully a Python wrappers

00:11:28,970 --> 00:11:35,689
you might end up having to integrate the

00:11:32,869 --> 00:11:40,879
library written another language usually

00:11:35,689 --> 00:11:43,220
C or C++ actually Python makes this very

00:11:40,879 --> 00:11:46,699
easy because you can use something like

00:11:43,220 --> 00:11:52,129
site on or C types or well I forgot the

00:11:46,699 --> 00:11:53,839
others but it's not actually very hard

00:11:52,129 --> 00:11:58,579
especially if you have it to do a very

00:11:53,839 --> 00:12:02,540
classic wrapping but then you have to

00:11:58,579 --> 00:12:05,629
start to think about how the low-level

00:12:02,540 --> 00:12:07,459
library at this point handles sorting

00:12:05,629 --> 00:12:10,970
things one very very important thing is

00:12:07,459 --> 00:12:13,819
multi trading a multiprocessing it's

00:12:10,970 --> 00:12:16,730
really really easy to start sending from

00:12:13,819 --> 00:12:19,009
one threat to another stuff that that's

00:12:16,730 --> 00:12:22,579
that's actually not thread-safe or even

00:12:19,009 --> 00:12:24,529
worse between processes because for

00:12:22,579 --> 00:12:26,929
example python has the very useful

00:12:24,529 --> 00:12:28,639
actually multiprocessing library well

00:12:26,929 --> 00:12:31,639
you can actually send messages between

00:12:28,639 --> 00:12:33,019
processes but if you roll up level

00:12:31,639 --> 00:12:34,910
library somewhere and it's data

00:12:33,019 --> 00:12:38,600
structures as something like a

00:12:34,910 --> 00:12:40,759
connection you can send it over between

00:12:38,600 --> 00:12:43,249
different processes and you're going to

00:12:40,759 --> 00:12:45,679
get ours very very hard to debug so

00:12:43,249 --> 00:12:47,720
always have a look at the data

00:12:45,679 --> 00:12:49,910
structures before which is that very

00:12:47,720 --> 00:12:52,129
important then they tell you how the the

00:12:49,910 --> 00:12:54,829
whole library reasons you know it's the

00:12:52,129 --> 00:12:57,410
stacks and the second thing you should

00:12:54,829 --> 00:12:58,230
do is to not duplicate the data

00:12:57,410 --> 00:13:01,560
structures

00:12:58,230 --> 00:13:03,990
because butter structures can grow

00:13:01,560 --> 00:13:06,420
really big and if you start duplicating

00:13:03,990 --> 00:13:08,970
them sooner or later you'll find that

00:13:06,420 --> 00:13:13,500
your process is taking up five gigabytes

00:13:08,970 --> 00:13:18,780
of memory and you don't know why the

00:13:13,500 --> 00:13:23,430
last thing very important is that well

00:13:18,780 --> 00:13:25,980
see em it's lower level c++ sometimes

00:13:23,430 --> 00:13:27,990
don't send up really meaningful errors I

00:13:25,980 --> 00:13:32,040
mean besides the segmentation faults

00:13:27,990 --> 00:13:35,700
which you can debug anyway but having

00:13:32,040 --> 00:13:37,500
for example lxml is a not very the

00:13:35,700 --> 00:13:39,090
platform rapper leg slipped in this

00:13:37,500 --> 00:13:42,510
regard because sometimes you have a

00:13:39,090 --> 00:13:45,240
problem usually with your XML and it's

00:13:42,510 --> 00:13:47,970
not a bug in the library but you end up

00:13:45,240 --> 00:13:50,970
with a see errors i'm wearing I don't

00:13:47,970 --> 00:13:54,000
know pass dot C and it's like Oh a

00:13:50,970 --> 00:13:57,000
narrow curve there yeah okay but what's

00:13:54,000 --> 00:14:00,840
the error actually so you should always

00:13:57,000 --> 00:14:05,190
be very careful because actually this is

00:14:00,840 --> 00:14:07,140
very important later because when you

00:14:05,190 --> 00:14:11,670
actually go into production this might

00:14:07,140 --> 00:14:14,610
be the only thing you have so the next

00:14:11,670 --> 00:14:16,680
thing is external processes a lot of

00:14:14,610 --> 00:14:18,480
times you might end up having a small

00:14:16,680 --> 00:14:22,500
applications like like a small binary

00:14:18,480 --> 00:14:26,280
and a trivial example is to convert

00:14:22,500 --> 00:14:28,230
stuff between formats you know nobody

00:14:26,280 --> 00:14:32,580
probably wants to write something to

00:14:28,230 --> 00:14:36,150
convert I don't know docx to for dissing

00:14:32,580 --> 00:14:38,550
formats but there are a lot of binary

00:14:36,150 --> 00:14:42,210
tools that do that so you might say oh

00:14:38,550 --> 00:14:44,610
it's simple you know it's it's it's unix

00:14:42,210 --> 00:14:48,390
I just point process I send in the

00:14:44,610 --> 00:14:50,100
daytime and I get the output and you

00:14:48,390 --> 00:14:53,580
probably even get a nice documentation

00:14:50,100 --> 00:14:55,260
you can say binary minus minus help and

00:14:53,580 --> 00:14:57,930
you get all the parameters and you say

00:14:55,260 --> 00:15:01,260
oh it's very simple it's very simple but

00:14:57,930 --> 00:15:03,660
then it's not because the first thing is

00:15:01,260 --> 00:15:05,340
that they are actually black boxes so

00:15:03,660 --> 00:15:08,600
you don't know what the hell they're

00:15:05,340 --> 00:15:13,519
doing and therefore

00:15:08,600 --> 00:15:15,649
I you know for example they the pattern

00:15:13,519 --> 00:15:20,350
of execution it might don't be linear

00:15:15,649 --> 00:15:22,759
for example for a very small file the

00:15:20,350 --> 00:15:24,920
metron pretty quickly then you just

00:15:22,759 --> 00:15:27,380
increase the size of beats and then it

00:15:24,920 --> 00:15:32,060
takes suddenly five minutes because of

00:15:27,380 --> 00:15:34,040
some different reason and and this is a

00:15:32,060 --> 00:15:35,690
quite a problem because you're doing it

00:15:34,040 --> 00:15:39,680
in a synchronous way so you call the

00:15:35,690 --> 00:15:42,050
binary and wait until the binary has

00:15:39,680 --> 00:15:45,310
finished and the worst thing is that

00:15:42,050 --> 00:15:48,470
every time they die you don't know why

00:15:45,310 --> 00:15:53,600
unless they've been so helpful to print

00:15:48,470 --> 00:15:56,720
out some clues so the problem before

00:15:53,600 --> 00:15:59,420
that I was saying about the execution

00:15:56,720 --> 00:16:04,790
time being unpredictable even try to

00:15:59,420 --> 00:16:07,089
solve by going a synchronous and I mean

00:16:04,790 --> 00:16:09,949
it's it's almost simply say okay yo

00:16:07,089 --> 00:16:14,899
synchronous I don't care how long it how

00:16:09,949 --> 00:16:16,579
long it takes now a synchronous is you

00:16:14,899 --> 00:16:21,079
know sort of you oh I found a solution

00:16:16,579 --> 00:16:22,939
but then again it's it's a full solution

00:16:21,079 --> 00:16:24,920
because you're layering one problem on

00:16:22,939 --> 00:16:28,339
top of another because during a

00:16:24,920 --> 00:16:31,610
synchronous stuff is hard to do with try

00:16:28,339 --> 00:16:34,040
them in and if you say okay let's go a

00:16:31,610 --> 00:16:36,019
synchronous you have one problem which

00:16:34,040 --> 00:16:37,579
is execution time and on top of it

00:16:36,019 --> 00:16:40,269
you're laying another problem which is

00:16:37,579 --> 00:16:43,160
doing a scene from the sisters

00:16:40,269 --> 00:16:45,680
thankfully the certain framework for

00:16:43,160 --> 00:16:48,110
example salary which help you doing this

00:16:45,680 --> 00:16:50,720
and if you ever plan to do something a

00:16:48,110 --> 00:16:54,579
synchronous please use salary user queue

00:16:50,720 --> 00:17:02,269
manager it may seem a bit overkill

00:16:54,579 --> 00:17:06,169
sometimes but it's actually ain't okay

00:17:02,269 --> 00:17:08,559
so when you're doing integration

00:17:06,169 --> 00:17:12,860
especially when you're using processes

00:17:08,559 --> 00:17:15,140
you must be very very careful and be

00:17:12,860 --> 00:17:18,110
somewhat metallic in your approach

00:17:15,140 --> 00:17:20,780
because usually they tend to work on

00:17:18,110 --> 00:17:22,010
your development machine and three

00:17:20,780 --> 00:17:24,320
months after launch

00:17:22,010 --> 00:17:25,850
I start having problems in production at

00:17:24,320 --> 00:17:29,210
this point you left younger people

00:17:25,850 --> 00:17:32,570
limited time if you're being careful you

00:17:29,210 --> 00:17:34,460
have a traceback and a log file but if

00:17:32,570 --> 00:17:38,630
you haven't been careful you might not

00:17:34,460 --> 00:17:41,390
have the chew so you must put special

00:17:38,630 --> 00:17:43,070
care into assuring that at least you

00:17:41,390 --> 00:17:44,990
have trace back and log file because

00:17:43,070 --> 00:17:50,120
younger people on limited time I'm going

00:17:44,990 --> 00:17:52,790
to help you so that you are so whenever

00:17:50,120 --> 00:17:55,760
okay so first thing you should of course

00:17:52,790 --> 00:17:59,180
the testing and when testing you should

00:17:55,760 --> 00:18:02,090
absolutely mark every call one approach

00:17:59,180 --> 00:18:04,010
that I suggest is the since you're

00:18:02,090 --> 00:18:07,400
probably going to use actually the

00:18:04,010 --> 00:18:10,280
subprocess module is to wrap your

00:18:07,400 --> 00:18:12,680
directive that called the subprocess p

00:18:10,280 --> 00:18:15,590
open into a function or a netid or

00:18:12,680 --> 00:18:20,090
whatever amount that one because marking

00:18:15,590 --> 00:18:22,400
subprocess can be scary furthermore you

00:18:20,090 --> 00:18:24,560
should always always log ok the

00:18:22,400 --> 00:18:26,210
arguments you're passing to the binary

00:18:24,560 --> 00:18:29,830
the standard up to the standard error

00:18:26,210 --> 00:18:33,140
but also the environment the process ID

00:18:29,830 --> 00:18:36,560
and the defective user and effective

00:18:33,140 --> 00:18:38,330
group this is because sometimes you

00:18:36,560 --> 00:18:40,970
might have wrong environment variables

00:18:38,330 --> 00:18:45,080
like a pet that set to whatever and it

00:18:40,970 --> 00:18:47,570
suddenly finds things but the pit is

00:18:45,080 --> 00:18:49,670
important because sometimes your

00:18:47,570 --> 00:18:52,040
application dies unexpectedly and that

00:18:49,670 --> 00:18:56,150
process keep running and you might find

00:18:52,040 --> 00:18:58,700
it after two months when you have a load

00:18:56,150 --> 00:19:00,980
of process in LA what's this and this

00:18:58,700 --> 00:19:02,870
process is left over from four months

00:19:00,980 --> 00:19:05,720
and also the effective use are an

00:19:02,870 --> 00:19:08,450
effective group effective not the user

00:19:05,720 --> 00:19:14,510
you have a specific goal if it gets get

00:19:08,450 --> 00:19:21,140
eue d and e GED because that's very

00:19:14,510 --> 00:19:25,100
useful to debug our schedules laters to

00:19:21,140 --> 00:19:26,480
actually debug the any problems you

00:19:25,100 --> 00:19:31,400
might have with permissions on the file

00:19:26,480 --> 00:19:34,730
systems and so on so the other problem

00:19:31,400 --> 00:19:37,309
with performance absolutely never

00:19:34,730 --> 00:19:40,190
never pipe stuff unless you're very sure

00:19:37,309 --> 00:19:44,350
it's going to be small data especially

00:19:40,190 --> 00:19:46,730
never ever mix piping with a

00:19:44,350 --> 00:19:49,610
multithreading because that's gone if

00:19:46,730 --> 00:19:52,070
you have like say you say I'm going to

00:19:49,610 --> 00:19:54,919
spoon several thread and each thread is

00:19:52,070 --> 00:19:58,610
going to invoke sue process and I've

00:19:54,919 --> 00:20:02,840
actually working utility that bp's it's

00:19:58,610 --> 00:20:05,120
going to go a very soon is basically

00:20:02,840 --> 00:20:10,160
everything with block it's not having a

00:20:05,120 --> 00:20:13,370
one big lock if you use pipe also check

00:20:10,160 --> 00:20:15,040
out buffering the old buffering options

00:20:13,370 --> 00:20:17,299
because they can be very important and

00:20:15,040 --> 00:20:19,549
actually with the wrong path rings you

00:20:17,299 --> 00:20:21,380
can complete lock completely lock your

00:20:19,549 --> 00:20:23,150
application even if the binary

00:20:21,380 --> 00:20:26,450
terminated correctly has the answer

00:20:23,150 --> 00:20:29,570
ready but it's having problems sending

00:20:26,450 --> 00:20:34,340
it back to the parent process also on

00:20:29,570 --> 00:20:38,000
unix it uses OS fork and well it's you

00:20:34,340 --> 00:20:41,390
know if any of you have done CEC

00:20:38,000 --> 00:20:44,090
programming it's we could all fork a

00:20:41,390 --> 00:20:46,150
call and the good ol for call if you

00:20:44,090 --> 00:20:49,370
actually lose the main page has

00:20:46,150 --> 00:20:51,950
prettiest pretty scary list of things

00:20:49,370 --> 00:20:55,250
that can go wrong and you should

00:20:51,950 --> 00:20:56,780
absolutely take a look there and see

00:20:55,250 --> 00:20:59,660
that you're not hanging up in any of

00:20:56,780 --> 00:21:01,250
these cases then again windows does

00:20:59,660 --> 00:21:02,870
completely different things because it

00:21:01,250 --> 00:21:05,000
has a completely different process model

00:21:02,870 --> 00:21:07,669
so everything if you're doing something

00:21:05,000 --> 00:21:10,160
that costs cross-platform it might work

00:21:07,669 --> 00:21:13,070
perfectly on unix and not forget along

00:21:10,160 --> 00:21:15,020
windows or the other way around because

00:21:13,070 --> 00:21:21,140
that they have completely different code

00:21:15,020 --> 00:21:22,970
bases then a security concerns the the

00:21:21,140 --> 00:21:25,240
first thing is that actually invoking an

00:21:22,970 --> 00:21:28,610
external binary can be as dangerous if

00:21:25,240 --> 00:21:32,150
wrong redone as doing evil of untrusted

00:21:28,610 --> 00:21:34,190
input there are very big warning in the

00:21:32,150 --> 00:21:37,970
standard libraries against shelling

00:21:34,190 --> 00:21:41,120
injection and all the related security

00:21:37,970 --> 00:21:45,429
problems but a big big be very careful

00:21:41,120 --> 00:21:48,000
anyway usually shouldn't use the shell

00:21:45,429 --> 00:21:50,190
the second thing is that for

00:21:48,000 --> 00:21:53,580
descriptors are being inherited by the

00:21:50,190 --> 00:21:56,370
child process and so you want to be very

00:21:53,580 --> 00:21:59,310
very sure that you're calling exactly

00:21:56,370 --> 00:22:01,680
whom you think you're calling this

00:21:59,310 --> 00:22:04,020
actually happening to us on a system

00:22:01,680 --> 00:22:06,960
where someone apparently managed to

00:22:04,020 --> 00:22:09,330
breach ain't breaking and substitute

00:22:06,960 --> 00:22:12,540
several binaries we were actually

00:22:09,330 --> 00:22:14,460
calling apparently they it didn't quite

00:22:12,540 --> 00:22:19,200
work because the binary kept crashing

00:22:14,460 --> 00:22:21,720
and that's how we realized it but from

00:22:19,200 --> 00:22:23,190
them from then on we actually keep doing

00:22:21,720 --> 00:22:25,970
you know something like check sams or

00:22:23,190 --> 00:22:28,860
stuff like that before before invoking

00:22:25,970 --> 00:22:33,000
because it's very important didn't you

00:22:28,860 --> 00:22:36,060
know you say okay someone getting into

00:22:33,000 --> 00:22:38,370
your system you think of it as a rare

00:22:36,060 --> 00:22:41,190
occasion but actually you have a lot of

00:22:38,370 --> 00:22:43,800
processes on each server going and you

00:22:41,190 --> 00:22:46,860
might not be paying paying careful

00:22:43,800 --> 00:22:49,380
attention to each of those so maybe you

00:22:46,860 --> 00:22:51,540
have a buggy buggy software somewhere

00:22:49,380 --> 00:22:55,830
running on that machine and someone uses

00:22:51,540 --> 00:23:00,480
that to get in anyway we'll see more on

00:22:55,830 --> 00:23:03,420
this later so the the next I'm big steps

00:23:00,480 --> 00:23:06,360
are services so from now on we seen the

00:23:03,420 --> 00:23:08,490
stuff that's mainly local now you

00:23:06,360 --> 00:23:11,940
actually have someone external to talk

00:23:08,490 --> 00:23:13,980
to and here's all you know that the

00:23:11,940 --> 00:23:18,030
difficulty starts you raise because you

00:23:13,980 --> 00:23:20,700
you start to have a lot of dimension of

00:23:18,030 --> 00:23:23,850
the problem the first dimension is

00:23:20,700 --> 00:23:25,200
actually who managed the service this

00:23:23,850 --> 00:23:27,450
can make a difference because if you

00:23:25,200 --> 00:23:29,040
manage it the you know sort of when you

00:23:27,450 --> 00:23:30,270
want to take it down you know when you

00:23:29,040 --> 00:23:33,330
want to take it out you can orchestrate

00:23:30,270 --> 00:23:35,430
things if you don't then you have to

00:23:33,330 --> 00:23:37,020
rely on communication on the person who

00:23:35,430 --> 00:23:41,250
manages it which can be a lot more

00:23:37,020 --> 00:23:45,180
difficult the second thing which is sort

00:23:41,250 --> 00:23:46,710
of related to the first one is how

00:23:45,180 --> 00:23:49,350
remote tech is actually the service

00:23:46,710 --> 00:23:50,970
locality is very important when you're

00:23:49,350 --> 00:23:53,880
when you're doing anything that goes

00:23:50,970 --> 00:23:57,000
over the network if it's near to you it

00:23:53,880 --> 00:23:58,590
goes fast if it's far away it goes low

00:23:57,000 --> 00:24:02,340
and half of the time

00:23:58,590 --> 00:24:04,470
going to crash so this is very important

00:24:02,340 --> 00:24:05,820
and it's related because usually if you

00:24:04,470 --> 00:24:08,210
don't manage it they're going to put it

00:24:05,820 --> 00:24:10,200
on the other end of the globe or worse

00:24:08,210 --> 00:24:12,630
migrated to the other end of the globe

00:24:10,200 --> 00:24:15,929
in the middle of running without even

00:24:12,630 --> 00:24:19,529
telling you the next thing is how

00:24:15,929 --> 00:24:21,539
integrated is this service with your

00:24:19,529 --> 00:24:24,210
application this is especially important

00:24:21,539 --> 00:24:27,179
when you are doing anything that same

00:24:24,210 --> 00:24:31,350
sensible data or has to somehow interact

00:24:27,179 --> 00:24:33,960
with the authentication therefore you

00:24:31,350 --> 00:24:37,350
have actually to take to take into

00:24:33,960 --> 00:24:40,649
account the whole security thing and if

00:24:37,350 --> 00:24:42,929
if the service is not integrated for

00:24:40,649 --> 00:24:45,000
example for a single sign-on or whatever

00:24:42,929 --> 00:24:47,460
it can be really hard to ensure that

00:24:45,000 --> 00:24:50,850
you're doing the right thing I'll

00:24:47,460 --> 00:24:53,039
actually insecure the other thing is how

00:24:50,850 --> 00:24:55,140
synchronous the service interfaces well

00:24:53,039 --> 00:25:00,210
this is not a big problem because there

00:24:55,140 --> 00:25:02,279
are workarounds but still if if you can

00:25:00,210 --> 00:25:04,890
choose between to choose the one that

00:25:02,279 --> 00:25:07,020
actually has is able to call you back

00:25:04,890 --> 00:25:09,950
because then you don't have to actually

00:25:07,020 --> 00:25:11,700
add more complexity by managing

00:25:09,950 --> 00:25:15,240
something on a synchronous weigh

00:25:11,700 --> 00:25:18,149
yourself in the end it all comes down to

00:25:15,240 --> 00:25:20,970
who actually owns the service if you can

00:25:18,149 --> 00:25:22,860
put it this way if you own it you can do

00:25:20,970 --> 00:25:25,760
it with it whatever you want if someone

00:25:22,860 --> 00:25:29,610
else owns it you have to adapt and

00:25:25,760 --> 00:25:31,590
generally whenever you have to depth you

00:25:29,610 --> 00:25:33,510
know you have all sort of constraints

00:25:31,590 --> 00:25:37,740
and you might end up writing suboptimal

00:25:33,510 --> 00:25:39,299
code there for that feedback typing so

00:25:37,740 --> 00:25:42,450
the most common problems that you have

00:25:39,299 --> 00:25:45,360
with services the first one is the

00:25:42,450 --> 00:25:48,210
network and pretty much the biggest one

00:25:45,360 --> 00:25:50,490
then every time you send something over

00:25:48,210 --> 00:25:53,549
the network you're pretty much sure that

00:25:50,490 --> 00:25:55,649
at some point during the you know when

00:25:53,549 --> 00:25:57,240
when the service your whole system is

00:25:55,649 --> 00:26:00,539
running at some point the network will

00:25:57,240 --> 00:26:04,470
fail that's pretty much and you actually

00:26:00,539 --> 00:26:06,899
have to be able to to work around this

00:26:04,470 --> 00:26:09,620
problem I never do something that if the

00:26:06,899 --> 00:26:11,450
network fails nothing works because then

00:26:09,620 --> 00:26:14,120
you're pretty much saying okay nice my

00:26:11,450 --> 00:26:16,730
service or my application is going to go

00:26:14,120 --> 00:26:19,820
down whenever the other service decide

00:26:16,730 --> 00:26:23,570
is do the other thing is interface

00:26:19,820 --> 00:26:27,260
changes if you don't own own it and it's

00:26:23,570 --> 00:26:29,510
a custom-made service like I don't know

00:26:27,260 --> 00:26:32,000
you're doing consulting for a company

00:26:29,510 --> 00:26:36,020
that has all sorts backends for doing

00:26:32,000 --> 00:26:39,130
stuff and they expose to you an API most

00:26:36,020 --> 00:26:41,840
of the times you know it's not the big

00:26:39,130 --> 00:26:44,690
interface changes because photos you

00:26:41,840 --> 00:26:46,880
generally get notified but it's the

00:26:44,690 --> 00:26:49,580
small one where the when they actually

00:26:46,880 --> 00:26:50,929
modified they think okay it's a nine

00:26:49,580 --> 00:26:53,780
hour update we're not changing the

00:26:50,929 --> 00:26:57,950
interface but instead they are doing one

00:26:53,780 --> 00:27:00,170
example is errors I had damn change for

00:26:57,950 --> 00:27:02,690
example yellow would initially return

00:27:00,170 --> 00:27:05,059
500 internal server error when something

00:27:02,690 --> 00:27:07,460
wet went found on the service and then

00:27:05,059 --> 00:27:10,280
suddenly they didn't update and

00:27:07,460 --> 00:27:13,190
certainly was returning a 200 okay and I

00:27:10,280 --> 00:27:16,940
was actually checking the HTTP return

00:27:13,190 --> 00:27:18,890
code and of course for me as everything

00:27:16,940 --> 00:27:21,950
went okay but instead of was having a

00:27:18,890 --> 00:27:23,600
payload in the 200 ok saying oh really

00:27:21,950 --> 00:27:27,770
an error has occurred here's the trace

00:27:23,600 --> 00:27:30,980
back but they did this on production of

00:27:27,770 --> 00:27:32,900
course everything broke down then of

00:27:30,980 --> 00:27:35,300
course you have the the limitations of

00:27:32,900 --> 00:27:37,640
any protocol that synchronous which of

00:27:35,300 --> 00:27:40,660
course requires you to wait until you

00:27:37,640 --> 00:27:45,559
get a response back and these basically

00:27:40,660 --> 00:27:47,330
change your your response time 2 2day

00:27:45,559 --> 00:27:48,800
hours so basically it's all the

00:27:47,330 --> 00:27:54,350
processing you have to do plus their

00:27:48,800 --> 00:27:56,840
processing and in you know synchronous

00:27:54,350 --> 00:27:58,400
protocol of course or doing synchronous

00:27:56,840 --> 00:27:59,990
stuff is much easier and if you're a

00:27:58,400 --> 00:28:01,610
short on time you're like okay let's

00:27:59,990 --> 00:28:07,160
just do it synchronous because it's

00:28:01,610 --> 00:28:09,200
simpler but be aware that you know if

00:28:07,160 --> 00:28:11,480
you actually have to provide an answer

00:28:09,200 --> 00:28:14,600
and likes a rendering the rest mass of a

00:28:11,480 --> 00:28:18,980
web page in a limited time you know not

00:28:14,600 --> 00:28:20,450
after several minutes you have to take

00:28:18,980 --> 00:28:22,940
into account that if you use a

00:28:20,450 --> 00:28:25,700
synchronous protocol it's always the

00:28:22,940 --> 00:28:28,040
time you take plus the time data plus

00:28:25,700 --> 00:28:30,380
every any delay that's in the network

00:28:28,040 --> 00:28:32,630
and since you can control me they

00:28:30,380 --> 00:28:34,580
delayed on the network know how much

00:28:32,630 --> 00:28:37,040
time the service is taking if it's an

00:28:34,580 --> 00:28:39,110
external one there can be a very very

00:28:37,040 --> 00:28:42,980
big problem especially because it might

00:28:39,110 --> 00:28:44,210
even be very unpredictable okay and the

00:28:42,980 --> 00:28:46,820
last thing is the lack of integration

00:28:44,210 --> 00:28:50,690
with the security system of your

00:28:46,820 --> 00:28:52,580
application which means that you end up

00:28:50,690 --> 00:28:59,120
sending over the Y unencrypted and

00:28:52,580 --> 00:29:02,810
sensible information so these are quite

00:28:59,120 --> 00:29:05,420
some big problems now of course if you

00:29:02,810 --> 00:29:08,000
if it's your service you sort of own it

00:29:05,420 --> 00:29:12,320
most of these problems go away because

00:29:08,000 --> 00:29:15,110
for example the load is pretty much

00:29:12,320 --> 00:29:17,420
predictable what one thing with with

00:29:15,110 --> 00:29:19,550
services that you don't own is that they

00:29:17,420 --> 00:29:22,430
might be used by you but also by other

00:29:19,550 --> 00:29:24,230
applications therefore if other

00:29:22,430 --> 00:29:26,270
application suddenly start to handle the

00:29:24,230 --> 00:29:29,270
service even even if you're doing very

00:29:26,270 --> 00:29:31,700
few requests you're starting to to get

00:29:29,270 --> 00:29:34,130
to not get back any response because the

00:29:31,700 --> 00:29:35,990
server the services of a loaded of

00:29:34,130 --> 00:29:37,700
course if it's yours if its local you

00:29:35,990 --> 00:29:41,330
manage it you don't allow anyone else to

00:29:37,700 --> 00:29:43,760
connect or you know the load how many

00:29:41,330 --> 00:29:46,400
requests actually come in and therefore

00:29:43,760 --> 00:29:48,140
you can determine a lot pattern and say

00:29:46,400 --> 00:29:50,240
okay I can go we'd sing a synchronous

00:29:48,140 --> 00:29:54,470
protocol because really this service is

00:29:50,240 --> 00:29:57,140
very quick also the interface doesn't

00:29:54,470 --> 00:29:58,940
change unless you want it and more

00:29:57,140 --> 00:30:01,040
importantly if you need to change

00:29:58,940 --> 00:30:02,960
because suddenly you realize that you

00:30:01,040 --> 00:30:05,480
have a bug in your integration code that

00:30:02,960 --> 00:30:07,550
can be solved because the the interface

00:30:05,480 --> 00:30:09,890
was wrong in the first place you can

00:30:07,550 --> 00:30:13,430
change it or please put a rapper or

00:30:09,890 --> 00:30:15,890
whatever but if it's not your service

00:30:13,430 --> 00:30:18,350
you can do that and this is a very big

00:30:15,890 --> 00:30:20,300
problem and actually this is the point

00:30:18,350 --> 00:30:23,360
for which I don't have a solution rather

00:30:20,300 --> 00:30:27,440
than talk to people the last thing is

00:30:23,360 --> 00:30:30,980
that the outage tend to be more rare in

00:30:27,440 --> 00:30:33,530
the sense that I mean services have

00:30:30,980 --> 00:30:36,129
planned outage because you might need to

00:30:33,530 --> 00:30:39,769
resolve you made them update whatever

00:30:36,129 --> 00:30:41,719
sometimes okay if you own it you know

00:30:39,769 --> 00:30:44,629
when you when you're going to restart it

00:30:41,719 --> 00:30:46,639
if you don't sometimes there is a lot of

00:30:44,629 --> 00:30:49,849
mixed communications between those who

00:30:46,639 --> 00:30:52,249
manage it and and view and therefore you

00:30:49,849 --> 00:30:54,080
end up from them like restarting your

00:30:52,249 --> 00:30:56,269
service and not telling you and your

00:30:54,080 --> 00:30:58,099
application breaking up especially if

00:30:56,269 --> 00:31:02,179
you use persistent connection and stuff

00:30:58,099 --> 00:31:04,009
like that and you can actually differ

00:31:02,179 --> 00:31:05,929
authentication and authorization so

00:31:04,009 --> 00:31:08,119
security food do you know these very

00:31:05,929 --> 00:31:13,219
basic protocols that always work and

00:31:08,119 --> 00:31:16,639
that will see later on still even if you

00:31:13,219 --> 00:31:19,519
if you own it there are still certain

00:31:16,639 --> 00:31:23,960
pitfalls one of they seen is that okay

00:31:19,519 --> 00:31:26,389
you have a service and you say I'm let

00:31:23,960 --> 00:31:29,089
us take an example solar as a search

00:31:26,389 --> 00:31:31,820
index and you say okay I am going to run

00:31:29,089 --> 00:31:35,749
it on on the same machine and I'm going

00:31:31,820 --> 00:31:37,580
to connect to it for the network then

00:31:35,749 --> 00:31:40,099
suddenly you might be putting some

00:31:37,580 --> 00:31:42,139
sensible data in your indexes and you

00:31:40,099 --> 00:31:44,869
don't realize that even if it's running

00:31:42,139 --> 00:31:48,589
on you know binding on localhost

00:31:44,869 --> 00:31:52,429
therefore only serving internal network

00:31:48,589 --> 00:31:54,710
requests anyone that has access or has

00:31:52,429 --> 00:31:57,139
gained access to that machine can

00:31:54,710 --> 00:31:59,749
actually read the network therefore if

00:31:57,139 --> 00:32:04,219
one is young your system because it has

00:31:59,749 --> 00:32:06,379
exploited some some other weakness he

00:32:04,219 --> 00:32:09,649
can read pretty much all the index and

00:32:06,379 --> 00:32:11,509
since you might put a lot of sensible

00:32:09,649 --> 00:32:13,580
things in the index I don't know for

00:32:11,509 --> 00:32:15,830
example social security numbers I don't

00:32:13,580 --> 00:32:19,879
know why you would do that but I've seen

00:32:15,830 --> 00:32:22,279
stuff like that you have a big security

00:32:19,879 --> 00:32:27,289
problem because someone canceled that

00:32:22,279 --> 00:32:30,469
data furthermore you know the trade-off

00:32:27,289 --> 00:32:32,149
can be more complex because if you

00:32:30,469 --> 00:32:34,879
wanted to say okay I'm going to just put

00:32:32,149 --> 00:32:37,190
it on the same machine and it's going to

00:32:34,879 --> 00:32:42,200
be very local therefore it done and not

00:32:37,190 --> 00:32:44,989
oh sorry before no don't use the network

00:32:42,200 --> 00:32:47,690
but if you can use unique sockets

00:32:44,989 --> 00:32:49,159
because unique sockets permissions while

00:32:47,690 --> 00:32:52,460
the network doesn't

00:32:49,159 --> 00:32:54,940
uh I mean a socket is actually a file

00:32:52,460 --> 00:33:01,519
therefore you can put permission I mean

00:32:54,940 --> 00:33:03,529
on a port you can't the second thing is

00:33:01,519 --> 00:33:08,989
actually the trade-off can be quite

00:33:03,529 --> 00:33:10,489
complex because when you when you're

00:33:08,989 --> 00:33:12,619
saying okay I'm going to have this

00:33:10,489 --> 00:33:14,419
service and make it local then you start

00:33:12,619 --> 00:33:16,129
having resource contention again the

00:33:14,419 --> 00:33:18,289
example of the solar index the solar

00:33:16,129 --> 00:33:20,840
index might want to take up I don't know

00:33:18,289 --> 00:33:22,820
one gigabyte of RAM to actually put all

00:33:20,840 --> 00:33:26,330
its indexing RAM and just found from

00:33:22,820 --> 00:33:28,159
there and I'm be okay with it but maybe

00:33:26,330 --> 00:33:30,859
your application needs three gigabytes

00:33:28,159 --> 00:33:32,840
of RAM and you have only four and then

00:33:30,859 --> 00:33:37,279
suddenly you're running very very tight

00:33:32,840 --> 00:33:38,960
and so for example you have let the

00:33:37,279 --> 00:33:41,239
trade of this complex because then you

00:33:38,960 --> 00:33:44,539
you might think okay i'm uploading it to

00:33:41,239 --> 00:33:46,159
another machine but then again you can't

00:33:44,539 --> 00:33:50,289
really then trust the network therefore

00:33:46,159 --> 00:33:55,039
you have to put in some sort of of

00:33:50,289 --> 00:33:56,840
authentication protocol in between so

00:33:55,039 --> 00:34:00,309
for all the stuff that that actually

00:33:56,840 --> 00:34:02,629
don't you don't manage you have to put

00:34:00,309 --> 00:34:05,799
an eye on well pretty much everything

00:34:02,629 --> 00:34:10,010
because it's listed security stability

00:34:05,799 --> 00:34:11,179
performance and availability the most

00:34:10,010 --> 00:34:15,589
important thing is actually think

00:34:11,179 --> 00:34:17,270
security the second one is the last

00:34:15,589 --> 00:34:21,829
three are actually somewhat linked

00:34:17,270 --> 00:34:25,879
because the the performance thank you

00:34:21,829 --> 00:34:27,950
very much network because the

00:34:25,879 --> 00:34:32,049
performance is actually linked that too

00:34:27,950 --> 00:34:35,629
I mean it affects your stability because

00:34:32,049 --> 00:34:38,210
if the server isn't responding your and

00:34:35,629 --> 00:34:41,119
you losing a synchronous protocol your

00:34:38,210 --> 00:34:45,849
own application is also down and so and

00:34:41,119 --> 00:34:50,869
so on the availability and and of course

00:34:45,849 --> 00:34:55,419
so security the very big things to keep

00:34:50,869 --> 00:34:55,419
in mind you should always authenticate

00:34:58,290 --> 00:35:06,280
yeah yeah exactly you always have trying

00:35:02,320 --> 00:35:10,900
to indicate okay let's see if it works

00:35:06,280 --> 00:35:13,300
without the network go away okay you

00:35:10,900 --> 00:35:15,790
should always authenticate everyone not

00:35:13,300 --> 00:35:17,500
just you know it's very common you have

00:35:15,790 --> 00:35:19,420
your application the user and an

00:35:17,500 --> 00:35:21,640
external service and you're like well I

00:35:19,420 --> 00:35:23,380
just have to indicate the user no that's

00:35:21,640 --> 00:35:25,930
wrong you also have to indicate the

00:35:23,380 --> 00:35:29,680
service because someone might be doing a

00:35:25,930 --> 00:35:32,170
man-in-the-middle attack and you might

00:35:29,680 --> 00:35:34,120
not know if it's really your debt the

00:35:32,170 --> 00:35:38,230
service you trust or someone else which

00:35:34,120 --> 00:35:40,300
has evil intentions there are actually

00:35:38,230 --> 00:35:42,310
proving widespread technologies for

00:35:40,300 --> 00:35:44,080
doing that for example even if you're

00:35:42,310 --> 00:35:47,620
talking between services it's a good

00:35:44,080 --> 00:35:50,980
idea to use HTTPS because in this way

00:35:47,620 --> 00:35:53,110
not only the communication is encrypted

00:35:50,980 --> 00:35:56,350
but also if you've set up your

00:35:53,110 --> 00:35:58,540
certificates in a decent way you can

00:35:56,350 --> 00:36:00,700
actually say okay this is really the

00:35:58,540 --> 00:36:06,280
service I am calling and not someone

00:36:00,700 --> 00:36:09,370
else always resist the urge to rely on X

00:36:06,280 --> 00:36:12,310
and this is usually something I get a

00:36:09,370 --> 00:36:14,980
lot from from you know the customers oh

00:36:12,310 --> 00:36:17,560
but we'll just make a white list of IP

00:36:14,980 --> 00:36:19,450
addresses will just allow connection

00:36:17,560 --> 00:36:22,540
from these IP addresses and they'll be

00:36:19,450 --> 00:36:26,260
gone or oh let's put a shared secret

00:36:22,540 --> 00:36:30,250
which usually is always secret and and

00:36:26,260 --> 00:36:31,810
use that Oh or yeah i know we use this

00:36:30,250 --> 00:36:34,870
protocol it's not really secure but

00:36:31,810 --> 00:36:37,240
who's going to think of it and this is

00:36:34,870 --> 00:36:40,480
really really wrong because security is

00:36:37,240 --> 00:36:44,860
really hard to get there are a lot of

00:36:40,480 --> 00:36:46,690
protocols exactly for that and and you

00:36:44,860 --> 00:36:49,170
should use them and not trying to invent

00:36:46,690 --> 00:36:49,170
your own

00:36:51,880 --> 00:36:59,140
okay so next thing single sign yawns

00:36:56,099 --> 00:37:02,109
single sign yawns you know I always

00:36:59,140 --> 00:37:04,960
especially in enterprise environments

00:37:02,109 --> 00:37:06,940
they're always speak of them like the

00:37:04,960 --> 00:37:09,130
silver bullet of security you know

00:37:06,940 --> 00:37:10,930
whenever you say oh but it is this

00:37:09,130 --> 00:37:14,980
thing's you all don't worry we have a

00:37:10,930 --> 00:37:16,569
single sign-on then you maybe even

00:37:14,980 --> 00:37:20,200
discover that they don't even have a

00:37:16,569 --> 00:37:22,720
real single sign-on because one

00:37:20,200 --> 00:37:24,549
important thing is that you know that

00:37:22,720 --> 00:37:27,880
the whole single sign-on thing has been

00:37:24,549 --> 00:37:31,539
a someone misconstrued by misconstrued

00:37:27,880 --> 00:37:33,099
by by a lot of people and you end up

00:37:31,539 --> 00:37:34,930
having things that are marketed as

00:37:33,099 --> 00:37:37,900
single sign yawns but aren't single sign

00:37:34,930 --> 00:37:39,789
yawns so you must know exactly which are

00:37:37,900 --> 00:37:42,250
the properties of tap technology and

00:37:39,789 --> 00:37:46,480
then know if it solves your security

00:37:42,250 --> 00:37:49,299
problem or it doesn't for example full

00:37:46,480 --> 00:37:53,079
single sign yawns are cables or Active

00:37:49,299 --> 00:37:58,630
Directory or or whatever other similar

00:37:53,079 --> 00:38:00,849
protocol all for example a saml of which

00:37:58,630 --> 00:38:03,490
the open source implementation is Shiva

00:38:00,849 --> 00:38:07,059
light for example other things like open

00:38:03,490 --> 00:38:09,670
ID or LDAP are not single science there

00:38:07,059 --> 00:38:12,250
are consolidated drawings they solve

00:38:09,670 --> 00:38:15,970
part of the single sign-on problem but

00:38:12,250 --> 00:38:19,240
not every part of it therefore they

00:38:15,970 --> 00:38:21,220
don't actually give you the dunk dunk

00:38:19,240 --> 00:38:23,829
over certain areas and you might leave

00:38:21,220 --> 00:38:29,319
them uncover it if you don't actually

00:38:23,829 --> 00:38:31,660
dive into into that the next thing you

00:38:29,319 --> 00:38:34,829
should absolutely do is to try to reduce

00:38:31,660 --> 00:38:38,109
reduce the attack surface so basically

00:38:34,829 --> 00:38:41,380
if you have less doors or or less

00:38:38,109 --> 00:38:43,240
openings in your wall people can't can't

00:38:41,380 --> 00:38:45,960
actually climbing or it's more difficult

00:38:43,240 --> 00:38:49,329
and easier to work together them

00:38:45,960 --> 00:38:51,700
therefore you should actually minimize

00:38:49,329 --> 00:38:54,220
the data that you send out and that you

00:38:51,700 --> 00:38:55,809
get in it don't send out useless not but

00:38:54,220 --> 00:38:58,180
which might also they and then I'm not

00:38:55,809 --> 00:39:00,039
being sensitive just because oh well we

00:38:58,180 --> 00:39:02,140
might be using it in the future it's

00:39:00,039 --> 00:39:04,210
data therefore if you if in the future

00:39:02,140 --> 00:39:06,099
you need to send it out

00:39:04,210 --> 00:39:09,580
you'll do an update and send it out but

00:39:06,099 --> 00:39:11,619
don't send it out just because second

00:39:09,580 --> 00:39:14,770
thing you should always treat everything

00:39:11,619 --> 00:39:19,089
that comes from from an external service

00:39:14,770 --> 00:39:20,859
to you as and trusted even if you've

00:39:19,089 --> 00:39:23,770
already seen that it's exactly that

00:39:20,859 --> 00:39:26,109
service that who might Rancic cetera et

00:39:23,770 --> 00:39:28,869
cetera because sometimes you have things

00:39:26,109 --> 00:39:30,430
like oh I'm not going to validate hits

00:39:28,869 --> 00:39:32,619
because they've already done the

00:39:30,430 --> 00:39:35,290
validation and then for some reason

00:39:32,619 --> 00:39:38,280
their validation breaks up or doesn't

00:39:35,290 --> 00:39:41,290
really do a very good validation and

00:39:38,280 --> 00:39:43,810
there are their security bug spreads on

00:39:41,290 --> 00:39:49,150
you ok it's a stupid example was for

00:39:43,810 --> 00:39:51,400
example for example it's HTML you know

00:39:49,150 --> 00:39:54,400
the script injection for example if you

00:39:51,400 --> 00:39:57,300
are receiving in an HTML a blob and you

00:39:54,400 --> 00:40:01,150
say oh well there are any way doing the

00:39:57,300 --> 00:40:03,400
cleanup but you know when cleaning up

00:40:01,150 --> 00:40:06,720
HTML there are a lot of difficult corner

00:40:03,400 --> 00:40:09,430
cases and a lot of times the the

00:40:06,720 --> 00:40:11,920
scrubbing order there anyway sanitizing

00:40:09,430 --> 00:40:14,109
the HTML input in a lot of eternal

00:40:11,920 --> 00:40:16,330
things I've seen is done in a very naive

00:40:14,109 --> 00:40:18,760
way which covers the base cases but not

00:40:16,330 --> 00:40:20,349
the more the more clever ones therefore

00:40:18,760 --> 00:40:24,010
if you trust them and they have an

00:40:20,349 --> 00:40:27,130
incomplete implementation their own bag

00:40:24,010 --> 00:40:31,570
also spreads to you and you should

00:40:27,130 --> 00:40:35,770
actually be very careful on this and

00:40:31,570 --> 00:40:39,430
yeah you should actually if possible

00:40:35,770 --> 00:40:40,750
avoid sending sending or around an

00:40:39,430 --> 00:40:42,369
insensitive data that you might be

00:40:40,750 --> 00:40:47,200
holding like for example it's all social

00:40:42,369 --> 00:40:49,570
security numbers or or anything else and

00:40:47,200 --> 00:40:51,880
if you actually have to make sure that

00:40:49,570 --> 00:40:54,940
you're doing so in a on a connection

00:40:51,880 --> 00:40:59,349
that can be eavesdropped because that's

00:40:54,940 --> 00:41:02,230
very important so the domain attacks

00:40:59,349 --> 00:41:03,820
that you might end up facing when with

00:41:02,230 --> 00:41:05,710
with a system that integrates a lot of

00:41:03,820 --> 00:41:10,810
moving components are well the usual

00:41:05,710 --> 00:41:13,119
stuff the CSRs the XXX men in the middle

00:41:10,810 --> 00:41:16,060
attacks or any types of injection

00:41:13,119 --> 00:41:17,740
injection combined with any other

00:41:16,060 --> 00:41:19,990
vulnerable because

00:41:17,740 --> 00:41:24,660
I've seen systems were actually that

00:41:19,990 --> 00:41:24,660
actually allowed some minor a type of

00:41:25,380 --> 00:41:31,540
the JavaScript injection and I've seen

00:41:29,680 --> 00:41:33,970
that the belapur say to me oh well but

00:41:31,540 --> 00:41:35,950
they just can execute some JavaScript on

00:41:33,970 --> 00:41:37,600
the client what's the matter and I said

00:41:35,950 --> 00:41:39,340
well not really because we have another

00:41:37,600 --> 00:41:42,700
part of the system which actually isn't

00:41:39,340 --> 00:41:45,550
quite protected against esrf and

00:41:42,700 --> 00:41:47,850
therefore you can actually run some

00:41:45,550 --> 00:41:53,230
JavaScript that posts data over there

00:41:47,850 --> 00:41:55,570
and actually have the duty the injection

00:41:53,230 --> 00:41:57,490
win we do not mean which is still

00:41:55,570 --> 00:41:59,410
loading everywhere and therefore you

00:41:57,490 --> 00:42:01,840
suddenly have a problem with people

00:41:59,410 --> 00:42:07,390
that's not really supposed two doing

00:42:01,840 --> 00:42:09,700
post requests to do stuff around and

00:42:07,390 --> 00:42:11,470
that's a problem because for example you

00:42:09,700 --> 00:42:13,720
might have certain pieces that you can

00:42:11,470 --> 00:42:16,360
quite change the subject to one of these

00:42:13,720 --> 00:42:19,050
attacks therefore all the things that

00:42:16,360 --> 00:42:21,610
you control should absolutely clearly be

00:42:19,050 --> 00:42:27,010
clean in these respects because the

00:42:21,610 --> 00:42:29,100
other parts might not okay so well this

00:42:27,010 --> 00:42:32,710
is pretty much repeated before

00:42:29,100 --> 00:42:38,340
availability is effects of course your

00:42:32,710 --> 00:42:38,340
own and and therefore you should try to

00:42:38,910 --> 00:42:45,580
to never actually use a synchronous

00:42:43,330 --> 00:42:50,619
protocol absolutely never there are

00:42:45,580 --> 00:42:52,510
certain certain ways to to do it if you

00:42:50,619 --> 00:42:54,580
have a protocol where basically the

00:42:52,510 --> 00:42:57,280
services I I ask you something and you

00:42:54,580 --> 00:42:59,080
give him back the response so the first

00:42:57,280 --> 00:43:01,359
thing is actually to use a queue manager

00:42:59,080 --> 00:43:03,940
and entering you know the whole thing

00:43:01,359 --> 00:43:06,670
try to do it with a low timeout you fail

00:43:03,940 --> 00:43:08,590
a try again try again try them at some

00:43:06,670 --> 00:43:11,859
point it probably will come up again and

00:43:08,590 --> 00:43:14,140
give you an answer the other thing if

00:43:11,859 --> 00:43:17,220
you really don't want to use a queue

00:43:14,140 --> 00:43:19,869
manager or you're short on time or your

00:43:17,220 --> 00:43:22,300
budget that was afghan you can try to

00:43:19,869 --> 00:43:24,790
use very very extensive cash very very

00:43:22,300 --> 00:43:27,160
aggressive caching which might alleviate

00:43:24,790 --> 00:43:30,920
you know other the performance problems

00:43:27,160 --> 00:43:32,930
because even if you can contact

00:43:30,920 --> 00:43:38,059
the service you still have your own

00:43:32,930 --> 00:43:40,069
little local cache the other thing is if

00:43:38,059 --> 00:43:42,260
the service is a stock one like for

00:43:40,069 --> 00:43:45,049
example solar or a database or whatever

00:43:42,260 --> 00:43:47,210
you can try to all actually these

00:43:45,049 --> 00:43:51,619
services have some sort of replication

00:43:47,210 --> 00:43:54,140
mechanism databases or or well all sort

00:43:51,619 --> 00:43:56,660
of databases actually and what you can

00:43:54,140 --> 00:43:58,640
do is to actually run a mirror locally

00:43:56,660 --> 00:44:01,940
and use these synchronization protocols

00:43:58,640 --> 00:44:03,380
to actually have the same data then is

00:44:01,940 --> 00:44:05,540
actually an approach you can you use a

00:44:03,380 --> 00:44:09,290
lot for example with a database from

00:44:05,540 --> 00:44:11,990
which you only have to read or as an

00:44:09,290 --> 00:44:16,250
example game from 44 solar searches and

00:44:11,990 --> 00:44:19,339
and so on so debugging and testing it's

00:44:16,250 --> 00:44:24,589
always the same old thing so you should

00:44:19,339 --> 00:44:27,319
absolutely log when when you're invoking

00:44:24,589 --> 00:44:30,829
service before lot what you're sending

00:44:27,319 --> 00:44:34,730
in and just after that lot what's coming

00:44:30,829 --> 00:44:36,710
out just before and just after the call

00:44:34,730 --> 00:44:39,230
don't do any processing in between

00:44:36,710 --> 00:44:41,750
because if you do log in there you can

00:44:39,230 --> 00:44:44,420
say okay I sent these to the to the

00:44:41,750 --> 00:44:46,579
service and I get back this is this

00:44:44,420 --> 00:44:48,319
correct is this wrong if it's wrong it's

00:44:46,579 --> 00:44:51,589
their problem if it's correct it's your

00:44:48,319 --> 00:44:53,660
problem if you put your logging up the

00:44:51,589 --> 00:44:57,079
stack then you don't know if the problem

00:44:53,660 --> 00:44:58,460
sits in your code or in their service so

00:44:57,079 --> 00:45:00,349
therefore if you do that you can you're

00:44:58,460 --> 00:45:01,940
able in really one minute by grabbing

00:45:00,349 --> 00:45:06,319
the log saying okay it's your problem or

00:45:01,940 --> 00:45:08,210
oh no ok it's my problem I succeed you

00:45:06,319 --> 00:45:11,450
should create marks that are that you

00:45:08,210 --> 00:45:14,869
can extend and this is very important

00:45:11,450 --> 00:45:19,609
because you might end up with you know

00:45:14,869 --> 00:45:22,250
creating a very quick mark and then as

00:45:19,609 --> 00:45:23,809
you go forward you start seeing corner

00:45:22,250 --> 00:45:25,730
cases that you have to fit in that mark

00:45:23,809 --> 00:45:28,700
and you don't you probably don't want to

00:45:25,730 --> 00:45:31,700
refactor that so your mocs always try to

00:45:28,700 --> 00:45:35,440
you know be able to accept parameters or

00:45:31,700 --> 00:45:38,900
stuff like that and always mark bought

00:45:35,440 --> 00:45:43,190
when stuff goes well and both men star

00:45:38,900 --> 00:45:44,359
fails because that's very important you

00:45:43,190 --> 00:45:46,549
should always also

00:45:44,359 --> 00:45:48,619
we'll be able to actually endl errors

00:45:46,549 --> 00:45:51,859
correctly not just you know when

00:45:48,619 --> 00:45:53,569
everything goes well which is actually

00:45:51,859 --> 00:45:58,309
much more complex ending their our

00:45:53,569 --> 00:46:02,119
arrows correctly so to summarize up a

00:45:58,309 --> 00:46:03,980
bit when you have to integrate you

00:46:02,119 --> 00:46:07,690
should always take all this into account

00:46:03,980 --> 00:46:12,019
and try now to do a quick cost texting

00:46:07,690 --> 00:46:14,269
estimation you should always probably

00:46:12,019 --> 00:46:15,890
estimate the time it would take for you

00:46:14,269 --> 00:46:17,839
to actually completely develop

00:46:15,890 --> 00:46:19,940
everything from scratch and then you

00:46:17,839 --> 00:46:23,239
choose the one that's least expensive or

00:46:19,940 --> 00:46:25,730
has the least problems when you're

00:46:23,239 --> 00:46:30,049
integrating your ways okay you should do

00:46:25,730 --> 00:46:33,710
things well and that's you know in every

00:46:30,049 --> 00:46:36,319
case but see all sometimes I do and I

00:46:33,710 --> 00:46:37,940
think others probably do sometimes you

00:46:36,319 --> 00:46:40,160
know you like oh okay well I'll fix this

00:46:37,940 --> 00:46:43,160
later or oh well yeah I know I should be

00:46:40,160 --> 00:46:45,410
doing this but let's do it let's read

00:46:43,160 --> 00:46:46,970
the wrong way because it's quicker never

00:46:45,410 --> 00:46:50,779
do that when you're integrating stuff

00:46:46,970 --> 00:46:54,079
because then when problems happen you

00:46:50,779 --> 00:46:55,940
have a very big stack and finding where

00:46:54,079 --> 00:46:58,940
the problem seats can be very very hard

00:46:55,940 --> 00:47:01,579
so if you're precise in there every time

00:46:58,940 --> 00:47:05,329
a problem happens you know when where

00:47:01,579 --> 00:47:07,880
and why and also you should try to

00:47:05,329 --> 00:47:10,009
maintain as much as possible a full

00:47:07,880 --> 00:47:12,680
knowledge of what's going on in every

00:47:10,009 --> 00:47:14,420
piece even if it's a black box you

00:47:12,680 --> 00:47:18,890
should at least know pretty much how it

00:47:14,420 --> 00:47:20,539
behaves you should never say okay I'm

00:47:18,890 --> 00:47:22,190
sending this data to the service but I

00:47:20,539 --> 00:47:23,809
don't really know what what happened

00:47:22,190 --> 00:47:26,710
from there from then on and what they do

00:47:23,809 --> 00:47:29,749
because then you can estimate how the

00:47:26,710 --> 00:47:32,299
response time you can't you can't make

00:47:29,749 --> 00:47:34,039
any assumptions basically so if you know

00:47:32,299 --> 00:47:38,359
the fact you can make assumptions and

00:47:34,039 --> 00:47:41,289
you can make the right choice so anyway

00:47:38,359 --> 00:47:41,289
that's all I'm

00:47:50,980 --> 00:47:54,710
so when you when you talk about mocking

00:47:53,270 --> 00:47:56,480
and you talk about working with these

00:47:54,710 --> 00:47:57,530
different services it seems like you

00:47:56,480 --> 00:47:59,000
have a different experience of working

00:47:57,530 --> 00:48:00,320
with the services than I do since I

00:47:59,000 --> 00:48:02,900
weren't a scientific research

00:48:00,320 --> 00:48:05,300
environment so my protocols are call

00:48:02,900 --> 00:48:08,060
this machine over here he eventually get

00:48:05,300 --> 00:48:09,440
back response Maricopa thumps and then

00:48:08,060 --> 00:48:10,910
look on the notebook file system to see

00:48:09,440 --> 00:48:12,770
if I have response back in this space

00:48:10,910 --> 00:48:14,960
say yes but it still hasn't propagated

00:48:12,770 --> 00:48:16,760
forward so have a bunch of tests which

00:48:14,960 --> 00:48:18,590
depend very strictly on timing and

00:48:16,760 --> 00:48:19,790
double-checking and triple-checking that

00:48:18,590 --> 00:48:21,320
things are synchronized between the

00:48:19,790 --> 00:48:22,850
different systems now when you talk

00:48:21,320 --> 00:48:24,710
about mocking you don't have any ability

00:48:22,850 --> 00:48:28,730
to do that sort of timing tests so how

00:48:24,710 --> 00:48:30,980
do well this whole actually I tend to

00:48:28,730 --> 00:48:32,810
use the mock library which you've

00:48:30,980 --> 00:48:36,290
probably heard of it's one of the very

00:48:32,810 --> 00:48:39,170
smoking testing libraries anyway what I

00:48:36,290 --> 00:48:40,880
tend to do is I can we up with a very

00:48:39,170 --> 00:48:43,520
very basic interface like it like a call

00:48:40,880 --> 00:48:47,140
function say Cole service with some

00:48:43,520 --> 00:48:51,010
parameters and I try to mock that and I

00:48:47,140 --> 00:48:54,710
okay this is more complex probably but

00:48:51,010 --> 00:48:59,120
for example you can try to set up things

00:48:54,710 --> 00:49:00,410
where I don't know for example if you

00:48:59,120 --> 00:49:02,480
have this problem with with

00:49:00,410 --> 00:49:04,940
synchronizing things you can start by

00:49:02,480 --> 00:49:08,720
creating a temporary directory which is

00:49:04,940 --> 00:49:09,980
where your files were being set up and I

00:49:08,720 --> 00:49:11,480
don't know that I've been external

00:49:09,980 --> 00:49:14,120
trading your test that actually goes

00:49:11,480 --> 00:49:16,540
down and delete the file or or comes up

00:49:14,120 --> 00:49:16,540
with them

00:49:20,460 --> 00:49:25,270
yeah sometimes it's true actually I have

00:49:23,260 --> 00:49:28,570
the same the same problem but then again

00:49:25,270 --> 00:49:31,470
running against services it's in my case

00:49:28,570 --> 00:49:34,930
for example was more complicated because

00:49:31,470 --> 00:49:37,510
it went my services so I had to

00:49:34,930 --> 00:49:41,260
coordinate with a lot of people telling

00:49:37,510 --> 00:49:43,330
them put me up at a service don't use

00:49:41,260 --> 00:49:45,910
this service for anything else and each

00:49:43,330 --> 00:49:47,950
time I want to run tests I need to be

00:49:45,910 --> 00:49:50,500
able to reach that that service which

00:49:47,950 --> 00:49:54,100
probably is behind that thousand VPNs

00:49:50,500 --> 00:49:57,010
and you have to hope through horse to

00:49:54,100 --> 00:50:00,130
get there so I don't know it's hard

00:49:57,010 --> 00:50:03,070
trade-off about generally if you have

00:50:00,130 --> 00:50:04,690
mocking you can always run tests if you

00:50:03,070 --> 00:50:08,730
run tests again the service you have

00:50:04,690 --> 00:50:08,730
situations where you can try and pass

00:50:14,850 --> 00:50:18,360
you change a lot

00:50:27,779 --> 00:50:33,640
yeah well that's actually possible you

00:50:30,729 --> 00:50:36,359
know it's a trade-off but for example

00:50:33,640 --> 00:50:39,759
for what I've seen the the trade of

00:50:36,359 --> 00:50:41,650
actually using real services was worse

00:50:39,759 --> 00:50:43,420
in my case because for example day they

00:50:41,650 --> 00:50:45,309
would most of the time the problem

00:50:43,420 --> 00:50:48,670
wasn't 9 mag but it was the service with

00:50:45,309 --> 00:50:50,289
the mock I can say in my test okay if i

00:50:48,670 --> 00:50:53,559
call it the service with these

00:50:50,289 --> 00:50:57,460
parameters i get get that back and then

00:50:53,559 --> 00:50:59,349
maybe in in irani the test with the with

00:50:57,460 --> 00:51:01,059
the live service it this wasn't the case

00:50:59,349 --> 00:51:02,739
so i was able to tell it's your problem

00:51:01,059 --> 00:51:08,470
it's your service that don't conform to

00:51:02,739 --> 00:51:09,670
the interface not not my oh ok it

00:51:08,470 --> 00:51:12,220
doesn't have an interfaith yeah well

00:51:09,670 --> 00:51:15,339
then then it's probably just the only

00:51:12,220 --> 00:51:20,559
way to go to run it against live service

00:51:15,339 --> 00:51:22,900
i was wondering which one is are the

00:51:20,559 --> 00:51:27,579
most compromised when you when you get

00:51:22,900 --> 00:51:32,109
ok actually that happen it on what was

00:51:27,579 --> 00:51:35,739
something with geographical thing yeah

00:51:32,109 --> 00:51:38,650
but buddy in really i haven't found it

00:51:35,739 --> 00:51:42,460
happen it just once actually so I don't

00:51:38,650 --> 00:51:44,859
really have statistics but I I think

00:51:42,460 --> 00:51:48,670
they've they actually try to randomize

00:51:44,859 --> 00:51:50,680
that a bit trying to go into binaries

00:51:48,670 --> 00:51:52,029
that are probably mostly used if you

00:51:50,680 --> 00:51:54,039
have something that's for example in

00:51:52,029 --> 00:51:55,989
utility to convert files if it was an

00:51:54,039 --> 00:51:57,279
attacker I would go for that because

00:51:55,989 --> 00:51:59,799
it's there probably someone is calling

00:51:57,279 --> 00:52:02,289
it how are you going to check the to

00:51:59,799 --> 00:52:05,920
validate if the binaries are usually you

00:52:02,289 --> 00:52:10,900
can do a checksum because md but yeah

00:52:05,920 --> 00:52:17,950
and defies ok it's even even what's it

00:52:10,900 --> 00:52:21,759
called no oh no I don't know that but uh

00:52:17,950 --> 00:52:23,890
anyway I use the one we wanted the zip

00:52:21,759 --> 00:52:25,509
format uses I mean it's a checksum you

00:52:23,890 --> 00:52:27,099
could probably most of the times even

00:52:25,509 --> 00:52:30,609
check the size because it tends to vary

00:52:27,099 --> 00:52:33,219
if you get sacked the size of the file

00:52:30,609 --> 00:52:34,550
it's very hard to track it and maintain

00:52:33,219 --> 00:52:38,260
the size and still have it

00:52:34,550 --> 00:52:41,660
working but uh anyway any any checks on

00:52:38,260 --> 00:52:44,480
which would work because it's very hard

00:52:41,660 --> 00:52:47,240
to come up with a with a binary that's

00:52:44,480 --> 00:52:53,300
act sim has the same size and and the

00:52:47,240 --> 00:52:56,680
checksum is the same even if you do md5

00:52:53,300 --> 00:53:00,350
it's possible I I think I don't know but

00:52:56,680 --> 00:53:04,880
well I'm not aware of this kind of thing

00:53:00,350 --> 00:53:06,530
but uh well if it's easy to actually

00:53:04,880 --> 00:53:10,280
have that what you should do it

00:53:06,530 --> 00:53:14,180
something like gpg or Oh probably yes or

00:53:10,280 --> 00:53:16,600
or even sha probably yeah it's probably

00:53:14,180 --> 00:53:16,600
doable

00:53:26,509 --> 00:53:33,500
which kind of proxy do you use forum I

00:53:29,940 --> 00:53:37,410
don't know integration with the other

00:53:33,500 --> 00:53:41,220
database that are not locally running or

00:53:37,410 --> 00:53:44,670
for web resources that you use because

00:53:41,220 --> 00:53:47,220
you said okay well no no for example it

00:53:44,670 --> 00:53:49,589
okay this is sort of quite a hack but it

00:53:47,220 --> 00:53:51,390
works and and it's not a sexual quad

00:53:49,589 --> 00:53:54,150
secure for example imagine you have to

00:53:51,390 --> 00:53:57,750
connect to a postgresql database which

00:53:54,150 --> 00:53:59,640
is quite remote you can just run your

00:53:57,750 --> 00:54:02,160
own postgresql locally and they don't

00:53:59,640 --> 00:54:04,440
any to do if you just want to read from

00:54:02,160 --> 00:54:07,079
the database saying okay this is labeled

00:54:04,440 --> 00:54:08,849
of the big one so you're using the

00:54:07,079 --> 00:54:10,920
synchronization protocol you can still

00:54:08,849 --> 00:54:13,740
read it the worst that can happen is

00:54:10,920 --> 00:54:16,529
that you're reading all data but uh well

00:54:13,740 --> 00:54:18,539
you know we do k we do you do caching

00:54:16,529 --> 00:54:23,099
them on the front end so it's not really

00:54:18,539 --> 00:54:26,759
a huge problem and unless you really

00:54:23,099 --> 00:54:29,309
have a domain where reading the most

00:54:26,759 --> 00:54:32,910
up-to-date data is crucial then you can

00:54:29,309 --> 00:54:35,400
do this and so are even it's it's a good

00:54:32,910 --> 00:54:38,880
it's a good candidate and this is the

00:54:35,400 --> 00:54:42,089
only two situations in which i've used

00:54:38,880 --> 00:54:44,250
this technique maybe you can use it in

00:54:42,089 --> 00:54:46,650
other things not not when you actually

00:54:44,250 --> 00:54:49,910
have to call something web because you

00:54:46,650 --> 00:54:49,910
don't have any replication

00:54:59,079 --> 00:55:03,400

YouTube URL: https://www.youtube.com/watch?v=1yZmtiNeffg


