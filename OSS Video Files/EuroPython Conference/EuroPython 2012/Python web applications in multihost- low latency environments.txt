Title: Python web applications in multihost- low latency environments
Publication date: 2015-04-19
Playlist: EuroPython 2012
Description: 
	[EuroPython 2012] P Schon - 5 JULY 2012 in "Track Tagliatelle"
Captions: 
	00:00:29,029 --> 00:00:37,620
okay can you hear me so I would like to

00:00:34,770 --> 00:00:40,800
introduce myself my name is our fan and

00:00:37,620 --> 00:00:44,250
i work at deutsche buzzer group i do no

00:00:40,800 --> 00:00:49,260
good company this is the company which

00:00:44,250 --> 00:00:53,600
operates Frankfurt Stock Exchange yolks

00:00:49,260 --> 00:00:57,180
exchange which is one of the biggest

00:00:53,600 --> 00:01:00,570
exchange organization in the world for

00:00:57,180 --> 00:01:03,359
derivate options futures and these

00:01:00,570 --> 00:01:05,610
financial instruments and also it

00:01:03,359 --> 00:01:09,990
operate International Securities

00:01:05,610 --> 00:01:12,600
Exchange in New York and I border as

00:01:09,990 --> 00:01:14,520
Python developer of performance

00:01:12,600 --> 00:01:19,920
monitoring tool of electronic trading

00:01:14,520 --> 00:01:23,450
system this is the system which you can

00:01:19,920 --> 00:01:28,009
where you can buy or sell your shares

00:01:23,450 --> 00:01:35,460
futures options and whatever you own or

00:01:28,009 --> 00:01:37,290
whatever you like to buy this is time

00:01:35,460 --> 00:01:45,810
which I am working on i will show you

00:01:37,290 --> 00:01:48,869
screenshots this is the performance of

00:01:45,810 --> 00:01:52,170
this electronic training system it

00:01:48,869 --> 00:01:55,259
collects data from other components say

00:01:52,170 --> 00:01:58,860
diamonds which are running in this

00:01:55,259 --> 00:02:01,500
training system and it collects and

00:01:58,860 --> 00:02:04,590
measures all performance metrics like

00:02:01,500 --> 00:02:07,439
Layton sees device round trip times

00:02:04,590 --> 00:02:10,649
between these components are these

00:02:07,439 --> 00:02:11,500
components some messages between them

00:02:10,649 --> 00:02:13,660
and

00:02:11,500 --> 00:02:19,590
this system collects RAM and displays

00:02:13,660 --> 00:02:23,710
them in this fancy web page dark brows

00:02:19,590 --> 00:02:28,540
which are moving in during time when the

00:02:23,710 --> 00:02:31,450
Rio die mode is on you can select some

00:02:28,540 --> 00:02:35,500
observables display them and the graph

00:02:31,450 --> 00:02:38,860
is moving and Ajax calls are fetching

00:02:35,500 --> 00:02:41,590
new data from the server you can display

00:02:38,860 --> 00:02:47,560
instagrams it's on this graph you can

00:02:41,590 --> 00:02:52,930
display dotted graphs it's it's very

00:02:47,560 --> 00:02:55,030
good job and the second screenshot is

00:02:52,930 --> 00:02:58,060
from the dashboard we chose all

00:02:55,030 --> 00:03:05,890
processes in the system it's done using

00:02:58,060 --> 00:03:09,790
jQuery SVG all these rectangles response

00:03:05,890 --> 00:03:15,270
to clicks events and despise these

00:03:09,790 --> 00:03:15,270
tooltips where you can see autograph

00:03:15,510 --> 00:03:23,830
this is my job it's done in Python on

00:03:19,750 --> 00:03:33,880
web server and in JavaScript using SVG

00:03:23,830 --> 00:03:37,269
and jQuery flood in from Bowser so we

00:03:33,880 --> 00:03:40,660
will talk about as we have wsgi

00:03:37,269 --> 00:03:44,170
frameworks how do you works very mostly

00:03:40,660 --> 00:03:50,019
works in similar way and the next are we

00:03:44,170 --> 00:03:56,799
will target on synchronization between

00:03:50,019 --> 00:03:59,709
processes and we will show some useful

00:03:56,799 --> 00:04:04,709
techniques when running background tasks

00:03:59,709 --> 00:04:04,709
and one star we will show some

00:04:05,400 --> 00:04:14,590
interesting features or interesting

00:04:10,390 --> 00:04:18,790
tricks with get and post data so whiskey

00:04:14,590 --> 00:04:21,510
frameworks are mostly similar they

00:04:18,790 --> 00:04:24,510
create requests from environment

00:04:21,510 --> 00:04:29,940
provided by the server this environment

00:04:24,510 --> 00:04:34,910
contains data like server name a wreck

00:04:29,940 --> 00:04:43,310
was metal guidepost did eat food and

00:04:34,910 --> 00:04:43,310
also it contains pass a port number and

00:04:44,720 --> 00:04:53,730
many many useful options in the next

00:04:49,980 --> 00:04:55,620
step in the web server is dispatching

00:04:53,730 --> 00:04:58,230
Google to appropriate controller

00:04:55,620 --> 00:05:03,990
function this control function returns

00:04:58,230 --> 00:05:06,300
HTTP response in Django it's called next

00:05:03,990 --> 00:05:09,780
next step is controller function in

00:05:06,300 --> 00:05:11,640
Django it's called view function and the

00:05:09,780 --> 00:05:19,820
result from this function is written

00:05:11,640 --> 00:05:23,910
back to web server this request object

00:05:19,820 --> 00:05:27,480
it's mostly in jungle its object passed

00:05:23,910 --> 00:05:29,640
all functions but I saw some other

00:05:27,480 --> 00:05:33,420
techniques the van der waals the three

00:05:29,640 --> 00:05:37,160
local object it was singleton or Bork

00:05:33,420 --> 00:05:41,490
object so you basically import it from

00:05:37,160 --> 00:05:46,010
the framework and it worked it depends

00:05:41,490 --> 00:05:48,330
on Lewis framework cut during the time

00:05:46,010 --> 00:05:50,820
authentication is usually home world and

00:05:48,330 --> 00:05:57,570
session is created or fetched from cash

00:05:50,820 --> 00:06:01,710
or various stores asians your

00:05:57,570 --> 00:06:05,400
dispatching in jungle you probably know

00:06:01,710 --> 00:06:08,520
these regular expressions but you can

00:06:05,400 --> 00:06:13,470
also use wildcards in your favorite

00:06:08,520 --> 00:06:15,840
framework or decorators and we were

00:06:13,470 --> 00:06:18,900
destroyed you can apply directly on this

00:06:15,840 --> 00:06:20,910
controller function and at this paper

00:06:18,900 --> 00:06:27,289
you can also handle redirects and

00:06:20,910 --> 00:06:32,169
rewrite similarly as smoothly right

00:06:27,289 --> 00:06:38,930
the rescue specification also knows the

00:06:32,169 --> 00:06:41,330
feature called internal direct this

00:06:38,930 --> 00:06:44,149
regirock response contains a true

00:06:41,330 --> 00:06:48,439
location and if the location contains

00:06:44,149 --> 00:06:54,589
only path and not out a fool question

00:06:48,439 --> 00:06:58,129
with HTTP slice live server name so then

00:06:54,589 --> 00:07:01,819
it does internal dialogue and no

00:06:58,129 --> 00:07:06,020
response is written to client so you can

00:07:01,819 --> 00:07:09,979
be surprised if you don't feel full

00:07:06,020 --> 00:07:18,709
you're over there and only pass then you

00:07:09,979 --> 00:07:21,229
may be very surprised that sorry control

00:07:18,709 --> 00:07:23,479
function it generates HTML content or

00:07:21,229 --> 00:07:27,559
JSON contam or whatever you want to

00:07:23,479 --> 00:07:32,209
return to the client it usually handles

00:07:27,559 --> 00:07:34,969
templates or data cache cookies and

00:07:32,209 --> 00:07:38,029
written response which has good status

00:07:34,969 --> 00:07:41,479
headers content and it's usually rubbed

00:07:38,029 --> 00:07:45,199
with alejandro you know this fancy debug

00:07:41,479 --> 00:07:51,559
page from jungle and this page is in

00:07:45,199 --> 00:07:55,360
most frameworks stating replications as

00:07:51,559 --> 00:07:58,669
far you know HTTP protocol is stateless

00:07:55,360 --> 00:08:03,699
it means that all requests are

00:07:58,669 --> 00:08:08,599
independent from previous requests and

00:08:03,699 --> 00:08:12,129
from next request but applications are

00:08:08,599 --> 00:08:15,349
usually stifle their disposal state

00:08:12,129 --> 00:08:19,869
which is handled by JavaScript cookies

00:08:15,349 --> 00:08:24,080
good parameters what is in your forms

00:08:19,869 --> 00:08:27,499
very social service state which consists

00:08:24,080 --> 00:08:30,499
of process state incision state is

00:08:27,499 --> 00:08:34,149
process state are usually to be

00:08:30,499 --> 00:08:38,479
connections other connections to cave

00:08:34,149 --> 00:08:39,849
open files local cache we will do cash

00:08:38,479 --> 00:08:43,329
inside

00:08:39,849 --> 00:08:46,750
risky process and that is also shared

00:08:43,329 --> 00:08:52,839
state session state which needs to be

00:08:46,750 --> 00:09:02,459
synchronized between instances third

00:08:52,839 --> 00:09:06,120
stains decision is fetched from cash

00:09:02,459 --> 00:09:09,970
then usually apply some modification and

00:09:06,120 --> 00:09:12,699
then you write on the cash then we

00:09:09,970 --> 00:09:15,970
worked on decision to the cash and there

00:09:12,699 --> 00:09:18,130
is problem because race condition and

00:09:15,970 --> 00:09:20,829
cool so you need to synchronize this

00:09:18,130 --> 00:09:27,699
between processes or all web server

00:09:20,829 --> 00:09:29,410
nodes how to synchronize decision or

00:09:27,699 --> 00:09:31,600
discharge state between processes you

00:09:29,410 --> 00:09:36,339
can use the sequel databases or low

00:09:31,600 --> 00:09:40,800
sequel databases log files messaging EG

00:09:36,339 --> 00:09:44,410
amqp you probably know m QP from salary

00:09:40,800 --> 00:09:47,470
Junko scenario this is a synchronous

00:09:44,410 --> 00:09:51,370
framework in Python which uses amqp

00:09:47,470 --> 00:09:54,750
internally but its general protocol for

00:09:51,370 --> 00:09:59,079
sending messages between components

00:09:54,750 --> 00:10:04,990
otherwise our example RPC json-rpc so

00:09:59,079 --> 00:10:09,029
these are remote procedure calls or you

00:10:04,990 --> 00:10:13,300
can use distributed load manager d dlm i

00:10:09,029 --> 00:10:18,610
haven't found any useful dealer manager

00:10:13,300 --> 00:10:25,170
for python so i wrote my own and i will

00:10:18,610 --> 00:10:34,750
show you how it works it provides

00:10:25,170 --> 00:10:38,589
something called mutex over network this

00:10:34,750 --> 00:10:40,750
is how is this dlm used from client side

00:10:38,589 --> 00:10:43,660
the client from this context is the

00:10:40,750 --> 00:10:48,069
whiskey process and the server is the

00:10:43,660 --> 00:10:50,470
drm demon so you connect to this client

00:10:48,069 --> 00:10:54,940
on some host

00:10:50,470 --> 00:11:03,220
alt & u bar some client name every crime

00:10:54,940 --> 00:11:07,470
should have unique name so you create a

00:11:03,220 --> 00:11:11,170
lock in every busca process you have

00:11:07,470 --> 00:11:14,160
with this client mkay log function and

00:11:11,170 --> 00:11:17,530
you pause the lock name which is unique

00:11:14,160 --> 00:11:22,000
you can create as many logs as you want

00:11:17,530 --> 00:11:26,890
and then you see you can use it same way

00:11:22,000 --> 00:11:30,490
as you use threading blocks from reading

00:11:26,890 --> 00:11:32,740
module so you call lock acquire here is

00:11:30,490 --> 00:11:36,330
the critical section and at the end you

00:11:32,740 --> 00:11:45,100
release the lock or you can use it as a

00:11:36,330 --> 00:11:57,970
contact manager using this statement so

00:11:45,100 --> 00:12:03,610
now i will show how it works so in this

00:11:57,970 --> 00:12:06,640
terminal i will start the alarm so it's

00:12:03,610 --> 00:12:12,100
listening or loco horse about it is a

00:12:06,640 --> 00:12:15,670
little more difficult to listen on unix

00:12:12,100 --> 00:12:21,870
the main so cards or otherwise it's up

00:12:15,670 --> 00:12:24,870
to and in this terminal i will start a

00:12:21,870 --> 00:12:24,870
client

00:12:36,170 --> 00:12:50,690
now we'll crane client line one for

00:12:44,010 --> 00:12:58,560
example I will create a lock Oh test

00:12:50,690 --> 00:13:04,890
here i will start another another pipe

00:12:58,560 --> 00:13:25,110
item process import from the aluminum

00:13:04,890 --> 00:13:29,519
port book client mkay log so oh sorry it

00:13:25,110 --> 00:13:33,690
should be climbed to and i will create

00:13:29,519 --> 00:13:37,980
same log with same name so these two

00:13:33,690 --> 00:13:46,070
clients have same log and in the first

00:13:37,980 --> 00:13:46,070
process i will acquire a lock look oh

00:13:46,850 --> 00:14:02,190
wait no typing acquire so this first

00:13:58,350 --> 00:14:10,350
process hell's a lock and the second

00:14:02,190 --> 00:14:12,449
process will try to hold same long and

00:14:10,350 --> 00:14:16,170
it's writing because it held by the

00:14:12,449 --> 00:14:21,000
first process the communication protocol

00:14:16,170 --> 00:14:25,050
between client and server is X base it's

00:14:21,000 --> 00:14:32,830
very light right and if I release the

00:14:25,050 --> 00:14:34,720
log in the first client release so

00:14:32,830 --> 00:14:40,180
this process continues running and ill

00:14:34,720 --> 00:14:44,430
health a walk and if I want to acquire

00:14:40,180 --> 00:14:58,680
this lock again it'sit's writing

00:14:44,430 --> 00:14:58,680
surprising release and although release

00:14:59,100 --> 00:15:09,190
it has got some disadvantages because if

00:15:03,700 --> 00:15:11,770
the application files between this run

00:15:09,190 --> 00:15:16,840
don't walk is acquired then all other

00:15:11,770 --> 00:15:18,540
busca processes are writing so you must

00:15:16,840 --> 00:15:23,590
be very careful what are you doing

00:15:18,540 --> 00:15:31,870
inside critical section and you have to

00:15:23,590 --> 00:15:35,470
be careful and I publish this dlm on a

00:15:31,870 --> 00:15:41,140
code at if stayed calm so it's free

00:15:35,470 --> 00:15:43,780
software you can use it it's up to some

00:15:41,140 --> 00:15:46,680
now back to consola and back to

00:15:43,780 --> 00:15:46,680
presentation

00:15:51,610 --> 00:15:56,890
it's easy to use it can be used as

00:15:54,130 --> 00:16:02,050
normal log it works with tcp/ip unique

00:15:56,890 --> 00:16:04,269
so cards and there are disadvantages as

00:16:02,050 --> 00:16:14,380
I said and it's a single point of

00:16:04,269 --> 00:16:16,510
failure another thing you can run the

00:16:14,380 --> 00:16:20,589
ground process it V department was gay

00:16:16,510 --> 00:16:25,149
and that is option called whiskey import

00:16:20,589 --> 00:16:30,339
script for a pouch which you can use for

00:16:25,149 --> 00:16:35,170
running background processes along with

00:16:30,339 --> 00:16:36,880
normal whiskey processes this process

00:16:35,170 --> 00:16:42,250
when it is running it does not accept

00:16:36,880 --> 00:16:46,720
the request of course you can run this

00:16:42,250 --> 00:16:49,870
demon sprightly but I page then curls of

00:16:46,720 --> 00:16:54,850
start up and up and restart into process

00:16:49,870 --> 00:16:58,149
hangs and this background processes can

00:16:54,850 --> 00:17:13,240
be used to fill cash to give some big

00:16:58,149 --> 00:17:17,500
data or to do some expensive task so

00:17:13,240 --> 00:17:21,870
this is how it works there is a normal

00:17:17,500 --> 00:17:21,870
configuration for the scheming process

00:17:22,319 --> 00:17:28,929
install Stan processes with one fat

00:17:26,100 --> 00:17:32,350
there is another demon process called

00:17:28,929 --> 00:17:34,960
worker which starts a long process one

00:17:32,350 --> 00:17:39,700
thread with this pile am I am a ground

00:17:34,960 --> 00:17:44,830
worker and this is the invocation of the

00:17:39,700 --> 00:17:47,580
script this is normal this is you you

00:17:44,830 --> 00:17:47,580
probably know this

00:17:52,040 --> 00:17:57,500
this is the content of this demon that

00:17:54,680 --> 00:18:05,090
is functions are forever which does the

00:17:57,500 --> 00:18:07,340
expansive task in this Val to psycho get

00:18:05,090 --> 00:18:10,970
some data is probably something which

00:18:07,340 --> 00:18:12,920
takes a long time to complete so this

00:18:10,970 --> 00:18:17,390
function cannot be called directly from

00:18:12,920 --> 00:18:20,810
this gear so you have to do it at the

00:18:17,390 --> 00:18:25,880
background or there can be some waiting

00:18:20,810 --> 00:18:31,490
for messages from mqp from celery or for

00:18:25,880 --> 00:18:35,630
some synchronous request this is there

00:18:31,490 --> 00:18:39,110
because when this process is started not

00:18:35,630 --> 00:18:41,660
from terminal but from was gay then the

00:18:39,110 --> 00:18:45,080
name is underscore mode on the scope

00:18:41,660 --> 00:18:49,370
whiskey underscore and then some unique

00:18:45,080 --> 00:18:58,310
identifiers so this can be started also

00:18:49,370 --> 00:19:06,350
from terminal and also from a bunch fun

00:18:58,310 --> 00:19:12,440
with get and post data there is a query

00:19:06,350 --> 00:19:17,120
string which repeats this parameter

00:19:12,440 --> 00:19:21,220
hello world hello Europe item is m1 m2

00:19:17,120 --> 00:19:23,590
and this can be directly translated to

00:19:21,220 --> 00:19:29,150
dictionary you know this from jungle

00:19:23,590 --> 00:19:31,640
request don't get this hello parameter

00:19:29,150 --> 00:19:36,050
is a list because it's repeated two

00:19:31,640 --> 00:19:38,720
times we use this equivalency between

00:19:36,050 --> 00:19:41,860
query strings and Python dictionaries in

00:19:38,720 --> 00:19:41,860
my project quite often

00:19:47,030 --> 00:19:57,090
but what we also use is including

00:19:53,490 --> 00:20:01,710
multiple multiple query strings into one

00:19:57,090 --> 00:20:04,680
string this is a JavaScript code if you

00:20:01,710 --> 00:20:08,450
have got multiple same forms on a single

00:20:04,680 --> 00:20:12,660
page you can iterate over these forms

00:20:08,450 --> 00:20:21,180
satirize this form and if you escape

00:20:12,660 --> 00:20:28,200
this data then you will encode multiple

00:20:21,180 --> 00:20:31,130
forms in a single query string then this

00:20:28,200 --> 00:20:37,200
is Python equivalent of this JavaScript

00:20:31,130 --> 00:20:43,500
well as this escape function has got

00:20:37,200 --> 00:20:47,510
equivalent in your lip dude code and as

00:20:43,500 --> 00:21:00,180
a result you will get this very very

00:20:47,510 --> 00:21:02,520
long query string and you can repeat

00:21:00,180 --> 00:21:06,600
this multiple time so you can include

00:21:02,520 --> 00:21:09,840
recursively my name forms and as a

00:21:06,600 --> 00:21:15,200
result you will receive quite

00:21:09,840 --> 00:21:29,670
complicated structure and we use it i

00:21:15,200 --> 00:21:33,320
will show you are these graphs there are

00:21:29,670 --> 00:21:37,650
hidden forms each of these series are

00:21:33,320 --> 00:21:43,740
the series or on line one color this is

00:21:37,650 --> 00:21:48,320
a serie this series are defined by

00:21:43,740 --> 00:21:53,540
internal forms hidden forms and

00:21:48,320 --> 00:21:55,620
everything is encoded in these recursive

00:21:53,540 --> 00:21:59,220
query strings

00:21:55,620 --> 00:22:01,410
so if you add another serie to this

00:21:59,220 --> 00:22:06,650
graph it will create another hidden

00:22:01,410 --> 00:22:06,650
graph oh sorry another hidden form and

00:22:06,890 --> 00:22:16,220
when you render a real-time request

00:22:10,890 --> 00:22:16,220
using a junkie sent to the server

00:22:17,420 --> 00:22:26,130
everything is encoded in very very long

00:22:20,400 --> 00:22:28,620
cure oh by the way do you know how are

00:22:26,130 --> 00:22:33,150
these graphs created it's using jQuery

00:22:28,620 --> 00:22:39,860
fault library it's it's very interesting

00:22:33,150 --> 00:22:46,590
library you can export everything to PNG

00:22:39,860 --> 00:22:50,520
directly and you can apply custom

00:22:46,590 --> 00:22:56,760
functions like logarithmic function to

00:22:50,520 --> 00:23:02,040
any of this access so in case of this

00:22:56,760 --> 00:23:05,790
histogram here and these values can be

00:23:02,040 --> 00:23:08,370
very very small and at the end there can

00:23:05,790 --> 00:23:12,330
be very very big so will you apply or

00:23:08,370 --> 00:23:17,120
getting function it will make the graph

00:23:12,330 --> 00:23:17,120
fitting and nice looking

00:23:43,460 --> 00:23:50,820
so this very long cute Allah from the

00:23:48,060 --> 00:23:53,190
previous slide can be directly

00:23:50,820 --> 00:23:56,280
translated to this Python structural

00:23:53,190 --> 00:24:02,220
JSON structure where all these

00:23:56,280 --> 00:24:18,180
parameters are recursively inside from

00:24:02,220 --> 00:24:24,180
the previews own ok again to this

00:24:18,180 --> 00:24:29,960
dashboard this is this dashboard can be

00:24:24,180 --> 00:24:29,960
also exported to play in SVG document

00:24:30,860 --> 00:24:40,440
that is button to export so you can send

00:24:35,220 --> 00:24:44,190
this as a picture and this dashboard all

00:24:40,440 --> 00:24:47,990
so long is real-time updated every

00:24:44,190 --> 00:24:55,550
several seconds so you you will get

00:24:47,990 --> 00:24:55,550
overview of the system very fast

00:25:02,380 --> 00:25:34,600
I got any questions to this okay i will

00:25:22,420 --> 00:25:58,720
show you another useful technique is

00:25:34,600 --> 00:26:01,990
factual strong no CD in other

00:25:58,720 --> 00:26:05,950
presentations that are saying that a

00:26:01,990 --> 00:26:08,200
part is not good for running hello hi

00:26:05,950 --> 00:26:10,540
available applications which needs to

00:26:08,200 --> 00:26:14,350
respond as fast as possible I think it's

00:26:10,540 --> 00:26:17,080
not true because my experience is when

00:26:14,350 --> 00:26:19,960
the application is slow the program is

00:26:17,080 --> 00:26:26,470
not in the web server its problem is in

00:26:19,960 --> 00:26:28,740
the application itself science in a

00:26:26,470 --> 00:26:28,740
balloon

00:26:54,370 --> 00:27:06,740
yeah so this is running some example the

00:27:03,200 --> 00:27:09,620
ski application what i did i rename the

00:27:06,740 --> 00:27:14,720
process approach to to process I am

00:27:09,620 --> 00:27:18,310
approach to the our whiskey processes

00:27:14,720 --> 00:27:23,360
and there is also running this whiskey

00:27:18,310 --> 00:27:26,750
background process I am look server do

00:27:23,360 --> 00:27:30,940
know how to rename process it's using

00:27:26,750 --> 00:27:43,640
this exact function inside bash

00:27:30,940 --> 00:27:52,430
basically I get it this way username

00:27:43,640 --> 00:27:55,340
patch opportune this I copied our sorry

00:27:52,430 --> 00:28:00,410
i er moved this approach to binary to a

00:27:55,340 --> 00:28:02,980
page 2 minus bail and using this exact

00:28:00,410 --> 00:28:08,000
function i rename it to a bunch to these

00:28:02,980 --> 00:28:19,330
spaces are there because if they are

00:28:08,000 --> 00:28:19,330
under if i delete the spaces the start

00:28:21,789 --> 00:28:32,869
it's allowed in the started then the

00:28:29,210 --> 00:28:37,460
name of these whiskey processes is cut

00:28:32,869 --> 00:28:42,350
to the rank of original approach because

00:28:37,460 --> 00:28:47,649
it got some internal tricks with these

00:28:42,350 --> 00:28:47,649
arguments or what something like that

00:29:09,039 --> 00:29:16,549
okay so this is the one from my side

00:29:14,269 --> 00:29:20,019
have you got questions you can connect

00:29:16,549 --> 00:29:23,389
me to link then you can find some my

00:29:20,019 --> 00:29:26,450
slip out on site juncos lipids and i

00:29:23,389 --> 00:29:28,940
would like to also say thank you to the

00:29:26,450 --> 00:29:36,580
ciabatta group which sends me there and

00:29:28,940 --> 00:29:36,580
allowed me to present our stuff

00:29:45,730 --> 00:29:54,649
any question just when you are

00:29:52,279 --> 00:29:58,669
demonstrating your distributed lock

00:29:54,649 --> 00:30:01,100
server what happens if my client that is

00:29:58,669 --> 00:30:02,570
a quad a lock dies is there any sort of

00:30:01,100 --> 00:30:09,980
time out I can set or anything of that

00:30:02,570 --> 00:30:12,259
sort of the locks into in the code i

00:30:09,980 --> 00:30:14,499
will show you the code of this web

00:30:12,259 --> 00:30:14,499
server

00:30:27,450 --> 00:30:40,500
dlm 25 so we teachers looking always

00:30:36,250 --> 00:30:48,160
select reading there is a look object

00:30:40,500 --> 00:30:53,010
this is the client side this is written

00:30:48,160 --> 00:30:53,010
to the client when it creates a look and

00:30:54,150 --> 00:31:03,630
when the client dice and lock this

00:30:57,310 --> 00:31:07,150
health probably this is the problem that

00:31:03,630 --> 00:31:09,400
all other busca processes are waiting by

00:31:07,150 --> 00:31:12,390
the reset function which basically

00:31:09,400 --> 00:31:18,580
deletes all logs which are held and

00:31:12,390 --> 00:31:21,010
everything can continue so you have to

00:31:18,580 --> 00:31:23,740
be prepared for the situation but this

00:31:21,010 --> 00:31:27,040
situation is not special to my dl arm

00:31:23,740 --> 00:31:30,370
but it's this is general with when you

00:31:27,040 --> 00:31:32,920
have good looking and something goes

00:31:30,370 --> 00:31:41,700
wrong then usually have to restart

00:31:32,920 --> 00:31:50,860
everything this is a look server it uses

00:31:41,700 --> 00:31:54,520
shredding when the client connect to the

00:31:50,860 --> 00:31:57,610
server it creates a new threat and this

00:31:54,520 --> 00:31:59,800
new thread it to when it receives

00:31:57,610 --> 00:32:03,400
operation or when it receives a message

00:31:59,800 --> 00:32:07,330
from the client this message is

00:32:03,400 --> 00:32:15,390
dispatched to 10 function one of these

00:32:07,330 --> 00:32:19,480
functions emco log em a em car air lock

00:32:15,390 --> 00:32:23,970
acquiring release and rested normal log

00:32:19,480 --> 00:32:28,860
is like a new tax total exclusion

00:32:23,970 --> 00:32:34,230
airlock is more similar to

00:32:28,860 --> 00:32:37,710
semaphore as many times as you acquire a

00:32:34,230 --> 00:32:58,640
lock so then you have to release it same

00:32:37,710 --> 00:33:19,730
times a rush of you in tap by Michael

00:32:58,640 --> 00:33:19,730
import create clouds MK airlock awoke

00:33:21,230 --> 00:33:28,220
something goes wrong it's probably held

00:33:32,559 --> 00:33:44,710
the stool and because it it is running

00:33:41,080 --> 00:34:03,429
with a pouch so there is something wrong

00:33:44,710 --> 00:34:05,789
but ok the alarm ok i will continue with

00:34:03,429 --> 00:34:05,789
the source

00:34:16,739 --> 00:34:27,730
but it is running in the full cycle

00:34:21,190 --> 00:34:34,929
while true so one do log does not exist

00:34:27,730 --> 00:34:37,210
it creates a new local miss dar if you

00:34:34,929 --> 00:34:40,869
call the function on catalog it will

00:34:37,210 --> 00:34:49,119
create this hour idolan what is it

00:34:40,869 --> 00:34:56,349
restricted or repeat repeat it local ok

00:34:49,119 --> 00:34:59,109
a trope question yeah and in the back

00:34:56,349 --> 00:35:02,980
where you are putting multiple forms

00:34:59,109 --> 00:35:04,569
into a query string a lot of the time

00:35:02,980 --> 00:35:07,440
with some browsers you'll have a problem

00:35:04,569 --> 00:35:10,559
if the query string becomes too long

00:35:07,440 --> 00:35:14,049
what why why not just if you're using

00:35:10,559 --> 00:35:16,980
Ajax anyway why not just post it and the

00:35:14,049 --> 00:35:20,559
post data as JSON or something like that

00:35:16,980 --> 00:35:25,269
yeah it's also possible we currently use

00:35:20,559 --> 00:35:28,059
God but yeah is there a pharmacist there

00:35:25,269 --> 00:35:32,460
is no limitation for God our meters

00:35:28,059 --> 00:35:35,950
length but we never had this limitation

00:35:32,460 --> 00:35:46,289
we've not been as lucky sir we've not

00:35:35,950 --> 00:35:46,289
been as lucky any more questions

00:35:50,370 --> 00:35:56,910
so and what is the typical latency of

00:35:55,380 --> 00:35:59,960
this application after you've done all

00:35:56,910 --> 00:36:03,840
these optimizations and improvements Oh

00:35:59,960 --> 00:36:05,670
could you repeat the question what is

00:36:03,840 --> 00:36:07,980
the typical latency of this application

00:36:05,670 --> 00:36:12,720
after you've improved it in all these

00:36:07,980 --> 00:36:16,370
ways for our application window news and

00:36:12,720 --> 00:36:19,560
a common framework like jungle or flask

00:36:16,370 --> 00:36:24,420
because this application started as a

00:36:19,560 --> 00:36:27,630
CGI it was printing all HTML to standard

00:36:24,420 --> 00:36:30,390
output and then I joined broke and i

00:36:27,630 --> 00:36:34,200
said no cgi is not good way how to do it

00:36:30,390 --> 00:36:40,140
so is i started rewriting to using was

00:36:34,200 --> 00:36:43,200
game and there was no time to implement

00:36:40,140 --> 00:36:48,690
some existing framework so we created

00:36:43,200 --> 00:36:51,150
our own and it's very light by it it it

00:36:48,690 --> 00:36:55,020
does not have to block any other pecan

00:36:51,150 --> 00:37:03,180
demons or databases and it needs to

00:36:55,020 --> 00:37:06,900
respond as fast as possible yeah how

00:37:03,180 --> 00:37:10,470
fast is that for these graphs it is

00:37:06,900 --> 00:37:15,300
early response in I don't know 50

00:37:10,470 --> 00:37:21,510
milliseconds for new data this is fine

00:37:15,300 --> 00:37:25,130
50 millisecond is fine times around 200

00:37:21,510 --> 00:37:33,440
milliseconds it'sit's were some times

00:37:25,130 --> 00:37:33,440
more it's it's better any more questions

00:37:33,650 --> 00:37:37,440
good question you mentioned that

00:37:35,700 --> 00:37:40,050
sometimes you health problems if they

00:37:37,440 --> 00:37:42,510
you up choir a look and you have a

00:37:40,050 --> 00:37:45,570
problem so maybe adding a timeout here

00:37:42,510 --> 00:37:48,960
in the choir cause all these so you can

00:37:45,570 --> 00:37:52,860
check the problem and not that look

00:37:48,960 --> 00:37:55,800
everything I think using timeout it's

00:37:52,860 --> 00:37:58,160
not possible because at server site if

00:37:55,800 --> 00:38:00,930
you just stand out threading clocks and

00:37:58,160 --> 00:38:06,690
this work cannot be easily killed I

00:38:00,930 --> 00:38:11,880
think so you maybe can delete this

00:38:06,690 --> 00:38:13,650
object from other threat so yeah maybe

00:38:11,880 --> 00:38:17,250
that could be where you how to do it

00:38:13,650 --> 00:38:23,940
there could be another thread checking

00:38:17,250 --> 00:38:28,320
if something doesn't go wrong and event

00:38:23,940 --> 00:38:30,330
occurring these logs should you may be

00:38:28,320 --> 00:38:32,520
deprecated the lock require a lot

00:38:30,330 --> 00:38:38,670
relation recommend everyone uses the wet

00:38:32,520 --> 00:38:44,580
statement if I recommended oh yeah why

00:38:38,670 --> 00:38:46,800
not the wealth statement so so that if

00:38:44,580 --> 00:38:52,490
you get an exception or anything like it

00:38:46,800 --> 00:38:52,490
well be guaranteed to release you know

00:38:55,280 --> 00:39:10,410
you window is a bug in this sir hmm

00:39:04,940 --> 00:39:12,780
always always user as a context manager

00:39:10,410 --> 00:39:15,420
the reasons don't use the choir and

00:39:12,780 --> 00:39:20,490
release manually always use it within a

00:39:15,420 --> 00:39:23,700
web steam this is google voice why did

00:39:20,490 --> 00:39:25,890
you write your own locking server things

00:39:23,700 --> 00:39:28,250
if she's using memcache you're ready

00:39:25,890 --> 00:39:32,520
some other storage why I did it yeah

00:39:28,250 --> 00:39:40,220
basically I saw some looking for using

00:39:32,520 --> 00:39:43,530
memcache it it was doing sleep inside it

00:39:40,220 --> 00:39:46,540
puts some key it into cash then it

00:39:43,530 --> 00:39:54,760
slipped and I think this

00:39:46,540 --> 00:40:02,500
is not a good idea but memcache is for

00:39:54,760 --> 00:40:10,960
other people not for looking okay any

00:40:02,500 --> 00:40:14,080
question can you tell us a bit more

00:40:10,960 --> 00:40:16,540
about your your lovely dashboard made

00:40:14,080 --> 00:40:25,120
with jquery SVG because that looked

00:40:16,540 --> 00:40:29,860
really fascinating ok so this dashboard

00:40:25,120 --> 00:40:33,400
is created using background task it

00:40:29,860 --> 00:40:41,160
iterates over all processes in the

00:40:33,400 --> 00:40:49,480
system and check their status or it is

00:40:41,160 --> 00:40:51,810
and then this page refresh it downloads

00:40:49,480 --> 00:40:57,330
json string from the server and

00:40:51,810 --> 00:41:02,250
javascript understand the JSON and

00:40:57,330 --> 00:41:02,250
creates a box there are already

00:41:05,250 --> 00:41:13,230
parameters like Vince Hayes top left for

00:41:09,490 --> 00:41:18,190
each of these boxes for each of these

00:41:13,230 --> 00:41:23,350
elements and all these data are in JSON

00:41:18,190 --> 00:41:27,880
and these graphs are loaded after you

00:41:23,350 --> 00:41:33,820
click on this box using cannot reach X

00:41:27,880 --> 00:41:36,390
call this is working basically it's not

00:41:33,820 --> 00:41:42,450
some kind of a library for these graphs

00:41:36,390 --> 00:41:45,760
you basically draw a polyline using SVG

00:41:42,450 --> 00:41:47,970
where every pixel is the point of the

00:41:45,760 --> 00:41:47,970
graph

00:41:51,180 --> 00:41:57,520
okay last question you right this is a

00:41:55,750 --> 00:42:01,360
short question why didn't you use

00:41:57,520 --> 00:42:04,750
twisted or tornado instead of writing

00:42:01,360 --> 00:42:15,430
this whole massive socket connecting and

00:42:04,750 --> 00:42:19,210
everything because mmm is that I don't

00:42:15,430 --> 00:42:22,869
know much to start so maybe it will be

00:42:19,210 --> 00:42:24,760
my next task to provide it a twisted but

00:42:22,869 --> 00:42:27,580
as far i know two studies a synchronous

00:42:24,760 --> 00:42:30,640
but you need some kind of synchronous

00:42:27,580 --> 00:42:35,740
working not a synchronous how we have

00:42:30,640 --> 00:42:47,830
you how you keep the client waiting for

00:42:35,740 --> 00:42:50,080
us sir yeah but this dlm was for 200

00:42:47,830 --> 00:42:56,940
lines and I think we twist up it could

00:42:50,080 --> 00:43:00,880
be much more or not yeah yeah okay okay

00:42:56,940 --> 00:43:08,980
so thanks everyone and so does PK many

00:43:00,880 --> 00:43:11,350
things as a reminder if you want to

00:43:08,980 --> 00:43:15,250
access the video you can access the

00:43:11,350 --> 00:43:17,530
files dot EP internal address like

00:43:15,250 --> 00:43:20,440
eating like your Python and if you want

00:43:17,530 --> 00:43:22,869
to had a chance to have a new phone

00:43:20,440 --> 00:43:25,440
there is a coding competition sponsored

00:43:22,869 --> 00:43:30,180
by Google and there is a samsung galaxy

00:43:25,440 --> 00:43:30,180

YouTube URL: https://www.youtube.com/watch?v=I_HqPjl6quo


