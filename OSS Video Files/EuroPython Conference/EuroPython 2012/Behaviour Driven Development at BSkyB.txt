Title: Behaviour Driven Development at BSkyB
Publication date: 2015-04-19
Playlist: EuroPython 2012
Description: 
	[EuroPython 2012] Russell Sherwood- David Sale - 5 JULY 2012 in "Track Lasagne"
Captions: 
	00:02:07,430 --> 00:02:14,900
good morning to everyone welcome to room

00:02:10,820 --> 00:02:18,080
lasagna please welcome our guests which

00:02:14,900 --> 00:02:20,630
are going to present behavior driven

00:02:18,080 --> 00:02:29,150
development please welcome David cell

00:02:20,630 --> 00:02:31,640
and Russell Sherwood okay thank you very

00:02:29,150 --> 00:02:33,380
much thanks for coming out today and so

00:02:31,640 --> 00:02:35,590
I'm going to be showing you how we do

00:02:33,380 --> 00:02:38,450
behavior driven development at bskyb and

00:02:35,590 --> 00:02:39,980
and yeah the main message from today

00:02:38,450 --> 00:02:42,440
it's all about this collaboratively

00:02:39,980 --> 00:02:43,940
coding correctly and at the same my

00:02:42,440 --> 00:02:45,470
name's David sale and I've also

00:02:43,940 --> 00:02:47,510
collaborated with my colleague Russell

00:02:45,470 --> 00:02:49,190
shared on this and he'll be joining me a

00:02:47,510 --> 00:02:53,330
little later for the demonstration that

00:02:49,190 --> 00:02:54,880
we're going to do and so just looking at

00:02:53,330 --> 00:02:57,470
what we're going to go through today and

00:02:54,880 --> 00:03:00,470
I'm going to be introducing my company

00:02:57,470 --> 00:03:01,970
that's british sky broadcasting and why

00:03:00,470 --> 00:03:04,640
our project so critical to the business

00:03:01,970 --> 00:03:07,430
and why we have this sort of real focus

00:03:04,640 --> 00:03:08,900
on our testing and and then i'm also

00:03:07,430 --> 00:03:11,350
going to be looking at how testings

00:03:08,900 --> 00:03:13,700
evolved over last couple years and

00:03:11,350 --> 00:03:16,640
looking at what we've achieved with our

00:03:13,700 --> 00:03:18,680
processes using agile and behavior

00:03:16,640 --> 00:03:21,610
driven development and also like the

00:03:18,680 --> 00:03:24,739
daily life cycle that that we go through

00:03:21,610 --> 00:03:27,230
basis and then it's all about how you

00:03:24,739 --> 00:03:29,209
can do this as well and so it's the

00:03:27,230 --> 00:03:30,950
writing of acceptance tests and the

00:03:29,209 --> 00:03:34,570
frameworks you can use and you'll see

00:03:30,950 --> 00:03:37,730
how it all fits together in the demo and

00:03:34,570 --> 00:03:41,480
so who are we what we do and what's in

00:03:37,730 --> 00:03:44,360
it for you as well because I say I'm a

00:03:41,480 --> 00:03:46,580
software developer at bskyb and british

00:03:44,360 --> 00:03:49,010
sky broadcasting were based in in london

00:03:46,580 --> 00:03:51,829
and yeah with the largest media company

00:03:49,010 --> 00:03:56,600
in the UK we've got over 10 million

00:03:51,829 --> 00:03:58,870
customers and sky provides TV packages

00:03:56,600 --> 00:04:01,130
phone and broadband as well and

00:03:58,870 --> 00:04:04,910
alongside saw our new adventures into

00:04:01,130 --> 00:04:09,260
like mobile apps and IPTV with like Xbox

00:04:04,910 --> 00:04:10,850
integration as well and and obviously

00:04:09,260 --> 00:04:13,010
this all comes with its own business

00:04:10,850 --> 00:04:15,440
challenges that we face on a daily basis

00:04:13,010 --> 00:04:17,299
so skies in an extremely fierce

00:04:15,440 --> 00:04:20,150
marketplace and we have lots of

00:04:17,299 --> 00:04:21,299
competition in the TV market and and we

00:04:20,150 --> 00:04:24,139
need to react to those

00:04:21,299 --> 00:04:27,150
those challenges in a nutshell way and

00:04:24,139 --> 00:04:29,310
save competitor lowers their price in or

00:04:27,150 --> 00:04:31,440
goes out with an offer in a certain area

00:04:29,310 --> 00:04:33,840
we need to respond to that as quickly as

00:04:31,440 --> 00:04:36,030
possible and we also need to be

00:04:33,840 --> 00:04:37,830
effective and for us that means we

00:04:36,030 --> 00:04:40,710
simply can't afford any defects in

00:04:37,830 --> 00:04:42,750
production and so our process and

00:04:40,710 --> 00:04:47,060
testing methods mean that we meet these

00:04:42,750 --> 00:04:49,530
challenges and exceed them as well and

00:04:47,060 --> 00:04:51,870
so just a bit of background on the

00:04:49,530 --> 00:04:54,569
application that were the word producing

00:04:51,870 --> 00:04:56,099
it's it's basically replacing a legacy

00:04:54,569 --> 00:04:58,050
sales application in the business and

00:04:56,099 --> 00:05:00,960
we're completely right in that from

00:04:58,050 --> 00:05:03,479
scratch introducing a proprietary sales

00:05:00,960 --> 00:05:06,180
experience it's currently going down

00:05:03,479 --> 00:05:07,860
really well it's it's been used for for

00:05:06,180 --> 00:05:10,650
all the the prospect sales into the

00:05:07,860 --> 00:05:14,069
business that's new customers and and

00:05:10,650 --> 00:05:16,219
yeah we're based on Python 2.7 basically

00:05:14,069 --> 00:05:20,610
right in a REST API to be used by the

00:05:16,219 --> 00:05:21,810
the wider application and and I'm based

00:05:20,610 --> 00:05:24,389
in the products enough and management

00:05:21,810 --> 00:05:27,240
team so that's basically we're modeling

00:05:24,389 --> 00:05:29,699
the every product that sky cells the

00:05:27,240 --> 00:05:32,969
offers that are around those products

00:05:29,699 --> 00:05:34,770
and the as I say we're providing that

00:05:32,969 --> 00:05:37,500
rest service to be used by the the rest

00:05:34,770 --> 00:05:40,080
of the application and why are we so

00:05:37,500 --> 00:05:42,330
interested in testing and and it's

00:05:40,080 --> 00:05:44,669
basically these defects we can't afford

00:05:42,330 --> 00:05:46,500
that when we're trying to sell sky if

00:05:44,669 --> 00:05:49,110
something goes down it's obviously going

00:05:46,500 --> 00:05:53,039
to cost the business like a lot of money

00:05:49,110 --> 00:05:56,490
and and also if we price things

00:05:53,039 --> 00:05:59,400
incorrectly or you know sell things

00:05:56,490 --> 00:06:01,080
wrongly we're going to hit legal issues

00:05:59,400 --> 00:06:07,469
as well which we we obviously want to

00:06:01,080 --> 00:06:10,259
avoid em so why do behavior driven

00:06:07,469 --> 00:06:12,779
development and it means we do it right

00:06:10,259 --> 00:06:14,819
the first time every time and we have

00:06:12,779 --> 00:06:17,069
real clarity across our team and

00:06:14,819 --> 00:06:18,719
everything we do and we're not going

00:06:17,069 --> 00:06:20,580
back having to change behavior later

00:06:18,719 --> 00:06:23,699
because we didn't fully understand that

00:06:20,580 --> 00:06:25,620
problem in the first place and because

00:06:23,699 --> 00:06:27,449
the business testers and encoders are

00:06:25,620 --> 00:06:30,810
combined in our process we deliver

00:06:27,449 --> 00:06:32,219
exactly what was asked for and also the

00:06:30,810 --> 00:06:33,700
way in which you write our test means

00:06:32,219 --> 00:06:36,130
that developers

00:06:33,700 --> 00:06:37,770
testers and even business analyst it can

00:06:36,130 --> 00:06:40,780
get involved in right in our testing and

00:06:37,770 --> 00:06:43,120
and the economy of scale on this testing

00:06:40,780 --> 00:06:45,700
is huge as well so once you've written a

00:06:43,120 --> 00:06:47,920
few steps which I'll introduce later and

00:06:45,700 --> 00:06:49,720
you can use lemon of the tests as well

00:06:47,920 --> 00:06:53,680
and you've got ready-made code to be

00:06:49,720 --> 00:06:55,300
used finally refactoring which is

00:06:53,680 --> 00:06:58,180
normally a pain in the life of a

00:06:55,300 --> 00:07:00,030
developer with our complete test suite

00:06:58,180 --> 00:07:01,870
we could make changes confidently and

00:07:00,030 --> 00:07:03,640
knowing that we've not broken any

00:07:01,870 --> 00:07:05,770
previous behavior that we've got in our

00:07:03,640 --> 00:07:09,910
system so there's masses of incentives

00:07:05,770 --> 00:07:11,770
for work it in this way and so just

00:07:09,910 --> 00:07:15,700
looking at we're testing sort of evolved

00:07:11,770 --> 00:07:17,110
from and it used to be that and testing

00:07:15,700 --> 00:07:19,330
was just another job of the developer

00:07:17,110 --> 00:07:21,820
and they needed to just know what to

00:07:19,330 --> 00:07:23,710
test work out what could possibly go

00:07:21,820 --> 00:07:25,780
wrong and there wasn't any real

00:07:23,710 --> 00:07:28,180
confidence in the code just you know

00:07:25,780 --> 00:07:32,260
bits of unit tests and manual testing

00:07:28,180 --> 00:07:34,570
but we've we've moved on from that we

00:07:32,260 --> 00:07:36,960
started to see the introduction of

00:07:34,570 --> 00:07:41,040
dedicated Quality Assurance teams and

00:07:36,960 --> 00:07:43,090
they would write manual test scripts but

00:07:41,040 --> 00:07:44,620
it was covering the code a bit better

00:07:43,090 --> 00:07:48,790
but you got sort of poor communication

00:07:44,620 --> 00:07:50,140
between developers and testers and we

00:07:48,790 --> 00:07:51,730
didn't really have automated testing at

00:07:50,140 --> 00:07:54,640
that point and people weren't really

00:07:51,730 --> 00:07:56,980
sure how we would go about it and then

00:07:54,640 --> 00:07:58,570
we moved on and saw the introduction of

00:07:56,980 --> 00:08:01,660
agile for the business and this has been

00:07:58,570 --> 00:08:03,430
hugely successful for sky and most of

00:08:01,660 --> 00:08:05,740
the teams in technology have been put

00:08:03,430 --> 00:08:08,650
onto it now and and it just brings us

00:08:05,740 --> 00:08:10,830
better organized work like real focus on

00:08:08,650 --> 00:08:13,960
the test in to get the quality up and

00:08:10,830 --> 00:08:15,790
unit testing mocking and also bringing

00:08:13,960 --> 00:08:19,930
in things like continuous integration as

00:08:15,790 --> 00:08:23,050
well then we get to where we are now and

00:08:19,930 --> 00:08:24,460
and that's test-driven development and

00:08:23,050 --> 00:08:28,150
behavior driven development followed

00:08:24,460 --> 00:08:30,760
religiously and everyone involved with

00:08:28,150 --> 00:08:32,080
the sort of business analyst the quality

00:08:30,760 --> 00:08:34,720
assurance and developers they're all

00:08:32,080 --> 00:08:38,220
part of this process and as you'll see

00:08:34,720 --> 00:08:38,220
the results have been fairly impressive

00:08:38,340 --> 00:08:44,410
so just to introduce a few sort of other

00:08:41,380 --> 00:08:45,810
methods that are right there and in a

00:08:44,410 --> 00:08:47,730
similar vein at

00:08:45,810 --> 00:08:50,430
fitness which is like a java application

00:08:47,730 --> 00:08:53,700
and that runs in its own set of web

00:08:50,430 --> 00:08:56,279
server and have sort of like a wiki

00:08:53,700 --> 00:08:58,020
style for an end to the test and and

00:08:56,279 --> 00:09:00,090
then runs code underneath so it's a

00:08:58,020 --> 00:09:02,339
similar style to what we're doing but

00:09:00,090 --> 00:09:04,230
it's not quite as nice as the BDD tests

00:09:02,339 --> 00:09:07,529
i'm going to show and yeah hopefully

00:09:04,230 --> 00:09:09,060
you'll see this is possibly Beth and and

00:09:07,529 --> 00:09:11,610
then the selenium as well which is a

00:09:09,060 --> 00:09:15,330
great tool for user interaction testing

00:09:11,610 --> 00:09:17,820
and it comes with an IDE which you know

00:09:15,330 --> 00:09:20,279
is ok but it's more for writing tests

00:09:17,820 --> 00:09:22,920
after the fact by after your application

00:09:20,279 --> 00:09:24,570
and it's not great for sort of behavior

00:09:22,920 --> 00:09:27,750
driven development and that test driven

00:09:24,570 --> 00:09:30,420
development so good news is that you can

00:09:27,750 --> 00:09:32,100
integrate selenium with rbd detest so if

00:09:30,420 --> 00:09:34,980
you want to do that UI testing and

00:09:32,100 --> 00:09:37,830
you've got that as well and then there's

00:09:34,980 --> 00:09:39,750
knows we actually use knows as our test

00:09:37,830 --> 00:09:42,390
runner for the unit tests and we also

00:09:39,750 --> 00:09:47,279
extend that and to handle the BDD test

00:09:42,390 --> 00:09:50,160
which you'll see in the demo though what

00:09:47,279 --> 00:09:53,520
we achieve with these processes and so

00:09:50,160 --> 00:09:56,580
as I say we we work in an agile way and

00:09:53,520 --> 00:09:59,280
we have sprint switched two weeks in

00:09:56,580 --> 00:10:00,960
then and and when we come to the end of

00:09:59,280 --> 00:10:03,630
that sprint within showcase what we've

00:10:00,960 --> 00:10:06,060
done to the business and we also have

00:10:03,630 --> 00:10:08,010
planning games where we estimate the

00:10:06,060 --> 00:10:11,670
stories like the individual units of

00:10:08,010 --> 00:10:13,290
work and that go into a sprint and and

00:10:11,670 --> 00:10:14,940
we also have retrospectives as well

00:10:13,290 --> 00:10:17,520
where we're constantly reviewing how we

00:10:14,940 --> 00:10:20,370
work and and can we improve or what we

00:10:17,520 --> 00:10:22,350
should continue doing and finally the

00:10:20,370 --> 00:10:24,060
last two points on our gel which are the

00:10:22,350 --> 00:10:28,080
most important for me is that we can

00:10:24,060 --> 00:10:29,880
fail fast and also adapt quickly so as a

00:10:28,080 --> 00:10:31,740
safe disguise have put a fast paced

00:10:29,880 --> 00:10:34,050
moving company and the changes come in

00:10:31,740 --> 00:10:37,320
thick and fast so we need to be able to

00:10:34,050 --> 00:10:43,950
adapt to those and agile allows us to do

00:10:37,320 --> 00:10:46,920
that so it means we get away from this

00:10:43,950 --> 00:10:48,029
style like this also I'll process and

00:10:46,920 --> 00:10:50,640
you don't need to be able to read the

00:10:48,029 --> 00:10:53,130
individual lines what I'm basically

00:10:50,640 --> 00:10:55,530
showing here is this is HP quality

00:10:53,130 --> 00:10:57,740
center and you can see there's many many

00:10:55,530 --> 00:10:59,570
bugs in the system so it's a

00:10:57,740 --> 00:11:02,720
tracker for whatever application you

00:10:59,570 --> 00:11:04,550
drop and and yet on the left hand side

00:11:02,720 --> 00:11:08,240
each of these bugs has been given a

00:11:04,550 --> 00:11:09,920
severity from 144 and severity one might

00:11:08,240 --> 00:11:11,900
get dealt with you know straight away

00:11:09,920 --> 00:11:15,530
but how long have the threes and fours

00:11:11,900 --> 00:11:16,760
been hanging around who knows and and we

00:11:15,530 --> 00:11:21,200
we like to do things a little

00:11:16,760 --> 00:11:24,110
differently though because we work in

00:11:21,200 --> 00:11:27,020
two weekly sprint it means that we have

00:11:24,110 --> 00:11:29,120
this so this is our agile board we have

00:11:27,020 --> 00:11:30,920
the individual pieces of work here these

00:11:29,120 --> 00:11:33,770
are all in progress and the two

00:11:30,920 --> 00:11:35,120
highlighted things are only two defects

00:11:33,770 --> 00:11:38,420
that are in the sprint at the moment and

00:11:35,120 --> 00:11:41,270
this is typical of our of aspirin so

00:11:38,420 --> 00:11:42,950
this one will be tested it will have the

00:11:41,270 --> 00:11:44,420
code written for it and the main thing

00:11:42,950 --> 00:11:45,620
here is that these have never seen

00:11:44,420 --> 00:11:48,770
productions they've never been out to

00:11:45,620 --> 00:11:50,660
the customer and and this one has been

00:11:48,770 --> 00:11:56,240
through that process and that's it

00:11:50,660 --> 00:11:58,370
wouldn't and so what exactly is behavior

00:11:56,240 --> 00:12:00,550
driven development and it's essentially

00:11:58,370 --> 00:12:03,740
a subset of test-driven development and

00:12:00,550 --> 00:12:06,380
so it's always right in our acceptance

00:12:03,740 --> 00:12:08,420
tests up front and and we write only

00:12:06,380 --> 00:12:09,710
what was required and we know exactly

00:12:08,420 --> 00:12:11,900
when we're done and once you've

00:12:09,710 --> 00:12:14,600
completed those once you've wrote the

00:12:11,900 --> 00:12:16,580
codes past those that and it means we

00:12:14,600 --> 00:12:19,610
have this real focus on the problem so

00:12:16,580 --> 00:12:21,710
and as I say we'll bring in all the team

00:12:19,610 --> 00:12:23,240
together the discussing that problem you

00:12:21,710 --> 00:12:26,630
get that collaboration across the theme

00:12:23,240 --> 00:12:29,030
and everyone's on the same page also

00:12:26,630 --> 00:12:30,770
because I test suite we can run it in a

00:12:29,030 --> 00:12:32,270
matter of minutes on our local machines

00:12:30,770 --> 00:12:34,100
it means we're getting that quick

00:12:32,270 --> 00:12:35,780
feedback cycle when we're developing and

00:12:34,100 --> 00:12:37,640
we know we're not breaking anything and

00:12:35,780 --> 00:12:40,250
we've got real confidence in that code

00:12:37,640 --> 00:12:44,810
and as you'll see these tests are really

00:12:40,250 --> 00:12:46,970
simple to write and start using so just

00:12:44,810 --> 00:12:49,850
to introduce the Gherkin sins acts which

00:12:46,970 --> 00:12:53,120
is a lot less use on the on the front

00:12:49,850 --> 00:12:55,760
end and it's not something to be daunted

00:12:53,120 --> 00:12:58,250
by it's really simple it's only 88 key

00:12:55,760 --> 00:13:03,050
words and and start with the most

00:12:58,250 --> 00:13:07,280
important ones are given when then and

00:13:03,050 --> 00:13:10,050
also and and this basically defines the

00:13:07,280 --> 00:13:13,050
sort of simple structure of your

00:13:10,050 --> 00:13:16,170
so you say I given I've I have gone on

00:13:13,050 --> 00:13:18,240
some web page and when I click on

00:13:16,170 --> 00:13:20,580
something then I should see some results

00:13:18,240 --> 00:13:24,180
or and you can see how that can apply to

00:13:20,580 --> 00:13:26,100
sort of any application and you've also

00:13:24,180 --> 00:13:29,040
got and as well and that's just for sort

00:13:26,100 --> 00:13:32,100
of keeping the English language going

00:13:29,040 --> 00:13:33,810
like nicely in that theft so you can say

00:13:32,100 --> 00:13:35,269
like then I should see some result and

00:13:33,810 --> 00:13:37,890
another result and it just basically

00:13:35,269 --> 00:13:41,070
reproduces the then keyword and you can

00:13:37,890 --> 00:13:45,029
use that on the mall and then also we

00:13:41,070 --> 00:13:48,300
have feature background scenario and

00:13:45,029 --> 00:13:49,920
also scenario outline and these define

00:13:48,300 --> 00:13:51,959
the structure of the entire file so

00:13:49,920 --> 00:13:53,250
whereas the previous runs were for the

00:13:51,959 --> 00:13:56,190
individual tests this is the whole

00:13:53,250 --> 00:13:58,260
feature file itself and so with feature

00:13:56,190 --> 00:14:00,060
that's just describing what what the

00:13:58,260 --> 00:14:03,899
aspects of the application is going to

00:14:00,060 --> 00:14:05,730
cover and background is like setup tasks

00:14:03,899 --> 00:14:08,339
like things he needs to have before each

00:14:05,730 --> 00:14:11,160
test and they'll be executed before each

00:14:08,339 --> 00:14:12,870
scenario and then you have scenario and

00:14:11,160 --> 00:14:14,550
scenario outline as well which is where

00:14:12,870 --> 00:14:16,140
your defining that theft and I'll

00:14:14,550 --> 00:14:21,839
explain me the slight difference for

00:14:16,140 --> 00:14:24,600
those in the demo and so it means we get

00:14:21,839 --> 00:14:27,000
away from this sort of situation as well

00:14:24,600 --> 00:14:29,940
so and between our developers and

00:14:27,000 --> 00:14:31,770
testers you know it's not a battle we

00:14:29,940 --> 00:14:34,079
don't want them just passing code over

00:14:31,770 --> 00:14:36,060
the wall between each other and we've

00:14:34,079 --> 00:14:38,700
seen that it's much more beneficial to

00:14:36,060 --> 00:14:40,079
bring these two people together and they

00:14:38,700 --> 00:14:43,500
think about the problems in different

00:14:40,079 --> 00:14:45,620
ways different angles and yeah it means

00:14:43,500 --> 00:14:47,910
that we got that real collaboration and

00:14:45,620 --> 00:14:49,709
as I say we can bring in our business

00:14:47,910 --> 00:14:51,329
analyst as well because it's written in

00:14:49,709 --> 00:14:55,949
plain English they can get involved on

00:14:51,329 --> 00:14:58,290
on part of that as well and so just

00:14:55,949 --> 00:15:01,470
looking at the the process that we go

00:14:58,290 --> 00:15:04,680
through on a daily basis and so we

00:15:01,470 --> 00:15:05,760
basically get a story card which comes

00:15:04,680 --> 00:15:08,970
from our planning game that's the

00:15:05,760 --> 00:15:11,010
individual piece of work and and when

00:15:08,970 --> 00:15:12,810
the developers ready it'll go pick up

00:15:11,010 --> 00:15:16,709
that story cards and then we go into

00:15:12,810 --> 00:15:18,360
what we call the the d4 space so this is

00:15:16,709 --> 00:15:20,370
basically where we're getting everyone

00:15:18,360 --> 00:15:22,279
on the same page it's we just sit down

00:15:20,370 --> 00:15:24,170
for like 15 20 minutes

00:15:22,279 --> 00:15:28,160
the business analyst will explain

00:15:24,170 --> 00:15:31,249
exactly what this problem is what the

00:15:28,160 --> 00:15:33,589
business requires and and that's where

00:15:31,249 --> 00:15:37,370
everyone can solve share their ideas and

00:15:33,589 --> 00:15:40,490
opinions on it and then once we were

00:15:37,370 --> 00:15:41,990
everyone's happy we move on to actually

00:15:40,490 --> 00:15:45,529
write in the behavior driven development

00:15:41,990 --> 00:15:48,889
test and and that can be done by the QA

00:15:45,529 --> 00:15:50,389
and the developer themselves and as a

00:15:48,889 --> 00:15:53,569
save in the business analyst cab right

00:15:50,389 --> 00:15:55,480
parts of it as well and and once those

00:15:53,569 --> 00:15:58,249
are written we can then move on to

00:15:55,480 --> 00:15:59,870
actually writing the code and obviously

00:15:58,249 --> 00:16:03,889
we will will write our unit tests up

00:15:59,870 --> 00:16:05,629
front ont DD and and then once the

00:16:03,889 --> 00:16:08,120
developers happy that they've got the

00:16:05,629 --> 00:16:11,149
test pass in and will then go and have a

00:16:08,120 --> 00:16:13,220
review again with with the QA and we may

00:16:11,149 --> 00:16:14,689
get an inner loop if if they feel

00:16:13,220 --> 00:16:17,569
something's wrong and we'll we'll go

00:16:14,689 --> 00:16:19,309
about range write some more tests until

00:16:17,569 --> 00:16:21,680
everyone's completely satisfied that

00:16:19,309 --> 00:16:27,160
we've we've completed that story and we

00:16:21,680 --> 00:16:31,430
can move on and pick up another car and

00:16:27,160 --> 00:16:34,519
so we use continuous integration and as

00:16:31,430 --> 00:16:37,220
I mentioned before and for that we use

00:16:34,519 --> 00:16:39,769
Hudson which is pretty much standard

00:16:37,220 --> 00:16:42,350
across sky most most things useful turn

00:16:39,769 --> 00:16:44,180
our Jenkins and and a few are also using

00:16:42,350 --> 00:16:48,139
theme city as well which is a good

00:16:44,180 --> 00:16:50,269
jetbrains product and a non hudson and

00:16:48,139 --> 00:16:52,490
it's basically one in our entire test

00:16:50,269 --> 00:16:54,769
suite it's running the unit tests the

00:16:52,490 --> 00:16:57,350
BDD theft it's also starting and

00:16:54,769 --> 00:17:00,670
stopping our server and running smoke

00:16:57,350 --> 00:17:02,689
tests as well and so not only is our

00:17:00,670 --> 00:17:05,419
application being checked for the the

00:17:02,689 --> 00:17:08,899
granular level it's also being checked

00:17:05,419 --> 00:17:10,970
like completely end-to-end and what this

00:17:08,899 --> 00:17:12,829
means is we've got real confidence when

00:17:10,970 --> 00:17:17,899
we need to go live to production which

00:17:12,829 --> 00:17:19,699
we can do any point and also we have the

00:17:17,899 --> 00:17:22,399
whole team aware of the builds data so

00:17:19,699 --> 00:17:25,699
everyone knows what's going on and and

00:17:22,399 --> 00:17:28,730
finally it also produces our build

00:17:25,699 --> 00:17:31,460
artifacts so we're ready to go to the

00:17:28,730 --> 00:17:33,980
deployment using JIRA management system

00:17:31,460 --> 00:17:35,750
and that's just the 11 button process

00:17:33,980 --> 00:17:40,880
and we can deploy to production

00:17:35,750 --> 00:17:43,670
it's pretty cool processes for us so how

00:17:40,880 --> 00:17:45,740
do you actually write these tests so

00:17:43,670 --> 00:17:48,380
I've mentioned this the sort of English

00:17:45,740 --> 00:17:52,310
feature file a few times and as you can

00:17:48,380 --> 00:17:54,350
see this is fairly straightforward it's

00:17:52,310 --> 00:17:56,570
just written in plain English it tells

00:17:54,350 --> 00:17:58,580
you exactly what this test is doing its

00:17:56,570 --> 00:18:01,550
really precise and you can see those

00:17:58,580 --> 00:18:04,160
those clearly defined blocks we have our

00:18:01,550 --> 00:18:06,860
feature which is just documentation for

00:18:04,160 --> 00:18:10,370
the test explaining what it's going to

00:18:06,860 --> 00:18:11,930
cover and and that's there's the the

00:18:10,370 --> 00:18:14,420
background block which is where we're

00:18:11,930 --> 00:18:17,510
doing our setup and then we drop into

00:18:14,420 --> 00:18:19,970
the actual test itself so here we're

00:18:17,510 --> 00:18:21,530
doing the check in the pricing is

00:18:19,970 --> 00:18:23,720
returned for products that's just the

00:18:21,530 --> 00:18:25,580
doc string for that test explaining what

00:18:23,720 --> 00:18:29,150
it's going to do and then we have that

00:18:25,580 --> 00:18:32,600
that gherkin syntax to actually do the

00:18:29,150 --> 00:18:34,220
test there and and you know the main

00:18:32,600 --> 00:18:35,720
advantage here is you clearly see in

00:18:34,220 --> 00:18:37,850
what this test is doing in a matter of

00:18:35,720 --> 00:18:39,440
seconds rather than having to trawl

00:18:37,850 --> 00:18:43,550
through codes to see what's going on and

00:18:39,440 --> 00:18:46,310
so that's big advantage there but the

00:18:43,550 --> 00:18:47,390
key points from that is that it's

00:18:46,310 --> 00:18:50,750
understood by all the stakeholders

00:18:47,390 --> 00:18:54,880
everyone everyone can read that and it's

00:18:50,750 --> 00:18:57,530
simple plain English or possibly even

00:18:54,880 --> 00:18:59,090
you know you need a native language of

00:18:57,530 --> 00:19:02,960
choice you can you can write these in

00:18:59,090 --> 00:19:04,730
Italian or German and we're also really

00:19:02,960 --> 00:19:08,470
precise and like logical so they

00:19:04,730 --> 00:19:08,470
describe it exactly what what's going on

00:19:08,890 --> 00:19:13,340
obviously the feature files not enough

00:19:11,720 --> 00:19:15,530
right it's not going to do anything on

00:19:13,340 --> 00:19:17,510
its own so we have the steps file

00:19:15,530 --> 00:19:20,990
underneath and that's where the sort of

00:19:17,510 --> 00:19:22,700
real magic happens and so each line in

00:19:20,990 --> 00:19:26,570
that feature file is picked up by a

00:19:22,700 --> 00:19:28,130
regular expression and and then it

00:19:26,570 --> 00:19:30,950
executes spite and methods underneath

00:19:28,130 --> 00:19:33,380
that and it's a really simple format and

00:19:30,950 --> 00:19:37,880
allows us to use just simple Python that

00:19:33,380 --> 00:19:41,150
we're all pretty happy with so here's

00:19:37,880 --> 00:19:43,850
the example of a steps file and you can

00:19:41,150 --> 00:19:45,980
see that it's just much in the gherkin

00:19:43,850 --> 00:19:48,620
syntax with the the decorator at the

00:19:45,980 --> 00:19:50,630
start and then you just match with

00:19:48,620 --> 00:19:52,250
a simple regular expression on the

00:19:50,630 --> 00:19:55,730
entire string so it's nothing too

00:19:52,250 --> 00:19:58,550
complicated and we can also do nice

00:19:55,730 --> 00:20:00,290
things like fussing in variables so

00:19:58,550 --> 00:20:02,510
that's how we get that real economy of

00:20:00,290 --> 00:20:05,510
scale you can reuse that step for the

00:20:02,510 --> 00:20:07,400
many different and the other thing to

00:20:05,510 --> 00:20:09,260
note here is the the tables that you can

00:20:07,400 --> 00:20:13,960
pass in so you can solve it's right over

00:20:09,260 --> 00:20:13,960
large data and keep things nice and tidy

00:20:14,380 --> 00:20:18,980
so yeah it's regular expressions that

00:20:17,450 --> 00:20:21,650
pick up each line in the feature file

00:20:18,980 --> 00:20:24,530
and we can do that row iteration and

00:20:21,650 --> 00:20:26,780
simple things like that and just because

00:20:24,530 --> 00:20:29,179
it's just a normal Python file so you

00:20:26,780 --> 00:20:32,120
can write help of methods and functions

00:20:29,179 --> 00:20:33,950
within that and keeping your steps like

00:20:32,120 --> 00:20:37,820
clean and tidy and you know exactly what

00:20:33,950 --> 00:20:40,340
they're doing and so this will look at

00:20:37,820 --> 00:20:43,340
the sort of frameworks and tools that

00:20:40,340 --> 00:20:45,500
are right there so the most well-known

00:20:43,340 --> 00:20:50,030
for it the wider software community is

00:20:45,500 --> 00:20:52,790
cucumber and it's it's really good it

00:20:50,030 --> 00:20:55,670
defined the gherkins in fact that they

00:20:52,790 --> 00:20:57,980
all use and and the only problem for us

00:20:55,670 --> 00:20:59,480
is that it's written in Ruby we'd like

00:20:57,980 --> 00:21:02,630
to keep everything in Python if we come

00:20:59,480 --> 00:21:05,900
and so we have a few options available

00:21:02,630 --> 00:21:09,320
to us in Piper and we have lettuce fresh

00:21:05,900 --> 00:21:12,380
in and also behave and let this is a

00:21:09,320 --> 00:21:14,740
almost a direct port of cucumber into

00:21:12,380 --> 00:21:17,390
Python uses very similar since that and

00:21:14,740 --> 00:21:19,100
and it also comes with its own

00:21:17,390 --> 00:21:23,059
standalone test runner as well so you're

00:21:19,100 --> 00:21:24,890
not tied for any existing one and and

00:21:23,059 --> 00:21:26,929
then we have freshen which is what we

00:21:24,890 --> 00:21:31,010
use within our team and that's actually

00:21:26,929 --> 00:21:32,630
a plug into the nose test runner and so

00:21:31,010 --> 00:21:34,309
you are actually tied to using no stress

00:21:32,630 --> 00:21:37,880
which may be an issue for some people

00:21:34,309 --> 00:21:40,490
and yay again it's based on that

00:21:37,880 --> 00:21:42,350
cucumber syntax and and then there's

00:21:40,490 --> 00:21:45,290
behaved which seems to be gathering a

00:21:42,350 --> 00:21:47,450
bit of momentum in Python community and

00:21:45,290 --> 00:21:50,780
that's essentially a almost identical

00:21:47,450 --> 00:21:54,920
port of cucumber and and it's yeah it's

00:21:50,780 --> 00:21:56,540
very simple to pick up and the key thing

00:21:54,920 --> 00:21:58,880
here is that they're all pretty much and

00:21:56,540 --> 00:22:00,290
pretty much the same so once you've

00:21:58,880 --> 00:22:03,320
mastered one you can

00:22:00,290 --> 00:22:05,780
the others and perhaps we need to decide

00:22:03,320 --> 00:22:07,850
on a standard for Python like cucumber

00:22:05,780 --> 00:22:12,020
is for Ruby but that's the discussion

00:22:07,850 --> 00:22:14,330
for another time though yeah as I say we

00:22:12,020 --> 00:22:16,940
use fashion in our team and we also use

00:22:14,330 --> 00:22:19,640
virtual ms just keep each project nice

00:22:16,940 --> 00:22:22,610
and tidy keeping the dependencies within

00:22:19,640 --> 00:22:25,490
each project and it's just a simple pip

00:22:22,610 --> 00:22:27,530
install command refreshing and and then

00:22:25,490 --> 00:22:30,080
to run it you just run the nose test

00:22:27,530 --> 00:22:33,080
runner put passing the fresh and plug in

00:22:30,080 --> 00:22:34,910
and point it at your feature files or

00:22:33,080 --> 00:22:40,040
directory of each files if you want to

00:22:34,910 --> 00:22:42,770
run and so now I'd like to bring on

00:22:40,040 --> 00:22:45,520
Russell Sherwood and will attempt to

00:22:42,770 --> 00:22:45,520
give you a demo of this

00:22:57,799 --> 00:23:06,799
and to despair with of the second while

00:22:59,720 --> 00:23:07,669
we just swap the display over and so

00:23:06,799 --> 00:23:10,820
what we're going to do here is just

00:23:07,669 --> 00:23:12,950
start with a blank feature file but

00:23:10,820 --> 00:23:14,509
we've then we've got our steps file on

00:23:12,950 --> 00:23:16,009
the right and we've actually just pre

00:23:14,509 --> 00:23:17,830
written a few of the steps just to speed

00:23:16,009 --> 00:23:20,749
things up a bit do not got much time and

00:23:17,830 --> 00:23:24,100
so it's that way we just start right in

00:23:20,749 --> 00:23:26,419
the future file and just point up just

00:23:24,100 --> 00:23:31,249
part of the step definition is that

00:23:26,419 --> 00:23:36,859
we're using give it the file name of the

00:23:31,249 --> 00:23:38,480
steps there and moving on from that we

00:23:36,859 --> 00:23:40,129
just do our feature block which is just

00:23:38,480 --> 00:23:46,399
describing what this file is going to

00:23:40,129 --> 00:23:48,739
cover here a Python example and it just

00:23:46,399 --> 00:23:52,159
follows this this simple format but as a

00:23:48,739 --> 00:23:55,249
presenter I wish to show the ability to

00:23:52,159 --> 00:24:01,659
be needy testing to all the conference

00:23:55,249 --> 00:24:04,489
attendees and we can move into our

00:24:01,659 --> 00:24:07,879
background block where we do this or set

00:24:04,489 --> 00:24:12,039
up and for our example we're just going

00:24:07,879 --> 00:24:12,039
to do given I've welcome the audience

00:24:12,669 --> 00:24:17,600
see we've got the step for that on the

00:24:14,840 --> 00:24:19,399
right-hand side and yet it just matches

00:24:17,600 --> 00:24:21,139
on that string then drops into our

00:24:19,399 --> 00:24:24,919
Python methods and just just prints

00:24:21,139 --> 00:24:28,580
hello you look like them then we can

00:24:24,919 --> 00:24:30,859
write our actual scenario now so again

00:24:28,580 --> 00:24:33,590
that that first line is just explaining

00:24:30,859 --> 00:24:35,929
what the scenarios doing just going to

00:24:33,590 --> 00:24:38,859
replicate a simple sort of shopping cart

00:24:35,929 --> 00:24:43,519
being something we we do it within sky

00:24:38,859 --> 00:24:45,559
and and then we jump into that gherkin

00:24:43,519 --> 00:24:49,639
syntax and it's given I have chosen the

00:24:45,559 --> 00:24:52,100
following products and we're just going

00:24:49,639 --> 00:24:55,879
to use that table to list the different

00:24:52,100 --> 00:24:58,700
products now dot products and pricing

00:24:55,879 --> 00:25:03,710
and we're going to go with the monster

00:24:58,700 --> 00:25:06,999
Python themes oh but the dead dead

00:25:03,710 --> 00:25:06,999
parrot at 50 and

00:25:07,700 --> 00:25:15,370
20 and also african swallow up from

00:25:15,820 --> 00:25:22,490
that's it then and again you can see

00:25:21,019 --> 00:25:26,090
we've already written the step for that

00:25:22,490 --> 00:25:27,769
so and it just drops in and the interest

00:25:26,090 --> 00:25:30,409
interesting thing to note here is this

00:25:27,769 --> 00:25:32,510
SCC so this is the scenario context

00:25:30,409 --> 00:25:35,389
container and what that basically allows

00:25:32,510 --> 00:25:37,100
us to do is make this variable available

00:25:35,389 --> 00:25:38,419
to all the the rest of the steps so

00:25:37,100 --> 00:25:40,639
we're going to need access to that table

00:25:38,419 --> 00:25:47,389
waiter on so that's why we use an SCC

00:25:40,639 --> 00:25:51,529
that then we move on from that and start

00:25:47,389 --> 00:25:55,760
doing our Wednesday when I calculate the

00:25:51,529 --> 00:25:58,190
total price and yeah if we were to run

00:25:55,760 --> 00:25:59,630
this now will actually be told we'll get

00:25:58,190 --> 00:26:02,899
the undefined message because we've not

00:25:59,630 --> 00:26:06,860
rather step for that yet so just happens

00:26:02,899 --> 00:26:10,870
here use the nose test runner passing

00:26:06,860 --> 00:26:14,659
that plug-in point it at the future file

00:26:10,870 --> 00:26:17,059
be that you told undefined and and if we

00:26:14,659 --> 00:26:20,539
just add a few sort of flags to that as

00:26:17,059 --> 00:26:25,070
well we'll get a better output so minus

00:26:20,539 --> 00:26:26,330
leaf of a bose and also no capture as

00:26:25,070 --> 00:26:29,210
well which just allows the print

00:26:26,330 --> 00:26:30,889
statement come on he now we've added

00:26:29,210 --> 00:26:32,690
those formatting options we were

00:26:30,889 --> 00:26:36,130
actually told which line is undefined

00:26:32,690 --> 00:26:36,130
and we can go away and write that now

00:26:41,850 --> 00:26:44,720
that's what

00:26:47,710 --> 00:26:52,799
but we just follow that that same format

00:26:50,049 --> 00:26:56,730
using the Python decorator and start

00:26:52,799 --> 00:26:56,730
match on that string

00:27:03,090 --> 00:27:06,630
and we're just going to do a simple

00:27:04,470 --> 00:27:09,810
method here just to calculate what the

00:27:06,630 --> 00:27:11,940
total price should be use that row

00:27:09,810 --> 00:27:16,140
iteration to get the the price of

00:27:11,940 --> 00:27:18,930
information out of it again that's where

00:27:16,140 --> 00:27:21,290
we're we're accessing that SCC table so

00:27:18,930 --> 00:27:25,290
it's available to us in this step now

00:27:21,290 --> 00:27:27,180
and we just converting the total into

00:27:25,290 --> 00:27:29,990
float as well just to keep it the same

00:27:27,180 --> 00:27:29,990
for comparison

00:27:45,420 --> 00:27:49,050
and we're going to need access to that

00:27:47,490 --> 00:27:52,130
thought or price again in our next step

00:27:49,050 --> 00:27:52,130
so tripping

00:27:56,690 --> 00:27:59,260
you

00:28:01,400 --> 00:28:07,430
and just finish off our test and we

00:28:04,160 --> 00:28:12,620
write the then step so then I should

00:28:07,430 --> 00:28:14,750
have a monthly bill off and then this is

00:28:12,620 --> 00:28:16,910
where we're going to use that sort of

00:28:14,750 --> 00:28:18,740
variable pass it in there so anything in

00:28:16,910 --> 00:28:23,380
quotes will be passed into our Python

00:28:18,740 --> 00:28:23,380
method right the step for that now

00:28:28,540 --> 00:28:33,460
you'll see that the only interesting

00:28:30,580 --> 00:28:34,750
thing for this one now is that we're

00:28:33,460 --> 00:28:36,430
doing the regular expression on the

00:28:34,750 --> 00:28:39,430
whole string but then we're just going

00:28:36,430 --> 00:28:42,120
to do a simple little reg reg ex there

00:28:39,430 --> 00:28:44,380
just to pick up what's in that quote and

00:28:42,120 --> 00:28:49,690
we can pass that into the method as

00:28:44,380 --> 00:28:56,350
expected price then it's just a simple

00:28:49,690 --> 00:28:57,940
assertequals on on the 22 point so

00:28:56,350 --> 00:29:01,590
hopefully when we run this now we should

00:28:57,940 --> 00:29:01,590
have a passing test

00:29:08,179 --> 00:29:13,249
go and we sprinted out our messages the

00:29:11,539 --> 00:29:17,210
background until this everything's okay

00:29:13,249 --> 00:29:18,830
and just to check that nothing changes

00:29:17,210 --> 00:29:21,049
going on here if we change that 70

00:29:18,830 --> 00:29:23,330
you'll see how it failed in a nice way

00:29:21,049 --> 00:29:27,889
and point to in in the direction of what

00:29:23,330 --> 00:29:29,929
went wrong so we just get the normal

00:29:27,889 --> 00:29:33,289
slap trace the assertion error the fact

00:29:29,929 --> 00:29:36,649
that 7th is not equal 483 and you can go

00:29:33,289 --> 00:29:38,480
and fix that now and we've also done a

00:29:36,649 --> 00:29:41,360
slightly more advanced version that I'll

00:29:38,480 --> 00:29:42,679
very quickly show you and just to

00:29:41,360 --> 00:29:45,369
explain that then if that difference

00:29:42,679 --> 00:29:48,980
between scenario and scenario outline oh

00:29:45,369 --> 00:29:51,110
we won't run this now and so what we've

00:29:48,980 --> 00:29:53,450
got is basically the small change the

00:29:51,110 --> 00:29:55,100
scenario to outline and what it means is

00:29:53,450 --> 00:29:56,990
that you can just pass in this examples

00:29:55,100 --> 00:29:59,269
table at the bottom and it means that

00:29:56,990 --> 00:30:01,159
you can write basically three four five

00:29:59,269 --> 00:30:03,769
tests in one so we don't need to write a

00:30:01,159 --> 00:30:06,110
scenario for each one here so not only

00:30:03,769 --> 00:30:08,090
we test in the the total price we're

00:30:06,110 --> 00:30:10,669
also testing the maximum and minimum as

00:30:08,090 --> 00:30:11,779
well and so I'm just going to move on

00:30:10,669 --> 00:30:14,740
because we're running out of time but

00:30:11,779 --> 00:30:14,740
that's the difference

00:30:24,930 --> 00:30:32,640
there's a foot and so just to wrap up

00:30:29,580 --> 00:30:34,950
the psyche points and that we've gone

00:30:32,640 --> 00:30:36,360
through today the feature file can

00:30:34,950 --> 00:30:38,810
essentially be written by the business

00:30:36,360 --> 00:30:41,100
the the English language side of it and

00:30:38,810 --> 00:30:43,650
it's getting that real clarity across

00:30:41,100 --> 00:30:45,390
the whole team and you steps and then

00:30:43,650 --> 00:30:47,160
written by testers and developers so

00:30:45,390 --> 00:30:49,380
they're focusing on the code that they

00:30:47,160 --> 00:30:50,880
they want to be involved with and yeah

00:30:49,380 --> 00:30:53,040
we deliver exactly what was required

00:30:50,880 --> 00:30:56,850
required what was asked for the first

00:30:53,040 --> 00:30:58,350
time and we know precisely when we're

00:30:56,850 --> 00:31:00,840
finished once these tests are passing

00:30:58,350 --> 00:31:02,190
and yeah they like to say the real key

00:31:00,840 --> 00:31:04,020
messages we do it right the first time

00:31:02,190 --> 00:31:08,310
every time we're not going back changing

00:31:04,020 --> 00:31:10,620
stuff later on though just in summary

00:31:08,310 --> 00:31:13,500
and I've gone through here we are at

00:31:10,620 --> 00:31:14,610
bskyb what we're all about and why you

00:31:13,500 --> 00:31:17,430
should be interested in what we are

00:31:14,610 --> 00:31:18,990
doing and I've shown what what you can

00:31:17,430 --> 00:31:21,060
achieve with these processes and the

00:31:18,990 --> 00:31:23,760
real thing to take away is that low

00:31:21,060 --> 00:31:25,860
defect cone and the real clarity across

00:31:23,760 --> 00:31:27,240
the whole theme and then I've also

00:31:25,860 --> 00:31:28,890
introduced how you actually write these

00:31:27,240 --> 00:31:31,950
thefts and show them that the are fairly

00:31:28,890 --> 00:31:33,360
simple to do and so thanks for coming

00:31:31,950 --> 00:31:35,760
along to my first ever conference talk

00:31:33,360 --> 00:31:37,560
and also the first level zero Python I

00:31:35,760 --> 00:31:38,730
really enjoyed the experience and I hope

00:31:37,560 --> 00:31:41,070
you find some of this stuff interesting

00:31:38,730 --> 00:31:43,430
and we've got five minutes for any

00:31:41,070 --> 00:31:43,430
questions

00:31:50,070 --> 00:31:57,850
that was really great now we have more

00:31:54,670 --> 00:32:05,620
or less 10 minutes for Q&A someone has

00:31:57,850 --> 00:32:08,080
any questions okay so you've mentioned

00:32:05,620 --> 00:32:10,360
they think that you can write it in your

00:32:08,080 --> 00:32:14,530
own language but even the keywords so

00:32:10,360 --> 00:32:16,690
given that you can yes that's something

00:32:14,530 --> 00:32:18,820
I'm not entirely sure on I would imagine

00:32:16,690 --> 00:32:20,440
that some people have changed the

00:32:18,820 --> 00:32:22,990
package themselves to be in another

00:32:20,440 --> 00:32:25,180
language and you could certainly at the

00:32:22,990 --> 00:32:26,860
moment use act you know given when then

00:32:25,180 --> 00:32:28,600
and write the other bit in another

00:32:26,860 --> 00:32:30,520
language and but it's just okay for

00:32:28,600 --> 00:32:38,500
someone right in your language version

00:32:30,520 --> 00:32:40,420
of it okay thank you I have one question

00:32:38,500 --> 00:32:42,300
regarding actually the structure of the

00:32:40,420 --> 00:32:44,410
feature vile that you present it and

00:32:42,300 --> 00:32:48,430
correct me if I'm wrong when you have

00:32:44,410 --> 00:32:50,410
this section called background are you

00:32:48,430 --> 00:32:52,870
setting up the preconditions for all

00:32:50,410 --> 00:32:55,330
features in this one file for all tests

00:32:52,870 --> 00:32:58,750
yes that would be executed before every

00:32:55,330 --> 00:33:00,010
single scenario so you could imagine you

00:32:58,750 --> 00:33:01,990
could have three four of these scenarios

00:33:00,010 --> 00:33:03,940
background would be executed for each

00:33:01,990 --> 00:33:06,190
one so it's something like the setup

00:33:03,940 --> 00:33:13,210
method in the unit that's right yeah

00:33:06,190 --> 00:33:14,590
okay thank you I had you reuse steps

00:33:13,210 --> 00:33:19,540
because it's like you've got what i call

00:33:14,590 --> 00:33:21,550
a get a catalog service there yeah yeah

00:33:19,540 --> 00:33:23,590
you could reuse that step if if the next

00:33:21,550 --> 00:33:25,630
person used exactly the same sentence

00:33:23,590 --> 00:33:28,150
yep if they have one where different the

00:33:25,630 --> 00:33:30,250
regular expression won't match right so

00:33:28,150 --> 00:33:33,760
how do you manage to organize your team

00:33:30,250 --> 00:33:35,710
so that you can reuse that well we we

00:33:33,760 --> 00:33:37,750
have basically three services in our

00:33:35,710 --> 00:33:39,340
team so we have a catalog and evaluate

00:33:37,750 --> 00:33:40,870
and a translate you don't really need to

00:33:39,340 --> 00:33:42,190
know what they're doing but if you

00:33:40,870 --> 00:33:44,620
imagine we've got those three services

00:33:42,190 --> 00:33:46,900
so every time we're testing those we

00:33:44,620 --> 00:33:48,580
just call the exact same one so every

00:33:46,900 --> 00:33:51,300
time I want to test catalog we use that

00:33:48,580 --> 00:33:53,410
one and and yeah because we've got that

00:33:51,300 --> 00:33:54,790
you know collaboration across the team

00:33:53,410 --> 00:33:55,960
it's just the case of everyone

00:33:54,790 --> 00:33:58,650
explaining you know this is what we've

00:33:55,960 --> 00:33:58,650
got now let's use it

00:33:59,620 --> 00:34:07,870
okay it can we actually the set of

00:34:06,130 --> 00:34:10,540
preconditions for apart from the

00:34:07,870 --> 00:34:12,250
background for each particular scenario

00:34:10,540 --> 00:34:15,280
so we have for example the background as

00:34:12,250 --> 00:34:16,960
a global variables in entire suite and

00:34:15,280 --> 00:34:20,200
then we have for example particular

00:34:16,960 --> 00:34:23,080
preconditions for each scenario okay

00:34:20,200 --> 00:34:26,919
yeah and when we do this I'm not sure

00:34:23,080 --> 00:34:28,690
and I've not done that myself okay I'm

00:34:26,919 --> 00:34:30,520
asking because for example I use lettuce

00:34:28,690 --> 00:34:32,440
instead of a background we are setting

00:34:30,520 --> 00:34:35,409
up reconditions in they actually given

00:34:32,440 --> 00:34:37,030
in each scenario scenario yeah I'm sure

00:34:35,409 --> 00:34:47,050
they are available in some of the other

00:34:37,030 --> 00:34:49,919
frameworks I don't know okay sorry I

00:34:47,050 --> 00:34:52,600
just wanted to say the lettuce is

00:34:49,919 --> 00:34:55,090
internationalized and into a number of

00:34:52,600 --> 00:34:56,530
languages so I think that includes Cuba

00:34:55,090 --> 00:35:00,120
were actually the key words aren't

00:34:56,530 --> 00:35:03,010
significant in lettuce my question is

00:35:00,120 --> 00:35:06,040
we've not had very good business

00:35:03,010 --> 00:35:09,580
engagement with writing vdd tests and

00:35:06,040 --> 00:35:11,140
whenever that has been done they tended

00:35:09,580 --> 00:35:14,080
to write language which isn't really

00:35:11,140 --> 00:35:17,530
testable I wonder if you could like

00:35:14,080 --> 00:35:19,750
share some insight in how to get you no

00:35:17,530 --> 00:35:22,150
good vdd tests coming into the process

00:35:19,750 --> 00:35:24,340
and yeah I think it's just having the

00:35:22,150 --> 00:35:27,160
personnel who really understand what the

00:35:24,340 --> 00:35:29,530
business wants so we have business

00:35:27,160 --> 00:35:31,780
analysts within our team who you know

00:35:29,530 --> 00:35:33,520
liaised with the business and if they

00:35:31,780 --> 00:35:35,680
know exactly what's going on and they

00:35:33,520 --> 00:35:37,120
have a sub you know minor technical

00:35:35,680 --> 00:35:39,610
background in the stand the test inside

00:35:37,120 --> 00:35:41,770
as well then they can articulate those

00:35:39,610 --> 00:35:44,260
ideas you know what the business once

00:35:41,770 --> 00:35:46,810
and you can see here like you know

00:35:44,260 --> 00:35:49,540
exactly what to develop from that and so

00:35:46,810 --> 00:35:51,700
yeah I mean I don't know what else to

00:35:49,540 --> 00:35:53,440
say it's just a case of knowing exactly

00:35:51,700 --> 00:35:56,740
what you want and describing it in this

00:35:53,440 --> 00:35:59,070
way really fancy youth question I mean I

00:35:56,740 --> 00:35:59,070
know

00:36:10,260 --> 00:36:14,250
actually as I was facing exactly the

00:36:12,510 --> 00:36:16,170
same situations that we were getting for

00:36:14,250 --> 00:36:17,490
example the business description from

00:36:16,170 --> 00:36:18,930
the business analyst and it was

00:36:17,490 --> 00:36:21,210
completely impossible because it was

00:36:18,930 --> 00:36:23,160
like a poet's sometimes so we actually

00:36:21,210 --> 00:36:25,050
we started writing together with

00:36:23,160 --> 00:36:27,840
developers because i work as a yukio

00:36:25,050 --> 00:36:29,970
engineer the business scenario together

00:36:27,840 --> 00:36:32,700
with business people so for example

00:36:29,970 --> 00:36:35,010
business analyst created the user story

00:36:32,700 --> 00:36:36,750
and then we SAT together for 10 15

00:36:35,010 --> 00:36:40,980
minutes and actually we presented our

00:36:36,750 --> 00:36:42,660
version and we just get agreement yeah I

00:36:40,980 --> 00:36:44,850
think so i pointed me in the right way

00:36:42,660 --> 00:36:47,190
there so yeah we have a dedicated

00:36:44,850 --> 00:36:48,810
testing team so they're actually writing

00:36:47,190 --> 00:36:50,340
these tests as well and they have a real

00:36:48,810 --> 00:36:52,380
technical background they can write

00:36:50,340 --> 00:36:54,030
Python as well so they're not just sort

00:36:52,380 --> 00:36:55,830
of focused on tests that can do the code

00:36:54,030 --> 00:36:57,720
so i think it's getting people involved

00:36:55,830 --> 00:37:02,040
who know like what's going to happen

00:36:57,720 --> 00:37:03,810
underneath now get it as well yes

00:37:02,040 --> 00:37:07,890
exactly yeah we do pair programming so

00:37:03,810 --> 00:37:09,690
yeah yes yeah that's why we have that

00:37:07,890 --> 00:37:11,340
défis process as well as i mentioned so

00:37:09,690 --> 00:37:14,310
it's like everyone collaborate and share

00:37:11,340 --> 00:37:20,910
an idea there weren't any questions oh

00:37:14,310 --> 00:37:22,920
yeah site as far as I understand this

00:37:20,910 --> 00:37:26,160
applies mostly to acceptance testing but

00:37:22,920 --> 00:37:29,700
are still using like all good tdd and

00:37:26,160 --> 00:37:32,040
though you using fresh nor standard TD

00:37:29,700 --> 00:37:34,830
littles for that yeah we we do unit

00:37:32,040 --> 00:37:36,210
testing as well before every code

00:37:34,830 --> 00:37:38,580
writing we don't put on my any code

00:37:36,210 --> 00:37:40,080
about unit tests and but we also write

00:37:38,580 --> 00:37:42,540
our acceptance tests up front as well

00:37:40,080 --> 00:37:47,130
and yeah we're just using Russian for

00:37:42,540 --> 00:37:50,130
that which was that you um what if you

00:37:47,130 --> 00:37:54,480
don't do it right the first time but if

00:37:50,130 --> 00:37:57,690
the scenario is flawed hey well yeah how

00:37:54,480 --> 00:37:59,910
do you approach that case yeah that is a

00:37:57,690 --> 00:38:01,770
possibility I mean and like say if

00:37:59,910 --> 00:38:03,330
something does arise that's gone

00:38:01,770 --> 00:38:06,600
slightly wrong like the the bugs that

00:38:03,330 --> 00:38:08,550
were in our in our system and you know

00:38:06,600 --> 00:38:10,500
we because we work in two weekly sprints

00:38:08,550 --> 00:38:11,820
we can handle that so if they do come up

00:38:10,500 --> 00:38:12,990
we just put it into the sprint that's

00:38:11,820 --> 00:38:15,000
coming up and we deal with it straight

00:38:12,990 --> 00:38:19,100
away we're not having to wait months or

00:38:15,000 --> 00:38:19,100
weeks like that with video straight away

00:38:19,410 --> 00:38:29,099
okay in BDD work we have a description

00:38:27,000 --> 00:38:31,319
of so called the living documentation

00:38:29,099 --> 00:38:33,630
and actually I was wondering if you use

00:38:31,319 --> 00:38:37,530
this description these features are

00:38:33,630 --> 00:38:40,109
actually documentation I show you for

00:38:37,530 --> 00:38:41,940
example don't copy this to confluence

00:38:40,109 --> 00:38:44,039
just to keep for example documentation

00:38:41,940 --> 00:38:46,200
for for other people yes because we

00:38:44,039 --> 00:38:49,430
struggle actually with this so I want to

00:38:46,200 --> 00:38:52,049
in my company get rid of the duplication

00:38:49,430 --> 00:38:56,730
certain documents we do actually have

00:38:52,049 --> 00:38:59,430
jira the JIRA map we the business

00:38:56,730 --> 00:39:01,950
analyst will write sort of version of

00:38:59,430 --> 00:39:03,329
that so the the feature description

00:39:01,950 --> 00:39:05,700
there might not be exactly the same as

00:39:03,329 --> 00:39:08,130
what's in JIRA but that's what we use

00:39:05,700 --> 00:39:10,440
that that's what works well for them it

00:39:08,130 --> 00:39:14,549
manages what we're working on but we

00:39:10,440 --> 00:39:17,910
also have that as well there's anyone

00:39:14,549 --> 00:39:21,930
any questions if not I might want to

00:39:17,910 --> 00:39:23,369
answer question okay so everything is

00:39:21,930 --> 00:39:25,140
really really interesting and it's

00:39:23,369 --> 00:39:26,970
incredibly fascinating the fact that we

00:39:25,140 --> 00:39:28,589
can actually convert code into something

00:39:26,970 --> 00:39:30,420
which is readable also to our

00:39:28,589 --> 00:39:32,250
stakeholders or people which have

00:39:30,420 --> 00:39:36,359
nothing you know have no knowledge at

00:39:32,250 --> 00:39:38,730
all to the Python but my question is how

00:39:36,359 --> 00:39:42,329
much is this how much is this time

00:39:38,730 --> 00:39:46,619
consuming first thing and second thing

00:39:42,329 --> 00:39:49,020
I'm i do agile development but one of

00:39:46,619 --> 00:39:51,180
the biggest problems I personally have

00:39:49,020 --> 00:39:53,250
is the fact that I spend at least thirty

00:39:51,180 --> 00:39:55,650
forty percent of my actual time writing

00:39:53,250 --> 00:39:57,000
tests I know it's very very important

00:39:55,650 --> 00:39:59,640
that's why I could you do if I wouldn't

00:39:57,000 --> 00:40:02,460
have done it but I'm just trying to

00:39:59,640 --> 00:40:04,950
understand if time could be used in a

00:40:02,460 --> 00:40:07,920
better way or at least the fact that we

00:40:04,950 --> 00:40:11,339
can write for example this this table

00:40:07,920 --> 00:40:14,039
example right if use like normal

00:40:11,339 --> 00:40:16,440
libraries like unit tests or unit tests

00:40:14,039 --> 00:40:19,460
or something similar like whitis it

00:40:16,440 --> 00:40:22,619
would be two lines of code instead it's

00:40:19,460 --> 00:40:27,000
10 lines of text and for your four lines

00:40:22,619 --> 00:40:29,160
of spec code yeah I mean you saw in the

00:40:27,000 --> 00:40:31,500
demo how quickly we wrote that test and

00:40:29,160 --> 00:40:32,790
is it's really simple to do so I

00:40:31,500 --> 00:40:34,590
wouldn't say it's time consuming

00:40:32,790 --> 00:40:37,230
and what it is doing is is really

00:40:34,590 --> 00:40:38,760
clarifying what what we want to do so it

00:40:37,230 --> 00:40:41,270
you know it's definitely worth doing

00:40:38,760 --> 00:40:43,860
it's not like a waste of time and we do

00:40:41,270 --> 00:40:45,900
right you know lots of code as well it's

00:40:43,860 --> 00:40:48,420
not all about the test is that

00:40:45,900 --> 00:40:52,320
clarification really okay and another

00:40:48,420 --> 00:40:55,530
question I have is how do you actually

00:40:52,320 --> 00:40:59,900
you know also we're working in an agile

00:40:55,530 --> 00:41:03,090
world now we all know that cold Oh

00:40:59,900 --> 00:41:05,130
devolves a lot and you can't really

00:41:03,090 --> 00:41:09,840
predict exactly how much time you will

00:41:05,130 --> 00:41:13,370
finish how do you know for example and

00:41:09,840 --> 00:41:15,870
how can you predict if something and

00:41:13,370 --> 00:41:17,670
well you're kind of getting away from

00:41:15,870 --> 00:41:19,500
that prediction so we know what we want

00:41:17,670 --> 00:41:22,590
to deliver they have a basic idea of the

00:41:19,500 --> 00:41:24,150
the roadmap for the application but

00:41:22,590 --> 00:41:26,100
we're just we delivering correct

00:41:24,150 --> 00:41:29,460
incrementally so okay you know it's just

00:41:26,100 --> 00:41:31,670
piece by piece all right thank you very

00:41:29,460 --> 00:41:31,670
much

00:42:05,560 --> 00:42:07,620

YouTube URL: https://www.youtube.com/watch?v=OMLDHNaUMB8


