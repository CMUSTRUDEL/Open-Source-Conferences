Title: Writing a Pyramid application
Publication date: 2015-04-19
Playlist: EuroPython 2012
Description: 
	[EuroPython 2012] D. Nouri - 6 JULY 2012 in "Track Tagliatelle"
Captions: 
	00:01:45,390 --> 00:01:55,259
all right thanks excellent okay so oh

00:01:50,789 --> 00:01:55,259
you're gonna okay

00:02:06,850 --> 00:02:09,600
okay

00:02:11,520 --> 00:02:17,510
so welcome on this last day for Europe -

00:02:18,980 --> 00:02:27,840
we have today a training session on of

00:02:25,470 --> 00:02:32,070
the right application right with the

00:02:27,840 --> 00:02:35,310
pilot yes we've done in lorry which is

00:02:32,070 --> 00:02:39,570
going to be here for long for four hours

00:02:35,310 --> 00:02:44,310
but usually this is very this is a very

00:02:39,570 --> 00:02:46,680
nice time to perform stuff and and hands

00:02:44,310 --> 00:02:52,470
on it's very useful

00:02:46,680 --> 00:02:56,390
thank you very much learning thanks ok

00:02:52,470 --> 00:02:59,390
so thanks for coming we're going to

00:02:56,390 --> 00:03:05,730
write a little pyramid application today

00:02:59,390 --> 00:03:09,300
I have a material for you which you

00:03:05,730 --> 00:03:13,470
should go and maybe download now it's

00:03:09,300 --> 00:03:16,350
available on github you might either

00:03:13,470 --> 00:03:22,680
want to get clone it or you know

00:03:16,350 --> 00:03:27,510
download the zip and the material

00:03:22,680 --> 00:03:32,010
contains it's it's a folder with a

00:03:27,510 --> 00:03:35,600
couple of example directories so here

00:03:32,010 --> 00:03:38,640
you can see we're going to step through

00:03:35,600 --> 00:03:41,880
seven examples basically what we're

00:03:38,640 --> 00:03:43,650
going to do the installation then we're

00:03:41,880 --> 00:03:46,770
gonna start with the first example which

00:03:43,650 --> 00:03:48,450
is a very simple actually the hello

00:03:46,770 --> 00:03:51,690
world example pretty much from the

00:03:48,450 --> 00:03:55,320
pyramid website the most simple pyramid

00:03:51,690 --> 00:03:59,490
application that you can write then

00:03:55,320 --> 00:04:02,880
we're gonna talk about the Zod be

00:03:59,490 --> 00:04:05,220
scaffold which is sorry I should

00:04:02,880 --> 00:04:09,690
probably this is the link where you can

00:04:05,220 --> 00:04:14,040
in the meantime get a copy of the of the

00:04:09,690 --> 00:04:16,109
tutorial tutorials material the second

00:04:14,040 --> 00:04:17,520
example is about the said led scaffold

00:04:16,109 --> 00:04:22,350
so we're going to work with this arrow

00:04:17,520 --> 00:04:24,220
DB which is the soap object database for

00:04:22,350 --> 00:04:26,200
this example the

00:04:24,220 --> 00:04:28,660
example is going to be about templating

00:04:26,200 --> 00:04:34,270
pyramid and templates we're going to use

00:04:28,660 --> 00:04:36,160
chameleon templates in our example I'm

00:04:34,270 --> 00:04:40,000
saying we're using this and that in our

00:04:36,160 --> 00:04:42,610
example because actually we can pyramid

00:04:40,000 --> 00:04:44,170
offers us the possibility to use

00:04:42,610 --> 00:04:47,470
different technologies that's why I'm

00:04:44,170 --> 00:04:50,260
saying we're actually making choices

00:04:47,470 --> 00:04:55,480
here so the fourth example is about

00:04:50,260 --> 00:04:58,150
writing forms where we're going to you

00:04:55,480 --> 00:05:02,980
know create HTML forms to add edit and

00:04:58,150 --> 00:05:06,940
delete content in the fifth example

00:05:02,980 --> 00:05:08,680
we're going to and these are all one is

00:05:06,940 --> 00:05:13,360
built on top of the other right so you

00:05:08,680 --> 00:05:15,130
can follow along on the example and once

00:05:13,360 --> 00:05:16,480
we're done we're going to go into the

00:05:15,130 --> 00:05:18,310
next example but it's going to be the

00:05:16,480 --> 00:05:22,210
same project so it's it's kind of an

00:05:18,310 --> 00:05:26,320
evil evolving project until we have a

00:05:22,210 --> 00:05:28,120
somewhat complete project in the end so

00:05:26,320 --> 00:05:30,760
we're going to talk about users in the

00:05:28,120 --> 00:05:32,980
fifth example more about users

00:05:30,760 --> 00:05:36,750
insecurities in the sixth example and

00:05:32,980 --> 00:05:45,419
then the seventh is the final project

00:05:36,750 --> 00:05:45,419
and so these are all things where

00:05:45,930 --> 00:05:51,729
pyramid gives you a lot of possibilities

00:05:48,880 --> 00:05:55,770
to configure and set together your

00:05:51,729 --> 00:05:58,750
applications that is you're not getting

00:05:55,770 --> 00:06:01,690
out of the box solution I mean in that

00:05:58,750 --> 00:06:03,729
case it it really differs from Django

00:06:01,690 --> 00:06:06,970
because Django already makes decisions

00:06:03,729 --> 00:06:10,120
about what the templates the templating

00:06:06,970 --> 00:06:13,450
language the ORM or how you're gonna

00:06:10,120 --> 00:06:15,910
persist your data there is an admin

00:06:13,450 --> 00:06:18,190
there's authentication built in out of

00:06:15,910 --> 00:06:21,610
the box so when you when you saw the

00:06:18,190 --> 00:06:24,340
Django project you already have all of

00:06:21,610 --> 00:06:25,870
these things available with pyramid it's

00:06:24,340 --> 00:06:30,160
different because pyramid is more

00:06:25,870 --> 00:06:33,400
modular and it's more low-level which

00:06:30,160 --> 00:06:36,090
means that it's more appropriate for

00:06:33,400 --> 00:06:37,440
highly customized web applications

00:06:36,090 --> 00:06:42,680
whereas

00:06:37,440 --> 00:06:47,940
you're coming with the admin and and

00:06:42,680 --> 00:06:51,090
sequel database and all that is more fit

00:06:47,940 --> 00:06:53,160
for a certain type of web application

00:06:51,090 --> 00:06:55,650
with pyramid you have more choices you

00:06:53,160 --> 00:07:00,420
can you can mix and match better so in

00:06:55,650 --> 00:07:02,940
that way it's maybe more similar to you

00:07:00,420 --> 00:07:09,210
know two flasks or something pyramid

00:07:02,940 --> 00:07:15,000
that is right so once you have checked

00:07:09,210 --> 00:07:16,760
out these this folder you should be able

00:07:15,000 --> 00:07:19,260
to see something like this actually

00:07:16,760 --> 00:07:21,150
ignore the bin directory but you should

00:07:19,260 --> 00:07:25,110
have a directory structure like this

00:07:21,150 --> 00:07:27,000
we're going to spend the first couple of

00:07:25,110 --> 00:07:33,290
minutes maybe 10 15 minutes to get

00:07:27,000 --> 00:07:35,640
everyone installed that is who here has

00:07:33,290 --> 00:07:40,500
doesn't have virtual and from his

00:07:35,640 --> 00:07:45,180
machine just maybe do we everyone has

00:07:40,500 --> 00:07:48,600
virtual and installed and ok so you can

00:07:45,180 --> 00:07:50,090
either use Python 2.60 2.7 for this

00:07:48,600 --> 00:07:55,800
tutorial

00:07:50,090 --> 00:07:58,760
mmm they're both gonna be fine and we

00:07:55,800 --> 00:08:01,710
are also going to need a C compiler that

00:07:58,760 --> 00:08:03,390
is because we're going to work not

00:08:01,710 --> 00:08:06,500
because pyramid itself needs to see

00:08:03,390 --> 00:08:14,610
compiler but we needed for the set ODB

00:08:06,500 --> 00:08:18,270
so I hope that those who have a Mac they

00:08:14,610 --> 00:08:21,390
already have Xcode installed or some

00:08:18,270 --> 00:08:23,190
other C compiler available because

00:08:21,390 --> 00:08:25,590
that's pretty much if you need to

00:08:23,190 --> 00:08:32,010
install a C compiler on a Mac I think it

00:08:25,590 --> 00:08:34,380
might take a while and then but does

00:08:32,010 --> 00:08:37,710
anyone not have it or doesn't know if

00:08:34,380 --> 00:08:40,550
they have a C compiler or D are you're

00:08:37,710 --> 00:08:43,550
confident that you have one okay great

00:08:40,550 --> 00:08:43,550
yes

00:08:46,110 --> 00:08:56,019
I've actually not tested this tutorial

00:08:48,670 --> 00:08:59,410
with Windows depending on our confidence

00:08:56,019 --> 00:09:12,510
you are with with your compiler and your

00:08:59,410 --> 00:09:12,510
Python tools right I hope so

00:09:14,589 --> 00:09:20,110
I'd say should it not work maybe I can

00:09:17,620 --> 00:09:22,529
suggest that you team up with someone or

00:09:20,110 --> 00:09:25,360
so that you don't spend too much time

00:09:22,529 --> 00:09:28,839
and you can follow up on installation

00:09:25,360 --> 00:09:31,329
maybe at home but if that's a problem

00:09:28,839 --> 00:09:32,769
with the installation so great so that

00:09:31,329 --> 00:09:35,230
means that we don't actually need to

00:09:32,769 --> 00:09:37,649
spend so much time on installation if

00:09:35,230 --> 00:09:40,959
I'm correct

00:09:37,649 --> 00:09:43,589
so because we actually have a lot a lot

00:09:40,959 --> 00:09:46,360
of other things going on but so on

00:09:43,589 --> 00:09:48,040
debian or Ubuntu this is an example of

00:09:46,360 --> 00:09:50,050
how you could install a C compiler

00:09:48,040 --> 00:09:53,920
apparently everyone has one on Mac you

00:09:50,050 --> 00:09:57,430
would need Xcode we need to get Python

00:09:53,920 --> 00:10:00,490
2.7 plus the header files so that means

00:09:57,430 --> 00:10:04,930
you need to be able to build you to have

00:10:00,490 --> 00:10:10,180
this that's again for compiling the so

00:10:04,930 --> 00:10:15,880
DB so on debian or Ubuntu that will be

00:10:10,180 --> 00:10:17,560
installed the - def package of Python if

00:10:15,880 --> 00:10:20,790
you don't have these you're going to get

00:10:17,560 --> 00:10:30,610
an error as soon as we're trying to

00:10:20,790 --> 00:10:32,440
install they said only be example I'm

00:10:30,610 --> 00:10:33,040
I'm actually pretty sure that in a

00:10:32,440 --> 00:10:35,140
source

00:10:33,040 --> 00:10:37,269
install of of Python you already have

00:10:35,140 --> 00:10:40,329
this setup so you don't really need to

00:10:37,269 --> 00:10:42,910
worry about this just on if you're using

00:10:40,329 --> 00:10:44,800
a package management system and what you

00:10:42,910 --> 00:10:47,380
install python and they are divided into

00:10:44,800 --> 00:10:50,290
two packet packages you might need to

00:10:47,380 --> 00:10:55,540
install separately the python def

00:10:50,290 --> 00:10:57,010
package okay so let's let's just try

00:10:55,540 --> 00:10:59,020
this out and we'll see if if some

00:10:57,010 --> 00:11:03,280
one fails and someone needs help or

00:10:59,020 --> 00:11:05,860
something right so everyone has

00:11:03,280 --> 00:11:09,550
virtualenv in salt what I'm going to do

00:11:05,860 --> 00:11:14,140
is so what you should do now is now that

00:11:09,550 --> 00:11:23,410
you have this folder hopefully were you

00:11:14,140 --> 00:11:32,350
able to get it still downloading alright

00:11:23,410 --> 00:11:35,740
so so this is the this is the project on

00:11:32,350 --> 00:11:40,570
github and we're going to use the same

00:11:35,740 --> 00:11:46,480
folder to install a virtual end so that

00:11:40,570 --> 00:11:48,400
means what I would do here is you can

00:11:46,480 --> 00:11:50,590
see that I'm inside of this folder and

00:11:48,400 --> 00:11:56,770
what I would do is I would just call

00:11:50,590 --> 00:11:59,350
virtual and I'm using a know side

00:11:56,770 --> 00:12:03,790
packages option because I am a not I I

00:11:59,350 --> 00:12:07,120
have an older version of virtual and and

00:12:03,790 --> 00:12:09,940
the dot means the current directory so

00:12:07,120 --> 00:12:16,030
I'm going to put this right into the

00:12:09,940 --> 00:12:20,530
tutorial folder the effect of calling

00:12:16,030 --> 00:12:22,330
this command is that you should have you

00:12:20,530 --> 00:12:26,460
know pin directory with a Python

00:12:22,330 --> 00:12:26,460
interpreter in it and

00:12:34,740 --> 00:12:43,070
let's see if we can get all this

00:12:37,970 --> 00:12:43,070
tutorial downloaded in a timely way

00:12:48,550 --> 00:12:56,940
well it's not telling you

00:12:53,350 --> 00:12:56,940
four hours or four hours

00:13:26,660 --> 00:13:32,980
so once you have the virtual and set up

00:13:28,880 --> 00:13:35,650
you should try and pip install pyramid

00:13:32,980 --> 00:13:39,350
which is the standard way of installing

00:13:35,650 --> 00:13:41,720
pyramid and its dependencies so the

00:13:39,350 --> 00:13:49,790
first step would be what get a check out

00:13:41,720 --> 00:13:54,530
of the tutorial then create the virtual

00:13:49,790 --> 00:13:59,990
end using this command that we just saw

00:13:54,530 --> 00:14:02,270
this one and then use the bin pip which

00:13:59,990 --> 00:14:04,640
virtual and 4 also creates in your bin

00:14:02,270 --> 00:14:08,240
you don't you won't have most of these

00:14:04,640 --> 00:14:15,740
but there has been been peep which you

00:14:08,240 --> 00:14:17,620
can use to install pyramid you don't you

00:14:15,740 --> 00:14:20,930
don't need to activate before you

00:14:17,620 --> 00:14:23,210
because you're saying explicitly bin PPO

00:14:20,930 --> 00:14:25,850
you're gonna use the peep of this

00:14:23,210 --> 00:14:29,620
virtual environment so you don't need to

00:14:25,850 --> 00:14:29,620
be more explicit than that

00:14:36,319 --> 00:14:39,589
let's see

00:14:41,430 --> 00:14:44,149
oh really

00:14:47,730 --> 00:14:51,680
github is letting us down right

00:15:01,350 --> 00:15:07,560
so once you have two virtual and please

00:15:03,240 --> 00:15:13,680
go ahead and do a bean pip install

00:15:07,560 --> 00:15:15,269
pyramid so this is the step where we're

00:15:13,680 --> 00:15:18,120
actually going to install pyramid and

00:15:15,269 --> 00:15:20,910
its dependencies and you should see

00:15:18,120 --> 00:15:24,750
output similar to what I have here so

00:15:20,910 --> 00:15:27,120
the first line is my terminal where I

00:15:24,750 --> 00:15:29,269
say so I'm inside the virtual length

00:15:27,120 --> 00:15:32,250
which is why I have this bin directory

00:15:29,269 --> 00:15:35,399
bin slash people installed pyramid you

00:15:32,250 --> 00:15:39,029
should see output similar to this you

00:15:35,399 --> 00:15:41,639
know and the last the second last line

00:15:39,029 --> 00:15:50,759
is successfully installed cleaning up

00:15:41,639 --> 00:15:52,670
and then you know that it worked this is

00:15:50,759 --> 00:15:56,880
also where we by the way see all the

00:15:52,670 --> 00:16:00,029
dependencies of pyramids right pyramid

00:15:56,880 --> 00:16:02,269
chameleon marker web op and so on and so

00:16:00,029 --> 00:16:02,269
forth

00:16:11,939 --> 00:16:14,989
is studying

00:16:15,000 --> 00:16:20,330
the are you already at the people

00:16:17,220 --> 00:16:20,330
install okay

00:16:25,480 --> 00:16:35,890
so who's is there anyone not done with

00:16:29,020 --> 00:16:35,890
this is the tutorial okay yeah

00:16:46,040 --> 00:16:51,510
is that more people who are gonna need a

00:16:48,420 --> 00:16:56,040
USB or something maybe I should put the

00:16:51,510 --> 00:16:58,890
tutorial up in another place also I can

00:16:56,040 --> 00:17:03,680
see Paul some some other location if

00:16:58,890 --> 00:17:03,680
github is what slow is that correct

00:17:04,010 --> 00:17:07,400
it's working

00:17:11,390 --> 00:17:17,709
so who's not done with downloading the

00:17:14,240 --> 00:17:22,030
tutorial material from github yet if you

00:17:17,709 --> 00:17:27,500
is anyone still waiting for the download

00:17:22,030 --> 00:17:29,900
yes okay maybe let's wait to three

00:17:27,500 --> 00:17:48,440
minutes and then we can continue with

00:17:29,900 --> 00:17:53,679
everyone yes yes so this is of the bean

00:17:48,440 --> 00:17:53,679
you only get after you have virtual end

00:19:05,190 --> 00:19:11,340
so as I said the final stage at this

00:19:07,859 --> 00:19:19,320
point should be that you do bean pip

00:19:11,340 --> 00:19:26,789
install pyramid inside the tutorial

00:19:19,320 --> 00:19:33,090
directory anyone still needs more time

00:19:26,789 --> 00:19:36,440
for this step I mean it's it's it's more

00:19:33,090 --> 00:19:38,700
essential than the other steps because

00:19:36,440 --> 00:19:40,379
when you miss one of the examples you're

00:19:38,700 --> 00:19:42,479
going to be able to switch to the next

00:19:40,379 --> 00:19:44,970
example folder and follow along again

00:19:42,479 --> 00:19:46,499
but this one's kind of essential because

00:19:44,970 --> 00:19:51,419
if you don't have pyramid you can't run

00:19:46,499 --> 00:19:58,440
any of the examples so I hope that

00:19:51,419 --> 00:20:01,879
everyone can install things so you just

00:19:58,440 --> 00:20:04,739
arrived if you in case you just arrived

00:20:01,879 --> 00:20:05,369
again I'm gonna repeat for for another

00:20:04,739 --> 00:20:08,369
time

00:20:05,369 --> 00:20:13,159
you should get maybe the zip file from

00:20:08,369 --> 00:20:13,159
the top link and an unzip

00:20:18,450 --> 00:20:23,070
or you know if someone's not comfortable

00:20:20,609 --> 00:20:25,679
with these commands or the shell or they

00:20:23,070 --> 00:20:27,779
still want to follow along I suggested

00:20:25,679 --> 00:20:31,590
you you team up with someone I'm sure

00:20:27,779 --> 00:20:34,429
everyone's happy to to do the tutorial

00:20:31,590 --> 00:20:34,429
in pairs or so

00:21:01,100 --> 00:21:08,139
so does everyone to continue or do you

00:21:03,559 --> 00:21:11,139
need some time or you have it is working

00:21:08,139 --> 00:21:11,139
No

00:21:18,310 --> 00:21:21,670
which command

00:21:23,950 --> 00:21:29,950
oh okay

00:21:28,180 --> 00:21:33,610
although you already with the first

00:21:29,950 --> 00:21:36,600
example okay so if you already got the

00:21:33,610 --> 00:21:39,960
pyramid that's that's cool at this point

00:21:36,600 --> 00:21:48,210
anyone doesn't have pyramid installs now

00:21:39,960 --> 00:21:48,210
maybe what you okay right sorry

00:21:48,750 --> 00:21:55,360
maybe we can go through the hello pie

00:21:51,870 --> 00:21:56,860
example already and this is actually not

00:21:55,360 --> 00:21:58,600
something where you have to write

00:21:56,860 --> 00:22:01,870
anything so you can just follow a long

00:21:58,600 --> 00:22:11,010
while it might still be downloading for

00:22:01,870 --> 00:22:14,080
you so if you want visit the x1 hello

00:22:11,010 --> 00:22:16,960
directory there's two files in there

00:22:14,080 --> 00:22:20,560
each one of these steps has a readme.txt

00:22:16,960 --> 00:22:23,020
so you can you know when you go home and

00:22:20,560 --> 00:22:24,940
you don't remember the details the

00:22:23,020 --> 00:22:27,400
readme takes see more or less contains

00:22:24,940 --> 00:22:31,090
to the cause of the tutorial and and how

00:22:27,400 --> 00:22:33,340
i'm going to proceed and you know if you

00:22:31,090 --> 00:22:34,810
want to complete this or you don't you

00:22:33,340 --> 00:22:37,210
can't complete all the steps oh you

00:22:34,810 --> 00:22:40,150
didn't understand some details there's

00:22:37,210 --> 00:22:46,330
also links inside the readme files so

00:22:40,150 --> 00:22:51,370
you can you know go on go further into

00:22:46,330 --> 00:22:55,750
the into the direction of the examples

00:22:51,370 --> 00:22:57,820
material some of the examples or most of

00:22:55,750 --> 00:23:00,340
them actually the steps are only going

00:22:57,820 --> 00:23:02,050
to touch the the subjects right when

00:23:00,340 --> 00:23:04,300
we're not going to be able to go into

00:23:02,050 --> 00:23:07,300
depth in any of these but we're trying

00:23:04,300 --> 00:23:10,510
to give a basically a a good overview of

00:23:07,300 --> 00:23:14,890
pyramid and where its strengths are so

00:23:10,510 --> 00:23:18,880
that you can then you know be hopefully

00:23:14,890 --> 00:23:22,240
inspired and then go home and read more

00:23:18,880 --> 00:23:27,190
or follow the links and so on so the

00:23:22,240 --> 00:23:31,990
first example is the installation

00:23:27,190 --> 00:23:33,670
instructions are as follows actually for

00:23:31,990 --> 00:23:36,600
those who haven't downloaded yet this is

00:23:33,670 --> 00:23:36,600
not going to work but

00:23:36,750 --> 00:23:40,860
so in your shell

00:23:41,220 --> 00:23:48,340
once you have pyramid installed you can

00:23:44,980 --> 00:23:50,760
change into the x1 no sorry this doesn't

00:23:48,340 --> 00:23:59,230
need any installation forget about that

00:23:50,760 --> 00:24:06,010
you can do I guess it's just Python x1

00:23:59,230 --> 00:24:08,440
hello hello pie if I'm not mistaken you

00:24:06,010 --> 00:24:15,820
should then get a message server started

00:24:08,440 --> 00:24:20,550
at localhost 8080 and then you should be

00:24:15,820 --> 00:24:23,320
able to visit that URL in your browser

00:24:20,550 --> 00:24:25,450
so this is just using the normal Python

00:24:23,320 --> 00:24:28,540
interpreter but the one of your

00:24:25,450 --> 00:24:30,400
challenge so either you have the over

00:24:28,540 --> 00:24:33,100
challenge active and you just type

00:24:30,400 --> 00:24:37,150
Python the way I usually use this is I

00:24:33,100 --> 00:24:39,430
explicitly name the Python of the

00:24:37,150 --> 00:24:40,990
virtual end because I'm inside this

00:24:39,430 --> 00:24:43,720
directory with the virtual and if I can

00:24:40,990 --> 00:24:46,960
save in Python and then I just pointed

00:24:43,720 --> 00:24:52,690
to the hello pi file which is our first

00:24:46,960 --> 00:24:56,400
two pyramid application so if you want

00:24:52,690 --> 00:24:56,400
to switch to your browser

00:25:06,920 --> 00:25:21,920
sure okay that doesn't work all right

00:25:16,790 --> 00:25:24,620
you're all way ahead okay all right so

00:25:21,920 --> 00:25:26,930
let's look at so this is what you should

00:25:24,620 --> 00:25:31,370
get and now we're going to look at the

00:25:26,930 --> 00:25:33,140
hello pie file and see what it does okay

00:25:31,370 --> 00:25:34,850
how its structured I have lots of

00:25:33,140 --> 00:25:37,280
comments but obviously these aren't

00:25:34,850 --> 00:25:39,370
required in your in your production code

00:25:37,280 --> 00:25:41,840
this is just to explain what's going on

00:25:39,370 --> 00:25:44,300
what we have here it's actually

00:25:41,840 --> 00:25:45,770
producing the whole thing and hopefully

00:25:44,300 --> 00:25:51,740
you can ignore the red lines a little

00:25:45,770 --> 00:25:53,960
bit from bottom when I'm gonna start at

00:25:51,740 --> 00:25:57,710
this point you know this is your usual

00:25:53,960 --> 00:25:59,780
if name equals main and this is so this

00:25:57,710 --> 00:26:02,350
is the code that's run when you when you

00:25:59,780 --> 00:26:06,110
point your Python interpreter at it and

00:26:02,350 --> 00:26:13,700
what it's doing is there's a couple of

00:26:06,110 --> 00:26:17,660
lines one two three four five and one

00:26:13,700 --> 00:26:22,190
more here that's that's concerned about

00:26:17,660 --> 00:26:25,130
configuring our pyramid app so the thing

00:26:22,190 --> 00:26:27,950
is we pyramid has this concept of a

00:26:25,130 --> 00:26:30,890
configurator which you use to configure

00:26:27,950 --> 00:26:33,200
different parts of your application for

00:26:30,890 --> 00:26:35,450
example you're gonna say you're gonna

00:26:33,200 --> 00:26:40,850
use this config object to say this these

00:26:35,450 --> 00:26:43,340
are my views or say this is where my

00:26:40,850 --> 00:26:46,250
static files are please serve them from

00:26:43,340 --> 00:26:50,690
here or you're gonna say this is how I

00:26:46,250 --> 00:26:54,860
want to authenticate my users or you

00:26:50,690 --> 00:26:57,500
know things like this will all touch the

00:26:54,860 --> 00:27:00,530
configurator and a configurator is what

00:26:57,500 --> 00:27:05,440
then in the end after we've done all our

00:27:00,530 --> 00:27:09,170
configuration is used to you know create

00:27:05,440 --> 00:27:13,550
whisky app which is at this line and

00:27:09,170 --> 00:27:14,660
then we were just using the I think the

00:27:13,550 --> 00:27:17,660
whisky raft

00:27:14,660 --> 00:27:19,880
to serve our application so this config

00:27:17,660 --> 00:27:21,950
object is essential we

00:27:19,880 --> 00:27:23,960
we're using it mostly I mean we're gonna

00:27:21,950 --> 00:27:26,809
use it in start-up code to configure our

00:27:23,960 --> 00:27:32,510
application typically reading from a

00:27:26,809 --> 00:27:36,070
configuration file some things and then

00:27:32,510 --> 00:27:38,929
setting up all our views so this is I

00:27:36,070 --> 00:27:46,280
think this is like the app object in in

00:27:38,929 --> 00:27:51,380
flask or so so what are we doing here

00:27:46,280 --> 00:27:53,750
concretely we have here we instantiate

00:27:51,380 --> 00:27:59,360
in it of course here we're doing an ad

00:27:53,750 --> 00:28:02,990
route which is we're saying we wanna we

00:27:59,360 --> 00:28:05,840
want to add a route with the name hello

00:28:02,990 --> 00:28:12,380
and then we say this is the pattern that

00:28:05,840 --> 00:28:14,030
our routes should use the way it is I'm

00:28:12,380 --> 00:28:16,370
in the pattern you can you can

00:28:14,030 --> 00:28:20,870
understand there is a dynamic part in

00:28:16,370 --> 00:28:26,840
the pattern which is curly brackets name

00:28:20,870 --> 00:28:29,150
and first part is the static part the

00:28:26,840 --> 00:28:31,280
trick being that name is as you would

00:28:29,150 --> 00:28:35,360
expect maybe if you've worked with other

00:28:31,280 --> 00:28:38,929
web frameworks or routes the name is

00:28:35,360 --> 00:28:40,580
what's passed to your since it's

00:28:38,929 --> 00:28:43,100
interesting for your view it's gonna be

00:28:40,580 --> 00:28:47,780
passed to the view and then you can ask

00:28:43,100 --> 00:28:50,570
for the name to find out what that value

00:28:47,780 --> 00:28:57,169
was so basically this is how we are able

00:28:50,570 --> 00:28:59,960
to in this example in this view we're

00:28:57,169 --> 00:29:02,539
able to read the bar and we're gonna

00:28:59,960 --> 00:29:05,750
look at that more in more detail in a

00:29:02,539 --> 00:29:08,780
second a route always I mean there's

00:29:05,750 --> 00:29:13,340
these two come in and in pairs a view

00:29:08,780 --> 00:29:15,320
and a route so here we're saying we're

00:29:13,340 --> 00:29:17,360
adding a view which is actually where

00:29:15,320 --> 00:29:20,570
our function comes in when we render our

00:29:17,360 --> 00:29:23,870
HTML this might be first a little bit

00:29:20,570 --> 00:29:25,640
confusing but we need two statements

00:29:23,870 --> 00:29:30,860
here what we're doing is we're

00:29:25,640 --> 00:29:32,990
connecting our route by name so this is

00:29:30,860 --> 00:29:35,960
the one that we just configured up there

00:29:32,990 --> 00:29:38,690
and we're saying we want to use this

00:29:35,960 --> 00:29:41,809
view the hello underscore world view

00:29:38,690 --> 00:29:45,470
with this root right so we need these

00:29:41,809 --> 00:29:47,480
two configurations to set up our view

00:29:45,470 --> 00:29:51,440
and make it available through the web

00:29:47,480 --> 00:29:53,750
and what's a view of you in this case is

00:29:51,440 --> 00:29:56,390
a function so this at this point I'm

00:29:53,750 --> 00:30:00,670
going to jump up to the hello world so

00:29:56,390 --> 00:30:04,250
we can see how this thing looks like and

00:30:00,670 --> 00:30:07,490
as you would expect there is a there is

00:30:04,250 --> 00:30:09,770
a function it takes a request and it

00:30:07,490 --> 00:30:12,800
returns a response this is a very

00:30:09,770 --> 00:30:18,470
minimal example that you should be able

00:30:12,800 --> 00:30:21,380
to understand easily so the request

00:30:18,470 --> 00:30:25,520
object as you would expect has all say

00:30:21,380 --> 00:30:28,520
query parameters it has all whiskey

00:30:25,520 --> 00:30:32,090
environment it has it has something

00:30:28,520 --> 00:30:36,200
called matchstick which is how we can

00:30:32,090 --> 00:30:39,140
access the the name part the dynamic

00:30:36,200 --> 00:30:44,950
part which you can see here inside our

00:30:39,140 --> 00:30:50,660
view implementation so the idea is that

00:30:44,950 --> 00:30:52,460
request has the query information in

00:30:50,660 --> 00:30:54,650
we're gonna see that later there's

00:30:52,460 --> 00:30:57,050
request dot params to get the query

00:30:54,650 --> 00:30:58,340
parameters there is requested match

00:30:57,050 --> 00:31:01,190
ticket which is a dict

00:30:58,340 --> 00:31:05,720
of you know names that we have in our

00:31:01,190 --> 00:31:09,440
root definition mapped to values that

00:31:05,720 --> 00:31:12,620
were matched so what you have here is

00:31:09,440 --> 00:31:14,720
saying hello name and since this

00:31:12,620 --> 00:31:17,480
right-hand side request that match stick

00:31:14,720 --> 00:31:21,280
is a dict we can use it with modulo

00:31:17,480 --> 00:31:26,470
operator and it's gonna fill in the name

00:31:21,280 --> 00:31:26,470
into the into the hello string

00:31:29,740 --> 00:31:40,929
so as you would expect you can change

00:31:37,460 --> 00:31:45,910
the value of the name and it's going to

00:31:40,929 --> 00:31:45,910
get it from the request dot matchstick

00:31:56,669 --> 00:32:03,659
there is another view that we register

00:31:59,340 --> 00:32:07,139
further down I would maybe let's let's

00:32:03,659 --> 00:32:09,239
go through this together and not read

00:32:07,139 --> 00:32:13,919
the text so much I think maybe it's it's

00:32:09,239 --> 00:32:16,169
it's easier that way but so now we have

00:32:13,919 --> 00:32:18,809
another pair of these add Ruth and add

00:32:16,169 --> 00:32:21,090
view and we're basically doing the same

00:32:18,809 --> 00:32:23,970
thing now we have a different pattern

00:32:21,090 --> 00:32:27,989
it's called slash Jason slash name and

00:32:23,970 --> 00:32:31,309
the name of the root as before and here

00:32:27,989 --> 00:32:33,899
we have to add view as before with the

00:32:31,309 --> 00:32:35,899
exception that we are passing another

00:32:33,899 --> 00:32:39,230
argument to this add view which is

00:32:35,899 --> 00:32:42,359
renderer equals Jason

00:32:39,230 --> 00:32:46,619
so pyramid has this concept of a

00:32:42,359 --> 00:32:48,590
renderer where as you've seen in the

00:32:46,619 --> 00:32:53,340
hello world example that were directly

00:32:48,590 --> 00:32:56,309
from this is a this is a web of response

00:32:53,340 --> 00:32:59,460
object that we're returning but we may

00:32:56,309 --> 00:33:04,169
also in our views not return a response

00:32:59,460 --> 00:33:08,009
but but a dictionary so that means this

00:33:04,169 --> 00:33:10,499
way we can uncouple the the values that

00:33:08,009 --> 00:33:13,049
the view producers from whatever way

00:33:10,499 --> 00:33:16,559
it's going to be rendered or delivered

00:33:13,049 --> 00:33:18,389
back to the client so that means that we

00:33:16,559 --> 00:33:21,210
can basically switch out say the

00:33:18,389 --> 00:33:23,159
templates or we can switch out you know

00:33:21,210 --> 00:33:26,309
the format is going to be Jason is it

00:33:23,159 --> 00:33:29,399
going to be XML something simply by

00:33:26,309 --> 00:33:31,259
changing our configuration and not by we

00:33:29,399 --> 00:33:33,210
don't need to touch the view code for

00:33:31,259 --> 00:33:37,039
that so that's what the renderer is for

00:33:33,210 --> 00:33:40,019
and it's it's what we're going to use

00:33:37,039 --> 00:33:42,090
further down sometimes it's just more

00:33:40,019 --> 00:33:45,989
convenient and sometimes you'll just

00:33:42,090 --> 00:33:47,970
return a response anyway in your view in

00:33:45,989 --> 00:33:49,379
situations where for example you you

00:33:47,970 --> 00:33:53,309
want to redirect to somewhere else

00:33:49,379 --> 00:33:56,309
you're going to return a response that's

00:33:53,309 --> 00:33:59,359
called HTTP found and that's still

00:33:56,309 --> 00:34:01,799
possible with views that have a renderer

00:33:59,359 --> 00:34:04,080
so this is going to in this case if you

00:34:01,799 --> 00:34:05,879
return a response object it's going to

00:34:04,080 --> 00:34:09,679
overwrite the renderer but if you're

00:34:05,879 --> 00:34:09,679
gonna return a dick

00:34:09,980 --> 00:34:15,990
it's going to use your renderer and in

00:34:13,080 --> 00:34:19,610
this case the renderer was called Jason

00:34:15,990 --> 00:34:24,680
so what that means is that it's going to

00:34:19,610 --> 00:34:28,500
render your dick that you pass to the

00:34:24,680 --> 00:34:31,320
that you returned from your view as a as

00:34:28,500 --> 00:34:33,540
a JSON response you can see that I'm

00:34:31,320 --> 00:34:35,910
returning requested match sticked here

00:34:33,540 --> 00:34:39,260
which is as we discussed the match stick

00:34:35,910 --> 00:34:46,890
which has available the keys and values

00:34:39,260 --> 00:34:49,020
from you know from this route so in its

00:34:46,890 --> 00:34:52,950
match match stick we expect if we say

00:34:49,020 --> 00:34:56,120
hello or the /world we expect the match

00:34:52,950 --> 00:34:58,110
stick to have two map name to world

00:34:56,120 --> 00:35:00,840
sorry and this is what you're going to

00:34:58,110 --> 00:35:04,470
see gonna see if you go to to the hello

00:35:00,840 --> 00:35:09,120
Jason so what I would like you to do now

00:35:04,470 --> 00:35:12,810
is is open up the the page and try out

00:35:09,120 --> 00:35:17,480
this this route here and see what you

00:35:12,810 --> 00:35:22,170
get back instead of hello we're going to

00:35:17,480 --> 00:35:26,040
type you know Jason and then maybe euro

00:35:22,170 --> 00:35:29,570
Python and this is a JSON response right

00:35:26,040 --> 00:35:31,890
and this is exactly the match ticket

00:35:29,570 --> 00:35:35,910
when you look into the response you can

00:35:31,890 --> 00:35:38,850
see that it has the correct content type

00:35:35,910 --> 00:35:43,950
set and everything for you so this way

00:35:38,850 --> 00:35:48,350
we don't need to have a adjacent dump in

00:35:43,950 --> 00:35:51,150
our view we can we can be more dynamic

00:35:48,350 --> 00:35:57,570
we can be more flexible our view could

00:35:51,150 --> 00:36:07,290
be you know serving different clients or

00:35:57,570 --> 00:36:08,490
something you get the idea right so this

00:36:07,290 --> 00:36:09,810
stuff down here isn't terribly

00:36:08,490 --> 00:36:12,180
interesting this is using a standard

00:36:09,810 --> 00:36:15,420
library whiskey ref to to serve the app

00:36:12,180 --> 00:36:19,590
but normally in in bigger applications

00:36:15,420 --> 00:36:21,300
you would use typically paste deploy and

00:36:19,590 --> 00:36:22,960
we're gonna use that in in the following

00:36:21,300 --> 00:36:29,900
examples

00:36:22,960 --> 00:36:38,180
so is that you guys have the example

00:36:29,900 --> 00:36:41,240
working okay great so this is where

00:36:38,180 --> 00:36:49,930
we're getting some logging from whiskey

00:36:41,240 --> 00:36:58,520
Rev all right so let's switching to the

00:36:49,930 --> 00:37:04,720
the second example what you're gonna see

00:36:58,520 --> 00:37:08,510
here is this is a this is a complete a

00:37:04,720 --> 00:37:10,850
Python distribution so the second

00:37:08,510 --> 00:37:13,280
example is already like packaged up

00:37:10,850 --> 00:37:16,210
nicely so that you can you could for

00:37:13,280 --> 00:37:18,890
example upload it to your server and to

00:37:16,210 --> 00:37:21,620
deploy it nicely and and and you know

00:37:18,890 --> 00:37:26,120
upload it to the tea shop maybe or

00:37:21,620 --> 00:37:32,390
something so this is this is the product

00:37:26,120 --> 00:37:35,090
of running using pyramid scaffolds to

00:37:32,390 --> 00:37:37,880
create a starter code for your project

00:37:35,090 --> 00:37:39,380
so the idea being that when you start a

00:37:37,880 --> 00:37:42,590
new project you don't want to write

00:37:39,380 --> 00:37:45,590
every bit of the code the bootstrapping

00:37:42,590 --> 00:37:47,630
code it's it's done for you there's a

00:37:45,590 --> 00:37:52,420
couple of different profiles to start

00:37:47,630 --> 00:37:58,820
with okay so pyramid itself in the core

00:37:52,420 --> 00:38:03,050
has back here at the at the prompt at

00:37:58,820 --> 00:38:11,750
the shell I can say bin or is it pre

00:38:03,050 --> 00:38:15,190
create right let me see so this is the

00:38:11,750 --> 00:38:18,200
templates that a pyramid comes with

00:38:15,190 --> 00:38:20,840
there is a I guess a neutral pyramid

00:38:18,200 --> 00:38:21,350
starter project there is one scaffold

00:38:20,840 --> 00:38:24,680
called

00:38:21,350 --> 00:38:27,650
alchemy and once careful called Zod B

00:38:24,680 --> 00:38:29,390
and these are two flavors basically to

00:38:27,650 --> 00:38:34,580
start your project with or to use

00:38:29,390 --> 00:38:36,140
pyramid with the alchemy one yeah just

00:38:34,580 --> 00:38:38,930
as it says using particular

00:38:36,140 --> 00:38:41,540
coming for persistence and is using ul

00:38:38,930 --> 00:38:44,300
dispatch you know dispatch is what we've

00:38:41,540 --> 00:38:46,880
seen in the previous example this ad

00:38:44,300 --> 00:38:52,310
view and a drought I mean the routing is

00:38:46,880 --> 00:38:54,590
called dispatch in pyramid and the Geo

00:38:52,310 --> 00:38:57,200
DB scaffold is the one that we're going

00:38:54,590 --> 00:38:58,280
to use to build our application and it

00:38:57,200 --> 00:39:00,140
uses something

00:38:58,280 --> 00:39:01,880
I mean uses the CDP for persistence

00:39:00,140 --> 00:39:03,980
which is an object database that we're

00:39:01,880 --> 00:39:07,940
going to look at in in a minute

00:39:03,980 --> 00:39:10,040
and it uses something called traversal

00:39:07,940 --> 00:39:14,030
which is another concept of pyramid and

00:39:10,040 --> 00:39:16,520
which is in my opinion one of the big

00:39:14,030 --> 00:39:18,590
strengths of pyramid so this is what I

00:39:16,520 --> 00:39:22,400
want to show you because this is a

00:39:18,590 --> 00:39:26,180
feature that really is different to

00:39:22,400 --> 00:39:31,790
other web applications maybe frameworks

00:39:26,180 --> 00:39:35,380
I mean so what we do at the command to

00:39:31,790 --> 00:39:38,090
create a new project with pyramid is and

00:39:35,380 --> 00:39:42,290
please don't actually run the command

00:39:38,090 --> 00:39:45,890
because you know or you can run the run

00:39:42,290 --> 00:39:48,440
the command with with a random name you

00:39:45,890 --> 00:39:52,010
know so what I did was I ran this

00:39:48,440 --> 00:39:55,490
command I'm using the said ODB template

00:39:52,010 --> 00:39:58,250
to quicks quickly start my my project

00:39:55,490 --> 00:40:01,790
project and then it creates a folder for

00:39:58,250 --> 00:40:03,740
me and you know it's going to put a lot

00:40:01,790 --> 00:40:05,420
of files that I would otherwise have to

00:40:03,740 --> 00:40:07,370
copy from another project maybe that

00:40:05,420 --> 00:40:12,350
I've worked with or I have to write my

00:40:07,370 --> 00:40:14,240
own so this is what I did in the x2

00:40:12,350 --> 00:40:16,610
folder and this is what the x2 folder

00:40:14,240 --> 00:40:19,070
contains now it is it's actually all the

00:40:16,610 --> 00:40:22,040
files that are contained in a scaffold

00:40:19,070 --> 00:40:24,980
so there's no custom code in the in the

00:40:22,040 --> 00:40:26,720
second step the second step being the X

00:40:24,980 --> 00:40:30,460
twofold all right so let's have a look

00:40:26,720 --> 00:40:34,460
at the x2 folder and we're going to see

00:40:30,460 --> 00:40:42,260
what it contains as files and then move

00:40:34,460 --> 00:40:44,570
on from there so as I said a pyramid has

00:40:42,260 --> 00:40:47,900
a few persistence options when a sequel

00:40:44,570 --> 00:40:49,750
alchemy as you saw said ODB but there is

00:40:47,900 --> 00:40:53,170
also a way

00:40:49,750 --> 00:40:57,800
in the pyramid cookbook on the pyramid

00:40:53,170 --> 00:41:00,710
website you can find examples on how to

00:40:57,800 --> 00:41:03,890
hook up CouchDB or MongoDB with pyramid

00:41:00,710 --> 00:41:06,950
and it's all really simple because it

00:41:03,890 --> 00:41:10,520
was built with with this kind of plug

00:41:06,950 --> 00:41:12,050
ability in mind the said ODB is what

00:41:10,520 --> 00:41:12,830
we're going to look at as for

00:41:12,050 --> 00:41:15,410
persistence

00:41:12,830 --> 00:41:18,080
it's from from its website the celery B

00:41:15,410 --> 00:41:20,210
is a native object database that stores

00:41:18,080 --> 00:41:22,310
your objects while allowing you to work

00:41:20,210 --> 00:41:26,900
with any paradigms that can be expressed

00:41:22,310 --> 00:41:28,849
in Python the big advantage of working

00:41:26,900 --> 00:41:31,580
with steadily being my opinion is that

00:41:28,849 --> 00:41:34,010
there is no gap between the database and

00:41:31,580 --> 00:41:36,230
the program there is no glue code to

00:41:34,010 --> 00:41:38,119
write no mappings to configure right so

00:41:36,230 --> 00:41:40,790
as you would usually have some kind of

00:41:38,119 --> 00:41:43,670
or RM object or some some way to glue

00:41:40,790 --> 00:41:45,859
together your database and your Python

00:41:43,670 --> 00:41:48,099
application with the said ODB there is

00:41:45,859 --> 00:41:50,750
native support for Python objects

00:41:48,099 --> 00:41:53,599
basically this is implemented using the

00:41:50,750 --> 00:41:56,410
the big thing the Python pickling and so

00:41:53,599 --> 00:42:03,140
that means that you will have you know

00:41:56,410 --> 00:42:06,020
it's almost a hundred percent pure

00:42:03,140 --> 00:42:10,420
Python classes that you're going to use

00:42:06,020 --> 00:42:14,000
to and no strings attached basically to

00:42:10,420 --> 00:42:19,940
to store your application objects your

00:42:14,000 --> 00:42:22,130
model objects so this is the PI I don't

00:42:19,940 --> 00:42:24,710
know how much you know about Python

00:42:22,130 --> 00:42:26,359
distributions but you know if you know

00:42:24,710 --> 00:42:28,609
about this this is not going to be very

00:42:26,359 --> 00:42:34,690
exciting for you we have a set of Pi

00:42:28,609 --> 00:42:37,820
file that setup I file will list the

00:42:34,690 --> 00:42:39,859
dependencies again this is already done

00:42:37,820 --> 00:42:42,619
by the scaffold I haven't done any

00:42:39,859 --> 00:42:44,930
changes to this and we can use the setup

00:42:42,619 --> 00:42:47,750
pie file to install into our virtual

00:42:44,930 --> 00:42:49,220
environment this x2 project so what

00:42:47,750 --> 00:42:51,800
we're going to do is for each project

00:42:49,220 --> 00:42:55,270
we're going to need to set it up to be

00:42:51,800 --> 00:43:00,580
able to run it ok so what does that mean

00:42:55,270 --> 00:43:04,320
that means that you will have to

00:43:00,580 --> 00:43:07,060
change directory into the X to a folder

00:43:04,320 --> 00:43:14,320
so this is where you will have the setup

00:43:07,060 --> 00:43:16,810
PI file and then you'll need to run with

00:43:14,320 --> 00:43:18,820
your I mean again either you already

00:43:16,810 --> 00:43:21,160
activated your Python or you will need

00:43:18,820 --> 00:43:24,310
to point to the Python interpreter

00:43:21,160 --> 00:43:27,010
inside your virtual and so in my case

00:43:24,310 --> 00:43:28,750
it's actually important that you CD into

00:43:27,010 --> 00:43:31,030
the directory otherwise setup is going

00:43:28,750 --> 00:43:34,690
to fail so you need to from this

00:43:31,030 --> 00:43:36,490
directory in my case I need to go up so

00:43:34,690 --> 00:43:40,450
if you're not using activate unities use

00:43:36,490 --> 00:43:43,510
dot slash bin python 2.2 the virtual M's

00:43:40,450 --> 00:43:45,310
Python and then do set up PI develop

00:43:43,510 --> 00:43:49,210
which is the command that we're going to

00:43:45,310 --> 00:43:51,700
use to install this example into our

00:43:49,210 --> 00:43:55,030
virtual environment so that we can run

00:43:51,700 --> 00:43:56,380
it and once you run this for me it's

00:43:55,030 --> 00:44:01,150
going to be quicker than for you because

00:43:56,380 --> 00:44:04,900
you're going to install these additional

00:44:01,150 --> 00:44:07,450
dependencies that pyramid that pyramid

00:44:04,900 --> 00:44:10,930
core doesn't depend on right but notice

00:44:07,450 --> 00:44:14,550
that we have things like pyramid debug

00:44:10,930 --> 00:44:18,930
toolbar or C ODB con which is a

00:44:14,550 --> 00:44:23,530
convenience for using this utterly B and

00:44:18,930 --> 00:44:26,140
C ODB package itself and this is going

00:44:23,530 --> 00:44:29,830
to be download and hopefully compiled

00:44:26,140 --> 00:44:32,109
and ready for you so once you've you've

00:44:29,830 --> 00:44:36,150
run this you should get something is

00:44:32,109 --> 00:44:36,150
some some output similar to this and

00:44:36,630 --> 00:44:41,800
more concretely you should be able to

00:44:39,390 --> 00:44:43,900
using your interpreter you should be

00:44:41,800 --> 00:44:52,210
able to import the packages let's say

00:44:43,900 --> 00:44:57,260
we're going to try and what we have we

00:44:52,210 --> 00:45:02,540
just I guess we installed it

00:44:57,260 --> 00:45:03,980
all right this is imports said earlier

00:45:02,540 --> 00:45:05,660
you should be able to do an hour in your

00:45:03,980 --> 00:45:11,680
virtual environment and not get an

00:45:05,660 --> 00:45:15,880
import error all right

00:45:11,680 --> 00:45:23,030
is that working or still downloading or

00:45:15,880 --> 00:45:24,530
downloading alright so while we while

00:45:23,030 --> 00:45:26,090
we're downloading this and we're going

00:45:24,530 --> 00:45:27,890
to be able to use this virtual

00:45:26,090 --> 00:45:29,900
environment in the container in the next

00:45:27,890 --> 00:45:31,730
few examples so we're not gonna be need

00:45:29,900 --> 00:45:32,210
to download this one again so that's

00:45:31,730 --> 00:45:36,410
nice

00:45:32,210 --> 00:45:38,740
Oh while we do this while we're waiting

00:45:36,410 --> 00:45:42,080
let's look a little bit more at this

00:45:38,740 --> 00:45:44,690
structure of what what pyramid set up

00:45:42,080 --> 00:45:48,770
for us so this changes file it's just

00:45:44,690 --> 00:45:50,810
you know your change log the - any files

00:45:48,770 --> 00:45:52,670
here development and production there

00:45:50,810 --> 00:45:55,940
are two configurations files for your

00:45:52,670 --> 00:45:58,280
pyramid application and as they suggest

00:45:55,940 --> 00:46:00,010
one is for more appropriate for a

00:45:58,280 --> 00:46:04,690
development environment where you have

00:46:00,010 --> 00:46:07,040
debugging tools installed one is more

00:46:04,690 --> 00:46:09,080
appropriate for production environment

00:46:07,040 --> 00:46:16,340
where you're not gonna use debugging

00:46:09,080 --> 00:46:19,250
tools that are potentially insecure so

00:46:16,340 --> 00:46:23,450
looking at development in e what we see

00:46:19,250 --> 00:46:31,070
here is the most interesting section is

00:46:23,450 --> 00:46:33,260
the AB main section which is this is

00:46:31,070 --> 00:46:35,510
pace deploy I don't know have you worked

00:46:33,260 --> 00:46:37,930
with pace deploy the configuration files

00:46:35,510 --> 00:46:40,910
like this before

00:46:37,930 --> 00:46:45,920
so basically there is a command called P

00:46:40,910 --> 00:46:49,760
serve it used to be paster serve but now

00:46:45,920 --> 00:46:51,560
it's called pizza because of there's

00:46:49,760 --> 00:46:56,750
been new software to replace the old one

00:46:51,560 --> 00:46:59,869
basically mmm and what p surf does is it

00:46:56,750 --> 00:47:03,340
it reads this file and it this is where

00:46:59,869 --> 00:47:07,280
it finds out how to import your

00:47:03,340 --> 00:47:08,690
application and how to run it and how to

00:47:07,280 --> 00:47:12,310
configure it

00:47:08,690 --> 00:47:15,770
and so we have a couple of development

00:47:12,310 --> 00:47:18,950
related settings here you know reload

00:47:15,770 --> 00:47:21,050
templates debug authorization this is

00:47:18,950 --> 00:47:23,240
stuff that you don't want to put on in

00:47:21,050 --> 00:47:26,540
in production but you want to see in

00:47:23,240 --> 00:47:29,180
development there's a couple of debug

00:47:26,540 --> 00:47:31,369
flags here the pyramid includes is

00:47:29,180 --> 00:47:35,060
interesting because it this is where we

00:47:31,369 --> 00:47:37,190
connect from different applications so

00:47:35,060 --> 00:47:39,380
these are basically like the blueprints

00:47:37,190 --> 00:47:42,230
in flask if you know these what we're

00:47:39,380 --> 00:47:44,960
doing here is where we're depending on

00:47:42,230 --> 00:47:46,910
pyramid debug toolbar say in our setup

00:47:44,960 --> 00:47:48,589
pipe but we still need to activate it in

00:47:46,910 --> 00:47:50,900
our application right so that's two

00:47:48,589 --> 00:47:53,180
different things one is installing a

00:47:50,900 --> 00:47:57,890
package into your environment or into

00:47:53,180 --> 00:47:59,960
your system the other is activating so

00:47:57,890 --> 00:48:02,420
that it has actually any effect on your

00:47:59,960 --> 00:48:05,839
application right so this is the pyramid

00:48:02,420 --> 00:48:07,940
includes we have three packages that we

00:48:05,839 --> 00:48:10,790
want to include so that they can do

00:48:07,940 --> 00:48:14,030
their job and help us build our

00:48:10,790 --> 00:48:17,210
application and once you you know if

00:48:14,030 --> 00:48:19,040
you're using different modules or

00:48:17,210 --> 00:48:22,819
different extensions this is also where

00:48:19,040 --> 00:48:28,810
you need to put them to to be able to

00:48:22,819 --> 00:48:28,810
use them is it slow or

00:48:32,400 --> 00:48:45,999
with a mock package it seems the okay so

00:48:40,509 --> 00:48:48,569
the mock huh let's see I get five zero

00:48:45,999 --> 00:48:57,880
three service unavailable

00:48:48,569 --> 00:49:00,069
we are bashing him maybe yeah so with

00:48:57,880 --> 00:49:03,249
mock you might be able to just point him

00:49:00,069 --> 00:49:05,910
at maybe he has a limit on the

00:49:03,249 --> 00:49:11,430
concurrent connection I don't know it

00:49:05,910 --> 00:49:14,229
yeah don't know D so here you can also

00:49:11,430 --> 00:49:16,809
say you know using again the people of

00:49:14,229 --> 00:49:19,359
your virtual environment you might be

00:49:16,809 --> 00:49:22,660
able to say something like directly

00:49:19,359 --> 00:49:26,880
pointed at the I copied this link from

00:49:22,660 --> 00:49:26,880
the PI P site here

00:49:32,240 --> 00:49:36,330
yeah they are forbearance trying to

00:49:34,740 --> 00:49:39,300
download right so it's probably trying

00:49:36,330 --> 00:49:41,880
to follow this link he could be yeah

00:49:39,300 --> 00:49:43,860
yeah that one right so what we can do is

00:49:41,880 --> 00:49:46,380
we can explicitly state that we're not

00:49:43,860 --> 00:49:48,210
interested in that version let's do this

00:49:46,380 --> 00:49:52,920
maybe by copying these names and

00:49:48,210 --> 00:49:54,960
pointing people at that version so what

00:49:52,920 --> 00:49:59,190
I do is I say pip install and then this

00:49:54,960 --> 00:50:03,080
guy and this is going to not look at the

00:49:59,190 --> 00:50:03,080
webpage and not follow any broken links

00:50:08,390 --> 00:50:21,540
sorry he's saying yeah we don't need to

00:50:18,780 --> 00:50:24,840
explicitly with people study is going to

00:50:21,540 --> 00:50:28,440
do the right thing just to Justin he pit

00:50:24,840 --> 00:50:30,210
stall mock right but the problem is

00:50:28,440 --> 00:50:32,490
people in some mock is going to look I

00:50:30,210 --> 00:50:33,900
thought the problem was that he got

00:50:32,490 --> 00:50:36,870
confused because he was following this

00:50:33,900 --> 00:50:38,580
link right normally you would just say

00:50:36,870 --> 00:50:41,970
people insult pyramid like we did before

00:50:38,580 --> 00:50:43,380
in this case we have to we're pointing

00:50:41,970 --> 00:50:45,480
to the download link directly because

00:50:43,380 --> 00:50:47,970
people gets confused because it follows

00:50:45,480 --> 00:50:50,100
a broken link apparently I think this is

00:50:47,970 --> 00:50:52,710
what's happening yeah right this link

00:50:50,100 --> 00:50:55,050
right so pip is trying to follow this

00:50:52,710 --> 00:50:58,410
link and then it breaks so what we do is

00:50:55,050 --> 00:50:59,990
we give an explicit URL we just take the

00:50:58,410 --> 00:51:02,340
release from down there and ignore

00:50:59,990 --> 00:51:04,980
everything else like you can copy the

00:51:02,340 --> 00:51:14,490
link to this file and then just pip

00:51:04,980 --> 00:51:16,730
install this URL yeah like this zero

00:51:14,490 --> 00:51:16,730
eight zero

00:51:19,500 --> 00:51:21,680
maybe

00:51:27,790 --> 00:51:41,390
we didn't use the people just point him

00:51:37,100 --> 00:51:43,010
at the UL okay because he's not gonna be

00:51:41,390 --> 00:51:44,750
able to otherwise figure out he's going

00:51:43,010 --> 00:51:46,940
to visit that page and maybe he's going

00:51:44,750 --> 00:51:49,340
to crawl even the broken link even if

00:51:46,940 --> 00:51:52,910
you give him the so let's if you have

00:51:49,340 --> 00:51:55,580
this problem just you know just point

00:51:52,910 --> 00:51:58,130
him at this one it's gonna hopefully

00:51:55,580 --> 00:52:02,750
just work like it did for me just now

00:51:58,130 --> 00:52:06,470
look this is pretty quick yeah it seems

00:52:02,750 --> 00:52:09,500
the Python setup I developer is trying

00:52:06,470 --> 00:52:12,710
to download the newest version the mock

00:52:09,500 --> 00:52:18,410
newest version while peepin stall is a

00:52:12,710 --> 00:52:23,900
stalling the 0.8 this one is it that way

00:52:18,410 --> 00:52:26,230
yeah alright okay sorry I didn't didn't

00:52:23,900 --> 00:52:26,230
get that

00:52:33,390 --> 00:52:36,540
all right

00:52:41,920 --> 00:52:46,119
so where were we

00:52:53,460 --> 00:52:58,290
so what we have here is some two more

00:52:56,609 --> 00:53:01,710
configuration options and these are

00:52:58,290 --> 00:53:08,520
actually Zod be specific the one is

00:53:01,710 --> 00:53:11,609
saying the 20 the number of transaction

00:53:08,520 --> 00:53:14,550
retry attempts because see a DB has this

00:53:11,609 --> 00:53:18,270
thing where it may run into conflicts

00:53:14,550 --> 00:53:20,309
with other a request so your request

00:53:18,270 --> 00:53:23,839
might try to write the same object as

00:53:20,309 --> 00:53:26,460
another one at the same time so this is

00:53:23,839 --> 00:53:29,160
what Co DB does in this case it's gonna

00:53:26,460 --> 00:53:30,780
retry and this is your connection URI so

00:53:29,160 --> 00:53:34,650
this is how you're gonna connect to your

00:53:30,780 --> 00:53:36,690
database in this in the case of sequel

00:53:34,650 --> 00:53:44,339
alchemy this is this is sequel alchemy

00:53:36,690 --> 00:53:51,000
URL or URI or no and then so once we

00:53:44,339 --> 00:53:54,780
have this guy installed in x2 we can go

00:53:51,000 --> 00:53:58,559
ahead and use the PA serve command and

00:53:54,780 --> 00:54:02,280
the development in e file this is a line

00:53:58,559 --> 00:54:06,390
break right there it should be one line

00:54:02,280 --> 00:54:10,920
I mean use the bin piece off to run

00:54:06,390 --> 00:54:13,920
development in E and it's going to start

00:54:10,920 --> 00:54:19,559
up your server and then you should be

00:54:13,920 --> 00:54:21,180
able to visit that address now note that

00:54:19,559 --> 00:54:24,859
it changed before you used to be eighty

00:54:21,180 --> 00:54:24,859
eighty nine eight six five four three

00:54:35,440 --> 00:54:41,190
okay this is what you should see yes

00:54:41,940 --> 00:54:51,760
it's complaining that what what about

00:54:49,359 --> 00:54:53,890
the installation did you get success

00:54:51,760 --> 00:54:57,430
message or do you get error messages

00:54:53,890 --> 00:54:59,680
maybe maybe the compilation of subtly B

00:54:57,430 --> 00:55:09,010
failed because if you don't have the

00:54:59,680 --> 00:55:11,890
Python deaf maybe the headers then it's

00:55:09,010 --> 00:55:13,900
going to fail or you don't have a C

00:55:11,890 --> 00:55:19,349
compiler installed then it's going to

00:55:13,900 --> 00:55:19,349
fail right

00:55:21,120 --> 00:55:24,710
did he see spa tiara

00:55:29,000 --> 00:55:37,870
and build essential there is a package

00:55:32,060 --> 00:55:40,250
that installs the C compiler okay

00:55:37,870 --> 00:55:53,810
alright so visit that page and you're

00:55:40,250 --> 00:55:58,250
gonna see this just the scaffold this

00:55:53,810 --> 00:56:02,750
one yes so this is just a continuation

00:55:58,250 --> 00:56:07,120
character here any continues there so

00:56:02,750 --> 00:56:10,520
this is one line just pin piece work

00:56:07,120 --> 00:56:11,630
space developer Nene and in a similar

00:56:10,520 --> 00:56:14,560
fashion of course you could use

00:56:11,630 --> 00:56:18,740
production you need to use your other

00:56:14,560 --> 00:56:21,290
profile so this is what we get from the

00:56:18,740 --> 00:56:24,080
scaffold and let's have a take a closer

00:56:21,290 --> 00:56:27,410
look at how this works we have our

00:56:24,080 --> 00:56:28,940
project divided into what static there

00:56:27,410 --> 00:56:32,600
is a static directory that has all the

00:56:28,940 --> 00:56:35,810
static resources you know like the icons

00:56:32,600 --> 00:56:37,760
and CSS there is a directory that has

00:56:35,810 --> 00:56:40,070
all the templates for our project this

00:56:37,760 --> 00:56:42,190
is how you would maybe normally divide

00:56:40,070 --> 00:56:46,010
your your project into different parts

00:56:42,190 --> 00:56:50,110
there's a templates there is models and

00:56:46,010 --> 00:56:52,790
there is views and then there is tests

00:56:50,110 --> 00:56:58,190
what we're going to look at first I

00:56:52,790 --> 00:57:02,240
think is the maybe the init which has

00:56:58,190 --> 00:57:04,220
the entry point into our whiskey so this

00:57:02,240 --> 00:57:08,300
is basically boilerplate that is going

00:57:04,220 --> 00:57:11,870
to you know use to configure it again

00:57:08,300 --> 00:57:14,600
but this time using a settings file and

00:57:11,870 --> 00:57:17,180
the one that we provided the development

00:57:14,600 --> 00:57:20,210
in e so the settings that are passed

00:57:17,180 --> 00:57:21,740
here to the Deaf main they are coming

00:57:20,210 --> 00:57:24,580
straight after out of the file and

00:57:21,740 --> 00:57:28,520
they're going to be available to us

00:57:24,580 --> 00:57:30,620
using you know something like request

00:57:28,520 --> 00:57:32,950
registry settings later on so in your

00:57:30,620 --> 00:57:35,450
application you can always access these

00:57:32,950 --> 00:57:38,960
the other thing that we do is we add

00:57:35,450 --> 00:57:41,210
static view which is how we are then

00:57:38,960 --> 00:57:42,619
able to serve these static files that

00:57:41,210 --> 00:57:45,529
you just saw so we have a set

00:57:42,619 --> 00:57:48,109
directory and we're registering it as a

00:57:45,529 --> 00:57:49,670
static so the name is the same as a

00:57:48,109 --> 00:57:53,329
directory that therefore we can access

00:57:49,670 --> 00:57:55,249
our static resources like so right if

00:57:53,329 --> 00:57:57,049
you're gonna try and open this URL you

00:57:55,249 --> 00:57:59,119
can see that this is actually mapping to

00:57:57,049 --> 00:58:04,549
the files that we have in a static

00:57:59,119 --> 00:58:07,460
directory we're using one thing that's

00:58:04,549 --> 00:58:10,549
called the root factory here that will

00:58:07,460 --> 00:58:14,299
need some explanation when we create the

00:58:10,549 --> 00:58:18,970
configurator we're passing the root

00:58:14,299 --> 00:58:23,299
factory this is kind of important for

00:58:18,970 --> 00:58:27,410
traversal which I'm going to talk about

00:58:23,299 --> 00:58:34,069
in a second actually let's talk about it

00:58:27,410 --> 00:58:36,380
now traversal is this thing that one of

00:58:34,069 --> 00:58:41,029
the things that makes pyramids special

00:58:36,380 --> 00:58:47,539
and it works like this traversal starts

00:58:41,029 --> 00:58:51,410
at the root and it will map the URLs

00:58:47,539 --> 00:58:53,599
what do we have it sorry yeah so what it

00:58:51,410 --> 00:58:56,930
does is it basically works like a file

00:58:53,599 --> 00:58:59,420
system where you have a root in your

00:58:56,930 --> 00:59:03,170
file system and then basically the the

00:58:59,420 --> 00:59:08,329
URLs are mapping into that file system

00:59:03,170 --> 00:59:10,489
so if you have a slash about you know

00:59:08,329 --> 00:59:15,200
slash index dot HTML then it's going to

00:59:10,489 --> 00:59:18,170
kind of go into that graph of objects

00:59:15,200 --> 00:59:22,400
that you have and then try to find that

00:59:18,170 --> 00:59:24,130
object so the idea being that you know

00:59:22,400 --> 00:59:27,670
here you can see a very simplified

00:59:24,130 --> 00:59:30,890
implementation of traversal so we have

00:59:27,670 --> 00:59:33,470
def traverse with a path and an object

00:59:30,890 --> 00:59:37,700
and the object would be maybe the root

00:59:33,470 --> 00:59:39,319
object of our application so that's what

00:59:37,700 --> 00:59:41,450
the root factor is for it-- it's

00:59:39,319 --> 00:59:46,400
responsibility is to provide a root

00:59:41,450 --> 00:59:48,619
object for our application may might be

00:59:46,400 --> 00:59:52,789
also different food objects depending on

00:59:48,619 --> 00:59:54,710
how you work and then given this root

00:59:52,789 --> 00:59:57,380
object and the path it's it's going to

00:59:54,710 --> 01:00:01,549
maybe split the path into segments and

00:59:57,380 --> 01:00:03,619
then use dict access to traverse from

01:00:01,549 --> 01:00:07,130
one object to the other so this is the

01:00:03,619 --> 01:00:10,069
essential line these traversable objects

01:00:07,130 --> 01:00:12,440
they all have on the gate item another

01:00:10,069 --> 01:00:15,970
and they will be able to like

01:00:12,440 --> 01:00:20,529
dictionaries right they will be able to

01:00:15,970 --> 01:00:26,960
provide you with the next child object

01:00:20,529 --> 01:00:30,739
so here is an example down here where we

01:00:26,960 --> 01:00:36,769
say the root is this dict so this is a

01:00:30,739 --> 01:00:39,019
dict nested three levels we have the

01:00:36,769 --> 01:00:41,900
root is that is the outer dick then we

01:00:39,019 --> 01:00:44,299
have files which is pointing to another

01:00:41,900 --> 01:00:46,400
dict then we have accounting which is

01:00:44,299 --> 01:00:49,299
pointing to another disk and so on and

01:00:46,400 --> 01:00:51,680
down here you can see how I can then

01:00:49,299 --> 01:00:54,950
traverse using my function at the top

01:00:51,680 --> 01:00:57,220
here traverse using the route object

01:00:54,950 --> 01:01:02,599
that I passes sobs

01:00:57,220 --> 01:01:05,029
and this path this is pretty easy stuff

01:01:02,599 --> 01:01:09,130
right but it turns out that it's very

01:01:05,029 --> 01:01:12,499
powerful for some web applications

01:01:09,130 --> 01:01:14,569
mm-hmm so it's really similar to how

01:01:12,499 --> 01:01:19,779
file system works and it's nicely

01:01:14,569 --> 01:01:25,119
mapping the slash the path segments to

01:01:19,779 --> 01:01:30,200
two objects into in your in your graph

01:01:25,119 --> 01:01:32,359
in your object 3 I mean so this is what

01:01:30,200 --> 01:01:38,710
the root Factory does let's take a quick

01:01:32,359 --> 01:01:38,710
look what the scaffold did for us there

01:01:46,320 --> 01:01:50,430
yep

01:01:47,560 --> 01:01:50,430
in the innit

01:01:52,020 --> 01:01:59,630
this this root Factory is calling

01:01:55,920 --> 01:02:04,730
another function that's in our models

01:01:59,630 --> 01:02:09,390
until the break thinks in our own models

01:02:04,730 --> 01:02:11,850
module and the app maker is as you can

01:02:09,390 --> 01:02:17,610
see here its responsibility is actually

01:02:11,850 --> 01:02:19,170
to return the root and it takes a co DB

01:02:17,610 --> 01:02:21,300
connection you don't actually need to

01:02:19,170 --> 01:02:23,880
understand all of this but the way it

01:02:21,300 --> 01:02:26,930
works is you get this connection the

01:02:23,880 --> 01:02:29,190
development in e remember it had this

01:02:26,930 --> 01:02:31,290
connection string so this is how we

01:02:29,190 --> 01:02:35,130
figure out where to connect our our

01:02:31,290 --> 01:02:39,750
database how to connect it and then we

01:02:35,130 --> 01:02:41,910
can call the app maker to return kind of

01:02:39,750 --> 01:02:44,870
our root object and let's take a closer

01:02:41,910 --> 01:02:47,730
look at this app maker what is it doing

01:02:44,870 --> 01:02:50,030
in our model spy file if you want to

01:02:47,730 --> 01:02:53,520
open that or just follow along here

01:02:50,030 --> 01:02:57,450
there is the app maker which takes now

01:02:53,520 --> 01:02:59,820
it's so DB root which is the the

01:02:57,450 --> 01:03:03,150
database root that we connected to so so

01:02:59,820 --> 01:03:07,860
DB also works with a with with a root

01:03:03,150 --> 01:03:10,560
object and basically so this is a an

01:03:07,860 --> 01:03:13,200
object where you can attach to it's a

01:03:10,560 --> 01:03:17,540
dictionary like and you'll be able to

01:03:13,200 --> 01:03:19,890
attach to it other objects and these are

01:03:17,540 --> 01:03:23,130
these objects are they are then

01:03:19,890 --> 01:03:25,920
persisted inside your so DB database so

01:03:23,130 --> 01:03:28,800
the way this persistence works is as

01:03:25,920 --> 01:03:33,600
soon as your objects have a connection

01:03:28,800 --> 01:03:35,460
in in the graph to the to your shadow DB

01:03:33,600 --> 01:03:37,170
root they're going to be persisted right

01:03:35,460 --> 01:03:40,230
this is basically all you have to know

01:03:37,170 --> 01:03:42,390
about said early persistence for now and

01:03:40,230 --> 01:03:44,610
what we're doing in this app maker is

01:03:42,390 --> 01:03:46,440
we're saying that if not approved in

01:03:44,610 --> 01:03:49,610
subtly B roots basically this object

01:03:46,440 --> 01:03:52,530
here is still missing it's not there

01:03:49,610 --> 01:03:56,400
we're going to create a root we're going

01:03:52,530 --> 01:03:57,570
to put it into our suddenly B and then

01:03:56,400 --> 01:04:01,050
we're going to commit the transaction

01:03:57,570 --> 01:04:03,330
and return that root object so what we

01:04:01,050 --> 01:04:05,670
return here in the end is an instance of

01:04:03,330 --> 01:04:07,920
my model and it depends on

01:04:05,670 --> 01:04:10,410
say if you already started this

01:04:07,920 --> 01:04:13,020
application once or not depending on

01:04:10,410 --> 01:04:16,339
this it's going to give you a a root

01:04:13,020 --> 01:04:18,780
object that that's what that was already

01:04:16,339 --> 01:04:20,520
retrieved from the database or it's

01:04:18,780 --> 01:04:23,010
going to create a new root object if

01:04:20,520 --> 01:04:25,710
we're working with a database it doesn't

01:04:23,010 --> 01:04:32,119
have this root object yet so our

01:04:25,710 --> 01:04:32,119
application root all right so hopefully

01:04:32,329 --> 01:04:40,380
this is this makes sense and what we

01:04:37,200 --> 01:04:47,040
have up there is our my model class

01:04:40,380 --> 01:04:49,640
which is which is this guy here right so

01:04:47,040 --> 01:04:51,630
what we're doing is we are we are

01:04:49,640 --> 01:04:55,890
inheriting from a class called

01:04:51,630 --> 01:04:59,220
persistent mapping and this is coming

01:04:55,890 --> 01:05:01,500
out of the shadow DB and this persistent

01:04:59,220 --> 01:05:07,020
mapping is basically a dictionary that's

01:05:01,500 --> 01:05:11,040
all you need to know about it why do we

01:05:07,020 --> 01:05:18,960
add all inherit from a class inherits

01:05:11,040 --> 01:05:20,730
from a persistent class it is because if

01:05:18,960 --> 01:05:23,880
we wouldn't do it at this I mean there's

01:05:20,730 --> 01:05:26,640
persistent classes and they will mutable

01:05:23,880 --> 01:05:29,069
when you change them the said ODB needs

01:05:26,640 --> 01:05:31,410
to be otherwise notified that you

01:05:29,069 --> 01:05:33,540
changed it the new mutable object with

01:05:31,410 --> 01:05:35,579
this persistent classes when you did

01:05:33,540 --> 01:05:38,010
derive from them there's going to be

01:05:35,579 --> 01:05:39,660
more convenient to work with them

01:05:38,010 --> 01:05:41,490
because you don't have to set the dirty

01:05:39,660 --> 01:05:44,569
flag basically when you're when you want

01:05:41,490 --> 01:05:47,160
this your changes to be saved otherwise

01:05:44,569 --> 01:05:49,049
so DB would be we would have no idea

01:05:47,160 --> 01:05:51,059
that you actually change your objects

01:05:49,049 --> 01:05:56,730
and that it would have to write them out

01:05:51,059 --> 01:06:00,420
again and so this is just a normal

01:05:56,730 --> 01:06:03,150
Python classes we said so DB and then we

01:06:00,420 --> 01:06:06,150
also have here up on the on the parent

01:06:03,150 --> 01:06:09,150
on the under and on the name on the

01:06:06,150 --> 01:06:11,930
under attribute which is two things two

01:06:09,150 --> 01:06:14,190
attributes that we're going to look at

01:06:11,930 --> 01:06:18,210
soon this is part of the eye location

01:06:14,190 --> 01:06:19,200
interface and we're going to see I think

01:06:18,210 --> 01:06:29,339
I don't have to actually

01:06:19,200 --> 01:06:30,839
speed up a little bit behind so for some

01:06:29,339 --> 01:06:33,420
it's going to be too slow or someone's

01:06:30,839 --> 01:06:39,390
going to be too fast right but that's

01:06:33,420 --> 01:06:43,140
how it is right so this is and then we

01:06:39,390 --> 01:06:45,900
switch to the views okay and so here

01:06:43,140 --> 01:06:48,030
we're actually using this time remember

01:06:45,900 --> 01:06:50,609
from the last hello pie example who are

01:06:48,030 --> 01:06:52,920
using config ad view this is an

01:06:50,609 --> 01:06:56,369
alternative way to register your views

01:06:52,920 --> 01:06:58,109
is using a decorator and and you might

01:06:56,369 --> 01:07:01,020
find this more convenient but it's just

01:06:58,109 --> 01:07:07,800
doing the equivalent thing actually not

01:07:01,020 --> 01:07:09,960
exactly but still and this view

01:07:07,800 --> 01:07:12,630
configuration remember the last one it

01:07:09,960 --> 01:07:15,000
was using a route but this one's using

01:07:12,630 --> 01:07:17,700
traversal right when you use traversal

01:07:15,000 --> 01:07:20,220
with this with this path segment a

01:07:17,700 --> 01:07:23,040
traversal thing then you'll have to

01:07:20,220 --> 01:07:25,619
register you view a little different

01:07:23,040 --> 01:07:27,839
there is also only a view config now

01:07:25,619 --> 01:07:30,210
which is equivalent to config ad view

01:07:27,839 --> 01:07:33,089
and no clunk wicked route anymore so

01:07:30,210 --> 01:07:36,480
this is not necessary for when you use

01:07:33,089 --> 01:07:39,089
traversal we only need one decorator or

01:07:36,480 --> 01:07:41,490
one function call in this case and what

01:07:39,089 --> 01:07:43,619
we do here is we'll pass again a

01:07:41,490 --> 01:07:44,940
renderer and this time this is

01:07:43,619 --> 01:07:46,440
interesting because we're passing a

01:07:44,940 --> 01:07:48,780
renderer that's that's pointing to a

01:07:46,440 --> 01:07:50,880
template so this way pyramid knows it

01:07:48,780 --> 01:07:54,569
should use this template to render this

01:07:50,880 --> 01:07:56,280
view okay in this template again just

01:07:54,569 --> 01:08:01,109
like with the JSON example we will have

01:07:56,280 --> 01:08:02,940
available the the dictionary that the

01:08:01,109 --> 01:08:04,410
view returns so the view returns the

01:08:02,940 --> 01:08:06,780
dictionary the template gets the

01:08:04,410 --> 01:08:09,420
dictionary it may use the values of the

01:08:06,780 --> 01:08:13,890
dictionary to fill in portions of the

01:08:09,420 --> 01:08:16,109
dynamic portions of the page here we're

01:08:13,890 --> 01:08:19,080
registering this view for a context and

01:08:16,109 --> 01:08:22,890
that's pretty important because what

01:08:19,080 --> 01:08:25,500
this does is it tells us if if pyramid

01:08:22,890 --> 01:08:29,339
goes through our application and it

01:08:25,500 --> 01:08:32,779
finds an object that matches the URL say

01:08:29,339 --> 01:08:48,710
in our example

01:08:32,779 --> 01:08:51,630
where was this readme was it alright so

01:08:48,710 --> 01:08:54,450
imagine that it reverses to a given

01:08:51,630 --> 01:08:56,190
object and this might be a my model

01:08:54,450 --> 01:08:59,190
object or any other model that you have

01:08:56,190 --> 01:09:01,200
and then it says okay now that I've

01:08:59,190 --> 01:09:03,510
found a my model object how do I find

01:09:01,200 --> 01:09:06,680
the view to present this object to the

01:09:03,510 --> 01:09:09,630
say user to the browser or how do i

01:09:06,680 --> 01:09:17,279
which view to use is the question and

01:09:09,630 --> 01:09:20,310
the answer is he's going to use the one

01:09:17,279 --> 01:09:22,950
that has the right context configuration

01:09:20,310 --> 01:09:25,200
here all right so the idea being that if

01:09:22,950 --> 01:09:31,020
if we find on my model we're going to

01:09:25,200 --> 01:09:33,569
use this view to present the model model

01:09:31,020 --> 01:09:36,299
object and my view takes two arguments

01:09:33,569 --> 01:09:37,830
this time notice that the last one took

01:09:36,299 --> 01:09:40,470
one argument this is taking two

01:09:37,830 --> 01:09:43,650
arguments context and request request is

01:09:40,470 --> 01:09:45,810
what we already know about context is is

01:09:43,650 --> 01:09:48,060
an instance of my model so there's no

01:09:45,810 --> 01:09:50,370
need to go and fetch from the database

01:09:48,060 --> 01:09:53,430
that object like you would maybe do in

01:09:50,370 --> 01:09:56,130
other frameworks here you already get I

01:09:53,430 --> 01:09:58,140
get the object that was traversed too by

01:09:56,130 --> 01:09:59,970
the way this is also accessible at the

01:09:58,140 --> 01:10:07,680
request there is also request our

01:09:59,970 --> 01:10:09,480
context and these are equivalent right

01:10:07,680 --> 01:10:12,360
yeah that's that's funny because before

01:10:09,480 --> 01:10:14,130
we had Jason and it was it's kind of a

01:10:12,360 --> 01:10:16,920
type of render or something and this is

01:10:14,130 --> 01:10:19,530
a concrete page template but it's it

01:10:16,920 --> 01:10:22,230
works this way so I think it's by the

01:10:19,530 --> 01:10:25,500
suffix that it knows what kind of render

01:10:22,230 --> 01:10:27,560
it is and it's using that to to make her

01:10:25,500 --> 01:10:31,020
a template renderer with that name also

01:10:27,560 --> 01:10:40,410
so that's just a maybe a convenient way

01:10:31,020 --> 01:10:42,480
of spelling this hmm right and so notice

01:10:40,410 --> 01:10:45,090
that our view it returns a dictionary

01:10:42,480 --> 01:10:46,590
right and it's a static we will

01:10:45,090 --> 01:10:51,510
using any variables here but still

01:10:46,590 --> 01:10:53,909
project is pointing the value is x2 so

01:10:51,510 --> 01:10:58,070
basically the name of our project and

01:10:53,909 --> 01:11:00,330
this is what's used in the template to

01:10:58,070 --> 01:11:02,699
replace a value so let's look at the

01:11:00,330 --> 01:11:05,699
templates file my template PT this is

01:11:02,699 --> 01:11:11,250
what again what pyramid already created

01:11:05,699 --> 01:11:14,790
in a scaffold for us and it's you can

01:11:11,250 --> 01:11:16,860
see that here we're replacing the value

01:11:14,790 --> 01:11:22,369
the project that is what the view

01:11:16,860 --> 01:11:25,349
returns and so this is called a

01:11:22,369 --> 01:11:29,210
chameleon page templates you can you can

01:11:25,349 --> 01:11:31,380
use the familiar dollar curly braces

01:11:29,210 --> 01:11:34,290
syntax and we're going to look at more

01:11:31,380 --> 01:11:37,560
syntax later in the later examples too

01:11:34,290 --> 01:11:42,150
so you notice this chameleon it's name

01:11:37,560 --> 01:11:44,250
of this templating stuff but again you

01:11:42,150 --> 01:11:47,159
can use whatever you want right there is

01:11:44,250 --> 01:11:49,050
examples there is even scaffold I think

01:11:47,159 --> 01:11:51,409
that you can use to to have Marco

01:11:49,050 --> 01:11:54,960
templates or ginger or whatever you want

01:11:51,409 --> 01:11:57,389
whatever you prefer so everyone was able

01:11:54,960 --> 01:12:00,210
to start the second example and see the

01:11:57,389 --> 01:12:02,659
page so now we can move on to the to the

01:12:00,210 --> 01:12:02,659
third one

01:12:02,719 --> 01:12:06,020
let me just

01:12:16,880 --> 01:12:25,110
actually to illustrate the traversal a

01:12:21,090 --> 01:12:27,450
little bit more let us go back to our

01:12:25,110 --> 01:12:30,260
shell in x24 for just another moment

01:12:27,450 --> 01:12:34,620
before we complete this exam this step

01:12:30,260 --> 01:12:40,260
let us a call this command called dot

01:12:34,620 --> 01:12:45,180
dot been a pea shell and then pointed to

01:12:40,260 --> 01:12:47,250
the development in e this is the comment

01:12:45,180 --> 01:12:49,080
that I that I just put in so there's a

01:12:47,250 --> 01:12:50,820
in your in your virtual and spin

01:12:49,080 --> 01:12:52,830
directory there's a pea shell command

01:12:50,820 --> 01:12:55,650
and the pea shell takes the same

01:12:52,830 --> 01:12:58,260
argument as a piece off before it takes

01:12:55,650 --> 01:13:00,360
it takes a configuration file of your

01:12:58,260 --> 01:13:02,010
application and then it gives you a

01:13:00,360 --> 01:13:04,290
Python shell that's that's quite

01:13:02,010 --> 01:13:07,350
convenient to find out I mean you can

01:13:04,290 --> 01:13:10,500
introspect with it your application and

01:13:07,350 --> 01:13:13,140
your database so what's happening here

01:13:10,500 --> 01:13:20,190
we have a couple of variables already

01:13:13,140 --> 01:13:23,040
there in our environment specifically we

01:13:20,190 --> 01:13:25,650
have the root so if you type root you're

01:13:23,040 --> 01:13:27,840
gonna see an empty dictionary this is

01:13:25,650 --> 01:13:34,950
the root object-- that we created this

01:13:27,840 --> 01:13:36,480
is a my this is a my model object ID

01:13:34,950 --> 01:13:39,720
it's just a representation of an empty

01:13:36,480 --> 01:13:44,810
dick so my model is is the root as we

01:13:39,720 --> 01:13:44,810
created it in the app maker function and

01:13:45,320 --> 01:13:54,090
so as I said this is a deep right and

01:13:48,060 --> 01:14:02,000
let's say we want to let me let me make

01:13:54,090 --> 01:14:05,910
a let me do an import from x2 what is it

01:14:02,000 --> 01:14:08,610
models import my model and then we're

01:14:05,910 --> 01:14:10,920
going to write Python code to add to our

01:14:08,610 --> 01:14:16,680
root a folder okay we're gonna call it

01:14:10,920 --> 01:14:20,880
my folder I'm gonna say here we're gonna

01:14:16,680 --> 01:14:24,030
put a my model and put it inside our

01:14:20,880 --> 01:14:26,519
root object and

01:14:24,030 --> 01:14:30,789
the other two calls that we need to do

01:14:26,519 --> 01:14:35,349
is we need to from transaction import

01:14:30,789 --> 01:14:38,380
commit and commit the transaction so

01:14:35,349 --> 01:14:41,170
it's written out to disk okay so if you

01:14:38,380 --> 01:14:44,679
try these things these these lines in

01:14:41,170 --> 01:14:47,409
your own pea shell then you should be

01:14:44,679 --> 01:14:51,309
able to traverse to that my folder

01:14:47,409 --> 01:14:53,559
object in your in your app so before you

01:14:51,309 --> 01:14:58,719
were opening the slash now you should be

01:14:53,559 --> 01:15:08,979
able to open slash my folder and not get

01:14:58,719 --> 01:15:12,940
a 404 so I can I would have to get out

01:15:08,979 --> 01:15:15,070
of the shell again because I just quit

01:15:12,940 --> 01:15:23,320
my server and then start the server

01:15:15,070 --> 01:15:25,389
again and then you're gonna then you're

01:15:23,320 --> 01:15:28,420
gonna be able to hopefully say a slash

01:15:25,389 --> 01:15:30,820
my folder and then find your object

01:15:28,420 --> 01:15:33,459
although it looks exactly the same as as

01:15:30,820 --> 01:15:42,989
the root object but you can feel that

01:15:33,459 --> 01:15:42,989
it's there does that work yeah

01:15:45,550 --> 01:15:53,440
I don't is it possible to use I - I

01:15:48,070 --> 01:15:55,810
don't know I guess for now you'd have to

01:15:53,440 --> 01:16:02,230
cope with tear and all the old school

01:15:55,810 --> 01:16:04,510
stuff I'm pretty sure it's possible in

01:16:02,230 --> 01:16:12,160
some way or another bride don't know it

01:16:04,510 --> 01:16:14,170
sorry alright so I'd like to start with

01:16:12,160 --> 01:16:17,230
the first example I mean the one that we

01:16:14,170 --> 01:16:19,570
caught ourselves maybe before the break

01:16:17,230 --> 01:16:24,489
and then we're gonna have the coffee

01:16:19,570 --> 01:16:28,630
break at 10:30 and then we're gonna come

01:16:24,489 --> 01:16:34,570
back so so people who are very eager

01:16:28,630 --> 01:16:39,640
they can do a little bit in the break so

01:16:34,570 --> 01:16:42,160
this is asked going into the third

01:16:39,640 --> 01:16:44,670
example this what I just typed in you

01:16:42,160 --> 01:16:48,850
can also find it in the readme dot txt

01:16:44,670 --> 01:16:57,580
inside the x2 but so now I'm switching

01:16:48,850 --> 01:16:59,110
over to the X 3 this is the templates so

01:16:57,580 --> 01:17:02,170
we're just like with the previous

01:16:59,110 --> 01:17:09,610
example we'll need to run bean Python

01:17:02,170 --> 01:17:12,340
setup pi develop alright like this just

01:17:09,610 --> 01:17:14,620
like before to set up to make this

01:17:12,340 --> 01:17:16,710
application available inside our virtual

01:17:14,620 --> 01:17:18,580
environment this time all our

01:17:16,710 --> 01:17:20,830
requirements are already satisfied

01:17:18,580 --> 01:17:23,110
hopefully so there's no need to download

01:17:20,830 --> 01:17:25,420
anything and then when you start this

01:17:23,110 --> 01:17:29,500
application you're gonna see a 404 not

01:17:25,420 --> 01:17:31,450
found page ok so that's how do I start

01:17:29,500 --> 01:17:34,480
this pin P serve to serve the

01:17:31,450 --> 01:17:40,239
application was that too fast or are you

01:17:34,480 --> 01:17:41,850
just hurt yourself alright so now when

01:17:40,239 --> 01:17:43,960
you go to the application you should

01:17:41,850 --> 01:17:51,420
when you open this up you should see

01:17:43,960 --> 01:17:51,420
this guy this time it's not my mistake

01:17:52,100 --> 01:17:58,920
and then when you've seen this with the

01:17:56,790 --> 01:18:01,980
pizza going to the X three templates

01:17:58,920 --> 01:18:04,110
directory we're actually having you

01:18:01,980 --> 01:18:06,630
notice that that each one of our example

01:18:04,110 --> 01:18:09,180
says a double nesting this is because if

01:18:06,630 --> 01:18:10,800
we have to set up pie in the in in the

01:18:09,180 --> 01:18:15,240
parent folder and then the actual code

01:18:10,800 --> 01:18:17,520
in the in the folder below here when you

01:18:15,240 --> 01:18:20,580
go into the models you can see as you

01:18:17,520 --> 01:18:25,980
can see how I already for you replace

01:18:20,580 --> 01:18:29,400
our my model with folder model which is

01:18:25,980 --> 01:18:31,710
actually also because you know mappings

01:18:29,400 --> 01:18:33,720
this is how we use the traversal so

01:18:31,710 --> 01:18:37,800
we're going to use a dict mapping in

01:18:33,720 --> 01:18:41,910
this case the same as the dick and so

01:18:37,800 --> 01:18:44,760
what I did here is I I made an init

01:18:41,910 --> 01:18:48,330
where I can set the folder title and the

01:18:44,760 --> 01:18:52,620
description we want to be able to add

01:18:48,330 --> 01:18:56,360
folders to our application here that

01:18:52,620 --> 01:18:56,360
have titles and descriptions obviously

01:18:56,390 --> 01:19:03,240
the set item and this is where the on

01:18:59,940 --> 01:19:07,740
the name and on the parent attributes

01:19:03,240 --> 01:19:12,540
come in this is stuff that allows

01:19:07,740 --> 01:19:15,960
Pyramid to find the location of any

01:19:12,540 --> 01:19:18,780
given object inside the graph right so

01:19:15,960 --> 01:19:22,020
by providing to Pyramid the parent and

01:19:18,780 --> 01:19:26,100
the name the name being the segment in

01:19:22,020 --> 01:19:28,490
the URL path right so imagine you have a

01:19:26,100 --> 01:19:34,700
folder let's that's called like we just

01:19:28,490 --> 01:19:37,650
edited my folder then that my folder

01:19:34,700 --> 01:19:43,350
instances on the on the name is going to

01:19:37,650 --> 01:19:47,730
be the segment in the UL path and it's

01:19:43,350 --> 01:19:49,890
going to be the key that you use to get

01:19:47,730 --> 01:19:52,830
it from its parent object so in that

01:19:49,890 --> 01:19:56,430
case we would say maybe route square

01:19:52,830 --> 01:19:58,440
brackets and then my fault that my

01:19:56,430 --> 01:20:03,060
folder is going to be the name and the

01:19:58,440 --> 01:20:05,910
parent is going to be the

01:20:03,060 --> 01:20:09,840
self in that case I am I'm providing a

01:20:05,910 --> 01:20:11,880
set item in our folder model that sets

01:20:09,840 --> 01:20:13,740
these attributes for us so that we don't

01:20:11,880 --> 01:20:15,600
have to worry about this every time that

01:20:13,740 --> 01:20:18,570
we put an item into this folder

01:20:15,600 --> 01:20:22,040
automatically we'll set the reference to

01:20:18,570 --> 01:20:24,240
the parent and in the name and so forth

01:20:22,040 --> 01:20:27,840
this is actually a pretty cool feature

01:20:24,240 --> 01:20:30,330
of this ODB you can see that there was

01:20:27,840 --> 01:20:32,520
no need to set up anything we can just

01:20:30,330 --> 01:20:35,310
refer from one object to another and we

01:20:32,520 --> 01:20:38,180
can we can have cross relationships and

01:20:35,310 --> 01:20:41,070
references between objects and it's all

01:20:38,180 --> 01:20:45,780
not a problem so no need to setup any

01:20:41,070 --> 01:20:49,500
relations or whatever and this time

01:20:45,780 --> 01:20:51,660
around I'm using the folder in my app

01:20:49,500 --> 01:20:53,790
maker so I replaced code that would

01:20:51,660 --> 01:20:57,840
create the my model object as the root

01:20:53,790 --> 01:21:01,020
and I'm creating one of these folder

01:20:57,840 --> 01:21:02,940
objects to be my application root right

01:21:01,020 --> 01:21:04,830
so when you go to slash this time there

01:21:02,940 --> 01:21:07,500
is no my model anymore but there is one

01:21:04,830 --> 01:21:09,180
instance of the folder you saw and here

01:21:07,500 --> 01:21:12,570
is how you create it I mean just like a

01:21:09,180 --> 01:21:14,670
normal Python class and then here is how

01:21:12,570 --> 01:21:19,680
you connect it with the zero DB so this

01:21:14,670 --> 01:21:21,180
is going to be our approved this

01:21:19,680 --> 01:21:23,880
transaction commit we have seen it a

01:21:21,180 --> 01:21:26,220
couple of times now it's it's rarely

01:21:23,880 --> 01:21:28,200
needed in your own code it's needed in

01:21:26,220 --> 01:21:30,420
the P shell and it's needed basically in

01:21:28,200 --> 01:21:33,390
this code but other other times it's not

01:21:30,420 --> 01:21:37,620
needed that's because a pyramid has a

01:21:33,390 --> 01:21:39,390
transaction manager it's managing a

01:21:37,620 --> 01:21:41,310
transaction for you so when the request

01:21:39,390 --> 01:21:43,500
starts it's going to begin a transaction

01:21:41,310 --> 01:21:45,330
when the request finished successfully

01:21:43,500 --> 01:21:49,970
it's going to commit your transaction

01:21:45,330 --> 01:21:53,220
and if you request if in the process of

01:21:49,970 --> 01:21:55,170
you know in your view or wherever you

01:21:53,220 --> 01:21:57,840
there is an exception it's going to

01:21:55,170 --> 01:22:00,330
rollback or abort that transaction so

01:21:57,840 --> 01:22:03,030
there's no need to usually worry about

01:22:00,330 --> 01:22:05,340
this just noticing because we've seen it

01:22:03,030 --> 01:22:06,870
a couple of times but in your views you

01:22:05,340 --> 01:22:09,000
can change your objects you can do

01:22:06,870 --> 01:22:11,100
whatever you want without the need to

01:22:09,000 --> 01:22:12,720
write this code actually it's an error

01:22:11,100 --> 01:22:15,210
to write this code because if you would

01:22:12,720 --> 01:22:16,560
write this and later in your in your

01:22:15,210 --> 01:22:19,920
request cycle in your

01:22:16,560 --> 01:22:21,660
response you would get an exception then

01:22:19,920 --> 01:22:23,330
you would have an inconsistent state

01:22:21,660 --> 01:22:26,340
because you committed part of your

01:22:23,330 --> 01:22:30,180
things and then maybe later there was an

01:22:26,340 --> 01:22:35,550
exception so you have a bad database

01:22:30,180 --> 01:22:38,610
state maybe and so what what I'd like to

01:22:35,550 --> 01:22:41,700
you to do now is to stall up this

01:22:38,610 --> 01:22:45,810
application like like I did and notice

01:22:41,700 --> 01:22:54,410
that you get a 404 and then I'd like you

01:22:45,810 --> 01:22:58,440
to go into the view spy and just make a

01:22:54,410 --> 01:23:02,580
write of you that you know so that we

01:22:58,440 --> 01:23:08,340
can actually look at our folder and that

01:23:02,580 --> 01:23:09,780
view should should just return actually

01:23:08,340 --> 01:23:12,060
an empty dick so the only thing that's

01:23:09,780 --> 01:23:14,370
interesting at this point is the view

01:23:12,060 --> 01:23:20,460
config we need to adapt the view config

01:23:14,370 --> 01:23:25,050
somehow for our for folder and then

01:23:20,460 --> 01:23:30,260
we'll need to I think the idea is also

01:23:25,050 --> 01:23:33,450
to put into the templates what does it

01:23:30,260 --> 01:23:34,980
now this is already there so the

01:23:33,450 --> 01:23:37,410
templates is already there you need you

01:23:34,980 --> 01:23:40,620
just need to complete the views code to

01:23:37,410 --> 01:23:42,720
add one of these views the correct

01:23:40,620 --> 01:23:44,520
configuration is was what's what's most

01:23:42,720 --> 01:23:46,560
interesting here you can just return an

01:23:44,520 --> 01:23:50,010
empty dick and then you should be able

01:23:46,560 --> 01:23:56,700
to see that folder in your page without

01:23:50,010 --> 01:23:59,130
a 404 error so if you want to do that

01:23:56,700 --> 01:24:00,510
quickly maybe three minutes should be

01:23:59,130 --> 01:24:02,900
should be enough for you to complete

01:24:00,510 --> 01:24:02,900
this one

01:24:30,730 --> 01:24:36,370
once you're you you actually see the

01:24:34,300 --> 01:24:40,390
page and and things are working you

01:24:36,370 --> 01:24:43,300
might want to you know you can try out

01:24:40,390 --> 01:24:46,650
the P shell or actually let's let's

01:24:43,300 --> 01:24:50,490
finish up together and then we kind of

01:24:46,650 --> 01:24:50,490
look at the next features

01:24:56,090 --> 01:24:59,050
time to get up

01:25:06,040 --> 01:25:11,449
so

01:25:08,719 --> 01:25:14,449
the renderer should be oh yeah you're

01:25:11,449 --> 01:25:29,660
right there is a templates folder PT you

01:25:14,449 --> 01:25:33,410
should use this one it's up here there

01:25:29,660 --> 01:25:37,910
is no name as with the previous example

01:25:33,410 --> 01:25:40,850
when you say no name it means that you

01:25:37,910 --> 01:25:42,739
know actually let me talk about this in

01:25:40,850 --> 01:25:45,380
a second but the default view has no

01:25:42,739 --> 01:25:48,739
name and only if you add something at

01:25:45,380 --> 01:25:51,050
the end in the in the UL path say you

01:25:48,739 --> 01:25:53,180
add another segment that says edit or

01:25:51,050 --> 01:25:56,420
add or something then you're gonna need

01:25:53,180 --> 01:26:02,780
a name but if you only point to the to

01:25:56,420 --> 01:26:04,010
the to the oh the name okay yeah well

01:26:02,780 --> 01:26:10,370
that doesn't matter the name of the

01:26:04,010 --> 01:26:13,610
function doesn't matter no it's only

01:26:10,370 --> 01:26:15,620
through the view config decorator that

01:26:13,610 --> 01:26:19,570
he connects things so there's no

01:26:15,620 --> 01:26:19,570
implicit meaning of the function name

01:26:21,520 --> 01:26:31,330
right so I once maybe I leave another

01:26:25,489 --> 01:26:31,330
minute is there an issue I can help

01:26:35,090 --> 01:26:38,870
so it's already turning out that we're

01:26:36,920 --> 01:26:41,270
probably not going to be able to make

01:26:38,870 --> 01:26:44,180
all the examples but then maybe you can

01:26:41,270 --> 01:26:46,670
finish on your own after this tutorial

01:26:44,180 --> 01:26:52,130
if you're still if you then still

01:26:46,670 --> 01:26:55,100
interested in filming ok so another

01:26:52,130 --> 01:26:57,680
minute maybe to complete after this you

01:26:55,100 --> 01:26:59,270
need to restart your server and then to

01:26:57,680 --> 01:27:03,170
see the changes right you need to

01:26:59,270 --> 01:27:06,290
control see what you return in this view

01:27:03,170 --> 01:27:08,300
you should return an empty dict for the

01:27:06,290 --> 01:27:11,890
moment because we're not actually

01:27:08,300 --> 01:27:14,660
returning any values for the template

01:27:11,890 --> 01:27:19,520
the thing is the template has access to

01:27:14,660 --> 01:27:23,110
the to the context so you can directly

01:27:19,520 --> 01:27:23,110
get from the context

01:27:31,800 --> 01:27:38,450
if someone was was running already

01:27:35,450 --> 01:27:38,450
alright

01:27:44,830 --> 01:27:51,380
right yeah I set up some templates I

01:27:48,440 --> 01:27:54,350
switched to Twitter bootstrap for this

01:27:51,380 --> 01:27:56,420
example so that's just a matter of

01:27:54,350 --> 01:27:58,190
switching the static files and then

01:27:56,420 --> 01:28:03,970
stuff you can see in static there is now

01:27:58,190 --> 01:28:07,040
jQuery bootstrap and I'm using these

01:28:03,970 --> 01:28:08,810
this time around there is an interesting

01:28:07,040 --> 01:28:10,520
thing about the templates now we have

01:28:08,810 --> 01:28:13,190
now two templates we have a master in

01:28:10,520 --> 01:28:15,800
the folder template like you will expect

01:28:13,190 --> 01:28:18,170
the master has all you know the the

01:28:15,800 --> 01:28:20,960
surroundings it's the old template or

01:28:18,170 --> 01:28:22,490
whatever you call it or the master

01:28:20,960 --> 01:28:25,370
template and the folder only has the

01:28:22,490 --> 01:28:28,220
things that concern the folder object so

01:28:25,370 --> 01:28:30,500
we have separated our styles and and and

01:28:28,220 --> 01:28:35,870
and our layout into two templates here

01:28:30,500 --> 01:28:39,770
and the way this works is using

01:28:35,870 --> 01:28:43,630
something called metal and you only need

01:28:39,770 --> 01:28:49,180
to remember for now or just look at them

01:28:43,630 --> 01:28:49,180
the let's look at the folder PT first

01:28:49,360 --> 01:28:54,560
the folder PT is quite simple because it

01:28:52,880 --> 01:28:56,840
basically delegates most of the hard

01:28:54,560 --> 01:29:00,200
work to the to the master so what we do

01:28:56,840 --> 01:29:02,600
here is we say metal use macro and it's

01:29:00,200 --> 01:29:06,080
going to use the master PT as the macro

01:29:02,600 --> 01:29:08,450
and then we say Phil start content which

01:29:06,080 --> 01:29:10,760
basically corresponds to a slot that we

01:29:08,450 --> 01:29:12,890
defined in the master so the master has

01:29:10,760 --> 01:29:15,110
a place where it says define slot and

01:29:12,890 --> 01:29:16,840
this is where this stuff is going to get

01:29:15,110 --> 01:29:19,640
filled in so it's relatively simple

01:29:16,840 --> 01:29:24,050
although you know the syntax will maybe

01:29:19,640 --> 01:29:27,410
need a bit of exercise too for you to

01:29:24,050 --> 01:29:31,280
remember you know use macro define macro

01:29:27,410 --> 01:29:32,990
feel slot but most of the time you don't

01:29:31,280 --> 01:29:43,040
really I mean you could just copy this

01:29:32,990 --> 01:29:46,310
or so so I'm just gonna complete the

01:29:43,040 --> 01:29:52,340
example so that everyone right we still

01:29:46,310 --> 01:29:56,350
got two minutes before the break so that

01:29:52,340 --> 01:29:56,350
would be you know

01:29:58,730 --> 01:30:08,880
there will be from models import

01:30:05,960 --> 01:30:12,120
communique maybe stretch out two more

01:30:08,880 --> 01:30:15,239
minutes yeah excellent from models

01:30:12,120 --> 01:30:18,980
import what was it folder right then

01:30:15,239 --> 01:30:24,900
we're gonna use code similar to this

01:30:18,980 --> 01:30:28,260
except that what we are not returning

01:30:24,900 --> 01:30:31,290
anything I mean an empty dictionary and

01:30:28,260 --> 01:30:33,860
we're going to use folder as the context

01:30:31,290 --> 01:30:38,600
and we're going to use the folder PT and

01:30:33,860 --> 01:30:44,210
that should work I guess

01:30:38,600 --> 01:30:46,850
alright so only I've only done minor

01:30:44,210 --> 01:30:49,440
modifications and I should get this one

01:30:46,850 --> 01:30:50,820
and this is this is basically a starter

01:30:49,440 --> 01:30:54,660
part of the application that we're going

01:30:50,820 --> 01:30:59,070
to write and let me just quickly before

01:30:54,660 --> 01:31:01,080
the the break look at this one so if you

01:30:59,070 --> 01:31:04,230
not don't get any cookies anymore

01:31:01,080 --> 01:31:06,600
because it's they're all gone but the

01:31:04,230 --> 01:31:08,130
context so the context is a context

01:31:06,600 --> 01:31:10,170
object as you would expect you have

01:31:08,130 --> 01:31:12,600
direct access in the template to that so

01:31:10,170 --> 01:31:14,610
there's no need to return all the values

01:31:12,600 --> 01:31:16,290
from the context also in the dictionary

01:31:14,610 --> 01:31:18,480
because context is always there so we

01:31:16,290 --> 01:31:21,000
can say context title and description

01:31:18,480 --> 01:31:25,620
and what I have here down there is I

01:31:21,000 --> 01:31:30,180
have a repeat at I'll repeat which is my

01:31:25,620 --> 01:31:32,220
my templates way of repeating over items

01:31:30,180 --> 01:31:34,950
okay so take a look at this construct

01:31:32,220 --> 01:31:36,960
and try to see what it does the values

01:31:34,950 --> 01:31:39,840
is coming from the dick right because we

01:31:36,960 --> 01:31:42,510
can iterate over the dicks values here

01:31:39,840 --> 01:31:44,550
so this is the syntax item context

01:31:42,510 --> 01:31:46,890
values so this basically translates to

01:31:44,550 --> 01:31:49,440
for item in context values and it's

01:31:46,890 --> 01:31:53,880
going to render one link per item and

01:31:49,440 --> 01:31:57,270
use a request resource URL this is a way

01:31:53,880 --> 01:31:59,100
to renderer for an AI locatable so this

01:31:57,270 --> 01:32:01,570
is why we need the name and the parent

01:31:59,100 --> 01:32:04,869
for nine locatable I can

01:32:01,570 --> 01:32:09,280
AUL and down there I'm going to say item

01:32:04,869 --> 01:32:12,460
title so this whole part here is

01:32:09,280 --> 01:32:14,409
concerned about giving the child objects

01:32:12,460 --> 01:32:16,570
and providing a link to the child object

01:32:14,409 --> 01:32:18,429
so that you can click the link and go

01:32:16,570 --> 01:32:20,440
into the child object place if you get

01:32:18,429 --> 01:32:22,449
the view for that folder so with this

01:32:20,440 --> 01:32:24,460
you could already experiment and use the

01:32:22,449 --> 01:32:28,570
P shell to make maybe a folder structure

01:32:24,460 --> 01:32:31,599
or use you know the app maker to make a

01:32:28,570 --> 01:32:37,360
folder structure and then you can see if

01:32:31,599 --> 01:32:39,880
you can find this one for those for

01:32:37,360 --> 01:32:44,020
those of you who maybe returned earlier

01:32:39,880 --> 01:32:48,310
from the only coffee break you you might

01:32:44,020 --> 01:32:51,250
want to there is a breadcrumbs up here

01:32:48,310 --> 01:32:54,489
but it's broken right you might be able

01:32:51,250 --> 01:32:56,230
to fix the breadcrumbs looking at the

01:32:54,489 --> 01:32:58,719
code that we used here in the tile

01:32:56,230 --> 01:33:02,079
repeat to do maybe something similar

01:32:58,719 --> 01:33:05,110
remember the unknown the parent or try

01:33:02,079 --> 01:33:09,130
to find hit more hints in the readme.txt

01:33:05,110 --> 01:33:11,440
if you want to continue on this one you

01:33:09,130 --> 01:33:17,110
should be able to do what to be able to

01:33:11,440 --> 01:33:18,760
build a working breadcrumbs and maybe

01:33:17,110 --> 01:33:20,619
you can use the P shell to add more

01:33:18,760 --> 01:33:22,840
objects into your graph so that you can

01:33:20,619 --> 01:33:24,909
actually click around and see see the

01:33:22,840 --> 01:33:26,920
list in action and so on and so forth I

01:33:24,909 --> 01:33:31,300
guess with that week we can go into the

01:33:26,920 --> 01:33:38,619
break things and do you think we'll meet

01:33:31,300 --> 01:33:40,810
again in we start the regular time do

01:33:38,619 --> 01:33:44,760
you want to start earlier yeah I would

01:33:40,810 --> 01:33:46,719
like to what would that be it would be

01:33:44,760 --> 01:33:48,840
11:15 okay

01:33:46,719 --> 01:33:52,530
in Spain yes okay so I'll see you at

01:33:48,840 --> 01:33:52,530
11:15 thank you

01:35:14,980 --> 01:35:17,040
you

01:35:21,880 --> 01:35:23,940

YouTube URL: https://www.youtube.com/watch?v=dKZjbm_qLUM


