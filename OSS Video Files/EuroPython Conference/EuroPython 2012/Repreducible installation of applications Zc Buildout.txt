Title: Repreducible installation of applications Zc Buildout
Publication date: 2015-04-19
Playlist: EuroPython 2012
Description: 
	[EuroPython 2012]  T Lotze- 5 JULY 2012 in "Track Tagliatelle"
Captions: 
	00:00:01,370 --> 00:00:10,580
this speech I will let now the order to

00:00:06,439 --> 00:00:13,129
Thomas for this at least for me really

00:00:10,580 --> 00:00:17,360
interesting topic about their producing

00:00:13,129 --> 00:00:19,550
installation and just as a little bit of

00:00:17,360 --> 00:00:21,800
housekeeping if you have questions we

00:00:19,550 --> 00:00:24,020
have five minutes of Q&A at the end of

00:00:21,800 --> 00:00:26,120
the speech so if you can take notes we

00:00:24,020 --> 00:00:29,180
will present the question to the speaker

00:00:26,120 --> 00:00:31,940
at the end and if the speaker decide if

00:00:29,180 --> 00:00:34,280
the question is really quick he can of

00:00:31,940 --> 00:00:35,809
course answer immediately so thank you

00:00:34,280 --> 00:00:38,809
for your participation in the leave the

00:00:35,809 --> 00:00:40,760
world Oh speaker thank you welcome to my

00:00:38,809 --> 00:00:43,219
talk about reproducible installation of

00:00:40,760 --> 00:00:44,690
applications using this he bellowed so

00:00:43,219 --> 00:00:47,800
my name is Thomas Lotte I'm working for

00:00:44,690 --> 00:00:50,030
a concept where a web application

00:00:47,800 --> 00:00:52,399
company from Germany with a strong

00:00:50,030 --> 00:00:55,640
background in Python and we're using

00:00:52,399 --> 00:00:57,230
bailout on a daily basis so what am I

00:00:55,640 --> 00:00:59,390
going to talk about today after a short

00:00:57,230 --> 00:01:02,989
overview I'm going to show you a simple

00:00:59,390 --> 00:01:06,650
example of if I build out so you see how

00:01:02,989 --> 00:01:09,170
you use it what it gives you I will take

00:01:06,650 --> 00:01:14,090
a look at how bill out you installs

00:01:09,170 --> 00:01:16,480
Python code and then I will look into

00:01:14,090 --> 00:01:20,930
I'll build out makes it possible to

00:01:16,480 --> 00:01:22,670
actually do reproducible builds the lab

00:01:20,930 --> 00:01:25,010
can do more than install Python code

00:01:22,670 --> 00:01:29,660
that can install complex applications

00:01:25,010 --> 00:01:32,330
using any software and if I have time I

00:01:29,660 --> 00:01:35,500
will look into that and in the end well

00:01:32,330 --> 00:01:39,470
give a short outlook on the lot future

00:01:35,500 --> 00:01:41,480
so its first think about what the scope

00:01:39,470 --> 00:01:44,750
of this talk and of the tool we are

00:01:41,480 --> 00:01:45,440
talking about is so we ask a few

00:01:44,750 --> 00:01:47,000
questions

00:01:45,440 --> 00:01:49,760
which problem do we actually want to

00:01:47,000 --> 00:01:52,270
solve with a tool with problems shall we

00:01:49,760 --> 00:01:54,680
not want to solve

00:01:52,270 --> 00:01:58,220
I'll talk a bit about the history of the

00:01:54,680 --> 00:02:01,760
law and some terminology as well what

00:01:58,220 --> 00:02:03,230
problems do we want to solve um what we

00:02:01,760 --> 00:02:06,320
want to achieve is to install and

00:02:03,230 --> 00:02:07,929
configure software in webpages a way

00:02:06,320 --> 00:02:10,759
which does that what does that mean

00:02:07,929 --> 00:02:12,290
we're talking about software that can be

00:02:10,759 --> 00:02:13,270
both paths and packages we want to

00:02:12,290 --> 00:02:16,990
install them we want to

00:02:13,270 --> 00:02:19,840
to execute the Python code and we can

00:02:16,990 --> 00:02:21,190
also install and configure any other

00:02:19,840 --> 00:02:24,850
kind of software which we might need

00:02:21,190 --> 00:02:26,800
because well if you want to install it a

00:02:24,850 --> 00:02:28,030
product or a typical web application

00:02:26,800 --> 00:02:29,650
then you have more components which

00:02:28,030 --> 00:02:32,620
might not have anything to do with

00:02:29,650 --> 00:02:34,350
Python at all like a solo server which

00:02:32,620 --> 00:02:41,010
is written in Java and things like that

00:02:34,350 --> 00:02:43,810
um the simple scales which build out um

00:02:41,010 --> 00:02:46,350
actually handles but which we will not

00:02:43,810 --> 00:02:48,640
be concerned with in this talk is

00:02:46,350 --> 00:02:53,470
installing a Python package for

00:02:48,640 --> 00:02:56,050
development so it's a way to install it

00:02:53,470 --> 00:02:59,950
that such that you can work on it and

00:02:56,050 --> 00:03:01,660
execute it at the same time there are

00:02:59,950 --> 00:03:05,320
complex cases which pull out handles

00:03:01,660 --> 00:03:07,120
which is multi-part applications that

00:03:05,320 --> 00:03:11,410
concern different paths and have to play

00:03:07,120 --> 00:03:14,770
together and what we want to do is to

00:03:11,410 --> 00:03:17,709
describe such a configuration of

00:03:14,770 --> 00:03:21,160
software and configuration files for the

00:03:17,709 --> 00:03:23,110
software and all that and a simple text

00:03:21,160 --> 00:03:24,340
file or a couple of text files which we

00:03:23,110 --> 00:03:28,570
could handle as we are used to having

00:03:24,340 --> 00:03:30,280
text files and we want to have this

00:03:28,570 --> 00:03:32,500
description to be completed as complete

00:03:30,280 --> 00:03:36,520
as possible so that's the part about

00:03:32,500 --> 00:03:38,620
reproducibility um problems we do not

00:03:36,520 --> 00:03:40,840
want to solve include on the low level

00:03:38,620 --> 00:03:44,080
and building software from source code

00:03:40,840 --> 00:03:45,790
such as C sources because there are

00:03:44,080 --> 00:03:50,280
existing specialized tools for that and

00:03:45,790 --> 00:03:52,900
with rather to control them instead of

00:03:50,280 --> 00:03:55,570
reinventing the wheel so I'm talking

00:03:52,900 --> 00:03:58,510
about things like configure make make

00:03:55,570 --> 00:04:04,270
install for general software return

00:03:58,510 --> 00:04:06,250
didn't see or any other language and and

00:04:04,270 --> 00:04:08,230
we have this details it comes to a

00:04:06,250 --> 00:04:11,950
Python code that interfaces with say c

00:04:08,230 --> 00:04:14,410
code c libraries and that's also capable

00:04:11,950 --> 00:04:17,380
of calling a compiler for us if it's

00:04:14,410 --> 00:04:18,760
necessary on the high level and we are

00:04:17,380 --> 00:04:20,709
not going to concern ourselves with

00:04:18,760 --> 00:04:24,490
installing things into a host system

00:04:20,709 --> 00:04:28,140
because we want to

00:04:24,490 --> 00:04:30,130
but self-contained deployments of things

00:04:28,140 --> 00:04:31,570
that are isolated from other

00:04:30,130 --> 00:04:33,340
applications on the same machine or

00:04:31,570 --> 00:04:35,980
maybe from other build ups that are

00:04:33,340 --> 00:04:37,810
installed on the same machine and rather

00:04:35,980 --> 00:04:39,880
we want to provide pieces that can then

00:04:37,810 --> 00:04:42,190
be integrated with the operating system

00:04:39,880 --> 00:04:45,280
so for instance if we want to install it

00:04:42,190 --> 00:04:47,970
up application then we might want to

00:04:45,280 --> 00:04:50,530
create some init scripts or some

00:04:47,970 --> 00:04:55,450
configuration snippets for a front-end

00:04:50,530 --> 00:04:57,100
web server and although it is maybe not

00:04:55,450 --> 00:04:58,540
the best tool to actually install that

00:04:57,100 --> 00:05:01,240
stuff into the operating system where

00:04:58,540 --> 00:05:03,580
the the system service can find this

00:05:01,240 --> 00:05:06,340
configuration snippets or whatever but

00:05:03,580 --> 00:05:08,770
we provide this pieces so configuration

00:05:06,340 --> 00:05:12,220
management system can actually then take

00:05:08,770 --> 00:05:14,560
them and deploy them on the machine and

00:05:12,220 --> 00:05:21,060
so we basically act as a building block

00:05:14,560 --> 00:05:23,950
for systems that have a broader scope so

00:05:21,060 --> 00:05:25,990
now what is this a bailout it's a

00:05:23,950 --> 00:05:28,840
package that has been developed by Jim

00:05:25,990 --> 00:05:31,690
Fulton of sub corporation and he started

00:05:28,840 --> 00:05:34,360
doing so in 2006 it wasn't the first

00:05:31,690 --> 00:05:39,970
attempt at such a system he had the

00:05:34,360 --> 00:05:43,960
ability to to learn from - from from -

00:05:39,970 --> 00:05:48,300
early attempts at similar systems and in

00:05:43,960 --> 00:05:51,360
the beginning he used to use bailout for

00:05:48,300 --> 00:05:54,669
deploying the replications wouldn't

00:05:51,360 --> 00:05:56,650
obviously but nowadays it's a lot is

00:05:54,669 --> 00:06:02,470
used for a lot more things than soap

00:05:56,650 --> 00:06:06,910
projects how that's possible

00:06:02,470 --> 00:06:08,500
sure as well now we have a little

00:06:06,910 --> 00:06:10,360
terminology problem because billet can

00:06:08,500 --> 00:06:14,880
actually mean three things at the same

00:06:10,360 --> 00:06:19,270
time for one it refers to the software

00:06:14,880 --> 00:06:21,460
itself which I've tried to refer to as

00:06:19,270 --> 00:06:23,470
easy to build out when talking about it

00:06:21,460 --> 00:06:28,090
because it's a Python package that is

00:06:23,470 --> 00:06:32,530
easy Unitas a build out can be the

00:06:28,090 --> 00:06:34,030
specification of configuration that

00:06:32,530 --> 00:06:35,200
means the

00:06:34,030 --> 00:06:38,020
basically the configuration files you

00:06:35,200 --> 00:06:41,680
write and it can also mean the build

00:06:38,020 --> 00:06:43,210
itself so the things that we get when we

00:06:41,680 --> 00:06:47,020
run the software as you see the load on

00:06:43,210 --> 00:06:49,720
a pallet configuration what I would try

00:06:47,020 --> 00:06:54,040
to keep those the part well enough so I

00:06:49,720 --> 00:06:56,200
hope you know to get confused now for a

00:06:54,040 --> 00:06:58,360
simple example of pull out what are we

00:06:56,200 --> 00:07:00,970
going to look at first of course what's

00:06:58,360 --> 00:07:05,320
needed to use the software then I will

00:07:00,970 --> 00:07:07,300
show you how to run it I will look a bit

00:07:05,320 --> 00:07:10,300
more closely into what happens when

00:07:07,300 --> 00:07:11,950
there are runs what does it do and of

00:07:10,300 --> 00:07:14,020
course we can run throughout several

00:07:11,950 --> 00:07:17,500
times and I will show you what that

00:07:14,020 --> 00:07:19,419
means so first of all we assume that

00:07:17,500 --> 00:07:22,300
this if a lot is not installed into the

00:07:19,419 --> 00:07:25,960
operating system it can be but we do not

00:07:22,300 --> 00:07:28,710
do that now if we don't have it

00:07:25,960 --> 00:07:31,840
installed we either have to download a

00:07:28,710 --> 00:07:34,900
Python file which takes care of the

00:07:31,840 --> 00:07:36,040
first step or once we have a build

00:07:34,900 --> 00:07:38,020
configured and we check those

00:07:36,040 --> 00:07:39,820
configuration files into a version

00:07:38,020 --> 00:07:42,490
control system we can actually check

00:07:39,820 --> 00:07:44,860
that bootstrap I fell into the bottom

00:07:42,490 --> 00:07:46,300
control as well so if we give the whole

00:07:44,860 --> 00:07:49,300
thing to another developer and it checks

00:07:46,300 --> 00:07:53,590
it out and has everything available in

00:07:49,300 --> 00:07:57,550
the beginning and the second thing we

00:07:53,590 --> 00:07:59,560
need is a configuration file and the

00:07:57,550 --> 00:08:02,169
simplest thing we might imagine is

00:07:59,560 --> 00:08:06,160
installing one Python package I take

00:08:02,169 --> 00:08:07,510
things as an example and I pull out the

00:08:06,160 --> 00:08:09,250
configuration file might be as short as

00:08:07,510 --> 00:08:13,690
this and I will show you later

00:08:09,250 --> 00:08:15,610
what all these lines mean now the first

00:08:13,690 --> 00:08:18,940
thing we have to do is to bootstrap the

00:08:15,610 --> 00:08:21,430
build out and that means calling the

00:08:18,940 --> 00:08:23,680
bootstrap script we have to use the

00:08:21,430 --> 00:08:26,470
Python interpreter we want to use later

00:08:23,680 --> 00:08:29,200
together with the other packages which

00:08:26,470 --> 00:08:31,780
we install so we have to decide now

00:08:29,200 --> 00:08:33,760
which one that should be and here is

00:08:31,780 --> 00:08:36,219
this detail about using distribute

00:08:33,760 --> 00:08:40,710
instead of setup tools but that is

00:08:36,219 --> 00:08:40,710
moving to supporting distributes only

00:08:42,160 --> 00:08:47,020
now what do we have after we've run the

00:08:44,650 --> 00:08:49,230
the bootstrap script obviously we have

00:08:47,020 --> 00:08:52,020
the two files we put there ourselves

00:08:49,230 --> 00:08:56,770
bootstrap and build up configuration and

00:08:52,020 --> 00:08:58,380
the the bootstraps run has created a few

00:08:56,770 --> 00:09:01,810
directories there is the bin directory

00:08:58,380 --> 00:09:03,310
which is meant for executable scripts

00:09:01,810 --> 00:09:04,750
and there is one already which is the

00:09:03,310 --> 00:09:11,490
build out script this is what we're

00:09:04,750 --> 00:09:14,290
going to use from now on and we have a

00:09:11,490 --> 00:09:16,510
directory which is that develop eggs

00:09:14,290 --> 00:09:19,420
we will not be concerned with that this

00:09:16,510 --> 00:09:22,090
talk but that's one that's wrong when

00:09:19,420 --> 00:09:24,850
you want to install packages to develop

00:09:22,090 --> 00:09:27,670
them on the same in the same time well

00:09:24,850 --> 00:09:31,360
next Eric come on where next directory

00:09:27,670 --> 00:09:33,160
which contains the download of X so far

00:09:31,360 --> 00:09:35,710
this is only CC build-out and distribute

00:09:33,160 --> 00:09:37,840
which it depends upon and we have arts

00:09:35,710 --> 00:09:41,910
directories so we already saw that in

00:09:37,840 --> 00:09:44,170
this configuration file that lot

00:09:41,910 --> 00:09:45,940
installed several parts of an

00:09:44,170 --> 00:09:49,900
application and each of these parts can

00:09:45,940 --> 00:09:52,300
have a directory where it puts files and

00:09:49,900 --> 00:09:54,880
directories it needs and by convention

00:09:52,300 --> 00:09:57,550
all these are put inside the directory

00:09:54,880 --> 00:09:59,700
that's called parts and the log itself

00:09:57,550 --> 00:10:04,990
has a part already

00:09:59,700 --> 00:10:07,030
now we're on a lot actually so so far we

00:10:04,990 --> 00:10:08,590
only have downloaded some tools we need

00:10:07,030 --> 00:10:11,710
for the build now we actually perform

00:10:08,590 --> 00:10:15,790
the build and we see what happens is

00:10:11,710 --> 00:10:17,710
that a lot of X or download it we see

00:10:15,790 --> 00:10:20,410
the sings egg which we actually wanted

00:10:17,710 --> 00:10:22,860
to have we see dependencies of it being

00:10:20,410 --> 00:10:26,080
downloaded and installed and in the end

00:10:22,860 --> 00:10:28,810
few scripts are generated is actually

00:10:26,080 --> 00:10:33,300
correspond to a tree points which this

00:10:28,810 --> 00:10:36,400
thing Zack defines so in the end we have

00:10:33,300 --> 00:10:41,620
those scripts available to simply run

00:10:36,400 --> 00:10:45,220
them from the bin directory the Builder

00:10:41,620 --> 00:10:48,820
run give us a few files as we saw it

00:10:45,220 --> 00:10:52,540
installed a few scripts they have been

00:10:48,820 --> 00:10:53,780
put into the bin directory next to the

00:10:52,540 --> 00:10:56,510
Perl script

00:10:53,780 --> 00:10:59,540
we have a lot more eggs and we see that

00:10:56,510 --> 00:11:02,030
we don't have a pot directory for this

00:10:59,540 --> 00:11:05,060
sings part because installing neck

00:11:02,030 --> 00:11:08,150
doesn't require anything else in terms

00:11:05,060 --> 00:11:10,190
of files or other actor ease so there

00:11:08,150 --> 00:11:14,420
was no need to create a part directory

00:11:10,190 --> 00:11:16,220
for it now what happened here's the

00:11:14,420 --> 00:11:18,320
configuration file again and the first

00:11:16,220 --> 00:11:19,070
thing we see is that we have to find a

00:11:18,320 --> 00:11:21,500
part

00:11:19,070 --> 00:11:26,360
hence things and this has got an

00:11:21,500 --> 00:11:31,040
installed and doing so meant that's the

00:11:26,360 --> 00:11:35,030
work was done by recipe and recipes are

00:11:31,040 --> 00:11:38,000
not distributed along with build out in

00:11:35,030 --> 00:11:40,790
itself but there will be downloaded when

00:11:38,000 --> 00:11:44,300
build out runs so this means there's the

00:11:40,790 --> 00:11:48,080
possibility for basically any developer

00:11:44,300 --> 00:11:50,000
to provide in what recipes they can

00:11:48,080 --> 00:11:52,310
provide their own code to install

00:11:50,000 --> 00:11:55,490
software and that's what I refer to when

00:11:52,310 --> 00:11:57,080
I said that a lot is able to do a lot

00:11:55,490 --> 00:11:59,810
more things than it was meant for

00:11:57,080 --> 00:12:02,150
initially so anybody is able to extend

00:11:59,810 --> 00:12:03,650
it by using recipes and recipes are

00:12:02,150 --> 00:12:08,330
packaged as eggs and there will be

00:12:03,650 --> 00:12:12,010
install this acts so we saw this when we

00:12:08,330 --> 00:12:17,330
ran build out it told us that installed

00:12:12,010 --> 00:12:19,070
the egg mcc recipe tag and then we see

00:12:17,330 --> 00:12:22,839
that this egg is starting to perform its

00:12:19,070 --> 00:12:27,350
task and install this things part um

00:12:22,839 --> 00:12:29,540
doing so means exercising the easy

00:12:27,350 --> 00:12:31,220
install API that is provided by

00:12:29,540 --> 00:12:34,430
build-out so we sort of build up depends

00:12:31,220 --> 00:12:37,670
on distribute and so on order to be able

00:12:34,430 --> 00:12:41,660
to use easy install and the the egg

00:12:37,670 --> 00:12:44,650
recipe actually uses that API to install

00:12:41,660 --> 00:12:47,810
the egg we don't reinvent the wheel here

00:12:44,650 --> 00:12:50,089
it's not an egg means downloading the

00:12:47,810 --> 00:12:52,790
source of the egg removing the egg

00:12:50,089 --> 00:12:56,930
following the dependencies that he acted

00:12:52,790 --> 00:12:58,730
Clair's so it depends on dock details

00:12:56,930 --> 00:13:01,280
and general pigments all that stuff will

00:12:58,730 --> 00:13:04,490
be downloaded and installed and in the

00:13:01,280 --> 00:13:05,370
end the recipe or the easy install thing

00:13:04,490 --> 00:13:08,580
look

00:13:05,370 --> 00:13:11,430
into the egg to find out which consult

00:13:08,580 --> 00:13:15,230
scripts are actually defined as entry

00:13:11,430 --> 00:13:19,560
points and recreate the scripts for them

00:13:15,230 --> 00:13:22,170
um now I said we can run the route any

00:13:19,560 --> 00:13:24,030
number of times if we do so without

00:13:22,170 --> 00:13:28,380
changing anything then nothing much

00:13:24,030 --> 00:13:30,030
would happen um so now okay as the the

00:13:28,380 --> 00:13:31,230
Sphynx part has already been installed

00:13:30,030 --> 00:13:34,530
it would not be installed again if you

00:13:31,230 --> 00:13:38,340
want bill not again doesn't have to but

00:13:34,530 --> 00:13:41,310
what happens is that some update code

00:13:38,340 --> 00:13:43,800
will be run it will happen any time that

00:13:41,310 --> 00:13:47,490
a part is not being installed from

00:13:43,800 --> 00:13:50,850
scratch and in the case of a part set

00:13:47,490 --> 00:13:52,380
it's not mag updating it means that the

00:13:50,850 --> 00:13:56,240
recipe will look for a new version of

00:13:52,380 --> 00:13:56,240
the egg unless we or doesn't know that

00:13:56,930 --> 00:14:01,110
on the other hand if you change the

00:13:58,980 --> 00:14:02,670
configuration for instance by specifying

00:14:01,110 --> 00:14:04,260
which scripts we want the recipe to

00:14:02,670 --> 00:14:09,330
install so it doesn't have to install

00:14:04,260 --> 00:14:14,910
all of the scripts by default um we can

00:14:09,330 --> 00:14:16,530
say which scripts we want to have so we

00:14:14,910 --> 00:14:20,460
modified a configuration or under again

00:14:16,530 --> 00:14:24,650
then um the part will be uninstalled and

00:14:20,460 --> 00:14:27,660
will be reinstalled and this means that

00:14:24,650 --> 00:14:31,410
all the files and directories it created

00:14:27,660 --> 00:14:33,060
will be removed first and then

00:14:31,410 --> 00:14:38,970
everything will be reinstalled with a

00:14:33,060 --> 00:14:40,740
new configuration um in a more complex

00:14:38,970 --> 00:14:43,590
configuration that has more than one

00:14:40,740 --> 00:14:45,180
part it is possible that we only change

00:14:43,590 --> 00:14:48,390
the configuration of one of the parts

00:14:45,180 --> 00:14:50,460
and we left the configurations of other

00:14:48,390 --> 00:14:55,830
parts alone and those parts will only be

00:14:50,460 --> 00:14:57,330
updated and not reinstalled next thing I

00:14:55,830 --> 00:15:01,650
will show you is what it means for the

00:14:57,330 --> 00:15:03,660
lot to install Python code and we will

00:15:01,650 --> 00:15:05,610
look into the scripts and see how they

00:15:03,660 --> 00:15:07,920
interact with their environment we see

00:15:05,610 --> 00:15:10,520
how we can use the preterite actually

00:15:07,920 --> 00:15:14,070
uses to store the eggs we installed and

00:15:10,520 --> 00:15:17,330
we compare what we love does to water a

00:15:14,070 --> 00:15:21,180
combination of oceans and it will do

00:15:17,330 --> 00:15:25,650
now this is a script that billet

00:15:21,180 --> 00:15:28,370
installs it's all of it and it does two

00:15:25,650 --> 00:15:31,070
things basically so the first thing is

00:15:28,370 --> 00:15:34,590
in the script the second thing is that

00:15:31,070 --> 00:15:37,530
it calls an entry point of the X so X

00:15:34,590 --> 00:15:38,820
can define entry points and there is one

00:15:37,530 --> 00:15:44,850
category of entry points it's called

00:15:38,820 --> 00:15:47,790
control scripts which refers to caller

00:15:44,850 --> 00:15:50,700
bills inside the egg code that can be

00:15:47,790 --> 00:15:54,420
called as the main function of console

00:15:50,700 --> 00:15:56,610
script and the egg is able to create

00:15:54,420 --> 00:16:01,200
scripts that call these entry points

00:15:56,610 --> 00:16:04,020
that's what happens here but first each

00:16:01,200 --> 00:16:06,120
of the scripts has to somehow get the

00:16:04,020 --> 00:16:09,870
eggs onto its passing path and in the

00:16:06,120 --> 00:16:13,710
case of blog that happens by making the

00:16:09,870 --> 00:16:15,630
Python path into the scripts so we

00:16:13,710 --> 00:16:20,400
actually import is this module and

00:16:15,630 --> 00:16:22,860
modifiers is that path and we know which

00:16:20,400 --> 00:16:25,740
X need to be on the path and Bill don't

00:16:22,860 --> 00:16:29,850
need knows where it put those eggs so it

00:16:25,740 --> 00:16:33,750
really adds all those paths are strings

00:16:29,850 --> 00:16:35,760
to do this is passed this means that we

00:16:33,750 --> 00:16:37,950
use a pass on installation that we don't

00:16:35,760 --> 00:16:42,630
modify it because we can put the X

00:16:37,950 --> 00:16:45,000
anywhere and we can refer to the to our

00:16:42,630 --> 00:16:46,950
paths here and we don't have to install

00:16:45,000 --> 00:16:49,950
them into the person installation we

00:16:46,950 --> 00:16:53,220
used boots or pillows because that could

00:16:49,950 --> 00:16:54,690
actually be the installation from your

00:16:53,220 --> 00:16:56,670
operating system and you might not

00:16:54,690 --> 00:16:58,650
actually have write access to that but

00:16:56,670 --> 00:17:00,720
that doesn't concern us because the load

00:16:58,650 --> 00:17:06,990
is able to to put the X anywhere and use

00:17:00,720 --> 00:17:09,870
them sometimes we want to have an

00:17:06,990 --> 00:17:12,270
interpreter which we can maybe start

00:17:09,870 --> 00:17:15,270
directively and then try out something

00:17:12,270 --> 00:17:18,870
and not to have the accident an

00:17:15,270 --> 00:17:22,439
interpreter so what we do for that is to

00:17:18,870 --> 00:17:24,180
configure the egg part to install it's a

00:17:22,439 --> 00:17:28,410
pretty we tell us how it should be named

00:17:24,180 --> 00:17:30,240
and what the egg recipe then does is

00:17:28,410 --> 00:17:31,020
actually to create just another

00:17:30,240 --> 00:17:36,450
executable

00:17:31,020 --> 00:17:38,700
script and contents of the script are

00:17:36,450 --> 00:17:40,710
like this first of all it sets up the

00:17:38,700 --> 00:17:42,870
Python path just like any other script

00:17:40,710 --> 00:17:47,300
the recipe might install and then it

00:17:42,870 --> 00:17:50,040
does a few things one of the things I've

00:17:47,300 --> 00:17:52,440
I've listed here depending on the

00:17:50,040 --> 00:17:55,050
options you start interpreter with so

00:17:52,440 --> 00:17:56,370
you might want to execute code you could

00:17:55,050 --> 00:17:57,840
have a command line you might want to

00:17:56,370 --> 00:18:00,840
execute a module you might want to

00:17:57,840 --> 00:18:03,450
execute a file you passed a command an

00:18:00,840 --> 00:18:06,870
argument or you might just start it

00:18:03,450 --> 00:18:09,690
Ephrata interactively and whatever is

00:18:06,870 --> 00:18:18,570
the precursor of does it has the path to

00:18:09,690 --> 00:18:22,980
the eggs available now it's compared as

00:18:18,570 --> 00:18:25,200
to what what should I do um hopefully

00:18:22,980 --> 00:18:29,070
I'm creates a person installation which

00:18:25,200 --> 00:18:34,590
is actually meant to be modified so this

00:18:29,070 --> 00:18:38,520
means we have have a place where we we

00:18:34,590 --> 00:18:42,750
install x2 and when we refer to that

00:18:38,520 --> 00:18:44,700
place much length creates a run-on

00:18:42,750 --> 00:18:50,330
directory and then all the eggs have to

00:18:44,700 --> 00:18:53,310
go in there and then um the Python path

00:18:50,330 --> 00:18:56,940
which actually uses that directory is

00:18:53,310 --> 00:18:59,490
just implicitly by um by the fact that

00:18:56,940 --> 00:19:02,220
Russia life copies the interpreter and

00:18:59,490 --> 00:19:05,340
when we started locally interpreter from

00:19:02,220 --> 00:19:12,810
the module and then it uses this path

00:19:05,340 --> 00:19:16,850
implicitly and we can we can export that

00:19:12,810 --> 00:19:20,360
path so we we have it available when we

00:19:16,850 --> 00:19:25,110
we run things from the command line but

00:19:20,360 --> 00:19:27,060
this is actually a completely different

00:19:25,110 --> 00:19:28,830
approach to what Bill does because um

00:19:27,060 --> 00:19:31,170
here is he you know from the outside

00:19:28,830 --> 00:19:34,830
what the path is you can you can have

00:19:31,170 --> 00:19:36,450
tools that may be installed into the

00:19:34,830 --> 00:19:41,240
operating system use that path you can

00:19:36,450 --> 00:19:44,270
actually say I need an important and

00:19:41,240 --> 00:19:46,010
please use that path to two important

00:19:44,270 --> 00:19:49,429
things from you can not to do that with

00:19:46,010 --> 00:19:51,890
the lot as easily because the path to

00:19:49,429 --> 00:19:53,510
the DX billowed installs is baked into

00:19:51,890 --> 00:19:57,530
the scripts you ain't seen it from the

00:19:53,510 --> 00:20:00,650
outside so that basically the difference

00:19:57,530 --> 00:20:04,910
between how I build out and the dotted

00:20:00,650 --> 00:20:10,780
line of install Python software now

00:20:04,910 --> 00:20:13,309
about reproducibility we saw that we

00:20:10,780 --> 00:20:17,030
specify things that we want to install

00:20:13,309 --> 00:20:20,840
and we can do that more specifically

00:20:17,030 --> 00:20:24,380
than you already saw we can make sure

00:20:20,840 --> 00:20:26,870
that we actually do specify as much as

00:20:24,380 --> 00:20:29,570
we can we can enforce them mostly

00:20:26,870 --> 00:20:30,950
complete specification and this will

00:20:29,570 --> 00:20:35,390
lead to the concept of non good sets of

00:20:30,950 --> 00:20:39,500
software with us in the end so which

00:20:35,390 --> 00:20:41,179
eggs are still not install um which X

00:20:39,500 --> 00:20:45,200
are installed is basically determined by

00:20:41,179 --> 00:20:46,760
what configuration configuration fired

00:20:45,200 --> 00:20:49,340
because we listen to the eggs we want to

00:20:46,760 --> 00:20:52,490
have installed and it's determined by

00:20:49,340 --> 00:20:55,220
the dependencies of those eggs so then

00:20:52,490 --> 00:20:58,340
we saw that the things that depends on

00:20:55,220 --> 00:21:04,100
things like language or rock details and

00:20:58,340 --> 00:21:07,460
those will be installed nothing elves

00:21:04,100 --> 00:21:08,150
will be installed this means um we saw

00:21:07,460 --> 00:21:11,030
that beauchamp

00:21:08,150 --> 00:21:13,400
provides us with a directory where we

00:21:11,030 --> 00:21:15,260
computed and stuff in later this is the

00:21:13,400 --> 00:21:18,470
possibility here because the paths are

00:21:15,260 --> 00:21:21,110
inside the scripts and in order to put

00:21:18,470 --> 00:21:22,640
anything else on the Python path of

00:21:21,110 --> 00:21:25,400
these scripts we would actually have to

00:21:22,640 --> 00:21:28,640
go into those files and modify them but

00:21:25,400 --> 00:21:31,340
that's not how things are meant to be so

00:21:28,640 --> 00:21:34,340
we can be sure that one spill not

00:21:31,340 --> 00:21:36,500
install those scripts it will not happen

00:21:34,340 --> 00:21:39,280
later that suddenly something is on the

00:21:36,500 --> 00:21:41,660
pattern path that might interfere with

00:21:39,280 --> 00:21:46,220
the code that the scripts actually want

00:21:41,660 --> 00:21:49,429
to use um where do the X come from below

00:21:46,220 --> 00:21:50,960
is easy install that looks the X up on

00:21:49,429 --> 00:21:52,250
the package index and we can also

00:21:50,960 --> 00:21:55,340
configure

00:21:52,250 --> 00:21:58,310
um other places where eggs come from so

00:21:55,340 --> 00:21:59,780
maybe our company uses some private eggs

00:21:58,310 --> 00:22:02,240
that should not be published on the

00:21:59,780 --> 00:22:04,700
picture next so you can say there's a

00:22:02,240 --> 00:22:06,950
list with links to those eggs somewhere

00:22:04,700 --> 00:22:09,160
on the web server or you can actually

00:22:06,950 --> 00:22:13,430
check them in along with the

00:22:09,160 --> 00:22:14,600
configuration which versions of Excel

00:22:13,430 --> 00:22:18,770
installed no that's the interesting part

00:22:14,600 --> 00:22:23,180
um the first thing I want to say about

00:22:18,770 --> 00:22:27,200
that is that um if we declare

00:22:23,180 --> 00:22:31,820
dependencies which might be used version

00:22:27,200 --> 00:22:35,110
of at least say 2.5 of something then

00:22:31,820 --> 00:22:39,110
there will always be honored always

00:22:35,110 --> 00:22:41,240
promise be fulfilled but within the the

00:22:39,110 --> 00:22:43,220
boundaries that these requirements leave

00:22:41,240 --> 00:22:47,990
us then use matching versions that can

00:22:43,220 --> 00:22:51,530
be found with used and we actually saw

00:22:47,990 --> 00:22:54,140
that updating a an egg part we look for

00:22:51,530 --> 00:22:55,370
new versions unless we tell it not to so

00:22:54,140 --> 00:22:57,700
we can suppress looking for newer

00:22:55,370 --> 00:23:01,010
versions that means we can be sure that

00:22:57,700 --> 00:23:03,620
if we run build-out again the versions

00:23:01,010 --> 00:23:04,850
will not have changed but that still

00:23:03,620 --> 00:23:08,570
doesn't give us complete repairs the

00:23:04,850 --> 00:23:11,000
reusability because the versions we use

00:23:08,570 --> 00:23:14,420
still depend on what was installed when

00:23:11,000 --> 00:23:16,490
we first install the build out so we

00:23:14,420 --> 00:23:19,370
want something more and what we want to

00:23:16,490 --> 00:23:21,470
do is pin versions and we can do that by

00:23:19,370 --> 00:23:25,310
specifying a global option to build out

00:23:21,470 --> 00:23:29,180
which tells us a configuration section

00:23:25,310 --> 00:23:33,920
that pins our numbers for specific eggs

00:23:29,180 --> 00:23:37,100
and these version pinnings will always

00:23:33,920 --> 00:23:40,160
be honored if you put a pinning in there

00:23:37,100 --> 00:23:42,410
that if you put a version in there it

00:23:40,160 --> 00:23:43,940
doesn't actually exist or if it

00:23:42,410 --> 00:23:46,460
contradicts one of the requirements we

00:23:43,940 --> 00:23:48,440
have otherwise then block would fail it

00:23:46,460 --> 00:23:52,280
would not do anything clever I'm not so

00:23:48,440 --> 00:23:54,440
clever it will simply fail but as long

00:23:52,280 --> 00:23:56,150
as we only specify two versions of some

00:23:54,440 --> 00:23:59,180
packages the versions of other packages

00:23:56,150 --> 00:24:01,550
are still unpredictable and we want

00:23:59,180 --> 00:24:02,750
don't want to have that so we can

00:24:01,550 --> 00:24:04,700
actually make sure that we don't

00:24:02,750 --> 00:24:07,640
actually accidentally

00:24:04,700 --> 00:24:10,550
forget to tip in some versions by saying

00:24:07,640 --> 00:24:12,350
with digital picked versions we have

00:24:10,550 --> 00:24:14,450
this global option a lot of ignorance

00:24:12,350 --> 00:24:18,020
and we set it to false that's actually a

00:24:14,450 --> 00:24:20,690
very good practice to do and now we have

00:24:18,020 --> 00:24:23,420
a much longer version section we have to

00:24:20,690 --> 00:24:26,090
depend all the versions of all the eggs

00:24:23,420 --> 00:24:28,610
that we install either because we list

00:24:26,090 --> 00:24:33,670
them explicitly or because X we want to

00:24:28,610 --> 00:24:33,670
have installed mr. mess dependencies so

00:24:34,480 --> 00:24:39,440
this also means that even the versions

00:24:37,520 --> 00:24:41,870
of ccp load and all the recipes we use

00:24:39,440 --> 00:24:46,820
our pimp because all of them are

00:24:41,870 --> 00:24:48,770
installed as X this gives us an own to

00:24:46,820 --> 00:24:51,980
build in addition to non good code

00:24:48,770 --> 00:24:54,710
because um we can now be sure that the

00:24:51,980 --> 00:24:56,690
pieces of the build system F so we can

00:24:54,710 --> 00:24:59,930
be sure that the versions of the recipes

00:24:56,690 --> 00:25:01,760
we use actually work with the version of

00:24:59,930 --> 00:25:04,070
build-out because maybe they use some

00:25:01,760 --> 00:25:06,500
API build or provides and we have to

00:25:04,070 --> 00:25:10,190
make sure that Bill not is new enough to

00:25:06,500 --> 00:25:12,440
actually provide an API but also we can

00:25:10,190 --> 00:25:16,070
be sure that we know what the eggs do

00:25:12,440 --> 00:25:18,560
because eggs create files that put them

00:25:16,070 --> 00:25:21,470
in certain paths they do so with some

00:25:18,560 --> 00:25:24,830
fire contents and of course as the egg

00:25:21,470 --> 00:25:27,080
of olives as it is developed things

00:25:24,830 --> 00:25:30,050
might change but we can pin the versions

00:25:27,080 --> 00:25:32,030
of the eggs and we can actually be sure

00:25:30,050 --> 00:25:36,080
where things end up and what's contained

00:25:32,030 --> 00:25:39,200
in files and and stuff like that what we

00:25:36,080 --> 00:25:41,300
do not pin is the personal version

00:25:39,200 --> 00:25:42,890
itself we have to decide which version

00:25:41,300 --> 00:25:45,320
of Python to use when we bootstrap

00:25:42,890 --> 00:25:50,360
rolled out and that's all there is to be

00:25:45,320 --> 00:25:54,080
said about that now some words about

00:25:50,360 --> 00:26:00,020
things like isolation and sharing so we

00:25:54,080 --> 00:26:03,430
have eggs that we have parts and the

00:26:00,020 --> 00:26:06,470
bailout that use eggs and we'll use

00:26:03,430 --> 00:26:10,010
maybe the same eggs or maybe it's

00:26:06,470 --> 00:26:11,740
different eggs and now the first thing

00:26:10,010 --> 00:26:16,060
you have to say is that even though

00:26:11,740 --> 00:26:17,900
different parts might use the same egg

00:26:16,060 --> 00:26:20,540
they cannot

00:26:17,900 --> 00:26:23,390
use different versions of the Excel one

00:26:20,540 --> 00:26:25,540
restriction we have is that use one

00:26:23,390 --> 00:26:30,170
version of neck for everything that's

00:26:25,540 --> 00:26:33,020
being installed with one bailout maybe

00:26:30,170 --> 00:26:35,780
in the future I percept best restriction

00:26:33,020 --> 00:26:40,070
would be lifted so there have been some

00:26:35,780 --> 00:26:42,230
thoughts in the direction we isolated to

00:26:40,070 --> 00:26:44,960
build out from the the Python

00:26:42,230 --> 00:26:46,610
installation and the that we used which

00:26:44,960 --> 00:26:50,990
may be the one in the operating system

00:26:46,610 --> 00:26:53,900
in so far as we don't modify that

00:26:50,990 --> 00:26:55,220
installation but on the other hand we

00:26:53,900 --> 00:26:56,780
still have to be careful about site

00:26:55,220 --> 00:27:00,080
packages of that installation because

00:26:56,780 --> 00:27:03,200
our software would have access it so

00:27:00,080 --> 00:27:08,000
that unless we tell it or configure

00:27:03,200 --> 00:27:10,309
things to not do that um so we have to

00:27:08,000 --> 00:27:11,990
be careful that the operating system

00:27:10,309 --> 00:27:14,380
didn't install things that might

00:27:11,990 --> 00:27:19,160
interfere with what we don't want to use

00:27:14,380 --> 00:27:22,730
different versions of packages um we can

00:27:19,160 --> 00:27:26,809
have any number of build outs next to

00:27:22,730 --> 00:27:29,290
each other so because build out

00:27:26,809 --> 00:27:32,210
environments are isolated self-contained

00:27:29,290 --> 00:27:34,550
we can have a lot of them on the same

00:27:32,210 --> 00:27:36,050
machine that can use same eggs different

00:27:34,550 --> 00:27:41,030
eggs different versions of the same X

00:27:36,050 --> 00:27:44,120
that doesn't that's not a problem and we

00:27:41,030 --> 00:27:47,179
can share the actually actual fiber

00:27:44,120 --> 00:27:50,840
sources that the X use so we don't have

00:27:47,179 --> 00:27:55,059
to put them on or just multiple times so

00:27:50,840 --> 00:27:55,059
we can configure a shared X directory

00:27:56,140 --> 00:28:00,890
where things need to be maintained that

00:27:58,820 --> 00:28:04,400
means that when we change a bit of

00:28:00,890 --> 00:28:05,900
configuration and we need new X then we

00:28:04,400 --> 00:28:10,190
have to add version fittings for each of

00:28:05,900 --> 00:28:12,790
these new X um which sounds like a bit

00:28:10,190 --> 00:28:15,770
of work which it is but it gives us the

00:28:12,790 --> 00:28:17,360
opportunity to update versions at a time

00:28:15,770 --> 00:28:20,330
that is convenient for us so if we

00:28:17,360 --> 00:28:23,059
develop our application and everything

00:28:20,330 --> 00:28:25,610
works and we roll it out then we don't

00:28:23,059 --> 00:28:26,010
have to fear that a new version of some

00:28:25,610 --> 00:28:28,910
package

00:28:26,010 --> 00:28:30,770
as has been released in the meantime and

00:28:28,910 --> 00:28:32,940
this might not work

00:28:30,770 --> 00:28:36,300
now with the things that we have

00:28:32,940 --> 00:28:37,170
deployed but we can at some point when

00:28:36,300 --> 00:28:39,510
we have time for it

00:28:37,170 --> 00:28:42,480
all sit down and try the new try out a

00:28:39,510 --> 00:28:44,700
new version and then update the version

00:28:42,480 --> 00:28:50,150
pinning and can be sure that when we

00:28:44,700 --> 00:28:50,150
roll it again everything will work um

00:28:50,300 --> 00:28:56,460
these version paintings describe

00:28:53,700 --> 00:28:58,590
known-good sets of software not good set

00:28:56,460 --> 00:29:00,990
of eggs which means that if you have a

00:28:58,590 --> 00:29:03,060
project which uses a lot of eggs like

00:29:00,990 --> 00:29:04,620
the cell project uses a lot of effects

00:29:03,060 --> 00:29:08,820
in the top namespace for instance and

00:29:04,620 --> 00:29:11,760
and others then someone who maintains

00:29:08,820 --> 00:29:15,870
such a list of version paintings can

00:29:11,760 --> 00:29:17,250
make sure that the list contains stuff

00:29:15,870 --> 00:29:19,410
that is known to work together and other

00:29:17,250 --> 00:29:22,830
people can simply use that and can be

00:29:19,410 --> 00:29:24,960
sure that somebody made sure that things

00:29:22,830 --> 00:29:27,540
work they have to don't don't have to

00:29:24,960 --> 00:29:30,590
care about that themselves we can

00:29:27,540 --> 00:29:36,660
maintain such lists in a central place

00:29:30,590 --> 00:29:38,600
um this means that we start using a

00:29:36,660 --> 00:29:41,190
feature of build out which is extending

00:29:38,600 --> 00:29:44,700
configurations one Balad configuration

00:29:41,190 --> 00:29:47,660
can extend another so in this case we

00:29:44,700 --> 00:29:50,760
want to reuse a centrally maintained

00:29:47,660 --> 00:29:53,820
long good sets not good set of eggs we

00:29:50,760 --> 00:29:57,470
would say let's extend version

00:29:53,820 --> 00:29:59,820
configuration that's provides that

00:29:57,470 --> 00:30:02,520
particular URL for instance or we can

00:29:59,820 --> 00:30:05,430
download it and commit it along with our

00:30:02,520 --> 00:30:07,020
configuration actually this URL is not

00:30:05,430 --> 00:30:10,410
very good because it doesn't contain a

00:30:07,020 --> 00:30:12,540
version of this set of pinnings

00:30:10,410 --> 00:30:16,530
it would be better to have releases of

00:30:12,540 --> 00:30:18,350
these non good sets and refer to them in

00:30:16,530 --> 00:30:21,330
order to really make things reproduce

00:30:18,350 --> 00:30:23,220
reproducible and such a version

00:30:21,330 --> 00:30:26,250
configuration really only needs to

00:30:23,220 --> 00:30:27,690
contain some blocked options that should

00:30:26,250 --> 00:30:31,710
be shareable there's nothing special

00:30:27,690 --> 00:30:35,100
about that and we can also override some

00:30:31,710 --> 00:30:36,400
of the after version set up in there if

00:30:35,100 --> 00:30:38,800
you want to

00:30:36,400 --> 00:30:44,440
it was something particular our project

00:30:38,800 --> 00:30:48,490
and we know what we do now I probably

00:30:44,440 --> 00:30:50,590
have to skip a bit faster over the next

00:30:48,490 --> 00:30:54,610
part which is installing complex

00:30:50,590 --> 00:30:57,430
applications um this is an example of

00:30:54,610 --> 00:30:59,710
installing nginx server and

00:30:57,430 --> 00:31:02,890
configuration for its so we see a few

00:30:59,710 --> 00:31:04,750
things here um this is not concerned

00:31:02,890 --> 00:31:07,540
with Python code at all we can install

00:31:04,750 --> 00:31:11,830
things that are written in C and have to

00:31:07,540 --> 00:31:13,000
be compiled like using this configure

00:31:11,830 --> 00:31:19,090
Meck Meck install thing there is a

00:31:13,000 --> 00:31:21,220
recipe for that it's the it's the CCC

00:31:19,090 --> 00:31:23,500
recipe is EMI for instance and there are

00:31:21,220 --> 00:31:26,830
a few more see my recipes that do a

00:31:23,500 --> 00:31:30,010
special stuff so we only have to give a

00:31:26,830 --> 00:31:32,500
URL that says where to download through

00:31:30,010 --> 00:31:35,080
the code and the recipe does the rest we

00:31:32,500 --> 00:31:37,450
see that there are recipes which are

00:31:35,080 --> 00:31:40,780
specialized like the nginx recipe here

00:31:37,450 --> 00:31:44,290
which creates a configuration for an

00:31:40,780 --> 00:31:46,990
engine X instance so we can configure it

00:31:44,290 --> 00:31:52,390
to include some special configuration

00:31:46,990 --> 00:31:53,920
that we want to see the error and when

00:31:52,390 --> 00:31:56,560
we run the lot on that where you see

00:31:53,920 --> 00:31:58,420
that actually there is a for nginx there

00:31:56,560 --> 00:32:01,570
and has been created the power directory

00:31:58,420 --> 00:32:04,320
which contains the code the boat code we

00:32:01,570 --> 00:32:08,280
see that the years specialized nginx

00:32:04,320 --> 00:32:11,920
recipe created a configuration file and

00:32:08,280 --> 00:32:14,050
then it's script and reused some of the

00:32:11,920 --> 00:32:18,580
information we do not want to keep keep

00:32:14,050 --> 00:32:21,160
consistent manually like pass we saw

00:32:18,580 --> 00:32:24,820
that a lot sections can depend on each

00:32:21,160 --> 00:32:28,030
other that means that dependent upon

00:32:24,820 --> 00:32:30,520
sections will be installed automatically

00:32:28,030 --> 00:32:36,670
and information from them will be reused

00:32:30,520 --> 00:32:40,690
by others no I have to skip this thing

00:32:36,670 --> 00:32:46,220
which shows how to refer to build

00:32:40,690 --> 00:32:50,389
adoptions itself and

00:32:46,220 --> 00:32:52,279
and say something about other recipes so

00:32:50,389 --> 00:32:54,259
there are a lot of them we have recipes

00:32:52,279 --> 00:32:57,320
that create the files from templates

00:32:54,259 --> 00:33:00,169
with create directories that configure

00:32:57,320 --> 00:33:02,899
deployments recipes that care about

00:33:00,169 --> 00:33:05,720
development tools so they may install a

00:33:02,899 --> 00:33:08,750
test runner and they create something

00:33:05,720 --> 00:33:10,759
that's omelet which is a directory where

00:33:08,750 --> 00:33:15,470
all the content of the ad installed X is

00:33:10,759 --> 00:33:17,179
linked together into one tree and we

00:33:15,470 --> 00:33:19,370
have a lot of recipes for specific stuff

00:33:17,179 --> 00:33:21,580
like enter next Orlando's things

00:33:19,370 --> 00:33:25,759
configuration supervisor stuff like that

00:33:21,580 --> 00:33:30,620
now for summary what have we learned

00:33:25,759 --> 00:33:32,450
um we saw that bill out is well-suited

00:33:30,620 --> 00:33:34,850
for installing passing code because it

00:33:32,450 --> 00:33:37,220
takes care of all the details it's

00:33:34,850 --> 00:33:39,799
extensible to recover more complex stuff

00:33:37,220 --> 00:33:41,570
it works from a complete plain text

00:33:39,799 --> 00:33:43,190
specification which we can maintain and

00:33:41,570 --> 00:33:46,879
version control like all the other stuff

00:33:43,190 --> 00:33:50,509
we maintain control like the source code

00:33:46,879 --> 00:33:52,250
and we can pin versions of things that

00:33:50,509 --> 00:33:54,789
we use and showed you how to pin

00:33:52,250 --> 00:33:59,240
versions of Python code in order to get

00:33:54,789 --> 00:34:02,269
reducible builds and a lot isolates

00:33:59,240 --> 00:34:05,240
things and installs from environment we

00:34:02,269 --> 00:34:07,100
might not have under our control so

00:34:05,240 --> 00:34:10,250
that's another gain for a previous

00:34:07,100 --> 00:34:11,899
ability there are some issues with the

00:34:10,250 --> 00:34:13,790
load one I touched upon is that the

00:34:11,899 --> 00:34:16,659
pattern powers not it's not is not

00:34:13,790 --> 00:34:18,859
readily inspected it from the outside

00:34:16,659 --> 00:34:22,220
another important one is that we don't

00:34:18,859 --> 00:34:24,230
have a way to see whether a bill not

00:34:22,220 --> 00:34:26,659
actually succeeded just from looking at

00:34:24,230 --> 00:34:28,069
the files it created we have to have

00:34:26,659 --> 00:34:30,470
access to the output

00:34:28,069 --> 00:34:31,399
it gave us on a console when it run so

00:34:30,470 --> 00:34:33,409
we're going to come back to the machine

00:34:31,399 --> 00:34:35,750
the next day we have no way of seeing

00:34:33,409 --> 00:34:39,909
whether everything went fine that's a

00:34:35,750 --> 00:34:39,909
problem I'm going to split over a rest

00:34:44,919 --> 00:34:51,050
for future development

00:34:46,940 --> 00:34:56,000
so about X support currently bailout

00:34:51,050 --> 00:34:57,560
reuse is easy install so there are plans

00:34:56,000 --> 00:34:59,250
to switch to using Vista tiers and

00:34:57,560 --> 00:35:02,160
packaging as soon as that

00:34:59,250 --> 00:35:05,040
as possible because the software has

00:35:02,160 --> 00:35:07,910
been maybe including a standard library

00:35:05,040 --> 00:35:11,820
or a stable enough in some way um

00:35:07,910 --> 00:35:13,520
Padmasri free support is underway so

00:35:11,820 --> 00:35:15,660
there has been one attempt to port it

00:35:13,520 --> 00:35:17,280
there's going to be another which uses a

00:35:15,660 --> 00:35:19,590
single code base for pattern two and

00:35:17,280 --> 00:35:20,790
three and of course there's going to be

00:35:19,590 --> 00:35:23,460
a lot of features efficiency and

00:35:20,790 --> 00:35:26,310
refactoring last thing I want to say is

00:35:23,460 --> 00:35:28,170
that one place where you can use

00:35:26,310 --> 00:35:30,120
build-out is with us concept is looking

00:35:28,170 --> 00:35:31,350
for in your developers so you find

00:35:30,120 --> 00:35:43,680
something about that on our website

00:35:31,350 --> 00:35:50,010
gossip not calm thank you any person

00:35:43,680 --> 00:35:52,500
yeah you mentioned that the result of

00:35:50,010 --> 00:35:54,210
work to maintain version pens what do

00:35:52,500 --> 00:35:55,860
you think about extensions such as

00:35:54,210 --> 00:36:02,450
build-out versions that do that for you

00:35:55,860 --> 00:36:04,980
automatically well um I'm not really

00:36:02,450 --> 00:36:07,800
familiar with this particular extension

00:36:04,980 --> 00:36:10,890
would one which I find very practical is

00:36:07,800 --> 00:36:14,700
the one which thumbstick it sculpt about

00:36:10,890 --> 00:36:20,940
the topic burns so it works like this

00:36:14,700 --> 00:36:23,070
you you do not force losses to be pinned

00:36:20,940 --> 00:36:25,380
and you take a look at what build out

00:36:23,070 --> 00:36:28,260
does its it simply picks some versions

00:36:25,380 --> 00:36:30,600
it finds unknown or whatever and then

00:36:28,260 --> 00:36:32,520
you take those numbers and you take a

00:36:30,600 --> 00:36:34,260
look at them and you can see well

00:36:32,520 --> 00:36:36,840
everything that works fine and you can

00:36:34,260 --> 00:36:39,480
then use the this set of odd numbers

00:36:36,840 --> 00:36:44,220
that have been dumped and use them to

00:36:39,480 --> 00:36:47,550
pin all versions for the future I find

00:36:44,220 --> 00:36:49,260
that very practical because it takes a

00:36:47,550 --> 00:36:52,020
lot of work from you in the beginning

00:36:49,260 --> 00:36:55,350
but it still gives you the reducibility

00:36:52,020 --> 00:36:58,740
thing because then once you use them to

00:36:55,350 --> 00:37:01,890
versions they are pinned then you can

00:36:58,740 --> 00:37:06,480
consciously updates the pings so I think

00:37:01,890 --> 00:37:09,390
that's a good thing a couple of

00:37:06,480 --> 00:37:11,730
questions if I may are you aware are

00:37:09,390 --> 00:37:12,810
there any build out recipes or

00:37:11,730 --> 00:37:15,840
extensions that

00:37:12,810 --> 00:37:19,350
we'll take the build out and create an

00:37:15,840 --> 00:37:20,610
RPM or a depth from it I know that the

00:37:19,350 --> 00:37:25,260
corporation is doing something like that

00:37:20,610 --> 00:37:27,080
and use that myself so I think there's a

00:37:25,260 --> 00:37:30,090
they have a recipe that does it

00:37:27,080 --> 00:37:33,690
okay so and you might want to look that

00:37:30,090 --> 00:37:36,720
up similar question are you aware of any

00:37:33,690 --> 00:37:43,160
recipes or extensions that deal with

00:37:36,720 --> 00:37:46,530
java servlets with what java servlets um

00:37:43,160 --> 00:37:50,040
I'm not aware of them but there are real

00:37:46,530 --> 00:37:51,690
big lot of recipes so that was Maki and

00:37:50,040 --> 00:37:53,940
pi pi is the place to look for recipes

00:37:51,690 --> 00:37:55,830
yes there was some documentation that

00:37:53,940 --> 00:38:03,260
bill Doctorow's a list of recipes there

00:37:55,830 --> 00:38:13,500
and I think Papa has a what's it called

00:38:03,260 --> 00:38:14,390
there attack for attacking recipes any

00:38:13,500 --> 00:38:19,100
other question

00:38:14,390 --> 00:38:19,100
yeah to be the Rasta

00:38:23,760 --> 00:38:28,520
it wasn't very clear from the

00:38:25,560 --> 00:38:31,200
description how the site the

00:38:28,520 --> 00:38:33,119
distribution site packages is involved

00:38:31,200 --> 00:38:36,810
you said it it gets picked up the the

00:38:33,119 --> 00:38:38,730
stuff that installed system-wide so is

00:38:36,810 --> 00:38:41,190
there an equivalent to the note site

00:38:38,730 --> 00:38:44,609
packages of virtual lymph yes there was

00:38:41,190 --> 00:38:47,450
um so this is one of the recent

00:38:44,609 --> 00:38:52,230
developments so it used to be that

00:38:47,450 --> 00:38:53,730
rolled out or simply used did you see

00:38:52,230 --> 00:38:56,880
side packages in the beginning there was

00:38:53,730 --> 00:38:59,970
no way to to turn it off but one of the

00:38:56,880 --> 00:39:04,200
most recent developments is that Python

00:38:59,970 --> 00:39:09,390
is invoked with the capital S switch so

00:39:04,200 --> 00:39:10,890
um actually one would have to look into

00:39:09,390 --> 00:39:11,700
how this works right now what the

00:39:10,890 --> 00:39:13,170
options are

00:39:11,700 --> 00:39:15,480
because that's really a thing that

00:39:13,170 --> 00:39:18,390
appeared in below it's like one or two

00:39:15,480 --> 00:39:22,470
weeks ago let's see how that works out

00:39:18,390 --> 00:39:25,770
but it's basically good practice to use

00:39:22,470 --> 00:39:28,589
either a clean Python or since it that

00:39:25,770 --> 00:39:30,990
side pictures are not used so you can be

00:39:28,589 --> 00:39:33,420
sure what what you use just by looking

00:39:30,990 --> 00:39:42,510
at the build out configuration okay

00:39:33,420 --> 00:39:44,940
thank you okay okay so we're done thank

00:39:42,510 --> 00:39:49,280
you for your speak and thank you for the

00:39:44,940 --> 00:39:49,280
participate for the session thank you

00:39:51,790 --> 00:39:59,900
and as a reminder all the video are

00:39:56,900 --> 00:40:03,410
stored locally in a locker server the

00:39:59,900 --> 00:40:08,059
name of the server it's files dot eps on

00:40:03,410 --> 00:40:10,549
and for the people that likes to maybe

00:40:08,059 --> 00:40:14,630
have a new o phone there is a coding

00:40:10,549 --> 00:40:19,190
competition sponsored by google and they

00:40:14,630 --> 00:40:21,230
propose as a prize the new samsung

00:40:19,190 --> 00:40:24,790
galaxy so if you're interested go to

00:40:21,230 --> 00:40:24,790

YouTube URL: https://www.youtube.com/watch?v=29rzDcisVZQ


