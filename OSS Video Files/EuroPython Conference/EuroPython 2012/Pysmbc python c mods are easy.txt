Title: Pysmbc python c mods are easy
Publication date: 2015-04-19
Playlist: EuroPython 2012
Description: 
	[EuroPython 2012] R Polli - 6 JULY 2012 in "Track Tagliatelle"
Captions: 
	00:02:03,840 --> 00:02:12,750
first at na a Bern McHale to blow me lo

00:02:08,830 --> 00:02:20,170
llamo song goes on and same I'm travel

00:02:12,750 --> 00:02:34,360
mantra volume measurement abdominal in

00:02:20,170 --> 00:02:50,049
Rivera synonyms register okay one two

00:02:34,360 --> 00:02:52,780
three brother ok ok I go into a trip

00:02:50,049 --> 00:02:55,200
rather do a trip rather one two three

00:02:52,780 --> 00:02:55,200
four five

00:03:02,460 --> 00:03:14,040
oops allora llamo Paco Mon on da moon

00:03:05,700 --> 00:03:17,750
dough and ra Suzette oh ok this is my

00:03:14,040 --> 00:03:17,750
cage ok

00:03:36,760 --> 00:03:39,760
ok

00:04:02,370 --> 00:04:16,000
so this is the first slide hi everybody

00:04:07,170 --> 00:04:26,009
I'll maybe I'll start with some

00:04:16,000 --> 00:04:28,750
presentation Hagan and her bathtub only

00:04:26,009 --> 00:04:34,960
from babble and I'm going to tell you

00:04:28,750 --> 00:04:38,380
all Python story it's a cell about even

00:04:34,960 --> 00:04:41,560
if you are a person noob like me you can

00:04:38,380 --> 00:04:44,949
even contribute to a project and get

00:04:41,560 --> 00:04:49,360
your patches accepted in a very few time

00:04:44,949 --> 00:04:54,729
I think it took more time to mix rights

00:04:49,360 --> 00:04:58,090
than to make the patch and you just have

00:04:54,729 --> 00:05:00,330
to use some tools that it Python and the

00:04:58,090 --> 00:05:03,400
new oven source environment gives you

00:05:00,330 --> 00:05:04,930
before starting I would like to thank my

00:05:03,400 --> 00:05:07,690
colleagues abyss grow which is a good

00:05:04,930 --> 00:05:11,190
sign bad spot and bubble which is the

00:05:07,690 --> 00:05:14,080
proud sponsor of this talk bubble is in

00:05:11,190 --> 00:05:17,169
Italian IT company that which delivers

00:05:14,080 --> 00:05:19,570
largeman infrastructure based on novel

00:05:17,169 --> 00:05:21,610
source software for we're Italian

00:05:19,570 --> 00:05:28,150
Internet service providers and public

00:05:21,610 --> 00:05:32,349
administrations so open source is

00:05:28,150 --> 00:05:36,010
popular people loves other sorts because

00:05:32,349 --> 00:05:39,639
it's free as easier but white people is

00:05:36,010 --> 00:05:43,979
afraid of contributing but there are a

00:05:39,639 --> 00:05:46,599
few people so I'm going to ask to you

00:05:43,979 --> 00:05:49,409
European why people doesn't contribute

00:05:46,599 --> 00:05:49,409
open source

00:05:54,510 --> 00:06:04,450
okay but that's true so he says because

00:06:01,810 --> 00:06:10,600
they're they're afraid to be criticized

00:06:04,450 --> 00:06:14,800
yeah because more because most many

00:06:10,600 --> 00:06:17,520
companies thinks that it's custom they

00:06:14,800 --> 00:06:22,320
are spending money but it's not useful

00:06:17,520 --> 00:06:27,960
because they work won't be accepted and

00:06:22,320 --> 00:06:31,420
introduced and some people because they

00:06:27,960 --> 00:06:37,840
is not confident that the patches are

00:06:31,420 --> 00:06:41,860
good so to be criticized we can we see

00:06:37,840 --> 00:06:45,150
in our experience that using the good

00:06:41,860 --> 00:06:50,140
tools like get up social coding and

00:06:45,150 --> 00:06:54,070
simply fantasy processes you should be

00:06:50,140 --> 00:06:59,110
very less scared you don't have to be

00:06:54,070 --> 00:07:03,130
afraid because that's we r I T that your

00:06:59,110 --> 00:07:08,580
job is is right and Laura but you don't

00:07:03,130 --> 00:07:08,580
have to be a guru to supportable sorts

00:07:09,720 --> 00:07:20,380
so after watching something about get up

00:07:13,840 --> 00:07:26,110
and no staffing we'll see how to create

00:07:20,380 --> 00:07:29,650
a simple see extension always made the

00:07:26,110 --> 00:07:32,590
same blank library and our story which

00:07:29,650 --> 00:07:34,180
is simple we claim the project and was

00:07:32,590 --> 00:07:37,120
blowing the good in touch with the

00:07:34,180 --> 00:07:41,110
lighting this is crucial then we work

00:07:37,120 --> 00:07:44,020
test first then we extended the library

00:07:41,110 --> 00:07:47,110
wrapping to function already present in

00:07:44,020 --> 00:07:52,620
the standard library in the sand and sea

00:07:47,110 --> 00:07:56,200
library and a double feature which is

00:07:52,620 --> 00:07:59,410
enabled by saamba to support windows

00:07:56,200 --> 00:08:01,409
access control lists the last thing here

00:07:59,410 --> 00:08:04,199
is that we done

00:08:01,409 --> 00:08:08,009
need to know SMB which is then the light

00:08:04,199 --> 00:08:10,919
for the protocol and the line semba to

00:08:08,009 --> 00:08:15,089
extend by somber we just said to learn

00:08:10,919 --> 00:08:20,189
the API the ebay exposed by the AC

00:08:15,089 --> 00:08:24,539
library so let's start with kadem gita

00:08:20,189 --> 00:08:28,019
the open source coding is not just a

00:08:24,539 --> 00:08:31,039
technical staff it's a social stuff you

00:08:28,019 --> 00:08:34,529
can be a really good technician

00:08:31,039 --> 00:08:37,709
wonderful programmer but if you don't

00:08:34,529 --> 00:08:40,939
learn to be rational your purchase won't

00:08:37,709 --> 00:08:45,420
be accepted don't know if you remember

00:08:40,939 --> 00:08:51,839
nice fatty was a fellas good developer

00:08:45,420 --> 00:08:54,480
of TD many pictures of me will never be

00:08:51,839 --> 00:08:57,110
accepted into the main tree and he made

00:08:54,480 --> 00:09:02,339
the fork of part of the interface or

00:08:57,110 --> 00:09:07,470
kiedy that's that's one of the reason

00:09:02,339 --> 00:09:10,860
because getting social is important in

00:09:07,470 --> 00:09:15,329
the other days how could you contribute

00:09:10,860 --> 00:09:18,149
your project do you remember I think

00:09:15,329 --> 00:09:21,180
somebody here well ok the man with a

00:09:18,149 --> 00:09:28,500
black hat how do you contribute to a

00:09:21,180 --> 00:09:31,980
project in the other days ok it was it

00:09:28,500 --> 00:09:36,389
was quite a highly I maintain as more

00:09:31,980 --> 00:09:40,860
java library and and it's still on svn

00:09:36,389 --> 00:09:43,860
and i got a lot of patches and i have to

00:09:40,860 --> 00:09:46,439
sell people hey please your purchase

00:09:43,860 --> 00:09:48,720
fine but please use the track one

00:09:46,439 --> 00:09:54,230
because if you give me a patch to attack

00:09:48,720 --> 00:09:57,449
adrees it's in no more useful even i get

00:09:54,230 --> 00:10:00,389
many patches of different branches and

00:09:57,449 --> 00:10:05,059
they have to make a lot of work and a

00:10:00,389 --> 00:10:10,250
lot of Redditch to get things together

00:10:05,059 --> 00:10:14,529
well that was the one dot zero he'll a

00:10:10,250 --> 00:10:19,749
cutting to the 0 is

00:10:14,529 --> 00:10:22,540
simple is me on github maybe the

00:10:19,749 --> 00:10:28,920
man with the black hat with asked Jesus

00:10:22,540 --> 00:10:34,529
a fork fork was the nightmare of every

00:10:28,920 --> 00:10:39,879
open-source maintainer 40 mins

00:10:34,529 --> 00:10:44,529
fragmenting the user base of an open

00:10:39,879 --> 00:10:47,410
source project in the first image we've

00:10:44,529 --> 00:10:52,889
got our web web main line and a lot of

00:10:47,410 --> 00:10:59,129
folks and what we have is sparse rights

00:10:52,889 --> 00:10:59,129
increasing efforts a lot of loss changes

00:10:59,699 --> 00:11:13,420
get up works like the Linux io scheduler

00:11:04,499 --> 00:11:17,139
it helps to merge rights so the fork

00:11:13,420 --> 00:11:21,519
approach of kita kita is the second one

00:11:17,139 --> 00:11:27,399
is not just like fork but continuously

00:11:21,519 --> 00:11:31,990
merge thoughts so get up trucks force

00:11:27,399 --> 00:11:35,649
for us and then help us to push changes

00:11:31,990 --> 00:11:40,769
to the master so well in in the first

00:11:35,649 --> 00:11:45,240
image we have a cascade tree just always

00:11:40,769 --> 00:11:52,329
the number of trees is always increasing

00:11:45,240 --> 00:11:55,509
in the second model we have some those

00:11:52,329 --> 00:12:02,079
are false trees because they're just

00:11:55,509 --> 00:12:05,079
like streams that sometimes rejoin to

00:12:02,079 --> 00:12:10,029
the master orbit between them so the

00:12:05,079 --> 00:12:14,230
number of fort of real Forks of

00:12:10,029 --> 00:12:17,189
different codes tends to to decrease

00:12:14,230 --> 00:12:17,189
periodically

00:12:18,499 --> 00:12:27,109
this is this will make your Martina

00:12:21,469 --> 00:12:35,089
happy and what that's good those are

00:12:27,109 --> 00:12:37,189
some some github features you can after

00:12:35,089 --> 00:12:39,289
you have the project you can

00:12:37,189 --> 00:12:41,569
touch and commit to your repository so

00:12:39,289 --> 00:12:45,679
you don't lose your changes you can

00:12:41,569 --> 00:12:48,649
track your own history then you can if

00:12:45,679 --> 00:12:51,259
you forget one of my projects you can

00:12:48,649 --> 00:12:55,689
push back your changes to my repository

00:12:51,259 --> 00:13:01,849
so no more male with patches no more

00:12:55,689 --> 00:13:04,689
unsynced versions and Malala I get the

00:13:01,849 --> 00:13:09,289
changes sorry so I can check your

00:13:04,689 --> 00:13:13,279
thought process and maybe I can merge

00:13:09,289 --> 00:13:16,939
partially your job and this is a really

00:13:13,279 --> 00:13:20,049
nice feature get a portal support squads

00:13:16,939 --> 00:13:23,779
annotation so you can discuss on get up

00:13:20,049 --> 00:13:27,919
about patches and about code and so

00:13:23,779 --> 00:13:34,069
before merging a patch you can maybe

00:13:27,919 --> 00:13:38,259
refuse a mare to a patch but discuss

00:13:34,069 --> 00:13:41,059
with the submitter and tell why did you

00:13:38,259 --> 00:13:46,069
do this thing in this way and not in

00:13:41,059 --> 00:13:47,569
that one and I know investing is the

00:13:46,069 --> 00:13:52,729
ability to match with different

00:13:47,569 --> 00:13:56,029
repositories so this is a gita boss and

00:13:52,729 --> 00:13:58,129
enabling technology that let us keep in

00:13:56,029 --> 00:14:02,659
touch with the maintainer don't lose our

00:13:58,129 --> 00:14:08,470
changes continuously tracking our job no

00:14:02,659 --> 00:14:14,239
enter spy samba everybody knows about

00:14:08,470 --> 00:14:16,399
python see extension if you go to c

00:14:14,239 --> 00:14:20,539
library and you don't want to implement

00:14:16,399 --> 00:14:25,759
it from scratch you can rub it with

00:14:20,539 --> 00:14:28,399
Python and so you get some advantage you

00:14:25,759 --> 00:14:31,699
enjoy a stable c library you have to

00:14:28,399 --> 00:14:34,910
just manage input output and error

00:14:31,699 --> 00:14:38,720
and the result is usually usually faster

00:14:34,910 --> 00:14:41,239
than a poor Python implementation here

00:14:38,720 --> 00:14:44,119
is as more example let's imagine we have

00:14:41,239 --> 00:14:46,939
got this embassy in our Python pact we

00:14:44,119 --> 00:14:49,639
use ipython everybody knows ipython it's

00:14:46,939 --> 00:14:54,379
a nice console that supports grow red

00:14:49,639 --> 00:15:01,009
line and we just imported the library

00:14:54,379 --> 00:15:03,829
just if it was a dove pie and print some

00:15:01,009 --> 00:15:13,699
concern so use just some functions that

00:15:03,829 --> 00:15:17,809
we have oops okay so let's start with an

00:15:13,699 --> 00:15:22,489
example imagine we have got a small

00:15:17,809 --> 00:15:30,249
factorial function we didn't see that is

00:15:22,489 --> 00:15:30,249
based on long long integer it is 64-bit

00:15:30,339 --> 00:15:39,529
integer so what should we do we create a

00:15:35,959 --> 00:15:44,449
rubber fight at C which is the source of

00:15:39,529 --> 00:15:47,119
our extension we clear the my factual

00:15:44,449 --> 00:15:49,819
function which basis bounces and

00:15:47,119 --> 00:15:54,039
validates the input calls the rubble

00:15:49,819 --> 00:15:59,679
function a return a Python object so

00:15:54,039 --> 00:16:02,720
simply oh here is the rubber function

00:15:59,679 --> 00:16:07,189
called the rabbit function and return a

00:16:02,720 --> 00:16:11,989
Python object where we get our structure

00:16:07,189 --> 00:16:17,299
to map to map person methods which is

00:16:11,989 --> 00:16:23,929
factorial to the see rapid function my

00:16:17,299 --> 00:16:29,839
factorial then we build it and import

00:16:23,929 --> 00:16:34,519
and play so it's really simple but we

00:16:29,839 --> 00:16:36,799
have to be careful pal singh and

00:16:34,519 --> 00:16:39,319
validating input and output is crucial

00:16:36,799 --> 00:16:43,899
we don't want to introduce buffer

00:16:39,319 --> 00:16:45,500
overflows and consistent behavior

00:16:43,899 --> 00:16:47,510
segmentation fault

00:16:45,500 --> 00:16:53,390
memory leaks important because we are

00:16:47,510 --> 00:16:56,050
loading a short library so the first

00:16:53,390 --> 00:16:59,480
thing to do is passing invalidating

00:16:56,050 --> 00:17:03,110
eventually creating new exceptions in

00:16:59,480 --> 00:17:05,689
the initialization function and then in

00:17:03,110 --> 00:17:10,220
case of error throw exceptions in the

00:17:05,689 --> 00:17:13,790
function throwing exception see module

00:17:10,220 --> 00:17:15,949
is just like it is done in C in C when

00:17:13,790 --> 00:17:20,060
you write a function and you want to

00:17:15,949 --> 00:17:22,640
support the air no you just to blend you

00:17:20,060 --> 00:17:25,970
just have to blank angle call a function

00:17:22,640 --> 00:17:29,200
and set the unenviable and then return

00:17:25,970 --> 00:17:34,640
for example minus one in case of our

00:17:29,200 --> 00:17:37,250
then the the user have to know that if

00:17:34,640 --> 00:17:41,720
the returning values of the c function

00:17:37,250 --> 00:17:45,410
is less than zero they have to see the

00:17:41,720 --> 00:17:49,580
error variable then here in pattern is

00:17:45,410 --> 00:17:51,980
similar buddy is well different you have

00:17:49,580 --> 00:17:54,170
to set the pyre variable which is just

00:17:51,980 --> 00:17:57,560
like there are no and when you return

00:17:54,170 --> 00:18:03,500
now in the C code Python will show

00:17:57,560 --> 00:18:07,040
exception so let's see the rapid

00:18:03,500 --> 00:18:12,890
function the x factorial get some

00:18:07,040 --> 00:18:16,850
arguments / pass tuple that is looking

00:18:12,890 --> 00:18:21,020
for an integral value it's a lie not at

00:18:16,850 --> 00:18:24,950
d just like print off if the variable

00:18:21,020 --> 00:18:29,630
given is not going to go we are just

00:18:24,950 --> 00:18:32,570
returning now but Python will throw an

00:18:29,630 --> 00:18:37,520
exception because the pyre is certain

00:18:32,570 --> 00:18:40,490
parts tuple next time we are using a

00:18:37,520 --> 00:18:46,880
virtual function returning a long long

00:18:40,490 --> 00:18:52,150
integer which is a eight byte so which

00:18:46,880 --> 00:18:57,260
is the max value supported by an eight

00:18:52,150 --> 00:18:58,150
but integral is just like a number with

00:18:57,260 --> 00:19:02,610
a

00:18:58,150 --> 00:19:11,610
Dean zeros and which is the largest

00:19:02,610 --> 00:19:16,480
factorial that fits 18 0 is 21 so

00:19:11,610 --> 00:19:19,480
because the rapid function gives

00:19:16,480 --> 00:19:22,710
meaningful variable without it gives

00:19:19,480 --> 00:19:28,990
meaningful results for only four and

00:19:22,710 --> 00:19:32,980
four input lower than 21 we check it in

00:19:28,990 --> 00:19:35,860
the function and in case of error we set

00:19:32,980 --> 00:19:40,960
the variable return returning tues an

00:19:35,860 --> 00:19:44,710
exception we define the exception even

00:19:40,960 --> 00:19:49,210
in the module and well in the init

00:19:44,710 --> 00:19:52,660
function we state that the factor is an

00:19:49,210 --> 00:19:56,920
exception we could have named it on the

00:19:52,660 --> 00:20:03,010
skull rapper dot factorial 2 large

00:19:56,920 --> 00:20:15,810
exception if that is just a string is it

00:20:03,010 --> 00:20:21,820
clear questions on that pop ok yeah you

00:20:15,810 --> 00:20:25,090
instead of using fact error E you will

00:20:21,820 --> 00:20:31,750
have to assign factor 0 to PI X

00:20:25,090 --> 00:20:35,890
underscore value arrow so then you just

00:20:31,750 --> 00:20:39,430
have to use a different function to

00:20:35,890 --> 00:20:43,870
throw value error for example in many

00:20:39,430 --> 00:20:49,350
case you may want to track DC or no

00:20:43,870 --> 00:20:55,330
variable so in some cases you will write

00:20:49,350 --> 00:20:57,730
a function that is just like set from

00:20:55,330 --> 00:21:03,730
error by air and the scar set from arrow

00:20:57,730 --> 00:21:07,900
in that way you can track what's

00:21:03,730 --> 00:21:10,909
happening so just try to put things

00:21:07,900 --> 00:21:14,179
together which are this extension

00:21:10,909 --> 00:21:16,960
Prince exceptions or constants or

00:21:14,179 --> 00:21:20,659
whatever you want to pass to the module

00:21:16,960 --> 00:21:24,080
functions wrapping functions function

00:21:20,659 --> 00:21:26,869
mental maps so something which ties

00:21:24,080 --> 00:21:30,169
together the name of the function and

00:21:26,869 --> 00:21:33,340
the function to go and the init rubber

00:21:30,169 --> 00:21:35,450
metal so they even model method

00:21:33,340 --> 00:21:37,519
functioning the exception should be

00:21:35,450 --> 00:21:42,679
stated because while you are not going

00:21:37,519 --> 00:21:46,609
to call them from another see and if you

00:21:42,679 --> 00:21:50,239
do something remember if you free and

00:21:46,609 --> 00:21:54,279
well even if you declare exception you

00:21:50,239 --> 00:22:00,229
should you should talk to python that

00:21:54,279 --> 00:22:03,109
not to remove those constants for

00:22:00,229 --> 00:22:07,700
example photography borrow from the

00:22:03,109 --> 00:22:10,070
pattern stack so for going deep you just

00:22:07,700 --> 00:22:13,279
have to read the documentation but if

00:22:10,070 --> 00:22:18,679
you're comfortable with see it's quite

00:22:13,279 --> 00:22:28,220
linear and okay then it's a session

00:22:18,679 --> 00:22:31,519
function so we have right our C

00:22:28,220 --> 00:22:38,239
extension which could be or not to be a

00:22:31,519 --> 00:22:44,090
module but we can even enjoy Python code

00:22:38,239 --> 00:22:48,859
how simply wrap again this extension in

00:22:44,090 --> 00:22:53,119
a python module so we got our factual

00:22:48,859 --> 00:22:57,529
library rapid by the rapid so and even

00:22:53,119 --> 00:23:01,779
wrap it Diane python module in the init

00:22:57,529 --> 00:23:06,499
dot pie we import couples which is a

00:23:01,779 --> 00:23:10,369
Python file and then import all methods

00:23:06,499 --> 00:23:17,499
that we defined in the extension again

00:23:10,369 --> 00:23:17,499
for my Python we can use all the stuff

00:23:19,900 --> 00:23:28,780
so knows let's contribute okay now we

00:23:24,730 --> 00:23:31,630
learn always mella see extension but

00:23:28,780 --> 00:23:35,260
before adding features we had to check

00:23:31,630 --> 00:23:39,310
the project status so we cloned the

00:23:35,260 --> 00:23:44,680
project settle at some environment the

00:23:39,310 --> 00:23:49,210
server and then just wrote towards no

00:23:44,680 --> 00:23:52,270
stress test nurse test is a pattern

00:23:49,210 --> 00:23:56,410
screen that out of these colors and run

00:23:52,270 --> 00:24:01,590
all test cases it supports civitas

00:23:56,410 --> 00:24:06,540
written with Python unit tests the

00:24:01,590 --> 00:24:10,860
important thing even when you use

00:24:06,540 --> 00:24:14,560
libraries is to add new feature only

00:24:10,860 --> 00:24:16,920
after successful tests because you have

00:24:14,560 --> 00:24:21,910
to ensure you're not breaking anything

00:24:16,920 --> 00:24:24,990
moreover verify and agree with your

00:24:21,910 --> 00:24:29,880
maintainer about the test environment

00:24:24,990 --> 00:24:34,030
first by saamba you need for example

00:24:29,880 --> 00:24:38,560
some summer shares with various

00:24:34,030 --> 00:24:42,630
permission and for our tests we have to

00:24:38,560 --> 00:24:46,780
mess with extended access control list

00:24:42,630 --> 00:24:50,140
you may need two or three users various

00:24:46,780 --> 00:24:53,950
groups and when you play these you have

00:24:50,140 --> 00:24:57,930
to document the environment needed to

00:24:53,950 --> 00:25:02,620
play successful test so it's easy but

00:24:57,930 --> 00:25:06,790
I've see that not everybody is tired

00:25:02,620 --> 00:25:09,850
with those things on successful tests we

00:25:06,790 --> 00:25:12,730
sub developing following the Gateway we

00:25:09,850 --> 00:25:16,360
created a separate branch that will

00:25:12,730 --> 00:25:20,220
matter on success I made this one check

00:25:16,360 --> 00:25:23,950
out I extreme under Scott's ethics at so

00:25:20,220 --> 00:25:26,980
this name helps the maintainer to know

00:25:23,950 --> 00:25:31,480
who is making the change and which

00:25:26,980 --> 00:25:33,490
changes are going to meet again test

00:25:31,480 --> 00:25:36,220
first what test

00:25:33,490 --> 00:25:39,580
before writing the code in this way

00:25:36,220 --> 00:25:45,309
you'll be more focused on target reading

00:25:39,580 --> 00:25:48,490
test is not just writing they find that

00:25:45,309 --> 00:25:51,690
you are going to do the right things but

00:25:48,490 --> 00:25:56,580
even planning writing test is just

00:25:51,690 --> 00:26:00,600
planning a schedule on your project so

00:25:56,580 --> 00:26:05,200
with no stealth you really have no

00:26:00,600 --> 00:26:09,640
reason not to do it so this is the

00:26:05,200 --> 00:26:14,470
sunday yuri test way then on the right

00:26:09,640 --> 00:26:18,790
side there is a nose test the difference

00:26:14,470 --> 00:26:20,950
is seemingly on the last part no script

00:26:18,790 --> 00:26:24,100
will have to discover this free em

00:26:20,950 --> 00:26:26,980
testando scores creepy so we knows you

00:26:24,100 --> 00:26:29,980
just have to name the script just like

00:26:26,980 --> 00:26:35,890
test underscore something and it's by

00:26:29,980 --> 00:26:39,059
default a test but so if we use it to

00:26:35,890 --> 00:26:42,880
unit test you can shift Nestle to nose

00:26:39,059 --> 00:26:45,850
but it seemed simpler so you're in a

00:26:42,880 --> 00:26:49,270
hurry you'll need to improve nose or the

00:26:45,850 --> 00:26:51,550
final test class just do a setup and

00:26:49,270 --> 00:26:57,780
teardown and your test in this case

00:26:51,550 --> 00:27:05,140
beware setup is run once for all tests

00:26:57,780 --> 00:27:08,950
so set up all tests teardown if you want

00:27:05,140 --> 00:27:11,650
to run setup and teardown methods before

00:27:08,950 --> 00:27:20,110
and after every test you have to use the

00:27:11,650 --> 00:27:24,490
from a way so the class way again no

00:27:20,110 --> 00:27:28,090
supports a notation so don't use it up

00:27:24,490 --> 00:27:30,880
wear to tear down just like pre and post

00:27:28,090 --> 00:27:35,530
methods they relate your test suite

00:27:30,880 --> 00:27:38,830
setup pre and post there you can use

00:27:35,530 --> 00:27:41,919
different obviously methods for setup

00:27:38,830 --> 00:27:44,440
and hair down and in using this

00:27:41,919 --> 00:27:45,470
annotation you can skip the glass stuff

00:27:44,440 --> 00:27:48,980
and

00:27:45,470 --> 00:27:51,890
just add which set up and set up until

00:27:48,980 --> 00:27:55,010
down I run even always before and after

00:27:51,890 --> 00:27:57,730
every test you can skip this test if you

00:27:55,010 --> 00:28:01,909
for example want to commit the test

00:27:57,730 --> 00:28:05,090
before you have done your your patch you

00:28:01,909 --> 00:28:08,570
can tell the Montana hey I had the

00:28:05,090 --> 00:28:10,730
disgust you can merge them but they are

00:28:08,570 --> 00:28:13,280
skipped so if somebody check out the

00:28:10,730 --> 00:28:16,610
project and run the test to see that if

00:28:13,280 --> 00:28:20,630
everything is fine well everything is

00:28:16,610 --> 00:28:26,179
fine because this is not done yet and no

00:28:20,630 --> 00:28:30,559
zeros it have to skip how can you run

00:28:26,179 --> 00:28:36,710
nose straight down with the pot with the

00:28:30,559 --> 00:28:40,280
name of the file using a single method a

00:28:36,710 --> 00:28:43,150
single test using a class changing the

00:28:40,280 --> 00:28:47,510
work directory of the test with minnows

00:28:43,150 --> 00:28:53,870
w and if you want to repose output just

00:28:47,510 --> 00:28:58,549
like ad s and V s no stairs usually

00:28:53,870 --> 00:29:02,570
silent tests so you just see a 1 dot for

00:28:58,549 --> 00:29:07,809
a successful test and s4 skip and f4

00:29:02,570 --> 00:29:11,210
fail if you use as you'll print out all

00:29:07,809 --> 00:29:15,919
the prints a statement that you put in

00:29:11,210 --> 00:29:20,659
your ear tests so and we are going to

00:29:15,919 --> 00:29:24,159
close here we started adding the get

00:29:20,659 --> 00:29:27,620
exact feature sonos ensures that

00:29:24,159 --> 00:29:33,070
everything we have done don't impact on

00:29:27,620 --> 00:29:36,530
next 16 features we certain ready test

00:29:33,070 --> 00:29:40,309
those stats are quite simple test that

00:29:36,530 --> 00:29:44,809
our constants are fine test that the

00:29:40,309 --> 00:29:46,659
methods and works for all valid

00:29:44,809 --> 00:29:51,799
attributes you are going to pass and

00:29:46,659 --> 00:29:54,919
another test the behavior with bad

00:29:51,799 --> 00:29:58,010
values this is important because we are

00:29:54,919 --> 00:30:02,180
going to pass something to see

00:29:58,010 --> 00:30:04,100
and if the input is my format you have

00:30:02,180 --> 00:30:06,490
to check that you don't get our

00:30:04,100 --> 00:30:11,330
segmentation fault a buffer overflows

00:30:06,490 --> 00:30:13,640
but the nice thing is that you're

00:30:11,330 --> 00:30:17,870
testing written in Python well in our

00:30:13,640 --> 00:30:21,680
case I'm catching for this size a

00:30:17,870 --> 00:30:26,050
runtime error in the next race will be a

00:30:21,680 --> 00:30:29,060
valuable just like States but even

00:30:26,050 --> 00:30:32,000
throwing a value error I get the air no

00:30:29,060 --> 00:30:34,040
variable from see because I like to

00:30:32,000 --> 00:30:36,350
check that the behavior is consistent

00:30:34,040 --> 00:30:41,990
with the C library i'm going to talk to

00:30:36,350 --> 00:30:44,690
invoke once you've done those simple

00:30:41,990 --> 00:30:48,560
lines you just have to code until tests

00:30:44,690 --> 00:30:53,510
are successful there the great job is

00:30:48,560 --> 00:30:57,290
just to find an agreement with the

00:30:53,510 --> 00:31:06,530
maintainer about tests if the maintainer

00:30:57,290 --> 00:31:09,380
with your test is surely match your

00:31:06,530 --> 00:31:13,280
passion included in the branch this is

00:31:09,380 --> 00:31:18,340
the last right adding the sonics

00:31:13,280 --> 00:31:21,800
attribute and futures and well actually

00:31:18,340 --> 00:31:25,520
the extended the some extended attribute

00:31:21,800 --> 00:31:28,430
that quite complex and our strings they

00:31:25,520 --> 00:31:34,300
are made of various parts revision owner

00:31:28,430 --> 00:31:38,210
group and values ACL to play with that

00:31:34,300 --> 00:31:43,720
the best way is to use Python because

00:31:38,210 --> 00:31:49,400
python is very nice imaging strings so

00:31:43,720 --> 00:31:52,820
now i'm walking on passing a class and

00:31:49,400 --> 00:31:56,990
to map all those extra decimal values

00:31:52,820 --> 00:32:01,040
from the windows code to something more

00:31:56,990 --> 00:32:10,100
readable and usable from python well to

00:32:01,040 --> 00:32:19,100
play these I sure I had to excuse me

00:32:10,100 --> 00:32:24,470
I had to modify the library behavior

00:32:19,100 --> 00:32:28,490
because as of now SMBC is just a single

00:32:24,470 --> 00:32:31,549
dot so file while I made a shift I

00:32:28,490 --> 00:32:33,919
created a directory put on the helper

00:32:31,549 --> 00:32:40,190
class just like we saw in the first

00:32:33,919 --> 00:32:44,960
slide so that we can write the helper

00:32:40,190 --> 00:32:49,760
class to manage ACL the tests are quite

00:32:44,960 --> 00:32:52,340
similar to the 401 and now I'm

00:32:49,760 --> 00:32:54,740
discussing with the maintainer about

00:32:52,340 --> 00:32:58,669
this shift because while this library is

00:32:54,740 --> 00:33:01,549
including viruses diversion and he wants

00:32:58,669 --> 00:33:04,490
to be confident again on my side is

00:33:01,549 --> 00:33:07,010
there the test directory is the same the

00:33:04,490 --> 00:33:10,850
tastes are the same and are still

00:33:07,010 --> 00:33:13,970
successful so I'm confident that even if

00:33:10,850 --> 00:33:18,260
I change and remixed everything the

00:33:13,970 --> 00:33:22,880
behavior of the library for the user is

00:33:18,260 --> 00:33:26,870
still the same so here this is the end

00:33:22,880 --> 00:33:29,419
of the story it talks again more to make

00:33:26,870 --> 00:33:33,230
the slide then to make the changes but I

00:33:29,419 --> 00:33:36,470
want to trade with with you because well

00:33:33,230 --> 00:33:41,179
I was and I'm still really a Python you

00:33:36,470 --> 00:33:44,179
but in a few time using those patterns

00:33:41,179 --> 00:33:47,750
and those tests I was able to contribute

00:33:44,179 --> 00:33:51,440
so you the Python guru really have no

00:33:47,750 --> 00:33:53,450
excuses for not contributing to such

00:33:51,440 --> 00:33:57,679
projects if you want to learn something

00:33:53,450 --> 00:34:00,770
about pie samba you can look at you can

00:33:57,679 --> 00:34:03,380
 me on get up or look at the stable

00:34:00,770 --> 00:34:07,460
version that is one stay well one step

00:34:03,380 --> 00:34:12,710
and a half behind or if you're curious

00:34:07,460 --> 00:34:16,879
about bubble and where you can watch

00:34:12,710 --> 00:34:20,800
something about linux system a Java C

00:34:16,879 --> 00:34:22,909
Python you can watch out your our

00:34:20,800 --> 00:34:25,549
company blog

00:34:22,909 --> 00:34:29,960
and what thank you excuse my English and

00:34:25,549 --> 00:34:35,299
still learning and hope you have not

00:34:29,960 --> 00:34:39,619
been so boring okay that's fine if your

00:34:35,299 --> 00:34:51,589
questions or if you want to see some

00:34:39,619 --> 00:34:54,980
code what okay yeah so thank you for the

00:34:51,589 --> 00:34:59,599
nice talk I have a question do you hear

00:34:54,980 --> 00:35:02,599
it that's okay about knows vs. a unit

00:34:59,599 --> 00:35:05,059
test well as these noticed great

00:35:02,599 --> 00:35:08,299
advantages compared to the classical

00:35:05,059 --> 00:35:12,500
unit test package but we're spies and to

00:35:08,299 --> 00:35:14,690
determine we gots a unit test to package

00:35:12,500 --> 00:35:18,980
and it seems to me that they are quite

00:35:14,690 --> 00:35:22,010
equivalent do you know relevant

00:35:18,980 --> 00:35:25,309
differences ifs are still relevant

00:35:22,010 --> 00:35:30,190
differences between what more the modern

00:35:25,309 --> 00:35:36,980
unit tests and knows we're actually a

00:35:30,190 --> 00:35:41,450
nose can support that's written with

00:35:36,980 --> 00:35:44,240
unit test if I don't mistake when you

00:35:41,450 --> 00:35:51,980
install knows you should have installed

00:35:44,240 --> 00:35:56,150
unit test before so it's just a way is

00:35:51,980 --> 00:36:02,059
just a tool that enables you to run

00:35:56,150 --> 00:36:06,349
tests in a simple way one thing is that

00:36:02,059 --> 00:36:11,210
if you for example if you have if you

00:36:06,349 --> 00:36:13,849
use eclipse or any ID that support unit

00:36:11,210 --> 00:36:17,720
test and you write the simplified one

00:36:13,849 --> 00:36:24,109
with knows probably it doesn't work so

00:36:17,720 --> 00:36:31,630
if you if you use it and something like

00:36:24,109 --> 00:36:34,289
eclipse that are our any Adi that as

00:36:31,630 --> 00:36:38,249
some extension may

00:36:34,289 --> 00:36:41,249
for unit tests you should be stick with

00:36:38,249 --> 00:36:44,699
unit tests but anyway you can run it

00:36:41,249 --> 00:36:47,729
with no stairs so if you have to run

00:36:44,699 --> 00:36:55,429
tests into a directory you just go

00:36:47,729 --> 00:37:00,900
straight windows any other questions no

00:36:55,429 --> 00:37:04,969
are you sure okay so thanks for the

00:37:00,900 --> 00:37:17,239
presentation and it was very nice Thanks

00:37:04,969 --> 00:37:17,239

YouTube URL: https://www.youtube.com/watch?v=Inzpxafkgr8


