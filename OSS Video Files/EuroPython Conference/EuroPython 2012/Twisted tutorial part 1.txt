Title: Twisted tutorial part 1
Publication date: 2015-04-19
Playlist: EuroPython 2012
Description: 
	[EuroPython 2012] S Thorne - 5 JULY 2012 in "Track Pizza Margherita"
Captions: 
	00:03:19,569 --> 00:03:22,680
see but somebody's going to remind me to

00:03:22,239 --> 00:03:28,769
go

00:03:22,680 --> 00:03:34,819
my hotel rooms is that should we get

00:03:28,769 --> 00:03:42,239
started we is it 9:00 so no one hi

00:03:34,819 --> 00:03:49,079
I'm plugging things is in is hard for

00:03:42,239 --> 00:03:58,439
Lauren's here but let's be tricky and

00:03:49,079 --> 00:04:02,400
double-click on that ah you do yes just

00:03:58,439 --> 00:04:04,590
miss the errors never show that again so

00:04:02,400 --> 00:04:07,739
just to be sure we are doing the twister

00:04:04,590 --> 00:04:11,129
training and it was what with the with

00:04:07,739 --> 00:04:13,349
the other testing training that was here

00:04:11,129 --> 00:04:15,269
scheduled here so if you are here for

00:04:13,349 --> 00:04:17,570
the testing training you need to go

00:04:15,269 --> 00:04:22,889
upstairs in the pits and up your room

00:04:17,570 --> 00:04:28,169
alright alright welcome welcome

00:04:22,889 --> 00:04:29,760
so this is an introductory talk on how

00:04:28,169 --> 00:04:31,860
to write code with twisted we're going

00:04:29,760 --> 00:04:34,530
to be covering how to write clients

00:04:31,860 --> 00:04:37,490
servers how to do flow control with

00:04:34,530 --> 00:04:40,740
deferreds a few tricks and tips

00:04:37,490 --> 00:04:43,560
different ways of doing things if you if

00:04:40,740 --> 00:04:45,740
you did anybody go to the talk last year

00:04:43,560 --> 00:04:49,110
the same training session last year

00:04:45,740 --> 00:04:51,900
that's fantastic great

00:04:49,110 --> 00:04:53,370
does this clicker work well yes but you

00:04:51,900 --> 00:05:01,550
have to yes but you have you plug it in

00:04:53,370 --> 00:05:04,159
post it oh well electronic says that so

00:05:01,550 --> 00:05:08,009
twisted is an asynchronous i/o framework

00:05:04,159 --> 00:05:14,340
meaning principally single threaded

00:05:08,009 --> 00:05:15,780
event loop driven callbacks the idea of

00:05:14,340 --> 00:05:19,860
the idea of this training is you'll be

00:05:15,780 --> 00:05:22,259
able to comfortably write some code dive

00:05:19,860 --> 00:05:24,599
into the sauce find out the the right

00:05:22,259 --> 00:05:27,199
things to use and hopefully ask the

00:05:24,599 --> 00:05:27,199
right questions

00:05:28,490 --> 00:05:31,430
apparently even the spacebar doesn't

00:05:30,300 --> 00:05:34,350
work anymore

00:05:31,430 --> 00:05:38,220
all right so my name is Steven thorne

00:05:34,350 --> 00:05:41,850
I'm a I'm an SRE with Google and I've

00:05:38,220 --> 00:05:44,580
done quite a bit of networking in my in

00:05:41,850 --> 00:05:48,270
my career and this is so I'm Lawrence

00:05:44,580 --> 00:05:51,630
and I'm I've been at risk or dev since

00:05:48,270 --> 00:05:53,880
2009 currently doing a startup that uses

00:05:51,630 --> 00:05:55,440
twisted extensively and my last startup

00:05:53,880 --> 00:05:56,820
was also one that used twisted

00:05:55,440 --> 00:06:00,590
extensively and ended up being a good

00:05:56,820 --> 00:06:03,120
exit so yeah it's been good to be

00:06:00,590 --> 00:06:05,900
somehow I've been a dev since sort of

00:06:03,120 --> 00:06:08,340
2002 but it's not the sort of thing

00:06:05,900 --> 00:06:10,310
okay so raise your hand if you don't

00:06:08,340 --> 00:06:13,669
know work programming before at all

00:06:10,310 --> 00:06:15,150
right event loop programming you select

00:06:13,669 --> 00:06:20,479
pole

00:06:15,150 --> 00:06:22,919
all right and in other languages Java

00:06:20,479 --> 00:06:27,960
okay great

00:06:22,919 --> 00:06:30,840
now we've got on the files EP website

00:06:27,960 --> 00:06:33,210
some some files that would be useful for

00:06:30,840 --> 00:06:36,450
you I also have them on these USB keys

00:06:33,210 --> 00:06:39,500
if you want if you're if anybody needs

00:06:36,450 --> 00:06:42,300
some files the DP should be quite quick

00:06:39,500 --> 00:06:45,590
passes around and all of them no no I

00:06:42,300 --> 00:06:52,280
haven't loaded those yet yeah sure so

00:06:45,590 --> 00:06:55,560
they're on these keys that they so um

00:06:52,280 --> 00:06:57,120
that's a quick link to that but it you

00:06:55,560 --> 00:06:59,340
can actually just navigate to file so DP

00:06:57,120 --> 00:07:02,870
go down the tutorial and then the

00:06:59,340 --> 00:07:05,310
twisted training is the link you want a

00:07:02,870 --> 00:07:09,660
later version of twisted in fact I put

00:07:05,310 --> 00:07:11,669
12.1 up there because that's the current

00:07:09,660 --> 00:07:14,550
release so the twisted versions they go

00:07:11,669 --> 00:07:19,830
on here so that's 2012 the second

00:07:14,550 --> 00:07:21,270
release of 2012 the I didn't put the API

00:07:19,830 --> 00:07:26,970
Doc's on there that was silly of me

00:07:21,270 --> 00:07:31,400
there on the net we go down on them uh

00:07:26,970 --> 00:07:31,400
yeah if you know

00:07:33,590 --> 00:07:41,190
yeah do that so there's there's some

00:07:39,360 --> 00:07:43,260
example files there which will be useful

00:07:41,190 --> 00:07:51,090
because it will save you a bit of typing

00:07:43,260 --> 00:07:55,470
during it during the presentation yeah

00:07:51,090 --> 00:07:57,420
yeah it'll do that if you have twister

00:07:55,470 --> 00:08:00,050
installed we basically want to get to

00:07:57,420 --> 00:08:00,050
about that point

00:08:20,970 --> 00:08:27,230
and if you have a Mac and you need GCC

00:08:23,670 --> 00:08:31,670
tools there on the USB keys as well as

00:08:27,230 --> 00:08:31,670
well as a real version of Python

00:09:10,560 --> 00:09:16,910
oh is that the best way getting is that

00:09:14,129 --> 00:09:16,910
the best way really

00:09:17,790 --> 00:09:21,170
it's Gnostic

00:09:37,540 --> 00:09:47,920
Oh Abed the best place for the camera

00:09:42,970 --> 00:09:51,340
around anyway the brainy yeah

00:09:47,920 --> 00:09:53,020
shop please feel free to ask questions

00:09:51,340 --> 00:09:59,950
at any time especially if I'm being

00:09:53,020 --> 00:10:00,940
unclear or just any time yeah sorry you

00:09:59,950 --> 00:10:03,370
don't have to take the whole thing you

00:10:00,940 --> 00:10:05,590
can just get a file sleepy that short

00:10:03,370 --> 00:10:06,790
link should work provided the internet

00:10:05,590 --> 00:10:17,860
does that if the interns are working

00:10:06,790 --> 00:10:19,600
it's all on the USB keys yep the Mac

00:10:17,860 --> 00:10:21,220
port version is yet the one that's

00:10:19,600 --> 00:10:24,070
installed on Snow Leopard is version 11

00:10:21,220 --> 00:10:25,570
it's kind of alright it's just a bit

00:10:24,070 --> 00:10:29,130
painful if you want to install extra

00:10:25,570 --> 00:10:32,320
tools yep

00:10:29,130 --> 00:10:36,940
most annoyingly virtually doesn't work

00:10:32,320 --> 00:10:43,740
for it no no don't don't trust too much

00:10:36,940 --> 00:10:43,740
but it version 11 should work yeah

00:11:01,550 --> 00:11:04,120
right

00:11:06,050 --> 00:11:08,679
right

00:11:09,179 --> 00:11:15,359
think I'll just continue on that's very

00:11:14,549 --> 00:11:24,569
strange

00:11:15,359 --> 00:11:44,129
what if it turns out that when you step

00:11:24,569 --> 00:11:44,909
on the cable it unplugs all right so I'm

00:11:44,129 --> 00:11:48,649
just going to go through some

00:11:44,909 --> 00:11:52,469
introductory network concepts I mean

00:11:48,649 --> 00:11:54,419
it's it's quite self-explanatory what a

00:11:52,469 --> 00:11:57,479
network program is sending sending a

00:11:54,419 --> 00:11:59,189
stream between two sites server client

00:11:57,479 --> 00:12:02,519
we're going to be starting off writing

00:11:59,189 --> 00:12:06,179
clients move onto servers but of course

00:12:02,519 --> 00:12:09,059
servers end up being clients basic

00:12:06,179 --> 00:12:14,519
tcp/ip server listens on a port client

00:12:09,059 --> 00:12:17,039
connects that port with twisted

00:12:14,519 --> 00:12:20,339
fortunately now finally has rudimentary

00:12:17,039 --> 00:12:22,829
ipv6 support so but I haven't really

00:12:20,339 --> 00:12:26,159
investigated that lately but you know

00:12:22,829 --> 00:12:30,029
this is once you establish a stream

00:12:26,159 --> 00:12:34,859
they're all the same reading and writing

00:12:30,029 --> 00:12:38,429
data in a in a in a blocking not a sink

00:12:34,859 --> 00:12:40,679
well a system where you have one throw

00:12:38,429 --> 00:12:43,699
to one process per connection you can

00:12:40,679 --> 00:12:45,749
simply just call write and that will

00:12:43,699 --> 00:12:47,669
return when it's finished writing you

00:12:45,749 --> 00:12:49,439
call read it will return what it when it

00:12:47,669 --> 00:12:57,959
has received some data

00:12:49,439 --> 00:13:00,059
the idea of see I didn't write these

00:12:57,959 --> 00:13:08,459
slides originally so I don't know what's

00:13:00,059 --> 00:13:10,049
coming sometimes so ETA in on a single

00:13:08,459 --> 00:13:12,029
threaded situation where you have no

00:13:10,049 --> 00:13:14,309
concurrency whatsoever you end up in a

00:13:12,029 --> 00:13:18,269
situation where when multiple clients

00:13:14,309 --> 00:13:20,789
connect at simultaneously you end up

00:13:18,269 --> 00:13:22,550
with a second client getting rejected or

00:13:20,789 --> 00:13:28,249
in a queue or

00:13:22,550 --> 00:13:30,860
depending on your your queue length um

00:13:28,249 --> 00:13:34,459
but they'll get timeouts and whatnot and

00:13:30,860 --> 00:13:35,930
it's just you know not positive so there

00:13:34,459 --> 00:13:40,610
are different paradigms are doing things

00:13:35,930 --> 00:13:42,860
you want to be able to have multiple

00:13:40,610 --> 00:13:44,509
clients connect and there are various

00:13:42,860 --> 00:13:46,759
different techniques for P a new process

00:13:44,509 --> 00:13:49,399
having worker threads and asynchronous

00:13:46,759 --> 00:13:51,199
i/o now twisted is asynchronous IO I'm

00:13:49,399 --> 00:13:52,850
sure many of you have done various

00:13:51,199 --> 00:13:56,029
different ways of doing this so I mean

00:13:52,850 --> 00:13:59,240
if you've ever run a web server they

00:13:56,029 --> 00:14:02,959
often use a combination of techniques a

00:13:59,240 --> 00:14:06,459
patch uses multi process and can use

00:14:02,959 --> 00:14:08,600
multi thread and all sorts of things I

00:14:06,459 --> 00:14:10,839
think this is a description from the web

00:14:08,600 --> 00:14:10,839
site

00:14:12,110 --> 00:14:23,329
I mean you can read that so the idea is

00:14:18,649 --> 00:14:27,730
okay so this is from the API Docs this

00:14:23,329 --> 00:14:29,959
is some of the technologies which are

00:14:27,730 --> 00:14:33,319
available these are the sub packages of

00:14:29,959 --> 00:14:34,009
twisted dot so just looking down this

00:14:33,319 --> 00:14:38,870
list

00:14:34,009 --> 00:14:43,149
Twista has implementations for ssh v2

00:14:38,870 --> 00:14:43,149
and telnet that's conch ah

00:14:44,319 --> 00:14:52,009
authentication databases please ignore

00:14:48,649 --> 00:14:57,050
the documentation generation system the

00:14:52,009 --> 00:14:58,249
Sphinx is much much better mail manhole

00:14:57,050 --> 00:14:59,509
is actually very interesting it allows

00:14:58,249 --> 00:15:01,970
you to connect into a running process

00:14:59,509 --> 00:15:03,769
and get a Python prompt and you can

00:15:01,970 --> 00:15:05,779
interact with the running process I

00:15:03,769 --> 00:15:08,149
might be a bit of inserting it here but

00:15:05,779 --> 00:15:10,699
if if you are running twisted and you

00:15:08,149 --> 00:15:12,800
want to be able to divide what the heck

00:15:10,699 --> 00:15:14,749
is going on well traditionally I would

00:15:12,800 --> 00:15:17,870
always open up a Python prompt and start

00:15:14,749 --> 00:15:19,519
typing at it you know if it's a local

00:15:17,870 --> 00:15:20,689
program and just import my modules it's

00:15:19,519 --> 00:15:22,459
very hard to do that when you go to the

00:15:20,689 --> 00:15:24,050
running event loop man Hall allows you

00:15:22,459 --> 00:15:29,209
to do that actually just tell it that

00:15:24,050 --> 00:15:34,459
telnet N or SSH in and find out blah

00:15:29,209 --> 00:15:35,720
blah blah this is a this is actually a

00:15:34,459 --> 00:15:37,850
bit of a dated graph

00:15:35,720 --> 00:15:41,560
but it shows that the components are

00:15:37,850 --> 00:15:43,910
twisted so this have a laser on it yes

00:15:41,560 --> 00:15:55,790
little button somewhere there's a middle

00:15:43,910 --> 00:15:57,379
button supposed to well I wanted was

00:15:55,790 --> 00:16:06,019
freaking sharks with frickin laser beams

00:15:57,379 --> 00:16:07,790
alright so all the way on the left

00:16:06,019 --> 00:16:10,759
Twitter's application that's that's

00:16:07,790 --> 00:16:13,519
what's what the box is labeled the

00:16:10,759 --> 00:16:15,949
reactor is our event loop that can do

00:16:13,519 --> 00:16:18,709
GUI integration so you can run a twisted

00:16:15,949 --> 00:16:21,079
program with a event loop and that can I

00:16:18,709 --> 00:16:24,860
interact with their user interface event

00:16:21,079 --> 00:16:26,660
loop that's there so if you can run GDK

00:16:24,860 --> 00:16:29,269
applications and it and it cooperates

00:16:26,660 --> 00:16:32,839
correctly with the GDK main loop the

00:16:29,269 --> 00:16:34,160
windows main loop the well WX which

00:16:32,839 --> 00:16:36,470
doesn't really have a main loop but it's

00:16:34,160 --> 00:16:39,199
still tries to integrate with it pretty

00:16:36,470 --> 00:16:41,329
much anything by Objective C there's a

00:16:39,199 --> 00:16:42,740
way of if you're writing Mac OS X

00:16:41,329 --> 00:16:45,439
applications you can have it neatly

00:16:42,740 --> 00:16:47,389
cooperate with all of us X's native

00:16:45,439 --> 00:16:49,819
event loop stuff so pretty much any

00:16:47,389 --> 00:16:52,069
anything that you can imagine tk2 if

00:16:49,819 --> 00:16:53,540
you're really into that anything you can

00:16:52,069 --> 00:16:54,829
imagine you can write an event loop and

00:16:53,540 --> 00:16:59,689
you can have it cooperate nicely with

00:16:54,829 --> 00:17:05,059
twisted all right over there we just

00:16:59,689 --> 00:17:08,329
below that we have twisty there that's

00:17:05,059 --> 00:17:10,370
the if you if you are writing a

00:17:08,329 --> 00:17:13,520
application you want to sort of set it

00:17:10,370 --> 00:17:14,839
up as a daemon on your system well you

00:17:13,520 --> 00:17:17,900
know in etcetera init.d

00:17:14,839 --> 00:17:19,549
blah blah blah twisty is the best way to

00:17:17,900 --> 00:17:20,709
do entry point to that because it gives

00:17:19,549 --> 00:17:24,140
you all the things you need for

00:17:20,709 --> 00:17:25,970
demonization system logging all of that

00:17:24,140 --> 00:17:27,470
that that setup process is is

00:17:25,970 --> 00:17:29,360
encapsulated with into a sneak command

00:17:27,470 --> 00:17:30,740
line arguments trial as a unit testing

00:17:29,360 --> 00:17:36,679
framework

00:17:30,740 --> 00:17:38,419
I said ignore law really do up here we

00:17:36,679 --> 00:17:40,400
have twisted right at the top we have

00:17:38,419 --> 00:17:44,270
twisted Internet all right do have a

00:17:40,400 --> 00:17:48,440
laser so that's that supports TCP UDP

00:17:44,270 --> 00:17:49,340
SSL SSL's very important security is

00:17:48,440 --> 00:17:50,720
very important you need

00:17:49,340 --> 00:17:53,420
be able to support it it's actually

00:17:50,720 --> 00:17:56,930
quite a quite easy provided you have

00:17:53,420 --> 00:17:58,810
your certificate set up protocols so

00:17:56,930 --> 00:18:01,730
this is all the high-level protocols

00:17:58,810 --> 00:18:11,840
there's a lot that are pre implemented

00:18:01,730 --> 00:18:13,580
or or whatnot DNS SSH SMTP HTTP pop3 and

00:18:11,840 --> 00:18:15,770
some more esoteric ones so if you're on

00:18:13,580 --> 00:18:19,040
a postfix server for instance you can

00:18:15,770 --> 00:18:20,330
have a postfix look up daemon widget

00:18:19,040 --> 00:18:22,430
which just ends up being you know

00:18:20,330 --> 00:18:25,670
subclass one thing override a method and

00:18:22,430 --> 00:18:29,210
then suddenly you can interact with so I

00:18:25,670 --> 00:18:32,210
said Postgres yes I meant postfix I was

00:18:29,210 --> 00:18:33,880
I was going to incorrect you it yeah but

00:18:32,210 --> 00:18:35,570
there's post Chester's native Postgres

00:18:33,880 --> 00:18:36,710
implementation in there too but I don't

00:18:35,570 --> 00:18:38,780
think it's interested protocols yet

00:18:36,710 --> 00:18:41,540
there's a ticket for it listen because

00:18:38,780 --> 00:18:43,850
that's in a txt Alaska so on launchpad

00:18:41,540 --> 00:18:46,490
if you go to launchpad net / TX there's

00:18:43,850 --> 00:18:47,840
a you know it's very cumbersome to have

00:18:46,490 --> 00:18:49,850
everything embedded within the one

00:18:47,840 --> 00:18:53,030
package within the twister package so we

00:18:49,850 --> 00:18:55,010
have the the TX project which is a third

00:18:53,030 --> 00:18:57,500
party code that people have just written

00:18:55,010 --> 00:19:00,530
and put on launchpad a lot of the Tris

00:18:57,500 --> 00:19:02,150
developers use be said are and therefore

00:19:00,530 --> 00:19:04,940
end up on launchpad but not all do

00:19:02,150 --> 00:19:11,840
there's a whole lot on github yeah you

00:19:04,940 --> 00:19:13,970
use a lot of github and misc stuff so

00:19:11,840 --> 00:19:15,140
for instance everybody wants to interact

00:19:13,970 --> 00:19:16,940
with databases there's really good

00:19:15,140 --> 00:19:19,150
support for that when you're running an

00:19:16,940 --> 00:19:20,990
event loop program it's very hard to

00:19:19,150 --> 00:19:24,940
interact with databases because

00:19:20,990 --> 00:19:27,560
databases are blocking interfaces so

00:19:24,940 --> 00:19:29,090
that's a nice neat little way of

00:19:27,560 --> 00:19:32,420
encapsulating the the thread pool

00:19:29,090 --> 00:19:36,290
behavior required in order to talk to

00:19:32,420 --> 00:19:40,250
you know SQL a MySQL Postgres we don't

00:19:36,290 --> 00:19:42,680
non-blocking now so we're primarily a

00:19:40,250 --> 00:19:44,810
networking framework but general purpose

00:19:42,680 --> 00:19:48,830
software you need to have those

00:19:44,810 --> 00:19:52,990
capabilities oh now what is this this is

00:19:48,830 --> 00:19:57,470
twisted Internet this is the support for

00:19:52,990 --> 00:19:59,930
sources and destinations of events this

00:19:57,470 --> 00:20:01,490
is the list of packages within the

00:19:59,930 --> 00:20:02,730
twisted internet sorry modules within

00:20:01,490 --> 00:20:05,910
twisted into their package

00:20:02,730 --> 00:20:07,230
and and we we discussed earlier the

00:20:05,910 --> 00:20:10,530
different main loops so this is where

00:20:07,230 --> 00:20:13,590
they are CF reactor there is sorry

00:20:10,530 --> 00:20:16,590
reactor is the name of the main loop but

00:20:13,590 --> 00:20:19,590
that's more or less all it is CF reactor

00:20:16,590 --> 00:20:22,620
is what I call it call foundation that's

00:20:19,590 --> 00:20:24,600
the back that's basically oil soaks yeah

00:20:22,620 --> 00:20:26,280
end points you'll be seeing a lot of

00:20:24,600 --> 00:20:28,220
examples of end points that's just a

00:20:26,280 --> 00:20:31,530
neat way of saying this is the

00:20:28,220 --> 00:20:35,760
abstracting away something which

00:20:31,530 --> 00:20:37,140
represents a server port and the and the

00:20:35,760 --> 00:20:38,790
protocol it attaches to so you can

00:20:37,140 --> 00:20:41,460
create one protocol and attach that your

00:20:38,790 --> 00:20:45,750
SSL listener your TCP listener you UNIX

00:20:41,460 --> 00:20:49,820
socket when it's listener glab GDK i

00:20:45,750 --> 00:20:52,020
notify a standard i/o is very important

00:20:49,820 --> 00:20:55,559
when 32 event reactor what we were

00:20:52,020 --> 00:20:56,520
pointing to no wheantr the win32 and WX

00:20:55,559 --> 00:20:59,160
the ones that we were talking about

00:20:56,520 --> 00:21:02,640
earlier yeah so um so it really does

00:20:59,160 --> 00:21:06,870
actually work on windows 32 and is it

00:21:02,640 --> 00:21:08,340
here as iocp here on this list you don't

00:21:06,870 --> 00:21:11,640
actually want to use one 32 event

00:21:08,340 --> 00:21:12,900
reactor it turns out that that iocp is a

00:21:11,640 --> 00:21:16,880
much better way of doing things that's

00:21:12,900 --> 00:21:19,890
also supported iocp czar edge driven

00:21:16,880 --> 00:21:21,780
iocp is kind of like a Paul but for is

00:21:19,890 --> 00:21:24,270
the II Paul equivalent or the KQ

00:21:21,780 --> 00:21:25,860
equivalent for Windows it's a lot uglier

00:21:24,270 --> 00:21:27,570
but it's the only thing to do really

00:21:25,860 --> 00:21:29,460
fascinate on with these be if you have

00:21:27,570 --> 00:21:31,200
you select on Windows with Python you

00:21:29,460 --> 00:21:34,110
find you have a 64 file to script a

00:21:31,200 --> 00:21:36,059
limit on your select that's a little low

00:21:34,110 --> 00:21:39,210
we like it in the thousands

00:21:36,059 --> 00:21:41,160
and so therefore iocp is a better

00:21:39,210 --> 00:21:44,340
solution now I don't know why it's not

00:21:41,160 --> 00:21:49,070
on that list okay so this is a short

00:21:44,340 --> 00:21:51,960
list of things which are useful um tasks

00:21:49,070 --> 00:21:53,400
tasks is where you'll find you know I

00:21:51,960 --> 00:21:56,640
want to call a function every five

00:21:53,400 --> 00:21:59,460
minutes defer this doesn't actually did

00:21:56,640 --> 00:22:01,340
it belong in here because it is pure

00:21:59,460 --> 00:22:05,549
Python it doesn't rely on the main loop

00:22:01,340 --> 00:22:08,220
the reactor is the place you import the

00:22:05,549 --> 00:22:10,130
the main loop from that abstracts to the

00:22:08,220 --> 00:22:12,870
correct one that using on your system

00:22:10,130 --> 00:22:17,340
protocol is the basics you need in order

00:22:12,870 --> 00:22:19,500
to set up a client-server protocol

00:22:17,340 --> 00:22:23,639
this is where all the exceptions are and

00:22:19,500 --> 00:22:28,740
endpoints of course is is where you do a

00:22:23,639 --> 00:22:30,360
listener or later so so this is a little

00:22:28,740 --> 00:22:33,570
representation you know if you're doing

00:22:30,360 --> 00:22:36,720
multi-threaded you do some like this and

00:22:33,570 --> 00:22:38,100
each of each of the connections that's

00:22:36,720 --> 00:22:42,990
been accepted will be waiting at

00:22:38,100 --> 00:22:47,639
different times so twister does it all

00:22:42,990 --> 00:22:50,070
in one loop and multiplexers the reactor

00:22:47,639 --> 00:22:51,960
calls callbacks now I should stress that

00:22:50,070 --> 00:22:55,019
if you has anybody heard of a deferred

00:22:51,960 --> 00:22:57,210
before there's one in the book quite a

00:22:55,019 --> 00:22:59,549
few in the room okay so the deferred is

00:22:57,210 --> 00:23:00,840
the attraction we use for organizing

00:22:59,549 --> 00:23:06,120
callbacks

00:23:00,840 --> 00:23:08,039
that's callbacks for questions that

00:23:06,120 --> 00:23:09,840
you've asked and there are promise of a

00:23:08,039 --> 00:23:11,130
result to come now that's not the same

00:23:09,840 --> 00:23:13,350
callback as what we're talking in the

00:23:11,130 --> 00:23:14,490
context of the reactor the callbacks

00:23:13,350 --> 00:23:16,380
what we're talking about in the context

00:23:14,490 --> 00:23:18,320
the reactor or things like a connection

00:23:16,380 --> 00:23:20,690
has been made you've received more data

00:23:18,320 --> 00:23:23,700
you've just lost the connection

00:23:20,690 --> 00:23:26,940
somebody's closed their terminal the

00:23:23,700 --> 00:23:29,549
whole thing shutting down now the

00:23:26,940 --> 00:23:31,649
difference is that I deferred as a the

00:23:29,549 --> 00:23:33,090
phone is only called once whereas these

00:23:31,649 --> 00:23:37,139
kind of callback functions get called

00:23:33,090 --> 00:23:39,240
over and over and over so a good example

00:23:37,139 --> 00:23:41,100
of a deferred would be for example let's

00:23:39,240 --> 00:23:43,769
say you want to download a web page um

00:23:41,100 --> 00:23:45,870
then you call press add a web client get

00:23:43,769 --> 00:23:47,130
page and that gives you a deferred and

00:23:45,870 --> 00:23:49,049
whenever the web page is completely

00:23:47,130 --> 00:23:51,240
downloaded the deferred fire is with the

00:23:49,049 --> 00:23:53,039
body of the web page if you try to fire

00:23:51,240 --> 00:23:57,360
it twice it raises an exception as it

00:23:53,039 --> 00:24:01,679
should so this is the most basic person

00:23:57,360 --> 00:24:03,090
program go type run import from twisted

00:24:01,679 --> 00:24:05,639
on internet import reactor which is

00:24:03,090 --> 00:24:08,789
something you will see on a lot of

00:24:05,639 --> 00:24:11,850
slides most twisted programs so does

00:24:08,789 --> 00:24:14,330
everyone have a working twisted now can

00:24:11,850 --> 00:24:18,960
they open a ripple import twisted and

00:24:14,330 --> 00:24:20,340
not get an exception and preferably get

00:24:18,960 --> 00:24:22,409
a recent version if anyone has any

00:24:20,340 --> 00:24:25,919
problems with that I'll be more than

00:24:22,409 --> 00:24:27,480
happy to come and help but so this is

00:24:25,919 --> 00:24:28,540
starting in main loop and this will run

00:24:27,480 --> 00:24:30,780
forever

00:24:28,540 --> 00:24:35,890
we'll have to control see out of it now

00:24:30,780 --> 00:24:37,810
the reactor only runs and stops once so

00:24:35,890 --> 00:24:41,280
there are three methods which are very

00:24:37,810 --> 00:24:43,510
important react or unreacted stop and

00:24:41,280 --> 00:24:45,700
the one that you should never use which

00:24:43,510 --> 00:24:48,220
is reacted or crash the difference

00:24:45,700 --> 00:24:50,830
between stop and crash is that stop will

00:24:48,220 --> 00:24:53,320
shut down all your TCP connections and

00:24:50,830 --> 00:24:55,990
tear everything down and prepare for

00:24:53,320 --> 00:24:58,480
system exit crash won't crash will leave

00:24:55,990 --> 00:25:00,010
from that so if you're doing really

00:24:58,480 --> 00:25:07,720
hacky stuff you won't crash what you

00:25:00,010 --> 00:25:11,710
never do so this is not the slide that I

00:25:07,720 --> 00:25:13,840
thought would appear so I thought I'd

00:25:11,710 --> 00:25:15,250
gone through and edited this so that it

00:25:13,840 --> 00:25:18,160
would use end points maybe the next

00:25:15,250 --> 00:25:21,070
slide shows an end point note what

00:25:18,160 --> 00:25:26,580
happens but I don't know what's

00:25:21,070 --> 00:25:28,420
happening there all right so okay so

00:25:26,580 --> 00:25:34,230
this method

00:25:28,420 --> 00:25:38,830
listen TCP okay laser sight

00:25:34,230 --> 00:25:40,240
listen TCP is the simplest way absolute

00:25:38,830 --> 00:25:45,640
simplest way of science listen on port

00:25:40,240 --> 00:25:47,440
this listens on listens on the blank

00:25:45,640 --> 00:25:48,250
interface meaning all interfaces port

00:25:47,440 --> 00:25:50,620
00:25:48,250 --> 00:25:53,250
and some question mark so those question

00:25:50,620 --> 00:25:57,310
marks are what we call the factory

00:25:53,250 --> 00:25:58,960
please go ahead type this out either do

00:25:57,310 --> 00:26:02,610
it you know text files probably easiest

00:25:58,960 --> 00:26:02,610
because you'll be editing symbol files

00:26:04,740 --> 00:26:09,090
you'll have to import protocol

00:26:13,440 --> 00:26:18,210
if you want to save typing you can

00:26:15,960 --> 00:26:19,770
actually just type factory the

00:26:18,210 --> 00:26:23,460
difference between a server factory and

00:26:19,770 --> 00:26:25,620
a client factory is semantic generally

00:26:23,460 --> 00:26:27,810
it's a sick if you look at the inherited

00:26:25,620 --> 00:26:29,580
I heritage hierarchy to have a look at

00:26:27,810 --> 00:26:32,010
what something's supposed to do but it's

00:26:29,580 --> 00:26:35,070
it's actually exactly the same interface

00:26:32,010 --> 00:26:36,420
currently with endpoints the there used

00:26:35,070 --> 00:26:37,470
to be a slightly larger difference but

00:26:36,420 --> 00:26:39,750
currently with endpoints it's been

00:26:37,470 --> 00:26:43,110
completely done away with so yeah you

00:26:39,750 --> 00:26:45,330
can pretty much do either one and this

00:26:43,110 --> 00:26:47,580
is a bit hackish basically you set what

00:26:45,330 --> 00:26:51,960
protocol is but you know this is this is

00:26:47,580 --> 00:26:53,550
a well accepted patterns and fine you're

00:26:51,960 --> 00:26:56,940
setting the protocol to be protocol or

00:26:53,550 --> 00:26:59,250
protocol that's the superclass of all

00:26:56,940 --> 00:27:00,570
protocols and that just doesn't

00:26:59,250 --> 00:27:02,910
implement anything so it doesn't

00:27:00,570 --> 00:27:05,880
implement its events for connection may

00:27:02,910 --> 00:27:08,610
receive connection lost will do anything

00:27:05,880 --> 00:27:10,500
if you run that you'll end up with a

00:27:08,610 --> 00:27:12,360
server that listens on port 8000 except

00:27:10,500 --> 00:27:14,070
starter and then throws it away it will

00:27:12,360 --> 00:27:16,680
never send you anything

00:27:14,070 --> 00:27:22,080
it won't call you in the morning it

00:27:16,680 --> 00:27:26,670
sorry that was rude it's it's something

00:27:22,080 --> 00:27:29,280
simply a Alyssa now this will less on

00:27:26,670 --> 00:27:33,180
the default installation of twisted for

00:27:29,280 --> 00:27:34,950
12.1 on a on a Mac system on a Linux

00:27:33,180 --> 00:27:39,600
system this could handle a couple of

00:27:34,950 --> 00:27:43,230
thousands connections fine so this is an

00:27:39,600 --> 00:27:45,900
event loop and can handle a high

00:27:43,230 --> 00:27:47,040
throughput of nothing and starting with

00:27:45,900 --> 00:27:49,050
the next version it will handle like

00:27:47,040 --> 00:27:50,820
tens of thousands of connections yeah I

00:27:49,050 --> 00:27:52,830
was doing absolutely nothing the

00:27:50,820 --> 00:27:54,420
difference is that right now the default

00:27:52,830 --> 00:27:57,750
for most of you I think will be select

00:27:54,420 --> 00:27:59,790
reactor no no don't want no so actually

00:27:57,750 --> 00:28:01,620
12.1 is the first release where it will

00:27:59,790 --> 00:28:04,140
magically figure out like oh look I'm

00:28:01,620 --> 00:28:06,150
running on FreeBSD so I probably want KQ

00:28:04,140 --> 00:28:09,360
or I'm looking on Linux I'm running on

00:28:06,150 --> 00:28:12,330
Linux so I probably want people or I'm

00:28:09,360 --> 00:28:15,000
running on windows etc etc so select as

00:28:12,330 --> 00:28:17,910
a hot limit of 1024 file descriptors

00:28:15,000 --> 00:28:21,240
which is actually just a hash defined in

00:28:17,910 --> 00:28:26,010
a source in a Python source file but I

00:28:21,240 --> 00:28:28,080
Paul Paul KQ is CP there better reactors

00:28:26,010 --> 00:28:30,780
and that they will now be the defaults

00:28:28,080 --> 00:28:32,550
in 12.1 and onwards in in the past you

00:28:30,780 --> 00:28:33,830
would have to do some fancy importance

00:28:32,550 --> 00:28:35,850
in order to get them working properly

00:28:33,830 --> 00:28:37,530
select being the one that works

00:28:35,850 --> 00:28:40,920
everywhere it works on windows it works

00:28:37,530 --> 00:28:42,870
on X so what's actually happening here

00:28:40,920 --> 00:28:47,610
the reactor is listening on the port for

00:28:42,870 --> 00:28:49,590
each connection so that the the event

00:28:47,610 --> 00:28:51,120
loop knows what factory is associated

00:28:49,590 --> 00:28:52,970
with what file descriptor that it's

00:28:51,120 --> 00:28:56,250
listening on it's accepting connections

00:28:52,970 --> 00:28:58,170
every time a connection comes in it asks

00:28:56,250 --> 00:29:00,720
that factory an event that sense of the

00:28:58,170 --> 00:29:02,100
factory is is said you could any come in

00:29:00,720 --> 00:29:04,410
connection can you give me a protocol

00:29:02,100 --> 00:29:06,150
please so there's one factory and you

00:29:04,410 --> 00:29:08,130
can actually have the factory or

00:29:06,150 --> 00:29:10,260
multiple ports because you know the

00:29:08,130 --> 00:29:14,040
reactor knows that one factory is on

00:29:10,260 --> 00:29:17,100
multiple ports will just work the and

00:29:14,040 --> 00:29:19,620
then one protocol object is created per

00:29:17,100 --> 00:29:25,050
connection so that's why on this slide

00:29:19,620 --> 00:29:26,280
we're not passing and AH so we're not

00:29:25,050 --> 00:29:27,810
passing an instance of protocol we're

00:29:26,280 --> 00:29:30,000
passing the class itself so that's the

00:29:27,810 --> 00:29:31,290
protocol Factory you can actually make

00:29:30,000 --> 00:29:32,610
that a function which returns the

00:29:31,290 --> 00:29:34,800
protocol if you want it can be anything

00:29:32,610 --> 00:29:36,540
there's also a method you have right

00:29:34,800 --> 00:29:38,520
called build protocol if you want to

00:29:36,540 --> 00:29:40,920
actually do run some code within the

00:29:38,520 --> 00:29:44,070
context of the factory you might see a

00:29:40,920 --> 00:29:47,220
demo of that later so build protocols

00:29:44,070 --> 00:29:49,350
pass the address the factory has the

00:29:47,220 --> 00:29:51,060
opportunity at this point to reject the

00:29:49,350 --> 00:29:53,180
connection by not returning a protocol

00:29:51,060 --> 00:29:54,960
you know that's that's quite useful

00:29:53,180 --> 00:29:57,900
depending on the kind of application

00:29:54,960 --> 00:29:59,400
you're writing so so you can say you can

00:29:57,900 --> 00:30:01,470
do sort of your file balling in your

00:29:59,400 --> 00:30:06,390
actual application choose to reject the

00:30:01,470 --> 00:30:08,010
connection now twister has these things

00:30:06,390 --> 00:30:09,360
called interfaces it uses oak dot

00:30:08,010 --> 00:30:13,530
interface has anyone used up to the

00:30:09,360 --> 00:30:15,300
interface yeah that's not surprising so

00:30:13,530 --> 00:30:17,820
if you actually look at twisted on

00:30:15,300 --> 00:30:19,470
internet on interfaces there's a number

00:30:17,820 --> 00:30:21,090
of interfaces there but you want to say

00:30:19,470 --> 00:30:24,750
a few words about that yeah so basically

00:30:21,090 --> 00:30:26,580
an interface essentially is it looks

00:30:24,750 --> 00:30:28,620
like a class definition it has no

00:30:26,580 --> 00:30:31,740
implementation it's only function is to

00:30:28,620 --> 00:30:34,260
document what a certain thing in your

00:30:31,740 --> 00:30:36,330
project is or what it does or what it's

00:30:34,260 --> 00:30:38,790
used for so for example an IEEE protocol

00:30:36,330 --> 00:30:39,900
factory isn't a protocol factory but it

00:30:38,790 --> 00:30:41,760
explains if

00:30:39,900 --> 00:30:43,710
you ever come across a thing that's

00:30:41,760 --> 00:30:44,970
called a protocol Factory here's what it

00:30:43,710 --> 00:30:46,470
is here's what it does here's what you

00:30:44,970 --> 00:30:49,530
can do with it so these are purely

00:30:46,470 --> 00:30:54,120
documentation and sort of a statement of

00:30:49,530 --> 00:30:55,110
intent it is a little confusing but it

00:30:54,120 --> 00:30:57,060
does allow you to do things without

00:30:55,110 --> 00:31:00,420
inheritance hierarchies and twisted it's

00:30:57,060 --> 00:31:03,210
very subclass Orange so not composition

00:31:00,420 --> 00:31:05,730
but but inheritance instead so having

00:31:03,210 --> 00:31:07,440
these these interfaces allows you to

00:31:05,730 --> 00:31:10,350
clearly document exactly what you mean

00:31:07,440 --> 00:31:12,210
and exactly what methods you you should

00:31:10,350 --> 00:31:16,200
be able to override if it's listed in

00:31:12,210 --> 00:31:18,540
the interface you can override it we are

00:31:16,200 --> 00:31:20,940
going to now write a server you can

00:31:18,540 --> 00:31:23,610
write a server first that the returns

00:31:20,940 --> 00:31:26,490
all daughter receives uppercase this is

00:31:23,610 --> 00:31:27,660
this is one of the most trivial when you

00:31:26,490 --> 00:31:29,990
when you write it when you start

00:31:27,660 --> 00:31:32,850
learning how to write code with

00:31:29,990 --> 00:31:35,820
networking it's just after the echo

00:31:32,850 --> 00:31:37,350
server echo server being the one that

00:31:35,820 --> 00:31:39,270
writes back not a back to you now a

00:31:37,350 --> 00:31:40,560
protocol has three methods I mentioned

00:31:39,270 --> 00:31:43,140
them earlier connection made connection

00:31:40,560 --> 00:31:46,580
lost data received the most important

00:31:43,140 --> 00:31:48,690
thing here is I before E except after C

00:31:46,580 --> 00:31:52,760
the number of times I've made that

00:31:48,690 --> 00:31:57,420
mistake data received you can find this

00:31:52,760 --> 00:32:00,600
in the bundle of code that's on the

00:31:57,420 --> 00:32:02,670
website called replies in 2012 or on

00:32:00,600 --> 00:32:03,870
that USB key it's called up to serve it

00:32:02,670 --> 00:32:05,460
up high or you can type it out I

00:32:03,870 --> 00:32:07,200
recommend you type it out because I

00:32:05,460 --> 00:32:09,510
always find you you learn better when

00:32:07,200 --> 00:32:12,240
you type run it go now

00:32:09,510 --> 00:32:14,730
and then tell that into it you'll notice

00:32:12,240 --> 00:32:16,680
that this example contrary to the

00:32:14,730 --> 00:32:20,220
earlier one where we use loosen TCP will

00:32:16,680 --> 00:32:21,990
actually use a real endpoint from right

00:32:20,220 --> 00:32:24,420
here it's not exactly evident why

00:32:21,990 --> 00:32:26,040
endpoints are fantastic the real reason

00:32:24,420 --> 00:32:28,110
is that you can write your code exactly

00:32:26,040 --> 00:32:30,690
once and then if you want to make it

00:32:28,110 --> 00:32:32,700
work on SSL that involves zero lines of

00:32:30,690 --> 00:32:34,080
code but we're going to anything it

00:32:32,700 --> 00:32:37,580
involves zero line to make this work on

00:32:34,080 --> 00:32:40,350
SSL into the TCP you change TCP to SSL

00:32:37,580 --> 00:32:42,030
in that string and the idea is that you

00:32:40,350 --> 00:32:43,650
can come on line arguments say listen on

00:32:42,030 --> 00:32:47,160
a UNIX socket which is by the way you

00:32:43,650 --> 00:32:49,950
type UNIX colon slash path to UNIX

00:32:47,160 --> 00:32:51,720
socket and you and later you'll see

00:32:49,950 --> 00:32:53,250
examples of clients where you create one

00:32:51,720 --> 00:32:57,690
endpoint use that endpoint multiple

00:32:53,250 --> 00:33:00,900
to connect multiple times so reactor

00:32:57,690 --> 00:33:06,090
protocol and endpoints protocols the is

00:33:00,900 --> 00:33:08,400
the superclass of sorry the place that

00:33:06,090 --> 00:33:11,280
all protocols come from ladle using a

00:33:08,400 --> 00:33:12,450
few helper protocols that they're from a

00:33:11,280 --> 00:33:15,030
different location will point that out

00:33:12,450 --> 00:33:16,620
at the time you don't have to implement

00:33:15,030 --> 00:33:20,030
connection made in connection lost or

00:33:16,620 --> 00:33:23,400
data received but those those are the

00:33:20,030 --> 00:33:25,679
three callbacks which the which you will

00:33:23,400 --> 00:33:28,200
receive when you do this then you

00:33:25,679 --> 00:33:30,120
quickly throw together a factory listen

00:33:28,200 --> 00:33:31,500
and then the last thing you have to have

00:33:30,120 --> 00:33:33,900
any program is directed run which

00:33:31,500 --> 00:33:35,700
actually runs the event loop the program

00:33:33,900 --> 00:33:43,679
won't exit from reactor don't run until

00:33:35,700 --> 00:33:46,559
you control see if you have any

00:33:43,679 --> 00:33:48,799
questions of like Lauren's down I'm not

00:33:46,559 --> 00:33:48,799
moving

00:33:54,610 --> 00:33:59,710
so you'll notice that connection lost is

00:33:57,700 --> 00:34:01,179
sort of doesn't really do anything you

00:33:59,710 --> 00:34:03,220
don't really have to implement it it's

00:34:01,179 --> 00:34:06,640
just here so you know that that method

00:34:03,220 --> 00:34:07,870
exists if you wanted to look that up in

00:34:06,640 --> 00:34:10,960
the documentation it would be on a

00:34:07,870 --> 00:34:14,050
protocol following the explanation about

00:34:10,960 --> 00:34:17,139
interfaces I gave earlier reason

00:34:14,050 --> 00:34:20,470
sometimes you might print that out and

00:34:17,139 --> 00:34:22,599
sometimes it will say that actually

00:34:20,470 --> 00:34:25,629
often it will say error the connection

00:34:22,599 --> 00:34:26,530
was closed cleanly that's actually

00:34:25,629 --> 00:34:28,540
perfectly all right

00:34:26,530 --> 00:34:31,869
it's always called it's always called

00:34:28,540 --> 00:34:33,879
with the reason and and the most common

00:34:31,869 --> 00:34:36,310
reason is that the connection was closed

00:34:33,879 --> 00:34:40,570
cleanly you'll also see connection lost

00:34:36,310 --> 00:34:43,089
and that in terms of Education closed by

00:34:40,570 --> 00:34:47,589
PR and those kind of errors basic

00:34:43,089 --> 00:34:49,659
Network errors a reason what's what's a

00:34:47,589 --> 00:34:51,250
reason an instance of an instance of

00:34:49,659 --> 00:34:52,450
failure isn't it yes so it's going to

00:34:51,250 --> 00:34:55,629
exception object to know yes

00:34:52,450 --> 00:34:57,400
and twisted on errors the twisted

00:34:55,629 --> 00:35:00,180
internet taught errors is a list of the

00:34:57,400 --> 00:35:00,180
exceptions you can see

00:35:09,350 --> 00:35:12,830
who's got that running no you're still

00:35:11,750 --> 00:35:14,750
typing you got a few people got it

00:35:12,830 --> 00:35:18,040
running excellent you copied it from the

00:35:14,750 --> 00:35:20,210
tar ball didn't you no no excellent cool

00:35:18,040 --> 00:35:31,100
so you got the data coming back

00:35:20,210 --> 00:35:32,390
uppercase ah yes yes so the question was

00:35:31,100 --> 00:35:38,120
how do you change the host that listens

00:35:32,390 --> 00:35:43,580
on : interface equals local host

00:35:38,120 --> 00:35:47,630
I think interface meaning is yeah that's

00:35:43,580 --> 00:35:49,880
a terminology from yeah but

00:35:47,630 --> 00:35:52,430
unfortunately it's that the IP address

00:35:49,880 --> 00:35:53,810
not the actual Ethernet interface but

00:35:52,430 --> 00:35:57,470
you know there's no way to do that same

00:35:53,810 --> 00:35:59,000
way when you're doing connection you

00:35:57,470 --> 00:36:00,410
actually do TCP call in the hostname

00:35:59,000 --> 00:36:02,750
call in the port so it's a bit different

00:36:00,410 --> 00:36:03,380
for clients but you call a different

00:36:02,750 --> 00:36:04,850
method for that

00:36:03,380 --> 00:36:08,540
that's quite from string and sort of

00:36:04,850 --> 00:36:12,500
server from string if you if you're

00:36:08,540 --> 00:36:16,610
doing SSL you also do the SSL keys by

00:36:12,500 --> 00:36:21,640
doing SSL : port name : key equals sorry

00:36:16,610 --> 00:36:21,640
question sure

00:36:25,900 --> 00:36:32,359
right some deep raisin do it into it

00:36:29,420 --> 00:36:33,619
with anything well no you should it

00:36:32,359 --> 00:36:35,420
should send a LAN connection you go have

00:36:33,619 --> 00:36:36,890
a look at this program well only if you

00:36:35,420 --> 00:36:41,410
Mexican how is you making a connection

00:36:36,890 --> 00:36:41,410
the is doing it we're going to talk to

00:36:49,660 --> 00:36:53,210
so at this point you should be able to

00:36:51,589 --> 00:36:55,130
find everybody else's laptop by

00:36:53,210 --> 00:37:02,510
connecting to they let two random IPS on

00:36:55,130 --> 00:37:04,309
point it out and that this this will

00:37:02,510 --> 00:37:07,160
support multiple connections of course

00:37:04,309 --> 00:37:10,300
as well so so there's nothing here which

00:37:07,160 --> 00:37:13,190
is stopping the event loop from running

00:37:10,300 --> 00:37:14,809
self transport right that that is not a

00:37:13,190 --> 00:37:17,750
blocking operation what that does is it

00:37:14,809 --> 00:37:19,130
inserts the data into a queue if you did

00:37:17,750 --> 00:37:22,819
something you'll advise you could write

00:37:19,130 --> 00:37:26,720
a 20 gigabyte file into there and it

00:37:22,819 --> 00:37:28,099
would portion that up you select to find

00:37:26,720 --> 00:37:30,500
out when the socket is writable write

00:37:28,099 --> 00:37:32,299
the data fill up the kernel buffer wait

00:37:30,500 --> 00:37:34,849
to local buffer is a little bit drained

00:37:32,299 --> 00:37:37,630
write more data to it so so that's

00:37:34,849 --> 00:37:37,630
non-blocking

00:37:38,260 --> 00:37:42,440
lose connection there of course is

00:37:40,730 --> 00:37:47,420
optional you can just make it continue

00:37:42,440 --> 00:37:48,589
to send daughter um how'd it go perfect

00:37:47,420 --> 00:37:50,809
it was connection mode instead of

00:37:48,589 --> 00:37:54,010
connection made ah yes sorry connection

00:37:50,809 --> 00:37:54,010
made that's another typo

00:37:54,230 --> 00:38:00,200
now now this is one one reason why

00:37:56,329 --> 00:38:02,420
there's a feature in Java actually the

00:38:00,200 --> 00:38:04,099
wouldn't use juice and and that sort of

00:38:02,420 --> 00:38:05,119
thing where you can say at overrides

00:38:04,099 --> 00:38:06,530
mm-hm

00:38:05,119 --> 00:38:08,119
which will raise an exception if you're

00:38:06,530 --> 00:38:10,010
not actually overriding a method I

00:38:08,119 --> 00:38:13,089
actually really like that there was a

00:38:10,010 --> 00:38:15,410
talk at Euro Python this year about

00:38:13,089 --> 00:38:17,630
copying things like add override and

00:38:15,410 --> 00:38:20,109
Java yeah yeah I should like add

00:38:17,630 --> 00:38:23,599
override is the one thing I want final

00:38:20,109 --> 00:38:24,589
here but at override I want that so that

00:38:23,599 --> 00:38:28,599
you get an exception when you

00:38:24,589 --> 00:38:31,640
accidentally do connection receive it

00:38:28,599 --> 00:38:35,980
this is the slightly simpler example

00:38:31,640 --> 00:38:35,980
this is the older style with listen TCP

00:38:36,440 --> 00:38:41,720
so you know that's that's just a you'll

00:38:39,710 --> 00:38:44,030
see this another in all the code and

00:38:41,720 --> 00:38:45,500
older it older examples I much much

00:38:44,030 --> 00:38:47,660
prefer endpoints and I use them

00:38:45,500 --> 00:38:49,340
consistently everywhere on all the

00:38:47,660 --> 00:38:52,510
examples these endpoints but just just

00:38:49,340 --> 00:38:54,680
to say that's that's the older style

00:38:52,510 --> 00:38:57,430
this is an this is an example of it

00:38:54,680 --> 00:39:02,440
running this is what you should see

00:38:57,430 --> 00:39:02,440
telnet I strongly advise use Tom it

00:39:03,040 --> 00:39:08,210
here is a client

00:39:05,840 --> 00:39:10,580
it's called multi client high if you

00:39:08,210 --> 00:39:13,760
actually run this this will use your

00:39:10,580 --> 00:39:18,110
arguments to go you do Senate arguments

00:39:13,760 --> 00:39:20,480
localhost colon 8080 acumen C will

00:39:18,110 --> 00:39:22,120
actually make multiple connections so

00:39:20,480 --> 00:39:27,800
this is actually demonstration of a

00:39:22,120 --> 00:39:29,090
client which connects multiple times so

00:39:27,800 --> 00:39:31,400
if you run multi client you should see

00:39:29,090 --> 00:39:32,600
output like that I don't recommend you

00:39:31,400 --> 00:39:39,170
write out multi client because that's

00:39:32,600 --> 00:39:42,050
nasty code interestingly I inherited

00:39:39,170 --> 00:39:44,150
some of this code and very very common

00:39:42,050 --> 00:39:48,550
bug is to use send never you send always

00:39:44,150 --> 00:39:51,970
you send all questions coming up

00:39:48,550 --> 00:39:51,970
questions any questions

00:39:55,950 --> 00:40:06,690
ah yes so Autocode reloading um no I

00:40:04,650 --> 00:40:11,130
don't have a good good way of doing Auto

00:40:06,690 --> 00:40:14,720
code reloading so the question was is

00:40:11,130 --> 00:40:17,180
there a way to have Auto code reloading

00:40:14,720 --> 00:40:19,680
substitute to two E's quick development

00:40:17,180 --> 00:40:23,970
know that there isn't anything built-in

00:40:19,680 --> 00:40:26,130
I I did however experiment with this a

00:40:23,970 --> 00:40:28,349
while back on my on my bitbucket page

00:40:26,130 --> 00:40:29,940
I've got a little thing called harpoon

00:40:28,349 --> 00:40:32,760
which is a thing I wrote in order to

00:40:29,940 --> 00:40:34,290
make it easier to to quit quickly

00:40:32,760 --> 00:40:35,910
restart a server with a new protocol

00:40:34,290 --> 00:40:37,470
instance it's just a command-line

00:40:35,910 --> 00:40:43,290
argument they come online thing where

00:40:37,470 --> 00:40:44,970
you pass it a protocol and a string

00:40:43,290 --> 00:40:46,589
endpoint and it automatically

00:40:44,970 --> 00:40:49,950
synthesizes a service so you can test

00:40:46,589 --> 00:40:52,349
there's also a Python project called

00:40:49,950 --> 00:40:54,690
watchdog which is on Google code

00:40:52,349 --> 00:40:56,339
somewhere and it it's essentially a

00:40:54,690 --> 00:40:59,369
generic inotify

00:40:56,339 --> 00:41:01,680
wrapper that works on pretty much any

00:40:59,369 --> 00:41:03,690
platform and I use it it comes with a

00:41:01,680 --> 00:41:05,280
tool called watch me do and I use that

00:41:03,690 --> 00:41:09,240
to restart my server when I'm doing

00:41:05,280 --> 00:41:11,540
development no it's fine any other

00:41:09,240 --> 00:41:11,540
questions

00:41:11,599 --> 00:41:17,220
great so now we're going to build on

00:41:14,040 --> 00:41:21,170
that original server that you wrote the

00:41:17,220 --> 00:41:24,170
the upper server try and do these things

00:41:21,170 --> 00:41:26,760
count the number of connected clients

00:41:24,170 --> 00:41:28,500
and announce the number of connected

00:41:26,760 --> 00:41:33,359
clients when at the point where you

00:41:28,500 --> 00:41:35,940
connect go for now all protocols have

00:41:33,359 --> 00:41:39,150
their factory as an attribute so it's a

00:41:35,940 --> 00:41:41,220
soft top transport and soft factory are

00:41:39,150 --> 00:41:43,349
two very important things to have so

00:41:41,220 --> 00:41:45,510
transports the stream you're connected

00:41:43,349 --> 00:41:47,609
to and factories the the factory that

00:41:45,510 --> 00:41:51,450
created you I'll go ahead do this now

00:41:47,609 --> 00:41:53,490
and the important thing to remember is

00:41:51,450 --> 00:41:55,829
that a protocol is one single connection

00:41:53,490 --> 00:41:57,839
and a factory is sort of the father of

00:41:55,829 --> 00:41:59,700
all of those connections so if you have

00:41:57,839 --> 00:42:01,530
something that's that's shared amongst

00:41:59,700 --> 00:42:03,059
all connects all of your connections you

00:42:01,530 --> 00:42:04,140
do it on the factory if it's specific to

00:42:03,059 --> 00:42:06,500
one connection you don't know the

00:42:04,140 --> 00:42:06,500
protocol

00:42:09,330 --> 00:42:14,680
when we move on to doing clients later

00:42:12,130 --> 00:42:24,970
you'll see there's a there's quite tight

00:42:14,680 --> 00:42:27,420
coupling there any questions about this

00:42:24,970 --> 00:42:27,420
exercise

00:42:57,970 --> 00:43:02,990
of

00:42:59,730 --> 00:43:02,990
niklas would be nice

00:43:16,220 --> 00:43:22,540
show of hands who's got it running okay

00:43:29,520 --> 00:43:32,210
but

00:43:45,900 --> 00:43:48,650
sorry

00:43:51,400 --> 00:43:53,460
you

00:45:16,829 --> 00:45:21,189
you don't actually have to call super

00:45:19,269 --> 00:45:27,969
clot super on protocol if you want to

00:45:21,189 --> 00:45:29,709
give it it in it I think they're also

00:45:27,969 --> 00:45:36,189
old-style classes so super doesn't work

00:45:29,709 --> 00:45:37,809
very well so the the reason there's a

00:45:36,189 --> 00:45:40,449
lot of old cell classes and twisted is

00:45:37,809 --> 00:45:42,999
because it originally worked on Python

00:45:40,449 --> 00:45:46,499
one point five and one point four and

00:45:42,999 --> 00:45:46,499
changing semantics is bad

00:47:20,130 --> 00:47:23,880
not sure which would be Zara

00:48:10,770 --> 00:48:19,330
protocol on a related note to twisted

00:48:17,470 --> 00:48:21,400
works on are used to work at least on

00:48:19,330 --> 00:48:22,690
one point four and one point five one of

00:48:21,400 --> 00:48:25,990
the most frequently asked questions is

00:48:22,690 --> 00:48:27,310
when will it work on Python three and to

00:48:25,990 --> 00:48:28,990
answer that we actually have a google

00:48:27,310 --> 00:48:31,440
Summer of Code student currently doing

00:48:28,990 --> 00:48:34,090
amazing work on getting it to work on

00:48:31,440 --> 00:48:36,430
twenty two which is one of the super ten

00:48:34,090 --> 00:48:38,500
core devs is also working on it

00:48:36,430 --> 00:48:40,990
they are both making great strides but

00:48:38,500 --> 00:48:44,710
well as Steven said it used to work on

00:48:40,990 --> 00:48:46,480
1.4 it's that old so it's not exactly

00:48:44,710 --> 00:48:48,130
easy to pour it over that code so work

00:48:46,480 --> 00:48:50,310
in progress but much like Django we're

00:48:48,130 --> 00:48:54,850
not quite there yet

00:48:50,310 --> 00:48:56,890
some stuff works the fortunate thing is

00:48:54,850 --> 00:49:01,050
that was it has extremely extensive unit

00:48:56,890 --> 00:49:01,050
tests so we do know what doesn't

00:49:22,950 --> 00:49:24,950
Oh

00:49:32,210 --> 00:49:34,900
hey buddy

00:50:37,480 --> 00:50:40,020
right

00:50:41,900 --> 00:50:51,210
okay so I'm going to this is this is a

00:50:45,300 --> 00:50:55,140
way of doing that that are that exercise

00:50:51,210 --> 00:50:56,849
so that here in this particular case

00:50:55,140 --> 00:50:58,380
were actually sub classing factory just

00:50:56,849 --> 00:51:00,119
so that we have the attribute set there

00:50:58,380 --> 00:51:02,609
that we need otherwise this is a bit

00:51:00,119 --> 00:51:07,589
ugly as I did see some people using this

00:51:02,609 --> 00:51:09,210
technique works fine accessing the

00:51:07,589 --> 00:51:12,650
factory increase the counter on the

00:51:09,210 --> 00:51:15,300
connection loss decrease the counter and

00:51:12,650 --> 00:51:21,410
pass the instance of counting factory

00:51:15,300 --> 00:51:21,410
through anyone having trouble with that

00:51:23,000 --> 00:51:31,040
oh yeah so multi clients not so good for

00:51:26,880 --> 00:51:31,040
this so so use a telnet or something

00:51:31,559 --> 00:51:38,309
shredded client is an interesting one if

00:51:34,650 --> 00:51:40,859
there's a test program thread a client

00:51:38,309 --> 00:51:43,130
does allocations simultaneously with

00:51:40,859 --> 00:51:43,130
threads

00:51:50,220 --> 00:51:57,230
also it's up to me why do you have to

00:51:54,560 --> 00:52:00,240
hook the count on the factory and

00:51:57,230 --> 00:52:01,980
because there is only one protocol per

00:52:00,240 --> 00:52:04,500
connection so if you want to have access

00:52:01,980 --> 00:52:06,570
to data that the other protocols have

00:52:04,500 --> 00:52:10,230
access to you have to do it on the

00:52:06,570 --> 00:52:11,550
factory not on the connection so so if

00:52:10,230 --> 00:52:14,370
you think about that the factories

00:52:11,550 --> 00:52:16,140
attach the listening port and the the

00:52:14,370 --> 00:52:18,420
protocol is only attached to each

00:52:16,140 --> 00:52:19,860
individual connection so they're they're

00:52:18,420 --> 00:52:24,180
all isolated they all have their own

00:52:19,860 --> 00:52:25,950
attributes so so the product so say you

00:52:24,180 --> 00:52:28,350
were writing a protocol you would do

00:52:25,950 --> 00:52:31,770
something like is user authenticated

00:52:28,350 --> 00:52:35,790
would be a method on or attribute on the

00:52:31,770 --> 00:52:38,370
protocol and it is the server actually

00:52:35,790 --> 00:52:40,110
running or a number of connections or

00:52:38,370 --> 00:52:44,520
that kind of thing down the factory okay

00:52:40,110 --> 00:52:47,150
thank you all right we're going to move

00:52:44,520 --> 00:52:49,920
on from here any other questions okay

00:52:47,150 --> 00:52:51,390
perhaps to pick into that technically if

00:52:49,920 --> 00:52:53,340
you did it as a class attribute on the

00:52:51,390 --> 00:52:55,530
protocol for this example it would work

00:52:53,340 --> 00:52:59,010
it would just be semantically incorrect

00:52:55,530 --> 00:53:01,290
okay or a global value

00:52:59,010 --> 00:53:07,430
the but you know Global's are bad I

00:53:01,290 --> 00:53:11,550
guess so it's better things off so

00:53:07,430 --> 00:53:15,060
recapping reactor runs until told to

00:53:11,550 --> 00:53:17,400
close all stockett sockets and stop so

00:53:15,060 --> 00:53:18,920
if you call reactor stop by the way you

00:53:17,400 --> 00:53:21,420
actually so say for instance you

00:53:18,920 --> 00:53:24,240
actually want to send us send a signal

00:53:21,420 --> 00:53:25,860
to shut down or after some number of

00:53:24,240 --> 00:53:29,160
seconds shut down you call reacted stop

00:53:25,860 --> 00:53:30,870
ratchet run react about stop the reactor

00:53:29,160 --> 00:53:32,430
uses factory to act in the connections

00:53:30,870 --> 00:53:35,010
factories create a protocol an instance

00:53:32,430 --> 00:53:39,330
for each client and you subclass and

00:53:35,010 --> 00:53:41,070
implement so so the callbacks the

00:53:39,330 --> 00:53:44,280
callbacks are called multiple times in

00:53:41,070 --> 00:53:46,380
general and twisted are are not pass

00:53:44,280 --> 00:53:52,200
strata that as arguments to functions

00:53:46,380 --> 00:53:56,730
they are their class sub sub class and

00:53:52,200 --> 00:53:58,770
override inherited methods whereas

00:53:56,730 --> 00:53:59,940
callbacks for individual actions are

00:53:58,770 --> 00:54:02,370
generally passed around as attributes

00:53:59,940 --> 00:54:03,750
we'll see a number of examples in a few

00:54:02,370 --> 00:54:05,880
slides with four more

00:54:03,750 --> 00:54:07,740
complex for like standard behaviors

00:54:05,880 --> 00:54:09,810
things like if you want to receive net

00:54:07,740 --> 00:54:12,470
strings you also do that by just sub

00:54:09,810 --> 00:54:15,660
classing a different protocol and

00:54:12,470 --> 00:54:18,020
implementing it specific methods to two

00:54:15,660 --> 00:54:20,670
more tips these these are just tips

00:54:18,020 --> 00:54:23,940
telnet is generally better than netcat

00:54:20,670 --> 00:54:26,070
or NC telnet much more aggressively

00:54:23,940 --> 00:54:28,620
flashes if you're testing stuff

00:54:26,070 --> 00:54:30,990
I recommend helmet it's it flushes more

00:54:28,620 --> 00:54:34,430
aggressively and it sends carriage

00:54:30,990 --> 00:54:40,710
return new line most Network protocols

00:54:34,430 --> 00:54:43,440
HTTP pop3 FTP standardized on carriage

00:54:40,710 --> 00:54:44,580
return in line not new line and so so

00:54:43,440 --> 00:54:46,410
you might actually find that if you're

00:54:44,580 --> 00:54:47,940
trying to test you find your Pro doesn't

00:54:46,410 --> 00:54:50,910
work when you use netcat but it does

00:54:47,940 --> 00:54:52,920
with telnet that's why also this this is

00:54:50,910 --> 00:54:54,810
really neat I actually I introduced

00:54:52,920 --> 00:54:58,260
Laurence this yesterday but I but it's

00:54:54,810 --> 00:55:01,140
really neat if you run this command that

00:54:58,260 --> 00:55:03,750
runs the the main loop and an

00:55:01,140 --> 00:55:07,860
interactive prompt simultaneously so you

00:55:03,750 --> 00:55:09,750
can actually run that you get an

00:55:07,860 --> 00:55:11,070
interactive prompt it's not really the

00:55:09,750 --> 00:55:12,990
pose an interactive prompt is very

00:55:11,070 --> 00:55:14,430
implementation of it but it understands

00:55:12,990 --> 00:55:16,200
deferred and it's got the main loop

00:55:14,430 --> 00:55:18,210
running so you can import whatever code

00:55:16,200 --> 00:55:25,950
and bang away at it if you want to do

00:55:18,210 --> 00:55:30,500
things interactively yes hmm not really

00:55:25,950 --> 00:55:36,300
this the the issue is that in order to

00:55:30,500 --> 00:55:38,160
run the main loop and any tracks at a

00:55:36,300 --> 00:55:41,940
high level with and give you good

00:55:38,160 --> 00:55:43,350
results yeah we can't even use lib read

00:55:41,940 --> 00:55:45,180
line we're not using lip read line for

00:55:43,350 --> 00:55:48,510
this it's actually really implemented so

00:55:45,180 --> 00:55:50,400
some things like I think control our

00:55:48,510 --> 00:55:52,680
might work but a few of the other more

00:55:50,400 --> 00:55:54,420
esoteric liberate line features your

00:55:52,680 --> 00:55:57,810
fingers might be used to don't work

00:55:54,420 --> 00:55:59,550
so for ipython apparently someone had

00:55:57,810 --> 00:56:03,930
that working in the past back when they

00:55:59,550 --> 00:56:07,080
had twisted e things as their core in a

00:56:03,930 --> 00:56:09,060
deep dark recess of ipython and then

00:56:07,080 --> 00:56:11,010
they started doing a rewrite which I'm

00:56:09,060 --> 00:56:12,930
not sure if if it's completed already or

00:56:11,010 --> 00:56:14,400
not but based on that new base which

00:56:12,930 --> 00:56:16,410
doesn't really use twisted at all and

00:56:14,400 --> 00:56:17,520
has no way of crop of cooperating with

00:56:16,410 --> 00:56:20,039
other

00:56:17,520 --> 00:56:23,010
reactors they broke through two things

00:56:20,039 --> 00:56:25,470
one is you can't use it with a with a

00:56:23,010 --> 00:56:27,780
GUI anymore and two well except their

00:56:25,470 --> 00:56:30,900
own and two it doesn't work with twisted

00:56:27,780 --> 00:56:36,630
anyway so yes I someone to get it

00:56:30,900 --> 00:56:38,670
working with B Python alright so the

00:56:36,630 --> 00:56:42,359
next thing we're going to do is a proxy

00:56:38,670 --> 00:56:46,410
server so a H well a rudimentary HTTP

00:56:42,359 --> 00:56:50,339
proxy server so the client just sends a

00:56:46,410 --> 00:56:53,520
URL use helmet

00:56:50,339 --> 00:56:55,650
the server returns the contents of the

00:56:53,520 --> 00:56:57,000
URL encloses connection so it's like the

00:56:55,650 --> 00:57:00,079
upper server except we're actually going

00:56:57,000 --> 00:57:00,079
and doing a connection ah

00:57:01,559 --> 00:57:06,240
now if you wanted to do new lines this

00:57:04,859 --> 00:57:08,789
is how you would have to do it you have

00:57:06,240 --> 00:57:11,490
to have a buffer you have to when you

00:57:08,789 --> 00:57:16,230
get data received you append to that

00:57:11,490 --> 00:57:18,930
buffer and then you check if the if

00:57:16,230 --> 00:57:21,299
there is a new line and then you this

00:57:18,930 --> 00:57:23,250
actually has a bug in it as well and

00:57:21,299 --> 00:57:25,349
then you you split off from that new

00:57:23,250 --> 00:57:27,630
line and then you that's another bug

00:57:25,349 --> 00:57:29,460
there check that out it's /n and shapes

00:57:27,630 --> 00:57:34,170
to slash are slash n so bla bla bla bla

00:57:29,460 --> 00:57:36,630
bla and then we'll print each line this

00:57:34,170 --> 00:57:38,039
is much easier first up protocols is a

00:57:36,630 --> 00:57:39,630
collection of twisted protocols these

00:57:38,039 --> 00:57:41,789
are just implementations not actual

00:57:39,630 --> 00:57:43,799
servers so I set say for instance you

00:57:41,789 --> 00:57:45,329
see SMTP in here that's the

00:57:43,799 --> 00:57:46,859
implementation the SMTP protocol with

00:57:45,329 --> 00:57:50,190
callbacks that you can subclass not an

00:57:46,859 --> 00:57:53,640
actual web email server it basic

00:57:50,190 --> 00:57:57,180
protocols in basic is line receiver I

00:57:53,640 --> 00:57:59,039
before E except enough to see that

00:57:57,180 --> 00:58:01,650
instead of having data received this

00:57:59,039 --> 00:58:03,390
implements data received and then has a

00:58:01,650 --> 00:58:05,460
new method that you can subclass called

00:58:03,390 --> 00:58:07,740
line received does a little buffering

00:58:05,460 --> 00:58:11,579
for you works really well you can

00:58:07,740 --> 00:58:12,420
customize the delimiter it works very

00:58:11,579 --> 00:58:14,400
well so that's what we're going to use

00:58:12,420 --> 00:58:16,109
this example and for most of the line

00:58:14,400 --> 00:58:19,970
based examples from now on I recommend

00:58:16,109 --> 00:58:24,359
you use line receiver not protocol

00:58:19,970 --> 00:58:27,750
protocols contains amp basic dict finger

00:58:24,359 --> 00:58:30,109
ftp GPS that's actually talking to GPS

00:58:27,750 --> 00:58:30,109
devices

00:58:30,390 --> 00:58:36,900
- loopback is good for testing memcache

00:58:34,550 --> 00:58:41,640
mice that's actually an implementation

00:58:36,900 --> 00:58:44,010
for a serial mouse protocol port forward

00:58:41,640 --> 00:58:44,550
postfix I mention POSIX early as shekhar

00:58:44,010 --> 00:58:48,360
sip

00:58:44,550 --> 00:58:50,610
there is a sip server written with

00:58:48,360 --> 00:58:53,310
twisted socks safe will tell that Tila

00:58:50,610 --> 00:58:57,300
some wire TLS meaning being able to

00:58:53,310 --> 00:58:58,140
upgrade a normal connection to an SSL

00:58:57,300 --> 00:59:03,690
connection midstream

00:58:58,140 --> 00:59:06,360
that's question nope all right protocols

00:59:03,690 --> 00:59:07,950
are basic contains these things net

00:59:06,360 --> 00:59:09,120
string lie don't only receive oh sorry

00:59:07,950 --> 00:59:11,280
line receiver actually has the ability

00:59:09,120 --> 00:59:13,500
to go between line based and stream

00:59:11,280 --> 00:59:15,480
based so in line only is slightly more

00:59:13,500 --> 00:59:15,990
efficient but it's easier to type line

00:59:15,480 --> 00:59:20,450
receiver

00:59:15,990 --> 00:59:20,450
I'm sorry what yeah

00:59:23,310 --> 00:59:29,030
if you want to send and receive integers

00:59:25,980 --> 00:59:31,320
then there are these integer receivers

00:59:29,030 --> 00:59:33,570
there sorry

00:59:31,320 --> 00:59:35,970
I think these are lengths prefixed

00:59:33,570 --> 00:59:37,620
strings so you know they're much more

00:59:35,970 --> 00:59:39,900
efficient for in terms of buffering

00:59:37,620 --> 00:59:41,100
tomorrow and files and I'd like if you

00:59:39,900 --> 00:59:42,720
want to be able to connect and send a

00:59:41,100 --> 00:59:44,460
file that's a protocol it doesn't it's

00:59:42,720 --> 00:59:45,450
all in basic and you can you can

00:59:44,460 --> 00:59:48,960
leverage these things in your own

00:59:45,450 --> 00:59:50,070
programs yes so check twisted up

00:59:48,960 --> 00:59:58,290
protocols before you invent your own

00:59:50,070 --> 01:00:02,760
protocol having said that yep so this is

00:59:58,290 --> 01:00:05,280
a line receiver so this this code is in

01:00:02,760 --> 01:00:08,220
that bundle of code that I have there

01:00:05,280 --> 01:00:10,770
it's called proxy one top you I run it

01:00:08,220 --> 01:00:12,900
run it if you want run it and connects

01:00:10,770 --> 01:00:15,600
port 8000 and give it a URL go down do

01:00:12,900 --> 01:00:24,810
it you can even use multi client to send

01:00:15,600 --> 01:00:29,340
it multiple URLs so so this has some

01:00:24,810 --> 01:00:31,680
rudimentary checking a little sexy TP it

01:00:29,340 --> 01:00:35,520
does a bit of timing it uses URL Lib to

01:00:31,680 --> 01:00:36,960
fetch the URL closes connection doesn't

01:00:35,520 --> 01:00:41,100
implement connection make initial loss

01:00:36,960 --> 01:00:41,880
but doesn't need to a important thing

01:00:41,100 --> 01:00:43,890
don't

01:00:41,880 --> 01:00:45,960
implement data received and line

01:00:43,890 --> 01:00:48,570
receives trying to be tricky because

01:00:45,960 --> 01:00:51,780
you'll you'll be overriding that the

01:00:48,570 --> 01:01:00,960
line receivers data received and brake

01:00:51,780 --> 01:01:03,180
line received I've done that there's no

01:01:00,960 --> 01:01:05,790
working there is no working internet

01:01:03,180 --> 01:01:11,790
connection teach them about twisty well

01:01:05,790 --> 01:01:14,040
uh yeah ok yes so because this is a

01:01:11,790 --> 01:01:18,630
timing client you'll find it out exactly

01:01:14,040 --> 01:01:21,870
how slow the internet is here if you

01:01:18,630 --> 01:01:24,990
want local stuff which is easier files

01:01:21,870 --> 01:01:30,630
EP is a izl is on the intranet so it

01:01:24,990 --> 01:01:36,000
should be milliseconds not seconds this

01:01:30,630 --> 01:01:39,450
is a client which does some timing as

01:01:36,000 --> 01:01:41,340
well who cares it's like like the other

01:01:39,450 --> 01:01:42,720
clients it's threaded like the previous

01:01:41,340 --> 01:01:43,890
client it's not something that you

01:01:42,720 --> 01:01:45,690
really want to write yourself it's

01:01:43,890 --> 01:01:48,570
something that's just on the stick if

01:01:45,690 --> 01:01:58,350
you want to run it here's an example of

01:01:48,570 --> 01:02:00,900
all these things so so this is running

01:01:58,350 --> 01:02:03,270
timing client on on a machine clearly

01:02:00,900 --> 01:02:04,950
not on the network but somewhere in

01:02:03,270 --> 01:02:09,960
Europe of course because it is multiple

01:02:04,950 --> 01:02:11,100
seconds and so this is the output from

01:02:09,960 --> 01:02:12,900
the client of the server and you can see

01:02:11,100 --> 01:02:14,640
the server took like one second each for

01:02:12,900 --> 01:02:17,340
these things part three seconds in total

01:02:14,640 --> 01:02:23,370
for the client just because there were

01:02:17,340 --> 01:02:26,010
so many things to retrieve now those

01:02:23,370 --> 01:02:27,660
sums are very very close the individual

01:02:26,010 --> 01:02:30,140
requests and the thready client the

01:02:27,660 --> 01:02:35,190
reason for this is because we're using

01:02:30,140 --> 01:02:36,750
URL Lib dot URL open which is not not

01:02:35,190 --> 01:02:38,010
cooperative with the async event loop

01:02:36,750 --> 01:02:39,540
we're blocking the event loop which

01:02:38,010 --> 01:02:41,520
means nothing else can be processed so

01:02:39,540 --> 01:02:43,560
no two webpage is being downloaded at

01:02:41,520 --> 01:02:49,230
the same time it's generally quite

01:02:43,560 --> 01:02:52,710
negative I don't know good what happens

01:02:49,230 --> 01:02:55,740
if they think there's a yeah so we can't

01:02:52,710 --> 01:02:59,130
use your own two URL open

01:02:55,740 --> 01:03:01,740
so let's weave we're going to be

01:02:59,130 --> 01:03:03,450
cooperative and we and when accessing

01:03:01,740 --> 01:03:04,740
the network we have to return controls

01:03:03,450 --> 01:03:08,870
the event loop so we can't just you know

01:03:04,740 --> 01:03:10,830
in one method go and do everything

01:03:08,870 --> 01:03:15,770
you've got to return control while

01:03:10,830 --> 01:03:19,400
you're waiting on the network so recap I

01:03:15,770 --> 01:03:25,020
yes this is the panini example

01:03:19,400 --> 01:03:26,400
translating a so the idea is I didn't

01:03:25,020 --> 01:03:30,480
know that we had these animations did

01:03:26,400 --> 01:03:32,520
you know about these animations yes so

01:03:30,480 --> 01:03:35,420
so the idea is that you can actually

01:03:32,520 --> 01:03:44,130
cook multiple things at the same time

01:03:35,420 --> 01:03:47,840
it's it's better to not wait for the

01:03:44,130 --> 01:03:51,450
result for every connection at the time

01:03:47,840 --> 01:03:53,460
this is a bad example because we end up

01:03:51,450 --> 01:03:57,150
saying wait till my turn wait till your

01:03:53,460 --> 01:03:58,590
it was ready idling the cpu so we'll use

01:03:57,150 --> 01:04:02,040
callback so you've seen callbacks before

01:03:58,590 --> 01:04:04,140
who's used to a query that's jquery

01:04:02,040 --> 01:04:07,200
who's using jquery you've used callbacks

01:04:04,140 --> 01:04:11,010
in jquery all the time hey that that's a

01:04:07,200 --> 01:04:12,960
callback and this is the you know this

01:04:11,010 --> 01:04:17,190
is a better api it's like when ready

01:04:12,960 --> 01:04:19,220
call that method deferreds add to the

01:04:17,190 --> 01:04:22,290
whole callback paradigm error handling

01:04:19,220 --> 01:04:23,900
passing the result around cancelling all

01:04:22,290 --> 01:04:27,360
of that so that's what deferred is

01:04:23,900 --> 01:04:31,890
deferred is so that you can very very

01:04:27,360 --> 01:04:34,830
easily say I want a result and I want to

01:04:31,890 --> 01:04:36,210
be able to handle the success but also

01:04:34,830 --> 01:04:37,710
handle the failure and you want to be

01:04:36,210 --> 01:04:39,990
able to chain these things together in a

01:04:37,710 --> 01:04:43,220
way that you can sort of say do multiple

01:04:39,990 --> 01:04:46,680
things and just tell me when it's done

01:04:43,220 --> 01:04:48,870
people who do JavaScript development

01:04:46,680 --> 01:04:50,040
sometimes probably know that these days

01:04:48,870 --> 01:04:51,600
actually a lot of things have

01:04:50,040 --> 01:04:53,280
implemented their own including jQuery

01:04:51,600 --> 01:04:54,840
jQuery now comes with some deferred

01:04:53,280 --> 01:04:56,490
implementation did the deferred

01:04:54,840 --> 01:04:59,190
implementations more like an event

01:04:56,490 --> 01:05:01,350
yeah it's source so it can be called

01:04:59,190 --> 01:05:02,550
multiple times comment no it can't be

01:05:01,350 --> 01:05:04,770
called multiple times but you can do

01:05:02,550 --> 01:05:06,840
chaining oh you got together all the

01:05:04,770 --> 01:05:07,570
callbacks get called with the same value

01:05:06,840 --> 01:05:09,100
so

01:05:07,570 --> 01:05:12,100
Tristan's deferreds are a little bit

01:05:09,100 --> 01:05:13,360
more powerful than jquery's but the

01:05:12,100 --> 01:05:15,340
essential idea is still the same you

01:05:13,360 --> 01:05:17,050
give it you get an object right now that

01:05:15,340 --> 01:05:19,330
represents a promise that something will

01:05:17,050 --> 01:05:23,800
happen in the future so has anybody use

01:05:19,330 --> 01:05:25,900
Maki kit it's a JavaScript thingy it's

01:05:23,800 --> 01:05:27,550
got very good deferred implementation

01:05:25,900 --> 01:05:29,650
but it gets the order of arguments are

01:05:27,550 --> 01:05:31,990
all going around which is a bit annoying

01:05:29,650 --> 01:05:33,520
so it's promised the result a result

01:05:31,990 --> 01:05:36,310
will appear in the future you can pass

01:05:33,520 --> 01:05:39,790
the that promise around so it's not you

01:05:36,310 --> 01:05:41,470
know you add a callback to be called you

01:05:39,790 --> 01:05:42,910
can actually return it without any

01:05:41,470 --> 01:05:46,000
callbacks attached and let your calling

01:05:42,910 --> 01:05:48,450
code attach the callbacks you can attach

01:05:46,000 --> 01:05:51,340
more callbacks to to you it is

01:05:48,450 --> 01:05:52,660
technically not standalone as in the

01:05:51,340 --> 01:05:55,300
twisted internet package because it

01:05:52,660 --> 01:05:57,820
depends on a tiny tiny thing and twisted

01:05:55,300 --> 01:06:00,280
into that to do with the reactor but in

01:05:57,820 --> 01:06:04,240
general it's actually pure Python you

01:06:00,280 --> 01:06:06,910
I've done till the break the air okay

01:06:04,240 --> 01:06:08,620
so the idea is in the pinning example

01:06:06,910 --> 01:06:12,010
you're the panini you get back a

01:06:08,620 --> 01:06:13,840
deferred immediately so this is the

01:06:12,010 --> 01:06:19,960
promise of the result and you and you

01:06:13,840 --> 01:06:22,480
can attach a method to to be called and

01:06:19,960 --> 01:06:25,360
you can add call backs and what we call

01:06:22,480 --> 01:06:28,450
Erb acts which is what what to do in

01:06:25,360 --> 01:06:32,740
case of an error they're everywhere in

01:06:28,450 --> 01:06:38,680
twisted mostly so that you can ask

01:06:32,740 --> 01:06:41,110
questions and get answers yeah so we've

01:06:38,680 --> 01:06:44,800
got a twisted variant of URL Lib we call

01:06:41,110 --> 01:06:48,340
it twisted web client actually if you

01:06:44,800 --> 01:06:50,080
use that Python - M twisted concert on

01:06:48,340 --> 01:06:51,850
Saturday oh that's actually a really

01:06:50,080 --> 01:06:56,590
neat way of doing that duh I recommend

01:06:51,850 --> 01:06:59,380
doing that now type Python - M I'll

01:06:56,590 --> 01:07:06,790
demonstrate oh not objected properly

01:06:59,380 --> 01:07:11,080
Loren's all right ah twisted dot con dog

01:07:06,790 --> 01:07:13,540
is bigger hmm lab work yeah except it

01:07:11,080 --> 01:07:17,280
breaks I turn - yeah all right

01:07:13,540 --> 01:07:17,280
really so show you some

01:07:18,140 --> 01:07:21,320
it's um

01:07:30,290 --> 01:07:43,490
the twisted dot webclient import get

01:07:34,130 --> 01:07:44,810
page get page HTTP Oh big not found

01:07:43,490 --> 01:07:46,880
apparently I'm not on the internet are

01:07:44,810 --> 01:07:52,190
let me just quickly start a web server

01:07:46,880 --> 01:07:56,780
no I must end that's because they've

01:07:52,190 --> 01:08:00,020
pulled you're all right uh you don't

01:07:56,780 --> 01:08:06,100
have any that's alright I'm running a

01:08:00,020 --> 01:08:11,540
web server all right look

01:08:06,100 --> 01:08:14,420
and so if you do this you actually see

01:08:11,540 --> 01:08:18,620
your deferred instance D equals on the

01:08:14,420 --> 01:08:27,680
score so that's your deferred and I can

01:08:18,620 --> 01:08:34,310
def foo page print page DD callback foo

01:08:27,680 --> 01:08:36,670
and it prints it so so that's that's

01:08:34,310 --> 01:08:39,680
actually a really good example of using

01:08:36,670 --> 01:08:42,109
this to to quickly prototype things and

01:08:39,680 --> 01:08:46,040
check out how api's work you'll see that

01:08:42,109 --> 01:08:49,040
when you what actually called this

01:08:46,040 --> 01:08:51,589
method it founded of creditor deferred

01:08:49,040 --> 01:08:53,420
and because it knew how to deferred on

01:08:51,589 --> 01:08:55,520
the previous line in it it noticed

01:08:53,420 --> 01:08:56,900
before I finish typing that have been

01:08:55,520 --> 01:08:58,670
called back and so actually showed the

01:08:56,900 --> 01:09:02,989
result immediately it's really neat like

01:08:58,670 --> 01:09:03,529
that and this is an example of creating

01:09:02,989 --> 01:09:06,410
a callback

01:09:03,529 --> 01:09:09,680
adding the callback and it just prints

01:09:06,410 --> 01:09:11,540
of that right and that's the return

01:09:09,680 --> 01:09:17,060
value of do I had call back so you can

01:09:11,540 --> 01:09:19,130
do so if I do that again this will print

01:09:17,060 --> 01:09:21,319
none because the previous callback

01:09:19,130 --> 01:09:23,779
didn't return anything it returned none

01:09:21,319 --> 01:09:25,310
so any chain things together you can

01:09:23,779 --> 01:09:26,750
mutate the value as you go through if

01:09:25,310 --> 01:09:28,130
your return not it ends up being non so

01:09:26,750 --> 01:09:30,319
this should be none yep

01:09:28,130 --> 01:09:34,940
none so you can chain them together

01:09:30,319 --> 01:09:35,480
alright ah how do I get back into the

01:09:34,940 --> 01:09:37,100
slideshow

01:09:35,480 --> 01:09:41,720
does anyone know how to use this play

01:09:37,100 --> 01:09:44,330
was amazing play yay play alright

01:09:41,720 --> 01:09:50,960
I actually use keynote for the first

01:09:44,330 --> 01:09:52,460
time for this so that this is the

01:09:50,960 --> 01:09:55,820
previous example and this is how to do

01:09:52,460 --> 01:09:58,900
it asynchronously so what we do is is we

01:09:55,820 --> 01:10:02,090
call get page instead we get add

01:09:58,900 --> 01:10:04,970
deferred object we add a callback when

01:10:02,090 --> 01:10:06,980
we've actually just implemented a method

01:10:04,970 --> 01:10:08,780
right there which you know prints the

01:10:06,980 --> 01:10:10,280
the data so this is those four lines

01:10:08,780 --> 01:10:15,980
moved up a bit and put it in a callback

01:10:10,280 --> 01:10:19,670
it's a bit messy so just reminder this

01:10:15,980 --> 01:10:21,560
is a this is a closure so self is

01:10:19,670 --> 01:10:24,850
actually that self it's not passed

01:10:21,560 --> 01:10:29,270
through teacup data line is that line

01:10:24,850 --> 01:10:31,280
start is that start but everyone's use

01:10:29,270 --> 01:10:32,830
closures like this before maybe who

01:10:31,280 --> 01:10:36,710
hasn't it has never seen this before

01:10:32,830 --> 01:10:38,150
Wow okay you can the a function

01:10:36,710 --> 01:10:41,060
definition is just an assignment you can

01:10:38,150 --> 01:10:43,190
do it in any scope and and it carries

01:10:41,060 --> 01:10:45,230
carries through the locals of its parent

01:10:43,190 --> 01:10:47,240
the only the only issue is you can't

01:10:45,230 --> 01:10:48,590
bind a name and the enclosing scope you

01:10:47,240 --> 01:10:50,150
can do anything to do with modifying

01:10:48,590 --> 01:10:56,300
them or accessing the B you can't remind

01:10:50,150 --> 01:10:58,610
them this is a bit of a tidier way so

01:10:56,300 --> 01:11:04,790
actually defining a method on the object

01:10:58,610 --> 01:11:06,500
itself and you'll see so this method is

01:11:04,790 --> 01:11:09,350
not defining the object itself so has a

01:11:06,500 --> 01:11:12,200
self and that's implicit that's that's

01:11:09,350 --> 01:11:13,850
the result of the defer that's fired and

01:11:12,200 --> 01:11:17,090
you see these two parameters here URL

01:11:13,850 --> 01:11:19,100
and start time when you add a callback

01:11:17,090 --> 01:11:22,760
you can add more arguments it's like a

01:11:19,100 --> 01:11:24,950
star arts when you add more arguments

01:11:22,760 --> 01:11:29,420
they're passed through and so this is

01:11:24,950 --> 01:11:31,700
how you can transfer state between but

01:11:29,420 --> 01:11:37,670
between the call the call site and and

01:11:31,700 --> 01:11:39,920
the callback without using closures go

01:11:37,670 --> 01:11:43,850
for it whether this is proxy to this is

01:11:39,920 --> 01:11:46,910
the same example but using get page you

01:11:43,850 --> 01:11:49,330
run this now proxy to from the from the

01:11:46,910 --> 01:11:49,330
table

01:11:49,900 --> 01:11:58,290
the limiter at the end Lorenz has just

01:11:55,330 --> 01:12:00,600
pointed something out there's about here

01:11:58,290 --> 01:12:03,159
we've got lined up starts with that

01:12:00,600 --> 01:12:04,900
because line is line we receive and then

01:12:03,159 --> 01:12:05,980
we get page in the line rashly passing

01:12:04,900 --> 01:12:07,960
through the line delimiter there we

01:12:05,980 --> 01:12:13,420
should strip it off

01:12:07,960 --> 01:12:16,270
I remember this magically working so I

01:12:13,420 --> 01:12:18,610
think that page will just take it and

01:12:16,270 --> 01:12:19,860
run with it but it probably you're all

01:12:18,610 --> 01:12:25,780
encodes it yeah

01:12:19,860 --> 01:12:28,090
that's fancy also a little silly all

01:12:25,780 --> 01:12:29,489
right so basically to repeat for the

01:12:28,090 --> 01:12:31,540
people who didn't hear me the first time

01:12:29,489 --> 01:12:33,969
when you

01:12:31,540 --> 01:12:36,400
so when line received gets called the

01:12:33,969 --> 01:12:39,340
line still has the delimiter at the end

01:12:36,400 --> 01:12:43,060
of the line it's not stripped off so the

01:12:39,340 --> 01:12:46,870
URL isn't like HTTP slash Google com

01:12:43,060 --> 01:12:52,210
it's HTTP slash here'sh Google com our

01:12:46,870 --> 01:12:55,300
/n you don't have to type this out it's

01:12:52,210 --> 01:12:59,469
on on the key now um this is another way

01:12:55,300 --> 01:13:02,070
of doing it ah I've got some bad

01:12:59,469 --> 01:13:05,159
indentation there I'm a bad person um

01:13:02,070 --> 01:13:09,219
sorry that print should not be indented

01:13:05,159 --> 01:13:12,100
sorry sorry sorry sorry okay so this is

01:13:09,219 --> 01:13:14,110
this is a thing to make this easier to

01:13:12,100 --> 01:13:17,140
write so it's called inline callbacks

01:13:14,110 --> 01:13:20,620
it's a decorator and it does and it

01:13:17,140 --> 01:13:23,860
turns whatever method it is into a into

01:13:20,620 --> 01:13:25,840
a deferred and because of that it

01:13:23,860 --> 01:13:28,179
actually stops up line received so so we

01:13:25,840 --> 01:13:32,980
call forget page method from front line

01:13:28,179 --> 01:13:35,949
received so what what this does is this

01:13:32,980 --> 01:13:38,770
turn this is a decorator which goes and

01:13:35,949 --> 01:13:41,020
calls this method and and returns a

01:13:38,770 --> 01:13:44,949
deferred and this is a generator is it

01:13:41,020 --> 01:13:48,550
uses a yield what this does is it if you

01:13:44,949 --> 01:13:50,350
yield the deferred this will this

01:13:48,550 --> 01:13:52,870
generator will not continue exiting

01:13:50,350 --> 01:13:55,510
until that deferred has fired it that

01:13:52,870 --> 01:14:00,100
essentially adds a callback of of

01:13:55,510 --> 01:14:02,180
calling generator send so in this

01:14:00,100 --> 01:14:04,190
particular case

01:14:02,180 --> 01:14:11,060
you can write this function as if it

01:14:04,190 --> 01:14:16,090
were like this so you see that URL Lib

01:14:11,060 --> 01:14:18,770
URL open that becomes this line here

01:14:16,090 --> 01:14:20,480
page equals yield get patch and so this

01:14:18,770 --> 01:14:23,180
is asynchronously returning control to

01:14:20,480 --> 01:14:24,860
the event loop and then return control

01:14:23,180 --> 01:14:28,280
back here now this is a nice neat way of

01:14:24,860 --> 01:14:30,830
avoiding messy callbacks callbacks are

01:14:28,280 --> 01:14:33,800
sometimes quite hard to read generally I

01:14:30,830 --> 01:14:35,750
use this technique when you've got a

01:14:33,800 --> 01:14:38,470
pipeline of things to do

01:14:35,750 --> 01:14:41,930
whereas I use defers explicitly when I'm

01:14:38,470 --> 01:14:43,670
writing say a server which which

01:14:41,930 --> 01:14:47,750
attaches a few callbacks before

01:14:43,670 --> 01:14:50,030
returning a value when I'm especially

01:14:47,750 --> 01:14:51,350
like when you're writing one-off scripts

01:14:50,030 --> 01:14:53,720
to do something on a server somewhere

01:14:51,350 --> 01:14:56,270
then what you really want to express is

01:14:53,720 --> 01:14:57,620
do something then do something else then

01:14:56,270 --> 01:14:59,450
do something else which is inherently

01:14:57,620 --> 01:15:01,160
synchronous but because you're already

01:14:59,450 --> 01:15:02,570
right using twisted so you probably want

01:15:01,160 --> 01:15:05,450
to reuse your protocol you want to reuse

01:15:02,570 --> 01:15:06,980
all of your tools so this is this makes

01:15:05,450 --> 01:15:08,210
it really easy to express synchronous

01:15:06,980 --> 01:15:10,850
things because you're expressing them

01:15:08,210 --> 01:15:13,940
synchronously it makes it really hard to

01:15:10,850 --> 01:15:15,739
express asynchronous things so depending

01:15:13,940 --> 01:15:19,070
on what you want the tool is there to

01:15:15,739 --> 01:15:21,440
make it look easy so this is a proxy 3py

01:15:19,070 --> 01:15:22,850
if you want to run it there one of one

01:15:21,440 --> 01:15:26,300
of the problems here is that because

01:15:22,850 --> 01:15:30,970
it's doing fancy things with with

01:15:26,300 --> 01:15:33,140
generators and generators and and

01:15:30,970 --> 01:15:34,820
mucking around with the event loop and

01:15:33,140 --> 01:15:38,239
wrapping everything trace backs look

01:15:34,820 --> 01:15:40,400
awful so so be prepared for if using

01:15:38,239 --> 01:15:42,530
these to have trace backs that don't

01:15:40,400 --> 01:15:44,720
seem to make any sense because you're

01:15:42,530 --> 01:15:48,020
you're in the bowels of some of another

01:15:44,720 --> 01:15:49,850
process for getting this running this is

01:15:48,020 --> 01:15:53,330
an example of using the timing client

01:15:49,850 --> 01:15:56,540
and you can see that the the cost is now

01:15:53,330 --> 01:15:58,550
the cost of the slowest page amazon.com

01:15:56,540 --> 01:16:03,350
in this particular example being the

01:15:58,550 --> 01:16:04,790
slowest this is clearly Erastus was the

01:16:03,350 --> 01:16:06,920
person who wrote these slides originally

01:16:04,790 --> 01:16:09,020
clearly he was very close to his own

01:16:06,920 --> 01:16:11,840
server and further away from Apple and

01:16:09,020 --> 01:16:13,430
Google because the agency and you see

01:16:11,840 --> 01:16:14,580
you know the sum of the requests was

01:16:13,430 --> 01:16:15,870
four seconds and spread

01:16:14,580 --> 01:16:17,520
I did 1.5 because it's running

01:16:15,870 --> 01:16:18,150
asynchronously multiple requests at the

01:16:17,520 --> 01:16:21,210
same time

01:16:18,150 --> 01:16:23,520
so in summary callbacks SP cooperative

01:16:21,210 --> 01:16:25,020
you return control back to the loop and

01:16:23,520 --> 01:16:28,170
look at a loop or call your code when

01:16:25,020 --> 01:16:30,330
the network is ready avoid calling

01:16:28,170 --> 01:16:32,640
blocking functions now there is a caller

01:16:30,330 --> 01:16:34,950
e to this if your if you want to do

01:16:32,640 --> 01:16:36,420
database stuff and your database is very

01:16:34,950 --> 01:16:37,950
fast like you don't ask you a light

01:16:36,420 --> 01:16:40,200
you're doing index queries or you've got

01:16:37,950 --> 01:16:42,750
my SQL on a local server and it's very

01:16:40,200 --> 01:16:46,680
very fast and you don't really care so

01:16:42,750 --> 01:16:49,050
much it's not so bad but you just have

01:16:46,680 --> 01:16:50,730
to be aware that you have to balance out

01:16:49,050 --> 01:16:53,340
the number of clients you have this is

01:16:50,730 --> 01:16:54,720
the latency of your database queries but

01:16:53,340 --> 01:16:56,790
if you're definitely doing things that

01:16:54,720 --> 01:16:58,200
could even timeout you always want to

01:16:56,790 --> 01:17:04,740
make sure you're doing Mason currency or

01:16:58,200 --> 01:17:07,230
a thread so exercise to a take proxy to

01:17:04,740 --> 01:17:09,990
or proxy 3 whichever one you're most

01:17:07,230 --> 01:17:12,570
confident with using and implement a

01:17:09,990 --> 01:17:16,290
caching proxy server which will not

01:17:12,570 --> 01:17:18,410
request the same website twice go run it

01:17:16,290 --> 01:17:18,410
now

01:17:24,390 --> 01:17:31,500
if it's the same URL then return the

01:17:26,760 --> 01:17:35,400
case data so store each response and and

01:17:31,500 --> 01:17:36,840
return them a dictionary for four save

01:17:35,400 --> 01:17:41,880
the response order in a dictionary and

01:17:36,840 --> 01:17:49,020
then just return it this is the last

01:17:41,880 --> 01:17:51,570
exercise before the coffee break always

01:17:49,020 --> 01:17:53,040
sorry I there's the person behind you

01:17:51,570 --> 01:18:00,440
has a USB key you saw that you're

01:17:53,040 --> 01:18:00,440
speaking no whiskey anyone come on No oh

01:18:01,520 --> 01:18:08,280
yeah I or files EP is the is the website

01:18:06,570 --> 01:18:10,730
and you can navigate through the

01:18:08,280 --> 01:18:10,730
tutorials

01:18:24,590 --> 01:18:31,910
and if you're feeling really advanced

01:18:27,070 --> 01:18:34,130
and you do that quickly making it so you

01:18:31,910 --> 01:18:37,990
don't request the same web web page

01:18:34,130 --> 01:18:37,990
twice if you've got a query in flight

01:18:42,160 --> 01:18:45,920
that's actually a really nasty one

01:18:43,970 --> 01:18:49,640
especially if you've got used to third

01:18:45,920 --> 01:18:52,550
before after next year we should

01:18:49,640 --> 01:18:58,070
actually get you to the test suite yeah

01:18:52,550 --> 01:18:59,510
to eight make tests to a pass yeah so

01:18:58,070 --> 01:19:01,040
the suggestion was we should have unit

01:18:59,510 --> 01:19:04,070
tests that you can run it run against

01:19:01,040 --> 01:19:05,330
this unit testing twisted is quite easy

01:19:04,070 --> 01:19:06,560
you don't actually set up any network

01:19:05,330 --> 01:19:08,290
connections you just create an instance

01:19:06,560 --> 01:19:10,610
of the protocol and call a medical

01:19:08,290 --> 01:19:19,550
connection made and daughter received

01:19:10,610 --> 01:19:22,430
and see what happens we have another USB

01:19:19,550 --> 01:19:25,180
key let me just make a new one because I

01:19:22,430 --> 01:19:25,180
don't know what the elements are

01:19:29,889 --> 01:19:34,219
within the trista community like testing

01:19:32,510 --> 01:19:36,350
is taken extremely seriously if you find

01:19:34,219 --> 01:19:37,820
some random TX project there is a good

01:19:36,350 --> 01:19:42,500
chance that it's going to have like

01:19:37,820 --> 01:19:44,179
literally 100% branch coverage it and to

01:19:42,500 --> 01:19:45,949
twist it itself like for example does

01:19:44,179 --> 01:19:49,130
not accept new code unless it is

01:19:45,949 --> 01:19:51,409
completely unit tested we don't take bug

01:19:49,130 --> 01:19:53,170
fixes unless there's a unit test to

01:19:51,409 --> 01:19:55,070
prove that there was ever a bug

01:19:53,170 --> 01:19:57,889
sometimes this makes it really annoying

01:19:55,070 --> 01:20:00,139
like you know there's weird-ass SSL edge

01:19:57,889 --> 01:20:02,989
cases that just don't make sense and are

01:20:00,139 --> 01:20:04,340
impossible to unit tests but it overall

01:20:02,989 --> 01:20:12,920
I'd say it makes it code quality a lot

01:20:04,340 --> 01:20:16,690
better my computer is just refused to

01:20:12,920 --> 01:20:16,690
believe that USB keys exist

01:21:26,120 --> 01:21:28,150
I

01:21:40,850 --> 01:21:43,630
you

01:21:47,430 --> 01:21:51,020
yes what is it

01:21:55,090 --> 01:21:57,960
because it follow

01:21:59,240 --> 01:22:01,300
ah

01:22:01,490 --> 01:22:04,420
the back of this

01:22:06,090 --> 01:22:08,930
I might

01:22:24,660 --> 01:22:27,410
hmm

01:22:44,910 --> 01:22:49,110
just get the same products

01:22:53,410 --> 01:22:59,500
that's why I put a zip file on there as

01:22:55,450 --> 01:23:01,600
well the zip file should be on the

01:22:59,500 --> 01:23:17,650
website there's two things next to each

01:23:01,600 --> 01:23:21,210
other once as it follows if anyone wants

01:23:17,650 --> 01:23:21,210
any help slide me down

01:23:28,530 --> 01:23:32,630
sorry he's fiddling with his laptop

01:23:58,310 --> 01:24:04,340
so one of those is a zip file no no

01:24:01,190 --> 01:24:06,680
that's the not ignore that one it's the

01:24:04,340 --> 01:24:07,490
training ones just that your

01:24:06,680 --> 01:24:09,410
acquaintance yeah

01:24:07,490 --> 01:24:19,850
first ones a zip second ones that IDs at

01:24:09,410 --> 01:24:21,860
Arby's up to that one so the other one

01:24:19,850 --> 01:24:23,960
is just a requirements file a pip

01:24:21,860 --> 01:24:27,530
requirements are it's just that if I

01:24:23,960 --> 01:24:31,580
upload chat text files it it mocks up

01:24:27,530 --> 01:24:34,700
quite badly the requirements file isn't

01:24:31,580 --> 01:24:38,720
required but it but I've got a

01:24:34,700 --> 01:24:40,280
demonstration of how you can do it did

01:24:38,720 --> 01:24:43,640
anyone go to the tornado talk the other

01:24:40,280 --> 01:24:45,380
day oh okay

01:24:43,640 --> 01:24:47,330
there's a torque on tornado which is

01:24:45,380 --> 01:24:50,600
another asynchronous networking

01:24:47,330 --> 01:24:52,580
framework which integrates with twisted

01:24:50,600 --> 01:24:56,300
quite neatly so I just a demonstration

01:24:52,580 --> 01:24:58,220
in big demo dot py of using tornado and

01:24:56,300 --> 01:25:00,530
twisted and courage wine which is a

01:24:58,220 --> 01:25:04,040
green 'lets thing as well as inline

01:25:00,530 --> 01:25:09,710
callbacks I know I didn't do something

01:25:04,040 --> 01:25:12,740
no cyclones are not the same cyclone is

01:25:09,710 --> 01:25:17,180
a reimplementation a tornado yeah

01:25:12,740 --> 01:25:18,470
but the the event loop that is

01:25:17,180 --> 01:25:21,940
implemented that is implemented by

01:25:18,470 --> 01:25:27,080
tornado can be used as a reactor and

01:25:21,940 --> 01:25:30,770
they cooperate yeah twisted you know

01:25:27,080 --> 01:25:34,750
tornado platforms or platform not

01:25:30,770 --> 01:25:34,750
twisted import reactor

01:25:58,249 --> 01:26:02,110
favor do this again unit tests

01:26:05,740 --> 01:26:10,540
we didn't explain what a primed i'm

01:26:08,110 --> 01:26:13,300
deferred i know what the forensics egos

01:26:10,540 --> 01:26:14,700
but i can't tell from that explanation

01:26:13,300 --> 01:26:18,990
um

01:26:14,700 --> 01:26:22,900
yes sir maybe i should mention that um i

01:26:18,990 --> 01:26:24,610
deferred there are two we didn't

01:26:22,900 --> 01:26:26,530
actually demonstrate that i'll i'll

01:26:24,610 --> 01:26:28,750
quickly demonstrate that with with the

01:26:26,530 --> 01:26:30,370
with the console get a ripple going on

01:26:28,750 --> 01:26:32,650
oh yeah that's going on so basically uh

01:26:30,370 --> 01:26:35,590
as you said before i deferred is

01:26:32,650 --> 01:26:37,870
something that is something that you get

01:26:35,590 --> 01:26:40,090
now that represents some data that will

01:26:37,870 --> 01:26:42,070
happen in the future right but sometimes

01:26:40,090 --> 01:26:44,200
you get things you have things already

01:26:42,070 --> 01:26:46,750
for example in the case of your if your

01:26:44,200 --> 01:26:48,400
caching proxy let's say you've already

01:26:46,750 --> 01:26:50,670
made that request you already have the

01:26:48,400 --> 01:26:53,350
response somewhere in a dictionary right

01:26:50,670 --> 01:26:55,930
so you still want to return a deferred

01:26:53,350 --> 01:26:57,490
because your api is deferred but you

01:26:55,930 --> 01:26:59,890
want to return a deferred that has the

01:26:57,490 --> 01:27:03,400
data already right now so for that you

01:26:59,890 --> 01:27:05,800
have deferred so defer the module defer

01:27:03,400 --> 01:27:07,540
dot succeed which basically creates a

01:27:05,800 --> 01:27:09,160
deferred fires it immediately and just

01:27:07,540 --> 01:27:11,290
returns you to the returns a deferred

01:27:09,160 --> 01:27:12,910
it's only like three lines but it's

01:27:11,290 --> 01:27:14,950
something that's common enough that you

01:27:12,910 --> 01:27:18,160
want to make it one line similarly

01:27:14,950 --> 01:27:20,140
there's the FIR dot fail which is the

01:27:18,160 --> 01:27:22,620
same thing except for errors instead of

01:27:20,140 --> 01:27:22,620
successes

01:27:33,320 --> 01:27:40,680
so that's a little example of creating

01:27:37,770 --> 01:27:42,660
deferred in our normal one and it

01:27:40,680 --> 01:27:46,440
calling callback as a way of firing it

01:27:42,660 --> 01:27:49,140
so you create it then then call it you

01:27:46,440 --> 01:27:52,320
can only call callback once or you can

01:27:49,140 --> 01:27:53,670
just call deferred succeed and that's

01:27:52,320 --> 01:27:54,930
the same as creating one then

01:27:53,670 --> 01:27:59,130
immediately calling the callback

01:27:54,930 --> 01:28:00,710
function deferred fail is the same as

01:27:59,130 --> 01:28:04,410
creating one and immediately calling the

01:28:00,710 --> 01:28:06,180
back function I'm just quickly adding a

01:28:04,410 --> 01:28:07,950
callback and adding a note back there to

01:28:06,180 --> 01:28:13,230
demonstrate because that's my foo from

01:28:07,950 --> 01:28:15,030
earlier which prints I've whatever I do

01:28:13,230 --> 01:28:18,240
examples I always use foo in them it's

01:28:15,030 --> 01:28:19,950
very bad of me especially when I mark it

01:28:18,240 --> 01:28:21,660
up by actually using food my string and

01:28:19,950 --> 01:28:28,470
put my function and then different

01:28:21,660 --> 01:28:30,120
prints foo and it's very food are from

01:28:28,470 --> 01:28:35,010
future import print function this is

01:28:30,120 --> 01:28:39,150
awesome if you're writing code does this

01:28:35,010 --> 01:28:45,870
even work well because you can't do

01:28:39,150 --> 01:28:46,770
future input oh this is it does work

01:28:45,870 --> 01:28:48,630
that's amazing

01:28:46,770 --> 01:28:50,490
I thought you had to do future imports

01:28:48,630 --> 01:28:52,380
of the beginning ear module if you're

01:28:50,490 --> 01:28:56,580
writing like if you're writing a module

01:28:52,380 --> 01:28:58,920
yes in a ripple no ah Lorenz has just

01:28:56,580 --> 01:29:00,630
taught me something new so so one

01:28:58,920 --> 01:29:02,070
problem with print of course is that is

01:29:00,630 --> 01:29:02,840
not a function and so you can't add it

01:29:02,070 --> 01:29:05,160
as a callback

01:29:02,840 --> 01:29:06,840
turns out if you do from future import

01:29:05,160 --> 01:29:09,330
print function you can edit add as a

01:29:06,840 --> 01:29:11,760
callback so you have a nice callback

01:29:09,330 --> 01:29:14,220
which prints stuff out that has been my

01:29:11,760 --> 01:29:17,910
biggest annoyance and now it is no

01:29:14,220 --> 01:29:19,830
longer Thank You Lawrence alright so it

01:29:17,910 --> 01:29:25,830
so in this case um I'm just going to

01:29:19,830 --> 01:29:30,480
show that deferred succeed my page I

01:29:25,830 --> 01:29:33,900
downloaded earlier dot add callback

01:29:30,480 --> 01:29:35,910
print EA and it prints out my page I

01:29:33,900 --> 01:29:38,100
downloaded it earlier so the idea is

01:29:35,910 --> 01:29:40,230
that if it if you've got it in your

01:29:38,100 --> 01:29:43,760
cache than you call then you return at

01:29:40,230 --> 01:29:43,760
the first to see that otherwise you are

01:29:44,010 --> 01:29:55,590
you don't have to how much time do we

01:29:51,120 --> 01:29:56,820
have left okay so it's time for the

01:29:55,590 --> 01:29:58,860
coffee break I'm going to leave the

01:29:56,820 --> 01:30:01,800
answer's up to do you want to leave an

01:29:58,860 --> 01:30:02,760
answer up over the coffee break all

01:30:01,800 --> 01:30:10,620
right I'll do that

01:30:02,760 --> 01:30:14,270
that's a answer which is a is not using

01:30:10,620 --> 01:30:17,310
inline callbacks but using straight-up

01:30:14,270 --> 01:30:23,340
deferreds all right well we'll be back

01:30:17,310 --> 01:30:25,740
here at what time all right well I will

01:30:23,340 --> 01:30:28,920
be back here and I'm going to start

01:30:25,740 --> 01:30:31,140
again in 11:15 so I'll see you in about

01:30:28,920 --> 01:30:32,760
half an hour I'll probably be back here

01:30:31,140 --> 01:30:35,000
a little bit sooner if anyone wants like

01:30:32,760 --> 01:30:38,490
more once to ask more in depth questions

01:30:35,000 --> 01:30:41,100
so this solution does not do the fancy

01:30:38,490 --> 01:30:43,260
version where if there's a request in

01:30:41,100 --> 01:30:45,330
flight that hasn't been answered yet use

01:30:43,260 --> 01:31:00,720
that one and don't make double requests

01:30:45,330 --> 01:31:03,750
this is the simpler version someone

01:31:00,720 --> 01:31:07,160
remain in the room yeah all right so

01:31:03,750 --> 01:31:07,160

YouTube URL: https://www.youtube.com/watch?v=GuNwewBU_Hw


