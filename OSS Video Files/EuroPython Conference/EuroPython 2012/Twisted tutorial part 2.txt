Title: Twisted tutorial part 2
Publication date: 2015-04-19
Playlist: EuroPython 2012
Description: 
	[EuroPython 2012] S Thorne - 5 JULY 2012 in "Track Pizza Margherita"
Captions: 
	00:01:23,880 --> 00:01:32,430
yes yeah all right we're gonna we're

00:01:29,189 --> 00:01:34,530
going to start again so we've done

00:01:32,430 --> 00:01:36,149
service we've done a server at least we

00:01:34,530 --> 00:01:37,740
did the the proxy server we did the

00:01:36,149 --> 00:01:42,810
uppercase server we're going to now do

00:01:37,740 --> 00:01:48,869
clients so previously we used endpoint

00:01:42,810 --> 00:01:51,990
dot ah ok so this is a client running

00:01:48,869 --> 00:02:00,380
using imperative piping with socket that

00:01:51,990 --> 00:02:04,709
was the first first client so we we can

00:02:00,380 --> 00:02:06,179
do this this is big difference here as

00:02:04,709 --> 00:02:09,840
its client from string and sort of

00:02:06,179 --> 00:02:16,799
server from string and this is reusable

00:02:09,840 --> 00:02:18,810
as well so you this example is wrong you

00:02:16,799 --> 00:02:21,810
wrote it I can't believe I wrote that

00:02:18,810 --> 00:02:24,510
anyway uh so the important thing is that

00:02:21,810 --> 00:02:26,489
that there's a closed bracket there and

00:02:24,510 --> 00:02:28,019
you can reuse that to connect to the

00:02:26,489 --> 00:02:31,170
same server multiple time so you can do

00:02:28,019 --> 00:02:32,700
Connect connect connect with it with

00:02:31,170 --> 00:02:37,190
different arguments or whatever you want

00:02:32,700 --> 00:02:39,600
ah you see this should actually be

00:02:37,190 --> 00:02:45,840
returning a value and then doing that

00:02:39,600 --> 00:02:47,940
value connect factory but in general use

00:02:45,840 --> 00:02:50,670
client factory for clients or subclass

00:02:47,940 --> 00:02:52,079
of client factory you don't have to you

00:02:50,670 --> 00:02:55,769
can just use factory but client

00:02:52,079 --> 00:02:59,310
factories preferred and if you run this

00:02:55,769 --> 00:03:02,639
you'll get a trace back because wrong

00:02:59,310 --> 00:03:04,350
number of arguments and this is this is

00:03:02,639 --> 00:03:08,160
just like the original server that we

00:03:04,350 --> 00:03:09,600
wrote which is you know it connects it

00:03:08,160 --> 00:03:11,970
doesn't do anything if it receives any

00:03:09,600 --> 00:03:14,459
data it throws it away protocols for

00:03:11,970 --> 00:03:16,530
clients have exactly the same callback

00:03:14,459 --> 00:03:19,920
function so connection may connection

00:03:16,530 --> 00:03:23,459
lost daughter received the factories are

00:03:19,920 --> 00:03:25,650
more or less the same client factory

00:03:23,459 --> 00:03:28,260
sending data is also just solved

00:03:25,650 --> 00:03:29,519
transport right in fact you can see use

00:03:28,260 --> 00:03:31,019
the same protocol for both the server

00:03:29,519 --> 00:03:34,910
and the client if you've got a symmetric

00:03:31,019 --> 00:03:38,180
protocol so let's use

00:03:34,910 --> 00:03:39,680
a client that will connect to the upper

00:03:38,180 --> 00:03:44,390
case server so if you've got uppercase

00:03:39,680 --> 00:03:49,030
stop here why run that I just so it's

00:03:44,390 --> 00:03:54,680
running in a different terminal and oh

00:03:49,030 --> 00:03:57,080
this is simple client py it's in that

00:03:54,680 --> 00:03:59,000
bundle and we'll run that so so run that

00:03:57,080 --> 00:04:01,070
now in this example you see it's doing

00:03:59,000 --> 00:04:03,650
client from string n point equals

00:04:01,070 --> 00:04:10,970
climbed up string creates a new factory

00:04:03,650 --> 00:04:13,720
for each one and sends it now for every

00:04:10,970 --> 00:04:17,570
connection we're creating a new factory

00:04:13,720 --> 00:04:18,860
this is normal because the the factory

00:04:17,570 --> 00:04:21,020
is what has information about the

00:04:18,860 --> 00:04:22,610
connection once is established and so if

00:04:21,020 --> 00:04:26,330
you reuse the same factory it's going to

00:04:22,610 --> 00:04:28,340
have the same same attributes and so

00:04:26,330 --> 00:04:29,570
it's hard to do unique things on each

00:04:28,340 --> 00:04:30,770
connection so if you want to connect

00:04:29,570 --> 00:04:33,050
five times and send five different

00:04:30,770 --> 00:04:34,520
pieces of data you create five factories

00:04:33,050 --> 00:04:36,440
and each factory just contains one

00:04:34,520 --> 00:04:39,670
protocol and after the connection is

00:04:36,440 --> 00:04:42,320
lost at the factory gets run away run

00:04:39,670 --> 00:04:45,560
uppercase server and then try out simple

00:04:42,320 --> 00:04:47,570
client simple client requires come on

00:04:45,560 --> 00:04:51,169
line arguments which is the host

00:04:47,570 --> 00:04:53,300
importas the first argument and the data

00:04:51,169 --> 00:04:54,740
to send is the the subsequent arguments

00:04:53,300 --> 00:05:00,560
that it will do multiple connections run

00:04:54,740 --> 00:05:04,880
that now this is very similar to the

00:05:00,560 --> 00:05:09,470
original threaded and one threaded

00:05:04,880 --> 00:05:11,360
clients the this will asynchronously do

00:05:09,470 --> 00:05:13,730
multiple connections in parallel so for

00:05:11,360 --> 00:05:16,700
instance if the server takes a long time

00:05:13,730 --> 00:05:21,470
to receive connections or the server

00:05:16,700 --> 00:05:23,900
doesn't respond immediately this this

00:05:21,470 --> 00:05:26,200
will this will queue all discussions up

00:05:23,900 --> 00:05:26,200
simultaneously

00:05:29,360 --> 00:05:36,390
this is an example of it running and so

00:05:32,520 --> 00:05:38,130
you see it's sending a b c and d so it's

00:05:36,390 --> 00:05:40,140
establishing those connections and in

00:05:38,130 --> 00:05:44,750
this in this case it's actually come

00:05:40,140 --> 00:05:47,820
back with da bc so d connected first

00:05:44,750 --> 00:05:49,830
that sort of stuff can happen quite

00:05:47,820 --> 00:05:53,190
easily there's there's no guarantee of

00:05:49,830 --> 00:05:55,290
ordering so the data is returning in

00:05:53,190 --> 00:05:59,490
random order i it's it's all happening

00:05:55,290 --> 00:06:01,560
more or less simultaneously annoyingly

00:05:59,490 --> 00:06:03,390
we can't access saw return data we'll

00:06:01,560 --> 00:06:05,910
talk about that in a bit the loop never

00:06:03,390 --> 00:06:09,690
stops and there is a question about

00:06:05,910 --> 00:06:11,610
performance first question is how do we

00:06:09,690 --> 00:06:14,040
gather reviewed that gather the results

00:06:11,610 --> 00:06:15,720
how do we actually sort of say I want to

00:06:14,040 --> 00:06:18,750
do for queries but I actually want to

00:06:15,720 --> 00:06:23,580
match up the request of the response we

00:06:18,750 --> 00:06:28,230
have a thing called deferred list now

00:06:23,580 --> 00:06:31,560
it's also on the deferred module where's

00:06:28,230 --> 00:06:35,580
the food list here ah okay first of all

00:06:31,560 --> 00:06:37,890
let's just do two thirds so we're just

00:06:35,580 --> 00:06:41,330
using a client factor in addressing it

00:06:37,890 --> 00:06:44,430
with a few attributes text and deferred

00:06:41,330 --> 00:06:46,550
the simple client to you can open this

00:06:44,430 --> 00:06:51,900
code on your machine and you can run it

00:06:46,550 --> 00:06:54,060
this will do create a deferred add a

00:06:51,900 --> 00:06:55,970
call back to it now you know this thing

00:06:54,060 --> 00:06:58,800
for printing the responsive received as

00:06:55,970 --> 00:07:00,390
well as information about the request

00:06:58,800 --> 00:07:03,930
because we're passing the extra

00:07:00,390 --> 00:07:07,050
parameter there which is the request it

00:07:03,930 --> 00:07:09,120
will create the factory and give the

00:07:07,050 --> 00:07:11,100
deferred to the factory because we've

00:07:09,120 --> 00:07:13,680
given that defer to the factory the

00:07:11,100 --> 00:07:16,830
protocol can access it it accesses it

00:07:13,680 --> 00:07:18,680
there so self to factory dartford so in

00:07:16,830 --> 00:07:22,740
this manner we've actually created this

00:07:18,680 --> 00:07:26,250
this full sort of connection between the

00:07:22,740 --> 00:07:28,320
the the requests we've made and the

00:07:26,250 --> 00:07:30,660
response that we get if you are writing

00:07:28,320 --> 00:07:32,160
an API you would wrap this all up in a

00:07:30,660 --> 00:07:36,410
function so you end up just having you

00:07:32,160 --> 00:07:39,870
know get data from the upper case server

00:07:36,410 --> 00:07:42,120
and arguments the server address and the

00:07:39,870 --> 00:07:42,569
and the argument and it would create a

00:07:42,120 --> 00:07:44,099
fact

00:07:42,569 --> 00:07:46,520
reversible deferred out the callback

00:07:44,099 --> 00:07:51,020
return that refer person that deferred

00:07:46,520 --> 00:07:51,020
in this case we're doing all explicitly

00:07:51,830 --> 00:07:57,479
so the important things are you create

00:07:55,259 --> 00:08:00,599
the deferred you pass it around and in

00:07:57,479 --> 00:08:02,449
the future this is the most important

00:08:00,599 --> 00:08:06,059
thing and you do this a lot in clients

00:08:02,449 --> 00:08:07,469
call back call back fires it you can

00:08:06,059 --> 00:08:09,899
only can have the callback called once

00:08:07,469 --> 00:08:14,339
call back starts to the callback chain

00:08:09,899 --> 00:08:17,520
we call a call back here when we receive

00:08:14,339 --> 00:08:19,199
the data sometimes you have a whole list

00:08:17,520 --> 00:08:22,949
of deferred one per request that's made

00:08:19,199 --> 00:08:25,349
so so you might have an entire list of

00:08:22,949 --> 00:08:28,559
them and you you pop them off the list

00:08:25,349 --> 00:08:30,899
in order to get the the what the the

00:08:28,559 --> 00:08:32,610
results in order that kind of thing but

00:08:30,899 --> 00:08:35,550
the important thing is you only call

00:08:32,610 --> 00:08:37,440
them once you throw throw them away

00:08:35,550 --> 00:08:43,199
after you've called them back and lose

00:08:37,440 --> 00:08:47,759
the connection alright this is simple

00:08:43,199 --> 00:08:50,069
client to again the results are in

00:08:47,759 --> 00:08:54,930
random order but there but you see that

00:08:50,069 --> 00:08:57,720
the this callback that we have here dot

00:08:54,930 --> 00:09:00,990
data is linking up the request and the

00:08:57,720 --> 00:09:02,970
data so the response for B is B the

00:09:00,990 --> 00:09:08,870
response to a as a the responses CSC

00:09:02,970 --> 00:09:11,220
response of a DSD it's all linked up yes

00:09:08,870 --> 00:09:13,910
mmm though it can you run down with a

00:09:11,220 --> 00:09:13,910
mic

00:09:16,290 --> 00:09:25,199
oh ok so he wanted wanted some help with

00:09:21,870 --> 00:09:26,519
some code yet all right the other

00:09:25,199 --> 00:09:29,610
problem we have here is the loop never

00:09:26,519 --> 00:09:31,139
stops in when you're writing a client

00:09:29,610 --> 00:09:33,449
you always need to actually shut down

00:09:31,139 --> 00:09:38,180
the event loop otherwise you know it

00:09:33,449 --> 00:09:41,250
kind of gets boring so we have a

00:09:38,180 --> 00:09:42,480
deferred list the third list is

00:09:41,250 --> 00:09:44,009
something which takes a bunch of

00:09:42,480 --> 00:09:46,110
deferred and fires on all of them fire

00:09:44,009 --> 00:09:49,610
in fact it's very customizable you can

00:09:46,110 --> 00:09:51,660
say fire when any of them fire if fire

00:09:49,610 --> 00:09:55,290
only when they're all successful

00:09:51,660 --> 00:09:57,209
otherwise fire back blah blah blah the

00:09:55,290 --> 00:09:59,759
default the default is that it fires

00:09:57,209 --> 00:10:01,259
with true or false depending on whether

00:09:59,759 --> 00:10:06,620
or not each one was successful failure

00:10:01,259 --> 00:10:11,519
and the and the value that it fired with

00:10:06,620 --> 00:10:16,079
so a list of tuples two tuples this is

00:10:11,519 --> 00:10:20,130
an example of deferred list so you have

00:10:16,079 --> 00:10:25,620
to pit I'm feeding back so we've got two

00:10:20,130 --> 00:10:30,120
pages or pulled several pages we create

00:10:25,620 --> 00:10:32,370
a list of all the deferred call get page

00:10:30,120 --> 00:10:36,089
add them all to the list append it to

00:10:32,370 --> 00:10:37,470
the list and then we create it so this

00:10:36,089 --> 00:10:39,029
is a normal list and then this is a

00:10:37,470 --> 00:10:41,399
deferred list that we pass them all to

00:10:39,029 --> 00:10:44,819
and then we add a call back to that to

00:10:41,399 --> 00:10:48,480
say when everything's finished simple

00:10:44,819 --> 00:10:51,180
client three demonstrates deferred lists

00:10:48,480 --> 00:10:52,699
in use so here again we create a list of

00:10:51,180 --> 00:10:56,160
all the Third's we pendant to the list

00:10:52,699 --> 00:10:58,680
and when all of them are fired we

00:10:56,160 --> 00:11:03,120
actually call reactor dot stop run that

00:10:58,680 --> 00:11:07,800
now simplified through same way as the

00:11:03,120 --> 00:11:09,540
client 12 so again requires that you

00:11:07,800 --> 00:11:12,269
pass the host important to connect to

00:11:09,540 --> 00:11:15,660
and envelope our talks to the proxy

00:11:12,269 --> 00:11:19,860
server i think the processor can drop to

00:11:15,660 --> 00:11:21,360
the proxy so here's an example is

00:11:19,860 --> 00:11:23,130
exactly the same as the previous one

00:11:21,360 --> 00:11:26,029
except you see it's returned us to our

00:11:23,130 --> 00:11:28,300
prompt the moment it's finished

00:11:26,029 --> 00:11:30,830
performance

00:11:28,300 --> 00:11:33,740
some client for is much the same except

00:11:30,830 --> 00:11:37,400
it actually says how long it took I'm

00:11:33,740 --> 00:11:42,800
not re is oh he's so the in this example

00:11:37,400 --> 00:11:46,310
he's done it against the the proxy

00:11:42,800 --> 00:11:48,620
server and you see it's doing them all

00:11:46,310 --> 00:11:50,090
simultaneously on the proxy server and

00:11:48,620 --> 00:11:52,040
seeing seeing how long they took note

00:11:50,090 --> 00:11:54,110
making for connections to the proxy

00:11:52,040 --> 00:11:55,160
server and then timing them and then if

00:11:54,110 --> 00:11:56,720
you run this twice against approach

00:11:55,160 --> 00:12:04,190
education proxy server you'll see it all

00:11:56,720 --> 00:12:06,500
that's being instant okay so the next

00:12:04,190 --> 00:12:09,590
exercise exercise 3 i'd like you to

00:12:06,500 --> 00:12:11,750
write a HTTP client a real HD HTTP

00:12:09,590 --> 00:12:14,840
client not using get page but actually

00:12:11,750 --> 00:12:18,980
implement get page so you want to you

00:12:14,840 --> 00:12:22,550
want to send a valid HTTP request that's

00:12:18,980 --> 00:12:24,020
what a valid HTTP request looks like if

00:12:22,550 --> 00:12:26,330
you're going to hit something like

00:12:24,020 --> 00:12:29,210
google com we do recommend a user agent

00:12:26,330 --> 00:12:32,960
string you want to send the data receive

00:12:29,210 --> 00:12:35,900
the data and have it work like that I

00:12:32,960 --> 00:12:41,810
think you might actually find a HTTP GET

00:12:35,900 --> 00:12:43,340
pie in the examples and you can fiddle

00:12:41,810 --> 00:12:47,350
around with that and see how it works so

00:12:43,340 --> 00:12:47,350
you can write it yourself go for

00:12:53,400 --> 00:12:58,080
and any questions hands up

00:13:14,260 --> 00:13:17,500
no no

00:13:49,870 --> 00:13:56,780
so apparently if you're using a slightly

00:13:52,640 --> 00:14:00,320
older version of twisted and the sample

00:13:56,780 --> 00:14:04,210
code uses a positional TCP client point

00:14:00,320 --> 00:14:06,260
so that's TCP colon host colon port

00:14:04,210 --> 00:14:08,390
apparently that only works on really

00:14:06,260 --> 00:14:10,700
really really new twist it's which

00:14:08,390 --> 00:14:12,380
surprised both me and Stephenson what if

00:14:10,700 --> 00:14:14,510
you have an older version you can use it

00:14:12,380 --> 00:14:16,940
with a keyword version so in in front of

00:14:14,510 --> 00:14:18,890
in front of the host you put host equals

00:14:16,940 --> 00:14:20,320
in front of the port you put port equals

00:14:18,890 --> 00:14:25,270
and then it works even on older versions

00:14:20,320 --> 00:14:25,270
apparently that's fine

00:14:38,019 --> 00:14:40,959
so the important they're one of the

00:14:39,670 --> 00:14:43,059
important things here is you don't have

00:14:40,959 --> 00:14:44,949
to work out when the can the response is

00:14:43,059 --> 00:14:48,009
finished you know it's finished because

00:14:44,949 --> 00:14:49,989
the connection closes so you find that a

00:14:48,009 --> 00:14:51,879
further than the connection lost because

00:14:49,989 --> 00:14:55,509
you know the connection lost signifies

00:14:51,879 --> 00:15:01,149
the end of the end of the information

00:14:55,509 --> 00:15:03,639
and you I recommend using line receipt

00:15:01,149 --> 00:15:06,420
actually we didn't cover that line

00:15:03,639 --> 00:15:08,739
receiver has a method called send line

00:15:06,420 --> 00:15:10,360
instead of which you can use instead of

00:15:08,739 --> 00:15:11,829
soft or transport dock right it's so

00:15:10,360 --> 00:15:15,429
convenient way of sending a bunch of

00:15:11,829 --> 00:15:17,499
lines used to send line and then that

00:15:15,429 --> 00:15:19,629
information without online ending and it

00:15:17,499 --> 00:15:20,889
sends it with the delimiter it's

00:15:19,629 --> 00:15:22,299
convenient you don't have to use it you

00:15:20,889 --> 00:15:35,019
can use also transport or right and it

00:15:22,299 --> 00:15:39,100
just works I using formal okay so if

00:15:35,019 --> 00:15:43,629
you're using 12 point 0 to do a 20 a

00:15:39,100 --> 00:15:49,959
connection you have to figure out where

00:15:43,629 --> 00:15:54,299
your terminal is and start one you have

00:15:49,959 --> 00:15:57,549
to do tcp colon host equals localhost

00:15:54,299 --> 00:16:01,269
poor equals eight thousand it's only if

00:15:57,549 --> 00:16:04,079
using twisted 12 point 0 apparently you

00:16:01,269 --> 00:16:07,240
can't do the shorter version which is

00:16:04,079 --> 00:16:11,259
come on not found tcp caller localhost

00:16:07,240 --> 00:16:15,059
colon 8080 all point one version sorry

00:16:11,259 --> 00:16:15,059
about that I didn't actually know that

00:16:20,819 --> 00:16:32,769
I'll leave this up because it's slightly

00:16:23,350 --> 00:16:41,109
more useful friendly that no one knows

00:16:32,769 --> 00:16:43,529
it is because you got stuck to clear the

00:16:41,109 --> 00:16:43,529
Sun cat

00:16:50,980 --> 00:16:53,730
hmm

00:17:22,589 --> 00:17:28,079
servers true

00:17:37,930 --> 00:17:48,440
although that is something you know for

00:17:41,630 --> 00:17:55,269
60 ok finger

00:17:48,440 --> 00:17:55,269
never again tons of Detroit

00:18:15,750 --> 00:18:20,350
can either show of hands of people

00:18:17,740 --> 00:18:24,029
who've basically done this or do you

00:18:20,350 --> 00:18:27,539
want to continue going anyone finished

00:18:24,029 --> 00:18:27,539
few more minutes bro

00:18:40,809 --> 00:18:44,440
this is a sort of thing that's really

00:18:42,669 --> 00:18:49,210
easy to test if you just import your

00:18:44,440 --> 00:18:51,360
module from the the rapel using Python

00:18:49,210 --> 00:18:54,370
minus seven twisted an aveo

00:18:51,360 --> 00:18:56,590
it's just much easier to test that your

00:18:54,370 --> 00:18:59,200
code works and then you can use reload

00:18:56,590 --> 00:19:02,830
to reload your module once you out of it

00:18:59,200 --> 00:19:04,179
just as an idea it allows you to

00:19:02,830 --> 00:19:06,389
interactively and see whether deferred

00:19:04,179 --> 00:19:06,389
fires

00:19:35,200 --> 00:19:37,200
Oh

00:19:58,720 --> 00:20:00,720
Oh

00:20:24,160 --> 00:20:28,420
thanks Stuart

00:20:55,740 --> 00:20:58,740
turtles

00:21:01,940 --> 00:21:05,150
ladies night

00:21:09,400 --> 00:21:15,180
you are just bringing my unit testing

00:21:12,250 --> 00:21:15,180
right code

00:21:38,620 --> 00:21:45,240
it don't actually know how to use it

00:21:40,840 --> 00:21:45,240
anymore say cheese

00:21:49,049 --> 00:21:53,009
those inversion

00:22:14,710 --> 00:22:25,390
okay well I'm just going to move on and

00:22:18,539 --> 00:22:30,070
show a a example of this working so this

00:22:25,390 --> 00:22:31,570
is a get protocol and I've just got a

00:22:30,070 --> 00:22:33,970
method called get here which takes a

00:22:31,570 --> 00:22:36,220
hosts and path you know it's a bit

00:22:33,970 --> 00:22:37,539
annoying you've got a party i'm not

00:22:36,220 --> 00:22:38,919
using your all parts here i've just got

00:22:37,539 --> 00:22:42,070
the host and part from the on the

00:22:38,919 --> 00:22:47,350
promise it sets the host and path from

00:22:42,070 --> 00:22:49,000
the factory creates deferred I just do

00:22:47,350 --> 00:22:50,409
this on the line before so it's sudden

00:22:49,000 --> 00:22:54,820
so I don't end up with a huge long line

00:22:50,409 --> 00:22:58,240
and it I don't can't believe myself this

00:22:54,820 --> 00:23:01,990
should be a dot connect I'm fixing that

00:22:58,240 --> 00:23:09,720
right now I'm sorry guys this example

00:23:01,990 --> 00:23:09,720
should be dot connect f all right sorry

00:23:10,140 --> 00:23:16,559
yes hmm

00:23:18,970 --> 00:23:29,919
yep yep that's exactly and it returns a

00:23:23,530 --> 00:23:31,780
strop deferred so this will connect when

00:23:29,919 --> 00:23:34,450
one connection is made it will write all

00:23:31,780 --> 00:23:36,220
the staff when data received just called

00:23:34,450 --> 00:23:38,230
it will append everything to a buffer

00:23:36,220 --> 00:23:41,500
I'm actually using protocol non line

00:23:38,230 --> 00:23:45,340
protocol and on protection lost we'll

00:23:41,500 --> 00:23:48,190
just call the football back with string

00:23:45,340 --> 00:23:50,260
not join the buffer if you are really

00:23:48,190 --> 00:23:53,760
fancy you do something where it pipes it

00:23:50,260 --> 00:23:58,679
through w3m in order to strip out the

00:23:53,760 --> 00:24:01,080
HTML but so I attention to be kept up pi

00:23:58,679 --> 00:24:04,210
which might even work I don't even know

00:24:01,080 --> 00:24:05,830
so when you're running clients ago know

00:24:04,210 --> 00:24:08,830
what's runway the end you're right the

00:24:05,830 --> 00:24:09,970
protocol object.create the factory set

00:24:08,830 --> 00:24:12,610
the instance variables that's the

00:24:09,970 --> 00:24:14,169
general pattern you use access some

00:24:12,610 --> 00:24:16,090
variables from the factory from the

00:24:14,169 --> 00:24:22,210
protocol and connect the factory door

00:24:16,090 --> 00:24:26,220
host and socket most important when when

00:24:22,210 --> 00:24:29,500
you've got a long connections

00:24:26,220 --> 00:24:31,120
connections which saves running an IRC

00:24:29,500 --> 00:24:32,140
bot for instance it's a sort of thing

00:24:31,120 --> 00:24:34,480
you want to want the connection to

00:24:32,140 --> 00:24:37,960
always be up and if it gets this connect

00:24:34,480 --> 00:24:40,720
to reconnect reconnecting client factory

00:24:37,960 --> 00:24:43,840
is what you use it also has exponential

00:24:40,720 --> 00:24:46,480
back-off which is useful when you're on

00:24:43,840 --> 00:24:47,950
conference Wi-Fi and you want to be able

00:24:46,480 --> 00:24:51,640
to connect four minutes at a time so it

00:24:47,950 --> 00:24:54,130
you know connects to x KX connects and

00:24:51,640 --> 00:24:55,299
two and then on the next successful

00:24:54,130 --> 00:24:58,289
connection you call the method which

00:24:55,299 --> 00:25:01,000
resets the delay read the API Doc's

00:24:58,289 --> 00:25:02,230
reconnecting client factory is similar

00:25:01,000 --> 00:25:03,880
to a client factory but for

00:25:02,230 --> 00:25:08,650
reconnections I recommend you use it for

00:25:03,880 --> 00:25:10,059
things like those cases IRC BOTS is that

00:25:08,650 --> 00:25:12,520
anything else on the internet uses

00:25:10,059 --> 00:25:14,650
long-running connections anymore besides

00:25:12,520 --> 00:25:16,570
there are two bucks no no okay good all

00:25:14,650 --> 00:25:20,860
right now everybody likes to write an

00:25:16,570 --> 00:25:26,190
IRC bots so I mentioned that a twisted

00:25:20,860 --> 00:25:26,190
web well twisted web is

00:25:26,500 --> 00:25:31,300
what was I thinking when I wrote this a

00:25:35,770 --> 00:25:40,070
twisted web is the sort of thing that

00:25:37,880 --> 00:25:41,920
use if you want a web server so we had a

00:25:40,070 --> 00:25:49,070
web client earlier this is a web server

00:25:41,920 --> 00:25:51,130
you generally don't you don't really

00:25:49,070 --> 00:25:53,780
want to use this in preference to django

00:25:51,130 --> 00:25:56,210
Django is a much more mature web

00:25:53,780 --> 00:25:57,590
framework for doing webby things and has

00:25:56,210 --> 00:26:00,740
great templating and everything

00:25:57,590 --> 00:26:02,690
supported and works on wsgi twisted is

00:26:00,740 --> 00:26:07,070
the sort of thing you use if you want a

00:26:02,690 --> 00:26:08,600
web server which also tops XMPP and has

00:26:07,070 --> 00:26:10,480
really long running connections it has

00:26:08,600 --> 00:26:12,440
all sorts of other network e

00:26:10,480 --> 00:26:15,410
infrastructure in it like if you want if

00:26:12,440 --> 00:26:17,570
you have an existing thing which talks

00:26:15,410 --> 00:26:20,420
network protocols and you also wanted to

00:26:17,570 --> 00:26:26,960
have a HTTP status page this is exactly

00:26:20,420 --> 00:26:31,820
what ERISA web is good for this is an

00:26:26,960 --> 00:26:33,920
example of you can run this Web 2py if

00:26:31,820 --> 00:26:39,230
you run this it will create a page with

00:26:33,920 --> 00:26:42,050
two resources it like the blank page is

00:26:39,230 --> 00:26:45,860
the index and the page the sub URL page

00:26:42,050 --> 00:26:48,770
is called returns the page it's hello in

00:26:45,860 --> 00:26:50,750
a page it's it works this only support

00:26:48,770 --> 00:26:55,010
to get because that's a render get

00:26:50,750 --> 00:26:57,650
method that it supports ah this clicker

00:26:55,010 --> 00:27:02,750
is terrible get a better one for me next

00:26:57,650 --> 00:27:05,150
time so you subclass resource which are

00:27:02,750 --> 00:27:07,610
which are pages and the root is also a

00:27:05,150 --> 00:27:11,390
resource so resources have children you

00:27:07,610 --> 00:27:15,020
create a site and when you listen of

00:27:11,390 --> 00:27:17,090
course it's got same typo on it so I

00:27:15,020 --> 00:27:22,220
don't even know if if that example

00:27:17,090 --> 00:27:24,950
you've got not connect listen one of the

00:27:22,220 --> 00:27:28,100
reasons that you probably want to use a

00:27:24,950 --> 00:27:31,400
real web framework if you're writing an

00:27:28,100 --> 00:27:33,080
actual website is that twisted that web

00:27:31,400 --> 00:27:35,420
as it currently exists is one of the

00:27:33,080 --> 00:27:36,890
oldest parts of twisted and like for

00:27:35,420 --> 00:27:39,260
example it doesn't really do deferred

00:27:36,890 --> 00:27:39,900
you can use deferred but you sort of

00:27:39,260 --> 00:27:41,400
have to hook it

00:27:39,900 --> 00:27:43,980
manually and they're just weird thing

00:27:41,400 --> 00:27:46,250
like not done yet that you have to

00:27:43,980 --> 00:27:48,330
return from a render method if you're

00:27:46,250 --> 00:27:50,190
where it really ought to be a deferred

00:27:48,330 --> 00:27:52,590
we're working on that but right now it

00:27:50,190 --> 00:27:54,180
whistles I'll web really it's it's well

00:27:52,590 --> 00:27:57,690
like Stephen said it first it's for

00:27:54,180 --> 00:27:59,490
things like status pages yeah it we're

00:27:57,690 --> 00:28:02,190
going to be using it here we're going to

00:27:59,490 --> 00:28:05,910
connect up a few things and have a web

00:28:02,190 --> 00:28:07,680
page and other things involved so here's

00:28:05,910 --> 00:28:10,680
some example this is a persistent

00:28:07,680 --> 00:28:12,480
connection this is using reactor call

00:28:10,680 --> 00:28:15,090
later which is you know like JavaScript

00:28:12,480 --> 00:28:18,240
set timeout or what you'd use in

00:28:15,090 --> 00:28:22,830
preference to time not sleep and this

00:28:18,240 --> 00:28:26,250
just basically writes a B and C 2 to the

00:28:22,830 --> 00:28:29,490
output if you actually run web 3py and

00:28:26,250 --> 00:28:31,770
then do that curl you'll see a a second

00:28:29,490 --> 00:28:34,830
later be the second let us see a second

00:28:31,770 --> 00:28:36,930
later we'll disconnect have you returned

00:28:34,830 --> 00:28:39,710
in this example not done yet which is a

00:28:36,930 --> 00:28:43,140
which is from twisted web server to say

00:28:39,710 --> 00:28:46,920
i'm not actually done wait wait wait

00:28:43,140 --> 00:28:48,750
until i call request stop finish so call

00:28:46,920 --> 00:28:50,790
later by the way takes callable as the

00:28:48,750 --> 00:28:51,960
first argument and any arguments you

00:28:50,790 --> 00:28:59,220
want to pass that call levels and

00:28:51,960 --> 00:29:03,360
subsequent arguments this is another

00:28:59,220 --> 00:29:07,500
example of an actual practical example

00:29:03,360 --> 00:29:09,360
this is web web 3 b equals get page you

00:29:07,500 --> 00:29:13,650
know twist is a web client kept page or

00:29:09,360 --> 00:29:18,540
thorne you wrote from HTTP GET and you

00:29:13,650 --> 00:29:20,040
add a call back to that request right

00:29:18,540 --> 00:29:23,310
this is essentially getting the pager

00:29:20,040 --> 00:29:27,330
returning it this is an actual web proxy

00:29:23,310 --> 00:29:30,870
server doesn't cash button could and

00:29:27,330 --> 00:29:33,120
then finish the request afterwards in

00:29:30,870 --> 00:29:35,730
this case we're using a quick land or

00:29:33,120 --> 00:29:37,970
instead of defining a function throwing

00:29:35,730 --> 00:29:40,320
away the response to the request right

00:29:37,970 --> 00:29:42,420
because whatever request start right

00:29:40,320 --> 00:29:44,940
returns is what gets called parts of the

00:29:42,420 --> 00:29:46,440
next call back we throw that away

00:29:44,940 --> 00:29:47,640
because we don't care we're just going

00:29:46,440 --> 00:29:49,730
to finish the request at that point and

00:29:47,640 --> 00:29:52,310
I'm not going to return not done yet

00:29:49,730 --> 00:29:53,300
especially bug here

00:29:52,310 --> 00:29:55,940
I'm going to cover this right now

00:29:53,300 --> 00:29:58,100
because it's actually quite useful to

00:29:55,940 --> 00:29:59,510
know when you have things like you want

00:29:58,100 --> 00:30:02,450
to stop the reaction when everything's

00:29:59,510 --> 00:30:05,270
done or you want to finish a request for

00:30:02,450 --> 00:30:07,160
everything is done at callback is not

00:30:05,270 --> 00:30:10,130
the right method you actually want to

00:30:07,160 --> 00:30:12,620
add callbacks which adds a callback and

00:30:10,130 --> 00:30:14,180
an hour back simultaneously so it

00:30:12,620 --> 00:30:21,080
doesn't matter if an error or success

00:30:14,180 --> 00:30:24,320
happens you fit finalized so add call at

00:30:21,080 --> 00:30:25,940
both it means take one thing at it as

00:30:24,320 --> 00:30:29,510
both the call back in an hour back sorry

00:30:25,940 --> 00:30:33,560
I'm a at both right so and add callbacks

00:30:29,510 --> 00:30:35,360
is a way to add an call back in an hour

00:30:33,560 --> 00:30:38,840
back at the same time there is a

00:30:35,360 --> 00:30:41,000
difference between AD callbacks callback

00:30:38,840 --> 00:30:42,680
are back and add callback call back

00:30:41,000 --> 00:30:44,390
editor back arabic but we'll see you

00:30:42,680 --> 00:30:46,430
later what that is ok it usually does my

00:30:44,390 --> 00:30:49,220
sorry sorry add both so so I actually

00:30:46,430 --> 00:30:51,560
recommend use add both for any reacted

00:30:49,220 --> 00:30:53,270
stop or requests not finish that's

00:30:51,560 --> 00:30:57,140
that's a side note here I just wanted to

00:30:53,270 --> 00:31:04,820
put that out so what we're going to do

00:30:57,140 --> 00:31:09,290
is a key value store so so this is a key

00:31:04,820 --> 00:31:14,390
value store so it's going to store get

00:31:09,290 --> 00:31:17,750
set delete you know I cash we're going

00:31:14,390 --> 00:31:19,310
to upgrade that to make its keep stuff

00:31:17,750 --> 00:31:24,110
for only 15 seconds so that's the next

00:31:19,310 --> 00:31:27,140
exercise this is this is an example of

00:31:24,110 --> 00:31:29,990
actually how to schedule things with

00:31:27,140 --> 00:31:33,820
call later so it's in five seconds

00:31:29,990 --> 00:31:33,820
prints and so after six seconds stop

00:31:34,120 --> 00:31:42,560
it's a second example of how to you can

00:31:38,120 --> 00:31:47,210
run the scan once get to da paw print

00:31:42,560 --> 00:31:50,300
something actually a bought a delayed

00:31:47,210 --> 00:31:57,320
call so in this case abort actually

00:31:50,300 --> 00:31:59,690
calls the late call doc cancel oh okay

00:31:57,320 --> 00:32:03,710
so this isn't an exercise this is an

00:31:59,690 --> 00:32:07,480
example this is a key value store which

00:32:03,710 --> 00:32:07,480
after 15 seconds deletes a key

00:32:09,789 --> 00:32:16,279
now let's have a look at this we have a

00:32:14,299 --> 00:32:19,190
store and we have a list of timeouts

00:32:16,279 --> 00:32:20,299
this is a dictionary Oh timeouts when

00:32:19,190 --> 00:32:21,529
you get something you just want to

00:32:20,299 --> 00:32:23,240
return whatever is in the store and

00:32:21,529 --> 00:32:27,830
that'll raise a key error if it's not

00:32:23,240 --> 00:32:28,820
there set cancels the time out for the

00:32:27,830 --> 00:32:30,140
key because otherwise you're going to

00:32:28,820 --> 00:32:33,620
invalidate a case which has been

00:32:30,140 --> 00:32:36,950
refreshed sets it in the thing it also

00:32:33,620 --> 00:32:39,470
sets a timeout for that key 15 seconds

00:32:36,950 --> 00:32:42,590
call self-taught delete it's all to

00:32:39,470 --> 00:32:45,110
delete that key yes you can see that

00:32:42,590 --> 00:32:47,029
self is of course because it's a it's a

00:32:45,110 --> 00:32:49,039
bound method self is passed through the

00:32:47,029 --> 00:32:50,990
key gets passed through cancels the

00:32:49,039 --> 00:32:59,510
timeout and deletes out of the store

00:32:50,990 --> 00:33:01,960
then the canceled timeout removes it if

00:32:59,510 --> 00:33:05,149
it's there otherwise returns none and

00:33:01,960 --> 00:33:12,429
here we say if it's not none and it's

00:33:05,149 --> 00:33:16,760
active then cancel it self-explanatory

00:33:12,429 --> 00:33:18,080
so we want to expose key value P why so

00:33:16,760 --> 00:33:21,049
you could we're going to be importing

00:33:18,080 --> 00:33:26,330
this and using key value store on a

00:33:21,049 --> 00:33:30,140
custom protocol may be some kind of

00:33:26,330 --> 00:33:31,520
memcache looking protocol HTTP RPC we're

00:33:30,140 --> 00:33:33,220
actually going to using doing this

00:33:31,520 --> 00:33:35,840
multiple times running multiple servers

00:33:33,220 --> 00:33:38,870
and actually running them the same

00:33:35,840 --> 00:33:45,010
process so first of all we're going to

00:33:38,870 --> 00:33:49,850
implement a server which has commands

00:33:45,010 --> 00:33:52,370
mapping to get set and delete and these

00:33:49,850 --> 00:33:53,899
are the expected result responses so if

00:33:52,370 --> 00:33:57,140
you get a value it should return the

00:33:53,899 --> 00:33:58,640
value or or not found it should

00:33:57,140 --> 00:34:01,429
acknowledge that you're storing things

00:33:58,640 --> 00:34:04,630
and if you delete you either say it's

00:34:01,429 --> 00:34:04,630
deleted or it's not found

00:34:09,160 --> 00:34:17,210
key-value server doctor why this is an

00:34:13,610 --> 00:34:19,160
implementation run this and have a play

00:34:17,210 --> 00:34:27,700
with it run it and tell it into it on

00:34:19,160 --> 00:34:32,090
poor ah is I need a pedal laser 11 to 11

00:34:27,700 --> 00:34:34,030
that's at a standard port memcache what

00:34:32,090 --> 00:34:37,060
all right so it looks like memcache I

00:34:34,030 --> 00:34:51,410
think this is actually memcache protocol

00:34:37,060 --> 00:34:53,990
if ish length yeah length prefix yep sir

00:34:51,410 --> 00:34:56,960
on this we're using line receiver so it

00:34:53,990 --> 00:34:58,490
requires / r /n you can change that

00:34:56,960 --> 00:35:06,590
delimiter by changing the delimiter

00:34:58,490 --> 00:35:10,990
attribute splits out the line that is

00:35:06,590 --> 00:35:10,990
awful but i guess it fits on the slide

00:35:11,530 --> 00:35:19,420
get set and delete anyone got that

00:35:16,670 --> 00:35:30,680
running it's not hard to get running

00:35:19,420 --> 00:35:36,080
yeah good this is a client ah so that's

00:35:30,680 --> 00:35:38,420
the that's a protocol this is the same

00:35:36,080 --> 00:35:40,910
file it just didn't fit on one side so

00:35:38,420 --> 00:35:45,430
it's cut up but it's the same that def

00:35:40,910 --> 00:35:48,200
is a method of that class alright so

00:35:45,430 --> 00:35:50,090
what this is actually doing is the

00:35:48,200 --> 00:35:52,670
client needs to be able to return

00:35:50,090 --> 00:35:58,010
two-thirds because we're going over the

00:35:52,670 --> 00:36:01,700
network so when you do several gets in a

00:35:58,010 --> 00:36:03,380
row you might have several pipelined so

00:36:01,700 --> 00:36:07,370
you need to be able to call taller

00:36:03,380 --> 00:36:11,510
several times do several sends add to

00:36:07,370 --> 00:36:14,720
the deferred and and return that

00:36:11,510 --> 00:36:16,220
deferred and then in line received you

00:36:14,720 --> 00:36:18,920
need to be able to say oh ok so I've

00:36:16,220 --> 00:36:20,600
received a value so I have to cook do

00:36:18,920 --> 00:36:22,010
the get deferred call back i received a

00:36:20,600 --> 00:36:22,400
stored so we didn't set deferred call

00:36:22,010 --> 00:36:24,020
back

00:36:22,400 --> 00:36:26,119
and I mentioned this earlier where we

00:36:24,020 --> 00:36:29,720
you might have a list of them and you

00:36:26,119 --> 00:36:32,299
you get out you pop out say them the

00:36:29,720 --> 00:36:36,680
least recently inserted one so it's a

00:36:32,299 --> 00:36:38,900
queue so the cure well it right here it

00:36:36,680 --> 00:36:41,599
works like a queue but the obvious

00:36:38,900 --> 00:36:43,609
problem with this is that there are 0

00:36:41,599 --> 00:36:46,640
guarantees as to precisely in which

00:36:43,609 --> 00:36:50,750
order something will arrive right now if

00:36:46,640 --> 00:36:52,789
your client sends like sets of value and

00:36:50,750 --> 00:36:54,680
then sets another value but the second

00:36:52,789 --> 00:36:56,359
value gets set before the other one then

00:36:54,680 --> 00:36:57,109
you'll get store it well okay first or

00:36:56,359 --> 00:36:58,849
eat it doesn't really matter because

00:36:57,109 --> 00:37:00,109
story doesn't give you any data but like

00:36:58,849 --> 00:37:01,609
let's say that you try and get two

00:37:00,109 --> 00:37:03,319
values one of them exists one of them

00:37:01,609 --> 00:37:05,599
doesn't right and you get them in quick

00:37:03,319 --> 00:37:08,480
in rapid succession it's possible that

00:37:05,599 --> 00:37:11,180
the second one which didn't exist gets

00:37:08,480 --> 00:37:13,160
arrives back at you first then

00:37:11,180 --> 00:37:15,410
fortunately the server implementation

00:37:13,160 --> 00:37:17,599
doesn't allow that to happen what we

00:37:15,410 --> 00:37:19,400
don't actually deal with and this is

00:37:17,599 --> 00:37:22,700
where error handling comes in is not

00:37:19,400 --> 00:37:26,869
found and get not found and those are

00:37:22,700 --> 00:37:31,910
not implemented okay so we need to have

00:37:26,869 --> 00:37:33,529
asynchronous error handling error back

00:37:31,910 --> 00:37:38,750
so just like callbacks a for error

00:37:33,529 --> 00:37:40,130
conditions they create a chain so

00:37:38,750 --> 00:37:42,710
there's a chain of them using our back

00:37:40,130 --> 00:37:44,930
and they're called explicitly was a

00:37:42,710 --> 00:37:50,539
reason usually you pass an exception

00:37:44,930 --> 00:37:52,250
object it through is the reason I'll go

00:37:50,539 --> 00:37:56,990
into that letter and it's called

00:37:52,250 --> 00:37:58,640
implicitly when any callback raises so

00:37:56,990 --> 00:38:00,589
if you raise an exception in a call back

00:37:58,640 --> 00:38:01,789
it will not call the next call back in

00:38:00,589 --> 00:38:04,390
the chain it will call the next hour

00:38:01,789 --> 00:38:08,390
back in the chain our backs are

00:38:04,390 --> 00:38:11,299
generally okay so this is an example of

00:38:08,390 --> 00:38:12,920
our backs here on success on failure or

00:38:11,299 --> 00:38:17,750
two different methods it all say success

00:38:12,920 --> 00:38:20,930
or failure a failure object this is a

00:38:17,750 --> 00:38:23,539
rapper of exceptions and it encapsulate

00:38:20,930 --> 00:38:25,490
SAS string representation of the trace

00:38:23,539 --> 00:38:28,010
pack of the error message all that

00:38:25,490 --> 00:38:31,069
because trace backs are expensive to

00:38:28,010 --> 00:38:33,200
keep in memory so because you know it

00:38:31,069 --> 00:38:34,579
contains the full stack frame of the

00:38:33,200 --> 00:38:35,640
whole trace back so what we do is we

00:38:34,579 --> 00:38:40,530
copy that atoms

00:38:35,640 --> 00:38:42,690
much much much cheaper and in this case

00:38:40,530 --> 00:38:45,360
for instance we create one to third we

00:38:42,690 --> 00:38:48,480
had a callback in the Arabic and then we

00:38:45,360 --> 00:38:53,130
pull in one second the callback and in

00:38:48,480 --> 00:38:56,130
this this example we have a call back in

00:38:53,130 --> 00:39:00,660
the back can we instead call it with an

00:38:56,130 --> 00:39:02,130
exception now interestingly this is this

00:39:00,660 --> 00:39:03,450
happens after one second in two seconds

00:39:02,130 --> 00:39:05,580
so you see it happening synchronously

00:39:03,450 --> 00:39:07,470
but you could actually just translate

00:39:05,580 --> 00:39:10,350
that to not even using call later just

00:39:07,470 --> 00:39:11,760
call to go back directly because called

00:39:10,350 --> 00:39:14,130
the Third's don't actually require the

00:39:11,760 --> 00:39:15,690
reactor to run but that's all about da

00:39:14,130 --> 00:39:17,550
pie you can run that and you can see the

00:39:15,690 --> 00:39:27,510
output you'll see it saying success need

00:39:17,550 --> 00:39:31,890
air Obama this is not correct why is

00:39:27,510 --> 00:39:36,050
this not correct what happens when you

00:39:31,890 --> 00:39:36,050
run this run this tell me what's wrong

00:39:36,380 --> 00:39:44,660
from its trying to call it the fruit

00:39:39,090 --> 00:39:44,660
twice that's it so what Ciara you get

00:39:44,780 --> 00:39:50,430
yes so already called her back so you

00:39:48,210 --> 00:39:52,740
can't call an arrow back and a call back

00:39:50,430 --> 00:39:55,020
on the same fo Chen yeah because the

00:39:52,740 --> 00:39:56,490
firts can't be called twice so it's

00:39:55,020 --> 00:40:02,640
important to make sure you only call

00:39:56,490 --> 00:40:04,380
either one or the other not both if you

00:40:02,640 --> 00:40:07,730
have a callback chain with no herb acts

00:40:04,380 --> 00:40:11,130
in it twisting won't tell you anything

00:40:07,730 --> 00:40:13,320
except on shutdown deferred upset

00:40:11,130 --> 00:40:15,090
debugging is a thing which mall very

00:40:13,320 --> 00:40:16,410
noisily tell you hey you've got to know

00:40:15,090 --> 00:40:19,230
back sitting here and you're not touched

00:40:16,410 --> 00:40:22,440
it set this when you're doing debugging

00:40:19,230 --> 00:40:25,170
and you'll find errors so there's a

00:40:22,440 --> 00:40:27,270
there's a common mistake which is just

00:40:25,170 --> 00:40:29,010
basically not having a note back you go

00:40:27,270 --> 00:40:31,080
to name error or somewhere so you call

00:40:29,010 --> 00:40:32,640
back raises have no idea what's going on

00:40:31,080 --> 00:40:33,960
because it tastes synchronously and call

00:40:32,640 --> 00:40:41,580
that chain waiting for go back to be

00:40:33,960 --> 00:40:43,530
attached what happens then alright so

00:40:41,580 --> 00:40:47,450
this is a representation of what happens

00:40:43,530 --> 00:40:49,230
with you know blue is callbacks so

00:40:47,450 --> 00:40:52,500
identify the first

00:40:49,230 --> 00:40:54,240
backfires calls a callback second

00:40:52,500 --> 00:40:56,130
callback for that that returns a value

00:40:54,240 --> 00:40:58,609
calls the next call back in the chain

00:40:56,130 --> 00:41:03,900
with the return value and it goes down

00:40:58,609 --> 00:41:06,570
if you call her back the ER back now in

00:41:03,900 --> 00:41:10,440
this particular example if you're going

00:41:06,570 --> 00:41:12,840
down the red side that will only

00:41:10,440 --> 00:41:18,390
continue to go down the red side if the

00:41:12,840 --> 00:41:21,600
ER backs raise or returning it another

00:41:18,390 --> 00:41:28,430
failure object if they return a value

00:41:21,600 --> 00:41:31,230
that actually cuts across into the

00:41:28,430 --> 00:41:34,050
callbacks so our back is a way of

00:41:31,230 --> 00:41:36,060
converting failure into success so for

00:41:34,050 --> 00:41:37,920
instance if you had a situation where

00:41:36,060 --> 00:41:40,050
you wanted to get a page and you're on a

00:41:37,920 --> 00:41:41,970
flaky network you might call get page

00:41:40,050 --> 00:41:44,820
and add an hour back which says if there

00:41:41,970 --> 00:41:48,210
was a network error call get page again

00:41:44,820 --> 00:41:49,590
and return that and if at any point you

00:41:48,210 --> 00:41:51,510
return it deferred it waits for that

00:41:49,590 --> 00:41:54,540
deferred to fire before it calls the

00:41:51,510 --> 00:41:55,859
callback with the value that woodford so

00:41:54,540 --> 00:41:57,869
you can always return it deferred from

00:41:55,859 --> 00:42:00,090
any call back and that wait some select

00:41:57,869 --> 00:42:03,320
call backfires so in this case you see

00:42:00,090 --> 00:42:06,450
if like if we take this path down here

00:42:03,320 --> 00:42:09,510
we have success that callback has a

00:42:06,450 --> 00:42:11,730
failure that failure tries to convert

00:42:09,510 --> 00:42:16,619
convert that back into a success and we

00:42:11,730 --> 00:42:19,050
go down so it provides every one of the

00:42:16,619 --> 00:42:23,040
flow controls that are provided by try

00:42:19,050 --> 00:42:25,350
except finally else in a very convoluted

00:42:23,040 --> 00:42:28,170
manner now we had a question earlier

00:42:25,350 --> 00:42:34,050
about inline callbacks the way you can

00:42:28,170 --> 00:42:36,150
do value equals yield some deferred what

00:42:34,050 --> 00:42:37,770
will happen there is instead of doing

00:42:36,150 --> 00:42:40,440
complicated flow control with deferred

00:42:37,770 --> 00:42:42,750
you can actually do try except finally

00:42:40,440 --> 00:42:45,570
and all of that will work but your trace

00:42:42,750 --> 00:42:47,609
facts will not look any good so it

00:42:45,570 --> 00:42:49,290
doesn't assist with debugging very much

00:42:47,609 --> 00:42:52,200
but it does allow for very expressive

00:42:49,290 --> 00:42:56,580
flow control just just pointing that out

00:42:52,200 --> 00:42:59,250
at this point so here is an example of

00:42:56,580 --> 00:43:00,630
you know a normal synchronous thing if

00:42:59,250 --> 00:43:03,140
the result is no you raise an exception

00:43:00,630 --> 00:43:06,270
otherwise return result

00:43:03,140 --> 00:43:09,270
if you're signing a callback chain for

00:43:06,270 --> 00:43:10,770
the first time you either a dinner back

00:43:09,270 --> 00:43:13,170
with an exception object where you add

00:43:10,770 --> 00:43:14,670
or sorry you call back with the

00:43:13,170 --> 00:43:18,810
exception object to you call a call back

00:43:14,670 --> 00:43:21,300
with the result and here's an example of

00:43:18,810 --> 00:43:28,280
actually calling it so you do you know

00:43:21,300 --> 00:43:32,609
try print accept print in this example

00:43:28,280 --> 00:43:37,230
on success we print on arrow we say

00:43:32,609 --> 00:43:40,020
something funny and so so we credit

00:43:37,230 --> 00:43:42,540
deferred and we add callbacks now this

00:43:40,020 --> 00:43:44,880
is this is important add callbacks we

00:43:42,540 --> 00:43:48,210
discuss this just briefly earlier this

00:43:44,880 --> 00:43:51,119
adds both of them at the same time going

00:43:48,210 --> 00:43:53,430
back to this slide that is like adding

00:43:51,119 --> 00:43:56,400
on success on failure here and you see

00:43:53,430 --> 00:43:58,830
how if there's a failure handle that

00:43:56,400 --> 00:44:04,320
doesn't go into the success here it goes

00:43:58,830 --> 00:44:08,369
down a level so and and vice versa so

00:44:04,320 --> 00:44:13,680
they're added at the same level going

00:44:08,369 --> 00:44:15,859
forward ah if you do add call back

00:44:13,680 --> 00:44:19,020
followed by ad er back it's like this

00:44:15,859 --> 00:44:23,040
that's the callback that's the ER back

00:44:19,020 --> 00:44:25,920
so if error happens here or the error

00:44:23,040 --> 00:44:29,099
happens here the failure will be called

00:44:25,920 --> 00:44:30,680
whereas in this example if a failure

00:44:29,099 --> 00:44:35,390
happens here it will go down to the next

00:44:30,680 --> 00:44:39,570
layer of callbacks that's important add

00:44:35,390 --> 00:44:40,980
both ads both at the same level so add

00:44:39,570 --> 00:44:44,660
call that incites the same as hang out

00:44:40,980 --> 00:44:44,660
call backs of the same function repeated

00:44:45,770 --> 00:44:50,880
here is an example here is an example of

00:44:48,330 --> 00:44:52,890
how to do that without callbacks you are

00:44:50,880 --> 00:44:57,119
basically doing nothing here and doing

00:44:52,890 --> 00:45:01,860
nothing there in fact oh no that's one

00:44:57,119 --> 00:45:05,310
does your return the fact alright

00:45:01,860 --> 00:45:07,680
this will never happen except if you're

00:45:05,310 --> 00:45:11,910
on the conference Wi-Fi so this is this

00:45:07,680 --> 00:45:14,790
is a example of okay so we're getting a

00:45:11,910 --> 00:45:17,190
page on the arrow we print something

00:45:14,790 --> 00:45:19,980
that will never happen try to find a

00:45:17,190 --> 00:45:21,900
good doodle text and we raise an

00:45:19,980 --> 00:45:23,790
exception if it's not found and on arrow

00:45:21,900 --> 00:45:26,130
print no duele found then finally put

00:45:23,790 --> 00:45:29,610
the doodle text you know the doodle text

00:45:26,130 --> 00:45:30,540
on the on the website so this is this is

00:45:29,610 --> 00:45:33,920
the way you would do it synchronously

00:45:30,540 --> 00:45:36,330
you know you'd openurl you'd find the

00:45:33,920 --> 00:45:38,670
text in the HTML you'd print it

00:45:36,330 --> 00:45:41,730
otherwise you catch that exception and

00:45:38,670 --> 00:45:43,890
if that raises then that'll never happen

00:45:41,730 --> 00:45:45,420
so I'm a royal reliability engineer for

00:45:43,890 --> 00:45:50,070
Google it's my job to make sure that

00:45:45,420 --> 00:45:55,380
doesn't happen then some of the other

00:45:50,070 --> 00:45:57,530
examples they use Bing ads alright that

00:45:55,380 --> 00:46:00,960
never goes down because no one uses it

00:45:57,530 --> 00:46:03,120
oh I'm being I'm being very naughty I

00:46:00,960 --> 00:46:07,080
shouldn't I should not say anything like

00:46:03,120 --> 00:46:10,560
that so this is an example of doing it

00:46:07,080 --> 00:46:15,930
asynchronously so we create a deferred

00:46:10,560 --> 00:46:18,420
getting a page we have our callbacks you

00:46:15,930 --> 00:46:22,050
know when it's down when we get the page

00:46:18,420 --> 00:46:26,250
we find the text while hablar we put the

00:46:22,050 --> 00:46:30,270
result and we want full backs on page on

00:46:26,250 --> 00:46:36,980
down print result and that is a graph

00:46:30,270 --> 00:46:39,620
that looks like this so in this case

00:46:36,980 --> 00:46:44,160
we're actually converting that failure

00:46:39,620 --> 00:46:47,700
to success with a different message so

00:46:44,160 --> 00:46:49,230
here when we return this we're not

00:46:47,700 --> 00:46:51,870
raising an exception is not continuing

00:46:49,230 --> 00:46:53,760
the error case actually converted that

00:46:51,870 --> 00:46:56,580
failure into a success and provider the

00:46:53,760 --> 00:47:01,190
value and then at the end we always put

00:46:56,580 --> 00:47:06,090
the result an alternative would be to

00:47:01,190 --> 00:47:11,450
have something which prints both

00:47:06,090 --> 00:47:11,450
failures and successes using at both

00:47:14,590 --> 00:47:28,400
is this the same example is this

00:47:17,030 --> 00:47:30,740
different no that's this is just Express

00:47:28,400 --> 00:47:32,390
better so the different error parts and

00:47:30,740 --> 00:47:33,950
you see there's no error part that goes

00:47:32,390 --> 00:47:36,410
from that error to that error because on

00:47:33,950 --> 00:47:38,000
Google down never raises if that raises

00:47:36,410 --> 00:47:42,200
an exception it would go to the next Oh

00:47:38,000 --> 00:47:44,000
back the usual case for an ER back going

00:47:42,200 --> 00:47:46,960
into the next star back is actually when

00:47:44,000 --> 00:47:49,730
you have an urbat similar to try accept

00:47:46,960 --> 00:47:52,040
your accept doesn't necessarily catch

00:47:49,730 --> 00:47:55,280
all different possible kinds of things

00:47:52,040 --> 00:47:56,660
that can go wrong so you have a thing

00:47:55,280 --> 00:47:58,400
called failure trap which is the

00:47:56,660 --> 00:48:01,340
equivalent of saying you know except

00:47:58,400 --> 00:48:03,860
this particular to cure right but if

00:48:01,340 --> 00:48:05,180
it's not a cure then well hopefully the

00:48:03,860 --> 00:48:06,590
next thing in the chain will be able to

00:48:05,180 --> 00:48:08,630
handle that specific error that did

00:48:06,590 --> 00:48:09,980
actually happen so that's like ninety

00:48:08,630 --> 00:48:10,940
percent of the cases when you're going

00:48:09,980 --> 00:48:12,530
from our back to our back it just

00:48:10,940 --> 00:48:15,200
because hoping that some other or back

00:48:12,530 --> 00:48:20,090
we'll handle it all when things explode

00:48:15,200 --> 00:48:25,040
or when things explode is that working

00:48:20,090 --> 00:48:29,000
so that's one part a second path a third

00:48:25,040 --> 00:48:30,710
path alright so why do we do this we

00:48:29,000 --> 00:48:32,060
want to do error handling we talked

00:48:30,710 --> 00:48:33,110
about error handling earlier we said we

00:48:32,060 --> 00:48:35,270
don't have any we're doing error

00:48:33,110 --> 00:48:40,580
handling we now know exactly how to do

00:48:35,270 --> 00:48:41,660
it we call dr back here on the deferred

00:48:40,580 --> 00:48:43,400
just like we were doing the other ones

00:48:41,660 --> 00:48:44,840
we got the key this is key value to

00:48:43,400 --> 00:48:47,990
applied to this is where the code is if

00:48:44,840 --> 00:48:49,700
you want to run it locally when we don't

00:48:47,990 --> 00:48:52,300
when we don't find it we pop the

00:48:49,700 --> 00:48:56,120
deferred and we call the ER back instead

00:48:52,300 --> 00:48:57,410
and we very definitely pop it out at the

00:48:56,120 --> 00:48:58,760
list because we never want to call it

00:48:57,410 --> 00:49:01,640
twice because we don't want to call it

00:48:58,760 --> 00:49:04,970
with success or the next one because

00:49:01,640 --> 00:49:07,790
otherwise that would be bad so let's uh

00:49:04,970 --> 00:49:09,610
let's use it so what we're actually

00:49:07,790 --> 00:49:13,790
going to do is write some web pages

00:49:09,610 --> 00:49:15,830
which expose the store to the web it we

00:49:13,790 --> 00:49:17,630
run the store in a separate process so

00:49:15,830 --> 00:49:20,000
we're going to use the we're going to

00:49:17,630 --> 00:49:22,220
use key value client to as our client

00:49:20,000 --> 00:49:24,650
for a server which is the key value

00:49:22,220 --> 00:49:33,020
server to PI from earlier

00:49:24,650 --> 00:49:40,069
our and that's key value web zero index

00:49:33,020 --> 00:49:42,470
page and this is an example of how to

00:49:40,069 --> 00:49:44,690
get parameters out requests are args

00:49:42,470 --> 00:49:46,760
gives you your parameters it does at the

00:49:44,690 --> 00:49:48,710
very old style of expecting any

00:49:46,760 --> 00:49:53,599
parameter be repeatable so you got to

00:49:48,710 --> 00:49:59,450
get the first value out I'm sorry I am

00:49:53,599 --> 00:50:02,119
actually to blame for that your request

00:49:59,450 --> 00:50:05,119
provides is mine request for dogs that

00:50:02,119 --> 00:50:08,510
was mine oh yeah you should have seen

00:50:05,119 --> 00:50:11,390
what it was before all right so so this

00:50:08,510 --> 00:50:14,779
is something which will actually try and

00:50:11,390 --> 00:50:17,779
get the key use the key value store get

00:50:14,779 --> 00:50:19,430
the key adds an error back saying it's

00:50:17,779 --> 00:50:22,670
not found because of whatever reason

00:50:19,430 --> 00:50:25,099
then writes that to the to the web

00:50:22,670 --> 00:50:26,599
client so this is this makes sure that

00:50:25,099 --> 00:50:31,849
we trap the error converts it to a

00:50:26,599 --> 00:50:34,700
success right certain finishes it ah the

00:50:31,849 --> 00:50:36,410
only reason why the service server is a

00:50:34,700 --> 00:50:37,849
separate process possibly running on

00:50:36,410 --> 00:50:40,520
some other machine is just so you can

00:50:37,849 --> 00:50:42,500
use all of the pieces together it is

00:50:40,520 --> 00:50:44,599
perfectly possible to use the same that

00:50:42,500 --> 00:50:46,069
use a web server in the key value server

00:50:44,599 --> 00:50:48,289
in the same process and in fact that's

00:50:46,069 --> 00:50:50,089
what you would usually do so that's

00:50:48,289 --> 00:50:52,039
actually what we said earlier one of the

00:50:50,089 --> 00:50:53,779
nice things about twisted web is that

00:50:52,039 --> 00:50:55,010
it's perfectly possible to have like if

00:50:53,779 --> 00:50:57,440
you want your key value serve it to

00:50:55,010 --> 00:50:58,400
respond on jabber you know there's XMPP

00:50:57,440 --> 00:51:01,339
support in there if you wanted to

00:50:58,400 --> 00:51:02,630
support on a respondent IRC web all of

00:51:01,339 --> 00:51:04,309
those things all in the same process

00:51:02,630 --> 00:51:05,480
that works fine so the only reason we're

00:51:04,309 --> 00:51:08,960
doing that is so we can show off the

00:51:05,480 --> 00:51:13,760
client at the same time so that's the

00:51:08,960 --> 00:51:16,119
initialization I come to what file this

00:51:13,760 --> 00:51:18,920
is in you can probably grep for it it's

00:51:16,119 --> 00:51:21,710
one of the key value with is cool key

00:51:18,920 --> 00:51:23,150
value web but have a play with that it

00:51:21,710 --> 00:51:28,789
should actually have get set delete an

00:51:23,150 --> 00:51:31,880
index page pretty sure it's there okay

00:51:28,789 --> 00:51:34,630
do that now this example sleazes to

00:51:31,880 --> 00:51:34,630
listen to CB

00:51:35,710 --> 00:51:54,970
gotta pee pee if I were to do this again

00:51:53,330 --> 00:51:57,050
and probably actually demonstrate xmlrpc

00:51:54,970 --> 00:52:03,070
that's actually useful thing that people

00:51:57,050 --> 00:52:03,070
use to bad xmlrpc is awful

00:52:06,960 --> 00:52:09,960
we

00:52:11,559 --> 00:52:16,510
protocol buffers definitely use protocol

00:52:14,210 --> 00:52:16,510
buffets

00:52:23,990 --> 00:52:32,040
over there and then generate the Python

00:52:27,060 --> 00:52:34,140
program yep if you ever do right network

00:52:32,040 --> 00:52:36,630
protocols I do recommend using protocol

00:52:34,140 --> 00:52:38,940
buffers free on wire format protocol

00:52:36,630 --> 00:52:42,780
buffers are just an efficient way of

00:52:38,940 --> 00:52:44,670
going about things so this should allow

00:52:42,780 --> 00:52:49,490
you to have a web page which gets sets

00:52:44,670 --> 00:52:59,970
and deletes out of the key value store

00:52:49,490 --> 00:53:02,070
providers you run all the right bits are

00:52:59,970 --> 00:53:05,510
here I'm actually using client creator

00:53:02,070 --> 00:53:08,280
in this slide I think the example in the

00:53:05,510 --> 00:53:09,780
other one doesn't client crater works

00:53:08,280 --> 00:53:13,980
better with reconnecting client factory

00:53:09,780 --> 00:53:20,610
I think it works with reconnecting

00:53:13,980 --> 00:53:22,200
client factory I supposed to not yeah

00:53:20,610 --> 00:53:24,090
yeah you can't eat client crater

00:53:22,200 --> 00:53:25,530
definitely the nice thing about client

00:53:24,090 --> 00:53:30,000
crater is you don't have to generate a

00:53:25,530 --> 00:53:33,180
factory so basically because the pattern

00:53:30,000 --> 00:53:36,600
of when like Steven said earlier when

00:53:33,180 --> 00:53:37,890
you're using clients each ever H and

00:53:36,600 --> 00:53:39,570
every client that you open probably

00:53:37,890 --> 00:53:41,790
wants to do something else than the last

00:53:39,570 --> 00:53:44,460
client therefore you end up creating a

00:53:41,790 --> 00:53:46,770
factory every time which doesn't

00:53:44,460 --> 00:53:48,630
necessarily well sometimes it can make

00:53:46,770 --> 00:53:50,850
sense but it's just a lot of boilerplate

00:53:48,630 --> 00:53:52,650
and because of that you have client

00:53:50,850 --> 00:53:55,230
creator which just creates a factory

00:53:52,650 --> 00:53:56,640
internally and it it turns like three

00:53:55,230 --> 00:53:58,440
lines of code into one line of code but

00:53:56,640 --> 00:53:59,820
I think the example that you actually go

00:53:58,440 --> 00:54:02,370
to your examples doesn't use client

00:53:59,820 --> 00:54:03,780
creator i factor that out but getting

00:54:02,370 --> 00:54:05,370
the syntax highlighting all the slides

00:54:03,780 --> 00:54:07,200
was quite problematic I really need some

00:54:05,370 --> 00:54:10,500
way of generating slides for I can embed

00:54:07,200 --> 00:54:12,180
code effectively otherwise I can't

00:54:10,500 --> 00:54:13,200
actually test things properly that's how

00:54:12,180 --> 00:54:18,600
we ended up with those bugs in the

00:54:13,200 --> 00:54:20,100
previous slides HTML pigments yeah this

00:54:18,600 --> 00:54:21,510
pigment says all sorts of things and all

00:54:20,100 --> 00:54:25,800
of them are awful in various different

00:54:21,510 --> 00:54:29,130
ways this is one of those problems

00:54:25,800 --> 00:54:31,790
instead have been solved never been

00:54:29,130 --> 00:54:31,790
solved to my satisfaction

00:54:34,960 --> 00:54:40,250
the actually it interesting side note

00:54:38,510 --> 00:54:41,660
the reason that you can actually plug in

00:54:40,250 --> 00:54:46,670
a projector and expect it to work on

00:54:41,660 --> 00:54:49,369
linux is because who who was it Keith

00:54:46,670 --> 00:54:51,170
Packard got so annoyed at conferences

00:54:49,369 --> 00:54:59,089
that he went and rewrote X until he

00:54:51,170 --> 00:55:00,579
could do it true story ok so this next

00:54:59,089 --> 00:55:04,609
thing is Swiss dot spread our

00:55:00,579 --> 00:55:07,160
perspective broker is the is the is what

00:55:04,609 --> 00:55:08,690
PB sense for its inter-process

00:55:07,160 --> 00:55:10,430
communication for inter process

00:55:08,690 --> 00:55:14,049
communication to and from twisted

00:55:10,430 --> 00:55:18,710
service so it's it's the third capable

00:55:14,049 --> 00:55:21,470
work quite neatly does um safe Python

00:55:18,710 --> 00:55:23,960
objects over the wire as opposed to

00:55:21,470 --> 00:55:26,569
pickles never transmit pickles over the

00:55:23,960 --> 00:55:29,150
wire pickles allow you to arbitrary code

00:55:26,569 --> 00:55:32,180
execution there are a security problem

00:55:29,150 --> 00:55:37,309
do not use them on network protocols so

00:55:32,180 --> 00:55:39,950
PV is safe it's a IPC mechanism there's

00:55:37,309 --> 00:55:43,010
a there's a moral more feature for one

00:55:39,950 --> 00:55:44,390
called false cap which you might want to

00:55:43,010 --> 00:55:46,190
look at if you're actually serious about

00:55:44,390 --> 00:55:47,869
the stuff book but where you're going

00:55:46,190 --> 00:55:50,240
through this because it's this is what's

00:55:47,869 --> 00:55:53,299
built in particularly security wise if

00:55:50,240 --> 00:55:55,490
anyone knows brian warner it's this guy

00:55:53,299 --> 00:55:57,619
so yeah foolscap is particularly in

00:55:55,490 --> 00:56:01,369
terms of security has very very advanced

00:55:57,619 --> 00:56:05,480
features SSL little value so the idea is

00:56:01,369 --> 00:56:07,910
that you can define a bunch of methods

00:56:05,480 --> 00:56:10,609
you know you always have a prefix so you

00:56:07,910 --> 00:56:13,490
don't actually you can't actually access

00:56:10,609 --> 00:56:16,849
any private methods i get set blah blah

00:56:13,490 --> 00:56:23,420
blah and you listen with a server

00:56:16,849 --> 00:56:26,420
factory of that's supposed to be that

00:56:23,420 --> 00:56:28,279
okay so you have a subclass of PB root

00:56:26,420 --> 00:56:31,130
in this case is called are decked and we

00:56:28,279 --> 00:56:35,390
we listen using that and you can create

00:56:31,130 --> 00:56:38,660
a client which is a client factory and

00:56:35,390 --> 00:56:41,089
and you can call remote get that get

00:56:38,660 --> 00:56:42,650
their maps that get there any arguments

00:56:41,089 --> 00:56:44,299
and absolutely arguments on that and

00:56:42,650 --> 00:56:46,270
that can be Python objects in the wire

00:56:44,299 --> 00:56:52,920
so you can have

00:56:46,270 --> 00:56:55,870
effective RPC this is key value PvP why

00:56:52,920 --> 00:56:57,160
so you pass the store so you can share a

00:56:55,870 --> 00:57:00,160
store between a whole bunch of objects

00:56:57,160 --> 00:57:01,750
it's got a list of methods and you see

00:57:00,160 --> 00:57:06,220
this is just returning sort of get

00:57:01,750 --> 00:57:08,080
stored up yet store yet sort delete and

00:57:06,220 --> 00:57:13,450
we're creating sir factory it's got the

00:57:08,080 --> 00:57:17,250
key value store from earlier and we

00:57:13,450 --> 00:57:20,320
create the server and we listened on it

00:57:17,250 --> 00:57:22,150
even if that thing happens to return

00:57:20,320 --> 00:57:23,770
exception is so sorry raise exceptions

00:57:22,150 --> 00:57:26,500
instead of returned an actual value that

00:57:23,770 --> 00:57:29,230
will also be mapped on the other side so

00:57:26,500 --> 00:57:33,100
yet you get a abbreviated traceback

00:57:29,230 --> 00:57:43,780
object and whatnot and this is a client

00:57:33,100 --> 00:57:47,610
uh that goes and this is using finally

00:57:43,780 --> 00:57:52,600
this worked okay what is this doing it's

00:57:47,610 --> 00:57:56,020
using pb2 cool remote so this is instead

00:57:52,600 --> 00:58:00,310
of instead of using the memcache

00:57:56,020 --> 00:58:02,860
protocol it's using PB in order to do

00:58:00,310 --> 00:58:04,240
exactly the same rpcs core remote

00:58:02,860 --> 00:58:05,890
returns as deferred so you don't

00:58:04,240 --> 00:58:08,890
actually have to handle the Third's

00:58:05,890 --> 00:58:11,800
yourself there's no popping pushing a

00:58:08,890 --> 00:58:15,190
tetra it's just calling remote and so

00:58:11,800 --> 00:58:18,400
it's all it's all integrated and in this

00:58:15,190 --> 00:58:23,100
case what it does is it after it

00:58:18,400 --> 00:58:27,070
connects it calls got root and creates a

00:58:23,100 --> 00:58:33,690
that site from earlier from key value

00:58:27,070 --> 00:58:35,260
web and passes that sorcerer so the

00:58:33,690 --> 00:58:37,420
previously we have we had that

00:58:35,260 --> 00:58:40,600
parameterised so it had a it had its

00:58:37,420 --> 00:58:41,950
some object which went and did that was

00:58:40,600 --> 00:58:45,010
a connection this instead of being

00:58:41,950 --> 00:58:47,620
connection is a is a PB client and

00:58:45,010 --> 00:58:48,430
neatly sunsets a whole lot of issues do

00:58:47,620 --> 00:58:50,170
with having to create your own

00:58:48,430 --> 00:58:52,720
two-thirds because use calling functions

00:58:50,170 --> 00:58:58,300
which create them for you and handle

00:58:52,720 --> 00:58:59,849
errors this is the combination key value

00:58:58,300 --> 00:59:05,349
server to

00:58:59,849 --> 00:59:06,880
listens twice it listens on the key

00:59:05,349 --> 00:59:09,819
value store protocol that medication

00:59:06,880 --> 00:59:12,039
like protocol but also PB two different

00:59:09,819 --> 00:59:14,140
ports simultaneously two different

00:59:12,039 --> 00:59:17,349
endpoints and we run them and we can

00:59:14,140 --> 00:59:18,730
talk to both of them at once and I do

00:59:17,349 --> 00:59:21,039
something like this in production right

00:59:18,730 --> 00:59:26,009
now so I basically have an RPC service

00:59:21,039 --> 00:59:29,019
that all in the same process transparent

00:59:26,009 --> 00:59:31,269
transparently talks json-rpc over TCP

00:59:29,019 --> 00:59:35,259
Jason RPC / WebSockets json-rpc over a

00:59:31,269 --> 00:59:37,900
bunch of things am xml-rpc I'm probably

00:59:35,259 --> 00:59:40,480
forgetting something and it just all

00:59:37,900 --> 00:59:46,660
does that in the same process and it all

00:59:40,480 --> 00:59:48,849
chugs along happily I really like the

00:59:46,660 --> 00:59:52,390
idea of having a web server in every

00:59:48,849 --> 00:59:54,789
process just so that you can access

00:59:52,390 --> 00:59:56,380
status solve it increment counters see

00:59:54,789 --> 00:59:59,200
the counters in the web server so you

00:59:56,380 --> 01:00:01,450
can you can health check what the what

00:59:59,200 --> 01:00:04,809
your process is doing the web server and

01:00:01,450 --> 01:00:07,779
also a conch manhole oh man hole so

01:00:04,809 --> 01:00:11,920
manhole is what is basically a remote a

01:00:07,779 --> 01:00:16,059
remote repple or remote python ruffle so

01:00:11,920 --> 01:00:20,890
what you can is actually identical to to

01:00:16,059 --> 01:00:23,440
the to this this prompts the way you can

01:00:20,890 --> 01:00:25,930
interact with the main loop this is

01:00:23,440 --> 01:00:27,880
exposing that on Saturday oh it's the

01:00:25,930 --> 01:00:31,029
same protocol which is used to expose it

01:00:27,880 --> 01:00:33,490
on telnet or SSH because they've because

01:00:31,029 --> 01:00:35,650
the ssh implementation allows you to

01:00:33,490 --> 01:00:39,849
wrap up our a you know Saturday o

01:00:35,650 --> 01:00:43,450
interface and it conforms the same same

01:00:39,849 --> 01:00:46,390
same interface and so so you can

01:00:43,450 --> 01:00:49,390
effectively use this ripple by turning

01:00:46,390 --> 01:00:51,369
into your server so so for instance what

01:00:49,390 --> 01:00:56,500
I once did in production at a previous

01:00:51,369 --> 01:00:58,569
employer was we had the ability to turn

01:00:56,500 --> 01:01:01,150
on debugging for a service it would

01:00:58,569 --> 01:01:02,950
generate a password you'd SSH into the

01:01:01,150 --> 01:01:04,990
server with the password it generated

01:01:02,950 --> 01:01:06,880
and you could do what it whatever

01:01:04,990 --> 01:01:09,519
mendon's you needed to do or do the

01:01:06,880 --> 01:01:10,750
really intricate debugging you needed to

01:01:09,519 --> 01:01:12,069
do in order to find out what had gone

01:01:10,750 --> 01:01:14,259
wrong and

01:01:12,069 --> 01:01:16,479
then and then lock that off again so you

01:01:14,259 --> 01:01:25,329
can actually start and stop as a service

01:01:16,479 --> 01:01:27,369
running alright so questions any

01:01:25,329 --> 01:01:32,859
questions we're nearing the end how much

01:01:27,369 --> 01:01:34,869
time what time do we have okay so we've

01:01:32,859 --> 01:01:36,190
got 40 minutes for questions and I've

01:01:34,869 --> 01:01:38,140
got a few other topics I'd like to talk

01:01:36,190 --> 01:01:43,630
about if we have questions about them so

01:01:38,140 --> 01:01:46,539
questions please sorry there weren't any

01:01:43,630 --> 01:01:47,890
exercises on this end of things but

01:01:46,539 --> 01:01:52,690
running running those services very

01:01:47,890 --> 01:01:58,449
instructive I'm trying to figure out if

01:01:52,690 --> 01:02:00,640
it's a really small request earnest than

01:01:58,449 --> 01:02:02,650
a question can you show us what example

01:02:00,640 --> 01:02:04,920
of in loan cutbacks in line callbacks

01:02:02,650 --> 01:02:08,559
more examples of you like callbacks a

01:02:04,920 --> 01:02:12,039
wonder if big demo has one what is that

01:02:08,559 --> 01:02:16,420
code is it on you have it on here you

01:02:12,039 --> 01:02:20,619
don't have yes you do I have a tumble

01:02:16,420 --> 01:02:24,519
what would you need uh but the code

01:02:20,619 --> 01:02:27,579
which was on the no speaking the code

01:02:24,519 --> 01:02:29,650
that was on the USB key I think all

01:02:27,579 --> 01:02:37,089
right i'll use my i'm just going to plug

01:02:29,650 --> 01:02:39,479
in my laptop which i have to unlock

01:02:37,089 --> 01:02:39,479
first

01:02:42,289 --> 01:02:58,339
but monitor for my sins he said yep

01:02:46,269 --> 01:02:59,749
brother no so actually I think I

01:02:58,339 --> 01:03:06,099
actually have a slide with more in line

01:02:59,749 --> 01:03:08,989
callbacks examples okay quickly how do i

01:03:06,099 --> 01:03:11,689
access the is that what you've always

01:03:08,989 --> 01:03:16,969
done 68 is that I don't know if that's

01:03:11,689 --> 01:03:22,609
right system preferences boop doop de

01:03:16,969 --> 01:03:29,140
doop that's network displays Oh 800 x

01:03:22,609 --> 01:03:29,140
600 how quaint everyone remember the 90s

01:03:32,529 --> 01:03:45,969
yeah um keynote get rid of the message

01:03:38,660 --> 01:03:48,969
from my wife uh-huh I wonder if okay so

01:03:45,969 --> 01:03:48,969
long

01:03:48,970 --> 01:03:57,580
no don't have a good example there big

01:03:54,400 --> 01:04:01,690
demoed up i do i use in line here yes

01:03:57,580 --> 01:04:05,560
okay so this is this is a bigger example

01:04:01,690 --> 01:04:09,430
of inline callbacks sin on that's

01:04:05,560 --> 01:04:14,800
actually worse and this look how wide

01:04:09,430 --> 01:04:19,030
that i think it was him alright so this

01:04:14,800 --> 01:04:23,230
is an example of inline callbacks are in

01:04:19,030 --> 01:04:24,820
fact this is this is an example of

01:04:23,230 --> 01:04:28,060
several things including some things

01:04:24,820 --> 01:04:29,890
that we haven't talked about so if

01:04:28,060 --> 01:04:33,010
anybody saw the tornado talk the other

01:04:29,890 --> 01:04:34,810
day I didn't get any hands up earlier

01:04:33,010 --> 01:04:37,270
this is actually using tornadoes main

01:04:34,810 --> 01:04:39,970
loop instead of e pole which is actually

01:04:37,270 --> 01:04:42,190
using epoll I think so so I'm actually

01:04:39,970 --> 01:04:47,500
running some some epale stuff in here I

01:04:42,190 --> 01:04:48,820
also have here this is Greenland's did

01:04:47,500 --> 01:04:50,950
you see the stack let's talk so this is

01:04:48,820 --> 01:04:53,650
uses green 'let's in order to do one

01:04:50,950 --> 01:04:57,940
thing in there and this is an inline

01:04:53,650 --> 01:05:01,270
callbacks example so creating a client

01:04:57,940 --> 01:05:03,970
so create a client factory attach that a

01:05:01,270 --> 01:05:05,740
protocol attach a deferred at a message

01:05:03,970 --> 01:05:08,290
we did this earlier in one of the one of

01:05:05,740 --> 01:05:11,950
the examples create the endpoint can act

01:05:08,290 --> 01:05:18,339
and then result equals yield send a

01:05:11,950 --> 01:05:19,599
factory D and then ok so now this isn't

01:05:18,339 --> 01:05:22,900
this is something it wasn't in the

01:05:19,599 --> 01:05:30,430
previous example there's a callback

01:05:22,900 --> 01:05:34,320
chain so in line callbacks client hey so

01:05:30,430 --> 01:05:40,660
if I actually go pison minus M twisted

01:05:34,320 --> 01:05:44,410
conscious done today oh oh hold on I've

01:05:40,660 --> 01:05:47,070
got to use the one out of my foot

01:05:44,410 --> 01:05:47,070
virtual length

01:05:48,030 --> 01:05:59,190
Oh twist did twisted all right so if I

01:05:55,080 --> 01:06:01,520
import big demo Oh reactor already

01:05:59,190 --> 01:06:09,800
installed whoops it doesn't care okay Oh

01:06:01,520 --> 01:06:14,610
actually that that does matter okay

01:06:09,800 --> 01:06:18,270
import big demo big demo dot inline

01:06:14,610 --> 01:06:27,300
callbacks client what was the API of

01:06:18,270 --> 01:06:30,870
that it was that's not helpful yeah all

01:06:27,300 --> 01:06:33,810
right let's see what happens takes two

01:06:30,870 --> 01:06:37,500
arguments okay I it connects the

01:06:33,810 --> 01:06:39,330
localhost so the important thing is that

01:06:37,500 --> 01:06:41,700
because this uses the inline callbacks

01:06:39,330 --> 01:06:43,920
decorator it does and it you know and

01:06:41,700 --> 01:06:46,350
it's a generator it doesn't actually

01:06:43,920 --> 01:06:49,950
return a generator it returns a deferred

01:06:46,350 --> 01:06:57,240
a perfectly ordinary deferred if I go

01:06:49,950 --> 01:07:03,270
localhost 8080 that's a big error

01:06:57,240 --> 01:07:05,160
message was that so this is a this trace

01:07:03,270 --> 01:07:07,260
back is actually rendered quite quite

01:07:05,160 --> 01:07:08,280
weirdly because it gives you a full

01:07:07,260 --> 01:07:11,130
trace back all the way up to the

01:07:08,280 --> 01:07:13,830
interactive interpreter and then where

01:07:11,130 --> 01:07:17,790
the exceptional coils caught you'll see

01:07:13,830 --> 01:07:20,100
this kind of message quite a lot of used

01:07:17,790 --> 01:07:25,800
twisted programs so it's a different

01:07:20,100 --> 01:07:28,290
trace back renderer and you see this is

01:07:25,800 --> 01:07:32,730
where it sends through the the argument

01:07:28,290 --> 01:07:34,320
now what have I done wrong end point

01:07:32,730 --> 01:07:37,880
client factories in it takes at least

01:07:34,320 --> 01:07:37,880
four arguments to given

01:07:41,600 --> 01:07:48,500
this works when I run it oh well but the

01:07:46,970 --> 01:07:52,400
point is that in line callbacks returns

01:07:48,500 --> 01:07:57,560
a deferred you can call yield as many

01:07:52,400 --> 01:08:00,560
times as you want to to to yield more

01:07:57,560 --> 01:08:04,480
more values if we want to catch

01:08:00,560 --> 01:08:07,910
exceptions then we just do try except

01:08:04,480 --> 01:08:10,070
print I got an exception and that will

01:08:07,910 --> 01:08:14,150
file that that will happen when there

01:08:10,070 --> 01:08:17,570
are raisins right you can do exception e

01:08:14,150 --> 01:08:22,609
that also works so not exceptional I

01:08:17,570 --> 01:08:24,650
kiara that also works and the last value

01:08:22,609 --> 01:08:27,700
what will actually be on the call back

01:08:24,650 --> 01:08:30,859
at the point after the callback chain

01:08:27,700 --> 01:08:32,510
you can't use return because it's a

01:08:30,859 --> 01:08:33,950
generator you can't use yield because it

01:08:32,510 --> 01:08:37,250
will try and do the co-operative stuff

01:08:33,950 --> 01:08:39,230
so you actually call this method which

01:08:37,250 --> 01:08:40,760
stops the generator from executing I

01:08:39,230 --> 01:08:43,580
think it actually raises the synthetic

01:08:40,760 --> 01:08:45,320
exception to do it it's a bit ugly but

01:08:43,580 --> 01:08:47,960
you just called the fur dot return value

01:08:45,320 --> 01:08:50,270
and this is the resulting this is the

01:08:47,960 --> 01:08:53,510
end of the callback chain and if you add

01:08:50,270 --> 01:08:58,910
a call back to calling this method then

01:08:53,510 --> 01:09:01,580
that will be that will be I got our back

01:08:58,910 --> 01:09:03,650
epson our back is will be that the value

01:09:01,580 --> 01:09:05,540
that's returned if you don't use

01:09:03,650 --> 01:09:09,290
different returning value just get none

01:09:05,540 --> 01:09:10,850
yeah yeah so if you get nine out of that

01:09:09,290 --> 01:09:12,830
you have to think well you can't use

01:09:10,850 --> 01:09:16,340
return you have to use return value it's

01:09:12,830 --> 01:09:18,050
a bit ugly but it works I'm also going

01:09:16,340 --> 01:09:26,000
to show something else which is a bit

01:09:18,050 --> 01:09:33,020
bit of weird kuro twine handle

01:09:26,000 --> 01:09:36,640
connection see this is a method handle

01:09:33,020 --> 01:09:39,230
connection it gets past the transport

01:09:36,640 --> 01:09:41,510
we're buffering lines its a math thing

01:09:39,230 --> 01:09:43,670
we written point so it's full line in

01:09:41,510 --> 01:09:48,290
transport transport right line this is

01:09:43,670 --> 01:09:52,609
an echo server this is an echo server

01:09:48,290 --> 01:09:55,160
that looks synchronous but because it's

01:09:52,609 --> 01:10:00,740
done using kuro twine because of

01:09:55,160 --> 01:10:03,160
green lights wilson tcp g wisdom tcp

01:10:00,740 --> 01:10:05,360
it's the green which is it wasn't gcp

01:10:03,160 --> 01:10:07,400
actually makes it so whenever you call

01:10:05,360 --> 01:10:08,810
whatever you try and get information out

01:10:07,400 --> 01:10:10,880
of the transport there's no information

01:10:08,810 --> 01:10:13,370
there uses green 'let's to return

01:10:10,880 --> 01:10:17,240
controls the event loop this is really

01:10:13,370 --> 01:10:20,150
nasty but it works it works surprisingly

01:10:17,240 --> 01:10:21,830
well there are a few bugs to do with

01:10:20,150 --> 01:10:23,840
exception handling and network

01:10:21,830 --> 01:10:26,120
conditions but if you want to if you

01:10:23,840 --> 01:10:28,700
want to just quickly throw some

01:10:26,120 --> 01:10:30,950
procedural code into njoy twisted thing

01:10:28,700 --> 01:10:32,660
it might be useful this is basically the

01:10:30,950 --> 01:10:34,760
equivalent of g event except instead of

01:10:32,660 --> 01:10:41,870
lib bev or a live event it uses the

01:10:34,760 --> 01:10:47,390
twisted reactor yep ok so would you like

01:10:41,870 --> 01:10:50,960
more examples ok Oh testing we didn't

01:10:47,390 --> 01:10:58,010
cover testing let's actually talk about

01:10:50,960 --> 01:11:08,810
that quite quickly uh-huh I'm going to

01:10:58,010 --> 01:11:10,550
slide here so this is a nose test you

01:11:08,810 --> 01:11:12,220
know what I updated the test slides the

01:11:10,550 --> 01:11:16,310
other day and then I lost all this stuff

01:11:12,220 --> 01:11:17,990
so this is using those nose test twisted

01:11:16,310 --> 01:11:21,470
twisted you till there's go decorators

01:11:17,990 --> 01:11:24,440
say your time out of one second so you

01:11:21,470 --> 01:11:26,390
know this test if it's s isn't fire

01:11:24,440 --> 01:11:29,540
success than it's a failure after one

01:11:26,390 --> 01:11:31,340
second it goes and actually connects to

01:11:29,540 --> 01:11:35,990
a server creates a client factory

01:11:31,340 --> 01:11:38,870
connect to a server does this actually

01:11:35,990 --> 01:11:41,180
connect to a server no it doesn't see

01:11:38,870 --> 01:11:43,520
this is entirely synthetic it doesn't

01:11:41,180 --> 01:11:45,380
connect to a server it plumbs in the

01:11:43,520 --> 01:11:47,930
product it creates a protocol instance

01:11:45,380 --> 01:11:51,050
plums it into the factory and then

01:11:47,930 --> 01:11:53,690
actually our calls line received

01:11:51,050 --> 01:11:55,370
directly this is an entirely valid way

01:11:53,690 --> 01:11:56,750
of testing twisted protocols you don't

01:11:55,370 --> 01:11:58,400
actually have to establish a tcp

01:11:56,750 --> 01:12:00,260
connection you actually just cool line

01:11:58,400 --> 01:12:02,300
received or daughter received with it

01:12:00,260 --> 01:12:05,120
was the line ending on it and that will

01:12:02,300 --> 01:12:06,920
work for larger twisted projects what I

01:12:05,120 --> 01:12:08,990
tend to do is I right functional tests

01:12:06,920 --> 01:12:10,520
that actually create a real server

01:12:08,990 --> 01:12:14,720
actually create a real client and do

01:12:10,520 --> 01:12:16,070
rely o in between them and then in order

01:12:14,720 --> 01:12:17,630
to get those two paths you write a bunch

01:12:16,070 --> 01:12:20,630
of unit tests and in unit tests I do

01:12:17,630 --> 01:12:22,580
zero I 0 0 no disk i/o no network I oh

01:12:20,630 --> 01:12:24,740
no nothing just mock everything out or

01:12:22,580 --> 01:12:26,120
and as you can see here very often you

01:12:24,740 --> 01:12:28,460
don't even really need to mock anything

01:12:26,120 --> 01:12:29,780
out once in a while it's usually

01:12:28,460 --> 01:12:31,430
transport then you have to mock out

01:12:29,780 --> 01:12:35,750
because things call transport are right

01:12:31,430 --> 01:12:37,250
or transport out loose connection but so

01:12:35,750 --> 01:12:39,380
basically I just you can write unit

01:12:37,250 --> 01:12:42,260
tests very easily that don't involve any

01:12:39,380 --> 01:12:43,580
real IL the biggest trap you get get

01:12:42,260 --> 01:12:45,410
into when you want to write tests for

01:12:43,580 --> 01:12:47,660
twisted codes you think how do i connect

01:12:45,410 --> 01:12:49,430
to protocols together how do I actually

01:12:47,660 --> 01:12:52,340
create a connection and then you realize

01:12:49,430 --> 01:12:56,450
out you don't actually have to there is

01:12:52,340 --> 01:12:58,220
a loopback transport which is useful if

01:12:56,450 --> 01:13:00,350
you actually want to do this and allows

01:12:58,220 --> 01:13:01,820
you to do it with that establishing HTTP

01:13:00,350 --> 01:13:07,180
connections it stops in isolation

01:13:01,820 --> 01:13:09,730
failures this example shows an assert so

01:13:07,180 --> 01:13:13,130
you actually asserting that it failed

01:13:09,730 --> 01:13:16,180
and and whenever you unit test with

01:13:13,130 --> 01:13:18,530
twisted you can return a deferred and

01:13:16,180 --> 01:13:22,250
that should fire with either success or

01:13:18,530 --> 01:13:24,320
failure or timeout this is nose tests

01:13:22,250 --> 01:13:27,050
there is also a tool called trial which

01:13:24,320 --> 01:13:28,370
is twists its own unit test runner

01:13:27,050 --> 01:13:31,160
you've got to use a test run which is

01:13:28,370 --> 01:13:33,740
deferred aware so knows those tests with

01:13:31,160 --> 01:13:36,290
it's twisted capabilities or trial other

01:13:33,740 --> 01:13:39,910
two main ones as long as you use twisted

01:13:36,290 --> 01:13:43,480
trial unit tests so basically inside

01:13:39,910 --> 01:13:46,430
trial is a version of unit tests which

01:13:43,480 --> 01:13:49,070
unlike regular unit it adds a couple of

01:13:46,430 --> 01:13:51,830
assertions but unlike regular unit tests

01:13:49,070 --> 01:13:53,720
is deferred aware as long as you use the

01:13:51,830 --> 01:13:56,540
deferred aware code you can use whatever

01:13:53,720 --> 01:14:06,800
test foreigner you want I think even the

01:13:56,540 --> 01:14:10,940
pilot test one works okay so okay so

01:14:06,800 --> 01:14:12,740
this is a trial example and this is in

01:14:10,940 --> 01:14:15,920
the the samples you actually run trial

01:14:12,740 --> 01:14:17,900
space has sampled up you I this is a

01:14:15,920 --> 01:14:19,160
complete example it works it actually

01:14:17,900 --> 01:14:21,050
goes to Twitter and make sure the

01:14:19,160 --> 01:14:22,250
twitter comes back that'll happen maybe

01:14:21,050 --> 01:14:27,620
one once and twice

01:14:22,250 --> 01:14:30,020
so it'll found quite a bit this is nose

01:14:27,620 --> 01:14:31,880
doctrine twisted utils this is exactly

01:14:30,020 --> 01:14:35,030
how to do it this way you get the

01:14:31,880 --> 01:14:38,570
deferred there and you actually get a

01:14:35,030 --> 01:14:41,450
reactor which is a mock reactor for for

01:14:38,570 --> 01:14:45,760
testing and you can run those tests on

01:14:41,450 --> 01:14:45,760
those tests da intestines got no stop hi

01:14:49,540 --> 01:14:53,810
we didn't talk about threats much I was

01:14:52,520 --> 01:14:56,450
just about to say that we didn't talk

01:14:53,810 --> 01:14:57,740
about threads and cooperation so maybe I

01:14:56,450 --> 01:14:58,850
should know if you have a slide for that

01:14:57,740 --> 01:15:02,780
back and just talk about that if you

01:14:58,850 --> 01:15:04,700
like so we said something we've been

01:15:02,780 --> 01:15:06,500
talking about how you not allowed to

01:15:04,700 --> 01:15:09,260
block the reactor and there was the

01:15:06,500 --> 01:15:11,330
example with your ello you are el open

01:15:09,260 --> 01:15:13,760
that just read and did some synchronous

01:15:11,330 --> 01:15:14,870
i/o in that watch reactor and then you

01:15:13,760 --> 01:15:17,750
couldn't do anything else in there actor

01:15:14,870 --> 01:15:20,090
this is not supposed to do that so so so

01:15:17,750 --> 01:15:21,470
often you need threats there there are

01:15:20,090 --> 01:15:24,320
people who religiously say you should

01:15:21,470 --> 01:15:27,500
use them they are useful they are needed

01:15:24,320 --> 01:15:29,570
so so whenever you do database

01:15:27,500 --> 01:15:31,400
operations when you whatever you do name

01:15:29,570 --> 01:15:35,480
lookups you might not realize this but

01:15:31,400 --> 01:15:38,480
there isn't actually a asynchronous DNS

01:15:35,480 --> 01:15:40,370
client that works there's a lot to

01:15:38,480 --> 01:15:42,020
pretend to but there's not actually one

01:15:40,370 --> 01:15:43,790
that does work you've got to use get go

01:15:42,020 --> 01:15:45,740
get out or info which uses all sorts of

01:15:43,790 --> 01:15:47,270
and crazy stuff so you have to do those

01:15:45,740 --> 01:15:52,840
in threads and twist it does do them in

01:15:47,270 --> 01:15:56,180
threads using a thread pool in this case

01:15:52,840 --> 01:15:57,850
we've done from twisted import threads I

01:15:56,180 --> 01:16:00,020
think its facility to the input threads

01:15:57,850 --> 01:16:02,570
and that has this method to further

01:16:00,020 --> 01:16:04,940
thread it's a great method that that

01:16:02,570 --> 01:16:07,190
creates that that check that goes and

01:16:04,940 --> 01:16:10,160
runs a thread which calculates the nth

01:16:07,190 --> 01:16:11,960
Fibonacci number and you know you always

01:16:10,160 --> 01:16:13,910
put in a million there that takes four

01:16:11,960 --> 01:16:15,530
over to Ron that will run in a thread

01:16:13,910 --> 01:16:17,060
won't block your reactor and when it's

01:16:15,530 --> 01:16:19,820
finished it will let a thread safe

01:16:17,060 --> 01:16:23,600
manner call your call back within the

01:16:19,820 --> 01:16:26,620
main thread so in this case you know it

01:16:23,600 --> 01:16:28,460
goes in and runs Fibonacci and then

01:16:26,620 --> 01:16:31,580
replies on the web server without

01:16:28,460 --> 01:16:33,260
locking any other there's there's a so

01:16:31,580 --> 01:16:35,180
basically there's there's two ways of

01:16:33,260 --> 01:16:36,170
getting around the blocking thing one is

01:16:35,180 --> 01:16:38,330
block somewhere else

01:16:36,170 --> 01:16:39,830
so running a different process or as the

01:16:38,330 --> 01:16:42,400
photo thread does run in a different

01:16:39,830 --> 01:16:45,020
thread there's the other option of

01:16:42,400 --> 01:16:48,110
cooperatively working which is if you

01:16:45,020 --> 01:16:49,850
can describe the CP this can be CPU

01:16:48,110 --> 01:16:51,500
intensive work if you can describe the

01:16:49,850 --> 01:16:54,170
CPU intensive work that you're doing as

01:16:51,500 --> 01:16:55,820
a generator and you can say like okay

01:16:54,170 --> 01:16:57,560
I'm going to do some work and then I'm

01:16:55,820 --> 01:16:59,180
going to yield and then when you're

01:16:57,560 --> 01:17:00,980
ready for me to do some more work again

01:16:59,180 --> 01:17:02,930
I'm going to yield again and as long as

01:17:00,980 --> 01:17:05,120
I promise to only do a tiny amount of

01:17:02,930 --> 01:17:07,490
work every single time and not block the

01:17:05,120 --> 01:17:11,030
reactor then that works fine and in twin

01:17:07,490 --> 01:17:12,740
twisted internet task there's a co-op as

01:17:11,030 --> 01:17:14,660
a cooperator I think you called

01:17:12,740 --> 01:17:16,550
cooperate there's a function called

01:17:14,660 --> 01:17:17,930
cooperate yeah there's a classical

01:17:16,550 --> 01:17:21,140
cooperator but you generally want

01:17:17,930 --> 01:17:24,410
cooperate yeah and essentially that does

01:17:21,140 --> 01:17:26,930
exactly why I decide so it will call a

01:17:24,410 --> 01:17:29,120
generator and expect it to return within

01:17:26,930 --> 01:17:30,560
a reasonable amount of time whatever

01:17:29,120 --> 01:17:33,620
that is free application whatever it is

01:17:30,560 --> 01:17:36,590
it's small and it will continue calling

01:17:33,620 --> 01:17:37,700
it until it's done so cooperator is nice

01:17:36,590 --> 01:17:41,060
because you don't have to worry about

01:17:37,700 --> 01:17:42,770
thread safety no locks and you've got

01:17:41,060 --> 01:17:45,040
the gill anyway so it's not like CPU

01:17:42,770 --> 01:17:47,570
intensive stuff isn't going to block the

01:17:45,040 --> 01:17:50,300
execution anyway are you still in small

01:17:47,570 --> 01:17:52,670
blocks itch I should i should mention

01:17:50,300 --> 01:17:54,110
that when you are in a thread you're not

01:17:52,670 --> 01:17:56,090
allowed to call methods which will

01:17:54,110 --> 01:17:58,670
actually do any i/o or talk to the

01:17:56,090 --> 01:18:00,530
reactor the only twisted api which is

01:17:58,670 --> 01:18:03,080
thread-safe which is defined to be

01:18:00,530 --> 01:18:08,090
thread-safe is a method called reactor

01:18:03,080 --> 01:18:09,920
hole from thread and that inserts in a

01:18:08,090 --> 01:18:11,870
thread safe manner in something into a

01:18:09,920 --> 01:18:14,270
queue for the reaction to run with its

01:18:11,870 --> 01:18:18,410
next loop and that's a that's a thread

01:18:14,270 --> 01:18:23,690
safe way of and works on every reactor

01:18:18,410 --> 01:18:25,520
windows kqi ocp select two in thread

01:18:23,690 --> 01:18:27,530
safe manner call things from threads of

01:18:25,520 --> 01:18:29,660
the main main thread if you want to

01:18:27,530 --> 01:18:32,540
spawn a thread and just run one you can

01:18:29,660 --> 01:18:34,310
that's that's completely allowable if

01:18:32,540 --> 01:18:36,680
you use things like to further thread it

01:18:34,310 --> 01:18:39,110
uses a thread pool that thread pool is

01:18:36,680 --> 01:18:41,270
available interest interested in two

01:18:39,110 --> 01:18:43,010
threads as well you can create multiple

01:18:41,270 --> 01:18:44,630
thread pools so you'd have one thread

01:18:43,010 --> 01:18:45,890
pool for this work or once red bull for

01:18:44,630 --> 01:18:47,780
that worker so you don't have one

01:18:45,890 --> 01:18:49,670
exhausting the other that's how the

01:18:47,780 --> 01:18:52,400
database twisted on enterprise

01:18:49,670 --> 01:18:54,080
the database relational database API is

01:18:52,400 --> 01:18:56,420
at least work they create their own

01:18:54,080 --> 01:18:58,850
little tread parole and talk synchronous

01:18:56,420 --> 01:19:07,040
use the synchronous like my sequel or

01:18:58,850 --> 01:19:11,949
postgres client commands information we

01:19:07,040 --> 01:19:14,570
also have on in the TX project a

01:19:11,949 --> 01:19:18,830
deferred a process which is available

01:19:14,570 --> 01:19:20,630
that's in I can't remember the name of

01:19:18,830 --> 01:19:22,070
it but the further process does exist I

01:19:20,630 --> 01:19:25,489
assure you if you google for it you'll

01:19:22,070 --> 01:19:27,640
find it and and that does the same sort

01:19:25,489 --> 01:19:30,739
of thing the multiprocessing does it

01:19:27,640 --> 01:19:32,989
spawns a process has a process pool will

01:19:30,739 --> 01:19:34,969
communicate by people's to the

01:19:32,989 --> 01:19:36,590
subprocess and and front code then

01:19:34,969 --> 01:19:37,940
returns data very pickle if you just

01:19:36,590 --> 01:19:40,310
want to quickly run a process there's

01:19:37,940 --> 01:19:42,710
already in on the reactor there's

01:19:40,310 --> 01:19:44,350
reactor that spawn process the nice

01:19:42,710 --> 01:19:46,010
difference between that and

01:19:44,350 --> 01:19:47,810
multiprocessing is I don't know if

01:19:46,010 --> 01:19:49,610
anyone's ever use multiprocessing and

01:19:47,810 --> 01:19:52,130
try to do is standard i/o with the

01:19:49,610 --> 01:19:53,210
subprocess and both listen and write to

01:19:52,130 --> 01:19:54,739
that thing if you're doing that

01:19:53,210 --> 01:19:56,719
especially with multiple processes it

01:19:54,739 --> 01:19:59,000
comes incredibly hairy and the only way

01:19:56,719 --> 01:20:00,920
to you can actually as far as i know in

01:19:59,000 --> 01:20:03,650
python 2.7 you cannot do it correctly

01:20:00,920 --> 01:20:08,000
without involving select and basically

01:20:03,650 --> 01:20:09,170
rewrite interested so you can do reactor

01:20:08,000 --> 01:20:11,390
that swamp process you get a nice

01:20:09,170 --> 01:20:13,219
process it is a protocol it gets like

01:20:11,390 --> 01:20:14,719
data received and you can do self that

01:20:13,219 --> 01:20:16,760
transport right and it behaves exactly

01:20:14,719 --> 01:20:18,380
like that so if you write a protocol

01:20:16,760 --> 01:20:20,150
like the many protocols that we've

01:20:18,380 --> 01:20:22,699
written today and you want to speak that

01:20:20,150 --> 01:20:24,800
with standard i/o with some sub-process

01:20:22,699 --> 01:20:26,420
somewhere that works fine it's it's real

01:20:24,800 --> 01:20:28,160
easy to do it Lawrence isn't quite

01:20:26,420 --> 01:20:32,719
correct with sub processes you actually

01:20:28,160 --> 01:20:35,420
have a state ID Senate error received

01:20:32,719 --> 01:20:39,650
and said right out received because

01:20:35,420 --> 01:20:42,440
they're 03 not to but you know it's

01:20:39,650 --> 01:20:47,120
enough and it's useful and the protocol

01:20:42,440 --> 01:20:49,600
is well defined so that's talking to

01:20:47,120 --> 01:20:49,600
threads

01:20:50,410 --> 01:20:54,430
it just doesn't think they'd received

01:20:52,930 --> 01:20:58,720
it's called for both anything that comes

01:20:54,430 --> 01:21:00,490
in now it's in there um so another thing

01:20:58,720 --> 01:21:04,030
which is which is kind of nice is being

01:21:00,490 --> 01:21:06,760
able to run a process as a daemon with

01:21:04,030 --> 01:21:10,300
logging to syslog and and all of that

01:21:06,760 --> 01:21:12,160
kind of thing and being able to auto

01:21:10,300 --> 01:21:16,360
command line specify which reactor to

01:21:12,160 --> 01:21:17,860
use so so the technique we use that we

01:21:16,360 --> 01:21:20,170
use for that is called a plug-in like

01:21:17,860 --> 01:21:32,920
this is an example of a plug-in running

01:21:20,170 --> 01:21:37,420
if I go out here and twisty minus n for

01:21:32,920 --> 01:21:40,810
right in the foreground web you specify

01:21:37,420 --> 01:21:45,460
path but on that runs a website so

01:21:40,810 --> 01:21:49,540
localhost 8080 hello this is a twisted

01:21:45,460 --> 01:21:51,490
test page and you know you see HTTP logs

01:21:49,540 --> 01:21:53,530
and all of this and if I actually go

01:21:51,490 --> 01:21:57,760
most much help on that that says I you

01:21:53,530 --> 01:21:59,740
can specify path you can do all sorts of

01:21:57,760 --> 01:22:02,890
stuff you can say Don to trace backs do

01:21:59,740 --> 01:22:04,930
i sir cells is my private key this is

01:22:02,890 --> 01:22:08,410
the port to listen to on on HTTPS so

01:22:04,930 --> 01:22:14,460
this is a nice way of spawning a plug-in

01:22:08,410 --> 01:22:20,230
using twisty twisty come on line now

01:22:14,460 --> 01:22:22,030
this bitbucket repo is something I wrote

01:22:20,230 --> 01:22:23,560
last year because I found that it was

01:22:22,030 --> 01:22:25,600
very hard to find an example of actually

01:22:23,560 --> 01:22:28,090
how write a plug-in writing a plug-in is

01:22:25,600 --> 01:22:30,310
very useful it allows you to take him on

01:22:28,090 --> 01:22:32,200
line arguments it allows you to change

01:22:30,310 --> 01:22:34,600
on the command line how you do all your

01:22:32,200 --> 01:22:36,700
logging and all of that and then that's

01:22:34,600 --> 01:22:39,070
just a neat way of packaging it all up

01:22:36,700 --> 01:22:40,750
I'm such as an example it runs a example

01:22:39,070 --> 01:22:43,030
server and i think i have a branch there

01:22:40,750 --> 01:22:46,960
that uses opt pars instead of the

01:22:43,030 --> 01:22:48,310
twisted options pausing as well so so

01:22:46,960 --> 01:22:49,630
you can do whatever option pausing you

01:22:48,310 --> 01:22:53,080
want as well if you're comfortable with

01:22:49,630 --> 01:22:55,000
g flags or paws or odd pies or whatever

01:22:53,080 --> 01:22:56,470
next time you're at some relatives house

01:22:55,000 --> 01:22:58,270
and you need to transfer some files

01:22:56,470 --> 01:23:00,220
desperately off of your laptop I'm to

01:22:58,270 --> 01:23:01,960
theirs and it's some wonderfully

01:23:00,220 --> 01:23:02,150
misconfigured Windows machine or you

01:23:01,960 --> 01:23:04,130
have

01:23:02,150 --> 01:23:06,560
mac and they don't and or you have a

01:23:04,130 --> 01:23:08,480
linux machine and they don't twisty web

01:23:06,560 --> 01:23:11,030
you have a web server everything speaks

01:23:08,480 --> 01:23:12,290
to it speaks HTTP I'd be very surprised

01:23:11,030 --> 01:23:14,870
if you managed to find a relative that

01:23:12,290 --> 01:23:18,620
doesn't have a web browser so so here is

01:23:14,870 --> 01:23:20,989
serving a particular directory out of it

01:23:18,620 --> 01:23:26,690
and it just works list of plugins that

01:23:20,989 --> 01:23:31,100
are built in a conch proc mon mane whole

01:23:26,690 --> 01:23:35,000
male dns so running a casein dns florida

01:23:31,100 --> 01:23:37,580
is a matter of twisty minus and dns just

01:23:35,000 --> 01:23:38,900
check the arguments yes so whether or

01:23:37,580 --> 01:23:41,540
not you want to catch whether or not you

01:23:38,900 --> 01:23:46,070
want to recurse the hosts file the

01:23:41,540 --> 01:23:47,870
result calm zone file it like this is a

01:23:46,070 --> 01:23:49,190
little easier than setting up binders

01:23:47,870 --> 01:23:50,630
occasion just going to say anyone who is

01:23:49,190 --> 01:23:53,360
configured bind will find the

01:23:50,630 --> 01:23:54,770
significantly easier and and you know if

01:23:53,360 --> 01:23:58,489
I want to run it as a daemon I remove

01:23:54,770 --> 01:24:01,070
the minus n flag what are the other

01:23:58,489 --> 01:24:03,409
options on this you can change which we

01:24:01,070 --> 01:24:09,850
acted to use you can make it demonize

01:24:03,409 --> 01:24:14,110
you can use whatever you ID GID syslog

01:24:09,850 --> 01:24:20,060
effective user ID log files a log 2 etc

01:24:14,110 --> 01:24:22,940
all right the first mistake you will

01:24:20,060 --> 01:24:24,710
make is forgetting to use minus n it all

01:24:22,940 --> 01:24:28,550
just returned like that and then you'll

01:24:24,710 --> 01:24:31,820
actually find twisty up hid so you cat

01:24:28,550 --> 01:24:36,230
that and you say oh that's the pit

01:24:31,820 --> 01:24:38,540
number and so you kill that's the

01:24:36,230 --> 01:24:43,190
incantation sorry I always do that and I

01:24:38,540 --> 01:24:46,219
always have to do that and it's a little

01:24:43,190 --> 01:24:48,800
thing but actix use back tix I always

01:24:46,219 --> 01:24:50,270
use dollar open actually no I don't use

01:24:48,800 --> 01:24:53,480
all our open anymore cuz i use fish

01:24:50,270 --> 01:24:55,960
normally not on my laptop but everyone

01:24:53,480 --> 01:25:00,860
has anybody here use the fish shell i

01:24:55,960 --> 01:25:02,090
don't recommend it but i love it i can't

01:25:00,860 --> 01:25:04,640
recommend it because it's not bash

01:25:02,090 --> 01:25:06,100
compatible and so all all the things

01:25:04,640 --> 01:25:08,719
that you know from bosch aren't there

01:25:06,100 --> 01:25:11,360
this is other stuff that we've got our

01:25:08,719 --> 01:25:14,780
manhole we've mentioned launchpad.net /

01:25:11,360 --> 01:25:15,530
TX third-party libraries are generally

01:25:14,780 --> 01:25:20,600
called TX

01:25:15,530 --> 01:25:24,050
something so TX mysql TS pgsql different

01:25:20,600 --> 01:25:25,820
mm-hmm Thievery my paypal i was his

01:25:24,050 --> 01:25:27,920
paypal twisted thing is called TX

01:25:25,820 --> 01:25:31,190
thievery no just be very bit of like a

01:25:27,920 --> 01:25:34,010
really oh really yeah the rebar but like

01:25:31,190 --> 01:25:39,410
with an X this X is do not make things

01:25:34,010 --> 01:25:41,150
cool learns more resources that's the

01:25:39,410 --> 01:25:43,190
github repo where the twister training

01:25:41,150 --> 01:25:47,540
materials are twisted matrix com of

01:25:43,190 --> 01:25:50,120
course my plug-in example JP Calderon is

01:25:47,540 --> 01:25:53,920
is a twisted developer he is he is a

01:25:50,120 --> 01:25:57,500
magician and he has written a series of

01:25:53,920 --> 01:25:59,930
web in 60 seconds conscience 60 seconds

01:25:57,500 --> 01:26:01,670
but small tutorials i recommend if

01:25:59,930 --> 01:26:03,680
you're if you're interested to go and

01:26:01,670 --> 01:26:06,950
read through those tutorials he's on a

01:26:03,680 --> 01:26:10,280
sink asynchronous it's his domain is

01:26:06,950 --> 01:26:11,510
wing Cronus us you check that because I

01:26:10,280 --> 01:26:15,320
could have sworn it was a dot

01:26:11,510 --> 01:26:18,190
synchronous that you could be if it

01:26:15,320 --> 01:26:21,890
doesn't work it's it's the asses on the

01:26:18,190 --> 01:26:24,590
domain name I'm pretty sure that's right

01:26:21,890 --> 01:26:27,880
um okay I could be wrong let's find out

01:26:24,590 --> 01:26:27,880
um I'm editing

01:26:33,869 --> 01:26:45,749
okay it works all right and picture of a

01:26:37,889 --> 01:26:47,070
cat all right any other questions did

01:26:45,749 --> 01:26:49,559
you mention with the chrono things I

01:26:47,070 --> 01:26:51,559
chrono that's another tutorial right so

01:26:49,559 --> 01:26:54,059
yeah the chrono blog tutorial is

01:26:51,559 --> 01:26:56,070
something that I personally like very

01:26:54,059 --> 01:26:57,959
much I and eventually now it's actually

01:26:56,070 --> 01:26:59,489
on the twisted documentation page 21 of

01:26:57,959 --> 01:27:03,539
the only links that we have to outside

01:26:59,489 --> 01:27:06,899
of the twisted page itself it's in scope

01:27:03,539 --> 01:27:09,419
quite similar to to this tutorial here

01:27:06,899 --> 01:27:10,979
although eventually ended up going way

01:27:09,419 --> 01:27:12,419
past that but he also explains like

01:27:10,979 --> 01:27:14,039
deferred from scratch event loops from

01:27:12,419 --> 01:27:16,679
scratch so if you want to read up on

01:27:14,039 --> 01:27:18,649
anything of that sort you probably want

01:27:16,679 --> 01:27:28,800
to look at the carnival of tutorials

01:27:18,649 --> 01:27:32,280
alright I hope we haven't lost too many

01:27:28,800 --> 01:27:33,959
people this is bit of a bit of a whirl

01:27:32,280 --> 01:27:40,050
went through how to actually write

01:27:33,959 --> 01:27:45,629
protocols and what not interested any

01:27:40,050 --> 01:27:49,289
other questions sure yeah if you say it

01:27:45,629 --> 01:27:52,260
I'll repeat it yes the slides will be up

01:27:49,289 --> 01:27:55,800
on files on files of EP that they'll be

01:27:52,260 --> 01:27:57,449
up there afterwards so the question is

01:27:55,800 --> 01:28:00,229
will we have slides up there will be up

01:27:57,449 --> 01:28:00,229
there so another question

01:28:03,729 --> 01:28:08,719
okay so the question was what do I think

01:28:06,769 --> 01:28:11,629
about G event and tornado and how how do

01:28:08,719 --> 01:28:13,699
i differentiate there there are many

01:28:11,629 --> 01:28:16,749
network protocols already implemented

01:28:13,699 --> 01:28:19,909
and twisted and that's that's one of the

01:28:16,749 --> 01:28:24,229
one of the reasons which why i go to

01:28:19,909 --> 01:28:26,840
twist it immediately I the fourth for

01:28:24,229 --> 01:28:27,979
the 0.15 release we had a big sprint to

01:28:26,840 --> 01:28:31,760
try and get as many protocols

01:28:27,979 --> 01:28:37,399
implemented as possible so that's that's

01:28:31,760 --> 01:28:40,340
one thing that's really great now G

01:28:37,399 --> 01:28:42,199
event is nice I've got nothing against G

01:28:40,340 --> 01:28:44,689
event we actually have thorough time

01:28:42,199 --> 01:28:47,239
which is a G event style which you can

01:28:44,689 --> 01:28:52,699
use within a twisted event loop that's

01:28:47,239 --> 01:28:54,260
that's pretty neat tornado I have an

01:28:52,699 --> 01:28:59,449
example here it's actually in the

01:28:54,260 --> 01:29:02,030
example files big demo py so tornado

01:28:59,449 --> 01:29:05,539
we're actually you can actually use the

01:29:02,030 --> 01:29:07,789
tornado event loop is a reactor and then

01:29:05,539 --> 01:29:10,129
you can use whatever to tornado code you

01:29:07,789 --> 01:29:16,459
want and you know tornado is a nice

01:29:10,129 --> 01:29:19,070
little web server it's it's a it's a

01:29:16,459 --> 01:29:21,679
nice little web server that allows you

01:29:19,070 --> 01:29:23,269
to do nice web server II things and you

01:29:21,679 --> 01:29:26,119
can use that with twisted and so you can

01:29:23,269 --> 01:29:28,399
go and go and do your xmpp server at the

01:29:26,119 --> 01:29:29,749
same time is your tornado so but it's

01:29:28,399 --> 01:29:31,309
harder to get the network protocols

01:29:29,749 --> 01:29:33,889
running in tornado if you want to do

01:29:31,309 --> 01:29:35,239
fancy things the I also did look at

01:29:33,889 --> 01:29:38,419
tornado and one of the things that I

01:29:35,239 --> 01:29:41,510
found was not so good was error handling

01:29:38,419 --> 01:29:45,769
with callbacks and so I like twisted

01:29:41,510 --> 01:29:47,119
error handling with callbacks better do

01:29:45,769 --> 01:29:51,760
you have anything to say about gia venom

01:29:47,119 --> 01:29:55,489
so with regards to G event for example I

01:29:51,760 --> 01:29:58,159
I've used the event I played with it one

01:29:55,489 --> 01:29:59,360
of the things I don't like is the monkey

01:29:58,159 --> 01:30:00,860
patch the entire standard library I

01:29:59,360 --> 01:30:03,289
understand why they do it because they

01:30:00,860 --> 01:30:05,090
it magically makes supposedly magically

01:30:03,289 --> 01:30:09,379
makes anything that is currently

01:30:05,090 --> 01:30:11,059
blocking non-blocking it's nice but then

01:30:09,379 --> 01:30:13,729
it's not nice when you have like for

01:30:11,059 --> 01:30:15,919
example a C library see my sequel or a

01:30:13,729 --> 01:30:17,119
see postgres library that you can't

01:30:15,919 --> 01:30:19,070
magically make not block

01:30:17,119 --> 01:30:20,689
I don't like the idea of monkey patching

01:30:19,070 --> 01:30:23,719
the standard library I understand why

01:30:20,689 --> 01:30:26,929
they do it the other reason another

01:30:23,719 --> 01:30:28,969
reason why I like twisted is if you

01:30:26,929 --> 01:30:31,429
start with the callbacks they're a

01:30:28,969 --> 01:30:34,669
strictly stronger model than one chakra

01:30:31,429 --> 01:30:36,260
chains you can express you can expense

01:30:34,669 --> 01:30:38,030
while we demonstrated in like call back

01:30:36,260 --> 01:30:39,769
so you can express synchronous looking

01:30:38,030 --> 01:30:43,939
code like that with inline callbacks and

01:30:39,769 --> 01:30:46,219
it internally uses regular deference and

01:30:43,939 --> 01:30:49,489
callbacks you can express co routines

01:30:46,219 --> 01:30:52,820
style things again evidence by

01:30:49,489 --> 01:30:55,280
demonstration courage kuro twine so you

01:30:52,820 --> 01:30:57,349
can express those models using twisted

01:30:55,280 --> 01:30:59,840
you cannot easily express the other way

01:30:57,349 --> 01:31:01,699
around so if at any point in time you

01:30:59,840 --> 01:31:04,280
end up with some code that where

01:31:01,699 --> 01:31:05,689
callbacks actually make sense and g

01:31:04,280 --> 01:31:07,399
event proponents will say there are no

01:31:05,689 --> 01:31:09,379
examples where where call back to make

01:31:07,399 --> 01:31:12,320
sense I i disagree i think they're there

01:31:09,379 --> 01:31:14,629
is code that you can make significantly

01:31:12,320 --> 01:31:16,429
nicer in callbacks there is also code

01:31:14,629 --> 01:31:18,679
that looks a lot nicer in synchronous

01:31:16,429 --> 01:31:20,599
looking i I will happily admit that for

01:31:18,679 --> 01:31:24,619
that we have defer in line callbacks I

01:31:20,599 --> 01:31:26,479
don't use correct wine anymore but yeah

01:31:24,619 --> 01:31:27,769
I just use different line call backs

01:31:26,479 --> 01:31:29,360
when synchronous makes when synchronous

01:31:27,769 --> 01:31:30,860
looking code makes sense i use callbacks

01:31:29,360 --> 01:31:34,070
when synchronous looking code doesn't

01:31:30,860 --> 01:31:36,199
make sense so so for instance the other

01:31:34,070 --> 01:31:38,689
the other day in the tornado talk i did

01:31:36,199 --> 01:31:41,119
ask the question how do you handle

01:31:38,689 --> 01:31:42,709
threats ok tornado doesn't have the

01:31:41,119 --> 01:31:44,300
facility to handle threads so if i was

01:31:42,709 --> 01:31:46,699
in a situation where I had to an area

01:31:44,300 --> 01:31:49,550
code base and I wanted threads it would

01:31:46,699 --> 01:31:52,159
be very easy to say also run the reactor

01:31:49,550 --> 01:31:54,619
you know the the tornado reactor so it's

01:31:52,159 --> 01:31:56,599
it's the full the full tornado stack is

01:31:54,619 --> 01:31:59,209
running but I also want to be able to

01:31:56,599 --> 01:32:02,419
have my event loop from twisted so not

01:31:59,209 --> 01:32:04,519
my event loop but my thread pulls from

01:32:02,419 --> 01:32:05,869
twisted I can do that I just you know

01:32:04,519 --> 01:32:08,510
import the thread pulls in site using

01:32:05,869 --> 01:32:10,969
them and then suddenly I've got a good

01:32:08,510 --> 01:32:13,219
abstraction for thread pulls in in the

01:32:10,969 --> 01:32:15,010
same context as my tornado program on a

01:32:13,219 --> 01:32:17,689
similar note let's say that you have

01:32:15,010 --> 01:32:19,909
some computationally difficult thing

01:32:17,689 --> 01:32:21,619
that you wish to run for example the

01:32:19,909 --> 01:32:24,590
example that I currently use at ephrata

01:32:21,619 --> 01:32:26,300
thread the most for would be a key

01:32:24,590 --> 01:32:28,729
derivation function for securely storing

01:32:26,300 --> 01:32:30,260
passwords now by definition a key

01:32:28,729 --> 01:32:30,980
derivation function is expensive to

01:32:30,260 --> 01:32:33,420
compute

01:32:30,980 --> 01:32:35,159
also it's going to be in C because it's

01:32:33,420 --> 01:32:36,449
heavily vetted crypto code you don't

01:32:35,159 --> 01:32:37,739
want to rewrite that in Python you

01:32:36,449 --> 01:32:39,270
certainly don't want to rewrite it in a

01:32:37,739 --> 01:32:41,810
way that it becomes cooperative because

01:32:39,270 --> 01:32:44,159
you're going to leak i mean the the

01:32:41,810 --> 01:32:47,099
option for introducing security problems

01:32:44,159 --> 01:32:49,139
is the the the the attack factors face

01:32:47,099 --> 01:32:51,780
there is just so large it's impossible

01:32:49,139 --> 01:32:53,520
to do so what do you do when you have

01:32:51,780 --> 01:32:55,650
something where you really really really

01:32:53,520 --> 01:32:59,610
have something that really really needs

01:32:55,650 --> 01:33:01,199
to walk and twisted i call reactor

01:32:59,610 --> 01:33:03,150
defied your threat you have all the

01:33:01,199 --> 01:33:04,590
problems with threads but fine with

01:33:03,150 --> 01:33:08,099
reacted for the thread at least i have a

01:33:04,590 --> 01:33:10,590
defined way of doing what I want with G

01:33:08,099 --> 01:33:12,630
events to my knowledge I could be

01:33:10,590 --> 01:33:14,760
mistaken if there was something written

01:33:12,630 --> 01:33:17,099
for that now but I remember talking to

01:33:14,760 --> 01:33:18,330
Dennis Malenko last year at Europe I

01:33:17,099 --> 01:33:23,580
thought about this and there was no way

01:33:18,330 --> 01:33:25,860
of doing that so I could be I haven't

01:33:23,580 --> 01:33:27,929
checked G event recently so i do

01:33:25,860 --> 01:33:30,920
apologize if i'm spreading lies now

01:33:27,929 --> 01:33:39,000
about the current state of g event ok

01:33:30,920 --> 01:33:41,810
any other questions all right we've got

01:33:39,000 --> 01:33:41,810
some of those like

01:33:54,790 --> 01:33:59,650
the easiest thing to do what I've done

01:33:56,380 --> 01:34:02,050
this is a question so the question the

01:33:59,650 --> 01:34:05,470
question was so you have a big big

01:34:02,050 --> 01:34:06,730
program and it's not using twisted it

01:34:05,470 --> 01:34:08,560
does a whole lot of stuff but you also

01:34:06,730 --> 01:34:10,690
want to suddenly use a twisted protocol

01:34:08,560 --> 01:34:12,970
in the middle of it the easiest thing to

01:34:10,690 --> 01:34:17,220
do when I have done this is to you start

01:34:12,970 --> 01:34:22,510
the program slightly differently you are

01:34:17,220 --> 01:34:25,030
you are your import twisted you input

01:34:22,510 --> 01:34:27,310
the reactor and you call reactor dot

01:34:25,030 --> 01:34:28,870
hole and thread and you call your main

01:34:27,310 --> 01:34:31,990
function from your original program and

01:34:28,870 --> 01:34:34,360
then from there you can call reactor

01:34:31,990 --> 01:34:35,440
call from thread to start things in the

01:34:34,360 --> 01:34:37,060
main loop so you have a somewhat

01:34:35,440 --> 01:34:40,720
simultaneously running main loop and

01:34:37,060 --> 01:34:42,040
your program and in your main function

01:34:40,720 --> 01:34:47,020
you have a try except around the whole

01:34:42,040 --> 01:34:49,200
thing to say when I close when I shut

01:34:47,020 --> 01:34:52,150
down I also want to call reacted stop

01:34:49,200 --> 01:34:54,280
I've done this it was very effective it

01:34:52,150 --> 01:34:57,730
allowed me to simultaneously have a

01:34:54,280 --> 01:35:01,660
program which had a big legacy code base

01:34:57,730 --> 01:35:07,210
and then I I had access to the main loop

01:35:01,660 --> 01:35:09,160
I was able to go do stuff in the metro I

01:35:07,210 --> 01:35:11,380
think there's even is there a blocking

01:35:09,160 --> 01:35:13,690
call from thread now yes sorry there

01:35:11,380 --> 01:35:16,840
there is a second API a blocking call

01:35:13,690 --> 01:35:18,910
from thread is a way of saying call from

01:35:16,840 --> 01:35:20,830
thread so call in the main loop and

01:35:18,910 --> 01:35:22,990
block on whatever a deferred that

01:35:20,830 --> 01:35:25,690
returns and block the thread until it

01:35:22,990 --> 01:35:27,520
returns so you can sort of have a thread

01:35:25,690 --> 01:35:29,620
which has a blocking a blocking API

01:35:27,520 --> 01:35:31,990
available in the main thread yeah you

01:35:29,620 --> 01:35:34,150
know it's very effective you have to do

01:35:31,990 --> 01:35:38,140
some fiddly bits to make sure that your

01:35:34,150 --> 01:35:40,450
program stops but I think we can deal

01:35:38,140 --> 01:35:43,120
with that it's some it that's uh that's

01:35:40,450 --> 01:35:46,060
an intractable problem sometimes I had a

01:35:43,120 --> 01:35:48,400
similar experience except i did the old

01:35:46,060 --> 01:35:49,720
program in a separate process but that

01:35:48,400 --> 01:35:51,970
was mostly because it wanted to do

01:35:49,720 --> 01:35:54,190
things like signal handling which under

01:35:51,970 --> 01:35:55,930
most platforms if you're not in the main

01:35:54,190 --> 01:35:57,340
thread is basically undefined people do

01:35:55,930 --> 01:36:00,880
it anyway and then it breaks six months

01:35:57,340 --> 01:36:03,520
later for no apparent reason so but yeah

01:36:00,880 --> 01:36:06,690
the separate process IPC separate thread

01:36:03,520 --> 01:36:06,690
walking call from thread

01:36:10,520 --> 01:36:15,810
okay so so there is actually a problem

01:36:12,900 --> 01:36:18,840
here in the what happen happens is that

01:36:15,810 --> 01:36:20,370
the signal is delivered to any thread

01:36:18,840 --> 01:36:23,790
that is currently running sorry the

01:36:20,370 --> 01:36:25,110
question is about to do a signal so it's

01:36:23,790 --> 01:36:29,100
a single delivered to the main thread or

01:36:25,110 --> 01:36:31,440
other threats at least a situation was

01:36:29,100 --> 01:36:34,080
last time I I looked at this in great

01:36:31,440 --> 01:36:35,580
detail was a signal will be delivered to

01:36:34,080 --> 01:36:38,220
your process it will be delivered to the

01:36:35,580 --> 01:36:40,200
currently running thread Python will

01:36:38,220 --> 01:36:42,090
then set a flag to say a signal was

01:36:40,200 --> 01:36:44,160
delivered this is what the signal was

01:36:42,090 --> 01:36:46,560
and the next time the main thread

01:36:44,160 --> 01:36:48,810
weights it will see that and instead of

01:36:46,560 --> 01:36:50,580
executing an X bytecode will then go and

01:36:48,810 --> 01:36:53,160
execute the threat the signal handler

01:36:50,580 --> 01:36:56,280
and then go back and continue executing

01:36:53,160 --> 01:36:59,610
by code where this breaks down is where

01:36:56,280 --> 01:37:04,710
you are blocking in a capi this happened

01:36:59,610 --> 01:37:05,970
with GD k GD k woods i would be the

01:37:04,710 --> 01:37:07,350
event loop and you were register your

01:37:05,970 --> 01:37:09,180
file handle is that event loop another

01:37:07,350 --> 01:37:12,690
call back in the piping code and so you

01:37:09,180 --> 01:37:14,520
were not executing any python bytecode

01:37:12,690 --> 01:37:17,360
every time an event occurred until it

01:37:14,520 --> 01:37:21,090
actually executed one of your call backs

01:37:17,360 --> 01:37:23,520
the so what would happen is you would

01:37:21,090 --> 01:37:24,960
get delivered a message to an on main

01:37:23,520 --> 01:37:27,090
thread it would not interrupt the main

01:37:24,960 --> 01:37:30,210
thread the main thread would be stuck in

01:37:27,090 --> 01:37:31,980
its poles its select for until the next

01:37:30,210 --> 01:37:33,780
event occurred then as soon as the next

01:37:31,980 --> 01:37:36,150
event occur that actually touched python

01:37:33,780 --> 01:37:38,220
because you know GDK moving the mouse

01:37:36,150 --> 01:37:39,660
does not i pull pull backs into the

01:37:38,220 --> 01:37:42,300
python code it's only when you have file

01:37:39,660 --> 01:37:45,660
descriptors it would not pull that call

01:37:42,300 --> 01:37:47,610
back until such time as that thread woke

01:37:45,660 --> 01:37:49,320
and run python code there are even race

01:37:47,610 --> 01:37:54,180
conditions here where it can happen with

01:37:49,320 --> 01:37:59,400
select so what the way they fix that in

01:37:54,180 --> 01:38:00,810
the GDK case is with pi GDK because you

01:37:59,400 --> 01:38:03,450
know people do heavily threaded stuff

01:38:00,810 --> 01:38:06,240
with gooeys you know it makes sense is

01:38:03,450 --> 01:38:08,370
that they top hole of the time at a

01:38:06,240 --> 01:38:10,470
point 1 seconds so you're intentionally

01:38:08,370 --> 01:38:12,630
waking your pro your process every tenth

01:38:10,470 --> 01:38:15,440
every tenth of a second which is not

01:38:12,630 --> 01:38:18,860
very good for your laptop staying asleep

01:38:15,440 --> 01:38:18,860
signals suck

01:38:20,719 --> 01:38:25,349
there's another question another quick

01:38:23,309 --> 01:38:26,639
note all right not anymore but what's a

01:38:25,349 --> 01:38:29,579
what's a project you've been boy him

01:38:26,639 --> 01:38:33,599
lightly I so that would be work-related

01:38:29,579 --> 01:38:36,599
and it's essentially a giant twisted

01:38:33,599 --> 01:38:38,489
project that this is actually a good

01:38:36,599 --> 01:38:40,199
example of where blocking API where

01:38:38,489 --> 01:38:42,809
blocking is sort of blocking is really a

01:38:40,199 --> 01:38:44,219
relative term and when people say

01:38:42,809 --> 01:38:46,199
blocking in a negative way they mean

01:38:44,219 --> 01:38:47,880
blocking too long at the end of the day

01:38:46,199 --> 01:38:49,889
if you're adding two numbers up you're

01:38:47,880 --> 01:38:51,119
blocking there is something somewhere

01:38:49,889 --> 01:38:52,829
that's doing something and you're not

01:38:51,119 --> 01:38:54,959
allowed to do anything unless until it's

01:38:52,829 --> 01:38:56,760
done it's just that adding two numbers

01:38:54,959 --> 01:39:01,489
is really really fast so you don't

01:38:56,760 --> 01:39:03,300
really care in my example we use a

01:39:01,489 --> 01:39:06,570
sequel light databases well actually

01:39:03,300 --> 01:39:07,800
axiom which is a project in the twisted

01:39:06,570 --> 01:39:10,079
ecosystem I would say but it's not

01:39:07,800 --> 01:39:13,289
really twisted specific it's an object

01:39:10,079 --> 01:39:16,590
database so it's essentially a very very

01:39:13,289 --> 01:39:20,309
simplistic ORM it's sort of it fits in

01:39:16,590 --> 01:39:23,610
your head and it uses a real on the disk

01:39:20,309 --> 01:39:25,739
icon sorry sequel like database and it

01:39:23,610 --> 01:39:27,389
does all sorts of blocking operations on

01:39:25,739 --> 01:39:30,059
it but that's fine because it's local

01:39:27,389 --> 01:39:31,979
sequel light and I try to make sure that

01:39:30,059 --> 01:39:34,559
I don't do incredibly expensive

01:39:31,979 --> 01:39:37,590
operations on it and similar to another

01:39:34,559 --> 01:39:40,380
project in the twisted space we have

01:39:37,590 --> 01:39:41,789
like one sequel I'd database per user so

01:39:40,380 --> 01:39:43,889
one sequel I'd database never really

01:39:41,789 --> 01:39:45,090
grows that big so any queries going to

01:39:43,889 --> 01:39:49,050
be you know returned with the new

01:39:45,090 --> 01:39:50,249
millisecond so nobody cares and this is

01:39:49,050 --> 01:39:52,800
the thing that I was talking about that

01:39:50,249 --> 01:39:55,050
within one process it has I have one

01:39:52,800 --> 01:39:57,959
definition of what a certain RPC method

01:39:55,050 --> 01:39:59,789
semantically means and but you can do

01:39:57,959 --> 01:40:01,320
that over json-rpc I do that from a

01:39:59,789 --> 01:40:04,559
browser I do that from an amp client I

01:40:01,320 --> 01:40:11,070
do that from xml RPC I don't do that

01:40:04,559 --> 01:40:14,190
from soap because screw soap but if I

01:40:11,070 --> 01:40:17,729
really wanted to i probably could so

01:40:14,190 --> 01:40:19,709
yeah that's what I do all right you can

01:40:17,729 --> 01:40:23,099
talk about how Google is dominating the

01:40:19,709 --> 01:40:24,599
world which listed can you know I don't

01:40:23,099 --> 01:40:27,449
think that that's a question which has

01:40:24,599 --> 01:40:29,579
an answer um with it that's not

01:40:27,449 --> 01:40:31,230
officially not at least right it's not a

01:40:29,579 --> 01:40:34,450
goal

01:40:31,230 --> 01:40:36,550
to give you an idea of so many people

01:40:34,450 --> 01:40:38,770
are somewhat surprised when they find

01:40:36,550 --> 01:40:41,050
out apparently when what sort of

01:40:38,770 --> 01:40:42,880
companies use twisted but there are

01:40:41,050 --> 01:40:45,340
seriously there's big brass using this

01:40:42,880 --> 01:40:47,920
stuff for example industrial I'd magic

01:40:45,340 --> 01:40:49,990
so the people behind Star Wars and a

01:40:47,920 --> 01:40:53,080
number of other special effects for

01:40:49,990 --> 01:40:56,080
recent movies they run their entire

01:40:53,080 --> 01:40:59,860
render farm on twisted that's not

01:40:56,080 --> 01:41:03,790
exactly you know a small hoppy weekend

01:40:59,860 --> 01:41:05,230
project nASA uses twisted in something

01:41:03,790 --> 01:41:06,820
related to the Mars rover it doesn't

01:41:05,230 --> 01:41:12,580
actually run on the Mars rover

01:41:06,820 --> 01:41:17,170
unfortunately and Spotify so big sponsor

01:41:12,580 --> 01:41:19,000
here Spotify at least a year ago was

01:41:17,170 --> 01:41:20,950
essentially a large twisted app with

01:41:19,000 --> 01:41:24,790
some sea postbus into it for the slow

01:41:20,950 --> 01:41:28,990
parts so there there are very very

01:41:24,790 --> 01:41:31,390
serious people using twisted and I

01:41:28,990 --> 01:41:34,600
should say that the windows support of

01:41:31,390 --> 01:41:39,640
twisted is absolutely phenomenal I was

01:41:34,600 --> 01:41:42,850
running it on probably about forty

01:41:39,640 --> 01:41:44,920
thousand machines and I got to see every

01:41:42,850 --> 01:41:47,110
exception that was raised and there were

01:41:44,920 --> 01:41:49,690
very very very few and it was usually

01:41:47,110 --> 01:41:52,110
because the machine was crashing you

01:41:49,690 --> 01:41:54,130
know the windows support you know

01:41:52,110 --> 01:41:57,820
thousands of simultaneous connections

01:41:54,130 --> 01:42:00,970
actually processing data arm good

01:41:57,820 --> 01:42:04,030
support in running as a service the

01:42:00,970 --> 01:42:14,020
whole thing that previous job not Google

01:42:04,030 --> 01:42:17,410
I twisted his Barnett proof sorry yes so

01:42:14,020 --> 01:42:19,300
yes this is I believe it's possible that

01:42:17,410 --> 01:42:21,460
i did this during the during the break I

01:42:19,300 --> 01:42:23,710
don't remember but yeah the question was

01:42:21,460 --> 01:42:25,300
though so the question was one will

01:42:23,710 --> 01:42:30,130
Python round on Python 30 sorry one will

01:42:25,300 --> 01:42:31,840
twisted run on Python 3 so we currently

01:42:30,130 --> 01:42:35,590
have a google Summer of Code students

01:42:31,840 --> 01:42:39,970
whose job is essentially make it work on

01:42:35,590 --> 01:42:42,280
22 the C Python core dev has a fork of

01:42:39,970 --> 01:42:44,110
person where he apparently gets and like

01:42:42,280 --> 01:42:46,480
the fire large majority already works

01:42:44,110 --> 01:42:49,420
there are some parts that are very

01:42:46,480 --> 01:42:51,580
annoying primarily so twisted has a

01:42:49,420 --> 01:42:53,860
thing called twisted pine I'm not file

01:42:51,580 --> 01:42:56,350
path which is an abstraction over file

01:42:53,860 --> 01:42:59,560
paths because using strings is really

01:42:56,350 --> 01:43:03,280
really bad but then you run into the

01:42:59,560 --> 01:43:06,460
issue where on Python 3 Python insists

01:43:03,280 --> 01:43:08,110
that a file path is unicode now I you

01:43:06,460 --> 01:43:09,040
haven't a bunch of sticker I'm assuming

01:43:08,110 --> 01:43:12,310
that means that you're also running

01:43:09,040 --> 01:43:15,250
ubuntu your file paths all right unicode

01:43:12,310 --> 01:43:17,230
your file paths or bytes and so we have

01:43:15,250 --> 01:43:21,430
fairly extensive testing to prove that

01:43:17,230 --> 01:43:22,420
file path works on both windows and unix

01:43:21,430 --> 01:43:23,560
despite the fact that they have

01:43:22,420 --> 01:43:27,790
completely different semantics about

01:43:23,560 --> 01:43:30,940
what exactly a path is and making those

01:43:27,790 --> 01:43:33,220
work on python 3 is very hard because

01:43:30,940 --> 01:43:36,670
Python 3 the tools that you have in OS

01:43:33,220 --> 01:43:39,340
dot you know 20 s dot F be open for

01:43:36,670 --> 01:43:41,770
example or OS de path they don't

01:43:39,340 --> 01:43:44,500
arguably do the right thing so it's very

01:43:41,770 --> 01:43:46,240
hard to get that right that then there's

01:43:44,500 --> 01:43:48,700
some issues with trial that have been

01:43:46,240 --> 01:43:50,920
fixed now because unbound methods don't

01:43:48,700 --> 01:43:52,990
exist anymore in Python 3 there so

01:43:50,920 --> 01:43:57,160
there's tiny issues here and there and

01:43:52,990 --> 01:43:59,140
then the final issue is oh sorry the

01:43:57,160 --> 01:44:00,940
last two issues are old cell classes

01:43:59,140 --> 01:44:03,720
because some of these classes were

01:44:00,940 --> 01:44:06,640
literally written for palin 1.4 and

01:44:03,720 --> 01:44:11,020
finally things like ftp that are from

01:44:06,640 --> 01:44:14,200
the 70s and although like so python 3

01:44:11,020 --> 01:44:15,790
likes to be very very strict about what

01:44:14,200 --> 01:44:17,830
is bites and what is unicode which is

01:44:15,790 --> 01:44:19,120
fantastic except the problem is there

01:44:17,830 --> 01:44:21,430
are things that are not strict and

01:44:19,120 --> 01:44:23,050
sometimes when you get bites and you

01:44:21,430 --> 01:44:25,560
were dealing with a protocol like ftp

01:44:23,050 --> 01:44:29,040
that decides to spew the output

01:44:25,560 --> 01:44:31,770
some incantation of LS on bsd 4.4 onto

01:44:29,040 --> 01:44:33,270
the wire that spikes but you have to

01:44:31,770 --> 01:44:35,310
edit it and i don't know if you've ever

01:44:33,270 --> 01:44:37,350
used bytes to try and do string

01:44:35,310 --> 01:44:39,390
manipulation but it's not pretty so then

01:44:37,350 --> 01:44:41,610
you have to like encode it into latin

01:44:39,390 --> 01:44:43,410
one because that map's every that map's

01:44:41,610 --> 01:44:44,910
every byte sequence into a code points

01:44:43,410 --> 01:44:46,470
and then you have to do it on that and

01:44:44,910 --> 01:44:49,290
pretend it's Latin one and then decode

01:44:46,470 --> 01:44:52,080
it that game it's very very ugly and

01:44:49,290 --> 01:44:54,960
that takes a lot of work basically we're

01:44:52,080 --> 01:44:58,530
in the same position Django it's a very

01:44:54,960 --> 01:45:01,350
very large road map point there is no

01:44:58,530 --> 01:45:03,420
unlike jangle we're not saying the next

01:45:01,350 --> 01:45:07,980
release will have it there is very hard

01:45:03,420 --> 01:45:12,320
work being done by our G sock student a

01:45:07,980 --> 01:45:15,210
lot of kudos to her I believe it is and

01:45:12,320 --> 01:45:17,220
but it is certainly working progress big

01:45:15,210 --> 01:45:22,860
leaps are being made a lot of it already

01:45:17,220 --> 01:45:25,680
works so basic TCP works ssl works as

01:45:22,860 --> 01:45:29,280
well solve ish now yeah yeah ssl sort of

01:45:25,680 --> 01:45:30,390
works and the majority of like protocols

01:45:29,280 --> 01:45:31,560
because they're not the majority of

01:45:30,390 --> 01:45:35,130
simple protocols because you're not

01:45:31,560 --> 01:45:38,030
incredibly complicated work there are

01:45:35,130 --> 01:45:40,680
it's not officially supported yet but i

01:45:38,030 --> 01:45:41,910
am not going to name a date because then

01:45:40,680 --> 01:45:44,960
I'm afraid that it's going to I'm going

01:45:41,910 --> 01:45:49,970
to jinx it but i would say that in the

01:45:44,960 --> 01:45:52,560
near future probably before python 3.4

01:45:49,970 --> 01:45:54,330
but probably after 3.3 since three

01:45:52,560 --> 01:45:59,580
points being released late next week or

01:45:54,330 --> 01:46:00,990
something it will work that will

01:45:59,580 --> 01:46:03,650
probably only work with by three points

01:46:00,990 --> 01:46:06,180
free but yeah that's the price we pay

01:46:03,650 --> 01:46:07,830
mostly because we need the bytes in

01:46:06,180 --> 01:46:09,240
unicode the explicit bites and unico

01:46:07,830 --> 01:46:13,380
thing is we're probably going to move to

01:46:09,240 --> 01:46:16,080
a so previously the idea was that you

01:46:13,380 --> 01:46:17,760
would use a code base for two point x

01:46:16,080 --> 01:46:19,950
for existing project support them to

01:46:17,760 --> 01:46:22,620
three use a code boy code base for two

01:46:19,950 --> 01:46:26,040
point x and then use two to three to

01:46:22,620 --> 01:46:28,320
make it work on three that has fallen

01:46:26,040 --> 01:46:29,780
somewhat out of grace in favor of trying

01:46:28,320 --> 01:46:31,980
to make the code base work on both

01:46:29,780 --> 01:46:33,870
although that has obvious issues like

01:46:31,980 --> 01:46:37,590
for example dick items there's something

01:46:33,870 --> 01:46:39,700
else on three point X versus two point x

01:46:37,590 --> 01:46:43,180
but anyway that's that's the current

01:46:39,700 --> 01:46:44,920
plan now as far as I know and so it will

01:46:43,180 --> 01:46:47,200
only work on recent threes but by the

01:46:44,920 --> 01:46:49,240
time it launches nobody will all okay no

01:46:47,200 --> 01:46:51,790
red hat will be running 3.1 or something

01:46:49,240 --> 01:46:58,690
but nobody nobody will really be running

01:46:51,790 --> 01:47:00,610
3.2 anymore so yeah all right I think

01:46:58,690 --> 01:47:02,110
we're more or less done if you have any

01:47:00,610 --> 01:47:05,170
more questions then feel free to ask

01:47:02,110 --> 01:47:07,300
afterwards and thank you very much for

01:47:05,170 --> 01:47:17,470
being so patient with us and the good

01:47:07,300 --> 01:47:19,000
questions I've got our cards on me if

01:47:17,470 --> 01:47:32,620
anyone wants to get in touch with me

01:47:19,000 --> 01:47:35,050
after the conference so please pay

01:47:32,620 --> 01:47:38,710
attention because there were some other

01:47:35,050 --> 01:47:41,260
additions and moving around on told so

01:47:38,710 --> 01:47:43,090
just have a look at the schedule because

01:47:41,260 --> 01:47:45,700
there are some changes if you are

01:47:43,090 --> 01:47:48,420
interested in afternoon totes thank you

01:47:45,700 --> 01:47:48,420

YouTube URL: https://www.youtube.com/watch?v=VOUH4_ka2Ls


