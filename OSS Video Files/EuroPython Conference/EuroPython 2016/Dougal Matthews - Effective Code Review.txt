Title: Dougal Matthews - Effective Code Review
Publication date: 2016-07-29
Playlist: EuroPython 2016
Description: 
	Dougal Matthews - Effective Code Review
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(https://ep2016.europython.eu//conference/talks/effective-code-review)

Developers usually state that finding defects is the primary
motivation for doing code reviews. However, research has shown that
the main benefits of code reviews are; knowledge transfer, team
awareness and finding alternative solutions.

Code reviews when done well are more than just finding defects; it
should be a discussion and conversation with other developers about
finding the best solutions. We will talk about re-framing code review
to encourage open discussions.

-----

This talk is for everyone that is already involved in regular code
review and those hoping to start. I will talk through the code review
process with the aim of making it a better and more useful experience
for both the authors and the reviewers.

The talk will follow the following rough outline:

- Introduction
  - Why do code reviews
  - What are we aiming to get out of it
- Submitting code for review
  - How can you help reviewers?
  - What should you avoid doing?
  - Removing ownership of the code
- Reviewing code
  - How should you give feedback?
  - What should you look for?
  - How can you encourage people to review more?
  - How to avoid and remove bike-shedding
- Code review tools and how they impact on the process.
- Wrap up and conclusion
Captions: 
	00:00:00,000 --> 00:00:03,449
so our next speaker give a big round of

00:00:01,680 --> 00:00:13,549
applause for Dougal Matthews and

00:00:03,449 --> 00:00:15,509
effective code review okay so I've been

00:00:13,549 --> 00:00:17,340
well first of all thanks all for coming

00:00:15,509 --> 00:00:19,199
and for having me here I've been

00:00:17,340 --> 00:00:20,970
thinking about code reviews for quite

00:00:19,199 --> 00:00:23,609
some time now some quite sites or talked

00:00:20,970 --> 00:00:25,140
about it and yeah just our discussion

00:00:23,609 --> 00:00:26,369
about it that's kind of my my main goal

00:00:25,140 --> 00:00:28,199
from today is if people are talking

00:00:26,369 --> 00:00:32,219
about code review more then I've had

00:00:28,199 --> 00:00:33,960
some success and so first of all just to

00:00:32,219 --> 00:00:35,610
give you some context of where I come

00:00:33,960 --> 00:00:37,680
from I mean what I do isn't actually too

00:00:35,610 --> 00:00:38,910
important for this talk but it's useful

00:00:37,680 --> 00:00:41,219
to know where I am approaching

00:00:38,910 --> 00:00:43,020
enclosures roof on I work for Red Hat

00:00:41,219 --> 00:00:46,770
and then I'm working on the OpenStack

00:00:43,020 --> 00:00:48,180
project which is the big bottom logo and

00:00:46,770 --> 00:00:50,219
then I worked on triple o inside

00:00:48,180 --> 00:00:51,690
OpenStack and the key thing about all of

00:00:50,219 --> 00:00:53,129
these is everything I do is open source

00:00:51,690 --> 00:00:55,829
and public so all the code reviews I do

00:00:53,129 --> 00:00:56,940
are also public and open and so this

00:00:55,829 --> 00:00:58,829
means that some of the things I'm gonna

00:00:56,940 --> 00:01:00,270
say are specific to our consults I guess

00:00:58,829 --> 00:01:01,829
and maybe don't apply to a closed

00:01:00,270 --> 00:01:05,580
environment I think still a lot of the

00:01:01,829 --> 00:01:08,010
things do apply and I also run the -

00:01:05,580 --> 00:01:09,510
Glasgow user group in Scotland which is

00:01:08,010 --> 00:01:11,220
completely unrelated but I just like to

00:01:09,510 --> 00:01:13,170
show off are a cool logo whenever I can

00:01:11,220 --> 00:01:14,790
it's an inside joke which I can explain

00:01:13,170 --> 00:01:18,810
to anyone later if they don't understand

00:01:14,790 --> 00:01:20,670
it I'm also doing a bit of an experiment

00:01:18,810 --> 00:01:23,040
in this talk I have scheduled some

00:01:20,670 --> 00:01:24,509
tweets and that's my Twitter account the

00:01:23,040 --> 00:01:25,950
Owen Dougal is a zero

00:01:24,509 --> 00:01:28,320
they'll be tweeting out some relevant

00:01:25,950 --> 00:01:32,790
links to the talk if there isn't two out

00:01:28,320 --> 00:01:34,710
by now then it's not working if you're

00:01:32,790 --> 00:01:36,930
looking for references to any of the

00:01:34,710 --> 00:01:42,360
papers or all posts I reference make

00:01:36,930 --> 00:01:43,500
sure be shared on my Twitter first of

00:01:42,360 --> 00:01:45,960
all I just like to talk engage the

00:01:43,500 --> 00:01:47,159
audience a little bit and see where

00:01:45,960 --> 00:01:49,619
people are out with code review what

00:01:47,159 --> 00:01:51,090
you're doing and to get baseline how

00:01:49,619 --> 00:01:55,140
many of you will raise your hand if I

00:01:51,090 --> 00:01:56,790
asked you to raise your hand okay that's

00:01:55,140 --> 00:01:58,860
pretty good that son I guess was talking

00:01:56,790 --> 00:02:02,070
about 90% so anything can be adjusted to

00:01:58,860 --> 00:02:03,659
that from now on and who's doing regular

00:02:02,070 --> 00:02:05,610
code reviews at work and by this I mean

00:02:03,659 --> 00:02:08,610
as either the author or the reviewer or

00:02:05,610 --> 00:02:10,020
the changing okay that's a good

00:02:08,610 --> 00:02:12,360
percentage we're looking at about 75

00:02:10,020 --> 00:02:13,830
percent there maybe and who is doing

00:02:12,360 --> 00:02:16,200
them outside of work so maybe

00:02:13,830 --> 00:02:17,430
open source or and like a slight project

00:02:16,200 --> 00:02:19,260
something like that again there's also a

00:02:17,430 --> 00:02:21,030
review okay so that's a lot last time

00:02:19,260 --> 00:02:24,990
we're looking at a girl maybe 15 20

00:02:21,030 --> 00:02:29,760
percent finally who actually does code

00:02:24,990 --> 00:02:32,220
review that looks forward to doing okay

00:02:29,760 --> 00:02:34,710
so we pretty much have everyone doing

00:02:32,220 --> 00:02:36,030
some kind of code review but then the

00:02:34,710 --> 00:02:36,990
number of people actually so this is

00:02:36,030 --> 00:02:39,510
from benefit of the video I guess

00:02:36,990 --> 00:02:40,710
there's nothing else the people actually

00:02:39,510 --> 00:02:42,600
looking forward to the encode review is

00:02:40,710 --> 00:02:43,710
probably down to about 20 percent and

00:02:42,600 --> 00:02:46,290
this is the one that is the most

00:02:43,710 --> 00:02:47,640
interesting to me I find code review

00:02:46,290 --> 00:02:49,110
incredibly valuable there's so much you

00:02:47,640 --> 00:02:51,630
can get out of it there's a really

00:02:49,110 --> 00:02:53,130
useful process but yeah a lot of people

00:02:51,630 --> 00:02:54,330
don't really enjoy it so I'd like to

00:02:53,130 --> 00:02:55,470
start with discussion and see how we can

00:02:54,330 --> 00:02:58,140
improve that how we can make it a better

00:02:55,470 --> 00:03:00,150
experience for everyone I also done a

00:02:58,140 --> 00:03:02,610
straw poll on Twitter not too long ago

00:03:00,150 --> 00:03:04,170
and I found out that most people are

00:03:02,610 --> 00:03:04,830
doing code review sorry elavil people

00:03:04,170 --> 00:03:07,020
that responded

00:03:04,830 --> 00:03:08,459
everyone's doing code review up to 25

00:03:07,020 --> 00:03:09,900
percent or off to 50 percent of their

00:03:08,459 --> 00:03:11,940
day I think that's about that

00:03:09,900 --> 00:03:13,950
development time I mean that's a huge

00:03:11,940 --> 00:03:15,959
chunk of time and so if we can improve

00:03:13,950 --> 00:03:17,730
code review we can improve what we build

00:03:15,959 --> 00:03:19,290
or perhaps more importantly we can

00:03:17,730 --> 00:03:24,269
actually improve how people enjoy their

00:03:19,290 --> 00:03:26,010
jobs and for anyone that's not doing

00:03:24,269 --> 00:03:27,630
code review this talk is really more

00:03:26,010 --> 00:03:29,280
into what people that are but I just

00:03:27,630 --> 00:03:31,290
gonna quickly do a couple of quotes and

00:03:29,280 --> 00:03:32,489
things which if you need to persuade

00:03:31,290 --> 00:03:34,530
someone why you should be doing code

00:03:32,489 --> 00:03:36,390
review and all hope will be useful and

00:03:34,530 --> 00:03:38,400
will be some references to bad papers

00:03:36,390 --> 00:03:40,830
and blogs so there's just three very

00:03:38,400 --> 00:03:42,090
quick slides but as far as I'm concerned

00:03:40,830 --> 00:03:43,140
the only real reason to not be doing

00:03:42,090 --> 00:03:46,650
code review is if you're a sole

00:03:43,140 --> 00:03:48,120
developer on a project and you'll

00:03:46,650 --> 00:03:49,350
actually find the oh sorry there's a

00:03:48,120 --> 00:03:50,610
tricked I've used before if you're doing

00:03:49,350 --> 00:03:52,980
an open source projects and github

00:03:50,610 --> 00:03:54,690
rather than committing directly to

00:03:52,980 --> 00:03:55,650
master if you open a school request you

00:03:54,690 --> 00:03:57,090
might find occasionally some people

00:03:55,650 --> 00:03:58,739
wander by and do a review before you

00:03:57,090 --> 00:03:59,940
merge your code especially if you've got

00:03:58,739 --> 00:04:01,650
Watchers on your project because they

00:03:59,940 --> 00:04:05,220
get notifications when you do a pull

00:04:01,650 --> 00:04:07,500
request on your own repository and so

00:04:05,220 --> 00:04:09,720
first okay this is a quote from a pic

00:04:07,500 --> 00:04:13,170
sorry epic called code complete by Steve

00:04:09,720 --> 00:04:17,130
McConnell and he says that the average

00:04:13,170 --> 00:04:18,390
detection rates for unit test is 25% 35%

00:04:17,130 --> 00:04:20,790
for function tests

00:04:18,390 --> 00:04:22,530
45% for integration tests and in

00:04:20,790 --> 00:04:26,380
contrast the average effectiveness of

00:04:22,530 --> 00:04:29,300
design and code inspections is 55 and 60

00:04:26,380 --> 00:04:30,470
so in this is talking weight of defects

00:04:29,300 --> 00:04:33,590
is kind of bugs or problems with the

00:04:30,470 --> 00:04:34,760
code and it's basically flaming the code

00:04:33,590 --> 00:04:35,990
reviews the most effective that all

00:04:34,760 --> 00:04:38,060
these approaches to improve your

00:04:35,990 --> 00:04:39,380
software I'm not sure I completely buy

00:04:38,060 --> 00:04:40,550
these numbers but even if it was on par

00:04:39,380 --> 00:04:42,500
with your testing that's quite an

00:04:40,550 --> 00:04:47,750
impressive like a mile benefit that you

00:04:42,500 --> 00:04:49,580
can get next there's a quote by Jeff

00:04:47,750 --> 00:04:51,290
Atwood and so he he brought this in a

00:04:49,580 --> 00:04:52,970
blog post and basically said the only

00:04:51,290 --> 00:04:54,710
hurdle to doing code reviews finding a

00:04:52,970 --> 00:04:56,330
developer that you trust to actually do

00:04:54,710 --> 00:04:59,120
the code review and then once you've

00:04:56,330 --> 00:05:00,710
started he says I think you'll quickly

00:04:59,120 --> 00:05:03,040
find that every minute you spend in a

00:05:00,710 --> 00:05:05,330
code review is paid back tenfold and

00:05:03,040 --> 00:05:06,740
this this one really tackles the

00:05:05,330 --> 00:05:08,210
assumption a lot of people say they just

00:05:06,740 --> 00:05:09,740
don't have time to do code review and

00:05:08,210 --> 00:05:11,360
they really I think there'll be some

00:05:09,740 --> 00:05:12,260
upfront investment of course but once

00:05:11,360 --> 00:05:14,390
you actually start getting into the

00:05:12,260 --> 00:05:18,650
process of it you will find that you

00:05:14,390 --> 00:05:20,390
will reap the benefits over time and

00:05:18,650 --> 00:05:22,280
then finally from a paper measuring

00:05:20,390 --> 00:05:27,290
defect potentials and defect removal

00:05:22,280 --> 00:05:29,450
efficiency they found the formal design

00:05:27,290 --> 00:05:30,830
and code installations often top 85%

00:05:29,450 --> 00:05:33,169
defect removal and averaging around

00:05:30,830 --> 00:05:35,150
fifty five percent so again this is what

00:05:33,169 --> 00:05:36,530
a huge number and this is quite good so

00:05:35,150 --> 00:05:38,000
this is from an actual an academic paper

00:05:36,530 --> 00:05:38,990
and they share some of the dates for you

00:05:38,000 --> 00:05:40,850
so there's actually quite a lot of

00:05:38,990 --> 00:05:42,770
method behind these numbers the other

00:05:40,850 --> 00:05:47,419
two or more anecdotal as far as I could

00:05:42,770 --> 00:05:49,070
tell so with that side hopefully you're

00:05:47,419 --> 00:05:51,080
all convinced now to do code review or

00:05:49,070 --> 00:05:53,300
as most of you are doing it anyway we

00:05:51,080 --> 00:05:54,620
can move on but if anyone is actually

00:05:53,300 --> 00:05:56,210
still doubting the process for some

00:05:54,620 --> 00:05:57,620
reason I can bombard you with references

00:05:56,210 --> 00:06:02,330
and links so just come and ask me

00:05:57,620 --> 00:06:03,350
afterwards one thing - so one of the

00:06:02,330 --> 00:06:04,940
things about code review that's quite

00:06:03,350 --> 00:06:06,800
interesting is trying to compare the

00:06:04,940 --> 00:06:09,020
expectations people have with the

00:06:06,800 --> 00:06:11,180
outcome of the actual code review and I

00:06:09,020 --> 00:06:12,860
think this is it's reinforced slightly

00:06:11,180 --> 00:06:14,390
by these quotes you'll notice two of

00:06:12,860 --> 00:06:16,460
them we're talking about finding defects

00:06:14,390 --> 00:06:17,600
and bugs and I think the reason they're

00:06:16,460 --> 00:06:19,010
talking about that is it's much easier

00:06:17,600 --> 00:06:20,150
to measure bugs than other things but

00:06:19,010 --> 00:06:21,740
there's actually a lot of other subtle

00:06:20,150 --> 00:06:23,750
side effects and outcomes from code

00:06:21,740 --> 00:06:27,620
review rather than just think of it as a

00:06:23,750 --> 00:06:29,720
bottom in the paper

00:06:27,620 --> 00:06:32,630
expectations outcomes and challenges of

00:06:29,720 --> 00:06:33,860
modern code review they said while

00:06:32,630 --> 00:06:37,630
finding defects remains the main

00:06:33,860 --> 00:06:39,860
motivation make the main motivation for

00:06:37,630 --> 00:06:41,510
reviews are far less about defects than

00:06:39,860 --> 00:06:43,820
expected and provide additional benefits

00:06:41,510 --> 00:06:45,320
such as knowledge transfer increased

00:06:43,820 --> 00:06:48,740
team awareness and creation of

00:06:45,320 --> 00:06:50,210
alternative switches to problems so what

00:06:48,740 --> 00:06:52,460
they actually done in this is this is

00:06:50,210 --> 00:06:55,040
research was done in partnership with

00:06:52,460 --> 00:06:57,620
Microsoft Research on my team's research

00:06:55,040 --> 00:06:58,580
on the shelf though they they took some

00:06:57,620 --> 00:07:00,500
teams at Microsoft

00:06:58,580 --> 00:07:02,770
they quiz the developers beforehand and

00:07:00,500 --> 00:07:04,760
sorry questionnaire rather than the quiz

00:07:02,770 --> 00:07:06,380
so they were asking them why they're

00:07:04,760 --> 00:07:09,320
doing code review what they're expecting

00:07:06,380 --> 00:07:11,300
to get out of it and the the top result

00:07:09,320 --> 00:07:12,620
was finding defects in codes that was

00:07:11,300 --> 00:07:15,380
they busted them said that's why we are

00:07:12,620 --> 00:07:19,970
doing code review actually when you

00:07:15,380 --> 00:07:23,210
looked at the sorry and then after the

00:07:19,970 --> 00:07:25,690
code reviews had happened the the

00:07:23,210 --> 00:07:28,490
research team then manually classified

00:07:25,690 --> 00:07:30,050
hundreds of reviews to manually find out

00:07:28,490 --> 00:07:33,560
what they thought was the outcome of the

00:07:30,050 --> 00:07:36,920
review and this is the the results that

00:07:33,560 --> 00:07:38,570
they had that they found the defects was

00:07:36,920 --> 00:07:40,640
only 14 percent of the time so that only

00:07:38,570 --> 00:07:43,490
came in fourth in terms of the actual

00:07:40,640 --> 00:07:45,200
outcome of reviews and so it's actually

00:07:43,490 --> 00:07:48,020
a lot more lower down lling you would've

00:07:45,200 --> 00:07:49,810
perhaps expected I only call out two of

00:07:48,020 --> 00:07:52,010
the numbers because the the paper had a

00:07:49,810 --> 00:07:53,360
graph in it and they didn't actually it

00:07:52,010 --> 00:07:54,680
was quite hard to see the numbers delays

00:07:53,360 --> 00:07:58,940
for some we mentioned those two numbers

00:07:54,680 --> 00:08:15,950
so that's why I only have them so yeah

00:07:58,940 --> 00:08:21,290
you can see improvements and elegant

00:08:15,950 --> 00:08:22,700
weight functions then understanding was

00:08:21,290 --> 00:08:25,090
a shared understanding in your team

00:08:22,700 --> 00:08:27,440
about what is going on with the codebase

00:08:25,090 --> 00:08:28,880
so if you're not actually reviewing

00:08:27,440 --> 00:08:30,860
changes are coming in the only way you

00:08:28,880 --> 00:08:32,600
really find out what's going in going on

00:08:30,860 --> 00:08:33,890
sorry is by looking at your git history

00:08:32,600 --> 00:08:35,870
which they don't think it's particularly

00:08:33,890 --> 00:08:36,860
fun or you just start trying to use

00:08:35,870 --> 00:08:39,830
something in you're like oh this

00:08:36,860 --> 00:08:41,450
functions change that's kind of annoying

00:08:39,830 --> 00:08:42,349
so yeah it's just about making sure

00:08:41,450 --> 00:08:43,700
there's a shared understanding and

00:08:42,349 --> 00:08:45,580
everyone really knows how the project is

00:08:43,700 --> 00:08:47,930
developing and evolving over time and

00:08:45,580 --> 00:08:49,370
then they all even found it so social

00:08:47,930 --> 00:08:50,959
communications which is obviously a very

00:08:49,370 --> 00:08:58,060
important thing in any team or community

00:08:50,959 --> 00:09:01,459
was also rated higher than defects so

00:08:58,060 --> 00:09:04,519
with these sub goals in mind about it

00:09:01,459 --> 00:09:06,019
was thinking about rather than thinking

00:09:04,519 --> 00:09:07,070
about I'm looking for a bug hunt and

00:09:06,019 --> 00:09:08,360
code reviews we've got to think about

00:09:07,070 --> 00:09:09,380
how we can maximize all these other

00:09:08,360 --> 00:09:10,880
benefits as well

00:09:09,380 --> 00:09:12,529
I mean obviously finding defects is

00:09:10,880 --> 00:09:13,610
still an important part of it but we

00:09:12,529 --> 00:09:15,140
shouldn't really focus on that because

00:09:13,610 --> 00:09:17,870
it's doesn't seem to be the main actual

00:09:15,140 --> 00:09:29,149
outcome but in code review we definitely

00:09:17,870 --> 00:09:30,950
have two distinct roles and if I go back

00:09:29,149 --> 00:09:32,300
to why a lot of people seem to have a

00:09:30,950 --> 00:09:33,920
negative view of code review I think

00:09:32,300 --> 00:09:35,720
it's often because the the actual code

00:09:33,920 --> 00:09:37,790
review process comes along is almost an

00:09:35,720 --> 00:09:39,980
adversarial like you're working against

00:09:37,790 --> 00:09:41,360
each other rather than together and like

00:09:39,980 --> 00:09:42,560
you you want to get your card merge then

00:09:41,360 --> 00:09:47,149
this person is just giving in your way

00:09:42,560 --> 00:09:48,560
by giving you like feedback and I mean

00:09:47,149 --> 00:09:49,730
it's it's kind of a tricky problem to

00:09:48,560 --> 00:09:51,440
solve this I'm not really sure why it

00:09:49,730 --> 00:09:52,910
happens I think is it's definitely more

00:09:51,440 --> 00:09:54,350
prevalent in some situations than others

00:09:52,910 --> 00:09:55,670
and people they tend to be more

00:09:54,350 --> 00:09:57,110
experienced recorded view are quite open

00:09:55,670 --> 00:09:59,000
to the feedback and it works a lot

00:09:57,110 --> 00:10:01,640
better but I think one of the reasons we

00:09:59,000 --> 00:10:03,079
maybe see this is I don't like the name

00:10:01,640 --> 00:10:05,540
for it I don't like code review username

00:10:03,079 --> 00:10:07,329
I don't really think we'll manage to

00:10:05,540 --> 00:10:09,980
change it because that ship has sailed

00:10:07,329 --> 00:10:11,810
and but I at least in my head I like to

00:10:09,980 --> 00:10:14,089
think of it more as a code discussion or

00:10:11,810 --> 00:10:15,740
code collaboration just like thinking

00:10:14,089 --> 00:10:17,360
more about how we can work together as a

00:10:15,740 --> 00:10:20,920
team and it becomes an iterative process

00:10:17,360 --> 00:10:20,920
that you're both involved in

00:10:23,510 --> 00:10:26,610
yeah so it's just really about

00:10:25,380 --> 00:10:28,010
collaboration and come here with a

00:10:26,610 --> 00:10:29,880
better solution together you both

00:10:28,010 --> 00:10:32,100
essentially have the same goals in the

00:10:29,880 --> 00:10:33,450
one time although it can sometimes seem

00:10:32,100 --> 00:10:34,470
a bit of a conflict at the time when

00:10:33,450 --> 00:10:38,030
you're trying to figure out what they

00:10:34,470 --> 00:10:38,030
the best solution is to reach that goal

00:10:38,510 --> 00:10:42,870
and so what I'll do now is I'm just

00:10:41,370 --> 00:10:44,370
going to take a look at authoring

00:10:42,870 --> 00:10:45,900
changes and then we'll go to looking at

00:10:44,370 --> 00:10:48,330
reviewing changes after and justice over

00:10:45,900 --> 00:10:51,240
a few bits of unsolicited advice I

00:10:48,330 --> 00:10:52,470
suppose from either side and you can you

00:10:51,240 --> 00:10:56,340
can pick and choose which you think

00:10:52,470 --> 00:10:59,010
useful and this first one I think is

00:10:56,340 --> 00:11:00,270
really it's really important and perhaps

00:10:59,010 --> 00:11:01,470
overlooked because you might think that

00:11:00,270 --> 00:11:04,080
this comes before the code review

00:11:01,470 --> 00:11:05,400
process which it does really it's always

00:11:04,080 --> 00:11:06,810
important especially in open source

00:11:05,400 --> 00:11:09,300
projects to talk about what you want to

00:11:06,810 --> 00:11:10,740
do first and if you if you don't have an

00:11:09,300 --> 00:11:12,210
issue or something describing what your

00:11:10,740 --> 00:11:13,350
goals are and you've not disgusted with

00:11:12,210 --> 00:11:15,210
the maintainer and you don't really know

00:11:13,350 --> 00:11:18,150
if it's even applicable or relevant to

00:11:15,210 --> 00:11:20,400
this project obviously this is something

00:11:18,150 --> 00:11:22,580
that you can judge yourself if it's a

00:11:20,400 --> 00:11:25,560
typo that's a no-brainer you should just

00:11:22,580 --> 00:11:26,850
send over a full request or sometimes

00:11:25,560 --> 00:11:28,770
you might find that you can express what

00:11:26,850 --> 00:11:30,690
you want to describe in code better but

00:11:28,770 --> 00:11:32,190
you just have to be prepared to the your

00:11:30,690 --> 00:11:34,500
pull request or your code review might

00:11:32,190 --> 00:11:36,000
be rejected just because you haven't

00:11:34,500 --> 00:11:38,280
actually made sure everyone's on the

00:11:36,000 --> 00:11:40,650
same page and I think it's also

00:11:38,280 --> 00:11:42,030
important in the sub I mean in a work

00:11:40,650 --> 00:11:43,560
environment you expect to have for like

00:11:42,030 --> 00:11:45,330
a requirement description or something

00:11:43,560 --> 00:11:46,710
before you start working on the code so

00:11:45,330 --> 00:11:52,050
just making sure you know what you're

00:11:46,710 --> 00:11:53,370
doing before you watch it it's it's

00:11:52,050 --> 00:11:54,960
always good to adhere to the project

00:11:53,370 --> 00:11:56,160
guidelines this is pretty obvious but a

00:11:54,960 --> 00:11:58,140
lot of people don't actually tend to

00:11:56,160 --> 00:11:59,580
look for them this is also perhaps a

00:11:58,140 --> 00:12:00,810
problem with the projects but I love

00:11:59,580 --> 00:12:03,060
them either don't have them or they make

00:12:00,810 --> 00:12:04,620
them too hard to find but you can always

00:12:03,060 --> 00:12:06,270
take a look at see how the project is

00:12:04,620 --> 00:12:07,980
working in general look at other reviews

00:12:06,270 --> 00:12:09,780
which are waiting or commits that be

00:12:07,980 --> 00:12:11,220
merged just try and fit in with how

00:12:09,780 --> 00:12:13,110
they're working and it makes the process

00:12:11,220 --> 00:12:14,850
a lot better so if they've they've got

00:12:13,110 --> 00:12:16,170
good they're always like adding tests

00:12:14,850 --> 00:12:17,040
and documentation with everything and

00:12:16,170 --> 00:12:18,990
they're testing on different platforms

00:12:17,040 --> 00:12:20,670
then there's always good to make sure

00:12:18,990 --> 00:12:24,020
you're you're doing the same in fitting

00:12:20,670 --> 00:12:24,020
in with their development staff

00:12:24,750 --> 00:12:29,470
providing context is really important

00:12:27,250 --> 00:12:30,220
with you to me or with your change sorry

00:12:29,470 --> 00:12:33,520
for review

00:12:30,220 --> 00:12:35,470
I find the reviewing code can be really

00:12:33,520 --> 00:12:37,060
quite difficult often you will and

00:12:35,470 --> 00:12:38,620
you'll get you'll receive a tip for a

00:12:37,060 --> 00:12:40,210
project that you can be a lot looked for

00:12:38,620 --> 00:12:41,710
a few months so you need to like bring

00:12:40,210 --> 00:12:43,180
back the mental context of what the

00:12:41,710 --> 00:12:44,920
project was doing before and then figure

00:12:43,180 --> 00:12:46,840
out from this diff what they are trying

00:12:44,920 --> 00:12:47,830
to do now and just try to give that all

00:12:46,840 --> 00:12:50,410
together in your head it can be really

00:12:47,830 --> 00:12:53,260
quite tricky so you can get around this

00:12:50,410 --> 00:12:55,420
by writing good community is good for

00:12:53,260 --> 00:12:57,160
request descriptions just why you making

00:12:55,420 --> 00:12:59,260
the change what do they want what does

00:12:57,160 --> 00:13:01,930
it do just won't be as descriptive if

00:12:59,260 --> 00:13:03,100
you can and and help them out and if

00:13:01,930 --> 00:13:07,320
you're missing the context from this

00:13:03,100 --> 00:13:07,320
image by the way it's a acoustic guitar

00:13:10,650 --> 00:13:14,980
and this is sort of related to the

00:13:13,810 --> 00:13:16,300
previous slide in the way keeping your

00:13:14,980 --> 00:13:18,940
changes small and contained this is

00:13:16,300 --> 00:13:20,140
about limiting the context required so

00:13:18,940 --> 00:13:21,850
you don't want somebody to have to

00:13:20,140 --> 00:13:23,320
understand the full breadth of a project

00:13:21,850 --> 00:13:26,350
to necessarily review something you want

00:13:23,320 --> 00:13:27,970
to be doing a small change I'm keeping

00:13:26,350 --> 00:13:31,240
your change focus to what the actual

00:13:27,970 --> 00:13:32,500
topic is some people like to do like the

00:13:31,240 --> 00:13:34,120
two line fix in the file then they'll

00:13:32,500 --> 00:13:35,860
spend then they'll send you over a

00:13:34,120 --> 00:13:37,360
thousand line difficulty went around

00:13:35,860 --> 00:13:39,340
moving things around so freaking they're

00:13:37,360 --> 00:13:40,690
tidying them up and that may be

00:13:39,340 --> 00:13:43,380
perfectly acceptable but it's better to

00:13:40,690 --> 00:13:48,610
actually submit these into different

00:13:43,380 --> 00:13:50,230
reviews request and this tweet I seen a

00:13:48,610 --> 00:13:52,240
while ago and I when I was preparing

00:13:50,230 --> 00:13:53,920
this talk and I just noted it down it's

00:13:52,240 --> 00:13:56,500
basically saying code review ten lines

00:13:53,920 --> 00:13:59,050
of code nine issues 500 lines of code

00:13:56,500 --> 00:14:01,390
looks fine and for this is basically I

00:13:59,050 --> 00:14:02,590
mean the some developers might look at

00:14:01,390 --> 00:14:04,120
this and think okay I'll send a picket

00:14:02,590 --> 00:14:06,910
for grass that sounds like an easy way

00:14:04,120 --> 00:14:08,020
to get my code works that's definitely

00:14:06,910 --> 00:14:09,460
not the right way to think about it and

00:14:08,020 --> 00:14:11,020
I think the reason you get more feedback

00:14:09,460 --> 00:14:12,670
on a smaller change is basically it's

00:14:11,020 --> 00:14:14,230
much easier for the reviewer to get that

00:14:12,670 --> 00:14:16,780
change into their head and just really

00:14:14,230 --> 00:14:17,920
get a brain wrapped around it whereas if

00:14:16,780 --> 00:14:20,560
you're trying to understand how much the

00:14:17,920 --> 00:14:22,000
larger change you end up missing things

00:14:20,560 --> 00:14:24,700
because you're focused so much on the

00:14:22,000 --> 00:14:28,320
overall impact of it lots of subtle

00:14:24,700 --> 00:14:30,910
subtleties will be missed otherwise and

00:14:28,320 --> 00:14:32,470
this has always been kind of a I got

00:14:30,910 --> 00:14:34,240
instancing for me the easier

00:14:32,470 --> 00:14:34,810
sorry smaller patches were easier or

00:14:34,240 --> 00:14:38,980
more efficient

00:14:34,810 --> 00:14:40,390
to to review but there's actually quite

00:14:38,980 --> 00:14:42,730
an interesting paper this one is the

00:14:40,390 --> 00:14:46,360
investigating code review quality do

00:14:42,730 --> 00:14:48,490
people and participation matter lady and

00:14:46,360 --> 00:14:50,140
they found it larger patches lead to a

00:14:48,490 --> 00:14:52,570
higher likelihood of reviewers missing

00:14:50,140 --> 00:14:53,620
some bugs so it's great as I said I

00:14:52,570 --> 00:14:56,560
think this is a fairly like

00:14:53,620 --> 00:14:57,820
self-explanatory and obviously one it's

00:14:56,560 --> 00:14:59,080
good to see this is backed up with data

00:14:57,820 --> 00:15:01,390
because they they spent some time

00:14:59,080 --> 00:15:04,600
looking into the public Mozilla fog

00:15:01,390 --> 00:15:09,910
tracker and they never stood together

00:15:04,600 --> 00:15:11,200
with the bugzilla yeah remembers early

00:15:09,910 --> 00:15:12,910
use for bugs but with their bug tracker

00:15:11,200 --> 00:15:14,500
and their reviews and they combined it

00:15:12,910 --> 00:15:16,600
to to them so find the trends of the

00:15:14,500 --> 00:15:20,290
bigger patches were really introducing

00:15:16,600 --> 00:15:21,910
more bugs and so on so yeah smaller

00:15:20,290 --> 00:15:26,440
discs are good touching West files are

00:15:21,910 --> 00:15:28,180
good when you actually submit your

00:15:26,440 --> 00:15:29,680
review I think it's good to think about

00:15:28,180 --> 00:15:32,950
that as being the start of the

00:15:29,680 --> 00:15:34,810
conversation you'll find the some people

00:15:32,950 --> 00:15:36,160
will submit review and they'll so

00:15:34,810 --> 00:15:37,960
they'll wash their hands of it they'll

00:15:36,160 --> 00:15:39,490
say that they've done so they'll send it

00:15:37,960 --> 00:15:41,320
over and they say okay can you merge

00:15:39,490 --> 00:15:42,640
this place and merge this I'm done

00:15:41,320 --> 00:15:44,290
and now just really shuts down the

00:15:42,640 --> 00:15:45,580
conversation it's much better to send

00:15:44,290 --> 00:15:46,839
over the code and say hey can you have a

00:15:45,580 --> 00:15:48,670
look at this and tell me what you think

00:15:46,839 --> 00:15:51,690
you're basically inviting feedback in

00:15:48,670 --> 00:15:55,420
making that feedback loops much clearer

00:15:51,690 --> 00:15:56,560
I've had I've had plenty of pull

00:15:55,420 --> 00:15:59,230
requests and things where people are

00:15:56,560 --> 00:16:00,490
just do not want the feedback at all and

00:15:59,230 --> 00:16:02,290
it just breaks the whole process and I

00:16:00,490 --> 00:16:04,030
just eventually you just find these

00:16:02,290 --> 00:16:07,870
stalls and things don't really progress

00:16:04,030 --> 00:16:09,100
from there and one one handy trick I

00:16:07,870 --> 00:16:10,990
find when you so when you're opening

00:16:09,100 --> 00:16:12,370
this pull request it's actually or I'm

00:16:10,990 --> 00:16:15,780
going to keep saying pull requests but I

00:16:12,370 --> 00:16:15,780
just mean code review in general I'm not

00:16:15,900 --> 00:16:20,709
yeah when you're when you open this

00:16:17,920 --> 00:16:21,790
request for a review I quite often like

00:16:20,709 --> 00:16:23,800
to go and actually do a quick review

00:16:21,790 --> 00:16:25,990
myself so I'll go and scan on github or

00:16:23,800 --> 00:16:27,700
on Garrett and I find that I often find

00:16:25,990 --> 00:16:29,320
mistakes in my own patch at that point

00:16:27,700 --> 00:16:31,390
I'm not sure why I think maybe it's the

00:16:29,320 --> 00:16:32,980
the change context from an editor to the

00:16:31,390 --> 00:16:35,050
code review tool it fits me in the right

00:16:32,980 --> 00:16:38,100
mindset and so that's just a small tip

00:16:35,050 --> 00:16:38,100
which I I recommend doing

00:16:38,120 --> 00:16:43,770
and so when you actually your changes up

00:16:42,090 --> 00:16:46,290
you really need to try and relinquish

00:16:43,770 --> 00:16:50,250
ownership so this tweet was a response

00:16:46,290 --> 00:16:51,600
to the Twitter poll by Ryan about how

00:16:50,250 --> 00:16:53,820
much time do you spend in code review

00:16:51,600 --> 00:16:56,340
and to me this is just a sign of a

00:16:53,820 --> 00:17:00,540
really toxic culture I'm not sure if

00:16:56,340 --> 00:17:02,610
it's the fault of the reviewers or the

00:17:00,540 --> 00:17:04,620
authors in this change or in this case

00:17:02,610 --> 00:17:08,880
sorry or both it's kind of hard to tell

00:17:04,620 --> 00:17:10,830
without more context but it's just as

00:17:08,880 --> 00:17:11,940
the the author of a change it's really

00:17:10,830 --> 00:17:13,530
important to just try and think

00:17:11,940 --> 00:17:15,390
analytically and subjectively about your

00:17:13,530 --> 00:17:16,320
change when you put it up and I think

00:17:15,390 --> 00:17:18,030
this can be quite difficult people

00:17:16,320 --> 00:17:19,530
sometimes you you feel quite protective

00:17:18,030 --> 00:17:21,420
of it you're quite proud of it you get

00:17:19,530 --> 00:17:23,100
kind of tied up with the AE my code

00:17:21,420 --> 00:17:24,810
works and then when somebody then starts

00:17:23,100 --> 00:17:28,590
to give you feedback on it it can feel

00:17:24,810 --> 00:17:29,910
quite the way I like to think about is

00:17:28,590 --> 00:17:32,010
if you've looked at your code from six

00:17:29,910 --> 00:17:33,540
months ago you probably find it terrific

00:17:32,010 --> 00:17:34,980
so just try and think about the code

00:17:33,540 --> 00:17:41,120
you're writing today like you you will

00:17:34,980 --> 00:17:44,250
in six months and so really I think

00:17:41,120 --> 00:17:46,350
reviewing code is pretty difficult so

00:17:44,250 --> 00:17:48,300
the whole thing is about trying to make

00:17:46,350 --> 00:17:50,550
it easier for the reviewers to review

00:17:48,300 --> 00:17:51,960
your code and give you feedback just try

00:17:50,550 --> 00:17:56,970
and make the whole process talk or

00:17:51,960 --> 00:17:58,260
better help them to help you and then

00:17:56,970 --> 00:18:00,720
when we look at it from the the

00:17:58,260 --> 00:18:03,420
reviewers point of view they're kind of

00:18:00,720 --> 00:18:06,510
like the gatekeepers for this project at

00:18:03,420 --> 00:18:09,360
least for coming in so they have

00:18:06,510 --> 00:18:11,160
responsibility to make sure that the

00:18:09,360 --> 00:18:13,760
code coming in is good and suitable for

00:18:11,160 --> 00:18:13,760
the project

00:18:17,260 --> 00:18:21,590
this is just like the the authors have

00:18:19,970 --> 00:18:23,090
the same responsibility to try and make

00:18:21,590 --> 00:18:25,309
the the best conclusions they can for

00:18:23,090 --> 00:18:26,390
the projects and that the key thing

00:18:25,309 --> 00:18:29,360
really is it you want to make sure

00:18:26,390 --> 00:18:31,580
you're sharing the responsibility I I

00:18:29,360 --> 00:18:33,980
personally see the reviewers of sorry

00:18:31,580 --> 00:18:35,990
the reviewer of a code or reviewers as

00:18:33,980 --> 00:18:38,330
being responsible for the change as the

00:18:35,990 --> 00:18:41,200
author is and I think this is where some

00:18:38,330 --> 00:18:43,160
tools like get blame or a bit

00:18:41,200 --> 00:18:45,169
because that will quite often just get

00:18:43,160 --> 00:18:46,549
you the author of the change depending

00:18:45,169 --> 00:18:49,280
on how they code is actually merged and

00:18:46,549 --> 00:18:50,840
submitted eventually whereas it would be

00:18:49,280 --> 00:18:52,220
interesting if we could have a better

00:18:50,840 --> 00:18:53,690
way of integrating with code review

00:18:52,220 --> 00:18:55,580
tools and you get blame or you'd like

00:18:53,690 --> 00:18:56,750
okay these three people are behind this

00:18:55,580 --> 00:19:00,679
change or these two people are behind

00:18:56,750 --> 00:19:04,730
this change but the expected to share

00:19:00,679 --> 00:19:08,240
the responsibility they through this one

00:19:04,730 --> 00:19:10,669
is definitely for Arkansas retailers so

00:19:08,240 --> 00:19:11,809
the the title here is in reference to a

00:19:10,669 --> 00:19:12,590
quote which I don't know where it came

00:19:11,809 --> 00:19:15,590
from originally

00:19:12,590 --> 00:19:20,270
but cope says something like code

00:19:15,590 --> 00:19:22,990
reviews sorry the quote says something

00:19:20,270 --> 00:19:25,730
like contributions are like puppies

00:19:22,990 --> 00:19:26,960
everyone likes puppies but you need to

00:19:25,730 --> 00:19:27,950
look after them you need to walk them

00:19:26,960 --> 00:19:29,809
and you need to feed them

00:19:27,950 --> 00:19:31,309
similarly with code when you are given

00:19:29,809 --> 00:19:32,480
it you need to make sure it's not you

00:19:31,309 --> 00:19:33,679
make this unique make sure it's testing

00:19:32,480 --> 00:19:38,840
and you need to make sure it works for

00:19:33,679 --> 00:19:40,580
ever and so as a reviewer or a project

00:19:38,840 --> 00:19:43,190
maintainer you should really feel like

00:19:40,580 --> 00:19:45,770
you can quite happily say reject to

00:19:43,190 --> 00:19:47,299
change just to say no sorry I can't

00:19:45,770 --> 00:19:51,490
maintain this I don't have the bandwidth

00:19:47,299 --> 00:19:53,360
to maintain this and there was a case

00:19:51,490 --> 00:19:55,039
when I was working on

00:19:53,360 --> 00:19:57,380
so I one of the projects I maintain is M

00:19:55,039 --> 00:20:00,080
K Docs and I had a full request for that

00:19:57,380 --> 00:20:02,570
and the change came in it looked

00:20:00,080 --> 00:20:04,070
reasonable it wasn't very big by said to

00:20:02,570 --> 00:20:05,470
off there sorry I don't think this fits

00:20:04,070 --> 00:20:07,340
in the project at this time and he

00:20:05,470 --> 00:20:10,490
responds with something wrong lines of

00:20:07,340 --> 00:20:11,960
all I must need to do is just magic and

00:20:10,490 --> 00:20:14,150
I said no actually you're asking me to

00:20:11,960 --> 00:20:15,950
make sure this is something that works

00:20:14,150 --> 00:20:17,210
until we're able to remove it from the

00:20:15,950 --> 00:20:18,799
project and that can be quite difficult

00:20:17,210 --> 00:20:19,539
in open source projects but you never

00:20:18,799 --> 00:20:25,809
really know

00:20:19,539 --> 00:20:28,779
people are using it's really important

00:20:25,809 --> 00:20:30,850
that everyone reviews I think it can be

00:20:28,779 --> 00:20:33,549
sometimes people would assume that I'd

00:20:30,850 --> 00:20:35,080
better for just the seniors to review in

00:20:33,549 --> 00:20:36,940
a project and then the juniors are just

00:20:35,080 --> 00:20:38,830
writing the code maybe you feel like

00:20:36,940 --> 00:20:41,769
they can't be held responsible for the

00:20:38,830 --> 00:20:43,779
reviews and this is actually technically

00:20:41,769 --> 00:20:45,549
true there was a paper and I have lost

00:20:43,779 --> 00:20:48,460
the reference I have a paper copy home I

00:20:45,549 --> 00:20:50,259
couldn't find online and basically they

00:20:48,460 --> 00:20:51,609
found out while the senior reviewers

00:20:50,259 --> 00:20:53,859
were doing a better job at finding

00:20:51,609 --> 00:20:55,690
defects and giving feedback the best way

00:20:53,859 --> 00:20:58,330
for juniors to actually level up and

00:20:55,690 --> 00:21:01,090
become more useful and become seniors

00:20:58,330 --> 00:21:03,340
essentially what to do code review so

00:21:01,090 --> 00:21:04,299
you need everyone to do it and you've

00:21:03,340 --> 00:21:05,710
also had to remember there's a whole

00:21:04,299 --> 00:21:07,179
other benefits coming on so there's a

00:21:05,710 --> 00:21:17,739
share understanding and know what's

00:21:07,179 --> 00:21:19,149
going on and the other thing about if

00:21:17,739 --> 00:21:20,649
you ever have a split in between who

00:21:19,149 --> 00:21:22,570
reviews and who doesn't you can find

00:21:20,649 --> 00:21:24,249
that can create the divide between the

00:21:22,570 --> 00:21:26,519
two the two sides and this it can become

00:21:24,249 --> 00:21:28,359
more of a competition against each other

00:21:26,519 --> 00:21:31,359
so just make sure everyone is included

00:21:28,359 --> 00:21:32,859
in the process and so one of the ways

00:21:31,359 --> 00:21:34,809
you can join in more with an open-source

00:21:32,859 --> 00:21:37,619
project and you can review if you're

00:21:34,809 --> 00:21:39,820
then also submitting changes and

00:21:37,619 --> 00:21:41,769
maintenance will absolutely love you if

00:21:39,820 --> 00:21:43,779
you just review a few other open for

00:21:41,769 --> 00:21:48,820
requests or patches whenever you submit

00:21:43,779 --> 00:21:50,499
change so with everyone reviewing it's

00:21:48,820 --> 00:21:51,999
really important to keep them all on the

00:21:50,499 --> 00:21:54,639
same page it can be a very frustrating

00:21:51,999 --> 00:21:56,649
process for a contributor if you've

00:21:54,639 --> 00:21:58,450
submitted you get one review and then

00:21:56,649 --> 00:22:00,129
you update it then you get another

00:21:58,450 --> 00:22:01,239
review from someone else and maybe it

00:22:00,129 --> 00:22:02,580
takes you back to where you aren't

00:22:01,239 --> 00:22:04,570
originally amateurs

00:22:02,580 --> 00:22:05,739
so just really trying to make sure

00:22:04,570 --> 00:22:08,590
you've got a shared understanding of

00:22:05,739 --> 00:22:11,080
what is expected from your countries you

00:22:08,590 --> 00:22:12,879
can do you can make this clearer with

00:22:11,080 --> 00:22:14,409
review guidelines you can also have

00:22:12,879 --> 00:22:16,389
things like review checklists that your

00:22:14,409 --> 00:22:19,269
reviewers are all using and following as

00:22:16,389 --> 00:22:20,409
a guide so but you've got to be careful

00:22:19,269 --> 00:22:22,029
with checklist because you really to

00:22:20,409 --> 00:22:25,779
make sure that you avoid anything that

00:22:22,029 --> 00:22:27,249
can be automated there are a number of

00:22:25,779 --> 00:22:29,379
things that you can automate in code

00:22:27,249 --> 00:22:30,519
reviews and by this I mean making sure

00:22:29,379 --> 00:22:32,400
that your code style

00:22:30,519 --> 00:22:34,380
passes whatever linting

00:22:32,400 --> 00:22:36,000
you want to use and you can also make

00:22:34,380 --> 00:22:38,220
sure that your tests are run and it's

00:22:36,000 --> 00:22:39,630
just if you as a reviewer are having to

00:22:38,220 --> 00:22:40,890
do these steps manually you're you're

00:22:39,630 --> 00:22:42,240
wasting your time and it's fairly easy

00:22:40,890 --> 00:22:43,680
to set these things up with something

00:22:42,240 --> 00:22:46,050
like Travis which is free for open

00:22:43,680 --> 00:22:47,370
source projects or those tons of open

00:22:46,050 --> 00:22:50,820
source tools which you could run

00:22:47,370 --> 00:22:52,530
yourself as well and one of the best

00:22:50,820 --> 00:22:56,400
things about automating this is if you

00:22:52,530 --> 00:22:58,320
run say pie plates or pep 8 against the

00:22:56,400 --> 00:23:01,230
code and you get a negative feedback

00:22:58,320 --> 00:23:04,350
there it's much better if it comes from

00:23:01,230 --> 00:23:06,780
Jenkins or from a like an automated CI

00:23:04,350 --> 00:23:08,160
tool rather than from a human if you

00:23:06,780 --> 00:23:10,230
find that you have your reviewers

00:23:08,160 --> 00:23:11,760
actually manually commenting on code

00:23:10,230 --> 00:23:13,860
style then they're just wasting their

00:23:11,760 --> 00:23:17,220
time and it's far more nitpicky and just

00:23:13,860 --> 00:23:18,600
drives everyone crazy so the nice thing

00:23:17,220 --> 00:23:21,120
about using an automated tools you can

00:23:18,600 --> 00:23:24,570
actually have a shared hatred of that

00:23:21,120 --> 00:23:26,610
tool 4-minute in all of you but really

00:23:24,570 --> 00:23:28,410
the automation is about removing the

00:23:26,610 --> 00:23:29,550
bite said but for these these kind of

00:23:28,410 --> 00:23:31,230
discussions where people who might

00:23:29,550 --> 00:23:33,060
debate code style if it's not tested

00:23:31,230 --> 00:23:35,820
automatically then ignore that comment

00:23:33,060 --> 00:23:37,380
as as far as I'm concerned if you want

00:23:35,820 --> 00:23:39,080
to do stricter style guides about

00:23:37,380 --> 00:23:41,010
something then adding you like a flaky

00:23:39,080 --> 00:23:44,010
extension to plug in something like that

00:23:41,010 --> 00:23:45,000
and if you're not familiar with who I

00:23:44,010 --> 00:23:47,160
mean by bite shedding

00:23:45,000 --> 00:23:51,900
I won't explain it right now but just go

00:23:47,160 --> 00:23:53,580
to bike shed comm it's basically people

00:23:51,900 --> 00:23:55,590
will debate the simplest details rather

00:23:53,580 --> 00:23:59,790
than focusing on the actual real problem

00:23:55,590 --> 00:24:00,680
at hand and I think someone's picking a

00:23:59,790 --> 00:24:04,800
color already

00:24:00,680 --> 00:24:06,690
and yeah so moving on there's there's

00:24:04,800 --> 00:24:08,280
not much to say about this I have a

00:24:06,690 --> 00:24:10,230
slide for it just because I think some

00:24:08,280 --> 00:24:12,150
people will assume it's maybe one

00:24:10,230 --> 00:24:14,010
reviewer for change but really I think

00:24:12,150 --> 00:24:16,980
you should consider or at least try

00:24:14,010 --> 00:24:21,990
multiple reviewers in OpenStack we we

00:24:16,980 --> 00:24:23,430
have and so that's I find it really

00:24:21,990 --> 00:24:24,930
useful and I think it really multiplies

00:24:23,430 --> 00:24:26,220
the benefit from some of these sort of

00:24:24,930 --> 00:24:27,600
side effect goals that you get from code

00:24:26,220 --> 00:24:30,840
review about understanding what's going

00:24:27,600 --> 00:24:34,610
on and one of the other things that's

00:24:30,840 --> 00:24:34,610
nice about multiple users you actually

00:24:38,620 --> 00:24:42,759
when you're reviewing it's important to

00:24:41,000 --> 00:24:45,529
make sure you're feeling fresh and

00:24:42,759 --> 00:24:47,899
you're doing so you really want to do

00:24:45,529 --> 00:24:50,240
frequent and short reviews there's a

00:24:47,899 --> 00:24:52,190
paper which is the impact of code review

00:24:50,240 --> 00:24:55,750
coverage and code review participation

00:24:52,190 --> 00:24:59,090
on software quality and they found the

00:24:55,750 --> 00:25:01,490
pro reviews peaked around 200 lines per

00:24:59,090 --> 00:25:02,990
hour a bunch of other papers seem to

00:25:01,490 --> 00:25:06,320
reach about four hundred lines of code

00:25:02,990 --> 00:25:08,480
an hour is what they suggest it so it

00:25:06,320 --> 00:25:11,360
seems to vary a bit but it was lower

00:25:08,480 --> 00:25:12,710
than I expected but the important thing

00:25:11,360 --> 00:25:14,509
is just to make sure you're you're fine

00:25:12,710 --> 00:25:15,860
boxing this and you're not so driving on

00:25:14,509 --> 00:25:17,360
when you're kind of mentally fried

00:25:15,860 --> 00:25:20,779
because you just won't be doing anything

00:25:17,360 --> 00:25:22,549
constructive personally I find my best

00:25:20,779 --> 00:25:23,960
time for code review is just after I

00:25:22,549 --> 00:25:27,529
started thinking my strong morning

00:25:23,960 --> 00:25:28,789
coffee and then I'm ready to go and I've

00:25:27,529 --> 00:25:31,340
not looked at my email yet so I'm not

00:25:28,789 --> 00:25:36,169
very distracted and I'll spend maybe an

00:25:31,340 --> 00:25:38,179
hour or so doing the reviews then when

00:25:36,169 --> 00:25:39,759
you were giving your feedback in a

00:25:38,179 --> 00:25:43,549
review make sure that you are being

00:25:39,759 --> 00:25:45,169
constructive and you're giving sorry

00:25:43,549 --> 00:25:46,399
you're giving constructive criticism and

00:25:45,169 --> 00:25:49,070
you're also giving praise to people in

00:25:46,399 --> 00:25:50,870
reviews it's very easy to get tied up

00:25:49,070 --> 00:25:52,399
with giving feedback feedback to people

00:25:50,870 --> 00:25:54,259
as I'm saying pointing out all the

00:25:52,399 --> 00:25:56,570
problems it's really nice if you can

00:25:54,259 --> 00:25:58,580
point out to something that you learned

00:25:56,570 --> 00:26:00,110
in that code review and I think it

00:25:58,580 --> 00:26:03,379
really helps me the process a lot more

00:26:00,110 --> 00:26:05,690
positive interestingly I was when I was

00:26:03,379 --> 00:26:07,909
practicing this talk a few weeks ago one

00:26:05,690 --> 00:26:09,559
of my co-workers I'm sorry I got

00:26:07,909 --> 00:26:11,659
distracted by an email notification and

00:26:09,559 --> 00:26:13,970
one of my co-workers actually said

00:26:11,659 --> 00:26:15,200
something on my review I'd submit it is

00:26:13,970 --> 00:26:17,840
like hey I learned something today I

00:26:15,200 --> 00:26:19,490
didn't know you could have a class with

00:26:17,840 --> 00:26:21,470
just a top swing you don't need the past

00:26:19,490 --> 00:26:22,700
thing as well and I just I don't know

00:26:21,470 --> 00:26:24,350
made me feel quite good about it so then

00:26:22,700 --> 00:26:27,789
I was more encouraged to try and help so

00:26:24,350 --> 00:26:27,789
to share more knowledge in the future

00:26:31,190 --> 00:26:35,480
and and this kind of follows on a

00:26:33,500 --> 00:26:36,860
similar line make sure you you're being

00:26:35,480 --> 00:26:39,650
polite and aware of the problem when

00:26:36,860 --> 00:26:40,910
you're talking in code reviews and this

00:26:39,650 --> 00:26:42,290
can be tricky and it's very easy if

00:26:40,910 --> 00:26:45,470
you're in a rush to like miswired things

00:26:42,290 --> 00:26:46,550
so in this example for example and if if

00:26:45,470 --> 00:26:48,650
I was sitting this to something and I

00:26:46,550 --> 00:26:50,630
said oh hey why didn't you do that that

00:26:48,650 --> 00:26:52,670
sounds reasonable because you can hear

00:26:50,630 --> 00:26:54,560
my toe and I fell I sound fairly relaxed

00:26:52,670 --> 00:26:58,310
baby's written down it sounds much more

00:26:54,560 --> 00:27:01,100
like why didn't you do that I'm not very

00:26:58,310 --> 00:27:04,310
good at mean voice but yeah you can get

00:27:01,100 --> 00:27:06,140
the idea and so you can alternatively

00:27:04,310 --> 00:27:09,050
maybe say something like it could be do

00:27:06,140 --> 00:27:10,460
this instead you know it's just going to

00:27:09,050 --> 00:27:11,960
be a bit nicer about who you ask things

00:27:10,460 --> 00:27:14,360
and it'll make some of the negative

00:27:11,960 --> 00:27:15,410
feedback easier to receive and it's

00:27:14,360 --> 00:27:17,240
really important to make sure you're

00:27:15,410 --> 00:27:19,070
asking questions rather than telling so

00:27:17,240 --> 00:27:20,540
worse than either of those examples you

00:27:19,070 --> 00:27:22,430
would say something like you should do

00:27:20,540 --> 00:27:23,480
this and just tell them they might've

00:27:22,430 --> 00:27:26,350
had a good reason for doing that move

00:27:23,480 --> 00:27:29,600
you just missed it so you should all ask

00:27:26,350 --> 00:27:30,830
and this one I hope is really obvious

00:27:29,600 --> 00:27:35,300
but you should never be harsh and never

00:27:30,830 --> 00:27:36,620
personal in your code reviews and I

00:27:35,300 --> 00:27:38,330
think this is probably less of a problem

00:27:36,620 --> 00:27:39,830
in the corporate environment or a work

00:27:38,330 --> 00:27:41,600
environment because it's tends to be a

00:27:39,830 --> 00:27:43,190
good social dynamic between people or at

00:27:41,600 --> 00:27:44,750
least a social dynamic we seem to throw

00:27:43,190 --> 00:27:46,460
and there's always wide managers and so

00:27:44,750 --> 00:27:47,930
on to sort out any problems there's

00:27:46,460 --> 00:27:50,630
definitely more of a problem in open

00:27:47,930 --> 00:27:53,800
source communities the Python packaging

00:27:50,630 --> 00:27:55,940
Authority has a good code of conduct for

00:27:53,800 --> 00:27:57,770
for basically for projects in general

00:27:55,940 --> 00:27:59,330
that covers code reviews and so I'd

00:27:57,770 --> 00:28:00,380
encourage to use that I found out about

00:27:59,330 --> 00:28:02,180
it because I was

00:28:00,380 --> 00:28:07,790
I seen the cookie cutter the Python

00:28:02,180 --> 00:28:09,260
project were using and I do plan to add

00:28:07,790 --> 00:28:11,450
it all my projects but not quite our

00:28:09,260 --> 00:28:13,820
area

00:28:11,450 --> 00:28:16,460
and so yeah it's kind of like writing

00:28:13,820 --> 00:28:17,780
Toyota's hard reviewing is also hard so

00:28:16,460 --> 00:28:19,310
you want to really try and help out the

00:28:17,780 --> 00:28:22,400
the authors in the chain so again it's

00:28:19,310 --> 00:28:23,870
helping then help you and that kind of

00:28:22,400 --> 00:28:25,010
brings together the the two different

00:28:23,870 --> 00:28:27,770
sides that I have in this conversation

00:28:25,010 --> 00:28:28,970
is it's about helping each other to come

00:28:27,770 --> 00:28:31,280
out with a better soul and working

00:28:28,970 --> 00:28:33,230
together and automate what you can to

00:28:31,280 --> 00:28:35,360
save time and reduce that kind of burden

00:28:33,230 --> 00:28:36,740
of doing automated tasks yourself and be

00:28:35,360 --> 00:28:38,360
kind to yourself by time bugs in your

00:28:36,740 --> 00:28:41,410
code review make sure you restricting

00:28:38,360 --> 00:28:41,410
how long you spend doing it

00:28:44,630 --> 00:28:48,820
something I missed from earlier if I

00:28:46,130 --> 00:28:51,080
just remember so I'm just gonna say now

00:28:48,820 --> 00:28:52,610
one of the real benefits I find with

00:28:51,080 --> 00:28:55,160
doing reviews is that you can actually

00:28:52,610 --> 00:28:56,690
you can learn a lot about a project so

00:28:55,160 --> 00:28:58,130
quite often when I'm starting to work on

00:28:56,690 --> 00:28:59,480
a new open source project and I want to

00:28:58,130 --> 00:29:01,340
make some contributions for some reason

00:28:59,480 --> 00:29:03,650
I'll actually start doing reviews before

00:29:01,340 --> 00:29:05,060
I ever submit something I will be fairly

00:29:03,650 --> 00:29:06,350
careful about my feedback because I

00:29:05,060 --> 00:29:07,640
don't really understand what's going on

00:29:06,350 --> 00:29:09,320
but you can quite often make useful

00:29:07,640 --> 00:29:10,640
changes and you start to see the

00:29:09,320 --> 00:29:12,290
benefits of that shared understanding

00:29:10,640 --> 00:29:13,940
and shared learning in the process and

00:29:12,290 --> 00:29:15,440
so it's a great way to become filling

00:29:13,940 --> 00:29:17,240
with the familiar with the project is to

00:29:15,440 --> 00:29:19,790
look at the reviews of what's happening

00:29:17,240 --> 00:29:20,870
and see what the actual the current

00:29:19,790 --> 00:29:23,180
reviewers are saying and see what

00:29:20,870 --> 00:29:24,620
they're expecting from other people and

00:29:23,180 --> 00:29:27,310
also it's incredibly useful and you

00:29:24,620 --> 00:29:30,410
could start reviewing like that zone

00:29:27,310 --> 00:29:32,270
when I told people about this talk I

00:29:30,410 --> 00:29:33,710
love them sort of asked me was I going

00:29:32,270 --> 00:29:35,990
to do comparison of different code

00:29:33,710 --> 00:29:37,820
review tools what was the best thing to

00:29:35,990 --> 00:29:39,590
do personally I find that it's not very

00:29:37,820 --> 00:29:41,000
interesting if you want to look at

00:29:39,590 --> 00:29:42,230
screenshots or read the documentation

00:29:41,000 --> 00:29:44,630
about these that's fine

00:29:42,230 --> 00:29:47,060
and really I'm only qualified to talk

00:29:44,630 --> 00:29:49,190
about github and Garrett I used them

00:29:47,060 --> 00:29:50,120
extensively by I know of the others and

00:29:49,190 --> 00:29:51,860
I'm sure there's a whole bunch more I

00:29:50,120 --> 00:29:55,190
don't know about but I've never really

00:29:51,860 --> 00:29:56,810
used them the one thing I think you

00:29:55,190 --> 00:29:58,160
should really expect from your code

00:29:56,810 --> 00:30:02,420
review is to make sure you're reviewing

00:29:58,160 --> 00:30:04,240
before the merge so rather than say

00:30:02,420 --> 00:30:07,400
committing directly to master and I'm

00:30:04,240 --> 00:30:08,930
sorry folks and make sure that you are

00:30:07,400 --> 00:30:10,190
having somebody review before that

00:30:08,930 --> 00:30:13,370
happened so that could be in a pull

00:30:10,190 --> 00:30:15,860
request on github or I get record with

00:30:13,370 --> 00:30:17,870
you for example the reason for this is

00:30:15,860 --> 00:30:23,180
the the feedback loop is just too

00:30:17,870 --> 00:30:24,590
delayed if you try and and the the

00:30:23,180 --> 00:30:27,200
effort to actually take this feedback

00:30:24,590 --> 00:30:29,300
and make updates it's just much harder

00:30:27,200 --> 00:30:30,770
so you'll find the people will do the

00:30:29,300 --> 00:30:32,150
review and they'll say oh we should have

00:30:30,770 --> 00:30:33,980
done all this but then eventually gets

00:30:32,150 --> 00:30:35,360
forgotten about and no one does it so

00:30:33,980 --> 00:30:36,740
you need to keep people motivated don't

00:30:35,360 --> 00:30:40,190
only love the code in after it's been

00:30:36,740 --> 00:30:43,970
updated for these let's feedback but to

00:30:40,190 --> 00:30:45,290
quickly talk about the to the IDs github

00:30:43,970 --> 00:30:46,820
every most people here I imagine

00:30:45,290 --> 00:30:49,580
probably know so I'll say very little

00:30:46,820 --> 00:30:52,190
about it but it's got a very loose and

00:30:49,580 --> 00:30:53,660
undefined workflow and the labels are

00:30:52,190 --> 00:30:54,890
kind of useful for like trying and

00:30:53,660 --> 00:30:56,330
things but it's actually quite hard to

00:30:54,890 --> 00:30:58,010
do any kind of

00:30:56,330 --> 00:30:59,779
detailed oral complicated workflow in

00:30:58,010 --> 00:31:01,610
your code reviews it's also got a simple

00:30:59,779 --> 00:31:02,840
UI which works quite nice but some

00:31:01,610 --> 00:31:04,700
things would be very hard to do for

00:31:02,840 --> 00:31:06,140
example if you wanted to consider doing

00:31:04,700 --> 00:31:07,580
multiple reviewers you have to have some

00:31:06,140 --> 00:31:13,760
kind of strange convention to make sure

00:31:07,580 --> 00:31:17,440
to people I looked at it and everyone

00:31:13,760 --> 00:31:17,440
has github which is a great benefit and

00:31:18,399 --> 00:31:23,120
Gerrit on the other hands is pretty much

00:31:20,779 --> 00:31:26,179
the opposite together it's it's open

00:31:23,120 --> 00:31:29,960
source it's kind of ugly it's hard to

00:31:26,179 --> 00:31:32,179
use but you have very defined workflows

00:31:29,960 --> 00:31:33,260
and rules in it and you can do like much

00:31:32,179 --> 00:31:35,659
more things like you can have multiple

00:31:33,260 --> 00:31:37,419
reviewers for example when people do

00:31:35,659 --> 00:31:40,639
reviewing and Gerrit they'll then

00:31:37,419 --> 00:31:42,350
explicitly give a vote so you'll write

00:31:40,639 --> 00:31:46,220
your comments and then you'll pick like

00:31:42,350 --> 00:31:48,110
minus two minus one plus one plus two

00:31:46,220 --> 00:31:52,250
well they I mean they're fairly obvious

00:31:48,110 --> 00:31:53,600
that they're negative and positive but

00:31:52,250 --> 00:31:54,860
the the nice thing about that is you can

00:31:53,600 --> 00:31:56,299
actually give some feedback which is

00:31:54,860 --> 00:31:58,100
like I spied this pipe over it doesn't

00:31:56,299 --> 00:31:59,990
really matter I'll still like give you a

00:31:58,100 --> 00:32:01,070
positive review but if you happen to be

00:31:59,990 --> 00:32:01,970
updating this for some other reason

00:32:01,070 --> 00:32:03,860
would be good to take that into account

00:32:01,970 --> 00:32:05,210
so allows you to give like this other

00:32:03,860 --> 00:32:07,700
small feedback which is useful to have

00:32:05,210 --> 00:32:09,409
it not be like a real nitpicking person

00:32:07,700 --> 00:32:14,330
and what's the review just because of

00:32:09,409 --> 00:32:16,850
that one of the really interesting

00:32:14,330 --> 00:32:21,320
things about having all of this data

00:32:16,850 --> 00:32:23,000
attached to information out there online

00:32:21,320 --> 00:32:25,970
and this is one of the things I would

00:32:23,000 --> 00:32:28,190
quite like to do at some point so this

00:32:25,970 --> 00:32:30,980
is kind of a I'm looking for like-minded

00:32:28,190 --> 00:32:32,990
people I suppose and OpenStack for

00:32:30,980 --> 00:32:35,059
example there are around three hundred

00:32:32,990 --> 00:32:37,850
and thirty thousand reviews and they

00:32:35,059 --> 00:32:39,919
Garrett I think it's number is going up

00:32:37,850 --> 00:32:42,380
all the time obviously and you can pull

00:32:39,919 --> 00:32:44,659
down all this data it gives you like

00:32:42,380 --> 00:32:45,830
twenty gig of Jason or something but I'm

00:32:44,659 --> 00:32:47,179
sure there's something we can learn in

00:32:45,830 --> 00:32:47,899
there and maybe we can have some kind of

00:32:47,179 --> 00:32:49,039
feedback loop

00:32:47,899 --> 00:32:51,500
and there's a whole bunch of other

00:32:49,039 --> 00:32:53,389
projects are using carrot in the open

00:32:51,500 --> 00:32:56,779
for like Android uses it WordPress uses

00:32:53,389 --> 00:32:58,039
it so we could maybe we could I don't

00:32:56,779 --> 00:32:59,690
know I'm sure there is something to be

00:32:58,039 --> 00:33:01,250
learned there or you could just have fun

00:32:59,690 --> 00:33:02,920
looking at the data and making pretty

00:33:01,250 --> 00:33:04,600
gross

00:33:02,920 --> 00:33:09,070
yeah I think it would just be a bit

00:33:04,600 --> 00:33:10,990
quite an interesting thing to do yeah

00:33:09,070 --> 00:33:12,370
and that basically wraps up I have my

00:33:10,990 --> 00:33:14,280
course about code review how do you take

00:33:12,370 --> 00:33:17,380
questions these are my contact details

00:33:14,280 --> 00:33:18,910
and sort of related through we're going

00:33:17,380 --> 00:33:20,410
to do an open stack open space tomorrow

00:33:18,910 --> 00:33:22,600
so if anyone's interested more about the

00:33:20,410 --> 00:33:23,860
open stack code review workflow they

00:33:22,600 --> 00:33:26,220
could come and ask there or just plug me

00:33:23,860 --> 00:33:26,220
afterwards

00:33:34,590 --> 00:33:40,870
one thing to note if you're looking at

00:33:36,730 --> 00:33:44,610
that the Owen Duggal is a zero I should

00:33:40,870 --> 00:33:44,610
have picked the mono one for this one

00:33:55,910 --> 00:34:02,930
either great talk I wanted to know as a

00:34:01,370 --> 00:34:04,610
beginner who's working on a project

00:34:02,930 --> 00:34:08,360
alone what's a good way to find people

00:34:04,610 --> 00:34:09,710
to review my code yeah that's I mean

00:34:08,360 --> 00:34:11,660
that is a very difficult problem it's

00:34:09,710 --> 00:34:13,250
it's kind of the eternal problem of say

00:34:11,660 --> 00:34:14,720
an open source project is how do you get

00:34:13,250 --> 00:34:18,410
more people to look at your code how do

00:34:14,720 --> 00:34:19,760
you get more people to use your code I I

00:34:18,410 --> 00:34:23,300
had wondered if there was some way we

00:34:19,760 --> 00:34:24,740
could have like a collaborative network

00:34:23,300 --> 00:34:26,540
in people that are working so as

00:34:24,740 --> 00:34:27,890
individuals and we kind of have a loose

00:34:26,540 --> 00:34:29,960
agreement to try and review each other's

00:34:27,890 --> 00:34:32,390
code that could be quite interesting and

00:34:29,960 --> 00:34:34,090
it also get more people involved but I

00:34:32,390 --> 00:34:38,080
don't really have a good solution there

00:34:34,090 --> 00:34:38,080
all right thank you

00:34:42,580 --> 00:34:51,020
hi I wanted to ask you do you think that

00:34:46,960 --> 00:34:53,179
reviewing kind of meta issues and like

00:34:51,020 --> 00:34:56,120
your region rejection emerges in terms

00:34:53,179 --> 00:34:58,520
because because the commit messages are

00:34:56,120 --> 00:35:03,100
not clear enough for the come internets

00:34:58,520 --> 00:35:03,100
quest it's kind of being too picky or

00:35:04,750 --> 00:35:10,700
your project so in in most of my site

00:35:08,870 --> 00:35:13,700
projects I wouldn't be too picky about

00:35:10,700 --> 00:35:15,380
commit messages but in OpenStack people

00:35:13,700 --> 00:35:16,640
actually and that's one of the nice

00:35:15,380 --> 00:35:18,530
things about Guerra is your commit

00:35:16,640 --> 00:35:20,810
message is actually a file that comes up

00:35:18,530 --> 00:35:22,610
for a review so you review your people

00:35:20,810 --> 00:35:24,500
review commit messages as well and make

00:35:22,610 --> 00:35:25,970
sure that they are useful I think

00:35:24,500 --> 00:35:28,430
there's definitely some value in it but

00:35:25,970 --> 00:35:30,560
it depends how good everyone is with

00:35:28,430 --> 00:35:32,920
their so keeping the git history nice

00:35:30,560 --> 00:35:32,920
and clean

00:35:37,100 --> 00:35:41,540
hi thanks for the talk I also happen to

00:35:39,590 --> 00:35:45,020
work on OpenStack so I was wondering

00:35:41,540 --> 00:35:46,670
knew it's just me who misses in the

00:35:45,020 --> 00:35:48,950
review comments for instance this large

00:35:46,670 --> 00:35:51,200
patch set that's in progress for a

00:35:48,950 --> 00:35:53,960
review and there's interesting

00:35:51,200 --> 00:35:57,140
discussion deep analysis there's one

00:35:53,960 --> 00:35:59,570
interesting comment Pat's of 25 it's

00:35:57,140 --> 00:36:01,850
long paragraph and then it's just buried

00:35:59,570 --> 00:36:04,640
in there on a mailing list based patch

00:36:01,850 --> 00:36:08,300
workflow you can link to a specific

00:36:04,640 --> 00:36:11,390
large comment however in garrard is just

00:36:08,300 --> 00:36:12,800
buried and sitting in there and like six

00:36:11,390 --> 00:36:16,310
months later if you want to refer to it

00:36:12,800 --> 00:36:19,720
again you have to link to the review and

00:36:16,310 --> 00:36:24,020
then there's like a whole bunch of 25 CI

00:36:19,720 --> 00:36:26,450
jobs listing their status so it's just

00:36:24,020 --> 00:36:28,580
very messy yeah so yeah how do you

00:36:26,450 --> 00:36:30,980
handle that I mean this is a specific

00:36:28,580 --> 00:36:32,570
problem with Garrett I think people

00:36:30,980 --> 00:36:34,310
don't know when you submit a change to

00:36:32,570 --> 00:36:35,690
Garrett someone then does a review and

00:36:34,310 --> 00:36:37,000
then you submit another change the

00:36:35,690 --> 00:36:40,340
comments they added on the first

00:36:37,000 --> 00:36:41,810
revision are hidden and so sometimes you

00:36:40,340 --> 00:36:42,890
might actually do another review before

00:36:41,810 --> 00:36:44,270
you see the comment so you need to

00:36:42,890 --> 00:36:47,090
actually go and look for them or spot

00:36:44,270 --> 00:36:48,080
the email notification or something yeah

00:36:47,090 --> 00:36:49,460
I think it's just a problem with the

00:36:48,080 --> 00:36:51,650
carrots UI it needs to expose this

00:36:49,460 --> 00:36:53,720
better and actually I found out recently

00:36:51,650 --> 00:36:55,100
you can search for all your comments

00:36:53,720 --> 00:36:56,990
that are in draft which were never

00:36:55,100 --> 00:36:58,340
submitted and I've got a whole bunch of

00:36:56,990 --> 00:37:00,020
review comments which I thought I had

00:36:58,340 --> 00:37:02,480
submitted they are just sitting there I

00:37:00,020 --> 00:37:03,440
found this last week so that's that was

00:37:02,480 --> 00:37:05,800
a bit of a nightmare I was like oh

00:37:03,440 --> 00:37:08,510
that's why they didn't listen to that

00:37:05,800 --> 00:37:14,350
Thanks yeah it's more for wine I guess

00:37:08,510 --> 00:37:14,350
yeah any other questions

00:37:24,529 --> 00:37:30,779
so I was just wondering what your

00:37:27,390 --> 00:37:33,839
thoughts are on code review versus pair

00:37:30,779 --> 00:37:36,119
programming yes so this is coordinate

00:37:33,839 --> 00:37:38,760
rusting one I think you've so I work

00:37:36,119 --> 00:37:40,380
remotely for Red Hat which means it's

00:37:38,760 --> 00:37:42,690
pair programming is a slightly different

00:37:40,380 --> 00:37:44,789
thing and that we sometimes do it and

00:37:42,690 --> 00:37:46,890
sharing a screen terminal and maybe a

00:37:44,789 --> 00:37:48,930
voice chat at the same time and that can

00:37:46,890 --> 00:37:50,069
work quite well but it means I've not

00:37:48,930 --> 00:37:52,890
done a whole lot of pair programming

00:37:50,069 --> 00:37:54,089
essentially I think that you can

00:37:52,890 --> 00:37:57,599
basically give the same result out of

00:37:54,089 --> 00:37:59,369
the process but if you can sorry no can

00:37:57,599 --> 00:38:01,049
stack at least we still need to have

00:37:59,369 --> 00:38:02,789
other reviewers just for the simple fact

00:38:01,049 --> 00:38:04,680
that their change won't be merged until

00:38:02,789 --> 00:38:07,319
you have enough reviewers sorry view

00:38:04,680 --> 00:38:08,760
pair program it doesn't necessarily help

00:38:07,319 --> 00:38:10,019
you out on at the stack but I can see

00:38:08,760 --> 00:38:11,640
that in some situations you would

00:38:10,019 --> 00:38:13,829
definitely could just replace code

00:38:11,640 --> 00:38:15,839
review with that I mean if there's only

00:38:13,829 --> 00:38:17,279
two people working on a project then

00:38:15,839 --> 00:38:19,019
there's not much pointing in a formal

00:38:17,279 --> 00:38:20,369
code review if you're doing pair

00:38:19,019 --> 00:38:23,549
programming I think the result could be

00:38:20,369 --> 00:38:24,869
the same PIV interesting to know if

00:38:23,549 --> 00:38:25,920
anyone's got experience like comparing

00:38:24,869 --> 00:38:28,279
the two which one they find more

00:38:25,920 --> 00:38:28,279
effective

00:38:42,410 --> 00:38:46,099
Thanks

00:38:44,089 --> 00:38:49,630
yeah just a short response to your

00:38:46,099 --> 00:38:54,410
question because where I work we have

00:38:49,630 --> 00:38:56,719
assignee for code review per week so

00:38:54,410 --> 00:38:59,719
before we start working on new feature

00:38:56,719 --> 00:39:04,930
for example we come together and discuss

00:38:59,719 --> 00:39:08,119
the implementation so you avoid having

00:39:04,930 --> 00:39:11,150
feedback after three days of work saying

00:39:08,119 --> 00:39:14,209
yeah this you know I don't agree with

00:39:11,150 --> 00:39:16,849
your implementation or your choices so

00:39:14,209 --> 00:39:19,130
that yeah I found it to be really useful

00:39:16,849 --> 00:39:21,109
to you you know work on a future

00:39:19,130 --> 00:39:22,729
together in their way that you plan it

00:39:21,109 --> 00:39:33,410
together and discuss it before you

00:39:22,729 --> 00:39:35,329
actually submit your pull request why

00:39:33,410 --> 00:39:37,339
quite often do is I will put my code up

00:39:35,329 --> 00:39:38,930
to review very early on and in Garrett

00:39:37,339 --> 00:39:41,239
you can mark it is work in progress so

00:39:38,930 --> 00:39:42,619
that allows people to have sort of a

00:39:41,239 --> 00:39:44,119
rough look at it from a high level but

00:39:42,619 --> 00:39:45,439
not do a proper review and then you can

00:39:44,119 --> 00:39:47,479
maybe get some feedback a bit earlier

00:39:45,439 --> 00:39:49,339
which is another good approach to that

00:39:47,479 --> 00:39:52,249
just sort of a I've always wasting say

00:39:49,339 --> 00:39:53,689
five days or three days development we

00:39:52,249 --> 00:39:57,130
have you doing some scrum meetings as

00:39:53,689 --> 00:39:57,130
always good stuff time to bring up

00:40:05,510 --> 00:40:13,369
thanks for attack digit maybe try to

00:40:09,080 --> 00:40:15,920
implement trunk base development and no

00:40:13,369 --> 00:40:21,950
did you have experience with that and

00:40:15,920 --> 00:40:23,480
code review from bellman is just one

00:40:21,950 --> 00:40:25,280
every change is frustrating yeah

00:40:23,480 --> 00:40:31,520
everything's goes to the master it's

00:40:25,280 --> 00:40:33,170
like old into the master branch unless

00:40:31,520 --> 00:40:35,359
you are back porting to our previous

00:40:33,170 --> 00:40:36,859
release or something like that so yeah I

00:40:35,359 --> 00:40:39,320
guess we we do do that and it seems to

00:40:36,859 --> 00:40:41,630
work pretty well I've never really been

00:40:39,320 --> 00:40:48,920
a fan of the long-running branches I

00:40:41,630 --> 00:40:50,300
find that they problems which I've not

00:40:48,920 --> 00:40:51,560
done what I'm not sure avoid missing

00:40:50,300 --> 00:40:54,310
some like something else about some base

00:40:51,560 --> 00:40:57,530
development okay and what size are your

00:40:54,310 --> 00:41:00,850
average commits like in lines of code

00:40:57,530 --> 00:41:00,850
that's a good question

00:41:02,720 --> 00:41:08,080
I guess I like them to be a couple

00:41:06,080 --> 00:41:09,740
hundred lines at most

00:41:08,080 --> 00:41:11,300
occasionally if you're moving things

00:41:09,740 --> 00:41:13,490
around you can end up with really big

00:41:11,300 --> 00:41:16,340
changes but that tends to be a bit

00:41:13,490 --> 00:41:17,619
easier to review yeah I'm not sure I

00:41:16,340 --> 00:41:20,619
would have to look at that and see

00:41:17,619 --> 00:41:20,619
thanks

00:41:34,780 --> 00:41:42,130
hi thank you for I wonder if you have

00:41:38,770 --> 00:41:45,160
some experiences or ideas or comments

00:41:42,130 --> 00:41:48,130
about reviewing different things than

00:41:45,160 --> 00:41:51,630
cold like I don't know in opens like we

00:41:48,130 --> 00:41:58,200
have blueprints and specifications and

00:41:51,630 --> 00:41:58,200
sometimes code style changes and so on

00:41:58,830 --> 00:42:02,770
yeah I think it can be good but you've

00:42:01,330 --> 00:42:04,030
got to be really careful and this is a

00:42:02,770 --> 00:42:05,860
problem I think is happening in

00:42:04,030 --> 00:42:07,090
OpenStack so when you want to in some

00:42:05,860 --> 00:42:07,660
projects when you want to make it change

00:42:07,090 --> 00:42:09,700
you

00:42:07,660 --> 00:42:11,710
there's basically a repository with just

00:42:09,700 --> 00:42:14,410
restructured text files and you and

00:42:11,710 --> 00:42:16,330
submit with a document describing we

00:42:14,410 --> 00:42:18,010
wanted to do ibid the feedback process

00:42:16,330 --> 00:42:20,470
and that tends to take a really long

00:42:18,010 --> 00:42:23,070
time because people really start to go

00:42:20,470 --> 00:42:25,570
into far too much detail on this specs

00:42:23,070 --> 00:42:27,510
so I think that tends to not work so

00:42:25,570 --> 00:42:29,950
well for some reason I mean

00:42:27,510 --> 00:42:31,930
documentation I guess is a bit more like

00:42:29,950 --> 00:42:32,980
code and that seems to be fine because

00:42:31,930 --> 00:42:34,450
you're actually documenting what

00:42:32,980 --> 00:42:36,370
something does whereas when you're

00:42:34,450 --> 00:42:38,470
reviewing this spec a lot of people are

00:42:36,370 --> 00:42:40,000
trying to interject how they think it

00:42:38,470 --> 00:42:42,900
should work and it almost gets to the

00:42:40,000 --> 00:42:45,490
point where people are debating the the

00:42:42,900 --> 00:42:46,600
implementation and to satisfy the code

00:42:45,490 --> 00:42:47,830
reviews that you're getting you almost

00:42:46,600 --> 00:42:49,420
need to write out pseudocode for

00:42:47,830 --> 00:42:52,690
everything you want to do and it just

00:42:49,420 --> 00:42:54,040
becomes this like big effort and I think

00:42:52,690 --> 00:42:55,960
that's why we've seen a lot of OpenStack

00:42:54,040 --> 00:42:58,150
project move away from this like really

00:42:55,960 --> 00:42:59,590
detailed spec process or there at least

00:42:58,150 --> 00:43:05,440
they've got something more alternative

00:42:59,590 --> 00:43:07,150
for smaller features hi great up by the

00:43:05,440 --> 00:43:10,180
way I just wanted to ask you something

00:43:07,150 --> 00:43:14,560
you stated and I totally agree with you

00:43:10,180 --> 00:43:17,040
that code review is not it's not just a

00:43:14,560 --> 00:43:20,470
one ping pong thing but it's just a

00:43:17,040 --> 00:43:23,980
dialogue a continuous dialogue but where

00:43:20,470 --> 00:43:25,960
do you draw the line so what how far do

00:43:23,980 --> 00:43:28,270
you go with this dialogue in order to

00:43:25,960 --> 00:43:30,580
either reject a pull request or merge

00:43:28,270 --> 00:43:32,890
the pull request er so I guess it

00:43:30,580 --> 00:43:35,080
depends on the the situation and I mean

00:43:32,890 --> 00:43:36,760
you have to really define it based on

00:43:35,080 --> 00:43:38,530
your project if you're a sole maintainer

00:43:36,760 --> 00:43:40,600
of the project and you can simply think

00:43:38,530 --> 00:43:42,190
do I want this change do I want to

00:43:40,600 --> 00:43:44,170
maintain this change and then draw the

00:43:42,190 --> 00:43:45,520
line there if you're working in a

00:43:44,170 --> 00:43:46,750
company then you

00:43:45,520 --> 00:43:49,120
probably more thinking along the lines

00:43:46,750 --> 00:43:50,710
of what does the business need more in a

00:43:49,120 --> 00:43:52,360
large communities you're thinking about

00:43:50,710 --> 00:43:53,650
you could upon your community how and

00:43:52,360 --> 00:43:55,570
think what does the community want is

00:43:53,650 --> 00:43:57,040
this much the community expectations it

00:43:55,570 --> 00:44:00,310
might not match what you want exactly

00:43:57,040 --> 00:44:01,780
from a future but maybe more there so

00:44:00,310 --> 00:44:02,890
there's not really a simple way to do

00:44:01,780 --> 00:44:04,240
that I don't think you've just got to

00:44:02,890 --> 00:44:05,470
yeah make sure you're taking into

00:44:04,240 --> 00:44:12,790
account the group that you are working

00:44:05,470 --> 00:44:16,000
with it okay thank you google

00:44:12,790 --> 00:44:18,570
so that's lunch don't forget about the

00:44:16,000 --> 00:44:18,570

YouTube URL: https://www.youtube.com/watch?v=uIwl01Nazdg


