Title: Facundo Batista - It's not magic: descriptors exposed
Publication date: 2016-07-28
Playlist: EuroPython 2016
Description: 
	Facundo Batista - It's not magic: descriptors exposed
[EuroPython 2016]
[18 July 2016]
[Bilbao, Euskadi, Spain]
(https://ep2016.europython.eu//conference/talks/its-not-magic-descriptors-exposed)

This talk shows the Python Descriptors, detailing their behaviour with
a detailed practical example, so we can understand the power and
flexibility they give. As a bonus track, class decorators are
explained.

-----

This talk presents, using a detailed practical example, the Python Descriptos.

The behaviour of descriptors mechanisms is detailed, showing their
power and flexibility.

Finally, as a bonus track and to complete the used practical example,
class descriptors are explained.
Captions: 
	00:00:02,360 --> 00:00:14,849
about Python descriptors there will be

00:00:06,089 --> 00:00:18,500
some time for questions thank you very

00:00:14,849 --> 00:00:23,609
much do you hear me okay yes perfect

00:00:18,500 --> 00:00:26,580
okay welcome thanks to be here thanks

00:00:23,609 --> 00:00:30,119
for the variety of putting together this

00:00:26,580 --> 00:00:34,710
awesome conference I will be talking

00:00:30,119 --> 00:00:37,020
about descriptors just trying to

00:00:34,710 --> 00:00:40,739
everybody understand a little descriptor

00:00:37,020 --> 00:00:43,260
the scripture is a hard topic normally

00:00:40,739 --> 00:00:45,840
the 50 time that I saw presentations

00:00:43,260 --> 00:00:49,590
about the script until I understood it

00:00:45,840 --> 00:00:52,230
it's a lot of theory and you get out of

00:00:49,590 --> 00:00:54,390
the presentation saying okay I kind of

00:00:52,230 --> 00:00:59,039
understand the theory but I don't have a

00:00:54,390 --> 00:01:01,800
clue how to apply that so we hope that

00:00:59,039 --> 00:01:07,979
this Hawking that is the other author of

00:01:01,800 --> 00:01:12,540
this talk we decided to do it we like

00:01:07,979 --> 00:01:17,750
games board games roll games and we

00:01:12,540 --> 00:01:21,119
decided that as we are not level 2 we

00:01:17,750 --> 00:01:24,630
not only wanted to play board games but

00:01:21,119 --> 00:01:28,860
to create them to the Simon system where

00:01:24,630 --> 00:01:32,479
you can create world games so it's like

00:01:28,860 --> 00:01:35,880
playing the game it's like a metal play

00:01:32,479 --> 00:01:38,880
so we wanted not only to create the

00:01:35,880 --> 00:01:43,590
system but we wanted to offer other

00:01:38,880 --> 00:01:47,070
people ways to create ball games and we

00:01:43,590 --> 00:01:50,220
wanted to offer them a possibility of

00:01:47,070 --> 00:01:51,390
creating board games in a simple way in

00:01:50,220 --> 00:01:53,970
a useful way

00:01:51,390 --> 00:01:57,329
so we wanted to do something like this

00:01:53,970 --> 00:02:02,490
we wanted to have powers and characters

00:01:57,329 --> 00:02:04,649
the powers is where you encapsulate what

00:02:02,490 --> 00:02:07,670
the powers can do so for example you

00:02:04,649 --> 00:02:12,030
have a strength that is a useful power

00:02:07,670 --> 00:02:13,100
useful power for a character and if you

00:02:12,030 --> 00:02:15,380
have a strength you

00:02:13,100 --> 00:02:18,620
can break walls or you can jump a hole

00:02:15,380 --> 00:02:21,920
etc if you have magic you can do an

00:02:18,620 --> 00:02:24,650
spell etcetera see that it's very simple

00:02:21,920 --> 00:02:29,270
define at the power it's just a class

00:02:24,650 --> 00:02:31,070
it's just what you can do and the action

00:02:29,270 --> 00:02:33,170
itself it's a method of of course

00:02:31,070 --> 00:02:36,140
according to some values we'll have more

00:02:33,170 --> 00:02:39,590
and less magic etc you can do it or not

00:02:36,140 --> 00:02:46,460
and when you define a character you just

00:02:39,590 --> 00:02:49,490
define what powers this character has so

00:02:46,460 --> 00:02:52,280
this is very simple written if you write

00:02:49,490 --> 00:02:56,300
it like this it will not work but we

00:02:52,280 --> 00:03:02,690
wanted to do this we wanted to go from

00:02:56,300 --> 00:03:05,930
here so this is how we'll use this very

00:03:02,690 --> 00:03:08,450
simple mechanism for example you

00:03:05,930 --> 00:03:11,210
instantiate a character that is namely

00:03:08,450 --> 00:03:14,780
Gimli you can instantiate it with a lot

00:03:11,210 --> 00:03:18,080
of strength and see how you can check if

00:03:14,780 --> 00:03:20,800
Gimli can break a wall you ask for the

00:03:18,080 --> 00:03:20,800
strength of

00:03:21,400 --> 00:03:29,110
it's what the power can do also you can

00:03:25,840 --> 00:03:33,690
modify you can modify very easily the

00:03:29,110 --> 00:03:39,069
value of that power see that how I

00:03:33,690 --> 00:03:42,010
directly modify that power in Gimli so

00:03:39,069 --> 00:03:45,010
if I put more power to him leave for

00:03:42,010 --> 00:03:51,670
example it will be able to break the

00:03:45,010 --> 00:03:56,530
wall all for example this is a character

00:03:51,670 --> 00:03:59,769
that has both powers so it has a power

00:03:56,530 --> 00:04:05,079
with some strength and has some magic

00:03:59,769 --> 00:04:08,049
and if he okay gondol can charm a tree

00:04:05,079 --> 00:04:11,260
it's okay but Gandalf cannot fight

00:04:08,049 --> 00:04:14,650
sermon but I can just put more magic in

00:04:11,260 --> 00:04:18,970
handles and from that point under the

00:04:14,650 --> 00:04:22,330
white we'll be able to to to fight

00:04:18,970 --> 00:04:28,180
Solomon the idea is that we wanted to

00:04:22,330 --> 00:04:30,099
present we wanted to give the powers in

00:04:28,180 --> 00:04:34,570
the characters in a very simple way to

00:04:30,099 --> 00:04:37,210
manipulate working with them like

00:04:34,570 --> 00:04:40,380
numbers so you can get or you can set

00:04:37,210 --> 00:04:42,880
the powers in the character but also

00:04:40,380 --> 00:04:47,020
encapsulating what the power will be

00:04:42,880 --> 00:04:52,750
able to do in that very same class while

00:04:47,020 --> 00:04:56,520
defining the power so it's very weird

00:04:52,750 --> 00:05:02,410
way of doing things but it's very simple

00:04:56,520 --> 00:05:04,750
so how will how we did this I mean we we

00:05:02,410 --> 00:05:07,840
didn't do we didn't do it with magic I

00:05:04,750 --> 00:05:13,150
mean this is not magic it's just we use

00:05:07,840 --> 00:05:16,479
it descriptors to make that quad work so

00:05:13,150 --> 00:05:18,699
the idea here is that we will go now a

00:05:16,479 --> 00:05:22,660
little into the theory of the scriptures

00:05:18,699 --> 00:05:25,449
and then we go back to to to the ball

00:05:22,660 --> 00:05:28,810
game and see how we did apply that

00:05:25,449 --> 00:05:32,550
theory so this is last chance if you

00:05:28,810 --> 00:05:32,550
want if you want to see the script

00:05:33,160 --> 00:05:39,320
so a descriptor in general is an

00:05:36,800 --> 00:05:41,600
attribute with binding behavior one who

00:05:39,320 --> 00:05:44,090
sat if attacks s has been overriding by

00:05:41,600 --> 00:05:45,710
methods in the descriptor protocol very

00:05:44,090 --> 00:05:48,860
very simple right

00:05:45,710 --> 00:05:51,160
it's very understanding you already know

00:05:48,860 --> 00:05:55,070
how it works

00:05:51,160 --> 00:05:59,240
the idea is to see what we really are

00:05:55,070 --> 00:06:02,960
doing here in more simple words the idea

00:05:59,240 --> 00:06:06,979
behind the Scriptures is that you think

00:06:02,960 --> 00:06:11,690
you take control of some normal Python

00:06:06,979 --> 00:06:15,410
behavior every time you do a set of an

00:06:11,690 --> 00:06:18,320
attribute in some object every time you

00:06:15,410 --> 00:06:22,610
get some attribute from some object or

00:06:18,320 --> 00:06:27,979
every time you remove some attribute in

00:06:22,610 --> 00:06:32,020
some object with descriptors you get the

00:06:27,979 --> 00:06:35,990
possibility to execute your own code

00:06:32,020 --> 00:06:38,720
instead of normal Python behavior so

00:06:35,990 --> 00:06:42,590
when I do some object dot attribute

00:06:38,720 --> 00:06:45,889
equal 42 in that case it's not Python

00:06:42,590 --> 00:06:48,979
just assigning the value 42 to the

00:06:45,889 --> 00:06:51,530
attribute in this object but instead if

00:06:48,979 --> 00:06:54,919
I'm working with the scriptures some

00:06:51,530 --> 00:07:04,580
code of mine is being executed in that

00:06:54,919 --> 00:07:08,000
moment how is how it how is that you

00:07:04,580 --> 00:07:10,729
define the scripture with classes for a

00:07:08,000 --> 00:07:15,440
class to be a scripture it has to be it

00:07:10,729 --> 00:07:19,760
has to have some special methods in this

00:07:15,440 --> 00:07:23,930
case we have a dunder gate the Thunder

00:07:19,760 --> 00:07:27,770
gate makes this descriptor make this

00:07:23,930 --> 00:07:30,949
class a descriptor this dunder gate this

00:07:27,770 --> 00:07:34,580
Thunder gate will be executed every time

00:07:30,949 --> 00:07:37,669
you access the attribute so let's see it

00:07:34,580 --> 00:07:41,900
in real code in the in the upper part I

00:07:37,669 --> 00:07:45,020
have the very same trust that the last

00:07:41,900 --> 00:07:47,180
slide where I have a dunder

00:07:45,020 --> 00:07:51,289
it and that Thunder gate just returned

00:07:47,180 --> 00:07:53,900
hello world then I define another class

00:07:51,289 --> 00:07:58,610
that is the class where I used the

00:07:53,900 --> 00:08:00,800
descriptor and see that X is a class

00:07:58,610 --> 00:08:04,009
attribute that is very important because

00:08:00,800 --> 00:08:07,009
the scripter magic is activated when you

00:08:04,009 --> 00:08:10,340
are using it we are using the descriptor

00:08:07,009 --> 00:08:13,310
as a class attribute X is a class

00:08:10,340 --> 00:08:16,340
attribute that has an instance of that

00:08:13,310 --> 00:08:19,550
hello world descriptor then I

00:08:16,340 --> 00:08:22,909
instantiate any class and the moment

00:08:19,550 --> 00:08:27,740
that I do AC dot X the moment that I am

00:08:22,909 --> 00:08:31,009
accessing that attribute my own code is

00:08:27,740 --> 00:08:34,130
being executed so this is the proof that

00:08:31,009 --> 00:08:41,899
with descriptors I can get in the middle

00:08:34,130 --> 00:08:45,800
of the Python execution for this so far

00:08:41,899 --> 00:08:47,329
how are you doing I mean it's it's

00:08:45,800 --> 00:08:54,640
totally crazy

00:08:47,329 --> 00:09:02,990
makes sense I already lost you it works

00:08:54,640 --> 00:09:04,760
you see how how this magic happens so we

00:09:02,990 --> 00:09:08,600
have another special metal for

00:09:04,760 --> 00:09:12,850
descriptors we have the dunder set the

00:09:08,600 --> 00:09:15,920
under set is executed the moment I set

00:09:12,850 --> 00:09:17,690
the attribute that when the attribute is

00:09:15,920 --> 00:09:20,810
the class descriptor this is very

00:09:17,690 --> 00:09:23,209
similar that before I have the Midas

00:09:20,810 --> 00:09:26,180
script addressed it's a normal class but

00:09:23,209 --> 00:09:30,230
us it has the dunder set is a descriptor

00:09:26,180 --> 00:09:33,020
I used that descriptor in a class

00:09:30,230 --> 00:09:40,040
attributed another class and then when I

00:09:33,020 --> 00:09:44,149
sit that does attribute my own code

00:09:40,040 --> 00:09:46,850
there will be : see that I didn't

00:09:44,149 --> 00:09:53,870
mention that for example in the dunder

00:09:46,850 --> 00:09:58,720
gate I receive the instance of the class

00:09:53,870 --> 00:10:02,270
and the class that that instance belongs

00:09:58,720 --> 00:10:04,580
it sometimes uses for some clever tricks

00:10:02,270 --> 00:10:07,700
it's that the classes are is not

00:10:04,580 --> 00:10:11,690
normally used in the set its difference

00:10:07,700 --> 00:10:15,200
in the set I received the instance that

00:10:11,690 --> 00:10:23,480
is AC and the value that I'm setting so

00:10:15,200 --> 00:10:26,000
I also receive this blend okay let's see

00:10:23,480 --> 00:10:28,700
both working at the same time this is an

00:10:26,000 --> 00:10:32,630
this example call shut to see a

00:10:28,700 --> 00:10:36,680
descriptor that has both metals dunder

00:10:32,630 --> 00:10:42,470
get and under set see that the dunder

00:10:36,680 --> 00:10:45,260
gate is under set what what they do that

00:10:42,470 --> 00:10:49,190
under set receives a value and just

00:10:45,260 --> 00:10:53,920
store that value in the instance

00:10:49,190 --> 00:10:57,830
dictionary under the under gate

00:10:53,920 --> 00:11:01,100
retrieves that value with a default in

00:10:57,830 --> 00:11:06,980
case it's not yet it's not there yet and

00:11:01,100 --> 00:11:10,150
just return a greeting let's use it in

00:11:06,980 --> 00:11:15,100
the second column I define a new class

00:11:10,150 --> 00:11:18,640
helloworld - that has a class attribute

00:11:15,100 --> 00:11:22,959
again a class attribute that is a grid

00:11:18,640 --> 00:11:26,390
with an instance of this taylor i

00:11:22,959 --> 00:11:29,720
instance hello world - and if i access

00:11:26,390 --> 00:11:32,420
if I do hailer that grid that dunder

00:11:29,720 --> 00:11:33,320
gate will be executed that will return

00:11:32,420 --> 00:11:36,589
hello

00:11:33,320 --> 00:11:41,180
unknown because the instance 10 doesn't

00:11:36,589 --> 00:11:44,750
have the ho set the moment I do hail

00:11:41,180 --> 00:11:48,770
hail earth grid equals something that

00:11:44,750 --> 00:11:52,040
under set is executed and in this case I

00:11:48,770 --> 00:11:55,459
put the information in the instance and

00:11:52,040 --> 00:11:59,620
when I access the attribute again it

00:11:55,459 --> 00:11:59,620
just restore it and you

00:12:00,660 --> 00:12:05,519
okay yes or no

00:12:07,510 --> 00:12:19,690
okay we have two types of descriptors we

00:12:16,389 --> 00:12:22,920
have overriding descriptors and none of

00:12:19,690 --> 00:12:27,100
arriving descriptors this is where

00:12:22,920 --> 00:12:28,649
confusion start of charge but it's don't

00:12:27,100 --> 00:12:31,360
worry it's very simple

00:12:28,649 --> 00:12:34,420
they are just classified into groups

00:12:31,360 --> 00:12:36,699
because the behavior is a little

00:12:34,420 --> 00:12:40,000
different where the behavior is

00:12:36,699 --> 00:12:42,430
different here in the in the first

00:12:40,000 --> 00:12:45,370
column in the left we have an overriding

00:12:42,430 --> 00:12:49,420
descriptor see that we have a class that

00:12:45,370 --> 00:12:54,519
has both done their gate and under set

00:12:49,420 --> 00:12:59,050
methods in this case I use the

00:12:54,519 --> 00:12:59,529
descriptor here when I do see that the

00:12:59,050 --> 00:13:02,589
it

00:12:59,529 --> 00:13:04,990
execuse ticket and when I do see that

00:13:02,589 --> 00:13:08,470
the equal something I execute the set

00:13:04,990 --> 00:13:12,790
this is very similar to what we saw

00:13:08,470 --> 00:13:17,800
before more than very similar it's the

00:13:12,790 --> 00:13:24,569
same in the case of non overriding

00:13:17,800 --> 00:13:27,699
descriptors we do not have a set method

00:13:24,569 --> 00:13:32,829
the difference of not having a set

00:13:27,699 --> 00:13:36,250
matter is that when I use the descriptor

00:13:32,829 --> 00:13:38,800
if I do a CD of course it executes the

00:13:36,250 --> 00:13:44,050
gate but the moment I do see that the

00:13:38,800 --> 00:13:48,660
equal something they attribute V of the

00:13:44,050 --> 00:13:54,370
instant C is overwritten by this value

00:13:48,660 --> 00:13:58,959
so from this point on see that D is 1 2

00:13:54,370 --> 00:14:03,760
3 is no longer the descriptor in this

00:13:58,959 --> 00:14:09,060
case I execute this dunder set and from

00:14:03,760 --> 00:14:09,060
this point on see that D is still

00:14:11,340 --> 00:14:18,540
this is the only difference you have to

00:14:14,550 --> 00:14:21,510
be careful when you write your on

00:14:18,540 --> 00:14:24,900
descriptors because even if you don't

00:14:21,510 --> 00:14:27,900
want to put any special behavior in the

00:14:24,900 --> 00:14:31,380
set you need to be careful that if you

00:14:27,900 --> 00:14:34,140
don't specify the under set in your

00:14:31,380 --> 00:14:37,380
descriptor it may be overwritten of

00:14:34,140 --> 00:14:44,220
course it's a behavior that you may want

00:14:37,380 --> 00:14:47,610
to use we will see a very common case

00:14:44,220 --> 00:14:52,640
where that behaviors no number isin

00:14:47,610 --> 00:14:52,640
descriptor is used by you normal

00:14:57,340 --> 00:15:04,950
okay just for completeness we have

00:15:00,730 --> 00:15:12,070
another special metal that is dunder del

00:15:04,950 --> 00:15:21,670
that as you may imagine it's a specified

00:15:12,070 --> 00:15:25,810
code that is executed when you delete so

00:15:21,670 --> 00:15:29,950
in this case when you do del a C dot X

00:15:25,810 --> 00:15:32,140
if you arrive the the normal Python

00:15:29,950 --> 00:15:36,029
behavior of removing that attribute but

00:15:32,140 --> 00:15:37,890
you shall execute some code of yours

00:15:36,029 --> 00:15:43,180
okay

00:15:37,890 --> 00:15:45,880
one note here because when I present

00:15:43,180 --> 00:15:47,950
these examples you say oh my god yes you

00:15:45,880 --> 00:15:49,930
can do whatever you want with properties

00:15:47,950 --> 00:15:52,510
its instead of using descriptors

00:15:49,930 --> 00:15:55,990
manually yes you can do but the point of

00:15:52,510 --> 00:15:59,260
the talk is to talk about the scripture

00:15:55,990 --> 00:16:02,830
so and I cannot make the exam just too

00:15:59,260 --> 00:16:08,740
complicated that's it so let's go back

00:16:02,830 --> 00:16:14,250
to wizard wars and see how we use this

00:16:08,740 --> 00:16:17,560
descriptor theory in the in the practice

00:16:14,250 --> 00:16:20,830
remember this that we have the idea of

00:16:17,560 --> 00:16:25,720
having powers which encapsulate what the

00:16:20,830 --> 00:16:30,790
power can do and the character defining

00:16:25,720 --> 00:16:34,600
the the powers as class attributes and

00:16:30,790 --> 00:16:38,950
then being able to just instantiate a

00:16:34,600 --> 00:16:43,570
character try to see if the character

00:16:38,950 --> 00:16:46,920
can do some stuff asking through the

00:16:43,570 --> 00:16:51,450
power that the character has but also

00:16:46,920 --> 00:16:55,810
modifying the values of the powers like

00:16:51,450 --> 00:16:59,350
simple numbers this of course doesn't

00:16:55,810 --> 00:17:03,029
work if you just write this because some

00:16:59,350 --> 00:17:03,029
magic we needed to add some magic

00:17:05,110 --> 00:17:16,059
how we make this work okay we make this

00:17:11,750 --> 00:17:24,079
work not only using descriptors but also

00:17:16,059 --> 00:17:26,689
class decorators so the idea behind all

00:17:24,079 --> 00:17:29,389
the magic is that we have this power

00:17:26,689 --> 00:17:32,330
descriptor this is the first time I

00:17:29,389 --> 00:17:35,210
present the descriptor for the wizards

00:17:32,330 --> 00:17:38,360
and dwarfs case this is the only

00:17:35,210 --> 00:17:41,740
descriptor that we have this descriptor

00:17:38,360 --> 00:17:45,380
that has a under said and under gate

00:17:41,740 --> 00:17:50,230
when you instantiate it you get the name

00:17:45,380 --> 00:17:55,340
of the power and the class of the power

00:17:50,230 --> 00:17:59,510
so it can be magic and the class magic

00:17:55,340 --> 00:18:03,409
for the power you the final and the only

00:17:59,510 --> 00:18:05,840
thing that it does is just store in the

00:18:03,409 --> 00:18:06,620
instant dictionary very similar to the

00:18:05,840 --> 00:18:10,700
other example

00:18:06,620 --> 00:18:13,010
it just store the instance of the power

00:18:10,700 --> 00:18:16,039
class that is receiving with the value

00:18:13,010 --> 00:18:17,899
that is receiving and in the cache in

00:18:16,039 --> 00:18:22,549
the case of the under gate it just

00:18:17,899 --> 00:18:25,100
retrieves that how we make to this power

00:18:22,549 --> 00:18:28,820
the scripture to be used by the other

00:18:25,100 --> 00:18:35,210
parts of the system we have two class

00:18:28,820 --> 00:18:39,980
decorator we have this at power that get

00:18:35,210 --> 00:18:46,639
this very simple power class that you

00:18:39,980 --> 00:18:50,090
wrote and make two things for one on one

00:18:46,639 --> 00:18:55,389
on one hand it registers strength or

00:18:50,090 --> 00:19:02,409
magic as a power but also makes that

00:18:55,389 --> 00:19:02,409
these classes behave like numbers and

00:19:02,919 --> 00:19:11,210
then we have another class the corrector

00:19:07,070 --> 00:19:15,529
that is character that grabs the

00:19:11,210 --> 00:19:18,020
character you wrote and for the class

00:19:15,529 --> 00:19:23,900
attributes that you specify

00:19:18,020 --> 00:19:27,350
they're automatically converts them to

00:19:23,900 --> 00:19:28,309
be descriptors because they're you

00:19:27,350 --> 00:19:31,160
didn't specify

00:19:28,309 --> 00:19:33,950
you just put class descriptor sorry

00:19:31,160 --> 00:19:36,320
there you just put class attribute but

00:19:33,950 --> 00:19:43,100
these are not the scripture so it

00:19:36,320 --> 00:19:46,429
automatically converts them before going

00:19:43,100 --> 00:19:50,000
to more detail of the code let's see

00:19:46,429 --> 00:19:57,290
other cases where descriptors are used

00:19:50,000 --> 00:20:01,540
in real life so Python metals is the

00:19:57,290 --> 00:20:04,820
most normal case of using descriptors

00:20:01,540 --> 00:20:08,270
when you define a pet by a metal what is

00:20:04,820 --> 00:20:12,350
a metal really what is the death there

00:20:08,270 --> 00:20:16,340
is a function right and the function

00:20:12,350 --> 00:20:22,120
there where is the final function in the

00:20:16,340 --> 00:20:25,010
class so metal is a kind of class

00:20:22,120 --> 00:20:29,870
attribute and this works like a

00:20:25,010 --> 00:20:33,590
decrypter the descriptor getting reduced

00:20:29,870 --> 00:20:37,900
the best this magic so when you cool

00:20:33,590 --> 00:20:41,440
when you call food metal 1/2 that this

00:20:37,900 --> 00:20:46,840
special descriptor exercise is executed

00:20:41,440 --> 00:20:51,710
that calls the function u the final

00:20:46,840 --> 00:20:54,830
having a self in the front so the magic

00:20:51,710 --> 00:20:58,670
of automatically inserting itself when

00:20:54,830 --> 00:21:05,179
you call in a metal is done by the

00:20:58,670 --> 00:21:10,370
scripters and this is these are non-data

00:21:05,179 --> 00:21:13,340
descriptor so if you have an instance

00:21:10,370 --> 00:21:18,140
full and you do food metal equals

00:21:13,340 --> 00:21:19,910
something you override that name

00:21:18,140 --> 00:21:23,390
remember that we have two types of

00:21:19,910 --> 00:21:25,910
descriptor than one if you have dunder

00:21:23,390 --> 00:21:29,059
gate and under set the descriptor was

00:21:25,910 --> 00:21:31,489
executed and if you have if you only had

00:21:29,059 --> 00:21:34,369
under gate when you

00:21:31,489 --> 00:21:38,629
set the attribute you lost the original

00:21:34,369 --> 00:21:43,539
descriptors methyls works like that if

00:21:38,629 --> 00:21:46,399
you are if you set a name or something

00:21:43,539 --> 00:21:49,309
with the name of the method you lose the

00:21:46,399 --> 00:21:55,879
method in an instance Python works like

00:21:49,309 --> 00:21:58,669
that so the angle most of the magic in

00:21:55,879 --> 00:22:01,339
models declaration of the angle is done

00:21:58,669 --> 00:22:05,599
by the scripters the very same way that

00:22:01,339 --> 00:22:09,229
I put the powers in the characters

00:22:05,599 --> 00:22:12,710
before you shall specify stuff at the

00:22:09,229 --> 00:22:18,019
class level and it works how that is

00:22:12,710 --> 00:22:21,919
work they are descriptors did you ever

00:22:18,019 --> 00:22:25,009
use a slot slot also work through the

00:22:21,919 --> 00:22:28,249
scripters with a very detail that it's

00:22:25,009 --> 00:22:32,059
not implemented in Python really but it

00:22:28,249 --> 00:22:37,059
uses the descriptors API directly from C

00:22:32,059 --> 00:22:45,879
but it also uses descriptors the concept

00:22:37,059 --> 00:22:49,129
how are we going with the time okay so

00:22:45,879 --> 00:22:51,049
we have time for the for the bonus track

00:22:49,129 --> 00:22:53,869
that is where we get into the class

00:22:51,049 --> 00:22:59,029
decorator and the detail of the code to

00:22:53,869 --> 00:23:01,399
make that game ball work before going

00:22:59,029 --> 00:23:03,289
into the detail of the code I wanted to

00:23:01,399 --> 00:23:05,779
present a little about class decorator

00:23:03,289 --> 00:23:08,649
because it's not a common topic class

00:23:05,779 --> 00:23:10,039
decorator I don't know if you ever have

00:23:08,649 --> 00:23:15,409
about

00:23:10,039 --> 00:23:18,889
please raise your hands if you ever see

00:23:15,409 --> 00:23:21,049
a classic writer before awesome I'm

00:23:18,889 --> 00:23:24,979
raise your hand if you saw a normal

00:23:21,049 --> 00:23:27,499
decorator before so this is very simple

00:23:24,979 --> 00:23:30,109
a classic character is a function that

00:23:27,499 --> 00:23:32,509
receives a class and returns the under

00:23:30,109 --> 00:23:35,690
returns a class is the same that the

00:23:32,509 --> 00:23:40,639
function decorator but for classes is

00:23:35,690 --> 00:23:43,639
the same concept if you have an a

00:23:40,639 --> 00:23:45,230
definition of class foo whatever for is

00:23:43,639 --> 00:23:47,390
the class with the final

00:23:45,230 --> 00:23:50,510
but if they will have a class definition

00:23:47,390 --> 00:23:55,040
with a decorator who is not what the

00:23:50,510 --> 00:23:58,400
final foo is the class by that

00:23:55,040 --> 00:24:00,410
decorator which receiveth the class with

00:23:58,400 --> 00:24:04,010
that with the final at this whatever he

00:24:00,410 --> 00:24:06,230
wants with it is the same done doing for

00:24:04,010 --> 00:24:11,600
equal the greater for the very same

00:24:06,230 --> 00:24:13,940
thing that function decorators so how

00:24:11,600 --> 00:24:19,070
did we use it in the in the ball game

00:24:13,940 --> 00:24:21,679
this is the power the class decorator

00:24:19,070 --> 00:24:25,429
that I mentioned before that you just

00:24:21,679 --> 00:24:28,820
put it in the very simple power class

00:24:25,429 --> 00:24:31,280
that you define and makes it magic see

00:24:28,820 --> 00:24:35,000
what it does disco is not really simple

00:24:31,280 --> 00:24:38,960
but we can make it understandable the

00:24:35,000 --> 00:24:43,309
power receives a class the class is this

00:24:38,960 --> 00:24:48,280
one and the power decorator creates

00:24:43,309 --> 00:24:54,490
another class a new class with a type

00:24:48,280 --> 00:25:00,730
function that inherits this very class

00:24:54,490 --> 00:25:05,690
but also in heads float and this is how

00:25:00,730 --> 00:25:11,240
the behavior of a number is inserted to

00:25:05,690 --> 00:25:16,160
the power and also resistors that class

00:25:11,240 --> 00:25:18,760
name in a global dictionary that will be

00:25:16,160 --> 00:25:18,760
used later

00:25:25,090 --> 00:25:31,720
also we have another class decorator

00:25:28,120 --> 00:25:34,809
that was character that we applied when

00:25:31,720 --> 00:25:38,169
we define characters character the

00:25:34,809 --> 00:25:44,549
classic character just get there

00:25:38,169 --> 00:25:49,419
register and powers and if we have a

00:25:44,549 --> 00:25:53,620
class attribute in the class that is

00:25:49,419 --> 00:25:58,779
receivable that has the same name of a

00:25:53,620 --> 00:26:03,039
history power like strength or magic in

00:25:58,779 --> 00:26:07,529
this example it replaces it it replaces

00:26:03,039 --> 00:26:10,539
it see that cetera it replaces it with a

00:26:07,529 --> 00:26:13,659
descriptor that is our power descriptor

00:26:10,539 --> 00:26:16,749
that is the only descriptor that we use

00:26:13,659 --> 00:26:18,879
in this in the system it replaces it

00:26:16,749 --> 00:26:21,820
with that power descriptor that holds

00:26:18,879 --> 00:26:28,809
the name of the of the power and the

00:26:21,820 --> 00:26:31,240
class of the power this is how you are

00:26:28,809 --> 00:26:35,679
being able to write this very simple

00:26:31,240 --> 00:26:38,710
code to make the ball game without even

00:26:35,679 --> 00:26:45,429
noticing that the scripters works in the

00:26:38,710 --> 00:26:48,190
back okay that's all it wasn't that hard

00:26:45,429 --> 00:26:54,159
the concept that I want for you to take

00:26:48,190 --> 00:26:58,269
here is that the scripters allows you to

00:26:54,159 --> 00:27:00,220
get into the normal Python behavior when

00:26:58,269 --> 00:27:03,539
you get an attribute when you set an

00:27:00,220 --> 00:27:03,539
attribute and we delete an attribute

00:27:03,779 --> 00:27:09,159
that we you have two types of

00:27:06,460 --> 00:27:12,340
descriptors those two types of

00:27:09,159 --> 00:27:15,549
descriptors the difference is that in

00:27:12,340 --> 00:27:17,889
one case when you set an attribute the

00:27:15,549 --> 00:27:21,879
code of the descriptor is executed and

00:27:17,889 --> 00:27:25,240
in the other type of descriptors when

00:27:21,879 --> 00:27:27,549
you say when you set the attribute the

00:27:25,240 --> 00:27:32,889
descriptor is removal from the instance

00:27:27,549 --> 00:27:36,710
overwritten and also the idea that I

00:27:32,889 --> 00:27:42,080
want for you to take from here is that

00:27:36,710 --> 00:27:45,200
if it's not deep magic that okay it

00:27:42,080 --> 00:27:50,410
maybe it's useful for me to understand

00:27:45,200 --> 00:27:52,880
because I may hit some cold some when I

00:27:50,410 --> 00:27:56,060
need to understand it but that is

00:27:52,880 --> 00:27:57,890
something that you can really use in the

00:27:56,060 --> 00:28:00,860
cases that you want to get in the middle

00:27:57,890 --> 00:28:04,030
of the call so take it in mind and when

00:28:00,860 --> 00:28:08,090
you need to solve some specific stuff

00:28:04,030 --> 00:28:12,650
descriptors may be useful for you in

00:28:08,090 --> 00:28:15,320
this very presentation that is already

00:28:12,650 --> 00:28:20,900
published in the web you can see the

00:28:15,320 --> 00:28:24,950
code you can see something but there is

00:28:20,900 --> 00:28:27,260
the every all the code for making

00:28:24,950 --> 00:28:31,340
everything work so if you are interested

00:28:27,260 --> 00:28:36,440
go paste that into a couple of dot pi

00:28:31,340 --> 00:28:38,570
and start to play some legal stuff

00:28:36,440 --> 00:28:42,320
because I know maybe make it short and

00:28:38,570 --> 00:28:48,250
didn't say what I say that the save and

00:28:42,320 --> 00:28:48,250
that's all thank you

00:28:49,529 --> 00:28:57,769
with Lysa here and if you have any

00:28:53,639 --> 00:28:57,769
question I'm very glad to

00:29:10,410 --> 00:29:16,470
okay I find this the script our thing

00:29:14,460 --> 00:29:18,750
quite appealing because it's like an

00:29:16,470 --> 00:29:20,790
alternative to when you have to do meta

00:29:18,750 --> 00:29:24,000
programming to insert things and stuff

00:29:20,790 --> 00:29:27,720
like that but I'm wondering how is it

00:29:24,000 --> 00:29:30,510
about how hard is it prepared to meet a

00:29:27,720 --> 00:29:40,530
programming or doing everything more

00:29:30,510 --> 00:29:45,710
clean it's not hard at all because you

00:29:40,530 --> 00:29:45,710
have to think it like you are doing

00:29:46,730 --> 00:29:54,050
funny function calls I mean you have a

00:29:51,360 --> 00:29:54,050
code like this

00:30:07,810 --> 00:30:13,240
you have a call like this and the only

00:30:10,360 --> 00:30:15,880
thing the only thing that you need to

00:30:13,240 --> 00:30:17,800
take in consideration that in the case

00:30:15,880 --> 00:30:23,650
for example of doing

00:30:17,800 --> 00:30:25,960
Gimli dot strength equal whatever you

00:30:23,650 --> 00:30:28,930
are doing a function call at that point

00:30:25,960 --> 00:30:31,510
so when you when you when you read your

00:30:28,930 --> 00:30:34,840
call and you know that your accent

00:30:31,510 --> 00:30:38,560
accessing a descriptor you you know that

00:30:34,840 --> 00:30:40,960
in that case you're getting to something

00:30:38,560 --> 00:30:42,910
to that part of the code and that's all

00:30:40,960 --> 00:30:46,600
you the moment you understand that you

00:30:42,910 --> 00:30:49,990
can easily follow the flow of the

00:30:46,600 --> 00:30:52,210
execution so when you are doing the well

00:30:49,990 --> 00:30:56,650
I was more referring to the last part

00:30:52,210 --> 00:31:00,280
where you actually use type to create

00:30:56,650 --> 00:31:04,110
class inserting the methods so I was

00:31:00,280 --> 00:31:04,110
more referring to the body in that part

00:31:12,600 --> 00:31:19,630
it actually when we created the

00:31:17,290 --> 00:31:22,480
presentation it was three times more

00:31:19,630 --> 00:31:25,420
complex everything we found that the way

00:31:22,480 --> 00:31:40,000
to make it simple like this is not

00:31:25,420 --> 00:31:44,260
simple looks like is looking at the name

00:31:40,000 --> 00:31:46,180
of the attribute not the actual class so

00:31:44,260 --> 00:31:48,490
if I call if I'm the class character I

00:31:46,180 --> 00:31:53,740
call something strengths but then I do

00:31:48,490 --> 00:31:58,900
equal to there's nothing to do with this

00:31:53,740 --> 00:32:01,240
yes if you if you misspell this you it

00:31:58,900 --> 00:32:04,840
will fail you can you could check for

00:32:01,240 --> 00:32:08,590
the instance and the class name

00:32:04,840 --> 00:32:10,720
we'll be more robust so you should check

00:32:08,590 --> 00:32:17,860
in theory on the right and not on the

00:32:10,720 --> 00:32:22,240
left to be more you could it will be

00:32:17,860 --> 00:32:24,640
better this works I mean this whole

00:32:22,240 --> 00:32:26,710
ballgame thing whatever it's just an

00:32:24,640 --> 00:32:30,190
excuse for the top with really didn't

00:32:26,710 --> 00:32:34,529
this for for real but this is just an

00:32:30,190 --> 00:32:34,529
excuse to to use the scriptures and well

00:32:38,880 --> 00:32:47,370
in the get and set before in the others

00:32:42,700 --> 00:32:49,720
life and not said after possible because

00:32:47,370 --> 00:32:53,289
is it because you can't use it there may

00:32:49,720 --> 00:32:56,620
be sorry when well in the end Thunder

00:32:53,289 --> 00:33:01,529
gate and under said before it's

00:32:56,620 --> 00:33:01,529
accessing done descriptor

00:33:03,730 --> 00:33:18,590
here yeah we're not doing set after

00:33:08,320 --> 00:33:20,300
doesn't work maybe I don't remember now

00:33:18,590 --> 00:33:23,920
but I think that is a case of where it

00:33:20,300 --> 00:33:23,920
doesn't work I don't remember why

00:33:27,040 --> 00:33:35,420
all right right if you if you access if

00:33:31,400 --> 00:33:37,940
you if you do instance dot or well say

00:33:35,420 --> 00:33:41,780
that our instance name and the value it

00:33:37,940 --> 00:33:44,000
will be calling the descriptor itself so

00:33:41,780 --> 00:33:49,940
you don't you don't set the attribute is

00:33:44,000 --> 00:33:53,990
just mess with the dick okay so how do

00:33:49,940 --> 00:33:57,860
you deal with inheritance when using

00:33:53,990 --> 00:34:00,220
cross descriptors well that's a very

00:33:57,860 --> 00:34:03,410
this is interesting question because

00:34:00,220 --> 00:34:05,840
this is one case where you cannot use

00:34:03,410 --> 00:34:09,169
properties because I mean you're

00:34:05,840 --> 00:34:11,240
encapsulating call and you want to use

00:34:09,169 --> 00:34:13,640
her inheritance so you cannot use

00:34:11,240 --> 00:34:17,419
property anymore you need to use proper

00:34:13,640 --> 00:34:20,660
descriptors you just use it it just

00:34:17,419 --> 00:34:26,000
works there is no magic there you can

00:34:20,660 --> 00:34:29,210
have parent classes with the other

00:34:26,000 --> 00:34:33,230
methods or whatever the descripton

00:34:29,210 --> 00:34:35,810
inherited and so basically you have to

00:34:33,230 --> 00:34:40,370
put class decorator in both parent and

00:34:35,810 --> 00:34:45,140
child class but the decorator but when

00:34:40,370 --> 00:34:47,000
you see it in this case no in class

00:34:45,140 --> 00:34:53,419
decorators for a character for example

00:34:47,000 --> 00:34:55,790
it does some magic with applying in that

00:34:53,419 --> 00:34:59,120
case I don't know if I didn't try it I

00:34:55,790 --> 00:35:02,060
mean it's I remember this this whole

00:34:59,120 --> 00:35:03,680
board game power character whatever it's

00:35:02,060 --> 00:35:05,770
just an excuse for the presentation we

00:35:03,680 --> 00:35:11,180
didn't use it in production or anything

00:35:05,770 --> 00:35:14,890
so I wouldn't want to follow the call

00:35:11,180 --> 00:35:14,890
now I didn't right

00:35:15,330 --> 00:35:24,520
there is another one in the previous

00:35:18,880 --> 00:35:26,890
slide with here with the power decorator

00:35:24,520 --> 00:35:30,490
is there any reason where you are

00:35:26,890 --> 00:35:33,070
setting the value into the instance

00:35:30,490 --> 00:35:36,670
dictionary and not into the power

00:35:33,070 --> 00:35:41,290
descriptor instance itself yes because

00:35:36,670 --> 00:35:45,400
the power descriptor will use maybe

00:35:41,290 --> 00:35:47,290
apply to different distances so it's a

00:35:45,400 --> 00:35:51,310
normal behavior maybe not in this case

00:35:47,290 --> 00:35:52,720
but you may have this descriptor

00:35:51,310 --> 00:35:56,050
instance to be applied to different

00:35:52,720 --> 00:35:59,440
attributes so you normally star the

00:35:56,050 --> 00:36:04,060
stuff into the instance it's what you

00:35:59,440 --> 00:36:06,820
normally see in everybody does but what

00:36:04,060 --> 00:36:11,590
if another descriptor wants to instant

00:36:06,820 --> 00:36:13,510
Watts to access the same key it doesn't

00:36:11,590 --> 00:36:15,369
happen in this case if you have that

00:36:13,510 --> 00:36:16,240
case you can store it whatever you want

00:36:15,369 --> 00:36:19,450
okay

00:36:16,240 --> 00:36:21,580
thank you it's I mean there is no Python

00:36:19,450 --> 00:36:24,160
magic here you just put stuff in some

00:36:21,580 --> 00:36:27,670
places and the new city I mean you could

00:36:24,160 --> 00:36:31,810
you could have a global dictionary with

00:36:27,670 --> 00:36:34,390
the key being the instance and the name

00:36:31,810 --> 00:36:37,619
and access that global dictionary

00:36:34,390 --> 00:36:40,599
instead of storing stuff in the instance

00:36:37,619 --> 00:36:45,820
you can pickle it you can send it to the

00:36:40,599 --> 00:36:48,730
database that is pretty normal for the

00:36:45,820 --> 00:36:54,490
descriptors to mess with the with the

00:36:48,730 --> 00:36:57,280
instance leaked great tool thank you

00:36:54,490 --> 00:37:00,369
the question can you explain why we are

00:36:57,280 --> 00:37:02,290
initializing the descriptors inside the

00:37:00,369 --> 00:37:05,170
class and not for example in the dunder

00:37:02,290 --> 00:37:10,800
init and can we change the descriptor

00:37:05,170 --> 00:37:10,800
during the runtime not on this slide

00:37:11,040 --> 00:37:21,570
here on the class you initial strength

00:37:17,950 --> 00:37:21,570
and magic inside the class

00:37:24,630 --> 00:37:32,460
I'm in the construction of the strength

00:37:28,710 --> 00:37:35,790
and magic they what the construction

00:37:32,460 --> 00:37:37,950
they're the sensation because it it

00:37:35,790 --> 00:37:43,890
needs to be a class descriptor if it's

00:37:37,950 --> 00:37:46,140
not a class descriptor if it's not it

00:37:43,890 --> 00:37:49,080
doesn't work like a descriptor sorry

00:37:46,140 --> 00:37:52,290
sorry if it's not a class attribute it

00:37:49,080 --> 00:37:55,650
doesn't work as a descriptor the magic

00:37:52,290 --> 00:38:01,800
of have a class having yet or said I'm

00:37:55,650 --> 00:38:07,140
being a descriptor it's only executed

00:38:01,800 --> 00:38:09,690
when that is a class attribute so also

00:38:07,140 --> 00:38:11,880
see here that in the moment of

00:38:09,690 --> 00:38:16,500
instantiation I'm doing self dot

00:38:11,880 --> 00:38:19,500
strength equal strength and also at this

00:38:16,500 --> 00:38:22,430
very same moment I miss getting the the

00:38:19,500 --> 00:38:22,430
descriptors code

00:38:26,160 --> 00:38:35,660
thank you I think that's the last of our

00:38:28,500 --> 00:38:35,660

YouTube URL: https://www.youtube.com/watch?v=mnWdB99K-mA


