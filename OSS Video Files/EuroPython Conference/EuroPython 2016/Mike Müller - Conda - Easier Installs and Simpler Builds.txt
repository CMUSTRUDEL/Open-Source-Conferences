Title: Mike Müller - Conda - Easier Installs and Simpler Builds
Publication date: 2016-07-29
Playlist: EuroPython 2016
Description: 
	Mike Müller - Conda - Easier Installs and Simpler Builds
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(https://ep2016.europython.eu//conference/talks/conda-easier-installs-and-simpler-builds)

Learn about `conda`, the package installer from the scientific
community. It offers very interesting features that can improve your
installation experience considerably.  The talk gives an overview of
the basic usage of `conda`.  It covers the topics installation and
building of packages.
`conda` can be combined with `pip`  to use all PyPi packages. Its
cross-platform and multi-languages features combined with power
environments can help to improve your productivity.

-----

The BSD license `conda` is a package installer for Python and other languages.
While it originates form the scientific Python community, it can be
really useful for
all Python programmers.

Installation of Python packages has become much simpler over the last years.
The use of  `pip`  and `virtualenv` simplify the installation of
Python packages a lot.
However,  they are specific to Python.  The Python-agnostic `conda`
has advantages
for packages with C or Fortran extension that are very common for
scientific libraries.
`conda` is cross-platform. According to different statistics,  the
most Python users work on Windows. Often is especially complicate to
get extensions with many dependencies installer on this platform.
`conda` facilities the installation for Windows considerably.

This talk introduces the basic usage of  `conda` to install packages.
This includes the basic commands for searching  and installing of
packages. Furthermore, the talk demonstrates the creation of
environments for different Python versions and combinations of
packages.

The building of a packages is simple. The talk shows how to build
recipes that contain declarations of dependencies .

`conda` can work together  with `pip`. This allows to use all packages
from the Python Package Index ( PyPI). The talk explains the concept
of channels that allow to get packages from different sources.
Captions: 
	00:00:00,890 --> 00:00:04,380
okay everyone give Mike Mueller a big

00:00:03,449 --> 00:00:13,410
hand he's going to talk to us about

00:00:04,380 --> 00:00:15,809
Conda thank you very much for the great

00:00:13,410 --> 00:00:16,529
introduction I would like to talk about

00:00:15,809 --> 00:00:18,420
Conda

00:00:16,529 --> 00:00:21,300
these are installs and simple builds

00:00:18,420 --> 00:00:25,590
just we are quick raise of hands who of

00:00:21,300 --> 00:00:28,970
you knows what Conda is the third and

00:00:25,590 --> 00:00:33,710
who is actually using an AK using Conda

00:00:28,970 --> 00:00:37,260
just about 20% okay thank you very much

00:00:33,710 --> 00:00:40,230
Conda is quite a few things actually

00:00:37,260 --> 00:00:41,360
it's an installer similar to Pitt but I

00:00:40,230 --> 00:00:43,739
think a bit better

00:00:41,360 --> 00:00:45,930
that's an environment manager similar to

00:00:43,739 --> 00:00:47,910
a virtual end but still a bit better

00:00:45,930 --> 00:00:51,600
it's cross-platform their works on

00:00:47,910 --> 00:00:52,890
Windows Linux and Mac it's not limited

00:00:51,600 --> 00:00:54,539
to Python so you can use it for

00:00:52,890 --> 00:00:55,980
different languages actually there's

00:00:54,539 --> 00:00:58,890
people using for Ruby and follow

00:00:55,980 --> 00:01:01,079
languages and actually it comes from the

00:00:58,890 --> 00:01:05,100
scientific community but I think it can

00:01:01,079 --> 00:01:07,890
be useful for every Python programmer so

00:01:05,100 --> 00:01:09,689
it's PC license and typically you

00:01:07,890 --> 00:01:11,520
install it at the either install me

00:01:09,689 --> 00:01:14,400
Condor or anaconda I will talk about

00:01:11,520 --> 00:01:16,470
this different condors here today us

00:01:14,400 --> 00:01:18,799
what's called mini Condor and it's a

00:01:16,470 --> 00:01:22,530
kind of a small bootstrap like version

00:01:18,799 --> 00:01:26,790
includes Python itself Conda and a bunch

00:01:22,530 --> 00:01:30,150
of dependencies right Pip and wheel and

00:01:26,790 --> 00:01:32,040
start up some other tools and it

00:01:30,150 --> 00:01:33,509
provides access to many hundred

00:01:32,040 --> 00:01:35,700
libraries you can install a lot of

00:01:33,509 --> 00:01:38,460
libraries with Ronda maybe even

00:01:35,700 --> 00:01:39,990
thousands and you just need to say Conda

00:01:38,460 --> 00:01:41,939
install either talked about this process

00:01:39,990 --> 00:01:45,240
a little bit and there's something

00:01:41,939 --> 00:01:47,040
called anaconda which is a different

00:01:45,240 --> 00:01:48,689
thing it's a distribution similar to

00:01:47,040 --> 00:01:50,790
like if you like a Linux distribution so

00:01:48,689 --> 00:01:53,700
you get pison packaged up with a bunch

00:01:50,790 --> 00:01:55,320
of scientific applications and this

00:01:53,700 --> 00:01:57,479
includes of course Python Conda Conda

00:01:55,320 --> 00:01:59,990
install and is about more or less like

00:01:57,479 --> 00:02:02,159
scientific - another big factor so good

00:01:59,990 --> 00:02:03,930
so supposed to be there

00:02:02,159 --> 00:02:05,909
but scientific package is about 200 or

00:02:03,930 --> 00:02:08,640
so and if you install it it takes about

00:02:05,909 --> 00:02:10,319
two gigs of your hard drive but then I

00:02:08,640 --> 00:02:11,700
think a lot of scientists need a lot of

00:02:10,319 --> 00:02:13,280
these tools and you don't have to fiddle

00:02:11,700 --> 00:02:15,319
around installing the whole separate

00:02:13,280 --> 00:02:17,240
they'll come in one thing and then then

00:02:15,319 --> 00:02:19,040
a bill you pay that the price was some

00:02:17,240 --> 00:02:22,310
disk space but this space is cheap and

00:02:19,040 --> 00:02:23,660
programs time it's expensive and there's

00:02:22,310 --> 00:02:25,850
something called channels so then you

00:02:23,660 --> 00:02:27,709
install something this Conda Conda looks

00:02:25,850 --> 00:02:29,569
for channel and channel channel is the

00:02:27,709 --> 00:02:32,090
place somewhere so I'm going to internet

00:02:29,569 --> 00:02:34,819
was maybe even your own machine that

00:02:32,090 --> 00:02:38,510
doesn't it's also possible that looks

00:02:34,819 --> 00:02:39,860
for packages and the default is anaconda

00:02:38,510 --> 00:02:41,750
service so we don't see anything typical

00:02:39,860 --> 00:02:44,230
oops there but there's also something

00:02:41,750 --> 00:02:47,060
called Kanta porch which is a channel

00:02:44,230 --> 00:02:49,459
there's a lot of open source packages by

00:02:47,060 --> 00:02:51,260
the Python community but you can also

00:02:49,459 --> 00:02:52,400
have private channels so you can have a

00:02:51,260 --> 00:02:54,410
channel that's your own name these are

00:02:52,400 --> 00:02:56,690
company name whatever and then you can

00:02:54,410 --> 00:03:00,230
install from this channel but instead

00:02:56,690 --> 00:03:01,519
say install that you see my channel my

00:03:00,230 --> 00:03:03,410
channel is the name of the channel and

00:03:01,519 --> 00:03:05,180
then it will grab the package from this

00:03:03,410 --> 00:03:06,920
channel will be included there's also a

00:03:05,180 --> 00:03:08,630
lot of configuration options which

00:03:06,920 --> 00:03:10,850
channel thunders precedents of each

00:03:08,630 --> 00:03:14,630
channels look first you can consider

00:03:10,850 --> 00:03:16,130
this in a configuration file ok a few

00:03:14,630 --> 00:03:18,470
basic tasks I want to introduce you to

00:03:16,130 --> 00:03:20,269
what you can do with it that's by no

00:03:18,470 --> 00:03:22,190
means a comprehensive introduction but

00:03:20,269 --> 00:03:25,280
gives you some feeling but he can do so

00:03:22,190 --> 00:03:28,370
you can install packages you can clean

00:03:25,280 --> 00:03:31,150
create and administer environments and

00:03:28,370 --> 00:03:33,739
you also can create packages yourself

00:03:31,150 --> 00:03:35,810
writing a set up dot pi as you know and

00:03:33,739 --> 00:03:39,560
doing a lot of steps to create the

00:03:35,810 --> 00:03:42,170
packages conductivity the first thing

00:03:39,560 --> 00:03:44,269
you can search for something so you say

00:03:42,170 --> 00:03:46,820
Condor search and you type in the name

00:03:44,269 --> 00:03:48,739
of the package you looking for I use

00:03:46,820 --> 00:03:51,079
pandas pandas is very much used

00:03:48,739 --> 00:03:53,239
package and scientific library and then

00:03:51,079 --> 00:03:55,970
corner goes out there and is searching

00:03:53,239 --> 00:03:57,530
places so I added Condor added a few

00:03:55,970 --> 00:03:59,780
channels you see every dot you see there

00:03:57,530 --> 00:04:01,700
fetching packages dot dot dot dot when

00:03:59,780 --> 00:04:03,560
every dot means looking for channel so I

00:04:01,700 --> 00:04:05,120
had find a bunch of channels it's

00:04:03,560 --> 00:04:07,040
looking at and then gives you a long

00:04:05,120 --> 00:04:08,269
display at just cut up out of a few

00:04:07,040 --> 00:04:10,640
things then you see the three dots yeah

00:04:08,269 --> 00:04:13,459
it's cut out and at least you those then

00:04:10,640 --> 00:04:14,900
the package so everything this search

00:04:13,459 --> 00:04:17,060
looks for everything has pandas in its

00:04:14,900 --> 00:04:18,859
name and shows you the version that's

00:04:17,060 --> 00:04:21,560
available though all this versus

00:04:18,859 --> 00:04:24,470
unavailable is normal one dot dot here

00:04:21,560 --> 00:04:26,539
means it is available and it's

00:04:24,470 --> 00:04:27,139
downloaded so it when you when you down

00:04:26,539 --> 00:04:28,909
menu

00:04:27,139 --> 00:04:31,129
or something it puts it in the local

00:04:28,909 --> 00:04:32,389
repository and you install from there

00:04:31,129 --> 00:04:34,129
you don't have to download it every time

00:04:32,389 --> 00:04:35,659
and the one business star here is

00:04:34,129 --> 00:04:38,330
Asterix that's the one I have installed

00:04:35,659 --> 00:04:40,129
right now yeah and you see if they had a

00:04:38,330 --> 00:04:43,900
dependency an umpire was the scientific

00:04:40,129 --> 00:04:47,270
focus tells you have numpy 1.10 and

00:04:43,900 --> 00:04:49,159
tyson 35 and bill at zero and it comes

00:04:47,270 --> 00:04:50,539
from defaults which is from anaconda but

00:04:49,159 --> 00:04:51,919
there's also a version that comes from

00:04:50,539 --> 00:04:53,629
counter for so it gives you the channel

00:04:51,919 --> 00:04:55,159
here that comes from but this very

00:04:53,629 --> 00:04:57,889
interesting can be very long list and

00:04:55,159 --> 00:04:59,689
but it shows you what you have so it's

00:04:57,889 --> 00:05:01,370
easy bit longer here and by to cut out

00:04:59,689 --> 00:05:05,240
quite a few this can be several pages

00:05:01,370 --> 00:05:08,300
long easily okay the search can be it

00:05:05,240 --> 00:05:09,710
more fancy so yeah that's a problem have

00:05:08,300 --> 00:05:12,409
a pipping you search for something into

00:05:09,710 --> 00:05:14,029
jobs for jungle it just gives you I

00:05:12,409 --> 00:05:15,680
don't know how much a very very very

00:05:14,029 --> 00:05:17,389
long listing this everything has got

00:05:15,680 --> 00:05:19,610
Django inside here you can say for the

00:05:17,389 --> 00:05:21,860
full name and now displace only the

00:05:19,610 --> 00:05:23,569
package it's called pandas not all the

00:05:21,860 --> 00:05:25,699
packages left Anderson in their name and

00:05:23,569 --> 00:05:27,770
now I get only pandas it's still pretty

00:05:25,699 --> 00:05:30,050
long list but as much truth already and

00:05:27,770 --> 00:05:32,650
I know that's pandas and that's a good

00:05:30,050 --> 00:05:34,879
feature and there's more so you can also

00:05:32,650 --> 00:05:37,550
limit the search you say I want to have

00:05:34,879 --> 00:05:39,080
only even though I did it on my Mac I

00:05:37,550 --> 00:05:42,169
can search for all the available

00:05:39,080 --> 00:05:44,930
packages for Windows 22 and I also can

00:05:42,169 --> 00:05:49,580
specify the version I want now shows you

00:05:44,930 --> 00:05:52,550
all the available packages for at

00:05:49,580 --> 00:05:54,860
Larssen 0.18 one and it tells me okay

00:05:52,550 --> 00:05:57,649
yeah now it offers everything starting

00:05:54,860 --> 00:06:00,589
this is numpy one ten thousand to seven

00:05:57,649 --> 00:06:02,479
up to one pi vampire one eleven thousand

00:06:00,589 --> 00:06:05,060
three five so there's no dots are no uh

00:06:02,479 --> 00:06:07,069
stressed because obviously I if I wanna

00:06:05,060 --> 00:06:09,080
make it does no need to download it here

00:06:07,069 --> 00:06:10,759
so that's it's not there but this would

00:06:09,080 --> 00:06:12,860
be available but downloaded and they all

00:06:10,759 --> 00:06:14,569
come from defaults and there are some

00:06:12,860 --> 00:06:17,930
more options if you want there's quite a

00:06:14,569 --> 00:06:19,939
few switches you can use and can make

00:06:17,930 --> 00:06:22,939
the search even more specific for the

00:06:19,939 --> 00:06:24,919
interesting picture installing a picture

00:06:22,939 --> 00:06:26,870
is very easy you just say Condor install

00:06:24,919 --> 00:06:29,240
and you name the package and it goes

00:06:26,870 --> 00:06:31,339
through your channels and you can either

00:06:29,240 --> 00:06:32,930
contact finds it the Chandler comes for

00:06:31,339 --> 00:06:36,169
also takes on this channel and see now

00:06:32,930 --> 00:06:37,699
it provides me is a name I wanna install

00:06:36,169 --> 00:06:39,050
this package and typically tells I'm

00:06:37,699 --> 00:06:40,310
going to download here doesn't say

00:06:39,050 --> 00:06:42,440
because I've done it already

00:06:40,310 --> 00:06:44,360
typical is okay I need to download these

00:06:42,440 --> 00:06:46,490
packages and then I install these ones

00:06:44,360 --> 00:06:48,970
like MK else mask on a library other

00:06:46,490 --> 00:06:52,580
dependencies typically if they have a

00:06:48,970 --> 00:06:54,410
properly packaged application in a

00:06:52,580 --> 00:06:55,970
Kannada package and all the dependencies

00:06:54,410 --> 00:06:58,040
are there installed all the dependencies

00:06:55,970 --> 00:07:00,680
and everything's binaries everything

00:06:58,040 --> 00:07:02,540
especially a scientific field there's a

00:07:00,680 --> 00:07:04,910
lot of C and Fortran extensions and

00:07:02,540 --> 00:07:07,820
compiling these things typically works

00:07:04,910 --> 00:07:09,860
on Linux it might work on OS X and it's

00:07:07,820 --> 00:07:11,630
right like it doesn't work on Windows so

00:07:09,860 --> 00:07:13,669
that's why it's the and still I think

00:07:11,630 --> 00:07:16,400
most people still Windows users so the

00:07:13,669 --> 00:07:18,350
most users of Python I think are on

00:07:16,400 --> 00:07:20,000
Windows as according to all the

00:07:18,350 --> 00:07:21,500
statistic I thought about and a lot of

00:07:20,000 --> 00:07:23,930
scientists and a lot of engineers so I

00:07:21,500 --> 00:07:25,669
teach a lot of Engineers and most of the

00:07:23,930 --> 00:07:27,320
engineering companies of most actresses

00:07:25,669 --> 00:07:29,150
in Windows some of them have used in

00:07:27,320 --> 00:07:30,890
Linux but by far the biggest majority

00:07:29,150 --> 00:07:32,900
and Windows so you need to support

00:07:30,890 --> 00:07:37,460
Windows users and it's a pretty good way

00:07:32,900 --> 00:07:39,800
everything is finery and you can okay

00:07:37,460 --> 00:07:41,600
create an environment so this is the

00:07:39,800 --> 00:07:43,160
first thing installing something but

00:07:41,600 --> 00:07:44,690
very often you don't run install and do

00:07:43,160 --> 00:07:46,580
what's called their root environment you

00:07:44,690 --> 00:07:47,930
want create environment and that's what

00:07:46,580 --> 00:07:51,229
is this command up here you can see

00:07:47,930 --> 00:07:53,330
contact create - n or - - name so I

00:07:51,229 --> 00:07:57,770
create a new environment which I call my

00:07:53,330 --> 00:07:59,390
PI 35 and I can specify the Python

00:07:57,770 --> 00:08:03,020
version and I say I want to have pison

00:07:59,390 --> 00:08:04,550
3.5 and you can also have if you wanted

00:08:03,020 --> 00:08:06,590
to could have a three point four or two

00:08:04,550 --> 00:08:08,990
point seven or even two point six so far

00:08:06,590 --> 00:08:11,450
it supports two point six two point

00:08:08,990 --> 00:08:12,830
seven I'm not sure three point three

00:08:11,450 --> 00:08:15,500
about three point four three point five

00:08:12,830 --> 00:08:17,090
and we are pretty quick as soon as three

00:08:15,500 --> 00:08:19,370
point five is out that won't take long

00:08:17,090 --> 00:08:21,860
three three point six or three point six

00:08:19,370 --> 00:08:23,690
will be supported typically a new numpy

00:08:21,860 --> 00:08:26,300
versions supported isn't 24 hours or

00:08:23,690 --> 00:08:28,100
something and I tell you everybody's

00:08:26,300 --> 00:08:30,440
going to do theirs it never does

00:08:28,100 --> 00:08:31,910
something this out of asking and it

00:08:30,440 --> 00:08:33,890
tells me okay I need to download these

00:08:31,910 --> 00:08:36,080
packages and I need a install these

00:08:33,890 --> 00:08:39,320
packages all the dependencies and then

00:08:36,080 --> 00:08:41,599
if you say yes which I did then it

00:08:39,320 --> 00:08:46,070
starts creating this package and gives

00:08:41,599 --> 00:08:47,690
you this cutoff here but it has it shows

00:08:46,070 --> 00:08:49,380
you how long it takes and how fast is

00:08:47,690 --> 00:08:52,390
doing stuff

00:08:49,380 --> 00:08:56,770
okay now it created environment so to in

00:08:52,390 --> 00:08:58,600
to actually activate now I can actually

00:08:56,770 --> 00:09:01,000
list environments I create environments

00:08:58,600 --> 00:09:02,290
and don't have any one that it's just a

00:09:01,000 --> 00:09:04,210
small selection of the environments I

00:09:02,290 --> 00:09:06,490
have you say Conda and list for instance

00:09:04,210 --> 00:09:08,530
it's one of the commands that shows you

00:09:06,490 --> 00:09:10,540
what environments you have you see an

00:09:08,530 --> 00:09:13,630
environment is nothing but a directory

00:09:10,540 --> 00:09:16,390
in your home folder in my I use a folder

00:09:13,630 --> 00:09:18,700
and Vacanti anaconda amps so if you

00:09:16,390 --> 00:09:20,440
install Minicon BB mini Condor amps yes

00:09:18,700 --> 00:09:22,300
anaconda amps it's just a different

00:09:20,440 --> 00:09:24,430
directory and these directories contain

00:09:22,300 --> 00:09:28,440
all the information about environment

00:09:24,430 --> 00:09:30,640
and CC now the root environment assume

00:09:28,440 --> 00:09:34,150
and the one that's active right now it

00:09:30,640 --> 00:09:36,010
has to stop okay you see I gave the

00:09:34,150 --> 00:09:38,140
toilet the pi day the bolivia then and

00:09:36,010 --> 00:09:40,180
made a new for the tutorial I made a new

00:09:38,140 --> 00:09:42,190
environment and I don't mess up with my

00:09:40,180 --> 00:09:47,320
roots I can install other like different

00:09:42,190 --> 00:09:49,420
versions and everything is isolated okay

00:09:47,320 --> 00:09:51,580
activate an environment so depending if

00:09:49,420 --> 00:09:54,310
you are on a UNIX kind of system Linux

00:09:51,580 --> 00:09:56,530
OS X then if to say source activate name

00:09:54,310 --> 00:09:59,260
of my environment on Windows is just

00:09:56,530 --> 00:10:01,330
activated so fighting sports activators

00:09:59,260 --> 00:10:01,930
pretty long so I just had to find a

00:10:01,330 --> 00:10:03,910
short alias

00:10:01,930 --> 00:10:05,530
but that's typically how it how they

00:10:03,910 --> 00:10:07,540
activate an environment I just type P

00:10:05,530 --> 00:10:10,390
activated deactivated append and then

00:10:07,540 --> 00:10:12,100
the prompt changes and a new CD prompt

00:10:10,390 --> 00:10:14,740
and now then you listed again you see

00:10:12,100 --> 00:10:18,460
now the environment will be activated

00:10:14,740 --> 00:10:22,030
the others can see which one's active ok

00:10:18,460 --> 00:10:23,680
and then you can say list and then it

00:10:22,030 --> 00:10:25,840
gives you a list of all the packages you

00:10:23,680 --> 00:10:28,780
have installed you see it tells me again

00:10:25,840 --> 00:10:33,150
the name of the package diversion here

00:10:28,780 --> 00:10:36,250
this dependencies from numpy or not the

00:10:33,150 --> 00:10:38,290
channel and this one is red because this

00:10:36,250 --> 00:10:40,450
when you see it's installed this pip so

00:10:38,290 --> 00:10:42,070
you want you will find maybe a few

00:10:40,450 --> 00:10:44,890
hundred packages therapists you can

00:10:42,070 --> 00:10:47,200
install this con directly if not you can

00:10:44,890 --> 00:10:49,000
always install this pip and Conda will

00:10:47,200 --> 00:10:50,200
recognize this one so it's not a

00:10:49,000 --> 00:10:52,090
contradiction to work I love this

00:10:50,200 --> 00:10:53,800
conductivity can you suppose that's what

00:10:52,090 --> 00:10:55,390
that typically do it's not available

00:10:53,800 --> 00:10:58,210
this Conda I use pip and installed was

00:10:55,390 --> 00:11:00,010
pit but Conda rises these packages and

00:10:58,210 --> 00:11:02,259
you that's why I says install this paper

00:11:00,010 --> 00:11:03,970
yeah so I have the version

00:11:02,259 --> 00:11:05,649
is installed this bit and you can also

00:11:03,970 --> 00:11:07,569
install fields there's no problem so

00:11:05,649 --> 00:11:13,509
there's no contradiction in this and you

00:11:07,569 --> 00:11:15,549
have this tip install arrows ok this is

00:11:13,509 --> 00:11:17,259
if you're a kind of a consumer of

00:11:15,549 --> 00:11:19,899
packages you can install a camp

00:11:17,259 --> 00:11:21,999
environment that way more options I just

00:11:19,899 --> 00:11:23,589
saw sure if you but now the next thing

00:11:21,999 --> 00:11:24,609
is building a package so you want to

00:11:23,589 --> 00:11:26,829
build a package and there are

00:11:24,609 --> 00:11:28,989
essentially two ways you can build a

00:11:26,829 --> 00:11:32,019
package you can just take a package from

00:11:28,989 --> 00:11:33,579
pipeline and convert it into a contour

00:11:32,019 --> 00:11:36,100
package this is a few commands or you

00:11:33,579 --> 00:11:40,059
can start from scratch doing it with

00:11:36,100 --> 00:11:41,769
your own ok

00:11:40,059 --> 00:11:43,720
building from pipe is pretty easy

00:11:41,769 --> 00:11:46,600
there's a skeleton first you need to

00:11:43,720 --> 00:11:48,160
install condor build the conduit

00:11:46,600 --> 00:11:50,139
if you have an icon that's there already

00:11:48,160 --> 00:11:53,709
if you have mini condor need install

00:11:50,139 --> 00:11:55,359
conga build which is a command line tool

00:11:53,709 --> 00:11:57,879
that helps you to do the package and

00:11:55,359 --> 00:12:00,399
then you say condor skeleton pie pie pie

00:11:57,879 --> 00:12:03,609
pie my package so this one goes to PI P

00:12:00,399 --> 00:12:05,470
I fetches the package should we have

00:12:03,609 --> 00:12:06,910
there and then you say conduct my

00:12:05,470 --> 00:12:09,549
package from that's pretty much it so

00:12:06,910 --> 00:12:11,529
it's not very difficult and it's builds

00:12:09,549 --> 00:12:13,959
a package and the package is a is a

00:12:11,529 --> 00:12:16,419
Powerball it's a carb in situ in this

00:12:13,959 --> 00:12:19,449
case it's just one file with everything

00:12:16,419 --> 00:12:22,089
inside that's it and now we can install

00:12:19,449 --> 00:12:23,919
it and Pat default it creates it for the

00:12:22,089 --> 00:12:25,509
for the platform you're on so it's if I

00:12:23,919 --> 00:12:31,509
do this as you can see here snails for

00:12:25,509 --> 00:12:32,619
OSX and you can now install it and they

00:12:31,509 --> 00:12:34,600
are actually two different ways

00:12:32,619 --> 00:12:37,269
installing it right now I can say Condor

00:12:34,600 --> 00:12:39,160
install use local my package and it just

00:12:37,269 --> 00:12:40,899
will go to the place because the no so

00:12:39,160 --> 00:12:42,669
to fourth place we have put it in stores

00:12:40,899 --> 00:12:43,749
it but you can also if you wanted to

00:12:42,669 --> 00:12:45,759
appear somewhere else you could just

00:12:43,749 --> 00:12:48,039
specify the full path with no problem

00:12:45,759 --> 00:12:49,209
just the file name this is exactly the

00:12:48,039 --> 00:12:51,579
same here but it could be a different

00:12:49,209 --> 00:12:53,109
way just if you download one of these

00:12:51,579 --> 00:12:56,579
you can always install it this condo

00:12:53,109 --> 00:12:56,579
install from the command line line

00:12:57,059 --> 00:13:01,480
you can also specify a price inversion

00:12:59,589 --> 00:13:02,889
so even if you have a different price so

00:13:01,480 --> 00:13:04,420
you can say okay build this one for

00:13:02,889 --> 00:13:07,119
price and straight-4 and it leads the

00:13:04,420 --> 00:13:08,619
first three four yeah so even if it's

00:13:07,119 --> 00:13:10,929
pure person it always has a price

00:13:08,619 --> 00:13:13,809
inversion inside and this is especially

00:13:10,929 --> 00:13:15,249
useful if you build extensions in C or

00:13:13,809 --> 00:13:18,369
Fortran which is very common in

00:13:15,249 --> 00:13:22,119
scientific field and this one builds

00:13:18,369 --> 00:13:25,299
everything for this version you can also

00:13:22,119 --> 00:13:27,459
convert to other platforms you see I can

00:13:25,299 --> 00:13:30,819
say conduct when brought platform all

00:13:27,459 --> 00:13:33,069
for instance and just specify my my file

00:13:30,819 --> 00:13:35,889
and say output directory and if it's a

00:13:33,069 --> 00:13:37,540
plain Python version it will create a

00:13:35,889 --> 00:13:41,859
version for each platform for Windows

00:13:37,540 --> 00:13:43,029
Linux and Mac if it's miss extensions

00:13:41,859 --> 00:13:44,559
it's not that easy then you need

00:13:43,029 --> 00:13:47,169
actually the operating suppose you need

00:13:44,559 --> 00:13:48,459
a co-pilot so then and I don't think if

00:13:47,169 --> 00:13:51,040
there's a cross-compiled at least I

00:13:48,459 --> 00:13:53,319
didn't try that no no but so so far I

00:13:51,040 --> 00:13:55,119
compile the Windows on Mac and the thing

00:13:53,319 --> 00:13:56,919
in Linux is the same the big Linux is

00:13:55,119 --> 00:13:59,379
used to compile it anyway so if you

00:13:56,919 --> 00:14:00,999
compile extensions it works when I even

00:13:59,379 --> 00:14:02,559
compiled foreign extensions which is

00:14:00,999 --> 00:14:05,769
typically a bit more involved and see

00:14:02,559 --> 00:14:10,419
things in the books nicely so you can

00:14:05,769 --> 00:14:13,689
create this extension and then if you

00:14:10,419 --> 00:14:16,449
like to you can upload and you need

00:14:13,689 --> 00:14:18,730
anaconda client and now I uploaded to

00:14:16,449 --> 00:14:20,379
the to anaconda and you can also make

00:14:18,730 --> 00:14:21,759
your own channel if you like so I don't

00:14:20,379 --> 00:14:23,139
have it here but you can also create a

00:14:21,759 --> 00:14:24,970
channel and you just say and I'm gonna

00:14:23,139 --> 00:14:29,709
upload and just give it a full pass of

00:14:24,970 --> 00:14:31,480
this file and it uploads this thing to

00:14:29,709 --> 00:14:32,199
anaconda and other people can install it

00:14:31,480 --> 00:14:36,389
just by saying

00:14:32,199 --> 00:14:39,519
Kandra install name of your package and

00:14:36,389 --> 00:14:41,470
if you put it in different channels they

00:14:39,519 --> 00:14:47,829
have to specify the channel when they

00:14:41,470 --> 00:14:50,110
install it okay this is building from a

00:14:47,829 --> 00:14:51,939
pipe I a package you can also do from

00:14:50,110 --> 00:14:53,769
scratch so if you want you can customize

00:14:51,939 --> 00:14:55,419
things and you need a few things you

00:14:53,769 --> 00:14:57,069
need a meta a mouse or a younger file

00:14:55,419 --> 00:15:00,249
that declaratively

00:14:57,069 --> 00:15:02,439
specifies what you want to do and then

00:15:00,249 --> 00:15:03,549
you need a build file and there's two

00:15:02,439 --> 00:15:05,739
different ones if you're in Windows you

00:15:03,549 --> 00:15:08,140
have it builds dot dat

00:15:05,739 --> 00:15:10,329
that's filed a batch file and

00:15:08,140 --> 00:15:12,910
Linux and Mac you have a shell file and

00:15:10,329 --> 00:15:14,320
you just use a normal setup TOC py so

00:15:12,910 --> 00:15:17,170
you're probably familiar with it so you

00:15:14,320 --> 00:15:19,180
just use the normal setup of py and then

00:15:17,170 --> 00:15:20,980
you have additional information in the

00:15:19,180 --> 00:15:24,060
meta llaman which also has dependencies

00:15:20,980 --> 00:15:26,320
in it let's have a look at this file

00:15:24,060 --> 00:15:28,589
the meta llaman looks like this is just

00:15:26,320 --> 00:15:31,690
the ammo file and has a lot of different

00:15:28,589 --> 00:15:33,670
sections in there you don't need all of

00:15:31,690 --> 00:15:35,649
them so you have something about meta

00:15:33,670 --> 00:15:37,540
homogeneous about the package then you

00:15:35,649 --> 00:15:40,300
have two sources so you can say it

00:15:37,540 --> 00:15:42,910
becomes from some get URL something like

00:15:40,300 --> 00:15:44,260
this you can have requirements and there

00:15:42,910 --> 00:15:45,910
are different requirements your ransom

00:15:44,260 --> 00:15:48,220
for building things and provides for

00:15:45,910 --> 00:15:49,660
running for instance if you use science

00:15:48,220 --> 00:15:51,190
and you might need science and to build

00:15:49,660 --> 00:15:52,540
it but you might need install on the

00:15:51,190 --> 00:15:55,149
client machine because you just have

00:15:52,540 --> 00:15:57,940
stupid X tensions yes

00:15:55,149 --> 00:15:59,649
different dependencies for the tests

00:15:57,940 --> 00:16:01,839
what you do visit s and then you have

00:15:59,649 --> 00:16:05,529
normal information about the Kudo also

00:16:01,839 --> 00:16:11,140
is what a license is okay this is just

00:16:05,529 --> 00:16:13,660
this short be part of an event I used so

00:16:11,140 --> 00:16:15,910
I use just my package name here and you

00:16:13,660 --> 00:16:18,250
say okay the sources just depends where

00:16:15,910 --> 00:16:19,990
are two directories up there can be a

00:16:18,250 --> 00:16:24,490
relative point for instance it doesn't

00:16:19,990 --> 00:16:26,019
have to be a URL requirement surprising

00:16:24,490 --> 00:16:26,890
and set of tools and then for running I

00:16:26,019 --> 00:16:28,959
need to Patrol

00:16:26,890 --> 00:16:31,630
and see here this is something you can

00:16:28,959 --> 00:16:33,640
specify this one I needed only for

00:16:31,630 --> 00:16:35,709
Windows and the same way you can specify

00:16:33,640 --> 00:16:38,440
the Linux and Mac so this will be only

00:16:35,709 --> 00:16:39,940
installed for the Windows version but

00:16:38,440 --> 00:16:40,870
not further to the birth of other

00:16:39,940 --> 00:16:43,420
operating systems

00:16:40,870 --> 00:16:45,550
that's as well very important and you

00:16:43,420 --> 00:16:47,350
can use the same syntax for other places

00:16:45,550 --> 00:16:50,820
so you make it dependent on the platform

00:16:47,350 --> 00:16:53,320
is one file of course then you have this

00:16:50,820 --> 00:16:56,920
MIT license whatever you want to put in

00:16:53,320 --> 00:16:59,230
there then you have this build files and

00:16:56,920 --> 00:17:01,089
they're typically it has a skeleton beta

00:16:59,230 --> 00:17:03,279
just you set it up and you create files

00:17:01,089 --> 00:17:05,770
that look like this and yet just you see

00:17:03,279 --> 00:17:07,929
you just call Python and set up top py

00:17:05,770 --> 00:17:09,880
install and they just call your setup

00:17:07,929 --> 00:17:12,100
copyright the setup device just a normal

00:17:09,880 --> 00:17:15,549
one as you know the normal installation

00:17:12,100 --> 00:17:17,260
process but you can also add other

00:17:15,549 --> 00:17:18,910
commands in here which is very

00:17:17,260 --> 00:17:20,949
interesting so if something is not

00:17:18,910 --> 00:17:21,880
available as a contact package in here

00:17:20,949 --> 00:17:24,100
you can do a pip

00:17:21,880 --> 00:17:26,440
stole something and this will install

00:17:24,100 --> 00:17:28,750
the package and this will go into this

00:17:26,440 --> 00:17:30,610
top ball so everything you pip install

00:17:28,750 --> 00:17:32,410
the you will deliver his own package I

00:17:30,610 --> 00:17:33,700
had this problem I had the library the

00:17:32,410 --> 00:17:35,500
wasn't available as a Conda and

00:17:33,700 --> 00:17:38,110
difficult just installed and she's

00:17:35,500 --> 00:17:40,390
participated alongside way so Paige just

00:17:38,110 --> 00:17:42,280
quite a few things you can do here in

00:17:40,390 --> 00:17:44,260
this build file you can customize things

00:17:42,280 --> 00:17:46,750
so something doesn't work typically have

00:17:44,260 --> 00:17:51,580
a way to do it in a build file some way

00:17:46,750 --> 00:17:53,470
or the other okay and then just build it

00:17:51,580 --> 00:17:54,790
as I conducted my package and that's it

00:17:53,470 --> 00:17:57,760
and they're all the other steps are

00:17:54,790 --> 00:17:59,800
exactly the same as with the skeleton so

00:17:57,760 --> 00:18:07,540
you can do upload and all kind of stuff

00:17:59,800 --> 00:18:09,940
install local machine operations that's

00:18:07,540 --> 00:18:11,980
it already so conclusions I think Conda

00:18:09,940 --> 00:18:13,630
is a very interesting package and it's

00:18:11,980 --> 00:18:15,550
very much used in scientific field but

00:18:13,630 --> 00:18:17,740
can be really useful for all pison

00:18:15,550 --> 00:18:20,140
programs because it's a pretty good

00:18:17,740 --> 00:18:23,020
installer in a very nice package manager

00:18:20,140 --> 00:18:26,050
you can manage your environments and you

00:18:23,020 --> 00:18:27,280
can also build contour packages it works

00:18:26,050 --> 00:18:29,320
together was PIP so it's not a

00:18:27,280 --> 00:18:31,420
contradiction you can still use a pip at

00:18:29,320 --> 00:18:33,550
Condor doesn't supply the package but as

00:18:31,420 --> 00:18:35,440
you can see you can always convert a pip

00:18:33,550 --> 00:18:37,120
installer package into a condom package

00:18:35,440 --> 00:18:39,370
if you like they might make the

00:18:37,120 --> 00:18:42,460
installation more smoothly try it for

00:18:39,370 --> 00:18:44,790
your users then you might actually just

00:18:42,460 --> 00:18:47,110
come control to the package to convert a

00:18:44,790 --> 00:18:49,390
very well-known a scientific community

00:18:47,110 --> 00:18:50,650
if you go to Syfy your sci-fi conference

00:18:49,390 --> 00:18:53,500
pretty much everybody will know a bit

00:18:50,650 --> 00:18:57,370
about it I think but it can be really

00:18:53,500 --> 00:19:00,960
useful for all Python programmers and I

00:18:57,370 --> 00:19:02,530
encourage you to give it give it a try

00:19:00,960 --> 00:19:04,620
thank you very much

00:19:02,530 --> 00:19:04,620
and

00:19:15,130 --> 00:19:22,490
because and ask them for me right first

00:19:18,710 --> 00:19:25,280
hand went up here Thanks I understand I

00:19:22,490 --> 00:19:27,020
can use condor for distribution and plot

00:19:25,280 --> 00:19:30,679
for an independent package installation

00:19:27,020 --> 00:19:33,230
which is great now if I have I am a

00:19:30,679 --> 00:19:37,100
maintainer of a tool and I have lots of

00:19:33,230 --> 00:19:39,860
different dependencies outside IP I and

00:19:37,100 --> 00:19:42,890
inside pipe ein with NPM and whatever

00:19:39,860 --> 00:19:47,240
and it would be nice to be able to just

00:19:42,890 --> 00:19:49,730
use Conda install whatever for me would

00:19:47,240 --> 00:19:54,080
I have to package all those NPM IPI

00:19:49,730 --> 00:19:57,500
packages to Conda manually or is it

00:19:54,080 --> 00:19:59,419
possible to I don't know say condor just

00:19:57,500 --> 00:20:02,559
install this and install it from pip

00:19:59,419 --> 00:20:04,610
because you don't have the package it

00:20:02,559 --> 00:20:06,530
depends it yes there's some things you

00:20:04,610 --> 00:20:08,659
can do so ideally if you install a

00:20:06,530 --> 00:20:10,370
package does that that is Conda then

00:20:08,659 --> 00:20:12,320
this package will install its

00:20:10,370 --> 00:20:14,419
dependencies so if you can say it's a

00:20:12,320 --> 00:20:16,039
dependent pandas pandas has a bunch of

00:20:14,419 --> 00:20:19,460
dependencies and install numpy for me

00:20:16,039 --> 00:20:21,650
and so on to some degree you can do pip

00:20:19,460 --> 00:20:23,809
so far you have the rest I think you

00:20:21,650 --> 00:20:25,520
have to write it in there in a in this

00:20:23,809 --> 00:20:28,610
build script you have to say pip install

00:20:25,520 --> 00:20:31,070
pip install pip install but probably

00:20:28,610 --> 00:20:33,500
this metal yama will be improved that's

00:20:31,070 --> 00:20:36,049
what I trust us all tickets that you can

00:20:33,500 --> 00:20:37,460
then even say okay this is supposed to

00:20:36,049 --> 00:20:38,750
be come from Kannada this is supposed to

00:20:37,460 --> 00:20:41,720
be pip and this might be different

00:20:38,750 --> 00:20:43,220
channel so it's still evolving and not

00:20:41,720 --> 00:20:47,840
everything works perfectly there are

00:20:43,220 --> 00:20:49,520
some but so far you you can always have

00:20:47,840 --> 00:20:52,520
a look around by putting it in the build

00:20:49,520 --> 00:20:55,270
script and I think so what would be your

00:20:52,520 --> 00:20:57,650
suggestion for this kind of situation

00:20:55,270 --> 00:21:00,679
I'd put it in the bin skipper had the

00:20:57,650 --> 00:21:03,909
same dependency thing and I put it put a

00:21:00,679 --> 00:21:08,690
pip install in the build script in this

00:21:03,909 --> 00:21:11,020
SH was the easiest one the other thing

00:21:08,690 --> 00:21:13,159
is just you can always convert the pip

00:21:11,020 --> 00:21:14,570
packages into cantata kitchen then you

00:21:13,159 --> 00:21:17,000
can list them in a metal Yama's and just

00:21:14,570 --> 00:21:18,020
upload them as long as they'll be see

00:21:17,000 --> 00:21:18,870
Emmet Eva's not shouldn't be a problem

00:21:18,020 --> 00:21:21,539
and and

00:21:18,870 --> 00:21:23,429
just upload into contact out and that's

00:21:21,539 --> 00:21:25,379
it but it is just you can automate it

00:21:23,429 --> 00:21:26,999
you just need to list all the packages

00:21:25,379 --> 00:21:28,620
and then you can update it it is the new

00:21:26,999 --> 00:21:32,120
version just check if the new version

00:21:28,620 --> 00:21:32,120
and just build new packages

00:21:40,410 --> 00:21:45,150
thanks for the talk so one of the

00:21:42,990 --> 00:21:48,030
selling point of beginning of that is

00:21:45,150 --> 00:21:50,070
that no limited not only to Python

00:21:48,030 --> 00:21:55,289
worried about all the examples had seen

00:21:50,070 --> 00:21:56,850
all the Python packages so you can use

00:21:55,289 --> 00:21:58,799
this everything stacked arrow tip so

00:21:56,850 --> 00:22:00,720
people use it for Ruby and other

00:21:58,799 --> 00:22:03,600
languages so you can use the same thing

00:22:00,720 --> 00:22:05,460
and you can also have a dependencies

00:22:03,600 --> 00:22:07,110
that are not necessary Pisan for

00:22:05,460 --> 00:22:09,000
instance one package is called pi table

00:22:07,110 --> 00:22:11,549
since the interface say H defines and

00:22:09,000 --> 00:22:13,289
this depends not only on on Piper aza

00:22:11,549 --> 00:22:14,850
and the HTF 5 library that has to be in

00:22:13,289 --> 00:22:17,070
a different version and all the things

00:22:14,850 --> 00:22:20,010
can be packaged in there so it you can

00:22:17,070 --> 00:22:21,870
have the pen I'll share libraries you

00:22:20,010 --> 00:22:24,000
can include them in your thing that

00:22:21,870 --> 00:22:26,010
makes it much easier if you have the

00:22:24,000 --> 00:22:27,900
goods if you have a package at the at

00:22:26,010 --> 00:22:29,370
the end then the user doesn't have to do

00:22:27,900 --> 00:22:31,770
anything about fiddling around this

00:22:29,370 --> 00:22:34,679
include parse and all kind of stuff goes

00:22:31,770 --> 00:23:13,789
compiling hdf5 is not the simplest

00:22:34,679 --> 00:23:19,260
things you can easily take what's the

00:23:13,789 --> 00:23:21,299
big advantage thinking of you right

00:23:19,260 --> 00:23:23,549
wheels is a great step for what I'll say

00:23:21,299 --> 00:23:25,740
the two things not everything is in

00:23:23,549 --> 00:23:27,750
wheel format yet you might not have the

00:23:25,740 --> 00:23:30,690
right version in the right platform in

00:23:27,750 --> 00:23:32,280
the wheel and Conda can install wheels

00:23:30,690 --> 00:23:33,419
no problem so you say pip install and

00:23:32,280 --> 00:23:36,090
installed wheels so that's not a

00:23:33,419 --> 00:23:37,620
contradiction this way at this at least

00:23:36,090 --> 00:23:38,070
as far as I know the story goes like

00:23:37,620 --> 00:23:41,730
this

00:23:38,070 --> 00:23:43,679
Travis elephant isn't CEO of continuing

00:23:41,730 --> 00:23:45,390
which is behind this is open ever since

00:23:43,679 --> 00:23:47,850
open source but there's a company behind

00:23:45,390 --> 00:23:50,309
it and he asked me the phone Rossum well

00:23:47,850 --> 00:23:51,630
a few years ago about this packaging and

00:23:50,309 --> 00:23:53,670
Peter said just go ahead and do it

00:23:51,630 --> 00:23:55,620
that's what I did so it's kind of a

00:23:53,670 --> 00:23:57,420
little bit a parallel to some degree a

00:23:55,620 --> 00:24:00,390
bit parallel to paper in wheels and

00:23:57,420 --> 00:24:03,510
something like this but it's I think

00:24:00,390 --> 00:24:05,400
it's more comprehensive and it's better

00:24:03,510 --> 00:24:07,230
and then you had a lot of nice of

00:24:05,400 --> 00:24:09,000
features and people instance the search

00:24:07,230 --> 00:24:10,890
for a name I couldn't I don't know maybe

00:24:09,000 --> 00:24:13,350
I'm not smart enough I couldn't get

00:24:10,890 --> 00:24:14,490
Pippin to just showing me this package

00:24:13,350 --> 00:24:16,140
it shows me everything so it's my

00:24:14,490 --> 00:24:17,640
handles of tickets for Django and this

00:24:16,140 --> 00:24:19,050
is not very useful they have to work to

00:24:17,640 --> 00:24:22,230
run it through grep and do your own

00:24:19,050 --> 00:24:24,510
thing why not just say I wanted minion

00:24:22,230 --> 00:24:26,880
just customized search and those things

00:24:24,510 --> 00:24:30,030
aren't this the condors vicuñas nice but

00:24:26,880 --> 00:24:31,770
you said you can use everything that pit

00:24:30,030 --> 00:24:33,570
and wheels and pipe your eyes when you

00:24:31,770 --> 00:24:36,000
don't exclude it you can still use it

00:24:33,570 --> 00:24:38,400
and I do it very often because it gets

00:24:36,000 --> 00:24:40,200
only 200 packages or maybe now 2,000 out

00:24:38,400 --> 00:24:46,080
there but not 80,000 or 90,000

00:24:40,200 --> 00:24:47,640
whatever's on pipeline all right any

00:24:46,080 --> 00:24:54,600
more interesting questions for Mike here

00:24:47,640 --> 00:24:58,830
we go yes best question yet okay so is

00:24:54,600 --> 00:25:01,950
there like any standardization effort

00:24:58,830 --> 00:25:05,040
like are you working with - packaging

00:25:01,950 --> 00:25:08,070
authority or something or is it going

00:25:05,040 --> 00:25:11,760
anywhere or will it be forever separate

00:25:08,070 --> 00:25:13,440
Conda is great supposedly but only in

00:25:11,760 --> 00:25:14,670
the scientific community and like

00:25:13,440 --> 00:25:17,730
everyone else

00:25:14,670 --> 00:25:18,210
this is paper great question but I don't

00:25:17,730 --> 00:25:21,060
know the answer

00:25:18,210 --> 00:25:23,070
yeah it would be very nice I would I

00:25:21,060 --> 00:25:25,230
would like to see it this way that both

00:25:23,070 --> 00:25:27,060
but actually everything is open-source

00:25:25,230 --> 00:25:30,360
and post communities could use the code

00:25:27,060 --> 00:25:32,010
from the other easily no no problem I

00:25:30,360 --> 00:25:33,300
think ever since PC or MIT license so

00:25:32,010 --> 00:25:35,490
that shouldn't be a big problem till you

00:25:33,300 --> 00:25:37,500
reuse code and the I don't I'm not

00:25:35,490 --> 00:25:38,550
really sure why this is not a bit more

00:25:37,500 --> 00:25:41,370
coordinated efforts

00:25:38,550 --> 00:25:43,590
I don't know it would be very nice to

00:25:41,370 --> 00:25:47,550
have one-stop inclusive

00:25:43,590 --> 00:25:49,290
join forces and do together for these

00:25:47,550 --> 00:25:50,850
things and I don't know why it why it's

00:25:49,290 --> 00:25:55,050
the case there might be some reasons and

00:25:50,850 --> 00:25:56,490
I haven't really found out yet why more

00:25:55,050 --> 00:25:59,900
questions and there's more questions

00:25:56,490 --> 00:25:59,900
keep the dream alive everyone

00:25:59,930 --> 00:26:04,460
I have a question it's like a two-parter

00:26:02,300 --> 00:26:05,750
so presumably if I install anaconda is

00:26:04,460 --> 00:26:08,420
gonna come with its own versions of

00:26:05,750 --> 00:26:11,360
Python as well as my system pythons that

00:26:08,420 --> 00:26:13,280
I might have installed separately and I

00:26:11,360 --> 00:26:14,240
once had this problem where or you know

00:26:13,280 --> 00:26:15,320
I don't know if anyone has seen the

00:26:14,240 --> 00:26:16,700
problem where you upgrade your operating

00:26:15,320 --> 00:26:18,920
system and you upgrade your system

00:26:16,700 --> 00:26:21,080
Python and all your virtual ends are now

00:26:18,920 --> 00:26:21,800
broken because something something

00:26:21,080 --> 00:26:23,540
something which I don't really

00:26:21,800 --> 00:26:24,770
understand and you have to delete all

00:26:23,540 --> 00:26:27,290
your old virtual levels and recreate

00:26:24,770 --> 00:26:28,250
them is anaconda gonna magically fix

00:26:27,290 --> 00:26:31,760
that problem for me

00:26:28,250 --> 00:26:34,160
or sub-question if I upgrade you know if

00:26:31,760 --> 00:26:37,670
there's a pipe of 3.5 dot one and a -

00:26:34,160 --> 00:26:39,260
3.5 dot - how does anaconda manage the

00:26:37,670 --> 00:26:42,470
upgrade process there does it need to

00:26:39,260 --> 00:26:44,240
rebuild a bunch of things there should

00:26:42,470 --> 00:26:45,980
be a problem so if you work mrs.

00:26:44,240 --> 00:26:48,170
environments those environments are

00:26:45,980 --> 00:26:50,180
pretty much isolated and the total eight

00:26:48,170 --> 00:26:51,620
sometimes if you use command line tools

00:26:50,180 --> 00:26:53,480
and they are installed like another

00:26:51,620 --> 00:26:55,940
scripts directories come there if not it

00:26:53,480 --> 00:26:56,990
goes outside so if you save pile in

00:26:55,940 --> 00:26:58,640
something and you'd haven't quite

00:26:56,990 --> 00:27:00,170
installed pile in the new environment it

00:26:58,640 --> 00:27:01,520
might take the wrong version and gives

00:27:00,170 --> 00:27:03,650
you a lot of syntax errors because it's

00:27:01,520 --> 00:27:06,680
a pile in four to seven and you and a

00:27:03,650 --> 00:27:08,030
three-five and y MN but if you install

00:27:06,680 --> 00:27:09,770
everything that puts everything in the

00:27:08,030 --> 00:27:11,000
directory and there shouldn't be a

00:27:09,770 --> 00:27:13,400
problem and you update if you work with

00:27:11,000 --> 00:27:14,390
environments and you will see if you

00:27:13,400 --> 00:27:15,680
work for a while you will because

00:27:14,390 --> 00:27:18,020
environments anyway all the time you

00:27:15,680 --> 00:27:19,910
will rarely actually may be the best

00:27:18,020 --> 00:27:21,980
approach just have the route just as a

00:27:19,910 --> 00:27:24,530
helper and then working environment so

00:27:21,980 --> 00:27:25,910
or isolated of course you can always if

00:27:24,530 --> 00:27:27,320
you you can always reproduce the

00:27:25,910 --> 00:27:29,210
environment you can freeze and why I

00:27:27,320 --> 00:27:30,380
meant it just just specify what you have

00:27:29,210 --> 00:27:32,600
installed you get a big list of

00:27:30,380 --> 00:27:34,490
installation and then you can give this

00:27:32,600 --> 00:27:36,440
this file to somebody else and the other

00:27:34,490 --> 00:27:38,360
person can say ok install from this file

00:27:36,440 --> 00:27:39,740
and then store exactly the same versions

00:27:38,360 --> 00:27:41,720
other ones you can reproduce the

00:27:39,740 --> 00:27:44,990
environments and this would solve the

00:27:41,720 --> 00:27:47,270
problem I don't know that could be some

00:27:44,990 --> 00:27:49,850
you can t only find it out if it tested

00:27:47,270 --> 00:27:50,630
into it but theoretically there

00:27:49,850 --> 00:27:52,310
shouldn't be a problem

00:27:50,630 --> 00:27:54,860
practically there might be one I don't

00:27:52,310 --> 00:27:56,330
know is that only made has ever had that

00:27:54,860 --> 00:27:58,780
problem of changing the system Python

00:27:56,330 --> 00:28:02,510
and all the virtual ends are broken

00:27:58,780 --> 00:28:03,860
alright so I guess we're thinking that

00:28:02,510 --> 00:28:07,780
anaconda is like kind of even more

00:28:03,860 --> 00:28:07,780
isolated from system pythons than

00:28:08,540 --> 00:28:13,070
if it never has that problem yeah

00:28:11,960 --> 00:28:16,370
there's some voodoo there further

00:28:13,070 --> 00:28:18,350
research required any more questions yes

00:28:16,370 --> 00:28:20,240
yes fantastic all right now he wants to

00:28:18,350 --> 00:28:25,299
hear my voice any longer absolutely yes

00:28:20,240 --> 00:28:25,299
sir I do

00:28:31,010 --> 00:28:41,110
how the environment we look at table so

00:28:34,640 --> 00:28:46,580
I install it somewhere let's say and

00:28:41,110 --> 00:28:48,770
compress it somewhere like yes I just

00:28:46,580 --> 00:28:51,590
said you don't actually copy the

00:28:48,770 --> 00:28:52,940
environment you just copy all this every

00:28:51,590 --> 00:28:54,530
all the packages are installed the

00:28:52,940 --> 00:28:57,350
subversion so but I showed you this

00:28:54,530 --> 00:28:59,750
listings here so one of those early

00:28:57,350 --> 00:29:07,340
things shows you this whatever is

00:28:59,750 --> 00:29:11,720
installed you have this yeah something

00:29:07,340 --> 00:29:14,210
like this so you can actually freeze no

00:29:11,720 --> 00:29:16,520
this research at December you can tell

00:29:14,210 --> 00:29:18,140
tell okay export all the versions I have

00:29:16,520 --> 00:29:20,990
in the file you can scatter file with

00:29:18,140 --> 00:29:22,429
all the names equal the version and then

00:29:20,990 --> 00:29:24,200
you can give this five somebody else and

00:29:22,429 --> 00:29:25,429
somebody else can recreate exactly the

00:29:24,200 --> 00:29:37,429
same environment exactly the same

00:29:25,429 --> 00:29:40,070
versions just a directory the problem is

00:29:37,429 --> 00:29:41,900
not everything is copied or if like I

00:29:40,070 --> 00:29:44,030
have this pandas version I have may I

00:29:41,900 --> 00:29:47,809
use it in ten different environments but

00:29:44,030 --> 00:29:50,120
it's only ones in my in my repository

00:29:47,809 --> 00:29:51,650
and not directly in the files just

00:29:50,120 --> 00:29:54,049
assembling and you have to make sure

00:29:51,650 --> 00:29:55,190
that you copied it along this is it but

00:29:54,049 --> 00:29:56,960
I think there should be an option to

00:29:55,190 --> 00:29:59,600
copy everything just sip the whole

00:29:56,960 --> 00:30:02,270
directory input assembles it should work

00:29:59,600 --> 00:30:04,250
as long as the same operating system but

00:30:02,270 --> 00:30:06,290
no guarantee but theoretically should

00:30:04,250 --> 00:30:09,080
work can can try that but maybe

00:30:06,290 --> 00:30:11,299
recreating is it's the safer thing so if

00:30:09,080 --> 00:30:13,070
you record you can also say okay it

00:30:11,299 --> 00:30:14,540
freezes everything this exact same

00:30:13,070 --> 00:30:16,370
version but you can also call in the

00:30:14,540 --> 00:30:17,540
file and edit is okay it shouldn't be

00:30:16,370 --> 00:30:19,880
exact the same version should be at

00:30:17,540 --> 00:30:21,510
least abortion or even update the person

00:30:19,880 --> 00:30:24,000
so you can go in the file and

00:30:21,510 --> 00:30:26,220
timaeus it and then still everybody who

00:30:24,000 --> 00:30:28,080
has this file would create and this nice

00:30:26,220 --> 00:30:29,550
thing is would broke I can freeze in my

00:30:28,080 --> 00:30:30,930
Mac and somebody else can forget the

00:30:29,550 --> 00:30:33,360
same and why I'm in the Windows there

00:30:30,930 --> 00:30:34,710
shouldn't be a problem if I sip the file

00:30:33,360 --> 00:30:41,550
about only people the same operating

00:30:34,710 --> 00:30:43,080
system all right any more anymore no oh

00:30:41,550 --> 00:30:44,400
there is one okay you have to make it a

00:30:43,080 --> 00:30:47,490
question you talk very very fast and

00:30:44,400 --> 00:30:50,760
Mike will talk very very fast okay so

00:30:47,490 --> 00:30:53,870
let's say that I have a package Python

00:30:50,760 --> 00:30:57,330
packets on Linux that has that needs

00:30:53,870 --> 00:30:59,610
separate installed C library and let's

00:30:57,330 --> 00:31:03,480
and let's say that this C library

00:30:59,610 --> 00:31:06,330
expects another C library so what will

00:31:03,480 --> 00:31:08,700
come to it will download this library

00:31:06,330 --> 00:31:11,040
and all of its dependence dependencies

00:31:08,700 --> 00:31:14,700
and put it in the condo repository

00:31:11,040 --> 00:31:16,320
locally or that different way so had the

00:31:14,700 --> 00:31:19,530
same problem typically what I did I just

00:31:16,320 --> 00:31:21,960
included in the file so I had this you

00:31:19,530 --> 00:31:23,820
can you can specify the the dependency

00:31:21,960 --> 00:31:26,400
so if you compile something I had

00:31:23,820 --> 00:31:28,260
Fortran dependencies some shared

00:31:26,400 --> 00:31:31,260
libraries December and you include it so

00:31:28,260 --> 00:31:32,880
up and I'm not read my cell phone reach

00:31:31,260 --> 00:31:36,030
how does the best way to do it but that

00:31:32,880 --> 00:31:37,170
different base including shared

00:31:36,030 --> 00:31:38,670
libraries in there and you can

00:31:37,170 --> 00:31:39,900
distribute to shared libraries along and

00:31:38,670 --> 00:31:41,850
they will put the shared libraries in

00:31:39,900 --> 00:31:43,590
this environment and they wouldn't clash

00:31:41,850 --> 00:31:44,940
with your shared libraries because you

00:31:43,590 --> 00:31:47,970
might have to share lab with maybe

00:31:44,940 --> 00:31:49,050
different versions and then it works for

00:31:47,970 --> 00:31:50,280
a while and until it doesn't work

00:31:49,050 --> 00:31:51,750
anymore because this is a different

00:31:50,280 --> 00:31:53,700
version something is different so you

00:31:51,750 --> 00:31:57,600
can distribute shared libraries with it

00:31:53,700 --> 00:31:58,980
just different ways you have you still

00:31:57,600 --> 00:32:00,600
have to look at a lot of recipes out

00:31:58,980 --> 00:32:03,680
there how to do it and probably you will

00:32:00,600 --> 00:32:06,270
find one that serves your purpose

00:32:03,680 --> 00:32:07,770
okay let's give Mike another big hand

00:32:06,270 --> 00:32:10,130
thank you very much for great talking

00:32:07,770 --> 00:32:10,130

YouTube URL: https://www.youtube.com/watch?v=_OhogXMaKAM


