Title: Scott Triglia - Protect your users with Circuit Breakers
Publication date: 2016-07-29
Playlist: EuroPython 2016
Description: 
	Scott Triglia - Protect your users with Circuit Breakers
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(https://ep2016.europython.eu//conference/talks/protect-your-users-with-circuit-breakers)

Failures are the bane of scaling a modern web service and can cause
serious pain for end users! Lucky for us, there are techniques that
can help protect your product and handle failures in subsystems
gracefully. This talk will dive into one of these in depth, the
Circuit Breaker pattern, and explore the options it gives us for
keeping all our users safe. We will be focusing on several real-world
problems and options for how to implement your circuit breaker setup
in nice, readable python code.

-----

The inevitability of failures is the bane of scaling any modern web
service and can cause serious pain for end users! Lucky for us, there
are techniques that can help protect your product handle failures in
subsystems gracefully. This talk will dive into one of these in depth,
the Circuit Breaker pattern, and explore the options it gives us for
keeping our users safe.

We will be focusing on several real-world problems and how they can be
addressed by circuit breakers. You should expect to leave the talk
with details on simple circuit breakers as well as understanding how
they can be adapted for more complex situations. We’ll also discuss
some options for how to implement your circuit breaker in readable
python.


**Contrived FAQ time!**

**I don’t know what Circuit Breakers are, should I come?**
Definitely! We’re going to start from scratch and work our way up.
Only requirement is basic familiarity with backend services receiving
and making HTTP requests.

**I totally know what Circuit Breakers are, should I come?**
Definitely! After the intro, the main meat of the talk will be working
through a series of more advanced situations and talking about how we
can alter the basic circuit breaker setup to address them.

**I want real-world advice, not made up hypotheticals!**
Well that’s not really a question, but you’ll be happy to know that
the examples we’ll discuss come straight from my experience at Yelp.
They should be very realistic and broadly applicable.
Captions: 
	00:00:00,000 --> 00:00:14,519
lunch right now we're gonna listen to

00:00:03,360 --> 00:00:16,710
circuit breakers by Scott trillion all

00:00:14,519 --> 00:00:18,539
right well thanks everybody for coming

00:00:16,710 --> 00:00:21,720
out so let's talk about circuit breakers

00:00:18,539 --> 00:00:23,519
today before I get started I want to

00:00:21,720 --> 00:00:25,080
give a quick shout out to Yelp my

00:00:23,519 --> 00:00:27,960
company who was kind enough to send me

00:00:25,080 --> 00:00:30,029
here if you don't know Yelp is a website

00:00:27,960 --> 00:00:31,460
where you can discover excellent local

00:00:30,029 --> 00:00:34,050
businesses wherever you happen to be

00:00:31,460 --> 00:00:35,730
we've got a booth outside and we're

00:00:34,050 --> 00:00:38,579
happy to talk to you more about what it

00:00:35,730 --> 00:00:40,920
is that we do and we're pretty big

00:00:38,579 --> 00:00:43,680
website as well so in particular we got

00:00:40,920 --> 00:00:44,969
a 90 million monthly users over 100

00:00:43,680 --> 00:00:46,530
million reviews which is you know

00:00:44,969 --> 00:00:48,890
something that a lot of our code deals

00:00:46,530 --> 00:00:53,760
with and we're launched in 32 countries

00:00:48,890 --> 00:00:55,649
including lots of Europe as well as for

00:00:53,760 --> 00:00:57,780
myself I spend my time working with

00:00:55,649 --> 00:00:59,730
revenue infrastructure so the kind of

00:00:57,780 --> 00:01:01,530
code that helps you purchase products on

00:00:59,730 --> 00:01:04,110
Yelp if you're a consumer like you or me

00:01:01,530 --> 00:01:05,939
or a business owner as well and if

00:01:04,110 --> 00:01:09,930
you're inclined toward Twitter you can

00:01:05,939 --> 00:01:11,369
find me at Scott Trillium all right

00:01:09,930 --> 00:01:12,540
so with all that out of the way let's go

00:01:11,369 --> 00:01:16,470
ahead and talk about some circuit

00:01:12,540 --> 00:01:18,450
breakers in the old days we used to have

00:01:16,470 --> 00:01:20,250
this very nice model of the world right

00:01:18,450 --> 00:01:23,130
pretty much any code that we wanted to

00:01:20,250 --> 00:01:25,049
call whether it was something simple or

00:01:23,130 --> 00:01:27,390
something complex was executing in the

00:01:25,049 --> 00:01:29,280
same Python process that we were calling

00:01:27,390 --> 00:01:31,710
it from so if I want to do something

00:01:29,280 --> 00:01:33,900
nice like display a business's name in a

00:01:31,710 --> 00:01:35,880
nicely formatted way I call a function

00:01:33,900 --> 00:01:37,500
to do it and I can be pretty sure that

00:01:35,880 --> 00:01:39,969
that function is going to execute and do

00:01:37,500 --> 00:01:42,049
so cleanly

00:01:39,969 --> 00:01:44,000
unfortunately more and more these days

00:01:42,049 --> 00:01:46,250
that assumption that code is running

00:01:44,000 --> 00:01:47,420
locally encode is executing in processes

00:01:46,250 --> 00:01:49,789
not becoming true

00:01:47,420 --> 00:01:51,619
so a lot of different trends are causing

00:01:49,789 --> 00:01:54,350
us things like docker that you may have

00:01:51,619 --> 00:01:55,759
heard of the micro services or service

00:01:54,350 --> 00:01:57,409
oriented architecture movements in

00:01:55,759 --> 00:01:59,270
general are introducing more and more

00:01:57,409 --> 00:02:01,250
networked boundaries into our code so

00:01:59,270 --> 00:02:03,500
that function that used to be executing

00:02:01,250 --> 00:02:05,720
locally in our same interpreter is now

00:02:03,500 --> 00:02:07,310
maybe on some remote server running

00:02:05,720 --> 00:02:10,640
elsewhere we don't even know where it is

00:02:07,310 --> 00:02:12,110
and the unfortunate reality of this is

00:02:10,640 --> 00:02:13,400
that can introduce a lot of problems

00:02:12,110 --> 00:02:15,680
right problems that didn't use to exist

00:02:13,400 --> 00:02:17,150
so things that we assumed would always

00:02:15,680 --> 00:02:20,330
work all of a sudden have strange

00:02:17,150 --> 00:02:23,239
failure modes maybe I get an 500 from

00:02:20,330 --> 00:02:24,410
some sort of HTTP API maybe I just see a

00:02:23,239 --> 00:02:26,209
lot of slowness and I have no

00:02:24,410 --> 00:02:28,569
explanation of what's going on there are

00:02:26,209 --> 00:02:30,769
a lot of ways that this can go wrong and

00:02:28,569 --> 00:02:32,630
that is essentially where circuit

00:02:30,769 --> 00:02:34,250
breakers fit in so circuit breakers are

00:02:32,630 --> 00:02:36,560
these components that we build in

00:02:34,250 --> 00:02:38,390
between ourselves and our remote

00:02:36,560 --> 00:02:39,860
dependencies and they're essentially

00:02:38,390 --> 00:02:42,230
there to do two things they need to

00:02:39,860 --> 00:02:44,420
detect when the system is unhealthy when

00:02:42,230 --> 00:02:46,370
they can't communicate to that external

00:02:44,420 --> 00:02:47,510
API whatever it is and they need to do

00:02:46,370 --> 00:02:49,400
something about it

00:02:47,510 --> 00:02:53,530
so often this is something like blocking

00:02:49,400 --> 00:02:55,609
requests or turning off features or etc

00:02:53,530 --> 00:02:56,780
so wherever you hear circuit breakers

00:02:55,609 --> 00:02:58,549
mentioned you're likely gonna see

00:02:56,780 --> 00:03:01,519
references to this book by Michael

00:02:58,549 --> 00:03:03,560
Nygaard release it has a lot of ideas in

00:03:01,519 --> 00:03:05,989
it a lot of ways to build good software

00:03:03,560 --> 00:03:07,730
and one of them in fact two pages out of

00:03:05,989 --> 00:03:09,260
another wise fairly large book is

00:03:07,730 --> 00:03:12,319
dedicated to this idea of circuit

00:03:09,260 --> 00:03:14,150
breakers so we have three goals today

00:03:12,319 --> 00:03:16,250
first off I'm going to introduce

00:03:14,150 --> 00:03:18,319
Nygard circuit breaker give us an idea

00:03:16,250 --> 00:03:20,239
of what it does what the basic idea is

00:03:18,319 --> 00:03:22,880
and why we should care at all what

00:03:20,239 --> 00:03:24,200
problem it solves for us and then we're

00:03:22,880 --> 00:03:25,819
gonna try and walk through a variety of

00:03:24,200 --> 00:03:27,889
ways that we can take that basic circuit

00:03:25,819 --> 00:03:31,250
breaker and expand it to solve different

00:03:27,889 --> 00:03:32,900
problems will sort of motivate this by

00:03:31,250 --> 00:03:34,250
talking through a few scenarios

00:03:32,900 --> 00:03:35,660
getting an idea of ways that that

00:03:34,250 --> 00:03:38,450
initial circuit breaker is just

00:03:35,660 --> 00:03:41,090
insufficient and what we can do about it

00:03:38,450 --> 00:03:42,739
and to do all of this I need to first

00:03:41,090 --> 00:03:44,270
introduce you to my own favorite

00:03:42,739 --> 00:03:48,290
restaurant back home in San Francisco

00:03:44,270 --> 00:03:50,870
which is Jim's diner so Jim's is a very

00:03:48,290 --> 00:03:53,000
old-school American diner experience so

00:03:50,870 --> 00:03:54,739
this means vinyl booths you sit down at

00:03:53,000 --> 00:03:56,150
tables and you have waiters that come

00:03:54,739 --> 00:03:59,390
and take your order form you and take it

00:03:56,150 --> 00:04:00,860
to a back kitchen and it's that kind of

00:03:59,390 --> 00:04:02,569
process of ordering food that we're

00:04:00,860 --> 00:04:03,770
gonna use as a stand-in for a lot of

00:04:02,569 --> 00:04:06,590
different things that you might want to

00:04:03,770 --> 00:04:08,030
do with remote surfaces so let's briefly

00:04:06,590 --> 00:04:09,560
walk through the ordering experience

00:04:08,030 --> 00:04:11,690
just in case it doesn't translate

00:04:09,560 --> 00:04:13,489
countries very well so you're gonna

00:04:11,690 --> 00:04:14,840
start out with the menu essentially

00:04:13,489 --> 00:04:16,660
you'll sit down at your table and be

00:04:14,840 --> 00:04:18,829
given a list of items you might order

00:04:16,660 --> 00:04:20,269
step 2 here is you're gonna go ahead and

00:04:18,829 --> 00:04:21,950
decide what it is that you want to eat

00:04:20,269 --> 00:04:23,210
communicate that with the waiter and

00:04:21,950 --> 00:04:25,040
they're gonna write it down on a ticket

00:04:23,210 --> 00:04:26,960
I'll take this ticket and give it to the

00:04:25,040 --> 00:04:29,330
kitchen and say please make this order

00:04:26,960 --> 00:04:31,669
step three is going to be hopefully the

00:04:29,330 --> 00:04:34,010
kitchen processing your order nice and

00:04:31,669 --> 00:04:36,020
efficiently and step four is of course

00:04:34,010 --> 00:04:40,490
whoever the customer is gets their food

00:04:36,020 --> 00:04:42,500
back and they get to enjoy it so the

00:04:40,490 --> 00:04:44,750
fundamental rule of any of these kind of

00:04:42,500 --> 00:04:46,610
modern Network oriented architectures is

00:04:44,750 --> 00:04:48,710
you have to accept that your system is

00:04:46,610 --> 00:04:50,240
going to fail then that may not be your

00:04:48,710 --> 00:04:51,710
code in particular but it turns out that

00:04:50,240 --> 00:04:53,570
because you depend on so many other

00:04:51,710 --> 00:04:55,760
things many of them may be significantly

00:04:53,570 --> 00:04:57,950
out of your control something is gonna

00:04:55,760 --> 00:04:59,930
fail and it's not a question of whether

00:04:57,950 --> 00:05:01,550
you can avoid the failure entirely it's

00:04:59,930 --> 00:05:04,060
a question of when it does occur what

00:05:01,550 --> 00:05:06,470
are you gonna do about it

00:05:04,060 --> 00:05:08,570
so let's look back at that example of

00:05:06,470 --> 00:05:10,550
eating food at Jim's restaurant and see

00:05:08,570 --> 00:05:12,140
how failure might factor in so we've

00:05:10,550 --> 00:05:13,970
gone ahead and ordered our food we've

00:05:12,140 --> 00:05:16,190
had the waiter take it down on a ticket

00:05:13,970 --> 00:05:18,200
and placed it in front of the the

00:05:16,190 --> 00:05:20,660
kitchen the cooks and something

00:05:18,200 --> 00:05:21,890
unfortunate might occur right it's

00:05:20,660 --> 00:05:23,450
something we don't totally understand

00:05:21,890 --> 00:05:24,860
maybe we aren't even aware of it but

00:05:23,450 --> 00:05:26,810
that order that was supposed to get

00:05:24,860 --> 00:05:30,050
processed a timely manner by the kitchen

00:05:26,810 --> 00:05:31,940
is instead entirely forgotten about now

00:05:30,050 --> 00:05:33,110
in a real restaurant you might hope that

00:05:31,940 --> 00:05:34,669
the reaction to this would be something

00:05:33,110 --> 00:05:35,990
reasonable something like a waiter

00:05:34,669 --> 00:05:38,120
coming and telling you that the kitchen

00:05:35,990 --> 00:05:40,010
is far behind and that they need to take

00:05:38,120 --> 00:05:42,169
more time for your order but in the code

00:05:40,010 --> 00:05:43,910
that we actually write in practice we

00:05:42,169 --> 00:05:45,320
have very little thought to this failure

00:05:43,910 --> 00:05:47,390
mode right we might not even think of it

00:05:45,320 --> 00:05:49,220
at all and so it turns out that the the

00:05:47,390 --> 00:05:49,490
real result of doing this can be really

00:05:49,220 --> 00:05:50,750
negative

00:05:49,490 --> 00:05:52,819
in fact it can be completely

00:05:50,750 --> 00:05:54,169
preposterous and if we ever send it out

00:05:52,819 --> 00:05:57,080
loud we say wow that's a really bad

00:05:54,169 --> 00:05:59,330
situation so essentially our goal today

00:05:57,080 --> 00:06:00,800
is to make sure that we're aware of this

00:05:59,330 --> 00:06:01,880
problem and make sure that we've built

00:06:00,800 --> 00:06:05,479
in systems that can handle it

00:06:01,880 --> 00:06:06,620
automatically and the first way that

00:06:05,479 --> 00:06:10,280
we're going to talk through that is my

00:06:06,620 --> 00:06:12,500
guards basic circuit breaker so here's a

00:06:10,280 --> 00:06:15,380
slightly idealized schematic of Jim's

00:06:12,500 --> 00:06:16,789
restaurant this is approximately true

00:06:15,380 --> 00:06:18,949
and we'll see why it's designed this way

00:06:16,789 --> 00:06:20,539
in a moment on the left there we have a

00:06:18,949 --> 00:06:22,639
number of sections each section contains

00:06:20,539 --> 00:06:24,139
several diners in it but most

00:06:22,639 --> 00:06:26,000
importantly a section is served by a

00:06:24,139 --> 00:06:27,380
single waiter so they're going to come

00:06:26,000 --> 00:06:28,699
to the individual diners and collect

00:06:27,380 --> 00:06:30,440
those orders we talked about earlier

00:06:28,699 --> 00:06:31,789
they're going to take them across to the

00:06:30,440 --> 00:06:33,740
right side of the diagram and drop them

00:06:31,789 --> 00:06:35,330
off at the kitchen there are a bunch of

00:06:33,740 --> 00:06:36,710
cooks in the kitchen and as they become

00:06:35,330 --> 00:06:38,750
free they're gonna pick up the next

00:06:36,710 --> 00:06:39,979
order cook it prepare it and hand it

00:06:38,750 --> 00:06:43,009
back to the waiters to bring back to

00:06:39,979 --> 00:06:45,139
customers and I had said earlier that

00:06:43,009 --> 00:06:46,340
this is sort of a general stand-in for a

00:06:45,139 --> 00:06:47,780
number of things and so I want to

00:06:46,340 --> 00:06:50,509
briefly convince you that this is a

00:06:47,780 --> 00:06:52,030
generic kind of interaction model here's

00:06:50,509 --> 00:06:54,530
what it might look like if instead of

00:06:52,030 --> 00:06:56,659
you know customers at a restaurant we

00:06:54,530 --> 00:06:59,389
were talking about services back in

00:06:56,659 --> 00:07:02,720
services and some sort of HTTP based API

00:06:59,389 --> 00:07:05,330
and likewise if you're dealing with task

00:07:02,720 --> 00:07:07,099
queues or any sort of slow back-end

00:07:05,330 --> 00:07:09,800
process with workers you can fit that

00:07:07,099 --> 00:07:12,050
into this model as well so all of that

00:07:09,800 --> 00:07:14,270
said we're gonna focus on the dining use

00:07:12,050 --> 00:07:15,770
case and what we're going to essentially

00:07:14,270 --> 00:07:18,349
do is build in circuit breakers to this

00:07:15,770 --> 00:07:19,490
model so the ones that we'll start out

00:07:18,349 --> 00:07:21,050
with are going to be on each waiter

00:07:19,490 --> 00:07:22,400
individually so every waiter will have

00:07:21,050 --> 00:07:24,710
their own circuit breaker paying

00:07:22,400 --> 00:07:28,610
attention to the success or failure of

00:07:24,710 --> 00:07:30,139
their orders and in my guards basic

00:07:28,610 --> 00:07:33,259
model there are three essential States

00:07:30,139 --> 00:07:34,969
now on the right side of this these are

00:07:33,259 --> 00:07:37,039
the traditional names that Nygard gives

00:07:34,969 --> 00:07:38,449
to these states I don't know about you

00:07:37,039 --> 00:07:40,610
all but I find them terrifically

00:07:38,449 --> 00:07:42,349
confusing and I'm not going to use them

00:07:40,610 --> 00:07:44,599
so if you're purist you can look to the

00:07:42,349 --> 00:07:46,460
right side of this diagram but if you're

00:07:44,599 --> 00:07:47,630
a mere mortal like me I prefer the ones

00:07:46,460 --> 00:07:50,150
on the left I find them a little more

00:07:47,630 --> 00:07:52,219
intuitive so healthy is the good state

00:07:50,150 --> 00:07:54,440
as you might imagine essentially if all

00:07:52,219 --> 00:07:55,639
the requests are flowing successfully

00:07:54,440 --> 00:07:57,259
the circuit breaker is going to

00:07:55,639 --> 00:07:58,470
recognize that things are going well and

00:07:57,259 --> 00:08:00,570
declare itself healthy

00:07:58,470 --> 00:08:02,370
unhealthy is the exact opposite of

00:08:00,570 --> 00:08:03,900
course if no requests are succeeding

00:08:02,370 --> 00:08:05,490
whatsoever we're going to declare the

00:08:03,900 --> 00:08:07,650
system unhealthy and hopefully take some

00:08:05,490 --> 00:08:08,880
corrective action and Nygaard

00:08:07,650 --> 00:08:10,890
circuit-breaker has kind of an

00:08:08,880 --> 00:08:12,690
intermediate state where we maybe aren't

00:08:10,890 --> 00:08:16,680
quite sure whether we're good or bad and

00:08:12,690 --> 00:08:18,870
we want to decide between the two so a

00:08:16,680 --> 00:08:20,460
very basic circuit breaker in Python

00:08:18,870 --> 00:08:22,170
could look something like this

00:08:20,460 --> 00:08:23,850
so each waiter is gonna start out by

00:08:22,170 --> 00:08:26,250
asking themselves do I believe the

00:08:23,850 --> 00:08:27,450
system is healthy right now in the good

00:08:26,250 --> 00:08:28,830
case where it is healthy they're gonna

00:08:27,450 --> 00:08:30,300
go ahead and just send the requests on

00:08:28,830 --> 00:08:31,620
to the kitchen they'll take your order

00:08:30,300 --> 00:08:33,930
and they'll make sure they pay attention

00:08:31,620 --> 00:08:35,280
to whether it succeeds or not in the bad

00:08:33,930 --> 00:08:37,409
case at the bottom we're gonna go ahead

00:08:35,280 --> 00:08:39,300
and just block the requests up front so

00:08:37,409 --> 00:08:41,039
I'm gonna go ahead and read my order as

00:08:39,300 --> 00:08:43,800
a customer I say I would really like to

00:08:41,039 --> 00:08:45,510
have maybe bacon and eggs and the waiter

00:08:43,800 --> 00:08:48,030
is gonna say I'm sorry kitchen is

00:08:45,510 --> 00:08:49,110
unhealthy can't accept your order and we

00:08:48,030 --> 00:08:50,730
might be in this middle case that we

00:08:49,110 --> 00:08:54,150
talked about kind of recovering trying

00:08:50,730 --> 00:08:56,250
to decide where the system is if we are

00:08:54,150 --> 00:08:58,140
in that middle case again the basic

00:08:56,250 --> 00:08:59,640
Nygard circuit breaker says that we

00:08:58,140 --> 00:09:01,470
should be taking this kind of approach

00:08:59,640 --> 00:09:03,360
we're gonna start by waiting a certain

00:09:01,470 --> 00:09:05,100
amount of seconds maybe one second maybe

00:09:03,360 --> 00:09:06,840
five seconds and this is to give the

00:09:05,100 --> 00:09:08,850
backend system hopefully some sort of

00:09:06,840 --> 00:09:10,380
time to recover and then the very next

00:09:08,850 --> 00:09:12,150
request that comes through we're gonna

00:09:10,380 --> 00:09:14,100
pass it to the back end we're gonna see

00:09:12,150 --> 00:09:15,450
if it's successful and if so declare

00:09:14,100 --> 00:09:16,590
ourselves healthy and see if it's

00:09:15,450 --> 00:09:18,450
unsuccessful and declare ourselves

00:09:16,590 --> 00:09:23,010
unhealthy and we kind of repeat this

00:09:18,450 --> 00:09:24,780
cycle until we become healthy again so

00:09:23,010 --> 00:09:26,970
that's the basic circuit breaker not

00:09:24,780 --> 00:09:28,350
terribly complicated but let's kind of

00:09:26,970 --> 00:09:30,660
explain why it's actually doing us any

00:09:28,350 --> 00:09:33,480
good in that form so before we had a

00:09:30,660 --> 00:09:35,010
circuit breaker active one effect of the

00:09:33,480 --> 00:09:36,570
kitchen slowing down was that diners

00:09:35,010 --> 00:09:39,120
would start to wait a very long time to

00:09:36,570 --> 00:09:40,350
get their food we saw her skeleton

00:09:39,120 --> 00:09:41,850
friend earlier who had waited an

00:09:40,350 --> 00:09:43,920
extraordinarily long time and the way

00:09:41,850 --> 00:09:45,839
that most of us often write these this

00:09:43,920 --> 00:09:47,520
code in practice there may not be a time

00:09:45,839 --> 00:09:50,610
out of any sort on the client side so

00:09:47,520 --> 00:09:52,500
they just wait forever on the other hand

00:09:50,610 --> 00:09:54,210
the kitchen the back end is also getting

00:09:52,500 --> 00:09:56,130
a growing backlog right maybe they

00:09:54,210 --> 00:09:57,450
normally have five orders in process and

00:09:56,130 --> 00:09:58,800
as they get slower and slower they have

00:09:57,450 --> 00:10:00,800
ten they have thirty they have a hundred

00:09:58,800 --> 00:10:03,410
and they're hopelessly behind

00:10:00,800 --> 00:10:04,639
and every new diner that's entering our

00:10:03,410 --> 00:10:06,889
restaurant is actively making the

00:10:04,639 --> 00:10:08,989
situation worse so maybe in a normal

00:10:06,889 --> 00:10:10,489
operation we expect roughly 10 people

00:10:08,989 --> 00:10:11,689
dining at the same time but if

00:10:10,489 --> 00:10:13,220
everything starts slowing down in this

00:10:11,689 --> 00:10:14,269
way we're gonna get 20 in the restaurant

00:10:13,220 --> 00:10:16,129
at once a hundred people in the

00:10:14,269 --> 00:10:18,679
restaurant at once kind of compounding

00:10:16,129 --> 00:10:21,319
all the same problems and a circuit

00:10:18,679 --> 00:10:22,369
breaker does make this better so for

00:10:21,319 --> 00:10:24,199
starters we actually get fewer

00:10:22,369 --> 00:10:26,029
frustrated users and that might be a

00:10:24,199 --> 00:10:27,980
little counterintuitive given that we're

00:10:26,029 --> 00:10:30,110
blocking their requests immediately but

00:10:27,980 --> 00:10:31,610
it turns out that in most use cases

00:10:30,110 --> 00:10:33,259
that's actually preferable to waiting

00:10:31,610 --> 00:10:36,079
knows how long and then being told the

00:10:33,259 --> 00:10:37,670
same information we're gonna reduce load

00:10:36,079 --> 00:10:39,470
on the back end so the kitchen rather

00:10:37,670 --> 00:10:40,790
than having those orders pile up can get

00:10:39,470 --> 00:10:43,699
a little bit of a breather and recover

00:10:40,790 --> 00:10:45,829
whatever the problem was and maybe most

00:10:43,699 --> 00:10:47,389
importantly we have a place in code

00:10:45,829 --> 00:10:49,999
where we can define a failure mode for

00:10:47,389 --> 00:10:51,829
our system so we can say if the system

00:10:49,999 --> 00:10:53,209
is unhealthy in some way I know exactly

00:10:51,829 --> 00:10:54,860
what's going to happen and it's in this

00:10:53,209 --> 00:10:56,420
part of code and it turns out that

00:10:54,860 --> 00:10:58,009
that's actually really valuable as we

00:10:56,420 --> 00:11:01,519
start to expand and make this more

00:10:58,009 --> 00:11:03,350
complicated so that is the basic circuit

00:11:01,519 --> 00:11:05,839
breaker I kind of want to point out a

00:11:03,350 --> 00:11:07,220
few assumptions we're making and we'll

00:11:05,839 --> 00:11:10,129
use that to launch into some more

00:11:07,220 --> 00:11:11,329
detailed discussions so the first thing

00:11:10,129 --> 00:11:13,369
that we're assuming is that all those

00:11:11,329 --> 00:11:15,439
waiters had independent circuit breakers

00:11:13,369 --> 00:11:16,970
right and that introduces the

00:11:15,439 --> 00:11:18,529
interesting problem that one waiter can

00:11:16,970 --> 00:11:20,029
believe the system is unhealthy while

00:11:18,529 --> 00:11:21,499
the other waiter is completely clueless

00:11:20,029 --> 00:11:23,209
and happily sending orders through to

00:11:21,499 --> 00:11:24,350
the kitchen and we might think to

00:11:23,209 --> 00:11:25,819
ourselves that's a little bit strange

00:11:24,350 --> 00:11:29,269
and we'll talk about what we could do

00:11:25,819 --> 00:11:31,249
there in addition in the basic circuit

00:11:29,269 --> 00:11:32,929
breaker we have exactly one thing we do

00:11:31,249 --> 00:11:34,910
in the circuit when the system is

00:11:32,929 --> 00:11:36,619
unhealthy and that is we stop future

00:11:34,910 --> 00:11:38,660
requests right no other reaction is

00:11:36,619 --> 00:11:41,480
taken and we'll talk a bit about what

00:11:38,660 --> 00:11:42,980
else we can do there we also made the

00:11:41,480 --> 00:11:45,019
decision that the circuit breaker

00:11:42,980 --> 00:11:47,119
component itself the waiters in our case

00:11:45,019 --> 00:11:48,160
was the only thing that could decide if

00:11:47,119 --> 00:11:50,209
something was healthy or unhealthy

00:11:48,160 --> 00:11:51,679
that's a little bit limiting and you

00:11:50,209 --> 00:11:53,149
might imagine that say a cook in the

00:11:51,679 --> 00:11:54,889
kitchen has a pretty good perspective on

00:11:53,149 --> 00:11:58,269
this and so we'll talk a little bit

00:11:54,889 --> 00:12:00,619
about pulling that information in and

00:11:58,269 --> 00:12:02,600
last but not least the whole recovery

00:12:00,619 --> 00:12:04,369
system and the basic circuit breaker is

00:12:02,600 --> 00:12:06,290
very defined and it's very focused on

00:12:04,369 --> 00:12:08,299
the success or failure of one particular

00:12:06,290 --> 00:12:09,780
order so we'll talk about expanding that

00:12:08,299 --> 00:12:11,920
a little

00:12:09,780 --> 00:12:13,870
so let's start off with the first

00:12:11,920 --> 00:12:15,400
question which is should all these

00:12:13,870 --> 00:12:16,660
waiters have independent circuit

00:12:15,400 --> 00:12:18,420
breakers or maybe should there be a

00:12:16,660 --> 00:12:22,420
little more communication between them

00:12:18,420 --> 00:12:23,920
and we have said originally that one of

00:12:22,420 --> 00:12:25,930
the weird side effects of that is they

00:12:23,920 --> 00:12:27,490
can all disagree right if the waiter for

00:12:25,930 --> 00:12:28,780
section one is well aware that the

00:12:27,490 --> 00:12:30,250
system is unhealthy they won't be

00:12:28,780 --> 00:12:32,380
sending any more requests to the kitchen

00:12:30,250 --> 00:12:33,700
and that's a good a good choice for all

00:12:32,380 --> 00:12:35,410
this for all the reasons that we talked

00:12:33,700 --> 00:12:37,420
about previously but of course the

00:12:35,410 --> 00:12:39,370
waiter for section two may not have had

00:12:37,420 --> 00:12:40,750
any orders recently and the next five

00:12:39,370 --> 00:12:42,820
people that come through section two are

00:12:40,750 --> 00:12:46,900
gonna get very slow very unsuccessful

00:12:42,820 --> 00:12:48,190
results so the obvious solution in this

00:12:46,900 --> 00:12:50,920
case is we need to have them communicate

00:12:48,190 --> 00:12:52,600
somehow right and one easy way to do

00:12:50,920 --> 00:12:54,070
that is to just take whatever state it

00:12:52,600 --> 00:12:55,330
was that they were maintaining maybe the

00:12:54,070 --> 00:12:57,280
number of successful orders and the

00:12:55,330 --> 00:12:59,770
number of failed orders and put it into

00:12:57,280 --> 00:13:02,950
a shared data sort this data store can

00:12:59,770 --> 00:13:05,010
be any number of things my sequel I can

00:13:02,950 --> 00:13:07,960
something more key value oriented

00:13:05,010 --> 00:13:09,190
Cassandra MongoDB but the goal is that

00:13:07,960 --> 00:13:11,860
they're gonna all communicate together

00:13:09,190 --> 00:13:13,690
come to some roughly shared consensus on

00:13:11,860 --> 00:13:15,640
the state of the system and that will be

00:13:13,690 --> 00:13:18,700
what they all pull from rather than

00:13:15,640 --> 00:13:20,860
their own opinions so the new behavior

00:13:18,700 --> 00:13:22,480
we've introduced obviously all of these

00:13:20,860 --> 00:13:23,800
clients these waiters are now going to

00:13:22,480 --> 00:13:25,620
be communicating where before they were

00:13:23,800 --> 00:13:29,050
completely independent of each other and

00:13:25,620 --> 00:13:30,100
that has a lot of different sort of side

00:13:29,050 --> 00:13:32,710
effects that may or may not be

00:13:30,100 --> 00:13:33,580
intentional an obvious good thing that

00:13:32,710 --> 00:13:35,470
we get out of this is we're gonna

00:13:33,580 --> 00:13:37,570
propagate any failures in the system a

00:13:35,470 --> 00:13:39,250
lot faster so rather than every section

00:13:37,570 --> 00:13:40,930
independently having to rediscover the

00:13:39,250 --> 00:13:42,910
fact that the kitchen is really

00:13:40,930 --> 00:13:45,340
unhealthy they'll teach each other about

00:13:42,910 --> 00:13:47,530
it as soon as any of them know on the

00:13:45,340 --> 00:13:50,170
downside this pulls in a lot of

00:13:47,530 --> 00:13:51,370
complicated questions around building a

00:13:50,170 --> 00:13:53,890
distributed data store in the first

00:13:51,370 --> 00:13:55,450
place this is a short talk and I have

00:13:53,890 --> 00:13:58,060
nowhere near enough time to dig into all

00:13:55,450 --> 00:13:59,860
the complexities here but a lot of the

00:13:58,060 --> 00:14:01,690
issues around the cap theorem and

00:13:59,860 --> 00:14:03,700
deciding whether you want to be highly

00:14:01,690 --> 00:14:05,170
consistent or not all get pulled in as

00:14:03,700 --> 00:14:07,600
soon as you decide to share a central

00:14:05,170 --> 00:14:10,340
data store like this

00:14:07,600 --> 00:14:12,290
all right so let's talk a little bit

00:14:10,340 --> 00:14:15,170
about sort of the second question we had

00:14:12,290 --> 00:14:17,140
proposed which is given that the system

00:14:15,170 --> 00:14:19,460
becomes unhealthy what do we do about it

00:14:17,140 --> 00:14:21,620
and recall that in the basic circuit

00:14:19,460 --> 00:14:24,260
breaker the only action taken is we're

00:14:21,620 --> 00:14:25,430
gonna block future requests now you

00:14:24,260 --> 00:14:27,589
might imagine that this feels a little

00:14:25,430 --> 00:14:30,020
bit substandard because if I'm a

00:14:27,589 --> 00:14:32,150
customer I come I sit down I look at a

00:14:30,020 --> 00:14:34,279
menu I take my time I decide what I want

00:14:32,150 --> 00:14:35,600
and then at the very last minute I get

00:14:34,279 --> 00:14:37,700
told oh I'm sorry we're totally

00:14:35,600 --> 00:14:39,410
unavailable right now it's it's

00:14:37,700 --> 00:14:42,140
functional but it's pretty frustrating

00:14:39,410 --> 00:14:43,490
for all your users so what we're gonna

00:14:42,140 --> 00:14:45,470
do is take that method that we had

00:14:43,490 --> 00:14:46,339
discussed sort of deciding if the system

00:14:45,470 --> 00:14:47,930
is healthy or not

00:14:46,339 --> 00:14:49,310
and maybe that's coming from one waiter

00:14:47,930 --> 00:14:51,320
or maybe it's coming from a central

00:14:49,310 --> 00:14:52,700
database of some sort and we're gonna

00:14:51,320 --> 00:14:54,560
make it public make it an API to

00:14:52,700 --> 00:14:58,220
whatever other code wants to consult it

00:14:54,560 --> 00:14:59,930
and so instead of only the action we're

00:14:58,220 --> 00:15:01,730
taking being to block orders right when

00:14:59,930 --> 00:15:03,170
they're made we can maybe make some

00:15:01,730 --> 00:15:04,850
slight improvements like we can say

00:15:03,170 --> 00:15:07,640
don't let anybody else sit down at a

00:15:04,850 --> 00:15:09,410
table once the system is unhealthy we

00:15:07,640 --> 00:15:12,140
can also imagine building out a lot of

00:15:09,410 --> 00:15:13,940
other features along this same vein and

00:15:12,140 --> 00:15:15,500
so the new behavior we can introduce is

00:15:13,940 --> 00:15:17,180
we've essentially made the information

00:15:15,500 --> 00:15:18,710
about healthiness public and we can

00:15:17,180 --> 00:15:20,510
build any number of features on top of

00:15:18,710 --> 00:15:22,580
that maybe that looks like shutting off

00:15:20,510 --> 00:15:24,770
access to whatever this feature is when

00:15:22,580 --> 00:15:26,240
the system becomes unhealthy maybe it

00:15:24,770 --> 00:15:27,850
even looks like really automatic

00:15:26,240 --> 00:15:30,920
monitoring so we can go ahead and have

00:15:27,850 --> 00:15:32,150
some sort of you know manager be notify

00:15:30,920 --> 00:15:34,640
immediately when the system becomes

00:15:32,150 --> 00:15:36,020
unhealthy and the advantages we've

00:15:34,640 --> 00:15:38,089
gotten here is we obviously have a lot

00:15:36,020 --> 00:15:39,770
of flexibility we can build out any

00:15:38,089 --> 00:15:41,390
feature we would like on top of this and

00:15:39,770 --> 00:15:42,830
the only downside is we have to ask

00:15:41,390 --> 00:15:44,870
ourselves some hard questions about

00:15:42,830 --> 00:15:46,100
consistency of that information and that

00:15:44,870 --> 00:15:48,960
sort of gets back to the questions we

00:15:46,100 --> 00:15:52,560
had asked in the previous section

00:15:48,960 --> 00:15:54,930
okay so one other question we might say

00:15:52,560 --> 00:15:56,670
is we had said before the waiters are in

00:15:54,930 --> 00:15:57,899
a slightly awkward position to decide

00:15:56,670 --> 00:15:59,850
whether everything is healthy or not

00:15:57,899 --> 00:16:01,350
right all they can see is the request

00:15:59,850 --> 00:16:03,750
that they make and whether or not they

00:16:01,350 --> 00:16:05,880
come back and we might imagine that

00:16:03,750 --> 00:16:07,440
stems in our scenario something on the

00:16:05,880 --> 00:16:09,750
back end the cooks might have a really

00:16:07,440 --> 00:16:11,339
good perspective here so we can have

00:16:09,750 --> 00:16:13,140
them implement some relatively simple

00:16:11,339 --> 00:16:14,550
function and they can say you know what

00:16:13,140 --> 00:16:16,410
we're in the best position to tell if

00:16:14,550 --> 00:16:17,790
the system is unhealthy if we have way

00:16:16,410 --> 00:16:19,830
too much work to do and we know we're

00:16:17,790 --> 00:16:21,330
hopelessly behind so we can go ahead and

00:16:19,830 --> 00:16:22,800
have them determine this and send a

00:16:21,330 --> 00:16:24,720
signal to the circuit breaker even

00:16:22,800 --> 00:16:28,050
though they don't own it that says look

00:16:24,720 --> 00:16:30,149
the system is very unhealthy so behavior

00:16:28,050 --> 00:16:32,040
that we've introduced if we allow this

00:16:30,149 --> 00:16:33,899
we can basically say anything in our

00:16:32,040 --> 00:16:35,790
broader system is allowed to communicate

00:16:33,899 --> 00:16:38,190
information it's an opinion to the

00:16:35,790 --> 00:16:39,839
circuit breaker and we have to come up

00:16:38,190 --> 00:16:41,790
with some way to combine that right if

00:16:39,839 --> 00:16:43,020
we're having waiters disagree with the

00:16:41,790 --> 00:16:45,120
kitchen about whether the system is

00:16:43,020 --> 00:16:47,370
healthy we have to make some decision

00:16:45,120 --> 00:16:50,399
and we need to decide who gets to win in

00:16:47,370 --> 00:16:52,140
that in that disagreement so an upside

00:16:50,399 --> 00:16:54,570
we've introduced a whole world of new

00:16:52,140 --> 00:16:57,150
signals this is a very wide-ranging and

00:16:54,570 --> 00:16:59,250
powerful tool to have and on the

00:16:57,150 --> 00:17:01,589
downside we've created a tool that's

00:16:59,250 --> 00:17:03,060
really powerful and complicated so I've

00:17:01,589 --> 00:17:05,130
personally written some circuit breaker

00:17:03,060 --> 00:17:07,170
logic that is really really hard to

00:17:05,130 --> 00:17:08,730
untangle after the fact and I've seen

00:17:07,170 --> 00:17:10,290
myself in production in situations where

00:17:08,730 --> 00:17:11,910
something is on fire and I have no idea

00:17:10,290 --> 00:17:14,459
why I can't really recommend that

00:17:11,910 --> 00:17:16,140
approach so keeping this simple enough

00:17:14,459 --> 00:17:17,610
that you can understand it while complex

00:17:16,140 --> 00:17:19,670
enough that it actually does the job is

00:17:17,610 --> 00:17:22,350
tricky

00:17:19,670 --> 00:17:23,850
all right and the fourth thing fourth

00:17:22,350 --> 00:17:25,400
question we're gonna ask ourselves is

00:17:23,850 --> 00:17:28,050
what are some alternatives to recovery

00:17:25,400 --> 00:17:29,790
so in the original formulation we had

00:17:28,050 --> 00:17:31,440
said that we're gonna wait a specific

00:17:29,790 --> 00:17:32,970
time out maybe five seconds and then

00:17:31,440 --> 00:17:35,040
we're gonna issue a single request and

00:17:32,970 --> 00:17:37,230
if it works great we're healthy and if

00:17:35,040 --> 00:17:38,670
it fails great we're unhealthy so we're

00:17:37,230 --> 00:17:41,980
sort of trusting that single trial

00:17:38,670 --> 00:17:44,650
requests tell us the right information

00:17:41,980 --> 00:17:46,540
one alternative we could take on is to

00:17:44,650 --> 00:17:48,280
try something called dark launched

00:17:46,540 --> 00:17:50,740
requests and essentially what these are

00:17:48,280 --> 00:17:52,390
is we're gonna take live user requests

00:17:50,740 --> 00:17:53,590
we're gonna block them just like we

00:17:52,390 --> 00:17:55,510
would have in the normal circuit breaker

00:17:53,590 --> 00:17:56,740
but instead of blocking them and

00:17:55,510 --> 00:17:57,970
forgetting about the request entirely

00:17:56,740 --> 00:17:59,590
we're actually going to pass it through

00:17:57,970 --> 00:18:01,060
to the backend we're gonna run it

00:17:59,590 --> 00:18:02,530
through just like a normal request would

00:18:01,060 --> 00:18:04,240
be and we're gonna pay attention to

00:18:02,530 --> 00:18:07,150
whether it succeeds or fails just like a

00:18:04,240 --> 00:18:09,760
normal request would now you can imagine

00:18:07,150 --> 00:18:12,700
that this is really really nice when it

00:18:09,760 --> 00:18:15,580
works we have live user traffic with all

00:18:12,700 --> 00:18:17,320
the peculiarities and features that that

00:18:15,580 --> 00:18:19,960
might have and it's going to tell us

00:18:17,320 --> 00:18:21,850
exactly when our system is alive or in

00:18:19,960 --> 00:18:23,860
trouble but on the downside it's

00:18:21,850 --> 00:18:25,300
thoroughly incompatible with certain

00:18:23,860 --> 00:18:27,340
systems so if I'm running a search

00:18:25,300 --> 00:18:28,510
engine I don't mind doing this I'm happy

00:18:27,340 --> 00:18:30,040
to tell the user their search isn't

00:18:28,510 --> 00:18:32,560
getting processed but then actually do

00:18:30,040 --> 00:18:34,870
it but on the flip side I work with

00:18:32,560 --> 00:18:36,520
credit-card processing and I think you

00:18:34,870 --> 00:18:38,170
would hope that if I told you your order

00:18:36,520 --> 00:18:39,640
hadn't been completed I would not in the

00:18:38,170 --> 00:18:42,190
background be silently charging your

00:18:39,640 --> 00:18:43,210
credit card so there are plenty of cases

00:18:42,190 --> 00:18:44,740
where you have these kinds of side

00:18:43,210 --> 00:18:46,630
effects you really don't want to be

00:18:44,740 --> 00:18:50,530
telling users that things are a certain

00:18:46,630 --> 00:18:51,910
way when they're not one alternative for

00:18:50,530 --> 00:18:55,000
those kinds of situations is what's

00:18:51,910 --> 00:18:56,890
called synthetic requests so as before

00:18:55,000 --> 00:18:59,050
with dark launching we blocked real user

00:18:56,890 --> 00:19:00,580
requests and then we secretly did them

00:18:59,050 --> 00:19:01,900
in the background what we're gonna do

00:19:00,580 --> 00:19:04,000
here is still block the real user

00:19:01,900 --> 00:19:06,610
requests and then instead of processing

00:19:04,000 --> 00:19:08,650
those we're gonna process something fake

00:19:06,610 --> 00:19:10,210
that we've made up ourselves in the case

00:19:08,650 --> 00:19:13,150
of the diner you might imagine that

00:19:10,210 --> 00:19:14,350
every let's say five minutes you ask the

00:19:13,150 --> 00:19:16,240
kitchen to make you a salad

00:19:14,350 --> 00:19:18,850
this is a fake order no one's gonna eat

00:19:16,240 --> 00:19:20,050
the salad might be a little wasteful but

00:19:18,850 --> 00:19:21,790
you can go ahead and figure out if those

00:19:20,050 --> 00:19:24,300
salads are getting made successfully

00:19:21,790 --> 00:19:26,830
then the kitchen is probably doing okay

00:19:24,300 --> 00:19:28,690
obvious downside here is there's no

00:19:26,830 --> 00:19:30,970
guarantee that those synthetic requests

00:19:28,690 --> 00:19:34,180
represent real user traffic or patterns

00:19:30,970 --> 00:19:35,500
or load or demands on your system in the

00:19:34,180 --> 00:19:36,850
case that we're building

00:19:35,500 --> 00:19:38,920
they were asking the kitchen to make

00:19:36,850 --> 00:19:40,750
salads every five minutes if the grill

00:19:38,920 --> 00:19:42,610
is completely destroyed and they can't

00:19:40,750 --> 00:19:43,780
make a single hamburger obviously those

00:19:42,610 --> 00:19:46,030
salad requests are going to work just

00:19:43,780 --> 00:19:47,590
fine everything's going to report that

00:19:46,030 --> 00:19:49,300
your kitchen is doing very well and then

00:19:47,590 --> 00:19:50,800
the moment that you decide to send a

00:19:49,300 --> 00:19:51,450
real user request and try and make a

00:19:50,800 --> 00:19:54,750
hamburger

00:19:51,450 --> 00:19:58,889
break again so synthetic is easy to do

00:19:54,750 --> 00:20:00,690
but maybe not accurate and these new

00:19:58,889 --> 00:20:02,700
behaviors give us a lot of opportunities

00:20:00,690 --> 00:20:05,190
for traffic to determine health they let

00:20:02,700 --> 00:20:06,960
us really remove those timeouts and not

00:20:05,190 --> 00:20:08,789
worry about tuning them or creating them

00:20:06,960 --> 00:20:10,200
but on the downside we've talked through

00:20:08,789 --> 00:20:11,820
a couple reasons why maybe they're not

00:20:10,200 --> 00:20:12,990
appropriate for every use case and we

00:20:11,820 --> 00:20:16,830
need to think a little bit before

00:20:12,990 --> 00:20:19,830
applying them all right so let's wrap up

00:20:16,830 --> 00:20:21,539
a little bit if you only take two

00:20:19,830 --> 00:20:23,190
lessons away from this talk hopefully

00:20:21,539 --> 00:20:25,139
the first one is that if you have

00:20:23,190 --> 00:20:27,059
networks in your system if you're doing

00:20:25,139 --> 00:20:28,889
micro services or docker or any number

00:20:27,059 --> 00:20:31,440
of other technologies you need to plan

00:20:28,889 --> 00:20:33,450
for failure and not only do you need to

00:20:31,440 --> 00:20:35,220
plan you should not be afraid of taking

00:20:33,450 --> 00:20:36,960
the basic solution the basic circuit

00:20:35,220 --> 00:20:39,269
breaker if you don't have time to build

00:20:36,960 --> 00:20:41,250
anything else it is a limited approach

00:20:39,269 --> 00:20:42,570
but it does work and for the reasons we

00:20:41,250 --> 00:20:45,179
talked about in the beginning it's a lot

00:20:42,570 --> 00:20:47,190
better than doing nothing at all that

00:20:45,179 --> 00:20:48,570
said if you do have some extra time and

00:20:47,190 --> 00:20:50,250
if you can devote it there are a lot of

00:20:48,570 --> 00:20:52,309
ways that you can customize it to be

00:20:50,250 --> 00:20:54,450
even better for your personal situation

00:20:52,309 --> 00:20:56,100
we had talked about maybe how many

00:20:54,450 --> 00:20:58,740
circuit breakers you should have do we

00:20:56,100 --> 00:20:59,940
want one per set of processes do we want

00:20:58,740 --> 00:21:02,389
them to communicate should they be

00:20:59,940 --> 00:21:04,799
completely independent of each other

00:21:02,389 --> 00:21:05,970
we had asked maybe what should we do in

00:21:04,799 --> 00:21:07,529
response to the system becoming

00:21:05,970 --> 00:21:09,990
unhealthy do we want to go ahead and

00:21:07,529 --> 00:21:11,340
just buck requests do we want to trigger

00:21:09,990 --> 00:21:12,990
some other features do we want to

00:21:11,340 --> 00:21:16,769
prevent users from ever even seeing this

00:21:12,990 --> 00:21:18,570
feature we had wondered out loud maybe

00:21:16,769 --> 00:21:20,090
if the circuit breakers themselves

00:21:18,570 --> 00:21:21,990
aren't always in the best position to

00:21:20,090 --> 00:21:23,549
decide if the system is healthier

00:21:21,990 --> 00:21:25,470
unhealthy and we might need to integrate

00:21:23,549 --> 00:21:28,500
multiple sources of information and make

00:21:25,470 --> 00:21:29,850
some final judgments and then finally we

00:21:28,500 --> 00:21:32,309
talked a little bit about alternative

00:21:29,850 --> 00:21:34,169
ways to do recovery all of them traffic

00:21:32,309 --> 00:21:36,990
based and some of them were accurate

00:21:34,169 --> 00:21:38,399
than others and I should say there's a

00:21:36,990 --> 00:21:40,139
lot more here obviously we're a little

00:21:38,399 --> 00:21:41,730
time constrained but there are many many

00:21:40,139 --> 00:21:43,769
ways you can customize circuit breakers

00:21:41,730 --> 00:21:46,279
they're more a positive thinking than

00:21:43,769 --> 00:21:48,210
they are a specified implementation and

00:21:46,279 --> 00:21:50,220
everything comes down to your use case

00:21:48,210 --> 00:21:52,049
so depending on what you're looking for

00:21:50,220 --> 00:21:53,250
a lot of different forms of this kind of

00:21:52,049 --> 00:21:55,350
approach might be the right answer for

00:21:53,250 --> 00:21:56,730
you hopefully this is giving you some

00:21:55,350 --> 00:21:59,310
tools and ways to think about it that

00:21:56,730 --> 00:22:00,990
you'll find useful going forward

00:21:59,310 --> 00:22:03,150
and with that I think we have a little

00:22:00,990 --> 00:22:04,680
bit of time for questions if I don't get

00:22:03,150 --> 00:22:07,200
any time now to talk to you happy to

00:22:04,680 --> 00:22:10,310
chat after online or I'll be out at the

00:22:07,200 --> 00:22:10,310
yell booth thanks

00:22:18,220 --> 00:22:25,850
hey good talk like I have a question i

00:22:22,360 --> 00:22:28,909
I've seen a lot about circus breakers

00:22:25,850 --> 00:22:34,100
and I saw that most of the implications

00:22:28,909 --> 00:22:37,909
in the API get website because we have

00:22:34,100 --> 00:22:40,279
main central way of getting requests and

00:22:37,909 --> 00:22:42,860
I just wanted to know if you do that and

00:22:40,279 --> 00:22:44,149
now you did it so you said that the most

00:22:42,860 --> 00:22:48,470
of the circuit breakers you saw were

00:22:44,149 --> 00:22:50,240
sorry in the API gateway ah yes so you

00:22:48,470 --> 00:22:52,129
certainly can build them into any part

00:22:50,240 --> 00:22:53,960
of the system I think it's very very

00:22:52,129 --> 00:22:55,970
common for them to live either in the

00:22:53,960 --> 00:22:58,820
clients themselves or maybe somewhere

00:22:55,970 --> 00:23:00,919
between clients and and those api's I

00:22:58,820 --> 00:23:02,450
would say all of the use cases I've

00:23:00,919 --> 00:23:04,159
personally had they've lived pretty

00:23:02,450 --> 00:23:06,019
close to clients but I think there's

00:23:04,159 --> 00:23:07,340
nothing fundamental that requires them

00:23:06,019 --> 00:23:08,860
to be there that's certainly one of

00:23:07,340 --> 00:23:11,419
those questions that's kind of in the

00:23:08,860 --> 00:23:12,649
much more section right an interesting

00:23:11,419 --> 00:23:14,869
thing to think about what you get by

00:23:12,649 --> 00:23:16,789
putting it in clients or on the server

00:23:14,869 --> 00:23:20,090
side or somewhere in between and a smart

00:23:16,789 --> 00:23:25,249
proxy sounds very interesting be happy

00:23:20,090 --> 00:23:29,269
to talk with you after about it yeah I

00:23:25,249 --> 00:23:33,259
think in a production system you would

00:23:29,269 --> 00:23:35,570
have probably 10 or 20 kitchens so the

00:23:33,259 --> 00:23:39,919
thing would become even more complicated

00:23:35,570 --> 00:23:43,669
yes how do you compare using this kind

00:23:39,919 --> 00:23:45,769
of HTTP request or whatever

00:23:43,669 --> 00:23:48,280
communication layer you have with

00:23:45,769 --> 00:23:50,440
circuit breakers

00:23:48,280 --> 00:23:53,560
how you compare them with having a

00:23:50,440 --> 00:23:56,290
something like rabbitmq or some queueing

00:23:53,560 --> 00:24:00,430
system to the couple one thing of the

00:23:56,290 --> 00:24:02,830
other experience you remove a great part

00:24:00,430 --> 00:24:06,130
of this complexity but maybe other one

00:24:02,830 --> 00:24:07,840
other complexity arises sure sure so

00:24:06,130 --> 00:24:11,080
sort of if we have a system that's not

00:24:07,840 --> 00:24:13,030
maybe Strictly http-based RabbitMQ any

00:24:11,080 --> 00:24:15,310
number of task queues do we is there any

00:24:13,030 --> 00:24:17,230
point to still doing this uh I can say

00:24:15,310 --> 00:24:20,230
that from my own work a lot of what we

00:24:17,230 --> 00:24:21,670
do is not HTTP based because the nature

00:24:20,230 --> 00:24:24,040
of dealing with money is that you would

00:24:21,670 --> 00:24:25,960
rather a network blip not forget about

00:24:24,040 --> 00:24:28,330
your order or your credit card purchase

00:24:25,960 --> 00:24:30,550
we're mostly Cubase so we do a lot of

00:24:28,330 --> 00:24:32,890
work with Amazon's SQS other

00:24:30,550 --> 00:24:34,600
technologies in that vein and even in

00:24:32,890 --> 00:24:36,820
those cases you still want this behavior

00:24:34,600 --> 00:24:38,920
right that solves some sources of

00:24:36,820 --> 00:24:41,170
unreliability but if I write bad code in

00:24:38,920 --> 00:24:43,690
the back end that silently drops every

00:24:41,170 --> 00:24:45,520
request we still want to identify that

00:24:43,690 --> 00:24:46,780
and take corrective action even if the

00:24:45,520 --> 00:24:49,960
only thing we do is block future

00:24:46,780 --> 00:24:52,060
requests so better transports are better

00:24:49,960 --> 00:24:59,770
they solve some problems but still

00:24:52,060 --> 00:25:02,650
relevant for this a great talk um say I

00:24:59,770 --> 00:25:06,280
need to my waiters to synchronize over a

00:25:02,650 --> 00:25:08,020
storage but what I do is I introduce

00:25:06,280 --> 00:25:10,480
another moving part right because the

00:25:08,020 --> 00:25:14,020
sea beasts are store is another thing

00:25:10,480 --> 00:25:16,930
that could fail possibly how do you

00:25:14,020 --> 00:25:19,330
think is what's the best way to deal

00:25:16,930 --> 00:25:21,220
with that because if that fails I cannot

00:25:19,330 --> 00:25:23,260
even determine whether anything is

00:25:21,220 --> 00:25:24,760
healthy and yeah absolutely and that's a

00:25:23,260 --> 00:25:26,920
great observation when I had originally

00:25:24,760 --> 00:25:29,080
talked about this with some colleagues I

00:25:26,920 --> 00:25:30,370
had taken it kind of as an assumption

00:25:29,080 --> 00:25:31,570
that you would have some central data

00:25:30,370 --> 00:25:34,570
store because why would you want these

00:25:31,570 --> 00:25:37,210
to be independent and a colleague of

00:25:34,570 --> 00:25:38,950
mine on sort of the operational side of

00:25:37,210 --> 00:25:41,680
things basically said exactly what

00:25:38,950 --> 00:25:43,720
you're describing if your goal is for

00:25:41,680 --> 00:25:45,130
this to be a bulletproof failure mode so

00:25:43,720 --> 00:25:47,920
this is maybe the traffic that serves

00:25:45,130 --> 00:25:50,200
the entire website any amount of

00:25:47,920 --> 00:25:52,060
coupling to another failure point is a

00:25:50,200 --> 00:25:53,710
bad thing right any amount of coupling

00:25:52,060 --> 00:25:55,480
across processes might even be a bad

00:25:53,710 --> 00:25:56,740
thing and so there can be cases where

00:25:55,480 --> 00:25:59,170
you would actually accept a slower

00:25:56,740 --> 00:25:59,779
response in exchange for a simpler set

00:25:59,170 --> 00:26:00,769
up yeah

00:25:59,779 --> 00:26:04,999
and that's that's a very good way of

00:26:00,769 --> 00:26:14,090
saying it okay uh I see you one more

00:26:04,999 --> 00:26:16,179
question over there all right thanks

00:26:14,090 --> 00:26:18,799
very talk well question how would you

00:26:16,179 --> 00:26:19,940
how do you reconcile this with load

00:26:18,799 --> 00:26:23,299
balancing like if you've got multiple

00:26:19,940 --> 00:26:25,729
kitchens and you wanna maybe one one

00:26:23,299 --> 00:26:27,950
kitchen goes wrong load balance to other

00:26:25,729 --> 00:26:31,969
ones and how do you make the circuit

00:26:27,950 --> 00:26:34,879
breaker interact with that yeah for sure

00:26:31,969 --> 00:26:36,320
I think in some sense they can be

00:26:34,879 --> 00:26:37,909
decoupled if your circuit breaker is

00:26:36,320 --> 00:26:39,889
oriented on the client side of things

00:26:37,909 --> 00:26:41,149
you maybe are completely unaware of load

00:26:39,889 --> 00:26:44,089
balancing that's something that's

00:26:41,149 --> 00:26:45,589
secretly implemented on the back end in

00:26:44,089 --> 00:26:47,479
cases where load balancers are doing

00:26:45,589 --> 00:26:49,489
their job detecting unhealthy instances

00:26:47,479 --> 00:26:51,529
and removing them to a client that looks

00:26:49,489 --> 00:26:52,969
just like everything is going well so in

00:26:51,529 --> 00:26:55,099
those cases the circuit breaker would

00:26:52,969 --> 00:26:58,609
not notice a problem because there isn't

00:26:55,099 --> 00:27:00,259
a problem but it's a good sort of backup

00:26:58,609 --> 00:27:01,759
mode again there are going to be plenty

00:27:00,259 --> 00:27:03,409
of other cases where maybe your load

00:27:01,759 --> 00:27:04,999
balancers are overeager they remove

00:27:03,409 --> 00:27:06,979
everything from the back end and now

00:27:04,999 --> 00:27:09,999
you're gonna be really excited about

00:27:06,979 --> 00:27:12,409
having a circuit breaker in place still

00:27:09,999 --> 00:27:17,229
okay I think that was it

00:27:12,409 --> 00:27:17,229

YouTube URL: https://www.youtube.com/watch?v=vdS88uyGayM


