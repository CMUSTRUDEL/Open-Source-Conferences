Title: Juan Luis Cano - Per Python ad Astra
Publication date: 2016-07-30
Playlist: EuroPython 2016
Description: 
	Juan Luis Cano - Per Python ad Astra
[EuroPython 2016]
[20 July 2016]
[Bilbao, Euskadi, Spain]
(https://ep2016.europython.eu//conference/talks/per-python-ad-astra)

In the intersection of mechanics, mathematics and "cool stuff that
travels through space" lies Astrodynamics, a beautiful branch of
physics that studies the motion of spacecraft. In this talk we will
describe poliastro, a pure Python library we can use to compute
orbital maneuvers, plot trajectories and much more. The role of JIT
compiling (using numba) to drop the previously used FORTRAN algorithms
will also be discussed, as well as the importance of open source in
scientific discoveries.

-----

In the intersection of mechanics, mathematics and "cool stuff that
travels through space" lies Astrodynamics, a beautiful branch of
physics that studies the motion of spacecraft. Rocket launches have
never been so popular thanks to companies like Space X, more and more
investors pay attention to aerospace startups and amazing missions
explore our planet and our Solar System every day. In this talk we
will describe poliastro, a pure Python library we can use to compute
orbital maneuvers, plot trajectories and much more. The role of JIT
compiling (using numba) to drop the previously used FORTRAN algorithms
will also be discussed, as well as the importance of open source in
scientific discoveries.
Captions: 
	00:00:00,380 --> 00:00:09,290
the title is per Python ad astra and

00:00:04,710 --> 00:00:09,290
please welcome Juan Luis Cano

00:00:13,130 --> 00:00:17,100
well as the previous speaker said

00:00:15,179 --> 00:00:21,180
there's a Python library for everything

00:00:17,100 --> 00:00:22,740
in life even for rocket science well let

00:00:21,180 --> 00:00:25,140
me introduce myself first

00:00:22,740 --> 00:00:27,810
my name is Mauricio no I'm an almost

00:00:25,140 --> 00:00:29,939
aerospace engineering engineer studying

00:00:27,810 --> 00:00:32,809
in Madrid and right now working in

00:00:29,939 --> 00:00:35,579
finance as a Python developer for BBVA

00:00:32,809 --> 00:00:39,170
mostly a self-taught programmer because

00:00:35,579 --> 00:00:42,120
in university they used with us for a

00:00:39,170 --> 00:00:45,000
little bit of MATLAB and we'll we run

00:00:42,120 --> 00:00:48,149
all of our algorithms in Excel so it was

00:00:45,000 --> 00:00:51,180
not a great background to start with and

00:00:48,149 --> 00:00:53,489
I'm passionate individual about open

00:00:51,180 --> 00:00:55,879
source open hardware open science and

00:00:53,489 --> 00:00:59,039
its relevance in the world we live now

00:00:55,879 --> 00:01:01,590
I'm also the chair of the Python Spain

00:00:59,039 --> 00:01:03,780
nonprofit and organizing main events

00:01:01,590 --> 00:01:06,360
like the Python Spain conference the

00:01:03,780 --> 00:01:08,400
fight on Madrid meetup and I remind you

00:01:06,360 --> 00:01:10,140
that the bike on Spain call for

00:01:08,400 --> 00:01:12,659
professors is still open in case you

00:01:10,140 --> 00:01:17,150
didn't I didn't make it clear yesterday

00:01:12,659 --> 00:01:21,270
in my quick lightning talk and well

00:01:17,150 --> 00:01:23,970
space fascinating listening well I found

00:01:21,270 --> 00:01:27,570
something very amusing about space and

00:01:23,970 --> 00:01:30,750
is that almost nobody knows how it works

00:01:27,570 --> 00:01:33,360
and what's going on up there and yet

00:01:30,750 --> 00:01:35,640
it's like the only field adults are

00:01:33,360 --> 00:01:38,460
willing to accept their ignorance and

00:01:35,640 --> 00:01:39,689
ask all kind of questions and I say Alex

00:01:38,460 --> 00:01:41,549
fear because you really have this

00:01:39,689 --> 00:01:44,220
amazing superpower of asking almost

00:01:41,549 --> 00:01:49,710
everything and this infinite curiosity

00:01:44,220 --> 00:01:54,630
that also starts losing with time well

00:01:49,710 --> 00:01:56,790
so wait a minute before explaining what

00:01:54,630 --> 00:01:58,829
it's exactly it's astrodynamics teen and

00:01:56,790 --> 00:02:01,560
given any wikipedia definitions little

00:01:58,829 --> 00:02:03,360
stir with a little video you might

00:02:01,560 --> 00:02:05,460
recognize here Clark Kent from the

00:02:03,360 --> 00:02:07,920
supermarket turns movie and he is

00:02:05,460 --> 00:02:10,440
watching life through his alien ions and

00:02:07,920 --> 00:02:13,170
this ridiculous haircut and wondering

00:02:10,440 --> 00:02:14,310
what if I use my super strength to put

00:02:13,170 --> 00:02:19,410
this baseball in orbit

00:02:14,310 --> 00:02:21,540
and so it goes bye-bye then the dogs

00:02:19,410 --> 00:02:24,239
quickly runs to cut the bulb and

00:02:21,540 --> 00:02:26,520
realizes the situation and turns his

00:02:24,239 --> 00:02:28,800
back to Clark like seriously and then

00:02:26,520 --> 00:02:32,970
will the bat hits some random guy in New

00:02:28,800 --> 00:02:35,880
Zealand or something so what's happening

00:02:32,970 --> 00:02:38,610
here like well Superman is super super

00:02:35,880 --> 00:02:42,720
strong so if he's launching the baseball

00:02:38,610 --> 00:02:44,910
very very quick then he's going to reach

00:02:42,720 --> 00:02:47,670
a very long distance and as the earth is

00:02:44,910 --> 00:02:50,160
round well there are no flat earthers in

00:02:47,670 --> 00:02:51,930
this room right because I'm going to

00:02:50,160 --> 00:02:55,260
disappoint you a lot you can you might

00:02:51,930 --> 00:02:57,840
leave now okay as the earth is round

00:02:55,260 --> 00:03:01,319
then the ground is starting to curve

00:02:57,840 --> 00:03:03,900
under your feet so the ball is hitting

00:03:01,319 --> 00:03:05,310
some point to the other side of the

00:03:03,900 --> 00:03:08,069
world eventually it's going to reach

00:03:05,310 --> 00:03:11,190
like New Zealand the other the other

00:03:08,069 --> 00:03:14,700
side any of you launch the baseball even

00:03:11,190 --> 00:03:18,000
quicker then at some point the ground is

00:03:14,700 --> 00:03:20,310
curving so fast that you never touch it

00:03:18,000 --> 00:03:23,489
and this is what we call orbital

00:03:20,310 --> 00:03:25,350
velocity or orbital motion and freefall

00:03:23,489 --> 00:03:30,720
because you don't actually need any

00:03:25,350 --> 00:03:32,640
propulsion or any means to like increase

00:03:30,720 --> 00:03:35,370
your velocity and you're just falling

00:03:32,640 --> 00:03:38,250
all the time this example is not mine it

00:03:35,370 --> 00:03:40,260
was devised by Newton in his masterpiece

00:03:38,250 --> 00:03:40,910
of the 17th century principia

00:03:40,260 --> 00:03:44,310
mathematica

00:03:40,910 --> 00:03:46,829
and is one of the earliest examples of a

00:03:44,310 --> 00:03:49,950
thought experiment but obviously he

00:03:46,829 --> 00:03:53,220
didn't do Superman for the analogy the

00:03:49,950 --> 00:03:54,660
title of the track of the the piece is

00:03:53,220 --> 00:03:58,260
in Latin and we will talk more about

00:03:54,660 --> 00:04:00,030
Latin at the end keep this in mind well

00:03:58,260 --> 00:04:02,280
so with this in mind what is

00:04:00,030 --> 00:04:04,430
astrodynamics exactly what is a branch

00:04:02,280 --> 00:04:07,019
of celestial mechanics that studies the

00:04:04,430 --> 00:04:09,480
motion of human-made objects through

00:04:07,019 --> 00:04:10,799
space and there is a very essential a

00:04:09,480 --> 00:04:12,900
couple of essential differences between

00:04:10,799 --> 00:04:15,389
studying the motion of the planets and

00:04:12,900 --> 00:04:17,789
the motion of human-made objects because

00:04:15,389 --> 00:04:19,799
the satellites rockets and stuff are so

00:04:17,789 --> 00:04:22,740
small that we have to take into account

00:04:19,799 --> 00:04:25,530
all the perturbations that might act to

00:04:22,740 --> 00:04:27,180
them and also they have propulsion means

00:04:25,530 --> 00:04:30,419
so they can act

00:04:27,180 --> 00:04:33,740
on their own trajectory and correct the

00:04:30,419 --> 00:04:37,400
velocity and this complicates everything

00:04:33,740 --> 00:04:39,690
well and this is where the introduction

00:04:37,400 --> 00:04:41,669
stops I'm going to put a little bit of

00:04:39,690 --> 00:04:43,800
math but I am going to try to keep it

00:04:41,669 --> 00:04:45,210
very simple I don't need everybody in

00:04:43,800 --> 00:04:47,610
the audience to understand everything

00:04:45,210 --> 00:04:49,979
but I just want you to keep in mind the

00:04:47,610 --> 00:04:51,720
ideas that are behind these kind of

00:04:49,979 --> 00:04:53,220
problems I'm going to talk about the

00:04:51,720 --> 00:04:55,710
basic problems that we solve in

00:04:53,220 --> 00:04:59,639
astrodynamics and later on I'm going to

00:04:55,710 --> 00:05:00,660
say how do I solve them in Python well

00:04:59,639 --> 00:05:03,630
the first one is a two-body problem

00:05:00,660 --> 00:05:07,860
which is just one body orbiting around

00:05:03,630 --> 00:05:09,960
another one okay in the limiting case we

00:05:07,860 --> 00:05:12,840
are considering that this must have no

00:05:09,960 --> 00:05:16,680
radius okay so it's there just like

00:05:12,840 --> 00:05:19,110
geometric points in space and as we are

00:05:16,680 --> 00:05:21,479
usually considering like the motion of a

00:05:19,110 --> 00:05:23,400
spacecraft around a planet or a moon or

00:05:21,479 --> 00:05:25,229
something then we can assume that the

00:05:23,400 --> 00:05:28,229
second body is very very small and

00:05:25,229 --> 00:05:29,880
doesn't have any effect on the orbit of

00:05:28,229 --> 00:05:34,080
the first one and that is the equation

00:05:29,880 --> 00:05:37,590
that controls everything and the second

00:05:34,080 --> 00:05:39,630
one is the Kepler problem which is like

00:05:37,590 --> 00:05:43,440
the initial value problem of the thing

00:05:39,630 --> 00:05:45,389
that I said before I have some state and

00:05:43,440 --> 00:05:48,210
some moment I have a position and a

00:05:45,389 --> 00:05:50,699
velocity and after some time I want to

00:05:48,210 --> 00:05:52,590
know where my satellite my spacecraft

00:05:50,699 --> 00:05:54,659
whatever is going to be this is coal

00:05:52,590 --> 00:05:57,090
also propagation and these are the

00:05:54,659 --> 00:05:59,280
equations down for the or for the

00:05:57,090 --> 00:06:01,770
elliptical case that govern everything

00:05:59,280 --> 00:06:05,520
and I want to put this here because that

00:06:01,770 --> 00:06:09,509
equation over there the first one if you

00:06:05,520 --> 00:06:11,849
remind if you remember your your

00:06:09,509 --> 00:06:14,729
secondary school mathematics you cannot

00:06:11,849 --> 00:06:17,880
solve that equation for e for capital e

00:06:14,729 --> 00:06:20,220
and that is the for some people they say

00:06:17,880 --> 00:06:24,690
that this equation is so difficult to

00:06:20,220 --> 00:06:27,270
solve that it motivated 200 years of

00:06:24,690 --> 00:06:28,979
mathematicians to develop many different

00:06:27,270 --> 00:06:32,190
and innovative techniques to solve it

00:06:28,979 --> 00:06:34,849
and we made huge progress in mathematics

00:06:32,190 --> 00:06:38,490
thanks to the structure of this equation

00:06:34,849 --> 00:06:41,070
and the last one is the Lambert problem

00:06:38,490 --> 00:06:43,140
which is a little bit different but is

00:06:41,070 --> 00:06:45,210
based on the same thing I have one

00:06:43,140 --> 00:06:47,400
position I want to reach another

00:06:45,210 --> 00:06:49,740
position in a given time so I want to

00:06:47,400 --> 00:06:52,890
know what is exactly the trajectory they

00:06:49,740 --> 00:06:54,750
have to develop in the earliest like

00:06:52,890 --> 00:06:56,400
when we are designing a trajectory

00:06:54,750 --> 00:07:00,570
around the source system because I have

00:06:56,400 --> 00:07:02,760
some mission as I will say after this we

00:07:00,570 --> 00:07:05,370
can assume that all the planets are like

00:07:02,760 --> 00:07:10,380
points and only consider the gravity of

00:07:05,370 --> 00:07:11,880
the Sun so to solve this kind of all

00:07:10,380 --> 00:07:13,500
these kind of problems I created

00:07:11,880 --> 00:07:16,710
polyester which is an astrodynamics

00:07:13,500 --> 00:07:19,230
library written in Python it is release

00:07:16,710 --> 00:07:21,720
and in a permissive license and have

00:07:19,230 --> 00:07:23,790
physical units handling it solves all

00:07:21,720 --> 00:07:26,490
the problems that I said before it

00:07:23,790 --> 00:07:32,180
included some basic 2d plotting as we

00:07:26,490 --> 00:07:34,620
will say after this and it would be

00:07:32,180 --> 00:07:36,180
impossible without the work of many many

00:07:34,620 --> 00:07:38,160
people I'm going to talk about a couple

00:07:36,180 --> 00:07:39,480
of the dependencies the first one in

00:07:38,160 --> 00:07:43,110
case you don't know it is a strop I

00:07:39,480 --> 00:07:45,570
which is a like a basic I astronomy

00:07:43,110 --> 00:07:47,790
library written in Python it's a joint

00:07:45,570 --> 00:07:50,280
effort of many many developers around

00:07:47,790 --> 00:07:53,400
roll and it's meant to have like the

00:07:50,280 --> 00:07:54,960
very building blocks of any astronomy

00:07:53,400 --> 00:07:57,450
project that you might for instance it

00:07:54,960 --> 00:08:01,530
has physical units which is like static

00:07:57,450 --> 00:08:03,900
typing for engineers because if you mix

00:08:01,530 --> 00:08:06,440
meters with miles or something like that

00:08:03,900 --> 00:08:10,440
then very bad things start to happen

00:08:06,440 --> 00:08:12,840
it has also handling of dates and times

00:08:10,440 --> 00:08:16,500
if you think that handling some time

00:08:12,840 --> 00:08:19,950
zones is a pain then you'd better don't

00:08:16,500 --> 00:08:24,330
enter the astronomical times it's a real

00:08:19,950 --> 00:08:26,040
mess and it also changes the compression

00:08:24,330 --> 00:08:28,860
between reference systems so I can

00:08:26,040 --> 00:08:33,120
express one position with respect to the

00:08:28,860 --> 00:08:35,640
Sun with respect to the problem etc the

00:08:33,120 --> 00:08:38,400
second one is JPL FM which is a library

00:08:35,640 --> 00:08:41,460
by run brandon rods which is one of my

00:08:38,400 --> 00:08:42,870
favorite Python developers and the thing

00:08:41,460 --> 00:08:46,110
is that the NASA and the Jet Propulsion

00:08:42,870 --> 00:08:48,600
Laboratory they provide some planetary

00:08:46,110 --> 00:08:51,750
positions and velocity in very broad

00:08:48,600 --> 00:08:54,240
range that goes to go between hundreds

00:08:51,750 --> 00:08:57,120
or thousands of years and

00:08:54,240 --> 00:08:59,370
in binary format which is called spk and

00:08:57,120 --> 00:09:01,950
with this library I can take that data

00:08:59,370 --> 00:09:07,500
and know exactly where a planet is going

00:09:01,950 --> 00:09:09,209
to be in the year 3000 okay so what

00:09:07,500 --> 00:09:11,160
happens with the very basic algorithms

00:09:09,209 --> 00:09:12,360
because this involves like integrates

00:09:11,160 --> 00:09:14,490
the integrating in differential

00:09:12,360 --> 00:09:16,830
equations and stuff like that and when I

00:09:14,490 --> 00:09:19,860
started working on this I said okay

00:09:16,830 --> 00:09:22,190
let's see what have other people done on

00:09:19,860 --> 00:09:25,800
this before me and I found a lot of

00:09:22,190 --> 00:09:28,500
Fortran MATLAB give algorithms that were

00:09:25,800 --> 00:09:31,860
there were okay because they worked and

00:09:28,500 --> 00:09:34,170
they had a very good performance but the

00:09:31,860 --> 00:09:37,200
code was a bit poorly written there were

00:09:34,170 --> 00:09:38,580
no tests whatsoever they were very

00:09:37,200 --> 00:09:42,360
difficult to distribute because they

00:09:38,580 --> 00:09:45,540
were works on my computer state released

00:09:42,360 --> 00:09:47,339
to the internet a sip file and wrapping

00:09:45,540 --> 00:09:49,709
that those algorithms in really

00:09:47,339 --> 00:09:51,930
important in C++ or whatever from Python

00:09:49,709 --> 00:09:54,779
is possible that it might be a challenge

00:09:51,930 --> 00:09:59,399
so I ended up with a theme that only was

00:09:54,779 --> 00:10:01,380
known to work on my computer and then

00:09:59,399 --> 00:10:03,209
some years after that I discovered

00:10:01,380 --> 00:10:05,970
number which is separated by a continue

00:10:03,209 --> 00:10:08,520
mentality there is also free and it's

00:10:05,970 --> 00:10:12,200
meant to accelerate the code the

00:10:08,520 --> 00:10:14,310
numerical Python code that uses a lot

00:10:12,200 --> 00:10:20,040
number crunching numerical computation

00:10:14,310 --> 00:10:22,230
on PI arrays and it supports a subset of

00:10:20,040 --> 00:10:26,360
the language and compiled to LLVM which

00:10:22,230 --> 00:10:29,459
is the compiler true said that is

00:10:26,360 --> 00:10:33,149
getting very famous now and also it

00:10:29,459 --> 00:10:36,360
supports GPUs so I try to rewrite all

00:10:33,149 --> 00:10:39,209
the algorithms that were included in

00:10:36,360 --> 00:10:41,459
thousands of Lights or Fortran only in

00:10:39,209 --> 00:10:44,370
Python and C well let's see how it goes

00:10:41,459 --> 00:10:45,839
and these are the results of a paper

00:10:44,370 --> 00:10:48,149
that I presented to the European Space

00:10:45,839 --> 00:10:51,360
Agency some months ago and if you can

00:10:48,149 --> 00:10:53,910
see here the top line was the previous

00:10:51,360 --> 00:10:56,100
version compiled with the Intel Fortran

00:10:53,910 --> 00:10:57,089
compiler which in theory is one of the

00:10:56,100 --> 00:11:00,690
best ones

00:10:57,089 --> 00:11:03,390
there is the like the reference for all

00:11:00,690 --> 00:11:05,250
the performance measures and with

00:11:03,390 --> 00:11:06,470
default Ronnie was a bit slower like I

00:11:05,250 --> 00:11:08,690
lost 30

00:11:06,470 --> 00:11:10,880
percent of the performance and then you

00:11:08,690 --> 00:11:14,660
can see well the bottom line is the

00:11:10,880 --> 00:11:16,250
Python code which is like two orders of

00:11:14,660 --> 00:11:19,190
magnitude is lower than fortune which is

00:11:16,250 --> 00:11:23,000
the expected result and then you have

00:11:19,190 --> 00:11:26,000
here this Python plus number result that

00:11:23,000 --> 00:11:28,700
is visibly is lower than Fortran but is

00:11:26,000 --> 00:11:31,010
still more or less within the same order

00:11:28,700 --> 00:11:33,830
of magnitude so I said well I'm going to

00:11:31,010 --> 00:11:38,390
throw through the trash being thousands

00:11:33,830 --> 00:11:41,920
of lines of Fortran a lot of pain and in

00:11:38,390 --> 00:11:44,600
return I'm going to lose a 70% of

00:11:41,920 --> 00:11:46,550
performance that in any case I can

00:11:44,600 --> 00:11:49,280
optimize later or wait for the

00:11:46,550 --> 00:11:52,090
technology develop so this is more or

00:11:49,280 --> 00:11:55,520
less what I did with these Fortran code

00:11:52,090 --> 00:11:57,620
yeah I was very happy to throw all this

00:11:55,520 --> 00:12:00,440
away because now the people that know

00:11:57,620 --> 00:12:02,180
Python which are much much more than the

00:12:00,440 --> 00:12:04,010
people that know Fortran can easily

00:12:02,180 --> 00:12:06,260
contribute to my library I can

00:12:04,010 --> 00:12:09,590
understand the code ten months later

00:12:06,260 --> 00:12:11,630
after writing it and the distribution is

00:12:09,590 --> 00:12:13,520
much easier because I don't need to

00:12:11,630 --> 00:12:16,190
force everybody in Windows to have a

00:12:13,520 --> 00:12:20,420
Fortran compiler and in inky's who knows

00:12:16,190 --> 00:12:22,790
what's that anyway so to give a

00:12:20,420 --> 00:12:24,800
practical example of this as this table

00:12:22,790 --> 00:12:26,720
would presented in the hot topics call

00:12:24,800 --> 00:12:31,490
for papers I wanted to bring something

00:12:26,720 --> 00:12:34,670
really really hot which is the the

00:12:31,490 --> 00:12:36,470
arrival of the you know mission to

00:12:34,670 --> 00:12:44,060
Jupiter the other day if I can press

00:12:36,470 --> 00:12:49,100
this link thank you the Juno spacecraft

00:12:44,060 --> 00:12:52,100
was a mission that NASA launched in 2011

00:12:49,100 --> 00:12:55,070
ok as you can see here and he arrived to

00:12:52,100 --> 00:12:57,610
Jupiter 2 weeks ago so it's been a quite

00:12:55,070 --> 00:13:00,050
a long trip and the trajectory was

00:12:57,610 --> 00:13:02,660
pretty involved as you can see there you

00:13:00,050 --> 00:13:05,530
have the or the orbit of the earth in

00:13:02,660 --> 00:13:07,610
August 2011 and the first thing is

00:13:05,530 --> 00:13:10,670
launching this Juno spray graph in a

00:13:07,610 --> 00:13:15,440
very wide orbit that even crosses the

00:13:10,670 --> 00:13:17,900
orbit of Mars and you waste no fuel you

00:13:15,440 --> 00:13:19,300
know these are here and what is going to

00:13:17,900 --> 00:13:21,940
do next is going to

00:13:19,300 --> 00:13:26,440
for maneuver over here in the point that

00:13:21,940 --> 00:13:28,149
is most far away from the Sun to correct

00:13:26,440 --> 00:13:30,130
the trajectory and try to encounter the

00:13:28,149 --> 00:13:34,209
earth in a different point

00:13:30,130 --> 00:13:37,839
so exactly at that point without losing

00:13:34,209 --> 00:13:40,810
any fuel its using the gravity of the

00:13:37,839 --> 00:13:43,380
earth to change the trajectory and go to

00:13:40,810 --> 00:13:47,829
the orbit of Jupiter

00:13:43,380 --> 00:13:50,410
well the vehicle blah blah blah and when

00:13:47,829 --> 00:13:52,360
we were right to the end I remember I

00:13:50,410 --> 00:13:54,100
remind you that it was launched in 2011

00:13:52,360 --> 00:13:57,459
and in July 2016

00:13:54,100 --> 00:14:01,269
this arrived to Jupiter and this is like

00:13:57,459 --> 00:14:03,760
cosmic billiards because there was the

00:14:01,269 --> 00:14:06,070
planning of this trajectory involves a

00:14:03,760 --> 00:14:07,930
lot of main hours and you have to take

00:14:06,070 --> 00:14:12,870
into account the positions of all the

00:14:07,930 --> 00:14:16,630
planets and for me it's so beautiful and

00:14:12,870 --> 00:14:20,500
so what we can do now is reproduce

00:14:16,630 --> 00:14:22,870
exactly this orbit with polyester so if

00:14:20,500 --> 00:14:26,740
I go this to this wonderful ipython

00:14:22,870 --> 00:14:28,360
notebook let's do this a bit quickly ok

00:14:26,740 --> 00:14:30,970
so here I'm importing a lot of modules

00:14:28,360 --> 00:14:33,940
from polyester which include like the

00:14:30,970 --> 00:14:36,850
vision of the planets of the solar

00:14:33,940 --> 00:14:38,620
system the Sun some objects to provide

00:14:36,850 --> 00:14:40,480
an API and here for instance what I'm

00:14:38,620 --> 00:14:42,490
doing is downloading these files from

00:14:40,480 --> 00:14:44,020
NASA that I told you before to compute

00:14:42,490 --> 00:14:46,390
all the positions of the planets I

00:14:44,020 --> 00:14:48,339
already have them in my computer and

00:14:46,390 --> 00:14:50,829
here are some data that I got from the

00:14:48,339 --> 00:14:52,810
internet like the date of launch the

00:14:50,829 --> 00:14:55,000
velocity of the initial maneuver the

00:14:52,810 --> 00:14:58,300
date of the flyby of the earth and the

00:14:55,000 --> 00:15:00,850
date of arrival so the first thing that

00:14:58,300 --> 00:15:02,829
I'm going to do is to recover the

00:15:00,850 --> 00:15:05,709
position and the velocity of the earth

00:15:02,829 --> 00:15:08,320
in the date of the launch and I can have

00:15:05,709 --> 00:15:11,949
here a couple of vectors and as you can

00:15:08,320 --> 00:15:14,589
see this is handling physical units

00:15:11,949 --> 00:15:16,329
using Astro PI so if I use this

00:15:14,589 --> 00:15:17,949
high-level functions that I'm providing

00:15:16,329 --> 00:15:20,649
with polyester there is no risk of

00:15:17,949 --> 00:15:22,360
mixing physical units if I provide a

00:15:20,649 --> 00:15:24,910
vector in kilometers and another one in

00:15:22,360 --> 00:15:27,370
meters then everything is going to be in

00:15:24,910 --> 00:15:30,279
order and if I provide some incorrect

00:15:27,370 --> 00:15:32,660
you need that is going to warn me so I

00:15:30,279 --> 00:15:34,699
create some state which is going to

00:15:32,660 --> 00:15:36,800
hold some variables that we need later

00:15:34,699 --> 00:15:38,180
and I do the same thing computing the

00:15:36,800 --> 00:15:39,829
position and the velocity of the earth

00:15:38,180 --> 00:15:43,040
the day of the flight

00:15:39,829 --> 00:15:46,339
ok so then I'm going to use this

00:15:43,040 --> 00:15:48,290
maneuver objects to say ok now I'm on

00:15:46,339 --> 00:15:51,410
the earth the day of the launch and I'm

00:15:48,290 --> 00:15:53,569
going to do the first impulse to get

00:15:51,410 --> 00:15:56,389
into the first orbit so if I apply the

00:15:53,569 --> 00:15:58,579
maneuver and I see the period of the

00:15:56,389 --> 00:16:01,310
orbit this means that the time that it

00:15:58,579 --> 00:16:05,029
tastes to one complete orbit to complete

00:16:01,310 --> 00:16:07,189
then we see that is above two years so

00:16:05,029 --> 00:16:09,620
the period of the orbit of the earth is

00:16:07,189 --> 00:16:12,620
obviously obviously one year so now I'm

00:16:09,620 --> 00:16:14,839
spending two if I plot this thing then I

00:16:12,620 --> 00:16:18,980
have the position the orbit of the earth

00:16:14,839 --> 00:16:21,939
and the first orbit of the spacecraft if

00:16:18,980 --> 00:16:25,040
I go on doing this propagating and

00:16:21,939 --> 00:16:28,100
computing some more velocities and data

00:16:25,040 --> 00:16:30,230
draining then I have not only the

00:16:28,100 --> 00:16:33,470
position of the earth and the first

00:16:30,230 --> 00:16:35,569
orbit but also the point were I'm

00:16:33,470 --> 00:16:39,889
correcting the orbit to encounter the

00:16:35,569 --> 00:16:41,899
earth one year later if I go on using

00:16:39,889 --> 00:16:44,180
the these functions that you can check

00:16:41,899 --> 00:16:48,529
I'm going to upload all the materials

00:16:44,180 --> 00:16:54,610
and plot this as you can see the API is

00:16:48,529 --> 00:16:57,860
pretty simple then I have this complete

00:16:54,610 --> 00:16:59,480
this complete plot of all the segments

00:16:57,860 --> 00:17:02,180
of the orbit you can see here the orbit

00:16:59,480 --> 00:17:03,829
of the earth the first segment then the

00:17:02,180 --> 00:17:06,199
correction this is the point of the

00:17:03,829 --> 00:17:10,130
flyby and then this is the last arc

00:17:06,199 --> 00:17:11,809
until I go to Jupiter I wanted to stop

00:17:10,130 --> 00:17:14,720
here because there are some limitations

00:17:11,809 --> 00:17:16,760
in the API of polyester because for

00:17:14,720 --> 00:17:20,480
instance I'm plotting all the segments

00:17:16,760 --> 00:17:22,730
that I don't there I don't travel

00:17:20,480 --> 00:17:24,289
through constants like this one so there

00:17:22,730 --> 00:17:27,770
is a little bit of noise in this plot

00:17:24,289 --> 00:17:30,500
and also the three-dimensional API is

00:17:27,770 --> 00:17:33,860
not existent yet so I welcome any pull

00:17:30,500 --> 00:17:36,190
requests so going back to my

00:17:33,860 --> 00:17:36,190
presentation

00:17:41,249 --> 00:17:46,120
well the conclusion of this is that

00:17:43,480 --> 00:17:49,480
python or only works as a language but

00:17:46,120 --> 00:17:51,999
it can be fast enough using some tricks

00:17:49,480 --> 00:17:54,580
for some purposes and we can optimize it

00:17:51,999 --> 00:17:56,769
later and improve the readability and

00:17:54,580 --> 00:17:58,299
everything the ecosystem of libraries

00:17:56,769 --> 00:18:00,460
that we have for solving these kind of

00:17:58,299 --> 00:18:03,639
problems is amazing and people is

00:18:00,460 --> 00:18:07,059
pouring a lot of work into this and it

00:18:03,639 --> 00:18:08,559
powers a lot of different projects there

00:18:07,059 --> 00:18:10,600
are several things missing in polyesters

00:18:08,559 --> 00:18:12,460
I told you before and the good thing is

00:18:10,600 --> 00:18:15,159
that open development developing

00:18:12,460 --> 00:18:17,499
everything on github pouring good

00:18:15,159 --> 00:18:21,850
documentation writing tutorials is key

00:18:17,499 --> 00:18:23,710
for encouraging collaboration and making

00:18:21,850 --> 00:18:27,340
this as easy to believe to develop as

00:18:23,710 --> 00:18:30,789
possible before finishing my talk I

00:18:27,340 --> 00:18:35,559
wanted to explain the title because the

00:18:30,789 --> 00:18:38,289
it's a Latin catchphrase that use us

00:18:35,559 --> 00:18:41,619
motto of the Royal Air Force which was

00:18:38,289 --> 00:18:45,159
per ardua ad astra through struggle to

00:18:41,619 --> 00:18:47,320
space this open-source thing it's many

00:18:45,159 --> 00:18:49,749
times a struggle maybe you have felt it

00:18:47,320 --> 00:18:52,240
in the past especially pushing it to

00:18:49,749 --> 00:18:55,240
businesses and companies so I want to

00:18:52,240 --> 00:18:58,539
totally dr. Python ad astra to reflect

00:18:55,240 --> 00:19:00,190
that fact aim also I wanted to put again

00:18:58,539 --> 00:19:02,110
the picture of the International Space

00:19:00,190 --> 00:19:05,139
Station which is a collaboration between

00:19:02,110 --> 00:19:07,269
the United States Russia China Europe

00:19:05,139 --> 00:19:09,369
and many other countries which for me

00:19:07,269 --> 00:19:11,080
means that even through political

00:19:09,369 --> 00:19:12,970
differences and historical differences

00:19:11,080 --> 00:19:15,460
we can collaborate to build great things

00:19:12,970 --> 00:19:19,919
so thank you very much keep dreaming

00:19:15,460 --> 00:19:19,919
don't lose your curiosity and thank you

00:19:26,620 --> 00:19:35,450
thank you for a very very nice talk

00:19:29,990 --> 00:19:37,910
do you have any question yes this was

00:19:35,450 --> 00:19:40,190
awesome thank you and I want to say

00:19:37,910 --> 00:19:42,620
thank you question I read once that when

00:19:40,190 --> 00:19:44,450
they they we went to the moon they were

00:19:42,620 --> 00:19:47,240
using it that if you looked into the

00:19:44,450 --> 00:19:49,880
source code they were using six decimal

00:19:47,240 --> 00:19:51,770
places for pie request funny because

00:19:49,880 --> 00:19:53,630
usually we try to use like a lot and no

00:19:51,770 --> 00:19:56,090
you don't need that many and you can put

00:19:53,630 --> 00:19:58,040
people there so could we use this thing

00:19:56,090 --> 00:20:00,350
to send people to the moon

00:19:58,040 --> 00:20:02,630
no and I'm going to explain why well the

00:20:00,350 --> 00:20:04,430
first is that contrary to popular belief

00:20:02,630 --> 00:20:07,550
you don't need that many decimal places

00:20:04,430 --> 00:20:08,840
for pie and if you use like 10 then you

00:20:07,550 --> 00:20:11,480
can approximate the circle of the

00:20:08,840 --> 00:20:12,770
universe to the size of the human hair

00:20:11,480 --> 00:20:14,900
or something like that it's ridiculous

00:20:12,770 --> 00:20:17,150
the thing is that with polyester I'm

00:20:14,900 --> 00:20:19,760
taking it around only this problem that

00:20:17,150 --> 00:20:23,840
is like only assuming that my body is

00:20:19,760 --> 00:20:25,730
very small and also with the lumber

00:20:23,840 --> 00:20:28,340
problem that is calculated directly from

00:20:25,730 --> 00:20:30,260
point a from point A to point B and you

00:20:28,340 --> 00:20:32,450
see I'm only taking into account one

00:20:30,260 --> 00:20:34,130
body as a gravitational attraction and

00:20:32,450 --> 00:20:36,590
when you are going from the earth to the

00:20:34,130 --> 00:20:38,990
moon you cannot do that because the moon

00:20:36,590 --> 00:20:43,070
is very big it's very close to the earth

00:20:38,990 --> 00:20:45,980
and in all the trajectory you have to

00:20:43,070 --> 00:20:48,170
think into account both bodies so for

00:20:45,980 --> 00:20:55,250
now we cannot use it to go to the moon

00:20:48,170 --> 00:20:58,390
but we can go to Mars the moon is very

00:20:55,250 --> 00:20:58,390
boring there's nothing there

00:20:58,849 --> 00:21:04,909
but well do we have other questions yes

00:21:05,450 --> 00:21:10,679
you recreated Gino's destroy this very

00:21:09,479 --> 00:21:12,749
which is great

00:21:10,679 --> 00:21:20,419
sorry can you can you repeat again you

00:21:12,749 --> 00:21:20,419
recreated you know you don't write about

00:21:20,869 --> 00:21:26,369
you know trajectory yes

00:21:23,129 --> 00:21:34,109
I don't think I have a picture here yes

00:21:26,369 --> 00:21:39,649
here how must I'm astounded to detect to

00:21:34,109 --> 00:21:42,479
recreate it sorry I didn't understand

00:21:39,649 --> 00:21:45,690
how much time how long did it take to

00:21:42,479 --> 00:21:50,639
recreate it to recreate it yes to do the

00:21:45,690 --> 00:21:53,429
I did in real time right right now like

00:21:50,639 --> 00:21:55,950
I just did it I didn't have any anything

00:21:53,429 --> 00:21:57,899
well I calculated the notebook and I

00:21:55,950 --> 00:22:00,809
were before but I we studied it so I'm

00:21:57,899 --> 00:22:02,639
computing everything on the flight like

00:22:00,809 --> 00:22:05,690
all the algorithms like going from point

00:22:02,639 --> 00:22:08,820
A to point B they are extremely fast now

00:22:05,690 --> 00:22:10,679
and the complete I had read like in real

00:22:08,820 --> 00:22:15,059
life is taking like five years or

00:22:10,679 --> 00:22:25,139
something or six years other questions

00:22:15,059 --> 00:22:27,809
yes hi my question is if from point A to

00:22:25,139 --> 00:22:31,710
point B is super fast what would be a

00:22:27,809 --> 00:22:35,460
challenge on computing or whatever for

00:22:31,710 --> 00:22:36,690
this library yeah thing is that well I

00:22:35,460 --> 00:22:39,119
didn't say it I think

00:22:36,690 --> 00:22:40,919
but for many practical problems you have

00:22:39,119 --> 00:22:42,659
to compute these solutions thousands of

00:22:40,919 --> 00:22:44,940
times for instance when you want to

00:22:42,659 --> 00:22:47,669
optimize and orbit and say okay I'm

00:22:44,940 --> 00:22:49,349
going to try this billiards thing for

00:22:47,669 --> 00:22:51,809
instance there was a contest

00:22:49,349 --> 00:22:55,019
some months ago and there were solutions

00:22:51,809 --> 00:22:57,029
like no go one fly way on the earth then

00:22:55,019 --> 00:23:00,119
Venus then Mars and then Jupiter or

00:22:57,029 --> 00:23:02,039
there are many combinations as well you

00:23:00,119 --> 00:23:03,659
can imagine that there are many many

00:23:02,039 --> 00:23:05,369
combinations and you can you have to

00:23:03,659 --> 00:23:07,739
compute these solutions thousands of

00:23:05,369 --> 00:23:08,870
times so even if this is very fast to do

00:23:07,739 --> 00:23:11,059
it once

00:23:08,870 --> 00:23:12,950
then if you start adding up and

00:23:11,059 --> 00:23:17,080
computing this a lot of times then it's

00:23:12,950 --> 00:23:17,080
critical to have a good performance

00:23:17,320 --> 00:23:25,730
other questions I have a question myself

00:23:21,559 --> 00:23:29,720
because I didn't exactly know what you

00:23:25,730 --> 00:23:32,870
were presenting but I tested polyester

00:23:29,720 --> 00:23:35,120
because I'm doing calculation without

00:23:32,870 --> 00:23:36,770
without dynamics but with satellites low

00:23:35,120 --> 00:23:40,220
earth satellites okay

00:23:36,770 --> 00:23:43,510
are you going to add the j2 term someday

00:23:40,220 --> 00:23:45,530
no no and I tell you why because this is

00:23:43,510 --> 00:23:48,290
this is going to be optimized for

00:23:45,530 --> 00:23:49,940
interplanetary trajectories so for low

00:23:48,290 --> 00:23:51,770
Earth orbits you have to take many

00:23:49,940 --> 00:23:53,540
things into account like the thing that

00:23:51,770 --> 00:23:56,840
the earth is not a sphere is like

00:23:53,540 --> 00:23:58,490
something like appear very strange and

00:23:56,840 --> 00:24:01,250
also the pressure of the Sun because the

00:23:58,490 --> 00:24:03,320
Sun pushes you when you are in orbit and

00:24:01,250 --> 00:24:06,620
you can actually feel the light like

00:24:03,320 --> 00:24:08,030
displacing you so I don't think I'm

00:24:06,620 --> 00:24:12,230
going to add those but we have a

00:24:08,030 --> 00:24:14,720
parallel period with which hopefully we

00:24:12,230 --> 00:24:19,160
will try to be more suitable for

00:24:14,720 --> 00:24:21,170
near-earth objects so do you know any

00:24:19,160 --> 00:24:23,510
Python library that can be used for low

00:24:21,170 --> 00:24:27,679
Earth orbit well you have for example

00:24:23,510 --> 00:24:30,940
the library from Brandon Routh yes yes

00:24:27,679 --> 00:24:34,340
at least you can compute the SGP for

00:24:30,940 --> 00:24:37,190
propagation model which taking into

00:24:34,340 --> 00:24:39,530
account the orbital drag and stuff like

00:24:37,190 --> 00:24:42,170
that so it's pretty accurate for most

00:24:39,530 --> 00:24:44,330
things like for calculating when some

00:24:42,170 --> 00:24:52,040
piece of space debris is going to hit us

00:24:44,330 --> 00:24:55,480
in our head other questions okay if this

00:24:52,040 --> 00:24:55,480

YouTube URL: https://www.youtube.com/watch?v=VCpTgU1pb5k


