Title: Juan Manuel Santos - Salting things up in the DevOps' World: things just got real
Publication date: 2016-07-29
Playlist: EuroPython 2016
Description: 
	Juan Manuel Santos - Salting things up in the DevOps' World: things just got real
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(https://ep2016.europython.eu//conference/talks/salting-things-up-in-the-devops-world-things-just-got-real)

SaltStack is a thriving configuration management system written in
Python that leverages YAML and Jinja2 which, by now, probably needs no
introduction. This talk will explore Salt beyond the minimum required
setup, targeting developers/sysadmins already using Salt, and those
considering making the switch from other systems but wishing to dive
deeper first. Attendees should be familiar with configuration
management systems and practices, and comfortable using and reading
YAML and Jinja syntax.

-----

There is much more to Salt than the basics. This talk will go beyond
the minimum required setup and will take a look at Salt under the
hood, which will appeal not only to system administrators, but will
also be more interesting to developers and to the DevOps community in
general as the talk progresses. Topics include:

* Introduction and basics review (master/minions, matching, grains, pillar)
* Salt Mine
* Syndic node
* State modules vs. runner modules
* The Reactor
* The Event System
* Salt Beacons
* Salt API

Attendees should be familiar with configuration management systems and
practices, and also feel comfortable using and reading YAML and Jinja
syntax. This talk is targeted to developers or sysadmins already using
Salt, and to those who are considering switching to it from other
systems but wish to dive deeper before making that decision. After the
talk, attendees will have a better grasp of the more advanced
possibilities that Salt brings, and be ready to apply them to their
use cases.
Captions: 
	00:00:00,589 --> 00:00:06,210
welcome to sorting things up in the

00:00:02,850 --> 00:00:18,680
DevOps world i'm here with juan manuel

00:00:06,210 --> 00:00:22,920
super salty guy give him some right

00:00:18,680 --> 00:00:25,199
thank you all for coming for those of

00:00:22,920 --> 00:00:27,750
you who've been here last year I gave a

00:00:25,199 --> 00:00:30,689
similar to talk this is going to be a

00:00:27,750 --> 00:00:37,590
little more in depth so let's get

00:00:30,689 --> 00:00:39,420
started see okay skip the boring stuff

00:00:37,590 --> 00:00:42,149
out of the way my name is Juan Manuel

00:00:39,420 --> 00:00:46,050
Santos I work as a team leader in a

00:00:42,149 --> 00:00:49,379
sport engineer at Red Hat I'm also one

00:00:46,050 --> 00:00:51,210
of the organizers of CSR me which is the

00:00:49,379 --> 00:00:54,140
Argentinian system administrators

00:00:51,210 --> 00:00:57,570
community a nerdy Allah which is a local

00:00:54,140 --> 00:00:59,690
co-working / tech conference events that

00:00:57,570 --> 00:01:03,539
we do every year in 10 Sarah's since

00:00:59,690 --> 00:01:07,710
2014 I've been using salt a couple of

00:01:03,539 --> 00:01:10,530
years now mainly with no regrets or with

00:01:07,710 --> 00:01:15,030
all regrets whichever you want to choose

00:01:10,530 --> 00:01:17,310
and let me get a disclaimer first so

00:01:15,030 --> 00:01:20,880
let's get this out of the way too I am

00:01:17,310 --> 00:01:22,770
only a humble user assault I have

00:01:20,880 --> 00:01:25,409
tinkered a bit with the code I have

00:01:22,770 --> 00:01:29,880
submitted an ugly patch but not much

00:01:25,409 --> 00:01:32,490
more and yeah I only have three days to

00:01:29,880 --> 00:01:35,460
prepare this so who doesn't like

00:01:32,490 --> 00:01:37,530
pressure right my thanks out to the

00:01:35,460 --> 00:01:42,990
European team for managing to squeeze

00:01:37,530 --> 00:01:44,970
these talkin so why salt as you may or

00:01:42,990 --> 00:01:47,520
may not know a salty sir configuration

00:01:44,970 --> 00:01:50,579
management system in case you don't know

00:01:47,520 --> 00:01:53,579
where that is think puppet chef uncivil

00:01:50,579 --> 00:01:56,759
but only better and why do I say better

00:01:53,579 --> 00:01:58,799
because it's written in Python and in

00:01:56,759 --> 00:02:00,990
the virtuous yamel on ginger now I know

00:01:58,799 --> 00:02:03,509
some people in the room might not like

00:02:00,990 --> 00:02:07,049
llamo but you know you can also use

00:02:03,509 --> 00:02:08,390
Jason if you want it is relatively easy

00:02:07,049 --> 00:02:10,819
to understand and

00:02:08,390 --> 00:02:12,620
I said relatively because it has some

00:02:10,819 --> 00:02:15,110
complex things but what it lacks in

00:02:12,620 --> 00:02:17,360
simplicity of reading and understanding

00:02:15,110 --> 00:02:20,450
it makes it up in being extremely

00:02:17,360 --> 00:02:23,450
powerful and giving you a huge amount of

00:02:20,450 --> 00:02:24,650
control or what you can do with it some

00:02:23,450 --> 00:02:28,030
of these will be seen in the next few

00:02:24,650 --> 00:02:31,640
minutes and one more detail that

00:02:28,030 --> 00:02:33,800
frequently gets lost in translation Saul

00:02:31,640 --> 00:02:35,450
can work without an agent in the case

00:02:33,800 --> 00:02:37,010
you don't have root access or you're not

00:02:35,450 --> 00:02:41,500
allowed to run the agent on your

00:02:37,010 --> 00:02:45,940
machines via SSH much like ansible does

00:02:41,500 --> 00:02:49,459
so previously neutral Python as I said

00:02:45,940 --> 00:02:52,130
last year I give a talk this was mainly

00:02:49,459 --> 00:02:54,200
an introduction speaking of the basic

00:02:52,130 --> 00:02:58,310
mechanics in terms and concepts behind

00:02:54,200 --> 00:03:00,380
salts as a quick recap soul has a master

00:02:58,310 --> 00:03:01,940
meaning architecture where the master is

00:03:00,380 --> 00:03:06,190
the one that gives out the orders and

00:03:01,940 --> 00:03:09,830
the minions are order to do minion stuff

00:03:06,190 --> 00:03:12,350
it does so by defining States and high

00:03:09,830 --> 00:03:14,329
states the states are representing the

00:03:12,350 --> 00:03:15,980
state a system should be in and the

00:03:14,329 --> 00:03:17,720
whole collection of states that should

00:03:15,980 --> 00:03:21,769
be applied to a system is called a high

00:03:17,720 --> 00:03:23,750
state another core concept is that of

00:03:21,769 --> 00:03:26,030
matching which means targeting your

00:03:23,750 --> 00:03:30,320
minions and to determine which states

00:03:26,030 --> 00:03:33,110
apply to which means and finally there's

00:03:30,320 --> 00:03:35,360
the concepts of grains and pillar grains

00:03:33,110 --> 00:03:37,549
being information sent from the minions

00:03:35,360 --> 00:03:39,680
to the master and pillar being

00:03:37,549 --> 00:03:43,430
informations and to the master from the

00:03:39,680 --> 00:03:46,640
master to the minions sadly and I have

00:03:43,430 --> 00:03:50,450
to say this still no python3 support

00:03:46,640 --> 00:03:53,840
salty still Python too it's getting

00:03:50,450 --> 00:03:56,750
there though there's a big issue

00:03:53,840 --> 00:03:58,160
hopefully we'll get there as usual it's

00:03:56,750 --> 00:04:00,380
not because of salt is because of the

00:03:58,160 --> 00:04:04,520
salts dependencies

00:04:00,380 --> 00:04:06,710
but anyway moving on to more concepts

00:04:04,520 --> 00:04:09,140
that didn't make it to last year

00:04:06,710 --> 00:04:12,020
presentation are those of the mind and

00:04:09,140 --> 00:04:14,360
attending now the mine essentially gets

00:04:12,020 --> 00:04:20,750
data from the minions it's sent to the

00:04:14,360 --> 00:04:22,490
master on a regular interval now even

00:04:20,750 --> 00:04:24,710
though this is done on a regular

00:04:22,490 --> 00:04:26,510
interval this is not usually useful for

00:04:24,710 --> 00:04:29,380
metrics because only the most recent

00:04:26,510 --> 00:04:32,090
data that you collect is maintained

00:04:29,380 --> 00:04:34,040
another thing that might confuse you is

00:04:32,090 --> 00:04:36,710
that all the data is made available to

00:04:34,040 --> 00:04:39,320
all the minions so when you query it you

00:04:36,710 --> 00:04:41,330
might get answer whether the answer of

00:04:39,320 --> 00:04:44,620
same data from all the minions at the

00:04:41,330 --> 00:04:48,500
same time which can be quite confusing

00:04:44,620 --> 00:04:52,190
in fact you might be wondering if isn't

00:04:48,500 --> 00:04:53,720
this like rains isn't what grains are

00:04:52,190 --> 00:04:56,380
supposed to do you know get that up from

00:04:53,720 --> 00:04:59,480
the minions and into the master kind of

00:04:56,380 --> 00:05:02,000
thing is the mind that is updating more

00:04:59,480 --> 00:05:04,100
often the brains are mailing static

00:05:02,000 --> 00:05:07,490
they're only updated if you purposefully

00:05:04,100 --> 00:05:11,800
purposefully update them which it's not

00:05:07,490 --> 00:05:15,470
something that you will usually do also

00:05:11,800 --> 00:05:17,950
if minions need data from other slower

00:05:15,470 --> 00:05:25,780
minions the mine acts as a kind of cash

00:05:17,950 --> 00:05:28,490
so there's that too and okay

00:05:25,780 --> 00:05:30,680
there are two ways of defining which

00:05:28,490 --> 00:05:32,360
mind functions you want to collect from

00:05:30,680 --> 00:05:34,550
the minions in the case of normal

00:05:32,360 --> 00:05:37,219
operation of salts you would do so

00:05:34,550 --> 00:05:39,590
either on the pillar or on the minions

00:05:37,219 --> 00:05:42,710
configuration file in this special case

00:05:39,590 --> 00:05:46,069
of not using the agent as I mentioned

00:05:42,710 --> 00:05:47,449
before you have three ways since you

00:05:46,069 --> 00:05:49,580
don't have the minions configuration

00:05:47,449 --> 00:05:51,830
file you can either use the roster the

00:05:49,580 --> 00:05:56,750
pillar and the master configuration file

00:05:51,830 --> 00:05:58,759
and so a quick example of what the soul

00:05:56,750 --> 00:06:00,949
mine would be so that you don't get much

00:05:58,759 --> 00:06:04,340
to confuse but promise you get confused

00:06:00,949 --> 00:06:06,830
looks like this so let's say we want to

00:06:04,340 --> 00:06:09,229
first target all the minions in our web

00:06:06,830 --> 00:06:11,479
service group we are going to be

00:06:09,229 --> 00:06:16,300
applying among my function to gather the

00:06:11,479 --> 00:06:22,069
IP addresses of the first network out

00:06:16,300 --> 00:06:24,620
every five minutes so this we can later

00:06:22,069 --> 00:06:28,520
use for example and in an HR oxy

00:06:24,620 --> 00:06:30,979
configuration to populate the server

00:06:28,520 --> 00:06:34,370
list now I know that you might be

00:06:30,979 --> 00:06:36,620
getting baffle bar or ginger here try

00:06:34,370 --> 00:06:39,560
not to think of it the important thing

00:06:36,620 --> 00:06:41,060
to understand here is that should we add

00:06:39,560 --> 00:06:43,190
a new host to the web server group

00:06:41,060 --> 00:06:45,440
within five minutes we can have it its

00:06:43,190 --> 00:06:47,089
IP address up in the H a proxy

00:06:45,440 --> 00:06:49,430
configuration file this is all thanks to

00:06:47,089 --> 00:06:54,139
the mine which we can configure it as

00:06:49,430 --> 00:06:57,409
interval of updating now before we

00:06:54,139 --> 00:06:59,240
continue since we already mentioned that

00:06:57,409 --> 00:07:01,430
soul has a master meaning architecture

00:06:59,240 --> 00:07:04,669
there's an inherent topology to it so

00:07:01,430 --> 00:07:08,000
let's talk a bit about that the most

00:07:04,669 --> 00:07:10,819
common one would be one too many meaning

00:07:08,000 --> 00:07:15,740
one master many minions but of course

00:07:10,819 --> 00:07:18,860
this is boring this my not scale this

00:07:15,740 --> 00:07:20,750
also kills cat during lunar elites so

00:07:18,860 --> 00:07:22,909
what what are the alternatives how much

00:07:20,750 --> 00:07:26,300
can we throw a wrong with this could we

00:07:22,909 --> 00:07:29,120
have say more masters we have a multi

00:07:26,300 --> 00:07:31,069
master topology and I don't know if

00:07:29,120 --> 00:07:33,139
there's any information security guys in

00:07:31,069 --> 00:07:35,009
the room but if you are you're going to

00:07:33,139 --> 00:07:37,619
love this question

00:07:35,009 --> 00:07:39,659
who we implement segregation meaning

00:07:37,619 --> 00:07:41,430
could we segregate part of the

00:07:39,659 --> 00:07:43,589
infrastructure split it so they don't

00:07:41,430 --> 00:07:45,659
communicate with each other but you know

00:07:43,589 --> 00:07:53,339
they're still functioning salt

00:07:45,659 --> 00:07:55,050
infrastructure and coincidentally now

00:07:53,339 --> 00:07:57,149
I'm wearing the right head a parole

00:07:55,050 --> 00:07:59,639
let's answer that with those questions

00:07:57,149 --> 00:08:03,839
with another question so what if we try

00:07:59,639 --> 00:08:05,999
more power so to solve this this

00:08:03,839 --> 00:08:07,620
something called the Syndic note the

00:08:05,999 --> 00:08:11,520
Syndic no is an intermediate node type

00:08:07,620 --> 00:08:14,159
which acts as a pass through the aim of

00:08:11,520 --> 00:08:18,059
it is to control a given set of lower

00:08:14,159 --> 00:08:19,740
level minions which means that in the

00:08:18,059 --> 00:08:21,689
case of the Syndic node we're going to

00:08:19,740 --> 00:08:24,149
be having two demons Syndic and the

00:08:21,689 --> 00:08:27,749
master optionally you can run a minion

00:08:24,149 --> 00:08:31,319
too so the way it works is something

00:08:27,749 --> 00:08:32,610
like this the main master which now

00:08:31,319 --> 00:08:35,370
we're going to call the master of

00:08:32,610 --> 00:08:39,029
masters you want to see why even though

00:08:35,370 --> 00:08:42,380
it's already a funny name since an order

00:08:39,029 --> 00:08:45,269
to the minions and to the Syndic note

00:08:42,380 --> 00:08:47,160
the Syndic no relays those orders to the

00:08:45,269 --> 00:08:50,670
local master that is running in the same

00:08:47,160 --> 00:08:52,199
machine and then that master get your

00:08:50,670 --> 00:08:57,089
gets the orders and release them to the

00:08:52,199 --> 00:08:58,560
lower minions so now our Syndic node is

00:08:57,089 --> 00:09:02,459
actually called the master of minions

00:08:58,560 --> 00:09:04,440
and well this of course works the other

00:09:02,459 --> 00:09:07,079
way around when some of the lower level

00:09:04,440 --> 00:09:09,569
minions reply to any orders they go

00:09:07,079 --> 00:09:11,519
first to the lower level master then to

00:09:09,569 --> 00:09:13,880
the shindig and then up to the main

00:09:11,519 --> 00:09:13,880
master

00:09:14,050 --> 00:09:20,170
so if we have the master which now is

00:09:16,990 --> 00:09:22,390
our master of masters it can have as

00:09:20,170 --> 00:09:26,050
many minions as we will like connected

00:09:22,390 --> 00:09:28,480
to it then we can have a Syndic note for

00:09:26,050 --> 00:09:31,029
example Syndic master master of minions

00:09:28,480 --> 00:09:32,890
node which can also have any given

00:09:31,029 --> 00:09:35,560
number of minions connected to it but

00:09:32,890 --> 00:09:39,160
the good thing about this is that we can

00:09:35,560 --> 00:09:41,470
even nest levels of Syndic one over the

00:09:39,160 --> 00:09:44,079
other and have as many minions as we

00:09:41,470 --> 00:09:45,880
like so the topology here it's kind of

00:09:44,079 --> 00:09:47,529
to you so the only places where you're

00:09:45,880 --> 00:09:51,940
going to have to ensure connectivity is

00:09:47,529 --> 00:09:54,339
where the lines are so how do we

00:09:51,940 --> 00:09:56,620
actually do this the configuration is

00:09:54,339 --> 00:09:58,660
quite simple on the Syndic note we're

00:09:56,620 --> 00:10:02,260
going to be setting the Syndic master

00:09:58,660 --> 00:10:05,470
directive ditch this should point to our

00:10:02,260 --> 00:10:08,290
main master we also have to define an ID

00:10:05,470 --> 00:10:11,860
here because Syndic node takes the ID

00:10:08,290 --> 00:10:14,140
from here then on the master node of

00:10:11,860 --> 00:10:16,600
course we have to tell that we're now

00:10:14,140 --> 00:10:20,440
ordering autom masters we are now in

00:10:16,600 --> 00:10:23,320
control Syndic nodes in the case of the

00:10:20,440 --> 00:10:24,520
minions they should have the lower level

00:10:23,320 --> 00:10:26,890
minions they should have the IP address

00:10:24,520 --> 00:10:30,070
of a Syndic node in their configuration

00:10:26,890 --> 00:10:32,290
file just a few more steps we run this

00:10:30,070 --> 00:10:33,940
ending node of course and on the main

00:10:32,290 --> 00:10:35,709
master we're going to have to accept the

00:10:33,940 --> 00:10:40,570
key because essentially there's a new

00:10:35,709 --> 00:10:43,270
key that gets generated so now you might

00:10:40,570 --> 00:10:45,810
be getting the idea behind this talk is

00:10:43,270 --> 00:10:48,820
to make you think of the possibilities

00:10:45,810 --> 00:10:51,010
you could have different syndics /

00:10:48,820 --> 00:10:54,250
environment development QA production

00:10:51,010 --> 00:10:56,380
and you can also have different syndics

00:10:54,250 --> 00:10:58,720
to comply with some security standards

00:10:56,380 --> 00:11:01,930
that you might have that you might want

00:10:58,720 --> 00:11:04,420
to come up with and just to mention it

00:11:01,930 --> 00:11:07,089
we can even do multi master with this we

00:11:04,420 --> 00:11:09,550
can have syndics and many masters main

00:11:07,089 --> 00:11:12,350
masters I will not cover it here but

00:11:09,550 --> 00:11:15,260
just know that this is possible

00:11:12,350 --> 00:11:17,480
so that's it for mine in the Syndic node

00:11:15,260 --> 00:11:19,850
now we're on to more heavy metal soft

00:11:17,480 --> 00:11:22,790
our first stop here is going to be the

00:11:19,850 --> 00:11:25,910
event system so what do you think an

00:11:22,790 --> 00:11:28,820
advanced system does of course it keeps

00:11:25,910 --> 00:11:31,730
track of events but not that's not the

00:11:28,820 --> 00:11:36,050
only thing it does the important thing

00:11:31,730 --> 00:11:38,900
is that event can be acted upon and this

00:11:36,050 --> 00:11:40,580
system is also the base of the rest of

00:11:38,900 --> 00:11:43,700
the systems are we going to see in this

00:11:40,580 --> 00:11:47,060
dog in essence this is mainly a serum

00:11:43,700 --> 00:11:49,250
q-pop interface the important things to

00:11:47,060 --> 00:11:51,290
understand here is that every event has

00:11:49,250 --> 00:11:54,410
a tag which allows for quick filtering

00:11:51,290 --> 00:11:56,960
on identifying an event and also has an

00:11:54,410 --> 00:11:59,120
amount of arbitrary data inside of it

00:11:56,960 --> 00:12:02,840
which tells us information about the

00:11:59,120 --> 00:12:05,030
event so with just a simple command

00:12:02,840 --> 00:12:07,670
running the master we can already start

00:12:05,030 --> 00:12:09,650
watching for events you know start

00:12:07,670 --> 00:12:11,540
watching what's going on we can also use

00:12:09,650 --> 00:12:14,720
this other equipment to send a random

00:12:11,540 --> 00:12:17,540
event that we are you know just making

00:12:14,720 --> 00:12:20,450
it up you can see that this would be the

00:12:17,540 --> 00:12:23,300
tag those would be the data out the

00:12:20,450 --> 00:12:25,760
event that the data is mainly JSON

00:12:23,300 --> 00:12:27,290
string in botany would be a dictionary

00:12:25,760 --> 00:12:28,850
because in fact you can also stand

00:12:27,290 --> 00:12:31,070
events from a phone call from pure

00:12:28,850 --> 00:12:33,710
python code and if we did two things

00:12:31,070 --> 00:12:36,560
right after standing the event this

00:12:33,710 --> 00:12:40,100
should show up if we were watching

00:12:36,560 --> 00:12:42,830
attentively to the event bus we can see

00:12:40,100 --> 00:12:45,070
that there is your tag and there's a

00:12:42,830 --> 00:12:45,070
data

00:12:45,779 --> 00:12:51,940
now another interesting bit that didn't

00:12:50,709 --> 00:12:54,130
I didn't get to make the distinction

00:12:51,940 --> 00:12:56,740
last year there are two kinds of modules

00:12:54,130 --> 00:12:58,540
state modules actually the first one has

00:12:56,740 --> 00:13:00,459
the execution modules and the other one

00:12:58,540 --> 00:13:04,930
is running modules so the execution

00:13:00,459 --> 00:13:07,360
modules it's the main kind of state that

00:13:04,930 --> 00:13:08,529
you see in salt it means something that

00:13:07,360 --> 00:13:11,079
is going to be run on the minions

00:13:08,529 --> 00:13:15,699
whereas the runner modules are going to

00:13:11,079 --> 00:13:17,260
be run on the master and these runner

00:13:15,699 --> 00:13:20,800
modules can be the synchronous or

00:13:17,260 --> 00:13:22,899
asynchronous they are added via the

00:13:20,800 --> 00:13:26,649
runner directories configuration in the

00:13:22,899 --> 00:13:29,880
master file and that's the best part

00:13:26,649 --> 00:13:33,279
what do we put inside that directory

00:13:29,880 --> 00:13:36,209
pure python code so runner modules are

00:13:33,279 --> 00:13:38,980
essentially is essentially Python code

00:13:36,209 --> 00:13:42,070
an addendum to this since we just talked

00:13:38,980 --> 00:13:45,579
about events any print statements that

00:13:42,070 --> 00:13:50,380
we put inside our runner modules will be

00:13:45,579 --> 00:13:53,079
converted to events so if we do this

00:13:50,380 --> 00:13:55,750
instead a runner module we will get

00:13:53,079 --> 00:14:00,360
something like this see that okay the

00:13:55,750 --> 00:14:00,360
tag is not quite nice but there's a data

00:14:01,000 --> 00:14:05,830
so even though you can write runner

00:14:03,490 --> 00:14:08,890
modules and you're certainly welcome to

00:14:05,830 --> 00:14:11,020
do so it is tempting but there's

00:14:08,890 --> 00:14:13,510
actually no need I mean there's already

00:14:11,020 --> 00:14:17,320
a full list of runner modules available

00:14:13,510 --> 00:14:22,810
in salt in the documentation so feel

00:14:17,320 --> 00:14:25,770
free to check those out now wouldn't it

00:14:22,810 --> 00:14:27,700
be nice to live in a place like that

00:14:25,770 --> 00:14:31,060
suddenly we're not talking about those

00:14:27,700 --> 00:14:33,550
kind of big guns but kind of salt

00:14:31,060 --> 00:14:36,010
beacons are like those concrete towers

00:14:33,550 --> 00:14:39,460
with the light bulb on top there are

00:14:36,010 --> 00:14:41,800
also a kind of single or something like

00:14:39,460 --> 00:14:43,390
that I mean they use the event system to

00:14:41,800 --> 00:14:47,530
monitor things that are happening

00:14:43,390 --> 00:14:49,750
outside of salt and when something

00:14:47,530 --> 00:14:54,390
happens to those things and notification

00:14:49,750 --> 00:14:56,830
is sent which is actually an event so

00:14:54,390 --> 00:14:58,360
those are configured via the minions

00:14:56,830 --> 00:14:59,830
configuration file because we're

00:14:58,360 --> 00:15:03,970
actually interested in the minions at

00:14:59,830 --> 00:15:07,450
this point and any system administrators

00:15:03,970 --> 00:15:10,030
in the room anyone okay does anything if

00:15:07,450 --> 00:15:15,750
this ring a bell something that it's you

00:15:10,030 --> 00:15:20,020
know notifications I notify maybe okay

00:15:15,750 --> 00:15:23,800
yeah I mean I notify which is a file

00:15:20,020 --> 00:15:26,890
system monitoring API to track changes

00:15:23,800 --> 00:15:31,210
on files and directories kinda looks

00:15:26,890 --> 00:15:34,810
like this so in fact there is an eye

00:15:31,210 --> 00:15:37,000
notify beacon which you use to money to

00:15:34,810 --> 00:15:39,089
monitor changes to the certain kind of

00:15:37,000 --> 00:15:42,180
file to a certain file

00:15:39,089 --> 00:15:44,699
in a given time interval and there you

00:15:42,180 --> 00:15:50,160
have it any time the result that can't

00:15:44,699 --> 00:15:52,139
file changes we now get an event there's

00:15:50,160 --> 00:15:55,379
also other types of beacons for example

00:15:52,139 --> 00:15:58,439
a process we can be monitoring whether

00:15:55,379 --> 00:16:01,709
or not a certain process with a process

00:15:58,439 --> 00:16:04,439
name of we specify is running or not if

00:16:01,709 --> 00:16:05,879
it's not running and it starts to run we

00:16:04,439 --> 00:16:08,579
get an event if it's running and it

00:16:05,879 --> 00:16:11,779
stops we get an event so kind of nice

00:16:08,579 --> 00:16:15,269
right there are actually several deacons

00:16:11,779 --> 00:16:17,970
types memory disk a system load network

00:16:15,269 --> 00:16:20,160
settings the works there really a lot

00:16:17,970 --> 00:16:21,899
and they're growing I'm just going to

00:16:20,160 --> 00:16:23,279
leave you you can also write your own of

00:16:21,899 --> 00:16:24,839
course just going to leave you the

00:16:23,279 --> 00:16:29,430
documentation here so you can check it

00:16:24,839 --> 00:16:31,259
out later now this is where things are

00:16:29,430 --> 00:16:36,209
going to get a little bit more

00:16:31,259 --> 00:16:37,680
interesting yeah like that it would be

00:16:36,209 --> 00:16:41,300
nice if actually the reactor was like

00:16:37,680 --> 00:16:44,220
this believe me it's actually close so

00:16:41,300 --> 00:16:47,220
what is this salt reactor as its name

00:16:44,220 --> 00:16:49,230
implies the main job of the soap reactor

00:16:47,220 --> 00:16:53,160
is to react but not reacting a

00:16:49,230 --> 00:16:57,149
JavaScript way simply to react in a salt

00:16:53,160 --> 00:16:59,279
way or salty way in other words the

00:16:57,149 --> 00:17:01,379
reactor is the component there is

00:16:59,279 --> 00:17:04,649
responsible for triggering actions in

00:17:01,379 --> 00:17:08,309
response to events so now you see why we

00:17:04,649 --> 00:17:11,010
saw the event pass earlier of course we

00:17:08,309 --> 00:17:13,350
need the event system first but what is

00:17:11,010 --> 00:17:16,069
an action since we're insult an action

00:17:13,350 --> 00:17:19,049
is essentially a state that we define

00:17:16,069 --> 00:17:21,230
and what is actually going to happen in

00:17:19,049 --> 00:17:24,059
reality is some go something like this

00:17:21,230 --> 00:17:27,089
something is going to happen if we think

00:17:24,059 --> 00:17:28,409
right there's going to be an event maybe

00:17:27,089 --> 00:17:30,210
because this something was being

00:17:28,409 --> 00:17:32,970
monitored by a beacon or something else

00:17:30,210 --> 00:17:34,890
and the event is going to be picked up

00:17:32,970 --> 00:17:36,690
by the reactor and the reactor is going

00:17:34,890 --> 00:17:40,730
to translate that event into an action

00:17:36,690 --> 00:17:40,730
or actually a state

00:17:41,500 --> 00:17:45,350
reactors are defined in the Masters

00:17:43,640 --> 00:17:51,170
configuration file it's a component of

00:17:45,350 --> 00:17:52,160
the salt master engine as we said the

00:17:51,170 --> 00:17:56,090
reactor will be making these

00:17:52,160 --> 00:17:58,580
associations the association's if you

00:17:56,090 --> 00:18:00,710
remember what an event was you remember

00:17:58,580 --> 00:18:04,340
that he had a tag so the association is

00:18:00,710 --> 00:18:06,590
made be at the tag so we put a tag in

00:18:04,340 --> 00:18:09,440
the configuration file and we define

00:18:06,590 --> 00:18:12,800
which states are going to cover that

00:18:09,440 --> 00:18:14,810
action sync textsecure is quite clear do

00:18:12,800 --> 00:18:17,600
you know that there's an asterisk there

00:18:14,810 --> 00:18:19,430
we can use wildcards because some events

00:18:17,600 --> 00:18:21,710
are fire bar more yet more than just one

00:18:19,430 --> 00:18:24,230
minion and have dominion ID in the tag

00:18:21,710 --> 00:18:27,620
so for example this first one here is

00:18:24,230 --> 00:18:29,090
the event of a minion starting up to if

00:18:27,620 --> 00:18:31,670
you want to match all the minions

00:18:29,090 --> 00:18:37,910
starting up we just put the wild card in

00:18:31,670 --> 00:18:40,450
the right place okay so this whole slide

00:18:37,910 --> 00:18:43,900
is actually the main reason I'm here

00:18:40,450 --> 00:18:47,450
it's the one thing I spent the most time

00:18:43,900 --> 00:18:50,960
while working with salt so I ask you to

00:18:47,450 --> 00:18:53,750
please spare with me there are a few

00:18:50,960 --> 00:18:56,630
cave at the state system that we just

00:18:53,750 --> 00:18:59,420
saw here no those are states living

00:18:56,630 --> 00:19:03,020
inside the reactor the state system is

00:18:59,420 --> 00:19:05,030
actually rather limited and you can

00:19:03,020 --> 00:19:06,560
easily skip this while you're reading

00:19:05,030 --> 00:19:10,850
the documentation and try not your

00:19:06,560 --> 00:19:13,160
reactor sites trying to run things that

00:19:10,850 --> 00:19:15,260
would normally work in the rest of salts

00:19:13,160 --> 00:19:18,200
in the rest of the states that you have

00:19:15,260 --> 00:19:20,680
might not work here you will find the

00:19:18,200 --> 00:19:23,060
things are missing and for starters

00:19:20,680 --> 00:19:24,770
forget about grains in pillar brain stem

00:19:23,060 --> 00:19:26,870
pillar are not available in the reactor

00:19:24,770 --> 00:19:31,490
if you choose to use those you get an

00:19:26,870 --> 00:19:33,260
unexpected results also reactor states

00:19:31,490 --> 00:19:35,720
are actually processed sequentially

00:19:33,260 --> 00:19:38,360
their first rendered and the data is

00:19:35,720 --> 00:19:40,010
then sent to a worker pool

00:19:38,360 --> 00:19:41,540
but since their first process

00:19:40,010 --> 00:19:44,420
sequentially you're going to want to

00:19:41,540 --> 00:19:48,590
make your states as simple and small and

00:19:44,420 --> 00:19:52,160
as fast as possible so after long hours

00:19:48,590 --> 00:19:55,600
of fighting over the reactor and during

00:19:52,160 --> 00:19:58,670
the little hair a hard left in my head

00:19:55,600 --> 00:20:02,270
this is the short version do not handle

00:19:58,670 --> 00:20:04,130
logic in your reactor States this might

00:20:02,270 --> 00:20:06,440
be a bit too confusing because what's

00:20:04,130 --> 00:20:09,380
the point then but I'm going to explain

00:20:06,440 --> 00:20:11,390
it in a bit more detail you should use

00:20:09,380 --> 00:20:15,080
your your reactor States for matching

00:20:11,390 --> 00:20:20,660
and then decide which minions to which

00:20:15,080 --> 00:20:22,730
states based on an event and then just

00:20:20,660 --> 00:20:26,540
call your normal salt states that you

00:20:22,730 --> 00:20:29,540
have lying around do not try to add some

00:20:26,540 --> 00:20:32,690
logic here you're gonna spend a very

00:20:29,540 --> 00:20:38,030
long time and you won't be happy about

00:20:32,690 --> 00:20:40,430
it so i I don't I don't know if this is

00:20:38,030 --> 00:20:42,140
actually true what it looks like from

00:20:40,430 --> 00:20:43,700
the outside it appears there's a

00:20:42,140 --> 00:20:45,590
disconnect because the we're talking

00:20:43,700 --> 00:20:48,500
about two different engines even if it's

00:20:45,590 --> 00:20:51,170
under the same demon I like to think

00:20:48,500 --> 00:20:54,770
it's because of Python namespaces but I

00:20:51,170 --> 00:20:59,330
could be wrong but so too long didn't

00:20:54,770 --> 00:21:00,460
read do not handle logic there so as we

00:20:59,330 --> 00:21:02,410
said now

00:21:00,460 --> 00:21:04,750
with the reactor we are associated

00:21:02,410 --> 00:21:07,930
events to states so if we have our

00:21:04,750 --> 00:21:11,830
custom event and we have our custom

00:21:07,930 --> 00:21:14,080
reactor state file the idea is to keep

00:21:11,830 --> 00:21:16,660
it as simple as this and if you really

00:21:14,080 --> 00:21:19,840
have to do complex things and ensure

00:21:16,660 --> 00:21:21,940
that many many things are done when a

00:21:19,840 --> 00:21:23,710
given event is fired just put those

00:21:21,940 --> 00:21:26,530
inside the long-running and complex

00:21:23,710 --> 00:21:28,480
state so once we the ones a reactor

00:21:26,530 --> 00:21:30,730
parses this and sends it to the worker

00:21:28,480 --> 00:21:37,360
pool this will be running on the main

00:21:30,730 --> 00:21:40,540
salt namespace so to speak okay so what

00:21:37,360 --> 00:21:43,270
can we use a reactor for one good

00:21:40,540 --> 00:21:44,940
example is out of accepting all the case

00:21:43,270 --> 00:21:47,500
of all the minions in our environment

00:21:44,940 --> 00:21:49,210
you know this it's quite a hassle every

00:21:47,500 --> 00:21:51,370
time you start a minion you have to go

00:21:49,210 --> 00:21:54,220
to the master except the key and so on

00:21:51,370 --> 00:21:57,400
and so forth so as you might have

00:21:54,220 --> 00:21:59,280
guessed whenever a minion try two tries

00:21:57,400 --> 00:22:02,710
to authenticate an event is fired and

00:21:59,280 --> 00:22:05,350
whenever a minion finish starting up

00:22:02,710 --> 00:22:07,600
there's another event so for the

00:22:05,350 --> 00:22:10,030
purposes of this example we are going to

00:22:07,600 --> 00:22:13,180
assume that all minions whose names

00:22:10,030 --> 00:22:20,470
start with nice are going to have their

00:22:13,180 --> 00:22:21,940
keys all accepted so first of all in the

00:22:20,470 --> 00:22:25,420
state that's going to be dealing with

00:22:21,940 --> 00:22:27,430
authentication will first want to remove

00:22:25,420 --> 00:22:31,480
the keys coming from the minions that

00:22:27,430 --> 00:22:33,880
have failed to authenticate the next

00:22:31,480 --> 00:22:35,710
step is going to be to trigger a mini

00:22:33,880 --> 00:22:36,970
restart and now I know this is subway

00:22:35,710 --> 00:22:40,570
this is just for the purposes of

00:22:36,970 --> 00:22:42,310
examples every time I read SSH in the

00:22:40,570 --> 00:22:44,470
middle of another language another

00:22:42,310 --> 00:22:46,630
configuration management system by kind

00:22:44,470 --> 00:22:48,460
of creeped out a bit but this is just an

00:22:46,630 --> 00:22:51,160
example what we do want to do is have

00:22:48,460 --> 00:22:52,970
dominion Rios indicate generate a new

00:22:51,160 --> 00:22:58,030
key so to speak

00:22:52,970 --> 00:23:00,710
so reaching the end of our big state if

00:22:58,030 --> 00:23:02,530
we are in pending status of

00:23:00,710 --> 00:23:06,260
authentication pending status and the

00:23:02,530 --> 00:23:09,049
name starts with nice we accept the key

00:23:06,260 --> 00:23:10,850
and as for the last eight when the

00:23:09,049 --> 00:23:13,549
minion finish is starting up this is

00:23:10,850 --> 00:23:15,980
actually good practice that you can

00:23:13,549 --> 00:23:19,610
implement whenever a minion finish is

00:23:15,980 --> 00:23:22,340
starting up we apply a high state to

00:23:19,610 --> 00:23:23,630
that minion this is something nice to

00:23:22,340 --> 00:23:26,659
ensure that all your minions are

00:23:23,630 --> 00:23:29,299
consistent at least when starting up now

00:23:26,659 --> 00:23:31,700
note here that we heart we've been hard

00:23:29,299 --> 00:23:33,890
coding the nice and maybe some other

00:23:31,700 --> 00:23:35,299
things running is because as we said

00:23:33,890 --> 00:23:37,400
before we don't have the grains we don't

00:23:35,299 --> 00:23:38,960
have the pillar you don't have a safe

00:23:37,400 --> 00:23:41,480
way to store information make it

00:23:38,960 --> 00:23:44,590
available to the reactor so keep that in

00:23:41,480 --> 00:23:48,380
mind whenever you use the reactor and

00:23:44,590 --> 00:23:53,110
our last component today is going to be

00:23:48,380 --> 00:23:55,669
the API of course salt has a REST API

00:23:53,110 --> 00:23:58,940
the main idea behind it is to send

00:23:55,669 --> 00:24:00,770
commands to a running master and the API

00:23:58,940 --> 00:24:04,100
supports both encryption and

00:24:00,770 --> 00:24:05,659
authentication the authentication which

00:24:04,100 --> 00:24:09,020
is something that you might not see very

00:24:05,659 --> 00:24:11,630
usually in salt well salt has an

00:24:09,020 --> 00:24:14,330
external authentication system it allows

00:24:11,630 --> 00:24:19,250
for authenticated against ldap against

00:24:14,330 --> 00:24:22,130
Pam it also has access control in it so

00:24:19,250 --> 00:24:24,289
you know it's really outside the scope

00:24:22,130 --> 00:24:26,270
of this talk it's a very big thing to

00:24:24,289 --> 00:24:29,990
talk it out but it is worth mentioning

00:24:26,270 --> 00:24:32,600
that it actually exists and the entire

00:24:29,990 --> 00:24:34,280
things that are managed by the API are

00:24:32,600 --> 00:24:38,630
controlled by another demon this salt

00:24:34,280 --> 00:24:41,450
API genome so if it's a REST API we can

00:24:38,630 --> 00:24:44,270
of course use anything that can make

00:24:41,450 --> 00:24:46,549
HTTP requests and get information from

00:24:44,270 --> 00:24:49,580
it or send information to it in this a

00:24:46,549 --> 00:24:51,309
very short example we are making a

00:24:49,580 --> 00:24:54,580
request to a certain

00:24:51,309 --> 00:24:57,429
Yuri for minions and food pass the

00:24:54,580 --> 00:24:59,919
correct meaning ID we're going to start

00:24:57,429 --> 00:25:03,039
getting data about that minion in this

00:24:59,919 --> 00:25:06,809
case we're for the sake of simplicity

00:25:03,039 --> 00:25:09,700
we're not using an authentication here

00:25:06,809 --> 00:25:12,100
now there are several API endpoints

00:25:09,700 --> 00:25:15,789
available already bundled with the salt

00:25:12,100 --> 00:25:20,080
API they're pretty much self-explanatory

00:25:15,789 --> 00:25:23,080
but let me draw your attention to one in

00:25:20,080 --> 00:25:26,049
particular the / hook this is a special

00:25:23,080 --> 00:25:29,230
endpoint it's a generic web hook and

00:25:26,049 --> 00:25:31,960
tripod and the whole reason for existing

00:25:29,230 --> 00:25:34,869
is that any post requests that are done

00:25:31,960 --> 00:25:37,840
here will be generated events on the

00:25:34,869 --> 00:25:40,269
master sign on the event bus and the

00:25:37,840 --> 00:25:43,619
post data that we sent to it is going to

00:25:40,269 --> 00:25:46,509
become the data of our generated event

00:25:43,619 --> 00:25:48,399
another important thing because this is

00:25:46,509 --> 00:25:50,950
a special one point it's the only one

00:25:48,399 --> 00:25:53,559
that salt allows you to explicitly

00:25:50,950 --> 00:25:56,320
disable authentication in this

00:25:53,559 --> 00:25:58,539
particular part another thing is if

00:25:56,320 --> 00:26:00,429
you're disabled identification it does

00:25:58,539 --> 00:26:02,980
not mean that you can do whatever you

00:26:00,429 --> 00:26:06,249
like you are expected to implement some

00:26:02,980 --> 00:26:09,460
kind of security why would you be

00:26:06,249 --> 00:26:13,869
disabled authentication well I like to

00:26:09,460 --> 00:26:16,090
think of apps that can barely perform an

00:26:13,869 --> 00:26:20,710
HTTP requests that can barely understand

00:26:16,090 --> 00:26:22,960
a URL so they can only do a request with

00:26:20,710 --> 00:26:27,570
a special hard coded token that you

00:26:22,960 --> 00:26:27,570
specify so that's why we have that there

00:26:28,049 --> 00:26:36,850
now how about from all the rush that we

00:26:33,730 --> 00:26:39,630
just been in it how will about we put

00:26:36,850 --> 00:26:42,400
them all together be nice and friends

00:26:39,630 --> 00:26:45,580
now I know you might be butter here

00:26:42,400 --> 00:26:48,340
you've seen a lot of information and now

00:26:45,580 --> 00:26:51,130
you think that you might be a little bit

00:26:48,340 --> 00:26:52,960
confused but I assure you we can do

00:26:51,130 --> 00:26:56,890
pretty interesting stuff with although

00:26:52,960 --> 00:27:01,450
we saw the event the beacons the reactor

00:26:56,890 --> 00:27:04,150
and the API now more graphical

00:27:01,450 --> 00:27:06,669
understanding of what how all this

00:27:04,150 --> 00:27:10,660
connects together we first have the

00:27:06,669 --> 00:27:12,309
beacons and the API the main interesting

00:27:10,660 --> 00:27:15,640
point about these two is that they're

00:27:12,309 --> 00:27:17,140
related to elements outside Salt you

00:27:15,640 --> 00:27:20,980
know the beacons monitor things outside

00:27:17,140 --> 00:27:22,809
salts and the API it's I API so anybody

00:27:20,980 --> 00:27:25,540
can make a request to it so they're both

00:27:22,809 --> 00:27:28,210
related to lemons from the outside now

00:27:25,540 --> 00:27:30,929
both these two will be generating events

00:27:28,210 --> 00:27:34,030
in our event system in our event bus

00:27:30,929 --> 00:27:36,790
those events can be later picked up by

00:27:34,030 --> 00:27:39,910
the reactor given what we define inside

00:27:36,790 --> 00:27:44,130
the reactor which then can be translated

00:27:39,910 --> 00:27:46,560
into salt states now

00:27:44,130 --> 00:27:50,090
with the greatest possibility of having

00:27:46,560 --> 00:27:53,340
to manage your entire devil / app /

00:27:50,090 --> 00:27:55,560
workflow infrastructure comes a great

00:27:53,340 --> 00:27:58,350
power and there is a deliberate

00:27:55,560 --> 00:28:00,960
reordering of the phrase here because if

00:27:58,350 --> 00:28:03,120
you configure soul properly you're going

00:28:00,960 --> 00:28:04,580
to have full control of everything in

00:28:03,120 --> 00:28:09,150
your infrastructure in your workflow

00:28:04,580 --> 00:28:12,270
everything and from with insults so as

00:28:09,150 --> 00:28:14,310
such you are expected to know what

00:28:12,270 --> 00:28:17,610
you're doing and you should always rely

00:28:14,310 --> 00:28:20,940
on a sensible way of doing things for

00:28:17,610 --> 00:28:23,670
example beware at the security risks you

00:28:20,940 --> 00:28:25,260
might be tempted to you know keep way

00:28:23,670 --> 00:28:28,530
too much power to solve and that's a

00:28:25,260 --> 00:28:34,350
good thing but beware of somebody trying

00:28:28,530 --> 00:28:36,930
to do an ugly thing with it so to finish

00:28:34,350 --> 00:28:39,620
this off let's take a minute talk about

00:28:36,930 --> 00:28:41,850
what all you can do with all of this

00:28:39,620 --> 00:28:45,900
I'll just be naming you a couple of

00:28:41,850 --> 00:28:48,180
examples from the top of my head leave

00:28:45,900 --> 00:28:51,090
you to think the rest that's because

00:28:48,180 --> 00:28:54,440
that was salt is salt is kind of like a

00:28:51,090 --> 00:28:57,450
batteries included approach to give you

00:28:54,440 --> 00:28:59,820
the the space to create your own

00:28:57,450 --> 00:29:02,220
solutions much like pythoness which is

00:28:59,820 --> 00:29:04,250
why I love salt so just to name an

00:29:02,220 --> 00:29:06,510
example let's talk about self-healing

00:29:04,250 --> 00:29:11,410
anybody knows what self-healing is what

00:29:06,510 --> 00:29:15,670
it consists of anybody heard the term

00:29:11,410 --> 00:29:17,380
ok so in more humane words safe

00:29:15,670 --> 00:29:20,830
self-healing is the ability that we give

00:29:17,380 --> 00:29:22,660
our applications or systems the ability

00:29:20,830 --> 00:29:23,830
to repair themselves whenever something

00:29:22,660 --> 00:29:28,060
bad has happened whenever their

00:29:23,830 --> 00:29:30,160
encounter an adverse situation on their

00:29:28,060 --> 00:29:32,740
own that's the thing that's why it's

00:29:30,160 --> 00:29:36,220
called self heal now all this might just

00:29:32,740 --> 00:29:38,740
be a REST API call away because if in

00:29:36,220 --> 00:29:40,450
your application you can identify that

00:29:38,740 --> 00:29:42,220
the bad thing that happened can be

00:29:40,450 --> 00:29:45,370
corrected by something that can be

00:29:42,220 --> 00:29:49,440
automated you can do it with API call

00:29:45,370 --> 00:29:52,150
because salt can have control of that or

00:29:49,440 --> 00:29:53,470
another example and I think many of you

00:29:52,150 --> 00:29:55,990
have encountered this let's say half

00:29:53,470 --> 00:29:58,630
your team refuses to use Jenkins or the

00:29:55,990 --> 00:30:01,540
CI tool that you're using if you're not

00:29:58,630 --> 00:30:04,960
because you can leave them be wherever

00:30:01,540 --> 00:30:07,360
they are using and integrate the rest of

00:30:04,960 --> 00:30:09,970
the push build test deploy endless CI

00:30:07,360 --> 00:30:14,200
cycle with salt you can manage it with

00:30:09,970 --> 00:30:15,940
salt to another example if you were

00:30:14,200 --> 00:30:20,020
talking about scaling both up or down or

00:30:15,940 --> 00:30:22,960
sideways growing shrinking you can

00:30:20,020 --> 00:30:24,700
prepare for it with salt and you can

00:30:22,960 --> 00:30:26,920
also trust in Seoul to do some

00:30:24,700 --> 00:30:29,770
provisioning we haven't covered it here

00:30:26,920 --> 00:30:33,730
but so total has a salt cloud demon to

00:30:29,770 --> 00:30:36,910
provision cloud instances and last but

00:30:33,730 --> 00:30:38,500
not least with a good beacon setup you

00:30:36,910 --> 00:30:40,210
can make sure that your environments are

00:30:38,500 --> 00:30:42,420
consistent you know if you have things

00:30:40,210 --> 00:30:44,980
that aren't supposed to change and you

00:30:42,420 --> 00:30:47,890
suspect that somebody tends to do nasty

00:30:44,980 --> 00:30:49,480
things with the beacons you can react

00:30:47,890 --> 00:30:55,660
immediately upon any changes that you

00:30:49,480 --> 00:30:57,460
deem unwanted and so these are mainly

00:30:55,660 --> 00:30:59,710
all the examples that I could think of

00:30:57,460 --> 00:31:03,280
with the short time that I was given as

00:30:59,710 --> 00:31:07,060
I said before I really do hope that you

00:31:03,280 --> 00:31:09,160
can leverage what you saw here to come

00:31:07,060 --> 00:31:11,860
up with your own solutions because I'm

00:31:09,160 --> 00:31:17,110
sure that your problems might be worse

00:31:11,860 --> 00:31:20,770
than what I'm simply presented him so

00:31:17,110 --> 00:31:23,860
ask for the docs and as for last year

00:31:20,770 --> 00:31:26,890
all the documentation is in the official

00:31:23,860 --> 00:31:29,530
saltstack documentation I really

00:31:26,890 --> 00:31:31,420
encourage you to take it to take a read

00:31:29,530 --> 00:31:33,040
if you have any particular questions

00:31:31,420 --> 00:31:35,500
there's also the possibility of

00:31:33,040 --> 00:31:39,450
bothering the guys at the salt-free no

00:31:35,500 --> 00:31:43,030
channel and IRC I do that a lot and

00:31:39,450 --> 00:31:46,030
we're reaching in so now we have time

00:31:43,030 --> 00:31:48,150
for some questions so feel free to shoot

00:31:46,030 --> 00:31:48,150
away

00:31:55,650 --> 00:32:02,350
can you come compare salt with ansible

00:32:00,330 --> 00:32:05,820
I'm going to be honest with you I

00:32:02,350 --> 00:32:09,970
haven't used tangible I know that it's

00:32:05,820 --> 00:32:11,890
my maybe has a more basic approach what

00:32:09,970 --> 00:32:14,230
I've been told from the people that have

00:32:11,890 --> 00:32:16,630
tried both is that ansible lacks some

00:32:14,230 --> 00:32:19,150
components that salt has like the

00:32:16,630 --> 00:32:21,720
reactor for example so it goes from

00:32:19,150 --> 00:32:21,720
those lines

00:32:37,710 --> 00:32:45,390
I was wondering how one could we use

00:32:41,020 --> 00:32:47,770
could use salt as a deployment or is it

00:32:45,390 --> 00:32:51,670
feasible to deploy a complete or

00:32:47,770 --> 00:32:53,860
application with it or is it just well

00:32:51,670 --> 00:32:56,200
fit to set up the system and then you

00:32:53,860 --> 00:32:59,280
need to revert to a proper deployment

00:32:56,200 --> 00:33:01,900
tool to deploy your application for

00:32:59,280 --> 00:33:03,940
application deployments right yeah web

00:33:01,900 --> 00:33:06,250
application so set up a database do

00:33:03,940 --> 00:33:08,410
something put some basic that I need

00:33:06,250 --> 00:33:11,560
deploy your Django application sort of

00:33:08,410 --> 00:33:14,380
the web server and filtered yeah I mean

00:33:11,560 --> 00:33:16,900
maybe that was covered to in the preview

00:33:14,380 --> 00:33:19,690
stock which is a more basic but no no

00:33:16,900 --> 00:33:22,470
that's a very good question and yeah you

00:33:19,690 --> 00:33:25,630
can do it you might have to handle a

00:33:22,470 --> 00:33:27,160
slightly more manual approach in order

00:33:25,630 --> 00:33:30,220
to tailor it for your environment but

00:33:27,160 --> 00:33:32,260
you can certainly do it and if you're

00:33:30,220 --> 00:33:35,170
thinking of doing some very metal

00:33:32,260 --> 00:33:37,990
provisioning you can also do that not it

00:33:35,170 --> 00:33:40,590
exactly with salt on its own but salt

00:33:37,990 --> 00:33:43,320
has form an integration for man it's a

00:33:40,590 --> 00:33:46,180
provisioning software that was mainly

00:33:43,320 --> 00:33:47,650
written for puppet but now has salt

00:33:46,180 --> 00:33:50,310
integration so you can do the whole

00:33:47,650 --> 00:33:50,310
cycle from it

00:33:52,470 --> 00:33:58,260
hello and I am just too that the

00:33:55,770 --> 00:34:01,140
communication channel is ssh is it

00:33:58,260 --> 00:34:04,830
correct salt has a way of working with

00:34:01,140 --> 00:34:06,559
ssh but it's not the main way that what

00:34:04,830 --> 00:34:11,310
i want to ask is how do you handle

00:34:06,559 --> 00:34:14,639
minions at our running windows that's a

00:34:11,310 --> 00:34:17,669
very good question actually it is

00:34:14,639 --> 00:34:19,859
possible but I'm sorry I've never had to

00:34:17,669 --> 00:34:21,840
do it I have been a little bit playing

00:34:19,859 --> 00:34:25,050
around with that and found a way to

00:34:21,840 --> 00:34:28,710
insert an ssh daemon in windows as using

00:34:25,050 --> 00:34:30,389
sog win that has an ssh it seemed to be

00:34:28,710 --> 00:34:33,090
working i'm just curious if there's

00:34:30,389 --> 00:34:35,099
other options yeah i mean as long as you

00:34:33,090 --> 00:34:37,560
you know are aware of any limitations

00:34:35,099 --> 00:34:41,330
that you might have issued warm the rest

00:34:37,560 --> 00:34:41,330
of the system is Sheridan is the same

00:34:43,710 --> 00:34:48,510
thanks for the great talk thank you i'm

00:34:46,139 --> 00:34:52,080
using salt for three months it's really

00:34:48,510 --> 00:34:56,310
cool there is also one stuff religion

00:34:52,080 --> 00:34:59,609
two engines yeah some some additional

00:34:56,310 --> 00:35:03,750
events and currently i'm looking for the

00:34:59,609 --> 00:35:05,960
way to make a pillars dynamic I mean I

00:35:03,750 --> 00:35:09,060
want pillars to get information from

00:35:05,960 --> 00:35:11,580
console or from at City during

00:35:09,060 --> 00:35:14,330
deployment to get some keep the

00:35:11,580 --> 00:35:18,089
information from key value storage

00:35:14,330 --> 00:35:21,480
external is it possible I'll have to

00:35:18,089 --> 00:35:23,790
look that up not entirely sure but I

00:35:21,480 --> 00:35:28,099
mean everything appears to be extensible

00:35:23,790 --> 00:35:34,890
in salt so I don't see why not yeah

00:35:28,099 --> 00:35:38,099
maybe this hi how do you upgrade salt

00:35:34,890 --> 00:35:41,700
without SSH or is there any good

00:35:38,099 --> 00:35:46,310
approach to do that upgrading salt

00:35:41,700 --> 00:35:46,310
without his ssh you mean the master and

00:35:46,670 --> 00:35:52,500
i don't i don't think i understood where

00:35:51,150 --> 00:36:04,410
would you were going with the question

00:35:52,500 --> 00:36:06,210
oh you need to have access to the system

00:36:04,410 --> 00:36:07,710
you need to have access to install the

00:36:06,210 --> 00:36:10,410
new version and you also have to restart

00:36:07,710 --> 00:36:12,359
the asian now that's actually that's one

00:36:10,410 --> 00:36:14,400
thing that it's not still not handle

00:36:12,359 --> 00:36:16,170
very well in salt is restarting minions

00:36:14,400 --> 00:36:18,170
whenever there's an upgrade because you

00:36:16,170 --> 00:36:20,280
can't do it from inside the master

00:36:18,170 --> 00:36:23,730
because you're going to be losing

00:36:20,280 --> 00:36:27,740
communication for a bit so yeah it's a

00:36:23,730 --> 00:36:27,740
quite kind of a tricky spot still

00:36:27,950 --> 00:36:35,099
regarding the question about dynamic

00:36:31,200 --> 00:36:39,960
pillar I think it's possible assault has

00:36:35,099 --> 00:36:41,849
a mechanism to get a pillar from

00:36:39,960 --> 00:36:45,540
external sources you can implement a

00:36:41,849 --> 00:36:49,890
fight model too there is a plug-in

00:36:45,540 --> 00:36:52,830
called glass which uses that to make

00:36:49,890 --> 00:36:56,700
glare more usable in fact and the

00:36:52,830 --> 00:37:01,680
question is how do you test your state's

00:36:56,700 --> 00:37:04,530
um we have we have several breakages in

00:37:01,680 --> 00:37:08,820
a production due to human error I know I

00:37:04,530 --> 00:37:11,310
know I don't have a like a production

00:37:08,820 --> 00:37:13,619
system I mean I used salt for personal

00:37:11,310 --> 00:37:16,740
uses I'm gonna have the luxury of

00:37:13,619 --> 00:37:18,869
working with the salt environment but I

00:37:16,740 --> 00:37:20,640
know where you go with it it would be

00:37:18,869 --> 00:37:24,530
nice if you could have a development

00:37:20,640 --> 00:37:26,970
environment or QA to try things out

00:37:24,530 --> 00:37:29,580
because yeah once you've made a change

00:37:26,970 --> 00:37:33,720
to to a state and salt doesn't like it

00:37:29,580 --> 00:37:36,340
it will blow up so it's kind of tricky

00:37:33,720 --> 00:37:38,970
you have to keep looking at the logs and

00:37:36,340 --> 00:37:41,740
be very careful what you changed your

00:37:38,970 --> 00:37:45,390
bound to have the last change that you

00:37:41,740 --> 00:37:45,390
may pose a problem if you see a problem

00:37:49,350 --> 00:37:57,280
okay is it yeah it's working how do you

00:37:53,350 --> 00:38:04,440
handle provisioning new servers and how

00:37:57,280 --> 00:38:08,500
do you handle your inventory of servers

00:38:04,440 --> 00:38:10,150
well from the point from the okay let's

00:38:08,500 --> 00:38:12,220
answer the first question provisioning

00:38:10,150 --> 00:38:14,350
is done in two parts if you're talking

00:38:12,220 --> 00:38:15,640
about verbal provisioning you have to

00:38:14,350 --> 00:38:18,010
use something like format that allows

00:38:15,640 --> 00:38:21,970
you to boot a system and then applies

00:38:18,010 --> 00:38:24,010
all states to it so salt is not it's

00:38:21,970 --> 00:38:25,869
like pop it in that way and it's not

00:38:24,010 --> 00:38:27,970
like ants about that way it's it's not

00:38:25,869 --> 00:38:30,310
so that doesn't have the ability to

00:38:27,970 --> 00:38:33,190
provision a system from bare metal from

00:38:30,310 --> 00:38:34,540
the ground cell when the system is

00:38:33,190 --> 00:38:36,310
already installed and has a million

00:38:34,540 --> 00:38:40,180
running you can do whatever you want

00:38:36,310 --> 00:38:42,580
with it as for the catalog the inventory

00:38:40,180 --> 00:38:45,250
from the perspective of master all the

00:38:42,580 --> 00:38:47,830
master sees our minions so it's up to

00:38:45,250 --> 00:38:51,070
you to group them using node groups or

00:38:47,830 --> 00:38:55,119
grains or whatever you you deem to be

00:38:51,070 --> 00:38:57,010
necessary you will be basically setting

00:38:55,119 --> 00:38:59,980
your categories on your own building no

00:38:57,010 --> 00:39:02,530
groups selling grains on certain minions

00:38:59,980 --> 00:39:04,480
to identify them from the perspective of

00:39:02,530 --> 00:39:08,710
the master but essentially there is no

00:39:04,480 --> 00:39:11,140
no way distinction in fact when we

00:39:08,710 --> 00:39:13,660
talked about the Syndic note the the

00:39:11,140 --> 00:39:15,820
main master the master of masters will

00:39:13,660 --> 00:39:20,190
see all minions connected to it even

00:39:15,820 --> 00:39:20,190
those from lower level Syndic notes

00:39:23,380 --> 00:39:28,710
so this is in response to the question

00:39:25,900 --> 00:39:32,259
about testing the salt States we do this

00:39:28,710 --> 00:39:35,650
we will use vagrant on your local

00:39:32,259 --> 00:39:38,859
machines with a masterless minion set up

00:39:35,650 --> 00:39:40,809
and then spin up in number of VMs and

00:39:38,859 --> 00:39:42,700
actually test the state's at least some

00:39:40,809 --> 00:39:43,569
minimal so that we can catch human error

00:39:42,700 --> 00:39:45,700
like that because we have the same

00:39:43,569 --> 00:39:48,069
problem how we deploy across hundreds of

00:39:45,700 --> 00:39:51,460
machines simultaneously in one error can

00:39:48,069 --> 00:39:53,680
really mess up your day so I've tried

00:39:51,460 --> 00:39:55,269
with vagrant locally it works pretty

00:39:53,680 --> 00:39:57,369
well because you can spin up different

00:39:55,269 --> 00:39:59,500
kinds of vm so we use freebsd your bun

00:39:57,369 --> 00:40:01,390
to or cintas and you can simulate a lot

00:39:59,500 --> 00:40:10,859
of those environments easily interesting

00:40:01,390 --> 00:40:14,200
thank you hi thanks for thank you and

00:40:10,859 --> 00:40:17,380
I'm a machine a pattern here I'm Cena

00:40:14,200 --> 00:40:21,190
most of the questions we are asking

00:40:17,380 --> 00:40:24,609
about salt within us that salt can't do

00:40:21,190 --> 00:40:28,839
can be done perfectly using uncivil like

00:40:24,609 --> 00:40:31,839
an initial system configuration or maybe

00:40:28,839 --> 00:40:35,230
someone asked about a service management

00:40:31,839 --> 00:40:37,000
ah I know you already said you haven't

00:40:35,230 --> 00:40:40,569
used uncivil but have you heard about

00:40:37,000 --> 00:40:45,569
someone using uncivil and salt together

00:40:40,569 --> 00:40:47,259
I know pretty much when somebody chooses

00:40:45,569 --> 00:40:50,049
configuration management system they

00:40:47,259 --> 00:40:52,660
like to stick to it it has to do with

00:40:50,049 --> 00:40:55,450
the learning curve and all the stuff so

00:40:52,660 --> 00:40:56,829
it will be harder from the very few

00:40:55,450 --> 00:40:58,269
things that I've seen from unstable it's

00:40:56,829 --> 00:40:59,950
quite different from salt even though

00:40:58,269 --> 00:41:05,109
both are reading Python even though both

00:40:59,950 --> 00:41:07,089
use llamo they're quite different so you

00:41:05,109 --> 00:41:11,000
know every organization wants to choose

00:41:07,089 --> 00:41:16,100
one technology and stick to it so yeah

00:41:11,000 --> 00:41:18,320
oh that's interesting I mean if the

00:41:16,100 --> 00:41:20,750
ansible can be used for the bare-metal

00:41:18,320 --> 00:41:23,060
provision part and salt maybe for the

00:41:20,750 --> 00:41:24,940
rest or solve for their reactors yeah

00:41:23,060 --> 00:41:34,850
you could certainly mix those two

00:41:24,940 --> 00:41:39,500
picture used to create virtual machine

00:41:34,850 --> 00:41:41,660
to install salt master on it and to

00:41:39,500 --> 00:41:44,150
configure it and then to apply state by

00:41:41,660 --> 00:41:46,970
state I were talking about the fabric

00:41:44,150 --> 00:41:52,130
python modules right the one that comes

00:41:46,970 --> 00:41:56,240
from para Miko uses ssh yeah right it's

00:41:52,130 --> 00:41:58,430
age 22 to make a basic provisioning to

00:41:56,240 --> 00:42:01,100
start with a machine to put your soul

00:41:58,430 --> 00:42:03,980
master on it and then use salt master

00:42:01,100 --> 00:42:07,640
and the full power of salt yeah now you

00:42:03,980 --> 00:42:09,940
can also do that we have time for one

00:42:07,640 --> 00:42:09,940
more question

00:42:12,359 --> 00:42:18,030
or not okay thank you guys thank you

00:42:15,880 --> 00:42:18,030

YouTube URL: https://www.youtube.com/watch?v=srx6SvSw2us


