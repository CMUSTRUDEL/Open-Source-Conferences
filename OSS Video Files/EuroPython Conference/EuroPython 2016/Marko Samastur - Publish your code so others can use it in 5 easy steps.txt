Title: Marko Samastur - Publish your code so others can use it in 5 easy steps
Publication date: 2016-07-30
Playlist: EuroPython 2016
Description: 
	Marko Samastur - Publish your code so others can use it in 5 easy steps
[EuroPython 2016]
[20 July 2016]
[Bilbao, Euskadi, Spain]
(https://ep2016.europython.eu//conference/talks/publish-your-code-so-others-can-use-it-in-5-easy-steps)

As developers we all love well-documented, well-tested packages. If we
do the same for our code it is easier for others to re-use our hard
work, and maybe even contribute. We will take a quick look on how to
do this using popular tools and only a small investment of time. With
Github and some simple tools, setting up a well-groomed package
doesn't have to be difficult.

-----

Every Python open-source developer wants their software to be used. As
developers, we trust software that is tested and well-documented.

In this talk we'll go through 5 steps for how to do this for your own packages.

We will take a quick look on how to do this using popular tools and
small investment of time:

- Write a setup.py script for a pure Python package
- Set up py.test, tox and coverage to test our package with multiple
versions of Python
- Configure Github to use Travis CI & coveralls.io to automatically
test our package every time we commit
- Register and publish our package to PyPI
- Setup our documentation on ReadTheDocs
Captions: 
	00:00:06,980 --> 00:00:16,350
hello so yeah I'm not an independent

00:00:12,960 --> 00:00:20,160
software consultant and i also have a

00:00:16,350 --> 00:00:22,830
few packages on pi PI and this talk is

00:00:20,160 --> 00:00:25,500
introduction to the kind of workflow

00:00:22,830 --> 00:00:27,810
that i use works well for me and i think

00:00:25,500 --> 00:00:33,000
it can work about for most people and

00:00:27,810 --> 00:00:36,120
it's easy to change if needed um before

00:00:33,000 --> 00:00:38,670
I go on I just want to list a few

00:00:36,120 --> 00:00:41,010
additional resources the really

00:00:38,670 --> 00:00:43,890
important one for important one is the

00:00:41,010 --> 00:00:48,090
last one which is the link to this job

00:00:43,890 --> 00:00:50,280
so every other things are included so

00:00:48,090 --> 00:00:54,989
you can have little so that one that's

00:00:50,280 --> 00:00:59,609
all you need so the content of this talk

00:00:54,989 --> 00:01:01,500
is how to build a Python package and we

00:00:59,609 --> 00:01:03,510
would look at pure python one because of

00:01:01,500 --> 00:01:06,689
the time limits and also my experience

00:01:03,510 --> 00:01:09,450
is mostly good patent law and in my

00:01:06,689 --> 00:01:12,180
opinion if we're if you're going to

00:01:09,450 --> 00:01:14,430
publish a python code which i think

00:01:12,180 --> 00:01:16,860
everybody should i think everyone has

00:01:14,430 --> 00:01:18,479
something to contribute it it makes

00:01:16,860 --> 00:01:21,710
sense to do it well which means that

00:01:18,479 --> 00:01:27,000
it's properly tested and documented and

00:01:21,710 --> 00:01:31,140
everything is top-notch so when you

00:01:27,000 --> 00:01:34,340
start working on a package encoder we

00:01:31,140 --> 00:01:38,490
first need to think about the layout and

00:01:34,340 --> 00:01:40,799
Paul the first thing we need whichever

00:01:38,490 --> 00:01:43,020
Python package needs is a configuration

00:01:40,799 --> 00:01:47,430
script set up the pipe which goes into

00:01:43,020 --> 00:01:50,729
the root directory next thing that we

00:01:47,430 --> 00:01:53,310
need is to put our code somewhere the

00:01:50,729 --> 00:01:56,130
code that we want to distribute home so

00:01:53,310 --> 00:02:00,000
my imaginary package is called by start

00:01:56,130 --> 00:02:02,310
and the directory i would use is pi

00:02:00,000 --> 00:02:04,280
start which is the same name that would

00:02:02,310 --> 00:02:07,140
we use import statement so it's

00:02:04,280 --> 00:02:08,940
important that you pick name well in

00:02:07,140 --> 00:02:10,830
that regard

00:02:08,940 --> 00:02:14,520
you could probably do it differently but

00:02:10,830 --> 00:02:16,800
why complicate on another tooth thing

00:02:14,520 --> 00:02:18,150
that I'd like to do is to separate tests

00:02:16,800 --> 00:02:20,760
and documentation in separate

00:02:18,150 --> 00:02:22,770
directories because that way they are

00:02:20,760 --> 00:02:25,430
easy to find and they are also easy to

00:02:22,770 --> 00:02:31,350
include or exclude from the package as

00:02:25,430 --> 00:02:33,390
co2 or wished so once we have basic

00:02:31,350 --> 00:02:35,970
layout we need to look at the settable

00:02:33,390 --> 00:02:38,120
by again so the configuration script

00:02:35,970 --> 00:02:42,690
which is composed from two parts the

00:02:38,120 --> 00:02:44,850
first part is metadata about the script

00:02:42,690 --> 00:02:47,520
itself and the other part is packaging

00:02:44,850 --> 00:02:50,940
information which does Python how to

00:02:47,520 --> 00:02:53,520
handle this give what to build on

00:02:50,940 --> 00:02:56,270
dependence and things like that so the

00:02:53,520 --> 00:02:59,520
metadata section highlighted here is

00:02:56,270 --> 00:03:02,010
mostly about what this package is what

00:02:59,520 --> 00:03:06,210
it does who's it from the word license

00:03:02,010 --> 00:03:09,450
and in general those animals are fairly

00:03:06,210 --> 00:03:11,580
self-explanatory so not going to details

00:03:09,450 --> 00:03:14,160
but I would like to point out three

00:03:11,580 --> 00:03:16,950
things so the the first one is the long

00:03:14,160 --> 00:03:21,120
description which in this case is

00:03:16,950 --> 00:03:24,239
included but my advice would be to put

00:03:21,120 --> 00:03:28,080
it in external file because then you can

00:03:24,239 --> 00:03:30,959
reuse the same description on pi PI on

00:03:28,080 --> 00:03:36,570
github if you have it with your go

00:03:30,959 --> 00:03:38,760
disorder and github itself doesn't care

00:03:36,570 --> 00:03:40,410
about much which format you use it

00:03:38,760 --> 00:03:43,680
support something like knowing different

00:03:40,410 --> 00:03:47,610
formats but bi bi does so write the

00:03:43,680 --> 00:03:50,220
description in restructure text on next

00:03:47,610 --> 00:03:53,580
thing to think about our classifiers

00:03:50,220 --> 00:03:58,709
which are here at a quarter half of the

00:03:53,580 --> 00:04:01,650
slide and those are main men should be

00:03:58,709 --> 00:04:04,769
easily machine processable but they also

00:04:01,650 --> 00:04:07,890
used by developers to you to quickly

00:04:04,769 --> 00:04:09,750
decide if these packages of interest and

00:04:07,890 --> 00:04:11,580
it's important to keep them updated and

00:04:09,750 --> 00:04:14,910
to think about our kind of things to

00:04:11,580 --> 00:04:17,729
Buddha and the third thing is licensed

00:04:14,910 --> 00:04:20,910
so it's very important to pick one

00:04:17,729 --> 00:04:23,310
because since berne convention every

00:04:20,910 --> 00:04:25,169
code is automatically copyrighted and

00:04:23,310 --> 00:04:27,870
without license this means that it's

00:04:25,169 --> 00:04:32,100
effectively copy locked so it's not of

00:04:27,870 --> 00:04:37,169
no use to anybody else except you until

00:04:32,100 --> 00:04:39,030
you give it a license so you and if you

00:04:37,169 --> 00:04:42,300
need help with this you can talk to me

00:04:39,030 --> 00:04:43,979
later if you want otherwise from

00:04:42,300 --> 00:04:47,190
somebody without any legal training

00:04:43,979 --> 00:04:50,010
whatsoever anyway this is a metadata

00:04:47,190 --> 00:04:52,590
section and the next thing is to include

00:04:50,010 --> 00:04:57,419
the code itself so we do this with the

00:04:52,590 --> 00:05:00,539
packages attribute parameter which had

00:04:57,419 --> 00:05:03,030
lists the relative path to the code of

00:05:00,539 --> 00:05:06,090
our package in our case that's PI start

00:05:03,030 --> 00:05:09,479
and in principle that will be everything

00:05:06,090 --> 00:05:11,340
you need but a lot of packages are a lot

00:05:09,479 --> 00:05:13,800
of interesting packages also have some

00:05:11,340 --> 00:05:16,229
kind of external dependencies and those

00:05:13,800 --> 00:05:19,530
are handles with install required

00:05:16,229 --> 00:05:22,110
section which is a list of all the

00:05:19,530 --> 00:05:24,300
external dependencies with their names

00:05:22,110 --> 00:05:27,539
the same names as they are used on pi PI

00:05:24,300 --> 00:05:30,300
and you can also specify Asian which

00:05:27,539 --> 00:05:32,390
really you should so you can limit it to

00:05:30,300 --> 00:05:35,660
the matching ones that will not break

00:05:32,390 --> 00:05:41,520
compatibility and also ideally is

00:05:35,660 --> 00:05:43,950
liberal enough that you can also pick up

00:05:41,520 --> 00:05:47,310
automatically bug fixes or security

00:05:43,950 --> 00:05:50,340
fixes for the parenthesis so at this

00:05:47,310 --> 00:05:53,669
point we have a package that's buildable

00:05:50,340 --> 00:05:56,490
that can be installed locally but for

00:05:53,669 --> 00:05:59,729
which we don't actually know that if it

00:05:56,490 --> 00:06:02,820
works well and for that we need to add

00:05:59,729 --> 00:06:04,260
tests so there are many times here at

00:06:02,820 --> 00:06:06,479
the conference and previous conferences

00:06:04,260 --> 00:06:08,430
about testing and I mean we will avoid

00:06:06,479 --> 00:06:11,039
going into why this is a good idea i

00:06:08,430 --> 00:06:15,599
think we probably all really delicious

00:06:11,039 --> 00:06:17,010
and python comes with many testing

00:06:15,599 --> 00:06:20,430
frameworks you're free to choose

00:06:17,010 --> 00:06:22,650
whichever you want unit test is part of

00:06:20,430 --> 00:06:24,270
the distribution itself but me

00:06:22,650 --> 00:06:25,980
personally I prefer to have pie test

00:06:24,270 --> 00:06:28,440
because it's a really powerful and

00:06:25,980 --> 00:06:29,520
flexible framework and once you install

00:06:28,440 --> 00:06:34,129
it

00:06:29,520 --> 00:06:37,410
it's also easy to set up it will find

00:06:34,129 --> 00:06:39,389
tests just about anywhere as long as the

00:06:37,410 --> 00:06:43,470
files that contain them start with just

00:06:39,389 --> 00:06:44,909
underscore and test themselves are

00:06:43,470 --> 00:06:47,039
functions that start with tests on the

00:06:44,909 --> 00:06:49,169
score as well so once you install it and

00:06:47,039 --> 00:06:51,479
the run it you will get a display

00:06:49,169 --> 00:06:55,979
something similar like this in this case

00:06:51,479 --> 00:07:00,389
they are just to test for this package

00:06:55,979 --> 00:07:02,849
and yeah hopefully eventually we will

00:07:00,389 --> 00:07:09,330
have you would have a full test feet

00:07:02,849 --> 00:07:12,360
covering Nicole the code but we test

00:07:09,330 --> 00:07:16,349
like this we only cover the interpreter

00:07:12,360 --> 00:07:19,440
with its run by default and ideally we

00:07:16,349 --> 00:07:21,509
would also test with other python

00:07:19,440 --> 00:07:24,360
versions we would want to support more

00:07:21,509 --> 00:07:27,870
of them hopefully and for something like

00:07:24,360 --> 00:07:35,849
this we might want to you I use talks so

00:07:27,870 --> 00:07:38,639
roxy is a tool that lets developers test

00:07:35,849 --> 00:07:41,630
build different multiple testing

00:07:38,639 --> 00:07:44,569
environments with a different set of

00:07:41,630 --> 00:07:47,099
dependencies or dependency versions and

00:07:44,569 --> 00:07:49,500
test run tests in all of them and

00:07:47,099 --> 00:07:51,419
collect results and displayed this

00:07:49,500 --> 00:07:53,849
pattern it does actually much more than

00:07:51,419 --> 00:07:55,560
this um but for what we need this is

00:07:53,849 --> 00:07:59,310
enough because we can think of Python

00:07:55,560 --> 00:08:02,550
interpreter version as this is just

00:07:59,310 --> 00:08:06,389
another package so it it can be easily

00:08:02,550 --> 00:08:09,300
covered with toxic sorry so once we

00:08:06,389 --> 00:08:11,310
install talks with PI P I sorry beep

00:08:09,300 --> 00:08:14,909
install talks um we need to also

00:08:11,310 --> 00:08:17,880
configure it and do this with a tongue

00:08:14,909 --> 00:08:22,139
stud I night I need a configuration file

00:08:17,880 --> 00:08:25,440
here's a sample month and it contains

00:08:22,139 --> 00:08:30,090
two sections so the first one of his

00:08:25,440 --> 00:08:33,810
talks where with parameter and list we

00:08:30,090 --> 00:08:37,909
specify which environments we want to

00:08:33,810 --> 00:08:40,760
use tox itself comes with the predefined

00:08:37,909 --> 00:08:43,669
environment for all Python

00:08:40,760 --> 00:08:47,360
interesting Python versions so in this

00:08:43,669 --> 00:08:51,170
case we use Python 2.7 3.5 and bye-bye

00:08:47,360 --> 00:08:52,430
you can also define our own but most of

00:08:51,170 --> 00:08:57,560
the time we probably don't need to do

00:08:52,430 --> 00:09:01,280
that so with this we set a setup that we

00:08:57,560 --> 00:09:04,700
will test with 2.7 and 3.55 pi PI and

00:09:01,280 --> 00:09:07,490
then we also need to define how these

00:09:04,700 --> 00:09:10,250
tests should be set up and run so we do

00:09:07,490 --> 00:09:12,470
this first by the listing dependencies

00:09:10,250 --> 00:09:15,170
which in our case is just installed by

00:09:12,470 --> 00:09:16,970
just home and then we also need to

00:09:15,170 --> 00:09:18,950
specify how to run those tests which

00:09:16,970 --> 00:09:21,530
again in other cases just run fighters

00:09:18,950 --> 00:09:23,690
and because I do everything else

00:09:21,530 --> 00:09:25,850
automatically so once we've done this

00:09:23,690 --> 00:09:28,190
and run with the tox command we will get

00:09:25,850 --> 00:09:30,200
display very similar to this one where

00:09:28,190 --> 00:09:32,240
we can see that it ran in all these

00:09:30,200 --> 00:09:34,760
three that you configured all these

00:09:32,240 --> 00:09:37,550
three environments grand test there and

00:09:34,760 --> 00:09:41,660
at the end reported success in all of

00:09:37,550 --> 00:09:44,380
them so now we have something that works

00:09:41,660 --> 00:09:47,630
pretty well locally we can run tests

00:09:44,380 --> 00:09:52,550
multiple for multiple python versions

00:09:47,630 --> 00:09:53,960
and but it wouldn't it be nice if at the

00:09:52,550 --> 00:09:56,000
same time we could run tests

00:09:53,960 --> 00:09:58,700
automatically every time we make a

00:09:56,000 --> 00:10:00,950
change did you would like to keep and

00:09:58,700 --> 00:10:04,640
for me this is kind of similar or more

00:10:00,950 --> 00:10:07,220
or less the same thing as making two

00:10:04,640 --> 00:10:11,600
myths that I push to get help it's those

00:10:07,220 --> 00:10:14,060
one data I intend to keep and we can

00:10:11,600 --> 00:10:17,230
achieve this with by using an external

00:10:14,060 --> 00:10:20,030
service called Travis CI which is a

00:10:17,230 --> 00:10:24,350
continuous integration service that is

00:10:20,030 --> 00:10:30,410
also as a hosted Travis CI or website

00:10:24,350 --> 00:10:33,590
that allows open source public projects

00:10:30,410 --> 00:10:35,750
to use it for free and to use it we

00:10:33,590 --> 00:10:38,800
first need to create an account which we

00:10:35,750 --> 00:10:42,350
do by logging it with our github

00:10:38,800 --> 00:10:44,650
credentials sorry github account we

00:10:42,350 --> 00:10:48,320
don't need to authorize application so

00:10:44,650 --> 00:10:50,450
so it has access to our repositories so

00:10:48,320 --> 00:10:52,510
you can read them and once we've done

00:10:50,450 --> 00:10:54,050
that we will get a list of our

00:10:52,510 --> 00:10:57,860
repositories

00:10:54,050 --> 00:11:01,990
we need to switch on those that we find

00:10:57,860 --> 00:11:05,330
that we want to use with Travis and

00:11:01,990 --> 00:11:07,490
after that we are all in d2 only we need

00:11:05,330 --> 00:11:09,399
to configure it with the Travis

00:11:07,490 --> 00:11:11,329
configuration file which is a yellow

00:11:09,399 --> 00:11:13,190
configuration file in which we first

00:11:11,329 --> 00:11:15,980
specify for which language we want to

00:11:13,190 --> 00:11:19,220
use in our case Python and then we need

00:11:15,980 --> 00:11:24,920
to specify also the interpreter versions

00:11:19,220 --> 00:11:25,880
that we will be using beta Travis now

00:11:24,920 --> 00:11:30,290
this section is a slightly more

00:11:25,880 --> 00:11:32,420
complicated because we can test and

00:11:30,290 --> 00:11:34,279
ideally we should test with Travis with

00:11:32,420 --> 00:11:36,829
different Python versions but we are

00:11:34,279 --> 00:11:39,709
also using talks for the same thing

00:11:36,829 --> 00:11:44,120
locally um so the way to handle this is

00:11:39,709 --> 00:11:46,070
to instruct Travis which Python

00:11:44,120 --> 00:11:49,540
interpreted it should use with the

00:11:46,070 --> 00:11:54,350
Python keyboard so for example 2.7 and

00:11:49,540 --> 00:11:55,940
also instruct talks which testing

00:11:54,350 --> 00:11:59,480
environment it should use at the same

00:11:55,940 --> 00:12:02,839
time which we do food talks environment

00:11:59,480 --> 00:12:06,320
environment variable on where we use the

00:12:02,839 --> 00:12:09,170
name of the environment so after we've

00:12:06,320 --> 00:12:11,510
done this we need to install whatever is

00:12:09,170 --> 00:12:13,190
needed to test our package now a simple

00:12:11,510 --> 00:12:15,980
case this is just installing talks which

00:12:13,190 --> 00:12:17,630
we install fighters and do the rest and

00:12:15,980 --> 00:12:22,000
then we need to also run the command

00:12:17,630 --> 00:12:24,740
that we need to run tests which is just

00:12:22,000 --> 00:12:27,170
executing talks softer we've done this

00:12:24,740 --> 00:12:30,890
we will gather page similar to this one

00:12:27,170 --> 00:12:35,060
this is for one of my projects where we

00:12:30,890 --> 00:12:38,300
see the status of the test that we run

00:12:35,060 --> 00:12:43,579
every time we push another change to

00:12:38,300 --> 00:12:45,890
github and we also get this badge on the

00:12:43,579 --> 00:12:50,750
top of the screen if you click on this

00:12:45,890 --> 00:12:53,870
we can get embedded links are and that

00:12:50,750 --> 00:12:57,649
is snippet that you can use to include

00:12:53,870 --> 00:13:01,339
into our readme file or online pages or

00:12:57,649 --> 00:13:04,579
we can also tell other developers calm

00:13:01,339 --> 00:13:08,320
in what state our own package right now

00:13:04,579 --> 00:13:11,590
is so at this point

00:13:08,320 --> 00:13:13,820
something that works pretty well um it's

00:13:11,590 --> 00:13:16,550
hopefully tested it gets automatically

00:13:13,820 --> 00:13:18,200
tested every time we push changes but it

00:13:16,550 --> 00:13:20,200
doesn't have a documentation yet and

00:13:18,200 --> 00:13:23,830
without documentation it's probably not

00:13:20,200 --> 00:13:28,070
really inviting to others to use because

00:13:23,830 --> 00:13:30,860
how would we I mean without some kind of

00:13:28,070 --> 00:13:34,030
knowledge how to use software it's

00:13:30,860 --> 00:13:37,160
probably less appealing than other

00:13:34,030 --> 00:13:38,750
potential packages that might have more

00:13:37,160 --> 00:13:40,730
documentation so so writing

00:13:38,750 --> 00:13:42,350
documentation is important also for

00:13:40,730 --> 00:13:45,260
other reasons because of the

00:13:42,350 --> 00:13:46,880
documentation we can also think about

00:13:45,260 --> 00:13:49,640
how the code should be used to how

00:13:46,880 --> 00:13:54,200
should it work and we also tell what it

00:13:49,640 --> 00:13:56,150
actually does and for the writing

00:13:54,200 --> 00:13:58,160
documentation I used it all things which

00:13:56,150 --> 00:14:01,220
is the same one that Python project uses

00:13:58,160 --> 00:14:02,960
and I publish it on video dogs not work

00:14:01,220 --> 00:14:06,560
which is another free service for

00:14:02,960 --> 00:14:09,650
open-source work that you can use again

00:14:06,560 --> 00:14:14,420
we need to create an account and we need

00:14:09,650 --> 00:14:16,670
to authorize the axis which we do once

00:14:14,420 --> 00:14:21,200
we login by clicking on this connect

00:14:16,670 --> 00:14:25,670
github and again the same screen for

00:14:21,200 --> 00:14:27,560
authorization and afterwards once we

00:14:25,670 --> 00:14:31,790
authorized we come back to the screen

00:14:27,560 --> 00:14:34,340
and we need to import a project from a

00:14:31,790 --> 00:14:37,160
list of projects usually it seems for

00:14:34,340 --> 00:14:38,330
some reason the window when you come to

00:14:37,160 --> 00:14:41,240
this page work for the very first time

00:14:38,330 --> 00:14:44,840
it's empty so you need to resync with

00:14:41,240 --> 00:14:47,420
that sync button up there and afterwards

00:14:44,840 --> 00:14:50,410
you just click on the plus sign of the

00:14:47,420 --> 00:14:53,990
project to do that you would like to add

00:14:50,410 --> 00:14:57,890
documentation for so once you've done

00:14:53,990 --> 00:15:00,470
this you can add information about the

00:14:57,890 --> 00:15:04,670
project itself usually the default of

00:15:00,470 --> 00:15:08,360
fun as they are they're picked up from

00:15:04,670 --> 00:15:10,760
github name and repository you can

00:15:08,360 --> 00:15:14,660
change the settings if you don't like

00:15:10,760 --> 00:15:16,640
them but if you do please you use the

00:15:14,660 --> 00:15:18,620
format of the documentation two strings

00:15:16,640 --> 00:15:20,050
HTML because this is the one that we

00:15:18,620 --> 00:15:22,510
actually use

00:15:20,050 --> 00:15:24,910
and once you've done all of these you

00:15:22,510 --> 00:15:28,029
know you get to a page to this that's a

00:15:24,910 --> 00:15:31,830
sort of a statist page for your project

00:15:28,029 --> 00:15:35,649
which does you in what state is the

00:15:31,830 --> 00:15:37,600
documentation generation is you again

00:15:35,649 --> 00:15:39,880
you get a badge that you can use and you

00:15:37,600 --> 00:15:42,610
also get short URLs that you can use to

00:15:39,880 --> 00:15:46,180
point to your documentation once it's

00:15:42,610 --> 00:15:52,050
built so this is the online part and now

00:15:46,180 --> 00:15:54,820
we have to also set up the side on the

00:15:52,050 --> 00:15:59,110
locally so first we need to install

00:15:54,820 --> 00:16:01,420
Sphinx with Sphinx utter build and then

00:15:59,110 --> 00:16:04,180
we move to the documentation folder that

00:16:01,420 --> 00:16:06,760
we created before and runs things Quick

00:16:04,180 --> 00:16:08,890
Start which will ask us a few easily

00:16:06,760 --> 00:16:11,470
answerable questions or if you don't

00:16:08,890 --> 00:16:13,660
know the defaulter again fine and this

00:16:11,470 --> 00:16:16,060
will generate a configuration file in

00:16:13,660 --> 00:16:18,910
which we might want to check if those

00:16:16,060 --> 00:16:21,100
two expenses are turned on the first

00:16:18,910 --> 00:16:23,890
extension autodoc is used to generate

00:16:21,100 --> 00:16:26,200
documentation from Rock Springs which

00:16:23,890 --> 00:16:28,660
can be really useful for generating API

00:16:26,200 --> 00:16:30,970
documentation and the other one enters

00:16:28,660 --> 00:16:34,810
things is for if you want to link to

00:16:30,970 --> 00:16:37,300
documentation from other packages so

00:16:34,810 --> 00:16:39,610
once you have all this and once you also

00:16:37,300 --> 00:16:42,790
wrote some documentation you know

00:16:39,610 --> 00:16:48,450
structure text you can create a local

00:16:42,790 --> 00:16:51,160
ver copy with make HTML and browse it

00:16:48,450 --> 00:16:54,790
afterwards you don't need to check it in

00:16:51,160 --> 00:16:58,779
because read the docs be automatically

00:16:54,790 --> 00:17:02,200
pull changes from github and builds its

00:16:58,779 --> 00:17:07,270
own version anyway so now we have

00:17:02,200 --> 00:17:10,120
package that's probably pretty good it

00:17:07,270 --> 00:17:13,209
has tests has documentation it just

00:17:10,120 --> 00:17:15,370
hasn't been published yet and so on well

00:17:13,209 --> 00:17:17,050
in a way it has been because it's

00:17:15,370 --> 00:17:19,630
possible to install it from github

00:17:17,050 --> 00:17:22,209
directly but that's all very flexible

00:17:19,630 --> 00:17:26,050
it's also not very manageable for users

00:17:22,209 --> 00:17:29,290
and it's possibly more difficult to find

00:17:26,050 --> 00:17:32,980
so we should publish it on pi pi which

00:17:29,290 --> 00:17:33,920
is a pythons one-stop-shop for python

00:17:32,980 --> 00:17:36,110
packages

00:17:33,920 --> 00:17:39,860
and to do this we already have

00:17:36,110 --> 00:17:43,040
everything we need so we need to

00:17:39,860 --> 00:17:45,320
register ourselves we need to create an

00:17:43,040 --> 00:17:48,170
account which we can do either on that

00:17:45,320 --> 00:17:51,350
or we can do it while we register a

00:17:48,170 --> 00:17:54,710
package itself so to register package

00:17:51,350 --> 00:17:59,750
how we would run this command so Python

00:17:54,710 --> 00:18:02,480
set up but by with set of blood by

00:17:59,750 --> 00:18:04,310
alvaro package and with the register

00:18:02,480 --> 00:18:06,860
coolant and it will ask us for

00:18:04,310 --> 00:18:09,050
credentials to pi PI or if we don't have

00:18:06,860 --> 00:18:12,380
them it's at this point we can also

00:18:09,050 --> 00:18:14,660
create an account and everything else

00:18:12,380 --> 00:18:17,570
about the package will be read from the

00:18:14,660 --> 00:18:20,060
set up by itself so we don't have to do

00:18:17,570 --> 00:18:23,810
anything there so once we've done this

00:18:20,060 --> 00:18:26,870
we just need to push the package itself

00:18:23,810 --> 00:18:30,140
and we do this with another set up that

00:18:26,870 --> 00:18:33,440
pipe command in which case it's creating

00:18:30,140 --> 00:18:38,390
source distribution and wheel

00:18:33,440 --> 00:18:43,040
distribution and upload it to arm the bi

00:18:38,390 --> 00:18:45,970
bi we might also want to do some other

00:18:43,040 --> 00:18:49,340
changes so if you create a bi bi

00:18:45,970 --> 00:18:51,170
configuration file we can specify our

00:18:49,340 --> 00:18:52,850
connections there it's probably not a

00:18:51,170 --> 00:18:55,400
good idea to put password there even

00:18:52,850 --> 00:18:58,130
though you can but if you use all the

00:18:55,400 --> 00:19:00,380
version of Python that's before five

00:18:58,130 --> 00:19:03,200
point two point seven point nine it's a

00:19:00,380 --> 00:19:08,810
good idea to put that repository oh this

00:19:03,200 --> 00:19:12,650
is the type of sorry I repository a line

00:19:08,810 --> 00:19:15,200
inside because it forces set up dot x to

00:19:12,650 --> 00:19:17,630
use secure connection to pi PI and not

00:19:15,200 --> 00:19:20,060
expose your credentials newer versions

00:19:17,630 --> 00:19:22,730
of Python can do this automatically but

00:19:20,060 --> 00:19:27,920
on all the versions you it's a good idea

00:19:22,730 --> 00:19:31,720
to have that in so at this point we've

00:19:27,920 --> 00:19:35,270
done everything we have a package that's

00:19:31,720 --> 00:19:41,740
getting tested has documentation you

00:19:35,270 --> 00:19:41,740
know how to publish it to pi PI and

00:19:43,180 --> 00:19:47,539
since we know all this it will be kind

00:19:45,890 --> 00:19:51,350
of silly if you had to do this

00:19:47,539 --> 00:19:53,239
time be want to create a new package and

00:19:51,350 --> 00:19:56,899
publish new package so it's better to

00:19:53,239 --> 00:19:59,450
automate it and we can do this with a

00:19:56,899 --> 00:20:03,049
tool called cookie cutter that was

00:19:59,450 --> 00:20:07,840
created created by Audrey Rosenberg it's

00:20:03,049 --> 00:20:12,200
a common line tool for creating

00:20:07,840 --> 00:20:14,419
scaffolding for the project from project

00:20:12,200 --> 00:20:19,519
template and order already provided a

00:20:14,419 --> 00:20:21,070
great template for Python packages so

00:20:19,519 --> 00:20:24,409
first we need to install cookie cutter

00:20:21,070 --> 00:20:29,479
then we need to point it to the location

00:20:24,409 --> 00:20:32,059
of the template file in this case it

00:20:29,479 --> 00:20:34,580
means it's on github at Audrey the

00:20:32,059 --> 00:20:36,919
repository cookie cutter pie package um

00:20:34,580 --> 00:20:38,809
it will pull it from there and then it

00:20:36,919 --> 00:20:43,700
will ask us a bunch of questions that we

00:20:38,809 --> 00:20:46,669
answer so that it can feel the missing

00:20:43,700 --> 00:20:52,580
or unknown parts and afterwards we will

00:20:46,669 --> 00:20:55,669
have the power the whole scaffolding ray

00:20:52,580 --> 00:21:00,799
well the whole package ready to go so we

00:20:55,669 --> 00:21:06,859
can just add the in code and the content

00:21:00,799 --> 00:21:10,220
that is needed so yeah that's it we

00:21:06,859 --> 00:21:12,919
didn't have time to cover sadly we

00:21:10,220 --> 00:21:16,789
couldn't go into depth about the tools

00:21:12,919 --> 00:21:19,549
that were mentioned I strongly urge you

00:21:16,789 --> 00:21:22,190
to look at their deployment ation they

00:21:19,549 --> 00:21:25,190
are really powerful and you can do much

00:21:22,190 --> 00:21:26,690
more there was alternatives for each one

00:21:25,190 --> 00:21:29,690
of them so if for some reason you don't

00:21:26,690 --> 00:21:34,190
like like some of them you can easily

00:21:29,690 --> 00:21:36,859
replace them with a different tool but

00:21:34,190 --> 00:21:38,509
on the whole this thing works pretty

00:21:36,859 --> 00:21:41,379
well for me and I hope you don't forget

00:21:38,509 --> 00:21:41,379
to thank

00:21:52,710 --> 00:22:22,149
okay thank you marco any questions in

00:22:01,210 --> 00:22:24,609
the back it again hello I wanted to ask

00:22:22,149 --> 00:22:26,830
you if it's possible to do the tox

00:22:24,609 --> 00:22:29,440
configuration without using pi test like

00:22:26,830 --> 00:22:32,220
using another test runner like the

00:22:29,440 --> 00:22:37,090
default general a test cases or sure

00:22:32,220 --> 00:22:38,919
sure so right yet so I use by test but

00:22:37,090 --> 00:22:40,840
in principle the only thing you would

00:22:38,919 --> 00:22:44,230
need to change for everything to work is

00:22:40,840 --> 00:22:47,379
in the talks configure it so you use

00:22:44,230 --> 00:22:50,499
whatever that's run it and that's

00:22:47,379 --> 00:22:52,119
testing framework you want but then if

00:22:50,499 --> 00:22:53,559
you wanted to keep everything else the

00:22:52,119 --> 00:22:55,899
same you just need to change the tox

00:22:53,559 --> 00:22:57,850
configuration where it installs by test

00:22:55,899 --> 00:23:01,119
and then run by test you would need to

00:22:57,850 --> 00:23:02,409
change it to install your framework if

00:23:01,119 --> 00:23:04,149
it needs to be installed if it's not a

00:23:02,409 --> 00:23:06,879
unit test and then you would need to

00:23:04,149 --> 00:23:09,249
change the execution part so that

00:23:06,879 --> 00:23:12,669
instead of running by test if you'd run

00:23:09,249 --> 00:23:14,649
whatever tests rather are you using and

00:23:12,669 --> 00:23:17,799
everything else would pretty much work

00:23:14,649 --> 00:23:22,350
the same way I think without a problem

00:23:17,799 --> 00:23:25,919
okay thank you thank you for crushing

00:23:22,350 --> 00:23:25,919
any more questions

00:23:33,700 --> 00:23:37,789
hello thank you for the talk so do you

00:23:36,080 --> 00:23:39,860
think a proper project should have some

00:23:37,789 --> 00:23:43,940
kind of automatic code quality control

00:23:39,860 --> 00:23:48,440
such as you know flight 85 like such

00:23:43,940 --> 00:23:50,749
sort of God yes I do so this talk region

00:23:48,440 --> 00:23:55,460
ii would also have a section on coverage

00:23:50,749 --> 00:23:57,830
which is not perfect but it would point

00:23:55,460 --> 00:24:00,309
into that direction so ideally you would

00:23:57,830 --> 00:24:02,629
try to automate everything you can so

00:24:00,309 --> 00:24:05,960
the problem with running things manually

00:24:02,629 --> 00:24:08,299
is that it's easy to forget and anything

00:24:05,960 --> 00:24:13,309
that can be automated ideally should be

00:24:08,299 --> 00:24:15,289
automated so there are a bunch of tools

00:24:13,309 --> 00:24:18,019
out there they're usually free to use

00:24:15,289 --> 00:24:21,289
for open source that you can use to

00:24:18,019 --> 00:24:24,710
integrate these things like this into

00:24:21,289 --> 00:24:29,559
your world fell and join me once again

00:24:24,710 --> 00:24:29,559
giving marker a big thanks thank you

00:24:32,169 --> 00:24:34,230

YouTube URL: https://www.youtube.com/watch?v=gc9dkktg1gU


