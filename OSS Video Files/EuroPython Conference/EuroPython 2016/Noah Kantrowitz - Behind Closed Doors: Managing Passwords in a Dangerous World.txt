Title: Noah Kantrowitz - Behind Closed Doors: Managing Passwords in a Dangerous World
Publication date: 2016-07-28
Playlist: EuroPython 2016
Description: 
	Noah Kantrowitz - Behind Closed Doors: Managing Passwords in a Dangerous World
[EuroPython 2016]
[18 July 2016]
[Bilbao, Euskadi, Spain]
(https://ep2016.europython.eu//conference/talks/behind-closed-doors-managing-passwords-in-a-dangerous-world)

A modern application has a lot of passwords and keys floating around.
Encryptions keys, database passwords, and API credentials; often typed
in to text files and forgotten. Fortunately a new wave of tools are
emerging to help manage, update, and audit these secrets. Come learn
how to avoid being the next TechCrunch headline.

-----

Secrets come in many forms, passwords, keys, tokens. All crucial for
the operation of an application, but each dangerous in its own way. In
the past, many of us have pasted those secrets in to a text file and
moved on, but in a world of config automation and ephemeral
microservices these patterns are leaving our data at greater risk than
ever before.

New tools, products, and libraries are being released all the time to
try to cope with this massive rise in threats, both new and old-but-
ignored. This talk will cover the major types of secrets in a normal
web application, how to model their security properties, what tools
are best for each situation, and how to use them with major web
frameworks.
Captions: 
	00:00:04,430 --> 00:00:10,650
alright so let's just get started quick

00:00:08,580 --> 00:00:13,380
intro about me I'm fairly active in the

00:00:10,650 --> 00:00:14,759
chef and broader DevOps world I'm code

00:00:13,380 --> 00:00:16,170
Ranger almost everywhere except Twitter

00:00:14,759 --> 00:00:18,060
where the name was already taken so I'm

00:00:16,170 --> 00:00:20,189
canceling I work for Bloomberg on

00:00:18,060 --> 00:00:22,320
miscellaneous open-source ecosystems

00:00:20,189 --> 00:00:24,720
stuff but not really related to this

00:00:22,320 --> 00:00:26,460
talk to lead off this talk is going to

00:00:24,720 --> 00:00:27,990
be about secrets as they pertain to

00:00:26,460 --> 00:00:29,490
infrastructure so I'm not talking about

00:00:27,990 --> 00:00:31,080
password managers for your laptop and

00:00:29,490 --> 00:00:33,120
i'm not talking about web development if

00:00:31,080 --> 00:00:35,579
you force me to give an answer in one

00:00:33,120 --> 00:00:37,800
word respectively i use 1password and pv

00:00:35,579 --> 00:00:41,010
kdf to but this talk is not about that

00:00:37,800 --> 00:00:42,960
feel free to escape no hard feelings so

00:00:41,010 --> 00:00:44,430
what is a secret as it pertains to

00:00:42,960 --> 00:00:46,770
infrastructure you could treat all

00:00:44,430 --> 00:00:48,360
private information as secret like all

00:00:46,770 --> 00:00:50,460
user data but i would get ungainly

00:00:48,360 --> 00:00:51,329
really really quickly so to keep us

00:00:50,460 --> 00:00:53,969
focused we're going to look at three

00:00:51,329 --> 00:00:55,649
properties that define a secret as we'll

00:00:53,969 --> 00:00:57,629
talk about it today the first is it has

00:00:55,649 --> 00:00:59,489
to be small so again you could use

00:00:57,629 --> 00:01:02,129
everything in your database that is

00:00:59,489 --> 00:01:03,510
related to users is secret but no that's

00:01:02,129 --> 00:01:05,610
going to be really hard so instead we're

00:01:03,510 --> 00:01:06,960
going to talk about a passphrase or

00:01:05,610 --> 00:01:09,750
something that you could use via

00:01:06,960 --> 00:01:12,390
encryption so the actual secrets the

00:01:09,750 --> 00:01:14,880
part of that is very small next us be

00:01:12,390 --> 00:01:16,020
radioactive so when you're logging into

00:01:14,880 --> 00:01:18,180
something you've both a username and

00:01:16,020 --> 00:01:19,950
password we differentiate which one of

00:01:18,180 --> 00:01:22,140
those is a secret by which one other

00:01:19,950 --> 00:01:23,880
people are allowed to know the secret

00:01:22,140 --> 00:01:25,680
part is the password it's radioactive if

00:01:23,880 --> 00:01:28,380
an attacker knew that it would be bad

00:01:25,680 --> 00:01:30,509
that's cleared to a user ID which may be

00:01:28,380 --> 00:01:31,860
if it's you know a venda platform you

00:01:30,509 --> 00:01:33,570
don't really want them knowing your user

00:01:31,860 --> 00:01:35,490
ID but it's not radioactive in the same

00:01:33,570 --> 00:01:38,220
way that a password or key leak would be

00:01:35,490 --> 00:01:39,780
and third it has to be required usually

00:01:38,220 --> 00:01:41,310
we're talking about secrets it can't be

00:01:39,780 --> 00:01:42,960
something with the operation convention

00:01:41,310 --> 00:01:44,490
without so graceful degradation is going

00:01:42,960 --> 00:01:47,399
to be a secondary concern to everything

00:01:44,490 --> 00:01:48,600
else we're talking about four types of

00:01:47,399 --> 00:01:50,820
Secrets they're going to use kind of as

00:01:48,600 --> 00:01:52,560
guide in use cases the first our

00:01:50,820 --> 00:01:53,820
passwords when we talk about passwords

00:01:52,560 --> 00:01:55,560
here again we're not talking about

00:01:53,820 --> 00:01:57,750
humans we're talking about machine

00:01:55,560 --> 00:01:58,740
machine authentication but usually when

00:01:57,750 --> 00:01:59,880
you're talking about passwords its

00:01:58,740 --> 00:02:01,770
systems that were originally designed

00:01:59,880 --> 00:02:03,509
for a human so for example when you

00:02:01,770 --> 00:02:04,890
login to postgres are my sequel you give

00:02:03,509 --> 00:02:06,420
it easier and password that was

00:02:04,890 --> 00:02:08,250
originally designed for a human operator

00:02:06,420 --> 00:02:09,569
but a lot of times these days it's going

00:02:08,250 --> 00:02:10,170
to be a web application framework or

00:02:09,569 --> 00:02:12,090
something like

00:02:10,170 --> 00:02:14,400
so it's it's server the server instead

00:02:12,090 --> 00:02:16,170
of human to server in general passwords

00:02:14,400 --> 00:02:18,390
are going to be very small usually below

00:02:16,170 --> 00:02:21,720
1k and there could be some sequence or

00:02:18,390 --> 00:02:23,250
string of asking rights so other

00:02:21,720 --> 00:02:25,590
examples like I said sequel database

00:02:23,250 --> 00:02:28,890
passwords HTTP proxy passwords or Linux

00:02:25,590 --> 00:02:30,780
login passwords to contrast to passwords

00:02:28,890 --> 00:02:32,190
tokens are usually for API is built from

00:02:30,780 --> 00:02:33,450
the ground up understanding their

00:02:32,190 --> 00:02:35,760
supposed to be server to server machine

00:02:33,450 --> 00:02:37,560
to machine they also usually can't be

00:02:35,760 --> 00:02:39,209
hashed with passwords we can sometimes

00:02:37,560 --> 00:02:40,680
cheat and store some kind of

00:02:39,209 --> 00:02:42,180
irreversible hash or the password so

00:02:40,680 --> 00:02:44,310
we're not scoring it in plain text

00:02:42,180 --> 00:02:46,290
tokens usually have to actually be in

00:02:44,310 --> 00:02:47,989
plain text to them to function so some

00:02:46,290 --> 00:02:50,700
examples include API credentials

00:02:47,989 --> 00:02:52,730
credentials like page ready or Roth

00:02:50,700 --> 00:02:55,500
refresh and access tokens from users

00:02:52,730 --> 00:02:57,780
keys are usually larger than passwords

00:02:55,500 --> 00:03:01,200
and tokens they have sort of structure

00:02:57,780 --> 00:03:02,819
and semantics inside the file so they

00:03:01,200 --> 00:03:06,090
have headers they have new line stuff

00:03:02,819 --> 00:03:07,110
like that TLS keys SSH keys but other

00:03:06,090 --> 00:03:09,569
than that they're they're very similar

00:03:07,110 --> 00:03:11,130
and then finally this long tail of

00:03:09,569 --> 00:03:13,260
miscellaneous some of them likes a

00:03:11,130 --> 00:03:14,940
Kerberos machine tickets those kind of

00:03:13,260 --> 00:03:16,410
look like keys we can manage them

00:03:14,940 --> 00:03:18,060
basically like we do other kinds of key

00:03:16,410 --> 00:03:19,350
material except it will have to call k

00:03:18,060 --> 00:03:22,100
admin in a couple of places but it's

00:03:19,350 --> 00:03:25,320
mostly the same all there is like say

00:03:22,100 --> 00:03:27,630
HIPAA is the the health care privacy law

00:03:25,320 --> 00:03:30,030
in the United States things like that

00:03:27,630 --> 00:03:32,070
they require totally custom tooling or

00:03:30,030 --> 00:03:33,570
PCI DSS record files you have to be able

00:03:32,070 --> 00:03:35,730
to when if you take credit card

00:03:33,570 --> 00:03:37,380
information at store audit records those

00:03:35,730 --> 00:03:38,730
all require dedicated tools they are

00:03:37,380 --> 00:03:41,130
still secrets but we're not really going

00:03:38,730 --> 00:03:42,750
to talk about them today so we know what

00:03:41,130 --> 00:03:44,579
type of Secrets we're talking about now

00:03:42,750 --> 00:03:46,620
need to take their temperature hot

00:03:44,579 --> 00:03:48,239
secrets or online secrets are things

00:03:46,620 --> 00:03:50,070
used during the normal operations of an

00:03:48,239 --> 00:03:51,600
infrastructure so this means that a

00:03:50,070 --> 00:03:53,760
server has to be able to access and use

00:03:51,600 --> 00:03:55,680
that secret during normal operations

00:03:53,760 --> 00:03:56,940
without human intervention for example

00:03:55,680 --> 00:03:58,709
your web application needs to

00:03:56,940 --> 00:04:00,540
authenticate to a database so it needs

00:03:58,709 --> 00:04:02,130
the database password you could have a

00:04:00,540 --> 00:04:03,690
few one Operator sit there and type the

00:04:02,130 --> 00:04:05,220
password in every time web request came

00:04:03,690 --> 00:04:06,480
to you but your applications not going

00:04:05,220 --> 00:04:09,660
to get a whole lot done so we think of

00:04:06,480 --> 00:04:11,220
that as being an online or hot secret to

00:04:09,660 --> 00:04:12,930
compare this cold secrets are things

00:04:11,220 --> 00:04:15,120
that we want to keep stored and we want

00:04:12,930 --> 00:04:17,310
to keep safe but they can be put behind

00:04:15,120 --> 00:04:18,659
a lot more walls so for example AWS

00:04:17,310 --> 00:04:19,609
master passwords or revocation

00:04:18,659 --> 00:04:20,989
certificates

00:04:19,609 --> 00:04:22,939
these are things that we won't need very

00:04:20,989 --> 00:04:24,259
often and when we do they're going to be

00:04:22,939 --> 00:04:27,319
humans that are going to be doing the

00:04:24,259 --> 00:04:28,460
request this hot versus cold dichotomy

00:04:27,319 --> 00:04:30,409
is rarely a hundred and clear and

00:04:28,460 --> 00:04:31,789
practice most secrets and tools will

00:04:30,409 --> 00:04:33,620
fall somewhere in the middle so for

00:04:31,789 --> 00:04:35,659
example with a small web app cluster

00:04:33,620 --> 00:04:37,250
when you spin up a new box in that that

00:04:35,659 --> 00:04:39,199
requires human intervention to get the

00:04:37,250 --> 00:04:41,360
the initial passwords and whatnot onto

00:04:39,199 --> 00:04:42,889
the box but after that it's going to run

00:04:41,360 --> 00:04:46,819
off onymous Lee so it sort of starts

00:04:42,889 --> 00:04:48,349
cold and ends hot with online secrets or

00:04:46,819 --> 00:04:50,900
hot secrets there's another sub spectrum

00:04:48,349 --> 00:04:52,340
around how often it changes most

00:04:50,900 --> 00:04:54,050
traditional online secrets management

00:04:52,340 --> 00:04:56,270
systems are built around slow sequence

00:04:54,050 --> 00:04:58,099
once a secret is set it usually only

00:04:56,270 --> 00:05:00,199
changes either because you had some kind

00:04:58,099 --> 00:05:01,550
of emergency like a compromise or you

00:05:00,199 --> 00:05:03,139
have an industry-standard like pci-dss

00:05:01,550 --> 00:05:05,419
that forces you to rotate your

00:05:03,139 --> 00:05:07,159
encryption keys rotating a slow secret

00:05:05,419 --> 00:05:08,569
is usually a human initiated action and

00:05:07,159 --> 00:05:10,729
it's usually not trivial enough that you

00:05:08,569 --> 00:05:13,129
want to do it very often the pimple TLS

00:05:10,729 --> 00:05:14,840
keys well no they change we've all had

00:05:13,129 --> 00:05:16,669
to sit and renew TLS certificates plenty

00:05:14,840 --> 00:05:18,439
of times but day to day you think of

00:05:16,669 --> 00:05:20,000
them as being relatively static and how

00:05:18,439 --> 00:05:23,419
many people have been bitten by oops I

00:05:20,000 --> 00:05:25,009
forgot to renew a certificate so some

00:05:23,419 --> 00:05:27,020
newer platforms are bringing in this

00:05:25,009 --> 00:05:28,940
concept of fast secrets secrets which

00:05:27,020 --> 00:05:31,550
change in hours and minutes instead of

00:05:28,940 --> 00:05:33,710
days weeks or months so for example OCSP

00:05:31,550 --> 00:05:35,419
stapling is a technique in TLS that

00:05:33,710 --> 00:05:36,620
basically you regenerate a TLS

00:05:35,419 --> 00:05:38,960
certificate or a piece of a killer

00:05:36,620 --> 00:05:40,729
certificate every 15 minutes or Amazon

00:05:38,960 --> 00:05:42,979
ec2 role credentials which automatically

00:05:40,729 --> 00:05:45,229
rotate every six hours every time a

00:05:42,979 --> 00:05:46,699
secret is rotated it invalidates all of

00:05:45,229 --> 00:05:48,229
the previous versions of that secret

00:05:46,699 --> 00:05:50,300
usually which means that if they had

00:05:48,229 --> 00:05:52,129
leaked but it's not been detected yet it

00:05:50,300 --> 00:05:53,659
would render them useless this does

00:05:52,129 --> 00:05:55,069
however usually require more explicit

00:05:53,659 --> 00:05:56,689
coordination between the secrets

00:05:55,069 --> 00:05:57,830
consumer or the secrets manager because

00:05:56,689 --> 00:06:00,219
the consumer has to understand

00:05:57,830 --> 00:06:02,539
expiration timers and refresh mechanisms

00:06:00,219 --> 00:06:03,889
all right that's the properties of

00:06:02,539 --> 00:06:06,379
Secrets let's talk a little bit at the

00:06:03,889 --> 00:06:07,849
properties of secret planet systems the

00:06:06,379 --> 00:06:09,139
principle of least access or principle

00:06:07,849 --> 00:06:10,370
of least privilege as least as it

00:06:09,139 --> 00:06:11,930
pertains to computer science is

00:06:10,370 --> 00:06:15,259
generally attributed to Jerry Saltz earn

00:06:11,930 --> 00:06:17,180
in 1974 ACM paper this is mostly common

00:06:15,259 --> 00:06:19,219
sense but it is so often ignored that it

00:06:17,180 --> 00:06:20,870
bears strenuous repetition in short a

00:06:19,219 --> 00:06:22,789
service or tool should have access only

00:06:20,870 --> 00:06:24,419
to the secrets it requires and nothing

00:06:22,789 --> 00:06:26,560
else

00:06:24,419 --> 00:06:27,850
the quality of every sequence management

00:06:26,560 --> 00:06:29,229
platform should be judged on two main

00:06:27,850 --> 00:06:30,699
points the first is the principle of

00:06:29,229 --> 00:06:31,840
least privilege which you just saw and

00:06:30,699 --> 00:06:33,669
the second is how much audit information

00:06:31,840 --> 00:06:35,620
is recorded by the system so that when

00:06:33,669 --> 00:06:37,449
something goes wrong and it will you can

00:06:35,620 --> 00:06:39,039
sort out what happened other features

00:06:37,449 --> 00:06:40,810
are important and they'll make a break

00:06:39,039 --> 00:06:42,280
your use case for a specific tool but

00:06:40,810 --> 00:06:44,919
careful analysis of these two properties

00:06:42,280 --> 00:06:47,320
should always come first all right let's

00:06:44,919 --> 00:06:49,030
do it let's management secrets boom

00:06:47,320 --> 00:06:53,139
database password manager we're done we

00:06:49,030 --> 00:06:54,789
can all go home right so we've all done

00:06:53,139 --> 00:06:57,610
this we all knew it was a bad idea but

00:06:54,789 --> 00:06:58,870
they may not why it was a bad idea what

00:06:57,610 --> 00:07:01,449
we've done breaks both of our guiding

00:06:58,870 --> 00:07:04,120
principles the first is we've read

00:07:01,449 --> 00:07:05,830
reveka bleeped I'd the access

00:07:04,120 --> 00:07:07,570
permissions to having access to the code

00:07:05,830 --> 00:07:08,770
to getting the database passwords that

00:07:07,570 --> 00:07:10,180
means everywhere that we want to clone

00:07:08,770 --> 00:07:12,610
this code it's getting the database

00:07:10,180 --> 00:07:13,900
password over we like it or not and the

00:07:12,610 --> 00:07:17,320
second is we have very little access

00:07:13,900 --> 00:07:19,690
logging maybe we can control we maybe we

00:07:17,320 --> 00:07:22,300
can see who clones the repository if

00:07:19,690 --> 00:07:23,470
we're not using github but at best we

00:07:22,300 --> 00:07:25,120
get the clone records we have no idea

00:07:23,470 --> 00:07:26,380
who read this file because it happens

00:07:25,120 --> 00:07:29,380
locally and it's totally out of our

00:07:26,380 --> 00:07:31,780
sphere of control so now we have a

00:07:29,380 --> 00:07:33,430
strong gut feeling or maybe more than

00:07:31,780 --> 00:07:35,770
that that we want to improve how we

00:07:33,430 --> 00:07:37,240
handle this the next thing we figure out

00:07:35,770 --> 00:07:39,490
is what kind of threats that we want to

00:07:37,240 --> 00:07:40,960
protect against not every secrets going

00:07:39,490 --> 00:07:42,550
to be equally valuable but whatever

00:07:40,960 --> 00:07:44,560
system or tools you use need to be

00:07:42,550 --> 00:07:46,570
strong enough to withstand whatever your

00:07:44,560 --> 00:07:48,250
most valuable secrets are threat

00:07:46,570 --> 00:07:49,840
modeling is an examination of where

00:07:48,250 --> 00:07:52,180
attackers are most likely to strike and

00:07:49,840 --> 00:07:53,860
what a successful compromise of each

00:07:52,180 --> 00:07:56,590
particular attack surface would bring

00:07:53,860 --> 00:07:59,889
the table so these are the eight major

00:07:56,590 --> 00:08:01,330
levels that I use again i'm not talking

00:07:59,889 --> 00:08:02,620
about web application security because

00:08:01,330 --> 00:08:04,330
that's a whole nother talk and I'm sure

00:08:02,620 --> 00:08:05,919
there are several here for this this

00:08:04,330 --> 00:08:07,599
conference so we're just looking at

00:08:05,919 --> 00:08:09,880
specifically vulnerable points within

00:08:07,599 --> 00:08:13,389
infrastructure where an attack might

00:08:09,880 --> 00:08:15,130
have specific consequences so first up

00:08:13,389 --> 00:08:16,419
brute force attack if you have a server

00:08:15,130 --> 00:08:17,860
that's on the internet you see these

00:08:16,419 --> 00:08:19,419
non-stop parade of them it's been

00:08:17,860 --> 00:08:21,400
happening for decades it shows no signs

00:08:19,419 --> 00:08:22,900
of slowing on the plus side because it's

00:08:21,400 --> 00:08:24,340
been happening so long we have lots of

00:08:22,900 --> 00:08:26,710
tools and techniques to work around them

00:08:24,340 --> 00:08:29,620
the 3 R's that i use always rate limit

00:08:26,710 --> 00:08:30,849
access to use things so logins api calls

00:08:29,620 --> 00:08:32,060
whatever it is if it's a thing that

00:08:30,849 --> 00:08:34,680
could be for Strickland

00:08:32,060 --> 00:08:35,880
restrict access let's say we're talking

00:08:34,680 --> 00:08:37,079
about hypothetical web application

00:08:35,880 --> 00:08:39,570
cluster running in the cloud somewhere

00:08:37,079 --> 00:08:41,279
that database server doesn't need to be

00:08:39,570 --> 00:08:43,019
on the Internet don't put it on the

00:08:41,279 --> 00:08:45,480
Internet then there's no brute force

00:08:43,019 --> 00:08:47,490
attacks or at least way fewer and

00:08:45,480 --> 00:08:49,740
finally secret rotation if you've got

00:08:47,490 --> 00:08:52,290
let's say a relatively complex password

00:08:49,740 --> 00:08:54,329
it could take say ten years to brute

00:08:52,290 --> 00:08:57,029
force it if the secret rotates every 15

00:08:54,329 --> 00:08:58,920
minutes not a problem and finally you

00:08:57,029 --> 00:09:01,589
can use technologies that currently are

00:08:58,920 --> 00:09:03,449
beyond brute forcing like say hi bit

00:09:01,589 --> 00:09:05,550
count RSA keys or elliptic curve keys

00:09:03,449 --> 00:09:06,990
however remember that's always going to

00:09:05,550 --> 00:09:09,060
be a moving target someone could capture

00:09:06,990 --> 00:09:12,269
traffic or data now and possibly decrypt

00:09:09,060 --> 00:09:15,690
it in the future all right next attack

00:09:12,269 --> 00:09:17,310
surface a code bleak so this might be

00:09:15,690 --> 00:09:19,589
serious to the business but we're not

00:09:17,310 --> 00:09:21,600
really concerned with that for the

00:09:19,589 --> 00:09:23,370
infrastructure and security for the

00:09:21,600 --> 00:09:25,139
point of view code link shouldn't be a

00:09:23,370 --> 00:09:26,579
problem we've all heard security through

00:09:25,139 --> 00:09:29,279
obscurity is not really better than an

00:09:26,579 --> 00:09:30,870
endo security at all so no one hopefully

00:09:29,279 --> 00:09:32,399
is hard coding passwords all over their

00:09:30,870 --> 00:09:36,329
web apps this really shouldn't be a big

00:09:32,399 --> 00:09:38,160
deal backup leaks there was an Instagram

00:09:36,329 --> 00:09:40,290
hack a couple of years ago that was one

00:09:38,160 --> 00:09:41,970
of these they uploaded a backup file to

00:09:40,290 --> 00:09:43,440
s3 and probably forgot about it and

00:09:41,970 --> 00:09:45,600
never audited what was in that back up

00:09:43,440 --> 00:09:47,100
or what impact it could have this is

00:09:45,600 --> 00:09:48,630
usually a superset of a code week

00:09:47,100 --> 00:09:50,100
because the code is probably going to be

00:09:48,630 --> 00:09:51,690
part of the backup files just because

00:09:50,100 --> 00:09:53,010
we're all lazy but it's also going to

00:09:51,690 --> 00:09:55,319
include things like config files or

00:09:53,010 --> 00:09:56,910
database dumps this gets to be a little

00:09:55,319 --> 00:09:58,769
bit more hairy than a code leak because

00:09:56,910 --> 00:10:00,120
maybe you put your database password

00:09:58,769 --> 00:10:02,069
into that config file and you forgot to

00:10:00,120 --> 00:10:03,870
exclude it from the back up that's way

00:10:02,069 --> 00:10:05,459
or to work around this constantly audit

00:10:03,870 --> 00:10:07,079
your backup system understand what data

00:10:05,459 --> 00:10:08,819
is in there and make sure you're very

00:10:07,079 --> 00:10:11,310
careful to always exclude things if

00:10:08,819 --> 00:10:12,959
necessary you can also store things only

00:10:11,310 --> 00:10:14,310
in RAM that usually makes a lot harder

00:10:12,959 --> 00:10:18,959
to accidentally get it caught in a

00:10:14,310 --> 00:10:20,370
backup traversal attacks this as as far

00:10:18,959 --> 00:10:21,569
as infrastructure goes lumps together a

00:10:20,370 --> 00:10:23,850
whole bunch of different type of web

00:10:21,569 --> 00:10:25,800
application tax likes a directory

00:10:23,850 --> 00:10:27,750
traversal zor sequel injection all of

00:10:25,800 --> 00:10:29,310
those from an instructor point of view a

00:10:27,750 --> 00:10:30,810
traversal attack means it is a secret

00:10:29,310 --> 00:10:32,819
that the application has legitimate

00:10:30,810 --> 00:10:35,250
access to but the user isn't supposed to

00:10:32,819 --> 00:10:37,410
have access to the best defense here is

00:10:35,250 --> 00:10:39,000
don't give apps secrets they shouldn't

00:10:37,410 --> 00:10:40,889
have access to again principle of least

00:10:39,000 --> 00:10:42,810
privilege if the app doesn't have access

00:10:40,889 --> 00:10:43,750
the secret no amount of traversal attack

00:10:42,810 --> 00:10:45,820
is going to give it

00:10:43,750 --> 00:10:47,410
to access that secret also practice good

00:10:45,820 --> 00:10:48,850
web application security don't have

00:10:47,410 --> 00:10:51,760
sequel injection leaks all that good

00:10:48,850 --> 00:10:53,650
stuff as an aside a frequent traversal

00:10:51,760 --> 00:10:55,450
style attack takes advantage of storing

00:10:53,650 --> 00:10:57,730
environment variable or storing secrets

00:10:55,450 --> 00:10:59,830
and environment variables even the the

00:10:57,730 --> 00:11:01,620
12 factor manifesto from Heroku goes so

00:10:59,830 --> 00:11:04,510
far as to call this a best practice

00:11:01,620 --> 00:11:07,210
scoring keys and tokens in environment

00:11:04,510 --> 00:11:09,070
variables I am NOT a fan of this a lot

00:11:07,210 --> 00:11:11,500
of debugging tools things like century

00:11:09,070 --> 00:11:13,480
etc they automatically slurp up all

00:11:11,500 --> 00:11:15,340
environment variables and store them

00:11:13,480 --> 00:11:16,840
somewhere on to a logs or so that

00:11:15,340 --> 00:11:18,670
database password or whatever that you

00:11:16,840 --> 00:11:20,740
were so careful to protect is now

00:11:18,670 --> 00:11:23,050
chillin in plain text in a log file on

00:11:20,740 --> 00:11:24,910
your arrow show or somewhere you could

00:11:23,050 --> 00:11:27,370
do this carefully if you were very very

00:11:24,910 --> 00:11:30,550
precise about everything but here be

00:11:27,370 --> 00:11:32,650
dragons so once they can do code

00:11:30,550 --> 00:11:35,500
execution is on to the next the next

00:11:32,650 --> 00:11:37,120
level web app security no longer matters

00:11:35,500 --> 00:11:38,170
here once code execution is happening

00:11:37,120 --> 00:11:40,780
the only thing we have left are

00:11:38,170 --> 00:11:42,310
structural protections when you're

00:11:40,780 --> 00:11:44,620
talking about code execution we want to

00:11:42,310 --> 00:11:46,960
use things like privilege dropping so if

00:11:44,620 --> 00:11:48,970
you have a key file you can make it only

00:11:46,960 --> 00:11:50,589
readable by root your application starts

00:11:48,970 --> 00:11:52,450
as root reads the key file into memory

00:11:50,589 --> 00:11:54,610
and then drops privileges if the

00:11:52,450 --> 00:11:57,130
attacker gets code execution they still

00:11:54,610 --> 00:11:58,750
can't read that file so also you can use

00:11:57,130 --> 00:12:00,670
things like namespaces two routes

00:11:58,750 --> 00:12:02,589
containers all that good stuff that

00:12:00,670 --> 00:12:05,680
limits the permissions of the runtime of

00:12:02,589 --> 00:12:06,820
the application when Don's I pass

00:12:05,680 --> 00:12:08,920
through the gates of hell he notes the

00:12:06,820 --> 00:12:11,260
inscription abandon all hope ye who

00:12:08,920 --> 00:12:13,450
enter here root code execution

00:12:11,260 --> 00:12:15,550
vulnerability is approaching worst case

00:12:13,450 --> 00:12:17,530
scenario literally all we have left to

00:12:15,550 --> 00:12:18,880
structural protections if there was a

00:12:17,530 --> 00:12:21,070
secret on the box assume it is

00:12:18,880 --> 00:12:23,200
compromised here is where being able to

00:12:21,070 --> 00:12:25,510
tell what secrets a box ever accessed

00:12:23,200 --> 00:12:27,040
gets me very very useful because we want

00:12:25,510 --> 00:12:29,140
to know to rotate all of those very

00:12:27,040 --> 00:12:31,120
quickly many people will ignore this

00:12:29,140 --> 00:12:33,910
texture because is unlikely but it can

00:12:31,120 --> 00:12:35,680
happen so be careful another commonly

00:12:33,910 --> 00:12:37,480
ignored attack surface our laptop that's

00:12:35,680 --> 00:12:39,010
getting access to a developer

00:12:37,480 --> 00:12:41,280
workstation especially a lot of smaller

00:12:39,010 --> 00:12:44,170
companies gives you root on every server

00:12:41,280 --> 00:12:46,420
so that last slide times the number of

00:12:44,170 --> 00:12:47,980
servers you have fortunately laptops are

00:12:46,420 --> 00:12:49,720
usually used by humans instead of other

00:12:47,980 --> 00:12:51,520
computers so they can cheat a little bit

00:12:49,720 --> 00:12:52,329
humans are allowed to know a password

00:12:51,520 --> 00:12:53,739
they don't tell

00:12:52,329 --> 00:12:55,569
one else so you can use something like

00:12:53,739 --> 00:12:58,089
disk encryption to hopefully render this

00:12:55,569 --> 00:12:59,860
to be not as much of a problem and then

00:12:58,089 --> 00:13:01,149
finally the higher power attack surface

00:12:59,860 --> 00:13:03,069
this is where a lot of people draw the

00:13:01,149 --> 00:13:04,749
line either voluntarily or because their

00:13:03,069 --> 00:13:08,170
industry regulations don't allow telling

00:13:04,749 --> 00:13:09,459
the government to go to hell things like

00:13:08,170 --> 00:13:11,170
state-sponsored hacker groups or

00:13:09,459 --> 00:13:13,149
advanced persistent threats which is a

00:13:11,170 --> 00:13:14,980
code for China and North Korea they get

00:13:13,149 --> 00:13:16,420
increasingly difficult to handle here

00:13:14,980 --> 00:13:18,639
you'll have to ask how far you want to

00:13:16,420 --> 00:13:21,579
go how far you can go and what you can

00:13:18,639 --> 00:13:22,989
do to protect your systems and users all

00:13:21,579 --> 00:13:24,639
right so that's a whole bunch of theory

00:13:22,989 --> 00:13:26,259
let's talk about some actual tools to

00:13:24,639 --> 00:13:28,179
manage secrets so you're starting from

00:13:26,259 --> 00:13:30,220
the top again manually moving files

00:13:28,179 --> 00:13:31,959
around basically we did before sometimes

00:13:30,220 --> 00:13:33,489
you'll just put things into text files

00:13:31,959 --> 00:13:35,920
in the applications repo sometimes

00:13:33,489 --> 00:13:37,749
you'll have a repo called secrets or

00:13:35,920 --> 00:13:39,369
sometimes you'll just SCP files around

00:13:37,749 --> 00:13:42,279
like that's how a lot of people manage

00:13:39,369 --> 00:13:43,629
TLS keys you get a file from the CA you

00:13:42,279 --> 00:13:45,999
just SCP it to your three preserve

00:13:43,629 --> 00:13:47,170
version you forget about it but we

00:13:45,999 --> 00:13:49,989
already talked about why this is bad so

00:13:47,170 --> 00:13:51,910
let's move on all right next step a lot

00:13:49,989 --> 00:13:53,619
of people reach for is I want to encrypt

00:13:51,910 --> 00:13:56,559
my data because encryption makes it

00:13:53,619 --> 00:13:58,149
safer get crypt is the best of these but

00:13:56,559 --> 00:14:00,249
there's a whole lot of tools that do get

00:13:58,149 --> 00:14:02,110
encryption but they all come with major

00:14:00,249 --> 00:14:03,699
downsides we still have no real least

00:14:02,110 --> 00:14:06,009
privilege because again we just have

00:14:03,699 --> 00:14:07,600
code sort of chilling and get maybe some

00:14:06,009 --> 00:14:09,399
of the tools can get a little closer but

00:14:07,600 --> 00:14:11,410
audit logs are really not going to be a

00:14:09,399 --> 00:14:13,540
thing because everything is distributed

00:14:11,410 --> 00:14:16,509
so the actual file reads are happening

00:14:13,540 --> 00:14:18,129
on every individual server also most of

00:14:16,509 --> 00:14:19,929
them are opt-in system so you have to

00:14:18,129 --> 00:14:22,389
explicitly mark which files to encrypt

00:14:19,929 --> 00:14:24,639
beginning if you forget to mark a new

00:14:22,389 --> 00:14:26,410
file as being encrypted you will push it

00:14:24,639 --> 00:14:27,999
in plain text and may never realize and

00:14:26,410 --> 00:14:30,749
then you get to experience the joy that

00:14:27,999 --> 00:14:32,690
is expunging files from you get history

00:14:30,749 --> 00:14:34,550
all right

00:14:32,690 --> 00:14:37,250
before we move on let's talk about

00:14:34,550 --> 00:14:38,600
different types of encryption this is

00:14:37,250 --> 00:14:40,880
gonna be just a quick primer symmetric

00:14:38,600 --> 00:14:43,730
encryption on our workstation we have a

00:14:40,880 --> 00:14:46,090
secret we want to send this somewhere

00:14:43,730 --> 00:14:48,860
else safely so we generate a random key

00:14:46,090 --> 00:14:51,320
we use that key to make an encrypted

00:14:48,860 --> 00:14:53,360
blob we somehow copy that key to a

00:14:51,320 --> 00:14:55,550
target server we somehow copy the

00:14:53,360 --> 00:14:57,440
encrypted blob to a target server and we

00:14:55,550 --> 00:14:59,660
use the key to decrypt the blob when we

00:14:57,440 --> 00:15:01,550
get the original secret back to contrast

00:14:59,660 --> 00:15:04,040
this asymmetric cryptography we have a

00:15:01,550 --> 00:15:06,440
secret we generate a public/private key

00:15:04,040 --> 00:15:08,450
pair on the server we copy the public

00:15:06,440 --> 00:15:10,610
key up to our workstation or retrieve it

00:15:08,450 --> 00:15:12,980
via some kind of service we generate an

00:15:10,610 --> 00:15:14,840
encrypted blob using that public key we

00:15:12,980 --> 00:15:16,790
copy it down to the machine we use the

00:15:14,840 --> 00:15:20,150
private key from the key pair to decrypt

00:15:16,790 --> 00:15:21,320
the blob what this means symmetric key

00:15:20,150 --> 00:15:24,080
systems means that you have to

00:15:21,320 --> 00:15:26,270
distribute that single stared blue key

00:15:24,080 --> 00:15:27,890
to every target machine whereas a

00:15:26,270 --> 00:15:30,230
symmetric keys you generate a separate

00:15:27,890 --> 00:15:34,310
key pair for you just keep those roughly

00:15:30,230 --> 00:15:35,990
in mind all right cluster managers this

00:15:34,310 --> 00:15:39,010
is going to be sort of one step past get

00:15:35,990 --> 00:15:40,820
I there's not really a lot of

00:15:39,010 --> 00:15:42,590
commonalities between them but I lump

00:15:40,820 --> 00:15:45,110
them together anyway zookeeper console

00:15:42,590 --> 00:15:46,490
at CD they all do have a CL systems and

00:15:45,110 --> 00:15:48,290
you can use those to implement principal

00:15:46,490 --> 00:15:51,200
at least access console Annette cities

00:15:48,290 --> 00:15:52,250
is okay zookeeper acl's I'm not sure any

00:15:51,200 --> 00:15:54,560
person on the planet has ever

00:15:52,250 --> 00:15:56,240
implemented correctly so i probably

00:15:54,560 --> 00:15:59,900
wouldn't try this but if you really want

00:15:56,240 --> 00:16:01,940
to go for it they do have all of the the

00:15:59,900 --> 00:16:03,620
tech in place to implement decent

00:16:01,940 --> 00:16:06,470
secrets management but it's very very

00:16:03,620 --> 00:16:07,970
difficult i'm very active in the chef

00:16:06,470 --> 00:16:10,250
world so i see a lot of people trying

00:16:07,970 --> 00:16:12,380
this it says encrypted on it just like

00:16:10,250 --> 00:16:14,630
we saw get crypt get encryption makes us

00:16:12,380 --> 00:16:17,210
feel warm and fuzzy again this is going

00:16:14,630 --> 00:16:19,550
to be a symmetric system so that means

00:16:17,210 --> 00:16:21,890
that we have a new secret all of a

00:16:19,550 --> 00:16:23,420
sudden we're going to try to move that

00:16:21,890 --> 00:16:25,580
key around in the same way that we do

00:16:23,420 --> 00:16:27,110
all of our other secrets and now we have

00:16:25,580 --> 00:16:28,430
just moved the public so when I say

00:16:27,110 --> 00:16:30,050
Turtles all the way down what I mean is

00:16:28,430 --> 00:16:32,360
that most of these symmetric tools and

00:16:30,050 --> 00:16:34,880
there'll be a whole bunch of them the

00:16:32,360 --> 00:16:37,970
the key used to manage all of the other

00:16:34,880 --> 00:16:39,589
secrets is itself a secret so you're not

00:16:37,970 --> 00:16:41,570
really solving the problem so much is

00:16:39,589 --> 00:16:43,709
going down a level of recursion

00:16:41,570 --> 00:16:45,180
ansible vault is similar to chef

00:16:43,709 --> 00:16:46,860
encrypted data bags but it takes

00:16:45,180 --> 00:16:49,079
advantage of ansibles push-based nature

00:16:46,860 --> 00:16:50,699
so instead of needing the decryption key

00:16:49,079 --> 00:16:52,290
on all of the target machines you only

00:16:50,699 --> 00:16:54,420
need two on the workstation it's a

00:16:52,290 --> 00:16:56,100
little better but still same fundamental

00:16:54,420 --> 00:17:00,480
problem how do you get that key on the

00:16:56,100 --> 00:17:02,310
workstation Here I am o is the closest

00:17:00,480 --> 00:17:04,350
analogue to occur today demands will

00:17:02,310 --> 00:17:06,299
vault in the puppet world the difference

00:17:04,350 --> 00:17:07,799
is that the in puppet it does all of the

00:17:06,299 --> 00:17:09,569
decryption on the puppet master instead

00:17:07,799 --> 00:17:11,880
of on the target servers what that means

00:17:09,569 --> 00:17:13,890
is the puppet master can see all of the

00:17:11,880 --> 00:17:16,049
secrets for every machine and we tell it

00:17:13,890 --> 00:17:18,360
only give these to certain machines

00:17:16,049 --> 00:17:20,490
according to this policy we call this a

00:17:18,360 --> 00:17:21,990
trusted third party system that means

00:17:20,490 --> 00:17:23,520
that the trusted third party in this

00:17:21,990 --> 00:17:25,350
case puppet master has access to the

00:17:23,520 --> 00:17:27,449
universe and we are having faith in its

00:17:25,350 --> 00:17:28,919
internal access controls to only give

00:17:27,449 --> 00:17:31,740
things out according to policy we've

00:17:28,919 --> 00:17:33,600
written puppet master I can say is fine

00:17:31,740 --> 00:17:35,309
and does this properly as far as i know

00:17:33,600 --> 00:17:37,110
but any time you're evaluating this kind

00:17:35,309 --> 00:17:39,720
of trusted third party system check your

00:17:37,110 --> 00:17:41,640
faith in its access controls another

00:17:39,720 --> 00:17:43,650
chef specific tool is chef vol 2 no

00:17:41,640 --> 00:17:45,480
relation ansible vault this takes

00:17:43,650 --> 00:17:47,640
advantage the fact that chef uses RSA

00:17:45,480 --> 00:17:49,620
key pairs for API authentication to

00:17:47,640 --> 00:17:51,929
build a key distribution system for the

00:17:49,620 --> 00:17:54,870
symmetric keys it's still kind of turtle

00:17:51,929 --> 00:17:56,490
ego those he pair that the the RSA key

00:17:54,870 --> 00:17:58,049
pair is used for chef authentication are

00:17:56,490 --> 00:18:01,200
themselves not really generally very

00:17:58,049 --> 00:18:02,850
well managed you can Duty rotation and

00:18:01,200 --> 00:18:04,799
key management on those but very we will

00:18:02,850 --> 00:18:06,630
do so if you're going to go this route

00:18:04,799 --> 00:18:07,919
just be aware you're probably gonna have

00:18:06,630 --> 00:18:11,610
to go write a whole bunch of extra

00:18:07,919 --> 00:18:13,590
tooling to do it safely alright another

00:18:11,610 --> 00:18:16,320
aside so I mentioned before about

00:18:13,590 --> 00:18:19,350
trusted third-party systems that

00:18:16,320 --> 00:18:21,030
contrasts with pre encryption systems in

00:18:19,350 --> 00:18:22,799
a pre encryption system looks kind of

00:18:21,030 --> 00:18:26,790
like this symmetric system we had before

00:18:22,799 --> 00:18:28,440
we have a secret we have a key we make

00:18:26,790 --> 00:18:30,179
an encrypted blob out of the secret we

00:18:28,440 --> 00:18:32,370
copy the key down to only the machines

00:18:30,179 --> 00:18:34,169
that should have access we copy the

00:18:32,370 --> 00:18:35,700
critical blob down usually this involves

00:18:34,169 --> 00:18:37,260
putting it on some kind of storage

00:18:35,700 --> 00:18:39,840
system where everybody can download it

00:18:37,260 --> 00:18:41,490
if they want but then only the machines

00:18:39,840 --> 00:18:43,890
that have the key are able to decrypt it

00:18:41,490 --> 00:18:46,260
so what we're doing is basically doing

00:18:43,890 --> 00:18:48,750
all of the access control work ahead of

00:18:46,260 --> 00:18:50,400
time based on who we send the key once

00:18:48,750 --> 00:18:52,140
the key is on the machine we

00:18:50,400 --> 00:18:53,910
new encrypted blocks as often as we want

00:18:52,140 --> 00:18:56,460
but we have to do this initial work

00:18:53,910 --> 00:18:58,500
ahead of time to get keys on machines to

00:18:56,460 --> 00:19:00,450
deal with the encryption to compare this

00:18:58,500 --> 00:19:02,700
for the trusted third party system we've

00:19:00,450 --> 00:19:05,490
got four different key pairs and a

00:19:02,700 --> 00:19:06,900
secret we send the secret over the

00:19:05,490 --> 00:19:08,460
trusted third party system notice I

00:19:06,900 --> 00:19:10,770
never encrypted it there's no encryption

00:19:08,460 --> 00:19:12,960
here it's going to probably be using TLS

00:19:10,770 --> 00:19:16,260
between all of the things but at rest

00:19:12,960 --> 00:19:17,850
it's effectively unencrypted the trusted

00:19:16,260 --> 00:19:19,650
third party system has access to it in

00:19:17,850 --> 00:19:21,450
plain text all the time but we attached

00:19:19,650 --> 00:19:23,820
a limb policy saying only send this to B

00:19:21,450 --> 00:19:27,390
and C so then only B and C can access

00:19:23,820 --> 00:19:29,370
this and DD camp so again just a third

00:19:27,390 --> 00:19:31,590
party system has acted to all of the

00:19:29,370 --> 00:19:33,060
secrets in effective plain text even if

00:19:31,590 --> 00:19:35,040
they are encrypted at rest or whatever

00:19:33,060 --> 00:19:36,870
but effectively can get access to all of

00:19:35,040 --> 00:19:40,250
your secrets and we just give it a

00:19:36,870 --> 00:19:42,210
policy saying where it should go so

00:19:40,250 --> 00:19:43,830
bleeding into a couple more of these

00:19:42,210 --> 00:19:45,240
tresses their party systems hash report

00:19:43,830 --> 00:19:46,770
vault is probably one of the newer

00:19:45,240 --> 00:19:47,940
things that I mentioning but it's

00:19:46,770 --> 00:19:49,800
already making waves in the secrets

00:19:47,940 --> 00:19:51,450
world it's a dedicated secrets

00:19:49,800 --> 00:19:53,670
management platform so it supports all

00:19:51,450 --> 00:19:55,770
of the features you'd expect it to audit

00:19:53,670 --> 00:19:57,930
trails granular acl's modular storage

00:19:55,770 --> 00:19:59,930
backends and that's a breed auto

00:19:57,930 --> 00:20:02,130
rotation system for fast secrets

00:19:59,930 --> 00:20:04,290
slightly older but still very solid as

00:20:02,130 --> 00:20:06,750
squares key wins it's got a more limited

00:20:04,290 --> 00:20:08,160
data model than hash core vault in some

00:20:06,750 --> 00:20:09,870
of the other things we've seen but that

00:20:08,160 --> 00:20:12,900
also means that it's battle-tested to a

00:20:09,870 --> 00:20:15,060
much higher degree keep ultimate q is FS

00:20:12,900 --> 00:20:16,470
in a moment but he was excels at

00:20:15,060 --> 00:20:18,690
managing key type secrets and other

00:20:16,470 --> 00:20:19,950
whole files it can be used for passwords

00:20:18,690 --> 00:20:24,810
and tokens but that's not really what

00:20:19,950 --> 00:20:26,670
it's for four people on AWS a simple

00:20:24,810 --> 00:20:29,310
starting point is to make a private s3

00:20:26,670 --> 00:20:30,780
bucket and use IM policies I've got some

00:20:29,310 --> 00:20:32,580
stuff online if you're interested in

00:20:30,780 --> 00:20:34,500
this but this is sort of the the

00:20:32,580 --> 00:20:36,990
simplest version if you are one hundred

00:20:34,500 --> 00:20:38,760
percent all AWS all the time is to use

00:20:36,990 --> 00:20:39,900
IM roles and I am policies for

00:20:38,760 --> 00:20:42,450
controlling this kind of stuff along

00:20:39,900 --> 00:20:44,100
with s3 or dynamo before I talk about

00:20:42,450 --> 00:20:46,650
the next couple of these I need to

00:20:44,100 --> 00:20:48,270
mention amazon KMS amazon KMS is not in

00:20:46,650 --> 00:20:49,350
itself a secrets management tool it

00:20:48,270 --> 00:20:51,510
would be better described as a key

00:20:49,350 --> 00:20:52,890
escrow platform so all those times where

00:20:51,510 --> 00:20:55,350
I said to generate a key and make an

00:20:52,890 --> 00:20:57,870
encrypted blob it handles that part so

00:20:55,350 --> 00:20:59,640
you create a key lives inside KMS and

00:20:57,870 --> 00:21:01,140
you can send data to it to be encrypted

00:20:59,640 --> 00:21:02,820
you can send eight it to it

00:21:01,140 --> 00:21:05,490
scripted but doesn't actually manage the

00:21:02,820 --> 00:21:06,750
storage we can tie that in with some

00:21:05,490 --> 00:21:08,250
other tools though to give a more

00:21:06,750 --> 00:21:10,800
complete solution so sneaker is a

00:21:08,250 --> 00:21:12,480
command line tool from Kota Hale it uses

00:21:10,800 --> 00:21:14,900
KMS for handling encryption and

00:21:12,480 --> 00:21:17,940
decryption and s3 for managing storage

00:21:14,900 --> 00:21:20,010
again remember just like with the s3 and

00:21:17,940 --> 00:21:22,440
I am stuff this is all based around the

00:21:20,010 --> 00:21:25,770
AWS ecosystems you have to be willing to

00:21:22,440 --> 00:21:26,940
be tied AWS forever but if that's not a

00:21:25,770 --> 00:21:28,380
problem for you and found a problem for

00:21:26,940 --> 00:21:30,480
a lot of people this kind of stuff is

00:21:28,380 --> 00:21:32,760
cool confidant from lift is another

00:21:30,480 --> 00:21:34,680
solution on top of KS in this case it

00:21:32,760 --> 00:21:35,970
said of these three uses DynamoDB for

00:21:34,680 --> 00:21:38,490
the storage instead of being a

00:21:35,970 --> 00:21:39,960
command-line tool it's a REST API it's

00:21:38,490 --> 00:21:42,060
got a nice little web interface it's got

00:21:39,960 --> 00:21:44,510
a burning system for seeing the history

00:21:42,060 --> 00:21:46,620
of your secrets all that kind of stuff

00:21:44,510 --> 00:21:50,130
going back to the command line tools

00:21:46,620 --> 00:21:51,210
true so is similar to sneaker but

00:21:50,130 --> 00:21:53,580
instead of using can s for the

00:21:51,210 --> 00:21:55,110
encryption it uses gpg and it uses a

00:21:53,580 --> 00:21:58,170
modular storage back end but usually

00:21:55,110 --> 00:22:00,060
you're going to be using s3 this means

00:21:58,170 --> 00:22:01,890
that the encryption is not tied to a

00:22:00,060 --> 00:22:03,960
video s and his battle test into this

00:22:01,890 --> 00:22:06,300
gpg but it also can be a little bit

00:22:03,960 --> 00:22:07,770
difficult to work with gpg is not well

00:22:06,300 --> 00:22:09,300
known for being a user-friendly and it

00:22:07,770 --> 00:22:10,830
does have some provisions for automated

00:22:09,300 --> 00:22:13,080
key management and distribution but not

00:22:10,830 --> 00:22:14,640
a whole lot of them so if you're going

00:22:13,080 --> 00:22:17,400
to be doing large-scale key distribution

00:22:14,640 --> 00:22:20,370
of gpg expects to feel a little pain

00:22:17,400 --> 00:22:22,260
there sop's from mozilla combines the

00:22:20,370 --> 00:22:25,440
problems the last few tools so it uses

00:22:22,260 --> 00:22:27,000
KMS or gpg or both but it doesn't handle

00:22:25,440 --> 00:22:29,190
storage management's if you've got a

00:22:27,000 --> 00:22:30,540
hybrid AWS nine eight of us

00:22:29,190 --> 00:22:33,510
infrastructure however this could be

00:22:30,540 --> 00:22:34,860
cool to look at Red October is from

00:22:33,510 --> 00:22:36,660
cloudflare it's very very different than

00:22:34,860 --> 00:22:39,210
the last couple I mentioned it's built

00:22:36,660 --> 00:22:40,950
from the ground up for cold secrets so I

00:22:39,210 --> 00:22:41,940
remember the old movies when you want to

00:22:40,950 --> 00:22:43,350
launch a nuclear missile you have to

00:22:41,940 --> 00:22:45,720
have two people turning keys at the same

00:22:43,350 --> 00:22:47,880
time it's like that but for secrets so

00:22:45,720 --> 00:22:49,590
you can set up secrets as being 2 of 3

00:22:47,880 --> 00:22:51,930
or 3 of 5 where you need a certain

00:22:49,590 --> 00:22:54,210
number of key holders to coordinate to

00:22:51,930 --> 00:22:56,220
unlock a high-value secret for stuff

00:22:54,210 --> 00:22:58,110
like hey we have master passwords this

00:22:56,220 --> 00:22:59,850
can be very very useful you could use it

00:22:58,110 --> 00:23:02,050
for hot secrets by just saying secret is

00:22:59,850 --> 00:23:04,240
like 105 so anyone

00:23:02,050 --> 00:23:06,250
thing can access it but that's not

00:23:04,240 --> 00:23:07,750
really the point mentioned for

00:23:06,250 --> 00:23:09,940
completeness barbican was supposed to be

00:23:07,750 --> 00:23:12,310
the OpenStack answer for amazon KMS but

00:23:09,940 --> 00:23:13,630
it's not happening sorry i mentioned

00:23:12,310 --> 00:23:15,520
conjurer specifically because it's the

00:23:13,630 --> 00:23:17,760
one I see most often but this applies to

00:23:15,520 --> 00:23:21,880
all closed source security products

00:23:17,760 --> 00:23:24,730
psychotic or whatever arcserve all of

00:23:21,880 --> 00:23:26,350
them with things like KMS or other cloud

00:23:24,730 --> 00:23:27,550
specific tool you have to somewhat take

00:23:26,350 --> 00:23:28,930
their word for it because they don't

00:23:27,550 --> 00:23:30,160
really source code and that's just the

00:23:28,930 --> 00:23:32,650
way the world works but if you're going

00:23:30,160 --> 00:23:36,220
to run it yourself maybe demand a little

00:23:32,650 --> 00:23:38,200
bit more of a standard there in general

00:23:36,220 --> 00:23:39,880
if you can't prove somebody's security

00:23:38,200 --> 00:23:42,910
guarantees assume that we false until

00:23:39,880 --> 00:23:45,820
shown otherwise and finally the biggest

00:23:42,910 --> 00:23:47,410
gun in this context h SMS are little

00:23:45,820 --> 00:23:48,820
bits of hardware that exists to hold a

00:23:47,410 --> 00:23:50,560
key such that the key cannot be

00:23:48,820 --> 00:23:52,320
extracted without disassembling the chip

00:23:50,560 --> 00:23:55,210
in his panic with an electron microscope

00:23:52,320 --> 00:23:57,850
most modern physical servers come with a

00:23:55,210 --> 00:23:59,740
little tiny version of NHSN called a TPM

00:23:57,850 --> 00:24:01,870
or trusted platform module does a whole

00:23:59,740 --> 00:24:03,400
bunch of stuff other than what HSN's do

00:24:01,870 --> 00:24:06,430
but it does have a key in it but

00:24:03,400 --> 00:24:07,630
otherwise h SMS are big bucks so if you

00:24:06,430 --> 00:24:08,950
want to go down this route they are

00:24:07,630 --> 00:24:10,480
phenomenally expensive but also

00:24:08,950 --> 00:24:12,460
phenomenally unbreakable if used

00:24:10,480 --> 00:24:15,190
properly there's tons of them they are

00:24:12,460 --> 00:24:16,630
widely varying if you want to go down

00:24:15,190 --> 00:24:20,290
this route expect to hire expensive

00:24:16,630 --> 00:24:22,900
consultants also alright so around this

00:24:20,290 --> 00:24:24,940
we keep dancing around the hard problem

00:24:22,900 --> 00:24:26,260
of Secrets management deep down any

00:24:24,940 --> 00:24:27,730
secrets management system needs to

00:24:26,260 --> 00:24:29,740
establish an identity relationship

00:24:27,730 --> 00:24:31,330
between the thing that wants secrets and

00:24:29,740 --> 00:24:32,590
the thing that has them so generally

00:24:31,330 --> 00:24:34,510
referred to a secure introduction

00:24:32,590 --> 00:24:35,980
generally this initial trust

00:24:34,510 --> 00:24:39,010
relationship in a lot of our systems

00:24:35,980 --> 00:24:41,410
boils down to I'm going to ssh or win

00:24:39,010 --> 00:24:43,030
our end to Windows machine to an IP that

00:24:41,410 --> 00:24:45,670
i got from somewhere that I trust and

00:24:43,030 --> 00:24:47,380
whatever answers that ssh connection I'm

00:24:45,670 --> 00:24:49,360
going to assume that it is who it says

00:24:47,380 --> 00:24:51,880
it is because I have no real way to

00:24:49,360 --> 00:24:54,190
verify it some clouds have better

00:24:51,880 --> 00:24:56,410
mechanisms so for example on ec2 there's

00:24:54,190 --> 00:24:57,850
the instance identity document but in a

00:24:56,410 --> 00:25:01,150
lot of cases you can't do better than

00:24:57,850 --> 00:25:02,410
just trust the network as a corollary if

00:25:01,150 --> 00:25:04,780
you take it as a given that you need to

00:25:02,410 --> 00:25:06,490
build this concept of identity or the

00:25:04,780 --> 00:25:07,930
secure introduction system in a lot of

00:25:06,490 --> 00:25:09,820
cases you can skip secrets management

00:25:07,930 --> 00:25:11,440
altogether and you can just use

00:25:09,820 --> 00:25:12,880
pls client certificate authentication so

00:25:11,440 --> 00:25:14,980
like my sequel and postgres directly

00:25:12,880 --> 00:25:17,680
support TLS client certificates and you

00:25:14,980 --> 00:25:19,540
can skip having a password at all this

00:25:17,680 --> 00:25:21,370
does mean you have to manage pki and

00:25:19,540 --> 00:25:22,780
public keys do you need to be handled

00:25:21,370 --> 00:25:24,280
very carefully Cheviots need to be

00:25:22,780 --> 00:25:25,990
handled carefully but a public key no

00:25:24,280 --> 00:25:28,240
significant are not radioactive in the

00:25:25,990 --> 00:25:29,500
same way that secret is all right

00:25:28,240 --> 00:25:32,710
quickly talking about integration we're

00:25:29,500 --> 00:25:34,630
running low on time easiest way in a lot

00:25:32,710 --> 00:25:37,090
of cases is to read directly from one of

00:25:34,630 --> 00:25:40,000
these api services in your code so HVAC

00:25:37,090 --> 00:25:42,250
four vaults or but oak or 4 kms if

00:25:40,000 --> 00:25:44,590
you're writing say django app use hvac

00:25:42,250 --> 00:25:47,470
in your settings high and read stuff

00:25:44,590 --> 00:25:49,150
directly as you need it next up is

00:25:47,470 --> 00:25:50,740
config management like i said i use chef

00:25:49,150 --> 00:25:52,750
but this applies to basically all of

00:25:50,740 --> 00:25:54,490
them things that are command-line tools

00:25:52,750 --> 00:25:57,340
you'll very often have them be driven

00:25:54,490 --> 00:25:59,500
through your config management layer q

00:25:57,340 --> 00:26:01,450
is FS is relatively unique to Q is it's

00:25:59,500 --> 00:26:04,240
a fused file system driver that acts as

00:26:01,450 --> 00:26:06,190
a client for Q is REST API so this means

00:26:04,240 --> 00:26:08,320
that you can use it with external tools

00:26:06,190 --> 00:26:11,320
like say engine X you would tell it to

00:26:08,320 --> 00:26:13,960
load its SSR GLS private key out of a

00:26:11,320 --> 00:26:15,700
path from the usfs file system so you

00:26:13,960 --> 00:26:18,010
don't need to modify engine X at all and

00:26:15,700 --> 00:26:21,030
it'll use safe happy in memory only

00:26:18,010 --> 00:26:22,840
never buffer to disk key management

00:26:21,030 --> 00:26:24,490
console templates was originally

00:26:22,840 --> 00:26:26,200
designed for hash corpse consoles or

00:26:24,490 --> 00:26:29,890
discovery tool but it's been extended to

00:26:26,200 --> 00:26:31,000
work with hashcode vault as well you can

00:26:29,890 --> 00:26:32,410
use this in conjunction with your

00:26:31,000 --> 00:26:35,380
configure management system if you want

00:26:32,410 --> 00:26:37,960
to run at a higher rate of change than

00:26:35,380 --> 00:26:40,150
your CM tool does so you could have your

00:26:37,960 --> 00:26:42,610
chef or puppet or ansible running every

00:26:40,150 --> 00:26:45,000
hour and console templates can handle

00:26:42,610 --> 00:26:47,410
refreshing at 15-minute intervals and

00:26:45,000 --> 00:26:48,820
console similar but instead of putting

00:26:47,410 --> 00:26:50,470
into templates it puts stuff into

00:26:48,820 --> 00:26:51,910
environment variables remember i said i

00:26:50,470 --> 00:26:53,830
don't like this because of logging and

00:26:51,910 --> 00:26:56,200
exception handlers but it's there if you

00:26:53,830 --> 00:26:58,060
need it and some is similar but it has

00:26:56,200 --> 00:27:00,130
pluggable providers it was originally

00:26:58,060 --> 00:27:01,390
written by cron jure but this is open

00:27:00,130 --> 00:27:04,180
source so I trusted a lot more than

00:27:01,390 --> 00:27:05,470
their commercial offerings but again

00:27:04,180 --> 00:27:08,740
environment variables here be dragons

00:27:05,470 --> 00:27:10,000
all that stuff so to summarize check

00:27:08,740 --> 00:27:11,470
your privilege in your audit trail and

00:27:10,000 --> 00:27:13,300
whatever tool you're using take your

00:27:11,470 --> 00:27:14,590
types and temperatures of Secrets think

00:27:13,300 --> 00:27:15,550
about the attack surfaces and what

00:27:14,590 --> 00:27:17,590
you're going to do if they are

00:27:15,550 --> 00:27:20,529
successfully attacked and

00:27:17,590 --> 00:27:26,289
disaster plan thank you very much and we

00:27:20,529 --> 00:27:31,179
don't really question thank you very

00:27:26,289 --> 00:27:33,549
much so in principle we don't have any

00:27:31,179 --> 00:27:35,289
time but I think if there are some very

00:27:33,549 --> 00:27:37,779
important questions just come find one

00:27:35,289 --> 00:27:39,250
or two or find him as their questions

00:27:37,779 --> 00:27:42,600
just come up just I'll stand here just

00:27:39,250 --> 00:27:42,600

YouTube URL: https://www.youtube.com/watch?v=unFMJlKGh98


