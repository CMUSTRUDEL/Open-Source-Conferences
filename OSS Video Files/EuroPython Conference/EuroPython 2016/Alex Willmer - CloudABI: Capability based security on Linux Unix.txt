Title: Alex Willmer - CloudABI: Capability based security on Linux Unix
Publication date: 2016-07-29
Playlist: EuroPython 2016
Description: 
	Alex Willmer - CloudABI: Capability based security on Linux/Unix
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(https://ep2016.europython.eu//conference/talks/capability-based-security-on-unix-with-cloudabi)

Take POSIX, add capability-based security, then remove anything that
conflicts. The result is CloudABI, available for BSD, Linux, OSX et
al.

A CloudABI process is incapable of any action that has a global impact
It can only affect the file descriptors you provide. As a result even
unknown binaries can safely be executed - without the need for
containers, virtual machines, or other sandboxes.

This talk will introduce CloudABI, how to use it with Python, the
benefits, and the trade-offs.

-----

[CloudABI](https://nuxi.nl/) is a new POSIX based computing environment that brings [capability-based security](https://en.wikipedia.org/wiki/Capability-based_security) to BSD, Linux, OSX et al.

Unlike traditional Unix, if a CloudABI process goes rogue it _cannot_
execute random binaries, or read arbitrary files. This is achieved by
removing `open()` & any other API able to acquire global resources.
Instead a CloudABI process must be granted _capabilities_ to specific
resources (e.g. directories, files, sockets) in the form of file
descriptors. If a process only has a descriptor for `/var/www` then
it's _incapable_ of affecting any file or folder outside that
directory.

This talk will

 - Review the security & reusability problems of Linux & Unix processes
 - Introduce capability-based security
 - Summarize the design of CloudABI - its benefits & trade-offs
 - Demonstrate how to write Python software for CloudABI & run it
 - Point out the pitfalls & gotchas to be aware of
 - Discuss the current & future status of CloudABI

CloudABI began life on FreeBSD. It also runs DragonFly BSD, NetBSD,
PC-BSD, Arch Linux, Debian, Ubuntu, & OS X. The API & ABI are kernel
agnostic - a CloudABI binary can run on any supported kernel. The
design is evolved from
[Capsicum](https://www.cl.cam.ac.uk/research/security/capsicum/), a
library that allows processes to drop access to undesired syscalls at
runtime. CloudABI applies this at build time to make testing & lock-
down easier.
Captions: 
	00:00:00,000 --> 00:00:04,740
is cloud a bi talk just make sure you're

00:00:03,030 --> 00:00:08,580
the right ones

00:00:04,740 --> 00:00:23,279
yeah so we have out swimmer speaking to

00:00:08,580 --> 00:00:24,900
us about the security some greetings

00:00:23,279 --> 00:00:26,970
everyone thank you for coming to this

00:00:24,900 --> 00:00:31,439
briefing on the inquiry into the sole

00:00:26,970 --> 00:00:33,750
three defeat 20 cycles ago contents of

00:00:31,439 --> 00:00:36,180
this briefing a classified Duchess royal

00:00:33,750 --> 00:00:37,860
bloodline anybody who does not have that

00:00:36,180 --> 00:00:41,850
classification must leave the room now

00:00:37,860 --> 00:00:44,570
okay with the formalities over we can

00:00:41,850 --> 00:00:48,300
begin my name is Alex Wilma

00:00:44,570 --> 00:00:51,090
my mother was Susan Wilma she was chief

00:00:48,300 --> 00:00:54,809
of docking during the sole three harvest

00:00:51,090 --> 00:00:59,010
20 cycles ago it was her that allowed

00:00:54,809 --> 00:01:02,489
that fateful ship to dock scoutship till

00:00:59,010 --> 00:01:07,650
the three four nine five the one that

00:01:02,489 --> 00:01:10,070
we'd presume destroyed eons ago this was

00:01:07,650 --> 00:01:15,869
the ship that was carrying two human

00:01:10,070 --> 00:01:17,640
cable repair engineers those cable

00:01:15,869 --> 00:01:21,630
repair engineers were carrying their

00:01:17,640 --> 00:01:25,229
Jolly Roger super weapon that led to the

00:01:21,630 --> 00:01:28,110
destruction of the entire fleet and the

00:01:25,229 --> 00:01:32,490
loss of the sole three harvest along

00:01:28,110 --> 00:01:35,000
with nearly a billion mines I am being

00:01:32,490 --> 00:01:36,869
part of the team for the last 15 cycles

00:01:35,000 --> 00:01:37,590
investigating the reasons for this

00:01:36,869 --> 00:01:43,460
defeat

00:01:37,590 --> 00:01:45,960
there were many contributing factors our

00:01:43,460 --> 00:01:48,090
synchronization signal impinged on human

00:01:45,960 --> 00:01:51,360
communication bands they were able to

00:01:48,090 --> 00:01:56,610
detect this and from this calculate the

00:01:51,360 --> 00:02:00,210
time of harvest this resulted in their

00:01:56,610 --> 00:02:03,320
human leaders surviving the initial the

00:02:00,210 --> 00:02:03,320
initial harvest attack

00:02:04,820 --> 00:02:11,340
there are also numerous there are

00:02:07,830 --> 00:02:14,780
numerous smaller incidents such as train

00:02:11,340 --> 00:02:17,580
egx firing on a human Welcome Wagon

00:02:14,780 --> 00:02:19,050
we've seen this we have seen such attack

00:02:17,580 --> 00:02:21,330
we've seen such attempts to communicate

00:02:19,050 --> 00:02:25,710
before they of course never been

00:02:21,330 --> 00:02:27,840
successful but in this case critical

00:02:25,710 --> 00:02:30,900
seconds were lost in confusing the

00:02:27,840 --> 00:02:36,540
humans and they were able to escape the

00:02:30,900 --> 00:02:40,050
initial fireball another example I would

00:02:36,540 --> 00:02:42,720
like to highlight following the initial

00:02:40,050 --> 00:02:45,630
counter-attack by the humans which would

00:02:42,720 --> 00:02:48,540
have which was of course futile their

00:02:45,630 --> 00:02:52,770
kinetic weapons their missiles could not

00:02:48,540 --> 00:02:55,950
penetrate our energy based shields but

00:02:52,770 --> 00:02:58,650
in one case a downed ship did lead to

00:02:55,950 --> 00:03:00,680
the capture of the pilot the pilot was

00:02:58,650 --> 00:03:04,500
taken to the human leadership's

00:03:00,680 --> 00:03:08,430
where a pilot was tortured interrogated

00:03:04,500 --> 00:03:11,730
mind probed during this the pilot did

00:03:08,430 --> 00:03:13,950
reveal our negotiating position our

00:03:11,730 --> 00:03:18,900
harvest tactics and our general

00:03:13,950 --> 00:03:21,090
disposition this resulted in counter

00:03:18,900 --> 00:03:25,910
attacks by the humans of a thermonuclear

00:03:21,090 --> 00:03:30,530
nature of course this was a still futile

00:03:25,910 --> 00:03:33,900
but they were contributing factors

00:03:30,530 --> 00:03:38,580
finally there was one more than I'd like

00:03:33,900 --> 00:03:42,120
to highlight the captured craft was not

00:03:38,580 --> 00:03:45,959
challenged was not questioned when it

00:03:42,120 --> 00:03:49,110
approached chief height our main harvest

00:03:45,959 --> 00:03:50,550
ship this rivet this allowed it to gain

00:03:49,110 --> 00:03:53,070
access to the command carrier

00:03:50,550 --> 00:03:58,110
this allowed the humans to gather intel

00:03:53,070 --> 00:04:04,620
on our initial invasion plans none of

00:03:58,110 --> 00:04:08,250
all of these pale in all of these pale

00:04:04,620 --> 00:04:11,220
in significance to the principle reason

00:04:08,250 --> 00:04:13,230
for the sole three defeat capture of the

00:04:11,220 --> 00:04:16,060
Scout ship

00:04:13,230 --> 00:04:18,340
from this capture the humans learned of

00:04:16,060 --> 00:04:21,479
our existence they learned of our

00:04:18,340 --> 00:04:24,610
biology they learned of our technology

00:04:21,479 --> 00:04:29,229
critically they learned of our UNIX

00:04:24,610 --> 00:04:31,889
operating system from this unit from our

00:04:29,229 --> 00:04:35,410
technology the humans went on to develop

00:04:31,889 --> 00:04:40,380
various things human code words include

00:04:35,410 --> 00:04:46,180
Roswell area 51 Unix Bell Labs ARPANET

00:04:40,380 --> 00:04:48,490
AOL email all of these are pale

00:04:46,180 --> 00:04:51,789
imitations to our consensus net of

00:04:48,490 --> 00:04:55,180
course but they gave the humans a

00:04:51,789 --> 00:04:58,270
critical foothold into our protocols and

00:04:55,180 --> 00:05:03,130
systems that allowed them to upload a

00:04:58,270 --> 00:05:08,139
virus to Reclamation pump three six nine

00:05:03,130 --> 00:05:11,070
to eight to that replication pump then

00:05:08,139 --> 00:05:18,610
communicated on consensus net spread

00:05:11,070 --> 00:05:22,560
sent commands fleet wide resulting in

00:05:18,610 --> 00:05:22,560
the disabling of all protection fields

00:05:23,460 --> 00:05:27,550
from this the humans were then able to

00:05:26,110 --> 00:05:35,080
use one of their primitive thermonuclear

00:05:27,550 --> 00:05:36,460
devices destroying our carrier ship our

00:05:35,080 --> 00:05:41,110
thoughts of course go to all the

00:05:36,460 --> 00:05:43,330
families of those aboard so for the past

00:05:41,110 --> 00:05:44,050
15 years we have been carrying out the

00:05:43,330 --> 00:05:46,389
investigation

00:05:44,050 --> 00:05:51,160
there are numerous lessons that have

00:05:46,389 --> 00:05:53,349
been made in procedure and command

00:05:51,160 --> 00:05:54,520
decisions this briefing will concentrate

00:05:53,349 --> 00:05:57,789
on some of the technological

00:05:54,520 --> 00:06:01,690
implications we find that the root cause

00:05:57,789 --> 00:06:05,919
analysis pumped on running on that pump

00:06:01,690 --> 00:06:07,539
was vulnerable to the humans attack that

00:06:05,919 --> 00:06:10,000
is how they got their foothold that is

00:06:07,539 --> 00:06:13,599
how they were able to instruct all

00:06:10,000 --> 00:06:16,020
defense fields to switch off without

00:06:13,599 --> 00:06:19,020
that their attack would have been

00:06:16,020 --> 00:06:19,020
useless

00:06:20,090 --> 00:06:25,410
the problem with pump Mon was not a

00:06:22,860 --> 00:06:27,870
simple buffer overflow or stack smashing

00:06:25,410 --> 00:06:32,400
attack the problem was more

00:06:27,870 --> 00:06:35,040
architectural pomp Mon have numerous

00:06:32,400 --> 00:06:37,470
capabilities that it did not need in

00:06:35,040 --> 00:06:42,690
order to fill the role of monitoring

00:06:37,470 --> 00:06:45,420
that pump it could read global files it

00:06:42,690 --> 00:06:47,580
could monitor processes it could create

00:06:45,420 --> 00:06:49,590
network sockets to other places on

00:06:47,580 --> 00:06:51,570
consensus net all of these are

00:06:49,590 --> 00:07:00,600
unnecessary and all of these are

00:06:51,570 --> 00:07:02,220
exploited by the human Trojan the table

00:07:00,600 --> 00:07:04,950
you see is a quote from the report

00:07:02,220 --> 00:07:09,060
please refer to that if you need the

00:07:04,950 --> 00:07:14,520
full details so the architectural falls

00:07:09,060 --> 00:07:18,930
of eunuchs boil down to discretionary

00:07:14,520 --> 00:07:22,260
access control that is access control is

00:07:18,930 --> 00:07:23,700
not enforced by default there are things

00:07:22,260 --> 00:07:26,730
that are open that do not need

00:07:23,700 --> 00:07:29,160
authenticated access this means that

00:07:26,730 --> 00:07:32,880
programs on UNIX systems start with

00:07:29,160 --> 00:07:35,940
excessive capabilities and once

00:07:32,880 --> 00:07:38,880
compromised programs can act can acquire

00:07:35,940 --> 00:07:42,450
further capabilities simply by opening

00:07:38,880 --> 00:07:45,390
them there are global resources and

00:07:42,450 --> 00:07:49,050
global risks global states throughout

00:07:45,390 --> 00:07:51,840
the UNIX system this obstructs running

00:07:49,050 --> 00:07:55,260
programs securely it obstructs writing

00:07:51,840 --> 00:07:58,140
testable programs because tests have to

00:07:55,260 --> 00:08:00,180
try and inject these normally global

00:07:58,140 --> 00:08:03,000
resources inside the restricted test

00:08:00,180 --> 00:08:05,790
environment it is structs writing

00:08:03,000 --> 00:08:09,360
reusable programs because these programs

00:08:05,790 --> 00:08:11,490
assume a full UNIX operating system and

00:08:09,360 --> 00:08:15,330
it is very difficult to audit them to

00:08:11,490 --> 00:08:18,390
say what do they actually use system

00:08:15,330 --> 00:08:21,390
administration just does not work at

00:08:18,390 --> 00:08:24,960
harvest fleet scale beyond a million

00:08:21,390 --> 00:08:27,710
nodes we just do not know what these

00:08:24,960 --> 00:08:27,710
systems are doing

00:08:28,860 --> 00:08:33,880
our team would like to propose a human

00:08:31,840 --> 00:08:37,360
technology that has actually been

00:08:33,880 --> 00:08:40,780
adapted from their reverse engineered

00:08:37,360 --> 00:08:43,120
version of our UNIX this human

00:08:40,780 --> 00:08:45,220
technology is called cloud ABI it is a

00:08:43,120 --> 00:08:48,790
relatively recent invention for the

00:08:45,220 --> 00:08:52,060
humans approximately two years old under

00:08:48,790 --> 00:08:55,990
cloud ABI programs start with the

00:08:52,060 --> 00:08:59,380
ability only to spawn threads and to

00:08:55,990 --> 00:09:01,780
allocate memory unless they are provided

00:08:59,380 --> 00:09:03,700
with external if unless they are

00:09:01,780 --> 00:09:09,340
provided with access to external

00:09:03,700 --> 00:09:11,350
resources they cannot access them they

00:09:09,340 --> 00:09:14,200
cannot choir further ability they cannot

00:09:11,350 --> 00:09:18,810
acquire further access to external

00:09:14,200 --> 00:09:21,880
resources they can only do that through

00:09:18,810 --> 00:09:24,580
the capabilities provided to them when

00:09:21,880 --> 00:09:29,230
they are started the implications of

00:09:24,580 --> 00:09:32,650
this are it is safe to run an unknown

00:09:29,230 --> 00:09:35,020
cloud ABI binary if it is given no

00:09:32,650 --> 00:09:37,750
resources the worst thing that it can do

00:09:35,020 --> 00:09:42,280
is allocate too much memory and burn

00:09:37,750 --> 00:09:45,220
through CPU as a result of this with

00:09:42,280 --> 00:09:47,800
explicit capabilities passed into the

00:09:45,220 --> 00:09:49,840
program at startup it is much easier to

00:09:47,800 --> 00:09:51,700
audit these programs to say what they

00:09:49,840 --> 00:09:56,440
need as a consequence it is much easier

00:09:51,700 --> 00:09:59,290
to test these programs this leads to

00:09:56,440 --> 00:10:01,530
better release engineering and to hire

00:09:59,290 --> 00:10:04,350
and could allow for higher-level

00:10:01,530 --> 00:10:07,690
orchestration the ability to migrate

00:10:04,350 --> 00:10:12,070
processes between hosts rather than

00:10:07,690 --> 00:10:13,660
virtual machines or containers this

00:10:12,070 --> 00:10:17,590
could lead to more efficient resource

00:10:13,660 --> 00:10:21,310
use in fleets and certainly to more

00:10:17,590 --> 00:10:23,920
secure resource use to give you a bit of

00:10:21,310 --> 00:10:28,380
background on this cloud ABI technology

00:10:23,920 --> 00:10:34,930
it was initially developed by human in a

00:10:28,380 --> 00:10:37,670
human called Edie shootin he is located

00:10:34,930 --> 00:10:39,380
in the European continent

00:10:37,670 --> 00:10:41,540
it was initially for the human

00:10:39,380 --> 00:10:43,280
derivative of our eunuchs called FreeBSD

00:10:41,540 --> 00:10:45,770
it is now available for multiple human

00:10:43,280 --> 00:10:49,690
operating systems and is compatible with

00:10:45,770 --> 00:10:54,200
our sense net and ploughed egg and

00:10:49,690 --> 00:10:55,970
original UNIX some of you may be

00:10:54,200 --> 00:10:59,120
familiar with a human technology called

00:10:55,970 --> 00:11:01,510
capsicum cloud a bi bi cloud a bi is

00:10:59,120 --> 00:11:05,360
derived from this capsicum project in

00:11:01,510 --> 00:11:07,820
capsicum processes initially getting

00:11:05,360 --> 00:11:09,560
access to global resources and can

00:11:07,820 --> 00:11:13,160
acquire further resources just like any

00:11:09,560 --> 00:11:16,160
other UNIX process but a capsicum

00:11:13,160 --> 00:11:19,820
process can call a function called cap

00:11:16,160 --> 00:11:21,820
ENTER after which sis calls that allow

00:11:19,820 --> 00:11:25,760
it to acquire further resources are

00:11:21,820 --> 00:11:28,970
blocked the return an error and/or

00:11:25,760 --> 00:11:31,580
result in the process being killed this

00:11:28,970 --> 00:11:33,920
allows for more secure processes after

00:11:31,580 --> 00:11:36,680
they have started after they've left

00:11:33,920 --> 00:11:41,050
their initial startup phase the problem

00:11:36,680 --> 00:11:43,760
with this capsicum project is that you

00:11:41,050 --> 00:11:48,950
integrating external library into a

00:11:43,760 --> 00:11:53,660
capsicum process causes runtime errors

00:11:48,950 --> 00:11:56,210
strange behaviors heisenbugs because a

00:11:53,660 --> 00:11:59,110
library buried deep in the call stack

00:11:56,210 --> 00:12:02,300
might try to open a file might try to

00:11:59,110 --> 00:12:05,840
initialize a pseudo-random number

00:12:02,300 --> 00:12:08,840
generator from a device and then fail

00:12:05,840 --> 00:12:11,390
and fall back to a less secure methods

00:12:08,840 --> 00:12:15,530
such as the time of day or the current

00:12:11,390 --> 00:12:18,770
pit the innovation that cloud ABI takes

00:12:15,530 --> 00:12:23,570
is to make capsicum default it is always

00:12:18,770 --> 00:12:28,370
on cloud ABI processes cannot call open

00:12:23,570 --> 00:12:30,980
they cannot see global Rees global

00:12:28,370 --> 00:12:36,500
resources such as process tables file

00:12:30,980 --> 00:12:41,450
systems or user databases unless

00:12:36,500 --> 00:12:44,840
explicitly given access to give you an

00:12:41,450 --> 00:12:47,780
idea of what we remove all of these

00:12:44,840 --> 00:12:50,610
api's are unavailable to account to a

00:12:47,780 --> 00:12:54,069
cloud api process

00:12:50,610 --> 00:12:54,550
the first category is simple common

00:12:54,069 --> 00:12:57,759
sense

00:12:54,550 --> 00:13:00,040
these are ABAP eyes that were not

00:12:57,759 --> 00:13:05,709
greatly designed in the first place or

00:13:00,040 --> 00:13:07,689
they return to result in they tend to

00:13:05,709 --> 00:13:14,139
result in buffer overflow bugs there are

00:13:07,689 --> 00:13:16,149
threads safe buffers safe alternatives

00:13:14,139 --> 00:13:18,480
already available for both UNIX and

00:13:16,149 --> 00:13:22,980
cloud avi the second category is

00:13:18,480 --> 00:13:26,559
basically the UNIX file system on a UNIX

00:13:22,980 --> 00:13:29,519
operating system a process can open or

00:13:26,559 --> 00:13:33,579
attempt to open any file by its path

00:13:29,519 --> 00:13:36,790
this is impossible in cloud ABI there is

00:13:33,579 --> 00:13:39,249
no open function there is no stat

00:13:36,790 --> 00:13:44,589
function there is no get pit there is no

00:13:39,249 --> 00:13:47,740
no get UID next we move on to musical

00:13:44,589 --> 00:13:51,779
state functions these are ones that tend

00:13:47,740 --> 00:13:53,740
to have an effect of process wide

00:13:51,779 --> 00:13:56,350
regardless of whether a process is

00:13:53,740 --> 00:14:00,759
multi-threaded these are removed because

00:13:56,350 --> 00:14:05,170
they make programs harder to reason

00:14:00,759 --> 00:14:09,809
about removing them simplifies the API

00:14:05,170 --> 00:14:11,980
and there are thread safe alternatives

00:14:09,809 --> 00:14:15,699
standard in standard out and standard

00:14:11,980 --> 00:14:19,540
error are also removed simply because

00:14:15,699 --> 00:14:24,670
they are a global resource that should

00:14:19,540 --> 00:14:29,379
be explicitly declared Arg V is also

00:14:24,670 --> 00:14:31,839
removed the method of passing the

00:14:29,379 --> 00:14:35,079
message method of passing in arguments

00:14:31,839 --> 00:14:38,319
to a cloud API process is incompatible

00:14:35,079 --> 00:14:43,230
with RB which relies on acquiring

00:14:38,319 --> 00:14:46,230
resources based on string values this is

00:14:43,230 --> 00:14:46,230
disallowed

00:14:47,529 --> 00:14:55,010
after removing these things we add one

00:14:50,930 --> 00:15:01,540
simple concept UNIX file descriptors

00:14:55,010 --> 00:15:01,540
become capability tokens these are the

00:15:01,630 --> 00:15:09,380
tokens by which a cloud API process

00:15:04,490 --> 00:15:12,680
acquires all resources all API is in

00:15:09,380 --> 00:15:15,170
cloud ABI that allow acquisition of new

00:15:12,680 --> 00:15:17,720
resources require an existing file

00:15:15,170 --> 00:15:20,860
descriptor to be passed in a file

00:15:17,720 --> 00:15:26,209
descriptor might describe a directory a

00:15:20,860 --> 00:15:30,130
file socket or even the handle to

00:15:26,209 --> 00:15:30,130
control a subprocess

00:15:30,640 --> 00:15:37,820
the second thing we add is a single

00:15:33,649 --> 00:15:41,120
application binary interface this means

00:15:37,820 --> 00:15:46,700
that a cloud a bi process once compiled

00:15:41,120 --> 00:15:50,209
on any UNIX system native or human will

00:15:46,700 --> 00:15:56,149
run on any other UNIX system without

00:15:50,209 --> 00:15:58,880
recon play without recompilation the ABI

00:15:56,149 --> 00:16:02,440
is available for the following human

00:15:58,880 --> 00:16:07,480
systems FreeBSD RT Linux Debian Ubuntu

00:16:02,440 --> 00:16:07,480
it is even available for their Mac OS

00:16:08,560 --> 00:16:17,600
support is in progress on the Linux's

00:16:14,649 --> 00:16:24,970
but with the next release of the humans

00:16:17,600 --> 00:16:28,010
FreeBSD it will be a native feature so

00:16:24,970 --> 00:16:30,890
it's best at this point to illustrate

00:16:28,010 --> 00:16:34,670
with an example we'll be taking a very

00:16:30,890 --> 00:16:41,000
simple knotty case of a of a UNIX

00:16:34,670 --> 00:16:43,000
utility LS this takes the name of the

00:16:41,000 --> 00:16:45,949
name or the path of a directory and

00:16:43,000 --> 00:16:50,180
prints out the names of the files and

00:16:45,949 --> 00:16:53,949
folders inside it this is a very simple

00:16:50,180 --> 00:16:56,839
example stripped down to illustrate our

00:16:53,949 --> 00:17:00,260
differences you will note that the

00:16:56,839 --> 00:17:01,270
process is taking in a string call and

00:17:00,260 --> 00:17:05,110
assigning it to the very

00:17:01,270 --> 00:17:07,750
dhurpa it is then passing this string

00:17:05,110 --> 00:17:09,580
down to the operating system and the

00:17:07,750 --> 00:17:14,320
operating system is acquiring resources

00:17:09,580 --> 00:17:16,390
on behalf of the process if we did not

00:17:14,320 --> 00:17:18,480
see the source code of this process we

00:17:16,390 --> 00:17:21,130
do not know what it would be capable of

00:17:18,480 --> 00:17:23,290
it might list the directory it might

00:17:21,130 --> 00:17:25,720
list the directory and send there as a

00:17:23,290 --> 00:17:26,589
results back to humans for further

00:17:25,720 --> 00:17:29,140
analysis

00:17:26,589 --> 00:17:32,800
it might encrypt the contents of the

00:17:29,140 --> 00:17:34,690
directory it might delete them it could

00:17:32,800 --> 00:17:38,610
do any number of things we don't know

00:17:34,690 --> 00:17:38,610
without fully auditing the source code

00:17:39,390 --> 00:17:47,710
using some of the features of Unix we

00:17:42,610 --> 00:17:51,760
can come closer to a cloud ABI design in

00:17:47,710 --> 00:17:55,210
this one the LS program does not take

00:17:51,760 --> 00:17:59,200
any string input it receives only file

00:17:55,210 --> 00:18:01,060
descriptors file descriptor 0 is the

00:17:59,200 --> 00:18:04,480
directory that we are trying to show the

00:18:01,060 --> 00:18:12,060
contents of file descriptor one happens

00:18:04,480 --> 00:18:16,270
to be standard out given this model if

00:18:12,060 --> 00:18:20,560
if the program was unable to pass

00:18:16,270 --> 00:18:24,220
strings to the call to open and the call

00:18:20,560 --> 00:18:26,640
to mr. we could say that this process

00:18:24,220 --> 00:18:31,210
was can

00:18:26,640 --> 00:18:34,510
not able to do anything other than act

00:18:31,210 --> 00:18:37,030
on the resources we provide it namely

00:18:34,510 --> 00:18:40,030
reader read-only access to a single

00:18:37,030 --> 00:18:42,220
directory and everything below and write

00:18:40,030 --> 00:18:45,850
only access to a single file stream

00:18:42,220 --> 00:18:47,530
namely set standard out the problem with

00:18:45,850 --> 00:18:51,010
this model is that it becomes very

00:18:47,530 --> 00:18:53,530
inflexible to pass in file descriptors

00:18:51,010 --> 00:18:58,770
in the exact sequence that they will be

00:18:53,530 --> 00:19:02,590
used by the program so the cloud ABI

00:18:58,770 --> 00:19:08,179
system relies on a new mechanism called

00:19:02,590 --> 00:19:12,269
arg data in our data

00:19:08,179 --> 00:19:16,049
there are a set of api's together file

00:19:12,269 --> 00:19:20,010
descriptors according to a tree

00:19:16,049 --> 00:19:23,990
structure programs can acquire these by

00:19:20,010 --> 00:19:28,289
key name as lists or file descriptors or

00:19:23,990 --> 00:19:32,880
maps in the example you see we use a

00:19:28,289 --> 00:19:38,700
helper program called cloud ABI run to

00:19:32,880 --> 00:19:41,639
map a Yama file containing a description

00:19:38,700 --> 00:19:43,110
of the input to the program to the file

00:19:41,639 --> 00:19:49,260
descriptors that the program will

00:19:43,110 --> 00:19:52,320
receive in this example the Python

00:19:49,260 --> 00:19:56,120
executable is not a UNIX executable it

00:19:52,320 --> 00:19:58,409
is a cloud ABI executable therefore

00:19:56,120 --> 00:20:01,049
during the build of this python

00:19:58,409 --> 00:20:04,740
executable any reference to stand it in

00:20:01,049 --> 00:20:08,519
standard out standard error the c-level

00:20:04,740 --> 00:20:11,460
function open the c-level function stat

00:20:08,519 --> 00:20:16,049
the c-level function opened would ever

00:20:11,460 --> 00:20:20,490
resulted in compile time errors as a

00:20:16,049 --> 00:20:23,850
result we can safely say that this

00:20:20,490 --> 00:20:27,029
execution of this Python script cannot

00:20:23,850 --> 00:20:30,539
do anything except read the contents of

00:20:27,029 --> 00:20:35,159
a single directory and write the output

00:20:30,539 --> 00:20:39,899
to a single file descriptor this makes

00:20:35,159 --> 00:20:44,149
this this makes this process safe to

00:20:39,899 --> 00:20:46,950
execute without trusting its source

00:20:44,149 --> 00:20:49,320
we need oh we need only know that we

00:20:46,950 --> 00:20:53,760
have exposed the inputs we provide to

00:20:49,320 --> 00:20:56,210
that program the inputs are explicit not

00:20:53,760 --> 00:20:56,210
implicit

00:20:57,789 --> 00:21:03,009
a further example it should be mentioned

00:21:00,129 --> 00:21:07,330
at this point that this example is at

00:21:03,009 --> 00:21:10,600
the moment hypothetical the Python port

00:21:07,330 --> 00:21:14,169
to cloud ABI is in progress

00:21:10,600 --> 00:21:20,859
it cannot currently do this other

00:21:14,169 --> 00:21:23,499
programs written in other C programs are

00:21:20,859 --> 00:21:29,169
fully ported and there is a cloud ABI

00:21:23,499 --> 00:21:31,629
ports set of packages available to give

00:21:29,169 --> 00:21:36,899
you a further example of illustrating

00:21:31,629 --> 00:21:40,799
what might be possible we show here a

00:21:36,899 --> 00:21:43,749
example configuration for a web server

00:21:40,799 --> 00:21:46,330
the web server binary itself would not

00:21:43,749 --> 00:21:48,489
have its own configuration file it could

00:21:46,330 --> 00:21:51,700
not read that file unless provided and

00:21:48,489 --> 00:21:54,669
that file will contain strings referring

00:21:51,700 --> 00:21:57,759
to paths which the web server would not

00:21:54,669 --> 00:22:01,749
be able to open so in this example we

00:21:57,759 --> 00:22:04,629
combine arguments and configuration into

00:22:01,749 --> 00:22:08,499
a single file and this file is provided

00:22:04,629 --> 00:22:10,479
to the cloud ABI run helper in order to

00:22:08,499 --> 00:22:14,460
acquire resources on behalf of the web

00:22:10,479 --> 00:22:17,619
server where this web server compromised

00:22:14,460 --> 00:22:19,539
it could not start listening on new

00:22:17,619 --> 00:22:24,840
ports it could not open a network

00:22:19,539 --> 00:22:24,840
connection to send the contents of any

00:22:25,979 --> 00:22:34,359
acquired data out to the world all it

00:22:29,499 --> 00:22:37,590
could do is serve network traffic on the

00:22:34,359 --> 00:22:37,590
socket that we have provided

00:22:40,720 --> 00:22:50,980
so at this moment what is so at this

00:22:47,740 --> 00:22:55,570
moment we ask what can we do in the

00:22:50,980 --> 00:22:58,360
future with this cloud a bi system we

00:22:55,570 --> 00:23:01,960
might imagine a future where software

00:22:58,360 --> 00:23:05,730
appliances can safely run customer

00:23:01,960 --> 00:23:08,620
provided plugins or third party plugins

00:23:05,730 --> 00:23:10,650
without exposing the internals of their

00:23:08,620 --> 00:23:12,970
system or the entire operating system

00:23:10,650 --> 00:23:15,570
these plugins were provided with a

00:23:12,970 --> 00:23:18,310
limited set of file descriptors and

00:23:15,570 --> 00:23:19,990
would therefore be constrained in what

00:23:18,310 --> 00:23:24,450
they could do to affect the outside

00:23:19,990 --> 00:23:29,620
world we might use this to isolate

00:23:24,450 --> 00:23:33,010
isolate vulnerability vulnerable systems

00:23:29,620 --> 00:23:35,830
such as pump month or transcoding

00:23:33,010 --> 00:23:41,560
libraries for security cameras from

00:23:35,830 --> 00:23:45,250
fleet-wide security systems by this

00:23:41,560 --> 00:23:47,020
means we could avoid problems in error

00:23:45,250 --> 00:23:50,440
prone libraries such as the human

00:23:47,020 --> 00:23:53,380
library imagemagick or the various video

00:23:50,440 --> 00:23:57,790
encoding libraries that have extremely

00:23:53,380 --> 00:24:00,670
complex input requirements and as a

00:23:57,790 --> 00:24:05,680
result tend to have many vulnerabilities

00:24:00,670 --> 00:24:09,670
found we might imagine the ability to

00:24:05,680 --> 00:24:13,360
use cloud ABI in order to implement the

00:24:09,670 --> 00:24:15,210
human system and Amazon ec2 without the

00:24:13,360 --> 00:24:19,150
overhead of virtual machines or

00:24:15,210 --> 00:24:22,360
containers similarly we might imagine

00:24:19,150 --> 00:24:24,010
the human system Google App Engine with

00:24:22,360 --> 00:24:31,000
the ability to submit programs written

00:24:24,010 --> 00:24:33,880
in any language C C++ rust assembly

00:24:31,000 --> 00:24:37,900
language in theory these would be safe

00:24:33,880 --> 00:24:39,940
languages to implement programs in and

00:24:37,900 --> 00:24:42,810
allow them to be uploaded to a

00:24:39,940 --> 00:24:46,150
third-party cloud service without

00:24:42,810 --> 00:24:50,169
virtualization this would allow us to

00:24:46,150 --> 00:24:56,320
compose applications not containers

00:24:50,169 --> 00:24:58,690
I shall now show you a brief demo of

00:24:56,320 --> 00:25:02,499
what has been achieved with this with

00:24:58,690 --> 00:25:09,789
the human language Python and the cloud

00:25:02,499 --> 00:25:12,899
ABI system of course it would help if I

00:25:09,789 --> 00:25:12,899
show this on the right screen

00:25:24,080 --> 00:25:29,420
in order to run a cloud ABI program on

00:25:26,870 --> 00:25:33,490
this system we can use the cloud a bi

00:25:29,420 --> 00:25:33,490
cloud Oba run helper

00:25:37,930 --> 00:25:44,010
the

00:25:40,260 --> 00:25:47,060
Python use the Python binary you see has

00:25:44,010 --> 00:25:53,060
been compiled against the cloud ABI

00:25:47,060 --> 00:25:53,060
system headers and version of Lib C

00:25:56,990 --> 00:26:01,340
the Python binary itself cannot accept

00:25:59,330 --> 00:26:07,250
standard input or write to standard

00:26:01,340 --> 00:26:09,860
output so the file that we are providing

00:26:07,250 --> 00:26:13,789
is going to the cloud ABI run program

00:26:09,860 --> 00:26:16,130
which is a UNIX program it is opening

00:26:13,789 --> 00:26:19,220
resources on behalf of the Python binary

00:26:16,130 --> 00:26:21,909
the Python binary is then receiving file

00:26:19,220 --> 00:26:21,909
descriptors

00:26:26,900 --> 00:26:30,010
the demo gods

00:26:47,960 --> 00:26:55,749
so the contents of that piano file look

00:26:53,059 --> 00:26:55,749
like this

00:26:56,850 --> 00:27:03,210
at the moment the Python binary is a

00:27:00,450 --> 00:27:05,909
work in progress this is the first thing

00:27:03,210 --> 00:27:11,070
that got working with it

00:27:05,909 --> 00:27:15,539
we have transliterated the native unix

00:27:11,070 --> 00:27:23,539
python arguments into llamó keys and the

00:27:15,539 --> 00:27:23,539
command is given verbatim we are also

00:27:28,560 --> 00:27:33,350
able to execute

00:27:33,940 --> 00:27:37,080
system calls

00:27:40,920 --> 00:27:46,890
in this case the Python script the

00:27:43,590 --> 00:27:50,010
Python binary are burning CPU and then

00:27:46,890 --> 00:27:54,000
printing the result out to standard

00:27:50,010 --> 00:27:55,920
error as a result of cloud ABI though

00:27:54,000 --> 00:28:01,140
this is the worst that this process can

00:27:55,920 --> 00:28:03,840
do we can kill it and know that it is

00:28:01,140 --> 00:28:06,210
done no damage to the system as a whole

00:28:03,840 --> 00:28:10,110
because it did not have access in order

00:28:06,210 --> 00:28:14,900
to do that damage if we have a look at

00:28:10,110 --> 00:28:18,030
the contents of rosamma

00:28:14,900 --> 00:28:20,310
we see that all it had access to was

00:28:18,030 --> 00:28:23,490
read-only access in order to import it

00:28:20,310 --> 00:28:26,630
standard library write only access to

00:28:23,490 --> 00:28:34,310
the standard error file descriptor and

00:28:26,630 --> 00:28:34,310
the ability to execute a simple Siskel

00:28:38,080 --> 00:28:44,860
work will continue on the Python port to

00:28:40,810 --> 00:28:47,500
the cloud ABI system there will be a

00:28:44,860 --> 00:28:54,040
sprint running at the human event euro

00:28:47,500 --> 00:28:56,640
Python 2016 on Sunday if you would like

00:28:54,040 --> 00:28:56,640
more information

00:29:01,540 --> 00:29:09,310
please visit this you please visit these

00:29:05,790 --> 00:29:11,890
addresses on the human network our usual

00:29:09,310 --> 00:29:14,160
taps are in a foot our usual network

00:29:11,890 --> 00:29:17,580
taps on their networks are in force

00:29:14,160 --> 00:29:17,580
thank you very much

00:29:31,660 --> 00:29:48,230
so we have some time for questions let's

00:29:35,150 --> 00:29:49,540
start with you talk hail the Queen okay

00:29:48,230 --> 00:29:53,720
awesome

00:29:49,540 --> 00:29:56,650
so I'm wondering you know we have in the

00:29:53,720 --> 00:30:00,980
community like a lot of tools that

00:29:56,650 --> 00:30:06,429
attacked the same problem we have a

00:30:00,980 --> 00:30:14,090
parmer we have things like open BSD and

00:30:06,429 --> 00:30:21,230
as Linux from NSA no backdoors I promise

00:30:14,090 --> 00:30:24,020
so why another system so the problem

00:30:21,230 --> 00:30:28,190
that we have found in our experience

00:30:24,020 --> 00:30:30,919
with a Palmer SELinux such systems is

00:30:28,190 --> 00:30:34,250
that the incentives with them tend to be

00:30:30,919 --> 00:30:36,530
wrong it is not them it is not the

00:30:34,250 --> 00:30:38,960
creator of a piece of software that

00:30:36,530 --> 00:30:40,429
configures those system is typically the

00:30:38,960 --> 00:30:46,640
distributors in the system

00:30:40,429 --> 00:30:48,890
administrators so as a result the

00:30:46,640 --> 00:30:53,480
configuration of the protection system

00:30:48,890 --> 00:30:55,970
such as as a karma or SELinux tends not

00:30:53,480 --> 00:30:58,700
to be in sync with the requirements of

00:30:55,970 --> 00:31:04,280
the programs that are running so all too

00:30:58,700 --> 00:31:06,890
often administrators in the middle in

00:31:04,280 --> 00:31:12,290
the midst of battle on a fleet ship will

00:31:06,890 --> 00:31:14,470
typically just turn them off more so

00:31:12,290 --> 00:31:18,559
with inexperienced administrators but

00:31:14,470 --> 00:31:20,809
even even seasoned veterans of multiple

00:31:18,559 --> 00:31:23,630
harvest campaigns have been known to

00:31:20,809 --> 00:31:28,610
switch these systems off when there is

00:31:23,630 --> 00:31:33,830
incoming fire yes okay another question

00:31:28,610 --> 00:31:34,370
if I me okay so is this thing production

00:31:33,830 --> 00:31:36,559
ready

00:31:34,370 --> 00:31:39,800
what's the overhead and what is the

00:31:36,559 --> 00:31:42,160
biggest biggest app you are currently

00:31:39,800 --> 00:31:42,160
run

00:31:43,700 --> 00:31:51,720
the system is still in its early phases

00:31:47,570 --> 00:31:59,389
it was conceived approximately to 4 bits

00:31:51,720 --> 00:32:02,340
ago around two and a half cycles until

00:31:59,389 --> 00:32:07,110
the the creator has been working on it

00:32:02,340 --> 00:32:11,460
quite a while and is an experienced an

00:32:07,110 --> 00:32:14,850
experienced developer as humans go the

00:32:11,460 --> 00:32:19,710
Python part of this is most certainly

00:32:14,850 --> 00:32:22,909
not production ready it is it would be

00:32:19,710 --> 00:32:22,909
tricky even to call it alpha

00:32:23,750 --> 00:32:30,179
unfortunately the human responsible for

00:32:26,039 --> 00:32:33,450
its development some inconsiderate human

00:32:30,179 --> 00:32:35,399
gave them another gave them the job so

00:32:33,450 --> 00:32:40,799
there was there was not time to complete

00:32:35,399 --> 00:32:44,669
it in before this briefing hi thanks

00:32:40,799 --> 00:32:49,409
Murdock I'm how I'm curious about the

00:32:44,669 --> 00:32:53,940
support for binary libraries like

00:32:49,409 --> 00:32:58,679
busybox are they planned to the are to

00:32:53,940 --> 00:33:02,789
the Clos de Bie support and we have seen

00:32:58,679 --> 00:33:06,090
a pattern common follow by humans and

00:33:02,789 --> 00:33:11,610
they tend to use Linux a lot and avoid

00:33:06,090 --> 00:33:14,940
FreeBSD are they security focus tools

00:33:11,610 --> 00:33:18,210
and we are also seeing a proliferation

00:33:14,940 --> 00:33:22,220
of a new tool called docker who is

00:33:18,210 --> 00:33:27,419
taking a different approach to security

00:33:22,220 --> 00:33:33,720
it's the acceptance of toka threatened

00:33:27,419 --> 00:33:36,059
the future of Claude ABI we invest in

00:33:33,720 --> 00:33:38,309
time and include ABI when we are going

00:33:36,059 --> 00:33:43,710
to face a different problem in the next

00:33:38,309 --> 00:33:45,809
harvest so I so I'm pleased to report

00:33:43,710 --> 00:33:47,909
that the next harvest fleet is on its

00:33:45,809 --> 00:33:50,510
way to earth and they will pay for their

00:33:47,909 --> 00:33:50,510
treachery

00:33:54,289 --> 00:34:04,529
the human technology docker provides

00:34:00,509 --> 00:34:07,080
similar benefits to cloud ABI it has

00:34:04,529 --> 00:34:09,299
slightly slightly higher overhead and is

00:34:07,080 --> 00:34:13,679
restricted only to their Linux operating

00:34:09,299 --> 00:34:18,540
system the cloud ABI for linux support

00:34:13,679 --> 00:34:21,899
is 90% complete it lacks integration

00:34:18,540 --> 00:34:27,299
with their distributions at the moment

00:34:21,899 --> 00:34:28,829
we are working to improve this what was

00:34:27,299 --> 00:34:36,450
the other part of your question please

00:34:28,829 --> 00:34:44,429
oh so there are there is a repository

00:34:36,450 --> 00:34:47,899
available of there is a repository

00:34:44,429 --> 00:34:58,500
available of human derived software

00:34:47,899 --> 00:35:01,950
called cloud ABI ports there are over a

00:34:58,500 --> 00:35:04,349
hundred packages in this I do not

00:35:01,950 --> 00:35:08,000
believe that busybox is one of them the

00:35:04,349 --> 00:35:11,549
cloud ABI model is better suited to

00:35:08,000 --> 00:35:19,280
long-running daemon processes than to

00:35:11,549 --> 00:35:19,280
interactive use it can become quite

00:35:19,849 --> 00:35:25,619
unnatural it can be quite come

00:35:22,880 --> 00:35:28,710
cumbersome in order to provide all the

00:35:25,619 --> 00:35:34,230
file descriptors to cloud ABI binaries

00:35:28,710 --> 00:35:37,030
in interactive use in a shell so that is

00:35:34,230 --> 00:35:40,670
possibly a development

00:35:37,030 --> 00:35:43,670
but if you wish to see if if a package

00:35:40,670 --> 00:35:47,780
has been ported I recommend visiting the

00:35:43,670 --> 00:35:50,120
cloud avi ports link that was included

00:35:47,780 --> 00:35:54,460
in your net included in yours in your

00:35:50,120 --> 00:35:58,420
notes any other questions

00:35:54,460 --> 00:35:58,420

YouTube URL: https://www.youtube.com/watch?v=EssolXRfAWo


