Title: David Charles - Managing Kubernetes from Python using Kube
Publication date: 2016-07-28
Playlist: EuroPython 2016
Description: 
	David Charles - Managing Kubernetes from Python using Kube
[EuroPython 2016]
[18 July 2016]
[Bilbao, Euskadi, Spain]
(https://ep2016.europython.eu//conference/talks/managing-kubernetes-from-python-using-kube)

Kubernetes is the Google Borg inspired control plane for Docker
containers.  It has a great API but needs a load of HTTP client code
and JSON processing to use it from Python.  This talk introduces Kube,
a Python wrapper around the Kubernetes API that enables you to manage
your Kubernetes cluster in a pythonic way while avoiding any
Kubernetes API peculiarities.  Programmers and operations folk who are
interested in interacting with the Kubernetes API using Python.

-----

## Abstract
Docker has had a transformative influence on the way we deploy
software and Kubernetes, the Google Borg inspired control plane for
Docker-container- hosting-clusters, is gaining similar momentum.
Being able to easily interact with this technology from Python will
become an increasingly important capability in many organisations.
I'll discuss what the motivations behind writing Kube.  We'll dive
into Kube using the Python interactive interpreter, getting connected
to the API, and simple viewing and label update operations. Finally
I'll discuss more advanced resource management activities like Kube's
'watch' API capability.

## Objectives
Attendees will learn about the key concepts in getting resource
information out of their Kubernetes cluster using Kube.

## Outline
1. Setting the scene (3 minutes)
1. Other Python kubernetes wrappers (2 minutes)
1. Kubernetes concepts quick recap (5 minutes)
1. Dive into Kube in the Python interactive interpreter (10 minutes)
 * Outline prerequisites
 * The entry point - a Cluster instance
 * Views and Items - two important Kube concepts
 * Item meta data: labels and versions
1. More Kube features (5 minutes)
 * Creating and deleting resources
 * Using Kube's Watch API support
 * The cluster proxy attribute for when you need to get at the actual API.
1. Q&A (5 minutes)
Captions: 
	00:00:09,860 --> 00:00:12,860
today

00:03:39,950 --> 00:03:48,080
deployer is a software service and we

00:03:42,540 --> 00:03:48,080
chose Google compute engine and GK

00:03:48,120 --> 00:03:52,110
and gk is the host vidi-vidi chief

00:03:50,250 --> 00:03:57,360
implementation that the google provide

00:03:52,110 --> 00:03:58,799
and we kind of were quite keen on dog

00:03:57,360 --> 00:04:00,330
food and we wanted to use our own

00:03:58,799 --> 00:04:03,480
solution to monitor our stuff and also

00:04:00,330 --> 00:04:04,860
it needs it to provision monitoring

00:04:03,480 --> 00:04:06,209
instances for customers who are signing

00:04:04,860 --> 00:04:09,209
up to the SAS so that they can actually

00:04:06,209 --> 00:04:11,780
you know click a button and a monitoring

00:04:09,209 --> 00:04:15,599
instance would be deployed on kubernetes

00:04:11,780 --> 00:04:17,880
so we needed to interact with the

00:04:15,599 --> 00:04:21,840
community api we're all Python people so

00:04:17,880 --> 00:04:25,620
we had to do that a Python so that's why

00:04:21,840 --> 00:04:30,600
we we wrote Q now it's important to say

00:04:25,620 --> 00:04:35,130
that there are other Python API wrappers

00:04:30,600 --> 00:04:36,419
out there and I didn't strongly

00:04:35,130 --> 00:04:39,030
encourage you to go off and look at them

00:04:36,419 --> 00:04:39,900
and so you can see how rubbish they are

00:04:39,030 --> 00:04:42,419
and how she does it

00:04:39,900 --> 00:04:44,910
no seriously go off and have a look they

00:04:42,419 --> 00:04:48,150
might be a better fit for you and also

00:04:44,910 --> 00:04:52,500
if you do end up choosing one of these

00:04:48,150 --> 00:04:53,580
instead of Park you it would be really

00:04:52,500 --> 00:04:55,470
great if you could come back and tell us

00:04:53,580 --> 00:04:57,180
what you thought was better because that

00:04:55,470 --> 00:04:59,400
would be interesting to know we could

00:04:57,180 --> 00:05:01,880
try and fix anything we've got going on

00:04:59,400 --> 00:05:01,880
in ours but

00:05:02,590 --> 00:05:07,360
we wrote ours we wrote cube in the way

00:05:05,919 --> 00:05:09,040
we wrote cube because we wanted to

00:05:07,360 --> 00:05:11,410
abstract away from what's a somewhat

00:05:09,040 --> 00:05:13,780
moving target as far as the kubernetes

00:05:11,410 --> 00:05:15,970
api goes it's also got some

00:05:13,780 --> 00:05:19,930
idiosyncrasies but you don't necessarily

00:05:15,970 --> 00:05:21,820
need to be exposed to when you're when

00:05:19,930 --> 00:05:23,650
you're interacting with with qg4 it's

00:05:21,820 --> 00:05:26,139
api so we wanted to kind of like rain an

00:05:23,650 --> 00:05:27,250
opinionated version of the api that made

00:05:26,139 --> 00:05:30,430
things a little bit more palatable for

00:05:27,250 --> 00:05:32,770
the for the user of that API we also

00:05:30,430 --> 00:05:36,220
wanted to clean watch interface watch

00:05:32,770 --> 00:05:38,680
interface allows you to risk get get

00:05:36,220 --> 00:05:42,990
notifications of changes to resources

00:05:38,680 --> 00:05:44,950
with including 80s and some of the other

00:05:42,990 --> 00:05:46,720
offerings that were about at the time

00:05:44,950 --> 00:05:48,610
some have come and gone since since we

00:05:46,720 --> 00:05:50,590
started but the ones that about didn't

00:05:48,610 --> 00:05:52,150
didn't do that very well we wanted

00:05:50,590 --> 00:05:53,830
something with pythonic and we didn't

00:05:52,150 --> 00:05:55,919
want to use like code generation swagger

00:05:53,830 --> 00:05:59,560
and that's a theme in some of these

00:05:55,919 --> 00:06:04,450
alternatives but you know you guys take

00:05:59,560 --> 00:06:07,450
a look and take your choice so I hate it

00:06:04,450 --> 00:06:08,470
when took speakers say all hands up do

00:06:07,450 --> 00:06:10,180
you know this do you know that they're

00:06:08,470 --> 00:06:12,430
just a very quick show of hands is um

00:06:10,180 --> 00:06:18,400
who has kind of been exposed to

00:06:12,430 --> 00:06:19,720
communities okay so I try and railroad

00:06:18,400 --> 00:06:22,680
through this because times at a premium

00:06:19,720 --> 00:06:22,680
so

00:06:22,810 --> 00:06:30,950
so kubernetes is about orchestrating

00:06:27,160 --> 00:06:33,200
docker containers essentially and but

00:06:30,950 --> 00:06:35,120
not just rocket containers docker came

00:06:33,200 --> 00:06:36,530
out of true to file systems and if any

00:06:35,120 --> 00:06:39,460
of you have been exposed to Solaris and

00:06:36,530 --> 00:06:43,790
Solaris zones similar kind of concept

00:06:39,460 --> 00:06:45,590
what it gives you is basically an

00:06:43,790 --> 00:06:48,110
immutable deployment component it's easy

00:06:45,590 --> 00:06:52,190
to author there's a runtime that runs on

00:06:48,110 --> 00:06:53,750
many platforms and it's a allows you to

00:06:52,190 --> 00:06:56,480
developer an immutable deployment

00:06:53,750 --> 00:07:00,400
component that underpins DevOps

00:06:56,480 --> 00:07:02,750
practices and continuous deployment

00:07:00,400 --> 00:07:06,920
across multiple nodes it's hard to

00:07:02,750 --> 00:07:09,590
manage docker containers in the raw so

00:07:06,920 --> 00:07:12,070
especially for scaling resilience so

00:07:09,590 --> 00:07:15,640
that's why control planes like

00:07:12,070 --> 00:07:19,250
communities and dr. swarm came about and

00:07:15,640 --> 00:07:21,530
I mean Google already doing this Google

00:07:19,250 --> 00:07:26,960
had system will have a system called

00:07:21,530 --> 00:07:28,820
Borg which uses LXC containers and it

00:07:26,960 --> 00:07:32,180
manages those across their enterprise it

00:07:28,820 --> 00:07:34,430
allowed Google to scale developer

00:07:32,180 --> 00:07:35,510
productivity and the number of services

00:07:34,430 --> 00:07:37,580
they are offering to their customers

00:07:35,510 --> 00:07:39,590
internally and externally without the

00:07:37,580 --> 00:07:41,780
corresponding increase in operational

00:07:39,590 --> 00:07:46,400
overhead so there was obviously you know

00:07:41,780 --> 00:07:48,050
it was a useful a useful technology Cuba

00:07:46,400 --> 00:07:50,450
neech's has had an amazing amount of

00:07:48,050 --> 00:07:53,150
momentum behind it it's interesting how

00:07:50,450 --> 00:07:55,130
many in quotes competitors have actually

00:07:53,150 --> 00:07:57,050
got behind Cuban ETS where initially

00:07:55,130 --> 00:08:00,170
they thoughts position themselves as

00:07:57,050 --> 00:08:02,690
direct competitors to giving ETS a kind

00:08:00,170 --> 00:08:04,280
of since seem to acknowledge that they

00:08:02,690 --> 00:08:07,550
have a particular sweet spot maybe it's

00:08:04,280 --> 00:08:10,550
in cluster management or managing

00:08:07,550 --> 00:08:12,110
containers on very very large scales and

00:08:10,550 --> 00:08:16,280
they seem to have

00:08:12,110 --> 00:08:17,930
all sought to accommodate communities in

00:08:16,280 --> 00:08:23,120
their offering and in their space

00:08:17,930 --> 00:08:24,530
so you know the only sort of like sort

00:08:23,120 --> 00:08:26,360
of offering that hasn't really done that

00:08:24,530 --> 00:08:30,590
so it's a dr. swarm because that is you

00:08:26,360 --> 00:08:32,710
know the same thing so so how does it

00:08:30,590 --> 00:08:32,710
work

00:08:33,460 --> 00:08:42,620
excellent yeah it's not very helpful

00:08:38,570 --> 00:08:44,240
that kind of diagram you know and so I

00:08:42,620 --> 00:08:46,730
just want to go through some key

00:08:44,240 --> 00:08:48,200
concepts so it in communities we have

00:08:46,730 --> 00:08:50,810
the idea of a cluster which is a single

00:08:48,200 --> 00:08:53,210
homogenous cluster of nodes compute

00:08:50,810 --> 00:08:57,740
resource watch out for a thing called

00:08:53,210 --> 00:08:59,450
abilities which is kind of a attempt to

00:08:57,740 --> 00:09:01,370
federated multiple communities clusters

00:08:59,450 --> 00:09:04,940
so you can have basically multiple

00:09:01,370 --> 00:09:09,100
clusters with different kinds of shapes

00:09:04,940 --> 00:09:12,650
of resource running inside it a node is

00:09:09,100 --> 00:09:15,320
some resource where we're pods are

00:09:12,650 --> 00:09:18,320
scheduled and pods are the smallest unit

00:09:15,320 --> 00:09:21,590
of scheduling that runs the actual

00:09:18,320 --> 00:09:23,480
containers so docker but not exclusively

00:09:21,590 --> 00:09:26,540
docker there's also support coming for

00:09:23,480 --> 00:09:29,210
rocket containers and the dock contains

00:09:26,540 --> 00:09:30,230
our own inside the pods and those are

00:09:29,210 --> 00:09:35,330
the things that the tube needs use

00:09:30,230 --> 00:09:38,810
system schedules there's the the concept

00:09:35,330 --> 00:09:42,170
of replica sets and what they do is they

00:09:38,810 --> 00:09:46,580
it's a specification that defines the

00:09:42,170 --> 00:09:48,800
pods and how many replicas of those pods

00:09:46,580 --> 00:09:51,920
there need to be for scale and

00:09:48,800 --> 00:09:53,930
resilience amongst other things

00:09:51,920 --> 00:09:55,850
there's also services services target

00:09:53,930 --> 00:09:58,030
pods and expose their capabilities at

00:09:55,850 --> 00:10:00,770
the edge of the kubernetes cluster so

00:09:58,030 --> 00:10:02,590
you can think about the actual docker

00:10:00,770 --> 00:10:04,870
containers I suppose

00:10:02,590 --> 00:10:06,850
as nano services and then the actual

00:10:04,870 --> 00:10:08,740
console micro services and then the

00:10:06,850 --> 00:10:14,080
service definitions provide actual

00:10:08,740 --> 00:10:16,240
services for for consumer labels are an

00:10:14,080 --> 00:10:19,150
interesting thing and we'll be looking

00:10:16,240 --> 00:10:21,660
at those very very quickly and their key

00:10:19,150 --> 00:10:24,580
value pairs are associated with

00:10:21,660 --> 00:10:26,860
resources within kubernetes but they

00:10:24,580 --> 00:10:30,100
will be edge over to organize the

00:10:26,860 --> 00:10:31,540
objects within it and there's lots of

00:10:30,100 --> 00:10:32,740
other stuff that we could talk about but

00:10:31,540 --> 00:10:35,220
that's probably enough to get us going

00:10:32,740 --> 00:10:38,940
through the next part of the the talk

00:10:35,220 --> 00:10:41,860
something-something 30 minutes Simmons

00:10:38,940 --> 00:10:44,350
so some of the some key concepts for

00:10:41,860 --> 00:10:48,450
cube and we need to get the terminology

00:10:44,350 --> 00:10:54,460
straight really right at the beginning

00:10:48,450 --> 00:10:58,240
is principally the API the community API

00:10:54,460 --> 00:11:02,020
defines the defines Kimes and it defines

00:10:58,240 --> 00:11:03,640
resources so a kind is the name of an

00:11:02,020 --> 00:11:06,580
object schemer essentially as a resource

00:11:03,640 --> 00:11:09,040
type and a resource is a representation

00:11:06,580 --> 00:11:13,600
of a system entity that's sent or

00:11:09,040 --> 00:11:15,940
retrieved from the API by Jason over

00:11:13,600 --> 00:11:20,410
HTTP and resort there's to touch

00:11:15,940 --> 00:11:21,700
resource its collections and elements so

00:11:20,410 --> 00:11:23,200
these are kind of kubernetes terms I'm

00:11:21,700 --> 00:11:26,500
using but they do map quite nicely into

00:11:23,200 --> 00:11:29,590
its cube so for example a pod is a pod

00:11:26,500 --> 00:11:31,120
resource aware as nodes is a node list

00:11:29,590 --> 00:11:35,100
resource and that's a collection of

00:11:31,120 --> 00:11:38,550
nodes so try and bear that in mind

00:11:35,100 --> 00:11:41,680
additionally it's really important to

00:11:38,550 --> 00:11:44,850
understand the separation of

00:11:41,680 --> 00:11:48,640
specification and status including et's

00:11:44,850 --> 00:11:50,350
when an API update has made the

00:11:48,640 --> 00:11:52,030
specification of the resource that

00:11:50,350 --> 00:11:54,220
you're updating is made and that's

00:11:52,030 --> 00:11:57,060
available immediately so that's almost

00:11:54,220 --> 00:12:00,430
like an atomic operation but over time

00:11:57,060 --> 00:12:02,200
kubernetes will work to bring the status

00:12:00,430 --> 00:12:04,400
of the resource whose specification has

00:12:02,200 --> 00:12:07,339
changed up towards that specification

00:12:04,400 --> 00:12:11,360
so the system will drive towards the

00:12:07,339 --> 00:12:13,310
most recent spec and that makes the

00:12:11,360 --> 00:12:18,460
behavior kubernetes level based on age

00:12:13,310 --> 00:12:23,600
based which is quite a nice feature so

00:12:18,460 --> 00:12:26,680
okay so now the tricky bit I'm going to

00:12:23,600 --> 00:12:26,680
open a terminal window

00:12:28,649 --> 00:12:31,970
bear with me for a moment

00:12:34,230 --> 00:12:38,030
we're trying to mirror this display

00:12:44,900 --> 00:12:51,520
yeah it works okay cool okay so what

00:12:48,230 --> 00:12:53,570
I've got running here is um yes sorry oh

00:12:51,520 --> 00:12:57,430
I could yeah I should have tried that

00:12:53,570 --> 00:12:57,430
before actually no

00:13:05,290 --> 00:13:08,250
say when

00:13:10,160 --> 00:13:20,700
good yeah okay okay so I've got a single

00:13:18,630 --> 00:13:22,260
note Cuban et's cluster running on

00:13:20,700 --> 00:13:24,090
macbook air by the way if anyone's

00:13:22,260 --> 00:13:25,560
interested and it was easy to do if

00:13:24,090 --> 00:13:26,610
anyone's interested in knowing how to do

00:13:25,560 --> 00:13:28,970
just come and see me at the standard we

00:13:26,610 --> 00:13:36,720
can have a chat about it's quite cool

00:13:28,970 --> 00:13:39,480
right so what I'm going to do so I can

00:13:36,720 --> 00:13:41,970
queue here we go so what you do is just

00:13:39,480 --> 00:13:44,070
import cube stunningly probably right

00:13:41,970 --> 00:13:46,350
remember that America thing where I was

00:13:44,070 --> 00:13:47,400
like really jet-lagged and was up till 3

00:13:46,350 --> 00:13:53,070
o'clock in the morning trying to write

00:13:47,400 --> 00:13:55,680
this stuff so be nice so import cube so

00:13:53,070 --> 00:13:58,560
the the key entry point in the queue API

00:13:55,680 --> 00:14:02,150
is it's a cluster so we can say

00:13:58,560 --> 00:14:05,010
something like cluster equals cube dot

00:14:02,150 --> 00:14:06,870
cluster and we create an instance of one

00:14:05,010 --> 00:14:09,320
of those things so that gives us a

00:14:06,870 --> 00:14:12,840
cluster object

00:14:09,320 --> 00:14:17,070
so there's if you want if you'll okay so

00:14:12,840 --> 00:14:19,500
one thing I forgot to mention was when

00:14:17,070 --> 00:14:24,920
you're interacting with the communities

00:14:19,500 --> 00:14:27,600
API the preferred approach is to run a

00:14:24,920 --> 00:14:30,240
queue control proxy and what that does

00:14:27,600 --> 00:14:32,310
is it it proxies the view controller API

00:14:30,240 --> 00:14:35,040
from wherever it's running to localhost

00:14:32,310 --> 00:14:38,090
on your machine so what I've got here is

00:14:35,040 --> 00:14:38,090
quite simply

00:14:39,889 --> 00:14:44,509
you control proxy you can see down the

00:14:42,290 --> 00:14:47,899
bottom running here if you're running

00:14:44,509 --> 00:14:49,879
your Python code using cube you know in

00:14:47,899 --> 00:14:51,319
a container then what you normally do is

00:14:49,879 --> 00:14:52,790
have a sidecar container inside your pod

00:14:51,319 --> 00:14:55,549
so ones running the proxy and ones

00:14:52,790 --> 00:14:57,169
running your Python code okay so the

00:14:55,549 --> 00:15:06,169
other thing I can do here is I can

00:14:57,169 --> 00:15:07,939
specify a URL if the if the if the proxy

00:15:06,169 --> 00:15:13,089
is running on a non-standard endpoint or

00:15:07,939 --> 00:15:13,089
port so we can just say localhost

00:15:16,540 --> 00:15:23,959
something like that and then we get

00:15:20,569 --> 00:15:26,720
obviously cluster instance can use

00:15:23,959 --> 00:15:29,779
context managers as well so yeah so you

00:15:26,720 --> 00:15:38,079
can say something like with cube with

00:15:29,779 --> 00:15:38,079
cluster okay

00:15:39,670 --> 00:15:46,249
Kato notes

00:15:42,079 --> 00:15:47,720
we'll talk about this in a sec so that K

00:15:46,249 --> 00:15:49,879
dot nose has returned a note for you and

00:15:47,720 --> 00:15:51,589
that will become clear in a minute so

00:15:49,879 --> 00:15:54,709
there's a few ways to actually create

00:15:51,589 --> 00:15:55,699
your your entry point as a cluster so

00:15:54,709 --> 00:15:58,660
remember I was talking earlier about

00:15:55,699 --> 00:16:02,899
collections and elements well they're

00:15:58,660 --> 00:16:06,170
represented here as views and items so

00:16:02,899 --> 00:16:07,730
this kind of nodes thing here because

00:16:06,170 --> 00:16:11,329
the plural you can see that's actually a

00:16:07,730 --> 00:16:15,019
node list so that's a collection and I

00:16:11,329 --> 00:16:18,110
can iterate over that to get actual view

00:16:15,019 --> 00:16:19,279
items out so let's have a look at a few

00:16:18,110 --> 00:16:22,819
that it sort of got clustered all nodes

00:16:19,279 --> 00:16:24,829
the cluster object has a few of these

00:16:22,819 --> 00:16:26,089
things many of these things you can look

00:16:24,829 --> 00:16:28,999
at the documentation it's all on read

00:16:26,089 --> 00:16:32,379
the docs it's a work in progress

00:16:28,999 --> 00:16:36,199
but there's some essentials in there and

00:16:32,379 --> 00:16:40,369
we can see things like the clusters

00:16:36,199 --> 00:16:42,879
record cassettes and namespaces and that

00:16:40,369 --> 00:16:42,879
kind of stuff

00:16:45,879 --> 00:16:51,289
so we want to get a resource item out

00:16:48,289 --> 00:16:53,479
with you so I can say something like RSK

00:16:51,289 --> 00:16:57,979
we're going to get a replica set from my

00:16:53,479 --> 00:17:00,559
cluster door to replica sets and I can

00:16:57,979 --> 00:17:04,819
do a dog fetch and I need to specify the

00:17:00,559 --> 00:17:15,439
name now something I prepared earlier I

00:17:04,819 --> 00:17:17,750
have this is just a few control on the

00:17:15,439 --> 00:17:19,039
command line and I can get the replica

00:17:17,750 --> 00:17:21,769
sets and I know I've got one called

00:17:19,039 --> 00:17:30,019
service demo so I'm going to say get me

00:17:21,769 --> 00:17:34,779
service but I have to specify the

00:17:30,019 --> 00:17:37,460
namespace so I say namespace equals

00:17:34,779 --> 00:17:42,279
default it's the name space but that's

00:17:37,460 --> 00:17:42,279
running in you see how about my time is

00:17:42,820 --> 00:17:47,330
and then we look at our s look we've got

00:17:45,470 --> 00:17:50,740
a replica set item now so this is an

00:17:47,330 --> 00:17:55,039
actual an element as opposed to

00:17:50,740 --> 00:17:57,919
collection and it's got some attributes

00:17:55,039 --> 00:17:59,870
associated with it so I can say look at

00:17:57,919 --> 00:18:01,429
some metadata and I can see what the

00:17:59,870 --> 00:18:02,570
name is and lo and behold is service

00:18:01,429 --> 00:18:06,049
demo so I actually don't give them the

00:18:02,570 --> 00:18:11,210
right thing and I can see what name

00:18:06,049 --> 00:18:15,409
space Pat came from and I can also see

00:18:11,210 --> 00:18:19,580
what labels are associated with that

00:18:15,409 --> 00:18:21,200
particular replica set so

00:18:19,580 --> 00:18:23,470
sorry got a bit closer to the bottom of

00:18:21,200 --> 00:18:23,470
spring

00:18:24,250 --> 00:18:32,820
okay so what's important to remember our

00:18:28,990 --> 00:18:36,309
resource resources out there versioned

00:18:32,820 --> 00:18:37,929
humanities versions all of the resources

00:18:36,309 --> 00:18:39,039
it returns across the API and if you

00:18:37,929 --> 00:18:42,520
remember when I was talking about the

00:18:39,039 --> 00:18:44,350
separation of spec and Status when you

00:18:42,520 --> 00:18:47,650
get given a resource rights and back

00:18:44,350 --> 00:18:59,320
gets versioned so you know we can see

00:18:47,650 --> 00:19:00,610
here that are s so so one thing I forgot

00:18:59,320 --> 00:19:05,710
to mention was I think I did mention

00:19:00,610 --> 00:19:07,960
briefly is that these these collections

00:19:05,710 --> 00:19:09,669
are actually iterative so I can do cool

00:19:07,960 --> 00:19:14,049
things like a list comprehension so I

00:19:09,669 --> 00:19:22,059
can say RS for Boris in cluster dot

00:19:14,049 --> 00:19:23,739
replicas s and you get things back so

00:19:22,059 --> 00:19:36,070
I can build a list say for example

00:19:23,739 --> 00:19:36,940
saying node dot meta dot version 4 so

00:19:36,070 --> 00:19:39,580
that's going to give me a list of all

00:19:36,940 --> 00:19:40,450
the versions for all the nodes in the

00:19:39,580 --> 00:19:48,700
cluster

00:19:40,450 --> 00:19:50,289
so there's any one different version

00:19:48,700 --> 00:19:54,039
coming out so that means the state of

00:19:50,289 --> 00:19:55,359
the of the of the node resource has

00:19:54,039 --> 00:19:56,649
changed because something's changed

00:19:55,359 --> 00:19:57,849
about the node it's like used it's

00:19:56,649 --> 00:20:00,789
slightly different matter CPU and that's

00:19:57,849 --> 00:20:05,409
been reported in actually whatever so

00:20:00,789 --> 00:20:06,429
when you're interacting through cube you

00:20:05,409 --> 00:20:08,710
need to make sure you've got the latest

00:20:06,429 --> 00:20:10,239
version of the object otherwise you know

00:20:08,710 --> 00:20:15,509
you could be looking at stuff that's

00:20:10,239 --> 00:20:18,399
wrong or out-of-date ok so back to

00:20:15,509 --> 00:20:24,909
labels so let's have a look at our

00:20:18,399 --> 00:20:26,529
replica set object that we had and it's

00:20:24,909 --> 00:20:29,019
got some label associated with it it's

00:20:26,529 --> 00:20:40,899
got one it's actually dictionary so I

00:20:29,019 --> 00:20:42,879
can do stuff like is however immutable

00:20:40,899 --> 00:20:46,359
so you can't mess up that way and that

00:20:42,879 --> 00:20:48,309
was kind of a design decision of ours

00:20:46,359 --> 00:20:51,599
when we were writing cube that we wanted

00:20:48,309 --> 00:20:56,499
every operation to be done by a set call

00:20:51,599 --> 00:21:00,690
so you can update the label using a set

00:20:56,499 --> 00:21:00,690
command so you could say something like

00:21:01,010 --> 00:21:14,280
let's add a new one phoo and we'll set

00:21:04,740 --> 00:21:16,530
it to they would start set to and we'll

00:21:14,280 --> 00:21:18,440
give it a value at the bar that's not

00:21:16,530 --> 00:21:21,390
predictable at all is it

00:21:18,440 --> 00:21:23,790
okay so we get one back okay look at

00:21:21,390 --> 00:21:24,900
Horace see if anyone spots what's going

00:21:23,790 --> 00:21:28,920
on here

00:21:24,900 --> 00:21:33,120
all right about meta dot and it's not

00:21:28,920 --> 00:21:36,420
that's really annoying so that's because

00:21:33,120 --> 00:21:40,860
I'm actually looking at the old version

00:21:36,420 --> 00:21:44,640
of RS because that's the one that got

00:21:40,860 --> 00:21:49,080
returned from an earlier cool that

00:21:44,640 --> 00:21:53,940
version so what I can do is this

00:21:49,080 --> 00:21:56,930
I'm going to be fancy and use a list

00:21:53,940 --> 00:21:59,930
comprehension because I know expecting

00:21:56,930 --> 00:21:59,930
rs4

00:22:02,890 --> 00:22:09,580
replica sets and I get the first value

00:22:07,570 --> 00:22:11,410
out of that and I should get an RS and

00:22:09,580 --> 00:22:12,850
now if I look at RS top version

00:22:11,410 --> 00:22:14,920
lo and behold it is a slightly different

00:22:12,850 --> 00:22:19,830
version yay okay so now let's have a

00:22:14,920 --> 00:22:19,830
look at our s dot meta labels

00:22:21,400 --> 00:22:26,890
and we could see that our food

00:22:23,140 --> 00:22:30,670
attributes on there now so that's really

00:22:26,890 --> 00:22:35,830
nice and so some updating a label is

00:22:30,670 --> 00:22:36,700
kind of the same as creating a label so

00:22:35,830 --> 00:22:41,410
I can do that

00:22:36,700 --> 00:22:43,510
it's returned by a new replica set which

00:22:41,410 --> 00:22:46,120
I didn't assign to a variable so do that

00:22:43,510 --> 00:22:48,910
I look at RS version we've got a new

00:22:46,120 --> 00:22:57,100
version and labels and we've got bad set

00:22:48,910 --> 00:23:00,130
on there so so so to go on about labels

00:22:57,100 --> 00:23:02,320
a lot it was kind of easy to do this and

00:23:00,130 --> 00:23:03,700
the other thing is on a very good way of

00:23:02,320 --> 00:23:06,760
managing your communities cluster if you

00:23:03,700 --> 00:23:11,740
want to manage the way your resources

00:23:06,760 --> 00:23:15,040
you know pods services etc are managed

00:23:11,740 --> 00:23:19,000
then you know setting and resetting late

00:23:15,040 --> 00:23:21,430
was a good way of doing that okay so we

00:23:19,000 --> 00:23:28,300
can also delete Able's so we can say our

00:23:21,430 --> 00:23:30,970
s dot met labels and we can say wanted

00:23:28,300 --> 00:23:32,350
to eat food and I'm not gonna cross out

00:23:30,970 --> 00:23:35,740
a second time I'm actually going to

00:23:32,350 --> 00:23:37,210
assign that to our s and then look at

00:23:35,740 --> 00:23:42,490
our s not that's what label wasn't foods

00:23:37,210 --> 00:23:45,030
gone okay so that's kind of the end of

00:23:42,490 --> 00:23:45,030
the

00:23:46,440 --> 00:23:51,470
that bit the live code demo bit

00:23:59,500 --> 00:24:02,800
thank you very much

00:24:07,130 --> 00:24:10,940
okay so so briefly talk about some of

00:24:09,710 --> 00:24:15,500
the features that I haven't got time to

00:24:10,940 --> 00:24:16,880
demo and in the latest version of cube

00:24:15,500 --> 00:24:18,380
we've got creating and deleting

00:24:16,880 --> 00:24:19,970
resources which actually makes it quite

00:24:18,380 --> 00:24:22,460
useful so you guys should go in create

00:24:19,970 --> 00:24:24,650
positive e pods replica sets services

00:24:22,460 --> 00:24:27,429
namespace is all that kind of stuff it's

00:24:24,650 --> 00:24:33,590
just a simple create call you pass in a

00:24:27,429 --> 00:24:35,990
Jason specification and it does we've

00:24:33,590 --> 00:24:38,330
also got a watch API implementation

00:24:35,990 --> 00:24:39,799
which you know say come by the booth and

00:24:38,330 --> 00:24:43,909
let's show you because it's really cool

00:24:39,799 --> 00:24:46,159
and my colleague who wrote that there

00:24:43,909 --> 00:24:49,010
actually wrote a blog about how it was

00:24:46,159 --> 00:24:50,330
tricky he's done all you guys great

00:24:49,010 --> 00:24:52,309
service because he's insulated you from

00:24:50,330 --> 00:24:56,330
all the horrors how to do watch support

00:24:52,309 --> 00:24:59,780
I'm using Python and over HTTP and and

00:24:56,330 --> 00:25:01,429
yeah it's me there's also if you

00:24:59,780 --> 00:25:03,470
remember the fetch command that I use to

00:25:01,429 --> 00:25:05,659
get to resource items from collections

00:25:03,470 --> 00:25:07,370
you there's actually a filter capability

00:25:05,659 --> 00:25:11,809
so you can filter the returned results

00:25:07,370 --> 00:25:12,200
on on label values which is also really

00:25:11,809 --> 00:25:14,179
natty

00:25:12,200 --> 00:25:17,270
and cool and I didn't get a chance to

00:25:14,179 --> 00:25:19,610
show you finally the cluster instance

00:25:17,270 --> 00:25:21,860
which is your entry point has a proxy to

00:25:19,610 --> 00:25:24,530
the communities API so if all else fails

00:25:21,860 --> 00:25:26,870
and you want to get to the actual API in

00:25:24,530 --> 00:25:30,890
Tison while you're using cube you just

00:25:26,870 --> 00:25:34,760
use clustered or proxy to do that okay

00:25:30,890 --> 00:25:37,669
so type of questions the Sun bit bucket

00:25:34,760 --> 00:25:39,260
and I'm really interested to hear if

00:25:37,669 --> 00:25:42,110
you'll think bit bucket sucks and you

00:25:39,260 --> 00:25:44,450
want usually things should be on get or

00:25:42,110 --> 00:25:46,280
if it just really matter to people I've

00:25:44,450 --> 00:25:48,169
had a sharp intake of breath from some

00:25:46,280 --> 00:25:50,690
audiences when I've asked him about that

00:25:48,169 --> 00:25:53,000
and anyway that's worthy it's happy to

00:25:50,690 --> 00:25:57,020
move it check us out on Kobe IO

00:25:53,000 --> 00:26:00,830
I'm Kobe Kobe CTO follow me on Twitter

00:25:57,020 --> 00:26:04,030
because I'm funny and then yeah so I'll

00:26:00,830 --> 00:26:04,030
take questions if we've got time

00:26:08,759 --> 00:26:23,169
hello okay so okay so the question was

00:26:21,489 --> 00:26:26,970
are we here all week and can you come

00:26:23,169 --> 00:26:29,139
assist and yes we're in the vendor area

00:26:26,970 --> 00:26:31,269
we've got like one of those little booze

00:26:29,139 --> 00:26:33,879
on the green and yellow carpets we

00:26:31,269 --> 00:26:36,460
you'll see that that fancy graphic

00:26:33,879 --> 00:26:38,049
should be up on a monitor and we can

00:26:36,460 --> 00:26:39,220
show you you know where we've got a

00:26:38,049 --> 00:26:40,210
still in beta but we can show you where

00:26:39,220 --> 00:26:41,859
we've gotten you have a chat with us and

00:26:40,210 --> 00:26:44,409
my colleague by the way is one of the

00:26:41,859 --> 00:26:49,169
developers on pi doc test so some of you

00:26:44,409 --> 00:26:49,169
may have heard of him anyways yes

00:26:51,910 --> 00:26:58,250
okay so the question was what version of

00:26:55,550 --> 00:27:05,060
qu Vanitas are we working with here it

00:26:58,250 --> 00:27:09,980
wasn't okay so it's just an opaque

00:27:05,060 --> 00:27:14,120
number and and it just represents a

00:27:09,980 --> 00:27:15,620
version of the resource compared to the

00:27:14,120 --> 00:27:17,900
last time the resource change now

00:27:15,620 --> 00:27:20,330
depending on the resource type the kind

00:27:17,900 --> 00:27:22,220
that could be anything so for example

00:27:20,330 --> 00:27:23,570
for a node it could be because some of

00:27:22,220 --> 00:27:25,070
the node attributes have changed it

00:27:23,570 --> 00:27:26,570
could be because the label has been

00:27:25,070 --> 00:27:29,930
updated on a replication on a replica

00:27:26,570 --> 00:27:31,370
set so that's when the version number is

00:27:29,930 --> 00:27:33,890
incremented not just when you make the

00:27:31,370 --> 00:27:37,420
call but when humidities itself changes

00:27:33,890 --> 00:27:37,420
the the resource

00:27:40,980 --> 00:27:47,549
No so so what I should have said was

00:27:44,900 --> 00:27:49,110
don't don't rely on the version numbers

00:27:47,549 --> 00:27:52,140
just always get the latest version of

00:27:49,110 --> 00:27:54,000
the object so I show you I showed you

00:27:52,140 --> 00:27:55,650
the version numbers I was kind of

00:27:54,000 --> 00:27:56,880
advised don't show people the version

00:27:55,650 --> 00:28:01,820
numbers but I just thought it was an

00:27:56,880 --> 00:28:01,820
interesting thing so I did that yeah

00:28:16,780 --> 00:28:19,780
okay

00:28:31,060 --> 00:28:36,220
okay come to the booth asked my

00:28:34,030 --> 00:28:37,300
colleague and because yet and he'll

00:28:36,220 --> 00:28:38,350
he'll give you a really good answer I'll

00:28:37,300 --> 00:28:42,210
give you an average answer he'll give

00:28:38,350 --> 00:28:42,210

YouTube URL: https://www.youtube.com/watch?v=jJGJy0MUvZw


