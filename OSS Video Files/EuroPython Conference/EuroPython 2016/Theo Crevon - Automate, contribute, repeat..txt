Title: Theo Crevon - Automate, contribute, repeat.
Publication date: 2016-07-29
Playlist: EuroPython 2016
Description: 
	Theo Crevon - Automate, contribute, repeat.
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(https://ep2016.europython.eu//conference/talks/automate-contribute-repeat)

At Ableton we love music and we love open-source. Ansible is an
amazing tool which allows us to free more time for music by automating
boring and repetitive tasks, and to contribute back to the open-source
community with ease. Here's an opportunity to share our love for it,
our experience with it, and our contributions to it with you.

-----

Computers are never as convenient as when they work for us. If you
agree with this motto, then Ansible, a deployment and automation tool
written in Python, might come in handy.

At Ableton, Ansible is involved in every aspect of deployment and
automation. From local machine setup, to vm creation and deployment in
our self-hosted datacenter, to our services in the immensity of the
cloud.

Because it is dead simple to use, can deal with any number of hosts in
parallel and has robust compatibility with Unix as well as Windows
systems, you will probably never have to write a shell script again.

Because it is written in Python and exposes a clean, extensible and
easy to adapt design and architecture; contributing features to the
project and fixing the bugs you might encounter during the journey is
extremely easy.

At Ableton we love music and we love open-source. Ansible is an
amazing tool which allows us to free more time for music by automating
boring and repetitive tasks, and to contribute back to the open-source
community with ease. Here's an opportunity to share our love for it,
our experience with it, and our contributions to it with you.

Automate, contribute, repeat.
Captions: 
	00:00:00,000 --> 00:00:15,690
with teal um welcome new people give him

00:00:04,830 --> 00:00:18,420
some applause so hi everyone as a

00:00:15,690 --> 00:00:20,279
disclosure my excuses for the nice

00:00:18,420 --> 00:00:22,710
chrome bar I just started with this

00:00:20,279 --> 00:00:26,580
reveal GS thingy and I can't get it to

00:00:22,710 --> 00:00:29,519
work properly so whatever so we're going

00:00:26,580 --> 00:00:32,930
to talk about automation and as a short

00:00:29,519 --> 00:00:36,390
presentation so until I work for ableton

00:00:32,930 --> 00:00:38,489
and basically I tend to describe myself

00:00:36,390 --> 00:00:41,629
as someone whispers to computers like

00:00:38,489 --> 00:00:48,120
I'm more of a cure than a proper

00:00:41,629 --> 00:00:51,809
scientific engineer so working with

00:00:48,120 --> 00:00:56,340
computers is pretty cool right but

00:00:51,809 --> 00:00:59,940
making music is definitely way cooler so

00:00:56,340 --> 00:01:02,940
why won't why don't we basically achieve

00:00:59,940 --> 00:01:05,250
the dreams of our grandfathers and so on

00:01:02,940 --> 00:01:09,090
and make computers work for us so we

00:01:05,250 --> 00:01:12,630
have more time to make music so if you

00:01:09,090 --> 00:01:15,540
don't know Ableton we are music company

00:01:12,630 --> 00:01:21,119
we basically build softwares and adware

00:01:15,540 --> 00:01:24,600
that enable music makers from building a

00:01:21,119 --> 00:01:27,630
track to playing it live the company was

00:01:24,600 --> 00:01:29,549
founded 16 years ago so we're not

00:01:27,630 --> 00:01:32,790
exactly a start-up anymore although we

00:01:29,549 --> 00:01:36,540
still we're still a rather mid-sized

00:01:32,790 --> 00:01:38,759
company we're back bill bill in based

00:01:36,540 --> 00:01:41,720
and the company was founded in berlin by

00:01:38,759 --> 00:01:44,340
Berliners and our founders are

00:01:41,720 --> 00:01:45,770
electronic musicians well not anymore

00:01:44,340 --> 00:01:52,039
but they have been

00:01:45,770 --> 00:01:56,390
musicians for a while our most known and

00:01:52,039 --> 00:01:58,789
used product so far is live life is what

00:01:56,390 --> 00:02:00,799
we call a dough so basically it's a

00:01:58,789 --> 00:02:04,130
software that allows you to build a

00:02:00,799 --> 00:02:06,350
track and to perform it live it's based

00:02:04,130 --> 00:02:07,729
on two views don't you see here with

00:02:06,350 --> 00:02:10,160
that we call the session view where you

00:02:07,729 --> 00:02:12,200
basically create Clips so it's small

00:02:10,160 --> 00:02:18,290
loops that you can play and you can

00:02:12,200 --> 00:02:20,799
arrange as you want and right now in the

00:02:18,290 --> 00:02:24,260
let's call it the mainstream music

00:02:20,799 --> 00:02:29,510
industry it's one of the most used

00:02:24,260 --> 00:02:31,760
software we also have push so basically

00:02:29,510 --> 00:02:33,170
pushes some sort of fancy midi

00:02:31,760 --> 00:02:37,040
controller so if you're not familiar

00:02:33,170 --> 00:02:40,400
with music it's basically an interface

00:02:37,040 --> 00:02:42,530
that will send signals note play like a

00:02:40,400 --> 00:02:44,660
small protocol that will tell the

00:02:42,530 --> 00:02:48,730
computer what kind of sound to play at

00:02:44,660 --> 00:02:53,209
what pitch and when to play it and

00:02:48,730 --> 00:02:55,400
finally we recently released link and

00:02:53,209 --> 00:02:58,940
link is an iOS framework that

00:02:55,400 --> 00:03:01,389
synchronizes devices and more

00:02:58,940 --> 00:03:04,549
specifically synchronizes very bit time

00:03:01,389 --> 00:03:07,459
so for example if you're making music on

00:03:04,549 --> 00:03:10,459
your Mac and someone comes in with an

00:03:07,459 --> 00:03:12,829
iPad they can connect to each other and

00:03:10,459 --> 00:03:15,709
you can be sure that they will play in

00:03:12,829 --> 00:03:18,230
time so if someone is starting a

00:03:15,709 --> 00:03:20,000
drumbeat for example and you had a

00:03:18,230 --> 00:03:21,590
baseline on top of it they will play

00:03:20,000 --> 00:03:25,040
together on time there won't be any

00:03:21,590 --> 00:03:29,540
phase or any weird stuff like that and

00:03:25,040 --> 00:03:32,030
we basically provided as an iOS as an

00:03:29,540 --> 00:03:35,829
iOS framework to developers and they

00:03:32,030 --> 00:03:35,829
implemented in their iPad apps

00:03:37,210 --> 00:03:45,710
so this projects are big and complex

00:03:42,460 --> 00:03:48,890
when I say this project I tend to

00:03:45,710 --> 00:03:51,770
include live push and link all into the

00:03:48,890 --> 00:03:55,280
same bucket because basically there are

00:03:51,770 --> 00:03:58,160
all part of one big ecosystem and if you

00:03:55,280 --> 00:04:01,100
think of live more specifically it's a

00:03:58,160 --> 00:04:04,190
huge monolithic C++ code base so we

00:04:01,100 --> 00:04:09,620
basically have I think millions of lines

00:04:04,190 --> 00:04:13,040
of code and thousands of files they

00:04:09,620 --> 00:04:17,330
involve cute which is a huge library for

00:04:13,040 --> 00:04:20,540
basically building GUI we include boost

00:04:17,330 --> 00:04:23,660
to which is big c++ library but there's

00:04:20,540 --> 00:04:26,960
all sorts of fancy stuff and we have

00:04:23,660 --> 00:04:29,120
Python in the build system and it's also

00:04:26,960 --> 00:04:31,070
included in push so as a for the

00:04:29,120 --> 00:04:36,530
communica munication layer and for

00:04:31,070 --> 00:04:41,210
scripting purpose now what's interesting

00:04:36,530 --> 00:04:44,090
in this is that I was working in

00:04:41,210 --> 00:04:49,070
startups before and I was doing back in

00:04:44,090 --> 00:04:51,860
and system test basically and I could

00:04:49,070 --> 00:04:54,260
use all sorts of fancy tools right like

00:04:51,860 --> 00:04:56,570
doctor and all the stuff I could deploy

00:04:54,260 --> 00:04:59,960
stuff on AWS it was not a problem and

00:04:56,570 --> 00:05:03,680
for one simple reason it was that we

00:04:59,960 --> 00:05:07,490
were using linux and once you get out of

00:05:03,680 --> 00:05:09,770
its ecosystem you realize that if you

00:05:07,490 --> 00:05:13,490
have to build something against OSX

00:05:09,770 --> 00:05:16,400
windows or iOS well all these tools

00:05:13,490 --> 00:05:19,450
become suddenly most vessels become

00:05:16,400 --> 00:05:19,450
suddenly unavailable

00:05:20,290 --> 00:05:28,940
but still we're not doing rocket science

00:05:24,260 --> 00:05:31,280
but what we call DSP digital signal

00:05:28,940 --> 00:05:34,760
processing a serious business it's a

00:05:31,280 --> 00:05:38,000
very complex topic and most users rely

00:05:34,760 --> 00:05:40,820
on our software's reliability so

00:05:38,000 --> 00:05:43,490
basically if you're Skrillex and you're

00:05:40,820 --> 00:05:45,110
playing in front of say forty thousand

00:05:43,490 --> 00:05:47,480
people even want life to crash in the

00:05:45,110 --> 00:05:49,280
middle of the gig rights time if you're

00:05:47,480 --> 00:05:51,080
playing at the bear game in Berlin

00:05:49,280 --> 00:05:53,090
during all nights you don't want it to

00:05:51,080 --> 00:05:56,540
just stop or start doing in the

00:05:53,090 --> 00:05:58,220
middle of your set so although we don't

00:05:56,540 --> 00:06:00,410
have access to all these fancy tools to

00:05:58,220 --> 00:06:03,020
help us build a better software faster

00:06:00,410 --> 00:06:08,500
and a more secure way we have to find a

00:06:03,020 --> 00:06:08,500
way to reach that level of quality

00:06:10,880 --> 00:06:18,330
the live echo system involves

00:06:15,240 --> 00:06:19,920
long-billed times so basically I think

00:06:18,330 --> 00:06:21,870
we have the same kind of problem at

00:06:19,920 --> 00:06:24,090
Texas projects like chromium for example

00:06:21,870 --> 00:06:26,400
we are building a huge software that

00:06:24,090 --> 00:06:31,080
takes a very very long time to build

00:06:26,400 --> 00:06:35,040
sometimes we that involves a very

00:06:31,080 --> 00:06:37,170
complex and long workflow like from a

00:06:35,040 --> 00:06:41,010
feature ID to its implementation it can

00:06:37,170 --> 00:06:43,770
take up take up two months sorry and we

00:06:41,010 --> 00:06:46,620
also have a culture of perfection so as

00:06:43,770 --> 00:06:48,690
I said when we put a release out there

00:06:46,620 --> 00:06:50,730
we don't want users to have the software

00:06:48,690 --> 00:06:55,350
crashing in the middle in the middle of

00:06:50,730 --> 00:06:59,340
your set also something very specific to

00:06:55,350 --> 00:07:01,620
this class of software is at most people

00:06:59,340 --> 00:07:04,410
that work in studios for example don't

00:07:01,620 --> 00:07:06,330
have internet so they won't update ver

00:07:04,410 --> 00:07:08,520
software all the time they will updated

00:07:06,330 --> 00:07:11,040
from time to time but we also are aware

00:07:08,520 --> 00:07:14,600
of users who are running very old

00:07:11,040 --> 00:07:19,860
version of lives and are not wishing to

00:07:14,600 --> 00:07:22,530
upgrade it so all of this leads to the

00:07:19,860 --> 00:07:24,720
need for automation so we have to

00:07:22,530 --> 00:07:26,490
automate as many things as we can

00:07:24,720 --> 00:07:30,770
whenever it comes to build it or

00:07:26,490 --> 00:07:32,850
whenever it comes to release it so sure

00:07:30,770 --> 00:07:34,710
you could tell me we could automate

00:07:32,850 --> 00:07:37,700
everything with script like with bash

00:07:34,710 --> 00:07:42,090
scripts by filling fabric you name it

00:07:37,700 --> 00:07:44,010
actually we use basic scripts basic not

00:07:42,090 --> 00:07:47,610
basic that scripts for the build system

00:07:44,010 --> 00:07:51,690
already which are in Python but if you

00:07:47,610 --> 00:07:54,479
ask me scripts are very hard to keep

00:07:51,690 --> 00:07:56,960
organized to maintain some time and I'm

00:07:54,479 --> 00:07:59,090
thinking more of bastards here

00:07:56,960 --> 00:08:03,069
and I'm not even talking about extending

00:07:59,090 --> 00:08:05,720
and yeah let's just be honest like

00:08:03,069 --> 00:08:08,030
scripts are cool but scripts are art and

00:08:05,720 --> 00:08:12,050
very often cryptic I wouldn't read some

00:08:08,030 --> 00:08:15,560
of my scripts from two years ago we can

00:08:12,050 --> 00:08:18,139
also use proper deployment systems many

00:08:15,560 --> 00:08:21,400
of you probably already know of puppet

00:08:18,139 --> 00:08:24,440
or chef I used I used them in the past

00:08:21,400 --> 00:08:26,569
to deploy from mid size too big

00:08:24,440 --> 00:08:30,560
infrastructures and I really enjoyed

00:08:26,569 --> 00:08:36,039
them for many different reasons but in

00:08:30,560 --> 00:08:39,020
general I find that this this tools

00:08:36,039 --> 00:08:42,649
always involve the concept of nodes of

00:08:39,020 --> 00:08:44,990
leader or follower and they're not

00:08:42,649 --> 00:08:46,730
really suitable with something and I

00:08:44,990 --> 00:08:50,209
really really like when it comes to

00:08:46,730 --> 00:08:53,839
deployment just masterless systems I

00:08:50,209 --> 00:08:57,260
don't want to have to think of oh do I

00:08:53,839 --> 00:08:59,450
have my client installed on this server

00:08:57,260 --> 00:09:01,220
and where's my master and can they talk

00:08:59,450 --> 00:09:03,140
to each other and all this thing what I

00:09:01,220 --> 00:09:06,260
want to deploy or automate something I

00:09:03,140 --> 00:09:10,370
wanted to just work and also something

00:09:06,260 --> 00:09:13,700
that's a bit too much to my taste is

00:09:10,370 --> 00:09:16,279
that you have a tons of useless

00:09:13,700 --> 00:09:20,300
abstractions and here i think more of

00:09:16,279 --> 00:09:22,130
puppet rather than chef but i don't want

00:09:20,300 --> 00:09:23,810
to have to learn a new language I don't

00:09:22,130 --> 00:09:26,720
want to have to think of where do I put

00:09:23,810 --> 00:09:28,880
all these columns and all this stuff so

00:09:26,720 --> 00:09:31,670
basically the systems are great for

00:09:28,880 --> 00:09:33,680
certain class of systems but when you

00:09:31,670 --> 00:09:38,959
think of Ableton and what we're doing it

00:09:33,680 --> 00:09:41,630
doesn't really fit so that's why I

00:09:38,959 --> 00:09:42,980
introduced sensible when I arrived at

00:09:41,630 --> 00:09:45,470
Ableton

00:09:42,980 --> 00:09:47,690
if you're not familiar with ansible it's

00:09:45,470 --> 00:09:51,550
a deployment system just like puppet or

00:09:47,690 --> 00:09:56,779
deaf or you have bursting and very good

00:09:51,550 --> 00:10:00,440
lead an ansible is basically declarative

00:09:56,779 --> 00:10:03,230
so it's based on the llamo sent syntax

00:10:00,440 --> 00:10:06,529
everything is written in llamo at all

00:10:03,230 --> 00:10:08,120
times apart from most declaration that

00:10:06,529 --> 00:10:12,170
doing any files but that's really

00:10:08,120 --> 00:10:15,470
minority of the files and you just state

00:10:12,170 --> 00:10:18,470
what you want to do and if you look at

00:10:15,470 --> 00:10:20,750
this example you can see that you have a

00:10:18,470 --> 00:10:22,490
name for each task and then you have a

00:10:20,750 --> 00:10:24,470
module so for example the first one is

00:10:22,490 --> 00:10:26,180
on brew and then you have a copy and

00:10:24,470 --> 00:10:28,850
then another copy and then you say oh I

00:10:26,180 --> 00:10:31,940
want a file being created so whenever

00:10:28,850 --> 00:10:34,490
you open these files you just you don't

00:10:31,940 --> 00:10:36,290
really need to make to make any specific

00:10:34,490 --> 00:10:38,630
effort to understand what's happening

00:10:36,290 --> 00:10:41,480
here and if you compare that to a bash

00:10:38,630 --> 00:10:43,399
script I can tell you it will take you

00:10:41,480 --> 00:10:45,709
probably five minutes in the most

00:10:43,399 --> 00:10:48,500
complex cases to understand what this is

00:10:45,709 --> 00:10:50,269
about where has a bash script with all

00:10:48,500 --> 00:10:51,769
this dash y dash blah blah blah

00:10:50,269 --> 00:10:54,139
everywhere and you'd never really know

00:10:51,769 --> 00:10:57,800
where to put the square brackets just

00:10:54,139 --> 00:10:59,930
now let it go another thing that's great

00:10:57,800 --> 00:11:03,639
about it is that it's sequential so

00:10:59,930 --> 00:11:08,389
everything will be executed in order and

00:11:03,639 --> 00:11:10,639
it will only rely on the structure of

00:11:08,389 --> 00:11:14,569
your project so ansible enforces a very

00:11:10,639 --> 00:11:17,810
strict structure where you define roles

00:11:14,569 --> 00:11:21,620
and UD far you define variables and they

00:11:17,810 --> 00:11:24,050
all work in a scope system and once you

00:11:21,620 --> 00:11:26,480
get familiar with it it's very easy to

00:11:24,050 --> 00:11:28,220
understand what's happening and when

00:11:26,480 --> 00:11:30,949
there's an error where it's actually

00:11:28,220 --> 00:11:34,120
happening and why because you just have

00:11:30,949 --> 00:11:34,120
to follow the white rabbit

00:11:35,290 --> 00:11:41,410
something I really like about it too is

00:11:38,030 --> 00:11:44,720
that ansible as few but very efficient

00:11:41,410 --> 00:11:47,690
abstractions I can I can name a few of

00:11:44,720 --> 00:11:50,350
them the most common is registered so

00:11:47,690 --> 00:11:54,320
register is simply declaring a variable

00:11:50,350 --> 00:11:57,260
so you take a task so all these steps

00:11:54,320 --> 00:12:01,220
that you see are called tasks and when

00:11:57,260 --> 00:12:06,050
very executed they return a Python Jason

00:12:01,220 --> 00:12:08,840
object and this object is basically

00:12:06,050 --> 00:12:10,940
describing the outcome of this task and

00:12:08,840 --> 00:12:13,340
in this case you can say well I want

00:12:10,940 --> 00:12:15,770
this just an object to be called in the

00:12:13,340 --> 00:12:19,580
case of the first task to accept it

00:12:15,770 --> 00:12:21,800
exists sorry and you can later on use it

00:12:19,580 --> 00:12:25,160
so for example if you look at the second

00:12:21,800 --> 00:12:27,680
task you are when who exist is false so

00:12:25,160 --> 00:12:30,820
when is another keyword that basically

00:12:27,680 --> 00:12:33,080
helps you defining conditions you have

00:12:30,820 --> 00:12:35,420
with items that you see in the light

00:12:33,080 --> 00:12:38,810
last one so i can create a variable

00:12:35,420 --> 00:12:40,850
somewhere in the variable files and i

00:12:38,810 --> 00:12:44,240
can call it my precious files of course

00:12:40,850 --> 00:12:46,940
and then if I use with my with items

00:12:44,240 --> 00:12:51,620
with my variable I can just pass around

00:12:46,940 --> 00:12:53,610
this item thinking to my expanded

00:12:51,620 --> 00:12:56,250
strings

00:12:53,610 --> 00:12:59,720
and that's another really great thing

00:12:56,250 --> 00:13:02,670
about it is that all of these values

00:12:59,720 --> 00:13:05,070
could basically be strings and they can

00:13:02,670 --> 00:13:07,529
all be interpolated with a Virginia to

00:13:05,070 --> 00:13:10,019
syntax so we get a lot of flexibility

00:13:07,529 --> 00:13:11,790
and it's still at a very low level

00:13:10,019 --> 00:13:13,470
because you only have variables

00:13:11,790 --> 00:13:16,680
conditions and loops basically that's

00:13:13,470 --> 00:13:18,720
the only thing you get but you can mess

00:13:16,680 --> 00:13:23,029
around a bit with it to get to gain some

00:13:18,720 --> 00:13:26,910
flexibility with some templating sorry

00:13:23,029 --> 00:13:30,959
and as ice as I said everything relies

00:13:26,910 --> 00:13:33,390
on the project structure and you can

00:13:30,959 --> 00:13:35,370
modify it a bit but canonically you

00:13:33,390 --> 00:13:37,740
always have only one way to organize

00:13:35,370 --> 00:13:41,790
your project to organize your roles and

00:13:37,740 --> 00:13:44,310
to organize your PlayBook so the project

00:13:41,790 --> 00:13:47,700
is the top level structure and it's the

00:13:44,310 --> 00:13:51,420
first example and you can see that you

00:13:47,700 --> 00:13:52,800
have it's not all the things you can put

00:13:51,420 --> 00:13:55,230
in there but the most important are

00:13:52,800 --> 00:13:57,600
there you have the group bars so in

00:13:55,230 --> 00:14:01,860
ansible you define groups of oast so for

00:13:57,600 --> 00:14:04,560
example you have I don't know Windows

00:14:01,860 --> 00:14:06,029
servers or web servers or DB servers

00:14:04,560 --> 00:14:08,250
you're going to create groups and you

00:14:06,029 --> 00:14:10,589
can attach vars to his group's directly

00:14:08,250 --> 00:14:11,760
in this file in these files you have the

00:14:10,589 --> 00:14:14,279
inventory where you're going to

00:14:11,760 --> 00:14:17,940
reference all the hosts that you want to

00:14:14,279 --> 00:14:21,390
talk to you have the rolls and rolls are

00:14:17,940 --> 00:14:23,040
basically kind of modules so you're

00:14:21,390 --> 00:14:25,470
going to define the role for engine X

00:14:23,040 --> 00:14:28,140
which will be in charge of deploying an

00:14:25,470 --> 00:14:30,089
angelic server you can create a role for

00:14:28,140 --> 00:14:32,600
installing docker for installing

00:14:30,089 --> 00:14:35,430
homebrew all this kind of stuff and

00:14:32,600 --> 00:14:37,860
something very cool too is the vault so

00:14:35,430 --> 00:14:40,500
I will talk about it later but ansible

00:14:37,860 --> 00:14:42,959
is able to encrypt all your secrets and

00:14:40,500 --> 00:14:44,840
you can access them later on in your

00:14:42,959 --> 00:14:48,950
tasks similis lee

00:14:44,840 --> 00:14:52,010
in this roles you have files templates

00:14:48,950 --> 00:14:54,920
task and lures d false meta and

00:14:52,010 --> 00:14:56,360
variables basically files and templates

00:14:54,920 --> 00:14:58,960
are basically the same thing so you

00:14:56,360 --> 00:15:01,460
locally create files or ginger files and

00:14:58,960 --> 00:15:03,920
later on you can say well I want it

00:15:01,460 --> 00:15:06,770
being created and replace this variable

00:15:03,920 --> 00:15:08,270
with this value task are what i was

00:15:06,770 --> 00:15:11,600
showing before and that you can see

00:15:08,270 --> 00:15:13,430
under underneath it basically all the

00:15:11,600 --> 00:15:16,640
steps that the system has to go through

00:15:13,430 --> 00:15:21,050
to generate the final system state that

00:15:16,640 --> 00:15:23,980
you want and variables are like well I

00:15:21,050 --> 00:15:26,270
want to match variables to values and

00:15:23,980 --> 00:15:28,250
another interesting thing are the meta

00:15:26,270 --> 00:15:32,810
so it's basically for including things

00:15:28,250 --> 00:15:36,290
so if you say that dr. relies on some

00:15:32,810 --> 00:15:38,470
fancy linux kernel or file system that

00:15:36,290 --> 00:15:41,870
you have created you can do it there and

00:15:38,470 --> 00:15:45,670
all of this is aggregated in small files

00:15:41,870 --> 00:15:48,290
that we call playbooks and a playbook is

00:15:45,670 --> 00:15:52,160
basically binding all of this stuff

00:15:48,290 --> 00:15:54,800
together so you give it a group of oats

00:15:52,160 --> 00:15:58,790
or a single oats that you want to run

00:15:54,800 --> 00:16:00,350
your project onto you tell it what kind

00:15:58,790 --> 00:16:02,660
of connection introduced if it should

00:16:00,350 --> 00:16:05,930
use facts which are kind of reserved

00:16:02,660 --> 00:16:08,360
variables you can provided VAR files so

00:16:05,930 --> 00:16:10,280
in this case that's a vault file so you

00:16:08,360 --> 00:16:15,260
can say well I have my secrets vault

00:16:10,280 --> 00:16:17,450
which is encrypted in aes 256 you can

00:16:15,260 --> 00:16:18,920
define your room files your own virus

00:16:17,450 --> 00:16:21,530
and finally you can never call your

00:16:18,920 --> 00:16:24,650
roles so in my case it would be OSX

00:16:21,530 --> 00:16:28,300
James Jenkins slave or you can also call

00:16:24,650 --> 00:16:30,980
it ask directly

00:16:28,300 --> 00:16:33,920
another really awesome thing about

00:16:30,980 --> 00:16:36,380
ansible and that's mainly I think why I

00:16:33,920 --> 00:16:40,040
personally prefer it is that it works on

00:16:36,380 --> 00:16:45,589
over ssh and win arm everything you do

00:16:40,040 --> 00:16:47,720
is done over ssh or win arm and what

00:16:45,589 --> 00:16:51,199
that basically means is that ansible is

00:16:47,720 --> 00:16:55,699
able to deploy as many servers as you

00:16:51,199 --> 00:16:58,339
want in parallel on a normal laptop as

00:16:55,699 --> 00:16:59,839
long as you have an ssh connection when

00:16:58,339 --> 00:17:01,070
arm is a bit more tricky because you

00:16:59,839 --> 00:17:04,309
have to make a bit of setup on the

00:17:01,070 --> 00:17:08,299
windows on the windows side but still

00:17:04,309 --> 00:17:11,350
it's pretty trivial as I mentioned

00:17:08,299 --> 00:17:15,140
before you have a vault that comes in

00:17:11,350 --> 00:17:16,669
with principal something that's great

00:17:15,140 --> 00:17:18,470
with that is where its yet to the very

00:17:16,669 --> 00:17:20,240
ml file you basically put variables in

00:17:18,470 --> 00:17:22,189
there and then you say a ansible volt

00:17:20,240 --> 00:17:24,290
this is my file please encrypt it I

00:17:22,189 --> 00:17:28,370
don't want people to see my github my

00:17:24,290 --> 00:17:30,590
token my AWS stocking on github and then

00:17:28,370 --> 00:17:33,020
all you have to do is just when you run

00:17:30,590 --> 00:17:34,880
and sybil you just add a well this is my

00:17:33,020 --> 00:17:39,230
volt and this is my password and deal

00:17:34,880 --> 00:17:43,070
with it you have a galaxy which is a

00:17:39,230 --> 00:17:46,549
pretty fancy name if you ask me where

00:17:43,070 --> 00:17:50,510
you can upload your also say you have

00:17:46,549 --> 00:17:52,820
created a specific role for whatever you

00:17:50,510 --> 00:17:54,799
can upload it and share it there and

00:17:52,820 --> 00:17:56,750
when you want to make something very

00:17:54,799 --> 00:17:59,299
common like I don't know installed

00:17:56,750 --> 00:18:01,370
openssh server you can be sure that

00:17:59,299 --> 00:18:04,309
someone will have made it there but I

00:18:01,370 --> 00:18:08,330
will talk about it in a bit more detail

00:18:04,309 --> 00:18:10,340
later on but if uncibal is

00:18:08,330 --> 00:18:11,260
straightforward if you compare it to

00:18:10,340 --> 00:18:15,970
over

00:18:11,260 --> 00:18:19,560
derivatives now I'd like to go through

00:18:15,970 --> 00:18:22,960
some use cases that we run through

00:18:19,560 --> 00:18:24,970
because we don't really have the same

00:18:22,960 --> 00:18:29,200
use cases as most companies that are

00:18:24,970 --> 00:18:31,630
there i think and i selected like free

00:18:29,200 --> 00:18:34,930
use case that are pretty representative

00:18:31,630 --> 00:18:37,360
of what you can do with ansible so

00:18:34,930 --> 00:18:40,270
basically you can use it to automate

00:18:37,360 --> 00:18:42,490
your computer and what i mean by that is

00:18:40,270 --> 00:18:44,590
that you can just deploy your

00:18:42,490 --> 00:18:47,530
workstation you won't ever need another

00:18:44,590 --> 00:18:49,900
bash script to do that anymore and deal

00:18:47,530 --> 00:18:52,540
with omi on OSX on my own line x or

00:18:49,900 --> 00:18:54,490
whatever and use this weird syntax the

00:18:52,540 --> 00:18:58,120
last batch script you will use is the

00:18:54,490 --> 00:19:01,470
one to automatically install uncibal on

00:18:58,120 --> 00:19:04,540
your machine and to that's what we call

00:19:01,470 --> 00:19:06,400
that's what brew calls tapping but

00:19:04,540 --> 00:19:08,080
basically telling for example homebrew

00:19:06,400 --> 00:19:11,470
which is the package manager one of the

00:19:08,080 --> 00:19:16,270
package manager for OSX where to go find

00:19:11,470 --> 00:19:18,730
softwares and it's really as simple as

00:19:16,270 --> 00:19:21,570
telling ansible in an inventory file

00:19:18,730 --> 00:19:24,400
well I want to talk to logo lost and

00:19:21,570 --> 00:19:27,460
just use the local connection to do that

00:19:24,400 --> 00:19:29,410
and then you have two different commands

00:19:27,460 --> 00:19:31,230
there you have the ansible playbook

00:19:29,410 --> 00:19:34,450
veterans the playbook fire I show you

00:19:31,230 --> 00:19:36,730
where you can call roles call tasks and

00:19:34,450 --> 00:19:39,940
variable files and all the stuff but you

00:19:36,730 --> 00:19:42,340
can also use the ansible just ansible

00:19:39,940 --> 00:19:44,230
commands and you can pass it oast and

00:19:42,340 --> 00:19:47,500
then give it just a command to run on

00:19:44,230 --> 00:19:50,410
the command line directly and what you

00:19:47,500 --> 00:19:53,440
can do with it is that if you are on a

00:19:50,410 --> 00:19:55,360
Mac for example you can automate the

00:19:53,440 --> 00:19:58,420
installation of system packages and your

00:19:55,360 --> 00:20:01,090
dev tools and so on with included on bro

00:19:58,420 --> 00:20:04,000
package so as you can see you define a

00:20:01,090 --> 00:20:06,119
variable that's ash hashmap in which you

00:20:04,000 --> 00:20:08,369
say i want MOOC and we get

00:20:06,119 --> 00:20:11,579
whatever and then later on you can just

00:20:08,369 --> 00:20:13,769
say well I want to install all the all

00:20:11,579 --> 00:20:19,259
the elements in homebrew packages and I

00:20:13,769 --> 00:20:21,539
want the latest version bit same for

00:20:19,259 --> 00:20:24,499
your desktop app like you want to have

00:20:21,539 --> 00:20:26,669
spotify virtualbox whatever you like

00:20:24,499 --> 00:20:29,129
installed you can do it too with our

00:20:26,669 --> 00:20:31,829
module that's called cask because of um

00:20:29,129 --> 00:20:34,859
brew cask which is a subset of imbrue

00:20:31,829 --> 00:20:37,469
and something that's worth mentioning

00:20:34,859 --> 00:20:39,299
though is that although you have the

00:20:37,469 --> 00:20:42,149
interface for that directly in ansible

00:20:39,299 --> 00:20:44,999
as for a lot of services like console

00:20:42,149 --> 00:20:48,149
for example you generally have to

00:20:44,999 --> 00:20:49,889
install homebrew by yourself but ansible

00:20:48,149 --> 00:20:53,609
can do it for you you can write a role

00:20:49,889 --> 00:20:55,439
to install on boo you can use it to set

00:20:53,609 --> 00:20:57,299
up your dev environment so you can

00:20:55,439 --> 00:20:59,789
update your system settings you can

00:20:57,299 --> 00:21:02,069
install a pool and install your dot

00:20:59,789 --> 00:21:04,439
files and you can also pull some

00:21:02,069 --> 00:21:07,499
favourite git repos you can also trigger

00:21:04,439 --> 00:21:09,709
some bills and anything you can think

00:21:07,499 --> 00:21:12,569
that's really the great thing about it

00:21:09,709 --> 00:21:15,059
so to sum it up it's like you do the

00:21:12,569 --> 00:21:17,759
work once you keep it up to date and you

00:21:15,059 --> 00:21:21,059
will never ever lose hours reinstalling

00:21:17,759 --> 00:21:22,559
your workstation and I also tend to

00:21:21,059 --> 00:21:24,509
think that it's pretty great if you're

00:21:22,559 --> 00:21:27,959
looking into a good solution to onboard

00:21:24,509 --> 00:21:31,819
some engineers like in our case we could

00:21:27,959 --> 00:21:34,979
perfectly say that we install all the

00:21:31,819 --> 00:21:38,279
Xcode tuition and all the sea make stuff

00:21:34,979 --> 00:21:40,739
all the cheap stuff directly with just

00:21:38,279 --> 00:21:44,460
one comment that based on an ansible

00:21:40,739 --> 00:21:46,530
playbook that we would keep up to date

00:21:44,460 --> 00:21:49,530
so you don't really need shell scripts

00:21:46,530 --> 00:21:52,200
anymore to do this stuff and actually

00:21:49,530 --> 00:21:55,070
something that's really awesome about it

00:21:52,200 --> 00:21:57,930
is that it works on most platforms so

00:21:55,070 --> 00:22:01,020
whether you're running linux OS X or

00:21:57,930 --> 00:22:03,060
Windows it will work the same way you

00:22:01,020 --> 00:22:05,490
might have to use some dedicated modules

00:22:03,060 --> 00:22:07,680
for Windows but that's basically it and

00:22:05,490 --> 00:22:09,210
you might have to set up a bit but

00:22:07,680 --> 00:22:14,850
that's windows right you're used to it

00:22:09,210 --> 00:22:18,000
now something we do too is to deploy

00:22:14,850 --> 00:22:21,480
well nothing fancy but small apps in the

00:22:18,000 --> 00:22:25,290
clouds I can think of two very simple

00:22:21,480 --> 00:22:26,910
examples in our offices we have a

00:22:25,290 --> 00:22:30,120
gateway so we have a big fire wall

00:22:26,910 --> 00:22:33,480
that's keeping people from going on

00:22:30,120 --> 00:22:35,580
websites they shouldn't go home right so

00:22:33,480 --> 00:22:38,670
we deploy a gateway we deploy some small

00:22:35,580 --> 00:22:40,680
dashboards to analyze what our users are

00:22:38,670 --> 00:22:43,680
doing with the software how reliable it

00:22:40,680 --> 00:22:46,800
is and so the process in this case is

00:22:43,680 --> 00:22:49,350
still pretty straightforward you create

00:22:46,800 --> 00:22:51,330
a docker image of your app and instable

00:22:49,350 --> 00:22:53,160
can do that for you you just give it the

00:22:51,330 --> 00:22:55,920
path of your app where your docker file

00:22:53,160 --> 00:22:59,100
is you time well I want this name for my

00:22:55,920 --> 00:23:01,740
image the represent to push it to you

00:22:59,100 --> 00:23:06,030
can also tell it if you want to log to

00:23:01,740 --> 00:23:08,280
dr. hub or to your private registry then

00:23:06,030 --> 00:23:10,290
you can tell hen ssible well ok that's

00:23:08,280 --> 00:23:14,250
cool i have a docker container now but i

00:23:10,290 --> 00:23:16,320
want to deploy it so you same as with

00:23:14,250 --> 00:23:18,480
the docker image but there you would do

00:23:16,320 --> 00:23:21,210
it in a playbook so when you look at the

00:23:18,480 --> 00:23:23,550
deployment what often happens is that in

00:23:21,210 --> 00:23:24,780
the playbook you will first set up your

00:23:23,550 --> 00:23:26,430
environment and what I call by

00:23:24,780 --> 00:23:28,770
environment here is like more your

00:23:26,430 --> 00:23:31,080
infrastructure actually so you would

00:23:28,770 --> 00:23:34,600
create your vm and here that's exactly

00:23:31,080 --> 00:23:37,000
what it's doing so this local action

00:23:34,600 --> 00:23:39,100
it's kind of a trick it's not very

00:23:37,000 --> 00:23:40,559
obvious which is not why we're not

00:23:39,100 --> 00:23:43,630
really used to vet an instable

00:23:40,559 --> 00:23:47,080
non-obvious things but well it's that

00:23:43,630 --> 00:23:48,580
way and you can describe that's the

00:23:47,080 --> 00:23:50,980
great thing about it you just described

00:23:48,580 --> 00:23:52,600
what you want you don't really need any

00:23:50,980 --> 00:23:55,030
logic you don't really need to think of

00:23:52,600 --> 00:23:57,700
oh so what should happen and so on you

00:23:55,030 --> 00:24:02,110
just think of your steps and describe

00:23:57,700 --> 00:24:03,789
them and that's basically it but you

00:24:02,110 --> 00:24:06,850
could tell me yeah okay but how do I

00:24:03,789 --> 00:24:09,340
tell ansible that well this vm exists

00:24:06,850 --> 00:24:10,809
now and i want to deploy stuff on it i

00:24:09,340 --> 00:24:14,140
want to put my daughter image my

00:24:10,809 --> 00:24:16,679
daughter container very well that's

00:24:14,140 --> 00:24:18,820
another super cool thing about it

00:24:16,679 --> 00:24:21,309
remember I told you about inventories

00:24:18,820 --> 00:24:23,860
where you list all the hosts you want

00:24:21,309 --> 00:24:25,539
well they can be dynamic too so you can

00:24:23,860 --> 00:24:27,640
perfectly give it a Python script and

00:24:25,539 --> 00:24:30,669
this Python script is going to return a

00:24:27,640 --> 00:24:33,909
JSON object that's listing all the hosts

00:24:30,669 --> 00:24:37,330
that you have created on created on AWS

00:24:33,909 --> 00:24:42,250
and we have a few tags you can very

00:24:37,330 --> 00:24:44,409
rapidly automate the deployment so you

00:24:42,250 --> 00:24:47,169
create your vm you tag it with a certain

00:24:44,409 --> 00:24:49,210
tag and then this inventory will ensure

00:24:47,169 --> 00:24:54,610
that you have a host vets matching this

00:24:49,210 --> 00:24:56,710
tag once you have that that's pretty

00:24:54,610 --> 00:25:00,130
trivial you just bring your vm in in a

00:24:56,710 --> 00:25:01,630
suitable state so if i take the example

00:25:00,130 --> 00:25:05,470
of control which is a small data

00:25:01,630 --> 00:25:09,370
dashboard what we do is that we just say

00:25:05,470 --> 00:25:11,470
well I want all the oast in my security

00:25:09,370 --> 00:25:14,110
group but another way of doing it

00:25:11,470 --> 00:25:17,200
instead of naming your your instances

00:25:14,110 --> 00:25:19,990
you can just refer to a security group I

00:25:17,200 --> 00:25:22,299
want all the slides to be loaded for

00:25:19,990 --> 00:25:24,789
example AWS is going to be all my

00:25:22,299 --> 00:25:27,669
secrets and we're from the vault and

00:25:24,789 --> 00:25:29,679
then sequentially it's going to run for

00:25:27,669 --> 00:25:32,860
all the worlds so base will create some

00:25:29,679 --> 00:25:36,039
users and install some keys ssh server

00:25:32,860 --> 00:25:38,409
is going to create install open openssh

00:25:36,039 --> 00:25:40,540
Dockers install darker and jay Nixon and

00:25:38,409 --> 00:25:43,930
install and configure ingenix and

00:25:40,540 --> 00:25:47,580
going to deploy my hat and how I do that

00:25:43,930 --> 00:25:50,140
it's just you pull your docker image and

00:25:47,580 --> 00:25:52,450
you're going to you don't have to do

00:25:50,140 --> 00:25:55,090
this but it's a pretty nice way of doing

00:25:52,450 --> 00:25:58,060
it you create a system d service to

00:25:55,090 --> 00:26:01,420
start this container and you just start

00:25:58,060 --> 00:26:06,370
it because I will talk about it a bit

00:26:01,420 --> 00:26:09,670
later but in our case we use some sort

00:26:06,370 --> 00:26:11,620
of stateless machines so when we start

00:26:09,670 --> 00:26:13,450
something when we create a new server

00:26:11,620 --> 00:26:15,430
it's already in a state where you just

00:26:13,450 --> 00:26:16,900
want to have to start a few services you

00:26:15,430 --> 00:26:20,350
don't want to deploy anything anymore on

00:26:16,900 --> 00:26:22,150
it so basically automation is like

00:26:20,350 --> 00:26:24,790
playing a rod-like game right you just

00:26:22,150 --> 00:26:26,440
die and retry until it works I'm not

00:26:24,790 --> 00:26:27,880
saying instable is going to solve all

00:26:26,440 --> 00:26:30,570
your problems or it's going to make your

00:26:27,880 --> 00:26:33,820
life super easier that would be lying

00:26:30,570 --> 00:26:36,880
but it will make the task of finding out

00:26:33,820 --> 00:26:39,340
how you should deploy an install famous

00:26:36,880 --> 00:26:44,140
and figure out what's not working much

00:26:39,340 --> 00:26:47,200
easier as with other systems and now the

00:26:44,140 --> 00:26:51,370
important bit is the dark corners I'm

00:26:47,200 --> 00:26:55,450
currently exploring a table done so to

00:26:51,370 --> 00:26:57,640
build a software we use Jenkins in the

00:26:55,450 --> 00:27:00,580
set up where we have a line of semester

00:26:57,640 --> 00:27:05,860
and we have drawings veteran OS X and

00:27:00,580 --> 00:27:10,590
drones veteran windows Jenkins has kind

00:27:05,860 --> 00:27:10,590
of the nervous system of our

00:27:10,779 --> 00:27:15,830
build process but at the moment it's

00:27:14,000 --> 00:27:18,950
pretty hold and some people are managing

00:27:15,830 --> 00:27:20,629
it by hand and what we're doing with

00:27:18,950 --> 00:27:22,879
that is that we're deploying Jenkins on

00:27:20,629 --> 00:27:25,490
an internal vsphere base data center so

00:27:22,879 --> 00:27:28,690
this fair is basically a WS for your own

00:27:25,490 --> 00:27:31,399
data center it's VMware solution and we

00:27:28,690 --> 00:27:33,980
run it on Mac Pro's mac mini windows

00:27:31,399 --> 00:27:36,139
servers we have a bunch of data stores

00:27:33,980 --> 00:27:38,620
and we have sub networks to isolate

00:27:36,139 --> 00:27:43,100
everything the reason for that is that

00:27:38,620 --> 00:27:46,850
when we build live we need to build it

00:27:43,100 --> 00:27:48,620
on a mac we can't say well i'm going to

00:27:46,850 --> 00:27:50,450
cross compile it for mac or i'm going to

00:27:48,620 --> 00:27:52,009
cross compile it for windows that's not

00:27:50,450 --> 00:27:53,960
possible for us we really have to build

00:27:52,009 --> 00:27:58,070
it on the proper architecture to make

00:27:53,960 --> 00:27:59,269
sure that everything is in order and the

00:27:58,070 --> 00:28:00,919
great thing about that is that the

00:27:59,269 --> 00:28:03,669
latest version of instable that came out

00:28:00,919 --> 00:28:06,620
i think in january brought a lot of

00:28:03,669 --> 00:28:08,750
improvements for windows for VMware

00:28:06,620 --> 00:28:11,750
environments and even for ducker but

00:28:08,750 --> 00:28:15,429
beware because it's still a bit buggy

00:28:11,750 --> 00:28:19,970
and the transition was kind of stuff and

00:28:15,429 --> 00:28:23,120
as I said before automation here happens

00:28:19,970 --> 00:28:26,509
in two stages so what we want is to

00:28:23,120 --> 00:28:29,570
create a linux master that's constantly

00:28:26,509 --> 00:28:31,789
replicated so it can just fall and it's

00:28:29,570 --> 00:28:33,350
it's fine and then we create all sorts

00:28:31,789 --> 00:28:37,190
of drones we don't like to call

00:28:33,350 --> 00:28:39,169
themselves with oven drones and this

00:28:37,190 --> 00:28:42,620
happens in two stage first provisioning

00:28:39,169 --> 00:28:45,769
which basically is trying to create a

00:28:42,620 --> 00:28:47,419
reproducible nation-state something we

00:28:45,769 --> 00:28:48,710
can always start them like you press

00:28:47,419 --> 00:28:50,000
Start you know it's going to work and

00:28:48,710 --> 00:28:52,490
it's going to be in the state you want

00:28:50,000 --> 00:28:54,110
it to be and then just the deployment

00:28:52,490 --> 00:28:58,190
which is basically bringing this

00:28:54,110 --> 00:28:59,929
templates to life and in general the

00:28:58,190 --> 00:29:02,299
only thing we have to do in the case of

00:28:59,929 --> 00:29:04,570
Linux master for example starting a few

00:29:02,299 --> 00:29:04,570
containers

00:29:04,750 --> 00:29:10,610
so if we were to sum that up we have

00:29:07,970 --> 00:29:12,980
templates that would provision and we

00:29:10,610 --> 00:29:15,080
deploy this template and give them name

00:29:12,980 --> 00:29:17,720
with a convention to remember basically

00:29:15,080 --> 00:29:20,570
what's there and what's room for the

00:29:17,720 --> 00:29:23,750
provisioning we create a VM we bring it

00:29:20,570 --> 00:29:26,570
in a good enough state with ansible we

00:29:23,750 --> 00:29:28,909
start a vm still with ansible and we

00:29:26,570 --> 00:29:33,700
create a template out of it stowaway

00:29:28,909 --> 00:29:36,019
vincible and our our key is pretty

00:29:33,700 --> 00:29:40,010
straightforward we have a root template

00:29:36,019 --> 00:29:42,169
which is the day's OS it's for security

00:29:40,010 --> 00:29:45,019
purpose I can't really mention I can't

00:29:42,169 --> 00:29:47,539
really get into detail but we have to do

00:29:45,019 --> 00:29:50,019
this this step when we have kickstart

00:29:47,539 --> 00:29:53,389
templates so we configure everything

00:29:50,019 --> 00:29:56,510
that is needed to build so we're going

00:29:53,389 --> 00:29:59,240
to install xcode developer tools see

00:29:56,510 --> 00:30:01,130
make whatever is needed and the last

00:29:59,240 --> 00:30:03,200
stages we create deployable templates

00:30:01,130 --> 00:30:07,370
which are following naming convention

00:30:03,200 --> 00:30:13,309
roll OS date and that's it you just have

00:30:07,370 --> 00:30:16,700
to deploy them all now a bit of sugar on

00:30:13,309 --> 00:30:18,080
top of a cake we use console too so if

00:30:16,700 --> 00:30:20,389
you don't know what this is it's a

00:30:18,080 --> 00:30:22,730
service discovery system that's

00:30:20,389 --> 00:30:26,059
installed on our master and on all our

00:30:22,730 --> 00:30:28,070
slaves and whenever we bring this VMs to

00:30:26,059 --> 00:30:30,669
life does based on this template they

00:30:28,070 --> 00:30:33,529
declare himself and now all the system

00:30:30,669 --> 00:30:35,779
every pieces of the system know each

00:30:33,529 --> 00:30:40,220
other so if you want to automate things

00:30:35,779 --> 00:30:42,289
on Jenkins side or if you want to make

00:30:40,220 --> 00:30:43,940
some some scripting under the hood to

00:30:42,289 --> 00:30:45,289
maintain some certain states you can

00:30:43,940 --> 00:30:49,519
perfectly do that because they know each

00:30:45,289 --> 00:30:52,880
other now there's still some stones left

00:30:49,519 --> 00:30:55,820
in our shoes very honestly in table 2

00:30:52,880 --> 00:30:57,710
point 0 was a disaster there were a lot

00:30:55,820 --> 00:31:00,110
of bugs there were a lot of regressions

00:30:57,710 --> 00:31:03,230
they changed a lot of things that were

00:31:00,110 --> 00:31:05,990
working and ended up not working anymore

00:31:03,230 --> 00:31:08,360
this fear is really nice that was my

00:31:05,990 --> 00:31:10,640
first experience with it I'm an AWS guy

00:31:08,360 --> 00:31:14,390
i started my career I always worked with

00:31:10,640 --> 00:31:15,950
the cloud so it's pretty nice but don't

00:31:14,390 --> 00:31:19,850
ask too many questions right because

00:31:15,950 --> 00:31:22,660
it's a closed source project and Windows

00:31:19,850 --> 00:31:25,340
support is still rough around the edges

00:31:22,660 --> 00:31:27,169
it's a bit untested like what happened

00:31:25,340 --> 00:31:28,669
to me quite often as I'm like eh this

00:31:27,169 --> 00:31:31,520
doesn't work I'm going to fix it and the

00:31:28,669 --> 00:31:36,530
guys just like yeah sure it works on my

00:31:31,520 --> 00:31:38,600
machine so and last but not least

00:31:36,530 --> 00:31:40,730
drinking this kind of hard to automate

00:31:38,600 --> 00:31:45,410
and now we get to the core of what I

00:31:40,730 --> 00:31:47,690
wanted to bring you guys it's ansible is

00:31:45,410 --> 00:31:50,540
the perfect project if you want to get

00:31:47,690 --> 00:31:54,169
into contributing Python code if you're

00:31:50,540 --> 00:31:56,690
a beginner or experienced it's a very

00:31:54,169 --> 00:32:00,890
good entry point so ansible is a widely

00:31:56,690 --> 00:32:02,510
used project it's very very active and I

00:32:00,890 --> 00:32:04,220
think it's a super good entry point if

00:32:02,510 --> 00:32:06,650
you're looking to commit some code in a

00:32:04,220 --> 00:32:08,840
project and when I'm in code I insist on

00:32:06,650 --> 00:32:10,160
code like not documentation or anything

00:32:08,840 --> 00:32:12,919
because the documentation is really

00:32:10,160 --> 00:32:17,990
great already but you can just dig into

00:32:12,919 --> 00:32:20,450
it because all along the journey you

00:32:17,990 --> 00:32:24,290
will lose a lot you will use sorry a lot

00:32:20,450 --> 00:32:26,690
of third-party modules and snippets as I

00:32:24,290 --> 00:32:28,309
wrote it down don't be our hero just do

00:32:26,690 --> 00:32:30,080
it there are a lot of things that are

00:32:28,309 --> 00:32:33,580
already existing that people made and

00:32:30,080 --> 00:32:37,220
problems that people salt for you and

00:32:33,580 --> 00:32:40,309
all this modules and ansible itself once

00:32:37,220 --> 00:32:43,640
in a while will I have what I go less

00:32:40,309 --> 00:32:45,830
frequented corners people that the fate

00:32:43,640 --> 00:32:48,820
of things that people really use like

00:32:45,830 --> 00:32:51,340
you use the vsphere vsphere module or

00:32:48,820 --> 00:32:54,460
everything that's related to vmware

00:32:51,340 --> 00:32:56,440
it happens quite often that it's

00:32:54,460 --> 00:32:59,470
something is varied supposed to work but

00:32:56,440 --> 00:33:00,820
it doesn't really work but that's

00:32:59,470 --> 00:33:02,860
actually the great thing about it

00:33:00,820 --> 00:33:06,030
because now you can just jump into it

00:33:02,860 --> 00:33:09,370
and you can try to fix it yourself and

00:33:06,030 --> 00:33:12,750
instead of being painful it's actually

00:33:09,370 --> 00:33:16,330
very easy and rewarding to dive into it

00:33:12,750 --> 00:33:19,090
fix it adapt it or even had something to

00:33:16,330 --> 00:33:24,610
it and I really insist on that it's

00:33:19,090 --> 00:33:27,130
really simple for example the umbro

00:33:24,610 --> 00:33:29,830
installer role that we use to make sure

00:33:27,130 --> 00:33:34,360
that when you install a mac or when you

00:33:29,830 --> 00:33:36,700
deploy a new asics bone gets on Bruce oh

00:33:34,360 --> 00:33:39,550
it's able to install the common packages

00:33:36,700 --> 00:33:42,490
well this thing was mostly working

00:33:39,550 --> 00:33:44,200
except in our network setup because we

00:33:42,490 --> 00:33:46,390
have a firewall and we open ports on

00:33:44,200 --> 00:33:49,690
demand and so on and I was like well

00:33:46,390 --> 00:33:51,190
okay what's not working and you just go

00:33:49,690 --> 00:33:53,050
take a look at the role and you're like

00:33:51,190 --> 00:33:55,120
okay so this good thing it doesn't work

00:33:53,050 --> 00:33:58,150
for whatever reason I don't really care

00:33:55,120 --> 00:33:59,710
it's not my problem I'm going to just go

00:33:58,150 --> 00:34:01,600
take a look at what the owner script is

00:33:59,710 --> 00:34:05,740
doing for installing and trying to

00:34:01,600 --> 00:34:08,590
replicate it into the role so you can

00:34:05,740 --> 00:34:12,790
just do that for any role you find if

00:34:08,590 --> 00:34:14,920
you've built your own role for your own

00:34:12,790 --> 00:34:17,050
case but you're like well maybe that

00:34:14,920 --> 00:34:19,330
could be useful to someone else well you

00:34:17,050 --> 00:34:20,830
can just publish it go ahead does it

00:34:19,330 --> 00:34:23,440
because you can be sure that it will

00:34:20,830 --> 00:34:28,770
solve someone else's problem and for

00:34:23,440 --> 00:34:30,940
example well winner arm is okay but

00:34:28,770 --> 00:34:34,930
Microsoft worked hard to provide

00:34:30,940 --> 00:34:36,880
opposite openssh support to windows so

00:34:34,930 --> 00:34:39,400
we basically created a role that will

00:34:36,880 --> 00:34:41,560
install openssh on windows for you and

00:34:39,400 --> 00:34:44,349
it will be as simple as including this

00:34:41,560 --> 00:34:47,259
role in your clay book

00:34:44,349 --> 00:34:50,319
and to get to the core of it most

00:34:47,259 --> 00:34:54,119
modules are just simple Python modules

00:34:50,319 --> 00:34:57,940
they return formatted Jason objects and

00:34:54,119 --> 00:35:02,309
they follow a very strict convention so

00:34:57,940 --> 00:35:05,049
whatever you do it's all about trying to

00:35:02,309 --> 00:35:08,019
document first what you want you are

00:35:05,049 --> 00:35:10,660
trying to do and then building a python

00:35:08,019 --> 00:35:13,420
module but it could be anything else if

00:35:10,660 --> 00:35:15,910
you're into a looper there are still

00:35:13,420 --> 00:35:18,190
people like barrel you can do it you can

00:35:15,910 --> 00:35:21,999
just create a perl script that will that

00:35:18,190 --> 00:35:25,450
will return JSON and here you can see

00:35:21,999 --> 00:35:27,039
that this is a darwin service so that's

00:35:25,450 --> 00:35:31,269
basically a launch the implementation

00:35:27,039 --> 00:35:34,269
that we worked on and we use OS X a load

00:35:31,269 --> 00:35:36,039
a lot in our cluster and well starting

00:35:34,269 --> 00:35:37,509
services on the OS X works with launch T

00:35:36,039 --> 00:35:39,900
and then ssible was not supporting it so

00:35:37,509 --> 00:35:43,589
I was like yeah well sure let's just

00:35:39,900 --> 00:35:48,969
give it a shot and try to do it myself I

00:35:43,589 --> 00:35:50,799
was crazy simple you just try to find a

00:35:48,969 --> 00:35:53,680
module that's called in this case its

00:35:50,799 --> 00:35:55,479
service you try to find it in very

00:35:53,680 --> 00:35:59,619
module score so there are module score

00:35:55,479 --> 00:36:02,499
and modules extra but are out of the

00:35:59,619 --> 00:36:05,200
core of ansible and you just go there

00:36:02,499 --> 00:36:07,630
and go in system and like okay so i'll

00:36:05,200 --> 00:36:10,630
do the manage system d or out of a

00:36:07,630 --> 00:36:13,119
managed upstart oh ok that's there so

00:36:10,630 --> 00:36:15,400
maybe I can just copy this class try to

00:36:13,119 --> 00:36:17,349
find the matter the the key methods what

00:36:15,400 --> 00:36:21,400
we're doing and just put my own code

00:36:17,349 --> 00:36:24,579
there and in one or two days maybe two

00:36:21,400 --> 00:36:28,749
let's be honest launch knee was there

00:36:24,579 --> 00:36:31,900
and yeah there was basically no pain the

00:36:28,749 --> 00:36:34,680
only pain was this launch TTL command

00:36:31,900 --> 00:36:34,680
that's weird

00:36:34,880 --> 00:36:41,639
also although the code and the feature

00:36:38,279 --> 00:36:44,369
were accepted this change happened

00:36:41,639 --> 00:36:46,889
during a redesign of the old system

00:36:44,369 --> 00:36:48,899
interface and ansible and that's one of

00:36:46,889 --> 00:36:52,380
the black dots so just know that it

00:36:48,899 --> 00:36:55,319
might happen if you go that way that

00:36:52,380 --> 00:36:57,419
sometimes the community is like yeah

00:36:55,319 --> 00:36:59,549
sure that's great we want it with super

00:36:57,419 --> 00:37:01,679
code but we are changing stuff right now

00:36:59,549 --> 00:37:03,749
and it might happen that it just takes a

00:37:01,679 --> 00:37:05,789
while for them to just come back to you

00:37:03,749 --> 00:37:09,839
so just bump them bump once in a while

00:37:05,789 --> 00:37:11,999
and say hey what about my future the

00:37:09,839 --> 00:37:15,359
community is wide there are tons of

00:37:11,999 --> 00:37:17,880
people super reactive it's very

00:37:15,359 --> 00:37:20,009
inclusive I've never seen a success

00:37:17,880 --> 00:37:22,169
comment a racist comment people are

00:37:20,009 --> 00:37:24,509
always trying to help very positive

00:37:22,169 --> 00:37:26,099
there's no like oh no sorry that's

00:37:24,509 --> 00:37:27,539
we don't want to see that just keep it

00:37:26,099 --> 00:37:30,179
for yourself it's fine it's really like

00:37:27,539 --> 00:37:32,459
trying to improve and you have core

00:37:30,179 --> 00:37:34,649
contributors on top that sometimes comes

00:37:32,459 --> 00:37:36,029
in and say okay maybe this is not

00:37:34,649 --> 00:37:38,039
fitting with what we want for the

00:37:36,029 --> 00:37:42,630
software or something like that but it's

00:37:38,039 --> 00:37:46,969
always constructive and as I mentioned

00:37:42,630 --> 00:37:50,509
it a little bit so far be aware that

00:37:46,969 --> 00:37:53,789
when you create a module for in cipal

00:37:50,509 --> 00:37:56,159
debugging can be quite tricky there are

00:37:53,789 --> 00:37:58,499
a few things to know for that you can

00:37:56,159 --> 00:38:00,449
use PDB basically but know that you will

00:37:58,499 --> 00:38:02,759
have to force ansible to use only one

00:38:00,449 --> 00:38:05,249
fork because if it starts working

00:38:02,759 --> 00:38:07,469
everywhere it will be really hard to

00:38:05,249 --> 00:38:10,709
figure out who is doing what and where's

00:38:07,469 --> 00:38:12,839
the error at and it also has a ton of

00:38:10,709 --> 00:38:15,659
logging but you have to give it some

00:38:12,839 --> 00:38:18,149
time you really have to think of try to

00:38:15,659 --> 00:38:21,389
figure out okay so this is about that

00:38:18,149 --> 00:38:23,989
and so it just takes some time but you

00:38:21,389 --> 00:38:23,989
will get it eventually

00:38:24,480 --> 00:38:29,609
and yes also something when you

00:38:28,109 --> 00:38:33,720
contribute to modules like if you take

00:38:29,609 --> 00:38:36,480
the example of I contributed a bit to

00:38:33,720 --> 00:38:39,210
some windows modules for example well it

00:38:36,480 --> 00:38:41,400
happens that the person that created it

00:38:39,210 --> 00:38:44,460
is not as involved as before or ever

00:38:41,400 --> 00:38:47,430
it's in a transition state and you might

00:38:44,460 --> 00:38:48,960
not get as good fit as good feedback as

00:38:47,430 --> 00:38:53,490
you would get on the darker module for

00:38:48,960 --> 00:38:55,800
example and that's basically it do you

00:38:53,490 --> 00:39:10,619
have any questions ideas or rents I love

00:38:55,800 --> 00:39:14,340
Rance hi first there isn't no question

00:39:10,619 --> 00:39:18,990
to use ansible tower we thought of it

00:39:14,340 --> 00:39:21,450
but I think the ratio price what it

00:39:18,990 --> 00:39:25,109
brings no my follow-up question is then

00:39:21,450 --> 00:39:27,090
how do you ensure the state of your

00:39:25,109 --> 00:39:29,390
infrastructure do you have a central

00:39:27,090 --> 00:39:31,800
place where you run playbooks or every

00:39:29,390 --> 00:39:35,790
operations guy runs them from of their

00:39:31,800 --> 00:39:38,130
laptops or how do you do that so yeah

00:39:35,790 --> 00:39:40,109
maybe it was not clear enough but we

00:39:38,130 --> 00:39:45,500
don't really rely on ansible for vet and

00:39:40,109 --> 00:39:45,500
so ball is really a tool for us that

00:39:45,920 --> 00:39:51,840
runs some steps through steps and when

00:39:49,560 --> 00:39:53,700
we flash things so we basically have

00:39:51,840 --> 00:39:56,460
templates and we build our

00:39:53,700 --> 00:39:58,320
infrastructure states with templates on

00:39:56,460 --> 00:40:00,480
top of each other we just enter it all

00:39:58,320 --> 00:40:02,670
the time and ansible is just involved in

00:40:00,480 --> 00:40:05,040
creating and creating the states all

00:40:02,670 --> 00:40:07,530
along the way so we don't really need to

00:40:05,040 --> 00:40:09,540
figure out like what's the state of what

00:40:07,530 --> 00:40:11,190
it's already where we know what's the

00:40:09,540 --> 00:40:12,460
state of what we have root kick start

00:40:11,190 --> 00:40:14,500
and then we have

00:40:12,460 --> 00:40:21,490
violent images so we don't really need

00:40:14,500 --> 00:40:25,960
this sequential states now i'm not sure

00:40:21,490 --> 00:40:29,680
if my question is answered already um in

00:40:25,960 --> 00:40:32,619
in our company we have lots of small

00:40:29,680 --> 00:40:35,740
modules and then of course the the big

00:40:32,619 --> 00:40:40,170
environment where most of those modules

00:40:35,740 --> 00:40:42,369
are deployed and well one big ansible

00:40:40,170 --> 00:40:44,080
playbook somewhere which deploys

00:40:42,369 --> 00:40:47,650
everything i think is not a good idea so

00:40:44,080 --> 00:40:50,650
each module has it its own ansible

00:40:47,650 --> 00:40:53,290
playbook but how how do you share for

00:40:50,650 --> 00:40:55,630
example the what is it called roles like

00:40:53,290 --> 00:40:57,670
like where to deploy to so if you add

00:40:55,630 --> 00:40:59,830
the new sandbox if you add new servers

00:40:57,670 --> 00:41:02,710
then all modules and there can be

00:40:59,830 --> 00:41:06,010
hundreds need to be updated in their

00:41:02,710 --> 00:41:07,359
playbooks how do you solve that what do

00:41:06,010 --> 00:41:11,050
you what do you mean we have dating

00:41:07,359 --> 00:41:14,349
rules okay if I create a new module then

00:41:11,050 --> 00:41:18,940
then i create also a new playbook yeah

00:41:14,349 --> 00:41:21,160
but if i create a new environment then

00:41:18,940 --> 00:41:25,750
all the playbooks need to know about

00:41:21,160 --> 00:41:28,060
that new environment what do you call

00:41:25,750 --> 00:41:30,970
environment you mean like a group of

00:41:28,060 --> 00:41:32,560
yeah well service to deploy to mm-hmm

00:41:30,970 --> 00:41:34,750
well you use the groups in the invent

00:41:32,560 --> 00:41:36,970
inventory for that right yeah but how to

00:41:34,750 --> 00:41:38,950
do the many many many playbooks in the

00:41:36,970 --> 00:41:40,680
many modules share the same inventory

00:41:38,950 --> 00:41:43,960
I'm not sure I understand the question

00:41:40,680 --> 00:41:46,890
well we I'm going to speak about it yeah

00:41:43,960 --> 00:41:46,890
sure

00:41:50,230 --> 00:41:59,330
so we focused on a build system in

00:41:56,780 --> 00:42:02,600
interaction of Python but from what I

00:41:59,330 --> 00:42:08,060
know you also use Python as embedded

00:42:02,600 --> 00:42:12,110
interpreter in life to to provide

00:42:08,060 --> 00:42:16,730
ability for driver producers to

00:42:12,110 --> 00:42:21,020
implement their hardware etc and do you

00:42:16,730 --> 00:42:25,280
actively develop this system for

00:42:21,020 --> 00:42:28,820
embedding scripts or rather you go away

00:42:25,280 --> 00:42:30,650
from it so basically I think my

00:42:28,820 --> 00:42:35,210
colleague alone whose work and talk

00:42:30,650 --> 00:42:38,750
about it so we am very bad we have bad

00:42:35,210 --> 00:42:41,420
Python but our the project architecture

00:42:38,750 --> 00:42:43,610
is made in such a way that it's really

00:42:41,420 --> 00:42:46,400
monolithic and everything is there so

00:42:43,610 --> 00:42:48,410
everything is in one place so we don't

00:42:46,400 --> 00:42:49,550
really manage that when we manage it we

00:42:48,410 --> 00:42:51,830
have to do it by hand if you want to

00:42:49,550 --> 00:42:54,440
update it you have two dated by hand and

00:42:51,830 --> 00:42:56,750
sybil really doesn't touch anything

00:42:54,440 --> 00:42:59,570
that's in the life code base for example

00:42:56,750 --> 00:43:02,210
it's something that it can do though is

00:42:59,570 --> 00:43:03,890
that we can install a bunch of tools

00:43:02,210 --> 00:43:07,270
that are needed to test this code base

00:43:03,890 --> 00:43:11,080
but we never go in there to try stuff

00:43:07,270 --> 00:43:11,080
it's time for one more question

00:43:13,740 --> 00:43:19,810
hi thanks for the very very simple one

00:43:17,100 --> 00:43:22,330
in the structure that you defined the

00:43:19,810 --> 00:43:25,960
beginning of the talk with the folders

00:43:22,330 --> 00:43:29,400
we are used to to have a subfolder and

00:43:25,960 --> 00:43:32,440
their roles for each of our roles and

00:43:29,400 --> 00:43:34,780
inside that so folder we have the files

00:43:32,440 --> 00:43:37,450
templates everything okay it's this

00:43:34,780 --> 00:43:41,140
normal approach of are we doing it wrong

00:43:37,450 --> 00:43:44,350
amateur mean you have roles source rolls

00:43:41,140 --> 00:43:47,650
then every subgroup every role has a

00:43:44,350 --> 00:43:50,230
subfolder okay so enjoy next doctor and

00:43:47,650 --> 00:43:52,240
so on exactly okay and I don't know if

00:43:50,230 --> 00:43:54,010
that's right or not yeah that's

00:43:52,240 --> 00:43:56,410
basically the way you do well whether

00:43:54,010 --> 00:43:58,450
you stole your to your playbooks then

00:43:56,410 --> 00:43:59,860
your playbooks are that's a good

00:43:58,450 --> 00:44:02,290
question your playbooks stay in the top

00:43:59,860 --> 00:44:04,270
level okay so basically you keep the

00:44:02,290 --> 00:44:05,980
playbook in top-level the yellow files

00:44:04,270 --> 00:44:08,320
so whenever you come into your directory

00:44:05,980 --> 00:44:10,870
it's already there that's something I

00:44:08,320 --> 00:44:14,860
didn't mention but we have one playbook

00:44:10,870 --> 00:44:17,640
per class of servers so for example we

00:44:14,860 --> 00:44:20,230
have a playable provision line at master

00:44:17,640 --> 00:44:22,720
deploy linux linux master we're going to

00:44:20,230 --> 00:44:26,710
have provisionally six drone deployed

00:44:22,720 --> 00:44:29,110
with six screen and then we tend to

00:44:26,710 --> 00:44:31,480
create a directory for the inventory

00:44:29,110 --> 00:44:32,770
because we have dynamic inventories very

00:44:31,480 --> 00:44:35,050
and so on we have a bunch of them and

00:44:32,770 --> 00:44:37,000
yeah like you said the roles are just in

00:44:35,050 --> 00:44:38,890
roles and then you put them pull in

00:44:37,000 --> 00:44:41,880
there and that's really the canonical

00:44:38,890 --> 00:44:41,880
way yep

00:44:43,960 --> 00:44:49,980
any other like super fast question or

00:44:47,140 --> 00:44:49,980
rent

00:44:52,190 --> 00:44:59,910
what another quick one have you

00:44:55,640 --> 00:45:03,029
configured using ansible am i configured

00:44:59,910 --> 00:45:06,089
dr. docker yeah we do it all the time

00:45:03,029 --> 00:45:09,539
have you configured doctor for a user

00:45:06,089 --> 00:45:13,049
access not root access we don't need

00:45:09,539 --> 00:45:14,760
that okay so we do it for dns and how it

00:45:13,049 --> 00:45:18,000
how it talks to the system that's

00:45:14,760 --> 00:45:20,990
basically it okay yep thank y'all for

00:45:18,000 --> 00:45:20,990

YouTube URL: https://www.youtube.com/watch?v=RyrxWqpHRcc


