Title: Vinicius Pacheco - APIs and Microservices With Go
Publication date: 2016-07-29
Playlist: EuroPython 2016
Description: 
	Vinicius Pacheco - APIs and Microservices With Go
[EuroPython 2016]
[19 July 2016]
[Bilbao, Euskadi, Spain]
(https://ep2016.europython.eu//conference/talks/apis-and-microservices-with-go)

In this talk we show how the Go language helped us get a high
performance in a concise and simple API. Everything will be
exemplified using the backdrop of a real case of Globo.com: API
registrations. We will see how we went from 200 to 19,000 records per
second to the impacts of this rapid growth and the consequences of Go
of use. We also show how our microservices architecture was used in
the project.

-----

This talk is about Go, software architecture and parallelism. How we
went from legacy, complex and slow software to new, speed, resilient
and maintainable software.
I'll start the talk showing the problemas and the challenges that my
team had received. After that, I'll show the tests, tests of
performance and the options that we did considering technologies and
strategies of development. The difficulties and problems also will be
show. Also I talk about:

- Goroutines
- Resilient patterns
- Go tools
- Architecture
- Web performance

How we leave of the Java ecosystem to new free ecosystem with
microservices and how Go help us.
Captions: 
	00:00:01,040 --> 00:00:09,030
yes so let's welcome Vinicius Pacheco

00:00:05,400 --> 00:00:19,260
and he'll talk to us about API and ApS

00:00:09,030 --> 00:00:22,410
on micro services with go my golfer

00:00:19,260 --> 00:00:27,029
thank because this because of him I'm

00:00:22,410 --> 00:00:29,939
started to call the goal lang and what I

00:00:27,029 --> 00:00:32,329
will talk this talks about API and

00:00:29,939 --> 00:00:38,040
microservices it's not a talk only about

00:00:32,329 --> 00:00:39,030
goal and is about engineer so I am

00:00:38,040 --> 00:00:42,870
finished Pacheco

00:00:39,030 --> 00:00:44,879
if you want to talk with me by Twitter

00:00:42,870 --> 00:00:47,840
is the best option

00:00:44,879 --> 00:00:50,850
and I'm software engineer at blog.com

00:00:47,840 --> 00:00:55,050
I'm teacher at kailyn's a good school in

00:00:50,850 --> 00:00:59,059
Brazil I'm Brazilian guy and I'm jungle

00:00:55,050 --> 00:01:05,030
girls organizer and theologist because

00:00:59,059 --> 00:01:05,030
we need faith to compile code and

00:01:06,320 --> 00:01:16,320
someone know what is globe.com yes it's

00:01:11,790 --> 00:01:19,250
great so the blood comb is great group

00:01:16,320 --> 00:01:24,630
global it's a great blog group in Brazil

00:01:19,250 --> 00:01:32,460
in Brazil we have television cable

00:01:24,630 --> 00:01:35,520
television newspaper I think 50 50

00:01:32,460 --> 00:01:40,680
channels cable channels from globe.com

00:01:35,520 --> 00:01:43,079
and we have a portal globe calm the

00:01:40,680 --> 00:01:50,399
doctrine is the arm of full group global

00:01:43,079 --> 00:01:54,479
and Internet and what is our agenda it's

00:01:50,399 --> 00:01:56,790
a real case is not a fake app it's a

00:01:54,479 --> 00:02:02,880
real case what happened with me at the

00:01:56,790 --> 00:02:06,390
club that song so where I can use work I

00:02:02,880 --> 00:02:10,950
can I use go lang

00:02:06,390 --> 00:02:14,040
it's a real case you will see and an

00:02:10,950 --> 00:02:17,100
advice my English is really really

00:02:14,040 --> 00:02:22,740
really bad if you don't understand you

00:02:17,100 --> 00:02:26,520
up your hand and there I real rip it and

00:02:22,740 --> 00:02:29,600
you don't intend again and again can you

00:02:26,520 --> 00:02:37,350
please I will repeat in Spanish because

00:02:29,600 --> 00:02:41,540
it's great for me and I will repeat in

00:02:37,350 --> 00:02:46,950
Portuguese and if not so good I will

00:02:41,540 --> 00:02:51,270
take for my Brazilian friends they talk

00:02:46,950 --> 00:02:54,600
they speak English very well so our

00:02:51,270 --> 00:02:59,000
agenda at first the matrix after that

00:02:54,600 --> 00:03:02,910
the problems the road and the solution

00:02:59,000 --> 00:03:06,660
the Metro is from globe.com we have more

00:03:02,910 --> 00:03:09,360
than 50 million access per day unity

00:03:06,660 --> 00:03:12,690
access it's not a repeat the access it's

00:03:09,360 --> 00:03:17,269
not at all and two people access logical

00:03:12,690 --> 00:03:21,390
twice no unique access 50 millions and

00:03:17,269 --> 00:03:22,980
up Greece and simple quiz like what's

00:03:21,390 --> 00:03:25,560
the best player in the world to play

00:03:22,980 --> 00:03:31,220
soccer in the world and in press like

00:03:25,560 --> 00:03:36,570
this four hundred four thousand requests

00:03:31,220 --> 00:03:39,750
per second and we have api's like a game

00:03:36,570 --> 00:03:44,340
of soccer gunfights walkers ways and

00:03:39,750 --> 00:03:48,000
other api's generates three hundred

00:03:44,340 --> 00:03:49,130
thousand requests per seconds with in

00:03:48,000 --> 00:03:52,980
the top moment

00:03:49,130 --> 00:03:54,959
nine hundred requests nine hundred

00:03:52,980 --> 00:04:02,430
thousand requests per seconds and now

00:03:54,959 --> 00:04:09,450
Irv it all out loop that song is by

00:04:02,430 --> 00:04:11,640
as from world to Big Data and the

00:04:09,450 --> 00:04:14,909
recommendation recommendation news and

00:04:11,640 --> 00:04:19,049
the show TV shows and soap opera biding

00:04:14,909 --> 00:04:26,330
for the internet by the internet and yet

00:04:19,049 --> 00:04:31,560
user from user log it is easier ok and

00:04:26,330 --> 00:04:37,380
where am i and these numbers my team at

00:04:31,560 --> 00:04:39,900
globe calm is globe yg Rho by G it's the

00:04:37,380 --> 00:04:43,650
API to register the new users at

00:04:39,900 --> 00:04:46,710
blog.com and the serve all orders 72

00:04:43,650 --> 00:04:49,620
teams at the globe Luca do Bob calm and

00:04:46,710 --> 00:04:53,280
the order five companies from group of

00:04:49,620 --> 00:04:56,070
global so if you do a new register and

00:04:53,280 --> 00:05:03,020
you a new registration at globe.com and

00:04:56,070 --> 00:05:11,280
you use my API and as the topics of this

00:05:03,020 --> 00:05:17,280
and our X system is it is a Trevor we

00:05:11,280 --> 00:05:24,180
have at first a front-end is written

00:05:17,280 --> 00:05:27,419
with scaler and play framework and they

00:05:24,180 --> 00:05:31,139
send a request for to model x JP is big

00:05:27,419 --> 00:05:36,510
model of say P ice were for 14 years old

00:05:31,139 --> 00:05:40,590
monoliths api's written in java the

00:05:36,510 --> 00:05:43,770
monolith api on your right side my left

00:05:40,590 --> 00:05:48,150
side it's written with the spring 3

00:05:43,770 --> 00:05:51,240
because he was refactoring year by year

00:05:48,150 --> 00:05:57,030
but not so good and the other is pure

00:05:51,240 --> 00:05:57,840
java with several servlets and idiot of

00:05:57,030 --> 00:06:01,069
a JBE

00:05:57,840 --> 00:06:05,479
and the version 2.2 i think

00:06:01,069 --> 00:06:11,559
and our database is Oracle yes

00:06:05,479 --> 00:06:11,559
he's carried I know Cheryl the Freak

00:06:11,740 --> 00:06:22,809
what what are monolithic you thinks this

00:06:18,909 --> 00:06:28,119
with like a big as a big block of code

00:06:22,809 --> 00:06:33,399
with all things and organized by the

00:06:28,119 --> 00:06:38,779
Hopi and it's a lie

00:06:33,399 --> 00:06:41,029
the truth is it yes the truth when you

00:06:38,779 --> 00:06:44,559
look a monolithic I'm gonna love cos

00:06:41,029 --> 00:06:50,319
terrible luck and and the thing with me

00:06:44,559 --> 00:06:55,159
14 years of dismiss the same wanna lift

00:06:50,319 --> 00:07:01,300
look good developers first as push code

00:06:55,159 --> 00:07:01,300
for this bad developers commit cold and

00:07:01,629 --> 00:07:08,709
Tyrese commit cold trainings commit cold

00:07:04,550 --> 00:07:08,709
miserable it's difficult

00:07:09,460 --> 00:07:17,380
and this to this distich this big stack

00:07:13,780 --> 00:07:21,669
two monsters mauve Metallica monsters do

00:07:17,380 --> 00:07:27,490
only to Henry registrations for a second

00:07:21,669 --> 00:07:31,060
and our two big monolithic Asst that

00:07:27,490 --> 00:07:33,360
we'd need to maintain and solve

00:07:31,060 --> 00:07:38,199
difficult to change a little library and

00:07:33,360 --> 00:07:41,979
the history of the play is huge and

00:07:38,199 --> 00:07:48,039
merged our numerous and dangerous it's

00:07:41,979 --> 00:07:53,520
not a good play sport let's move to new

00:07:48,039 --> 00:07:57,100
our teacher and I like a lot the

00:07:53,520 --> 00:07:59,919
sentence of Mario Fusco when you think

00:07:57,100 --> 00:08:02,949
of micro-service you think all it's a

00:07:59,919 --> 00:08:04,810
little occasion no it's wrong wrecker

00:08:02,949 --> 00:08:07,770
service is not only replication it's a

00:08:04,810 --> 00:08:13,570
big application a big stack so now to

00:08:07,770 --> 00:08:16,510
you you can't think this this things era

00:08:13,570 --> 00:08:19,419
and wrinkle services is not because the

00:08:16,510 --> 00:08:23,680
spite of the application the important

00:08:19,419 --> 00:08:26,380
is what he do what microservice do is

00:08:23,680 --> 00:08:28,150
important because this is make micro is

00:08:26,380 --> 00:08:28,690
micro not because the side of the

00:08:28,150 --> 00:08:31,510
application

00:08:28,690 --> 00:08:35,039
it's micro because you need to think all

00:08:31,510 --> 00:08:35,039
right responsible to us

00:08:35,340 --> 00:08:50,640
and my team starts to do a job to create

00:08:47,310 --> 00:08:53,820
a new stack and the many developers

00:08:50,640 --> 00:08:56,420
there are Java developers and the other

00:08:53,820 --> 00:09:00,020
developers are Python developers and

00:08:56,420 --> 00:09:06,000
other develops are I don't know a

00:09:00,020 --> 00:09:08,550
metaphor co-developers maybe and we

00:09:06,000 --> 00:09:12,260
creates the first child to the fuzzy

00:09:08,550 --> 00:09:16,110
stack to test worse colored kratos

00:09:12,260 --> 00:09:18,960
because the game because kratos killed

00:09:16,110 --> 00:09:23,790
gods and the two big monolithic ins our

00:09:18,960 --> 00:09:28,230
thoughts so we need this do this this

00:09:23,790 --> 00:09:30,480
thing so we started to write to the code

00:09:28,230 --> 00:09:35,670
with under top you know what is in there

00:09:30,480 --> 00:09:39,029
towel anyone know okay

00:09:35,670 --> 00:09:42,330
j boss has a server about server

00:09:39,029 --> 00:09:44,580
container as right flight the engineer

00:09:42,330 --> 00:09:49,290
of the white fly is under tall is the

00:09:44,580 --> 00:09:54,570
thing is the more fast handler for java

00:09:49,290 --> 00:09:57,270
and faster than under towel is natty but

00:09:54,570 --> 00:09:59,370
net you need to know the size of the

00:09:57,270 --> 00:10:02,220
request all requests you need to know

00:09:59,370 --> 00:10:04,080
the size and on the towel you don't need

00:10:02,220 --> 00:10:07,880
to know the size of the craft

00:10:04,080 --> 00:10:11,940
so under tourist-friendly for developers

00:10:07,880 --> 00:10:14,070
friendly for develops look at code

00:10:11,940 --> 00:10:19,459
friendly for develops we started to

00:10:14,070 --> 00:10:22,170
write with natal and with the sunday I

00:10:19,459 --> 00:10:28,860
don't have beta

00:10:22,170 --> 00:10:31,740
and my wife slapped with James had

00:10:28,860 --> 00:10:34,070
slapped with James and I started to

00:10:31,740 --> 00:10:41,610
write the same application in goal

00:10:34,070 --> 00:10:44,550
because I like I have a government so I

00:10:41,610 --> 00:10:47,640
start to write and to love that song we

00:10:44,550 --> 00:10:51,270
have a team the name of the team is qian

00:10:47,640 --> 00:10:55,620
qiu the key hu is a team for tests of

00:10:51,270 --> 00:10:57,990
the stress of tests and under tao pass

00:10:55,620 --> 00:11:00,930
for this test and they put the order

00:10:57,990 --> 00:11:10,530
application and i call it by golem and

00:11:00,930 --> 00:11:14,490
white garland because data so i started

00:11:10,530 --> 00:11:20,490
to write the cold with two golem and the

00:11:14,490 --> 00:11:23,790
put in secret to the TA to 10k to Tim

00:11:20,490 --> 00:11:29,370
made the tasks and was more perform at

00:11:23,790 --> 00:11:32,840
Li than the job application so my team

00:11:29,370 --> 00:11:39,840
look the numbers and uh-oh

00:11:32,840 --> 00:11:44,580
Kratos is so fast and I think it's not

00:11:39,840 --> 00:11:46,980
Kratos its Garland and Gollum there are

00:11:44,580 --> 00:11:52,380
a lot more automotive reaching for his

00:11:46,980 --> 00:11:56,640
name because our our to offer when made

00:11:52,380 --> 00:11:59,250
their library put the goal like a prefix

00:11:56,640 --> 00:12:03,390
of the name like Batman you know Batman

00:11:59,250 --> 00:12:05,520
the bat model the Batphone the battle

00:12:03,390 --> 00:12:08,970
Sookie and

00:12:05,520 --> 00:12:15,480
and the golfers but goal goal

00:12:08,970 --> 00:12:20,610
okay Garlin good and what goal gift for

00:12:15,480 --> 00:12:24,330
us as simply see it's simply smarting

00:12:20,610 --> 00:12:27,060
simple simple than than Java and the

00:12:24,330 --> 00:12:32,090
Central Library is really complete I

00:12:27,060 --> 00:12:36,000
don't need a server it's not necessary

00:12:32,090 --> 00:12:39,570
JSON translator it's not so sorry

00:12:36,000 --> 00:12:43,800
RPC to communication it's not necessary

00:12:39,570 --> 00:12:47,730
nothing the all is inside the standard

00:12:43,800 --> 00:12:52,980
library of God it's compiled --it so

00:12:47,730 --> 00:12:56,460
it's near of the machine as the language

00:12:52,980 --> 00:13:00,990
to high-performance the concurrence of

00:12:56,460 --> 00:13:03,480
RIF goal is for babies it's really easy

00:13:00,990 --> 00:13:08,780
to write a conference call with going

00:13:03,480 --> 00:13:12,330
and we have a lot of tools many tools

00:13:08,780 --> 00:13:16,950
fantastic tools and there are machee a

00:13:12,330 --> 00:13:21,750
native API for HTTP 2 it's great for us

00:13:16,950 --> 00:13:25,230
and a great the contagion so the

00:13:21,750 --> 00:13:32,880
simplest II look this undertow hello

00:13:25,230 --> 00:13:35,670
ward great he'll let a class and a

00:13:32,880 --> 00:13:39,780
method main to run because it's a giant

00:13:35,670 --> 00:13:42,090
insane genie of the the servant so you

00:13:39,780 --> 00:13:46,740
don't need to put inside the container

00:13:42,090 --> 00:13:49,890
he's provided and you start the builder

00:13:46,740 --> 00:13:53,490
of the under tall after that put the

00:13:49,890 --> 00:13:58,460
listener eighty HD port localhost and

00:13:53,490 --> 00:14:04,450
after that you set your new handler and

00:13:58,460 --> 00:14:09,340
writer handler with a lot of boilerplate

00:14:04,450 --> 00:14:13,450
and but what type you will return and

00:14:09,340 --> 00:14:17,230
your handler that I explained and after

00:14:13,450 --> 00:14:22,920
that you write your hello world build

00:14:17,230 --> 00:14:30,360
and start easy so cute

00:14:22,920 --> 00:14:30,360
look I'm ironic okay the same with go I

00:14:30,510 --> 00:14:36,940
imported I put the package the priests

00:14:34,330 --> 00:14:39,400
compact all locals started from the main

00:14:36,940 --> 00:14:42,880
package the main packet is death first

00:14:39,400 --> 00:14:44,890
the priests fall the the main of the

00:14:42,880 --> 00:14:46,980
application all cold of go start from

00:14:44,890 --> 00:14:51,070
the main package and the main function

00:14:46,980 --> 00:14:55,630
it's a reserved function of the golang

00:14:51,070 --> 00:14:58,330
and we start the handler and put the

00:14:55,630 --> 00:15:02,950
response in the request and i will print

00:14:58,330 --> 00:15:05,500
hello ward put the handler registration

00:15:02,950 --> 00:15:09,910
like halt and after that listen and

00:15:05,500 --> 00:15:13,200
serve and eight eight port see look see

00:15:09,910 --> 00:15:13,200
it's not so difficult

00:15:13,990 --> 00:15:23,150
what okay

00:15:20,420 --> 00:15:26,270
this case will return attacks a plane

00:15:23,150 --> 00:15:29,600
because he is identify the tax real

00:15:26,270 --> 00:15:33,440
hello world but not a good practice the

00:15:29,600 --> 00:15:36,920
good Preta to do this faster as you sat

00:15:33,440 --> 00:15:37,790
on the header the return but I will are

00:15:36,920 --> 00:15:42,080
used

00:15:37,790 --> 00:15:47,470
I've been used the F print LM so the F

00:15:42,080 --> 00:15:51,410
rental and return tax plane okay if I

00:15:47,470 --> 00:15:56,570
want to write a low-level I don't use a

00:15:51,410 --> 00:15:59,390
fmt package okay it's a it's a friendly

00:15:56,570 --> 00:16:03,500
interface for developers if you want

00:15:59,390 --> 00:16:08,780
right go go code you don't use you can't

00:16:03,500 --> 00:16:14,380
use fmg and the other package was roast

00:16:08,780 --> 00:16:14,380
for performance so

00:16:16,559 --> 00:16:24,579
tests with goal oh I need to import a

00:16:20,649 --> 00:16:28,269
packet for tests to the unit our tests

00:16:24,579 --> 00:16:32,610
knows no necessary go give this for us

00:16:28,269 --> 00:16:36,220
and I put the log to know what happened

00:16:32,610 --> 00:16:41,709
import the net HP and with this

00:16:36,220 --> 00:16:44,170
fantastic HP test look to mark your

00:16:41,709 --> 00:16:50,589
request that's great

00:16:44,170 --> 00:16:53,199
and the test package I create a func to

00:16:50,589 --> 00:16:57,490
test your handler oh that's Wrangler and

00:16:53,199 --> 00:17:02,619
import the test restriction it's right

00:16:57,490 --> 00:17:07,390
after that I create my new request real

00:17:02,619 --> 00:17:09,880
request okay my video request if

00:17:07,390 --> 00:17:17,459
whenever happen I will lock the error

00:17:09,880 --> 00:17:17,459
and after that I create my fake response

00:17:17,730 --> 00:17:25,630
create my fake response and the set for

00:17:21,159 --> 00:17:29,649
my handler take the code they starts

00:17:25,630 --> 00:17:32,470
different of okay return their

00:17:29,649 --> 00:17:37,500
with joke-a-lot

00:17:32,470 --> 00:17:39,640
hello world it's easy to test a handler

00:17:37,500 --> 00:17:45,640
nice

00:17:39,640 --> 00:17:50,620
and how can I do to give a JSON for my

00:17:45,640 --> 00:17:55,030
user is it I have a function in

00:17:50,620 --> 00:17:58,929
Portuguese sorry and via JSON is Santa

00:17:55,030 --> 00:18:01,840
JSON in English and I will return two

00:17:58,929 --> 00:18:05,650
things an array of bytes lives of bytes

00:18:01,840 --> 00:18:10,860
and an error because go and go don't

00:18:05,650 --> 00:18:12,130
don't have exceptions it's this elegant

00:18:10,860 --> 00:18:17,260
yeah

00:18:12,130 --> 00:18:27,130
what Pike said this and this guy's

00:18:17,260 --> 00:18:31,030
terrible so we don't have exceptions and

00:18:27,130 --> 00:18:33,250
why because U is easier to to create

00:18:31,030 --> 00:18:35,500
your errors and there is it an air hood

00:18:33,250 --> 00:18:42,490
that doesn't it doesn't port what type

00:18:35,500 --> 00:18:46,390
of error you is and sorry we put I have

00:18:42,490 --> 00:18:47,860
my package user my entity I create my

00:18:46,390 --> 00:18:52,720
entity it's doesn't matter who is my

00:18:47,860 --> 00:18:56,140
user and I create a new payload and this

00:18:52,720 --> 00:19:00,309
payload is an app a string and the

00:18:56,140 --> 00:19:03,460
interface interface is doesn't matter

00:19:00,309 --> 00:19:07,270
the object it's like the the father of

00:19:03,460 --> 00:19:10,450
the objects interface but it's not only

00:19:07,270 --> 00:19:13,240
interface its interface with how the

00:19:10,450 --> 00:19:17,620
name of this I know I don't know in

00:19:13,240 --> 00:19:21,700
English please races yeah so with races

00:19:17,620 --> 00:19:25,570
and I set name the name of my user email

00:19:21,700 --> 00:19:30,210
email of my user and put Jason Marshall

00:19:25,570 --> 00:19:33,880
with my payload I his recept and an

00:19:30,210 --> 00:19:37,720
update on output and the near her if

00:19:33,880 --> 00:19:41,230
happen it happening if I never happened

00:19:37,720 --> 00:19:46,580
I will return my ever if doesn't happen

00:19:41,230 --> 00:19:51,659
I will return my output it's a JSON

00:19:46,580 --> 00:19:53,880
nice and the two concurrent code is only

00:19:51,659 --> 00:19:59,279
on a high overview okay

00:19:53,880 --> 00:20:03,210
my conquer is called we can set my main

00:19:59,279 --> 00:20:05,820
function and there started my first

00:20:03,210 --> 00:20:08,190
channel channeling goal is to

00:20:05,820 --> 00:20:11,460
communication she shared memory to

00:20:08,190 --> 00:20:14,850
communication between your routines your

00:20:11,460 --> 00:20:17,250
routines are like RSV threads a green

00:20:14,850 --> 00:20:20,669
threads fit sorry it's not a real threat

00:20:17,250 --> 00:20:26,610
as all operational system tracks is

00:20:20,669 --> 00:20:29,519
green threads so I'm started make a

00:20:26,610 --> 00:20:35,279
channel other channel result internal

00:20:29,519 --> 00:20:39,510
rod jobs and after that started three

00:20:35,279 --> 00:20:44,340
new workers look is there look more to

00:20:39,510 --> 00:20:48,600
one two and three and I set value for my

00:20:44,340 --> 00:20:51,630
jobs and set Valley and receptor the

00:20:48,600 --> 00:20:53,120
Valerie's of my jobs and close are the

00:20:51,630 --> 00:20:57,929
jobs

00:20:53,120 --> 00:21:03,000
so the code of the water the worker code

00:20:57,929 --> 00:21:07,019
is a range of the jobs and I recept the

00:21:03,000 --> 00:21:08,880
valley from the jobs and look then

00:21:07,019 --> 00:21:12,559
process time job

00:21:08,880 --> 00:21:12,559
that's like CDs

00:21:13,280 --> 00:21:18,680
started to run known disappoint me :

00:21:23,460 --> 00:21:30,040
it's like crap

00:21:26,770 --> 00:21:34,470
I don't know what happened so I will

00:21:30,040 --> 00:21:34,470
show wait a minute

00:21:37,350 --> 00:21:51,920
I will show for you because their

00:21:39,600 --> 00:22:00,060
presentation ran the the cold and seeing

00:21:51,920 --> 00:22:08,510
your routines look they called the same

00:22:00,060 --> 00:22:11,510
code okay it's the same code and run run

00:22:08,510 --> 00:22:11,510
Liston

00:22:11,900 --> 00:22:19,620
so doesn't matter okay continues and the

00:22:17,580 --> 00:22:22,290
cuckoo raised pattern it is a real

00:22:19,620 --> 00:22:25,710
contrast partly okay in the Rio

00:22:22,290 --> 00:22:28,050
conference pattern we did that we use

00:22:25,710 --> 00:22:34,710
the sync to synchronize it the go over

00:22:28,050 --> 00:22:39,660
teens okay I reported my login and ap

00:22:34,710 --> 00:22:42,930
I'm not to to logging and conflicts my

00:22:39,660 --> 00:22:46,730
environment is my code and other code to

00:22:42,930 --> 00:22:48,570
connect from Redis it's a real cold okay

00:22:46,730 --> 00:22:53,040
my main function

00:22:48,570 --> 00:22:57,110
I start my config I put the log and

00:22:53,040 --> 00:23:03,060
after that I start my ready spool and

00:22:57,110 --> 00:23:07,710
run my goal routine when I run my go

00:23:03,060 --> 00:23:12,540
routine I called this function

00:23:07,710 --> 00:23:13,140
look I start already group here this

00:23:12,540 --> 00:23:16,980
called

00:23:13,140 --> 00:23:21,480
this variable will rate all this the

00:23:16,980 --> 00:23:24,450
finish of the goroutines and I added my

00:23:21,480 --> 00:23:28,200
girl routine and start at anonymous

00:23:24,450 --> 00:23:31,290
function to process when the proof that

00:23:28,200 --> 00:23:33,060
the anonymous function and did he feel

00:23:31,290 --> 00:23:36,210
comment we return

00:23:33,060 --> 00:23:40,530
hey wait group you can stop it

00:23:36,210 --> 00:23:45,080
because the garage is over and after

00:23:40,530 --> 00:23:48,300
that I call the function process look

00:23:45,080 --> 00:23:52,110
function process here and I called it my

00:23:48,300 --> 00:23:56,100
process this will be what it's a real

00:23:52,110 --> 00:24:00,120
code to consumer from rads curious from

00:23:56,100 --> 00:24:02,130
cues from Redis I start this to consume

00:24:00,120 --> 00:24:05,640
a lot of process and recreate the

00:24:02,130 --> 00:24:07,920
requests okay the guy sent me a request

00:24:05,640 --> 00:24:09,450
for golang application and they take all

00:24:07,920 --> 00:24:12,210
the requests and made a dump of the

00:24:09,450 --> 00:24:17,400
request and set that all the requests

00:24:12,210 --> 00:24:19,260
all my Reds and QE on the code and why

00:24:17,400 --> 00:24:21,480
did that because we need to maintain

00:24:19,260 --> 00:24:25,200
their older application and we need to

00:24:21,480 --> 00:24:30,360
reproduce the real request or my fake

00:24:25,200 --> 00:24:35,310
request for the older application the

00:24:30,360 --> 00:24:41,470
old application and why go I will show

00:24:35,310 --> 00:24:47,070
the tests at first I have

00:24:41,470 --> 00:24:51,850
I called here a Java code

00:24:47,070 --> 00:24:52,330
it's a Fibonacci look it's a great

00:24:51,850 --> 00:24:54,490
called

00:24:52,330 --> 00:24:56,980
a Fibonacci code is fantastic and why

00:24:54,490 --> 00:25:01,210
because I use this all my life

00:24:56,980 --> 00:25:03,850
that's a joke and but is good only to

00:25:01,210 --> 00:25:06,880
know what happens not to return a string

00:25:03,850 --> 00:25:11,290
and why I don't know a test with return

00:25:06,880 --> 00:25:15,430
hello ward because Java cash it the

00:25:11,290 --> 00:25:16,030
strings so if I put the same string all

00:25:15,430 --> 00:25:18,040
the time

00:25:16,030 --> 00:25:20,470
I don't test their handler or the

00:25:18,040 --> 00:25:24,790
process of java application I test all

00:25:20,470 --> 00:25:28,270
the cash of the lll new cash from job

00:25:24,790 --> 00:25:31,270
application so I put the Fibonacci and I

00:25:28,270 --> 00:25:38,640
will do the test does you have

00:25:31,270 --> 00:25:42,880
applications running and I have here and

00:25:38,640 --> 00:25:47,680
at your work you pointed for the test I

00:25:42,880 --> 00:25:50,200
will have 62 connections but for 10

00:25:47,680 --> 00:25:55,230
second seconds and 2 tracks

00:25:50,200 --> 00:25:55,230
ok I started the test

00:26:02,060 --> 00:26:13,960
and zip 36,000 requests per second okay

00:26:11,510 --> 00:26:17,270
it's the number of the job application

00:26:13,960 --> 00:26:21,560
only job application is interesting

00:26:17,270 --> 00:26:25,100
because when you run over time many

00:26:21,560 --> 00:26:28,280
times the Java same faster than the

00:26:25,100 --> 00:26:30,680
other time and why because the JIT did

00:26:28,280 --> 00:26:38,740
from Java is real perform at Li and very

00:26:30,680 --> 00:26:38,740
smart and was a few better look only

00:26:39,430 --> 00:26:50,810
little feel better so I will stop at

00:26:43,190 --> 00:26:54,950
this and started Ruby with facin etre

00:26:50,810 --> 00:26:59,180
okay to give AP I started my real

00:26:54,950 --> 00:27:02,510
application and I don't use unicorn or

00:26:59,180 --> 00:27:06,770
whiskey or Nothing kind of this when why

00:27:02,510 --> 00:27:11,090
because if you use unicorn all risky or

00:27:06,770 --> 00:27:15,050
kind of things I do and I put is right

00:27:11,090 --> 00:27:17,270
on the gill or my handler it's not a

00:27:15,050 --> 00:27:19,040
true of test because I don't do that

00:27:17,270 --> 00:27:21,380
with I don't do that I don't do this

00:27:19,040 --> 00:27:27,400
with Java and I don't do this with gold

00:27:21,380 --> 00:27:31,850
so I put in only Roderick it's okay and

00:27:27,400 --> 00:27:33,620
I will do the test again the same test

00:27:31,850 --> 00:27:36,650
in the same port the same number the

00:27:33,620 --> 00:27:41,830
same people not called and only to know

00:27:36,650 --> 00:27:41,830
the Fibonacci code of Sinatra is this

00:27:42,160 --> 00:27:52,960
it's this called off the Sinatra

00:27:44,620 --> 00:27:58,210
application and Sinatra give for us 300

00:27:52,960 --> 00:28:02,550
requests per seconds and you can look

00:27:58,210 --> 00:28:09,790
yeah sit 300 there

00:28:02,550 --> 00:28:11,950
requests per second it's bad no 70% of

00:28:09,790 --> 00:28:15,070
the internet using don't don't don't

00:28:11,950 --> 00:28:17,080
delude that it's not it's great for 70%

00:28:15,070 --> 00:28:20,740
of the Internet if you have 50 million

00:28:17,080 --> 00:28:22,650
users in your API it's a problem maybe

00:28:20,740 --> 00:28:27,700
the same problem happened with Twitter

00:28:22,650 --> 00:28:33,190
but if you do common application it's

00:28:27,700 --> 00:28:35,860
good and when you put unicorns and

00:28:33,190 --> 00:28:41,410
whiskey's and the kind of things you'll

00:28:35,860 --> 00:28:43,710
be more perform at Li and I will see the

00:28:41,410 --> 00:28:43,710
same

00:28:46,580 --> 00:29:02,490
with Python and flask item and flask

00:28:54,720 --> 00:29:08,610
Fibonacci the code of flask is it okay

00:29:02,490 --> 00:29:12,630
the flash code and when we will look the

00:29:08,610 --> 00:29:15,890
test that I don't a not started I

00:29:12,630 --> 00:29:15,890
started at now

00:29:16,690 --> 00:29:26,429
then seconds HD hundred requests per

00:29:25,179 --> 00:29:31,330
seconds

00:29:26,429 --> 00:29:32,289
it's better than Sinatra and this really

00:29:31,330 --> 00:29:46,979
good number

00:29:32,289 --> 00:29:46,979
okay so I will do the same with tornado

00:29:48,140 --> 00:29:59,830
and tornado is really more perform at

00:29:50,930 --> 00:29:59,830
Lee than flasks for 10 seconds Oh

00:30:02,630 --> 00:30:06,220
the tornado called there

00:30:08,830 --> 00:30:12,990
it is the tornado code okay

00:30:16,330 --> 00:30:26,830
yes this is a number one and how there

00:30:23,110 --> 00:30:31,120
looks good it's a great number and with

00:30:26,830 --> 00:30:32,710
unicorn and we will be better and with

00:30:31,120 --> 00:30:36,220
food tornado applications

00:30:32,710 --> 00:30:38,800
I made applications with twenty three

00:30:36,220 --> 00:30:45,040
thousand requests per seconds okay

00:30:38,800 --> 00:30:50,110
as the the max that I want we'll go with

00:30:45,040 --> 00:30:55,320
tornado and after tornado I will do the

00:30:50,110 --> 00:30:55,320
same let's go

00:31:00,580 --> 00:31:07,870
and start the go application and where

00:31:04,929 --> 00:31:15,090
you do the same test Oh God

00:31:07,870 --> 00:31:15,090
connection refusal yes Oh

00:31:18,940 --> 00:31:24,450
the connection by 10 seconds and the

00:31:21,369 --> 00:31:24,450
code is it

00:31:26,500 --> 00:31:38,710
and this code of goal and Fibonacci

00:31:32,260 --> 00:31:41,770
golang is it and was 38 fountain

00:31:38,710 --> 00:31:48,730
requests per second but I don't use

00:31:41,770 --> 00:31:53,590
order thing to do Domo faster than and

00:31:48,730 --> 00:31:59,409
now 39 but we have a problem of MacBooks

00:31:53,590 --> 00:32:02,890
and why the problem Mac has a limit for

00:31:59,409 --> 00:32:06,159
fountain requests for seconds so we need

00:32:02,890 --> 00:32:09,640
to change the police called the police

00:32:06,159 --> 00:32:14,049
reconfiguration in your Mac to have more

00:32:09,640 --> 00:32:17,500
requests for seconds yes it's true yeah

00:32:14,049 --> 00:32:21,909
and because this we need to do the test

00:32:17,500 --> 00:32:24,429
with Linux so goal was prefer monthly

00:32:21,909 --> 00:32:31,900
and it's the limit the limit of the Mac

00:32:24,429 --> 00:32:34,030
and go ahead if go because this we have

00:32:31,900 --> 00:32:38,320
a new project July

00:32:34,030 --> 00:32:43,210
there's glyph leave it like glow I think

00:32:38,320 --> 00:32:49,090
but in Brazil is July because a global

00:32:43,210 --> 00:32:51,650
live like global you

00:32:49,090 --> 00:32:54,799
that's a good it's the part enough for

00:32:51,650 --> 00:32:58,640
micro service in the floor in the front

00:32:54,799 --> 00:33:01,340
we have an Internet and the sender in

00:32:58,640 --> 00:33:02,690
Jeanette's then you next do the the the

00:33:01,340 --> 00:33:05,570
really direction of the request for our

00:33:02,690 --> 00:33:08,990
application and in order and not to all

00:33:05,570 --> 00:33:12,440
your application when we have a get they

00:33:08,990 --> 00:33:15,590
get reception on the cache and read from

00:33:12,440 --> 00:33:18,740
the cache and if post an update or

00:33:15,590 --> 00:33:21,950
delete we process with golang and write

00:33:18,740 --> 00:33:24,230
on the cache and the cure the other

00:33:21,950 --> 00:33:26,270
micro service go micro services all

00:33:24,230 --> 00:33:28,280
pyometra services or any other micro

00:33:26,270 --> 00:33:32,410
service read from the kill the

00:33:28,280 --> 00:33:36,110
information and we have I have a lot of

00:33:32,410 --> 00:33:39,590
goroutines read and write in and read

00:33:36,110 --> 00:33:43,850
and written on the cache all the time

00:33:39,590 --> 00:33:49,030
and put on the MongoDB monkey business

00:33:43,850 --> 00:33:49,030
our Neal database and why I don't know

00:33:49,240 --> 00:33:58,190
no I know when the people ask me oh

00:33:53,630 --> 00:34:02,510
watch the debate you prefer I spoke look

00:33:58,190 --> 00:34:06,950
I prefer Cassandra and oh I don't have

00:34:02,510 --> 00:34:10,310
Cassandra have Mogul there are other

00:34:06,950 --> 00:34:13,300
option yes

00:34:10,310 --> 00:34:13,300
my sickle

00:34:14,869 --> 00:34:25,740
okay was my decision so and but

00:34:21,389 --> 00:34:30,510
 is difficult to scale and when you

00:34:25,740 --> 00:34:33,889
set a lot of values in 300 eager

00:34:30,510 --> 00:34:36,810
bites they slow to give the information

00:34:33,889 --> 00:34:41,369
in the gate process the gut robe is

00:34:36,810 --> 00:34:45,750
really slow when you have 3G about 300

00:34:41,369 --> 00:34:49,200
gigabytes so the solution was worked

00:34:45,750 --> 00:34:52,460
with this with a lot of go routines

00:34:49,200 --> 00:34:56,550
consumed and writen and consumed with

00:34:52,460 --> 00:34:59,190
information all the time so when the

00:34:56,550 --> 00:35:01,560
engine acts send a request for us and we

00:34:59,190 --> 00:35:04,800
take the engine acts we get the genetics

00:35:01,560 --> 00:35:07,190
and the regrettin press and the put on

00:35:04,800 --> 00:35:13,470
the cache and after right from the cache

00:35:07,190 --> 00:35:21,380
we return to fadh2 to hungry okay or was

00:35:13,470 --> 00:35:24,300
created to 0 1 201 and the steam and an

00:35:21,380 --> 00:35:26,609
engine in the cache is the sufficient

00:35:24,300 --> 00:35:32,010
for us because the cache is with

00:35:26,609 --> 00:35:39,420
persistence time and persistence so it

00:35:32,010 --> 00:35:43,380
is our stack our tools and G live

00:35:39,420 --> 00:35:46,950
application and what we use it for the

00:35:43,380 --> 00:35:51,630
handler we use fat and why because goal

00:35:46,950 --> 00:35:55,200
is not friendly it's not so good to know

00:35:51,630 --> 00:35:58,589
the verbs like gat and pause and pert we

00:35:55,200 --> 00:36:02,220
use this mixer only to translator these

00:35:58,589 --> 00:36:04,260
things like you do with flask in Python

00:36:02,220 --> 00:36:07,320
application you set as I get the cat

00:36:04,260 --> 00:36:10,310
suppose we do that with Pat Nick Ronnie

00:36:07,320 --> 00:36:15,869
is for our minerals

00:36:10,310 --> 00:36:22,779
this is only for minerals the ego is our

00:36:15,869 --> 00:36:27,309
and British driver and MgO our

00:36:22,779 --> 00:36:31,450
driver and am keep you our connection

00:36:27,309 --> 00:36:36,970
with RabbitMQ and go that is to render

00:36:31,450 --> 00:36:40,390
rising they go quote if you put all the

00:36:36,970 --> 00:36:43,089
the repository of the goal is the get so

00:36:40,390 --> 00:36:47,140
when you do on the ply and you will

00:36:43,089 --> 00:36:49,839
build your code that goal and take all

00:36:47,140 --> 00:36:52,930
the information from the gate and it's

00:36:49,839 --> 00:36:54,819
dangerous because the he got the

00:36:52,930 --> 00:36:59,170
information he take the information from

00:36:54,819 --> 00:37:02,019
the the master up so it's dangerous

00:36:59,170 --> 00:37:05,890
it's the best option you render rise in

00:37:02,019 --> 00:37:09,390
your dependencies okay that's five

00:37:05,890 --> 00:37:13,869
because testing go many times are ugly

00:37:09,390 --> 00:37:17,339
because you test with F F F F F all the

00:37:13,869 --> 00:37:21,489
time and testify is you put the assert

00:37:17,339 --> 00:37:25,440
assert its equal assert is okay and we

00:37:21,489 --> 00:37:30,119
use this gobble daters is for validation

00:37:25,440 --> 00:37:33,609
with validation is email as true or

00:37:30,119 --> 00:37:39,970
three male three names and the true

00:37:33,609 --> 00:37:43,859
things of films and the go tanks is to

00:37:39,970 --> 00:37:50,650
have a contains you know contains in

00:37:43,859 --> 00:37:54,280
your list God doesn't have strategy so I

00:37:50,650 --> 00:37:57,830
write this library it's not so good

00:37:54,280 --> 00:38:04,630
it's different the rising cold looks

00:37:57,830 --> 00:38:10,040
like genlock if you worked with Ruby

00:38:04,630 --> 00:38:15,530
once and is a vendor ice-cold look the

00:38:10,040 --> 00:38:18,550
revision is the the get history of the

00:38:15,530 --> 00:38:24,430
commit okay

00:38:18,550 --> 00:38:30,830
it's the testify code to give to us more

00:38:24,430 --> 00:38:41,990
beautiful and look that when I made a

00:38:30,830 --> 00:38:44,780
test with test five I have what I have a

00:38:41,990 --> 00:38:48,230
beautiful not so beautiful code but I've

00:38:44,780 --> 00:38:50,660
turned the code to do many things

00:38:48,230 --> 00:38:58,720
look I created errors specifically

00:38:50,660 --> 00:39:03,020
errors to return and return a Redis cash

00:38:58,720 --> 00:39:07,990
and the it is the real code so the mock

00:39:03,020 --> 00:39:07,990
of this is in a cash test

00:39:08,530 --> 00:39:16,480
I'd the mock look the mock here and

00:39:12,370 --> 00:39:21,510
create the mocks and use them set up my

00:39:16,480 --> 00:39:25,840
mocks and after start the setup called I

00:39:21,510 --> 00:39:30,970
will do the asteroid called if they

00:39:25,840 --> 00:39:35,550
don't use dust fight I need to put F is

00:39:30,970 --> 00:39:36,760
not new if the data available is turbo

00:39:35,550 --> 00:39:42,910
okay

00:39:36,760 --> 00:39:47,500
and we always use the last stable

00:39:42,910 --> 00:39:49,750
version of the goal and why you don't

00:39:47,500 --> 00:39:53,230
chop it in the version because it's not

00:39:49,750 --> 00:39:55,420
good is it it's cute role in going you

00:39:53,230 --> 00:39:57,960
change it for the the less stable

00:39:55,420 --> 00:40:03,940
version you don't use the older versions

00:39:57,960 --> 00:40:08,680
and what's the result have to change for

00:40:03,940 --> 00:40:11,350
golang is it now we can registration all

00:40:08,680 --> 00:40:17,620
the logic of the register user and at

00:40:11,350 --> 00:40:20,020
account we can do with 2000 requests to

00:40:17,620 --> 00:40:22,510
four thousand twenty four thousand

00:40:20,020 --> 00:40:24,550
requests per seconds use registrations

00:40:22,510 --> 00:40:28,270
per seconds not repress registrations

00:40:24,550 --> 00:40:32,740
per second and you change it we change

00:40:28,270 --> 00:40:35,290
its from two big monoliths model its to

00:40:32,740 --> 00:40:40,990
a pool of micro service nowadays our

00:40:35,290 --> 00:40:45,130
ivchenko sixteen more micro services 15

00:40:40,990 --> 00:40:47,860
micro services kind of things and we use

00:40:45,130 --> 00:40:52,990
a lot of a lot and many many many many

00:40:47,860 --> 00:40:59,370
standard library we not good nothing

00:40:52,990 --> 00:41:03,730
good in go do you use frameworks because

00:40:59,370 --> 00:41:08,800
look go has a bigger the copy of rails

00:41:03,730 --> 00:41:12,100
okay Big O is a couple of rails and it's

00:41:08,800 --> 00:41:13,770
not good and why because you lost the

00:41:12,100 --> 00:41:16,920
performance of the language

00:41:13,770 --> 00:41:20,010
and this is the same for der frameworks

00:41:16,920 --> 00:41:21,750
and the many stones are libraries that's

00:41:20,010 --> 00:41:27,440
easy to deploy because the microservices

00:41:21,750 --> 00:41:30,150
has done unique in the center code and

00:41:27,440 --> 00:41:33,780
merges dirty boot distributing and the

00:41:30,150 --> 00:41:39,450
simpler then you can you need to merge

00:41:33,780 --> 00:41:43,890
with a big model of the code so and what

00:41:39,450 --> 00:41:46,500
we do with the legacy we have the legacy

00:41:43,890 --> 00:41:48,840
code run yet and why because it's a

00:41:46,500 --> 00:41:53,220
application well for 14 years old you

00:41:48,840 --> 00:41:56,430
don't want to change this application in

00:41:53,220 --> 00:41:59,640
six months it's impossible you need to

00:41:56,430 --> 00:42:01,830
maintain the coexistence so the request

00:41:59,640 --> 00:42:04,910
was receptive by the front end the

00:42:01,830 --> 00:42:09,990
front-end don't change this is in Kayla

00:42:04,910 --> 00:42:14,280
so Kayla said to nginx or this service

00:42:09,990 --> 00:42:18,750
this this guy will be which registrated

00:42:14,280 --> 00:42:21,360
in July or this guy will be registrated

00:42:18,750 --> 00:42:26,820
in the older application engine x2 the

00:42:21,360 --> 00:42:29,640
decision and he can go to the G live

00:42:26,820 --> 00:42:32,460
pool of mercury service Microsoft spoke

00:42:29,640 --> 00:42:36,690
or he can go to the monolithic

00:42:32,460 --> 00:42:41,370
application but you need to mounting the

00:42:36,690 --> 00:42:44,790
database synchronize it and we did that

00:42:41,370 --> 00:42:47,670
with more go allocations the goal comes

00:42:44,790 --> 00:42:50,280
the G consumer and the sink the sink

00:42:47,670 --> 00:42:54,930
take the information from the Oracle and

00:42:50,280 --> 00:42:56,760
write information and the consumer

00:42:54,930 --> 00:42:59,550
take the information from and

00:42:56,760 --> 00:43:02,640
write information in Oracle all the time

00:42:59,550 --> 00:43:10,410
all the time the routines look and

00:43:02,640 --> 00:43:15,569
and look again okay and I want to start

00:43:10,410 --> 00:43:18,420
I wanted to write API it with goal what

00:43:15,569 --> 00:43:22,650
I need to do I recommend a lot

00:43:18,420 --> 00:43:27,269
you read effective goal it's an open

00:43:22,650 --> 00:43:30,239
source book and on the sight of God on

00:43:27,269 --> 00:43:33,720
the goal lines official website and

00:43:30,239 --> 00:43:39,089
there are two to go anger to lost the

00:43:33,720 --> 00:43:42,390
fear of the syntax and goal by example

00:43:39,089 --> 00:43:45,779
is a good option to and why because goal

00:43:42,390 --> 00:43:49,140
by example you need all I need and do a

00:43:45,779 --> 00:43:52,440
mutex that are an example I need to do a

00:43:49,140 --> 00:43:57,859
pool of workers and run an example and

00:43:52,440 --> 00:43:57,859
the goal by example is good by example

00:43:58,039 --> 00:44:02,839
and I thought no questions

00:44:10,260 --> 00:44:18,160
so thank you my content if you want to

00:44:15,010 --> 00:44:20,430
speak with me you haven't quite oh I'll

00:44:18,160 --> 00:44:25,210
pass it up

00:44:20,430 --> 00:44:29,230
hi hi alongside of using yahwah is

00:44:25,210 --> 00:44:33,280
yahwah consumes a lot of memory or your

00:44:29,230 --> 00:44:39,250
servers have to is more expensive and

00:44:33,280 --> 00:44:42,100
what about go yes the consume of the

00:44:39,250 --> 00:44:43,780
goal application don't have a big

00:44:42,100 --> 00:44:48,010
consumer of memory because from the

00:44:43,780 --> 00:44:51,280
process and if you have a lot of your

00:44:48,010 --> 00:44:55,090
routines you need more process than

00:44:51,280 --> 00:44:56,620
memory look I thought I don't speak

00:44:55,090 --> 00:45:02,700
about this but like this

00:44:56,620 --> 00:45:07,900
our stack at now we change from the pad

00:45:02,700 --> 00:45:11,260
to the fast HP the CTP is a new option

00:45:07,900 --> 00:45:14,430
and a new thing of the word morph

00:45:11,260 --> 00:45:18,400
fastening of the word to handlers and

00:45:14,430 --> 00:45:22,420
they create this guy create only two

00:45:18,400 --> 00:45:25,270
objects in the memory it's you can use a

00:45:22,420 --> 00:45:28,120
sink pool and buffer and all your

00:45:25,270 --> 00:45:31,150
objects it's an option too so go don't

00:45:28,120 --> 00:45:33,730
consume a lot of memory you consume more

00:45:31,150 --> 00:45:36,250
processors more cores than memory

00:45:33,730 --> 00:45:42,290
because the routines run you're always

00:45:36,250 --> 00:45:48,240
threatened it happens ok more question

00:45:42,290 --> 00:45:48,780
there are any other questions okay thank

00:45:48,240 --> 00:45:52,940
you a lot

00:45:48,780 --> 00:45:52,940

YouTube URL: https://www.youtube.com/watch?v=Txt7JjtCO-U


