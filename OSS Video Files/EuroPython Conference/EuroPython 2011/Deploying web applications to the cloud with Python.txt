Title: Deploying web applications to the cloud with Python
Publication date: 2015-04-19
Playlist: EuroPython 2011
Description: 
	[EuroPython 2011] Nate Aune - 23 June 2011 in "Track Ravioli"
Captions: 
	00:00:02,370 --> 00:00:10,230
thank you so before we get started I

00:00:09,120 --> 00:00:12,389
just want to get a show of hands how

00:00:10,230 --> 00:00:14,389
many people in here are using

00:00:12,389 --> 00:00:18,200
cloud-based servers like Amazon

00:00:14,389 --> 00:00:24,779
Rackspace okay how many people are using

00:00:18,200 --> 00:00:26,309
photo and fabric wow this is like the

00:00:24,779 --> 00:00:28,469
fabric side of the room where you guys

00:00:26,309 --> 00:00:31,380
all raise your hands okay so some of

00:00:28,469 --> 00:00:32,369
this might be a bit rudimentary for

00:00:31,380 --> 00:00:34,829
those of you have already used this

00:00:32,369 --> 00:00:37,109
stuff I'm kind of targeting this at

00:00:34,829 --> 00:00:39,269
people who who are new to fabric and

00:00:37,109 --> 00:00:41,070
boto so if if you already know this

00:00:39,269 --> 00:00:43,079
stuff this might be a bit basic for you

00:00:41,070 --> 00:00:44,579
but I'm going to give some examples of

00:00:43,079 --> 00:00:46,260
how we're using fabric and boto which

00:00:44,579 --> 00:00:51,679
you might learn some some new stuff from

00:00:46,260 --> 00:00:55,199
there so first of all who am I so I'm

00:00:51,679 --> 00:00:57,350
Python hacker I came to python through

00:00:55,199 --> 00:01:01,920
plone how many people here use plone

00:00:57,350 --> 00:01:05,430
it's a few all right back in 2002 and

00:01:01,920 --> 00:01:08,580
before that I've been doing PHP and asp

00:01:05,430 --> 00:01:10,530
you know those other technologies and

00:01:08,580 --> 00:01:13,710
really loved python and been using it

00:01:10,530 --> 00:01:15,210
ever since i also started using Amazon

00:01:13,710 --> 00:01:19,770
Web Services shortly after they

00:01:15,210 --> 00:01:22,050
announced it and over the years have

00:01:19,770 --> 00:01:23,730
seen em have seen that Amazon is really

00:01:22,050 --> 00:01:25,050
responding to the needs of developers

00:01:23,730 --> 00:01:26,760
like every time I think Wow would be

00:01:25,050 --> 00:01:29,180
really cool amazon had this feature then

00:01:26,760 --> 00:01:31,800
you know they announced some new feature

00:01:29,180 --> 00:01:33,450
so I think that's one reason for their

00:01:31,800 --> 00:01:39,120
success is that they're really thinking

00:01:33,450 --> 00:01:42,450
about what we as developers need I also

00:01:39,120 --> 00:01:46,380
started a company called jazz cardo back

00:01:42,450 --> 00:01:48,390
in 2004 mostly doing plone at the time

00:01:46,380 --> 00:01:50,340
and then the last couple years we

00:01:48,390 --> 00:01:53,580
started doing a lot more Django

00:01:50,340 --> 00:01:56,370
development although we still do a lot

00:01:53,580 --> 00:01:58,980
of plone and most recently I started a

00:01:56,370 --> 00:02:00,420
company called Jango zoom which is going

00:01:58,980 --> 00:02:02,820
to be the case study for this talk so

00:02:00,420 --> 00:02:05,850
I'm going to be showing examples of how

00:02:02,820 --> 00:02:10,609
we're using boto and fabric to deploy

00:02:05,850 --> 00:02:13,200
our infrastructure so just talking about

00:02:10,609 --> 00:02:14,640
their what the game plan is for this

00:02:13,200 --> 00:02:16,530
talk we're going to talk about why

00:02:14,640 --> 00:02:20,230
should you automate deployment

00:02:16,530 --> 00:02:23,140
why is that important will give a brief

00:02:20,230 --> 00:02:24,580
intro to amazon web services for those

00:02:23,140 --> 00:02:27,700
of you that don't know what it is and

00:02:24,580 --> 00:02:32,640
boto i'll give a short tutorial of how

00:02:27,700 --> 00:02:36,250
to use boto we'll talk about fabric and

00:02:32,640 --> 00:02:38,320
then i'll do a get some examples of how

00:02:36,250 --> 00:02:40,570
we're using it and then we'll talk about

00:02:38,320 --> 00:02:42,700
some alternatives to to these tools and

00:02:40,570 --> 00:02:46,900
then hopefully we'll have lots of time

00:02:42,700 --> 00:02:49,690
at the end for questions so hosting and

00:02:46,900 --> 00:02:51,610
deployment challenges there are a lot of

00:02:49,690 --> 00:02:53,110
things that if you're building a web

00:02:51,610 --> 00:02:57,240
application you need to think about when

00:02:53,110 --> 00:02:59,170
it comes to procuring machines and

00:02:57,240 --> 00:03:01,660
making sure that those machines are

00:02:59,170 --> 00:03:03,820
maintained and making sure that it's

00:03:01,660 --> 00:03:06,850
easy for you to push your code up to

00:03:03,820 --> 00:03:08,410
those servers and do new releases so

00:03:06,850 --> 00:03:10,570
some of the things that you might be

00:03:08,410 --> 00:03:12,340
thinking about is if you need more

00:03:10,570 --> 00:03:18,070
server capacity how long does it take

00:03:12,340 --> 00:03:19,060
you to provision those new resources how

00:03:18,070 --> 00:03:22,870
long does it take to roll out a new

00:03:19,060 --> 00:03:27,430
release is it an hour is it add a little

00:03:22,870 --> 00:03:29,950
weak and if something goes wrong and

00:03:27,430 --> 00:03:33,610
your deployment can you roll back to

00:03:29,950 --> 00:03:35,020
previous version and David Kramer gave a

00:03:33,610 --> 00:03:37,030
really great talk the other day about

00:03:35,020 --> 00:03:39,250
how they're doing this that disgusts and

00:03:37,030 --> 00:03:43,120
the importance of having a rollback in

00:03:39,250 --> 00:03:44,680
case something breaks and if your

00:03:43,120 --> 00:03:46,450
servers have really serious problems how

00:03:44,680 --> 00:03:47,770
much downtime can you afford like if

00:03:46,450 --> 00:03:49,090
you're running an e-commerce site and

00:03:47,770 --> 00:03:50,110
your servers are down then like for

00:03:49,090 --> 00:03:53,620
every minute your servers are down

00:03:50,110 --> 00:03:55,510
you're losing money so this all depends

00:03:53,620 --> 00:03:58,030
kind of on what type of application

00:03:55,510 --> 00:04:00,040
you're building and I heard this

00:03:58,030 --> 00:04:02,170
somewhere I can't remember where I first

00:04:00,040 --> 00:04:04,150
heard this but managing servers by

00:04:02,170 --> 00:04:05,290
executing commands via SSH is like

00:04:04,150 --> 00:04:08,260
writing code at the Python interpreter

00:04:05,290 --> 00:04:10,120
prompt so you know if you're still

00:04:08,260 --> 00:04:12,250
logging into your machine and doing

00:04:10,120 --> 00:04:15,700
stuff on the machine and you have no way

00:04:12,250 --> 00:04:17,530
every of actually reproducing that it's

00:04:15,700 --> 00:04:19,299
like a ticking time bomb right because

00:04:17,530 --> 00:04:21,220
there's no history of what you did on

00:04:19,299 --> 00:04:23,410
that machine and how to reproduce it if

00:04:21,220 --> 00:04:28,810
if the Machine goes down or if there's

00:04:23,410 --> 00:04:30,270
some other catastrophic failure so in

00:04:28,810 --> 00:04:34,090
looking at these questions

00:04:30,270 --> 00:04:35,710
it's useful to look at kind of what the

00:04:34,090 --> 00:04:40,180
differences are between traditional

00:04:35,710 --> 00:04:41,860
hosting and what Amazon provides I'm

00:04:40,180 --> 00:04:43,720
just going to talk about some of the

00:04:41,860 --> 00:04:45,850
different differences between these two

00:04:43,720 --> 00:04:47,470
so a traditional hosting you have real

00:04:45,850 --> 00:04:50,860
Hardware typically right you have a

00:04:47,470 --> 00:04:54,190
machine bare metal for better or worse

00:04:50,860 --> 00:04:57,220
that machine goes down you know you've

00:04:54,190 --> 00:04:58,570
got to go to the data center and put

00:04:57,220 --> 00:05:01,960
into a hard drive in it or replace the

00:04:58,570 --> 00:05:04,570
fan or whatever where's amazon they have

00:05:01,960 --> 00:05:07,960
lots of real hardware but they provision

00:05:04,570 --> 00:05:09,910
you a virtual machine and there's a lot

00:05:07,960 --> 00:05:12,880
of pros and cons to virtual machines

00:05:09,910 --> 00:05:14,320
which we can get into the other thing is

00:05:12,880 --> 00:05:15,730
with traditional hosting just by default

00:05:14,320 --> 00:05:16,990
you get persisted storage it's kind of

00:05:15,730 --> 00:05:19,300
expected that you're going to get a hard

00:05:16,990 --> 00:05:20,440
drive and you can you know store your

00:05:19,300 --> 00:05:22,030
data on there and that date is not going

00:05:20,440 --> 00:05:23,680
to go away whereas the Amazon they held

00:05:22,030 --> 00:05:25,750
this thing called a free meal storage

00:05:23,680 --> 00:05:27,460
which means that the server could go

00:05:25,750 --> 00:05:32,170
down and your data could be gone just

00:05:27,460 --> 00:05:35,500
like that and we'll talk about what some

00:05:32,170 --> 00:05:37,210
of the solutions are for that also with

00:05:35,500 --> 00:05:38,590
traditional hosting you just guarantee

00:05:37,210 --> 00:05:40,570
you're going to get a static IP right

00:05:38,590 --> 00:05:43,000
you you boot up the machine and you have

00:05:40,570 --> 00:05:45,340
an IP address whereas with amazon by

00:05:43,000 --> 00:05:46,900
default you get a dynamic IP that could

00:05:45,340 --> 00:05:49,060
change if you reboot the machine you

00:05:46,900 --> 00:05:52,560
might get a different IP so that

00:05:49,060 --> 00:05:55,720
obviously has some ramifications if if

00:05:52,560 --> 00:05:59,770
you're using that as your main web

00:05:55,720 --> 00:06:02,020
server and then lastly when you get a

00:05:59,770 --> 00:06:04,090
machine from a traditional host they

00:06:02,020 --> 00:06:05,410
pretty much just give me the raw

00:06:04,090 --> 00:06:07,690
operating system right there's nothing

00:06:05,410 --> 00:06:09,880
else installed on that server when you

00:06:07,690 --> 00:06:12,340
get it and amazon has come up with this

00:06:09,880 --> 00:06:14,260
thing called Amazon machine images which

00:06:12,340 --> 00:06:15,400
could just be a bear machine with just

00:06:14,260 --> 00:06:18,520
the operating system but it could also

00:06:15,400 --> 00:06:21,970
be a full-blown stack of Python or

00:06:18,520 --> 00:06:24,040
Django or even higher level applications

00:06:21,970 --> 00:06:25,930
like clone you could just boot up an ami

00:06:24,040 --> 00:06:30,490
and it already has blown set up and

00:06:25,930 --> 00:06:31,510
configured and installed so let's talk a

00:06:30,490 --> 00:06:35,890
little bit more about the Amazon

00:06:31,510 --> 00:06:37,660
infrastructure amazon has been as I

00:06:35,890 --> 00:06:41,010
mentioned before releasing new features

00:06:37,660 --> 00:06:43,740
to their stack all the time and the most

00:06:41,010 --> 00:06:46,590
popular one is probably the ec2

00:06:43,740 --> 00:06:48,900
thalassa computing cloud and this gives

00:06:46,590 --> 00:06:50,910
you virtual machines on demand basically

00:06:48,900 --> 00:06:55,229
one command and you've got a machine at

00:06:50,910 --> 00:06:57,349
your disposal that problem i mentioned

00:06:55,229 --> 00:07:00,360
before about the storage just going away

00:06:57,349 --> 00:07:03,870
amazon came up with this thing called

00:07:00,360 --> 00:07:05,729
EBS elastic block storage and this gives

00:07:03,870 --> 00:07:08,039
you the persistent storage gives you a

00:07:05,729 --> 00:07:10,979
volume that you can attach or detach

00:07:08,039 --> 00:07:12,630
from any from any machine and you can

00:07:10,979 --> 00:07:14,819
create snapshots of those EBS volumes

00:07:12,630 --> 00:07:16,440
and attach to attach those volumes to

00:07:14,819 --> 00:07:18,539
other machine so it gives you this very

00:07:16,440 --> 00:07:19,770
flexible way of moving data around to

00:07:18,539 --> 00:07:22,110
different machines if a machine goes

00:07:19,770 --> 00:07:23,610
down your data is still safe and you can

00:07:22,110 --> 00:07:27,419
just retype that volume to another

00:07:23,610 --> 00:07:30,180
machine and I should mention that the

00:07:27,419 --> 00:07:32,099
Amazon really encourages you to think of

00:07:30,180 --> 00:07:34,110
these machines as disposable to think of

00:07:32,099 --> 00:07:38,310
a machine is something that could go

00:07:34,110 --> 00:07:40,080
away at any moment and you should build

00:07:38,310 --> 00:07:41,940
your infrastructure to be resilient to

00:07:40,080 --> 00:07:45,599
that which is a good idea anyways but

00:07:41,940 --> 00:07:47,840
with Amazon you kind of have to and then

00:07:45,599 --> 00:07:50,340
before I mentioned that there's these

00:07:47,840 --> 00:07:51,810
dynamic ip's that by default you get

00:07:50,340 --> 00:07:54,650
well amazon came up with this thing

00:07:51,810 --> 00:07:56,880
called elastic IPS which which is a

00:07:54,650 --> 00:07:59,639
solution to the public IP but it's even

00:07:56,880 --> 00:08:02,250
more interesting and that you can on the

00:07:59,639 --> 00:08:06,120
fly assigned a new IP to any other

00:08:02,250 --> 00:08:09,870
machine in an instant it doesn't there's

00:08:06,120 --> 00:08:11,370
no like DNS propagation wait time they

00:08:09,870 --> 00:08:13,680
also have elastic load balancing which

00:08:11,370 --> 00:08:16,130
lets you load balance between different

00:08:13,680 --> 00:08:18,509
virtual machines I already mentioned the

00:08:16,130 --> 00:08:21,870
Amazon machine image which you can share

00:08:18,509 --> 00:08:24,180
with other people s3 this is also a

00:08:21,870 --> 00:08:25,680
really popular service cloud front lets

00:08:24,180 --> 00:08:29,699
you take assets you have an s3 and

00:08:25,680 --> 00:08:31,139
provide them via cash caching and then

00:08:29,699 --> 00:08:33,829
they introduced something called RDS

00:08:31,139 --> 00:08:35,760
which is a relational database service

00:08:33,829 --> 00:08:37,409
and this gives you sort of like

00:08:35,760 --> 00:08:40,169
databases on demand right now it's just

00:08:37,409 --> 00:08:42,570
my SQL and I think Oracle is supported

00:08:40,169 --> 00:08:45,149
as well be great if they would do

00:08:42,570 --> 00:08:46,230
postgres but I guess those are the first

00:08:45,149 --> 00:08:49,170
two that they thought they should

00:08:46,230 --> 00:08:50,570
provide and they also do replication so

00:08:49,170 --> 00:08:53,390
the databases are replicated across

00:08:50,570 --> 00:08:56,720
multiple data centers

00:08:53,390 --> 00:08:58,760
so that's just a very brief overview of

00:08:56,720 --> 00:09:00,410
amazon infrastructure it's kind of an

00:08:58,760 --> 00:09:03,700
alphabet soup you know there's like all

00:09:00,410 --> 00:09:09,640
these different services that they offer

00:09:03,700 --> 00:09:14,300
so what is boto well photo is a dolphin

00:09:09,640 --> 00:09:16,520
that lives in the Amazon River and it

00:09:14,300 --> 00:09:18,080
comes in two colors comes in pink and it

00:09:16,520 --> 00:09:21,470
comes in black and it said that the

00:09:18,080 --> 00:09:23,480
black boto is the friendly one it helps

00:09:21,470 --> 00:09:25,280
save people if you're drowning you know

00:09:23,480 --> 00:09:27,470
you better hope it's the black photo and

00:09:25,280 --> 00:09:30,710
it comes to save you but the pink one is

00:09:27,470 --> 00:09:31,790
dangerous and these these animals are

00:09:30,710 --> 00:09:34,850
interesting because they're they're

00:09:31,790 --> 00:09:37,130
nearly blind but they have this

00:09:34,850 --> 00:09:39,650
sophisticated sonar system that helps

00:09:37,130 --> 00:09:44,030
them to navigate these muddy Amazonian

00:09:39,650 --> 00:09:48,110
rivers so that's the origin of the word

00:09:44,030 --> 00:09:51,620
boat oh but it's also a Python interface

00:09:48,110 --> 00:09:53,300
to Amazon Web Services and it was

00:09:51,620 --> 00:09:56,230
written by a guy named Mitch Garnett

00:09:53,300 --> 00:09:58,820
oops did we just lose our connection oh

00:09:56,230 --> 00:10:04,430
it's back okay must have stepped on

00:09:58,820 --> 00:10:07,480
something mitch is a Python hacker who's

00:10:04,430 --> 00:10:10,820
been maintaining the boat a library

00:10:07,480 --> 00:10:12,170
since 2007 and he now works for company

00:10:10,820 --> 00:10:16,760
called eucalyptus they provide like

00:10:12,170 --> 00:10:19,250
private clouds services and boto is

00:10:16,760 --> 00:10:20,990
great it provides pretty much python

00:10:19,250 --> 00:10:22,460
interface to everything that amazon

00:10:20,990 --> 00:10:24,800
provides like whenever amazon comes out

00:10:22,460 --> 00:10:26,690
with something new Mitch and other

00:10:24,800 --> 00:10:32,840
people that work on Votto are quick to

00:10:26,690 --> 00:10:34,820
add that functionality so I'm just going

00:10:32,840 --> 00:10:37,010
to dive into some code this this talk I

00:10:34,820 --> 00:10:41,360
should mention is pretty code example

00:10:37,010 --> 00:10:42,650
heavy so I can show a lot of it or we

00:10:41,360 --> 00:10:45,290
can skip over and just get two questions

00:10:42,650 --> 00:10:47,300
really fast so if you guys are getting

00:10:45,290 --> 00:10:48,920
bored with all the code we can go to

00:10:47,300 --> 00:10:50,750
questions but I thought it given an

00:10:48,920 --> 00:10:54,350
overview sort of how to use boto from a

00:10:50,750 --> 00:10:56,630
really basic level so here we have the

00:10:54,350 --> 00:10:59,540
Python prompt and you just import the

00:10:56,630 --> 00:11:02,000
boto library and you set up a connection

00:10:59,540 --> 00:11:03,650
you pass in your access key in your

00:11:02,000 --> 00:11:06,230
secret key which you which amazon

00:11:03,650 --> 00:11:07,300
provides to you or if you have the

00:11:06,230 --> 00:11:10,180
environment variables

00:11:07,300 --> 00:11:11,950
then it just reads that out of your

00:11:10,180 --> 00:11:13,060
environment and you can just these two

00:11:11,950 --> 00:11:16,630
lines of code and you have a connection

00:11:13,060 --> 00:11:19,360
to Amazon ec2 the next thing you need to

00:11:16,630 --> 00:11:20,740
do is you need to find an ami and that

00:11:19,360 --> 00:11:25,360
remember that's the Amazon machine image

00:11:20,740 --> 00:11:28,300
and we use the a.m eyes the official am

00:11:25,360 --> 00:11:32,620
eyes from canonical so we're using the

00:11:28,300 --> 00:11:34,209
Ubuntu 1010 image which if you go to

00:11:32,620 --> 00:11:37,690
that URL you'll get a list of all of

00:11:34,209 --> 00:11:40,690
them and that's the one for this example

00:11:37,690 --> 00:11:44,160
we'll use so the first the first part

00:11:40,690 --> 00:11:47,529
here is us East that's the region that

00:11:44,160 --> 00:11:49,120
that the ami is located in the second is

00:11:47,529 --> 00:11:51,610
what architecture so they have 32-bit or

00:11:49,120 --> 00:11:53,050
64-bit and then this EBS thing means

00:11:51,610 --> 00:11:56,560
that the machine is actually booting off

00:11:53,050 --> 00:11:58,000
an EBS volume so if you shut if you stop

00:11:56,560 --> 00:12:02,110
the Machine your data is persisted

00:11:58,000 --> 00:12:03,040
unlike previous ec2 with the instant

00:12:02,110 --> 00:12:05,140
store where if you shut down your

00:12:03,040 --> 00:12:07,240
machine your data is gone so we just by

00:12:05,140 --> 00:12:08,920
default use the EBS volumes because

00:12:07,240 --> 00:12:12,520
that's one less thing we have to worry

00:12:08,920 --> 00:12:14,110
about also if the machine does happen to

00:12:12,520 --> 00:12:16,450
go down you can't Association to it you

00:12:14,110 --> 00:12:18,279
can attach that EBS volume to another

00:12:16,450 --> 00:12:22,930
machine and recover your data so that's

00:12:18,279 --> 00:12:25,630
also very useful so we take that a my ID

00:12:22,930 --> 00:12:29,410
and then we pass it in as a parameter to

00:12:25,630 --> 00:12:32,829
the run instance method and then we also

00:12:29,410 --> 00:12:36,279
pass in the key name so Amazon requires

00:12:32,829 --> 00:12:38,320
that you do keep air authentication is

00:12:36,279 --> 00:12:40,899
there's no passwords every pass or

00:12:38,320 --> 00:12:42,070
anything like that so you have to pass

00:12:40,899 --> 00:12:47,020
in your key pair if you want to be able

00:12:42,070 --> 00:12:49,720
to ssh in the machine and then you you

00:12:47,020 --> 00:12:52,270
basically just keep pulling until the

00:12:49,720 --> 00:12:56,440
state changes from pending to running

00:12:52,270 --> 00:12:59,190
and that tells you that your that your

00:12:56,440 --> 00:12:59,190
machine is now online

00:13:03,620 --> 00:13:07,680
okay so once the machine is running then

00:13:06,180 --> 00:13:10,740
you can inspect it you can find out its

00:13:07,680 --> 00:13:16,050
public dns name you can also find its

00:13:10,740 --> 00:13:17,700
private dns name and at this point we

00:13:16,050 --> 00:13:19,950
still can't access this machine because

00:13:17,700 --> 00:13:23,130
all the ports are closed by default the

00:13:19,950 --> 00:13:27,630
machine doesn't have any ports open so

00:13:23,130 --> 00:13:28,770
we have to set up security groups which

00:13:27,630 --> 00:13:30,870
i'm going to show you in just a sec

00:13:28,770 --> 00:13:32,630
another thing to remember is that once

00:13:30,870 --> 00:13:35,130
you start a machine you're paying for it

00:13:32,630 --> 00:13:37,860
you know by the hour you pay for the

00:13:35,130 --> 00:13:39,660
first hour so if you're just playing

00:13:37,860 --> 00:13:41,250
around don't forget to shut it down or

00:13:39,660 --> 00:13:42,810
you might be in for a shock at the end

00:13:41,250 --> 00:13:48,920
of the month when you get your Amazon

00:13:42,810 --> 00:13:51,540
bill so yeah basically you just type in

00:13:48,920 --> 00:13:53,040
stop instance that stopped and it will

00:13:51,540 --> 00:13:58,410
shut it down and then when it's done

00:13:53,040 --> 00:14:00,870
it'll say terminated okay so security

00:13:58,410 --> 00:14:03,780
groups so Amazon provides a really

00:14:00,870 --> 00:14:05,070
flexible way of defining security sort

00:14:03,780 --> 00:14:07,440
of the port's that you make available

00:14:05,070 --> 00:14:09,420
for people to connect into the machine

00:14:07,440 --> 00:14:13,140
whether it's port 80 for web access or

00:14:09,420 --> 00:14:14,730
port 22 for ssh access and so here's an

00:14:13,140 --> 00:14:16,800
example of looking at what all the

00:14:14,730 --> 00:14:18,300
security groups are and the the one

00:14:16,800 --> 00:14:20,310
you'll usually use is just a default

00:14:18,300 --> 00:14:21,420
security group that you can assign to

00:14:20,310 --> 00:14:23,340
all of your machines like if you know

00:14:21,420 --> 00:14:25,200
you want port 22 open on all your

00:14:23,340 --> 00:14:27,270
machines you can just add that to your

00:14:25,200 --> 00:14:29,010
default group and then other machines

00:14:27,270 --> 00:14:33,450
you probably wouldn't want to have port

00:14:29,010 --> 00:14:35,010
22 open on all your machines maybe

00:14:33,450 --> 00:14:36,780
you're really security conscious you

00:14:35,010 --> 00:14:37,740
want to build SSH into one machine and

00:14:36,780 --> 00:14:42,600
then from that machine be able to

00:14:37,740 --> 00:14:43,980
connect to your other servers so once

00:14:42,600 --> 00:14:46,830
we've created some security groups this

00:14:43,980 --> 00:14:51,840
is an example of a just a creating a new

00:14:46,830 --> 00:14:55,560
Apache group and authorizing port 80

00:14:51,840 --> 00:14:59,400
that's what the this is from port 80 to

00:14:55,560 --> 00:15:03,480
port 80 and the second part is basically

00:14:59,400 --> 00:15:07,100
saying anything can any IP address can

00:15:03,480 --> 00:15:07,100
can access this machine at port 80

00:15:08,930 --> 00:15:14,460
okay so if we were to assign this Apache

00:15:12,780 --> 00:15:16,380
security group to that server that we

00:15:14,460 --> 00:15:17,700
just created and we install the patching

00:15:16,380 --> 00:15:20,850
on that server then we should be able to

00:15:17,700 --> 00:15:24,090
access it at this URL and we should get

00:15:20,850 --> 00:15:29,970
the classic it works ! from response

00:15:24,090 --> 00:15:31,830
from Apache but you may not want to have

00:15:29,970 --> 00:15:32,970
your web server and your database

00:15:31,830 --> 00:15:34,550
serving your app server I'll running on

00:15:32,970 --> 00:15:38,460
the same machine you might want to have

00:15:34,550 --> 00:15:40,460
three tier architecture and this is an

00:15:38,460 --> 00:15:43,440
example of how you could authorize

00:15:40,460 --> 00:15:46,320
internal traffic between your web server

00:15:43,440 --> 00:15:49,860
and your app server so we create another

00:15:46,320 --> 00:15:52,020
security group called app server which

00:15:49,860 --> 00:15:54,270
is our application tier and we authorize

00:15:52,020 --> 00:15:56,970
the web group so that we we type in

00:15:54,270 --> 00:15:58,890
source group equals web and that allows

00:15:56,970 --> 00:16:02,360
the web server to to talk to the off

00:15:58,890 --> 00:16:07,350
server and you'll notice that we've just

00:16:02,360 --> 00:16:10,740
enabled SSH access on port 22 for this

00:16:07,350 --> 00:16:12,450
the IP address of that machine so how

00:16:10,740 --> 00:16:15,750
would we act how do we enable ssh access

00:16:12,450 --> 00:16:21,720
from any machine what do we have what

00:16:15,750 --> 00:16:26,670
would we have to change here that's

00:16:21,720 --> 00:16:28,770
anyone remember from the last slide yep

00:16:26,670 --> 00:16:31,290
you'd have all zeros right here and that

00:16:28,770 --> 00:16:35,839
would allow any machine to be able to

00:16:31,290 --> 00:16:35,839
access your your web server

00:16:38,850 --> 00:16:48,940
sorry all your machines if they're in

00:16:45,640 --> 00:16:50,110
the same availability zone then they're

00:16:48,940 --> 00:16:51,550
all they should be all on the same

00:16:50,110 --> 00:16:54,430
subnet if you haven't spread across

00:16:51,550 --> 00:16:58,899
different ones then then you might run

00:16:54,430 --> 00:17:01,300
into some issues with that so then you

00:16:58,899 --> 00:17:03,010
can look at the rules and see that well

00:17:01,300 --> 00:17:05,230
here's an example where we revoke the

00:17:03,010 --> 00:17:12,069
permission after we've added it so you

00:17:05,230 --> 00:17:13,689
can add and remove these things so in

00:17:12,069 --> 00:17:18,910
order to ssh in that machine we would

00:17:13,689 --> 00:17:20,199
change it here to all zeros and then the

00:17:18,910 --> 00:17:22,380
command to connect to that machine

00:17:20,199 --> 00:17:27,100
within the SSH you have to pass in the

00:17:22,380 --> 00:17:30,130
key pair that you created and then since

00:17:27,100 --> 00:17:31,720
we're using ubuntu's am is they don't

00:17:30,130 --> 00:17:35,830
let you login as root you have to login

00:17:31,720 --> 00:17:45,010
as the abloom to user and then from

00:17:35,830 --> 00:17:48,640
there you can obviously sudo okay so if

00:17:45,010 --> 00:17:49,900
you guys went to David's talk or Simon

00:17:48,640 --> 00:17:51,370
Williston's talk from lanyard you

00:17:49,900 --> 00:17:55,419
probably heard about how awesome fabric

00:17:51,370 --> 00:17:57,250
is and so I want to just give a brief

00:17:55,419 --> 00:17:59,200
overview of what you can do the fabric

00:17:57,250 --> 00:18:01,780
so what is fabric it's a Python library

00:17:59,200 --> 00:18:03,640
and command-line tool for streamlining

00:18:01,780 --> 00:18:05,050
the use of ssh for application

00:18:03,640 --> 00:18:08,620
deployment or systems administration

00:18:05,050 --> 00:18:11,830
tasks and Jeff force here is the

00:18:08,620 --> 00:18:15,100
maintainer who I met at PyCon really

00:18:11,830 --> 00:18:16,419
nice guy and there's a lot of other

00:18:15,100 --> 00:18:21,250
people that are contributing to fabric

00:18:16,419 --> 00:18:22,960
there's a fabric contrib whole ecosystem

00:18:21,250 --> 00:18:27,610
of people that are building stuff for

00:18:22,960 --> 00:18:31,210
fabric that extend it and it provides a

00:18:27,610 --> 00:18:33,700
basic suite of operations for local and

00:18:31,210 --> 00:18:36,490
remote shell commands uploading dental

00:18:33,700 --> 00:18:39,580
any files prompting user for info input

00:18:36,490 --> 00:18:40,990
and a whole bunch of other stuff so

00:18:39,580 --> 00:18:43,510
let's just look at a really simple

00:18:40,990 --> 00:18:45,280
example if you've ever looked at the

00:18:43,510 --> 00:18:46,780
fabric tutorial you'll probably

00:18:45,280 --> 00:18:48,370
recognize some of this this is not a

00:18:46,780 --> 00:18:50,320
very good example because I wouldn't

00:18:48,370 --> 00:18:50,930
really recommend using fabric to do your

00:18:50,320 --> 00:18:53,540
get

00:18:50,930 --> 00:18:55,310
it's but just for purposes of this

00:18:53,540 --> 00:18:58,640
example let's say that you wanted to do

00:18:55,310 --> 00:19:00,800
that so this this is a the Fab file that

00:18:58,640 --> 00:19:04,130
py it's just when you start out you can

00:19:00,800 --> 00:19:06,950
just use a single file and we're going

00:19:04,130 --> 00:19:11,180
to import the local module and that

00:19:06,950 --> 00:19:12,950
allows us to run local commands not

00:19:11,180 --> 00:19:15,170
commands on the remote server but just

00:19:12,950 --> 00:19:17,360
on our machine so in this case we're

00:19:15,170 --> 00:19:21,530
just running the tests of our django app

00:19:17,360 --> 00:19:26,690
and if everything looks okay we we add

00:19:21,530 --> 00:19:28,910
those changes and we commit them so what

00:19:26,690 --> 00:19:32,600
does that look like when we run it just

00:19:28,910 --> 00:19:36,620
do fab space prepare deploy and it runs

00:19:32,600 --> 00:19:40,880
our tests and if they pass then it does

00:19:36,620 --> 00:19:42,860
the commit and because this is just

00:19:40,880 --> 00:19:47,060
Python you can make it more granular you

00:19:42,860 --> 00:19:49,490
can break these things up so our prepare

00:19:47,060 --> 00:19:54,890
deploy method is basically just calling

00:19:49,490 --> 00:19:56,690
the test method in the commit and what

00:19:54,890 --> 00:20:01,100
this means is that if there's a test

00:19:56,690 --> 00:20:03,440
that fails then it will just abort the

00:20:01,100 --> 00:20:06,200
prepared prepare deploy command and you

00:20:03,440 --> 00:20:09,500
won't it won't try to do a commit

00:20:06,200 --> 00:20:16,220
because our tests aren't passing it'll

00:20:09,500 --> 00:20:18,500
never run the commit task so fabric also

00:20:16,220 --> 00:20:21,080
lets you do some some pretty nice

00:20:18,500 --> 00:20:26,060
failure handling so you can set an

00:20:21,080 --> 00:20:28,520
environment variable to warn only which

00:20:26,060 --> 00:20:31,010
lets you turn aborts into warnings and

00:20:28,520 --> 00:20:36,440
allows more flexible error handling so

00:20:31,010 --> 00:20:38,060
in this example we we're studying

00:20:36,440 --> 00:20:41,990
warning equals true and that means that

00:20:38,060 --> 00:20:44,480
when the tests fail you can prompt the

00:20:41,990 --> 00:20:48,410
user and you can say do your test failed

00:20:44,480 --> 00:20:51,050
are you sure you want to commit and if

00:20:48,410 --> 00:20:52,460
they say no then it just the bots if

00:20:51,050 --> 00:20:54,830
they say yes then it goes ahead with it

00:20:52,460 --> 00:20:57,370
if you don't do this then it's always

00:20:54,830 --> 00:20:57,370
going to abort

00:20:57,450 --> 00:21:04,529
so that's local if you want to do remote

00:21:00,110 --> 00:21:06,120
commands then you import the run command

00:21:04,529 --> 00:21:08,779
which I didn't show on this slide but

00:21:06,120 --> 00:21:13,580
you wouldn't you'd import run and then

00:21:08,779 --> 00:21:16,080
you would pass in the the hostname and

00:21:13,580 --> 00:21:18,840
in this case we're doing a git pull and

00:21:16,080 --> 00:21:20,490
then we run in this case we're touching

00:21:18,840 --> 00:21:24,870
app that whiskey which would restart

00:21:20,490 --> 00:21:28,380
apache with the directories serve Django

00:21:24,870 --> 00:21:30,960
my project so it's really as simple as

00:21:28,380 --> 00:21:33,000
that I mean you know you just it does

00:21:30,960 --> 00:21:34,139
all the hard work for you just put run

00:21:33,000 --> 00:21:38,120
and then whatever command you want to

00:21:34,139 --> 00:21:44,010
have run on the server and it magically

00:21:38,120 --> 00:21:47,010
execute those commands so if i run this

00:21:44,010 --> 00:21:49,440
command it says no house phone please

00:21:47,010 --> 00:21:52,470
specify a host ring so it'll prompt you

00:21:49,440 --> 00:21:56,899
if you don't specify a server in this

00:21:52,470 --> 00:21:56,899
case it's server name is my server and

00:21:57,950 --> 00:22:10,470
then it executes the command so here

00:22:07,320 --> 00:22:14,519
we're also doing a check out on the

00:22:10,470 --> 00:22:16,950
server so you can also check to see in

00:22:14,519 --> 00:22:19,649
this case we also want to check to see

00:22:16,950 --> 00:22:21,570
does has we have we done a check out at

00:22:19,649 --> 00:22:23,940
all and if we haven't then on the first

00:22:21,570 --> 00:22:25,529
deploy this will do a check out ever

00:22:23,940 --> 00:22:29,610
code if it's if it detects that there's

00:22:25,529 --> 00:22:38,549
already directory there then it will it

00:22:29,610 --> 00:22:39,779
will not do that step so one thing if

00:22:38,549 --> 00:22:41,309
you're doing a git clone is that

00:22:39,779 --> 00:22:43,049
probably the first time it doesn't know

00:22:41,309 --> 00:22:48,149
who you are it needs a username and a

00:22:43,049 --> 00:22:51,570
password so this will fabric will allow

00:22:48,149 --> 00:22:53,490
you to have an interactive session so in

00:22:51,570 --> 00:22:54,960
this case it's is trying to do a clone

00:22:53,490 --> 00:22:57,870
and then it doesn't have the password so

00:22:54,960 --> 00:22:59,460
it it asks you for the password so this

00:22:57,870 --> 00:23:01,019
is all happening without ever SSH into

00:22:59,460 --> 00:23:05,429
the machine you're just channeling

00:23:01,019 --> 00:23:06,899
everything through fabric now it's kind

00:23:05,429 --> 00:23:08,279
of a pain to have to type in my server

00:23:06,899 --> 00:23:10,019
every time I run this command right if

00:23:08,279 --> 00:23:10,950
the server is not changing I want to

00:23:10,019 --> 00:23:14,280
just set that

00:23:10,950 --> 00:23:17,610
so fabric provides a environment global

00:23:14,280 --> 00:23:21,810
dictionary object in this case we have a

00:23:17,610 --> 00:23:23,100
dot hosts and we can set that to our

00:23:21,810 --> 00:23:30,420
server and then every time we run this

00:23:23,100 --> 00:23:33,180
it'll just use that setting so that's a

00:23:30,420 --> 00:23:38,970
basic overview of fabric any questions

00:23:33,180 --> 00:24:09,210
on that before I move on okay Oh

00:23:38,970 --> 00:24:11,040
question the back so I think your

00:24:09,210 --> 00:24:13,590
question is if you run it interactively

00:24:11,040 --> 00:24:15,740
are you able to capture the input from

00:24:13,590 --> 00:24:15,740
the user

00:24:25,030 --> 00:24:33,990
I haven't had that kind of situation as

00:24:32,440 --> 00:24:42,940
anyone else here know the answer that

00:24:33,990 --> 00:24:46,210
Patrick there's a flag use TTYL okay hey

00:24:42,940 --> 00:24:51,940
I learned something today okay any other

00:24:46,210 --> 00:24:54,040
questions all right so I like to talk

00:24:51,940 --> 00:24:56,830
about how how we're using this Jango

00:24:54,040 --> 00:24:59,080
zoom and just briefly what is Django

00:24:56,830 --> 00:25:01,200
ziam so it's a if you went to Wesley

00:24:59,080 --> 00:25:06,400
Wesley tons talk about Google App Engine

00:25:01,200 --> 00:25:08,110
I tried google app engine in 2008 not

00:25:06,400 --> 00:25:09,970
longer after was announced and I really

00:25:08,110 --> 00:25:13,120
liked the ease of deployment I love the

00:25:09,970 --> 00:25:14,620
scalability but at the time and I think

00:25:13,120 --> 00:25:16,870
even to this day there's still a lot of

00:25:14,620 --> 00:25:19,540
constraints there's no lxml there's no

00:25:16,870 --> 00:25:20,530
pill there's no postgres or mysql you

00:25:19,540 --> 00:25:22,420
can only have three thousand files

00:25:20,530 --> 00:25:24,190
there's a lot of limits limitations and

00:25:22,420 --> 00:25:26,290
constraints as great as Google App

00:25:24,190 --> 00:25:29,470
Engine is and I really wanted to be able

00:25:26,290 --> 00:25:31,150
to run native Django apps but with the

00:25:29,470 --> 00:25:32,650
same benefits of google app engine where

00:25:31,150 --> 00:25:34,690
you can just push one button in your

00:25:32,650 --> 00:25:38,220
your code is magically deployed and

00:25:34,690 --> 00:25:40,720
everything's taken care for you so

00:25:38,220 --> 00:25:45,010
Django zoom is a platform as a service

00:25:40,720 --> 00:25:46,630
and we're really trying to make it easy

00:25:45,010 --> 00:25:48,190
for developers to not have to think

00:25:46,630 --> 00:25:50,350
about the systems administration stuff

00:25:48,190 --> 00:25:53,680
you don't really have to log in the

00:25:50,350 --> 00:25:57,970
machine you just give us your code and

00:25:53,680 --> 00:25:59,320
we take care of it and the other goal is

00:25:57,970 --> 00:26:02,140
to provide real scalable and reliable

00:25:59,320 --> 00:26:03,550
hosting so I'm just going to go through

00:26:02,140 --> 00:26:06,250
a few screenshots just so you can kind

00:26:03,550 --> 00:26:09,690
of get a flavor for how it works so I'm

00:26:06,250 --> 00:26:12,400
logged in to the Django zoom dashboard

00:26:09,690 --> 00:26:15,940
just click on the add new project and I

00:26:12,400 --> 00:26:18,690
pasted in the github URL click Next and

00:26:15,940 --> 00:26:21,460
it checks out the code and it starts

00:26:18,690 --> 00:26:24,460
inspecting the settings file and looking

00:26:21,460 --> 00:26:26,830
for things about my projects and it also

00:26:24,460 --> 00:26:29,590
will detect if I requirements file in my

00:26:26,830 --> 00:26:32,800
in my repo and it will load that and

00:26:29,590 --> 00:26:34,540
install all my dependencies if I just

00:26:32,800 --> 00:26:36,220
check these over I can make changes and

00:26:34,540 --> 00:26:38,620
if everything looks okay I say next and

00:26:36,220 --> 00:26:41,590
then if if everything was okay I

00:26:38,620 --> 00:26:43,960
get a job succeeded in you know less

00:26:41,590 --> 00:26:47,410
than a minute with a URL where I can go

00:26:43,960 --> 00:26:48,940
look at my by running django app if

00:26:47,410 --> 00:26:50,860
something goes wrong it will tell me

00:26:48,940 --> 00:26:54,160
that it failed and then i can scroll

00:26:50,860 --> 00:26:55,600
through the log output and see where the

00:26:54,160 --> 00:26:56,650
failure maybe there's an import error or

00:26:55,600 --> 00:26:59,920
i forgot to add something to my

00:26:56,650 --> 00:27:01,720
requirements out txt file and then i can

00:26:59,920 --> 00:27:04,120
just fix that check it back in to get

00:27:01,720 --> 00:27:06,160
and then just click the button to build

00:27:04,120 --> 00:27:10,300
and deploy a new version of the django

00:27:06,160 --> 00:27:15,429
app so it's really designed to be easy

00:27:10,300 --> 00:27:16,720
to use really user-friendly and doesn't

00:27:15,429 --> 00:27:18,490
require you to install any special

00:27:16,720 --> 00:27:22,900
plugins on your machine or change your

00:27:18,490 --> 00:27:24,510
your code base at all set you don't have

00:27:22,900 --> 00:27:26,650
to creating config files basically just

00:27:24,510 --> 00:27:31,000
intelligently figures out how your app

00:27:26,650 --> 00:27:33,640
is structured and deploys it for you so

00:27:31,000 --> 00:27:37,330
we've taken what is a pretty complex

00:27:33,640 --> 00:27:40,980
process and simplified it in that that

00:27:37,330 --> 00:27:43,090
really means that you know we're in

00:27:40,980 --> 00:27:44,830
order to provide the service in a real

00:27:43,090 --> 00:27:47,980
reliable stable way while still being

00:27:44,830 --> 00:27:49,330
able to respond quick to two requests we

00:27:47,980 --> 00:27:56,860
need to make the deployment reliable

00:27:49,330 --> 00:28:01,290
sorry repeatable why is it important to

00:27:56,860 --> 00:28:01,290
create with label deployments anyone

00:28:03,030 --> 00:28:06,929
scalability okay

00:28:08,179 --> 00:28:36,750
your machines can disappear yep yep in

00:28:22,260 --> 00:28:38,370
the back yep documentation yeah I think

00:28:36,750 --> 00:28:41,460
you guys hit on pretty much all of my

00:28:38,370 --> 00:28:42,960
points so humans make errors right so

00:28:41,460 --> 00:28:44,970
having a repeatable deployment less

00:28:42,960 --> 00:28:46,710
chance for human error you can do faster

00:28:44,970 --> 00:28:49,559
releases and bug fixes when it's

00:28:46,710 --> 00:28:50,760
repeatable it's easier to set up testing

00:28:49,559 --> 00:28:52,919
stage environments if you want to do

00:28:50,760 --> 00:28:56,309
load testing or you want to run bunch of

00:28:52,919 --> 00:28:59,070
tests if there is some sort of failure

00:28:56,309 --> 00:29:03,780
you can easily set up a failover cluster

00:28:59,070 --> 00:29:05,909
very quickly and like Patrick just said

00:29:03,780 --> 00:29:08,130
your documentation is executable you're

00:29:05,909 --> 00:29:10,260
basically documenting what all the steps

00:29:08,130 --> 00:29:12,990
that are needed to reproduce your

00:29:10,260 --> 00:29:14,610
environment which makes it really easy

00:29:12,990 --> 00:29:15,929
for a new developer to get up to speed

00:29:14,610 --> 00:29:18,120
because they can just look at your

00:29:15,929 --> 00:29:22,730
deployment scripts and and get an

00:29:18,120 --> 00:29:25,169
environment set up quickly so here's a

00:29:22,730 --> 00:29:27,030
diagram I don't know how readable this

00:29:25,169 --> 00:29:30,539
is back there but this is kind of

00:29:27,030 --> 00:29:32,130
overview of our three tier pretty

00:29:30,539 --> 00:29:35,730
typical three-tier architecture we have

00:29:32,130 --> 00:29:39,000
a front-end proxy machine an appt sir

00:29:35,730 --> 00:29:41,120
and a back-end database server and then

00:29:39,000 --> 00:29:44,220
we have a monitoring machine that's

00:29:41,120 --> 00:29:46,860
watching over all these servers and

00:29:44,220 --> 00:29:48,270
alerting us if something goes wrong then

00:29:46,860 --> 00:29:51,630
we have a build server that runs all the

00:29:48,270 --> 00:29:55,860
builds and deploys the code to the

00:29:51,630 --> 00:29:57,570
various machines and our fab file in

00:29:55,860 --> 00:30:02,039
very simple form looks something like

00:29:57,570 --> 00:30:05,909
this we have we call it whip up full

00:30:02,039 --> 00:30:08,400
system which creates a fully functioning

00:30:05,909 --> 00:30:10,919
Django zoom network from nothing so we

00:30:08,400 --> 00:30:13,380
can run this one command and it it

00:30:10,919 --> 00:30:16,590
creates all of the machines for us in a

00:30:13,380 --> 00:30:18,960
matter of minutes so I'm not going to go

00:30:16,590 --> 00:30:20,100
through all these fabric commands but

00:30:18,960 --> 00:30:23,429
I'm just going to

00:30:20,100 --> 00:30:26,789
show the whip up DB note just to give

00:30:23,429 --> 00:30:32,039
you a sense for how this works so that

00:30:26,789 --> 00:30:33,570
calls the whip up DB DB node and which

00:30:32,039 --> 00:30:37,549
looks something like this I apologize

00:30:33,570 --> 00:30:41,429
for the kind of poor color contrast i

00:30:37,549 --> 00:30:42,750
was using gift to do all my code

00:30:41,429 --> 00:30:44,760
examples and then the network went

00:30:42,750 --> 00:30:50,580
offline so i had to resort to other

00:30:44,760 --> 00:30:53,539
methods so the first thing that the DB

00:30:50,580 --> 00:30:57,720
know does is it calls a crate node and

00:30:53,539 --> 00:31:02,070
what the create note does is it creates

00:30:57,720 --> 00:31:03,299
the node obviously and these machines by

00:31:02,070 --> 00:31:05,070
default they don't have very much

00:31:03,299 --> 00:31:07,110
identifying them from the other machines

00:31:05,070 --> 00:31:08,549
that get created so amazon is provided

00:31:07,110 --> 00:31:12,000
eventually provided this way that you

00:31:08,549 --> 00:31:14,549
can tag a node and and give you some

00:31:12,000 --> 00:31:16,740
when you're looking your dashboard or

00:31:14,549 --> 00:31:20,270
when you query the machine it will tell

00:31:16,740 --> 00:31:22,500
you you know what what the machine is

00:31:20,270 --> 00:31:24,780
you have to set up the public key and

00:31:22,500 --> 00:31:26,970
assign security groups and assign

00:31:24,780 --> 00:31:28,740
elastic IP so that's that's all the

00:31:26,970 --> 00:31:31,370
steps that have to have to happen in

00:31:28,740 --> 00:31:35,789
order to create this this new node and

00:31:31,370 --> 00:31:36,929
boto makes us really really easy so i

00:31:35,789 --> 00:31:43,530
look something like this this is a

00:31:36,929 --> 00:31:45,120
create node method and establishes a

00:31:43,530 --> 00:31:49,440
connection it finds out what instance

00:31:45,120 --> 00:31:50,760
type it needs it gets the user data from

00:31:49,440 --> 00:31:53,700
a method I'm going to show you in just a

00:31:50,760 --> 00:31:56,010
sec figures out what security groups it

00:31:53,700 --> 00:32:00,919
needs and then it launches the machine

00:31:56,010 --> 00:32:03,960
passing in all of those so the user data

00:32:00,919 --> 00:32:07,620
is a special convention that amazon has

00:32:03,960 --> 00:32:11,299
that basically lets you pass stuff into

00:32:07,620 --> 00:32:15,059
the machine when it first starts up and

00:32:11,299 --> 00:32:17,669
we're using a special hook that Ubuntu

00:32:15,059 --> 00:32:21,900
provides called cloud in it so if we

00:32:17,669 --> 00:32:25,309
look at the cloud init method we get the

00:32:21,900 --> 00:32:27,390
key from our deploy settings file which

00:32:25,309 --> 00:32:32,010
this is just the name of the key and

00:32:27,390 --> 00:32:34,250
then we read it and then we we create

00:32:32,010 --> 00:32:37,740
this cloud config file

00:32:34,250 --> 00:32:41,130
which has the ssh authorized key in it

00:32:37,740 --> 00:32:43,140
and this is necessary in our fur fabric

00:32:41,130 --> 00:32:45,990
to talk to the machine it has to do it

00:32:43,140 --> 00:32:47,970
over public key as I mentioned before so

00:32:45,990 --> 00:32:49,590
this user data feature of ec2 along with

00:32:47,970 --> 00:32:51,120
the cloud init system which is part of a

00:32:49,590 --> 00:32:54,210
boon to makes it really easy for us to

00:32:51,120 --> 00:32:56,040
do this you can just pass in the key the

00:32:54,210 --> 00:32:58,650
first time you create the machine but we

00:32:56,040 --> 00:33:01,350
found this is a slightly nicer way of

00:32:58,650 --> 00:33:03,809
doing it the next thing we need to do is

00:33:01,350 --> 00:33:07,080
create the security group so given a

00:33:03,809 --> 00:33:09,059
certain role it goes out and crates you

00:33:07,080 --> 00:33:12,270
know if it's a database server we don't

00:33:09,059 --> 00:33:14,010
need port 80 open if it's the web server

00:33:12,270 --> 00:33:16,890
we do need port 80 open so this this

00:33:14,010 --> 00:33:18,240
figures out what ports need to be open

00:33:16,890 --> 00:33:21,840
depending on the role of them of the

00:33:18,240 --> 00:33:28,620
machine so this is what the get security

00:33:21,840 --> 00:33:31,770
groups looks like in this case where for

00:33:28,620 --> 00:33:39,270
though if it was a web server we would

00:33:31,770 --> 00:33:41,960
open up port 80 and ssh next thing we

00:33:39,270 --> 00:33:46,380
have to do is assign the elastic I peas

00:33:41,960 --> 00:33:48,720
and these are hard coded IP addresses

00:33:46,380 --> 00:33:54,240
that have been assigned to us from

00:33:48,720 --> 00:33:55,830
amazon so the machines are basically

00:33:54,240 --> 00:33:58,559
getting this out of a settings file

00:33:55,830 --> 00:34:01,410
that's what the IP role map basically

00:33:58,559 --> 00:34:03,450
maps each each machine that we have has

00:34:01,410 --> 00:34:09,659
a has a static IP at least the ones that

00:34:03,450 --> 00:34:11,700
need to have static ip's i mentioned

00:34:09,659 --> 00:34:14,909
before that you can tag a node so this

00:34:11,700 --> 00:34:18,179
this allows us to give each machine a

00:34:14,909 --> 00:34:21,899
unique name so we can keep them all

00:34:18,179 --> 00:34:26,429
straight so with this single command

00:34:21,899 --> 00:34:31,379
create node DB we just launched in your

00:34:26,429 --> 00:34:34,110
database server with everything set up

00:34:31,379 --> 00:34:36,090
with proper IP and you know proper

00:34:34,110 --> 00:34:38,429
security group and keep air so we can

00:34:36,090 --> 00:34:40,950
log into the Machine and then fabric

00:34:38,429 --> 00:34:43,169
handles all the setup so we just use

00:34:40,950 --> 00:34:45,300
boto to to get the machine configured in

00:34:43,169 --> 00:34:46,980
the right way and then fabric is what we

00:34:45,300 --> 00:34:49,889
use to log into the Machine and

00:34:46,980 --> 00:34:52,859
and configure it so going back to our

00:34:49,889 --> 00:34:59,520
whip up DB node method we're now here

00:34:52,859 --> 00:35:01,440
and what does this look like we do a

00:34:59,520 --> 00:35:04,170
package upgrade on the machine and then

00:35:01,440 --> 00:35:05,760
this is where we install all the all day

00:35:04,170 --> 00:35:07,380
balloon two packages that we need based

00:35:05,760 --> 00:35:11,430
on the role of the machine so we pass in

00:35:07,380 --> 00:35:15,000
the role is database and let's look at

00:35:11,430 --> 00:35:18,380
what what that looks like so this is our

00:35:15,000 --> 00:35:21,150
package role map so there's a default

00:35:18,380 --> 00:35:22,440
mapping that is a list of all the

00:35:21,150 --> 00:35:24,270
packages that will get installed on

00:35:22,440 --> 00:35:26,940
every machine so like git and mercurial

00:35:24,270 --> 00:35:30,150
and supervisor get installed on

00:35:26,940 --> 00:35:32,940
everything then the database server has

00:35:30,150 --> 00:35:38,970
its special packages apps or proxy

00:35:32,940 --> 00:35:47,369
server alert monitoring server and then

00:35:38,970 --> 00:35:48,780
we return the package role map and this

00:35:47,369 --> 00:35:50,520
is what the apt install method looks

00:35:48,780 --> 00:35:55,140
like basically just gets that list of

00:35:50,520 --> 00:35:57,420
packages and calls a pseudo in that we

00:35:55,140 --> 00:36:03,150
could just use run since we're doing

00:35:57,420 --> 00:36:04,320
this as root and you have to remember to

00:36:03,150 --> 00:36:06,330
do Debbie in front and equals

00:36:04,320 --> 00:36:08,310
non-interactive or else some things like

00:36:06,330 --> 00:36:11,040
postfix will prompt you for all kinds of

00:36:08,310 --> 00:36:12,840
stuff so you have to make sure that

00:36:11,040 --> 00:36:18,570
there's no interactivity when you

00:36:12,840 --> 00:36:20,670
install packages in this way ok so that

00:36:18,570 --> 00:36:23,100
was installing the packages and then the

00:36:20,670 --> 00:36:33,480
next thing is to actually set up

00:36:23,100 --> 00:36:36,780
postgres so we call another create DB

00:36:33,480 --> 00:36:40,140
method that's this line and we create a

00:36:36,780 --> 00:36:42,150
super user and then we we created a

00:36:40,140 --> 00:36:45,480
little configuration or a little

00:36:42,150 --> 00:36:47,190
shortcut to installing configuration

00:36:45,480 --> 00:36:49,950
files where we just reference the full

00:36:47,190 --> 00:36:53,820
path and then we have a directory in our

00:36:49,950 --> 00:36:55,680
fabric folder that uses the same path

00:36:53,820 --> 00:36:57,380
structure so that way we can kind of

00:36:55,680 --> 00:37:00,000
keep all these config file straight and

00:36:57,380 --> 00:37:01,369
then lastly we restart postgres after

00:37:00,000 --> 00:37:05,400
we've copied the

00:37:01,369 --> 00:37:06,660
so let's look at the create DB this

00:37:05,400 --> 00:37:10,440
isn't the whole thing that I just took

00:37:06,660 --> 00:37:11,670
out though the pseudo in this case I

00:37:10,440 --> 00:37:13,800
wanted to highlight that we're using

00:37:11,670 --> 00:37:15,450
sudo here because we don't want to do

00:37:13,800 --> 00:37:17,059
this as the root user we want to do this

00:37:15,450 --> 00:37:21,569
as the user postgres so that the

00:37:17,059 --> 00:37:23,430
database is owned or these commands are

00:37:21,569 --> 00:37:26,430
being executed as user postgres not as

00:37:23,430 --> 00:37:36,980
user root the owner can be someone else

00:37:26,430 --> 00:37:40,770
we can set that to whatever we want yep

00:37:36,980 --> 00:37:43,140
okay so once again a single command to

00:37:40,770 --> 00:37:46,680
create and set up an entire cluster we

00:37:43,140 --> 00:37:50,339
type fab whip up full system and we

00:37:46,680 --> 00:37:54,420
basically have the entire Django zoom

00:37:50,339 --> 00:37:55,559
network is up and running and I just

00:37:54,420 --> 00:37:58,079
showed it for the database server but

00:37:55,559 --> 00:37:59,550
all those other servers are done pretty

00:37:58,079 --> 00:38:01,349
much the same way we have you know

00:37:59,550 --> 00:38:03,059
different fabric commands for each each

00:38:01,349 --> 00:38:04,740
machine so if we just if one machine

00:38:03,059 --> 00:38:07,859
goes out we can just say fabric you know

00:38:04,740 --> 00:38:15,329
whip up DB no door with up this and it

00:38:07,859 --> 00:38:18,780
starts up those machines okay so I just

00:38:15,329 --> 00:38:24,990
want to check the time got another is

00:38:18,780 --> 00:38:27,030
330 right another half hour okay so let

00:38:24,990 --> 00:38:29,040
me just show you guys a little bit sort

00:38:27,030 --> 00:38:31,260
of how we do our day-to-day deployments

00:38:29,040 --> 00:38:37,980
I don't know why the projector keeps

00:38:31,260 --> 00:38:40,109
going out so when we first started out

00:38:37,980 --> 00:38:41,819
we would we just had like one you know

00:38:40,109 --> 00:38:43,980
update the web server update the server

00:38:41,819 --> 00:38:47,309
update that server and I got to be kind

00:38:43,980 --> 00:38:48,660
of tedious because you know sometimes we

00:38:47,309 --> 00:38:51,059
didn't need to update everything we just

00:38:48,660 --> 00:38:53,309
needed to update like one CSS file or

00:38:51,059 --> 00:38:55,829
something like that so we created this

00:38:53,309 --> 00:38:57,089
little quick update method which prompts

00:38:55,829 --> 00:39:01,230
us and says you know do you want to

00:38:57,089 --> 00:39:02,849
update all the celery based code or do

00:39:01,230 --> 00:39:05,280
you just want to update the user control

00:39:02,849 --> 00:39:10,079
code which is like sort of forward

00:39:05,280 --> 00:39:11,579
facing website and then we didn't want

00:39:10,079 --> 00:39:13,020
to have to like reinstall have pip

00:39:11,579 --> 00:39:14,130
reinstall the dependencies every time

00:39:13,020 --> 00:39:14,730
but sometimes you do upgrade to

00:39:14,130 --> 00:39:17,700
something news

00:39:14,730 --> 00:39:20,400
we also prompt to say do two on upgrade

00:39:17,700 --> 00:39:21,720
the dependencies and then lastly do you

00:39:20,400 --> 00:39:24,990
want upgrades you want to look for a new

00:39:21,720 --> 00:39:27,030
version of Django so this allows us to

00:39:24,990 --> 00:39:32,130
do very quick updates and only do the

00:39:27,030 --> 00:39:34,350
steps that we need so sorry the yellow

00:39:32,130 --> 00:39:36,480
is you guys all know python so you can

00:39:34,350 --> 00:39:38,250
like fill in the blanks you can it's

00:39:36,480 --> 00:39:42,440
like hangman you figure out what the

00:39:38,250 --> 00:39:50,580
yellow parts are so this is just

00:39:42,440 --> 00:39:53,940
basically checking checking the the web

00:39:50,580 --> 00:39:56,609
node and updating the web server with

00:39:53,940 --> 00:39:59,400
any new code and if we've confirmed we

00:39:56,609 --> 00:40:01,800
want to do a pip reinstalled in it it

00:39:59,400 --> 00:40:06,410
will install it reinstall the

00:40:01,800 --> 00:40:09,590
dependencies otherwise it skips that and

00:40:06,410 --> 00:40:13,380
this is an example of how we use tag so

00:40:09,590 --> 00:40:15,270
we query the machine the node objects

00:40:13,380 --> 00:40:17,670
and we we look at the tag and we we

00:40:15,270 --> 00:40:20,010
check the tag we call it the rabbit roll

00:40:17,670 --> 00:40:21,590
and if the rabbit role is web then we

00:40:20,010 --> 00:40:29,640
know okay that's the web server so

00:40:21,590 --> 00:40:32,250
that's the right machine to update this

00:40:29,640 --> 00:40:35,100
is the method the actual web update

00:40:32,250 --> 00:40:39,420
deployment method that does it get check

00:40:35,100 --> 00:40:41,940
out master and get pull and does the

00:40:39,420 --> 00:40:44,550
reinstall the pip reinstall and then it

00:40:41,940 --> 00:40:46,260
will also sync the the Django database

00:40:44,550 --> 00:40:51,750
and if there's any migrations that we

00:40:46,260 --> 00:40:55,619
need to run it also does that again roll

00:40:51,750 --> 00:40:58,170
back support is really important that's

00:40:55,619 --> 00:41:03,119
something that everyone should have not

00:40:58,170 --> 00:41:04,980
going to show an example that but so

00:41:03,119 --> 00:41:06,720
that's most of what I wanted to talk

00:41:04,980 --> 00:41:09,780
about i want to have plenty time for

00:41:06,720 --> 00:41:12,960
questions but just in closing I want to

00:41:09,780 --> 00:41:16,320
talk about a few other tools that might

00:41:12,960 --> 00:41:19,050
be alternative or complementary tools to

00:41:16,320 --> 00:41:22,650
pop to fabric so there's these

00:41:19,050 --> 00:41:25,500
configuration tools chef and puppet so

00:41:22,650 --> 00:41:27,290
we're fabric is more procedural puppet

00:41:25,500 --> 00:41:31,120
and chef for a declarative

00:41:27,290 --> 00:41:34,460
and we're fabric is more of a push

00:41:31,120 --> 00:41:37,310
mechanism puppet and sheffer pull so

00:41:34,460 --> 00:41:38,690
they're actually pulling configuration

00:41:37,310 --> 00:41:40,700
information from like a centralized

00:41:38,690 --> 00:41:42,590
server to figure out what needs to be

00:41:40,700 --> 00:41:45,470
installed on this machine so everything

00:41:42,590 --> 00:41:48,740
almost everything that I showed doing

00:41:45,470 --> 00:41:50,360
with fabric could be done with chef and

00:41:48,740 --> 00:41:53,060
puppet but the nice thing about fabric

00:41:50,360 --> 00:41:55,790
is that it's all Python and if you're

00:41:53,060 --> 00:41:59,240
not managing like dozens or hundreds of

00:41:55,790 --> 00:42:03,170
machines it's it's it's worked pretty

00:41:59,240 --> 00:42:04,760
well and for doing like quick updates

00:42:03,170 --> 00:42:06,590
you know if the push method is a lot

00:42:04,760 --> 00:42:08,450
better than having to wait for puppet or

00:42:06,590 --> 00:42:13,180
chef to get around updating the code on

00:42:08,450 --> 00:42:15,590
your on your servers another tool that

00:42:13,180 --> 00:42:18,530
has been getting a lot of buzz lately is

00:42:15,590 --> 00:42:21,830
something called a vagrant which lets

00:42:18,530 --> 00:42:25,280
you create virtual box machines for

00:42:21,830 --> 00:42:26,600
doing like local testing and staging

00:42:25,280 --> 00:42:27,920
creating up creating like an entire

00:42:26,600 --> 00:42:30,980
staging environment just running on your

00:42:27,920 --> 00:42:35,420
local machine it's just like one command

00:42:30,980 --> 00:42:40,190
to launch a new a new instance another

00:42:35,420 --> 00:42:41,780
tool is Deb structure which sort of like

00:42:40,190 --> 00:42:43,430
reverse engineers your machine if you

00:42:41,780 --> 00:42:45,140
log into it and you you install a bunch

00:42:43,430 --> 00:42:47,840
of packages and move configuration files

00:42:45,140 --> 00:42:49,250
around it lets you create a blueprint of

00:42:47,840 --> 00:42:51,590
everything you did on that machine and

00:42:49,250 --> 00:42:53,960
then create a chef or puppet recipe or

00:42:51,590 --> 00:42:55,340
even a bash script so you could you

00:42:53,960 --> 00:43:01,460
could reconstruct what you did on that

00:42:55,340 --> 00:43:03,200
machine so i was talking pretty much

00:43:01,460 --> 00:43:05,420
just about amazon but if you don't want

00:43:03,200 --> 00:43:07,760
to use amazon there's other providers

00:43:05,420 --> 00:43:10,580
out there like Rackspace and jacob

00:43:07,760 --> 00:43:12,650
kaplan Moss created something called

00:43:10,580 --> 00:43:18,500
Python cloud servers which is a client

00:43:12,650 --> 00:43:19,790
for rackspace and there's also the lib

00:43:18,500 --> 00:43:23,000
cloud project I think there was a talk

00:43:19,790 --> 00:43:24,320
yesterday about this which is now part

00:43:23,000 --> 00:43:26,210
of it which is now an official Apache

00:43:24,320 --> 00:43:29,750
project so that gives you it's really

00:43:26,210 --> 00:43:31,130
can abstract library for accessing a

00:43:29,750 --> 00:43:35,300
whole bunch of different cloud providers

00:43:31,130 --> 00:43:37,370
like linode or go grid so if you want to

00:43:35,300 --> 00:43:39,410
have the most flexibility and not be

00:43:37,370 --> 00:43:41,270
tied to any one particular provider

00:43:39,410 --> 00:43:42,740
probably best to like

00:43:41,270 --> 00:43:45,350
on top of lib cloud because then you can

00:43:42,740 --> 00:43:47,150
easily switch to different providers you

00:43:45,350 --> 00:43:50,030
might miss some of the more amazon

00:43:47,150 --> 00:43:53,750
specific functionality that's not

00:43:50,030 --> 00:43:55,940
provided with lip cloud and if you don't

00:43:53,750 --> 00:43:57,620
want to use public clouds at all and you

00:43:55,940 --> 00:43:59,690
want to use you want to build your own

00:43:57,620 --> 00:44:03,620
using something like eucalyptus or open

00:43:59,690 --> 00:44:07,400
OpenStack think both of those support

00:44:03,620 --> 00:44:10,310
the Amazon API so you could use boto

00:44:07,400 --> 00:44:11,900
with your own machines and create

00:44:10,310 --> 00:44:14,870
virtual machines like in your own data

00:44:11,900 --> 00:44:16,040
center or your own you've got bunch of

00:44:14,870 --> 00:44:17,240
boxes sitting in your house and you

00:44:16,040 --> 00:44:22,520
always want to play with this stuff you

00:44:17,240 --> 00:44:24,650
can you can do that so that's it I want

00:44:22,520 --> 00:44:26,630
to say thanks to high Talia for putting

00:44:24,650 --> 00:44:28,700
on an awesome euro python this year this

00:44:26,630 --> 00:44:30,620
is my third and the food is definitely

00:44:28,700 --> 00:44:33,590
the best it's on you guys you guys know

00:44:30,620 --> 00:44:35,240
how to create have great food and then

00:44:33,590 --> 00:44:37,310
Mitch Garnett for making the boto and

00:44:35,240 --> 00:44:40,010
maintain this really great library and

00:44:37,310 --> 00:44:42,950
Jeff force here for for the great fabric

00:44:40,010 --> 00:45:01,400
tool and with that I want to open it up

00:44:42,950 --> 00:45:05,180
for questions and the the main thing i

00:45:01,400 --> 00:45:08,150
see that is a bit surprising to me but I

00:45:05,180 --> 00:45:11,930
mean maybe it's a trade-off that you

00:45:08,150 --> 00:45:15,260
accept but Fred fabric is not it

00:45:11,930 --> 00:45:19,280
impersonal bright idea important I'm not

00:45:15,260 --> 00:45:25,850
sure about the prom station idempotent

00:45:19,280 --> 00:45:29,230
oh it's like you can you have dependency

00:45:25,850 --> 00:45:32,960
system and repeatable step and every

00:45:29,230 --> 00:45:37,630
thoughts knows if it needs to be done

00:45:32,960 --> 00:45:41,120
again or not so you can just change some

00:45:37,630 --> 00:45:45,380
parts and then you run the configuration

00:45:41,120 --> 00:45:48,800
again on the machine or whatever and it

00:45:45,380 --> 00:45:52,490
will only do the part that needs to do

00:45:48,800 --> 00:45:55,220
again and I don't know I've looked on

00:45:52,490 --> 00:45:57,619
the internet and there is a fabric idea

00:45:55,220 --> 00:45:59,480
important project maybe view at the look

00:45:57,619 --> 00:46:01,990
i don't know i haven't looked at that

00:45:59,480 --> 00:46:01,990
yeah

00:46:20,570 --> 00:46:29,190
how do you do backups and recovery how

00:46:24,960 --> 00:46:32,190
do we do backups in recovery yeah if it

00:46:29,190 --> 00:46:36,990
goes down how do you get the same data

00:46:32,190 --> 00:46:39,930
and the same project running so I'm

00:46:36,990 --> 00:46:43,260
sorry for our own stuff we have backups

00:46:39,930 --> 00:46:45,869
of the database that are run nightly and

00:46:43,260 --> 00:46:48,810
then we also do that we use EBS

00:46:45,869 --> 00:46:52,470
snapshots to take a snapshot in the

00:46:48,810 --> 00:46:55,109
entire EBS volume so in the event of a

00:46:52,470 --> 00:46:59,220
failure we have a snapshot that we can

00:46:55,109 --> 00:47:01,619
restore the EBS volume any time I take

00:46:59,220 --> 00:47:04,950
do you have to go to the Amazon

00:47:01,619 --> 00:47:07,380
dashboard and we have we have scripts

00:47:04,950 --> 00:47:09,180
that that can do the recovery for us but

00:47:07,380 --> 00:47:10,349
it's not it doesn't like auto detect

00:47:09,180 --> 00:47:12,510
that there's been a failure and then

00:47:10,349 --> 00:47:16,250
restore from backup sets still a manual

00:47:12,510 --> 00:47:16,250
process ok

00:47:25,640 --> 00:47:29,809

YouTube URL: https://www.youtube.com/watch?v=zvwi-PLrCgE


