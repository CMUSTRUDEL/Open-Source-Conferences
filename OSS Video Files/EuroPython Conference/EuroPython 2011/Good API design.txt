Title: Good API design
Publication date: 2015-04-19
Playlist: EuroPython 2011
Description: 
	[EuroPython 2011] Alex Martelli - 20 June 2011 in "Track Spaghetti"
Captions: 
	00:00:04,180 --> 00:00:10,960
good morning everybody so first of all

00:00:07,040 --> 00:00:13,460
the title as advertised in the brochure

00:00:10,960 --> 00:00:16,400
kind of worried me because it reaches

00:00:13,460 --> 00:00:18,410
the truth in advertising requirement but

00:00:16,400 --> 00:00:20,810
apparently that doesn't apply to Italy

00:00:18,410 --> 00:00:23,840
oh by the way coca to clarify the

00:00:20,810 --> 00:00:27,470
harassment policy you are allowed to her

00:00:23,840 --> 00:00:32,029
ask yourself and being an Italian and

00:00:27,470 --> 00:00:34,280
the member of the bike on tally

00:00:32,029 --> 00:00:36,739
association I am allowed to harass the

00:00:34,280 --> 00:00:39,109
aliens in general and organizers of the

00:00:36,739 --> 00:00:41,839
conference in particular I think I say

00:00:39,109 --> 00:00:44,749
that's a hoot no Jim Bob Prince to be

00:00:41,839 --> 00:00:48,109
too there are some thought so what I

00:00:44,749 --> 00:00:52,789
wanted to title this talk was bad API

00:00:48,109 --> 00:00:55,300
design they organizers of Anjali decided

00:00:52,789 --> 00:00:58,129
that was too negative a note to start

00:00:55,300 --> 00:00:59,949
conference on so what they printed in

00:00:58,129 --> 00:01:02,329
the brochure is good API design

00:00:59,949 --> 00:01:04,760
unfortunately I'm not qualified to speak

00:01:02,329 --> 00:01:06,500
in that I'm very good about it either

00:01:04,760 --> 00:01:11,420
under the bus so that's what I'm

00:01:06,500 --> 00:01:13,670
focusing on and so actually you can use

00:01:11,420 --> 00:01:16,550
the oxygen to to think about good at the

00:01:13,670 --> 00:01:19,270
I design just do exactly the reverse of

00:01:16,550 --> 00:01:23,240
what I'm talking about it would be great

00:01:19,270 --> 00:01:25,700
plus I have to compliment my fellow

00:01:23,240 --> 00:01:28,550
organizers for teaching me yet another

00:01:25,700 --> 00:01:32,020
way to guarantee that avi design and I'm

00:01:28,550 --> 00:01:35,270
actually told off coffee deprivation

00:01:32,020 --> 00:01:38,690
Justin Johnson sit down to design your

00:01:35,270 --> 00:01:41,050
API or anything else without an espresso

00:01:38,690 --> 00:01:43,490
in the morning which is apparently

00:01:41,050 --> 00:01:45,740
experienced might many of us at this

00:01:43,490 --> 00:01:48,560
morning and I think I can guarantee that

00:01:45,740 --> 00:01:51,620
too even if you avoid what I'm going to

00:01:48,560 --> 00:01:53,900
be talking about your design will be

00:01:51,620 --> 00:01:56,690
pretty bad but still I'm not focusing on

00:01:53,900 --> 00:01:58,940
that because they never considered

00:01:56,690 --> 00:02:02,570
having a few espressos before starting

00:01:58,940 --> 00:02:06,740
like light in my morning so that's

00:02:02,570 --> 00:02:09,050
something I learn today all right let

00:02:06,740 --> 00:02:12,710
some preliminary what why is this a

00:02:09,050 --> 00:02:16,160
problem well think about it forget the

00:02:12,710 --> 00:02:18,950
title correct or interactive this of the

00:02:16,160 --> 00:02:21,230
story thing okay oh I'm doing a new

00:02:18,950 --> 00:02:23,960
project what am I thinking of what i

00:02:21,230 --> 00:02:28,640
wanted to a lot of stuff I want it to be

00:02:23,960 --> 00:02:31,670
bother three I wanted to run like

00:02:28,640 --> 00:02:36,290
greased lightning scalar to a bigger

00:02:31,670 --> 00:02:38,090
zillion simultaneous user I may not be

00:02:36,290 --> 00:02:41,060
personally by lot of people care about

00:02:38,090 --> 00:02:43,580
user interface looking nice and user

00:02:41,060 --> 00:02:45,830
experience going smoothly and of course

00:02:43,580 --> 00:02:49,940
they're important it needs to be secure

00:02:45,830 --> 00:02:52,670
keep your privacy and then I'm looking

00:02:49,940 --> 00:02:57,770
to the inside I want to elegant well

00:02:52,670 --> 00:03:01,040
maintainable clear code and so on that's

00:02:57,770 --> 00:03:02,750
it what ninety-nine point nine percent

00:03:01,040 --> 00:03:05,060
of software designed for including me

00:03:02,750 --> 00:03:10,550
are focusing on there so many things

00:03:05,060 --> 00:03:14,120
what's missing what do we all kind of

00:03:10,550 --> 00:03:18,709
fail to think of from day one think

00:03:14,120 --> 00:03:20,780
about it and the what all these things

00:03:18,709 --> 00:03:24,160
have in common except the security part

00:03:20,780 --> 00:03:26,660
is that they're all best achieved by

00:03:24,160 --> 00:03:30,739
incremental work ethic you can't just

00:03:26,660 --> 00:03:34,790
sit down and design everything from the

00:03:30,739 --> 00:03:36,350
heavens down to earth designed for three

00:03:34,790 --> 00:03:39,290
months and then start building just

00:03:36,350 --> 00:03:41,000
doesn't work for any of these things the

00:03:39,290 --> 00:03:44,840
only thing that you cannot do

00:03:41,000 --> 00:03:46,640
incremental II seriously insecurity that

00:03:44,840 --> 00:03:49,519
needs to be designing from the start

00:03:46,640 --> 00:03:52,430
that anything else start from a little

00:03:49,519 --> 00:03:56,120
corner build toward center keep adapting

00:03:52,430 --> 00:03:59,660
in a very flexible agile way that's best

00:03:56,120 --> 00:04:00,400
for you and so there's one thing where

00:03:59,660 --> 00:04:03,579
it is

00:04:00,400 --> 00:04:06,159
so I'm going to talk about what I'm

00:04:03,579 --> 00:04:08,379
going to talk about what I am going to

00:04:06,159 --> 00:04:11,819
talk about and then I will talk about it

00:04:08,379 --> 00:04:15,069
and then I will explain what I just said

00:04:11,819 --> 00:04:19,209
what I just talked about and this is a

00:04:15,069 --> 00:04:21,100
classic papi this is how you do talk if

00:04:19,209 --> 00:04:22,870
you have more than five minutes which is

00:04:21,100 --> 00:04:25,000
why five minutes dogs are very good

00:04:22,870 --> 00:04:28,389
because then you're only got space for

00:04:25,000 --> 00:04:30,880
they shall I tell you part but when you

00:04:28,389 --> 00:04:34,330
need to fill an hour you do it in the

00:04:30,880 --> 00:04:37,389
three this is a pattern it's not an

00:04:34,330 --> 00:04:40,570
anti-pattern it's a button because it

00:04:37,389 --> 00:04:42,669
actually works besides the kidding they

00:04:40,570 --> 00:04:45,669
were enforcement from the repetition

00:04:42,669 --> 00:04:48,520
this guy is a positive thing because it

00:04:45,669 --> 00:04:50,320
helps you retain it helps us speaker

00:04:48,520 --> 00:04:55,720
thing about and folks about what's

00:04:50,320 --> 00:04:58,900
really important within their job one

00:04:55,720 --> 00:05:01,780
bad thing I will do in the scope I want

00:04:58,900 --> 00:05:04,000
to get many concrete examples since i'm

00:05:01,780 --> 00:05:07,510
talking about bad at the ayahs design

00:05:04,000 --> 00:05:11,949
any example i give will be out that

00:05:07,510 --> 00:05:15,160
example so i make them up because if i

00:05:11,949 --> 00:05:19,210
give real life examples of that Adi

00:05:15,160 --> 00:05:21,760
design from actual open source projects

00:05:19,210 --> 00:05:24,099
and so on I would only make more enemies

00:05:21,760 --> 00:05:26,830
and I don't need any more of the plant

00:05:24,099 --> 00:05:29,260
evening so the only thing according to

00:05:26,830 --> 00:05:31,840
the harassment policy of the own example

00:05:29,260 --> 00:05:34,630
I'm allowed to give our about design

00:05:31,840 --> 00:05:36,940
your site made myself I don't have any

00:05:34,630 --> 00:05:39,970
problem finding a lot of examples of

00:05:36,940 --> 00:05:41,909
that and I think there's a second

00:05:39,970 --> 00:05:44,169
footnote if something is obviously

00:05:41,909 --> 00:05:46,389
defensible I'm allowed the whole planet

00:05:44,169 --> 00:05:47,669
is the only example i found the windows

00:05:46,389 --> 00:05:52,060
api

00:05:47,669 --> 00:05:54,940
very fine so what's the media well I'm

00:05:52,060 --> 00:05:58,150
not pretty sure why but i will surely a

00:05:54,940 --> 00:06:00,370
stand for application and the

00:05:58,150 --> 00:06:02,949
programming interface lock it's not just

00:06:00,370 --> 00:06:06,550
about applications anything any piece of

00:06:02,949 --> 00:06:09,460
software you're writing may need

00:06:06,550 --> 00:06:10,780
actually my prediction is will need to

00:06:09,460 --> 00:06:14,229
interact with other pieces of software

00:06:10,780 --> 00:06:18,360
whether it is an application or not so

00:06:14,229 --> 00:06:21,490
there is going to be a collection of

00:06:18,360 --> 00:06:24,009
classes data types functions protocol

00:06:21,490 --> 00:06:26,889
sedans which allowed to be to the

00:06:24,009 --> 00:06:28,810
software doing the pendant we developed

00:06:26,889 --> 00:06:33,639
pieces of software to communicate with

00:06:28,810 --> 00:06:35,830
each other whatever they piece of

00:06:33,639 --> 00:06:38,680
software it's a library framework must

00:06:35,830 --> 00:06:40,690
be obviously only exists in order for

00:06:38,680 --> 00:06:43,509
other software foolish but also an

00:06:40,690 --> 00:06:46,599
application of rating system where the

00:06:43,509 --> 00:06:49,210
application website whatever if itself

00:06:46,599 --> 00:06:52,810
there's some other software will want to

00:06:49,210 --> 00:06:56,169
open it and the problem is that to the

00:06:52,810 --> 00:07:00,279
API if developed as part of a doctor

00:06:56,169 --> 00:07:02,500
that's going to be talked to and so wise

00:07:00,279 --> 00:07:05,110
developers the guys who are worrying

00:07:02,500 --> 00:07:07,990
about functional richness of battery

00:07:05,110 --> 00:07:10,620
software user interface and so on are

00:07:07,990 --> 00:07:15,729
supposed to be the ones who are also

00:07:10,620 --> 00:07:19,659
worrying about this API what's an

00:07:15,729 --> 00:07:22,120
intervention intervention is the hiss of

00:07:19,659 --> 00:07:26,039
the reverse of a button it's a subset of

00:07:22,120 --> 00:07:28,389
buttons it's a contiguous of the

00:07:26,039 --> 00:07:32,560
counterproductive behavior that is

00:07:28,389 --> 00:07:35,529
systematically repeated it can happen in

00:07:32,560 --> 00:07:40,000
anything there are good habits and bad

00:07:35,529 --> 00:07:42,969
habits in a sense anti-patterns our bad

00:07:40,000 --> 00:07:43,990
habits are just like the normal sense of

00:07:42,969 --> 00:07:46,960
patterns like

00:07:43,990 --> 00:07:48,790
nine patents and so on are good but it's

00:07:46,960 --> 00:07:52,420
not just design its business project

00:07:48,790 --> 00:07:54,430
project management or programming when

00:07:52,420 --> 00:07:58,060
you write up an NG button you should

00:07:54,430 --> 00:08:01,390
really give root roses why does it

00:07:58,060 --> 00:08:03,550
happen well the reason of waiting to do

00:08:01,390 --> 00:08:06,220
it that way is always the same monster

00:08:03,550 --> 00:08:08,170
University seemed like a good idea at

00:08:06,220 --> 00:08:10,270
the time but the pointing why did it

00:08:08,170 --> 00:08:12,910
seem like a good idea when in retrospect

00:08:10,270 --> 00:08:15,310
the obviously we've done it different so

00:08:12,910 --> 00:08:18,790
reflecting about it may help avoid the

00:08:15,310 --> 00:08:21,700
next occurrence why is it about a year

00:08:18,790 --> 00:08:24,670
sometimes National of you so you like

00:08:21,700 --> 00:08:27,580
pointed out how does it interact your

00:08:24,670 --> 00:08:30,240
help or more and more often in in the

00:08:27,580 --> 00:08:33,370
case of an antique that infers other

00:08:30,240 --> 00:08:37,720
patterns oranga patterns and what you do

00:08:33,370 --> 00:08:40,840
about how can we remedy if it's happened

00:08:37,720 --> 00:08:44,410
how can you prevent it from time from

00:08:40,840 --> 00:08:48,400
happening in the first place so I'm

00:08:44,410 --> 00:09:00,130
talking about Adi design and this is a

00:08:48,400 --> 00:09:04,660
summary of the summary these are by far

00:09:00,130 --> 00:09:08,440
the most common and worst anti-patterns

00:09:04,660 --> 00:09:12,070
in API design not having an API and not

00:09:08,440 --> 00:09:17,920
having a design and then there's others

00:09:12,070 --> 00:09:20,890
but you may have too much of a good

00:09:17,920 --> 00:09:25,810
thing more than one avi for the same

00:09:20,890 --> 00:09:29,590
piece of software you can exhibit fear

00:09:25,810 --> 00:09:31,870
of commitment to design is to choose if

00:09:29,590 --> 00:09:34,600
you're not making hard choices you're

00:09:31,870 --> 00:09:36,070
not really doing design there can be in

00:09:34,600 --> 00:09:38,320
consistency which is probably the first

00:09:36,070 --> 00:09:40,570
thing everybody thinks often it's a bad

00:09:38,320 --> 00:09:42,610
idea because things are done in slightly

00:09:40,570 --> 00:09:45,640
different ways in different corners and

00:09:42,610 --> 00:09:48,810
a lot of more which I won't be able to

00:09:45,640 --> 00:09:48,810
do any justice to in an hour

00:09:49,720 --> 00:09:56,019
but one general design problem of what

00:09:53,889 --> 00:09:59,069
not only for it guys but I'm focusing on

00:09:56,019 --> 00:10:01,569
those is going to extremes instead of

00:09:59,069 --> 00:10:04,930
striking a difficult balance between

00:10:01,569 --> 00:10:07,420
competing forces just focusing on one of

00:10:04,930 --> 00:10:10,180
them in going whole log that direction

00:10:07,420 --> 00:10:12,939
covering that side of things perfectly

00:10:10,180 --> 00:10:15,879
and sacrificing far too much on the on

00:10:12,939 --> 00:10:20,500
the other side for example how language

00:10:15,879 --> 00:10:22,240
dependent do I make my API well making

00:10:20,500 --> 00:10:25,750
the totally language dependent is a

00:10:22,240 --> 00:10:27,370
horrible idea make trying to make it

00:10:25,750 --> 00:10:31,230
totally language independent doesn't

00:10:27,370 --> 00:10:35,019
work either as you'll see paying for

00:10:31,230 --> 00:10:38,050
should I use standard protocol sir for

00:10:35,019 --> 00:10:41,230
this platform and so on and then I'll

00:10:38,050 --> 00:10:43,660
focus on well no I won't focus i will

00:10:41,230 --> 00:10:46,240
briefly mention the problems with

00:10:43,660 --> 00:10:48,879
debugging your message documentation and

00:10:46,240 --> 00:10:50,709
performance as you see this is not a

00:10:48,879 --> 00:10:54,279
one-hour talk this is really a one

00:10:50,709 --> 00:10:58,149
lifetime talk but i'll have to just cut

00:10:54,279 --> 00:11:01,930
off the most important hour so worst API

00:10:58,149 --> 00:11:04,720
design anti-pattern no avi at all

00:11:01,930 --> 00:11:07,540
because what the route calls because

00:11:04,720 --> 00:11:09,550
they didn't think about it when you had

00:11:07,540 --> 00:11:12,730
so many concerns when starting the new

00:11:09,550 --> 00:11:14,829
project as i listed before but hey they

00:11:12,730 --> 00:11:17,439
oh but what if somebody else wants to

00:11:14,829 --> 00:11:21,309
call into my applications the last thing

00:11:17,439 --> 00:11:23,019
you think of and how do I know it's

00:11:21,309 --> 00:11:26,439
incredible common besides by direct

00:11:23,019 --> 00:11:29,100
observation I've noticed on they vary

00:11:26,439 --> 00:11:31,959
and deservedly popular side

00:11:29,100 --> 00:11:34,509
stackoverflow.com definitely the best

00:11:31,959 --> 00:11:36,519
question and answer site for general

00:11:34,509 --> 00:11:39,879
programming that the most common

00:11:36,519 --> 00:11:44,019
category of questions fall into how do i

00:11:39,879 --> 00:11:46,899
scrape a website how do I fake a user

00:11:44,019 --> 00:11:49,629
interaction with a website or how do I

00:11:46,899 --> 00:11:53,949
simulate mouse movements and clicks and

00:11:49,629 --> 00:11:56,680
keyboard key strokes why is everybody so

00:11:53,949 --> 00:12:00,929
interested in creating websites and

00:11:56,680 --> 00:12:02,680
simulating mouths drags well some

00:12:00,929 --> 00:12:04,149
fraction our people

00:12:02,680 --> 00:12:07,510
are trying to do very thorough

00:12:04,149 --> 00:12:11,080
end-to-end integration testing but

00:12:07,510 --> 00:12:16,210
that's really a miniscule fraction of

00:12:11,080 --> 00:12:20,050
the interest in these techniques by far

00:12:16,210 --> 00:12:21,700
most of them are missing api's so there

00:12:20,050 --> 00:12:23,500
is this website which has crucial

00:12:21,700 --> 00:12:26,339
information which my software needs to

00:12:23,500 --> 00:12:29,320
interact you and the only way the

00:12:26,339 --> 00:12:32,500
website designers thought about how

00:12:29,320 --> 00:12:35,050
people would get there would be to visit

00:12:32,500 --> 00:12:37,810
them in person so my software needs to

00:12:35,050 --> 00:12:41,230
simulate a person interacting with the

00:12:37,810 --> 00:12:46,630
site and scrape the HTML and extract the

00:12:41,230 --> 00:12:48,370
actual information whether the API just

00:12:46,630 --> 00:12:50,350
isn't there or is there but not

00:12:48,370 --> 00:12:52,690
documented doesn't really make much of a

00:12:50,350 --> 00:12:56,260
difference if it's not documented it's

00:12:52,690 --> 00:12:58,149
as bad as not being but almost as bad as

00:12:56,260 --> 00:13:01,149
not being there at all why is it that

00:12:58,149 --> 00:13:03,520
well I deliberately designed my website

00:13:01,149 --> 00:13:06,160
so that you have to be a real human

00:13:03,520 --> 00:13:07,990
being and I check and if you're not a

00:13:06,160 --> 00:13:10,680
real enough human being you're not

00:13:07,990 --> 00:13:14,650
allowed to look at my data or whatever

00:13:10,680 --> 00:13:17,770
well people will find a way around if

00:13:14,650 --> 00:13:21,070
you don't supply an ID I the publisher

00:13:17,770 --> 00:13:23,830
website with no api you are starting a

00:13:21,070 --> 00:13:26,620
fight against all the people who want to

00:13:23,830 --> 00:13:29,860
integrate that information into their

00:13:26,620 --> 00:13:36,160
own processing they're going to scrape

00:13:29,860 --> 00:13:38,709
your UI they are I swear or what passes

00:13:36,160 --> 00:13:43,860
for the UI depending on whether I design

00:13:38,709 --> 00:13:46,450
the site then is elite you are or if

00:13:43,860 --> 00:13:49,270
yourself that doesn't apply to websites

00:13:46,450 --> 00:13:54,240
but another example of where you didn't

00:13:49,270 --> 00:13:57,100
think things properly if you design a

00:13:54,240 --> 00:13:59,800
rich framework which doesn't allow

00:13:57,100 --> 00:14:01,810
enough customization personalization by

00:13:59,800 --> 00:14:05,680
the using software their monkey patch

00:14:01,810 --> 00:14:09,100
that that software that they hook

00:14:05,680 --> 00:14:11,620
concept which I presented and will

00:14:09,100 --> 00:14:13,760
present again on Friday in the good

00:14:11,620 --> 00:14:16,350
pattern idea

00:14:13,760 --> 00:14:20,790
and it's the equivalent for a framework

00:14:16,350 --> 00:14:24,030
or library of the missing API this

00:14:20,790 --> 00:14:26,670
eventually besides the huge amount of

00:14:24,030 --> 00:14:30,330
wasted effort on your part to defend

00:14:26,670 --> 00:14:34,170
yourself against programs wanting to get

00:14:30,330 --> 00:14:36,410
at that information and the efforts on

00:14:34,170 --> 00:14:41,130
the other side because you set up a war

00:14:36,410 --> 00:14:43,740
wars are huge wastage of resources it

00:14:41,130 --> 00:14:46,350
also places useless extra load on your

00:14:43,740 --> 00:14:49,050
system you're going to bother to do a

00:14:46,350 --> 00:14:53,760
lot of rendering of information into

00:14:49,050 --> 00:14:56,130
human visible forms and the counterpart

00:14:53,760 --> 00:14:59,010
on the other side is being is busy

00:14:56,130 --> 00:15:03,450
destroying they formatting like scraping

00:14:59,010 --> 00:15:06,690
and and parsing the HTML and so on to

00:15:03,450 --> 00:15:09,060
get the data which they really care

00:15:06,690 --> 00:15:11,400
about so you're doing a lot of work on

00:15:09,060 --> 00:15:14,040
your website for the rendering part and

00:15:11,400 --> 00:15:16,830
they're doing a lot of work to undo your

00:15:14,040 --> 00:15:18,780
rendering what a great way two ways to

00:15:16,830 --> 00:15:24,030
computational resources which in the end

00:15:18,780 --> 00:15:26,520
mean energy and of course one thing you

00:15:24,030 --> 00:15:29,250
will not be able to stop people from

00:15:26,520 --> 00:15:30,690
getting at the information but you will

00:15:29,250 --> 00:15:33,210
be able to make the life totally

00:15:30,690 --> 00:15:35,730
miserable if that's your purpose because

00:15:33,210 --> 00:15:39,210
every time you decide to make a slight

00:15:35,730 --> 00:15:41,700
cosmetic changes okay this HTML isn't

00:15:39,210 --> 00:15:43,530
quite as good so let's make it an

00:15:41,700 --> 00:15:47,490
unordered list rather than an ordered

00:15:43,530 --> 00:15:49,800
list or whatever they their code break

00:15:47,490 --> 00:15:51,870
and they have to do it all over again if

00:15:49,800 --> 00:15:54,480
you manage to get yourself hated enough

00:15:51,870 --> 00:15:57,480
by the people who desperately need to

00:15:54,480 --> 00:16:01,230
get at your data that's the best way to

00:15:57,480 --> 00:16:02,880
ensure that your competitors have a

00:16:01,230 --> 00:16:06,450
chance to do you better say you have the

00:16:02,880 --> 00:16:11,550
best site in the world for X whatever is

00:16:06,450 --> 00:16:15,680
X a real time result of soccer games yet

00:16:11,550 --> 00:16:19,110
it's so hard to get at that basically

00:16:15,680 --> 00:16:21,810
you even though your data is perfect and

00:16:19,110 --> 00:16:25,230
wonderful performance and great update

00:16:21,810 --> 00:16:27,030
and so on some other organization can

00:16:25,230 --> 00:16:29,070
offer aside that is

00:16:27,030 --> 00:16:33,140
about equivalent maybe slightly inferior

00:16:29,070 --> 00:16:35,280
but has a good decent API

00:16:33,140 --> 00:16:38,880
congratulations by not having an API

00:16:35,280 --> 00:16:42,020
you've just given away your competitive

00:16:38,880 --> 00:16:44,730
advantage now this may seem more of a

00:16:42,020 --> 00:16:47,790
commercial consideration but in terms of

00:16:44,730 --> 00:16:50,370
competition for mindshare we know it

00:16:47,790 --> 00:16:53,190
foolio applies to open source I mean we

00:16:50,370 --> 00:16:56,510
have this friendly rivalry would say

00:16:53,190 --> 00:16:59,340
pearl or PHP is not about money

00:16:56,510 --> 00:17:01,320
necessarily it's about mine share we

00:16:59,340 --> 00:17:04,410
want people to be using Python because

00:17:01,320 --> 00:17:08,130
it's better that we have to sell by 3rd

00:17:04,410 --> 00:17:11,490
versus PHP or Python Python versus pearl

00:17:08,130 --> 00:17:14,130
so competition matters in this field as

00:17:11,490 --> 00:17:17,640
well so what do you do instead of not

00:17:14,130 --> 00:17:19,860
offering an API well I'm already after

00:17:17,640 --> 00:17:22,410
giving the solution here but this is

00:17:19,860 --> 00:17:25,080
probably the most important contribution

00:17:22,410 --> 00:17:29,330
of the of the whole talk instead of not

00:17:25,080 --> 00:17:35,940
having an API have one hey I know it's a

00:17:29,330 --> 00:17:38,700
revolutionary concept pick any idea and

00:17:35,940 --> 00:17:40,290
it should be easier than a lot of other

00:17:38,700 --> 00:17:42,600
things to do while designing and

00:17:40,290 --> 00:17:45,420
developing software a lot of the problem

00:17:42,600 --> 00:17:49,230
in doing really great software is that

00:17:45,420 --> 00:17:51,480
say you're doing awesome application for

00:17:49,230 --> 00:17:55,200
accountants if you're not an accountant

00:17:51,480 --> 00:18:00,030
you work closely with them but in the

00:17:55,200 --> 00:18:02,910
end you're not experiencing first-person

00:18:00,030 --> 00:18:05,250
what is it like for a professional in

00:18:02,910 --> 00:18:09,330
that field to use your application if

00:18:05,250 --> 00:18:11,790
you're doing weather forecasting site

00:18:09,330 --> 00:18:13,980
and you're not a weather forecaster same

00:18:11,790 --> 00:18:15,960
and so on now when you're doing an ati

00:18:13,980 --> 00:18:18,120
you're basically serving other

00:18:15,960 --> 00:18:20,280
programmers and you're a programmer so

00:18:18,120 --> 00:18:22,080
you should know what are they going to

00:18:20,280 --> 00:18:25,200
be looking for so it should be one of

00:18:22,080 --> 00:18:29,820
the easiest task in in doing software

00:18:25,200 --> 00:18:31,410
right of course I can see they perfectly

00:18:29,820 --> 00:18:33,600
saying oh my god there's so many way to

00:18:31,410 --> 00:18:36,650
go wrong I'd better not offer any API

00:18:33,600 --> 00:18:39,930
because I could make mistakes yes but

00:18:36,650 --> 00:18:40,950
one with problems and weaknesses is

00:18:39,930 --> 00:18:45,480
better than not

00:18:40,950 --> 00:18:46,980
anyway and please document it don't

00:18:45,480 --> 00:18:50,490
think that just because the code is

00:18:46,980 --> 00:18:54,240
there you're done if writing

00:18:50,490 --> 00:18:56,340
documentation is in your worldview cruel

00:18:54,240 --> 00:18:58,980
and unusual punishment I sympathize a

00:18:56,340 --> 00:19:02,960
lot of software developers think that

00:18:58,980 --> 00:19:06,470
way at least provide copious examples

00:19:02,960 --> 00:19:10,950
writing example of code using your API

00:19:06,470 --> 00:19:16,290
may actually be more natural easier for

00:19:10,950 --> 00:19:18,300
a programmer than writing Italian text

00:19:16,290 --> 00:19:21,620
or English text or whatever to explain

00:19:18,300 --> 00:19:23,910
exactly what's going on once you do

00:19:21,620 --> 00:19:26,460
provide documents please make sure

00:19:23,910 --> 00:19:29,400
they're up to date if there's one thing

00:19:26,460 --> 00:19:32,100
worse than no documentation at all these

00:19:29,400 --> 00:19:35,070
documentation applies to you this

00:19:32,100 --> 00:19:37,110
information this documentation and

00:19:35,070 --> 00:19:39,200
that's another advantage of providing a

00:19:37,110 --> 00:19:42,810
lot of documentation in form of examples

00:19:39,200 --> 00:19:45,540
you can test it if the documentation is

00:19:42,810 --> 00:19:48,170
in English or Italian it's kind of hard

00:19:45,540 --> 00:19:53,640
to automatically realize that your life

00:19:48,170 --> 00:19:55,110
if it's runnable code examples it's just

00:19:53,640 --> 00:19:59,910
one more test that's why we have dog

00:19:55,110 --> 00:20:02,520
testing partha so if you'd rather do

00:19:59,910 --> 00:20:05,340
something else but you i have convinced

00:20:02,520 --> 00:20:07,850
you that you need an API these are a few

00:20:05,340 --> 00:20:11,160
tips about making your life easier

00:20:07,850 --> 00:20:13,530
follow the path of least resistance it

00:20:11,160 --> 00:20:19,140
doesn't actually lead to bad it may lead

00:20:13,530 --> 00:20:22,710
to okay horrible any far better than

00:20:19,140 --> 00:20:25,160
nothing just go with the flow if you

00:20:22,710 --> 00:20:27,450
have a web app it should be

00:20:25,160 --> 00:20:30,240
representational state transfer it

00:20:27,450 --> 00:20:32,670
should use JSON if it's on Windows I'm

00:20:30,240 --> 00:20:34,950
sorry for you but if it's and windows it

00:20:32,670 --> 00:20:36,960
should be calm I realized Microsoft

00:20:34,950 --> 00:20:41,160
doesn't want you to do that anymore but

00:20:36,960 --> 00:20:43,710
it still the de facto standard if it's a

00:20:41,160 --> 00:20:45,210
mac you do the Apple scripting doesn't

00:20:43,710 --> 00:20:47,970
mean you actually have to learn any

00:20:45,210 --> 00:20:50,850
apples threat there's a reasonable well

00:20:47,970 --> 00:20:52,950
documented API for that I wish I could

00:20:50,850 --> 00:20:55,530
offer a similarly obvious subject

00:20:52,950 --> 00:20:58,140
for Lena there isn't a single dominant

00:20:55,530 --> 00:21:01,530
standard the way the reason others might

00:20:58,140 --> 00:21:05,760
my preferences I listen on port whatever

00:21:01,530 --> 00:21:08,280
say 8080 anyway and do and do they go

00:21:05,760 --> 00:21:12,930
back to the web app thingy but that's

00:21:08,280 --> 00:21:15,330
because I think web and doc test for the

00:21:12,930 --> 00:21:20,550
documentation as form of examples that

00:21:15,330 --> 00:21:22,740
you can run and so on so this no ID

00:21:20,550 --> 00:21:25,770
Aiello is worst second worst is no

00:21:22,740 --> 00:21:27,810
design I'd interface that was never

00:21:25,770 --> 00:21:31,050
actually designed as an interface that

00:21:27,810 --> 00:21:32,820
just happened that's another side of

00:21:31,050 --> 00:21:38,910
they didn't think about it in advance

00:21:32,820 --> 00:21:41,490
just like not having anything and and

00:21:38,910 --> 00:21:46,190
the second point is ok I did think about

00:21:41,490 --> 00:21:49,950
it but designing the interfaces work

00:21:46,190 --> 00:21:54,060
it's hard work well semi-hard there's

00:21:49,950 --> 00:21:57,740
worse it's interesting by the way when

00:21:54,060 --> 00:22:02,100
you do get down to design think about

00:21:57,740 --> 00:22:03,840
again put yourself in the users shoot

00:22:02,100 --> 00:22:06,060
this case the user is another programmer

00:22:03,840 --> 00:22:10,140
so it's easier what would you like to

00:22:06,060 --> 00:22:14,460
use if you wear outside this software

00:22:10,140 --> 00:22:16,950
system looking in so given the

00:22:14,460 --> 00:22:18,510
resistance of adding yet another task to

00:22:16,950 --> 00:22:22,530
all the stuff you need to do when you do

00:22:18,510 --> 00:22:26,030
software you go for a wait wait I don't

00:22:22,530 --> 00:22:30,360
need to do an 80 I already have one it's

00:22:26,030 --> 00:22:32,670
a there's a user interface and a

00:22:30,360 --> 00:22:35,400
back-end and they talk some internal

00:22:32,670 --> 00:22:37,680
protocol whatever I'll just publish that

00:22:35,400 --> 00:22:41,280
and maybe you're very very lucky

00:22:37,680 --> 00:22:44,190
documented or oh but I'm fine because

00:22:41,280 --> 00:22:46,860
I'm already writing to a database and I

00:22:44,190 --> 00:22:49,740
just published a scheme out the database

00:22:46,860 --> 00:22:53,360
and hey I have an API without any work

00:22:49,740 --> 00:22:56,570
at all and I'm sad to say that a

00:22:53,360 --> 00:22:59,600
probably half of those ABI that do exist

00:22:56,570 --> 00:23:02,180
give clear indication of having

00:22:59,600 --> 00:23:04,890
developed in this way why is this bad

00:23:02,180 --> 00:23:05,799
because your cup if you haven't designed

00:23:04,890 --> 00:23:07,960
what

00:23:05,799 --> 00:23:10,440
exactly you're exposing you're basically

00:23:07,960 --> 00:23:14,019
exposing the internals the

00:23:10,440 --> 00:23:17,200
implementation details of your code what

00:23:14,019 --> 00:23:20,110
happens next year when you find a better

00:23:17,200 --> 00:23:21,700
way to perform the same functionality

00:23:20,110 --> 00:23:24,940
you want to change the internals well

00:23:21,700 --> 00:23:28,210
either you don't and give up your

00:23:24,940 --> 00:23:30,220
improvements forever or you break all of

00:23:28,210 --> 00:23:33,489
your clients great way to make friends

00:23:30,220 --> 00:23:35,679
and influence people or your shoulder

00:23:33,489 --> 00:23:39,580
forever the burden of a dual

00:23:35,679 --> 00:23:41,799
implementation there's a real API sorry

00:23:39,580 --> 00:23:43,359
there's a real implementation the way

00:23:41,799 --> 00:23:46,720
things actually work now that I've

00:23:43,359 --> 00:23:49,749
thought of a better way and that the API

00:23:46,720 --> 00:23:51,850
way which it used to work kind of that

00:23:49,749 --> 00:23:54,970
way last year and we need to keep

00:23:51,850 --> 00:23:58,299
maintaining because a million scripts

00:23:54,970 --> 00:24:01,149
and other programs interact with it so

00:23:58,299 --> 00:24:04,350
what do you do instead of no design you

00:24:01,149 --> 00:24:07,389
do two things you think about your API

00:24:04,350 --> 00:24:09,369
remember focus if you where the

00:24:07,389 --> 00:24:11,889
programmer on the outside would you like

00:24:09,369 --> 00:24:14,289
to use this API would this meet your

00:24:11,889 --> 00:24:17,320
needs would it make you happy and then

00:24:14,289 --> 00:24:19,450
you forget the implementation part

00:24:17,320 --> 00:24:22,059
that's hard because you're like writing

00:24:19,450 --> 00:24:24,820
it but forget about it forget the

00:24:22,059 --> 00:24:28,929
details and look at it at a more

00:24:24,820 --> 00:24:30,940
abstract level think about what what

00:24:28,929 --> 00:24:33,730
would I want to be doing as an external

00:24:30,940 --> 00:24:37,659
programmer to play with this software

00:24:33,730 --> 00:24:40,149
system why would I like to do that is

00:24:37,659 --> 00:24:43,929
also helpful but how how is crucial but

00:24:40,149 --> 00:24:48,429
why is helpful and don't just think

00:24:43,929 --> 00:24:49,989
we're human beings mostly and so

00:24:48,429 --> 00:24:53,009
abstract thinking isn't really our

00:24:49,989 --> 00:24:57,159
strong point walk a mile in their shoes

00:24:53,009 --> 00:25:00,399
literally write scripts write programs

00:24:57,159 --> 00:25:03,580
that use the API you're designing and

00:25:00,399 --> 00:25:07,739
see how well does it work does it work

00:25:03,580 --> 00:25:11,289
smoothly and so on I would actually like

00:25:07,739 --> 00:25:14,109
every program every software system to

00:25:11,289 --> 00:25:16,749
have a core part which exposes an API

00:25:14,109 --> 00:25:18,300
and everything that can go on the other

00:25:16,749 --> 00:25:21,090
side of the API all do

00:25:18,300 --> 00:25:22,800
ciliary parts of the software should

00:25:21,090 --> 00:25:25,110
actually use the API this will guarantee

00:25:22,800 --> 00:25:29,670
at least two that is functionally very

00:25:25,110 --> 00:25:32,730
complete normally I would never for like

00:25:29,670 --> 00:25:34,700
the vast majority of worries in software

00:25:32,730 --> 00:25:38,370
development I would never recommend

00:25:34,700 --> 00:25:41,210
thinking about things before writing go

00:25:38,370 --> 00:25:46,440
down put down a prototype play with it

00:25:41,210 --> 00:25:48,990
change it incrementally release early

00:25:46,440 --> 00:25:51,500
release often I strongly believe in all

00:25:48,990 --> 00:25:56,640
this except for two things security and

00:25:51,500 --> 00:26:01,080
api's those are two parts well security

00:25:56,640 --> 00:26:03,300
because there's this unhealthy

00:26:01,080 --> 00:26:07,590
interaction between you and there would

00:26:03,300 --> 00:26:09,270
be hacker and and so there's an

00:26:07,590 --> 00:26:12,360
interaction with another programmer in

00:26:09,270 --> 00:26:13,680
this case an adversarial one API because

00:26:12,360 --> 00:26:15,360
there's a potential interaction with

00:26:13,680 --> 00:26:17,700
another programmer which you are trying

00:26:15,360 --> 00:26:19,800
to keep a friendly one because you're

00:26:17,700 --> 00:26:24,570
working for the same goal serving some

00:26:19,800 --> 00:26:26,130
end user and so they need some

00:26:24,570 --> 00:26:29,130
forethought a lot of forethought

00:26:26,130 --> 00:26:31,020
actually so i recommend you think about

00:26:29,130 --> 00:26:35,760
those things and i recommend you forget

00:26:31,020 --> 00:26:38,430
about your current implementation given

00:26:35,760 --> 00:26:40,440
that it is a running implementation is

00:26:38,430 --> 00:26:44,000
chock full of very specific details

00:26:40,440 --> 00:26:50,070
those specific details are accidental

00:26:44,000 --> 00:26:51,960
they're the accident of reality what is

00:26:50,070 --> 00:26:58,590
really important and what your api

00:26:51,960 --> 00:27:01,160
should focus on is the concept they what

00:26:58,590 --> 00:27:05,880
is the software about what is the

00:27:01,160 --> 00:27:09,240
objects what are the verbs and one way

00:27:05,880 --> 00:27:11,940
of sound productive as a i'm not talking

00:27:09,240 --> 00:27:15,900
about spending months and this but one

00:27:11,940 --> 00:27:18,830
day off like two three people in a

00:27:15,900 --> 00:27:22,880
whiteboard put the computer away just

00:27:18,830 --> 00:27:26,280
whiteboard and dry markets and

00:27:22,880 --> 00:27:29,280
brainstorm about what are several

00:27:26,280 --> 00:27:31,830
possible way we could implement these

00:27:29,280 --> 00:27:34,140
concepts what's in common to all of that

00:27:31,830 --> 00:27:38,750
they're all they all deal with are no

00:27:34,140 --> 00:27:41,880
soccer games or so there's teams and

00:27:38,750 --> 00:27:45,149
there's results and there's past games

00:27:41,880 --> 00:27:46,710
and okay they did the teams may have met

00:27:45,149 --> 00:27:49,019
in the pasture do we have those

00:27:46,710 --> 00:27:51,090
statistics oh wait a second players are

00:27:49,019 --> 00:27:54,990
important to do we care about who's a

00:27:51,090 --> 00:27:58,200
goalkeeper for this what team sir was

00:27:54,990 --> 00:28:00,299
this goalkeeper playing with last year d

00:27:58,200 --> 00:28:02,190
these are nothing to do with how do I

00:28:00,299 --> 00:28:04,440
coat this or how do I put it in the

00:28:02,190 --> 00:28:07,980
database it's got everything to do with

00:28:04,440 --> 00:28:11,130
the concepts my website in this case is

00:28:07,980 --> 00:28:13,559
bending about and I think of several

00:28:11,130 --> 00:28:16,049
ways of implementing it what's in common

00:28:13,559 --> 00:28:17,909
to all of them is the substance of my

00:28:16,049 --> 00:28:20,730
program the substrate of my software

00:28:17,909 --> 00:28:25,799
system it is what my API should be

00:28:20,730 --> 00:28:28,919
entirely focused about so why would you

00:28:25,799 --> 00:28:32,000
want to do all this work well first of

00:28:28,919 --> 00:28:34,950
all it's a lot it's very fun work it's

00:28:32,000 --> 00:28:39,899
for one so you don't you're not really

00:28:34,950 --> 00:28:42,149
caring about what would they accountant

00:28:39,899 --> 00:28:44,220
who's supposed to use this need and so

00:28:42,149 --> 00:28:47,870
on you're thinking about what would I

00:28:44,220 --> 00:28:51,029
want as a programmer to use this well

00:28:47,870 --> 00:28:53,519
plus the return on investment it's a

00:28:51,029 --> 00:28:55,169
substantial investment the return will

00:28:53,519 --> 00:28:57,870
amaze you if you've never done it

00:28:55,169 --> 00:29:01,080
properly not only of course you get a

00:28:57,870 --> 00:29:04,260
better API you get a better software by

00:29:01,080 --> 00:29:06,090
thinking in this they being forced to

00:29:04,260 --> 00:29:08,909
think about the distinction between

00:29:06,090 --> 00:29:12,630
substance and accident you end up with a

00:29:08,909 --> 00:29:16,830
better structure in in particular even

00:29:12,630 --> 00:29:21,000
in terms of end result as code you end

00:29:16,830 --> 00:29:23,460
up with the core with that does as

00:29:21,000 --> 00:29:26,039
little as possible and everything else

00:29:23,460 --> 00:29:27,960
is external subsystems which is a great

00:29:26,039 --> 00:29:30,360
architecture for any software of

00:29:27,960 --> 00:29:33,389
substantial complexity because it allows

00:29:30,360 --> 00:29:36,929
you to upgrade one bit or another as

00:29:33,389 --> 00:29:40,020
long as it's not part of the core in the

00:29:36,929 --> 00:29:42,299
smoothest way possible my favorite

00:29:40,020 --> 00:29:42,930
example and yes I do have permission

00:29:42,299 --> 00:29:45,900
this

00:29:42,930 --> 00:29:50,160
the xkcd guy is the most incredibly cool

00:29:45,900 --> 00:29:53,550
person for bait api which is why i was

00:29:50,160 --> 00:29:58,910
short to talk about exposing they the

00:29:53,550 --> 00:30:01,500
database is the worst very worst case of

00:29:58,910 --> 00:30:03,690
exposing the database is exposing it

00:30:01,500 --> 00:30:06,320
accidentally without realizing you're

00:30:03,690 --> 00:30:11,070
exposing it by taking some strings and

00:30:06,320 --> 00:30:14,310
just using it and allowing that string

00:30:11,070 --> 00:30:18,240
to hide sequel or whatever your database

00:30:14,310 --> 00:30:22,010
languages so note that this isn't just

00:30:18,240 --> 00:30:26,270
about terrible API it's also about

00:30:22,010 --> 00:30:30,840
security breakages so you're designing

00:30:26,270 --> 00:30:34,110
in both of your what they have in common

00:30:30,840 --> 00:30:35,640
what security and an API have in common

00:30:34,110 --> 00:30:38,390
is you're thinking about another

00:30:35,640 --> 00:30:41,700
programmer I already said that but I did

00:30:38,390 --> 00:30:43,950
alert you that I would be repeating the

00:30:41,700 --> 00:30:46,650
core concept in one case the other

00:30:43,950 --> 00:30:49,830
programmer is an enemy in the other one

00:30:46,650 --> 00:30:51,510
you'd rather they wouldn't be an enemy

00:30:49,830 --> 00:30:54,300
you'd rather have them as your friend

00:30:51,510 --> 00:30:56,640
but this is in common there's another

00:30:54,300 --> 00:30:59,580
programmer on the side okay those are

00:30:56,640 --> 00:31:02,970
the two biggies but now we go faster

00:30:59,580 --> 00:31:07,130
about minor issues zero api's is two of

00:31:02,970 --> 00:31:11,880
you three is too many for is right up

00:31:07,130 --> 00:31:14,760
one is usually best sometimes you have

00:31:11,880 --> 00:31:17,990
special consideration like you need you

00:31:14,760 --> 00:31:21,030
really need an application level plus an

00:31:17,990 --> 00:31:24,120
administration level for example for for

00:31:21,030 --> 00:31:28,580
an operating system that's not not a new

00:31:24,120 --> 00:31:31,860
job it's it's somewhat unusual for like

00:31:28,580 --> 00:31:36,260
websites or things but if you ever do

00:31:31,860 --> 00:31:39,870
asses okay why would anybody any pay I

00:31:36,260 --> 00:31:42,150
spent half an hour explaining why people

00:31:39,870 --> 00:31:45,120
do too few api's why would anybody do

00:31:42,150 --> 00:31:48,780
too many well the main causes transition

00:31:45,120 --> 00:31:50,610
okay I did it wrong when i release my

00:31:48,780 --> 00:31:52,530
software us here it was incredibly

00:31:50,610 --> 00:31:55,500
successful I've got a big a zillion

00:31:52,530 --> 00:31:57,450
people using it still the API

00:31:55,500 --> 00:32:03,180
disaster and now I know how to do it

00:31:57,450 --> 00:32:06,690
right do I fix that without for some

00:32:03,180 --> 00:32:09,240
time at least having the bad old one

00:32:06,690 --> 00:32:12,170
which I need to keep in order to not

00:32:09,240 --> 00:32:16,980
break a million clients and the new one

00:32:12,170 --> 00:32:19,200
or similar transition between a TI the

00:32:16,980 --> 00:32:22,470
number one but another one would be I

00:32:19,200 --> 00:32:26,430
used to have this great API that is PHP

00:32:22,470 --> 00:32:29,460
only and now I also like to support

00:32:26,430 --> 00:32:32,730
people using Python or Java or something

00:32:29,460 --> 00:32:35,280
else and the second cause we'll talk

00:32:32,730 --> 00:32:37,650
about in the commitment issues is

00:32:35,280 --> 00:32:40,050
unwillingness to decide you end up doing

00:32:37,650 --> 00:32:43,020
things two ways when one would be

00:32:40,050 --> 00:32:47,190
perfect simply because either way seems

00:32:43,020 --> 00:32:50,250
good and you can't decide and another

00:32:47,190 --> 00:32:53,390
one I haven't really seen that much in

00:32:50,250 --> 00:32:58,680
open source but is very common in in

00:32:53,390 --> 00:33:01,170
within a firm there's a organizational

00:32:58,680 --> 00:33:05,370
structure that there's an old saying i

00:33:01,170 --> 00:33:07,860
think it was Niklaus dirt you can tell a

00:33:05,370 --> 00:33:10,380
lot about how the department is

00:33:07,860 --> 00:33:12,960
organized that's written a compiler by

00:33:10,380 --> 00:33:15,510
seeing how many passes the compiler has

00:33:12,960 --> 00:33:18,960
remember this was the 60s if it's a five

00:33:15,510 --> 00:33:22,650
pass compiler I bet it's been the work

00:33:18,960 --> 00:33:26,460
of five university departments it's a

00:33:22,650 --> 00:33:29,010
natural way okay if some complex

00:33:26,460 --> 00:33:32,510
software system are three differently

00:33:29,010 --> 00:33:36,570
conceived and partly overlapping api's

00:33:32,510 --> 00:33:38,700
there this you can kind of tell there's

00:33:36,570 --> 00:33:40,920
three groups three kind of independent

00:33:38,700 --> 00:33:42,990
groups working on the softer but that's

00:33:40,920 --> 00:33:45,240
more common within a thermal load it

00:33:42,990 --> 00:33:48,600
cannot happen in open source so why is

00:33:45,240 --> 00:33:50,520
it bad to have many API as well there's

00:33:48,600 --> 00:33:53,190
a lot of extra work in keeping them all

00:33:50,520 --> 00:33:55,770
working its main maintenance thinks the

00:33:53,190 --> 00:34:00,060
 decay unless you work on them

00:33:55,770 --> 00:34:03,210
actively without any benefit to anybody

00:34:00,060 --> 00:34:06,990
really and they you don't get to

00:34:03,210 --> 00:34:08,280
refactor things it's not really helpful

00:34:06,990 --> 00:34:10,530
for that and the user

00:34:08,280 --> 00:34:14,100
hey user far from being helped is

00:34:10,530 --> 00:34:16,350
damaged is getting confused okay so i

00:34:14,100 --> 00:34:18,330
can do it this way or that way and

00:34:16,350 --> 00:34:20,460
sometimes there are things you can only

00:34:18,330 --> 00:34:22,080
do through this route and other things

00:34:20,460 --> 00:34:25,290
that you can only do through that route

00:34:22,080 --> 00:34:27,120
if you need to do both you end up having

00:34:25,290 --> 00:34:32,070
to mix and match during comfortable

00:34:27,120 --> 00:34:35,880
api's the transitioning part is really

00:34:32,070 --> 00:34:38,210
really hard what I would recommend if

00:34:35,880 --> 00:34:41,880
you do it right from the first which is

00:34:38,210 --> 00:34:46,409
not a given it's layering layering is ok

00:34:41,880 --> 00:34:50,400
you can have a low layer low abstraction

00:34:46,409 --> 00:34:52,350
layer that is still not too close to the

00:34:50,400 --> 00:34:55,980
implementation but close enough that it

00:34:52,350 --> 00:34:58,620
doesn't have it can expose nuts and

00:34:55,980 --> 00:35:02,030
bolts letters it's not talking to the

00:34:58,620 --> 00:35:07,650
application level programmer so much

00:35:02,030 --> 00:35:09,390
user unfriendly harder hard to use as

00:35:07,650 --> 00:35:12,170
long as it's well documented and well

00:35:09,390 --> 00:35:16,500
debatable you're going to be fine and

00:35:12,170 --> 00:35:18,540
then you can build other AP is in this

00:35:16,500 --> 00:35:21,930
case it may be even okay to have more

00:35:18,540 --> 00:35:24,120
than one on top of the lowest level why

00:35:21,930 --> 00:35:26,610
is it does that work because the only

00:35:24,120 --> 00:35:28,560
maintenance needed is as the

00:35:26,610 --> 00:35:31,110
implementation involved is for that one

00:35:28,560 --> 00:35:33,930
layer but what if you didn't do it right

00:35:31,110 --> 00:35:37,740
the first time well then I'm sorry to

00:35:33,930 --> 00:35:39,330
say you need a part if we're programmers

00:35:37,740 --> 00:35:41,940
at least those of us who are programmers

00:35:39,330 --> 00:35:44,820
as opposed to project managers are

00:35:41,940 --> 00:35:50,250
probably going to run away screening but

00:35:44,820 --> 00:35:56,220
in this case to err is human to not plan

00:35:50,250 --> 00:35:58,020
how to fix your error is Bala cool Big

00:35:56,220 --> 00:36:01,280
Bang transition is right out please

00:35:58,020 --> 00:36:03,870
don't do it I mean look at what happened

00:36:01,280 --> 00:36:06,270
every time somebody tries a big bank

00:36:03,870 --> 00:36:07,890
transition including languages like Perl

00:36:06,270 --> 00:36:10,320
and Python I mean I don't know how many

00:36:07,890 --> 00:36:14,700
of you of totally transitioned to bite

00:36:10,320 --> 00:36:16,800
and three but hey we haven't I'd but so

00:36:14,700 --> 00:36:18,690
we're now have by then to python 3 is

00:36:16,800 --> 00:36:19,109
like these two things will live together

00:36:18,690 --> 00:36:21,930
for

00:36:19,109 --> 00:36:25,470
pearl five and six is in an even worse

00:36:21,930 --> 00:36:27,319
shape the Big Bang transition is really

00:36:25,470 --> 00:36:31,049
painful so if you can possibly avoid it

00:36:27,319 --> 00:36:34,140
please do so what you need to do is

00:36:31,049 --> 00:36:36,089
phase out phase it have at least one

00:36:34,140 --> 00:36:38,519
release better more than one where the

00:36:36,089 --> 00:36:41,519
old stuff still works and gives more and

00:36:38,519 --> 00:36:43,680
more sprint warnings like hey you're

00:36:41,519 --> 00:36:47,549
doing things the wrong way use this way

00:36:43,680 --> 00:36:50,160
instead or ideally specific suggestions

00:36:47,549 --> 00:36:52,109
make sure you r up soon we need to

00:36:50,160 --> 00:36:55,109
invest in tutorial and other kind of

00:36:52,109 --> 00:36:58,410
documentation how do I transition never

00:36:55,109 --> 00:37:01,079
add new functionality an old API this is

00:36:58,410 --> 00:37:03,900
this at least is something Python has

00:37:01,079 --> 00:37:06,900
done right Python 2 will never have any

00:37:03,900 --> 00:37:08,759
new cool stuff so that is a motivation

00:37:06,900 --> 00:37:12,089
for all of us though I really really

00:37:08,759 --> 00:37:15,710
need to move to python 3 because all the

00:37:12,089 --> 00:37:18,029
new hot features will be there and

00:37:15,710 --> 00:37:21,630
sometimes you can even tweak the design

00:37:18,029 --> 00:37:23,730
with care to help the transition so fear

00:37:21,630 --> 00:37:28,950
of commitment is they let's do both

00:37:23,730 --> 00:37:33,930
syndrome as in this well-known Dilbert

00:37:28,950 --> 00:37:36,390
strip so shall we build a product and

00:37:33,930 --> 00:37:41,609
nobody wants to use or get sued let's do

00:37:36,390 --> 00:37:45,019
both why is it a bad because you really

00:37:41,609 --> 00:37:47,849
need to to decide and that can be scary

00:37:45,019 --> 00:37:50,670
because once you make a decision you're

00:37:47,849 --> 00:37:56,400
accountable for it and that's especially

00:37:50,670 --> 00:37:58,559
in commercial situation you may know

00:37:56,400 --> 00:38:00,269
that if you don't decide you're not

00:37:58,559 --> 00:38:03,089
going to get punished if you do decide

00:38:00,269 --> 00:38:05,390
and it works nobody will remember if you

00:38:03,089 --> 00:38:09,569
do decide to be strong during trouble so

00:38:05,390 --> 00:38:12,989
this I think is a good example they

00:38:09,569 --> 00:38:15,239
uniques example of open is very sharp of

00:38:12,989 --> 00:38:18,269
course but it doesn't let me do this and

00:38:15,239 --> 00:38:20,430
that no it does one thing in the API

00:38:18,269 --> 00:38:22,980
I'll wait what if we also want to tweet

00:38:20,430 --> 00:38:24,989
securities yeah what do we need for

00:38:22,980 --> 00:38:26,730
security a lot of style i sponsor yet

00:38:24,989 --> 00:38:29,700
another pointer to a structure but it

00:38:26,730 --> 00:38:31,190
can be now the pointer can be a null

00:38:29,700 --> 00:38:33,680
pointer so

00:38:31,190 --> 00:38:36,920
another bad example this is my code my

00:38:33,680 --> 00:38:39,800
design gin p I couldn't decide whether

00:38:36,920 --> 00:38:42,619
to make ulster all sort of stuff

00:38:39,800 --> 00:38:44,560
freestanding function or methods of

00:38:42,619 --> 00:38:46,880
objects so I ended up doing both

00:38:44,560 --> 00:38:49,910
fortunately we're fixing it now thanks

00:38:46,880 --> 00:38:51,980
to a case on whoreson who's now actually

00:38:49,910 --> 00:38:54,980
doing most of the of the development

00:38:51,980 --> 00:38:57,319
it's called gp2 so the old gym p will

00:38:54,980 --> 00:38:59,270
say this is in a sense big bank

00:38:57,319 --> 00:39:00,980
transition at some point we'll stop

00:38:59,270 --> 00:39:03,890
adding any new feature to gym p

00:39:00,980 --> 00:39:09,079
everything Jim p by the way because you

00:39:03,890 --> 00:39:11,329
don't know is unbounded precision

00:39:09,079 --> 00:39:14,359
arithmetic package for Python

00:39:11,329 --> 00:39:16,460
interfacing used to be GMP but now it's

00:39:14,359 --> 00:39:21,500
mostly mpfr if you're doing floating

00:39:16,460 --> 00:39:23,960
part who decide is human ken Thompson

00:39:21,500 --> 00:39:25,400
was asked if you were to design UNIX all

00:39:23,960 --> 00:39:28,220
over again what would you do different

00:39:25,400 --> 00:39:30,980
and it's a spell create with a trailing

00:39:28,220 --> 00:39:33,920
d besides that besides being correct

00:39:30,980 --> 00:39:35,329
it's wrong what he should have done you

00:39:33,920 --> 00:39:38,210
shouldn't have out create at all because

00:39:35,329 --> 00:39:40,940
open does create work just as well with

00:39:38,210 --> 00:39:43,640
the appropriate flags and that's a view

00:39:40,940 --> 00:39:47,990
I mean I don't know if you program a lot

00:39:43,640 --> 00:39:49,630
do they bear UNIX interface but when was

00:39:47,990 --> 00:39:53,210
it the last time you called create

00:39:49,630 --> 00:39:56,210
without the trailing you never need to

00:39:53,210 --> 00:39:57,710
you use of perfection is not this world

00:39:56,210 --> 00:40:00,829
that doesn't mean you shouldn't even try

00:39:57,710 --> 00:40:04,849
so have the courage to choose and if

00:40:00,829 --> 00:40:08,619
that's a career problem in our firm work

00:40:04,849 --> 00:40:11,960
elsewhere who is hiring by the way an

00:40:08,619 --> 00:40:15,500
empowering environment a place where you

00:40:11,960 --> 00:40:18,260
are encouraged to fail as long as you

00:40:15,500 --> 00:40:21,650
fail fast realizing mistake and do it

00:40:18,260 --> 00:40:24,290
right next time don't be paralyzed

00:40:21,650 --> 00:40:27,349
launch fast and iterate rough consensus

00:40:24,290 --> 00:40:30,200
and running code inconsistency we're all

00:40:27,349 --> 00:40:33,170
familiar with those sometime the

00:40:30,200 --> 00:40:36,170
argument ordering exchange some things

00:40:33,170 --> 00:40:39,140
are spelled one way I'm looking at the

00:40:36,170 --> 00:40:40,790
Pythons under library can you unless

00:40:39,140 --> 00:40:42,280
you've like totally memorized it do you

00:40:40,790 --> 00:40:44,700
know exactly where

00:40:42,280 --> 00:40:48,520
you need mix it case than where you need

00:40:44,700 --> 00:40:51,550
one of my favorite things to hate is how

00:40:48,520 --> 00:40:54,130
you treat acronyms have you ever noticed

00:40:51,550 --> 00:40:57,910
that oh the acronyms are all upper cases

00:40:54,130 --> 00:41:00,100
so when i read https all uppercase

00:40:57,910 --> 00:41:05,560
that's how i parse it so this is an

00:41:00,100 --> 00:41:09,190
https interaction to end a query what it

00:41:05,560 --> 00:41:13,060
reads that way no that wait the first

00:41:09,190 --> 00:41:18,210
eight HTTP is the acronym and the send

00:41:13,060 --> 00:41:20,710
is a different thing and okay why does

00:41:18,210 --> 00:41:22,630
inconsistency happen I don't think it's

00:41:20,710 --> 00:41:25,720
because people are too fond of reading

00:41:22,630 --> 00:41:28,000
Ralph own although Amazon foolish

00:41:25,720 --> 00:41:30,190
consistency is the hobgoblin of small

00:41:28,000 --> 00:41:32,470
minds rather I think because people

00:41:30,190 --> 00:41:34,240
change over time so they start one way

00:41:32,470 --> 00:41:36,430
and then they think of something better

00:41:34,240 --> 00:41:39,970
but the old stuff stays the old style

00:41:36,430 --> 00:41:43,690
the new stuff goes to the new style one

00:41:39,970 --> 00:41:46,860
example I just gave that's an actual

00:41:43,690 --> 00:41:51,910
example from a interface there's a

00:41:46,860 --> 00:41:54,220
article commit transaction figure versus

00:41:51,910 --> 00:41:57,160
robach transactions plural they both

00:41:54,220 --> 00:41:59,530
take a list of transactions to commit a

00:41:57,160 --> 00:42:01,600
rollback so why is the spell difference

00:41:59,530 --> 00:42:03,670
well because historically commit

00:42:01,600 --> 00:42:08,260
transaction came first and only took

00:42:03,670 --> 00:42:12,520
what so when when they roll back was

00:42:08,260 --> 00:42:15,490
added that was extended to take several

00:42:12,520 --> 00:42:17,740
but the spelling problem rename or

00:42:15,490 --> 00:42:20,440
different people conceptualize think in

00:42:17,740 --> 00:42:23,410
different way my recommendation and I

00:42:20,440 --> 00:42:26,410
know this site's me as an old-style IT

00:42:23,410 --> 00:42:28,570
guy but a data dictionary is actually a

00:42:26,410 --> 00:42:30,580
good idea it's called the data

00:42:28,570 --> 00:42:32,380
dictionary traditionally but it's not

00:42:30,580 --> 00:42:37,510
just about data verbs are just as

00:42:32,380 --> 00:42:40,570
important a one-to-one mapping of words

00:42:37,510 --> 00:42:43,210
to concept that applies throughout your

00:42:40,570 --> 00:42:48,190
system whenever a new concept arises

00:42:43,210 --> 00:42:50,560
that wasn't exposed on an ati before add

00:42:48,190 --> 00:42:54,130
it to the data dictionary before you

00:42:50,560 --> 00:42:55,710
start coding so this makes something go

00:42:54,130 --> 00:42:58,290
away how do we call that array

00:42:55,710 --> 00:43:00,980
now delete either is fine I don't care

00:42:58,290 --> 00:43:04,109
but just call it in the same way forever

00:43:00,980 --> 00:43:06,330
making something go away is gold in this

00:43:04,109 --> 00:43:08,250
software system is called delete or

00:43:06,330 --> 00:43:10,859
maybe it's called remove but the ponies

00:43:08,250 --> 00:43:13,950
is called in one way not in three

00:43:10,859 --> 00:43:16,560
different verbs and so on what it cost

00:43:13,950 --> 00:43:19,080
is a little more work to coordinate but

00:43:16,560 --> 00:43:23,160
it's well worth it it's like having a

00:43:19,080 --> 00:43:26,190
coding style for the team you make a

00:43:23,160 --> 00:43:29,839
little upfront effort to set it up but

00:43:26,190 --> 00:43:32,880
then after war there's so many fewer

00:43:29,839 --> 00:43:35,310
trivial decisions you have to make okay

00:43:32,880 --> 00:43:38,640
this makes the the thing you go away how

00:43:35,310 --> 00:43:43,920
do i call it delete or remove or a race

00:43:38,640 --> 00:43:46,950
or go away or new or way well you don't

00:43:43,920 --> 00:43:49,170
have to think like spent waste a couple

00:43:46,950 --> 00:43:51,480
minutes and energy and distracting to

00:43:49,170 --> 00:43:53,970
choose this just like say okay how much

00:43:51,480 --> 00:43:56,970
do I indent here three spaces or five

00:43:53,970 --> 00:43:58,470
hmm you don't have to you made that

00:43:56,970 --> 00:44:00,330
decision at the beginning of the project

00:43:58,470 --> 00:44:03,089
is written there we use four spaces in

00:44:00,330 --> 00:44:04,680
there that's it it's better to have

00:44:03,089 --> 00:44:06,720
decided it for watch it doesn't matter

00:44:04,680 --> 00:44:08,430
whether it's for three or five well

00:44:06,720 --> 00:44:12,390
invite them is better before but the

00:44:08,430 --> 00:44:14,070
point is it's there it's it's a trivial

00:44:12,390 --> 00:44:16,530
decision made once and for all this

00:44:14,070 --> 00:44:21,900
isn't exactly trivial but it's better to

00:44:16,530 --> 00:44:26,210
and that's why it's saved okay avoid

00:44:21,900 --> 00:44:29,490
extremes they're very tempting because

00:44:26,210 --> 00:44:33,630
they look so sharp and strong but

00:44:29,490 --> 00:44:36,060
there's always a downside extremism is

00:44:33,630 --> 00:44:41,520
simpler but it never works as well as

00:44:36,060 --> 00:44:43,349
balanced and good taste for example what

00:44:41,520 --> 00:44:46,890
programming languages are we supporting

00:44:43,349 --> 00:44:50,010
well one extreme is of course we have an

00:44:46,890 --> 00:44:52,970
API it's all brain fork is an

00:44:50,010 --> 00:44:56,810
interesting variant of a language that

00:44:52,970 --> 00:45:01,080
spell similarly and I can say public but

00:44:56,810 --> 00:45:04,290
with an addition of forking off multiple

00:45:01,080 --> 00:45:07,320
tasks to make it even more come more

00:45:04,290 --> 00:45:09,100
mind killing so anyway so of course

00:45:07,320 --> 00:45:11,530
anybody who wants to interact with

00:45:09,100 --> 00:45:14,080
project just needs to learn this this

00:45:11,530 --> 00:45:16,120
language encode them whatever language

00:45:14,080 --> 00:45:20,530
you use to implement your system should

00:45:16,120 --> 00:45:22,090
not influence your API that does

00:45:20,530 --> 00:45:24,160
absolutely crucial because it's one of

00:45:22,090 --> 00:45:28,090
those internal things day tomorrow I

00:45:24,160 --> 00:45:30,040
record it in JavaScript or whatever that

00:45:28,090 --> 00:45:32,620
shouldn't make any difference to people

00:45:30,040 --> 00:45:37,410
calling in to the system from from the

00:45:32,620 --> 00:45:41,740
outside so this is very important avoid

00:45:37,410 --> 00:45:46,450
data exchange through language specific

00:45:41,740 --> 00:45:51,340
format tickle is evil don't expose

00:45:46,450 --> 00:45:54,220
pickle as your API yes oh but everybody

00:45:51,340 --> 00:45:56,590
should be using Python yes but some of

00:45:54,220 --> 00:45:59,460
them will have to be using javascript or

00:45:56,590 --> 00:46:02,500
running in a browser or whatever don't

00:45:59,460 --> 00:46:05,470
force them to go to your competitors

00:46:02,500 --> 00:46:07,300
because there is no good pickle

00:46:05,470 --> 00:46:10,230
implementation in JavaScript and there

00:46:07,300 --> 00:46:13,390
will never be a suspect use something

00:46:10,230 --> 00:46:16,180
Jason is not language specific you can

00:46:13,390 --> 00:46:20,470
you can parse it in in any language it's

00:46:16,180 --> 00:46:23,230
very very easy other formats the other

00:46:20,470 --> 00:46:26,650
extreme would be well you can program

00:46:23,230 --> 00:46:30,610
fortune in any language so that have no

00:46:26,650 --> 00:46:34,600
object no object oriented anything

00:46:30,610 --> 00:46:37,210
nothing except arrays that's pushing

00:46:34,600 --> 00:46:39,460
things too far if people do want to

00:46:37,210 --> 00:46:43,230
program in Fortran you can say okay you

00:46:39,460 --> 00:46:47,500
just need to use Fortran 97 or maybe

00:46:43,230 --> 00:46:49,570
fourth front 2015 whatever i'm sure

00:46:47,500 --> 00:46:51,760
there will be some language called

00:46:49,570 --> 00:46:53,110
fortran that has whatever set of

00:46:51,760 --> 00:46:57,880
features you want is closed so it's not

00:46:53,110 --> 00:47:01,540
a problem so object structures and so on

00:46:57,880 --> 00:47:03,280
you should really be using don't invent

00:47:01,540 --> 00:47:05,050
yet another data format it's not

00:47:03,280 --> 00:47:08,320
particularly evil but it's such a stupid

00:47:05,050 --> 00:47:11,260
waste of time there's so many have you

00:47:08,320 --> 00:47:14,319
ever thought JSON or its super said

00:47:11,260 --> 00:47:17,019
llamo that actually got very useful

00:47:14,319 --> 00:47:19,420
enhancement so isn't good enough it

00:47:17,019 --> 00:47:23,469
mostly will be if it's not up you

00:47:19,420 --> 00:47:25,390
consider CSV if you fight yes hdf next I

00:47:23,469 --> 00:47:26,709
mean there's so many that's a good thing

00:47:25,390 --> 00:47:29,859
about standards there's so many

00:47:26,709 --> 00:47:33,099
comfortable once you choose from or oh

00:47:29,859 --> 00:47:35,440
but but that waist is too much space

00:47:33,099 --> 00:47:37,509
well use google portugal buffers we open

00:47:35,440 --> 00:47:39,640
source them for a reason oh no it

00:47:37,509 --> 00:47:42,579
doesn't waste enough space whether they

00:47:39,640 --> 00:47:45,400
use Excel hey you don't have to invent

00:47:42,579 --> 00:47:50,019
your own way to waste space people have

00:47:45,400 --> 00:47:52,150
done it for you it's very effective I I

00:47:50,019 --> 00:47:54,400
want to hear your excuses why you need

00:47:52,150 --> 00:47:56,799
yet another incompatible data format or

00:47:54,400 --> 00:47:59,890
actually don't but that say I don't

00:47:56,799 --> 00:48:01,959
actually want to hear the excuses but if

00:47:59,890 --> 00:48:04,569
you're on the web but why don't why

00:48:01,959 --> 00:48:07,509
aren't using rust as in representational

00:48:04,569 --> 00:48:09,699
state transfer if you are not on the web

00:48:07,509 --> 00:48:11,890
why not use every screen anyway I mean

00:48:09,699 --> 00:48:15,369
it's so easy to listen to port whatever

00:48:11,890 --> 00:48:18,009
you know 80 80 or something and get your

00:48:15,369 --> 00:48:19,509
API that way it's a great way even if

00:48:18,009 --> 00:48:21,459
most of your functionality has

00:48:19,509 --> 00:48:23,799
absolutely nothing to do with the web I

00:48:21,459 --> 00:48:25,839
would seriously consider it except if

00:48:23,799 --> 00:48:28,449
you're on Windows or or Mac as they

00:48:25,839 --> 00:48:31,420
already mentioned and then there's far

00:48:28,449 --> 00:48:35,349
more general stuff like rdc korba and so

00:48:31,420 --> 00:48:40,380
on that sometimes can pay for themselves

00:48:35,349 --> 00:48:43,719
in terms of generality debugging error

00:48:40,380 --> 00:48:46,869
messages and documentation when you make

00:48:43,719 --> 00:48:49,420
an ati somebody will be developing with

00:48:46,869 --> 00:48:52,809
it one hopes through highs your whole

00:48:49,420 --> 00:48:54,759
exercise has been somewhat utah they

00:48:52,809 --> 00:48:57,729
will make mistakes they're probably

00:48:54,759 --> 00:49:00,759
human most of them you will make

00:48:57,729 --> 00:49:02,709
mistakes most I mean I realize that very

00:49:00,759 --> 00:49:06,400
hard for programmers works afterward we

00:49:02,709 --> 00:49:09,609
do occasional rarely I remember once in

00:49:06,400 --> 00:49:13,440
nineteen eighty i order that actually

00:49:09,609 --> 00:49:18,039
made a mistake well i came close to me

00:49:13,440 --> 00:49:21,400
open-source helps because they can get

00:49:18,039 --> 00:49:23,920
this mysterious error message and start

00:49:21,400 --> 00:49:26,340
digging into the sources find out why is

00:49:23,920 --> 00:49:29,690
saying that but it's

00:49:26,340 --> 00:49:33,450
really you shouldn't rely on people

00:49:29,690 --> 00:49:36,420
getting comprehensible error messages or

00:49:33,450 --> 00:49:39,440
no documentation and and deconstructing

00:49:36,420 --> 00:49:42,180
your sources it's really wimping out

00:49:39,440 --> 00:49:44,610
it's like the kind of software you

00:49:42,180 --> 00:49:47,490
getting the error messages there was an

00:49:44,610 --> 00:49:50,580
error ok which error can I have some

00:49:47,490 --> 00:49:52,440
indication what did I do wrong that that

00:49:50,580 --> 00:49:55,020
also applies to user interfaces but that

00:49:52,440 --> 00:49:59,220
user interface is not my my field of

00:49:55,020 --> 00:50:00,810
expertise ap is so documentation Tsar

00:49:59,220 --> 00:50:02,850
hard to write but they're really the

00:50:00,810 --> 00:50:08,220
most precious part just keep them well

00:50:02,850 --> 00:50:09,780
aligned by testing with testing

00:50:08,220 --> 00:50:12,630
documentation means your documentation

00:50:09,780 --> 00:50:15,150
is runnable code examples that's a

00:50:12,630 --> 00:50:18,000
reasonable way to communicate and it has

00:50:15,150 --> 00:50:20,250
this huge advantage that it won't go out

00:50:18,000 --> 00:50:23,400
of sync with what the software is

00:50:20,250 --> 00:50:27,600
actually doing these days and then last

00:50:23,400 --> 00:50:32,340
but not least there's performance you

00:50:27,600 --> 00:50:35,130
most people who do great API is in many

00:50:32,340 --> 00:50:40,560
respects forget this one little bit if

00:50:35,130 --> 00:50:43,320
the API doesn't have some performance

00:50:40,560 --> 00:50:47,220
issue in mind in some context it can

00:50:43,320 --> 00:50:50,700
really kill you for example if the API

00:50:47,220 --> 00:50:52,590
is ok you build an object like this for

00:50:50,700 --> 00:50:55,320
the purpose of calling one method on it

00:50:52,590 --> 00:50:57,240
and then the object goes away depending

00:50:55,320 --> 00:50:59,730
in exactly on what we're speaking about

00:50:57,240 --> 00:51:02,270
can have a lot of object construction

00:50:59,730 --> 00:51:06,600
overhead and object destruction overhead

00:51:02,270 --> 00:51:12,650
which really isn't all that justified so

00:51:06,600 --> 00:51:15,960
consider that kind of thing if every

00:51:12,650 --> 00:51:17,430
cold but that's especially true if for

00:51:15,960 --> 00:51:19,440
example you're going through the web so

00:51:17,430 --> 00:51:24,210
a round-trip means hundreds of

00:51:19,440 --> 00:51:26,750
milliseconds of delays going for the

00:51:24,210 --> 00:51:30,120
request and with the results coming back

00:51:26,750 --> 00:51:33,760
suppose again that hypothetical website

00:51:30,120 --> 00:51:37,250
about soccer so you want to know

00:51:33,760 --> 00:51:39,490
which team did this player play with

00:51:37,250 --> 00:51:42,410
them that year you actually want to know

00:51:39,490 --> 00:51:45,109
which teams to play with in 10 years so

00:51:42,410 --> 00:51:47,660
you shouldn't have to do 10 queries one

00:51:45,109 --> 00:51:50,090
or what about 2009 what did he do in

00:51:47,660 --> 00:51:51,590
2008 what did you do in 2007 a lot of

00:51:50,090 --> 00:51:53,810
api's are designed like that you should

00:51:51,590 --> 00:51:55,810
be able to pass an array these are the

00:51:53,810 --> 00:51:58,849
years I care about a single transaction

00:51:55,810 --> 00:52:02,420
save hundreds of milliseconds time it

00:51:58,849 --> 00:52:04,369
mounts up in some cases especially

00:52:02,420 --> 00:52:07,310
within a cross language environment

00:52:04,369 --> 00:52:09,950
supporting reading and distribution can

00:52:07,310 --> 00:52:11,840
be hard but perform oh and also a

00:52:09,950 --> 00:52:13,190
synchronous views it's very important

00:52:11,840 --> 00:52:17,030
for it can be very important for

00:52:13,190 --> 00:52:20,119
performance and scalability and mostly

00:52:17,030 --> 00:52:22,490
in scientific work a right computation

00:52:20,119 --> 00:52:25,250
if you try to give very precise

00:52:22,490 --> 00:52:28,310
guarantees about behavior under error

00:52:25,250 --> 00:52:31,990
condition that can really kill your

00:52:28,310 --> 00:52:35,930
performance what do you wanna likes a

00:52:31,990 --> 00:52:39,140
divider AAA by RAB as soon as there's a

00:52:35,930 --> 00:52:41,930
zero in rab everything after that is not

00:52:39,140 --> 00:52:44,300
done that's very hard to ensure without

00:52:41,930 --> 00:52:48,500
completely serializing in those losing

00:52:44,300 --> 00:52:53,030
the point of an array interface ok this

00:52:48,500 --> 00:52:55,580
is the fast version of as I said what

00:52:53,030 --> 00:52:58,490
should be a lifetime talk and we do have

00:52:55,580 --> 00:53:05,660
a little time for Question and Answer if

00:52:58,490 --> 00:53:07,190
there any image in the example of create

00:53:05,660 --> 00:53:09,320
don't need to create because you can

00:53:07,190 --> 00:53:11,690
have open but the counter example for

00:53:09,320 --> 00:53:13,220
that would be malloc or some free versus

00:53:11,690 --> 00:53:14,930
realloc we all can do the same thing as

00:53:13,220 --> 00:53:16,820
both knock and free but there's a

00:53:14,930 --> 00:53:18,770
trade-off between having more things in

00:53:16,820 --> 00:53:20,330
one function or things other functions

00:53:18,770 --> 00:53:23,060
because it's or error prone to have the

00:53:20,330 --> 00:53:24,349
case of real everyone needs me out what

00:53:23,060 --> 00:53:26,420
then are your guidelines for how to

00:53:24,349 --> 00:53:28,910
determine that I personally did test

00:53:26,420 --> 00:53:30,380
this against users but early on the API

00:53:28,910 --> 00:53:34,450
development there's no beginner users

00:53:30,380 --> 00:53:34,450
using my API so

00:53:34,690 --> 00:53:43,150
I think the layering concept really

00:53:38,980 --> 00:53:46,690
helps if you have an Outlook function

00:53:43,150 --> 00:53:50,980
which takes seven parameters that's not

00:53:46,690 --> 00:53:53,579
easy to use but that is the zero level

00:53:50,980 --> 00:53:57,040
API because it lets you do anything

00:53:53,579 --> 00:53:59,680
regarding memory in the unified way and

00:53:57,040 --> 00:54:03,250
then you publish a layer one which

00:53:59,680 --> 00:54:05,530
distinguishes malik from realloc and so

00:54:03,250 --> 00:54:08,349
on but its internal implemented in terms

00:54:05,530 --> 00:54:11,109
of the lower levels this is not the kind

00:54:08,349 --> 00:54:13,180
of overhead you should worry about like

00:54:11,109 --> 00:54:16,119
oh but there's an extra function call

00:54:13,180 --> 00:54:18,460
especially in see who cares it's not

00:54:16,119 --> 00:54:21,819
going to kill your performance in any

00:54:18,460 --> 00:54:25,000
way the level 0 interface is available

00:54:21,819 --> 00:54:26,800
published documented it's just not the

00:54:25,000 --> 00:54:29,940
most convenient to use when you're

00:54:26,800 --> 00:54:32,650
designing our operating system or

00:54:29,940 --> 00:54:36,520
equivalent now create versus open is

00:54:32,650 --> 00:54:39,970
typically os-level maluca mala Kriya

00:54:36,520 --> 00:54:44,680
yoga is typically but it's still low

00:54:39,970 --> 00:54:50,940
level enough for that that it might as

00:54:44,680 --> 00:54:55,000
well be an OS eat you shouldn't expose

00:54:50,940 --> 00:55:00,670
several different ways to do things for

00:54:55,000 --> 00:55:02,530
convenience that's a which is higher

00:55:00,670 --> 00:55:05,380
lower there is realloc higher or lower

00:55:02,530 --> 00:55:08,170
than nuin neither a look would be I

00:55:05,380 --> 00:55:11,230
would recommend having an underlying

00:55:08,170 --> 00:55:13,900
thing which takes old eat realloc

00:55:11,230 --> 00:55:18,480
arguments and more like a flag asking

00:55:13,900 --> 00:55:22,359
for specific behavior into himself hmm

00:55:18,480 --> 00:55:24,760
but then you have real a lock and free

00:55:22,359 --> 00:55:26,829
at the lowest levels and then relock

00:55:24,760 --> 00:55:31,540
actually actually freeze shouldn't be

00:55:26,829 --> 00:55:34,359
part of a look think about it but maybe

00:55:31,540 --> 00:55:38,400
a lock is therefore not the good term do

00:55:34,359 --> 00:55:38,400
stuff with memory would be a good name

00:55:38,520 --> 00:55:45,589
ok let's thing

00:55:41,809 --> 00:55:48,410
so you you try to give advice as to how

00:55:45,589 --> 00:55:50,660
API should it should be evolved in case

00:55:48,410 --> 00:55:52,849
you design an API and then it's not as

00:55:50,660 --> 00:55:55,849
ideal as you would like it to be so you

00:55:52,849 --> 00:55:58,249
with a second API how about versioning

00:55:55,849 --> 00:56:04,549
what versioning api's does that help

00:55:58,249 --> 00:56:09,259
with evolution he did ok what about

00:56:04,549 --> 00:56:10,999
versioning well it it may help avoid

00:56:09,259 --> 00:56:12,739
confusion but it doesn't help avoid

00:56:10,999 --> 00:56:16,699
having to maintain multiple versions

00:56:12,739 --> 00:56:20,959
especially their incomparable it's like

00:56:16,699 --> 00:56:23,329
I realized python is not an API but you

00:56:20,959 --> 00:56:25,729
know whether using 26 or 27 they're

00:56:23,329 --> 00:56:29,719
still maintenance needed on both

00:56:25,729 --> 00:56:32,299
versions it's not relief doctor but like

00:56:29,719 --> 00:56:35,029
you can also retire versions and it's it

00:56:32,299 --> 00:56:36,890
helps people transfer or you can claim

00:56:35,029 --> 00:56:40,339
you're doing that but it doesn't help

00:56:36,890 --> 00:56:43,880
them transfer you like in Google App

00:56:40,339 --> 00:56:45,859
Engine Russell using Python 25 not

00:56:43,880 --> 00:56:53,869
particularly happy about that but we are

00:56:45,859 --> 00:56:55,640
I can think of languages or libraries

00:56:53,869 --> 00:56:59,029
and frameworks where there are like

00:56:55,640 --> 00:57:02,869
hundreds of function without its paces

00:56:59,029 --> 00:57:06,140
or very heavily polymorphic methods and

00:57:02,869 --> 00:57:09,079
I don't think those are really good API

00:57:06,140 --> 00:57:12,890
decisions but they are hugely popular

00:57:09,079 --> 00:57:15,049
and I wonder if they are being popular

00:57:12,890 --> 00:57:17,689
because they are used by a program

00:57:15,049 --> 00:57:19,969
yourself there are use the levels of

00:57:17,689 --> 00:57:23,089
experience especially a beginners or

00:57:19,969 --> 00:57:25,489
like there is a new application domain

00:57:23,089 --> 00:57:29,059
and your language or there is the web

00:57:25,489 --> 00:57:32,299
and there's the iterations generation of

00:57:29,059 --> 00:57:38,179
software is not optimal at the API side

00:57:32,299 --> 00:57:40,579
or we should worry if we are a good API

00:57:38,179 --> 00:57:42,709
that allows for a synchronism with

00:57:40,579 --> 00:57:46,009
reading and performance a little doubt

00:57:42,709 --> 00:57:48,739
that will impact our popularity I think

00:57:46,009 --> 00:57:51,499
I think the best answer was given by

00:57:48,739 --> 00:57:54,019
Albert Einstein everything should be as

00:57:51,499 --> 00:57:58,339
simple as possible but not simpler than

00:57:54,019 --> 00:58:03,679
that seriously complexity for its own

00:57:58,339 --> 00:58:07,369
sake is horrible but trying to over to

00:58:03,679 --> 00:58:10,219
simplify complexity away only works when

00:58:07,369 --> 00:58:13,189
the complexity is superficial sometimes

00:58:10,219 --> 00:58:16,910
you have problems basis that have

00:58:13,189 --> 00:58:20,089
inherent complexity and then the

00:58:16,910 --> 00:58:23,349
attempts to simplify that away end up

00:58:20,089 --> 00:58:28,549
leading to more ambiguous ambiguous

00:58:23,349 --> 00:58:32,359
complexity so finding out exactly how

00:58:28,549 --> 00:58:36,019
simple is possible is a really really

00:58:32,359 --> 00:58:38,509
hard problem that I can't address except

00:58:36,019 --> 00:58:41,390
in very specific spaces but that they

00:58:38,509 --> 00:58:44,150
exactly the kind of thing where effort

00:58:41,390 --> 00:58:47,239
up front again put the computer away get

00:58:44,150 --> 00:58:49,819
a whiteboard and 34 interested people

00:58:47,239 --> 00:58:52,189
ideally not all programmers some will

00:58:49,819 --> 00:58:54,229
they will be the domain experts they

00:58:52,189 --> 00:58:57,019
depends on on what your your application

00:58:54,229 --> 00:59:00,859
is doing they may not be able to write

00:58:57,019 --> 00:59:03,679
Python or Java Script or or whatever but

00:59:00,859 --> 00:59:06,890
they sure know what matters in tracking

00:59:03,679 --> 00:59:10,640
soccer games and and so on and so forth

00:59:06,890 --> 00:59:12,259
and they will have better suggestion of

00:59:10,640 --> 00:59:14,599
what should be modeled even if they

00:59:12,259 --> 00:59:16,400
don't know what a polymorphism is and

00:59:14,599 --> 00:59:18,499
think there's probably something to do

00:59:16,400 --> 00:59:23,349
with Greek mythology which I believe

00:59:18,499 --> 00:59:23,349
there is some of that or or biology

00:59:34,259 --> 00:59:40,839
hey Alex ah your GM py example I didn't

00:59:39,009 --> 00:59:42,940
follow what the issue was there what was

00:59:40,839 --> 00:59:45,279
it it was done incorrectly in the first

00:59:42,940 --> 00:59:47,979
needs to be all of essentially all of

00:59:45,279 --> 00:59:50,680
the functionality in GNP why you can

00:59:47,979 --> 00:59:55,390
access in two ways you can call a

00:59:50,680 --> 01:00:01,749
free-standing function from the GMP y

00:59:55,390 --> 01:00:08,799
module so I don't know you want to find

01:00:01,749 --> 01:00:13,089
the lowest set bit of a number you can

01:00:08,799 --> 01:00:18,549
import the MP Y GM py dot I forget how

01:00:13,089 --> 01:00:21,519
its fellow bit of X and it says three

01:00:18,549 --> 01:00:24,630
meaning there's a three zeros and then

01:00:21,519 --> 01:00:32,579
there's a one when you go right left or

01:00:24,630 --> 01:00:38,140
you can build a GM py and PZ instance so

01:00:32,579 --> 01:00:42,400
y equal GM py and PZ of X and then that

01:00:38,140 --> 01:00:44,829
one has methods like love it though you

01:00:42,400 --> 01:00:47,019
can access it by calling the methods

01:00:44,829 --> 01:00:52,200
there I couldn't decide what was more

01:00:47,019 --> 01:00:54,849
convenient I in a unusual accessor of

01:00:52,200 --> 01:00:58,180
humility and not normally more prone to

01:00:54,849 --> 01:01:00,579
the other to err on the other side I

01:00:58,180 --> 01:01:03,940
decided I was not worthy to decide

01:01:00,579 --> 01:01:06,279
whether to have staff presented as

01:01:03,940 --> 01:01:08,349
methods of instances which required to

01:01:06,279 --> 01:01:10,359
explicitly construct the instance and

01:01:08,349 --> 01:01:13,900
then call the method renette or

01:01:10,359 --> 01:01:18,160
freestanding function on on the module

01:01:13,900 --> 01:01:20,619
so in GMP why to almost everything

01:01:18,160 --> 01:01:22,479
except a few were specifically where we

01:01:20,619 --> 01:01:25,329
identified we don't want to tie them to

01:01:22,479 --> 01:01:28,109
an instance is instance method send a

01:01:25,329 --> 01:01:31,109
free-standing functions have gone away

01:01:28,109 --> 01:01:31,109
posturing

01:01:31,870 --> 01:01:39,380
we would you care to comment on why on

01:01:35,720 --> 01:01:45,200
the way python spells the same function

01:01:39,380 --> 01:01:55,150
two different ways open and file it

01:01:45,200 --> 01:02:07,760
seemed a good idea at the time hmm nope

01:01:55,150 --> 01:02:10,010
eruptive I'm going to throw it so you

01:02:07,760 --> 01:02:12,140
said you didn't want to mention any

01:02:10,010 --> 01:02:14,390
real-world examples because you didn't

01:02:12,140 --> 01:02:16,940
want to make enemies but do you have any

01:02:14,390 --> 01:02:19,220
real world example is a really good API

01:02:16,940 --> 01:02:21,440
design that you find out oh my oh this

01:02:19,220 --> 01:02:28,610
is nice that you want to make any

01:02:21,440 --> 01:02:31,610
friends maybe it's because I have worked

01:02:28,610 --> 01:02:35,270
with it as opposed to inside it so I

01:02:31,610 --> 01:02:39,440
have the outside view but I really think

01:02:35,270 --> 01:02:42,230
that the vast majority of the subsystems

01:02:39,440 --> 01:02:44,630
in Google App Engine the Python side of

01:02:42,230 --> 01:02:49,600
it I'm not really familiar with the Java

01:02:44,630 --> 01:02:49,600
side a really well designed I like to

01:02:50,710 --> 01:02:58,790
use those and maybe implement if if the

01:02:54,170 --> 01:03:02,270
actual underlying server is slightly

01:02:58,790 --> 01:03:04,580
different I think that's that that's a

01:03:02,270 --> 01:03:06,380
good symptom of what a night when an API

01:03:04,580 --> 01:03:08,570
is designed really well is like I'd like

01:03:06,380 --> 01:03:10,760
to use the safety I even though I don't

01:03:08,570 --> 01:03:13,790
care about the implementation in this

01:03:10,760 --> 01:03:17,540
case but hey i canna implement so this

01:03:13,790 --> 01:03:20,570
is a simple way to send mail or react

01:03:17,540 --> 01:03:23,000
upon receiving mail for any web server

01:03:20,570 --> 01:03:26,000
and of course your web server is

01:03:23,000 --> 01:03:28,430
implemented on top of some other starpha

01:03:26,000 --> 01:03:31,990
but you'd still like to program to to

01:03:28,430 --> 01:03:35,030
that I think that's a good indication of

01:03:31,990 --> 01:03:38,000
whether it fits your brain but there is

01:03:35,030 --> 01:03:40,360
some subjectivity to it because like

01:03:38,000 --> 01:03:43,340
some people get various like they can't

01:03:40,360 --> 01:03:45,890
we eventually ended up writing for

01:03:43,340 --> 01:03:48,380
for example some old ways that were

01:03:45,890 --> 01:03:52,520
socket base you can actually open a

01:03:48,380 --> 01:03:54,620
socket in App Engine it's a bit sandbox

01:03:52,520 --> 01:03:57,950
do you realize that but what you can do

01:03:54,620 --> 01:04:03,170
is open a URL yet we had to reimplement

01:03:57,950 --> 01:04:06,500
the simple open a URL idea so that it

01:04:03,170 --> 01:04:09,500
looked more like the old Python socket

01:04:06,500 --> 01:04:12,890
based ways of doing it simply because

01:04:09,500 --> 01:04:15,890
people were used to that but I think so

01:04:12,890 --> 01:04:18,110
there is multiple ways to visit a URL

01:04:15,890 --> 01:04:22,070
but i think the native con is the

01:04:18,110 --> 01:04:30,670
well-designed what where can we buy that

01:04:22,070 --> 01:04:35,450
t-shirt ah you should come to Pike on us

01:04:30,670 --> 01:04:37,880
every year at PyCon us sir next year it

01:04:35,450 --> 01:04:41,030
will be in Santa Clara California so I'm

01:04:37,880 --> 01:04:46,910
supposed to help organize it we have

01:04:41,030 --> 01:04:49,940
this vendor cold fine threads or

01:04:46,910 --> 01:04:51,800
something like that I think you can

01:04:49,940 --> 01:04:57,050
probably find them online anyway is God

01:04:51,800 --> 01:05:01,100
this lot of great stuff Python branded

01:04:57,050 --> 01:05:04,190
he's got psf permission I keep trying to

01:05:01,100 --> 01:05:08,210
tell the guy it's a family-run firm it's

01:05:04,190 --> 01:05:11,450
a father mother one daughter who like

01:05:08,210 --> 01:05:16,150
work out the thing you should come to

01:05:11,450 --> 01:05:19,160
your Python you should elf it's a small

01:05:16,150 --> 01:05:21,140
American firm it's a big expense for

01:05:19,160 --> 01:05:25,400
them they're a bit afraid so you come to

01:05:21,140 --> 01:05:27,920
pike on us next year i'm in santa clara

01:05:25,400 --> 01:05:30,290
and tell them i agree it's it's awesome

01:05:27,920 --> 01:05:32,870
staff that's why i own a lot and where

01:05:30,290 --> 01:05:35,240
it off unfortunately we don't have more

01:05:32,870 --> 01:05:38,120
time for questions so it's time for the

01:05:35,240 --> 01:05:40,720
coffee break I can get out from both

01:05:38,120 --> 01:05:42,780
exits and follow guidance

01:05:40,720 --> 01:05:42,780

YouTube URL: https://www.youtube.com/watch?v=LsfrMjcIudA


