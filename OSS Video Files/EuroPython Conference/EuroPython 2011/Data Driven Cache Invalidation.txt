Title: Data Driven Cache Invalidation
Publication date: 2015-04-19
Playlist: EuroPython 2011
Description: 
	[EuroPython 2011] Magnus Hagander - 23 June 2011 in "Track Ravioli"
Captions: 
	00:00:07,430 --> 00:00:11,250
thank you well I'll tell you the

00:00:10,080 --> 00:00:12,420
advantage of this room is there's

00:00:11,250 --> 00:00:13,860
actually air here

00:00:12,420 --> 00:00:15,900
unlike down with Raymond in the

00:00:13,860 --> 00:00:17,610
spaghetti room but I'm glad to see a

00:00:15,900 --> 00:00:19,320
number of you at least made it up here

00:00:17,610 --> 00:00:21,230
I recognize at least a couple of you who

00:00:19,320 --> 00:00:24,599
were in his previous session down there

00:00:21,230 --> 00:00:26,310
so my name is magnus highlander i work

00:00:24,599 --> 00:00:28,980
for a company called red pill in pro

00:00:26,310 --> 00:00:31,619
we're a open source consultancy company

00:00:28,980 --> 00:00:34,949
up in the Nordic region focused mainly

00:00:31,619 --> 00:00:37,469
in Sweden Norway and Denmark my focus

00:00:34,949 --> 00:00:40,769
area is the PostgreSQL database engine

00:00:37,469 --> 00:00:43,559
but I also do a bunch of development

00:00:40,769 --> 00:00:45,059
work and some of it in Python which is

00:00:43,559 --> 00:00:46,530
sort of why I'm here we have other

00:00:45,059 --> 00:00:49,170
people who do a lot more Python than I

00:00:46,530 --> 00:00:51,269
do so I'm going to talk today about data

00:00:49,170 --> 00:00:53,190
driven cache invalidation which

00:00:51,269 --> 00:00:58,649
obviously everybody knows exactly what I

00:00:53,190 --> 00:01:01,949
mean right sort of a quick recap on what

00:00:58,649 --> 00:01:03,510
we're going to get into here we'll like

00:01:01,949 --> 00:01:05,820
to build advanced websites right that

00:01:03,510 --> 00:01:07,890
sort of who builds non web applications

00:01:05,820 --> 00:01:10,110
these days and we want them to become

00:01:07,890 --> 00:01:14,220
popular and hopefully you know they do

00:01:10,110 --> 00:01:15,840
become popular and then they crash and

00:01:14,220 --> 00:01:17,880
then we add some level of caching to

00:01:15,840 --> 00:01:19,590
make them not crash and then we get a

00:01:17,880 --> 00:01:23,520
whole bunch of other issues that we need

00:01:19,590 --> 00:01:25,680
to deal with around that and this is a

00:01:23,520 --> 00:01:27,390
way to deal with these issues that will

00:01:25,680 --> 00:01:28,890
show up when we add the caching because

00:01:27,390 --> 00:01:30,630
caching will make it go fast and make it

00:01:28,890 --> 00:01:33,240
not crash and make the users complain

00:01:30,630 --> 00:01:36,450
that they get the wrong data that's sort

00:01:33,240 --> 00:01:38,430
of the basis of it and well it used to

00:01:36,450 --> 00:01:40,950
be that you know websites came down from

00:01:38,430 --> 00:01:42,570
the Slashdot effect I don't know if

00:01:40,950 --> 00:01:44,009
anyone in here has experienced it I'm

00:01:42,570 --> 00:01:46,170
not sure even the Slashdot effect counts

00:01:44,009 --> 00:01:48,719
today / that doesn't Drive that much

00:01:46,170 --> 00:01:52,320
traffic featured on like national TV in

00:01:48,719 --> 00:01:55,109
the u.s. drives traffic like spiky

00:01:52,320 --> 00:01:56,880
traffic with you know another 100

00:01:55,109 --> 00:01:58,619
million users within half an hour things

00:01:56,880 --> 00:02:02,119
like that that's the kind of deals that

00:01:58,619 --> 00:02:02,119
we actually have to take care of today

00:02:02,270 --> 00:02:06,750
so when we're talking about the caching

00:02:04,560 --> 00:02:08,580
we're already caching at a lot of layers

00:02:06,750 --> 00:02:10,230
you're probably caching in a lot of

00:02:08,580 --> 00:02:11,730
these layers already in your application

00:02:10,230 --> 00:02:14,190
and it's basically from bottom down

00:02:11,730 --> 00:02:16,220
where if you're using a database server

00:02:14,190 --> 00:02:18,290
whichever one you're you

00:02:16,220 --> 00:02:19,430
you have a cash in it at least one you

00:02:18,290 --> 00:02:22,490
have the buffer cash that's in the

00:02:19,430 --> 00:02:24,590
database some databases particularly if

00:02:22,490 --> 00:02:26,150
you're deploying on MySQL you may have a

00:02:24,590 --> 00:02:28,160
query cache that also runs in the

00:02:26,150 --> 00:02:29,360
database and then you have some sort of

00:02:28,160 --> 00:02:30,980
a cache in your application server

00:02:29,360 --> 00:02:33,470
whichever application server you're

00:02:30,980 --> 00:02:36,170
using and then you might be using an

00:02:33,470 --> 00:02:37,070
HTTP cache ahead of that and then you're

00:02:36,170 --> 00:02:38,990
caching in the browser

00:02:37,070 --> 00:02:42,050
so we're basically about all these

00:02:38,990 --> 00:02:44,360
layers of caching and the closer to the

00:02:42,050 --> 00:02:46,010
client that we catch the more efficient

00:02:44,360 --> 00:02:47,840
the caching is right you know if we can

00:02:46,010 --> 00:02:50,120
just keep the cache on the client they

00:02:47,840 --> 00:02:51,760
never have to talk to us at all that's

00:02:50,120 --> 00:02:55,310
very good for the bandwidth bill

00:02:51,760 --> 00:02:57,200
unfortunately the further away you go

00:02:55,310 --> 00:03:00,230
the harder it is to actually control

00:02:57,200 --> 00:03:01,970
when things leave the cache and that is

00:03:00,230 --> 00:03:03,290
the problem if you cache every page you

00:03:01,970 --> 00:03:06,250
can catch the front page of your website

00:03:03,290 --> 00:03:08,990
in the browser for a month you'll get

00:03:06,250 --> 00:03:10,400
good dealings with the load but you know

00:03:08,990 --> 00:03:12,440
if you're posting any kind of updated

00:03:10,400 --> 00:03:14,080
information your users are really not

00:03:12,440 --> 00:03:16,790
gonna like that

00:03:14,080 --> 00:03:19,940
so a typical architecture of your web

00:03:16,790 --> 00:03:21,170
app sort of drastically simplified is

00:03:19,940 --> 00:03:23,510
something like this we have a whole

00:03:21,170 --> 00:03:25,700
number of clients out on the Internet

00:03:23,510 --> 00:03:26,870
they'll be connecting to your cache your

00:03:25,700 --> 00:03:28,760
cache will be connecting to your

00:03:26,870 --> 00:03:30,530
application server whichever it happens

00:03:28,760 --> 00:03:33,200
to be which will at some point hit your

00:03:30,530 --> 00:03:35,780
database most applications are one way

00:03:33,200 --> 00:03:36,880
or another database driven the way

00:03:35,780 --> 00:03:38,959
things are today

00:03:36,880 --> 00:03:41,030
and what we're trying to make it all

00:03:38,959 --> 00:03:42,950
happen is you know the typical I'm sure

00:03:41,030 --> 00:03:44,570
you already know this you have a number

00:03:42,950 --> 00:03:47,150
of yet requests that is trying to get

00:03:44,570 --> 00:03:48,650
what's basically the same object you

00:03:47,150 --> 00:03:51,440
want to minimize that down to a single

00:03:48,650 --> 00:03:54,170
request in your application server or at

00:03:51,440 --> 00:03:56,150
least very very much fewer requests in

00:03:54,170 --> 00:03:58,280
your application server which will then

00:03:56,150 --> 00:04:00,260
result in one or usually more than one

00:03:58,280 --> 00:04:03,380
but at least a limited number of queries

00:04:00,260 --> 00:04:05,870
on your database server so you so push

00:04:03,380 --> 00:04:08,480
the the stopping point for the large

00:04:05,870 --> 00:04:10,519
number of requests as far away from the

00:04:08,480 --> 00:04:12,110
hard to scale part of your system as

00:04:10,519 --> 00:04:17,660
possible and the hard to scale part is

00:04:12,110 --> 00:04:18,890
the database so in this presentation I

00:04:17,660 --> 00:04:20,660
mean so how many people in here

00:04:18,890 --> 00:04:24,530
regularly or at least sometimes give

00:04:20,660 --> 00:04:26,390
presentations on any kind of topics okay

00:04:24,530 --> 00:04:28,460
so how many know the golden rule about

00:04:26,390 --> 00:04:30,510
demos in presentations

00:04:28,460 --> 00:04:32,160
this is a rule that says you know you

00:04:30,510 --> 00:04:32,700
should never do a demo in a presentation

00:04:32,160 --> 00:04:34,620
right

00:04:32,700 --> 00:04:36,660
another subscribe because think we're

00:04:34,620 --> 00:04:37,800
doing about five or six demos so

00:04:36,660 --> 00:04:40,910
hopefully at least one of them will work

00:04:37,800 --> 00:04:43,260
so please bear with me if the demos

00:04:40,910 --> 00:04:45,240
holds at some point but eventually I'll

00:04:43,260 --> 00:04:48,030
probably get it through I'm gonna do a

00:04:45,240 --> 00:04:50,670
very very simple application demo for

00:04:48,030 --> 00:04:52,620
this we're gonna do it extremely simple

00:04:50,670 --> 00:04:54,540
block we all know what that works we'll

00:04:52,620 --> 00:04:55,950
how it is and you know we're all really

00:04:54,540 --> 00:04:57,330
popular people so we're gonna be talking

00:04:55,950 --> 00:04:59,580
about least a couple of million hits a

00:04:57,330 --> 00:05:04,110
minute right we post interesting things

00:04:59,580 --> 00:05:06,780
on our blogs so intro to the application

00:05:04,110 --> 00:05:09,450
I'm a Postgres guy I'm going to use

00:05:06,780 --> 00:05:11,610
Postgres you can use in theory any

00:05:09,450 --> 00:05:13,890
database with it as long as the database

00:05:11,610 --> 00:05:16,350
has server programmability into it you

00:05:13,890 --> 00:05:19,770
can do this out of Oracle you can do it

00:05:16,350 --> 00:05:21,540
out of sequel server you can probably

00:05:19,770 --> 00:05:24,780
figure out a way to do it in MySQL as

00:05:21,540 --> 00:05:26,520
well in the later releases I'm gonna use

00:05:24,780 --> 00:05:28,110
Django as the framework which is

00:05:26,520 --> 00:05:31,200
probably no big surprise to you guys

00:05:28,110 --> 00:05:32,550
here it will work with any framework

00:05:31,200 --> 00:05:35,520
I've given this presentation and a lot

00:05:32,550 --> 00:05:37,170
of non Python events it'll work with any

00:05:35,520 --> 00:05:38,970
one of them I choose Django because well

00:05:37,170 --> 00:05:42,200
a Django admin makes it really easy for

00:05:38,970 --> 00:05:44,760
mocap applications and the I like Python

00:05:42,200 --> 00:05:46,440
and as a cache we're gonna use varnish

00:05:44,760 --> 00:05:49,590
how many people in here know about

00:05:46,440 --> 00:05:51,120
varnish okay at least number of you the

00:05:49,590 --> 00:05:54,300
rest of you probably heard of things so

00:05:51,120 --> 00:05:57,480
you can use squid or Apache mob cache

00:05:54,300 --> 00:06:00,060
and all these look HTTP caching we're

00:05:57,480 --> 00:06:02,100
using varnish because well a it's silly

00:06:00,060 --> 00:06:04,470
fast and you know we're talking millions

00:06:02,100 --> 00:06:07,530
of hits a minute here and it's also very

00:06:04,470 --> 00:06:09,240
customizable and you can interact with

00:06:07,530 --> 00:06:13,220
it very well which is exactly what we're

00:06:09,240 --> 00:06:16,380
going to exploit to make this stuff work

00:06:13,220 --> 00:06:18,240
so like the good you know TV chef I've

00:06:16,380 --> 00:06:19,740
prepared a number of steps I'm not even

00:06:18,240 --> 00:06:21,660
gonna show those to you at all because

00:06:19,740 --> 00:06:23,850
you guys know Python already I'm gonna

00:06:21,660 --> 00:06:25,800
focus more on the database side but I've

00:06:23,850 --> 00:06:28,010
started a simple Django project called

00:06:25,800 --> 00:06:30,360
demo put an app in it called log

00:06:28,010 --> 00:06:32,400
configured to a local database server

00:06:30,360 --> 00:06:35,010
I'm running embarrassingly enough

00:06:32,400 --> 00:06:36,990
Postgres 8.4 which is a couple of years

00:06:35,010 --> 00:06:38,220
old now but it it still works for this

00:06:36,990 --> 00:06:40,710
so it's not sort of cutting edge

00:06:38,220 --> 00:06:41,780
technology I've enabled the Django admin

00:06:40,710 --> 00:06:44,660
site and given my

00:06:41,780 --> 00:06:48,680
type the application put it into the

00:06:44,660 --> 00:06:50,600
admin side as well so just to show what

00:06:48,680 --> 00:06:52,220
we have for start here I'm gonna see if

00:06:50,600 --> 00:06:55,160
I can get down to full screen mode and

00:06:52,220 --> 00:06:57,320
hopefully we have a reasonable aspect on

00:06:55,160 --> 00:06:59,450
this stuff we have a very simple model

00:06:57,320 --> 00:07:04,310
for blog posts that basically has a

00:06:59,450 --> 00:07:06,980
title dated time and contents and it

00:07:04,310 --> 00:07:08,300
looks somewhat like this that's well

00:07:06,980 --> 00:07:11,750
it's probably readable enough to you

00:07:08,300 --> 00:07:13,700
guys right it's a very simple model that

00:07:11,750 --> 00:07:15,919
basically has no functionality other

00:07:13,700 --> 00:07:16,580
than these three fields that's the only

00:07:15,919 --> 00:07:18,680
thing that's in it

00:07:16,580 --> 00:07:19,940
yes when you go in production with this

00:07:18,680 --> 00:07:21,950
blog you might want to add a couple more

00:07:19,940 --> 00:07:26,870
features to it but this will have to do

00:07:21,950 --> 00:07:28,340
for now and we put that one into the

00:07:26,870 --> 00:07:30,470
admin side synchronize the database we

00:07:28,340 --> 00:07:33,140
have all the objects and I've created

00:07:30,470 --> 00:07:36,020
two simple Django views one that is the

00:07:33,140 --> 00:07:39,590
home page and one that just lists all

00:07:36,020 --> 00:07:42,320
blog posts and one that serves up a

00:07:39,590 --> 00:07:44,270
single blog post so again let me show

00:07:42,320 --> 00:07:46,310
you the code because it's very simple it

00:07:44,270 --> 00:07:47,990
gets quick to show it's just you know

00:07:46,310 --> 00:07:49,729
the typical let's get all the post

00:07:47,990 --> 00:07:53,120
objects ordered by daytime render them

00:07:49,729 --> 00:07:54,979
off route dot HTML and then for a

00:07:53,120 --> 00:07:58,400
specific post just you know get the post

00:07:54,979 --> 00:08:00,350
and render it with the template and a

00:07:58,400 --> 00:08:01,940
quick example of how the post template

00:08:00,350 --> 00:08:04,190
looks you will notice there is no fancy

00:08:01,940 --> 00:08:05,830
HTML CSS or any stuff like that I'll

00:08:04,190 --> 00:08:08,180
leave that up to you guys to add later

00:08:05,830 --> 00:08:12,340
again I'm a database guy I don't do this

00:08:08,180 --> 00:08:12,340
sort of visual stuff I work with data I

00:08:12,729 --> 00:08:18,260
can try to unlike summize the window

00:08:15,289 --> 00:08:26,470
because that is slightly too unlike some

00:08:18,260 --> 00:08:26,470
I say yes screen ups something like that

00:08:27,430 --> 00:08:32,270
so anyway it's the simple part we have

00:08:30,020 --> 00:08:33,919
the post title we have the post title

00:08:32,270 --> 00:08:39,440
again the contents and then I've just

00:08:33,919 --> 00:08:41,450
added to all of these they're in with

00:08:39,440 --> 00:08:43,610
the exact timestamp when this page is

00:08:41,450 --> 00:08:46,820
rendered that is a very good way to see

00:08:43,610 --> 00:08:49,790
if your cache is working so we've added

00:08:46,820 --> 00:08:51,470
those not bothered with any sort of you

00:08:49,790 --> 00:08:53,089
know the fancy URLs with part of the

00:08:51,470 --> 00:08:55,600
title in it we're just using the numeric

00:08:53,089 --> 00:08:57,940
ID that's the simple way

00:08:55,600 --> 00:09:01,029
this thing done I'm gonna stay in this

00:08:57,940 --> 00:09:02,350
motor yes so actually how many people in

00:09:01,029 --> 00:09:05,709
here have been using Django at some

00:09:02,350 --> 00:09:08,040
point okay good so you're fairly

00:09:05,709 --> 00:09:10,480
familiar with this you know we have the

00:09:08,040 --> 00:09:16,329
managed up I run server which will run a

00:09:10,480 --> 00:09:19,240
very simple local web server we run this

00:09:16,329 --> 00:09:21,130
it will eventually bring up now

00:09:19,240 --> 00:09:23,800
interesting thing if someone knows why

00:09:21,130 --> 00:09:26,380
this tends to freeze every now and then

00:09:23,800 --> 00:09:29,079
when I run it locally just completely

00:09:26,380 --> 00:09:37,589
freeze the require to kill - 9 so if you

00:09:29,079 --> 00:09:37,589
know why let me know yep probably but

00:09:39,839 --> 00:09:43,990
usually I just restarted because I mean

00:09:42,370 --> 00:09:46,870
it's the local if it wasn't a server I'd

00:09:43,990 --> 00:09:48,880
be worried though I probably wouldn't be

00:09:46,870 --> 00:09:52,269
using the this manager pie thing on a

00:09:48,880 --> 00:09:55,170
server so here's what the blog looks

00:09:52,269 --> 00:10:03,490
like I put one post into it marvel at

00:09:55,170 --> 00:10:06,279
marvel at the screen size marvel at the

00:10:03,490 --> 00:10:09,459
fantastic design we have this one blog

00:10:06,279 --> 00:10:11,680
if i refresh this thing you'll see in in

00:10:09,459 --> 00:10:13,509
the window actually well it goes sort of

00:10:11,680 --> 00:10:16,689
off the side there but every time we hit

00:10:13,509 --> 00:10:19,839
this one we get a request here that hits

00:10:16,689 --> 00:10:21,279
the django application we know that this

00:10:19,839 --> 00:10:23,050
generates one query back into the

00:10:21,279 --> 00:10:24,880
database i could enable query logging on

00:10:23,050 --> 00:10:26,829
the database and show that but i'm not

00:10:24,880 --> 00:10:28,050
gonna bother doing that just have to

00:10:26,829 --> 00:10:30,160
take my word for it

00:10:28,050 --> 00:10:33,370
and of course if I click this blog post

00:10:30,160 --> 00:10:37,000
I get the details and again I get this

00:10:33,370 --> 00:10:40,870
generated app which updates step by step

00:10:37,000 --> 00:10:43,509
so that's the basic functionality of

00:10:40,870 --> 00:10:44,769
this application as I said probably

00:10:43,509 --> 00:10:46,839
you'll want slightly more advanced

00:10:44,769 --> 00:10:49,689
applications in production but it'll do

00:10:46,839 --> 00:10:51,699
for for showing this so we're in the

00:10:49,689 --> 00:10:54,790
position here that every time we do this

00:10:51,699 --> 00:10:57,880
we generate a run in of the Python code

00:10:54,790 --> 00:10:59,350
which is comparatively slow now for

00:10:57,880 --> 00:11:00,850
rendering this it's not that slow you

00:10:59,350 --> 00:11:02,860
can probably render a fair number of

00:11:00,850 --> 00:11:05,680
hits per second we're also throwing in

00:11:02,860 --> 00:11:08,250
query at the database every time someone

00:11:05,680 --> 00:11:08,250
comes to our block

00:11:08,569 --> 00:11:12,859
so what we're going to do to avoid this

00:11:10,189 --> 00:11:15,109
to keep the load down on our server is

00:11:12,859 --> 00:11:16,249
we're going to add varnish to the mix it

00:11:15,109 --> 00:11:18,739
turns out it's actually really really

00:11:16,249 --> 00:11:20,089
easy to add varnish to a very simple

00:11:18,739 --> 00:11:21,979
website and then of course it becomes

00:11:20,089 --> 00:11:24,619
progressively more complex as your

00:11:21,979 --> 00:11:26,389
website and processing complexity

00:11:24,619 --> 00:11:27,979
I'm going to do very simple basic

00:11:26,389 --> 00:11:30,349
default varnish install it's going to

00:11:27,979 --> 00:11:32,059
take any request that comes into the

00:11:30,349 --> 00:11:34,639
varnish which is going to listen on port

00:11:32,059 --> 00:11:37,909
8000 and one and just relay them back to

00:11:34,639 --> 00:11:40,549
port 8000 and it's gonna cache all pages

00:11:37,909 --> 00:11:42,470
for one hour now the biggest problem

00:11:40,549 --> 00:11:44,809
around caching is usually dealing with

00:11:42,470 --> 00:11:46,279
the cookies in that you know if you have

00:11:44,809 --> 00:11:47,989
a session cookie you actually don't want

00:11:46,279 --> 00:11:49,459
the page to look the same for every user

00:11:47,989 --> 00:11:51,879
I'm just going to ignore that for now

00:11:49,459 --> 00:11:53,779
because this is not a varnish session

00:11:51,879 --> 00:11:56,599
you can learn that when you go to a

00:11:53,779 --> 00:11:57,709
presentation about varnish so we've got

00:11:56,599 --> 00:12:00,889
an example here is the full

00:11:57,709 --> 00:12:02,029
configuration for the varnish this is

00:12:00,889 --> 00:12:04,669
for those of you who haven't actually

00:12:02,029 --> 00:12:06,649
used varnish this is the VCL varnish

00:12:04,669 --> 00:12:09,199
configuration language varnish is

00:12:06,649 --> 00:12:10,729
basically configured by you write a

00:12:09,199 --> 00:12:12,559
small program using a domain-specific

00:12:10,729 --> 00:12:15,289
language where you define a number of

00:12:12,559 --> 00:12:16,849
functions so in this case I just first

00:12:15,289 --> 00:12:18,499
have a definition that says my default

00:12:16,849 --> 00:12:20,449
back end which is where varnish is going

00:12:18,499 --> 00:12:23,839
to relay the data it's going to run on

00:12:20,449 --> 00:12:27,049
localhost port 8000 and the subroutine

00:12:23,839 --> 00:12:29,509
VCL recive will be executed every time a

00:12:27,049 --> 00:12:30,709
request comes into varnish and i'm just

00:12:29,509 --> 00:12:33,229
going to remove the cookies from the

00:12:30,709 --> 00:12:37,309
request if there are any thus ignoring

00:12:33,229 --> 00:12:39,319
the problem and VCL fetch is executed

00:12:37,309 --> 00:12:41,419
every time varnish gets something from

00:12:39,319 --> 00:12:43,189
our django application at which point

00:12:41,419 --> 00:12:45,409
i'm just saying you know set the TTL to

00:12:43,189 --> 00:12:48,919
one hour so we'll be cashing these

00:12:45,409 --> 00:12:50,629
objects one hour and I've got a very

00:12:48,919 --> 00:12:52,249
simple I'll just show it to you know

00:12:50,629 --> 00:12:53,929
what it looks like the start script for

00:12:52,249 --> 00:12:58,339
varnish it's nothing magic we say start

00:12:53,929 --> 00:13:00,289
varnish listen on this port for the

00:12:58,339 --> 00:13:03,409
moment I don't remember what - FS so

00:13:00,289 --> 00:13:05,419
we'll just ignore that - T is we want to

00:13:03,409 --> 00:13:07,129
tell that administration interface so we

00:13:05,419 --> 00:13:08,929
can just tell it to the Machine and give

00:13:07,129 --> 00:13:11,389
it to status informations running online

00:13:08,929 --> 00:13:13,429
at 60 80 - we're using a memory

00:13:11,389 --> 00:13:15,589
allocation back-end with a 32 megabyte

00:13:13,429 --> 00:13:18,589
cache that'll be enough for this trivial

00:13:15,589 --> 00:13:21,050
blog and I'm just directing it off into

00:13:18,589 --> 00:13:26,330
a temporary disk

00:13:21,050 --> 00:13:28,100
okay so let me just oh I okay for the

00:13:26,330 --> 00:13:29,630
sake of demo I'm stopping varnish and

00:13:28,100 --> 00:13:31,580
now restarting varnish I forgot to stop

00:13:29,630 --> 00:13:32,839
it from when I tested this demo okay

00:13:31,580 --> 00:13:34,550
very simple we have Arnie's running

00:13:32,839 --> 00:13:37,310
it'll tell you there it's got it

00:13:34,550 --> 00:13:39,019
Mac size 32 megabytes I can move it up

00:13:37,310 --> 00:13:42,980
there even the information is not all

00:13:39,019 --> 00:13:45,560
that interesting so if I now bring up

00:13:42,980 --> 00:13:48,589
the web again and I have my blog here on

00:13:45,560 --> 00:13:52,970
port 8000 and one as you can perhaps see

00:13:48,589 --> 00:13:55,279
up there and if i refresh here it did

00:13:52,970 --> 00:13:56,750
reload I have no idea really where it

00:13:55,279 --> 00:13:57,860
picks the time zone from because it

00:13:56,750 --> 00:14:01,089
seems to picking a different one every

00:13:57,860 --> 00:14:03,649
time I haven't bothered investigating I

00:14:01,089 --> 00:14:05,990
or it may simply be that I put the wrong

00:14:03,649 --> 00:14:07,339
escape codes in the template the point

00:14:05,990 --> 00:14:09,290
being if i refresh this now you'll

00:14:07,339 --> 00:14:12,920
notice that the generated act does not

00:14:09,290 --> 00:14:17,810
change and if I bring up my Jango

00:14:12,920 --> 00:14:24,709
console here in there you'll notice we

00:14:17,810 --> 00:14:27,860
had this one request here at 647 and I

00:14:24,709 --> 00:14:29,720
refresh again here a couple of times and

00:14:27,860 --> 00:14:32,779
we have exactly nothing happening in the

00:14:29,720 --> 00:14:35,930
Jag now this is all good the problem

00:14:32,779 --> 00:14:37,190
around this obviously is let me go into

00:14:35,930 --> 00:14:38,990
the admin interface and realize that

00:14:37,190 --> 00:14:42,350
this post is actually not test it's just

00:14:38,990 --> 00:14:45,140
to save it and we go back to the blog

00:14:42,350 --> 00:14:47,600
and it's still test that's your

00:14:45,140 --> 00:14:50,750
classical caching problem right now I

00:14:47,600 --> 00:14:52,100
cast it for an hour I don't have that

00:14:50,750 --> 00:14:53,450
much time in this talk so I'm not going

00:14:52,100 --> 00:14:54,800
to show you but you will have to trust

00:14:53,450 --> 00:14:57,920
me that varnish will actually stop

00:14:54,800 --> 00:14:59,660
caching it after one hour for the for

00:14:57,920 --> 00:15:02,120
the sake of this talk that's infinite

00:14:59,660 --> 00:15:05,690
right and really infinite caching is the

00:15:02,120 --> 00:15:08,899
best assuming we can somehow change our

00:15:05,690 --> 00:15:10,790
mind and that's what we're going to try

00:15:08,899 --> 00:15:12,949
to do here the problem is general we

00:15:10,790 --> 00:15:15,050
have that summary content will rapidly

00:15:12,949 --> 00:15:17,089
go stale if you look at your log for

00:15:15,050 --> 00:15:18,709
example the top blog post might go stale

00:15:17,089 --> 00:15:22,310
after 30 seconds when you find your

00:15:18,709 --> 00:15:24,470
spelling error other content is very

00:15:22,310 --> 00:15:26,149
very long-lived such as well first of

00:15:24,470 --> 00:15:27,589
all all the other blog posts on your

00:15:26,149 --> 00:15:29,990
front page that you're not going to edit

00:15:27,589 --> 00:15:31,520
anymore and also the first blog post

00:15:29,990 --> 00:15:33,600
once you've fixed the spelling error

00:15:31,520 --> 00:15:34,949
unless you find another one

00:15:33,600 --> 00:15:37,529
big problem there is you don't actually

00:15:34,949 --> 00:15:40,970
know ahead of time how long this thing

00:15:37,529 --> 00:15:43,079
is cashable so how do we do that well we

00:15:40,970 --> 00:15:44,880
generally end up caching things a very

00:15:43,079 --> 00:15:47,100
short time just to be on the safe side

00:15:44,880 --> 00:15:48,480
because when the people from if it's not

00:15:47,100 --> 00:15:49,920
our simple blower but our actual

00:15:48,480 --> 00:15:52,319
business application when the people

00:15:49,920 --> 00:15:53,880
from the whatever department handles

00:15:52,319 --> 00:15:55,230
your content makes an update and it

00:15:53,880 --> 00:15:57,360
doesn't change on the website they will

00:15:55,230 --> 00:15:59,339
call you and say the website doesn't

00:15:57,360 --> 00:16:00,660
work they will not wait even if you told

00:15:59,339 --> 00:16:02,910
them you know wait five minutes they

00:16:00,660 --> 00:16:05,130
will never wait five minutes it just

00:16:02,910 --> 00:16:06,779
doesn't work that way this means that

00:16:05,130 --> 00:16:09,720
any kind of cache control that you're

00:16:06,779 --> 00:16:12,449
setting on a per URL basis or even on a

00:16:09,720 --> 00:16:14,490
per request basis are going to be

00:16:12,449 --> 00:16:16,110
suboptimal because by the time you're

00:16:14,490 --> 00:16:17,850
serving up this blog post or the front

00:16:16,110 --> 00:16:20,040
page of your website you don't actually

00:16:17,850 --> 00:16:22,410
know how long you can cache this

00:16:20,040 --> 00:16:25,470
information you can give it a reasonable

00:16:22,410 --> 00:16:26,370
guess but you don't know and the usual

00:16:25,470 --> 00:16:29,399
thing you have to do is you have to

00:16:26,370 --> 00:16:33,810
decrease the caching time which then

00:16:29,399 --> 00:16:35,870
kills your performance so the way to

00:16:33,810 --> 00:16:38,639
deal with this is on demand invalidation

00:16:35,870 --> 00:16:41,160
you cache objects longer than you can

00:16:38,639 --> 00:16:44,100
generally and then you make it forced

00:16:41,160 --> 00:16:46,260
expire from the cache now we're pretty

00:16:44,100 --> 00:16:48,029
used to doing this if well if it's in

00:16:46,260 --> 00:16:49,740
the database it does it automatically if

00:16:48,029 --> 00:16:51,870
we're using a caching framework in our

00:16:49,740 --> 00:16:55,170
application server we have good

00:16:51,870 --> 00:16:57,149
frameworks for doing this but usually

00:16:55,170 --> 00:16:59,670
when you're deploying an HTTP cache most

00:16:57,149 --> 00:17:02,370
people don't do this for one thing if

00:16:59,670 --> 00:17:06,230
you're using older HTTP caches like

00:17:02,370 --> 00:17:09,480
squid the way to do this is basically

00:17:06,230 --> 00:17:12,689
filled with pain there's no really good

00:17:09,480 --> 00:17:14,909
way of doing it but it is doable now the

00:17:12,689 --> 00:17:16,439
idea being when an object we're used to

00:17:14,909 --> 00:17:17,669
dealing with objects particularly when

00:17:16,439 --> 00:17:19,829
we're talking django apps or whatever

00:17:17,669 --> 00:17:21,449
when it's modifying the application we

00:17:19,829 --> 00:17:24,059
want to expire it from the HTTP cache

00:17:21,449 --> 00:17:26,579
and when a dependent object is modified

00:17:24,059 --> 00:17:29,429
with one it expire it as well so we sort

00:17:26,579 --> 00:17:32,549
want to track that whole relationship

00:17:29,429 --> 00:17:33,990
through and that's actually pretty easy

00:17:32,549 --> 00:17:35,549
to do in varnish and that's a very

00:17:33,990 --> 00:17:38,220
standard thing we just add something

00:17:35,549 --> 00:17:40,740
called the purchase request which we can

00:17:38,220 --> 00:17:43,080
generate in our application server in

00:17:40,740 --> 00:17:45,929
Django we can use the signal that gets

00:17:43,080 --> 00:17:46,950
fired whenever we save a model and we

00:17:45,929 --> 00:17:48,930
can just have that

00:17:46,950 --> 00:17:52,860
tell varnish hey I modified this object

00:17:48,930 --> 00:17:55,830
go away and they'll work just fine and

00:17:52,860 --> 00:17:59,610
that's a reasonably common deployment

00:17:55,830 --> 00:18:03,470
pattern and it has one major problem in

00:17:59,610 --> 00:18:03,470
it then one spot the major problem and

00:18:07,310 --> 00:18:20,310
those are the minor problems I would say

00:18:10,440 --> 00:18:21,900
yeah yes that is pretty much it your

00:18:20,310 --> 00:18:23,190
reality may look like this particularly

00:18:21,900 --> 00:18:25,350
it looks like this when you're building

00:18:23,190 --> 00:18:26,850
this project right and it may even look

00:18:25,350 --> 00:18:28,230
like this you know 15 minutes after you

00:18:26,850 --> 00:18:30,060
deployed it but you're eventually going

00:18:28,230 --> 00:18:31,770
to end up in a situation like this you

00:18:30,060 --> 00:18:34,800
don't have just one application towards

00:18:31,770 --> 00:18:36,680
your database you will have multiple

00:18:34,800 --> 00:18:39,360
applications talking to your database

00:18:36,680 --> 00:18:41,100
whether you like it or not the

00:18:39,360 --> 00:18:43,680
application may just be you know your

00:18:41,100 --> 00:18:45,230
admit DBA administrator using PG admin

00:18:43,680 --> 00:18:47,340
talking directly to the database or

00:18:45,230 --> 00:18:51,810
eventually it's going to be somebody

00:18:47,340 --> 00:18:54,270
else also talking to your tables so the

00:18:51,810 --> 00:18:56,490
problem here is yeah we will only know

00:18:54,270 --> 00:18:59,340
about the events that happen in our own

00:18:56,490 --> 00:19:01,440
application we cannot react to things

00:18:59,340 --> 00:19:04,680
coming in from elsewhere now yes for our

00:19:01,440 --> 00:19:06,360
blog probably that's fine but for most

00:19:04,680 --> 00:19:08,160
of your business applications it's not

00:19:06,360 --> 00:19:10,680
even if it is fine when you start it's

00:19:08,160 --> 00:19:11,970
not going to stay fine and just as you

00:19:10,680 --> 00:19:14,970
said what we want to do here is when we

00:19:11,970 --> 00:19:16,080
move this error because if you look at

00:19:14,970 --> 00:19:17,400
the image there is actually a very

00:19:16,080 --> 00:19:19,530
central point here and that's the

00:19:17,400 --> 00:19:21,780
database the database will know when

00:19:19,530 --> 00:19:23,580
your data changed that's sort of the

00:19:21,780 --> 00:19:24,110
point of the database to keep track of

00:19:23,580 --> 00:19:27,000
that

00:19:24,110 --> 00:19:28,680
now with any kind of I was gonna say

00:19:27,000 --> 00:19:30,330
modern database but with modern in this

00:19:28,680 --> 00:19:33,510
case I guess I mean something since the

00:19:30,330 --> 00:19:35,430
early 80s or later it's capable of

00:19:33,510 --> 00:19:38,550
triggering on events happening to your

00:19:35,430 --> 00:19:41,850
data and we can exploit this to

00:19:38,550 --> 00:19:45,990
invalidate our cache based on the actual

00:19:41,850 --> 00:19:47,250
data being changed the upside of this is

00:19:45,990 --> 00:19:50,370
that we're actually going to be able to

00:19:47,250 --> 00:19:51,630
do exactly the right caching validations

00:19:50,370 --> 00:19:54,540
we know exactly when the data is

00:19:51,630 --> 00:19:56,010
invalidated we can in theory even do

00:19:54,540 --> 00:19:57,570
asynchronous one normally we'll do an

00:19:56,010 --> 00:19:59,340
asynchronous cache invalidation and

00:19:57,570 --> 00:20:02,000
we'll you know be up to speed within

00:19:59,340 --> 00:20:02,000
milliseconds

00:20:02,050 --> 00:20:05,200
and it doesn't matter where this change

00:20:03,730 --> 00:20:06,160
call comes from it's from your

00:20:05,200 --> 00:20:08,170
application it's from another

00:20:06,160 --> 00:20:09,520
application it's from a manual change

00:20:08,170 --> 00:20:13,770
it's from a batch job

00:20:09,520 --> 00:20:16,600
it'll just magically work I like magic

00:20:13,770 --> 00:20:18,640
the downside is that you actually need

00:20:16,600 --> 00:20:21,330
to tell your database about your URLs

00:20:18,640 --> 00:20:23,320
and that kind of breaks the abstractions

00:20:21,330 --> 00:20:25,150
because you know there is no such thing

00:20:23,320 --> 00:20:27,250
as a free lunch and that's the price

00:20:25,150 --> 00:20:28,540
that you have to pay if the database is

00:20:27,250 --> 00:20:30,010
going to expire things from your cache

00:20:28,540 --> 00:20:31,900
it has to know where they are

00:20:30,010 --> 00:20:33,760
now there are a couple of workarounds

00:20:31,900 --> 00:20:35,800
that will work depending on exactly how

00:20:33,760 --> 00:20:38,530
your system looks that you can actually

00:20:35,800 --> 00:20:41,590
get rid of that but in the general case

00:20:38,530 --> 00:20:43,120
you need to put more information in the

00:20:41,590 --> 00:20:45,760
database than you previously had and

00:20:43,120 --> 00:20:48,730
that might not conceptually actually

00:20:45,760 --> 00:20:51,700
belong in the database logic but it's

00:20:48,730 --> 00:20:56,770
doable and it's usually a price worth

00:20:51,700 --> 00:20:58,840
paying so the very simple way the method

00:20:56,770 --> 00:21:02,020
1 as I like to call it is that we simply

00:20:58,840 --> 00:21:03,730
put a trigger on our blog post table and

00:21:02,020 --> 00:21:05,650
we have this trigger send off a purge

00:21:03,730 --> 00:21:08,020
request to varnish to remove our objects

00:21:05,650 --> 00:21:10,990
pretty simple so let me show you what

00:21:08,020 --> 00:21:14,080
this code will look like will be

00:21:10,990 --> 00:21:17,800
triggered one so how many people in your

00:21:14,080 --> 00:21:19,600
are used to Postgres okay good then this

00:21:17,800 --> 00:21:23,250
is not entirely the rest of you have at

00:21:19,600 --> 00:21:25,390
least seen an SQL database I hope ok so

00:21:23,250 --> 00:21:27,160
we're going to be using two languages

00:21:25,390 --> 00:21:28,480
here there I just put the create

00:21:27,160 --> 00:21:29,950
language statements at the top of my

00:21:28,480 --> 00:21:32,440
script so I don't forget to run them

00:21:29,950 --> 00:21:35,470
when I run the demo we're gonna use PL

00:21:32,440 --> 00:21:37,120
Python and the main reason for using

00:21:35,470 --> 00:21:40,180
that is actually not that this is a

00:21:37,120 --> 00:21:42,610
Python conference it is that varnish

00:21:40,180 --> 00:21:44,140
comes with a built-in Python module that

00:21:42,610 --> 00:21:46,240
lets you expire things through a very

00:21:44,140 --> 00:21:48,970
nice API so I didn't have to write my

00:21:46,240 --> 00:21:50,770
own wrapper and we're going to use PL PG

00:21:48,970 --> 00:21:54,310
SQL which is the Postgres built-in

00:21:50,770 --> 00:21:56,710
stored procedure language so first I

00:21:54,310 --> 00:21:58,750
just have a function up here the

00:21:56,710 --> 00:22:02,470
function varnish purge that takes the

00:21:58,750 --> 00:22:04,210
URL as a parameter it's written in peel

00:22:02,470 --> 00:22:05,650
Python you and it does as you can see

00:22:04,210 --> 00:22:07,510
it's a from warning admin import

00:22:05,650 --> 00:22:09,790
Barnidge admin that's our the wrapper

00:22:07,510 --> 00:22:12,610
object we just instantiate the object

00:22:09,790 --> 00:22:13,930
and run purge and our URL luckily enough

00:22:12,610 --> 00:22:16,870
you know this 127

00:22:13,930 --> 00:22:19,000
0:01 : 60 82 happens to be the default

00:22:16,870 --> 00:22:20,350
here otherwise obviously we'd put

00:22:19,000 --> 00:22:22,270
something into the constructor telling

00:22:20,350 --> 00:22:24,160
you where the varnish servers which

00:22:22,270 --> 00:22:26,200
usually your varnish server is not

00:22:24,160 --> 00:22:27,370
running on your database server you'll

00:22:26,200 --> 00:22:30,010
probably want to have something like

00:22:27,370 --> 00:22:32,740
that and then we create a trigger

00:22:30,010 --> 00:22:34,540
function the way that triggers works in

00:22:32,740 --> 00:22:37,390
Postgres is you have a trigger that

00:22:34,540 --> 00:22:39,100
always calls a trigger function so the

00:22:37,390 --> 00:22:41,680
trigger function here is the blog post

00:22:39,100 --> 00:22:43,210
trigger function returns trigger that's

00:22:41,680 --> 00:22:46,660
how we always do it if you want to

00:22:43,210 --> 00:22:49,530
create a trigger language peel PG SQL

00:22:46,660 --> 00:22:52,990
and we begin and we're going to do for

00:22:49,530 --> 00:22:55,650
any blog post that's changed we're gonna

00:22:52,990 --> 00:22:58,210
send a varnish purge for the root page

00:22:55,650 --> 00:23:00,220
varnish purges take regular expressions

00:22:58,210 --> 00:23:02,260
against your URL so you can put anything

00:23:00,220 --> 00:23:04,330
you want in there so any update is going

00:23:02,260 --> 00:23:05,320
to purge the home page because for this

00:23:04,330 --> 00:23:07,780
blog application we're actually

00:23:05,320 --> 00:23:11,680
rendering every blog post on the front

00:23:07,780 --> 00:23:16,810
page and then we're also going to purge

00:23:11,680 --> 00:23:20,380
the slash and the ID of whatever row has

00:23:16,810 --> 00:23:23,470
been changed in the database and then

00:23:20,380 --> 00:23:25,330
just add a slash at the end of that and

00:23:23,470 --> 00:23:27,280
then this is something that's easy to

00:23:25,330 --> 00:23:29,770
forget return you if you don't do this

00:23:27,280 --> 00:23:31,450
all your updates will fail because that

00:23:29,770 --> 00:23:32,980
would be a return null which tells

00:23:31,450 --> 00:23:35,340
Postgres hey this trigger said I

00:23:32,980 --> 00:23:35,340
shouldn't do this

00:23:36,160 --> 00:23:39,490
I'm just doing a drop trigger if exists

00:23:38,170 --> 00:23:40,720
again so that I can actually run this

00:23:39,490 --> 00:23:43,030
script more than once without things

00:23:40,720 --> 00:23:45,280
failing and then we create the actual

00:23:43,030 --> 00:23:47,110
trigger a create trigger I'm calling it

00:23:45,280 --> 00:23:48,820
a blog post trigger one because I'm

00:23:47,110 --> 00:23:51,700
going to show you another one later on

00:23:48,820 --> 00:23:54,160
blog post for each row sorry after

00:23:51,700 --> 00:23:58,060
insert or update or delete so whenever

00:23:54,160 --> 00:24:00,940
anything changes for each row executes

00:23:58,060 --> 00:24:02,320
blog post trigger funk that means if I

00:24:00,940 --> 00:24:05,260
go into the admin interface and just

00:24:02,320 --> 00:24:07,480
change one entry it's going to execute

00:24:05,260 --> 00:24:10,620
blog post trigger front once for that

00:24:07,480 --> 00:24:13,210
entry if I go in and do a bulk update

00:24:10,620 --> 00:24:14,110
sort of update all my titles and set

00:24:13,210 --> 00:24:17,110
them to fubar

00:24:14,110 --> 00:24:18,790
because I did wrong database it's going

00:24:17,110 --> 00:24:21,330
to execute that function multiple times

00:24:18,790 --> 00:24:25,330
automatically and just generate multiple

00:24:21,330 --> 00:24:27,430
exploration requests now if we have a

00:24:25,330 --> 00:24:28,870
database with many different models many

00:24:27,430 --> 00:24:30,310
from tables then yes we create many

00:24:28,870 --> 00:24:32,590
different triggers there is still going

00:24:30,310 --> 00:24:35,440
to call the same varnish purge function

00:24:32,590 --> 00:24:37,450
but for each individual model that's

00:24:35,440 --> 00:24:42,550
being triggered on we need to know which

00:24:37,450 --> 00:24:46,780
URLs to get rid of so just to show this

00:24:42,550 --> 00:24:48,160
I'm going to run the scripts this is the

00:24:46,780 --> 00:24:49,600
standard post quest command-line

00:24:48,160 --> 00:24:51,400
interface if you for those of you

00:24:49,600 --> 00:24:53,350
haven't seen it and you will notice that

00:24:51,400 --> 00:24:55,510
yes I'm running a very old version not

00:24:53,350 --> 00:24:57,280
only am i running 8.4 I'm not even

00:24:55,510 --> 00:24:59,380
running the latest version of 8.4 which

00:24:57,280 --> 00:25:01,510
I really should be that's what I tell my

00:24:59,380 --> 00:25:03,310
customers but at least I'm running the

00:25:01,510 --> 00:25:07,780
9.2 development version of the

00:25:03,310 --> 00:25:09,490
command-line client so let's see trigger

00:25:07,780 --> 00:25:11,170
one that SQL I just run this script

00:25:09,490 --> 00:25:13,510
well it'll tell me first you know error

00:25:11,170 --> 00:25:15,220
the languages exists it created my two

00:25:13,510 --> 00:25:17,770
functions it didn't drop my triggers

00:25:15,220 --> 00:25:19,450
because they didn't exist well it

00:25:17,770 --> 00:25:21,580
dropped one of them sorry and then it

00:25:19,450 --> 00:25:23,550
created the new trigger so now we have

00:25:21,580 --> 00:25:27,550
all these objects loaded in the database

00:25:23,550 --> 00:25:29,040
and we can go back to the web here let's

00:25:27,550 --> 00:25:33,270
see if this thing is still where it is

00:25:29,040 --> 00:25:38,800
yeah we're still stuck at 647 in morning

00:25:33,270 --> 00:25:40,180
some kind of time zone so we haven't

00:25:38,800 --> 00:25:42,130
been able to expire it but if I now go

00:25:40,180 --> 00:25:49,930
in and say you know let's change this

00:25:42,130 --> 00:25:52,150
thing to test3 save it refresh it and it

00:25:49,930 --> 00:25:53,860
will have actually updated and no one's

00:25:52,150 --> 00:25:58,750
we've done that I can keep refreshing

00:25:53,860 --> 00:26:01,720
the new object is not in the cache that

00:25:58,750 --> 00:26:03,190
is how easy this simple expiry so now I

00:26:01,720 --> 00:26:06,940
have the same issue if I go into this

00:26:03,190 --> 00:26:12,910
page here test3 go in and edit it to

00:26:06,940 --> 00:26:15,430
test for go back here it has updated got

00:26:12,910 --> 00:26:18,160
both the title and the generator now you

00:26:15,430 --> 00:26:19,390
by default if I actually go in here edit

00:26:18,160 --> 00:26:21,670
this something and change it back to

00:26:19,390 --> 00:26:25,080
test for I think that Django actually

00:26:21,670 --> 00:26:27,640
Reese Aves the object so we expire it

00:26:25,080 --> 00:26:29,530
you can put that logic in the trigger as

00:26:27,640 --> 00:26:31,210
well to make it not expire the object if

00:26:29,530 --> 00:26:33,580
you just saved it back with exactly the

00:26:31,210 --> 00:26:34,900
same contents though it's even better if

00:26:33,580 --> 00:26:36,310
you can change your application so it

00:26:34,900 --> 00:26:40,020
doesn't save it back with exactly the

00:26:36,310 --> 00:26:40,020
same contents that's kind of unnecessary

00:26:44,090 --> 00:26:49,340
so that is the method one that you

00:26:47,490 --> 00:26:51,600
probably aren't going to be using

00:26:49,340 --> 00:26:55,260
because obviously is the reason why I

00:26:51,600 --> 00:26:56,430
have a method to in a method three can

00:26:55,260 --> 00:27:11,880
animal support a big problem with this

00:26:56,430 --> 00:27:13,320
one yes that is unfortunately a basic

00:27:11,880 --> 00:27:15,420
problem this model that you have

00:27:13,320 --> 00:27:16,680
technology now you can you can actually

00:27:15,420 --> 00:27:19,380
given that we're writing these functions

00:27:16,680 --> 00:27:21,150
in PL Python if you can serial you can

00:27:19,380 --> 00:27:23,370
import your django code into your stored

00:27:21,150 --> 00:27:24,930
procedure and sort of get it out of

00:27:23,370 --> 00:27:28,830
there if you have a good way of doing

00:27:24,930 --> 00:27:30,870
that so that is doable but it's not the

00:27:28,830 --> 00:27:33,990
end so it's a correct answer but not the

00:27:30,870 --> 00:27:35,280
one I'm looking for the biggest problem

00:27:33,990 --> 00:27:37,380
with this is assuming you have a lot of

00:27:35,280 --> 00:27:39,930
people editing this you're going to be

00:27:37,380 --> 00:27:41,910
firing off a lot of varnish purchase

00:27:39,930 --> 00:27:43,550
requests these requests are firing off

00:27:41,910 --> 00:27:46,080
while your clients are waiting so

00:27:43,550 --> 00:27:49,350
assuming the connection between the

00:27:46,080 --> 00:27:51,150
cache and the database goes down your

00:27:49,350 --> 00:27:53,160
clients will be waiting well if it goes

00:27:51,150 --> 00:27:54,630
down completely you'll get an error but

00:27:53,160 --> 00:27:56,520
if the network connection hacks your

00:27:54,630 --> 00:27:58,410
client will be waiting we're doing this

00:27:56,520 --> 00:28:01,500
inline synchronously inside our

00:27:58,410 --> 00:28:05,580
transactions that's probably not the

00:28:01,500 --> 00:28:07,020
best idea it also makes it really really

00:28:05,580 --> 00:28:09,990
hard to process the fact if you have

00:28:07,020 --> 00:28:12,650
multiple caches because you need to

00:28:09,990 --> 00:28:15,540
solve that problem all on your own

00:28:12,650 --> 00:28:17,670
the most common way of doing this in

00:28:15,540 --> 00:28:19,620
Postgres is to use something called

00:28:17,670 --> 00:28:21,900
asynchronous notifications in the way

00:28:19,620 --> 00:28:24,390
that will create the trigger on the blog

00:28:21,900 --> 00:28:26,940
post table just as before but instead of

00:28:24,390 --> 00:28:29,070
firing off the varnish purge this

00:28:26,940 --> 00:28:32,520
trigger actually inserts the URL it once

00:28:29,070 --> 00:28:35,580
purged into another table and this table

00:28:32,520 --> 00:28:37,110
has another trigger and this trigger

00:28:35,580 --> 00:28:39,240
fires of something called an

00:28:37,110 --> 00:28:41,820
asynchronous notification now this is a

00:28:39,240 --> 00:28:42,960
Postgres extension to SQL whereby

00:28:41,820 --> 00:28:44,640
basically you have an SQL statement

00:28:42,960 --> 00:28:47,940
called listen and another one called

00:28:44,640 --> 00:28:49,500
notify so I'll have a demon running that

00:28:47,940 --> 00:28:51,750
has connected to my database that says

00:28:49,500 --> 00:28:53,549
basically listen varnish purge that's

00:28:51,750 --> 00:28:55,940
all it does when

00:28:53,549 --> 00:28:58,529
ever somebody runs notify varnish purge

00:28:55,940 --> 00:29:01,499
this demon gets signals it will then

00:28:58,529 --> 00:29:05,399
query this queueing table and execute

00:29:01,499 --> 00:29:08,070
varnish purchase on those and that works

00:29:05,399 --> 00:29:10,139
pretty well but what we're doing here is

00:29:08,070 --> 00:29:13,889
it's pretty obvious what this is right

00:29:10,139 --> 00:29:15,869
it's a very simplistic message queue and

00:29:13,889 --> 00:29:17,730
it works in limited scenarios but it

00:29:15,869 --> 00:29:19,169
starts becoming troublesome if you are

00:29:17,730 --> 00:29:21,210
ending up with huge amounts of purchase

00:29:19,169 --> 00:29:22,799
now hopefully you're not going to end up

00:29:21,210 --> 00:29:24,570
with huge amounts of purchase but the

00:29:22,799 --> 00:29:26,190
fact is it's also a lot easier to use

00:29:24,570 --> 00:29:30,059
the fact that somebody already wrote

00:29:26,190 --> 00:29:32,070
this code for you because we created a

00:29:30,059 --> 00:29:34,049
trivial cube someone did it the easiest

00:29:32,070 --> 00:29:36,119
one we're in the Postgres context we're

00:29:34,049 --> 00:29:38,039
in the Python context there is a message

00:29:36,119 --> 00:29:41,549
queue that runs inside a post grass

00:29:38,039 --> 00:29:44,580
called pgq it is part of a package

00:29:41,549 --> 00:29:46,950
called sky tools developed by Skype it

00:29:44,580 --> 00:29:49,320
is the foundation of the replication

00:29:46,950 --> 00:29:50,609
engine that Skype uses to replicate

00:29:49,320 --> 00:29:52,769
their data across all their servers

00:29:50,609 --> 00:29:54,570
which means it's very high performance

00:29:52,769 --> 00:29:57,059
because they really need that it's very

00:29:54,570 --> 00:29:59,519
efficient and it will take care of your

00:29:57,059 --> 00:30:00,929
problems it will also automatically take

00:29:59,519 --> 00:30:03,570
care of your dealing with multiple

00:30:00,929 --> 00:30:05,669
caches they'll just do that for you you

00:30:03,570 --> 00:30:06,989
don't have to care it'll offload things

00:30:05,669 --> 00:30:08,850
it'll make sure your data based a

00:30:06,989 --> 00:30:10,679
sufficient it'll automatically run

00:30:08,850 --> 00:30:12,869
things like vacuum as required it'll

00:30:10,679 --> 00:30:15,119
rotate between multiple tables it'll

00:30:12,869 --> 00:30:16,769
take away the corner cases around MVCC

00:30:15,119 --> 00:30:19,470
snapshots that you just don't want to

00:30:16,769 --> 00:30:21,389
have to care about so I'm not even gonna

00:30:19,470 --> 00:30:25,249
bother showing your method to because

00:30:21,389 --> 00:30:29,129
method 3 is just as easy and much nicer

00:30:25,249 --> 00:30:30,869
so to use pgq well pgq and say it's a

00:30:29,129 --> 00:30:33,809
package is part of sky tools if you're

00:30:30,869 --> 00:30:35,369
like me I'm running Ubuntu here it's

00:30:33,809 --> 00:30:37,350
packaged up in Debian and they go into

00:30:35,369 --> 00:30:37,950
by default it's just the package call

00:30:37,350 --> 00:30:40,499
schedules

00:30:37,950 --> 00:30:43,559
there are rpms available obviously for

00:30:40,499 --> 00:30:45,119
Red Hat packages or red hat platforms

00:30:43,559 --> 00:30:47,580
once we install the sky tools themselves

00:30:45,119 --> 00:30:50,549
we need to install pgq into the database

00:30:47,580 --> 00:30:54,600
it basically creates a schema and stops

00:30:50,549 --> 00:30:55,649
a bunch of functions in it so I'm gonna

00:30:54,600 --> 00:30:58,169
be doing that and then we're gonna

00:30:55,649 --> 00:30:59,909
create our cue because we can a mult a

00:30:58,169 --> 00:31:01,619
single pgq installation can deal with

00:30:59,909 --> 00:31:04,649
multiple queues we're just gonna have

00:31:01,619 --> 00:31:05,970
one for our purchase and in pgq it's

00:31:04,649 --> 00:31:07,500
vital that you have something called the

00:31:05,970 --> 00:31:09,150
ticker running

00:31:07,500 --> 00:31:10,920
this ticker process is just sort of the

00:31:09,150 --> 00:31:13,410
the maintenance process of the cube that

00:31:10,920 --> 00:31:15,270
makes sure it doesn't get stuck and

00:31:13,410 --> 00:31:17,840
takes care of all this rotation and

00:31:15,270 --> 00:31:23,280
snapshotting and things like that so

00:31:17,840 --> 00:31:26,670
actually I did not remember to do that

00:31:23,280 --> 00:31:28,740
so let me just open up there is a very

00:31:26,670 --> 00:31:30,450
simple pgq configuration file that looks

00:31:28,740 --> 00:31:33,780
like this

00:31:30,450 --> 00:31:36,030
PDQ ADM tells me the defaults for my

00:31:33,780 --> 00:31:37,590
admin tool I'm just gonna say my job is

00:31:36,030 --> 00:31:41,700
gonna be varnished ticker and here is my

00:31:37,590 --> 00:31:45,420
data base into the cache demo and I have

00:31:41,700 --> 00:31:47,220
my queue called varnish perjure which is

00:31:45,420 --> 00:31:49,470
in the same database you just need a

00:31:47,220 --> 00:31:52,590
list every queue once by default away

00:31:49,470 --> 00:31:56,010
this guy looks so to install pgq I just

00:31:52,590 --> 00:31:57,990
do PDQ ADM notice little pi the sky the

00:31:56,010 --> 00:32:00,120
entire sky tools framework is written in

00:31:57,990 --> 00:32:02,310
Python there are a couple of sort of

00:32:00,120 --> 00:32:03,720
low-level C routines for the super high

00:32:02,310 --> 00:32:08,010
performance stuff but everything else is

00:32:03,720 --> 00:32:10,250
Python it does always take the ini file

00:32:08,010 --> 00:32:14,640
as the first parameter and then just say

00:32:10,250 --> 00:32:15,090
correctly spelled install and we've

00:32:14,640 --> 00:32:17,160
installed

00:32:15,090 --> 00:32:21,360
pgq in this database if I now look

00:32:17,160 --> 00:32:23,550
through in my psql list my schemas it

00:32:21,360 --> 00:32:25,830
has created a schema called PDQ that

00:32:23,550 --> 00:32:27,000
contains all the things I need means if

00:32:25,830 --> 00:32:31,260
you want to get rid of it just get rid

00:32:27,000 --> 00:32:33,600
of that scheme and everything is gone so

00:32:31,260 --> 00:32:36,000
having done that we're gonna create the

00:32:33,600 --> 00:32:41,490
cue which would they say was called

00:32:36,000 --> 00:32:44,850
varnish perjure right yep so again run

00:32:41,490 --> 00:32:50,250
PDQ ADM create

00:32:44,850 --> 00:32:52,560
Cornish burger and it's done and finally

00:32:50,250 --> 00:32:54,510
we need this ticker that just keeps

00:32:52,560 --> 00:32:59,040
things running so I run it again and say

00:32:54,510 --> 00:33:01,290
ticker this is the part nor oops okay I

00:32:59,040 --> 00:33:03,060
don't actually say create ticker I say

00:33:01,290 --> 00:33:04,290
ticker now I have two Q's I only need

00:33:03,060 --> 00:33:05,640
one but there will be another one

00:33:04,290 --> 00:33:07,260
showing up in all the status displays

00:33:05,640 --> 00:33:09,240
sorry about that

00:33:07,260 --> 00:33:11,760
the tickers you'll know memory start

00:33:09,240 --> 00:33:12,300
from your init script to make sure it's

00:33:11,760 --> 00:33:14,130
always running

00:33:12,300 --> 00:33:16,200
if the ticker is not running your queue

00:33:14,130 --> 00:33:21,540
will not work so you need to monitor

00:33:16,200 --> 00:33:26,250
that thing to okay so we have the ticker

00:33:21,540 --> 00:33:28,680
running now the way pgq works is when

00:33:26,250 --> 00:33:30,600
you have some where you post events to

00:33:28,680 --> 00:33:33,060
the queue and you have something that's

00:33:30,600 --> 00:33:36,360
in pgq terminology called a consumer

00:33:33,060 --> 00:33:38,070
that receives these events and the idea

00:33:36,360 --> 00:33:40,620
is we write a very simple consumer it

00:33:38,070 --> 00:33:43,470
consumes events from pgq it will post

00:33:40,620 --> 00:33:45,090
them as purge requests to varnish and

00:33:43,470 --> 00:33:47,790
the idea is if we have multiple varnish

00:33:45,090 --> 00:33:50,940
servers we will run multiple consumers

00:33:47,790 --> 00:33:53,120
connected to the same queue and then pgq

00:33:50,940 --> 00:33:55,410
will make sure that they're all executed

00:33:53,120 --> 00:33:56,910
so if i have three of the consumers it

00:33:55,410 --> 00:34:00,420
will make sure all three are wrong if

00:33:56,910 --> 00:34:03,090
one of my varnish services of line well

00:34:00,420 --> 00:34:05,400
as long as my consumer correctly notices

00:34:03,090 --> 00:34:07,620
that it's offline and doesn't say I'd

00:34:05,400 --> 00:34:09,900
process this event pgq will retry this

00:34:07,620 --> 00:34:13,440
over and over again until it suddenly

00:34:09,900 --> 00:34:16,620
starts succeeding now you can write

00:34:13,440 --> 00:34:17,370
these consumers in in pretty much any

00:34:16,620 --> 00:34:19,410
language you want

00:34:17,370 --> 00:34:21,630
now since schedules is written in Python

00:34:19,410 --> 00:34:23,940
for some strange reason there are very

00:34:21,630 --> 00:34:25,620
nice Python libraries available with it

00:34:23,940 --> 00:34:27,840
there are very nice Python libraries

00:34:25,620 --> 00:34:28,440
there are fairly crappy PHP libraries

00:34:27,840 --> 00:34:30,720
and nothing else

00:34:28,440 --> 00:34:32,100
included in the package I know someone

00:34:30,720 --> 00:34:34,500
is written there is something on Sipan

00:34:32,100 --> 00:34:37,230
for Perl but we're gonna look at the way

00:34:34,500 --> 00:34:38,520
we write this thing in Python and it

00:34:37,230 --> 00:34:40,200
turns out again we don't need much code

00:34:38,520 --> 00:34:41,640
because most of this stuff is written

00:34:40,200 --> 00:34:44,550
for us

00:34:41,640 --> 00:34:46,050
we're just importing pgq which is where

00:34:44,550 --> 00:34:48,150
we have all the class system functions

00:34:46,050 --> 00:34:50,850
from pgq and we're again importing this

00:34:48,150 --> 00:34:53,340
same varnish admin functionality and we

00:34:50,850 --> 00:34:57,150
create our class and we just inherit

00:34:53,340 --> 00:34:58,410
from PG q dot consumer and that will

00:34:57,150 --> 00:35:00,180
take care of 19

00:34:58,410 --> 00:35:03,380
percent of our glue we're going to

00:35:00,180 --> 00:35:05,910
override a method called process batch

00:35:03,380 --> 00:35:08,510
which is we can also run this on a

00:35:05,910 --> 00:35:11,010
process event basis pgq will group

00:35:08,510 --> 00:35:13,530
multiple events into a batch to make

00:35:11,010 --> 00:35:16,890
things run faster we'll receive them as

00:35:13,530 --> 00:35:18,809
a batch as well and we're just gonna run

00:35:16,890 --> 00:35:20,520
this batch we get an Eevee list which is

00:35:18,809 --> 00:35:23,069
a list of all the events that we need to

00:35:20,520 --> 00:35:24,900
process the first check here just if Len

00:35:23,069 --> 00:35:26,940
evilest is that we don't want to

00:35:24,900 --> 00:35:28,470
instantiate this varnish admin object if

00:35:26,940 --> 00:35:30,960
there is nothing at all to do we might

00:35:28,470 --> 00:35:31,859
get a completely empty batch and then we

00:35:30,960 --> 00:35:34,619
just want ignore it

00:35:31,859 --> 00:35:36,750
because as we instantiate up here with

00:35:34,619 --> 00:35:37,950
the equals varnish admin that will

00:35:36,750 --> 00:35:39,480
actually open a connection to the

00:35:37,950 --> 00:35:42,359
varnish server so we don't want to do

00:35:39,480 --> 00:35:46,289
that if there's nothing to do with a

00:35:42,359 --> 00:35:48,119
looping over all of our events and say

00:35:46,289 --> 00:35:51,030
you know whenever we receive an event of

00:35:48,119 --> 00:35:52,319
the type purge we're going to well we're

00:35:51,030 --> 00:35:54,599
going to print that we're going to do it

00:35:52,319 --> 00:35:57,569
we're gonna call the purge and then

00:35:54,599 --> 00:35:59,880
we're gonna say Eevee dog tag done it's

00:35:57,569 --> 00:36:03,500
this tag done thing that may takes the

00:35:59,880 --> 00:36:07,230
thing out of the VAR the PG QQ so if our

00:36:03,500 --> 00:36:08,640
the video purge call fails at this point

00:36:07,230 --> 00:36:10,200
our entire consumer will crash but

00:36:08,640 --> 00:36:11,970
that's what happens when you don't put

00:36:10,200 --> 00:36:13,260
proper handling in right you'll put some

00:36:11,970 --> 00:36:15,089
sort of exception handling around it

00:36:13,260 --> 00:36:16,440
when you're doing this in production and

00:36:15,089 --> 00:36:19,349
you just need to make sure you don't do

00:36:16,440 --> 00:36:20,700
a video tag done if it failed because

00:36:19,349 --> 00:36:22,890
once you've set tag down you're never

00:36:20,700 --> 00:36:23,880
gonna see the event again and then we're

00:36:22,890 --> 00:36:25,799
just saying you know if we receive

00:36:23,880 --> 00:36:27,420
anything else on this queue then we

00:36:25,799 --> 00:36:29,779
don't know what it is we're not supposed

00:36:27,420 --> 00:36:32,490
to receive anything else but we could

00:36:29,779 --> 00:36:36,390
and finally we just instantiate this by

00:36:32,490 --> 00:36:38,400
the default of the default in all the

00:36:36,390 --> 00:36:40,470
schedules or you pass this I&I file to

00:36:38,400 --> 00:36:43,770
everything so we're just taking that in

00:36:40,470 --> 00:36:45,750
and we're saying run the queue that is

00:36:43,770 --> 00:36:52,079
run the consumer on the queue varnish

00:36:45,750 --> 00:36:59,880
project so I'm just gonna start this

00:36:52,079 --> 00:37:01,349
thing here but by saying and it doesn't

00:36:59,880 --> 00:37:02,099
actually do anything right because we

00:37:01,349 --> 00:37:03,390
haven't posted anything

00:37:02,099 --> 00:37:07,859
it is now up and running it's listening

00:37:03,390 --> 00:37:10,020
to our queue so at this point we need to

00:37:07,859 --> 00:37:12,089
rewrite the trigger to talk to this PDQ

00:37:10,020 --> 00:37:12,359
thing and luckily enough that makes

00:37:12,089 --> 00:37:17,660
things

00:37:12,359 --> 00:37:20,220
much easier we don't even need pl Python

00:37:17,660 --> 00:37:22,230
because pgq we're going to say it's a

00:37:20,220 --> 00:37:24,690
cueing system that is well integrated in

00:37:22,230 --> 00:37:28,950
the Postgres engine so it exposes itself

00:37:24,690 --> 00:37:31,319
as functions in the database you could

00:37:28,950 --> 00:37:32,730
it also has a Python API of course you

00:37:31,319 --> 00:37:34,739
can post these things without being in

00:37:32,730 --> 00:37:37,289
the database but we're just changing

00:37:34,739 --> 00:37:39,930
this the blog post trigger func pgq

00:37:37,289 --> 00:37:42,170
instead that takes exactly the same

00:37:39,930 --> 00:37:45,359
rules as you can see the first row we

00:37:42,170 --> 00:37:49,920
use the root and the second row uses the

00:37:45,359 --> 00:37:53,009
root / ID / and we just use PG Q dot

00:37:49,920 --> 00:37:56,430
insert event into the Q name varnish

00:37:53,009 --> 00:37:57,839
perjure with the tag purge and these are

00:37:56,430 --> 00:38:00,059
the events that eventually pick up on

00:37:57,839 --> 00:38:01,710
the other side and I've just changed the

00:38:00,059 --> 00:38:03,239
trigger here to instead of being blog

00:38:01,710 --> 00:38:13,380
post trigger func it's now blog post

00:38:03,239 --> 00:38:15,509
trigger front PG q run the replacement

00:38:13,380 --> 00:38:18,690
thing and it does the create function

00:38:15,509 --> 00:38:20,279
drop trigger blah blah blah sue now how

00:38:18,690 --> 00:38:22,650
this one running see if something is

00:38:20,279 --> 00:38:24,480
happening our consumer something one

00:38:22,650 --> 00:38:26,759
event has shown up in our consumer this

00:38:24,480 --> 00:38:27,779
just happened to be completely random it

00:38:26,759 --> 00:38:29,849
has nothing to do with us

00:38:27,779 --> 00:38:31,470
there is another one these are the

00:38:29,849 --> 00:38:32,789
events that the tikar generates every

00:38:31,470 --> 00:38:35,779
now and then just to keep the system in

00:38:32,789 --> 00:38:39,470
sync you will notice it says count : 0

00:38:35,779 --> 00:38:43,319
that's the we got a batch it was empty

00:38:39,470 --> 00:38:45,480
if we look at the ticker it has

00:38:43,319 --> 00:38:46,710
generated a number of ticks some of them

00:38:45,480 --> 00:38:48,960
go to the consumer some of them don't

00:38:46,710 --> 00:38:52,680
they're just sort of the heartbeat of

00:38:48,960 --> 00:38:56,970
the whole system now if I go into my web

00:38:52,680 --> 00:38:58,890
again there is the web browser we can go

00:38:56,970 --> 00:39:03,660
change this thing and change it into

00:38:58,890 --> 00:39:06,509
test 5 and we save that see if this

00:39:03,660 --> 00:39:09,170
works or if I forgot the step it did

00:39:06,509 --> 00:39:12,059
work and if I now look in my consumer

00:39:09,170 --> 00:39:15,359
you'll notice we did receive an event

00:39:12,059 --> 00:39:19,859
with count 2 and we executed this for

00:39:15,359 --> 00:39:20,789
the to purge requests and we didn't have

00:39:19,859 --> 00:39:22,980
to do anything else

00:39:20,789 --> 00:39:24,529
pgq took care of the fact that this now

00:39:22,980 --> 00:39:26,220
runs it's kind of hard to show on a

00:39:24,529 --> 00:39:28,200
laptop but it does

00:39:26,220 --> 00:39:30,930
run asynchronously if you get a huge

00:39:28,200 --> 00:39:33,030
load spike yes your purchase will be

00:39:30,930 --> 00:39:36,090
delayed by a couple of seconds but they

00:39:33,030 --> 00:39:39,930
will end up running if I shut down

00:39:36,090 --> 00:39:41,310
varnish and purge something and start it

00:39:39,930 --> 00:39:42,900
up it'll eventually within a couple of

00:39:41,310 --> 00:39:45,030
seconds notice like hey there is a retry

00:39:42,900 --> 00:39:49,080
queue here and fire off the purchase on

00:39:45,030 --> 00:39:50,670
that one as well obviously you can use

00:39:49,080 --> 00:39:52,530
any sort of queuing you can use like

00:39:50,670 --> 00:39:54,300
RabbitMQ or whatever if you're already

00:39:52,530 --> 00:39:56,790
have it in your system

00:39:54,300 --> 00:39:58,230
the biggest advantage of PDQ is that

00:39:56,790 --> 00:40:00,000
it's entirely integrated so if your

00:39:58,230 --> 00:40:02,490
system is running on Postgres already

00:40:00,000 --> 00:40:05,359
then you have the server side it's for

00:40:02,490 --> 00:40:08,010
free now if you're using something like

00:40:05,359 --> 00:40:09,390
RabbitMQ whatever there are server side

00:40:08,010 --> 00:40:11,430
modules for Postgres that lets you

00:40:09,390 --> 00:40:12,840
easily post these things onto those

00:40:11,430 --> 00:40:15,030
message queues as well but you have one

00:40:12,840 --> 00:40:17,609
more service type to maintain at that

00:40:15,030 --> 00:40:19,050
point and like I said this is the

00:40:17,609 --> 00:40:20,700
foundation for a high performance

00:40:19,050 --> 00:40:22,740
replication system so the performance is

00:40:20,700 --> 00:40:25,349
perfectly fine it's not as good yes

00:40:22,740 --> 00:40:27,630
rabbitmq will be faster it will scale

00:40:25,349 --> 00:40:29,460
more for pure queuing but if you are

00:40:27,630 --> 00:40:31,700
expiring that many URLs from your

00:40:29,460 --> 00:40:35,510
website you might want to rethink

00:40:31,700 --> 00:40:35,510
exactly how you're dealing with things

00:40:38,359 --> 00:40:43,290
another advantage of PDQ it is that it

00:40:41,070 --> 00:40:44,670
needs almost no hand-holding at all okay

00:40:43,290 --> 00:40:46,380
as long as this ticker thing is running

00:40:44,670 --> 00:40:50,250
it'll take care of everything

00:40:46,380 --> 00:41:03,720
which means monitor the ticker there is

00:40:50,250 --> 00:41:05,490
a PDQ ADM status command just run this

00:41:03,720 --> 00:41:06,599
one with status it will tell me well

00:41:05,490 --> 00:41:08,810
first of all it'll tell me that I have

00:41:06,599 --> 00:41:12,359
two queues I was on supposed to have one

00:41:08,810 --> 00:41:16,680
but it tells you here first of all

00:41:12,359 --> 00:41:18,030
rotation 3 / 7200 means PDQ is rotating

00:41:16,680 --> 00:41:21,080
through different tables for performance

00:41:18,030 --> 00:41:26,130
reasons by default it'll rotate after

00:41:21,080 --> 00:41:27,780
7200 seconds or 500 events I think it's

00:41:26,130 --> 00:41:31,619
something like that this just as well it

00:41:27,780 --> 00:41:33,089
has to receive three events it's got

00:41:31,619 --> 00:41:35,250
some ticker information on exactly how

00:41:33,089 --> 00:41:37,260
often ticks you got the ticker lag which

00:41:35,250 --> 00:41:39,390
is currently you can see it's 40 seconds

00:41:37,260 --> 00:41:41,970
since we saw

00:41:39,390 --> 00:41:43,769
take on one of them 47 seconds since we

00:41:41,970 --> 00:41:46,529
saw it on the other the last value

00:41:43,769 --> 00:41:48,960
that's a 60 seconds is how often we will

00:41:46,529 --> 00:41:51,150
always generate a tick so if the T lag

00:41:48,960 --> 00:41:53,670
it goes above 60 seconds you have a

00:41:51,150 --> 00:41:56,220
problem on this Q we run this again

00:41:53,670 --> 00:41:58,799
hopefully the lag has restarted because

00:41:56,220 --> 00:42:00,329
we did receive a tick and for each of

00:41:58,799 --> 00:42:03,359
our Q we will actually see all our

00:42:00,329 --> 00:42:04,619
registered consumers so if we had three

00:42:03,359 --> 00:42:07,019
varnish servers will have three

00:42:04,619 --> 00:42:09,240
consumers listed down here and we'll see

00:42:07,019 --> 00:42:12,859
when they were last seen again this

00:42:09,240 --> 00:42:14,789
should also not climb in these times

00:42:12,859 --> 00:42:16,349
that also means that if you actually

00:42:14,789 --> 00:42:18,450
uninstall a varnish service you need to

00:42:16,349 --> 00:42:21,180
go remove the unregister that consumer

00:42:18,450 --> 00:42:22,920
or your warning system or your

00:42:21,180 --> 00:42:24,510
monitoring system will start alerting on

00:42:22,920 --> 00:42:25,859
the fact that hey this guy hasn't

00:42:24,510 --> 00:42:30,839
purchased anything for you know five

00:42:25,859 --> 00:42:32,160
weeks because you decommission it and

00:42:30,839 --> 00:42:34,769
that's pretty much all there is to the

00:42:32,160 --> 00:42:36,839
hand-holding there is already I know at

00:42:34,769 --> 00:42:39,329
least a munion plugin for monitoring

00:42:36,839 --> 00:42:40,529
this and there's probably at least a

00:42:39,329 --> 00:42:43,410
hundred people who've written their own

00:42:40,529 --> 00:42:45,240
little 5-line not just plugin of course

00:42:43,410 --> 00:42:47,240
again this is Python you don't need to

00:42:45,240 --> 00:42:49,799
use PDQ ad I'm the PI there is an actual

00:42:47,240 --> 00:42:52,140
API if you want to access it from your

00:42:49,799 --> 00:42:56,039
existing monitoring system we can just

00:42:52,140 --> 00:42:59,279
extract this data and go back to full

00:42:56,039 --> 00:43:00,900
screen for a second so there are a

00:42:59,279 --> 00:43:03,660
couple of rules and there's one thing

00:43:00,900 --> 00:43:05,460
that may help you avoid this fact that

00:43:03,660 --> 00:43:08,089
you need to push the URL knowledge into

00:43:05,460 --> 00:43:10,650
the database and that is the fact that

00:43:08,089 --> 00:43:13,710
varnish is actually capable and purging

00:43:10,650 --> 00:43:17,670
not just based on the URL but based on

00:43:13,710 --> 00:43:20,490
any HTTP header on the object okay so

00:43:17,670 --> 00:43:22,319
you can put your own kind of tags into

00:43:20,490 --> 00:43:24,539
the headers as you send them from your

00:43:22,319 --> 00:43:26,609
Jango or whatever application into

00:43:24,539 --> 00:43:29,579
varnish and then later reference those

00:43:26,609 --> 00:43:31,710
tags to purge it and again we'll just

00:43:29,579 --> 00:43:34,440
use a regular expression against this

00:43:31,710 --> 00:43:36,150
custom header so one way of doing this

00:43:34,440 --> 00:43:37,589
there you can see for example if well

00:43:36,150 --> 00:43:40,680
your site is posting something you can

00:43:37,589 --> 00:43:42,029
just add an X - object an X at the head

00:43:40,680 --> 00:43:44,970
of your header name if you're inventing

00:43:42,029 --> 00:43:47,009
your own you're not supposed that's what

00:43:44,970 --> 00:43:49,170
the HTTP RFC says you should do don't

00:43:47,009 --> 00:43:51,539
use somebody else's header just create

00:43:49,170 --> 00:43:53,170
your own so X - all in this case I'll

00:43:51,539 --> 00:43:56,859
just say news column one two three

00:43:53,170 --> 00:43:59,140
News : 1 2 4 and user : 42 so basically

00:43:56,859 --> 00:44:01,720
for every page you render you tagged it

00:43:59,140 --> 00:44:04,720
with which models and the primary key of

00:44:01,720 --> 00:44:07,150
that model so you will then know that

00:44:04,720 --> 00:44:10,210
you know when you update news number 124

00:44:07,150 --> 00:44:14,109
you send the purchase request for news :

00:44:10,210 --> 00:44:15,819
124 which will then have a regex but

00:44:14,109 --> 00:44:17,680
says well probably it's gonna say news :

00:44:15,819 --> 00:44:21,339
124 comments you just be on the safe

00:44:17,680 --> 00:44:22,690
side and you can perch again stat now

00:44:21,339 --> 00:44:25,450
this does not work for every application

00:44:22,690 --> 00:44:27,010
and it's not reasonable if you your ex -

00:44:25,450 --> 00:44:30,339
object header actually ends up you know

00:44:27,010 --> 00:44:33,280
being 500 objects long but in some cases

00:44:30,339 --> 00:44:35,770
it will work it might be best to use a

00:44:33,280 --> 00:44:38,170
combination of these two but this is

00:44:35,770 --> 00:44:39,849
actually a pretty good functionality now

00:44:38,170 --> 00:44:41,290
another thing that you should not forget

00:44:39,849 --> 00:44:42,609
to do in this case is to strip this

00:44:41,290 --> 00:44:44,280
header off in varnish right there is no

00:44:42,609 --> 00:44:46,750
need for your client to see the setter

00:44:44,280 --> 00:44:48,369
you'll just have your delivery

00:44:46,750 --> 00:44:50,200
commanding varnish just remove it before

00:44:48,369 --> 00:44:52,390
it's sent off to the client you need it

00:44:50,200 --> 00:44:54,849
to be stored in the cache so that we can

00:44:52,390 --> 00:45:00,160
expire against it but you don't need it

00:44:54,849 --> 00:45:02,339
all the way up in the client so some

00:45:00,160 --> 00:45:03,910
final words around this don't use it

00:45:02,339 --> 00:45:08,410
unless you have to

00:45:03,910 --> 00:45:12,309
right if you can reliably set an expiry

00:45:08,410 --> 00:45:13,780
time on a URL because you know that it's

00:45:12,309 --> 00:45:16,420
valid for a certain amount of time then

00:45:13,780 --> 00:45:19,150
by all means do that instead okay it

00:45:16,420 --> 00:45:21,760
will be more efficient and use the s max

00:45:19,150 --> 00:45:22,839
H the cache control HTTP headers set

00:45:21,760 --> 00:45:25,750
them in your application

00:45:22,839 --> 00:45:27,430
varnish will follow their their command

00:45:25,750 --> 00:45:31,540
and do what they're doing so use this

00:45:27,430 --> 00:45:32,829
purging when it's needed because you

00:45:31,540 --> 00:45:34,480
really don't want to do this a thousand

00:45:32,829 --> 00:45:35,710
times a second it'll work

00:45:34,480 --> 00:45:38,250
it'll work fine varnish will deal with

00:45:35,710 --> 00:45:41,290
it and the pgq will deal with it but you

00:45:38,250 --> 00:45:42,760
really need to rethink your strategy if

00:45:41,290 --> 00:45:46,450
you're expiring things from your cache

00:45:42,760 --> 00:45:48,069
that often most people really that may

00:45:46,450 --> 00:45:50,980
be you need that page to only be cached

00:45:48,069 --> 00:45:53,650
for one second because you know even a

00:45:50,980 --> 00:45:56,290
one second cache will do a very very

00:45:53,650 --> 00:45:58,510
good effect on things like the /dr or

00:45:56,290 --> 00:46:00,250
the national TV effect caching it for

00:45:58,510 --> 00:46:03,819
one second might you know kalfa 99 and a

00:46:00,250 --> 00:46:05,140
half percent of your traffic you won't

00:46:03,819 --> 00:46:06,540
get the last of it but you will get a

00:46:05,140 --> 00:46:08,890
lot of it

00:46:06,540 --> 00:46:11,860
but it does work it does scale pretty

00:46:08,890 --> 00:46:14,470
well when you do need to use it and use

00:46:11,860 --> 00:46:16,660
a combination use cash control on the

00:46:14,470 --> 00:46:19,450
URLs that you know use purging on the

00:46:16,660 --> 00:46:21,460
URLs that you don't know and running

00:46:19,450 --> 00:46:23,470
this from within the database will make

00:46:21,460 --> 00:46:29,170
it stable for the fact that you will

00:46:23,470 --> 00:46:30,670
eventually have multiple clients so as

00:46:29,170 --> 00:46:32,470
one final word before I say thank you is

00:46:30,670 --> 00:46:36,370
wow this is the first time I think none

00:46:32,470 --> 00:46:37,780
of the demos actually crashed must be

00:46:36,370 --> 00:46:54,640
because I'm at a pipe in him and thank

00:46:37,780 --> 00:46:56,650
you how would you handle things like you

00:46:54,640 --> 00:46:59,710
invalidate something like you have a

00:46:56,650 --> 00:47:02,710
huge structure and invalidates the top a

00:46:59,710 --> 00:47:06,700
node of the huge structure and need to

00:47:02,710 --> 00:47:09,660
push out like a hundred thousand perch

00:47:06,700 --> 00:47:11,800
requests because unity or structure

00:47:09,660 --> 00:47:13,840
depending on exactly how your URL

00:47:11,800 --> 00:47:17,080
structure works if you can collapse this

00:47:13,840 --> 00:47:19,690
into a lower number of red checks that's

00:47:17,080 --> 00:47:20,950
really what you want to do you don't

00:47:19,690 --> 00:47:23,320
want to put a hundred thousand purchase

00:47:20,950 --> 00:47:26,230
out there if you can avoid it yes but

00:47:23,320 --> 00:47:30,490
you would get a hundred cells and

00:47:26,230 --> 00:47:31,960
probably trigger events on the are you

00:47:30,490 --> 00:47:35,350
actually updating a hundred thousand

00:47:31,960 --> 00:47:38,260
rows in the database no but I need to

00:47:35,350 --> 00:47:40,180
invalidate see I need possibly yeah but

00:47:38,260 --> 00:47:45,100
what you can do there is you put that

00:47:40,180 --> 00:47:46,240
logic already into the into the the

00:47:45,100 --> 00:47:47,860
function that you're calling in the

00:47:46,240 --> 00:47:50,620
database right you put that logic

00:47:47,860 --> 00:47:52,600
already in this function at this point

00:47:50,620 --> 00:47:55,840
you get called and if you updated one

00:47:52,600 --> 00:47:56,860
row and this can then recurse into your

00:47:55,840 --> 00:47:59,290
data structure and figure out exactly

00:47:56,860 --> 00:48:01,090
what needs to be expired okay so then

00:47:59,290 --> 00:48:03,010
generate the hopefully less than a

00:48:01,090 --> 00:48:04,660
hundred thousand number of purchase into

00:48:03,010 --> 00:48:06,490
if you push it all up to the consumer

00:48:04,660 --> 00:48:12,940
then yes you have that problem and it's

00:48:06,490 --> 00:48:15,070
sort of too late how do you use a pgq in

00:48:12,940 --> 00:48:18,280
whenever you have a multi more multiple

00:48:15,070 --> 00:48:19,140
database machines like a master slaves

00:48:18,280 --> 00:48:23,550
or multi

00:48:19,140 --> 00:48:25,920
masters for this normally you'll be

00:48:23,550 --> 00:48:28,400
running it on your master because on

00:48:25,920 --> 00:48:31,610
your slave you're not firing triggers

00:48:28,400 --> 00:48:33,660
multi master is a very special situation

00:48:31,610 --> 00:48:36,120
depending it'll depend on your multi

00:48:33,660 --> 00:48:38,190
master solution for example if you're

00:48:36,120 --> 00:48:40,290
using say Picardo multi master you can

00:48:38,190 --> 00:48:42,810
use hooks in Picardo instead to fire

00:48:40,290 --> 00:48:44,820
this rather than using an actual

00:48:42,810 --> 00:48:46,110
database trigger because if you're using

00:48:44,820 --> 00:48:47,700
the actual trigger it'll sort of

00:48:46,110 --> 00:48:49,560
conflict with the triggers that Picardo

00:48:47,700 --> 00:48:53,240
excusing but then put it in the hooks

00:48:49,560 --> 00:48:53,240
and that that system provides

00:49:04,249 --> 00:49:10,410
seeing as varnish executes those per

00:49:07,859 --> 00:49:14,189
direct regular expressions when requests

00:49:10,410 --> 00:49:17,429
come in isn't it better for varnish to

00:49:14,189 --> 00:49:20,249
have fewer more broad purges than lots

00:49:17,429 --> 00:49:23,729
of more granular ones that depends I

00:49:20,249 --> 00:49:26,219
mean more granular ones will make you

00:49:23,729 --> 00:49:28,049
expire or less but yes I mean if you're

00:49:26,219 --> 00:49:30,539
going to end up and if you end up

00:49:28,049 --> 00:49:32,369
purging 50,000 records then you might be

00:49:30,539 --> 00:49:34,619
better off doing a broader purge that

00:49:32,369 --> 00:49:36,410
accidentally takes out 75,000 records

00:49:34,619 --> 00:49:41,130
yes

00:49:36,410 --> 00:49:44,219
but the flipside is obviously well you

00:49:41,130 --> 00:49:46,469
know five specific purchase compared to

00:49:44,219 --> 00:49:48,599
you know let's approach everything it's

00:49:46,469 --> 00:49:50,039
obviously a big win in that case so it's

00:49:48,599 --> 00:49:53,429
do you think there is there would be

00:49:50,039 --> 00:49:56,009
some way of consolidating lots of those

00:49:53,429 --> 00:49:58,499
purges down on a regular basis oh

00:49:56,009 --> 00:49:59,939
absolutely it's doable I mean that's one

00:49:58,499 --> 00:50:01,380
of the things that I always suggested to

00:49:59,939 --> 00:50:02,939
the gentleman over there that you can

00:50:01,380 --> 00:50:06,029
actually do it at this point if they're

00:50:02,939 --> 00:50:07,199
generated in the same transaction if

00:50:06,029 --> 00:50:09,419
they're generated in different

00:50:07,199 --> 00:50:12,029
transactions well you can put it in your

00:50:09,419 --> 00:50:14,159
pgq consumer that it sort of collects up

00:50:12,029 --> 00:50:16,799
for a while and runs the purge every 10

00:50:14,159 --> 00:50:19,349
seconds and it's got a big list of

00:50:16,799 --> 00:50:21,419
things that's basically Python list that

00:50:19,349 --> 00:50:24,059
you can apply some magic and sort of

00:50:21,419 --> 00:50:26,669
consolidate the Reg excerpts just doing

00:50:24,059 --> 00:50:28,019
sort of generic reg X consolidation I

00:50:26,669 --> 00:50:30,569
don't know if there is anybody who does

00:50:28,019 --> 00:50:32,009
that but knowing your own structure you

00:50:30,569 --> 00:50:33,479
might be able to take some shortcuts and

00:50:32,009 --> 00:50:37,489
actually make regex

00:50:33,479 --> 00:50:37,489
consolidation a reasonable thing to do

00:50:41,179 --> 00:50:47,699
just continuing on that idea what might

00:50:44,519 --> 00:50:49,199
work is to have hash buckets and traits

00:50:47,699 --> 00:50:52,019
say 100 buckets for each of your

00:50:49,199 --> 00:50:53,669
entities and just delete those because

00:50:52,019 --> 00:50:55,529
the chances are of removing one percent

00:50:53,669 --> 00:50:57,719
of your cash isn't going to yeah

00:50:55,529 --> 00:50:59,999
absolutely and then you can send the

00:50:57,719 --> 00:51:02,150
sort of bucket ID along as an HTTP

00:50:59,999 --> 00:51:04,949
header and just kill off on that

00:51:02,150 --> 00:51:06,509
absolutely that's also there again that

00:51:04,949 --> 00:51:08,130
means once you sort of leave the I'm

00:51:06,509 --> 00:51:10,559
going to do it by URL space it's gonna

00:51:08,130 --> 00:51:12,959
be application specific which way is the

00:51:10,559 --> 00:51:15,239
best way to do it but anything that you

00:51:12,959 --> 00:51:16,710
can make deterministic you can stick it

00:51:15,239 --> 00:51:24,720
in an HTTP header

00:51:16,710 --> 00:51:26,339
and then expire based on it oh yeah well

00:51:24,720 --> 00:51:37,170
you can also I mean you can use a random

00:51:26,339 --> 00:51:40,160
number generator it'll be fun okay okay

00:51:37,170 --> 00:51:40,160

YouTube URL: https://www.youtube.com/watch?v=U_IZVEZImq4


