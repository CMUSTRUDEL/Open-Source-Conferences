Title: Playing tasks with Django-Celery
Publication date: 2015-04-19
Playlist: EuroPython 2011
Description: 
	[EuroPython 2011] Mauro Rocco - 22 June 2011 in "Track Tagliatelle
"
Captions: 
	00:00:06,670 --> 00:00:14,540
okay thank you all to be here and let's

00:00:11,540 --> 00:00:17,989
start a bit there so first of all I want

00:00:14,540 --> 00:00:23,060
to say that this is not a general

00:00:17,989 --> 00:00:25,540
overview of salary how it works is not a

00:00:23,060 --> 00:00:30,290
generic overview of the whole library

00:00:25,540 --> 00:00:33,290
but we are going to explain some little

00:00:30,290 --> 00:00:35,179
tricks or some little extension it maybe

00:00:33,290 --> 00:00:38,510
you need while you are working with

00:00:35,179 --> 00:00:40,429
salary then i will give you just an

00:00:38,510 --> 00:00:45,109
introduction to salary in jungle salary

00:00:40,429 --> 00:00:51,469
and then go forward the some specific

00:00:45,109 --> 00:00:55,249
task and extension okay just a bit about

00:00:51,469 --> 00:00:58,280
me because I'm unknown I'm a web

00:00:55,249 --> 00:01:00,859
developer and basically I'm working I

00:00:58,280 --> 00:01:03,199
love work with Python but you know when

00:01:00,859 --> 00:01:05,780
you're working for a company you can't

00:01:03,199 --> 00:01:08,180
always work with the same language there

00:01:05,780 --> 00:01:10,640
is some production needs and then i'm

00:01:08,180 --> 00:01:13,759
working with PHP for front-end and java

00:01:10,640 --> 00:01:17,570
android java script i'm a little celery

00:01:13,759 --> 00:01:20,860
contributor very little just few line of

00:01:17,570 --> 00:01:24,469
code one of the hundreds of course and

00:01:20,860 --> 00:01:27,380
about jamendo a company where I'm

00:01:24,469 --> 00:01:31,100
working for jamendo is basically is a

00:01:27,380 --> 00:01:34,729
community of free music we are not

00:01:31,100 --> 00:01:37,310
buying a license of a very no music we

00:01:34,729 --> 00:01:40,280
just a love artist to upload their music

00:01:37,310 --> 00:01:43,990
and share with users through the

00:01:40,280 --> 00:01:47,299
Creative Commons license of course

00:01:43,990 --> 00:01:51,920
Creative Commons means free for the user

00:01:47,299 --> 00:01:55,280
but is not free for companies or just

00:01:51,920 --> 00:01:58,070
who want to use it for us advertising or

00:01:55,280 --> 00:02:02,179
marketing they have to pay for license

00:01:58,070 --> 00:02:04,579
anyway then what we do basically is give

00:02:02,179 --> 00:02:06,409
a free music you can download all your

00:02:04,579 --> 00:02:09,110
music from jamendo you can listen to it

00:02:06,409 --> 00:02:11,360
but if you have a company you have to

00:02:09,110 --> 00:02:15,050
pay a cheap price of course because it's

00:02:11,360 --> 00:02:17,660
not you are not buying songs of

00:02:15,050 --> 00:02:21,170
big artists like Madonna but maybe it's

00:02:17,660 --> 00:02:23,300
good music too and then we share the

00:02:21,170 --> 00:02:25,490
revenue with the artist 50 and 50

00:02:23,300 --> 00:02:28,660
percent fifty percent to jamendo and

00:02:25,490 --> 00:02:32,240
fifty percent to the artist in this way

00:02:28,660 --> 00:02:35,000
we create also a different market for

00:02:32,240 --> 00:02:39,290
company and want to buy or maybe also

00:02:35,000 --> 00:02:40,850
for little pre weight that I want to do

00:02:39,290 --> 00:02:47,630
things in the right way but without

00:02:40,850 --> 00:02:51,620
spend a lot of money of course jamendo

00:02:47,630 --> 00:02:54,230
as a big community is obviously needs a

00:02:51,620 --> 00:02:56,660
lot of background work especially

00:02:54,230 --> 00:02:59,480
because it's a basically a music website

00:02:56,660 --> 00:03:02,210
this means that every artists have to

00:02:59,480 --> 00:03:04,970
applaud in high quality format then we

00:03:02,210 --> 00:03:08,540
have to encode it in different one and

00:03:04,970 --> 00:03:10,520
we have to make epic artist by show them

00:03:08,540 --> 00:03:13,010
how many less than you are though many

00:03:10,520 --> 00:03:15,980
downloaden you are first in the chart

00:03:13,010 --> 00:03:19,820
and your tags the best tags and stuff

00:03:15,980 --> 00:03:22,989
like that and of course sometimes we are

00:03:19,820 --> 00:03:22,989
we have also some

00:03:52,180 --> 00:03:54,239
you

00:05:14,400 --> 00:05:16,460
you

00:05:34,350 --> 00:05:36,410
you

00:06:09,009 --> 00:06:11,069
you

00:13:18,430 --> 00:13:20,490
you

00:13:37,660 --> 00:13:49,339
thanks it works great I have to start

00:13:41,449 --> 00:13:52,100
again ok and ok I was saying that ok I

00:13:49,339 --> 00:13:56,749
didn't remember anymore maybe was a bit

00:13:52,100 --> 00:13:59,869
concept simple task the first task that

00:13:56,749 --> 00:14:03,649
we want to write with salary ok this is

00:13:59,869 --> 00:14:07,129
my my favorite test mainly you know is

00:14:03,649 --> 00:14:09,859
my objective and you can write it with

00:14:07,129 --> 00:14:13,609
decorators you can also import to the

00:14:09,859 --> 00:14:16,160
task based class and simply use extend

00:14:13,609 --> 00:14:19,309
the task class of salary this is an

00:14:16,160 --> 00:14:22,399
example with decorator and pieces make

00:14:19,309 --> 00:14:25,480
money of course how much as you can

00:14:22,399 --> 00:14:28,309
easily understand what it has to and

00:14:25,480 --> 00:14:32,569
this is as an example by a Python shell

00:14:28,309 --> 00:14:36,259
or how to schedule the task the metered

00:14:32,569 --> 00:14:38,839
delay say simply schedule the task send

00:14:36,259 --> 00:14:40,819
a message to the broker basically this

00:14:38,839 --> 00:14:44,169
means that they can have a five salary

00:14:40,819 --> 00:14:49,519
workers on five server on one of these

00:14:44,169 --> 00:14:51,559
I'm just going to call the meter delay

00:14:49,519 --> 00:14:54,499
with the dry tags in this case two

00:14:51,559 --> 00:14:58,339
hundred dollars and after the results

00:14:54,499 --> 00:15:01,189
yet is waiting for result until the

00:14:58,339 --> 00:15:06,889
result are not ready he didn't he didn't

00:15:01,189 --> 00:15:09,319
give you back any output sometimes

00:15:06,889 --> 00:15:12,139
people are a bit confusing because it

00:15:09,319 --> 00:15:13,970
seems that you are simply running the

00:15:12,139 --> 00:15:16,309
task on the worker when you have the

00:15:13,970 --> 00:15:18,379
shell open but this is not true the

00:15:16,309 --> 00:15:22,850
worker is a producer send a message to

00:15:18,379 --> 00:15:24,829
the broker maybe is a him that keep get

00:15:22,850 --> 00:15:27,559
back the message again for executed if

00:15:24,829 --> 00:15:30,139
is the only worker in the whole cloud

00:15:27,559 --> 00:15:32,509
but can be also executed for other

00:15:30,139 --> 00:15:36,789
workers that are actually listening to

00:15:32,509 --> 00:15:41,169
the broker to the two that you define

00:15:36,789 --> 00:15:43,639
okay until you are it's quite simple a

00:15:41,169 --> 00:15:46,549
great thing of salary that you can

00:15:43,639 --> 00:15:47,690
rating task now got to make moan in the

00:15:46,549 --> 00:15:50,420
real life

00:15:47,690 --> 00:15:52,280
we have a new parameter I don't know I

00:15:50,420 --> 00:15:58,220
have it I don't know if you have it his

00:15:52,280 --> 00:15:59,570
wife the fault is true for me and this

00:15:58,220 --> 00:16:01,760
is basically what happened the first

00:15:59,570 --> 00:16:03,950
time that you execute the task you have

00:16:01,760 --> 00:16:08,270
an exception you can't make money if you

00:16:03,950 --> 00:16:10,730
have a wife then what happened ok this

00:16:08,270 --> 00:16:12,410
is this is true now but it's not true in

00:16:10,730 --> 00:16:15,550
the real life you can come back and

00:16:12,410 --> 00:16:19,070
remember to the wife at false and

00:16:15,550 --> 00:16:20,960
basically is what you see if there is an

00:16:19,070 --> 00:16:23,420
exception in this block of God you

00:16:20,960 --> 00:16:27,470
recall the same task with the rotary

00:16:23,420 --> 00:16:31,340
metered the exception the countdown

00:16:27,470 --> 00:16:35,000
means from now how many seconds have to

00:16:31,340 --> 00:16:37,970
wait for a tree the task again and the

00:16:35,000 --> 00:16:40,550
arcs the second arms is set to false

00:16:37,970 --> 00:16:42,830
this means that after six seconds this

00:16:40,550 --> 00:16:45,230
starts to run again with wife at falls

00:16:42,830 --> 00:16:47,030
and you can earn your money maybe you

00:16:45,230 --> 00:16:51,980
are not enough for Bora Bora but anyway

00:16:47,030 --> 00:16:54,020
is a little step why passing also the

00:16:51,980 --> 00:16:57,820
exception to the rate limited because

00:16:54,020 --> 00:17:01,760
salary by default of also a red three

00:16:57,820 --> 00:17:04,459
max freight rates parameter this means

00:17:01,760 --> 00:17:09,130
that a task can rightly maximum 30 time

00:17:04,459 --> 00:17:11,870
what happened if this task run 30 time

00:17:09,130 --> 00:17:13,699
always with an exception that the

00:17:11,870 --> 00:17:16,579
exception that you passing in the reg

00:17:13,699 --> 00:17:18,650
remitted is brace it and in this way you

00:17:16,579 --> 00:17:20,959
can understand that you can read your

00:17:18,650 --> 00:17:22,880
exception and and see what is going on

00:17:20,959 --> 00:17:24,860
they come down of course it's very

00:17:22,880 --> 00:17:26,510
useful because if you imagine an example

00:17:24,860 --> 00:17:29,360
that you have to work with external API

00:17:26,510 --> 00:17:31,820
or services that sometimes are down or

00:17:29,360 --> 00:17:34,550
they are not responding in this way you

00:17:31,820 --> 00:17:36,260
can try after a bit of a time or maybe

00:17:34,550 --> 00:17:38,240
you can also read through the task with

00:17:36,260 --> 00:17:40,520
an incremental rotary you can increment

00:17:38,240 --> 00:17:47,930
all the time of the 50 per cell you can

00:17:40,520 --> 00:17:53,720
do what you want basically this is a bit

00:17:47,930 --> 00:17:58,480
more complex is touched set this means

00:17:53,720 --> 00:18:00,940
that I'm going to lunch several task

00:17:58,480 --> 00:18:05,570
within another task

00:18:00,940 --> 00:18:09,320
I just define a fast set as you can see

00:18:05,570 --> 00:18:11,300
here this is basically is a real task or

00:18:09,320 --> 00:18:17,330
an extraction or a real task that simply

00:18:11,300 --> 00:18:20,600
have to get 2,000 track and split it in

00:18:17,330 --> 00:18:23,020
flights of 1000 and create an XML file

00:18:20,600 --> 00:18:26,030
of each one thousand of this truck of

00:18:23,020 --> 00:18:28,730
course I don't want to do it enough in a

00:18:26,030 --> 00:18:30,860
big task because if something something

00:18:28,730 --> 00:18:33,380
go wrong had to start to rebuild again

00:18:30,860 --> 00:18:36,020
some files or maybe you have to reload

00:18:33,380 --> 00:18:38,690
again some files and also is a bit

00:18:36,020 --> 00:18:41,870
difficult to understand which task is

00:18:38,690 --> 00:18:46,880
giving you the problem or which track is

00:18:41,870 --> 00:18:50,600
not vegetable the basic solution is as I

00:18:46,880 --> 00:18:54,470
can split 200,000 songs of slice of 1000

00:18:50,600 --> 00:18:57,020
I can also run 1000 task that are going

00:18:54,470 --> 00:18:59,210
to do this job on only 1000 songs and

00:18:57,020 --> 00:19:04,760
this is basically what the task set to

00:18:59,210 --> 00:19:09,200
do you just define a set of task by

00:19:04,760 --> 00:19:12,980
passing them the subtask parameter as

00:19:09,200 --> 00:19:16,580
you can see you define our list of tasks

00:19:12,980 --> 00:19:19,700
and for each slice you make a slice is

00:19:16,580 --> 00:19:23,090
just a list of ID's each slice contains

00:19:19,700 --> 00:19:27,650
one thousand tongues and you happen to

00:19:23,090 --> 00:19:30,110
this list of tasks a sub task of celery

00:19:27,650 --> 00:19:33,140
o blood truck slice is the single star

00:19:30,110 --> 00:19:36,620
the simple task that did the job let's

00:19:33,140 --> 00:19:40,970
upload some track information on an FTP

00:19:36,620 --> 00:19:43,640
and sub task and the arch that you want

00:19:40,970 --> 00:19:50,480
to pass to your sub task in this case my

00:19:43,640 --> 00:19:53,630
slice my 1000 IDs after you define your

00:19:50,480 --> 00:19:57,380
tuck state with a just with a list that

00:19:53,630 --> 00:20:01,880
we just created and you call the method

00:19:57,380 --> 00:20:05,810
a plea a synchronous this means that

00:20:01,880 --> 00:20:10,100
from now you can use a emitted it is

00:20:05,810 --> 00:20:12,920
called a task results ready for wait for

00:20:10,100 --> 00:20:14,179
the result of course if you put a while

00:20:12,920 --> 00:20:19,759
cycle here

00:20:14,179 --> 00:20:23,240
on results really this task will run

00:20:19,759 --> 00:20:26,570
until all the other subtask are not

00:20:23,240 --> 00:20:30,019
finish it what does it mean this that if

00:20:26,570 --> 00:20:32,059
you have a concurrency a max sorry if

00:20:30,019 --> 00:20:35,690
you have a concurrency option on your

00:20:32,059 --> 00:20:39,139
worker my worker can run only three

00:20:35,690 --> 00:20:41,779
tests per time and you wait for all your

00:20:39,139 --> 00:20:45,649
result inside another task this means

00:20:41,779 --> 00:20:47,690
that you have we can say one place bc by

00:20:45,649 --> 00:20:50,119
this task that is just waiting results

00:20:47,690 --> 00:20:54,049
and this is not good because you can run

00:20:50,119 --> 00:20:57,200
only to task on this worker for probably

00:20:54,049 --> 00:21:00,409
some hours because potentially you can

00:20:57,200 --> 00:21:02,389
run a lot of tasks and then the cool

00:21:00,409 --> 00:21:07,340
things that you can read through this

00:21:02,389 --> 00:21:10,879
task for just check the results and you

00:21:07,340 --> 00:21:12,980
can do it in this way I don't want to go

00:21:10,879 --> 00:21:16,369
so much deep in it because it's very

00:21:12,980 --> 00:21:19,759
specific and I just want to explain you

00:21:16,369 --> 00:21:21,860
the potential of reg reader task let's

00:21:19,759 --> 00:21:24,049
free the warcraft execute other task and

00:21:21,860 --> 00:21:25,940
come back after 1 hour just to check if

00:21:24,049 --> 00:21:29,360
the results are ready from all your sub

00:21:25,940 --> 00:21:32,539
tasks and if when the results are ready

00:21:29,360 --> 00:21:34,549
and all the results are such as full you

00:21:32,539 --> 00:21:37,460
can do something else after five of the

00:21:34,549 --> 00:21:40,460
six hours after seven hours or you can

00:21:37,460 --> 00:21:43,999
also say as you can see some that of the

00:21:40,460 --> 00:21:46,309
task was failing and you can also better

00:21:43,999 --> 00:21:48,879
understand what is going wrong because

00:21:46,309 --> 00:21:51,919
you're a ver each one of these sub tasks

00:21:48,879 --> 00:21:54,519
in your monitoring tool are anyway our

00:21:51,919 --> 00:21:57,860
celery task schedule it in the right way

00:21:54,519 --> 00:22:00,379
like as a normal task then you can have

00:21:57,860 --> 00:22:05,440
better the bag and you can also rerun

00:22:00,379 --> 00:22:05,440
your single slice if something go man

00:22:07,779 --> 00:22:13,869
ok this is the German totez class of

00:22:11,259 --> 00:22:18,549
course I don't want to explain you how

00:22:13,869 --> 00:22:20,499
we write our code it's just for let you

00:22:18,549 --> 00:22:24,009
understand what you can do by override

00:22:20,499 --> 00:22:27,519
some common methods of the salary test

00:22:24,009 --> 00:22:29,409
page plus the most important thing the

00:22:27,519 --> 00:22:32,409
most important methods I think are they

00:22:29,409 --> 00:22:34,239
call and they after 80 in the main task

00:22:32,409 --> 00:22:36,700
class of celery these methods are

00:22:34,239 --> 00:22:39,009
colored a dessert at at the end of each

00:22:36,700 --> 00:22:41,769
task in this way you have an entry point

00:22:39,009 --> 00:22:43,839
an exit point and if you need to

00:22:41,769 --> 00:22:45,849
implement some common behavior to all

00:22:43,839 --> 00:22:49,149
your tasks of your teeth system you can

00:22:45,849 --> 00:22:52,929
I don't know for now was simply create a

00:22:49,149 --> 00:22:57,369
temporary folder and feed when the test

00:22:52,929 --> 00:23:00,969
finish if you need a simply add atomic

00:22:57,369 --> 00:23:02,619
area where where the task can write you

00:23:00,969 --> 00:23:04,929
can create a temporary folder with the

00:23:02,619 --> 00:23:08,739
idea of the task and when the task is

00:23:04,929 --> 00:23:10,359
finished you can clean it and you can do

00:23:08,739 --> 00:23:14,289
you can do basically what you want you

00:23:10,359 --> 00:23:16,269
can also define some common option to

00:23:14,289 --> 00:23:19,359
your task the max traitorous parameters

00:23:16,269 --> 00:23:21,969
and if you extend your class and not any

00:23:19,359 --> 00:23:25,960
more than salary test based class you

00:23:21,969 --> 00:23:27,580
can have your personalized task is of

00:23:25,960 --> 00:23:34,239
course it depends what you want to do

00:23:27,580 --> 00:23:37,330
and and this is I think is a the two

00:23:34,239 --> 00:23:39,460
important things because a protease you

00:23:37,330 --> 00:23:43,899
can really implement your personal

00:23:39,460 --> 00:23:45,999
behavior you can extend it and also is

00:23:43,899 --> 00:23:47,950
for us is more easy because new

00:23:45,999 --> 00:23:50,049
developer that is going to write new

00:23:47,950 --> 00:23:51,489
task they don't have to care about this

00:23:50,049 --> 00:23:54,700
behavior of the average just to write

00:23:51,489 --> 00:23:56,830
the simple task and don't care about

00:23:54,700 --> 00:23:59,379
what is going on if the temporary folder

00:23:56,830 --> 00:24:02,190
is deleted if we are going to finish our

00:23:59,379 --> 00:24:02,190
space on the disk

00:24:03,640 --> 00:24:12,700
and basically what you can do you can

00:24:10,060 --> 00:24:16,630
also have web monitoring tools for your

00:24:12,700 --> 00:24:20,650
for your your salary system you can

00:24:16,630 --> 00:24:23,410
monitor in your tub your tasks Drogo web

00:24:20,650 --> 00:24:26,530
interface this is three common project

00:24:23,410 --> 00:24:30,060
and I of course I'm going to speak about

00:24:26,530 --> 00:24:34,060
jungle salary and what is jungle salary

00:24:30,060 --> 00:24:37,510
it's just an extension for late you

00:24:34,060 --> 00:24:41,650
monitoring the task troke the jungle web

00:24:37,510 --> 00:24:44,740
admin and also for schedule it I said

00:24:41,650 --> 00:24:46,990
before letter you can define your

00:24:44,740 --> 00:24:49,240
periodic test your Kron in a config file

00:24:46,990 --> 00:24:51,070
or in a database if you are using the

00:24:49,240 --> 00:24:53,470
jungle celery with a my sequel database

00:24:51,070 --> 00:24:55,810
in this case you can schedule your

00:24:53,470 --> 00:24:57,580
periodic task through a my sequel table

00:24:55,810 --> 00:24:59,890
prove your genuine Django admin

00:24:57,580 --> 00:25:02,890
interface you can simply do add periodic

00:24:59,890 --> 00:25:04,750
task run every day this is the task okay

00:25:02,890 --> 00:25:07,690
and you schedule it your task without

00:25:04,750 --> 00:25:13,120
open any config file and without writing

00:25:07,690 --> 00:25:14,890
it anything basically another important

00:25:13,120 --> 00:25:17,560
things of celery that celery have to

00:25:14,890 --> 00:25:20,200
know the task that you have to run this

00:25:17,560 --> 00:25:22,540
does have to be registered this means

00:25:20,200 --> 00:25:25,870
that you have to say to salary where are

00:25:22,540 --> 00:25:29,020
your tasks and we junco celery this is

00:25:25,870 --> 00:25:32,590
don't probed a stolid apps of jungle you

00:25:29,020 --> 00:25:35,110
create a package you create a fast spy

00:25:32,590 --> 00:25:36,820
side this file you import your task

00:25:35,110 --> 00:25:39,640
inside this file or you write your task

00:25:36,820 --> 00:25:44,160
inside this 5 + Prague is tallied up

00:25:39,640 --> 00:25:44,160
salary is going to register these tasks

00:25:44,340 --> 00:25:49,920
this is basically the difference when

00:25:47,020 --> 00:25:52,570
you are running Prague jungle salary

00:25:49,920 --> 00:25:54,640
salary of course you have to launch it

00:25:52,570 --> 00:25:57,910
troch the managed by of your jungle

00:25:54,640 --> 00:26:00,790
project because the settings is going to

00:25:57,910 --> 00:26:02,680
replace the basic salary conf file this

00:26:00,790 --> 00:26:04,480
means that all you write in your salary

00:26:02,680 --> 00:26:07,120
code file have to be righted in as

00:26:04,480 --> 00:26:14,440
settings of chunk of your jungle project

00:26:07,120 --> 00:26:17,590
to this is just a few lines it's what

00:26:14,440 --> 00:26:20,919
you need for run django celery celery

00:26:17,590 --> 00:26:23,409
on jungle you just have to hard to

00:26:20,919 --> 00:26:27,480
distal it up jungle salary call the cell

00:26:23,409 --> 00:26:31,390
set up loader and celery beets scheduler

00:26:27,480 --> 00:26:33,279
hear you say to celery you have to get

00:26:31,390 --> 00:26:37,480
the periodic task that have to be

00:26:33,279 --> 00:26:40,330
executed by the bided from the database

00:26:37,480 --> 00:26:43,210
of jungle you can also have different

00:26:40,330 --> 00:26:46,210
scheduler the config file in this case

00:26:43,210 --> 00:26:51,159
you are saying explicit to use it to use

00:26:46,210 --> 00:26:54,220
the jungle and of course after you have

00:26:51,159 --> 00:26:56,470
to specify the broker settings where I

00:26:54,220 --> 00:27:00,520
have to connect to fetch the message and

00:26:56,470 --> 00:27:02,740
all the standard stuff it is a schema is

00:27:00,520 --> 00:27:08,230
a schema while when you are using jungle

00:27:02,740 --> 00:27:10,630
salary and not only salary as you can

00:27:08,230 --> 00:27:12,789
see you have a salary camp that is

00:27:10,630 --> 00:27:15,850
basically a camera that takes snapshot

00:27:12,789 --> 00:27:17,679
of the states of the tasks every five

00:27:15,850 --> 00:27:21,309
seconds every 10 seconds you can also

00:27:17,679 --> 00:27:25,210
write your your personal class and store

00:27:21,309 --> 00:27:27,870
these results in a table of the jungle

00:27:25,210 --> 00:27:31,929
back end in our case is on my sequel and

00:27:27,870 --> 00:27:34,330
you can simply access to the to the

00:27:31,929 --> 00:27:36,070
jungle admin and see task state and see

00:27:34,330 --> 00:27:38,200
the list of all your task and the state

00:27:36,070 --> 00:27:41,529
if is running though if it's tufted of

00:27:38,200 --> 00:27:45,279
something go ahead and as you can see

00:27:41,529 --> 00:27:49,240
the worker in bit mode is checking which

00:27:45,279 --> 00:27:53,950
schedule it tasker we have on the jungle

00:27:49,240 --> 00:27:57,130
beckons to this is an example or are you

00:27:53,950 --> 00:28:00,429
can see our how looks junco salary you

00:27:57,130 --> 00:28:03,279
have a your chrome tabs intervals your

00:28:00,429 --> 00:28:07,149
periodic tasks that can be intervals or

00:28:03,279 --> 00:28:08,890
chrome tabs and your touch state where

00:28:07,149 --> 00:28:12,010
you can see all the list of your tasks

00:28:08,890 --> 00:28:13,570
and also your workers in Prague the

00:28:12,010 --> 00:28:18,370
interface of workers you can send

00:28:13,570 --> 00:28:21,279
signals for kill eat or restarted this

00:28:18,370 --> 00:28:24,039
is the task state table the celery come

00:28:21,279 --> 00:28:26,950
take snapshot throw Gavin from the

00:28:24,039 --> 00:28:28,990
worker and store the status on this

00:28:26,950 --> 00:28:32,130
table is a temporary table of course

00:28:28,990 --> 00:28:35,550
every day normally there is a

00:28:32,130 --> 00:28:38,410
celery task that clean this table

00:28:35,550 --> 00:28:42,220
because it's just such as real-time

00:28:38,410 --> 00:28:45,100
monitoring tool where you can see all

00:28:42,220 --> 00:28:46,840
your tasks you can also go inside see

00:28:45,100 --> 00:28:49,680
the details if there is an exception

00:28:46,840 --> 00:28:52,600
which exception is and stuff like that

00:28:49,680 --> 00:28:56,680
now here you have the monitoring you can

00:28:52,600 --> 00:29:00,010
schedule a periodic task if I want to

00:28:56,680 --> 00:29:02,140
run a task manually I say okay I want to

00:29:00,010 --> 00:29:05,560
launch a new task that is not scheduled

00:29:02,140 --> 00:29:07,750
yet okay you have to use a shell you

00:29:05,560 --> 00:29:10,420
have to log in on a machine or you have

00:29:07,750 --> 00:29:14,950
to call the delimited by manually then

00:29:10,420 --> 00:29:17,110
this is just a simple things we just add

00:29:14,950 --> 00:29:19,930
a little extension it's just 10 minutes

00:29:17,110 --> 00:29:22,690
because you just have to color the

00:29:19,930 --> 00:29:26,740
delimiter to track the a jungle view and

00:29:22,690 --> 00:29:29,260
in this way you are able to to run one

00:29:26,740 --> 00:29:30,850
of the register a task on your system by

00:29:29,260 --> 00:29:33,430
the web interface this means that you

00:29:30,850 --> 00:29:36,970
can run it from your phone or from where

00:29:33,430 --> 00:29:38,620
we were everywhere it's I mean maybe is

00:29:36,970 --> 00:29:40,960
not the best things of this world but

00:29:38,620 --> 00:29:42,700
sometimes it's useful when you are on

00:29:40,960 --> 00:29:46,090
the beach and the bus call you and say

00:29:42,700 --> 00:29:47,500
the tags are not up to date what we have

00:29:46,090 --> 00:29:50,800
to do now you don't have to come back

00:29:47,500 --> 00:29:55,210
home you can schedule the task directly

00:29:50,800 --> 00:29:59,980
from your phone another things is from

00:29:55,210 --> 00:30:02,200
the task state table if I start fail and

00:29:59,980 --> 00:30:06,790
I want to run it manually with the same

00:30:02,200 --> 00:30:09,040
arcs like the same way we just have a

00:30:06,790 --> 00:30:11,560
little button for around the task again

00:30:09,040 --> 00:30:15,970
with the same mugs and this is just a

00:30:11,560 --> 00:30:18,430
facilities for dole lose so much time

00:30:15,970 --> 00:30:20,530
when you want to rerun a task on just

00:30:18,430 --> 00:30:22,650
test a new task on the production

00:30:20,530 --> 00:30:22,650
environment

00:30:26,980 --> 00:30:36,400
a lot of things that thought our

00:30:31,540 --> 00:30:38,679
environment needs is a unique dust okay

00:30:36,400 --> 00:30:42,280
you have the rate limit basically in

00:30:38,679 --> 00:30:46,179
salary you can say you can run for now

00:30:42,280 --> 00:30:48,160
until 10 minutes this task after it have

00:30:46,179 --> 00:30:51,669
to be the only one of this type that

00:30:48,160 --> 00:30:54,010
have to run on the system but it's just

00:30:51,669 --> 00:30:57,160
something specifics and can be done on

00:30:54,010 --> 00:31:01,090
the task type what we was needing also

00:30:57,160 --> 00:31:03,580
is onion octets but also narcs an

00:31:01,090 --> 00:31:07,210
example I have a task that upload albums

00:31:03,580 --> 00:31:11,260
or regulate starts about a single album

00:31:07,210 --> 00:31:13,960
then the artists is on album ID maybe I

00:31:11,260 --> 00:31:16,750
don't want that to task that calculated

00:31:13,960 --> 00:31:19,000
thoughts of an album have to ramen have

00:31:16,750 --> 00:31:22,059
to run at the same time on the same

00:31:19,000 --> 00:31:25,299
album but they can run on different

00:31:22,059 --> 00:31:31,179
albums then we just define a list of the

00:31:25,299 --> 00:31:33,669
settings for say you have to be unique

00:31:31,179 --> 00:31:35,620
on your arguments this means that you

00:31:33,669 --> 00:31:37,510
can calculate stats of two different

00:31:35,620 --> 00:31:40,150
albums at the same time but not of the

00:31:37,510 --> 00:31:42,340
same album because they are going to use

00:31:40,150 --> 00:31:45,040
it some common resources and you can

00:31:42,340 --> 00:31:48,250
have wrong numbers of your stats or

00:31:45,040 --> 00:31:50,740
other problems okay our solution maybe

00:31:48,250 --> 00:31:53,710
is not the best we use a MongoDB for

00:31:50,740 --> 00:31:55,780
right and release Lux and as I explained

00:31:53,710 --> 00:31:57,700
before a truck the coal and after rated

00:31:55,780 --> 00:32:01,020
method you can also do these things you

00:31:57,700 --> 00:32:03,520
can check if there is a luxe and you can

00:32:01,020 --> 00:32:07,960
then write with the task if there is a

00:32:03,520 --> 00:32:09,940
lot or simply throw out it best solution

00:32:07,960 --> 00:32:13,960
can be a cache of vehicle file system

00:32:09,940 --> 00:32:20,260
basically I'm not the one that have to

00:32:13,960 --> 00:32:24,309
say that we will see this is an example

00:32:20,260 --> 00:32:26,350
oh how we define our you unique tasks

00:32:24,309 --> 00:32:27,970
okay maybe it's not the best way you can

00:32:26,350 --> 00:32:31,179
imagine if you have a lot of tasks in

00:32:27,970 --> 00:32:33,730
your settings the unique tasks variable

00:32:31,179 --> 00:32:35,919
will be very big and we also say what

00:32:33,730 --> 00:32:38,320
they have to do if there is a lock

00:32:35,919 --> 00:32:40,630
because probably if there is a lock you

00:32:38,320 --> 00:32:42,370
want to reschedule the task again or

00:32:40,630 --> 00:32:45,220
you don't get you can also throw out it

00:32:42,370 --> 00:32:47,590
you can also keep it leave it fail

00:32:45,220 --> 00:32:50,170
because you don't care and then you have

00:32:47,590 --> 00:32:51,820
a lot on type there is some tests that

00:32:50,170 --> 00:32:54,850
can run with different arguments and

00:32:51,820 --> 00:32:57,460
some task that don't have to run also if

00:32:54,850 --> 00:33:03,030
they have different arguments this is of

00:32:57,460 --> 00:33:07,510
course a special special case is our

00:33:03,030 --> 00:33:09,760
case study but maybe unique task i think

00:33:07,510 --> 00:33:15,390
is something that can be useful to a lot

00:33:09,760 --> 00:33:18,460
of people and okay this is a little code

00:33:15,390 --> 00:33:21,820
that it's just check if there is a lock

00:33:18,460 --> 00:33:24,640
on start and if there is a and pray to

00:33:21,820 --> 00:33:27,940
the task or fail it and of course when

00:33:24,640 --> 00:33:31,750
the task finish that the deluxe Eve is

00:33:27,940 --> 00:33:35,230
released as you can see if your server

00:33:31,750 --> 00:33:38,980
go down if your process is kill it

00:33:35,230 --> 00:33:40,810
without calling the after return method

00:33:38,980 --> 00:33:43,870
you have steal your locks that is in the

00:33:40,810 --> 00:33:47,560
in the MongoDB this is no so good maybe

00:33:43,870 --> 00:33:50,530
we'll be nice to add an explanation for

00:33:47,560 --> 00:33:55,870
out expired deluxe you see in the future

00:33:50,530 --> 00:34:06,090
and another thing sorry the computer is

00:33:55,870 --> 00:34:10,750
going alone okay

00:34:06,090 --> 00:34:13,840
okay another problem of salary is the

00:34:10,750 --> 00:34:15,970
logging basically when you have a lot of

00:34:13,840 --> 00:34:19,060
workers that are running on different

00:34:15,970 --> 00:34:21,130
servers maybe sometimes you need a

00:34:19,060 --> 00:34:23,320
centralized logging you want to read the

00:34:21,130 --> 00:34:27,570
logs in only one place or maybe you want

00:34:23,320 --> 00:34:30,250
also to filter it because you don't want

00:34:27,570 --> 00:34:32,409
sometimes when you execute a task you

00:34:30,250 --> 00:34:35,710
don't know exactly on which worker will

00:34:32,409 --> 00:34:37,570
be executed on which machine but with

00:34:35,710 --> 00:34:39,669
salary the logger is a bit difficult

00:34:37,570 --> 00:34:42,760
because you have different loggers the

00:34:39,669 --> 00:34:45,400
same handler for salaries is added to

00:34:42,760 --> 00:34:49,510
different loggers when salary do logs on

00:34:45,400 --> 00:34:52,030
file is the same endler file entler

00:34:49,510 --> 00:34:55,659
added different object what does it mean

00:34:52,030 --> 00:34:58,450
that if you get the main logger the

00:34:55,659 --> 00:35:01,870
celery one you will have back only the

00:34:58,450 --> 00:35:04,930
main process logs and not all logs from

00:35:01,870 --> 00:35:08,620
output worker or from all tax then

00:35:04,930 --> 00:35:12,460
extend logging was a bit freaky because

00:35:08,620 --> 00:35:14,920
I was just seniors for override the

00:35:12,460 --> 00:35:17,140
whole logging procedure of salary and

00:35:14,920 --> 00:35:19,390
then you will lose also the log on file

00:35:17,140 --> 00:35:22,420
and you have to write a tour just look

00:35:19,390 --> 00:35:25,390
at the source code and reproduce it but

00:35:22,420 --> 00:35:28,840
after the last version is just my little

00:35:25,390 --> 00:35:33,130
contribution you can get back to your

00:35:28,840 --> 00:35:35,290
locker after it set up it and then you

00:35:33,130 --> 00:35:40,090
can add your handler and you can extend

00:35:35,290 --> 00:35:42,970
it without to write anything of course

00:35:40,090 --> 00:35:46,840
insulative basically you have a as you

00:35:42,970 --> 00:35:49,210
say before other you see before three

00:35:46,840 --> 00:35:51,010
main loggers basically the single auger

00:35:49,210 --> 00:35:53,590
of the task the logger of the main

00:35:51,010 --> 00:36:02,020
process at the logger of the simple pull

00:35:53,590 --> 00:36:04,990
worker this is actually what you have to

00:36:02,020 --> 00:36:07,510
do for duo centralized login with salary

00:36:04,990 --> 00:36:10,600
you just have to import you the seniors

00:36:07,510 --> 00:36:14,020
and connect to these signals in this way

00:36:10,600 --> 00:36:18,060
every time a logger is set up it you can

00:36:14,020 --> 00:36:19,190
get get it back and adding a new handler

00:36:18,060 --> 00:36:21,829
like

00:36:19,190 --> 00:36:24,200
celery do in our case we are using a

00:36:21,829 --> 00:36:27,140
syslog server then we add another and

00:36:24,200 --> 00:36:30,349
enter for the scissor for the syslog

00:36:27,140 --> 00:36:32,690
server we specify the same format of

00:36:30,349 --> 00:36:35,480
salaries specify a new level and we

00:36:32,690 --> 00:36:37,849
simply add them and end this is all you

00:36:35,480 --> 00:36:44,200
need for centralized logging actually

00:36:37,849 --> 00:36:44,200
with celery and that's basically all

00:36:55,119 --> 00:37:07,670
questions is there any way to interact

00:37:04,910 --> 00:37:12,550
with the tasks while they're running I

00:37:07,670 --> 00:37:16,190
mean it can be a kind of task be

00:37:12,550 --> 00:37:20,060
configured to stop and wait for events

00:37:16,190 --> 00:37:27,500
to happen like for example signal from a

00:37:20,060 --> 00:37:31,760
user or something else salary supports

00:37:27,500 --> 00:37:34,280
also event library inside the task then

00:37:31,760 --> 00:37:38,329
you can also use this for wait for

00:37:34,280 --> 00:37:41,510
something then we see event and haven't

00:37:38,329 --> 00:37:46,780
led to I think GM is the main one and I

00:37:41,510 --> 00:37:46,780
mean event let is the back pick up one

00:37:51,880 --> 00:37:58,510
direct interaction you mean with single

00:37:55,510 --> 00:37:58,510
would

00:38:00,270 --> 00:38:08,440
yeah yeah you can interact with tasks

00:38:05,800 --> 00:38:11,020
basically you can rate limited you can

00:38:08,440 --> 00:38:13,360
kill it or revoke it if the task car is

00:38:11,020 --> 00:38:17,620
scheduled it but is not executing you

00:38:13,360 --> 00:38:19,600
can pick select the task row shoes on

00:38:17,620 --> 00:38:21,250
the option menu or revoke the task and

00:38:19,600 --> 00:38:24,220
the task is revoke it from the queue or

00:38:21,250 --> 00:38:31,360
can be also kill it while is running on

00:38:24,220 --> 00:38:33,760
the worker no actually there is a also

00:38:31,360 --> 00:38:35,560
rate limit but it's just for sadies task

00:38:33,760 --> 00:38:45,580
and up to run in the next 15 minutes

00:38:35,560 --> 00:38:48,130
again not others so my question is how

00:38:45,580 --> 00:38:50,170
much SATA do you need on development

00:38:48,130 --> 00:38:51,940
machines to use salary can it run in

00:38:50,170 --> 00:38:58,540
process or do you need separate servers

00:38:51,940 --> 00:39:03,010
and so on basically it depends what you

00:38:58,540 --> 00:39:06,370
have to do with your worker I mean the

00:39:03,010 --> 00:39:08,950
setup for salary it's quite basic you

00:39:06,370 --> 00:39:14,020
need the library and there is no so much

00:39:08,950 --> 00:39:16,300
dependence dependencies sorry and you

00:39:14,020 --> 00:39:18,370
can also run it on a machine that are

00:39:16,300 --> 00:39:20,080
that are doing different things that

00:39:18,370 --> 00:39:24,700
maybe they offer different service of

00:39:20,080 --> 00:39:28,210
course it depends on how many Lord your

00:39:24,700 --> 00:39:30,010
salary worker create I don't know if

00:39:28,210 --> 00:39:33,550
it's your question maybe try to explain

00:39:30,010 --> 00:39:35,620
better let me try to rephrase it I was

00:39:33,550 --> 00:39:41,790
referring to develop a machines that is

00:39:35,620 --> 00:39:41,790
you say developers personal laptops we

00:39:41,820 --> 00:39:48,010
do they need to set up any I don't know

00:39:44,730 --> 00:39:49,780
AQ MP or whatever it's called servers to

00:39:48,010 --> 00:39:52,690
be able to run the application on their

00:39:49,780 --> 00:39:54,820
own laptop or can it automatically start

00:39:52,690 --> 00:39:56,680
up in the background some may be running

00:39:54,820 --> 00:39:59,130
process without a separate scheduler or

00:39:56,680 --> 00:39:59,130
something

00:40:00,940 --> 00:40:06,190
can be set up to start at Milan when you

00:40:04,630 --> 00:40:12,760
restore the machine and all this stuff

00:40:06,190 --> 00:40:15,220
you mean because no it's sort of it just

00:40:12,760 --> 00:40:18,369
because I what I can say that we have an

00:40:15,220 --> 00:40:20,829
environment that basically he is done

00:40:18,369 --> 00:40:23,050
everything Cologne if they must see if

00:40:20,829 --> 00:40:24,880
the Machine go down you can you can do

00:40:23,050 --> 00:40:26,950
whatever you want with your broker with

00:40:24,880 --> 00:40:37,270
your worker you can restart it and you

00:40:26,950 --> 00:40:39,910
can research your monitoring tool so

00:40:37,270 --> 00:40:42,010
basically for developer it's as easy as

00:40:39,910 --> 00:40:44,710
running around server on Jango you

00:40:42,010 --> 00:40:47,109
installer like you if you like ever you

00:40:44,710 --> 00:40:50,910
want or something I've get installer

00:40:47,109 --> 00:40:54,040
rabbitmq now if your broker you run

00:40:50,910 --> 00:40:57,099
being so managed by seller ed now you

00:40:54,040 --> 00:40:59,319
have a default worker so yeah you need a

00:40:57,099 --> 00:41:01,180
couple terminal windows but that's like

00:40:59,319 --> 00:41:03,460
each worker has one terminal window and

00:41:01,180 --> 00:41:05,260
there's your django ran server and

00:41:03,460 --> 00:41:11,109
that's it it's like five minutes of work

00:41:05,260 --> 00:41:13,119
through your stuff just also for

00:41:11,109 --> 00:41:15,849
specified that you don't need the jungle

00:41:13,119 --> 00:41:18,609
or run salary with managed by on each of

00:41:15,849 --> 00:41:20,770
your workers this is because if your

00:41:18,609 --> 00:41:23,950
workers is only a consumer of task and

00:41:20,770 --> 00:41:26,079
it is not running in Mitt mud you don't

00:41:23,950 --> 00:41:29,680
need to run with managed by you can also

00:41:26,079 --> 00:41:31,750
run without the jungle admin the jungle

00:41:29,680 --> 00:41:34,089
celeriac station because the jungle

00:41:31,750 --> 00:41:36,700
salad extension ha love you too

00:41:34,089 --> 00:41:39,280
scheduled task prob'ly interface and to

00:41:36,700 --> 00:41:42,400
just check the results but this is done

00:41:39,280 --> 00:41:44,589
just for by a little process collared

00:41:42,400 --> 00:41:46,599
celery camp that you run with my to

00:41:44,589 --> 00:41:49,119
manage salary cap this means that you

00:41:46,599 --> 00:41:51,040
can have 10 workers and just one that is

00:41:49,119 --> 00:41:55,680
running with chango salary the other one

00:41:51,040 --> 00:41:55,680
just standard salary also

00:42:03,069 --> 00:42:10,539
so we are running as soon as few months

00:42:06,449 --> 00:42:12,400
salary with kombu as back end and we are

00:42:10,539 --> 00:42:14,709
facing a couple of problems so maybe you

00:42:12,400 --> 00:42:17,739
can comment on that first of all the

00:42:14,709 --> 00:42:21,969
storage and weld at the back end itself

00:42:17,739 --> 00:42:30,309
and as I understood using using MongoDB

00:42:21,969 --> 00:42:32,920
for results right okay so it's four

00:42:30,309 --> 00:42:45,839
results and as the broker back end right

00:42:32,920 --> 00:42:45,839
so for both things okay okay

00:43:12,260 --> 00:43:24,990
okay it will well actually we switched

00:43:23,309 --> 00:43:27,960
off the results because we don't need

00:43:24,990 --> 00:43:30,180
them so we're okay so maybe next

00:43:27,960 --> 00:43:34,109
question about memory leaks which we

00:43:30,180 --> 00:43:36,569
also have and I'll yeah with salary that

00:43:34,109 --> 00:43:45,269
the workers are growing enormously from

00:43:36,569 --> 00:43:47,130
time to time and see yeah yeah yeah well

00:43:45,269 --> 00:43:50,450
it's like it seems like some random

00:43:47,130 --> 00:44:05,869
points so maybe you have any any like

00:43:50,450 --> 00:44:05,869
hints where to look at okay okay

00:44:20,160 --> 00:44:23,160
No

00:44:25,470 --> 00:44:32,650
yeah as in a setting that you can set up

00:44:29,590 --> 00:44:35,290
to to like a threshold and say hey if

00:44:32,650 --> 00:44:41,280
this task exceeds I know some memory

00:44:35,290 --> 00:44:41,280
usage or time just please notify me

00:45:07,369 --> 00:45:14,700
okay what sorry was my first time then I

00:45:12,329 --> 00:45:17,210
speak a bit fast I'm so you know and

00:45:14,700 --> 00:45:17,210

YouTube URL: https://www.youtube.com/watch?v=HgN8rOstPjc


