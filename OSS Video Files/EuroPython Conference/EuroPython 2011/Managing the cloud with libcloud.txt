Title: Managing the cloud with libcloud
Publication date: 2015-04-19
Playlist: EuroPython 2011
Description: 
	[EuroPython 2011] TomaÅ¾ Muraus - 22 June 2011 in "Track Ravioli
"
Captions: 
	00:00:06,010 --> 00:00:12,169
so hi all my name is to marsh and today

00:00:09,080 --> 00:00:14,509
I'm going to talk about lip cloud so

00:00:12,169 --> 00:00:17,119
first let's check out what I'll talk

00:00:14,509 --> 00:00:20,030
about today first I'll tell who I am

00:00:17,119 --> 00:00:22,850
then then I'm going to tell what the lip

00:00:20,030 --> 00:00:25,070
cloud actually is then we are going to

00:00:22,850 --> 00:00:27,470
look at the reasons why library such as

00:00:25,070 --> 00:00:30,050
lip cloud actually exists and why we

00:00:27,470 --> 00:00:32,270
need them later I'm going to tell a bit

00:00:30,050 --> 00:00:35,900
about lip lock history and the community

00:00:32,270 --> 00:00:39,500
and then we look at some examples some

00:00:35,900 --> 00:00:41,480
code and we also look a bit into the

00:00:39,500 --> 00:00:44,300
future what bands do we have for the

00:00:41,480 --> 00:00:48,110
library and in the end there will be

00:00:44,300 --> 00:00:51,380
some time for your questions so like I

00:00:48,110 --> 00:00:53,600
said I'm too much munoz I work for a

00:00:51,380 --> 00:00:56,360
rackspace or a cloud kick where I mostly

00:00:53,600 --> 00:00:59,030
work on back and stuff I'm also author

00:00:56,360 --> 00:01:00,800
of multiple small by train in django

00:00:59,030 --> 00:01:04,790
apps which you can fight on my github

00:01:00,800 --> 00:01:08,659
page also a huge open source support in

00:01:04,790 --> 00:01:13,040
a lover and I'm one of the around ten

00:01:08,659 --> 00:01:15,500
leave Cloud commuters so what is sleep

00:01:13,040 --> 00:01:17,560
cloud lip cloud is a Python library

00:01:15,500 --> 00:01:20,650
which abstract differences between

00:01:17,560 --> 00:01:24,110
different cloud providers ap ice and

00:01:20,650 --> 00:01:27,830
expose exposes all those functionality

00:01:24,110 --> 00:01:31,070
to a nice and easy to use API which

00:01:27,830 --> 00:01:33,560
basically means that lip cloud is some

00:01:31,070 --> 00:01:36,590
kind of abstraction on top of order

00:01:33,560 --> 00:01:40,939
provider AP is some people also call it

00:01:36,590 --> 00:01:45,020
api glue I guess ok that's fine name or

00:01:40,939 --> 00:01:49,670
a fine definition so it basically lip

00:01:45,020 --> 00:01:55,070
cloud turns this is you like a five

00:01:49,670 --> 00:01:56,960
lines of code into like actual server so

00:01:55,070 --> 00:01:59,299
someone won't say it like cloud is a lie

00:01:56,960 --> 00:02:03,079
you run the script put your credentials

00:01:59,299 --> 00:02:05,210
in and you get like an actual server so

00:02:03,079 --> 00:02:07,850
one of the reasons why libraries such as

00:02:05,210 --> 00:02:10,580
if God exists is that you can easily

00:02:07,850 --> 00:02:12,860
choose which provider you use you're not

00:02:10,580 --> 00:02:14,670
locked into a single provider for

00:02:12,860 --> 00:02:18,330
example in this case I used

00:02:14,670 --> 00:02:20,520
rackspace driver but you see the line

00:02:18,330 --> 00:02:22,530
with the three with the gate driver you

00:02:20,520 --> 00:02:24,660
could easily replace this provide the

00:02:22,530 --> 00:02:28,290
rackspace constant with none of the

00:02:24,660 --> 00:02:30,450
other 25 or so provide your constants

00:02:28,290 --> 00:02:32,580
and you would basically get a server at

00:02:30,450 --> 00:02:35,700
the different provider with basically

00:02:32,580 --> 00:02:37,530
changing just the provider constant and

00:02:35,700 --> 00:02:43,739
using different credentials because

00:02:37,530 --> 00:02:45,390
because it's a different provider so

00:02:43,739 --> 00:02:47,550
what is the reason what is the

00:02:45,390 --> 00:02:50,819
motivation why libraries such as lip

00:02:47,550 --> 00:02:53,640
gloss exist first of all cloud standards

00:02:50,819 --> 00:02:57,510
and all the stuff hasn't actually worked

00:02:53,640 --> 00:03:01,140
out there are directions some like 300

00:02:57,510 --> 00:03:03,510
or so long PDFs 300 or so pages long as

00:03:01,140 --> 00:03:05,780
PDF with all the standards but in

00:03:03,510 --> 00:03:08,670
practice no one actually uses them so

00:03:05,780 --> 00:03:11,250
then we need to have projects such as

00:03:08,670 --> 00:03:14,130
lip clouds which actually allow us to

00:03:11,250 --> 00:03:15,870
use different providers in practice so

00:03:14,130 --> 00:03:18,150
basically we need a we needed a some

00:03:15,870 --> 00:03:20,959
kind of way to standardize all the IP is

00:03:18,150 --> 00:03:23,760
and provide users and developers

00:03:20,959 --> 00:03:25,560
easy-to-use interface which they can use

00:03:23,760 --> 00:03:28,980
to interface with many different

00:03:25,560 --> 00:03:31,140
providers so the different providers of

00:03:28,980 --> 00:03:35,070
course provide different API switch

00:03:31,140 --> 00:03:37,859
means some of the api's provide like

00:03:35,070 --> 00:03:39,900
five Metis and for example you when you

00:03:37,859 --> 00:03:42,989
get one method for creating a server and

00:03:39,900 --> 00:03:45,660
other providers provide resources in

00:03:42,989 --> 00:03:48,060
more granular way which means you first

00:03:45,660 --> 00:03:49,980
have a one method to get a server and

00:03:48,060 --> 00:03:53,010
then you also need to call another

00:03:49,980 --> 00:03:54,810
method to to assign an IP address in

00:03:53,010 --> 00:03:56,370
server and so on and basically we

00:03:54,810 --> 00:03:58,290
abstract all those differences so

00:03:56,370 --> 00:04:01,709
basically call a single method and you

00:03:58,290 --> 00:04:04,190
get a server ready to use and the other

00:04:01,709 --> 00:04:06,870
reason is different response formats

00:04:04,190 --> 00:04:11,910
basically as you can see this is an

00:04:06,870 --> 00:04:13,950
example of XML XML is okay most of the

00:04:11,910 --> 00:04:15,930
Python developers don't like it but it's

00:04:13,950 --> 00:04:19,229
at least it's a some kind of standard

00:04:15,930 --> 00:04:21,389
it's pretty easy to parse it but so I

00:04:19,229 --> 00:04:23,490
guess it's okay then some other

00:04:21,389 --> 00:04:25,919
providers like to invent their own

00:04:23,490 --> 00:04:28,050
format basically it's like some

00:04:25,919 --> 00:04:30,780
text-based format which is

00:04:28,050 --> 00:04:33,300
a white space and semicolon delimited

00:04:30,780 --> 00:04:35,940
i'm not sure but some people like to do

00:04:33,300 --> 00:04:38,159
this I mean it's the writing a parser

00:04:35,940 --> 00:04:40,289
it's pretty easy but still why would you

00:04:38,159 --> 00:04:42,120
like invent your own standard why don't

00:04:40,289 --> 00:04:45,360
you just use something we should already

00:04:42,120 --> 00:04:48,479
exist and they're likely still some

00:04:45,360 --> 00:04:50,669
providers which use JSON witches most of

00:04:48,479 --> 00:04:52,979
the others i assume prefer json which is

00:04:50,669 --> 00:04:56,819
easy to use and easy to parts and also

00:04:52,979 --> 00:04:58,680
easy to read so another reason is that

00:04:56,819 --> 00:05:00,210
also different API is different

00:04:58,680 --> 00:05:02,909
providers provide different

00:05:00,210 --> 00:05:04,800
authentication methods one of those

00:05:02,909 --> 00:05:08,250
authentication methods for example if a

00:05:04,800 --> 00:05:10,500
token basically you post your API key

00:05:08,250 --> 00:05:13,500
and username to the provider and you get

00:05:10,500 --> 00:05:15,060
the back at broken basically some kind

00:05:13,500 --> 00:05:17,099
of secret which you pass with each

00:05:15,060 --> 00:05:19,409
request to the provider so basically

00:05:17,099 --> 00:05:21,690
this token authenticates you it's one of

00:05:19,409 --> 00:05:23,190
the methods quite a lot to provide us

00:05:21,690 --> 00:05:25,560
actually use that for example

00:05:23,190 --> 00:05:27,840
rackspace's rec space rather use this

00:05:25,560 --> 00:05:29,940
method the second method of

00:05:27,840 --> 00:05:34,259
authentication is basically H Meg based

00:05:29,940 --> 00:05:36,240
in this case you use your API key to

00:05:34,259 --> 00:05:38,849
sign the message basically to credit H

00:05:36,240 --> 00:05:43,169
my cashews your API key as a secret and

00:05:38,849 --> 00:05:46,349
then you basically pass this signature

00:05:43,169 --> 00:05:48,569
with each of your requests amazon is for

00:05:46,349 --> 00:05:50,819
example one of the providers which use

00:05:48,569 --> 00:05:53,250
this method and this method is also a

00:05:50,819 --> 00:05:55,130
bit tricky because before creating a

00:05:53,250 --> 00:05:57,629
signature you actually need to

00:05:55,130 --> 00:05:59,789
canonicalize both the headers and quay

00:05:57,629 --> 00:06:02,639
strings in your request and sore them

00:05:59,789 --> 00:06:05,330
before actually creating a signature of

00:06:02,639 --> 00:06:07,800
this string so it actually the

00:06:05,330 --> 00:06:10,919
authentication code is the code in new

00:06:07,800 --> 00:06:13,800
cloud which states the most of the

00:06:10,919 --> 00:06:15,860
biggest amount of lines I mean the rest

00:06:13,800 --> 00:06:18,029
of the code is actually pretty small but

00:06:15,860 --> 00:06:19,889
authentication usually has many edge

00:06:18,029 --> 00:06:22,800
cases which we need to handle in a

00:06:19,889 --> 00:06:25,289
transparent way third method is also

00:06:22,800 --> 00:06:28,139
like a pretty simple to use it's just a

00:06:25,289 --> 00:06:31,979
basic odd which means you pass your

00:06:28,139 --> 00:06:35,190
username and usually I use API key in

00:06:31,979 --> 00:06:39,210
the headers basically so standard basic

00:06:35,190 --> 00:06:41,430
author digest and the fourth method

00:06:39,210 --> 00:06:44,110
which is actually pretty

00:06:41,430 --> 00:06:47,889
hard to implement it's not at standard

00:06:44,110 --> 00:06:49,439
is certificate-based method for example

00:06:47,889 --> 00:06:52,439
one of the providers which uses two

00:06:49,439 --> 00:06:56,349
certificate based authentication is

00:06:52,439 --> 00:06:58,719
microsoft azure and also easy to easy to

00:06:56,349 --> 00:07:02,009
basically has two api's one is like a

00:06:58,719 --> 00:07:05,289
query string API which we use which uses

00:07:02,009 --> 00:07:06,879
hmm based authentication which is kinda

00:07:05,289 --> 00:07:10,539
simple to use and the second one is like

00:07:06,879 --> 00:07:12,189
soap api but not one which at least most

00:07:10,539 --> 00:07:14,409
of the people i know who work with Biden

00:07:12,189 --> 00:07:19,120
don't really like soap so we didn't use

00:07:14,409 --> 00:07:22,060
this API so now I'm going to talk about

00:07:19,120 --> 00:07:24,009
a bit about project deep blood was

00:07:22,060 --> 00:07:27,400
originally developed that cloud kick for

00:07:24,009 --> 00:07:29,349
internal use cloud kick is a monitoring

00:07:27,400 --> 00:07:31,389
as a service and server management as a

00:07:29,349 --> 00:07:33,729
service application which basically

00:07:31,389 --> 00:07:35,860
allows you to manage all your service in

00:07:33,729 --> 00:07:38,020
a single dashboard for example you give

00:07:35,860 --> 00:07:41,110
us credentials from different providers

00:07:38,020 --> 00:07:43,240
and we basically pull all the data about

00:07:41,110 --> 00:07:45,340
your service and you can see and manage

00:07:43,240 --> 00:07:46,930
all your service in a single web

00:07:45,340 --> 00:07:48,789
interface and you don't need to log into

00:07:46,930 --> 00:07:51,639
like five different sites and so on and

00:07:48,789 --> 00:07:54,219
later this year the project joined

00:07:51,639 --> 00:07:55,930
Apache Incubator I'm not sure how many

00:07:54,219 --> 00:07:58,419
of you are aware of the Apache Incubator

00:07:55,930 --> 00:08:00,490
but if you want to become an Apache

00:07:58,419 --> 00:08:02,370
project official top level project you

00:08:00,490 --> 00:08:04,990
need to go through the incubator an

00:08:02,370 --> 00:08:06,909
incubator is basically a stage when you

00:08:04,990 --> 00:08:09,639
need to figure out the licensing issues

00:08:06,909 --> 00:08:11,650
you need to show the basically the

00:08:09,639 --> 00:08:13,930
Apache that you know how to manage the

00:08:11,650 --> 00:08:17,169
community the Apache way which means by

00:08:13,930 --> 00:08:19,830
consensus you also need to get some hot

00:08:17,169 --> 00:08:21,879
outside contributors because like I said

00:08:19,830 --> 00:08:24,699
library was originally developed at

00:08:21,879 --> 00:08:26,740
cloud cake which is a company and for a

00:08:24,699 --> 00:08:29,050
successful battery project or to get

00:08:26,740 --> 00:08:30,960
accepted to the top level project you

00:08:29,050 --> 00:08:34,089
need to have multiple independent occur

00:08:30,960 --> 00:08:36,099
contributors which means that not a

00:08:34,089 --> 00:08:38,919
single company car like drive the

00:08:36,099 --> 00:08:41,169
librarian some direction basically so

00:08:38,919 --> 00:08:44,860
there you have multiple independent

00:08:41,169 --> 00:08:49,089
contributors switch beside the road map

00:08:44,860 --> 00:08:52,149
of the library so actually like in May

00:08:49,089 --> 00:08:54,550
we successfully graduated the top-level

00:08:52,149 --> 00:08:55,209
project which means not that now we are

00:08:54,550 --> 00:08:57,129
like on par

00:08:55,209 --> 00:08:59,170
with other battery projects such as web

00:08:57,129 --> 00:09:02,050
servers subversion and Cassandra and so

00:08:59,170 --> 00:09:05,259
on I mean the primary reason for joining

00:09:02,050 --> 00:09:07,209
Apache or more there are more reasons

00:09:05,259 --> 00:09:09,699
why someone would like to join the

00:09:07,209 --> 00:09:12,579
Apache foundation first is recognition

00:09:09,699 --> 00:09:14,769
many people now Apache maybe not the

00:09:12,579 --> 00:09:16,660
Apache foundation but people have at

00:09:14,769 --> 00:09:19,059
least heard of apache web server which

00:09:16,660 --> 00:09:21,550
is good recognition is always good

00:09:19,059 --> 00:09:23,769
second reason is a infrastructure

00:09:21,550 --> 00:09:26,589
support so basically you get as many

00:09:23,769 --> 00:09:28,540
repository access to build machine when

00:09:26,589 --> 00:09:30,970
you can set up for example Jenkins

00:09:28,540 --> 00:09:35,439
buildbot or other continuous integration

00:09:30,970 --> 00:09:38,019
system and so on and the third one is

00:09:35,439 --> 00:09:39,970
also legal protection basically if

00:09:38,019 --> 00:09:42,069
someone violates your trademarks and so

00:09:39,970 --> 00:09:45,009
on a patch has their own team which can

00:09:42,069 --> 00:09:47,230
love those kind of issues and of course

00:09:45,009 --> 00:09:48,970
one of the prerequisites for you to

00:09:47,230 --> 00:09:51,429
joining the Apache or to become a

00:09:48,970 --> 00:09:54,279
top-level project is that your project

00:09:51,429 --> 00:09:56,860
is licensed under the apache 2.2 lensses

00:09:54,279 --> 00:09:59,949
license and I'm not sure if you are over

00:09:56,860 --> 00:10:02,769
how Apache to put all license voice but

00:09:59,949 --> 00:10:05,439
it's very similar to the BSG or the MIT

00:10:02,769 --> 00:10:11,379
license oyes permissive compared to the

00:10:05,439 --> 00:10:14,740
GPL which is not so the lip lock project

00:10:11,379 --> 00:10:16,899
currently has around egg eight active

00:10:14,740 --> 00:10:19,929
commuters but you also have a lot of

00:10:16,899 --> 00:10:22,119
outside contributors which means some

00:10:19,929 --> 00:10:24,699
people which come post a patch and maybe

00:10:22,119 --> 00:10:27,399
never return back but we also have quite

00:10:24,699 --> 00:10:29,230
a lot of active contributors quite a lot

00:10:27,399 --> 00:10:31,329
of actually outside contributors which

00:10:29,230 --> 00:10:33,730
actually come back and stick with the

00:10:31,329 --> 00:10:35,920
project which is nice we also have a

00:10:33,730 --> 00:10:37,899
pretty active mailing list and IRC

00:10:35,920 --> 00:10:42,490
channel where we talk about the library

00:10:37,899 --> 00:10:45,220
and health new users so now let's talk

00:10:42,490 --> 00:10:47,920
let's take a look at the actual API or

00:10:45,220 --> 00:10:50,799
how the lip laude structure currently

00:10:47,920 --> 00:10:53,589
since the version 50 the leaflet has

00:10:50,799 --> 00:10:55,899
three different api's first one is

00:10:53,589 --> 00:10:58,839
compute the API compute the API allows

00:10:55,899 --> 00:11:00,600
you to manage cloud service or you could

00:10:58,839 --> 00:11:03,370
call them virtual servers or whatever

00:11:00,600 --> 00:11:06,009
second API storage allows you to manage

00:11:03,370 --> 00:11:09,100
cloud storage so services such as Amazon

00:11:06,009 --> 00:11:12,100
s3 and Rackspace cloud falls

00:11:09,100 --> 00:11:14,050
and the third API allows you to manage

00:11:12,100 --> 00:11:16,720
load balancers so load vance is a

00:11:14,050 --> 00:11:19,570
service for example amazon provides that

00:11:16,720 --> 00:11:23,830
service and go grid and Rackspace in

00:11:19,570 --> 00:11:26,470
some other providers as well so this is

00:11:23,830 --> 00:11:28,300
a screenshot which shows some of the

00:11:26,470 --> 00:11:31,060
providers which we support which our

00:11:28,300 --> 00:11:33,340
computer IP i support this is actually

00:11:31,060 --> 00:11:35,740
not a bit out of debt and we support a

00:11:33,340 --> 00:11:38,500
few more as you can see we basically

00:11:35,740 --> 00:11:40,090
support small local providers and also

00:11:38,500 --> 00:11:43,330
big ones such as amazon and rackspace

00:11:40,090 --> 00:11:47,530
and others also have a driver for

00:11:43,330 --> 00:11:49,570
OpenStack OpenStack is like I don't know

00:11:47,530 --> 00:11:51,850
if you know oka lyptus but they ok

00:11:49,570 --> 00:11:55,090
lyptus was kind of open cloud platform

00:11:51,850 --> 00:11:57,610
but last year Rackspace and as a joint

00:11:55,090 --> 00:11:59,830
and both of them contributed some code

00:11:57,610 --> 00:12:01,690
and they created a new project OpenStack

00:11:59,830 --> 00:12:04,810
which is a basically open compute

00:12:01,690 --> 00:12:07,240
platform so maybe I don't know in five

00:12:04,810 --> 00:12:09,730
years everyone will use open second

00:12:07,240 --> 00:12:14,710
women we might not need to upload any

00:12:09,730 --> 00:12:16,630
more but let's buy another case so first

00:12:14,710 --> 00:12:19,480
take a letter take a let's take a look

00:12:16,630 --> 00:12:21,370
at terminology basically in the compute

00:12:19,480 --> 00:12:23,470
a p.i we have a few terms which we use

00:12:21,370 --> 00:12:26,590
and which are you through the library

00:12:23,470 --> 00:12:28,750
suites as to know them first term is the

00:12:26,590 --> 00:12:31,360
image you may choose really represents a

00:12:28,750 --> 00:12:33,580
operating system which is installed on

00:12:31,360 --> 00:12:36,760
your server but some providers like

00:12:33,580 --> 00:12:38,650
amazon also provide a bit more reach

00:12:36,760 --> 00:12:41,080
interface with the images which

00:12:38,650 --> 00:12:44,470
basically means you can use images in

00:12:41,080 --> 00:12:46,600
tests templates you can for example pre

00:12:44,470 --> 00:12:49,030
install some software on your operating

00:12:46,600 --> 00:12:51,460
system on your image and save this as a

00:12:49,030 --> 00:12:54,580
template and use this as an image so

00:12:51,460 --> 00:12:56,290
thank you so instead of like getting a

00:12:54,580 --> 00:12:58,240
server with the raw braking system you

00:12:56,290 --> 00:13:01,120
can already get a server with some stuff

00:12:58,240 --> 00:13:04,030
installed on it second concept in our

00:13:01,120 --> 00:13:06,150
library sighs sighs basically represents

00:13:04,030 --> 00:13:09,460
your server configuration which means

00:13:06,150 --> 00:13:11,800
the CPU how many CPUs are available to

00:13:09,460 --> 00:13:14,740
you how much disk space how much RAM and

00:13:11,800 --> 00:13:18,220
so on and one interesting property which

00:13:14,740 --> 00:13:21,850
is nice and you can use for example its

00:13:18,220 --> 00:13:22,810
price price attribute allows if you for

00:13:21,850 --> 00:13:24,520
example

00:13:22,810 --> 00:13:27,100
you with the price attribute allows you

00:13:24,520 --> 00:13:29,200
to find the cheapest provider among the

00:13:27,100 --> 00:13:31,330
one we support for example you want to

00:13:29,200 --> 00:13:34,870
have a server with four gigs of ram and

00:13:31,330 --> 00:13:37,390
I don't know two gigahertz of CPU and

00:13:34,870 --> 00:13:39,880
you can use a bit small list

00:13:37,390 --> 00:13:41,950
comprehensions to find a cheapest

00:13:39,880 --> 00:13:44,320
provider which has a server with the

00:13:41,950 --> 00:13:47,380
size similar to with this one available

00:13:44,320 --> 00:13:49,960
because usually usually providers have

00:13:47,380 --> 00:13:52,150
some sizes like you're pretty fine which

00:13:49,960 --> 00:13:55,510
means you can't like specify I would

00:13:52,150 --> 00:13:57,510
want like two gigs of ram 500 gigabytes

00:13:55,510 --> 00:14:00,240
of disk which is kind of sad because

00:13:57,510 --> 00:14:02,380
cloud actually with a cloud provider

00:14:00,240 --> 00:14:05,529
should provide something like that is

00:14:02,380 --> 00:14:08,220
because usually with those size concepts

00:14:05,529 --> 00:14:10,900
your providers provide some so-called

00:14:08,220 --> 00:14:13,000
stupid configurations for example you

00:14:10,900 --> 00:14:15,610
have two gigabytes of RAM and I don't

00:14:13,000 --> 00:14:18,730
know to your hurts cpu but you only have

00:14:15,610 --> 00:14:23,350
a 30 gigabytes of disk which is kinda no

00:14:18,730 --> 00:14:25,920
sense and another concept or term is

00:14:23,350 --> 00:14:29,440
location location usually represents a

00:14:25,920 --> 00:14:32,140
data center or some region in provider

00:14:29,440 --> 00:14:36,990
for example amazon has multiple regions

00:14:32,140 --> 00:14:40,360
one of the one of them is in UK in

00:14:36,990 --> 00:14:42,280
united states asia and so on and the

00:14:40,360 --> 00:14:44,380
last concept which is the most important

00:14:42,280 --> 00:14:46,990
one in the compute api is note we

00:14:44,380 --> 00:14:49,120
basically refer to service his notes so

00:14:46,990 --> 00:14:51,850
now the object represents a server as

00:14:49,120 --> 00:14:54,550
you can see it has a name and a public

00:14:51,850 --> 00:14:58,630
IP and a provider and a lot more other

00:14:54,550 --> 00:15:00,220
attributes so the computer IP I allows

00:14:58,630 --> 00:15:03,700
you like I said to manage service and

00:15:00,220 --> 00:15:05,890
the base I PR has a like eight method

00:15:03,700 --> 00:15:06,970
which doesn't sounds a lot but you can

00:15:05,890 --> 00:15:09,839
actually do quite a lot of idiots

00:15:06,970 --> 00:15:11,709
methods basically it has a method to

00:15:09,839 --> 00:15:15,490
retrieve a list of all the available

00:15:11,709 --> 00:15:17,620
images sizes and so on by the most

00:15:15,490 --> 00:15:19,870
important method or two most important

00:15:17,620 --> 00:15:22,330
methods are create note and deploying

00:15:19,870 --> 00:15:24,610
out great note basically allows you to

00:15:22,330 --> 00:15:27,040
request the server create a server and

00:15:24,610 --> 00:15:29,320
the deploy note allows you to create a

00:15:27,040 --> 00:15:32,380
server and run some kind of script on it

00:15:29,320 --> 00:15:34,600
basically we create a server we call the

00:15:32,380 --> 00:15:35,880
provided I provider FBI to create a

00:15:34,600 --> 00:15:38,880
server and I've

00:15:35,880 --> 00:15:40,590
we create a server we ssh do it and run

00:15:38,880 --> 00:15:43,260
your script for example you could

00:15:40,590 --> 00:15:45,000
provide a script to install your SSH key

00:15:43,260 --> 00:15:47,010
on the server and to install some kind

00:15:45,000 --> 00:15:49,290
of software for example you could use a

00:15:47,010 --> 00:15:51,120
script installed chef for puppet which

00:15:49,290 --> 00:15:52,980
are configuration management tools on

00:15:51,120 --> 00:15:55,500
the server and basically you could use

00:15:52,980 --> 00:15:57,600
the script to install this in chef and

00:15:55,500 --> 00:15:59,760
puppet would take care of setting up the

00:15:57,600 --> 00:16:01,470
actual configuration on your server for

00:15:59,760 --> 00:16:04,590
example setting it up as a web server

00:16:01,470 --> 00:16:06,420
and so on and because like a set loop

00:16:04,590 --> 00:16:09,120
lot is an abstraction across many

00:16:06,420 --> 00:16:10,890
different provider iprs which means we

00:16:09,120 --> 00:16:13,680
can only provide a common functionality

00:16:10,890 --> 00:16:15,540
which works all the providers but we

00:16:13,680 --> 00:16:17,550
also have so-called extension methods

00:16:15,540 --> 00:16:19,860
which are prefixed with eggs which

00:16:17,550 --> 00:16:23,520
allows you to access provided specific

00:16:19,860 --> 00:16:26,240
functionality for example amazon ec2 has

00:16:23,520 --> 00:16:29,420
a concept of elastic IP addresses and

00:16:26,240 --> 00:16:32,670
there are the only providing which has a

00:16:29,420 --> 00:16:34,860
those concept and for example as the IP

00:16:32,670 --> 00:16:37,230
addresses those RRP addresses which you

00:16:34,860 --> 00:16:39,180
can attach to a different service for

00:16:37,230 --> 00:16:41,190
example this IP address can be attached

00:16:39,180 --> 00:16:43,710
to silver one and when you change your

00:16:41,190 --> 00:16:45,420
mind you can attach it to serve it to

00:16:43,710 --> 00:16:49,950
this is quite this can be quite useful

00:16:45,420 --> 00:16:52,380
for load balancing and and so on and for

00:16:49,950 --> 00:16:53,940
example only amazon provides this and we

00:16:52,380 --> 00:16:58,770
also provide some extension magnet

00:16:53,940 --> 00:17:02,130
methods to manage those IP addresses so

00:16:58,770 --> 00:17:03,990
this is a simple example which uses the

00:17:02,130 --> 00:17:06,959
compute a p.i in this case i also used

00:17:03,990 --> 00:17:09,510
Rackspace driver and need like a

00:17:06,959 --> 00:17:11,579
previously set it stalls your ssh key on

00:17:09,510 --> 00:17:13,470
it and it also installs puppet wizard

00:17:11,579 --> 00:17:17,220
which is a configuration management or

00:17:13,470 --> 00:17:19,520
so you can see in install ssh in slow

00:17:17,220 --> 00:17:22,949
key line there we basically read your

00:17:19,520 --> 00:17:26,250
public SSH key and the second laughter

00:17:22,949 --> 00:17:28,860
that we basically provide a command

00:17:26,250 --> 00:17:30,270
because we assume this will be a you bun

00:17:28,860 --> 00:17:33,870
to base distribution or debian based

00:17:30,270 --> 00:17:36,330
used AB get to install puppet and then

00:17:33,870 --> 00:17:38,850
we basically the last line we use deploy

00:17:36,330 --> 00:17:42,030
node we pass the name of the name of our

00:17:38,850 --> 00:17:44,040
server image in this case I just use the

00:17:42,030 --> 00:17:46,380
first element of the list which means

00:17:44,040 --> 00:17:48,180
it's like kind of like lottery we don't

00:17:46,380 --> 00:17:49,460
know what size will get might be like a

00:17:48,180 --> 00:17:52,559
two

00:17:49,460 --> 00:17:54,780
156 megabytes a litter might be like 20

00:17:52,559 --> 00:17:57,559
gigabytes to the server with 20 we

00:17:54,780 --> 00:18:00,179
gigabytes of RAM in any case we then

00:17:57,559 --> 00:18:04,110
pass all those arguments to the comment

00:18:00,179 --> 00:18:07,500
and then our library will do the magic

00:18:04,110 --> 00:18:10,530
and yet your server with stop installed

00:18:07,500 --> 00:18:14,280
on it second API which has been added

00:18:10,530 --> 00:18:17,010
recently storage API storage API allows

00:18:14,280 --> 00:18:20,040
you to manage cloud storage so called

00:18:17,010 --> 00:18:21,510
maybe key value storage because there is

00:18:20,040 --> 00:18:23,370
usually in cloud storage there is no

00:18:21,510 --> 00:18:26,100
higher here which means you only have

00:18:23,370 --> 00:18:27,929
like that usually container which you

00:18:26,100 --> 00:18:30,150
can imagine like a folder and you have

00:18:27,929 --> 00:18:32,880
an object which is like a file and you

00:18:30,150 --> 00:18:34,740
can your countenance you can put more

00:18:32,880 --> 00:18:36,540
containers you only have a container and

00:18:34,740 --> 00:18:38,490
a fast in a container but you can have a

00:18:36,540 --> 00:18:40,770
you can't have a container inside the

00:18:38,490 --> 00:18:44,700
container so it's some kind of flat

00:18:40,770 --> 00:18:46,460
storage this API is new so you can see

00:18:44,700 --> 00:18:49,049
this page is actually pretty empty

00:18:46,460 --> 00:18:52,260
currently we only have drivers for two

00:18:49,049 --> 00:18:54,510
providers but it's quite easy to add new

00:18:52,260 --> 00:18:58,230
one so we definitely plan to support a

00:18:54,510 --> 00:19:01,549
lot more properties later on so in the

00:18:58,230 --> 00:19:04,230
storage we only have two important terms

00:19:01,549 --> 00:19:06,240
first one is container container like a

00:19:04,230 --> 00:19:09,630
previous set represents you can imagine

00:19:06,240 --> 00:19:12,600
it as a directory or folder some AP is

00:19:09,630 --> 00:19:13,919
also referred to continues as buckets so

00:19:12,600 --> 00:19:16,260
it may be further of this term

00:19:13,919 --> 00:19:18,450
previously and we have an object or

00:19:16,260 --> 00:19:21,090
so-called fall object basically

00:19:18,450 --> 00:19:24,150
represents your file which is usually a

00:19:21,090 --> 00:19:29,730
blob some kind of blob object but it can

00:19:24,150 --> 00:19:31,470
also be like a text file so the storage

00:19:29,730 --> 00:19:34,799
API has a bit more methods in the

00:19:31,470 --> 00:19:36,950
computer API but it's still pretty easy

00:19:34,799 --> 00:19:40,020
to use this as our main goal basically

00:19:36,950 --> 00:19:42,450
provide common APR with its leaves a

00:19:40,020 --> 00:19:44,549
Maltese method as possible so basically

00:19:42,450 --> 00:19:47,160
you can get up and running and playing

00:19:44,549 --> 00:19:49,049
with it without like reading them are at

00:19:47,160 --> 00:19:51,450
10 pages of documentation you should be

00:19:49,049 --> 00:19:54,450
able to use it we're just looking at the

00:19:51,450 --> 00:19:56,549
method signatures and so on in this case

00:19:54,450 --> 00:19:59,580
you can see we have a lot of methods for

00:19:56,549 --> 00:20:01,740
like deleting or creating an object to

00:19:59,580 --> 00:20:02,340
most more interesting once or one in

00:20:01,740 --> 00:20:04,830
tally

00:20:02,340 --> 00:20:08,010
so download object in stream and upload

00:20:04,830 --> 00:20:09,929
or extreme you preferred of Python

00:20:08,010 --> 00:20:13,350
generators which is our which are a

00:20:09,929 --> 00:20:16,799
pretty nice concept and those those

00:20:13,350 --> 00:20:18,840
methods allow you to basically pass in

00:20:16,799 --> 00:20:21,750
the download object stream you get back

00:20:18,840 --> 00:20:24,059
generator which means file isn't

00:20:21,750 --> 00:20:25,620
downloaded to disk and save locally but

00:20:24,059 --> 00:20:28,860
you can you basically get a generator

00:20:25,620 --> 00:20:31,309
and you can do whatever you want with it

00:20:28,860 --> 00:20:34,559
which means you can like only read our

00:20:31,309 --> 00:20:37,230
first 500 by so far or and maybe stream

00:20:34,559 --> 00:20:41,820
it directly over HTTP or you can save it

00:20:37,230 --> 00:20:43,380
to a disk yourself here is a and here we

00:20:41,820 --> 00:20:46,260
also have it similar to the compute the

00:20:43,380 --> 00:20:49,500
API the extension functionality which

00:20:46,260 --> 00:20:53,520
provides or exposes provided specific

00:20:49,500 --> 00:20:56,760
functionality here is another example in

00:20:53,520 --> 00:20:59,669
this example we use the upload of object

00:20:56,760 --> 00:21:02,159
while stream method this method like a

00:20:59,669 --> 00:21:04,380
previous that works with streams or

00:21:02,159 --> 00:21:08,120
so-called generators or actually I

00:21:04,380 --> 00:21:11,580
iterators which means this example will

00:21:08,120 --> 00:21:14,549
we directly stream your will compress

00:21:11,580 --> 00:21:16,649
all the files in the pad specified in

00:21:14,549 --> 00:21:20,700
directory variable and will directly

00:21:16,649 --> 00:21:22,770
stream this compressed stream to the in

00:21:20,700 --> 00:21:25,320
this case cloud file so Rackspace cloud

00:21:22,770 --> 00:21:27,480
files provider this is pretty useful for

00:21:25,320 --> 00:21:29,159
creating backups because it means that

00:21:27,480 --> 00:21:31,620
the stream will be directly streamed to

00:21:29,159 --> 00:21:33,570
the storage provider which means you

00:21:31,620 --> 00:21:35,370
don't need to like a buffer data on disk

00:21:33,570 --> 00:21:37,770
which means you can have only a few

00:21:35,370 --> 00:21:40,380
gigabytes of free space on disk when you

00:21:37,770 --> 00:21:44,539
but you can actually create a backup of

00:21:40,380 --> 00:21:47,850
like 50 gigabytes of actual data on disk

00:21:44,539 --> 00:21:50,309
so basically just open a subprocess

00:21:47,850 --> 00:21:53,190
which runs star to compress our

00:21:50,309 --> 00:21:55,679
directory and then in the while loop is

00:21:53,190 --> 00:21:58,559
the actual method which does the upload

00:21:55,679 --> 00:22:01,529
so basically pezzi iterators to the

00:21:58,559 --> 00:22:03,330
method which is pipe SG out pipe as the

00:22:01,529 --> 00:22:05,700
author has a read method which basically

00:22:03,330 --> 00:22:07,289
you can pass anything which has a root

00:22:05,700 --> 00:22:10,830
method and return some data to the

00:22:07,289 --> 00:22:13,080
upload of request to our method and then

00:22:10,830 --> 00:22:15,070
basically did to get safe in this case

00:22:13,080 --> 00:22:18,610
to rackspace cloud files

00:22:15,070 --> 00:22:21,370
and the last API is the load balancer

00:22:18,610 --> 00:22:25,659
API this one is also new has been added

00:22:21,370 --> 00:22:26,980
in version of 50 which means as you can

00:22:25,659 --> 00:22:29,889
see it's similar to the cloud files

00:22:26,980 --> 00:22:32,139
frequently only support to providers but

00:22:29,889 --> 00:22:34,210
same is with storage we do plan to

00:22:32,139 --> 00:22:37,029
support more and if you want you can

00:22:34,210 --> 00:22:40,090
also contribute if if you know someone

00:22:37,029 --> 00:22:42,580
who provides load balancers or maybe you

00:22:40,090 --> 00:22:44,710
provide this functionality you can come

00:22:42,580 --> 00:22:48,100
on IRC and we'll help you create a

00:22:44,710 --> 00:22:50,110
driver for your provider in the load

00:22:48,100 --> 00:22:52,450
balancer API we have three so-called

00:22:50,110 --> 00:22:54,730
important terms first is the load

00:22:52,450 --> 00:22:56,559
balancer the load balancer object

00:22:54,730 --> 00:22:59,889
represent the actual load balancing

00:22:56,559 --> 00:23:01,809
instance so the actual load balance of

00:22:59,889 --> 00:23:05,230
which usually listens on a single board

00:23:01,809 --> 00:23:06,789
and load balance is your request the

00:23:05,230 --> 00:23:09,429
second theorem is member a member

00:23:06,789 --> 00:23:12,340
represents a server usually the server

00:23:09,429 --> 00:23:14,019
which is which is a member of this load

00:23:12,340 --> 00:23:17,009
balancer which means the load balancer

00:23:14,019 --> 00:23:20,700
will balance across all the members

00:23:17,009 --> 00:23:22,690
member is usually usually important

00:23:20,700 --> 00:23:25,840
information about the members are just

00:23:22,690 --> 00:23:28,659
the IP address in the port and the third

00:23:25,840 --> 00:23:32,320
term is so called algorithm algorithm

00:23:28,659 --> 00:23:35,049
specify how load balancer load balance

00:23:32,320 --> 00:23:37,629
the request first one is random which

00:23:35,049 --> 00:23:40,269
tells us sends a request to the random

00:23:37,629 --> 00:23:42,190
member second one is round-robin which

00:23:40,269 --> 00:23:45,009
uses round-robin algorithm for those

00:23:42,190 --> 00:23:47,379
four doing balancing which means you for

00:23:45,009 --> 00:23:48,970
example if you have four servers further

00:23:47,379 --> 00:23:50,590
requests will go to server mod then

00:23:48,970 --> 00:23:52,350
servitude and serve a tree then server

00:23:50,590 --> 00:23:56,049
for and then server one and so on and

00:23:52,350 --> 00:23:58,330
the last algorithm is more interesting

00:23:56,049 --> 00:24:00,370
one its list crash connections which

00:23:58,330 --> 00:24:02,289
means the load minds have will redirect

00:24:00,370 --> 00:24:04,570
the request to the server which

00:24:02,289 --> 00:24:08,860
currently has the disk active

00:24:04,570 --> 00:24:11,110
connections load- the API is also pretty

00:24:08,860 --> 00:24:14,049
simple thing it has all together like

00:24:11,110 --> 00:24:16,480
ten methods first matters is these

00:24:14,049 --> 00:24:18,220
particles basically you need to specify

00:24:16,480 --> 00:24:20,799
a protocol when you provide a load

00:24:18,220 --> 00:24:24,039
balancer this is the actual for example

00:24:20,799 --> 00:24:27,549
this usually this is HTTP because your

00:24:24,039 --> 00:24:28,659
balance repairs be come across your HTTP

00:24:27,549 --> 00:24:30,340
or web servers

00:24:28,659 --> 00:24:32,729
and it also has some other methods for

00:24:30,340 --> 00:24:35,590
like creating a balance in destroying

00:24:32,729 --> 00:24:37,169
attaching balance at that compute node

00:24:35,590 --> 00:24:39,970
is one of the interesting one because

00:24:37,169 --> 00:24:42,249
you can use the note object from the

00:24:39,970 --> 00:24:44,739
compute a p.i and pass it to this method

00:24:42,249 --> 00:24:47,169
to n basically in the background we'll

00:24:44,739 --> 00:24:49,899
just read the note IP address attribute

00:24:47,169 --> 00:24:51,999
and some other attribute and set up the

00:24:49,899 --> 00:24:56,139
and add this note as a member to the

00:24:51,999 --> 00:24:59,979
loadmaster as you also have met it for

00:24:56,139 --> 00:25:02,559
detaching and a member and also for

00:24:59,979 --> 00:25:05,440
listing members and the same is in the

00:25:02,559 --> 00:25:07,720
other api's you also have a method for

00:25:05,440 --> 00:25:11,080
accessing provided specific

00:25:07,720 --> 00:25:15,190
functionality here's a simple example

00:25:11,080 --> 00:25:18,009
with the load balancer API in this case

00:25:15,190 --> 00:25:21,609
we just create a new balancer we

00:25:18,009 --> 00:25:24,700
initially add two members with both of

00:25:21,609 --> 00:25:27,789
them using an ort 8080 which means this

00:25:24,700 --> 00:25:30,759
this could be a HTTP server actually it

00:25:27,789 --> 00:25:34,119
is because use protocol HTTP which means

00:25:30,759 --> 00:25:37,559
this servers are you most likely running

00:25:34,119 --> 00:25:39,909
the HTTP web application server and

00:25:37,559 --> 00:25:45,700
basically with a credit balance circle

00:25:39,909 --> 00:25:49,059
we create a bouncer in this case we also

00:25:45,700 --> 00:25:51,759
used our infinite the while loop where

00:25:49,059 --> 00:25:54,009
we basically we pull while the because

00:25:51,759 --> 00:25:56,080
usually when you create a loadmaster lot

00:25:54,009 --> 00:25:59,019
man cigarettes created but it takes a

00:25:56,080 --> 00:26:01,269
while until it's ready because it's not

00:25:59,019 --> 00:26:02,739
like I want a lot band so now it's

00:26:01,269 --> 00:26:06,220
usually I want it now but you actually

00:26:02,739 --> 00:26:08,919
get it in maybe a few minutes in this

00:26:06,220 --> 00:26:10,779
case we pulled because before you can

00:26:08,919 --> 00:26:13,119
actually do with something with a lot of

00:26:10,779 --> 00:26:15,159
ice if of course needs needs to come

00:26:13,119 --> 00:26:19,710
online which means we needs to wait

00:26:15,159 --> 00:26:19,710
until the state's changes to running

00:26:25,180 --> 00:26:30,310
okay so now let's take a look at plans

00:26:27,880 --> 00:26:31,960
for the future its first like I said

00:26:30,310 --> 00:26:34,450
we've our first goal for the next

00:26:31,960 --> 00:26:37,300
releases is to provide users with more

00:26:34,450 --> 00:26:40,210
drivers free storage and the new load

00:26:37,300 --> 00:26:43,170
men sir AP is we also plan to support

00:26:40,210 --> 00:26:47,710
more services such as dns is a service

00:26:43,170 --> 00:26:49,360
which is also quite a useful service and

00:26:47,710 --> 00:26:52,360
there are already many existing

00:26:49,360 --> 00:26:56,080
providers such as Amazon surigao and so

00:26:52,360 --> 00:26:59,080
on we also blend the support CDN CDN is

00:26:56,080 --> 00:27:02,260
kinda related and by to the storage so

00:26:59,080 --> 00:27:04,870
most likely cdns storage will be kind of

00:27:02,260 --> 00:27:07,810
coupled which will make it easier to use

00:27:04,870 --> 00:27:10,930
and we also plan to explore explore

00:27:07,810 --> 00:27:13,060
block storage and maybe even services

00:27:10,930 --> 00:27:17,200
for monitoring such a server density

00:27:13,060 --> 00:27:19,180
cloud geek Uralic and so on one of our

00:27:17,200 --> 00:27:21,940
goals for the future is also to improve

00:27:19,180 --> 00:27:24,190
the pricing data distribution the

00:27:21,940 --> 00:27:27,370
setting is that not all of the providers

00:27:24,190 --> 00:27:30,640
provide api's for retrieving prices of

00:27:27,370 --> 00:27:32,590
your of the servers which means that we

00:27:30,640 --> 00:27:35,410
need to check the provider website and

00:27:32,590 --> 00:27:38,110
save all the pricing data in a JSON file

00:27:35,410 --> 00:27:39,790
we basically distribute this JSON file

00:27:38,110 --> 00:27:42,730
with each release which is less than

00:27:39,790 --> 00:27:45,910
ideal that's why we then to provide a

00:27:42,730 --> 00:27:48,460
better mechanism for distributing this

00:27:45,910 --> 00:27:51,070
data usually it's also it's not a huge

00:27:48,460 --> 00:27:53,740
problem because providers sadly don't

00:27:51,070 --> 00:27:55,330
change the prices that often might not

00:27:53,740 --> 00:27:58,990
be a bad idea if they would decrease

00:27:55,330 --> 00:28:01,180
more often but anyway and for the future

00:27:58,990 --> 00:28:03,910
releases we also plan to revamp the

00:28:01,180 --> 00:28:05,560
whole location concept the problem with

00:28:03,910 --> 00:28:07,990
location is that provide different

00:28:05,560 --> 00:28:10,270
providers exposes locations differently

00:28:07,990 --> 00:28:12,910
for example in Amazon they have like

00:28:10,270 --> 00:28:16,360
four or so locations United States UK

00:28:12,910 --> 00:28:18,370
Asia and Europe and you basically you

00:28:16,360 --> 00:28:20,680
can use same credentials for all the

00:28:18,370 --> 00:28:23,140
locations but with other providers such

00:28:20,680 --> 00:28:25,560
as Rackspace different locations are

00:28:23,140 --> 00:28:27,820
totally separate ingenuity and unities

00:28:25,560 --> 00:28:30,400
different credentials for different

00:28:27,820 --> 00:28:33,190
locations which makes everything a bit

00:28:30,400 --> 00:28:35,890
harder and not so easy to use especially

00:28:33,190 --> 00:28:38,560
if you usually use one provider use it

00:28:35,890 --> 00:28:38,960
use multiplications that's why we want

00:28:38,560 --> 00:28:41,690
to make

00:28:38,960 --> 00:28:46,130
easier and there are also many other

00:28:41,690 --> 00:28:48,500
possible improvements so we also need to

00:28:46,130 --> 00:28:51,200
tell that we are holding a sprint here

00:28:48,500 --> 00:28:53,779
on the weekends so Saturday and Sunday

00:28:51,200 --> 00:28:56,179
so if you want to contribute maybe learn

00:28:53,779 --> 00:28:59,899
more about the library you can join us

00:28:56,179 --> 00:29:04,220
and we'll have fun maybe even write some

00:28:59,899 --> 00:29:07,000
code so that's it now it's time if you

00:29:04,220 --> 00:29:07,000
have any questions

00:29:15,880 --> 00:29:21,559
so what's the difference with Delta

00:29:18,830 --> 00:29:23,870
cloud which is another Apache incubated

00:29:21,559 --> 00:29:25,279
thing yeah Delta cloud is a bit

00:29:23,870 --> 00:29:28,789
different Delta cloud provides

00:29:25,279 --> 00:29:31,309
functionality over HTTP interface which

00:29:28,789 --> 00:29:36,110
would be land language agnostic but we

00:29:31,309 --> 00:29:37,820
provide a Python library so their goals

00:29:36,110 --> 00:29:41,900
are kind of similar but they expose

00:29:37,820 --> 00:29:44,720
their interface in a different way and I

00:29:41,900 --> 00:29:48,010
think Delta clot is also written in Java

00:29:44,720 --> 00:29:48,010
applied if i'm not mistaken

00:29:53,810 --> 00:29:59,420
there are also plans to support never

00:29:56,120 --> 00:30:02,990
Nirvanix sorry there are also plans to

00:29:59,420 --> 00:30:07,220
support near mannix support Vaudrey near

00:30:02,990 --> 00:30:10,070
Vanek's is a CDN oh you mean CDN yeah

00:30:07,220 --> 00:30:11,900
yeah we do grant supports again but will

00:30:10,070 --> 00:30:13,550
mostly likely like I said integrated

00:30:11,900 --> 00:30:16,160
with storage which means you'll probably

00:30:13,550 --> 00:30:21,280
already need to have a storage driver

00:30:16,160 --> 00:30:25,730
and I thought is a thigh storage oh okay

00:30:21,280 --> 00:30:28,370
never heard of it okay but yeah if also

00:30:25,730 --> 00:30:30,590
if you know the API you can like join

00:30:28,370 --> 00:30:32,270
the spin tour join the IRC channel would

00:30:30,590 --> 00:30:40,840
take a look at it and maybe write the

00:30:32,270 --> 00:30:40,840
driver may be a good idea anyone else

00:30:47,420 --> 00:30:57,330
what is the API coverage of for easy to

00:30:53,120 --> 00:31:00,540
like services and my interest is for

00:30:57,330 --> 00:31:04,080
admin routines and managing image is

00:31:00,540 --> 00:31:06,090
like registering and so on yeah we

00:31:04,080 --> 00:31:08,160
actually are easy to lobby does actually

00:31:06,090 --> 00:31:10,050
have quite a lot of extension methods

00:31:08,160 --> 00:31:12,660
from managing elastic IP addresses

00:31:10,050 --> 00:31:14,850
security groups and so on but usually if

00:31:12,660 --> 00:31:16,440
you want more provided specific question

00:31:14,850 --> 00:31:19,110
at you you're probably better off using

00:31:16,440 --> 00:31:21,540
boto library which is an Amazon library

00:31:19,110 --> 00:31:23,550
it's actually funny some users actually

00:31:21,540 --> 00:31:25,410
do is more provided specific

00:31:23,550 --> 00:31:27,420
functionality but they use lip lock

00:31:25,410 --> 00:31:29,970
instead of bottle because it's easier to

00:31:27,420 --> 00:31:32,480
use in its lots imprints more fun to

00:31:29,970 --> 00:31:32,480
work with it

00:31:44,120 --> 00:31:49,860
how do you test all these drivers yeah

00:31:47,220 --> 00:31:52,200
that's also a good question it's not

00:31:49,860 --> 00:31:54,840
that easy currently we use pictures who

00:31:52,200 --> 00:31:56,970
I mean we perform actual testing we

00:31:54,840 --> 00:32:00,270
actually hit they provide your api's we

00:31:56,970 --> 00:32:03,060
do all those calls safety responses in a

00:32:00,270 --> 00:32:05,490
fall and then we when we run tests we

00:32:03,060 --> 00:32:07,590
allow those responses one of our plans

00:32:05,490 --> 00:32:10,320
or goals for the future is also to set

00:32:07,590 --> 00:32:13,200
up like a life testing basically hitting

00:32:10,320 --> 00:32:15,210
the actual provider API but this is hard

00:32:13,200 --> 00:32:16,950
it also basically for example if the

00:32:15,210 --> 00:32:18,780
destroy know doesn't work you'll have a

00:32:16,950 --> 00:32:22,970
server running which means someone who

00:32:18,780 --> 00:32:22,970
need to pay for it this is a bit harder

00:32:27,890 --> 00:32:35,490
hi um I just want to ask if you have any

00:32:32,430 --> 00:32:38,340
plans for a supporting twisted because I

00:32:35,490 --> 00:32:40,470
guess it's using the blocking Thunder

00:32:38,340 --> 00:32:42,750
library yeah that's the problem at cloud

00:32:40,470 --> 00:32:44,850
kick when the library was envisioning

00:32:42,750 --> 00:32:47,430
the vibe internally we also used twist

00:32:44,850 --> 00:32:48,810
it a lot and currently that's what you

00:32:47,430 --> 00:32:51,300
usually do if you interface with the

00:32:48,810 --> 00:32:53,820
blocking API us defer to thread which

00:32:51,300 --> 00:32:55,920
means the action is executed in a tread

00:32:53,820 --> 00:32:57,750
pool which is not ideal and it also

00:32:55,920 --> 00:33:00,240
doesn't map nicely to the synchronous

00:32:57,750 --> 00:33:01,710
concept so we did have some previous

00:33:00,240 --> 00:33:05,160
talk on the remaining hist about

00:33:01,710 --> 00:33:06,720
supporting a synchronous api's and we

00:33:05,160 --> 00:33:09,570
would like to support it but it's

00:33:06,720 --> 00:33:11,490
actually will need to factor quite a lot

00:33:09,570 --> 00:33:14,070
of the library which is because it's

00:33:11,490 --> 00:33:16,830
currently some of the places are

00:33:14,070 --> 00:33:18,600
blocking but going into this direction

00:33:16,830 --> 00:33:22,910
refactoring it and supporting a

00:33:18,600 --> 00:33:22,910
synchronous API it's on our road map

00:33:33,070 --> 00:33:37,350

YouTube URL: https://www.youtube.com/watch?v=R8fC4efkj2s


