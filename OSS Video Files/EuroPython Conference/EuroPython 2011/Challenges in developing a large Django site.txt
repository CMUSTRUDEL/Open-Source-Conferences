Title: Challenges in developing a large Django site
Publication date: 2015-04-19
Playlist: EuroPython 2011
Description: 
	[EuroPython 2011] Simon Willison - 22 June 2011 in "Track Spaghetti"
Captions: 
	00:00:01,660 --> 00:00:16,750
welcome okay am I am I am I amplified it

00:00:12,549 --> 00:00:18,550
sounds like it okay good afternoon so in

00:00:16,750 --> 00:00:20,560
this talk I'm going to be using our

00:00:18,550 --> 00:00:22,570
experiences building lanyard to describe

00:00:20,560 --> 00:00:23,949
some of the tricks we came up with for

00:00:22,570 --> 00:00:25,810
dealing with sort of larger scale

00:00:23,949 --> 00:00:27,910
development with Django and also some of

00:00:25,810 --> 00:00:29,830
the challenges I think still remain and

00:00:27,910 --> 00:00:31,060
the the Django community and web

00:00:29,830 --> 00:00:34,120
frameworks like it should still be

00:00:31,060 --> 00:00:36,370
looking at solving so just for some

00:00:34,120 --> 00:00:39,010
context I'll describe lanyard calm and I

00:00:36,370 --> 00:00:40,360
should mention that lanyard is a large

00:00:39,010 --> 00:00:41,950
application but it's not a huge

00:00:40,360 --> 00:00:44,200
application this if you want to talk

00:00:41,950 --> 00:00:45,579
about disqus style hundreds of service

00:00:44,200 --> 00:00:47,559
scaling then you want to find David

00:00:45,579 --> 00:00:49,329
Kramer but I think lanyards an

00:00:47,559 --> 00:00:51,280
interesting case study here because it's

00:00:49,329 --> 00:00:52,840
a great example of a nap with a small

00:00:51,280 --> 00:00:54,670
development team it's myself doing the

00:00:52,840 --> 00:00:56,800
back-end development and Natalie there

00:00:54,670 --> 00:00:59,410
does the front there's the HTML CSS and

00:00:56,800 --> 00:01:01,359
design work building something which is

00:00:59,410 --> 00:01:02,859
constantly growing as conscious it's

00:01:01,359 --> 00:01:05,440
sort of the sweet spot to django you

00:01:02,859 --> 00:01:07,900
know it enables small teams to build big

00:01:05,440 --> 00:01:10,450
interesting applications start and small

00:01:07,900 --> 00:01:12,430
and then grow them as you go along so I

00:01:10,450 --> 00:01:14,680
think it illustrates a lot of these

00:01:12,430 --> 00:01:16,780
points very nicely now if you haven't

00:01:14,680 --> 00:01:18,400
looked too lanyard yet I'll give you a

00:01:16,780 --> 00:01:20,230
quick overview of what it is just for

00:01:18,400 --> 00:01:22,030
context so lanyards we're trying to

00:01:20,230 --> 00:01:24,280
build the definitive database of

00:01:22,030 --> 00:01:26,650
professional events and speakers so the

00:01:24,280 --> 00:01:29,530
idea is that just like IMDb has a page

00:01:26,650 --> 00:01:31,180
for every film and every film star we

00:01:29,530 --> 00:01:33,190
want to have a page for every conference

00:01:31,180 --> 00:01:35,380
that ever happens every talk at every

00:01:33,190 --> 00:01:37,000
conference every speaker and build this

00:01:35,380 --> 00:01:38,320
up for all of the conference's happened

00:01:37,000 --> 00:01:40,750
in the past everything in the future

00:01:38,320 --> 00:01:42,370
we're also looking at not just

00:01:40,750 --> 00:01:44,440
conferences it's sort of evening

00:01:42,370 --> 00:01:46,510
lectures it's meetups it's bar camps

00:01:44,440 --> 00:01:47,860
it's all of that kind of stuff and the

00:01:46,510 --> 00:01:49,540
reason we want the Stata base is the

00:01:47,860 --> 00:01:51,430
stuff that we can then build on top of

00:01:49,540 --> 00:01:53,380
it so we're already building things like

00:01:51,430 --> 00:01:55,060
social event recommendation where we

00:01:53,380 --> 00:01:56,380
suggest events you might want to go to

00:01:55,060 --> 00:01:59,380
based on what your friends are doing

00:01:56,380 --> 00:02:02,200
event networking tools and an archive of

00:01:59,380 --> 00:02:04,060
slides notes and video of so all of the

00:02:02,200 --> 00:02:05,350
talks that have have video and slides

00:02:04,060 --> 00:02:08,800
release we're trying to collect together

00:02:05,350 --> 00:02:11,560
links to those all in one place so I

00:02:08,800 --> 00:02:13,780
will jump through and quickly show you a

00:02:11,560 --> 00:02:15,130
couple of pages in sight so lanyards on

00:02:13,780 --> 00:02:16,660
the home page you can see the big

00:02:15,130 --> 00:02:18,640
is on today so today it's open source

00:02:16,660 --> 00:02:20,140
bridge in Portland as Europe and of

00:02:18,640 --> 00:02:22,240
course influence there's a big job of

00:02:20,140 --> 00:02:23,650
thing happening in San Jose but really

00:02:22,240 --> 00:02:25,480
we want you to click the yellow button

00:02:23,650 --> 00:02:26,890
to sign into the site because when you

00:02:25,480 --> 00:02:28,240
sign in with your Twitter account we

00:02:26,890 --> 00:02:30,040
look at the people that you're following

00:02:28,240 --> 00:02:31,990
on Twitter and we show you events that

00:02:30,040 --> 00:02:34,600
those people are going to or speaking it

00:02:31,990 --> 00:02:35,940
so when I sign in i get 3 300

00:02:34,600 --> 00:02:39,880
conferences that my friends are going to

00:02:35,940 --> 00:02:42,030
including as a little jerk there's a

00:02:39,880 --> 00:02:44,680
CoffeeScript event in Brighton there's

00:02:42,030 --> 00:02:46,090
dead / hog in the Netherlands there's

00:02:44,680 --> 00:02:47,860
all of these different things coming up

00:02:46,090 --> 00:02:49,510
this is actually a very effective way of

00:02:47,860 --> 00:02:50,980
discovering events because it turns out

00:02:49,510 --> 00:02:52,120
if you follow someone on Twitter and

00:02:50,980 --> 00:02:53,200
they're going to an event then it's

00:02:52,120 --> 00:02:55,300
probably going to be something that

00:02:53,200 --> 00:02:57,070
you'll be interested in from the Python

00:02:55,300 --> 00:02:58,990
point of view we we have rich metadata

00:02:57,070 --> 00:03:00,670
on all of these events so if you go to

00:02:58,990 --> 00:03:02,320
our Python page you can see all of the

00:03:00,670 --> 00:03:05,170
events we know about that relate to

00:03:02,320 --> 00:03:06,640
python and we also index things like

00:03:05,170 --> 00:03:08,020
calls for speakers so we know that there

00:03:06,640 --> 00:03:09,850
are two Python conferences right now

00:03:08,020 --> 00:03:12,610
that are looking for people to speak at

00:03:09,850 --> 00:03:14,200
them and for each conference we have a

00:03:12,610 --> 00:03:16,840
page about the events as I page about

00:03:14,200 --> 00:03:19,030
Europe Python we know 119 people

00:03:16,840 --> 00:03:20,530
speaking at the event we've got 160

00:03:19,030 --> 00:03:22,270
sessions we know where it's happening

00:03:20,530 --> 00:03:25,120
and we know who signed up on the site

00:03:22,270 --> 00:03:28,270
and said that they're attending so I

00:03:25,120 --> 00:03:31,200
don't oh I don't know if I'm active on

00:03:28,270 --> 00:03:33,160
the Wi-Fi I'll just see if that works

00:03:31,200 --> 00:03:35,500
that probably won't work but we also

00:03:33,160 --> 00:03:36,730
have a searchable directory of people

00:03:35,500 --> 00:03:38,290
who are at Europe iphone that we

00:03:36,730 --> 00:03:40,180
launched just just just in time for the

00:03:38,290 --> 00:03:41,740
event and then for each person we try

00:03:40,180 --> 00:03:43,630
and build a profile of all of the talks

00:03:41,740 --> 00:03:45,160
that they've given so this is my profile

00:03:43,630 --> 00:03:46,840
showing talks I'm giving in the future

00:03:45,160 --> 00:03:49,000
all of the talks I've given in the past

00:03:46,840 --> 00:03:50,770
my speaking history but credits all of

00:03:49,000 --> 00:03:53,410
that kind of stuff so we're linkedin has

00:03:50,770 --> 00:03:55,300
sort of your CV online we want to have

00:03:53,410 --> 00:03:57,490
your conference attending and speaking

00:03:55,300 --> 00:03:58,959
career profile and then finally we've

00:03:57,490 --> 00:04:00,910
got a search engine so if you search for

00:03:58,959 --> 00:04:02,620
something like scaling Django you can

00:04:00,910 --> 00:04:04,240
see all of the slides the videos the

00:04:02,620 --> 00:04:06,190
talks people have given about that topic

00:04:04,240 --> 00:04:12,490
from all sorts of different conferences

00:04:06,190 --> 00:04:14,020
all around the world so firstly firstly

00:04:12,490 --> 00:04:15,720
then i'm going to talk about some of the

00:04:14,020 --> 00:04:18,489
tricks that we've used in django which

00:04:15,720 --> 00:04:20,140
they're probably out there somewhere but

00:04:18,489 --> 00:04:21,370
they're not very well documented so I'm

00:04:20,140 --> 00:04:23,130
hoping that they can become more

00:04:21,370 --> 00:04:25,860
widespread in this Jango

00:04:23,130 --> 00:04:27,450
in and Beyond and the first trick is one

00:04:25,860 --> 00:04:28,860
that I'm really excited about at the

00:04:27,450 --> 00:04:31,830
moment because it's just made it into

00:04:28,860 --> 00:04:33,660
Django 1.4 and that's using a

00:04:31,830 --> 00:04:35,060
cryptographic signing for various

00:04:33,660 --> 00:04:37,950
different aspects within the application

00:04:35,060 --> 00:04:39,720
so cryptographic signing if you haven't

00:04:37,950 --> 00:04:41,910
played with it before basically lets you

00:04:39,720 --> 00:04:44,250
take a piece of data add a signature to

00:04:41,910 --> 00:04:46,140
it send it off into an untrusted world

00:04:44,250 --> 00:04:47,670
and then when it comes back you can use

00:04:46,140 --> 00:04:49,500
that signature to confirm that nobody

00:04:47,670 --> 00:04:51,360
tampered with it and sort of while it

00:04:49,500 --> 00:04:52,770
well it was out there so it's fantastic

00:04:51,360 --> 00:04:54,840
for web applications where you've got

00:04:52,770 --> 00:04:56,190
like cookies being sent out to people

00:04:54,840 --> 00:04:58,020
you have people loading up different

00:04:56,190 --> 00:04:59,550
pages you're sending emails there are

00:04:58,020 --> 00:05:01,800
lots and lots of useful things you can

00:04:59,550 --> 00:05:04,110
do with this technique so two examples

00:05:01,800 --> 00:05:06,060
from lanyard first is that we have we

00:05:04,110 --> 00:05:08,010
send out about 3,000 emails a day with

00:05:06,060 --> 00:05:10,080
events that your contacts are attending

00:05:08,010 --> 00:05:12,330
and we have unsubscribe links at the

00:05:10,080 --> 00:05:13,860
bottom of those emails those links look

00:05:12,330 --> 00:05:16,350
something like this that's language calm

00:05:13,860 --> 00:05:18,600
/ UN for and subscribe and then this big

00:05:16,350 --> 00:05:22,350
random string that string is actually a

00:05:18,600 --> 00:05:24,240
its its assigned JSON object which with

00:05:22,350 --> 00:05:26,550
just enough data in it that we know who

00:05:24,240 --> 00:05:28,170
that person is in which account there

00:05:26,550 --> 00:05:29,970
under subscribing for and there's a

00:05:28,170 --> 00:05:31,590
signature so that nobody can fake one of

00:05:29,970 --> 00:05:33,030
those URLs so when you click on that

00:05:31,590 --> 00:05:35,190
link in your email we can quickly

00:05:33,030 --> 00:05:37,410
confirm yes you're a subscriber this is

00:05:35,190 --> 00:05:39,090
your subscription record give you the

00:05:37,410 --> 00:05:40,590
option to unsubscribe but the really

00:05:39,090 --> 00:05:42,810
critical thing is that we don't have to

00:05:40,590 --> 00:05:44,610
store any state to do that so we send

00:05:42,810 --> 00:05:46,740
out 3,000 emails but we don't need to

00:05:44,610 --> 00:05:48,270
store 3,000 unsubscribe them Lee

00:05:46,740 --> 00:05:49,920
generated unsubscribe links that we

00:05:48,270 --> 00:05:53,310
emailed out just so that we can validate

00:05:49,920 --> 00:05:56,280
them when someone clicks on them and so

00:05:53,310 --> 00:05:58,440
a related feature is signing cookies we

00:05:56,280 --> 00:05:59,850
use signed cookies on lanyard for one of

00:05:58,440 --> 00:06:01,440
the most sort of common pieces of

00:05:59,850 --> 00:06:02,670
functionality on any web application

00:06:01,440 --> 00:06:04,110
when you have that little bar at the top

00:06:02,670 --> 00:06:07,800
that says hey you are currently signed

00:06:04,110 --> 00:06:09,600
in as Simon w if you do that with

00:06:07,800 --> 00:06:11,640
sessions it means that you're committing

00:06:09,600 --> 00:06:13,560
to doing a trip to your session storage

00:06:11,640 --> 00:06:15,210
for every single page that anyone views

00:06:13,560 --> 00:06:16,620
on your site like if you're if that's a

00:06:15,210 --> 00:06:18,060
database it you know that's that's quite

00:06:16,620 --> 00:06:19,920
a lot of additional traffic that you're

00:06:18,060 --> 00:06:22,560
adding just for that one little feature

00:06:19,920 --> 00:06:24,660
so if you instead you put the users

00:06:22,560 --> 00:06:25,980
username in assigned cookie then they

00:06:24,660 --> 00:06:27,240
can't tamper with it but whenever you

00:06:25,980 --> 00:06:29,520
see that cookie you can tell who they

00:06:27,240 --> 00:06:31,290
are and you can display that little you

00:06:29,520 --> 00:06:32,009
are signed in as link without needing to

00:06:31,290 --> 00:06:34,199
do any

00:06:32,009 --> 00:06:35,610
trips to storage at all so there are a

00:06:34,199 --> 00:06:37,169
whole bunch of tricks like that which

00:06:35,610 --> 00:06:38,490
can really help when you especially when

00:06:37,169 --> 00:06:40,259
you're scaling across multiple machines

00:06:38,490 --> 00:06:41,849
when you don't want to have all of the

00:06:40,259 --> 00:06:44,279
states still in one place just purchase

00:06:41,849 --> 00:06:46,830
for little features and like I mentioned

00:06:44,279 --> 00:06:48,449
signing is available in Django 1.4 there

00:06:46,830 --> 00:06:49,889
are various levels of the API there's a

00:06:48,449 --> 00:06:51,240
sort of low-level API where you give

00:06:49,889 --> 00:06:53,520
this string and it gives you back a sign

00:06:51,240 --> 00:06:55,619
string but my favorite API is this one

00:06:53,520 --> 00:06:58,050
here which essentially clones pythons

00:06:55,619 --> 00:06:59,879
pickle module so you can take any object

00:06:58,050 --> 00:07:00,869
that can be represented as JSON so in

00:06:59,879 --> 00:07:02,639
this case we've just got a dictionary

00:07:00,869 --> 00:07:05,069
but it can be quite a complex data

00:07:02,639 --> 00:07:07,139
structure and called dumps on it and it

00:07:05,069 --> 00:07:08,819
gives you back a string who looks very

00:07:07,139 --> 00:07:11,309
much like the string I showed you in the

00:07:08,819 --> 00:07:13,050
unsubscribe URL which it's good a

00:07:11,309 --> 00:07:14,490
signature at the end you can send it

00:07:13,050 --> 00:07:16,589
around when it comes back you call

00:07:14,490 --> 00:07:17,969
signing dot loads on that string and

00:07:16,589 --> 00:07:19,919
you'll get back the original object so

00:07:17,969 --> 00:07:21,809
it makes it really convenient to pass

00:07:19,919 --> 00:07:24,270
these things around it's also worth

00:07:21,809 --> 00:07:26,729
noting that the by default the the

00:07:24,270 --> 00:07:28,199
strings that it produces our URL safe

00:07:26,729 --> 00:07:29,279
there are no special characters and

00:07:28,199 --> 00:07:31,529
though it's just upper and lower case

00:07:29,279 --> 00:07:33,479
letters and numbers which means it's

00:07:31,529 --> 00:07:35,309
really easy to stick them in cookies and

00:07:33,479 --> 00:07:36,779
send them out in in emails and put them

00:07:35,309 --> 00:07:39,419
in and URLs and all of that kind of

00:07:36,779 --> 00:07:41,610
thing the other API that's quite quite

00:07:39,419 --> 00:07:43,830
useful is just the API for working with

00:07:41,610 --> 00:07:46,020
signed cookies directly within Django so

00:07:43,830 --> 00:07:47,610
you can call the spawn set signed cookie

00:07:46,020 --> 00:07:49,289
parted in the key in a value and it'll

00:07:47,610 --> 00:07:51,240
set that cookie with a signature and

00:07:49,289 --> 00:07:53,610
then when you call request get signed

00:07:51,240 --> 00:07:55,529
cookie it'll validate that signature

00:07:53,610 --> 00:07:57,209
before it gives you back the object so

00:07:55,529 --> 00:07:58,919
it just makes it really really easy to

00:07:57,209 --> 00:08:00,449
implement some of these tricks and the

00:07:58,919 --> 00:08:02,159
code we're running in lanyard is the

00:08:00,449 --> 00:08:03,990
code it's co-directs a couple of years

00:08:02,159 --> 00:08:06,120
ago which has now been patched and

00:08:03,990 --> 00:08:09,120
turned into proper decent documented

00:08:06,120 --> 00:08:10,649
codons made it into lanyard so that's

00:08:09,120 --> 00:08:13,259
the first trick that's very simple trick

00:08:10,649 --> 00:08:15,330
number two is yet another way of dealing

00:08:13,259 --> 00:08:16,680
with cash and validation I think them

00:08:15,330 --> 00:08:18,180
there's a famous quote that there are

00:08:16,680 --> 00:08:20,099
only two hard problems in computer

00:08:18,180 --> 00:08:22,469
science there's naming things and

00:08:20,099 --> 00:08:23,819
there's invalidating your cash and so

00:08:22,469 --> 00:08:25,949
because we've got a whole bunch of

00:08:23,819 --> 00:08:27,509
caching stuff going on on lanyards we

00:08:25,949 --> 00:08:29,099
have to think quite carefully about how

00:08:27,509 --> 00:08:30,539
we were going to do that lanyards a

00:08:29,099 --> 00:08:33,360
great example of a site where caching is

00:08:30,539 --> 00:08:34,740
quite difficult because you have tens of

00:08:33,360 --> 00:08:36,300
thousands of users who are interacting

00:08:34,740 --> 00:08:38,219
with the site they're modifying it each

00:08:36,300 --> 00:08:39,779
one of them gets a personalized view

00:08:38,219 --> 00:08:41,279
onto the data and if they change

00:08:39,779 --> 00:08:42,510
something and then go and look at it and

00:08:41,279 --> 00:08:44,339
it hasn't changed they assume there's a

00:08:42,510 --> 00:08:44,930
bug and they get angry or they keep on

00:08:44,339 --> 00:08:46,790
changing it

00:08:44,930 --> 00:08:47,990
you know things things get messed up so

00:08:46,790 --> 00:08:49,160
you've got to think quite carefully in

00:08:47,990 --> 00:08:51,279
that kind of site about how you deal

00:08:49,160 --> 00:08:53,450
with this stuff so here's a very simple

00:08:51,279 --> 00:08:56,210
classic caching problem which which

00:08:53,450 --> 00:08:57,560
we're solving here and that's we should

00:08:56,210 --> 00:08:59,330
show you a bunch of conferences that's

00:08:57,560 --> 00:09:01,339
easy select star from conferences where

00:08:59,330 --> 00:09:02,990
Django is one of the topics but then for

00:09:01,339 --> 00:09:05,690
each conference we output the list of

00:09:02,990 --> 00:09:07,010
topics for the conference and this is an

00:09:05,690 --> 00:09:08,450
incredibly common pattern you'll have it

00:09:07,010 --> 00:09:09,620
with blog blog entries where you've got

00:09:08,450 --> 00:09:11,660
multiple offers all of that kind of

00:09:09,620 --> 00:09:13,160
thing but it does mean you can end up

00:09:11,660 --> 00:09:14,930
having 20 things on a page and then

00:09:13,160 --> 00:09:16,580
running an additional 20 sequel queries

00:09:14,930 --> 00:09:17,810
to pull out those topics there's tricks

00:09:16,580 --> 00:09:19,490
you pull the sequel to make it a little

00:09:17,810 --> 00:09:22,339
bit better but it's still it's pretty

00:09:19,490 --> 00:09:25,070
inconvenient to work with that so what

00:09:22,339 --> 00:09:27,110
we've done is some each of the we put

00:09:25,070 --> 00:09:29,660
each of these things into the Django

00:09:27,110 --> 00:09:32,089
template cache and then we have a field

00:09:29,660 --> 00:09:35,149
on the conference object that we can

00:09:32,089 --> 00:09:36,589
modify to invalidate cache entries so if

00:09:35,149 --> 00:09:37,880
you consider our this is a

00:09:36,589 --> 00:09:39,200
straightforward Django model it's a

00:09:37,880 --> 00:09:40,459
conference it's got all the things on

00:09:39,200 --> 00:09:42,500
there and then we have a field called

00:09:40,459 --> 00:09:44,690
cash underscore version which is an

00:09:42,500 --> 00:09:46,459
integer field which starts out at 0 then

00:09:44,690 --> 00:09:48,410
every time the conference is saved we

00:09:46,459 --> 00:09:50,360
increment the cash version before we

00:09:48,410 --> 00:09:51,800
save the conference we also have a

00:09:50,360 --> 00:09:53,779
method that you can call on the

00:09:51,800 --> 00:09:55,850
conference the dot touch method which

00:09:53,779 --> 00:09:57,980
will increment that key as well so what

00:09:55,850 --> 00:10:00,589
this means is that when whenever we're

00:09:57,980 --> 00:10:03,470
dealing with templates we can use that

00:10:00,589 --> 00:10:06,350
conference cash version as part of our

00:10:03,470 --> 00:10:08,300
template cache key and when that

00:10:06,350 --> 00:10:11,270
conference changes anything within that

00:10:08,300 --> 00:10:12,980
fragment will be invalidated so in this

00:10:11,270 --> 00:10:15,350
case for those lists of Vista topics

00:10:12,980 --> 00:10:17,810
were saying cash for 10 hours with a key

00:10:15,350 --> 00:10:20,420
of context conference PK and then

00:10:17,810 --> 00:10:23,209
conference cash version and then HTML

00:10:20,420 --> 00:10:24,800
inside loops through execute the sequel

00:10:23,209 --> 00:10:26,720
Piron it loops through all of the topics

00:10:24,800 --> 00:10:28,820
on the conference but the magic part

00:10:26,720 --> 00:10:31,490
here here is that when you as long as we

00:10:28,820 --> 00:10:33,920
update the cache version when we add or

00:10:31,490 --> 00:10:35,480
remove a topic from the conference these

00:10:33,920 --> 00:10:37,100
fragments will be all being validated

00:10:35,480 --> 00:10:38,990
across the site with very little effort

00:10:37,100 --> 00:10:40,370
on our part because we're dealing with a

00:10:38,990 --> 00:10:42,500
cash in our case we're using memcache

00:10:40,370 --> 00:10:43,880
the the stale versions that aren't being

00:10:42,500 --> 00:10:46,100
retrieved anymore it will just fall out

00:10:43,880 --> 00:10:49,370
of memory after after after after a few

00:10:46,100 --> 00:10:51,140
minutes the other nice thing about this

00:10:49,370 --> 00:10:54,410
trick is it's very easy to do maths

00:10:51,140 --> 00:10:56,450
cache invalidation just by doing it so

00:10:54,410 --> 00:10:57,730
for example if one of our topics has its

00:10:56,450 --> 00:10:59,680
name changed and that means that

00:10:57,730 --> 00:11:01,000
every conference that displays that

00:10:59,680 --> 00:11:03,130
topic is going to be displaying out

00:11:01,000 --> 00:11:04,720
stale data we can run a query that goes

00:11:03,130 --> 00:11:06,610
across all of the conference's attached

00:11:04,720 --> 00:11:08,529
to the topic and for every single one of

00:11:06,610 --> 00:11:10,959
them it increments that cash version on

00:11:08,529 --> 00:11:12,940
the database thing so what we're doing

00:11:10,959 --> 00:11:14,260
here then is we're still doing sequel

00:11:12,940 --> 00:11:15,430
queries we're assuming that if you're

00:11:14,260 --> 00:11:16,600
going to show a list of conferences

00:11:15,430 --> 00:11:18,579
you're going to have to do a sequel

00:11:16,600 --> 00:11:20,170
query to get those conferences back but

00:11:18,579 --> 00:11:22,149
we're avoiding a whole bunch of

00:11:20,170 --> 00:11:23,769
additional stuff around the ways in

00:11:22,149 --> 00:11:25,570
which the conference is displayed by

00:11:23,769 --> 00:11:26,920
reply right by relying on that couch key

00:11:25,570 --> 00:11:30,790
so that tricks been working really well

00:11:26,920 --> 00:11:32,440
for us for the past few months trick

00:11:30,790 --> 00:11:34,209
number three this is really the big one

00:11:32,440 --> 00:11:36,490
and I think this is this is a pretty

00:11:34,209 --> 00:11:39,399
large topic and that's using no SQL

00:11:36,490 --> 00:11:42,279
style stores for denormalization so if

00:11:39,399 --> 00:11:46,060
you talk to any if you talk to anyone

00:11:42,279 --> 00:11:47,500
about like large-scale web applications

00:11:46,060 --> 00:11:49,240
especially backed against the database

00:11:47,500 --> 00:11:50,440
one of the first things they'll tell you

00:11:49,240 --> 00:11:52,480
is that you're going to have to start d

00:11:50,440 --> 00:11:53,889
normalizing all of your ideas about sort

00:11:52,480 --> 00:11:55,480
of normal forms and everything will have

00:11:53,889 --> 00:11:57,190
to go out the window and you'll have to

00:11:55,480 --> 00:12:00,550
start duplicating your data in different

00:11:57,190 --> 00:12:01,810
places and so on and this the way I'm

00:12:00,550 --> 00:12:02,920
sort of suggesting here doesn't avoid

00:12:01,810 --> 00:12:06,100
that it just does it in a slightly

00:12:02,920 --> 00:12:08,260
different way um I've been following the

00:12:06,100 --> 00:12:09,069
hold no SQL thing for a whole bunch of

00:12:08,260 --> 00:12:11,410
years and I think it's really

00:12:09,069 --> 00:12:13,990
interesting but my preferred definition

00:12:11,410 --> 00:12:16,360
for now SQL is not only sequel it's a

00:12:13,990 --> 00:12:18,040
movement which has really rediscovered

00:12:16,360 --> 00:12:19,930
the idea that the database doesn't have

00:12:18,040 --> 00:12:21,819
to be the one and only way of storing

00:12:19,930 --> 00:12:24,040
data there are other options and there's

00:12:21,819 --> 00:12:25,209
this wonderful ecosystem alternative

00:12:24,040 --> 00:12:27,720
technologies that all have different

00:12:25,209 --> 00:12:31,000
niches they fit into so I'm a big fan of

00:12:27,720 --> 00:12:32,500
polyglot persistence where you you know

00:12:31,000 --> 00:12:34,240
you have your date relational database

00:12:32,500 --> 00:12:35,529
you have your other now SQL things you

00:12:34,240 --> 00:12:36,970
spend a lot of time keeping everything

00:12:35,529 --> 00:12:40,209
in st. but it does mean you can get the

00:12:36,970 --> 00:12:42,069
best of both worlds because to be honest

00:12:40,209 --> 00:12:43,540
i really like joins when we're doing

00:12:42,069 --> 00:12:46,180
stuff like lanyard you know it's some

00:12:43,540 --> 00:12:47,470
relational databases a 40 year old

00:12:46,180 --> 00:12:49,630
technology that's holding up pretty well

00:12:47,470 --> 00:12:52,540
today and a lot of the functionality

00:12:49,630 --> 00:12:54,250
that we have is it was really easy to

00:12:52,540 --> 00:12:56,079
build because we have databases and

00:12:54,250 --> 00:12:58,209
joins we could do previous across thing

00:12:56,079 --> 00:13:01,060
so as an example if you add some slides

00:12:58,209 --> 00:13:03,130
to a talk on lanyard and they'll show up

00:13:01,060 --> 00:13:05,170
on that talk page and they'll show up on

00:13:03,130 --> 00:13:07,089
the coverage from this conference page

00:13:05,170 --> 00:13:08,529
not show up on these slides by Simon

00:13:07,089 --> 00:13:09,840
williston page and our show up on the

00:13:08,529 --> 00:13:11,940
page about slides

00:13:09,840 --> 00:13:14,220
django all of those different places and

00:13:11,940 --> 00:13:15,780
that was just invisible things that we

00:13:14,220 --> 00:13:17,580
invented as we went along we wrote a

00:13:15,780 --> 00:13:20,040
query and it all worked I think a lot of

00:13:17,580 --> 00:13:22,500
the Dove the frustrations of working

00:13:20,040 --> 00:13:24,060
with sequel databases the Django ORM

00:13:22,500 --> 00:13:26,790
combined with South make a lot of those

00:13:24,060 --> 00:13:28,830
those sort of frustrations go away so

00:13:26,790 --> 00:13:30,930
we're very keen on we're very keen on

00:13:28,830 --> 00:13:33,360
relational databases and in fact every

00:13:30,930 --> 00:13:36,120
that we consider the our relational

00:13:33,360 --> 00:13:38,220
database to be the definitive source of

00:13:36,120 --> 00:13:39,570
truth about everything in the system if

00:13:38,220 --> 00:13:41,340
you do that it becomes a lot easier to

00:13:39,570 --> 00:13:43,590
think about D normalizations because

00:13:41,340 --> 00:13:45,600
it's always possible to rebuild your

00:13:43,590 --> 00:13:46,890
alternative structures so what we doing

00:13:45,600 --> 00:13:49,140
on language at the moment is we're d

00:13:46,890 --> 00:13:51,900
normalizing our data into two different

00:13:49,140 --> 00:13:55,050
stores into Redis and into solar both of

00:13:51,900 --> 00:13:56,220
which are useful for different things so

00:13:55,050 --> 00:13:58,380
if you haven't looked at rebus you

00:13:56,220 --> 00:14:03,060
really should it's a fantastically

00:13:58,380 --> 00:14:05,130
powerful tool and then against lumped in

00:14:03,060 --> 00:14:06,630
with sort of MongoDB and Cassandra and

00:14:05,130 --> 00:14:07,620
all of these are the nurse ql stores but

00:14:06,630 --> 00:14:09,900
I really think it's a very different

00:14:07,620 --> 00:14:12,510
category of software it's best described

00:14:09,900 --> 00:14:14,340
as a data structure server so Redis is

00:14:12,510 --> 00:14:15,900
kind of like memcached it's this thing

00:14:14,340 --> 00:14:18,420
that sits there on a server somewhere

00:14:15,900 --> 00:14:20,310
new talks with over the network and but

00:14:18,420 --> 00:14:22,200
it can and you can put data in and take

00:14:20,310 --> 00:14:24,810
data out but all of the data was held in

00:14:22,200 --> 00:14:27,840
memory and it has support for high level

00:14:24,810 --> 00:14:30,450
data structures so it has sort of key

00:14:27,840 --> 00:14:33,000
value pairs just like memcache does but

00:14:30,450 --> 00:14:36,030
it also has the ability to construct set

00:14:33,000 --> 00:14:37,620
or list or sorted sets things where you

00:14:36,030 --> 00:14:39,120
can you can then do data structure

00:14:37,620 --> 00:14:40,710
operations within reddit so you can ask

00:14:39,120 --> 00:14:42,420
it for the top five things on the list

00:14:40,710 --> 00:14:44,130
you can tell it to push something on the

00:14:42,420 --> 00:14:45,960
end of things and if you've got sets in

00:14:44,130 --> 00:14:47,910
there you can actually have it do set

00:14:45,960 --> 00:14:49,320
operations within the data structure

00:14:47,910 --> 00:14:51,390
server and then give you back the

00:14:49,320 --> 00:14:52,950
results so as an example of what we're

00:14:51,390 --> 00:14:54,720
doing on lanyard we have this feature

00:14:52,950 --> 00:14:57,480
where you're signed into the site you go

00:14:54,720 --> 00:14:59,100
to a page and there are like 119

00:14:57,480 --> 00:15:01,170
speakers there and we want to show you

00:14:59,100 --> 00:15:02,460
which of those people you follow on

00:15:01,170 --> 00:15:04,380
twitter so i don't know if you can see

00:15:02,460 --> 00:15:05,850
but these ones here have a blue border

00:15:04,380 --> 00:15:08,130
around them and there's a little white

00:15:05,850 --> 00:15:09,480
Twitter bird icon there and we always

00:15:08,130 --> 00:15:11,190
put those at the top of the list so that

00:15:09,480 --> 00:15:12,540
you you know you look at a page and

00:15:11,190 --> 00:15:14,130
straight or you can see hey these people

00:15:12,540 --> 00:15:16,470
who I know speaking this confidence

00:15:14,130 --> 00:15:19,020
they're going to this conference and the

00:15:16,470 --> 00:15:21,150
way we do that is using Redis we

00:15:19,020 --> 00:15:21,980
actually maintain a whole bunch of red

00:15:21,150 --> 00:15:24,440
assets

00:15:21,980 --> 00:15:26,300
all times both for our users and for our

00:15:24,440 --> 00:15:28,310
conferences so in this particular case

00:15:26,300 --> 00:15:30,200
when I sign in to the lanyard from

00:15:28,310 --> 00:15:32,390
Twitter and one of the things we do is

00:15:30,200 --> 00:15:34,640
we pull the list of people that I follow

00:15:32,390 --> 00:15:38,240
on Twitter over the Twitter API and we

00:15:34,640 --> 00:15:39,920
stash that list in a Redis set which I

00:15:38,240 --> 00:15:41,240
think we keep it around for about 10

00:15:39,920 --> 00:15:42,770
hours and then we'll we fetch it if

00:15:41,240 --> 00:15:46,040
you're still exploring site so we stay

00:15:42,770 --> 00:15:48,440
relatively up to date that's so we've

00:15:46,040 --> 00:15:50,450
got a set in Redis of all of the people

00:15:48,440 --> 00:15:51,980
that you're following then for a

00:15:50,450 --> 00:15:53,390
conference might euro Python will have a

00:15:51,980 --> 00:15:54,620
set for all of the people that we know

00:15:53,390 --> 00:15:56,210
our attendees and these sets are just

00:15:54,620 --> 00:15:58,970
integers so they don't take up very much

00:15:56,210 --> 00:16:01,550
space but then when you hit that page we

00:15:58,970 --> 00:16:04,190
can use pythons Redis Klein we can say

00:16:01,550 --> 00:16:06,170
do a set intersection of the Simon w

00:16:04,190 --> 00:16:08,360
follow set and the European attendees

00:16:06,170 --> 00:16:10,250
set and what comes back will be the IDS

00:16:08,360 --> 00:16:12,050
of people who I follow who are present

00:16:10,250 --> 00:16:14,330
at the conference and the magic thing

00:16:12,050 --> 00:16:15,830
here is that Redis can do something like

00:16:14,330 --> 00:16:18,260
a hundred thousand read and write

00:16:15,830 --> 00:16:19,610
operations a second so even with just

00:16:18,260 --> 00:16:21,320
one little red a server sat in the

00:16:19,610 --> 00:16:23,240
corner because everything's in memory

00:16:21,320 --> 00:16:24,710
you just this is almost to know up you

00:16:23,240 --> 00:16:26,420
don't have to really think about this

00:16:24,710 --> 00:16:30,800
operation it's going to be so fast that

00:16:26,420 --> 00:16:32,210
you you wouldn't even notice it so we

00:16:30,800 --> 00:16:33,380
use Redis for that we use Redis for a

00:16:32,210 --> 00:16:35,600
bunch of other things it's kind of a

00:16:33,380 --> 00:16:38,000
multi-tool it also manages our it

00:16:35,600 --> 00:16:41,000
manages our task queue and things like

00:16:38,000 --> 00:16:43,760
that but the a much more critical part

00:16:41,000 --> 00:16:46,460
of our infrastructure is solar which is

00:16:43,760 --> 00:16:47,870
a it's actually a search engine so I i

00:16:46,460 --> 00:16:49,730
gave you talked about this yesterday so

00:16:47,870 --> 00:16:51,050
you if you go and look at my slides from

00:16:49,730 --> 00:16:54,230
yesterday so there's a bit more about

00:16:51,050 --> 00:16:57,110
this but essentially solar is a web

00:16:54,230 --> 00:16:59,210
server written java wrapped around the

00:16:57,110 --> 00:17:02,090
apache Lucene search libraries and it

00:16:59,210 --> 00:17:04,100
exposes all of the power of leucine over

00:17:02,090 --> 00:17:05,780
an HTTP API so if you're working in

00:17:04,100 --> 00:17:08,090
Python or Ruby or anything else you can

00:17:05,780 --> 00:17:10,250
just talk to it by sending it documents

00:17:08,090 --> 00:17:12,350
by running queries with a by doing an

00:17:10,250 --> 00:17:14,360
HTTP GET against them and you it gives

00:17:12,350 --> 00:17:17,030
you a huge amount of flexibility in

00:17:14,360 --> 00:17:19,430
search because the the real trick is

00:17:17,030 --> 00:17:21,890
sink is making sure that you've got all

00:17:19,430 --> 00:17:23,540
of your documents in there but I both

00:17:21,890 --> 00:17:24,770
the talking ever yesterday had a few few

00:17:23,540 --> 00:17:27,530
hints for ways in which you can do that

00:17:24,770 --> 00:17:29,060
so so that gives us search one of the

00:17:27,530 --> 00:17:31,220
things we do is we stick all of our

00:17:29,060 --> 00:17:32,840
conferences all of our sessions all of

00:17:31,220 --> 00:17:34,880
our slides and notes all of the books

00:17:32,840 --> 00:17:36,650
that we know about all of our users and

00:17:34,880 --> 00:17:38,420
of a couple of days ago we're sticking

00:17:36,650 --> 00:17:40,760
all of our attendees in there as well so

00:17:38,420 --> 00:17:42,440
the attendee search that we have on the

00:17:40,760 --> 00:17:44,300
Euro Python attendee directory is

00:17:42,440 --> 00:17:46,700
wearing off the same search cluster and

00:17:44,300 --> 00:17:47,870
then we've got a few features on top of

00:17:46,700 --> 00:17:49,370
that so obviously we have a search

00:17:47,870 --> 00:17:50,810
engine if you search for Django will

00:17:49,370 --> 00:17:53,540
show you a bunch of stuff around Django

00:17:50,810 --> 00:17:56,330
sollars got so there's got very strong

00:17:53,540 --> 00:17:58,190
support for faceting so when we get we

00:17:56,330 --> 00:18:00,350
do we do one search we get that Django

00:17:58,190 --> 00:18:01,940
but in the JSON or XML that comes back

00:18:00,350 --> 00:18:04,250
it also tells us hey if you were to

00:18:01,940 --> 00:18:05,960
filter by sessions you get 209 there's

00:18:04,250 --> 00:18:08,060
five books client Django there's 55

00:18:05,960 --> 00:18:09,560
events in the future it does all of this

00:18:08,060 --> 00:18:11,960
stuff at the same time so you can build

00:18:09,560 --> 00:18:13,310
this powerful sort of faceting interface

00:18:11,960 --> 00:18:14,720
but it also means that you can ask

00:18:13,310 --> 00:18:16,430
questions of the search engine that

00:18:14,720 --> 00:18:19,460
you'd normally ask three database joins

00:18:16,430 --> 00:18:21,200
another thing we do with solos we

00:18:19,460 --> 00:18:23,780
actually use it to power our key feature

00:18:21,200 --> 00:18:25,280
the this calendar that shows you where

00:18:23,780 --> 00:18:27,050
your friends are going to this is

00:18:25,280 --> 00:18:29,510
actually a search I'm asking the search

00:18:27,050 --> 00:18:31,760
engine for events where the attendees

00:18:29,510 --> 00:18:33,290
list contains this personal I'm

00:18:31,760 --> 00:18:34,970
following all this person I'm following

00:18:33,290 --> 00:18:38,090
all this person I'm following up till I

00:18:34,970 --> 00:18:40,130
think 2048 boolean and like like all

00:18:38,090 --> 00:18:41,810
call clauses in that search and the

00:18:40,130 --> 00:18:43,730
performance on that isn't brilliant it

00:18:41,810 --> 00:18:46,580
comes back in about half a second but

00:18:43,730 --> 00:18:48,230
because because solo is really easy to

00:18:46,580 --> 00:18:50,000
replicate it means we can scale by just

00:18:48,230 --> 00:18:51,800
replicating it out to more servers so I

00:18:50,000 --> 00:18:53,690
think we're running the search index now

00:18:51,800 --> 00:18:55,550
on Ford it we have copies on four

00:18:53,690 --> 00:18:57,740
different servers and we load balance

00:18:55,550 --> 00:18:59,060
those searches between them so the fact

00:18:57,740 --> 00:19:00,830
that it takes a little while to generate

00:18:59,060 --> 00:19:02,840
is no longer a problem for us because

00:19:00,830 --> 00:19:05,390
we've we can we can scale out with

00:19:02,840 --> 00:19:08,120
replication and then the last feature

00:19:05,390 --> 00:19:09,560
that we're using solar for is this thing

00:19:08,120 --> 00:19:11,690
down here when you're on someone's

00:19:09,560 --> 00:19:13,340
speaker page it has little list of

00:19:11,690 --> 00:19:14,960
people who they most frequently appear

00:19:13,340 --> 00:19:16,160
with this is really there so that you

00:19:14,960 --> 00:19:17,510
can sort of browse around the site you

00:19:16,160 --> 00:19:19,250
can see something go oh I'll click on

00:19:17,510 --> 00:19:21,380
that person and navigate around

00:19:19,250 --> 00:19:23,180
originally this was a sequel query which

00:19:21,380 --> 00:19:24,550
worked fine when we have 500 speakers in

00:19:23,180 --> 00:19:28,040
the database but now that we've got

00:19:24,550 --> 00:19:30,440
think over 20,000 speakers that query

00:19:28,040 --> 00:19:31,820
really wasn't working out anymore and so

00:19:30,440 --> 00:19:35,620
what we're actually doing that is we're

00:19:31,820 --> 00:19:39,080
doing a search for events that feature

00:19:35,620 --> 00:19:41,180
in this case it's natalie's a profile

00:19:39,080 --> 00:19:43,740
page event the feature Natalie but we're

00:19:41,180 --> 00:19:45,780
asking it to do a facet

00:19:43,740 --> 00:19:47,370
on other speakers at my conference we

00:19:45,780 --> 00:19:49,230
can then trim off the the top eight

00:19:47,370 --> 00:19:51,120
results and get them back so very fast

00:19:49,230 --> 00:19:53,520
query it's very easy to cash as well and

00:19:51,120 --> 00:19:54,929
it's a case of replacing something you

00:19:53,520 --> 00:19:56,670
traditionally do with the database join

00:19:54,929 --> 00:19:58,140
with the full text search index which

00:19:56,670 --> 00:20:00,660
isn't necessarily what you'd expect a

00:19:58,140 --> 00:20:02,820
search index to be able to do but the

00:20:00,660 --> 00:20:05,309
real magic about using things like solar

00:20:02,820 --> 00:20:07,200
and Redis is that once you've solved the

00:20:05,309 --> 00:20:09,360
problem of getting your data into them

00:20:07,200 --> 00:20:10,710
in keeping it in sync both Redis and so

00:20:09,360 --> 00:20:13,590
they have very strong support for

00:20:10,710 --> 00:20:15,330
replication so it's trivial to if you if

00:20:13,590 --> 00:20:19,050
you've got a whole bunch of them we'd

00:20:15,330 --> 00:20:21,000
traffic it's trivial to to to fire a new

00:20:19,050 --> 00:20:22,800
instances get it get a copy of the data

00:20:21,000 --> 00:20:28,260
on there and then and spread your reads

00:20:22,800 --> 00:20:30,740
across all of those so that's trick

00:20:28,260 --> 00:20:34,020
number three which is using no SQL and

00:20:30,740 --> 00:20:36,330
to sort of to enhance your database

00:20:34,020 --> 00:20:38,400
rather than to replace it the next trick

00:20:36,330 --> 00:20:41,820
I want to talk to talk about is one

00:20:38,400 --> 00:20:44,040
related to static asset handling and so

00:20:41,820 --> 00:20:45,480
a huge topic in the web development over

00:20:44,040 --> 00:20:47,520
the past three or four years has been

00:20:45,480 --> 00:20:49,020
client-side web performance actually

00:20:47,520 --> 00:20:50,970
speeding up the rate at which the

00:20:49,020 --> 00:20:52,260
browser renders pages there are a whole

00:20:50,970 --> 00:20:53,820
bunch of things you can do around that

00:20:52,260 --> 00:20:56,460
but some of the most important relates

00:20:53,820 --> 00:20:57,750
to how you're serving up CSS JavaScript

00:20:56,460 --> 00:20:59,720
and image it you know all of the stuff

00:20:57,750 --> 00:21:04,350
on the page that isn't the page itself

00:20:59,720 --> 00:21:05,790
Django 1.3 ships with a static assets

00:21:04,350 --> 00:21:07,800
application that helps you manage this

00:21:05,790 --> 00:21:09,600
stuff a bit but the approach it takes on

00:21:07,800 --> 00:21:10,920
it isn't quite sophisticated therefore

00:21:09,600 --> 00:21:14,220
the kind of things that we wanted to do

00:21:10,920 --> 00:21:17,580
so if you view source on lanyard you'll

00:21:14,220 --> 00:21:19,050
see that our our CSS and JavaScript

00:21:17,580 --> 00:21:22,110
links look something like this at CDM

00:21:19,050 --> 00:21:25,800
that lanyard net / jazz / global dot a

00:21:22,110 --> 00:21:27,660
bunch of bunch of courage je s in our

00:21:25,800 --> 00:21:29,880
development environments are like actual

00:21:27,660 --> 00:21:32,250
computer on my laptop that files called

00:21:29,880 --> 00:21:34,530
global jess so in between it being on

00:21:32,250 --> 00:21:35,910
here and it being up on the internet

00:21:34,530 --> 00:21:40,260
there are a few different things that

00:21:35,910 --> 00:21:41,940
happen to it so and so I actually have a

00:21:40,260 --> 00:21:43,679
management command that manages all of

00:21:41,940 --> 00:21:46,050
this stuff I'm imagine at my push static

00:21:43,679 --> 00:21:47,550
it takes a javascript and CSS it minify

00:21:46,050 --> 00:21:50,040
zit so it strips out all of the comments

00:21:47,550 --> 00:21:51,990
in the case of javascript it runs it

00:21:50,040 --> 00:21:53,460
through compressor that we names

00:21:51,990 --> 00:21:55,950
variables and all of that kind of stuff

00:21:53,460 --> 00:21:57,430
once it's done that if it figures out

00:21:55,950 --> 00:22:00,160
the sha-1 hash

00:21:57,430 --> 00:22:01,900
contents of the files and renames that

00:22:00,160 --> 00:22:04,630
and changes that file name to include

00:22:01,900 --> 00:22:06,190
the first eight letters of the hash it

00:22:04,630 --> 00:22:08,530
sticks doc Jess on the end it pushes up

00:22:06,190 --> 00:22:10,000
it up onto Amazon s3 we serve it through

00:22:08,530 --> 00:22:11,680
Amazon CloudFront so that it's

00:22:10,000 --> 00:22:13,540
distributed across different servers

00:22:11,680 --> 00:22:15,880
around the world but the key thing there

00:22:13,540 --> 00:22:17,320
is using the contents using the hash of

00:22:15,880 --> 00:22:19,390
the contents as part of the filename

00:22:17,320 --> 00:22:22,390
that gives you a whole bunch of really

00:22:19,390 --> 00:22:24,250
useful and benefit firstly it means that

00:22:22,390 --> 00:22:25,900
you can set far futures expiry headers

00:22:24,250 --> 00:22:27,820
because you know that if those files

00:22:25,900 --> 00:22:29,620
change by single bites the file name

00:22:27,820 --> 00:22:31,450
will change when you actually serve that

00:22:29,620 --> 00:22:33,130
out of the CDN you can stick a thing on

00:22:31,450 --> 00:22:36,010
it that says this is going to last 30

00:22:33,130 --> 00:22:37,570
years doesn't expire until 2021 you can

00:22:36,010 --> 00:22:40,000
tell the browser that it never ever

00:22:37,570 --> 00:22:42,310
needs to fetch that file again which is

00:22:40,000 --> 00:22:43,360
great it's um it's gives you much much

00:22:42,310 --> 00:22:45,340
faster performance because those

00:22:43,360 --> 00:22:46,930
browsers now once they've retrieved that

00:22:45,340 --> 00:22:49,000
file once they don't even have to check

00:22:46,930 --> 00:22:50,440
to see if it's been updated and it also

00:22:49,000 --> 00:22:53,140
solves a whole bunch of problems in IE

00:22:50,440 --> 00:22:55,000
which is notoriously good at cashing CSS

00:22:53,140 --> 00:22:56,980
files almost at the point where and

00:22:55,000 --> 00:22:58,870
where this kind of trick is required if

00:22:56,980 --> 00:23:00,220
you want to push new CSS out with new

00:22:58,870 --> 00:23:02,830
features to people who are running

00:23:00,220 --> 00:23:05,440
Internet Explorer but the the really

00:23:02,830 --> 00:23:06,910
handy thing for us and the reason we

00:23:05,440 --> 00:23:08,530
spend a bunch of time on this is it

00:23:06,910 --> 00:23:10,690
means that we could deploy those asset

00:23:08,530 --> 00:23:12,220
files in advance of deploying new

00:23:10,690 --> 00:23:14,020
versions of our application that rely on

00:23:12,220 --> 00:23:15,280
them we were finding that when we were

00:23:14,020 --> 00:23:18,570
doing deployments we have problems

00:23:15,280 --> 00:23:20,890
because we were hosting our static files

00:23:18,570 --> 00:23:22,570
not from the same server as the the

00:23:20,890 --> 00:23:24,310
application code as we had them out on

00:23:22,570 --> 00:23:25,780
Amazon s3 understand we had problems

00:23:24,310 --> 00:23:27,100
where we deploy a new version of the

00:23:25,780 --> 00:23:28,960
application and then we'd have to deploy

00:23:27,100 --> 00:23:30,220
the CSS at the same time and if they

00:23:28,960 --> 00:23:31,840
weren't they weren't out there at the

00:23:30,220 --> 00:23:34,240
same time you get blank pages or you get

00:23:31,840 --> 00:23:36,040
features looking broken so this kind of

00:23:34,240 --> 00:23:39,460
scheme means that we can push the asset

00:23:36,040 --> 00:23:40,840
up to Amazon s3 before I days before we

00:23:39,460 --> 00:23:42,460
deploy the features that would like that

00:23:40,840 --> 00:23:44,230
rely on them when we rely on them

00:23:42,460 --> 00:23:45,730
they'll already be there it also means

00:23:44,230 --> 00:23:47,110
that the old version of the files with

00:23:45,730 --> 00:23:49,000
different file names are still available

00:23:47,110 --> 00:23:50,740
so if we do a deployment something I

00:23:49,000 --> 00:23:52,150
saara be when we have to roll back we

00:23:50,740 --> 00:23:53,470
don't have to worry about redeploying

00:23:52,150 --> 00:23:57,460
the asset versions we know that they'll

00:23:53,470 --> 00:23:59,770
still be up there um so as I said I have

00:23:57,460 --> 00:24:00,880
a whole bunch of dodgy code hacked

00:23:59,770 --> 00:24:02,890
together that gets this to work I'll

00:24:00,880 --> 00:24:05,800
hopefully get a chance to wrap it up and

00:24:02,890 --> 00:24:07,060
stick it out at some point as well so

00:24:05,800 --> 00:24:10,390
those are some of the tricks that we've

00:24:07,060 --> 00:24:11,120
been using to to deal with deal with the

00:24:10,390 --> 00:24:13,340
challenges

00:24:11,120 --> 00:24:16,309
a relatively large application that's

00:24:13,340 --> 00:24:17,900
constantly growing what I want this

00:24:16,309 --> 00:24:19,460
second thing I want to talk about is

00:24:17,900 --> 00:24:21,230
some of the challenges that we're seeing

00:24:19,460 --> 00:24:23,480
some of the stuff which we don't have

00:24:21,230 --> 00:24:26,420
good solutions for I mean maybe some

00:24:23,480 --> 00:24:28,309
people here do and things which web

00:24:26,420 --> 00:24:32,120
frameworks like Django could potentially

00:24:28,309 --> 00:24:34,040
help help solve so the first challenge

00:24:32,120 --> 00:24:36,470
is a slightly obscure one and that's the

00:24:34,040 --> 00:24:42,770
challenge of making HTTP requests from

00:24:36,470 --> 00:24:45,710
from within your application code so

00:24:42,770 --> 00:24:47,390
these days any sufficiently interesting

00:24:45,710 --> 00:24:49,850
application is probably going to be

00:24:47,390 --> 00:24:51,920
talking HTTP at some point it's going to

00:24:49,850 --> 00:24:53,690
be making requests to web api is it'll

00:24:51,920 --> 00:24:55,040
be following up on user requests there's

00:24:53,690 --> 00:24:57,710
a whole bunch of things going on and

00:24:55,040 --> 00:24:59,780
you're talking to a Web API and it's

00:24:57,710 --> 00:25:01,340
tempting to just use your a Lib you are

00:24:59,780 --> 00:25:02,360
L open and off you go but they're a

00:25:01,340 --> 00:25:03,530
bunch of things that you have to think

00:25:02,360 --> 00:25:05,270
about you have to think about what if

00:25:03,530 --> 00:25:07,070
that servers down or don't fails to load

00:25:05,270 --> 00:25:09,200
what if it's up but it's running really

00:25:07,070 --> 00:25:11,150
slowly if your application server spends

00:25:09,200 --> 00:25:13,370
30 seconds waiting for an AP IRA to

00:25:11,150 --> 00:25:15,320
return that's 30 seconds to your user on

00:25:13,370 --> 00:25:17,030
the front end and also potentially it

00:25:15,320 --> 00:25:18,170
could tie up all of your application

00:25:17,030 --> 00:25:20,840
threads and mean that your application

00:25:18,170 --> 00:25:23,120
stops responding entirely so talking to

00:25:20,840 --> 00:25:25,100
an API can be if you're not thinking

00:25:23,120 --> 00:25:28,070
about it you can be a risky business

00:25:25,100 --> 00:25:30,260
even worse is when you do build features

00:25:28,070 --> 00:25:32,059
where the user gives you a URL and you

00:25:30,260 --> 00:25:33,890
then fetch that URL and do something

00:25:32,059 --> 00:25:35,740
with it so with lanyard we have a

00:25:33,890 --> 00:25:37,880
feature where you can paste in a URL to

00:25:35,740 --> 00:25:39,530
SlideShare or Vimeo or YouTube or

00:25:37,880 --> 00:25:41,840
something like that will then go away

00:25:39,530 --> 00:25:43,670
fetch and fetch that URL try and figure

00:25:41,840 --> 00:25:45,170
out if it's got an embeddable version

00:25:43,670 --> 00:25:46,820
that we can stick on the page but it

00:25:45,170 --> 00:25:48,290
hasn't looked for the title of page that

00:25:46,820 --> 00:25:50,059
kind of thing so we do a whole bunch of

00:25:48,290 --> 00:25:52,010
analysis that's driven by users in

00:25:50,059 --> 00:25:53,420
putting URLs but if you're going to do

00:25:52,010 --> 00:25:54,710
that there's a whole bunch sure you open

00:25:53,420 --> 00:25:56,330
yourself up to a whole bunch of problems

00:25:54,710 --> 00:25:57,920
what if the Europe what if the user

00:25:56,330 --> 00:25:59,090
gives you a link to a 2 gigabyte video

00:25:57,920 --> 00:26:00,890
file you don't really want your

00:25:59,090 --> 00:26:02,780
application downloading that somewhere

00:26:00,890 --> 00:26:04,940
if you don't need to store the file what

00:26:02,780 --> 00:26:06,650
if they deliberately give you a link to

00:26:04,940 --> 00:26:10,100
a tar pit a server that set up to

00:26:06,650 --> 00:26:11,720
respond really slowly in a bid to down

00:26:10,100 --> 00:26:14,330
your site through tying up all of your

00:26:11,720 --> 00:26:15,800
resources even more terrifying what if

00:26:14,330 --> 00:26:17,750
you're running something like solar

00:26:15,800 --> 00:26:20,510
which speaks HTTP behind your firewall

00:26:17,750 --> 00:26:22,880
Solar has an IP address that you talked

00:26:20,510 --> 00:26:25,480
to over it and a user types a URL into

00:26:22,880 --> 00:26:26,919
your application that actually points at

00:26:25,480 --> 00:26:28,780
or solar instance so the user

00:26:26,919 --> 00:26:30,640
essentially uses your functionality to

00:26:28,780 --> 00:26:33,070
bypass your firewall and start messing

00:26:30,640 --> 00:26:34,600
around inside your private network and

00:26:33,070 --> 00:26:36,190
that's some something that people don't

00:26:34,600 --> 00:26:37,720
often think about but it's actually it's

00:26:36,190 --> 00:26:40,630
a very real problem if you're if you're

00:26:37,720 --> 00:26:42,340
dealing with use of user facing URLs so

00:26:40,630 --> 00:26:45,160
there's a big challenge here in terms of

00:26:42,340 --> 00:26:47,290
safe URL consumption you want to be

00:26:45,160 --> 00:26:48,730
using connection timeouts by default if

00:26:47,290 --> 00:26:50,830
you're running something in production

00:26:48,730 --> 00:26:52,419
you want to be logging failures you want

00:26:50,830 --> 00:26:54,070
profiling hook so that you can tell

00:26:52,419 --> 00:26:56,200
what's going on tell its services

00:26:54,070 --> 00:26:57,970
getting slow if you're dealing with user

00:26:56,200 --> 00:27:00,340
URLs you want to be doing full-on host

00:26:57,970 --> 00:27:02,380
validation where you like make sure that

00:27:00,340 --> 00:27:03,520
they're not able to put in your l's to

00:27:02,380 --> 00:27:06,250
your internal network you're only

00:27:03,520 --> 00:27:08,650
accessing sensible things outside if you

00:27:06,250 --> 00:27:10,059
want to be a good HTTP citizen if you

00:27:08,650 --> 00:27:11,710
want to be a good citizen of the web

00:27:10,059 --> 00:27:14,440
there's a bunch of stuff that you should

00:27:11,710 --> 00:27:16,210
be doing with HTTP caching with if none

00:27:14,440 --> 00:27:18,130
match if you're pulling RSS feeds you

00:27:16,210 --> 00:27:19,990
should be saving the e-tag from that

00:27:18,130 --> 00:27:22,330
feed and making sure that you don't make

00:27:19,990 --> 00:27:23,770
a full request every 15 minutes there's

00:27:22,330 --> 00:27:25,990
actually quite a lot of sophistication

00:27:23,770 --> 00:27:27,280
here and so I personally think that this

00:27:25,990 --> 00:27:29,410
is the kind of thing that web frameworks

00:27:27,280 --> 00:27:31,270
should handle I think this is such a

00:27:29,410 --> 00:27:33,100
common set of problems that would be

00:27:31,270 --> 00:27:36,040
worth baking this stuff into a framework

00:27:33,100 --> 00:27:37,840
like Django and having you know a proper

00:27:36,040 --> 00:27:39,910
integrated approach just like Django has

00:27:37,840 --> 00:27:42,610
a caching thing having Django have an

00:27:39,910 --> 00:27:43,600
HTTP client with the standard API where

00:27:42,610 --> 00:27:45,940
you could swap in different backends

00:27:43,600 --> 00:27:48,630
control all of these things in one place

00:27:45,940 --> 00:27:51,309
would actually be a really useful idea

00:27:48,630 --> 00:27:52,780
challenge number two then is this is a

00:27:51,309 --> 00:27:54,460
much bigger challenge this is the thing

00:27:52,780 --> 00:27:57,160
that's really been been keeping me up at

00:27:54,460 --> 00:27:59,559
night and that's profiling and debugging

00:27:57,160 --> 00:28:01,690
of production systems if you're a Django

00:27:59,559 --> 00:28:04,000
developer you're used to a fantastic

00:28:01,690 --> 00:28:06,250
development environment for debugging

00:28:04,000 --> 00:28:07,750
you know we've got the Django debug tool

00:28:06,250 --> 00:28:09,340
bar which is absolutely essential I

00:28:07,750 --> 00:28:11,440
haven't done a project in in several

00:28:09,340 --> 00:28:13,510
years there hasn't used that there's the

00:28:11,440 --> 00:28:15,429
fact that you can just drop a cert false

00:28:13,510 --> 00:28:18,610
into one of your view functions and

00:28:15,429 --> 00:28:19,750
force the 500 page to pop up with all of

00:28:18,610 --> 00:28:21,280
the information on the browser

00:28:19,750 --> 00:28:23,860
environment the stack trace everything

00:28:21,280 --> 00:28:25,690
like that again really really useful and

00:28:23,860 --> 00:28:27,640
just just just a few characters of code

00:28:25,690 --> 00:28:30,669
to trigger it and if you want to go one

00:28:27,640 --> 00:28:33,370
step further you can drop import pdb PDB

00:28:30,669 --> 00:28:34,659
set trace into your view function hit

00:28:33,370 --> 00:28:37,090
refresh on your browser and the

00:28:34,659 --> 00:28:38,890
applications the little test server will

00:28:37,090 --> 00:28:40,090
pause far uppity bug

00:28:38,890 --> 00:28:41,740
so you can play around with it and then

00:28:40,090 --> 00:28:43,510
when you hit continue the browser will

00:28:41,740 --> 00:28:45,370
finish loading the page so you can have

00:28:43,510 --> 00:28:46,750
a lot of fun in that development

00:28:45,370 --> 00:28:49,180
environment just playing around with all

00:28:46,750 --> 00:28:51,280
of these things unfortunately the moment

00:28:49,180 --> 00:28:53,200
you move into production as the Django

00:28:51,280 --> 00:28:55,480
docs will tell you you have to set debug

00:28:53,200 --> 00:28:57,220
to false which turns off all of this

00:28:55,480 --> 00:28:59,440
stuff makes none of this stuff work and

00:28:57,220 --> 00:29:01,840
to be honest as far as someone who's

00:28:59,440 --> 00:29:03,460
operating an application it could is

00:29:01,840 --> 00:29:05,290
concerned that essentially means you're

00:29:03,460 --> 00:29:06,970
setting debug to blind you're turning

00:29:05,290 --> 00:29:08,200
off a whole bunch of the hooks that let

00:29:06,970 --> 00:29:10,270
you find out what's happening in the

00:29:08,200 --> 00:29:13,060
system but the thing is that production

00:29:10,270 --> 00:29:14,740
systems but once you get to a certain

00:29:13,060 --> 00:29:15,910
scale its production systems are where

00:29:14,740 --> 00:29:17,620
the bugs happen it's where the

00:29:15,910 --> 00:29:19,030
performance things problems start

00:29:17,620 --> 00:29:21,040
showing up your development environment

00:29:19,030 --> 00:29:22,660
a few hundred records in the database is

00:29:21,040 --> 00:29:23,980
not going to behave in the same way as a

00:29:22,660 --> 00:29:25,540
production environment with a million

00:29:23,980 --> 00:29:27,400
records and a whole bunch of users

00:29:25,540 --> 00:29:28,570
writing to different database tables and

00:29:27,400 --> 00:29:30,460
a whole bunch of stuff going on at the

00:29:28,570 --> 00:29:33,130
same time so it's in production that you

00:29:30,460 --> 00:29:34,180
want to be able to to sort of introspect

00:29:33,130 --> 00:29:37,030
what's what's happening and

00:29:34,180 --> 00:29:38,710
unfortunately because Django has this

00:29:37,030 --> 00:29:41,170
concept of debug mode that's only

00:29:38,710 --> 00:29:42,700
available in development you're kind of

00:29:41,170 --> 00:29:43,930
left on your own there are a few bits

00:29:42,700 --> 00:29:46,000
and pieces out there that really help

00:29:43,930 --> 00:29:47,440
with this this is a fantastic piece of

00:29:46,000 --> 00:29:51,010
middleware which you can find on django

00:29:47,440 --> 00:29:53,260
snippets and all this does is it says if

00:29:51,010 --> 00:29:55,450
there's an error and the user is logged

00:29:53,260 --> 00:29:57,730
into the admin as a super user then

00:29:55,450 --> 00:30:00,940
don't return the default 500-page return

00:29:57,730 --> 00:30:02,620
the lovely Django technical 500 responds

00:30:00,940 --> 00:30:04,330
with the stack trace and so on so if you

00:30:02,620 --> 00:30:05,890
drop this into your application somebody

00:30:04,330 --> 00:30:08,080
runs into a bug they can send you the

00:30:05,890 --> 00:30:09,400
URL you can go there as an admin and you

00:30:08,080 --> 00:30:11,950
can see exactly what's happening it

00:30:09,400 --> 00:30:15,010
makes it much quicker to to figure out

00:30:11,950 --> 00:30:18,190
figure out bugs another trick that I've

00:30:15,010 --> 00:30:19,660
used relates to database logging one of

00:30:18,190 --> 00:30:21,520
the great things about the debug tool

00:30:19,660 --> 00:30:22,960
box it logs every sequel query that's

00:30:21,520 --> 00:30:24,670
run you can see them all in a big pain

00:30:22,960 --> 00:30:27,100
you can figure out what's going on once

00:30:24,670 --> 00:30:29,830
you go into production you can't really

00:30:27,100 --> 00:30:31,060
run that anymore so one of this one of

00:30:29,830 --> 00:30:34,600
the things I found is there's a piece of

00:30:31,060 --> 00:30:35,800
software called MySQL proxy which you

00:30:34,600 --> 00:30:37,630
can install it from packet managers

00:30:35,800 --> 00:30:39,730
basically it's a proxy that you send all

00:30:37,630 --> 00:30:41,170
of your MySQL traffic foo it's very high

00:30:39,730 --> 00:30:43,420
performance and then it lets you

00:30:41,170 --> 00:30:45,580
customize itself in lure you can drop in

00:30:43,420 --> 00:30:47,260
little lower scripts that manipulate

00:30:45,580 --> 00:30:49,240
your queries or dump out debugging

00:30:47,260 --> 00:30:49,670
information or whatever the downside is

00:30:49,240 --> 00:30:51,740
that

00:30:49,670 --> 00:30:53,120
is the single worst documented piece of

00:30:51,740 --> 00:30:55,730
software I have ever seen the

00:30:53,120 --> 00:30:57,890
documentation consists of about two or

00:30:55,730 --> 00:31:00,980
three blog entries one of which is 40

00:30:57,890 --> 00:31:02,360
forum from four years ago and so you're

00:31:00,980 --> 00:31:03,680
kind of on your own for figuring out how

00:31:02,360 --> 00:31:05,420
this thing works you can install it

00:31:03,680 --> 00:31:07,910
without get so at least that bits easy

00:31:05,420 --> 00:31:09,740
but there is a script called log lure

00:31:07,910 --> 00:31:11,840
which is only about five lines of code

00:31:09,740 --> 00:31:17,750
it logs out every single query going

00:31:11,840 --> 00:31:19,340
through the proxy to a file and I again

00:31:17,750 --> 00:31:20,780
it's available on the URL that are not

00:31:19,340 --> 00:31:22,250
convinced is going to exist for much

00:31:20,780 --> 00:31:25,010
longer so I've grabbed it and stuck it

00:31:22,250 --> 00:31:26,840
in and get hub gist but it's it's great

00:31:25,010 --> 00:31:28,310
it's um so there have been a few

00:31:26,840 --> 00:31:31,330
instances where I couldn't figure out

00:31:28,310 --> 00:31:34,100
quite what was going on so I turn on the

00:31:31,330 --> 00:31:35,690
logging for the proxy I tell the log

00:31:34,100 --> 00:31:36,830
file for a couple of minutes i turn it

00:31:35,690 --> 00:31:38,060
off again and I've got a much better

00:31:36,830 --> 00:31:40,970
idea of what's happening within the

00:31:38,060 --> 00:31:42,170
application another piece of code and

00:31:40,970 --> 00:31:44,300
this is something I ended up writing

00:31:42,170 --> 00:31:45,740
myself really I think it's interesting

00:31:44,300 --> 00:31:47,780
because it illustrates one of the

00:31:45,740 --> 00:31:50,870
possible approaches for making this

00:31:47,780 --> 00:31:52,550
stuff more available and so I've called

00:31:50,870 --> 00:31:54,920
it Django instrumented but basically

00:31:52,550 --> 00:31:56,000
what it does is while a request is

00:31:54,920 --> 00:31:57,890
running and starts with a piece of

00:31:56,000 --> 00:31:59,570
middleware it collects a whole bunch of

00:31:57,890 --> 00:32:02,420
different things about that request so

00:31:59,570 --> 00:32:04,370
how long it took whether any HTTP

00:32:02,420 --> 00:32:07,010
requests were fired off in the back end

00:32:04,370 --> 00:32:08,930
and various bits and pieces and then it

00:32:07,010 --> 00:32:13,190
saves that as JSON and stashes it in a

00:32:08,930 --> 00:32:15,410
memcached key the key is a uuid that it

00:32:13,190 --> 00:32:17,510
generates it writes out the uuid

00:32:15,410 --> 00:32:19,700
actually in the HTML on page so if you

00:32:17,510 --> 00:32:22,130
view source on a lanyard page you'll see

00:32:19,700 --> 00:32:24,290
a meta name equals instrumented at the

00:32:22,130 --> 00:32:25,670
top with one of these IDs in and then

00:32:24,290 --> 00:32:28,250
there's a little bookmarklet I've got

00:32:25,670 --> 00:32:30,800
which I click it looks that you ID it

00:32:28,250 --> 00:32:32,840
retrieves the profile information out of

00:32:30,800 --> 00:32:35,120
memcache and it sticks tup on-screen now

00:32:32,840 --> 00:32:36,680
i only spent a few hours on this when

00:32:35,120 --> 00:32:38,480
the site was down and i was trying to

00:32:36,680 --> 00:32:39,770
fix things so it's not very pretty yet

00:32:38,480 --> 00:32:42,020
but this is essentially what it does

00:32:39,770 --> 00:32:44,420
I've got a page on the live site I click

00:32:42,020 --> 00:32:46,700
my bookmarklet and it pops up this thing

00:32:44,420 --> 00:32:49,790
saying on this page the request eration

00:32:46,700 --> 00:32:52,460
was no point six seconds and we made a

00:32:49,790 --> 00:32:54,080
search query to solar the search query

00:32:52,460 --> 00:32:56,660
looked like this and it lasted for

00:32:54,080 --> 00:32:58,460
naught point 15 seconds and so you know

00:32:56,660 --> 00:32:59,780
give us that I wrote this initially

00:32:58,460 --> 00:33:02,540
because I needed to get an insight into

00:32:59,780 --> 00:33:04,220
why certain pages which used search

00:33:02,540 --> 00:33:05,540
taking longer to load than others that

00:33:04,220 --> 00:33:06,830
query there is actually the query I

00:33:05,540 --> 00:33:10,460
mentioned earlier that pulls in these

00:33:06,830 --> 00:33:13,910
appear with bits down the side um and I

00:33:10,460 --> 00:33:15,260
think I mean this is clearly it's not

00:33:13,910 --> 00:33:17,390
very exciting yet but i think the

00:33:15,260 --> 00:33:19,760
technique of building up profiling

00:33:17,390 --> 00:33:21,050
information storing it in i'm storing it

00:33:19,760 --> 00:33:23,150
in memcached with a five minute

00:33:21,050 --> 00:33:24,860
expiration so if you don't need it for

00:33:23,150 --> 00:33:26,420
five minutes it just vanishes so it's

00:33:24,860 --> 00:33:29,030
not taking up any space anywhere and

00:33:26,420 --> 00:33:30,380
it's a really fast process to sort of to

00:33:29,030 --> 00:33:31,910
store it there so it doesn't affect your

00:33:30,380 --> 00:33:34,190
loading times I think there's a lot to

00:33:31,910 --> 00:33:36,050
be said for that approach and so in

00:33:34,190 --> 00:33:38,660
terms of improvements to django one of

00:33:36,050 --> 00:33:40,730
the big ones is that debug as a global

00:33:38,660 --> 00:33:42,920
setting i think is an anti-pattern and

00:33:40,730 --> 00:33:46,280
I've got a bit of a ramp later on about

00:33:42,920 --> 00:33:47,870
about related issues to that there is I

00:33:46,280 --> 00:33:49,280
don't think anyone who's ever been faced

00:33:47,870 --> 00:33:50,870
with a bug in a production system is

00:33:49,280 --> 00:33:52,970
thought I wish I had less information

00:33:50,870 --> 00:33:55,880
about this bug so the more low-level

00:33:52,970 --> 00:33:58,430
hooks we have for measuring pretty much

00:33:55,880 --> 00:34:00,560
everything sequel queries HTTP requests

00:33:58,430 --> 00:34:02,120
caching operations anything like that

00:34:00,560 --> 00:34:03,170
especially if you can turn them off if

00:34:02,120 --> 00:34:04,280
you don't want the performance overhead

00:34:03,170 --> 00:34:06,320
but you can turn them on when you need

00:34:04,280 --> 00:34:08,240
them the more of those the better and I

00:34:06,320 --> 00:34:10,190
think something like the Django debug

00:34:08,240 --> 00:34:12,679
tool bar but that's designed for live

00:34:10,190 --> 00:34:14,240
profiling so that use it so that you can

00:34:12,679 --> 00:34:15,560
run all of the time you've got a

00:34:14,240 --> 00:34:17,210
bookmarklet that gives you the

00:34:15,560 --> 00:34:19,280
information something like that as a

00:34:17,210 --> 00:34:22,580
third-party part of Django ecosystem

00:34:19,280 --> 00:34:24,530
would be really useful and bizarrely um

00:34:22,580 --> 00:34:26,600
a couple I think yesterday when I was

00:34:24,530 --> 00:34:29,179
thinking still thinking about this a

00:34:26,600 --> 00:34:30,950
Jeff Atwood who runs Stack Overflow put

00:34:29,179 --> 00:34:32,179
up a blog entry describing some of the

00:34:30,950 --> 00:34:34,130
work they've done around web performance

00:34:32,179 --> 00:34:35,960
and one of the things they've got is

00:34:34,130 --> 00:34:37,760
something they call the MVC mini

00:34:35,960 --> 00:34:40,520
profiler they've open sources it's a

00:34:37,760 --> 00:34:42,590
it's an asp.net thing and what this does

00:34:40,520 --> 00:34:44,150
is on every page of suck overflow if

00:34:42,590 --> 00:34:46,250
you're logged as one of the site

00:34:44,150 --> 00:34:48,200
developers there's a little thing in the

00:34:46,250 --> 00:34:49,790
top right that tells you how many

00:34:48,200 --> 00:34:52,100
milliseconds that page took to generate

00:34:49,790 --> 00:34:54,230
if you click on that thing it pulls up

00:34:52,100 --> 00:34:55,880
this profile pain that tells you again

00:34:54,230 --> 00:34:58,130
from real live data running on the

00:34:55,880 --> 00:35:00,200
production site exactly how much time

00:34:58,130 --> 00:35:02,330
each of these different things took its

00:35:00,200 --> 00:35:04,310
and the Figge said that was really

00:35:02,330 --> 00:35:06,290
interesting is that once they added this

00:35:04,310 --> 00:35:08,720
feature the site performance went way up

00:35:06,290 --> 00:35:10,550
because all of the developers on their

00:35:08,720 --> 00:35:11,990
team they were using the site they'd see

00:35:10,550 --> 00:35:14,270
something that was a little bit too high

00:35:11,990 --> 00:35:14,780
they get they think I could probably fix

00:35:14,270 --> 00:35:17,090
that

00:35:14,780 --> 00:35:18,530
at the profiler find a quick win and

00:35:17,090 --> 00:35:19,760
they debate they'd sulphates one of

00:35:18,530 --> 00:35:20,780
those things where if you measure

00:35:19,760 --> 00:35:22,610
something and make that measurement

00:35:20,780 --> 00:35:24,650
visible that people will just naturally

00:35:22,610 --> 00:35:25,940
improve it over time so I think a tool

00:35:24,650 --> 00:35:30,920
like this for Django would be

00:35:25,940 --> 00:35:33,590
fantastically useful next challenge is

00:35:30,920 --> 00:35:35,630
the really big one and that's doing zero

00:35:33,590 --> 00:35:39,340
doing that's deploying new versions of

00:35:35,630 --> 00:35:42,500
an application with zero downtime and

00:35:39,340 --> 00:35:44,180
this is for code upgrades this is

00:35:42,500 --> 00:35:46,010
relatively straightforward if you're

00:35:44,180 --> 00:35:49,130
doing database upgrades this gets really

00:35:46,010 --> 00:35:50,630
really tricky and the ambition is to be

00:35:49,130 --> 00:35:52,490
able to roll out new versions of your

00:35:50,630 --> 00:35:54,140
site with radical changes and

00:35:52,490 --> 00:35:56,420
functionality without a second of

00:35:54,140 --> 00:35:58,340
downtime where users can't can't use the

00:35:56,420 --> 00:36:00,080
site there are a whole bunch of things

00:35:58,340 --> 00:36:01,280
you can do here and I'll show you some

00:36:00,080 --> 00:36:03,320
of the things we're doing with Django

00:36:01,280 --> 00:36:05,420
but it's definitely an unsolved problem

00:36:03,320 --> 00:36:06,770
in the large so the first and most

00:36:05,420 --> 00:36:08,600
important thing is that you need to

00:36:06,770 --> 00:36:11,060
deploy your database changes separately

00:36:08,600 --> 00:36:12,560
from your code changes and the way we we

00:36:11,060 --> 00:36:14,900
work is we actually try and make all of

00:36:12,560 --> 00:36:17,300
our schema changes backwards compatible

00:36:14,900 --> 00:36:18,560
so if you're going to add a column and

00:36:17,300 --> 00:36:20,510
then remove another column the way you

00:36:18,560 --> 00:36:21,980
do it is you'd run code that adds the

00:36:20,510 --> 00:36:23,930
column which is find the new columns

00:36:21,980 --> 00:36:25,070
there your old application code is still

00:36:23,930 --> 00:36:27,200
running it doesn't need to know about

00:36:25,070 --> 00:36:30,050
the new column yet and that's fine then

00:36:27,200 --> 00:36:31,910
you write then you either deploy the

00:36:30,050 --> 00:36:34,070
next column or you write application

00:36:31,910 --> 00:36:35,990
code that upgrades that stuff in place

00:36:34,070 --> 00:36:37,760
so it moves that data around and then

00:36:35,990 --> 00:36:39,140
once you've got the amplitur that's

00:36:37,760 --> 00:36:42,050
running you can deploy the next change

00:36:39,140 --> 00:36:44,090
without affecting the the code that's

00:36:42,050 --> 00:36:45,590
executing on the web servers so we've

00:36:44,090 --> 00:36:47,480
actually the way we do this is we we

00:36:45,590 --> 00:36:49,610
have one of our one of the servers we

00:36:47,480 --> 00:36:51,170
run isn't running web application stuff

00:36:49,610 --> 00:36:52,940
a talk to you doing sort of management

00:36:51,170 --> 00:36:54,470
utilities and so forth and that means

00:36:52,940 --> 00:36:57,410
that we can deploy code to that and run

00:36:54,470 --> 00:36:58,820
managed by my great on that server to

00:36:57,410 --> 00:37:00,440
add new columns and so forth without

00:36:58,820 --> 00:37:02,930
affecting the rest of our cluster I

00:37:00,440 --> 00:37:04,790
mentioned earlier the importance of

00:37:02,930 --> 00:37:06,050
being able to do rollbacks if you're

00:37:04,790 --> 00:37:08,140
doing this technique that's that's

00:37:06,050 --> 00:37:09,950
particularly useful and being able to

00:37:08,140 --> 00:37:11,720
deploy a new version of your application

00:37:09,950 --> 00:37:13,400
and then instantly roll back to the

00:37:11,720 --> 00:37:15,800
previous version which is very simple to

00:37:13,400 --> 00:37:17,690
set up using symlinks I've got some code

00:37:15,800 --> 00:37:19,250
in there's a couple of slides in the

00:37:17,690 --> 00:37:20,630
talk I gave yesterday they describe a

00:37:19,250 --> 00:37:23,810
very simple way of doing that with

00:37:20,630 --> 00:37:26,180
fabric but the real the really powerful

00:37:23,810 --> 00:37:28,450
technique here is having a read-only

00:37:26,180 --> 00:37:31,040
mode for your application

00:37:28,450 --> 00:37:33,110
if you have the ability either by

00:37:31,040 --> 00:37:34,970
deploying a new setting spy or by

00:37:33,110 --> 00:37:37,040
flipping a setting in Redis or something

00:37:34,970 --> 00:37:39,200
to flip your entire site into read-only

00:37:37,040 --> 00:37:41,750
mode a whole bunch of problems relating

00:37:39,200 --> 00:37:43,310
to upgrades become a lot easier so this

00:37:41,750 --> 00:37:45,110
isn't zero downtime we're accepting the

00:37:43,310 --> 00:37:47,690
fact that for a few minutes people won't

00:37:45,110 --> 00:37:49,910
be able to like update their blogs or

00:37:47,690 --> 00:37:52,400
add new data to the site or maybe even

00:37:49,910 --> 00:37:54,110
login but the content on the site is

00:37:52,400 --> 00:37:55,850
still going to be visible to people and

00:37:54,110 --> 00:37:57,860
so if you've got this there's a whole

00:37:55,850 --> 00:37:59,930
bunch of useful tricks you can use if

00:37:57,860 --> 00:38:01,760
even so if you're doing a really radical

00:37:59,930 --> 00:38:03,620
database upgrade if you've got read-only

00:38:01,760 --> 00:38:05,630
mode you can flip the site into read

00:38:03,620 --> 00:38:07,580
only mode replicate to your production

00:38:05,630 --> 00:38:09,890
database on to another database server

00:38:07,580 --> 00:38:12,400
somewhere run all of your migrations

00:38:09,890 --> 00:38:14,480
against that second database server then

00:38:12,400 --> 00:38:16,070
get that to the point where it's already

00:38:14,480 --> 00:38:17,600
then you can point your application

00:38:16,070 --> 00:38:19,670
servers at the new database and then

00:38:17,600 --> 00:38:21,080
decommission the old one and all the

00:38:19,670 --> 00:38:22,970
time all the time you're making these

00:38:21,080 --> 00:38:24,650
changes because you're on read-only mode

00:38:22,970 --> 00:38:26,660
the the copy of the database that's

00:38:24,650 --> 00:38:28,700
that's already SAT there is serving up

00:38:26,660 --> 00:38:30,050
traffic to people there's no there are

00:38:28,700 --> 00:38:31,700
no challenges with inconsistent data

00:38:30,050 --> 00:38:33,380
because there are no chances that

00:38:31,700 --> 00:38:35,390
somebody could do a right to database a

00:38:33,380 --> 00:38:37,520
while database be is being manipulated

00:38:35,390 --> 00:38:38,780
and you can take this if you're using

00:38:37,520 --> 00:38:40,610
cloud computing if you're using

00:38:38,780 --> 00:38:42,590
something like Amazon ec2 you can take

00:38:40,610 --> 00:38:43,760
this to ludacris extremes where if

00:38:42,590 --> 00:38:45,710
you're deploying a new version of the

00:38:43,760 --> 00:38:47,510
app you can literally clone your

00:38:45,710 --> 00:38:49,460
database into your database then fire up

00:38:47,510 --> 00:38:51,620
a new cluster of application servers

00:38:49,460 --> 00:38:53,120
have them talk to the new database check

00:38:51,620 --> 00:38:54,920
them in the browser to make sure they're

00:38:53,120 --> 00:38:56,690
all working and then seamlessly switch

00:38:54,920 --> 00:38:58,550
your load balancer from serving traffic

00:38:56,690 --> 00:38:59,960
to the old cluster to the new cluster

00:38:58,550 --> 00:39:02,210
and then just throw the old cluster away

00:38:59,960 --> 00:39:03,320
and that we've used that technique and I

00:39:02,210 --> 00:39:04,700
believe there are other companies even

00:39:03,320 --> 00:39:07,100
that technique as well it works it's

00:39:04,700 --> 00:39:09,500
very simple and at the cost of a few

00:39:07,100 --> 00:39:10,970
extra hours of Amazon ec2 servers it

00:39:09,500 --> 00:39:13,820
gives you a lot of a lot of extra

00:39:10,970 --> 00:39:17,420
flexibility so we'd only modes very

00:39:13,820 --> 00:39:18,680
useful and even more useful although a

00:39:17,420 --> 00:39:20,240
lot more work to implement a feature

00:39:18,680 --> 00:39:22,370
flag so that's essentially taking this

00:39:20,240 --> 00:39:25,070
concept and rolling it out further to be

00:39:22,370 --> 00:39:26,750
able to turn on and off aspects of your

00:39:25,070 --> 00:39:28,700
application this is the kind of thing

00:39:26,750 --> 00:39:29,810
which Redis is really useful for because

00:39:28,700 --> 00:39:31,850
it can do one hundred thousand reads

00:39:29,810 --> 00:39:33,980
writes a second so if you've got your

00:39:31,850 --> 00:39:35,540
your feature flags in there it's not

00:39:33,980 --> 00:39:37,070
going to have any performance impact on

00:39:35,540 --> 00:39:38,540
the application in reading those out

00:39:37,070 --> 00:39:39,950
well that means you can do things like

00:39:38,540 --> 00:39:41,720
turn up all of your search related

00:39:39,950 --> 00:39:42,190
features while you upgrade your solar

00:39:41,720 --> 00:39:45,320
class

00:39:42,190 --> 00:39:47,060
all of the the really big sites like

00:39:45,320 --> 00:39:49,910
flickr and facebook ensign are all using

00:39:47,060 --> 00:39:51,830
this technique but it is quite it's

00:39:49,910 --> 00:39:55,460
quite a major investment of engineering

00:39:51,830 --> 00:40:00,170
time to get it up and running so those

00:39:55,460 --> 00:40:02,150
are my challenges for for the Python web

00:40:00,170 --> 00:40:03,680
application community in general I've

00:40:02,150 --> 00:40:05,270
got suggestions for the first two I

00:40:03,680 --> 00:40:07,100
don't have suggestions for this one but

00:40:05,270 --> 00:40:09,470
if anyone's got a magic solution that

00:40:07,100 --> 00:40:11,119
will make down time zero downtime

00:40:09,470 --> 00:40:14,060
deployment smoother I'd love to hear

00:40:11,119 --> 00:40:15,500
about it I wanted to end on one lesson

00:40:14,060 --> 00:40:17,540
which I mean we asked the Django

00:40:15,500 --> 00:40:20,390
community keep on learning over and over

00:40:17,540 --> 00:40:21,950
again and that's again it's related to

00:40:20,390 --> 00:40:24,950
the the debug setting these global

00:40:21,950 --> 00:40:26,630
settings so Django 1.1 there was only

00:40:24,950 --> 00:40:28,070
one way one place to configure your

00:40:26,630 --> 00:40:29,900
database and so if you were trying to

00:40:28,070 --> 00:40:31,369
set up replication where your weeds go

00:40:29,900 --> 00:40:32,390
to once at one that one set of database

00:40:31,369 --> 00:40:34,160
on your right to go to somewhere else

00:40:32,390 --> 00:40:36,650
you couldn't really do it without major

00:40:34,160 --> 00:40:38,869
hacking so in Django 1.2 we added

00:40:36,650 --> 00:40:40,310
multiple database settings as a huge

00:40:38,869 --> 00:40:41,570
amount of work to refactor the database

00:40:40,310 --> 00:40:44,600
thing to talk to multiple databases

00:40:41,570 --> 00:40:46,100
really really useful genuine 1.3 did it

00:40:44,600 --> 00:40:47,990
again we have cash settings where you

00:40:46,100 --> 00:40:49,400
could only configure one cash but then

00:40:47,990 --> 00:40:50,869
people started to realize that with

00:40:49,400 --> 00:40:53,390
caching often you'll want to have

00:40:50,869 --> 00:40:55,580
different types of caches for different

00:40:53,390 --> 00:40:57,920
purposes one really good example is you

00:40:55,580 --> 00:40:59,900
might have some data which is going to

00:40:57,920 --> 00:41:02,720
last for ages and you want to send that

00:40:59,900 --> 00:41:04,190
to to a sort of dedicated cash cluster

00:41:02,720 --> 00:41:05,330
well you've got other bits of data where

00:41:04,190 --> 00:41:07,700
doesn't matter if it gets refreshed

00:41:05,330 --> 00:41:09,020
every few minutes so you want to put

00:41:07,700 --> 00:41:10,670
that in something else but you want to

00:41:09,020 --> 00:41:12,440
make sure that the big data going into

00:41:10,670 --> 00:41:13,700
one cache doesn't cause the data and the

00:41:12,440 --> 00:41:15,530
other cash to get flushed out because

00:41:13,700 --> 00:41:16,730
you run out of room so a whole bunch of

00:41:15,530 --> 00:41:19,609
reasons that it makes sense to have

00:41:16,730 --> 00:41:21,350
multiple caches and haystack is a Django

00:41:19,609 --> 00:41:23,180
application that we use to talk to Sol

00:41:21,350 --> 00:41:24,950
at the search engine fantastically

00:41:23,180 --> 00:41:27,230
useful piece of software lets you talk

00:41:24,950 --> 00:41:28,850
to solar and whoosh and sapien and all

00:41:27,230 --> 00:41:30,230
sorts of different search indexes but

00:41:28,850 --> 00:41:32,420
again it only allows you to configure

00:41:30,230 --> 00:41:33,890
one search index at a time so the next

00:41:32,420 --> 00:41:36,050
version of haystack that's coming out

00:41:33,890 --> 00:41:38,090
hopefully hopefully quite soon has

00:41:36,050 --> 00:41:40,010
multiple backends modeled on Django's

00:41:38,090 --> 00:41:41,510
multi DB where you can configure

00:41:40,010 --> 00:41:43,790
multiple search service of talk to those

00:41:41,510 --> 00:41:45,380
so this is a pattern that keeps on

00:41:43,790 --> 00:41:47,119
coming up and unfortunately there's

00:41:45,380 --> 00:41:48,890
still stuff in Django which suffers from

00:41:47,119 --> 00:41:50,690
this kind of problem I've already talked

00:41:48,890 --> 00:41:52,490
about the problem with debug being this

00:41:50,690 --> 00:41:53,210
single global setting the facts all

00:41:52,490 --> 00:41:55,220
sorts of things on

00:41:53,210 --> 00:41:57,560
actually it's not really what you want

00:41:55,220 --> 00:42:00,050
to be doing the time zone sitting in

00:41:57,560 --> 00:42:01,490
Django utterly horrifies me I don't know

00:42:00,050 --> 00:42:02,960
if anyone's run into this bug but it's

00:42:01,490 --> 00:42:04,910
possible especially if you're running

00:42:02,960 --> 00:42:07,610
more than one Django application on the

00:42:04,910 --> 00:42:09,200
same apache server thankfully where I'm

00:42:07,610 --> 00:42:10,640
not doing for anything anymore it's

00:42:09,200 --> 00:42:12,950
possible to have different timezone

00:42:10,640 --> 00:42:15,080
settings which affect the time stamps in

00:42:12,950 --> 00:42:17,510
the log files so your Apache log file

00:42:15,080 --> 00:42:18,980
ends up coming out with like one thing

00:42:17,510 --> 00:42:20,300
from five hours ago and everything from

00:42:18,980 --> 00:42:22,640
now than the thing from five hours ago

00:42:20,300 --> 00:42:24,620
depending on which jangle applications

00:42:22,640 --> 00:42:27,380
last executed it's a horrible horrible

00:42:24,620 --> 00:42:28,820
piece of piece of mein mangal settings

00:42:27,380 --> 00:42:32,810
in there and the one that worries me

00:42:28,820 --> 00:42:34,220
most is is middleware Django has middle

00:42:32,810 --> 00:42:36,260
weather's a fantastic array of stuff

00:42:34,220 --> 00:42:38,810
it's very powerful but middleware you

00:42:36,260 --> 00:42:40,430
apply it and it gets run on every single

00:42:38,810 --> 00:42:42,110
request to every single part of your

00:42:40,430 --> 00:42:43,520
site if you want to run it conditionally

00:42:42,110 --> 00:42:45,890
you have to have the middleware itself

00:42:43,520 --> 00:42:47,990
decide on every request if it's going to

00:42:45,890 --> 00:42:50,090
execute or not and again I don't think

00:42:47,990 --> 00:42:51,830
that's something that really scales up I

00:42:50,090 --> 00:42:53,270
don't think having a single global

00:42:51,830 --> 00:42:55,930
setting for something like that like

00:42:53,270 --> 00:42:58,190
that is useful so as a general rule

00:42:55,930 --> 00:43:01,990
global settings need to be flushed out

00:42:58,190 --> 00:43:05,360
of the project and um excellent err

00:43:01,990 --> 00:43:07,910
agreements power to the people and them

00:43:05,360 --> 00:43:09,140
I think as an addendum any setting in

00:43:07,910 --> 00:43:11,420
there should i deal it should be

00:43:09,140 --> 00:43:12,830
modifiable at runtime as well this is

00:43:11,420 --> 00:43:15,740
something we still don't do very well

00:43:12,830 --> 00:43:17,750
but one of the reasons WordPress the

00:43:15,740 --> 00:43:19,220
blogging software is so popular is that

00:43:17,750 --> 00:43:20,690
you can install it on your server the

00:43:19,220 --> 00:43:22,460
first time you go to it your browser it

00:43:20,690 --> 00:43:24,110
asks you to enter your database settings

00:43:22,460 --> 00:43:25,970
you know there's a lot of thing as if

00:43:24,110 --> 00:43:27,620
you if you're talking to a cluster being

00:43:25,970 --> 00:43:29,420
able to dynamically configure an

00:43:27,620 --> 00:43:31,610
application at one time to start talking

00:43:29,420 --> 00:43:33,110
to a new database server you've just set

00:43:31,610 --> 00:43:35,480
up or new caching instances just come

00:43:33,110 --> 00:43:36,950
online is actually really useful so I'd

00:43:35,480 --> 00:43:38,960
go a step further and say not only a

00:43:36,950 --> 00:43:41,330
global settings evil but settings that

00:43:38,960 --> 00:43:42,560
you can't change from the change at

00:43:41,330 --> 00:43:46,310
runtime within the code of your

00:43:42,560 --> 00:43:49,430
application evil as well so that's

00:43:46,310 --> 00:43:50,840
everything I had to talk about I should

00:43:49,430 --> 00:43:53,090
mention if any of the things that you've

00:43:50,840 --> 00:43:54,530
seen in this talk utterly horrify you as

00:43:53,090 --> 00:43:56,450
a developer and please come and talk to

00:43:54,530 --> 00:43:58,250
us because we are hiring and we want to

00:43:56,450 --> 00:43:59,720
get developer web operations people in

00:43:58,250 --> 00:44:01,940
to take all of the code that I've

00:43:59,720 --> 00:44:03,560
written and make it sensible and insane

00:44:01,940 --> 00:44:05,690
and then keep on keep on doing what

00:44:03,560 --> 00:44:07,960
we're doing and thank you very much for

00:44:05,690 --> 00:44:07,960
your attention

00:44:17,089 --> 00:44:25,069
questions that's one at the front

00:44:32,020 --> 00:44:39,460
I have a question about Python 3 as

00:44:36,460 --> 00:44:41,980
their schedule about the date when we

00:44:39,460 --> 00:44:43,210
can use a hurry with just so you know

00:44:41,980 --> 00:44:46,330
idea does anyone know when Jenga is

00:44:43,210 --> 00:44:51,070
gonna work compared to three yeah no I'm

00:44:46,330 --> 00:44:53,440
Janice I can answer that um so XK nurse

00:44:51,070 --> 00:44:55,810
start to do some work on that and I

00:44:53,440 --> 00:44:58,570
talked last week with Martin for Lewis

00:44:55,810 --> 00:45:01,810
who did quite a lot of brook ice like

00:44:58,570 --> 00:45:04,170
two years ago about that and the current

00:45:01,810 --> 00:45:07,360
plan is to work on this during summer

00:45:04,170 --> 00:45:09,750
slowly migrating parts of the trunk 2 by

00:45:07,360 --> 00:45:12,400
3 and then figuring out actually how to

00:45:09,750 --> 00:45:15,850
you know how to do this kind of stuff

00:45:12,400 --> 00:45:25,300
it's got a big big messy work so I don't

00:45:15,850 --> 00:45:28,230
think before 1.5 at all ok a question

00:45:25,300 --> 00:45:30,340
about invalidation of external data and

00:45:28,230 --> 00:45:33,100
you have quite deep twitter integration

00:45:30,340 --> 00:45:34,450
how do you deal with profile changes so

00:45:33,100 --> 00:45:37,180
the way we do with profile change the

00:45:34,450 --> 00:45:39,190
moment isn't ideal and after basically

00:45:37,180 --> 00:45:40,750
every time you sign in we have to do a

00:45:39,190 --> 00:45:43,720
call to Twitter as part of that sign-in

00:45:40,750 --> 00:45:45,730
process so when you do that we fetch

00:45:43,720 --> 00:45:47,830
your Twitter information and we update

00:45:45,730 --> 00:45:49,630
your record then that's kind of unclear

00:45:47,830 --> 00:45:51,580
and people ask about it occasionally so

00:45:49,630 --> 00:45:53,860
the other thing that we've just done is

00:45:51,580 --> 00:45:55,720
as of a couple of days ago you can

00:45:53,860 --> 00:45:57,190
actually edit your profile on lanyards

00:45:55,720 --> 00:45:59,530
so you don't have to have your twitter

00:45:57,190 --> 00:46:01,510
bio as your bio on your conference page

00:45:59,530 --> 00:46:03,280
which is kind of good because a lot of

00:46:01,510 --> 00:46:05,320
people their twitter bio says like I

00:46:03,280 --> 00:46:06,460
won't follow you back and then you go to

00:46:05,320 --> 00:46:07,840
lanyard calm and there's a bunch of

00:46:06,460 --> 00:46:09,280
their talks and says I won't follow you

00:46:07,840 --> 00:46:11,110
back at the top which doesn't make much

00:46:09,280 --> 00:46:14,470
sense so we do actually have our own

00:46:11,110 --> 00:46:16,120
concept of a of a bio now as well and we

00:46:14,470 --> 00:46:18,520
will shortly be adding the ability to

00:46:16,120 --> 00:46:20,350
upload recognizable photos of yourself

00:46:18,520 --> 00:46:21,700
for the attendee directory so you don't

00:46:20,350 --> 00:46:22,960
have to squint at some of these bizarre

00:46:21,700 --> 00:46:29,140
little Twitter avataan try and figure

00:46:22,960 --> 00:46:34,970
out what they look like any other

00:46:29,140 --> 00:46:36,680
aggression I'm getting

00:46:34,970 --> 00:46:39,110
I I bet I can get another question as

00:46:36,680 --> 00:46:45,440
people there's one right at the back I

00:46:39,110 --> 00:46:47,300
think I should mention that and the

00:46:45,440 --> 00:46:49,820
slides of this talk will be available at

00:46:47,300 --> 00:46:53,840
that address as soon as I get a working

00:46:49,820 --> 00:46:58,400
internet connection regarding cash

00:46:53,840 --> 00:47:01,450
caching of steep static pals CSS and

00:46:58,400 --> 00:47:05,800
JavaScript how do you deal with

00:47:01,450 --> 00:47:09,110
including those files in the templates

00:47:05,800 --> 00:47:11,420
after you've changed the file name right

00:47:09,110 --> 00:47:13,310
give us I'll show you I'll pull up some

00:47:11,420 --> 00:47:16,630
code for this basically it's it's all a

00:47:13,310 --> 00:47:24,590
bit of a tangle but it does work so

00:47:16,630 --> 00:47:26,990
let's pull up based on HTML so we

00:47:24,590 --> 00:47:29,240
basically we have a custom custom

00:47:26,990 --> 00:47:31,610
template tag we wrote called s3 static

00:47:29,240 --> 00:47:36,290
tag I don't notice this legible tool um

00:47:31,610 --> 00:47:43,610
a little bit new hold on well it's I

00:47:36,290 --> 00:47:45,350
just need to grab there we go so I'll

00:47:43,610 --> 00:47:59,570
court just grab this out and show you it

00:47:45,350 --> 00:48:01,100
separately so that should be a bit more

00:47:59,570 --> 00:48:03,800
legible basically we have a tag looks

00:48:01,100 --> 00:48:06,140
like this and this does a couple of

00:48:03,800 --> 00:48:09,500
things if you're in development mode it

00:48:06,140 --> 00:48:11,720
actually abs ? random number on the end

00:48:09,500 --> 00:48:13,820
so that every request the development

00:48:11,720 --> 00:48:15,590
server is a fresh version of CSS you

00:48:13,820 --> 00:48:17,570
don't have to worry about cash CSS when

00:48:15,590 --> 00:48:22,280
you're developing things in production

00:48:17,570 --> 00:48:25,610
it's um looks up this file name in a

00:48:22,280 --> 00:48:27,170
dictionary in a dictionary that we write

00:48:25,610 --> 00:48:29,390
into the settings for when we deploy the

00:48:27,170 --> 00:48:31,460
app to find out what the name of that

00:48:29,390 --> 00:48:33,530
file will be after it's been after it's

00:48:31,460 --> 00:48:34,730
been changed so in this case look it up

00:48:33,530 --> 00:48:36,080
in a dictionary it will see that it's

00:48:34,730 --> 00:48:38,870
now called jQuery one point four point

00:48:36,080 --> 00:48:41,150
three dot random string Jess and it'll

00:48:38,870 --> 00:48:44,300
it'll write that out with CDN lanyard

00:48:41,150 --> 00:48:45,650
net at the beginning and the other thing

00:48:44,300 --> 00:48:48,300
we had to do which is a little bit

00:48:45,650 --> 00:48:49,590
awkward is our CSS files we make

00:48:48,300 --> 00:48:51,600
existing images in them you know

00:48:49,590 --> 00:48:53,100
background hyphen image Colonel URL blah

00:48:51,600 --> 00:48:55,950
so we actually have a dodgy little

00:48:53,100 --> 00:48:58,350
regular expression the reeds in the CSS

00:48:55,950 --> 00:49:01,470
file and replaces any of those with the

00:48:58,350 --> 00:49:03,240
updated version of the file name so it's

00:49:01,470 --> 00:49:07,860
all a bit hacky but it has been working

00:49:03,240 --> 00:49:21,000
pretty well for us thanks as another

00:49:07,860 --> 00:49:22,410
question right at the back hi there

00:49:21,000 --> 00:49:24,180
something if you'd heard of Django

00:49:22,410 --> 00:49:26,100
compress which does pretty much the same

00:49:24,180 --> 00:49:28,860
thing and if you have if you have why

00:49:26,100 --> 00:49:31,920
can you use it no I haven't what is this

00:49:28,860 --> 00:49:34,020
a django compress it minify suppressed

00:49:31,920 --> 00:49:35,610
yes I looked at it and I can't remember

00:49:34,020 --> 00:49:37,140
why but there was just one tiny little

00:49:35,610 --> 00:49:39,480
thing in there I guess it's not quite

00:49:37,140 --> 00:49:42,540
what i want to do so I rob my own also

00:49:39,480 --> 00:49:44,520
we were in Luxor in Egypt and that was

00:49:42,540 --> 00:49:47,400
really ill and I had nothing else to do

00:49:44,520 --> 00:49:49,440
so it felt like a good time to reinvent

00:49:47,400 --> 00:49:50,910
static static file handling but yeah

00:49:49,440 --> 00:49:52,680
it's quite possible that that does

00:49:50,910 --> 00:49:54,150
exactly what I want but I seem to

00:49:52,680 --> 00:49:56,310
remember there was one aspect of what I

00:49:54,150 --> 00:49:57,900
was doing that wasn't quite right and so

00:49:56,310 --> 00:50:05,880
I ended up ended up reinventing the

00:49:57,900 --> 00:50:09,390
wheel does it do the sha-1 hash in the

00:50:05,880 --> 00:50:11,160
filename trick that oh no I don't like

00:50:09,390 --> 00:50:12,780
that all know that was it that would

00:50:11,160 --> 00:50:14,220
have been at them yet the the problem

00:50:12,780 --> 00:50:15,450
with modified x is then you're dealing

00:50:14,220 --> 00:50:17,340
with people on different computers and

00:50:15,450 --> 00:50:18,870
all that kind of thing and the if you

00:50:17,340 --> 00:50:21,780
use a hash of the contents you're just

00:50:18,870 --> 00:50:23,490
absolute rock solid guarantee that if

00:50:21,780 --> 00:50:25,020
the file has changed by a single bite

00:50:23,490 --> 00:50:27,690
there will be a new file name up there

00:50:25,020 --> 00:50:31,530
so it just feels like the best possible

00:50:27,690 --> 00:50:33,150
way of dealing with that I think we're

00:50:31,530 --> 00:50:36,590
nearly out of time but I probably take

00:50:33,150 --> 00:50:36,590
one more question ok

00:50:38,559 --> 00:50:47,900
one more question so a couple things you

00:50:46,579 --> 00:50:50,240
mentioned we're hard that are pretty

00:50:47,900 --> 00:50:53,390
easy jenis I guess tension there's a

00:50:50,240 --> 00:50:56,269
read-only package for Jengo that seems

00:50:53,390 --> 00:50:58,010
pretty awesome oh sweet and feature is

00:50:56,269 --> 00:51:02,089
that one of those ones which intercepts

00:50:58,010 --> 00:51:04,010
all posts I wraps enforcers saddle it

00:51:02,089 --> 00:51:05,299
wraps the cursors and I assume it does

00:51:04,010 --> 00:51:07,369
what we do which propagates up an

00:51:05,299 --> 00:51:09,109
exception to the middleware and says you

00:51:07,369 --> 00:51:10,460
can't do this yeah you still think it's

00:51:09,109 --> 00:51:11,630
that's kind of horrible for users you

00:51:10,460 --> 00:51:13,190
kind of want to give them a warning

00:51:11,630 --> 00:51:16,549
before they click Submit they're going

00:51:13,190 --> 00:51:18,079
to be told off so really you want a flag

00:51:16,549 --> 00:51:19,549
in the template we say if in read-only

00:51:18,079 --> 00:51:21,470
mode display this message instead and

00:51:19,549 --> 00:51:22,940
that just ends up being hassled but you

00:51:21,470 --> 00:51:24,799
have to do it and the other one is

00:51:22,940 --> 00:51:26,960
feature switches are really easy in

00:51:24,799 --> 00:51:29,480
Django we open source a package called

00:51:26,960 --> 00:51:31,849
gargoyle which just magically works in

00:51:29,480 --> 00:51:35,510
it scales like no other sesam is that

00:51:31,849 --> 00:51:37,849
Redis uh it's not but it is very very

00:51:35,510 --> 00:51:39,650
efficiently cached through memcache in

00:51:37,849 --> 00:51:41,240
the database oh cool and there's

00:51:39,650 --> 00:51:42,589
actually a Redis back in for the back

00:51:41,240 --> 00:51:44,329
end that it uses so it could be

00:51:42,589 --> 00:51:52,900
excellent so have a look at gal girl

00:51:44,329 --> 00:51:52,900
then ok thank you

00:51:57,240 --> 00:51:59,300

YouTube URL: https://www.youtube.com/watch?v=4EmKiBCCZ3o


