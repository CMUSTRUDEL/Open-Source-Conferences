Title: Pitfalls of Continuous Deployment
Publication date: 2015-04-19
Playlist: EuroPython 2011
Description: 
	[EuroPython 2011] David Cramer - 22 June 2011 in "Track Ravioli
"
Captions: 
	00:00:07,040 --> 00:00:13,559
and so I originally made this pot for 60

00:00:10,830 --> 00:00:15,179
minutes so we're going to try to stretch

00:00:13,559 --> 00:00:16,730
it to 90 minutes if you have questions

00:00:15,179 --> 00:00:18,930
feel free to interrupt me at any time

00:00:16,730 --> 00:00:21,120
and i'll try to go a little bit slower

00:00:18,930 --> 00:00:24,630
than my talk yesterday since everybody

00:00:21,120 --> 00:00:25,770
doesn't speak great english like me so

00:00:24,630 --> 00:00:27,390
we're going to talk about continuous the

00:00:25,770 --> 00:00:29,610
point of today and the philosophy of

00:00:27,390 --> 00:00:32,309
continuous deployment is a shipping code

00:00:29,610 --> 00:00:33,839
as soon as it's ready so we've climbed

00:00:32,309 --> 00:00:36,989
it up with this last six months to

00:00:33,839 --> 00:00:41,370
discuss and we don't do it as Extreme as

00:00:36,989 --> 00:00:43,379
many people meaning that we deploy as

00:00:41,370 --> 00:00:44,670
frequently as we need to but we don't be

00:00:43,379 --> 00:00:47,100
a lot of many deployments every time

00:00:44,670 --> 00:00:49,079
they've been convicted or we don't let

00:00:47,100 --> 00:00:51,359
every single developer push and build

00:00:49,079 --> 00:00:54,480
out to the production hardware and this

00:00:51,359 --> 00:00:56,429
is just kind of paranoia it's it's hard

00:00:54,480 --> 00:00:58,980
to bring this into your culture and to

00:00:56,429 --> 00:01:01,769
give everybody the ability to do deploys

00:00:58,980 --> 00:01:02,850
and to come have awareness of like it's

00:01:01,769 --> 00:01:04,470
something for its how are they going to

00:01:02,850 --> 00:01:08,070
deal with it and we don't really want

00:01:04,470 --> 00:01:10,200
thanks for aging especially our size so

00:01:08,070 --> 00:01:13,230
really a lot of this comes back to

00:01:10,200 --> 00:01:15,870
integration and I said really just super

00:01:13,230 --> 00:01:18,510
awesome bill BOTS and to employ

00:01:15,870 --> 00:01:21,600
continuous deployment that's I would say

00:01:18,510 --> 00:01:24,750
the main the main goal you want is a

00:01:21,600 --> 00:01:28,410
really good integration system so the

00:01:24,750 --> 00:01:31,140
basic workflow looks kind of like this a

00:01:28,410 --> 00:01:33,810
a developer commits generally its to a

00:01:31,140 --> 00:01:36,060
master or its own we do use a lot of

00:01:33,810 --> 00:01:37,290
branches but we're going to not talk too

00:01:36,060 --> 00:01:39,600
much about that because it doesn't fit

00:01:37,290 --> 00:01:41,670
the philosophy and then goes to the

00:01:39,600 --> 00:01:42,570
integration cycle like Jenkins are built

00:01:41,670 --> 00:01:44,460
but or something that runs your

00:01:42,570 --> 00:01:47,880
automated tests and ideally it does that

00:01:44,460 --> 00:01:49,830
for every single commit on its own that

00:01:47,880 --> 00:01:51,360
way if there's a bug with that commit

00:01:49,830 --> 00:01:51,760
you know it's just that commit and it's

00:01:51,360 --> 00:01:53,800
on

00:01:51,760 --> 00:01:56,200
commits so it's more easy to identify

00:01:53,800 --> 00:01:58,570
what's going on and then if there's a

00:01:56,200 --> 00:02:00,100
failure it you know rinse and repeat it

00:01:58,570 --> 00:02:01,450
goes back to the developers that fix it

00:02:00,100 --> 00:02:03,850
it goes back to the bill bata to others

00:02:01,450 --> 00:02:06,730
a success what's it successful then you

00:02:03,850 --> 00:02:09,330
can employ after deploy however you're

00:02:06,730 --> 00:02:11,710
not done because things can still break

00:02:09,330 --> 00:02:15,160
thanks to feel wrong even if it's not an

00:02:11,710 --> 00:02:17,680
actual exception or error so you rely on

00:02:15,160 --> 00:02:20,400
on reporting whether that's like logging

00:02:17,680 --> 00:02:23,380
or metrics or watching for exceptions

00:02:20,400 --> 00:02:27,580
and then you need the the ability to

00:02:23,380 --> 00:02:31,240
roll back very very quickly so present

00:02:27,580 --> 00:02:32,830
comms so the biggest thing here is that

00:02:31,240 --> 00:02:35,410
you can develop features very quickly

00:02:32,830 --> 00:02:37,000
and if you mentally so like you can push

00:02:35,410 --> 00:02:39,790
out an initial version of something very

00:02:37,000 --> 00:02:41,080
quickly and 10 minutes 15 minutes 30

00:02:39,790 --> 00:02:42,910
minutes later you can have like an

00:02:41,080 --> 00:02:44,709
iteration on that version which is very

00:02:42,910 --> 00:02:47,680
very nice go as you get very good

00:02:44,709 --> 00:02:49,150
feedback you can release frequently like

00:02:47,680 --> 00:02:51,910
there's no morning week-long release

00:02:49,150 --> 00:02:53,890
cycles or in giant corporate world

00:02:51,910 --> 00:02:56,380
month-long or even further than that

00:02:53,890 --> 00:02:57,670
release cycles and the QA becomes much

00:02:56,380 --> 00:02:59,620
easier because you have much less code

00:02:57,670 --> 00:03:01,870
to worry about i'm talking about manual

00:02:59,620 --> 00:03:06,070
QA we do as much automated as possible

00:03:01,870 --> 00:03:07,540
but sometimes are very hard to test cons

00:03:06,070 --> 00:03:10,120
on the other hand the biggest one is

00:03:07,540 --> 00:03:11,769
culture so it's very hard to get adopted

00:03:10,120 --> 00:03:13,900
in your organization and it's even

00:03:11,769 --> 00:03:15,700
harder if you aren't from like a test

00:03:13,900 --> 00:03:20,290
driven background which we're definitely

00:03:15,700 --> 00:03:22,330
not it's very key that you write tests

00:03:20,290 --> 00:03:23,890
for everything as much as possible and

00:03:22,330 --> 00:03:27,970
you make sure those tests are very very

00:03:23,890 --> 00:03:30,370
strong and they actually fit the they

00:03:27,970 --> 00:03:31,480
fit kind of target of what the code is

00:03:30,370 --> 00:03:34,120
going to be doing in our real life

00:03:31,480 --> 00:03:35,860
situation them so the civility

00:03:34,120 --> 00:03:37,540
definitely depends on that and the

00:03:35,860 --> 00:03:38,739
initial time investment to actually get

00:03:37,540 --> 00:03:42,489
things going for continuous deployment

00:03:38,739 --> 00:03:43,540
is pretty hefty especially you don't

00:03:42,489 --> 00:03:45,810
have integration you have to do with

00:03:43,540 --> 00:03:48,070
getting integration you go to deal with

00:03:45,810 --> 00:03:49,660
kind of optimizing your deploy to be

00:03:48,070 --> 00:03:52,180
very quick and optimizing your rollback

00:03:49,660 --> 00:03:53,950
be a bit quicker and then you have to

00:03:52,180 --> 00:03:55,950
kind of get everyone on board to be like

00:03:53,950 --> 00:03:58,920
to understand

00:03:55,950 --> 00:04:00,959
flow and the kind of get used to you

00:03:58,920 --> 00:04:02,519
know you're working out of develop

00:04:00,959 --> 00:04:05,519
branch which is actually your production

00:04:02,519 --> 00:04:06,840
code and it's it definitely took us a

00:04:05,519 --> 00:04:08,760
while to get going and we're still

00:04:06,840 --> 00:04:12,180
struggling with it and it's been six to

00:04:08,760 --> 00:04:13,739
nine months now we get the big ones are

00:04:12,180 --> 00:04:17,280
just being able to iterate quickly and

00:04:13,739 --> 00:04:18,810
stability is very challenging so the

00:04:17,280 --> 00:04:21,299
first thing that you get out of this or

00:04:18,810 --> 00:04:23,700
that you need out of this is famous

00:04:21,299 --> 00:04:25,500
development and what I mean by this is

00:04:23,700 --> 00:04:27,020
being able to set up your development

00:04:25,500 --> 00:04:30,960
environment very clearly very easily

00:04:27,020 --> 00:04:33,510
being able to run tests very easily and

00:04:30,960 --> 00:04:35,820
this comes a few is so I kind of have

00:04:33,510 --> 00:04:37,200
this comparison which says production is

00:04:35,820 --> 00:04:39,180
greater than staging which is greater

00:04:37,200 --> 00:04:40,860
than C I which is your your testing

00:04:39,180 --> 00:04:42,030
server which is greater than developed

00:04:40,860 --> 00:04:44,310
and what I mean here is that the

00:04:42,030 --> 00:04:46,620
hardware but the software requirements

00:04:44,310 --> 00:04:48,750
for each of these machines is Miss

00:04:46,620 --> 00:04:50,460
scales down so the production machine is

00:04:48,750 --> 00:04:51,900
going to obviously have everything it's

00:04:50,460 --> 00:04:54,590
gonna have your databases it's going to

00:04:51,900 --> 00:04:57,210
have your cash is your your cues etc

00:04:54,590 --> 00:04:59,729
staging probably will have everything it

00:04:57,210 --> 00:05:01,830
may may not have like a full production

00:04:59,729 --> 00:05:04,080
cluster may not have a loan balance or

00:05:01,830 --> 00:05:05,610
something like that the continuous

00:05:04,080 --> 00:05:07,889
integration server however probably has

00:05:05,610 --> 00:05:10,590
even less we don't even use a real web

00:05:07,889 --> 00:05:14,490
server for our CI server and development

00:05:10,590 --> 00:05:16,320
is by far key to have absolutely fair

00:05:14,490 --> 00:05:17,940
bones it should just be fast develop in

00:05:16,320 --> 00:05:21,870
the integration server should rely on

00:05:17,940 --> 00:05:22,919
everything else so that's where it

00:05:21,870 --> 00:05:24,419
becomes key that the integration

00:05:22,919 --> 00:05:27,450
automates everything and that the

00:05:24,419 --> 00:05:29,130
testing covers as much as possible and

00:05:27,450 --> 00:05:30,720
so this kind of goes with a simple is

00:05:29,130 --> 00:05:34,740
greater than complete simple is greater

00:05:30,720 --> 00:05:36,810
the complete development simple simpler

00:05:34,740 --> 00:05:39,660
is greater than more complete for CI

00:05:36,810 --> 00:05:40,800
because Apaches generally not to break

00:05:39,660 --> 00:05:45,030
you don't need to test it and it's going

00:05:40,800 --> 00:05:47,520
to be slower to test it and so this kind

00:05:45,030 --> 00:05:48,900
of goes with packaging as well so you

00:05:47,520 --> 00:05:50,669
set of tools which gives you this much

00:05:48,900 --> 00:05:51,870
develop command which will install

00:05:50,669 --> 00:05:53,910
dependencies and soon

00:05:51,870 --> 00:05:55,200
self in the site packages which is

00:05:53,910 --> 00:05:57,120
actually very nice and we base

00:05:55,200 --> 00:05:59,070
everything around that as well as the

00:05:57,120 --> 00:06:02,310
test command just to make it very

00:05:59,070 --> 00:06:04,920
standard that is how you install the

00:06:02,310 --> 00:06:06,680
penalties and test apps and then there's

00:06:04,920 --> 00:06:09,900
also take like puppeted chef which are

00:06:06,680 --> 00:06:10,860
tools to repeat builds and service so if

00:06:09,900 --> 00:06:12,960
you need to bring about a new machine

00:06:10,860 --> 00:06:15,780
you can just publicize it I guess is the

00:06:12,960 --> 00:06:18,510
name and it will install the software to

00:06:15,780 --> 00:06:19,830
spec that you could find previously chef

00:06:18,510 --> 00:06:22,110
is kind of the same thing it's just a

00:06:19,830 --> 00:06:23,250
little bit different of a model and if

00:06:22,110 --> 00:06:24,960
you don't want to implement something

00:06:23,250 --> 00:06:27,840
like this any slight come up with like a

00:06:24,960 --> 00:06:30,840
bare-bones bootstrap whether it just

00:06:27,840 --> 00:06:32,400
bums much back into commands whether

00:06:30,840 --> 00:06:35,460
it's something that makes it easier to

00:06:32,400 --> 00:06:37,050
repeat builds on servers so going with

00:06:35,460 --> 00:06:40,070
our our simple it's better than complete

00:06:37,050 --> 00:06:42,420
this is kind of how our hardware looks

00:06:40,070 --> 00:06:44,910
so go up and down here we have

00:06:42,420 --> 00:06:46,980
absolutely nothing except postgres and

00:06:44,910 --> 00:06:48,540
we actually some of us do have morals

00:06:46,980 --> 00:06:49,920
like that if we're building a lot of

00:06:48,540 --> 00:06:52,350
things on reg we're gonna have reticence

00:06:49,920 --> 00:06:55,110
all my mirth announced solar / solar

00:06:52,350 --> 00:06:57,180
installed but generally like any

00:06:55,110 --> 00:06:59,250
developer all they need is this and a

00:06:57,180 --> 00:07:01,860
get check out and some basic Python

00:06:59,250 --> 00:07:03,390
packages site or a second one would be

00:07:01,860 --> 00:07:04,290
our CI server we have a bit more on

00:07:03,390 --> 00:07:06,150
there we actually want to test

00:07:04,290 --> 00:07:08,370
integration with solar we definitely

00:07:06,150 --> 00:07:09,840
want to test with Redis memcache there's

00:07:08,370 --> 00:07:11,190
actually issues you that sometimes we

00:07:09,840 --> 00:07:14,490
test with that but we don't care about

00:07:11,190 --> 00:07:17,280
apache or nginx or RabbitMQ because we

00:07:14,490 --> 00:07:19,830
can actually run the queue tasks in

00:07:17,280 --> 00:07:21,000
process and then we go to stage and we

00:07:19,830 --> 00:07:23,010
have actually everything except our

00:07:21,000 --> 00:07:25,020
queue again because we can run those

00:07:23,010 --> 00:07:27,720
tasks in process and the behavior

00:07:25,020 --> 00:07:30,300
matches except that it's not testing if

00:07:27,720 --> 00:07:34,410
rabbit actually works an introduction

00:07:30,300 --> 00:07:35,850
obviously has everything and actually

00:07:34,410 --> 00:07:38,130
something in ok we actually just

00:07:35,850 --> 00:07:42,800
recently started adopting vagrant which

00:07:38,130 --> 00:07:45,960
is a it's a virtual machine tool I guess

00:07:42,800 --> 00:07:48,690
and it's very nice because on somebody

00:07:45,960 --> 00:07:50,460
can pull down a repo CH contains so some

00:07:48,690 --> 00:07:51,849
configuration and it can install

00:07:50,460 --> 00:07:54,159
virtualbox which is our goal

00:07:51,849 --> 00:07:55,899
virtual machine and they can run vagrant

00:07:54,159 --> 00:07:57,819
up and they can actually get like

00:07:55,899 --> 00:07:59,529
whatever we want installed on like a

00:07:57,819 --> 00:08:01,179
macbook but in a linux virtual machine

00:07:59,529 --> 00:08:03,399
and then they all buy or they bridge the

00:08:01,179 --> 00:08:05,889
networking which means we can have sort

00:08:03,399 --> 00:08:07,389
of medicine any of these services that

00:08:05,889 --> 00:08:10,449
are kind of painful to configure say on

00:08:07,389 --> 00:08:11,679
a macbook or on windows and then just

00:08:10,449 --> 00:08:13,240
running to the background on all that

00:08:11,679 --> 00:08:14,800
XDM and you can just communicate with

00:08:13,240 --> 00:08:19,389
them just like they were on your own

00:08:14,800 --> 00:08:22,149
system so on a bootstrapping so I said

00:08:19,389 --> 00:08:24,789
simplify everything this goes with yours

00:08:22,149 --> 00:08:26,169
your software other databases but as

00:08:24,789 --> 00:08:30,669
well as like your packaging and your

00:08:26,169 --> 00:08:34,719
requirements I believe the discuss the

00:08:30,669 --> 00:08:37,870
main web service has AE odd external

00:08:34,719 --> 00:08:39,759
dependencies just for Python which

00:08:37,870 --> 00:08:41,949
surprisingly is challenging when you do

00:08:39,759 --> 00:08:46,089
to poise because things like lxml take

00:08:41,949 --> 00:08:47,949
forever to build so with the way our sub

00:08:46,089 --> 00:08:49,839
generally works is we get called a repo

00:08:47,949 --> 00:08:51,639
we have some kind of glue strap and I'm

00:08:49,839 --> 00:08:53,290
the bootstrap isn't even needed because

00:08:51,639 --> 00:08:56,019
I what does is run Python set up appt I

00:08:53,290 --> 00:08:58,680
develop and then we use genuine as a

00:08:56,019 --> 00:09:00,790
built-in months or that out we have a

00:08:58,680 --> 00:09:03,160
slightly different version of it just

00:09:00,790 --> 00:09:05,740
adds threading it makes it easier to

00:09:03,160 --> 00:09:07,000
work with so that we can simply be

00:09:05,740 --> 00:09:09,040
isolated you don't need a web server you

00:09:07,000 --> 00:09:11,259
don't need anything and then any

00:09:09,040 --> 00:09:13,180
dependencies highly recommend bigger

00:09:11,259 --> 00:09:14,920
than VirtualBox it's it's really really

00:09:13,180 --> 00:09:18,939
easy and you can use puppet or chef in

00:09:14,920 --> 00:09:20,709
it and it makes it my payments to use so

00:09:18,939 --> 00:09:23,430
one of the other big things is dealing

00:09:20,709 --> 00:09:26,500
with iteration so you can't just release

00:09:23,430 --> 00:09:27,910
halfway working features and how your

00:09:26,500 --> 00:09:29,949
users use them and be okay with them

00:09:27,910 --> 00:09:32,759
generally what we do is we'll start

00:09:29,949 --> 00:09:35,620
building a future if it's a feature that

00:09:32,759 --> 00:09:37,660
we want to physically see how it's going

00:09:35,620 --> 00:09:39,360
to work in a real world before releasing

00:09:37,660 --> 00:09:42,610
it to our audiences will do something

00:09:39,360 --> 00:09:44,949
that we call a switch and it basically

00:09:42,610 --> 00:09:48,790
looks like intestate and that's if and

00:09:44,949 --> 00:09:50,589
if my switch is turned on for whatever

00:09:48,790 --> 00:09:52,060
conditions then we're going to use this

00:09:50,589 --> 00:09:53,860
new version if not working age the old

00:09:52,060 --> 00:09:56,500
urgent and what this does is we can say

00:09:53,860 --> 00:09:58,569
for like us just our staff in house we

00:09:56,500 --> 00:10:01,959
can deploy initial versions of features

00:09:58,569 --> 00:10:03,270
we can employ faint at my back field

00:10:01,959 --> 00:10:05,790
data for other features

00:10:03,270 --> 00:10:08,520
and we can also turn those off by on

00:10:05,790 --> 00:10:09,840
apply if something's too slow or it's

00:10:08,520 --> 00:10:11,580
not working right we just switch it off

00:10:09,840 --> 00:10:12,600
and it will just fail this conditional

00:10:11,580 --> 00:10:15,060
check and go back to the old version

00:10:12,600 --> 00:10:16,770
which we know was working and we do this

00:10:15,060 --> 00:10:18,600
with something called guard will which

00:10:16,770 --> 00:10:21,900
is actually Jago only unfortunately

00:10:18,600 --> 00:10:24,210
right now but i'll talk about that in a

00:10:21,900 --> 00:10:25,710
second the other big one is um we have

00:10:24,210 --> 00:10:27,780
something called early adopters which is

00:10:25,710 --> 00:10:30,000
like a checkbox that our users can be

00:10:27,780 --> 00:10:33,210
like I want to maybe have broken veins

00:10:30,000 --> 00:10:34,530
on my site and so like the switches we

00:10:33,210 --> 00:10:36,390
can also say only show their early

00:10:34,530 --> 00:10:37,920
adopters and it basically gives us a

00:10:36,390 --> 00:10:40,860
nice way to test out functionality

00:10:37,920 --> 00:10:42,360
before we push it every one cigar what

00:10:40,860 --> 00:10:47,850
kind of looks like this could you can

00:10:42,360 --> 00:10:49,380
read them yes we use my own caption so

00:10:47,850 --> 00:10:51,570
we actually had an initial version of

00:10:49,380 --> 00:10:53,460
gargoyle I was in house only and we just

00:10:51,570 --> 00:10:57,000
transitioned to guard oily and I'll be

00:10:53,460 --> 00:10:58,650
the gargoyle like a six months ago but

00:10:57,000 --> 00:11:00,300
yeah so it basically gives you the CT

00:10:58,650 --> 00:11:02,760
interface like you can add a switch over

00:11:00,300 --> 00:11:04,650
here and you've got a bikini which is

00:11:02,760 --> 00:11:07,170
just like a fiction and key value some

00:11:04,650 --> 00:11:10,020
conditions I'm saying local hosts not

00:11:07,170 --> 00:11:11,460
the user mean and then you can do

00:11:10,020 --> 00:11:12,750
various things like percentage the

00:11:11,460 --> 00:11:14,340
percentage isn't actually a fixed

00:11:12,750 --> 00:11:17,970
percentage it doesn't want to this on

00:11:14,340 --> 00:11:19,980
like the user ID or an integer version

00:11:17,970 --> 00:11:21,930
of the IP address and see if you want to

00:11:19,980 --> 00:11:24,960
buy ten percent give 0 to 10 or you can

00:11:21,930 --> 00:11:27,630
do 10 to 20 or whatever and it also has

00:11:24,960 --> 00:11:29,790
support for excluding by ten percent or

00:11:27,630 --> 00:11:31,800
something like that and then you can eat

00:11:29,790 --> 00:11:32,940
a completely disable switch change it to

00:11:31,800 --> 00:11:35,610
selectively which means away those

00:11:32,940 --> 00:11:38,310
conditions or globalize a exactly

00:11:35,610 --> 00:11:39,930
for everyone and we've been using this

00:11:38,310 --> 00:11:41,460
very heavy load this and our other

00:11:39,930 --> 00:11:44,100
platform very very tightly for a long

00:11:41,460 --> 00:11:46,550
time now and it works wonders so if you

00:11:44,100 --> 00:11:49,290
use Django I definitely recommend this

00:11:46,550 --> 00:11:50,550
and this is really good because we a lot

00:11:49,290 --> 00:11:52,890
of time to build something out meaning

00:11:50,550 --> 00:11:54,570
we enable it for only ourselves in a

00:11:52,890 --> 00:11:56,670
house so let's sort of seeing and

00:11:54,570 --> 00:11:57,930
actually using other features and it

00:11:56,670 --> 00:12:00,120
will be like okay this doesn't work that

00:11:57,930 --> 00:12:02,160
well or there's a bug with this or it's

00:12:00,120 --> 00:12:05,400
actually slow and it gives us a nice way

00:12:02,160 --> 00:12:06,960
to kind of ask ourselves this is good

00:12:05,400 --> 00:12:08,670
enough to send out of the rest of our

00:12:06,960 --> 00:12:10,470
audience and then if it's something that

00:12:08,670 --> 00:12:12,520
we're concerned about like the speed up

00:12:10,470 --> 00:12:15,230
so we have a real time

00:12:12,520 --> 00:12:16,940
discusses a comment platform that has

00:12:15,230 --> 00:12:19,250
this embeddable widget system as a

00:12:16,940 --> 00:12:20,960
service you place on your site and one

00:12:19,250 --> 00:12:23,140
of the features of that is a real time

00:12:20,960 --> 00:12:25,550
pulling too pull a new comments

00:12:23,140 --> 00:12:27,560
unfortunately when certain pain tapping

00:12:25,550 --> 00:12:29,570
like WWDC potentially things could get

00:12:27,560 --> 00:12:32,300
slow I me actually have that behind a

00:12:29,570 --> 00:12:34,130
switch so it starts bogging observers we

00:12:32,300 --> 00:12:35,300
just you know we go in here we literally

00:12:34,130 --> 00:12:37,730
click this button and it propagates

00:12:35,300 --> 00:12:39,500
everywhere across the entire network and

00:12:37,730 --> 00:12:41,450
real time is now disabled then we just

00:12:39,500 --> 00:12:44,210
might save a ton of load so it's very

00:12:41,450 --> 00:12:45,830
very useful for things like that and

00:12:44,210 --> 00:12:49,520
it's also very efficient on how it

00:12:45,830 --> 00:12:50,990
stores the data so that when you access

00:12:49,520 --> 00:12:53,150
these switches were actually stored in a

00:12:50,990 --> 00:12:56,900
database it's not actually pointing the

00:12:53,150 --> 00:12:58,130
database ever really so reading

00:12:56,900 --> 00:13:00,470
conditions in gargoyle is actually

00:12:58,130 --> 00:13:02,450
pretty easy to this is part of one of

00:13:00,470 --> 00:13:04,040
the built-in ones that I give you some

00:13:02,450 --> 00:13:06,640
built-in we give you a user condition

00:13:04,040 --> 00:13:09,590
and we give you an IP address condition

00:13:06,640 --> 00:13:11,660
so a source is like this some magic in

00:13:09,590 --> 00:13:13,850
this model condition set models refer to

00:13:11,660 --> 00:13:16,820
the Django models and percent actually

00:13:13,850 --> 00:13:19,520
maps likey username says map at the user

00:13:16,820 --> 00:13:22,370
name attribute on whatever this is and

00:13:19,520 --> 00:13:24,860
then this actually isn't needed but this

00:13:22,370 --> 00:13:27,890
is how it determines if this condition

00:13:24,860 --> 00:13:30,850
set can be run on whatever we're

00:13:27,890 --> 00:13:33,800
checking so if you go back to this slide

00:13:30,850 --> 00:13:36,050
you'll see that me pass we passed a

00:13:33,800 --> 00:13:38,870
switch name and we pass kind of an

00:13:36,050 --> 00:13:40,310
object that we're saying if there are

00:13:38,870 --> 00:13:41,480
conditions that match something in this

00:13:40,310 --> 00:13:42,710
object that should be active so we're

00:13:41,480 --> 00:13:44,150
passing the request object here which

00:13:42,710 --> 00:13:46,100
has a little bit of magic which pulls

00:13:44,150 --> 00:13:48,980
out the IP of the user but it actually

00:13:46,100 --> 00:13:50,480
accepts our parks first arms either so

00:13:48,980 --> 00:13:51,710
you can pass like and objects or

00:13:50,480 --> 00:13:54,230
whatever and it will just check every

00:13:51,710 --> 00:13:55,640
single one so yeah it's very easy to

00:13:54,230 --> 00:13:57,020
define them and you just register them

00:13:55,640 --> 00:13:58,460
with whatever gargoyle namespace you're

00:13:57,020 --> 00:14:01,700
using and they'll just be available with

00:13:58,460 --> 00:14:03,740
that is active method without gargoyle

00:14:01,700 --> 00:14:05,150
if you're not using Jen you or you don't

00:14:03,740 --> 00:14:07,250
want to use something like our but it's

00:14:05,150 --> 00:14:10,340
very intimate things like this so very

00:14:07,250 --> 00:14:12,769
basic hard-coded switches and you have a

00:14:10,340 --> 00:14:14,899
dictionary that says my feature which is

00:14:12,769 --> 00:14:18,199
ki and the range is 0 50 sets fifty

00:14:14,899 --> 00:14:20,059
percent just like this is kind of a

00:14:18,199 --> 00:14:22,339
logic on how we trim the Attic you into

00:14:20,059 --> 00:14:25,040
an integer and then we just want modulus

00:14:22,339 --> 00:14:26,689
on this if it's you know it matches than

00:14:25,040 --> 00:14:36,170
this which is acting it not then it's

00:14:26,689 --> 00:14:38,839
not okay no ipv6 yet eventually so the

00:14:36,170 --> 00:14:40,339
next important thing is integration and

00:14:38,839 --> 00:14:42,350
we will just call Jenkins because

00:14:40,339 --> 00:14:44,540
Jenkins is the best there's also

00:14:42,350 --> 00:14:46,249
buildbot pillbot so there's a little bit

00:14:44,540 --> 00:14:47,720
of overlap between Bilbo and Jenkins

00:14:46,249 --> 00:14:51,499
Jenkins gives you awesome everything

00:14:47,720 --> 00:14:53,239
except it's not super flexible and to

00:14:51,499 --> 00:14:54,589
extend any other I Java build bots in

00:14:53,239 --> 00:14:57,199
Python which means it said it it's

00:14:54,589 --> 00:14:59,959
really nice however like the reporting

00:14:57,199 --> 00:15:02,749
interfaces and some of the functionality

00:14:59,959 --> 00:15:04,040
isn't nearly as good as Jenkins so

00:15:02,749 --> 00:15:06,319
obviously we use Jenkins I mean actually

00:15:04,040 --> 00:15:07,459
I think we have like 30 builds now and

00:15:06,319 --> 00:15:08,959
we actually test a bunch of open source

00:15:07,459 --> 00:15:12,230
projects that we contribute and maintain

00:15:08,959 --> 00:15:14,839
as well and generally is eat either

00:15:12,230 --> 00:15:16,040
green or red and if you see something

00:15:14,839 --> 00:15:18,379
like this something obviously your own

00:15:16,040 --> 00:15:19,819
and unfortunately a lot of times Jenkins

00:15:18,379 --> 00:15:22,040
is actually broken in some way whether

00:15:19,819 --> 00:15:24,319
its builder whether it's like they're

00:15:22,040 --> 00:15:27,679
giving your cleaning get integration or

00:15:24,319 --> 00:15:29,329
if it's github is down or something so

00:15:27,679 --> 00:15:32,679
if you see this you never to play it's

00:15:29,329 --> 00:15:35,269
always a blocker if you have a red build

00:15:32,679 --> 00:15:38,059
so setting up things in Jenkins actually

00:15:35,269 --> 00:15:39,799
pretty easy so we just created project

00:15:38,059 --> 00:15:43,579
we need Europe I done we set it to the

00:15:39,799 --> 00:15:45,559
gate repo we do bowling on the sem just

00:15:43,579 --> 00:15:48,799
easiest that we says pull every vintage

00:15:45,559 --> 00:15:50,119
as a cron timer and then actually like

00:15:48,799 --> 00:15:51,410
it's very reasonable for all of our

00:15:50,119 --> 00:15:52,939
bills they almost look at careful is

00:15:51,410 --> 00:15:54,619
everywhere and just literally create

00:15:52,939 --> 00:15:58,299
rich one and then run the test command

00:15:54,619 --> 00:16:00,889
and it should just work in most cases

00:15:58,299 --> 00:16:06,319
also jenkins gives you very very good

00:16:00,889 --> 00:16:08,689
reporting very good recording on JD in

00:16:06,319 --> 00:16:10,339
their next unit reports other than that

00:16:08,689 --> 00:16:12,649
it's kind of iffy because it's more java

00:16:10,339 --> 00:16:14,839
centric this is like here we have

00:16:12,649 --> 00:16:18,769
change the chain said that's been pulled

00:16:14,839 --> 00:16:19,879
in we have one failure this is abuse s

00:16:18,769 --> 00:16:22,040
the Boston one which means the new

00:16:19,879 --> 00:16:24,589
failure it tells the precise path to the

00:16:22,040 --> 00:16:26,869
failure we excited integrated with IRC

00:16:24,589 --> 00:16:28,970
channel soda it's spams whenever

00:16:26,869 --> 00:16:31,040
something is failing or something it's

00:16:28,970 --> 00:16:34,040
been fixed internationally messages

00:16:31,040 --> 00:16:37,579
whoever thinks fix that based on whoever

00:16:34,040 --> 00:16:39,589
was part of the committers in this bill

00:16:37,579 --> 00:16:42,069
because of it we don't actually test

00:16:39,589 --> 00:16:45,319
every single commit because we do this

00:16:42,069 --> 00:16:46,490
the polling McGirt which means that if

00:16:45,319 --> 00:16:47,809
you like three commits or they're

00:16:46,490 --> 00:16:50,540
actually could be like a push which is a

00:16:47,809 --> 00:16:52,309
bunch of commits so it can potentially

00:16:50,540 --> 00:16:53,629
message like five people and actually

00:16:52,309 --> 00:16:54,860
one of them broke it and the other four

00:16:53,629 --> 00:16:56,689
actually just getting really annoyed

00:16:54,860 --> 00:16:58,819
because that other guy broke it it now

00:16:56,689 --> 00:17:00,470
they're getting notified so this is kind

00:16:58,819 --> 00:17:04,429
of a problem that we kind of solved yet

00:17:00,470 --> 00:17:07,490
but we're working on it so some kind of

00:17:04,429 --> 00:17:09,439
requirements that we had in mind when we

00:17:07,490 --> 00:17:13,069
use Jenkins and like where we go in the

00:17:09,439 --> 00:17:15,049
future so it's very very important that

00:17:13,069 --> 00:17:17,029
as soon as something's broken as fast as

00:17:15,049 --> 00:17:20,720
you possibly can the user knows about it

00:17:17,029 --> 00:17:22,039
ideally faster than we do now are built

00:17:20,720 --> 00:17:25,339
to take like 20 minutes right now which

00:17:22,039 --> 00:17:26,809
isn't good enough so I needs 20 minutes

00:17:25,339 --> 00:17:29,809
after you commit something you might

00:17:26,809 --> 00:17:31,700
know it's growing and whether the IRC

00:17:29,809 --> 00:17:33,320
email and say messenger anything you can

00:17:31,700 --> 00:17:37,850
do just let them know as fast as

00:17:33,320 --> 00:17:39,590
possible that it's broken so Jenkins

00:17:37,850 --> 00:17:43,190
supports really good integration with my

00:17:39,590 --> 00:17:44,649
ex unit which is supported by us to be a

00:17:43,190 --> 00:17:47,480
plug-in and support of my nose by

00:17:44,649 --> 00:17:49,460
hideout test or test that hi I'm not

00:17:47,480 --> 00:17:53,240
sure which way it is closed hideout 10

00:17:49,460 --> 00:17:55,130
second and it also supports a couple

00:17:53,240 --> 00:17:57,559
other things to be a plugins so it

00:17:55,130 --> 00:17:59,630
supports linking I think that plug-ins

00:17:57,559 --> 00:18:02,090
for violations and it works reasonably

00:17:59,630 --> 00:18:04,730
well it's not made for Python so they're

00:18:02,090 --> 00:18:08,000
kind of adapting one pipe like some pie

00:18:04,730 --> 00:18:10,610
might give you the job eccentric well

00:18:08,000 --> 00:18:12,620
and there's a culture of plug-in which

00:18:10,610 --> 00:18:15,110
works with coverage shop by which i

00:18:12,620 --> 00:18:18,559
really wish was much better than

00:18:15,110 --> 00:18:20,270
coverage on pie is amazing and it's very

00:18:18,559 --> 00:18:22,559
John eccentric in it like all the

00:18:20,270 --> 00:18:24,330
organization of like functions in

00:18:22,559 --> 00:18:26,850
packages don't mean anything when you

00:18:24,330 --> 00:18:28,320
look at it but it does have some support

00:18:26,850 --> 00:18:30,629
so you can do checks and say like a

00:18:28,320 --> 00:18:33,299
cover just drop you should fail it but

00:18:30,629 --> 00:18:34,950
it's very obscure how you configure it

00:18:33,299 --> 00:18:37,980
because it is isn't made for the Python

00:18:34,950 --> 00:18:39,840
welcome oh and famous set up so you can

00:18:37,980 --> 00:18:41,879
actually install Jenkins the attitude

00:18:39,840 --> 00:18:43,620
which we do there's a guide on the

00:18:41,879 --> 00:18:47,279
Jenkins lady and you just need to set up

00:18:43,620 --> 00:18:49,710
a different source port and it just

00:18:47,279 --> 00:18:51,419
works most of the time has this has been

00:18:49,710 --> 00:18:53,429
a few times already updated and things

00:18:51,419 --> 00:18:56,610
and go so well but in general Jenkins

00:18:53,429 --> 00:18:58,740
has been really stable so some

00:18:56,610 --> 00:19:01,529
shortcomings solar integration false

00:18:58,740 --> 00:19:02,820
positives are awful like anytime the

00:19:01,529 --> 00:19:07,289
build is broken and it's not actually

00:19:02,820 --> 00:19:11,190
broken it's definitely the Red Riding

00:19:07,289 --> 00:19:13,830
Hood crying wolf whatever stories as

00:19:11,190 --> 00:19:15,720
soon as people start getting used to the

00:19:13,830 --> 00:19:17,369
fact that build might not be broken when

00:19:15,720 --> 00:19:19,529
it says it's broken then they stopped

00:19:17,369 --> 00:19:21,779
carrying that it's broken and we've

00:19:19,529 --> 00:19:23,490
really tried hard to fix this some of

00:19:21,779 --> 00:19:27,539
the big issues is the reporting just as

00:19:23,490 --> 00:19:29,460
inaccurate but maybe like the the test

00:19:27,539 --> 00:19:31,559
suite brand successfully but for some

00:19:29,460 --> 00:19:33,539
reason it didn't return the right exit

00:19:31,559 --> 00:19:35,249
code and now it makes its Brogan or

00:19:33,539 --> 00:19:37,110
maybe we actually rely on third-party

00:19:35,249 --> 00:19:38,759
services or even first party services

00:19:37,110 --> 00:19:41,509
that aren't responding as they should a

00:19:38,759 --> 00:19:44,129
good example is we had selenium tests

00:19:41,509 --> 00:19:46,649
very problematic selenium tests which

00:19:44,129 --> 00:19:47,940
are front end tests they emulate

00:19:46,649 --> 00:19:49,230
browsers and the test JavaScript

00:19:47,940 --> 00:19:50,850
everything we have this family like

00:19:49,230 --> 00:19:53,039
randomly like they would timeout and

00:19:50,850 --> 00:19:54,480
whatever it was just all in like for two

00:19:53,039 --> 00:19:55,679
months we just have it in silentium feel

00:19:54,480 --> 00:19:57,570
disabled but nobody even know it was

00:19:55,679 --> 00:19:59,220
disabled I just got tired of one day I'm

00:19:57,570 --> 00:20:00,840
like Artie it's it's getting turned off

00:19:59,220 --> 00:20:02,700
and then with two months later it's like

00:20:00,840 --> 00:20:05,460
how r selenium tested I'm like I don't

00:20:02,700 --> 00:20:08,639
know they don't work at it turned off I

00:20:05,460 --> 00:20:09,600
mean sort of fix this now but it's they

00:20:08,639 --> 00:20:12,240
basically just made them completely

00:20:09,600 --> 00:20:13,139
useless an otk and then bad tests are

00:20:12,240 --> 00:20:15,210
another big one you'll have a lot of

00:20:13,139 --> 00:20:18,929
intermittent failures because the test

00:20:15,210 --> 00:20:20,429
maybe daytime is kind of odd like the

00:20:18,929 --> 00:20:22,710
day it's running or something doesn't

00:20:20,429 --> 00:20:24,929
fit with what it thinks with so it's

00:20:22,710 --> 00:20:26,700
just going to fail randomly and we

00:20:24,929 --> 00:20:29,970
unfortunately saw a bunch of these are

00:20:26,700 --> 00:20:31,570
there it's hard to record on these using

00:20:29,970 --> 00:20:34,240
the existing solutions

00:20:31,570 --> 00:20:35,500
and it's even more annoying to actually

00:20:34,240 --> 00:20:36,580
figure out what the problems are

00:20:35,500 --> 00:20:40,390
sometimes sometimes they're simple

00:20:36,580 --> 00:20:41,590
sometimes they're very obscure and back

00:20:40,390 --> 00:20:45,160
to the services these are kind of the

00:20:41,590 --> 00:20:47,740
same one if you realize things like a

00:20:45,160 --> 00:20:50,860
tumbler if anyone's familiar with it is

00:20:47,740 --> 00:20:52,240
down a lot and we have tests that would

00:20:50,860 --> 00:20:53,440
test integration with very key I and

00:20:52,240 --> 00:20:55,330
eventually we just said we can't test

00:20:53,440 --> 00:20:56,590
their API anymore because randomly is

00:20:55,330 --> 00:20:58,030
not working in our builder family and

00:20:56,590 --> 00:21:01,030
even though our builds are actually

00:20:58,030 --> 00:21:02,500
completely okay so we've actually

00:21:01,030 --> 00:21:03,940
started pulling out all of these

00:21:02,500 --> 00:21:06,250
integration tests that we test services

00:21:03,940 --> 00:21:08,320
and we try to mock them which is a

00:21:06,250 --> 00:21:10,390
library that lets you think basically

00:21:08,320 --> 00:21:13,740
anything so we can kind of get a better

00:21:10,390 --> 00:21:16,360
idea but Cody just behaving as expected

00:21:13,740 --> 00:21:18,430
another really big one is code coverage

00:21:16,360 --> 00:21:19,630
so we've had a lot of cool ideas and I

00:21:18,430 --> 00:21:21,580
wish there was own kind of more

00:21:19,630 --> 00:21:22,960
innovation in this space we covered up

00:21:21,580 --> 00:21:24,670
high you can get a lot of information

00:21:22,960 --> 00:21:26,920
for example you can be like you know

00:21:24,670 --> 00:21:30,240
this if Satan is never executed and then

00:21:26,920 --> 00:21:32,440
if you commit code that's new code or

00:21:30,240 --> 00:21:35,470
actually hook those two cases if you

00:21:32,440 --> 00:21:36,910
commit Co that's new code and there's no

00:21:35,470 --> 00:21:38,470
test script we know there's no test for

00:21:36,910 --> 00:21:40,300
it because coverage says it's not

00:21:38,470 --> 00:21:41,650
covered at all it's never executed and

00:21:40,300 --> 00:21:45,940
you should be able to record on that and

00:21:41,650 --> 00:21:47,800
be able to directly say hey Joe your

00:21:45,940 --> 00:21:49,540
county isn't tested sorry we're going to

00:21:47,800 --> 00:21:51,880
revert this or the bills gonna fail like

00:21:49,540 --> 00:21:54,400
something just right off the bat the

00:21:51,880 --> 00:21:56,230
other big one is if tech like whoever

00:21:54,400 --> 00:21:58,600
was before you did it right correct test

00:21:56,230 --> 00:22:00,610
or day right test you should be able to

00:21:58,600 --> 00:22:03,340
know that coat you're committing isn't

00:22:00,610 --> 00:22:04,690
covered at all or you've added code and

00:22:03,340 --> 00:22:06,190
it's not being covered because there's

00:22:04,690 --> 00:22:07,660
less coverage than there was before and

00:22:06,190 --> 00:22:10,060
that could be literally a simple math

00:22:07,660 --> 00:22:12,100
that says if previous coverage is less

00:22:10,060 --> 00:22:14,140
than the percentage of coverage now

00:22:12,100 --> 00:22:16,780
build fails because somewhere we're

00:22:14,140 --> 00:22:18,520
missing coverage and we we haven't

00:22:16,780 --> 00:22:20,170
actually done anything much for this yet

00:22:18,520 --> 00:22:21,550
but it's certainly something we've been

00:22:20,170 --> 00:22:24,630
talking a lot about internally and we'd

00:22:21,550 --> 00:22:27,160
really want to push forward on our

00:22:24,630 --> 00:22:30,040
biggest issue however is a test see it

00:22:27,160 --> 00:22:31,930
takes forever we used a note which means

00:22:30,040 --> 00:22:33,430
everything hits a database everything

00:22:31,930 --> 00:22:34,690
notes pictures everything truncates a

00:22:33,430 --> 00:22:36,610
database over and over and over and over

00:22:34,690 --> 00:22:39,400
a number this has been getting faster in

00:22:36,610 --> 00:22:43,710
recent years of like using transactions

00:22:39,400 --> 00:22:45,029
or yea rather using turns out

00:22:43,710 --> 00:22:48,390
after the picture is loaded rolling back

00:22:45,029 --> 00:22:50,279
each one may it really fast but we've

00:22:48,390 --> 00:22:52,049
actually started moving more towards the

00:22:50,279 --> 00:22:53,250
service architecture which means it

00:22:52,049 --> 00:22:55,440
makes it really easy for us to write

00:22:53,250 --> 00:22:56,940
proper unit tests and proper integration

00:22:55,440 --> 00:22:58,590
tests and only test components that are

00:22:56,940 --> 00:22:59,700
being changed which means that builds

00:22:58,590 --> 00:23:01,770
become smaller which means we can

00:22:59,700 --> 00:23:05,399
distribute them further without a lot of

00:23:01,770 --> 00:23:08,250
extra work unfortunately we're not there

00:23:05,399 --> 00:23:10,980
yet so we need to find other ways to fix

00:23:08,250 --> 00:23:13,409
it so we're gonna start with fixing

00:23:10,980 --> 00:23:15,840
evokes positives so a few things so what

00:23:13,409 --> 00:23:20,700
would you know every night is we rerun

00:23:15,840 --> 00:23:23,250
the test suite every hour from like

00:23:20,700 --> 00:23:25,289
midnight to six in the morning because

00:23:23,250 --> 00:23:27,210
nobody's committee then and it weeds out

00:23:25,289 --> 00:23:28,710
some issues so like if it if there's one

00:23:27,210 --> 00:23:30,000
failure in there and there's five passes

00:23:28,710 --> 00:23:31,950
that means something's in interim

00:23:30,000 --> 00:23:33,870
failure that shouldn't be failing and

00:23:31,950 --> 00:23:37,230
needs fixed so we can kind of record on

00:23:33,870 --> 00:23:38,460
that this goes with reporting that we

00:23:37,230 --> 00:23:41,279
need to fix that we need to find some

00:23:38,460 --> 00:23:43,500
way that says hey Joe you have this pest

00:23:41,279 --> 00:23:45,630
that is awful it breaks randomly fix it

00:23:43,500 --> 00:23:47,340
we had found a good way to do that yet

00:23:45,630 --> 00:23:50,640
without literally yelling up to them and

00:23:47,340 --> 00:23:52,230
saying hey Joe can you fix this and rely

00:23:50,640 --> 00:23:53,820
less on third parties we started doing

00:23:52,230 --> 00:23:55,620
this we've experimented with both

00:23:53,820 --> 00:23:58,500
walking genius I'm not set on either one

00:23:55,620 --> 00:24:02,190
yet the documentation is kind of

00:23:58,500 --> 00:24:03,750
shaky and it does have some really cool

00:24:02,190 --> 00:24:05,700
things but i think i would definitely

00:24:03,750 --> 00:24:09,570
recommend walk right now but they're

00:24:05,700 --> 00:24:11,070
really nice the relation market guys so

00:24:09,570 --> 00:24:14,720
the coverage of stuff i talked a little

00:24:11,070 --> 00:24:16,890
bit about obviously fail or

00:24:14,720 --> 00:24:19,320
automatically revert or do something

00:24:16,890 --> 00:24:20,490
when the coverage drops when code is

00:24:19,320 --> 00:24:22,049
committed and it's not covered because

00:24:20,490 --> 00:24:23,370
if you're going to deploy master in a

00:24:22,049 --> 00:24:26,760
committee to master and it's not stable

00:24:23,370 --> 00:24:29,370
then you don't want to deploy that so i

00:24:26,760 --> 00:24:31,710
do ii either they're not committing to

00:24:29,370 --> 00:24:32,880
master or they are it's getting a loaded

00:24:31,710 --> 00:24:34,679
right away they're fixing it or it's

00:24:32,880 --> 00:24:36,570
getting rolled back or something's have

00:24:34,679 --> 00:24:39,809
anywhere it's maintaining the stability

00:24:36,570 --> 00:24:41,909
of your master another thing you can do

00:24:39,809 --> 00:24:44,279
which is a little bit harder we need to

00:24:41,909 --> 00:24:46,350
enforce committee test with code i say

00:24:44,279 --> 00:24:47,760
it's harder because you never want to do

00:24:46,350 --> 00:24:50,789
anything manually any time any haynes

00:24:47,760 --> 00:24:54,960
manual the number scales so find some

00:24:50,789 --> 00:24:56,460
way to automate that check of our their

00:24:54,960 --> 00:24:56,990
tests with your code and then family in

00:24:56,460 --> 00:24:58,340
Iran is

00:24:56,990 --> 00:25:00,320
very difficult you can do after the

00:24:58,340 --> 00:25:01,550
building runs with coverage but then you

00:25:00,320 --> 00:25:03,140
have the way talk to bill Bruns which

00:25:01,550 --> 00:25:07,010
means you can't do like a post coming

00:25:03,140 --> 00:25:08,510
fail and then the last one is really

00:25:07,010 --> 00:25:10,309
driving it into your culture driving and

00:25:08,510 --> 00:25:12,620
that unique test everywhere it have to

00:25:10,309 --> 00:25:14,390
be there we've started doing this and

00:25:12,620 --> 00:25:17,600
it's getting better but we still have

00:25:14,390 --> 00:25:19,280
issues with we're just making one little

00:25:17,600 --> 00:25:20,750
change so we don't want to spend like an

00:25:19,280 --> 00:25:22,790
extra ten minutes writing the test when

00:25:20,750 --> 00:25:24,710
the change took one minute unfortunately

00:25:22,790 --> 00:25:28,370
you have to and that that's really Margo

00:25:24,710 --> 00:25:31,460
Dunne um so speeding up the test which

00:25:28,370 --> 00:25:33,440
is our biggest one so right true unit

00:25:31,460 --> 00:25:34,700
essence much harder than integration

00:25:33,440 --> 00:25:36,530
tests are really really easy to write

00:25:34,700 --> 00:25:38,900
they take a couple minutes and then

00:25:36,530 --> 00:25:41,390
cover you know eighty-five percent of it

00:25:38,900 --> 00:25:44,059
unit tests on the other hand take much

00:25:41,390 --> 00:25:47,450
longer to write and they cover much less

00:25:44,059 --> 00:25:51,230
however their very very best Makka third

00:25:47,450 --> 00:25:52,790
party ideas and the big one we've been

00:25:51,230 --> 00:25:53,990
playing with is distributing tests and

00:25:52,790 --> 00:25:55,670
running them in parallel across multiple

00:25:53,990 --> 00:25:58,160
machines so we started building on

00:25:55,670 --> 00:26:00,470
something called mule which is the idea

00:25:58,160 --> 00:26:02,960
was it was a test suite runner on top of

00:26:00,470 --> 00:26:03,980
unit tests that would use celery and it

00:26:02,960 --> 00:26:05,240
would distribute your test so this

00:26:03,980 --> 00:26:06,740
machine to the provision that kind of

00:26:05,240 --> 00:26:08,210
like a bill bought which means they

00:26:06,740 --> 00:26:09,530
would install dependencies or whatever

00:26:08,210 --> 00:26:12,080
they needed and then they we just

00:26:09,530 --> 00:26:13,550
continually run tests after that one

00:26:12,080 --> 00:26:14,860
time setup costs I think you can

00:26:13,550 --> 00:26:18,610
provision my 10 machines and they would

00:26:14,860 --> 00:26:21,140
partition by the test case class and

00:26:18,610 --> 00:26:24,020
ideally it could be as fast as like we

00:26:21,140 --> 00:26:25,880
have I think 250 test cases potentially

00:26:24,020 --> 00:26:27,679
you could have 250 workers process you

00:26:25,880 --> 00:26:30,440
know so every single one goes really

00:26:27,679 --> 00:26:33,650
fast and then your builds all in as slow

00:26:30,440 --> 00:26:35,780
as the slowest running tests which is

00:26:33,650 --> 00:26:39,110
basically a very expensive way to make

00:26:35,780 --> 00:26:41,600
your testament class however it's also

00:26:39,110 --> 00:26:45,200
really nice and it's easier than

00:26:41,600 --> 00:26:46,790
changing every main unit test so mule is

00:26:45,200 --> 00:26:48,080
very unstable we don't even use it right

00:26:46,790 --> 00:26:50,540
now because there's a lot of issues and

00:26:48,080 --> 00:26:52,910
it breaks and we're kind of rethinking

00:26:50,540 --> 00:26:54,950
how we approach the problem originally

00:26:52,910 --> 00:26:57,860
we were trying to share resources so the

00:26:54,950 --> 00:26:58,820
problem is you need to run tests with

00:26:57,860 --> 00:27:00,950
your database you need to run

00:26:58,820 --> 00:27:02,750
integration tests and if I'm running

00:27:00,950 --> 00:27:04,520
tests on this database to specific table

00:27:02,750 --> 00:27:05,870
in the server you can't run tests on

00:27:04,520 --> 00:27:07,370
this database on the server so we have a

00:27:05,870 --> 00:27:10,820
limited some like really high pitched

00:27:07,370 --> 00:27:12,380
walking and the problem is it became a

00:27:10,820 --> 00:27:14,210
context manager for every service that

00:27:12,380 --> 00:27:17,210
needed walking you take out a walk on

00:27:14,210 --> 00:27:18,710
this database name and then if there was

00:27:17,210 --> 00:27:20,210
a walk on it you would try to find the

00:27:18,710 --> 00:27:22,160
next one if the next one didn't exist

00:27:20,210 --> 00:27:23,360
you would create cement rly you would

00:27:22,160 --> 00:27:25,580
end up with like 10 different databases

00:27:23,360 --> 00:27:26,690
for your ten workers however we have

00:27:25,580 --> 00:27:28,340
other things like redness and we have

00:27:26,690 --> 00:27:29,270
men cash which means we need locks on

00:27:28,340 --> 00:27:31,490
all these which means it gets very

00:27:29,270 --> 00:27:32,929
complicated so I think the approach

00:27:31,490 --> 00:27:34,309
we're going to move to is actually just

00:27:32,929 --> 00:27:36,800
changing everything to be vineyards and

00:27:34,309 --> 00:27:38,210
run vm is off of all the workers i'm

00:27:36,800 --> 00:27:39,110
actually distributed that way because

00:27:38,210 --> 00:27:41,030
I'm we don't have to worry about this

00:27:39,110 --> 00:27:43,880
extra isolation that you have to be

00:27:41,030 --> 00:27:45,830
aware of as a developer it's also mostly

00:27:43,880 --> 00:27:47,900
Django however everything's been built

00:27:45,830 --> 00:27:49,940
to use unit tests to and Iraq unit test

00:27:47,900 --> 00:27:52,190
two so the jenga is just an extension of

00:27:49,940 --> 00:27:54,290
the base API but the nice thing is for

00:27:52,190 --> 00:27:55,730
Jengo we made so you just drop it into

00:27:54,290 --> 00:27:57,380
it installed apps and there's a mule

00:27:55,730 --> 00:28:00,890
command that you run a managed ipod and

00:27:57,380 --> 00:28:03,590
just works so the multi processing is

00:28:00,890 --> 00:28:05,870
done facility a very big hat pretty

00:28:03,590 --> 00:28:08,419
proud of this hack it dynamically create

00:28:05,870 --> 00:28:11,630
skews joins us to use these the bee's

00:28:08,419 --> 00:28:13,250
knees and just provision shops rescue so

00:28:11,630 --> 00:28:15,559
it kind of works like a normal q it kind

00:28:13,250 --> 00:28:19,220
of doesn't else I Squatch unit

00:28:15,559 --> 00:28:22,400
integration which I mean knows and tied

00:28:19,220 --> 00:28:24,740
up test the right dozen hideout tests

00:28:22,400 --> 00:28:26,330
also have this unit test one doesn't you

00:28:24,740 --> 00:28:29,330
have the right a runner and they've got

00:28:26,330 --> 00:28:30,590
writing these things off so it's

00:28:29,330 --> 00:28:32,720
basically just includes a runner let me

00:28:30,590 --> 00:28:36,500
I had written that was based on

00:28:32,720 --> 00:28:40,610
something else and it's pretty simple so

00:28:36,500 --> 00:28:42,320
like this is this is the non Jacob way

00:28:40,610 --> 00:28:44,179
of unit and it's like I gave it up Iran

00:28:42,320 --> 00:28:45,710
Neil which is just a strippa dissolves

00:28:44,179 --> 00:28:47,200
test so that's why the runner which is

00:28:45,710 --> 00:28:50,929
actually what's in front on the servers

00:28:47,200 --> 00:28:53,030
and the test argument is the full path

00:28:50,929 --> 00:28:54,710
to the test case there's much about that

00:28:53,030 --> 00:28:55,580
things you can do here and you don't

00:28:54,710 --> 00:28:57,919
even have to use this there's

00:28:55,580 --> 00:28:59,570
distributed workflow which is nice so it

00:28:57,919 --> 00:29:02,660
includes out surrogate which is this

00:28:59,570 --> 00:29:05,570
includes multiprocessing which is this

00:29:02,660 --> 00:29:07,580
but it doesn't send it to other servers

00:29:05,570 --> 00:29:09,440
and includes just regular tests running

00:29:07,580 --> 00:29:14,210
with some of its food

00:29:09,440 --> 00:29:16,429
pathologic so finally we can employ

00:29:14,210 --> 00:29:17,769
we've gone through how we're going to

00:29:16,429 --> 00:29:20,990
develop our kind of how we're going to

00:29:17,769 --> 00:29:22,519
test our code so now we can move on how

00:29:20,990 --> 00:29:25,190
we do that go down to the service the

00:29:22,519 --> 00:29:26,960
way we do it is we use fabric if you

00:29:25,190 --> 00:29:28,549
don't use fabric you should it's really

00:29:26,960 --> 00:29:30,860
awesome and we do any comenzó deployed

00:29:28,549 --> 00:29:32,419
which means we do one server at a time

00:29:30,860 --> 00:29:34,159
and we do once or at a time because we

00:29:32,419 --> 00:29:36,320
need availability and if we take out

00:29:34,159 --> 00:29:39,139
half of our service you get it happen

00:29:36,320 --> 00:29:40,850
probably going down again so we once at

00:29:39,139 --> 00:29:44,000
a time we drop that server out of our

00:29:40,850 --> 00:29:45,830
pool out of our load balancer point and

00:29:44,000 --> 00:29:47,539
for sometimes it seems like a very

00:29:45,830 --> 00:29:49,370
unsolved problem that I have one but

00:29:47,539 --> 00:29:50,960
it's very very easy take this air out of

00:29:49,370 --> 00:29:52,370
the boat lowered its priority as much as

00:29:50,960 --> 00:29:55,220
you can in a party and whatever you're

00:29:52,370 --> 00:29:57,590
using then we install the requirements

00:29:55,220 --> 00:29:59,330
on the server mean we don't miss Utley

00:29:57,590 --> 00:30:00,860
reinstall very Barnett's have you an

00:29:59,330 --> 00:30:02,389
upgrade which means we just dip in some

00:30:00,860 --> 00:30:03,919
requirements or we run the development

00:30:02,389 --> 00:30:06,110
in this version matching because

00:30:03,919 --> 00:30:07,820
everything's froze it means it it

00:30:06,110 --> 00:30:11,000
alektra male version one point I was in

00:30:07,820 --> 00:30:13,929
salt we don't read assault leave this

00:30:11,000 --> 00:30:16,279
with a single word lamp right now which

00:30:13,929 --> 00:30:19,129
there's a problem with this about

00:30:16,279 --> 00:30:21,080
in a minute so we have a virtual end it

00:30:19,129 --> 00:30:23,419
has all of our builds and it shares all

00:30:21,080 --> 00:30:24,799
the requirements between em rebuild we

00:30:23,419 --> 00:30:26,809
update that and then we put the server

00:30:24,799 --> 00:30:29,779
back into the pool it's actually very

00:30:26,809 --> 00:30:33,950
very fast I think it's like 20 seconds

00:30:29,779 --> 00:30:35,480
or something for each server and we can

00:30:33,950 --> 00:30:36,889
actually run those in parallel do more

00:30:35,480 --> 00:30:40,039
than once at a time and we do it in some

00:30:36,889 --> 00:30:41,990
cases so how you can kind of be started

00:30:40,039 --> 00:30:44,149
if you're not even is already this is a

00:30:41,990 --> 00:30:45,320
basic fabric script I'm pretty awful

00:30:44,149 --> 00:30:48,500
with batch that this doesn't work it's

00:30:45,320 --> 00:30:49,940
not my fault so if you're not making

00:30:48,500 --> 00:30:52,460
such as they tell your virtual and

00:30:49,940 --> 00:30:54,049
somehow requirements then what you're

00:30:52,460 --> 00:30:55,659
gonna do is you're going to have a few

00:30:54,049 --> 00:30:58,129
things you can have a current build a

00:30:55,659 --> 00:30:59,570
previous filled those are you simply two

00:30:58,129 --> 00:31:03,649
revisions which are actually directories

00:30:59,570 --> 00:31:05,870
in a release folder or something and so

00:31:03,649 --> 00:31:07,250
basically when you're doing it in Floyd

00:31:05,870 --> 00:31:08,669
you're taking the current build and

00:31:07,250 --> 00:31:11,159
you're actually moving it

00:31:08,669 --> 00:31:12,659
useful and then you're taking a revision

00:31:11,159 --> 00:31:14,460
that you're deploying and your similar

00:31:12,659 --> 00:31:15,960
unit to the current build once you do

00:31:14,460 --> 00:31:18,539
this like Apache doesn't magically

00:31:15,960 --> 00:31:20,519
research most of the time unless you're

00:31:18,539 --> 00:31:22,499
doing my master customer child so once

00:31:20,519 --> 00:31:24,869
you've done this you can basically just

00:31:22,499 --> 00:31:26,580
we use a patchy and muggy so you just

00:31:24,869 --> 00:31:28,499
touch our antler and research that

00:31:26,580 --> 00:31:31,159
server that's very very quick to use of

00:31:28,499 --> 00:31:31,159
the Marquis all

00:31:40,380 --> 00:31:43,160
no matter

00:32:05,530 --> 00:32:11,960
yeah um so this is how you'll approach

00:32:09,200 --> 00:32:13,040
is very very important the reason we've

00:32:11,960 --> 00:32:14,600
done all this work here that this

00:32:13,040 --> 00:32:16,580
current previous is because rollback

00:32:14,600 --> 00:32:18,200
need to be awesome and this means

00:32:16,580 --> 00:32:19,670
rollback is literally moved your

00:32:18,200 --> 00:32:21,680
previous to make with your current some

00:32:19,670 --> 00:32:24,920
link and then restart the Apache server

00:32:21,680 --> 00:32:26,300
and if you can if you can handle cumin

00:32:24,920 --> 00:32:28,280
request which means you get Hanover

00:32:26,300 --> 00:32:30,140
blocking people so they're the page says

00:32:28,280 --> 00:32:33,290
loading for a second you can do this on

00:32:30,140 --> 00:32:35,180
every machine within like I think we can

00:32:33,290 --> 00:32:37,730
roll back in less than 10 seconds across

00:32:35,180 --> 00:32:40,150
all of our servers unfortunately that

00:32:37,730 --> 00:32:43,120
means for the next 30 to 60 seconds

00:32:40,150 --> 00:32:47,090
things are going to be a little bit slow

00:32:43,120 --> 00:32:48,260
so it's on ideal but if there's a for

00:32:47,090 --> 00:32:50,990
whatever reason maybe you committed a

00:32:48,260 --> 00:32:52,850
sin tax intern it got passed the bill

00:32:50,990 --> 00:32:54,290
Bob which I should never ever do and I

00:32:52,850 --> 00:32:56,780
guess the production and everything five

00:32:54,290 --> 00:32:59,360
hundreds in order to not bring down

00:32:56,780 --> 00:33:01,700
everything else you you instantly revert

00:32:59,360 --> 00:33:02,870
like otherwise you're going to if you

00:33:01,700 --> 00:33:04,310
have any kind of something wrong if you

00:33:02,870 --> 00:33:05,980
have any kind of services are relying on

00:33:04,310 --> 00:33:08,690
this exceptions are very very expensive

00:33:05,980 --> 00:33:10,430
it would be a catastrophic failure you

00:33:08,690 --> 00:33:11,900
don't be very very good mate I don't

00:33:10,430 --> 00:33:14,470
think we've ever had this situation but

00:33:11,900 --> 00:33:18,560
we have done a lot of robux based on

00:33:14,470 --> 00:33:20,330
reporting which I'll talk about next and

00:33:18,560 --> 00:33:23,180
it's very very important that you can do

00:33:20,330 --> 00:33:25,760
this very quickly so some of the

00:33:23,180 --> 00:33:29,030
challenges with deployed so we actually

00:33:25,760 --> 00:33:30,170
fix a lot of these which is nice so all

00:33:29,030 --> 00:33:31,910
right I decided yesterday i'm not going

00:33:30,170 --> 00:33:32,960
to call this hippie or high p or

00:33:31,910 --> 00:33:34,760
whatever anymore i'm a coffee shop

00:33:32,960 --> 00:33:38,480
because there's no confusion it's easier

00:33:34,760 --> 00:33:41,270
to say Tom Sochi shut works come on one

00:33:38,480 --> 00:33:43,670
web server because it just it's not

00:33:41,270 --> 00:33:45,230
responding or something this is

00:33:43,670 --> 00:33:46,850
something that's not responding so you

00:33:45,230 --> 00:33:49,310
can't install a dependency alright

00:33:46,850 --> 00:33:51,500
that's a big problem it doesn't scale so

00:33:49,310 --> 00:33:53,660
if you push out once or at a time going

00:33:51,500 --> 00:33:54,710
get you so far as you grow servers it's

00:33:53,660 --> 00:33:57,200
going to take longer and longer and

00:33:54,710 --> 00:33:59,010
longer to deploy the CPU across per

00:33:57,200 --> 00:34:00,510
server this is we

00:33:59,010 --> 00:34:01,890
Mary about this but if you're installing

00:34:00,510 --> 00:34:04,610
the requirements on every server that

00:34:01,890 --> 00:34:08,190
can be costly it can take a little one

00:34:04,610 --> 00:34:09,840
schema changes very easy to solve talk

00:34:08,190 --> 00:34:12,300
about this in a minute data model

00:34:09,840 --> 00:34:14,250
changes which means maybe have data in

00:34:12,300 --> 00:34:15,780
your cash and now the representation of

00:34:14,250 --> 00:34:17,940
that data in your code is changed and

00:34:15,780 --> 00:34:21,120
the cash shouldn't yakitori valium are

00:34:17,940 --> 00:34:22,710
also very easy to fix and backwards

00:34:21,120 --> 00:34:24,300
compatibility and it's also forwards

00:34:22,710 --> 00:34:26,399
compatibility because if you have the

00:34:24,300 --> 00:34:27,929
ability to revert and your data changes

00:34:26,399 --> 00:34:29,399
you actually need to be backwards and

00:34:27,929 --> 00:34:30,929
forwards compatible and if you have a

00:34:29,399 --> 00:34:32,909
service architecture you also need this

00:34:30,929 --> 00:34:34,530
so this is very very important and we I

00:34:32,909 --> 00:34:37,380
think we've got a pretty good job of it

00:34:34,530 --> 00:34:39,260
so in this in our culture so like if you

00:34:37,380 --> 00:34:42,659
need this it's pretty easy to get going

00:34:39,260 --> 00:34:47,399
it's a first one tea shop is down so

00:34:42,659 --> 00:34:48,389
luckily ask solem may or may not be how

00:34:47,399 --> 00:34:51,780
you pronounce his name the creator of

00:34:48,389 --> 00:34:54,870
celery and some other guys work on a

00:34:51,780 --> 00:34:56,790
Jengo implementation of the python

00:34:54,870 --> 00:34:59,040
package index and we've actually even

00:34:56,790 --> 00:35:01,410
fortune eventually we're going to merge

00:34:59,040 --> 00:35:02,850
this up with the main release and it's

00:35:01,410 --> 00:35:04,800
called she shot it's made of on github

00:35:02,850 --> 00:35:06,930
it's very very easy to set up and gives

00:35:04,800 --> 00:35:08,370
you a local cheese shop install which

00:35:06,930 --> 00:35:10,080
means you can register packages there

00:35:08,370 --> 00:35:12,090
you can proxy packages are there

00:35:10,080 --> 00:35:15,060
potentially you can cash everything

00:35:12,090 --> 00:35:17,040
that's on the actual tea shop the first

00:35:15,060 --> 00:35:18,750
time it comes down into there and we

00:35:17,040 --> 00:35:20,250
actually do have a proxy behind us that

00:35:18,750 --> 00:35:21,960
there's a caching course so we haven't

00:35:20,250 --> 00:35:24,450
done it in this but we have a lot of

00:35:21,960 --> 00:35:25,830
packages that we need to change maybe we

00:35:24,450 --> 00:35:28,470
need to fix a bug and the maintainer

00:35:25,830 --> 00:35:30,840
doesn't pull in our requests or we just

00:35:28,470 --> 00:35:32,220
have like our actual pack like we have a

00:35:30,840 --> 00:35:34,170
forked version of Jango and we actually

00:35:32,220 --> 00:35:36,000
have that on our local tea shop it's

00:35:34,170 --> 00:35:37,500
just there for people with hit install

00:35:36,000 --> 00:35:39,360
it makes it very easy to do things like

00:35:37,500 --> 00:35:40,740
that so I highly recommend you check

00:35:39,360 --> 00:35:45,530
this out if you have any issues with the

00:35:40,740 --> 00:35:49,260
tea shop um the copy of us

00:35:45,530 --> 00:35:51,300
so the next one is scaling unemployed so

00:35:49,260 --> 00:35:52,770
we haven't had this issue yet but it if

00:35:51,300 --> 00:35:54,390
you imagine companies like I think

00:35:52,770 --> 00:35:57,750
somebody said spot by the 600 servers

00:35:54,390 --> 00:36:00,740
Twitter it's huge incremental deploy

00:35:57,750 --> 00:36:03,470
power you need some kind of fan out or

00:36:00,740 --> 00:36:05,670
growing deploy cycle that can be quick

00:36:03,470 --> 00:36:07,440
where there's nimble downtime or no

00:36:05,670 --> 00:36:09,810
downtime but you're not doing much

00:36:07,440 --> 00:36:12,330
during a time and waiting on it so put

00:36:09,810 --> 00:36:15,450
vs. pole is also another video if you're

00:36:12,330 --> 00:36:17,400
pushing all of your let's just set your

00:36:15,450 --> 00:36:18,630
packaging with Debian packages so you're

00:36:17,400 --> 00:36:19,770
building this on a central server and

00:36:18,630 --> 00:36:22,200
then you're pushing this out every

00:36:19,770 --> 00:36:24,270
server like you're literally keep eating

00:36:22,200 --> 00:36:26,580
it or something if you have more servers

00:36:24,270 --> 00:36:27,990
that's going to take a long long time so

00:36:26,580 --> 00:36:30,980
I do they use a pull system and I bleep

00:36:27,990 --> 00:36:33,300
Twitter uses I think it's called murder

00:36:30,980 --> 00:36:35,250
and I used bit torn to do this which is

00:36:33,300 --> 00:36:37,080
kind of an interesting concept here 100

00:36:35,250 --> 00:36:40,890
service I think it's a little overkill

00:36:37,080 --> 00:36:42,510
yeah a thousand maybe it makes sense and

00:36:40,890 --> 00:36:43,830
isolation versus packaging so we chose

00:36:42,510 --> 00:36:46,140
we'd ever join started with Debian

00:36:43,830 --> 00:36:49,620
packages we chose to go to first ones

00:36:46,140 --> 00:36:50,760
there were good reasons behind this I

00:36:49,620 --> 00:36:52,620
don't remember exactly when they work

00:36:50,760 --> 00:36:55,200
but even if you don't use a virtual one

00:36:52,620 --> 00:36:56,520
already even if you use a w packages

00:36:55,200 --> 00:36:59,940
probably use a virtual on events so use

00:36:56,520 --> 00:37:01,800
actual private packages so there's some

00:36:59,940 --> 00:37:03,990
issues that you'll have your isolation

00:37:01,800 --> 00:37:06,030
can be hard to achieve and we do a lot

00:37:03,990 --> 00:37:07,890
of this now with the ends which I think

00:37:06,030 --> 00:37:09,600
I just recommend just go straight on VMS

00:37:07,890 --> 00:37:12,870
with everything that you need isolation

00:37:09,600 --> 00:37:15,390
it but it can also be very very complex

00:37:12,870 --> 00:37:18,900
when you're doing a t14 influence so I

00:37:15,390 --> 00:37:21,420
talked about Howard employee we have the

00:37:18,900 --> 00:37:23,100
directory structure is a vertical a

00:37:21,420 --> 00:37:24,570
single work for one and then every

00:37:23,100 --> 00:37:26,670
release as well as a current and

00:37:24,570 --> 00:37:27,990
previous only the single words want to

00:37:26,670 --> 00:37:30,660
share with everybody which means if we

00:37:27,990 --> 00:37:32,010
wrote back and lxml was upgraded in

00:37:30,660 --> 00:37:33,840
there we actually have the reinstall the

00:37:32,010 --> 00:37:36,240
correct version of XML to actually have

00:37:33,840 --> 00:37:38,160
a precise stable build and you do that

00:37:36,240 --> 00:37:39,540
means we have to take you know a few

00:37:38,160 --> 00:37:42,450
minutes actually compile that and to

00:37:39,540 --> 00:37:43,980
build that in everything so and recently

00:37:42,450 --> 00:37:46,590
use a similar drawings because it's very

00:37:43,980 --> 00:37:49,590
very fast potentially you could copy the

00:37:46,590 --> 00:37:50,730
verge 12 anywhere fun / release and then

00:37:49,590 --> 00:37:51,380
upgrade it but if you actually be

00:37:50,730 --> 00:37:53,599
installed

00:37:51,380 --> 00:37:55,430
one for every employee which I had done

00:37:53,599 --> 00:37:56,660
on personal sites in the past you're

00:37:55,430 --> 00:37:58,250
talking about building every requirement

00:37:56,660 --> 00:38:00,650
for every release and it gets me very

00:37:58,250 --> 00:38:02,150
slow but that would be the correct way

00:38:00,650 --> 00:38:03,619
to isolate it in the correct way to make

00:38:02,150 --> 00:38:05,150
sure that your code don't be stable if

00:38:03,619 --> 00:38:07,220
your versions are changing and they're

00:38:05,150 --> 00:38:10,660
not compatible we luckily have an issue

00:38:07,220 --> 00:38:14,750
and I don't think it's too common but I

00:38:10,660 --> 00:38:16,460
would say so a good idea so schema

00:38:14,750 --> 00:38:17,960
changes this is a something that it's

00:38:16,460 --> 00:38:21,680
very easy to solve but it seems a lot of

00:38:17,960 --> 00:38:23,059
people have troubles with this much

00:38:21,680 --> 00:38:24,259
easier to solve in Postgres than my

00:38:23,059 --> 00:38:27,170
signal I'm not sure about the other

00:38:24,259 --> 00:38:29,089
database engine so the way we do it is

00:38:27,170 --> 00:38:32,359
in Postgres if you had a notable column

00:38:29,089 --> 00:38:34,400
it time is dis very fast if you do it in

00:38:32,359 --> 00:38:37,250
my sequel you probably have to some

00:38:34,400 --> 00:38:38,599
downtime so there's two situations if

00:38:37,250 --> 00:38:40,819
you do it post guys you have the column

00:38:38,599 --> 00:38:42,680
is normal if you can't do it in Postgres

00:38:40,819 --> 00:38:43,819
you take the server out of a pool you

00:38:42,680 --> 00:38:45,950
switch your master and your sling around

00:38:43,819 --> 00:38:47,569
whatever you do you make the change it

00:38:45,950 --> 00:38:49,369
has to be knowable no matter what it has

00:38:47,569 --> 00:38:51,170
to be Noble and then you put it back in

00:38:49,369 --> 00:38:53,569
the pool and we even have to do this on

00:38:51,170 --> 00:38:56,329
some very large reasons once that's done

00:38:53,569 --> 00:38:58,250
you have the app code to actually save

00:38:56,329 --> 00:38:59,990
the data you don't add anything else yet

00:38:58,250 --> 00:39:01,970
yeah they have put a save the day to me

00:38:59,990 --> 00:39:03,529
like you've added this new field and you

00:39:01,970 --> 00:39:05,359
need to start populating that data you

00:39:03,529 --> 00:39:06,740
need that data to be back field but you

00:39:05,359 --> 00:39:08,779
also you metadata did you continually

00:39:06,740 --> 00:39:10,730
film so you start populating your app

00:39:08,779 --> 00:39:11,809
then you do an employee and then you run

00:39:10,730 --> 00:39:13,490
it back though and you run the backup

00:39:11,809 --> 00:39:15,349
and take weeks you can take a day take

00:39:13,490 --> 00:39:16,609
an hour it doesn't matter because the

00:39:15,349 --> 00:39:20,690
back bill is going to cover everything

00:39:16,609 --> 00:39:23,000
in our ages or everything that's been

00:39:20,690 --> 00:39:25,009
having since you've done this that boy

00:39:23,000 --> 00:39:25,970
and it's also cover everything in the

00:39:25,009 --> 00:39:27,619
past but you're not gonna miss anything

00:39:25,970 --> 00:39:30,109
because you're already filling it in

00:39:27,619 --> 00:39:31,130
your actual production code base once

00:39:30,109 --> 00:39:32,450
you've done that then you can have the

00:39:31,130 --> 00:39:34,309
app code to actually be from the data

00:39:32,450 --> 00:39:35,630
and then you can do another deploy and

00:39:34,309 --> 00:39:37,039
this is fully backwards importance

00:39:35,630 --> 00:39:38,779
compatible because the call was Noble

00:39:37,039 --> 00:39:40,609
it's not being used until you're at this

00:39:38,779 --> 00:39:43,250
step and if you revert it's not going to

00:39:40,609 --> 00:39:45,859
matter maybe you go back this and it's

00:39:43,250 --> 00:39:47,240
still filling once you revert or maybe

00:39:45,859 --> 00:39:48,230
you go back further and it's not going

00:39:47,240 --> 00:39:51,440
anymore but it doesn't matter because

00:39:48,230 --> 00:39:53,930
you're not using it so it's very very

00:39:51,440 --> 00:39:58,549
easy to do and it works just fine for us

00:39:53,930 --> 00:40:00,440
video production alters on certain sets

00:39:58,549 --> 00:40:00,950
of data on our art of very large sets of

00:40:00,440 --> 00:40:03,500
data we

00:40:00,950 --> 00:40:04,700
actually do that without suffering a

00:40:03,500 --> 00:40:06,200
little bit of downtime on that server

00:40:04,700 --> 00:40:07,790
that's pulling on that sir it's taken

00:40:06,200 --> 00:40:11,660
out of the pool everything's still going

00:40:07,790 --> 00:40:14,089
to completely online in rare cases we

00:40:11,660 --> 00:40:15,490
need to do upgrades to the database we

00:40:14,089 --> 00:40:17,570
just post here so we also use slow knee

00:40:15,490 --> 00:40:19,130
and you do those it becomes a little bit

00:40:17,570 --> 00:40:20,570
more tricky we actually created

00:40:19,130 --> 00:40:23,510
something called the read-only mode

00:40:20,570 --> 00:40:24,589
which lets us basically set black which

00:40:23,510 --> 00:40:26,810
will change all the databases the

00:40:24,589 --> 00:40:29,119
rehoming which basically makes it so

00:40:26,810 --> 00:40:30,920
when we need to do major changes you can

00:40:29,119 --> 00:40:32,570
read from a slave that has a copy of the

00:40:30,920 --> 00:40:33,740
data but you can't actually post new

00:40:32,570 --> 00:40:35,869
data which we didn't want to worry about

00:40:33,740 --> 00:40:37,670
replication issues and it works fairly

00:40:35,869 --> 00:40:39,589
well we haven't had to use it too much I

00:40:37,670 --> 00:40:40,640
think the longest it was ever enabled

00:40:39,589 --> 00:40:43,119
was five minutes and that was for a

00:40:40,640 --> 00:40:46,880
one-time I'm creative saloni which is

00:40:43,119 --> 00:40:48,650
surprisingly complicated the other big

00:40:46,880 --> 00:40:50,690
one is talked about when your data model

00:40:48,650 --> 00:40:52,070
changes which need your cache data needs

00:40:50,690 --> 00:40:53,990
to be able to handle that there's some

00:40:52,070 --> 00:40:56,960
very simple ways to do this we implement

00:40:53,990 --> 00:40:58,880
something like a cache prefix and you

00:40:56,960 --> 00:41:01,849
can just bump this manually whenever you

00:40:58,880 --> 00:41:05,390
know you need to we do this a lot with

00:41:01,849 --> 00:41:07,160
our CDN I think we also automatically

00:41:05,390 --> 00:41:08,810
bump some of these for the CD yet so we

00:41:07,160 --> 00:41:09,800
actually push a lot of data to see and i

00:41:08,810 --> 00:41:12,650
highly recommend this if you need

00:41:09,800 --> 00:41:14,750
performance so JavaScript whatever just

00:41:12,650 --> 00:41:16,160
pushes in the CDM it's virgin there and

00:41:14,750 --> 00:41:19,310
this version is somehow represented in

00:41:16,160 --> 00:41:20,780
the code base student records it under

00:41:19,310 --> 00:41:22,369
cool idea which I actually haven't had a

00:41:20,780 --> 00:41:25,550
need to do but I feel like it would work

00:41:22,369 --> 00:41:27,500
very well and serialize like a sha of

00:41:25,550 --> 00:41:29,750
the class the object that your data

00:41:27,500 --> 00:41:31,369
represents as part of the key then if

00:41:29,750 --> 00:41:33,170
that data object changes it's

00:41:31,369 --> 00:41:34,790
automatically invalidated it's using a

00:41:33,170 --> 00:41:36,619
different version if you roll back and

00:41:34,790 --> 00:41:37,730
your cash hasn't expired that data is

00:41:36,619 --> 00:41:40,579
still there from the old version so

00:41:37,730 --> 00:41:43,280
you're still getting cash days it should

00:41:40,579 --> 00:41:45,369
just work ok that version will be to

00:41:43,280 --> 00:41:47,480
clean up the history of the dictionary

00:41:45,369 --> 00:41:49,040
you have a certificate insertion orders

00:41:47,480 --> 00:41:50,599
the bachelor internally it's gonna be

00:41:49,040 --> 00:41:52,550
different that's all when it's not going

00:41:50,599 --> 00:41:55,190
to be there that's a good point so not

00:41:52,550 --> 00:41:56,869
precisely this code but somehow take a

00:41:55,190 --> 00:41:59,480
shower after the representation of the

00:41:56,869 --> 00:42:01,270
class and then these multiple captions

00:41:59,480 --> 00:42:04,010
so we uh I don't have any you have now

00:42:01,270 --> 00:42:06,440
this is a lot easier using Django in 13

00:42:04,010 --> 00:42:09,980
but um so like sessions and they're

00:42:06,440 --> 00:42:10,710
their own cash most of our like I guess

00:42:09,980 --> 00:42:12,869
our actual

00:42:10,710 --> 00:42:14,400
data they have a different cache these

00:42:12,869 --> 00:42:16,890
brightest ashes all over those are all

00:42:14,400 --> 00:42:19,140
different clusters and it becomes much

00:42:16,890 --> 00:42:20,640
easier to manage this when you have kind

00:42:19,140 --> 00:42:24,119
of some of this this architecture in

00:42:20,640 --> 00:42:27,240
place okay so the last thing is

00:42:24,119 --> 00:42:30,150
recording if this makes sense this is

00:42:27,240 --> 00:42:32,700
why it's important this is a bag of

00:42:30,150 --> 00:42:37,440
manure and this is a fan some of us do

00:42:32,700 --> 00:42:38,849
combine things aren't very good um good

00:42:37,440 --> 00:42:41,970
example of our recordings important and

00:42:38,849 --> 00:42:44,490
this is true story so I asked someone

00:42:41,970 --> 00:42:46,980
I'm like you know wheres MongoDB yeah

00:42:44,490 --> 00:42:49,650
where's the server not online and any

00:42:46,980 --> 00:42:51,359
guys like oh it's now well the fact that

00:42:49,650 --> 00:42:52,200
we didn't know it was down it luckily he

00:42:51,359 --> 00:42:55,170
didn't matter it was a yeast in

00:42:52,200 --> 00:42:56,369
production it's a problem we didn't know

00:42:55,170 --> 00:42:58,050
why I was down we have to go back and

00:42:56,369 --> 00:42:59,520
look and this could be like two days

00:42:58,050 --> 00:43:01,050
after examined this was production

00:42:59,520 --> 00:43:02,430
hardware yeah we're not gonna wait two

00:43:01,050 --> 00:43:04,109
days to find out please don't we wait

00:43:02,430 --> 00:43:05,520
you know ten minutes of finding out

00:43:04,109 --> 00:43:08,580
which is you know knowing within five

00:43:05,520 --> 00:43:10,680
seconds the problem so talk about how we

00:43:08,580 --> 00:43:14,280
can implement reporting and metrics on

00:43:10,680 --> 00:43:17,339
their metrics for different things so a

00:43:14,280 --> 00:43:20,099
few things that you should monitor radio

00:43:17,339 --> 00:43:21,990
traffic and my chocolate I don't need

00:43:20,099 --> 00:43:23,760
western questions that that's one

00:43:21,990 --> 00:43:25,680
measure of time but there's also

00:43:23,760 --> 00:43:28,740
business metrics things can be like user

00:43:25,680 --> 00:43:30,810
registrations if you're a big ecommerce

00:43:28,740 --> 00:43:32,970
site that can be sales for us in the

00:43:30,810 --> 00:43:35,339
comments posted this drops dramatically

00:43:32,970 --> 00:43:36,450
then there's probably an issue and even

00:43:35,339 --> 00:43:38,130
if there's not an issue if it drops

00:43:36,450 --> 00:43:39,480
dramatically you might want to roll back

00:43:38,130 --> 00:43:41,700
because you might be losing money or

00:43:39,480 --> 00:43:45,480
something might be not working as you

00:43:41,700 --> 00:43:48,780
expected that also things like request a

00:43:45,480 --> 00:43:50,640
second response time whether it's

00:43:48,780 --> 00:43:53,760
response on the web app or it's a

00:43:50,640 --> 00:43:56,700
response on databases or slow queries or

00:43:53,760 --> 00:43:58,140
any other service you're using the other

00:43:56,700 --> 00:44:00,060
big one image actually is one of our

00:43:58,140 --> 00:44:03,180
main metrics as exceptions let me to

00:44:00,060 --> 00:44:05,099
generally we're not worried about Amy

00:44:03,180 --> 00:44:07,020
testing we're not worried about are we

00:44:05,099 --> 00:44:09,570
making sales because we change this line

00:44:07,020 --> 00:44:12,510
text so a big one is are things working

00:44:09,570 --> 00:44:13,950
or are they not working if we can't

00:44:12,510 --> 00:44:15,690
catch it in tests we have to catch it

00:44:13,950 --> 00:44:16,800
there is unfortunately a lot of

00:44:15,690 --> 00:44:18,510
JavaScript and you know how to get

00:44:16,800 --> 00:44:19,980
solution has knows but it's server-side

00:44:18,510 --> 00:44:23,460
exception we want to know about this

00:44:19,980 --> 00:44:24,690
right away another really big want to

00:44:23,460 --> 00:44:26,220
grow up in this yeah I social media

00:44:24,690 --> 00:44:28,589
Twitter will tell you when things are

00:44:26,220 --> 00:44:30,270
broken right away they will they will

00:44:28,589 --> 00:44:32,070
hate you and they will be like discuss

00:44:30,270 --> 00:44:33,810
why you suck why is your stuff broking

00:44:32,070 --> 00:44:36,630
and they will let you know almost as

00:44:33,810 --> 00:44:38,490
fast as your automated metrics tracking

00:44:36,630 --> 00:44:41,089
let you know that's and vegetables so

00:44:38,490 --> 00:44:44,720
this is like zendesk we use this asleep

00:44:41,089 --> 00:44:44,720
she's put her surgery

00:45:04,630 --> 00:45:11,900
you know there's a problem so anyways

00:45:10,250 --> 00:45:15,920
let's talk about how we can kind of

00:45:11,900 --> 00:45:17,870
capture these metrics what we use I what

00:45:15,920 --> 00:45:20,810
I want to say our standards or grab I

00:45:17,870 --> 00:45:22,730
and this is a time-travel itself is not

00:45:20,810 --> 00:45:25,160
time series database but graphite is an

00:45:22,730 --> 00:45:27,950
interface to time series database this

00:45:25,160 --> 00:45:30,400
will be something you could imagine it's

00:45:27,950 --> 00:45:33,680
just like RIT tool there's also a newer

00:45:30,400 --> 00:45:35,300
another new to other called open TS de

00:45:33,680 --> 00:45:38,690
which is another time series database

00:45:35,300 --> 00:45:40,760
it's it's HBase power which means Java

00:45:38,690 --> 00:45:43,600
power and we're not big fans of the Java

00:45:40,760 --> 00:45:45,680
stack because it's painful to manage

00:45:43,600 --> 00:45:47,030
something scary and grab is really

00:45:45,680 --> 00:45:49,070
awesome it works just as well as

00:45:47,030 --> 00:45:50,480
anything else I would argue to be safe

00:45:49,070 --> 00:45:51,680
you're easy already after it's something

00:45:50,480 --> 00:45:53,330
like this they're newer technologies

00:45:51,680 --> 00:45:56,270
they work a little bit better in my

00:45:53,330 --> 00:45:58,340
opinion and on top of that we use nagios

00:45:56,270 --> 00:46:03,670
and nagios will let you take 80 like

00:45:58,340 --> 00:46:05,720
this it's good you is it working okay um

00:46:03,670 --> 00:46:07,430
not going to let you take data from

00:46:05,720 --> 00:46:10,040
whatever like your time series database

00:46:07,430 --> 00:46:12,410
and basically implement alerting and

00:46:10,040 --> 00:46:14,930
reporting on it so if you know all of a

00:46:12,410 --> 00:46:17,210
sudden this this blue line happens here

00:46:14,930 --> 00:46:18,590
this is important well I don't know make

00:46:17,210 --> 00:46:20,000
something shows up interface but you

00:46:18,590 --> 00:46:21,260
really don't care about but then here

00:46:20,000 --> 00:46:24,110
you know very waited something's

00:46:21,260 --> 00:46:26,180
happening and that's where you born I

00:46:24,110 --> 00:46:27,860
honestly have no idea how this works I

00:46:26,180 --> 00:46:29,510
barely know how this works so no

00:46:27,860 --> 00:46:31,730
questions on this please I am admitting

00:46:29,510 --> 00:46:34,760
the systems but when you use these and I

00:46:31,730 --> 00:46:37,040
implements that'sthat's parties and it's

00:46:34,760 --> 00:46:39,500
very easy because this is the client and

00:46:37,040 --> 00:46:42,380
all I have to do is put something like a

00:46:39,500 --> 00:46:45,380
set B gutta here in the keening and this

00:46:42,380 --> 00:46:47,150
is kind of I pulled out the code we had

00:46:45,380 --> 00:46:50,330
and I tried to make it clean

00:46:47,150 --> 00:46:54,050
his works but we spy stats d which is

00:46:50,330 --> 00:46:58,820
written by SE and it's a fish inspector

00:46:54,050 --> 00:47:00,110
assets be gaining that I believe it

00:46:58,820 --> 00:47:02,390
buffers and then sends the data to the

00:47:00,110 --> 00:47:05,810
text earth Davis so what we actually do

00:47:02,390 --> 00:47:07,310
is for every key that we're passing me

00:47:05,810 --> 00:47:09,470
actually out of suffolk's which is the

00:47:07,310 --> 00:47:13,400
host name because you can do you can do

00:47:09,470 --> 00:47:14,540
like like like notation sort of with the

00:47:13,400 --> 00:47:16,910
stats when you want to pull them into a

00:47:14,540 --> 00:47:18,950
chart so everything will be like if the

00:47:16,910 --> 00:47:21,890
SAT is user registration maybe it's

00:47:18,950 --> 00:47:23,990
called by users on registration and then

00:47:21,890 --> 00:47:26,060
it's suffix with the host name at the

00:47:23,990 --> 00:47:27,830
end and that lets just be like users

00:47:26,060 --> 00:47:30,290
about registration netstar get all those

00:47:27,830 --> 00:47:32,810
also we can break it down my server and

00:47:30,290 --> 00:47:33,980
we do this for lots and lots and lots of

00:47:32,810 --> 00:47:35,660
things and we're going to do this or a

00:47:33,980 --> 00:47:37,100
lot more and i highly recommend

00:47:35,660 --> 00:47:39,830
implementing something like this you

00:47:37,100 --> 00:47:41,470
haven't yet this was kind of what it

00:47:39,830 --> 00:47:43,430
looks like again I believe this is oh

00:47:41,470 --> 00:47:45,110
yeah it's a cluster of our servers I

00:47:43,430 --> 00:47:46,700
don't know what this means actually I

00:47:45,110 --> 00:47:48,980
don't generally look at the charts I

00:47:46,700 --> 00:47:51,890
just make them and somebody else lets

00:47:48,980 --> 00:47:54,230
you know something's wrong it's another

00:47:51,890 --> 00:47:55,910
big one is walking along and I'm going

00:47:54,230 --> 00:48:01,490
back two exceptions and why we need them

00:47:55,910 --> 00:48:02,750
to make this is a kind of a list of

00:48:01,490 --> 00:48:08,060
requirements that we want for our

00:48:02,750 --> 00:48:10,970
logging so like there's a few things we

00:48:08,060 --> 00:48:13,570
can look at so we need real time we

00:48:10,970 --> 00:48:15,890
don't really go find what we want a fine

00:48:13,570 --> 00:48:17,270
aggregates we really don't need we need

00:48:15,890 --> 00:48:18,860
compute I more than aggregates what

00:48:17,270 --> 00:48:20,960
items are awesome because it filters out

00:48:18,860 --> 00:48:24,080
some junk data and actually makes it

00:48:20,960 --> 00:48:26,140
manageable history you don't need all

00:48:24,080 --> 00:48:28,820
the time you need recent history

00:48:26,140 --> 00:48:30,620
notifications can be done with something

00:48:28,820 --> 00:48:32,360
else I canarios however having a

00:48:30,620 --> 00:48:34,850
built-in makes it more flexible and more

00:48:32,360 --> 00:48:36,980
precise scalable scalable pretty

00:48:34,850 --> 00:48:39,650
important availability it's very

00:48:36,980 --> 00:48:40,550
important and metadata which is

00:48:39,650 --> 00:48:43,610
something about five out in a minute

00:48:40,550 --> 00:48:46,850
which funny like storing more than just

00:48:43,610 --> 00:48:48,140
a long message so first option is to

00:48:46,850 --> 00:48:50,120
smog which everybody uses that we

00:48:48,140 --> 00:48:53,480
actually use for a lot of things um it

00:48:50,120 --> 00:48:54,980
can be real time it has history it can't

00:48:53,480 --> 00:48:58,980
aggravate things so I don't think unless

00:48:54,980 --> 00:49:00,300
you post process of it it can't direct

00:48:58,980 --> 00:49:01,830
give you notifications unless you have

00:49:00,300 --> 00:49:04,619
something else get out of it it is

00:49:01,830 --> 00:49:05,850
scalable it's very available and you

00:49:04,619 --> 00:49:07,560
can't really do metadata unless you're

00:49:05,850 --> 00:49:10,290
adding it to the message which that

00:49:07,560 --> 00:49:12,900
makes it impossible dream genco actually

00:49:10,290 --> 00:49:14,910
provides email collection building don't

00:49:12,900 --> 00:49:16,109
ever use it it as soon as you have it

00:49:14,910 --> 00:49:17,310
aired and you have any kind of traffic

00:49:16,109 --> 00:49:19,859
you're not going to have you known for

00:49:17,310 --> 00:49:21,450
the rest today the 30 times in five

00:49:19,859 --> 00:49:23,070
aggregates more or less the same day

00:49:21,450 --> 00:49:25,290
it's not scalable but it does have

00:49:23,070 --> 00:49:28,109
metadata so it's fun of us won't get any

00:49:25,290 --> 00:49:31,440
visitors to your site use we created

00:49:28,109 --> 00:49:34,530
century and it's much better this is

00:49:31,440 --> 00:49:35,940
kind of a lie but if an entire system

00:49:34,530 --> 00:49:39,180
works if you have enough hardware

00:49:35,940 --> 00:49:40,890
everything scales or something we have

00:49:39,180 --> 00:49:42,900
one fishing with a bass note we have

00:49:40,890 --> 00:49:45,890
solar surf report and we've never had

00:49:42,900 --> 00:49:48,480
issues with century being slow so

00:49:45,890 --> 00:49:49,830
everything just works it has has the

00:49:48,480 --> 00:49:52,880
address which means it groups errors

00:49:49,830 --> 00:49:55,830
that are the same it has notifications

00:49:52,880 --> 00:49:57,750
so it has the same thing as Jago

00:49:55,830 --> 00:49:59,850
significations accept because it

00:49:57,750 --> 00:50:01,590
advocates it knows the first time in

00:49:59,850 --> 00:50:03,300
exceptions been seen which basically

00:50:01,590 --> 00:50:04,800
also knows if it's notified you if

00:50:03,300 --> 00:50:06,300
you've seen it yet because first time

00:50:04,800 --> 00:50:11,190
it's been Cena sent out an email that it

00:50:06,300 --> 00:50:13,530
doesn't resent us an email so if use

00:50:11,190 --> 00:50:15,330
jingo actually herself there's the

00:50:13,530 --> 00:50:16,830
tumors in the century one is work in

00:50:15,330 --> 00:50:19,290
progress which I hope to actually finish

00:50:16,830 --> 00:50:21,450
the release of this weekend and then

00:50:19,290 --> 00:50:23,820
this version one point out one point it

00:50:21,450 --> 00:50:26,880
was very heavily tidy Django you can't

00:50:23,820 --> 00:50:28,950
use it without pega since we're about

00:50:26,880 --> 00:50:30,590
I'm blending it with the century to

00:50:28,950 --> 00:50:33,119
Architecture down to pippin saw

00:50:30,590 --> 00:50:36,450
centuries of stupidest all century start

00:50:33,119 --> 00:50:39,210
runs kinda Majengo run 0 said it all

00:50:36,450 --> 00:50:41,940
right actually my keys man but I don't

00:50:39,210 --> 00:50:43,440
remember right now and then in your

00:50:41,940 --> 00:50:44,910
natural app so this is just the server

00:50:43,440 --> 00:50:47,700
on the top this is your app like you're

00:50:44,910 --> 00:50:50,760
like disqus com o yours plug in a

00:50:47,700 --> 00:50:51,360
century client and then you patents

00:50:50,760 --> 00:50:53,490
configuration

00:50:51,360 --> 00:50:57,000
the remote URL which is actually a list

00:50:53,490 --> 00:50:58,530
of URLs if you want this is a cheap way

00:50:57,000 --> 00:51:02,190
to do availability you send it to

00:50:58,530 --> 00:51:04,110
multiple machines so like this is the

00:51:02,190 --> 00:51:05,820
bare minimum configuration to have an

00:51:04,110 --> 00:51:08,190
isolated century server however with

00:51:05,820 --> 00:51:09,900
Django you can also just pop it center

00:51:08,190 --> 00:51:11,400
here and ignore this line up here and

00:51:09,900 --> 00:51:13,140
you'll have century installed on the

00:51:11,400 --> 00:51:15,060
same server George a new app so

00:51:13,140 --> 00:51:17,070
essentially webs this entry viewer and

00:51:15,060 --> 00:51:18,540
the centric client and they'll just like

00:51:17,070 --> 00:51:21,720
glam together I don't recommend it

00:51:18,540 --> 00:51:23,070
because it's not isolated and there

00:51:21,720 --> 00:51:24,330
could potentially be problems if your

00:51:23,070 --> 00:51:25,350
web server goes down you might want to

00:51:24,330 --> 00:51:27,990
see what's going on so you might want to

00:51:25,350 --> 00:51:29,550
look at those but your sites entering is

00:51:27,990 --> 00:51:32,880
something so how you recommend the

00:51:29,550 --> 00:51:34,620
sender separate site unfortunately

00:51:32,880 --> 00:51:36,270
thinking about configuration is awful

00:51:34,620 --> 00:51:37,800
and it's all because that's the only

00:51:36,270 --> 00:51:39,900
thing i can give you with it just work

00:51:37,800 --> 00:51:41,850
by default so the first thing you're

00:51:39,900 --> 00:51:43,260
going to want to do is not use a sequel

00:51:41,850 --> 00:51:47,280
light which of people i need something

00:51:43,260 --> 00:51:49,320
like postgres are mighty and we bind to

00:51:47,280 --> 00:51:51,600
all in our places you know it's only an

00:51:49,320 --> 00:51:54,060
accessible behind VPN my ego would only

00:51:51,600 --> 00:51:55,500
find soil host and then you might want

00:51:54,060 --> 00:51:58,350
to change the hawk bottom at the id-5

00:51:55,500 --> 00:52:00,450
and these are only matter if you're

00:51:58,350 --> 00:52:02,250
using the century command none of these

00:52:00,450 --> 00:52:06,690
take place if you're just in many

00:52:02,250 --> 00:52:09,920
impinging up so we've got enough time so

00:52:06,690 --> 00:52:09,920
I'm going to show that real quick

00:52:17,680 --> 00:52:29,630
alright this how to make that work sorry

00:52:25,610 --> 00:52:31,270
I never full screen all right um so this

00:52:29,630 --> 00:52:33,710
is what the center this is actually a

00:52:31,270 --> 00:52:37,160
example projects to hopefully reach them

00:52:33,710 --> 00:52:39,080
out so what you'll see here is like a

00:52:37,160 --> 00:52:40,460
list of the messages and these other

00:52:39,080 --> 00:52:43,430
narrative account you have a bit of

00:52:40,460 --> 00:52:45,980
information so like this is the Volvo

00:52:43,430 --> 00:52:48,290
this is the logger and it's just where

00:52:45,980 --> 00:52:50,390
it thinks it happened and the version of

00:52:48,290 --> 00:52:53,890
that application so current version of

00:52:50,390 --> 00:52:56,390
century 186 long this is Jael 13 and

00:52:53,890 --> 00:52:58,340
then the best part is like young all

00:52:56,390 --> 00:53:00,530
this cool stuff like search and being

00:52:58,340 --> 00:53:02,630
able to filter things over here if you

00:53:00,530 --> 00:53:04,790
click something you all this awesome

00:53:02,630 --> 00:53:09,740
information and this is inspired by the

00:53:04,790 --> 00:53:11,540
Django debug information to get kind of

00:53:09,740 --> 00:53:13,070
the surrounding code which may or may

00:53:11,540 --> 00:53:15,020
not be useful let's do the local

00:53:13,070 --> 00:53:17,570
variables or representation rather of

00:53:15,020 --> 00:53:19,580
the local variables which is very very

00:53:17,570 --> 00:53:22,010
useful I cannot debug anything without

00:53:19,580 --> 00:53:23,510
this anymore and the fact that I can go

00:53:22,010 --> 00:53:25,040
in and you a blog that has this

00:53:23,510 --> 00:53:26,720
information but let's make debug

00:53:25,040 --> 00:53:29,990
something without reproducing it is

00:53:26,720 --> 00:53:33,290
amazing it's very very valuable um it's

00:53:29,990 --> 00:53:34,850
also a frequency chart which this is

00:53:33,290 --> 00:53:38,390
just a test data so there's no frequency

00:53:34,850 --> 00:53:40,070
l and it also pulls some meta data from

00:53:38,390 --> 00:53:43,250
Django which is like to get the meta

00:53:40,070 --> 00:53:44,450
post and all this you can actually plug

00:53:43,250 --> 00:53:46,850
in your own data which is really nice

00:53:44,450 --> 00:53:48,230
apples in montville virgins mrs. bass on

00:53:46,850 --> 00:53:50,660
an assault map so that definitely works

00:53:48,230 --> 00:53:52,190
a genuine question about that can use

00:53:50,660 --> 00:53:57,620
that without project other than carry

00:53:52,190 --> 00:54:00,530
GoPro tips you can um so okay let me get

00:53:57,620 --> 00:54:02,390
to that in a second rope all of this is

00:54:00,530 --> 00:54:04,300
completely abstract the implementation

00:54:02,390 --> 00:54:07,270
in Django dash century which is

00:54:04,300 --> 00:54:09,160
essentially one that oh I'm starting

00:54:07,270 --> 00:54:10,840
tied to chego in a second the entire

00:54:09,160 --> 00:54:13,060
suburbs Django it has to be genuine

00:54:10,840 --> 00:54:16,150
hondata the client doesn't have to be

00:54:13,060 --> 00:54:17,980
tengo at all them isn't a built in

00:54:16,150 --> 00:54:19,300
client that works without Django how'd

00:54:17,980 --> 00:54:21,850
it be very easy to write all your

00:54:19,300 --> 00:54:22,960
talking to is a restful HTTP service and

00:54:21,850 --> 00:54:25,630
so you just have to send the data to

00:54:22,960 --> 00:54:27,340
that that eight guys changing a little

00:54:25,630 --> 00:54:29,350
bit in tdot oh and she got out required

00:54:27,340 --> 00:54:31,720
to know you and Django it's all class

00:54:29,350 --> 00:54:32,950
durden it's already stirring very very

00:54:31,720 --> 00:54:36,790
fast much faster than this is much more

00:54:32,950 --> 00:54:38,680
flexible so given that you have most of

00:54:36,790 --> 00:54:40,810
some useful information like the URLs

00:54:38,680 --> 00:54:42,100
and fencing on site is just like an

00:54:40,810 --> 00:54:44,800
arbitrary name for a project that you

00:54:42,100 --> 00:54:46,930
can specify some useful metadata like

00:54:44,800 --> 00:54:49,420
this servers and it makes it relation to

00:54:46,930 --> 00:54:52,590
drill down and everything else has this

00:54:49,420 --> 00:54:54,820
really semi useful way to say i fix this

00:54:52,590 --> 00:54:56,080
domain one which is probably going to

00:54:54,820 --> 00:54:57,850
weigh in century too because you

00:54:56,080 --> 00:54:58,990
shouldn't have to say it's been fixed if

00:54:57,850 --> 00:55:00,850
it's not showing up anymore it's

00:54:58,990 --> 00:55:02,440
probably fixed or doesn't matter so

00:55:00,850 --> 00:55:04,270
ideally we're going to move this the

00:55:02,440 --> 00:55:05,440
words it only shows you what matters and

00:55:04,270 --> 00:55:07,510
it's going to decide if something

00:55:05,440 --> 00:55:09,940
doesn't matter anymore and we're not

00:55:07,510 --> 00:55:18,220
going to do like full history because it

00:55:09,940 --> 00:55:19,450
generates a report okay this actually if

00:55:18,220 --> 00:55:23,860
the demo didn't work this is our

00:55:19,450 --> 00:55:26,980
production 64,000 areas of reach luckily

00:55:23,860 --> 00:55:31,000
desert like San failures at second and

00:55:26,980 --> 00:55:34,900
solar family miserably over and over ok

00:55:31,000 --> 00:55:36,700
so to wrap up kind of about an hour to

00:55:34,900 --> 00:55:38,110
wrap up what we're talking about with

00:55:36,700 --> 00:55:41,470
them how you can do to point our

00:55:38,110 --> 00:55:43,030
continuous deployment that you're up

00:55:41,470 --> 00:55:44,830
it's very very important that you have

00:55:43,030 --> 00:55:46,990
this package because otherwise when it

00:55:44,830 --> 00:55:50,230
doesn't work on us ki tournament

00:55:46,990 --> 00:55:52,180
continuously point most important

00:55:50,230 --> 00:55:53,830
festival backs if you can't go back fast

00:55:52,180 --> 00:55:56,950
that you're not gonna want to deploy

00:55:53,830 --> 00:55:58,120
frequently automated tests also you're

00:55:56,950 --> 00:56:00,610
not gonna want to employ frequently if

00:55:58,120 --> 00:56:02,380
you don't have automated tests and so

00:56:00,610 --> 00:56:04,930
get some basic metrics these are the

00:56:02,380 --> 00:56:06,550
bare basics to implement something of a

00:56:04,930 --> 00:56:07,800
better release cycle you don't have to

00:56:06,550 --> 00:56:10,160
pull out Matthew off

00:56:07,800 --> 00:56:12,750
every day there are a lot of people that

00:56:10,160 --> 00:56:14,430
do some of this like more edge case

00:56:12,750 --> 00:56:17,970
continued as a plan but this is better

00:56:14,430 --> 00:56:19,860
basics deployed when you want you a

00:56:17,970 --> 00:56:21,540
little bit further we don't of all this

00:56:19,860 --> 00:56:23,790
some people do it's kind of cool with

00:56:21,540 --> 00:56:25,200
this good food for thought bill going to

00:56:23,790 --> 00:56:27,660
mean system and what this means is a

00:56:25,200 --> 00:56:30,360
system that automatically knows when

00:56:27,660 --> 00:56:33,390
things are not working correctly for

00:56:30,360 --> 00:56:34,800
example in view IMVU is accompanying

00:56:33,390 --> 00:56:36,060
this kind of pioneered a lot of this and

00:56:34,800 --> 00:56:38,730
they actually have an automated system

00:56:36,060 --> 00:56:40,320
that if some of their metrics drop below

00:56:38,730 --> 00:56:43,770
a certain threshold it does an automatic

00:56:40,320 --> 00:56:45,000
roll back a little bit scary I haven't

00:56:43,770 --> 00:56:48,840
convince anyone of the company to do

00:56:45,000 --> 00:56:50,760
that yet but it's an interesting idea um

00:56:48,840 --> 00:56:53,010
also automated employees we don't do

00:56:50,760 --> 00:56:54,390
that either another company called

00:56:53,010 --> 00:56:56,430
wealthfront which is actually that turns

00:56:54,390 --> 00:56:59,520
out of the financial space so if they

00:56:56,430 --> 00:57:01,440
can do this anybody can if you specify a

00:56:59,520 --> 00:57:03,630
hashtag in your commit message that you

00:57:01,440 --> 00:57:04,910
like release and then the

00:57:03,630 --> 00:57:07,140
service-oriented so they have different

00:57:04,910 --> 00:57:08,940
services you release and unlike the

00:57:07,140 --> 00:57:10,530
service name and as soon as the test

00:57:08,940 --> 00:57:11,970
pass and the build is green it will

00:57:10,530 --> 00:57:15,570
automatically employees those surfer to

00:57:11,970 --> 00:57:19,980
that service so now we just literally

00:57:15,570 --> 00:57:22,230
have a selenium linux Firefox swimming

00:57:19,980 --> 00:57:23,940
so we're running on the Hudsons every

00:57:22,230 --> 00:57:25,590
day it's pretty much this works there's

00:57:23,940 --> 00:57:29,930
a result in there so some issues but

00:57:25,590 --> 00:57:29,930
yeah we fix it by easy mess of it

00:57:36,630 --> 00:57:42,450
which is the size of the project in the

00:57:40,740 --> 00:57:46,220
maximum size of a product where you

00:57:42,450 --> 00:57:50,100
suggest doing this sort of continuous

00:57:46,220 --> 00:57:54,780
this continuous upgrading and if it's

00:57:50,100 --> 00:57:58,380
possible to work also in critical and

00:57:54,780 --> 00:58:03,030
bjurman I'm a crane Co being the telco

00:57:58,380 --> 00:58:07,140
or another these the financial really

00:58:03,030 --> 00:58:09,300
into the pyramid ok so answer the second

00:58:07,140 --> 00:58:11,700
question first it is possible it's much

00:58:09,300 --> 00:58:14,670
harder people have to be very very

00:58:11,700 --> 00:58:15,930
driven to right very good test and you

00:58:14,670 --> 00:58:19,170
have got all the infrastructure to make

00:58:15,930 --> 00:58:21,090
sure it's completely safe um so well

00:58:19,170 --> 00:58:22,950
front they prove that they are very

00:58:21,090 --> 00:58:24,870
tetramine developments they're very

00:58:22,950 --> 00:58:27,360
hardcore I guess you could say and it

00:58:24,870 --> 00:58:28,800
works for them but I'm not saying it

00:58:27,360 --> 00:58:31,080
would work easily for anyone it's

00:58:28,800 --> 00:58:33,720
probably a very big challenge also

00:58:31,080 --> 00:58:36,330
because you have to you eventually have

00:58:33,720 --> 00:58:39,480
to cheat to upgrade one machine at the

00:58:36,330 --> 00:58:41,940
time if there is a pool of them you can

00:58:39,480 --> 00:58:46,620
have transaction running yeah and you

00:58:41,940 --> 00:58:49,200
have to sweet sure if when that buy-in

00:58:46,620 --> 00:58:51,180
is is over so that's where the service

00:58:49,200 --> 00:58:54,120
are for instance it's tough but with

00:58:51,180 --> 00:58:58,110
Oracle fix quarter an hour 20 minutes to

00:58:54,120 --> 00:58:59,490
go down yeah such a well front so what

00:58:58,110 --> 00:59:00,480
bernanke they talk about this stuff a

00:58:59,490 --> 00:59:01,920
lot and they get a lot of great

00:59:00,480 --> 00:59:03,000
information sit here you want to know

00:59:01,920 --> 00:59:05,160
more I suggest looking at their

00:59:03,000 --> 00:59:06,810
presentations but one thing to do they

00:59:05,160 --> 00:59:08,850
have super-high available get a heavenly

00:59:06,810 --> 00:59:10,140
four times as many services they need

00:59:08,850 --> 00:59:11,430
and I need that because they need super

00:59:10,140 --> 00:59:12,750
high availability so when they deploy

00:59:11,430 --> 00:59:14,790
they actually deploy very quickly and

00:59:12,750 --> 00:59:18,270
they employ exponentially so type of one

00:59:14,790 --> 00:59:20,040
then two then for the day and we're

00:59:18,270 --> 00:59:21,510
spending well for them I don't know

00:59:20,040 --> 00:59:23,040
exactly how they make everything work

00:59:21,510 --> 00:59:24,180
with it like the service architecture so

00:59:23,040 --> 00:59:26,010
that they don't have issues of ieee

00:59:24,180 --> 00:59:27,570
transactions it could be like they have

00:59:26,010 --> 00:59:30,420
stinky sessions that stick on the point

00:59:27,570 --> 00:59:31,320
this system honest service I'm sure

00:59:30,420 --> 00:59:35,220
there's Weiss I'm not familiar

00:59:31,320 --> 00:59:39,540
personally at that all right the second

00:59:35,220 --> 00:59:41,460
question was size of like yeah how big

00:59:39,540 --> 00:59:42,930
can you be in saw this work so I think

00:59:41,460 --> 00:59:43,840
there's two measurements there what is

00:59:42,930 --> 00:59:45,940
the size of your code

00:59:43,840 --> 00:59:49,390
I feel it's pretty important the size of

00:59:45,940 --> 00:59:52,020
your services has outside of Jango

00:59:49,390 --> 00:59:56,500
40-plus thousand lines of code we have

00:59:52,020 --> 00:59:59,860
two thousand test cases it's also why

00:59:56,500 --> 01:00:01,300
Tessa me takes about you minutes so it

00:59:59,860 --> 01:00:05,410
does terms of code i think there's no

01:00:01,300 --> 01:00:06,850
limit team size IMVU has 50 engineers

01:00:05,410 --> 01:00:08,710
and they make this work they also have

01:00:06,850 --> 01:00:11,200
four people dedicated to making this

01:00:08,710 --> 01:00:13,810
work to making a support system work the

01:00:11,200 --> 01:00:14,950
continuous integration work I don't

01:00:13,810 --> 01:00:16,810
think there's a limit I think it gets

01:00:14,950 --> 01:00:18,880
harder the problems change as you grow

01:00:16,810 --> 01:00:20,700
we've seen it as we've grown from 10

01:00:18,880 --> 01:00:23,710
people to 20 people the challenges have

01:00:20,700 --> 01:00:25,780
become a little bit more clear and a

01:00:23,710 --> 01:00:27,190
little bit different because more people

01:00:25,780 --> 01:00:31,060
committing sup more people breaking

01:00:27,190 --> 01:00:33,010
stuff less accurate reporting so I think

01:00:31,060 --> 01:00:35,490
it's possible it just gets me harder and

01:00:33,010 --> 01:00:38,020
harder as you scale up to more people

01:00:35,490 --> 01:00:39,070
well so the program is having more

01:00:38,020 --> 01:00:40,930
people in the south in the

01:00:39,070 --> 01:00:44,440
infrastructure thought but rather than

01:00:40,930 --> 01:00:46,560
the number of machine yeah okay yeah

01:00:44,440 --> 01:00:46,560
okay

01:00:52,330 --> 01:00:55,960
that's actually pretty to smoke on the

01:00:54,370 --> 01:00:57,910
topic you should read that I have done

01:00:55,960 --> 01:01:01,200
it the title in might have but you can

01:00:57,910 --> 01:01:04,150
move it it's the only one my question is

01:01:01,200 --> 01:01:05,950
if you use nadia so time serious and it

01:01:04,150 --> 01:01:08,140
sends you are many emails and something

01:01:05,950 --> 01:01:11,530
changes does it have algorithms to

01:01:08,140 --> 01:01:13,120
detect peaks that happen every day for

01:01:11,530 --> 01:01:15,790
example if you have a local provider

01:01:13,120 --> 01:01:17,410
that that that's food ordering it would

01:01:15,790 --> 01:01:19,300
have peace in the dune and this would be

01:01:17,410 --> 01:01:22,270
normal that it drops in the afternoon i

01:01:19,300 --> 01:01:25,720
think it does i think the way you can do

01:01:22,270 --> 01:01:26,830
it is based on normalized they didn't

01:01:25,720 --> 01:01:27,970
like the change i don't know

01:01:26,830 --> 01:01:30,400
specifically because i haven't actually

01:01:27,970 --> 01:01:33,010
set up that service before if he doesn't

01:01:30,400 --> 01:01:34,540
you could change i guess how your

01:01:33,010 --> 01:01:36,310
reporting works into it so that it's

01:01:34,540 --> 01:01:38,650
normalizing the data to some relative

01:01:36,310 --> 01:01:41,290
numbers but i imagine it does it's very

01:01:38,650 --> 01:01:43,710
good at it's a very common tool for the

01:01:41,290 --> 01:01:43,710
job so

01:01:49,950 --> 01:01:56,010
okay assuming you're doing the hard cold

01:01:53,550 --> 01:01:58,589
way deploy each company how would you

01:01:56,010 --> 01:02:03,210
and the loop translations how do you

01:01:58,589 --> 01:02:06,300
handle translations um so we actually

01:02:03,210 --> 01:02:10,650
had handle translations are you asking

01:02:06,300 --> 01:02:12,119
like because they're required or like

01:02:10,650 --> 01:02:13,589
what your transactions is actually in a

01:02:12,119 --> 01:02:14,820
data store and I just read from the

01:02:13,589 --> 01:02:16,650
database and things are automatically

01:02:14,820 --> 01:02:20,490
ensure that if there's new strings to

01:02:16,650 --> 01:02:22,140
translate and things like that like I'm

01:02:20,490 --> 01:02:24,030
not aware of any issues that we've run

01:02:22,140 --> 01:02:25,680
into in that case but we also don't

01:02:24,030 --> 01:02:27,420
require everything to be translated or

01:02:25,680 --> 01:02:29,730
anything like that okay mother if it's

01:02:27,420 --> 01:02:33,000
required the new just can't do it this

01:02:29,730 --> 01:02:34,140
go wit or oh yeah i should guess so

01:02:33,000 --> 01:02:36,119
there's definitely like and we've

01:02:34,140 --> 01:02:37,560
actually talked about this then we have

01:02:36,119 --> 01:02:39,530
different services and one is hard

01:02:37,560 --> 01:02:42,180
vettel widget which if that breaks

01:02:39,530 --> 01:02:44,190
everything you know everybody's mad at

01:02:42,180 --> 01:02:46,380
us basically so we actually talked about

01:02:44,190 --> 01:02:47,880
slowing down the opponent practices on

01:02:46,380 --> 01:02:49,320
things like that making it more strict

01:02:47,880 --> 01:02:51,119
but then other things if it's like our

01:02:49,320 --> 01:02:52,800
restful Web API we can employ all the

01:02:51,119 --> 01:02:54,119
time it really doesn't matter so that

01:02:52,800 --> 01:02:56,240
might be one way that you can adopt it

01:02:54,119 --> 01:02:58,440
partially if you have different services

01:02:56,240 --> 01:02:59,430
some things may have to wait longer and

01:02:58,440 --> 01:03:01,470
maybe they have to go through code

01:02:59,430 --> 01:03:03,060
review maybe they need more tests or the

01:03:01,470 --> 01:03:04,170
tests take longer than other things you

01:03:03,060 --> 01:03:06,210
can just do as much as you want because

01:03:04,170 --> 01:03:09,710
they're less critical or they're more

01:03:06,210 --> 01:03:09,710
stable or easier to test

01:03:15,990 --> 01:03:20,369
I'd actually have a question about your

01:03:18,119 --> 01:03:25,890
I can do without my economic you know

01:03:20,369 --> 01:03:27,420
it's for the year I'd actually have a

01:03:25,890 --> 01:03:29,670
question about your development

01:03:27,420 --> 01:03:32,040
environment you guys use the same tools

01:03:29,670 --> 01:03:34,440
as I've set up your develop development

01:03:32,040 --> 01:03:36,920
environment because it seems kind of

01:03:34,440 --> 01:03:39,780
obvious that building up test will be

01:03:36,920 --> 01:03:41,520
kind of like building up people develop

01:03:39,780 --> 01:03:44,220
environment you have some other do feel

01:03:41,520 --> 01:03:47,310
that um so we don't use the same thing

01:03:44,220 --> 01:03:48,480
everywhere yet we haven't had a lot of

01:03:47,310 --> 01:03:50,700
time to build out this infrastructure

01:03:48,480 --> 01:03:53,820
ideally the way we're going in the

01:03:50,700 --> 01:03:55,350
direction we're going we use some East

01:03:53,820 --> 01:03:57,060
pumping in Japanese puppet I think

01:03:55,350 --> 01:03:59,070
mostly heard a voice right now we have

01:03:57,060 --> 01:04:01,280
Steffan vigor I'm not sure which one

01:03:59,070 --> 01:04:04,200
we're going to side with but eventually

01:04:01,280 --> 01:04:06,119
they will be the same it'll be the same

01:04:04,200 --> 01:04:07,740
tool the same base configurations that

01:04:06,119 --> 01:04:09,510
are push to production that are pushing

01:04:07,740 --> 01:04:11,340
a vagrant and then bigger when we use on

01:04:09,510 --> 01:04:13,680
testing as well as local so we'll get

01:04:11,340 --> 01:04:15,060
the same people deployed all situations

01:04:13,680 --> 01:04:18,300
which kind of guarantees the same

01:04:15,060 --> 01:04:22,350
versions the same stability and whatnot

01:04:18,300 --> 01:04:24,770
so we don't yet we should i definitely

01:04:22,350 --> 01:04:24,770
recommend it

01:04:36,390 --> 01:04:43,119
so is there a reason why you're keeping

01:04:39,430 --> 01:04:44,710
the virtual environment on your between

01:04:43,119 --> 01:04:47,260
different builds on the continuous

01:04:44,710 --> 01:04:49,180
integration sir just when I get faster

01:04:47,260 --> 01:04:51,280
okay because if you remove something

01:04:49,180 --> 01:04:53,440
from your violence by but the code is

01:04:51,280 --> 01:04:55,240
actually still using it you don't get

01:04:53,440 --> 01:04:58,030
the perfect yeah I don't think we're

01:04:55,240 --> 01:05:00,880
concerned about I mean yeah there would

01:04:58,030 --> 01:05:02,500
be issues at the bill failed so that the

01:05:00,880 --> 01:05:04,090
CI server actually be built a virtual

01:05:02,500 --> 01:05:05,920
entirely time which gives us that

01:05:04,090 --> 01:05:07,900
isolated repeatable bill so if there was

01:05:05,920 --> 01:05:10,690
a dependency that was required that was

01:05:07,900 --> 01:05:12,940
removed from the requirements hope is

01:05:10,690 --> 01:05:15,070
still important so at my great gains see

01:05:12,940 --> 01:05:16,510
I superb catch up production however we

01:05:15,070 --> 01:05:17,950
don't care if there's extra dependencies

01:05:16,510 --> 01:05:20,080
there we mostly don't care because it's

01:05:17,950 --> 01:05:22,180
too slow to rebuild that thing entirely

01:05:20,080 --> 01:05:23,470
which is why I talked about me discussed

01:05:22,180 --> 01:05:25,300
this and we might actually just copy the

01:05:23,470 --> 01:05:28,480
environment between release and then run

01:05:25,300 --> 01:05:31,150
the pip install base on like the replica

01:05:28,480 --> 01:05:32,440
so it's all an isolated environment it

01:05:31,150 --> 01:05:34,780
doesn't clean up itself which that

01:05:32,440 --> 01:05:36,250
problem still exists and this is space

01:05:34,780 --> 01:05:39,280
would be massive and compared to what it

01:05:36,250 --> 01:05:41,800
is now but at least then you have if you

01:05:39,280 --> 01:05:45,520
revert you have the precise stable

01:05:41,800 --> 01:05:46,750
requirements in every single release but

01:05:45,520 --> 01:05:48,940
yeah it's mostly we're not concerned

01:05:46,750 --> 01:05:50,470
about dependencies that are extra on the

01:05:48,940 --> 01:05:51,790
server which is it concerned about one

01:05:50,470 --> 01:05:54,150
that wouldn't exist or are the rock

01:05:51,790 --> 01:05:54,150
versions

01:06:01,220 --> 01:06:10,550
and I want to ask you in your company

01:06:04,750 --> 01:06:13,070
who actually writes best I mean a love

01:06:10,550 --> 01:06:17,359
just the unit test for all kind of tests

01:06:13,070 --> 01:06:21,440
and especially what just if you just

01:06:17,359 --> 01:06:24,650
develop a test so that first answer is

01:06:21,440 --> 01:06:26,060
everyone it's best if you are changing

01:06:24,650 --> 01:06:31,250
the code it's your responsibility to

01:06:26,060 --> 01:06:33,770
ensure test exists the test cover what

01:06:31,250 --> 01:06:35,180
you're changing or that you're adding

01:06:33,770 --> 01:06:38,599
the test to cover what you're changing

01:06:35,180 --> 01:06:40,190
secondly no nobody trusts anybody to

01:06:38,599 --> 01:06:42,260
write out your test we're working on

01:06:40,190 --> 01:06:43,400
that we want more tools that are

01:06:42,260 --> 01:06:47,090
automated we don't like doing anything

01:06:43,400 --> 01:06:48,619
manual so like the Twitter example we

01:06:47,090 --> 01:06:49,970
actually have a force of work out as I

01:06:48,619 --> 01:06:51,380
monitor this up and let us know that

01:06:49,970 --> 01:06:53,390
sucks that you have to rely on them to

01:06:51,380 --> 01:06:56,060
tell you when things happen the same

01:06:53,390 --> 01:06:58,190
payment tests like it sucks that you're

01:06:56,060 --> 01:06:59,869
relying on you to actually write the

01:06:58,190 --> 01:07:03,340
test to know that it test existing

01:06:59,869 --> 01:07:05,780
around and also that somebody else who's

01:07:03,340 --> 01:07:07,520
is relying on the fact that you wrote

01:07:05,780 --> 01:07:09,500
test would have to review your code to

01:07:07,520 --> 01:07:10,760
make sure Tesla written so like we want

01:07:09,500 --> 01:07:12,220
to do automated tools like the coverage

01:07:10,760 --> 01:07:13,760
driving are some cool ideas

01:07:12,220 --> 01:07:16,670
unfortunately we don't have them yet

01:07:13,760 --> 01:07:20,150
implemented but yeah the trust is a big

01:07:16,670 --> 01:07:21,650
deal out like and we're very the way we

01:07:20,150 --> 01:07:24,170
work as a company in the way we hire

01:07:21,650 --> 01:07:26,570
we're very keen on getting the right

01:07:24,170 --> 01:07:29,300
people that fit the culture that we want

01:07:26,570 --> 01:07:31,160
for this kind of philosophy for

01:07:29,300 --> 01:07:33,500
everything you want to do it to do well

01:07:31,160 --> 01:07:35,780
so it's very much just about the right

01:07:33,500 --> 01:07:37,339
people in being anklet maybe somewhat

01:07:35,780 --> 01:07:39,290
trust those people but there's still

01:07:37,339 --> 01:07:41,180
like I don't even touch myself sometimes

01:07:39,290 --> 01:07:42,500
when I come in code it like as this

01:07:41,180 --> 01:07:44,630
tested as it tested correctly I don't

01:07:42,500 --> 01:07:46,160
want to review the existing test and

01:07:44,630 --> 01:07:49,240
that's just a lot of legacy code in any

01:07:46,160 --> 01:07:49,240
project is much much easier

01:08:02,619 --> 01:08:07,359
if you considered using the binary cash

01:08:05,289 --> 01:08:09,069
over all your department pipeline so you

01:08:07,359 --> 01:08:11,559
don't have to rebuild stuff that has

01:08:09,069 --> 01:08:12,730
been built some people so that was

01:08:11,559 --> 01:08:14,049
something we also talked about was

01:08:12,730 --> 01:08:15,700
building them on a single server and

01:08:14,049 --> 01:08:18,310
then like touring it up or something

01:08:15,700 --> 01:08:19,690
fair enough a virtual and everything we

01:08:18,310 --> 01:08:21,279
could do it because we do have all the

01:08:19,690 --> 01:08:23,710
same systems everywhere which is very

01:08:21,279 --> 01:08:25,839
easy you talk to do by naresh noodles

01:08:23,710 --> 01:08:29,049
with Python which would make it a little

01:08:25,839 --> 01:08:30,460
bit easier um I guess we just haven't

01:08:29,049 --> 01:08:32,909
done it because it has a minute big pain

01:08:30,460 --> 01:08:32,909
point yet

01:08:43,770 --> 01:08:49,650
do you prevent code reviews through and

01:08:46,710 --> 01:08:52,170
show corn before you rely on automated

01:08:49,650 --> 01:08:54,630
tests an exclusive I'm not exclusively

01:08:52,170 --> 01:08:58,049
automated test we rely on automated

01:08:54,630 --> 01:08:59,970
tests no matter what but we also do code

01:08:58,049 --> 01:09:02,040
reviews so eventually our posting by

01:08:59,970 --> 01:09:04,230
getting up now we actually decided to

01:09:02,040 --> 01:09:08,279
switch our entire code base to github

01:09:04,230 --> 01:09:09,510
pride of course but um something

01:09:08,279 --> 01:09:11,700
interesting is the poor request system

01:09:09,510 --> 01:09:13,410
which make for awesome code reviews so

01:09:11,700 --> 01:09:15,990
whenever there is a major change set

01:09:13,410 --> 01:09:18,359
it's generally to branch now and

01:09:15,990 --> 01:09:19,589
certainly in a branch just because it

01:09:18,359 --> 01:09:21,089
makes it easier to do things like that

01:09:19,589 --> 01:09:22,620
and like yeah we can put it behind

01:09:21,089 --> 01:09:24,150
switches and we still feel and then

01:09:22,620 --> 01:09:26,250
we're doing like partial versions of it

01:09:24,150 --> 01:09:28,140
but we still get with a lot of initial

01:09:26,250 --> 01:09:29,940
development of major changes in branches

01:09:28,140 --> 01:09:31,470
and I'll go in as a report request and

01:09:29,940 --> 01:09:32,730
somebody will just like one or two

01:09:31,470 --> 01:09:34,290
people will just look over them as soon

01:09:32,730 --> 01:09:36,120
as they have time it works pretty well I

01:09:34,290 --> 01:09:43,010
actually really really enjoy using that

01:09:36,120 --> 01:09:43,010
pull requests and recoveries candisky

01:09:45,290 --> 01:09:51,270
releasing to continuously do you use it

01:09:48,510 --> 01:09:54,690
major and minor versioning when you use

01:09:51,270 --> 01:09:58,290
the build number to identify running

01:09:54,690 --> 01:10:00,090
application this moment so for the main

01:09:58,290 --> 01:10:02,370
code base we use a revision number we

01:10:00,090 --> 01:10:05,130
don't do any manual version we do manual

01:10:02,370 --> 01:10:07,770
burgeoning on certain things on the CDN

01:10:05,130 --> 01:10:09,060
that part of the code base other things

01:10:07,770 --> 01:10:11,970
have automatic version you based on like

01:10:09,060 --> 01:10:15,600
a current timestamp of the release I

01:10:11,970 --> 01:10:17,370
believe um so like a mix of both but in

01:10:15,600 --> 01:10:18,960
general we don't actually version our

01:10:17,370 --> 01:10:20,310
packages or any there are releases or

01:10:18,960 --> 01:10:22,530
anything like that it's just literally

01:10:20,310 --> 01:10:24,920
begin shop and that's the virtual number

01:10:22,530 --> 01:10:24,920
on the server

01:10:34,360 --> 01:10:43,179
I'm mystified about why you like Jenkins

01:10:40,119 --> 01:10:45,310
more than real boat um okay sweeties

01:10:43,179 --> 01:10:47,139
jenkins first and very very easy stuff i

01:10:45,310 --> 01:10:50,650
tried to use bill got to do the

01:10:47,139 --> 01:10:53,020
distributed testing and it was very

01:10:50,650 --> 01:10:54,010
difficult this is an extreme case most

01:10:53,020 --> 01:10:56,710
people gonna do this was difficult to

01:10:54,010 --> 01:10:59,440
try and make at work it was more

01:10:56,710 --> 01:11:01,330
difficult to try and understand the

01:10:59,440 --> 01:11:03,250
complexities of bilbo how they work how

01:11:01,330 --> 01:11:06,159
you actually need to define things as

01:11:03,250 --> 01:11:08,440
well as like the reporting interface is

01:11:06,159 --> 01:11:11,380
nowhere near as you are as as useful as

01:11:08,440 --> 01:11:13,090
Jenkins's so i use bill Bob we still

01:11:11,380 --> 01:11:16,409
have to have something on top so we have

01:11:13,090 --> 01:11:19,330
to have a better recording interface or

01:11:16,409 --> 01:11:20,800
something the nice thing however is that

01:11:19,330 --> 01:11:22,570
you can plug in your own recording hooks

01:11:20,800 --> 01:11:24,489
and that was like a big sell for us was

01:11:22,570 --> 01:11:26,260
like oh if we want this awesome coverage

01:11:24,489 --> 01:11:27,730
integration for example we can plug it

01:11:26,260 --> 01:11:29,860
in it'll it'll run after the test

01:11:27,730 --> 01:11:31,659
command runs and I'll do all this logic

01:11:29,860 --> 01:11:34,119
and it'll just be magical an old email

01:11:31,659 --> 01:11:36,760
I'm certainly you can't do this up in

01:11:34,119 --> 01:11:38,230
Jenkins I get into a fight on you have

01:11:36,760 --> 01:11:39,369
to probably right like bash scripts and

01:11:38,230 --> 01:11:41,469
they help execute is part of the build

01:11:39,369 --> 01:11:43,179
process in and be completely not

01:11:41,469 --> 01:11:45,040
integrated with Jenkins and that's

01:11:43,179 --> 01:11:46,570
that's the trade off I guess but for us

01:11:45,040 --> 01:11:49,030
like Jenkins the reporting interface

01:11:46,570 --> 01:11:51,540
we're just much better and that was why

01:11:49,030 --> 01:11:51,540
he chose it

01:11:59,900 --> 01:12:03,430

YouTube URL: https://www.youtube.com/watch?v=smUceHEg1P0


