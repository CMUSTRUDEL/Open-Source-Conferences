Title: Objects and classes in Python (and JavaScript)
Publication date: 2015-04-19
Playlist: EuroPython 2011
Description: 
	[EuroPython 2011] Jonathan Fine - 23 June 2011 in "Training Pizza Napoli
"
Captions: 
	00:00:07,200 --> 00:00:12,400
okay I are a little bit of background

00:00:09,639 --> 00:00:16,420
which is that I was doing some things

00:00:12,400 --> 00:00:18,640
with classes so forth a little bit out

00:00:16,420 --> 00:00:21,430
of the ordinary and I found that I

00:00:18,640 --> 00:00:23,260
couldn't do what I wanted to do I knew

00:00:21,430 --> 00:00:24,910
it could be done I didn't know how to do

00:00:23,260 --> 00:00:27,670
it and I found it rather hard to learn

00:00:24,910 --> 00:00:29,800
it when I figure out how it was done I

00:00:27,670 --> 00:00:35,980
thought well perhaps some other people

00:00:29,800 --> 00:00:38,379
got similar problems though one of the

00:00:35,980 --> 00:00:43,629
things was how to subclass the built-in

00:00:38,379 --> 00:00:48,179
types now the course is based upon this

00:00:43,629 --> 00:00:50,949
training material which is developed

00:00:48,179 --> 00:00:55,300
open source there's no library I haven't

00:00:50,949 --> 00:00:56,859
told you what well okay so let's let's

00:00:55,300 --> 00:00:59,140
tell you where to get this training

00:00:56,859 --> 00:01:01,989
material from tomorrow it will be

00:00:59,140 --> 00:01:03,579
available on memory sticks so everything

00:01:01,989 --> 00:01:05,110
i'm showing you now will be available on

00:01:03,579 --> 00:01:07,780
memory stick you can put it on your

00:01:05,110 --> 00:01:10,210
machine and go through it during the

00:01:07,780 --> 00:01:11,979
tutorial as i go through it and I'm

00:01:10,210 --> 00:01:14,619
think that's going to be pretty useful

00:01:11,979 --> 00:01:17,229
because last time I gave a tutorial the

00:01:14,619 --> 00:01:18,549
display wasn't that brilliant but you

00:01:17,229 --> 00:01:19,810
can actually see all the stuff you'll

00:01:18,549 --> 00:01:24,159
actually see all this stuff on your own

00:01:19,810 --> 00:01:26,020
screen here you'll notice that I made

00:01:24,159 --> 00:01:28,210
some changes six hours ago to the

00:01:26,020 --> 00:01:31,719
training material so it's all up today

00:01:28,210 --> 00:01:36,180
and you'll also notice there are no

00:01:31,719 --> 00:01:38,469
downloads but we hope to fix that food

00:01:36,180 --> 00:01:41,560
though the training material will be

00:01:38,469 --> 00:01:43,119
available for download for example if

00:01:41,560 --> 00:01:46,060
you're here just to learn about it but

00:01:43,119 --> 00:01:47,229
you'd rather go to reaming hedges boreal

00:01:46,060 --> 00:01:49,359
tomorrow but you want to pick this up

00:01:47,229 --> 00:01:52,990
later for example or if you're on a

00:01:49,359 --> 00:01:57,909
light ticket so and what I did was I

00:01:52,990 --> 00:02:00,100
added some examples exercises because

00:01:57,909 --> 00:02:01,240
the last training session I did ran out

00:02:00,100 --> 00:02:03,520
of steam because I didn't have the

00:02:01,240 --> 00:02:09,190
examples so i think we'll start with

00:02:03,520 --> 00:02:14,370
those sorry i'm not doing the right

00:02:09,190 --> 00:02:14,370
thing here that's better so

00:02:15,090 --> 00:02:20,680
there's a lot of stuff here we'll start

00:02:18,909 --> 00:02:22,750
with the exercises and i'll just briefly

00:02:20,680 --> 00:02:26,799
go join this a bit bigger i think we can

00:02:22,750 --> 00:02:31,720
afford to make it a bit bigger yeah is

00:02:26,799 --> 00:02:34,450
that good at the back so these are the

00:02:31,720 --> 00:02:36,220
problems I going to teach you how to

00:02:34,450 --> 00:02:42,099
solve and I'm not going to teach you how

00:02:36,220 --> 00:02:43,599
to solve them using recipes then a teach

00:02:42,099 --> 00:02:45,340
you how to solve them by showing you the

00:02:43,599 --> 00:02:49,269
concepts and then I'll give you the

00:02:45,340 --> 00:02:54,069
recipe if I have to so we want to read

00:02:49,269 --> 00:02:57,760
lines from a file maybe from several

00:02:54,069 --> 00:03:00,159
files and maybe simply because we want

00:02:57,760 --> 00:03:03,159
to give enhanced diagnostic oh look you

00:03:00,159 --> 00:03:07,629
goofed on line 37 to file such and

00:03:03,159 --> 00:03:12,359
search we want to attach to the minds of

00:03:07,629 --> 00:03:14,950
the file additional information but okay

00:03:12,359 --> 00:03:18,760
reach line of the file or additional

00:03:14,950 --> 00:03:27,220
information which might be the name of

00:03:18,760 --> 00:03:29,319
the file and the line number and what we

00:03:27,220 --> 00:03:33,729
want to be able to do is wanna be able

00:03:29,319 --> 00:03:37,900
to pass a file and its final name I not

00:03:33,729 --> 00:03:40,540
be the same my opener for you might be

00:03:37,900 --> 00:03:44,799
opening a socket or something but we'll

00:03:40,540 --> 00:03:47,609
just keep them separate but we want to

00:03:44,799 --> 00:03:50,409
labeled lines that produces something

00:03:47,609 --> 00:03:52,239
but we can iterate over file and get the

00:03:50,409 --> 00:03:55,060
lines one at a time but we don't get any

00:03:52,239 --> 00:03:56,709
information about the line numbers or

00:03:55,060 --> 00:03:59,290
anything so what we want to do is want

00:03:56,709 --> 00:04:02,109
to iterate over the file but we want the

00:03:59,290 --> 00:04:05,949
line numbers and the filename to be part

00:04:02,109 --> 00:04:12,759
of what we've getting out but we want

00:04:05,949 --> 00:04:14,799
the line there'll be a string perhaps

00:04:12,759 --> 00:04:17,739
for backwards compatibility or so we can

00:04:14,799 --> 00:04:20,380
apply regular expression to it we

00:04:17,739 --> 00:04:24,639
actually want the subclass string to get

00:04:20,380 --> 00:04:27,530
this sort of behavior for subclassing a

00:04:24,639 --> 00:04:34,570
built in tight so that we can store some

00:04:27,530 --> 00:04:41,780
not information on it problem clear

00:04:34,570 --> 00:04:48,650
excellent it's the solution clear now

00:04:41,780 --> 00:04:51,680
let's go on to the next one okay why do

00:04:48,650 --> 00:04:53,990
I have to magnify it again oh this one's

00:04:51,680 --> 00:04:55,370
quite nice because we're actually going

00:04:53,990 --> 00:04:56,930
to do something that people that often

00:04:55,370 --> 00:05:00,440
do with glasses and I think they should

00:04:56,930 --> 00:05:04,490
do it a lot more which is a property as

00:05:00,440 --> 00:05:05,630
if you were to Mark Smith's talk if the

00:05:04,490 --> 00:05:07,490
way of sort of giving you a virtual

00:05:05,630 --> 00:05:10,250
attribute you put a function on the

00:05:07,490 --> 00:05:13,600
class and it behaves like an attribute

00:05:10,250 --> 00:05:16,220
on the instance but you get to choose

00:05:13,600 --> 00:05:21,190
what happens when you set and get in

00:05:16,220 --> 00:05:23,330
delete a property and attribute now

00:05:21,190 --> 00:05:24,800
elsewhere in the training material I

00:05:23,330 --> 00:05:27,740
tell you what properties are in there in

00:05:24,800 --> 00:05:31,310
the sound of documentation but the key

00:05:27,740 --> 00:05:34,540
thing is a property is formed by passing

00:05:31,310 --> 00:05:37,220
for funk for arguments to a function

00:05:34,540 --> 00:05:41,180
there's a function called property and

00:05:37,220 --> 00:05:46,130
you give it for arguments how many

00:05:41,180 --> 00:05:47,539
people have used decorators before how

00:05:46,130 --> 00:05:53,479
many people need to know what a

00:05:47,539 --> 00:05:57,140
decorator is ok so so property is

00:05:53,479 --> 00:05:59,390
normally used as a decorator and you

00:05:57,140 --> 00:06:04,820
give it one function it's the EF get

00:05:59,390 --> 00:06:09,800
function and theft gosh it's a teaser

00:06:04,820 --> 00:06:12,229
right ok so let's speed up a bit what

00:06:09,800 --> 00:06:16,360
I'm doing is we're going to make a

00:06:12,229 --> 00:06:20,680
function called property from class

00:06:16,360 --> 00:06:24,320
where you pass a class to it where you

00:06:20,680 --> 00:06:26,180
set these separate functions you see the

00:06:24,320 --> 00:06:28,220
difficulty with this interface here is

00:06:26,180 --> 00:06:32,180
you got to provide three functions in

00:06:28,220 --> 00:06:34,400
general there you got to sort of write

00:06:32,180 --> 00:06:37,909
the function give it a name and then

00:06:34,400 --> 00:06:39,620
pass it into the property thing and a

00:06:37,909 --> 00:06:41,770
class is a nice way of gathering

00:06:39,620 --> 00:06:44,630
together several funk

00:06:41,770 --> 00:06:46,850
this is just a syntactic convenient

00:06:44,630 --> 00:06:48,920
syntactic sugar it makes it nicer but

00:06:46,850 --> 00:06:51,470
will actually learn a lot about classes

00:06:48,920 --> 00:06:54,650
and will use glasses in order to get

00:06:51,470 --> 00:06:56,300
this to work that's the second of our

00:06:54,650 --> 00:06:59,390
exercises we're going to write this

00:06:56,300 --> 00:07:00,530
thing here I'll probably write a rough

00:06:59,390 --> 00:07:02,600
solution then we'll write better

00:07:00,530 --> 00:07:04,760
solutions and better solutions so let's

00:07:02,600 --> 00:07:12,370
try the next one Oh named integers this

00:07:04,760 --> 00:07:19,700
is fun it's that big enough at the back

00:07:12,370 --> 00:07:20,990
or do any bigger sorry okay okay because

00:07:19,700 --> 00:07:24,170
we've got everything on one screen there

00:07:20,990 --> 00:07:30,140
so as true and false abelian is a

00:07:24,170 --> 00:07:33,080
subtype of integer well understand how

00:07:30,140 --> 00:07:34,310
boolean works that's one of the things

00:07:33,080 --> 00:07:36,950
we're going to do is going to somehow

00:07:34,310 --> 00:07:40,640
boolean works and then the idea is to

00:07:36,950 --> 00:07:43,070
create another subclass of integer this

00:07:40,640 --> 00:07:50,620
case it's going to have parameters 0 1 2

00:07:43,070 --> 00:07:50,620
and 3 strings ideas but if you pass in

00:07:51,250 --> 00:08:00,200
string 0 you'll get the number 0 after

00:07:55,790 --> 00:08:02,960
the string and and if you pack in the

00:08:00,200 --> 00:08:05,150
number two you'll get the number two but

00:08:02,960 --> 00:08:07,130
both these are sort of perhaps of this

00:08:05,150 --> 00:08:08,870
behavior but the nice thing is that you

00:08:07,130 --> 00:08:13,910
when you turned this into a string

00:08:08,870 --> 00:08:16,310
you'll get T wo the string to you know

00:08:13,910 --> 00:08:19,880
when you evaluate a boolean expression

00:08:16,310 --> 00:08:24,190
you get a number zero but it's actually

00:08:19,880 --> 00:08:26,330
a boolean so it says on the console true

00:08:24,190 --> 00:08:28,580
big different one of the big differences

00:08:26,330 --> 00:08:30,140
between booleans and integers as

00:08:28,580 --> 00:08:32,570
billions are called true and forth

00:08:30,140 --> 00:08:35,750
rather than zero one and will reproduce

00:08:32,570 --> 00:08:40,090
that here it might or might not be

00:08:35,750 --> 00:08:42,410
useful looks as though it might be and

00:08:40,090 --> 00:08:47,210
it's a good way of learning how to do

00:08:42,410 --> 00:08:51,800
these things and the next one oh ok this

00:08:47,210 --> 00:08:54,300
might be too hard for us but we want to

00:08:51,800 --> 00:08:57,660
efficiently store a sub

00:08:54,300 --> 00:09:01,440
of the vowels or a subset of the people

00:08:57,660 --> 00:09:04,560
in this room but it's not a set a sec

00:09:01,440 --> 00:09:08,339
and have any members but subset you're

00:09:04,560 --> 00:09:12,810
saying ahead of time what the ice what

00:09:08,339 --> 00:09:14,940
what what the universe is though you can

00:09:12,810 --> 00:09:17,730
just sell Dora subset as a sequence of

00:09:14,940 --> 00:09:20,579
zeros and ones a subset is simply a

00:09:17,730 --> 00:09:23,430
sequence of zero and ones together with

00:09:20,579 --> 00:09:26,850
knowing which corresponds to each 0 in

00:09:23,430 --> 00:09:27,899
each word so this is something that fits

00:09:26,850 --> 00:09:30,380
in with some of the things I've been

00:09:27,899 --> 00:09:32,760
doing I think it's a nice application

00:09:30,380 --> 00:09:34,680
because you at the one level it's an

00:09:32,760 --> 00:09:37,380
integer it's just a bunch of zeros and

00:09:34,680 --> 00:09:40,410
ones or as a sequence of bytes raw data

00:09:37,380 --> 00:09:42,860
you understood me Liam and on the other

00:09:40,410 --> 00:09:47,190
hand it's really something quite subtle

00:09:42,860 --> 00:09:48,740
so we've got mad what we've got oh oh

00:09:47,190 --> 00:09:53,029
yes we're nearly getting to the end here

00:09:48,740 --> 00:09:54,990
we're going to do something very trivial

00:09:53,029 --> 00:09:57,000
these are not the only things I'm doing

00:09:54,990 --> 00:09:59,160
but I think these the exercises that

00:09:57,000 --> 00:10:00,540
bring a lot of things together and there

00:09:59,160 --> 00:10:02,850
are other things we could do if you want

00:10:00,540 --> 00:10:04,529
me to but these things I'm interested in

00:10:02,850 --> 00:10:06,300
and this is your opportunity the

00:10:04,529 --> 00:10:08,390
questions so I'd really like to learn

00:10:06,300 --> 00:10:13,579
about can you put that in the tutorial

00:10:08,390 --> 00:10:13,579
and I'll say of course yes if this time

00:10:13,820 --> 00:10:21,540
okay what I'm going to do is turn a

00:10:16,200 --> 00:10:24,899
class into a to pull right which I call

00:10:21,540 --> 00:10:26,700
class data and then I'm going to do it

00:10:24,899 --> 00:10:30,240
the other way I'm going to turn to pass

00:10:26,700 --> 00:10:35,390
data into a tuple we're going to write

00:10:30,240 --> 00:10:35,390
decorators like that minus 5 excellent

00:10:35,779 --> 00:10:44,850
first 10 would have been nicer but there

00:10:38,220 --> 00:10:47,399
we go yeah yeah yeah yeah I want to

00:10:44,850 --> 00:10:50,100
persuade them to learn something these

00:10:47,399 --> 00:10:52,620
are the problems that okay so so so

00:10:50,100 --> 00:10:54,839
these things are unpacking you should

00:10:52,620 --> 00:10:58,940
think of these as input output you know

00:10:54,839 --> 00:11:01,079
we're unpacking and repacking right so

00:10:58,940 --> 00:11:03,089
this is really important because it

00:11:01,079 --> 00:11:05,459
tells you that anything you can

00:11:03,089 --> 00:11:08,390
construct by using the class statement

00:11:05,459 --> 00:11:11,730
you can construct it without

00:11:08,390 --> 00:11:14,490
because you turn it into cos theta and

00:11:11,730 --> 00:11:18,470
that's the thing you construct without

00:11:14,490 --> 00:11:18,470
the will forget it I'll do it tomorrow

00:11:18,860 --> 00:11:23,160
so we've got that and then what else

00:11:21,360 --> 00:11:26,460
we've got oh this is if you're

00:11:23,160 --> 00:11:28,560
interested which is this is gives you

00:11:26,460 --> 00:11:30,510
something to think about a lot of people

00:11:28,560 --> 00:11:33,450
do a lot of complicated coding with

00:11:30,510 --> 00:11:36,270
metaclass and I think most of it is

00:11:33,450 --> 00:11:38,250
unnecessary though I haven't proved it

00:11:36,270 --> 00:11:41,340
if you like and a lot of it can be done

00:11:38,250 --> 00:11:44,510
simply by putting the decorator on all

00:11:41,340 --> 00:11:46,620
right so I want you to think about

00:11:44,510 --> 00:11:49,470
instructing classes with special

00:11:46,620 --> 00:11:51,210
properties by using a decorator so that

00:11:49,470 --> 00:11:54,570
what the decorator does is you unpack

00:11:51,210 --> 00:11:57,480
the class into all the bits you

00:11:54,570 --> 00:12:02,130
manipulate the bits then you put them

00:11:57,480 --> 00:12:05,220
back together again but have I

00:12:02,130 --> 00:12:08,010
communicated that but so perhaps you

00:12:05,220 --> 00:12:12,150
might want to put to make a class such

00:12:08,010 --> 00:12:14,040
that all its methods are logged want to

00:12:12,150 --> 00:12:18,320
take a classes at all I like this class

00:12:14,040 --> 00:12:18,320
but I want to log all the method calls

00:12:20,030 --> 00:12:30,960
they will produce a decorator that does

00:12:22,530 --> 00:12:34,350
that sort of thing but ok so other time

00:12:30,960 --> 00:12:37,430
this is the time for questions now yeah

00:12:34,350 --> 00:12:41,130
so maybe I should take questions now oh

00:12:37,430 --> 00:12:42,900
I mentioned the javascript in the title

00:12:41,130 --> 00:12:45,630
it's not really going to be any

00:12:42,900 --> 00:12:48,170
JavaScript here but at the end i will do

00:12:45,630 --> 00:12:50,760
something quite amusing if you'll let me

00:12:48,170 --> 00:12:53,340
showing that javascript objects are like

00:12:50,760 --> 00:12:56,850
conklin classes which is a does your

00:12:53,340 --> 00:12:59,490
head in but when you recover from it you

00:12:56,850 --> 00:13:01,350
understand the great deal more but but

00:12:59,490 --> 00:13:03,810
that's not the main focus the javascript

00:13:01,350 --> 00:13:05,760
is really not there don't don't get put

00:13:03,810 --> 00:13:08,010
off by the JavaScript don't get put off

00:13:05,760 --> 00:13:10,350
by the JavaScript to ask if it was Leah

00:13:08,010 --> 00:13:15,300
teaser for people to come we are well

00:13:10,350 --> 00:13:17,180
hidden word there so questions any

00:13:15,300 --> 00:13:21,710
question that

00:13:17,180 --> 00:13:26,210
Jotham can ask for tomorrow so you must

00:13:21,710 --> 00:13:28,070
go to their training I'm just joking any

00:13:26,210 --> 00:13:31,250
question any question anything you'd

00:13:28,070 --> 00:13:33,950
like the tutorial to cover or you should

00:13:31,250 --> 00:13:35,330
have Python on your machine I think I'm

00:13:33,950 --> 00:13:36,740
going to give you a copy of the Python

00:13:35,330 --> 00:13:38,810
documentation because I put it on my

00:13:36,740 --> 00:13:42,830
machine so you'll have that you have

00:13:38,810 --> 00:13:44,780
that real world problems that herb was

00:13:42,830 --> 00:13:48,530
the word can be distilled down to

00:13:44,780 --> 00:13:50,380
something small will be very valuable we

00:13:48,530 --> 00:14:01,400
had a couple during the previous talk

00:13:50,380 --> 00:14:04,610
which was oh yeah we should come to the

00:14:01,400 --> 00:14:06,140
training you can present the thing and

00:14:04,610 --> 00:14:13,870
we'll discuss it together as it's

00:14:06,140 --> 00:14:13,870
appropriate okay that must be questioned

00:14:17,870 --> 00:14:21,770
do people know about slots two people

00:14:19,880 --> 00:14:25,730
want to know about slots but people want

00:14:21,770 --> 00:14:27,350
to know about I've told you what I want

00:14:25,730 --> 00:14:30,830
to tell you about but what you want to

00:14:27,350 --> 00:14:34,250
know about accessing Python Python

00:14:30,830 --> 00:14:36,440
programmers what you need to know I'm

00:14:34,250 --> 00:14:39,880
not got my ideas but you know what you

00:14:36,440 --> 00:14:39,880
you're the experts about yourself

00:14:43,450 --> 00:14:49,670
they're shy don't whine don't worry they

00:14:48,110 --> 00:14:52,850
were but they have an idea to think

00:14:49,670 --> 00:14:57,620
about it or tomorrow they will have a

00:14:52,850 --> 00:14:59,779
lot of question okay well if there are

00:14:57,620 --> 00:15:02,150
no questions but I wish there were what

00:14:59,779 --> 00:15:06,860
sister no questions you can do one last

00:15:02,150 --> 00:15:08,390
thing before they were I thought I'll

00:15:06,860 --> 00:15:11,720
show you the table of contents yeah

00:15:08,390 --> 00:15:15,260
that'll be good okay so table compounds

00:15:11,720 --> 00:15:17,930
this is all the stuff I've prepared hey

00:15:15,260 --> 00:15:21,470
may not cover it all I'm going to talk

00:15:17,930 --> 00:15:24,140
about decorators as they're actually

00:15:21,470 --> 00:15:25,670
quite important and maybe we can go

00:15:24,140 --> 00:15:28,490
through this at high speed if you see

00:15:25,670 --> 00:15:30,320
them all already I'm going to talk about

00:15:28,490 --> 00:15:31,940
the empty class which is actually quite

00:15:30,320 --> 00:15:38,270
interesting because it's not as empty as

00:15:31,940 --> 00:15:39,980
it looks bit from classes how do we get

00:15:38,270 --> 00:15:41,660
a dictionary from a class well thats

00:15:39,980 --> 00:15:46,220
related to one of the problems we've got

00:15:41,660 --> 00:15:48,380
isn't their property from class well

00:15:46,220 --> 00:15:49,430
that's one of the okay I've given you

00:15:48,380 --> 00:15:52,850
the answers of one of the assignments

00:15:49,430 --> 00:15:55,580
again deconstructing class is I've not

00:15:52,850 --> 00:16:01,370
done much there but ok how many people

00:15:55,580 --> 00:16:03,260
you have used the type statement to do

00:16:01,370 --> 00:16:07,459
anything other than find the type of an

00:16:03,260 --> 00:16:12,790
object okay you can use the type

00:16:07,459 --> 00:16:12,790
statement with ah how many people know

00:16:12,820 --> 00:16:18,980
you don't have to use the class

00:16:14,900 --> 00:16:22,730
statement the class statement in Python

00:16:18,980 --> 00:16:26,240
you can you can do all your programming

00:16:22,730 --> 00:16:29,329
without ever using a car statement the

00:16:26,240 --> 00:16:32,749
procedural programming what

00:16:29,329 --> 00:16:34,309
it's torture but it's doable and

00:16:32,749 --> 00:16:36,439
sometimes it's the right thing so we'll

00:16:34,309 --> 00:16:38,989
talk about the type statement and we're

00:16:36,439 --> 00:16:41,420
going to sort of subclass int and talk

00:16:38,989 --> 00:16:44,749
about why we have to sub mass in the way

00:16:41,420 --> 00:16:46,220
we do so passing to Paul what happens

00:16:44,749 --> 00:16:49,369
when you call a class I'm going to do

00:16:46,220 --> 00:16:54,139
some metaclass stuff how many people

00:16:49,369 --> 00:17:02,709
want to know about meta classes Oh fan

00:16:54,139 --> 00:17:11,240
handful why in order to avoid them ne ne

00:17:02,709 --> 00:17:15,620
sorry in order to in order to understand

00:17:11,240 --> 00:17:24,980
existing code ok so bring some existing

00:17:15,620 --> 00:17:27,829
code it's a cool name isn't it yeah it's

00:17:24,980 --> 00:17:31,370
very topical it is fashionable yeah oh

00:17:27,829 --> 00:17:32,990
I'm the metaclass programmer yeah okay

00:17:31,370 --> 00:17:37,130
well we'll do a bit about medical assis

00:17:32,990 --> 00:17:38,179
and the medifast attribute oh this is

00:17:37,130 --> 00:17:40,669
the stuff I'm not going to tell you

00:17:38,179 --> 00:17:42,830
about JavaScript objects of like part in

00:17:40,669 --> 00:17:45,519
classes / customizer metal on the

00:17:42,830 --> 00:17:49,580
metaclass which are never instantiated I

00:17:45,519 --> 00:17:56,380
didn't understand that year ago made no

00:17:49,580 --> 00:17:59,510
sense to me very i'm pressing the wrong

00:17:56,380 --> 00:18:02,510
but the exercises what exercise at the

00:17:59,510 --> 00:18:04,130
end but really they're up front which is

00:18:02,510 --> 00:18:07,070
why I've talked to manland so if those

00:18:04,130 --> 00:18:10,070
exercises are the sort of things you

00:18:07,070 --> 00:18:12,769
want to learn about plus the stuff I've

00:18:10,070 --> 00:18:16,730
done here plus anything you bend my arm

00:18:12,769 --> 00:18:20,299
to ask me to do then the tutorial is for

00:18:16,730 --> 00:18:23,899
you was there a question on the back and

00:18:20,299 --> 00:18:26,240
moving I think somebody was bidding I

00:18:23,899 --> 00:18:29,059
think I think we are down with the time

00:18:26,240 --> 00:18:31,940
yeah okay thank you very much for coming

00:18:29,059 --> 00:18:34,000
thank you very much iana town

00:18:31,940 --> 00:18:34,000

YouTube URL: https://www.youtube.com/watch?v=e0tK-Kawx3E


