Title: Refactoring PyChart
Publication date: 2015-04-19
Playlist: EuroPython 2011
Description: 
	[EuroPython 2011] Jacob HallÃ©n - 23 June 2011 in "Track Tagliatelle"
Captions: 
	00:00:02,260 --> 00:00:16,810
oh thank you very much so I'm going to

00:00:12,460 --> 00:00:19,810
talk about refactoring and i'm going to

00:00:16,810 --> 00:00:22,240
use pie chart as an example and this is

00:00:19,810 --> 00:00:24,400
really going to be a beginner's talk if

00:00:22,240 --> 00:00:26,710
you've done a lot of refactoring i

00:00:24,400 --> 00:00:31,359
probably don't have a lot to teach you

00:00:26,710 --> 00:00:34,719
that there might be some tidbits so

00:00:31,359 --> 00:00:37,329
let's jump into things i'm going to

00:00:34,719 --> 00:00:40,059
start by talking about some philosophy

00:00:37,329 --> 00:00:41,800
of refactoring i'm going to bring up

00:00:40,059 --> 00:00:43,960
some tips and tricks for beginners and

00:00:41,800 --> 00:00:45,969
then i'm going to show off some pretty

00:00:43,960 --> 00:00:52,539
graphs from pie chart which is actually

00:00:45,969 --> 00:00:54,969
a really really nice library so the

00:00:52,539 --> 00:01:02,379
first principle and the here i'm jumping

00:00:54,969 --> 00:01:04,989
straight into the meat of refactoring

00:01:02,379 --> 00:01:08,290
the first principle of refactoring is

00:01:04,989 --> 00:01:13,000
that if you don't have any tests you are

00:01:08,290 --> 00:01:19,200
not refactoring you are mucking about in

00:01:13,000 --> 00:01:19,200
your code and you're inserting new bugs

00:01:22,350 --> 00:01:31,750
that is the most important thing I have

00:01:25,810 --> 00:01:35,340
to tell you the refactoring is actually

00:01:31,750 --> 00:01:39,040
constrained work when you are coding

00:01:35,340 --> 00:01:42,850
normally it's not constrained work it's

00:01:39,040 --> 00:01:45,640
open-ended you can come up with any sort

00:01:42,850 --> 00:01:50,890
of ideas for how to solve problems and

00:01:45,640 --> 00:01:54,700
things like that but refactoring is sort

00:01:50,890 --> 00:01:58,690
of a thing like you're doing things in a

00:01:54,700 --> 00:02:01,180
factory you decide what to do and then

00:01:58,690 --> 00:02:06,130
you do it you decide what to do then you

00:02:01,180 --> 00:02:09,580
do it again so it's a manual process it

00:02:06,130 --> 00:02:12,189
requires very little creativity you

00:02:09,580 --> 00:02:15,069
decide on what the script is then you

00:02:12,189 --> 00:02:16,090
follow the script and you don't need to

00:02:15,069 --> 00:02:18,640
think all that

00:02:16,090 --> 00:02:23,440
much you just need to be focused on

00:02:18,640 --> 00:02:26,200
getting the details right and of course

00:02:23,440 --> 00:02:29,430
if you're in undisciplined you're going

00:02:26,200 --> 00:02:34,000
to make a mess of it so that's why

00:02:29,430 --> 00:02:38,650
refactoring can be hard and again no

00:02:34,000 --> 00:02:42,400
tests no refactor II because if you're

00:02:38,650 --> 00:02:45,790
changing your code you don't know if you

00:02:42,400 --> 00:02:51,760
your refactoring has actually succeeded

00:02:45,790 --> 00:02:54,940
or if it has failed so you work in a

00:02:51,760 --> 00:02:58,180
cycle and that cycle is a little

00:02:54,940 --> 00:03:00,940
different depending on what sort of

00:02:58,180 --> 00:03:04,510
change you're making if you're not

00:03:00,940 --> 00:03:07,930
making an interface change an internal

00:03:04,510 --> 00:03:10,720
or external interface change then the

00:03:07,930 --> 00:03:14,200
cycle is that you plan what sort of

00:03:10,720 --> 00:03:17,069
change you need to make then you check

00:03:14,200 --> 00:03:22,060
your tests make sure they're working you

00:03:17,069 --> 00:03:25,060
modify the code and then you check your

00:03:22,060 --> 00:03:27,940
tests again to see that they're still

00:03:25,060 --> 00:03:30,910
working and since you have made no

00:03:27,940 --> 00:03:33,370
interface change that that actually

00:03:30,910 --> 00:03:39,730
means that you don't need to change your

00:03:33,370 --> 00:03:41,709
tests and then of course your tests

00:03:39,730 --> 00:03:43,810
aren't working the first time so you

00:03:41,709 --> 00:03:47,200
could go through the cycle fixing bugs

00:03:43,810 --> 00:03:49,569
and and then ensure your tests are

00:03:47,200 --> 00:03:54,040
working and then you commit this to

00:03:49,569 --> 00:03:58,440
revision control so you have one entity

00:03:54,040 --> 00:03:58,440
of change in Eurovision

00:04:00,349 --> 00:04:06,239
if you're refactoring with an interface

00:04:04,319 --> 00:04:09,720
change it becomes a little more

00:04:06,239 --> 00:04:13,110
complicated again use plan what you want

00:04:09,720 --> 00:04:16,019
to make in the way of change you ensure

00:04:13,110 --> 00:04:20,489
your tests are working then you change

00:04:16,019 --> 00:04:24,300
your tests then you ensure that they are

00:04:20,489 --> 00:04:28,020
failing because you've made an interface

00:04:24,300 --> 00:04:29,940
change so if they're not failing then

00:04:28,020 --> 00:04:33,750
you have a problem with your tests you

00:04:29,940 --> 00:04:36,200
know that so then you modify your code

00:04:33,750 --> 00:04:43,680
and then you go through the cycle of

00:04:36,200 --> 00:04:47,210
ensuring the tests are working again the

00:04:43,680 --> 00:04:51,240
sort of refactorings you are doing is

00:04:47,210 --> 00:04:53,580
not something big and nebulous it is

00:04:51,240 --> 00:04:56,789
actually something very very concrete

00:04:53,580 --> 00:04:59,850
and there are a couple of different

00:04:56,789 --> 00:05:03,960
views on how simple your changes should

00:04:59,850 --> 00:05:05,729
be I'm taking a slightly higher level

00:05:03,960 --> 00:05:09,380
view I think that you can actually

00:05:05,729 --> 00:05:12,930
manage to do changes which are not

00:05:09,380 --> 00:05:16,889
really really atomic but for instance

00:05:12,930 --> 00:05:18,810
changing names changing the name of a

00:05:16,889 --> 00:05:21,750
variable changing the name of the class

00:05:18,810 --> 00:05:25,800
or method that is a refactoring and

00:05:21,750 --> 00:05:28,740
names are important so you should really

00:05:25,800 --> 00:05:32,190
really make sure that your names reflect

00:05:28,740 --> 00:05:34,229
what your program is doing if it doesn't

00:05:32,190 --> 00:05:39,229
it's important to make such a

00:05:34,229 --> 00:05:41,910
refactoring you can do changes like

00:05:39,229 --> 00:05:45,539
factoring out something functionality

00:05:41,910 --> 00:05:47,880
you have a function which does two

00:05:45,539 --> 00:05:51,419
different things well then you should

00:05:47,880 --> 00:05:55,110
separate those things so you have two

00:05:51,419 --> 00:05:58,440
functions instead sometimes you've gone

00:05:55,110 --> 00:06:00,210
too far with this so you have calls to

00:05:58,440 --> 00:06:02,669
get us incentives or something like that

00:06:00,210 --> 00:06:07,440
which you don't really need so you can

00:06:02,669 --> 00:06:09,539
do an in lining another very common

00:06:07,440 --> 00:06:13,349
thing is that you've developed your code

00:06:09,539 --> 00:06:13,790
for quite some time and it's become a

00:06:13,349 --> 00:06:16,490
fair

00:06:13,790 --> 00:06:19,700
big mess so what you need to do is to

00:06:16,490 --> 00:06:22,010
modularize your code you may need to

00:06:19,700 --> 00:06:25,310
turn part of your code into a class or

00:06:22,010 --> 00:06:31,600
part of the code into modular package or

00:06:25,310 --> 00:06:34,700
something like that you may want to move

00:06:31,600 --> 00:06:37,400
functionality around you may want to

00:06:34,700 --> 00:06:40,520
replace an algorithm you may want to

00:06:37,400 --> 00:06:43,520
remove global state in order to make the

00:06:40,520 --> 00:06:47,090
code rhian reentrant and things like

00:06:43,520 --> 00:06:51,200
that and there is actually some

00:06:47,090 --> 00:06:53,900
literature about refactorings and martin

00:06:51,200 --> 00:06:56,530
fowler is a person who's done quite a

00:06:53,900 --> 00:07:00,380
lot of this and he has a list of

00:06:56,530 --> 00:07:04,780
refactorings which are not quite as high

00:07:00,380 --> 00:07:08,360
level as the one i've i've done here i

00:07:04,780 --> 00:07:11,780
would say that he's more adapted to the

00:07:08,360 --> 00:07:15,800
Java world where there are refactorings

00:07:11,780 --> 00:07:25,190
you never need to do in pilot because

00:07:15,800 --> 00:07:29,120
Java is a more primitive language so

00:07:25,190 --> 00:07:33,380
moving on to pie chart my chart is quite

00:07:29,120 --> 00:07:36,650
nice little library it's made for making

00:07:33,380 --> 00:07:39,940
publishing quality graphs and when I

00:07:36,650 --> 00:07:43,490
want around looking at different

00:07:39,940 --> 00:07:47,540
libraries this was the one I thought

00:07:43,490 --> 00:07:51,260
looked nicest and had the simplest user

00:07:47,540 --> 00:07:55,090
interface or simplest API to program

00:07:51,260 --> 00:08:00,640
against it hasn't been changed since

00:07:55,090 --> 00:08:03,920
2006 so it's probably abandoned where

00:08:00,640 --> 00:08:08,090
it's quite easy to work with and it has

00:08:03,920 --> 00:08:11,840
an a very big variety of different

00:08:08,090 --> 00:08:18,230
output format so you can get PDFs SVG's

00:08:11,840 --> 00:08:21,770
postscript X Alva x11 PNG and a couple

00:08:18,230 --> 00:08:24,290
of more formats as well and you can get

00:08:21,770 --> 00:08:27,000
all sorts various sorts of different

00:08:24,290 --> 00:08:33,150
graphs which we're going to see

00:08:27,000 --> 00:08:37,919
reserved later so why did I want to

00:08:33,150 --> 00:08:41,940
refactor this well it has a non pythonic

00:08:37,919 --> 00:08:50,910
API almost all classes are called

00:08:41,940 --> 00:08:55,620
capital T this is actually something

00:08:50,910 --> 00:08:57,690
that is common in other places but but

00:08:55,620 --> 00:09:02,790
what what is done is that he's made a

00:08:57,690 --> 00:09:05,310
package so the identification of what

00:09:02,790 --> 00:09:08,670
things are is actually in the package

00:09:05,310 --> 00:09:11,430
name and then inside the package well

00:09:08,670 --> 00:09:16,440
you already have the package name so you

00:09:11,430 --> 00:09:20,520
can cook all your class t but I don't

00:09:16,440 --> 00:09:23,910
like this I think it son pythonic then

00:09:20,520 --> 00:09:26,490
it has a number of places where it has a

00:09:23,910 --> 00:09:29,310
lot of nasty global state I don't like

00:09:26,490 --> 00:09:32,400
that either and then there are a couple

00:09:29,310 --> 00:09:38,250
of places where there is a mixing of

00:09:32,400 --> 00:09:41,130
concern which we'll see later so it's

00:09:38,250 --> 00:09:43,530
easy to work with but in some places it

00:09:41,130 --> 00:09:46,800
is not as easy as I would like for

00:09:43,530 --> 00:09:49,380
instance when you have grouped bars in a

00:09:46,800 --> 00:09:52,440
chart then you actually have to

00:09:49,380 --> 00:09:55,290
explicitly tell how many groups you want

00:09:52,440 --> 00:10:03,630
and you won't need to say that well this

00:09:55,290 --> 00:10:06,150
this is number one of three bits of data

00:10:03,630 --> 00:10:08,880
in each group and that's not really

00:10:06,150 --> 00:10:12,589
necessary so I want to factor out that

00:10:08,880 --> 00:10:17,280
out another thing I want to do is to add

00:10:12,589 --> 00:10:21,560
the new output format html5 is really

00:10:17,280 --> 00:10:26,040
nice it has a canvas which you can draw

00:10:21,560 --> 00:10:28,710
and also i want to make the library

00:10:26,040 --> 00:10:31,830
embeddable right now there is a problem

00:10:28,710 --> 00:10:35,730
because the charts are actually

00:10:31,830 --> 00:10:38,630
generated as part of the exiting of the

00:10:35,730 --> 00:10:38,630
python process

00:10:42,110 --> 00:10:51,750
so here is an example of use usage of

00:10:47,670 --> 00:10:56,370
the old version of the demon of the

00:10:51,750 --> 00:11:00,230
demos so we do a from pot pie chart

00:10:56,370 --> 00:11:02,580
import star and that's not all but nice

00:11:00,230 --> 00:11:05,670
especially if you're using this as your

00:11:02,580 --> 00:11:14,550
tests and then you have the these

00:11:05,670 --> 00:11:19,800
examples of area t-bar plot T etc in the

00:11:14,550 --> 00:11:29,040
code category coordination coordinates

00:11:19,800 --> 00:11:33,960
dot T so how do I refactor this actually

00:11:29,040 --> 00:11:41,640
this is what the code that we had before

00:11:33,960 --> 00:11:44,610
is generating so we're setting up we're

00:11:41,640 --> 00:11:47,430
setting up some defaults and then we

00:11:44,610 --> 00:11:54,120
create an area which we are going to

00:11:47,430 --> 00:11:57,000
draw on we add an x-axis with some some

00:11:54,120 --> 00:12:00,120
former to it and Ally axis with some

00:11:57,000 --> 00:12:02,820
former to it and then we add three

00:12:00,120 --> 00:12:06,690
different bar plots and here you can see

00:12:02,820 --> 00:12:11,970
that i have to say exactly where this

00:12:06,690 --> 00:12:14,640
cluster should be showing up so that

00:12:11,970 --> 00:12:17,180
generates this graph which i think is

00:12:14,640 --> 00:12:17,180
rather pretty

00:12:19,380 --> 00:12:25,600
so I have some refactoring steps here

00:12:22,990 --> 00:12:28,140
the first one is that I really really

00:12:25,600 --> 00:12:30,940
need to make the imports explicit

00:12:28,140 --> 00:12:33,130
because otherwise I had no control I

00:12:30,940 --> 00:12:38,620
have no idea what I meant actually

00:12:33,130 --> 00:12:44,550
importing and I actually want to be able

00:12:38,620 --> 00:12:52,810
to change a single one of these and not

00:12:44,550 --> 00:12:56,260
do affect any of the others so then i

00:12:52,810 --> 00:13:01,080
also want to turn these module imports

00:12:56,260 --> 00:13:05,860
into class imports so instead of the

00:13:01,080 --> 00:13:09,280
from pie chart import area I want the

00:13:05,860 --> 00:13:12,610
from pie pie chart import capital area

00:13:09,280 --> 00:13:21,040
which is the class import instead of the

00:13:12,610 --> 00:13:24,010
module import from up there and in order

00:13:21,040 --> 00:13:27,700
to be able to do that what I need is to

00:13:24,010 --> 00:13:31,330
take all the classes of the the entire

00:13:27,700 --> 00:13:35,680
package and package them up in a new

00:13:31,330 --> 00:13:39,490
file called called the pie charts / pie

00:13:35,680 --> 00:13:41,980
chart py where I do all the imports so

00:13:39,490 --> 00:13:44,730
I'm turning my entire package into a

00:13:41,980 --> 00:13:44,730
single module

00:14:01,230 --> 00:14:07,059
that too may be possible I didn't

00:14:05,170 --> 00:14:09,189
actually look into it this was something

00:14:07,059 --> 00:14:21,399
that was working for me and it's quite

00:14:09,189 --> 00:14:23,319
explicit and yeah I not sure I'd know

00:14:21,399 --> 00:14:28,990
exactly how to do that to be quite

00:14:23,319 --> 00:14:32,439
honest so here is another example of

00:14:28,990 --> 00:14:38,759
types of charts you can draw and then

00:14:32,439 --> 00:14:38,759
we're going back to our refactorings so

00:14:39,089 --> 00:14:47,949
if we move back to this picture when you

00:14:44,949 --> 00:14:50,170
want to fill one of these bars you can

00:14:47,949 --> 00:14:55,930
actually specify by the color and

00:14:50,170 --> 00:15:01,240
pattern for it and that's called a fill

00:14:55,930 --> 00:15:05,139
style and we were setting up phil styles

00:15:01,240 --> 00:15:08,980
in the old version with the growing

00:15:05,139 --> 00:15:13,149
through a number of hoops having a

00:15:08,980 --> 00:15:17,230
global under name table in in this

00:15:13,149 --> 00:15:21,129
module and then having another global

00:15:17,230 --> 00:15:25,680
called standards which we were filling

00:15:21,129 --> 00:15:33,699
in and this is quite quite messy code

00:15:25,680 --> 00:15:37,149
and we also had examples of all the

00:15:33,699 --> 00:15:43,000
colors which were set up like this and

00:15:37,149 --> 00:15:47,290
then we ran functions in order to

00:15:43,000 --> 00:15:51,300
generate the colors so I think I made

00:15:47,290 --> 00:15:56,279
something that was fairly much simpler

00:15:51,300 --> 00:15:59,829
so I encapsulated all the colors and

00:15:56,279 --> 00:16:03,010
generate them in a list comprehension

00:15:59,829 --> 00:16:06,910
and then I made then it

00:16:03,010 --> 00:16:09,760
simpler I still need the global fills

00:16:06,910 --> 00:16:13,390
variable because that is actually

00:16:09,760 --> 00:16:19,060
exported from the module so that's where

00:16:13,390 --> 00:16:21,550
we store all the possible fill colors so

00:16:19,060 --> 00:16:25,930
I've gotten rid of quite quite a lot of

00:16:21,550 --> 00:16:31,260
the global state that was there just in

00:16:25,930 --> 00:16:31,260
order to to produce the list of colors

00:16:32,340 --> 00:16:37,990
here's another type of diagram that we

00:16:35,230 --> 00:16:52,030
can do with with this package is called

00:16:37,990 --> 00:16:56,110
a rose plot another thing that we we

00:16:52,030 --> 00:16:59,230
have as a problem here is that there is

00:16:56,110 --> 00:17:02,740
a series of classes in the old pie chart

00:16:59,230 --> 00:17:05,290
that one for each type of output that

00:17:02,740 --> 00:17:11,829
we're generating so there's a PS canvas

00:17:05,290 --> 00:17:15,820
a PNG canvas PDF canvas etc and they

00:17:11,829 --> 00:17:19,180
render graphics in the desired format so

00:17:15,820 --> 00:17:23,410
for PS it it does the PostScript

00:17:19,180 --> 00:17:27,699
rendering and it also handles whatever

00:17:23,410 --> 00:17:32,170
the file like object of the graph of the

00:17:27,699 --> 00:17:38,650
the generated graphics that that it's

00:17:32,170 --> 00:17:43,920
written to and whenever you you say

00:17:38,650 --> 00:17:49,390
about a class that it is doing a and B

00:17:43,920 --> 00:17:52,780
that's a sync signal for refactoring so

00:17:49,390 --> 00:17:55,810
in the new pie chart I've reflected

00:17:52,780 --> 00:17:58,480
should refactored out the file handling

00:17:55,810 --> 00:18:06,390
so it's now a separate class structure

00:17:58,480 --> 00:18:06,390
and I thought I'd go off and show that

00:18:20,170 --> 00:18:29,420
so I have a parent class file object and

00:18:25,070 --> 00:18:34,190
then I'm specializing this for pd PDF

00:18:29,420 --> 00:18:45,380
files or fog ghostscript and things like

00:18:34,190 --> 00:18:50,900
that and we'll see so for ghostscript

00:18:45,380 --> 00:18:56,510
it's actually going off and generating a

00:18:50,900 --> 00:18:59,240
command a system command and this was

00:18:56,510 --> 00:19:02,890
part of the generating class and this is

00:18:59,240 --> 00:19:08,120
really really messy stuff which was

00:19:02,890 --> 00:19:12,320
entangled in the old code so it you get

00:19:08,120 --> 00:19:14,600
a much much cleaner the interface into

00:19:12,320 --> 00:19:17,170
the classes when you're doing these

00:19:14,600 --> 00:19:17,170
changes

00:19:26,500 --> 00:19:32,200
here's another example from the code you

00:19:29,110 --> 00:19:36,310
can do quite neat things with zapping

00:19:32,200 --> 00:19:45,760
both in the horizontal and in the

00:19:36,310 --> 00:19:48,370
vertical another thing that I really

00:19:45,760 --> 00:19:52,900
wonder what he was thinking of when he

00:19:48,370 --> 00:19:56,770
wrote this is that the actual generation

00:19:52,900 --> 00:20:01,510
of the charts is done by overriding the

00:19:56,770 --> 00:20:04,060
Python exit function to inflow include a

00:20:01,510 --> 00:20:06,940
call to the close methods of the

00:20:04,060 --> 00:20:11,110
canvases that we have we've seen here

00:20:06,940 --> 00:20:14,230
and what this means is that you can't

00:20:11,110 --> 00:20:18,490
embed this program because you're

00:20:14,230 --> 00:20:22,440
relying on the actual call of the exit

00:20:18,490 --> 00:20:25,660
mallet and it changes the exit method

00:20:22,440 --> 00:20:28,480
for you so this is not very neat and

00:20:25,660 --> 00:20:31,900
nice at all I haven't quite figured out

00:20:28,480 --> 00:20:34,290
exactly how to how to do this change yet

00:20:31,900 --> 00:20:37,600
because this is still working progress

00:20:34,290 --> 00:20:42,430
but it is one of the things that is

00:20:37,600 --> 00:20:47,200
going to go and I like the model Wayne

00:20:42,430 --> 00:20:51,420
not really having to to explicitly say

00:20:47,200 --> 00:20:56,160
and by the way generate things that

00:20:51,420 --> 00:20:56,160
there has to be a nicer way to do this

00:20:58,670 --> 00:21:12,690
we can of course generate pie charts

00:21:01,320 --> 00:21:19,290
with the pie chart as well let's see

00:21:12,690 --> 00:21:26,370
here and I should also show why I'm

00:21:19,290 --> 00:21:32,490
doing all this why am I not coming to

00:21:26,370 --> 00:21:35,940
the right page there there I start using

00:21:32,490 --> 00:21:40,640
this because I'm the member of a member

00:21:35,940 --> 00:21:43,350
of a car cooperative and i'm a member of

00:21:40,640 --> 00:21:47,070
the group in the car cooperative doing

00:21:43,350 --> 00:21:52,310
statistics so we're actually keeping tab

00:21:47,070 --> 00:21:57,300
of how much the cars are being driven

00:21:52,310 --> 00:21:59,850
all the time because if they aren't

00:21:57,300 --> 00:22:01,980
being driven all that much we can't

00:21:59,850 --> 00:22:04,350
afford to have to keep them so we have

00:22:01,980 --> 00:22:08,370
to sell the cars so this is actually

00:22:04,350 --> 00:22:12,600
being used in a real-life scenario so

00:22:08,370 --> 00:22:15,840
this shows here rather interesting that

00:22:12,600 --> 00:22:19,560
in 2009 we had downturn in the economy

00:22:15,840 --> 00:22:22,290
and that actually shows that people are

00:22:19,560 --> 00:22:26,330
not driving as much on their vacation as

00:22:22,290 --> 00:22:26,330
they would be doing otherwise

00:22:32,160 --> 00:22:36,570
see ya there

00:22:40,830 --> 00:22:48,880
so this is actually the gist of my talk

00:22:45,390 --> 00:22:51,520
refactoring requires test and it

00:22:48,880 --> 00:22:55,570
requires very very different discipline

00:22:51,520 --> 00:23:00,160
work you decide on one bit you go

00:22:55,570 --> 00:23:02,620
through it you test it make sure that

00:23:00,160 --> 00:23:07,870
works then you've decided on the next

00:23:02,620 --> 00:23:10,630
bit you do that the tests have to pass

00:23:07,870 --> 00:23:18,570
after every refactoring because

00:23:10,630 --> 00:23:22,930
otherwise you're just mucking about you

00:23:18,570 --> 00:23:26,290
yes yes of course you need good test

00:23:22,930 --> 00:23:40,150
coverage anything that you're modifying

00:23:26,290 --> 00:23:42,040
has to be covered by the tests we I have

00:23:40,150 --> 00:23:45,040
actually done all the refactoring

00:23:42,040 --> 00:23:47,170
manually there are tools I have tried to

00:23:45,040 --> 00:23:50,740
get them to work but I have never

00:23:47,170 --> 00:23:52,960
managed to to get the tools to work I

00:23:50,740 --> 00:23:55,900
think there is room for a really really

00:23:52,960 --> 00:24:00,160
good refactoring tool which actually

00:23:55,900 --> 00:24:04,270
looks at the entire your entire source

00:24:00,160 --> 00:24:08,680
code probably builds an abstract syntax

00:24:04,270 --> 00:24:12,430
tree or maybe a concrete syntax tree of

00:24:08,680 --> 00:24:16,530
your code and does the modifications to

00:24:12,430 --> 00:24:19,600
that but I don't think there is one a

00:24:16,530 --> 00:24:22,870
tool that actually does that today and

00:24:19,600 --> 00:24:25,740
there is room for somebody to build such

00:24:22,870 --> 00:24:25,740
a tool

00:24:27,389 --> 00:24:36,139
I think

00:24:50,200 --> 00:24:58,940
yeah yeah that there is also a problem

00:24:56,630 --> 00:25:01,670
problem with the goebel global search

00:24:58,940 --> 00:25:04,010
replace because you're actually not sure

00:25:01,670 --> 00:25:08,060
where the name belongs in which

00:25:04,010 --> 00:25:11,530
namespace and that that is why you're

00:25:08,060 --> 00:25:14,810
actually sure to have a syntax tree that

00:25:11,530 --> 00:25:19,400
where where you can actually detect that

00:25:14,810 --> 00:25:22,600
but again there is no such tool and I

00:25:19,400 --> 00:25:34,040
would love there for there to be one

00:25:22,600 --> 00:25:38,320
yeah uh-huh okay all right I'm going to

00:25:34,040 --> 00:25:38,320
open for questions and comments

00:25:52,710 --> 00:26:03,480
would you go through an example I'm

00:26:00,370 --> 00:26:12,480
afraid I'm a very slow typist so that

00:26:03,480 --> 00:26:12,480
that that's not really feasible yeah

00:26:13,590 --> 00:26:26,950
yeah yeah you develop the tests by

00:26:22,690 --> 00:26:31,810
yourself and the second question related

00:26:26,950 --> 00:26:36,100
to the first is how did you produce the

00:26:31,810 --> 00:26:40,240
tests since the output is graphical by

00:26:36,100 --> 00:26:43,840
comparing eyes Adam actually I did not

00:26:40,240 --> 00:26:47,830
develop the test the package comes with

00:26:43,840 --> 00:26:51,540
a very very nice suite of demos it's

00:26:47,830 --> 00:26:55,890
actually the ones you've seen in in the

00:26:51,540 --> 00:27:03,010
presentation here and so what I did was

00:26:55,890 --> 00:27:06,370
that I used the demos as my tests they

00:27:03,010 --> 00:27:09,190
are pretty well covering all of the

00:27:06,370 --> 00:27:11,740
functionality and you get all the

00:27:09,190 --> 00:27:22,420
different files the file types are

00:27:11,740 --> 00:27:26,740
generated by the tests so if we know I

00:27:22,420 --> 00:27:31,890
did that by hand I actually looked at

00:27:26,740 --> 00:27:31,890
the the outcome of all the graphs

00:27:36,350 --> 00:27:46,200
you could do that but that I actually

00:27:43,940 --> 00:27:48,510
wanted to see when there was a

00:27:46,200 --> 00:27:53,040
difference exactly what the difference

00:27:48,510 --> 00:27:56,670
was so I think it wouldn't have saved me

00:27:53,040 --> 00:28:14,870
any time to actually compute the picture

00:27:56,670 --> 00:28:19,550
difference yeah uh-huh yeah so this is

00:28:14,870 --> 00:28:19,550
the suite of demos that I've been using

00:28:20,720 --> 00:28:31,140
it actually has quite a few very very

00:28:26,250 --> 00:28:40,370
neat things that it can can do in this

00:28:31,140 --> 00:28:45,650
one it's got the error bars in it oops

00:28:40,370 --> 00:28:48,320
there and of course you can do

00:28:45,650 --> 00:28:51,830
horizontal bars and things like that

00:28:48,320 --> 00:29:00,050
that's a neat one you can actually do

00:28:51,830 --> 00:29:00,050
clipping in the package and you have a

00:29:00,470 --> 00:29:07,980
number of different things you can do

00:29:04,740 --> 00:29:12,810
and it you can really really neat neatly

00:29:07,980 --> 00:29:17,670
add different axis there is an example

00:29:12,810 --> 00:29:20,090
where you have double x axis which comes

00:29:17,670 --> 00:29:20,090
a little later

00:29:29,240 --> 00:29:39,530
we have scatter plots as well and you

00:29:32,300 --> 00:29:50,750
can draw bars and diagrams see where we

00:29:39,530 --> 00:29:54,200
had that one well Laura hi I just wanted

00:29:50,750 --> 00:29:56,450
to say something um I'm a an emacs user

00:29:54,200 --> 00:29:58,220
and doing refactoring by writing my own

00:29:56,450 --> 00:30:00,800
list liftmaster which for a long time

00:29:58,220 --> 00:30:02,390
and I thought ha I will never change I

00:30:00,800 --> 00:30:05,950
will never change besides I've got my

00:30:02,390 --> 00:30:08,180
lifetime invested in Emacs and last

00:30:05,950 --> 00:30:11,840
yesterday I was talking to the PI charm

00:30:08,180 --> 00:30:14,660
people and they have a refactoring mode

00:30:11,840 --> 00:30:16,640
for their PyCharm IDE which I hadn't

00:30:14,660 --> 00:30:19,550
seen and then we're faster at it than I

00:30:16,640 --> 00:30:22,400
was so I am seriously thinking of going

00:30:19,550 --> 00:30:24,170
home and getting out pycharm and seeing

00:30:22,400 --> 00:30:26,690
if I can stand the rest of it because it

00:30:24,170 --> 00:30:28,460
seemed to be making the refactoring

00:30:26,690 --> 00:30:30,620
going easy easier so when people are

00:30:28,460 --> 00:30:32,210
looking for a way to do it pycharm is

00:30:30,620 --> 00:30:34,100
that and the other thing is they're

00:30:32,210 --> 00:30:36,140
really really interested in finding out

00:30:34,100 --> 00:30:38,570
what it is that people need for

00:30:36,140 --> 00:30:40,160
refactoring so we could get in on the

00:30:38,570 --> 00:30:42,410
ground floor and say this is what we

00:30:40,160 --> 00:30:44,600
want please make us one of these so I

00:30:42,410 --> 00:30:45,980
thought that since people are interested

00:30:44,600 --> 00:30:48,490
in that we should probably talk to the

00:30:45,980 --> 00:30:48,490
PI charm people

00:30:57,899 --> 00:31:08,200
I have a perspective from managing teams

00:31:06,609 --> 00:31:10,600
of developers maybe require a few

00:31:08,200 --> 00:31:13,450
developers in if ever you find yourself

00:31:10,600 --> 00:31:16,119
in a situation of trying to decide who

00:31:13,450 --> 00:31:18,159
to ask to do refactoring it's worth

00:31:16,119 --> 00:31:19,960
noting from my experience that some

00:31:18,159 --> 00:31:24,399
people are brilliant at it and love it

00:31:19,960 --> 00:31:26,529
and some people not either dislike it

00:31:24,399 --> 00:31:29,859
and tend to be bad at it it really is a

00:31:26,529 --> 00:31:31,210
very very polarized skill and it's

00:31:29,859 --> 00:31:33,159
really worth making sure you've got

00:31:31,210 --> 00:31:34,869
someone with its going to like it some

00:31:33,159 --> 00:31:37,539
people thrive on the attention to detail

00:31:34,869 --> 00:31:40,299
and the sense of closure of

00:31:37,539 --> 00:31:41,919
statistically making it better and other

00:31:40,299 --> 00:31:53,830
people just cannot find any motivation

00:31:41,919 --> 00:31:58,480
for it at all I think that's a very very

00:31:53,830 --> 00:32:01,389
useful comment personally I enjoy doing

00:31:58,480 --> 00:32:04,119
refactoring I have actually taken a

00:32:01,389 --> 00:32:08,590
number of people's code and done rather

00:32:04,119 --> 00:32:13,450
large refactorings to them and you

00:32:08,590 --> 00:32:17,649
discover the many many modes of error

00:32:13,450 --> 00:32:20,320
that beginners are doing one thing I did

00:32:17,649 --> 00:32:22,749
was for the Royal Library in Sweden

00:32:20,320 --> 00:32:26,679
where I did a refactoring of a package

00:32:22,749 --> 00:32:29,080
for a server called Zed that night at 50

00:32:26,679 --> 00:32:33,489
which is a standardized way of accessing

00:32:29,080 --> 00:32:37,419
library data and the one who had coded

00:32:33,489 --> 00:32:40,509
that had a coding style where you would

00:32:37,419 --> 00:32:42,190
call a function and that function would

00:32:40,509 --> 00:32:44,609
call a function which would call a

00:32:42,190 --> 00:32:47,980
function which would call a function

00:32:44,609 --> 00:32:52,330
nested to a level of that otherwise 7

00:32:47,980 --> 00:32:54,820
and I refactored that so I had a

00:32:52,330 --> 00:33:01,019
function that called function a function

00:32:54,820 --> 00:33:03,789
b function c and then i was done and

00:33:01,019 --> 00:33:07,269
this was a very very large refactoring

00:33:03,789 --> 00:33:09,580
it took me about two months that it

00:33:07,269 --> 00:33:14,909
brought to the size of the code from

00:33:09,580 --> 00:33:14,909
about the three thousand lines to 600

00:33:17,039 --> 00:33:27,480
but that will see code so it's not

00:33:19,480 --> 00:33:27,480
really relevant here okay yeah

00:33:27,680 --> 00:33:29,740
Oh

00:33:40,820 --> 00:33:50,190
yes there was actually a time in the

00:33:45,180 --> 00:33:52,820
late 60s early 70s when IBM paid their

00:33:50,190 --> 00:33:57,930
programmers for a line of code and it

00:33:52,820 --> 00:34:07,550
showed the I think there was almost a

00:33:57,930 --> 00:34:18,870
tenfold increase in productivity yes hmm

00:34:07,550 --> 00:34:22,290
okay anymore yeah from what I understand

00:34:18,870 --> 00:34:25,590
the refactoring is not complete of the

00:34:22,290 --> 00:34:27,390
by tram and so do plan on a nice Prince

00:34:25,590 --> 00:34:33,060
during the weekend or something like

00:34:27,390 --> 00:34:36,150
that I actually haven't planned any

00:34:33,060 --> 00:34:38,250
Sprint's but if there are any people who

00:34:36,150 --> 00:34:40,980
would be interested in joining then I

00:34:38,250 --> 00:34:49,770
would be happy to do hacking on pipe pie

00:34:40,980 --> 00:34:51,180
chart during the weekend so once the

00:34:49,770 --> 00:34:53,460
refactoring is complete will you

00:34:51,180 --> 00:34:56,940
published the changes as a fork or pie

00:34:53,460 --> 00:35:02,910
chart or publish a new version or

00:34:56,940 --> 00:35:05,310
something I plan to do some sort of

00:35:02,910 --> 00:35:08,280
publishing of a new version and I

00:35:05,310 --> 00:35:11,430
haven't tried to contact the original

00:35:08,280 --> 00:35:14,510
author yet but my guess is that it will

00:35:11,430 --> 00:35:17,130
be published as pie chart too I've

00:35:14,510 --> 00:35:19,740
discussed with a few people with we do

00:35:17,130 --> 00:35:22,740
it for instance what would be the the

00:35:19,740 --> 00:35:26,250
best and most polite way of doing this

00:35:22,740 --> 00:35:28,380
and of course since it is a total change

00:35:26,250 --> 00:35:31,170
of the user interface it shouldn't just

00:35:28,380 --> 00:35:33,210
be called pie chart or with a new

00:35:31,170 --> 00:35:37,410
version number or something like that it

00:35:33,210 --> 00:35:39,660
has to have a new name and I think pie

00:35:37,410 --> 00:35:41,990
chart 2 is probably the right name to go

00:35:39,660 --> 00:35:41,990
for

00:35:51,240 --> 00:35:57,190
instead at the beginning that

00:35:53,730 --> 00:35:59,740
refactoring is a task that requires less

00:35:57,190 --> 00:36:03,270
creativity respect to development

00:35:59,740 --> 00:36:06,040
development I'm not so sure about this

00:36:03,270 --> 00:36:08,920
statement I think that refactoring

00:36:06,040 --> 00:36:13,359
sometimes requires so much imagination

00:36:08,920 --> 00:36:16,329
on how to re-implement order logic that

00:36:13,359 --> 00:36:19,780
it was necessary for me to proceed by

00:36:16,329 --> 00:36:22,300
different steps so spend more time

00:36:19,780 --> 00:36:24,550
because I could imagine at the first

00:36:22,300 --> 00:36:26,980
time out to refactor properly or the

00:36:24,550 --> 00:36:28,750
contents so it requires a lot of

00:36:26,980 --> 00:36:31,690
imagination for me and also for

00:36:28,750 --> 00:36:34,990
creativity but in a band in a bounded

00:36:31,690 --> 00:36:38,109
contest that's true so this was an

00:36:34,990 --> 00:36:43,930
observation and a question you said that

00:36:38,109 --> 00:36:47,589
it is quite a manual task but this means

00:36:43,930 --> 00:36:52,920
that it becomes easier for you to

00:36:47,589 --> 00:36:56,440
forecast how much time will require a

00:36:52,920 --> 00:37:00,400
specific change and you can respect

00:36:56,440 --> 00:37:03,359
these forecasts with a good precision or

00:37:00,400 --> 00:37:03,359
not

00:37:06,910 --> 00:37:12,140
first I would like to comment on your

00:37:10,370 --> 00:37:14,420
comment and that is that you're

00:37:12,140 --> 00:37:17,540
absolutely right there is a step which

00:37:14,420 --> 00:37:20,000
requires creativity and that is the step

00:37:17,540 --> 00:37:23,330
where you're deciding what refactoring

00:37:20,000 --> 00:37:26,030
to do because that requires you to

00:37:23,330 --> 00:37:30,320
imagine what the code will look like

00:37:26,030 --> 00:37:32,960
after you make a change so you have to

00:37:30,320 --> 00:37:36,530
sort of imagine different scenarios if I

00:37:32,960 --> 00:37:39,020
do this change what will the code or

00:37:36,530 --> 00:37:41,660
overall look like you you're not

00:37:39,020 --> 00:37:43,790
imagining specifics but you're imagining

00:37:41,660 --> 00:37:48,140
what the structure will be and will it

00:37:43,790 --> 00:37:52,040
be smaller will it be neater etc the

00:37:48,140 --> 00:37:55,160
second yes once you've decided on a

00:37:52,040 --> 00:37:57,580
specific refactoring it's very easy to

00:37:55,160 --> 00:38:02,320
work out how long time it will take

00:37:57,580 --> 00:38:06,140
because usually you can do a grep to say

00:38:02,320 --> 00:38:08,600
see the places you need to change and if

00:38:06,140 --> 00:38:11,510
you need to change a hundred places and

00:38:08,600 --> 00:38:21,230
each place takes a minute then you have

00:38:11,510 --> 00:38:23,780
a hundred minutes Laura that that just

00:38:21,230 --> 00:38:25,400
reminded me of something I guess 30

00:38:23,780 --> 00:38:27,440
years ago I was teaching at the

00:38:25,400 --> 00:38:29,420
University of Toronto teaching

00:38:27,440 --> 00:38:30,950
undergraduates and we had some

00:38:29,420 --> 00:38:32,480
undergrads who could refactor really

00:38:30,950 --> 00:38:34,490
well when we had some undergraduates who

00:38:32,480 --> 00:38:36,770
are really really really lousy at it and

00:38:34,490 --> 00:38:38,210
so we did a bunch of things to try and

00:38:36,770 --> 00:38:39,500
figure out what we could do to train the

00:38:38,210 --> 00:38:42,020
people who were rotten at it to get

00:38:39,500 --> 00:38:44,090
better and we found out by accident what

00:38:42,020 --> 00:38:46,280
it was the accident was that an

00:38:44,090 --> 00:38:49,550
extremely beautiful blonde girl who's

00:38:46,280 --> 00:38:51,560
Gabe gave courses in sketching and

00:38:49,550 --> 00:38:54,770
drawing and how to draw shapes and

00:38:51,560 --> 00:38:57,020
things like this and by chance half of

00:38:54,770 --> 00:38:58,520
the people in my tutorial group thought

00:38:57,020 --> 00:39:00,590
she was absolutely drop-dead gorgeous

00:38:58,520 --> 00:39:02,600
and they would go take a class and

00:39:00,590 --> 00:39:04,910
absolutely anything she was teaching in

00:39:02,600 --> 00:39:07,670
the afternoon and the ones who went off

00:39:04,910 --> 00:39:09,680
and took the course and sketching got a

00:39:07,670 --> 00:39:11,960
lot better at refactoring than the ones

00:39:09,680 --> 00:39:14,120
who didn't so I thought that was very

00:39:11,960 --> 00:39:15,710
odd so the next so the next year we were

00:39:14,120 --> 00:39:17,210
going off and did this and I split the

00:39:15,710 --> 00:39:20,090
cast and I had them take a stitching

00:39:17,210 --> 00:39:23,330
class from someone who wasn't gorgeous

00:39:20,090 --> 00:39:24,830
and to see you know to see whether being

00:39:23,330 --> 00:39:26,690
with gorgeous people makes you it makes

00:39:24,830 --> 00:39:28,430
you a makes you refactor better that

00:39:26,690 --> 00:39:30,860
would be an interesting conclusion but

00:39:28,430 --> 00:39:33,290
no learning how to draw makes you

00:39:30,860 --> 00:39:55,160
refactor better if so if you're rotting

00:39:33,290 --> 00:39:57,860
at it take a drawing class yeah I think

00:39:55,160 --> 00:40:02,650
I can can may give an explanation for

00:39:57,860 --> 00:40:06,200
that and that is yes when you when you

00:40:02,650 --> 00:40:09,290
learn how to draw you learn how to

00:40:06,200 --> 00:40:15,050
picture what is going to be on your

00:40:09,290 --> 00:40:19,250
paper before it's there that is exactly

00:40:15,050 --> 00:40:22,580
what you need to to do when you're

00:40:19,250 --> 00:40:25,820
refactoring you need to picture what

00:40:22,580 --> 00:40:33,470
this will look like after you've done

00:40:25,820 --> 00:40:37,490
the change it is that it is sort of the

00:40:33,470 --> 00:40:40,850
same in development but you are more

00:40:37,490 --> 00:40:45,320
constrained when you're drawing unless

00:40:40,850 --> 00:40:47,510
you're doing abstract drawing and when

00:40:45,320 --> 00:40:50,080
you are doing refactoring because you

00:40:47,510 --> 00:40:52,760
have a model that you're starting with

00:40:50,080 --> 00:40:55,790
you have the real world when you're

00:40:52,760 --> 00:40:58,160
drawing you have the existing code when

00:40:55,790 --> 00:41:02,150
you're coding so you have constraints

00:40:58,160 --> 00:41:05,450
that have to be transformed into

00:41:02,150 --> 00:41:08,740
something that you are producing so

00:41:05,450 --> 00:41:08,740
that's a difference

00:41:16,829 --> 00:41:19,609
ok

00:41:20,049 --> 00:41:24,160
that seems to be it thank you all for

00:41:22,539 --> 00:41:28,679
coming I hope you live and learnt

00:41:24,160 --> 00:41:28,679

YouTube URL: https://www.youtube.com/watch?v=Av6KcdWvWnU


