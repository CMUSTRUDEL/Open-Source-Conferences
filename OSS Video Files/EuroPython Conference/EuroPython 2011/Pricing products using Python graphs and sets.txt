Title: Pricing products using Python graphs and sets
Publication date: 2015-04-19
Playlist: EuroPython 2011
Description: 
	[EuroPython 2011] Rob Collins - 22 June 2011 in "Track Ravioli
"
Captions: 
	00:00:01,930 --> 00:00:07,170
you would like to talk about ice cream

00:00:07,590 --> 00:00:15,910
the reason for this is that David and I

00:00:11,530 --> 00:00:19,660
are here sort of incognito in that we

00:00:15,910 --> 00:00:21,570
represent a company that was possibly

00:00:19,660 --> 00:00:26,140
going to be sponsoring the conference

00:00:21,570 --> 00:00:29,140
and recruiting and being revealing

00:00:26,140 --> 00:00:31,930
themselves as a Python development house

00:00:29,140 --> 00:00:35,680
but they want to get the first version

00:00:31,930 --> 00:00:38,230
of the product released before they can

00:00:35,680 --> 00:00:43,030
do that so we're going to explain about

00:00:38,230 --> 00:00:45,040
ice creams instead because the same

00:00:43,030 --> 00:00:47,260
principle applies the major ice cream

00:00:45,040 --> 00:00:52,030
company that we work for and their West

00:00:47,260 --> 00:00:56,410
London dishes are second to none we have

00:00:52,030 --> 00:01:01,090
here a very nice ice cream parlor with

00:00:56,410 --> 00:01:03,789
some prices of products that we can see

00:01:01,090 --> 00:01:07,330
there and thinking as Python developers

00:01:03,789 --> 00:01:09,549
how would we price these in a way that

00:01:07,330 --> 00:01:12,130
could be useful to a front-end so we'd

00:01:09,549 --> 00:01:14,860
have a front-end web site talking to a

00:01:12,130 --> 00:01:17,380
pricing engine saying what products are

00:01:14,860 --> 00:01:19,570
available in what combinations and how

00:01:17,380 --> 00:01:22,090
much will they cost and it's important

00:01:19,570 --> 00:01:25,180
to design a system that wherever you

00:01:22,090 --> 00:01:29,650
call it from from somebody selling in a

00:01:25,180 --> 00:01:34,570
shop or online or by the phone they all

00:01:29,650 --> 00:01:38,259
need to be given the same price so if we

00:01:34,570 --> 00:01:41,619
look at the products that are on sale

00:01:38,259 --> 00:01:45,189
from our ice cream shop we have scoops

00:01:41,619 --> 00:01:47,229
of ice cream in cones and as Python

00:01:45,189 --> 00:01:51,220
developers we like spotting patterns

00:01:47,229 --> 00:01:54,640
here and as a test of Python ability we

00:01:51,220 --> 00:01:58,950
can work out what's the rule here that

00:01:54,640 --> 00:02:02,470
we've got a cone that costs one hero and

00:01:58,950 --> 00:02:05,560
some scoop of ice cream that costs a

00:02:02,470 --> 00:02:07,960
hero so if you have two scoops with one

00:02:05,560 --> 00:02:12,059
cone it's three euros three scoops with

00:02:07,960 --> 00:02:14,900
one cone it's four euros ah right I can

00:02:12,059 --> 00:02:20,209
understand that I'm ready to

00:02:14,900 --> 00:02:24,349
start doing my pricing model so I start

00:02:20,209 --> 00:02:29,060
by creating a number of classes i'm

00:02:24,349 --> 00:02:31,609
going to model the system and i can

00:02:29,060 --> 00:02:33,709
think of ice cream and cones and scoops

00:02:31,609 --> 00:02:37,430
and on a good agile development

00:02:33,709 --> 00:02:39,709
principle only want to write code for

00:02:37,430 --> 00:02:41,510
the problem i know of at the moment

00:02:39,709 --> 00:02:45,560
simplest possible thing that would work

00:02:41,510 --> 00:02:49,609
i can then write the obvious rule code

00:02:45,560 --> 00:02:55,970
but would that actually be a good idea

00:02:49,609 --> 00:02:58,310
well i can then start to say well I want

00:02:55,970 --> 00:03:01,400
to have a flavor of the ice cream and I

00:02:58,310 --> 00:03:04,220
want a number of scoops so I put in a

00:03:01,400 --> 00:03:06,230
scoop count maybe it defaults to one and

00:03:04,220 --> 00:03:09,560
then I start to think well how am I

00:03:06,230 --> 00:03:12,769
going to produce a price and I can have

00:03:09,560 --> 00:03:16,280
it take the price of a cone and the

00:03:12,769 --> 00:03:18,889
price of a scoop and put them together

00:03:16,280 --> 00:03:23,150
and yeah we're well on the way to a

00:03:18,889 --> 00:03:29,629
pricing engine but then we look from

00:03:23,150 --> 00:03:33,049
this diagram about the tubs and here we

00:03:29,629 --> 00:03:36,949
have yo tab costs 1 euro and the scoop

00:03:33,049 --> 00:03:39,799
of ice cream costs two euros what one

00:03:36,949 --> 00:03:42,769
you are making to all together two

00:03:39,799 --> 00:03:47,540
scoops in a tub is three heroes but

00:03:42,769 --> 00:03:50,629
three scoops is 5 euros now my rule has

00:03:47,540 --> 00:03:52,220
broken so I have to make the rule a

00:03:50,629 --> 00:03:55,629
little bit more complicated maybe I

00:03:52,220 --> 00:04:01,040
could put in an exception that the tub

00:03:55,629 --> 00:04:03,919
costs more than the cone in some

00:04:01,040 --> 00:04:07,069
circumstances so I've now got an if

00:04:03,919 --> 00:04:09,319
statement in my cone which I've now

00:04:07,069 --> 00:04:11,510
subclassed into different types of

00:04:09,319 --> 00:04:16,639
container so I have a container class

00:04:11,510 --> 00:04:19,630
and the cone subclass and a tub subclass

00:04:16,639 --> 00:04:25,150
right we can cope with that but then I

00:04:19,630 --> 00:04:26,930
realize that I go back to the business

00:04:25,150 --> 00:04:28,700
requirements and talk to people who

00:04:26,930 --> 00:04:31,670
haven't actually explained to me

00:04:28,700 --> 00:04:34,760
that there are three different types of

00:04:31,670 --> 00:04:38,840
tub different sizes so the tablet the

00:04:34,760 --> 00:04:41,360
back can actually take three scoops of

00:04:38,840 --> 00:04:44,150
ice cream a really large scoops where's

00:04:41,360 --> 00:04:46,370
your aunt on a cone you put the scoop of

00:04:44,150 --> 00:04:50,480
ice cream on top and if it's too large

00:04:46,370 --> 00:04:53,900
it falls off so we start to develop more

00:04:50,480 --> 00:04:56,900
and more complicated rules which isn't

00:04:53,900 --> 00:05:01,060
really how we want to do this because

00:04:56,900 --> 00:05:04,670
there's one major problem with this that

00:05:01,060 --> 00:05:07,760
when the rules change and rules seem to

00:05:04,670 --> 00:05:09,890
change in two circumstances one is when

00:05:07,760 --> 00:05:11,510
the business realizes what the rules

00:05:09,890 --> 00:05:14,000
actually are that they didn't tell you

00:05:11,510 --> 00:05:16,990
about to start with and the other is

00:05:14,000 --> 00:05:19,700
when the rules change because a

00:05:16,990 --> 00:05:24,290
competitor ice cream company just down

00:05:19,700 --> 00:05:29,180
the road has released a new package that

00:05:24,290 --> 00:05:30,980
has to be matched very quickly the ice

00:05:29,180 --> 00:05:33,980
cream company doesn't want to have to

00:05:30,980 --> 00:05:36,920
wait for a three-month development cycle

00:05:33,980 --> 00:05:39,080
for the developers to say ah yes well

00:05:36,920 --> 00:05:41,890
i'll just go back into my model and i'll

00:05:39,080 --> 00:05:44,390
do a few more classes and put a few more

00:05:41,890 --> 00:05:47,630
exceptions in and we can handle that and

00:05:44,390 --> 00:05:51,470
you end up with code that is very

00:05:47,630 --> 00:05:55,010
complicated and unmaintained ball and

00:05:51,470 --> 00:05:57,230
requires development input and a long

00:05:55,010 --> 00:06:00,050
release cycle what you want is something

00:05:57,230 --> 00:06:03,530
that's quick to respond to the market

00:06:00,050 --> 00:06:07,040
particularly when you come to the last

00:06:03,530 --> 00:06:09,140
section which is enormous cone for seven

00:06:07,040 --> 00:06:11,360
euros with only three scoops at it but

00:06:09,140 --> 00:06:13,430
they are very large scoops I saw someone

00:06:11,360 --> 00:06:16,280
have one of these and I don't know how

00:06:13,430 --> 00:06:20,510
they managed to eat it or indeed a bath

00:06:16,280 --> 00:06:24,230
tub of ice cream with only three scoops

00:06:20,510 --> 00:06:25,850
in it but they must use a different size

00:06:24,230 --> 00:06:29,720
of skip and you can imagine all these

00:06:25,850 --> 00:06:32,900
rules would get far too complicated so

00:06:29,720 --> 00:06:36,110
one of the important lessons we have

00:06:32,900 --> 00:06:40,400
learned in working on this project is

00:06:36,110 --> 00:06:42,230
the need to separate the data input from

00:06:40,400 --> 00:06:43,790
the pricing engine that

00:06:42,230 --> 00:06:47,420
what you want is a pricing engine that

00:06:43,790 --> 00:06:51,710
can recognize patterns that you come

00:06:47,420 --> 00:06:54,980
across we found a good tool in this

00:06:51,710 --> 00:06:59,800
process many of you will have come

00:06:54,980 --> 00:07:02,660
across cucumber there's a couple of

00:06:59,800 --> 00:07:05,770
equivalents in Python freshen and

00:07:02,660 --> 00:07:12,560
lettuce the principle we're using

00:07:05,770 --> 00:07:16,730
freshen there we can say a scenario you

00:07:12,560 --> 00:07:19,550
are given certain circumstances and when

00:07:16,730 --> 00:07:24,620
you do something you expect something to

00:07:19,550 --> 00:07:27,820
happen these tests are behavior driven

00:07:24,620 --> 00:07:31,750
development test that enable us to

00:07:27,820 --> 00:07:33,830
express the problem in terms that

00:07:31,750 --> 00:07:37,010
non-programmers can understand so our

00:07:33,830 --> 00:07:39,910
whole emphasis the major point to go

00:07:37,010 --> 00:07:43,340
away from this talk is to think how do I

00:07:39,910 --> 00:07:47,570
write something that non-programmers can

00:07:43,340 --> 00:07:50,150
use so we've got an idea here that when

00:07:47,570 --> 00:07:52,760
the tests required to be written you can

00:07:50,150 --> 00:07:55,820
get non-programmers to write these tests

00:07:52,760 --> 00:08:00,170
and have some examples here of the sort

00:07:55,820 --> 00:08:04,100
of tests that we wrote and particularly

00:08:00,170 --> 00:08:06,910
the idea of product patterns so that

00:08:04,100 --> 00:08:10,090
when you have something that is a

00:08:06,910 --> 00:08:12,350
discount you don't want to be

00:08:10,090 --> 00:08:13,640
programming every separate discount you

00:08:12,350 --> 00:08:17,330
want to say well how do we deal with

00:08:13,640 --> 00:08:20,060
discounts how do we deal with included

00:08:17,330 --> 00:08:23,090
products how do we deal with maximum

00:08:20,060 --> 00:08:27,530
number of things you can have so we just

00:08:23,090 --> 00:08:30,830
look quickly at a number of these

00:08:27,530 --> 00:08:33,260
scenarios so here's an included product

00:08:30,830 --> 00:08:37,780
test and here we were using a pattern of

00:08:33,260 --> 00:08:41,570
a sandwich bar found it very useful

00:08:37,780 --> 00:08:44,060
having the model expressed in simple

00:08:41,570 --> 00:08:46,430
terms so that when you came to some need

00:08:44,060 --> 00:08:48,320
to debug we could go into the code of

00:08:46,430 --> 00:08:50,450
the pattern and work out what was

00:08:48,320 --> 00:08:53,690
happening in the very simple case fix

00:08:50,450 --> 00:08:56,030
that and then our code would recognize

00:08:53,690 --> 00:08:59,660
the real example so here

00:08:56,030 --> 00:09:03,650
a given bacon sandwich includes tomato

00:08:59,660 --> 00:09:06,680
ketchup when I asked to purchase a bacon

00:09:03,650 --> 00:09:08,870
sandwich then tomato ketchup should

00:09:06,680 --> 00:09:13,930
automatically be added so we think of a

00:09:08,870 --> 00:09:18,230
parallel example and program that up

00:09:13,930 --> 00:09:21,470
here's a conditional product that given

00:09:18,230 --> 00:09:23,300
bacon sandwich with egg includes coffee

00:09:21,470 --> 00:09:24,980
you can imagine all the different

00:09:23,300 --> 00:09:27,230
scenarios that this could apply to

00:09:24,980 --> 00:09:30,200
you've got a number of products that

00:09:27,230 --> 00:09:33,050
have to include something else free of

00:09:30,200 --> 00:09:36,080
charge or it's a requirement for a

00:09:33,050 --> 00:09:38,390
customer to buy one of something when I

00:09:36,080 --> 00:09:40,880
asked for a bacon sandwich with an egg

00:09:38,390 --> 00:09:43,880
then coffee should automatically be

00:09:40,880 --> 00:09:47,930
added to my order some of the products

00:09:43,880 --> 00:09:51,980
are mandatory so in our example of the

00:09:47,930 --> 00:09:55,520
pattern here you can't have chicken ham

00:09:51,980 --> 00:09:56,630
or egg filling without the bread so it's

00:09:55,520 --> 00:09:58,580
a fairly obviously you wouldn't really

00:09:56,630 --> 00:10:00,470
want to say oh I'll just save on the

00:09:58,580 --> 00:10:05,600
bread can you put the egg mayonnaise in

00:10:00,470 --> 00:10:10,550
my hand it's reasonable to ask thee that

00:10:05,600 --> 00:10:13,120
the bread is a requirement you might

00:10:10,550 --> 00:10:16,340
want to prevent having too many

00:10:13,120 --> 00:10:18,590
different products so that you define a

00:10:16,340 --> 00:10:22,130
rule that says sandwich can have only

00:10:18,590 --> 00:10:25,070
one type of filling so when I ask for

00:10:22,130 --> 00:10:26,690
sandwich with chicken and bacon then I

00:10:25,070 --> 00:10:29,390
should be told I can have only one

00:10:26,690 --> 00:10:32,270
filling and these tests can then be

00:10:29,390 --> 00:10:36,920
written the point of cucumber or freshen

00:10:32,270 --> 00:10:40,220
is the tests are parsed by the Python

00:10:36,920 --> 00:10:42,680
code and turned automatically into

00:10:40,220 --> 00:10:46,370
behavior driven tests that we can run as

00:10:42,680 --> 00:10:49,250
part of the build process so it goes

00:10:46,370 --> 00:10:55,010
straight from a non developer writing

00:10:49,250 --> 00:10:57,950
the tests to a bill that either passes

00:10:55,010 --> 00:10:59,630
or fails which is a very useful process

00:10:57,950 --> 00:11:02,510
trying all the time to make ourselves

00:10:59,630 --> 00:11:05,060
redundant the only reason for further

00:11:02,510 --> 00:11:08,600
development work should be the business

00:11:05,060 --> 00:11:09,950
comes up with a new pattern so say they

00:11:08,600 --> 00:11:12,770
decide that

00:11:09,950 --> 00:11:14,810
there's a requirement to have three

00:11:12,770 --> 00:11:18,140
different types of cone three different

00:11:14,810 --> 00:11:21,620
types of tab on a Thursday if it's

00:11:18,140 --> 00:11:24,200
raining that will be a new pattern we'd

00:11:21,620 --> 00:11:26,720
have to program around but the standard

00:11:24,200 --> 00:11:29,240
patterns somebody wants to say right

00:11:26,720 --> 00:11:32,060
I've got a new included product to add

00:11:29,240 --> 00:11:33,860
to the range I've got a new maximum

00:11:32,060 --> 00:11:37,760
number of some things all these rules

00:11:33,860 --> 00:11:43,820
should be able to be processed by the

00:11:37,760 --> 00:11:46,400
engine one more here the max occurs test

00:11:43,820 --> 00:11:49,570
that they've decided to allow only a

00:11:46,400 --> 00:11:52,820
single squirt of ketchup and you're told

00:11:49,570 --> 00:11:55,280
that's the maximum um right I'm going to

00:11:52,820 --> 00:11:57,680
pass over to David lesen who is our

00:11:55,280 --> 00:12:00,290
product and pricing expert on the

00:11:57,680 --> 00:12:03,590
project he's a fellow contractor with me

00:12:00,290 --> 00:12:06,680
american expatriate Python developers

00:12:03,590 --> 00:12:08,030
scientific computing currently living

00:12:06,680 --> 00:12:11,600
and working in London and he will

00:12:08,030 --> 00:12:15,500
explain the background the other ways of

00:12:11,600 --> 00:12:19,000
doing things and why we are programming

00:12:15,500 --> 00:12:19,000
the way we are David

00:12:23,540 --> 00:12:28,470
so I typically work in non software

00:12:26,490 --> 00:12:30,570
houses doing things for for business

00:12:28,470 --> 00:12:33,210
people and trying to deliver the most

00:12:30,570 --> 00:12:34,770
value for their money which typically

00:12:33,210 --> 00:12:37,740
means making something that can be

00:12:34,770 --> 00:12:39,900
maintained by a non developer or someone

00:12:37,740 --> 00:12:42,660
far less skilled than the people that

00:12:39,900 --> 00:12:44,790
that developed it in the first place so

00:12:42,660 --> 00:12:48,180
what I'm going to talk about and rob's

00:12:44,790 --> 00:12:49,740
given us a great introduction is you

00:12:48,180 --> 00:12:51,720
know how do you let the the business

00:12:49,740 --> 00:12:55,290
express things the way that they think

00:12:51,720 --> 00:12:57,150
of things as Rob said before when the

00:12:55,290 --> 00:12:59,910
business wants to make a change there's

00:12:57,150 --> 00:13:02,220
a lot of time constraints on it

00:12:59,910 --> 00:13:05,340
typically because other competitors are

00:13:02,220 --> 00:13:06,480
trying to do the same thing or you know

00:13:05,340 --> 00:13:09,210
there's just something else on the

00:13:06,480 --> 00:13:11,850
docket and it we want to kind of stream

00:13:09,210 --> 00:13:16,440
load the streamline the usual process of

00:13:11,850 --> 00:13:21,590
going through and delivering modeling

00:13:16,440 --> 00:13:24,480
changes so speed the market is key here

00:13:21,590 --> 00:13:26,970
basically especially as Python

00:13:24,480 --> 00:13:29,310
developers what we're really selling is

00:13:26,970 --> 00:13:30,930
speed to market we can deliver things

00:13:29,310 --> 00:13:33,210
faster than developers and other

00:13:30,930 --> 00:13:35,160
languages typically can so that's what

00:13:33,210 --> 00:13:38,040
we really want to be be selling to our

00:13:35,160 --> 00:13:41,250
client our ability to deliver abel's

00:13:38,040 --> 00:13:44,910
fast so if you look for the typical

00:13:41,250 --> 00:13:47,340
workflow so basically product life time

00:13:44,910 --> 00:13:49,080
management is a multi-billion dollar

00:13:47,340 --> 00:13:52,350
industry there's lots of commercial

00:13:49,080 --> 00:13:56,520
solutions out there and and and many non

00:13:52,350 --> 00:13:58,440
commercial solutions but typically where

00:13:56,520 --> 00:13:59,910
you say these are my rules these are how

00:13:58,440 --> 00:14:02,340
I price things these are things that are

00:13:59,910 --> 00:14:04,230
expressed in the code or through

00:14:02,340 --> 00:14:06,840
something that's different and separate

00:14:04,230 --> 00:14:08,430
from the actual modeling of the product

00:14:06,840 --> 00:14:09,540
so when you want to make a change the

00:14:08,430 --> 00:14:11,640
first thing that happens is that the

00:14:09,540 --> 00:14:14,340
sales and marketing people dream up some

00:14:11,640 --> 00:14:16,530
new promotion or they've come up with

00:14:14,340 --> 00:14:17,670
some new product on the difference being

00:14:16,530 --> 00:14:20,370
that when you have a new product line

00:14:17,670 --> 00:14:21,720
typically you know it's coming promotion

00:14:20,370 --> 00:14:23,700
might be something that comes to

00:14:21,720 --> 00:14:28,050
somebody in their sleep and they want to

00:14:23,700 --> 00:14:30,270
get it out fast alright so the next

00:14:28,050 --> 00:14:31,980
thing that happens is that the the

00:14:30,270 --> 00:14:34,710
people who actually do the putting

00:14:31,980 --> 00:14:35,640
things in the model typing it in you

00:14:34,710 --> 00:14:37,380
need to Alec

00:14:35,640 --> 00:14:39,330
one of those resources actually go in

00:14:37,380 --> 00:14:42,090
and make the the configuration change

00:14:39,330 --> 00:14:43,590
now there's a lot of work from various

00:14:42,090 --> 00:14:45,600
commercial products to make this

00:14:43,590 --> 00:14:47,430
something that and an end business user

00:14:45,600 --> 00:14:49,380
can do so you don't really need a

00:14:47,430 --> 00:14:51,270
technical person so this might be in the

00:14:49,380 --> 00:14:53,190
same team but where they seem to fall

00:14:51,270 --> 00:14:56,010
down on is is the next thing that since

00:14:53,190 --> 00:14:58,260
since how it is that we deal with the

00:14:56,010 --> 00:14:59,850
model is not in the model itself and

00:14:58,260 --> 00:15:01,770
can't be interpreted from the model

00:14:59,850 --> 00:15:03,210
itself you then need to pass this off to

00:15:01,770 --> 00:15:04,860
somebody who needs to actually make

00:15:03,210 --> 00:15:07,020
changes in the code so this is typically

00:15:04,860 --> 00:15:08,790
going to be a developer now this might

00:15:07,020 --> 00:15:10,410
have been extracted by the the product

00:15:08,790 --> 00:15:13,380
that's been bought by just simply

00:15:10,410 --> 00:15:15,930
putting in new operators and

00:15:13,380 --> 00:15:18,570
determinants in order to evaluate things

00:15:15,930 --> 00:15:21,390
differently and we'll talk about what

00:15:18,570 --> 00:15:22,590
those things typically look like and

00:15:21,390 --> 00:15:26,910
then the next thing that has to happen

00:15:22,590 --> 00:15:29,190
is is you got to pass things off to the

00:15:26,910 --> 00:15:30,870
test team that have it verified and a

00:15:29,190 --> 00:15:33,450
lot of us are very familiar with agile

00:15:30,870 --> 00:15:34,470
we're doing test-driven development so

00:15:33,450 --> 00:15:36,600
this is something that we already have

00:15:34,470 --> 00:15:38,460
streamlined we've got a huge Bank of

00:15:36,600 --> 00:15:40,710
unit tests behavior-driven tests and

00:15:38,460 --> 00:15:43,170
what Rob showed you was the pattern

00:15:40,710 --> 00:15:45,300
tests and that's actually that's

00:15:43,170 --> 00:15:49,230
actually some examples of actual pattern

00:15:45,300 --> 00:15:51,450
tests we use so that's something that

00:15:49,230 --> 00:15:54,180
can happen really quickly so let's talk

00:15:51,450 --> 00:15:56,040
about how we express the rules how rules

00:15:54,180 --> 00:16:00,870
are typically expressed in various

00:15:56,040 --> 00:16:03,000
solutions now basically what's happened

00:16:00,870 --> 00:16:04,740
is that every developer their first

00:16:03,000 --> 00:16:06,510
thought is okay well we need to

00:16:04,740 --> 00:16:08,370
interpret rules this is something that's

00:16:06,510 --> 00:16:10,740
been done for several you know since the

00:16:08,370 --> 00:16:12,870
60s we'll just invent our own domain

00:16:10,740 --> 00:16:15,540
specific language that absolutely no one

00:16:12,870 --> 00:16:17,220
can read it might be in reverse polish

00:16:15,540 --> 00:16:21,600
notation I've seen this in a lot of very

00:16:17,220 --> 00:16:23,220
popular products and you can see here

00:16:21,600 --> 00:16:25,320
that what I've listed some of the

00:16:23,220 --> 00:16:26,970
problems is that rules can be expressed

00:16:25,320 --> 00:16:28,800
in very ambiguous ways because you've

00:16:26,970 --> 00:16:30,240
expressed them in some operator it's

00:16:28,800 --> 00:16:33,630
done by a developer the naming

00:16:30,240 --> 00:16:35,610
conventions may be bad but here you know

00:16:33,630 --> 00:16:37,680
relating back to the ice cream okay if I

00:16:35,610 --> 00:16:40,050
have a tub if I'm one of those giant

00:16:37,680 --> 00:16:42,210
tubs that Rob was showing us then I need

00:16:40,050 --> 00:16:44,820
at least two scoops the ordinary of the

00:16:42,210 --> 00:16:47,370
scoops needs to be too now you look at

00:16:44,820 --> 00:16:50,610
that and you think okay you know that

00:16:47,370 --> 00:16:53,010
that should be just 24 for that

00:16:50,610 --> 00:16:54,930
particular tub not for the order at

00:16:53,010 --> 00:16:56,850
large but who knows unless I'm

00:16:54,930 --> 00:16:58,440
intimately familiar with the inner

00:16:56,850 --> 00:17:00,839
workings of this domain specific

00:16:58,440 --> 00:17:04,050
language as business user I'm not going

00:17:00,839 --> 00:17:05,520
to know and as soon as I had I'm not

00:17:04,050 --> 00:17:06,900
confident that what I was going to i'm

00:17:05,520 --> 00:17:09,059
going to put in is going to act the way

00:17:06,900 --> 00:17:11,040
that I want it to I'm going to simply

00:17:09,059 --> 00:17:13,140
defer the problem to a technical person

00:17:11,040 --> 00:17:16,230
and what that means is that now I have

00:17:13,140 --> 00:17:18,000
to spend time actually allocating a

00:17:16,230 --> 00:17:19,709
resource to that there can be a

00:17:18,000 --> 00:17:22,350
bureaucracy to that there might not be

00:17:19,709 --> 00:17:24,510
available resources that mean that that

00:17:22,350 --> 00:17:27,030
it can't be done the timeline where the

00:17:24,510 --> 00:17:28,559
the actual promotion has value and the

00:17:27,030 --> 00:17:32,070
whole project gets scrapped for

00:17:28,559 --> 00:17:33,809
something as silly as this the same

00:17:32,070 --> 00:17:36,350
rules can often be expressed in multiple

00:17:33,809 --> 00:17:40,020
ways so here's another way to write it

00:17:36,350 --> 00:17:41,940
this is a concept that you see a lot in

00:17:40,020 --> 00:17:43,350
these domain-specific languages is they

00:17:41,940 --> 00:17:45,630
just simply say that one product

00:17:43,350 --> 00:17:49,350
requires another product or another

00:17:45,630 --> 00:17:52,490
another grouping of products so this

00:17:49,350 --> 00:17:55,260
just says here oh if i buy a tub it

00:17:52,490 --> 00:17:59,130
requires that that this other fact be

00:17:55,260 --> 00:18:03,059
satisfied so I'm going to show you a few

00:17:59,130 --> 00:18:05,010
more examples of bad things sometimes

00:18:03,059 --> 00:18:06,570
when you want one single behavior so

00:18:05,010 --> 00:18:09,720
something that in the business they have

00:18:06,570 --> 00:18:12,630
a concept for this there's a concept of

00:18:09,720 --> 00:18:14,490
oh I i have an includes relationship i

00:18:12,630 --> 00:18:15,750
have a max dependency relationship the

00:18:14,490 --> 00:18:17,580
sort of things that Rob was talking

00:18:15,750 --> 00:18:19,800
about they have one single business

00:18:17,580 --> 00:18:22,429
concept for it but multiple rules are

00:18:19,800 --> 00:18:25,650
needed in order to actually put this in

00:18:22,429 --> 00:18:27,210
so you see here that you know some the

00:18:25,650 --> 00:18:29,370
business comes to you and they say okay

00:18:27,210 --> 00:18:31,860
well you know we want to say if you get

00:18:29,370 --> 00:18:34,200
three or more scoops of ice cream that

00:18:31,860 --> 00:18:36,210
you should get free sprinkles you know

00:18:34,200 --> 00:18:37,890
and then then you you ask your product

00:18:36,210 --> 00:18:39,780
under you say oh just sprinkles I mean

00:18:37,890 --> 00:18:41,700
certainly you know any time I buy ice

00:18:39,780 --> 00:18:44,160
cream I'm allowed to make substitutions

00:18:41,700 --> 00:18:47,790
that are reasonable you know would it be

00:18:44,160 --> 00:18:52,260
okay if if they had pineapple bit sore

00:18:47,790 --> 00:18:54,660
hot fudge and they say oh yeah sure so

00:18:52,260 --> 00:18:56,310
these three rules go in and God knows

00:18:54,660 --> 00:18:57,990
what the side effects of doing this is

00:18:56,310 --> 00:18:59,789
but it satisfies the requirement at the

00:18:57,990 --> 00:19:01,559
time and it

00:18:59,789 --> 00:19:06,239
the next developers problem the deal

00:19:01,559 --> 00:19:08,009
with the next set of requirements and so

00:19:06,239 --> 00:19:09,419
they come they come to me the next day

00:19:08,009 --> 00:19:10,769
and they say okay we're going to

00:19:09,419 --> 00:19:12,389
introduce a new product and it's the

00:19:10,769 --> 00:19:13,859
Tuesday sprinkle special they've half

00:19:12,389 --> 00:19:15,059
the house wrinkles but otherwise it

00:19:13,859 --> 00:19:18,269
doesn't make any sense it's a sprinkle

00:19:15,059 --> 00:19:19,619
special so I put in my new rule maybe

00:19:18,269 --> 00:19:22,019
I'm a different developer maybe I don't

00:19:19,619 --> 00:19:24,450
know what I've done before in order to

00:19:22,019 --> 00:19:27,479
satisfy previous business requirements

00:19:24,450 --> 00:19:29,519
and so I set here that oh well this

00:19:27,479 --> 00:19:32,820
requires sprinkles but but up above I've

00:19:29,519 --> 00:19:34,529
said well you know pineapple bits that's

00:19:32,820 --> 00:19:37,499
the same as if I had sprinkles there

00:19:34,529 --> 00:19:39,659
it's the same in any context and

00:19:37,499 --> 00:19:41,729
depending on how this domain specific

00:19:39,659 --> 00:19:43,710
language is interpreted I might be able

00:19:41,729 --> 00:19:45,269
to get the Tuesday sprinkle special with

00:19:43,710 --> 00:19:47,070
something other than sprinkles and then

00:19:45,269 --> 00:19:49,049
the business says that that's a no-no so

00:19:47,070 --> 00:19:51,720
now I'm going to have to refactor all

00:19:49,049 --> 00:19:53,580
the rules in the entire rule engine just

00:19:51,720 --> 00:19:56,340
to get this one new new thing in and

00:19:53,580 --> 00:19:58,259
I've personally supporting enterprise

00:19:56,340 --> 00:20:01,320
software have been in this situation

00:19:58,259 --> 00:20:03,090
more than one time and it isn't fun

00:20:01,320 --> 00:20:04,649
because the business SEO will why is

00:20:03,090 --> 00:20:09,690
this taking so long it's only a simple

00:20:04,649 --> 00:20:11,399
change okay so you might think oh you

00:20:09,690 --> 00:20:13,019
look at my examples well that's just a

00:20:11,399 --> 00:20:14,220
really crappy domain-specific language

00:20:13,019 --> 00:20:15,809
you should just build a better one and

00:20:14,220 --> 00:20:17,190
you know I should build a better one and

00:20:15,809 --> 00:20:18,840
people have been building better ones

00:20:17,190 --> 00:20:20,399
progressively for years and years and

00:20:18,840 --> 00:20:23,909
years and they still are complete crap

00:20:20,399 --> 00:20:25,979
and the the basic reason for this is

00:20:23,909 --> 00:20:27,210
that you know we're we're programmers we

00:20:25,979 --> 00:20:28,799
think of things in a different way the

00:20:27,210 --> 00:20:31,559
business people think of things in

00:20:28,799 --> 00:20:34,080
different ways and it's just it gives

00:20:31,559 --> 00:20:35,849
the business a degree of freedom that

00:20:34,080 --> 00:20:37,619
that perhaps they shouldn't have it

00:20:35,849 --> 00:20:39,690
gives it you know it's just like when

00:20:37,619 --> 00:20:41,340
you go from using a Mac to using Linux

00:20:39,690 --> 00:20:45,809
there's there's possibly things that you

00:20:41,340 --> 00:20:47,460
could do that you shouldn't do you know

00:20:45,809 --> 00:20:50,070
and and so you sort of need the

00:20:47,460 --> 00:20:52,229
gradually you know get down the level of

00:20:50,070 --> 00:20:54,809
I have more power because I've displayed

00:20:52,229 --> 00:20:57,690
more responsibility all right but this

00:20:54,809 --> 00:21:01,349
isn't going to happen this is this is

00:20:57,690 --> 00:21:03,119
the this is the the level of you need to

00:21:01,349 --> 00:21:05,070
decide how much control you're going to

00:21:03,119 --> 00:21:07,320
give them and from my experiences I'd

00:21:05,070 --> 00:21:09,029
say you want them to be very very

00:21:07,320 --> 00:21:10,169
confident in what they're going to be

00:21:09,029 --> 00:21:11,550
doing so you want to make it quite

00:21:10,169 --> 00:21:14,710
limited

00:21:11,550 --> 00:21:15,400
so what's the alternative if we're not

00:21:14,710 --> 00:21:18,130
going to write a domain-specific

00:21:15,400 --> 00:21:21,190
language if we want to keep things

00:21:18,130 --> 00:21:22,420
flexible what what do we do well the

00:21:21,190 --> 00:21:24,880
first thing that we can do is we can

00:21:22,420 --> 00:21:27,670
represent our products as a graph now

00:21:24,880 --> 00:21:29,140
typically you always represent your

00:21:27,670 --> 00:21:30,280
products in a particular hierarchy

00:21:29,140 --> 00:21:32,320
because you're going to group them in

00:21:30,280 --> 00:21:33,550
some way you're always going to say well

00:21:32,320 --> 00:21:36,880
these are the things that are in cones

00:21:33,550 --> 00:21:38,200
these are the things that are in in cups

00:21:36,880 --> 00:21:40,510
and these are the things that are in

00:21:38,200 --> 00:21:42,580
something else and you're constantly

00:21:40,510 --> 00:21:43,750
going to be refactoring like how it is

00:21:42,580 --> 00:21:45,310
that you use that and you want to do

00:21:43,750 --> 00:21:46,750
that the way that the business looks at

00:21:45,310 --> 00:21:51,580
it not the way that's easiest for you

00:21:46,750 --> 00:21:53,920
the program um so you know if you if you

00:21:51,580 --> 00:21:55,870
have if you have that big maxi cone that

00:21:53,920 --> 00:21:56,980
we saw before that that's also in a cone

00:21:55,870 --> 00:21:58,360
but does it really need to be under

00:21:56,980 --> 00:22:00,250
cones because we know it's gonna it's

00:21:58,360 --> 00:22:01,360
gonna behave in a different way it's

00:22:00,250 --> 00:22:02,650
something that the business sees in a

00:22:01,360 --> 00:22:04,330
different way this is something extra

00:22:02,650 --> 00:22:06,340
that you're giving the customer so

00:22:04,330 --> 00:22:07,240
you're really going to have to parents

00:22:06,340 --> 00:22:09,130
so it's not going to be a strike

00:22:07,240 --> 00:22:11,410
hierarchy all the time that's not the

00:22:09,130 --> 00:22:13,030
way that people think see things and if

00:22:11,410 --> 00:22:14,830
you try and take the way that the

00:22:13,030 --> 00:22:16,390
business is looking at it and shove it

00:22:14,830 --> 00:22:17,830
into some other format you're just

00:22:16,390 --> 00:22:18,820
asking for trouble because then they're

00:22:17,830 --> 00:22:20,650
going to start expressing your

00:22:18,820 --> 00:22:24,010
requirements to you in ways that don't

00:22:20,650 --> 00:22:26,500
make any sense so I say let's represent

00:22:24,010 --> 00:22:28,450
our products as graphs because that's

00:22:26,500 --> 00:22:30,790
what they are yeah graph is something

00:22:28,450 --> 00:22:32,110
that has nodes and has edges and those

00:22:30,790 --> 00:22:34,180
nodes are your products and your

00:22:32,110 --> 00:22:36,340
groupings of products and maybe if you

00:22:34,180 --> 00:22:39,160
have some sort of abstract concept of

00:22:36,340 --> 00:22:41,170
charges or or even rules other things

00:22:39,160 --> 00:22:43,570
that you need those things are all nodes

00:22:41,170 --> 00:22:45,940
and everything else you should be able

00:22:43,570 --> 00:22:47,950
to express just simply by expressing

00:22:45,940 --> 00:22:50,950
some relationship between any two of

00:22:47,950 --> 00:22:54,010
those things and that's an edge and it

00:22:50,950 --> 00:22:56,470
has attributes and everything else you

00:22:54,010 --> 00:23:03,310
can you can enter infer from from that

00:22:56,470 --> 00:23:05,890
model so here's a really really bad way

00:23:03,310 --> 00:23:08,230
of displaying the ice cream products i

00:23:05,890 --> 00:23:10,570
used aya and through this look together

00:23:08,230 --> 00:23:12,130
pretty quickly but the rules that i was

00:23:10,570 --> 00:23:14,920
talking about her actually displayed

00:23:12,130 --> 00:23:16,000
here minus the attributes because i

00:23:14,920 --> 00:23:17,890
don't have a nice way of really

00:23:16,000 --> 00:23:19,330
displaying those but you've got your I

00:23:17,890 --> 00:23:21,010
securing products you might divide them

00:23:19,330 --> 00:23:22,660
up into your stand 'old standard things

00:23:21,010 --> 00:23:23,970
in your specialties and then you you

00:23:22,660 --> 00:23:26,970
have your ala carte which I've

00:23:23,970 --> 00:23:29,280
horribly misspelled there and you've got

00:23:26,970 --> 00:23:30,960
your your concept of scoops and your

00:23:29,280 --> 00:23:34,470
toppings and everything's represented

00:23:30,960 --> 00:23:38,670
there and everything's together you've

00:23:34,470 --> 00:23:41,460
got your your maxi cone being being

00:23:38,670 --> 00:23:43,500
derived from two other things there and

00:23:41,460 --> 00:23:46,170
you know as a business person you can

00:23:43,500 --> 00:23:48,420
you can open up this sort of graph in

00:23:46,170 --> 00:23:51,330
reality it might be very very large but

00:23:48,420 --> 00:23:52,860
if you zoom in to where the context is

00:23:51,330 --> 00:23:54,800
that you want you get to see all the

00:23:52,860 --> 00:23:57,690
relationships and you get to see things

00:23:54,800 --> 00:23:59,130
that are or are not feasible or maybe

00:23:57,690 --> 00:24:01,230
things that you've modeled wrong

00:23:59,130 --> 00:24:03,180
incorrectly so here have actually done

00:24:01,230 --> 00:24:05,220
things that are a little different so

00:24:03,180 --> 00:24:07,440
the thought the black lines just show

00:24:05,220 --> 00:24:08,760
the hierarchy so that in terms of how it

00:24:07,440 --> 00:24:10,230
is that you're grouping products and

00:24:08,760 --> 00:24:13,110
things like that nothing special there

00:24:10,230 --> 00:24:15,120
I've used a blue line for saying that

00:24:13,110 --> 00:24:16,830
these required rules that I have put in

00:24:15,120 --> 00:24:19,170
before which means if I get this I have

00:24:16,830 --> 00:24:21,420
to have this here and the green is the

00:24:19,170 --> 00:24:24,720
includes which is you know if if I do

00:24:21,420 --> 00:24:26,100
buy this I can get get this for free now

00:24:24,720 --> 00:24:29,160
some of the differences that I've made

00:24:26,100 --> 00:24:31,980
here is that instead of saying oh well

00:24:29,160 --> 00:24:33,720
my my I had a rule before that said well

00:24:31,980 --> 00:24:35,580
if I if I order something in a tub I

00:24:33,720 --> 00:24:37,530
have to get more than two scoops of ice

00:24:35,580 --> 00:24:40,020
cream that's a requirement I'm required

00:24:37,530 --> 00:24:42,810
to have more than two scoops but as soon

00:24:40,020 --> 00:24:44,970
as I actually started making this graph

00:24:42,810 --> 00:24:46,620
I realized oh wait you know that also

00:24:44,970 --> 00:24:48,330
applies to the maxi cone it's back in

00:24:46,620 --> 00:24:51,360
fact you know all the specialties are

00:24:48,330 --> 00:24:53,430
big items and so really the relationship

00:24:51,360 --> 00:24:55,230
should be anything that's a specialty

00:24:53,430 --> 00:24:56,640
should have to have at least two scoops

00:24:55,230 --> 00:24:59,460
so immediately once I put it in this

00:24:56,640 --> 00:25:02,670
form I'm able to visualize things that I

00:24:59,460 --> 00:25:04,350
got wrong before and equally we see that

00:25:02,670 --> 00:25:06,690
you know you get a certain number of

00:25:04,350 --> 00:25:07,800
scoops the numbers are the things they

00:25:06,690 --> 00:25:10,470
hear that you'd have to put on the

00:25:07,800 --> 00:25:12,120
attributes of that relationship and that

00:25:10,470 --> 00:25:13,350
would be the sort of pattern that you'd

00:25:12,120 --> 00:25:14,820
be defining the things that you'd be

00:25:13,350 --> 00:25:15,930
looking for that you be saying the

00:25:14,820 --> 00:25:18,740
business this is something that we

00:25:15,930 --> 00:25:21,120
accept this is how we interpret it and

00:25:18,740 --> 00:25:22,650
then when I put in my Tuesday sprinkle

00:25:21,120 --> 00:25:24,510
special I can just put in another

00:25:22,650 --> 00:25:26,670
includes and put it the toppings and now

00:25:24,510 --> 00:25:28,080
here you can see what I've done and you

00:25:26,670 --> 00:25:30,150
most of you have probably already

00:25:28,080 --> 00:25:32,340
realized this is I've drawn the line

00:25:30,150 --> 00:25:35,010
from the the Tuesday sprinkle special

00:25:32,340 --> 00:25:37,530
directly up to toppings but we've said

00:25:35,010 --> 00:25:37,710
it's only sprinkles so we can see here

00:25:37,530 --> 00:25:39,990
that

00:25:37,710 --> 00:25:42,120
it's clearly wrong and it's immediately

00:25:39,990 --> 00:25:49,409
obvious to everyone regardless of their

00:25:42,120 --> 00:25:50,880
level of technical ability so as I said

00:25:49,409 --> 00:25:52,799
before it's a big business doing this

00:25:50,880 --> 00:25:54,270
sort of product modeling so what we're

00:25:52,799 --> 00:25:55,649
not doing is a part of our project and

00:25:54,270 --> 00:25:57,120
what we're not talking about here is

00:25:55,649 --> 00:25:59,820
actually how you do this product

00:25:57,120 --> 00:26:02,070
lifecycle management and obviously I you

00:25:59,820 --> 00:26:03,299
know that just having a diagram of a

00:26:02,070 --> 00:26:05,190
graph isn't something that you want to

00:26:03,299 --> 00:26:07,830
give to the business users for for

00:26:05,190 --> 00:26:09,000
multiple reasons you want something

00:26:07,830 --> 00:26:11,970
that's graphical that they can

00:26:09,000 --> 00:26:14,549
manipulate that they can use the define

00:26:11,970 --> 00:26:16,890
these things there's a number of things

00:26:14,549 --> 00:26:19,890
available SI p has a product lifetime

00:26:16,890 --> 00:26:23,580
management we use a smaller vendor that

00:26:19,890 --> 00:26:26,820
we can't really mention but these things

00:26:23,580 --> 00:26:29,070
exist you could easily write a graphical

00:26:26,820 --> 00:26:30,990
library put a UI on top of it and allow

00:26:29,070 --> 00:26:32,460
people to put it in there but you

00:26:30,990 --> 00:26:35,850
wouldn't have the sort of really

00:26:32,460 --> 00:26:37,830
polished user interface immediately that

00:26:35,850 --> 00:26:38,880
the business really likes and again you

00:26:37,830 --> 00:26:40,710
know if you find if you have something

00:26:38,880 --> 00:26:42,600
that's difficult to use or the business

00:26:40,710 --> 00:26:43,950
isn't confident that it'll it behaves in

00:26:42,600 --> 00:26:45,419
the way that they want it to they're

00:26:43,950 --> 00:26:48,330
simply going to defer it to a technical

00:26:45,419 --> 00:26:50,669
person and then you've kind of lost the

00:26:48,330 --> 00:26:54,450
the whole point of doing the project in

00:26:50,669 --> 00:26:56,940
this way so what we've managed to do is

00:26:54,450 --> 00:26:58,799
move the the complexity from the actual

00:26:56,940 --> 00:27:01,260
interpretation so from the modeling and

00:26:58,799 --> 00:27:03,450
the pricing engine and move it to the

00:27:01,260 --> 00:27:05,610
way things that are expressed and by

00:27:03,450 --> 00:27:08,789
being able to move that complexity there

00:27:05,610 --> 00:27:10,710
we can abstract the complexity they

00:27:08,789 --> 00:27:13,200
don't need to know how it is that we've

00:27:10,710 --> 00:27:15,630
implemented this particular inclusive

00:27:13,200 --> 00:27:17,850
rule how that behaves they don't need to

00:27:15,630 --> 00:27:19,799
know they just need to say this this

00:27:17,850 --> 00:27:22,409
relate this product relates to this

00:27:19,799 --> 00:27:24,390
product as an inclusion this is an

00:27:22,409 --> 00:27:27,419
inclusive product that's all they have

00:27:24,390 --> 00:27:29,580
to say and that gives you a lot of a lot

00:27:27,419 --> 00:27:32,520
of flexibility between the model and the

00:27:29,580 --> 00:27:34,409
interpretation of the model in fact the

00:27:32,520 --> 00:27:36,630
way that we've written this because

00:27:34,409 --> 00:27:40,320
everything so model-driven we could

00:27:36,630 --> 00:27:42,120
actually code up in XML so basically

00:27:40,320 --> 00:27:44,789
there's a publishing mechanism from the

00:27:42,120 --> 00:27:46,980
modeling product we do use which gives

00:27:44,789 --> 00:27:50,429
things out as XML that we then map back

00:27:46,980 --> 00:27:51,620
to a graph internally we could just as

00:27:50,429 --> 00:27:53,940
easily go to a data

00:27:51,620 --> 00:27:58,410
just anything that will give us the

00:27:53,940 --> 00:28:00,780
information about the model but we could

00:27:58,410 --> 00:28:02,310
actually get that XML program it up with

00:28:00,780 --> 00:28:05,940
the ice cream example that we've shown

00:28:02,310 --> 00:28:08,730
you and we are very confident that it

00:28:05,940 --> 00:28:10,620
will just work as you saw from the test

00:28:08,730 --> 00:28:12,990
that we had before with the bacon

00:28:10,620 --> 00:28:15,180
sandwich in the tomato that's actual

00:28:12,990 --> 00:28:17,220
code that we run so that's one way that

00:28:15,180 --> 00:28:18,750
we we test that everything really is

00:28:17,220 --> 00:28:21,810
model-driven is to put it in a

00:28:18,750 --> 00:28:24,620
completely different context and see

00:28:21,810 --> 00:28:29,100
that everything still works as as as as

00:28:24,620 --> 00:28:32,010
we expect it also allows us since we've

00:28:29,100 --> 00:28:33,450
defined those pattern tests we can point

00:28:32,010 --> 00:28:36,570
the business to say well these are the

00:28:33,450 --> 00:28:37,920
actual patterns that we that we support

00:28:36,570 --> 00:28:40,290
these are the things that you can go and

00:28:37,920 --> 00:28:42,510
put in the model and we can guarantee

00:28:40,290 --> 00:28:44,520
that that's it's just going to work the

00:28:42,510 --> 00:28:46,010
way that all the others worked and it's

00:28:44,520 --> 00:28:49,410
only when something's very like very

00:28:46,010 --> 00:28:56,310
logically different that we have to put

00:28:49,410 --> 00:28:59,220
in a new pattern oh it also gives us the

00:28:56,310 --> 00:29:00,960
ability if if we if we find a pattern

00:28:59,220 --> 00:29:03,030
that's actually the composite of other

00:29:00,960 --> 00:29:05,970
patterns so you you have some business

00:29:03,030 --> 00:29:07,800
concept where it really means oh you you

00:29:05,970 --> 00:29:09,630
require this product and you exclude

00:29:07,800 --> 00:29:11,340
some other products or something that

00:29:09,630 --> 00:29:12,990
you could imagine just being a composite

00:29:11,340 --> 00:29:14,790
of things that we already have we can

00:29:12,990 --> 00:29:17,670
allow them in the model to express it in

00:29:14,790 --> 00:29:18,990
a new way and then behind the scenes

00:29:17,670 --> 00:29:20,520
just deal with it the same way that we

00:29:18,990 --> 00:29:23,100
always have and then the business is

00:29:20,520 --> 00:29:26,790
happy they don't have more rope than

00:29:23,100 --> 00:29:28,530
they can handle and and we're happy in

00:29:26,790 --> 00:29:30,530
the background because we have to do

00:29:28,530 --> 00:29:33,270
very very little to get that to market

00:29:30,530 --> 00:29:34,650
now one thing I want to speak very

00:29:33,270 --> 00:29:39,150
briefly about is how you should

00:29:34,650 --> 00:29:42,600
interpret rules and basically the the

00:29:39,150 --> 00:29:45,540
seminal work on this is is listed up

00:29:42,600 --> 00:29:47,370
here by Charles for you and it's it's

00:29:45,540 --> 00:29:48,900
the reit algorithm so this is this is

00:29:47,370 --> 00:29:51,270
going way back to the 80s when people

00:29:48,900 --> 00:29:53,070
were doing expert systems and and having

00:29:51,270 --> 00:29:56,100
computers that would would figure things

00:29:53,070 --> 00:29:59,250
out by just a rules-based system the

00:29:56,100 --> 00:30:02,760
only thing that I really want you two to

00:29:59,250 --> 00:30:04,800
get from this is that if you if you go

00:30:02,760 --> 00:30:05,270
into a say a grocery store and you start

00:30:04,800 --> 00:30:08,450
looking

00:30:05,270 --> 00:30:10,280
at people's shopping carts now in the

00:30:08,450 --> 00:30:14,090
store they have hundreds upon hundreds

00:30:10,280 --> 00:30:16,040
of various products and yet you'll see a

00:30:14,090 --> 00:30:17,990
lot of similarities between the shopping

00:30:16,040 --> 00:30:20,360
baskets that you see people typically go

00:30:17,990 --> 00:30:35,420
and buy milk bread eggs butter these

00:30:20,360 --> 00:30:36,950
things um sorry that means i'm not i'm

00:30:35,420 --> 00:30:38,570
not going to keep you guys guys from

00:30:36,950 --> 00:30:40,460
lunch i'm going to really try the to

00:30:38,570 --> 00:30:42,710
zoom through the rest of this anyway so

00:30:40,460 --> 00:30:44,330
what you're going to realize is that the

00:30:42,710 --> 00:30:47,270
differences between people what people

00:30:44,330 --> 00:30:49,700
buy and your entire product catalog is

00:30:47,270 --> 00:30:51,890
very very very small because most people

00:30:49,700 --> 00:30:53,900
don't buy go in and buy you know 12 of

00:30:51,890 --> 00:30:56,600
everything in the store they go in and

00:30:53,900 --> 00:30:58,490
buy a select group of products and the

00:30:56,600 --> 00:30:59,990
people after them by you know many of

00:30:58,490 --> 00:31:02,060
those same products because some things

00:30:59,990 --> 00:31:04,490
are wildly more popular than others and

00:31:02,060 --> 00:31:07,130
Charles for you realize this that when

00:31:04,490 --> 00:31:09,410
you're designing a rule system and the

00:31:07,130 --> 00:31:12,140
way that I believe that he put it was

00:31:09,410 --> 00:31:14,690
that the even though the rules don't

00:31:12,140 --> 00:31:17,150
change the majority of the facts don't

00:31:14,690 --> 00:31:20,150
change either the facts of what what it

00:31:17,150 --> 00:31:22,550
is that they've bought change in a much

00:31:20,150 --> 00:31:25,640
smaller proportion so the idea is

00:31:22,550 --> 00:31:29,270
basically that you then create a graph

00:31:25,640 --> 00:31:32,030
of the actual conditions for a

00:31:29,270 --> 00:31:33,860
particular rule applying and what

00:31:32,030 --> 00:31:35,800
happens is that you have conditions that

00:31:33,860 --> 00:31:38,510
are composed of other conditions and

00:31:35,800 --> 00:31:39,830
those composite conditions may be used

00:31:38,510 --> 00:31:42,160
for some rules whereas you have to

00:31:39,830 --> 00:31:44,150
compose it with another composite

00:31:42,160 --> 00:31:46,760
condition in order to get it to go so

00:31:44,150 --> 00:31:50,390
here what we've modeled as a graph here

00:31:46,760 --> 00:31:51,740
is that if I do x and y together it

00:31:50,390 --> 00:31:53,690
might trigger some set of rules that I

00:31:51,740 --> 00:31:56,870
haven't actually put in this graph but

00:31:53,690 --> 00:31:58,550
if I also put Z then this particular

00:31:56,870 --> 00:32:02,170
rule that's down here at the bottom foo

00:31:58,550 --> 00:32:04,340
is going to be triggered all right now

00:32:02,170 --> 00:32:06,620
you're asking yourself oh this doesn't

00:32:04,340 --> 00:32:07,940
make sense you know what do you what do

00:32:06,620 --> 00:32:09,470
you what do you mean by all this why

00:32:07,940 --> 00:32:10,970
would you why would you do this even if

00:32:09,470 --> 00:32:13,790
you know that the facts aren't wildly

00:32:10,970 --> 00:32:15,770
changing or wildly different from

00:32:13,790 --> 00:32:17,870
request to the request why are you doing

00:32:15,770 --> 00:32:19,049
these things because it's always our gut

00:32:17,870 --> 00:32:21,690
instinct if you go in

00:32:19,049 --> 00:32:23,429
Oh gramma rules engine very naively what

00:32:21,690 --> 00:32:24,539
you do is you say okay here's the things

00:32:23,429 --> 00:32:26,519
that they've bought here's the first

00:32:24,539 --> 00:32:28,590
product oh well what type of product is

00:32:26,519 --> 00:32:30,389
this is it this type of product oh if so

00:32:28,590 --> 00:32:32,730
you know go over here and do this

00:32:30,389 --> 00:32:34,200
function if it's this time else if it's

00:32:32,730 --> 00:32:35,940
this type of product go over here and do

00:32:34,200 --> 00:32:37,379
these things and if it's that type of

00:32:35,940 --> 00:32:40,409
product do that things what you're

00:32:37,379 --> 00:32:42,929
basically doing is you're evaluating the

00:32:40,409 --> 00:32:45,330
conditions for every single rule in your

00:32:42,929 --> 00:32:47,220
entire engine so now all your product

00:32:45,330 --> 00:32:50,629
configuration all your pricing you're

00:32:47,220 --> 00:32:53,580
evaluating every single rule even though

00:32:50,629 --> 00:32:55,799
usually you're only concerned with a

00:32:53,580 --> 00:32:56,999
small subset of those rules so what

00:32:55,799 --> 00:32:58,320
you're doing here is you're basically

00:32:56,999 --> 00:32:59,700
turning it on its head and you're

00:32:58,320 --> 00:33:01,289
allowing the conditions that actually

00:32:59,700 --> 00:33:05,759
find the rules instead of the other way

00:33:01,289 --> 00:33:07,529
around and so if you don't do it this

00:33:05,759 --> 00:33:09,179
way you're going to find at the end of

00:33:07,529 --> 00:33:11,820
your project that you have some very

00:33:09,179 --> 00:33:12,899
serious performance problems don't look

00:33:11,820 --> 00:33:15,659
up the readout of the rhythm on

00:33:12,899 --> 00:33:18,299
Wikipedia don't look you know read about

00:33:15,659 --> 00:33:20,070
it through one of the one of the other

00:33:18,299 --> 00:33:21,570
sites that you're in a Google really go

00:33:20,070 --> 00:33:23,070
to this paper and see what it's all

00:33:21,570 --> 00:33:25,950
about because everything else just a

00:33:23,070 --> 00:33:29,279
really poor reinterpretation of the

00:33:25,950 --> 00:33:31,440
paper okay so what you what you really

00:33:29,279 --> 00:33:33,659
need to know like i said the facts what

00:33:31,440 --> 00:33:35,669
people are buying must find the rules

00:33:33,659 --> 00:33:38,279
the things that you care about now um

00:33:35,669 --> 00:33:39,779
I've often thought that maybe maybe the

00:33:38,279 --> 00:33:41,249
best way of doing this is just do the

00:33:39,779 --> 00:33:43,259
observer pattern you can go in and

00:33:41,249 --> 00:33:45,149
register the conditions under which they

00:33:43,259 --> 00:33:47,340
have to be met and put a call back in

00:33:45,149 --> 00:33:49,289
it's all sounds a bit complicated you do

00:33:47,340 --> 00:33:50,609
you do get something from this and you

00:33:49,289 --> 00:33:52,649
don't have to worry about what audition

00:33:50,609 --> 00:33:54,509
my rules apply in like they're this

00:33:52,649 --> 00:33:56,100
particular type does it affect it if

00:33:54,509 --> 00:33:57,389
they you know is it different if I apply

00:33:56,100 --> 00:33:59,220
it in this order rather than this order

00:33:57,389 --> 00:34:01,649
and how do they interact you get around

00:33:59,220 --> 00:34:03,359
a lot of that but with the way that

00:34:01,649 --> 00:34:06,210
we've done it since we've made our rules

00:34:03,359 --> 00:34:08,069
part of the product graph we already

00:34:06,210 --> 00:34:10,500
have a very easy way of figuring out

00:34:08,069 --> 00:34:12,720
which rules are actually relevant to the

00:34:10,500 --> 00:34:16,280
the things that people have bought for a

00:34:12,720 --> 00:34:19,619
particular order and the the way that we

00:34:16,280 --> 00:34:20,940
particular sales order and the way that

00:34:19,619 --> 00:34:23,339
we've done that is simply you know we've

00:34:20,940 --> 00:34:26,250
got we attached the rules that care

00:34:23,339 --> 00:34:28,649
about that care about a particular

00:34:26,250 --> 00:34:31,290
product to those products so then we can

00:34:28,649 --> 00:34:32,389
very easily just say from the adjacency

00:34:31,290 --> 00:34:35,149
matrix an hour

00:34:32,389 --> 00:34:37,190
f you know what rules are actually

00:34:35,149 --> 00:34:40,339
connected to this product and are they

00:34:37,190 --> 00:34:41,960
valid and only do those so for now for

00:34:40,339 --> 00:34:43,250
our performance concerns given that you

00:34:41,960 --> 00:34:44,690
know we're working for an ice cream

00:34:43,250 --> 00:34:47,089
company and there's only so many

00:34:44,690 --> 00:34:49,369
different types of ice cream it works

00:34:47,089 --> 00:34:50,629
quite well now the other thing that I

00:34:49,369 --> 00:34:52,250
want you to know is that there's lots

00:34:50,629 --> 00:34:54,019
since this has been going on since the

00:34:52,250 --> 00:34:57,619
80s for expert systems there's a lot of

00:34:54,019 --> 00:35:00,920
mature mature libraries for actually

00:34:57,619 --> 00:35:04,069
handling your your rules and they are

00:35:00,920 --> 00:35:05,329
written in domain-specific languages and

00:35:04,069 --> 00:35:07,130
you'll see some parallels between the

00:35:05,329 --> 00:35:08,990
things that I've written and you do have

00:35:07,130 --> 00:35:10,490
to be concerned with things like what

00:35:08,990 --> 00:35:13,579
order have you defined your particular

00:35:10,490 --> 00:35:15,559
rules in and things like that um but

00:35:13,579 --> 00:35:16,609
these don't necessarily conflict with

00:35:15,559 --> 00:35:18,500
what we've been talking about doing

00:35:16,609 --> 00:35:20,390
things model-driven because once you get

00:35:18,500 --> 00:35:21,859
the model in it's up to you what you do

00:35:20,390 --> 00:35:24,829
with it you can actually translate

00:35:21,859 --> 00:35:27,650
things to a domain-specific language but

00:35:24,829 --> 00:35:31,099
we haven't seen a need for this so we

00:35:27,650 --> 00:35:35,359
haven't done that also should be noted

00:35:31,099 --> 00:35:36,980
that there are rappers for pie clips for

00:35:35,359 --> 00:35:41,809
clips called pie clips that you can use

00:35:36,980 --> 00:35:43,940
to do these things in Python with so Rob

00:35:41,809 --> 00:35:46,309
do you want to give the summary you want

00:35:43,940 --> 00:35:48,529
ugh right I'll keep going then all right

00:35:46,309 --> 00:35:52,220
we've got 10 minutes everyone's going to

00:35:48,529 --> 00:35:55,009
eat today so as programmers we really

00:35:52,220 --> 00:35:56,630
really like writing things in terms of

00:35:55,009 --> 00:35:59,839
operators in reverse polish notation

00:35:56,630 --> 00:36:01,940
we'd love we absolutely love creating

00:35:59,839 --> 00:36:03,799
our own domain specific languages there

00:36:01,940 --> 00:36:05,750
have been talks at this conference of

00:36:03,799 --> 00:36:08,299
exactly how to do it wonderful tools

00:36:05,750 --> 00:36:10,789
that allow you to do this you can pick a

00:36:08,299 --> 00:36:16,849
myriad of ways of implementing Common

00:36:10,789 --> 00:36:18,410
Lisp and it's that's our job and you can

00:36:16,849 --> 00:36:21,740
even write a templating engine while

00:36:18,410 --> 00:36:23,539
you're at it um but we don't like to

00:36:21,740 --> 00:36:25,160
write exceptions to rules because their

00:36:23,539 --> 00:36:28,430
rules their logical they're right

00:36:25,160 --> 00:36:29,839
they're pure but we so we don't like

00:36:28,430 --> 00:36:31,730
writing exceptions to them but the thing

00:36:29,839 --> 00:36:32,750
is that the business doesn't care the

00:36:31,730 --> 00:36:34,130
business doesn't care about your

00:36:32,750 --> 00:36:35,359
structure they don't care about the

00:36:34,130 --> 00:36:37,789
rules that you already have they don't

00:36:35,359 --> 00:36:38,900
care about these things but they do care

00:36:37,789 --> 00:36:40,910
about is how long is it going to be

00:36:38,900 --> 00:36:42,740
before they can have the next time you

00:36:40,910 --> 00:36:43,410
know they're the idea that just came to

00:36:42,740 --> 00:36:47,460
them

00:36:43,410 --> 00:36:49,020
put in there so if you don't do things

00:36:47,460 --> 00:36:51,780
this way you know pricing can become

00:36:49,020 --> 00:36:53,549
unmaintained bull without you without

00:36:51,780 --> 00:36:55,650
the developer and that's a really good

00:36:53,549 --> 00:36:57,690
way to have job security as being the

00:36:55,650 --> 00:36:59,609
only person that can actually you know

00:36:57,690 --> 00:37:01,200
go through and refactor all of the rules

00:36:59,609 --> 00:37:04,740
in the entire engine to put in the new

00:37:01,200 --> 00:37:07,470
new behavior but you know Rob and I are

00:37:04,740 --> 00:37:13,799
our consultants and we like to get the

00:37:07,470 --> 00:37:15,000
work done and get out fast um so but so

00:37:13,799 --> 00:37:17,579
what we've talked about really is

00:37:15,000 --> 00:37:18,660
separating the data separating the you

00:37:17,579 --> 00:37:20,640
know the things that we want to express

00:37:18,660 --> 00:37:22,319
from the code and Python makes that

00:37:20,640 --> 00:37:25,410
absolutely beautiful we've got all sorts

00:37:22,319 --> 00:37:28,980
of meta classing that we can do in order

00:37:25,410 --> 00:37:31,079
to achieve this and since python has has

00:37:28,980 --> 00:37:33,480
you know duck typing it's absolutely

00:37:31,079 --> 00:37:35,280
amazing you know if I find this you know

00:37:33,480 --> 00:37:36,569
if I going through the XML and I see

00:37:35,280 --> 00:37:38,549
these fields and this particular

00:37:36,569 --> 00:37:40,650
structure that oh that's my pattern

00:37:38,549 --> 00:37:42,720
that's it and anything else oh it's

00:37:40,650 --> 00:37:44,280
absolutely forgiving about it it'll just

00:37:42,720 --> 00:37:46,470
go through and do the best that it can

00:37:44,280 --> 00:37:48,510
then interpret things and if the tests

00:37:46,470 --> 00:37:50,369
don't pass then the tests don't pass and

00:37:48,510 --> 00:37:51,839
we've got to go back to the drawing

00:37:50,369 --> 00:37:55,770
board a bit but we find that that

00:37:51,839 --> 00:37:58,440
doesn't happen a whole lot um also um

00:37:55,770 --> 00:38:00,480
we've talked about how you know you can

00:37:58,440 --> 00:38:03,900
make your model can make complicated

00:38:00,480 --> 00:38:06,029
rules out of even you know even with

00:38:03,900 --> 00:38:07,619
with simple patterns even with simple

00:38:06,029 --> 00:38:10,829
ideas things that the business can

00:38:07,619 --> 00:38:13,680
express in a very very simple way you

00:38:10,829 --> 00:38:15,779
can get complicated rules and there's a

00:38:13,680 --> 00:38:20,279
variety of ways of really dealing with

00:38:15,779 --> 00:38:23,279
that so I'm David Layton and that's Rob

00:38:20,279 --> 00:38:24,839
Collinson this has been our talk you

00:38:23,279 --> 00:38:27,599
have our contact information here you

00:38:24,839 --> 00:38:29,779
can find me on LinkedIn are there any

00:38:27,599 --> 00:38:29,779
questions

00:38:47,330 --> 00:38:54,330
I'm wondering about the end products of

00:38:51,480 --> 00:38:58,050
this for what you get out at the other

00:38:54,330 --> 00:39:00,750
end in the way of is it do you put it in

00:38:58,050 --> 00:39:06,930
the Katra do you put it in the cash

00:39:00,750 --> 00:39:09,690
registers or into big catalogs or where

00:39:06,930 --> 00:39:12,450
does the information end up okay so so

00:39:09,690 --> 00:39:15,690
what we're doing on our specific project

00:39:12,450 --> 00:39:18,450
is we're doing Jason over HTTP so

00:39:15,690 --> 00:39:21,090
they'll bring in they'll give us a Jason

00:39:18,450 --> 00:39:23,450
request and it'll say things like i want

00:39:21,090 --> 00:39:26,130
to buy these these products together

00:39:23,450 --> 00:39:29,760
because what you buy with other things

00:39:26,130 --> 00:39:31,590
matters and then what we typically give

00:39:29,760 --> 00:39:34,140
back if we're just evaluating it what we

00:39:31,590 --> 00:39:35,460
give them back is okay well these are

00:39:34,140 --> 00:39:37,530
the things that you've told me to buy

00:39:35,460 --> 00:39:39,390
now either you can't buy them that way

00:39:37,530 --> 00:39:41,460
and I send an error message that tells

00:39:39,390 --> 00:39:44,280
you explicitly this is you know why you

00:39:41,460 --> 00:39:46,170
can't buy things this way or we give

00:39:44,280 --> 00:39:47,610
them back a list of not only the

00:39:46,170 --> 00:39:50,880
products they've asked for but the

00:39:47,610 --> 00:39:52,830
products that they have to buy you know

00:39:50,880 --> 00:39:54,540
if we if there's a very specific you

00:39:52,830 --> 00:39:57,450
have to buy this with this the things

00:39:54,540 --> 00:39:58,860
they have to buy along with another

00:39:57,450 --> 00:40:00,300
object that we didn't talk about which

00:39:58,860 --> 00:40:02,940
was called charges which are another

00:40:00,300 --> 00:40:05,460
node in there you may not charge

00:40:02,940 --> 00:40:07,410
somebody for this product costs this

00:40:05,460 --> 00:40:09,240
this product costs this but you know you

00:40:07,410 --> 00:40:10,470
bought this group of products and we

00:40:09,240 --> 00:40:12,150
evaluate them this way so they get a

00:40:10,470 --> 00:40:15,270
little speck of charges and that's

00:40:12,150 --> 00:40:18,080
what's going to appear on their bill and

00:40:15,270 --> 00:40:20,910
that gets that gets passed off to our

00:40:18,080 --> 00:40:22,860
our services stateless so it goes to the

00:40:20,910 --> 00:40:24,000
basically the controller of state for

00:40:22,860 --> 00:40:26,940
different orders and things like that

00:40:24,000 --> 00:40:30,120
that manages the the different systems

00:40:26,940 --> 00:40:34,140
now right now we currently don't cash

00:40:30,120 --> 00:40:35,580
things but it's it's quite foreseeable

00:40:34,140 --> 00:40:38,070
that's exactly what we'll do we'll

00:40:35,580 --> 00:40:40,620
handle it off to this service and the

00:40:38,070 --> 00:40:42,780
service will either cash them or will

00:40:40,620 --> 00:40:44,520
hold a cash on our side just simply

00:40:42,780 --> 00:40:46,290
because like you know like i said before

00:40:44,520 --> 00:40:47,790
you go the grocery store you see a lot

00:40:46,290 --> 00:40:51,030
of people have the same shopping cart or

00:40:47,790 --> 00:40:52,950
similar shopping carts and as we know

00:40:51,030 --> 00:40:54,710
python isn't known for its performance

00:40:52,950 --> 00:40:57,560
so it's a it's a great way that really

00:40:54,710 --> 00:41:00,440
to really make make things fast

00:40:57,560 --> 00:41:03,670
is to just cash it that way has that

00:41:00,440 --> 00:41:03,670
answered your question yes

00:41:12,040 --> 00:41:15,030
don't be shy

00:41:19,400 --> 00:41:22,720
okay well thanks everybody

00:41:29,030 --> 00:41:35,460
just one other thing if anybody is in

00:41:32,760 --> 00:41:39,120
London and particularly likes our ice

00:41:35,460 --> 00:41:43,400
cream our client is recruiting at the

00:41:39,120 --> 00:41:43,400

YouTube URL: https://www.youtube.com/watch?v=TN9nIBxDXU8


