Title: A Python Takeover
Publication date: 2015-04-19
Playlist: EuroPython 2011
Description: 
	[EuroPython 2011] Mark Ramm-Christensen - 23 June 2011 in "Track Lasagne"
Captions: 
	00:00:09,030 --> 00:00:14,770
so I'll take questions right throughout

00:00:13,570 --> 00:00:16,630
the whole thing so if you have a

00:00:14,770 --> 00:00:19,210
question at any point just let me know

00:00:16,630 --> 00:00:21,330
I'll answer and then I'll try and have

00:00:19,210 --> 00:00:24,370
some time at the end for questions

00:00:21,330 --> 00:00:26,830
really what I'm here today to tell you

00:00:24,370 --> 00:00:29,190
it's just the story of so i started at

00:00:26,830 --> 00:00:33,640
sourceforge two and a half years ago

00:00:29,190 --> 00:00:35,980
almost exactly and when i started at

00:00:33,640 --> 00:00:39,010
sourceforge everything on sourceforge

00:00:35,980 --> 00:00:42,640
was written in PHP except for one there

00:00:39,010 --> 00:00:45,550
was one small Python service called RT

00:00:42,640 --> 00:00:48,220
stats and it was kind of a disaster and

00:00:45,550 --> 00:00:52,810
so people did not have extraordinarily

00:00:48,220 --> 00:00:55,180
high view of Python it's written by a

00:00:52,810 --> 00:00:57,180
guy he wrote it all sort of like in a

00:00:55,180 --> 00:00:59,440
cave by himself for six months and then

00:00:57,180 --> 00:01:05,920
like they released its production and

00:00:59,440 --> 00:01:07,689
then he quit it was awesome and and it

00:01:05,920 --> 00:01:09,780
works and but it was hard to maintain

00:01:07,689 --> 00:01:12,340
and nobody understood it and it uses

00:01:09,780 --> 00:01:17,380
twisted and does a bunch of crazy stuff

00:01:12,340 --> 00:01:20,380
to be real time and it was not well

00:01:17,380 --> 00:01:23,680
understood by our developers and it was

00:01:20,380 --> 00:01:25,690
a it had been a problem but everything

00:01:23,680 --> 00:01:29,530
had been written in PHP originally

00:01:25,690 --> 00:01:32,860
sourceforge was written in 1999 Python

00:01:29,530 --> 00:01:39,820
was not as well suited to web

00:01:32,860 --> 00:01:41,710
development in 99 as it is today and PHP

00:01:39,820 --> 00:01:44,470
was a natural option it was sort of

00:01:41,710 --> 00:01:46,810
written by this small group of people on

00:01:44,470 --> 00:01:49,090
the side and it was just a project to

00:01:46,810 --> 00:01:52,030
prove that you could serve as many bits

00:01:49,090 --> 00:01:54,250
from Linux as you could from Solaris or

00:01:52,030 --> 00:01:58,210
some other operating system and it was

00:01:54,250 --> 00:02:01,259
the company was a Linux hardware company

00:01:58,210 --> 00:02:03,790
at the time so they're just proving that

00:02:01,259 --> 00:02:07,780
Linux hardware could do all the fancy

00:02:03,790 --> 00:02:10,989
stuff that you needed to do fast forward

00:02:07,780 --> 00:02:12,730
10 years everything is kind of atrophied

00:02:10,989 --> 00:02:16,540
a little bit in sourceforge it's 10

00:02:12,730 --> 00:02:18,700
years old people were having trouble

00:02:16,540 --> 00:02:21,849
getting new features done there was

00:02:18,700 --> 00:02:24,920
frustration with

00:02:21,849 --> 00:02:29,150
how things were going and they said oh

00:02:24,920 --> 00:02:31,580
let's try a new wet modern web framework

00:02:29,150 --> 00:02:33,680
and let's hire some people and see if we

00:02:31,580 --> 00:02:36,410
can do something different and what they

00:02:33,680 --> 00:02:38,900
decided to build was this website called

00:02:36,410 --> 00:02:40,550
phosphorus and this was a tiny little

00:02:38,900 --> 00:02:42,890
experiment that we're going to have to

00:02:40,550 --> 00:02:44,930
developers work on this project for two

00:02:42,890 --> 00:02:50,030
months and see how it went and it was

00:02:44,930 --> 00:02:53,330
just a free software catalog so free and

00:02:50,030 --> 00:02:56,870
open source software for us and that was

00:02:53,330 --> 00:02:59,540
the site and it just was a way to browse

00:02:56,870 --> 00:03:03,280
free software and find stuff that you

00:02:59,540 --> 00:03:05,569
might want the first thing that they

00:03:03,280 --> 00:03:07,880
said was let's choose a language in

00:03:05,569 --> 00:03:11,150
which to write it well actually they

00:03:07,880 --> 00:03:13,730
didn't they said the the guy who was

00:03:11,150 --> 00:03:17,420
managing this Nate said to one of our

00:03:13,730 --> 00:03:23,060
developers Paul though you have two

00:03:17,420 --> 00:03:26,930
options Django and rails and Paul liked

00:03:23,060 --> 00:03:29,150
Python so he chose Django and then they

00:03:26,930 --> 00:03:30,380
hired me because if you're starting a

00:03:29,150 --> 00:03:32,540
Django project the first thing you

00:03:30,380 --> 00:03:38,450
should do is hire the BD FL of turbo

00:03:32,540 --> 00:03:41,359
gears so they hired me i worked on

00:03:38,450 --> 00:03:44,600
django project for two months is good

00:03:41,359 --> 00:03:46,579
project it was successful we got in two

00:03:44,600 --> 00:03:48,500
months we released it people liked it

00:03:46,579 --> 00:03:51,709
they showed it to the board the board

00:03:48,500 --> 00:03:53,660
liked it it got some traffic not a lot

00:03:51,709 --> 00:03:57,920
of traffic but it was easy to find

00:03:53,660 --> 00:04:01,370
software people used it and it was

00:03:57,920 --> 00:04:04,069
pretty successful in convincing people

00:04:01,370 --> 00:04:06,019
inside the org that you could get things

00:04:04,069 --> 00:04:08,900
done relatively quickly if you used a

00:04:06,019 --> 00:04:10,849
modern toolset that had like we use

00:04:08,900 --> 00:04:13,400
Django open ID we used a bunch of

00:04:10,849 --> 00:04:15,470
reusable Django apps and got things done

00:04:13,400 --> 00:04:19,280
very very fast and they were impressed

00:04:15,470 --> 00:04:23,810
with that but what did we like about

00:04:19,280 --> 00:04:25,789
this head couch DB as a schema list

00:04:23,810 --> 00:04:28,700
database back-end that worked really

00:04:25,789 --> 00:04:31,479
well for storing project data we had

00:04:28,700 --> 00:04:33,919
Django apps like Open ID and Django auth

00:04:31,479 --> 00:04:34,340
django had really good documentation the

00:04:33,919 --> 00:04:35,630
other

00:04:34,340 --> 00:04:39,169
I that they hired had never actually

00:04:35,630 --> 00:04:42,410
programmed Python before professionally

00:04:39,169 --> 00:04:44,690
so he was coming up to speed and the

00:04:42,410 --> 00:04:47,510
documentation in Django was great and he

00:04:44,690 --> 00:04:49,040
was able to be productive that entire

00:04:47,510 --> 00:04:53,770
first two months he was getting stuff

00:04:49,040 --> 00:04:53,770
done there was no real learning curve

00:04:54,850 --> 00:05:00,949
what we didn't like about it is that we

00:04:58,280 --> 00:05:03,500
were using couchdb and it wasn't quite

00:05:00,949 --> 00:05:05,930
fast enough for our needs and to get it

00:05:03,500 --> 00:05:09,800
to be what we wanted it to be we were

00:05:05,930 --> 00:05:14,030
going to have to replicate and do a

00:05:09,800 --> 00:05:17,840
bunch of work we also didn't completely

00:05:14,030 --> 00:05:21,680
trust CouchDB to store all our data so

00:05:17,840 --> 00:05:25,130
we wrote our own index docstore in mysql

00:05:21,680 --> 00:05:26,810
so that the data was in both places and

00:05:25,130 --> 00:05:30,229
then we had code that synchronized the

00:05:26,810 --> 00:05:33,560
data all the time we didn't that was a

00:05:30,229 --> 00:05:37,100
bad idea turns out couch was trustworthy

00:05:33,560 --> 00:05:38,900
and we shouldn't have done that work we

00:05:37,100 --> 00:05:41,479
didn't like Django templates at all and

00:05:38,900 --> 00:05:43,220
we use jinjja and this was two and a

00:05:41,479 --> 00:05:46,520
half years ago and two and a half years

00:05:43,220 --> 00:05:48,740
ago that was a mistake nowadays it's

00:05:46,520 --> 00:05:52,220
probably not a mistake that it was then

00:05:48,740 --> 00:05:54,440
but every week we ran into something

00:05:52,220 --> 00:05:56,150
where we're like oh but we don't use

00:05:54,440 --> 00:05:58,220
Django templates so this thing won't

00:05:56,150 --> 00:06:01,010
work at all and then we'd have to monkey

00:05:58,220 --> 00:06:03,440
patch Django to make something work like

00:06:01,010 --> 00:06:04,760
we couldn't use RSS feeds because we

00:06:03,440 --> 00:06:07,520
weren't using Durango templates and we

00:06:04,760 --> 00:06:10,220
couldn't use and it went on and on and

00:06:07,520 --> 00:06:14,870
that's not true today but it was true

00:06:10,220 --> 00:06:16,789
then and Django by default was

00:06:14,870 --> 00:06:18,800
generating an awful lot of queries and

00:06:16,789 --> 00:06:20,419
so we had to actually start monitoring

00:06:18,800 --> 00:06:22,300
the number of queries that we had per

00:06:20,419 --> 00:06:24,580
page and trying to bring that down

00:06:22,300 --> 00:06:31,669
because it was getting out of control

00:06:24,580 --> 00:06:33,440
and we so because this project was

00:06:31,669 --> 00:06:36,940
successful they immediately took all

00:06:33,440 --> 00:06:39,950
resources off it and abandoned it

00:06:36,940 --> 00:06:42,110
awesome management decision but they

00:06:39,950 --> 00:06:44,890
actually I mean on some level it made

00:06:42,110 --> 00:06:47,729
sense they said this thing gets you know

00:06:44,890 --> 00:06:50,339
few thousand page views a day

00:06:47,729 --> 00:06:53,129
maybe 10 and then we have this other

00:06:50,339 --> 00:06:55,529
thing sourceforge that gets you know

00:06:53,129 --> 00:06:57,930
millions of page views a day and it's

00:06:55,529 --> 00:07:00,180
way crappier if you guys can fix that

00:06:57,930 --> 00:07:03,719
make in two months make that thing

00:07:00,180 --> 00:07:05,639
better make create this thing from

00:07:03,719 --> 00:07:07,499
scratch can you make sourceforge better

00:07:05,639 --> 00:07:14,639
oh and this time we're going to give you

00:07:07,499 --> 00:07:17,159
six whole weeks so in particular they

00:07:14,639 --> 00:07:19,620
wanted this is the front page we had to

00:07:17,159 --> 00:07:24,180
redo the front page and they wanted to

00:07:19,620 --> 00:07:26,849
improve some usability so this time we

00:07:24,180 --> 00:07:29,279
got to choose again what stack did we

00:07:26,849 --> 00:07:31,139
want to use do we want to just take the

00:07:29,279 --> 00:07:34,919
same stuff and use it again or use

00:07:31,139 --> 00:07:37,319
something different we were pushing the

00:07:34,919 --> 00:07:40,680
envelope just a tiny bit on couch

00:07:37,319 --> 00:07:45,930
performance on phosphorus and we didn't

00:07:40,680 --> 00:07:48,180
want to do that again because it was

00:07:45,930 --> 00:07:51,629
going to be a hard work to get I mean we

00:07:48,180 --> 00:07:55,289
had then you know thousand two orders of

00:07:51,629 --> 00:07:57,270
magnitude at least more traffic so we

00:07:55,289 --> 00:07:59,129
didn't want to so we were like maybe

00:07:57,270 --> 00:08:00,659
couch is not the right choice but then

00:07:59,129 --> 00:08:03,509
we're like oh there was this thing

00:08:00,659 --> 00:08:06,120
called can't even remember what it was

00:08:03,509 --> 00:08:07,649
called but it was a twisted front end

00:08:06,120 --> 00:08:10,319
that you could have multiple couch

00:08:07,649 --> 00:08:14,490
servers on the back end and it would was

00:08:10,319 --> 00:08:16,610
that something like that and so we tried

00:08:14,490 --> 00:08:19,529
that and tested that and we tried

00:08:16,610 --> 00:08:25,339
mongodb and we tried cassandra and we

00:08:19,529 --> 00:08:28,589
tried several other options we did tried

00:08:25,339 --> 00:08:30,059
postgrads in mysql it was currently all

00:08:28,589 --> 00:08:33,959
served out of postgres so he knew that

00:08:30,059 --> 00:08:37,199
would work but we wanted replication we

00:08:33,959 --> 00:08:39,329
wanted to be able to have each server be

00:08:37,199 --> 00:08:43,019
self consistent so that our self

00:08:39,329 --> 00:08:44,850
contained so that if eight of our front

00:08:43,019 --> 00:08:49,290
end servers went down and one was still

00:08:44,850 --> 00:08:55,529
up you would still be able to respond to

00:08:49,290 --> 00:09:00,510
traffic so now we all know python

00:08:55,529 --> 00:09:01,110
meaning me and dave we all had used a

00:09:00,510 --> 00:09:03,600
document

00:09:01,110 --> 00:09:05,459
bass and we really liked it it worked

00:09:03,600 --> 00:09:07,410
really well for our problem domain which

00:09:05,459 --> 00:09:09,480
is you have a project record you want to

00:09:07,410 --> 00:09:11,640
display a page about that project that

00:09:09,480 --> 00:09:14,010
has a whole bunch of data about it but

00:09:11,640 --> 00:09:16,440
it's all basically the same data every

00:09:14,010 --> 00:09:19,950
time and we knew the problem domain a

00:09:16,440 --> 00:09:22,529
lot better but we only had six weeks and

00:09:19,950 --> 00:09:25,110
we had to be able to handle more than 10

00:09:22,529 --> 00:09:27,149
times the traffic not just more than 10

00:09:25,110 --> 00:09:29,250
times the traffic that phosphorus head

00:09:27,149 --> 00:09:31,320
but more than 10 times the traffic at

00:09:29,250 --> 00:09:35,339
which phosphorus would consistently fall

00:09:31,320 --> 00:09:39,690
over so we knew we were going to have

00:09:35,339 --> 00:09:41,670
some scalability issues we get a lot of

00:09:39,690 --> 00:09:45,120
download page views on sourceforge and

00:09:41,670 --> 00:09:49,200
our project was just to fix the download

00:09:45,120 --> 00:09:51,480
page the file browse page and the sort

00:09:49,200 --> 00:10:00,029
of the consumer flow the project summary

00:09:51,480 --> 00:10:01,260
page and we were also one of the

00:10:00,029 --> 00:10:04,649
constraints which was a pretty good

00:10:01,260 --> 00:10:06,959
constraint to have I think was that we

00:10:04,649 --> 00:10:08,610
were only allowed to talk to the public

00:10:06,959 --> 00:10:11,519
api's of source boards we were not

00:10:08,610 --> 00:10:13,680
allowed to talk to the database directly

00:10:11,519 --> 00:10:15,660
and get the data that we needed we

00:10:13,680 --> 00:10:18,899
needed to grab project data out of the

00:10:15,660 --> 00:10:21,750
public API and shove it somewhere and

00:10:18,899 --> 00:10:23,640
then display pages it was partly to

00:10:21,750 --> 00:10:26,730
prove that we had public api's and you

00:10:23,640 --> 00:10:33,230
could use them because they were mostly

00:10:26,730 --> 00:10:38,390
broken in much of source borges life so

00:10:33,230 --> 00:10:38,390
we did a bunch of testing of various

00:10:38,959 --> 00:10:44,579
various libraries I just mentioned that

00:10:42,089 --> 00:10:46,560
it was more than ninety percent of all

00:10:44,579 --> 00:10:50,519
source forges traffic goes to those four

00:10:46,560 --> 00:10:52,290
pages and then if you include the front

00:10:50,519 --> 00:10:54,089
page it's like ninety three percent and

00:10:52,290 --> 00:10:56,670
then our next goal was going to be

00:10:54,089 --> 00:10:58,260
search browse pages and that would take

00:10:56,670 --> 00:11:00,540
you up to like 96 or ninety seven

00:10:58,260 --> 00:11:03,089
percent of all sorts for traffic would

00:11:00,540 --> 00:11:05,670
be served from Python with very little

00:11:03,089 --> 00:11:08,760
Python code but serving most of source

00:11:05,670 --> 00:11:13,520
for just traffic the big goals for it

00:11:08,760 --> 00:11:13,520
were to have bed slide layout

00:11:13,829 --> 00:11:19,389
or to improve the usability of the page

00:11:17,019 --> 00:11:22,120
to improve the performance of the page

00:11:19,389 --> 00:11:25,060
and to have a system that was much more

00:11:22,120 --> 00:11:28,809
reliable we were having some downtime

00:11:25,060 --> 00:11:31,329
issues the big usability issue was we

00:11:28,809 --> 00:11:33,939
wanted to have this big green button

00:11:31,329 --> 00:11:38,370
that figured out what operating system

00:11:33,939 --> 00:11:40,749
you were on and let you download a file

00:11:38,370 --> 00:11:42,579
because that didn't exist on sourceforge

00:11:40,749 --> 00:11:44,290
at the time there's just like a browse

00:11:42,579 --> 00:11:46,149
files and then you'd get to a page that

00:11:44,290 --> 00:11:48,550
had a list of all the releases that it

00:11:46,149 --> 00:11:51,639
ever happened and then you had to figure

00:11:48,550 --> 00:11:54,399
out which one you wanted so we needed to

00:11:51,639 --> 00:11:57,339
do a little bit of work to figure out

00:11:54,399 --> 00:12:00,069
what platform you are on from your user

00:11:57,339 --> 00:12:02,829
agent string and then we had to do some

00:12:00,069 --> 00:12:06,040
other work to figure out what because

00:12:02,829 --> 00:12:09,550
most file most projects did not tell us

00:12:06,040 --> 00:12:12,370
what the recommended download was it was

00:12:09,550 --> 00:12:13,899
in the API and in sourceforge you could

00:12:12,370 --> 00:12:16,269
do that but most projects had not done

00:12:13,899 --> 00:12:19,360
it so we had to look and go oh it's

00:12:16,269 --> 00:12:21,309
three point 0 beta 4 oh that's better

00:12:19,360 --> 00:12:24,189
than three point 0 beta 3 but not as

00:12:21,309 --> 00:12:26,709
good as three point 0 so we had to

00:12:24,189 --> 00:12:31,269
figure that stuff out and actually we

00:12:26,709 --> 00:12:33,730
just so for cheating in the original

00:12:31,269 --> 00:12:36,790
version of figuring out what platform

00:12:33,730 --> 00:12:39,120
where you're on we had code like if

00:12:36,790 --> 00:12:42,459
windows in user agent string dot lower

00:12:39,120 --> 00:12:45,129
and then we stole the code to figure out

00:12:42,459 --> 00:12:47,170
what is the highest version from

00:12:45,129 --> 00:12:52,290
setuptools so we just imported

00:12:47,170 --> 00:12:54,639
setuptools and use their little who baju

00:12:52,290 --> 00:12:56,949
because it's crazy and I did not want to

00:12:54,639 --> 00:12:59,649
figure that logic out again and we only

00:12:56,949 --> 00:13:02,470
had six weeks but that's sort of the

00:12:59,649 --> 00:13:04,629
beauty of Python right like I looked

00:13:02,470 --> 00:13:07,750
around and I'm like hey somebody has

00:13:04,629 --> 00:13:09,339
done this and set up tools did it and so

00:13:07,750 --> 00:13:11,610
we didn't have to write that code

00:13:09,339 --> 00:13:11,610
anymore

00:13:14,040 --> 00:13:21,100
we did have some advantages and again my

00:13:18,070 --> 00:13:25,450
slides are being funky consistency

00:13:21,100 --> 00:13:29,710
wasn't critical if someone did a release

00:13:25,450 --> 00:13:32,110
and thumb users were on sir one server

00:13:29,710 --> 00:13:34,630
and they saw the release in four seconds

00:13:32,110 --> 00:13:36,160
and some users on a different server saw

00:13:34,630 --> 00:13:38,230
the release and it took 10 seconds for

00:13:36,160 --> 00:13:42,610
it to get to them like that wasn't going

00:13:38,230 --> 00:13:44,680
to be a big deal we had so we for a

00:13:42,610 --> 00:13:47,710
database perspective that gave us a lot

00:13:44,680 --> 00:13:51,100
of options we really wanted replication

00:13:47,710 --> 00:13:52,960
we really wanted when we launched we

00:13:51,100 --> 00:13:55,750
wanted an architecture like this where

00:13:52,960 --> 00:13:57,910
each of the directory server the

00:13:55,750 --> 00:14:00,520
front-end directory servers had a local

00:13:57,910 --> 00:14:03,940
replica of the database because it

00:14:00,520 --> 00:14:05,500
wasn't that big and that way as long as

00:14:03,940 --> 00:14:10,420
one of the servers was up we were able

00:14:05,500 --> 00:14:12,160
to serve traffic when we went through

00:14:10,420 --> 00:14:15,100
and did all of our performance

00:14:12,160 --> 00:14:18,460
comparison of various databases we chose

00:14:15,100 --> 00:14:20,890
MongoDB it was a little scary because

00:14:18,460 --> 00:14:25,510
people were like oh it's it was pretty

00:14:20,890 --> 00:14:29,589
one point oh it was very very new it was

00:14:25,510 --> 00:14:33,880
incredibly fast we were getting over

00:14:29,589 --> 00:14:37,480
10,000 project reads per second in tests

00:14:33,880 --> 00:14:39,310
with project data on my laptop and ten

00:14:37,480 --> 00:14:41,400
thousand reads per second was more than

00:14:39,310 --> 00:14:46,140
enough to handle all sourceforge traffic

00:14:41,400 --> 00:14:48,339
off of my laptop which was pretty good

00:14:46,140 --> 00:14:50,440
at least that's what we thought when we

00:14:48,339 --> 00:14:51,760
did the testing on my laptop we didn't

00:14:50,440 --> 00:14:58,870
have production data and i'll get to

00:14:51,760 --> 00:15:04,170
that story in a second though another

00:14:58,870 --> 00:15:04,170
thing that we use all of our our

00:15:04,680 --> 00:15:09,610
administrators love them some Apache and

00:15:07,330 --> 00:15:12,339
they knew Apache so I just said here's

00:15:09,610 --> 00:15:15,040
mod whiskey it will work it's an Apache

00:15:12,339 --> 00:15:17,470
module we're going to tune it it's going

00:15:15,040 --> 00:15:20,020
to be fine and that worked out as a

00:15:17,470 --> 00:15:21,760
deployment strategy for us very very

00:15:20,020 --> 00:15:25,320
easily because it was something our

00:15:21,760 --> 00:15:25,320
system administrators just knew

00:15:25,600 --> 00:15:31,250
but we got we had six weeks oh they said

00:15:29,120 --> 00:15:33,320
Oh hire two people to work on this too

00:15:31,250 --> 00:15:35,410
so during that six weeks we were hiring

00:15:33,320 --> 00:15:39,800
two people and getting this project done

00:15:35,410 --> 00:15:42,170
and because it was python that was

00:15:39,800 --> 00:15:45,140
actually not a problem we did not work

00:15:42,170 --> 00:15:47,230
crazy hours and do insane things until

00:15:45,140 --> 00:15:50,330
the very last minute and that was

00:15:47,230 --> 00:15:52,640
because they decided to change the

00:15:50,330 --> 00:15:56,330
entire theme and look and feel of

00:15:52,640 --> 00:16:01,070
sourceforge two days before we launched

00:15:56,330 --> 00:16:04,160
it so we had a mad rush to get a UI that

00:16:01,070 --> 00:16:08,680
worked but that had nothing to do with

00:16:04,160 --> 00:16:12,680
Python and just to do with bed design

00:16:08,680 --> 00:16:17,570
but we launched two years ago at euro

00:16:12,680 --> 00:16:19,880
python and so this is bad timing but I

00:16:17,570 --> 00:16:22,430
was coming to Europe Python to do a talk

00:16:19,880 --> 00:16:27,920
on turbo gears and so I flew out I

00:16:22,430 --> 00:16:31,400
landed and we launched I'm on the phone

00:16:27,920 --> 00:16:35,180
and then I'm on my laptop and the launch

00:16:31,400 --> 00:16:38,960
we didn't have these are lessons learned

00:16:35,180 --> 00:16:41,660
we did not have any load testing system

00:16:38,960 --> 00:16:44,180
and we were not allowed to load tests on

00:16:41,660 --> 00:16:45,740
production hardware even though we had

00:16:44,180 --> 00:16:48,080
completely separate production hardware

00:16:45,740 --> 00:16:49,940
that was on a separate set of

00:16:48,080 --> 00:16:52,010
connections and didn't touch any of the

00:16:49,940 --> 00:16:54,380
other servers or back end it was all

00:16:52,010 --> 00:16:56,839
touching like the server's hit [ __ ]

00:16:54,380 --> 00:16:59,300
[ __ ] was a new thing I was like let's

00:16:56,839 --> 00:17:01,820
load test on this before we launch just

00:16:59,300 --> 00:17:04,370
to make sure it's all good and they were

00:17:01,820 --> 00:17:07,640
very very worried that we would somehow

00:17:04,370 --> 00:17:11,150
take down the site by load testing the

00:17:07,640 --> 00:17:13,310
site before we launched it so our load

00:17:11,150 --> 00:17:15,470
test was we just pointed all the traffic

00:17:13,310 --> 00:17:21,620
from sourceforge at it and saw what

00:17:15,470 --> 00:17:23,360
happened meanwhile i'm on a different

00:17:21,620 --> 00:17:27,530
continent i'm trying to figure this out

00:17:23,360 --> 00:17:29,929
and we launched it and on my laptop it

00:17:27,530 --> 00:17:33,800
was really fast even with all of the

00:17:29,929 --> 00:17:36,140
traffic for sourceforge but on the live

00:17:33,800 --> 00:17:38,120
servers it was a little slow it wasn't

00:17:36,140 --> 00:17:43,820
dying but it was like

00:17:38,120 --> 00:17:45,920
eight seconds of page it was bad so the

00:17:43,820 --> 00:17:48,220
all the server the front end servers we

00:17:45,920 --> 00:17:53,240
had four they were just sitting there

00:17:48,220 --> 00:17:56,090
hardly any CPU nothing happening like no

00:17:53,240 --> 00:18:02,840
load no disk i/o were like what's going

00:17:56,090 --> 00:18:04,610
on here then we look at them at that

00:18:02,840 --> 00:18:07,100
point we just had one central [ __ ]

00:18:04,610 --> 00:18:10,100
server and we looked at that [ __ ]

00:18:07,100 --> 00:18:14,420
server it had cpu load was like five

00:18:10,100 --> 00:18:17,030
percent had no disk i/o we're like why

00:18:14,420 --> 00:18:19,820
is everything slow and then turned out

00:18:17,030 --> 00:18:22,280
that we had a gigabit network card in

00:18:19,820 --> 00:18:25,400
our [ __ ] server and we were saturating

00:18:22,280 --> 00:18:28,370
the gigabit network with project traffic

00:18:25,400 --> 00:18:30,980
because we had decided to put every list

00:18:28,370 --> 00:18:33,590
of every release for a project in the

00:18:30,980 --> 00:18:36,820
project record for a few projects like

00:18:33,590 --> 00:18:39,530
jabe jboss would be a very good example

00:18:36,820 --> 00:18:41,360
there are thousands upon thousands of

00:18:39,530 --> 00:18:45,260
releases over their eight-year history

00:18:41,360 --> 00:18:47,679
of tons of little tiny components and so

00:18:45,260 --> 00:18:52,190
those project records were very large

00:18:47,679 --> 00:18:53,990
maybe four mags and we are grabbing them

00:18:52,190 --> 00:18:55,460
from the database every time we display

00:18:53,990 --> 00:18:57,140
the page so we're grabbing for megs of

00:18:55,460 --> 00:19:02,290
data out of the database to just play

00:18:57,140 --> 00:19:05,720
like a hundred and thirty k page so that

00:19:02,290 --> 00:19:07,309
was not working out well so we're like

00:19:05,720 --> 00:19:10,040
oh we're going to move the releases out

00:19:07,309 --> 00:19:12,500
but in the short term our net ops people

00:19:10,040 --> 00:19:15,200
bonded the two gigabit networks and we

00:19:12,500 --> 00:19:17,840
had a two gigabit connection between the

00:19:15,200 --> 00:19:21,010
front end and the front end servers and

00:19:17,840 --> 00:19:24,290
[ __ ] and then we just saturated that

00:19:21,010 --> 00:19:25,640
immediately and things got faster but it

00:19:24,290 --> 00:19:28,190
was saturated and that was the

00:19:25,640 --> 00:19:30,320
bottleneck and we fixed then like an

00:19:28,190 --> 00:19:33,380
hour or two later we deploy to fix that

00:19:30,320 --> 00:19:36,980
didn't do the what we added caching

00:19:33,380 --> 00:19:39,470
first that was an hour fix and then and

00:19:36,980 --> 00:19:43,940
when we added caching things out really

00:19:39,470 --> 00:19:48,170
slow we're like why does memcache slower

00:19:43,940 --> 00:19:49,840
than [ __ ] anybody know why memcache is

00:19:48,170 --> 00:19:53,300
slower than [ __ ]

00:19:49,840 --> 00:19:58,000
because we're using pickle and pickle is

00:19:53,300 --> 00:20:00,710
way slow when you have for Meg objects

00:19:58,000 --> 00:20:02,390
so when we were serializing and

00:20:00,710 --> 00:20:07,400
deserialising then we're also getting

00:20:02,390 --> 00:20:08,900
like CPU bound processes and cpu Brown

00:20:07,400 --> 00:20:10,940
processes there's the global interpreter

00:20:08,900 --> 00:20:17,200
lock even though we had lots of threads

00:20:10,940 --> 00:20:21,860
answering these we were locking up so

00:20:17,200 --> 00:20:23,390
caching into memcache was bad so we just

00:20:21,860 --> 00:20:25,520
started cashing in to local memory and

00:20:23,390 --> 00:20:29,810
that worked better for just a few

00:20:25,520 --> 00:20:35,500
projects and that eliminated it then we

00:20:29,810 --> 00:20:38,090
stopped caching finally now and just

00:20:35,500 --> 00:20:40,190
removed the offending data that we

00:20:38,090 --> 00:20:42,710
weren't using it all from those records

00:20:40,190 --> 00:20:44,210
and everything got fast but it took a

00:20:42,710 --> 00:20:45,710
while to update all the records to

00:20:44,210 --> 00:20:56,150
remove that data and put in a separate

00:20:45,710 --> 00:20:59,300
collection so that project in spite of

00:20:56,150 --> 00:21:02,720
that chaos the Euro Python week was

00:20:59,300 --> 00:21:04,790
deemed a success so they said do more

00:21:02,720 --> 00:21:09,080
and now we got to hire a couple more

00:21:04,790 --> 00:21:11,360
people and we got set to replace all the

00:21:09,080 --> 00:21:15,590
tools on sourceforge and they wanted

00:21:11,360 --> 00:21:18,860
this time for it to be a platform there

00:21:15,590 --> 00:21:21,020
was a big push from a manager who used

00:21:18,860 --> 00:21:22,850
to work at Microsoft he's like

00:21:21,020 --> 00:21:25,490
everything is platform platform is how

00:21:22,850 --> 00:21:28,070
you win so he's like build the platform

00:21:25,490 --> 00:21:29,660
and then you can build some tool and I

00:21:28,070 --> 00:21:33,500
was like let's build some tools and

00:21:29,660 --> 00:21:35,900
extract a platform and then we built a

00:21:33,500 --> 00:21:38,840
platform and then we had to fix it when

00:21:35,900 --> 00:21:42,620
we made tools as you know that's what

00:21:38,840 --> 00:21:46,940
always happens so we built this platform

00:21:42,620 --> 00:21:49,850
called allora and the allura had a bunch

00:21:46,940 --> 00:21:54,950
of different this is the allura project

00:21:49,850 --> 00:21:57,050
by the way tickets for it so we now use

00:21:54,950 --> 00:21:59,000
sourceforge ticket tracker to track our

00:21:57,050 --> 00:22:01,660
own bugs and our own development

00:21:59,000 --> 00:22:01,660
processes

00:22:01,680 --> 00:22:08,030
and it has some built-in things like it

00:22:04,470 --> 00:22:11,760
has solar indexing it has a MongoDB

00:22:08,030 --> 00:22:14,490
documents store so a ticket you can just

00:22:11,760 --> 00:22:18,540
say index these fields and then they'll

00:22:14,490 --> 00:22:24,660
be searchable via solar we built a

00:22:18,540 --> 00:22:30,110
ticket tracker a wiki file release

00:22:24,660 --> 00:22:30,110
system get mercurial subversion support

00:22:30,590 --> 00:22:38,400
discussion tracker in a project

00:22:33,870 --> 00:22:41,520
administration control panel so we built

00:22:38,400 --> 00:22:44,820
all of these things so that you had a

00:22:41,520 --> 00:22:47,820
bunch of tools that were plugins so

00:22:44,820 --> 00:22:50,640
installing a new or creating a new tool

00:22:47,820 --> 00:22:52,950
for a Laura new tracker or discussion

00:22:50,640 --> 00:22:54,890
tool or something is you there's an

00:22:52,950 --> 00:22:58,380
application class that you have to write

00:22:54,890 --> 00:23:00,660
and use a set up tools entry point and

00:22:58,380 --> 00:23:05,400
then that tool will just show up in this

00:23:00,660 --> 00:23:07,560
menu of things that you could install so

00:23:05,400 --> 00:23:11,340
we have as part of the platform we have

00:23:07,560 --> 00:23:14,340
all of this stuff where we have apache

00:23:11,340 --> 00:23:16,880
and mod whiskey still we have an SMTP

00:23:14,340 --> 00:23:22,080
server for mail coming in and out

00:23:16,880 --> 00:23:24,720
rabbitmq is now optional you can every

00:23:22,080 --> 00:23:27,690
the queue goes into [ __ ] as well as

00:23:24,720 --> 00:23:30,300
rabbit and RabbitMQ just make sure that

00:23:27,690 --> 00:23:33,450
people get the message instantly if

00:23:30,300 --> 00:23:36,840
you're willing to just pull [ __ ]

00:23:33,450 --> 00:23:39,810
occasionally you can get the queue to

00:23:36,840 --> 00:23:42,690
work without rabbitmq because people

00:23:39,810 --> 00:23:45,990
have had rabbit mq install problem we

00:23:42,690 --> 00:23:47,730
have this reactor idea that we stole so

00:23:45,990 --> 00:23:51,560
we liberally soul from the Python will

00:23:47,730 --> 00:23:55,740
be stole this idea of reactors from

00:23:51,560 --> 00:23:57,990
round up bug ticket tracker and then we

00:23:55,740 --> 00:24:01,380
index things into solar we put things in

00:23:57,990 --> 00:24:04,440
[ __ ] we have open s station we have a

00:24:01,380 --> 00:24:07,290
fuse file system which we wrote actually

00:24:04,440 --> 00:24:10,080
in Python and all that does is

00:24:07,290 --> 00:24:13,050
permission look up on top of a loopback

00:24:10,080 --> 00:24:15,510
file system so that get mercurial

00:24:13,050 --> 00:24:17,940
subversion permissions can be controlled

00:24:15,510 --> 00:24:21,480
from Python without modifying to get

00:24:17,940 --> 00:24:24,900
murkier subversion binary so we're using

00:24:21,480 --> 00:24:27,410
stock version control systems but can

00:24:24,900 --> 00:24:30,420
give you fine get fine-grained

00:24:27,410 --> 00:24:34,140
permission control for access to those

00:24:30,420 --> 00:24:37,440
things so we had six months to do this

00:24:34,140 --> 00:24:42,690
project it turned out to work pretty

00:24:37,440 --> 00:24:46,350
well and so as we're about two months

00:24:42,690 --> 00:24:48,600
into this process someone at sourceforge

00:24:46,350 --> 00:24:52,410
decided that the official language of

00:24:48,600 --> 00:24:55,470
sourceforge is now Python and that we've

00:24:52,410 --> 00:24:57,980
done a good enough job that they proved

00:24:55,470 --> 00:25:00,240
that unless you have a darn good reason

00:24:57,980 --> 00:25:02,820
everything that gets written from now on

00:25:00,240 --> 00:25:05,070
should be in Python and so now we had to

00:25:02,820 --> 00:25:08,090
teach all of our PHP developers python

00:25:05,070 --> 00:25:10,830
that was easy turns out python is great

00:25:08,090 --> 00:25:14,280
and it all worked out and in the end

00:25:10,830 --> 00:25:16,860
Python just sort of one and now the

00:25:14,280 --> 00:25:21,470
people who came in and did the original

00:25:16,860 --> 00:25:24,240
Python stuff are in many ways running

00:25:21,470 --> 00:25:27,330
development these days and have led us

00:25:24,240 --> 00:25:29,010
in a new direction and we open sort the

00:25:27,330 --> 00:25:31,050
allura platform that I mentioned there

00:25:29,010 --> 00:25:35,010
and all the tools that we use on

00:25:31,050 --> 00:25:39,150
sourceforge we open sourced all of those

00:25:35,010 --> 00:25:42,090
this spring so sourceforge is moving a

00:25:39,150 --> 00:25:45,090
completely new direction and i think has

00:25:42,090 --> 00:25:47,040
a chance to compete again and it's

00:25:45,090 --> 00:25:50,360
because of python if we didn't have

00:25:47,040 --> 00:25:55,410
python we could not have done that

00:25:50,360 --> 00:25:59,700
sourceforge was on a I think my manager

00:25:55,410 --> 00:26:01,380
referred to it as a slow death spiral it

00:25:59,700 --> 00:26:03,930
was just sort of or circling the drain

00:26:01,380 --> 00:26:05,730
that is the more recent metaphor that we

00:26:03,930 --> 00:26:08,690
keep talking about well we used to be

00:26:05,730 --> 00:26:12,240
circling the drain but maybe not anymore

00:26:08,690 --> 00:26:13,940
like and we've had more projects coming

00:26:12,240 --> 00:26:16,980
to sourceforge we've had more traffic

00:26:13,940 --> 00:26:22,290
sourceforge has been I think turned a

00:26:16,980 --> 00:26:24,720
corner since we started using Python so

00:26:22,290 --> 00:26:26,400
you can say we have better management

00:26:24,720 --> 00:26:29,280
now than we did then that's certainly

00:26:26,400 --> 00:26:34,110
true you can say a lot of

00:26:29,280 --> 00:26:36,150
but i think python is clearly one of the

00:26:34,110 --> 00:26:39,210
reasons that we've been able to turn a

00:26:36,150 --> 00:26:41,660
corner so that's all ahead and then

00:26:39,210 --> 00:26:41,660
question

00:26:54,190 --> 00:27:08,460
are there any questions yep in the first

00:27:04,929 --> 00:27:13,480
project you mentioned using Django and

00:27:08,460 --> 00:27:15,190
then for the big one right you didn't

00:27:13,480 --> 00:27:18,250
actually mention what you use for the

00:27:15,190 --> 00:27:21,190
front end um so the second project we

00:27:18,250 --> 00:27:24,340
use turbo gears will use a heavily

00:27:21,190 --> 00:27:26,440
modified version of turbo gears so we

00:27:24,340 --> 00:27:31,210
didn't use sequel alchemy we didn't we

00:27:26,440 --> 00:27:33,029
just use MongoDB so we tore out all of

00:27:31,210 --> 00:27:36,820
the parts of turbo gears that work

00:27:33,029 --> 00:27:39,610
sequel alchemy specific the transaction

00:27:36,820 --> 00:27:41,830
manager we tore out a few things and we

00:27:39,610 --> 00:27:43,389
chose turbo gears over Django

00:27:41,830 --> 00:27:46,480
particularly because it was easy enough

00:27:43,389 --> 00:27:49,720
to tear those pieces out and get just

00:27:46,480 --> 00:27:52,419
what we wanted and we had me and another

00:27:49,720 --> 00:27:56,889
guy who was a turbo gearscore developer

00:27:52,419 --> 00:27:59,470
was hired right at that same time and so

00:27:56,889 --> 00:28:00,970
we knew everything back to forward and

00:27:59,470 --> 00:28:03,090
we were a little worried that there were

00:28:00,970 --> 00:28:05,950
going to be problems in the framework

00:28:03,090 --> 00:28:07,720
that we're gonna that we're going to

00:28:05,950 --> 00:28:10,450
show up because of the scale that we had

00:28:07,720 --> 00:28:12,279
because we were not going to generate

00:28:10,450 --> 00:28:15,639
cached pages we were going to generate

00:28:12,279 --> 00:28:17,440
dynamic pages for every page view

00:28:15,639 --> 00:28:22,029
because we needed to do this system look

00:28:17,440 --> 00:28:25,149
up stuff and whatnot and so we were a

00:28:22,029 --> 00:28:27,700
little worried that Django and or some

00:28:25,149 --> 00:28:30,309
other framework wouldn't keep up to the

00:28:27,700 --> 00:28:32,289
load and then we'd have to fix the

00:28:30,309 --> 00:28:33,909
framework and we didn't know the

00:28:32,289 --> 00:28:37,750
framework as well as we neuter boogers

00:28:33,909 --> 00:28:40,629
it turned out that turbo gears handled

00:28:37,750 --> 00:28:44,289
the load like without any like none of

00:28:40,629 --> 00:28:46,450
our problems where Python web framework

00:28:44,289 --> 00:28:48,220
problems they were all like we were not

00:28:46,450 --> 00:28:52,840
very smart and we made huge project

00:28:48,220 --> 00:28:55,539
record problems and that so Django

00:28:52,840 --> 00:28:58,210
probably would have been fine but also

00:28:55,539 --> 00:29:03,070
Django the advantages of Django like

00:28:58,210 --> 00:29:05,379
genco open ID and Django auth and tango

00:29:03,070 --> 00:29:07,420
admin and all the things that make

00:29:05,379 --> 00:29:11,620
Django

00:29:07,420 --> 00:29:14,020
more valuable for rapid prototyping and

00:29:11,620 --> 00:29:15,760
for getting things done wouldn't have

00:29:14,020 --> 00:29:19,860
applied to us at all because we weren't

00:29:15,760 --> 00:29:22,540
using the Django RM so we would have had

00:29:19,860 --> 00:29:24,820
none of the real advantages of Django

00:29:22,540 --> 00:29:26,830
and we would had all of the

00:29:24,820 --> 00:29:29,320
disadvantages of Django in terms of in

00:29:26,830 --> 00:29:32,200
my opinion the template language which

00:29:29,320 --> 00:29:35,860
is makes me want to hit myself really

00:29:32,200 --> 00:29:37,420
hard other people have a different

00:29:35,860 --> 00:29:38,890
opinion about that they think that the

00:29:37,420 --> 00:29:41,200
constraints that it provides are good

00:29:38,890 --> 00:29:43,960
but I think you should be able to put

00:29:41,200 --> 00:29:49,000
presentation logic in the template

00:29:43,960 --> 00:29:51,400
because that's the presentation layer so

00:29:49,000 --> 00:29:54,460
and we all agreed that that's what we

00:29:51,400 --> 00:29:56,950
thought so we put and we have developers

00:29:54,460 --> 00:30:00,430
who do front end work not designers who

00:29:56,950 --> 00:30:02,920
do front end work so for us keeping

00:30:00,430 --> 00:30:08,830
Python out of the front end was not a

00:30:02,920 --> 00:30:11,740
goal so we use ginger again and ginger

00:30:08,830 --> 00:30:16,690
has been jinjja to now has been very

00:30:11,740 --> 00:30:18,850
useful to us it's fast much faster than

00:30:16,690 --> 00:30:23,640
Django template language much faster

00:30:18,850 --> 00:30:28,450
than the Python default which was Benji

00:30:23,640 --> 00:30:30,640
organ chi so we we we were able to make

00:30:28,450 --> 00:30:33,370
those sort of switches in turbo gears

00:30:30,640 --> 00:30:35,230
really easily and not as easily in

00:30:33,370 --> 00:30:38,680
Django so that's why we made the switch

00:30:35,230 --> 00:30:41,620
and it turned out really well for us we

00:30:38,680 --> 00:30:43,680
got exactly what we needed

00:30:41,620 --> 00:30:43,680
you

00:30:47,620 --> 00:30:53,800
and have you made an assessment in terms

00:30:50,650 --> 00:30:56,530
of effort and time and whatever of what

00:30:53,800 --> 00:31:03,160
it will take to port to baggage of the

00:30:56,530 --> 00:31:10,480
department um it's a very different

00:31:03,160 --> 00:31:12,760
subject turbo gears we're going to work

00:31:10,480 --> 00:31:14,920
with the pylons and pyramid folks we're

00:31:12,760 --> 00:31:19,450
part of the overall pylons project

00:31:14,920 --> 00:31:21,550
whether we actually rewrite turbo gears

00:31:19,450 --> 00:31:24,730
as such on top of pyramid is still an

00:31:21,550 --> 00:31:28,210
open question pylons 1 point 0 is still

00:31:24,730 --> 00:31:29,470
supported we can take over pylons 1

00:31:28,210 --> 00:31:33,040
point 0 support were part of the same

00:31:29,470 --> 00:31:36,460
project it all works so we may or may

00:31:33,040 --> 00:31:38,590
not jump on top of pyramid we certainly

00:31:36,460 --> 00:31:43,380
are going to continue to work with them

00:31:38,590 --> 00:31:47,980
to build new tools and tools that work

00:31:43,380 --> 00:31:51,520
for both us and pyramid my cores

00:31:47,980 --> 00:31:53,020
recently SQ alchemy helper thing is

00:31:51,520 --> 00:31:55,720
something that i think we're going to

00:31:53,020 --> 00:31:57,730
incorporate i hope that we're going to

00:31:55,720 --> 00:31:59,290
incorporate into turbo gears and then

00:31:57,730 --> 00:32:01,450
it'll be incorporated in the pyramid and

00:31:59,290 --> 00:32:05,020
it'll make moving back and forth between

00:32:01,450 --> 00:32:08,290
those much easier and my my hope and

00:32:05,020 --> 00:32:10,929
goal is that as time goes on in a not

00:32:08,290 --> 00:32:13,240
backwards incompatible way we can move

00:32:10,929 --> 00:32:17,280
together to a place where we can write

00:32:13,240 --> 00:32:20,620
shared components like an admin thing

00:32:17,280 --> 00:32:23,610
like those sorts of sight components

00:32:20,620 --> 00:32:26,470
that we can share across turbo gears and

00:32:23,610 --> 00:32:28,960
straight pyramid and then if there's a

00:32:26,470 --> 00:32:32,350
new full sack layer on top of a pyramid

00:32:28,960 --> 00:32:34,840
that that turbo gears and that will be

00:32:32,350 --> 00:32:37,420
sharing a lot but our goal for right now

00:32:34,840 --> 00:32:39,610
is turbo gears should stay compatible

00:32:37,420 --> 00:32:43,030
with turbo gears that's higher than

00:32:39,610 --> 00:32:46,410
moving on top of the pyramid because we

00:32:43,030 --> 00:32:46,410
do not want to screw all of our users

00:32:47,090 --> 00:33:00,510
hi my question is a bit of topic the

00:32:55,920 --> 00:33:06,870
sourceforge seems or seemed always a bit

00:33:00,510 --> 00:33:10,500
old dinosaur to me the popularity the

00:33:06,870 --> 00:33:14,250
impact of popularity of get up who

00:33:10,500 --> 00:33:23,190
should the two massive chains to

00:33:14,250 --> 00:33:25,800
sourceforge um i think google code was

00:33:23,190 --> 00:33:28,080
the warning shot across the bow for

00:33:25,800 --> 00:33:30,240
sourceforge where they realized that if

00:33:28,080 --> 00:33:34,380
they don't do something they'll become

00:33:30,240 --> 00:33:36,870
irrelevant they didn't have subversion

00:33:34,380 --> 00:33:38,370
support like they decided that they were

00:33:36,870 --> 00:33:41,070
going to get better and then it took

00:33:38,370 --> 00:33:45,360
them a while to figure out how to get

00:33:41,070 --> 00:33:47,400
better and really like they had decided

00:33:45,360 --> 00:33:50,190
that they were going to try to compete

00:33:47,400 --> 00:33:53,000
with google code and github and and

00:33:50,190 --> 00:33:55,320
those sorts of people when i started

00:33:53,000 --> 00:33:58,679
they were just struggling to be able to

00:33:55,320 --> 00:34:00,270
do it and now they're not i think as

00:33:58,679 --> 00:34:03,150
much struggling to figure out how to do

00:34:00,270 --> 00:34:05,550
it because they have Python they have a

00:34:03,150 --> 00:34:08,040
talented developer team that knows what

00:34:05,550 --> 00:34:10,800
they're doing in cares and they had that

00:34:08,040 --> 00:34:12,210
before they just didn't have Python and

00:34:10,800 --> 00:34:15,869
all of the tools that it provides they

00:34:12,210 --> 00:34:18,419
didn't have a modern framework and they

00:34:15,869 --> 00:34:20,520
had management difficulties there was a

00:34:18,419 --> 00:34:22,859
lot of chasing after the thing of the

00:34:20,520 --> 00:34:26,100
week so you'd start a project and then

00:34:22,859 --> 00:34:28,020
never quite finish phosphorus would be

00:34:26,100 --> 00:34:29,820
an example we spent two months on that

00:34:28,020 --> 00:34:35,070
and then we threw it away like we took

00:34:29,820 --> 00:34:39,990
it down doesn't even exist anymore but

00:34:35,070 --> 00:34:42,600
yeah we are we want to be relevant in

00:34:39,990 --> 00:34:45,359
the open source hosting space we are in

00:34:42,600 --> 00:34:47,970
terms of downloads we have way more we

00:34:45,359 --> 00:34:51,270
have 500 this quarter i think we will

00:34:47,970 --> 00:34:55,470
have 500 million downloads from

00:34:51,270 --> 00:34:58,349
sourceforge the big number and is a much

00:34:55,470 --> 00:35:00,239
bigger number than github like

00:34:58,349 --> 00:35:10,529
a couple of order of magnitudes if not

00:35:00,239 --> 00:35:13,289
several orders of magnitude so we we do

00:35:10,529 --> 00:35:18,210
know we need to make big changes and we

00:35:13,289 --> 00:35:20,039
are doing it on that other hand like I'm

00:35:18,210 --> 00:35:22,220
also of the opinion that github is a

00:35:20,039 --> 00:35:25,200
good thing and there should be diversity

00:35:22,220 --> 00:35:27,809
in an open source project hosting

00:35:25,200 --> 00:35:29,910
ecosystem and I'm happy for them to

00:35:27,809 --> 00:35:32,039
exist and I think it's better for the

00:35:29,910 --> 00:35:34,650
open source world to have multiple

00:35:32,039 --> 00:35:41,160
options I just think sourceforge has to

00:35:34,650 --> 00:35:45,079
be a relevant one of those options was

00:35:41,160 --> 00:35:45,079
there a question over there or no

00:35:49,420 --> 00:35:54,059

YouTube URL: https://www.youtube.com/watch?v=k-wbWT8KwAI


