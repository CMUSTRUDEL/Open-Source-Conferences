Title: New beauty in Camelot
Publication date: 2015-04-19
Playlist: EuroPython 2011
Description: 
	[EuroPython 2011] Erik Janssens,Jeroen Dierckx - 22 June 2011 in "Track Ravioli
"
Captions: 
	00:00:06,350 --> 00:00:13,920
thank you for the warm welcome so we

00:00:11,940 --> 00:00:16,279
have a project called Camelot and we'll

00:00:13,920 --> 00:00:19,350
be telling you what we did this year

00:00:16,279 --> 00:00:22,580
last year we spoke in Birmingham there

00:00:19,350 --> 00:00:25,289
we gave a talk about Camelot in general

00:00:22,580 --> 00:00:31,920
this year will be speaking about the new

00:00:25,289 --> 00:00:39,050
beauty so I'm be romedigs this is my

00:00:31,920 --> 00:00:42,329
colleague Erika ounces this is our data

00:00:39,050 --> 00:00:48,510
I'm going to skip further introduction

00:00:42,329 --> 00:00:53,850
please refer to these links our project

00:00:48,510 --> 00:00:57,409
uses Python and cute and sequel alchemy

00:00:53,850 --> 00:01:02,699
as a the main building blocks maybe

00:00:57,409 --> 00:01:11,780
coach show of hands who uses cute who

00:01:02,699 --> 00:01:15,000
uses by cute who uses spy side okay cool

00:01:11,780 --> 00:01:18,149
the main website Python Camelot with

00:01:15,000 --> 00:01:22,740
hyphen and the mailing list can be found

00:01:18,149 --> 00:01:28,530
on google groups so let's kick off what

00:01:22,740 --> 00:01:31,590
is Camelot here you can see well first

00:01:28,530 --> 00:01:33,479
of all Camelot is a framework it's a

00:01:31,590 --> 00:01:36,450
framework to develop rich GUI

00:01:33,479 --> 00:01:39,479
applications and the speed of

00:01:36,450 --> 00:01:44,670
development is a kind of crucial as well

00:01:39,479 --> 00:01:50,700
as the ease of use for the the end user

00:01:44,670 --> 00:01:53,060
in the other order so we we really want

00:01:50,700 --> 00:01:56,189
to give the end user a good experience

00:01:53,060 --> 00:02:00,299
that's what it is this is how it looks

00:01:56,189 --> 00:02:04,549
like to define an object an entity and

00:02:00,299 --> 00:02:10,009
as you can see it's inspired by Django

00:02:04,549 --> 00:02:10,009
to define the fields in a simple way

00:02:10,610 --> 00:02:15,300
here you can see a movie entity which

00:02:14,490 --> 00:02:16,950
has a title

00:02:15,300 --> 00:02:21,030
a short description a release date on a

00:02:16,950 --> 00:02:24,900
genre and they are all fields where you

00:02:21,030 --> 00:02:29,280
specify what type they are Unicode date

00:02:24,900 --> 00:02:33,180
and so on every entity has to have an

00:02:29,280 --> 00:02:35,820
admin class where you can specify at

00:02:33,180 --> 00:02:39,150
least as you can see here what needs to

00:02:35,820 --> 00:02:44,270
be displayed in the list that's

00:02:39,150 --> 00:02:44,270
basically the the core of the project

00:02:45,260 --> 00:02:55,050
this is what it looks like in Linux so

00:02:49,410 --> 00:02:57,930
here you have a navigation pane you have

00:02:55,050 --> 00:03:03,560
a toolbar you have tabs we'll talk about

00:02:57,930 --> 00:03:08,070
that later and you get a list with

00:03:03,560 --> 00:03:10,260
filters actions we'll talk about all

00:03:08,070 --> 00:03:12,780
these and here you can see the columns

00:03:10,260 --> 00:03:17,780
that we saw in the code cover-title

00:03:12,780 --> 00:03:21,690
release date rating and if you click on

00:03:17,780 --> 00:03:24,170
row you get the object itself will see

00:03:21,690 --> 00:03:24,170
that later on

00:03:29,840 --> 00:03:35,840
so an important question is of course

00:03:32,720 --> 00:03:37,790
why should one use Camelot first of all

00:03:35,840 --> 00:03:41,030
because its user and developer friendly

00:03:37,790 --> 00:03:42,560
we really spend a lot of time looking at

00:03:41,030 --> 00:03:45,830
users how they are using the application

00:03:42,560 --> 00:03:48,040
and then improving upon it so that it's

00:03:45,830 --> 00:03:51,290
intuitive for the user to use and

00:03:48,040 --> 00:03:53,870
developer friendly because Camelot it's

00:03:51,290 --> 00:03:56,120
a framework but we try to make it a

00:03:53,870 --> 00:03:58,430
framework that you can customize without

00:03:56,120 --> 00:04:01,129
the need to monkey patch so it's it's

00:03:58,430 --> 00:04:02,870
exists out of a set of base classes and

00:04:01,129 --> 00:04:05,269
you can always subclass one of those

00:04:02,870 --> 00:04:07,280
classes we implement some of its methods

00:04:05,269 --> 00:04:09,590
to customize the behavior and then

00:04:07,280 --> 00:04:11,720
inject this clause back into your

00:04:09,590 --> 00:04:13,910
application so you can customize things

00:04:11,720 --> 00:04:17,690
without you know it without using dirty

00:04:13,910 --> 00:04:19,870
tricks it's based on on cute and sequel

00:04:17,690 --> 00:04:22,970
alchemy which are both very mature

00:04:19,870 --> 00:04:25,760
libraries so with cute you can develop

00:04:22,970 --> 00:04:28,520
cross-platform applications which are

00:04:25,760 --> 00:04:30,530
very very nice to use and sequel Elohim

00:04:28,520 --> 00:04:33,770
is is without dubbed it's the the best

00:04:30,530 --> 00:04:35,720
worm for for python that you can get it

00:04:33,770 --> 00:04:38,060
has a lot of very advanced features and

00:04:35,720 --> 00:04:39,889
and this is very useful if you start a

00:04:38,060 --> 00:04:42,229
small application but once your

00:04:39,889 --> 00:04:44,240
application grows you will need more

00:04:42,229 --> 00:04:46,460
advanced features and those are role in

00:04:44,240 --> 00:04:48,080
psychology me so that's that's very good

00:04:46,460 --> 00:04:50,810
to know if you start developing an

00:04:48,080 --> 00:04:53,000
application it's also a very productive

00:04:50,810 --> 00:04:55,099
environment to develop applications in

00:04:53,000 --> 00:04:58,130
if you have an ID for a database

00:04:55,099 --> 00:05:02,030
application you can go very fast from

00:04:58,130 --> 00:05:06,169
just from ID to to implementation that's

00:05:02,030 --> 00:05:08,870
because it's based on the Django admin

00:05:06,169 --> 00:05:11,389
interface of Django works so that's also

00:05:08,870 --> 00:05:14,800
very productive so we took a lot of ids

00:05:11,389 --> 00:05:17,330
from it that we reused in Camelot and

00:05:14,800 --> 00:05:19,720
the application is multi-threaded from

00:05:17,330 --> 00:05:22,639
the start now why is this important in

00:05:19,720 --> 00:05:24,979
Camelot we have a GUI threat which runs

00:05:22,639 --> 00:05:26,750
basically all the cutie stuff and we

00:05:24,979 --> 00:05:29,210
have a model threat which runs all the

00:05:26,750 --> 00:05:31,099
sequel alchemy stuff and this means if

00:05:29,210 --> 00:05:32,990
if you have a query that is that is a

00:05:31,099 --> 00:05:35,120
little bit slow or there is a network

00:05:32,990 --> 00:05:37,430
connection that is slow or a file is

00:05:35,120 --> 00:05:40,159
opening slow or it's a very large file

00:05:37,430 --> 00:05:41,719
your application will never freeze so

00:05:40,159 --> 00:05:43,590
there is always a first level of

00:05:41,719 --> 00:05:45,420
security against free

00:05:43,590 --> 00:05:47,160
of applications because of this

00:05:45,420 --> 00:05:50,490
separation of the modeling one threat

00:05:47,160 --> 00:05:52,830
and the GUI in the other thread and

00:05:50,490 --> 00:05:54,990
Camelot was developed from day one with

00:05:52,830 --> 00:05:56,690
multi threading in mind so as you all

00:05:54,990 --> 00:05:59,160
know it's it's very difficult to

00:05:56,690 --> 00:06:01,170
implement multi-threading in an in an

00:05:59,160 --> 00:06:06,150
application that was not designed this

00:06:01,170 --> 00:06:09,090
way but don't believe Eric's word on how

00:06:06,150 --> 00:06:12,930
howdy why you should use Camelot here

00:06:09,090 --> 00:06:15,380
are some quotes mainly from the mailing

00:06:12,930 --> 00:06:20,400
list because that's one of our main

00:06:15,380 --> 00:06:22,020
communication channels mr. J Fuli says

00:06:20,400 --> 00:06:25,710
Camelot is proving to be great software

00:06:22,020 --> 00:06:29,250
development environment this quote is

00:06:25,710 --> 00:06:36,240
not new so it's proving to be I think

00:06:29,250 --> 00:06:38,370
maybe it's already proven hence on the

00:06:36,240 --> 00:06:44,160
mailing lists we couldn't find his last

00:06:38,370 --> 00:06:45,570
name maybe is here nope but we wanted to

00:06:44,160 --> 00:06:49,020
put it in here because you know it's

00:06:45,570 --> 00:06:50,730
just fun to use if a user if someone

00:06:49,020 --> 00:06:53,010
uses your software and says it's fun to

00:06:50,730 --> 00:06:56,220
use you know makes it there that's

00:06:53,010 --> 00:07:04,410
that's fun that's nice to hear enjoyment

00:06:56,220 --> 00:07:06,840
yeah looks really promising and mr.

00:07:04,410 --> 00:07:08,970
Kaiser says I'm already able to build

00:07:06,840 --> 00:07:17,580
desktop application that warp speed just

00:07:08,970 --> 00:07:22,830
as promised so let's so with this

00:07:17,580 --> 00:07:25,610
introductory we can start the talk let's

00:07:22,830 --> 00:07:29,970
just say what we're going to talk about

00:07:25,610 --> 00:07:32,400
we split the stock up into big parts new

00:07:29,970 --> 00:07:35,100
features and lessons learned lessons

00:07:32,400 --> 00:07:39,990
learned is at the back not it's the

00:07:35,100 --> 00:07:41,970
smallest part the new features are as

00:07:39,990 --> 00:07:44,460
you can see that base desktop displaying

00:07:41,970 --> 00:07:47,160
queries tableview dynamic field

00:07:44,460 --> 00:07:49,800
attributes actions with options and

00:07:47,160 --> 00:07:52,080
matplotlib integration and then at the

00:07:49,800 --> 00:07:57,370
end we'll talk about what we learned

00:07:52,080 --> 00:08:00,120
this year we had a lot of deployments

00:07:57,370 --> 00:08:03,160
we had a lot of we had a couple of

00:08:00,120 --> 00:08:08,250
successful commercial applications on

00:08:03,160 --> 00:08:11,680
top of Camelot which well we'll discuss

00:08:08,250 --> 00:08:13,810
what we learn from that and how it

00:08:11,680 --> 00:08:28,889
affected our development model and how

00:08:13,810 --> 00:08:32,229
we sharpen their tools so yeah okay

00:08:28,889 --> 00:08:33,909
first up that pace desktop we used to

00:08:32,229 --> 00:08:36,820
have an application with separate

00:08:33,909 --> 00:08:39,719
windows we looked at the users and they

00:08:36,820 --> 00:08:42,760
didn't get it so we switched to tabs

00:08:39,719 --> 00:08:48,490
every browser these days has it so it's

00:08:42,760 --> 00:08:56,140
intuitive users they know it at the snap

00:08:48,490 --> 00:09:02,560
of a finger so let's see it work note

00:08:56,140 --> 00:09:05,440
this is a Mac this rounds on a Mac we

00:09:02,560 --> 00:09:07,720
had linux screenshots we have windows

00:09:05,440 --> 00:09:12,070
movies in this presentation it's all

00:09:07,720 --> 00:09:14,470
real so let's see what happens so you

00:09:12,070 --> 00:09:17,560
see we have a Home tab it's always there

00:09:14,470 --> 00:09:21,550
you can't close it because it can

00:09:17,560 --> 00:09:24,510
contain actions application actions here

00:09:21,550 --> 00:09:27,400
you see it's a is to create a new movie

00:09:24,510 --> 00:09:30,459
opens up a new window you have a form to

00:09:27,400 --> 00:09:36,029
create the new movie not going to do

00:09:30,459 --> 00:09:39,850
anything here you can open another tab

00:09:36,029 --> 00:09:41,620
like the movie list you can see I have

00:09:39,850 --> 00:09:46,209
two tabs the Home tab is always there

00:09:41,620 --> 00:09:49,300
and the movie tab is also consultable if

00:09:46,209 --> 00:09:53,830
you right-click you can open the tab in

00:09:49,300 --> 00:09:58,839
a new window in you can open a list in a

00:09:53,830 --> 00:10:04,000
new tab sorry and you can easily switch

00:09:58,839 --> 00:10:06,430
between them you can close the tab and

00:10:04,000 --> 00:10:10,320
if you double click on a tab it

00:10:06,430 --> 00:10:14,790
maximizes note because this is a

00:10:10,320 --> 00:10:17,310
on a Mac we still have the the main menu

00:10:14,790 --> 00:10:25,710
file edit view help on Windows this

00:10:17,310 --> 00:10:27,930
disappears so you get maximum view okay

00:10:25,710 --> 00:10:32,600
so one of the new features of Camelot is

00:10:27,930 --> 00:10:35,820
the ability to display query results so

00:10:32,600 --> 00:10:39,000
until last year you could easily display

00:10:35,820 --> 00:10:41,190
and edit tables in a database but now

00:10:39,000 --> 00:10:43,860
you can also define queries and then

00:10:41,190 --> 00:10:46,380
display and edit those so how does that

00:10:43,860 --> 00:10:50,150
work suppose we have a very simple model

00:10:46,380 --> 00:10:52,770
here we have movies and a movie has a

00:10:50,150 --> 00:10:55,470
director which is a person so there's a

00:10:52,770 --> 00:10:58,740
link between movie and person and then

00:10:55,470 --> 00:11:00,720
we have visitor reports which is the

00:10:58,740 --> 00:11:02,850
number of visitors that want to look at

00:11:00,720 --> 00:11:04,620
a movie on a specific date so we have a

00:11:02,850 --> 00:11:09,000
relation between visitor report and

00:11:04,620 --> 00:11:11,940
movies now suppose we want to to show to

00:11:09,000 --> 00:11:14,160
the user how many visitors went to a

00:11:11,940 --> 00:11:16,530
movie of a certain director without

00:11:14,160 --> 00:11:23,280
doing this in some kind of report but

00:11:16,530 --> 00:11:25,680
directly into the GUI so this is how how

00:11:23,280 --> 00:11:27,300
it looks like in code we have a person

00:11:25,680 --> 00:11:30,450
with two fields a first name and a last

00:11:27,300 --> 00:11:32,580
name a movie with a director which

00:11:30,450 --> 00:11:34,650
refers to the person and then we have a

00:11:32,580 --> 00:11:37,980
visitor report which refers to the movie

00:11:34,650 --> 00:11:44,670
and as a field visitors with the number

00:11:37,980 --> 00:11:47,940
of visitors so to display the result

00:11:44,670 --> 00:11:49,800
that we want in in Camelot we first need

00:11:47,940 --> 00:11:51,600
an object because Camelot works on

00:11:49,800 --> 00:11:54,450
objects that are mapped true sequel

00:11:51,600 --> 00:11:57,450
alchemy so we just define a visitors /

00:11:54,450 --> 00:12:00,570
director object with a little admin

00:11:57,450 --> 00:12:03,210
interface to tell it which fields we

00:12:00,570 --> 00:12:05,610
want to display in the list but we don't

00:12:03,210 --> 00:12:08,040
define fields in here because there's

00:12:05,610 --> 00:12:11,490
actually no no table behind behind these

00:12:08,040 --> 00:12:14,010
objects so all the attributes of this of

00:12:11,490 --> 00:12:16,650
this object will be put there bicycle

00:12:14,010 --> 00:12:20,150
alchemy we just tell it to display those

00:12:16,650 --> 00:12:20,150
attributes in the list

00:12:21,450 --> 00:12:26,980
so how do we proceed them first we

00:12:25,029 --> 00:12:29,680
create a select statement in sequel

00:12:26,980 --> 00:12:31,510
alchemy so we say select and then we say

00:12:29,680 --> 00:12:34,390
which feels we want in our select

00:12:31,510 --> 00:12:37,510
statement that's from from line 42 line

00:12:34,390 --> 00:12:39,970
seven so we take the person the primary

00:12:37,510 --> 00:12:42,760
key of person which is party ID we take

00:12:39,970 --> 00:12:45,790
his first name is lost them we take the

00:12:42,760 --> 00:12:48,430
sum of all the visitors and then we

00:12:45,790 --> 00:12:50,260
specify the very close on line 9 where

00:12:48,430 --> 00:12:52,420
we say we want the persons that are

00:12:50,260 --> 00:12:54,610
associated with a movie as a director

00:12:52,420 --> 00:12:57,550
and we take the visitor reports which

00:12:54,610 --> 00:13:01,029
are associated with a movie and then we

00:12:57,550 --> 00:13:02,560
group this this result set by the person

00:13:01,029 --> 00:13:06,760
feels because we want to group

00:13:02,560 --> 00:13:08,650
everything by director notice that you

00:13:06,760 --> 00:13:10,210
don't have to specify from which tables

00:13:08,650 --> 00:13:15,970
you're selecting that's something

00:13:10,210 --> 00:13:18,190
psychologically will do for you and then

00:13:15,970 --> 00:13:21,190
we map this this this select statement

00:13:18,190 --> 00:13:23,290
that's in line 18 we map the Select

00:13:21,190 --> 00:13:27,040
statement to our visitors / director

00:13:23,290 --> 00:13:29,380
object you can see that you don't need

00:13:27,040 --> 00:13:32,950
to specify the primary key sequel on him

00:13:29,380 --> 00:13:35,140
is to use for mapping this this result

00:13:32,950 --> 00:13:37,839
set to the objects because it will

00:13:35,140 --> 00:13:40,930
sequel army will be smart enough to take

00:13:37,839 --> 00:13:43,390
the person party ID for it if your

00:13:40,930 --> 00:13:45,610
select statements are more difficult or

00:13:43,390 --> 00:13:48,520
you have compound primary keys then it

00:13:45,610 --> 00:13:51,910
might be needed to specify those and we

00:13:48,520 --> 00:13:54,610
also tell it to always refresh its

00:13:51,910 --> 00:13:56,830
mapping this means that every time the

00:13:54,610 --> 00:13:59,080
query will be executed sequel action we

00:13:56,830 --> 00:14:03,670
will update the values the attribute

00:13:59,080 --> 00:14:06,279
values of the mapped objects okay that's

00:14:03,670 --> 00:14:09,250
all we have to do and we put this in the

00:14:06,279 --> 00:14:12,790
in the in the user interface and you get

00:14:09,250 --> 00:14:19,390
this nice resulting this nice table that

00:14:12,790 --> 00:14:24,779
you can use so we will slide about table

00:14:19,390 --> 00:14:29,050
views also a movie just to demonstrate

00:14:24,779 --> 00:14:31,130
we have frozen counts column one here to

00:14:29,050 --> 00:14:34,010
cover column

00:14:31,130 --> 00:14:38,660
it stays frozen well you can scroll the

00:14:34,010 --> 00:14:41,960
other columns just something new we

00:14:38,660 --> 00:14:44,630
would we would like to show you how easy

00:14:41,960 --> 00:14:47,510
it is to specify this in the admin list

00:14:44,630 --> 00:14:50,270
frozen list columns frozen and specify

00:14:47,510 --> 00:14:58,190
the amount of the number of columns you

00:14:50,270 --> 00:15:00,800
want to freeze then dynamic field

00:14:58,190 --> 00:15:04,340
attributes what our field attributes in

00:15:00,800 --> 00:15:06,920
Camelot field attributes are they

00:15:04,340 --> 00:15:09,800
specify how Camelot should render a

00:15:06,920 --> 00:15:12,440
certain field in the India graphical

00:15:09,800 --> 00:15:15,160
user interface so for each field you can

00:15:12,440 --> 00:15:18,440
specify a number of attributes like

00:15:15,160 --> 00:15:19,970
minimum or maximum or precision which is

00:15:18,440 --> 00:15:23,270
the numbers behind the decimal point

00:15:19,970 --> 00:15:25,220
where we can specify the suffix now all

00:15:23,270 --> 00:15:27,520
those attributes they can be static like

00:15:25,220 --> 00:15:30,890
you say for example the suffix is always

00:15:27,520 --> 00:15:33,170
m4 meter but those filter tributes can

00:15:30,890 --> 00:15:35,450
also be dynamic this means you can you

00:15:33,170 --> 00:15:37,430
can use a function as a field attribute

00:15:35,450 --> 00:15:40,340
and then Camelot will evaluate this

00:15:37,430 --> 00:15:42,080
function for each object and will change

00:15:40,340 --> 00:15:44,540
the field attributes according to the

00:15:42,080 --> 00:15:46,730
result of this function now until last

00:15:44,540 --> 00:15:49,130
year this only worked for like two field

00:15:46,730 --> 00:15:52,040
attributes like tooltip and background

00:15:49,130 --> 00:15:54,320
color but as of as of the last release

00:15:52,040 --> 00:15:58,910
this works for most of the of the field

00:15:54,320 --> 00:16:00,910
attributes so in this example we'll

00:15:58,910 --> 00:16:03,680
demonstrate a financial product a

00:16:00,910 --> 00:16:05,720
financial product is something like can

00:16:03,680 --> 00:16:07,970
be a savings account so we made a

00:16:05,720 --> 00:16:10,550
financial product called the Python

00:16:07,970 --> 00:16:12,500
investment and a financial product can

00:16:10,550 --> 00:16:15,410
have certain features like interest rate

00:16:12,500 --> 00:16:17,540
it can have an entry fee a minimum

00:16:15,410 --> 00:16:21,020
number of days your money needs to be in

00:16:17,540 --> 00:16:22,610
the savings account and we will just

00:16:21,020 --> 00:16:25,130
show you how easy it is with those

00:16:22,610 --> 00:16:27,380
dynamic field attributes to make a very

00:16:25,130 --> 00:16:30,230
simple data structure to define very

00:16:27,380 --> 00:16:32,630
complex products so this is the list of

00:16:30,230 --> 00:16:35,150
all the features of a certain financial

00:16:32,630 --> 00:16:37,850
product and then we will you see that

00:16:35,150 --> 00:16:40,130
each feature as a different suffix a

00:16:37,850 --> 00:16:43,330
different precision and it can have a

00:16:40,130 --> 00:16:43,330
different background color as well

00:16:43,860 --> 00:16:55,589
so here is the form of one of those

00:16:46,980 --> 00:16:57,750
features and you see the this is the

00:16:55,589 --> 00:16:59,490
drop-down box with the feature and if

00:16:57,750 --> 00:17:02,490
you change the feature you see that the

00:16:59,490 --> 00:17:06,620
value the the suffix of the value

00:17:02,490 --> 00:17:06,620
changes as well as its its precision

00:17:15,770 --> 00:17:23,060
and its tooltip as well and its

00:17:21,500 --> 00:17:25,430
background can change as well depending

00:17:23,060 --> 00:17:28,430
on the value you entered for example if

00:17:25,430 --> 00:17:31,220
you entered values that are probably

00:17:28,430 --> 00:17:33,740
bogus like interest rates that are too

00:17:31,220 --> 00:17:40,430
high if you're not living in Greece this

00:17:33,740 --> 00:17:43,460
is probably not true so how do we

00:17:40,430 --> 00:17:47,110
implement such thing first of all you

00:17:43,460 --> 00:17:50,180
define an enumeration of features so the

00:17:47,110 --> 00:17:52,670
IRIN line one until three we have this

00:17:50,180 --> 00:17:54,050
enumeration where one two and three will

00:17:52,670 --> 00:17:56,240
be the values that are stored in the

00:17:54,050 --> 00:18:00,410
database and then the user will see

00:17:56,240 --> 00:18:03,200
interest rate tax rate or entry fee then

00:18:00,410 --> 00:18:06,920
we define a feature clause where we can

00:18:03,200 --> 00:18:10,250
have many features for one product and a

00:18:06,920 --> 00:18:12,740
feature has a name which which is what's

00:18:10,250 --> 00:18:19,160
specified in the enumeration and it can

00:18:12,740 --> 00:18:21,470
have a value which is a numeric field so

00:18:19,160 --> 00:18:24,680
how to introduce the dynamic field

00:18:21,470 --> 00:18:26,750
attributes we extend the feature table a

00:18:24,680 --> 00:18:29,630
little bit so we add for each feature a

00:18:26,750 --> 00:18:32,900
specific suffix and then we create a

00:18:29,630 --> 00:18:35,390
function on line 8 value suffix which

00:18:32,900 --> 00:18:37,880
gives the suffix that should be used for

00:18:35,390 --> 00:18:41,020
a certain feature depending on on the

00:18:37,880 --> 00:18:44,900
name of the feature and then in line 18

00:18:41,020 --> 00:18:47,030
we tell camelot to use this value suffix

00:18:44,900 --> 00:18:49,700
function as the field attribute for

00:18:47,030 --> 00:18:52,520
suffix for the value field and then

00:18:49,700 --> 00:18:54,140
every time the the name of the feature

00:18:52,520 --> 00:18:56,030
changes Camelot will evaluate this

00:18:54,140 --> 00:19:01,250
function and change the suffix of the

00:18:56,030 --> 00:19:04,310
value and to make this more complex we

00:19:01,250 --> 00:19:06,230
cannot for example a threshold at the

00:19:04,310 --> 00:19:08,810
last column of our features table and

00:19:06,230 --> 00:19:12,590
this we'll define when when a feature

00:19:08,810 --> 00:19:14,920
becomes probably invalid and then we

00:19:12,590 --> 00:19:17,840
create a value background color function

00:19:14,920 --> 00:19:20,390
which will return the background color

00:19:17,840 --> 00:19:23,450
of the value depending on the value

00:19:20,390 --> 00:19:25,550
itself so notice that there is this

00:19:23,450 --> 00:19:27,340
color scheme clause this color scheme

00:19:25,550 --> 00:19:29,630
plus contains all the colors of the

00:19:27,340 --> 00:19:31,940
tango color team

00:19:29,630 --> 00:19:34,460
so if you use colors from this class

00:19:31,940 --> 00:19:39,020
you're certain that they they map well

00:19:34,460 --> 00:19:41,960
to the to the interface and then again

00:19:39,020 --> 00:19:44,420
in the field attributes we say the

00:19:41,960 --> 00:19:46,640
background color of the value can be get

00:19:44,420 --> 00:19:49,550
from the value background color function

00:19:46,640 --> 00:19:52,940
and this way you can you can very easily

00:19:49,550 --> 00:19:55,370
create something to configure complex

00:19:52,940 --> 00:19:57,200
products and also if you if you need new

00:19:55,370 --> 00:20:00,140
features for a product it's just adding

00:19:57,200 --> 00:20:02,960
one line in the table and you're done so

00:20:00,140 --> 00:20:06,440
for example in this in this application

00:20:02,960 --> 00:20:08,300
we have more than 20 features and every

00:20:06,440 --> 00:20:10,880
month users ask new features and it's

00:20:08,300 --> 00:20:16,220
just a little bit of work for us to do

00:20:10,880 --> 00:20:19,850
add them another area where we did a lot

00:20:16,220 --> 00:20:22,910
of work this year is actions quick

00:20:19,850 --> 00:20:26,060
overview actions can have a different

00:20:22,910 --> 00:20:30,440
context they can work on lists forms and

00:20:26,060 --> 00:20:34,670
the entire application and you can the

00:20:30,440 --> 00:20:37,880
act and actions can run in the model or

00:20:34,670 --> 00:20:42,500
in the GUI thread an example of this is

00:20:37,880 --> 00:20:46,340
the docx for Mac shin which we use a lot

00:20:42,500 --> 00:20:50,990
the clients really appreciate this it's

00:20:46,340 --> 00:20:54,710
a way to generate word XML and open them

00:20:50,990 --> 00:21:00,290
directly in word so the client can have

00:20:54,710 --> 00:21:04,640
a nice report which he can later edit if

00:21:00,290 --> 00:21:07,220
you want so here's this in action you

00:21:04,640 --> 00:21:10,160
have the action buttons there one of

00:21:07,220 --> 00:21:15,320
which is account state if I click it a

00:21:10,160 --> 00:21:22,400
word document opens which can be layout

00:21:15,320 --> 00:21:28,490
it by somebody else and you can see it's

00:21:22,400 --> 00:21:30,790
still word so user can I can always edit

00:21:28,490 --> 00:21:30,790
it

00:21:35,650 --> 00:21:44,360
yes no no that's that's just custom you

00:21:41,990 --> 00:21:46,310
make whatever you take actually you take

00:21:44,360 --> 00:21:48,080
a word document you create a word

00:21:46,310 --> 00:21:51,050
document in Word you save it as a dot

00:21:48,080 --> 00:21:53,480
XML file and then you you run it through

00:21:51,050 --> 00:21:55,400
XML linked to clean it a bit and then

00:21:53,480 --> 00:21:58,310
you create your template from it but

00:21:55,400 --> 00:22:06,470
you're going will explain yes so let's

00:21:58,310 --> 00:22:09,620
see how it works so you create a an

00:22:06,470 --> 00:22:15,230
object which extends docx form action

00:22:09,620 --> 00:22:20,440
available in Camelot and you create a

00:22:15,230 --> 00:22:25,280
context the context here contains the

00:22:20,440 --> 00:22:28,040
variables or the placeholders where you

00:22:25,280 --> 00:22:31,190
assign the values too so we have here

00:22:28,040 --> 00:22:33,400
today which has a date account is an

00:22:31,190 --> 00:22:37,910
object subscribers can be a list

00:22:33,400 --> 00:22:41,840
correspondent can be a list to you

00:22:37,910 --> 00:22:46,490
specify a get template method which just

00:22:41,840 --> 00:22:50,840
gets the xml file which you probably got

00:22:46,490 --> 00:22:56,690
from your client and you load up the

00:22:50,840 --> 00:22:59,810
environment which peaks for itself I

00:22:56,690 --> 00:23:05,090
think you can use any environment we

00:22:59,810 --> 00:23:08,450
mostly use ginger for example of how the

00:23:05,090 --> 00:23:12,320
XML looks like a word XML file where you

00:23:08,450 --> 00:23:17,300
can place the place holder which will

00:23:12,320 --> 00:23:24,500
get filled in here we use ginger like I

00:23:17,300 --> 00:23:26,920
said we use the today label and we run

00:23:24,500 --> 00:23:32,630
it through a ginger filter date to

00:23:26,920 --> 00:23:37,490
nicely formatted another very cool

00:23:32,630 --> 00:23:40,640
feature which a lot of clients love is a

00:23:37,490 --> 00:23:46,989
the document merger which is in Camelot

00:23:40,640 --> 00:23:53,989
for free you make a document like

00:23:46,989 --> 00:23:56,509
like it doesn't matter here I made a

00:23:53,989 --> 00:24:04,090
small document with some place holders

00:23:56,509 --> 00:24:07,609
and I use the obg obj object to get the

00:24:04,090 --> 00:24:12,619
specific fields from the object we have

00:24:07,609 --> 00:24:15,289
title we have director and so on of

00:24:12,619 --> 00:24:19,820
course little magic needs to be done

00:24:15,289 --> 00:24:23,629
with XML linked to to get word to play

00:24:19,820 --> 00:24:32,029
nice with these these tags let's see it

00:24:23,629 --> 00:24:34,159
in action link yes like I said we use

00:24:32,029 --> 00:24:42,070
these placeholders these ginger

00:24:34,159 --> 00:24:46,970
placeholders here we start from that

00:24:42,070 --> 00:24:52,009
here I open up the movies list I select

00:24:46,970 --> 00:24:55,549
three movies go to edit merge document

00:24:52,009 --> 00:25:03,289
and select the xml file that i just

00:24:55,549 --> 00:25:04,820
showed you click Next and three

00:25:03,289 --> 00:25:07,940
documents are generated because I

00:25:04,820 --> 00:25:09,440
selected three movies each movie each

00:25:07,940 --> 00:25:16,669
document will now contain the

00:25:09,440 --> 00:25:22,399
information about this the movie so you

00:25:16,669 --> 00:25:25,820
see everything is nicely replaced and to

00:25:22,399 --> 00:25:27,619
show you I'm not cheating this is the

00:25:25,820 --> 00:25:33,309
other movie the second movie Casino

00:25:27,619 --> 00:25:33,309
Royale and finally third movie Toy Story

00:25:36,360 --> 00:25:40,950
document merge your clients will love it

00:25:41,190 --> 00:25:48,610
then we have another example which are

00:25:44,440 --> 00:25:52,720
lists actions with with options so list

00:25:48,610 --> 00:25:55,690
actions are actions that appear on the

00:25:52,720 --> 00:25:58,480
on the right hand corner of the table

00:25:55,690 --> 00:26:02,019
view there's a button you can click on

00:25:58,480 --> 00:26:06,820
it and something happens like in this

00:26:02,019 --> 00:26:10,179
case generating a report you see when

00:26:06,820 --> 00:26:13,179
when you click on it the the action asks

00:26:10,179 --> 00:26:15,370
some information from the user for

00:26:13,179 --> 00:26:17,399
example here you the users to say if he

00:26:15,370 --> 00:26:20,649
wants on his report only the selected

00:26:17,399 --> 00:26:23,740
rows in the table view or all the rows

00:26:20,649 --> 00:26:26,110
and that changes the behavior of the of

00:26:23,740 --> 00:26:29,549
the action so i will now quickly

00:26:26,110 --> 00:26:33,940
demonstrate how to build those actions

00:26:29,549 --> 00:26:36,010
so generating a report is something that

00:26:33,940 --> 00:26:39,820
happens inside the model threat because

00:26:36,010 --> 00:26:42,820
you need access to the database so you

00:26:39,820 --> 00:26:45,639
just sub-clause a class named list

00:26:42,820 --> 00:26:47,830
action from model function that's that's

00:26:45,639 --> 00:26:49,929
a base clause in Camelot and it has an

00:26:47,830 --> 00:26:52,870
important message method which is model

00:26:49,929 --> 00:26:55,929
run it has three arguments collection

00:26:52,870 --> 00:26:59,409
that's all the rows in the table view

00:26:55,929 --> 00:27:03,419
there the user is looking at selection

00:26:59,409 --> 00:27:06,159
is an iterator over over all the

00:27:03,419 --> 00:27:07,840
selected rows and then there's the third

00:27:06,159 --> 00:27:13,179
argument options which we'll discuss

00:27:07,840 --> 00:27:15,309
right away so to create your own action

00:27:13,179 --> 00:27:18,340
you just sub-clause list action for

00:27:15,309 --> 00:27:20,980
model function implement the model run

00:27:18,340 --> 00:27:22,600
method in this simple case we just print

00:27:20,980 --> 00:27:25,000
all the objects in the selection and

00:27:22,600 --> 00:27:27,789
then add an instance of the my list

00:27:25,000 --> 00:27:30,610
action object to the list actions of the

00:27:27,789 --> 00:27:33,240
of the admin that's it then the action

00:27:30,610 --> 00:27:37,929
is now there and now we will demonstrate

00:27:33,240 --> 00:27:40,029
how to use options before running the

00:27:37,929 --> 00:27:44,559
actions so what you don't have to do is

00:27:40,029 --> 00:27:46,779
to specify an inner class options of the

00:27:44,559 --> 00:27:49,030
action class when Camelot sees this

00:27:46,779 --> 00:27:52,150
option clause it will pop

00:27:49,030 --> 00:27:54,850
form in front of the user if when he

00:27:52,150 --> 00:27:57,250
presses the button and it will ask the

00:27:54,850 --> 00:27:59,830
user to complete this form and then

00:27:57,250 --> 00:28:02,020
continue with the action so this

00:27:59,830 --> 00:28:05,080
demonstrate as well the the possibility

00:28:02,020 --> 00:28:07,090
of Camelot's to to work with objects

00:28:05,080 --> 00:28:09,880
that are not mapped to the database so

00:28:07,090 --> 00:28:13,410
this is just a plain old white an object

00:28:09,880 --> 00:28:16,600
it has one attribute only selected and

00:28:13,410 --> 00:28:19,740
we we give it an admin clause to tell

00:28:16,600 --> 00:28:22,660
Camelot how to display this object and

00:28:19,740 --> 00:28:25,000
then in the model run method the third

00:28:22,660 --> 00:28:30,060
argument options will be an instance of

00:28:25,000 --> 00:28:33,510
the of the options with a capital clause

00:28:30,060 --> 00:28:36,220
with the values entered by the user and

00:28:33,510 --> 00:28:40,450
then you can use these options inside

00:28:36,220 --> 00:28:41,920
the the run method to either in this

00:28:40,450 --> 00:28:44,470
case print the objects that were

00:28:41,920 --> 00:28:47,400
selected or print all the objects so

00:28:44,470 --> 00:28:50,020
that's it's a very quite common pattern

00:28:47,400 --> 00:28:52,690
in this kind of applications to have

00:28:50,020 --> 00:29:01,450
just this options dialog and it's it's

00:28:52,690 --> 00:29:05,470
very fast to create it this way next we

00:29:01,450 --> 00:29:09,790
have Matt plot lip integration this is a

00:29:05,470 --> 00:29:13,810
plot a matte wat lip ok so how does that

00:29:09,790 --> 00:29:18,370
work matplotlib works with a set of

00:29:13,810 --> 00:29:21,130
palatka mounts and those plot commands

00:29:18,370 --> 00:29:26,320
are executed on access objects access

00:29:21,130 --> 00:29:29,140
objects or access in a in a chart and

00:29:26,320 --> 00:29:30,730
the way camelot works because we have

00:29:29,140 --> 00:29:33,370
two threats we have the model threat and

00:29:30,730 --> 00:29:35,320
the GUI threat in the model threat we

00:29:33,370 --> 00:29:37,480
have to aggregate all the data we want

00:29:35,320 --> 00:29:39,280
to we want to put on the plot and then

00:29:37,480 --> 00:29:42,490
in them in the GUI threat will make the

00:29:39,280 --> 00:29:45,580
actual plot really fast so that there is

00:29:42,490 --> 00:29:47,560
no slow down for the user so how does it

00:29:45,580 --> 00:29:50,260
work or does it work in the model threat

00:29:47,560 --> 00:29:52,720
we are going to record all plot comments

00:29:50,260 --> 00:29:56,350
too much blood lip so we created a fake

00:29:52,720 --> 00:29:58,660
matplotlib axis object you call all

00:29:56,350 --> 00:30:02,380
commands on this axis object they are

00:29:58,660 --> 00:30:04,450
recorded and then they are shipped the

00:30:02,380 --> 00:30:06,550
they are recorded and stored in what we

00:30:04,450 --> 00:30:08,380
call a container this container is

00:30:06,550 --> 00:30:09,880
shipped to the gooey tread and in the

00:30:08,380 --> 00:30:12,160
gooey threat we just execute those

00:30:09,880 --> 00:30:16,390
commands with all the data already

00:30:12,160 --> 00:30:19,360
fetched so that goes really fast so that

00:30:16,390 --> 00:30:24,490
that's sounds more complicated than it

00:30:19,360 --> 00:30:28,000
is this is an example of it to display a

00:30:24,490 --> 00:30:31,360
chart on the on a form you just have to

00:30:28,000 --> 00:30:34,570
create and add a property in this case

00:30:31,360 --> 00:30:37,000
chart which returns a container that

00:30:34,570 --> 00:30:39,970
contains all the commands for matplotlib

00:30:37,000 --> 00:30:42,700
and then in the field attributes you say

00:30:39,970 --> 00:30:45,070
this property chart needs to be

00:30:42,700 --> 00:30:48,430
displayed with a chart delegate and then

00:30:45,070 --> 00:30:50,320
this is just acts as a normal as a

00:30:48,430 --> 00:30:53,830
normal field like a floater an integer

00:30:50,320 --> 00:30:56,080
but in this case chart and then inside

00:30:53,830 --> 00:30:57,970
the chart property we return a plot

00:30:56,080 --> 00:31:00,070
container a plot container is a very

00:30:57,970 --> 00:31:02,320
simple container format boat lip it

00:31:00,070 --> 00:31:04,630
takes as its arguments as its

00:31:02,320 --> 00:31:06,310
construction arguments all the arguments

00:31:04,630 --> 00:31:08,530
you can give to the matplotlib plot

00:31:06,310 --> 00:31:10,990
function so that's really easy to create

00:31:08,530 --> 00:31:17,470
simple plots the first plot you saw was

00:31:10,990 --> 00:31:20,710
was created with dysfunction you can

00:31:17,470 --> 00:31:23,040
create more complex plots as well in

00:31:20,710 --> 00:31:26,350
this plot you have a vertical span and

00:31:23,040 --> 00:31:32,620
there are gridlines I don't think you

00:31:26,350 --> 00:31:35,800
can see them but they are there so you

00:31:32,620 --> 00:31:38,380
see in this chart method we create an

00:31:35,800 --> 00:31:41,500
access container object and then we call

00:31:38,380 --> 00:31:44,380
various functions on this axis container

00:31:41,500 --> 00:31:47,440
the container stores all the actions all

00:31:44,380 --> 00:31:49,840
the functions you called along with the

00:31:47,440 --> 00:31:52,480
arguments and then you ship the access

00:31:49,840 --> 00:31:54,100
container to the GUI threat and the

00:31:52,480 --> 00:32:02,230
chart delegate it takes care of

00:31:54,100 --> 00:32:05,740
displaying the matplotlib figure so how

00:32:02,230 --> 00:32:08,350
we did in the real world this concludes

00:32:05,740 --> 00:32:12,310
the new features now we'll talk a bit

00:32:08,350 --> 00:32:14,980
about what we learned last well the past

00:32:12,310 --> 00:32:22,220
year in the real world

00:32:14,980 --> 00:32:29,530
by dealing with clients so that's us our

00:32:22,220 --> 00:32:32,570
team young happy you know vibrant bunch

00:32:29,530 --> 00:32:38,510
and this is us after a hundred

00:32:32,570 --> 00:32:41,840
deployments so deploying deployment for

00:32:38,510 --> 00:32:46,850
desktop application somewhat different

00:32:41,840 --> 00:32:50,720
than web apps for example so but notice

00:32:46,850 --> 00:32:52,929
how cool we're still though so how do we

00:32:50,720 --> 00:32:52,929
do it

00:32:58,620 --> 00:33:04,840
so one of the things we did was what I

00:33:02,950 --> 00:33:08,650
think we did wrong was we were using a

00:33:04,840 --> 00:33:10,360
PI to exit to deploy application so what

00:33:08,650 --> 00:33:14,020
we did we just downloaded the custom

00:33:10,360 --> 00:33:16,180
stock Python from the website we

00:33:14,020 --> 00:33:18,580
downloaded various libraries from the

00:33:16,180 --> 00:33:20,530
websites install them and then you spite

00:33:18,580 --> 00:33:23,230
of exit to create a bundle of the

00:33:20,530 --> 00:33:26,080
application and then perate that it

00:33:23,230 --> 00:33:29,830
would work on the site of the customer

00:33:26,080 --> 00:33:32,200
which was almost never the case so what

00:33:29,830 --> 00:33:34,870
did we do we created our own Python

00:33:32,200 --> 00:33:39,700
distribution from source for all the

00:33:34,870 --> 00:33:42,430
binary libraries we need it this was a

00:33:39,700 --> 00:33:44,830
lot of work but what we did what we can

00:33:42,430 --> 00:33:47,380
do if if we did this we have one

00:33:44,830 --> 00:33:49,570
installer which installs our own Python

00:33:47,380 --> 00:33:52,690
distribution it's a distribution that

00:33:49,570 --> 00:33:54,190
doesn't depend on registry settings so

00:33:52,690 --> 00:33:56,530
it does not interfere with already

00:33:54,190 --> 00:33:59,200
installed patents or something else and

00:33:56,530 --> 00:34:01,450
then to deploy an application we just

00:33:59,200 --> 00:34:04,240
add or little module the application

00:34:01,450 --> 00:34:05,830
itself to the Python distribution ship

00:34:04,240 --> 00:34:08,740
the Python distribution with the right

00:34:05,830 --> 00:34:12,070
entries in the menu in the Windows Start

00:34:08,740 --> 00:34:16,210
menu and we're done and all the

00:34:12,070 --> 00:34:18,430
libraries you use they just they just

00:34:16,210 --> 00:34:20,730
work because you're using them in a

00:34:18,430 --> 00:34:23,710
Python distribution and not in some

00:34:20,730 --> 00:34:25,510
changed environment like bite by to

00:34:23,710 --> 00:34:28,180
Exeter so you don't need to use dirty

00:34:25,510 --> 00:34:30,280
tricks and all this kind of stuff we

00:34:28,180 --> 00:34:32,020
were able to to compile all the

00:34:30,280 --> 00:34:34,720
libraries with the options that we

00:34:32,020 --> 00:34:37,060
wanted like sickle alchemy with the sea

00:34:34,720 --> 00:34:40,840
extensions to get more speed up the same

00:34:37,060 --> 00:34:42,940
for ginger and when there still is an

00:34:40,840 --> 00:34:46,360
issue we can fire a Python interpreter

00:34:42,940 --> 00:34:49,150
at the at the site or just use the

00:34:46,360 --> 00:34:51,250
spider IDE which we included to edit

00:34:49,150 --> 00:34:53,730
some configuration files and this all

00:34:51,250 --> 00:34:58,300
saved us a tremendous amount of time in

00:34:53,730 --> 00:35:01,330
deploying and you can get this despite

00:34:58,300 --> 00:35:04,830
and distribution from the website first

00:35:01,330 --> 00:35:04,830
little bit of windows text

00:35:05,480 --> 00:35:12,000
so we also changed our development model

00:35:09,150 --> 00:35:14,010
a little bit so in our development model

00:35:12,000 --> 00:35:17,340
you had like three parties that were

00:35:14,010 --> 00:35:19,950
involved you had the developers us yet

00:35:17,340 --> 00:35:21,840
the domain expert who news everything

00:35:19,950 --> 00:35:24,360
about what the application should do and

00:35:21,840 --> 00:35:26,520
then you had the users there are many of

00:35:24,360 --> 00:35:33,510
them we don't know them we're a little

00:35:26,520 --> 00:35:36,780
bit scared of them so so how do we do

00:35:33,510 --> 00:35:38,760
our development now we have the domain

00:35:36,780 --> 00:35:42,120
experts which give inputs to the

00:35:38,760 --> 00:35:44,520
developers the developers modify and

00:35:42,120 --> 00:35:46,440
create the application and then we have

00:35:44,520 --> 00:35:48,510
billboards that makes nightly builds and

00:35:46,440 --> 00:35:50,670
those nightly builds are through an

00:35:48,510 --> 00:35:54,180
automatic updating system immediately

00:35:50,670 --> 00:35:56,160
installed on the pc of the of the domain

00:35:54,180 --> 00:35:58,530
experts so they can follow really

00:35:56,160 --> 00:36:01,820
quickly on what we're doing and they and

00:35:58,530 --> 00:36:05,880
so we have a very good feedback loop

00:36:01,820 --> 00:36:07,830
then when when both domain experts and

00:36:05,880 --> 00:36:09,870
developers think okay the application is

00:36:07,830 --> 00:36:11,760
at the state that it can be released a

00:36:09,870 --> 00:36:14,420
released is pushed through the automatic

00:36:11,760 --> 00:36:17,790
update system to the PC of the users and

00:36:14,420 --> 00:36:20,820
the pcs of the users they give logs back

00:36:17,790 --> 00:36:22,770
to us to our logging database so we can

00:36:20,820 --> 00:36:25,410
see there are exceptions happening at

00:36:22,770 --> 00:36:27,900
the site of the users and we can fix the

00:36:25,410 --> 00:36:32,160
application before the user has noticed

00:36:27,900 --> 00:36:35,820
something went wrong to accomplish this

00:36:32,160 --> 00:36:41,540
we had we built it or Eric I built this

00:36:35,820 --> 00:36:45,300
small tool which is called cloud launch

00:36:41,540 --> 00:36:48,510
it's a it's a terminal tool it doesn't

00:36:45,300 --> 00:36:53,400
have a GUI and it's tightly integrated

00:36:48,510 --> 00:36:56,210
with setuptools so you can see here we

00:36:53,400 --> 00:36:59,310
can build an egg with beat its cloud and

00:36:56,210 --> 00:37:05,700
we can build the windows installer with

00:36:59,310 --> 00:37:07,770
winnings cloud pretty straightforward

00:37:05,700 --> 00:37:09,930
and easy finish the egg is a little bit

00:37:07,770 --> 00:37:12,570
special in the sense that it contains

00:37:09,930 --> 00:37:15,800
metadata body application on how to

00:37:12,570 --> 00:37:21,170
update itself and this kind of things

00:37:15,800 --> 00:37:23,680
well the egg doesn't it's a different

00:37:21,170 --> 00:37:27,470
file it's a cloud file CLD file we use

00:37:23,680 --> 00:37:30,560
to store our dictionary well it's a it's

00:37:27,470 --> 00:37:34,370
a JSON object which contains all the

00:37:30,560 --> 00:37:36,380
information about this update revision

00:37:34,370 --> 00:37:39,260
numbers we use revision numbers to see

00:37:36,380 --> 00:37:42,310
if a client needs an update every time

00:37:39,260 --> 00:37:46,400
he starts the application goes to see

00:37:42,310 --> 00:37:48,650
whether you can find a cloud file and

00:37:46,400 --> 00:37:52,700
then check with his own file and then

00:37:48,650 --> 00:37:56,540
ill download the egg the application

00:37:52,700 --> 00:38:01,280
restarts the newegg is loaded and update

00:37:56,540 --> 00:38:03,680
is done works very well the other nice

00:38:01,280 --> 00:38:06,410
feature is that we can monitor our

00:38:03,680 --> 00:38:09,350
clients so you can see here in the

00:38:06,410 --> 00:38:13,400
second command we use set up the pie

00:38:09,350 --> 00:38:16,760
monitor cloud and we get nice info about

00:38:13,400 --> 00:38:24,110
what to users are doing and how it's how

00:38:16,760 --> 00:38:27,080
it's failing so that's it that was our

00:38:24,110 --> 00:38:31,240
talk about new features and what we

00:38:27,080 --> 00:38:38,330
learned this here Camelot again our data

00:38:31,240 --> 00:38:40,370
maybe I just wanted to say that there is

00:38:38,330 --> 00:38:43,520
a course plan on sequel alchemy and

00:38:40,370 --> 00:38:48,110
Camelot in Germany which will be taught

00:38:43,520 --> 00:38:50,780
by Eric it's in somewhere in October

00:38:48,110 --> 00:38:53,660
data is on the website yes please

00:38:50,780 --> 00:38:56,270
consult a Python Camelot calm for for

00:38:53,660 --> 00:39:01,990
more information about that and i will

00:38:56,270 --> 00:39:04,520
put the slides online soon I mean today

00:39:01,990 --> 00:39:08,200
so thank you very much and if there are

00:39:04,520 --> 00:39:08,200
any questions please

00:39:19,100 --> 00:39:25,980
and the example use docx to export can

00:39:23,580 --> 00:39:28,770
you also export as oh BTW and for

00:39:25,980 --> 00:39:32,010
merging use office to generate xml is

00:39:28,770 --> 00:39:34,770
that needed it can work with open office

00:39:32,010 --> 00:39:37,619
as well it's just we just using ginger

00:39:34,770 --> 00:39:39,600
you know to merge the templates so it

00:39:37,619 --> 00:39:42,840
could be done with with open office as

00:39:39,600 --> 00:39:50,010
well unfortunately most of our users are

00:39:42,840 --> 00:39:51,300
using word same i'm a scenic you a

00:39:50,010 --> 00:39:52,440
sample case not winning at work i've

00:39:51,300 --> 00:39:53,730
written something which is always

00:39:52,440 --> 00:39:55,440
identical to what you guys have done

00:39:53,730 --> 00:39:57,060
it's not quite as general as completely

00:39:55,440 --> 00:39:59,040
as yours but it's the same basic idea

00:39:57,060 --> 00:40:01,260
and i was wondering if you've already

00:39:59,040 --> 00:40:02,850
got a big esquilo coming model and it's

00:40:01,260 --> 00:40:05,400
all set up or nicely and i say i wanted

00:40:02,850 --> 00:40:07,320
to use one of your fancy table views can

00:40:05,400 --> 00:40:09,540
I can I use your product as a library

00:40:07,320 --> 00:40:11,940
and say you with this ask welcoming

00:40:09,540 --> 00:40:14,550
object display me this beautiful widget

00:40:11,940 --> 00:40:16,770
or if you have sqlalchemy objects then

00:40:14,550 --> 00:40:19,920
you then it can be done yes I guess if

00:40:16,770 --> 00:40:22,650
you're just a relational database and

00:40:19,920 --> 00:40:26,670
you're using like you can use sick allow

00:40:22,650 --> 00:40:27,900
me to to extract objects from it I don't

00:40:26,670 --> 00:40:29,940
know I don't think that that would be

00:40:27,900 --> 00:40:31,830
the purpose of the application but if

00:40:29,940 --> 00:40:34,790
you have a second alchemy set of objects

00:40:31,830 --> 00:40:34,790
can be dominant yeah

00:40:39,520 --> 00:40:45,380
just a question about licensing how do

00:40:41,960 --> 00:40:49,300
you handle the pie cutie GPL license or

00:40:45,380 --> 00:40:53,900
on on the on with your clients mostly

00:40:49,300 --> 00:40:56,300
especially as deployment well we have

00:40:53,900 --> 00:40:58,369
the cam allotted solve this GPL yeah

00:40:56,300 --> 00:41:01,010
like pie cute yeah and we have a

00:40:58,369 --> 00:41:02,930
commercial pie cute license and so that

00:41:01,010 --> 00:41:05,900
didn't cause any show you you don't have

00:41:02,930 --> 00:41:10,190
any look at PI site for example thinking

00:41:05,900 --> 00:41:12,829
about reaching for that as well or we

00:41:10,190 --> 00:41:14,930
when we decide between PI cuter by sight

00:41:12,829 --> 00:41:17,990
if it's really a decision we will decide

00:41:14,930 --> 00:41:21,020
on technical merits of of both

00:41:17,990 --> 00:41:22,760
frameworks that being said there is a

00:41:21,020 --> 00:41:28,190
script inside the source distribution

00:41:22,760 --> 00:41:29,990
which converts Camelot to PI side it was

00:41:28,190 --> 00:41:32,540
not really working properly with with PI

00:41:29,990 --> 00:41:34,730
site 1.0 because there were still some

00:41:32,540 --> 00:41:36,770
bugs in PI site but I I believe they

00:41:34,730 --> 00:41:47,180
have been fixed but I didn't write it

00:41:36,770 --> 00:41:50,200
afterwards and with the distribution you

00:41:47,180 --> 00:41:52,369
build yourself how easy is it to

00:41:50,200 --> 00:41:54,790
automated is it like if you want to

00:41:52,369 --> 00:41:57,349
upgrade libraries or Python it's the

00:41:54,790 --> 00:42:01,849
distribution is a it's a Python script

00:41:57,349 --> 00:42:03,650
of course and it downloads all the all

00:42:01,849 --> 00:42:08,390
the sources from the various websites

00:42:03,650 --> 00:42:10,630
and builds it all in one step so if you

00:42:08,390 --> 00:42:12,800
want to upgrade the library it's just

00:42:10,630 --> 00:42:16,599
updating the download location for the

00:42:12,800 --> 00:42:16,599
source files and that's it

00:42:22,410 --> 00:42:27,299
in the booklet it mentions that this

00:42:25,260 --> 00:42:30,839
intend to be a kind of replacement to

00:42:27,299 --> 00:42:32,520
microsoft access do you know a case in

00:42:30,839 --> 00:42:35,220
which they decided to board an

00:42:32,520 --> 00:42:40,109
application either or stop using

00:42:35,220 --> 00:42:44,099
microsoft access well there is there is

00:42:40,109 --> 00:42:46,559
one one board on the internet from from

00:42:44,099 --> 00:42:49,650
I don't remember the name of the person

00:42:46,559 --> 00:42:52,319
who wrote it but the he saw it as a

00:42:49,650 --> 00:42:54,359
replacement to to Microsoft Access we

00:42:52,319 --> 00:42:59,160
never really really started with the

00:42:54,359 --> 00:43:00,809
dead ID in mind but it appears that yeah

00:42:59,160 --> 00:43:03,210
you can replace microsoft access

00:43:00,809 --> 00:43:06,599
applications with camo'd but we see

00:43:03,210 --> 00:43:08,220
camel does something different from

00:43:06,599 --> 00:43:10,500
access because the development model is

00:43:08,220 --> 00:43:12,839
is completely different it's not drag

00:43:10,500 --> 00:43:16,500
and drop it's it's writing code and

00:43:12,839 --> 00:43:23,849
using the full power of Python to to

00:43:16,500 --> 00:43:26,700
generate your stuff do you have dr.

00:43:23,849 --> 00:43:29,670
Lovell organization excuse me do you

00:43:26,700 --> 00:43:33,720
support localization yes yes yes yes of

00:43:29,670 --> 00:43:35,970
course yes yeah we demonstrated this

00:43:33,720 --> 00:43:37,440
last year there is even the option if

00:43:35,970 --> 00:43:39,510
you if you have if you're running a

00:43:37,440 --> 00:43:41,099
camelot application and there is a field

00:43:39,510 --> 00:43:42,990
named the user can right-click on the

00:43:41,099 --> 00:43:45,480
field name and change the translation

00:43:42,990 --> 00:43:47,339
himself so that that's really handy if

00:43:45,480 --> 00:43:49,980
you're deploying to to multiple

00:43:47,339 --> 00:43:51,779
languages then you can ask a user to

00:43:49,980 --> 00:43:56,029
translate the application extract the

00:43:51,779 --> 00:43:56,029
p.o file from it and ship it next time

00:44:01,250 --> 00:44:04,240
any more questions

00:44:08,349 --> 00:44:13,059
do you have the issues with a sequel a

00:44:10,839 --> 00:44:15,279
clean because we use it in the past and

00:44:13,059 --> 00:44:18,519
I remember grab some glitches with

00:44:15,279 --> 00:44:21,039
change of variance we go 30 40 50 a

00:44:18,519 --> 00:44:23,259
revival ratio some features work lightly

00:44:21,039 --> 00:44:25,739
different so we write into two troubles

00:44:23,259 --> 00:44:28,059
maybe we were using some strange feature

00:44:25,739 --> 00:44:31,869
but what's your experience with google

00:44:28,059 --> 00:44:34,420
app engine has stability well I i I'm

00:44:31,869 --> 00:44:36,609
I'm very happy with Sequenom indeed we

00:44:34,420 --> 00:44:38,229
had we have those issues as well so

00:44:36,609 --> 00:44:39,970
every time there is a new version of

00:44:38,229 --> 00:44:42,670
sequel or maybe we have to go over the

00:44:39,970 --> 00:44:48,190
code and look very carefully what is

00:44:42,670 --> 00:44:49,989
happening my experience is that is just

00:44:48,190 --> 00:44:52,180
understanding sequel he means is

00:44:49,989 --> 00:44:54,759
difficult I mean you can use it like

00:44:52,180 --> 00:44:57,059
like here in orbital x0 on top it's very

00:44:54,759 --> 00:45:00,130
simple it's like like the Django or

00:44:57,059 --> 00:45:01,569
system but it's it's really as something

00:45:00,130 --> 00:45:05,049
completely different I don't say this

00:45:01,569 --> 00:45:06,700
only as in as an ORM or as it you don't

00:45:05,049 --> 00:45:09,099
have to see it as a tool to write sequel

00:45:06,700 --> 00:45:11,589
queries in Python because you could have

00:45:09,099 --> 00:45:15,130
written sequel as well I more see it as

00:45:11,589 --> 00:45:17,200
a tool to manipulate curries and just a

00:45:15,130 --> 00:45:19,680
different perspective but I'm very happy

00:45:17,200 --> 00:45:19,680
with it

00:45:29,359 --> 00:45:33,039

YouTube URL: https://www.youtube.com/watch?v=DanjGO0VEAs


