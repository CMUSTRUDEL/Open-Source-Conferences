Title: Derivatives Analytics with Python & Numpy
Publication date: 2015-04-19
Playlist: EuroPython 2011
Description: 
	[EuroPython 2011] Yves Hilpisch - 24 June 2011 in "Track Ravioli
"
Captions: 
	00:00:06,480 --> 00:00:12,460
well actually thank you very much find

00:00:08,950 --> 00:00:14,920
me here I would little bit talk about

00:00:12,460 --> 00:00:18,130
finance first so it's more like a

00:00:14,920 --> 00:00:20,290
vertical talk and won't talk about some

00:00:18,130 --> 00:00:22,899
fans in your libraries and new functions

00:00:20,290 --> 00:00:26,110
what we use our daily business is more

00:00:22,899 --> 00:00:28,450
or less common stuff that almost anybody

00:00:26,110 --> 00:00:31,059
who's using Python a scientific context

00:00:28,450 --> 00:00:32,590
is using so before I start introduce

00:00:31,059 --> 00:00:35,050
myself with a couple of sentences and

00:00:32,590 --> 00:00:37,090
with the topic I want to ask the

00:00:35,050 --> 00:00:38,680
auditorium who is who has a finance

00:00:37,090 --> 00:00:41,670
background who's from a bank or

00:00:38,680 --> 00:00:45,490
insurance company or we studied finance

00:00:41,670 --> 00:00:47,579
some time ago it's the minority so I

00:00:45,490 --> 00:00:50,290
brought a little bit of theory with me

00:00:47,579 --> 00:00:51,670
just to illustrate what we are doing so

00:00:50,290 --> 00:00:53,530
if you don't understand the theory that

00:00:51,670 --> 00:00:57,040
I will present it doesn't matter that

00:00:53,530 --> 00:00:59,650
much the point that i will make today is

00:00:57,040 --> 00:01:02,470
that many people think that python is

00:00:59,650 --> 00:01:04,119
not well suited to build high-performing

00:01:02,470 --> 00:01:06,220
financial applications because it's an

00:01:04,119 --> 00:01:08,710
interpreted language and all that kind

00:01:06,220 --> 00:01:11,590
of stuff so the main point that i will

00:01:08,710 --> 00:01:14,020
do is that it's very well suited and the

00:01:11,590 --> 00:01:16,659
very proof is that we built yeah really

00:01:14,020 --> 00:01:18,610
off-the-shelf valuation suite by

00:01:16,659 --> 00:01:20,830
ourselves so we are distributing it and

00:01:18,610 --> 00:01:23,590
we r on the application side are not on

00:01:20,830 --> 00:01:26,860
the developer side so to say i'm not the

00:01:23,590 --> 00:01:30,670
developer at all I'm just a quant so to

00:01:26,860 --> 00:01:32,440
say I'm prototyping in in Python and we

00:01:30,670 --> 00:01:34,090
have guys that are the real developers

00:01:32,440 --> 00:01:36,610
that have to take care of the productive

00:01:34,090 --> 00:01:39,220
environments so I'm more at the

00:01:36,610 --> 00:01:42,340
interface between theory and practice in

00:01:39,220 --> 00:01:45,400
terms of Python so let's start with me a

00:01:42,340 --> 00:01:47,080
background in business administration I

00:01:45,400 --> 00:01:49,229
studied Business Administration and then

00:01:47,080 --> 00:01:52,869
wrote my PhD thesis is about

00:01:49,229 --> 00:01:53,979
mathematical finance topic after that I

00:01:52,869 --> 00:01:56,590
started working as a management

00:01:53,979 --> 00:01:59,770
consulting with a more product focus I I

00:01:56,590 --> 00:02:02,710
consulted mainly insurance companies

00:01:59,770 --> 00:02:05,920
also banks and founded the company on my

00:02:02,710 --> 00:02:08,610
own in 2005 where we use pious and

00:02:05,920 --> 00:02:11,960
extensively from the beginning on so we

00:02:08,610 --> 00:02:13,700
we bet on pison at a time

00:02:11,960 --> 00:02:15,500
when nobody else in the financial

00:02:13,700 --> 00:02:17,840
services industry was using pies and for

00:02:15,500 --> 00:02:21,020
the things that we use but a little bit

00:02:17,840 --> 00:02:25,130
on that later on what I also do is I

00:02:21,020 --> 00:02:27,620
give course at the University of silent

00:02:25,130 --> 00:02:30,290
the German university where we also use

00:02:27,620 --> 00:02:32,390
Python and the fun very very useful to

00:02:30,290 --> 00:02:35,480
apply Python such a context because

00:02:32,390 --> 00:02:38,510
people who are not developer developing

00:02:35,480 --> 00:02:41,030
a programming experts really fast can

00:02:38,510 --> 00:02:43,730
grasp what's behind it because it's

00:02:41,030 --> 00:02:46,460
about compact and readable and it mainly

00:02:43,730 --> 00:02:48,740
looks like mathematics so I will present

00:02:46,460 --> 00:02:51,800
it later on I'm also writing a book

00:02:48,740 --> 00:02:53,660
currently I used extensively Python it's

00:02:51,800 --> 00:02:56,120
a financial book but the implementations

00:02:53,660 --> 00:03:00,590
are all presented in hawthorne ian

00:02:56,120 --> 00:03:03,380
language what about the topics for today

00:03:00,590 --> 00:03:05,090
so first I will start with the couple of

00:03:03,380 --> 00:03:07,280
slides about the relatives analytics in

00:03:05,090 --> 00:03:09,740
general and why Python I will then

00:03:07,280 --> 00:03:11,810
proceed and talk a little bit about data

00:03:09,740 --> 00:03:14,300
analysis this is not our main focus but

00:03:11,810 --> 00:03:16,460
what our focus is is Monte Carlo

00:03:14,300 --> 00:03:19,190
simulation which is computationally very

00:03:16,460 --> 00:03:21,590
demanding and where you need pretty fast

00:03:19,190 --> 00:03:23,810
implementations to get by on a daily

00:03:21,590 --> 00:03:26,480
basis and last but not least a couple of

00:03:23,810 --> 00:03:29,150
slides and maybe some presentations in

00:03:26,480 --> 00:03:31,490
terms of an xog door python script or

00:03:29,150 --> 00:03:35,420
even the application if the Wi-Fi works

00:03:31,490 --> 00:03:39,200
of our decision elicit analytics suite

00:03:35,420 --> 00:03:42,680
but let's just dive into it derivatives

00:03:39,200 --> 00:03:46,840
analytics first of all does a does

00:03:42,680 --> 00:03:49,360
everybody know what an option is a

00:03:46,840 --> 00:03:52,100
couple of people know what an option is

00:03:49,360 --> 00:03:53,810
you're probably almost heard of stocks

00:03:52,100 --> 00:03:57,650
which are traded at the exchanges and

00:03:53,810 --> 00:03:59,120
these are like ordinary securities but

00:03:57,650 --> 00:04:01,040
there are other securities that derive

00:03:59,120 --> 00:04:03,260
their value from these ordinary

00:04:01,040 --> 00:04:07,250
securities in terms of an option for

00:04:03,260 --> 00:04:09,710
example you can buy the right to sell

00:04:07,250 --> 00:04:11,600
for example then you speak of a put the

00:04:09,710 --> 00:04:14,300
stock at a predetermined date in the

00:04:11,600 --> 00:04:15,860
future at a predetermined price so you

00:04:14,300 --> 00:04:20,150
have to right but not the obligation to

00:04:15,860 --> 00:04:21,650
do so and it's a derivative it's a

00:04:20,150 --> 00:04:23,990
security that is traded the device

00:04:21,650 --> 00:04:25,880
derives the value from another security

00:04:23,990 --> 00:04:29,000
these are hard to value

00:04:25,880 --> 00:04:31,400
took a couple of time and it was not

00:04:29,000 --> 00:04:34,550
long ago that the first paper in this

00:04:31,400 --> 00:04:37,670
regard was published in 1973 in terms of

00:04:34,550 --> 00:04:40,280
science it's not long ago but since then

00:04:37,670 --> 00:04:42,740
this around this concept they has been

00:04:40,280 --> 00:04:47,090
built a mighty billion-dollar business

00:04:42,740 --> 00:04:48,920
and latest since the Lea the last

00:04:47,090 --> 00:04:51,260
financial crisis everybody will heard of

00:04:48,920 --> 00:04:54,380
these derivatives as financial weapons

00:04:51,260 --> 00:04:57,260
of mass destruction as Warren Buffett

00:04:54,380 --> 00:04:59,840
called them because they were blamed to

00:04:57,260 --> 00:05:02,660
some extent at least to have caused the

00:04:59,840 --> 00:05:04,910
recent financial crisis but today this

00:05:02,660 --> 00:05:07,540
is not our topic it's more like how you

00:05:04,910 --> 00:05:09,500
handle these in terms of Technology

00:05:07,540 --> 00:05:12,380
typical tasks in the context of

00:05:09,500 --> 00:05:15,320
derivatives analytics are to simulate

00:05:12,380 --> 00:05:18,110
something to analyze data to do some

00:05:15,320 --> 00:05:20,000
discounting in the financial context to

00:05:18,110 --> 00:05:21,920
automatic operations you want to sum up

00:05:20,000 --> 00:05:23,870
things for example paper but for you you

00:05:21,920 --> 00:05:25,940
want to average something you have to

00:05:23,870 --> 00:05:30,080
calculate for example average returns

00:05:25,940 --> 00:05:32,900
you have a lot of linear algebra in that

00:05:30,080 --> 00:05:35,150
and finance theory you can say final

00:05:32,900 --> 00:05:37,820
theory is all about linear algebra or

00:05:35,150 --> 00:05:41,780
what you do is can be represented by

00:05:37,820 --> 00:05:44,720
matrices and vectors which translates

00:05:41,780 --> 00:05:46,640
into Python an umpire arise we can

00:05:44,720 --> 00:05:48,560
represent later on you have of course

00:05:46,640 --> 00:05:50,980
some optimization problems people want

00:05:48,560 --> 00:05:53,180
to reach the optimum forgiven investment

00:05:50,980 --> 00:05:56,360
you have also of course some

00:05:53,180 --> 00:05:58,610
visualization things and if you take a

00:05:56,360 --> 00:06:03,590
look at the list these are all tasks

00:05:58,610 --> 00:06:06,680
that pison is quite good at but still c

00:06:03,590 --> 00:06:08,660
c++ c sharp matlab and all the other

00:06:06,680 --> 00:06:11,420
language that you are very well aware of

00:06:08,660 --> 00:06:13,730
still dominated industry but python is

00:06:11,420 --> 00:06:21,260
coming i will present some figures or

00:06:13,730 --> 00:06:22,370
that shortly why python here the slide i

00:06:21,260 --> 00:06:25,640
have two perspectives the one

00:06:22,370 --> 00:06:28,700
perspective is from a business point of

00:06:25,640 --> 00:06:31,850
view the others also for people who want

00:06:28,700 --> 00:06:33,919
to get into finance or want to learn all

00:06:31,850 --> 00:06:36,530
the things that i'm talking about and

00:06:33,919 --> 00:06:39,320
the first of course is open source for

00:06:36,530 --> 00:06:42,380
the big banks that make billions of my

00:06:39,320 --> 00:06:45,920
with this kind of thing open source in

00:06:42,380 --> 00:06:47,990
terms of low-cost maybe not the reason

00:06:45,920 --> 00:06:49,760
but for a student who's learning finance

00:06:47,990 --> 00:06:52,100
it could have cost me a reason to choose

00:06:49,760 --> 00:06:54,950
Python and not to invest like a thousand

00:06:52,100 --> 00:06:58,160
euros for license of matlab for example

00:06:54,950 --> 00:07:00,380
to syntax Python program is easy you

00:06:58,160 --> 00:07:01,790
know that but from a business point of

00:07:00,380 --> 00:07:04,280
view you also have the advantage that

00:07:01,790 --> 00:07:05,630
you can develop fast and the second

00:07:04,280 --> 00:07:07,970
point is even more important you have

00:07:05,630 --> 00:07:09,500
easy maintenance you have lots of legacy

00:07:07,970 --> 00:07:12,050
code today in financial industry

00:07:09,500 --> 00:07:14,840
companies that no one even understands

00:07:12,050 --> 00:07:16,810
anymore you're thousands of lines of

00:07:14,840 --> 00:07:19,610
codes for single modules and no one is

00:07:16,810 --> 00:07:20,600
capable of maintain these things and

00:07:19,610 --> 00:07:22,760
they have built their business around

00:07:20,600 --> 00:07:25,640
these things so Python could have been

00:07:22,760 --> 00:07:28,310
in replace these with some more readable

00:07:25,640 --> 00:07:30,410
code and all the other kind of thing but

00:07:28,310 --> 00:07:32,780
the last point maybe the most important

00:07:30,410 --> 00:07:34,790
on this slide many people still think

00:07:32,780 --> 00:07:37,250
the person is the fast enough for a

00:07:34,790 --> 00:07:39,440
couple of financial applications but

00:07:37,250 --> 00:07:41,750
it's not the case if you do it right if

00:07:39,440 --> 00:07:44,450
you use numpy for example you know that

00:07:41,750 --> 00:07:50,270
you can have mathematics at a speed of C

00:07:44,450 --> 00:07:52,970
code but maybe with only five lines of

00:07:50,270 --> 00:07:55,190
code where you would need like 500 lines

00:07:52,970 --> 00:07:57,290
of code if you want to implement it and

00:07:55,190 --> 00:07:59,690
see so you have a major advantage in

00:07:57,290 --> 00:08:02,780
this regard what does the financial

00:07:59,690 --> 00:08:05,920
market says about this because this was

00:08:02,780 --> 00:08:07,910
more like a theoretical view on it I

00:08:05,920 --> 00:08:09,590
just looked at the website where the

00:08:07,910 --> 00:08:13,430
report the pious and contract offerings

00:08:09,590 --> 00:08:15,940
in the London area were they looking for

00:08:13,430 --> 00:08:18,260
pies and contract developers and it's

00:08:15,940 --> 00:08:21,560
more or less for the first quarter of

00:08:18,260 --> 00:08:24,590
this year where we observed 644

00:08:21,560 --> 00:08:27,710
offerings with regard to pies and skills

00:08:24,590 --> 00:08:31,040
and only two years ago the preparer of

00:08:27,710 --> 00:08:33,440
the figure was only 142 so there's today

00:08:31,040 --> 00:08:35,330
a four-fold demand for the pies in skill

00:08:33,440 --> 00:08:38,390
in the London area which is mainly

00:08:35,330 --> 00:08:41,180
financially driven compared to two years

00:08:38,390 --> 00:08:43,099
this is a amazing growth and the money

00:08:41,180 --> 00:08:46,430
you can earn with it also increased a

00:08:43,099 --> 00:08:49,340
little bit but you see more and more

00:08:46,430 --> 00:08:52,850
financial services companies are

00:08:49,340 --> 00:08:54,709
deploying Python and not only for

00:08:52,850 --> 00:08:56,690
the cluster stuff in the managing stuff

00:08:54,709 --> 00:08:58,730
for those are for the core applications

00:08:56,690 --> 00:09:01,880
that they're implementing and using and

00:08:58,730 --> 00:09:03,139
especially companies that are a little

00:09:01,880 --> 00:09:04,519
bit smaller and they're coming new to

00:09:03,139 --> 00:09:07,160
the mark and then they have the choice

00:09:04,519 --> 00:09:09,199
and have not much legacy code of course

00:09:07,160 --> 00:09:12,319
they can say we start out with pies and

00:09:09,199 --> 00:09:13,850
we do it right away others a little bit

00:09:12,319 --> 00:09:16,699
more reluctant when they have a huge

00:09:13,850 --> 00:09:19,279
library in C++ and then they may stick a

00:09:16,699 --> 00:09:21,110
little bit longer to death but python is

00:09:19,279 --> 00:09:24,620
catching up and rapid pace and the

00:09:21,110 --> 00:09:26,779
financial services industry but now let

00:09:24,620 --> 00:09:28,279
us go into the topic of the talked to

00:09:26,779 --> 00:09:30,970
Reuters analytics and a major part of

00:09:28,279 --> 00:09:34,069
analytics is of course data analysis if

00:09:30,970 --> 00:09:36,259
we speak in finance of data analysis

00:09:34,069 --> 00:09:38,120
there are many two types of data that we

00:09:36,259 --> 00:09:40,850
want to analyze the first our time

00:09:38,120 --> 00:09:43,540
series if you observe a stock of a

00:09:40,850 --> 00:09:46,399
period of time you have different values

00:09:43,540 --> 00:09:48,769
attached to different points and times

00:09:46,399 --> 00:09:50,630
but you also have cross sections that

00:09:48,769 --> 00:09:52,130
you want to analyze it's like you have a

00:09:50,630 --> 00:09:54,500
single date and you have different data

00:09:52,130 --> 00:09:57,170
for this single date and these are it's

00:09:54,500 --> 00:10:01,430
a little bit simplifying but these are

00:09:57,170 --> 00:10:03,439
the two main data types that you want to

00:10:01,430 --> 00:10:05,839
analyze and there are a number of very

00:10:03,439 --> 00:10:10,759
useful libraries are listed just four of

00:10:05,839 --> 00:10:14,170
them excel rd just to get access to

00:10:10,759 --> 00:10:17,600
information which is stored as an X file

00:10:14,170 --> 00:10:18,740
many of you would say what to store data

00:10:17,600 --> 00:10:20,540
and X the files within the financial

00:10:18,740 --> 00:10:22,100
services industry it is the case that

00:10:20,540 --> 00:10:25,670
most of the people are still using

00:10:22,100 --> 00:10:27,920
excellent it is as it is and every

00:10:25,670 --> 00:10:31,339
traders desk or a qantas you will find

00:10:27,920 --> 00:10:33,649
exercise and and even if you want to do

00:10:31,339 --> 00:10:36,319
something for yourself and you go to

00:10:33,649 --> 00:10:38,540
yahoo for example you can download stock

00:10:36,319 --> 00:10:40,699
data for example as an X file so it's

00:10:38,540 --> 00:10:43,480
very useful to have something to get

00:10:40,699 --> 00:10:46,009
access to data stored in an XO file and

00:10:43,480 --> 00:10:48,680
xrd for example makes it very convenient

00:10:46,009 --> 00:10:52,069
a number of others but you can use this

00:10:48,680 --> 00:10:54,860
num pipe for of course it's the core to

00:10:52,069 --> 00:10:56,990
have fast data crunching but pandas is

00:10:54,860 --> 00:10:59,329
also very useful extension of numpy

00:10:56,990 --> 00:11:01,790
where time series analysis is added for

00:10:59,329 --> 00:11:03,889
example if we have a time series which

00:11:01,790 --> 00:11:05,590
is not like evenly distributed over the

00:11:03,889 --> 00:11:06,880
year we have like

00:11:05,590 --> 00:11:08,800
at the beginning of the month you have a

00:11:06,880 --> 00:11:11,020
second one in for next month a of 10

00:11:08,800 --> 00:11:12,850
days and so forth pandas takes care of

00:11:11,020 --> 00:11:15,550
all these and there's also if you have

00:11:12,850 --> 00:11:18,040
three time series for example panels can

00:11:15,550 --> 00:11:20,290
analyze these simultaneously and for

00:11:18,040 --> 00:11:22,090
example handle missing data because if

00:11:20,290 --> 00:11:24,850
you have to time series where you have

00:11:22,090 --> 00:11:27,340
data not for the same points in time

00:11:24,850 --> 00:11:28,750
then what do you do about that either

00:11:27,340 --> 00:11:31,240
you handle it by yourself but pandas

00:11:28,750 --> 00:11:34,450
does it very conveniently and helps you

00:11:31,240 --> 00:11:37,270
with things that are not that rigidly

00:11:34,450 --> 00:11:40,660
organized and we will see it's very

00:11:37,270 --> 00:11:43,240
useful method live of course is like a

00:11:40,660 --> 00:11:46,000
standard still to plot things in 2d and

00:11:43,240 --> 00:11:48,130
3d this could be a very simple example

00:11:46,000 --> 00:11:49,810
way say I want to analyze the

00:11:48,130 --> 00:11:52,570
performance historical performance of

00:11:49,810 --> 00:11:55,570
the dax index and you see above just

00:11:52,570 --> 00:11:57,820
like the movement of the index see the

00:11:55,570 --> 00:12:00,520
crises or the two crises the big ones

00:11:57,820 --> 00:12:03,490
the first the bust of the new economy

00:12:00,520 --> 00:12:05,290
bubble and the second one after two

00:12:03,490 --> 00:12:07,150
thousand eight different region

00:12:05,290 --> 00:12:11,140
financial crisis and below you see the

00:12:07,150 --> 00:12:13,000
daily lock returns positive returns a

00:12:11,140 --> 00:12:15,190
negative returns of course you see

00:12:13,000 --> 00:12:17,680
volatility clustering and these are for

00:12:15,190 --> 00:12:20,080
example typical things you want to have

00:12:17,680 --> 00:12:22,600
when you're on the last time series and

00:12:20,080 --> 00:12:24,490
with pizen there are only a couple of

00:12:22,600 --> 00:12:27,130
lines of code when you have the data

00:12:24,490 --> 00:12:29,080
stored an excerpt where you just iterate

00:12:27,130 --> 00:12:30,790
over the rows that end this XO sheet if

00:12:29,080 --> 00:12:34,180
you know where the data is placed and

00:12:30,790 --> 00:12:36,130
you can generate a list of dates for

00:12:34,180 --> 00:12:38,560
example also times if you have high

00:12:36,130 --> 00:12:41,830
frequency data of course you would have

00:12:38,560 --> 00:12:44,800
liked to have times over a day then day

00:12:41,830 --> 00:12:46,840
is not small enough for the high

00:12:44,800 --> 00:12:48,820
frequency traders today and you can

00:12:46,840 --> 00:12:51,120
generate the list with the quotes and

00:12:48,820 --> 00:12:54,880
pandas for example you see it over there

00:12:51,120 --> 00:12:57,910
of a number of very convenient objects

00:12:54,880 --> 00:12:59,170
like series and also data frames where

00:12:57,910 --> 00:13:02,650
all the things happen that i mentioned

00:12:59,170 --> 00:13:05,890
before there panda pandas takes care of

00:13:02,650 --> 00:13:08,530
the missing data for example and and

00:13:05,890 --> 00:13:12,850
really has a mechanism to attach two

00:13:08,530 --> 00:13:14,920
points to the right dates so that see it

00:13:12,850 --> 00:13:18,370
here you don't have to take care of the

00:13:14,920 --> 00:13:19,329
x axis where you say these are years or

00:13:18,370 --> 00:13:22,059
dates

00:13:19,329 --> 00:13:26,529
and you don't have to take care of which

00:13:22,059 --> 00:13:30,009
is to be placed where and to generate

00:13:26,529 --> 00:13:32,290
such a graphic the only a couple of

00:13:30,009 --> 00:13:34,420
lines with matt blood lip if we have

00:13:32,290 --> 00:13:37,540
another language everybody of you is

00:13:34,420 --> 00:13:40,480
aware of it it takes probably lots of

00:13:37,540 --> 00:13:42,129
code to generate it but this is also

00:13:40,480 --> 00:13:43,629
everything that a student can learn over

00:13:42,129 --> 00:13:45,999
the course of a single semester course

00:13:43,629 --> 00:13:49,420
and this is for me also something that

00:13:45,999 --> 00:13:51,579
is important because priceless as i said

00:13:49,420 --> 00:13:53,559
before very well suited to teach such

00:13:51,579 --> 00:13:54,999
stuff not only to analyze things and to

00:13:53,559 --> 00:13:58,660
work with it but also to teach and to

00:13:54,999 --> 00:14:00,579
learn these things but you have also

00:13:58,660 --> 00:14:02,709
some more sophisticated things if you

00:14:00,579 --> 00:14:04,629
want to analyze time series in a

00:14:02,709 --> 00:14:07,149
scientific context this again is done

00:14:04,629 --> 00:14:09,970
with panda but what you see here is like

00:14:07,149 --> 00:14:12,759
a meta statistics you have functions to

00:14:09,970 --> 00:14:15,249
to generate and to calculate role in

00:14:12,759 --> 00:14:17,529
moving rolling averages over time and so

00:14:15,249 --> 00:14:20,379
forth but almost everything you can

00:14:17,529 --> 00:14:22,809
think of you can do with panda then you

00:14:20,379 --> 00:14:25,660
have correlation functions overruling

00:14:22,809 --> 00:14:28,929
windows and so forth and parnassus doing

00:14:25,660 --> 00:14:31,569
all this what you see here with the same

00:14:28,929 --> 00:14:33,779
compactness only with a couple of lines

00:14:31,569 --> 00:14:33,779
of code

00:14:37,160 --> 00:14:47,750
which is rolling over 250 two days and

00:14:43,449 --> 00:14:50,389
it takes chaos simply of the attachment

00:14:47,750 --> 00:14:52,129
to the single points in time because you

00:14:50,389 --> 00:14:55,069
see this starts a little bit out later

00:14:52,129 --> 00:14:57,379
so the first period is missing but the

00:14:55,069 --> 00:14:59,360
sub problem is Ponder's so it takes care

00:14:57,379 --> 00:15:02,089
of the missing data it just adjusts the

00:14:59,360 --> 00:15:06,290
exacts s and so forth in that sense if

00:15:02,089 --> 00:15:07,910
you have to analyze time series upon us

00:15:06,290 --> 00:15:10,610
is a really good choice because it makes

00:15:07,910 --> 00:15:13,819
a lot of stuff convenient building upon

00:15:10,610 --> 00:15:15,769
numpy where these functions are missing

00:15:13,819 --> 00:15:19,879
but I had a very interesting discussion

00:15:15,769 --> 00:15:23,149
this at the lunch hour today and there

00:15:19,879 --> 00:15:25,819
was there are still things going on

00:15:23,149 --> 00:15:28,670
where they want to put these functions

00:15:25,819 --> 00:15:31,129
into a numpy into the core library so

00:15:28,670 --> 00:15:32,300
that maybe in the near future they've

00:15:31,129 --> 00:15:34,459
been talking about six to nine months

00:15:32,300 --> 00:15:36,949
you will have these time series or a

00:15:34,459 --> 00:15:41,209
couple of them the most basic ones also

00:15:36,949 --> 00:15:43,850
in the number library then of course you

00:15:41,209 --> 00:15:45,649
have the cross-section data this is

00:15:43,850 --> 00:15:47,769
another picture the the first two

00:15:45,649 --> 00:15:51,560
pictures have been like time series yeah

00:15:47,769 --> 00:15:53,660
different periods of time here you have

00:15:51,560 --> 00:15:57,730
seen the point in time but lots of

00:15:53,660 --> 00:16:00,290
information about it what what this says

00:15:57,730 --> 00:16:03,199
it's little bit complicated it's implied

00:16:00,290 --> 00:16:05,360
volatility of a number of options the

00:16:03,199 --> 00:16:09,170
input our option quotes that you observe

00:16:05,360 --> 00:16:11,800
at the exchanges and wires optimization

00:16:09,170 --> 00:16:15,079
you calculate numerically calculate

00:16:11,800 --> 00:16:16,720
implied volatilities these are very very

00:16:15,079 --> 00:16:19,790
important inputs to wear your

00:16:16,720 --> 00:16:22,160
derivatives in general so people at

00:16:19,790 --> 00:16:24,439
qantas I used to work with these and

00:16:22,160 --> 00:16:26,779
they are calculated updated regularly at

00:16:24,439 --> 00:16:28,699
least on a daily basis sometimes many

00:16:26,779 --> 00:16:31,430
many times over the day and you have

00:16:28,699 --> 00:16:35,990
also take care of these cross section

00:16:31,430 --> 00:16:38,540
data but let us take a brief look at the

00:16:35,990 --> 00:16:41,959
theory of derivatives analytics so the

00:16:38,540 --> 00:16:45,639
most most important is on the right well

00:16:41,959 --> 00:16:50,410
maybe let's say they the first

00:16:45,639 --> 00:16:53,319
consistent model to value an option

00:16:50,410 --> 00:16:55,329
call and put options which can be

00:16:53,319 --> 00:16:58,379
exercised at a single date has been

00:16:55,329 --> 00:17:01,600
published in 1973 reflects colds and

00:16:58,379 --> 00:17:03,610
simultaneously Robert Merton also

00:17:01,600 --> 00:17:05,980
published companion paper they worked

00:17:03,610 --> 00:17:07,839
together and two of them because the

00:17:05,980 --> 00:17:11,140
third was already died at that time

00:17:07,839 --> 00:17:12,850
received a Nobel Prize for economics for

00:17:11,140 --> 00:17:16,299
discovering the formula which is behind

00:17:12,850 --> 00:17:18,760
this but this model says mainly we have

00:17:16,299 --> 00:17:20,980
two assets traded and market the one is

00:17:18,760 --> 00:17:22,360
for example index like the tax that

00:17:20,980 --> 00:17:24,520
we've seen before and the other is like

00:17:22,360 --> 00:17:27,789
a riskless bond is like a bank account

00:17:24,520 --> 00:17:30,850
the taxes of course risky no one knows

00:17:27,789 --> 00:17:32,950
where it will develop tomorrow there's

00:17:30,850 --> 00:17:35,919
uncertainty about that this is

00:17:32,950 --> 00:17:42,309
represented by a Brownian motion which

00:17:35,919 --> 00:17:45,039
is like a normal normally random figure

00:17:42,309 --> 00:17:46,720
and the second one is like a riskless

00:17:45,039 --> 00:17:50,620
bond you can go to the bank and the bank

00:17:46,720 --> 00:17:53,110
says okay you get our percent return on

00:17:50,620 --> 00:17:56,490
this is for sure there's no risk you get

00:17:53,110 --> 00:17:59,140
it and take it or leave it so to say and

00:17:56,490 --> 00:18:01,929
in this world they showed that if

00:17:59,140 --> 00:18:03,580
trading in these two securities is

00:18:01,929 --> 00:18:05,740
available you can replicate the payoff

00:18:03,580 --> 00:18:07,090
of the option and if you replicate or

00:18:05,740 --> 00:18:10,030
can replicate something than by

00:18:07,090 --> 00:18:11,380
arbitrage the price of the replicating

00:18:10,030 --> 00:18:13,179
portfolio and the option must be the

00:18:11,380 --> 00:18:15,909
same because if you have the same payoff

00:18:13,179 --> 00:18:18,400
the price for two things must be equal

00:18:15,909 --> 00:18:20,820
so this is the main the fundamental

00:18:18,400 --> 00:18:23,530
thing behind it so there is a closed

00:18:20,820 --> 00:18:25,780
formula for this so what I would show

00:18:23,530 --> 00:18:27,669
next is not necessary at all you don't

00:18:25,780 --> 00:18:29,320
have to simulate such a model or maybe

00:18:27,669 --> 00:18:31,720
in a different context but not to value

00:18:29,320 --> 00:18:33,340
a simple option but for the simple

00:18:31,720 --> 00:18:34,900
option which is my next example you

00:18:33,340 --> 00:18:37,870
don't have to simulate it but I think

00:18:34,900 --> 00:18:40,330
it's very enlightening example because

00:18:37,870 --> 00:18:42,909
it's simply enough to understand the

00:18:40,330 --> 00:18:46,030
major workings behind it and what we

00:18:42,909 --> 00:18:48,100
will do is go to the next slide you see

00:18:46,030 --> 00:18:50,590
equation 1 which is the one which has

00:18:48,100 --> 00:18:52,330
these the uncertainty to risk built in

00:18:50,590 --> 00:18:54,100
there is a risk source which is

00:18:52,330 --> 00:18:56,700
represented by the set as a Brownian

00:18:54,100 --> 00:18:59,679
motion and we can discretize the

00:18:56,700 --> 00:19:02,380
stochastic differential equation to get

00:18:59,679 --> 00:19:03,920
a difference equation where we now are

00:19:02,380 --> 00:19:07,610
now arrived in a

00:19:03,920 --> 00:19:09,500
discrete-time crit space so to say the

00:19:07,610 --> 00:19:11,810
first equation was in a continuous time

00:19:09,500 --> 00:19:15,170
setting but in a computer is very hard

00:19:11,810 --> 00:19:16,630
to to build a model with the continuous

00:19:15,170 --> 00:19:19,580
time so you need something that is

00:19:16,630 --> 00:19:22,370
discrete and he has discretization you

00:19:19,580 --> 00:19:24,290
have a time interval of delta T and you

00:19:22,370 --> 00:19:26,390
have this difference equation which

00:19:24,290 --> 00:19:31,550
tells you how to come from the value

00:19:26,390 --> 00:19:33,620
today to the value today plus delta T so

00:19:31,550 --> 00:19:35,540
to say the next step could be a day

00:19:33,620 --> 00:19:37,520
could be an hour or could be even a

00:19:35,540 --> 00:19:41,780
month or whatever you choose to value

00:19:37,520 --> 00:19:43,130
your option in my examples when we have

00:19:41,780 --> 00:19:45,890
one year rise and you will typically

00:19:43,130 --> 00:19:48,200
have like 20 time steps or we will have

00:19:45,890 --> 00:19:51,530
50 time steps for example like a week of

00:19:48,200 --> 00:19:54,620
a horizon of a year so the only thing

00:19:51,530 --> 00:19:55,670
you have to do is to make sure that you

00:19:54,620 --> 00:20:00,050
have standard normally distributed

00:19:55,670 --> 00:20:02,960
random figures a random variable small

00:20:00,050 --> 00:20:11,330
set and this is the source of randomness

00:20:02,960 --> 00:20:15,800
over there into your difference equation

00:20:11,330 --> 00:20:20,840
and then you can evolve your index still

00:20:15,800 --> 00:20:22,850
hastily you can simulate it so if you

00:20:20,840 --> 00:20:27,140
have done enough simulations of the

00:20:22,850 --> 00:20:29,990
index for example say 10,000 past 10,000

00:20:27,140 --> 00:20:33,710
simulation runs then you get at the

00:20:29,990 --> 00:20:36,830
horizon t big t where you are interested

00:20:33,710 --> 00:20:39,710
in you get maybe 10,000 of these

00:20:36,830 --> 00:20:41,660
realizations and as I said before the

00:20:39,710 --> 00:20:44,140
price of a derivative instrument is

00:20:41,660 --> 00:20:47,720
derived from the value of the underlying

00:20:44,140 --> 00:20:50,030
so you have some kind of function H it's

00:20:47,720 --> 00:20:54,740
the inner value function which gives you

00:20:50,030 --> 00:20:57,410
exactly this connection where you not

00:20:54,740 --> 00:20:59,480
only have ten thousand sts but you have

00:20:57,410 --> 00:21:02,600
also the inner value of the option at

00:20:59,480 --> 00:21:08,300
this date and you can sum it up averaged

00:21:02,600 --> 00:21:10,460
over it and discount it back this a huge

00:21:08,300 --> 00:21:12,860
block of theory behind it but this is a

00:21:10,460 --> 00:21:13,580
very very brief summary just to get to

00:21:12,860 --> 00:21:17,150
what

00:21:13,580 --> 00:21:19,550
want to see the next step the only thing

00:21:17,150 --> 00:21:24,350
you have to crash p is that you simulate

00:21:19,550 --> 00:21:26,060
things thousand times 10,000 times you

00:21:24,350 --> 00:21:28,640
have number of values at the end you

00:21:26,060 --> 00:21:35,240
average over these anti discounting back

00:21:28,640 --> 00:21:37,970
then you have the value graphically it

00:21:35,240 --> 00:21:39,680
could look like this these are only 20

00:21:37,970 --> 00:21:42,650
simulated index levels it doesn't

00:21:39,680 --> 00:21:45,020
suffice to simulations for evaluation in

00:21:42,650 --> 00:21:47,360
order for the estimated to converge you

00:21:45,020 --> 00:21:51,440
need thousands sometimes even hundred

00:21:47,360 --> 00:21:53,600
thousands of similar simulated paths so

00:21:51,440 --> 00:21:56,450
here's just to show what happens you

00:21:53,600 --> 00:21:59,180
started a point here is 36 any example

00:21:56,450 --> 00:22:01,280
and there is a random evolution of the

00:21:59,180 --> 00:22:03,440
index and this a couple of times you

00:22:01,280 --> 00:22:05,210
also see the thick blue line which

00:22:03,440 --> 00:22:09,620
represents the average over this this is

00:22:05,210 --> 00:22:12,470
the drift are on average this says the

00:22:09,620 --> 00:22:19,490
index drifts with our which is in this

00:22:12,470 --> 00:22:24,440
example six percent parallel so let's

00:22:19,490 --> 00:22:27,110
come to python I think if you take a

00:22:24,440 --> 00:22:30,110
look apart from the import of library

00:22:27,110 --> 00:22:32,240
functions every student if you start out

00:22:30,110 --> 00:22:34,010
this looks like mathematics you just say

00:22:32,240 --> 00:22:36,710
that for some of the strike price k

00:22:34,010 --> 00:22:38,810
equals 40 this is nothing to do with

00:22:36,710 --> 00:22:41,480
programming but it's quite easy it's

00:22:38,810 --> 00:22:44,480
short and it's dynamic typing you don't

00:22:41,480 --> 00:22:48,770
have to take care of or only to some

00:22:44,480 --> 00:22:51,320
extent if you have k like 40 dot or if

00:22:48,770 --> 00:22:53,060
you have k like 40 if you want to divide

00:22:51,320 --> 00:22:55,490
things and so forth of course you have

00:22:53,060 --> 00:22:57,710
to take care but even for students as I

00:22:55,490 --> 00:23:00,020
said it's easy to grasp what it's behind

00:22:57,710 --> 00:23:02,630
it are just like a couple of parameters

00:23:00,020 --> 00:23:05,020
and they are defined this is has nothing

00:23:02,630 --> 00:23:09,530
to do with programming so far just

00:23:05,020 --> 00:23:13,030
variable declarations but if you come to

00:23:09,530 --> 00:23:17,450
the simulation this is where we are now

00:23:13,030 --> 00:23:19,160
close to the main topic the simulation

00:23:17,450 --> 00:23:22,520
step over there index level path

00:23:19,160 --> 00:23:24,620
generation we just initialize the

00:23:22,520 --> 00:23:26,920
metrics as i said before finances all

00:23:24,620 --> 00:23:31,730
about matrices linear algebra

00:23:26,920 --> 00:23:33,860
initialize it with or the first day so

00:23:31,730 --> 00:23:37,160
to say where you start off for example

00:23:33,860 --> 00:23:41,510
at the first of January in 2011 you

00:23:37,160 --> 00:23:43,850
analyze it analyze it with s0 which was

00:23:41,510 --> 00:23:48,040
defined before 36 you remember the

00:23:43,850 --> 00:23:51,650
picture all these pairs started at 36

00:23:48,040 --> 00:23:55,670
then you draw for every time step the

00:23:51,650 --> 00:23:57,890
required number of random figures this

00:23:55,670 --> 00:24:00,830
is done with a single command standard

00:23:57,890 --> 00:24:04,040
normal of I big I is the number of

00:24:00,830 --> 00:24:07,450
iterations it's like 10,000 or 50,000

00:24:04,040 --> 00:24:11,450
and then you go step by step and

00:24:07,450 --> 00:24:14,120
simulate the evolution of the index over

00:24:11,450 --> 00:24:16,400
time and this is already time consuming

00:24:14,120 --> 00:24:19,460
you could have done this of course oh

00:24:16,400 --> 00:24:21,230
and see you would have c++ you would

00:24:19,460 --> 00:24:25,010
iterate twice of course you would

00:24:21,230 --> 00:24:27,200
iterate and the x and the y direction

00:24:25,010 --> 00:24:29,809
and this would take pretty long in

00:24:27,200 --> 00:24:34,730
piloting i have also i will show this

00:24:29,809 --> 00:24:37,580
shortly a more compact implementation

00:24:34,730 --> 00:24:39,350
where you even can get rid of this

00:24:37,580 --> 00:24:42,260
iteration where everything is done an

00:24:39,350 --> 00:24:44,809
umpire but in order to retain some

00:24:42,260 --> 00:24:47,390
readability i chose this example that

00:24:44,809 --> 00:24:53,540
you see that it's evolved step by step

00:24:47,390 --> 00:24:56,800
but as a vector step by step so in the

00:24:53,540 --> 00:24:59,570
end there you see the the estimator it

00:24:56,800 --> 00:25:02,030
looks pretty similar to the formula that

00:24:59,570 --> 00:25:04,550
we had before it just discount the

00:25:02,030 --> 00:25:09,309
average of your inner values at the end

00:25:04,550 --> 00:25:09,309
and you're done

00:25:11,430 --> 00:25:18,580
it's the first pretty simple example of

00:25:14,700 --> 00:25:21,460
Python usage for Monte Carlo simulation

00:25:18,580 --> 00:25:22,960
is the standard book for Monte Carlo

00:25:21,460 --> 00:25:25,420
simulation financial engineering is by

00:25:22,960 --> 00:25:27,070
class of men published in 2004 starts

00:25:25,420 --> 00:25:29,680
out with a similar example but there's

00:25:27,070 --> 00:25:33,340
an implementation and extra and it's a

00:25:29,680 --> 00:25:36,340
noise like but very readable enough take

00:25:33,340 --> 00:25:38,890
care of the seller if you just just

00:25:36,340 --> 00:25:40,840
think of axel where you have to change

00:25:38,890 --> 00:25:42,780
the number of time steps or you change

00:25:40,840 --> 00:25:45,700
number of pairs and so forth and it's

00:25:42,780 --> 00:25:48,130
but if you would have started all this

00:25:45,700 --> 00:25:50,470
Python I think much more people would

00:25:48,130 --> 00:25:56,340
have replicated and understand that a

00:25:50,470 --> 00:25:58,510
little bit better one step further

00:25:56,340 --> 00:26:01,300
evaluation of European option is not

00:25:58,510 --> 00:26:03,160
very involved it's like what I showed

00:26:01,300 --> 00:26:05,320
there it's not really necessary before

00:26:03,160 --> 00:26:07,270
because I said there is an analytical

00:26:05,320 --> 00:26:09,700
the clothes formula available you don't

00:26:07,270 --> 00:26:12,040
have to simulate it but if it comes to

00:26:09,700 --> 00:26:14,500
American options which can be exercised

00:26:12,040 --> 00:26:16,630
at any time over an interval and

00:26:14,500 --> 00:26:18,760
comparison to European option which can

00:26:16,630 --> 00:26:22,450
be exercised only at the end of the

00:26:18,760 --> 00:26:24,310
interval only at one point in time the

00:26:22,450 --> 00:26:25,540
theory and also the implementation is a

00:26:24,310 --> 00:26:28,390
little bit more involved and more

00:26:25,540 --> 00:26:30,910
complicated and you need to do a lot

00:26:28,390 --> 00:26:33,430
more of calculation and number crunching

00:26:30,910 --> 00:26:35,130
in comparison because you have to solve

00:26:33,430 --> 00:26:37,660
an optimist stopping problem which means

00:26:35,130 --> 00:26:39,880
for example if the option has a time to

00:26:37,660 --> 00:26:41,800
majority of one year you have to take a

00:26:39,880 --> 00:26:44,260
look at the option that every day and

00:26:41,800 --> 00:26:46,360
decide should I exercise there should i

00:26:44,260 --> 00:26:48,760
wait for the exercises or should I wait

00:26:46,360 --> 00:26:51,130
for the exerciser for the way this is

00:26:48,760 --> 00:26:53,680
the everyday question that you have to

00:26:51,130 --> 00:26:56,590
ask and it's not that easy to solve

00:26:53,680 --> 00:26:58,120
their problem and a different context

00:26:56,590 --> 00:27:00,310
different from on the Carter simulation

00:26:58,120 --> 00:27:02,260
it is quite easy but if you think of

00:27:00,310 --> 00:27:04,300
Monte Carlo simulation if you think for

00:27:02,260 --> 00:27:06,370
example you have 10,000 paths we saw

00:27:04,300 --> 00:27:10,900
them or just think of the 20 you saw in

00:27:06,370 --> 00:27:17,020
the picture and you're writing on one of

00:27:10,900 --> 00:27:19,630
these paths then you don't know how to

00:27:17,020 --> 00:27:21,520
make the decision about exercising or

00:27:19,630 --> 00:27:22,630
not because if you are writing if you're

00:27:21,520 --> 00:27:26,110
sitting on one

00:27:22,630 --> 00:27:27,760
such paths you don't know what happens

00:27:26,110 --> 00:27:30,580
tomorrow it just have the information

00:27:27,760 --> 00:27:33,070
about the index level today you don't

00:27:30,580 --> 00:27:34,900
know what happens tomorrow maybe if you

00:27:33,070 --> 00:27:36,640
have similar you can say well I use the

00:27:34,900 --> 00:27:39,250
information that my computer program

00:27:36,640 --> 00:27:40,930
generated for me because it's clear on

00:27:39,250 --> 00:27:44,380
the next day to day we are hundred and

00:27:40,930 --> 00:27:47,140
the next day my simulation says 110 yeah

00:27:44,380 --> 00:27:48,790
but perfect for side there's nothing

00:27:47,140 --> 00:27:50,830
seen in financial markets so I can't use

00:27:48,790 --> 00:27:53,170
this information in variation algorithm

00:27:50,830 --> 00:27:55,870
if it would use it I would make a

00:27:53,170 --> 00:27:57,940
systematic error I would build in

00:27:55,870 --> 00:28:00,190
something that I don't one because I

00:27:57,940 --> 00:28:06,310
would overestimate the value of the

00:28:00,190 --> 00:28:09,370
option so I need something different but

00:28:06,310 --> 00:28:10,720
a little bit of background the optimal

00:28:09,370 --> 00:28:14,260
stopping problem which is a very

00:28:10,720 --> 00:28:17,080
abstract formulation to say if I can

00:28:14,260 --> 00:28:19,770
stop the option at any time in the

00:28:17,080 --> 00:28:23,470
future I take the supremum over the

00:28:19,770 --> 00:28:25,270
expectation of the payoff overall

00:28:23,470 --> 00:28:28,570
stopping times that are available this

00:28:25,270 --> 00:28:30,610
very abstract content but there's a very

00:28:28,570 --> 00:28:34,720
important result which says at any given

00:28:30,610 --> 00:28:37,810
time over the relevant interval the

00:28:34,720 --> 00:28:41,200
value at time T is the maximum of the

00:28:37,810 --> 00:28:45,460
inner value which is immediate exercise

00:28:41,200 --> 00:28:48,880
and the value of waiting which is an

00:28:45,460 --> 00:28:52,600
expectation as defined below so at any

00:28:48,880 --> 00:28:55,180
point in time I know I can wait ok if I

00:28:52,600 --> 00:28:59,770
exercise right now I know for sure what

00:28:55,180 --> 00:29:02,050
i get if i wait it's unsure but i have

00:28:59,770 --> 00:29:04,300
an expectation over it and the problem

00:29:02,050 --> 00:29:08,860
of valuing the American option in this

00:29:04,300 --> 00:29:10,540
context is to get an estimate for the

00:29:08,860 --> 00:29:13,840
expectation as I said you are not

00:29:10,540 --> 00:29:15,700
allowed to use the perfect stuff in

00:29:13,840 --> 00:29:18,460
terms of if I'm sitting on this single

00:29:15,700 --> 00:29:22,000
path I know what is on the next day what

00:29:18,460 --> 00:29:25,120
i can do is to get estimates by using

00:29:22,000 --> 00:29:27,490
the cross section to remain with the

00:29:25,120 --> 00:29:29,140
terms that i introduced earlier to use

00:29:27,490 --> 00:29:32,080
all the information that I have at this

00:29:29,140 --> 00:29:36,010
state overall my 10,000 simulated pads

00:29:32,080 --> 00:29:39,010
and regress the values

00:29:36,010 --> 00:29:43,660
that I see in the future against the

00:29:39,010 --> 00:29:45,840
level the index level today so here is

00:29:43,660 --> 00:29:49,270
it formulated again you have the problem

00:29:45,840 --> 00:29:52,120
given a day te and path I that you don't

00:29:49,270 --> 00:29:54,610
know the expected value you only know

00:29:52,120 --> 00:29:56,290
the single simulated value and the

00:29:54,610 --> 00:29:59,740
solution that Longstaff and Schwartz

00:29:56,290 --> 00:30:02,080
proposed in 2001 it's not that long ago

00:29:59,740 --> 00:30:05,320
it's just ten years ago that they came

00:30:02,080 --> 00:30:07,120
up with this efficient algorithm is to

00:30:05,320 --> 00:30:09,250
estimate the continuation various but

00:30:07,120 --> 00:30:11,500
ordinary least-squares regression some

00:30:09,250 --> 00:30:13,540
kind of optimization problem where I

00:30:11,500 --> 00:30:16,260
said earlier and then finance you more

00:30:13,540 --> 00:30:20,140
of the not neat optimization techniques

00:30:16,260 --> 00:30:22,090
and the algorithm is called least

00:30:20,140 --> 00:30:25,960
squares Monte Carlo and then principal

00:30:22,090 --> 00:30:28,300
our valuation sweet decision is built

00:30:25,960 --> 00:30:30,550
around two things it's Python and it's

00:30:28,300 --> 00:30:33,010
this algorithms these are the two main

00:30:30,550 --> 00:30:34,990
building blocks of what we are offering

00:30:33,010 --> 00:30:39,940
to our clients and users of the software

00:30:34,990 --> 00:30:43,270
and just to make the point again before

00:30:39,940 --> 00:30:45,730
2000 so to say there was no efficient

00:30:43,270 --> 00:30:48,880
algorithm available to value American

00:30:45,730 --> 00:30:51,040
options by Monte Carlo simulation so

00:30:48,880 --> 00:30:53,260
there has been around an approach since

00:30:51,040 --> 00:30:55,270
the 70s with a different numerical

00:30:53,260 --> 00:30:58,600
method but by Monte Carlo simulation

00:30:55,270 --> 00:31:01,210
it's just possible in Sten years I was a

00:30:58,600 --> 00:31:03,910
major obstacle and it was also some kind

00:31:01,210 --> 00:31:05,770
of annoying thing because when the cali

00:31:03,910 --> 00:31:09,550
simulation is very well suited for a

00:31:05,770 --> 00:31:11,830
number of things it was not suited at

00:31:09,550 --> 00:31:14,620
least at that time for american options

00:31:11,830 --> 00:31:18,010
so there was like demo versions but with

00:31:14,620 --> 00:31:20,050
the invention of this algorithm there

00:31:18,010 --> 00:31:22,660
was a whole new world for applications

00:31:20,050 --> 00:31:26,040
in terms of Monte Carlo simulation but

00:31:22,660 --> 00:31:28,390
this also raise the bar in terms of

00:31:26,040 --> 00:31:30,670
computational power that you need in

00:31:28,390 --> 00:31:32,290
order to implement it because on the

00:31:30,670 --> 00:31:33,970
carry simulation in combination with all

00:31:32,290 --> 00:31:36,490
these regression things is

00:31:33,970 --> 00:31:39,160
computationally very demanding how does

00:31:36,490 --> 00:31:42,940
it look like now we are again at a cross

00:31:39,160 --> 00:31:47,620
section data sheet it's generated with

00:31:42,940 --> 00:31:49,680
our analytics suite at any given point

00:31:47,620 --> 00:31:52,200
in time by simulation you have the

00:31:49,680 --> 00:31:54,750
red dots which are the real desta

00:31:52,200 --> 00:31:58,260
simulated continuation values you have a

00:31:54,750 --> 00:31:59,970
number of these like ten thousands but

00:31:58,260 --> 00:32:03,330
you can use them directly but you can

00:31:59,970 --> 00:32:07,200
use some kind of average you can use a

00:32:03,330 --> 00:32:14,700
regression function to decide whether to

00:32:07,200 --> 00:32:16,290
exercise the option or not if you have

00:32:14,700 --> 00:32:18,540
for example 50 time steps in your

00:32:16,290 --> 00:32:20,970
simulation you have to do this 50 times

00:32:18,540 --> 00:32:22,890
at every time step you do this and at

00:32:20,970 --> 00:32:24,870
every time step and this is shown on the

00:32:22,890 --> 00:32:28,980
next slide which is again a time series

00:32:24,870 --> 00:32:32,070
slide it's over time the agar rhythm

00:32:28,980 --> 00:32:34,080
works backwards starts at the end goes

00:32:32,070 --> 00:32:38,850
one step two step three steps backwards

00:32:34,080 --> 00:32:40,800
and always updates the information so

00:32:38,850 --> 00:32:43,830
here you would say for example the upper

00:32:40,800 --> 00:32:47,340
yellow line this will be the value of

00:32:43,830 --> 00:32:49,680
the option according to this path but

00:32:47,340 --> 00:32:52,080
you see the algorithm stands now well I

00:32:49,680 --> 00:32:53,850
would exercise already earlier because I

00:32:52,080 --> 00:32:57,240
cannot foresee that it will rise that

00:32:53,850 --> 00:33:02,610
high so I would exercise earlier and

00:32:57,240 --> 00:33:04,830
thereby I would so to say make a mistake

00:33:02,610 --> 00:33:07,770
on this particular path but on average

00:33:04,830 --> 00:33:09,540
you see it's coming down to really

00:33:07,770 --> 00:33:11,640
averaged value and this is what Monte

00:33:09,540 --> 00:33:16,310
Carlo simulation should do here there's

00:33:11,640 --> 00:33:20,430
a real dispersion at the start of the

00:33:16,310 --> 00:33:22,470
option term you can see that these

00:33:20,430 --> 00:33:24,810
things are coming together and a more

00:33:22,470 --> 00:33:27,330
average so this is how the algorithm

00:33:24,810 --> 00:33:29,460
works and you can imagine this is the

00:33:27,330 --> 00:33:31,200
very or the most simple example you can

00:33:29,460 --> 00:33:33,900
have it's just like an American put

00:33:31,200 --> 00:33:35,820
option it's the most plain vanilla stuff

00:33:33,900 --> 00:33:38,610
and there are lots of things that are

00:33:35,820 --> 00:33:42,720
very very complicated where you have for

00:33:38,610 --> 00:33:44,690
example 3 4 or 5 or even 10 sources of

00:33:42,720 --> 00:33:47,460
risk where you have different features

00:33:44,690 --> 00:33:49,350
built-in where you have to take care of

00:33:47,460 --> 00:33:52,050
different time windows and so forth and

00:33:49,350 --> 00:33:54,780
the algorithm and the the demand for

00:33:52,050 --> 00:33:55,480
computational power becomes higher and

00:33:54,780 --> 00:33:59,880
higher and

00:33:55,480 --> 00:33:59,880
algorithm more complex and more complex

00:34:00,900 --> 00:34:05,560
how does it look like in Python once

00:34:03,640 --> 00:34:12,180
again just the definitions of the

00:34:05,560 --> 00:34:14,620
variables for convenience a number of

00:34:12,180 --> 00:34:16,360
little helper functions you don't even

00:34:14,620 --> 00:34:19,810
need it in this i will show you shortly

00:34:16,360 --> 00:34:22,630
a very compact thing where you have

00:34:19,810 --> 00:34:24,610
random number generator here are some

00:34:22,630 --> 00:34:27,040
kind of variance reduction techniques

00:34:24,610 --> 00:34:29,440
because you would always have a Monte

00:34:27,040 --> 00:34:31,750
Carlo estimator that converges very fast

00:34:29,440 --> 00:34:33,970
which means that you can have fewer

00:34:31,750 --> 00:34:36,400
simulation pass in order to get good

00:34:33,970 --> 00:34:38,740
results so this is meant by variance

00:34:36,400 --> 00:34:40,030
reduction and if you have number of

00:34:38,740 --> 00:34:43,840
these techniques available that you can

00:34:40,030 --> 00:34:46,720
use the hope is that everything will be

00:34:43,840 --> 00:34:48,790
more accurate and more fast so they are

00:34:46,720 --> 00:34:51,040
built in two types of variance reduction

00:34:48,790 --> 00:34:55,690
techniques and they are very easy to

00:34:51,040 --> 00:34:57,790
build in enticing I cannot think of this

00:34:55,690 --> 00:34:59,950
implemented and C C++ of course it's

00:34:57,790 --> 00:35:02,500
possible but it would be I don't know

00:34:59,950 --> 00:35:04,660
number of 10 slides just to present the

00:35:02,500 --> 00:35:07,930
code in order to do these two things

00:35:04,660 --> 00:35:10,480
which are labeled AP and mmm ap stands

00:35:07,930 --> 00:35:12,610
for antithetic path which means for

00:35:10,480 --> 00:35:17,350
every up step I also have something that

00:35:12,610 --> 00:35:19,240
steps down and vice versa and mmm stands

00:35:17,350 --> 00:35:21,190
for moment matching we're just corrector

00:35:19,240 --> 00:35:23,890
and the numbers in terms of mean and

00:35:21,190 --> 00:35:25,540
standard deviation because the sort of

00:35:23,890 --> 00:35:28,180
random numbers from files are not that

00:35:25,540 --> 00:35:29,140
good but what I can easily do is just to

00:35:28,180 --> 00:35:31,900
correct the mean and the standard

00:35:29,140 --> 00:35:34,420
deviation in terms of having zero and

00:35:31,900 --> 00:35:37,800
the one afterwards what I desire so this

00:35:34,420 --> 00:35:39,850
is pretty easily done with lumpy and

00:35:37,800 --> 00:35:43,060
afterwards what you have already seen

00:35:39,850 --> 00:35:46,720
the simulation step where you have to

00:35:43,060 --> 00:35:50,020
step by step evolving simulation over

00:35:46,720 --> 00:35:53,350
time and now we come to the regression

00:35:50,020 --> 00:35:55,900
step if you if you want to have some

00:35:53,350 --> 00:35:58,810
slides of these but I didn't problem if

00:35:55,900 --> 00:36:00,250
I explained the longest of frauds or the

00:35:58,810 --> 00:36:01,570
least squares Monte Carlo algorithm in

00:36:00,250 --> 00:36:03,580
more detail I have a number of slides

00:36:01,570 --> 00:36:05,170
just to explain the algorithm but if

00:36:03,580 --> 00:36:08,100
it's implemented in Python you only have

00:36:05,170 --> 00:36:11,910
three lines of code mainly two lines so

00:36:08,100 --> 00:36:13,890
don't need to define the DRG where the

00:36:11,910 --> 00:36:16,020
regression parameters are stored so it's

00:36:13,890 --> 00:36:18,240
only two lines of code but the algorithm

00:36:16,020 --> 00:36:20,460
described is like three to four slides

00:36:18,240 --> 00:36:23,220
just to describe the algorithm some

00:36:20,460 --> 00:36:26,730
pythons pretty pretty compact you can do

00:36:23,220 --> 00:36:29,700
it very easily and the way command here

00:36:26,730 --> 00:36:32,790
from number is also very convenient that

00:36:29,700 --> 00:36:35,490
such that you have very concise

00:36:32,790 --> 00:36:38,390
implementation but what I want to show

00:36:35,490 --> 00:36:47,720
just as a brief demonstration in between

00:36:38,390 --> 00:36:51,180
is a little more compact implementation

00:36:47,720 --> 00:36:55,010
this is mainly anything you need just

00:36:51,180 --> 00:36:57,800
have a couple of a couple of variables

00:36:55,010 --> 00:37:00,390
you have the algorithm a little bit more

00:36:57,800 --> 00:37:02,700
compact here the simulation is done

00:37:00,390 --> 00:37:05,490
without any interation you need some

00:37:02,700 --> 00:37:07,590
finance behind it I simulate mainly the

00:37:05,490 --> 00:37:10,410
logarithm of the stock another stock

00:37:07,590 --> 00:37:12,330
itself so i can have addition enter

00:37:10,410 --> 00:37:15,300
instead of multiplication and then i can

00:37:12,330 --> 00:37:17,850
add it up so it becomes more compact and

00:37:15,300 --> 00:37:22,650
even a little bit more faster and there

00:37:17,850 --> 00:37:25,170
have only two lines for the whole

00:37:22,650 --> 00:37:27,210
regression step where I have to iterate

00:37:25,170 --> 00:37:29,370
because I need the information from the

00:37:27,210 --> 00:37:31,470
from the optimization step before here I

00:37:29,370 --> 00:37:33,510
can't get rid of the iteration but it's

00:37:31,470 --> 00:37:35,490
the only iteration that remains in here

00:37:33,510 --> 00:37:38,480
everything else is done on an umpire

00:37:35,490 --> 00:37:41,490
level in terms of matrices and arrays

00:37:38,480 --> 00:37:48,270
and you see here the recursion maybe if

00:37:41,490 --> 00:37:50,300
I take just two three and I should show

00:37:48,270 --> 00:37:50,300
you

00:37:52,740 --> 00:38:00,460
there is it the value 4.40 there are

00:37:57,700 --> 00:38:02,140
some other results so this is what I

00:38:00,460 --> 00:38:04,780
meant by variance reduction these are

00:38:02,140 --> 00:38:06,820
two other results from other variations

00:38:04,780 --> 00:38:08,079
you see that there is still a very ends

00:38:06,820 --> 00:38:10,660
in the value that you get because you

00:38:08,079 --> 00:38:14,200
simulate you always have simulation

00:38:10,660 --> 00:38:16,119
errors simple mathematical errors and

00:38:14,200 --> 00:38:19,440
you want to have this a little bit more

00:38:16,119 --> 00:38:22,329
compact but I just used a couple of a

00:38:19,440 --> 00:38:23,950
couple of pairs so the convergence is

00:38:22,329 --> 00:38:26,020
not that good but what I also want to

00:38:23,950 --> 00:38:29,109
show is if you want to plot this kind of

00:38:26,020 --> 00:38:31,599
stuff you can you can work with for

00:38:29,109 --> 00:38:38,700
example want to plot the first the first

00:38:31,599 --> 00:38:38,700
ten for example of these

00:38:50,910 --> 00:38:54,079
doesn't do it

00:38:58,990 --> 00:39:02,560
or what it's actually what what I wanted

00:39:00,880 --> 00:39:06,780
to show is the figure that you saw

00:39:02,560 --> 00:39:10,030
before just the 10 lines you only need

00:39:06,780 --> 00:39:13,600
you only need a single line of code just

00:39:10,030 --> 00:39:16,570
to to show the first for example 10 10

00:39:13,600 --> 00:39:18,760
pass or first 100 or whatever you want

00:39:16,570 --> 00:39:21,100
to see also for the other so you see

00:39:18,760 --> 00:39:25,260
everything done here is quite compact

00:39:21,100 --> 00:39:28,570
and also pretty fast in terms of speed I

00:39:25,260 --> 00:39:31,200
will show some results briefly

00:39:28,570 --> 00:39:31,200
afterwards

00:39:37,080 --> 00:39:46,160
this one thing that I came across

00:39:42,140 --> 00:39:50,040
actually I think a year or two ago where

00:39:46,160 --> 00:39:54,120
there was a paper published by Medvedev

00:39:50,040 --> 00:39:55,920
in scale a two researchers and they

00:39:54,120 --> 00:39:58,860
analyzed the variation of American

00:39:55,920 --> 00:40:01,110
options which I showed you before in the

00:39:58,860 --> 00:40:03,090
context of a rather complex model

00:40:01,110 --> 00:40:04,950
stochastic volatility and sarcastic

00:40:03,090 --> 00:40:07,920
short rates and what they came up with

00:40:04,950 --> 00:40:10,730
was like an approximation formula which

00:40:07,920 --> 00:40:14,270
is very easy and fast to implement and

00:40:10,730 --> 00:40:17,060
but this was not the point that I was

00:40:14,270 --> 00:40:19,770
intrigued by it was more the day wrote

00:40:17,060 --> 00:40:22,470
that the matlab code implementing the

00:40:19,770 --> 00:40:25,470
algorithm of Longstaff swartz actually

00:40:22,470 --> 00:40:28,320
will be discussed just before hand takes

00:40:25,470 --> 00:40:30,420
thousands of minutes to compute a single

00:40:28,320 --> 00:40:31,830
option price and this is of course

00:40:30,420 --> 00:40:34,530
nothing that you want to have in

00:40:31,830 --> 00:40:36,990
practice so if a bank or trader sitting

00:40:34,530 --> 00:40:41,400
there wants to will you his or his or

00:40:36,990 --> 00:40:44,850
her option she can't wait dozens of

00:40:41,400 --> 00:40:48,000
minutes for a single option price and I

00:40:44,850 --> 00:40:50,310
tried just for myself how fast it can go

00:40:48,000 --> 00:40:52,620
with pison without any hardware

00:40:50,310 --> 00:40:53,960
optimization numbers i represented just

00:40:52,620 --> 00:40:57,060
from this notebook which is already

00:40:53,960 --> 00:40:59,520
three years old though I was only

00:40:57,060 --> 00:41:04,080
hunting for orders of magnitude not for

00:40:59,520 --> 00:41:09,750
the last tens of second and take a look

00:41:04,080 --> 00:41:12,840
at the Pisan results of our script if we

00:41:09,750 --> 00:41:15,630
have a 25 time steps and 35,000 pass

00:41:12,840 --> 00:41:17,730
which represents more less about hundred

00:41:15,630 --> 00:41:22,740
and eighty megabytes of data which is

00:41:17,730 --> 00:41:26,310
lot which is much of data already for

00:41:22,740 --> 00:41:29,700
this simple setup the data is crunched

00:41:26,310 --> 00:41:31,650
on this notebook and 1.5 seconds and we

00:41:29,700 --> 00:41:34,410
get the same accuracy with which is of

00:41:31,650 --> 00:41:37,470
course a very important requirement view

00:41:34,410 --> 00:41:40,950
you can always say we get faster but you

00:41:37,470 --> 00:41:43,579
need the accuracy as well because there

00:41:40,950 --> 00:41:45,950
before it's all about money and

00:41:43,579 --> 00:41:49,539
you should take care even on the decimal

00:41:45,950 --> 00:41:52,279
places and not only on the big numbers

00:41:49,539 --> 00:41:55,269
so it's in terms of a comparable

00:41:52,279 --> 00:41:59,630
accuracy where we reduce the time from

00:41:55,269 --> 00:42:01,910
dozens of minutes to 1.5 seconds even if

00:41:59,630 --> 00:42:05,569
we go to let's say 50 time steps and

00:42:01,910 --> 00:42:07,609
100,000 pass then you have like already

00:42:05,569 --> 00:42:11,509
alone like one gigabyte of data to

00:42:07,609 --> 00:42:13,759
crunch thank you and then it takes on

00:42:11,509 --> 00:42:16,640
this notebook eight point five seconds

00:42:13,759 --> 00:42:19,759
which is still something different as

00:42:16,640 --> 00:42:23,359
dozens of minutes so to speed up this

00:42:19,759 --> 00:42:25,640
particular example has been 480 x plus

00:42:23,359 --> 00:42:27,650
but it is only to illustrate that it's

00:42:25,640 --> 00:42:30,170
possible with the pricing what many many

00:42:27,650 --> 00:42:31,819
people still think it's not the using

00:42:30,170 --> 00:42:34,450
pious and but not for the core

00:42:31,819 --> 00:42:37,190
implementation of their algorithms so

00:42:34,450 --> 00:42:41,150
what I also have to confess in a sense

00:42:37,190 --> 00:42:42,890
is that we used a little bit of a

00:42:41,150 --> 00:42:45,410
different implementation so we just

00:42:42,890 --> 00:42:47,539
tweaked and optimize the algorithm I had

00:42:45,410 --> 00:42:49,009
a conversation or at least an email

00:42:47,539 --> 00:42:51,199
exchange with one of these and a

00:42:49,009 --> 00:42:53,329
conversation about this and there were

00:42:51,199 --> 00:42:55,369
we had just like a prude force plain

00:42:53,329 --> 00:42:59,119
vanilla implementation and it was like I

00:42:55,369 --> 00:43:01,940
don't know 500,000 pass it was more like

00:42:59,119 --> 00:43:04,069
a boot force approach and I said well of

00:43:01,940 --> 00:43:07,309
course you have the choice and it's easy

00:43:04,069 --> 00:43:10,390
done with Python to add these two things

00:43:07,309 --> 00:43:12,709
that I showed before for example to have

00:43:10,390 --> 00:43:17,599
significantly improved conversions of

00:43:12,709 --> 00:43:20,749
the algorithm here are some things was

00:43:17,599 --> 00:43:26,209
actually 1.2 seconds in this particular

00:43:20,749 --> 00:43:29,749
run where we have valued 108 option

00:43:26,209 --> 00:43:34,219
prices but it's just to back up what i

00:43:29,749 --> 00:43:36,109
present it before so to the last part

00:43:34,219 --> 00:43:40,369
have to have a couple of minutes left

00:43:36,109 --> 00:43:41,630
it's about our valuation sweet what I

00:43:40,369 --> 00:43:43,900
wanted to show with the first two parts

00:43:41,630 --> 00:43:46,069
is the pies is very well suited to

00:43:43,900 --> 00:43:49,249
implement derivatives analytics

00:43:46,069 --> 00:43:51,380
applications but what we have done so

00:43:49,249 --> 00:43:54,019
far has really built a full-fledged

00:43:51,380 --> 00:43:56,480
derivatives analytics we'd around pising

00:43:54,019 --> 00:43:58,769
with many many thousand lines of

00:43:56,480 --> 00:44:00,690
which of course a little bit different

00:43:58,769 --> 00:44:03,420
than the one show before which are only

00:44:00,690 --> 00:44:08,480
examples and kind of photo types like a

00:44:03,420 --> 00:44:13,740
grid make examples and not productive

00:44:08,480 --> 00:44:18,240
environment code and what our suite can

00:44:13,740 --> 00:44:20,789
do already is to value a number of

00:44:18,240 --> 00:44:24,089
products the universe of derivatives is

00:44:20,789 --> 00:44:25,859
not unfortunately not that simple as

00:44:24,089 --> 00:44:27,599
presented before that we have like a

00:44:25,859 --> 00:44:29,730
European put option and the European

00:44:27,599 --> 00:44:31,799
call option and in addition you may have

00:44:29,730 --> 00:44:33,660
an American put an American call option

00:44:31,799 --> 00:44:36,390
you have hundreds of thousands of

00:44:33,660 --> 00:44:39,180
different products traded in the market

00:44:36,390 --> 00:44:43,380
and our approach was to have a very very

00:44:39,180 --> 00:44:45,299
flexible modeling engine where you can

00:44:43,380 --> 00:44:47,039
build models by yourself you also have a

00:44:45,299 --> 00:44:49,109
number of standard models but where you

00:44:47,039 --> 00:44:52,079
can model almost everything you can

00:44:49,109 --> 00:44:55,079
think of and the whole logic behind is

00:44:52,079 --> 00:44:56,940
also done in Python you have a number of

00:44:55,079 --> 00:44:58,920
underlying is that you can use you can

00:44:56,940 --> 00:45:00,329
value options on indices and stocks

00:44:58,920 --> 00:45:03,089
bonds interest rate currencies

00:45:00,329 --> 00:45:08,130
commodities we also added a variance and

00:45:03,089 --> 00:45:10,230
volatility as assets recently so you can

00:45:08,130 --> 00:45:13,170
do already a lot of stuff I don't want

00:45:10,230 --> 00:45:15,690
to say everything because there's too

00:45:13,170 --> 00:45:18,240
many products and universe and I think

00:45:15,690 --> 00:45:20,490
no one can do everything but we can do

00:45:18,240 --> 00:45:22,589
already a lot where you can use it this

00:45:20,490 --> 00:45:24,809
many financial research of course where

00:45:22,589 --> 00:45:26,430
I use it at the University but it's

00:45:24,809 --> 00:45:28,319
mainly targeted at the financial

00:45:26,430 --> 00:45:30,900
engineer at the quant who's designing

00:45:28,319 --> 00:45:33,029
products or someone who is buying such

00:45:30,900 --> 00:45:36,329
products in the market like in hedge

00:45:33,029 --> 00:45:38,700
funds or in asset management companies

00:45:36,329 --> 00:45:40,980
they buy the products from the

00:45:38,700 --> 00:45:43,380
investment bank but also for insurance

00:45:40,980 --> 00:45:45,750
companies and actuarial calculations for

00:45:43,380 --> 00:45:47,970
financial reporting and this is also

00:45:45,750 --> 00:45:50,490
some kind of specific things real

00:45:47,970 --> 00:45:52,579
options variation so just to say there

00:45:50,490 --> 00:45:56,460
are a number of areas where you can

00:45:52,579 --> 00:45:59,269
beneficially apply our sweet it is split

00:45:56,460 --> 00:46:02,730
as a completely web-based application

00:45:59,269 --> 00:46:06,089
typical lump architecture where the p is

00:46:02,730 --> 00:46:08,599
of course partisan numpy is at the very

00:46:06,089 --> 00:46:13,229
heart of it almost everything

00:46:08,599 --> 00:46:16,439
in terms of calculations done numpy you

00:46:13,229 --> 00:46:18,839
also use more in wiki which is Python

00:46:16,439 --> 00:46:21,509
power everything you will find that our

00:46:18,839 --> 00:46:23,759
company is pricing pricing pricing of

00:46:21,509 --> 00:46:27,029
course for the web GUI we need a little

00:46:23,759 --> 00:46:32,519
bit more but the core you can say is

00:46:27,029 --> 00:46:36,839
completely done in Python it's my last

00:46:32,519 --> 00:46:39,660
slide maybe I didn't have if the Wi-Fi

00:46:36,839 --> 00:46:42,719
connection works I can show it real time

00:46:39,660 --> 00:46:46,319
what my and our vision is is to have

00:46:42,719 --> 00:46:48,599
derivatives analytic suite which is to

00:46:46,319 --> 00:46:51,739
be seen like Google today if you think

00:46:48,599 --> 00:46:54,509
of information gathering and search

00:46:51,739 --> 00:46:55,619
we've built a web based application

00:46:54,509 --> 00:46:57,869
where you lock in where you have your

00:46:55,619 --> 00:46:59,009
screen where you model something we can

00:46:57,869 --> 00:47:01,289
value where you have traffic and

00:46:59,009 --> 00:47:03,269
analysis but it's not the typical way

00:47:01,289 --> 00:47:05,489
that Kwan's and traders and so forth

00:47:03,269 --> 00:47:09,299
work and banks you want to have it

00:47:05,489 --> 00:47:11,549
integrated in your very tool for example

00:47:09,299 --> 00:47:14,699
and excellent which we already mentioned

00:47:11,549 --> 00:47:16,259
a little bit earlier or you want to use

00:47:14,699 --> 00:47:18,689
it on your own website or you want to

00:47:16,259 --> 00:47:20,189
integrate it any other front office

00:47:18,689 --> 00:47:23,279
application like a trading or portfolio

00:47:20,189 --> 00:47:25,229
system and this is something we added in

00:47:23,279 --> 00:47:28,499
the first half of this year so to say

00:47:25,229 --> 00:47:31,439
last four for six weeks we went live

00:47:28,499 --> 00:47:33,839
with it where we have a complete web

00:47:31,439 --> 00:47:36,479
service based valuation or your only

00:47:33,839 --> 00:47:38,519
model stuff you can have like thousand

00:47:36,479 --> 00:47:41,729
models on your server and you can

00:47:38,519 --> 00:47:43,769
deliver variables input data you don't

00:47:41,729 --> 00:47:46,170
have to the software can also take care

00:47:43,769 --> 00:47:48,719
of these automatically but if you want

00:47:46,170 --> 00:47:51,239
you can like have updates for example

00:47:48,719 --> 00:47:53,869
for the volatility get this example is

00:47:51,239 --> 00:47:57,359
in terms of an American put option on

00:47:53,869 --> 00:47:59,130
december i can put option on the tax we

00:47:57,359 --> 00:48:02,549
can deliver the volatility where you

00:47:59,130 --> 00:48:06,689
have rate for example and strike and you

00:48:02,549 --> 00:48:09,449
get back either an xml or in any other

00:48:06,689 --> 00:48:13,939
format you like the information about

00:48:09,449 --> 00:48:13,939
this so

00:48:15,530 --> 00:48:22,680
because as I said as fascinating as a

00:48:20,400 --> 00:48:24,720
web-based solution is and as easy it is

00:48:22,680 --> 00:48:25,770
for us to take care of the web-based

00:48:24,720 --> 00:48:28,170
solution without any software

00:48:25,770 --> 00:48:29,940
distribution people want to use it in

00:48:28,170 --> 00:48:32,130
their own environment they want to

00:48:29,940 --> 00:48:34,950
implement it where they work with

00:48:32,130 --> 00:48:37,020
whatever the work be it scripting axle

00:48:34,950 --> 00:48:40,800
or something else and this has been a

00:48:37,020 --> 00:48:42,840
mainly step for us to get into this this

00:48:40,800 --> 00:48:44,310
whole word and also as you see

00:48:42,840 --> 00:48:47,850
everything is done in pious in the

00:48:44,310 --> 00:48:51,680
decision Eva python script is one that

00:48:47,850 --> 00:48:55,020
takes care of what is delivered back and

00:48:51,680 --> 00:48:57,420
yes a couple of minutes i will try to

00:48:55,020 --> 00:48:59,180
show it I don't some minutes left or if

00:48:57,420 --> 00:49:04,140
they are question at this moment I'm

00:48:59,180 --> 00:49:08,010
pretty glad to answer them seven minutes

00:49:04,140 --> 00:49:09,720
so if I just want to because I was

00:49:08,010 --> 00:49:14,610
kicked out a couple of times before hand

00:49:09,720 --> 00:49:24,980
from the Wi-Fi I don't know if on cable

00:49:14,610 --> 00:49:32,480
this yeah okay the old technology yeah

00:49:24,980 --> 00:49:32,480
it's a summary just let me check before

00:49:46,840 --> 00:49:50,050
thank you

00:50:02,520 --> 00:50:09,870
so area tries to to repair it to change

00:50:06,240 --> 00:50:19,170
but I'm glad to take questions if you

00:50:09,870 --> 00:50:21,450
like in the meantime yes there's one do

00:50:19,170 --> 00:50:22,950
you sell your product just as a Python

00:50:21,450 --> 00:50:24,480
library it doesn't need any access to

00:50:22,950 --> 00:50:26,190
any web servers or anything like that we

00:50:24,480 --> 00:50:28,080
could just drop it in and ask it for the

00:50:26,190 --> 00:50:30,540
price of a ticket option is it always

00:50:28,080 --> 00:50:32,190
tied to a web-based service it's always

00:50:30,540 --> 00:50:34,050
tired of Weber service actually so so

00:50:32,190 --> 00:50:36,720
you buy a license or you you rent it on

00:50:34,050 --> 00:50:38,550
a monthly basis but do its software as a

00:50:36,720 --> 00:50:40,890
service so to say it's not like a

00:50:38,550 --> 00:50:43,170
library that we sell as a Python thing

00:50:40,890 --> 00:50:45,000
it's built on piety but we don't

00:50:43,170 --> 00:50:47,340
distribute any code so and if your

00:50:45,000 --> 00:50:50,880
server disappears our businesses is down

00:50:47,340 --> 00:50:53,520
the 0 so I didn't get if if we're asking

00:50:50,880 --> 00:50:54,900
your server for prices and you disappear

00:50:53,520 --> 00:50:56,280
off the internet we're totally up the

00:50:54,900 --> 00:51:00,690
creek without a paddle is that as a how

00:50:56,280 --> 00:51:02,850
it works what if I cut it right you said

00:51:00,690 --> 00:51:04,290
if we disappear is we sold the service I

00:51:02,850 --> 00:51:05,580
would disappear on the internet then it

00:51:04,290 --> 00:51:06,720
doesn't work anymore yeah somebody

00:51:05,580 --> 00:51:08,820
unplugged your internet connection or

00:51:06,720 --> 00:51:10,170
your power your datacenter and we're

00:51:08,820 --> 00:51:11,760
using your software too valuable for

00:51:10,170 --> 00:51:14,580
photo you wouldn't know how much it's

00:51:11,760 --> 00:51:16,200
worth well it could also be installed if

00:51:14,580 --> 00:51:17,250
there's someone who has fear of the

00:51:16,200 --> 00:51:18,840
girls will be installed on your own

00:51:17,250 --> 00:51:20,790
server okay so if you want to take care

00:51:18,840 --> 00:51:23,310
of this you can take this but the

00:51:20,790 --> 00:51:25,800
standard the cheap licensing model is

00:51:23,310 --> 00:51:27,450
just build on okay on a regular service

00:51:25,800 --> 00:51:28,980
and we we have been a professional data

00:51:27,450 --> 00:51:31,650
center with all that fire protection I

00:51:28,980 --> 00:51:33,750
know what it is it costs a little bit of

00:51:31,650 --> 00:51:35,400
money but we don't do it ourselves the

00:51:33,750 --> 00:51:37,920
hardware side so it's hosted in

00:51:35,400 --> 00:51:39,420
professional service centers around but

00:51:37,920 --> 00:51:41,040
if there is a banger someone who says

00:51:39,420 --> 00:51:42,750
well I don't trust you i want to have it

00:51:41,040 --> 00:51:45,210
on my own server then there's of course

00:51:42,750 --> 00:51:49,410
are the possibility david s were so they

00:51:45,210 --> 00:51:52,290
have to take care of it oh give it the

00:51:49,410 --> 00:51:56,070
questioners was a good one if you need a

00:51:52,290 --> 00:51:58,340
prize and the server's not working what

00:51:56,070 --> 00:51:58,340
is it

00:51:58,940 --> 00:52:04,640
I was wondering if you were considered

00:52:02,270 --> 00:52:08,810
porting this to cuda were using pi q

00:52:04,640 --> 00:52:10,790
Tatiana one of the GPU libraries yes

00:52:08,810 --> 00:52:13,760
you've been thinking about this since a

00:52:10,790 --> 00:52:16,520
couple of month or once a year and a

00:52:13,760 --> 00:52:22,190
half so to say but so far we haven't

00:52:16,520 --> 00:52:23,599
done anything this direction because the

00:52:22,190 --> 00:52:26,810
major benefit of Gouda is of course a

00:52:23,599 --> 00:52:30,650
polarization and the algorithm i showed

00:52:26,810 --> 00:52:33,560
you before is hard to paralyze once or

00:52:30,650 --> 00:52:36,319
webinar about guys who embedded tokuda

00:52:33,560 --> 00:52:38,900
in excel and they got fabulous speed ups

00:52:36,319 --> 00:52:40,550
but maybe yeah yeah but if you use PI

00:52:38,900 --> 00:52:42,980
CUDA or something then they have a very

00:52:40,550 --> 00:52:47,630
convenient access to numpy and so forth

00:52:42,980 --> 00:52:51,109
but what you need is the algorithms that

00:52:47,630 --> 00:52:53,119
can benefit from it so if you have this

00:52:51,109 --> 00:52:56,900
regression over 100,000 of calf you can

00:52:53,119 --> 00:52:58,790
paralyze it in terms of two times 50,000

00:52:56,900 --> 00:53:00,829
paths because you need the cross section

00:52:58,790 --> 00:53:02,780
of information this type of data then

00:53:00,829 --> 00:53:04,339
you have to at one point you have to get

00:53:02,780 --> 00:53:06,859
the data together and then you lose

00:53:04,339 --> 00:53:08,750
everything in terms of coordinating if

00:53:06,859 --> 00:53:11,210
it might work for your being option

00:53:08,750 --> 00:53:13,040
pricing yeah of course this is where it

00:53:11,210 --> 00:53:15,430
is used extensively but this is not our

00:53:13,040 --> 00:53:17,270
focus we because our service is not

00:53:15,430 --> 00:53:19,130
because it's pritam on the car

00:53:17,270 --> 00:53:21,079
simulation it's not very well suited for

00:53:19,130 --> 00:53:24,079
real-time pricing and for pricing huge

00:53:21,079 --> 00:53:26,089
books to say a hundred thousand options

00:53:24,079 --> 00:53:27,980
in real time this is what we can do but

00:53:26,089 --> 00:53:30,619
it's more for complex options for

00:53:27,980 --> 00:53:35,180
engineers and and they can wait maybe a

00:53:30,619 --> 00:53:38,050
second it's fast already but but fast in

00:53:35,180 --> 00:53:40,310
terms of thousands of options passing

00:53:38,050 --> 00:53:41,720
but it's very interesting we are

00:53:40,310 --> 00:53:44,000
thinking about it and the near future I

00:53:41,720 --> 00:53:46,099
guess if the libraries become a little

00:53:44,000 --> 00:53:50,329
bit better we will go to the next step

00:53:46,099 --> 00:53:52,480
in this direction yeah of course of

00:53:50,329 --> 00:53:52,480
course

00:53:54,289 --> 00:54:00,380
I don't remember if the slice actually

00:53:58,640 --> 00:54:02,150
included this but do you have a

00:54:00,380 --> 00:54:03,650
preferred data type that you operate on

00:54:02,150 --> 00:54:05,299
my mean single precision a double

00:54:03,650 --> 00:54:07,339
precision I stop a precision everything

00:54:05,299 --> 00:54:09,559
we do okay so you need it in terms of

00:54:07,339 --> 00:54:11,869
convergence you realize the differences

00:54:09,559 --> 00:54:15,859
but that's a bit bad and in relation to

00:54:11,869 --> 00:54:18,469
GPUs because yeah but was the reason we

00:54:15,859 --> 00:54:20,650
get some something still at least as far

00:54:18,469 --> 00:54:24,140
as my understanding goes with the recent

00:54:20,650 --> 00:54:28,039
releases of the newer piechota other the

00:54:24,140 --> 00:54:29,779
nvidia cards double precision should not

00:54:28,039 --> 00:54:31,339
be their problem and you must still

00:54:29,779 --> 00:54:33,589
still so much as other than second

00:54:31,339 --> 00:54:36,289
position I'm not next part in that but

00:54:33,589 --> 00:54:40,999
my hope was that it is somehow solved

00:54:36,289 --> 00:54:42,979
but and you don't need it always but

00:54:40,999 --> 00:54:45,669
it's better to have it you don't know

00:54:42,979 --> 00:54:48,919
how things go and how conversions with

00:54:45,669 --> 00:54:50,479
huge amount of data Said's ago so you

00:54:48,919 --> 00:54:53,049
always want to have typically double

00:54:50,479 --> 00:54:53,049
precision data

00:54:58,390 --> 00:55:07,359
and the other question unfortunately the

00:55:01,779 --> 00:55:11,279
web is not working so i can function so

00:55:07,359 --> 00:55:11,279

YouTube URL: https://www.youtube.com/watch?v=c4WltP4-Xlk


