Title: Python at Cloudkick
Publication date: 2015-04-19
Playlist: EuroPython 2011
Description: 
	[EuroPython 2011] TomaÅ¾ Muraus - 22 June 2011 in "Track Spaghetti"
Captions: 
	00:00:06,920 --> 00:00:11,910
so hi all my name is too much morals and

00:00:09,840 --> 00:00:14,880
today I'm going to present you a bit how

00:00:11,910 --> 00:00:17,480
we use by tonette cloud kick I one goes

00:00:14,880 --> 00:00:19,410
so much into details about are all your

00:00:17,480 --> 00:00:21,510
architecture for example how we use

00:00:19,410 --> 00:00:26,850
Cassandra and stuff I'll try to focus on

00:00:21,510 --> 00:00:29,130
mostly on Python so first I'm going to

00:00:26,850 --> 00:00:31,920
tell who I am then I'm going to give you

00:00:29,130 --> 00:00:34,320
a short intro into the cloud cake so I

00:00:31,920 --> 00:00:36,930
actually get a bit knowledge and

00:00:34,320 --> 00:00:39,780
background what the cloud kick actually

00:00:36,930 --> 00:00:42,960
is then we'll take a look at the whole

00:00:39,780 --> 00:00:45,899
architecture which services we use how

00:00:42,960 --> 00:00:48,899
we use them and so on later on we're

00:00:45,899 --> 00:00:52,230
going to check why we choose in Python

00:00:48,899 --> 00:00:54,450
and how we use it at Cloud kick this

00:00:52,230 --> 00:00:56,489
means how we use it in our web stack how

00:00:54,450 --> 00:00:59,250
we use it with our web app and how we

00:00:56,489 --> 00:01:02,699
use Django also have a look how we use

00:00:59,250 --> 00:01:05,759
twist it and other libraries and Python

00:01:02,699 --> 00:01:09,389
in our network services also going to

00:01:05,759 --> 00:01:11,670
look how we do service communication RPC

00:01:09,389 --> 00:01:15,779
and logging also going to pick at

00:01:11,670 --> 00:01:20,099
testing and also add how you spied on in

00:01:15,779 --> 00:01:23,270
some other places so first who I am I'm

00:01:20,099 --> 00:01:26,549
Clark morose I work for plot geek or

00:01:23,270 --> 00:01:29,490
recently acquired by rec space I mostly

00:01:26,549 --> 00:01:31,469
work on back and stuff so different back

00:01:29,490 --> 00:01:33,990
in service it's mostly mostly written in

00:01:31,469 --> 00:01:36,149
Python I also did some work in C and lua

00:01:33,990 --> 00:01:38,749
and so on but I'm mostly where you can

00:01:36,149 --> 00:01:41,249
find a stop most author of multiple

00:01:38,749 --> 00:01:44,609
Python libraries and Django apps which

00:01:41,249 --> 00:01:47,429
you can find on github also a big open

00:01:44,609 --> 00:01:52,919
source support n and lover and I'm also

00:01:47,429 --> 00:01:55,399
a bachelor cloud committer so first what

00:01:52,919 --> 00:01:57,749
is cloud cake cloud cake is a product

00:01:55,399 --> 00:02:00,559
software as a service which allows you

00:01:57,749 --> 00:02:02,789
to manage servers this there could be

00:02:00,559 --> 00:02:06,739
physical service in a data center or

00:02:02,789 --> 00:02:09,000
cloud service using single dashboard

00:02:06,739 --> 00:02:12,030
this means you can manage all your

00:02:09,000 --> 00:02:13,180
servers and monitor them using a single

00:02:12,030 --> 00:02:16,260
website single that

00:02:13,180 --> 00:02:18,969
word you can also set up different alert

00:02:16,260 --> 00:02:21,549
thresholds and monitors for example you

00:02:18,969 --> 00:02:24,790
can set up a battery check CPU check

00:02:21,549 --> 00:02:26,799
memory check and so on then we install

00:02:24,790 --> 00:02:29,500
the AG tours on your server and then

00:02:26,799 --> 00:02:33,340
agent sends data back to us we then

00:02:29,500 --> 00:02:35,079
process it insert it in Cassandra save

00:02:33,340 --> 00:02:38,139
it so we can later on draw pretty graphs

00:02:35,079 --> 00:02:40,060
and so we can also alert you you can

00:02:38,139 --> 00:02:43,150
also use different tools to annotate

00:02:40,060 --> 00:02:44,950
your grass for example you perform a you

00:02:43,150 --> 00:02:47,200
upgrade your application the plain old

00:02:44,950 --> 00:02:50,139
version of application you can use our

00:02:47,200 --> 00:02:52,209
command line tool called ckl and for

00:02:50,139 --> 00:02:55,030
example you can specify a message

00:02:52,209 --> 00:02:57,250
message could be upgraded to version 5

00:02:55,030 --> 00:03:00,159
foot oh and you will automatically see

00:02:57,250 --> 00:03:02,260
this version all your graphs which means

00:03:00,159 --> 00:03:04,299
you can correlate different events for

00:03:02,260 --> 00:03:06,519
example you deploy new version and then

00:03:04,299 --> 00:03:08,739
you see that CP usage many may be

00:03:06,519 --> 00:03:10,629
dropped or maybe went up then you can

00:03:08,739 --> 00:03:14,109
think it's probably related to the

00:03:10,629 --> 00:03:16,540
recent deployment and so on it's just a

00:03:14,109 --> 00:03:20,379
few futures here are some screenshot

00:03:16,540 --> 00:03:23,620
that's our dashboard basically each bar

00:03:20,379 --> 00:03:25,989
represents a server each slice basically

00:03:23,620 --> 00:03:31,470
represents a server it's a bit hard to

00:03:25,989 --> 00:03:34,060
see because the directories up anyway

00:03:31,470 --> 00:03:37,840
here's a single server view as you can

00:03:34,060 --> 00:03:40,299
see and you can see like the altar grabs

00:03:37,840 --> 00:03:42,069
related to the servers whereas recent

00:03:40,299 --> 00:03:44,769
anomaly so basically recent alerts

00:03:42,069 --> 00:03:46,780
recent problems and also diagnostic

00:03:44,769 --> 00:03:49,359
which is like top you can see this life

00:03:46,780 --> 00:03:51,689
for each server we basically use comment

00:03:49,359 --> 00:03:53,829
in we push live data which means this

00:03:51,689 --> 00:03:57,400
refreshes I mean this automatically

00:03:53,829 --> 00:03:59,829
updates it is also the recent anomalies

00:03:57,400 --> 00:04:04,709
page where you can see recently sent

00:03:59,829 --> 00:04:08,250
alerts recent problems so on here is our

00:04:04,709 --> 00:04:11,949
like but basically it's a nice little

00:04:08,250 --> 00:04:15,189
JavaScript and html5 web app where you

00:04:11,949 --> 00:04:17,620
can view your servers in 3d we saw that

00:04:15,189 --> 00:04:20,829
picture quality is bad but basically we

00:04:17,620 --> 00:04:24,190
have two axes one is CPU one is pink and

00:04:20,829 --> 00:04:25,840
the one is memory and basically a dot or

00:04:24,190 --> 00:04:28,449
a circle represents a server

00:04:25,840 --> 00:04:31,300
and basically server moves in space

00:04:28,449 --> 00:04:33,580
depending on the current being cpu usage

00:04:31,300 --> 00:04:36,220
in memory and also if you click on a

00:04:33,580 --> 00:04:38,919
server you can get all the details which

00:04:36,220 --> 00:04:43,060
recent alert we're in cpu citroen so on

00:04:38,919 --> 00:04:44,500
and dot also blinks red if something for

00:04:43,060 --> 00:04:46,530
example if I thresholds has been

00:04:44,500 --> 00:04:49,690
triggered an alert has been sent

00:04:46,530 --> 00:04:52,479
basically this is all life use comment

00:04:49,690 --> 00:04:58,180
for this which means stuff updates

00:04:52,479 --> 00:05:01,540
instantly so first I'm going today talk

00:04:58,180 --> 00:05:03,639
a bit about our architecture our whole

00:05:01,540 --> 00:05:06,880
architecture is actually quite complex

00:05:03,639 --> 00:05:09,669
but in general we use my sequel as our

00:05:06,880 --> 00:05:11,650
primary relational data store but for

00:05:09,669 --> 00:05:14,320
storing or the time series data all the

00:05:11,650 --> 00:05:18,160
metrics we use Cassandra also one of

00:05:14,320 --> 00:05:20,490
really big sandra users and like i said

00:05:18,160 --> 00:05:25,330
we have a lot of data in Cassandra and

00:05:20,490 --> 00:05:29,110
we or that there and we also use solar

00:05:25,330 --> 00:05:31,570
for example sora is a basically indexing

00:05:29,110 --> 00:05:33,700
search server we use solar to store

00:05:31,570 --> 00:05:36,310
different documents about your server

00:05:33,700 --> 00:05:38,889
and then you can find them using all the

00:05:36,310 --> 00:05:41,349
airport and for example you see the web

00:05:38,889 --> 00:05:43,720
app part for the web app we use Django

00:05:41,349 --> 00:05:47,320
framework and there is also a rabbit

00:05:43,720 --> 00:05:50,349
thank you use rabbitmq as a huge server

00:05:47,320 --> 00:05:53,380
basically for our event framework about

00:05:50,349 --> 00:05:56,430
which I'll talk later there is a big box

00:05:53,380 --> 00:05:58,960
which represent services we see here our

00:05:56,430 --> 00:06:01,229
architecture its many composed of

00:05:58,960 --> 00:06:04,289
different network services we have like

00:06:01,229 --> 00:06:08,110
40 or so maybe different services then

00:06:04,289 --> 00:06:10,300
ETO the services does some simple task

00:06:08,110 --> 00:06:12,729
and they're also horizontal scale boson

00:06:10,300 --> 00:06:14,889
I'll talk more about that later they're

00:06:12,729 --> 00:06:16,960
on the right side the bottom music etc

00:06:14,889 --> 00:06:21,010
there is this is a place where all the

00:06:16,960 --> 00:06:22,900
time series data goes and there is also

00:06:21,010 --> 00:06:25,120
a place for stream services inscribe

00:06:22,900 --> 00:06:27,400
i'll talk about scribe later is

00:06:25,120 --> 00:06:29,950
basically at all to which has been open

00:06:27,400 --> 00:06:32,020
source by facebook and allows you to

00:06:29,950 --> 00:06:33,789
aggregate your logs and stuff but i'll

00:06:32,020 --> 00:06:36,039
talk about how we use it we actually

00:06:33,789 --> 00:06:38,830
don't use it for aggregating logs we

00:06:36,039 --> 00:06:41,680
also use it for some other stuff on the

00:06:38,830 --> 00:06:43,990
left you can see a yellow circle circle

00:06:41,680 --> 00:06:46,090
which represents your server messy for

00:06:43,990 --> 00:06:48,130
monitoring to work of course you need to

00:06:46,090 --> 00:06:50,920
install some kind of agent on your

00:06:48,130 --> 00:06:53,410
server basically you install our agent

00:06:50,920 --> 00:06:56,080
in your server our agent is written in C

00:06:53,410 --> 00:06:57,850
and it also supports Lewis script which

00:06:56,080 --> 00:07:00,340
is kind of interesting basically our

00:06:57,850 --> 00:07:03,370
aging the core is written in C but it

00:07:00,340 --> 00:07:04,900
has Lua interpreter built-in we decided

00:07:03,370 --> 00:07:06,640
to do this because of course we'll see

00:07:04,900 --> 00:07:09,160
you have memory management and so on

00:07:06,640 --> 00:07:10,960
it's hard to write like a CPU check or a

00:07:09,160 --> 00:07:13,420
memory check where this jack that's why

00:07:10,960 --> 00:07:15,640
we decided to embed low interpreter and

00:07:13,420 --> 00:07:17,920
you can write your CBO and basically all

00:07:15,640 --> 00:07:19,750
the CPU dragon or all the code for

00:07:17,920 --> 00:07:22,090
communicating with our service is

00:07:19,750 --> 00:07:24,900
written nua which makes it a lot easier

00:07:22,090 --> 00:07:27,640
and more cleaner simpler to write

00:07:24,900 --> 00:07:30,610
basically once your agent is installed

00:07:27,640 --> 00:07:33,910
on your server it opens up persistent

00:07:30,610 --> 00:07:36,730
TCP connection tor server and pushes

00:07:33,910 --> 00:07:39,420
different matrix to it they see the high

00:07:36,730 --> 00:07:42,160
line you see that's so our so-called

00:07:39,420 --> 00:07:43,930
service which communicates the agent or

00:07:42,160 --> 00:07:46,240
actually agent communicate with the

00:07:43,930 --> 00:07:50,350
server also in the picture you can see

00:07:46,240 --> 00:07:52,420
orbited orbit it is a server written in

00:07:50,350 --> 00:07:58,300
Python which uses comet and it's used

00:07:52,420 --> 00:08:00,370
for real-time communication so why fight

00:07:58,300 --> 00:08:04,030
when I mean that's pry don't need to

00:08:00,370 --> 00:08:07,180
talk about that here so yeah fidonet

00:08:04,030 --> 00:08:09,040
clock it like I said our architecture we

00:08:07,180 --> 00:08:12,220
based use many different languages we

00:08:09,040 --> 00:08:14,860
also use C C++ Java and so on but our

00:08:12,220 --> 00:08:17,320
primary development language and most of

00:08:14,860 --> 00:08:19,870
our services are written in Python use

00:08:17,320 --> 00:08:23,290
it in our web stack this means Django

00:08:19,870 --> 00:08:25,720
and many other libraries we also use it

00:08:23,290 --> 00:08:28,270
for our network service is very most

00:08:25,720 --> 00:08:30,670
used with it also talk a bit how we used

00:08:28,270 --> 00:08:33,280
to visit some problems we encounter and

00:08:30,670 --> 00:08:35,620
so on and we also use it which is great

00:08:33,280 --> 00:08:38,590
for like random small script is like

00:08:35,620 --> 00:08:40,450
cron jobs and so on it's actually pretty

00:08:38,590 --> 00:08:44,080
nice thing with Python you can like

00:08:40,450 --> 00:08:46,000
write real serious apps web apps network

00:08:44,080 --> 00:08:50,520
gaps whatever but you can also use it to

00:08:46,000 --> 00:08:50,520
like automate some small task

00:08:51,970 --> 00:08:57,220
so for web application like I said we

00:08:54,639 --> 00:08:59,769
use Django for our web app we've been

00:08:57,220 --> 00:09:03,189
using it since the beginning so far

00:08:59,769 --> 00:09:04,420
we've been pretty pleased to it our web

00:09:03,189 --> 00:09:08,100
app is actually it's not like a typical

00:09:04,420 --> 00:09:11,350
CMS and so on which means we needed to

00:09:08,100 --> 00:09:13,449
the modify quite a lot of stuff it

00:09:11,350 --> 00:09:16,029
wasn't so straight forward but you were

00:09:13,449 --> 00:09:18,699
simply satisfied with because so far we

00:09:16,029 --> 00:09:20,500
hadn't had any security problems yet so

00:09:18,699 --> 00:09:23,019
which means we haven't had any exercise

00:09:20,500 --> 00:09:27,310
stuff which means Django team is taking

00:09:23,019 --> 00:09:29,889
good care of the security and we also

00:09:27,310 --> 00:09:32,170
use salt which is a Python library for

00:09:29,889 --> 00:09:34,839
performing scammers immigrations and

00:09:32,170 --> 00:09:37,360
data migrations so we basically like I

00:09:34,839 --> 00:09:40,569
said abuse my sequence our relation data

00:09:37,360 --> 00:09:44,439
store and for adding columns we use

00:09:40,569 --> 00:09:46,180
South that's basically if you use some

00:09:44,439 --> 00:09:48,370
kind of migration tools they do support

00:09:46,180 --> 00:09:51,040
like removing columns or editing them

00:09:48,370 --> 00:09:53,529
but of course in my sequel this usually

00:09:51,040 --> 00:09:55,810
this means if use my isn't that your

00:09:53,529 --> 00:09:58,360
whole if for example if you execute

00:09:55,810 --> 00:09:59,980
other stable the whole table will be

00:09:58,360 --> 00:10:02,559
locked for it which is obviously not

00:09:59,980 --> 00:10:06,699
acceptable in production so usually just

00:10:02,559 --> 00:10:09,490
end up adding new columns you also use

00:10:06,699 --> 00:10:11,470
for our API we use piston this one is a

00:10:09,490 --> 00:10:16,059
library which has been open sourced by

00:10:11,470 --> 00:10:19,990
Bill pocket it's meant to be used to

00:10:16,059 --> 00:10:22,600
create or nice little rest api's use it

00:10:19,990 --> 00:10:25,600
for that but we also modified a lot in

00:10:22,600 --> 00:10:29,529
piston for example we change the default

00:10:25,600 --> 00:10:31,660
JSON serializer because the i think in

00:10:29,529 --> 00:10:34,300
the default version you use django

00:10:31,660 --> 00:10:36,970
Django Jason serial sir which should I

00:10:34,300 --> 00:10:39,910
think fall back to simple Jason but for

00:10:36,970 --> 00:10:42,069
some reason didn't and we change that to

00:10:39,910 --> 00:10:44,889
directly use simple JSON in works a lot

00:10:42,069 --> 00:10:48,240
of pastor now we also modified it to

00:10:44,889 --> 00:10:51,250
support all too old to is basically

00:10:48,240 --> 00:10:53,559
authentication mechanism but what one is

00:10:51,250 --> 00:10:55,629
pretty complex you need to create a

00:10:53,559 --> 00:10:57,430
signature and saw it in not so straight

00:10:55,629 --> 00:11:00,069
word from a developer perspective and

00:10:57,430 --> 00:11:03,269
odd two addresses this that's why also

00:11:00,069 --> 00:11:05,920
our API recently added support for it

00:11:03,269 --> 00:11:09,070
okay previous set we are also

00:11:05,920 --> 00:11:11,200
a big Cassandra user we at the time we

00:11:09,070 --> 00:11:14,290
started using it it was like cloud

00:11:11,200 --> 00:11:16,300
kick-started around in 2009 and the time

00:11:14,290 --> 00:11:20,740
we started using it they weren't like

00:11:16,300 --> 00:11:22,660
many you door like but well

00:11:20,740 --> 00:11:25,209
battle-tested libraries available that's

00:11:22,660 --> 00:11:27,790
the reason why we decided to basically

00:11:25,209 --> 00:11:30,459
build our library and our or a.m. or RM

00:11:27,790 --> 00:11:32,470
I'm not sure if you know how cuz I

00:11:30,459 --> 00:11:34,600
network or how work we viously basically

00:11:32,470 --> 00:11:36,940
use this drift drift is a binary

00:11:34,600 --> 00:11:39,250
protocol for exchanging and serializing

00:11:36,940 --> 00:11:42,370
data sandra uses chief free

00:11:39,250 --> 00:11:46,420
communication so our library also uses

00:11:42,370 --> 00:11:48,430
trip to communicate with cassandra 350

00:11:46,420 --> 00:11:52,420
is kind of nice but I'll also talk about

00:11:48,430 --> 00:11:55,329
more about trip later and yeah we use

00:11:52,420 --> 00:11:58,600
solar for indexing all their no data and

00:11:55,329 --> 00:12:00,550
allow you to search for all your service

00:11:58,600 --> 00:12:03,040
inside and we solar for that and for

00:12:00,550 --> 00:12:06,070
communicating with solar views solar p I

00:12:03,040 --> 00:12:08,410
is the Python library we also made some

00:12:06,070 --> 00:12:13,750
modifications to it because by default

00:12:08,410 --> 00:12:16,360
it uses xml basis it uses xml to send

00:12:13,750 --> 00:12:18,760
documents and server and by default he

00:12:16,360 --> 00:12:22,120
expects xml from source server and we

00:12:18,760 --> 00:12:24,579
basically modified it a bit to return

00:12:22,120 --> 00:12:27,279
json gas storage support jason as well

00:12:24,579 --> 00:12:29,079
but the library doesn't actually the

00:12:27,279 --> 00:12:31,360
library there is a reason life why

00:12:29,079 --> 00:12:33,940
library doesn't support Jason Jason

00:12:31,360 --> 00:12:37,000
there is no way to naturally store dates

00:12:33,940 --> 00:12:39,010
that's the reason why the author decided

00:12:37,000 --> 00:12:41,230
not to support Drazen but it's not a

00:12:39,010 --> 00:12:44,290
problem for us because we never use date

00:12:41,230 --> 00:12:46,089
field we never used HP in a way that we

00:12:44,290 --> 00:12:48,940
will need to convert it in a native

00:12:46,089 --> 00:12:51,069
daytime object in Python that if we'd

00:12:48,940 --> 00:12:54,130
need to do that we could do it we could

00:12:51,069 --> 00:12:56,019
just save a date as a JSON and do some

00:12:54,130 --> 00:13:00,300
post processing after receiving document

00:12:56,019 --> 00:13:00,300
but so far we haven't need to do that

00:13:00,750 --> 00:13:06,310
yeah for profiling we have a multiple

00:13:03,910 --> 00:13:09,610
servers we have a staging server which

00:13:06,310 --> 00:13:12,639
is which uses the same same databases

00:13:09,610 --> 00:13:14,920
production server which means we usually

00:13:12,639 --> 00:13:17,170
use staging server for debugging

00:13:14,920 --> 00:13:19,300
different performance problem for that

00:13:17,170 --> 00:13:21,160
we use profiling middle

00:13:19,300 --> 00:13:23,850
django which is actually really really

00:13:21,160 --> 00:13:28,029
simple it uses bitin see profile it

00:13:23,850 --> 00:13:30,010
shows a list here is a screenshot is

00:13:28,029 --> 00:13:32,589
basically show a list of all the execute

00:13:30,010 --> 00:13:34,570
functions and so on and queries but it's

00:13:32,589 --> 00:13:36,279
basically very useful with this little

00:13:34,570 --> 00:13:38,170
page in script where you can do a lot

00:13:36,279 --> 00:13:41,050
you see which ways how many ways

00:13:38,170 --> 00:13:45,250
executed and so on and then you can

00:13:41,050 --> 00:13:47,800
basically optimize it I mean a hour or

00:13:45,250 --> 00:13:49,390
I'm sorry great but in many cases tell

00:13:47,800 --> 00:13:52,000
you we need to use I mean different

00:13:49,390 --> 00:13:55,000
types for example in a lot of places we

00:13:52,000 --> 00:13:57,399
call list on our Django crazy set to

00:13:55,000 --> 00:13:59,260
evaluate the whole or is it early before

00:13:57,399 --> 00:14:01,300
we pass it to some other function

00:13:59,260 --> 00:14:03,579
because the so the quayside basically

00:14:01,300 --> 00:14:05,829
gets only evaluated once in you we have

00:14:03,579 --> 00:14:09,100
better performance and in some places

00:14:05,829 --> 00:14:12,100
sadly we also use some rock where is

00:14:09,100 --> 00:14:16,750
that the because this was needed to have

00:14:12,100 --> 00:14:19,750
a good performance logging we use Django

00:14:16,750 --> 00:14:21,730
Center which is a basically a simple app

00:14:19,750 --> 00:14:24,220
which allows you to basically provide a

00:14:21,730 --> 00:14:27,610
nice rest api where you can post your

00:14:24,220 --> 00:14:30,550
local messages and then you can see all

00:14:27,610 --> 00:14:32,680
the messages segregated oh i thought i

00:14:30,550 --> 00:14:34,480
had a screenshot but anyway it has a

00:14:32,680 --> 00:14:36,490
nice view when you can see all the

00:14:34,480 --> 00:14:38,140
service for example if your post

00:14:36,490 --> 00:14:40,620
messages so multiple service you can

00:14:38,140 --> 00:14:43,270
filter messages with service and so on

00:14:40,620 --> 00:14:47,230
so now i'm going to talk a bit about

00:14:43,270 --> 00:14:49,540
twisted we are also a pretty big users

00:14:47,230 --> 00:14:51,760
of twisted we use it for like

00:14:49,540 --> 00:14:54,760
ninety-five percent of our back-end

00:14:51,760 --> 00:14:56,500
network services twisted is great i mean

00:14:54,760 --> 00:14:58,630
it's always been there for like adding

00:14:56,500 --> 00:15:02,529
more than ten years it's while

00:14:58,630 --> 00:15:04,570
battle-tested and has a pretty good

00:15:02,529 --> 00:15:07,690
support I mean the bug tracker speed

00:15:04,570 --> 00:15:09,910
active and it supports almost any

00:15:07,690 --> 00:15:12,520
protocol you can think of it's kind of

00:15:09,910 --> 00:15:14,620
like you wanna mean even if you work for

00:15:12,520 --> 00:15:17,380
twisted with some you even if you were a

00:15:14,620 --> 00:15:18,910
good visit for multiple years like every

00:15:17,380 --> 00:15:21,430
time you still discover something new it

00:15:18,910 --> 00:15:23,500
has just so many features but there is a

00:15:21,430 --> 00:15:25,510
one problem I mean writing twisted code

00:15:23,500 --> 00:15:27,520
good visit code and performant visit

00:15:25,510 --> 00:15:32,140
code actually isn't that easy and you

00:15:27,520 --> 00:15:33,080
need to be careful how you use it so

00:15:32,140 --> 00:15:35,540
basically for

00:15:33,080 --> 00:15:37,850
or all of you who don't now twist it is

00:15:35,540 --> 00:15:40,730
a framework which allows you to write

00:15:37,850 --> 00:15:42,950
dear friend usually networking apps in a

00:15:40,730 --> 00:15:44,900
synchronous model which means the

00:15:42,950 --> 00:15:47,330
synchronous mother means that all the

00:15:44,900 --> 00:15:48,950
application code runs inside the single

00:15:47,330 --> 00:15:52,360
thread basically there is no multiple

00:15:48,950 --> 00:15:54,830
processes which makes some stuff like

00:15:52,360 --> 00:15:56,570
synchronization and things like that

00:15:54,830 --> 00:15:59,510
easy basically you don't need to have

00:15:56,570 --> 00:16:01,880
large mutex and so on but also you need

00:15:59,510 --> 00:16:04,010
to be careful because if you have some

00:16:01,880 --> 00:16:05,690
operation which runs for too long you

00:16:04,010 --> 00:16:08,000
block the block the whole director

00:16:05,690 --> 00:16:11,110
thread and which means your application

00:16:08,000 --> 00:16:23,300
basically pauses all this operation ones

00:16:11,110 --> 00:16:26,450
why do you have any questions this slide

00:16:23,300 --> 00:16:28,520
I also included some random tips which

00:16:26,450 --> 00:16:30,590
are good to know when you're very good

00:16:28,520 --> 00:16:33,050
with it for example one thing we have a

00:16:30,590 --> 00:16:35,090
lot of plans bit or we had the uncaught

00:16:33,050 --> 00:16:37,370
exceptions for some reason when there is

00:16:35,090 --> 00:16:40,430
an exception twist after a long period

00:16:37,370 --> 00:16:42,050
of time it starts to leak memory this is

00:16:40,430 --> 00:16:43,910
also if you have a which of course

00:16:42,050 --> 00:16:45,530
you're in production usually do you have

00:16:43,910 --> 00:16:47,750
a debugging turned off right so it's not

00:16:45,530 --> 00:16:50,030
the buggy problem but for some reason

00:16:47,750 --> 00:16:51,620
after visit services run for a long time

00:16:50,030 --> 00:16:53,980
in if you don't handle all the

00:16:51,620 --> 00:16:56,600
acceptance it starts to leak memory

00:16:53,980 --> 00:16:58,610
second teeny is that you need to be

00:16:56,600 --> 00:17:00,730
careful deferred to tread like I said

00:16:58,610 --> 00:17:03,560
with it is a synchronous which means did

00:17:00,730 --> 00:17:06,140
everything by default runs in a single

00:17:03,560 --> 00:17:08,330
thread but usually not all the libraries

00:17:06,140 --> 00:17:10,850
you use your synchronous for example we

00:17:08,330 --> 00:17:12,680
use lip cloud a lot to talk with

00:17:10,850 --> 00:17:15,110
different cloud providers and the plot

00:17:12,680 --> 00:17:17,810
is blocking it's not the same print this

00:17:15,110 --> 00:17:19,610
means that if we'll just execute some

00:17:17,810 --> 00:17:22,459
lip plot function inside the reactor

00:17:19,610 --> 00:17:23,990
track it would block and it wouldn't

00:17:22,459 --> 00:17:26,660
work well I mean it would work but

00:17:23,990 --> 00:17:28,339
everything else will be paused while the

00:17:26,660 --> 00:17:32,680
lip blood functionality is running

00:17:28,339 --> 00:17:35,360
that's the time when you use twisted

00:17:32,680 --> 00:17:37,850
threads the filter thread function this

00:17:35,360 --> 00:17:40,010
is basically a function which runs some

00:17:37,850 --> 00:17:42,290
blocking code inside the worker thread

00:17:40,010 --> 00:17:44,690
which you get with it maintains a thread

00:17:42,290 --> 00:17:46,530
pool I think of by the fourth it's 10

00:17:44,690 --> 00:17:48,690
threads or so

00:17:46,530 --> 00:17:51,360
when you call this function you just

00:17:48,690 --> 00:17:54,480
instruct some free worker treta executed

00:17:51,360 --> 00:17:56,610
the problem is that you need that you

00:17:54,480 --> 00:17:58,650
need to be careful how you use the fur

00:17:56,610 --> 00:18:02,430
to tread if you use the fur to threats

00:17:58,650 --> 00:18:03,990
too many times is your perform your

00:18:02,430 --> 00:18:07,050
application performance will start to

00:18:03,990 --> 00:18:09,660
supper we learned this recently when

00:18:07,050 --> 00:18:12,930
usually when some new person starts to

00:18:09,660 --> 00:18:14,850
work on twisted code they put the fur to

00:18:12,930 --> 00:18:17,100
thread around every blocking operations

00:18:14,850 --> 00:18:19,410
that's this usually researching a very

00:18:17,100 --> 00:18:21,660
bad performance and in cases like this

00:18:19,410 --> 00:18:23,670
when you have a lot of blocking code you

00:18:21,660 --> 00:18:25,500
usually need to grow a group those

00:18:23,670 --> 00:18:27,840
blocking code and move it inside a

00:18:25,500 --> 00:18:30,000
function and the fur just this single

00:18:27,840 --> 00:18:33,750
function and thread instead of deferring

00:18:30,000 --> 00:18:36,780
all the function and then you'll pry out

00:18:33,750 --> 00:18:39,300
good performance and but also you need

00:18:36,780 --> 00:18:41,100
to keep in mind that in this case we

00:18:39,300 --> 00:18:44,250
don't use treads for performance reasons

00:18:41,100 --> 00:18:46,770
we use them for not backing director and

00:18:44,250 --> 00:18:48,660
of course treads in Python are not like

00:18:46,770 --> 00:18:52,230
because of the globe or interpret or not

00:18:48,660 --> 00:18:53,550
lock or not like real rats an unusual

00:18:52,230 --> 00:18:56,850
use it because of the performance

00:18:53,550 --> 00:19:00,150
reasons there's also a pretty useful

00:18:56,850 --> 00:19:02,010
thing in twisted we use which is a email

00:19:00,150 --> 00:19:05,490
lock observer email log observer is

00:19:02,010 --> 00:19:07,800
basically just a just a simple of lock

00:19:05,490 --> 00:19:10,230
observer which sends all the exceptions

00:19:07,800 --> 00:19:13,850
on all the errors your email is very

00:19:10,230 --> 00:19:13,850
simple but usually helps

00:19:21,410 --> 00:19:26,030
yeah there is another thing we use for a

00:19:23,690 --> 00:19:28,610
ccording different application specific

00:19:26,030 --> 00:19:30,830
or service specific magic matching

00:19:28,610 --> 00:19:33,470
during the service life time we use a

00:19:30,830 --> 00:19:35,780
really simple stats library which allows

00:19:33,470 --> 00:19:38,060
you to record different matchings during

00:19:35,780 --> 00:19:41,270
the application runtime and then you can

00:19:38,060 --> 00:19:44,870
view this matrix by going to the this

00:19:41,270 --> 00:19:47,330
this library HTTP interface basically it

00:19:44,870 --> 00:19:50,840
integrates with wizard which means that

00:19:47,330 --> 00:19:53,630
it runs and visit HTTP server which you

00:19:50,840 --> 00:19:55,570
can with it and then you can view all

00:19:53,630 --> 00:20:00,230
the magics which you have logged

00:19:55,570 --> 00:20:03,560
basically in adjacent format here is a

00:20:00,230 --> 00:20:06,740
really simple API library has a diner so

00:20:03,560 --> 00:20:08,870
methods but it's very useful for example

00:20:06,740 --> 00:20:10,310
country does a simple counter we usually

00:20:08,870 --> 00:20:12,950
use it just to count the number of

00:20:10,310 --> 00:20:15,800
operations the one which is pretty

00:20:12,950 --> 00:20:17,930
useful is add average this operation

00:20:15,800 --> 00:20:20,000
basically usually use it when you want

00:20:17,930 --> 00:20:22,160
to record how long some operation takes

00:20:20,000 --> 00:20:25,640
for example inside you twist it you have

00:20:22,160 --> 00:20:27,490
a some code probably some kind of

00:20:25,640 --> 00:20:30,170
database for something like that and

00:20:27,490 --> 00:20:31,820
before running the service and after an

00:20:30,170 --> 00:20:34,130
after running this function you record

00:20:31,820 --> 00:20:36,470
the time and then use at average to save

00:20:34,130 --> 00:20:39,530
it use some key for example this is

00:20:36,470 --> 00:20:41,470
usually your function name and then this

00:20:39,530 --> 00:20:44,210
function automatically calculates the

00:20:41,470 --> 00:20:46,760
minimum value maximum value and average

00:20:44,210 --> 00:20:49,070
this is usually useful especially if you

00:20:46,760 --> 00:20:50,600
wrap your database skulls with this and

00:20:49,070 --> 00:20:53,600
you can see if there are like some

00:20:50,600 --> 00:20:56,060
possible performance problems there is

00:20:53,600 --> 00:20:58,220
also a count calls decorator which

00:20:56,060 --> 00:21:01,700
basically just counts how many times

00:20:58,220 --> 00:21:03,650
well function was called it is like a

00:21:01,700 --> 00:21:05,990
really simple examples you can see how

00:21:03,650 --> 00:21:08,630
you could for example use the counter

00:21:05,990 --> 00:21:11,270
API in this case I use increase

00:21:08,630 --> 00:21:14,210
operations increased operations is a

00:21:11,270 --> 00:21:16,520
method which tracks how many times some

00:21:14,210 --> 00:21:18,890
operation has been executed basically

00:21:16,520 --> 00:21:21,170
when you call in increase operation

00:21:18,890 --> 00:21:22,910
method it will increase this operation

00:21:21,170 --> 00:21:25,670
total count and pending account

00:21:22,910 --> 00:21:28,160
basically until you don't call the

00:21:25,670 --> 00:21:30,080
crease operation the operation will be

00:21:28,160 --> 00:21:32,360
in the panic mode which means is

00:21:30,080 --> 00:21:35,170
executing and usually when the operation

00:21:32,360 --> 00:21:37,000
finish you call it like your Casilla

00:21:35,170 --> 00:21:40,120
Empire dance the curious operation and

00:21:37,000 --> 00:21:42,940
this will basically decrease the disco

00:21:40,120 --> 00:21:44,800
operation or diski and encounter this is

00:21:42,940 --> 00:21:47,950
usually useful especially because like i

00:21:44,800 --> 00:21:50,470
said this matrix our verbal life to the

00:21:47,950 --> 00:21:52,270
HTTP interface because you can see how

00:21:50,470 --> 00:21:54,370
many of each operations you have waiting

00:21:52,270 --> 00:21:58,260
and you can like see if some operations

00:21:54,370 --> 00:22:00,730
are usually taking a long time execute

00:21:58,260 --> 00:22:03,370
here is also another example in this

00:22:00,730 --> 00:22:05,440
example i use the add average function

00:22:03,370 --> 00:22:08,170
which i talked about previously in this

00:22:05,440 --> 00:22:11,980
case you see I just record the time and

00:22:08,170 --> 00:22:14,920
add it and later on I can either magic

00:22:11,980 --> 00:22:17,830
so that's the actual JSON which you get

00:22:14,920 --> 00:22:19,240
when you feed the web interface you also

00:22:17,830 --> 00:22:22,180
have some other fields like for example

00:22:19,240 --> 00:22:24,760
stay and status that's because it's

00:22:22,180 --> 00:22:26,440
jason is cloudy compato which means we

00:22:24,760 --> 00:22:28,960
are monitoring service and you can both

00:22:26,440 --> 00:22:31,410
Jason in this form to us it kind of

00:22:28,960 --> 00:22:33,790
makes sense for our stats library to

00:22:31,410 --> 00:22:35,740
export metrics in these formats so you

00:22:33,790 --> 00:22:41,980
can integrate it with cloud gig and

00:22:35,740 --> 00:22:43,660
automatically search alerts and so on we

00:22:41,980 --> 00:22:45,850
had service communications like I said

00:22:43,660 --> 00:22:48,940
we have a lot of different services and

00:22:45,850 --> 00:22:51,760
they need to communicate somehow for

00:22:48,940 --> 00:22:54,130
this we use event framework scribe and

00:22:51,760 --> 00:22:56,860
tripped in different ways event

00:22:54,130 --> 00:23:02,500
framework is basically in our case used

00:22:56,860 --> 00:23:05,460
a lot and it basically based on the

00:23:02,500 --> 00:23:09,160
message passing design pattern or a

00:23:05,460 --> 00:23:12,340
paradigm a went framework supports

00:23:09,160 --> 00:23:15,190
multiple dishes it sports fan out round

00:23:12,340 --> 00:23:17,890
robin and scoped rod Robin fan out means

00:23:15,190 --> 00:23:21,220
when you have a some topic for example

00:23:17,890 --> 00:23:23,080
server started is a topic and when you

00:23:21,220 --> 00:23:25,060
have multiple subscribers like three and

00:23:23,080 --> 00:23:27,670
three subscribers subscribe to this

00:23:25,060 --> 00:23:30,820
topic all these subscribers will receive

00:23:27,670 --> 00:23:33,370
it pan out is a second policy panel

00:23:30,820 --> 00:23:35,970
usually allows you to create a load

00:23:33,370 --> 00:23:38,410
balancing algorithm for example you have

00:23:35,970 --> 00:23:43,180
three subscribers all of them to

00:23:38,410 --> 00:23:46,450
subscribe to the same topic but here is

00:23:43,180 --> 00:23:48,280
that spreads its pan out so you can see

00:23:46,450 --> 00:23:48,880
up there we have a publisher that's

00:23:48,280 --> 00:23:51,610
usually

00:23:48,880 --> 00:23:55,030
a web app in our case or it's also a

00:23:51,610 --> 00:23:57,310
jangle service is this publisher

00:23:55,030 --> 00:23:59,830
publishes four messages as you can see

00:23:57,310 --> 00:24:02,590
and we have a broker which is in our

00:23:59,830 --> 00:24:06,220
case the actual server or service which

00:24:02,590 --> 00:24:07,780
implements all the road routing signing

00:24:06,220 --> 00:24:11,760
of the messages and so on in our case

00:24:07,780 --> 00:24:14,260
this is RabbitMQ and down there you see

00:24:11,760 --> 00:24:17,770
subscribers basically in this case in

00:24:14,260 --> 00:24:21,990
the wall panel policy each subscriber

00:24:17,770 --> 00:24:21,990
receives all the messages which is

00:24:23,820 --> 00:24:30,100
second example you can see the round

00:24:26,500 --> 00:24:33,040
robin policy with the round robin policy

00:24:30,100 --> 00:24:37,630
in this example you also send for events

00:24:33,040 --> 00:24:39,340
but in this case the events are balanced

00:24:37,630 --> 00:24:41,650
one robin which means the SUBSCRIBE one

00:24:39,340 --> 00:24:46,390
receives message one subscriber two 2

00:24:41,650 --> 00:24:49,240
three 3 & 1 again receives message for

00:24:46,390 --> 00:24:50,860
this is very useful with our services in

00:24:49,240 --> 00:24:52,900
in general with different services

00:24:50,860 --> 00:24:55,800
because you can implement basically

00:24:52,900 --> 00:24:58,870
simple load balancing algorithm and the

00:24:55,800 --> 00:25:01,090
last policy which are events framework

00:24:58,870 --> 00:25:03,670
supports is a skull trouble Sculptra

00:25:01,090 --> 00:25:06,520
Robin it's very similar to the round

00:25:03,670 --> 00:25:09,010
robin differences that with skull proud

00:25:06,520 --> 00:25:11,110
robin you provided tag when you register

00:25:09,010 --> 00:25:13,120
for example you want to register and

00:25:11,110 --> 00:25:15,640
listen for all the ones with the topic

00:25:13,120 --> 00:25:18,100
server booted but you can provide a tag

00:25:15,640 --> 00:25:20,770
we usually for this type of usual use

00:25:18,100 --> 00:25:23,800
the service name and this policy allows

00:25:20,770 --> 00:25:25,390
us to load balance some event with the

00:25:23,800 --> 00:25:27,130
same service for example we have

00:25:25,390 --> 00:25:28,780
multiple instances of the same service

00:25:27,130 --> 00:25:30,520
and we would like to load balance

00:25:28,780 --> 00:25:32,740
between them to share the load and

00:25:30,520 --> 00:25:38,530
that's the place where we use this

00:25:32,740 --> 00:25:41,620
policy example subscribe as you can see

00:25:38,530 --> 00:25:44,920
you basically the you we have a ready

00:25:41,620 --> 00:25:46,570
hook that's a function which is executed

00:25:44,920 --> 00:25:49,240
when the whole event framework is

00:25:46,570 --> 00:25:50,830
initialized which means when the library

00:25:49,240 --> 00:25:52,990
connects to the rabbit in queue and so

00:25:50,830 --> 00:25:55,180
on and basically in the ready hook you

00:25:52,990 --> 00:25:58,060
register you see this case registered

00:25:55,180 --> 00:26:00,010
photopic test one and let's do and for

00:25:58,060 --> 00:26:02,590
first one we register with panelled

00:26:00,010 --> 00:26:07,539
policy and which second one we register

00:26:02,590 --> 00:26:09,520
weird round robin policy and here's an

00:26:07,539 --> 00:26:11,770
example how we publish a man this kit

00:26:09,520 --> 00:26:13,779
for example be in this case is the sink

00:26:11,770 --> 00:26:16,419
so it means it's used for a twisted code

00:26:13,779 --> 00:26:18,039
but instead of a sync up there you could

00:26:16,419 --> 00:26:23,559
use sink and you could use it from the

00:26:18,039 --> 00:26:26,620
Django code you simply the event is the

00:26:23,559 --> 00:26:29,260
actual message payload so in this case

00:26:26,620 --> 00:26:32,230
we send the note update event and in

00:26:29,260 --> 00:26:34,600
this case the actual payload is no name

00:26:32,230 --> 00:26:37,299
update which means the some server has

00:26:34,600 --> 00:26:39,460
changed the name that's the yd message

00:26:37,299 --> 00:26:42,340
contains the old name in the new name we

00:26:39,460 --> 00:26:44,289
basically specify the event the payload

00:26:42,340 --> 00:26:47,370
and then you just publish it then the

00:26:44,289 --> 00:26:52,330
our framework and rabbitmq hell's the

00:26:47,370 --> 00:26:59,350
actual message dispatching we also use

00:26:52,330 --> 00:27:01,510
the we also use those use the event

00:26:59,350 --> 00:27:03,700
framework a lot basically our web app

00:27:01,510 --> 00:27:06,070
and a lot of our actions you know our

00:27:03,700 --> 00:27:07,899
web application are blocking and of

00:27:06,070 --> 00:27:11,740
course we have two options we could

00:27:07,899 --> 00:27:13,630
execute this application inside the the

00:27:11,740 --> 00:27:16,330
web app this means inside the Django

00:27:13,630 --> 00:27:18,039
view code or we could of course run it

00:27:16,330 --> 00:27:20,260
inside the service which makes a lot

00:27:18,039 --> 00:27:22,480
more sense because he doesn't walk and

00:27:20,260 --> 00:27:25,149
usually does need to wait so that's

00:27:22,480 --> 00:27:27,399
basically one of the way we use this

00:27:25,149 --> 00:27:29,919
event framework in Django code for

00:27:27,399 --> 00:27:32,860
example when user adds a new monitor on

00:27:29,919 --> 00:27:34,870
the website is we this means we need to

00:27:32,860 --> 00:27:37,029
add it to all the servers which manage

00:27:34,870 --> 00:27:40,090
the query and so on and instead of doing

00:27:37,029 --> 00:27:41,860
this in line which is the pass the or

00:27:40,090 --> 00:27:43,870
send the event dispatching event from

00:27:41,860 --> 00:27:46,990
the web app and then we have a special

00:27:43,870 --> 00:27:52,120
service which handles just the applying

00:27:46,990 --> 00:27:56,860
of the monitors to servers well testing

00:27:52,120 --> 00:28:00,250
I don't think many people love dancing

00:27:56,860 --> 00:28:02,500
or like it but you need to do it and we

00:28:00,250 --> 00:28:06,039
also do it but and we basically have a

00:28:02,500 --> 00:28:08,470
three different styles of deaths or our

00:28:06,039 --> 00:28:11,169
taxes jesuit is composed of three

00:28:08,470 --> 00:28:13,990
different styles of deaths first style

00:28:11,169 --> 00:28:16,300
type of desis simple functional tests

00:28:13,990 --> 00:28:21,380
those gestures that's just

00:28:16,300 --> 00:28:23,540
functions and simple functionality for

00:28:21,380 --> 00:28:25,580
that we use the Django framework test

00:28:23,540 --> 00:28:31,220
framework which is based on unit tests

00:28:25,580 --> 00:28:33,320
and unit s itself in some cases second

00:28:31,220 --> 00:28:36,350
type of that we have is integration

00:28:33,320 --> 00:28:38,680
tests or twisted service that's in this

00:28:36,350 --> 00:28:41,480
test we have we test our twisted

00:28:38,680 --> 00:28:43,550
services code this means this code is a

00:28:41,480 --> 00:28:51,320
single that's also the reason why we use

00:28:43,550 --> 00:28:54,080
twisted trial test framework or both of

00:28:51,320 --> 00:28:56,510
the test types for Django tests and for

00:28:54,080 --> 00:28:58,760
twisted s we've written a custom test

00:28:56,510 --> 00:29:01,070
runner by default django deaths and

00:28:58,760 --> 00:29:04,250
twist it as front inside the single

00:29:01,070 --> 00:29:06,740
process which means if you have multiple

00:29:04,250 --> 00:29:09,620
cores most likely your surveys let you

00:29:06,740 --> 00:29:11,240
steal as well and does run slower it's

00:29:09,620 --> 00:29:13,940
also the reason why we've written our

00:29:11,240 --> 00:29:16,130
custom test runner and this custom test

00:29:13,940 --> 00:29:18,080
runner runs that's inside the multiple

00:29:16,130 --> 00:29:21,500
processes basically it creates our

00:29:18,080 --> 00:29:24,080
process pool and spacious test two

00:29:21,500 --> 00:29:26,450
different processes and then multiple

00:29:24,080 --> 00:29:30,020
tests run in parallel and this turned up

00:29:26,450 --> 00:29:32,000
that now our Django tests and services

00:29:30,020 --> 00:29:34,510
deaths basically are around fifty

00:29:32,000 --> 00:29:37,820
percent faster which is great because

00:29:34,510 --> 00:29:42,170
testing is already painful and if you

00:29:37,820 --> 00:29:44,800
can speed up test it's good one have any

00:29:42,170 --> 00:29:44,800
questions so far

00:29:51,320 --> 00:29:55,060
Oh be shy

00:29:59,920 --> 00:30:08,290
I have a question about this this extra

00:30:05,530 --> 00:30:10,900
custom module that you have a program

00:30:08,290 --> 00:30:13,510
for for Django do you have intentions of

00:30:10,900 --> 00:30:16,360
putting open source somewhere or ice

00:30:13,510 --> 00:30:19,570
that's private tool sorry what the event

00:30:16,360 --> 00:30:22,000
framework or no the test runner the test

00:30:19,570 --> 00:30:24,550
runner yeah it's I have a post on my

00:30:22,000 --> 00:30:27,370
block and I have guests so it's kind of

00:30:24,550 --> 00:30:29,680
open source just not like back inside a

00:30:27,370 --> 00:30:31,960
single get reappoint just inside August

00:30:29,680 --> 00:30:38,580
but yeah i'll i can share a link with

00:30:31,960 --> 00:30:38,580
you later one okay thank you one else

00:30:40,080 --> 00:30:45,430
okay okay i also want to talk a bit

00:30:43,390 --> 00:30:48,940
about how we use like I previously said

00:30:45,430 --> 00:30:50,920
you scribe stripe is a Facebook tool

00:30:48,940 --> 00:30:53,290
with facebook it's open source it's

00:30:50,920 --> 00:30:55,750
primarily used for aggregating the log

00:30:53,290 --> 00:30:57,910
primary selling point subscribes are

00:30:55,750 --> 00:31:00,160
that it's fast you can handle a lot of

00:30:57,910 --> 00:31:03,790
messages and that's also one of the

00:31:00,160 --> 00:31:05,830
reasons we use it for a lot of the stuff

00:31:03,790 --> 00:31:08,500
views event framework but it turned out

00:31:05,830 --> 00:31:10,660
that actually rabbit mq doesn't perform

00:31:08,500 --> 00:31:13,030
so well when you have a lot of messages

00:31:10,660 --> 00:31:15,850
that's one of the reason that in some

00:31:13,030 --> 00:31:18,790
places instead of using RabbitMQ you

00:31:15,850 --> 00:31:21,130
scribe for example the service i showed

00:31:18,790 --> 00:31:24,100
up on at the beginning which shows your

00:31:21,130 --> 00:31:27,070
servers in a 3d space and you give you

00:31:24,100 --> 00:31:29,950
stop live we use scribe for that

00:31:27,070 --> 00:31:33,100
basically we push agents pooled data to

00:31:29,950 --> 00:31:35,190
us and we send it to scribe and scribe

00:31:33,100 --> 00:31:38,290
has a concept of different backends

00:31:35,190 --> 00:31:40,870
which is basically back int is usually a

00:31:38,290 --> 00:31:43,390
file or could be something else in our

00:31:40,870 --> 00:31:45,250
case one of the backends is a Cassandra

00:31:43,390 --> 00:31:47,530
baguette this back and basically just

00:31:45,250 --> 00:31:50,290
saves all the time series in inside our

00:31:47,530 --> 00:31:52,420
central cluster and you can also send

00:31:50,290 --> 00:31:55,030
multiple basically you can configure

00:31:52,420 --> 00:31:57,430
multiple back ends and the other back

00:31:55,030 --> 00:32:00,310
end sends this data to do to the user

00:31:57,430 --> 00:32:03,130
browser using the basically we have a

00:32:00,310 --> 00:32:06,610
service which listens I on a scribe

00:32:03,130 --> 00:32:09,330
stream and scribes also sends same data

00:32:06,610 --> 00:32:12,130
to this service this service then

00:32:09,330 --> 00:32:13,420
figures out all the state changers for

00:32:12,130 --> 00:32:15,610
example if something

00:32:13,420 --> 00:32:17,110
change of your we should trigger saw a

00:32:15,610 --> 00:32:20,080
large and so on and we also publish

00:32:17,110 --> 00:32:22,540
these state changes using event

00:32:20,080 --> 00:32:24,700
framework to a special queue which is

00:32:22,540 --> 00:32:27,490
created when a user connects in a

00:32:24,700 --> 00:32:34,300
website and we basically that's how we

00:32:27,490 --> 00:32:36,850
handle our real-time stop yeah other

00:32:34,300 --> 00:32:40,390
places we also use Python in many other

00:32:36,850 --> 00:32:43,120
places first one is deployment for

00:32:40,390 --> 00:32:46,270
deployment we mostly use fabric the

00:32:43,120 --> 00:32:49,930
fabric it's good it works well if you

00:32:46,270 --> 00:32:52,360
have simple deployment process and you

00:32:49,930 --> 00:32:54,310
don't have that many service but it gets

00:32:52,360 --> 00:32:56,320
complicated for example in cases like

00:32:54,310 --> 00:32:58,330
ours where we have a lot of service and

00:32:56,320 --> 00:33:01,210
our deployment flow is a bit more

00:32:58,330 --> 00:33:03,490
complicated this means fabric is not the

00:33:01,210 --> 00:33:05,860
best fit for this and we are also

00:33:03,490 --> 00:33:08,190
working on some tools to improving that

00:33:05,860 --> 00:33:10,810
but it's a topic for a different dog and

00:33:08,190 --> 00:33:13,810
for continuous integration we use

00:33:10,810 --> 00:33:16,660
buildbot bill body similar to like

00:33:13,810 --> 00:33:19,060
Jenkins which were actually I Jenkins

00:33:16,660 --> 00:33:20,950
Jenkins was pretty cold Hudson it's a

00:33:19,060 --> 00:33:22,390
continuous integration service but bill

00:33:20,950 --> 00:33:24,160
but is similar but it's written in

00:33:22,390 --> 00:33:26,500
Python which means it's a lot more fun

00:33:24,160 --> 00:33:29,350
to work with it and with Jenkins which

00:33:26,500 --> 00:33:35,800
is written in Java and then we also use

00:33:29,350 --> 00:33:39,240
by turning on a lot of other places it

00:33:35,800 --> 00:33:39,240
oh it's time for questions

00:33:45,160 --> 00:33:58,910
wisdom about cloud services it possible

00:33:51,580 --> 00:34:01,310
to use cloud services over the an

00:33:58,910 --> 00:34:04,400
OpenStack instances tree and private

00:34:01,310 --> 00:34:06,260
esis this is after we have an agent

00:34:04,400 --> 00:34:08,960
which you installed on the server so

00:34:06,260 --> 00:34:10,970
yeah you can use it on which we also

00:34:08,960 --> 00:34:13,490
have a like a special build system we

00:34:10,970 --> 00:34:15,380
handles building all the packages for

00:34:13,490 --> 00:34:18,080
different distributions and stuff in as

00:34:15,380 --> 00:34:19,730
you agent works on most of the popular

00:34:18,080 --> 00:34:23,169
Linux distributions and windows as well

00:34:19,730 --> 00:34:23,169
so it should work there

00:34:34,560 --> 00:34:43,440
questions I have a question so where we

00:34:41,040 --> 00:34:45,570
can find documentation about the

00:34:43,440 --> 00:34:49,170
services and what we can find inside

00:34:45,570 --> 00:34:51,390
I'll protect you can go or you can find

00:34:49,170 --> 00:34:54,210
all the documentation or our website on

00:34:51,390 --> 00:35:01,020
the wiki and the website is cloudy calm

00:34:54,210 --> 00:35:07,340
and fight everything there other

00:35:01,020 --> 00:35:07,340

YouTube URL: https://www.youtube.com/watch?v=R9jo6HMlgLo


