Title: synasius - How to make a full fledged REST API with Django OAuth Toolkit
Publication date: 2015-04-18
Playlist: EuroPython 2014
Description: 
	synasius - How to make a full fledged REST API with Django OAuth Toolkit
[EuroPython 2014]
[22 July 2014]

World is going mobile and the need of a backend talking with your apps is getting more and more important. What if I told you writing REST APIs in Python is so easy you donâ€™t need to be a backend expert? Take generous tablespoons of Django, mix thoroughly with Django REST Framework and dust with Django OAuth Toolkit to bake the perfect API in minutes.
Captions: 
	00:00:14,940 --> 00:00:23,040
okay ready for the next talk then

00:00:18,970 --> 00:00:27,119
this is Federico Frank Whaley who's a

00:00:23,040 --> 00:00:29,890
C++ and Python developer ever no-go and

00:00:27,119 --> 00:00:32,970
he's going to talk about how to make a

00:00:29,890 --> 00:00:37,920
full fledged REST API with Django and

00:00:32,970 --> 00:00:37,920
OAuth toolkit so over to you

00:00:43,950 --> 00:00:54,930
hi hi everyone so the goal of this talk

00:00:49,239 --> 00:01:01,510
is to show you how to create REST API

00:00:54,930 --> 00:01:04,479
protected with all - but first I want to

00:01:01,510 --> 00:01:11,860
tell you how you should know how to do

00:01:04,479 --> 00:01:17,649
it and I want to tell you a story so let

00:01:11,860 --> 00:01:20,380
me introduce you to this a small small

00:01:17,649 --> 00:01:22,509
and simple application the time tracker

00:01:20,380 --> 00:01:30,130
which is of course a web application

00:01:22,509 --> 00:01:32,800
that tracks the allows the users to to

00:01:30,130 --> 00:01:37,420
track the time they spend on their

00:01:32,800 --> 00:01:40,990
activities and at the beginning at first

00:01:37,420 --> 00:01:44,259
I had one I had to choose to pick one

00:01:40,990 --> 00:01:48,340
tool which was Django and they had one

00:01:44,259 --> 00:01:51,220
single big project and I deployed it

00:01:48,340 --> 00:01:56,649
once and everything was fine more or

00:01:51,220 --> 00:02:01,200
less but has he used to sing the times

00:01:56,649 --> 00:02:05,469
they are a-changin and what has changed

00:02:01,200 --> 00:02:11,650
actually well front and front and

00:02:05,469 --> 00:02:15,970
development has changed a lot sorry

00:02:11,650 --> 00:02:20,320
today we have a lot of web web front-end

00:02:15,970 --> 00:02:23,769
frameworks and there allows you to

00:02:20,320 --> 00:02:27,280
create amazing front-end applications

00:02:23,769 --> 00:02:31,980
and they had their own development tools

00:02:27,280 --> 00:02:36,579
they to build to test and to run the

00:02:31,980 --> 00:02:41,410
application and so they are completely

00:02:36,579 --> 00:02:46,570
separate applications and he I also had

00:02:41,410 --> 00:02:49,720
to support multiple devices which means

00:02:46,570 --> 00:02:55,030
to support different browsers and

00:02:49,720 --> 00:02:56,680
different platform my issue we we should

00:02:55,030 --> 00:03:01,859
I should

00:02:56,680 --> 00:03:06,310
also take care of the native

00:03:01,859 --> 00:03:09,750
applications so I ended up with a lot of

00:03:06,310 --> 00:03:12,909
projects I had a team structure back and

00:03:09,750 --> 00:03:15,849
time tracker web which is the front-end

00:03:12,909 --> 00:03:20,230
web front-end application and the

00:03:15,849 --> 00:03:26,859
Android project the iOS project and the

00:03:20,230 --> 00:03:34,150
desktop application you know for the the

00:03:26,859 --> 00:03:37,870
old X desktops and moreover there are

00:03:34,150 --> 00:03:41,280
third-party services that wants to

00:03:37,870 --> 00:03:47,200
connect with my time tracker application

00:03:41,280 --> 00:03:50,019
they want to send me data they want to

00:03:47,200 --> 00:03:53,530
read data from my time tracker

00:03:50,019 --> 00:03:57,129
applications so what happens in the

00:03:53,530 --> 00:03:58,840
backend application what scene back-end

00:03:57,129 --> 00:04:02,549
application there is a service that

00:03:58,840 --> 00:04:06,909
expose an amazing and reliable REST API

00:04:02,549 --> 00:04:10,859
and this is the recipe django Django

00:04:06,909 --> 00:04:16,599
rest framework and Django off toolkit

00:04:10,859 --> 00:04:19,449
the these are the the models they are

00:04:16,599 --> 00:04:22,570
really really simple

00:04:19,449 --> 00:04:24,940
there is the activity and time entry

00:04:22,570 --> 00:04:28,330
which is the model that allows us to

00:04:24,940 --> 00:04:33,520
track the user the time that I user

00:04:28,330 --> 00:04:38,580
spend on an activity or a task and these

00:04:33,520 --> 00:04:44,740
are the endpoints that I want to create

00:04:38,580 --> 00:04:50,830
yeah on the most left column the URL

00:04:44,740 --> 00:04:56,229
they the HTTP metered supported and the

00:04:50,830 --> 00:05:00,460
semantic meaning of each method so for

00:04:56,229 --> 00:05:03,729
example the first row you are a slash

00:05:00,460 --> 00:05:06,969
API slash activities if you send a get

00:05:03,729 --> 00:05:09,949
request you get back a list of the

00:05:06,969 --> 00:05:13,650
available activity

00:05:09,949 --> 00:05:17,370
to create the endpoint I need you to I

00:05:13,650 --> 00:05:21,870
need I need to show how Django rest

00:05:17,370 --> 00:05:24,030
framework works in I hope in less than

00:05:21,870 --> 00:05:27,449
five minutes so the first thing you have

00:05:24,030 --> 00:05:30,330
to do is to serialize your data and this

00:05:27,449 --> 00:05:32,490
is really really straightforward in

00:05:30,330 --> 00:05:36,600
general as framework you can use this

00:05:32,490 --> 00:05:41,550
base class serializer and this works

00:05:36,600 --> 00:05:44,280
just like django forms so you just

00:05:41,550 --> 00:05:48,960
define the fields you need and add some

00:05:44,280 --> 00:05:52,190
code to restore or create the instance

00:05:48,960 --> 00:05:55,470
of the model from its serialized

00:05:52,190 --> 00:06:00,930
representation and then you can use

00:05:55,470 --> 00:06:04,650
easily use the serializer and you'll get

00:06:00,930 --> 00:06:08,940
back a dictionary representation of your

00:06:04,650 --> 00:06:12,870
object of course this is boilerplate

00:06:08,940 --> 00:06:17,250
code which should be repeated for every

00:06:12,870 --> 00:06:19,800
model of your application but you can

00:06:17,250 --> 00:06:20,870
avoid to write that code using model

00:06:19,800 --> 00:06:25,620
serializer

00:06:20,870 --> 00:06:29,250
which allows you to just specify with

00:06:25,620 --> 00:06:32,010
which is the model you are you are

00:06:29,250 --> 00:06:34,380
serializing you want to serialize then

00:06:32,010 --> 00:06:39,900
we have to create the views the

00:06:34,380 --> 00:06:43,979
endpoints and what do we need we need of

00:06:39,900 --> 00:06:47,940
course to respect the semantic meaning

00:06:43,979 --> 00:06:52,080
and but we should take care of the user

00:06:47,940 --> 00:06:54,960
authentication and also we should take

00:06:52,080 --> 00:06:58,580
care of permission jackson also

00:06:54,960 --> 00:06:58,580
sometimes object level permissions

00:06:59,000 --> 00:07:04,080
sometimes you need to paginate your

00:07:01,500 --> 00:07:08,039
endpoints because you get a lot of

00:07:04,080 --> 00:07:10,440
results and also you want maybe to

00:07:08,039 --> 00:07:15,990
handle response and request formatting

00:07:10,440 --> 00:07:19,729
to support for example json xml Yano so

00:07:15,990 --> 00:07:22,309
this is a lot of stuff

00:07:19,729 --> 00:07:24,309
you just keep calm and use Django rest

00:07:22,309 --> 00:07:28,309
framework because

00:07:24,309 --> 00:07:30,830
Jungels framework is really as a lot of

00:07:28,309 --> 00:07:33,589
settings that allows you to customize

00:07:30,830 --> 00:07:37,639
this behavior is default behavior these

00:07:33,589 --> 00:07:42,069
are just a small example the first one

00:07:37,639 --> 00:07:44,569
allows you to define which is the class

00:07:42,069 --> 00:07:48,819
that takes care of the user

00:07:44,569 --> 00:07:52,249
authentication and then we have the

00:07:48,819 --> 00:07:54,800
default permission class so if you're

00:07:52,249 --> 00:08:01,520
not out to implicated you know you won't

00:07:54,800 --> 00:08:04,550
get anything just for 401 403 sorry and

00:08:01,520 --> 00:08:10,120
the default renderer and default parser

00:08:04,550 --> 00:08:13,999
for the formatting for the format well

00:08:10,120 --> 00:08:16,849
when you to create the the endpoint you

00:08:13,999 --> 00:08:20,059
can use the API view based class

00:08:16,849 --> 00:08:22,399
provided by Django rest framework which

00:08:20,059 --> 00:08:27,409
allows you to add some code to the

00:08:22,399 --> 00:08:33,380
handler meters and this class will this

00:08:27,409 --> 00:08:37,849
base class will use the settings we can

00:08:33,380 --> 00:08:39,979
see here to create to realize to create

00:08:37,849 --> 00:08:44,839
an endpoint with the correct behavior

00:08:39,979 --> 00:08:47,750
with the behavior you want and well the

00:08:44,839 --> 00:08:51,199
code it is really really easy to

00:08:47,750 --> 00:08:54,040
understand here we have the query set to

00:08:51,199 --> 00:08:59,589
retrieve all the activities we serialize

00:08:54,040 --> 00:08:59,589
the query set and return the serialized

00:08:59,829 --> 00:09:10,550
response and of course this is

00:09:05,720 --> 00:09:15,319
boilerplate code so you you can you have

00:09:10,550 --> 00:09:20,569
to repeat this code 44 and points but

00:09:15,319 --> 00:09:22,699
you can't avoid to write this code using

00:09:20,569 --> 00:09:26,870
the generic class based view provided by

00:09:22,699 --> 00:09:30,649
Django rest framework here you just need

00:09:26,870 --> 00:09:32,400
to specify with to set the the which is

00:09:30,649 --> 00:09:35,810
the base query set

00:09:32,400 --> 00:09:39,300
and the serializer class you want to use

00:09:35,810 --> 00:09:43,110
terry is also a built-in browser bowl

00:09:39,300 --> 00:09:45,720
api provided by Django rest framework

00:09:43,110 --> 00:09:51,000
which we are going to see at the end of

00:09:45,720 --> 00:09:54,950
the talk so the next step is how do you

00:09:51,000 --> 00:09:59,940
authorize client applications I mean

00:09:54,950 --> 00:10:04,320
your your applications like the time

00:09:59,940 --> 00:10:07,800
tracker Android and the time tracker iOS

00:10:04,320 --> 00:10:10,529
they need to authorize they need to be

00:10:07,800 --> 00:10:14,430
authorized to talk to the time tracker

00:10:10,529 --> 00:10:16,560
behind API and also there are

00:10:14,430 --> 00:10:18,960
third-party apps that wants to access

00:10:16,560 --> 00:10:24,120
your users data so you need an

00:10:18,960 --> 00:10:28,500
authorization you need some

00:10:24,120 --> 00:10:33,860
authorization engine behind if you don't

00:10:28,500 --> 00:10:37,500
have if you don't have this

00:10:33,860 --> 00:10:40,050
authorization engine these are the

00:10:37,500 --> 00:10:43,380
problems we you are going to to face

00:10:40,050 --> 00:10:44,730
first of all you have to store the first

00:10:43,380 --> 00:10:47,760
solution without the authorization

00:10:44,730 --> 00:10:50,640
framework as to store the user password

00:10:47,760 --> 00:10:54,810
in the application which is not good of

00:10:50,640 --> 00:10:56,940
course because the application yes the

00:10:54,810 --> 00:11:01,290
full gets a full access to the user

00:10:56,940 --> 00:11:04,529
account and if the users if the user

00:11:01,290 --> 00:11:07,709
wants to revoke his password it once

00:11:04,529 --> 00:11:11,130
revoke the excess sorry to the

00:11:07,709 --> 00:11:16,529
application he needs to change his

00:11:11,130 --> 00:11:21,680
password so also compromise adapts can

00:11:16,529 --> 00:11:29,010
expose the user the user password and

00:11:21,680 --> 00:11:32,339
end user name this is the solution the

00:11:29,010 --> 00:11:37,050
alt to authorization framework so how

00:11:32,339 --> 00:11:39,560
does it how does it work and I want to

00:11:37,050 --> 00:11:39,560
explain

00:11:39,709 --> 00:11:48,600
how it works using this simple use case

00:11:43,920 --> 00:11:51,470
so imagine the there is sang if I

00:11:48,600 --> 00:11:54,839
streaming music streaming service that

00:11:51,470 --> 00:12:03,180
wants to connect with the time tracker

00:11:54,839 --> 00:12:06,509
application so their users can track

00:12:03,180 --> 00:12:11,930
their listening activities on the time

00:12:06,509 --> 00:12:17,430
tracker application these are the actors

00:12:11,930 --> 00:12:24,569
this terminology is is the same used in

00:12:17,430 --> 00:12:28,110
the RFC in the of two RFC and I'm just

00:12:24,569 --> 00:12:31,889
trying to translate their terms to the

00:12:28,110 --> 00:12:33,959
two this use case so the results owner

00:12:31,889 --> 00:12:38,190
is of course the unit the resource

00:12:33,959 --> 00:12:40,529
server is the time tracker a API and the

00:12:38,190 --> 00:12:43,680
authorization server in this case is the

00:12:40,529 --> 00:12:48,420
same as the results server and the

00:12:43,680 --> 00:12:51,089
client is the songify application I want

00:12:48,420 --> 00:12:54,260
to explain you what the oath to

00:12:51,089 --> 00:12:58,440
authorization framework defines for

00:12:54,260 --> 00:13:01,949
flows for authorization flows I want to

00:12:58,440 --> 00:13:05,010
show you how one of these flows work

00:13:01,949 --> 00:13:07,949
this is the most popular one the

00:13:05,010 --> 00:13:11,250
authorization code flow so the first

00:13:07,949 --> 00:13:13,500
step is when the client registers with

00:13:11,250 --> 00:13:15,990
the authorization server and the

00:13:13,500 --> 00:13:20,839
authorization server provides the client

00:13:15,990 --> 00:13:23,699
provides a client ID and a client secret

00:13:20,839 --> 00:13:25,860
the client of course is the songify

00:13:23,699 --> 00:13:29,370
application so there is someone at

00:13:25,860 --> 00:13:33,290
songify there for example goes to

00:13:29,370 --> 00:13:38,850
developer time tracker dot-com ad

00:13:33,290 --> 00:13:42,259
developer application and it gets back a

00:13:38,850 --> 00:13:47,339
client ID and a client secret key the

00:13:42,259 --> 00:13:51,900
second step as when the song if I

00:13:47,339 --> 00:13:57,180
application redirect the user

00:13:51,900 --> 00:14:03,670
to the time tracker application via its

00:13:57,180 --> 00:14:08,500
user agent we are its browser for

00:14:03,670 --> 00:14:13,140
instance and next the time tracker

00:14:08,500 --> 00:14:19,060
application authenticates the user and

00:14:13,140 --> 00:14:24,100
obtains the authorization to communicate

00:14:19,060 --> 00:14:24,670
with the song if I application from the

00:14:24,100 --> 00:14:27,790
user

00:14:24,670 --> 00:14:30,700
now the time track of the time tracker

00:14:27,790 --> 00:14:33,130
application redirect the user back to

00:14:30,700 --> 00:14:35,920
the songify application with an

00:14:33,130 --> 00:14:40,480
authorization code weary which is later

00:14:35,920 --> 00:14:43,680
exchanged for a token and the token can

00:14:40,480 --> 00:14:50,050
be used by the client to authenticate

00:14:43,680 --> 00:14:53,050
requests how to do that in Django with

00:14:50,050 --> 00:14:57,790
Django our tool kit of course which

00:14:53,050 --> 00:15:01,360
supports Django from 1.4 to 1.7 Python 2

00:14:57,790 --> 00:15:06,730
and Python 3 and it is built on top of

00:15:01,360 --> 00:15:10,420
oddly which actually is a really great

00:15:06,730 --> 00:15:13,930
library it takes care of the compliance

00:15:10,420 --> 00:15:19,960
with the RFC we just wrote some glue

00:15:13,930 --> 00:15:23,770
code and it's integration with Django is

00:15:19,960 --> 00:15:26,050
really really easy you add audio to

00:15:23,770 --> 00:15:31,710
provide an application to distil adapts

00:15:26,050 --> 00:15:36,970
add our or our URLs to your patterns and

00:15:31,710 --> 00:15:41,190
you can create protected and point using

00:15:36,970 --> 00:15:44,710
our generic protected resource view and

00:15:41,190 --> 00:15:49,330
here you have an API an endpoint which

00:15:44,710 --> 00:15:52,360
is protected where well - now it comes

00:15:49,330 --> 00:15:56,110
but with batteries included so we are a

00:15:52,360 --> 00:15:59,230
built in views - sorry to reduce so

00:15:56,110 --> 00:16:01,750
register developer apps and a form view

00:15:59,230 --> 00:16:04,170
for the user after it for the user

00:16:01,750 --> 00:16:04,170
authorization

00:16:04,600 --> 00:16:10,429
it is integrated with Django rest

00:16:07,519 --> 00:16:13,100
framework you just need to switch the

00:16:10,429 --> 00:16:16,759
default authentication classes with the

00:16:13,100 --> 00:16:20,569
one provided by Django or toolkit

00:16:16,759 --> 00:16:28,759
package and now I want to show you how

00:16:20,569 --> 00:16:31,220
how it works so these are the steps we

00:16:28,759 --> 00:16:34,040
are going to the authorization first we

00:16:31,220 --> 00:16:39,379
are going to create developer

00:16:34,040 --> 00:16:43,189
application then we are going we are

00:16:39,379 --> 00:16:46,429
going to simulate the step when the user

00:16:43,189 --> 00:16:52,959
is redirected to the authorization and

00:16:46,429 --> 00:16:56,839
point so here you can see with this or

00:16:52,959 --> 00:16:59,809
one of the built-in views to register

00:16:56,839 --> 00:17:05,600
new developer applications so you create

00:16:59,809 --> 00:17:07,309
new application you add the name here

00:17:05,600 --> 00:17:11,899
you have your client ID and client

00:17:07,309 --> 00:17:16,970
secret you can choose these are details

00:17:11,899 --> 00:17:22,659
from the all to out from the up to

00:17:16,970 --> 00:17:28,730
framework anyway I got my song if I

00:17:22,659 --> 00:17:33,190
application ready here it is so we can

00:17:28,730 --> 00:17:33,190
just use this one too

00:17:37,530 --> 00:17:47,970
step one the sanctified application as

00:17:43,620 --> 00:17:52,810
redirecting the user agent of the user

00:17:47,970 --> 00:18:00,670
to the authorization form but first the

00:17:52,810 --> 00:18:03,300
user has to authenticate and now a time

00:18:00,670 --> 00:18:11,010
the application is asking for my

00:18:03,300 --> 00:18:11,010
authorization and we authorize of course

00:18:11,790 --> 00:18:15,000
come on

00:18:17,940 --> 00:18:27,510
okay of course this should be the URL of

00:18:22,920 --> 00:18:30,290
the client application so song if I come

00:18:27,510 --> 00:18:37,260
for example now we can take this

00:18:30,290 --> 00:18:42,320
authorization code just substitute the

00:18:37,260 --> 00:18:49,080
code here and we are going to exchange

00:18:42,320 --> 00:18:54,090
the code to obtain a token here is the

00:18:49,080 --> 00:19:00,030
response and this is the token and the

00:18:54,090 --> 00:19:03,900
token can be used to to create a proper

00:19:00,030 --> 00:19:08,760
request with this header authorization

00:19:03,900 --> 00:19:13,950
beer with the token so just want to show

00:19:08,760 --> 00:19:16,980
you that I'm not lying if I try to get

00:19:13,950 --> 00:19:20,360
the list of the activities just tell me

00:19:16,980 --> 00:19:28,500
that I'm missing the authentications

00:19:20,360 --> 00:19:33,060
credential credential now if I use my

00:19:28,500 --> 00:19:37,500
new token I can get back the the list of

00:19:33,060 --> 00:19:40,740
the activities so and the solve the

00:19:37,500 --> 00:19:45,240
future plans for Django toolkit are to

00:19:40,740 --> 00:19:48,810
support alt one maybe add support for

00:19:45,240 --> 00:19:52,320
the open ADA connector RFC which really

00:19:48,810 --> 00:19:57,450
don't know I still have to read the the

00:19:52,320 --> 00:20:01,830
paper and add no secure storage storage

00:19:57,450 --> 00:20:05,850
support for for the the applications

00:20:01,830 --> 00:20:08,570
storage so we need some help and thank

00:20:05,850 --> 00:20:08,570
that's all

00:20:15,299 --> 00:20:27,210
any questions please anyone

00:20:34,250 --> 00:20:38,910
first thank you for your talk

00:20:36,840 --> 00:20:43,160
my question is can we use the same

00:20:38,910 --> 00:20:46,500
framework to post tweets on Twitter now

00:20:43,160 --> 00:20:49,740
Django toolkit actually is the

00:20:46,500 --> 00:20:56,220
implementation of the server-side part

00:20:49,740 --> 00:21:02,250
of the out to of the specification so if

00:20:56,220 --> 00:21:05,730
you want to send tweet to Twitter you

00:21:02,250 --> 00:21:10,770
need the a client-side implementation of

00:21:05,730 --> 00:21:17,420
the out to RFC neo2 authorization

00:21:10,770 --> 00:21:19,890
framework in your in your examples the

00:21:17,420 --> 00:21:23,220
authorization server was always the same

00:21:19,890 --> 00:21:26,850
as the actual service with your toolkit

00:21:23,220 --> 00:21:29,420
can you make two services like can you

00:21:26,850 --> 00:21:33,510
separate out the authorization part

00:21:29,420 --> 00:21:35,310
actually now we have to walk to keep the

00:21:33,510 --> 00:21:44,130
resource server and the authorization

00:21:35,310 --> 00:21:46,350
server seperated yes but maybe you can

00:21:44,130 --> 00:21:49,350
actually you have to write some more

00:21:46,350 --> 00:21:51,410
code to keep the authorization server

00:21:49,350 --> 00:22:00,780
and the receiver server

00:21:51,410 --> 00:22:04,080
separated hi so one quick question is so

00:22:00,780 --> 00:22:06,330
if you want to expose your API

00:22:04,080 --> 00:22:08,940
differently your resources differently

00:22:06,330 --> 00:22:10,530
from the actual model definition can you

00:22:08,940 --> 00:22:12,830
simply handle that in the steriliser

00:22:10,530 --> 00:22:17,100
class so you don't have to use the

00:22:12,830 --> 00:22:20,460
jungle model analyser yes of course

00:22:17,100 --> 00:22:24,000
you just use serializer just if you if

00:22:20,460 --> 00:22:27,600
your data is for example MongoDB you

00:22:24,000 --> 00:22:30,180
just write your you just use the

00:22:27,600 --> 00:22:31,020
serializer base class to write your own

00:22:30,180 --> 00:22:33,780
serializer

00:22:31,020 --> 00:22:39,210
and it just works you have to write some

00:22:33,780 --> 00:22:41,090
more code but it works that is okay okay

00:22:39,210 --> 00:22:44,539
thanks you're welcome

00:22:41,090 --> 00:22:47,570
hello thanks for you talk what are you

00:22:44,539 --> 00:22:52,249
using for object ownership sorry

00:22:47,570 --> 00:22:55,129
object ownership so the how do you say

00:22:52,249 --> 00:22:58,909
this object belongs to this user and I

00:22:55,129 --> 00:23:04,580
only showed these requests coming from

00:22:58,909 --> 00:23:08,450
this user oh well this is object level

00:23:04,580 --> 00:23:12,980
permission oh but you are using any

00:23:08,450 --> 00:23:17,919
component for that we are just filtering

00:23:12,980 --> 00:23:22,789
the the query set looking at the

00:23:17,919 --> 00:23:28,399
actually okay we sometimes you we can

00:23:22,789 --> 00:23:31,309
get back which is the user bound to the

00:23:28,399 --> 00:23:33,999
token okay and with that with the user

00:23:31,309 --> 00:23:36,559
instance you can filter the query that

00:23:33,999 --> 00:23:44,749
this is a solution really simple

00:23:36,559 --> 00:23:47,169
solution any more questions okay thank

00:23:44,749 --> 00:23:47,169
you very much

00:23:52,050 --> 00:23:54,110

YouTube URL: https://www.youtube.com/watch?v=mOMXVBd8kTo


