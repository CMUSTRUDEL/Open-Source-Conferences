Title: Dave Halter - Identifying Bugs Before Runtime With Jedi
Publication date: 2015-04-18
Playlist: EuroPython 2014
Description: 
	Dave Halter - Identifying Bugs Before Runtime With Jedi
[EuroPython 2014]
[23 July 2014]

Finding bugs before runtime has been an incredibly tedious task in Python. Jedi is an autocompletion library with interesting capabilities: It understands a lot of the dynamic features of Python. I will show you how we can use the force of (the) Jedi to identify bugs in your Python code. It's not just another pylint. It's way better.

-----

Jedi is an autocompletion library for Python that has gained quite a following over the last year. There are a couple of plugins for the most popular editors (VIM, Sublime, Emacs, etc.) and mainstream IDEs like Spyder are switching to Jedi.

Jedi basically tries to redefine the boundaries of autocompletion in dynamic languages. Most people still think that there's no hope for decent autocompletion in Python. This talk will try to argue the opposite, that decent autocompletion is very close.

While the first part will be about Jedi, the second part of this talk will discuss the future of dynamic analysis. Dynamic Analysis is what I call the parts that static analysis doesn't cover. The hope is to generate a kind of "compiler" that doesn't execute code but reports additional bugs in your code (AttributeErrors and the like). 

I still have to work out the details of the presentation. I also have to add that Jedi I'm currently working full-time on Jedi and that there's going to be some major improvements until the conference. Autocompletion and static/dynamic analysis as well as refactoring are hugely important tools for a dynamic language IMHO, because they can improve the only big disadvantage compared to static languages: Finding bugs before running your tool.
Captions: 
	00:00:14,690 --> 00:00:21,590
welcome Dave to the stage for his talk

00:00:17,779 --> 00:00:23,360
on using he's the author of Jedi and

00:00:21,590 --> 00:00:25,340
he's going to show us in his talk how

00:00:23,360 --> 00:00:28,029
how to use it effectively give a round

00:00:25,340 --> 00:00:28,029
of applause for Dave

00:00:32,130 --> 00:01:00,090
oh well me a sec yeah that stupid thing

00:00:52,650 --> 00:01:01,410
will go away about five to three we're

00:01:00,090 --> 00:01:03,090
going to try not five minutes of

00:01:01,410 --> 00:01:04,229
questions at the end so as you're you're

00:01:03,090 --> 00:01:05,550
going to leave early didn't leave

00:01:04,229 --> 00:01:09,270
quietly so we can hear what people are

00:01:05,550 --> 00:01:11,580
asking in here date answers alright and

00:01:09,270 --> 00:01:14,910
so it's really great you're all here

00:01:11,580 --> 00:01:19,800
it's great to see so many people and I'm

00:01:14,910 --> 00:01:23,509
really thankful for all of you um just

00:01:19,800 --> 00:01:28,710
quick race and raise hands please and

00:01:23,509 --> 00:01:32,729
who doesn't know Chad I all right who

00:01:28,710 --> 00:01:35,160
does all right like it's like 10 person

00:01:32,729 --> 00:01:41,490
sleeping or something or debt but

00:01:35,160 --> 00:01:46,289
whatever and sorry my this thing is

00:01:41,490 --> 00:01:50,520
going totally nuts anyway and so i'm

00:01:46,289 --> 00:01:51,960
dave and this is like my cv i'm not

00:01:50,520 --> 00:01:54,450
kidding this is really this is ready my

00:01:51,960 --> 00:02:01,190
CV like I I would send this to companies

00:01:54,450 --> 00:02:01,190
and so and it's done on a trek point and

00:02:01,220 --> 00:02:07,590
it kind of shows what I what I love

00:02:05,280 --> 00:02:11,640
doing and it's it's like being creative

00:02:07,590 --> 00:02:14,540
all over and I like doing music and like

00:02:11,640 --> 00:02:17,640
play the guitar singing and so on and

00:02:14,540 --> 00:02:21,450
there's like two things that are not on

00:02:17,640 --> 00:02:24,090
there and that's basically i started

00:02:21,450 --> 00:02:28,410
west coast swing dancing and I went to

00:02:24,090 --> 00:02:31,920
Afghanistan in 2013 because it kind of

00:02:28,410 --> 00:02:35,670
stops there so and what would happens

00:02:31,920 --> 00:02:40,050
from 2013 until now is I did open source

00:02:35,670 --> 00:02:43,920
development which is chad i basically

00:02:40,050 --> 00:02:46,849
and I did I went to Afghanistan and

00:02:43,920 --> 00:02:50,939
Afghanistan look kind of like this

00:02:46,849 --> 00:02:56,340
so um this is me fighting Taliban or

00:02:50,939 --> 00:02:59,519
something and um I went there and with

00:02:56,340 --> 00:03:03,989
like an education focus i teach Afghans

00:02:59,519 --> 00:03:08,969
I taught Afghans in in computer science

00:03:03,989 --> 00:03:12,299
and that kind of stuff so but I want to

00:03:08,969 --> 00:03:16,439
kind of get away from Star Wars and Star

00:03:12,299 --> 00:03:21,810
Wars now and and towards chat ID the

00:03:16,439 --> 00:03:23,760
auto completion and so I hope everyone

00:03:21,810 --> 00:03:26,849
understands what auto completion is here

00:03:23,760 --> 00:03:31,379
right so it's like this thing that pops

00:03:26,849 --> 00:03:32,969
up when you write code and so Chad I is

00:03:31,379 --> 00:03:38,189
it's just all the completion for a

00:03:32,969 --> 00:03:40,169
Python and it's it's kind of a new

00:03:38,189 --> 00:03:43,349
approach like there has been roped

00:03:40,169 --> 00:03:46,019
before and like there's a charm but it's

00:03:43,349 --> 00:03:48,239
kind of different and it's it's it's a

00:03:46,019 --> 00:03:53,359
project that has has grown quite a lot

00:03:48,239 --> 00:03:55,889
in the last few months even it has like

00:03:53,359 --> 00:03:58,139
2200 stars on github and it'sit's well

00:03:55,889 --> 00:04:02,129
tested and it has only been around for

00:03:58,139 --> 00:04:06,449
two years ready and so we we kind of

00:04:02,129 --> 00:04:09,449
have an emphasis on Python 3 and that's

00:04:06,449 --> 00:04:13,260
because at least I think it's the future

00:04:09,449 --> 00:04:18,720
of Python so it works in Python too but

00:04:13,260 --> 00:04:27,560
still like we we do a lot of coding in

00:04:18,720 --> 00:04:31,380
Python 3 and so um then would it like

00:04:27,560 --> 00:04:33,120
the base of Jedi like what's really

00:04:31,380 --> 00:04:38,310
important is to have a good time

00:04:33,120 --> 00:04:42,060
deduction and that's not as easy as you

00:04:38,310 --> 00:04:46,110
might think because python is really

00:04:42,060 --> 00:04:48,449
dynamic and it's a different approach

00:04:46,110 --> 00:04:50,340
than clay charm pycharm has this kind of

00:04:48,449 --> 00:04:52,169
approach where day or at least I think

00:04:50,340 --> 00:04:57,520
they have that approach because their

00:04:52,169 --> 00:05:00,320
code is not open sourced so sorry

00:04:57,520 --> 00:05:03,770
it is open source now like the whole

00:05:00,320 --> 00:05:07,790
completion thing all right so death has

00:05:03,770 --> 00:05:10,460
changed and so anyway what I would I

00:05:07,790 --> 00:05:14,360
thought it is is like date they kind of

00:05:10,460 --> 00:05:16,820
build this and type tree where you they

00:05:14,360 --> 00:05:19,220
just know everywhere the types and like

00:05:16,820 --> 00:05:22,730
they do it this way and I do it on a

00:05:19,220 --> 00:05:25,550
lazy evaluation approach where I'm am I

00:05:22,730 --> 00:05:28,490
just moving from place to place and I

00:05:25,550 --> 00:05:30,680
try to keep all the values as well to

00:05:28,490 --> 00:05:32,930
have as much information as possible and

00:05:30,680 --> 00:05:35,600
I can show it I can show you how I do

00:05:32,930 --> 00:05:38,780
that and that's and this is a small

00:05:35,600 --> 00:05:43,880
example it's like this string object

00:05:38,780 --> 00:05:46,790
down there and goes like Jedi would now

00:05:43,880 --> 00:05:49,280
work it you have you all right so you

00:05:46,790 --> 00:05:50,960
have this completion here you have

00:05:49,280 --> 00:05:55,370
capitalised center and so on and that

00:05:50,960 --> 00:05:57,110
kind of needs the string object it well

00:05:55,370 --> 00:06:01,370
it needs to know what the string object

00:05:57,110 --> 00:06:04,280
is so it goes back and looks where where

00:06:01,370 --> 00:06:06,740
a string object defined it's like like

00:06:04,280 --> 00:06:09,680
that gather get at your thing so it

00:06:06,740 --> 00:06:13,669
doesn't get at her on the string and the

00:06:09,680 --> 00:06:17,210
name and execute it so basically what

00:06:13,669 --> 00:06:21,169
get a true does it it needs the name so

00:06:17,210 --> 00:06:24,590
it goes up there kind of puts Nate the

00:06:21,169 --> 00:06:27,440
name upper together and then it works so

00:06:24,590 --> 00:06:29,150
that's pretty cool because it's that's

00:06:27,440 --> 00:06:34,900
something you wouldn't expect and

00:06:29,150 --> 00:06:34,900
another nautical mission to do like um

00:06:35,830 --> 00:06:48,350
so and Jedi's then there's like chat

00:06:45,830 --> 00:06:51,400
eyes parser which is full torrent like

00:06:48,350 --> 00:06:54,080
it basically has to be because

00:06:51,400 --> 00:06:57,440
auto-completion doesn't really work like

00:06:54,080 --> 00:07:00,470
rope the other older autocompletion

00:06:57,440 --> 00:07:03,290
thing they kind of use an ast and just

00:07:00,470 --> 00:07:05,300
delete lines but that's then they have

00:07:03,290 --> 00:07:08,210
to kind of iterate that and if if the

00:07:05,300 --> 00:07:10,310
file is really buggy they are not able

00:07:08,210 --> 00:07:13,070
to give you any hints

00:07:10,310 --> 00:07:16,130
and so basically with Jetta you can you

00:07:13,070 --> 00:07:17,990
just like give it anything like you can

00:07:16,130 --> 00:07:21,020
give you the PHP script and as long as

00:07:17,990 --> 00:07:28,370
there's like one Python function there

00:07:21,020 --> 00:07:31,970
it will work and so way way more

00:07:28,370 --> 00:07:35,650
important as the fast parser that's kind

00:07:31,970 --> 00:07:41,090
of a strange thing and that splits up a

00:07:35,650 --> 00:07:43,910
file into functions and classes and the

00:07:41,090 --> 00:07:45,620
idea behind it is that well you're doing

00:07:43,910 --> 00:07:48,260
autocompletion all the time and you're

00:07:45,620 --> 00:07:50,050
only changing like one line so if you

00:07:48,260 --> 00:07:53,600
change only one line you shouldn't be

00:07:50,050 --> 00:07:57,740
reporting that whole tree it's just it's

00:07:53,600 --> 00:08:01,510
just a big waste of time and so what

00:07:57,740 --> 00:08:05,810
what Jedi does it's it's it's basically

00:08:01,510 --> 00:08:08,840
it's basically to get rid of that and

00:08:05,810 --> 00:08:11,690
just just parse that one function again

00:08:08,840 --> 00:08:14,030
and sometimes that's buggy like there's

00:08:11,690 --> 00:08:17,510
that's that's why people sometimes think

00:08:14,030 --> 00:08:20,690
Jedi is not really good or it is Bucky

00:08:17,510 --> 00:08:24,290
or whatever so if you find with a way to

00:08:20,690 --> 00:08:28,910
reap you reproduce issues like we would

00:08:24,290 --> 00:08:33,070
be really happy and and there's like one

00:08:28,910 --> 00:08:36,050
fun thing about this is like if you have

00:08:33,070 --> 00:08:38,120
Japanese guys as contributors they won't

00:08:36,050 --> 00:08:40,970
they will fix that like they're the most

00:08:38,120 --> 00:08:43,520
awesome people to do have around an open

00:08:40,970 --> 00:08:45,920
source project because they always they

00:08:43,520 --> 00:08:48,860
always kind of go for a performance and

00:08:45,920 --> 00:08:54,380
and fix things and so that has happened

00:08:48,860 --> 00:08:58,340
a few times here in Jedi's well and then

00:08:54,380 --> 00:09:04,040
that the dynamic nature of python is

00:08:58,340 --> 00:09:06,380
like we understand that by by doing well

00:09:04,040 --> 00:09:10,040
by basically understanding all the get a

00:09:06,380 --> 00:09:11,870
true staff and and so on but that

00:09:10,040 --> 00:09:14,000
doesn't really help a lot because you're

00:09:11,870 --> 00:09:18,020
not using that the biggest issue

00:09:14,000 --> 00:09:22,100
actually are off of dynamic stuff in

00:09:18,020 --> 00:09:23,990
python is is lists and sets because you

00:09:22,100 --> 00:09:26,360
push into these

00:09:23,990 --> 00:09:29,600
of containers and you expect something

00:09:26,360 --> 00:09:31,839
out of it and it's hard to understand it

00:09:29,600 --> 00:09:34,339
because you push from somewhere and it

00:09:31,839 --> 00:09:38,270
kind of the other population has to

00:09:34,339 --> 00:09:41,959
handle it and which is as far as I know

00:09:38,270 --> 00:09:46,790
again not handled by PI char and

00:09:41,959 --> 00:09:49,520
pineapple rope and so on and so this is

00:09:46,790 --> 00:09:51,350
an example like you just kind of ched I

00:09:49,520 --> 00:09:55,730
understand it even if it's in a for loop

00:09:51,350 --> 00:09:58,459
or like in a different function and so

00:09:55,730 --> 00:10:01,220
you have an annex that is defined as an

00:09:58,459 --> 00:10:03,080
array you you push two times and you

00:10:01,220 --> 00:10:06,680
kind of in the end you end up with

00:10:03,080 --> 00:10:08,839
completions for both ending string like

00:10:06,680 --> 00:10:10,490
you could now say well but the index is

00:10:08,839 --> 00:10:13,100
not right like it should just be an end

00:10:10,490 --> 00:10:14,270
well we might work on that but I don't

00:10:13,100 --> 00:10:16,279
think it's very important because

00:10:14,270 --> 00:10:18,649
typically you only have one type in

00:10:16,279 --> 00:10:24,459
there but you need to know that one time

00:10:18,649 --> 00:10:26,899
and so what we end up with is is and

00:10:24,459 --> 00:10:29,660
Jedi cheddar really understands a lot

00:10:26,899 --> 00:10:33,230
about Python so this was kind of the

00:10:29,660 --> 00:10:35,600
introduction towards static analysis

00:10:33,230 --> 00:10:39,170
because like if you don't understand all

00:10:35,600 --> 00:10:40,940
those things like decorators generators

00:10:39,170 --> 00:10:43,490
list comprehensions and so on and so on

00:10:40,940 --> 00:10:46,910
like if you fail to understand just one

00:10:43,490 --> 00:10:49,430
bit one statement then you fail to

00:10:46,910 --> 00:10:52,370
understand the whole kind of thing

00:10:49,430 --> 00:10:54,410
because Jedi is recursive and like goes

00:10:52,370 --> 00:10:55,730
from one place to the next so if you

00:10:54,410 --> 00:10:59,709
don't understand the list comprehension

00:10:55,730 --> 00:11:02,990
you cannot know to type in the end and

00:10:59,709 --> 00:11:05,270
Jedi even understand the Scriptures like

00:11:02,990 --> 00:11:07,550
that under like almost nobody

00:11:05,270 --> 00:11:13,190
understands those because they're pretty

00:11:07,550 --> 00:11:15,110
complicated and there's there's like

00:11:13,190 --> 00:11:17,060
exceptions that we just from the

00:11:15,110 --> 00:11:19,490
beginning on set well we were not we're

00:11:17,060 --> 00:11:22,240
not going to do that that's metaclass is

00:11:19,490 --> 00:11:25,640
set at her and I think a few others like

00:11:22,240 --> 00:11:27,649
locals and Global's modifications and

00:11:25,640 --> 00:11:31,640
 modifications and like that crazy

00:11:27,649 --> 00:11:34,510
stuff and which is just too hard to

00:11:31,640 --> 00:11:34,510
understand and

00:11:37,040 --> 00:11:46,430
so this led to the idea of creating a

00:11:40,910 --> 00:11:48,380
linter or static analysis and so this

00:11:46,430 --> 00:11:52,009
this came up when i was writing a

00:11:48,380 --> 00:11:55,009
proposal for a euro python in February

00:11:52,009 --> 00:11:56,149
or something and so I was like oh what a

00:11:55,009 --> 00:11:58,670
completion is not going to be that

00:11:56,149 --> 00:12:01,250
interesting to talk about like it's just

00:11:58,670 --> 00:12:04,339
auto completion everybody wants it but

00:12:01,250 --> 00:12:09,529
nobody really cares how it's done and so

00:12:04,339 --> 00:12:11,480
and I kind of thought well static

00:12:09,529 --> 00:12:13,279
analysis could be really nice to do with

00:12:11,480 --> 00:12:17,029
Jedi because we understand the types and

00:12:13,279 --> 00:12:19,220
we can just do a lazy every evaluation

00:12:17,029 --> 00:12:22,519
on everything so basically evaluate

00:12:19,220 --> 00:12:29,209
everything so you could push oh sorry we

00:12:22,519 --> 00:12:31,370
you push the lazy away and first I

00:12:29,209 --> 00:12:33,319
thought it was slow but it turns out

00:12:31,370 --> 00:12:36,589
it's not that slow it's not as fast as

00:12:33,319 --> 00:12:38,990
pilant or high flakes but it's it's okay

00:12:36,589 --> 00:12:43,279
like I'll show you the results

00:12:38,990 --> 00:12:47,060
afterwards and and it yields very good

00:12:43,279 --> 00:12:50,930
results just like I I worked on it for a

00:12:47,060 --> 00:12:54,260
month or so and that's not a lot of time

00:12:50,930 --> 00:12:56,089
like I in comparison to what I worked on

00:12:54,260 --> 00:12:58,899
chat I in general it's it's been like

00:12:56,089 --> 00:13:02,389
more than two years so it's just a month

00:12:58,899 --> 00:13:04,699
and then it was really fun because there

00:13:02,389 --> 00:13:11,180
was a talk like we're seeing the the

00:13:04,699 --> 00:13:13,670
Haskell keynote so and this was fun for

00:13:11,180 --> 00:13:15,319
me because he just said static analysis

00:13:13,670 --> 00:13:17,569
is primitive and I'm sitting in there

00:13:15,319 --> 00:13:20,180
and having a talk about static analysis

00:13:17,569 --> 00:13:24,800
and how how we will do that in the

00:13:20,180 --> 00:13:26,769
future in Python and so like he says

00:13:24,800 --> 00:13:30,949
well that's not going to do it and

00:13:26,769 --> 00:13:33,139
there's like Piland compile like the

00:13:30,949 --> 00:13:39,380
Python compiler and so on and there they

00:13:33,139 --> 00:13:41,829
suck whatever and and so Chad I well it

00:13:39,380 --> 00:13:41,829
does it

00:13:50,510 --> 00:14:05,760
but well yeah bazinga and so anyway it

00:14:02,480 --> 00:14:08,850
but we have to be fair there's like and

00:14:05,760 --> 00:14:13,290
it wasn't really working on Monday

00:14:08,850 --> 00:14:16,620
because like I worked on different stuff

00:14:13,290 --> 00:14:18,930
I worked most of all on attribute error

00:14:16,620 --> 00:14:20,670
on actually actually read errors and

00:14:18,930 --> 00:14:23,280
type errors from function where you

00:14:20,670 --> 00:14:29,340
would call like a function with too few

00:14:23,280 --> 00:14:31,290
arguments or whatever but um so still

00:14:29,340 --> 00:14:34,200
like I hacked it together in two days

00:14:31,290 --> 00:14:38,190
and I still drank beer and like so

00:14:34,200 --> 00:14:40,590
there's it didn't take a lot of time and

00:14:38,190 --> 00:14:44,960
so we will work we will definitely work

00:14:40,590 --> 00:14:49,670
on that like to have a proper proper

00:14:44,960 --> 00:14:54,900
type errors for all that kind of cases

00:14:49,670 --> 00:14:56,910
um and here here is what I worked what I

00:14:54,900 --> 00:14:58,890
worked on like this is the slide that I

00:14:56,910 --> 00:15:03,540
wanted to start with originally but then

00:14:58,890 --> 00:15:05,160
like I kind of changed it and so this is

00:15:03,540 --> 00:15:08,240
what part what what Jedi really does

00:15:05,160 --> 00:15:11,910
well it's like oh we have stirred dot

00:15:08,240 --> 00:15:14,040
upper and well we forget a pee or

00:15:11,910 --> 00:15:16,350
something and then it kind of reports it

00:15:14,040 --> 00:15:19,440
to us the same for like a function that

00:15:16,350 --> 00:15:22,530
is called with with like an argument

00:15:19,440 --> 00:15:25,530
with like three arguments instead of two

00:15:22,530 --> 00:15:28,800
like that kind of stuff as is working

00:15:25,530 --> 00:15:30,360
really well now and that's that was my

00:15:28,800 --> 00:15:35,040
focus in that kind of in that month

00:15:30,360 --> 00:15:37,740
before a euro Python and which is which

00:15:35,040 --> 00:15:39,840
is pretty cool because and this is not

00:15:37,740 --> 00:15:43,500
like this is a very simple example it

00:15:39,840 --> 00:15:45,630
works unlike pretty crazy stuff I I

00:15:43,500 --> 00:15:47,910
cannot really show the examples because

00:15:45,630 --> 00:15:50,070
it's just like very long Python code and

00:15:47,910 --> 00:15:53,070
unlike but you can just take the example

00:15:50,070 --> 00:15:54,780
from before with get at ER and like play

00:15:53,070 --> 00:15:59,450
around with it and it will still find

00:15:54,780 --> 00:15:59,450
some some error um

00:16:00,680 --> 00:16:06,560
so we will just give you an example I

00:16:04,220 --> 00:16:09,260
like I thought well I don't really have

00:16:06,560 --> 00:16:12,440
time to test to test against all the

00:16:09,260 --> 00:16:15,560
libraries or whatever but I just like a

00:16:12,440 --> 00:16:17,899
week ago or so preparing the talk I

00:16:15,560 --> 00:16:19,520
thought well I could just take the most

00:16:17,899 --> 00:16:23,180
well-known library that probably doesn't

00:16:19,520 --> 00:16:25,459
have any bucks and so I took request

00:16:23,180 --> 00:16:27,980
which which is like four thousand lines

00:16:25,459 --> 00:16:32,180
like you are lip three is not included

00:16:27,980 --> 00:16:36,500
here and and like scanning it takes 15

00:16:32,180 --> 00:16:39,410
seconds it yields 51 errors and like 22

00:16:36,500 --> 00:16:41,570
errors of those are errors that you want

00:16:39,410 --> 00:16:45,459
like its compatibility code like imports

00:16:41,570 --> 00:16:49,610
from i don't know like python to imports

00:16:45,459 --> 00:16:52,520
because I scan it in Python 3 and so

00:16:49,610 --> 00:16:54,230
that kind of stuff and so that's fine if

00:16:52,520 --> 00:16:57,350
you see those errors and there's like a

00:16:54,230 --> 00:16:59,959
few bucks and pretty much everything

00:16:57,350 --> 00:17:01,910
else is related to mix in class classes

00:16:59,959 --> 00:17:04,730
now mixing classes is something that I

00:17:01,910 --> 00:17:08,780
didn't even think about before but

00:17:04,730 --> 00:17:11,589
mixing classes in Jedi is gonna be kind

00:17:08,780 --> 00:17:15,829
of hard to understand because you you

00:17:11,589 --> 00:17:18,170
have this mix in class and the attribute

00:17:15,829 --> 00:17:20,780
is defined in a class that is different

00:17:18,170 --> 00:17:23,900
than it than the one it's cold it's used

00:17:20,780 --> 00:17:26,929
in and so that's kind of special but we

00:17:23,900 --> 00:17:30,920
might work around it I don't know but

00:17:26,929 --> 00:17:33,410
it's pretty cool like you got 50 errors

00:17:30,920 --> 00:17:35,300
Lorelai let's let's say you get twenty

00:17:33,410 --> 00:17:37,760
two errors that's not a lot of false

00:17:35,300 --> 00:17:40,580
positives and to show you that you still

00:17:37,760 --> 00:17:45,050
get errors if there's a mistake I kind

00:17:40,580 --> 00:17:51,170
of prepared this now no I did prepare

00:17:45,050 --> 00:17:58,640
this but so if my presentation would

00:17:51,170 --> 00:18:05,870
close but yeah so I don't see it on my

00:17:58,640 --> 00:18:08,919
screen so i have to find it so we can

00:18:05,870 --> 00:18:11,809
just like first let's let's just scan it

00:18:08,919 --> 00:18:12,820
sorry it's very small i forgot to change

00:18:11,809 --> 00:18:16,630
the size

00:18:12,820 --> 00:18:22,269
and so scanning it takes like a few

00:18:16,630 --> 00:18:26,200
seconds this module and doesn't yield an

00:18:22,269 --> 00:18:28,899
error we change something like this here

00:18:26,200 --> 00:18:37,779
time see time that encode remove

00:18:28,899 --> 00:18:41,350
something so we have an error now right

00:18:37,779 --> 00:18:52,779
like it really it so it's not just a

00:18:41,350 --> 00:18:56,080
joke it works yeah you can but that it's

00:18:52,779 --> 00:18:58,509
the worst thing ever like okay it's even

00:18:56,080 --> 00:19:03,840
worse than numpy I think because Jedi is

00:18:58,509 --> 00:19:07,240
just so complic the whole idea of

00:19:03,840 --> 00:19:09,700
running Jedi on chat I is is basically

00:19:07,240 --> 00:19:12,129
that you run recursions on recursions

00:19:09,700 --> 00:19:14,799
and that's very complicated to

00:19:12,129 --> 00:19:20,649
understand but it works like Jedi does

00:19:14,799 --> 00:19:23,080
kind of limitation in recursions we're

00:19:20,649 --> 00:19:26,139
like oh if you're like 10 levels deep

00:19:23,080 --> 00:19:27,970
just ignore the rest and like because

00:19:26,139 --> 00:19:29,889
you cannot you cannot follow everything

00:19:27,970 --> 00:19:31,990
there's just no time for that in

00:19:29,889 --> 00:19:38,980
auto-completion we might change that for

00:19:31,990 --> 00:19:45,759
static analysis but yeah and so let's

00:19:38,980 --> 00:19:48,639
just do one other yeah let's just do

00:19:45,759 --> 00:19:50,830
another one what did I change I don't

00:19:48,639 --> 00:20:00,490
know let's just don't change this

00:19:50,830 --> 00:20:03,210
function I hope it works yeah like we we

00:20:00,490 --> 00:20:06,580
get some errors and like you can also

00:20:03,210 --> 00:20:10,000
like now you would also get I flakes

00:20:06,580 --> 00:20:14,830
also yields errors down there so let's

00:20:10,000 --> 00:20:19,389
undo it and let's remove this parameter

00:20:14,830 --> 00:20:20,740
and so apart from that user name thing

00:20:19,389 --> 00:20:22,960
that is not there you will not see an

00:20:20,740 --> 00:20:26,620
error but let's see the output output

00:20:22,960 --> 00:20:28,330
here so it will tell you more because

00:20:26,620 --> 00:20:30,940
it will tell you well yeah the user name

00:20:28,330 --> 00:20:34,059
is not defined like pi PI flights to us

00:20:30,940 --> 00:20:37,210
and but it then also tells you kind of

00:20:34,059 --> 00:20:39,850
in it in a typical Python way Oh basic

00:20:37,210 --> 00:20:42,820
auth string takes exactly one arguments

00:20:39,850 --> 00:20:48,190
but two are given its and that's pretty

00:20:42,820 --> 00:20:57,430
nice I would like to but we're I'm done

00:20:48,190 --> 00:21:03,820
now with that as so and I want to finish

00:20:57,430 --> 00:21:09,929
here so what are we gonna do in the

00:21:03,820 --> 00:21:17,350
future why is that not working yeah

00:21:09,929 --> 00:21:19,270
libreoff is for the win so um we we will

00:21:17,350 --> 00:21:22,110
improve static analysis that's one of

00:21:19,270 --> 00:21:27,580
our goals now for like the like the next

00:21:22,110 --> 00:21:31,150
few weeks at least and then there's like

00:21:27,580 --> 00:21:33,370
the goal of adoption in mainstream IDs

00:21:31,150 --> 00:21:36,040
which is already ongoing like spider is

00:21:33,370 --> 00:21:39,940
is doing it it with guy called Steven

00:21:36,040 --> 00:21:42,220
Sylvester and there's pie def is

00:21:39,940 --> 00:21:44,020
interested and so one of the things

00:21:42,220 --> 00:21:47,670
we're going to do if we have enough

00:21:44,020 --> 00:21:51,130
manpower is refactoring and then there's

00:21:47,670 --> 00:21:53,740
one thing I'm really excited about it's

00:21:51,130 --> 00:21:57,610
the integration of Sebastian crafts

00:21:53,740 --> 00:22:00,090
Python type annotator which adds kind of

00:21:57,610 --> 00:22:03,970
a way to understand numpy and and

00:22:00,090 --> 00:22:09,580
built-in types way better he kind of

00:22:03,970 --> 00:22:12,100
runs a test suite and hacks the Python

00:22:09,580 --> 00:22:16,260
interpreter to kind of leak every input

00:22:12,100 --> 00:22:19,330
output type a name so you kind of know

00:22:16,260 --> 00:22:21,220
what goes in and what comes out in built

00:22:19,330 --> 00:22:23,290
in libraries so that's going to be at

00:22:21,220 --> 00:22:25,120
euro Python Springs Road aren't going to

00:22:23,290 --> 00:22:27,100
do that we're at least three people so

00:22:25,120 --> 00:22:33,850
if you'd like to join you're very

00:22:27,100 --> 00:22:36,490
welcome and there's like my small future

00:22:33,850 --> 00:22:39,640
I've been I've been workin it on it for

00:22:36,490 --> 00:22:40,050
quite a long time now and it starts to

00:22:39,640 --> 00:22:43,740
get

00:22:40,050 --> 00:22:48,990
financially unsustainable because it's

00:22:43,740 --> 00:22:52,080
just my savings there vanishing and but

00:22:48,990 --> 00:22:55,890
if you're a company in like you you want

00:22:52,080 --> 00:22:58,160
to have really good static analysis well

00:22:55,890 --> 00:23:01,400
maybe you want to hire me or something

00:22:58,160 --> 00:23:07,080
and yeah alternatives are either

00:23:01,400 --> 00:23:13,950
Kickstarter or more Japanese guys so and

00:23:07,080 --> 00:23:16,050
yeah so here's my contacts and there's

00:23:13,950 --> 00:23:19,200
two things I wanted to say the first is

00:23:16,050 --> 00:23:22,800
like test well and often there's talks

00:23:19,200 --> 00:23:25,250
pie test coverage pie and like for open

00:23:22,800 --> 00:23:28,680
source stuff there's also Travis and

00:23:25,250 --> 00:23:32,100
which are just awesome tools and if you

00:23:28,680 --> 00:23:34,440
have like like a library that that has a

00:23:32,100 --> 00:23:38,040
big test coverage that's just really

00:23:34,440 --> 00:23:40,290
cool and and create libraries if they

00:23:38,040 --> 00:23:42,930
don't exist so that's that's really a

00:23:40,290 --> 00:23:45,180
strength of the of the Python ecosystem

00:23:42,930 --> 00:23:49,500
if you ever thought and something should

00:23:45,180 --> 00:23:51,510
be better change it and so yeah we might

00:23:49,500 --> 00:23:56,630
have time for a question but probably

00:23:51,510 --> 00:23:56,630
not we have so thank you very much

00:24:03,720 --> 00:24:11,320
we've got time for one question I should

00:24:06,460 --> 00:24:14,380
think oh and he repeat the question that

00:24:11,320 --> 00:24:17,790
day yeah so he said he asked what how

00:24:14,380 --> 00:24:20,770
well would it work with when and then

00:24:17,790 --> 00:24:22,900
like I wrote in a plug-in for vim called

00:24:20,770 --> 00:24:26,080
shed Ivan which is working pretty well

00:24:22,900 --> 00:24:29,830
and there's another plug-in called you

00:24:26,080 --> 00:24:31,510
complete me which is using Jedi and so

00:24:29,830 --> 00:24:33,370
they are working really well there's

00:24:31,510 --> 00:24:35,590
like three plug-ins for emacs there's

00:24:33,370 --> 00:24:41,309
two plugins for subline there's plug-ins

00:24:35,590 --> 00:24:46,090
for a lot of editors and so yeah I guess

00:24:41,309 --> 00:24:48,640
that's it so um go have a good time

00:24:46,090 --> 00:24:53,640
thank you for coming remember

00:24:48,640 --> 00:24:53,640
Afghanistan is beautiful and thank you

00:24:57,870 --> 00:24:59,930

YouTube URL: https://www.youtube.com/watch?v=yPSmj2kmX8g


