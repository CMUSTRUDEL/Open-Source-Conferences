Title: Angel Ramboi - Gamers do REST
Publication date: 2015-04-18
Playlist: EuroPython 2014
Description: 
	Angel Ramboi - Gamers do REST
[EuroPython 2014]
[22 July 2014]

An overview (sprinkled with implementation details and solutions to issues we encountered) of how Demonware uses Python and Django to build RESTful APIs and how we manage to reliably serve millions of gamers all over the world that play Activision-Blizzard’s successful franchises Call of Duty and Skylanders.
Topics the presentation will touch: tech stack overview; API design; configuration handling; middleware usage for logging, metrics and error handling; authentication/authorization.

-----

An overview (sprinkled with implementation details and solutions to issues we encountered) of how Demonware uses Python and Django to build RESTful APIs and how we manage to reliably serve millions of gamers all over the world that play Activision-Blizzard’s successful franchises Call of Duty and Skylanders.

Topics the presentation will touch:

- tech stack overview
- API design
- configuration handling
- middleware usage for logging, metrics and error handling
- authentication/authorization
Captions: 
	00:00:14,700 --> 00:00:23,610
welcome it's 3pm and not on stages angel

00:00:19,170 --> 00:00:26,930
run boy and telling us about restful api

00:00:23,610 --> 00:00:26,930
is in the gaming industry

00:00:33,780 --> 00:00:45,429
hello everyone can hear me so is that

00:00:41,050 --> 00:00:48,689
statement accurate not really and I'm

00:00:45,429 --> 00:00:51,159
going to expand on that in just a moment

00:00:48,689 --> 00:00:53,619
my name is Angela and I work for the

00:00:51,159 --> 00:00:56,140
most awesome company in the world demon

00:00:53,619 --> 00:00:59,260
where of course the movie is based in

00:00:56,140 --> 00:01:01,510
Ireland and when I moved there I had to

00:00:59,260 --> 00:01:08,110
adapt fast in order to survive in those

00:01:01,510 --> 00:01:10,060
foreign lands this is my solution demo

00:01:08,110 --> 00:01:12,450
is an Activision Blizzard subsidiary we

00:01:10,060 --> 00:01:15,340
have offices in w Vancouver in Shanghai

00:01:12,450 --> 00:01:19,229
we're on 200 people but you like to keep

00:01:15,340 --> 00:01:22,929
the startup ish field to the company

00:01:19,229 --> 00:01:24,580
what do we do well basically can be

00:01:22,929 --> 00:01:26,890
summed up as straight from one

00:01:24,580 --> 00:01:29,080
recruiting book when able game us to

00:01:26,890 --> 00:01:31,060
fight one another and then shoot each

00:01:29,080 --> 00:01:35,110
other in the face and we're pretty good

00:01:31,060 --> 00:01:37,149
at it what we actually do is provide

00:01:35,110 --> 00:01:40,629
back-end services for Activision game

00:01:37,149 --> 00:01:44,580
studios for leaderboards matchmaking

00:01:40,629 --> 00:01:48,280
anti-cheat accounts management and more

00:01:44,580 --> 00:01:50,590
we have like 70 plus services that serve

00:01:48,280 --> 00:01:53,550
our past games and also upcoming games

00:01:50,590 --> 00:01:59,229
like Call of Duty advanced warfare and

00:01:53,550 --> 00:02:00,879
destiny scrub there and of course we're

00:01:59,229 --> 00:02:02,920
hiring so if you're interested in what

00:02:00,879 --> 00:02:06,250
I'm about to show you please come talk

00:02:02,920 --> 00:02:11,980
to me afterwards so back to our previous

00:02:06,250 --> 00:02:14,890
slide is this statement accurate well as

00:02:11,980 --> 00:02:16,480
you can see for more of our graphs the

00:02:14,890 --> 00:02:18,310
count laser count doesn't come even

00:02:16,480 --> 00:02:22,480
close to zero in with over a hundred

00:02:18,310 --> 00:02:25,840
billion API calls per month well that's

00:02:22,480 --> 00:02:28,239
an API is dreamland and these guys get

00:02:25,840 --> 00:02:30,400
really excited during lunchtime I mean I

00:02:28,239 --> 00:02:32,290
heard HR offices around the world

00:02:30,400 --> 00:02:35,530
experience the spike in sick days

00:02:32,290 --> 00:02:39,159
requests in November I want to tell you

00:02:35,530 --> 00:02:41,370
that this is just a coincidence it's not

00:02:39,159 --> 00:02:41,370
us

00:02:43,240 --> 00:02:51,190
doc overview I'm going to touch on

00:02:47,550 --> 00:02:53,520
topics ranging from api user design to

00:02:51,190 --> 00:02:59,050
authentication and authorization so

00:02:53,520 --> 00:03:02,310
let's get to it why rest first

00:02:59,050 --> 00:03:04,890
interoperability our aps must be

00:03:02,310 --> 00:03:08,200
available to gain clients websites

00:03:04,890 --> 00:03:09,970
companion apps and by using the right

00:03:08,200 --> 00:03:11,830
protocol it should be in our case and

00:03:09,970 --> 00:03:14,890
the rest principles we can achieve that

00:03:11,830 --> 00:03:17,380
level of interoperability we need second

00:03:14,890 --> 00:03:19,540
of all sick scalability from all the

00:03:17,380 --> 00:03:21,010
architectures I've came across a rest

00:03:19,540 --> 00:03:23,200
looks like the only one that's truly

00:03:21,010 --> 00:03:26,320
web-scale basically can look at the web

00:03:23,200 --> 00:03:28,270
as a huge REST API and your browser is

00:03:26,320 --> 00:03:30,670
the client that consumes it so you have

00:03:28,270 --> 00:03:33,220
your entry point your bookmark use each

00:03:30,670 --> 00:03:35,800
diverts to talk to web pages you have

00:03:33,220 --> 00:03:38,200
links from one page from a page to

00:03:35,800 --> 00:03:40,060
another for more research to another you

00:03:38,200 --> 00:03:42,130
have your eyes that define resources and

00:03:40,060 --> 00:03:44,230
also your browser interprets those

00:03:42,130 --> 00:03:46,990
resources based on hypertext and meta

00:03:44,230 --> 00:03:49,840
data so I think it's safe to say that

00:03:46,990 --> 00:03:54,250
using a restful architecture style to

00:03:49,840 --> 00:03:56,590
your API design for API design will make

00:03:54,250 --> 00:04:02,770
your services easier to scale on the

00:03:56,590 --> 00:04:05,070
long run anyone who ever worked in API

00:04:02,770 --> 00:04:07,210
probably heard of rye fielding species

00:04:05,070 --> 00:04:10,630
it's an interesting read and when you

00:04:07,210 --> 00:04:14,200
were done with it you're left astonished

00:04:10,630 --> 00:04:16,870
by the elegant concerts outlining it you

00:04:14,200 --> 00:04:20,560
wanted you to those concepts and you'll

00:04:16,870 --> 00:04:22,000
probably succeed but then you realize

00:04:20,560 --> 00:04:23,530
that whatever you'll do your clients

00:04:22,000 --> 00:04:26,110
will misuse your otherwise perfect

00:04:23,530 --> 00:04:28,390
creation in the gaming industry things

00:04:26,110 --> 00:04:30,250
get more complicated you have custom

00:04:28,390 --> 00:04:32,830
protocols because everyone has to do

00:04:30,250 --> 00:04:36,940
their stuff you have mandatory libraries

00:04:32,830 --> 00:04:39,400
in SD case you have multiple languages

00:04:36,940 --> 00:04:41,830
and platforms c-sharp net Java you name

00:04:39,400 --> 00:04:45,190
it and documentation goes from okay to

00:04:41,830 --> 00:04:48,360
non-existent most game developers have

00:04:45,190 --> 00:04:51,760
little to no contact with web services

00:04:48,360 --> 00:04:54,220
over the most time of their careers and

00:04:51,760 --> 00:04:57,009
some user education sometimes it's

00:04:54,220 --> 00:05:00,460
needed like even for simple things like

00:04:57,009 --> 00:05:05,680
what a Jason is or what HTTP codes mean

00:05:00,460 --> 00:05:08,289
or how to use questions only recent

00:05:05,680 --> 00:05:10,719
years the gaming industry started to

00:05:08,289 --> 00:05:16,689
embrace HTTP arrest like services that

00:05:10,719 --> 00:05:20,889
make life easier for us having said that

00:05:16,689 --> 00:05:23,710
our API stressful I want to say yes but

00:05:20,889 --> 00:05:26,199
even I have to admit that we don't

00:05:23,710 --> 00:05:28,449
adhere to all the principles either

00:05:26,199 --> 00:05:32,229
because of business constraints legacy

00:05:28,449 --> 00:05:33,520
logic or backwards compatibility the

00:05:32,229 --> 00:05:35,620
important thing that is that we're

00:05:33,520 --> 00:05:37,659
moving in the direction and we are

00:05:35,620 --> 00:05:43,509
encouraging our clients to follow suit

00:05:37,659 --> 00:05:46,449
one step at a time so design-wise will

00:05:43,509 --> 00:05:48,399
get post put delete verbs for a big

00:05:46,449 --> 00:05:50,469
crowd we searched before the

00:05:48,399 --> 00:05:53,199
communication protocol and json for a

00:05:50,469 --> 00:05:56,379
presentation and every time we do an API

00:05:53,199 --> 00:05:58,689
design when working on design we try to

00:05:56,379 --> 00:06:04,330
be pragmatic bharati like good enough is

00:05:58,689 --> 00:06:08,349
better than perfect other things we use

00:06:04,330 --> 00:06:11,259
design-wise we have version the URL but

00:06:08,349 --> 00:06:13,719
it's mostly semantic we tend not to

00:06:11,259 --> 00:06:16,449
break backwards compatibility is mostly

00:06:13,719 --> 00:06:18,669
to tell the client that we have this set

00:06:16,449 --> 00:06:22,809
of features that it's only available in

00:06:18,669 --> 00:06:25,479
version 2 for example so we also have a

00:06:22,809 --> 00:06:27,939
camel case in JSON and query strings not

00:06:25,479 --> 00:06:31,319
in Python code are we have a mapping to

00:06:27,939 --> 00:06:34,930
underscore for that we standardize dates

00:06:31,319 --> 00:06:44,169
also links to other resources and of

00:06:34,930 --> 00:06:46,059
course it's human readable just using

00:06:44,169 --> 00:06:48,879
rest is not enough to run your services

00:06:46,059 --> 00:06:51,159
of scale you need to have the right

00:06:48,879 --> 00:06:53,889
processing tools in place so I'm going

00:06:51,159 --> 00:06:58,779
to walk you through how we do it Adam or

00:06:53,889 --> 00:07:01,209
I will scrum and Kanban depending on

00:06:58,779 --> 00:07:03,999
what works for the team or the rigid

00:07:01,209 --> 00:07:06,759
cycle we also have automatic builds that

00:07:03,999 --> 00:07:10,590
test everything that's merging to master

00:07:06,759 --> 00:07:14,370
and this against also our other systems

00:07:10,590 --> 00:07:17,130
so so everything is all right everything

00:07:14,370 --> 00:07:18,630
to be all right demon your services use

00:07:17,130 --> 00:07:23,190
a lot of different texts so I'm going to

00:07:18,630 --> 00:07:27,620
focus only what what we use for AP is so

00:07:23,190 --> 00:07:32,730
if I 27 in jan 16 we also use my sequel

00:07:27,620 --> 00:07:34,440
a django this year some people were

00:07:32,730 --> 00:07:36,120
a surprise that we still use my sequel

00:07:34,440 --> 00:07:38,790
in production and that it skills really

00:07:36,120 --> 00:07:41,280
well for us so at one point there was

00:07:38,790 --> 00:07:43,440
even a show hands and about ninety

00:07:41,280 --> 00:07:47,250
ninety-five percent of the people were

00:07:43,440 --> 00:07:49,680
using postgresql so infuse here at your

00:07:47,250 --> 00:07:52,940
Python how many people here use my

00:07:49,680 --> 00:07:52,940
sequel can you raise your hands please

00:07:53,540 --> 00:08:07,080
postgresql in production about the same

00:07:59,630 --> 00:08:10,560
MongoDB ok so our reasoning is that we

00:08:07,080 --> 00:08:13,740
can find enough browse for other sequel

00:08:10,560 --> 00:08:17,010
databases that would want such a big

00:08:13,740 --> 00:08:19,170
migration for our infrastructure and my

00:08:17,010 --> 00:08:23,310
sequence is doing some really good

00:08:19,170 --> 00:08:26,820
developments in the last few years so it

00:08:23,310 --> 00:08:29,760
works pretty well for us as you ah sorry

00:08:26,820 --> 00:08:34,050
we also use st. isaac's in a patch and

00:08:29,760 --> 00:08:36,720
bought whiskey as you can see we don't

00:08:34,050 --> 00:08:40,440
use anything flashy our lead is simple

00:08:36,720 --> 00:08:42,720
reliable and easily scalable our

00:08:40,440 --> 00:08:44,910
projects are built with sharding mind

00:08:42,720 --> 00:08:47,880
also our dev environment and our builds

00:08:44,910 --> 00:08:49,620
run that the unit tests acceptance tests

00:08:47,880 --> 00:08:54,600
in all artists rest against shouting

00:08:49,620 --> 00:08:58,530
environment environment our techs tax

00:08:54,600 --> 00:09:00,960
our layout also saves us from a lot of

00:08:58,530 --> 00:09:05,160
sticks like related issues most of the

00:09:00,960 --> 00:09:08,160
times and let us focus on real business

00:09:05,160 --> 00:09:10,440
problems reliability something we take

00:09:08,160 --> 00:09:12,360
really seriously as you can see compared

00:09:10,440 --> 00:09:17,190
with other big game launches in the past

00:09:12,360 --> 00:09:20,600
few years for code we use git and github

00:09:17,190 --> 00:09:23,480
Enterprise we use feature branches

00:09:20,600 --> 00:09:26,959
Master is always deployable

00:09:23,480 --> 00:09:30,139
we do pull requests for team review and

00:09:26,959 --> 00:09:33,800
one world the builds all the features

00:09:30,139 --> 00:09:37,899
are in and the builds pass we bag it tag

00:09:33,800 --> 00:09:40,970
it and ship it we use our teams for our

00:09:37,899 --> 00:09:43,760
packaging individual package of our

00:09:40,970 --> 00:09:48,410
dependencies and match or apple for

00:09:43,760 --> 00:09:52,850
dependencies I'm going to talk about a

00:09:48,410 --> 00:09:55,010
bit about schema migrations so schema

00:09:52,850 --> 00:09:56,899
migration are straightforward when

00:09:55,010 --> 00:10:00,350
you're working with huge amounts of data

00:09:56,899 --> 00:10:02,180
so they comes done when you need to do a

00:10:00,350 --> 00:10:04,670
schema change but you cannot afford any

00:10:02,180 --> 00:10:08,360
downtime and when you have lots of lots

00:10:04,670 --> 00:10:11,060
of Records an altar can mean table lock

00:10:08,360 --> 00:10:15,079
and when you do table lock you're going

00:10:11,060 --> 00:10:18,170
to have a bad time for this we use

00:10:15,079 --> 00:10:20,690
percona toolkit which is a clever set of

00:10:18,170 --> 00:10:23,060
scripts created by / cannot deal with

00:10:20,690 --> 00:10:24,889
these kinds of situations we also use

00:10:23,060 --> 00:10:26,899
perkin on my sequel for Kuno production

00:10:24,889 --> 00:10:31,190
environment but a tool should work for

00:10:26,899 --> 00:10:34,459
pretty much any my C curve and so what

00:10:31,190 --> 00:10:37,550
does the tool does behind the scenes it

00:10:34,459 --> 00:10:40,730
creates a really alter table a copy of

00:10:37,550 --> 00:10:43,639
the original table then sets up triggers

00:10:40,730 --> 00:10:46,010
for insert update delete on the old

00:10:43,639 --> 00:10:48,440
table towards the new table so

00:10:46,010 --> 00:10:51,230
everything is in sync you have for every

00:10:48,440 --> 00:10:54,740
operation you have consistent data then

00:10:51,230 --> 00:10:56,779
copies the data over in batches while in

00:10:54,740 --> 00:10:59,540
the meantime monitors the slave lag and

00:10:56,779 --> 00:11:02,449
justice the batch size or just sub

00:10:59,540 --> 00:11:05,839
starts the operation to let the slave

00:11:02,449 --> 00:11:07,310
get in sync with master and at the end

00:11:05,839 --> 00:11:09,260
just renamed the table which is an

00:11:07,310 --> 00:11:12,769
operation that takes fractions of a

00:11:09,260 --> 00:11:16,310
second the only downside of this process

00:11:12,769 --> 00:11:18,829
that uses a lot of space as it delays

00:11:16,310 --> 00:11:20,750
all the data in the tables but aren't

00:11:18,829 --> 00:11:23,449
that I couldn't find anything in our

00:11:20,750 --> 00:11:31,699
other stuff good details from using this

00:11:23,449 --> 00:11:35,990
tool this is how our configuration file

00:11:31,699 --> 00:11:38,510
looks like so why ammo

00:11:35,990 --> 00:11:41,330
first of all cross project we're not a

00:11:38,510 --> 00:11:43,339
pint of nolan shop and we need to be

00:11:41,330 --> 00:11:45,800
consistent with configuration files

00:11:43,339 --> 00:11:49,089
across the board also llamo is just as

00:11:45,800 --> 00:11:53,300
difficult as readable as Python code and

00:11:49,089 --> 00:11:57,350
it has to be reviewed by people who

00:11:53,300 --> 00:11:59,779
don't know python also validation we

00:11:57,350 --> 00:12:02,420
dynamically build the Django of settings

00:11:59,779 --> 00:12:05,089
module at runtime from the loaded llamo

00:12:02,420 --> 00:12:08,029
file so we check for missing configs any

00:12:05,089 --> 00:12:11,510
valid values at this point this way if

00:12:08,029 --> 00:12:15,050
something is not right we know before

00:12:11,510 --> 00:12:17,510
the actual setting is used not when we

00:12:15,050 --> 00:12:22,430
know when loaded not when it's used in

00:12:17,510 --> 00:12:24,200
the app this is a simple example of the

00:12:22,430 --> 00:12:27,529
validation what our validation library

00:12:24,200 --> 00:12:30,140
does it is for type of valid entry it

00:12:27,529 --> 00:12:33,980
has default and description just to give

00:12:30,140 --> 00:12:36,200
you an idea on the subject of violation

00:12:33,980 --> 00:12:39,279
to validate data sent by our clients

00:12:36,200 --> 00:12:41,480
with json schema and it's pretty awesome

00:12:39,279 --> 00:12:45,140
if you haven't use it i really recommend

00:12:41,480 --> 00:12:47,930
it as you can see from this example you

00:12:45,140 --> 00:12:52,040
can do all kind of fun stuff with it you

00:12:47,930 --> 00:12:54,820
can have restriction by type minimum

00:12:52,040 --> 00:12:58,370
maximum two integers pattern matching

00:12:54,820 --> 00:13:03,020
you can also have max minimum length for

00:12:58,370 --> 00:13:06,110
Strings required fields you can also

00:13:03,020 --> 00:13:12,020
have different errors depending on what

00:13:06,110 --> 00:13:13,520
kind of exception is encountered and the

00:13:12,020 --> 00:13:16,490
cool part about this is that in your

00:13:13,520 --> 00:13:19,220
Python code you can see all the primary

00:13:16,490 --> 00:13:22,130
validation related to an end point or to

00:13:19,220 --> 00:13:28,130
a resource in one place you don't have

00:13:22,130 --> 00:13:30,500
to jump hoops or really dig around just

00:13:28,130 --> 00:13:34,220
one thing to mention we don't use this

00:13:30,500 --> 00:13:36,320
for heavy business logic validation it

00:13:34,220 --> 00:13:42,070
can get messy and it's harder to

00:13:36,320 --> 00:13:45,320
maintain the long run for error handling

00:13:42,070 --> 00:13:48,199
it's where Django middleware shines so

00:13:45,320 --> 00:13:49,290
in our view in your view just raise the

00:13:48,199 --> 00:13:51,029
exception in the middle

00:13:49,290 --> 00:13:53,370
we'll catch it in this process exception

00:13:51,029 --> 00:13:55,800
method and then can wrap it in a nice

00:13:53,370 --> 00:13:59,790
HTTP response to send back to a client

00:13:55,800 --> 00:14:01,740
like this so you might have to do some

00:13:59,790 --> 00:14:03,690
adjustment depending what your client

00:14:01,740 --> 00:14:06,449
needs or what you need but that is

00:14:03,690 --> 00:14:10,430
basically it's pretty we don't do it in

00:14:06,449 --> 00:14:15,029
fancy there you can also see we use

00:14:10,430 --> 00:14:17,160
article approach to our errors and also

00:14:15,029 --> 00:14:20,160
to our error codes so that's where most

00:14:17,160 --> 00:14:22,860
of the design work goes into on how to

00:14:20,160 --> 00:14:27,470
trace back from those errors to the

00:14:22,860 --> 00:14:29,970
actual thing that happen for logging

00:14:27,470 --> 00:14:32,790
syslog relays are logs to an aggregator

00:14:29,970 --> 00:14:34,550
built on open source tools in the end

00:14:32,790 --> 00:14:37,529
you get something like you see here

00:14:34,550 --> 00:14:42,360
wheels logstash likes search and cabana

00:14:37,529 --> 00:14:44,699
for front end these things are somewhat

00:14:42,360 --> 00:14:47,310
amazing this slide with once in a while

00:14:44,699 --> 00:14:50,130
you can see exactly that something's

00:14:47,310 --> 00:14:51,720
happening need to act of course you

00:14:50,130 --> 00:14:54,300
don't spend all day looking at these

00:14:51,720 --> 00:14:57,329
graphs we have a result to that for

00:14:54,300 --> 00:14:58,949
years for us but looking at them you can

00:14:57,329 --> 00:15:01,260
have an overview of the frequency of the

00:14:58,949 --> 00:15:03,329
earth and also the timeframe when that

00:15:01,260 --> 00:15:04,769
happened for example deployment an event

00:15:03,329 --> 00:15:08,790
you have a promotion for a game or

00:15:04,769 --> 00:15:12,089
something that we tend to keep the needs

00:15:08,790 --> 00:15:15,750
of production as if a post development

00:15:12,089 --> 00:15:17,819
when we format or law or logs the logs

00:15:15,750 --> 00:15:20,730
need to be concise complete and contain

00:15:17,819 --> 00:15:23,430
context think about it this way if you

00:15:20,730 --> 00:15:25,339
put a log in a bug report would you

00:15:23,430 --> 00:15:29,399
understand immediately a first class

00:15:25,339 --> 00:15:32,730
where they show curtain why so we try to

00:15:29,399 --> 00:15:35,189
guide us by those principles a brief

00:15:32,730 --> 00:15:39,060
example of logging edge case you have

00:15:35,189 --> 00:15:43,910
the level of the error the project the

00:15:39,060 --> 00:15:49,079
app so you can search be much easily

00:15:43,910 --> 00:15:55,589
based on keywords from all the logs that

00:15:49,079 --> 00:15:59,010
you get from our services besides of

00:15:55,589 --> 00:16:01,740
logging use matrix lots of metrics our

00:15:59,010 --> 00:16:02,640
matrix central aggregated are verified

00:16:01,740 --> 00:16:04,530
source them and

00:16:02,640 --> 00:16:07,260
then sends them to graphite and you

00:16:04,530 --> 00:16:09,240
fight when they get the visual image you

00:16:07,260 --> 00:16:11,220
see here so what's the difference

00:16:09,240 --> 00:16:12,510
between logging and matrix wait we

00:16:11,220 --> 00:16:15,750
metrics to get different information

00:16:12,510 --> 00:16:18,630
than we logging you can have like how

00:16:15,750 --> 00:16:22,950
many mails sent or failed a skilled

00:16:18,630 --> 00:16:25,560
query times slave lack overtime response

00:16:22,950 --> 00:16:28,950
times users creation of time user

00:16:25,560 --> 00:16:32,840
deletion of a time and you notice normal

00:16:28,950 --> 00:16:32,840
is like that right away in the mail

00:16:32,930 --> 00:16:38,790
again Django middleware to the rescue

00:16:36,290 --> 00:16:42,180
for example for this simple example you

00:16:38,790 --> 00:16:43,920
have a we record in the request the

00:16:42,180 --> 00:16:46,770
start time of the request and then in

00:16:43,920 --> 00:16:49,140
the response we do a diff and we sent

00:16:46,770 --> 00:16:51,290
the request time to our matrix

00:16:49,140 --> 00:16:55,980
aggregator it's pretty straightforward

00:16:51,290 --> 00:16:58,200
is nothing no rocket science there we

00:16:55,980 --> 00:17:00,840
can also add here for example a process

00:16:58,200 --> 00:17:05,370
exception method and you have metrics

00:17:00,840 --> 00:17:08,220
for your exceptions you can log C matrix

00:17:05,370 --> 00:17:17,750
of different types of exception over

00:17:08,220 --> 00:17:17,750
time oh sorry

00:17:22,480 --> 00:17:27,850
fortification authorization use JSON web

00:17:24,549 --> 00:17:30,340
tokens JSON web tokens contain claims

00:17:27,850 --> 00:17:34,059
that the assistant can use to access

00:17:30,340 --> 00:17:35,950
resources eat bones we used two types of

00:17:34,059 --> 00:17:38,140
JSON web tokens we have Jason Lloyd

00:17:35,950 --> 00:17:40,660
signature objects which are claims that

00:17:38,140 --> 00:17:43,690
are base 64 encoded but carry with them

00:17:40,660 --> 00:17:45,850
a signature for authentication angle vs.

00:17:43,690 --> 00:17:47,559
Jason Webb encryption objects which are

00:17:45,850 --> 00:17:51,610
claims that are totally encrypted with a

00:17:47,559 --> 00:17:55,510
public-private bear for that we use the

00:17:51,610 --> 00:17:58,660
gist framework created by us in open

00:17:55,510 --> 00:18:01,780
source you can find it on github and

00:17:58,660 --> 00:18:07,000
also Pippin style right on it's called

00:18:01,780 --> 00:18:10,179
jose i'm going to walk you through what

00:18:07,000 --> 00:18:11,620
how he can be used as you can see you

00:18:10,179 --> 00:18:14,650
have your claims there you have your

00:18:11,620 --> 00:18:18,549
issuer the expire time and the subject

00:18:14,650 --> 00:18:21,850
and you also have the password so just

00:18:18,549 --> 00:18:26,400
sign this is for Jason sip web signature

00:18:21,850 --> 00:18:29,020
you sign the claims you can use either

00:18:26,400 --> 00:18:31,630
synchronous or asynchronous algorithm

00:18:29,020 --> 00:18:35,290
for signing your views in this case is

00:18:31,630 --> 00:18:38,559
the syncros this is the object get get

00:18:35,290 --> 00:18:40,870
heavier payload in signature then you

00:18:38,559 --> 00:18:44,440
see rise and compact it and send it to

00:18:40,870 --> 00:18:48,090
the client and the client just like one

00:18:44,440 --> 00:18:53,140
line of code verifies it and knows ok

00:18:48,090 --> 00:18:54,970
for JSON web description objects it's

00:18:53,140 --> 00:18:59,020
pretty much the same with the difference

00:18:54,970 --> 00:19:03,130
that we use give a pub private public

00:18:59,020 --> 00:19:07,780
key pair and we encrypt it with a public

00:19:03,130 --> 00:19:10,900
key you get a slightly bigger object you

00:19:07,780 --> 00:19:17,309
see as it the client-side you decrypt it

00:19:10,900 --> 00:19:21,160
and with the private key and a habit so

00:19:17,309 --> 00:19:23,500
in summary race is awesome uses many

00:19:21,160 --> 00:19:27,720
concepts as you can but be pragmatic in

00:19:23,500 --> 00:19:30,220
your approach error logging and metrics

00:19:27,720 --> 00:19:34,240
monitoring are what makes scalable

00:19:30,220 --> 00:19:39,760
survival and scaling survival

00:19:34,240 --> 00:19:43,650
and we're hiring course and yeah that's

00:19:39,760 --> 00:19:43,650
it thank

00:19:50,730 --> 00:19:56,080
yeah thank you we have a good five

00:19:53,470 --> 00:20:04,240
minutes for Q&A there's one microphone

00:19:56,080 --> 00:20:06,400
and I'm on this side so I thank you for

00:20:04,240 --> 00:20:09,610
your talk can you talk a little bit more

00:20:06,400 --> 00:20:11,530
about the last two bits which is Jason

00:20:09,610 --> 00:20:15,970
Webb signatures and Jason Webb

00:20:11,530 --> 00:20:19,650
encryption in a sense of like how do you

00:20:15,970 --> 00:20:22,390
get how do you guys use it what is the

00:20:19,650 --> 00:20:27,490
what's the research but you did behind

00:20:22,390 --> 00:20:30,780
it DD believe this is secure is it like

00:20:27,490 --> 00:20:34,300
what are the constraints we did quite

00:20:30,780 --> 00:20:37,270
some research and we think is pretty

00:20:34,300 --> 00:20:46,780
secure for our use case so for our use

00:20:37,270 --> 00:20:48,870
cases I guess is secure enough we're

00:20:46,780 --> 00:20:53,560
going to release a new version of Jose

00:20:48,870 --> 00:20:57,970
like the next in the near future as you

00:20:53,560 --> 00:21:03,400
have more context and better security

00:20:57,970 --> 00:21:06,940
probably this will be this example be a

00:21:03,400 --> 00:21:13,990
bit updated outdated but from our

00:21:06,940 --> 00:21:17,650
research as we plan to have some some IP

00:21:13,990 --> 00:21:23,680
is more open in the future it looks like

00:21:17,650 --> 00:21:25,660
it's pretty secure if I it's I don't

00:21:23,680 --> 00:21:27,360
know I I know we can we can talk about

00:21:25,660 --> 00:21:29,740
this we can expand on this subject

00:21:27,360 --> 00:21:34,960
afterwards but it's cute is not an easy

00:21:29,740 --> 00:21:37,750
subject approach this is how we do it we

00:21:34,960 --> 00:21:40,060
can talk a lot about this one quick

00:21:37,750 --> 00:21:41,890
remark am i right Drazen web signatures

00:21:40,060 --> 00:21:44,110
and encryption are open standards right

00:21:41,890 --> 00:21:46,870
you did not invent those those are open

00:21:44,110 --> 00:21:49,090
standards or are you standards yeah I'm

00:21:46,870 --> 00:21:51,730
standards so we did not the event no

00:21:49,090 --> 00:21:54,310
okay okay so these are baseball or on

00:21:51,730 --> 00:21:58,330
standards you really library for that

00:21:54,310 --> 00:22:03,490
yeah so sorry yeah that's all so we did

00:21:58,330 --> 00:22:04,029
not invent Jason web tokens hi thank you

00:22:03,490 --> 00:22:07,450
for your toe

00:22:04,029 --> 00:22:09,639
and well we will briefly discussed this

00:22:07,450 --> 00:22:11,830
earlier just was wondering if there is a

00:22:09,639 --> 00:22:13,779
specific reason why you decided to

00:22:11,830 --> 00:22:17,710
implement your own framework rather than

00:22:13,779 --> 00:22:21,070
using a another framework utter such as

00:22:17,710 --> 00:22:24,009
a jungle as framework whole another one

00:22:21,070 --> 00:22:26,619
like for the API mean yeah you lose

00:22:24,009 --> 00:22:32,169
Django which is a frame working itself I

00:22:26,619 --> 00:22:33,729
think it's safe to say that a time when

00:22:32,169 --> 00:22:38,499
we start developing our own framework

00:22:33,729 --> 00:22:41,229
they we didn't have a lot of choices of

00:22:38,499 --> 00:22:44,799
viable choices now you have Django rest

00:22:41,229 --> 00:22:49,210
framework and tasty pie which are pretty

00:22:44,799 --> 00:22:52,570
mature back then fingers only piston

00:22:49,210 --> 00:22:55,469
which is not even maintain anymore and

00:22:52,570 --> 00:23:01,049
he didn't suit our needs at that time so

00:22:55,469 --> 00:23:01,049
that made us made up do our own thing

00:23:03,119 --> 00:23:13,929
okay more questions hi do you use

00:23:11,289 --> 00:23:17,320
anything for measuring response time or

00:23:13,929 --> 00:23:22,389
throughput of a new version of your

00:23:17,320 --> 00:23:24,700
software you mean like lo testing

00:23:22,389 --> 00:23:27,309
something that like that yeah we did

00:23:24,700 --> 00:23:30,940
blow tasting a lot but it's different we

00:23:27,309 --> 00:23:32,460
don't do I saw some companies for

00:23:30,940 --> 00:23:36,129
example when they update a new version

00:23:32,460 --> 00:23:38,200
they put part of their cluster or note

00:23:36,129 --> 00:23:39,940
of the cluster in production you see how

00:23:38,200 --> 00:23:42,249
it BK behaves the equal in production

00:23:39,940 --> 00:23:45,159
but we tend not to do that we low test

00:23:42,249 --> 00:23:46,889
before with with real machines just with

00:23:45,159 --> 00:23:49,929
the production like environment and

00:23:46,889 --> 00:23:52,599
production like requests to show the

00:23:49,929 --> 00:23:55,359
proper staging environment that you test

00:23:52,599 --> 00:23:57,039
load yeah but it's it's an exact replica

00:23:55,359 --> 00:24:05,409
of this of the production environment

00:23:57,039 --> 00:24:07,950
usually okay then that's it thank you

00:24:05,409 --> 00:24:07,950
very much again

00:24:12,690 --> 00:24:14,750

YouTube URL: https://www.youtube.com/watch?v=-gOJyNq_4ao


