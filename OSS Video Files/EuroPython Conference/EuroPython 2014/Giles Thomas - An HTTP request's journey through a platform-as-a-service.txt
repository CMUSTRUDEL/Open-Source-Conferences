Title: Giles Thomas - An HTTP request's journey through a platform-as-a-service
Publication date: 2015-04-18
Playlist: EuroPython 2014
Description: 
	Giles Thomas - An HTTP request's journey through a platform-as-a-service
[EuroPython 2014]
[23 July 2014]

PythonAnywhere hosts tens of thousands of Python web applications, with traffic ranging from a couple of hits a week to dozens of hits a second.  Hosting this many sites reliably at a reasonable cost requires a well-designed infrastructure, but it uses the same standard components as many other Python-based websites.  We've built our stack on GNU/Linux, nginx, uWSGI, Redis, and Lua -- all managed with Python.  In this talk we'll give a high-level overview of how it all works, by tracing how a request goes from the browser to the Python application and its response goes back again.  As well as showing how a fairly large deployment works, we'll give tips on scaling and share a few insights that may help people running smaller sites discover how they can speed things up.
Captions: 
	00:00:14,790 --> 00:00:22,680
the first of our speakers is going to be

00:00:19,110 --> 00:00:26,460
Giles Thomas Giles started programming

00:00:22,680 --> 00:00:28,500
python when founding a business he

00:00:26,460 --> 00:00:30,739
wanted to revolutionize the spreadsheet

00:00:28,500 --> 00:00:33,450
world by making spreadsheets

00:00:30,739 --> 00:00:37,380
programmable and then he start right to

00:00:33,450 --> 00:00:42,120
sell them to financial companies that

00:00:37,380 --> 00:00:45,090
didn't work then his team moved over to

00:00:42,120 --> 00:00:47,940
producing the python system that they

00:00:45,090 --> 00:00:52,170
wanted for people like themselves and

00:00:47,940 --> 00:00:57,660
that sold a lot better Giles is also

00:00:52,170 --> 00:01:02,310
playing the guitar today today however

00:00:57,660 --> 00:01:06,119
he is going to take you on a journey the

00:01:02,310 --> 00:01:08,790
journey of an HTTP request through a

00:01:06,119 --> 00:01:13,729
platform as a service please welcome

00:01:08,790 --> 00:01:13,729
with a hot applause Giles Thomas

00:01:17,350 --> 00:01:24,400
oh thanks for excellent introduction

00:01:19,930 --> 00:01:25,360
Thanks everyone's coming so um yeah the

00:01:24,400 --> 00:01:27,130
thing that we wrote the thing that we

00:01:25,360 --> 00:01:28,659
thought that we were going to build the

00:01:27,130 --> 00:01:30,190
Python system that we wanted as called

00:01:28,659 --> 00:01:32,409
pytho anywhere it's a platform as a

00:01:30,190 --> 00:01:34,509
service it does lots of things one thing

00:01:32,409 --> 00:01:39,190
that does is that it hosts a fair number

00:01:34,509 --> 00:01:41,470
of websites so just wanted to get a

00:01:39,190 --> 00:01:44,259
general feeling about how much people in

00:01:41,470 --> 00:01:46,810
the room know about running websites how

00:01:44,259 --> 00:01:49,659
many people here are responsible for the

00:01:46,810 --> 00:01:54,100
continued operation of a website maybe a

00:01:49,659 --> 00:01:55,600
personal blog or company pages ok so if

00:01:54,100 --> 00:01:58,990
err.number yeah there's maybe fifty

00:01:55,600 --> 00:02:00,130
percent let's say let's bring that up a

00:01:58,990 --> 00:02:04,979
little bit how many responsible for

00:02:00,130 --> 00:02:09,580
several websites okay more than ten

00:02:04,979 --> 00:02:12,310
still a few more than 100 still one more

00:02:09,580 --> 00:02:13,930
than a thousand okay I look I'm not

00:02:12,310 --> 00:02:15,100
going to keep going up because it'll be

00:02:13,930 --> 00:02:16,360
really embarrassing it'll turn out that

00:02:15,100 --> 00:02:19,510
you actually you run more websites than

00:02:16,360 --> 00:02:21,010
we do we have twenty 4241 websites

00:02:19,510 --> 00:02:23,650
running on Python anywhere as of this

00:02:21,010 --> 00:02:26,980
morning actually probably a few more by

00:02:23,650 --> 00:02:29,320
now and we've got infrastructure to run

00:02:26,980 --> 00:02:30,549
this it's a simple platforms of service

00:02:29,320 --> 00:02:31,829
infrastructure I'm going to go through a

00:02:30,549 --> 00:02:34,209
description of it pretty quickly

00:02:31,829 --> 00:02:35,590
touching on a few of the details but

00:02:34,209 --> 00:02:36,940
what I'd like to do is leave quite a lot

00:02:35,590 --> 00:02:38,680
of time for questions because I think

00:02:36,940 --> 00:02:40,750
which bits are interesting to drill down

00:02:38,680 --> 00:02:42,459
into probably come more from you guys

00:02:40,750 --> 00:02:45,459
than from me guessing on what you're

00:02:42,459 --> 00:02:47,890
going to be interested in the websites

00:02:45,459 --> 00:02:49,359
we have they range from very basic

00:02:47,890 --> 00:02:51,609
things where somebody has basically

00:02:49,359 --> 00:02:53,500
started using a particular framework so

00:02:51,609 --> 00:02:57,160
somebody here has been trying out web 2

00:02:53,500 --> 00:02:58,540
pi and you know maybe they're going to

00:02:57,160 --> 00:02:59,890
build something it'll get a visitor a

00:02:58,540 --> 00:03:02,560
day maybe they're just they're just a

00:02:59,890 --> 00:03:04,150
hobbyist experimenting the next stage is

00:03:02,560 --> 00:03:05,980
maybe sites which get a couple of

00:03:04,150 --> 00:03:07,930
hundred visitors a day this guy is

00:03:05,980 --> 00:03:09,700
learning Mandarin Chinese in a

00:03:07,930 --> 00:03:12,130
particular way he's sharing his his

00:03:09,700 --> 00:03:15,340
lessons with a few other people so a

00:03:12,130 --> 00:03:16,690
couple of hundred visitors a day we want

00:03:15,340 --> 00:03:18,609
to spend almost no resources on the

00:03:16,690 --> 00:03:20,170
first kind enough resources to keep this

00:03:18,609 --> 00:03:23,410
kind of side responsible that's very

00:03:20,170 --> 00:03:25,329
responsive even other people are running

00:03:23,410 --> 00:03:26,799
moderately technical popular technical

00:03:25,329 --> 00:03:28,449
blocks this is my colleague Harry's obey

00:03:26,799 --> 00:03:30,190
the testing goat is a companion site for

00:03:28,449 --> 00:03:30,370
book he's written which is also many

00:03:30,190 --> 00:03:32,080
should

00:03:30,370 --> 00:03:33,640
totally buy it if you're interested in

00:03:32,080 --> 00:03:37,360
test-driven development with python and

00:03:33,640 --> 00:03:39,400
django but he gets maybe 2,000 visitors

00:03:37,360 --> 00:03:41,920
a day so the site needs to be responsive

00:03:39,400 --> 00:03:43,540
in ECR up all the time but it doesn't

00:03:41,920 --> 00:03:47,620
need that much more than that it's not a

00:03:43,540 --> 00:03:50,530
high-volume site this is one of our most

00:03:47,620 --> 00:03:53,409
fun customers this guy is running a site

00:03:50,530 --> 00:03:55,510
and it's insanely popular it gets in a

00:03:53,409 --> 00:03:57,489
dozens of hits every second pouring

00:03:55,510 --> 00:03:58,810
through there it's actually quite a good

00:03:57,489 --> 00:04:00,220
selection of music even if you don't

00:03:58,810 --> 00:04:03,099
like getting out of your head and

00:04:00,220 --> 00:04:04,569
various things but it's again quite a

00:04:03,099 --> 00:04:06,280
popular website it's not Amazon it's not

00:04:04,569 --> 00:04:08,250
google but it's got to be there it's got

00:04:06,280 --> 00:04:14,379
to be responsive and it's got to be

00:04:08,250 --> 00:04:16,810
maintained at an affordable price so how

00:04:14,379 --> 00:04:19,120
do we do this well here's a very basic

00:04:16,810 --> 00:04:20,169
list of a set of logos these are these

00:04:19,120 --> 00:04:24,669
are the tools that we use we use

00:04:20,169 --> 00:04:27,160
gnu/linux obviously we use engine x4 for

00:04:24,669 --> 00:04:30,970
our load balancing for all of our HTTP

00:04:27,160 --> 00:04:33,039
needs we use you whiskey which is an

00:04:30,970 --> 00:04:35,050
absolutely awesome product which which

00:04:33,039 --> 00:04:36,940
manages Python processes for you so they

00:04:35,050 --> 00:04:39,430
can serve our web applications it can

00:04:36,940 --> 00:04:41,530
serve basically any web application to

00:04:39,430 --> 00:04:42,880
users the the whiskey protocol so that's

00:04:41,530 --> 00:04:45,039
that's going to be Django that's web 2

00:04:42,880 --> 00:04:46,810
pi that's bottle that's flask us all of

00:04:45,039 --> 00:04:48,700
the big ones possibly except for except

00:04:46,810 --> 00:04:52,060
for most tornado installations which

00:04:48,700 --> 00:04:53,889
doesn't play so well with whiskey we do

00:04:52,060 --> 00:04:55,900
use Redis I'm not going to go into a

00:04:53,889 --> 00:04:57,340
much detail on that today we also use

00:04:55,900 --> 00:04:59,320
lure for a certain amount of scripting

00:04:57,340 --> 00:05:00,880
now I know I'm a bit of danger here for

00:04:59,320 --> 00:05:04,180
talking about the ones of lure at Python

00:05:00,880 --> 00:05:05,500
conference but we do use it it's awesome

00:05:04,180 --> 00:05:08,139
for what it does for the specific use

00:05:05,500 --> 00:05:09,849
case we have now you'll notice that I've

00:05:08,139 --> 00:05:11,320
got shango nago Python there I didn't

00:05:09,849 --> 00:05:13,660
mention them well all of our

00:05:11,320 --> 00:05:16,570
infrastructure uses the tools that I've

00:05:13,660 --> 00:05:18,520
described so far all the configuration

00:05:16,570 --> 00:05:19,570
is managed by path and it's run but is

00:05:18,520 --> 00:05:23,260
managed by a number of Django

00:05:19,570 --> 00:05:25,000
applications which basically spit out

00:05:23,260 --> 00:05:27,430
the configuration files that all the

00:05:25,000 --> 00:05:29,560
other stuff needs to run and keeps keeps

00:05:27,430 --> 00:05:33,880
the cluster live and doing what it's

00:05:29,560 --> 00:05:35,979
meant to do so I promise to the

00:05:33,880 --> 00:05:37,510
description of a HTTP request journey

00:05:35,979 --> 00:05:39,370
through through this platform as a

00:05:37,510 --> 00:05:40,740
service and here the machines that are

00:05:39,370 --> 00:05:43,349
involved in that

00:05:40,740 --> 00:05:44,550
so you can see what I have here is up in

00:05:43,349 --> 00:05:47,340
the top left let's use the mouse pointer

00:05:44,550 --> 00:05:48,870
you can see each of these blue boxes as

00:05:47,340 --> 00:05:51,360
a separate physical machine or a

00:05:48,870 --> 00:05:54,180
separate instance running on amazon AWS

00:05:51,360 --> 00:05:56,460
or whatever here's the users laptop he's

00:05:54,180 --> 00:05:58,830
running chrome down here we have a load

00:05:56,460 --> 00:06:00,660
balancer and a bunch of back-end servers

00:05:58,830 --> 00:06:03,090
so everything apart from this machine up

00:06:00,660 --> 00:06:04,979
here in the top left is part of Python

00:06:03,090 --> 00:06:08,940
anyway as infrastructure we run on

00:06:04,979 --> 00:06:11,009
amazon AWS but that's kind of that's not

00:06:08,940 --> 00:06:14,880
particularly relevant this the context

00:06:11,009 --> 00:06:17,310
of this talk let's say that the person

00:06:14,880 --> 00:06:20,069
who's who's running the browser up here

00:06:17,310 --> 00:06:22,680
once to view my friend harry's website

00:06:20,069 --> 00:06:25,710
they want to go to visit at WWE beta

00:06:22,680 --> 00:06:27,960
testing goat calm well their browser

00:06:25,710 --> 00:06:29,430
makes a DNS request the DNS request

00:06:27,960 --> 00:06:31,470
comes back with the IP address of a bay

00:06:29,430 --> 00:06:33,500
the testing to calm which is the IP

00:06:31,470 --> 00:06:35,970
address of this load balancer down here

00:06:33,500 --> 00:06:37,889
so it opens up an age it opens up a

00:06:35,970 --> 00:06:39,780
tcp/ip connection down to the load

00:06:37,889 --> 00:06:42,630
balancer it sends the request to the

00:06:39,780 --> 00:06:44,099
load balancer now in order to route it

00:06:42,630 --> 00:06:45,870
through to the web application let's say

00:06:44,099 --> 00:06:47,460
that a bay the testing goat is this web

00:06:45,870 --> 00:06:48,690
application here is this Python process

00:06:47,460 --> 00:06:50,789
that's running over on this particular

00:06:48,690 --> 00:06:51,930
physical machine the middle one on the

00:06:50,789 --> 00:06:55,320
right hand side if you can't see the

00:06:51,930 --> 00:06:56,990
mouse pointer so the load balancer needs

00:06:55,320 --> 00:06:59,340
to have the intelligence to be able to

00:06:56,990 --> 00:07:02,849
to know that I pay the testing go calm

00:06:59,340 --> 00:07:04,560
is running on back ends of server too so

00:07:02,849 --> 00:07:05,759
we'll just say that's magic for the

00:07:04,560 --> 00:07:07,320
moment let's say it magically nodes

00:07:05,759 --> 00:07:11,819
back-end server to it makes a connection

00:07:07,320 --> 00:07:13,020
and and now we have to TCP IP

00:07:11,819 --> 00:07:14,610
connections one from the rope from the

00:07:13,020 --> 00:07:16,740
clients the load balancer one from the

00:07:14,610 --> 00:07:18,360
low balance to the backend the back end

00:07:16,740 --> 00:07:20,789
now needs to identify that the process

00:07:18,360 --> 00:07:23,880
web app for is the Python processes

00:07:20,789 --> 00:07:27,389
running a bay the testing go com it does

00:07:23,880 --> 00:07:29,610
that again will say magically and makes

00:07:27,389 --> 00:07:31,020
the connection the web application code

00:07:29,610 --> 00:07:32,969
does its calculations it renders

00:07:31,020 --> 00:07:34,380
templates it talks to the database it

00:07:32,969 --> 00:07:36,330
does whatever magic it tells to generate

00:07:34,380 --> 00:07:37,949
a page it sends it back to the backend

00:07:36,330 --> 00:07:40,590
server back-end server sends it back to

00:07:37,949 --> 00:07:43,169
the load balancer load bars or sends it

00:07:40,590 --> 00:07:45,599
back to the client now if you're used to

00:07:43,169 --> 00:07:47,400
running normal kinds of websites the

00:07:45,599 --> 00:07:49,169
kind of system where personally for

00:07:47,400 --> 00:07:51,900
example I have a VPS where a where I

00:07:49,169 --> 00:07:53,339
used to host my my personal blog then

00:07:51,900 --> 00:07:54,529
you might be thinking what's the point

00:07:53,339 --> 00:07:56,329
of the load balancer in there

00:07:54,529 --> 00:07:58,219
normally you'd simply have a server

00:07:56,329 --> 00:07:59,929
looks rather like the the backend server

00:07:58,219 --> 00:08:02,059
here it's running a front-end web server

00:07:59,929 --> 00:08:04,219
like engine X or Apache and it's got a

00:08:02,059 --> 00:08:05,839
number of web applications running one

00:08:04,219 --> 00:08:08,539
or more web applications running as

00:08:05,839 --> 00:08:09,499
Python processes underneath it why do we

00:08:08,539 --> 00:08:11,119
have this extra set for the load

00:08:09,499 --> 00:08:12,619
balancer that's kind of where the magic

00:08:11,119 --> 00:08:14,089
comes in because that's it's the low

00:08:12,619 --> 00:08:16,369
bounce that allows us to scale up to

00:08:14,089 --> 00:08:17,719
scale down to add in resilience and

00:08:16,369 --> 00:08:19,219
failover and all those other good things

00:08:17,719 --> 00:08:21,229
that people expect when they outsource

00:08:19,219 --> 00:08:23,329
running their web applications to a

00:08:21,229 --> 00:08:28,849
third party like us rather than renting

00:08:23,329 --> 00:08:32,599
a VPS right so I said the load balancer

00:08:28,849 --> 00:08:35,379
knows by magic which which back-end has

00:08:32,599 --> 00:08:37,759
got send that to send that request to a

00:08:35,379 --> 00:08:39,649
load balancer is running engine X it's

00:08:37,759 --> 00:08:42,559
running a specific flavor of engine X

00:08:39,649 --> 00:08:45,139
called opener st now engine X is an

00:08:42,559 --> 00:08:50,420
awesome web server it has it's extremely

00:08:45,139 --> 00:08:52,459
fast it's very good at proxy another and

00:08:50,420 --> 00:08:53,930
it has a lot of great plugins open resti

00:08:52,459 --> 00:08:56,360
has basically engine X with batteries

00:08:53,930 --> 00:08:58,730
included one of the batteries that ring

00:08:56,360 --> 00:09:00,370
that included is Luis scripting the kind

00:08:58,730 --> 00:09:02,839
of lure scripting you can do is actually

00:09:00,370 --> 00:09:04,639
insanely powerful you can do any amount

00:09:02,839 --> 00:09:07,250
of lure processing inside every single

00:09:04,639 --> 00:09:08,839
request it works extremely fast lure I

00:09:07,250 --> 00:09:12,620
think it's a nice language it's not as

00:09:08,839 --> 00:09:14,149
nice as Python but some of the design

00:09:12,620 --> 00:09:15,500
decisions they made that make it a less

00:09:14,149 --> 00:09:17,720
pleasant language to look out and work

00:09:15,500 --> 00:09:19,639
with are actually very good for for

00:09:17,720 --> 00:09:21,949
speed and efficiency so that's why it's

00:09:19,639 --> 00:09:24,309
I think they chose it for the feather

00:09:21,949 --> 00:09:27,050
that the majority of internet scripting

00:09:24,309 --> 00:09:29,750
what we do inside our load balancer code

00:09:27,050 --> 00:09:31,129
is actually really very simple what I've

00:09:29,750 --> 00:09:32,600
got here is the engine X configuration

00:09:31,129 --> 00:09:35,779
file hopefully that's reasonably

00:09:32,600 --> 00:09:37,579
readable at the top here we're saying in

00:09:35,779 --> 00:09:38,959
it by lua file when engine X starts up

00:09:37,579 --> 00:09:41,329
it's going to load it's going to run

00:09:38,959 --> 00:09:43,610
that script in it back ends in it back

00:09:41,329 --> 00:09:45,709
ends basically just specifies some

00:09:43,610 --> 00:09:48,170
global context which available to any

00:09:45,709 --> 00:09:49,639
lower script inside engine X saying here

00:09:48,170 --> 00:09:52,970
is a list of all of the backend servers

00:09:49,639 --> 00:09:54,350
that's all it does as we go down here we

00:09:52,970 --> 00:09:57,350
come into our server block so we're

00:09:54,350 --> 00:09:59,120
listening on port 80 and 443 and this

00:09:57,350 --> 00:10:00,679
location / block is basically

00:09:59,120 --> 00:10:02,059
something's going to be executed think

00:10:00,679 --> 00:10:05,480
of it as code that's executed for every

00:10:02,059 --> 00:10:07,459
request so what we do is we extract the

00:10:05,480 --> 00:10:10,160
host that a particular

00:10:07,459 --> 00:10:13,550
that sir this request is asking for WWE

00:10:10,160 --> 00:10:15,619
beta testing go com we extracted from

00:10:13,550 --> 00:10:18,199
the HTTP host header from the HTTP

00:10:15,619 --> 00:10:20,540
request and started stashed in a

00:10:18,199 --> 00:10:22,639
variable called route host we then set a

00:10:20,540 --> 00:10:24,679
back-end IP variable to empty string and

00:10:22,639 --> 00:10:27,050
then this is basically a function call

00:10:24,679 --> 00:10:28,879
here we're calling the lure function as

00:10:27,050 --> 00:10:31,879
cancer that's contained in get back end

00:10:28,879 --> 00:10:34,490
IP now you can guess what get back into

00:10:31,879 --> 00:10:36,949
IP does it returns the IP in but in this

00:10:34,490 --> 00:10:38,029
better back-end IP variable and then we

00:10:36,949 --> 00:10:40,339
go into this little bit of internets

00:10:38,029 --> 00:10:42,019
magic which is proxy pass so that says

00:10:40,339 --> 00:10:43,429
just hand off the processing of this

00:10:42,019 --> 00:10:47,480
request to that server over there

00:10:43,429 --> 00:10:49,879
identified by this IP and NJ next off

00:10:47,480 --> 00:10:53,119
the rest for us let's take a look at

00:10:49,879 --> 00:10:54,379
that sir lure file this is an

00:10:53,119 --> 00:10:55,790
interesting bit of code because is

00:10:54,379 --> 00:10:57,139
something we put in for the first cut of

00:10:55,790 --> 00:10:58,369
our load balancer which we thought we

00:10:57,139 --> 00:11:02,749
were going to get rid of in a week or so

00:10:58,369 --> 00:11:04,369
it seemed too simple it seemed to our

00:11:02,749 --> 00:11:07,339
sweat it didn't seem complicated enough

00:11:04,369 --> 00:11:10,579
to work all it does is hash the host

00:11:07,339 --> 00:11:12,290
name that comes in so that's that's

00:11:10,579 --> 00:11:14,179
literally the code that Python uses when

00:11:12,290 --> 00:11:16,549
you hash a string to convert it into

00:11:14,179 --> 00:11:17,839
lure it hashes that so you've got a

00:11:16,549 --> 00:11:19,490
number from the host name we then take

00:11:17,839 --> 00:11:21,499
that modulo the number of backends and

00:11:19,490 --> 00:11:23,449
use that to index into the list of back

00:11:21,499 --> 00:11:25,339
ends so that means that every single web

00:11:23,449 --> 00:11:26,600
web server we're running every single

00:11:25,339 --> 00:11:28,069
website for running is assigned

00:11:26,600 --> 00:11:29,749
essentially randomly to one of the

00:11:28,069 --> 00:11:31,309
different backends it's Staveley

00:11:29,749 --> 00:11:33,499
assigned to the same back end if we add

00:11:31,309 --> 00:11:35,420
new back into the cluster the modulus

00:11:33,499 --> 00:11:37,160
sir number using increases and so

00:11:35,420 --> 00:11:40,579
everything automatically spreads itself

00:11:37,160 --> 00:11:43,790
out over the cluster again that's a load

00:11:40,579 --> 00:11:45,619
balancer I said that the back end server

00:11:43,790 --> 00:11:46,999
also needs to identify which which

00:11:45,619 --> 00:11:50,089
processes running particular web

00:11:46,999 --> 00:11:51,980
application so this is some really basic

00:11:50,089 --> 00:11:54,799
engine X configuration that any of you

00:11:51,980 --> 00:11:57,740
who've done you whiskey stuff on engine

00:11:54,799 --> 00:12:00,439
X will recognize all we're saying here

00:11:57,740 --> 00:12:01,970
is again extract the domain name that

00:12:00,439 --> 00:12:04,129
from the request that's being made

00:12:01,970 --> 00:12:05,449
certain the request for processing

00:12:04,129 --> 00:12:09,259
different way of doing it but the same

00:12:05,449 --> 00:12:11,179
effect and what we did what we set a

00:12:09,259 --> 00:12:15,559
challenge next to do is delegate all

00:12:11,179 --> 00:12:16,910
requests for wwa the testing go calm to

00:12:15,559 --> 00:12:18,709
a particular socket this is all dynamic

00:12:16,910 --> 00:12:20,760
stuff this is that this is what the

00:12:18,709 --> 00:12:23,550
company actually looks like it's not a

00:12:20,760 --> 00:12:25,200
all there so any request that comes into

00:12:23,550 --> 00:12:26,430
the center next it will immediately look

00:12:25,200 --> 00:12:28,800
for that the socket in that particular

00:12:26,430 --> 00:12:30,270
location and expect there to be a you

00:12:28,800 --> 00:12:33,000
whiskey process sitting on the other end

00:12:30,270 --> 00:12:35,810
of it running the running the website

00:12:33,000 --> 00:12:39,060
that should be on that particular domain

00:12:35,810 --> 00:12:40,860
how does how does you whiskey know that

00:12:39,060 --> 00:12:43,470
it needs to have a web application

00:12:40,860 --> 00:12:46,140
running on that socket well you whiskey

00:12:43,470 --> 00:12:47,700
has a directory called it contains what

00:12:46,140 --> 00:12:49,380
they call vassal files of Vasily's you

00:12:47,700 --> 00:12:51,330
whiskey's terminology for a running

00:12:49,380 --> 00:12:53,010
Python process or set of processes

00:12:51,330 --> 00:12:56,670
that's responsible for a particular web

00:12:53,010 --> 00:12:59,640
application it's configured by a vassal

00:12:56,670 --> 00:13:01,110
file and a vassal file basically has

00:12:59,640 --> 00:13:02,760
various things saying where the code is

00:13:01,110 --> 00:13:05,100
what kind of sandbox you want to apply

00:13:02,760 --> 00:13:07,230
how many work a process you want but

00:13:05,100 --> 00:13:10,170
importantly it also has this line at the

00:13:07,230 --> 00:13:12,350
top here excuse me um which is which is

00:13:10,170 --> 00:13:14,730
the socket that it needs to listen on

00:13:12,350 --> 00:13:17,250
you whiskey's very clever if a vassal

00:13:14,730 --> 00:13:18,690
file is created configuring a u.s. key

00:13:17,250 --> 00:13:20,940
vassal like this it will immediately

00:13:18,690 --> 00:13:22,560
detect the creation of that file if it's

00:13:20,940 --> 00:13:24,420
in the right directory and it will file

00:13:22,560 --> 00:13:27,390
a fire up all the processes immediately

00:13:24,420 --> 00:13:29,340
and then that means that obviously the

00:13:27,390 --> 00:13:32,340
web application started so what we need

00:13:29,340 --> 00:13:34,440
to do is start a web application when

00:13:32,340 --> 00:13:36,540
requests come in this is where things

00:13:34,440 --> 00:13:38,130
get a little bit more complicated what

00:13:36,540 --> 00:13:39,810
happens if a request comes in to one of

00:13:38,130 --> 00:13:41,460
our backends and there is no process

00:13:39,810 --> 00:13:43,800
running for that particular web

00:13:41,460 --> 00:13:44,970
application but I told you that enter

00:13:43,800 --> 00:13:46,650
next I showed you earlier was simplified

00:13:44,970 --> 00:13:49,950
here's something a bit closer to the

00:13:46,650 --> 00:13:52,260
truth when engine X tries to connect to

00:13:49,950 --> 00:13:54,240
a toy to aus key back end that's not

00:13:52,260 --> 00:13:55,860
there maybe there's no socket maybe you

00:13:54,240 --> 00:13:57,690
whiskey itself hasn't started the

00:13:55,860 --> 00:14:00,570
processes maybe it's killed them because

00:13:57,690 --> 00:14:02,910
they timed out after a certain amount of

00:14:00,570 --> 00:14:04,950
inactivity engine X will internally

00:14:02,910 --> 00:14:06,660
generate a 502 error normally that just

00:14:04,950 --> 00:14:09,750
goes back to the the browser and

00:14:06,660 --> 00:14:11,850
obviously things look bad what we have

00:14:09,750 --> 00:14:15,690
here is error page handler if there is a

00:14:11,850 --> 00:14:18,300
502 error we essentially do a go to to

00:14:15,690 --> 00:14:20,730
this other block here at fall back error

00:14:18,300 --> 00:14:23,220
page fiber to if there is a Thesz narrow

00:14:20,730 --> 00:14:24,570
we wind up inside this code here and all

00:14:23,220 --> 00:14:26,190
we do here is we check whether there is

00:14:24,570 --> 00:14:28,530
a vassal file for that particular domain

00:14:26,190 --> 00:14:32,100
so let's say we go so we're looking for

00:14:28,530 --> 00:14:33,290
a WWA the testing go calm the process

00:14:32,100 --> 00:14:34,730
isn't running

00:14:33,290 --> 00:14:36,709
the first thing we do is jump start this

00:14:34,730 --> 00:14:38,149
fall back we see where there's a vassal

00:14:36,709 --> 00:14:39,470
file for that domain if there's a vassal

00:14:38,149 --> 00:14:41,449
file that to me we can safely assume

00:14:39,470 --> 00:14:43,250
that there are processes running so

00:14:41,449 --> 00:14:44,420
actually this was a real fiber to maybe

00:14:43,250 --> 00:14:46,370
something wrong went wrong inside the

00:14:44,420 --> 00:14:49,730
web application so we generate a real

00:14:46,370 --> 00:14:51,230
502 error but if there isn't a vassal

00:14:49,730 --> 00:14:53,389
file for that particular web app we know

00:14:51,230 --> 00:14:54,980
we need to start it now you remember

00:14:53,389 --> 00:14:56,569
that proxy pass from the load balancer

00:14:54,980 --> 00:14:58,610
where essentially are saying delegate or

00:14:56,569 --> 00:15:01,009
work for this request to this IP over

00:14:58,610 --> 00:15:03,290
there this is another proxy pass here

00:15:01,009 --> 00:15:05,600
which is delegating to a little micro

00:15:03,290 --> 00:15:06,709
service running locally the market surf

00:15:05,600 --> 00:15:08,690
is running locally is actually a very

00:15:06,709 --> 00:15:10,100
small Django application it has access

00:15:08,690 --> 00:15:12,649
to the database that configures all of

00:15:10,100 --> 00:15:16,490
the websites we run when it receives a

00:15:12,649 --> 00:15:18,620
call on it's initialized web app view

00:15:16,490 --> 00:15:20,389
then it says okay I need to start up

00:15:18,620 --> 00:15:21,500
that particular web application it goes

00:15:20,389 --> 00:15:23,569
the database it gathers all the

00:15:21,500 --> 00:15:27,980
information about the user it works out

00:15:23,569 --> 00:15:29,569
whether we have a virtual a container

00:15:27,980 --> 00:15:31,610
for this particular user running on this

00:15:29,569 --> 00:15:33,620
particular machine it starts that up if

00:15:31,610 --> 00:15:35,690
necessary it then creates the the

00:15:33,620 --> 00:15:37,430
whiskey configuration it generates say

00:15:35,690 --> 00:15:40,250
whiskey taught any file the vassal file

00:15:37,430 --> 00:15:42,139
passes that off to you whiskey you

00:15:40,250 --> 00:15:43,699
whiskey starts the process up and

00:15:42,139 --> 00:15:48,230
running and suddenly we can start

00:15:43,699 --> 00:15:50,510
delegating all the work to that so why

00:15:48,230 --> 00:15:51,800
is this interesting well what it means

00:15:50,510 --> 00:15:53,510
is that we can actually scale pretty

00:15:51,800 --> 00:15:54,949
much transparently let's say we've had a

00:15:53,510 --> 00:15:57,860
busy day and let's imagine we've only

00:15:54,949 --> 00:15:59,899
had until now say three web servers in

00:15:57,860 --> 00:16:02,209
our cluster and then suddenly things so

00:15:59,899 --> 00:16:04,490
things hot up maybe the web applications

00:16:02,209 --> 00:16:06,199
we've got a bit getting more busy or a

00:16:04,490 --> 00:16:08,120
bunch of you people have signed up and

00:16:06,199 --> 00:16:10,519
we've got certain more website all we do

00:16:08,120 --> 00:16:12,560
is we create a new back-end server which

00:16:10,519 --> 00:16:14,750
is very easy with aven't so we just fire

00:16:12,560 --> 00:16:17,899
up in your instance and then we tell the

00:16:14,750 --> 00:16:19,850
load balancer about it immediately on on

00:16:17,899 --> 00:16:21,620
telling inter next to reload its

00:16:19,850 --> 00:16:23,660
configuration it will start distributing

00:16:21,620 --> 00:16:26,240
requests differently across the load

00:16:23,660 --> 00:16:28,310
balancer across the back ends and any

00:16:26,240 --> 00:16:30,319
back ends that need to star web apps

00:16:28,310 --> 00:16:32,930
automatically start them the ones that

00:16:30,319 --> 00:16:35,060
are running web applications they no

00:16:32,930 --> 00:16:37,490
longer need to run will all start timing

00:16:35,060 --> 00:16:39,199
out and killing themselves so

00:16:37,490 --> 00:16:42,380
dynamically reconfigured the cluster

00:16:39,199 --> 00:16:45,300
very very simply now let's say that

00:16:42,380 --> 00:16:48,149
something goes wrong last night

00:16:45,300 --> 00:16:51,060
one of our web web service started

00:16:48,149 --> 00:16:53,010
showing problems and we got pinged by by

00:16:51,060 --> 00:16:55,649
Pingdom saying live web one was good it

00:16:53,010 --> 00:16:57,959
was going down live web one is a

00:16:55,649 --> 00:17:00,360
particular server that we have on amazon

00:16:57,959 --> 00:17:02,459
and every year about this time hardware

00:17:00,360 --> 00:17:04,290
starts failing on AWS I think what

00:17:02,459 --> 00:17:06,390
happens is that all the air in regular

00:17:04,290 --> 00:17:08,040
engineers go on holiday and he interns

00:17:06,390 --> 00:17:10,949
haven't been given enough information on

00:17:08,040 --> 00:17:13,530
how to manage their their systems live

00:17:10,949 --> 00:17:15,510
web one started failing and so all we

00:17:13,530 --> 00:17:18,089
did was log in to log into the low

00:17:15,510 --> 00:17:20,189
bouncer remove it from our from our list

00:17:18,089 --> 00:17:22,079
of backends everything and immediately

00:17:20,189 --> 00:17:23,790
reconfigured itself automatically just

00:17:22,079 --> 00:17:26,970
through the use of this hashing function

00:17:23,790 --> 00:17:28,350
to run on the remaining servers that

00:17:26,970 --> 00:17:29,250
meant that of course all over the web

00:17:28,350 --> 00:17:31,559
apps are running a little bit more

00:17:29,250 --> 00:17:33,240
slowly because I machines were closer to

00:17:31,559 --> 00:17:35,250
their load limit but that's fine we have

00:17:33,240 --> 00:17:37,590
a fair amount of capacity for that we

00:17:35,250 --> 00:17:39,450
can bounce the web server so it could

00:17:37,590 --> 00:17:40,620
bounce fix the broken server bring it

00:17:39,450 --> 00:17:43,850
bring it back into rotation with the new

00:17:40,620 --> 00:17:46,920
IP and suddenly everything worked again

00:17:43,850 --> 00:17:49,530
that it was a very very rapid tour

00:17:46,920 --> 00:17:51,450
through how I how the whole system works

00:17:49,530 --> 00:17:53,130
and now agree later hand over to you

00:17:51,450 --> 00:17:57,980
guys for any questions we can drill down

00:17:53,130 --> 00:17:57,980
on anything that was interesting thank

00:18:04,920 --> 00:18:09,870
so we got a lot of time for questions

00:18:11,400 --> 00:18:34,330
gentlemen here at the front / Baba could

00:18:23,680 --> 00:18:36,340
you just use your whiskey to restart the

00:18:34,330 --> 00:18:37,390
real the real problem is actually in the

00:18:36,340 --> 00:18:38,980
amount of work that needs to be done to

00:18:37,390 --> 00:18:42,370
start the process because all of our

00:18:38,980 --> 00:18:44,380
users run inside inside sandbox

00:18:42,370 --> 00:18:45,760
environments which we have to have

00:18:44,380 --> 00:18:47,410
control over the code to actually start

00:18:45,760 --> 00:18:48,700
them up and you risk it this time when

00:18:47,410 --> 00:18:52,540
we started using it and I think still

00:18:48,700 --> 00:18:54,130
doesn't have the capability to to do all

00:18:52,540 --> 00:18:55,450
of the setup work required to do it it

00:18:54,130 --> 00:18:58,060
can start process is quite happily can

00:18:55,450 --> 00:18:59,800
run certain kinds of priya net scripts I

00:18:58,060 --> 00:19:02,860
don't recall precisely what was

00:18:59,800 --> 00:19:11,710
something that it could not do to get to

00:19:02,860 --> 00:19:13,870
do with virtualization essentially or

00:19:11,710 --> 00:19:17,500
first question how do you do the same

00:19:13,870 --> 00:19:19,240
boxing the sandboxing okay it's um it's

00:19:17,500 --> 00:19:20,410
kind of a roll your own thing and these

00:19:19,240 --> 00:19:22,330
are these days if we have starting

00:19:20,410 --> 00:19:24,840
packed anywhere today we might think of

00:19:22,330 --> 00:19:26,620
we probably use Linux containers or we'd

00:19:24,840 --> 00:19:28,870
potentially use docker we're using

00:19:26,620 --> 00:19:30,970
docker some stuff we're working on now

00:19:28,870 --> 00:19:33,100
and think you've rolling some changes

00:19:30,970 --> 00:19:35,200
back in but the good thing about Linux

00:19:33,100 --> 00:19:37,240
containers is that it was built out of

00:19:35,200 --> 00:19:38,950
reusable components it uses two routes

00:19:37,240 --> 00:19:40,900
the users process namespaces network

00:19:38,950 --> 00:19:42,490
namespaces and that meant that all of

00:19:40,900 --> 00:19:45,160
these have been becoming available for a

00:19:42,490 --> 00:19:46,810
number of for a number of years and

00:19:45,160 --> 00:19:49,150
we've essentially rolled our own kind of

00:19:46,810 --> 00:19:53,280
Linux containers light by plugging those

00:19:49,150 --> 00:19:57,580
things together okay and what happens if

00:19:53,280 --> 00:19:59,710
if a worker is down and let's see free

00:19:57,580 --> 00:20:02,050
requests come in at the same time is

00:19:59,710 --> 00:20:04,660
there there's some kind of a race

00:20:02,050 --> 00:20:06,580
condition here right sorry I don't

00:20:04,660 --> 00:20:10,420
answer to that so if you need to start a

00:20:06,580 --> 00:20:11,160
process whiskey process for website that

00:20:10,420 --> 00:20:13,680
was down

00:20:11,160 --> 00:20:16,590
but free requests come in at the same

00:20:13,680 --> 00:20:18,420
time is there some kind of locking to

00:20:16,590 --> 00:20:19,800
make sure you only start it once and you

00:20:18,420 --> 00:20:22,260
don't lose any requests while it's

00:20:19,800 --> 00:20:23,880
starting up obviously yes yes yes that

00:20:22,260 --> 00:20:25,530
yeah that is looking inside there's

00:20:23,880 --> 00:20:28,170
inside are initialized web apps which

00:20:25,530 --> 00:20:29,910
handles are and you is he does Q things

00:20:28,170 --> 00:20:32,310
to a certain degree as well so we've got

00:20:29,910 --> 00:20:34,010
a belt and braces we use there around

00:20:32,310 --> 00:20:36,210
the code the star sapphire about our

00:20:34,010 --> 00:20:38,280
sandboxes in various places including

00:20:36,210 --> 00:20:40,500
these we do in browser consoles and

00:20:38,280 --> 00:20:42,000
things like that so we've got we kind of

00:20:40,500 --> 00:20:43,140
unlocking on our side to protects from

00:20:42,000 --> 00:20:53,400
that and you whiskey does a certain

00:20:43,140 --> 00:20:56,520
amount of queuing okay thank you no we

00:20:53,400 --> 00:20:58,170
don't um and that's that's something we

00:20:56,520 --> 00:20:59,820
really do want to support all of all of

00:20:58,170 --> 00:21:01,770
our infrastructure does support it to

00:20:59,820 --> 00:21:03,660
one extent or another i think i'm not

00:21:01,770 --> 00:21:05,550
actually i'm not sure what so you

00:21:03,660 --> 00:21:07,890
whiskey support for web sockets is like

00:21:05,550 --> 00:21:09,480
at the moment but the problem is that

00:21:07,890 --> 00:21:12,030
the whiskey protocol doesn't really

00:21:09,480 --> 00:21:13,200
support web sockets if you whiskey does

00:21:12,030 --> 00:21:17,790
support it'll be in some kind of

00:21:13,200 --> 00:21:19,170
extension on top of that i think that

00:21:17,790 --> 00:21:20,220
said that if what we do so well we

00:21:19,170 --> 00:21:21,480
definitely will support it what we

00:21:20,220 --> 00:21:23,460
support it will either wind up rolling

00:21:21,480 --> 00:21:25,500
something of our own to be able to

00:21:23,460 --> 00:21:27,540
manage long-running say tornado

00:21:25,500 --> 00:21:28,890
processes and use the same engine X

00:21:27,540 --> 00:21:32,160
infrastructure to root through to

00:21:28,890 --> 00:21:33,510
appropriate places or maybe maybe you

00:21:32,160 --> 00:21:42,210
whiskey will by that time to do

00:21:33,510 --> 00:21:44,220
something that we can we can use you you

00:21:42,210 --> 00:21:47,880
never sell how you deal with persistent

00:21:44,220 --> 00:21:50,310
state so with databases so I said it

00:21:47,880 --> 00:21:53,520
again well what happens to the databases

00:21:50,310 --> 00:21:54,480
of the web apps oh I see okay that's

00:21:53,520 --> 00:21:56,760
that's the best that's managed

00:21:54,480 --> 00:21:58,890
separately we have them we have my

00:21:56,760 --> 00:22:01,740
sequel instances and we're working on

00:21:58,890 --> 00:22:03,090
supporting postgres instances just

00:22:01,740 --> 00:22:09,570
separate their kind of behind those

00:22:03,090 --> 00:22:13,320
back-end servers do you have code that

00:22:09,570 --> 00:22:16,170
we repeat the question please do you

00:22:13,320 --> 00:22:18,360
have some services that manage databases

00:22:16,170 --> 00:22:22,450
for you

00:22:18,360 --> 00:22:23,680
on the year on the the my sequel side

00:22:22,450 --> 00:22:26,230
it's all a little bit messy and was

00:22:23,680 --> 00:22:28,660
built at hawk for we're adding postgres

00:22:26,230 --> 00:22:31,030
support right now and we're basically

00:22:28,660 --> 00:22:34,210
building that as a we have a flask

00:22:31,030 --> 00:22:37,510
microservice which runs on one of the

00:22:34,210 --> 00:22:39,760
set of postgres servers which fires up

00:22:37,510 --> 00:22:41,890
docker containers each of which runs one

00:22:39,760 --> 00:22:44,560
postgres instance so that the flus

00:22:41,890 --> 00:22:45,970
microservice does the provisioning we're

00:22:44,560 --> 00:22:47,740
part of work on that at the moment it

00:22:45,970 --> 00:22:49,180
says it's working well enough to pass a

00:22:47,740 --> 00:22:51,820
functional test which probably media's a

00:22:49,180 --> 00:22:59,080
month or so away from deployment last

00:22:51,820 --> 00:23:02,260
question please there's one I said that

00:22:59,080 --> 00:23:05,080
when one of your instances you got an

00:23:02,260 --> 00:23:07,090
alert on it then you manually remove

00:23:05,080 --> 00:23:09,660
them from the load balancer is the

00:23:07,090 --> 00:23:13,990
reason why you don't set up auto duh

00:23:09,660 --> 00:23:16,240
like automatically removal and also if

00:23:13,990 --> 00:23:19,950
you have auto upscale because you said

00:23:16,240 --> 00:23:23,950
that you have some sort of limit on your

00:23:19,950 --> 00:23:25,690
instances um yeah that's that's that's

00:23:23,950 --> 00:23:28,390
next question it's it's it's really been

00:23:25,690 --> 00:23:29,980
a matter of development time one of the

00:23:28,390 --> 00:23:31,990
features we do need to add is it

00:23:29,980 --> 00:23:33,730
automatically instance killing when we

00:23:31,990 --> 00:23:37,110
first created it was it made sense to do

00:23:33,730 --> 00:23:40,150
it to do it manually because now each

00:23:37,110 --> 00:23:42,010
each instant failure was a rare enough

00:23:40,150 --> 00:23:43,240
occurrence and was kind of unique enough

00:23:42,010 --> 00:23:44,230
in the way that it failed that it was

00:23:43,240 --> 00:23:47,290
better to have a human in the loop

00:23:44,230 --> 00:23:48,340
whereas now I think we've managed to get

00:23:47,290 --> 00:23:49,840
a list of the different ways in which

00:23:48,340 --> 00:23:51,340
instances can fail and we can probably

00:23:49,840 --> 00:23:54,130
start building in more automated

00:23:51,340 --> 00:23:55,870
responses but yeah that's it that's just

00:23:54,130 --> 00:23:59,560
a case of we haven't had time to do it

00:23:55,870 --> 00:24:02,490
yet so thank you very much child's

00:23:59,560 --> 00:24:02,490
speaking here

00:24:05,940 --> 00:24:08,000

YouTube URL: https://www.youtube.com/watch?v=IbH6_Yx2Q-4


