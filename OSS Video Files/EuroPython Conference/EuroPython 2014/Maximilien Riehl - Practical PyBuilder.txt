Title: Maximilien Riehl - Practical PyBuilder
Publication date: 2015-04-18
Playlist: EuroPython 2014
Description: 
	Maximilien Riehl - Practical PyBuilder
[EuroPython 2014]
[25 July 2014]

PyBuilder is a software build tool written in pure python which mainly targets 
pure python applications.
It provides glue between existing build frameworks, thus empowering you to focus on the big picture of the build process.
It will be shown through demonstrations and samples how a simple, 
human-readable and declarative configuration can lead to an astonishingly 
well-integrated build process which will make maintainers, developers and newcomers happy.

-----

# Why another build tool
Starting up a simple python project with best practices still takes a lot of boilerplate and glueing (e.G. chaining unit tests and integration tests in the build process, adding a linter, measuring coverage, ...).
It often results in extremely ugly homebrew scripts and edge-case solutions that are not reusable.
There are even programs out there (e.G. cookiecutter) that encourage boilerplate code generation!

# Build orchestration
PyBuilder borrows from the *maven* idea of phases (packaging, verifying, publishing, ...) to set up a fully declarative and automated build that can be run locally and remotely (build servers) in the very same way.
Rather than reinventing the wheel, it  provides glue between existing solutions (like unittest, coverage, flake8, ...) through a simple but powerful plugin mechanism.

# The talk
After a more theoretical talk with a colleague at PyConDE 2013, I want to show how it's actually like to work with *PyBuilder*.
This includes

 * starting up a project
 * running builds
 * using plugins
 * writing a plugin

The demo code will be made available on GitHub and I'll probably  have recordings prepped in case something goes wrong.

Reviewer FAQ
===============

### How does PyBuilder compare to other existing solutions like zc.buildout? 

As opposed to solutions like zc.buildout which focus on the *building* of complex projects (many parts, complex dependencies) PyBuilder emphasizes the full build process for very simple projects. Undoubtedly, buildout is more powerful for building in that regard and there is no reason to switch to PyBuilder.

However, for simple projects (a few packages, pure python) we believe that PyBuilder is better, especially if you're starting out with Python. The plugin architecture (as opposed to recipes) makes it easier to reason about what is going on. We are able to model dependencies between build phases  (like "coverage" needing "unit tests" and "packaging" needing "integration tests") where recipes are not. It also seems (after looking through the recipes available for buildout) that we have more focus on QA as part of the build process (lint code, differentiate between unit/integration tests, code analysis, ...). 

There is also a special focus on having the build descriptor written in Python (with fluent interfaces where possible) so that it is possible to understand what the configuration is by reading plain english, as opposed to zc.buildout (where the configuration is an ini file, or SCons which is very make-oriented).

In the end, a big difference between most build tools and PyBuilder is that PyBuilder is more about orchestration. We didn't reinvent packaging or linting,  we simply use what is already there (setuptools, flake8, pymetrics, ...). This allows users to use the tools they want without having to do the integration themselves, and still get a nice, unified build process out of it.

A simple example :

In buildout, code analysis can be done with 


```
[buildout]
parts += code-analysis

[code-analysis]
recipe = plone.recipe.codeanalysis
directory = ${buildout:directory}/src
```

This is not readable IMHO.
In PyBuilder it can look like this :

```
use_plugin('python.flake8')
project.set_property('flake8_include_test_sources', True)
project.set_property('flake8_ignore', 'E501')
project.set_property('flake8_break_build', True)
```


### "It provides glue between existing build frameworks" - which ones ? Could you name (some at least) ?

Currently there is only a plugin for building with distutils/setuptools. Should that change (e.G. new contender) it would be easy to switch using PyBuilder.

Examples where glue is needed : 

* Glue setuptools + unittest, so that no distribution can be shipped if tests fail
* Glue setuptools + coverage + unittest, so that no distribution can be shipped if the statement coverage is too low (configurable ofc)
* Glue setuptools + pip so that cloned projects can be built with their dependencies without needing to pip install manually
Captions: 
	00:00:15,050 --> 00:00:18,910
please welcome max immediately

00:00:21,870 --> 00:00:28,420
this is walking yes nice so welcome to a

00:00:25,990 --> 00:00:32,230
practical pilot our talk

00:00:28,420 --> 00:00:35,050
yeah I'm max obviously I'm on github I

00:00:32,230 --> 00:00:36,780
don't use Twitter but I do have email so

00:00:35,050 --> 00:00:41,620
if you want to get in touch feel free to

00:00:36,780 --> 00:00:43,840
send me a lot of emails I do speak

00:00:41,620 --> 00:00:47,129
German and French and a bit of English

00:00:43,840 --> 00:00:50,860
so you can use that to get in touch -

00:00:47,129 --> 00:00:53,140
I'm from Yuma beam Scouts 24 which is

00:00:50,860 --> 00:00:55,540
the leading German really state portal

00:00:53,140 --> 00:00:58,150
so you know if you want to find a new

00:00:55,540 --> 00:01:01,360
apartment or move to a new house we have

00:00:58,150 --> 00:01:03,670
services for vets and while we're mostly

00:01:01,360 --> 00:01:06,670
a java-based company

00:01:03,670 --> 00:01:08,979
so most of the web development is done

00:01:06,670 --> 00:01:12,280
with Tomcat and spring and so on

00:01:08,979 --> 00:01:14,290
so really java-based although we do have

00:01:12,280 --> 00:01:17,520
a few teams who actually use Python for

00:01:14,290 --> 00:01:20,890
web development these are the cool guys

00:01:17,520 --> 00:01:23,770
but where we think that you know Python

00:01:20,890 --> 00:01:25,930
really hits verse which spots that

00:01:23,770 --> 00:01:29,859
system automation and infrastructure as

00:01:25,930 --> 00:01:33,549
code so we do yeah like everything in

00:01:29,859 --> 00:01:36,009
Python when it comes to automation so

00:01:33,549 --> 00:01:38,679
what I actually do is I'm a system

00:01:36,009 --> 00:01:40,570
developer we Enver production department

00:01:38,679 --> 00:01:43,719
so you know we're operation sets and so

00:01:40,570 --> 00:01:46,600
on and we we automate stuff with

00:01:43,719 --> 00:01:49,090
software development methodologies so we

00:01:46,600 --> 00:01:51,189
test things and so on and the most

00:01:49,090 --> 00:01:53,649
high-profile tool we're working on at

00:01:51,189 --> 00:01:55,509
the moment is what you can see here it's

00:01:53,649 --> 00:01:58,270
called yachts what you see here is very

00:01:55,509 --> 00:02:00,820
up shell basically it's a tool for

00:01:58,270 --> 00:02:04,329
systems orchestration which is a lot

00:02:00,820 --> 00:02:06,850
like ansible in many ways except that's

00:02:04,329 --> 00:02:09,670
yet shell is all driven ansible

00:02:06,850 --> 00:02:12,280
and the difference essentially as

00:02:09,670 --> 00:02:15,940
ansible is orchestrating systems over

00:02:12,280 --> 00:02:18,640
ssh based on rules like this playbook

00:02:15,940 --> 00:02:20,500
that you have to write and yachts uses

00:02:18,640 --> 00:02:23,230
the facts that's or entire software

00:02:20,500 --> 00:02:25,440
platform is built on top of RPM packages

00:02:23,230 --> 00:02:28,299
so everything is an RPM package

00:02:25,440 --> 00:02:30,420
configuration is an RPM software is an

00:02:28,299 --> 00:02:31,890
RPM and yeah

00:02:30,420 --> 00:02:33,720
builds a dependency tree with all the

00:02:31,890 --> 00:02:36,180
packets and from the dependencies

00:02:33,720 --> 00:02:38,310
between lose packets is able to infer

00:02:36,180 --> 00:02:43,520
what needs to be done in order to update

00:02:38,310 --> 00:02:45,660
for server so basically the idea is

00:02:43,520 --> 00:02:48,750
unlike ansible where you know you

00:02:45,660 --> 00:02:50,610
execute a playbook sorts off with yet

00:02:48,750 --> 00:02:52,830
shell you have some hosts and you just

00:02:50,610 --> 00:02:55,050
tell updates and then it does everything

00:02:52,830 --> 00:02:57,959
that needs to be done in an automated

00:02:55,050 --> 00:03:00,360
fashion and for a lot of things for

00:02:57,959 --> 00:03:02,550
error recovery too so it can heal itself

00:03:00,360 --> 00:03:05,730
and so on it's pretty cool you should

00:03:02,550 --> 00:03:08,160
check it out so we will Scout as a

00:03:05,730 --> 00:03:11,600
company we're not a small company

00:03:08,160 --> 00:03:16,980
anymore so we have like 700 employees

00:03:11,600 --> 00:03:20,880
about 150 maybe 200 and IT so that's a

00:03:16,980 --> 00:03:23,489
lot of developers what you can see here

00:03:20,880 --> 00:03:26,700
is the amounts of virtual machines we

00:03:23,489 --> 00:03:30,480
have on one of our data centers it's

00:03:26,700 --> 00:03:33,600
like six hundreds in fact we have more

00:03:30,480 --> 00:03:35,850
like two thousands in total and what

00:03:33,600 --> 00:03:38,160
this slides basically tell you is that

00:03:35,850 --> 00:03:40,320
we're in environments where there's a

00:03:38,160 --> 00:03:42,900
lot of stuff going on so we have a lot

00:03:40,320 --> 00:03:45,750
of developers and lots of software and

00:03:42,900 --> 00:03:47,549
in that kind of environment the worst

00:03:45,750 --> 00:03:50,340
thing that can happen to your software

00:03:47,549 --> 00:03:53,640
being a software developer is legacy

00:03:50,340 --> 00:03:56,190
which comes in many forms personally I

00:03:53,640 --> 00:03:58,380
think legacy means you can touch it so

00:03:56,190 --> 00:04:00,390
you know maybe it has no test so you

00:03:58,380 --> 00:04:02,609
don't notice if you break it or maybe it

00:04:00,390 --> 00:04:04,920
has no documentation and you don't know

00:04:02,609 --> 00:04:07,519
how to run the tests which is just as

00:04:04,920 --> 00:04:09,600
bad as having no test at all and

00:04:07,519 --> 00:04:11,040
basically you want to prevent that you

00:04:09,600 --> 00:04:13,950
don't want to see your software to

00:04:11,040 --> 00:04:16,549
become legacy and so what you do is you

00:04:13,950 --> 00:04:19,410
use the Python ecosystem which is a

00:04:16,549 --> 00:04:22,079
which really provides a lot of tools to

00:04:19,410 --> 00:04:24,630
to avoid writing bad software test

00:04:22,079 --> 00:04:26,940
frameworks linters like topics yeah this

00:04:24,630 --> 00:04:28,979
flake eight these are all really cool

00:04:26,940 --> 00:04:31,139
tools that you can use to avoid your

00:04:28,979 --> 00:04:34,380
software from slowly rotting to its

00:04:31,139 --> 00:04:36,240
death so that's one thing to keep in

00:04:34,380 --> 00:04:38,550
mind you really want to enforce all

00:04:36,240 --> 00:04:41,460
these best practices and use as much of

00:04:38,550 --> 00:04:43,400
these tools as possible for the

00:04:41,460 --> 00:04:46,400
challenge basically is that

00:04:43,400 --> 00:04:48,940
as a team decided that we want to

00:04:46,400 --> 00:04:51,710
empower our colleagues from operations

00:04:48,940 --> 00:04:54,110
we want them to use Python instead of

00:04:51,710 --> 00:04:57,590
things like bash and pearl because we

00:04:54,110 --> 00:04:59,180
think these things suck so we want them

00:04:57,590 --> 00:05:01,850
to use Python instead because it's

00:04:59,180 --> 00:05:03,500
simpler it's more readable it's easier

00:05:01,850 --> 00:05:06,610
to get productive with it versus a rich

00:05:03,500 --> 00:05:10,490
ecosystem and so the challenge we face

00:05:06,610 --> 00:05:13,130
essentially is that we do want these

00:05:10,490 --> 00:05:15,320
these colleagues to use Python and we

00:05:13,130 --> 00:05:18,500
want them to use best practices so that

00:05:15,320 --> 00:05:20,120
for a software does not become legacy so

00:05:18,500 --> 00:05:21,860
they should test it I should not write

00:05:20,120 --> 00:05:25,220
on the scripts and so on and so forth

00:05:21,860 --> 00:05:26,900
and so the problem is you can't show up

00:05:25,220 --> 00:05:29,180
and tell them yeah you're gonna use

00:05:26,900 --> 00:05:31,699
Python this is a very simple it's a cool

00:05:29,180 --> 00:05:33,289
language and then I have this huge list

00:05:31,699 --> 00:05:35,180
of things that you need to know and

00:05:33,289 --> 00:05:37,430
understand in order to write good Python

00:05:35,180 --> 00:05:39,260
code so you know you need to know how

00:05:37,430 --> 00:05:41,690
coverage works and you need to use it

00:05:39,260 --> 00:05:43,910
you need to know if lake 8 works you

00:05:41,690 --> 00:05:46,009
need to use pylons and so on and it's

00:05:43,910 --> 00:05:46,970
really overwhelming from a beginner's

00:05:46,009 --> 00:05:50,300
perspective

00:05:46,970 --> 00:05:53,870
so basically PI builder is the solution

00:05:50,300 --> 00:05:56,389
to that problem sneak peek what's what

00:05:53,870 --> 00:05:58,270
we're actually aiming for is you check

00:05:56,389 --> 00:06:00,979
out a project from source control and

00:05:58,270 --> 00:06:02,690
you'd CD into it and you have virtual

00:06:00,979 --> 00:06:05,389
land with PI blur installed and

00:06:02,690 --> 00:06:08,180
basically you just say pip which is

00:06:05,389 --> 00:06:10,010
short for PI builder and this this

00:06:08,180 --> 00:06:13,430
starts running so it does a lot of

00:06:10,010 --> 00:06:15,740
things and when it's done everything

00:06:13,430 --> 00:06:17,419
that was important has been taken care

00:06:15,740 --> 00:06:19,909
of and you know if you can check in or

00:06:17,419 --> 00:06:23,060
not so you run one comment and you know

00:06:19,909 --> 00:06:24,770
whether it changes a good or not so

00:06:23,060 --> 00:06:26,810
that's what we're aiming for here what

00:06:24,770 --> 00:06:29,330
you can see as it's running integration

00:06:26,810 --> 00:06:30,949
test it's running unit tests it's run -

00:06:29,330 --> 00:06:33,260
then jurors actually fly gate and

00:06:30,949 --> 00:06:34,460
frosted it's measuring the coverage

00:06:33,260 --> 00:06:38,599
teaming it's efficient

00:06:34,460 --> 00:06:41,090
so really it's fully automated how does

00:06:38,599 --> 00:06:43,460
it work well basically like every other

00:06:41,090 --> 00:06:46,220
build tool Under the Sun it's

00:06:43,460 --> 00:06:47,990
splitsville builds into tasks so you

00:06:46,220 --> 00:06:50,000
have these small building blocks of

00:06:47,990 --> 00:06:52,669
logic that have maybe dependencies on

00:06:50,000 --> 00:06:54,680
each other and you you run PI builder

00:06:52,669 --> 00:06:57,020
and tell it what tasks it should as it

00:06:54,680 --> 00:06:58,760
executes and then it makes a plan

00:06:57,020 --> 00:07:01,730
with the dependencies and the required

00:06:58,760 --> 00:07:04,190
order and it does that but that's still

00:07:01,730 --> 00:07:06,320
not enough actually because in that

00:07:04,190 --> 00:07:08,210
slide you still need the knowledge about

00:07:06,320 --> 00:07:10,250
the tasks that you want to execute so

00:07:08,210 --> 00:07:13,220
but still something you should have to

00:07:10,250 --> 00:07:14,000
document in a wiki or something and we

00:07:13,220 --> 00:07:17,150
don't want that

00:07:14,000 --> 00:07:19,070
so the solution basically is an the

00:07:17,150 --> 00:07:21,260
popular configuration file you have this

00:07:19,070 --> 00:07:24,680
defaults tasks thing here in the middle

00:07:21,260 --> 00:07:27,650
and that's what people should do when

00:07:24,680 --> 00:07:29,270
you just run it without tasks so when

00:07:27,650 --> 00:07:30,980
you run PI builder by default in this

00:07:29,270 --> 00:07:33,620
case it's going to run clean and then

00:07:30,980 --> 00:07:35,390
analyze and then publish and that's what

00:07:33,620 --> 00:07:37,370
we use to make it just work because we

00:07:35,390 --> 00:07:39,940
want people to just use one comment and

00:07:37,370 --> 00:07:43,850
then they know if I can check it or not

00:07:39,940 --> 00:07:45,920
so what I'm talking about until now is

00:07:43,850 --> 00:07:49,640
mostly it should sound like make

00:07:45,920 --> 00:07:52,160
probably so that max you say resolve

00:07:49,640 --> 00:07:54,080
will first already make and make as much

00:07:52,160 --> 00:07:57,470
better than PI builder yes you're right

00:07:54,080 --> 00:07:59,890
I think the strength of PI builder lies

00:07:57,470 --> 00:08:02,360
in its plug-in ecosystem because

00:07:59,890 --> 00:08:05,510
basically everything PI builder does is

00:08:02,360 --> 00:08:08,510
a plug-in so take for instance coverage

00:08:05,510 --> 00:08:11,030
it's using the coverage dot PI API and

00:08:08,510 --> 00:08:14,600
the cool thing about these things being

00:08:11,030 --> 00:08:16,220
plugins is that you you don't just

00:08:14,600 --> 00:08:17,750
measure the coverage and you know it's

00:08:16,220 --> 00:08:20,210
not just you and the build and it tells

00:08:17,750 --> 00:08:22,850
you over coverage is fifty percent it's

00:08:20,210 --> 00:08:25,130
using the API so it can take decisions

00:08:22,850 --> 00:08:27,260
based on the coverage and you as a

00:08:25,130 --> 00:08:28,790
developer can say for example yeah I

00:08:27,260 --> 00:08:31,280
don't want the coverage to sink below

00:08:28,790 --> 00:08:33,080
fifty percent and then automatically

00:08:31,280 --> 00:08:35,600
it's gonna break the builds if someone

00:08:33,080 --> 00:08:37,240
like removes all the tests because the

00:08:35,600 --> 00:08:39,560
coverage is going to be zero percent and

00:08:37,240 --> 00:08:41,930
that's something that gives you the

00:08:39,560 --> 00:08:44,330
grantee as a developer that people are

00:08:41,930 --> 00:08:46,190
following the best practices that you

00:08:44,330 --> 00:08:49,310
deems necessary to contribute to the

00:08:46,190 --> 00:08:52,220
project so another good example as we

00:08:49,310 --> 00:08:54,710
have all these lynchers built in so we

00:08:52,220 --> 00:08:58,160
can we can use fly gates or PAP eight or

00:08:54,710 --> 00:08:59,750
you know whatever and if you ever

00:08:58,160 --> 00:09:02,240
contributed to an open source project

00:08:59,750 --> 00:09:04,190
and python usually you make this

00:09:02,240 --> 00:09:07,550
contribution there's this pull requests

00:09:04,190 --> 00:09:10,140
and then so one of the guy with comets

00:09:07,550 --> 00:09:11,880
riots comes up and says oh yeah

00:09:10,140 --> 00:09:13,800
you know this is full of Pepe terrors

00:09:11,880 --> 00:09:15,120
and I'm going to make a comment on each

00:09:13,800 --> 00:09:17,670
of them and you're gonna have to fix

00:09:15,120 --> 00:09:19,500
them well when someone contributes to

00:09:17,670 --> 00:09:22,170
one of my projects like Pilar for

00:09:19,500 --> 00:09:23,940
instance I just direct the people to

00:09:22,170 --> 00:09:26,100
Travis I tell them yet look at Travis

00:09:23,940 --> 00:09:28,470
it's red because were some Peppe terrors

00:09:26,100 --> 00:09:30,840
please fix them and when it's green we

00:09:28,470 --> 00:09:33,750
can merge and the cool thing is he can

00:09:30,840 --> 00:09:36,270
run the full build on this machine

00:09:33,750 --> 00:09:40,290
because Travis is also just running PI

00:09:36,270 --> 00:09:42,180
builder without anything specific so one

00:09:40,290 --> 00:09:44,330
of the other highlights I guess is that

00:09:42,180 --> 00:09:47,550
we use a key value based configuration

00:09:44,330 --> 00:09:50,070
so basically the idea is if you can

00:09:47,550 --> 00:09:51,630
understand English and read it then you

00:09:50,070 --> 00:09:54,360
should understand what each of these

00:09:51,630 --> 00:09:57,060
lines does for instance for the first

00:09:54,360 --> 00:09:58,890
line of configuration here tells PI

00:09:57,060 --> 00:10:01,590
builder run the integration tests in

00:09:58,890 --> 00:10:04,680
parallel you kept you have two lines

00:10:01,590 --> 00:10:08,250
like here that tell PI builder to ignore

00:10:04,680 --> 00:10:10,680
some specific frosted warnings also like

00:10:08,250 --> 00:10:12,990
you probably noticed this is Python so

00:10:10,680 --> 00:10:16,530
we think it's pretty cool a lot of

00:10:12,990 --> 00:10:18,690
people have criticized setup PI for

00:10:16,530 --> 00:10:23,420
being a Python file because people

00:10:18,690 --> 00:10:25,650
actually abuse it and pretty bad ways

00:10:23,420 --> 00:10:28,670
personally I believe that with PI

00:10:25,650 --> 00:10:31,350
builder this is not a problem because we

00:10:28,670 --> 00:10:33,990
we don't have the same problems as setup

00:10:31,350 --> 00:10:36,690
PI I don't really have time to to get

00:10:33,990 --> 00:10:38,820
into details but essentially it has to

00:10:36,690 --> 00:10:40,110
do with the fact left that set of pi is

00:10:38,820 --> 00:10:42,420
packaged when you do a source

00:10:40,110 --> 00:10:45,540
distribution and the PI builder file is

00:10:42,420 --> 00:10:46,920
really just for development and when PI

00:10:45,540 --> 00:10:49,410
builder packaged something it actually

00:10:46,920 --> 00:10:50,940
writes a set of Pi file so you can be

00:10:49,410 --> 00:10:55,170
pretty sure that the file is going to be

00:10:50,940 --> 00:10:58,200
extremely clean another thing is we have

00:10:55,170 --> 00:11:01,050
requirements built in so in your PI

00:10:58,200 --> 00:11:03,390
builder config this built a PI file you

00:11:01,050 --> 00:11:06,270
can actually write what your project

00:11:03,390 --> 00:11:09,090
depends on in a declarative way so you

00:11:06,270 --> 00:11:11,640
can also separate between between normal

00:11:09,090 --> 00:11:16,170
runtime dependencies and dependencies so

00:11:11,640 --> 00:11:19,530
that's pretty cool and one of the one of

00:11:16,170 --> 00:11:21,840
the nice things I think is because PI

00:11:19,530 --> 00:11:22,769
builder is using pip another hood you

00:11:21,840 --> 00:11:25,319
can you can

00:11:22,769 --> 00:11:28,170
but specific configuration inside your

00:11:25,319 --> 00:11:30,989
project file and for instance like here

00:11:28,170 --> 00:11:32,699
the last line you can tell pip yeah for

00:11:30,989 --> 00:11:35,489
this project you're not going to use the

00:11:32,699 --> 00:11:37,559
public PI P server but instead you're

00:11:35,489 --> 00:11:39,809
gonna use our local installation of the

00:11:37,559 --> 00:11:41,999
DEF P server if you don't know the F P

00:11:39,809 --> 00:11:43,529
by the way from vulgar critical you

00:11:41,999 --> 00:11:47,339
should check it out two points you will

00:11:43,529 --> 00:11:50,879
just came out so you can do all this all

00:11:47,339 --> 00:11:52,589
this instrumentation stuff on on pip and

00:11:50,879 --> 00:11:55,199
this is really something you can do with

00:11:52,589 --> 00:11:57,629
requirements txt because requirements

00:11:55,199 --> 00:11:59,579
dot txt is just a new line separated

00:11:57,629 --> 00:12:01,290
file with requirements and you can't

00:11:59,579 --> 00:12:05,959
tell it to use another index just

00:12:01,290 --> 00:12:08,850
doesn't work so this is the last slide I

00:12:05,959 --> 00:12:11,279
still have a bit of time so I'm going to

00:12:08,850 --> 00:12:14,160
switch to a shell and show you how to

00:12:11,279 --> 00:12:15,720
get started with the project um maybe

00:12:14,160 --> 00:12:20,369
this this were also ends with some

00:12:15,720 --> 00:12:23,429
questions so I'm going to a temporary

00:12:20,369 --> 00:12:25,739
directory and actually I don't trust the

00:12:23,429 --> 00:12:28,069
Wi-Fi here because it dropped a few

00:12:25,739 --> 00:12:30,869
times already so I have a brutal length

00:12:28,069 --> 00:12:34,649
which is all already loaded with

00:12:30,869 --> 00:12:36,869
everything I need to show you so the

00:12:34,649 --> 00:12:38,819
most important thing is that PI builder

00:12:36,869 --> 00:12:40,709
is installed this is something you

00:12:38,819 --> 00:12:42,660
should always always put in a virtual

00:12:40,709 --> 00:12:45,089
length because it needs to see the

00:12:42,660 --> 00:12:47,220
packets in the virtual length and I'm

00:12:45,089 --> 00:12:50,399
going to make a project and name it EP

00:12:47,220 --> 00:12:53,459
14 so basically now I can run PI builder

00:12:50,399 --> 00:12:56,879
it's going to fail because you know it's

00:12:53,459 --> 00:12:59,189
not a project yet so we have this nifty

00:12:56,879 --> 00:13:02,360
little tool which is called start

00:12:59,189 --> 00:13:05,699
project yeah let's start start of course

00:13:02,360 --> 00:13:07,799
and this asked me a few questions so

00:13:05,699 --> 00:13:10,529
mostly the idea is you can just press

00:13:07,799 --> 00:13:13,439
ENTER all the time because it's going to

00:13:10,529 --> 00:13:15,959
suggest defaults so we have like this

00:13:13,439 --> 00:13:18,149
defaults project structure which tells

00:13:15,959 --> 00:13:20,879
that resources go into source main

00:13:18,149 --> 00:13:23,669
Python the unit tests go into source

00:13:20,879 --> 00:13:25,379
unit tests Python scripts go into source

00:13:23,669 --> 00:13:29,549
many scripts and so on I'm just going to

00:13:25,379 --> 00:13:31,740
stick with the defaults here and the

00:13:29,549 --> 00:13:34,199
scripts this is I think pretty important

00:13:31,740 --> 00:13:35,400
to notes the scripts are separated from

00:13:34,199 --> 00:13:38,100
the source

00:13:35,400 --> 00:13:40,590
because I have a verse with talk

00:13:38,100 --> 00:13:45,150
yesterday about building awesome comment

00:13:40,590 --> 00:13:46,980
line applications where the referee

00:13:45,150 --> 00:13:48,890
basically said yeah scripts are like

00:13:46,980 --> 00:13:51,870
vampires because they live forever and

00:13:48,890 --> 00:13:52,860
personal observation in most cases they

00:13:51,870 --> 00:13:54,600
also look like

00:13:52,860 --> 00:13:56,910
so we don't want them to be in resources

00:13:54,600 --> 00:14:00,360
and you know really keep with scripts to

00:13:56,910 --> 00:14:02,310
a minimum so that's the idea and now I

00:14:00,360 --> 00:14:05,730
have this project and I can run it and

00:14:02,310 --> 00:14:10,200
it's failing because basically I have 0%

00:14:05,730 --> 00:14:15,810
coverage I also have 0% sources so I'm

00:14:10,200 --> 00:14:18,180
gonna disable that and again a key value

00:14:15,810 --> 00:14:23,220
based configuration so really it's as

00:14:18,180 --> 00:14:24,990
easy as saying set property and the

00:14:23,220 --> 00:14:29,250
property is called coverage break build

00:14:24,990 --> 00:14:32,580
first documentation for that and I just

00:14:29,250 --> 00:14:35,160
set it to false and now I can build and

00:14:32,580 --> 00:14:37,800
it's gonna pass so it alerts me that the

00:14:35,160 --> 00:14:39,570
coverage is actually really low but it

00:14:37,800 --> 00:14:40,170
doesn't break with those that's a choice

00:14:39,570 --> 00:14:43,020
I can make

00:14:40,170 --> 00:14:44,790
as a developer so know what I'm gonna do

00:14:43,020 --> 00:14:48,030
is I'm gonna create a script

00:14:44,790 --> 00:14:51,540
yeah no scripts that but this is a

00:14:48,030 --> 00:14:54,330
easiest thing to do right now so source

00:14:51,540 --> 00:14:59,520
main strips I'm going to call it EP 14

00:14:54,330 --> 00:15:04,020
and start with the Python shebang user

00:14:59,520 --> 00:15:06,300
in and - you should also all the time

00:15:04,020 --> 00:15:09,330
use that shebang unless you specifically

00:15:06,300 --> 00:15:12,090
want Python 3 or 2 because it's this

00:15:09,330 --> 00:15:17,130
works with virtual life - and I'm just

00:15:12,090 --> 00:15:21,450
gonna print hello so I'm gonna run a

00:15:17,130 --> 00:15:23,820
full build again and what happens is it

00:15:21,450 --> 00:15:26,880
built a source distribution and this

00:15:23,820 --> 00:15:32,750
target folder and why what I can do is

00:15:26,880 --> 00:15:32,750
simply install it target just

00:15:35,270 --> 00:15:40,890
so in case you didn't know you can pip

00:15:37,980 --> 00:15:44,550
install target sets which is pretty cool

00:15:40,890 --> 00:15:46,620
I know looky looky I have this EP 14

00:15:44,550 --> 00:15:49,800
scripts which has been installed in my

00:15:46,620 --> 00:15:52,530
virtual life just like that's unlike

00:15:49,800 --> 00:15:54,540
with setup I I didn't have to tell I

00:15:52,530 --> 00:15:56,220
didn't have to tell the tool that this

00:15:54,540 --> 00:15:59,340
is the scripts I just dropped it in the

00:15:56,220 --> 00:16:04,980
right place and it just works so now

00:15:59,340 --> 00:16:08,190
camp a pond it's solid so next time I

00:16:04,980 --> 00:16:09,960
next thing I'm going to do is move a bit

00:16:08,190 --> 00:16:13,880
of a stripped into a source file and

00:16:09,960 --> 00:16:18,920
write a test for it um so sauce mine -

00:16:13,880 --> 00:16:18,920
yeah let's let's start with a unit test

00:16:20,510 --> 00:16:36,600
EP 14 tests I don't know so missus

00:16:33,180 --> 00:16:39,870
boilerplate note that you can also use a

00:16:36,600 --> 00:16:42,420
PI test or those tests or whatever so if

00:16:39,870 --> 00:16:45,990
you rather use asserts with my test man

00:16:42,420 --> 00:16:49,410
works - and I'm just going to write a

00:16:45,990 --> 00:16:55,170
simple test that sure asserts that so

00:16:49,410 --> 00:16:57,900
yeah I don't know so it equal I'm gonna

00:16:55,170 --> 00:17:06,420
call it yeah no not EP 14 but like

00:16:57,900 --> 00:17:10,740
Europe - and I expect this to to yield a

00:17:06,420 --> 00:17:13,520
string which will be Europe - so I also

00:17:10,740 --> 00:17:13,520
need to importance

00:17:15,730 --> 00:17:21,490
so now I have a test which is obviously

00:17:18,610 --> 00:17:25,649
gonna fail because I don't have a P 14

00:17:21,490 --> 00:17:29,320
package yet so I can I can check it out

00:17:25,649 --> 00:17:34,529
and it works because I named the test

00:17:29,320 --> 00:17:37,929
wrong yes

00:17:34,529 --> 00:17:41,440
um so versa convention for test file

00:17:37,929 --> 00:17:45,460
names - and it's a glob and the default

00:17:41,440 --> 00:17:48,610
as ap 14 is a stars of wildcards

00:17:45,460 --> 00:17:51,159
underscore tests with an S so I have to

00:17:48,610 --> 00:17:52,809
name my files like this this is also

00:17:51,159 --> 00:17:55,019
something you can change but again I'm

00:17:52,809 --> 00:17:58,000
just sticking with the defaults and

00:17:55,019 --> 00:18:00,760
yes/no so I run the tests and it says

00:17:58,000 --> 00:18:04,899
yeah it can't import CP 14 so I'm going

00:18:00,760 --> 00:18:06,760
to create read module and drop in and

00:18:04,899 --> 00:18:09,970
source main Python so not where the

00:18:06,760 --> 00:18:16,120
scripts are and I'm gonna put everything

00:18:09,970 --> 00:18:20,620
in an init spy and basically it's just

00:18:16,120 --> 00:18:22,840
if this function Europe - that's going

00:18:20,620 --> 00:18:25,570
to return something else right now so

00:18:22,840 --> 00:18:30,130
return I don't know no because I want to

00:18:25,570 --> 00:18:33,850
test to be read so I can run the tests

00:18:30,130 --> 00:18:37,000
and you can see I didn't have to tell PI

00:18:33,850 --> 00:18:38,950
builder what what I wear my tests are I

00:18:37,000 --> 00:18:41,679
just run it and it just works because it

00:18:38,950 --> 00:18:45,519
knows where the tests are no the test is

00:18:41,679 --> 00:18:48,570
red I have to fix that so now I can

00:18:45,519 --> 00:18:48,570
return like Europe -

00:18:55,670 --> 00:19:02,960
and no it's still works yes so basically

00:18:59,930 --> 00:19:07,060
the problem I have here is I called my

00:19:02,960 --> 00:19:09,340
package exactly like the project so

00:19:07,060 --> 00:19:13,400
essentially what you see here is that

00:19:09,340 --> 00:19:15,170
the package conflicts with with actual a

00:19:13,400 --> 00:19:21,740
source distribution so I have to fix

00:19:15,170 --> 00:19:26,720
that too I'm just gonna call it live

00:19:21,740 --> 00:19:33,260
probably so I have to rename the listen

00:19:26,720 --> 00:19:35,870
with test to right and now it works I

00:19:33,260 --> 00:19:42,530
have 100% coverage which is not very

00:19:35,870 --> 00:19:44,930
difficult and yes but that works so I'm

00:19:42,530 --> 00:19:46,550
mostly done with demonstration I think

00:19:44,930 --> 00:19:48,950
I'll take questions now maybe you have

00:19:46,550 --> 00:20:02,810
questions which are related to what I

00:19:48,950 --> 00:20:04,460
just did so feel free to ask away the

00:20:02,810 --> 00:20:07,700
question was if we have Sphinx

00:20:04,460 --> 00:20:09,260
integration not right now no it's

00:20:07,700 --> 00:20:11,510
probably just a matter of writing a

00:20:09,260 --> 00:20:13,280
plugin because if I think things is

00:20:11,510 --> 00:20:16,190
largely automated so we don't have to do

00:20:13,280 --> 00:20:28,000
a lot of things but there is no not

00:20:16,190 --> 00:20:28,000
right now yes just a plugin yes

00:20:28,990 --> 00:20:34,760
so in our company we use Tim City which

00:20:32,150 --> 00:20:38,810
is basically Jenkins with better CSS and

00:20:34,760 --> 00:20:41,360
it cost a shitload of money but we have

00:20:38,810 --> 00:20:44,090
colleagues that use Jenkins with it we

00:20:41,360 --> 00:20:48,050
also use Travis with it essentially and

00:20:44,090 --> 00:20:51,770
the cool thing is that when you decide

00:20:48,050 --> 00:20:53,570
to use a CI server it's it's most of the

00:20:51,770 --> 00:20:55,370
time it's difficult because you have to

00:20:53,570 --> 00:20:58,070
you know you have to find out what your

00:20:55,370 --> 00:21:01,220
project dependencies are how to get them

00:20:58,070 --> 00:21:02,900
on real CI server and so on and with PI

00:21:01,220 --> 00:21:05,270
builder really you just run the PI

00:21:02,900 --> 00:21:08,200
builder commands and it's exactly the

00:21:05,270 --> 00:21:08,200
same as on your workstation

00:21:25,009 --> 00:21:30,090
yes so so the question was how the

00:21:27,389 --> 00:21:32,340
reporting works basically you have two

00:21:30,090 --> 00:21:35,580
choices where one of the things you can

00:21:32,340 --> 00:21:38,460
do is on most CI servers you can see the

00:21:35,580 --> 00:21:40,110
output of a comment so you you have the

00:21:38,460 --> 00:21:40,830
output of PI builder which tells you

00:21:40,110 --> 00:21:43,799
what's wrong

00:21:40,830 --> 00:21:48,000
the other thing you can do is you have

00:21:43,799 --> 00:21:50,309
this this target directory and inside

00:21:48,000 --> 00:21:53,070
inside this directory there's the

00:21:50,309 --> 00:21:56,009
reports directory and there you can see

00:21:53,070 --> 00:21:57,600
for example in JSON format or you know

00:21:56,009 --> 00:22:00,779
plain text for example if you're

00:21:57,600 --> 00:22:03,470
interested in coverage you can see like

00:22:00,779 --> 00:22:06,240
you know this only two statements and

00:22:03,470 --> 00:22:14,429
100% coverage versus also the same thing

00:22:06,240 --> 00:22:18,360
with Jason so you can reuse that yes so

00:22:14,429 --> 00:22:20,159
on most the AI servers also actually I

00:22:18,360 --> 00:22:22,259
only know of Tim city but I think

00:22:20,159 --> 00:22:24,029
Jenkins can do it too you can like

00:22:22,259 --> 00:22:26,639
upload artifacts

00:22:24,029 --> 00:22:30,210
after a build so what we do if Tim City

00:22:26,639 --> 00:22:33,179
has just put up all these reports on the

00:22:30,210 --> 00:22:34,860
on the builds so that you know if it

00:22:33,179 --> 00:22:38,100
fails you can look at for example the

00:22:34,860 --> 00:22:43,370
coverage or like aids and you see what's

00:22:38,100 --> 00:22:43,370
wrong does that answer your questions

00:22:45,289 --> 00:22:48,919

YouTube URL: https://www.youtube.com/watch?v=jufUqH3bDG0


