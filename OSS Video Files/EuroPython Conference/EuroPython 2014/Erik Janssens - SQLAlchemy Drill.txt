Title: Erik Janssens - SQLAlchemy Drill
Publication date: 2015-04-18
Playlist: EuroPython 2014
Description: 
	Erik Janssens - SQLAlchemy Drill
[EuroPython 2014]
[23 July 2014]

If you have been looking to use SQLAlchemy in one of your projects, but found the documentation a bit overwhelming then this talk is for you.
If you have used SQLAlchemy but feel there are some holes in your knowledge of the library, then this talk is for you as well.  The idea is that during this talk you bring your laptop with you, and make sure you have SQLAlchemy installed. At the beginning of the talk, we fire up our Python interpreter and start to explore the library in a structured way. In the next 25 minutes, we'll go hands on through the various parts of the SQLAlchemy. We try out the concepts of each part of the library and make sure the basics are well understood.

-----

In this talk will introduce the audience to SQLAlchemy in a well structured way, so that basic concepts are understood. This talk will be a combination of slides and interactive code editing in IPython. Both the working of SQLAlchemy as well as best practices in using SQLAlchemy will be demonstrated.

I will demonstrate the basic workings of:

* the SQL generation layer
* the DDL generation
* the ORM
* the session
* transactions

The used code will allow those who have their laptop with them to try
the code samples for themselves.
Captions: 
	00:00:14,820 --> 00:00:20,730
okay good morning everybody thanks for

00:00:17,730 --> 00:00:23,759
showing up eric has a late addition to

00:00:20,730 --> 00:00:28,410
the program he volunteered to speak for

00:00:23,759 --> 00:00:31,500
somebody who with this talk so I'd like

00:00:28,410 --> 00:00:36,720
to thank you for that and with no

00:00:31,500 --> 00:00:40,019
further as a guinea well good morning my

00:00:36,720 --> 00:00:42,720
name is eric johnson's i spent the last

00:00:40,019 --> 00:00:45,330
number of years working with sequel

00:00:42,720 --> 00:00:48,600
alchemy on various projects and this

00:00:45,330 --> 00:00:50,910
talk is a sequel alchemy drill so the

00:00:48,600 --> 00:00:53,820
idea is that you fire up a python

00:00:50,910 --> 00:00:56,760
console you do pip install sigo alchemy

00:00:53,820 --> 00:00:58,949
and you follow the commands i will type

00:00:56,760 --> 00:01:00,989
on the screen you fall of them on your

00:00:58,949 --> 00:01:03,090
own console so that at the end of this

00:01:00,989 --> 00:01:05,369
session you've actually started using

00:01:03,090 --> 00:01:08,450
sequel alchemy and we've done together

00:01:05,369 --> 00:01:11,399
through all the basics of sequel alchemy

00:01:08,450 --> 00:01:15,720
now the whole session can be downloaded

00:01:11,399 --> 00:01:20,159
at my website with all the instructions

00:01:15,720 --> 00:01:24,750
if if you are not fast enough to follow

00:01:20,159 --> 00:01:27,840
so what is sequel alchemy sequel alchemy

00:01:24,750 --> 00:01:30,560
is two things it's a Python tool kit

00:01:27,840 --> 00:01:33,840
that allows you to manipulate SQL and

00:01:30,560 --> 00:01:35,689
it's an object-relational mapping what

00:01:33,840 --> 00:01:39,780
is the important word on this slide

00:01:35,689 --> 00:01:41,729
indeed relational because if you look at

00:01:39,780 --> 00:01:44,700
sequel out me and you compare it with

00:01:41,729 --> 00:01:47,310
other object relational mapping then you

00:01:44,700 --> 00:01:50,009
will notice that CQ alchemy has spent a

00:01:47,310 --> 00:01:54,090
great deal of effort in getting the

00:01:50,009 --> 00:01:55,530
relational part correct so if you

00:01:54,090 --> 00:02:00,180
haven't started your Python interpreter

00:01:55,530 --> 00:02:02,909
yet do so now and let's move on if I'm

00:02:00,180 --> 00:02:07,140
going too fast please give me a sign if

00:02:02,909 --> 00:02:08,489
I'm going too slow as well so the first

00:02:07,140 --> 00:02:11,850
thing you should know about psycho

00:02:08,489 --> 00:02:15,150
alchemy is that it's not a tool to hide

00:02:11,850 --> 00:02:18,120
SQL from you instead it's a tool that

00:02:15,150 --> 00:02:22,350
allows you to work with SQL and it will

00:02:18,120 --> 00:02:24,480
help you to manipulate SQL so don't

00:02:22,350 --> 00:02:27,100
don't try to use it as a tool that

00:02:24,480 --> 00:02:30,140
completely hides the SQL for you

00:02:27,100 --> 00:02:32,240
you still need to look at it and it's

00:02:30,140 --> 00:02:33,770
even good to look at it so when you work

00:02:32,240 --> 00:02:36,770
with sickle alchemy you are encouraged

00:02:33,770 --> 00:02:40,160
to look at the SQL it generates to do so

00:02:36,770 --> 00:02:43,150
you do so through the Python logging

00:02:40,160 --> 00:02:46,370
module so we import the logging module

00:02:43,150 --> 00:02:50,390
we're now going to configure the logging

00:02:46,370 --> 00:02:59,240
of our Python interpreter we set it to

00:02:50,390 --> 00:03:02,570
the debugging level like this and now

00:02:59,240 --> 00:03:05,390
we'll configure sequel alchemy to learn

00:03:02,570 --> 00:03:08,590
all these statements through the logging

00:03:05,390 --> 00:03:13,730
module so first we get the logger which

00:03:08,590 --> 00:03:18,140
is psycho alchemy dot engine dot base if

00:03:13,730 --> 00:03:21,140
you turn on this blogger he will seek

00:03:18,140 --> 00:03:23,210
lockamy will log all the SQL it sends to

00:03:21,140 --> 00:03:28,250
the database and you will also see the

00:03:23,210 --> 00:03:35,300
results it receives from the database so

00:03:28,250 --> 00:03:38,960
we set a level to debug as well ok now

00:03:35,300 --> 00:03:42,860
if you work with databases in Python you

00:03:38,960 --> 00:03:45,470
work with the Python DB API and the

00:03:42,860 --> 00:03:48,020
Python the bapi is actually just a

00:03:45,470 --> 00:03:51,170
specification to which the various

00:03:48,020 --> 00:03:53,600
database drivers impart and conform so

00:03:51,170 --> 00:03:57,530
that all the database drivers work more

00:03:53,600 --> 00:03:59,780
or less the same way but when you work

00:03:57,530 --> 00:04:02,360
with the Python DB API you need to take

00:03:59,780 --> 00:04:04,610
care of a lot of things yourself you

00:04:02,360 --> 00:04:07,190
need to open and close connections to

00:04:04,610 --> 00:04:11,360
the database as you know doing is doing

00:04:07,190 --> 00:04:12,830
so is uses some resources so you want to

00:04:11,360 --> 00:04:15,770
pull your connections you need a

00:04:12,830 --> 00:04:17,090
connection pool if you work with SQL

00:04:15,770 --> 00:04:19,280
statements you need to manage your

00:04:17,090 --> 00:04:21,140
research manually if you work with

00:04:19,280 --> 00:04:23,780
transactions you need to manage those as

00:04:21,140 --> 00:04:30,050
well and already at this level sequel

00:04:23,780 --> 00:04:31,910
alchemy is going to help you so I'll

00:04:30,050 --> 00:04:34,280
just import everything from psycho

00:04:31,910 --> 00:04:36,470
alchemy sequel alchemy comes with a

00:04:34,280 --> 00:04:39,590
connection pool in sequel alchemy speak

00:04:36,470 --> 00:04:40,350
this is called an engine so let's create

00:04:39,590 --> 00:04:49,920
a call

00:04:40,350 --> 00:04:53,490
Shampoo so this is a connection pool to

00:04:49,920 --> 00:04:55,530
an in-memory SQLite database in memory

00:04:53,490 --> 00:04:58,370
it's handy for development because it's

00:04:55,530 --> 00:05:02,460
easy to throw away now we can get a

00:04:58,370 --> 00:05:05,430
database connection out of this pool so

00:05:02,460 --> 00:05:08,220
you see connection is engine not connect

00:05:05,430 --> 00:05:11,160
and now we have a database connection

00:05:08,220 --> 00:05:24,150
and we can send SQL through this

00:05:11,160 --> 00:05:26,850
connection see simple SQL command and

00:05:24,150 --> 00:05:29,670
you see sequel alchemy locks what it

00:05:26,850 --> 00:05:33,450
sends to the database it didn't receive

00:05:29,670 --> 00:05:36,480
anything back yet now we got a result

00:05:33,450 --> 00:05:38,430
object back and we call the scalar

00:05:36,480 --> 00:05:41,130
function which just returns the first

00:05:38,430 --> 00:05:43,260
element of the first row and now it

00:05:41,130 --> 00:05:46,920
retrieves data from the database and it

00:05:43,260 --> 00:05:48,780
prints it out so the engine the

00:05:46,920 --> 00:05:51,840
connection pool is the first important

00:05:48,780 --> 00:05:56,190
concept in signal kimmy second important

00:05:51,840 --> 00:05:59,100
concept is metadata metadata insecure

00:05:56,190 --> 00:06:01,920
alchemy speak it's a set of Python

00:05:59,100 --> 00:06:04,650
objects that describe your database

00:06:01,920 --> 00:06:07,530
schema so they describe your tables your

00:06:04,650 --> 00:06:13,100
constraints your indexes things like

00:06:07,530 --> 00:06:13,100
that so let's create a meta data object

00:06:14,720 --> 00:06:21,540
so this will describe our database

00:06:18,300 --> 00:06:27,600
schema once we have this we can create a

00:06:21,540 --> 00:06:31,740
table so a table it's a Python object as

00:06:27,600 --> 00:06:35,520
well it's called table we give it a name

00:06:31,740 --> 00:06:38,940
person we specify that it belongs to

00:06:35,520 --> 00:06:45,770
this set of metadata and then we had

00:06:38,940 --> 00:06:55,170
some columns to the table first

00:06:45,770 --> 00:07:04,100
an integer primary key and we'll give

00:06:55,170 --> 00:07:08,730
the person a name as well that's string

00:07:04,100 --> 00:07:15,060
25 characters long and it's a required

00:07:08,730 --> 00:07:19,020
field so we set nullable to false okay

00:07:15,060 --> 00:07:21,300
this is a table object from a tip a

00:07:19,020 --> 00:07:25,290
table object has an attribute problems

00:07:21,300 --> 00:07:27,890
which is its list of columns if I

00:07:25,290 --> 00:07:31,920
printed out will be formatted better

00:07:27,890 --> 00:07:34,560
okay so you see the table as an ID and a

00:07:31,920 --> 00:07:39,900
name column we can now also have a look

00:07:34,560 --> 00:07:47,190
at our meta data object which has a list

00:07:39,900 --> 00:07:52,080
of tables in the metadata like this now

00:07:47,190 --> 00:07:54,600
we just created our schema in Python

00:07:52,080 --> 00:07:57,960
objects so we haven't yet created at the

00:07:54,600 --> 00:08:00,900
tables in the database itself to do so

00:07:57,960 --> 00:08:03,780
we are going to instruct the metadata to

00:08:00,900 --> 00:08:07,820
create itself in the database through a

00:08:03,780 --> 00:08:13,170
connection pool so we say meta data

00:08:07,820 --> 00:08:15,800
create all using the engine it will

00:08:13,170 --> 00:08:18,810
check out the connection if it needs one

00:08:15,800 --> 00:08:23,070
and check it beginning to the pool now

00:08:18,810 --> 00:08:25,860
you see the SQL to create the table is

00:08:23,070 --> 00:08:29,970
sent to the database and now the table

00:08:25,860 --> 00:08:32,700
exists in the database now I set that

00:08:29,970 --> 00:08:35,360
psycho alchemy is a tool that allows you

00:08:32,700 --> 00:08:39,030
or assist you to manipulate SQL clauses

00:08:35,360 --> 00:08:42,419
so how do we create clothes let's create

00:08:39,030 --> 00:08:47,070
an insert clause for our table you do so

00:08:42,419 --> 00:08:49,650
by calling the insert method on the

00:08:47,070 --> 00:08:51,840
table so now we have a close I can print

00:08:49,650 --> 00:08:53,400
the close this clause is a white an

00:08:51,840 --> 00:08:56,790
object it's a Python object that

00:08:53,400 --> 00:08:58,930
represents an SQL close yeah if I print

00:08:56,790 --> 00:09:03,820
the clothes I get some soda as

00:08:58,930 --> 00:09:06,910
ql code this didn't execute anything so

00:09:03,820 --> 00:09:09,610
how do we execute is closed again we'll

00:09:06,910 --> 00:09:18,820
send it through the connection pool so I

00:09:09,610 --> 00:09:21,459
say engine execute the clause and I give

00:09:18,820 --> 00:09:28,180
some arguments for example name is Guido

00:09:21,459 --> 00:09:33,339
and now you see sequel alchemy inserted

00:09:28,180 --> 00:09:37,540
either in our person tables we can

00:09:33,339 --> 00:09:42,190
create select clauses in the same way so

00:09:37,540 --> 00:09:44,770
we see table dot select this is Select

00:09:42,190 --> 00:09:46,180
Clause and now this is the nice thing

00:09:44,770 --> 00:09:48,880
about psycho alchemy you can start

00:09:46,180 --> 00:09:52,270
manipulating this close so we have now a

00:09:48,880 --> 00:09:55,149
very simple clause we just selects all

00:09:52,270 --> 00:09:58,050
persons from the database i manipulated

00:09:55,149 --> 00:10:04,000
and i say i create a new clothes object

00:09:58,050 --> 00:10:07,270
which limits the previous close to one

00:10:04,000 --> 00:10:09,730
row print the clothes you see the SQL

00:10:07,270 --> 00:10:12,670
has changed the limit is there as well I

00:10:09,730 --> 00:10:19,330
can further manipulate this clause and I

00:10:12,670 --> 00:10:23,080
can say order this clause by the name of

00:10:19,330 --> 00:10:25,450
the person like this print the clothes

00:10:23,080 --> 00:10:27,520
and the clause has been manipulated as

00:10:25,450 --> 00:10:32,410
well this is very handy if you need to

00:10:27,520 --> 00:10:35,680
build up complex queries you can do much

00:10:32,410 --> 00:10:39,850
the same thing for delete clauses and

00:10:35,680 --> 00:10:43,690
update closes now let's move over to the

00:10:39,850 --> 00:10:45,400
object relational mapping part to use

00:10:43,690 --> 00:10:47,680
the object relational mapping of psycho

00:10:45,400 --> 00:10:50,079
alchemy the easiest thing is to use the

00:10:47,680 --> 00:10:52,720
declarative extension the declarative

00:10:50,079 --> 00:10:55,750
extension allows you to define your

00:10:52,720 --> 00:10:59,589
classes and tables at the same time

00:10:55,750 --> 00:11:01,480
using the active record pattern you can

00:10:59,589 --> 00:11:04,480
use other patterns with psycho alchemy

00:11:01,480 --> 00:11:09,130
as well but for the sake of a short

00:11:04,480 --> 00:11:11,360
drill let's let's take this route so I

00:11:09,130 --> 00:11:24,769
will start with a fresh

00:11:11,360 --> 00:11:36,230
meta data object I import the

00:11:24,769 --> 00:11:38,600
declarative extension now what the first

00:11:36,230 --> 00:11:43,670
thing we will do is create a base clause

00:11:38,600 --> 00:11:47,089
and all mapped classes will derive from

00:11:43,670 --> 00:11:53,390
this base clause so you create base

00:11:47,089 --> 00:11:56,329
class using the declarative base

00:11:53,390 --> 00:12:01,040
function in sequel alchemy this will at

00:11:56,329 --> 00:12:03,110
the same time associate all the clauses

00:12:01,040 --> 00:12:05,720
that derive from the base class with a

00:12:03,110 --> 00:12:09,019
certain meta data object so that if we

00:12:05,720 --> 00:12:13,399
define a subclass of base we will also

00:12:09,019 --> 00:12:16,640
define a table within this meta data so

00:12:13,399 --> 00:12:21,529
let's define our sub class so we have

00:12:16,640 --> 00:12:26,120
the person that derives from base we

00:12:21,529 --> 00:12:28,790
give it an under under table name and

00:12:26,120 --> 00:12:33,560
the render a tribute which is the name

00:12:28,790 --> 00:12:44,720
of the table again the person needs an

00:12:33,560 --> 00:12:48,010
ID integer it's a primary key and we

00:12:44,720 --> 00:12:48,010
give the person unnamed

00:12:57,560 --> 00:13:17,000
like this what what did I do wrong Isaac

00:13:08,050 --> 00:13:27,410
alive next up I don't up here okay

00:13:17,000 --> 00:13:31,150
thank you know what's the stupid our

00:13:27,410 --> 00:13:36,589
table person is already defined in this

00:13:31,150 --> 00:13:41,920
meta data object create a new base

00:13:36,589 --> 00:13:48,730
kelan's create a new meta data object

00:13:41,920 --> 00:13:53,089
the base closed again and create okay

00:13:48,730 --> 00:13:56,630
now I have this person class you'll see

00:13:53,089 --> 00:14:01,670
that at the same time we created a table

00:13:56,630 --> 00:14:04,630
if we print person and dot under under

00:14:01,670 --> 00:14:10,670
table we get the table that is created

00:14:04,630 --> 00:14:13,970
the table as columns and psycho alchemy

00:14:10,670 --> 00:14:16,910
also created a mapper object a mapper

00:14:13,970 --> 00:14:20,089
object defines how the table is mapped

00:14:16,910 --> 00:14:22,520
to the clause so in this case it's just

00:14:20,089 --> 00:14:26,810
easy every column maps to an attribute

00:14:22,520 --> 00:14:29,570
but that can be different as well so

00:14:26,810 --> 00:14:31,460
again we will only create the table

00:14:29,570 --> 00:14:34,339
object now we still need to create or

00:14:31,460 --> 00:14:39,320
table in the database so we'll say

00:14:34,339 --> 00:14:41,959
mental data create all through the

00:14:39,320 --> 00:14:44,450
engine and it didn't actually do

00:14:41,959 --> 00:14:47,420
anything because our table existed

00:14:44,450 --> 00:14:49,970
already in the database and seek welcome

00:14:47,420 --> 00:14:51,589
it just looks to see if the table

00:14:49,970 --> 00:14:59,020
already exists and it doesn't create a

00:14:51,589 --> 00:15:01,339
new one so now we have created our class

00:14:59,020 --> 00:15:04,640
next thing we're going to do is we're

00:15:01,339 --> 00:15:07,520
going to create objects again the

00:15:04,640 --> 00:15:10,790
relational part of sequel alchemy comes

00:15:07,520 --> 00:15:13,460
into scope now because in psychology me

00:15:10,790 --> 00:15:16,700
you never manipulate or create an object

00:15:13,460 --> 00:15:19,580
alone you always work with sets of

00:15:16,700 --> 00:15:21,830
related objects and those sets of

00:15:19,580 --> 00:15:23,780
related objects they are grouped in a

00:15:21,830 --> 00:15:26,780
session so a session is a group of

00:15:23,780 --> 00:15:31,100
objects you're working with so we have

00:15:26,780 --> 00:15:32,900
to create a session first in sequel

00:15:31,100 --> 00:15:36,020
alchemy you first create a session

00:15:32,900 --> 00:15:37,970
factory and a session factory it's

00:15:36,020 --> 00:15:42,070
normally indicated with this session

00:15:37,970 --> 00:15:46,040
with a capital S is created with the

00:15:42,070 --> 00:15:50,360
session major function and it's bound to

00:15:46,040 --> 00:15:57,350
a connection pool to an engine from

00:15:50,360 --> 00:16:00,380
sequin kimmy first import all the object

00:15:57,350 --> 00:16:03,410
relational mapping related things now

00:16:00,380 --> 00:16:05,330
I've curry knif a session factory with

00:16:03,410 --> 00:16:07,610
the session factory I can create a

00:16:05,330 --> 00:16:13,130
session this is usually in the

00:16:07,610 --> 00:16:15,890
documentation session with a small s so

00:16:13,130 --> 00:16:20,740
this is our session now I can start

00:16:15,890 --> 00:16:26,420
create personal objects create a person

00:16:20,740 --> 00:16:28,340
with name gido again I have a person but

00:16:26,420 --> 00:16:30,440
this person doesn't belong to a session

00:16:28,340 --> 00:16:34,640
yet so the first thing I have to do

00:16:30,440 --> 00:16:37,570
after creating a person is added to this

00:16:34,640 --> 00:16:41,630
set of objects I'm going to manipulate

00:16:37,570 --> 00:16:45,080
now I can check whether person is now in

00:16:41,630 --> 00:16:52,310
the session that's true and if you look

00:16:45,080 --> 00:16:56,330
in session dot new you'll get a list or

00:16:52,310 --> 00:16:58,880
a set of all the objects that have not

00:16:56,330 --> 00:17:00,980
yet been written to the database to

00:16:58,880 --> 00:17:05,300
write the objects to the database I do

00:17:00,980 --> 00:17:07,970
session not flesh and you see now the

00:17:05,300 --> 00:17:10,340
SQL is generated to insert the person if

00:17:07,970 --> 00:17:12,170
you want to retrieve objects from the

00:17:10,340 --> 00:17:16,820
database you go through the session as

00:17:12,170 --> 00:17:19,700
well so you create a query object which

00:17:16,820 --> 00:17:21,650
you do through the session query method

00:17:19,700 --> 00:17:26,360
you say very the

00:17:21,650 --> 00:17:29,530
person okay now i'm going to retrieve

00:17:26,360 --> 00:17:29,530
all persons from the database

00:17:37,320 --> 00:17:48,059
and I got at the end a list of person

00:17:40,380 --> 00:17:50,190
objects back now I said that the most

00:17:48,059 --> 00:17:52,620
important part of psychology me is is

00:17:50,190 --> 00:17:54,960
mapping the relations so let's let's

00:17:52,620 --> 00:17:56,820
start with the relations we're going to

00:17:54,960 --> 00:18:00,450
create an address class which is related

00:17:56,820 --> 00:18:03,210
to a person so we create an address

00:18:00,450 --> 00:18:14,190
class which is a subclass of days as

00:18:03,210 --> 00:18:17,120
well as a different table name give you

00:18:14,190 --> 00:18:17,120
the primary key

00:18:25,610 --> 00:18:30,700
and give it a street so very simple

00:18:28,340 --> 00:18:30,700
address

00:18:39,389 --> 00:18:45,779
ok so again we created our objects now

00:18:43,349 --> 00:18:54,869
we still need to create the table in the

00:18:45,779 --> 00:18:57,929
database let's recreate all our tables

00:18:54,869 --> 00:19:05,879
from the metadata and you see a new

00:18:57,929 --> 00:19:08,759
table is created in the database so now

00:19:05,879 --> 00:19:13,919
we only defined our relationship at the

00:19:08,759 --> 00:19:19,379
database oh I forgot to do this i'm

00:19:13,919 --> 00:19:26,609
going to add to the address a person ID

00:19:19,379 --> 00:19:34,049
column which is an integer as well but a

00:19:26,609 --> 00:19:35,909
foreign key to the person forgot to do

00:19:34,049 --> 00:19:43,469
this in the definition but i can edit

00:19:35,909 --> 00:19:47,519
later on i'll have to recreate the

00:19:43,469 --> 00:19:53,219
database schema now i'll drop everything

00:19:47,519 --> 00:19:56,159
and create it again ok so in the in this

00:19:53,219 --> 00:19:59,309
line I only defines the relationship at

00:19:56,159 --> 00:20:04,559
the database level I now also want to

00:19:59,309 --> 00:20:07,799
define it at the object level so I give

00:20:04,559 --> 00:20:14,009
the address class a person attribute

00:20:07,799 --> 00:20:21,029
which relates to a person and at the

00:20:14,009 --> 00:20:24,719
same time I'm going to give the person

00:20:21,029 --> 00:20:27,029
plus an attribute addresses which is a

00:20:24,719 --> 00:20:29,729
list of all the addresses related to the

00:20:27,029 --> 00:20:33,749
person that's done like this sequel

00:20:29,729 --> 00:20:35,700
alchemy looks at the relation between

00:20:33,749 --> 00:20:37,919
person and address tables sees that

00:20:35,700 --> 00:20:40,169
there is a foreign key and then we'll

00:20:37,919 --> 00:20:44,549
figure out how to do the relations at

00:20:40,169 --> 00:20:50,840
the object level ok I have to and I need

00:20:44,549 --> 00:20:55,380
a new person now this is my

00:20:50,840 --> 00:21:08,610
okay so now i have my person i'll create

00:20:55,380 --> 00:21:12,200
an address related to the person let's

00:21:08,610 --> 00:21:17,190
say give your lives in the cattle mattox

00:21:12,200 --> 00:21:21,540
la just round the corner here so now i

00:21:17,190 --> 00:21:27,930
can look in i have to add the person to

00:21:21,540 --> 00:21:31,620
the session as well and let's see what's

00:21:27,930 --> 00:21:33,630
in the session so the person is in the

00:21:31,620 --> 00:21:35,820
session and see karate me edit the

00:21:33,630 --> 00:21:38,490
address in the session as well since the

00:21:35,820 --> 00:21:43,710
address is related to the person so we

00:21:38,490 --> 00:21:46,530
should manipulating them together let's

00:21:43,710 --> 00:21:48,810
write everything to the database we

00:21:46,530 --> 00:21:51,090
flush the session so seek laga me

00:21:48,810 --> 00:21:53,940
inserts person and address in the right

00:21:51,090 --> 00:21:59,460
order and what we can do now as well we

00:21:53,940 --> 00:22:08,100
can look at the person dot addresses and

00:21:59,460 --> 00:22:13,500
we see here a list of address objects so

00:22:08,100 --> 00:22:15,540
this is in short the the basic

00:22:13,500 --> 00:22:19,170
functionality that sequel alchemy offers

00:22:15,540 --> 00:22:21,960
you there is also more advanced

00:22:19,170 --> 00:22:24,990
functionality which you can look in the

00:22:21,960 --> 00:22:26,730
documentation another important part is

00:22:24,990 --> 00:22:31,560
is working with transactions I'm not

00:22:26,730 --> 00:22:34,140
going to demonstrate that today what

00:22:31,560 --> 00:22:37,200
else can you do you can map arbitrary

00:22:34,140 --> 00:22:39,960
selects to your classes instead of just

00:22:37,200 --> 00:22:42,660
mapping tables to clauses that's very

00:22:39,960 --> 00:22:47,180
interesting you can also map arbitrary

00:22:42,660 --> 00:22:49,800
relations so not only just foreign key

00:22:47,180 --> 00:22:52,680
defined relations you can use

00:22:49,800 --> 00:22:55,980
alternative collections for your

00:22:52,680 --> 00:22:58,830
relations so in our example the list of

00:22:55,980 --> 00:23:01,050
addresses the addresses on a person we

00:22:58,830 --> 00:23:04,200
released but you can use sets and

00:23:01,050 --> 00:23:05,460
dictionaries as well and seek volcom is

00:23:04,200 --> 00:23:09,179
ports vertical and horizontal

00:23:05,460 --> 00:23:12,360
partitioning of your database there is

00:23:09,179 --> 00:23:14,789
also a large number of related libraries

00:23:12,360 --> 00:23:17,760
that work with psycho alchemy one of

00:23:14,789 --> 00:23:21,690
them is a lambic which helps you in

00:23:17,760 --> 00:23:30,059
defining a schema migrations you have

00:23:21,690 --> 00:23:32,760
flasks equal alchemy so flask psicologa

00:23:30,059 --> 00:23:35,130
me integrates psychology me with flask

00:23:32,760 --> 00:23:36,990
and then you have Camelot the library

00:23:35,130 --> 00:23:40,019
I've developed which is a graphical

00:23:36,990 --> 00:23:43,220
interface on top of psycho alchemy so

00:23:40,019 --> 00:23:48,710
this concludes the sequel alchemy drill

00:23:43,220 --> 00:23:48,710
any questions please go ahead

00:23:54,970 --> 00:24:01,100
yeah thanks thanks for the presentation

00:23:58,040 --> 00:24:11,620
anybody with festa step forward for the

00:24:01,100 --> 00:24:15,260
microphone no sequel altima questions

00:24:11,620 --> 00:24:25,480
who use a sequel alchemy are you have no

00:24:15,260 --> 00:24:28,670
questions so i think my long-standing

00:24:25,480 --> 00:24:31,700
secret i give my question is is there

00:24:28,670 --> 00:24:35,110
any plan for a schema update when you

00:24:31,700 --> 00:24:38,270
added with the column it could have

00:24:35,110 --> 00:24:40,070
external behavior right yeah that that's

00:24:38,270 --> 00:24:42,860
in a different library it's in the

00:24:40,070 --> 00:24:44,690
Olympic it's in a lambic with the lambic

00:24:42,860 --> 00:24:47,630
you can do things like that like

00:24:44,690 --> 00:24:49,460
automatic schema migration automatic

00:24:47,630 --> 00:24:51,500
when it's possible and I don't really

00:24:49,460 --> 00:24:54,350
believe in automatic schema my equations

00:24:51,500 --> 00:24:57,290
but Olympic you can do it you can also

00:24:54,350 --> 00:24:59,870
define your schema migrations in a

00:24:57,290 --> 00:25:02,420
lambic it allows you to version your

00:24:59,870 --> 00:25:08,000
database schema to do the migrations

00:25:02,420 --> 00:25:10,640
automatically in production I have one

00:25:08,000 --> 00:25:13,720
question our database engineers are so

00:25:10,640 --> 00:25:16,580
using psychology excuse me excuse me

00:25:13,720 --> 00:25:18,770
sorry I I didn't understand them okay

00:25:16,580 --> 00:25:22,910
our database engineers are still heavily

00:25:18,770 --> 00:25:24,110
relying on psycho PG to directly and so

00:25:22,910 --> 00:25:26,090
we have like a gap between the

00:25:24,110 --> 00:25:28,610
application developers using sequel

00:25:26,090 --> 00:25:31,520
alchemy and database engineers like

00:25:28,610 --> 00:25:34,970
doing this low level tasks with psycho

00:25:31,520 --> 00:25:37,070
PG would you say that relying just on

00:25:34,970 --> 00:25:40,220
secret item me because it as you said

00:25:37,070 --> 00:25:44,120
it's really you can do full sequel so

00:25:40,220 --> 00:25:47,330
it's not like this evil or M stuff only

00:25:44,120 --> 00:25:50,450
so would you say okay just switch

00:25:47,330 --> 00:25:53,810
totally to secret I see me and dumped

00:25:50,450 --> 00:25:58,430
using the right clip psycho PG I would

00:25:53,810 --> 00:26:01,460
certainly consider that yes I use psycho

00:25:58,430 --> 00:26:04,460
PG a lot as well but only true sequel

00:26:01,460 --> 00:26:07,880
alchemy and you will see that sequel

00:26:04,460 --> 00:26:08,590
alchemy out of the box supports a lot of

00:26:07,880 --> 00:26:10,750
the psycho

00:26:08,590 --> 00:26:13,929
gee stuff and the things it doesn't

00:26:10,750 --> 00:26:16,840
support it can be very easily added to

00:26:13,929 --> 00:26:20,730
it specifically for your application so

00:26:16,840 --> 00:26:23,080
if you use some psycho PG functions that

00:26:20,730 --> 00:26:25,120
functionality that is not supported to

00:26:23,080 --> 00:26:28,210
receive alchemy it you can really define

00:26:25,120 --> 00:26:30,309
it so sequel alchemy uses that

00:26:28,210 --> 00:26:32,679
functionality you don't actually lose

00:26:30,309 --> 00:26:34,480
anything when you when you go through

00:26:32,679 --> 00:26:38,289
sequel on Kimmy and that's that's very

00:26:34,480 --> 00:26:40,110
important to to know that you don't lose

00:26:38,289 --> 00:26:43,419
anything you don't lose the flexibility

00:26:40,110 --> 00:26:45,820
I have another question do you know any

00:26:43,419 --> 00:26:48,520
good framework for accessing stored

00:26:45,820 --> 00:26:50,289
procedures from Titan like probably a

00:26:48,520 --> 00:26:52,480
sequel you may also has some abstraction

00:26:50,289 --> 00:27:04,720
and some no for nerds you know if you

00:26:52,480 --> 00:27:07,299
find one let me know go to the

00:27:04,720 --> 00:27:12,730
microphone please all I I camp event and

00:27:07,299 --> 00:27:16,090
you buy mine I was looking at Lamech for

00:27:12,730 --> 00:27:18,760
a short while is it possible to kind of

00:27:16,090 --> 00:27:21,399
connect models you define in sequel

00:27:18,760 --> 00:27:24,399
alchemy to the alembic so you don't have

00:27:21,399 --> 00:27:26,710
to define them twice basically just use

00:27:24,399 --> 00:27:30,309
them use the Olympic for the data

00:27:26,710 --> 00:27:33,580
database migrations but use the models

00:27:30,309 --> 00:27:37,450
defined in the sequel alchemy yes you

00:27:33,580 --> 00:27:40,149
can do that yeah oh thank you one what I

00:27:37,450 --> 00:27:42,940
usually do is I keep because the model

00:27:40,149 --> 00:27:46,710
continually it evolves all of the time

00:27:42,940 --> 00:27:49,480
of course so you define the model and

00:27:46,710 --> 00:27:52,110
and you keep updating that and from time

00:27:49,480 --> 00:27:56,110
to time you take a snapshot of the model

00:27:52,110 --> 00:27:58,380
with the lambic and adore your database

00:27:56,110 --> 00:28:02,409
version sound ok so you don't have to

00:27:58,380 --> 00:28:04,450
redefine it no basically I thought just

00:28:02,409 --> 00:28:06,880
in psycho alchemy i define my model in a

00:28:04,450 --> 00:28:09,340
class yeah and then just pass it on to a

00:28:06,880 --> 00:28:13,740
lambic today's to the stuff that's

00:28:09,340 --> 00:28:13,740
that's that works it works ok thank you

00:28:17,930 --> 00:28:24,080
okay if no further questions thanks

00:28:21,240 --> 00:28:24,080
again to the speaker

00:28:28,250 --> 00:28:31,690

YouTube URL: https://www.youtube.com/watch?v=2cuJGI9tRGY


