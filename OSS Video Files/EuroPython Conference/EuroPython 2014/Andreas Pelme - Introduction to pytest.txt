Title: Andreas Pelme - Introduction to pytest
Publication date: 2015-04-18
Playlist: EuroPython 2014
Description: 
	Andreas Pelme - Introduction to pytest
[EuroPython 2014]
[23 July 2014]

pytest is a full featured testing tool that makes it possible to write “pythonic” tests. This talk will introduce pytest and some of its unique and innovative features. It will help you get started with pytest for new or existing projects, by showing basic usage and configuration.

-----

This talk will show introduce pytest and show some unique and innovative features. It will show how to get started using it and some of the most important features.

One of these features is the ability to write tests in a more “pythonic” way by using the assert statement for assertions. Another feature in pytest is fixtures – a way to handle test dependencies in a structured way. This talk will introduce the concept of fixtures and show how they can be used.

No previous knowledge of pytest is required – this talk is for people who are new to testing or has experience with other Python testing tools such as unittest or Nose.
Captions: 
	00:00:14,700 --> 00:00:20,910
hi good morning so the first session

00:00:19,140 --> 00:00:24,240
today is going to be introduction to pi

00:00:20,910 --> 00:00:27,060
test with andreas elm who is also the

00:00:24,240 --> 00:00:40,020
maintainer of the pie test django

00:00:27,060 --> 00:00:42,780
library seven days yeah thank you hi so

00:00:40,020 --> 00:00:44,910
I usually I work at a place called

00:00:42,780 --> 00:00:48,960
personal column we build a time tracking

00:00:44,910 --> 00:00:51,030
and the seller application and in order

00:00:48,960 --> 00:00:53,520
to manage that we write a lot of tests

00:00:51,030 --> 00:00:56,430
and we use PI test so today I'm going to

00:00:53,520 --> 00:00:58,350
try to show you some good things with PI

00:00:56,430 --> 00:01:02,550
test and how you can make use of that

00:00:58,350 --> 00:01:05,329
when you write your tests so these are

00:01:02,550 --> 00:01:09,689
kind of the topics I want to cover today

00:01:05,329 --> 00:01:11,220
I'm going to show you what PI testes I'm

00:01:09,689 --> 00:01:13,790
going to show you how to how you can

00:01:11,220 --> 00:01:16,500
write tests with less boilerplate code

00:01:13,790 --> 00:01:19,979
I'm gonna show some useful plugins on

00:01:16,500 --> 00:01:22,499
the plug-in system of high-test and I'm

00:01:19,979 --> 00:01:26,280
also gonna disk discuss how the test

00:01:22,499 --> 00:01:28,819
discover is done and then I'm gonna show

00:01:26,280 --> 00:01:31,920
a feature of pi test is called fixtures

00:01:28,819 --> 00:01:33,119
which is really cool and then I'm going

00:01:31,920 --> 00:01:35,729
to discuss how you can port your

00:01:33,119 --> 00:01:40,799
existing projects to make use of pi test

00:01:35,729 --> 00:01:42,090
in an easy way so first testing the kind

00:01:40,799 --> 00:01:46,229
of testing that I'm going to talk about

00:01:42,090 --> 00:01:47,700
today is automated software tests that

00:01:46,229 --> 00:01:51,049
verify that your software works

00:01:47,700 --> 00:01:54,119
correctly and this can be anything from

00:01:51,049 --> 00:01:56,909
small fast running unit tests to more

00:01:54,119 --> 00:02:00,079
higher level tests that test your entire

00:01:56,909 --> 00:02:03,240
system and or anything in between there

00:02:00,079 --> 00:02:06,119
so before we get started how many of you

00:02:03,240 --> 00:02:10,410
are familiar with the unit test module

00:02:06,119 --> 00:02:16,050
in the standard Python the chips with

00:02:10,410 --> 00:02:19,560
Python yeah you've used it you can yeah

00:02:16,050 --> 00:02:23,120
you know roughly how it works okay good

00:02:19,560 --> 00:02:25,829
and and how many of you are already

00:02:23,120 --> 00:02:28,500
tightest user salsa or have used pie

00:02:25,829 --> 00:02:33,180
tests okay

00:02:28,500 --> 00:02:36,290
yeah so high test is a full-featured

00:02:33,180 --> 00:02:40,230
testing tool for Python so that means it

00:02:36,290 --> 00:02:42,720
does everything from test collection to

00:02:40,230 --> 00:02:45,440
run the tests to give you the output on

00:02:42,720 --> 00:02:48,810
whether which tests failed and passed

00:02:45,440 --> 00:02:51,209
and it also has some other nice features

00:02:48,810 --> 00:02:55,430
that help you maintain a test suit and

00:02:51,209 --> 00:02:58,709
help you organize it in a good way and

00:02:55,430 --> 00:03:01,110
you can run anything from those short

00:02:58,709 --> 00:03:04,170
unit tests two more system level testing

00:03:01,110 --> 00:03:07,530
with PI test it tell it scales like in

00:03:04,170 --> 00:03:12,060
both directions there you can also use

00:03:07,530 --> 00:03:13,500
it if you do TDD it's very nice or and

00:03:12,060 --> 00:03:15,630
it's easy to integrate with the

00:03:13,500 --> 00:03:20,520
continuous integration system such as

00:03:15,630 --> 00:03:22,440
Jenkins that works out of the box so

00:03:20,520 --> 00:03:27,330
here are some people that are happy with

00:03:22,440 --> 00:03:29,670
PI test and it's used in some also some

00:03:27,330 --> 00:03:36,720
bigger organizations in both commercial

00:03:29,670 --> 00:03:38,519
and open source projects so one

00:03:36,720 --> 00:03:40,860
important one thing that I find really

00:03:38,519 --> 00:03:42,450
nice about type pie test is that it

00:03:40,860 --> 00:03:45,030
allows you to write tests with less

00:03:42,450 --> 00:03:46,500
boilerplate code and to show you what I

00:03:45,030 --> 00:03:55,670
mean by this i'm going to show you a

00:03:46,500 --> 00:04:00,329
little demo so let's see so i have a

00:03:55,670 --> 00:04:03,900
test file here which contains a very

00:04:00,329 --> 00:04:07,380
very simple test and it uses the can

00:04:03,900 --> 00:04:09,269
make make it bigger yes it uses unit

00:04:07,380 --> 00:04:12,510
tests so this is probably familiar to

00:04:09,269 --> 00:04:14,340
most of you so we basically just make

00:04:12,510 --> 00:04:19,019
sure that the the return value of this

00:04:14,340 --> 00:04:25,560
function is what we expect it to be and

00:04:19,019 --> 00:04:27,360
I can run this with by invoking the unit

00:04:25,560 --> 00:04:32,430
test module and it collects tests and

00:04:27,360 --> 00:04:35,160
runs it so if I instead use PI test what

00:04:32,430 --> 00:04:37,950
we do is we invoke the testitude from

00:04:35,160 --> 00:04:41,910
the pilot test command so if i run that

00:04:37,950 --> 00:04:45,180
it finds the test and it runs it down

00:04:41,910 --> 00:04:48,270
outputs output is slightly different but

00:04:45,180 --> 00:04:51,560
it's same thing so i want you to notice

00:04:48,270 --> 00:04:56,280
that I test can run existing unit tests

00:04:51,560 --> 00:04:59,880
just as they are but we're going to

00:04:56,280 --> 00:05:02,820
change this test to make it to show some

00:04:59,880 --> 00:05:05,720
features of high-test so the first thing

00:05:02,820 --> 00:05:08,490
I'm going to change is the assertion

00:05:05,720 --> 00:05:09,960
instead of using assert equal I'm just

00:05:08,490 --> 00:05:15,120
going to use the plane a search

00:05:09,960 --> 00:05:18,960
statement that's built into Python so

00:05:15,120 --> 00:05:21,540
I'm changing this and just use the equal

00:05:18,960 --> 00:05:26,670
operator to make sure that the output

00:05:21,540 --> 00:05:28,680
output is expected one and the neck next

00:05:26,670 --> 00:05:30,840
thing is that we don't actually longer

00:05:28,680 --> 00:05:33,000
need to subclass from the unit test test

00:05:30,840 --> 00:05:38,100
case so we can simply just remove that

00:05:33,000 --> 00:05:41,280
and in fact we don't need to we're not

00:05:38,100 --> 00:05:43,980
anymore required to wrap or all our test

00:05:41,280 --> 00:05:51,600
cases in class so we can just remove the

00:05:43,980 --> 00:05:53,340
class too since we don't have the test

00:05:51,600 --> 00:05:55,410
case anymore we can just remove the unit

00:05:53,340 --> 00:06:02,600
testing port so this is what we're left

00:05:55,410 --> 00:06:07,620
with so let's just save this and run it

00:06:02,600 --> 00:06:10,640
so it works the same I just want to show

00:06:07,620 --> 00:06:12,630
you what happens if we get a failure so

00:06:10,640 --> 00:06:15,330
it's really important that you get

00:06:12,630 --> 00:06:18,030
useful feedback on your failures when

00:06:15,330 --> 00:06:20,160
you when your test this does not pass so

00:06:18,030 --> 00:06:23,340
let's assume we we introduce a bug here

00:06:20,160 --> 00:06:30,360
just add some garbage to the output and

00:06:23,340 --> 00:06:32,940
we save and we run the test again so

00:06:30,360 --> 00:06:35,160
what you can see here is that you get a

00:06:32,940 --> 00:06:37,620
very nice detail output and you even get

00:06:35,160 --> 00:06:40,320
some colors in them that shows you

00:06:37,620 --> 00:06:42,830
exactly what the wrong value wasn't

00:06:40,320 --> 00:06:42,830
where it failed

00:06:48,080 --> 00:06:55,350
so this was the code before and this is

00:06:50,970 --> 00:06:57,960
the after code so what I did was I used

00:06:55,350 --> 00:07:01,710
a search statement it's that our Sark

00:06:57,960 --> 00:07:03,150
equal and PI test can handle pretty much

00:07:01,710 --> 00:07:07,500
anything you throw at the search

00:07:03,150 --> 00:07:09,540
statement is it's very smart it can you

00:07:07,500 --> 00:07:10,830
give very instance if you check for a

00:07:09,540 --> 00:07:12,810
dictionary key or something like that

00:07:10,830 --> 00:07:15,840
and it doesn't exist it will give you a

00:07:12,810 --> 00:07:19,740
very nice output so it's hard to find a

00:07:15,840 --> 00:07:22,680
case where it doesn't work well also sub

00:07:19,740 --> 00:07:26,070
we did not have to subclass from test

00:07:22,680 --> 00:07:29,070
case anymore and we didn't have to put

00:07:26,070 --> 00:07:32,190
our tests in class at all but we can

00:07:29,070 --> 00:07:37,710
still do that if we like that can be

00:07:32,190 --> 00:07:39,420
kind of nice to group your tests and we

00:07:37,710 --> 00:07:42,240
invoke the test suit by running the

00:07:39,420 --> 00:07:49,110
pilot test command which collects and

00:07:42,240 --> 00:07:51,900
runs the tests so one thing about pi

00:07:49,110 --> 00:07:56,970
test is it has a very powerful plug-in

00:07:51,900 --> 00:07:58,680
system so in your own project you have a

00:07:56,970 --> 00:08:00,900
lot of hooks into PI tests that you can

00:07:58,680 --> 00:08:02,850
use to customize how tests are collected

00:08:00,900 --> 00:08:06,060
how they are picked up and how they are

00:08:02,850 --> 00:08:08,610
invoked and you have the same kind of

00:08:06,060 --> 00:08:12,870
hooks into PI test in your own project

00:08:08,610 --> 00:08:15,510
that 3rd party plugins has access to so

00:08:12,870 --> 00:08:19,260
these are some plugins that extend the

00:08:15,510 --> 00:08:21,480
capabilities of pi test there are a lot

00:08:19,260 --> 00:08:26,880
more but these are the probably the most

00:08:21,480 --> 00:08:29,430
popular ones the pie test exist plug em

00:08:26,880 --> 00:08:31,080
it provides distributed testing so you

00:08:29,430 --> 00:08:33,210
can actually run your tests on group

00:08:31,080 --> 00:08:35,969
directly on have them distributed to

00:08:33,210 --> 00:08:39,419
remote machines or you can run them

00:08:35,969 --> 00:08:43,010
locally on your own machines in parallel

00:08:39,419 --> 00:08:46,040
processes to have some nice speed ups

00:08:43,010 --> 00:08:48,630
I'll come back to Exodus later

00:08:46,040 --> 00:08:52,110
understand pi test django plugin which

00:08:48,630 --> 00:08:54,600
helps to integrate with with django and

00:08:52,110 --> 00:08:59,070
with django destitutes and make them run

00:08:54,600 --> 00:09:00,480
directly there's also support for

00:08:59,070 --> 00:09:03,149
running twisted plugin

00:09:00,480 --> 00:09:05,100
twisted tests and there's a lot lots of

00:09:03,149 --> 00:09:07,350
other plugins in for instance if you do

00:09:05,100 --> 00:09:14,459
log capturing you can install the

00:09:07,350 --> 00:09:18,510
capture log again so how to actually run

00:09:14,459 --> 00:09:20,610
the tests I showed you in the demo by

00:09:18,510 --> 00:09:24,510
just invoking pilot test you run all the

00:09:20,610 --> 00:09:27,660
tests and tightest will recursively

00:09:24,510 --> 00:09:30,209
search all directories to find test

00:09:27,660 --> 00:09:33,540
files so this this is usually what you

00:09:30,209 --> 00:09:36,269
do to run your entire testitude but then

00:09:33,540 --> 00:09:38,760
you can also limit the test you run in

00:09:36,269 --> 00:09:41,190
one invocation by just specifying the

00:09:38,760 --> 00:09:43,920
file names of the test files that you

00:09:41,190 --> 00:09:46,019
want to run and this of course works

00:09:43,920 --> 00:09:49,019
very nice with the standard like tab

00:09:46,019 --> 00:09:53,279
completion in your shell so it's very

00:09:49,019 --> 00:09:56,250
convenient to use you can also match a

00:09:53,279 --> 00:10:00,470
you can also select test based on the

00:09:56,250 --> 00:10:03,420
tests name so k stands for keyword and

00:10:00,470 --> 00:10:05,970
this can be used to find the specific

00:10:03,420 --> 00:10:12,180
test if you don't want to type the

00:10:05,970 --> 00:10:14,519
directory so as I told you pi test

00:10:12,180 --> 00:10:17,660
requires us into directories and finds

00:10:14,519 --> 00:10:20,250
test files and by default it looks into

00:10:17,660 --> 00:10:22,230
files that matches these patterns and

00:10:20,250 --> 00:10:24,449
you can of course change that if you

00:10:22,230 --> 00:10:27,449
like if your project structure looks

00:10:24,449 --> 00:10:33,589
different but it's a kind of same

00:10:27,449 --> 00:10:36,240
default there is another way of

00:10:33,589 --> 00:10:40,170
organizing your tests with PI test you

00:10:36,240 --> 00:10:43,949
can use the marking functionality so you

00:10:40,170 --> 00:10:46,560
can make up arbitrary marks I just made

00:10:43,949 --> 00:10:48,959
up this slow mark for instance if you

00:10:46,560 --> 00:10:52,589
want to mark your all the tests that are

00:10:48,959 --> 00:10:55,019
very slow and then you may not want to

00:10:52,589 --> 00:10:57,180
run them or you may want to run them you

00:10:55,019 --> 00:10:59,940
may want to filter them out you can put

00:10:57,180 --> 00:11:05,519
any you can put multiple marks on one

00:10:59,940 --> 00:11:08,399
test if you like so this is how you run

00:11:05,519 --> 00:11:12,060
only the tests with that specific mark

00:11:08,399 --> 00:11:13,850
and in this case this might actually be

00:11:12,060 --> 00:11:17,560
more useful because you

00:11:13,850 --> 00:11:17,560
may not want to run them that often

00:11:17,800 --> 00:11:23,060
there are also markers that are built

00:11:20,750 --> 00:11:26,329
into patent for instance the skip if

00:11:23,060 --> 00:11:28,670
marker so you can also annotate some

00:11:26,329 --> 00:11:32,060
extra data within the marker for each

00:11:28,670 --> 00:11:34,670
test so in this case this test will

00:11:32,060 --> 00:11:37,970
simply be skipped if you run it on Mac

00:11:34,670 --> 00:11:41,990
OS but you can implement you can

00:11:37,970 --> 00:11:46,130
implement your own logic with markers by

00:11:41,990 --> 00:11:53,569
yourself it's in your project specific

00:11:46,130 --> 00:11:56,180
things to your project so I'd like to

00:11:53,569 --> 00:11:59,259
take some time to go a bit into a

00:11:56,180 --> 00:12:04,690
feature in PI test that is called

00:11:59,259 --> 00:12:08,660
fixtures so fixtures is a mechanism for

00:12:04,690 --> 00:12:15,620
injecting objects that you need for your

00:12:08,660 --> 00:12:17,029
tests in a very structured way you

00:12:15,620 --> 00:12:19,370
probably have no idea what I'm talking

00:12:17,029 --> 00:12:37,850
about right now so I'm gonna try to give

00:12:19,370 --> 00:12:41,449
a demo this so we have two tests here

00:12:37,850 --> 00:12:45,220
which use any do you know what selenium

00:12:41,449 --> 00:12:47,899
is by the way yeah it's so it's it's a

00:12:45,220 --> 00:12:51,709
way to remote control the web browser

00:12:47,899 --> 00:12:54,110
and that can be very useful for tests so

00:12:51,709 --> 00:12:56,509
I'm using that on as an example here and

00:12:54,110 --> 00:12:59,060
so I have two tests they will navigate

00:12:56,509 --> 00:13:02,060
to these websites they will look at the

00:12:59,060 --> 00:13:06,259
title of the websites and verified that

00:13:02,060 --> 00:13:08,149
it that nyx is in the nixa was Nick's

00:13:06,259 --> 00:13:13,519
package manager website and that pie

00:13:08,149 --> 00:13:16,130
testing is in the pie test website so

00:13:13,519 --> 00:13:21,319
I'll walk you through what happens here

00:13:16,130 --> 00:13:23,589
so when PI test finds this test with the

00:13:21,319 --> 00:13:26,610
webdriver argument in the argument list

00:13:23,589 --> 00:13:30,570
it will

00:13:26,610 --> 00:13:35,220
try to construct this value of the value

00:13:30,570 --> 00:13:38,399
for this argument so in order to do that

00:13:35,220 --> 00:13:41,760
it looks for any fixtures that are named

00:13:38,399 --> 00:13:45,240
webdriver so it works by looking on the

00:13:41,760 --> 00:13:47,550
on the name of the argument itself and

00:13:45,240 --> 00:13:50,190
in order to register how these fixtures

00:13:47,550 --> 00:13:53,850
are constructed he use you create a

00:13:50,190 --> 00:13:57,630
function with the same name and then you

00:13:53,850 --> 00:14:03,510
annotate that function with the pie test

00:13:57,630 --> 00:14:05,519
fixture decorator so the this function

00:14:03,510 --> 00:14:09,630
should return the object that we won't

00:14:05,519 --> 00:14:13,050
have passed into the test so in this

00:14:09,630 --> 00:14:17,190
instance I asked create a Firefox web

00:14:13,050 --> 00:14:20,399
driver instance and I also add a some

00:14:17,190 --> 00:14:22,649
code that will run in the process of the

00:14:20,399 --> 00:14:27,660
teardown when the tests are finished how

00:14:22,649 --> 00:14:33,029
to clean up after this test and so I add

00:14:27,660 --> 00:14:36,120
this driver quit it's a method that will

00:14:33,029 --> 00:14:40,350
be invoked after the test and then

00:14:36,120 --> 00:14:42,120
simply return the driver so this is what

00:14:40,350 --> 00:14:43,620
happens for the first test and then for

00:14:42,120 --> 00:14:46,260
the next test the same thing will happen

00:14:43,620 --> 00:14:48,209
it will be constructed once again and

00:14:46,260 --> 00:14:52,140
passed in and then the test will run and

00:14:48,209 --> 00:14:54,329
then the webdriver will quit okay so

00:14:52,140 --> 00:14:58,170
let's let's just run this and see what

00:14:54,329 --> 00:15:04,709
happens and I hope for the wireless are

00:14:58,170 --> 00:15:08,060
with me okay so we can see okay so it

00:15:04,709 --> 00:15:12,540
seemed to work well it was very fast so

00:15:08,060 --> 00:15:14,459
we had Firefox start up close down and

00:15:12,540 --> 00:15:19,920
start up for other tests so that's

00:15:14,459 --> 00:15:23,459
that's what we expected one very

00:15:19,920 --> 00:15:26,730
important point of fixtures is that you

00:15:23,459 --> 00:15:29,610
move the dependency construction out of

00:15:26,730 --> 00:15:33,709
the test case themselves so the test

00:15:29,610 --> 00:15:37,079
case is not concerned about how the the

00:15:33,709 --> 00:15:39,180
test fixtures are set up and this has

00:15:37,079 --> 00:15:40,160
some nice implications so we can for

00:15:39,180 --> 00:15:43,830
instance

00:15:40,160 --> 00:15:45,990
you saw that Firefox started twice let's

00:15:43,830 --> 00:15:48,450
say we want to we want to use the same

00:15:45,990 --> 00:15:51,990
instance on Firefox for both of our

00:15:48,450 --> 00:15:54,540
tests that is really simple and actually

00:15:51,990 --> 00:15:57,890
everything we have to do is to add we

00:15:54,540 --> 00:16:00,780
had have to tell pi test how this

00:15:57,890 --> 00:16:05,340
fixture should be scoped or how it

00:16:00,780 --> 00:16:08,130
should be cached so we just add this and

00:16:05,340 --> 00:16:12,080
pilots will then cash this fixture

00:16:08,130 --> 00:16:15,090
object for the entire sash test session

00:16:12,080 --> 00:16:18,990
so this means that if we try to run it

00:16:15,090 --> 00:16:22,410
again it might be very fast but we

00:16:18,990 --> 00:16:27,210
should only see one one Firefox window

00:16:22,410 --> 00:16:32,100
showing up okay oh yeah it was very fast

00:16:27,210 --> 00:16:37,260
but you see it can certainly speed your

00:16:32,100 --> 00:16:40,440
tests up very nice for in a lot of cases

00:16:37,260 --> 00:16:44,130
for instance creating a database let's

00:16:40,440 --> 00:16:46,050
imagine your tests need a database with

00:16:44,130 --> 00:16:48,570
the schemas and everything in them then

00:16:46,050 --> 00:16:52,440
you can just create at once before all

00:16:48,570 --> 00:16:58,440
tests drum and then have it reused for

00:16:52,440 --> 00:17:00,480
every test and the other thing with when

00:16:58,440 --> 00:17:03,510
we separate the creation of the fixtures

00:17:00,480 --> 00:17:06,209
is that these tests don't need to be

00:17:03,510 --> 00:17:08,040
concerned of what kind of browser we use

00:17:06,209 --> 00:17:11,400
we can for instance change this to

00:17:08,040 --> 00:17:14,940
Chrome and we'll have it just work and

00:17:11,400 --> 00:17:17,040
we can even generate more tests in

00:17:14,940 --> 00:17:19,199
vacations we can generate new test by

00:17:17,040 --> 00:17:22,020
parametric parameterizing this fixture

00:17:19,199 --> 00:17:23,970
so we can actually trigger each test to

00:17:22,020 --> 00:17:33,270
run in multiple browsers just by

00:17:23,970 --> 00:17:34,070
changing this fixture definition so

00:17:33,270 --> 00:17:36,280
another

00:17:34,070 --> 00:17:40,850
want to talk about I mentioned the

00:17:36,280 --> 00:17:43,570
high-test exodus plugin earlier it is a

00:17:40,850 --> 00:17:46,040
way to run your tests in parallel so

00:17:43,570 --> 00:17:48,130
that can be that can give you a very

00:17:46,040 --> 00:17:53,090
nice speed up because most people have

00:17:48,130 --> 00:17:55,220
multi-core machines these days so the

00:17:53,090 --> 00:17:57,890
good thing is it's really easy to use it

00:17:55,220 --> 00:18:00,500
so if I want to if you want to speed up

00:17:57,890 --> 00:18:04,070
these tests we can just run them in

00:18:00,500 --> 00:18:07,700
parallel so I already install the PI

00:18:04,070 --> 00:18:10,970
test X this plugin so if we specify em

00:18:07,700 --> 00:18:13,970
we can instruct fighters to run these

00:18:10,970 --> 00:18:16,640
parallel so I'll start to process now

00:18:13,970 --> 00:18:19,880
and this will this will probably be with

00:18:16,640 --> 00:18:22,090
that very fast but see if we can the

00:18:19,880 --> 00:18:24,950
other at least so there are two Firefox

00:18:22,090 --> 00:18:30,050
browsers at the same time so these tests

00:18:24,950 --> 00:18:32,780
now ran in parallel so that's a very

00:18:30,050 --> 00:18:34,730
easy way to speed up the runtime of your

00:18:32,780 --> 00:18:37,520
test suit you just install Titus text

00:18:34,730 --> 00:18:40,730
test and you run it with dash M 2 for

00:18:37,520 --> 00:18:43,580
instance so my own test suit it usually

00:18:40,730 --> 00:18:46,340
takes about two minutes to run and when

00:18:43,580 --> 00:18:49,580
I run it on my machine with in four

00:18:46,340 --> 00:18:59,300
processes it's about 30 seconds so it

00:18:49,580 --> 00:19:01,550
can give you very nice speed ups so once

00:18:59,300 --> 00:19:03,500
again that it's the dependency injection

00:19:01,550 --> 00:19:06,170
and it's based on the name of the

00:19:03,500 --> 00:19:09,590
arguments and the name of the fixture

00:19:06,170 --> 00:19:23,080
function that's how they map together

00:19:09,590 --> 00:19:26,420
and how they are found anything I use

00:19:23,080 --> 00:19:30,050
pictures in 3d so don't when advising

00:19:26,420 --> 00:19:34,570
teacher for type of compressible

00:19:30,050 --> 00:19:34,570
run is officially

00:19:35,899 --> 00:19:42,059
yes so so in this case you you if you

00:19:40,649 --> 00:19:45,240
want to have both firefox and chrome

00:19:42,059 --> 00:19:49,409
realm you specify the implementation of

00:19:45,240 --> 00:19:51,809
this fixture itself so you instruct I

00:19:49,409 --> 00:19:56,340
have I don't have time to show you that

00:19:51,809 --> 00:19:59,399
now but you can tell fight us to for

00:19:56,340 --> 00:20:01,890
each each time a test needs this fixture

00:19:59,399 --> 00:20:06,840
invoke it twice once with firefox and

00:20:01,890 --> 00:20:09,390
one once with chrome and you can also

00:20:06,840 --> 00:20:11,190
you can also use multiple fixtures just

00:20:09,390 --> 00:20:13,559
add more more fixtures to the argument

00:20:11,190 --> 00:20:15,149
list about you might want to have a

00:20:13,559 --> 00:20:17,880
database you might want to have access

00:20:15,149 --> 00:20:19,890
to something else too or just another

00:20:17,880 --> 00:20:22,980
object so you can you can use multiple

00:20:19,890 --> 00:20:26,789
fixtures in the argument list and you

00:20:22,980 --> 00:20:29,880
can also so the webdriver fixture in

00:20:26,789 --> 00:20:33,419
innings in this case it can depend on

00:20:29,880 --> 00:20:35,340
other fixtures to but I want to go more

00:20:33,419 --> 00:20:38,220
into detail about pictures this is just

00:20:35,340 --> 00:20:45,210
it's very powerful and it can be used in

00:20:38,220 --> 00:20:50,640
a lot of different scenarios yes yes I'm

00:20:45,210 --> 00:20:55,200
gonna tell you about it and so I also

00:20:50,640 --> 00:20:56,820
show the X test it's it it doesn't

00:20:55,200 --> 00:20:59,909
really have anything to do with fixtures

00:20:56,820 --> 00:21:02,010
but it's a nice way to speed up your

00:20:59,909 --> 00:21:03,690
tests so and this is how easy it is to

00:21:02,010 --> 00:21:07,380
get started with it just install it and

00:21:03,690 --> 00:21:10,140
then run with the end command line and

00:21:07,380 --> 00:21:12,149
you cannot do all sorts of remote

00:21:10,140 --> 00:21:17,370
distribute the test with it too but this

00:21:12,149 --> 00:21:20,730
is the simple case so I want to talk a

00:21:17,370 --> 00:21:23,370
bit about how you can port if you want

00:21:20,730 --> 00:21:26,909
to switch to PI test how you can a good

00:21:23,370 --> 00:21:29,610
strategy strategy for doing that and so

00:21:26,909 --> 00:21:32,340
I showed you that the unit test was just

00:21:29,610 --> 00:21:35,490
the test case was just picked up by PI

00:21:32,340 --> 00:21:38,220
test and there there is also super

00:21:35,490 --> 00:21:40,559
actually support for no style test so

00:21:38,220 --> 00:21:42,299
you use knows currently you can probably

00:21:40,559 --> 00:21:46,139
a switch the pie test and it should

00:21:42,299 --> 00:21:46,890
mostly work out of out of the box and if

00:21:46,139 --> 00:21:49,920
you install the PI

00:21:46,890 --> 00:21:52,730
django plug in your pie test your django

00:21:49,920 --> 00:21:55,530
destitutes should also run as they are

00:21:52,730 --> 00:21:57,570
so the in that way you can just start

00:21:55,530 --> 00:22:00,660
using the PI test command to run your

00:21:57,570 --> 00:22:04,260
tests then you can gradually write new

00:22:00,660 --> 00:22:06,000
tests in this lighter style and you can

00:22:04,260 --> 00:22:08,700
make use of fixtures and then you can

00:22:06,000 --> 00:22:11,520
change your existing tests or time where

00:22:08,700 --> 00:22:15,180
you can just leave them as they are but

00:22:11,520 --> 00:22:17,240
even even unit tests and most tests they

00:22:15,180 --> 00:22:21,420
all get benefits such as the

00:22:17,240 --> 00:22:23,820
parallelization from exists so you don't

00:22:21,420 --> 00:22:25,920
have to go and throw all your tests away

00:22:23,820 --> 00:22:29,810
and start over in order to start using

00:22:25,920 --> 00:22:33,990
pi test it's a you can switch gradually

00:22:29,810 --> 00:22:36,240
yes so I highly recommend that if you

00:22:33,990 --> 00:22:38,850
want to know more about fixtures that

00:22:36,240 --> 00:22:42,330
you go visit florist talk this afternoon

00:22:38,850 --> 00:22:44,190
about fixtures so I just scratched on

00:22:42,330 --> 00:22:46,680
the surface on what you can do with

00:22:44,190 --> 00:22:49,800
fixtures and he will show show you more

00:22:46,680 --> 00:22:53,190
advanced uses of them so don't don't

00:22:49,800 --> 00:22:56,250
miss that talk and also there will be a

00:22:53,190 --> 00:22:58,770
training with holy crackle with the main

00:22:56,250 --> 00:23:01,080
altar of pi test so that would be on

00:22:58,770 --> 00:23:04,680
Friday I'm not sure it's still possible

00:23:01,080 --> 00:23:08,400
to sign up for the trainings but check

00:23:04,680 --> 00:23:11,990
that out if you're interested and I will

00:23:08,400 --> 00:23:14,940
do some sprinting on the PI test Django

00:23:11,990 --> 00:23:18,770
bindings in the plug-in on in the sprint

00:23:14,940 --> 00:23:21,900
so feel free to join in there if you

00:23:18,770 --> 00:23:25,650
like to get started with it or see what

00:23:21,900 --> 00:23:26,940
it's all about so yeah feel free to just

00:23:25,650 --> 00:23:29,400
come and talk to me if you have any

00:23:26,940 --> 00:23:31,470
questions after or I guess we might have

00:23:29,400 --> 00:23:42,509
time for some questions five minutes

00:23:31,470 --> 00:23:45,509
okay cool where you started to discuss

00:23:42,509 --> 00:23:48,329
extras where does the request argument

00:23:45,509 --> 00:23:51,809
come from oh yeah that's a good good

00:23:48,329 --> 00:23:56,190
question so the request argument it is a

00:23:51,809 --> 00:23:58,649
special fixture that you can use to get

00:23:56,190 --> 00:24:02,489
information you can introspect the

00:23:58,649 --> 00:24:04,019
surroundings you can get for instance if

00:24:02,489 --> 00:24:06,479
you need access to a command-line

00:24:04,019 --> 00:24:09,809
argument from within the fixture it's

00:24:06,479 --> 00:24:12,089
available on the request on the request

00:24:09,809 --> 00:24:13,739
object so you can leave it out in the

00:24:12,089 --> 00:24:16,739
fixture definition if you lie if you

00:24:13,739 --> 00:24:21,359
don't have any use for it but it

00:24:16,739 --> 00:24:24,269
provides access to two pi test basically

00:24:21,359 --> 00:24:26,819
so that you can communicate with it so

00:24:24,269 --> 00:24:34,879
it's a special fixture that gets passed

00:24:26,819 --> 00:24:34,879
into to this fixture more questions yeah

00:24:38,389 --> 00:24:45,359
right I'm not very convinced I must say

00:24:42,119 --> 00:24:48,119
so my question is what features of pi

00:24:45,359 --> 00:24:51,389
test you would say you use every day and

00:24:48,119 --> 00:24:53,279
you wouldn't find in other things like

00:24:51,389 --> 00:24:56,069
unit tests or nose and stuff like that

00:24:53,279 --> 00:24:58,019
because just not having a class and

00:24:56,069 --> 00:25:00,569
inheriting from unit test or test case

00:24:58,019 --> 00:25:02,699
is not a very strong argument for me at

00:25:00,569 --> 00:25:05,449
least I don't know I would say that the

00:25:02,699 --> 00:25:10,079
fixtures is the really unique feature

00:25:05,449 --> 00:25:13,259
and it's it's hard to to show you how

00:25:10,079 --> 00:25:15,449
powerful they are in this short time but

00:25:13,259 --> 00:25:17,219
they you can combine them in different

00:25:15,449 --> 00:25:19,379
way and combine the caching and the

00:25:17,219 --> 00:25:23,879
scoping of them and you can parameterize

00:25:19,379 --> 00:25:25,919
them and you can really have you have a

00:25:23,879 --> 00:25:28,079
very good structure of how your tests

00:25:25,919 --> 00:25:32,129
are invoked so I would say that that is

00:25:28,079 --> 00:25:34,769
the absolutely biggest like feature of

00:25:32,129 --> 00:25:44,549
pi test when if you compare it to two

00:25:34,769 --> 00:25:47,579
other frameworks hi I have question how

00:25:44,549 --> 00:25:51,809
much more difficult it gets to debug

00:25:47,579 --> 00:25:54,389
your tests with PI test so in uni tests

00:25:51,809 --> 00:25:56,160
you need to do much more work so you

00:25:54,389 --> 00:25:58,920
don't have this nice features but

00:25:56,160 --> 00:26:01,290
you do everything explicitly and here

00:25:58,920 --> 00:26:06,870
you have a lot of features that are nice

00:26:01,290 --> 00:26:11,280
but they hide through the work is done

00:26:06,870 --> 00:26:15,020
body itself but you use it everyday so

00:26:11,280 --> 00:26:22,320
is it gets more difficult to find

00:26:15,020 --> 00:26:26,040
problems in your tests well I've used it

00:26:22,320 --> 00:26:27,840
for a while so but I wouldn't say it's

00:26:26,040 --> 00:26:31,530
harder to the budget and there are all

00:26:27,840 --> 00:26:33,510
sorts of you can you can run like a pyro

00:26:31,530 --> 00:26:35,760
test collect only and it will show you

00:26:33,510 --> 00:26:39,150
how it collects the tests and you can

00:26:35,760 --> 00:26:40,920
have all sorts of different outputs you

00:26:39,150 --> 00:26:43,380
can have very verbose outputs if you

00:26:40,920 --> 00:26:45,870
really you can get a lot of information

00:26:43,380 --> 00:26:47,610
about the failure failure so in that

00:26:45,870 --> 00:26:51,240
sense I guess you get can get more

00:26:47,610 --> 00:26:54,600
information out of pie tests then with

00:26:51,240 --> 00:26:58,620
standard unit tests but I don't see it

00:26:54,600 --> 00:27:03,590
as a problem I don't really see that it

00:26:58,620 --> 00:27:03,590
makes it harder to debug anything thanks

00:27:03,680 --> 00:27:07,010
any more questions

00:27:13,600 --> 00:27:17,410
so I've used pay taste a little bit

00:27:15,820 --> 00:27:19,720
recently and one of the problems are

00:27:17,410 --> 00:27:21,370
found with it is it tastes discovery so

00:27:19,720 --> 00:27:23,740
it's one of the advantages that you

00:27:21,370 --> 00:27:25,570
don't need them a lot of Canada and

00:27:23,740 --> 00:27:27,940
pulling your class for it to find the

00:27:25,570 --> 00:27:31,030
test but if there's something wrong like

00:27:27,940 --> 00:27:33,730
one of the examples I had a Mork patch

00:27:31,030 --> 00:27:36,789
on the test but I messed out the tea and

00:27:33,730 --> 00:27:38,440
patch and it couldn't find the test so

00:27:36,789 --> 00:27:40,600
it wasn't running and I didn't realize

00:27:38,440 --> 00:27:43,000
that it wasn't running is it anything

00:27:40,600 --> 00:27:49,360
where you can find out test that haven't

00:27:43,000 --> 00:27:52,690
run well it should run tests that are

00:27:49,360 --> 00:27:55,179
marketed use the mock decorator just

00:27:52,690 --> 00:27:58,450
because either a mistake in it also i

00:27:55,179 --> 00:28:01,679
had misspelled patch so it hadn't found

00:27:58,450 --> 00:28:05,350
it am I didn't realize that I hadn't run

00:28:01,679 --> 00:28:07,870
okay take every committee you should I

00:28:05,350 --> 00:28:10,030
think you should have gotten an

00:28:07,870 --> 00:28:12,309
exception than a narrow it if you

00:28:10,030 --> 00:28:14,110
misspell the the patch decorate or

00:28:12,309 --> 00:28:16,510
something like that it should have tied

00:28:14,110 --> 00:28:18,789
during the collection face yeah there is

00:28:16,510 --> 00:28:21,970
nothing it just I don't even try to run

00:28:18,789 --> 00:28:24,370
okay I'm not sure in that particular

00:28:21,970 --> 00:28:27,580
case but if if there are errors during

00:28:24,370 --> 00:28:30,820
like any importing things or standard

00:28:27,580 --> 00:28:43,000
errors like that they they should be

00:28:30,820 --> 00:28:46,809
shown yeah oh so you a flag to show the

00:28:43,000 --> 00:28:50,620
skipped tests or yeah so the report

00:28:46,809 --> 00:28:52,840
skipped a command-line argument I guess

00:28:50,620 --> 00:29:01,020
yeah then you can show all the skiff

00:28:52,840 --> 00:29:04,610
tests thanks any more questions okay

00:29:01,020 --> 00:29:06,670
thank you very much young guys

00:29:04,610 --> 00:29:06,670

YouTube URL: https://www.youtube.com/watch?v=gUniRsB6hsY


