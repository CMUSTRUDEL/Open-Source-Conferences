Title: Using python, LXC and linux to create a mass VM hosting, managed by django and angularjs
Publication date: 2015-04-18
Playlist: EuroPython 2014
Description: 
	Daniel Kraft/Oliver Roch - Using python, LXC and linux to create a mass VM hosting, managed by django and angularjs
[EuroPython 2014]
[22 July 2014]

How we created a scalable mass VM hosting for open source web apps with python, LXC and linux with a web-UI based on django and angularjs. We'll show the underlying architecture of this service, several linux internals that make this possible and we'll talk about bitter failure during development. This talk will be python- and linux-centric with some hints for integrating angularjs into django.
Captions: 
	00:00:14,710 --> 00:00:18,130
hi everyone thanks for being here I'll

00:00:17,530 --> 00:00:21,160
talk

00:00:18,130 --> 00:00:24,160
using Python Alex C which is Linux

00:00:21,160 --> 00:00:26,169
containers and Linux to create a massive

00:00:24,160 --> 00:00:30,430
am hosting managed by Django and

00:00:26,169 --> 00:00:32,559
angularjs we have a schedule part one is

00:00:30,430 --> 00:00:34,629
my part Beck and an architecture

00:00:32,559 --> 00:00:37,440
and part two is Oliver's path this is

00:00:34,629 --> 00:00:41,790
the front end in Django and angular JS

00:00:37,440 --> 00:00:45,460
now first part back and an architecture

00:00:41,790 --> 00:00:48,160
first about me I am Daniel craft from

00:00:45,460 --> 00:00:52,770
d90 and my twitter account is web

00:00:48,160 --> 00:00:57,129
dum-dum I am doing computer since 1984

00:00:52,770 --> 00:00:59,110
1985 sorry and I'm online since 1987

00:00:57,129 --> 00:01:03,550
obviously not in the Internet at that

00:00:59,110 --> 00:01:06,550
time who are we we are creating a

00:01:03,550 --> 00:01:09,610
service for pre-configured ready to run

00:01:06,550 --> 00:01:12,340
virtual service with root for many open

00:01:09,610 --> 00:01:15,280
source web apps think of it like a

00:01:12,340 --> 00:01:18,220
one-click installer all this hosted in

00:01:15,280 --> 00:01:25,000
Germany by the way with 100% renewable

00:01:18,220 --> 00:01:27,369
energy and that's how it looks like you

00:01:25,000 --> 00:01:29,860
basically choose some templates like

00:01:27,369 --> 00:01:33,310
Django in that example choose a version

00:01:29,860 --> 00:01:38,110
of it and give it a name click on add

00:01:33,310 --> 00:01:40,570
container is this Yubel yes now you have

00:01:38,110 --> 00:01:43,270
this container in red because it's off

00:01:40,570 --> 00:01:45,009
it's turned off then turn it on that it

00:01:43,270 --> 00:01:50,770
becomes green then you click on the URL

00:01:45,009 --> 00:01:55,329
on the reachable at HTTP and there is a

00:01:50,770 --> 00:01:57,430
django and here's how it works we have

00:01:55,329 --> 00:01:59,920
two parts in this architecture the back

00:01:57,430 --> 00:02:02,369
end is called con short for container

00:01:59,920 --> 00:02:08,410
management the front end is called site

00:02:02,369 --> 00:02:11,799
this is just our names con has two modes

00:02:08,410 --> 00:02:14,530
first mode is it could be run or it can

00:02:11,799 --> 00:02:19,120
be run as a daemon then it is an XML and

00:02:14,530 --> 00:02:21,100
XML RPC server otherwise it's an XML RPC

00:02:19,120 --> 00:02:23,019
client to its own demon

00:02:21,100 --> 00:02:26,320
so it basically you start it as a server

00:02:23,019 --> 00:02:28,120
as a daemon first and then you can use

00:02:26,320 --> 00:02:29,980
it as like a console script which

00:02:28,120 --> 00:02:34,120
connects to its own X

00:02:29,980 --> 00:02:36,909
a PC server so this is how it looks like

00:02:34,120 --> 00:02:38,680
if you don't call it as a demon shell

00:02:36,909 --> 00:02:40,569
script with I don't know if you can read

00:02:38,680 --> 00:02:42,489
that that's not so important it's it's

00:02:40,569 --> 00:02:45,190
more about these are this is anything

00:02:42,489 --> 00:02:47,980
you need to manage virtual machines on a

00:02:45,190 --> 00:02:50,680
house you can I can't read it here I

00:02:47,980 --> 00:02:54,760
have to look that you can build I'll

00:02:50,680 --> 00:02:57,069
show an example shortly you can remove

00:02:54,760 --> 00:03:00,180
templates create containers to placate

00:02:57,069 --> 00:03:04,420
container start and stop them and so on

00:03:00,180 --> 00:03:06,879
so Conn calls itself so it eats its own

00:03:04,420 --> 00:03:11,709
dart food because it calls its own XML

00:03:06,879 --> 00:03:14,709
our pcs methods just is like as you'll

00:03:11,709 --> 00:03:16,359
see shortly as the site does it can be

00:03:14,709 --> 00:03:19,870
called by others like the site

00:03:16,359 --> 00:03:26,620
it contains anything needed to work with

00:03:19,870 --> 00:03:29,349
virtual machines so very important part

00:03:26,620 --> 00:03:32,920
is con works completely without sight

00:03:29,349 --> 00:03:35,319
that means we can use the server part

00:03:32,920 --> 00:03:38,019
test it individually only that we can

00:03:35,319 --> 00:03:40,030
run it locally all without any user

00:03:38,019 --> 00:03:43,260
management or something this is just a

00:03:40,030 --> 00:03:46,030
virtualization level alaya

00:03:43,260 --> 00:03:49,750
the site on the other hand based on

00:03:46,030 --> 00:03:53,349
Jango and angularjs calls cons which can

00:03:49,750 --> 00:03:55,569
be many we are xml-rpc it does

00:03:53,349 --> 00:03:58,480
accounting and payment it creates PDF

00:03:55,569 --> 00:04:01,630
invoices it manages user accounts or and

00:03:58,480 --> 00:04:03,760
the registration and so on and also the

00:04:01,630 --> 00:04:07,169
site works without con this is also

00:04:03,760 --> 00:04:10,090
important to test it and to run locally

00:04:07,169 --> 00:04:13,109
of course when Khan doesn't run or isn't

00:04:10,090 --> 00:04:17,349
available you won't see any containers

00:04:13,109 --> 00:04:20,639
now back to Khan we re implemented an

00:04:17,349 --> 00:04:25,270
existing solution for repeatable bills

00:04:20,639 --> 00:04:26,460
it looks like that maybe someone knows

00:04:25,270 --> 00:04:31,810
what that is

00:04:26,460 --> 00:04:33,699
yeah docker file more or less so we

00:04:31,810 --> 00:04:37,870
essentially do the same this is because

00:04:33,699 --> 00:04:40,380
of the history of Khan we first ran on

00:04:37,870 --> 00:04:44,280
docker but docker didn't have

00:04:40,380 --> 00:04:46,710
the features we required so we edit the

00:04:44,280 --> 00:04:49,080
features and had about 80% code on top

00:04:46,710 --> 00:04:51,930
of talker and just 20% managing talker

00:04:49,080 --> 00:04:54,270
and at some point we threw away the

00:04:51,930 --> 00:04:57,330
docket part and three implemented to 20%

00:04:54,270 --> 00:05:00,170
ourselves and this is part of it so this

00:04:57,330 --> 00:05:03,960
is a very very simple language that

00:05:00,170 --> 00:05:06,420
essentially starts up a Alexeev

00:05:03,960 --> 00:05:10,740
container runs a command inside it like

00:05:06,420 --> 00:05:12,930
apt-get update and closes that container

00:05:10,740 --> 00:05:15,660
again and for the next command it

00:05:12,930 --> 00:05:18,780
creates a new snapshot of this template

00:05:15,660 --> 00:05:21,450
that now was configured with that

00:05:18,780 --> 00:05:26,100
command and runs for example apt-get

00:05:21,450 --> 00:05:29,430
upgrade - why this results in a large

00:05:26,100 --> 00:05:32,970
template tree because what you see here

00:05:29,430 --> 00:05:38,570
is one line is a snapshot of one command

00:05:32,970 --> 00:05:41,910
you saw earlier so one of one file we

00:05:38,570 --> 00:05:43,620
actually call it Khan file one of one

00:05:41,910 --> 00:05:47,280
line in this file results in one line

00:05:43,620 --> 00:05:49,890
here in the hierarchy and the longer

00:05:47,280 --> 00:05:55,350
lines are the final templates that you

00:05:49,890 --> 00:05:57,630
can use in to loop so Khan is using lxd

00:05:55,350 --> 00:06:01,200
for virtualization shell in the box for

00:05:57,630 --> 00:06:04,470
the web console iptables for network

00:06:01,200 --> 00:06:08,690
accounting or Linux tools here are some

00:06:04,470 --> 00:06:12,030
rules for that if you didn't know and

00:06:08,690 --> 00:06:14,370
it's using a lot of the C group magic

00:06:12,030 --> 00:06:20,730
from the Linux kernel for accounting

00:06:14,370 --> 00:06:23,760
like the CPU act group where the CPU act

00:06:20,730 --> 00:06:27,840
usage counts the nanoseconds per second

00:06:23,760 --> 00:06:31,140
which are used on the CPU and the same

00:06:27,840 --> 00:06:33,090
for the memory which gives RSS active

00:06:31,140 --> 00:06:36,510
inactive memory file memory caches and

00:06:33,090 --> 00:06:39,320
so on it's using offs for storage this

00:06:36,510 --> 00:06:43,740
is a layered file system you can mount

00:06:39,320 --> 00:06:47,310
any number nearly any number of your

00:06:43,740 --> 00:06:51,030
ordinary directories on top of another

00:06:47,310 --> 00:06:53,280
and they derive from each other that

00:06:51,030 --> 00:06:54,100
means if you have a file a in the lower

00:06:53,280 --> 00:06:56,110
container and

00:06:54,100 --> 00:06:57,640
I'll be container sorry in the in the

00:06:56,110 --> 00:06:59,980
lower directory and if I'll be in the

00:06:57,640 --> 00:07:03,310
higher directory and you mount both then

00:06:59,980 --> 00:07:05,140
you see file a and file B and they do

00:07:03,310 --> 00:07:09,760
some magic with deleted files and so on

00:07:05,140 --> 00:07:14,640
this is a very stable solution so that

00:07:09,760 --> 00:07:19,180
leads me to the failures we had yes many

00:07:14,640 --> 00:07:21,310
let's talk about B three FS we first

00:07:19,180 --> 00:07:25,060
choose B three FS instead of house

00:07:21,310 --> 00:07:29,620
because it's fast it's even fast for

00:07:25,060 --> 00:07:30,490
millions of files it works first it

00:07:29,620 --> 00:07:32,860
works very good

00:07:30,490 --> 00:07:35,620
it has writable snapshot that means you

00:07:32,860 --> 00:07:37,780
can at any point use any sub volume in a

00:07:35,620 --> 00:07:41,860
b-tree FS make a snapshot of it and

00:07:37,780 --> 00:07:44,590
write in both at the diverge it has live

00:07:41,860 --> 00:07:47,140
quota with sub volumes that means you

00:07:44,590 --> 00:07:50,500
have at any point the disk usage of this

00:07:47,140 --> 00:07:54,870
sub volume in some with all the

00:07:50,500 --> 00:07:57,970
snapshots below it and just the diff

00:07:54,870 --> 00:08:01,900
what is the difference to where it was

00:07:57,970 --> 00:08:05,680
snapshot it from and it has an instant

00:08:01,900 --> 00:08:10,570
creation of snapshots it's like a tenth

00:08:05,680 --> 00:08:12,730
of a second but maybe you have seen that

00:08:10,570 --> 00:08:17,620
this is the Linux iOS deck or a diagram

00:08:12,730 --> 00:08:22,030
of it you can basically stack anything

00:08:17,620 --> 00:08:24,490
in Linux on top of another and like like

00:08:22,030 --> 00:08:27,250
block devices then filesystem then a

00:08:24,490 --> 00:08:31,900
filesystem image then partition inside

00:08:27,250 --> 00:08:35,490
it and so on without knowing exactly

00:08:31,900 --> 00:08:39,580
what that does it's not needed we did

00:08:35,490 --> 00:08:41,440
use a device manager for rate 10 this is

00:08:39,580 --> 00:08:45,610
on the hard drives on the physical hard

00:08:41,440 --> 00:08:47,290
drives on top we used LLVM logical

00:08:45,610 --> 00:08:50,530
volume manager on top we use to build

00:08:47,290 --> 00:08:54,760
Rio this is the KDM virtual disk IO

00:08:50,530 --> 00:08:57,580
layer on top we used a partition on top

00:08:54,760 --> 00:09:00,160
of that for one partition we used x4 on

00:08:57,580 --> 00:09:04,360
top of that we used an image file which

00:09:00,160 --> 00:09:07,329
we mounted as a loopback device and put

00:09:04,360 --> 00:09:09,879
Petri FS on it this was a test setup

00:09:07,329 --> 00:09:11,470
because the image fell is quite nice for

00:09:09,879 --> 00:09:12,910
handling and for pickup you can just

00:09:11,470 --> 00:09:18,459
turn it off copy the image files

00:09:12,910 --> 00:09:21,249
somewhere and run it again however then

00:09:18,459 --> 00:09:23,739
the be three FS cleaner died B two FS is

00:09:21,249 --> 00:09:27,639
a lazy file system it does what it needs

00:09:23,739 --> 00:09:29,559
to and cleans up later that means the B

00:09:27,639 --> 00:09:33,999
3 FS cleaner has to run and it has to

00:09:29,559 --> 00:09:36,610
clean up later and it died during its

00:09:33,999 --> 00:09:41,829
job and we lost data that's not meant to

00:09:36,610 --> 00:09:44,829
be there's a thing in Linux in the Linux

00:09:41,829 --> 00:09:47,499
iOS deck that's called Perrier's this

00:09:44,829 --> 00:09:49,779
copied from an article on an l WM in a

00:09:47,499 --> 00:09:52,179
sense a buried barrier forbids the

00:09:49,779 --> 00:09:54,339
writing of any blocks after the barrier

00:09:52,179 --> 00:09:56,649
until all blocks written before the

00:09:54,339 --> 00:09:58,449
barrier are committed to the media that

00:09:56,649 --> 00:10:02,679
makes sure that the journal of the

00:09:58,449 --> 00:10:04,029
filesystem is consistent looks like the

00:10:02,679 --> 00:10:07,149
barrier didn't find its way through

00:10:04,029 --> 00:10:10,600
these layers so some point in this deck

00:10:07,149 --> 00:10:15,910
obviously I have to debugging it didn't

00:10:10,600 --> 00:10:18,160
work with barriers so we tried again the

00:10:15,910 --> 00:10:20,319
same basic setup will use the raid 10 we

00:10:18,160 --> 00:10:22,360
used LVM on top we used Verdi all with

00:10:20,319 --> 00:10:24,339
KVM because this is our default setup we

00:10:22,360 --> 00:10:26,549
didn't want to throw that away that

00:10:24,339 --> 00:10:30,279
helps us very much with backups and and

00:10:26,549 --> 00:10:32,889
things like that so on top of that we

00:10:30,279 --> 00:10:36,549
use the partition and directly a b-tree

00:10:32,889 --> 00:10:40,089
FS and hooray we try to crash it again

00:10:36,549 --> 00:10:43,319
it didn't so it Petrey FS looked stable

00:10:40,089 --> 00:10:46,299
from that point Barry you're standing

00:10:43,319 --> 00:10:49,449
well that's another thing about the

00:10:46,299 --> 00:10:53,079
Petri FS cleaner it produces a lot of

00:10:49,449 --> 00:10:54,850
memory fragmentation if you have never

00:10:53,079 --> 00:10:56,919
heard about memory fragmentation years

00:10:54,850 --> 00:10:59,739
it exists and Linux has a table of it

00:10:56,919 --> 00:11:02,709
that you will see when you see a kernel

00:10:59,739 --> 00:11:05,019
trace back in damask and one line of

00:11:02,709 --> 00:11:08,339
that is a page allocation failure in

00:11:05,019 --> 00:11:11,739
that case order for the order is the

00:11:08,339 --> 00:11:13,779
pretension of two of the block size in

00:11:11,739 --> 00:11:17,709
memory that couldn't be allocated this

00:11:13,779 --> 00:11:20,390
means that a 64 kilobyte block wasn't

00:11:17,709 --> 00:11:22,940
available of continuous memory

00:11:20,390 --> 00:11:25,670
this is pretty bad because that's not

00:11:22,940 --> 00:11:28,040
much and there's no defragmentation tool

00:11:25,670 --> 00:11:29,890
in the linux kernel this is if you have

00:11:28,040 --> 00:11:35,529
this state it will never run again

00:11:29,890 --> 00:11:38,810
except there's a memory freeing okay so

00:11:35,529 --> 00:11:42,890
we through be tree of s away and used

00:11:38,810 --> 00:11:46,550
host which is a bit slower but much more

00:11:42,890 --> 00:11:49,970
stable and we are happy with it next

00:11:46,550 --> 00:11:52,399
failure xml-rpc first we'll use co-op is

00:11:49,970 --> 00:11:57,709
a really excellent tool it is pretty

00:11:52,399 --> 00:12:00,110
fast it has a good serialization you can

00:11:57,709 --> 00:12:04,130
basically just fire off messages they

00:12:00,110 --> 00:12:07,339
will arrive somewhere and it's a lot

00:12:04,130 --> 00:12:09,350
faster than XML RPC but it was leaking

00:12:07,339 --> 00:12:11,480
file descriptor we're not using G event

00:12:09,350 --> 00:12:16,100
with which we can't because we are

00:12:11,480 --> 00:12:19,490
currently bound to threats and then we

00:12:16,100 --> 00:12:24,170
used XML RPC but it was very nice we

00:12:19,490 --> 00:12:28,850
were a little a little bit blue eyed

00:12:24,170 --> 00:12:31,459
it's in Germany we use bytes for

00:12:28,850 --> 00:12:34,339
anything that was transferred like for

00:12:31,459 --> 00:12:41,230
memory usage for network traffic for

00:12:34,339 --> 00:12:41,230
disk space and so on but there's a two

00:12:41,529 --> 00:12:53,149
potential to the 31 limit of XML RPC and

00:12:48,519 --> 00:12:55,820
we couldn't use bytes anymore so we had

00:12:53,149 --> 00:12:59,000
to serialize all large numbers to

00:12:55,820 --> 00:13:02,360
strings or moved to megabytes where

00:12:59,000 --> 00:13:05,029
possible so it's running for now until

00:13:02,360 --> 00:13:09,800
we hit the 4 gigabyte limit again and

00:13:05,029 --> 00:13:12,079
have problems with megabytes - ok that's

00:13:09,800 --> 00:13:15,260
it for my part I would have a lot more

00:13:12,079 --> 00:13:18,290
failures but time's running and I'll

00:13:15,260 --> 00:13:22,420
give over to Oliver for questions I'll

00:13:18,290 --> 00:13:22,420
be there directly after his part

00:13:27,220 --> 00:13:31,790
hi I'm here working at the front end of

00:13:31,009 --> 00:13:37,639
two hoop

00:13:31,790 --> 00:13:39,819
my name is Oliver Rock I choose Django

00:13:37,639 --> 00:13:43,550
an angular chess to get the value I

00:13:39,819 --> 00:13:45,620
started pretty much fast I use Django

00:13:43,550 --> 00:13:48,850
for user accounting invoicing management

00:13:45,620 --> 00:13:53,089
and as a mediator from Daniels xml-rpc

00:13:48,850 --> 00:13:55,660
API to chasing API I can digest with

00:13:53,089 --> 00:13:59,389
angularjs

00:13:55,660 --> 00:14:01,689
first of all Django is using CSRF

00:13:59,389 --> 00:14:04,550
protection for a lot of use if you

00:14:01,689 --> 00:14:07,279
activate the middleware so we have to

00:14:04,550 --> 00:14:10,300
tell angular chess to take the token

00:14:07,279 --> 00:14:16,670
from the cookie and send it to every

00:14:10,300 --> 00:14:18,829
asynchronous request the next problem

00:14:16,670 --> 00:14:21,160
angularjs templates will collide with

00:14:18,829 --> 00:14:23,750
your django django template language

00:14:21,160 --> 00:14:25,839
because they all use the double curly

00:14:23,750 --> 00:14:28,519
braces so we have to tell angular to use

00:14:25,839 --> 00:14:35,689
for example the curly brace and the

00:14:28,519 --> 00:14:40,309
dollar sign internationalization chang

00:14:35,689 --> 00:14:43,699
uses po5 looks pretty much like soap

00:14:40,309 --> 00:14:45,379
loaned us to have a consistent state

00:14:43,699 --> 00:14:48,559
between the chang views and the

00:14:45,379 --> 00:14:50,829
JavaScript views you can use the chang

00:14:48,559 --> 00:14:54,559
of Uzziah 18 and Travis will catalog

00:14:50,829 --> 00:14:56,089
which takes the profiles and generates a

00:14:54,559 --> 00:14:59,029
JavaScript you can include it into your

00:14:56,089 --> 00:15:02,000
side and your function like a text to

00:14:59,029 --> 00:15:04,459
have internet sensation you wouldn't use

00:15:02,000 --> 00:15:09,860
document.write and angular chess it's

00:15:04,459 --> 00:15:11,980
just for example and the next we have a

00:15:09,860 --> 00:15:14,120
lot of requests depending on user

00:15:11,980 --> 00:15:17,029
permissions so we have to include a

00:15:14,120 --> 00:15:20,269
permission denied exception there is

00:15:17,029 --> 00:15:24,610
delivered by Chango but a standard HTTP

00:15:20,269 --> 00:15:28,699
service by HHS doesn't and four three so

00:15:24,610 --> 00:15:30,620
you have to create a custom interceptor

00:15:28,699 --> 00:15:31,639
for that so we have a factory permission

00:15:30,620 --> 00:15:33,320
denied interceptor

00:15:31,639 --> 00:15:35,150
you can handle

00:15:33,320 --> 00:15:36,470
a request request our response in

00:15:35,150 --> 00:15:40,040
response error in this case it's a

00:15:36,470 --> 00:15:42,620
response error for three so we set the

00:15:40,040 --> 00:15:46,640
location to slash it's the front page

00:15:42,620 --> 00:15:48,820
and registration login page another good

00:15:46,640 --> 00:15:51,200
product is the data entry bookkeeping

00:15:48,820 --> 00:15:53,720
bookkeeping it's January count balances

00:15:51,200 --> 00:15:55,760
you have full audit trail you have

00:15:53,720 --> 00:15:58,640
always a debit entry and credit entry or

00:15:55,760 --> 00:16:02,450
credit entry to debit entry so you won't

00:15:58,640 --> 00:16:04,280
lose any money it's pretty simple you

00:16:02,450 --> 00:16:05,720
have to define a source it's a bank

00:16:04,280 --> 00:16:08,600
account to destination account the user

00:16:05,720 --> 00:16:14,210
the amount and the user and that is

00:16:08,600 --> 00:16:16,600
privileged to transfer the money the

00:16:14,210 --> 00:16:20,180
most important thing is keeping the Dom

00:16:16,600 --> 00:16:21,830
on the front page of to whoop you have a

00:16:20,180 --> 00:16:25,430
list of your containers running that is

00:16:21,830 --> 00:16:29,270
updated every two or three seconds if

00:16:25,430 --> 00:16:31,190
you miss to track by an ID angularjs

00:16:29,270 --> 00:16:33,230
will replace the whole Dom every two or

00:16:31,190 --> 00:16:34,580
three seconds so you won't be able to

00:16:33,230 --> 00:16:37,190
interact with all your containers

00:16:34,580 --> 00:16:42,260
because just in a click hold down his

00:16:37,190 --> 00:16:43,790
gun and replaced by another one yeah

00:16:42,260 --> 00:16:46,420
it's all pretty much simple but it's due

00:16:43,790 --> 00:16:54,160
to the fact that Django and angular are

00:16:46,420 --> 00:16:54,160
simple to program any questions yeah

00:16:59,470 --> 00:17:03,740
Thank You Daniel Thank You Oliver

00:17:01,910 --> 00:17:06,650
any questions come to the microphones

00:17:03,740 --> 00:17:07,970
and we'll ask you in turn so let's start

00:17:06,650 --> 00:17:12,410
with this chap

00:17:07,970 --> 00:17:16,189
what kind of version of B three FS you

00:17:12,410 --> 00:17:19,819
used for tests what version will be used

00:17:16,189 --> 00:17:23,390
for B three FS tests we were starting

00:17:19,819 --> 00:17:27,260
with what Colonel Ubuntu 1310 and were

00:17:23,390 --> 00:17:29,210
testing it again on 1404 I think it's

00:17:27,260 --> 00:17:31,910
one point something in the latest

00:17:29,210 --> 00:17:45,740
version where the B travesty no also did

00:17:31,910 --> 00:17:48,590
these memory fragmentation things so if

00:17:45,740 --> 00:17:54,400
you using JSON for the front end

00:17:48,590 --> 00:17:58,130
why is xml-rpc in the back end it was a

00:17:54,400 --> 00:18:00,350
decision for development speed the

00:17:58,130 --> 00:18:03,020
xml-rpc module in Titan is well tested

00:18:00,350 --> 00:18:06,919
and really complete and you all you have

00:18:03,020 --> 00:18:10,760
to do is I don't know derive I think

00:18:06,919 --> 00:18:13,040
from the xml-rpc class and it makes the

00:18:10,760 --> 00:18:14,840
server automatically you have no effort

00:18:13,040 --> 00:18:16,669
with it you just define methods that can

00:18:14,840 --> 00:18:21,049
be called from outside this is just for

00:18:16,669 --> 00:18:22,549
development simplicity so you switch

00:18:21,049 --> 00:18:24,380
away from docker because some features

00:18:22,549 --> 00:18:26,150
were missing Dockers like still in

00:18:24,380 --> 00:18:27,530
current development and do you think

00:18:26,150 --> 00:18:31,880
they will catch up with the features you

00:18:27,530 --> 00:18:35,600
need like soon and it wasn't just about

00:18:31,880 --> 00:18:40,549
features it was in consistency too there

00:18:35,600 --> 00:18:44,990
were a lot of accounting things that

00:18:40,549 --> 00:18:48,950
docker returned when when calling it

00:18:44,990 --> 00:18:51,320
they were inconsistent in itself and we

00:18:48,950 --> 00:18:54,080
we had to work around that I don't

00:18:51,320 --> 00:18:56,390
exactly remember what there was and we

00:18:54,080 --> 00:18:59,330
had to do all the secrets magic I was

00:18:56,390 --> 00:19:03,370
shortly talking about ourselves and much

00:18:59,330 --> 00:19:05,390
more and we included all that and

00:19:03,370 --> 00:19:07,820
accounting network accounting like the

00:19:05,390 --> 00:19:08,680
IP table stuff and so on completely into

00:19:07,820 --> 00:19:11,740
our

00:19:08,680 --> 00:19:15,040
product and that was the most code of it

00:19:11,740 --> 00:19:20,710
the the who you are Alexi virtualization

00:19:15,040 --> 00:19:22,240
isn't much and another question do you

00:19:20,710 --> 00:19:25,120
have now so you have genuine England

00:19:22,240 --> 00:19:27,580
it's sorry the other guy and you have no

00:19:25,120 --> 00:19:29,020
Django and angular and it's your side

00:19:27,580 --> 00:19:32,290
does it support like progressive

00:19:29,020 --> 00:19:34,330
enhancement or how does it how do you

00:19:32,290 --> 00:19:37,840
handle that like if you go to a URL

00:19:34,330 --> 00:19:40,090
directly that's it sorry I think that it

00:19:37,840 --> 00:19:44,620
progressive enhancement do you use it

00:19:40,090 --> 00:19:46,540
what's that so when you note your side

00:19:44,620 --> 00:19:48,820
and then you don't expect any JavaScript

00:19:46,540 --> 00:19:58,000
to be running and the side still works

00:19:48,820 --> 00:19:59,500
or non client rendering no no lots of

00:19:58,000 --> 00:20:03,070
time for questions so come up to the

00:19:59,500 --> 00:20:05,440
microphone I have a question if is your

00:20:03,070 --> 00:20:09,150
format content container format

00:20:05,440 --> 00:20:15,430
compatible with the docker one because

00:20:09,150 --> 00:20:19,540
if you made a so-called fork of docker

00:20:15,430 --> 00:20:22,630
and if I want to use your your hosting

00:20:19,540 --> 00:20:25,180
infrastructure and didn't want to you

00:20:22,630 --> 00:20:29,680
know vendor lock-in it can I move to the

00:20:25,180 --> 00:20:32,590
docker hub or something so your question

00:20:29,680 --> 00:20:35,320
is if if we have a compatible layout of

00:20:32,590 --> 00:20:36,910
directories yes no we don't you you

00:20:35,320 --> 00:20:39,850
could manually copy the things around

00:20:36,910 --> 00:20:41,980
and I think it would work and write some

00:20:39,850 --> 00:20:46,510
configuration files for talker for each

00:20:41,980 --> 00:20:48,720
container but you can use it directly in

00:20:46,510 --> 00:20:48,720
Tucker

00:20:52,610 --> 00:20:59,480
do you do any kind of network isolation

00:20:56,480 --> 00:21:02,690
between containers of the same customer

00:20:59,480 --> 00:21:05,630
and how do you do that we have a network

00:21:02,690 --> 00:21:08,960
isolation all containers have private IP

00:21:05,630 --> 00:21:11,299
addresses and we only forward configured

00:21:08,960 --> 00:21:13,940
ports for each container that you can

00:21:11,299 --> 00:21:17,990
configure yourself so it's like a web

00:21:13,940 --> 00:21:19,789
firewall management thing but we don't

00:21:17,990 --> 00:21:23,419
support private networks right now

00:21:19,789 --> 00:21:26,120
between containers we are here to learn

00:21:23,419 --> 00:21:28,580
and we already implemented a few things

00:21:26,120 --> 00:21:32,510
we heard from people talking about

00:21:28,580 --> 00:21:34,850
downstairs but and one and one of these

00:21:32,510 --> 00:21:37,549
things is private networking we had a

00:21:34,850 --> 00:21:40,700
reasonable use case we heard a

00:21:37,549 --> 00:21:44,679
reasonable use case for it now because

00:21:40,700 --> 00:21:47,000
our aim isn't to orchestrate

00:21:44,679 --> 00:21:48,440
applications together but to have one

00:21:47,000 --> 00:21:50,510
container that contains anything you

00:21:48,440 --> 00:21:54,139
need like a Postgres energy angle and

00:21:50,510 --> 00:21:56,000
whatever but we have now a good use case

00:21:54,139 --> 00:22:00,710
where a private networking is needed and

00:21:56,000 --> 00:22:02,630
I think it'll come in a short time hey

00:22:00,710 --> 00:22:06,049
congratulations on a really cool project

00:22:02,630 --> 00:22:08,179
and do you have any plans for an IPO at

00:22:06,049 --> 00:22:11,659
moment do you have a nice can I script

00:22:08,179 --> 00:22:15,200
these containers not yet very beautiful

00:22:11,659 --> 00:22:19,130
you can inspect what the site does with

00:22:15,200 --> 00:22:21,320
this with the browser and use that but

00:22:19,130 --> 00:22:23,389
it's still based on session cookie and

00:22:21,320 --> 00:22:26,929
and stuff like that you can of course

00:22:23,389 --> 00:22:30,580
use that but we are on making that a lot

00:22:26,929 --> 00:22:33,580
more beautiful and documented especially

00:22:30,580 --> 00:22:33,580
yes

00:22:34,090 --> 00:22:44,980
how long did it take to reach this point

00:22:37,840 --> 00:22:49,250
we started in August last year yeah I

00:22:44,980 --> 00:22:51,500
think that's it okay any final questions

00:22:49,250 --> 00:22:53,900
we have got time venue honors final

00:22:51,500 --> 00:22:56,030
question otherwise put your hands

00:22:53,900 --> 00:22:58,750
together and thank Daniel ID Oliver for

00:22:56,030 --> 00:22:58,750

YouTube URL: https://www.youtube.com/watch?v=ggHsRX48SJw


