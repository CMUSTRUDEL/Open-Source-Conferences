Title: Christian Tismer Anselm Kruis - Stackless: Recent advancements and future goals
Publication date: 2015-04-18
Playlist: EuroPython 2014
Description: 
	Christian Tismer/Anselm Kruis - Stackless: Recent advancements and future goals
[EuroPython 2014]
[23 July 2014]

Stackless (formerly known as Stackless-Python) is an enhanced variant of the Python-language. Stackless is best 
known for its lightweight microthreads. But that's not all. In this talk Stackless core developers demonstrate
recent advancements regarding multi-threading, custom-scheduling, debugging with Stackless and explain future 
plans for Stackless.

-----

Stackless: Recent advancements and future goals
-------------------------------------------------------

Since Python release 1.5 Stackless Python is an enhanced variant of C-Python.
Stackless is best known for its addition of lightweight microthreads (tasklets) and 
channels.

Less known are the recent enhancements that became available with Stackless 2.7.6. 
In this talk core Stackless developers demonstrate

 * The improved multi-threading support
 * How to build custom scheduling primitives based on atomic tasklet operations
 * The much improved debugger support
 * ...
 
Stackless recently switched the new master repository from hg.python.org/stackless to bitbucket to 
allow for a more open development process. We'll summarise our experience and discuss our
plans for the future development of Stackless.

The talk will be help by Anselm Kruis and Christian Tismer.
If we are lucky, we will also welcome Kristján Valur Jónsson from Iceland.
Captions: 
	00:00:15,590 --> 00:00:22,050
today we want to talk about stateless

00:00:19,340 --> 00:00:25,290
former name was tactless Python I don't

00:00:22,050 --> 00:00:29,070
know how many people know about this

00:00:25,290 --> 00:00:33,450
project already it is a rather

00:00:29,070 --> 00:00:36,870
old one and in the last couple of months

00:00:33,450 --> 00:00:40,800
a lot of changes have been have been

00:00:36,870 --> 00:00:43,200
made a lot of enhancements which really

00:00:40,800 --> 00:00:46,770
makes tactless very usable and a drop-in

00:00:43,200 --> 00:00:51,180
replacement for C Python and that's

00:00:46,770 --> 00:00:55,290
mostly the work of my colleagues and one

00:00:51,180 --> 00:00:59,790
of them is under McCoy's with giving

00:00:55,290 --> 00:01:03,870
them majority of this talk today I think

00:00:59,790 --> 00:01:09,329
to do an introduction about what's

00:01:03,870 --> 00:01:13,799
necklace what status python is and then

00:01:09,329 --> 00:01:15,930
we get to the new things and but please

00:01:13,799 --> 00:01:22,280
interrupt me when I'm equivalent to much

00:01:15,930 --> 00:01:22,280
I were to do the same for you okay so

00:01:23,270 --> 00:01:40,860
see so hows it looks Gospels traversing

00:01:37,049 --> 00:01:51,330
across ok presentation mode analysis ok

00:01:40,860 --> 00:01:58,520
ok just yep ok so what is stateless it

00:01:51,330 --> 00:02:02,100
has been around since 1998 and had its

00:01:58,520 --> 00:02:05,670
shadow existence behind regular Python

00:02:02,100 --> 00:02:08,789
and it is kind of a niche product which

00:02:05,670 --> 00:02:14,790
tries to do things that nullifies and

00:02:08,789 --> 00:02:19,549
cannot do so it is called that status as

00:02:14,790 --> 00:02:19,549
a Python that does not use the sea stack

00:02:20,510 --> 00:02:25,030
that's a lie because of course it does

00:02:23,129 --> 00:02:33,550
use the sea stack

00:02:25,030 --> 00:02:36,190
it does not it does not have problems

00:02:33,550 --> 00:02:43,440
because of that because the sea stack is

00:02:36,190 --> 00:02:43,440
always built up and and removed again so

00:02:44,610 --> 00:02:50,920
stack lyst means that there is no

00:02:47,170 --> 00:02:54,190
dependency from the sea stack and that

00:02:50,920 --> 00:02:59,650
is the main reason to be able to do task

00:02:54,190 --> 00:03:01,989
switching and other stuff so actually

00:02:59,650 --> 00:03:05,830
status as a Python version that does not

00:03:01,989 --> 00:03:10,120
keep state on the sea stack it has some

00:03:05,830 --> 00:03:13,650
state sometimes but in certain at

00:03:10,120 --> 00:03:16,930
certain times where it can perform some

00:03:13,650 --> 00:03:19,690
contexts which this stack state is

00:03:16,930 --> 00:03:25,060
removed completely so it's breathing up

00:03:19,690 --> 00:03:31,480
and down until sudden something else has

00:03:25,060 --> 00:03:35,140
to protest to be run so this is yeah

00:03:31,480 --> 00:03:37,690
theoretically it in an Irial word it

00:03:35,140 --> 00:03:40,329
would work this way but in the real

00:03:37,690 --> 00:03:44,140
world in ninety percent of all cases it

00:03:40,329 --> 00:03:48,910
works in this cooperative manner but not

00:03:44,140 --> 00:03:54,970
or not always so stateless is like C

00:03:48,910 --> 00:03:57,489
Python unless you import the stateless

00:03:54,970 --> 00:04:04,650
module there's nothing changed at all

00:03:57,489 --> 00:04:07,900
not even the behavior the creation of

00:04:04,650 --> 00:04:12,160
recording level limits and all all of

00:04:07,900 --> 00:04:14,820
that is it's all original C Python it

00:04:12,160 --> 00:04:18,250
can do a little bit more than C Python

00:04:14,820 --> 00:04:22,080
so there's a stateless module and you

00:04:18,250 --> 00:04:25,750
can import this necklace module and that

00:04:22,080 --> 00:04:30,430
suddenly creates a lot of new a few new

00:04:25,750 --> 00:04:32,260
functions with a lot of possibilities so

00:04:30,430 --> 00:04:34,599
it looks a little bit like an extension

00:04:32,260 --> 00:04:37,550
module but it is no extension module

00:04:34,599 --> 00:04:39,170
because stateless Python requires

00:04:37,550 --> 00:04:42,710
quite a lot of changes to the

00:04:39,170 --> 00:04:46,190
interpreter this does not change the way

00:04:42,710 --> 00:04:52,640
how you use it and it does not change

00:04:46,190 --> 00:04:55,400
the format of pickled things or anything

00:04:52,640 --> 00:04:57,770
else but the way the virtual machine is

00:04:55,400 --> 00:05:01,460
working is different from that phone see

00:04:57,770 --> 00:05:04,280
Python and I think stateless does it the

00:05:01,460 --> 00:05:09,500
right way and C Python does not but

00:05:04,280 --> 00:05:17,900
that's a long fight I will probably lose

00:05:09,500 --> 00:05:22,010
in the end okay so yeah what is really

00:05:17,900 --> 00:05:24,680
what what is it about reckless yeah you

00:05:22,010 --> 00:05:26,780
have a little tiny move prior tight and

00:05:24,680 --> 00:05:32,090
tiny programs these tiny programs can be

00:05:26,780 --> 00:05:34,910
switched forth and back you can

00:05:32,090 --> 00:05:37,460
communicate over channels between these

00:05:34,910 --> 00:05:43,970
tiny programs the tiny promes are called

00:05:37,460 --> 00:05:46,880
taslitz it's similar to so called micro

00:05:43,970 --> 00:05:51,050
threats but there are no threats at all

00:05:46,880 --> 00:05:53,480
at athleta start it's just a tiny piece

00:05:51,050 --> 00:05:58,340
of program with runs wire and at some

00:05:53,480 --> 00:06:00,500
point it decides to to yield its time

00:05:58,340 --> 00:06:03,020
slice to someone else and then it

00:06:00,500 --> 00:06:06,050
continues in another place in the

00:06:03,020 --> 00:06:10,310
program and that's the difference to see

00:06:06,050 --> 00:06:16,070
Python that's something that was

00:06:10,310 --> 00:06:21,230
invented for C Python in 3 dot 3 of food

00:06:16,070 --> 00:06:23,690
for i think by using yield from

00:06:21,230 --> 00:06:34,490
constructions or so slightly said that

00:06:23,690 --> 00:06:37,880
since nineteen or 2002 I think okay so

00:06:34,490 --> 00:06:40,250
actually we have taslitz which are a

00:06:37,880 --> 00:06:45,890
little like co routines and this can

00:06:40,250 --> 00:06:48,460
switch freely between each other and the

00:06:45,890 --> 00:06:52,460
ability to do so is

00:06:48,460 --> 00:06:55,580
yeah is the way the interpreter is

00:06:52,460 --> 00:07:00,139
constructed which is non recursive but

00:06:55,580 --> 00:07:01,910
it's only doing small cause and going

00:07:00,139 --> 00:07:07,400
back before I switches to something else

00:07:01,910 --> 00:07:11,630
so we have no contention of the sea

00:07:07,400 --> 00:07:14,180
snake which in C Python you have the sea

00:07:11,630 --> 00:07:17,330
stack and if you have three nested cause

00:07:14,180 --> 00:07:21,470
of a Python function you also have three

00:07:17,330 --> 00:07:24,710
nested cause of C functions which do

00:07:21,470 --> 00:07:31,250
this Python function and that's exactly

00:07:24,710 --> 00:07:34,310
what stateless does not okay here's an

00:07:31,250 --> 00:07:39,229
example we have some cooperative and

00:07:34,310 --> 00:07:43,639
what if asking we import stateless we

00:07:39,229 --> 00:07:46,419
define two functions of receiving

00:07:43,639 --> 00:07:54,229
translate and a sending tas clipped and

00:07:46,419 --> 00:07:57,530
then we just start them added some some

00:07:54,229 --> 00:08:00,200
examples just in order to save me from

00:07:57,530 --> 00:08:05,240
typing because typing is not so well but

00:08:00,200 --> 00:08:11,210
we can have some examples afterwards so

00:08:05,240 --> 00:08:13,910
let me see him over this so when the

00:08:11,210 --> 00:08:15,970
task 'let's are communicating you see

00:08:13,910 --> 00:08:19,849
the some protocol where you see that

00:08:15,970 --> 00:08:26,690
they are jumping from from one context

00:08:19,849 --> 00:08:30,770
to the lr and well some people might say

00:08:26,690 --> 00:08:33,529
why don't you just use the greenland the

00:08:30,770 --> 00:08:34,940
green that is actually a quite famous

00:08:33,529 --> 00:08:39,800
and very complete and good

00:08:34,940 --> 00:08:43,390
implementation of the task searching it

00:08:39,800 --> 00:08:46,820
does that with some technology from

00:08:43,390 --> 00:08:49,390
stateless python which is called heart

00:08:46,820 --> 00:08:49,390
switching

00:08:49,760 --> 00:08:59,680
it does that by slicing the sea stack

00:08:54,410 --> 00:09:05,810
into small pieces and really brute force

00:08:59,680 --> 00:09:09,730
context switching so it is quite perfect

00:09:05,810 --> 00:09:12,260
because the green net has been

00:09:09,730 --> 00:09:14,870
unmaintained for many years and it's

00:09:12,260 --> 00:09:16,970
always working because it does not know

00:09:14,870 --> 00:09:21,830
anything about the things that is

00:09:16,970 --> 00:09:25,130
switching so it is very stable and very

00:09:21,830 --> 00:09:28,280
major but it has the drawback that it's

00:09:25,130 --> 00:09:36,620
slower than specters Python and it has

00:09:28,280 --> 00:09:38,270
some things that it cannot do so the

00:09:36,620 --> 00:09:41,150
technology of the Greenert is quite

00:09:38,270 --> 00:09:43,970
close to spectra stood at 0 where we

00:09:41,150 --> 00:09:46,550
only had this hard switching grabbing

00:09:43,970 --> 00:09:49,580
pieces of the stack and moving them

00:09:46,550 --> 00:09:53,050
around the soft switch ring does that in

00:09:49,580 --> 00:09:58,010
a cooperative manner so the stack is

00:09:53,050 --> 00:09:59,990
actively unwound and the context

00:09:58,010 --> 00:10:03,290
switching is built into the interpreter

00:09:59,990 --> 00:10:05,740
and that is much more work because it's

00:10:03,290 --> 00:10:13,430
harder to maintain it's also much more

00:10:05,740 --> 00:10:18,070
efficient and has yeah it has some some

00:10:13,430 --> 00:10:21,800
other advantages we come to that later

00:10:18,070 --> 00:10:26,740
so we might talk about the heart

00:10:21,800 --> 00:10:29,530
switching but I think maybe not now

00:10:26,740 --> 00:10:35,480
hearts Wittering ass off twittering is

00:10:29,530 --> 00:10:40,250
some real difference between stateless

00:10:35,480 --> 00:10:43,880
and grenades but the real thing actually

00:10:40,250 --> 00:10:47,480
is with satisfies and we can pick your

00:10:43,880 --> 00:10:51,710
program state so we have we don't have

00:10:47,480 --> 00:10:54,110
only the ability to switch around like

00:10:51,710 --> 00:10:58,280
can do but we can pickle the program

00:10:54,110 --> 00:11:00,560
estate we can run a program to a certain

00:10:58,280 --> 00:11:06,970
point then take a snapshot of the

00:11:00,560 --> 00:11:10,850
program and take that snapshot on

00:11:06,970 --> 00:11:15,560
another machine or tomorrow or whenever

00:11:10,850 --> 00:11:25,220
in the cloud and continue the program

00:11:15,560 --> 00:11:31,100
from where it was because so I have a

00:11:25,220 --> 00:11:33,820
little demonstration that takes a simple

00:11:31,100 --> 00:11:37,070
recursive functions just to show how

00:11:33,820 --> 00:11:39,590
that you have a recursive function that

00:11:37,070 --> 00:11:47,750
calls itself until certain liver and

00:11:39,590 --> 00:11:51,850
then whines back and well if you run

00:11:47,750 --> 00:11:57,770
that when you see the function Prince

00:11:51,850 --> 00:12:03,820
129 then some word and then it goes back

00:11:57,770 --> 00:12:06,650
comes out of its recur and the

00:12:03,820 --> 00:12:10,640
interesting thing is when we restart

00:12:06,650 --> 00:12:14,840
that program later on then we can see it

00:12:10,640 --> 00:12:18,440
continues exactly at the point where the

00:12:14,840 --> 00:12:56,710
program state was saved and continues to

00:12:18,440 --> 00:12:56,710
run that part of the execution yeah okay

00:12:57,730 --> 00:13:07,330
okay messick yeah okay then this is the

00:13:08,440 --> 00:13:13,670
we have that as a running demo as well I

00:13:11,360 --> 00:13:29,840
think we should show through it right

00:13:13,670 --> 00:13:33,860
now or later now okay so I have well do

00:13:29,840 --> 00:13:41,450
I need to make this bigger this is

00:13:33,860 --> 00:13:47,810
visibly yes okay I run the program this

00:13:41,450 --> 00:13:50,090
little cause of run and it's a little

00:13:47,810 --> 00:13:57,260
bit enhance the example I worked on that

00:13:50,090 --> 00:14:00,440
yesterday the recursive function goes to

00:13:57,260 --> 00:14:05,270
a certain point comes back and then it

00:14:00,440 --> 00:14:11,020
says well I was recorded aandavan so it

00:14:05,270 --> 00:14:16,160
was recorded on this platform I can now

00:14:11,020 --> 00:14:18,650
run it it has written its output as a

00:14:16,160 --> 00:14:22,040
pickle int into a task litter picker and

00:14:18,650 --> 00:14:25,610
I can run the program again and give it

00:14:22,040 --> 00:14:30,650
the picker as an argument and you can

00:14:25,610 --> 00:14:33,380
see ya at the point where at the high

00:14:30,650 --> 00:14:36,810
that was the the program state was

00:14:33,380 --> 00:14:41,060
written to the pickle and

00:14:36,810 --> 00:14:46,430
here where we reach that the picker it

00:14:41,060 --> 00:14:49,860
was it came out of the recursion so the

00:14:46,430 --> 00:14:54,080
stack with all the records of course was

00:14:49,860 --> 00:14:58,279
figured and was now revived and

00:14:54,080 --> 00:15:09,330
continued to run and we can do even more

00:14:58,279 --> 00:15:11,070
because funny so i will now it's

00:15:09,330 --> 00:15:20,870
dangerous because i'm now starting

00:15:11,070 --> 00:15:20,870
windows and i have prepared a windows

00:15:21,350 --> 00:15:34,800
share received works okay yeah we are

00:15:29,700 --> 00:15:37,620
now in the same on the same virtual

00:15:34,800 --> 00:15:44,370
drive in the virtual parallels windows

00:15:37,620 --> 00:15:51,900
machine and we have the same program

00:15:44,370 --> 00:15:58,040
here and i can run that okay so i

00:15:51,900 --> 00:16:01,680
started the same program on windows it

00:15:58,040 --> 00:16:04,560
returned from the curtain and tells us i

00:16:01,680 --> 00:16:09,560
was recorded on Darvin but continued on

00:16:04,560 --> 00:16:12,240
win32 and it's actually really the same

00:16:09,560 --> 00:16:15,930
task a picker we recorded here look at

00:16:12,240 --> 00:16:20,310
the timestamp just four minutes from

00:16:15,930 --> 00:16:24,740
knowledge and actually we are using this

00:16:20,310 --> 00:16:28,830
technique in production at large but

00:16:24,740 --> 00:16:32,640
important german auto manufacturer how

00:16:28,830 --> 00:16:36,089
to make us to control I performance

00:16:32,640 --> 00:16:38,279
computing jobs where you start on so the

00:16:36,089 --> 00:16:42,230
Scopes engineer once it does on the

00:16:38,279 --> 00:16:45,890
desktop of an engineer on windows

00:16:42,230 --> 00:16:52,730
son mover program to an htpc cluster

00:16:45,890 --> 00:16:54,830
running linux so that's working well ok

00:16:52,730 --> 00:16:57,710
so i will do the same thing the other

00:16:54,830 --> 00:17:04,310
way around and then close the windows

00:16:57,710 --> 00:17:07,690
shell because ok so i did the same thing

00:17:04,310 --> 00:17:21,380
here no I'm stopping the powerless

00:17:07,690 --> 00:17:23,030
desktop and run the same thing on the

00:17:21,380 --> 00:17:29,120
other side and let's see what it tells

00:17:23,030 --> 00:17:31,940
us now yeah I was recorded on win32 but

00:17:29,120 --> 00:17:35,780
continued on the oven so just so

00:17:31,940 --> 00:17:41,270
everybody believes that we moved a

00:17:35,780 --> 00:17:46,360
running program from mac OS x 64 bit to

00:17:41,270 --> 00:17:46,360
windows 32-bit and it still works

00:17:55,580 --> 00:18:09,410
okay what's up just some of you think

00:18:06,210 --> 00:18:13,320
about what you taught already told us

00:18:09,410 --> 00:18:17,970
green that wasn't a class yep okay lopsy

00:18:13,320 --> 00:18:27,360
skips us what slide yeah I think I said

00:18:17,970 --> 00:18:31,640
it all right okay so the reason why

00:18:27,360 --> 00:18:31,640
stateless really makes a difference is 0

00:18:31,670 --> 00:18:41,940
is still a bug we have the persistence

00:18:38,160 --> 00:18:47,490
we can use persistent cloud computing

00:18:41,940 --> 00:18:49,140
move running programs around use a

00:18:47,490 --> 00:18:51,540
different computer use a different

00:18:49,140 --> 00:18:53,340
operating system do it in a cloud the

00:18:51,540 --> 00:19:00,330
cloud is the only thing that I didn't

00:18:53,340 --> 00:19:07,070
show right now we can save snapshots you

00:19:00,330 --> 00:19:07,070
can also use multiple snapshots on and

00:19:07,400 --> 00:19:17,570
whatever you want so actually you can do

00:19:15,210 --> 00:19:21,059
with reckless everything you can do with

00:19:17,570 --> 00:19:24,360
regular Python it's fully compatible to

00:19:21,059 --> 00:19:26,610
regular C Python and it's much it's even

00:19:24,360 --> 00:19:33,779
much more fully compatible now as it was

00:19:26,610 --> 00:19:37,950
before yes indeed

00:19:33,779 --> 00:19:41,070
we fix some corner cases where extension

00:19:37,950 --> 00:19:42,929
modules that didn't adhere to the coding

00:19:41,070 --> 00:19:44,519
standards for pies extension modules

00:19:42,929 --> 00:19:47,190
didn't work on the stack lesson

00:19:44,519 --> 00:19:49,679
unfortunately it's are quite a few and

00:19:47,190 --> 00:19:53,039
important extension modules of this kind

00:19:49,679 --> 00:19:56,149
for instance I site hi site is a very

00:19:53,039 --> 00:19:59,729
important thing i'm working with pi site

00:19:56,149 --> 00:20:04,099
since two thousand thousand eleven and i

00:19:59,729 --> 00:20:04,099
could not use text Python it was crazy

00:20:04,999 --> 00:20:12,779
in spring this year this problem has

00:20:08,969 --> 00:20:18,299
been solved now is it runs really well

00:20:12,779 --> 00:20:27,989
with yeah right i actually actually I

00:20:18,299 --> 00:20:33,509
have another thing to show what you see

00:20:27,989 --> 00:20:36,599
here is a little puzzle game and this

00:20:33,509 --> 00:20:40,080
puzzle game is that visible yes this

00:20:36,599 --> 00:20:46,169
possible puzzle game is written in is a

00:20:40,080 --> 00:20:49,739
demo from high side and this runs on top

00:20:46,169 --> 00:21:01,249
of cyclist Python so the old problem has

00:20:49,739 --> 00:21:05,960
been solved we can well and so on

00:21:01,249 --> 00:21:05,960
another little demo is for instance

00:21:19,810 --> 00:21:32,230
okay so we have a little pint a demo I

00:21:25,330 --> 00:21:36,400
painted a demo some different colors

00:21:32,230 --> 00:21:42,790
which are painted with different styles

00:21:36,400 --> 00:21:46,630
and certain rotations so all great

00:21:42,790 --> 00:21:50,950
things it's actually stuff for for an

00:21:46,630 --> 00:21:53,200
extra cute hi cutie or pass I talk I was

00:21:50,950 --> 00:21:56,470
just so happy that this now really works

00:21:53,200 --> 00:22:06,720
with Tecna so I had to show that last

00:21:56,470 --> 00:22:12,880
thing nice embedded dialogues you go

00:22:06,720 --> 00:22:16,960
this is a projection of dialogue into an

00:22:12,880 --> 00:22:21,190
opengl perspective and so it's very

00:22:16,960 --> 00:22:26,710
sophisticated use stuff here and you can

00:22:21,190 --> 00:22:34,030
have that all in instead to spy on our

00:22:26,710 --> 00:22:40,630
so yes yep i think that was about what i

00:22:34,030 --> 00:22:45,730
wanted to show and say and I might pass

00:22:40,630 --> 00:22:49,720
over to you know okay so that's awesome

00:22:45,730 --> 00:22:53,620
a few things yet suckers can used for a

00:22:49,720 --> 00:22:57,580
Christian to mention yet so you can use

00:22:53,620 --> 00:22:59,200
a bird as a primitive function status

00:22:57,580 --> 00:23:02,380
provides especially the task isn't

00:22:59,200 --> 00:23:07,000
channels to build a control structures

00:23:02,380 --> 00:23:10,590
for higher level scheduling paradigmatic

00:23:07,000 --> 00:23:15,880
air we can implement for instance

00:23:10,590 --> 00:23:19,510
c-sharp style I think programming or can

00:23:15,880 --> 00:23:22,090
implement to go less saying sir

00:23:19,510 --> 00:23:24,060
Christian could tell something about it

00:23:22,090 --> 00:23:27,299
i'm not so in this business I'm ions are

00:23:24,060 --> 00:23:32,820
pickling and my question of

00:23:27,299 --> 00:23:34,529
programs so now we have seen what's day

00:23:32,820 --> 00:23:38,070
classes and we have to talk about the

00:23:34,529 --> 00:23:41,789
stakus project to the stack this project

00:23:38,070 --> 00:23:45,720
while who is a dazzle so we are some of

00:23:41,789 --> 00:23:48,029
course the maintenance and but also all

00:23:45,720 --> 00:23:52,739
stateless users so who's using Cydia

00:23:48,029 --> 00:23:56,970
class and where there are a few

00:23:52,739 --> 00:23:59,639
well-known users as a negara i hope i

00:23:56,970 --> 00:24:04,100
pronounced is correct web framework is

00:23:59,639 --> 00:24:08,700
based on steglitz then CCP games the

00:24:04,100 --> 00:24:11,909
company behind say if online would you

00:24:08,700 --> 00:24:16,499
use a online game you probably know I

00:24:11,909 --> 00:24:19,710
DSS's some spacecraft flying around and

00:24:16,499 --> 00:24:23,549
so very cool graphics and I can show it

00:24:19,710 --> 00:24:26,759
here i have it on a vision but well

00:24:23,549 --> 00:24:29,820
actually so i used a class since many

00:24:26,759 --> 00:24:33,299
years and both large part of the

00:24:29,820 --> 00:24:37,919
infrastructure and stack let's send a

00:24:33,299 --> 00:24:40,049
few less known users customers of the

00:24:37,919 --> 00:24:43,830
company I work for science and computing

00:24:40,049 --> 00:24:48,509
using stateless persons on a few

00:24:43,830 --> 00:24:53,039
thousand systems systems all together

00:24:48,509 --> 00:24:58,889
have over 100,000 course so that's quite

00:24:53,039 --> 00:25:03,230
a bit and one sends our also unknown

00:24:58,889 --> 00:25:07,019
users or so I recently looked at the

00:25:03,230 --> 00:25:10,350
access log files of we thought up status

00:25:07,019 --> 00:25:13,889
calm and I was very surprised to find

00:25:10,350 --> 00:25:17,460
that we have about 220 downloads of the

00:25:13,889 --> 00:25:22,200
windows installer each day and 85

00:25:17,460 --> 00:25:25,190
downloads of sauce archive so I don't

00:25:22,200 --> 00:25:29,820
know who is downloading it but obviously

00:25:25,190 --> 00:25:32,100
someone does it and we also seized at

00:25:29,820 --> 00:25:34,309
ninety-eight percent of the windows

00:25:32,100 --> 00:25:36,120
installer downloads are four pies in

00:25:34,309 --> 00:25:39,450
00:25:36,120 --> 00:25:44,790
of scissors archives on section 96,000

00:25:39,450 --> 00:25:49,160
for poison too so it looks like some

00:25:44,790 --> 00:25:55,110
production usage of license so he is

00:25:49,160 --> 00:25:58,230
quite low so Christine already talked

00:25:55,110 --> 00:26:00,720
about the history and status was

00:25:58,230 --> 00:26:04,970
formerly known as Tekken spicen I will

00:26:00,720 --> 00:26:07,860
probably say something about it and it's

00:26:04,970 --> 00:26:09,840
invented by christiana and I think the

00:26:07,860 --> 00:26:14,880
first version was wonder try this is

00:26:09,840 --> 00:26:18,900
correct yes the first was 91 not five

00:26:14,880 --> 00:26:22,980
and it was continuation based and much

00:26:18,900 --> 00:26:26,880
more complicated explain so the history

00:26:22,980 --> 00:26:29,520
is the same Christian knows best but

00:26:26,880 --> 00:26:32,130
this talk is not about ancient times and

00:26:29,520 --> 00:26:36,270
so history of thickness bison but about

00:26:32,130 --> 00:26:38,010
the recent changes some more information

00:26:36,270 --> 00:26:41,150
about the stack this project who is

00:26:38,010 --> 00:26:45,120
working on edge well we are just a few

00:26:41,150 --> 00:26:49,440
volunteers Christian and on Kirsten

00:26:45,120 --> 00:26:52,050
valid ronson Richard cubed what's up on

00:26:49,440 --> 00:26:56,750
see a future with you yet you do with

00:26:52,050 --> 00:26:59,550
Alec and myself and all in all we have

00:26:56,750 --> 00:27:03,830
mian it's less than one full-time

00:26:59,550 --> 00:27:08,070
equivalent yeah so we can't do very much

00:27:03,830 --> 00:27:15,300
we have a few resources such as

00:27:08,070 --> 00:27:18,020
detectives website stay close to calm so

00:27:15,300 --> 00:27:22,110
you can get stay close poison and such a

00:27:18,020 --> 00:27:24,180
primary advice for this project then we

00:27:22,110 --> 00:27:27,540
have the documentation it's now hosted

00:27:24,180 --> 00:27:31,560
on Rita docks and thats very fortunate

00:27:27,540 --> 00:27:33,420
cause we can host as a documentation for

00:27:31,560 --> 00:27:39,150
every version of stack Lascelles that's

00:27:33,420 --> 00:27:40,880
really good thing and Spencer short time

00:27:39,150 --> 00:27:43,890
we have

00:27:40,880 --> 00:27:47,809
move development and well meant to be

00:27:43,890 --> 00:27:52,799
bucket and we have the project's Douglas

00:27:47,809 --> 00:27:56,039
defs necklace and also I have a project

00:27:52,799 --> 00:27:58,470
files or stack listen as a installer

00:27:56,039 --> 00:28:04,950
that can be used with the installer

00:27:58,470 --> 00:28:07,260
paper and I have to say we have really

00:28:04,950 --> 00:28:11,010
really happy such as a wonderful

00:28:07,260 --> 00:28:13,140
infrastructure provided by by bitbucket

00:28:11,010 --> 00:28:14,490
and reach the docks without this

00:28:13,140 --> 00:28:20,460
infrastructure it wouldn't be possible

00:28:14,490 --> 00:28:22,110
to maintain such a project so how can

00:28:20,460 --> 00:28:25,940
you use that as well you have to install

00:28:22,110 --> 00:28:29,250
it obviously yes answer a few options

00:28:25,940 --> 00:28:31,130
the simplest and most common wise

00:28:29,250 --> 00:28:35,100
probably too gets installer from

00:28:31,130 --> 00:28:40,980
stackers calm and installers a while for

00:28:35,100 --> 00:28:45,090
windows and for macintosh OS X so just

00:28:40,980 --> 00:28:48,240
download it and install it usually MSR

00:28:45,090 --> 00:28:50,850
hits dollar I don't know the formatted

00:28:48,240 --> 00:28:54,240
my keys yes and that's something really

00:28:50,850 --> 00:28:57,299
great because the installer for OS I

00:28:54,240 --> 00:28:59,850
used that the first time now it just

00:28:57,299 --> 00:29:03,059
replaced my standard supplies and from

00:28:59,850 --> 00:29:05,909
patented org it continued to run with

00:29:03,059 --> 00:29:08,909
all installed extensions because it

00:29:05,909 --> 00:29:11,880
simply swapped out the interpreter so I

00:29:08,909 --> 00:29:14,250
was very pleased with that it's a great

00:29:11,880 --> 00:29:16,110
experience it now to having soulless I

00:29:14,250 --> 00:29:19,380
never used installers but but now I'm

00:29:16,110 --> 00:29:23,760
very keen on that sorry yes that's a

00:29:19,380 --> 00:29:27,510
fine and then we have for the Linux

00:29:23,760 --> 00:29:29,850
people and also for windows if you're on

00:29:27,510 --> 00:29:35,149
Windows and using virtual and for

00:29:29,850 --> 00:29:39,510
instance quite way to install stateless

00:29:35,149 --> 00:29:43,919
we made an install an umbrella install

00:29:39,510 --> 00:29:47,159
as that that's a stateless person here

00:29:43,919 --> 00:29:50,370
and if you install this umbrella

00:29:47,159 --> 00:29:52,900
installer with people or easy install it

00:29:50,370 --> 00:29:58,990
detects your system sign in your second

00:29:52,900 --> 00:30:04,600
h downloads and precompiled package that

00:29:58,990 --> 00:30:09,750
only almost only contains a poison

00:30:04,600 --> 00:30:12,850
library and executable and three or four

00:30:09,750 --> 00:30:16,020
library modules and install them in a

00:30:12,850 --> 00:30:18,370
way that doesn't read your existing

00:30:16,020 --> 00:30:22,600
price and installation you get a new

00:30:18,370 --> 00:30:27,090
command as el pais instacollage poison

00:30:22,600 --> 00:30:29,890
and well it's working cause status is

00:30:27,090 --> 00:30:35,140
almost see pizen so we have no problem

00:30:29,890 --> 00:30:37,360
to implant is this new command into an

00:30:35,140 --> 00:30:40,990
existing installation of course in line

00:30:37,360 --> 00:30:44,800
ups if you do this for the system pizen

00:30:40,990 --> 00:30:51,310
you need appropriate exercise probably

00:30:44,800 --> 00:30:53,260
you have to be old and finally you can

00:30:51,310 --> 00:30:57,100
get the source code and compile it just

00:30:53,260 --> 00:30:59,680
with as i can do it for as a regular C

00:30:57,100 --> 00:31:03,130
poison and if you need something like

00:30:59,680 --> 00:31:08,950
and debug build or special installation

00:31:03,130 --> 00:31:12,100
options and such a way to go so if

00:31:08,950 --> 00:31:15,340
something doesn't work that's all fine

00:31:12,100 --> 00:31:19,870
and Cirie but the practices sometimes

00:31:15,340 --> 00:31:22,900
different well first statelessness major

00:31:19,870 --> 00:31:27,580
yes for the biggest part it's just see

00:31:22,900 --> 00:31:31,930
pricing armed to the darkness bow really

00:31:27,580 --> 00:31:36,280
solid and it has many users so usually

00:31:31,930 --> 00:31:38,290
sings mark stickers Sweden Swiss also

00:31:36,280 --> 00:31:41,440
good that's currently the only

00:31:38,290 --> 00:31:44,350
maintained version of poisons via we

00:31:41,440 --> 00:31:50,370
don't maintain as heated to our without

00:31:44,350 --> 00:31:54,730
release what Vito to anymore because so

00:31:50,370 --> 00:31:58,930
may I add that right now we have sector

00:31:54,730 --> 00:32:00,630
pies in 22 and 78 which is very complete

00:31:58,930 --> 00:32:05,750
and working

00:32:00,630 --> 00:32:09,780
we failed to finish the Python stateless

00:32:05,750 --> 00:32:13,110
three dot for work and we want to do

00:32:09,780 --> 00:32:16,200
that on the sprint in the next few days

00:32:13,110 --> 00:32:19,620
maybe it works so it's actually my

00:32:16,200 --> 00:32:23,370
intent is to support pattern 3 as much

00:32:19,620 --> 00:32:27,120
as possible but it's quite some hacking

00:32:23,370 --> 00:32:30,170
and fixing so yes a few bucks in the era

00:32:27,120 --> 00:32:35,060
of pickling cause that's where we have

00:32:30,170 --> 00:32:38,910
steak o specific extensions and also

00:32:35,060 --> 00:32:42,750
price in Sweden forgot and extra a new

00:32:38,910 --> 00:32:45,720
version of the patron protocol but we

00:32:42,750 --> 00:32:48,150
invited to participate in these valves

00:32:45,720 --> 00:32:52,200
of the specter so if something still

00:32:48,150 --> 00:32:55,740
doesn't work we have the mailing list

00:32:52,200 --> 00:33:00,240
and we you can always open issue on our

00:32:55,740 --> 00:33:03,770
big market side and sometimes you might

00:33:00,240 --> 00:33:11,340
need commercial support and well

00:33:03,770 --> 00:33:16,920
unfortunately says that's a bit of topic

00:33:11,340 --> 00:33:19,950
you can ask Christian he is probably for

00:33:16,920 --> 00:33:23,570
help you can and you could negotiate an

00:33:19,950 --> 00:33:26,400
agreement with science and computing but

00:33:23,570 --> 00:33:29,030
we are more focused on bigger companies

00:33:26,400 --> 00:33:33,530
so the agreement might be too expensive

00:33:29,030 --> 00:33:39,570
but we can provide structural support

00:33:33,530 --> 00:33:43,350
around the world 24 hours a day 7 days a

00:33:39,570 --> 00:33:47,250
week if it is necessary and I think you

00:33:43,350 --> 00:33:48,909
had you had something you wanted to show

00:33:47,250 --> 00:33:51,639
interactively and we're

00:33:48,909 --> 00:33:56,200
out of time zone okay fine yes good I

00:33:51,639 --> 00:33:58,749
just go to the recent appointment we

00:33:56,200 --> 00:34:01,840
switch I thought I told it reboots

00:33:58,749 --> 00:34:04,960
tagless a bit low level task methods are

00:34:01,840 --> 00:34:06,879
no much more complete importance a

00:34:04,960 --> 00:34:09,940
custom and Inter stretch scheduling is

00:34:06,879 --> 00:34:12,190
working more stable we about to have a

00:34:09,940 --> 00:34:14,530
better compatibility with C poison and

00:34:12,190 --> 00:34:18,280
the documentation has been updated and

00:34:14,530 --> 00:34:20,109
we got a better debug a support recently

00:34:18,280 --> 00:34:22,990
that's very important and view other bug

00:34:20,109 --> 00:34:26,919
fixes and we also did something that

00:34:22,990 --> 00:34:28,750
didn't work out the documentation it's

00:34:26,919 --> 00:34:32,980
no one with the dachshund that's the

00:34:28,750 --> 00:34:35,349
most important point and it is serve

00:34:32,980 --> 00:34:38,260
actual supervising documentation and a

00:34:35,349 --> 00:34:41,859
sector specific addendum and additional

00:34:38,260 --> 00:34:45,490
chapter and this chapter is no also

00:34:41,859 --> 00:34:51,909
complete and correct it wasn't sometimes

00:34:45,490 --> 00:34:53,889
ago and we also adhere to the Bison

00:34:51,909 --> 00:34:56,139
Software Foundation trade mag uses

00:34:53,889 --> 00:34:57,940
policy for the trademark pricing and

00:34:56,139 --> 00:35:03,760
that's also the reason we changed the

00:34:57,940 --> 00:35:10,839
name cuz as a PS emphasize you should

00:35:03,760 --> 00:35:12,760
not use the name pison alone so the

00:35:10,839 --> 00:35:16,500
source code also contains a

00:35:12,760 --> 00:35:23,220
well-maintained change look for now and

00:35:16,500 --> 00:35:23,220
wiki pages still need some love I

00:35:23,760 --> 00:35:29,920
probably ever go over the technical

00:35:27,039 --> 00:35:32,470
details very quick we have a more

00:35:29,920 --> 00:35:34,270
complete set of low-level methods and

00:35:32,470 --> 00:35:36,130
you can find that an insult

00:35:34,270 --> 00:35:40,210
documentation is usually not so

00:35:36,130 --> 00:35:43,059
interesting but we have here image and

00:35:40,210 --> 00:35:46,359
it shows you that we have added a few

00:35:43,059 --> 00:35:49,630
such as they chart of the of a task that

00:35:46,359 --> 00:35:52,630
yes and the task it is great it is not

00:35:49,630 --> 00:35:55,329
alive and then it's alive and scheduled

00:35:52,630 --> 00:35:57,870
eventually and you see we have added a

00:35:55,329 --> 00:36:00,390
few wet arrows

00:35:57,870 --> 00:36:06,740
that random white liberal previously so

00:36:00,390 --> 00:36:09,720
you know much more flexible we have fun

00:36:06,740 --> 00:36:12,540
enhanced functionality in the schedulers

00:36:09,720 --> 00:36:16,230
it's not long necessary to run the

00:36:12,540 --> 00:36:19,590
scheduler from the main task yet you can

00:36:16,230 --> 00:36:21,410
run it from every other task but or from

00:36:19,590 --> 00:36:24,540
within a library or something like that

00:36:21,410 --> 00:36:27,440
Kirsten well your Johnson implemented it

00:36:24,540 --> 00:36:31,230
and it was very excited about it but

00:36:27,440 --> 00:36:32,670
it's fairly new and they are no I don't

00:36:31,230 --> 00:36:36,600
know any application of this new

00:36:32,670 --> 00:36:38,850
functional idiom custom scheduling is no

00:36:36,600 --> 00:36:41,610
possible using the new method tested

00:36:38,850 --> 00:36:45,150
switch it simply transversely control

00:36:41,610 --> 00:36:47,550
form the color to the argument of the

00:36:45,150 --> 00:36:49,710
toasted switch function and that's

00:36:47,550 --> 00:36:52,080
independent from the scheduler on it's

00:36:49,710 --> 00:36:58,890
an atomic operation so you can build

00:36:52,080 --> 00:37:02,270
your own scheduling based on there are

00:36:58,890 --> 00:37:04,650
known applications for instance we have

00:37:02,270 --> 00:37:08,070
inspectors lips at Sun library a

00:37:04,650 --> 00:37:14,190
collection of functions you could use

00:37:08,070 --> 00:37:16,200
for your programs stackers yonder it's

00:37:14,190 --> 00:37:17,880
not really necessary to use it now but

00:37:16,200 --> 00:37:19,950
there's a module called I think and it

00:37:17,880 --> 00:37:22,830
is C sharp start adding homes

00:37:19,950 --> 00:37:28,610
programming and it also provides some

00:37:22,830 --> 00:37:32,010
futures as pison futures were based on

00:37:28,610 --> 00:37:34,530
targets can you quickly show your

00:37:32,010 --> 00:37:40,140
interactive and their sense because I'm

00:37:34,530 --> 00:37:42,120
wrong here okay so let's move on what

00:37:40,140 --> 00:37:46,230
interswitch scheduling it's probably not

00:37:42,120 --> 00:37:50,700
so interesting subclassing also we have

00:37:46,230 --> 00:37:52,910
bug fixes already Christian showed use a

00:37:50,700 --> 00:37:57,170
PI site working

00:37:52,910 --> 00:38:00,070
and we have better debugger support now

00:37:57,170 --> 00:38:04,070
because we added some hooks for

00:38:00,070 --> 00:38:06,920
debuggers and we got two new iggy is

00:38:04,070 --> 00:38:10,010
rocking the winger debugger is supports

00:38:06,920 --> 00:38:14,990
take lessons every since ever but now

00:38:10,010 --> 00:38:19,940
pydev and multiply charm is started

00:38:14,990 --> 00:38:24,530
supporting let's take this and why yeah

00:38:19,940 --> 00:38:27,710
yes yes yes yeah here we are so i will

00:38:24,530 --> 00:38:30,370
show the pydev debugger and we have a

00:38:27,710 --> 00:38:32,810
very very simple program at some

00:38:30,370 --> 00:38:35,390
demonstration program from the Statler

00:38:32,810 --> 00:38:41,240
sauce and it shows you how to implement

00:38:35,390 --> 00:38:44,780
a move text using channels and task gets

00:38:41,240 --> 00:38:54,410
that's really not important if you want

00:38:44,780 --> 00:38:57,530
this program simply run it yes it's add

00:38:54,410 --> 00:39:02,360
some output yes we have here is renamed

00:38:57,530 --> 00:39:05,420
task yet and say the target function is

00:39:02,360 --> 00:39:09,920
this function f and while it requires a

00:39:05,420 --> 00:39:12,110
lot as a moot x and then it schedules it

00:39:09,920 --> 00:39:14,510
passes the control to back to the

00:39:12,110 --> 00:39:19,790
scheduler and I literally sisimiut X

00:39:14,510 --> 00:39:23,120
again and if you wanted UZR voila so

00:39:19,790 --> 00:39:25,700
expected output yeah so on interleaved

00:39:23,120 --> 00:39:30,170
into each other so let's debug it I

00:39:25,700 --> 00:39:34,640
already set a breakpoint here and we

00:39:30,170 --> 00:39:38,300
keep our get as a poison one part of

00:39:34,640 --> 00:39:43,670
switches to the poison debug perspective

00:39:38,300 --> 00:39:45,590
and we are here so we step over that's

00:39:43,670 --> 00:39:48,500
equation of the task let's keep the

00:39:45,590 --> 00:39:52,820
debugger sets false yes so now let's

00:39:48,500 --> 00:39:55,520
step into and here you see the actresses

00:39:52,820 --> 00:39:58,960
sweat so Ryan's Texans are known to the

00:39:55,520 --> 00:40:01,880
debugger now I switch here and we see

00:39:58,960 --> 00:40:04,910
how we got

00:40:01,880 --> 00:40:07,400
still the main threat is now f but we

00:40:04,910 --> 00:40:10,460
gotta post main task that of Maine sweat

00:40:07,400 --> 00:40:12,980
and if you look yes that's us so on that

00:40:10,460 --> 00:40:17,480
was a main task so now it's a different

00:40:12,980 --> 00:40:20,450
task good warning so let's stop this

00:40:17,480 --> 00:40:22,730
warm we will get the lock that that's

00:40:20,450 --> 00:40:30,200
not surprisingly cousin we are the first

00:40:22,730 --> 00:40:33,440
class yet so hey we're back here but now

00:40:30,200 --> 00:40:36,200
if we look house there's another task it

00:40:33,440 --> 00:40:38,000
so we have no sweet and you see that's a

00:40:36,200 --> 00:40:40,330
scheduled task that takes it was the

00:40:38,000 --> 00:40:43,300
target we have seen previously and it's

00:40:40,330 --> 00:40:52,610
sitting here and the schedule and

00:40:43,300 --> 00:41:01,010
waiting to be reactivated and again but

00:40:52,610 --> 00:41:03,320
now if we look go into lock here with we

00:41:01,010 --> 00:41:06,800
will see here it blocks yes and now we

00:41:03,320 --> 00:41:10,160
have the salt on slit so you see the

00:41:06,800 --> 00:41:12,770
debugger perfectly supports so switching

00:41:10,160 --> 00:41:15,980
between the task gets in the switching

00:41:12,770 --> 00:41:17,840
between the context of the execution and

00:41:15,980 --> 00:41:19,700
that's important work without this

00:41:17,840 --> 00:41:25,550
support you wouldn't be able to debug

00:41:19,700 --> 00:41:31,820
this were reasonably so I just continued

00:41:25,550 --> 00:41:41,990
it and done with it now and I think we

00:41:31,820 --> 00:41:44,360
have very few things still to say future

00:41:41,990 --> 00:41:46,100
goals in the unique in futures we would

00:41:44,360 --> 00:41:48,680
like to find additional volunteers to

00:41:46,100 --> 00:41:54,230
help on sales science tech us a suite at

00:41:48,680 --> 00:41:56,420
fort at one and we also would like to

00:41:54,230 --> 00:42:00,340
install the pip installer to cover more

00:41:56,420 --> 00:42:03,940
options especially person so we and

00:42:00,340 --> 00:42:08,420
later yes we will always still need

00:42:03,940 --> 00:42:09,730
additional authorities and I also would

00:42:08,420 --> 00:42:10,920
like to update the status

00:42:09,730 --> 00:42:14,040
implementations

00:42:10,920 --> 00:42:17,880
contained and pie pie because it's also

00:42:14,040 --> 00:42:20,700
something we could try on on a sprint to

00:42:17,880 --> 00:42:24,900
work on yeah like that's a few changes

00:42:20,700 --> 00:42:27,089
and it's quite a mixture of stateless

00:42:24,900 --> 00:42:32,640
programming with the pipe I guys may be

00:42:27,089 --> 00:42:34,770
interesting and well said some sing we

00:42:32,640 --> 00:42:37,589
also have done that was a thing that

00:42:34,770 --> 00:42:40,349
didn't work out we had problems with

00:42:37,589 --> 00:42:46,910
visual studio installed a compiler

00:42:40,349 --> 00:42:51,839
basalt which the studio to tau 2008 and

00:42:46,910 --> 00:42:55,950
so you made them patch to build price

00:42:51,839 --> 00:43:00,420
until seven person refers to do 2010 and

00:42:55,950 --> 00:43:02,400
if you don't change the name of

00:43:00,420 --> 00:43:06,690
surprised indian ads and you can get

00:43:02,400 --> 00:43:09,869
serious problems because if the gill

00:43:06,690 --> 00:43:12,030
elbows by compilers different compiler

00:43:09,869 --> 00:43:14,130
uses different life as you want i'm

00:43:12,030 --> 00:43:19,890
library interests can cause all sort of

00:43:14,130 --> 00:43:23,670
problems in the end we currently can't

00:43:19,890 --> 00:43:26,970
publish it cuz we have no resources it's

00:43:23,670 --> 00:43:32,880
also possible violation of Sir twedmark

00:43:26,970 --> 00:43:35,549
poison and so it's sterling odds are in

00:43:32,880 --> 00:43:40,490
our repository but it's well that's the

00:43:35,549 --> 00:43:45,180
question do we want to support the

00:43:40,490 --> 00:43:47,760
non-existent Python 2 dot eight in the

00:43:45,180 --> 00:43:49,980
form of a stateless to that eight which

00:43:47,760 --> 00:43:53,670
grabs all the things that are missing

00:43:49,980 --> 00:43:56,670
from C Python or do we not want to do

00:43:53,670 --> 00:43:58,890
that and I know a couple of people who

00:43:56,670 --> 00:44:01,619
think that's a great idea and other

00:43:58,890 --> 00:44:04,530
people are there who think it's a very

00:44:01,619 --> 00:44:07,349
bad idea so we are really undecided and

00:44:04,530 --> 00:44:10,109
wanted to leave that to hear your

00:44:07,349 --> 00:44:15,869
opinions about should we do something

00:44:10,109 --> 00:44:19,680
about that yes okay and so surely we

00:44:15,869 --> 00:44:21,970
can't do it without participation yes

00:44:19,680 --> 00:44:25,090
probably it will doesn't need some

00:44:21,970 --> 00:44:27,720
founding us so that's all and any

00:44:25,090 --> 00:44:27,720
questions

00:44:33,920 --> 00:44:35,980

YouTube URL: https://www.youtube.com/watch?v=upnGzL4E49I


