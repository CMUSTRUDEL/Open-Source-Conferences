Title: The Continuum Platform: Advanced Analytics and Web-based Interactive Visualization for Enterprises
Publication date: 2015-04-18
Playlist: EuroPython 2014
Description: 
	Travis Oliphant - The Continuum Platform: Advanced Analytics and Web-based Interactive Visualization for Enterprises
[EuroPython 2014]
[24 July 2014]

The people at Continuum have been involved in the Python community for decades. As a company our mission is to empower domain experts inside enterprises with the best tools for producing software solutions that deal with large and quickly-changing data. The Continuum Platform brings the world of open source together into one complete, easy-to-manage analytics and visualization platform. In this talk, Dr. Oliphant will review the open source libraries that Continuum is building and contributing to the community as part of this effort, including Numba, Bokeh, Blaze, conda, llvmpy, PyParallel, and DyND, as well as describe the freely available components of the Continuum Platform that anyone can benefit from today: Anaconda, wakari.io, and binstar.org.
Captions: 
	00:00:15,939 --> 00:00:19,759
continuum platform it's it's a sponsored

00:00:18,410 --> 00:00:22,789
talk so hopefully I won't sound to

00:00:19,759 --> 00:00:24,110
sponsor dish my intent is actually just

00:00:22,789 --> 00:00:25,789
to talk about some of the technologies

00:00:24,110 --> 00:00:27,230
were working on that are open source

00:00:25,789 --> 00:00:28,759
I'll give you a little brief insight

00:00:27,230 --> 00:00:29,750
into what we do is a company but most

00:00:28,759 --> 00:00:32,239
I'm going to talk about the open source

00:00:29,750 --> 00:00:34,239
tools were doing that really drive from

00:00:32,239 --> 00:00:37,399
my experiences numpy inside by

00:00:34,239 --> 00:00:39,559
communities we are basically a team of

00:00:37,399 --> 00:00:40,850
scientists engineers and data scientists

00:00:39,559 --> 00:00:43,430
trying to build tools for others

00:00:40,850 --> 00:00:46,070
scientists engineers data scientists we

00:00:43,430 --> 00:00:47,989
feel like in the wider ecosystem of

00:00:46,070 --> 00:00:50,300
computer science and computer technology

00:00:47,989 --> 00:00:52,339
that category of people that domain

00:00:50,300 --> 00:00:53,899
experts the scientists the domain

00:00:52,339 --> 00:00:56,089
scientists tend to get left behind as

00:00:53,899 --> 00:00:58,100
people focus on developer tools only so

00:00:56,089 --> 00:01:00,140
we tend to be developers that focus on

00:00:58,100 --> 00:01:02,479
the scientist Civic tools and there's a

00:01:00,140 --> 00:01:03,769
lot of need for this in the real essence

00:01:02,479 --> 00:01:05,300
of the big data movement is really

00:01:03,769 --> 00:01:07,479
getting insight from those data and

00:01:05,300 --> 00:01:10,790
those at inside crepe requires models

00:01:07,479 --> 00:01:13,030
scientific models typically I'm Travis

00:01:10,790 --> 00:01:15,799
elephant my background is in numpy syfy

00:01:13,030 --> 00:01:17,330
I'm actually on the psf I'm a psf

00:01:15,799 --> 00:01:19,100
director currently as of jun i started

00:01:17,330 --> 00:01:21,950
an unfocused foundation we'll talk a

00:01:19,100 --> 00:01:22,910
little about that beyond I've been a

00:01:21,950 --> 00:01:25,160
professor of you why you've been a

00:01:22,910 --> 00:01:27,440
scientist myself my roots are as a

00:01:25,160 --> 00:01:29,300
scientist but I we created a company

00:01:27,440 --> 00:01:31,220
really to allow other people to build

00:01:29,300 --> 00:01:33,380
open source software we love open source

00:01:31,220 --> 00:01:34,820
software peter wang is my co-founder two

00:01:33,380 --> 00:01:37,130
and half years ago we built continuum

00:01:34,820 --> 00:01:38,720
our whole purpose is really to allow

00:01:37,130 --> 00:01:40,700
other people to help us build open

00:01:38,720 --> 00:01:43,160
source and deliver it to the enterprise

00:01:40,700 --> 00:01:45,620
and really make it a part of everybody's

00:01:43,160 --> 00:01:47,300
enterprise experience so that's what

00:01:45,620 --> 00:01:48,830
we're about we love open source it's

00:01:47,300 --> 00:01:50,570
part of our DNA I've been contribute

00:01:48,830 --> 00:01:52,640
open source since 1998 when I first

00:01:50,570 --> 00:01:56,330
found Python and I've been a linux user

00:01:52,640 --> 00:01:57,770
I do a lot a lot of us do a lot with

00:01:56,330 --> 00:02:00,260
open sores now we've got 50 people

00:01:57,770 --> 00:02:02,300
worldwide we have remote developers we

00:02:00,260 --> 00:02:03,950
that we depending on the project remote

00:02:02,300 --> 00:02:06,350
developers work really well sometimes it

00:02:03,950 --> 00:02:08,060
can be difficult so we we try to find

00:02:06,350 --> 00:02:09,580
those projects for remote developers can

00:02:08,060 --> 00:02:12,050
work really well but they are available

00:02:09,580 --> 00:02:14,150
we have major contributors to numpy sci

00:02:12,050 --> 00:02:16,610
fi pandas symp I ipython and we love

00:02:14,150 --> 00:02:18,860
more we love newer new open source

00:02:16,610 --> 00:02:20,930
projects as well we think the open

00:02:18,860 --> 00:02:22,580
source can be more than just a hobby our

00:02:20,930 --> 00:02:24,590
desires to grow the community that's why

00:02:22,580 --> 00:02:26,090
we started the num focused foundation

00:02:24,590 --> 00:02:26,430
two and half years ago as well this

00:02:26,090 --> 00:02:27,750
found

00:02:26,430 --> 00:02:29,760
station is whole purpose is to promote

00:02:27,750 --> 00:02:32,670
accessible computing in the sciences and

00:02:29,760 --> 00:02:34,920
to back the plot to back numpy sci fi

00:02:32,670 --> 00:02:37,799
pandas simp I a lot of these projects

00:02:34,920 --> 00:02:38,730
they are emergent open source project so

00:02:37,799 --> 00:02:40,980
it's just kind of loosely affiliated

00:02:38,730 --> 00:02:43,379
community and not much money to help

00:02:40,980 --> 00:02:45,569
them and so none focuses purpose is to

00:02:43,379 --> 00:02:47,129
gather money from the firm enterprises

00:02:45,569 --> 00:02:49,290
and drive it toward sprint development

00:02:47,129 --> 00:02:53,219
towards open-source scholarships for

00:02:49,290 --> 00:02:55,680
diversity training diversity events none

00:02:53,219 --> 00:02:57,659
focus also sponsors and promotes and

00:02:55,680 --> 00:03:00,810
actually receives any any residual

00:02:57,659 --> 00:03:02,400
income from the PI data ecosystem the PI

00:03:00,810 --> 00:03:04,379
data conference series we're having one

00:03:02,400 --> 00:03:05,819
as an affiliated event to this event so

00:03:04,379 --> 00:03:07,409
please come to the PI data conference

00:03:05,819 --> 00:03:09,030
you'll hear all about the great

00:03:07,409 --> 00:03:11,549
scientific tools the great data analysis

00:03:09,030 --> 00:03:13,739
tools that are emerging now as a company

00:03:11,549 --> 00:03:15,480
what we sell is enterprise consulting

00:03:13,739 --> 00:03:17,579
and solutions in using optimizing

00:03:15,480 --> 00:03:18,930
performance to managing DevOps in a big

00:03:17,579 --> 00:03:21,389
data pipeline to building native

00:03:18,930 --> 00:03:23,250
applications in the web or on the

00:03:21,389 --> 00:03:24,930
desktop we also provide training

00:03:23,250 --> 00:03:26,400
pipeline for science Python for finance

00:03:24,930 --> 00:03:28,019
as well as practical Python through our

00:03:26,400 --> 00:03:30,810
partners de Beasley and Raven heninger

00:03:28,019 --> 00:03:33,090
and then we are building the continuum

00:03:30,810 --> 00:03:34,500
platform which is a product foot kind of

00:03:33,090 --> 00:03:37,220
taking the desktop to the data center

00:03:34,500 --> 00:03:39,690
and back that allows people to deploy

00:03:37,220 --> 00:03:41,879
data analysis applications and

00:03:39,690 --> 00:03:43,650
dashboards so our products are all

00:03:41,879 --> 00:03:45,389
centered around that platform they kind

00:03:43,650 --> 00:03:47,549
of take the dick you appearance of

00:03:45,389 --> 00:03:48,900
anaconda add-ons and an account of

00:03:47,549 --> 00:03:52,349
server work our enterprise I'll show you

00:03:48,900 --> 00:03:54,299
briefly just those the key behind these

00:03:52,349 --> 00:03:55,739
products is to really give experts and

00:03:54,299 --> 00:03:57,359
scientists what they really are asking

00:03:55,739 --> 00:03:59,939
for I've been spending a lot of time

00:03:57,359 --> 00:04:01,590
myself as a scientist I can understand

00:03:59,939 --> 00:04:03,269
what the workflows they desire are and

00:04:01,590 --> 00:04:06,419
we're trying to bring that to large

00:04:03,269 --> 00:04:07,799
organizations large companies so this is

00:04:06,419 --> 00:04:09,720
a picture I show of the continuum

00:04:07,799 --> 00:04:11,370
platform you can see that it rests on an

00:04:09,720 --> 00:04:13,259
open-source base and an open-source base

00:04:11,370 --> 00:04:15,509
that we contribute to greatly we

00:04:13,259 --> 00:04:18,000
continue to contribute to it the ipython

00:04:15,509 --> 00:04:19,829
senpai sci fi dumb pipe and is that that

00:04:18,000 --> 00:04:21,000
basic baseline and we have additional

00:04:19,829 --> 00:04:23,280
open source projects that we're writing

00:04:21,000 --> 00:04:25,470
and growing number bouquet blaze dying

00:04:23,280 --> 00:04:28,009
Conda olivium pi PI parallel all these

00:04:25,470 --> 00:04:30,780
things are trying to bring high-level

00:04:28,009 --> 00:04:32,880
scientific applications make them easier

00:04:30,780 --> 00:04:33,960
to write make them faster make them take

00:04:32,880 --> 00:04:36,960
advantage of the hardware that's

00:04:33,960 --> 00:04:38,969
changing today GPU is multi-core I wrote

00:04:36,960 --> 00:04:40,529
numpy six years ago

00:04:38,969 --> 00:04:42,749
I still know all the bad places where

00:04:40,529 --> 00:04:44,399
that's not optimized there's many many

00:04:42,749 --> 00:04:45,689
places and it's not optimized because it

00:04:44,399 --> 00:04:47,819
can't take advantage of multiple cores

00:04:45,689 --> 00:04:50,669
or can't take advantage of multiple GPUs

00:04:47,819 --> 00:04:51,989
on top of that we deliver anaconda and

00:04:50,669 --> 00:04:54,539
then above that or some of the

00:04:51,989 --> 00:04:56,610
proprietary applications that we provide

00:04:54,539 --> 00:04:57,959
all about creating applications that can

00:04:56,610 --> 00:04:59,699
deploy in the enterprise very very

00:04:57,959 --> 00:05:01,799
quickly and really empower the domain

00:04:59,699 --> 00:05:05,009
experts that live it exists in every

00:05:01,799 --> 00:05:07,469
organization why Python we love it

00:05:05,009 --> 00:05:08,610
because it's a divisive spectrum what

00:05:07,469 --> 00:05:11,039
you'll see here in the Python community

00:05:08,610 --> 00:05:12,299
is kind of different categories of

00:05:11,039 --> 00:05:13,619
people you have some people are web

00:05:12,299 --> 00:05:14,999
developers and they love that some

00:05:13,619 --> 00:05:16,860
people are dev op folks insist

00:05:14,999 --> 00:05:18,629
administration they love that and then I

00:05:16,860 --> 00:05:20,489
kind of in the camp of data scientists

00:05:18,629 --> 00:05:21,599
scientists and sometimes it can be

00:05:20,489 --> 00:05:22,889
challenging because we don't all speak

00:05:21,599 --> 00:05:24,179
the same language and so we kind of

00:05:22,889 --> 00:05:26,039
talked and use different words in

00:05:24,179 --> 00:05:27,329
different terms different libraries but

00:05:26,039 --> 00:05:28,679
one thing that's great about the Python

00:05:27,329 --> 00:05:31,019
community is it is a community and

00:05:28,679 --> 00:05:32,729
people for the most part listen to each

00:05:31,019 --> 00:05:36,059
other try to work forward on solutions

00:05:32,729 --> 00:05:37,049
that help everybody and in particular

00:05:36,059 --> 00:05:38,429
some of those people that are in the

00:05:37,049 --> 00:05:39,869
Python community aren't even developers

00:05:38,429 --> 00:05:40,979
there what I call an occasional

00:05:39,869 --> 00:05:43,709
developer that the cut and paste

00:05:40,979 --> 00:05:44,789
programmers there the I have an idea I

00:05:43,709 --> 00:05:47,009
kind of want to put the few things

00:05:44,789 --> 00:05:48,989
together and Python I can that's my

00:05:47,009 --> 00:05:50,459
brain it's partially leveraging my

00:05:48,989 --> 00:05:52,110
English language center so I can kind of

00:05:50,459 --> 00:05:53,729
understand what is sane and I have to be

00:05:52,110 --> 00:05:55,649
a developer to use it and I can build

00:05:53,729 --> 00:05:56,789
things very quickly Python does it it's

00:05:55,649 --> 00:05:59,519
very unique actually among all

00:05:56,789 --> 00:06:00,929
programming languages now numpy it plays

00:05:59,519 --> 00:06:02,939
a central role in the kinds of tools

00:06:00,929 --> 00:06:04,860
that we build it's at the center of a

00:06:02,939 --> 00:06:07,019
large stack of data analytics libraries

00:06:04,860 --> 00:06:08,519
there's a lot of users of numpy actually

00:06:07,019 --> 00:06:10,619
I think about three and three and a half

00:06:08,519 --> 00:06:12,149
million it's hard to tell because they

00:06:10,619 --> 00:06:14,249
don't ever tell me they don't ride home

00:06:12,149 --> 00:06:15,779
and send me a postcard sometimes would

00:06:14,249 --> 00:06:19,619
be nice you could actually get a sense

00:06:15,779 --> 00:06:21,269
of who did who used it as a company so

00:06:19,619 --> 00:06:23,099
that's kind of what we build on but as a

00:06:21,269 --> 00:06:25,409
company we we ship anaconda and I

00:06:23,099 --> 00:06:27,509
khurana is a free easy to install

00:06:25,409 --> 00:06:29,159
distribution of Python plus 100

00:06:27,509 --> 00:06:31,049
libraries one thing that's challenging

00:06:29,159 --> 00:06:32,729
about the numpy stack is it uses

00:06:31,049 --> 00:06:34,949
extension modules that uses see uses

00:06:32,729 --> 00:06:37,379
sometimes Fortran for syfy how do you

00:06:34,949 --> 00:06:39,449
get that installed it's not enough to

00:06:37,379 --> 00:06:40,919
just have a source install solution we

00:06:39,449 --> 00:06:42,959
have to have a binary install solution

00:06:40,919 --> 00:06:44,830
and so we invented Conda and Conda is

00:06:42,959 --> 00:06:45,940
and we work with the

00:06:44,830 --> 00:06:47,380
I'm packaging authority to try to

00:06:45,940 --> 00:06:49,510
promote kind of help understand how it

00:06:47,380 --> 00:06:51,460
fits in to the overall packaging story

00:06:49,510 --> 00:06:53,320
in Python but essentially it's like

00:06:51,460 --> 00:06:56,080
young and apt-get for Linux except it's

00:06:53,320 --> 00:06:58,210
for all platforms linux mac and windows

00:06:56,080 --> 00:07:00,520
is a fantastic distribution that people

00:06:58,210 --> 00:07:02,350
are people rave about they love it when

00:07:00,520 --> 00:07:03,850
they use it why did it 11 I think Conda

00:07:02,350 --> 00:07:05,950
is a big reason Khan is a cross-platform

00:07:03,850 --> 00:07:07,600
package manager it helps you manage a

00:07:05,950 --> 00:07:09,760
package and all its binary dependencies

00:07:07,600 --> 00:07:11,920
it's an easy to install distribution

00:07:09,760 --> 00:07:14,410
that supports both Python 27 and Python

00:07:11,920 --> 00:07:17,470
3.3 you can actually install an econo

00:07:14,410 --> 00:07:18,760
42.7 then create environments just how

00:07:17,470 --> 00:07:20,530
to talk by Red Hat they call these

00:07:18,760 --> 00:07:21,730
software collections of the leg space we

00:07:20,530 --> 00:07:24,100
call them environments their system

00:07:21,730 --> 00:07:25,960
level environments it lets you they're

00:07:24,100 --> 00:07:28,930
more than just Python they support

00:07:25,960 --> 00:07:30,460
anything so you can run python 3.3 in a

00:07:28,930 --> 00:07:32,530
separate environment on a Python 2.7

00:07:30,460 --> 00:07:35,110
base you can also do the reverse get a

00:07:32,530 --> 00:07:36,880
python 3.3 base run python 2.2 point 7

00:07:35,110 --> 00:07:39,280
as a compatibility test development

00:07:36,880 --> 00:07:40,450
environment separately it's a fantastic

00:07:39,280 --> 00:07:42,940
solution for bridging the gap between

00:07:40,450 --> 00:07:45,730
Python 3 in Python 2 then there's over

00:07:42,940 --> 00:07:48,280
200 packages available scikit-learn Sai

00:07:45,730 --> 00:07:50,290
kit image ipython notebook just at your

00:07:48,280 --> 00:07:51,550
fingertips Conda install gets them and

00:07:50,290 --> 00:07:52,540
you're off and running you don't know

00:07:51,550 --> 00:07:53,830
more to know we're compiling

00:07:52,540 --> 00:07:55,960
dependencies and we're trying to figure

00:07:53,830 --> 00:07:57,280
out that install it and this is all for

00:07:55,960 --> 00:07:59,230
free completely free you can even

00:07:57,280 --> 00:08:01,030
redistribute the binaries we make so

00:07:59,230 --> 00:08:03,160
that's anaconda its purpose is to make

00:08:01,030 --> 00:08:04,390
python ubiquitous in data science and

00:08:03,160 --> 00:08:06,580
have there should be no excuse for

00:08:04,390 --> 00:08:07,780
anybody in the world using Python just

00:08:06,580 --> 00:08:09,370
solve their data analysis needs and

00:08:07,780 --> 00:08:11,230
that's why we made kind of Conda get it

00:08:09,370 --> 00:08:12,640
at continue my no downloads it's free

00:08:11,230 --> 00:08:14,770
for downloading free for distributing as

00:08:12,640 --> 00:08:16,750
well and we do sell some things on top

00:08:14,770 --> 00:08:18,160
of that as a company we have to stay in

00:08:16,750 --> 00:08:20,200
business we have to sell something and

00:08:18,160 --> 00:08:22,990
part of that is an anaconda server it's

00:08:20,200 --> 00:08:24,580
a commercial supported anaconda provides

00:08:22,990 --> 00:08:26,500
support provides identification

00:08:24,580 --> 00:08:28,660
licensing it also provides a package

00:08:26,500 --> 00:08:30,400
mirror and kind of a management tool and

00:08:28,660 --> 00:08:32,110
we if you're interested now I can talk

00:08:30,400 --> 00:08:35,500
more about that to others come see me

00:08:32,110 --> 00:08:36,940
later bin start org is you can see kind

00:08:35,500 --> 00:08:39,190
of a panic on a server might look like

00:08:36,940 --> 00:08:40,660
on an on-premise installation by going

00:08:39,190 --> 00:08:42,550
to bin start org signing up get a free

00:08:40,660 --> 00:08:44,170
account and you can upload there any

00:08:42,550 --> 00:08:46,000
package you like there's a three

00:08:44,170 --> 00:08:48,490
gigabyte limit so don't just show up all

00:08:46,000 --> 00:08:50,110
your movies and content packages but you

00:08:48,490 --> 00:08:51,370
can put any binary package you like and

00:08:50,110 --> 00:08:54,190
share that with somebody else so they

00:08:51,370 --> 00:08:55,810
can easily install your solution as long

00:08:54,190 --> 00:08:56,820
as its public as long as anybody can

00:08:55,810 --> 00:09:00,510
download it is complete

00:08:56,820 --> 00:09:02,400
free licari is our hosted analytics

00:09:00,510 --> 00:09:03,870
environment solution it's a fantastic

00:09:02,400 --> 00:09:05,610
way to quickly and easily get running

00:09:03,870 --> 00:09:07,050
with the ipython notebook you can sign

00:09:05,610 --> 00:09:08,910
up and instantly you're in an I Python

00:09:07,050 --> 00:09:10,650
notebook running code now the free

00:09:08,910 --> 00:09:12,870
version gives you a UH node with only

00:09:10,650 --> 00:09:14,940
little bit of memory and only a tiny bit

00:09:12,870 --> 00:09:16,650
of computational power but it's but it's

00:09:14,940 --> 00:09:18,390
a great for teaching for showing for

00:09:16,650 --> 00:09:20,310
demonstrating if you want more power you

00:09:18,390 --> 00:09:22,890
can easily upgrade to get as powerful

00:09:20,310 --> 00:09:24,690
node as you like then we're qari

00:09:22,890 --> 00:09:26,820
enterprise is the on-premise version of

00:09:24,690 --> 00:09:29,160
that cloud story it's it's adapted for

00:09:26,820 --> 00:09:31,020
the UI has changed to allow ldap support

00:09:29,160 --> 00:09:32,580
integration to it installs to internal

00:09:31,020 --> 00:09:34,290
servers it has a notion of projects and

00:09:32,580 --> 00:09:37,260
teams and lets people instantly

00:09:34,290 --> 00:09:38,340
collaborate on a large scale project and

00:09:37,260 --> 00:09:41,520
then share the results of their

00:09:38,340 --> 00:09:43,350
workflows with others very easily so

00:09:41,520 --> 00:09:45,570
from desktop the data center is kind of

00:09:43,350 --> 00:09:46,860
our platform story it helps you anaconda

00:09:45,570 --> 00:09:48,540
on the desktop or carry on the data

00:09:46,860 --> 00:09:50,640
center and a seamless connection between

00:09:48,540 --> 00:09:52,050
the two so you can go from writing code

00:09:50,640 --> 00:09:54,060
on your desktop to deployed applications

00:09:52,050 --> 00:09:56,880
that are in the cloud or on the data

00:09:54,060 --> 00:09:57,810
center on-premise so that's our solution

00:09:56,880 --> 00:09:59,550
that's the thing we are building

00:09:57,810 --> 00:10:02,310
together as a company that helps all

00:09:59,550 --> 00:10:04,590
enterprises everywhere but the part I

00:10:02,310 --> 00:10:05,850
like the best is the open-source tools

00:10:04,590 --> 00:10:07,830
that we're actually building as a part

00:10:05,850 --> 00:10:09,210
of this we feel it's critically

00:10:07,830 --> 00:10:10,800
important to continue to build open

00:10:09,210 --> 00:10:12,090
source technology so we have key open

00:10:10,800 --> 00:10:14,580
source technologies that builds on top

00:10:12,090 --> 00:10:17,280
of dump I site-by-site pie pandas and

00:10:14,580 --> 00:10:18,660
the rest so blazed bouquet numba Conda I

00:10:17,280 --> 00:10:20,640
don't really have time to explain all of

00:10:18,660 --> 00:10:23,220
these in the in a brief time I have

00:10:20,640 --> 00:10:24,990
tomorrow my keynote i'll be talking not

00:10:23,220 --> 00:10:27,330
about all these technologies a little

00:10:24,990 --> 00:10:29,700
bit will i'll mention a number probably

00:10:27,330 --> 00:10:31,740
mostly about blaze and kind of how i see

00:10:29,700 --> 00:10:34,560
it is part of the story for the future

00:10:31,740 --> 00:10:36,210
of big data analytics we do have some

00:10:34,560 --> 00:10:37,950
add-ons i've talked about those before

00:10:36,210 --> 00:10:39,210
so i'm going to briefly talk about kind

00:10:37,950 --> 00:10:41,370
of these technologies get you excited

00:10:39,210 --> 00:10:42,690
about it we're looking for help we're

00:10:41,370 --> 00:10:43,710
looking for developers who can help us

00:10:42,690 --> 00:10:46,650
with each of these these are paid

00:10:43,710 --> 00:10:48,750
positions so one is number number is

00:10:46,650 --> 00:10:50,220
really a technology about taking the CPI

00:10:48,750 --> 00:10:53,610
on stack and providing compiled

00:10:50,220 --> 00:10:55,500
technology to it so a pie pie is a

00:10:53,610 --> 00:10:57,150
fantastic project but it doesn't

00:10:55,500 --> 00:10:59,880
integrate with a numpy stack very well

00:10:57,150 --> 00:11:01,770
none pipe matplotlib sci-fi senpai so we

00:10:59,880 --> 00:11:03,510
took and took the llvm technology stack

00:11:01,770 --> 00:11:05,580
and with decorators we can take a

00:11:03,510 --> 00:11:07,250
function compile it to machine code and

00:11:05,580 --> 00:11:08,930
integrate it in with this other

00:11:07,250 --> 00:11:11,300
the num pipe stack very easily takes

00:11:08,930 --> 00:11:12,530
advantage of the lvm tool stack so the

00:11:11,300 --> 00:11:14,060
kind of work that we're doing is to

00:11:12,530 --> 00:11:17,360
basically translate a function it looks

00:11:14,060 --> 00:11:21,110
like this with a jit decorator create a

00:11:17,360 --> 00:11:23,780
general assembly kind of code via lb but

00:11:21,110 --> 00:11:25,010
via the translator and then llvm takes

00:11:23,780 --> 00:11:27,050
that code and runs on your under

00:11:25,010 --> 00:11:28,970
platform it can do amazing things I

00:11:27,050 --> 00:11:31,150
think it changes the game it lets Python

00:11:28,970 --> 00:11:33,890
essentially be like a compiled language

00:11:31,150 --> 00:11:35,150
it's a subset of Python and we can go to

00:11:33,890 --> 00:11:37,400
the details if you have if you like

00:11:35,150 --> 00:11:39,800
later but a subset of Python can now you

00:11:37,400 --> 00:11:41,360
can write it in the Python syntax and

00:11:39,800 --> 00:11:43,790
get compiled performance just as if

00:11:41,360 --> 00:11:45,740
you'd written C or C++ and we've seen we

00:11:43,790 --> 00:11:47,210
have numerous examples of that very very

00:11:45,740 --> 00:11:49,370
easy way to get optimized performance

00:11:47,210 --> 00:11:51,260
out of your Python code here's a simple

00:11:49,370 --> 00:11:52,730
example of a Mandelbrot generation gotta

00:11:51,260 --> 00:11:54,680
have your Mandelbrot generation example

00:11:52,730 --> 00:11:56,210
it illustrates ability to call functions

00:11:54,680 --> 00:11:58,520
and have that bypass the Python runtime

00:11:56,210 --> 00:12:00,320
and essentially be a low-level machine

00:11:58,520 --> 00:12:02,930
code so this is one way to bypass the

00:12:00,320 --> 00:12:04,670
Gil used use number to add a jit and I

00:12:02,930 --> 00:12:06,110
have a Python now you have a it's not in

00:12:04,670 --> 00:12:07,760
the Python runtime anymore it's actually

00:12:06,110 --> 00:12:11,200
compiled code and you can release the

00:12:07,760 --> 00:12:14,960
gill and execute that so that's number

00:12:11,200 --> 00:12:17,180
blaze is our data to code seamlessly

00:12:14,960 --> 00:12:19,640
it's about taking the fundamental

00:12:17,180 --> 00:12:22,339
problem blaze tries to solve is when you

00:12:19,640 --> 00:12:24,140
have data in let's say it's in HDFS FS

00:12:22,339 --> 00:12:25,220
or you or somebody else in your teams as

00:12:24,140 --> 00:12:27,440
well I we think I think we should have

00:12:25,220 --> 00:12:29,120
it in Postgres with green plum or maybe

00:12:27,440 --> 00:12:32,270
we should have it in at ISA maybe should

00:12:29,120 --> 00:12:34,370
have just a bunch of hdf5 files that

00:12:32,270 --> 00:12:36,260
decision of how you store your data ends

00:12:34,370 --> 00:12:37,580
up determining how you write code how

00:12:36,260 --> 00:12:39,860
you write your queries how you write

00:12:37,580 --> 00:12:41,330
your solution in Python it shouldn't be

00:12:39,860 --> 00:12:44,870
that way it ought to be a way to write

00:12:41,330 --> 00:12:46,760
an expressive table oriented code that

00:12:44,870 --> 00:12:48,589
then you just plug in whatever data you

00:12:46,760 --> 00:12:50,300
have and even allow you to cross

00:12:48,589 --> 00:12:52,400
different tables and have the same

00:12:50,300 --> 00:12:55,160
expression work across all those tables

00:12:52,400 --> 00:12:56,750
so blaze is a foundation for large-scale

00:12:55,160 --> 00:12:58,130
array or computing that leverages the

00:12:56,750 --> 00:13:01,250
technologies that are out there already

00:12:58,130 --> 00:13:02,720
so we know with data this is describing

00:13:01,250 --> 00:13:05,060
some of the pain involved in data

00:13:02,720 --> 00:13:06,650
there's many many kinds of formats the

00:13:05,060 --> 00:13:08,420
big data pipelines are constantly

00:13:06,650 --> 00:13:10,370
changing it can be difficult to reuse

00:13:08,420 --> 00:13:12,800
code in that environment the blaze

00:13:10,370 --> 00:13:14,210
architecture has an API with it has a

00:13:12,800 --> 00:13:16,310
some fundamental pieces at the third

00:13:14,210 --> 00:13:17,870
expression and a compute a pluggable

00:13:16,310 --> 00:13:20,390
compute infrastructure and a pluggable

00:13:17,870 --> 00:13:20,720
data infrastructure so it's a flexible

00:13:20,390 --> 00:13:22,069
arket

00:13:20,720 --> 00:13:24,889
sure that it can scale across multiple

00:13:22,069 --> 00:13:26,689
use cases so data for example it can be

00:13:24,889 --> 00:13:29,449
stored as CSV files or a collection of

00:13:26,689 --> 00:13:31,189
JSON files or HDFS or hdf5 we're just in

00:13:29,449 --> 00:13:33,740
a sequel you can add your own custom

00:13:31,189 --> 00:13:36,139
data type so a simple API lets you add

00:13:33,740 --> 00:13:38,029
it but then there's a your your Python

00:13:36,139 --> 00:13:39,709
level expression is common it's more

00:13:38,029 --> 00:13:42,350
numpy like you can slice it you can dice

00:13:39,709 --> 00:13:44,029
it you can grab pieces of it and then

00:13:42,350 --> 00:13:46,009
you can write in a compute graph that

00:13:44,029 --> 00:13:48,019
refers to part of that data so this is a

00:13:46,009 --> 00:13:49,759
computer abstraction that basically can

00:13:48,019 --> 00:13:52,220
sit on the top of multiple back in

00:13:49,759 --> 00:13:54,620
libraries things like pandas dined is a

00:13:52,220 --> 00:13:56,509
next-generation numpy equivalent it's a

00:13:54,620 --> 00:13:59,660
C++ library does the same things as

00:13:56,509 --> 00:14:01,220
numpy but allows other it's more general

00:13:59,660 --> 00:14:03,860
allows things like very blank strings

00:14:01,220 --> 00:14:05,689
ragged arrays and categorical data types

00:14:03,860 --> 00:14:07,430
which are missing from numpy it can also

00:14:05,689 --> 00:14:11,120
sit on top of spark which is part of the

00:14:07,430 --> 00:14:12,649
Hadoop ecosystem pie tables which from

00:14:11,120 --> 00:14:15,050
our friend a friend Cesc who sit in the

00:14:12,649 --> 00:14:17,509
back then this blaze expression graph

00:14:15,050 --> 00:14:19,430
you can write a single expression and

00:14:17,509 --> 00:14:21,470
have it attached to mobile data sources

00:14:19,430 --> 00:14:24,199
and pull it all together in a single

00:14:21,470 --> 00:14:26,389
application here's a simple example we

00:14:24,199 --> 00:14:27,709
have a generalized data declaration

00:14:26,389 --> 00:14:29,689
format called data shape which

00:14:27,709 --> 00:14:31,189
generalizes num pies d-type and this

00:14:29,689 --> 00:14:33,470
data shape allows you to describe data

00:14:31,189 --> 00:14:35,240
universally in a way that can sit on top

00:14:33,470 --> 00:14:37,250
of multiple data formats so here I'm

00:14:35,240 --> 00:14:39,529
creating a symbolic table and this

00:14:37,250 --> 00:14:41,269
symbolic table then I can write an

00:14:39,529 --> 00:14:42,769
expression involving that a symbolic

00:14:41,269 --> 00:14:44,930
table including joining group buys

00:14:42,769 --> 00:14:46,939
aggregations now that creates a deferred

00:14:44,930 --> 00:14:48,230
expression and then the load data

00:14:46,939 --> 00:14:49,819
there's different implementations of

00:14:48,230 --> 00:14:52,930
load data dependent my data since equal

00:14:49,819 --> 00:14:55,430
or of it since park and then I simply

00:14:52,930 --> 00:14:57,470
map the elements of that would have

00:14:55,430 --> 00:14:59,360
loaded to basically a dictionary

00:14:57,470 --> 00:15:01,250
representation of the namespace that

00:14:59,360 --> 00:15:03,680
that compute is going to evaluate in and

00:15:01,250 --> 00:15:05,559
then the compute maps the expression

00:15:03,680 --> 00:15:07,339
graph to the actual back end

00:15:05,559 --> 00:15:10,220
calculations that are needed so whether

00:15:07,339 --> 00:15:13,819
it be pandas in memory or spark on a 100

00:15:10,220 --> 00:15:16,069
100 node cluster the same code is can be

00:15:13,819 --> 00:15:17,689
executed so this is the load data

00:15:16,069 --> 00:15:19,879
showing the difference between a spark

00:15:17,689 --> 00:15:23,209
and pandas I'll talk more about this

00:15:19,879 --> 00:15:26,629
tomorrow because I think it really sets

00:15:23,209 --> 00:15:28,430
the stage for reusable computing and

00:15:26,629 --> 00:15:30,559
reasonable expressions and helping

00:15:28,430 --> 00:15:32,120
people make sense of the diverse and

00:15:30,559 --> 00:15:33,620
changing world

00:15:32,120 --> 00:15:37,000
big data and large-scale array already

00:15:33,620 --> 00:15:39,320
computing so the last technology I

00:15:37,000 --> 00:15:40,700
didn't tell a lot about Conda because

00:15:39,320 --> 00:15:42,650
I've got a lot of videos out there don't

00:15:40,700 --> 00:15:44,000
hear about Conda there's actually some

00:15:42,650 --> 00:15:46,310
jokes about me constantly talking about

00:15:44,000 --> 00:15:48,110
Conda because I love it so much you can

00:15:46,310 --> 00:15:49,370
find videos about Conda on the web I'm

00:15:48,110 --> 00:15:51,230
going to talk about bouquet which is our

00:15:49,370 --> 00:15:52,550
visualization library I'm really excited

00:15:51,230 --> 00:15:54,680
about the visualization library a lot of

00:15:52,550 --> 00:15:57,140
people are as well it basically allows

00:15:54,680 --> 00:15:59,390
you to interactive plotting in the web

00:15:57,140 --> 00:16:01,510
without writing JavaScript so as a

00:15:59,390 --> 00:16:04,339
Python developer you can write the

00:16:01,510 --> 00:16:07,430
interactive visualizations in the same

00:16:04,339 --> 00:16:08,779
spirit as d3 but using Python now it's

00:16:07,430 --> 00:16:10,790
still in development but quite a bit can

00:16:08,779 --> 00:16:12,980
be done already you have novel graphics

00:16:10,790 --> 00:16:15,339
actually the violin plot came from a

00:16:12,980 --> 00:16:17,360
seaborne library using the matplotlib

00:16:15,339 --> 00:16:19,130
compatibility of bouquet so you could

00:16:17,360 --> 00:16:20,990
have a map plot lib plot and then

00:16:19,130 --> 00:16:22,850
essentially render it with bouquet to

00:16:20,990 --> 00:16:24,830
bribe the interactivity and the

00:16:22,850 --> 00:16:26,420
JavaScript rendering lots of different

00:16:24,830 --> 00:16:28,040
kinds of graphics can be built there's

00:16:26,420 --> 00:16:30,380
even streaming and dynamic data that can

00:16:28,040 --> 00:16:32,510
be built I have a simple demo here I'd

00:16:30,380 --> 00:16:35,660
like to show basically it's running in

00:16:32,510 --> 00:16:37,790
the background so if I go to this is

00:16:35,660 --> 00:16:38,839
just my basic computer and it was been

00:16:37,790 --> 00:16:41,330
running for a while and it's the

00:16:38,839 --> 00:16:43,430
microphone what I'm doing is using the

00:16:41,330 --> 00:16:45,260
numpy stack to do a Fourier transform on

00:16:43,430 --> 00:16:47,390
the audio coming from the microphone and

00:16:45,260 --> 00:16:48,800
show that spectrogram in a couple of

00:16:47,390 --> 00:16:51,200
different ways so I see the time series

00:16:48,800 --> 00:16:52,850
I can see the frequency here's the time

00:16:51,200 --> 00:16:55,790
series here's the frequency spectrum and

00:16:52,850 --> 00:16:57,740
then here's a little of the frequency

00:16:55,790 --> 00:16:59,029
spectrum take this line and rotate it

00:16:57,740 --> 00:17:00,589
and stick it an image and then it kind

00:16:59,029 --> 00:17:03,230
of moves across I get a spectrogram

00:17:00,589 --> 00:17:06,170
image over time and then here's our just

00:17:03,230 --> 00:17:07,250
a radial plot just for fun so you know

00:17:06,170 --> 00:17:14,660
you can see that this is sampling the

00:17:07,250 --> 00:17:16,809
microphone can't stick and whistle that

00:17:14,660 --> 00:17:16,809
high

00:17:18,900 --> 00:17:23,130
anyway there's there's still six you at

00:17:20,860 --> 00:17:23,130
the game

00:17:27,370 --> 00:17:30,870
so this is a JavaScript library and you

00:17:29,680 --> 00:17:33,460
can actually do this from Python

00:17:30,870 --> 00:17:35,050
currently the this demo is currently

00:17:33,460 --> 00:17:36,460
written in taking advantage of the

00:17:35,050 --> 00:17:37,900
Bocage a us back end but it's been

00:17:36,460 --> 00:17:39,460
written in Python so you can show just

00:17:37,900 --> 00:17:41,170
how to do this sort of thing in Python

00:17:39,460 --> 00:17:42,490
and create these kind of visual apps it

00:17:41,170 --> 00:17:44,620
illustrates the many things about the

00:17:42,490 --> 00:17:46,390
the platform that I think is the new

00:17:44,620 --> 00:17:48,760
platform for visualization which is the

00:17:46,390 --> 00:17:50,110
web browser so this is what we're doing

00:17:48,760 --> 00:17:51,640
is about what's it about is the kind of

00:17:50,110 --> 00:17:53,980
things you can do if you come with us if

00:17:51,640 --> 00:17:57,660
you come work with us let's go back to

00:17:53,980 --> 00:18:01,420
my presentation not the twitter feed

00:17:57,660 --> 00:18:03,130
although that may be some you tweeted

00:18:01,420 --> 00:18:04,690
what the other aspect of dynamic

00:18:03,130 --> 00:18:07,150
interaction is that because it runs

00:18:04,690 --> 00:18:09,070
there's a WebSocket communication and an

00:18:07,150 --> 00:18:10,750
object model bouquet creates a scene

00:18:09,070 --> 00:18:11,800
graph in the web browser and an object

00:18:10,750 --> 00:18:14,200
model that can be reflected in the

00:18:11,800 --> 00:18:15,460
Python side so you can write objects an

00:18:14,200 --> 00:18:17,350
object model in Python that gets

00:18:15,460 --> 00:18:19,059
reflected to the trip to the browser and

00:18:17,350 --> 00:18:20,770
you can have server-side control you can

00:18:19,059 --> 00:18:22,510
also just have all that logic in the

00:18:20,770 --> 00:18:24,370
browser and have kind of a static web

00:18:22,510 --> 00:18:26,559
page that has all the interactive logic

00:18:24,370 --> 00:18:29,260
in the browser so this is just an

00:18:26,559 --> 00:18:32,080
example of a essentially a website the

00:18:29,260 --> 00:18:34,450
web service updating the plot and then

00:18:32,080 --> 00:18:36,309
the backend server updating the plot in

00:18:34,450 --> 00:18:37,690
Python and having the web display change

00:18:36,309 --> 00:18:39,040
so it's a great way to handle streaming

00:18:37,690 --> 00:18:41,230
data and all kinds of different

00:18:39,040 --> 00:18:42,790
interactions you can also do big data

00:18:41,230 --> 00:18:45,520
kinds of analysis pretty easily with

00:18:42,790 --> 00:18:48,340
this kind of setup I can go to I have it

00:18:45,520 --> 00:18:49,780
this is running actually in the US so

00:18:48,340 --> 00:18:52,000
these are time series that are stored on

00:18:49,780 --> 00:18:54,760
a server and I have just a ability to

00:18:52,000 --> 00:18:56,530
zoom in so you can see it's actually

00:18:54,760 --> 00:18:58,030
updates that it seems and initially what

00:18:56,530 --> 00:18:59,230
the data has in it then it goes back to

00:18:58,030 --> 00:19:00,820
the server and updates a higher

00:18:59,230 --> 00:19:03,280
resolution version and these are all

00:19:00,820 --> 00:19:05,350
links these different plots so it's just

00:19:03,280 --> 00:19:07,240
a simple example of resampling then I

00:19:05,350 --> 00:19:08,860
can reset the view and then it expands

00:19:07,240 --> 00:19:10,510
out after grabs the data this is

00:19:08,860 --> 00:19:12,309
actually back in the US so there's a

00:19:10,510 --> 00:19:13,570
little bit of latency between them here

00:19:12,309 --> 00:19:15,820
i have an example i'm actually looking

00:19:13,570 --> 00:19:17,410
at the whole world you can see how to

00:19:15,820 --> 00:19:19,059
zoomed into a particular slice this is a

00:19:17,410 --> 00:19:20,320
world view it's a tight it's a three

00:19:19,059 --> 00:19:23,110
dimensional time series about four

00:19:20,320 --> 00:19:26,500
gigabytes of data god we've got from the

00:19:23,110 --> 00:19:28,570
JPL or NASA and it shows the ocean view

00:19:26,500 --> 00:19:30,910
and it's in time so I'm seeing a 2d

00:19:28,570 --> 00:19:33,429
vision 2d projection of the world but

00:19:30,910 --> 00:19:35,140
this slider changes the time view and

00:19:33,429 --> 00:19:37,810
takes a little bit to bring back all

00:19:35,140 --> 00:19:39,310
that all that data but if i zoom in to

00:19:37,810 --> 00:19:41,260
particularly interesting area of the

00:19:39,310 --> 00:19:43,360
world

00:19:41,260 --> 00:19:45,160
I can see that it updates from the

00:19:43,360 --> 00:19:46,600
server's gives me back this a resolution

00:19:45,160 --> 00:19:48,340
view and then I have projections that

00:19:46,600 --> 00:19:50,430
show that the period pertz through time

00:19:48,340 --> 00:19:53,080
and I can change which slice it shows

00:19:50,430 --> 00:19:54,510
you can see it's updating down here so

00:19:53,080 --> 00:19:57,160
that's just an example of an application

00:19:54,510 --> 00:19:58,360
built with the visualization and the

00:19:57,160 --> 00:20:00,850
kind of things you can do very quickly

00:19:58,360 --> 00:20:03,040
and then deploy on the on the website

00:20:00,850 --> 00:20:05,440
and a website and a web browser across

00:20:03,040 --> 00:20:07,120
your organization another you have a

00:20:05,440 --> 00:20:08,770
little widgets you can provide this is

00:20:07,120 --> 00:20:10,750
just example the simple widget and some

00:20:08,770 --> 00:20:12,820
dummy data about downloads and I can

00:20:10,750 --> 00:20:14,140
it'll adjust as i slide through it these

00:20:12,820 --> 00:20:16,570
are the kinds of things you can do from

00:20:14,140 --> 00:20:19,950
Python without running JavaScript using

00:20:16,570 --> 00:20:23,140
bouquet and its application technology

00:20:19,950 --> 00:20:26,560
so there's lots of that's the gist of

00:20:23,140 --> 00:20:28,870
what we're trying to do on the platform

00:20:26,560 --> 00:20:30,850
basically from data to visualization and

00:20:28,870 --> 00:20:32,830
beyond and make it easy for people to do

00:20:30,850 --> 00:20:34,720
it at a high level so they don't have to

00:20:32,830 --> 00:20:36,490
be expert developers they don't have to

00:20:34,720 --> 00:20:37,660
change and know everything about sequel

00:20:36,490 --> 00:20:39,640
and about JavaScript and about

00:20:37,660 --> 00:20:41,620
development operations in order to get

00:20:39,640 --> 00:20:43,780
solutions that take advantage of

00:20:41,620 --> 00:20:47,190
multiple kinds of hardware multiple

00:20:43,780 --> 00:20:50,110
kinds of data sets and high level ideas

00:20:47,190 --> 00:20:51,520
so no javascript is because the more

00:20:50,110 --> 00:20:53,410
example the kind of plots you can do

00:20:51,520 --> 00:20:55,870
there's a bouquet there's actually going

00:20:53,410 --> 00:20:58,090
to be a tutorial at PI data invite you

00:20:55,870 --> 00:21:00,220
all to come to PI data and the tutorial

00:20:58,090 --> 00:21:02,590
given by one of the by the principal

00:21:00,220 --> 00:21:04,540
author of bouquet Bryan vandeven will be

00:21:02,590 --> 00:21:08,020
here there's also a great website you

00:21:04,540 --> 00:21:10,210
can go to that will explain bouquet boca

00:21:08,020 --> 00:21:12,250
de pedo pedo or it's got a gallery and

00:21:10,210 --> 00:21:14,470
go in and look at the code it's still a

00:21:12,250 --> 00:21:16,450
work in progress it's 0.5 just came out

00:21:14,470 --> 00:21:19,090
the widgets just came out it's making

00:21:16,450 --> 00:21:20,860
rapid progress but you can it's usable

00:21:19,090 --> 00:21:22,540
today but it's if you find something

00:21:20,860 --> 00:21:24,340
that you want and it's not there let us

00:21:22,540 --> 00:21:26,350
know and I'm sure it's either on the

00:21:24,340 --> 00:21:28,150
roadmap or it will be added if you if

00:21:26,350 --> 00:21:33,490
you let us know about your particular

00:21:28,150 --> 00:21:34,960
needs okay so that's it's a quick run

00:21:33,490 --> 00:21:37,930
through the technologies we build and

00:21:34,960 --> 00:21:40,420
the kinds of things we do and basically

00:21:37,930 --> 00:21:42,670
I'll end by talking about the openings

00:21:40,420 --> 00:21:44,440
that we have there's many openings for

00:21:42,670 --> 00:21:46,600
the number team for the blaze team the

00:21:44,440 --> 00:21:48,340
bouquet team embedded consultants if you

00:21:46,600 --> 00:21:49,870
want to live in New York come talk to me

00:21:48,340 --> 00:21:52,240
I have great opportunity to and

00:21:49,870 --> 00:21:53,440
city and these are opportunities that

00:21:52,240 --> 00:21:55,360
not only work with a client that work

00:21:53,440 --> 00:21:57,309
with the rest of our team in helping us

00:21:55,360 --> 00:21:59,890
build this platform based on open source

00:21:57,309 --> 00:22:01,809
technology that can benefit large and

00:21:59,890 --> 00:22:03,790
small scale organizations around the

00:22:01,809 --> 00:22:05,350
world we're really excited what we're

00:22:03,790 --> 00:22:06,760
doing we think we have ideas that can

00:22:05,350 --> 00:22:09,100
really help and transform the way people

00:22:06,760 --> 00:22:11,020
write code and write code for high-level

00:22:09,100 --> 00:22:13,990
data analysis and we'd love to have you

00:22:11,020 --> 00:22:17,020
join us so I think with that I'll ask

00:22:13,990 --> 00:22:19,200
for questions or anything else you want

00:22:17,020 --> 00:22:19,200
to know about

00:22:27,320 --> 00:22:38,250
so we got any questions thanks for the

00:22:36,090 --> 00:22:43,410
dog I have two questions regarding the

00:22:38,250 --> 00:22:45,330
Piton the Python part of the bouquet so

00:22:43,410 --> 00:22:46,860
first of all the I remember that at the

00:22:45,330 --> 00:22:49,020
beginning the pocket was something which

00:22:46,860 --> 00:22:52,530
was trying to implement the grammar of

00:22:49,020 --> 00:22:54,810
graphics for Python but recently I stole

00:22:52,530 --> 00:22:56,670
that there's no mention in documentation

00:22:54,810 --> 00:22:58,650
about the grammar of graphics are you

00:22:56,670 --> 00:23:01,470
still using the same kind of interface

00:22:58,650 --> 00:23:04,470
or just ha I would say it's not the

00:23:01,470 --> 00:23:06,660
grammar of graphics well I know that

00:23:04,470 --> 00:23:08,940
that some other developers see the

00:23:06,660 --> 00:23:10,920
grammar of graphics as a as a good

00:23:08,940 --> 00:23:13,800
direction but not necessarily complete

00:23:10,920 --> 00:23:15,420
and so bocage is itself uses concepts

00:23:13,800 --> 00:23:18,240
the grammar graphics in its architecture

00:23:15,420 --> 00:23:21,150
the interface is something that can be

00:23:18,240 --> 00:23:24,150
added on top so for example ggplot which

00:23:21,150 --> 00:23:26,370
is a it currently has a back-end in

00:23:24,150 --> 00:23:28,230
matplotlib and easily we retarget the

00:23:26,370 --> 00:23:30,630
vogue ajs in fact we have examples using

00:23:28,230 --> 00:23:31,490
matplotlib interface of doing that so

00:23:30,630 --> 00:23:33,780
let's say the grammar of graphics

00:23:31,490 --> 00:23:37,020
discussion is higher level then we're

00:23:33,780 --> 00:23:39,390
then kind of bouquet and bow pjs and the

00:23:37,020 --> 00:23:43,710
second question is regarding the reaches

00:23:39,390 --> 00:23:45,120
in interactivity of the plots so I as I

00:23:43,710 --> 00:23:47,430
understand which it is something that

00:23:45,120 --> 00:23:48,810
you can play with to for example select

00:23:47,430 --> 00:23:52,020
some data points get some more

00:23:48,810 --> 00:23:53,580
information about particular data a is

00:23:52,020 --> 00:23:55,770
it something that you have to implement

00:23:53,580 --> 00:23:58,080
in JavaScript that you can just use

00:23:55,770 --> 00:24:00,990
Python code to define the which for

00:23:58,080 --> 00:24:03,270
which for example if I want to select

00:24:00,990 --> 00:24:04,860
some data points and print maybe some to

00:24:03,270 --> 00:24:06,720
rice selecting data points and pretty

00:24:04,860 --> 00:24:08,730
them I believe that's on the roadmap to

00:24:06,720 --> 00:24:11,790
be done from Python I think currently to

00:24:08,730 --> 00:24:13,890
do that if you have a nation Python

00:24:11,790 --> 00:24:15,600
interface to that and so if it works for

00:24:13,890 --> 00:24:17,460
you it might be enough but it's but it's

00:24:15,600 --> 00:24:20,400
possible that it's it's still not quite

00:24:17,460 --> 00:24:21,930
complete that API so the idea is you

00:24:20,400 --> 00:24:23,880
won't have to use JavaScript I'm not

00:24:21,930 --> 00:24:25,800
sure how if it were completely finished

00:24:23,880 --> 00:24:30,510
with that API on the selection of points

00:24:25,800 --> 00:24:32,100
side yeah any more questions and Brian

00:24:30,510 --> 00:24:35,720
will be here later today and he can give

00:24:32,100 --> 00:24:39,570
you a lot more explanation of bouquet

00:24:35,720 --> 00:24:42,530
anyone else know ok thank you

00:24:39,570 --> 00:24:42,530

YouTube URL: https://www.youtube.com/watch?v=FCUvqO6rJys


