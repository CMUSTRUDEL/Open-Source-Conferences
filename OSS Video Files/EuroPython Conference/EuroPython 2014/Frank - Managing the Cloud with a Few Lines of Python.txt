Title: Frank - Managing the Cloud with a Few Lines of Python
Publication date: 2015-04-18
Playlist: EuroPython 2014
Description: 
	Frank - Managing the Cloud with a Few Lines of Python
[EuroPython 2014]
[23 July 2014]

One of the advantages of cloud computing is that resources can be enabled or disabled dynamically. 
E. g. is an distributed application short on compute power one can easily add more. But who wants to do that by hand? Python is a perfect fit to control the cloud.
The talk introduces the package Boto which offers an easy API to manage most of the Amazon Web Services (AWS) as well as a number of command line tools.
First some usage examples are shown to introduce the concepts behind Boto. 
For that a few virtual hosts with different configurations are launched, and the use of the storage service S3 is briefly introduced. 
Based on that a scalable continuous integration system controlled by Boto is developed to show how easy all the required services can be used from Python.
Most of the examples will be demonstrated during the talk. They should be easily adoptable for similar use cases or serve as an starting point for more different ones.

-----

One of the advantages of cloud computing is that resources can be enabled or disabled dynamically. 
E. g. is an distributed application short on compute power one can easily add more. But who wants to do that by hand? Python is a perfect fit to control the cloud. 
The talk introduces the package Boto which offers an easy API to manage most of the Amazon Web Services (AWS) as well as a number of command line tools. 
First some usage examples are shown to introduce the concepts behind Boto. 
For that a few virtual instances with different configurations are launched, and the use of the storage service S3 is briefly introduced. 
Based on that a scalable continuous integration system controlled by Boto is developed to show how easy all the required services can be used from Python. 
Most of the examples will be demonstrated during the talk. They should be easily adoptable for similar use cases or serve as an starting point for more different ones.
Captions: 
	00:00:14,790 --> 00:00:21,960
so the second speaker of the session is

00:00:18,000 --> 00:00:24,750
going to be frank Becca Frank Becca has

00:00:21,960 --> 00:00:27,869
been developing linux systems for more

00:00:24,750 --> 00:00:32,600
than 10 years he specializes in the

00:00:27,869 --> 00:00:36,450
field of testing and benchmarking since

00:00:32,600 --> 00:00:38,399
2013 he is working for amazon web

00:00:36,450 --> 00:00:43,230
services and I see a couple of Emma's

00:00:38,399 --> 00:00:46,649
and t-shirts in the room so Wow Frank

00:00:43,230 --> 00:00:49,710
also has held tutorials and talks at the

00:00:46,649 --> 00:00:53,490
German pikin about I patent and jungle

00:00:49,710 --> 00:00:57,660
in his spare time which by his own

00:00:53,490 --> 00:01:00,230
accord is very rare he is producing the

00:00:57,660 --> 00:01:03,420
german-speaking podcast import this

00:01:00,230 --> 00:01:06,840
today Frank is going to introduce the

00:01:03,420 --> 00:01:10,890
lip bhutto which makes it very use very

00:01:06,840 --> 00:01:13,560
easy to use AWS from Python please

00:01:10,890 --> 00:01:18,659
welcome Frank Becca with managing the

00:01:13,560 --> 00:01:22,740
cloud with a few lines of Python hi

00:01:18,659 --> 00:01:25,530
everyone thanks for your interest in in

00:01:22,740 --> 00:01:27,420
this talk we already lost for a minute

00:01:25,530 --> 00:01:30,659
so I already have to skip through the

00:01:27,420 --> 00:01:35,220
stuff here um as I'm already was kindly

00:01:30,659 --> 00:01:38,040
introduced I work for AWS since 2013 so

00:01:35,220 --> 00:01:40,140
that's when I have years now i miss the

00:01:38,040 --> 00:01:42,479
operating system group which is based on

00:01:40,140 --> 00:01:45,440
Dresden trended kilometers source of

00:01:42,479 --> 00:01:49,320
where we are right now we desperately

00:01:45,440 --> 00:01:51,330
looking for talent so in case you're

00:01:49,320 --> 00:01:54,390
interested in something this please talk

00:01:51,330 --> 00:01:56,400
to us we have a booth downstairs but we

00:01:54,390 --> 00:01:59,430
also have I mean all over Europe

00:01:56,400 --> 00:02:02,450
locations development centers where we

00:01:59,430 --> 00:02:05,640
have a lot of very interesting work and

00:02:02,450 --> 00:02:09,799
yeah if you especially like to work at

00:02:05,640 --> 00:02:12,950
scale that's probably a good opportunity

00:02:09,799 --> 00:02:20,069
I've been working with Python sins about

00:02:12,950 --> 00:02:23,669
version 2 dot 4 yes I as already

00:02:20,069 --> 00:02:25,190
mentioned we actually put some effort

00:02:23,669 --> 00:02:28,680
into a

00:02:25,190 --> 00:02:30,950
this podcast here a friend of mine

00:02:28,680 --> 00:02:35,940
Marcos who had two talked earlier about

00:02:30,950 --> 00:02:38,970
the swing circle ization and he already

00:02:35,940 --> 00:02:40,950
promised that ya in the next couple of

00:02:38,970 --> 00:02:45,900
weeks there will be some new episodes um

00:02:40,950 --> 00:02:48,960
but back to the to talk the idea for the

00:02:45,900 --> 00:02:50,940
talk I actually got an local little

00:02:48,960 --> 00:02:53,070
Linux conference where I was talking to

00:02:50,940 --> 00:02:55,170
a couple of deep end developers and they

00:02:53,070 --> 00:02:58,170
said look we get those AWS credits and

00:02:55,170 --> 00:03:00,210
actually those guys at least didn't have

00:02:58,170 --> 00:03:02,580
any idea what to do with them which is

00:03:00,210 --> 00:03:05,610
sad because you know it obvious is

00:03:02,580 --> 00:03:08,400
giving the doubt for for them to improve

00:03:05,610 --> 00:03:11,100
davion and I think they can use that so

00:03:08,400 --> 00:03:13,860
we had a little chat and well as many of

00:03:11,100 --> 00:03:16,230
you probably also they didn't fancy to

00:03:13,860 --> 00:03:20,190
click through web applications to launch

00:03:16,230 --> 00:03:22,650
instances and whatnot so they asked I

00:03:20,190 --> 00:03:25,430
mean how can we automate that and they

00:03:22,650 --> 00:03:28,800
also had some pricing background so I

00:03:25,430 --> 00:03:30,870
introduced photos of them and but I had

00:03:28,800 --> 00:03:34,920
the feeling like this is something

00:03:30,870 --> 00:03:38,820
that's also helpful for others before we

00:03:34,920 --> 00:03:41,160
actually talked about about bottom two

00:03:38,820 --> 00:03:43,440
other do the things the first one is you

00:03:41,160 --> 00:03:48,270
know humans like abstractions so this

00:03:43,440 --> 00:03:50,310
would cloud is kind of a password but

00:03:48,270 --> 00:03:51,480
let's say at least different people have

00:03:50,310 --> 00:03:54,240
different opinions whether it really

00:03:51,480 --> 00:03:56,940
means so I defined it for this talk only

00:03:54,240 --> 00:03:59,520
you know maybe in half an hour we'll

00:03:56,940 --> 00:04:02,340
have a different opinion but I mean by

00:03:59,520 --> 00:04:04,860
that is that you have dynamic or in AWS

00:04:02,340 --> 00:04:06,540
speak elastic IT resources that can be

00:04:04,860 --> 00:04:09,960
something like storage that can be some

00:04:06,540 --> 00:04:12,810
like compute so virtual hosts that can

00:04:09,960 --> 00:04:15,660
be networking so if you need a content

00:04:12,810 --> 00:04:18,150
delivery network it's just there waiting

00:04:15,660 --> 00:04:21,450
for you but it also could be some

00:04:18,150 --> 00:04:25,050
routing stuff packet filters what we

00:04:21,450 --> 00:04:28,760
call security groups you can have easily

00:04:25,050 --> 00:04:32,130
databases as i will show you in a sec

00:04:28,760 --> 00:04:33,810
messaging systems and the key here is

00:04:32,130 --> 00:04:36,750
that you can scale up and down those

00:04:33,810 --> 00:04:37,980
things and wires get up sure you have to

00:04:36,750 --> 00:04:41,340
pay more but when you're scared

00:04:37,980 --> 00:04:45,600
the ideas you don't pay anything for all

00:04:41,340 --> 00:04:47,820
this stuff you don't use um and well as

00:04:45,600 --> 00:04:49,530
mentioned previously that has to be

00:04:47,820 --> 00:04:53,400
scriptable because nobody really wants

00:04:49,530 --> 00:04:56,400
to do that all by hand and Python I

00:04:53,400 --> 00:04:59,970
believe this is a perfect language to to

00:04:56,400 --> 00:05:05,940
do so if you know think well I want to

00:04:59,970 --> 00:05:08,070
ride my hundreds s3 uploader there's a

00:05:05,940 --> 00:05:09,690
tool for that already actually also

00:05:08,070 --> 00:05:14,940
Porto comes with a command-line tool for

00:05:09,690 --> 00:05:21,870
that but I would recommend AWS CLI tool

00:05:14,940 --> 00:05:23,970
which is also written in Python and yeah

00:05:21,870 --> 00:05:26,540
there's a different talk for that so you

00:05:23,970 --> 00:05:29,550
know if all you need really is actually

00:05:26,540 --> 00:05:31,980
fits in a simple shell script and maybe

00:05:29,550 --> 00:05:36,710
Bordeaux isn't isn't the thing then you

00:05:31,980 --> 00:05:44,490
might be much faster using that one so

00:05:36,710 --> 00:05:48,810
bottle actually both of us started by

00:05:44,490 --> 00:05:51,210
this guy which garnet he also used to

00:05:48,810 --> 00:05:53,670
work for AWS but he left the company

00:05:51,210 --> 00:05:59,160
unfortunately so now the project is

00:05:53,670 --> 00:06:00,810
managed by by AWS which means we make

00:05:59,160 --> 00:06:05,070
sure that you know the code is up to

00:06:00,810 --> 00:06:07,170
date but actually we also very happy

00:06:05,070 --> 00:06:09,300
about contributions so I checked on

00:06:07,170 --> 00:06:15,290
github last week so we had nearly 400

00:06:09,300 --> 00:06:18,060
contributors to the project we had over

00:06:15,290 --> 00:06:24,510
6000 commits and that is just the github

00:06:18,060 --> 00:06:26,400
history from somewhere in 2010 yeah and

00:06:24,510 --> 00:06:31,320
the name actually comes from this little

00:06:26,400 --> 00:06:34,280
dolphin here which brings me to the

00:06:31,320 --> 00:06:39,030
first example i want to show you so

00:06:34,280 --> 00:06:44,300
maybe many of you are family was the

00:06:39,030 --> 00:06:44,300
starch service called s3 some discharge

00:06:44,449 --> 00:06:53,099
the idea is that you can dump stuff in

00:06:49,439 --> 00:06:55,229
well what we call packets you also could

00:06:53,099 --> 00:06:58,349
think of it like a namespace or a

00:06:55,229 --> 00:07:00,120
directory and there you have to create a

00:06:58,349 --> 00:07:02,580
key that you can have your objects back

00:07:00,120 --> 00:07:04,710
and attaches key you have an object and

00:07:02,580 --> 00:07:09,120
this can be a stream of whatever so it

00:07:04,710 --> 00:07:11,370
can be files or what as I said whatever

00:07:09,120 --> 00:07:14,460
um what we make sure is that you

00:07:11,370 --> 00:07:19,259
actually get your data back so the term

00:07:14,460 --> 00:07:22,189
for that is probability and what AWS

00:07:19,259 --> 00:07:25,289
guarantees you is that you get 99 dot

00:07:22,189 --> 00:07:30,569
999 that's really nine times nine

00:07:25,289 --> 00:07:32,370
percent off chance that you that you

00:07:30,569 --> 00:07:34,589
really get your data back and if you

00:07:32,370 --> 00:07:36,750
look up what your hard drive gives you

00:07:34,589 --> 00:07:39,029
and you do some calculations with some

00:07:36,750 --> 00:07:46,050
raid arrays you busy that's hard to

00:07:39,029 --> 00:07:51,330
reach to reach this number um I dare to

00:07:46,050 --> 00:07:57,330
do live demos I have a couple of iPads

00:07:51,330 --> 00:07:59,189
notebooks prepared i just have to see if

00:07:57,330 --> 00:08:02,490
because we have the promise setting up

00:07:59,189 --> 00:08:04,050
the display here if that works so what

00:08:02,490 --> 00:08:07,050
you basically do is in the first place

00:08:04,050 --> 00:08:13,229
you input bottle can you see the mouse

00:08:07,050 --> 00:08:16,050
pointer good so i execute that then i

00:08:13,229 --> 00:08:19,710
have a little file on my harddrive

00:08:16,050 --> 00:08:22,229
called dolphin epic so what we do here

00:08:19,710 --> 00:08:29,330
is we first try to create a pocket if

00:08:22,229 --> 00:08:32,449
that fails we just connected and then we

00:08:29,330 --> 00:08:35,729
as i mentioned we have to create a key

00:08:32,449 --> 00:08:39,690
for the object we want to upload and

00:08:35,729 --> 00:08:43,940
this key yeah was called Taif in traffic

00:08:39,690 --> 00:08:46,829
and then we just upload the content so

00:08:43,940 --> 00:08:51,720
let's do that this will start here and

00:08:46,829 --> 00:08:54,290
turn to know too so it's done and yeah

00:08:51,720 --> 00:08:56,670
that's some high price magic so we

00:08:54,290 --> 00:08:59,490
generate actually

00:08:56,670 --> 00:09:04,760
we do here is we get this dis bucket

00:08:59,490 --> 00:09:07,620
again and we go through the list of keys

00:09:04,760 --> 00:09:10,520
which is not really so much relevant

00:09:07,620 --> 00:09:13,440
here but actually this line here then

00:09:10,520 --> 00:09:15,810
generates a URL that is valid only for

00:09:13,440 --> 00:09:17,880
one and twenty seconds so what you can

00:09:15,810 --> 00:09:21,150
do is of course you can generate us that

00:09:17,880 --> 00:09:22,680
are valid forever but sometimes you just

00:09:21,150 --> 00:09:25,800
want to share a file and you do not want

00:09:22,680 --> 00:09:28,200
you know that others downloaded too so

00:09:25,800 --> 00:09:31,560
you just want to have but just want to

00:09:28,200 --> 00:09:34,050
have this link being valid for certain

00:09:31,560 --> 00:09:38,670
amount of time and that is what the

00:09:34,050 --> 00:09:42,240
thing does so on earth all goes well it

00:09:38,670 --> 00:09:44,520
does you actually see the signature for

00:09:42,240 --> 00:09:50,730
this for the attached to this you had

00:09:44,520 --> 00:09:53,010
and like be downloaded the file will via

00:09:50,730 --> 00:09:59,880
knows how to create torrent files with

00:09:53,010 --> 00:10:06,000
AWS turned you know between the thing

00:09:59,880 --> 00:10:08,070
that the music industry got it wrong but

00:10:06,000 --> 00:10:13,380
actually a very helpful protocol wait

00:10:08,070 --> 00:10:22,440
and let me do this bigger I prepared it

00:10:13,380 --> 00:10:25,770
already um you may not remember that I

00:10:22,440 --> 00:10:29,850
gave you this link here down here for

00:10:25,770 --> 00:10:33,870
this presentation and all right and this

00:10:29,850 --> 00:10:36,720
of course also comes from is three so

00:10:33,870 --> 00:10:40,140
the only thing you do actually is you

00:10:36,720 --> 00:10:45,930
attach to your street link ? trend and

00:10:40,140 --> 00:10:48,690
what you get is the trunk file so with

00:10:45,930 --> 00:10:51,870
the limitation of the of the violence we

00:10:48,690 --> 00:10:53,640
have here amateur if clients you can

00:10:51,870 --> 00:11:00,380
talk to each other but that would

00:10:53,640 --> 00:11:04,670
improve downloads like this a lot um

00:11:00,380 --> 00:11:06,760
okay next example I talked about this

00:11:04,670 --> 00:11:10,690
message queues

00:11:06,760 --> 00:11:12,190
the service is called as guess what it

00:11:10,690 --> 00:11:16,180
basically does is and there are many

00:11:12,190 --> 00:11:19,240
other implementations of that you just

00:11:16,180 --> 00:11:22,330
dump a message in a queue and somewhere

00:11:19,240 --> 00:11:26,380
else you take it out that's the basic

00:11:22,330 --> 00:11:30,760
concept very useful in distributed

00:11:26,380 --> 00:11:32,290
systems and well as I mentioned there

00:11:30,760 --> 00:11:33,850
are many open-source project that this

00:11:32,290 --> 00:11:36,220
is kind of the same thing but if you

00:11:33,850 --> 00:11:39,340
want to have that scalable if you want

00:11:36,220 --> 00:11:41,470
to have that high availability you will

00:11:39,340 --> 00:11:43,480
find out it's not so simple anymore to

00:11:41,470 --> 00:11:45,970
set it up and actually it also can be

00:11:43,480 --> 00:11:49,270
quite costly if you have to distribute

00:11:45,970 --> 00:11:54,340
your servers and stuff so let's both oh

00:11:49,270 --> 00:12:00,220
it's quite easy to to do that um let me

00:11:54,340 --> 00:12:03,880
go to the ipass notebook again I try to

00:12:00,220 --> 00:12:07,990
make a little bigger so this time we use

00:12:03,880 --> 00:12:12,880
the sks module out of bottle II create a

00:12:07,990 --> 00:12:18,400
connection tour that is always a region

00:12:12,880 --> 00:12:21,370
so we go to the European region from AWS

00:12:18,400 --> 00:12:26,430
here use the service we create a queue

00:12:21,370 --> 00:12:29,590
which we which we label Europe aizen 14

00:12:26,430 --> 00:12:33,720
we set the timeout I come to that in a

00:12:29,590 --> 00:12:40,900
bit and wait just let me execute that

00:12:33,720 --> 00:12:44,320
first one second one and in the next

00:12:40,900 --> 00:12:48,550
block we actually add a message so I'll

00:12:44,320 --> 00:12:51,430
be input the message class in century

00:12:48,550 --> 00:12:55,000
hit one and we set the body as I'm a

00:12:51,430 --> 00:13:00,760
genie in eq and we write that to the to

00:12:55,000 --> 00:13:03,640
the queue we created before so now let's

00:13:00,760 --> 00:13:07,480
assume via somewhere else on a totally

00:13:03,640 --> 00:13:11,260
different system we create a remote Q

00:13:07,480 --> 00:13:15,400
and we get all the messages we print the

00:13:11,260 --> 00:13:19,720
message body and we print the queue

00:13:15,400 --> 00:13:20,420
count so I executed again I mean I

00:13:19,720 --> 00:13:23,930
tested

00:13:20,420 --> 00:13:27,500
that's why solid there yeah of course we

00:13:23,930 --> 00:13:33,950
get the we got the message imagine in eq

00:13:27,500 --> 00:13:36,230
and we also get a cue count of 0 so now

00:13:33,950 --> 00:13:39,680
we wait a little actually this time out

00:13:36,230 --> 00:13:41,990
and we see again how many q's how many

00:13:39,680 --> 00:13:44,449
messages we have in this queue and big

00:13:41,990 --> 00:13:46,790
surprise now it's one so the idea there

00:13:44,449 --> 00:13:48,500
is that if for whatever reason your

00:13:46,790 --> 00:13:50,540
service that was actually dealing with a

00:13:48,500 --> 00:13:53,510
message and receiving I don't know a

00:13:50,540 --> 00:13:55,670
chunk of Jason and doing something that

00:13:53,510 --> 00:13:58,399
failed for whatever reason crashed or

00:13:55,670 --> 00:14:01,339
then you do not actually want your

00:13:58,399 --> 00:14:04,279
message to be gone forever you want

00:14:01,339 --> 00:14:06,620
actually service then when it dealt with

00:14:04,279 --> 00:14:09,279
a message to delete it and that's

00:14:06,620 --> 00:14:12,589
actually the last block so you just say

00:14:09,279 --> 00:14:18,800
again you get the messages you to write

00:14:12,589 --> 00:14:21,079
over them and you delete them then so

00:14:18,800 --> 00:14:29,329
you get for one deleted message to true

00:14:21,079 --> 00:14:33,470
and next time it's empty that was

00:14:29,329 --> 00:14:41,540
example tool sks now let's launch a

00:14:33,470 --> 00:14:45,350
virtual instance um that brings me to

00:14:41,540 --> 00:14:49,540
the next iPad notebook again be the same

00:14:45,350 --> 00:14:49,540
import the ec2 module out of bottle

00:14:50,019 --> 00:14:58,130
let's actually do it that you also see

00:14:54,649 --> 00:14:59,839
which kind of help photo is that you

00:14:58,130 --> 00:15:04,459
know you do not have to generate all

00:14:59,839 --> 00:15:08,449
those a PE xml stuff and you as for

00:15:04,459 --> 00:15:10,819
yourself this time we enable logging so

00:15:08,449 --> 00:15:15,130
many basic do is I am put logging and

00:15:10,819 --> 00:15:19,040
set the lock love it turn to the back

00:15:15,130 --> 00:15:24,709
which boat will pick up I again create a

00:15:19,040 --> 00:15:27,199
connection now I have to bugging and

00:15:24,709 --> 00:15:29,449
boto actually tells me that found the

00:15:27,199 --> 00:15:32,150
conflict I didn't touch that there are

00:15:29,449 --> 00:15:36,570
several ways how I can put in your

00:15:32,150 --> 00:15:39,390
AWS keys and in case some of that should

00:15:36,570 --> 00:15:43,650
show up I have temporary keys for this

00:15:39,390 --> 00:15:48,510
presentation so in case you want to

00:15:43,650 --> 00:15:50,550
reuse them don't drive so and actually

00:15:48,510 --> 00:15:55,830
all it takes two to actually run this

00:15:50,550 --> 00:16:00,600
instance now is this command on this

00:15:55,830 --> 00:16:04,200
line I have to say this parameter first

00:16:00,600 --> 00:16:07,230
parameter is actually image we want to

00:16:04,200 --> 00:16:10,650
launch so the term days army Amazon

00:16:07,230 --> 00:16:13,230
machine image and that really defines

00:16:10,650 --> 00:16:16,260
what you actually get if you get a Linux

00:16:13,230 --> 00:16:18,300
system what linux system what's being

00:16:16,260 --> 00:16:20,610
installed there so as I mentioned

00:16:18,300 --> 00:16:22,380
earlier oh did I forget it probably

00:16:20,610 --> 00:16:24,120
forgot it so we actually have our own

00:16:22,380 --> 00:16:26,340
you know solution may make sure that

00:16:24,120 --> 00:16:28,590
runs best on AWS it's called Amazon

00:16:26,340 --> 00:16:38,490
linux but you also can have ratted to

00:16:28,590 --> 00:16:41,490
the Debian over not into so this thing

00:16:38,490 --> 00:16:44,040
here to notice is you that's actually

00:16:41,490 --> 00:16:47,780
all this thing now bottle generates for

00:16:44,040 --> 00:16:50,520
us to launch it so you will have to I

00:16:47,780 --> 00:16:54,020
come to availability sounds in another

00:16:50,520 --> 00:16:57,450
in a bit but they have a kernel ID and

00:16:54,020 --> 00:17:02,610
well security groups and all that the

00:16:57,450 --> 00:17:05,430
architecture root devices we don't

00:17:02,610 --> 00:17:08,720
really have to have the time to to get

00:17:05,430 --> 00:17:11,579
into that but the thing now is since

00:17:08,720 --> 00:17:14,010
that thing is launched in re a couple of

00:17:11,579 --> 00:17:15,839
seconds and and then actually the system

00:17:14,010 --> 00:17:21,089
boots and that is kind of the handoff

00:17:15,839 --> 00:17:23,189
from us to you as the customer when we

00:17:21,089 --> 00:17:24,930
do not touch it anymore and when we

00:17:23,189 --> 00:17:27,000
don't really know if your instance

00:17:24,930 --> 00:17:28,590
really boots up or not so there's a

00:17:27,000 --> 00:17:32,220
service for that money to that of course

00:17:28,590 --> 00:17:33,740
but it's not default so what you get

00:17:32,220 --> 00:17:36,630
back in that case is a so-called

00:17:33,740 --> 00:17:38,640
reservation ID which you can use

00:17:36,630 --> 00:17:42,050
actually then later on to see if your

00:17:38,640 --> 00:17:45,690
instance is turned to the state running

00:17:42,050 --> 00:17:48,360
and which instance ID it got

00:17:45,690 --> 00:17:51,450
so every virtual host or instance the

00:17:48,360 --> 00:17:54,990
same thing gets an ID of course that you

00:17:51,450 --> 00:18:01,220
can find it back and that is what will

00:17:54,990 --> 00:18:01,220
change you know slow angry

00:18:14,570 --> 00:18:26,240
right if you can yeah that's why I don't

00:18:23,480 --> 00:18:30,470
do live demos um by the natural end

00:18:26,240 --> 00:18:33,700
slides in that example here I actually

00:18:30,470 --> 00:18:37,309
get back four of those instances and

00:18:33,700 --> 00:18:39,980
yeah and once I have the object for this

00:18:37,309 --> 00:18:42,200
instance I have a couple of methods like

00:18:39,980 --> 00:18:46,580
I want to have the public the nest name

00:18:42,200 --> 00:18:49,429
or as you see later on I also can

00:18:46,580 --> 00:18:57,490
terminate those instances then i'll

00:18:49,429 --> 00:19:03,080
check them or whatever let for this

00:18:57,490 --> 00:19:05,720
right if I actually consider the next

00:19:03,080 --> 00:19:09,200
example I have to introduce a few

00:19:05,720 --> 00:19:13,970
concepts the soap so called virtual

00:19:09,200 --> 00:19:18,289
private cloud which roughly could say as

00:19:13,970 --> 00:19:20,990
a LAN but just in the cloud so I already

00:19:18,289 --> 00:19:24,500
talked about regions or region is really

00:19:20,990 --> 00:19:28,750
you know data centers at a geographical

00:19:24,500 --> 00:19:33,049
point that is divided into so-called

00:19:28,750 --> 00:19:37,250
availability zones which means if you

00:19:33,049 --> 00:19:38,750
want to have a available service you

00:19:37,250 --> 00:19:41,419
will launch in different availability

00:19:38,750 --> 00:19:44,659
zones and if one goes down and yeah this

00:19:41,419 --> 00:19:46,580
and sure that the other one will still

00:19:44,659 --> 00:19:52,039
be up and running that's the idea behind

00:19:46,580 --> 00:19:54,889
that and and then you you want to have

00:19:52,039 --> 00:19:57,440
Eddie's in a VPC you want to have your

00:19:54,889 --> 00:20:01,370
own network in there you do not want to

00:19:57,440 --> 00:20:05,059
see traffic from our management or from

00:20:01,370 --> 00:20:08,029
other customers or whatever and

00:20:05,059 --> 00:20:11,360
therefore you basically launch with

00:20:08,029 --> 00:20:15,080
private IP addresses you have subnets in

00:20:11,360 --> 00:20:18,889
there the subnets of availability zone

00:20:15,080 --> 00:20:20,929
and if you want to have those instances

00:20:18,889 --> 00:20:24,049
exposed to the internet you can always

00:20:20,929 --> 00:20:27,510
attach a public IP address and they're

00:20:24,049 --> 00:20:30,330
visible again well you can go through

00:20:27,510 --> 00:20:31,710
is internet gateway and router and you

00:20:30,330 --> 00:20:35,360
know there are different things like the

00:20:31,710 --> 00:20:37,980
old branches and stuff you can use here

00:20:35,360 --> 00:20:43,580
it's important for what I want to do now

00:20:37,980 --> 00:20:48,090
so this example actually shows how to

00:20:43,580 --> 00:20:53,160
just launch 10 of those hosts and

00:20:48,090 --> 00:20:55,670
instances install this CC and all the

00:20:53,160 --> 00:20:59,010
stuff you need to build a linux kernel

00:20:55,670 --> 00:21:00,930
set up this CC and then this CC has a

00:20:59,010 --> 00:21:03,240
functionality we're actually can

00:21:00,930 --> 00:21:06,180
broadcast and find other other notes and

00:21:03,240 --> 00:21:07,950
then you can compile I'm afraid we do

00:21:06,180 --> 00:21:10,620
not have the time to really show that

00:21:07,950 --> 00:21:16,290
because the launches and all that takes

00:21:10,620 --> 00:21:19,590
a little so let me just show you quickly

00:21:16,290 --> 00:21:24,330
oh great now firefox doesn't want to

00:21:19,590 --> 00:21:27,840
work I'll back up what you basically do

00:21:24,330 --> 00:21:29,760
is that here is important this time you

00:21:27,840 --> 00:21:32,610
say I don't want to have just one

00:21:29,760 --> 00:21:37,260
instance I want to have 10 that's this

00:21:32,610 --> 00:21:39,750
thing you say explicitly which instance

00:21:37,260 --> 00:21:43,710
type you want to have so these three XO

00:21:39,750 --> 00:21:45,330
it has a little bit of compute power you

00:21:43,710 --> 00:21:48,360
have to give a subnet I talked about it

00:21:45,330 --> 00:21:51,210
earlier we want to have monitoring this

00:21:48,360 --> 00:21:55,350
time and yeah well it's then you get a

00:21:51,210 --> 00:21:59,360
couple of instances I used fabric to you

00:21:55,350 --> 00:21:59,360
know ssh into them install the stuff

00:21:59,390 --> 00:22:10,790
start the CC but again done with fabric

00:22:06,630 --> 00:22:15,420
I actually kick off the the compile and

00:22:10,790 --> 00:22:17,970
after after a little less than two

00:22:15,420 --> 00:22:19,410
minutes the whole thing was over and I

00:22:17,970 --> 00:22:26,070
actually can shut down everything and

00:22:19,410 --> 00:22:28,350
and done um I very quickly skim through

00:22:26,070 --> 00:22:30,990
the last example where you could say

00:22:28,350 --> 00:22:32,790
well but maybe ten instances a little

00:22:30,990 --> 00:22:35,430
too much so I want to have this more

00:22:32,790 --> 00:22:39,360
flexible let's say you have a compiler

00:22:35,430 --> 00:22:40,240
service or something the key there's

00:22:39,360 --> 00:22:46,030
enough

00:22:40,240 --> 00:22:49,300
to be called auto scale but it basically

00:22:46,030 --> 00:22:52,450
is you have a so-called launch

00:22:49,300 --> 00:22:54,730
configuration where you define you know

00:22:52,450 --> 00:22:57,150
the instant size of your virtual hosts

00:22:54,730 --> 00:23:00,040
which are we want to use and all that

00:22:57,150 --> 00:23:03,550
you need a so called auto scaling group

00:23:00,040 --> 00:23:07,600
which defines the availability zones for

00:23:03,550 --> 00:23:11,679
instance the minimal size of your of

00:23:07,600 --> 00:23:14,020
your cluster the maximum size and yeah

00:23:11,679 --> 00:23:16,780
this launch configuration that is all

00:23:14,020 --> 00:23:18,910
started when you keep this off you could

00:23:16,780 --> 00:23:20,320
imagine that now there are four

00:23:18,910 --> 00:23:22,059
instances been launched and that is

00:23:20,320 --> 00:23:25,179
exactly what you see on the bottom of

00:23:22,059 --> 00:23:35,650
the slide here was the get activities

00:23:25,179 --> 00:23:39,420
method yeah then you have to have a

00:23:35,650 --> 00:23:43,470
scaling policy for scaling up and down

00:23:39,420 --> 00:23:47,260
you have to kind of triggers or alarms

00:23:43,470 --> 00:23:50,080
for that and you that's done here in

00:23:47,260 --> 00:23:54,730
those alarms you give it a threshold for

00:23:50,080 --> 00:23:56,140
cpu utilization which have to which has

00:23:54,730 --> 00:23:58,690
to trigger for a certain amount of time

00:23:56,140 --> 00:24:01,980
so that's twice 60 seconds and if this

00:23:58,690 --> 00:24:04,390
triggers then it actually scales up by

00:24:01,980 --> 00:24:06,150
let's this parameter up here by one

00:24:04,390 --> 00:24:10,780
instance and this would go on and on

00:24:06,150 --> 00:24:12,490
until you reach the eight instances all

00:24:10,780 --> 00:24:18,059
right and by to shut this whole thing

00:24:12,490 --> 00:24:22,330
down again three lines of Python well

00:24:18,059 --> 00:24:26,470
I'm through my slides actually for all

00:24:22,330 --> 00:24:31,860
the services you see here photo is the

00:24:26,470 --> 00:24:31,860
API is the tool to use thank

00:24:36,940 --> 00:24:45,500
we got thank you thank you a lot fun we

00:24:40,190 --> 00:24:51,500
got time for one very quick question one

00:24:45,500 --> 00:24:54,050
question okay then I'll give you a given

00:24:51,500 --> 00:24:56,810
AI I may I ask a quick question yet how

00:24:54,050 --> 00:25:00,250
long would it take me to set up a

00:24:56,810 --> 00:25:02,900
service running on boto from scratch

00:25:00,250 --> 00:25:05,240
well it's really well you have to click

00:25:02,900 --> 00:25:07,340
on AWS account which means some

00:25:05,240 --> 00:25:12,650
verification that you are you acclaim

00:25:07,340 --> 00:25:14,450
you be and from there you get an a key

00:25:12,650 --> 00:25:16,820
so you have to configure both oh that's

00:25:14,450 --> 00:25:20,000
with just two swings or two keys or you

00:25:16,820 --> 00:25:22,280
have to give it as a shy viable or

00:25:20,000 --> 00:25:25,870
whatever and then yeah you use one of

00:25:22,280 --> 00:25:28,580
those lines here and you up and running

00:25:25,870 --> 00:25:32,290
okay thank you a lot let's thank the

00:25:28,580 --> 00:25:32,290

YouTube URL: https://www.youtube.com/watch?v=JJUY7EEpFj8


