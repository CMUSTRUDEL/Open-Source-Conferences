Title: Richard Wall - Twisted Names: DNS Building Blocks for Python Programmers
Publication date: 2015-04-18
Playlist: EuroPython 2014
Description: 
	Richard Wall - Twisted Names: DNS Building Blocks for Python Programmers
[EuroPython 2014]
[25 July 2014]

In this talk I will report on my efforts to update the DNS components of Twisted
and discuss some of the things I've learned along the way. I'll demonstrate the
EDNS0, DNSSEC and DANE client support which I have been working on and show how
these new Twisted Names components can be glued together to build novel DNS
servers and clients.
Twisted is an event-driven networking engine written in Python and
licensed under the open source MIT license.  It is a platform for
developing internet applications.

-----

# Description

My talk will consist of four main sections. Given the 30 minute time constraint,
I may shorten or drop the two introductory parts in favour of the narrative and
demonstration of interesting new APIs and code examples in the final two
parts. My experience of delivering a similar talk at PyconUK 2013 is that those
are the parts that will most interest the audience and prompt most audience
questions.

Here are my proposed sections with rough time allocations and descriptions:

## Introducing Twisted Names (0-5)

Twisted includes a comprehensive set of DNS components, collectively
known as Twisted Names.

-   &lt;https://twistedmatrix.com/trac/wiki/TwistedNames&gt;

I will begin the talk with a quick introduction to Twisted Names and its
capabilities, including one or two simple code examples.

## Introducing My Project (0-5)

With generous funding from The NLnet Foundation I am adding EDNS(0) and DNSSEC
client support in Twisted Names, including full DNSSEC verification and DANE
support.

In the talk I will quickly summarise the steps taken and lessons learned in
securing that funding, and hope to encourage the audience to seek funding to
support there own pet OSS projects.

## What's New in Twisted Names / Project Progress Report (10)

My project plan is divided into the following broad milestones.

1.  EDNS(0)

    1.  OPT record

    2.  Extended Message object with additional EDNS(0) items

    3.  EDNS Client

2.  RRSET handling

    1.  Canonical Form and Order of Resource Records

    2.  Receiving RRSETs

3.  DNSSEC

    1.  New DNSSEC Records and Lookup Methods

    2.  Security-aware Non-validating Client

    3.  Validating Client

4.  DANE

    1.  A twistd dns authoritative server capable of loading and serving TLSA
        records.

    2.  A Twisted web client Agent wrapper which performs TLSA lookup and
        verification of a server certificate.

    3.  A HostnameClientEndpoint which performs TLSA lookup and verification of a
        server certificate.

    4.  A command line tool for debugging TLSA records and for verifying a
        certificate file against a domain name.

    5.  A TLSA Record class for encoding and decoding TLSA bytes.

    6.  A TLSA lookup method which accepts port, protocol and hostname and constructs
        a suitable TLSA domain name.

In the talk I will quickly outline these goals, report on my progress so far,
and show running code examples to demonstrate the new APIs.

## Future Developments (5)

The aim of my project is to lay foundations that will eventually allow
end-to-end DNSSEC verification in all the core Twisted networking components,
including Twisted Conch (SSH), Mail (SMTP, POP3), Perspective Broker (RPC), Web
(HTTP, XML-RPC, SOAP), Words (XMPP, IRC).

Additionally I hope that this foundation work will encourage the development of
end-to-end DNSSEC verification in many of the Open Source and commercial
projects built on top of Twisted.

I will end the talk by outlining these exciting possibilities, and demonstrate
some code examples that illustrate these possibilities.

## Q & A (5-10)

I'm determined to leave at least five minutes at the end for audience
questions. At PyconUK 2013 I was frustrated because I ran out of time and ended
up answering questions outside the lecture theatre; questions which would have
been interesting to the whole audience.
Captions: 
	00:00:14,830 --> 00:00:22,600
hey my name's John pinner I and by team

00:00:18,520 --> 00:00:25,810
organized pycon UK and Europe ithan 2009

00:00:22,600 --> 00:00:29,020
2010 we did one of our team members is

00:00:25,810 --> 00:00:39,699
Richard is going to tell us all about

00:00:29,020 --> 00:00:43,780
DNS and twisted thanks John thank you

00:00:39,699 --> 00:00:46,150
thank you all for coming yes so my name

00:00:43,780 --> 00:00:47,260
is Richard wall and I'll start by

00:00:46,150 --> 00:00:51,400
telling you a little bit about me I

00:00:47,260 --> 00:00:53,830
don't de spend too long I'm a Python

00:00:51,400 --> 00:00:55,390
programmer from the UK and as John says

00:00:53,830 --> 00:00:58,710
I'm involved in the pike on UK

00:00:55,390 --> 00:01:01,000
conference as an occasional speaker and

00:00:58,710 --> 00:01:02,920
my most important job there is to

00:01:01,000 --> 00:01:06,220
organized the conference dinner table

00:01:02,920 --> 00:01:09,580
plan I run that I maintain the table

00:01:06,220 --> 00:01:11,520
plan software i'm also an enthusiast a

00:01:09,580 --> 00:01:13,930
real enthusiast for twisted which is a

00:01:11,520 --> 00:01:16,900
framework which hopefully you've all

00:01:13,930 --> 00:01:20,560
heard of it's one of the oldest python

00:01:16,900 --> 00:01:23,110
frameworks and I have become over the

00:01:20,560 --> 00:01:24,490
last year a contributor and a quarter

00:01:23,110 --> 00:01:26,890
core contributor eyes because I could

00:01:24,490 --> 00:01:29,230
call myself a core contributor and I

00:01:26,890 --> 00:01:31,810
guess the de facto maintainer of twisted

00:01:29,230 --> 00:01:33,550
names which is the component of twisted

00:01:31,810 --> 00:01:36,600
which I'm going to be talking to you

00:01:33,550 --> 00:01:38,860
today about and I'm currently working in

00:01:36,600 --> 00:01:43,360
Bristol in the UK for a company called

00:01:38,860 --> 00:01:46,180
cluster HQ where we're working on some

00:01:43,360 --> 00:01:50,710
software to manage the deployment and

00:01:46,180 --> 00:01:52,659
the the state of docker containers it's

00:01:50,710 --> 00:01:54,610
a really interesting open source project

00:01:52,659 --> 00:01:56,110
that we're working on called Flocka so

00:01:54,610 --> 00:01:57,880
you should look that up you're

00:01:56,110 --> 00:01:59,470
interested any of those technologies I'm

00:01:57,880 --> 00:02:02,640
working on that with some of the twisted

00:01:59,470 --> 00:02:06,880
founders which is super exciting for me

00:02:02,640 --> 00:02:09,700
ok um well I haven't got long this talk

00:02:06,880 --> 00:02:13,690
and I when I did this in in the UK last

00:02:09,700 --> 00:02:15,549
year I / / underestimated how long it

00:02:13,690 --> 00:02:17,650
was going to take and so I've cut out a

00:02:15,549 --> 00:02:19,599
lot of stuff it's going to be a much

00:02:17,650 --> 00:02:21,480
shorter version if anyone saw the talk

00:02:19,599 --> 00:02:24,040
in the UK

00:02:21,480 --> 00:02:25,720
I'm going to talk less about myself less

00:02:24,040 --> 00:02:28,300
about the history of twisted and more

00:02:25,720 --> 00:02:30,640
about the technology in twisted names

00:02:28,300 --> 00:02:35,740
and also the project that I've been

00:02:30,640 --> 00:02:39,880
working on recently to implement a dns

00:02:35,740 --> 00:02:42,040
and dns that support in twisted um i'm

00:02:39,880 --> 00:02:44,680
going to start with an overview of dns

00:02:42,040 --> 00:02:46,900
but very short or explain why in a

00:02:44,680 --> 00:02:50,170
minute i'll give you a tour of the

00:02:46,900 --> 00:02:51,550
components in twisted names i'll

00:02:50,170 --> 00:02:54,040
hopefully give you some interesting

00:02:51,550 --> 00:02:56,950
examples some some quite quite

00:02:54,040 --> 00:02:59,140
interesting examples and i'll give you a

00:02:56,950 --> 00:03:00,730
status report on this project and then i

00:02:59,140 --> 00:03:02,560
hope to have some time at the end to

00:03:00,730 --> 00:03:07,720
answer any questions i hope there will

00:03:02,560 --> 00:03:10,060
be some questions so i had planned to

00:03:07,720 --> 00:03:13,420
give us an overview of the domain name

00:03:10,060 --> 00:03:15,220
system but i don't think i'm going to

00:03:13,420 --> 00:03:17,830
have time and i don't think i need to

00:03:15,220 --> 00:03:20,140
anyway because you've probably already

00:03:17,830 --> 00:03:23,200
been to a talk on wednesday by lynn root

00:03:20,140 --> 00:03:26,110
who explained really clearly about the

00:03:23,200 --> 00:03:29,049
domain name system and it's an its

00:03:26,110 --> 00:03:31,480
structure its operation and terminology

00:03:29,049 --> 00:03:33,250
and I think some of the software that

00:03:31,480 --> 00:03:37,060
you may be familiar with for serving in

00:03:33,250 --> 00:03:38,799
and sending DNS requests so she did a

00:03:37,060 --> 00:03:40,450
much better job than I probably can at

00:03:38,799 --> 00:03:42,250
explaining it and so what I'm going to

00:03:40,450 --> 00:03:45,100
say is you should just go and watch her

00:03:42,250 --> 00:03:46,959
talk on YouTube it's a great talk I

00:03:45,100 --> 00:03:49,480
didn't make it to the talk i wish i had

00:03:46,959 --> 00:03:52,269
been able to but i watched it last night

00:03:49,480 --> 00:03:54,280
and and I'm glad she did it because it

00:03:52,269 --> 00:03:56,200
means i can to get to the interesting

00:03:54,280 --> 00:03:57,670
bits out the twisted bits that i want to

00:03:56,200 --> 00:04:00,640
talk about so i'm going to skip this

00:03:57,670 --> 00:04:07,880
skip this get this get this get this

00:04:00,640 --> 00:04:10,580
skip this and somewhere

00:04:07,880 --> 00:04:13,250
I might talk it might talk briefly about

00:04:10,580 --> 00:04:15,500
the software that you maybe you may be

00:04:13,250 --> 00:04:17,209
familiar with next just as a contrast to

00:04:15,500 --> 00:04:20,090
the twisted name system which I'll

00:04:17,209 --> 00:04:21,770
explain in a minute and so probably

00:04:20,090 --> 00:04:25,370
you're all you're all familiar with find

00:04:21,770 --> 00:04:27,110
which is the original dns server i think

00:04:25,370 --> 00:04:30,200
that's true andrew street say it's the

00:04:27,110 --> 00:04:32,900
original dns server it's a it's an

00:04:30,200 --> 00:04:35,030
authoritative dns server and a recursive

00:04:32,900 --> 00:04:38,120
DNS server and a forwarding dns server

00:04:35,030 --> 00:04:40,010
and all sorts of other gubbins that are

00:04:38,120 --> 00:04:42,560
mixed in with it and that's part of its

00:04:40,010 --> 00:04:43,940
problem it tries to do too much it's

00:04:42,560 --> 00:04:45,620
feature-packed but it's over

00:04:43,940 --> 00:04:50,920
complicating it's full of

00:04:45,620 --> 00:04:53,210
vulnerabilities this idea one binary to

00:04:50,920 --> 00:04:55,700
satisfy all the different dns

00:04:53,210 --> 00:04:58,460
requirements dns server requirements is

00:04:55,700 --> 00:05:00,470
mistake which has been learned and

00:04:58,460 --> 00:05:03,680
implemented better in another piece of

00:05:00,470 --> 00:05:06,140
software called power dns so if you're

00:05:03,680 --> 00:05:08,000
using bind then i recommend you go and

00:05:06,140 --> 00:05:11,870
look at Power DNS which is a much more

00:05:08,000 --> 00:05:15,440
modern much better designed a much more

00:05:11,870 --> 00:05:17,210
secure dns server and it's it's actually

00:05:15,440 --> 00:05:19,760
more powerful than bind in a way because

00:05:17,210 --> 00:05:23,060
it has a much cleaner way of interfacing

00:05:19,760 --> 00:05:28,990
with a database back-end for example and

00:05:23,060 --> 00:05:31,430
it also splits the the duty of

00:05:28,990 --> 00:05:33,860
authoritative server from the duty of

00:05:31,430 --> 00:05:38,300
recursive DNS server which is important

00:05:33,860 --> 00:05:40,220
to avoid cache poisoning attacks other

00:05:38,300 --> 00:05:42,950
servers you may have come across our

00:05:40,220 --> 00:05:46,400
unbound and NSD I mentioned those

00:05:42,950 --> 00:05:48,080
because they are written by their

00:05:46,400 --> 00:05:50,000
written by an organization that I've

00:05:48,080 --> 00:05:51,410
been involved with this project that I'm

00:05:50,000 --> 00:05:53,690
going to tell you about an owl neck

00:05:51,410 --> 00:05:56,750
loves and again they are much more

00:05:53,690 --> 00:05:59,300
modern and much more secure dns service

00:05:56,750 --> 00:06:02,270
dedicated to unbound is dedicated to

00:05:59,300 --> 00:06:05,180
doing to answering recursive requests

00:06:02,270 --> 00:06:10,460
NSD is dedicated to answering or third

00:06:05,180 --> 00:06:12,770
steve requests okay so let's now get to

00:06:10,460 --> 00:06:19,310
the the subject to this talk twisted

00:06:12,770 --> 00:06:21,350
names so twisted names is its kind of as

00:06:19,310 --> 00:06:23,630
old as twisted itself it's

00:06:21,350 --> 00:06:29,240
its celebrating its 13th birthday this

00:06:23,630 --> 00:06:31,250
year it probably started life as you may

00:06:29,240 --> 00:06:33,830
or may not be able to see from this this

00:06:31,250 --> 00:06:36,260
check in this is the first change set

00:06:33,830 --> 00:06:39,050
we're twisted names was first first

00:06:36,260 --> 00:06:41,690
landed it was probably introduced as a

00:06:39,050 --> 00:06:45,860
sort of demo of a new unit Lee what was

00:06:41,690 --> 00:06:49,700
then new UDP transports at facility in

00:06:45,860 --> 00:06:53,300
twisted I did a little bit of digging

00:06:49,700 --> 00:06:55,700
and found the commits from the beginning

00:06:53,300 --> 00:06:58,190
of twisted names life and some of the

00:06:55,700 --> 00:07:03,170
newer commits that I've been working on

00:06:58,190 --> 00:07:04,730
and Julian's worked on a bit I see so

00:07:03,170 --> 00:07:07,040
you can see it was so originally written

00:07:04,730 --> 00:07:09,770
by a guy called ma she's odd car back in

00:07:07,040 --> 00:07:12,110
2001 and that was in the good old days

00:07:09,770 --> 00:07:14,270
that when twisted had a can of Wild West

00:07:12,110 --> 00:07:18,620
development process everyone was just

00:07:14,270 --> 00:07:20,390
committing randomly to trunk and I guess

00:07:18,620 --> 00:07:23,710
they didn't they hadn't yet implemented

00:07:20,390 --> 00:07:27,620
what is now called the ultimate quality

00:07:23,710 --> 00:07:29,930
development system which is a talk in

00:07:27,620 --> 00:07:31,970
its own right it's a way of it's the way

00:07:29,930 --> 00:07:33,670
it's the way we develop in twisted so

00:07:31,970 --> 00:07:36,200
we're developing in branches and

00:07:33,670 --> 00:07:38,120
ensuring that every change that gets

00:07:36,200 --> 00:07:40,580
merged to trunk has been code reviewed

00:07:38,120 --> 00:07:42,890
that it's fully tested that the code is

00:07:40,580 --> 00:07:45,620
fully covered and there's an audit trail

00:07:42,890 --> 00:07:48,140
showing between the ticket in the code

00:07:45,620 --> 00:07:49,640
that lands in trunk but you should go

00:07:48,140 --> 00:07:50,780
and read about the ultimate quality

00:07:49,640 --> 00:07:55,430
development system if you haven't

00:07:50,780 --> 00:07:57,380
already so twisted names was it was kind

00:07:55,430 --> 00:08:00,560
of actively maintained to start with

00:07:57,380 --> 00:08:02,090
then over the years it kind of I think

00:08:00,560 --> 00:08:05,570
it's true to say it's been neglected a

00:08:02,090 --> 00:08:08,690
bit and then I started getting involved

00:08:05,570 --> 00:08:10,280
about two years ago and I had a

00:08:08,690 --> 00:08:11,870
background in dearness so I thought

00:08:10,280 --> 00:08:16,090
that's that's part of twisted where I

00:08:11,870 --> 00:08:19,580
could help out and I've been busily

00:08:16,090 --> 00:08:23,320
updating the documentation adding test

00:08:19,580 --> 00:08:26,360
coverage adding some new examples to

00:08:23,320 --> 00:08:28,400
demonstrate how to use twisted names and

00:08:26,360 --> 00:08:31,190
you'll find all of those on the on the

00:08:28,400 --> 00:08:34,250
new read the docs documentation website

00:08:31,190 --> 00:08:37,070
I'll link to that in a minute

00:08:34,250 --> 00:08:38,780
so yeah like the rest of twisted the

00:08:37,070 --> 00:08:42,229
twisted names package is really well

00:08:38,780 --> 00:08:44,810
tested it's got a comprehensive unit

00:08:42,229 --> 00:08:49,310
tests which are run using a tool called

00:08:44,810 --> 00:08:52,100
trial which is a great test runner it

00:08:49,310 --> 00:08:53,720
then the unit tests in twisted names if

00:08:52,100 --> 00:08:55,850
you care to read the code and probably

00:08:53,720 --> 00:08:57,860
not the most sophisticated unit tests in

00:08:55,850 --> 00:09:00,650
the world but that's a reflection of the

00:08:57,860 --> 00:09:03,770
way these testing techniques improve

00:09:00,650 --> 00:09:06,290
over time twisted is is it is a as I

00:09:03,770 --> 00:09:09,860
said earlier it's a it's over 13 years

00:09:06,290 --> 00:09:11,420
old so if you if you do go and start

00:09:09,860 --> 00:09:15,200
hacking on it you'll find that there are

00:09:11,420 --> 00:09:18,440
bits of it which I kind of hard to read

00:09:15,200 --> 00:09:20,740
hard to look at without yeah how to look

00:09:18,440 --> 00:09:23,780
at without to bursting into tears but

00:09:20,740 --> 00:09:25,880
then again you have to recognize this

00:09:23,780 --> 00:09:27,320
this this history of the project and

00:09:25,880 --> 00:09:29,150
it's actually quite interesting to see

00:09:27,320 --> 00:09:30,830
how particular developers who have been

00:09:29,150 --> 00:09:32,870
with twisted from the very start have

00:09:30,830 --> 00:09:35,420
changed their ideas and their approaches

00:09:32,870 --> 00:09:36,860
to things like testing I think that

00:09:35,420 --> 00:09:38,750
would be another interesting talk in its

00:09:36,860 --> 00:09:40,430
own right it's interesting from the

00:09:38,750 --> 00:09:43,550
point of view of a new contributor who

00:09:40,430 --> 00:09:45,350
has to deal with this old style code in

00:09:43,550 --> 00:09:47,390
the new style code and understand how to

00:09:45,350 --> 00:09:51,050
add what's the current best way of doing

00:09:47,390 --> 00:09:53,140
this developing for twisted and so we've

00:09:51,050 --> 00:09:56,120
got plenty of unit tests and we've got

00:09:53,140 --> 00:09:58,730
reasonable coverage of the code some of

00:09:56,120 --> 00:10:00,310
the some of the modules I don't know

00:09:58,730 --> 00:10:03,290
whether you can see it on the slide are

00:10:00,310 --> 00:10:06,020
are not very well covered but those are

00:10:03,290 --> 00:10:08,780
areas which I'm working on now modules

00:10:06,020 --> 00:10:10,430
such as the authoritative DNS server and

00:10:08,780 --> 00:10:12,770
the secondary DNS server and not

00:10:10,430 --> 00:10:15,920
particularly well covered and in fact

00:10:12,770 --> 00:10:18,290
that's that's the rid its rug ugly head

00:10:15,920 --> 00:10:20,480
lately in a bug that's been discovered

00:10:18,290 --> 00:10:23,720
in the secondary name server in the

00:10:20,480 --> 00:10:25,670
latest release of twisted it's partly

00:10:23,720 --> 00:10:28,790
down to a lack of test coverage this bug

00:10:25,670 --> 00:10:31,040
wasn't i wasn't noticed earlier and it's

00:10:28,790 --> 00:10:34,010
partly down to the pod the old style

00:10:31,040 --> 00:10:37,370
design of that part of the of the

00:10:34,010 --> 00:10:42,740
package but hopefully I and others are

00:10:37,370 --> 00:10:44,000
going to improve that over time twisting

00:10:42,740 --> 00:10:46,280
names wasn't particularly well

00:10:44,000 --> 00:10:47,480
documented but that's improving as I

00:10:46,280 --> 00:10:49,820
said earlier I

00:10:47,480 --> 00:10:52,120
in working quite hard on improving the

00:10:49,820 --> 00:10:54,380
documentation for twisted names and

00:10:52,120 --> 00:10:56,630
twisted as a whole is better documented

00:10:54,380 --> 00:10:58,310
these days you can you can go like most

00:10:56,630 --> 00:11:01,250
of the projects these days and read the

00:10:58,310 --> 00:11:04,399
docs on read the docs and it's nicely

00:11:01,250 --> 00:11:07,430
presented and nicely indexed and easily

00:11:04,399 --> 00:11:09,079
searchable so I recommend if if you're

00:11:07,430 --> 00:11:11,360
interested that you go and read the

00:11:09,079 --> 00:11:12,949
documentation for twisted names and for

00:11:11,360 --> 00:11:14,870
the rest of twisted because it's it's

00:11:12,949 --> 00:11:18,860
much easier these days to navigate the

00:11:14,870 --> 00:11:21,920
documentation so have i doing for time

00:11:18,860 --> 00:11:23,899
and running out of time I'm going over

00:11:21,920 --> 00:11:25,940
to bring out the time so let's crack on

00:11:23,899 --> 00:11:28,459
we'll have a look now the the different

00:11:25,940 --> 00:11:30,649
modules in twisted names I'm going to

00:11:28,459 --> 00:11:32,990
start at the lowest level and work up

00:11:30,649 --> 00:11:34,610
like like everywhere in twisted there

00:11:32,990 --> 00:11:36,649
are layers of abstraction layers upon

00:11:34,610 --> 00:11:38,839
layers and let on layers and we'll start

00:11:36,649 --> 00:11:40,550
at the bottom and give some examples of

00:11:38,839 --> 00:11:42,529
how you can use these low-level api's

00:11:40,550 --> 00:11:46,760
and then later we'll see some of the

00:11:42,529 --> 00:11:50,029
higher level abstractions sorry so let's

00:11:46,760 --> 00:11:53,300
start with the twisted names dls module

00:11:50,029 --> 00:11:56,209
now this contains protocol protocol

00:11:53,300 --> 00:12:00,790
level api's representations of the DNS

00:11:56,209 --> 00:12:06,310
records representations of DNS messages

00:12:00,790 --> 00:12:08,959
routines for for serializing and

00:12:06,310 --> 00:12:12,290
deserializing these messages from the

00:12:08,959 --> 00:12:13,760
from the wire and it's also is the it's

00:12:12,290 --> 00:12:16,160
in this module that you'll find the

00:12:13,760 --> 00:12:19,399
protocol implementations both for UDP

00:12:16,160 --> 00:12:22,459
and TCP because DNS operates over both

00:12:19,399 --> 00:12:24,170
of those transports so we've got a

00:12:22,459 --> 00:12:30,680
little example here which I'll try and

00:12:24,170 --> 00:12:32,209
talk you through can you see that let me

00:12:30,680 --> 00:12:33,980
try and zoom in a bit this is this is

00:12:32,209 --> 00:12:37,670
revealed is and I'm not sure whether

00:12:33,980 --> 00:12:42,079
it's gonna oh yeah yep can everyone see

00:12:37,670 --> 00:12:44,209
that great ok so um what we're looking

00:12:42,079 --> 00:12:48,110
at here there's a couple of things I

00:12:44,209 --> 00:12:49,730
need to explain we have got first of all

00:12:48,110 --> 00:12:52,819
let's start at the bottom and look at

00:12:49,730 --> 00:12:56,269
the the last line which is tasked react

00:12:52,819 --> 00:12:59,300
now if you've used twisted before you

00:12:56,269 --> 00:13:02,689
may not have come across this this API

00:12:59,300 --> 00:13:05,660
but this is a new way for you to start

00:13:02,689 --> 00:13:09,199
the reactor for a short-lived twisted

00:13:05,660 --> 00:13:11,899
program and what it does it it supplies

00:13:09,199 --> 00:13:14,000
a meth you supply it with a function

00:13:11,899 --> 00:13:17,390
that you want to run a function which

00:13:14,000 --> 00:13:19,459
must return a deferred and task react

00:13:17,390 --> 00:13:23,149
will take that function and supply it

00:13:19,459 --> 00:13:24,769
with the reactor run your function and

00:13:23,149 --> 00:13:28,189
then wait for the deferred that it

00:13:24,769 --> 00:13:30,910
returns to fire and the bonfiring task

00:13:28,189 --> 00:13:34,100
react will then tear down the reactor

00:13:30,910 --> 00:13:36,199
take care of stopping the services in

00:13:34,100 --> 00:13:38,240
the right order and it will log any

00:13:36,199 --> 00:13:41,930
errors that haven't been handled on that

00:13:38,240 --> 00:13:44,029
deferred so if we then move up to the

00:13:41,930 --> 00:13:45,380
main method we can see that having

00:13:44,029 --> 00:13:49,040
supplied the reactor we are

00:13:45,380 --> 00:13:50,779
instantiating a DNS Datagram protocol so

00:13:49,040 --> 00:13:53,660
this is this is in this example we're

00:13:50,779 --> 00:13:54,829
only going to be this this DNS client

00:13:53,660 --> 00:13:58,550
example we're only going to be dealing

00:13:54,829 --> 00:14:01,069
with UDP and we instantiate the protocol

00:13:58,550 --> 00:14:04,790
and then we pass that to react to listen

00:14:01,069 --> 00:14:08,560
UDP on port 0 which means any high

00:14:04,790 --> 00:14:11,779
ephemeral port and because this is UDP

00:14:08,560 --> 00:14:15,260
we don't have any connection so we have

00:14:11,779 --> 00:14:17,569
to so it may look odd to be in a client

00:14:15,260 --> 00:14:20,959
lissa you calling a method called listen

00:14:17,569 --> 00:14:22,370
but we are going to send a UDP Datagram

00:14:20,959 --> 00:14:25,399
and we have to be listening for the

00:14:22,370 --> 00:14:27,380
response whereas in TCP the operating

00:14:25,399 --> 00:14:29,329
system would set up the connection for

00:14:27,380 --> 00:14:31,639
you and you wouldn't have to choose the

00:14:29,329 --> 00:14:34,639
ephemeral port that the response comes

00:14:31,639 --> 00:14:39,500
in on so so we listened we listened on a

00:14:34,639 --> 00:14:42,949
UDP port XYZ and then we send a query

00:14:39,500 --> 00:14:47,089
using the protocol using called proto

00:14:42,949 --> 00:14:49,819
query to send our DNS query to in this

00:14:47,089 --> 00:14:54,319
case the google dns servers and then

00:14:49,819 --> 00:14:56,029
when that query has been answered we're

00:14:54,319 --> 00:14:58,790
going to print the result and that's by

00:14:56,029 --> 00:15:02,689
way of a adding a call back to the

00:14:58,790 --> 00:15:05,929
deferred return by protocol query again

00:15:02,689 --> 00:15:07,309
i sometimes think we should get start

00:15:05,929 --> 00:15:10,100
every talk with an introduction to

00:15:07,309 --> 00:15:11,430
deferred but i guess everyone's heard it

00:15:10,100 --> 00:15:12,960
and more people are

00:15:11,430 --> 00:15:15,300
these days are familiar with the idea

00:15:12,960 --> 00:15:18,870
because it's now part of JavaScript I

00:15:15,300 --> 00:15:21,690
think so yeah when when when the answer

00:15:18,870 --> 00:15:24,540
comes back we simply we take the result

00:15:21,690 --> 00:15:27,420
and we take it sir the result is a

00:15:24,540 --> 00:15:29,580
message a DNS message which I'll explain

00:15:27,420 --> 00:15:32,550
it a little bit more detail later but a

00:15:29,580 --> 00:15:35,399
message has a has three attributes has

00:15:32,550 --> 00:15:37,440
an answers attributes and authority

00:15:35,399 --> 00:15:41,250
attribute and an additional attribute

00:15:37,440 --> 00:15:42,839
and those represent the three the three

00:15:41,250 --> 00:15:45,270
categories of records that might be

00:15:42,839 --> 00:15:47,190
returned by a DNS server and in this

00:15:45,270 --> 00:15:50,339
case all we're doing is printing out the

00:15:47,190 --> 00:15:52,350
answers returned by the DNS server and

00:15:50,339 --> 00:15:55,130
in particular we're returning we're

00:15:52,350 --> 00:15:59,040
going to print out the payload which is

00:15:55,130 --> 00:16:01,350
the either the 8th in this case the quad

00:15:59,040 --> 00:16:03,660
a record it might be the a record of MX

00:16:01,350 --> 00:16:05,430
record we're not interested in printing

00:16:03,660 --> 00:16:08,279
out the header information which wraps

00:16:05,430 --> 00:16:13,620
around that payload and so I'll show you

00:16:08,279 --> 00:16:16,709
the show the output oh I'm really had to

00:16:13,620 --> 00:16:19,650
time rapidly okay so we've got an answer

00:16:16,709 --> 00:16:23,700
from the server a quad a1 single quad a

00:16:19,650 --> 00:16:26,910
record now let's quickly move on to the

00:16:23,700 --> 00:16:29,550
next example so that was a client the

00:16:26,910 --> 00:16:31,860
next example is a server and in this

00:16:29,550 --> 00:16:34,230
case it's quite similar but we

00:16:31,860 --> 00:16:37,410
instantiate the Datagram protocol this

00:16:34,230 --> 00:16:41,910
time with a controller which takes care

00:16:37,410 --> 00:16:44,580
of handling the the the the query which

00:16:41,910 --> 00:16:47,040
comes into our server and when a queries

00:16:44,580 --> 00:16:50,850
receipt received by the protocol on port

00:16:47,040 --> 00:16:52,860
ten ten thousand and fifty three our

00:16:50,850 --> 00:16:54,959
protocol then calls out to the

00:16:52,860 --> 00:16:56,880
controller and calls its message

00:16:54,959 --> 00:16:58,709
received method and it's the message

00:16:56,880 --> 00:17:02,339
received method on the controller which

00:16:58,709 --> 00:17:04,260
is responsible for for constructing an

00:17:02,339 --> 00:17:06,900
answer to that message so this is how we

00:17:04,260 --> 00:17:09,030
write low-level servers in low-level DNS

00:17:06,900 --> 00:17:10,829
servers in twisted and in this case

00:17:09,030 --> 00:17:14,189
we're just going to respond with a

00:17:10,829 --> 00:17:17,189
canned a record with it with a fixed IP

00:17:14,189 --> 00:17:20,309
address so hopefully that makes sense I

00:17:17,189 --> 00:17:21,919
haven't got tired I'd like to go into it

00:17:20,309 --> 00:17:25,230
in more detail but I haven't got time

00:17:21,919 --> 00:17:28,260
there's the there's the

00:17:25,230 --> 00:17:33,690
running and there's us issuing a request

00:17:28,260 --> 00:17:36,080
to it using dig okay so now those are

00:17:33,690 --> 00:17:39,720
low-level API is we move up now to

00:17:36,080 --> 00:17:41,850
twisted names client this is a much

00:17:39,720 --> 00:17:45,480
higher level API much more friendly way

00:17:41,850 --> 00:17:47,970
of interacting with twisted names and in

00:17:45,480 --> 00:17:49,020
this example we're going to you we're

00:17:47,970 --> 00:17:51,660
going to introduce a couple of new

00:17:49,020 --> 00:17:55,429
concepts we're going to use twisted

00:17:51,660 --> 00:17:58,620
names to look up concurrently the

00:17:55,429 --> 00:18:02,130
reverse DNS records for a whole class c

00:17:58,620 --> 00:18:04,830
network and so you can see in our main

00:18:02,130 --> 00:18:09,150
method that we are constructing a list

00:18:04,830 --> 00:18:12,150
of all the IP addresses in a / 24

00:18:09,150 --> 00:18:15,230
network using a really useful module

00:18:12,150 --> 00:18:17,820
called net adder which does all the

00:18:15,230 --> 00:18:20,100
construction of those reverse DNS names

00:18:17,820 --> 00:18:22,290
for us I think there was a I think was a

00:18:20,100 --> 00:18:25,080
lightning talk on it yesterday so I

00:18:22,290 --> 00:18:27,150
recommend that module and for each of

00:18:25,080 --> 00:18:32,400
those reverse DNS names we're going to

00:18:27,150 --> 00:18:35,070
call client look up pointer and client

00:18:32,400 --> 00:18:37,799
has a has a series of these look up

00:18:35,070 --> 00:18:40,049
methods one for each type of DNS record

00:18:37,799 --> 00:18:42,179
that you can receive from a DNS server

00:18:40,049 --> 00:18:43,710
it doesn't have all of them that we're

00:18:42,179 --> 00:18:45,720
working on implementing some of the

00:18:43,710 --> 00:18:49,020
missing ones but it has a look at method

00:18:45,720 --> 00:18:51,840
for almost every commandeered s-type and

00:18:49,020 --> 00:18:56,250
so we construct a series a list of

00:18:51,840 --> 00:18:58,679
deferred all of them in flight and all

00:18:56,250 --> 00:19:02,100
of them are then added to what's called

00:18:58,679 --> 00:19:06,540
a deferred list now a deferred list is a

00:19:02,100 --> 00:19:09,660
really useful API for collecting the

00:19:06,540 --> 00:19:13,169
responses to a list of deferred and then

00:19:09,660 --> 00:19:16,559
it fires its call back when all of the

00:19:13,169 --> 00:19:19,350
deferred have themselves fired or failed

00:19:16,559 --> 00:19:22,230
and so in when we handle the results in

00:19:19,350 --> 00:19:24,570
this example we are looping through the

00:19:22,230 --> 00:19:27,270
results checking whether the result was

00:19:24,570 --> 00:19:30,179
a success or a failure and if it was or

00:19:27,270 --> 00:19:32,850
if it was a success we print the week

00:19:30,179 --> 00:19:35,700
again print the payload and we also

00:19:32,850 --> 00:19:37,409
print a summary expand summarizing how

00:19:35,700 --> 00:19:39,460
many of the requests were answered

00:19:37,409 --> 00:19:42,590
successfully and how

00:19:39,460 --> 00:19:45,020
we're not answered 8 either because the

00:19:42,590 --> 00:19:48,470
record didn't exist or perhaps the the

00:19:45,020 --> 00:19:53,059
query timed out so the results to that

00:19:48,470 --> 00:19:56,960
are as follows so you can see it all

00:19:53,059 --> 00:19:58,039
happens rather quickly and because

00:19:56,960 --> 00:20:00,860
everything is happening happening

00:19:58,039 --> 00:20:03,520
concurrently that's a real advantage of

00:20:00,860 --> 00:20:06,470
using twisted for this sort of work I

00:20:03,520 --> 00:20:10,610
might skip now to a better example of

00:20:06,470 --> 00:20:13,940
that one which follows on from linds

00:20:10,610 --> 00:20:15,830
talk on Wednesday so let me slightly

00:20:13,940 --> 00:20:18,200
quickly summarize some of the other

00:20:15,830 --> 00:20:21,860
modules we have interested we have the

00:20:18,200 --> 00:20:23,630
modules for creating DNS servers I had

00:20:21,860 --> 00:20:26,120
an example of that and it's really easy

00:20:23,630 --> 00:20:29,870
to use because there's a twisted DNS

00:20:26,120 --> 00:20:31,700
plugin for the twisty command which

00:20:29,870 --> 00:20:33,470
comes with twisted and so you should

00:20:31,700 --> 00:20:37,100
explore that and explore all the options

00:20:33,470 --> 00:20:40,039
that you have using that command twisted

00:20:37,100 --> 00:20:42,049
itself runs it twisted matrix calm that

00:20:40,039 --> 00:20:44,570
domain is actually served from from a

00:20:42,049 --> 00:20:47,870
twisted dns server sites it's pretty

00:20:44,570 --> 00:20:49,640
it's pretty stable and it's a it's not

00:20:47,870 --> 00:20:51,049
it's not it's not a fully featured dns

00:20:49,640 --> 00:20:54,380
server but it's good enough for some

00:20:51,049 --> 00:20:57,470
cases you can see that when you start

00:20:54,380 --> 00:20:59,600
the server it logs to standard out and

00:20:57,470 --> 00:21:03,770
that we can query that server once it

00:20:59,600 --> 00:21:05,840
started up we also have an authoritative

00:21:03,770 --> 00:21:07,370
server and it's interesting but I

00:21:05,840 --> 00:21:10,940
haven't got time to go into it that you

00:21:07,370 --> 00:21:14,570
can load a DNS zone based by defining it

00:21:10,940 --> 00:21:18,830
as a Python module and so here we have a

00:21:14,570 --> 00:21:23,390
Python module with describing the zone

00:21:18,830 --> 00:21:26,360
but the the and the the objects that you

00:21:23,390 --> 00:21:28,370
see there are all Global's which are

00:21:26,360 --> 00:21:30,590
imported at the time that this module is

00:21:28,370 --> 00:21:32,600
evaluated by twisted names it's quite a

00:21:30,590 --> 00:21:34,070
clever mechanism but so you should look

00:21:32,600 --> 00:21:37,190
into that too it's an interesting piece

00:21:34,070 --> 00:21:39,440
of code and again there's the example of

00:21:37,190 --> 00:21:41,330
how it runs and again these examples are

00:21:39,440 --> 00:21:43,340
all on the documentation the twisted

00:21:41,330 --> 00:21:46,100
documentation site so i recommend you go

00:21:43,340 --> 00:21:47,889
and read those there's a bunch of other

00:21:46,100 --> 00:21:50,750
modules which i have to skip through

00:21:47,889 --> 00:21:51,680
common contains some helpers and and

00:21:50,750 --> 00:21:53,570
some

00:21:51,680 --> 00:21:56,930
some api's common to all of the twisted

00:21:53,570 --> 00:21:59,780
clients and servers resolve I won't go

00:21:56,930 --> 00:22:03,320
into cash is about cashing the responses

00:21:59,780 --> 00:22:05,390
to two queries root is about doing

00:22:03,320 --> 00:22:08,570
recursive DNS resolution which Lynn

00:22:05,390 --> 00:22:10,850
talks about in her talk secondary is

00:22:08,570 --> 00:22:13,310
about transferring zones and serving

00:22:10,850 --> 00:22:15,110
them authoritative Lee from another

00:22:13,310 --> 00:22:17,330
authoritative server which some of you

00:22:15,110 --> 00:22:18,950
may be familiar with and the point I

00:22:17,330 --> 00:22:20,810
want to make by describing all of these

00:22:18,950 --> 00:22:22,100
is that these all of these building

00:22:20,810 --> 00:22:24,860
blocks can be put together in

00:22:22,100 --> 00:22:28,910
interesting ways and I've done a couple

00:22:24,860 --> 00:22:30,500
of examples of this on the website for

00:22:28,910 --> 00:22:33,770
example you could create very easily

00:22:30,500 --> 00:22:35,990
using the low-level api's a module or a

00:22:33,770 --> 00:22:38,690
script the test for compliance testing

00:22:35,990 --> 00:22:42,470
of DNS servers or clients because you

00:22:38,690 --> 00:22:45,620
have complete control over the flags and

00:22:42,470 --> 00:22:49,310
the payloads that you put into messages

00:22:45,620 --> 00:22:51,860
so it's easy to construct non-compliant

00:22:49,310 --> 00:22:55,640
messages to see how DNS servers respond

00:22:51,860 --> 00:22:57,830
to those or it's easy to it's easy to

00:22:55,640 --> 00:23:00,590
see how clients respond to non-compliant

00:22:57,830 --> 00:23:03,170
responses from servers so that's a good

00:23:00,590 --> 00:23:05,930
use of these building blocks we use that

00:23:03,170 --> 00:23:07,730
we use twisted at work for twisted names

00:23:05,930 --> 00:23:10,520
at work for functional testing so we

00:23:07,730 --> 00:23:12,740
have a bunch of code which does dns

00:23:10,520 --> 00:23:15,410
lookups and we want to in our tests

00:23:12,740 --> 00:23:17,540
supply canned responses to those dns

00:23:15,410 --> 00:23:20,390
lookups and it's very easy using twisted

00:23:17,540 --> 00:23:22,280
to set up a set up a lightweight dns

00:23:20,390 --> 00:23:25,070
server and then tear it down at the end

00:23:22,280 --> 00:23:27,410
of the test it would be really easy to

00:23:25,070 --> 00:23:30,830
set up a database back DNS server or a

00:23:27,410 --> 00:23:33,620
DNS server which looked up its data from

00:23:30,830 --> 00:23:35,480
a REST API for example where it'd be

00:23:33,620 --> 00:23:37,190
easy you to combine these with other

00:23:35,480 --> 00:23:40,610
part other components in twisted like

00:23:37,190 --> 00:23:42,490
the web module or the ldap module to

00:23:40,610 --> 00:23:45,530
look up dns records from an LDAP

00:23:42,490 --> 00:23:47,780
database or two to control and manage

00:23:45,530 --> 00:23:54,410
the DNS records in your server using a

00:23:47,780 --> 00:23:56,300
REST API so now let me see if I can

00:23:54,410 --> 00:23:58,460
quickly show you I finish off with a

00:23:56,300 --> 00:24:02,240
quick example a more complicated example

00:23:58,460 --> 00:24:03,890
of using twisted names so in linz talk

00:24:02,240 --> 00:24:04,460
it was really interesting is that

00:24:03,890 --> 00:24:11,270
there's a tour

00:24:04,460 --> 00:24:13,490
called DNS map which is a tool for for

00:24:11,270 --> 00:24:17,240
brute forcing a zones but for guessing

00:24:13,490 --> 00:24:19,310
which names may be in a zone DNS zone

00:24:17,240 --> 00:24:23,600
and it does that using a dictionary of

00:24:19,310 --> 00:24:25,700
words or common subdomains and as as you

00:24:23,600 --> 00:24:27,470
said in your talk then that's it does it

00:24:25,700 --> 00:24:29,240
in series so it's quite quite a slow

00:24:27,470 --> 00:24:31,100
it's quite slow to complete because

00:24:29,240 --> 00:24:32,660
there's about a thousand words in its

00:24:31,100 --> 00:24:34,640
dictionary so I thought it'd be

00:24:32,660 --> 00:24:36,500
interesting to write to write the same

00:24:34,640 --> 00:24:41,210
tool in twisted because it can do all of

00:24:36,500 --> 00:24:43,640
these lookups concurrently so this is

00:24:41,210 --> 00:24:45,980
this is how DNS the dearness met the

00:24:43,640 --> 00:24:48,620
original DNS map is documented you pass

00:24:45,980 --> 00:24:50,390
it a domain name and you pass it you can

00:24:48,620 --> 00:24:53,270
pass it a list of words which it will

00:24:50,390 --> 00:24:56,080
then look up each of those words as a

00:24:53,270 --> 00:24:59,750
subdomain of the supplied parent domain

00:24:56,080 --> 00:25:02,570
but as you can see it is quite slow so i

00:24:59,750 --> 00:25:04,880
started this going against spotify calm

00:25:02,570 --> 00:25:08,030
and 48 seconds later it had only reached

00:25:04,880 --> 00:25:09,980
g so it was going to take forever now i

00:25:08,030 --> 00:25:14,030
want to compare that to another example

00:25:09,980 --> 00:25:15,680
the example i wrote which I've actually

00:25:14,030 --> 00:25:19,010
given you the link but I put all this

00:25:15,680 --> 00:25:21,350
code on my github page I've got the link

00:25:19,010 --> 00:25:24,170
at the end of my talk and in this

00:25:21,350 --> 00:25:28,060
example we are we're actually sending

00:25:24,170 --> 00:25:30,380
all of our requests concurrently but in

00:25:28,060 --> 00:25:32,330
not not we're not sending a thousand

00:25:30,380 --> 00:25:33,710
requests at a time we're using some

00:25:32,330 --> 00:25:38,120
another interesting part of twisted

00:25:33,710 --> 00:25:40,760
called the cooperator the cooperator api

00:25:38,120 --> 00:25:43,130
in the task module and what we can do

00:25:40,760 --> 00:25:45,080
using that is to limit the concurrency

00:25:43,130 --> 00:25:48,080
so that we can say there's only ever a

00:25:45,080 --> 00:25:50,510
hundred in flight d requests at a time

00:25:48,080 --> 00:25:53,060
so we're not going to overwhelm the dns

00:25:50,510 --> 00:25:55,250
server that would query i haven't

00:25:53,060 --> 00:25:58,070
implemented in this that the random

00:25:55,250 --> 00:25:59,750
timeouts that dns map actually puts in

00:25:58,070 --> 00:26:04,280
between its request so it's not quite

00:25:59,750 --> 00:26:07,910
the same but if i show you the results

00:26:04,280 --> 00:26:10,310
in this case it's looked up all it's

00:26:07,910 --> 00:26:12,080
about a thousand subdomains in two and a

00:26:10,310 --> 00:26:14,330
half seconds so that's a good

00:26:12,080 --> 00:26:17,880
demonstration of the power of twisted

00:26:14,330 --> 00:26:20,250
and the power of the the api's and

00:26:17,880 --> 00:26:23,340
the way that it can it can efficiently

00:26:20,250 --> 00:26:26,520
process efficiently send out requests

00:26:23,340 --> 00:26:29,850
and process the responses all this code

00:26:26,520 --> 00:26:34,320
is on my github page now I think I've

00:26:29,850 --> 00:26:36,090
run out of time so i won't and i wanted

00:26:34,320 --> 00:26:37,470
to talk about my project I'd love to

00:26:36,090 --> 00:26:39,870
talk to you about it I'm going to be

00:26:37,470 --> 00:26:42,060
sprinting at the end tomorrow at least

00:26:39,870 --> 00:26:44,670
on twisted so if any of you are

00:26:42,060 --> 00:26:47,460
interested in helping out or learning

00:26:44,670 --> 00:26:49,290
about the development process if any of

00:26:47,460 --> 00:26:51,120
you are dns experts and what to help me

00:26:49,290 --> 00:26:54,600
with my project then i'd love to hear

00:26:51,120 --> 00:26:57,330
from you and it's all about Ed NS DNS

00:26:54,600 --> 00:27:00,480
SEC I've got funding so you might get

00:26:57,330 --> 00:27:05,310
paid for it I've made modest progress

00:27:00,480 --> 00:27:07,410
and I think that's the summary of this

00:27:05,310 --> 00:27:08,820
talk it's the summary of what it's how I

00:27:07,410 --> 00:27:12,630
wanted this talk to me but haven't had

00:27:08,820 --> 00:27:13,860
time to cover it all so those are the

00:27:12,630 --> 00:27:16,290
links those are the links the

00:27:13,860 --> 00:27:18,150
documentation that's the github link to

00:27:16,290 --> 00:27:22,170
the examples in my talk if you want to

00:27:18,150 --> 00:27:24,090
investigate those if you I'll put this

00:27:22,170 --> 00:27:25,590
I'll put these on get up as well now

00:27:24,090 --> 00:27:26,880
linked to these from Twitter or

00:27:25,590 --> 00:27:29,010
somewhere you'll make them available on

00:27:26,880 --> 00:27:34,020
the conference website have I got any

00:27:29,010 --> 00:27:35,370
time for questions know if there's any

00:27:34,020 --> 00:27:36,750
questions catch up with me afterwards

00:27:35,370 --> 00:27:39,140
and I'd be delighted to talk to you

00:27:36,750 --> 00:27:39,140
about it

00:27:43,100 --> 00:27:45,160

YouTube URL: https://www.youtube.com/watch?v=Pl-q8F_-C4M


