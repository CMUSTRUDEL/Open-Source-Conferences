Title: Federico Marani - Scaling with Ansible
Publication date: 2015-04-18
Playlist: EuroPython 2014
Description: 
	Federico Marani - Scaling with Ansible
[EuroPython 2014]
[23 July 2014]

Ansible is a powerful DevOps swiss-army knife tool, very easy to configure and with many extensions built-in.
This talk will quickly introduce the basics of Ansible, then some real-life experience tips on how to use this tool, from setting up dev VMs to multi-server setups.

-----

Infrastructure/Scaling is a topic really close to me, I'd like to have the chance to talk about how we set this up in the company I work for. Our infrastructure is around 10-15 servers,  provisioned on different cloud providers, so a good size infrastructure.

Presentation is going to be divided in 3 parts, first part is going to be focused on comparing sysadmin and devops, then there will be an introduction to the basic concepts of Ansible. I want to spend most on the last part, which is going to give some tips based on our experience with it.

Many ideas will come from this presentation https://speakerdeck.com/fmarani/devops-with-ansible which i gave at DJUGL in London, with a longer session I will have more chances to delve into more detail, especially on how we use it, from vagrant boxes setup to AWS and DigitalOcean boxes, network configuration, software configurations, etc... 

I want to offer as many real-life tips as possible, without going too much offtopic as far as Ansible is concerned
Captions: 
	00:00:14,840 --> 00:00:31,039
now with us is Federico marani talking

00:00:19,070 --> 00:00:34,040
about em ensberg and DevOps so hello

00:00:31,039 --> 00:00:38,660
everybody my name is Federico Marilyn

00:00:34,040 --> 00:00:42,770
and I'm going to talk to ansible estable

00:00:38,660 --> 00:00:46,040
is a DevOps tool and we've been using it

00:00:42,770 --> 00:00:49,149
for a while now we use it for around and

00:00:46,040 --> 00:00:53,239
yelling half kind of started with like

00:00:49,149 --> 00:00:55,760
rush 1.2 I think and then we kind of

00:00:53,239 --> 00:00:58,730
went through like some experiments and

00:00:55,760 --> 00:01:01,790
that we we kind of turned all over all

00:00:58,730 --> 00:01:04,610
over all infrastructure into into

00:01:01,790 --> 00:01:07,430
ansible scripts and then we kind of like

00:01:04,610 --> 00:01:09,440
work a lot on that idea and that we

00:01:07,430 --> 00:01:11,890
cannot extended it to do like many other

00:01:09,440 --> 00:01:17,380
things like such a school deployment and

00:01:11,890 --> 00:01:19,580
a lot of like kind of server setup and

00:01:17,380 --> 00:01:25,280
like I've been trying some other tools

00:01:19,580 --> 00:01:27,380
and like those tools and SEO is a nice

00:01:25,280 --> 00:01:31,069
compromise because it's quite simple and

00:01:27,380 --> 00:01:38,179
like it just works in the way the way I

00:01:31,069 --> 00:01:42,920
like it ok so just to give give a bit

00:01:38,179 --> 00:01:46,720
bit of introduction I am a coder so I've

00:01:42,920 --> 00:01:48,860
been cooling Python for a long time and

00:01:46,720 --> 00:01:53,060
I've been involved with some more per

00:01:48,860 --> 00:01:56,660
source projects but like many company

00:01:53,060 --> 00:01:59,539
work and I caught up with like many

00:01:56,660 --> 00:02:01,700
languages and you know python did some

00:01:59,539 --> 00:02:06,860
some scholar i did some PHP in the past

00:02:01,700 --> 00:02:08,989
and and also like always like kind of

00:02:06,860 --> 00:02:10,849
this is on my side of things because

00:02:08,989 --> 00:02:13,280
it's quite nice when you when you know

00:02:10,849 --> 00:02:15,650
when you're both sides you you can call

00:02:13,280 --> 00:02:19,190
you can deploy you can configure server

00:02:15,650 --> 00:02:22,370
so i always had an interesting in Kansas

00:02:19,190 --> 00:02:26,540
on me first and then then moving moving

00:02:22,370 --> 00:02:27,620
towards DevOps our fur company call

00:02:26,540 --> 00:02:29,870
Travis

00:02:27,620 --> 00:02:34,849
it's a start up we are based in London

00:02:29,870 --> 00:02:38,140
and head of engineering there before

00:02:34,849 --> 00:02:43,000
that I work with with other companies

00:02:38,140 --> 00:02:43,000
some of you may recognize some names

00:02:43,090 --> 00:02:50,900
okay so so what what is the thing about

00:02:48,140 --> 00:02:53,870
like what like you know obviously like

00:02:50,900 --> 00:02:57,049
tokyo by ansible like what is the real

00:02:53,870 --> 00:03:00,980
problem behind it the probabilities is

00:02:57,049 --> 00:03:05,900
DevOps and the probably dev ops ii

00:03:00,980 --> 00:03:07,519
system administration really and you can

00:03:05,900 --> 00:03:09,709
do that whoops if you don't if you don't

00:03:07,519 --> 00:03:12,079
transducer mean you can obviously you

00:03:09,709 --> 00:03:17,060
can you a sensible but like Nancy boys

00:03:12,079 --> 00:03:19,310
just the tool that helps you to do you

00:03:17,060 --> 00:03:22,010
know the same system in war but like you

00:03:19,310 --> 00:03:25,060
still need to know something in order to

00:03:22,010 --> 00:03:28,549
that like it just kind of simplifies

00:03:25,060 --> 00:03:30,799
some of the things but like certainly

00:03:28,549 --> 00:03:32,950
doesn't tell you how to configure nginx

00:03:30,799 --> 00:03:35,329
it doesn't tell you all to configure

00:03:32,950 --> 00:03:38,480
sudo it doesn't tell you how to

00:03:35,329 --> 00:03:43,040
configure you know any other tools that

00:03:38,480 --> 00:03:45,319
you may you're using your stock so yeah

00:03:43,040 --> 00:03:48,340
I mean basically this figure is lots of

00:03:45,319 --> 00:03:51,230
the complexity of system administration

00:03:48,340 --> 00:03:53,930
so we really need to know how these

00:03:51,230 --> 00:03:57,340
systems work and then you can use

00:03:53,930 --> 00:04:04,959
ansible to simplify your workflow

00:03:57,340 --> 00:04:10,129
basically and so what is DevOps and

00:04:04,959 --> 00:04:12,680
DevOps is like basically like one simple

00:04:10,129 --> 00:04:18,199
concept and is having infrastructure as

00:04:12,680 --> 00:04:20,630
code and soul I just saying historically

00:04:18,199 --> 00:04:22,580
you had like this figures courses on

00:04:20,630 --> 00:04:26,240
mean which like go on the server and

00:04:22,580 --> 00:04:28,250
then do this all this manual thing and

00:04:26,240 --> 00:04:29,810
like nobody the mighty on what they

00:04:28,250 --> 00:04:32,270
doing they were like to just doing magic

00:04:29,810 --> 00:04:35,300
on the server and somehow the server got

00:04:32,270 --> 00:04:36,950
interstate it was working and that's how

00:04:35,300 --> 00:04:39,229
the ladies people I leave the company

00:04:36,950 --> 00:04:40,120
and nobody knows like what they've done

00:04:39,229 --> 00:04:43,479
to the server

00:04:40,120 --> 00:04:47,560
like basically lost track of like all

00:04:43,479 --> 00:04:49,270
these changes so like what changed

00:04:47,560 --> 00:04:52,690
something like some time ago especially

00:04:49,270 --> 00:04:56,380
what kind of develops you know became a

00:04:52,690 --> 00:04:59,410
big thing basically now every every

00:04:56,380 --> 00:05:02,669
change you do on this system is going

00:04:59,410 --> 00:05:05,530
through this process of of coding and

00:05:02,669 --> 00:05:08,770
then you basically have the coding as a

00:05:05,530 --> 00:05:12,220
first step and then these deployments of

00:05:08,770 --> 00:05:14,380
infrastructure changes like you

00:05:12,220 --> 00:05:16,240
basically wrote them out on one server

00:05:14,380 --> 00:05:20,110
on many servers like you know whatever

00:05:16,240 --> 00:05:23,139
number or service you have and what

00:05:20,110 --> 00:05:25,960
DevOps is about is about automation as

00:05:23,139 --> 00:05:29,260
well because I mean we are engineer so

00:05:25,960 --> 00:05:32,410
we like to without when things automated

00:05:29,260 --> 00:05:35,470
like this this less margin forever

00:05:32,410 --> 00:05:39,190
listen it's just very nice you don't

00:05:35,470 --> 00:05:41,050
have to think about about these things

00:05:39,190 --> 00:05:47,770
anymore it's just have this automation

00:05:41,050 --> 00:05:49,270
in place and people live companies so

00:05:47,770 --> 00:05:51,430
that's not a good point like you don't

00:05:49,270 --> 00:05:53,650
want knowledge to escape the companies

00:05:51,430 --> 00:05:56,320
we want to keep the knowledge within the

00:05:53,650 --> 00:05:58,000
company and anybody can read the code

00:05:56,320 --> 00:06:05,169
anybody can understand how the system

00:05:58,000 --> 00:06:08,110
work and salad point I feel strongly

00:06:05,169 --> 00:06:12,729
about and thus a lot of DevOps tool out

00:06:08,110 --> 00:06:15,639
there which like they borrowed too many

00:06:12,729 --> 00:06:18,490
ideas from programming languages so like

00:06:15,639 --> 00:06:21,699
I mean I love coding up between done a

00:06:18,490 --> 00:06:24,280
lot of it but I I don't feel necessarily

00:06:21,699 --> 00:06:28,900
the connection between like twin DevOps

00:06:24,280 --> 00:06:32,699
and doing doing coding silencing devil

00:06:28,900 --> 00:06:36,610
should should not require any experience

00:06:32,699 --> 00:06:39,669
this tools like you know chef is really

00:06:36,610 --> 00:06:42,250
kind of movie based for example and the

00:06:39,669 --> 00:06:47,590
Papa does like you know entirely song

00:06:42,250 --> 00:06:49,360
language and like yeah I think that this

00:06:47,590 --> 00:06:51,789
you know I was looking for a tool that

00:06:49,360 --> 00:06:52,470
kind of made is this distinction of

00:06:51,789 --> 00:06:58,400
eclair

00:06:52,470 --> 00:07:00,900
and that's that's one I came to uncibal

00:06:58,400 --> 00:07:03,630
ansible is really nice tool it's really

00:07:00,900 --> 00:07:08,310
quick to get started it's really easy

00:07:03,630 --> 00:07:12,980
and it builds on top of like tools that

00:07:08,310 --> 00:07:19,220
we all should know like Python SS aids

00:07:12,980 --> 00:07:21,720
Yama files it is much written in Python

00:07:19,220 --> 00:07:23,490
it substantially we aspire to income

00:07:21,720 --> 00:07:27,980
write plugins in Python become

00:07:23,490 --> 00:07:27,980
replication in other languages I think

00:07:28,340 --> 00:07:35,520
like differently from other systems is

00:07:31,470 --> 00:07:37,800
based on idea of like pushing updates to

00:07:35,520 --> 00:07:40,200
the server instead of the servant being

00:07:37,800 --> 00:07:45,060
having responsibility of pulling updates

00:07:40,200 --> 00:07:47,640
and obviously this this behavior can be

00:07:45,060 --> 00:07:50,630
tweaked but the idea is like you have

00:07:47,640 --> 00:07:54,300
Iran unstable anyang on your machine or

00:07:50,630 --> 00:07:58,950
maximum machine and it basically

00:07:54,300 --> 00:08:00,240
connects to every 27 and pushes the

00:07:58,950 --> 00:08:03,300
operation that you want to run the

00:08:00,240 --> 00:08:06,210
server this operation mail maybe like

00:08:03,300 --> 00:08:08,790
installing packages or maybe configuring

00:08:06,210 --> 00:08:13,830
packages you know whatever you chose to

00:08:08,790 --> 00:08:16,410
run yes this push approach the nice

00:08:13,830 --> 00:08:20,460
thing about this it doesn't require does

00:08:16,410 --> 00:08:22,800
require you to install agents on on the

00:08:20,460 --> 00:08:24,600
servers it doesn't require does require

00:08:22,800 --> 00:08:28,590
to have a central repository of

00:08:24,600 --> 00:08:32,849
configuration files and yeah I mean it's

00:08:28,590 --> 00:08:35,370
just a different different way and it's

00:08:32,849 --> 00:08:38,070
based on the idea of playbooks so you

00:08:35,370 --> 00:08:40,349
can use ansible ease you know in in a

00:08:38,070 --> 00:08:45,930
simple way but I can go to buy playbooks

00:08:40,349 --> 00:08:48,750
and and play books are basically a like

00:08:45,930 --> 00:08:51,290
a list of tasks so there is like a

00:08:48,750 --> 00:08:55,620
transaction is I'm going to describe and

00:08:51,290 --> 00:08:57,390
that's another ficon inventory file so

00:08:55,620 --> 00:09:03,720
those are like the two basic files you

00:08:57,390 --> 00:09:05,240
need to set up and okay you can use a

00:09:03,720 --> 00:09:10,279
school for many things

00:09:05,240 --> 00:09:12,709
I generally like 10 to distinguish into

00:09:10,279 --> 00:09:15,410
big groups one is configuration

00:09:12,709 --> 00:09:17,300
management and if you want two canoes

00:09:15,410 --> 00:09:20,870
and spook for cool deployments but I

00:09:17,300 --> 00:09:24,380
thats quiet like a separate say nothing

00:09:20,870 --> 00:09:27,410
a configuration management like that's

00:09:24,380 --> 00:09:30,410
like the traditional way to use these

00:09:27,410 --> 00:09:33,649
tools so when I say configuration

00:09:30,410 --> 00:09:36,130
management I mean like installing like

00:09:33,649 --> 00:09:39,940
Sony software on the server and

00:09:36,130 --> 00:09:42,890
configuring like this software and

00:09:39,940 --> 00:09:46,550
making sure the all the demons are

00:09:42,890 --> 00:09:49,459
started making sure all the network

00:09:46,550 --> 00:09:53,779
interfaces are up making sure all the

00:09:49,459 --> 00:09:56,209
fiber also set and you know this this

00:09:53,779 --> 00:10:00,740
all type of operations are like

00:09:56,209 --> 00:10:10,790
basically like the traditional way to

00:10:00,740 --> 00:10:14,180
use these tools and okay so this is this

00:10:10,790 --> 00:10:16,940
a playbook this is like our you and kind

00:10:14,180 --> 00:10:20,529
of the basic file for set for using

00:10:16,940 --> 00:10:23,209
ansible it's divided in three sections

00:10:20,529 --> 00:10:27,440
you go like cross section transaction

00:10:23,209 --> 00:10:32,630
and under section and sorry the most

00:10:27,440 --> 00:10:34,310
important part ER is the task section in

00:10:32,630 --> 00:10:38,720
this in this play but there are three

00:10:34,310 --> 00:10:42,980
task each one with a name and each one

00:10:38,720 --> 00:10:47,839
with an action action is in this case is

00:10:42,980 --> 00:10:49,670
apt template and service so I mean this

00:10:47,839 --> 00:10:51,890
file is really is about to put this file

00:10:49,670 --> 00:10:56,800
does it's basically a set up engine x7

00:10:51,890 --> 00:10:59,240
on on your machine on on many machines

00:10:56,800 --> 00:11:01,490
so the very first thing you would do is

00:10:59,240 --> 00:11:05,240
make sure initial axis installed and

00:11:01,490 --> 00:11:08,480
it's the latest version so to do that

00:11:05,240 --> 00:11:12,110
your best need one line a the apt line

00:11:08,480 --> 00:11:15,560
which is like their specify the package

00:11:12,110 --> 00:11:18,030
name and you specify the state you want

00:11:15,560 --> 00:11:22,620
the package to bin

00:11:18,030 --> 00:11:25,320
and a 1s but we run this this action

00:11:22,620 --> 00:11:28,080
what it will do is basically Chucky

00:11:25,320 --> 00:11:30,560
function X or it installed if it's right

00:11:28,080 --> 00:11:33,000
install and it's ready latest version

00:11:30,560 --> 00:11:37,200
you won't do anything well concerning

00:11:33,000 --> 00:11:40,350
changing in the server a guest artist

00:11:37,200 --> 00:11:49,140
all or if it's not if it's out to date

00:11:40,350 --> 00:11:51,840
they will be and upgraded okay so second

00:11:49,140 --> 00:11:54,020
action are like something you probably

00:11:51,840 --> 00:11:56,520
do like for most of the software install

00:11:54,020 --> 00:11:59,040
you have to use your your own

00:11:56,520 --> 00:12:01,790
configuration files because I mean

00:11:59,040 --> 00:12:04,290
friends in axial you need to set up like

00:12:01,790 --> 00:12:06,210
you have a file to like configure the

00:12:04,290 --> 00:12:11,820
website so like you need we need to

00:12:06,210 --> 00:12:14,610
upload this and template is basically a

00:12:11,820 --> 00:12:20,310
copy black with some pre-processing done

00:12:14,610 --> 00:12:23,220
to it is templating and ansible is using

00:12:20,310 --> 00:12:27,360
ginger Jesus completing engine and the

00:12:23,220 --> 00:12:31,590
same one used with flask and same auto

00:12:27,360 --> 00:12:35,330
flask and what the template action does

00:12:31,590 --> 00:12:37,620
is takes this and change the file and

00:12:35,330 --> 00:12:40,380
you like fill it to the template engine

00:12:37,620 --> 00:12:43,980
with a bunch of variables that are

00:12:40,380 --> 00:12:47,640
available in ansible and you can specify

00:12:43,980 --> 00:12:50,970
also variables in play books and that

00:12:47,640 --> 00:12:54,660
the output of this kind of template file

00:12:50,970 --> 00:13:00,240
is then copied on the server to that

00:12:54,660 --> 00:13:03,870
destination path there and yeah that's

00:13:00,240 --> 00:13:06,690
basically and third auctioneer is the

00:13:03,870 --> 00:13:09,480
service action and service action

00:13:06,690 --> 00:13:13,470
basically it's an interface to winning

00:13:09,480 --> 00:13:16,380
scripts and in this case it's just about

00:13:13,470 --> 00:13:18,240
like making sure engine X is running so

00:13:16,380 --> 00:13:21,510
if it's all running will call the in

00:13:18,240 --> 00:13:23,310
scripts to start engine X if it's

00:13:21,510 --> 00:13:28,220
running one the one do nothing or

00:13:23,310 --> 00:13:31,019
anything so then

00:13:28,220 --> 00:13:34,829
they saw the suction important section

00:13:31,019 --> 00:13:37,529
your call endless and so that the basic

00:13:34,829 --> 00:13:41,999
idea around Anders is basically flat

00:13:37,529 --> 00:13:44,610
like you list your endless and you can

00:13:41,999 --> 00:13:49,709
execute those on demand like at the end

00:13:44,610 --> 00:13:54,299
of of your task list and you can execute

00:13:49,709 --> 00:13:57,720
them only if there's been a change like

00:13:54,299 --> 00:13:59,850
kind of associated to the in this case

00:13:57,720 --> 00:14:03,149
to the template action sorry the

00:13:59,850 --> 00:14:06,059
template action caused a change in the

00:14:03,149 --> 00:14:09,480
in the target server you basically

00:14:06,059 --> 00:14:12,480
triggers the notify and which is then

00:14:09,480 --> 00:14:15,239
connected to the endless and so in this

00:14:12,480 --> 00:14:18,360
case if the configuration five chains on

00:14:15,239 --> 00:14:20,910
the server you want to restart engine X

00:14:18,360 --> 00:14:23,429
so they notify will be triggered and

00:14:20,910 --> 00:14:26,549
then the engines will be executed it's

00:14:23,429 --> 00:14:30,569
just like basically they are action you

00:14:26,549 --> 00:14:36,990
execute only when I'm notify has been

00:14:30,569 --> 00:14:40,850
cold and so the last thing here is the

00:14:36,990 --> 00:14:44,610
last section subtly abstraction you need

00:14:40,850 --> 00:14:46,829
in your waist need and basically like

00:14:44,610 --> 00:14:54,389
the group of service you want to apply

00:14:46,829 --> 00:14:56,999
this playbook tool alright so task order

00:14:54,389 --> 00:15:00,290
is important that's how I civil works

00:14:56,999 --> 00:15:02,819
that's not how are the tools work and

00:15:00,290 --> 00:15:06,449
it's really kind of typical or unstable

00:15:02,819 --> 00:15:09,029
and we need to be honest like it really

00:15:06,449 --> 00:15:12,449
makes sense like from my perspective

00:15:09,029 --> 00:15:15,839
when when you set up like machines when

00:15:12,449 --> 00:15:18,119
you set up service like you will do

00:15:15,839 --> 00:15:20,369
things in order so like it's quite

00:15:18,119 --> 00:15:22,949
convenient for me to you know to reduce

00:15:20,369 --> 00:15:26,549
the same order when i define when if

00:15:22,949 --> 00:15:28,589
defined is just really kind of a nice

00:15:26,549 --> 00:15:33,389
way to think about problem striking

00:15:28,589 --> 00:15:35,699
steps and so like really kind of say

00:15:33,389 --> 00:15:37,870
this thing as it's an same party

00:15:35,699 --> 00:15:40,270
programming so it's not like

00:15:37,870 --> 00:15:42,550
you know they always quite important and

00:15:40,270 --> 00:15:49,660
that's how you define dependencies

00:15:42,550 --> 00:15:53,500
between between tasks and the other

00:15:49,660 --> 00:15:55,660
thing is a task card important a meaning

00:15:53,500 --> 00:15:58,779
that like you can execute the playbook

00:15:55,660 --> 00:16:00,880
as many times as you want and you won't

00:15:58,779 --> 00:16:03,339
try to install in X twice I won't try to

00:16:00,880 --> 00:16:06,910
come like override the configuration

00:16:03,339 --> 00:16:11,320
file it the configuration files ready on

00:16:06,910 --> 00:16:13,900
the server and that's a nice feature and

00:16:11,320 --> 00:16:16,330
basically like you want you won't change

00:16:13,900 --> 00:16:18,130
the system you won't try to change the

00:16:16,330 --> 00:16:23,460
system if the system is ready in the

00:16:18,130 --> 00:16:26,110
state you one you want that to be and

00:16:23,460 --> 00:16:28,960
already can describe the end of it

00:16:26,110 --> 00:16:34,029
basically there are commands fly for

00:16:28,960 --> 00:16:36,180
later exclusion so do we better execute

00:16:34,029 --> 00:16:40,480
and only if there has been a change in

00:16:36,180 --> 00:16:49,330
the system typical case reloading a

00:16:40,480 --> 00:16:52,050
demon okay so the last type of file they

00:16:49,330 --> 00:16:55,560
need to set up is the inventory file

00:16:52,050 --> 00:16:59,260
subtly like master plan then a playbook

00:16:55,560 --> 00:17:04,150
it's just a list of lists of domains or

00:16:59,260 --> 00:17:07,630
IP addresses you can group them by or

00:17:04,150 --> 00:17:11,110
scoop if you make sense to you like you

00:17:07,630 --> 00:17:13,720
know more we normally do is like lists

00:17:11,110 --> 00:17:15,339
all the web servers in one section is to

00:17:13,720 --> 00:17:18,390
be little bit service another section

00:17:15,339 --> 00:17:24,910
and we're monitoring service we have

00:17:18,390 --> 00:17:26,670
trillion of typos nervous and like one

00:17:24,910 --> 00:17:30,400
thing you can do with inventory files

00:17:26,670 --> 00:17:33,750
that we found really helpful is you can

00:17:30,400 --> 00:17:37,600
define like variables that inventory

00:17:33,750 --> 00:17:40,690
Paris group and for example like for all

00:17:37,600 --> 00:17:43,059
the web servers you want to declare that

00:17:40,690 --> 00:17:47,190
the build environment is production or

00:17:43,059 --> 00:17:50,080
staging or whatever environment you have

00:17:47,190 --> 00:17:51,040
you may want to declare some database

00:17:50,080 --> 00:17:55,480
names

00:17:51,040 --> 00:17:59,890
in case running multiple version of the

00:17:55,480 --> 00:18:02,730
same the same website on one machine you

00:17:59,890 --> 00:18:06,220
can do the same thing like for database

00:18:02,730 --> 00:18:14,140
service yeah that's the feature we use a

00:18:06,220 --> 00:18:16,780
lot basically okay so see the important

00:18:14,140 --> 00:18:20,560
things you are like AWS groups like

00:18:16,780 --> 00:18:24,760
really can try to understand our groups

00:18:20,560 --> 00:18:28,570
work I mean subtly quite easy but like

00:18:24,760 --> 00:18:32,710
there are some little things that you

00:18:28,570 --> 00:18:36,900
need to know and this filter called rose

00:18:32,710 --> 00:18:41,250
in ansible and we found it like really

00:18:36,900 --> 00:18:44,710
helpful especially because basically

00:18:41,250 --> 00:18:48,700
defines like a comic convention like to

00:18:44,710 --> 00:18:51,720
include files and within your PlayBook

00:18:48,700 --> 00:18:54,160
and so if you have like a long list of

00:18:51,720 --> 00:18:57,550
of task you need to run on the server

00:18:54,160 --> 00:18:59,680
you may want to split this tasking into

00:18:57,550 --> 00:19:01,660
multiple files I mean the same the same

00:18:59,680 --> 00:19:03,640
idea behind parameter anguishes you

00:19:01,660 --> 00:19:07,330
basically split split your file into

00:19:03,640 --> 00:19:09,670
multiple files and that's that's why

00:19:07,330 --> 00:19:13,240
there are includes and you should use

00:19:09,670 --> 00:19:16,720
them and always try to use the actual

00:19:13,240 --> 00:19:20,350
Israeli side effects meaning if you

00:19:16,720 --> 00:19:23,290
don't need to template file you just you

00:19:20,350 --> 00:19:26,380
can just use copy basically there's less

00:19:23,290 --> 00:19:30,310
chances to trigger a change in the

00:19:26,380 --> 00:19:37,680
server and change you don't really want

00:19:30,310 --> 00:19:41,680
to trigger let's say and okay so this is

00:19:37,680 --> 00:19:44,500
our defining clothes and these are

00:19:41,680 --> 00:19:49,750
actually like a really put of production

00:19:44,500 --> 00:19:52,300
code views and so you can basically see

00:19:49,750 --> 00:19:55,860
the operations you do on the server on

00:19:52,300 --> 00:19:58,150
on a more like logical level and

00:19:55,860 --> 00:20:00,310
obviously to store what packages that

00:19:58,150 --> 00:20:02,010
are like you know many packages so many

00:20:00,310 --> 00:20:04,950
configuration files you need to apply

00:20:02,010 --> 00:20:08,190
you know just try to see that like from

00:20:04,950 --> 00:20:11,070
kind of high ground so like your basic

00:20:08,190 --> 00:20:13,290
install about packages and that we

00:20:11,070 --> 00:20:15,000
configure engine acts then configure or

00:20:13,290 --> 00:20:20,930
supervisor because we're using

00:20:15,000 --> 00:20:25,260
supervisor and another thing we do is a

00:20:20,930 --> 00:20:27,210
bday restore backups and you know

00:20:25,260 --> 00:20:31,020
everybody should do like backup testing

00:20:27,210 --> 00:20:33,420
and but like we restored it from

00:20:31,020 --> 00:20:36,320
production to staging so you can do a

00:20:33,420 --> 00:20:39,690
condition and includes if you want and

00:20:36,320 --> 00:20:44,910
all the operating all the tasks in this

00:20:39,690 --> 00:20:48,090
include will be included only if the

00:20:44,910 --> 00:20:50,010
variable is is you know if that is

00:20:48,090 --> 00:20:55,770
evaluating to throw and gotta come back

00:20:50,010 --> 00:20:59,550
to canisius up to be more later and you

00:20:55,770 --> 00:21:03,590
can tag operation tags meaning you can

00:20:59,550 --> 00:21:06,330
just write a sequel in any keyword and

00:21:03,590 --> 00:21:08,940
that's quite a nice same because

00:21:06,330 --> 00:21:13,350
sometimes you only need to execute parts

00:21:08,940 --> 00:21:15,270
of your and a simple scripts or you

00:21:13,350 --> 00:21:24,150
might want to ignore some talks and

00:21:15,270 --> 00:21:26,310
that's a nice way to do it okay so that

00:21:24,150 --> 00:21:28,380
was like kind of the basics basically

00:21:26,310 --> 00:21:30,690
went through the playbook went through

00:21:28,380 --> 00:21:36,900
cementery files with you some other

00:21:30,690 --> 00:21:38,910
things and by like the operations you do

00:21:36,900 --> 00:21:43,590
on configuration management they are

00:21:38,910 --> 00:21:45,870
quite similar unless you do you know a

00:21:43,590 --> 00:21:50,820
sort of like lots of Java the most of

00:21:45,870 --> 00:21:52,620
start going crazy like that and the

00:21:50,820 --> 00:21:56,550
other thing we you were sensible for our

00:21:52,620 --> 00:21:59,520
code deployments and the prophets could

00:21:56,550 --> 00:22:05,370
opponents or is that they can be really

00:21:59,520 --> 00:22:07,140
custom like really like one like you

00:22:05,370 --> 00:22:10,170
know when you write things like

00:22:07,140 --> 00:22:13,890
configure service and they always you

00:22:10,170 --> 00:22:16,500
you know they normally question that we

00:22:13,890 --> 00:22:17,620
call deployments like like it's really

00:22:16,500 --> 00:22:23,170
personalized

00:22:17,620 --> 00:22:26,050
like for your for environment we have

00:22:23,170 --> 00:22:30,220
like you know a ton of Python we have

00:22:26,050 --> 00:22:32,320
been many based on django so you know

00:22:30,220 --> 00:22:36,550
this is actually like some play books

00:22:32,320 --> 00:22:38,740
that work well for us but like you know

00:22:36,550 --> 00:22:40,450
just to describe you know the basic

00:22:38,740 --> 00:22:42,809
things we do we basically built on

00:22:40,450 --> 00:22:45,190
environments and we still people at

00:22:42,809 --> 00:22:49,510
dependencies in the virtual environment

00:22:45,190 --> 00:22:52,480
and we use Bower abused like nodejs and

00:22:49,510 --> 00:22:57,540
use grunt like to do computer and

00:22:52,480 --> 00:23:00,730
computational facets I server side and I

00:22:57,540 --> 00:23:03,280
mean ass seabass as some support for

00:23:00,730 --> 00:23:06,880
some prefer these tools and especially

00:23:03,280 --> 00:23:10,030
NPM and it doesn't support Bauer but I

00:23:06,880 --> 00:23:14,260
can always run shell commands so we can

00:23:10,030 --> 00:23:17,830
run Bower install a shell command use

00:23:14,260 --> 00:23:20,590
grunts oh just trigger a shell command

00:23:17,830 --> 00:23:25,150
to run the grand compilation server side

00:23:20,590 --> 00:23:27,400
and there's some you know style

00:23:25,150 --> 00:23:29,950
pressured with Django like you basically

00:23:27,400 --> 00:23:33,970
collect all the static files you run the

00:23:29,950 --> 00:23:36,550
migrations you don't run immigration

00:23:33,970 --> 00:23:41,650
solely in the case emigration so they

00:23:36,550 --> 00:23:44,770
are not already applied and yeah I mean

00:23:41,650 --> 00:23:48,790
there is some setup to do that using

00:23:44,770 --> 00:23:51,100
whiskey so when and when we finish all

00:23:48,790 --> 00:23:53,290
this we are starting whiskey or salary

00:23:51,100 --> 00:24:01,120
over the style you know everything we

00:23:53,290 --> 00:24:04,450
need okay so basically in this extra

00:24:01,120 --> 00:24:06,490
code that we have like this or like it

00:24:04,450 --> 00:24:09,160
gets a bit trickier because thus like

00:24:06,490 --> 00:24:11,590
you know just as many things that we

00:24:09,160 --> 00:24:16,120
need to add which are not no standard

00:24:11,590 --> 00:24:18,940
and then already introduced the

00:24:16,120 --> 00:24:22,540
conditioners conditioners are basically

00:24:18,940 --> 00:24:25,120
can be applied on on any task and it's

00:24:22,540 --> 00:24:29,890
just like an extra line saying one and

00:24:25,120 --> 00:24:31,460
then an expression expression is is all

00:24:29,890 --> 00:24:37,580
later using ginger

00:24:31,460 --> 00:24:40,580
oh the power center for free in this

00:24:37,580 --> 00:24:42,559
case like we don't work like what we

00:24:40,580 --> 00:24:45,500
deploy something we need to know what

00:24:42,559 --> 00:24:48,350
environment we're deploying so we first

00:24:45,500 --> 00:24:52,549
a failure if the app environment is not

00:24:48,350 --> 00:25:01,539
defined yeah i mean that's quite easy we

00:24:52,549 --> 00:25:06,799
just want to know the environment okay

00:25:01,539 --> 00:25:09,110
it's another operation that we found by

00:25:06,799 --> 00:25:14,570
useful and we used this in in a few

00:25:09,110 --> 00:25:16,610
places a register operation and the idea

00:25:14,570 --> 00:25:19,929
behind the register is that I mean you

00:25:16,610 --> 00:25:24,409
can register a variable name and that

00:25:19,929 --> 00:25:26,960
variable name at the end of idea at the

00:25:24,409 --> 00:25:29,000
kind of the end the end of the execution

00:25:26,960 --> 00:25:33,440
of the task will contain some

00:25:29,000 --> 00:25:35,750
information about the task and so the

00:25:33,440 --> 00:25:39,169
problem we had is we were like I want to

00:25:35,750 --> 00:25:41,750
deploy it reduction only the version of

00:25:39,169 --> 00:25:45,470
the website we saw art been tagged with

00:25:41,750 --> 00:25:47,120
a version because I know if the been

00:25:45,470 --> 00:25:51,140
tagged with a version die they are

00:25:47,120 --> 00:25:56,149
stable so they be deployed and this node

00:25:51,140 --> 00:25:59,929
tux guitar support install magnetic

00:25:56,149 --> 00:26:04,220
model to tax to rig it tags but you can

00:25:59,929 --> 00:26:08,510
still use a shock command as Sri Lanka

00:26:04,220 --> 00:26:11,750
tag we put the output of this command in

00:26:08,510 --> 00:26:15,010
the get tax variable and then we can I

00:26:11,750 --> 00:26:21,080
use that that variable in a conditional

00:26:15,010 --> 00:26:25,100
later on in this case like the condition

00:26:21,080 --> 00:26:29,240
is C production and the tag is not in

00:26:25,100 --> 00:26:31,220
the guitars list in that case we need to

00:26:29,240 --> 00:26:33,289
fail like I don't want to deploy to

00:26:31,220 --> 00:26:39,230
production version at they know they

00:26:33,289 --> 00:26:43,760
don't be tested yeah and one thing to

00:26:39,230 --> 00:26:44,650
add is get tags basically contains many

00:26:43,760 --> 00:26:46,750
properties

00:26:44,650 --> 00:26:49,360
and one of these properties is the

00:26:46,750 --> 00:26:53,650
standard output but I also contains x

00:26:49,360 --> 00:27:00,940
equals like the time and this command

00:26:53,650 --> 00:27:02,770
took many other things and yet just just

00:27:00,940 --> 00:27:08,140
go and track check the website as

00:27:02,770 --> 00:27:14,890
written everything there and one thing

00:27:08,140 --> 00:27:19,840
we use a lot in in a lot of places if is

00:27:14,890 --> 00:27:21,940
it this with items and so sometimes you

00:27:19,840 --> 00:27:25,960
want to run the same at the same action

00:27:21,940 --> 00:27:28,870
multiple times unlike many packages or

00:27:25,960 --> 00:27:32,820
you install like for example like many

00:27:28,870 --> 00:27:35,080
peopie cages or many Debian packages and

00:27:32,820 --> 00:27:37,510
what you can do is repeat the same

00:27:35,080 --> 00:27:41,370
action copy and pasting it like for

00:27:37,510 --> 00:27:44,110
every package and in mind makes sense

00:27:41,370 --> 00:27:48,880
this certainly like like a nicer way to

00:27:44,110 --> 00:27:51,460
do it and so you basically run the same

00:27:48,880 --> 00:27:54,880
action it's basically a loop you run the

00:27:51,460 --> 00:27:57,010
same action on on many many items and

00:27:54,880 --> 00:28:06,970
this case want to store gift or ailment

00:27:57,010 --> 00:28:10,050
supervisor with pick another that nice

00:28:06,970 --> 00:28:15,450
things that there is in SE ball is

00:28:10,050 --> 00:28:17,860
something cool facts facts are and

00:28:15,450 --> 00:28:21,190
basically data coming from the server

00:28:17,860 --> 00:28:24,100
from the current server and ethical

00:28:21,190 --> 00:28:28,000
facts maybe like the a plane for example

00:28:24,100 --> 00:28:31,690
or the IP addresses that is machinist or

00:28:28,000 --> 00:28:36,790
the mount points or distribution name

00:28:31,690 --> 00:28:40,270
distribution version and date about CPU

00:28:36,790 --> 00:28:42,730
about disks and you may need to do some

00:28:40,270 --> 00:28:45,400
of these some of the information

00:28:42,730 --> 00:28:48,880
when you for example right you know

00:28:45,400 --> 00:28:53,020
bright template files or or you directly

00:28:48,880 --> 00:28:56,500
in the decibel playbook in this case

00:28:53,020 --> 00:28:58,960
like we as a company you set and they

00:28:56,500 --> 00:29:01,720
will like I want to let everybody know

00:28:58,960 --> 00:29:05,740
that like something free in deploying a

00:29:01,720 --> 00:29:09,669
particular server with sensible as a

00:29:05,740 --> 00:29:12,250
model cricket it's already done for you

00:29:09,669 --> 00:29:15,360
so you on you no need to you know write

00:29:12,250 --> 00:29:18,790
any Python code to talk to each other

00:29:15,360 --> 00:29:21,880
you specify the role especially the

00:29:18,790 --> 00:29:26,500
message and the message the strain that

00:29:21,880 --> 00:29:29,890
can be can be a template and basically

00:29:26,500 --> 00:29:32,860
what happens is this action will be run

00:29:29,890 --> 00:29:36,910
for every seven days in your playbook

00:29:32,860 --> 00:29:39,340
and it's time this action is run you

00:29:36,910 --> 00:29:43,750
will get like a different message and

00:29:39,340 --> 00:29:47,350
say they deploy to www deploy to wrote

00:29:43,750 --> 00:29:51,630
every or Austria means and you get as

00:29:47,350 --> 00:29:51,630
many times as as you have service okay

00:29:56,160 --> 00:30:02,260
so add the selected packages in SE ball

00:29:59,919 --> 00:30:05,470
and as I mean it's art it's just one of

00:30:02,260 --> 00:30:08,049
the many and there are some which will

00:30:05,470 --> 00:30:11,140
be most under than others some some of

00:30:08,049 --> 00:30:14,380
them are really specific on with ec2 or

00:30:11,140 --> 00:30:16,990
with this solution or like some

00:30:14,380 --> 00:30:22,120
something or line interface to back

00:30:16,990 --> 00:30:26,860
tracking system and the actions all

00:30:22,120 --> 00:30:28,470
modules that we normally use our apt

00:30:26,860 --> 00:30:33,970
because we're using like kubuntu

00:30:28,470 --> 00:30:38,169
everywhere and service funeral like can

00:30:33,970 --> 00:30:41,530
interface with in script pip packages if

00:30:38,169 --> 00:30:45,540
you're not stupid packages and we just

00:30:41,530 --> 00:30:49,110
get the province get is is quite limited

00:30:45,540 --> 00:30:54,090
you can only suck our repositories and

00:30:49,110 --> 00:31:01,220
you can do any any other get operation

00:30:54,090 --> 00:31:04,080
which are many and there's a file and

00:31:01,220 --> 00:31:05,760
module if you'll attack the presence of

00:31:04,080 --> 00:31:11,370
directories you can detect the presence

00:31:05,760 --> 00:31:15,059
of files links and and then this some

00:31:11,370 --> 00:31:17,429
more module specific tool and the pike

00:31:15,059 --> 00:31:22,860
award like supervisor for example is one

00:31:17,429 --> 00:31:25,740
or jungle manage their interfaces to run

00:31:22,860 --> 00:31:34,130
jungle management commands or supervisor

00:31:25,740 --> 00:31:37,080
commands and by the side does many more

00:31:34,130 --> 00:31:40,679
so just to give you like an idea of the

00:31:37,080 --> 00:31:42,720
sides like we have more than thousand

00:31:40,679 --> 00:31:46,740
alliance or playbooks do a lot of things

00:31:42,720 --> 00:31:48,659
with them and we have like around grab

00:31:46,740 --> 00:31:50,549
for environments someone a production

00:31:48,659 --> 00:31:54,330
environment some then staging

00:31:50,549 --> 00:31:55,980
environment we actually have more than

00:31:54,330 --> 00:32:00,360
the production production machines

00:31:55,980 --> 00:32:05,580
because I just just added a couple your

00:32:00,360 --> 00:32:11,190
unlike pascual we're on neo4j 19x sorta

00:32:05,580 --> 00:32:14,630
machines and as basically like the way

00:32:11,190 --> 00:32:18,090
you set up all of them is my similar

00:32:14,630 --> 00:32:20,399
there's a bit of extra set up for solar

00:32:18,090 --> 00:32:25,559
new for Jay because they based on the

00:32:20,399 --> 00:32:30,630
JVM so and we have like that machines

00:32:25,559 --> 00:32:33,120
like every one of the team as like both

00:32:30,630 --> 00:32:36,720
my local machine and and the dissolution

00:32:33,120 --> 00:32:40,820
box they can deploy any time and we have

00:32:36,720 --> 00:32:43,770
some brass machines we run like on

00:32:40,820 --> 00:32:48,330
multiple cloud providers like AWS

00:32:43,770 --> 00:32:52,770
dissolution Abby breaker box is taught

00:32:48,330 --> 00:32:55,830
with sensible so busy it's finest we do

00:32:52,770 --> 00:32:58,919
bacon up up and then you're on step and

00:32:55,830 --> 00:33:02,970
provision automatically so you actually

00:32:58,919 --> 00:33:06,890
get like the final server takes a while

00:33:02,970 --> 00:33:06,890
but like until we get it and

00:33:08,520 --> 00:33:16,590
yeah i mean that's getting to the end of

00:33:13,059 --> 00:33:19,600
the talk as you know like a few

00:33:16,590 --> 00:33:24,550
suggestions just try to keep server

00:33:19,600 --> 00:33:26,020
stateless if you have like you know

00:33:24,550 --> 00:33:28,990
especially when you scale like you

00:33:26,020 --> 00:33:31,330
really need to like not for example I

00:33:28,990 --> 00:33:34,870
store file on a particular server and

00:33:31,330 --> 00:33:37,240
not another because that file will

00:33:34,870 --> 00:33:40,450
become like state and then that's kind

00:33:37,240 --> 00:33:41,890
of the same that we stopped you when you

00:33:40,450 --> 00:33:44,860
have to scale when you have two more

00:33:41,890 --> 00:33:48,309
than more than one web server more like

00:33:44,860 --> 00:33:50,260
you know many web service and the nice

00:33:48,309 --> 00:33:54,280
thing about DevOps is kind of allows you

00:33:50,260 --> 00:33:57,190
to do things in the right place so you

00:33:54,280 --> 00:34:00,390
can do like I PE joke do location for

00:33:57,190 --> 00:34:04,500
example both in code or or in server

00:34:00,390 --> 00:34:08,409
like infrastructure level just like and

00:34:04,500 --> 00:34:10,270
models frenzy next to do that and so you

00:34:08,409 --> 00:34:13,720
might want to configure engine X in a

00:34:10,270 --> 00:34:19,210
way that does your location for you oh I

00:34:13,720 --> 00:34:24,030
can do it in the code and yeah I mean I

00:34:19,210 --> 00:34:24,030
think it's probably thank you very much

00:34:29,340 --> 00:34:44,140
if you have any questions so that my

00:34:41,710 --> 00:34:49,420
question is I reading the estimate an

00:34:44,140 --> 00:34:53,680
 and answers 500 do you have any

00:34:49,420 --> 00:34:57,130
need for that we like we used lube bonus

00:34:53,680 --> 00:34:58,960
sorry and so you were asking about the

00:34:57,130 --> 00:35:00,610
load balancer and a for you is like the

00:34:58,960 --> 00:35:04,240
balancer modules where we duel

00:35:00,610 --> 00:35:08,310
deployments to you talk about a specific

00:35:04,240 --> 00:35:16,780
type of load balancer tube

00:35:08,310 --> 00:35:20,320
unsympathetically periods okay we use

00:35:16,780 --> 00:35:26,080
low balancer for some of the one acted

00:35:20,320 --> 00:35:28,270
one of the environments we have the well

00:35:26,080 --> 00:35:31,420
like we still do it manually pretty much

00:35:28,270 --> 00:35:35,470
by like this sort of support like for

00:35:31,420 --> 00:35:38,740
you to load balancer and other types of

00:35:35,470 --> 00:35:42,070
Bowser by yeah I mean we don't we don't

00:35:38,740 --> 00:35:44,440
do it we we kind of do that process

00:35:42,070 --> 00:35:47,470
manually so we take the machine of the

00:35:44,440 --> 00:35:50,920
load balancer and then we deploy to that

00:35:47,470 --> 00:36:06,250
specific machine and then do this thing

00:35:50,920 --> 00:36:08,590
man on the bicycle okay so the question

00:36:06,250 --> 00:36:11,500
was about if there is a specific

00:36:08,590 --> 00:36:17,740
convention about like kind of worried

00:36:11,500 --> 00:36:19,960
put files and and a Sbarro's are the

00:36:17,740 --> 00:36:23,050
thing that in kind of forces you're not

00:36:19,960 --> 00:36:27,060
just a lot of convention so especially

00:36:23,050 --> 00:36:29,920
when you sensible and simple rules

00:36:27,060 --> 00:36:32,470
basically automatically gives you like a

00:36:29,920 --> 00:36:36,580
folder structure you need to we need to

00:36:32,470 --> 00:36:40,480
follow and when you kind of declare

00:36:36,580 --> 00:36:41,829
various sections same besides that you

00:36:40,480 --> 00:36:53,769
can pretty much come up with

00:36:41,829 --> 00:36:58,420
structuring wants yep control gets to

00:36:53,769 --> 00:37:01,809
configure Russia so how do i get to

00:36:58,420 --> 00:37:03,849
control who figures like kind of dust

00:37:01,809 --> 00:37:10,029
infrastructure sets up the

00:37:03,849 --> 00:37:12,880
infrastructure and you can lie because

00:37:10,029 --> 00:37:14,130
everything is like kind of committed to

00:37:12,880 --> 00:37:18,900
represent or you can always use the

00:37:14,130 --> 00:37:22,989
repository to do that level of control

00:37:18,900 --> 00:37:24,880
who gets deployed is I mean if you have

00:37:22,989 --> 00:37:28,150
the kind of exercise permission on the

00:37:24,880 --> 00:37:32,170
machine basically means you can run in a

00:37:28,150 --> 00:37:37,239
civil so like the the control is really

00:37:32,170 --> 00:37:39,249
kind of built on top of assets I mean

00:37:37,239 --> 00:37:42,519
there are tools that you can put on top

00:37:39,249 --> 00:37:45,880
of ansible if you know especially when

00:37:42,519 --> 00:37:48,160
use management service and the start

00:37:45,880 --> 00:37:51,430
will they release condensable tower I

00:37:48,160 --> 00:37:54,789
don't think it's free maybe 34 like some

00:37:51,430 --> 00:37:58,660
like a limit amount of service but like

00:37:54,789 --> 00:38:01,329
as it stands basically control is is on

00:37:58,660 --> 00:38:09,339
ssh so if you have that risky you can

00:38:01,329 --> 00:38:15,279
configure the system and sorry how do

00:38:09,339 --> 00:38:18,729
you copy this key singing management

00:38:15,279 --> 00:38:20,949
server yeah everybody has permission to

00:38:18,729 --> 00:38:26,099
access management server get to

00:38:20,949 --> 00:38:26,099
configure infrastructure yeah or yeah

00:38:26,690 --> 00:38:35,400
Shh just some of emotions the way the

00:38:31,620 --> 00:38:38,160
way we do it now is basically like I

00:38:35,400 --> 00:38:41,340
have the permission to like kind of

00:38:38,160 --> 00:38:44,370
apply this configuration files you

00:38:41,340 --> 00:38:48,380
scrape so no machines and setting up

00:38:44,370 --> 00:38:48,380
like a madman 7 now to do that

00:39:09,980 --> 00:39:35,460
so sorry the if you have an arrow endure

00:39:13,470 --> 00:39:38,450
in the playbook so the problem is if

00:39:35,460 --> 00:39:42,030
there is an error in the in the playbook

00:39:38,450 --> 00:39:45,150
let's say for example like you copy on

00:39:42,030 --> 00:39:48,080
configuration file and then I can never

00:39:45,150 --> 00:39:53,340
happen so then this didn't didn't run

00:39:48,080 --> 00:39:55,950
like how do you do that yeah that's

00:39:53,340 --> 00:40:01,140
that's really annoying and why normally

00:39:55,950 --> 00:40:04,320
do is like you can either like force a

00:40:01,140 --> 00:40:06,570
change in the file or like I'm sure they

00:40:04,320 --> 00:40:12,630
are like you know more clever ways to do

00:40:06,570 --> 00:40:16,490
it by yeah I'm in the store I don't I

00:40:12,630 --> 00:40:16,490
don't have a perfect solution for it

00:40:21,200 --> 00:40:26,300
that was this thank you very much again

00:40:28,559 --> 00:40:30,619

YouTube URL: https://www.youtube.com/watch?v=4dunSFkKavo


