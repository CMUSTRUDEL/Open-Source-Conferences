Title: holger krekel - packaging and testing with devpi and tox
Publication date: 2015-04-18
Playlist: EuroPython 2014
Description: 
	holger krekel - packaging and testing with devpi and tox
[EuroPython 2014]
[24 July 2014]

This talk discusses good ways to organise packaging and testing
for Python projects.  It walks through a per-company and an
open source scenario and explains how to best use the
"devpi-server" and "tox" for making sure you are delivering
good and well tested and documented packages.  As time permits, we also
discuss in-development features such as real-time mirroring and
search.

-----

The talk discusses the following tools:

- devpi-server for running an in-house or per-laptop python package server

- inheritance between package indexes and from pypi.python.org public packages

- the "devpi" client tool for uploading docs and running tests 

- running of tests through tox 

- summary view with two work flows: open source releases and in-house per-company developments 

- roadmap and in-development features of devpi and tox 

(The presenter is the main author of the tools in question).
Captions: 
	00:00:15,930 --> 00:00:21,820
okay so

00:00:19,199 --> 00:00:24,939
like Fabio mentioned already I've been

00:00:21,820 --> 00:00:27,009
doing a number of tools in testing pi

00:00:24,939 --> 00:00:30,250
test and then after some time I decided

00:00:27,009 --> 00:00:32,829
okay there's this whole thing about unit

00:00:30,250 --> 00:00:35,110
tests and PI test and nose tests and

00:00:32,829 --> 00:00:39,129
whatnot and actually it would be nice to

00:00:35,110 --> 00:00:40,540
have a really unifying experience when

00:00:39,129 --> 00:00:42,879
running tests against the Python

00:00:40,540 --> 00:00:45,850
application so that's why I went for

00:00:42,879 --> 00:00:48,489
also writing talks which is kind of like

00:00:45,850 --> 00:00:50,110
a meter test runner and that can

00:00:48,489 --> 00:00:52,809
actually invoke those tests our unit

00:00:50,110 --> 00:00:54,579
test app I test and after while I

00:00:52,809 --> 00:00:57,309
thought yeah that's all very nice but

00:00:54,579 --> 00:00:59,559
the real problems when you want to have

00:00:57,309 --> 00:01:02,530
something like quality assurance and

00:00:59,559 --> 00:01:04,420
your projects is really also about

00:01:02,530 --> 00:01:08,590
release management so you actually have

00:01:04,420 --> 00:01:10,270
several packages dependencies and I have

00:01:08,590 --> 00:01:12,820
that with my own open source projects

00:01:10,270 --> 00:01:15,640
but also with people I and companies I

00:01:12,820 --> 00:01:17,619
consult for and that's why I also went

00:01:15,640 --> 00:01:19,660
for basically the next level to have

00:01:17,619 --> 00:01:22,390
something that manages the packages then

00:01:19,660 --> 00:01:24,100
I also that also get tested but all the

00:01:22,390 --> 00:01:27,040
time coming very much from this kind of

00:01:24,100 --> 00:01:31,110
like QA and testing perspective so

00:01:27,040 --> 00:01:36,430
that's when deaf pi actually was born

00:01:31,110 --> 00:01:40,570
the Deaf PI system is basically there to

00:01:36,430 --> 00:01:44,229
help you with pi PI related release

00:01:40,570 --> 00:01:47,490
workflows and quality assurance it

00:01:44,229 --> 00:01:50,560
currently consists in version 2 lat 0 of

00:01:47,490 --> 00:01:54,340
three main components which is the core

00:01:50,560 --> 00:01:55,840
def pserver I'm going to talk about all

00:01:54,340 --> 00:01:58,659
of these components in details the

00:01:55,840 --> 00:02:02,020
server that actually provides the pipe I

00:01:58,659 --> 00:02:03,700
caching index and your private indexes

00:02:02,020 --> 00:02:05,950
where you might not actually want to

00:02:03,700 --> 00:02:09,690
publish from but you actually want to

00:02:05,950 --> 00:02:12,220
use that within your organization it

00:02:09,690 --> 00:02:16,890
recently released is the def pi web

00:02:12,220 --> 00:02:20,170
plug-in which provides web interfaces

00:02:16,890 --> 00:02:23,440
also for your documentation a few other

00:02:20,170 --> 00:02:26,019
things and search across metadata and

00:02:23,440 --> 00:02:28,480
documentation and then there's the third

00:02:26,019 --> 00:02:30,710
thing that you don't have to use

00:02:28,480 --> 00:02:32,710
actually but it's

00:02:30,710 --> 00:02:35,450
helpful if you have to deal with

00:02:32,710 --> 00:02:37,400
development and production indexes and

00:02:35,450 --> 00:02:39,680
so on and that's a command-line tool

00:02:37,400 --> 00:02:43,910
that basically drives the well-known

00:02:39,680 --> 00:02:47,420
other tools like pip and easy install

00:02:43,910 --> 00:02:53,930
and setup that pie upload and things

00:02:47,420 --> 00:02:55,220
like this so def myself in nexus one of

00:02:53,930 --> 00:02:57,610
the main purposes at the beginning that

00:02:55,220 --> 00:03:01,130
was before pie pie pie from arc grew

00:02:57,610 --> 00:03:05,450
content delivery network was that you

00:03:01,130 --> 00:03:08,150
can have a local self-updating pie p

00:03:05,450 --> 00:03:10,730
cash so you basically work against your

00:03:08,150 --> 00:03:13,910
local index if the package is not there

00:03:10,730 --> 00:03:15,980
it goes off to PI P PI for Mark grabs it

00:03:13,910 --> 00:03:18,080
and the next time you don't even need to

00:03:15,980 --> 00:03:21,170
be online you don't even need to have

00:03:18,080 --> 00:03:23,120
online connectivity it will just satisfy

00:03:21,170 --> 00:03:25,280
everything completely offline from your

00:03:23,120 --> 00:03:27,410
local cache so everything that you

00:03:25,280 --> 00:03:30,980
install basically gets cached including

00:03:27,410 --> 00:03:34,430
the index information and it uses the

00:03:30,980 --> 00:03:36,560
change like protocol with pi PI so that

00:03:34,430 --> 00:03:38,390
it from time to time it asks pi PI is

00:03:36,560 --> 00:03:41,540
there anything new for the projects I

00:03:38,390 --> 00:03:43,820
care for if so it basically invalidates

00:03:41,540 --> 00:03:47,270
the cash so the next time you ask it's

00:03:43,820 --> 00:03:48,710
going to update the cache as with every

00:03:47,270 --> 00:03:50,810
cache cache invalidation is a very

00:03:48,710 --> 00:03:55,970
important topic and this is actually

00:03:50,810 --> 00:03:59,000
using the official pep 381 API it also

00:03:55,970 --> 00:04:00,590
manages multiple private indexes for you

00:03:59,000 --> 00:04:06,320
if you want to implement staging and

00:04:00,590 --> 00:04:08,360
each of these indexes supports running

00:04:06,320 --> 00:04:12,490
against it with pip or easy install or

00:04:08,360 --> 00:04:17,030
built out and it supports the typical

00:04:12,490 --> 00:04:21,410
setup by upload upload Docs and so on

00:04:17,030 --> 00:04:28,010
commands how you can then get packages

00:04:21,410 --> 00:04:31,070
into def by staging there's one feature

00:04:28,010 --> 00:04:33,440
that distinguishes the FBI from other

00:04:31,070 --> 00:04:36,830
things other indexes that you may know

00:04:33,440 --> 00:04:39,990
in that it provides an aggregation or

00:04:36,830 --> 00:04:41,760
inheritance feature so here

00:04:39,990 --> 00:04:44,790
this is one possible layout that some

00:04:41,760 --> 00:04:47,340
people use you have the so called root

00:04:44,790 --> 00:04:49,650
pi PI that's the cash i talked about you

00:04:47,340 --> 00:04:51,420
can directly use that if you don't care

00:04:49,650 --> 00:04:53,300
for private indexes and forget about the

00:04:51,420 --> 00:04:56,160
rest but here we actually have a

00:04:53,300 --> 00:04:58,590
production index which contains the

00:04:56,160 --> 00:05:01,140
private indexes the private packages

00:04:58,590 --> 00:05:04,260
that you don't want to publish on pie

00:05:01,140 --> 00:05:09,240
pie pie from arc which but which might

00:05:04,260 --> 00:05:11,160
depend on pi PI release files that you

00:05:09,240 --> 00:05:14,220
don't have in your private index so you

00:05:11,160 --> 00:05:16,140
may have a web application that depends

00:05:14,220 --> 00:05:18,510
on pyramid and permanent depends on lots

00:05:16,140 --> 00:05:20,790
of other things and those all come from

00:05:18,510 --> 00:05:22,830
root pi PI but if you work against the

00:05:20,790 --> 00:05:24,990
company production index you're going to

00:05:22,830 --> 00:05:28,530
see one unified view of your private

00:05:24,990 --> 00:05:31,230
packages and all of the pie pie pie for

00:05:28,530 --> 00:05:34,320
mark packages and then if you want to do

00:05:31,230 --> 00:05:36,630
some kind of QA workflow you also can do

00:05:34,320 --> 00:05:38,970
a Development Index for example

00:05:36,630 --> 00:05:40,770
team-based that's what some companies

00:05:38,970 --> 00:05:42,720
are doing and there you just put your in

00:05:40,770 --> 00:05:44,400
development releases that are not ready

00:05:42,720 --> 00:05:46,800
to be deployed on your web servers maybe

00:05:44,400 --> 00:05:52,040
but they can be used for further testing

00:05:46,800 --> 00:05:55,320
and one important thing here is that

00:05:52,040 --> 00:05:58,310
your production index is actually

00:05:55,320 --> 00:06:03,990
somewhat protected from malicious pi PI

00:05:58,310 --> 00:06:05,580
packages and I'm going to tell this

00:06:03,990 --> 00:06:07,920
which is also interesting if you don't

00:06:05,580 --> 00:06:10,620
use the FBI something which I call the

00:06:07,920 --> 00:06:12,810
higher version attack there's also

00:06:10,620 --> 00:06:16,520
variants of this attack let's say you

00:06:12,810 --> 00:06:18,990
have a credit card release file that

00:06:16,520 --> 00:06:21,390
contains your credit card processing and

00:06:18,990 --> 00:06:24,810
your web application you put this on a

00:06:21,390 --> 00:06:27,270
private index and somebody that's the

00:06:24,810 --> 00:06:29,280
attacker actually uploads credit cards

00:06:27,270 --> 00:06:34,610
with a slightly higher version number 2

00:06:29,280 --> 00:06:36,630
pi PI now if i if i install against the

00:06:34,610 --> 00:06:38,880
against the production index that

00:06:36,630 --> 00:06:40,560
inherits from root pi PI with this

00:06:38,880 --> 00:06:43,230
install command and actually going to

00:06:40,560 --> 00:06:44,850
get the pie pio version because i didn't

00:06:43,230 --> 00:06:47,870
know that somebody actually went and

00:06:44,850 --> 00:06:51,990
occupied my private name on pie pie pie

00:06:47,870 --> 00:06:53,440
pie is a package wiki anybody can

00:06:51,990 --> 00:06:55,390
basically publish any kind of package

00:06:53,440 --> 00:06:58,180
so if you have private package names

00:06:55,390 --> 00:07:01,390
that are not yet registered at pi PI

00:06:58,180 --> 00:07:09,010
somebody can go there and do that it's

00:07:01,390 --> 00:07:13,690
very easy and the I don't know I didn't

00:07:09,010 --> 00:07:15,130
try myself but I'm pretty sure i could

00:07:13,690 --> 00:07:18,400
get I guess something like a hundred

00:07:15,130 --> 00:07:20,830
watts per day or so with something like

00:07:18,400 --> 00:07:23,830
this that's not the only problem that is

00:07:20,830 --> 00:07:26,920
there but I'm just saying that if you

00:07:23,830 --> 00:07:30,310
have something that somehow merges the

00:07:26,920 --> 00:07:33,100
world of the pie p python org wiki with

00:07:30,310 --> 00:07:35,230
your private and nexus then you get into

00:07:33,100 --> 00:07:36,730
this kind of problem and that's also the

00:07:35,230 --> 00:07:39,430
case actually if you forget about FP

00:07:36,730 --> 00:07:43,210
server also the problem if you use pip

00:07:39,430 --> 00:07:44,920
install extra index UL because then the

00:07:43,210 --> 00:07:47,500
merging is actually done on the client

00:07:44,920 --> 00:07:49,840
side but it does exactly that it

00:07:47,500 --> 00:07:51,520
actually takes the higher version so you

00:07:49,840 --> 00:07:53,650
you end up you thought you install

00:07:51,520 --> 00:07:54,820
something from your private index but

00:07:53,650 --> 00:07:57,880
you're actually installing something

00:07:54,820 --> 00:07:59,640
from from pie pie so that's a bit of a

00:07:57,880 --> 00:08:02,620
problem the FBI in version 2 that 0

00:07:59,640 --> 00:08:05,080
prevents that because it says by default

00:08:02,620 --> 00:08:07,960
if you upload anything to add FBI

00:08:05,080 --> 00:08:10,720
private index any kind of further look

00:08:07,960 --> 00:08:13,810
up even if you inherit from the pipe I

00:08:10,720 --> 00:08:15,850
cash will be prohibited and you have to

00:08:13,810 --> 00:08:17,830
whitelist it if you actually have a

00:08:15,850 --> 00:08:19,180
package that comes from pie pie pie from

00:08:17,830 --> 00:08:21,100
art because it's an open source release

00:08:19,180 --> 00:08:24,250
of your company then you have to

00:08:21,100 --> 00:08:26,530
whitelist it otherwise all pie pie pie

00:08:24,250 --> 00:08:28,450
is ignored basically if you basically

00:08:26,530 --> 00:08:31,840
install from the production index credit

00:08:28,450 --> 00:08:34,360
cards and it's not whitelisted so by

00:08:31,840 --> 00:08:36,330
default pi PI is not considered because

00:08:34,360 --> 00:08:38,680
there is a package in your private index

00:08:36,330 --> 00:08:42,550
so it's basically trying to prevent this

00:08:38,680 --> 00:08:44,200
kind of error but that's not the only

00:08:42,550 --> 00:08:47,170
way if you want to be a bit more careful

00:08:44,200 --> 00:08:51,850
because there's other attacks for

00:08:47,170 --> 00:08:54,030
example if you have if you have typos

00:08:51,850 --> 00:08:56,710
somebody in your company on the laptops

00:08:54,030 --> 00:08:59,680
installing Pyramid without a d at the

00:08:56,710 --> 00:09:01,690
end or but I do sometimes pip install

00:08:59,680 --> 00:09:04,450
pie tests so if you want to get hold of

00:09:01,690 --> 00:09:05,880
my machine it's very easy because you

00:09:04,450 --> 00:09:09,090
just need to register the pack

00:09:05,880 --> 00:09:10,800
pi tests without the teeth for some

00:09:09,090 --> 00:09:13,500
reason I sometimes forget this last

00:09:10,800 --> 00:09:18,930
letter but currently registered so it's

00:09:13,500 --> 00:09:20,460
a good chance you get my machine so if

00:09:18,930 --> 00:09:22,560
you actually want to this is really a

00:09:20,460 --> 00:09:24,780
problem because I mean you can imagine

00:09:22,560 --> 00:09:27,120
there's some very popular packages if

00:09:24,780 --> 00:09:29,280
you if you register variants of this

00:09:27,120 --> 00:09:31,010
kind of package names you will

00:09:29,280 --> 00:09:33,450
eventually from the millions of users

00:09:31,010 --> 00:09:35,640
literally across the world you will get

00:09:33,450 --> 00:09:38,700
some people actually and I checked with

00:09:35,640 --> 00:09:40,050
the PI P admins and there are actually

00:09:38,700 --> 00:09:42,090
you can see that in the server logs

00:09:40,050 --> 00:09:45,180
there are actually a lot of instances of

00:09:42,090 --> 00:09:46,980
mistyped things so it's clear you can

00:09:45,180 --> 00:09:48,240
actually exploit that okay but this is

00:09:46,980 --> 00:09:50,700
not about the techno vectors against

00:09:48,240 --> 00:09:53,040
pipe I would be a fun talk by itself

00:09:50,700 --> 00:09:56,970
this is about if you want to be more

00:09:53,040 --> 00:09:59,970
careful then you probably should not

00:09:56,970 --> 00:10:02,850
inherit directly but you rather have

00:09:59,970 --> 00:10:04,950
root pi PI as the self-updating cash and

00:10:02,850 --> 00:10:06,540
you work with that and development but

00:10:04,950 --> 00:10:09,450
then when you want to have a package in

00:10:06,540 --> 00:10:12,420
your including dependencies in your

00:10:09,450 --> 00:10:16,830
company we actually push it explicitly

00:10:12,420 --> 00:10:18,180
into your production index and they're

00:10:16,830 --> 00:10:21,240
sorry and you interviewed development

00:10:18,180 --> 00:10:23,880
index right and then basically you just

00:10:21,240 --> 00:10:25,560
push packages around the indices and

00:10:23,880 --> 00:10:28,260
that's something that def p IMX easy or

00:10:25,560 --> 00:10:29,820
somewhat is it easier and you upload

00:10:28,260 --> 00:10:32,190
your own packages to company death and

00:10:29,820 --> 00:10:35,730
you won't have any kind of these attack

00:10:32,190 --> 00:10:37,380
problems like typos and so on suddenly

00:10:35,730 --> 00:10:40,500
if people your production machines

00:10:37,380 --> 00:10:42,090
cannot be easily compromised okay this

00:10:40,500 --> 00:10:44,580
is just some background on how you can

00:10:42,090 --> 00:10:51,740
organize and what you might want to be

00:10:44,580 --> 00:10:55,440
careful about regarding indexes the the

00:10:51,740 --> 00:10:57,150
the way how you can organize indexes for

00:10:55,440 --> 00:10:59,490
your teams and also maybe

00:10:57,150 --> 00:11:01,800
platform-specific indexes that contain

00:10:59,490 --> 00:11:03,780
wheels for your deployment platforms and

00:11:01,800 --> 00:11:07,050
so on there's several variants about

00:11:03,780 --> 00:11:09,660
this and kind of best practices emerging

00:11:07,050 --> 00:11:13,140
which are not yet documented but this is

00:11:09,660 --> 00:11:16,140
kind of a start on this so one feature

00:11:13,140 --> 00:11:19,410
that came up came out last week actually

00:11:16,140 --> 00:11:21,269
its replication because that's what one

00:11:19,410 --> 00:11:23,339
funding company who actually gave some

00:11:21,269 --> 00:11:25,470
money for development for the open

00:11:23,339 --> 00:11:27,720
source filament wanted to have is that

00:11:25,470 --> 00:11:30,389
you can now run def p server and

00:11:27,720 --> 00:11:32,129
replication mode that means the the

00:11:30,389 --> 00:11:34,440
first command actually starts the server

00:11:32,129 --> 00:11:36,569
it's the full command that you run on

00:11:34,440 --> 00:11:39,629
port 3000 and then you start replica

00:11:36,569 --> 00:11:42,120
somewhere else you in this case I just

00:11:39,629 --> 00:11:44,819
wanted also a local host i specify that

00:11:42,120 --> 00:11:48,300
the server state goes into a separate

00:11:44,819 --> 00:11:50,850
directory the replica one and then I say

00:11:48,300 --> 00:11:52,800
okay my master actually is this so the

00:11:50,850 --> 00:11:56,189
second invocation actually starts a

00:11:52,800 --> 00:12:01,829
replication instance and this works by

00:11:56,189 --> 00:12:04,889
HTTP between the replica and master and

00:12:01,829 --> 00:12:06,870
it maintains a full fail over copy so

00:12:04,889 --> 00:12:08,490
that when you actually upload something

00:12:06,870 --> 00:12:10,170
to the mass that's you can also upload

00:12:08,490 --> 00:12:12,720
something to the replica it has the full

00:12:10,170 --> 00:12:15,930
interface and that will only complete if

00:12:12,720 --> 00:12:17,220
the packages also at the master so at

00:12:15,930 --> 00:12:18,660
any point in time where you upload

00:12:17,220 --> 00:12:23,759
something you will have it at least on

00:12:18,660 --> 00:12:25,670
two hosts and all rights it's a kind of

00:12:23,759 --> 00:12:30,750
like a simplified replication model

00:12:25,670 --> 00:12:33,360
always go through the master and that

00:12:30,750 --> 00:12:35,310
kind of seems to work quite well already

00:12:33,360 --> 00:12:37,589
although there might be some buckets out

00:12:35,310 --> 00:12:40,860
loud last week I've been running it

00:12:37,589 --> 00:12:43,680
myself in instances and now some

00:12:40,860 --> 00:12:46,199
companies are starting to use the

00:12:43,680 --> 00:12:48,600
replication also in their settings the

00:12:46,199 --> 00:12:51,689
Deaf pi web is the second big feature

00:12:48,600 --> 00:12:53,399
that came out last week from mostly

00:12:51,689 --> 00:12:59,130
implemented from Florian where is he

00:12:53,399 --> 00:13:02,850
there we have a refectory f pi to use

00:12:59,130 --> 00:13:04,470
permit everywhere and death by web

00:13:02,850 --> 00:13:07,589
actually is a very nice web interface

00:13:04,470 --> 00:13:09,509
now that shows you metadata and summary

00:13:07,589 --> 00:13:12,029
information description and

00:13:09,509 --> 00:13:15,240
documentation so it's you're basically

00:13:12,029 --> 00:13:19,279
read the docs read the docs in the

00:13:15,240 --> 00:13:23,790
company basically server as well and

00:13:19,279 --> 00:13:28,259
maybe a show that quickly show you so

00:13:23,790 --> 00:13:30,740
this is my semi public instance this is

00:13:28,259 --> 00:13:33,649
like for example my development index

00:13:30,740 --> 00:13:35,990
and one of the things you see that for

00:13:33,649 --> 00:13:38,779
example the Deaf pserver 201 release we

00:13:35,990 --> 00:13:42,380
did that's the release file and here you

00:13:38,779 --> 00:13:44,839
see tests that were performed on the

00:13:42,380 --> 00:13:47,000
various on the truth platforms here

00:13:44,839 --> 00:13:49,790
win32 and linux on the different

00:13:47,000 --> 00:13:54,050
interpreters and i can basically look

00:13:49,790 --> 00:13:58,339
into that and see that this was executed

00:13:54,050 --> 00:14:01,880
and the same way of course i would see

00:13:58,339 --> 00:14:06,260
if there's a failure somewhere also if i

00:14:01,880 --> 00:14:09,110
have documentation i can go in here or i

00:14:06,260 --> 00:14:12,320
can just say show me okay what do you

00:14:09,110 --> 00:14:16,130
know about deaf pie and jenkins that's a

00:14:12,320 --> 00:14:19,820
full index full def pserver search and

00:14:16,130 --> 00:14:24,910
then i see okay there's some links to

00:14:19,820 --> 00:14:27,290
that and i get to the integration part

00:14:24,910 --> 00:14:29,209
with Jenkins on the left by

00:14:27,290 --> 00:14:30,880
documentation and that was that is just

00:14:29,209 --> 00:14:33,620
there because I uploaded the

00:14:30,880 --> 00:14:36,620
documentation to the index it gets

00:14:33,620 --> 00:14:42,230
unpacked you get URLs for that and it's

00:14:36,620 --> 00:14:48,260
indexed in the in the search so that's

00:14:42,230 --> 00:14:53,390
also quite powerful facility so the last

00:14:48,260 --> 00:14:56,690
component is def by client it's a

00:14:53,390 --> 00:15:01,339
relatively thin wrapper around Pip and

00:14:56,690 --> 00:15:03,470
some setup pi invocations it also

00:15:01,339 --> 00:15:08,480
performs the actual upload so it always

00:15:03,470 --> 00:15:10,610
uses ssl and some other bits and it

00:15:08,480 --> 00:15:12,350
maintains on your local machine any kind

00:15:10,610 --> 00:15:15,589
of login information so you basically

00:15:12,350 --> 00:15:17,480
say okay I login and then I use a

00:15:15,589 --> 00:15:19,010
certain index I upload something and

00:15:17,480 --> 00:15:21,140
then I don't need to relook in all the

00:15:19,010 --> 00:15:22,520
time because that token I get from the

00:15:21,140 --> 00:15:26,079
server is going to be valid for 10 hours

00:15:22,520 --> 00:15:29,060
and def peak line basically stores this

00:15:26,079 --> 00:15:31,459
temporary authentication information it

00:15:29,060 --> 00:15:33,770
also has experimental support now for

00:15:31,459 --> 00:15:39,829
SSL client certifications if you want to

00:15:33,770 --> 00:15:42,589
step up your scenario to have encryption

00:15:39,829 --> 00:15:46,770
and authentication through ssl

00:15:42,589 --> 00:15:48,930
the commands that def p client offers

00:15:46,770 --> 00:15:50,640
are used to actually set the index you

00:15:48,930 --> 00:15:53,700
want to vote on development or just root

00:15:50,640 --> 00:15:56,279
pi PI or your production server upload

00:15:53,700 --> 00:15:57,959
is for helping you with the uploading

00:15:56,279 --> 00:16:00,180
files and ducks and so on from a check

00:15:57,959 --> 00:16:03,240
out test is the one that produces the

00:16:00,180 --> 00:16:04,920
test it evokes talks actually and pushes

00:16:03,240 --> 00:16:06,899
the operation that actually pushes a

00:16:04,920 --> 00:16:08,580
release including all of its

00:16:06,899 --> 00:16:12,390
documentation and release files from one

00:16:08,580 --> 00:16:13,980
index to the other and pip or other

00:16:12,390 --> 00:16:16,010
install ask you can just directly use

00:16:13,980 --> 00:16:18,750
then there's some configuration

00:16:16,010 --> 00:16:20,610
administration commands that you can use

00:16:18,750 --> 00:16:24,390
for index configuration user

00:16:20,610 --> 00:16:26,670
configuration and also accessing the

00:16:24,390 --> 00:16:28,110
JSON interface so def p server has a

00:16:26,670 --> 00:16:32,270
full Drazen interface on all of the

00:16:28,110 --> 00:16:35,550
resources that you can use for scripting

00:16:32,270 --> 00:16:36,720
a typical release workflow is looks like

00:16:35,550 --> 00:16:40,350
this you basically go to your own

00:16:36,720 --> 00:16:43,380
development index you upload a release

00:16:40,350 --> 00:16:45,330
file either you implicitly built because

00:16:43,380 --> 00:16:47,550
you are in the set up third PI directory

00:16:45,330 --> 00:16:49,890
you're just implicitly build with that

00:16:47,550 --> 00:16:51,720
pie upload or you already have built

00:16:49,890 --> 00:16:54,720
your release father and just say def by

00:16:51,720 --> 00:16:58,560
upload this release file and you send it

00:16:54,720 --> 00:17:00,690
off to the index and then from the same

00:16:58,560 --> 00:17:02,220
machine or from all kinds of other

00:17:00,690 --> 00:17:04,650
machines that you might manage with

00:17:02,220 --> 00:17:07,380
Jenkins or something you issue this

00:17:04,650 --> 00:17:09,750
single line def pi test package name and

00:17:07,380 --> 00:17:12,300
that actually gets the latest release

00:17:09,750 --> 00:17:14,130
and performs the tests and attaches the

00:17:12,300 --> 00:17:16,439
test results back to the release file

00:17:14,130 --> 00:17:18,270
that's why I could see in this web view

00:17:16,439 --> 00:17:20,970
okay this release file what kind of

00:17:18,270 --> 00:17:24,959
tests has it seen that was produced by

00:17:20,970 --> 00:17:26,160
this client side def by test command and

00:17:24,959 --> 00:17:29,460
when it's ready actually when you are

00:17:26,160 --> 00:17:31,950
happy then you push it to another index

00:17:29,460 --> 00:17:34,200
and of course you can also automate this

00:17:31,950 --> 00:17:36,929
kind of like Jenkins job and just invoke

00:17:34,200 --> 00:17:40,020
these commands to unsuccess of something

00:17:36,929 --> 00:17:42,330
posted to an index that says this visa

00:17:40,020 --> 00:17:48,150
all the tests that test passing packages

00:17:42,330 --> 00:17:50,120
and things like this so this is a

00:17:48,150 --> 00:17:57,090
release file working that gets slight

00:17:50,120 --> 00:17:59,730
shortly into talks talks is a tool that

00:17:57,090 --> 00:18:02,490
allows to define how you want to what

00:17:59,730 --> 00:18:05,730
kind of tests you want to do against

00:18:02,490 --> 00:18:07,710
your release file it's basically in the

00:18:05,730 --> 00:18:11,669
release file it expects to find a tox

00:18:07,710 --> 00:18:13,650
lot ini and then it invokes talks I have

00:18:11,669 --> 00:18:15,419
a the next slide discusses what that

00:18:13,650 --> 00:18:19,470
means it produces something called talks

00:18:15,419 --> 00:18:21,270
result but Jason and then i can actually

00:18:19,470 --> 00:18:23,610
from the command line i can say def pi

00:18:21,270 --> 00:18:27,090
list the package name and see what the

00:18:23,610 --> 00:18:28,470
status is if it was tests passed or what

00:18:27,090 --> 00:18:29,940
kind of test failures there were and

00:18:28,470 --> 00:18:33,419
show me the trace back from the command

00:18:29,940 --> 00:18:35,370
line and then I take the release file

00:18:33,419 --> 00:18:38,790
once I'm happy with it this is then

00:18:35,370 --> 00:18:40,380
pushed bit by bit verbatim to the next

00:18:38,790 --> 00:18:42,510
index so I know that this thing I

00:18:40,380 --> 00:18:45,540
actually tested against on the different

00:18:42,510 --> 00:18:47,850
platforms actually works and I put this

00:18:45,540 --> 00:18:49,200
thing I don't basically re-upload

00:18:47,850 --> 00:18:50,970
something to production I really take

00:18:49,200 --> 00:18:55,590
the same thing that works and push it

00:18:50,970 --> 00:18:58,350
through to the next stage talks for

00:18:55,590 --> 00:18:59,669
automating test runs it's kind of a

00:18:58,350 --> 00:19:01,559
standardized testing I'm not going to

00:18:59,669 --> 00:19:05,640
talk much about this because my was

00:19:01,559 --> 00:19:08,460
exchanged for a 30 minute talk it was

00:19:05,640 --> 00:19:10,679
originally a 45 minute talk was

00:19:08,460 --> 00:19:14,179
scheduled for only so I can't talk too

00:19:10,679 --> 00:19:16,380
much about it here but you can go to the

00:19:14,179 --> 00:19:18,990
web page to actually get some more

00:19:16,380 --> 00:19:21,919
information about how you configure your

00:19:18,990 --> 00:19:25,530
test runs with different tests Brunner's

00:19:21,919 --> 00:19:28,220
the server you already saw that you

00:19:25,530 --> 00:19:31,500
basically just installed FP server you

00:19:28,220 --> 00:19:35,070
have a typical host port and some other

00:19:31,500 --> 00:19:36,390
settings that you can end the date idea

00:19:35,070 --> 00:19:39,690
where you want to have your server state

00:19:36,390 --> 00:19:41,309
and then from from different clients

00:19:39,690 --> 00:19:44,190
that don't need to install the FP server

00:19:41,309 --> 00:19:46,440
of course you can just install def key

00:19:44,190 --> 00:19:48,750
client and then say def pi use my

00:19:46,440 --> 00:19:52,830
company server and just work against

00:19:48,750 --> 00:19:54,300
that what you usually want to do is that

00:19:52,830 --> 00:19:56,559
you want to have an engine x space

00:19:54,300 --> 00:19:58,929
deployment there's a

00:19:56,559 --> 00:20:01,899
an example file that gets generated from

00:19:58,929 --> 00:20:03,850
your settings host port and so on so on

00:20:01,899 --> 00:20:06,850
which is basically a more or less

00:20:03,850 --> 00:20:08,950
complete engine X or basic engine takes

00:20:06,850 --> 00:20:11,679
site config file that you can just

00:20:08,950 --> 00:20:13,090
include in your engine X configuration

00:20:11,679 --> 00:20:16,870
or use as a template to work further

00:20:13,090 --> 00:20:18,970
from and it's this actually happens in

00:20:16,870 --> 00:20:22,570
such a way that engine X directly serves

00:20:18,970 --> 00:20:24,759
the static files so some things actually

00:20:22,570 --> 00:20:26,230
def p server doesn't see any more once

00:20:24,759 --> 00:20:28,080
you upload something the whole URL

00:20:26,230 --> 00:20:31,499
structure is such that the engine X

00:20:28,080 --> 00:20:33,460
directly serves that file so for that

00:20:31,499 --> 00:20:38,249
that p server doesn't even need to be

00:20:33,460 --> 00:20:43,029
running so i'm going to conclude the

00:20:38,249 --> 00:20:45,070
deaf pi systems developed since about a

00:20:43,029 --> 00:20:49,230
bit more than a year i think a year and

00:20:45,070 --> 00:20:51,749
a couple of month it's MIT licensed it's

00:20:49,230 --> 00:20:55,869
test driven development a lot

00:20:51,749 --> 00:20:58,269
surprisingly and also it's a bit funding

00:20:55,869 --> 00:20:59,850
driven so there's some uses cases that

00:20:58,269 --> 00:21:02,200
are interesting to me myself personally

00:20:59,850 --> 00:21:04,570
but it also depends i mean one of the

00:21:02,200 --> 00:21:07,539
upcoming things maybe is a company who

00:21:04,570 --> 00:21:09,759
funds some ldap integration

00:21:07,539 --> 00:21:11,379
authentication integration but kind of

00:21:09,759 --> 00:21:14,919
like feature development and some things

00:21:11,379 --> 00:21:17,679
and consulting is provided by florian me

00:21:14,919 --> 00:21:22,210
and of course pull requests a good way

00:21:17,679 --> 00:21:26,879
to contribute okay that's my brief

00:21:22,210 --> 00:21:26,879
overview of our deaf pie and talks thank

00:21:32,920 --> 00:21:48,380
ok we have a good five minutes of

00:21:35,210 --> 00:21:50,480
questions you just briefly talked about

00:21:48,380 --> 00:21:53,090
ldap authentication and the set means

00:21:50,480 --> 00:21:55,280
that you can integrate this pie into an

00:21:53,090 --> 00:21:57,710
active directory domain and use this

00:21:55,280 --> 00:22:00,940
information to authenticate users well

00:21:57,710 --> 00:22:04,820
if the funding realizes I guess so okay

00:22:00,940 --> 00:22:12,080
then I asked my employee if you can give

00:22:04,820 --> 00:22:13,370
you some money sorry yes I mean it's

00:22:12,080 --> 00:22:16,340
brinda something like this is also

00:22:13,370 --> 00:22:17,809
possible but even with sprint I mean you

00:22:16,340 --> 00:22:19,100
know take some time and organization and

00:22:17,809 --> 00:22:20,900
and get in order to get something

00:22:19,100 --> 00:22:22,910
release ready and document it and

00:22:20,900 --> 00:22:24,740
everything I mean you probably know that

00:22:22,910 --> 00:22:27,260
that it's kind of some work involved

00:22:24,740 --> 00:22:30,320
right and but just to give you a brief

00:22:27,260 --> 00:22:33,860
idea on how the future discussion around

00:22:30,320 --> 00:22:37,429
l that is currently such that we say we

00:22:33,860 --> 00:22:40,160
want to have basically want to have

00:22:37,429 --> 00:22:44,870
engine X deal with ldap server

00:22:40,160 --> 00:22:47,990
integration and just pass a certain user

00:22:44,870 --> 00:22:49,550
name header and group header into def p

00:22:47,990 --> 00:22:51,590
server and basically have an option and

00:22:49,550 --> 00:22:53,390
FP server that just says ok my upstream

00:22:51,590 --> 00:22:55,850
engine X is going to pass me the right

00:22:53,390 --> 00:22:57,350
thing and engine X thus the integration

00:22:55,850 --> 00:23:00,080
because there's nice plugins for engine

00:22:57,350 --> 00:23:02,750
X that actually do this and then we need

00:23:00,080 --> 00:23:05,780
some client side support to handle the

00:23:02,750 --> 00:23:09,500
login part but that's kind of like the

00:23:05,780 --> 00:23:10,970
current implementation plan the other

00:23:09,500 --> 00:23:13,700
the alternative obviously is to actually

00:23:10,970 --> 00:23:17,390
have direct ldap support and FBI server

00:23:13,700 --> 00:23:22,760
itself but well we don't have to

00:23:17,390 --> 00:23:25,940
reinvent every wheel I guess yes hey

00:23:22,760 --> 00:23:28,690
thanks for for all this hard work you've

00:23:25,940 --> 00:23:32,120
done and the question is about the

00:23:28,690 --> 00:23:35,750
testing by testing run by def by server

00:23:32,120 --> 00:23:37,940
in particular is it possible to

00:23:35,750 --> 00:23:40,270
configure some workers which are remote

00:23:37,940 --> 00:23:44,780
to the server itself because it's a bit

00:23:40,270 --> 00:23:46,250
and overload for the for the server yes

00:23:44,780 --> 00:23:50,030
I mean maybe I wasn't clear

00:23:46,250 --> 00:23:52,040
of the the server and the running of the

00:23:50,030 --> 00:23:55,540
tests for example they are completely

00:23:52,040 --> 00:23:57,950
separated so where you issued f pi test

00:23:55,540 --> 00:24:00,530
is completely separate from the other

00:23:57,950 --> 00:24:02,350
server runs it the death by test command

00:24:00,530 --> 00:24:04,670
goes to the server and gets the files

00:24:02,350 --> 00:24:07,610
performs the testing on whatever host

00:24:04,670 --> 00:24:10,010
and then attaches back the test results

00:24:07,610 --> 00:24:12,080
so on the Deaf PI server instance itself

00:24:10,010 --> 00:24:15,290
where the server runs there's nothing

00:24:12,080 --> 00:24:17,540
there's no there's no set up that pie or

00:24:15,290 --> 00:24:21,020
anything ever executing otherwise it

00:24:17,540 --> 00:24:22,370
would be booked by I mean if you have to

00:24:21,020 --> 00:24:30,700
execute something like set up that pie

00:24:22,370 --> 00:24:33,440
you basically run risk of compromise yes

00:24:30,700 --> 00:24:36,140
no no the pushing is really after you

00:24:33,440 --> 00:24:41,090
test that you test like what you saw in

00:24:36,140 --> 00:24:42,770
this the upload well the upload you also

00:24:41,090 --> 00:24:44,630
do on the client machine I mean the

00:24:42,770 --> 00:24:47,510
client machine does the building and

00:24:44,630 --> 00:24:51,350
like you do a veal for example for linux

00:24:47,510 --> 00:24:53,720
ubuntu 14 for 64-bit blah blah ucs-2 hmm

00:24:51,350 --> 00:24:56,030
whatever your platform is and then you

00:24:53,720 --> 00:25:03,590
actually upload the resulting file to

00:24:56,030 --> 00:25:05,630
maybe a platform-specific real index no

00:25:03,590 --> 00:25:07,700
it doesn't no it doesn't although there

00:25:05,630 --> 00:25:09,740
is an upload trigger so if you upload

00:25:07,700 --> 00:25:10,700
you can define on a power index places I

00:25:09,740 --> 00:25:12,980
mean it didn't talk about all the

00:25:10,700 --> 00:25:14,870
features you can / index actually if you

00:25:12,980 --> 00:25:17,690
upload something it can for example

00:25:14,870 --> 00:25:19,700
trigger a Jenkins job that's kind of

00:25:17,690 --> 00:25:22,400
like one path that is documented I

00:25:19,700 --> 00:25:24,410
showed it you just go to the

00:25:22,400 --> 00:25:28,730
documentation and then the misc section

00:25:24,410 --> 00:25:30,680
about the Jenkins integration um okay

00:25:28,730 --> 00:25:32,990
you already answered my question i

00:25:30,680 --> 00:25:36,680
already have about a plug-in system

00:25:32,990 --> 00:25:40,970
system or signaling stuff like this

00:25:36,680 --> 00:25:44,240
jenkins plugin mmm is it already as

00:25:40,970 --> 00:25:48,290
generic as i can maybe generate debian

00:25:44,240 --> 00:25:49,700
files from this upload trigger no I mean

00:25:48,290 --> 00:25:52,820
def pie tries to solve a few problems

00:25:49,700 --> 00:25:54,740
but only those it's not yet something

00:25:52,820 --> 00:25:56,840
like it doesn't have like all kinds of

00:25:54,740 --> 00:25:59,190
events it has this upload trigger for

00:25:56,840 --> 00:26:01,680
Jenkins but not a generic web

00:25:59,190 --> 00:26:04,950
whatever so I mean that's not very hard

00:26:01,680 --> 00:26:06,870
to do but it's basically very much def

00:26:04,950 --> 00:26:10,050
pi is very much driven by actual

00:26:06,870 --> 00:26:12,360
real-world use cases not by all the

00:26:10,050 --> 00:26:14,280
features I can possibly think of or so

00:26:12,360 --> 00:26:15,660
so when somebody actually comes along

00:26:14,280 --> 00:26:17,640
and wants to have a certain feature and

00:26:15,660 --> 00:26:18,990
you know discusses the use case it's

00:26:17,640 --> 00:26:20,520
it's much more likely that it gets

00:26:18,990 --> 00:26:24,080
implemented that's kind of like my

00:26:20,520 --> 00:26:24,080
general development approach these days

00:26:25,760 --> 00:26:33,350
okay one more oh okay then that's it

00:26:30,600 --> 00:26:33,350

YouTube URL: https://www.youtube.com/watch?v=aNrrGf-uNUY


