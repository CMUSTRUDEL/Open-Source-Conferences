Title: Travis Oliphant - Python's Role in Big Data Analytics: Past, Present, and Future
Publication date: 2015-04-18
Playlist: EuroPython 2014
Description: 
	Travis Oliphant - Python's Role in Big Data Analytics: Past, Present, and Future
[EuroPython 2014]
[25 July 2014]

Python has had a long history in Scientific Computing which means it has had the fundamental building blocks necessary for doing Data Analysis for many years. As a result, Python has long played a role in scientific problems with the largest data sets. Lately, it has also grown in traction as a tool for doing rapid Data Analysis. As a result, Python is the center of an emerging trend that is unifying traditional High Performance Computing with "Big Data" applications. In this talk I will discuss the features of Python and its popular libraries that have promoted its use in data analytics. I will also discuss the features that are still missing to enable Python to remain competitive and useful for data scientists and other domain experts. Finally, will describe open source projects that are currently occupying my attention which can assist in keeping Python relevant and even essential in Data Analytics for many years to come.
Captions: 
	00:00:14,860 --> 00:00:20,570
good morning everybody hmm it's a big

00:00:18,380 --> 00:00:22,670
honor to announce our next keynote

00:00:20,570 --> 00:00:24,500
speaker Travis elephant yeah he's a good

00:00:22,670 --> 00:00:26,869
friend of mine if you don't know him he

00:00:24,500 --> 00:00:29,570
sawed off numpy numpy is probably the

00:00:26,869 --> 00:00:31,520
scientific pison package pretty much

00:00:29,570 --> 00:00:34,730
everybody who's in scientific era in

00:00:31,520 --> 00:00:38,030
Python uses numpy and he's one wrote it

00:00:34,730 --> 00:00:40,370
and he's also CEO of continuum analytics

00:00:38,030 --> 00:00:42,860
the company behind anaconda and Conda

00:00:40,370 --> 00:00:45,320
and a lot of other open source packages

00:00:42,860 --> 00:00:47,780
though he is really supporting the Pisan

00:00:45,320 --> 00:00:49,730
community and is also a founding member

00:00:47,780 --> 00:00:53,269
of non focus and um focus is a nonprofit

00:00:49,730 --> 00:00:54,739
behind my data speaking about my data

00:00:53,269 --> 00:00:56,329
that's a conference starting today

00:00:54,739 --> 00:00:58,489
actually the afternoon this tutorial so

00:00:56,329 --> 00:01:01,399
if you're interested in Python and pick

00:00:58,489 --> 00:01:02,749
traitor this very topic Travis going to

00:01:01,399 --> 00:01:05,570
talk about that will be a lot of talks

00:01:02,749 --> 00:01:08,120
tutorials in much more depth about it so

00:01:05,570 --> 00:01:09,650
the encouraged to join the PI data

00:01:08,120 --> 00:01:12,800
components are still tickets available

00:01:09,650 --> 00:01:16,670
so please go ahead and buy buy tickets

00:01:12,800 --> 00:01:19,070
and now I would like to give the world

00:01:16,670 --> 00:01:21,290
to trevors was talking about some

00:01:19,070 --> 00:01:23,299
content hyacinth and potato and he's

00:01:21,290 --> 00:01:26,420
talking about the past present and

00:01:23,299 --> 00:01:29,170
future of this field please give a big

00:01:26,420 --> 00:01:29,170
hand to Travis

00:01:34,750 --> 00:01:39,220
thank you very much I think we're having

00:01:36,850 --> 00:02:07,770
a little technical difficulty here so it

00:01:39,220 --> 00:02:07,770
seems to be a common pattern this sounds

00:02:16,739 --> 00:02:33,400
does he show to displace it does okay so

00:02:27,370 --> 00:02:39,489
hacia terms of Dasaratha has to you

00:02:33,400 --> 00:02:42,540
choked and built reason for GR inspire

00:02:39,489 --> 00:02:42,540
me row

00:03:12,530 --> 00:03:21,980
give you there we are you see a very

00:03:16,530 --> 00:03:24,360
messy desktop and a bouncing beach ball

00:03:21,980 --> 00:03:29,360
excellent maybe it'll come back to me

00:03:24,360 --> 00:03:32,570
soon I don't know I'm still not live I

00:03:29,360 --> 00:03:50,430
don't have the control of the my screens

00:03:32,570 --> 00:03:56,010
system I don't have its bouncing beach

00:03:50,430 --> 00:03:57,750
ball I don't know why you you were

00:03:56,010 --> 00:04:00,410
swapping things out while I was a little

00:03:57,750 --> 00:04:00,410
doing things I think

00:04:20,180 --> 00:04:25,870
hopefully that'll work are we there okay

00:04:28,600 --> 00:04:32,389
all right so y'all had time to catch up

00:04:30,770 --> 00:04:34,220
on your email and now you can give me

00:04:32,389 --> 00:04:35,720
your full attention right that's good

00:04:34,220 --> 00:04:37,310
that last-minute email you got chance to

00:04:35,720 --> 00:04:39,350
send off I understand i'd like to check

00:04:37,310 --> 00:04:41,180
my email during talks to i'll try to

00:04:39,350 --> 00:04:43,220
keep your attention so you don't get to

00:04:41,180 --> 00:04:45,620
to board i want to talk a little about

00:04:43,220 --> 00:04:47,000
me not too much because i want more

00:04:45,620 --> 00:04:48,800
mostly talked about the technologies

00:04:47,000 --> 00:04:50,150
that i've been involved with but just to

00:04:48,800 --> 00:04:51,740
give you a little background i know not

00:04:50,150 --> 00:04:53,960
everybody here is familiar with the

00:04:51,740 --> 00:04:56,210
numpy stack and with science I basically

00:04:53,960 --> 00:04:58,280
am a scientist by training I my roots

00:04:56,210 --> 00:04:59,810
are in satellite scatterometer II I used

00:04:58,280 --> 00:05:01,099
to measure wind speed over the ocean and

00:04:59,810 --> 00:05:03,110
satellite scatterometer that's really

00:05:01,099 --> 00:05:06,440
what got me into large-scale data

00:05:03,110 --> 00:05:07,970
analysis was tracking you basically had

00:05:06,440 --> 00:05:09,320
backscatter from the ocean surface and

00:05:07,970 --> 00:05:11,300
big satellites they came on big tape

00:05:09,320 --> 00:05:12,889
drives and he was a VMs machine a vm

00:05:11,300 --> 00:05:15,020
massive axiom a cinema used one of those

00:05:12,889 --> 00:05:16,370
systems it's really awesome had had a

00:05:15,020 --> 00:05:20,389
floating-point format that was different

00:05:16,370 --> 00:05:22,699
than I Triple E 54 754 that's where I

00:05:20,389 --> 00:05:25,280
started and we used to make really nice

00:05:22,699 --> 00:05:28,849
pictures we did a lot of I did some

00:05:25,280 --> 00:05:31,270
pearl I did some matlab used a lot of C

00:05:28,849 --> 00:05:33,860
in order to produce these kind of slides

00:05:31,270 --> 00:05:36,590
when I did my PhD program at the Mayo

00:05:33,860 --> 00:05:38,780
Clinic I got into a different kind of

00:05:36,590 --> 00:05:40,550
wave it was waves i was making inside of

00:05:38,780 --> 00:05:42,440
people basically we'd wiggled people

00:05:40,550 --> 00:05:44,570
with speakers we start to shake them and

00:05:42,440 --> 00:05:46,760
when you shake people waves propagate

00:05:44,570 --> 00:05:48,409
inside and then with either MRI or

00:05:46,760 --> 00:05:50,509
ultrasound it can actually see those

00:05:48,409 --> 00:05:52,430
waves propagating and from that you end

00:05:50,509 --> 00:05:54,050
up with a big kind of an inverse problem

00:05:52,430 --> 00:05:55,820
it's that equation there which I like to

00:05:54,050 --> 00:05:58,490
scare people with and I scared my

00:05:55,820 --> 00:05:59,900
committee with it too it was fun it's

00:05:58,490 --> 00:06:00,949
not that hard of equations just simple

00:05:59,900 --> 00:06:02,360
linear equation many of you here are

00:06:00,949 --> 00:06:04,520
pretty good at it but my goal was to

00:06:02,360 --> 00:06:05,870
invert that and so they invert that I

00:06:04,520 --> 00:06:07,970
had to find the derivatives of five

00:06:05,870 --> 00:06:10,280
dimensional data so here I was the very

00:06:07,970 --> 00:06:12,320
large cube of data it was too big to fit

00:06:10,280 --> 00:06:14,210
in memory for for matlab the matlab

00:06:12,320 --> 00:06:16,370
double I didn't have there wasn't a

00:06:14,210 --> 00:06:18,320
matlab float at the time but yet i

00:06:16,370 --> 00:06:20,270
really liked working a high level I

00:06:18,320 --> 00:06:22,190
could program and see but I did but when

00:06:20,270 --> 00:06:23,599
I was thinking about my data problem I

00:06:22,190 --> 00:06:25,039
didn't want to be programming in C

00:06:23,599 --> 00:06:26,599
because I had to think about pointers

00:06:25,039 --> 00:06:29,150
and arithmetic and figure out where my

00:06:26,599 --> 00:06:30,919
memory leaks were so I really liked that

00:06:29,150 --> 00:06:33,710
high level so searched around and I

00:06:30,919 --> 00:06:35,690
found Python and so that's the rest

00:06:33,710 --> 00:06:39,230
his history basically I found pythons

00:06:35,690 --> 00:06:41,690
starting to do a lot with Python it did

00:06:39,230 --> 00:06:46,190
finish my PhD although it was somewhat

00:06:41,690 --> 00:06:48,110
delayed the this is it just give you a

00:06:46,190 --> 00:06:50,870
kind of context or pythons origins and

00:06:48,110 --> 00:06:53,120
where I started to use Python this is we

00:06:50,870 --> 00:06:54,500
don't released it and there's arguably

00:06:53,120 --> 00:06:56,450
maybe a little before this but I know

00:06:54,500 --> 00:06:59,000
the 0.9 point okay mom Debra we're not

00:06:56,450 --> 00:07:00,970
gummy worm I was not a Python user then

00:06:59,000 --> 00:07:04,820
I really came to the scene maybe seven

00:07:00,970 --> 00:07:07,280
so you can see that 96 is kind of the

00:07:04,820 --> 00:07:08,930
used version 1.4 of Python it's a great

00:07:07,280 --> 00:07:10,460
version actually in fact if you'd like

00:07:08,930 --> 00:07:11,720
to try the one point 0 series you can

00:07:10,460 --> 00:07:13,400
come to install and make a new

00:07:11,720 --> 00:07:15,740
environment in Conda and install the one

00:07:13,400 --> 00:07:18,530
point over in a Python just for fun and

00:07:15,740 --> 00:07:21,460
you can see kind of how it worked and do

00:07:18,530 --> 00:07:24,920
a test environment of Python one I

00:07:21,460 --> 00:07:27,290
started using it in 97 and I have that

00:07:24,920 --> 00:07:28,670
little gold highlight keep that in mind

00:07:27,290 --> 00:07:31,520
because that's that's an important date

00:07:28,670 --> 00:07:33,440
94 with respect to data analysis in

00:07:31,520 --> 00:07:35,330
Python I like to show this slide because

00:07:33,440 --> 00:07:37,220
this is really what got me going in

00:07:35,330 --> 00:07:39,470
writing see extensions for Python if

00:07:37,220 --> 00:07:40,490
I've done sort of anything else it's

00:07:39,470 --> 00:07:42,200
I've written a whole bunch of see

00:07:40,490 --> 00:07:44,510
extensions for Python much to the

00:07:42,200 --> 00:07:45,620
chagrin of the pipe I crowd their

00:07:44,510 --> 00:07:47,660
problem probably our number one enemy

00:07:45,620 --> 00:07:49,790
because I've written so many see

00:07:47,660 --> 00:07:52,790
extensions that make their job harder in

00:07:49,790 --> 00:07:54,080
moving people off of the larger platform

00:07:52,790 --> 00:07:55,220
but I'm not the only one that does it

00:07:54,080 --> 00:07:56,570
there's a lot of people that write C

00:07:55,220 --> 00:07:58,700
extents to the Python because it's so

00:07:56,570 --> 00:08:01,040
easy to and because it's so extensible

00:07:58,700 --> 00:08:03,230
but I show this slide because of Mike a

00:08:01,040 --> 00:08:04,970
Mike a miller actually very close to my

00:08:03,230 --> 00:08:06,950
friend Mike Muller but Mike Miller he

00:08:04,970 --> 00:08:08,600
released a package called table I oh and

00:08:06,950 --> 00:08:10,550
that's how I learned to program C

00:08:08,600 --> 00:08:13,250
extensions is I grabbed his package

00:08:10,550 --> 00:08:14,870
studied the source and then also read an

00:08:13,250 --> 00:08:16,100
essay by Guido about reference counting

00:08:14,870 --> 00:08:17,150
you gotta figure out how reference

00:08:16,100 --> 00:08:18,320
County throughout extension this

00:08:17,150 --> 00:08:19,040
fortunately right side Don and other

00:08:18,320 --> 00:08:20,840
things you don't have to do that anymore

00:08:19,040 --> 00:08:21,770
but if you really wanna get to the root

00:08:20,840 --> 00:08:24,680
of things you have to do a reference

00:08:21,770 --> 00:08:27,320
counting so this opened my eyes to the

00:08:24,680 --> 00:08:29,690
power of open source I could basically

00:08:27,320 --> 00:08:31,130
look at the code understand it learn

00:08:29,690 --> 00:08:33,830
something I learned a tremendous amount

00:08:31,130 --> 00:08:35,780
by reading this code and then I started

00:08:33,830 --> 00:08:38,420
to experiment with my own modules and in

00:08:35,780 --> 00:08:39,950
1998 was my first extension module for

00:08:38,420 --> 00:08:41,960
python is called numpy I oh it's

00:08:39,950 --> 00:08:44,540
completely it sort of embedded in other

00:08:41,960 --> 00:08:45,890
parts of the stack these days and in

00:08:44,540 --> 00:08:47,570
fact there's better ways to do it but

00:08:45,890 --> 00:08:50,990
that was my very first module

00:08:47,570 --> 00:08:53,000
1998 and I kind of got hooked and sort

00:08:50,990 --> 00:08:55,310
of that's that's when I my career as a

00:08:53,000 --> 00:08:57,290
scientist started pivoted let's say

00:08:55,310 --> 00:09:01,340
pivoted that's the right word pivoted

00:08:57,290 --> 00:09:04,160
into tools for scientists so in 1998-99

00:09:01,340 --> 00:09:05,750
I started to get really addicted got

00:09:04,160 --> 00:09:07,400
really caught by that bug I think there

00:09:05,750 --> 00:09:09,050
is a chemical compound that is called a

00:09:07,400 --> 00:09:10,370
diction open source I think it's

00:09:09,050 --> 00:09:13,220
somewhat related to our addiction to

00:09:10,370 --> 00:09:14,960
facebook i think it's it's connected but

00:09:13,220 --> 00:09:17,660
back in the time i started releasing

00:09:14,960 --> 00:09:20,330
rappers 9098 first fftw then c fees

00:09:17,660 --> 00:09:21,860
modules than stats which was from help

00:09:20,330 --> 00:09:25,610
from gary strangman he put out something

00:09:21,860 --> 00:09:27,200
in 1998 in the 1999 I went back one year

00:09:25,610 --> 00:09:28,310
and looked at the mailing list it's

00:09:27,200 --> 00:09:30,260
really nice to go back and look at the

00:09:28,310 --> 00:09:31,760
history of what you said in the past and

00:09:30,260 --> 00:09:33,950
cringe a little bit at how stupid you

00:09:31,760 --> 00:09:36,140
were but you know we're all we all make

00:09:33,950 --> 00:09:37,520
mistakes but go back and kind of it also

00:09:36,140 --> 00:09:38,810
see kind of how motivated you are and

00:09:37,520 --> 00:09:41,540
how excited you were about something new

00:09:38,810 --> 00:09:44,300
I was very excited about Python in 90 99

00:09:41,540 --> 00:09:46,670
I said hey we could use Python to build

00:09:44,300 --> 00:09:47,960
a data analysis environment we could do

00:09:46,670 --> 00:09:49,490
all of our star while all our

00:09:47,960 --> 00:09:51,080
calculation goat all the things I loved

00:09:49,490 --> 00:09:53,690
using a high-level language like MATLAB

00:09:51,080 --> 00:09:55,640
about I could do that in Python so that

00:09:53,690 --> 00:09:57,710
year I went back and looked at the main

00:09:55,640 --> 00:09:59,180
enlist and sort of every month I was

00:09:57,710 --> 00:10:00,650
sourcing hey here's me a package I just

00:09:59,180 --> 00:10:03,230
made and of course it wasn't very pretty

00:10:00,650 --> 00:10:05,540
in the webpage for it was very ugly I'm

00:10:03,230 --> 00:10:07,130
still not a very good web designer i can

00:10:05,540 --> 00:10:09,050
put content but not really good pretty

00:10:07,130 --> 00:10:10,250
pictures so if you look at those but

00:10:09,050 --> 00:10:11,900
back in the day nobody else had pretty

00:10:10,250 --> 00:10:15,470
pictures either so it was okay i just

00:10:11,900 --> 00:10:17,510
had a really a spartan website and i

00:10:15,470 --> 00:10:19,250
made a bunch of releases then a guy

00:10:17,510 --> 00:10:20,990
named pero pair peterson came along and

00:10:19,250 --> 00:10:23,360
said hey this is really stupid of you

00:10:20,990 --> 00:10:25,970
handwriting fortran rappers to multi

00:10:23,360 --> 00:10:27,710
pack on all the libraries on net lib i'm

00:10:25,970 --> 00:10:28,640
going to write a tool to do that that's

00:10:27,710 --> 00:10:31,100
what i first learned the difference

00:10:28,640 --> 00:10:33,770
between me and a real computer scientist

00:10:31,100 --> 00:10:36,440
right me I'm like I'll do this manually

00:10:33,770 --> 00:10:37,760
because I just want to get it done and a

00:10:36,440 --> 00:10:39,800
real computer scientist goes we have to

00:10:37,760 --> 00:10:41,180
automate this and make it and in fact

00:10:39,800 --> 00:10:42,580
you know you know your real computer

00:10:41,180 --> 00:10:44,510
scientist you'll spend more time

00:10:42,580 --> 00:10:48,320
automating than it would have taken just

00:10:44,510 --> 00:10:50,000
do it manually right and now that's not

00:10:48,320 --> 00:10:52,310
the case f 2 pi was a tremendous tool

00:10:50,000 --> 00:10:54,950
and we work together basically through

00:10:52,310 --> 00:10:58,610
the last part of June 99 2000 in that

00:10:54,950 --> 00:11:01,220
year so 1999 that was multipack was

00:10:58,610 --> 00:11:02,959
called the time and that was my eye

00:11:01,220 --> 00:11:04,759
put it on the web and people started

00:11:02,959 --> 00:11:06,560
downloaded I got I got started to get to

00:11:04,759 --> 00:11:07,819
know people from all over the world p ro

00:11:06,560 --> 00:11:09,139
peterson the gentleman who wrote up to

00:11:07,819 --> 00:11:10,790
pi is from stony i don't know if he's

00:11:09,139 --> 00:11:12,439
here he could be here but he's kind of

00:11:10,790 --> 00:11:15,050
yeah I know he likes to water-ski in the

00:11:12,439 --> 00:11:17,629
lakes in Estonia that was just a

00:11:15,050 --> 00:11:19,040
tremendous rush to be able to coordinate

00:11:17,629 --> 00:11:20,990
and communicate with people all over the

00:11:19,040 --> 00:11:22,910
world and see them use your stuff and

00:11:20,990 --> 00:11:24,620
contribute back and make it better it

00:11:22,910 --> 00:11:27,560
was an amazing thing and it was my first

00:11:24,620 --> 00:11:28,790
taste of open source community and I've

00:11:27,560 --> 00:11:32,449
just seen that grow and grow and grow

00:11:28,790 --> 00:11:33,920
ever since you could use the Python

00:11:32,449 --> 00:11:36,560
poured in analysis way back in two

00:11:33,920 --> 00:11:37,939
thousand whereas i wrote a numpy numpy

00:11:36,560 --> 00:11:39,860
came from a tradition it came from a

00:11:37,939 --> 00:11:41,829
history that had started in 1994 and

00:11:39,860 --> 00:11:45,379
here in two thousand i could use it to

00:11:41,829 --> 00:11:46,759
publish pictures in my thesis now this

00:11:45,379 --> 00:11:48,620
is using a python interface with

00:11:46,759 --> 00:11:51,920
something called dis Lin anybody who use

00:11:48,620 --> 00:11:53,839
dis lane' anybody this one's actually a

00:11:51,920 --> 00:11:55,399
pretty sophisticated tool although a

00:11:53,839 --> 00:11:57,680
little bit tedious to use but I was able

00:11:55,399 --> 00:11:59,149
to do it you publish all my pictures of

00:11:57,680 --> 00:12:01,910
my thesis I think there was two hundred

00:11:59,149 --> 00:12:04,480
different images in my thesis all with

00:12:01,910 --> 00:12:07,850
this limb and with Python now in 2001

00:12:04,480 --> 00:12:09,709
that's when Erik Jones contacted me and

00:12:07,850 --> 00:12:11,839
together with Piero Peterson we kind of

00:12:09,709 --> 00:12:13,720
pulled stuff together and spend a whole

00:12:11,839 --> 00:12:15,769
bunch of time building for Windows a

00:12:13,720 --> 00:12:17,839
whole bunch of time essentially going

00:12:15,769 --> 00:12:20,120
through debug building a package and we

00:12:17,839 --> 00:12:21,709
came out with what we called the syfy

00:12:20,120 --> 00:12:23,899
library but really was the syfy

00:12:21,709 --> 00:12:25,519
distribution and it's I didn't realize

00:12:23,899 --> 00:12:26,809
the time that's really what it was it

00:12:25,519 --> 00:12:28,430
was a collection of all these tools

00:12:26,809 --> 00:12:29,990
together kind of with a single installer

00:12:28,430 --> 00:12:32,629
so you get everything up and running

00:12:29,990 --> 00:12:34,579
quickly know a lot of people who

00:12:32,629 --> 00:12:38,269
contributed to getting sci-fi out the

00:12:34,579 --> 00:12:39,709
door but it was a lot of work just I'm

00:12:38,269 --> 00:12:41,449
pulling everything together and doing a

00:12:39,709 --> 00:12:43,040
lot of I was I was not a windows program

00:12:41,449 --> 00:12:44,480
at the time I've learned I've since

00:12:43,040 --> 00:12:48,050
learned to make my peace with the

00:12:44,480 --> 00:12:49,579
Windows platform and it's fine there's

00:12:48,050 --> 00:12:50,750
some interesting things about it

00:12:49,579 --> 00:12:51,860
actually in a parallel space there's

00:12:50,750 --> 00:12:54,649
some really interesting things about it

00:12:51,860 --> 00:12:58,160
but as I said before numpy really

00:12:54,649 --> 00:13:01,160
inherited a long legacy of great minds

00:12:58,160 --> 00:13:03,769
is gone and tried to build numeric array

00:13:01,160 --> 00:13:05,180
object for Python Jim Fulton he's

00:13:03,769 --> 00:13:07,370
embarrassed when I show this because hit

00:13:05,180 --> 00:13:08,480
was just a Python matrix object but it

00:13:07,370 --> 00:13:11,179
was real it was part of the early

00:13:08,480 --> 00:13:13,009
discussion and it caused Jim hugoton as

00:13:11,179 --> 00:13:14,570
a graduate student MIT to get really

00:13:13,009 --> 00:13:16,610
excited into sort of

00:13:14,570 --> 00:13:18,590
crossin ate his graduation in order to

00:13:16,610 --> 00:13:20,690
write numeric which became the

00:13:18,590 --> 00:13:22,640
foundation that's why I came to python

00:13:20,690 --> 00:13:25,760
because numeric existed so I really

00:13:22,640 --> 00:13:28,220
grateful for that then in 2001 some of

00:13:25,760 --> 00:13:30,080
the some features were desired for an

00:13:28,220 --> 00:13:31,370
American and peregrine field required

00:13:30,080 --> 00:13:33,440
todd miller at the space science

00:13:31,370 --> 00:13:36,080
telescope the folks that put out Hubble

00:13:33,440 --> 00:13:38,360
and process the Hubble images they

00:13:36,080 --> 00:13:40,100
needed some changes most particularly

00:13:38,360 --> 00:13:41,990
the need to build a memory map to more

00:13:40,100 --> 00:13:45,170
diverse data and so they were writing

00:13:41,990 --> 00:13:47,570
numer a and then at that time I kind of

00:13:45,170 --> 00:13:49,160
I said well it turned out actually

00:13:47,570 --> 00:13:51,170
didn't have a class to teach it was

00:13:49,160 --> 00:13:52,510
really kind of a nice confluence events

00:13:51,170 --> 00:13:54,740
I didn't have a tech class to teach

00:13:52,510 --> 00:13:56,330
because the one that was scheduled

00:13:54,740 --> 00:13:58,490
nobody signed up for it was sort of a

00:13:56,330 --> 00:14:00,680
bill that MRI and only one person signed

00:13:58,490 --> 00:14:02,780
up I guess they might have been too

00:14:00,680 --> 00:14:04,520
intimidated smart actually not to sign

00:14:02,780 --> 00:14:06,410
up for that class but I ended up without

00:14:04,520 --> 00:14:08,210
a class to teach and I probably should

00:14:06,410 --> 00:14:09,230
have been publishing papers in order to

00:14:08,210 --> 00:14:11,810
keep my position as an academic

00:14:09,230 --> 00:14:14,240
professor but at the time I saw na Mirae

00:14:11,810 --> 00:14:16,040
I sauce I pi which is built on numeric

00:14:14,240 --> 00:14:17,840
and I saw modules getting built for na

00:14:16,040 --> 00:14:19,070
Mirae and I was I saw this split

00:14:17,840 --> 00:14:20,240
happening the community there was

00:14:19,070 --> 00:14:22,040
already some nascent and people were

00:14:20,240 --> 00:14:25,040
still struggling just to support one

00:14:22,040 --> 00:14:26,030
thing and I I felt like I had to do

00:14:25,040 --> 00:14:27,650
something about it it was just a really

00:14:26,030 --> 00:14:28,820
strong feeling that somebody else to do

00:14:27,650 --> 00:14:30,500
this something about this and I don't

00:14:28,820 --> 00:14:33,200
know who's going to because nobody else

00:14:30,500 --> 00:14:35,000
knows the code base very well and I had

00:14:33,200 --> 00:14:37,790
time so I did I just did it and said

00:14:35,000 --> 00:14:39,860
okay throw costs from the wind and dive

00:14:37,790 --> 00:14:40,910
in and basically spent about what I

00:14:39,860 --> 00:14:42,800
thought would be about a three-month

00:14:40,910 --> 00:14:46,880
project turning an 18-month project in

00:14:42,800 --> 00:14:49,700
order to kind of put the first version

00:14:46,880 --> 00:14:52,280
of numpy out there since about two

00:14:49,700 --> 00:14:53,750
thousand seven the community it took a

00:14:52,280 --> 00:14:55,820
while for the community to excited about

00:14:53,750 --> 00:14:57,470
it and get more contributors but 2007's

00:14:55,820 --> 00:14:59,510
came and and its really started to take

00:14:57,470 --> 00:15:01,160
off and lots more people joined there's

00:14:59,510 --> 00:15:02,720
still room for people especially at the

00:15:01,160 --> 00:15:04,520
low level the number of people that can

00:15:02,720 --> 00:15:07,490
understand the capi of python and then

00:15:04,520 --> 00:15:10,190
help maintain the numpy code base in c

00:15:07,490 --> 00:15:12,620
is shrinking right and that and that

00:15:10,190 --> 00:15:14,840
becomes a challenge but there is a numpy

00:15:12,620 --> 00:15:17,330
and scifi both now are a very impressive

00:15:14,840 --> 00:15:18,650
community effort and i'm really grateful

00:15:17,330 --> 00:15:20,060
for that because they wouldn't be where

00:15:18,650 --> 00:15:22,150
they are without all the people that are

00:15:20,060 --> 00:15:24,650
contributing and making it possible I

00:15:22,150 --> 00:15:26,600
don't know exactly how many numpy users

00:15:24,650 --> 00:15:28,250
there are i estimate maybe 3 million

00:15:26,600 --> 00:15:31,910
that's on the basis of

00:15:28,250 --> 00:15:33,020
hits to a web page download numbers but

00:15:31,910 --> 00:15:35,000
it's always hard to tell because they

00:15:33,020 --> 00:15:37,190
don't nobody writes home nobody sends a

00:15:35,000 --> 00:15:40,220
postcard so you never know they know how

00:15:37,190 --> 00:15:42,260
many users have numpy you have I wanted

00:15:40,220 --> 00:15:44,060
to kind of pause a little bit and maybe

00:15:42,260 --> 00:15:46,340
to motivate some of you who are I know

00:15:44,060 --> 00:15:48,470
are building your own software packages

00:15:46,340 --> 00:15:50,330
and communities talking about the things

00:15:48,470 --> 00:15:52,010
that I've learned about what it takes to

00:15:50,330 --> 00:15:53,900
do this because if pythons going to have

00:15:52,010 --> 00:15:55,640
a role in big data analytics it's going

00:15:53,900 --> 00:15:59,300
to take the work and effort of a lot of

00:15:55,640 --> 00:16:00,440
people just as it has to date so one of

00:15:59,300 --> 00:16:01,940
the things that's most important i think

00:16:00,440 --> 00:16:04,340
is to recognize that it is hard work

00:16:01,940 --> 00:16:05,870
initially it's not it's not easy and

00:16:04,340 --> 00:16:08,270
usually it's quite lonely actually when

00:16:05,870 --> 00:16:09,740
you start off on a new venture initially

00:16:08,270 --> 00:16:11,360
nobody really believes in your idea

00:16:09,740 --> 00:16:13,700
except you and that's that's really the

00:16:11,360 --> 00:16:15,140
way it should be others will need some

00:16:13,700 --> 00:16:16,940
proof that this is actually going to

00:16:15,140 --> 00:16:19,130
work before they dive in when I said how

00:16:16,940 --> 00:16:22,190
I'm going to merge numer a and numeric

00:16:19,130 --> 00:16:25,850
and do it on the numeric code base a lot

00:16:22,190 --> 00:16:28,450
of people said that's great you go do

00:16:25,850 --> 00:16:30,860
that it'll be fine and it was really

00:16:28,450 --> 00:16:32,540
until they start seeing results and they

00:16:30,860 --> 00:16:34,940
say oh this is actually going to work ok

00:16:32,540 --> 00:16:36,410
now we'll dive in and and very grateful

00:16:34,940 --> 00:16:37,910
to do that as well but that's that's

00:16:36,410 --> 00:16:39,110
going to be how it works you're just

00:16:37,910 --> 00:16:40,430
going to have to dive in and do some

00:16:39,110 --> 00:16:42,320
things me with a small team maybe you

00:16:40,430 --> 00:16:44,270
another person and in fact the more

00:16:42,320 --> 00:16:46,160
complicated what you're doing is the

00:16:44,270 --> 00:16:47,390
more lonely it's going to be because the

00:16:46,160 --> 00:16:48,770
fewer the people that will understand

00:16:47,390 --> 00:16:52,610
enough to be able to make the trade offs

00:16:48,770 --> 00:16:55,820
and help you so sci-fi was another

00:16:52,610 --> 00:16:57,260
example I mean I started Syfy and and it

00:16:55,820 --> 00:16:58,970
took a while before we got more and more

00:16:57,260 --> 00:17:02,360
help and PR 0 join based the end of the

00:16:58,970 --> 00:17:04,160
year i procrastinate Pacey by at least a

00:17:02,360 --> 00:17:06,199
year create the beginnings of sci-fi and

00:17:04,160 --> 00:17:09,709
don't tell my wife right she's in the

00:17:06,199 --> 00:17:11,089
room so I shouldn't have said that I was

00:17:09,709 --> 00:17:12,199
a poor struggling gratitude with three

00:17:11,089 --> 00:17:15,170
kids and we were making eighteen

00:17:12,199 --> 00:17:17,030
thousand a year in Minnesota and you

00:17:15,170 --> 00:17:18,110
know we did great we did great but I

00:17:17,030 --> 00:17:19,250
know she was thinking when he gonna

00:17:18,110 --> 00:17:23,270
finish honey so we can actually have a

00:17:19,250 --> 00:17:25,699
job Piero Peterson put in tremendous

00:17:23,270 --> 00:17:27,170
work to create f 2 pi and scifi lin alg

00:17:25,699 --> 00:17:29,450
i was just flabbergasted by the amount

00:17:27,170 --> 00:17:32,050
of work you put in in fact when my great

00:17:29,450 --> 00:17:35,300
anecdotes from pru is when i sent out my

00:17:32,050 --> 00:17:36,890
multi pack and he basically submitted a

00:17:35,300 --> 00:17:38,690
makefile i still an incomprehensible

00:17:36,890 --> 00:17:41,360
make file have no idea what it said but

00:17:38,690 --> 00:17:42,090
it was amazing it sort of built

00:17:41,360 --> 00:17:43,620
everything

00:17:42,090 --> 00:17:46,620
including I think made the coffee in the

00:17:43,620 --> 00:17:48,240
morning people will do that and he put a

00:17:46,620 --> 00:17:49,409
tremendous amount of work it takes that

00:17:48,240 --> 00:17:51,419
kind of work to get things off the

00:17:49,409 --> 00:17:52,740
ground it really does it's just not you

00:17:51,419 --> 00:17:54,330
can't just sort of show up and hope that

00:17:52,740 --> 00:17:57,779
things happen you really have to put in

00:17:54,330 --> 00:18:00,419
the work the other thing I think is

00:17:57,779 --> 00:18:01,740
important is you do what's right you

00:18:00,419 --> 00:18:03,600
know some in other words you got to put

00:18:01,740 --> 00:18:04,860
aside kind of thoughts of all I'm gonna

00:18:03,600 --> 00:18:06,840
make a lot of money or I'm going to be

00:18:04,860 --> 00:18:09,570
able to do something really cool because

00:18:06,840 --> 00:18:10,740
doing what's right means out getting you

00:18:09,570 --> 00:18:12,600
have your information you have your

00:18:10,740 --> 00:18:14,070
knowledge of your semantics environment

00:18:12,600 --> 00:18:15,450
the things you know about and those

00:18:14,070 --> 00:18:17,549
things come together for you to feel hey

00:18:15,450 --> 00:18:19,049
this is what I think is right and you're

00:18:17,549 --> 00:18:20,789
the only one that has that feeling and

00:18:19,049 --> 00:18:22,559
you need to own it and do something

00:18:20,789 --> 00:18:24,330
that's right timing is everything

00:18:22,559 --> 00:18:26,549
sometimes you're the right person for

00:18:24,330 --> 00:18:28,559
the job sometimes it's the right time

00:18:26,549 --> 00:18:31,169
for that to happen and that's that's

00:18:28,559 --> 00:18:32,549
hard to know when is the right time but

00:18:31,169 --> 00:18:34,169
when the time is right you have to have

00:18:32,549 --> 00:18:36,120
an urgency it can't wait it won't wait

00:18:34,169 --> 00:18:37,380
people are impatient if things don't

00:18:36,120 --> 00:18:39,690
move in a certain direction they'll

00:18:37,380 --> 00:18:41,520
wander off and do something else after a

00:18:39,690 --> 00:18:44,000
little bit of time you have to strive

00:18:41,520 --> 00:18:46,289
for excellence it really takes work and

00:18:44,000 --> 00:18:47,940
you have to give the best you have it'll

00:18:46,289 --> 00:18:49,289
never be enough but give your best

00:18:47,940 --> 00:18:50,669
anyway I love this quote from Mother

00:18:49,289 --> 00:18:54,270
Teresa there's actually a whole series

00:18:50,669 --> 00:18:56,130
of these kind of these aphorisms do good

00:18:54,270 --> 00:18:58,110
you today will often be forgotten do

00:18:56,130 --> 00:18:59,760
good anyway it's absolutely true and

00:18:58,110 --> 00:19:03,110
it's essential it's one of those life

00:18:59,760 --> 00:19:06,720
qualities that i think i would love to

00:19:03,110 --> 00:19:09,450
grow into some day another key to a

00:19:06,720 --> 00:19:10,890
success is while it's initially lonely

00:19:09,450 --> 00:19:12,210
and you're doing things on your own you

00:19:10,890 --> 00:19:13,919
have to build a community if it's going

00:19:12,210 --> 00:19:15,659
to have long-term success you have to

00:19:13,919 --> 00:19:17,880
get others involved and that means

00:19:15,659 --> 00:19:19,679
interacting with people and that means

00:19:17,880 --> 00:19:21,779
having your ideas we put up and shut

00:19:19,679 --> 00:19:23,039
down it basically means you'll need the

00:19:21,779 --> 00:19:24,390
help other people other people have

00:19:23,039 --> 00:19:26,669
different ideas than you you have to

00:19:24,390 --> 00:19:28,260
give up some of your hard-won ideas you

00:19:26,669 --> 00:19:30,000
have to give up some your ego someone

00:19:28,260 --> 00:19:32,970
will point out how about you suck and

00:19:30,000 --> 00:19:35,580
you probably do in some places and it's

00:19:32,970 --> 00:19:36,990
okay listen to that and that's the only

00:19:35,580 --> 00:19:38,399
way to make progress in the community is

00:19:36,990 --> 00:19:43,860
for people to come together and have

00:19:38,399 --> 00:19:46,169
some empathy towards each other it does

00:19:43,860 --> 00:19:47,520
expose you you know to treat other

00:19:46,169 --> 00:19:49,140
people the right way you have to care

00:19:47,520 --> 00:19:51,360
about them and that does expose you

00:19:49,140 --> 00:19:53,490
because you can't get hurt but you do it

00:19:51,360 --> 00:19:55,270
anyway and then you keep moving forward

00:19:53,490 --> 00:19:57,040
and it's a great thing much

00:19:55,270 --> 00:19:58,840
we sit on this topic I think the key to

00:19:57,040 --> 00:20:00,490
to building a community there's a lot of

00:19:58,840 --> 00:20:02,590
lessons to be learned from all kinds of

00:20:00,490 --> 00:20:04,330
projects love to talk to some of you

00:20:02,590 --> 00:20:06,670
about your lessons of how you build

00:20:04,330 --> 00:20:09,370
communities then patients a little bit

00:20:06,670 --> 00:20:11,140
of luck also good things take time it

00:20:09,370 --> 00:20:13,930
doesn't happen right away numpy took a

00:20:11,140 --> 00:20:17,440
long time to get real adoption 2007 you

00:20:13,930 --> 00:20:19,450
know six is sort of 22 years afterwards

00:20:17,440 --> 00:20:21,010
it really was 2009 before I started

00:20:19,450 --> 00:20:23,200
seeing a lot of adoption of numpy so

00:20:21,010 --> 00:20:24,460
it's four years later and the right

00:20:23,200 --> 00:20:25,990
factors have to come together one of

00:20:24,460 --> 00:20:28,270
those factors for example the numpy sci

00:20:25,990 --> 00:20:29,980
fi communities was github for a long

00:20:28,270 --> 00:20:31,660
time the number of the contributor just

00:20:29,980 --> 00:20:34,060
sort of creeped along and then the ease

00:20:31,660 --> 00:20:36,480
in which you could contribute jumped and

00:20:34,060 --> 00:20:38,710
all of a sudden we got more contributors

00:20:36,480 --> 00:20:40,930
all right so that's a little bit of

00:20:38,710 --> 00:20:42,550
history of what I did in the past with

00:20:40,930 --> 00:20:45,190
numpy and sci-fi so what is this num pie

00:20:42,550 --> 00:20:48,550
anyway perhaps show of hands who uses

00:20:45,190 --> 00:20:49,840
num pyar knows what it is okay a fair

00:20:48,550 --> 00:20:51,910
number of you excellent you know the

00:20:49,840 --> 00:20:54,580
Europeans are always smarter than the I

00:20:51,910 --> 00:20:56,320
asked that question in the end in the US

00:20:54,580 --> 00:20:58,120
and I don't quite get the same response

00:20:56,320 --> 00:20:59,590
there's maybe half of the room but here

00:20:58,120 --> 00:21:00,910
everybody Elise has seen it they all

00:20:59,590 --> 00:21:02,440
rejected of course and dude something

00:21:00,910 --> 00:21:05,620
else but that's that's another that's

00:21:02,440 --> 00:21:07,480
another beauty of the European but what

00:21:05,620 --> 00:21:09,670
numpy is essentially an array orient

00:21:07,480 --> 00:21:11,380
extension it's it's got an array object

00:21:09,670 --> 00:21:13,080
and fast operations on an array object

00:21:11,380 --> 00:21:15,790
it's fairly simple actually its core

00:21:13,080 --> 00:21:17,800
here's a simple examples you can build a

00:21:15,790 --> 00:21:19,510
2-d two dimensional array and do some

00:21:17,800 --> 00:21:20,710
computations on it and you can some

00:21:19,510 --> 00:21:22,300
along different axes or you can have a

00:21:20,710 --> 00:21:23,650
three dimensional array you can have an

00:21:22,300 --> 00:21:25,510
N dimensional array and that's the idea

00:21:23,650 --> 00:21:27,370
of organizing data together in a way

00:21:25,510 --> 00:21:28,960
that can be operated over quickly and by

00:21:27,370 --> 00:21:31,390
quickly we mean you hand it over to a

00:21:28,960 --> 00:21:32,980
precompiled loop or pre-compiled engine

00:21:31,390 --> 00:21:35,080
that does the computation and not and so

00:21:32,980 --> 00:21:36,880
that's not happening in Python so when

00:21:35,080 --> 00:21:38,590
you work with dump I raised you you can

00:21:36,880 --> 00:21:40,030
release the girl you are releasing that

00:21:38,590 --> 00:21:41,410
will interpret lock and you don't have

00:21:40,030 --> 00:21:44,320
the same problems that happen if you're

00:21:41,410 --> 00:21:46,540
not using an umpire a so here's just a

00:21:44,320 --> 00:21:49,030
diagram of what it looks like is a

00:21:46,540 --> 00:21:51,070
Python object each element of the array

00:21:49,030 --> 00:21:52,600
has to be exactly the same type that's

00:21:51,070 --> 00:21:54,400
one restriction of an umpire a so it has

00:21:52,600 --> 00:21:56,860
to be the same number of bytes is its

00:21:54,400 --> 00:21:57,850
basic restriction but that bites can be

00:21:56,860 --> 00:21:59,980
a lot of different things give me a

00:21:57,850 --> 00:22:02,890
pointer to a Python object it can be a

00:21:59,980 --> 00:22:06,410
structure with an int float and 10 bytes

00:22:02,890 --> 00:22:08,300
of strings it can be unicode utf-8

00:22:06,410 --> 00:22:10,370
two is always what Unicode is a numpy

00:22:08,300 --> 00:22:11,900
and then there's these erase scalar

00:22:10,370 --> 00:22:13,730
things that'll also creep up and and

00:22:11,900 --> 00:22:14,840
bite you on occasion if you're trying to

00:22:13,730 --> 00:22:19,880
understand what comes out of an umpire

00:22:14,840 --> 00:22:21,800
ray so fairly straightforward once about

00:22:19,880 --> 00:22:23,510
three years ago for four or five years

00:22:21,800 --> 00:22:24,920
ago now somebody asked me to come up

00:22:23,510 --> 00:22:26,330
with the Zen of numpy if you don't

00:22:24,920 --> 00:22:28,070
import this you all know Tim Peters

00:22:26,330 --> 00:22:30,320
aphorism that have come up very very

00:22:28,070 --> 00:22:31,760
nice and this is definitely not at that

00:22:30,320 --> 00:22:33,670
same caliber but it gives a little bit

00:22:31,760 --> 00:22:35,540
of a flavor of how I think about numpy

00:22:33,670 --> 00:22:36,920
stride it better than scattered

00:22:35,540 --> 00:22:38,810
contiguous better than striated

00:22:36,920 --> 00:22:40,370
descriptive as better than imperative

00:22:38,810 --> 00:22:42,230
array oriented it's better than

00:22:40,370 --> 00:22:44,630
object-oriented prep still debatable we

00:22:42,230 --> 00:22:46,790
might it's a fun one broadcasting is a

00:22:44,630 --> 00:22:48,710
great idea and vectorize is better than

00:22:46,790 --> 00:22:50,630
explicit loop unless it's too

00:22:48,710 --> 00:22:52,640
complicated and then you can use scythe

00:22:50,630 --> 00:22:56,420
on her number and think in higher

00:22:52,640 --> 00:22:58,430
dimensions to solve your problems real

00:22:56,420 --> 00:22:59,810
quick kind of example array or computing

00:22:58,430 --> 00:23:01,790
I like to show this it's a little bit of

00:22:59,810 --> 00:23:04,220
a cheesy example but the Fibonacci

00:23:01,790 --> 00:23:06,050
numbers are so common in Python we like

00:23:04,220 --> 00:23:07,970
to show them Chris here's the Python

00:23:06,050 --> 00:23:10,370
implementation one bad one one better

00:23:07,970 --> 00:23:12,680
one in terms of performance now if you

00:23:10,370 --> 00:23:15,410
compare the Python approach to Fibonacci

00:23:12,680 --> 00:23:17,510
versus ok I'm a ray oriented guy i use

00:23:15,410 --> 00:23:19,280
the numpy stack what do i do well of

00:23:17,510 --> 00:23:21,230
course I reached the solution and find

00:23:19,280 --> 00:23:24,040
the roots of the discrete difference

00:23:21,230 --> 00:23:26,630
equation and just compute them for nem

00:23:24,040 --> 00:23:29,180
so that's a vectorized computation here

00:23:26,630 --> 00:23:32,810
fib to a I just generate a vector of

00:23:29,180 --> 00:23:35,030
numbers and and then I calculate with

00:23:32,810 --> 00:23:36,110
the root r1 and r2 I can use the roots

00:23:35,030 --> 00:23:38,840
command to take the roots of a

00:23:36,110 --> 00:23:41,180
polynomial calculate the power to those

00:23:38,840 --> 00:23:42,680
of those roots subtract those are array

00:23:41,180 --> 00:23:44,060
expressions happening I don't see any

00:23:42,680 --> 00:23:45,770
for loops there but for loops are

00:23:44,060 --> 00:23:47,300
happening on the covers let's see if

00:23:45,770 --> 00:23:49,580
that's the concept of array or a

00:23:47,300 --> 00:23:51,560
computing is gathering your data doing

00:23:49,580 --> 00:23:54,680
high-level computations on them all at

00:23:51,560 --> 00:23:57,080
once and then if you're really clever

00:23:54,680 --> 00:23:59,000
you understand that it's basically the

00:23:57,080 --> 00:24:01,670
output of an unstable filter and I can

00:23:59,000 --> 00:24:03,740
use the linear filter tool and scifi to

00:24:01,670 --> 00:24:06,430
generate the output of at least the

00:24:03,740 --> 00:24:08,210
first part of the Fibonacci sequence

00:24:06,430 --> 00:24:09,680
those who have done this in the room

00:24:08,210 --> 00:24:11,350
will also i will also understand that

00:24:09,680 --> 00:24:13,900
i'll have overflow if I you

00:24:11,350 --> 00:24:16,240
is the floating point of the machine

00:24:13,900 --> 00:24:18,010
like I'm doing with Saipan numpy but you

00:24:16,240 --> 00:24:19,299
can get faster performance that's one of

00:24:18,010 --> 00:24:21,730
the benefits of area are computing is

00:24:19,299 --> 00:24:23,799
you you immediately typically get faster

00:24:21,730 --> 00:24:25,480
performance and so that's usually what

00:24:23,799 --> 00:24:26,770
people reach for and why they reach for

00:24:25,480 --> 00:24:28,390
a or in computing is to get the fast

00:24:26,770 --> 00:24:32,049
performance they're looking for there

00:24:28,390 --> 00:24:34,450
are other reasons to do it however APL

00:24:32,049 --> 00:24:35,559
really was the father of array oriented

00:24:34,450 --> 00:24:37,929
languages it's been around since

00:24:35,559 --> 00:24:40,299
nineteen sixty four but it was cryptic

00:24:37,929 --> 00:24:41,890
the hieroglyphics of APL are still

00:24:40,299 --> 00:24:44,440
trying to be decoded we have not found

00:24:41,890 --> 00:24:45,909
the rosetta stone yet to understand what

00:24:44,440 --> 00:24:48,580
people actually said in all these

00:24:45,909 --> 00:24:49,870
wonderful array area codes just kidding

00:24:48,580 --> 00:24:51,820
actually I know put some people can read

00:24:49,870 --> 00:24:54,010
APL and there were other English

00:24:51,820 --> 00:24:55,809
versions of that same concept brought in

00:24:54,010 --> 00:24:59,159
had a lot of the same ideas a lot in the

00:24:55,809 --> 00:25:02,530
mountain um pi is a descendant of APL

00:24:59,159 --> 00:25:03,940
alright so another simple idea of a rare

00:25:02,530 --> 00:25:05,470
and computing is to gather your data

00:25:03,940 --> 00:25:06,820
together whereas a lot of

00:25:05,470 --> 00:25:08,200
object-oriented approaches end up

00:25:06,820 --> 00:25:10,299
scattering your memory all over the

00:25:08,200 --> 00:25:11,559
place objects versus attributes if you

00:25:10,299 --> 00:25:13,570
gather that all together and make

00:25:11,559 --> 00:25:15,100
objects essentially rows in a table of

00:25:13,570 --> 00:25:16,690
attributes now you can do

00:25:15,100 --> 00:25:18,789
column-oriented processing your data is

00:25:16,690 --> 00:25:20,710
all together and your modern processors

00:25:18,789 --> 00:25:22,419
can scream through this railroad

00:25:20,710 --> 00:25:24,190
computing is perfectly suited and

00:25:22,419 --> 00:25:27,070
matched to the vector computers of today

00:25:24,190 --> 00:25:28,120
the multi-core the multi CPU so whenever

00:25:27,070 --> 00:25:30,070
you can do that you get the added

00:25:28,120 --> 00:25:31,840
benefit of actually being able to take

00:25:30,070 --> 00:25:34,030
advantage of those that hardware that's

00:25:31,840 --> 00:25:37,030
otherwise not really exposed very well

00:25:34,030 --> 00:25:38,650
in the languages of today so I've talked

00:25:37,030 --> 00:25:40,059
about those benefits I'll move on I'm

00:25:38,650 --> 00:25:41,770
going to skip this example put it up

00:25:40,059 --> 00:25:43,090
briefly just so you get a feel for the

00:25:41,770 --> 00:25:44,950
kind of code this is something I did

00:25:43,090 --> 00:25:46,840
once it was awesome somebody tweeted

00:25:44,950 --> 00:25:48,850
here's a problem and I said oh I think I

00:25:46,840 --> 00:25:51,549
can solve that rather than spend time on

00:25:48,850 --> 00:25:53,110
company stuff so I had a good time just

00:25:51,549 --> 00:25:54,760
a plain with this problem and this is

00:25:53,110 --> 00:25:58,000
what I came up with it to basically find

00:25:54,760 --> 00:26:00,309
a circle out of this roughly circle like

00:25:58,000 --> 00:26:02,799
image so that's the kind of thing you

00:26:00,309 --> 00:26:04,270
can do now numpy has had a story in data

00:26:02,799 --> 00:26:06,220
analytics for a long time because of

00:26:04,270 --> 00:26:07,720
these structured arrays I said briefly

00:26:06,220 --> 00:26:09,909
before that every element of an umpire

00:26:07,720 --> 00:26:11,860
rate can be an arbitrary structure can

00:26:09,909 --> 00:26:13,390
we integer float whatever and so I can

00:26:11,860 --> 00:26:15,280
think of a one-dimensional numpy array

00:26:13,390 --> 00:26:17,830
as a table as an Excel table it's a

00:26:15,280 --> 00:26:20,020
really nice mapping however it's a array

00:26:17,830 --> 00:26:21,700
of structures which sometimes isn't the

00:26:20,020 --> 00:26:23,530
optimal data structure when you're

00:26:21,700 --> 00:26:24,640
trying to say add new columns quickly or

00:26:23,530 --> 00:26:27,550
do

00:26:24,640 --> 00:26:29,740
computations down the columns so even

00:26:27,550 --> 00:26:32,590
though it works it's not as flexible as

00:26:29,740 --> 00:26:34,330
we'd like and Pam is emerged as

00:26:32,590 --> 00:26:36,760
basically this generic structure of

00:26:34,330 --> 00:26:38,170
arrays where it makes it a point errs

00:26:36,760 --> 00:26:40,630
two different arrays under the covers so

00:26:38,170 --> 00:26:42,910
it sits on top of numpy and it provides

00:26:40,630 --> 00:26:45,130
a lot more user-friendly tools for

00:26:42,910 --> 00:26:46,930
people doing data analysis so whereas

00:26:45,130 --> 00:26:48,370
behind the past when you're using numpy

00:26:46,930 --> 00:26:50,650
to data analysis you might have to write

00:26:48,370 --> 00:26:53,830
tip 5 to 10 lines of code with pandas

00:26:50,650 --> 00:26:55,600
it's one or a method call and it's it's

00:26:53,830 --> 00:26:57,310
quite a bit simpler so a lot of people

00:26:55,600 --> 00:26:59,590
have come to the Python data community

00:26:57,310 --> 00:27:01,510
because of pandas this list basically

00:26:59,590 --> 00:27:02,860
comes from a user of pandas who says

00:27:01,510 --> 00:27:05,340
this is why I love pandas a few of these

00:27:02,860 --> 00:27:08,200
reasons and then I modified it slightly

00:27:05,340 --> 00:27:10,630
so currently today and big data

00:27:08,200 --> 00:27:12,370
analytics Python this is the basic key

00:27:10,630 --> 00:27:13,510
libraries and I might be missing a few

00:27:12,370 --> 00:27:16,090
here but this is these are sort of the

00:27:13,510 --> 00:27:18,820
basic ones numpy sci fi pandas

00:27:16,090 --> 00:27:20,410
matplotlib ipython the list goes on it

00:27:18,820 --> 00:27:21,760
becomes quite a stack so when you're

00:27:20,410 --> 00:27:24,070
sitting there I want to use Python for

00:27:21,760 --> 00:27:25,360
the analysis you have to get a bit of

00:27:24,070 --> 00:27:27,880
stuff together to make that happen

00:27:25,360 --> 00:27:30,220
that's really why we created anaconda

00:27:27,880 --> 00:27:32,380
and Conda some of you may be interested

00:27:30,220 --> 00:27:34,390
to note that whereas a lot of people in

00:27:32,380 --> 00:27:37,450
using our for data science Python is

00:27:34,390 --> 00:27:39,280
grant rapidly creeping as a you know

00:27:37,450 --> 00:27:41,440
equal footing for data analytics with

00:27:39,280 --> 00:27:45,280
are a lot of people this is a recent

00:27:41,440 --> 00:27:46,840
survey done at o'reilly and that they'd

00:27:45,280 --> 00:27:49,150
surveyed the people of tenant strata in

00:27:46,840 --> 00:27:50,770
2012 and 2013 this is a revelation to

00:27:49,150 --> 00:27:52,480
o'reilly as well i think because they've

00:27:50,770 --> 00:27:54,310
been really searching for people to

00:27:52,480 --> 00:27:56,260
write books on python for the analysis i

00:27:54,310 --> 00:27:57,760
think also west McKinney's book was

00:27:56,260 --> 00:27:59,170
successful in that that really opened

00:27:57,760 --> 00:28:00,550
the floodgates as well hey there really

00:27:59,170 --> 00:28:02,170
is a market here we should get books

00:28:00,550 --> 00:28:04,780
I've been asked to write a lot of books

00:28:02,170 --> 00:28:08,230
I have no time to write any book so so

00:28:04,780 --> 00:28:09,960
far I handed that to a few other people

00:28:08,230 --> 00:28:12,700
maybe we'll get a book out of continuum

00:28:09,960 --> 00:28:14,080
we also see articles like this I don't

00:28:12,700 --> 00:28:15,550
want you to language wars I think

00:28:14,080 --> 00:28:17,380
actually we can work together with the

00:28:15,550 --> 00:28:19,930
art community but it just goes to show

00:28:17,380 --> 00:28:22,360
that it becomes kind of a choice you can

00:28:19,930 --> 00:28:24,100
do everything you need to do in Python

00:28:22,360 --> 00:28:25,830
pretty much and occasionally you need to

00:28:24,100 --> 00:28:28,030
call out to our and you can do that

00:28:25,830 --> 00:28:29,410
Python is growing is the top language in

00:28:28,030 --> 00:28:31,290
schools many of you have seen this but I

00:28:29,410 --> 00:28:33,850
like to show it we're in a Python

00:28:31,290 --> 00:28:35,590
conference we should kind of celebrate

00:28:33,850 --> 00:28:38,080
the fact that python is being used

00:28:35,590 --> 00:28:40,049
forever lots of places

00:28:38,080 --> 00:28:43,029
this is us school's top universities

00:28:40,049 --> 00:28:44,620
pythons the number one introductory

00:28:43,029 --> 00:28:47,019
class being taught now some will say

00:28:44,620 --> 00:28:50,470
that's how languages go to die so maybe

00:28:47,019 --> 00:28:51,909
it's not such good news I never get a

00:28:50,470 --> 00:28:54,490
whole lot of people using Python have no

00:28:51,909 --> 00:28:56,980
idea what they're doing but I trust that

00:28:54,490 --> 00:28:59,019
our community is vibrant enough and

00:28:56,980 --> 00:29:00,880
robust enough to welcome them in train

00:28:59,019 --> 00:29:02,169
them up actually unlearn the things they

00:29:00,880 --> 00:29:04,890
might have learned wrong in school and

00:29:02,169 --> 00:29:07,360
help move the smoothie community forward

00:29:04,890 --> 00:29:10,090
so i have here I know I'm running out of

00:29:07,360 --> 00:29:11,860
time I've had plenty of slides plenty of

00:29:10,090 --> 00:29:13,090
things to talk about but I wanted to

00:29:11,860 --> 00:29:15,279
talk a little bit about why I think

00:29:13,090 --> 00:29:17,950
python is fantastic for title computing

00:29:15,279 --> 00:29:19,899
I as I said I was a domain expert a data

00:29:17,950 --> 00:29:21,909
scientist scientist coming to python and

00:29:19,899 --> 00:29:24,909
I had reasons for it some of those were

00:29:21,909 --> 00:29:26,559
the same as they are today one syntax it

00:29:24,909 --> 00:29:29,679
gets out of your way I don't have to

00:29:26,559 --> 00:29:31,299
learn jargon and concepts it basically

00:29:29,679 --> 00:29:33,700
leverages my English language data

00:29:31,299 --> 00:29:35,110
centers perhaps will be a language that

00:29:33,700 --> 00:29:37,029
leverages Mandarin data centers in the

00:29:35,110 --> 00:29:39,039
future I won't benefit from it but

00:29:37,029 --> 00:29:41,470
others will this leverages those Latin

00:29:39,039 --> 00:29:43,240
Latin character centers a white space I

00:29:41,470 --> 00:29:45,399
love white space the fact that it

00:29:43,240 --> 00:29:47,230
conveys intention I'll tell you why

00:29:45,399 --> 00:29:49,090
because my field of view is limited I

00:29:47,230 --> 00:29:51,429
have limited horizontal and limited

00:29:49,090 --> 00:29:52,570
vertical real estate I can see and I

00:29:51,429 --> 00:29:54,730
have to understand something in that

00:29:52,570 --> 00:29:56,620
limited space so if I'm using that up

00:29:54,730 --> 00:29:59,590
with braces and brackets and things that

00:29:56,620 --> 00:30:01,870
are unnecessary it's just it's waste for

00:29:59,590 --> 00:30:04,149
me it's also why if I have long long

00:30:01,870 --> 00:30:05,320
paths long long dot paths for things in

00:30:04,149 --> 00:30:08,049
my variable name takes up the whole

00:30:05,320 --> 00:30:10,630
screen I'm in trouble so I'm kind of a

00:30:08,049 --> 00:30:12,010
not a big fan of that either complex

00:30:10,630 --> 00:30:13,720
numbers were built in early over

00:30:12,010 --> 00:30:15,669
loadable operators built in early this

00:30:13,720 --> 00:30:17,919
is mistake Java made for the scientists

00:30:15,669 --> 00:30:19,360
scientists need complex numbers the FFT

00:30:17,919 --> 00:30:22,269
is the reason electrical engineers have

00:30:19,360 --> 00:30:24,429
jobs and it's immediately has the FFT

00:30:22,269 --> 00:30:26,559
you've got to have a complex number or

00:30:24,429 --> 00:30:29,260
you'll have 200 of them and nobody will

00:30:26,559 --> 00:30:31,899
agree on what it should be just enough

00:30:29,260 --> 00:30:33,730
language support for arrays which is you

00:30:31,899 --> 00:30:35,679
know the brackets the ability to have

00:30:33,730 --> 00:30:36,880
commas go immediately to tuples so you

00:30:35,679 --> 00:30:39,039
don't have to have that funny index

00:30:36,880 --> 00:30:41,559
indexing these things were added

00:30:39,039 --> 00:30:43,120
actually at a critical time I have I

00:30:41,559 --> 00:30:45,429
definitely have to thank the Conrad

00:30:43,120 --> 00:30:48,669
Henson's the Paul Dubois's Jim Higgins

00:30:45,429 --> 00:30:50,139
who worked with the Python devs we'd 0

00:30:48,669 --> 00:30:50,600
and others to make sure these are added

00:30:50,139 --> 00:30:52,780
language

00:30:50,600 --> 00:30:55,340
early time it's been fantastic

00:30:52,780 --> 00:30:57,049
occasional programmers can understand it

00:30:55,340 --> 00:30:58,789
occasional programmers are the people

00:30:57,049 --> 00:31:00,890
like I was who don't we won't have to

00:30:58,789 --> 00:31:02,570
solve this by dimensional differential

00:31:00,890 --> 00:31:03,799
equation and don't want to spend time

00:31:02,570 --> 00:31:05,150
chasing pointers but I need to be able

00:31:03,799 --> 00:31:08,690
to see code and read understand it and

00:31:05,150 --> 00:31:11,720
haskell or closure is too much to put in

00:31:08,690 --> 00:31:14,539
my head and remember so Python works

00:31:11,720 --> 00:31:16,130
perfectly in that space and I used to

00:31:14,539 --> 00:31:17,809
say that packaging was a problem with

00:31:16,130 --> 00:31:20,000
Python and no longer say that because

00:31:17,809 --> 00:31:21,590
packaging is awesome with Conda Conda

00:31:20,000 --> 00:31:24,110
makes your packaging problems go away

00:31:21,590 --> 00:31:25,460
that's fantastic we get that feedback

00:31:24,110 --> 00:31:27,169
from users all the time so I'm not just

00:31:25,460 --> 00:31:28,220
saying it because we put it out I'm

00:31:27,169 --> 00:31:30,500
saying it because we get that feedback

00:31:28,220 --> 00:31:32,390
from people and I use it and I love it

00:31:30,500 --> 00:31:34,669
it solved exactly the problem I've seen

00:31:32,390 --> 00:31:37,340
with with not merely get everything

00:31:34,669 --> 00:31:38,960
installed easily and quickly so lots of

00:31:37,340 --> 00:31:40,669
great things other about about Python

00:31:38,960 --> 00:31:41,870
simple extensible implementation its

00:31:40,669 --> 00:31:43,730
general built you can build a system

00:31:41,870 --> 00:31:45,770
general-purpose ports mobile programming

00:31:43,730 --> 00:31:46,970
styles all these things you know but a

00:31:45,770 --> 00:31:48,710
critical one is that it does have

00:31:46,970 --> 00:31:50,120
critical mass because you can have the

00:31:48,710 --> 00:31:51,620
ideal language but I don't know people

00:31:50,120 --> 00:31:53,809
using it and you'd be stuck you could

00:31:51,620 --> 00:31:55,100
not build community that's the hard

00:31:53,809 --> 00:31:56,570
thing and that's that's a bit of a

00:31:55,100 --> 00:31:58,280
chaotic question about when that will

00:31:56,570 --> 00:32:00,200
happen I can't give you answers it's

00:31:58,280 --> 00:32:01,700
sort of one of those emergent phenomena

00:32:00,200 --> 00:32:03,919
now there's things I don't like about

00:32:01,700 --> 00:32:06,679
Python and we could all probably rag on

00:32:03,919 --> 00:32:08,059
that together but you know some of these

00:32:06,679 --> 00:32:10,400
are being addressed I would love to see

00:32:08,059 --> 00:32:11,929
mononymously to see the ability to have

00:32:10,400 --> 00:32:13,909
anonymous chunks of code you could then

00:32:11,929 --> 00:32:15,500
send around places really for deferred

00:32:13,909 --> 00:32:17,750
evaluation is the most common use case

00:32:15,500 --> 00:32:19,730
for me I would love to be able to slice

00:32:17,750 --> 00:32:21,350
syntax outside of the brackets you know

00:32:19,730 --> 00:32:22,909
please just let us lie syntax be able to

00:32:21,350 --> 00:32:27,590
create the slice operator I use that a

00:32:22,909 --> 00:32:29,450
lot as a ray or any programming guy C

00:32:27,590 --> 00:32:30,679
Python runtime to Gil global variables

00:32:29,450 --> 00:32:32,059
inside lack of them a compilation

00:32:30,679 --> 00:32:33,440
there's there's some work to be done

00:32:32,059 --> 00:32:35,600
there no that's that that's a really

00:32:33,440 --> 00:32:37,669
hard one I would love to see some

00:32:35,600 --> 00:32:39,230
language extension other than import

00:32:37,669 --> 00:32:41,030
hooks I've seen a lot of use of a lot of

00:32:39,230 --> 00:32:42,919
very creative uses of import hooks to

00:32:41,030 --> 00:32:44,120
have kind of dsl's that we imported in a

00:32:42,919 --> 00:32:45,409
Python it's kind of cool actually you

00:32:44,120 --> 00:32:49,100
can extend Python as you like with the

00:32:45,409 --> 00:32:50,600
import statement and suck and it can be

00:32:49,100 --> 00:32:52,640
hard but using a general-purpose

00:32:50,600 --> 00:32:53,929
language because the devs of that

00:32:52,640 --> 00:32:54,890
language don't necessarily understand

00:32:53,929 --> 00:32:56,690
your use cases where I already

00:32:54,890 --> 00:32:59,179
programmer and there and I'll have a

00:32:56,690 --> 00:33:02,990
story about that a little bit about pep

00:32:59,179 --> 00:33:04,100
318 so numpy like its goods got the

00:33:02,990 --> 00:33:05,780
 of things

00:33:04,100 --> 00:33:08,299
but there's got a lot of problems with

00:33:05,780 --> 00:33:09,530
it to the d-type system the data type

00:33:08,299 --> 00:33:11,390
system which is essentially what allows

00:33:09,530 --> 00:33:13,070
the structure to raise its too limiting

00:33:11,390 --> 00:33:15,410
and difficult to extend its really it's

00:33:13,070 --> 00:33:17,150
it's more it's it's it grew out of

00:33:15,410 --> 00:33:18,950
numerics data descriptor that was their

00:33:17,150 --> 00:33:20,690
beginning and it kind of extended it

00:33:18,950 --> 00:33:22,880
just far enough but it needs to be kind

00:33:20,690 --> 00:33:24,650
of overhauled the immediate mode

00:33:22,880 --> 00:33:25,970
creating huge temporaries all the time

00:33:24,650 --> 00:33:28,340
when you have us an equation to it to

00:33:25,970 --> 00:33:30,200
evaluate it's almost an in-memory

00:33:28,340 --> 00:33:31,490
database really close if you're using

00:33:30,200 --> 00:33:32,750
sequel out you can also use an umpire

00:33:31,490 --> 00:33:34,280
for the same purpose and be faster

00:33:32,750 --> 00:33:35,570
actually but it's not quite it doesn't

00:33:34,280 --> 00:33:38,600
really evaluate some of the operations

00:33:35,570 --> 00:33:40,429
that you would like lots of an optimized

00:33:38,600 --> 00:33:42,679
parts lots of embarrassingly unoptimized

00:33:40,429 --> 00:33:45,490
parts actually if you start giving the

00:33:42,679 --> 00:33:47,419
code to say who's idiot that wrote this

00:33:45,490 --> 00:33:48,830
hopefully the blames not me anymore

00:33:47,419 --> 00:33:52,640
because somebody's changed the comments

00:33:48,830 --> 00:33:56,750
or something the code base is organic

00:33:52,640 --> 00:33:58,340
and hard to extend I think as I reflect

00:33:56,750 --> 00:33:59,960
on back to the history I think one of

00:33:58,340 --> 00:34:02,510
the most important pieces of work that I

00:33:59,960 --> 00:34:04,909
did in 2005-2006 it's actually sit down

00:34:02,510 --> 00:34:06,169
with Guido I remember flying to

00:34:04,909 --> 00:34:07,370
sentiment san mateo where he was working

00:34:06,169 --> 00:34:09,080
and so I don't have lunch with weed oh

00:34:07,370 --> 00:34:11,270
and say how do we get numpy into Python

00:34:09,080 --> 00:34:12,889
right and it serves a little professor

00:34:11,270 --> 00:34:15,260
and think I can go do this he's a very

00:34:12,889 --> 00:34:16,909
nice guy very accommodating so I went

00:34:15,260 --> 00:34:18,470
there with Paul Dubois and we SAT we had

00:34:16,909 --> 00:34:21,530
lunch we talked about what could we do

00:34:18,470 --> 00:34:23,149
to get numpy into in AmeriCorps the new

00:34:21,530 --> 00:34:25,580
American numeric at the time we were

00:34:23,149 --> 00:34:27,290
calling it into Python and he you know

00:34:25,580 --> 00:34:29,149
he cautioned about well you know there's

00:34:27,290 --> 00:34:30,590
there's if you get in the Python you

00:34:29,149 --> 00:34:31,550
have an 18-month release cycle it won't

00:34:30,590 --> 00:34:33,080
be able to be updated very quickly

00:34:31,550 --> 00:34:34,550
there's some you know some downsides to

00:34:33,080 --> 00:34:35,480
and that was enough to go yeah we

00:34:34,550 --> 00:34:37,070
probably do not do that but we

00:34:35,480 --> 00:34:40,100
definitely want kind of the structure of

00:34:37,070 --> 00:34:42,350
the numpy array in Python and so I spent

00:34:40,100 --> 00:34:43,909
time writing this pep-pep 3 118 to

00:34:42,350 --> 00:34:45,290
really extend the buffer protocol now

00:34:43,909 --> 00:34:47,179
raise your hands if you know what Pepsi

00:34:45,290 --> 00:34:49,940
118 is or know what the buffer protocol

00:34:47,179 --> 00:34:51,080
is I should see a fewer hands because

00:34:49,940 --> 00:34:52,940
this is one of those sort of

00:34:51,080 --> 00:34:55,369
underbellies of Python ready ability

00:34:52,940 --> 00:34:56,359
it's kind of on this on the lowest level

00:34:55,369 --> 00:34:58,310
but it's really the ability for

00:34:56,359 --> 00:35:00,260
arbitrary objects to share data and

00:34:58,310 --> 00:35:01,970
that's what the buffer protocol allowed

00:35:00,260 --> 00:35:04,070
that initially but it only allowed you

00:35:01,970 --> 00:35:05,900
to share a single point of data and no

00:35:04,070 --> 00:35:07,850
metadata about the data couldn't share

00:35:05,900 --> 00:35:09,530
that was it was really an array it had

00:35:07,850 --> 00:35:11,060
this kind of data type in it so the

00:35:09,530 --> 00:35:13,490
extended buffer protocol was really all

00:35:11,060 --> 00:35:16,580
about getting more metadata around the

00:35:13,490 --> 00:35:18,140
pointer to memory that was being shared

00:35:16,580 --> 00:35:20,570
it really makes possible a heterogeneous

00:35:18,140 --> 00:35:22,700
world a powerful array like objects so

00:35:20,570 --> 00:35:24,650
it isn't really necessary for there be

00:35:22,700 --> 00:35:26,450
two only one numpy there really could be

00:35:24,650 --> 00:35:27,800
a lot of array like objects that share

00:35:26,450 --> 00:35:31,610
memory and they could really operate

00:35:27,800 --> 00:35:33,050
independently and coexist I think adding

00:35:31,610 --> 00:35:34,280
multiple dispatch the language to

00:35:33,050 --> 00:35:35,600
actually improve that better a motive

00:35:34,280 --> 00:35:37,640
dispatch library would actually make

00:35:35,600 --> 00:35:38,750
that a heaven at that point you just

00:35:37,640 --> 00:35:40,640
need pep through an eight and local

00:35:38,750 --> 00:35:44,750
dispatch we don't need a single array

00:35:40,640 --> 00:35:46,460
library like numpy so that's what I

00:35:44,750 --> 00:35:47,540
think of the future of numpy in the

00:35:46,460 --> 00:35:48,980
future of the world I think of a

00:35:47,540 --> 00:35:51,200
heterogeneous world the world with a lot

00:35:48,980 --> 00:35:52,910
of things working the buffer protocol

00:35:51,200 --> 00:35:54,500
exposes this idea and I don't have time

00:35:52,910 --> 00:35:56,060
to talk about it today someday I'll

00:35:54,500 --> 00:35:58,370
maybe give a talk about this i'm really

00:35:56,060 --> 00:35:59,600
not a don't feel always qualified to do

00:35:58,370 --> 00:36:01,010
this i'm always kind of a I'm a

00:35:59,600 --> 00:36:02,390
scientist by training I'm always kind of

00:36:01,010 --> 00:36:04,610
an approaching computer scientist

00:36:02,390 --> 00:36:06,230
software developer bye bye effort and

00:36:04,610 --> 00:36:08,390
trade and learning from other people but

00:36:06,230 --> 00:36:10,490
there's something real about this duel

00:36:08,390 --> 00:36:12,950
do I'll do the duel of encapsulation the

00:36:10,490 --> 00:36:15,410
buffer protocol exposes these data types

00:36:12,950 --> 00:36:17,450
they sort of invert the idea of having

00:36:15,410 --> 00:36:19,940
data and having methods attached to that

00:36:17,450 --> 00:36:22,070
data the data is exposed and you talk

00:36:19,940 --> 00:36:24,410
about it in full terms like a schema and

00:36:22,070 --> 00:36:26,240
then you throw code past it I'll talk a

00:36:24,410 --> 00:36:27,770
little bit about that about I think what

00:36:26,240 --> 00:36:30,200
it what it allows for us to do in the

00:36:27,770 --> 00:36:31,670
future so what of the future what is

00:36:30,200 --> 00:36:32,840
pythons role in the future we talked

00:36:31,670 --> 00:36:34,460
about today we talked about little in

00:36:32,840 --> 00:36:36,500
the past what's what's going to happen

00:36:34,460 --> 00:36:38,210
in the future well I've watched the Star

00:36:36,500 --> 00:36:39,590
Trek episode so I think I know the

00:36:38,210 --> 00:36:42,350
future and I'm going to be able to tell

00:36:39,590 --> 00:36:43,640
you what's going to happen I'll just

00:36:42,350 --> 00:36:44,780
describe what I'd like to see and some

00:36:43,640 --> 00:36:46,130
of the principles that I think that'll

00:36:44,780 --> 00:36:47,450
guide the future but we can't ever tell

00:36:46,130 --> 00:36:48,920
we can't ever tell what's going to

00:36:47,450 --> 00:36:50,960
happen one of the things that's very

00:36:48,920 --> 00:36:53,170
real and is based in physics is the idea

00:36:50,960 --> 00:36:55,820
that data has mass data is growing

00:36:53,170 --> 00:36:57,220
faster than speed of light can carry

00:36:55,820 --> 00:36:59,000
that data from one point to another

00:36:57,220 --> 00:37:00,530
therefore that means you're gonna want

00:36:59,000 --> 00:37:02,600
to have data sit where it is and that's

00:37:00,530 --> 00:37:04,040
true whether it's in a GPU or it's in a

00:37:02,600 --> 00:37:06,260
memory cache or whether it's on a

00:37:04,040 --> 00:37:08,270
cluster somewhere you don't want to be

00:37:06,260 --> 00:37:09,680
pulling data so what that means a lot of

00:37:08,270 --> 00:37:11,750
our systems that were built around the

00:37:09,680 --> 00:37:14,060
idea of encapsulation and serialization

00:37:11,750 --> 00:37:16,190
actually wrong they don't work very well

00:37:14,060 --> 00:37:18,230
when we do that and so we have to kind

00:37:16,190 --> 00:37:20,360
of think differently about how we're

00:37:18,230 --> 00:37:22,340
going to manage this so there's a night

00:37:20,360 --> 00:37:24,950
there's a blog about this as well it's a

00:37:22,340 --> 00:37:26,570
well-known observation data gravity some

00:37:24,950 --> 00:37:28,340
guys even invented you can even talk

00:37:26,570 --> 00:37:29,880
about the formula for data and then kind

00:37:28,340 --> 00:37:32,370
of how it attracts each other

00:37:29,880 --> 00:37:34,320
I don't know maybe maybe that's useful I

00:37:32,370 --> 00:37:36,300
think it is useful to think differently

00:37:34,320 --> 00:37:37,830
in a relativistic sense normally we

00:37:36,300 --> 00:37:40,170
think about ourselves on a platform

00:37:37,830 --> 00:37:42,150
while data moves past us we kind of

00:37:40,170 --> 00:37:43,800
serialize data into our objects and then

00:37:42,150 --> 00:37:45,870
we do our little computation that we

00:37:43,800 --> 00:37:47,910
serialize them on their way but when

00:37:45,870 --> 00:37:49,170
data has mass that's really expensive it

00:37:47,910 --> 00:37:51,030
turns out our computations are really

00:37:49,170 --> 00:37:52,830
simple our comparative machines or can

00:37:51,030 --> 00:37:54,870
rapidly do the computation a wait all

00:37:52,830 --> 00:37:57,090
day long the data to pipe through so how

00:37:54,870 --> 00:37:58,500
do we invert are thinking about this and

00:37:57,090 --> 00:38:00,690
think about it from a data center

00:37:58,500 --> 00:38:03,270
perspective where the code comes to the

00:38:00,690 --> 00:38:04,260
data and flows through the data so

00:38:03,270 --> 00:38:07,260
that's that's one thing that I think

00:38:04,260 --> 00:38:09,600
about and I in part of what's in pep 318

00:38:07,260 --> 00:38:11,190
that buffer protocol has some of the

00:38:09,600 --> 00:38:12,900
answers I think at least some would I be

00:38:11,190 --> 00:38:14,610
able to see some of you I'm sure we'll

00:38:12,900 --> 00:38:16,140
be able to think even deep more deeply

00:38:14,610 --> 00:38:18,120
and better about that and I'd love to

00:38:16,140 --> 00:38:20,280
get your feedback in your inspiration I

00:38:18,120 --> 00:38:21,420
think fundamentally the future of big

00:38:20,280 --> 00:38:23,250
data in Python is going to be

00:38:21,420 --> 00:38:24,630
heterogeneous there's going to be well

00:38:23,250 --> 00:38:26,460
as before we've had this notion of

00:38:24,630 --> 00:38:28,440
here's numpy everybody uses numpy it's a

00:38:26,460 --> 00:38:30,120
single kind of channel number I really

00:38:28,440 --> 00:38:33,060
is just a description it's a protocol i

00:38:30,120 --> 00:38:34,530
love the talk on tuesday by peter the 0

00:38:33,060 --> 00:38:36,150
and Q author who talked about the

00:38:34,530 --> 00:38:37,740
decentralized role in the future and

00:38:36,150 --> 00:38:39,990
contracts being the most important thing

00:38:37,740 --> 00:38:42,210
pep 318 is an example of that kind of

00:38:39,990 --> 00:38:44,040
protocol or contract between objects and

00:38:42,210 --> 00:38:45,990
it's a beautiful thing that's an

00:38:44,040 --> 00:38:47,220
important thing and I think that's what

00:38:45,990 --> 00:38:49,410
the futures gonna be like as well much

00:38:47,220 --> 00:38:51,900
more of that rather than here's a single

00:38:49,410 --> 00:38:54,990
library that everything sits around so

00:38:51,900 --> 00:38:56,670
there's and then what Python its role is

00:38:54,990 --> 00:38:58,350
going to be what doing what it's always

00:38:56,670 --> 00:39:00,420
done really well and that's playing this

00:38:58,350 --> 00:39:02,070
tremendous glue this tremendous ability

00:39:00,420 --> 00:39:03,750
to just stick things together very very

00:39:02,070 --> 00:39:05,310
quickly that's the advantage of not

00:39:03,750 --> 00:39:06,780
having static types is you can pull

00:39:05,310 --> 00:39:08,580
things together from all sorts of places

00:39:06,780 --> 00:39:11,160
in an agile fashion in an iterative

00:39:08,580 --> 00:39:14,820
fashion fail quickly find solutions and

00:39:11,160 --> 00:39:16,590
then move forward so at continuum we're

00:39:14,820 --> 00:39:17,940
going to base we're basically okay what

00:39:16,590 --> 00:39:20,460
I learned from numpy and sci-fi and

00:39:17,940 --> 00:39:21,780
watching it get deployed what would I do

00:39:20,460 --> 00:39:23,340
differently what kind of things would I

00:39:21,780 --> 00:39:24,930
do differently and some of that is

00:39:23,340 --> 00:39:27,390
expressed in what I described before

00:39:24,930 --> 00:39:29,880
about data having mass so the projects

00:39:27,390 --> 00:39:32,490
that makes the encompass that reality is

00:39:29,880 --> 00:39:34,380
really three projects Conda numba and

00:39:32,490 --> 00:39:37,530
blaze you know sigh pi really was a

00:39:34,380 --> 00:39:38,910
distribution not a library and so to do

00:39:37,530 --> 00:39:40,140
a distribution you gotta have a packager

00:39:38,910 --> 00:39:42,070
so we have to come up with a

00:39:40,140 --> 00:39:44,530
cross-platform

00:39:42,070 --> 00:39:46,930
complete Python independent package

00:39:44,530 --> 00:39:48,100
manager called Conda so that's that's

00:39:46,930 --> 00:39:52,270
why we've done that and all these are

00:39:48,100 --> 00:39:54,310
open source numba is about making a code

00:39:52,270 --> 00:39:56,410
as fast as possible so it's just a

00:39:54,310 --> 00:39:57,730
little blurb on Conda I wasn't going to

00:39:56,410 --> 00:39:58,840
mention it but yesterday after my talk

00:39:57,730 --> 00:40:00,670
somebody said you've got to talk about

00:39:58,840 --> 00:40:03,700
Conda keep talking about Conda because

00:40:00,670 --> 00:40:05,200
we love it it's awesome so tricot if

00:40:03,700 --> 00:40:07,270
you're not using anaconda or haven't

00:40:05,200 --> 00:40:08,530
tried Conda download mini Connie you

00:40:07,270 --> 00:40:10,060
don't have to get anaconda you can

00:40:08,530 --> 00:40:11,740
actually just do pip install conduct

00:40:10,060 --> 00:40:13,930
condone it if you want and now you can

00:40:11,740 --> 00:40:15,310
do a condo based management of your

00:40:13,930 --> 00:40:17,170
packages without even downloading

00:40:15,310 --> 00:40:18,610
anything from our site so it's

00:40:17,170 --> 00:40:21,310
completely open source completely free

00:40:18,610 --> 00:40:22,810
we communicate with the python packaging

00:40:21,310 --> 00:40:24,220
Authority with Nick and others to try to

00:40:22,810 --> 00:40:28,120
help understand how you integrate this

00:40:24,220 --> 00:40:30,610
even better blazing numba are our two

00:40:28,120 --> 00:40:31,570
open source projects and really we they

00:40:30,610 --> 00:40:32,830
have a lot of they have some

00:40:31,570 --> 00:40:34,420
dependencies especially number has this

00:40:32,830 --> 00:40:36,790
lvm dependency you want to be able to

00:40:34,420 --> 00:40:38,800
get it installed so the idea around this

00:40:36,790 --> 00:40:41,200
is blaise motivated motivated by

00:40:38,800 --> 00:40:43,930
generalizing this Pepsi 182 all

00:40:41,200 --> 00:40:46,300
languages and data sets really creating

00:40:43,930 --> 00:40:49,330
this Python glue two point oh that glues

00:40:46,300 --> 00:40:52,030
things together in a in a marvelous way

00:40:49,330 --> 00:40:53,530
that makes what you currently when you

00:40:52,030 --> 00:40:55,600
do data processing if you store your

00:40:53,530 --> 00:40:57,910
data in sequel or you store in HDFS or

00:40:55,600 --> 00:41:00,370
you store it in Postgres that defines

00:40:57,910 --> 00:41:02,710
how you query it right and your query

00:41:00,370 --> 00:41:04,030
becomes some kind of convoluted version

00:41:02,710 --> 00:41:05,710
of that the query language they've

00:41:04,030 --> 00:41:08,200
created for you and that's how you have

00:41:05,710 --> 00:41:10,930
to work have to use it and a lot of us

00:41:08,200 --> 00:41:13,600
in data analysis we love to use numpy or

00:41:10,930 --> 00:41:14,950
panda's expressions because we like the

00:41:13,600 --> 00:41:16,270
way they feel they fit our brain they

00:41:14,950 --> 00:41:17,260
match the way we want to think about the

00:41:16,270 --> 00:41:18,940
problem we'd like to use those

00:41:17,260 --> 00:41:21,100
expressions currently the only to do

00:41:18,940 --> 00:41:22,600
that is to pull the data to us in order

00:41:21,100 --> 00:41:24,220
to use those expressions and so blazes

00:41:22,600 --> 00:41:25,720
about inverting that and creating

00:41:24,220 --> 00:41:28,570
expressions that then move to the data

00:41:25,720 --> 00:41:31,570
in multiple ways numba is desired by the

00:41:28,570 --> 00:41:32,920
is motivated by the desire to not have

00:41:31,570 --> 00:41:34,630
to make people right extension this

00:41:32,920 --> 00:41:36,850
anymore and be able to write high-level

00:41:34,630 --> 00:41:40,780
code that is as fast or can be as fast

00:41:36,850 --> 00:41:43,030
as Fortran no and if that exists then um

00:41:40,780 --> 00:41:45,340
pot then an array oriented computing can

00:41:43,030 --> 00:41:47,260
be done at full speed on modern

00:41:45,340 --> 00:41:49,720
processors with very little effort and

00:41:47,260 --> 00:41:51,550
so that's the goal so I'm not able to

00:41:49,720 --> 00:41:53,050
cover all these slides they're here

00:41:51,550 --> 00:41:55,450
they'll be posted online you can see

00:41:53,050 --> 00:41:57,850
them but blaze it's

00:41:55,450 --> 00:41:59,500
its goal is to deal with data pain it's

00:41:57,850 --> 00:42:01,450
architectures divided up into an API

00:41:59,500 --> 00:42:03,700
deferred expressions are at the heart

00:42:01,450 --> 00:42:05,170
it's got data adapters and compute

00:42:03,700 --> 00:42:06,190
interpreters basically compute

00:42:05,170 --> 00:42:09,040
interpreters to run on different

00:42:06,190 --> 00:42:10,750
backends that's its architecture and you

00:42:09,040 --> 00:42:12,910
can it's it uses a flexible architecture

00:42:10,750 --> 00:42:14,530
so you can easily add new ones new data

00:42:12,910 --> 00:42:17,860
adapters and new compute compute

00:42:14,530 --> 00:42:19,720
backends the data descriptors the data

00:42:17,860 --> 00:42:21,790
format approach it allows you to have a

00:42:19,720 --> 00:42:23,800
uniform array or in an interface to

00:42:21,790 --> 00:42:27,130
whatever data to directories of CSV

00:42:23,800 --> 00:42:29,410
files to a sequel database hdf5 files to

00:42:27,130 --> 00:42:32,350
just json sitting on disk directories of

00:42:29,410 --> 00:42:34,750
JSON files then the compute allows you

00:42:32,350 --> 00:42:37,150
to have a uniform interface to dine

00:42:34,750 --> 00:42:39,070
which is our next generation numpy it's

00:42:37,150 --> 00:42:42,430
a C++ library and a python interface to

00:42:39,070 --> 00:42:44,470
it pandas even just Python actually you

00:42:42,430 --> 00:42:45,940
can run a compute on just Python lists

00:42:44,470 --> 00:42:48,340
of lists or lists of dicks or list of

00:42:45,940 --> 00:42:51,100
tuples just to you know see if

00:42:48,340 --> 00:42:52,650
everything is working right spark pi

00:42:51,100 --> 00:42:54,910
tables we do have support for spark

00:42:52,650 --> 00:42:57,370
spark is a member of the Duke Family it

00:42:54,910 --> 00:42:59,620
allows you to run in memory on multiple

00:42:57,370 --> 00:43:00,970
machines I set a lot of things about how

00:42:59,620 --> 00:43:02,770
deep I don't like Hadoop normally but

00:43:00,970 --> 00:43:06,430
spark and Impala I'm finally warming up

00:43:02,770 --> 00:43:09,090
to so they're kind of if they've saved

00:43:06,430 --> 00:43:11,350
the Hadoop ecosystem from my perspective

00:43:09,090 --> 00:43:13,180
blaze expressions these are deferred

00:43:11,350 --> 00:43:15,160
evaluations you basically create an

00:43:13,180 --> 00:43:16,900
expression as I'll show an example and

00:43:15,160 --> 00:43:18,850
that builds up a dag directed acyclic

00:43:16,900 --> 00:43:21,520
graph that describes that expression and

00:43:18,850 --> 00:43:23,830
then the arrays in that graph can be

00:43:21,520 --> 00:43:25,930
referred to various data adapters and

00:43:23,830 --> 00:43:27,970
then that gets sent to a compute all

00:43:25,930 --> 00:43:30,790
separated so we've separated out compute

00:43:27,970 --> 00:43:32,800
from data from code so you can you reuse

00:43:30,790 --> 00:43:34,210
those components independently and then

00:43:32,800 --> 00:43:36,220
bring them together for an actual

00:43:34,210 --> 00:43:39,550
computation here's a simple example of

00:43:36,220 --> 00:43:41,800
counting web links at the heart is what

00:43:39,550 --> 00:43:43,420
was missing from pep 318 which is a

00:43:41,800 --> 00:43:44,890
really good data description language

00:43:43,420 --> 00:43:46,030
fact I remember those discussions back

00:43:44,890 --> 00:43:48,850
and forth we argued whether would be

00:43:46,030 --> 00:43:50,590
numpy d types or C types specifications

00:43:48,850 --> 00:43:52,360
for data or whether and then we don't

00:43:50,590 --> 00:43:56,020
finally said enough they'll just be a

00:43:52,360 --> 00:43:58,210
string like the struct syntax boom and

00:43:56,020 --> 00:44:00,880
so that's the data declaration language

00:43:58,210 --> 00:44:02,680
in the buffer protocol not quite good

00:44:00,880 --> 00:44:04,120
enough the data shape we we've created

00:44:02,680 --> 00:44:05,470
we spent a lot of time I'm trying to

00:44:04,120 --> 00:44:07,680
figure out a data shape that could

00:44:05,470 --> 00:44:10,260
encompass all kinds of data

00:44:07,680 --> 00:44:12,000
so we love your feedback on this it's a

00:44:10,260 --> 00:44:13,829
separate project its independent it can

00:44:12,000 --> 00:44:15,510
be downloaded installed independent of

00:44:13,829 --> 00:44:17,130
anything else and it's basically got

00:44:15,510 --> 00:44:18,510
some parsers for the data shaped

00:44:17,130 --> 00:44:21,270
language you can interpret it in many

00:44:18,510 --> 00:44:23,309
way in various backends so you construct

00:44:21,270 --> 00:44:25,260
a table symbol which is in this case a

00:44:23,309 --> 00:44:26,369
simple two column table between a name

00:44:25,260 --> 00:44:28,349
and a note ID and they have different

00:44:26,369 --> 00:44:30,780
types string is actually Unicode and

00:44:28,349 --> 00:44:32,339
then it you have these two table objects

00:44:30,780 --> 00:44:34,700
and then here's an expression i'm

00:44:32,339 --> 00:44:37,500
joining these two tables together as a

00:44:34,700 --> 00:44:39,780
deferred evaluation and doing a group by

00:44:37,500 --> 00:44:41,130
and counting the load date is what

00:44:39,780 --> 00:44:42,210
distinguishes where i get the data from

00:44:41,130 --> 00:44:43,800
there's different versions of load data

00:44:42,210 --> 00:44:45,930
depending where the data is but when i

00:44:43,800 --> 00:44:47,910
compute notice i just compute on a

00:44:45,930 --> 00:44:49,680
dictionary that I've mapped my data I

00:44:47,910 --> 00:44:51,390
got back from where I loaded it from to

00:44:49,680 --> 00:44:53,550
the actual variables will be expressed

00:44:51,390 --> 00:44:55,140
in that dictionary in that compute

00:44:53,550 --> 00:44:56,790
expression and then that's when the

00:44:55,140 --> 00:44:58,440
computation happens that's when you

00:44:56,790 --> 00:45:02,670
brought together the data and the code

00:44:58,440 --> 00:45:03,809
on a computer connects and the load data

00:45:02,670 --> 00:45:06,180
would be different depending on whether

00:45:03,809 --> 00:45:08,280
your data is in spark in HDFS or maybe

00:45:06,180 --> 00:45:11,460
it's in pandas in a local disk so you

00:45:08,280 --> 00:45:13,440
write that to load your data but then

00:45:11,460 --> 00:45:14,609
your expression is completely separated

00:45:13,440 --> 00:45:16,530
and you can have a very complex

00:45:14,609 --> 00:45:18,180
expression that looks pandas like but

00:45:16,530 --> 00:45:19,980
then it is mapped over wherever your

00:45:18,180 --> 00:45:22,710
data is stored so no more no longer do

00:45:19,980 --> 00:45:24,150
you have to write differently in order

00:45:22,710 --> 00:45:27,030
have your data stored differently and

00:45:24,150 --> 00:45:28,680
our goal is to end data silos allow your

00:45:27,030 --> 00:45:30,059
data to be where it's optimally fits

00:45:28,680 --> 00:45:31,859
where you can get the most performance

00:45:30,059 --> 00:45:33,420
and not have to change your code so much

00:45:31,859 --> 00:45:35,280
in order to use that best performance

00:45:33,420 --> 00:45:37,319
data set just write it back into blaze

00:45:35,280 --> 00:45:38,819
and it'll work beautifully so blaze has

00:45:37,319 --> 00:45:40,650
an ecosystem around it we've been a lot

00:45:38,819 --> 00:45:42,329
of experimentation a lot of exploring to

00:45:40,650 --> 00:45:45,180
understand what we mean by this space

00:45:42,329 --> 00:45:46,619
currently dying live dine and data shape

00:45:45,180 --> 00:45:48,510
are the key pieces then the blaze

00:45:46,619 --> 00:45:51,000
library itself which has its different

00:45:48,510 --> 00:45:52,740
components data shape is that did

00:45:51,000 --> 00:45:54,510
general data description language that i

00:45:52,740 --> 00:45:56,220
think was missing from pepsi 18 i'm very

00:45:54,510 --> 00:45:58,950
excited about this i think it should

00:45:56,220 --> 00:46:01,530
have been what numpy d types were you

00:45:58,950 --> 00:46:03,329
can use it now we use it in blaze dine

00:46:01,530 --> 00:46:07,099
uses it as its data description language

00:46:03,329 --> 00:46:09,119
dined is a Python rapper to a C++

00:46:07,099 --> 00:46:11,069
equivalent of dump I the nice thing

00:46:09,119 --> 00:46:12,510
about that is you can bind that to Ruby

00:46:11,069 --> 00:46:14,069
you combine that to JavaScript you can

00:46:12,510 --> 00:46:15,680
bind that seedless library wherever you

00:46:14,069 --> 00:46:19,550
like and have that multi-dimensional

00:46:15,680 --> 00:46:21,710
array concept across the board

00:46:19,550 --> 00:46:25,130
so it can help with the gluing again of

00:46:21,710 --> 00:46:27,620
for Python to point and I think I'm out

00:46:25,130 --> 00:46:30,230
of time so I'm not going to skip number

00:46:27,620 --> 00:46:32,360
I've talked about number quite a bit but

00:46:30,230 --> 00:46:33,950
numbers awesome i love it it's still

00:46:32,360 --> 00:46:35,180
growing it's still pre one point oh we

00:46:33,950 --> 00:46:37,520
still need help we're looking for people

00:46:35,180 --> 00:46:39,410
to help us with it I just show you that

00:46:37,520 --> 00:46:41,210
CUDA Python works in number so you can

00:46:39,410 --> 00:46:44,050
actually with number today target the

00:46:41,210 --> 00:46:46,940
GPU if you have a GPU very very easily

00:46:44,050 --> 00:46:48,350
so CUDA Python comes in number we're

00:46:46,940 --> 00:46:49,820
working on making interfaces to that

00:46:48,350 --> 00:46:53,780
that are more blaze like to make it much

00:46:49,820 --> 00:46:55,190
easier and less cuda specific alright so

00:46:53,780 --> 00:46:56,990
python is a long and fruitful history

00:46:55,190 --> 00:46:59,300
data analytics it will have a long a

00:46:56,990 --> 00:47:00,530
bright future with your help join the PI

00:46:59,300 --> 00:47:02,510
data community and help make the world a

00:47:00,530 --> 00:47:04,820
better place I want to dedicate my talk

00:47:02,510 --> 00:47:06,710
to Amy Oliphant my wife I don't know if

00:47:04,820 --> 00:47:08,300
she's here she made it over thank you

00:47:06,710 --> 00:47:09,800
for all you've done I would nothing I've

00:47:08,300 --> 00:47:12,490
ever done would be possible form for you

00:47:09,800 --> 00:47:12,490
thank you very much

00:47:31,869 --> 00:47:36,880
thank you very much add you a little bit

00:47:35,259 --> 00:47:38,380
over time but I think we have time for

00:47:36,880 --> 00:47:41,920
two questions please take the

00:47:38,380 --> 00:47:44,319
microphones thank you there working yes

00:47:41,920 --> 00:47:46,569
thank you for the very inspiring talk I

00:47:44,319 --> 00:47:49,809
had a question I'm sorry about it by pi

00:47:46,569 --> 00:47:51,819
PI and Empire you met her in pi PI my

00:47:49,809 --> 00:47:54,880
question is they are trying really hard

00:47:51,819 --> 00:47:56,230
to reimplement numpy by yeah but did

00:47:54,880 --> 00:47:58,359
they contribute but you mentioned that

00:47:56,230 --> 00:48:01,089
some rusty cars done on pyar weren't

00:47:58,359 --> 00:48:04,150
very optimizer like you said very young

00:48:01,089 --> 00:48:07,420
yeah commercial and did they contribute

00:48:04,150 --> 00:48:09,670
back in order to be able to optimize

00:48:07,420 --> 00:48:11,710
these parts inland empire it's really

00:48:09,670 --> 00:48:14,200
hard because they're the stacks are so

00:48:11,710 --> 00:48:16,089
different right so the code they write

00:48:14,200 --> 00:48:18,190
is quite different than what you write

00:48:16,089 --> 00:48:20,049
to make numpy work I am really excited

00:48:18,190 --> 00:48:21,910
about once cut what our number array

00:48:20,049 --> 00:48:23,470
object our number ray optical writing

00:48:21,910 --> 00:48:24,789
has a lot in common with non pipe I

00:48:23,470 --> 00:48:26,529
actually I finally see a way to

00:48:24,789 --> 00:48:27,940
collaborate with them so I'm really

00:48:26,529 --> 00:48:29,019
excited by that because I always love to

00:48:27,940 --> 00:48:31,509
collaborate where I can but sometimes

00:48:29,019 --> 00:48:34,960
it's challenging okay thank you yeah

00:48:31,509 --> 00:48:37,509
excellent hello thanks for the awesome

00:48:34,960 --> 00:48:40,809
talk and the insights about the history

00:48:37,509 --> 00:48:44,220
of nampa and the ecosystem all around so

00:48:40,809 --> 00:48:48,809
my question is regarding the packaging

00:48:44,220 --> 00:48:52,299
because I looked up the pipe I index

00:48:48,809 --> 00:48:55,869
number i still don't provide python

00:48:52,299 --> 00:48:58,059
wheels for the wheel packages for

00:48:55,869 --> 00:49:00,640
windows which would be great because you

00:48:58,059 --> 00:49:04,749
know in on windows system it's always

00:49:00,640 --> 00:49:07,779
you know heart yeah the compiling is net

00:49:04,749 --> 00:49:10,529
as cannot as convenient as on linux

00:49:07,779 --> 00:49:13,059
colleges are there any plans to provide

00:49:10,529 --> 00:49:14,920
pre-compiled packages for windows so i

00:49:13,059 --> 00:49:16,299
think i've heard of plans like that yes

00:49:14,920 --> 00:49:18,789
i think people are talking about doing

00:49:16,299 --> 00:49:21,759
that my attention is I mean Conda

00:49:18,789 --> 00:49:24,160
install numpy solves the problem so I'm

00:49:21,759 --> 00:49:26,049
sort of less motivated myself to worry

00:49:24,160 --> 00:49:27,369
about that but I think there are some

00:49:26,049 --> 00:49:31,499
people that are trying to produce wheels

00:49:27,369 --> 00:49:34,920
yeah so great I try it out yes excellent

00:49:31,499 --> 00:49:34,920
thank you very much again

00:49:39,120 --> 00:49:41,180

YouTube URL: https://www.youtube.com/watch?v=18r346Tn768


