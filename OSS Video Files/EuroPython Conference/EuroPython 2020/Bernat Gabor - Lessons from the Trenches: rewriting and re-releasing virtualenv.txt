Title: Bernat Gabor - Lessons from the Trenches: rewriting and re-releasing virtualenv
Publication date: 2020-09-15
Playlist: EuroPython 2020
Description: 
	"Lessons from the Trenches: rewriting and re-releasing virtualenv
EuroPython 2020 - Talk - 2020-07-23 - Microsoft
Online

By Bernat Gabor

virtualenv is a tool that builds virtual environments for Python. It was first created in September 2007 and lived most of its life being a single file project with an increasing amount of (scary) workarounds within. It managed to grow until it was 2,700 lines of code. Maintaining this project became increasingly more troublesome, to the point where, we had more than 500 open issues at one point. In July 2019, I started working from scratch on a rewrite, with the goal of not just increasing the project's maintainability, but also to make it faster and add some new features that were just impossible or too hard to do in the existing code base. Fast forward six months to January 2020, when we released the first beta, with the first full release coming out on 10th February. It took a bit more than a month to squash all the open bugs tickets, but April started without any remaining open bug tickets. This talk will cover the lessons I've learned while on this journey.



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2020.europython.eu/events/speaker-release-agreement/

    "
Captions: 
	00:00:08,080 --> 00:00:11,679
okay

00:00:08,639 --> 00:00:14,880
we're done so let's welcome

00:00:11,679 --> 00:00:18,400
bernard gabor bernard

00:00:14,880 --> 00:00:19,920
can you unmute yes

00:00:18,400 --> 00:00:22,800
am i pronouncing your name correctly by

00:00:19,920 --> 00:00:26,240
the way yeah it's bad not cover

00:00:22,800 --> 00:00:26,240
but okay

00:00:26,720 --> 00:00:30,080
right so bernard is is working for

00:00:29,359 --> 00:00:32,000
bloomberg

00:00:30,080 --> 00:00:33,200
and uh he's going to talk about

00:00:32,000 --> 00:00:36,719
virtualenv

00:00:33,200 --> 00:00:38,719
rewriting and re-releasing it so

00:00:36,719 --> 00:00:40,800
please start your screen sharing and

00:00:38,719 --> 00:00:44,559
then we can

00:00:40,800 --> 00:00:47,440
move ahead thank you

00:00:44,559 --> 00:00:50,800
okay hello everyone uh hopefully you can

00:00:47,440 --> 00:00:54,320
see my screen share at this point

00:00:50,800 --> 00:00:54,320
yes it's working fine i can't

00:00:54,640 --> 00:00:58,640
okay so let's start go ahead so hello

00:00:57,440 --> 00:01:01,440
i'm bernard gabor

00:00:58,640 --> 00:01:03,600
i'm gonna be talking to you today about

00:01:01,440 --> 00:01:06,240
rewriting and releasing roots length

00:01:03,600 --> 00:01:07,920
and this will be basically what did i

00:01:06,240 --> 00:01:11,040
learn while i tried to

00:01:07,920 --> 00:01:12,960
do this ambitious project

00:01:11,040 --> 00:01:14,479
so the first question we need to answer

00:01:12,960 --> 00:01:16,720
is what is virtualenv

00:01:14,479 --> 00:01:17,520
and for those of you who might not know

00:01:16,720 --> 00:01:19,280
it yet

00:01:17,520 --> 00:01:21,360
virtualenv is a tool that allows you to

00:01:19,280 --> 00:01:23,439
create python virtual environments

00:01:21,360 --> 00:01:25,360
okay and what is a python virtual

00:01:23,439 --> 00:01:26,240
environment is basically a python

00:01:25,360 --> 00:01:28,240
executable

00:01:26,240 --> 00:01:29,759
that behaves as it would be a separate

00:01:28,240 --> 00:01:33,200
python installation

00:01:29,759 --> 00:01:34,799
separate from your system one that is so

00:01:33,200 --> 00:01:36,640
what does this means it means that

00:01:34,799 --> 00:01:38,720
packages installed into this

00:01:36,640 --> 00:01:41,119
virtual environment python will not

00:01:38,720 --> 00:01:43,360
affect the system python installation

00:01:41,119 --> 00:01:44,159
for example if i create a virtual

00:01:43,360 --> 00:01:48,079
environment

00:01:44,159 --> 00:01:50,799
you can see the cli comment for it there

00:01:48,079 --> 00:01:51,119
and i basically install a package into

00:01:50,799 --> 00:01:52,960
it

00:01:51,119 --> 00:01:54,560
i can do this even if i don't have

00:01:52,960 --> 00:01:55,600
administrative rights to install

00:01:54,560 --> 00:01:58,320
packages

00:01:55,600 --> 00:02:00,159
and the tool will be happily workable

00:01:58,320 --> 00:02:01,280
from within the scope of that virtual

00:02:00,159 --> 00:02:03,840
environment

00:02:01,280 --> 00:02:05,200
and everything works as just as it would

00:02:03,840 --> 00:02:07,360
have been installed into the system

00:02:05,200 --> 00:02:11,599
python otherwise

00:02:07,360 --> 00:02:13,599
so the really important thing about the

00:02:11,599 --> 00:02:14,239
virtual environment is that other than

00:02:13,599 --> 00:02:16,319
the

00:02:14,239 --> 00:02:17,280
isolation that it provides it believes

00:02:16,319 --> 00:02:20,720
exactly

00:02:17,280 --> 00:02:22,080
in all most everything just as the

00:02:20,720 --> 00:02:24,400
system python would

00:02:22,080 --> 00:02:25,280
behave for example you can see here if i

00:02:24,400 --> 00:02:26,879
printed out

00:02:25,280 --> 00:02:28,959
the information about the python

00:02:26,879 --> 00:02:31,920
environment and i create

00:02:28,959 --> 00:02:33,920
a virtual environment of it what i get

00:02:31,920 --> 00:02:38,239
back is the version information and

00:02:33,920 --> 00:02:41,840
is the same down to the last bite okay

00:02:38,239 --> 00:02:44,000
so virginia is fairly popular project

00:02:41,840 --> 00:02:46,800
has been around for the last 13 years

00:02:44,000 --> 00:02:48,840
but just to quantify how popular is i

00:02:46,800 --> 00:02:51,519
use this spy pi info

00:02:48,840 --> 00:02:53,440
powered query

00:02:51,519 --> 00:02:56,319
to find out just how many downloads did

00:02:53,440 --> 00:03:00,000
the project had in the last year or so

00:02:56,319 --> 00:03:02,400
and basically for the virtual project

00:03:00,000 --> 00:03:04,159
this means around 0.8 terabytes for

00:03:02,400 --> 00:03:07,360
every 12 months

00:03:04,159 --> 00:03:09,360
so if i plot the results that i got back

00:03:07,360 --> 00:03:09,680
is basically this graph you can see that

00:03:09,360 --> 00:03:12,640
it

00:03:09,680 --> 00:03:13,760
has on a daily basis around 300 000

00:03:12,640 --> 00:03:17,040
downloads

00:03:13,760 --> 00:03:20,319
and per week per month

00:03:17,040 --> 00:03:23,840
and which basically sums up to around

00:03:20,319 --> 00:03:26,799
120 million installations per year

00:03:23,840 --> 00:03:27,440
this is installation from the pipi index

00:03:26,799 --> 00:03:28,560
server

00:03:27,440 --> 00:03:31,760
it doesn't actually include

00:03:28,560 --> 00:03:33,840
installations from mirrors and whatnot

00:03:31,760 --> 00:03:36,879
but the important thing is this is that

00:03:33,840 --> 00:03:38,640
it be at the moment around the 66 most

00:03:36,879 --> 00:03:41,519
popular python project

00:03:38,640 --> 00:03:42,640
so as you can figure it has it is very

00:03:41,519 --> 00:03:44,319
widely used

00:03:42,640 --> 00:03:47,440
so doing any kind of changes to the

00:03:44,319 --> 00:03:48,959
project is always kind of problematic

00:03:47,440 --> 00:03:50,560
now one thing that this talk is not

00:03:48,959 --> 00:03:52,799
going to be about is

00:03:50,560 --> 00:03:54,879
what are virtual environments in depth

00:03:52,799 --> 00:03:56,080
meaning how do the virtual environments

00:03:54,879 --> 00:03:58,159
actually work

00:03:56,080 --> 00:04:00,239
if you want to get a glimpse into that

00:03:58,159 --> 00:04:01,680
how do virtual environments actually

00:04:00,239 --> 00:04:03,439
work and how python itself

00:04:01,680 --> 00:04:04,720
achieves creating this isolated virtual

00:04:03,439 --> 00:04:07,439
environment i

00:04:04,720 --> 00:04:09,680
invite you to see my talk from last

00:04:07,439 --> 00:04:12,239
year's europe icon

00:04:09,680 --> 00:04:14,080
which i linked in here and there you'll

00:04:12,239 --> 00:04:15,920
find all the necessary information that

00:04:14,080 --> 00:04:19,280
you might want about that

00:04:15,920 --> 00:04:21,120
but focusing on the

00:04:19,280 --> 00:04:23,040
this today's talk is gonna be mainly

00:04:21,120 --> 00:04:25,040
about the virtual and project rewrite

00:04:23,040 --> 00:04:26,080
and before we go ahead i would just like

00:04:25,040 --> 00:04:28,720
to clear up

00:04:26,080 --> 00:04:30,479
one thing is that when we talk about

00:04:28,720 --> 00:04:31,600
virtual environment creation tools it's

00:04:30,479 --> 00:04:34,000
not just

00:04:31,600 --> 00:04:35,040
virtual amp that is around we also have

00:04:34,000 --> 00:04:37,120
the vm

00:04:35,040 --> 00:04:38,080
module which is part of the standard

00:04:37,120 --> 00:04:40,880
library

00:04:38,080 --> 00:04:41,600
as of python 3.3 and it's defined per

00:04:40,880 --> 00:04:44,400
that

00:04:41,600 --> 00:04:46,320
405 and you can use both of these tools

00:04:44,400 --> 00:04:48,639
to create virtual environments

00:04:46,320 --> 00:04:50,639
so just to clear up things what is the

00:04:48,639 --> 00:04:51,919
difference between the two projects

00:04:50,639 --> 00:04:54,479
well the difference between the two

00:04:51,919 --> 00:04:57,440
project is that besides just virtually

00:04:54,479 --> 00:04:59,840
being created 10 years before vm is that

00:04:57,440 --> 00:05:01,360
the vrc lamp is a third-party package

00:04:59,840 --> 00:05:03,360
and this means that you will actually

00:05:01,360 --> 00:05:05,360
need to install it

00:05:03,360 --> 00:05:07,199
and manage the installation separately

00:05:05,360 --> 00:05:10,000
of your python installation

00:05:07,199 --> 00:05:10,479
while with the vf package it comes with

00:05:10,000 --> 00:05:12,720
your

00:05:10,479 --> 00:05:14,560
python installation you have to do

00:05:12,720 --> 00:05:16,400
nothing just install python and you have

00:05:14,560 --> 00:05:18,400
it already available

00:05:16,400 --> 00:05:20,320
and this is also an advantage as a

00:05:18,400 --> 00:05:21,120
disadvantage depending from where you

00:05:20,320 --> 00:05:23,360
look at it

00:05:21,120 --> 00:05:25,440
the positive is that in case of virtual

00:05:23,360 --> 00:05:27,039
project if you discover a bug within the

00:05:25,440 --> 00:05:29,520
project

00:05:27,039 --> 00:05:31,360
getting that fixed can be a very quick

00:05:29,520 --> 00:05:33,440
turnaround you can fill a bug

00:05:31,360 --> 00:05:35,199
a pull request and maybe in a day or two

00:05:33,440 --> 00:05:35,919
or later you already have can have a

00:05:35,199 --> 00:05:39,199
release

00:05:35,919 --> 00:05:41,280
that contains the fix while with in case

00:05:39,199 --> 00:05:44,639
of the vm project if you find a bug

00:05:41,280 --> 00:05:46,720
you may may well need to wait months

00:05:44,639 --> 00:05:48,800
in best case but even years in the worst

00:05:46,720 --> 00:05:50,720
case just to get that bug fixed in

00:05:48,800 --> 00:05:52,639
because you need to wait the entire

00:05:50,720 --> 00:05:55,280
fighter release cycle to get the

00:05:52,639 --> 00:05:56,960
fix and not just the c python release

00:05:55,280 --> 00:05:57,919
cycle but also your operating theme

00:05:56,960 --> 00:06:01,440
systems

00:05:57,919 --> 00:06:03,199
release cycle so another

00:06:01,440 --> 00:06:05,680
big difference is that virtual also

00:06:03,199 --> 00:06:08,960
supports python 2.7

00:06:05,680 --> 00:06:09,759
while vmware supports python 3.3 so if

00:06:08,960 --> 00:06:11,360
you need

00:06:09,759 --> 00:06:13,280
to create virtual environments python

00:06:11,360 --> 00:06:16,800
2.7 your only bet is

00:06:13,280 --> 00:06:18,319
to use virtual and virtualize itself

00:06:16,800 --> 00:06:20,240
supports pi pi and c

00:06:18,319 --> 00:06:22,160
python so in case of any other

00:06:20,240 --> 00:06:23,680
interpreters we're not able

00:06:22,160 --> 00:06:25,680
or flavors will not be able to create

00:06:23,680 --> 00:06:27,199
virtual environments however this is not

00:06:25,680 --> 00:06:29,600
the case with the vm projects

00:06:27,199 --> 00:06:31,280
because given that you have an

00:06:29,600 --> 00:06:34,400
interpreter implementation

00:06:31,280 --> 00:06:36,880
which satisfies version 3.3 or later

00:06:34,400 --> 00:06:40,080
requirements it should already be

00:06:36,880 --> 00:06:43,840
supporting the vm project

00:06:40,080 --> 00:06:45,440
now the first four bullet point line

00:06:43,840 --> 00:06:47,120
listed here are basically things that

00:06:45,440 --> 00:06:49,360
were true before the rewrite

00:06:47,120 --> 00:06:51,199
and this talk a little bit too last year

00:06:49,360 --> 00:06:51,919
there has been a virtual and rewrite and

00:06:51,199 --> 00:06:55,120
while we

00:06:51,919 --> 00:06:57,120
did this rewrite and release virtually

00:06:55,120 --> 00:06:58,479
got a few additional differences a few

00:06:57,120 --> 00:07:00,880
additional benefits

00:06:58,479 --> 00:07:02,720
that are true today but were not through

00:07:00,880 --> 00:07:04,560
a year ago one of the things

00:07:02,720 --> 00:07:06,160
is that the virtualenv project is much

00:07:04,560 --> 00:07:09,280
more configurable

00:07:06,160 --> 00:07:12,800
meaning that you can configure not just

00:07:09,280 --> 00:07:14,240
uh the command line arguments

00:07:12,800 --> 00:07:15,520
you can configure the tool not just

00:07:14,240 --> 00:07:16,800
through command line arguments but you

00:07:15,520 --> 00:07:18,880
can also configure it

00:07:16,800 --> 00:07:20,319
to our environment variables or user

00:07:18,880 --> 00:07:22,080
configuration files

00:07:20,319 --> 00:07:24,160
and you can use this configuration files

00:07:22,080 --> 00:07:26,560
for example even to alter the default

00:07:24,160 --> 00:07:28,720
values for virtualenv

00:07:26,560 --> 00:07:30,479
giving you a lot of power for example if

00:07:28,720 --> 00:07:32,479
a broken pip get released

00:07:30,479 --> 00:07:34,400
you can easily use this configuration

00:07:32,479 --> 00:07:38,080
file to pin to an older

00:07:34,400 --> 00:07:39,599
version similarly similar to the same

00:07:38,080 --> 00:07:40,800
thing cannot be said about the vm

00:07:39,599 --> 00:07:42,240
project

00:07:40,800 --> 00:07:44,240
another thing is that the virtual

00:07:42,240 --> 00:07:44,960
project is extensible it has a plug-in

00:07:44,240 --> 00:07:47,840
system

00:07:44,960 --> 00:07:49,680
meaning that you can support additional

00:07:47,840 --> 00:07:51,280
functionality to displaying system

00:07:49,680 --> 00:07:53,199
functionalities such as

00:07:51,280 --> 00:07:55,360
supporting activation script for

00:07:53,199 --> 00:07:57,919
additional spells

00:07:55,360 --> 00:07:58,960
supporting additional python flavors for

00:07:57,919 --> 00:08:01,440
example if you want

00:07:58,960 --> 00:08:02,960
iron python virtual environment creation

00:08:01,440 --> 00:08:04,479
you can write your plugin

00:08:02,960 --> 00:08:06,720
for virtualmin which allows you to

00:08:04,479 --> 00:08:08,560
create iron python virtual environments

00:08:06,720 --> 00:08:09,520
or rust python or whatever as there

00:08:08,560 --> 00:08:13,360
might be

00:08:09,520 --> 00:08:15,680
and the vm is only extensible

00:08:13,360 --> 00:08:17,919
through by extending the base class this

00:08:15,680 --> 00:08:18,879
is a bit tricky because if you extend

00:08:17,919 --> 00:08:20,639
the base class

00:08:18,879 --> 00:08:22,080
you do not necessarily get the same

00:08:20,639 --> 00:08:23,759
command line interface you have to

00:08:22,080 --> 00:08:25,039
redefine the command line interface

00:08:23,759 --> 00:08:27,440
again

00:08:25,039 --> 00:08:29,440
now and finally probably the biggest or

00:08:27,440 --> 00:08:31,280
more impactful difference from day to

00:08:29,440 --> 00:08:32,959
day usage for the average user

00:08:31,280 --> 00:08:34,560
is going to be performance the

00:08:32,959 --> 00:08:35,760
virtualenv

00:08:34,560 --> 00:08:37,919
allows you to create a virtual

00:08:35,760 --> 00:08:40,240
environment in less than half

00:08:37,919 --> 00:08:42,800
a second while with the vm this usually

00:08:40,240 --> 00:08:44,640
takes two seconds or more and this is in

00:08:42,800 --> 00:08:46,640
the happy case that you're running on a

00:08:44,640 --> 00:08:48,160
linux operating system where this

00:08:46,640 --> 00:08:50,720
operation is faster

00:08:48,160 --> 00:08:52,839
multiply this by a factor or two or so

00:08:50,720 --> 00:08:55,920
on windows

00:08:52,839 --> 00:08:57,279
okay and a final additional benefit of

00:08:55,920 --> 00:08:58,800
virtual envelopes that the virtual

00:08:57,279 --> 00:09:00,640
actuator reach the api

00:08:58,800 --> 00:09:02,160
means that if you use it from python to

00:09:00,640 --> 00:09:04,480
create a virtual environment

00:09:02,160 --> 00:09:06,640
you get back an actual python object on

00:09:04,480 --> 00:09:08,800
which you can query information such as

00:09:06,640 --> 00:09:10,800
hey what is the python executable

00:09:08,800 --> 00:09:12,160
created what is the location of that

00:09:10,800 --> 00:09:13,440
what is the location of the site

00:09:12,160 --> 00:09:16,399
packages folder

00:09:13,440 --> 00:09:18,560
or what is the python interpreter

00:09:16,399 --> 00:09:20,720
version and that kind of information is

00:09:18,560 --> 00:09:22,560
very much available on this result

00:09:20,720 --> 00:09:23,920
object this is something that can be

00:09:22,560 --> 00:09:26,000
very

00:09:23,920 --> 00:09:27,680
important if you're writing a tool that

00:09:26,000 --> 00:09:31,360
wraps around virtual

00:09:27,680 --> 00:09:34,480
environment creation okay so

00:09:31,360 --> 00:09:36,240
just to search it now that we have

00:09:34,480 --> 00:09:37,839
vmware parts of the standard library do

00:09:36,240 --> 00:09:39,920
we still need virtualenv

00:09:37,839 --> 00:09:42,160
and my answer to that is i do think we

00:09:39,920 --> 00:09:43,600
need it the way i see it virtually

00:09:42,160 --> 00:09:45,279
is that virtual is basically the place

00:09:43,600 --> 00:09:46,720
where we can innovate and improve

00:09:45,279 --> 00:09:49,360
the virtual environment creation

00:09:46,720 --> 00:09:50,640
ecosystem and we can try out things

00:09:49,360 --> 00:09:52,720
basically

00:09:50,640 --> 00:09:54,720
check things if they make sense and in

00:09:52,720 --> 00:09:55,440
case they do make sense we can talk

00:09:54,720 --> 00:09:58,080
about

00:09:55,440 --> 00:09:58,959
them porting them to the vm project and

00:09:58,080 --> 00:10:01,760
then getting it

00:09:58,959 --> 00:10:02,959
out of the box however the vrtlm project

00:10:01,760 --> 00:10:05,200
on itself

00:10:02,959 --> 00:10:07,279
provides additional benefits of like

00:10:05,200 --> 00:10:08,399
better performance better api better

00:10:07,279 --> 00:10:10,800
extensibility

00:10:08,399 --> 00:10:12,240
and these are kind of like bullet points

00:10:10,800 --> 00:10:13,440
that are very important if you're

00:10:12,240 --> 00:10:16,480
writing tools

00:10:13,440 --> 00:10:18,320
around python environment management so

00:10:16,480 --> 00:10:22,240
for those projects virtualem will

00:10:18,320 --> 00:10:24,720
be very much to go to project

00:10:22,240 --> 00:10:25,839
okay so now let's focus on actually the

00:10:24,720 --> 00:10:27,519
rewrite itself

00:10:25,839 --> 00:10:29,760
so the first thing that we need to cover

00:10:27,519 --> 00:10:31,600
is why we decide to rewrite

00:10:29,760 --> 00:10:33,440
and just a small caveat if you're

00:10:31,600 --> 00:10:36,640
wondering the dog in the picture

00:10:33,440 --> 00:10:38,800
is my dog so small your shy terrier

00:10:36,640 --> 00:10:42,160
called silky

00:10:38,800 --> 00:10:44,079
so let's move on so the one of the

00:10:42,160 --> 00:10:46,079
biggest reason why we decided that we

00:10:44,079 --> 00:10:47,279
needed a rewrite of the project is a lot

00:10:46,079 --> 00:10:49,040
of old paints

00:10:47,279 --> 00:10:50,320
and this paints for basically that

00:10:49,040 --> 00:10:52,399
virtualem

00:10:50,320 --> 00:10:54,240
project as it was a year ago was

00:10:52,399 --> 00:10:55,519
basically a single frag project which

00:10:54,240 --> 00:10:57,680
has

00:10:55,519 --> 00:11:00,399
spurious if as branches but spread

00:10:57,680 --> 00:11:03,120
around a thousand lines of code and

00:11:00,399 --> 00:11:04,560
to make things worse the test suite only

00:11:03,120 --> 00:11:06,320
covered around 60

00:11:04,560 --> 00:11:07,760
of the line coverage and we're not even

00:11:06,320 --> 00:11:08,640
talking at this point about branch

00:11:07,760 --> 00:11:10,079
coverage

00:11:08,640 --> 00:11:11,519
so you can imagine from this that

00:11:10,079 --> 00:11:12,320
maintaining the project was very

00:11:11,519 --> 00:11:14,480
cumbersome

00:11:12,320 --> 00:11:15,920
basically i think any kind of change to

00:11:14,480 --> 00:11:16,800
the project meant that you are not

00:11:15,920 --> 00:11:18,480
really sure

00:11:16,800 --> 00:11:20,880
if that change is not going to break the

00:11:18,480 --> 00:11:22,160
world and it was kind of like a lot of

00:11:20,880 --> 00:11:24,320
iterative process that

00:11:22,160 --> 00:11:26,480
we fixed around waited a few weeks if no

00:11:24,320 --> 00:11:28,320
one responded

00:11:26,480 --> 00:11:30,160
no one submitted any kind of like issues

00:11:28,320 --> 00:11:32,320
that hey you broke me then we're like

00:11:30,160 --> 00:11:34,560
that was a safe change but we have no

00:11:32,320 --> 00:11:36,720
certainty around this

00:11:34,560 --> 00:11:37,760
and also had the rudimentary plug-in

00:11:36,720 --> 00:11:40,240
system

00:11:37,760 --> 00:11:41,279
in theory it had it made it possible to

00:11:40,240 --> 00:11:42,800
extend

00:11:41,279 --> 00:11:44,959
the virtual end project but the way it

00:11:42,800 --> 00:11:47,200
did is basically a plugin

00:11:44,959 --> 00:11:48,480
a pure mesh plug-in system meaning that

00:11:47,200 --> 00:11:50,639
it had various

00:11:48,480 --> 00:11:52,880
comments within the code you can

00:11:50,639 --> 00:11:56,240
basically inject your own code

00:11:52,880 --> 00:11:58,959
into that cut code sections

00:11:56,240 --> 00:12:01,200
this made it both that it had a plug-in

00:11:58,959 --> 00:12:03,920
system but it was very hard to use

00:12:01,200 --> 00:12:05,600
so very little people actually used it

00:12:03,920 --> 00:12:06,240
and this meant that in practice when

00:12:05,600 --> 00:12:07,920
other

00:12:06,240 --> 00:12:09,600
interpreters wanted to add any kind of

00:12:07,920 --> 00:12:11,680
functionality or people

00:12:09,600 --> 00:12:13,440
they tended to add this functionality

00:12:11,680 --> 00:12:16,160
straight into the core project

00:12:13,440 --> 00:12:18,399
which made it even harder to maintain

00:12:16,160 --> 00:12:20,079
because especially given that

00:12:18,399 --> 00:12:22,000
the low confidence value we had in

00:12:20,079 --> 00:12:22,399
actually that things are not going to

00:12:22,000 --> 00:12:24,639
break

00:12:22,399 --> 00:12:26,480
once we do add some new lines to the

00:12:24,639 --> 00:12:28,639
coders

00:12:26,480 --> 00:12:29,680
and finally another thing was that there

00:12:28,639 --> 00:12:31,839
was a lot of

00:12:29,680 --> 00:12:34,160
things that a lot of things were

00:12:31,839 --> 00:12:36,160
designed 12 years ago or so

00:12:34,160 --> 00:12:37,279
meaning that a lot of the design choices

00:12:36,160 --> 00:12:39,200
within the code base

00:12:37,279 --> 00:12:41,360
were based on the fact what python

00:12:39,200 --> 00:12:43,200
offered and allowed 12 years ago

00:12:41,360 --> 00:12:44,800
python got a lot better and smarter

00:12:43,200 --> 00:12:47,120
throughout the last 12 years

00:12:44,800 --> 00:12:49,200
so now we could actually have much

00:12:47,120 --> 00:12:51,360
cleaner much nicer solutions for a lot

00:12:49,200 --> 00:12:55,200
of the problems in there

00:12:51,360 --> 00:12:56,720
so that being said the writing virtually

00:12:55,200 --> 00:12:58,240
wasn't something that we just came up

00:12:56,720 --> 00:12:59,519
last year it actually was something

00:12:58,240 --> 00:13:02,639
that's been around at least

00:12:59,519 --> 00:13:04,480
from 2014 or so and there has been at

00:13:02,639 --> 00:13:05,760
least two attempts both to the end and

00:13:04,480 --> 00:13:08,560
halfway through

00:13:05,760 --> 00:13:10,079
and before we jump into trying to do our

00:13:08,560 --> 00:13:10,959
own rewrite it's important that we

00:13:10,079 --> 00:13:13,200
understand

00:13:10,959 --> 00:13:14,959
why this project feels and looking at

00:13:13,200 --> 00:13:18,160
them i think they mainly fade

00:13:14,959 --> 00:13:21,200
because the virtual environment creation

00:13:18,160 --> 00:13:23,120
in essence it's deceptively simple and

00:13:21,200 --> 00:13:24,560
the important thing is deceptively

00:13:23,120 --> 00:13:26,880
because if you actually go into the

00:13:24,560 --> 00:13:28,399
depths and start doing it

00:13:26,880 --> 00:13:30,320
there are a lot of nuances and edge

00:13:28,399 --> 00:13:33,760
cases it's gonna make your life

00:13:30,320 --> 00:13:36,639
really difficult and bitter and it also

00:13:33,760 --> 00:13:40,800
very hard to test because you basically

00:13:36,639 --> 00:13:43,920
need to need to support all

00:13:40,800 --> 00:13:46,079
possible platforms and environment so

00:13:43,920 --> 00:13:46,959
it's very hard to even set up a test

00:13:46,079 --> 00:13:49,040
environment

00:13:46,959 --> 00:13:50,800
just to make sure that all the python

00:13:49,040 --> 00:13:53,839
versions work correctly

00:13:50,800 --> 00:13:57,279
work nicely and

00:13:53,839 --> 00:13:58,720
it it's just practically very hard to do

00:13:57,279 --> 00:14:01,279
this

00:13:58,720 --> 00:14:02,800
so giving this this i jumped into the

00:14:01,279 --> 00:14:06,320
project

00:14:02,800 --> 00:14:09,040
myself basically by around 2018

00:14:06,320 --> 00:14:10,720
but before that i was a tax maintainer

00:14:09,040 --> 00:14:12,720
since 2017

00:14:10,720 --> 00:14:13,920
and those of you might know that tox is

00:14:12,720 --> 00:14:16,399
basically a

00:14:13,920 --> 00:14:19,040
test suite runner meaning that it

00:14:16,399 --> 00:14:19,040
manages

00:14:19,120 --> 00:14:23,199
setting up and running your tests and

00:14:21,519 --> 00:14:24,800
part of the setting of your test set is

00:14:23,199 --> 00:14:26,399
also creating a virtual environment

00:14:24,800 --> 00:14:28,000
installing your project into that and

00:14:26,399 --> 00:14:32,480
then running the test suit

00:14:28,000 --> 00:14:34,000
and a lot of the box fix bug

00:14:32,480 --> 00:14:35,440
reports that we got in talks were

00:14:34,000 --> 00:14:37,360
related to the virgin lamp because the

00:14:35,440 --> 00:14:38,800
talk store was watching the virtual lamp

00:14:37,360 --> 00:14:40,480
and because of this i started to

00:14:38,800 --> 00:14:41,279
interact more and more with the virtual

00:14:40,480 --> 00:14:43,360
codewish

00:14:41,279 --> 00:14:45,360
to the point where in 2018 i actually

00:14:43,360 --> 00:14:47,680
became a maintainer of it

00:14:45,360 --> 00:14:50,160
at this point the project was basically

00:14:47,680 --> 00:14:53,519
very much an abandoned status

00:14:50,160 --> 00:14:55,680
and in 2019

00:14:53,519 --> 00:14:57,760
i got to the point where i wanted to

00:14:55,680 --> 00:14:59,360
attempt to rewrite those talks itself

00:14:57,760 --> 00:15:01,120
and the reason for this is that

00:14:59,360 --> 00:15:03,199
talks one of the major concern that

00:15:01,120 --> 00:15:05,600
people were reporting to talks is that

00:15:03,199 --> 00:15:08,399
hey talks is very slow so i started to

00:15:05,600 --> 00:15:10,560
investigate why stocks though

00:15:08,399 --> 00:15:12,560
what i found out is it is that a lot of

00:15:10,560 --> 00:15:13,920
the slowness of talks actually comes

00:15:12,560 --> 00:15:16,399
from virtually

00:15:13,920 --> 00:15:17,040
virtual environment and that is the

00:15:16,399 --> 00:15:19,360
virtually

00:15:17,040 --> 00:15:21,120
project exact because the creation of

00:15:19,360 --> 00:15:23,440
the virtual environment is slow

00:15:21,120 --> 00:15:25,360
the api laxability provides information

00:15:23,440 --> 00:15:27,680
we need to provide to the test street

00:15:25,360 --> 00:15:29,920
runner so we need to make additional sub

00:15:27,680 --> 00:15:31,839
process calls that take extra time

00:15:29,920 --> 00:15:35,279
or that the interpreter discovery

00:15:31,839 --> 00:15:38,000
happens both in cox and virtually

00:15:35,279 --> 00:15:39,360
so at this point i was like okay it

00:15:38,000 --> 00:15:41,279
seems like to make

00:15:39,360 --> 00:15:42,880
talks faster i need to make virtually

00:15:41,279 --> 00:15:45,120
and faster and better

00:15:42,880 --> 00:15:48,079
so i post my rewrite on the talks and i

00:15:45,120 --> 00:15:50,320
start doing the virtual and rewrite

00:15:48,079 --> 00:15:51,519
so given that two people at least

00:15:50,320 --> 00:15:54,560
already

00:15:51,519 --> 00:15:58,160
filled out this project i set up a plan

00:15:54,560 --> 00:16:00,320
and the plan basically went around first

00:15:58,160 --> 00:16:01,199
identify what are the components within

00:16:00,320 --> 00:16:03,920
the virtual env

00:16:01,199 --> 00:16:04,399
project what are the sub components the

00:16:03,920 --> 00:16:07,360
sub

00:16:04,399 --> 00:16:09,040
segments that can be separated from it

00:16:07,360 --> 00:16:11,120
in the combat code base

00:16:09,040 --> 00:16:13,199
and came to the conclusion that there

00:16:11,120 --> 00:16:14,959
are essentially four different kind of

00:16:13,199 --> 00:16:17,680
main sections within the virtually

00:16:14,959 --> 00:16:18,399
and project and the first section is the

00:16:17,680 --> 00:16:21,040
creator

00:16:18,399 --> 00:16:22,079
creator is something that given a system

00:16:21,040 --> 00:16:24,240
python

00:16:22,079 --> 00:16:25,839
provides you a virtual environment of

00:16:24,240 --> 00:16:28,720
that python

00:16:25,839 --> 00:16:30,160
now this python is very raw doesn't have

00:16:28,720 --> 00:16:31,759
any package installers anything like

00:16:30,160 --> 00:16:32,560
that it's basically just a python

00:16:31,759 --> 00:16:35,279
environment

00:16:32,560 --> 00:16:37,440
that's isolated from the system python

00:16:35,279 --> 00:16:39,040
now the next thing is the seed mechanism

00:16:37,440 --> 00:16:41,360
having a virtual environment without

00:16:39,040 --> 00:16:43,920
being able to install packages into it

00:16:41,360 --> 00:16:45,600
is often not that useful so it is very

00:16:43,920 --> 00:16:47,680
important that once you create a virtual

00:16:45,600 --> 00:16:50,079
environment we create it with a pip

00:16:47,680 --> 00:16:51,920
setup tools packages within it so that

00:16:50,079 --> 00:16:53,120
users can actually start using that

00:16:51,920 --> 00:16:55,680
virtual environment and install

00:16:53,120 --> 00:16:59,360
additional packages into them

00:16:55,680 --> 00:17:00,720
and this kind of like process is what we

00:16:59,360 --> 00:17:02,720
call seed mechanism

00:17:00,720 --> 00:17:04,640
it receives some packages into the

00:17:02,720 --> 00:17:06,400
virtual invite creation

00:17:04,640 --> 00:17:09,600
so that users can then install

00:17:06,400 --> 00:17:11,039
additional packages into that project

00:17:09,600 --> 00:17:13,520
and there's a third component which is

00:17:11,039 --> 00:17:16,240
activators a virtual environment is

00:17:13,520 --> 00:17:19,600
already usable if you just basically

00:17:16,240 --> 00:17:22,799
pass in the python executable

00:17:19,600 --> 00:17:25,360
like if you type in nfbin python it

00:17:22,799 --> 00:17:26,079
gonna work magically but user tends to

00:17:25,360 --> 00:17:28,480
use it

00:17:26,079 --> 00:17:30,160
more from the clia and in the cli is

00:17:28,480 --> 00:17:31,840
easier just to type in python

00:17:30,160 --> 00:17:33,440
rather than the full pet your virtual

00:17:31,840 --> 00:17:35,360
environment and

00:17:33,440 --> 00:17:37,600
for this reason we're using activator

00:17:35,360 --> 00:17:39,600
skips the activator scripts are small

00:17:37,600 --> 00:17:40,480
scripts which are specific to your shell

00:17:39,600 --> 00:17:42,720
you're using

00:17:40,480 --> 00:17:43,840
and basically alter your shell that when

00:17:42,720 --> 00:17:46,080
you type in python

00:17:43,840 --> 00:17:48,000
instead of invoking the system python is

00:17:46,080 --> 00:17:50,240
going to invoke the virtual environment

00:17:48,000 --> 00:17:52,160
python but it's even more generic that

00:17:50,240 --> 00:17:52,880
is gonna also for example when you type

00:17:52,160 --> 00:17:55,200
in pip

00:17:52,880 --> 00:17:56,720
it will also invoke the pip from within

00:17:55,200 --> 00:17:58,240
the virtual environment rather than the

00:17:56,720 --> 00:18:01,039
system python

00:17:58,240 --> 00:18:02,880
okay and this is the activators part and

00:18:01,039 --> 00:18:04,720
finally the interpreter discovery

00:18:02,880 --> 00:18:06,160
and the interpreter discovery is

00:18:04,720 --> 00:18:08,480
important mainly

00:18:06,160 --> 00:18:09,840
for supporting uh cross python

00:18:08,480 --> 00:18:12,080
environment creation

00:18:09,840 --> 00:18:14,080
meaning that as we said before in order

00:18:12,080 --> 00:18:15,120
to use virtual project you have to

00:18:14,080 --> 00:18:17,120
install it

00:18:15,120 --> 00:18:18,960
and in case you want to create a virtual

00:18:17,120 --> 00:18:20,880
environment in case your pi

00:18:18,960 --> 00:18:22,640
system has two pythons for example

00:18:20,880 --> 00:18:24,880
python 2 and python 3

00:18:22,640 --> 00:18:26,480
you want to create a virtual environment

00:18:24,880 --> 00:18:28,320
with both 2 and 3

00:18:26,480 --> 00:18:29,919
it's helpful to be able to need to

00:18:28,320 --> 00:18:30,400
install it just in one for example you

00:18:29,919 --> 00:18:32,720
can just

00:18:30,400 --> 00:18:34,320
install the virtual project in python 3

00:18:32,720 --> 00:18:37,600
but still be able to create

00:18:34,320 --> 00:18:40,320
a virtual environment in python 2 even 2

00:18:37,600 --> 00:18:42,720
even though you're not actually have

00:18:40,320 --> 00:18:46,320
virtually installed into that python

00:18:42,720 --> 00:18:48,000
system python and it's even more

00:18:46,320 --> 00:18:49,840
specific it even allows you to for

00:18:48,000 --> 00:18:52,080
example to be very

00:18:49,840 --> 00:18:53,679
broad about what python you require for

00:18:52,080 --> 00:18:54,720
example you can specify as you see here

00:18:53,679 --> 00:18:58,320
that hey i want pi

00:18:54,720 --> 00:19:00,559
by 3.6.9 64 bits

00:18:58,320 --> 00:19:02,160
and the virtual project will look out on

00:19:00,559 --> 00:19:03,760
your machine find if there's any

00:19:02,160 --> 00:19:06,320
interpreter available

00:19:03,760 --> 00:19:08,000
on that platform that satisfies that

00:19:06,320 --> 00:19:09,760
requirement and if it is it's going to

00:19:08,000 --> 00:19:10,000
be able to create a virtual environment

00:19:09,760 --> 00:19:12,559
of

00:19:10,000 --> 00:19:14,240
that okay so this is again it's just a

00:19:12,559 --> 00:19:16,400
quality of life improvement

00:19:14,240 --> 00:19:17,840
that you don't have to basically

00:19:16,400 --> 00:19:19,919
memorize where are your virtual

00:19:17,840 --> 00:19:21,039
environments or where are your pythons

00:19:19,919 --> 00:19:22,960
installed on your

00:19:21,039 --> 00:19:25,919
machine and it still allows you to

00:19:22,960 --> 00:19:28,799
create them just by specifying a few

00:19:25,919 --> 00:19:29,840
by typing in a few python specifier

00:19:28,799 --> 00:19:33,200
string

00:19:29,840 --> 00:19:35,039
characters so

00:19:33,200 --> 00:19:37,120
the first thing when starting to do a

00:19:35,039 --> 00:19:39,360
rewrite of a project is to actually

00:19:37,120 --> 00:19:40,320
decide what we you're going to continue

00:19:39,360 --> 00:19:42,320
to support

00:19:40,320 --> 00:19:44,080
and in case of the virtual what we

00:19:42,320 --> 00:19:45,039
decide to continue to support is

00:19:44,080 --> 00:19:46,880
basically

00:19:45,039 --> 00:19:48,480
we wanted to support this kind of

00:19:46,880 --> 00:19:50,720
cross-version creation that i just

00:19:48,480 --> 00:19:52,799
described in the previous slide

00:19:50,720 --> 00:19:56,320
we also wanted to keep supporting python

00:19:52,799 --> 00:19:58,400
2 for once because we want to support

00:19:56,320 --> 00:20:00,160
end-of-life pythons a few years post

00:19:58,400 --> 00:20:02,799
their actual end of life

00:20:00,160 --> 00:20:04,640
just to use the transition of these

00:20:02,799 --> 00:20:06,240
pythons for people because

00:20:04,640 --> 00:20:07,840
version is going to be the last project

00:20:06,240 --> 00:20:11,039
they're going to be able to drop

00:20:07,840 --> 00:20:14,640
similarly we we also support pi pi

00:20:11,039 --> 00:20:17,600
and until pi pi supports python 2

00:20:14,640 --> 00:20:18,400
we'll still need to support python 2. we

00:20:17,600 --> 00:20:20,400
also want to

00:20:18,400 --> 00:20:22,400
support no install use and this is

00:20:20,400 --> 00:20:25,039
something i'll get into a bit later

00:20:22,400 --> 00:20:26,720
but basically you should not need

00:20:25,039 --> 00:20:28,880
necessarily be able to

00:20:26,720 --> 00:20:31,679
install virtualmin to be able to use it

00:20:28,880 --> 00:20:35,440
you should be able to just download

00:20:31,679 --> 00:20:39,039
and run a virtualenv package

00:20:35,440 --> 00:20:41,520
or kind of like an audit effect okay

00:20:39,039 --> 00:20:42,799
so then we decided the next question is

00:20:41,520 --> 00:20:44,799
what we want to add

00:20:42,799 --> 00:20:46,799
and what we wanted to add as a new

00:20:44,799 --> 00:20:48,000
functionality was extensibility this is

00:20:46,799 --> 00:20:49,919
the plugin system

00:20:48,000 --> 00:20:52,559
so that additional python interpretation

00:20:49,919 --> 00:20:55,280
can provide their virtual implementation

00:20:52,559 --> 00:20:57,360
outside of the core virtualmin project

00:20:55,280 --> 00:21:00,080
we also wanted to provide the rich

00:20:57,360 --> 00:21:01,200
api so that tools that wants to wrap

00:21:00,080 --> 00:21:03,840
around virtually

00:21:01,200 --> 00:21:05,039
can get information about the created

00:21:03,840 --> 00:21:07,760
virtual environment

00:21:05,039 --> 00:21:09,679
very easily we also do wanted to unify

00:21:07,760 --> 00:21:10,480
the virtual environment creation sex

00:21:09,679 --> 00:21:12,960
mechanism

00:21:10,480 --> 00:21:13,919
and this is something that a lot of you

00:21:12,960 --> 00:21:16,080
might not know but

00:21:13,919 --> 00:21:18,240
actually before the rewrite the old

00:21:16,080 --> 00:21:20,640
virtual lamp created virtual environment

00:21:18,240 --> 00:21:21,600
in one way why the vm uses the tool for

00:21:20,640 --> 00:21:23,760
a different way

00:21:21,600 --> 00:21:26,320
to create a virtual environment and the

00:21:23,760 --> 00:21:28,559
reason for these two

00:21:26,320 --> 00:21:30,080
discrepancies is because virtualem was

00:21:28,559 --> 00:21:33,600
created back in the days before

00:21:30,080 --> 00:21:35,760
vm so the it had to

00:21:33,600 --> 00:21:37,760
kind of like monkey patch python to be

00:21:35,760 --> 00:21:41,200
able to support virtual environments

00:21:37,760 --> 00:21:43,760
but with vm the virtually with vm

00:21:41,200 --> 00:21:44,400
project the c python interpreter itself

00:21:43,760 --> 00:21:46,559
added

00:21:44,400 --> 00:21:48,320
a lot of mechanisms that make it makes

00:21:46,559 --> 00:21:50,480
it a lot easier to create a virtual

00:21:48,320 --> 00:21:52,400
environment

00:21:50,480 --> 00:21:54,400
then also decided what we're not going

00:21:52,400 --> 00:21:56,080
to support and

00:21:54,400 --> 00:21:58,080
whenever you decide something you're not

00:21:56,080 --> 00:22:00,320
going to support it's very important

00:21:58,080 --> 00:22:01,120
to provide the alternative path to the

00:22:00,320 --> 00:22:02,880
users

00:22:01,120 --> 00:22:04,880
for example we decided that we're not

00:22:02,880 --> 00:22:06,559
going to support relocatable virtual

00:22:04,880 --> 00:22:08,559
environments and the reason why we did

00:22:06,559 --> 00:22:09,840
not support this is because

00:22:08,559 --> 00:22:12,320
getting relocated provincial

00:22:09,840 --> 00:22:14,400
environments correct is very hard

00:22:12,320 --> 00:22:16,480
in cross press from support like if

00:22:14,400 --> 00:22:18,880
you're targeting all platforms

00:22:16,480 --> 00:22:20,320
and this is something that we try to do

00:22:18,880 --> 00:22:22,240
we kind of like support it for

00:22:20,320 --> 00:22:23,760
or in experimental status supported

00:22:22,240 --> 00:22:24,559
within the version and project for a few

00:22:23,760 --> 00:22:26,960
years

00:22:24,559 --> 00:22:28,960
but we always got a lot of bug reports

00:22:26,960 --> 00:22:31,760
so with the rewrites we decided to let

00:22:28,960 --> 00:22:33,600
people say hey try to provide this

00:22:31,760 --> 00:22:34,240
functionality as a plugin and if it is a

00:22:33,600 --> 00:22:37,840
plugin

00:22:34,240 --> 00:22:38,880
you can actually scope it so that it's

00:22:37,840 --> 00:22:40,559
very very

00:22:38,880 --> 00:22:42,159
narrowly scope and it only supports your

00:22:40,559 --> 00:22:44,880
platform and there you can ensure that

00:22:42,159 --> 00:22:45,679
actually this is gonna work another

00:22:44,880 --> 00:22:48,240
thing that

00:22:45,679 --> 00:22:49,440
we decided to drop is to drop all the

00:22:48,240 --> 00:22:51,120
deprecated flags

00:22:49,440 --> 00:22:52,320
because the virtual project is a lot of

00:22:51,120 --> 00:22:54,080
the appropriate flight that we

00:22:52,320 --> 00:22:55,039
introduced like 10 years ago we wanted

00:22:54,080 --> 00:22:56,559
to drop it

00:22:55,039 --> 00:22:58,159
and actually once we did this and

00:22:56,559 --> 00:22:58,799
especially after the rewrite people

00:22:58,159 --> 00:23:01,600
started

00:22:58,799 --> 00:23:02,000
creating issues on our environment and

00:23:01,600 --> 00:23:03,760
our

00:23:02,000 --> 00:23:05,120
issue tracker that hey why did you drop

00:23:03,760 --> 00:23:06,720
this it just disappeared

00:23:05,120 --> 00:23:08,480
and we just had to point them out that

00:23:06,720 --> 00:23:10,159
hey this is something that was

00:23:08,480 --> 00:23:11,760
deprecated a few years please just

00:23:10,159 --> 00:23:13,840
remove the flag everything should work

00:23:11,760 --> 00:23:16,320
just as fine as it did before

00:23:13,840 --> 00:23:18,159
or basically we also wanted to drop the

00:23:16,320 --> 00:23:19,919
having the entire project in one file

00:23:18,159 --> 00:23:22,640
and the reason for this is was

00:23:19,919 --> 00:23:23,200
that we actually get to a state where

00:23:22,640 --> 00:23:25,120
virtualmin

00:23:23,200 --> 00:23:27,200
is easier to maintain and reason about

00:23:25,120 --> 00:23:30,240
it and test

00:23:27,200 --> 00:23:32,720
so and also we wanted to adopt std leave

00:23:30,240 --> 00:23:35,039
only dependencies we actually want to

00:23:32,720 --> 00:23:36,559
pull in python environment python

00:23:35,039 --> 00:23:38,720
ecosystem dependencies

00:23:36,559 --> 00:23:40,960
so we don't have to rewrite and maintain

00:23:38,720 --> 00:23:42,480
a lot of functionality within virtualenv

00:23:40,960 --> 00:23:45,279
functionality that's already available

00:23:42,480 --> 00:23:49,039
as a pipeli package

00:23:45,279 --> 00:23:50,400
so in order to once we had kind of like

00:23:49,039 --> 00:23:51,200
the rough plan what we wanted to support

00:23:50,400 --> 00:23:52,880
what we don't

00:23:51,200 --> 00:23:55,520
want to support and how we're going to

00:23:52,880 --> 00:23:57,120
go ahead we posted in our obsession our

00:23:55,520 --> 00:23:59,679
github

00:23:57,120 --> 00:24:01,120
and we let people get back to it it was

00:23:59,679 --> 00:24:03,440
generation

00:24:01,120 --> 00:24:04,640
it was in general positively received

00:24:03,440 --> 00:24:07,200
with a few additional

00:24:04,640 --> 00:24:08,240
changes to suggested on it to the point

00:24:07,200 --> 00:24:11,200
where i was like hey

00:24:08,240 --> 00:24:12,799
we're ready to do this and i as you can

00:24:11,200 --> 00:24:13,520
see here i basically was very optimistic

00:24:12,799 --> 00:24:15,279
it was

00:24:13,520 --> 00:24:18,159
hey give me a month and i'll be ready

00:24:15,279 --> 00:24:21,279
with this fast forward six months later

00:24:18,159 --> 00:24:22,799
it's six months later basically i got to

00:24:21,279 --> 00:24:25,120
the point where i was ready to

00:24:22,799 --> 00:24:27,600
have a first review request this is when

00:24:25,120 --> 00:24:30,159
i basically posted the information to

00:24:27,600 --> 00:24:31,679
some python package authority

00:24:30,159 --> 00:24:32,240
maintainers and hey look at the code

00:24:31,679 --> 00:24:34,159
base

00:24:32,240 --> 00:24:35,360
make let me know if this makes sense and

00:24:34,159 --> 00:24:37,600
it's kind of like works

00:24:35,360 --> 00:24:39,919
i got back some review on the review i

00:24:37,600 --> 00:24:42,799
got back i made some few iterations

00:24:39,919 --> 00:24:43,440
and on the january 21st we got the first

00:24:42,799 --> 00:24:45,520
beta

00:24:43,440 --> 00:24:47,440
the first beta allowed user to actually

00:24:45,520 --> 00:24:48,960
test it themselves on a machine without

00:24:47,440 --> 00:24:50,080
needing to install it from like a bit

00:24:48,960 --> 00:24:53,360
repository

00:24:50,080 --> 00:24:55,360
and this got a few more feature requests

00:24:53,360 --> 00:24:57,120
button requests suggestions we apply

00:24:55,360 --> 00:24:57,919
that to release the second data to the

00:24:57,120 --> 00:25:00,000
users

00:24:57,919 --> 00:25:01,840
so the users can again test it and after

00:25:00,000 --> 00:25:02,480
the second beta we did not get much more

00:25:01,840 --> 00:25:04,640
feedback

00:25:02,480 --> 00:25:06,640
and part of it is that people who were

00:25:04,640 --> 00:25:08,159
interested in actually being guinea pigs

00:25:06,640 --> 00:25:10,960
were kind of like

00:25:08,159 --> 00:25:12,640
covered their use cases so on january

00:25:10,960 --> 00:25:16,320
10th we basically went on the first

00:25:12,640 --> 00:25:18,400
public release that being said

00:25:16,320 --> 00:25:19,440
just to speak a bit about the people who

00:25:18,400 --> 00:25:22,240
made this possible

00:25:19,440 --> 00:25:23,760
for the first release it was basically

00:25:22,240 --> 00:25:25,600
siddhant kumar

00:25:23,760 --> 00:25:26,960
helped migrating the activation script

00:25:25,600 --> 00:25:29,039
from the old workshop to the new

00:25:26,960 --> 00:25:30,720
virtualenv but otherwise everything else

00:25:29,039 --> 00:25:32,960
was done by me

00:25:30,720 --> 00:25:34,640
but once the project got public people

00:25:32,960 --> 00:25:36,320
started to look at the code base and

00:25:34,640 --> 00:25:38,080
made a lot of

00:25:36,320 --> 00:25:40,240
suggestions and improvements and pull

00:25:38,080 --> 00:25:41,760
requests and this is kind of like the

00:25:40,240 --> 00:25:43,360
list of people who contributed to the

00:25:41,760 --> 00:25:45,520
rewrite of the project

00:25:43,360 --> 00:25:48,240
with this with the number of lines we've

00:25:45,520 --> 00:25:51,600
changed to the project

00:25:48,240 --> 00:25:53,360
and then before we actually did the

00:25:51,600 --> 00:25:54,880
release it was very important that we

00:25:53,360 --> 00:25:56,880
publicized that this is going to happen

00:25:54,880 --> 00:25:58,240
this release so that people can be

00:25:56,880 --> 00:26:00,000
prepared for it and we did it on the

00:25:58,240 --> 00:26:01,120
monday so that people actually have time

00:26:00,000 --> 00:26:04,559
to

00:26:01,120 --> 00:26:05,520
address it and first we made a python

00:26:04,559 --> 00:26:07,919
discourse

00:26:05,520 --> 00:26:10,400
package in the packaging section a forum

00:26:07,919 --> 00:26:12,799
post where we explained in detail that

00:26:10,400 --> 00:26:13,760
why did we do rewrite what are the new

00:26:12,799 --> 00:26:15,200
features

00:26:13,760 --> 00:26:17,279
then we send this down onto the

00:26:15,200 --> 00:26:19,039
distributes mail list followed by the

00:26:17,279 --> 00:26:19,760
actual release happening to the pipeli

00:26:19,039 --> 00:26:21,760
package

00:26:19,760 --> 00:26:24,159
and at this point people could actually

00:26:21,760 --> 00:26:25,840
try it anyone who did not version

00:26:24,159 --> 00:26:28,480
contrain or virgin pin

00:26:25,840 --> 00:26:29,679
burst land started to get it so the

00:26:28,480 --> 00:26:32,240
issues and the

00:26:29,679 --> 00:26:33,600
feedback started to pour in another of

00:26:32,240 --> 00:26:35,440
the things that we did is

00:26:33,600 --> 00:26:37,760
i made a twitter post about this which

00:26:35,440 --> 00:26:39,200
got fairly popular and actually got a

00:26:37,760 --> 00:26:42,960
lot of impressions

00:26:39,200 --> 00:26:45,520
so people could know about this

00:26:42,960 --> 00:26:47,120
through twitter too and in the next

00:26:45,520 --> 00:26:48,320
section i would like to describe a few

00:26:47,120 --> 00:26:50,400
technical good chats

00:26:48,320 --> 00:26:51,840
these are a few things that we learned

00:26:50,400 --> 00:26:54,960
by doing the rewrite

00:26:51,840 --> 00:26:57,840
think that we got us a bit unexpected

00:26:54,960 --> 00:27:00,320
just to eliminate a few things which you

00:26:57,840 --> 00:27:02,640
might run into when you try to

00:27:00,320 --> 00:27:04,240
do a rewrite so one of the things that

00:27:02,640 --> 00:27:06,080
we should always do when you do a

00:27:04,240 --> 00:27:06,799
rewrite is consider people stuck on old

00:27:06,080 --> 00:27:09,440
versions

00:27:06,799 --> 00:27:10,480
some version people could actually not

00:27:09,440 --> 00:27:12,880
use the new version

00:27:10,480 --> 00:27:14,480
not because they did not want to it's

00:27:12,880 --> 00:27:14,880
not because their platform doesn't allow

00:27:14,480 --> 00:27:17,039
you

00:27:14,880 --> 00:27:19,279
so always provide away them to support

00:27:17,039 --> 00:27:21,279
them and the way we did it is

00:27:19,279 --> 00:27:23,200
keep the code that we had on our legacy

00:27:21,279 --> 00:27:26,399
branch and this legacy branch

00:27:23,200 --> 00:27:27,919
keeps getting also is released as a

00:27:26,399 --> 00:27:31,600
documentation as a

00:27:27,919 --> 00:27:33,440
new tag but also has a the new czech

00:27:31,600 --> 00:27:34,640
changelog at the end of it points to the

00:27:33,440 --> 00:27:36,720
legacy change look

00:27:34,640 --> 00:27:37,919
this will suggest this on by someone so

00:27:36,720 --> 00:27:39,360
that someone looking at the new

00:27:37,919 --> 00:27:41,360
changelog can see how

00:27:39,360 --> 00:27:42,559
the new changelog transitions to the old

00:27:41,360 --> 00:27:44,159
one

00:27:42,559 --> 00:27:46,480
just to see the full lifecycle of the

00:27:44,159 --> 00:27:48,799
project and keep releasing

00:27:46,480 --> 00:27:50,320
community patches even after the release

00:27:48,799 --> 00:27:50,640
you can see that two weeks later we

00:27:50,320 --> 00:27:52,960
steal

00:27:50,640 --> 00:27:53,840
the release which basically fixed a few

00:27:52,960 --> 00:27:58,399
compatibility

00:27:53,840 --> 00:28:03,039
issues with the new virtual lens so

00:27:58,399 --> 00:28:04,320
the c python another

00:28:03,039 --> 00:28:06,240
lesson in the word that the c python

00:28:04,320 --> 00:28:08,480
interpreter is very diverse and what it

00:28:06,240 --> 00:28:10,080
means by it's very diverse is that

00:28:08,480 --> 00:28:11,200
when you say what is a python

00:28:10,080 --> 00:28:13,760
installation and you look at your

00:28:11,200 --> 00:28:16,399
operating system like the path structure

00:28:13,760 --> 00:28:18,240
you are used to a given structure but

00:28:16,399 --> 00:28:22,320
this structure is very diverse

00:28:18,240 --> 00:28:24,799
and actually it actually varies between

00:28:22,320 --> 00:28:27,120
platforms because every platform that

00:28:24,799 --> 00:28:29,440
releases c python can customize it

00:28:27,120 --> 00:28:31,360
this is for example what is the

00:28:29,440 --> 00:28:34,399
configuration script on my

00:28:31,360 --> 00:28:35,520
platform you can see that for example

00:28:34,399 --> 00:28:38,159
that the pure lib

00:28:35,520 --> 00:28:39,760
is under the lib folder but the platform

00:28:38,159 --> 00:28:42,080
is under lip64

00:28:39,760 --> 00:28:43,279
so the bottom line is that if you get an

00:28:42,080 --> 00:28:45,360
installation of feather and

00:28:43,279 --> 00:28:46,880
ubuntu they might look have a totally

00:28:45,360 --> 00:28:49,679
different file structure

00:28:46,880 --> 00:28:51,760
just because the when those distribution

00:28:49,679 --> 00:28:53,440
decided to redistribute the python

00:28:51,760 --> 00:28:55,520
they decided to use a different folder

00:28:53,440 --> 00:28:57,440
layout

00:28:55,520 --> 00:29:00,799
so this is one of the main things that

00:28:57,440 --> 00:29:03,279
made it very hard to use

00:29:00,799 --> 00:29:04,000
to support the virtual app in the order

00:29:03,279 --> 00:29:06,000
basis

00:29:04,000 --> 00:29:07,520
because we did not basically use this

00:29:06,000 --> 00:29:09,039
information this configuration

00:29:07,520 --> 00:29:11,039
information available

00:29:09,039 --> 00:29:12,320
under the sysconfig package but instead

00:29:11,039 --> 00:29:14,480
try to do

00:29:12,320 --> 00:29:16,159
if else branches to guess what is

00:29:14,480 --> 00:29:18,000
correct for the clan platform

00:29:16,159 --> 00:29:19,679
we switched this to the sysconting one

00:29:18,000 --> 00:29:22,720
which made it that now

00:29:19,679 --> 00:29:25,200
we have much better support for various

00:29:22,720 --> 00:29:26,880
redistributions of the c python and for

00:29:25,200 --> 00:29:29,679
example on the side of fedora

00:29:26,880 --> 00:29:30,240
you can see that the lib64 and the lib

00:29:29,679 --> 00:29:32,960
has

00:29:30,240 --> 00:29:33,840
separate site packages folder and this

00:29:32,960 --> 00:29:35,360
is in line with

00:29:33,840 --> 00:29:37,600
what is the expectation on those

00:29:35,360 --> 00:29:39,279
platforms for a virtual environment

00:29:37,600 --> 00:29:41,520
another of the things that is that the

00:29:39,279 --> 00:29:43,600
linear distributions

00:29:41,520 --> 00:29:45,440
that also does other relational

00:29:43,600 --> 00:29:47,440
customization for example debian does

00:29:45,440 --> 00:29:49,039
not install vm by default

00:29:47,440 --> 00:29:50,720
and there goes our assumptions from

00:29:49,039 --> 00:29:52,880
earlier that vm comes

00:29:50,720 --> 00:29:54,159
out of the box it comes out of the box

00:29:52,880 --> 00:29:56,880
unless you're on a debian

00:29:54,159 --> 00:29:58,960
distribution such as ubuntu but more

00:29:56,880 --> 00:29:59,840
importantly is that the pip uses this

00:29:58,960 --> 00:30:01,919
tutorials

00:29:59,840 --> 00:30:03,440
path to install and this is basically

00:30:01,919 --> 00:30:04,559
the same configuration i showed you on

00:30:03,440 --> 00:30:06,480
the earlier side

00:30:04,559 --> 00:30:09,279
but it's a separate it's basically

00:30:06,480 --> 00:30:11,600
duplicated duplicating the shift config

00:30:09,279 --> 00:30:13,440
and for example the debian patching of

00:30:11,600 --> 00:30:15,200
this

00:30:13,440 --> 00:30:16,559
had different patching for the digital

00:30:15,200 --> 00:30:19,039
and the sysconfig

00:30:16,559 --> 00:30:20,720
configuration map and so we had to pick

00:30:19,039 --> 00:30:22,080
one of the two which one to use and we

00:30:20,720 --> 00:30:24,799
went with the digital

00:30:22,080 --> 00:30:26,159
one mainly because pip uses it and

00:30:24,799 --> 00:30:28,799
because people

00:30:26,159 --> 00:30:30,399
users install packages into the virtual

00:30:28,799 --> 00:30:32,399
environment using pip

00:30:30,399 --> 00:30:34,640
that's what is what people would

00:30:32,399 --> 00:30:38,000
actually expect

00:30:34,640 --> 00:30:41,279
okay so another kind of uh

00:30:38,000 --> 00:30:43,600
gotcha was that long-term support uh

00:30:41,279 --> 00:30:45,360
distributions for example centos ships

00:30:43,600 --> 00:30:47,840
with the

00:30:45,360 --> 00:30:48,720
late or the oldest long-term support

00:30:47,840 --> 00:30:51,440
santos

00:30:48,720 --> 00:30:52,320
distribution shifts with pip9 so that it

00:30:51,440 --> 00:30:54,480
does not

00:30:52,320 --> 00:30:55,520
install that does not understand python

00:30:54,480 --> 00:30:57,519
requires on the wheels

00:30:55,520 --> 00:30:59,279
so it basically struggles to install our

00:30:57,519 --> 00:31:01,519
python we or our

00:30:59,279 --> 00:31:03,360
python wheel of the project and what we

00:31:01,519 --> 00:31:04,000
had to do to work around this is we had

00:31:03,360 --> 00:31:05,840
to like

00:31:04,000 --> 00:31:07,919
not use the latest available sticks

00:31:05,840 --> 00:31:09,679
within the project and instead render

00:31:07,919 --> 00:31:11,039
this into our project

00:31:09,679 --> 00:31:12,640
and also provide additional better

00:31:11,039 --> 00:31:14,159
messaging to set up that file so that

00:31:12,640 --> 00:31:15,360
people's trying to install virtually i'm

00:31:14,159 --> 00:31:18,399
going to send to us

00:31:15,360 --> 00:31:20,559
can get a more useful error message and

00:31:18,399 --> 00:31:22,640
rather than something very cryptic which

00:31:20,559 --> 00:31:25,039
leaves them baffled

00:31:22,640 --> 00:31:27,039
another kind of like gotcha was that the

00:31:25,039 --> 00:31:28,799
maco i told you about the ability of the

00:31:27,039 --> 00:31:30,080
user that hey

00:31:28,799 --> 00:31:32,080
the operating system that they can

00:31:30,080 --> 00:31:32,960
customize the layout of the python

00:31:32,080 --> 00:31:35,279
installation

00:31:32,960 --> 00:31:36,880
it's even more for example mac os has

00:31:35,279 --> 00:31:38,480
even more python installation and they

00:31:36,880 --> 00:31:40,559
customize even further

00:31:38,480 --> 00:31:41,679
you can get the python from the python

00:31:40,559 --> 00:31:44,159
or corporate

00:31:41,679 --> 00:31:44,799
but you can have a python on mac os from

00:31:44,159 --> 00:31:46,880
the

00:31:44,799 --> 00:31:48,399
part of the operating system you have a

00:31:46,880 --> 00:31:50,159
brew installation

00:31:48,399 --> 00:31:52,640
from where users may be able to get a

00:31:50,159 --> 00:31:53,440
python you also have the xcode developer

00:31:52,640 --> 00:31:55,760
tools

00:31:53,440 --> 00:31:57,760
both for python 2 and python 3 from

00:31:55,760 --> 00:32:01,279
where users may get a python

00:31:57,760 --> 00:32:03,440
and for all apple shipped pythons

00:32:01,279 --> 00:32:05,279
they are hard coded to static pack this

00:32:03,440 --> 00:32:05,919
is kind of like for security and safety

00:32:05,279 --> 00:32:07,600
reasons

00:32:05,919 --> 00:32:09,760
what means that basically if you take a

00:32:07,600 --> 00:32:10,320
pythonx suitable provided by the macos

00:32:09,760 --> 00:32:12,720
system

00:32:10,320 --> 00:32:13,440
you can just copy it and use it again we

00:32:12,720 --> 00:32:16,640
have to

00:32:13,440 --> 00:32:18,159
mangle the binary so that it's think

00:32:16,640 --> 00:32:19,519
that it's in the correct location it

00:32:18,159 --> 00:32:21,039
allows to run

00:32:19,519 --> 00:32:23,200
and this kind of like operation is

00:32:21,039 --> 00:32:25,519
basically things that complicate

00:32:23,200 --> 00:32:27,120
achieving a rewrite because getting to

00:32:25,519 --> 00:32:28,559
support all this platform means that you

00:32:27,120 --> 00:32:30,240
have to have custom code

00:32:28,559 --> 00:32:32,159
to support every little of this kind of

00:32:30,240 --> 00:32:33,120
distribution and through that some of

00:32:32,159 --> 00:32:36,159
these are actually

00:32:33,120 --> 00:32:36,559
not shipped by apple but the fact that

00:32:36,159 --> 00:32:38,799
some

00:32:36,559 --> 00:32:39,760
user somewhere mahaya might have

00:32:38,799 --> 00:32:41,200
available

00:32:39,760 --> 00:32:43,279
on their machine means that they're

00:32:41,200 --> 00:32:45,919
gonna create an issue so you'll have to

00:32:43,279 --> 00:32:47,600
support the some level

00:32:45,919 --> 00:32:49,600
another kind of like issue was that the

00:32:47,600 --> 00:32:51,279
fixing disk details some of you might

00:32:49,600 --> 00:32:53,440
not know and this might go away once

00:32:51,279 --> 00:32:55,279
digital moves out to the scanner library

00:32:53,440 --> 00:32:56,960
but this still sexually allows you to

00:32:55,279 --> 00:32:59,600
customize

00:32:56,960 --> 00:33:00,720
your actual prefixes for example you can

00:32:59,600 --> 00:33:02,960
customize

00:33:00,720 --> 00:33:04,799
where your binaries should be placed in

00:33:02,960 --> 00:33:06,720
into like a static pad and this is done

00:33:04,799 --> 00:33:08,320
through some configuration files

00:33:06,720 --> 00:33:10,960
and the problem is that if user set

00:33:08,320 --> 00:33:12,240
these configuration files or even your

00:33:10,960 --> 00:33:14,480
operating system ships with this

00:33:12,240 --> 00:33:15,679
configuration file it affects your

00:33:14,480 --> 00:33:18,159
virtual environment

00:33:15,679 --> 00:33:20,159
so we basically had to monkey patch kind

00:33:18,159 --> 00:33:21,919
of like this this to this package

00:33:20,159 --> 00:33:23,360
so that it ignores this configuration

00:33:21,919 --> 00:33:25,120
files because otherwise

00:33:23,360 --> 00:33:26,960
what you ended up with was that you

00:33:25,120 --> 00:33:29,279
installed the package and it installed

00:33:26,960 --> 00:33:30,640
into the system environment rather than

00:33:29,279 --> 00:33:33,279
the virtual environment

00:33:30,640 --> 00:33:35,200
just by the fact that the digitals could

00:33:33,279 --> 00:33:36,080
pull in in a virtual environment the

00:33:35,200 --> 00:33:40,000
global

00:33:36,080 --> 00:33:42,080
configuration of it okay and yeah

00:33:40,000 --> 00:33:44,159
we this was very hard to track that and

00:33:42,080 --> 00:33:46,240
done it entirely we had to close

00:33:44,159 --> 00:33:47,279
close and reopen the issue five times so

00:33:46,240 --> 00:33:48,880
just be tenacious

00:33:47,279 --> 00:33:50,799
about fixing box you'll get there

00:33:48,880 --> 00:33:52,720
eventually but be prepared to be

00:33:50,799 --> 00:33:54,000
frustrated while trying to actually do

00:33:52,720 --> 00:33:55,200
them

00:33:54,000 --> 00:33:57,360
another kind of like issue your

00:33:55,200 --> 00:33:59,200
intellect is similar in the same uh

00:33:57,360 --> 00:34:00,799
scope is like the windows store python

00:33:59,200 --> 00:34:02,559
some of you might know that windows now

00:34:00,799 --> 00:34:03,840
actually ships the python interpreter

00:34:02,559 --> 00:34:05,519
part of the windows store

00:34:03,840 --> 00:34:06,960
this is very convenient for the user to

00:34:05,519 --> 00:34:09,280
install however it

00:34:06,960 --> 00:34:10,399
needs to satisfy the restriction of the

00:34:09,280 --> 00:34:12,480
windows store

00:34:10,399 --> 00:34:13,679
python and this kind of receptions are

00:34:12,480 --> 00:34:17,200
basically that

00:34:13,679 --> 00:34:19,359
you can you can run

00:34:17,200 --> 00:34:21,119
these pads but you cannot read it and

00:34:19,359 --> 00:34:22,639
this can end up in surprising behavior

00:34:21,119 --> 00:34:26,240
and this is something that can

00:34:22,639 --> 00:34:27,919
tickle off your uh put you off of the

00:34:26,240 --> 00:34:28,639
balance like expectation for example if

00:34:27,919 --> 00:34:30,720
you expect

00:34:28,639 --> 00:34:31,839
that the sixth executable always exists

00:34:30,720 --> 00:34:33,839
you may end up with

00:34:31,839 --> 00:34:35,280
some cases it does not exist in this

00:34:33,839 --> 00:34:37,119
case you have to make the decision do

00:34:35,280 --> 00:34:37,919
you want to support this platform or you

00:34:37,119 --> 00:34:39,440
just want to

00:34:37,919 --> 00:34:41,359
display a meaningful error message for

00:34:39,440 --> 00:34:43,200
the user and encourage them to upgrade

00:34:41,359 --> 00:34:45,599
to a newer version that maybe has this

00:34:43,200 --> 00:34:47,679
kind of functionality fixed

00:34:45,599 --> 00:34:50,159
another kind of thing lesson was learned

00:34:47,679 --> 00:34:52,399
that the pipeline project is maturing

00:34:50,159 --> 00:34:54,960
they're very quick to answer however

00:34:52,399 --> 00:34:57,920
they a lot of the platforms for example

00:34:54,960 --> 00:34:59,920
macos and windows are not well tested so

00:34:57,920 --> 00:35:01,440
while we try to do the implementation we

00:34:59,920 --> 00:35:01,920
try to keep the functionality on par

00:35:01,440 --> 00:35:03,839
with c

00:35:01,920 --> 00:35:05,440
python i was trying to keep the function

00:35:03,839 --> 00:35:07,760
in part with the c python discovered a

00:35:05,440 --> 00:35:09,760
lot of bugs in their vm project

00:35:07,760 --> 00:35:11,599
reported them and most of them have been

00:35:09,760 --> 00:35:13,920
actually fixed by now

00:35:11,599 --> 00:35:16,079
another kind of like a scotch is that on

00:35:13,920 --> 00:35:19,359
python 2

00:35:16,079 --> 00:35:21,119
on python to actually create a python 2

00:35:19,359 --> 00:35:23,200
to create a virtual environment you have

00:35:21,119 --> 00:35:26,560
to use the os.pipe

00:35:23,200 --> 00:35:28,320
file and oddly enough this pie might

00:35:26,560 --> 00:35:29,440
actually be mixing this is the landmark

00:35:28,320 --> 00:35:31,680
try to

00:35:29,440 --> 00:35:32,480
sleepwhite interpreter to detect where

00:35:31,680 --> 00:35:34,240
is the

00:35:32,480 --> 00:35:35,680
operating the sender library actually

00:35:34,240 --> 00:35:38,240
exists where is the

00:35:35,680 --> 00:35:39,359
prefix of the python installation and

00:35:38,240 --> 00:35:41,119
this

00:35:39,359 --> 00:35:42,880
there is a valid reason for this pipe to

00:35:41,119 --> 00:35:46,400
exist and

00:35:42,880 --> 00:35:47,599
for once it can actually python can

00:35:46,400 --> 00:35:50,160
function without it

00:35:47,599 --> 00:35:51,119
and for second is that you if you remove

00:35:50,160 --> 00:35:52,720
all the

00:35:51,119 --> 00:35:55,280
python file and you just keep the

00:35:52,720 --> 00:35:57,119
compile file you get obfuscated circuit

00:35:55,280 --> 00:35:58,079
and maximize your storage availability

00:35:57,119 --> 00:35:59,760
or storage

00:35:58,079 --> 00:36:01,599
for example this can be useful on a

00:35:59,760 --> 00:36:04,160
docker image or something

00:36:01,599 --> 00:36:05,440
and you should be able to still support

00:36:04,160 --> 00:36:07,839
creating virtual environments

00:36:05,440 --> 00:36:08,560
even when you don't have the python file

00:36:07,839 --> 00:36:11,680
available

00:36:08,560 --> 00:36:13,280
so we have to like fall back to only

00:36:11,680 --> 00:36:14,800
fall back to only having the os that

00:36:13,280 --> 00:36:17,200
pisces the compile file

00:36:14,800 --> 00:36:18,160
so basically having a python interpreter

00:36:17,200 --> 00:36:20,640
with just this

00:36:18,160 --> 00:36:21,760
and just avoiding the wave the pipe

00:36:20,640 --> 00:36:23,760
another kind of

00:36:21,760 --> 00:36:26,960
thing that was into it is that the

00:36:23,760 --> 00:36:28,240
cedars and the cedars is basically

00:36:26,960 --> 00:36:30,079
as the doctor is what's going to allow

00:36:28,240 --> 00:36:32,160
you to install packages and in the old

00:36:30,079 --> 00:36:35,599
system what happened that we basically

00:36:32,160 --> 00:36:37,920
took the python or the pip wheel and put

00:36:35,599 --> 00:36:40,400
it onto the python pipe and that asked

00:36:37,920 --> 00:36:42,240
that pip to install itself now this is

00:36:40,400 --> 00:36:43,200
slow because people the general purpose

00:36:42,240 --> 00:36:45,040
install tool

00:36:43,200 --> 00:36:46,880
some of the avoidable overlaps are that

00:36:45,040 --> 00:36:48,640
real validation startup times

00:36:46,880 --> 00:36:49,920
alphabet chat this is the kind of

00:36:48,640 --> 00:36:51,760
functionalities that

00:36:49,920 --> 00:36:53,599
you don't actually need in case of this

00:36:51,760 --> 00:36:54,000
use case because we ship the wheel

00:36:53,599 --> 00:36:55,520
ourselves

00:36:54,000 --> 00:36:57,520
and we know it's correct and we know

00:36:55,520 --> 00:36:59,680
that everything is going to be fine

00:36:57,520 --> 00:37:01,200
so what we did is basically added now a

00:36:59,680 --> 00:37:03,280
new

00:37:01,200 --> 00:37:04,960
seeder functionality called updater and

00:37:03,280 --> 00:37:07,040
what this update does is basically

00:37:04,960 --> 00:37:08,880
allows you to

00:37:07,040 --> 00:37:10,960
cache as much as operations if possible

00:37:08,880 --> 00:37:13,280
so that subsequent subsequent

00:37:10,960 --> 00:37:15,040
virtual environment creations have to do

00:37:13,280 --> 00:37:18,720
as little work as possible

00:37:15,040 --> 00:37:20,160
for example we put everything that is

00:37:18,720 --> 00:37:21,760
cachable within the app there's

00:37:20,160 --> 00:37:22,640
platform-specific application data

00:37:21,760 --> 00:37:25,040
location

00:37:22,640 --> 00:37:26,880
and we cache both the video validation

00:37:25,040 --> 00:37:27,920
the extraction of the wheel generating

00:37:26,880 --> 00:37:29,839
the pass file

00:37:27,920 --> 00:37:31,599
fixing the records basically doing most

00:37:29,839 --> 00:37:34,079
of the installation that's

00:37:31,599 --> 00:37:35,680
avoidable we cache it into the app data

00:37:34,079 --> 00:37:37,680
so that when we actually have to do a

00:37:35,680 --> 00:37:39,280
subsequent version one creation

00:37:37,680 --> 00:37:41,119
we don't have to do this all this step

00:37:39,280 --> 00:37:42,640
but instead we just have to copy your

00:37:41,119 --> 00:37:44,400
sim link to the pure lib

00:37:42,640 --> 00:37:46,240
folder of the new virtual environment

00:37:44,400 --> 00:37:47,760
and generate the console scripts

00:37:46,240 --> 00:37:50,079
this means that instead of having to

00:37:47,760 --> 00:37:53,760
spend like

00:37:50,079 --> 00:37:56,320
for three two seconds to do a

00:37:53,760 --> 00:37:57,760
provide this seating information package

00:37:56,320 --> 00:38:00,800
you can don't be done in

00:37:57,760 --> 00:38:02,640
literally like 100 milliseconds if you

00:38:00,800 --> 00:38:04,400
use sim links in half a second if you

00:38:02,640 --> 00:38:07,280
use like actual virtue

00:38:04,400 --> 00:38:08,560
if you use copy method so very

00:38:07,280 --> 00:38:10,160
functionality was how should the

00:38:08,560 --> 00:38:12,079
packages be updating

00:38:10,160 --> 00:38:13,200
and you have two options either you're

00:38:12,079 --> 00:38:15,040
gonna be

00:38:13,200 --> 00:38:16,560
always keeping it to the latest best or

00:38:15,040 --> 00:38:18,240
you're gonna be keeping the version that

00:38:16,560 --> 00:38:19,599
you shipped virtually with it

00:38:18,240 --> 00:38:21,680
and this is quite deficient because

00:38:19,599 --> 00:38:24,480
depends on what you prefer do you prefer

00:38:21,680 --> 00:38:25,200
convenience and ecosystem evaluation or

00:38:24,480 --> 00:38:27,440
you defer

00:38:25,200 --> 00:38:28,960
speed and stability for your project and

00:38:27,440 --> 00:38:30,720
what we ended up doing after a long

00:38:28,960 --> 00:38:33,280
discussion is that we basically

00:38:30,720 --> 00:38:34,079
on a middle ground where we use the last

00:38:33,280 --> 00:38:37,680
20 or

00:38:34,079 --> 00:38:39,839
24 days older years only so we auto

00:38:37,680 --> 00:38:40,400
upgrade but we only use it if it's new

00:38:39,839 --> 00:38:42,400
enough

00:38:40,400 --> 00:38:44,160
this means that the projects have a

00:38:42,400 --> 00:38:46,560
great period when they can actually fix

00:38:44,160 --> 00:38:48,079
any box that they might have okay

00:38:46,560 --> 00:38:50,240
now one of the things that we all did

00:38:48,079 --> 00:38:50,640
not expect in it's kind of like a gotcha

00:38:50,240 --> 00:38:52,400
is that

00:38:50,640 --> 00:38:54,240
it could be that the user application

00:38:52,400 --> 00:38:55,520
that is not writable so we need to be

00:38:54,240 --> 00:38:57,839
able to fall back

00:38:55,520 --> 00:38:59,280
in this case to something same so still

00:38:57,839 --> 00:39:01,520
not fail

00:38:59,280 --> 00:39:02,400
and another kind of like things lessons

00:39:01,520 --> 00:39:04,560
here that be

00:39:02,400 --> 00:39:06,560
friendly with your redistributors

00:39:04,560 --> 00:39:08,160
basically we identified the path that we

00:39:06,560 --> 00:39:09,920
needed to

00:39:08,160 --> 00:39:12,000
what power the parts that our

00:39:09,920 --> 00:39:12,880
redistributors wanted to actually patch

00:39:12,000 --> 00:39:14,640
to alter

00:39:12,880 --> 00:39:16,480
and we made it simple and easy for them

00:39:14,640 --> 00:39:18,079
to do this by understanding why they

00:39:16,480 --> 00:39:18,800
need it make it easy for them and

00:39:18,079 --> 00:39:20,560
document it

00:39:18,800 --> 00:39:23,200
there and what should be patched when

00:39:20,560 --> 00:39:24,960
they're gonna alter the functionality

00:39:23,200 --> 00:39:26,800
and here's where i talk about the

00:39:24,960 --> 00:39:28,000
download only mode and the download only

00:39:26,800 --> 00:39:31,040
mode is basically something

00:39:28,000 --> 00:39:32,640
that's gonna similar functionality as

00:39:31,040 --> 00:39:34,480
you can install pip

00:39:32,640 --> 00:39:36,240
with just downloading and then invoking

00:39:34,480 --> 00:39:37,040
python you can also just basically

00:39:36,240 --> 00:39:39,760
download

00:39:37,040 --> 00:39:42,640
the zip up that we created and then just

00:39:39,760 --> 00:39:44,160
install that zip up or just invoke that

00:39:42,640 --> 00:39:45,280
zip up by passing it to your python

00:39:44,160 --> 00:39:47,920
environment

00:39:45,280 --> 00:39:49,520
okay now i'm gonna skip this because i

00:39:47,920 --> 00:39:52,560
don't

00:39:49,520 --> 00:39:53,839
yeah this so yeah so one of the

00:39:52,560 --> 00:39:54,400
additional functionalities that we had

00:39:53,839 --> 00:39:56,240
to

00:39:54,400 --> 00:39:57,760
we added now that we actually can add

00:39:56,240 --> 00:39:58,960
additional functionality on top of the

00:39:57,760 --> 00:40:01,599
virtualmin creation

00:39:58,960 --> 00:40:03,040
for example we could fix upstream box

00:40:01,599 --> 00:40:04,960
before they actually

00:40:03,040 --> 00:40:07,200
made it into they were fixed in the

00:40:04,960 --> 00:40:08,400
upstream in this case flipping the prime

00:40:07,200 --> 00:40:10,240
launcher or macos

00:40:08,400 --> 00:40:11,839
or for example automatically generating

00:40:10,240 --> 00:40:12,640
a git ignore file into the virtual

00:40:11,839 --> 00:40:14,640
environment

00:40:12,640 --> 00:40:16,720
to stop them being committed to your

00:40:14,640 --> 00:40:19,839
version controlling to your github

00:40:16,720 --> 00:40:21,839
okay and be prepared to do releases but

00:40:19,839 --> 00:40:23,680
whenever you do a release make sure that

00:40:21,839 --> 00:40:25,359
you're around in the next hour or two

00:40:23,680 --> 00:40:27,599
so that if anything major breaks you can

00:40:25,359 --> 00:40:29,680
easily and quickly fix it

00:40:27,599 --> 00:40:30,960
and just to conclude everything up what

00:40:29,680 --> 00:40:32,880
we learned is that

00:40:30,960 --> 00:40:34,160
when you try to do a rewrite always have

00:40:32,880 --> 00:40:36,400
a well-defined

00:40:34,160 --> 00:40:37,680
delivery plan test a lot automate a lot

00:40:36,400 --> 00:40:40,480
with your ice

00:40:37,680 --> 00:40:43,040
and prepare for a lot of boxes on short

00:40:40,480 --> 00:40:43,920
turnaround we basically had 27 releases

00:40:43,040 --> 00:40:45,359
in five months

00:40:43,920 --> 00:40:47,680
to the point where now virtually was

00:40:45,359 --> 00:40:49,920
basically stable we don't get any more

00:40:47,680 --> 00:40:51,680
bug fixes but in the first two months

00:40:49,920 --> 00:40:51,920
there was quite a lot of work involved

00:40:51,680 --> 00:40:54,800
in

00:40:51,920 --> 00:40:55,200
it always be available post release and

00:40:54,800 --> 00:40:57,280
be

00:40:55,200 --> 00:40:58,400
ready to predictably reevaluate things

00:40:57,280 --> 00:41:00,640
in your project

00:40:58,400 --> 00:41:02,480
and see if you can do it better today if

00:41:00,640 --> 00:41:06,319
you would actually do it

00:41:02,480 --> 00:41:08,240
all over okay but in general be nice

00:41:06,319 --> 00:41:09,839
and whenever someone does a rewrite try

00:41:08,240 --> 00:41:13,040
to approach it in a

00:41:09,839 --> 00:41:14,480
very understanding fashion so that you

00:41:13,040 --> 00:41:16,319
don't get to the section where people

00:41:14,480 --> 00:41:18,720
are basically

00:41:16,319 --> 00:41:20,079
frustrated when they try to do something

00:41:18,720 --> 00:41:22,720
good and just because

00:41:20,079 --> 00:41:24,319
you get something that you get they do

00:41:22,720 --> 00:41:26,560
something that you don't like

00:41:24,319 --> 00:41:28,319
you're getting nasty and discouraging

00:41:26,560 --> 00:41:31,599
them from contributing to the

00:41:28,319 --> 00:41:33,440
open source python ecosystem okay

00:41:31,599 --> 00:41:35,359
and just to say virtualmin virtually

00:41:33,440 --> 00:41:38,400
still going very well we got a bit of

00:41:35,359 --> 00:41:41,440
bump but otherwise we're in a good state

00:41:38,400 --> 00:41:43,680
and that was all for my talk and i'm not

00:41:41,440 --> 00:41:46,839
sure if i still have question time left

00:41:43,680 --> 00:41:48,319
but if not just drop questions into the

00:41:46,839 --> 00:41:50,880
chat

00:41:48,319 --> 00:41:52,880
hey that was a very very intense talk

00:41:50,880 --> 00:41:56,800
thank you very much bernard

00:41:52,880 --> 00:41:56,800
so we have three questions i think

00:41:58,400 --> 00:42:02,000
virtual end requires the python version

00:42:00,480 --> 00:42:05,760
you want to be created

00:42:02,000 --> 00:42:07,440
already yes it does require

00:42:05,760 --> 00:42:09,040
you can select an arbitrary python

00:42:07,440 --> 00:42:11,520
version and have virtual download and

00:42:09,040 --> 00:42:11,520
install it

00:42:14,240 --> 00:42:18,800
i can't hear you marcus you're muted or

00:42:17,359 --> 00:42:21,040
something

00:42:18,800 --> 00:42:21,040
but

00:42:24,079 --> 00:42:28,720
but to answer that question because i

00:42:26,480 --> 00:42:30,960
understand most of the question is that

00:42:28,720 --> 00:42:32,720
it's true you can't have basically

00:42:30,960 --> 00:42:34,880
arbitrary python installation

00:42:32,720 --> 00:42:36,560
now nothing stops you for example to

00:42:34,880 --> 00:42:38,319
writing a version plug-in that actually

00:42:36,560 --> 00:42:40,000
will download it's not available

00:42:38,319 --> 00:42:42,319
and this is possible for example you

00:42:40,000 --> 00:42:44,319
could write a pi and virtualmin plugin

00:42:42,319 --> 00:42:45,599
that actually uses primes to download

00:42:44,319 --> 00:42:47,119
and install a python

00:42:45,599 --> 00:42:49,520
version if it's not available on your

00:42:47,119 --> 00:42:49,520
machine

00:42:56,839 --> 00:43:02,000
okay

00:42:58,800 --> 00:43:02,000
i can't hear you mark

00:43:06,079 --> 00:43:09,760
i'm not sure if that's my side or your

00:43:10,839 --> 00:43:13,839
side

00:43:19,599 --> 00:43:23,920
okay i think i just and stick pick the

00:43:22,240 --> 00:43:27,920
questions into the client

00:43:23,920 --> 00:43:31,440
on on the loom and i'll answer those

00:43:27,920 --> 00:43:33,200
so the next question is uh was this work

00:43:31,440 --> 00:43:33,920
done on your personal time or your work

00:43:33,200 --> 00:43:36,800
time

00:43:33,920 --> 00:43:38,319
if the later or how did you argue for

00:43:36,800 --> 00:43:41,119
business to be allocated for such

00:43:38,319 --> 00:43:43,839
fundamental work with little

00:43:41,119 --> 00:43:45,920
business games so it was done both

00:43:43,839 --> 00:43:46,800
during my personal and work time it was

00:43:45,920 --> 00:43:49,280
basically

00:43:46,800 --> 00:43:50,400
let's say there is kind of like

00:43:49,280 --> 00:43:53,599
something as

00:43:50,400 --> 00:43:54,000
20 time or whatnot so i did it part of

00:43:53,599 --> 00:43:56,960
my work

00:43:54,000 --> 00:43:58,800
time during this my 20 time and it was

00:43:56,960 --> 00:44:01,760
considered

00:43:58,800 --> 00:44:03,760
basically as my personal development

00:44:01,760 --> 00:44:06,640
that's how the business signed off on it

00:44:03,760 --> 00:44:08,319
for me to work on it

00:44:06,640 --> 00:44:10,160
and the third question that we have is

00:44:08,319 --> 00:44:11,200
basically will the new version of

00:44:10,160 --> 00:44:12,640
virtually and being created in the

00:44:11,200 --> 00:44:14,400
standard library in the future

00:44:12,640 --> 00:44:16,640
i don't think it will be included as one

00:44:14,400 --> 00:44:17,359
and one but i think what's gonna happen

00:44:16,640 --> 00:44:20,800
is that

00:44:17,359 --> 00:44:21,760
parts of it that turns out to work a lot

00:44:20,800 --> 00:44:24,400
better

00:44:21,760 --> 00:44:24,800
in virtually amp we'll be back up ported

00:44:24,400 --> 00:44:27,200
to

00:44:24,800 --> 00:44:27,200
vm

00:44:32,800 --> 00:44:42,079
thank you you very much

00:44:36,800 --> 00:44:42,079

YouTube URL: https://www.youtube.com/watch?v=l9A0a8qZgOs


