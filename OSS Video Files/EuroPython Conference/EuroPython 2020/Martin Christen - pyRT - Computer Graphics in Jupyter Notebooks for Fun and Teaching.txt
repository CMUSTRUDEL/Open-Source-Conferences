Title: Martin Christen - pyRT - Computer Graphics in Jupyter Notebooks for Fun and Teaching
Publication date: 2020-09-15
Playlist: EuroPython 2020
Description: 
	"pyRT - Computer Graphics in Jupyter Notebooks for Fun and Teaching
EuroPython 2020 - Talk - 2020-07-23 - Microsoft
Online

By Martin Christen

PyRT (pronounced pirate) is a raytracer/image generator for Python 3.5 and higher. This project is mainly done with the following in mind:


ray tracing in the Jupyter notebook
Teaching computer graphics and ray tracing
Exploring ray tracing concepts for geo data using Python.
Rendering geo data, including large point clouds.
Implementing new algorithms for rendering large 3D city models.
Creating 3D-Maps from OpenStreetMap data
Server-side rendering / cloud based rendering


In this talk I will present the project and show some examples. I will show how useful it is to create quick 2D animations, such as visualization of different sorting algorithms and I how to create fractals and other graphics. A certain focus is also on geodata therefore I will show how to create a live EarthQuake map using pyRT.
In the last part I will show to use pyRT to create 3D renderings.



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2020.europython.eu/events/speaker-release-agreement/

    "
Captions: 
	00:00:06,080 --> 00:00:09,840
right so

00:00:06,799 --> 00:00:10,800
next up is martin and martin is going to

00:00:09,840 --> 00:00:14,400
talk about

00:00:10,800 --> 00:00:16,400
a tool called pirate for ray tracing and

00:00:14,400 --> 00:00:19,520
image generation

00:00:16,400 --> 00:00:21,359
martin is a professor of geo-informatics

00:00:19,520 --> 00:00:23,199
and computer graphics at the institute

00:00:21,359 --> 00:00:25,119
of geomatics engineering at the

00:00:23,199 --> 00:00:27,840
university of applied sciences

00:00:25,119 --> 00:00:28,400
north western switzerland you may

00:00:27,840 --> 00:00:31,760
remember

00:00:28,400 --> 00:00:35,040
we had the conference there in basel

00:00:31,760 --> 00:00:36,960
last year so off you go martin

00:00:35,040 --> 00:00:39,120
please start your screen sharing and

00:00:36,960 --> 00:00:39,120
then

00:00:40,719 --> 00:00:44,000
excellence all working perfectly yes

00:00:43,120 --> 00:00:46,320
thank you for the

00:00:44,000 --> 00:00:47,840
introduction i just had some technical

00:00:46,320 --> 00:00:50,879
difficulties but

00:00:47,840 --> 00:00:52,399
just solving the time perfect i hope you

00:00:50,879 --> 00:00:55,600
can see this full screen

00:00:52,399 --> 00:00:56,719
perfect yeah i move this one too okay

00:00:55,600 --> 00:00:59,039
i'm talking about

00:00:56,719 --> 00:00:59,840
pirate computer graphics and jupiter

00:00:59,039 --> 00:01:02,719
notebooks

00:00:59,840 --> 00:01:04,400
and the most important part for fun and

00:01:02,719 --> 00:01:07,680
also a little bit for teaching

00:01:04,400 --> 00:01:09,760
i'm actually teaching python

00:01:07,680 --> 00:01:12,000
at the university of applied science and

00:01:09,760 --> 00:01:15,280
arts north western switzerland if you i

00:01:12,000 --> 00:01:17,280
attended european last year and went to

00:01:15,280 --> 00:01:20,720
the workshops or the social event

00:01:17,280 --> 00:01:24,080
that was this building i'm working

00:01:20,720 --> 00:01:25,920
and today i'm i'm talking about a small

00:01:24,080 --> 00:01:28,000
site project i'm create

00:01:25,920 --> 00:01:30,079
i started creating a couple years ago

00:01:28,000 --> 00:01:32,560
and still maintain it

00:01:30,079 --> 00:01:36,320
and it's basically most for fun to

00:01:32,560 --> 00:01:36,320
create such graphics we see here

00:01:37,520 --> 00:01:40,880
my my inspiration or motivation lies

00:01:40,400 --> 00:01:43,600
back

00:01:40,880 --> 00:01:45,439
in the in the early personal computers

00:01:43,600 --> 00:01:49,040
like here the commodore

00:01:45,439 --> 00:01:51,040
16 or 64. um that's actually from the

00:01:49,040 --> 00:01:54,159
manual of this computer so

00:01:51,040 --> 00:01:57,360
it came out with this ugly basic code

00:01:54,159 --> 00:01:58,719
and you could create graphics we saw in

00:01:57,360 --> 00:02:02,240
the previous talks

00:01:58,719 --> 00:02:04,799
to talk um also some some nice graphics

00:02:02,240 --> 00:02:07,040
um and problem of course is always in

00:02:04,799 --> 00:02:09,200
python we don't have something built in

00:02:07,040 --> 00:02:11,360
to create that i really want something i

00:02:09,200 --> 00:02:13,040
can create a couple lines of code and

00:02:11,360 --> 00:02:16,000
and see something that's

00:02:13,040 --> 00:02:17,760
my basic motivation of course um you

00:02:16,000 --> 00:02:19,120
could also create something for game

00:02:17,760 --> 00:02:22,239
development

00:02:19,120 --> 00:02:25,040
that's not my focus at the moment

00:02:22,239 --> 00:02:26,239
i was in the game development industry

00:02:25,040 --> 00:02:28,959
many years ago but

00:02:26,239 --> 00:02:30,000
at the moment i'm not creating any games

00:02:28,959 --> 00:02:32,879
anymore

00:02:30,000 --> 00:02:34,800
so i have two other things in mind the

00:02:32,879 --> 00:02:36,000
first is the server-side graphics

00:02:34,800 --> 00:02:39,440
generation i want to have

00:02:36,000 --> 00:02:43,360
a server that can create some

00:02:39,440 --> 00:02:46,720
some movies for example or animations

00:02:43,360 --> 00:02:47,519
i also want it for teaching for example

00:02:46,720 --> 00:02:50,319
it's perfect

00:02:47,519 --> 00:02:51,680
to to explain how loops work if you have

00:02:50,319 --> 00:02:54,640
some graphics

00:02:51,680 --> 00:02:55,840
or of course sorting algorithms you can

00:02:54,640 --> 00:02:59,519
display

00:02:55,840 --> 00:03:02,239
how it works etc also it's nice

00:02:59,519 --> 00:03:02,959
to create some real-time content for

00:03:02,239 --> 00:03:07,360
streaming

00:03:02,959 --> 00:03:10,640
on twitch youtube or now zoom whatever

00:03:07,360 --> 00:03:12,560
i will show something like that later on

00:03:10,640 --> 00:03:13,760
so there are many other modules doing

00:03:12,560 --> 00:03:17,040
the same thing

00:03:13,760 --> 00:03:18,879
so i don't really go into these

00:03:17,040 --> 00:03:20,640
just for reference there are more of

00:03:18,879 --> 00:03:23,280
these um

00:03:20,640 --> 00:03:25,280
for 2d graphics we have many things for

00:03:23,280 --> 00:03:28,480
example arcade is more for games

00:03:25,280 --> 00:03:29,200
pixel is for more for retro games tv is

00:03:28,480 --> 00:03:31,599
also for

00:03:29,200 --> 00:03:33,760
for mobile applications and then there

00:03:31,599 --> 00:03:36,159
are tons of gui toolkits where you can

00:03:33,760 --> 00:03:38,239
create graphics too

00:03:36,159 --> 00:03:40,080
and of course movie pie where you can

00:03:38,239 --> 00:03:43,920
create movies out of

00:03:40,080 --> 00:03:47,519
still images the same for 3d graphics

00:03:43,920 --> 00:03:49,760
there are some modules of course opengl

00:03:47,519 --> 00:03:51,519
would be the biggest overkill i said i

00:03:49,760 --> 00:03:52,480
want to create some graphics in a few

00:03:51,519 --> 00:03:56,239
lines of code

00:03:52,480 --> 00:03:57,840
if i would start with opengl i would end

00:03:56,239 --> 00:04:00,480
up with 200

00:03:57,840 --> 00:04:00,959
lines of code just to draw a triangle

00:04:00,480 --> 00:04:02,400
that's

00:04:00,959 --> 00:04:04,560
not really what they want to do at the

00:04:02,400 --> 00:04:07,519
moment and of course

00:04:04,560 --> 00:04:08,720
the q tooltic grid toolkits could do the

00:04:07,519 --> 00:04:11,200
same

00:04:08,720 --> 00:04:12,840
also there are blender cinema 4d you can

00:04:11,200 --> 00:04:15,439
script using

00:04:12,840 --> 00:04:18,160
python and that's all nice but

00:04:15,439 --> 00:04:21,199
no i want to reinvent the wheel so i

00:04:18,160 --> 00:04:24,000
created pirate

00:04:21,199 --> 00:04:25,680
it's on github you can download it it's

00:04:24,000 --> 00:04:28,919
it's a ray tracer and the

00:04:25,680 --> 00:04:30,800
image generator you need at least python

00:04:28,919 --> 00:04:33,759
3.5

00:04:30,800 --> 00:04:35,360
and i had some things in mind this is

00:04:33,759 --> 00:04:39,199
what will come in future

00:04:35,360 --> 00:04:41,040
is not yet all um working so i want

00:04:39,199 --> 00:04:42,479
high quality rate raising in the jupiter

00:04:41,040 --> 00:04:44,639
notebook i want

00:04:42,479 --> 00:04:46,000
to use it for teaching computer graphics

00:04:44,639 --> 00:04:49,680
and ray tracing

00:04:46,000 --> 00:04:53,759
concepts i i want to use these concepts

00:04:49,680 --> 00:04:56,400
to visualize geodata using using python

00:04:53,759 --> 00:04:58,479
including some things like oak trees

00:04:56,400 --> 00:05:01,840
large point clouds etc

00:04:58,479 --> 00:05:02,400
and also i have focus on large 3d saturn

00:05:01,840 --> 00:05:05,600
models

00:05:02,400 --> 00:05:07,120
we actually used a modified version of

00:05:05,600 --> 00:05:10,320
pirate already

00:05:07,120 --> 00:05:11,360
to render large 3d city models i'm also

00:05:10,320 --> 00:05:14,639
not going into

00:05:11,360 --> 00:05:16,960
that at the moment and also

00:05:14,639 --> 00:05:19,039
we can use openstreetmap data creating

00:05:16,960 --> 00:05:21,520
maps out of it

00:05:19,039 --> 00:05:24,080
if you're interested you can contact me

00:05:21,520 --> 00:05:26,000
and i can show you how it was done

00:05:24,080 --> 00:05:28,240
and of course the server side rendering

00:05:26,000 --> 00:05:30,000
that's that's um

00:05:28,240 --> 00:05:31,840
one of the most important things but of

00:05:30,000 --> 00:05:35,680
course the last thing that

00:05:31,840 --> 00:05:38,800
i want to have fun programming graphics

00:05:35,680 --> 00:05:39,199
so installation is quite easy i don't

00:05:38,800 --> 00:05:41,520
have

00:05:39,199 --> 00:05:43,039
a conda installation yet i only have a

00:05:41,520 --> 00:05:45,280
pip installation

00:05:43,039 --> 00:05:46,400
you can also use conda of course and use

00:05:45,280 --> 00:05:49,120
pip and

00:05:46,400 --> 00:05:49,600
it has no dependencies so you just

00:05:49,120 --> 00:05:53,280
install

00:05:49,600 --> 00:05:56,560
pirate pip install pi rt

00:05:53,280 --> 00:05:59,120
and it would work without

00:05:56,560 --> 00:06:01,440
any modules but i highly recommend to

00:05:59,120 --> 00:06:03,600
have numpy and pillow

00:06:01,440 --> 00:06:06,160
if you don't have numpy or pillow you

00:06:03,600 --> 00:06:08,960
can still use it but you can't really

00:06:06,160 --> 00:06:09,440
create images out of it so you just can

00:06:08,960 --> 00:06:12,720
create

00:06:09,440 --> 00:06:15,280
arrays with rgb values

00:06:12,720 --> 00:06:16,080
so at least i recommend numpy and pillow

00:06:15,280 --> 00:06:19,840
as minimal

00:06:16,080 --> 00:06:20,560
installation so let me show you how this

00:06:19,840 --> 00:06:23,759
works

00:06:20,560 --> 00:06:26,000
after uh importing some

00:06:23,759 --> 00:06:26,800
stuff here i will explain that in an

00:06:26,000 --> 00:06:30,240
instant

00:06:26,800 --> 00:06:30,800
live you can create a so-called rgb

00:06:30,240 --> 00:06:32,720
image

00:06:30,800 --> 00:06:34,080
and that's basically just a virtual

00:06:32,720 --> 00:06:37,039
frame buffer

00:06:34,080 --> 00:06:38,400
so you have a this this frame buffer

00:06:37,039 --> 00:06:41,280
where you can put pixels

00:06:38,400 --> 00:06:41,840
in it it's internally it's just a numpy

00:06:41,280 --> 00:06:45,039
array

00:06:41,840 --> 00:06:46,080
so or or a python array if you don't

00:06:45,039 --> 00:06:49,360
have numpy

00:06:46,080 --> 00:06:51,440
and then you can put the pixels in there

00:06:49,360 --> 00:06:52,880
you could also do that manually you

00:06:51,440 --> 00:06:55,520
could get this array

00:06:52,880 --> 00:06:56,560
and do your stuff with with numpy for

00:06:55,520 --> 00:06:58,639
example

00:06:56,560 --> 00:06:59,840
um but that's not the primary goal so

00:06:58,639 --> 00:07:03,199
there are some

00:06:59,840 --> 00:07:04,560
some functions or methods like draw

00:07:03,199 --> 00:07:08,000
point draw circle

00:07:04,560 --> 00:07:09,039
etc and you can you can then draw your

00:07:08,000 --> 00:07:12,160
things

00:07:09,039 --> 00:07:14,240
um internally it's all done over vectors

00:07:12,160 --> 00:07:17,599
so for colors you have a

00:07:14,240 --> 00:07:20,479
three dimensional vector with rgb values

00:07:17,599 --> 00:07:21,599
those are between 0 and 1. it's not

00:07:20,479 --> 00:07:25,599
between

00:07:21,599 --> 00:07:26,560
0 and 255 so we in theory we can have

00:07:25,599 --> 00:07:30,400
better quality

00:07:26,560 --> 00:07:33,520
than 8 bit per pixel and

00:07:30,400 --> 00:07:34,080
position is a two-dimensional vector um

00:07:33,520 --> 00:07:37,360
would be

00:07:34,080 --> 00:07:40,160
just a coordinate of of our um

00:07:37,360 --> 00:07:40,960
virtual frame buffer here and then you

00:07:40,160 --> 00:07:42,800
just call

00:07:40,960 --> 00:07:45,199
image frame buffer or you just call

00:07:42,800 --> 00:07:47,759
image intubated notebook and if you have

00:07:45,199 --> 00:07:51,199
pillow installed you will see

00:07:47,759 --> 00:07:54,400
the image so i could show this using

00:07:51,199 --> 00:07:55,360
um this presentation but i prefer to

00:07:54,400 --> 00:07:58,639
show you

00:07:55,360 --> 00:08:01,840
that live so let's switch to jupiter

00:07:58,639 --> 00:08:02,800
um the source code will be actually it

00:08:01,840 --> 00:08:04,720
is already a

00:08:02,800 --> 00:08:07,199
version there at the moment but i will

00:08:04,720 --> 00:08:08,080
update if if i do some changes in the

00:08:07,199 --> 00:08:11,120
code

00:08:08,080 --> 00:08:13,680
so it will be located git upcom martin

00:08:11,120 --> 00:08:16,720
kristen europison2020

00:08:13,680 --> 00:08:18,319
this link is also in the in the room on

00:08:16,720 --> 00:08:21,759
discord

00:08:18,319 --> 00:08:22,479
so let me start it by showing you

00:08:21,759 --> 00:08:26,000
something

00:08:22,479 --> 00:08:29,280
um i had the link here from

00:08:26,000 --> 00:08:31,520
github of the project you can

00:08:29,280 --> 00:08:32,320
check this one you can clone this one

00:08:31,520 --> 00:08:35,599
for example

00:08:32,320 --> 00:08:36,880
i i did that it's an alternative way if

00:08:35,599 --> 00:08:39,279
you want to install it

00:08:36,880 --> 00:08:42,880
using pip you can install that or you

00:08:39,279 --> 00:08:42,880
can just go to the source code

00:08:43,599 --> 00:08:50,880
clone this repository i already did that

00:08:47,680 --> 00:08:54,080
i called it pirate so i start

00:08:50,880 --> 00:08:58,560
let me move this one

00:08:54,080 --> 00:09:00,560
i start um jupiter lab

00:08:58,560 --> 00:09:02,399
i could also start a jupiter notebook

00:09:00,560 --> 00:09:05,600
doesn't really matter

00:09:02,399 --> 00:09:10,720
and so far this works

00:09:05,600 --> 00:09:10,720
i will go not really to full screen just

00:09:10,800 --> 00:09:17,120
yeah 125 percent that's okay so

00:09:14,160 --> 00:09:18,640
um inside there you you would see the

00:09:17,120 --> 00:09:21,279
source code of pirate

00:09:18,640 --> 00:09:22,399
um that's that's here so that's also if

00:09:21,279 --> 00:09:25,680
you want to develop

00:09:22,399 --> 00:09:27,519
something using pirate you have for

00:09:25,680 --> 00:09:31,279
example

00:09:27,519 --> 00:09:34,720
maths here you have the vector3 class

00:09:31,279 --> 00:09:36,560
and and you also see

00:09:34,720 --> 00:09:37,839
the code here and you can edit the code

00:09:36,560 --> 00:09:40,880
and you could develop

00:09:37,839 --> 00:09:41,839
that and at the end you can could make a

00:09:40,880 --> 00:09:45,279
pull request

00:09:41,839 --> 00:09:48,720
and i i would maybe i would

00:09:45,279 --> 00:09:50,160
allow this one okay the

00:09:48,720 --> 00:09:52,720
most important thing i have at the

00:09:50,160 --> 00:09:56,160
moment no other dependencies

00:09:52,720 --> 00:09:59,120
just nothing it's pure pyson

00:09:56,160 --> 00:10:00,399
so what i do is i just create again this

00:09:59,120 --> 00:10:04,560
virtual frame buffer

00:10:00,399 --> 00:10:07,839
so um i would just uh import

00:10:04,560 --> 00:10:11,279
rgb image from the pi rt render

00:10:07,839 --> 00:10:14,320
and i import the wek2 and vx3 and

00:10:11,279 --> 00:10:16,000
i used a random module to some to draw

00:10:14,320 --> 00:10:19,120
some random points

00:10:16,000 --> 00:10:20,959
so let me execute that one

00:10:19,120 --> 00:10:22,640
for some reasons my keyboard wasn't

00:10:20,959 --> 00:10:25,440
working um

00:10:22,640 --> 00:10:27,440
so uh i create a virtual framework for i

00:10:25,440 --> 00:10:28,800
do it rather small you can do what you

00:10:27,440 --> 00:10:33,440
want here

00:10:28,800 --> 00:10:36,320
um i create a rgb image 320 240 that's a

00:10:33,440 --> 00:10:37,200
really small resolution i clear it with

00:10:36,320 --> 00:10:39,360
black

00:10:37,200 --> 00:10:41,440
no not really black but i could do

00:10:39,360 --> 00:10:44,720
completely black for example

00:10:41,440 --> 00:10:47,839
and my for some reasons

00:10:44,720 --> 00:10:51,839
i messed up my keyboard i

00:10:47,839 --> 00:10:55,600
have to manually execute that okay

00:10:51,839 --> 00:10:56,079
so what i do now here is i i do a for

00:10:55,600 --> 00:10:58,839
loop

00:10:56,079 --> 00:11:01,440
in the range of 5000 and i draw my

00:10:58,839 --> 00:11:03,600
points at the position and color

00:11:01,440 --> 00:11:04,800
and the position is as i said before

00:11:03,600 --> 00:11:08,880
just a random

00:11:04,800 --> 00:11:11,519
integer between 0 and the width

00:11:08,880 --> 00:11:12,320
and also a random integer between 0 and

00:11:11,519 --> 00:11:15,200
the height

00:11:12,320 --> 00:11:17,760
this -1 of course is because we have one

00:11:15,200 --> 00:11:21,680
too much from zero to you know that

00:11:17,760 --> 00:11:24,160
and color is a random value rgb between

00:11:21,680 --> 00:11:26,320
zero and one each component so we have

00:11:24,160 --> 00:11:29,680
completely random colors

00:11:26,320 --> 00:11:32,399
so i executed that already and then with

00:11:29,680 --> 00:11:35,120
image frame buffer i can display that

00:11:32,399 --> 00:11:35,680
in the jupyter notebook and hopefully

00:11:35,120 --> 00:11:38,240
you can

00:11:35,680 --> 00:11:38,240
see that

00:11:39,040 --> 00:11:45,519
and see all the points in different

00:11:42,079 --> 00:11:48,160
colors so if you don't see that

00:11:45,519 --> 00:11:50,000
i could actually increase the point size

00:11:48,160 --> 00:11:53,040
here

00:11:50,000 --> 00:11:56,800
and you see

00:11:53,040 --> 00:12:00,160
more points now with bigger bigger size

00:11:56,800 --> 00:12:02,000
so i have here some message from zoom

00:12:00,160 --> 00:12:05,200
okay that was probably the reason

00:12:02,000 --> 00:12:08,399
why my keyboard is not working

00:12:05,200 --> 00:12:12,240
so now it should go again perfect so

00:12:08,399 --> 00:12:15,600
okay so um what i do now is i

00:12:12,240 --> 00:12:19,600
i draw some lines um i

00:12:15,600 --> 00:12:21,360
uh do a range 0 to 100 and

00:12:19,600 --> 00:12:22,959
oh it's still not working but it doesn't

00:12:21,360 --> 00:12:26,560
matter and you see a live

00:12:22,959 --> 00:12:28,000
update now um you see the the lines are

00:12:26,560 --> 00:12:30,480
drawn over this

00:12:28,000 --> 00:12:31,680
image before this is working because i

00:12:30,480 --> 00:12:34,880
created this

00:12:31,680 --> 00:12:37,279
this frame buffer before and um

00:12:34,880 --> 00:12:38,160
i can use it again so if i create one

00:12:37,279 --> 00:12:41,200
frame buffer

00:12:38,160 --> 00:12:43,839
it's reusable um and

00:12:41,200 --> 00:12:44,800
you can you can draw your things inside

00:12:43,839 --> 00:12:47,440
of course if you

00:12:44,800 --> 00:12:48,480
if i want to create more frame buffer i

00:12:47,440 --> 00:12:50,320
can do that too

00:12:48,480 --> 00:12:51,760
and then i have to give each frame

00:12:50,320 --> 00:12:53,760
buffer a name so

00:12:51,760 --> 00:12:54,800
i don't draw to this one i draw to

00:12:53,760 --> 00:12:57,519
another one

00:12:54,800 --> 00:12:58,320
i will show that in an instant i also

00:12:57,519 --> 00:13:02,000
have to

00:12:58,320 --> 00:13:05,360
set update and i can specify

00:13:02,000 --> 00:13:06,639
recommended frames per second the number

00:13:05,360 --> 00:13:09,279
of frames per second

00:13:06,639 --> 00:13:11,920
you see here i have some debug output we

00:13:09,279 --> 00:13:14,880
see it was almost a 30.

00:13:11,920 --> 00:13:15,839
it's not possible to have this exactly

00:13:14,880 --> 00:13:18,639
for

00:13:15,839 --> 00:13:20,800
obvious reasons but by the way this

00:13:18,639 --> 00:13:22,560
doesn't work on firefox at the moment

00:13:20,800 --> 00:13:25,760
that's unknown bug

00:13:22,560 --> 00:13:26,320
i will fix that at one point at the

00:13:25,760 --> 00:13:29,519
moment

00:13:26,320 --> 00:13:32,720
i recommend using chrome

00:13:29,519 --> 00:13:35,920
so i can also load images i have

00:13:32,720 --> 00:13:38,480
some images in in this folder here a

00:13:35,920 --> 00:13:41,120
world map

00:13:38,480 --> 00:13:42,320
can show that quickly here in data i

00:13:41,120 --> 00:13:44,959
have some

00:13:42,320 --> 00:13:45,440
world map and that's just jpeg of the

00:13:44,959 --> 00:13:47,360
world

00:13:45,440 --> 00:13:49,120
from natural earth it's public domain

00:13:47,360 --> 00:13:51,519
data set so i don't even

00:13:49,120 --> 00:13:52,399
have to say from where it is but i just

00:13:51,519 --> 00:13:54,720
said it

00:13:52,399 --> 00:13:56,240
so no problem and now you see i create a

00:13:54,720 --> 00:13:59,360
frame buffer with the name

00:13:56,240 --> 00:14:00,160
world and from now on if i want to

00:13:59,360 --> 00:14:02,399
update that

00:14:00,160 --> 00:14:03,839
i have to tell okay update the frame

00:14:02,399 --> 00:14:06,720
buffer world

00:14:03,839 --> 00:14:08,240
and i do just for fun i i draw a circle

00:14:06,720 --> 00:14:11,920
here

00:14:08,240 --> 00:14:14,880
and we see in the middle um 300 150

00:14:11,920 --> 00:14:16,399
there is a circle i could also um create

00:14:14,880 --> 00:14:20,240
some

00:14:16,399 --> 00:14:20,240
some random circles 100

00:14:20,399 --> 00:14:26,800
so we see this this is actually

00:14:23,440 --> 00:14:29,600
working and we see these random circles

00:14:26,800 --> 00:14:30,399
so don't worry i will not create a covet

00:14:29,600 --> 00:14:33,600
map

00:14:30,399 --> 00:14:37,360
we saw enough of those so i decided

00:14:33,600 --> 00:14:39,440
decided to download earthquake data from

00:14:37,360 --> 00:14:42,560
the usgs

00:14:39,440 --> 00:14:45,120
so that's actually geojson file

00:14:42,560 --> 00:14:46,959
on the server and here it's it's

00:14:45,120 --> 00:14:49,519
explained what it is there's

00:14:46,959 --> 00:14:52,240
tons of metadata inside and the most

00:14:49,519 --> 00:14:54,480
important part is the geometry of course

00:14:52,240 --> 00:14:55,680
where you have the longitude latitude

00:14:54,480 --> 00:14:58,079
and depth

00:14:55,680 --> 00:14:59,199
but we are in 2d so i don't really care

00:14:58,079 --> 00:15:02,560
about the

00:14:59,199 --> 00:15:04,639
elevation of this event and the

00:15:02,560 --> 00:15:07,839
magnitude of the earthquake

00:15:04,639 --> 00:15:08,240
so if it's earthquake 7 that would be

00:15:07,839 --> 00:15:11,920
not

00:15:08,240 --> 00:15:12,240
not very nice to see so let's see what's

00:15:11,920 --> 00:15:15,040
that's

00:15:12,240 --> 00:15:15,600
actually live i didn't check it um this

00:15:15,040 --> 00:15:17,760
morning

00:15:15,600 --> 00:15:20,240
so i don't really know what will happen

00:15:17,760 --> 00:15:23,199
if there was a bigger earthquake or not

00:15:20,240 --> 00:15:23,519
i will download your old earthquake data

00:15:23,199 --> 00:15:26,399
um

00:15:23,519 --> 00:15:27,519
from the last two and a half weeks i

00:15:26,399 --> 00:15:31,199
download that as

00:15:27,519 --> 00:15:33,440
a file called earthquakes geojson so

00:15:31,199 --> 00:15:35,199
let me do that so there should be a file

00:15:33,440 --> 00:15:38,480
now

00:15:35,199 --> 00:15:41,759
earthquakes geojson so that worked

00:15:38,480 --> 00:15:45,279
and i load it as json this is

00:15:41,759 --> 00:15:46,160
basic python and then i load the image

00:15:45,279 --> 00:15:49,279
again

00:15:46,160 --> 00:15:51,839
and i go through this json file and i

00:15:49,279 --> 00:15:54,000
get all the coordinates out of it and i

00:15:51,839 --> 00:15:56,480
convert the longitude and latitude to

00:15:54,000 --> 00:15:57,199
pixels that's done here with using the

00:15:56,480 --> 00:15:59,920
coordinate

00:15:57,199 --> 00:16:01,920
and converting it to simple pixels in

00:15:59,920 --> 00:16:04,639
the range zero to

00:16:01,920 --> 00:16:07,279
the width and height and then if the

00:16:04,639 --> 00:16:10,320
magnitude is bigger than 4.5

00:16:07,279 --> 00:16:12,880
i draw it to a circle

00:16:10,320 --> 00:16:14,240
i could reduce that to 2 but i don't

00:16:12,880 --> 00:16:16,079
really want too many

00:16:14,240 --> 00:16:17,279
earthquakes because there are many small

00:16:16,079 --> 00:16:20,320
earthquakes

00:16:17,279 --> 00:16:23,839
happening and at the end i display this

00:16:20,320 --> 00:16:24,320
image so let's just do that and we see

00:16:23,839 --> 00:16:28,720
here

00:16:24,320 --> 00:16:29,360
are the earthquakes of the past two and

00:16:28,720 --> 00:16:32,800
a half

00:16:29,360 --> 00:16:33,519
weeks of course um it's not really a

00:16:32,800 --> 00:16:35,680
nice

00:16:33,519 --> 00:16:37,360
graphic you can't really use the mouse

00:16:35,680 --> 00:16:37,839
pointer and get more information like

00:16:37,360 --> 00:16:41,120
this

00:16:37,839 --> 00:16:41,519
it's really just a plot this one i could

00:16:41,120 --> 00:16:45,040
do

00:16:41,519 --> 00:16:47,440
a server side with a pirate

00:16:45,040 --> 00:16:48,160
and and do an update every hour for

00:16:47,440 --> 00:16:51,680
example

00:16:48,160 --> 00:16:52,240
that would already work okay in the last

00:16:51,680 --> 00:16:54,480
talk

00:16:52,240 --> 00:16:55,279
we we heard a lot about procedural

00:16:54,480 --> 00:16:58,399
images

00:16:55,279 --> 00:17:00,000
this is also one of my favorite topics i

00:16:58,399 --> 00:17:02,880
will not explain anymore

00:17:00,000 --> 00:17:03,759
what's what's noise we heard that in the

00:17:02,880 --> 00:17:07,520
last

00:17:03,759 --> 00:17:08,480
session so let me just do a basic

00:17:07,520 --> 00:17:11,760
introduction to

00:17:08,480 --> 00:17:16,839
procedural graphics again i create an

00:17:11,760 --> 00:17:18,319
arbitre rgb image the size is 256 by

00:17:16,839 --> 00:17:21,679
256.

00:17:18,319 --> 00:17:24,000
and then i

00:17:21,679 --> 00:17:25,280
create some stripes let me execute this

00:17:24,000 --> 00:17:27,360
first then i

00:17:25,280 --> 00:17:28,480
can explain you see the result is this

00:17:27,360 --> 00:17:30,960
one and

00:17:28,480 --> 00:17:32,559
such stripes can be easily done using a

00:17:30,960 --> 00:17:35,600
modular function

00:17:32,559 --> 00:17:36,400
i have a modular function in in pirate

00:17:35,600 --> 00:17:38,880
inside

00:17:36,400 --> 00:17:41,120
you all know with with python you can

00:17:38,880 --> 00:17:44,320
also do modulo using this percent

00:17:41,120 --> 00:17:47,919
operator i did this because

00:17:44,320 --> 00:17:50,720
this modular function uses um

00:17:47,919 --> 00:17:51,200
floats of course python supports floats

00:17:50,720 --> 00:17:53,200
too

00:17:51,200 --> 00:17:55,280
but you can easily mess up if you don't

00:17:53,200 --> 00:17:57,919
really use floats etc

00:17:55,280 --> 00:18:00,160
and i i did it for readability so it if

00:17:57,919 --> 00:18:02,799
you prefer this syntax is fine i

00:18:00,160 --> 00:18:04,160
i prefer this one i can read this better

00:18:02,799 --> 00:18:07,280
i don't know why

00:18:04,160 --> 00:18:09,679
i just don't like this

00:18:07,280 --> 00:18:12,400
syntax and this one is better portable

00:18:09,679 --> 00:18:16,559
to other languages such as c plus plus

00:18:12,400 --> 00:18:18,799
so this modular um and this 0.5 let me

00:18:16,559 --> 00:18:19,919
do a 0.25 just to show you the

00:18:18,799 --> 00:18:22,400
difference

00:18:19,919 --> 00:18:25,360
you see this one influences the the

00:18:22,400 --> 00:18:25,360
width of this

00:18:25,919 --> 00:18:31,280
lines and if i make 0.5

00:18:28,960 --> 00:18:32,799
i have even black and white and black

00:18:31,280 --> 00:18:36,160
and white i could of course do

00:18:32,799 --> 00:18:37,039
other colors i just set this to to black

00:18:36,160 --> 00:18:40,880
or to white

00:18:37,039 --> 00:18:43,919
like this um yeah so i can do the

00:18:40,880 --> 00:18:46,960
thing i can use y instead of x and then

00:18:43,919 --> 00:18:50,000
it would just look like that so you have

00:18:46,960 --> 00:18:51,919
horizontal lines here and now the big

00:18:50,000 --> 00:18:53,840
questions how can we combine that

00:18:51,919 --> 00:18:55,440
if i want to make a checkerboard eight

00:18:53,840 --> 00:18:58,240
by eight

00:18:55,440 --> 00:18:58,880
so like this and this no it's not and

00:18:58,240 --> 00:19:02,480
it's a

00:18:58,880 --> 00:19:05,600
xor so we do the same and

00:19:02,480 --> 00:19:09,039
i do the module operation here for the

00:19:05,600 --> 00:19:12,080
for the for vertical and horizontal

00:19:09,039 --> 00:19:14,320
lines and in between is an xor

00:19:12,080 --> 00:19:16,240
so if i execute that you see it's really

00:19:14,320 --> 00:19:18,160
a checkerboard starting with white black

00:19:16,240 --> 00:19:22,240
white black and so on

00:19:18,160 --> 00:19:25,280
and this already starts xor

00:19:22,240 --> 00:19:25,760
this is a perfect way to explain xor if

00:19:25,280 --> 00:19:28,000
i do

00:19:25,760 --> 00:19:29,600
by the way i never understand why pyson

00:19:28,000 --> 00:19:32,799
doesn't have this one but

00:19:29,600 --> 00:19:34,400
it doesn't matter um i do an or and you

00:19:32,799 --> 00:19:37,440
see if i do a regular or

00:19:34,400 --> 00:19:38,240
you see um i i get this pattern because

00:19:37,440 --> 00:19:41,440
it's

00:19:38,240 --> 00:19:43,360
this or this so it's it's that if i make

00:19:41,440 --> 00:19:46,080
an end for example

00:19:43,360 --> 00:19:48,400
you see the solution is of course just

00:19:46,080 --> 00:19:49,360
the combination of of the two so where

00:19:48,400 --> 00:19:52,400
the two

00:19:49,360 --> 00:19:56,000
lines um collide

00:19:52,400 --> 00:19:59,039
so that's the xor

00:19:56,000 --> 00:20:00,720
um and we see here we have checkerboard

00:19:59,039 --> 00:20:02,400
so that's that's an easy way to

00:20:00,720 --> 00:20:06,159
understand xor

00:20:02,400 --> 00:20:06,720
in a graphical way so i'm running out of

00:20:06,159 --> 00:20:10,000
time

00:20:06,720 --> 00:20:13,360
as expected it doesn't matter i create

00:20:10,000 --> 00:20:15,520
quickly a mandelbrot image um

00:20:13,360 --> 00:20:17,679
the formula for the mandelbrot you can

00:20:15,520 --> 00:20:18,799
find anywhere for example on wikipedia

00:20:17,679 --> 00:20:21,919
or whatever

00:20:18,799 --> 00:20:22,960
and it's a very simple algorithm you

00:20:21,919 --> 00:20:26,559
just have to implement

00:20:22,960 --> 00:20:30,400
this part basically and you have to

00:20:26,559 --> 00:20:34,159
to here this one means that i convert

00:20:30,400 --> 00:20:35,039
the pixels to to a number so zero zero

00:20:34,159 --> 00:20:38,720
is in the middle

00:20:35,039 --> 00:20:42,080
and it it goes uh from from zero to one

00:20:38,720 --> 00:20:44,480
and and and so on so that's

00:20:42,080 --> 00:20:45,120
just a conversion and then i put the

00:20:44,480 --> 00:20:49,600
result

00:20:45,120 --> 00:20:52,640
of this while loop to

00:20:49,600 --> 00:20:54,159
to the image so we see um the

00:20:52,640 --> 00:20:56,480
nothing happened because this is just

00:20:54,159 --> 00:20:59,760
the the function now i time it

00:20:56,480 --> 00:21:03,840
and i create this manual broad image

00:20:59,760 --> 00:21:08,080
and we see this took 1.5 seconds

00:21:03,840 --> 00:21:09,280
to to um display and to create and

00:21:08,080 --> 00:21:12,880
display it

00:21:09,280 --> 00:21:14,880
so uh that's okay i remember my first

00:21:12,880 --> 00:21:17,360
manual broad was a little bit smaller

00:21:14,880 --> 00:21:19,679
than this took about

00:21:17,360 --> 00:21:20,559
three to four minutes on a commodore

00:21:19,679 --> 00:21:24,240
amiga

00:21:20,559 --> 00:21:28,000
end of the 80s so this is still too slow

00:21:24,240 --> 00:21:29,280
so so we could use number for example to

00:21:28,000 --> 00:21:33,280
speed up up so i just

00:21:29,280 --> 00:21:35,440
use number make chit do the same here

00:21:33,280 --> 00:21:36,400
we see of course this while loop we will

00:21:35,440 --> 00:21:39,039
not be able to

00:21:36,400 --> 00:21:41,120
break down but of course we can we can

00:21:39,039 --> 00:21:44,640
still try what happens

00:21:41,120 --> 00:21:47,280
so i execute that

00:21:44,640 --> 00:21:49,840
one and then let's time it we remember

00:21:47,280 --> 00:21:53,200
before it took 1.5 seconds

00:21:49,840 --> 00:21:53,200
and now it takes

00:21:54,200 --> 00:21:59,840
686 milliseconds

00:21:56,640 --> 00:22:00,640
so i executed again we see now it only

00:21:59,840 --> 00:22:03,520
takes

00:22:00,640 --> 00:22:04,640
uh we only have 22. the problem is we

00:22:03,520 --> 00:22:06,960
have to compile it

00:22:04,640 --> 00:22:08,799
one time and the second time we execute

00:22:06,960 --> 00:22:13,440
it it's really fast so we are at

00:22:08,799 --> 00:22:16,799
21 seconds and so we can also do noise

00:22:13,440 --> 00:22:18,480
um simplex noise for example i will go

00:22:16,799 --> 00:22:20,080
through this a little bit fast we saw

00:22:18,480 --> 00:22:23,679
that in the previous talk

00:22:20,080 --> 00:22:28,000
you can really create many nice things

00:22:23,679 --> 00:22:28,960
using using these simplex noise or noise

00:22:28,000 --> 00:22:32,400
functions

00:22:28,960 --> 00:22:34,159
like the pearling noise but one thing i

00:22:32,400 --> 00:22:36,559
want to mention before i

00:22:34,159 --> 00:22:39,679
stop for the questions you can also

00:22:36,559 --> 00:22:42,000
create movies using moviepie

00:22:39,679 --> 00:22:44,320
let me just quickly explain that there

00:22:42,000 --> 00:22:44,320
is a

00:22:44,400 --> 00:22:48,400
function um called for example make

00:22:46,960 --> 00:22:50,240
frame just a function you can name it

00:22:48,400 --> 00:22:51,760
like you want but in there there is a

00:22:50,240 --> 00:22:54,720
time and then

00:22:51,760 --> 00:22:56,559
you draw something and time should be a

00:22:54,720 --> 00:22:59,840
function of that so i draw just

00:22:56,559 --> 00:23:01,760
draw a circle and i use time to to use

00:22:59,840 --> 00:23:04,720
the radius of the circle

00:23:01,760 --> 00:23:05,440
so i do that and now in background it

00:23:04,720 --> 00:23:08,880
creates this

00:23:05,440 --> 00:23:11,520
gif and if i display that we see

00:23:08,880 --> 00:23:12,400
this animation so i can even create

00:23:11,520 --> 00:23:15,440
animations

00:23:12,400 --> 00:23:18,080
in the jupyter notebook quite simple but

00:23:15,440 --> 00:23:19,360
one last thing i do this quickly is the

00:23:18,080 --> 00:23:22,640
ray tracing part

00:23:19,360 --> 00:23:25,679
you can create scenes you can create

00:23:22,640 --> 00:23:28,080
some things and now i start rendering

00:23:25,679 --> 00:23:28,720
this is really pure python it takes

00:23:28,080 --> 00:23:31,760
about

00:23:28,720 --> 00:23:35,120
10 seconds and

00:23:31,760 --> 00:23:36,320
then it it should be finished maybe

00:23:35,120 --> 00:23:39,039
because zoom runs

00:23:36,320 --> 00:23:40,799
it takes my cpu power i see my cpu runs

00:23:39,039 --> 00:23:44,799
at 30 percent at the moment

00:23:40,799 --> 00:23:47,760
so it took me 12 seconds to create

00:23:44,799 --> 00:23:48,799
this image here and um this is really

00:23:47,760 --> 00:23:52,240
pure python

00:23:48,799 --> 00:23:55,840
we also tried this to to accelerate this

00:23:52,240 --> 00:23:56,960
and you can actually we used fire gl in

00:23:55,840 --> 00:24:00,240
background and

00:23:56,960 --> 00:24:02,240
we had this in in less than we can

00:24:00,240 --> 00:24:04,240
display this in real time actually using

00:24:02,240 --> 00:24:06,720
these things but i want to keep pirate

00:24:04,240 --> 00:24:09,679
at the moment

00:24:06,720 --> 00:24:10,400
pure pisces okay so thank you very much

00:24:09,679 --> 00:24:12,799
and

00:24:10,400 --> 00:24:15,679
i'm ready for questions if the time

00:24:12,799 --> 00:24:19,120
still is sufficient

00:24:15,679 --> 00:24:22,159
so i don't see any questions in the q a

00:24:19,120 --> 00:24:22,880
of the of the webinar but i have a

00:24:22,159 --> 00:24:26,159
question is

00:24:22,880 --> 00:24:27,760
is it possible to to run this as part of

00:24:26,159 --> 00:24:31,520
a web server as well because

00:24:27,760 --> 00:24:33,440
you just focus on the on the notebooks

00:24:31,520 --> 00:24:35,520
but let's say you want to dynamically

00:24:33,440 --> 00:24:37,360
generate a gif or maybe you want to

00:24:35,520 --> 00:24:38,880
write a bot for discord let's say and

00:24:37,360 --> 00:24:39,520
you want to produce gifs that are

00:24:38,880 --> 00:24:41,840
animated

00:24:39,520 --> 00:24:42,799
with that work yes of course you just

00:24:41,840 --> 00:24:45,200
have to

00:24:42,799 --> 00:24:46,480
just skip this one this is of course

00:24:45,200 --> 00:24:49,600
this only runs in

00:24:46,480 --> 00:24:52,720
in jupiter but um for example um

00:24:49,600 --> 00:24:53,200
if you write something actually you have

00:24:52,720 --> 00:24:55,440
what you

00:24:53,200 --> 00:24:58,000
what you get out from pirate if you have

00:24:55,440 --> 00:25:02,640
numpy installed you get a numpy array

00:24:58,000 --> 00:25:05,360
rgb array so let me show that quickly

00:25:02,640 --> 00:25:06,559
this is not the best example but i do it

00:25:05,360 --> 00:25:11,760
anyways so

00:25:06,559 --> 00:25:14,320
um oh here plus so i do image

00:25:11,760 --> 00:25:15,919
data actually i should execute that

00:25:14,320 --> 00:25:18,240
quickly because

00:25:15,919 --> 00:25:21,120
um and you see this one is just numpy

00:25:18,240 --> 00:25:23,279
array filled with rgb values it's a uint

00:25:21,120 --> 00:25:25,760
eight so it's it's eight bit per pixel

00:25:23,279 --> 00:25:28,480
now it's all black because um yeah the

00:25:25,760 --> 00:25:30,960
most things are black at the corner

00:25:28,480 --> 00:25:32,080
so that's you can you can just say if

00:25:30,960 --> 00:25:34,799
you can save that

00:25:32,080 --> 00:25:36,480
and this is really doable on the server

00:25:34,799 --> 00:25:37,840
you can create a service you don't need

00:25:36,480 --> 00:25:40,080
a gui for anything

00:25:37,840 --> 00:25:41,840
this is just for let me say debug

00:25:40,080 --> 00:25:43,600
purposes to display this image in

00:25:41,840 --> 00:25:46,799
jupiter notebook so you could

00:25:43,600 --> 00:25:49,360
create um anything on a web server

00:25:46,799 --> 00:25:51,840
okay excellent thank you then we have

00:25:49,360 --> 00:25:54,000
two more questions i think we can take

00:25:51,840 --> 00:25:56,799
at least one so first question is do you

00:25:54,000 --> 00:25:58,880
need a gpu for ray tracing

00:25:56,799 --> 00:26:00,080
no in the in the current version which

00:25:58,880 --> 00:26:03,520
is on github we

00:26:00,080 --> 00:26:04,880
we don't have that we did it this in a

00:26:03,520 --> 00:26:08,240
project

00:26:04,880 --> 00:26:08,640
we used um open from amd if there is

00:26:08,240 --> 00:26:12,080
some

00:26:08,640 --> 00:26:15,200
some toolkit called open

00:26:12,080 --> 00:26:18,320
fire or something and

00:26:15,200 --> 00:26:22,559
and they have a rate racing engine on

00:26:18,320 --> 00:26:23,120
on gpu and we use that but the problem

00:26:22,559 --> 00:26:26,080
is

00:26:23,120 --> 00:26:26,559
we have then 1000 dependencies and we

00:26:26,080 --> 00:26:28,960
have

00:26:26,559 --> 00:26:31,039
for example in windows we have two dlls

00:26:28,960 --> 00:26:33,039
on on mac we have diff for each

00:26:31,039 --> 00:26:34,720
system we have different one and it's

00:26:33,039 --> 00:26:37,600
really uh really really messy so

00:26:34,720 --> 00:26:39,520
we never released that in in github and

00:26:37,600 --> 00:26:42,080
for now it's just pure python

00:26:39,520 --> 00:26:43,679
and we don't use any dependencies so at

00:26:42,080 --> 00:26:46,159
the moment is cpu only

00:26:43,679 --> 00:26:46,720
this version okay thank you very much so

00:26:46,159 --> 00:26:48,640
there

00:26:46,720 --> 00:26:49,760
there's one more question but i would

00:26:48,640 --> 00:26:53,120
like to defer that

00:26:49,760 --> 00:26:58,400
to the talk channel and so let's

00:26:53,120 --> 00:26:58,400
have your applause thank you thank you

00:27:03,360 --> 00:27:07,559
so thank you very much and now we're

00:27:04,880 --> 00:27:10,559
going gonna have a message from our

00:27:07,559 --> 00:27:10,559

YouTube URL: https://www.youtube.com/watch?v=bjFkuPXMmEc


