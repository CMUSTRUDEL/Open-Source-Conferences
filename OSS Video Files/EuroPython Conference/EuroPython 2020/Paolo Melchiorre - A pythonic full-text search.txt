Title: Paolo Melchiorre - A pythonic full-text search
Publication date: 2020-09-15
Playlist: EuroPython 2020
Description: 
	"A pythonic full-text search
EuroPython 2020 - Talk - 2020-07-24 - Microsoft
Online

By Paolo Melchiorre

A full-text search on a website is the best way to make its contents easily accessible to users because it returns better results and is in fact used in online search engines or social networks.

The implementation of full-text search can be complex and many adopt the strategy of using dedicated search engines in addition to the database, but in most cases this strategy turns out to be a big problem of architecture and performance.

In this talk we'll see a pythonic way to implement full-text search on a website using only Django and PostgreSQL, taking advantage of all the innovations introduced in latest years, and we'll analyse the problems of using additional search engines with examples deriving from my experience (e.g. djangoproject.com or readthedocs.org).

Through this talk you can learn how to add a full-text search on your website, if it's based on Django and PostgreSQL, or you can learn how to update the search function of your website if you use other search engines.

More info on https://www.paulox.net/2020/07/23/europython-2020/



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2020.europython.eu/events/speaker-release-agreement/

    "
Captions: 
	00:00:06,160 --> 00:00:09,440
okay so

00:00:07,200 --> 00:00:11,280
paulo is going to talk to us about you

00:00:09,440 --> 00:00:14,240
know how to build a full text search

00:00:11,280 --> 00:00:16,800
engine using only django and

00:00:14,240 --> 00:00:18,960
postgres so i'm going to let you start

00:00:16,800 --> 00:00:21,680
all the best

00:00:18,960 --> 00:00:24,640
so hello everyone i'm very happy to be

00:00:21,680 --> 00:00:27,359
here with you at your python 2020

00:00:24,640 --> 00:00:29,519
i want to thank all the organizers for

00:00:27,359 --> 00:00:31,279
making this online edition possible and

00:00:29,519 --> 00:00:32,640
thank you all for attending from all

00:00:31,279 --> 00:00:34,640
over the world

00:00:32,640 --> 00:00:36,239
if you're asking yourself what is a

00:00:34,640 --> 00:00:39,680
pythonic vortex search

00:00:36,239 --> 00:00:39,680
i'll show you an example

00:00:40,000 --> 00:00:43,360
this is the search function in the

00:00:41,440 --> 00:00:44,640
django website

00:00:43,360 --> 00:00:48,000
how many of you have searched

00:00:44,640 --> 00:00:51,039
information on it in the past

00:00:48,000 --> 00:00:52,640
i think out of you the search function

00:00:51,039 --> 00:00:55,360
is based only on postgres

00:00:52,640 --> 00:00:56,719
and jungle itself and i was the one who

00:00:55,360 --> 00:01:01,359
built it

00:00:56,719 --> 00:01:01,359
so the next question is who am i

00:01:01,520 --> 00:01:05,600
i'm paul mccurry and i'm ceo of the 20

00:01:04,879 --> 00:01:07,760
tab

00:01:05,600 --> 00:01:09,280
is a platonic software company based in

00:01:07,760 --> 00:01:12,960
rome

00:01:09,280 --> 00:01:15,680
for which i work remotely

00:01:12,960 --> 00:01:16,960
i'm a software engineer and a long time

00:01:15,680 --> 00:01:20,479
python weekend

00:01:16,960 --> 00:01:22,159
developer after using django for a few

00:01:20,479 --> 00:01:24,479
years i became a contributor to the

00:01:22,159 --> 00:01:26,640
project

00:01:24,479 --> 00:01:28,880
and now i want to try to explain a bit

00:01:26,640 --> 00:01:32,720
more about the title of this talk

00:01:28,880 --> 00:01:32,720
apatonic vortex search

00:01:33,920 --> 00:01:37,520
i think you can read the definition of

00:01:35,600 --> 00:01:41,040
phytonic by entering

00:01:37,520 --> 00:01:43,200
import these in the python interpreter

00:01:41,040 --> 00:01:45,840
these are only the first principles of

00:01:43,200 --> 00:01:47,840
that zen of python

00:01:45,840 --> 00:01:49,680
the most important for me is the tool

00:01:47,840 --> 00:01:55,840
one and i think it's also the

00:01:49,680 --> 00:01:58,640
most difficult to follow

00:01:55,840 --> 00:02:01,040
full text search refers to technique for

00:01:58,640 --> 00:02:04,240
searching a computer store document

00:02:01,040 --> 00:02:06,399
in a full text database

00:02:04,240 --> 00:02:07,360
there are a lot of search engines that

00:02:06,399 --> 00:02:12,000
already provide

00:02:07,360 --> 00:02:12,000
full text search as in this definition

00:02:12,959 --> 00:02:16,000
the most popular search engine library

00:02:15,440 --> 00:02:19,360
is

00:02:16,000 --> 00:02:22,400
a passive scene an open source software

00:02:19,360 --> 00:02:25,200
written in java based on the scene there

00:02:22,400 --> 00:02:29,280
are two very popular search engines

00:02:25,200 --> 00:02:32,400
that i used in the past in some projects

00:02:29,280 --> 00:02:35,280
solar is the first one and it's part of

00:02:32,400 --> 00:02:38,319
the apache software foundation

00:02:35,280 --> 00:02:41,280
and elasticsearch is a product of the

00:02:38,319 --> 00:02:41,280
elastic company

00:02:41,760 --> 00:02:44,800
the last big project where i use one of

00:02:44,239 --> 00:02:48,400
them

00:02:44,800 --> 00:02:51,519
is dogs italian

00:02:48,400 --> 00:02:54,879
noxita is an italian government website

00:02:51,519 --> 00:02:56,879
when to find public documents

00:02:54,879 --> 00:03:00,560
i worked in this project with my

00:02:56,879 --> 00:03:00,560
colleagues to improve the search

00:03:02,840 --> 00:03:06,159
function

00:03:04,080 --> 00:03:07,280
the hood docks italia is a fork of the

00:03:06,159 --> 00:03:11,120
open source project

00:03:07,280 --> 00:03:14,080
ready dogs so as the original project

00:03:11,120 --> 00:03:14,720
it's a django-based platform and it

00:03:14,080 --> 00:03:18,239
requires

00:03:14,720 --> 00:03:21,519
a lot of python packages

00:03:18,239 --> 00:03:24,560
to access the electric search instance

00:03:21,519 --> 00:03:24,560
asking for results

00:03:25,040 --> 00:03:28,080
of course the search function is working

00:03:26,799 --> 00:03:30,840
very well now

00:03:28,080 --> 00:03:33,840
but we can consider this a simple

00:03:30,840 --> 00:03:33,840
solution

00:03:34,640 --> 00:03:39,280
we can say various things about external

00:03:37,280 --> 00:03:42,480
engines

00:03:39,280 --> 00:03:44,319
on the good side they are very popular

00:03:42,480 --> 00:03:47,840
there are a lot of feature and you can

00:03:44,319 --> 00:03:50,560
find a lot of line resources about that

00:03:47,840 --> 00:03:52,720
on the website you always need a driver

00:03:50,560 --> 00:03:54,560
to use them from django

00:03:52,720 --> 00:03:56,879
you have to use their specific query

00:03:54,560 --> 00:04:00,319
language and it's common to have

00:03:56,879 --> 00:04:05,200
synchronization problem but let's go

00:04:00,319 --> 00:04:08,239
hides hope this is embarrassing

00:04:05,200 --> 00:04:08,879
joke side this something similar what

00:04:08,239 --> 00:04:11,200
happened

00:04:08,879 --> 00:04:12,879
in ecommerce when you find a product in

00:04:11,200 --> 00:04:14,959
the search results

00:04:12,879 --> 00:04:16,720
but it's not available anymore when you

00:04:14,959 --> 00:04:18,479
click on it

00:04:16,720 --> 00:04:20,320
usually this happens because search

00:04:18,479 --> 00:04:22,720
results are free from

00:04:20,320 --> 00:04:26,080
the search engine which is not already

00:04:22,720 --> 00:04:26,080
synchronized with the database

00:04:27,280 --> 00:04:31,680
so why don't we search directly on the

00:04:30,240 --> 00:04:36,479
database

00:04:31,680 --> 00:04:40,639
maybe a big one and with elastic memory

00:04:36,479 --> 00:04:43,120
like this one postgres is a very popular

00:04:40,639 --> 00:04:46,000
and long live database

00:04:43,120 --> 00:04:47,520
it added full text search years ago with

00:04:46,000 --> 00:04:52,000
specific data types

00:04:47,520 --> 00:04:55,040
and special indexes and since then

00:04:52,000 --> 00:04:59,280
many useful new features have been added

00:04:55,040 --> 00:04:59,280
every year until the last version

00:05:01,520 --> 00:05:06,400
the main concept of full research in

00:05:03,280 --> 00:05:08,880
postgres is the document

00:05:06,400 --> 00:05:10,320
a document is the unit of searching in a

00:05:08,880 --> 00:05:13,280
full text system

00:05:10,320 --> 00:05:14,240
for example a magazine article or the

00:05:13,280 --> 00:05:18,240
union or

00:05:14,240 --> 00:05:24,400
all this part for example the title

00:05:18,240 --> 00:05:27,199
the abstract and the body text

00:05:24,400 --> 00:05:29,199
but implementing a web search function

00:05:27,199 --> 00:05:30,560
directly on the database can be a low

00:05:29,199 --> 00:05:34,080
level task

00:05:30,560 --> 00:05:38,400
to do this we can use a web framework

00:05:34,080 --> 00:05:40,880
maybe one of the best

00:05:38,400 --> 00:05:41,680
django is a very popular python web

00:05:40,880 --> 00:05:44,400
framework

00:05:41,680 --> 00:05:46,000
it added full text search a few years

00:05:44,400 --> 00:05:49,199
ago

00:05:46,000 --> 00:05:53,440
and it did it in the jungle country

00:05:49,199 --> 00:05:57,120
postgres module it has the specific

00:05:53,440 --> 00:05:59,600
fields expression and function

00:05:57,120 --> 00:06:00,319
since then many new useful features have

00:05:59,600 --> 00:06:03,520
been added

00:06:00,319 --> 00:06:06,400
every year until the last version

00:06:03,520 --> 00:06:09,520
which will be released in few days

00:06:06,400 --> 00:06:09,520
jungle 3.1

00:06:11,199 --> 00:06:16,720
the django documentation defines

00:06:14,479 --> 00:06:20,000
best document based search as a full

00:06:16,720 --> 00:06:24,080
text search with advanced features

00:06:20,000 --> 00:06:26,960
waiting categorization highlighting

00:06:24,080 --> 00:06:30,639
multiple language we can implement all

00:06:26,960 --> 00:06:30,639
of them with chango itself

00:06:31,280 --> 00:06:34,720
but to better understand how the full

00:06:33,360 --> 00:06:36,560
test search in jungle works

00:06:34,720 --> 00:06:38,720
we are going to see how to perform some

00:06:36,560 --> 00:06:40,960
queries from them basic to the more

00:06:38,720 --> 00:06:44,000
complex one

00:06:40,960 --> 00:06:46,639
that can perform well also with a big

00:06:44,000 --> 00:06:46,639
amount of

00:06:46,840 --> 00:06:49,840
information

00:06:50,800 --> 00:06:56,639
to do that we can use the blog models as

00:06:53,280 --> 00:06:59,520
defined in the django documentation

00:06:56,639 --> 00:07:00,720
here we have three classes with a few

00:06:59,520 --> 00:07:04,080
fields on it

00:07:00,720 --> 00:07:06,880
a with a name an author

00:07:04,080 --> 00:07:08,400
with a chart field and an entry

00:07:06,880 --> 00:07:11,440
connected with both of them

00:07:08,400 --> 00:07:12,000
with a lot of text on it and then the

00:07:11,440 --> 00:07:15,280
line

00:07:12,000 --> 00:07:19,520
vertex and other

00:07:15,280 --> 00:07:24,080
fields we can form basic query

00:07:19,520 --> 00:07:26,720
on these models using fieldsuccup

00:07:24,080 --> 00:07:31,840
for example we can search an author

00:07:26,720 --> 00:07:31,840
using part of his name

00:07:33,440 --> 00:07:44,000
we can have more cells performing a case

00:07:37,039 --> 00:07:47,360
insensitive query

00:07:44,000 --> 00:07:49,440
fight war with the accented letter

00:07:47,360 --> 00:07:51,199
which is common in italian other

00:07:49,440 --> 00:07:55,039
languages we can activate the

00:07:51,199 --> 00:07:55,039
an accent extension

00:07:56,560 --> 00:08:01,599
after that we can search another name

00:07:59,520 --> 00:08:02,720
also if we don't know exactly all the

00:08:01,599 --> 00:08:05,199
accent

00:08:02,720 --> 00:08:05,199
letters

00:08:09,759 --> 00:08:13,360
12 results also if we don't remember

00:08:12,319 --> 00:08:17,360
well the user name

00:08:13,360 --> 00:08:17,360
we can activate the trigram extension

00:08:18,879 --> 00:08:22,319
searching for an auto we can have

00:08:20,400 --> 00:08:26,960
results with similar

00:08:22,319 --> 00:08:30,240
but not necessarily identical names

00:08:26,960 --> 00:08:30,240
as you can see here

00:08:32,640 --> 00:08:37,360
but to use all the above feature we have

00:08:35,120 --> 00:08:41,039
to add the postgres module

00:08:37,360 --> 00:08:42,080
in the installed apps after that we will

00:08:41,039 --> 00:08:44,560
be able

00:08:42,080 --> 00:08:46,880
also to perform a full text search on a

00:08:44,560 --> 00:08:46,880
field

00:08:48,800 --> 00:08:52,080
for example we can search for a word in

00:08:50,959 --> 00:08:56,320
the plural form

00:08:52,080 --> 00:08:56,320
and have results in the singular form

00:08:59,680 --> 00:09:03,760
to search the text in the more than one

00:09:02,000 --> 00:09:05,760
field we can use the search vector

00:09:03,760 --> 00:09:08,640
function

00:09:05,760 --> 00:09:09,279
we can define our documents as the union

00:09:08,640 --> 00:09:11,120
of the

00:09:09,279 --> 00:09:13,360
entry body tags and the related block

00:09:11,120 --> 00:09:13,360
name

00:09:13,839 --> 00:09:23,360
after that we can search for a word and

00:09:16,000 --> 00:09:25,920
have more accurate results

00:09:23,360 --> 00:09:30,160
to search using a more complex text we

00:09:25,920 --> 00:09:30,160
can use the search query expression

00:09:30,320 --> 00:09:35,040
we can also use common search syntax

00:09:32,720 --> 00:09:38,320
directly in the vertex

00:09:35,040 --> 00:09:40,480
using the web search type

00:09:38,320 --> 00:09:41,600
after that for example we can search for

00:09:40,480 --> 00:09:43,839
two words

00:09:41,600 --> 00:09:46,320
at the same time having potentially more

00:09:43,839 --> 00:09:46,320
results

00:09:49,440 --> 00:09:52,880
to perform a full text search in a

00:09:50,880 --> 00:09:55,680
specific language we can use the search

00:09:52,880 --> 00:09:57,680
config expression

00:09:55,680 --> 00:09:59,360
we can specify the language in both the

00:09:57,680 --> 00:10:02,160
document document and the

00:09:59,360 --> 00:10:03,760
query after that we can have more

00:10:02,160 --> 00:10:06,959
precise results than four

00:10:03,760 --> 00:10:06,959
in the selected language

00:10:11,440 --> 00:10:16,560
to this relevant result first we can use

00:10:13,760 --> 00:10:18,959
search rank function

00:10:16,560 --> 00:10:20,160
based on the query text and the document

00:10:18,959 --> 00:10:22,480
jungle we calculate

00:10:20,160 --> 00:10:22,480
rank

00:10:23,279 --> 00:10:27,360
we can order and filter ourselves using

00:10:25,279 --> 00:10:32,079
this rank

00:10:27,360 --> 00:10:33,760
and we can also show them

00:10:32,079 --> 00:10:35,680
to perform a firing rate full text

00:10:33,760 --> 00:10:36,720
search we can use the search vector

00:10:35,680 --> 00:10:39,440
weight attributes

00:10:36,720 --> 00:10:41,600
for example we can decide that word in

00:10:39,440 --> 00:10:45,200
the headline are more relevant

00:10:41,600 --> 00:10:47,360
than in the body text after that

00:10:45,200 --> 00:10:51,279
we will see a new rank in our results

00:10:47,360 --> 00:10:51,279
also performing the send search

00:10:53,600 --> 00:10:57,760
to highlight results we can use the

00:10:55,760 --> 00:11:01,839
search headline function

00:10:57,760 --> 00:11:04,720
we have to specify the light fields

00:11:01,839 --> 00:11:07,519
after that in the results we will see

00:11:04,720 --> 00:11:11,040
some html tags

00:11:07,519 --> 00:11:15,839
all this thing can be customized using

00:11:11,040 --> 00:11:15,839
some attributes

00:11:17,440 --> 00:11:21,440
to speed up all the search and

00:11:19,519 --> 00:11:24,399
simplifies to the query we can use the

00:11:21,440 --> 00:11:26,800
search vector field

00:11:24,399 --> 00:11:28,000
we have to manually update our search

00:11:26,800 --> 00:11:32,320
vector fields before

00:11:28,000 --> 00:11:34,320
running a query but after that we will

00:11:32,320 --> 00:11:37,200
have the same results as before but

00:11:34,320 --> 00:11:37,200
way more quickly

00:11:41,519 --> 00:11:45,360
i started using the full text search in

00:11:43,440 --> 00:11:46,880
django 1.10

00:11:45,360 --> 00:11:48,720
and the search frequently in the django

00:11:46,880 --> 00:11:51,920
documentation for information

00:11:48,720 --> 00:11:53,680
about this new feature

00:11:51,920 --> 00:11:55,839
but in the meantime i started asking

00:11:53,680 --> 00:11:57,600
myself i was implemented the search

00:11:55,839 --> 00:12:01,200
function in the jungle website

00:11:57,600 --> 00:12:04,000
itself i noticed

00:12:01,200 --> 00:12:05,600
that the search was performed only on

00:12:04,000 --> 00:12:08,880
english contents

00:12:05,600 --> 00:12:11,120
and in some cases there was html tags in

00:12:08,880 --> 00:12:13,279
the results

00:12:11,120 --> 00:12:15,279
i studied then the jungle besides source

00:12:13,279 --> 00:12:17,279
code and i found out that documentation

00:12:15,279 --> 00:12:21,040
was generated with sphinx

00:12:17,279 --> 00:12:23,519
and all the data was stored on postgres

00:12:21,040 --> 00:12:24,079
but the searches was performed in an

00:12:23,519 --> 00:12:28,560
external

00:12:24,079 --> 00:12:32,480
search engine so i proposed to fix that

00:12:28,560 --> 00:12:32,480
on the django developer mailing list

00:12:33,440 --> 00:12:39,680
a lot of django developers share

00:12:36,079 --> 00:12:42,079
different opinions about the update

00:12:39,680 --> 00:12:42,720
the doubts were the amount of work to be

00:12:42,079 --> 00:12:45,279
done

00:12:42,720 --> 00:12:46,880
the equivalence of search feature and

00:12:45,279 --> 00:12:48,480
the increase of the workload in the

00:12:46,880 --> 00:12:51,279
database

00:12:48,480 --> 00:12:51,680
the same things on the other side where

00:12:51,279 --> 00:12:54,399
less

00:12:51,680 --> 00:12:56,240
maintenance lighter setup and the

00:12:54,399 --> 00:12:59,600
exclusive use of django

00:12:56,240 --> 00:12:59,600
on its own websites

00:13:03,040 --> 00:13:08,240
after that i organized the jungle spree

00:13:05,519 --> 00:13:10,880
during the europa item 2017 in remini

00:13:08,240 --> 00:13:11,760
and some developers joined me to work on

00:13:10,880 --> 00:13:14,880
the search

00:13:11,760 --> 00:13:17,040
updates in a spring day

00:13:14,880 --> 00:13:20,320
we created a draft of the most

00:13:17,040 --> 00:13:24,000
press-based for the search but also

00:13:20,320 --> 00:13:25,279
we spent a lot of time trying to set up

00:13:24,000 --> 00:13:27,760
the jungle sites

00:13:25,279 --> 00:13:27,760
locally

00:13:28,480 --> 00:13:35,200
presently because the external search

00:13:32,839 --> 00:13:36,800
engines

00:13:35,200 --> 00:13:39,040
in the following months i wrote an

00:13:36,800 --> 00:13:41,040
officer for requests with a complete

00:13:39,040 --> 00:13:42,959
version of the full text search

00:13:41,040 --> 00:13:44,320
i received a lot of suggestions from

00:13:42,959 --> 00:13:46,839
other developers and that

00:13:44,320 --> 00:13:48,480
after a lot of comments they merged by

00:13:46,839 --> 00:13:51,600
request

00:13:48,480 --> 00:13:53,680
that was the first one of other merchant

00:13:51,600 --> 00:13:56,880
for requests in the same

00:13:53,680 --> 00:14:00,240
for the search function

00:13:56,880 --> 00:14:03,600
so today after a few years

00:14:00,240 --> 00:14:07,519
the django website for the search is

00:14:03,600 --> 00:14:11,040
multilingual is based only on postgres

00:14:07,519 --> 00:14:11,920
it's returns clean results it's a low

00:14:11,040 --> 00:14:14,480
maintenance

00:14:11,920 --> 00:14:15,440
solution and it's way easier to set up

00:14:14,480 --> 00:14:18,320
than before

00:14:15,440 --> 00:14:21,279
also locally if you want to try to set

00:14:18,320 --> 00:14:21,279
up on your pc

00:14:24,800 --> 00:14:28,399
as i already said you go to search

00:14:27,839 --> 00:14:31,680
feature

00:14:28,399 --> 00:14:33,519
are released every year in both postgres

00:14:31,680 --> 00:14:36,720
and django

00:14:33,519 --> 00:14:40,639
and i want to add all of them the

00:14:36,720 --> 00:14:44,639
django website search for example

00:14:40,639 --> 00:14:49,279
misspelling support search suggestions

00:14:44,639 --> 00:14:52,800
highlighted results web search syntax

00:14:49,279 --> 00:14:52,800
and search statistics

00:14:54,800 --> 00:14:58,480
but after that i want to be sure to you

00:14:57,600 --> 00:15:01,680
some useful

00:14:58,480 --> 00:15:04,800
tips to learn more about

00:15:01,680 --> 00:15:07,519
foot research and how to become an

00:15:04,800 --> 00:15:07,519
expert on it

00:15:09,120 --> 00:15:14,000
as i said before i think the

00:15:12,160 --> 00:15:16,560
starting point is reading the django

00:15:14,000 --> 00:15:18,320
documentation

00:15:16,560 --> 00:15:20,399
in the jungle documentation on the

00:15:18,320 --> 00:15:22,639
django website it's full of information

00:15:20,399 --> 00:15:25,040
about the full-time search feature

00:15:22,639 --> 00:15:27,199
you can read all the attributes you can

00:15:25,040 --> 00:15:29,360
use or the function and expression you

00:15:27,199 --> 00:15:32,079
can

00:15:29,360 --> 00:15:32,560
implement in your forget search it's

00:15:32,079 --> 00:15:36,079
well

00:15:32,560 --> 00:15:41,199
written there is a lot of example

00:15:36,079 --> 00:15:44,399
more than the one i show you now

00:15:41,199 --> 00:15:45,519
if you want more details you have to

00:15:44,399 --> 00:15:47,440
read

00:15:45,519 --> 00:15:49,199
the postgres documentation on the

00:15:47,440 --> 00:15:51,600
postgres website

00:15:49,199 --> 00:15:53,360
it helps you to understand outing words

00:15:51,600 --> 00:15:56,560
in the lower level

00:15:53,360 --> 00:15:58,959
and for me was very useful

00:15:56,560 --> 00:15:59,680
to understand how django developers

00:15:58,959 --> 00:16:03,040
implemented

00:15:59,680 --> 00:16:03,040
something in a certain way

00:16:05,600 --> 00:16:11,279
after that you can

00:16:08,959 --> 00:16:13,759
read also the source code for both

00:16:11,279 --> 00:16:13,759
projects

00:16:14,399 --> 00:16:20,079
you can find them in github and

00:16:17,519 --> 00:16:21,040
you can learn something from the source

00:16:20,079 --> 00:16:24,160
code

00:16:21,040 --> 00:16:27,759
and you can find documentation

00:16:24,160 --> 00:16:30,720
and it helps you to answer more deeply

00:16:27,759 --> 00:16:30,720
how things work

00:16:31,519 --> 00:16:37,759
after that strange

00:16:34,839 --> 00:16:39,839
tips i suggest you to search for

00:16:37,759 --> 00:16:42,800
questions on stack overflow

00:16:39,839 --> 00:16:44,800
without reading the answer try to answer

00:16:42,800 --> 00:16:47,920
them by yourself

00:16:44,800 --> 00:16:51,839
and also solving the problem and

00:16:47,920 --> 00:16:53,759
submitting the answer and it's something

00:16:51,839 --> 00:16:57,120
that's

00:16:53,759 --> 00:16:57,120
send you to the next level

00:16:58,480 --> 00:17:02,880
last but not least you can also study

00:17:01,199 --> 00:17:03,199
this presentation because it's released

00:17:02,880 --> 00:17:05,360
with

00:17:03,199 --> 00:17:07,039
creative commons license so you can

00:17:05,360 --> 00:17:09,600
download i'll share the link

00:17:07,039 --> 00:17:10,880
at the end of this talk and you can

00:17:09,600 --> 00:17:15,520
reuse it

00:17:10,880 --> 00:17:15,520
and share with other people

00:17:15,839 --> 00:17:19,199
i hope i've been able to show how it's

00:17:18,400 --> 00:17:21,039
possible

00:17:19,199 --> 00:17:22,640
to develop a more complete full text

00:17:21,039 --> 00:17:26,160
search using

00:17:22,640 --> 00:17:28,960
less software in the stack doing more

00:17:26,160 --> 00:17:32,960
with less is the mode of 20 tab

00:17:28,960 --> 00:17:36,240
and it's our version of pythonic

00:17:32,960 --> 00:17:37,280
you can find more about our open source

00:17:36,240 --> 00:17:41,280
projects

00:17:37,280 --> 00:17:44,720
and our platonic work using this context

00:17:41,280 --> 00:17:47,840
with different social media and also

00:17:44,720 --> 00:17:47,840
in our website

00:17:48,960 --> 00:17:52,799
to find out more about my work with

00:17:51,280 --> 00:17:55,120
python and django

00:17:52,799 --> 00:17:56,960
you can use all my contacts and using

00:17:55,120 --> 00:17:57,760
this qr code you can download this

00:17:56,960 --> 00:18:01,039
presentation

00:17:57,760 --> 00:18:04,080
on my website thanks again for

00:18:01,039 --> 00:18:06,559
me and enjoy the next talk in the

00:18:04,080 --> 00:18:11,360
conference

00:18:06,559 --> 00:18:13,919
thanks all right

00:18:11,360 --> 00:18:15,600
thank you for the talk i think we have

00:18:13,919 --> 00:18:16,960
two questions will you be able to take

00:18:15,600 --> 00:18:20,000
them

00:18:16,960 --> 00:18:23,600
yeah thank you okay so

00:18:20,000 --> 00:18:24,000
here's the first one does the annotate

00:18:23,600 --> 00:18:26,160
on

00:18:24,000 --> 00:18:27,280
a search vector involve a massive

00:18:26,160 --> 00:18:30,320
database overhead

00:18:27,280 --> 00:18:30,320
to perform the query

00:18:30,640 --> 00:18:38,320
so as i said before i cannot record

00:18:35,760 --> 00:18:38,320
slides

00:18:40,480 --> 00:18:44,799
oh hey i did not understand what you

00:18:42,960 --> 00:18:48,640
said i'm sorry

00:18:44,799 --> 00:18:54,000
so i'm i'm taking the slide when i

00:18:48,640 --> 00:18:57,200
i answered this question okay got it

00:18:54,000 --> 00:18:58,520
as i said before to speed up

00:18:57,200 --> 00:19:00,960
the search query and

00:18:58,520 --> 00:19:04,720
[Music]

00:19:00,960 --> 00:19:06,960
maintain uh workload on the

00:19:04,720 --> 00:19:08,720
database very low we can use the search

00:19:06,960 --> 00:19:11,360
vector fields

00:19:08,720 --> 00:19:12,480
because it's store or the document we

00:19:11,360 --> 00:19:15,760
constructed

00:19:12,480 --> 00:19:19,280
in the search vector and we can add

00:19:15,760 --> 00:19:22,240
index on this and

00:19:19,280 --> 00:19:23,679
and everything is working very fast as

00:19:22,240 --> 00:19:26,720
querying in a

00:19:23,679 --> 00:19:29,039
normal column of your database or

00:19:26,720 --> 00:19:30,240
feed on your models so this is the

00:19:29,039 --> 00:19:33,760
solution for

00:19:30,240 --> 00:19:33,760
speed up our query

00:19:34,640 --> 00:19:40,799
okay so oh the the next question is on

00:19:38,080 --> 00:19:41,280
the similar slide i think so here's the

00:19:40,799 --> 00:19:44,400
question

00:19:41,280 --> 00:19:46,640
when using search vector field i was

00:19:44,400 --> 00:19:49,200
unable to populate this field with

00:19:46,640 --> 00:19:52,080
fields outside the current model

00:19:49,200 --> 00:19:54,080
for example the author's name of a blog

00:19:52,080 --> 00:19:56,559
if search vector field is inside

00:19:54,080 --> 00:20:00,000
the blog model do you know why and how

00:19:56,559 --> 00:20:04,400
to include relationship fields

00:20:00,000 --> 00:20:04,400
yes i show at the beginning

00:20:05,360 --> 00:20:07,840
sorry

00:20:15,280 --> 00:20:24,880
this one and in this example

00:20:20,960 --> 00:20:29,360
i shown exactly these things so

00:20:24,880 --> 00:20:32,240
the document i built the search vector

00:20:29,360 --> 00:20:33,200
it's the union of the body text of the

00:20:32,240 --> 00:20:38,000
entry model

00:20:33,200 --> 00:20:38,000
and the name of the related

00:20:38,240 --> 00:20:44,960
object the block and so

00:20:42,480 --> 00:20:46,000
as you can see we can construct the

00:20:44,960 --> 00:20:49,840
search vector

00:20:46,000 --> 00:20:49,840
using both this

00:20:49,919 --> 00:20:56,720
model to populate them maybe you

00:20:53,360 --> 00:21:00,880
need something more sophisticated

00:20:56,720 --> 00:21:04,960
you can update your search vector field

00:21:00,880 --> 00:21:08,000
using an update or also a

00:21:04,960 --> 00:21:12,559
other things chrome routine

00:21:08,000 --> 00:21:16,480
in the database but in the

00:21:12,559 --> 00:21:20,320
theoretical meaning you can

00:21:16,480 --> 00:21:23,360
add here also more than one fields and

00:21:20,320 --> 00:21:26,400
also join many too many fields

00:21:23,360 --> 00:21:28,240
using aggregation so everything is

00:21:26,400 --> 00:21:32,880
possible your document can be

00:21:28,240 --> 00:21:32,880
very big if you if you want it

00:21:33,760 --> 00:21:39,520
okay so here's the next question

00:21:36,960 --> 00:21:43,360
how much more is the load on postgres

00:21:39,520 --> 00:21:46,960
database with this full search feature

00:21:43,360 --> 00:21:50,320
oh i think uh this was just asked in

00:21:46,960 --> 00:21:54,400
other words right now yeah okay

00:21:50,320 --> 00:21:57,919
yes uh actually there was a lot of

00:21:54,400 --> 00:22:01,760
people that thoughts

00:21:57,919 --> 00:22:01,760
the workload and possible database

00:22:02,880 --> 00:22:06,080
can be affected by the use of

00:22:04,720 --> 00:22:10,640
proto-search

00:22:06,080 --> 00:22:10,640
but at the end i can say

00:22:10,720 --> 00:22:15,280
the work database the workload of

00:22:12,480 --> 00:22:18,080
database is identical than before

00:22:15,280 --> 00:22:19,520
because the search vector field is only

00:22:18,080 --> 00:22:24,000
a new column

00:22:19,520 --> 00:22:25,840
and if you add also index on it

00:22:24,000 --> 00:22:27,120
at the end when you're searching in this

00:22:25,840 --> 00:22:30,000
corner

00:22:27,120 --> 00:22:30,880
you perform me and in the scan on the

00:22:30,000 --> 00:22:34,799
column

00:22:30,880 --> 00:22:36,799
everything work uh very fast

00:22:34,799 --> 00:22:37,919
more than you thought more than i

00:22:36,799 --> 00:22:41,120
thought before

00:22:37,919 --> 00:22:45,600
starting using it and

00:22:41,120 --> 00:22:48,080
you can check it using the

00:22:45,600 --> 00:22:50,640
search in the django documentation

00:22:48,080 --> 00:22:50,640
website

00:22:51,280 --> 00:22:55,600
so here's the last question when should

00:22:54,080 --> 00:22:58,720
django postgres search

00:22:55,600 --> 00:23:01,679
not be used in production

00:22:58,720 --> 00:23:02,559
sorry can you repeat when should the

00:23:01,679 --> 00:23:06,799
django

00:23:02,559 --> 00:23:06,799
postgres search not be used in

00:23:06,840 --> 00:23:11,360
production

00:23:09,200 --> 00:23:12,559
i i didn't understand the first word but

00:23:11,360 --> 00:23:15,360
uh okay

00:23:12,559 --> 00:23:16,559
so when should the django postgres

00:23:15,360 --> 00:23:20,080
search

00:23:16,559 --> 00:23:23,919
not be used in production

00:23:20,080 --> 00:23:27,600
why should this not be yeah

00:23:23,919 --> 00:23:30,480
if i asked well the the question i think

00:23:27,600 --> 00:23:31,760
you can use with no problem in

00:23:30,480 --> 00:23:34,799
production because

00:23:31,760 --> 00:23:38,559
uh i used in a lot of projects and

00:23:34,799 --> 00:23:39,440
as i already said uh in the last three

00:23:38,559 --> 00:23:44,080
years the

00:23:39,440 --> 00:23:47,279
django search documentation feature is

00:23:44,080 --> 00:23:48,400
built using exactly this so it's run

00:23:47,279 --> 00:23:50,720
queries

00:23:48,400 --> 00:23:51,919
using django feature and full text

00:23:50,720 --> 00:23:54,400
search

00:23:51,919 --> 00:23:55,760
in queries on posters so it's on

00:23:54,400 --> 00:23:58,640
production

00:23:55,760 --> 00:23:58,640
since long time

00:23:59,200 --> 00:24:06,559
okay that's awesome thank you very much

00:24:02,480 --> 00:24:13,840
for your talk and it was pretty amazing

00:24:06,559 --> 00:24:13,840

YouTube URL: https://www.youtube.com/watch?v=4DP0eKp2-nE


