Title: Radosław Ganczarek - The joy of deleting code
Publication date: 2020-09-15
Playlist: EuroPython 2020
Description: 
	"The joy of deleting code
EuroPython 2020 - Talk - 2020-07-23 - Microsoft
Online

By Radosław Ganczarek

They say measuring code quality by its LOC is like measuring aircraft quality by its weight. There's a lot of sense in the metaphor, as we often call inefficient code with words like ""heavy"" or ""bloated"".
In my talk I'll tell you about my approach to deleting unneeded code, tools that could help you and how did it turned out in the end in real world projects.
As you probably know, detecting unused code automatically is a hard task and doing it in Python is exceptionally hard because we sometimes call methods with getattr or write classes which are only used in non-python configuration files. Tools give us only a partial success. What you could do beyond them? What approach to take? I'd like to discuss it in detail in my talk.



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2020.europython.eu/events/speaker-release-agreement/

    "
Captions: 
	00:00:06,399 --> 00:00:09,360
uh

00:00:07,040 --> 00:00:11,120
let's start with the next speaker please

00:00:09,360 --> 00:00:14,320
welcome our next speaker

00:00:11,120 --> 00:00:16,240
uh ratzlaw who is joining us from poland

00:00:14,320 --> 00:00:18,560
he is an experienced python developer

00:00:16,240 --> 00:00:20,800
and works mostly with django

00:00:18,560 --> 00:00:22,640
we'll be talking about the joy of

00:00:20,800 --> 00:00:24,480
deleting code

00:00:22,640 --> 00:00:25,760
let's start with the talk over to you

00:00:24,480 --> 00:00:29,199
raj

00:00:25,760 --> 00:00:30,160
so hello i am radek and i will tell you

00:00:29,199 --> 00:00:34,480
about

00:00:30,160 --> 00:00:34,480
the joys of deleting code

00:00:34,880 --> 00:00:41,760
so in this presentation in this talk

00:00:38,399 --> 00:00:44,160
i will first talk about some different

00:00:41,760 --> 00:00:46,399
thoughts i have about deleting code

00:00:44,160 --> 00:00:49,039
i will tell a bit about my story and

00:00:46,399 --> 00:00:52,320
then i will focus on the

00:00:49,039 --> 00:00:55,840
concrete methods that i used

00:00:52,320 --> 00:00:55,840
and or that i recommend

00:00:55,920 --> 00:01:03,359
so let's start so

00:00:59,600 --> 00:01:06,080
why why do you want to delete code

00:01:03,359 --> 00:01:08,479
the code that lives in our repositories

00:01:06,080 --> 00:01:13,040
either it is legacy or just developed

00:01:08,479 --> 00:01:15,680
code it might contain in some places the

00:01:13,040 --> 00:01:18,159
code that is not used uh we don't want

00:01:15,680 --> 00:01:20,720
this codes to bloat our

00:01:18,159 --> 00:01:23,360
our software our repo we just want to

00:01:20,720 --> 00:01:23,360
get rid of it

00:01:24,000 --> 00:01:28,400
so you may ask yourself why why why do

00:01:26,479 --> 00:01:30,799
you want to delete code

00:01:28,400 --> 00:01:31,840
because less code is less bugs it's it's

00:01:30,799 --> 00:01:35,759
as simple as

00:01:31,840 --> 00:01:37,600
that hard to oppose however also

00:01:35,759 --> 00:01:39,119
when you delete codes you also can

00:01:37,600 --> 00:01:41,280
introduce more bugs on when you for

00:01:39,119 --> 00:01:43,360
example have multiple places when the

00:01:41,280 --> 00:01:45,439
same code is used and you

00:01:43,360 --> 00:01:48,399
make a function out of it you might miss

00:01:45,439 --> 00:01:50,640
some some things some some differences

00:01:48,399 --> 00:01:53,600
minor differences that will introduce

00:01:50,640 --> 00:01:56,960
bugs so we need to be extra careful

00:01:53,600 --> 00:02:00,159
and also especially in python that will

00:01:56,960 --> 00:02:02,479
bite us many times many places

00:02:00,159 --> 00:02:03,520
sometimes our code is used in is

00:02:02,479 --> 00:02:05,520
referenced

00:02:03,520 --> 00:02:08,000
only it is referenced in yaml files like

00:02:05,520 --> 00:02:12,160
defining classes in open api

00:02:08,000 --> 00:02:15,760
definition or code that is used by

00:02:12,160 --> 00:02:17,120
another module which we doesn't see that

00:02:15,760 --> 00:02:20,160
it is used

00:02:17,120 --> 00:02:22,080
and also the code that is used

00:02:20,160 --> 00:02:24,640
only in particular environment and for

00:02:22,080 --> 00:02:26,400
example our call code coverage

00:02:24,640 --> 00:02:30,400
will show us that this is not used but

00:02:26,400 --> 00:02:30,400
it is really used but somewhere else

00:02:30,640 --> 00:02:37,280
it also it is very easy to fall into

00:02:34,080 --> 00:02:39,840
this intimidating uh

00:02:37,280 --> 00:02:41,760
intimidating mindset that real

00:02:39,840 --> 00:02:42,319
programmers delete code we don't want

00:02:41,760 --> 00:02:45,680
this is

00:02:42,319 --> 00:02:47,360
difficult additional code and needed

00:02:45,680 --> 00:02:48,239
code is not something that we want to

00:02:47,360 --> 00:02:51,519
have

00:02:48,239 --> 00:02:54,000
and we should part of our professional

00:02:51,519 --> 00:02:56,800
professionality is to so so that we

00:02:54,000 --> 00:03:01,519
detect and and delete what we don't need

00:02:56,800 --> 00:03:04,720
uh however this statement is as true as

00:03:01,519 --> 00:03:08,400
as any other statement we can coin

00:03:04,720 --> 00:03:11,840
it only makes us a bit sad a bit

00:03:08,400 --> 00:03:14,159
guilty but it doesn't change anything

00:03:11,840 --> 00:03:15,280
every case is different and for example

00:03:14,159 --> 00:03:17,760
there are

00:03:15,280 --> 00:03:19,280
if we have multi the same coat in

00:03:17,760 --> 00:03:20,959
different

00:03:19,280 --> 00:03:22,159
layers of the of the program we might

00:03:20,959 --> 00:03:24,480
need to keep it because they have

00:03:22,159 --> 00:03:26,319
different purposes if ever if they even

00:03:24,480 --> 00:03:28,319
if they look the same maybe they will

00:03:26,319 --> 00:03:31,120
evolve into something other

00:03:28,319 --> 00:03:32,720
also there is a wet principle oppo that

00:03:31,120 --> 00:03:36,799
opposes the dry principle

00:03:32,720 --> 00:03:39,280
which say write everything twice also

00:03:36,799 --> 00:03:40,080
it is also commonly said in in other

00:03:39,280 --> 00:03:42,720
words

00:03:40,080 --> 00:03:43,920
that duplicates start from three that if

00:03:42,720 --> 00:03:46,879
you have to duplicate it

00:03:43,920 --> 00:03:48,480
it's okay if it's three okay let's let's

00:03:46,879 --> 00:03:51,040
uh let's get

00:03:48,480 --> 00:03:51,040
get it out

00:03:51,680 --> 00:03:55,599
but also yeah there are many there are

00:03:54,000 --> 00:03:57,680
many problems

00:03:55,599 --> 00:03:59,599
but also sometimes you just need to

00:03:57,680 --> 00:04:02,799
speak up

00:03:59,599 --> 00:04:05,439
because there are projects especially

00:04:02,799 --> 00:04:07,200
with legacy code that you won't

00:04:05,439 --> 00:04:09,280
understand what the code does

00:04:07,200 --> 00:04:10,720
you won't understand how the code is

00:04:09,280 --> 00:04:13,519
used

00:04:10,720 --> 00:04:15,040
the number of wtfs per hour will be very

00:04:13,519 --> 00:04:17,280
high

00:04:15,040 --> 00:04:18,239
the rotten code the code where dragon

00:04:17,280 --> 00:04:20,400
lives

00:04:18,239 --> 00:04:21,759
maybe it would be good to delete it

00:04:20,400 --> 00:04:24,639
instead of

00:04:21,759 --> 00:04:28,560
spending months on getting how how it

00:04:24,639 --> 00:04:31,600
really works

00:04:28,560 --> 00:04:34,240
so sometimes you just need to do it

00:04:31,600 --> 00:04:36,160
just get rid of unneeded code and

00:04:34,240 --> 00:04:39,520
whatever happens happens of course

00:04:36,160 --> 00:04:41,440
it's very careless but for example if

00:04:39,520 --> 00:04:44,639
you have like a legacy project

00:04:41,440 --> 00:04:47,280
no ci no test coverage no

00:04:44,639 --> 00:04:48,000
things that could help you with

00:04:47,280 --> 00:04:52,560
detecting

00:04:48,000 --> 00:04:52,560
the possible possible unused places

00:04:52,639 --> 00:04:57,240
you just can sometimes remove something

00:04:55,199 --> 00:04:59,520
but check test it on the test

00:04:57,240 --> 00:05:02,720
instance.production

00:04:59,520 --> 00:05:05,680
of course sometimes it's the only way

00:05:02,720 --> 00:05:05,680
to see what happens

00:05:06,720 --> 00:05:09,759
also many people don't like deleting

00:05:09,120 --> 00:05:11,840
code

00:05:09,759 --> 00:05:13,360
they say oh we are going to need it or

00:05:11,840 --> 00:05:16,560
we are going to need it again

00:05:13,360 --> 00:05:17,039
which is the worst because this code was

00:05:16,560 --> 00:05:18,800
used

00:05:17,039 --> 00:05:20,080
some time ago maybe we will use it in

00:05:18,800 --> 00:05:23,120
future it's

00:05:20,080 --> 00:05:25,440
it's a trap don't don't go for it

00:05:23,120 --> 00:05:26,960
uh there's a principle you ain't gonna

00:05:25,440 --> 00:05:29,840
you ain't gonna need it

00:05:26,960 --> 00:05:31,039
so now you ain't gonna need it maybe in

00:05:29,840 --> 00:05:33,440
future you will but

00:05:31,039 --> 00:05:34,639
maybe you will it you will need it in

00:05:33,440 --> 00:05:36,880
different form

00:05:34,639 --> 00:05:39,039
or maybe if you are adding a code that

00:05:36,880 --> 00:05:40,720
will that will be used in future

00:05:39,039 --> 00:05:42,720
you are just bloating your work you are

00:05:40,720 --> 00:05:45,680
just you will

00:05:42,720 --> 00:05:47,360
not be able to finish the task in sprint

00:05:45,680 --> 00:05:47,759
because you added something that you

00:05:47,360 --> 00:05:51,680
think

00:05:47,759 --> 00:05:53,840
would be useful uh on the other hand

00:05:51,680 --> 00:05:54,720
if something is really going to be

00:05:53,840 --> 00:05:57,840
needed

00:05:54,720 --> 00:06:01,280
and you really know about this maybe

00:05:57,840 --> 00:06:03,680
maybe it would be worse to extract

00:06:01,280 --> 00:06:04,960
it to a separate library or module so

00:06:03,680 --> 00:06:07,360
that you will see that okay

00:06:04,960 --> 00:06:08,160
here's some stuff we are going to need

00:06:07,360 --> 00:06:11,360
it

00:06:08,160 --> 00:06:11,919
but it lies on the side so we are we we

00:06:11,360 --> 00:06:15,120
know that

00:06:11,919 --> 00:06:17,680
it won't uh it won't

00:06:15,120 --> 00:06:19,120
break our test coverage or or something

00:06:17,680 --> 00:06:21,440
like this

00:06:19,120 --> 00:06:22,319
uh it just lies here and waits for its

00:06:21,440 --> 00:06:24,560
turn but

00:06:22,319 --> 00:06:26,400
i i don't recommend this maybe another

00:06:24,560 --> 00:06:27,759
package or something like this or

00:06:26,400 --> 00:06:30,000
i don't know sometimes there is

00:06:27,759 --> 00:06:33,680
situation that that you have a

00:06:30,000 --> 00:06:36,720
divine the divine force

00:06:33,680 --> 00:06:38,639
is you have a revelation

00:06:36,720 --> 00:06:41,440
how to solve something you don't need to

00:06:38,639 --> 00:06:42,960
solve now maybe just put it in gist or a

00:06:41,440 --> 00:06:48,240
file in your file system not

00:06:42,960 --> 00:06:50,639
exactly in the repo

00:06:48,240 --> 00:06:52,080
also yes i said a couple of times about

00:06:50,639 --> 00:06:55,759
the legacy code

00:06:52,080 --> 00:06:58,400
the legacy code is very difficult case

00:06:55,759 --> 00:06:59,759
because uh if we if you would like to

00:06:58,400 --> 00:07:02,319
comment legacy code

00:06:59,759 --> 00:07:03,520
it means you need to delete it in most

00:07:02,319 --> 00:07:06,479
modern

00:07:03,520 --> 00:07:08,000
modern projects we use something that is

00:07:06,479 --> 00:07:11,199
called

00:07:08,000 --> 00:07:14,960
git or other version control system so

00:07:11,199 --> 00:07:16,720
nothing is really lost the code is

00:07:14,960 --> 00:07:18,560
somewhere there and if we'll need it

00:07:16,720 --> 00:07:21,680
we'll get it back

00:07:18,560 --> 00:07:24,960
problem is commented code wrote

00:07:21,680 --> 00:07:30,080
a lot in a lot more

00:07:24,960 --> 00:07:32,639
than the usual codes that surround it

00:07:30,080 --> 00:07:33,280
so in the end of all these random

00:07:32,639 --> 00:07:37,520
thoughts about

00:07:33,280 --> 00:07:40,240
the code uh you need to just do it

00:07:37,520 --> 00:07:42,160
but don't do it carelessly and don't

00:07:40,240 --> 00:07:45,759
fear too much

00:07:42,160 --> 00:07:47,840
that's about the about the outcomes

00:07:45,759 --> 00:07:49,440
in modern projects we use continuous

00:07:47,840 --> 00:07:51,840
integration linters

00:07:49,440 --> 00:07:53,680
other tools and they could help you

00:07:51,840 --> 00:07:56,560
spotting the possible

00:07:53,680 --> 00:07:58,240
possible problems possible bugs as soon

00:07:56,560 --> 00:08:01,680
as possible

00:07:58,240 --> 00:08:04,479
so you just are gonna do it and see

00:08:01,680 --> 00:08:05,199
how good it feels to delete something

00:08:04,479 --> 00:08:08,000
and to get

00:08:05,199 --> 00:08:10,960
your program a bit lighter and a bit

00:08:08,000 --> 00:08:10,960
more understandable

00:08:11,680 --> 00:08:18,560
so a second about my story

00:08:15,520 --> 00:08:21,680
so i'm i'm a developer i

00:08:18,560 --> 00:08:25,199
worked with python for 10 years and i

00:08:21,680 --> 00:08:28,319
changed my job and projects

00:08:25,199 --> 00:08:29,039
quite often also that's it's it's

00:08:28,319 --> 00:08:32,159
counting

00:08:29,039 --> 00:08:35,279
along with some side projects uh

00:08:32,159 --> 00:08:37,760
and half of all my projects contained

00:08:35,279 --> 00:08:39,760
legacy code and by legacy code i mean

00:08:37,760 --> 00:08:41,039
not something written a month ago but a

00:08:39,760 --> 00:08:44,159
year ago or

00:08:41,039 --> 00:08:47,200
five years ago and six

00:08:44,159 --> 00:08:48,800
half half of the half of projects was in

00:08:47,200 --> 00:08:51,760
so bad shape

00:08:48,800 --> 00:08:52,959
it deserved to be rewritten but we

00:08:51,760 --> 00:08:55,680
didn't have time to

00:08:52,959 --> 00:08:56,560
do this or we didn't have courage to do

00:08:55,680 --> 00:09:01,040
this

00:08:56,560 --> 00:09:03,440
and that led us to

00:09:01,040 --> 00:09:04,800
constant refactoring and getting the

00:09:03,440 --> 00:09:07,760
code better

00:09:04,800 --> 00:09:08,000
there was a project when we refactored

00:09:07,760 --> 00:09:10,640
it

00:09:08,000 --> 00:09:11,040
for a year and then even our manager so

00:09:10,640 --> 00:09:12,959
guys

00:09:11,040 --> 00:09:14,080
it's leading to nowhere let's rewrite it

00:09:12,959 --> 00:09:17,120
all and

00:09:14,080 --> 00:09:20,399
do the smooth uh smooth

00:09:17,120 --> 00:09:22,720
pass from the old codes to the new

00:09:20,399 --> 00:09:24,160
so sometimes even people are all the

00:09:22,720 --> 00:09:25,200
people around you see that you should

00:09:24,160 --> 00:09:28,080
give up

00:09:25,200 --> 00:09:29,120
and to rewrite it but you don't see so

00:09:28,080 --> 00:09:32,240
it's good to have a

00:09:29,120 --> 00:09:35,120
perspective but

00:09:32,240 --> 00:09:35,440
suppose we are given a legacy project

00:09:35,120 --> 00:09:38,480
and

00:09:35,440 --> 00:09:40,399
we can we need to refactor it it is

00:09:38,480 --> 00:09:41,839
working it's it needs to be working we

00:09:40,399 --> 00:09:45,040
don't have time

00:09:41,839 --> 00:09:45,519
so that leads us the first thing you are

00:09:45,040 --> 00:09:48,640
thinking

00:09:45,519 --> 00:09:51,360
of doing in such case is

00:09:48,640 --> 00:09:52,080
at least i am thinking is deleting code

00:09:51,360 --> 00:09:55,760
because

00:09:52,080 --> 00:09:58,800
less code is lesser factoring what's uh

00:09:55,760 --> 00:10:02,399
what's the uh what's the purpose

00:09:58,800 --> 00:10:02,800
of writing unit tests for legacy code if

00:10:02,399 --> 00:10:04,720
you

00:10:02,800 --> 00:10:06,560
know that some part of it will be

00:10:04,720 --> 00:10:07,760
deleted of course it is extremely

00:10:06,560 --> 00:10:09,519
dangerous because you don't know the

00:10:07,760 --> 00:10:13,279
code

00:10:09,519 --> 00:10:16,320
part of code looks unused but

00:10:13,279 --> 00:10:17,360
if you have any way of finding it out of

00:10:16,320 --> 00:10:20,720
checking it in a

00:10:17,360 --> 00:10:21,680
in a development environment it might be

00:10:20,720 --> 00:10:24,720
good to just

00:10:21,680 --> 00:10:26,560
drop the code that looks that and see

00:10:24,720 --> 00:10:29,760
what happens

00:10:26,560 --> 00:10:32,160
uh a friend of mine once told me that

00:10:29,760 --> 00:10:34,160
he was give he was in his project there

00:10:32,160 --> 00:10:38,880
was a thousand line function

00:10:34,160 --> 00:10:42,079
where there were big chunks of code with

00:10:38,880 --> 00:10:45,360
with under if statements

00:10:42,079 --> 00:10:46,000
with contradicting with contradicting

00:10:45,360 --> 00:10:49,200
expressions

00:10:46,000 --> 00:10:52,000
so uh there were it was

00:10:49,200 --> 00:10:53,200
just unreachable code when he cut out of

00:10:52,000 --> 00:10:56,399
the unreachable code

00:10:53,200 --> 00:10:59,200
he the result was an 100 line

00:10:56,399 --> 00:11:01,360
function not a thousand hundred light

00:10:59,200 --> 00:11:04,880
faction is function is still big but

00:11:01,360 --> 00:11:04,880
it's it's better than thousand

00:11:05,600 --> 00:11:12,079
okay so how do we prevent having unused

00:11:08,640 --> 00:11:12,079
code or how do we find it

00:11:12,560 --> 00:11:16,480
so let's uh grab the first and easiest

00:11:15,680 --> 00:11:19,760
way

00:11:16,480 --> 00:11:22,320
so unused imports it is

00:11:19,760 --> 00:11:24,160
basically a full auto approach there are

00:11:22,320 --> 00:11:26,000
tools that can help you i sort i cert

00:11:24,160 --> 00:11:27,279
will not find the unused imports but it

00:11:26,000 --> 00:11:29,760
will

00:11:27,279 --> 00:11:30,399
get rid of duplicated imports and sort

00:11:29,760 --> 00:11:33,680
everything

00:11:30,399 --> 00:11:37,680
gently and pi flex or pylint

00:11:33,680 --> 00:11:40,160
will show the unused imports so this is

00:11:37,680 --> 00:11:40,800
not a big deal not a big gain but it

00:11:40,160 --> 00:11:43,760
will

00:11:40,800 --> 00:11:44,959
make your code more clear and it will be

00:11:43,760 --> 00:11:48,959
useful for

00:11:44,959 --> 00:11:53,120
next uh steps so next step

00:11:48,959 --> 00:11:55,040
is unused packages so here we

00:11:53,120 --> 00:11:57,040
we use the previous step because here we

00:11:55,040 --> 00:12:00,480
will we will take advantage of it

00:11:57,040 --> 00:12:04,320
we for example there is a simple maybe

00:12:00,480 --> 00:12:06,240
or maybe not so simple bash command

00:12:04,320 --> 00:12:08,399
that extracts all imports from your

00:12:06,240 --> 00:12:09,680
project and

00:12:08,399 --> 00:12:11,600
you can compare it with your

00:12:09,680 --> 00:12:15,279
requirements filers or setup

00:12:11,600 --> 00:12:18,399
file setup file dependencies

00:12:15,279 --> 00:12:20,320
of course some of the imports will be

00:12:18,399 --> 00:12:21,680
imports from the standard library so you

00:12:20,320 --> 00:12:25,279
need to take

00:12:21,680 --> 00:12:27,680
in to know it but if you

00:12:25,279 --> 00:12:29,600
won't be able to find your requirements

00:12:27,680 --> 00:12:32,720
in one of the imports

00:12:29,600 --> 00:12:34,800
it might mean that it is unused

00:12:32,720 --> 00:12:35,839
of course there are some packages like

00:12:34,800 --> 00:12:37,680
development tools

00:12:35,839 --> 00:12:39,279
which are not imported like pylind or

00:12:37,680 --> 00:12:40,240
pythagoras or by hey by this is

00:12:39,279 --> 00:12:42,480
important

00:12:40,240 --> 00:12:43,920
which are our unicorn which are not

00:12:42,480 --> 00:12:44,959
important in your code but still they

00:12:43,920 --> 00:12:48,160
are used so

00:12:44,959 --> 00:12:48,560
you need to have some uh knowledge have

00:12:48,160 --> 00:12:51,519
some

00:12:48,560 --> 00:12:52,880
uh know what you what you have in your

00:12:51,519 --> 00:12:56,000
in your code base

00:12:52,880 --> 00:12:59,760
but it will help you to get

00:12:56,000 --> 00:13:02,800
the get the obvious

00:12:59,760 --> 00:13:02,800
obvious candidates

00:13:02,959 --> 00:13:06,560
okay so unused modules so modules are

00:13:05,600 --> 00:13:09,680
big animals

00:13:06,560 --> 00:13:12,800
so it is good it is easy to

00:13:09,680 --> 00:13:13,920
to track them and we do we do this just

00:13:12,800 --> 00:13:17,040
like with packages

00:13:13,920 --> 00:13:21,040
we see what's imported we can

00:13:17,040 --> 00:13:25,519
do the same graph as here but just

00:13:21,040 --> 00:13:28,079
find only things imported from our our

00:13:25,519 --> 00:13:30,800
project and also we can see code

00:13:28,079 --> 00:13:32,880
coverage but not only test coverage

00:13:30,800 --> 00:13:34,079
because coverage module can also track

00:13:32,880 --> 00:13:36,399
for example

00:13:34,079 --> 00:13:38,480
stuff used when you use the site you can

00:13:36,399 --> 00:13:41,760
run if you have a web app you can run

00:13:38,480 --> 00:13:43,199
your server with coverage and you do

00:13:41,760 --> 00:13:46,560
some things and you see

00:13:43,199 --> 00:13:48,639
what code was was actually run

00:13:46,560 --> 00:13:49,680
so it's good if you have if you don't

00:13:48,639 --> 00:13:53,440
have tests

00:13:49,680 --> 00:13:56,560
you can use coverage this way

00:13:53,440 --> 00:13:57,839
but also here as i said in the beginning

00:13:56,560 --> 00:13:59,680
modules can be imported in an

00:13:57,839 --> 00:14:02,639
untrackable way especially

00:13:59,680 --> 00:14:03,839
in django when you have middleware which

00:14:02,639 --> 00:14:06,800
are strings

00:14:03,839 --> 00:14:08,560
strings with the module path or

00:14:06,800 --> 00:14:16,399
installed apps

00:14:08,560 --> 00:14:19,680
so yeah you need to think about it

00:14:16,399 --> 00:14:20,720
uh okay so let's let's uh talk about

00:14:19,680 --> 00:14:24,959
level advanced

00:14:20,720 --> 00:14:27,600
there's a tool called vulture that is uh

00:14:24,959 --> 00:14:28,240
that is finding unused code but it is

00:14:27,600 --> 00:14:30,560
giving us

00:14:28,240 --> 00:14:31,600
lots of false positives and you can see

00:14:30,560 --> 00:14:33,519
as you can see here

00:14:31,600 --> 00:14:34,639
variable field sets is used by django

00:14:33,519 --> 00:14:36,560
admin not

00:14:34,639 --> 00:14:38,000
explicitly in the code this is used

00:14:36,560 --> 00:14:40,399
automatically found

00:14:38,000 --> 00:14:41,600
and used by django or imported in the

00:14:40,399 --> 00:14:44,720
settings

00:14:41,600 --> 00:14:48,639
so there are many uh problems with it

00:14:44,720 --> 00:14:51,760
but for some things like for for classes

00:14:48,639 --> 00:14:53,920
or functions it is the the

00:14:51,760 --> 00:14:55,680
the findings of vulture can be can be

00:14:53,920 --> 00:14:56,240
helpful but you always need to think

00:14:55,680 --> 00:14:58,720
that

00:14:56,240 --> 00:14:59,519
the vulture doesn't know everything it

00:14:58,720 --> 00:15:02,639
just sees

00:14:59,519 --> 00:15:04,560
at the code and also it is you it is

00:15:02,639 --> 00:15:05,519
good to if you run vulture on your code

00:15:04,560 --> 00:15:09,279
to

00:15:05,519 --> 00:15:10,880
exclude the uh of course tests because

00:15:09,279 --> 00:15:14,399
even if your code is unused it might

00:15:10,880 --> 00:15:17,680
still have tests that imports it

00:15:14,399 --> 00:15:21,360
so finding and removing that code is

00:15:17,680 --> 00:15:24,320
is is complicated it's better to just

00:15:21,360 --> 00:15:24,320
get your code clean

00:15:24,959 --> 00:15:28,959
for example with classes clean

00:15:27,760 --> 00:15:31,839
architecture or

00:15:28,959 --> 00:15:32,399
hexagonal architecture here can help you

00:15:31,839 --> 00:15:35,360
or

00:15:32,399 --> 00:15:36,639
using mixins because it's mixings are

00:15:35,360 --> 00:15:39,279
won't be used in

00:15:36,639 --> 00:15:40,399
config files if you see an unused mixing

00:15:39,279 --> 00:15:43,600
it's probably

00:15:40,399 --> 00:15:45,759
uh it's probably really unused uh or if

00:15:43,600 --> 00:15:48,880
you have registered classes or

00:15:45,759 --> 00:15:52,160
or just group classes somehow it is

00:15:48,880 --> 00:15:55,279
easier to spot the

00:15:52,160 --> 00:15:57,680
the unused ones uh

00:15:55,279 --> 00:15:58,320
about methods it's pretty much the same

00:15:57,680 --> 00:15:59,920
so

00:15:58,320 --> 00:16:01,519
if you have for methods it's good to

00:15:59,920 --> 00:16:05,360
keep the interfaces

00:16:01,519 --> 00:16:08,399
or protocols uh for for functions you

00:16:05,360 --> 00:16:11,680
can separate them as as

00:16:08,399 --> 00:16:14,639
small as as much as you can so that

00:16:11,680 --> 00:16:15,600
you will see the missing that the

00:16:14,639 --> 00:16:18,399
missing

00:16:15,600 --> 00:16:19,759
that the functions are are unused on the

00:16:18,399 --> 00:16:24,000
coverage

00:16:19,759 --> 00:16:26,639
and but here you can here and with the

00:16:24,000 --> 00:16:27,519
attributes there is dynamic access for

00:16:26,639 --> 00:16:30,320
get out from

00:16:27,519 --> 00:16:31,040
python which can uh prevent us from

00:16:30,320 --> 00:16:34,079
finding out

00:16:31,040 --> 00:16:36,399
this and about attributes

00:16:34,079 --> 00:16:38,720
class attributes it's good to group them

00:16:36,399 --> 00:16:42,560
into data classes or name tuples

00:16:38,720 --> 00:16:45,519
uh so that it will help us to

00:16:42,560 --> 00:16:47,519
if we have to remove something we have

00:16:45,519 --> 00:16:49,600
to remove it in one place

00:16:47,519 --> 00:16:51,360
and for the variables pylint is pretty

00:16:49,600 --> 00:16:53,279
good with finding out which variables

00:16:51,360 --> 00:16:57,600
are used and which not

00:16:53,279 --> 00:16:58,399
uh so to sum up pi flags finds unused

00:16:57,600 --> 00:17:01,680
imports

00:16:58,399 --> 00:17:05,280
my pi keeps class interfaces pylint

00:17:01,680 --> 00:17:06,880
finds lots of unused stuff and you can

00:17:05,280 --> 00:17:08,319
code coverage clean architecture and

00:17:06,880 --> 00:17:11,120
good practices to

00:17:08,319 --> 00:17:12,959
help you here okay quick one about

00:17:11,120 --> 00:17:15,839
duplicated code

00:17:12,959 --> 00:17:16,400
uh so as you can as i said previously

00:17:15,839 --> 00:17:18,079
there's

00:17:16,400 --> 00:17:19,439
dry and there is wet so write everything

00:17:18,079 --> 00:17:21,760
twice

00:17:19,439 --> 00:17:24,000
and sometimes the the it's good to

00:17:21,760 --> 00:17:28,079
assume that duplicates start from three

00:17:24,000 --> 00:17:31,520
because you don't need to uh always uh

00:17:28,079 --> 00:17:35,039
go for the same always

00:17:31,520 --> 00:17:37,679
track the the the duplicates uh

00:17:35,039 --> 00:17:38,559
about tools there are no modern tools

00:17:37,679 --> 00:17:40,559
that could help you

00:17:38,559 --> 00:17:42,559
there is old clone digger which uh

00:17:40,559 --> 00:17:45,280
pretty is pretty awesome which

00:17:42,559 --> 00:17:47,919
with finding duplicate code pylint also

00:17:45,280 --> 00:17:50,480
find duplicates code duplicated code but

00:17:47,919 --> 00:17:52,000
pylint findings are exact matches

00:17:50,480 --> 00:17:55,520
klondiker analyzed

00:17:52,000 --> 00:17:57,360
syntax tree and didn't

00:17:55,520 --> 00:18:00,320
found for example duplicated code with

00:17:57,360 --> 00:18:03,200
different variable names

00:18:00,320 --> 00:18:05,200
so we are pretty much left alone on this

00:18:03,200 --> 00:18:08,480
road we need to write a good code

00:18:05,200 --> 00:18:11,520
keep the good practices in mind

00:18:08,480 --> 00:18:13,280
so that we won't we won't find out

00:18:11,520 --> 00:18:15,280
after some time that we have lots of

00:18:13,280 --> 00:18:18,480
duplicated code

00:18:15,280 --> 00:18:20,799
uh yes so

00:18:18,480 --> 00:18:22,720
we just need to we just need to find out

00:18:20,799 --> 00:18:25,919
which is which is used where

00:18:22,720 --> 00:18:26,720
and do a lot of code do a lot of code

00:18:25,919 --> 00:18:29,039
review

00:18:26,720 --> 00:18:29,760
and good practices so that it will help

00:18:29,039 --> 00:18:33,120
us detect

00:18:29,760 --> 00:18:36,880
any problems also the id is i pretty

00:18:33,120 --> 00:18:39,840
have many extensions that could

00:18:36,880 --> 00:18:40,799
track the duplicates or unused code so

00:18:39,840 --> 00:18:45,600
just check your

00:18:40,799 --> 00:18:49,120
check if your ide has anything like that

00:18:45,600 --> 00:18:50,480
and that's all from me thank you i had

00:18:49,120 --> 00:18:54,480
to speed up in

00:18:50,480 --> 00:18:54,480
in the end but i think i made it

00:18:54,840 --> 00:19:00,799
uh thank you

00:18:57,440 --> 00:19:00,799
and do you have any questions

00:19:02,700 --> 00:19:11,760
[Applause]

00:19:09,600 --> 00:19:12,960
yeah it's time for questions now uh

00:19:11,760 --> 00:19:16,000
thanks a lot for your

00:19:12,960 --> 00:19:18,080
talk rad it was really good so

00:19:16,000 --> 00:19:20,160
we have one question is vulture or

00:19:18,080 --> 00:19:22,559
software

00:19:20,160 --> 00:19:24,000
uh yes vulture is a python package uh

00:19:22,559 --> 00:19:28,160
but also it's a cli

00:19:24,000 --> 00:19:31,520
tool you can install it with pip or with

00:19:28,160 --> 00:19:36,640
it with your os package

00:19:31,520 --> 00:19:38,799
all right right any other questions

00:19:36,640 --> 00:19:41,200
you can pop in the questions in the qa

00:19:38,799 --> 00:19:41,200
window

00:19:42,160 --> 00:19:47,840
um i can see

00:19:47,919 --> 00:19:56,240
where's the qa window

00:19:52,880 --> 00:19:56,799
all right uh we'll wait for a couple of

00:19:56,240 --> 00:20:01,039
minutes

00:19:56,799 --> 00:20:01,520
and if no one has any questions you can

00:20:01,039 --> 00:20:04,640
follow

00:20:01,520 --> 00:20:07,360
with red in the microsoft top

00:20:04,640 --> 00:20:08,880
uh breakout channel i'm posting the link

00:20:07,360 --> 00:20:11,200
to the same in the microsoft track

00:20:08,880 --> 00:20:11,200
channel

00:20:14,480 --> 00:20:21,840
okay thank you yep thanks a lot tribe

00:20:18,000 --> 00:20:21,840
it was really nice session

00:20:23,679 --> 00:20:30,159
okay yeah it doesn't seem like

00:20:26,960 --> 00:20:30,159
there's any question coming

00:20:32,840 --> 00:20:35,840
um

00:20:38,960 --> 00:20:42,880
okay i now see the qi questions

00:20:45,760 --> 00:20:52,240
okay i'm seeing okay so that's the

00:20:48,960 --> 00:20:55,600
that's it yes thank you for uh

00:20:52,240 --> 00:20:59,039
for keeping the room

00:20:55,600 --> 00:21:04,159
and yeah so there's a question do you

00:20:59,039 --> 00:21:04,159
have a process to detect dead code

00:21:04,559 --> 00:21:07,039
process

00:21:11,679 --> 00:21:14,960
i usually start with vulture and as i

00:21:14,640 --> 00:21:18,159
said

00:21:14,960 --> 00:21:20,720
i start with looking for classes and

00:21:18,159 --> 00:21:21,679
functions in the vulture log because

00:21:20,720 --> 00:21:24,960
it's uh

00:21:21,679 --> 00:21:27,679
most most probable that

00:21:24,960 --> 00:21:30,080
virtual will detect unused class or

00:21:27,679 --> 00:21:30,080
function

00:21:35,679 --> 00:21:42,240
and also if the project

00:21:39,039 --> 00:21:43,280
has some tests i run the test coverage

00:21:42,240 --> 00:21:46,880
to see

00:21:43,280 --> 00:21:50,240
if the parts with missing coverage are

00:21:46,880 --> 00:21:52,320
really used because

00:21:50,240 --> 00:21:53,280
sometimes it's easy to spot especially

00:21:52,320 --> 00:21:56,080
if you have

00:21:53,280 --> 00:21:57,039
if you are if you are measuring the

00:21:56,080 --> 00:21:58,559
branch coverage

00:21:57,039 --> 00:22:00,080
if you have branch coverage enabled in

00:21:58,559 --> 00:22:03,360
the coverage rc

00:22:00,080 --> 00:22:04,159
file uh you can see if you can see a big

00:22:03,360 --> 00:22:06,159
branch

00:22:04,159 --> 00:22:07,520
which is uncovered which means that

00:22:06,159 --> 00:22:10,159
means that either

00:22:07,520 --> 00:22:13,120
the tests never touched it or maybe it

00:22:10,159 --> 00:22:16,720
is really unused and you can

00:22:13,120 --> 00:22:19,840
find it so in most cases it is

00:22:16,720 --> 00:22:22,159
just finding uh

00:22:19,840 --> 00:22:23,679
finding possible places where there

00:22:22,159 --> 00:22:27,360
where there is unused code

00:22:23,679 --> 00:22:29,440
and checking it manually later verifying

00:22:27,360 --> 00:22:32,080
it

00:22:29,440 --> 00:22:32,080
by a human

00:22:34,400 --> 00:22:37,600
well thanks for answering that question

00:22:36,480 --> 00:22:41,600
i think that was

00:22:37,600 --> 00:22:44,640
really good explanation

00:22:41,600 --> 00:22:48,240
okay uh so if

00:22:44,640 --> 00:22:49,520
no one has any questions uh maybe we can

00:22:48,240 --> 00:22:52,960
conclude this

00:22:49,520 --> 00:22:56,240
session and you can follow up with the

00:22:52,960 --> 00:23:00,159
rad in the breakout channel

00:22:56,240 --> 00:23:01,679
named talk decoding uh joy of deleting

00:23:00,159 --> 00:23:03,280
code

00:23:01,679 --> 00:23:06,159
i posted the same in the microsoft

00:23:03,280 --> 00:23:09,840
channel you can follow on that

00:23:06,159 --> 00:23:09,840

YouTube URL: https://www.youtube.com/watch?v=Ly-JNvmc34U


