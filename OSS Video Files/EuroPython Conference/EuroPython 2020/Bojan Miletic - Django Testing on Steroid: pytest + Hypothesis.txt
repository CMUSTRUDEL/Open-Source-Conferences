Title: Bojan Miletic - Django Testing on Steroid: pytest + Hypothesis
Publication date: 2020-09-15
Playlist: EuroPython 2020
Description: 
	"Django Testing on Steroid: pytest + Hypothesis
EuroPython 2020 - Talk - 2020-07-23 - Brian
Online

By Bojan Miletic

The talk should hopefully provided value to all listeners, regardless of their knowledge level, but preferably you have some knowledge of pytest test parametrization

We'll use a simple Django project, setup initial tests using pytest with some parallelization in the opening part and afterwards start extending them with Hypothesis. We'll go over the details, how you can use them to detect edge cases, extend test coverage and if time allows it how you can use them to test django models.



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2020.europython.eu/events/speaker-release-agreement/

    "
Captions: 
	00:00:06,080 --> 00:00:09,599
so i think uh

00:00:07,600 --> 00:00:10,639
you're ready to go oyan is going to be

00:00:09,599 --> 00:00:13,280
talking about

00:00:10,639 --> 00:00:14,240
hypotheses with python so i think we're

00:00:13,280 --> 00:00:18,400
interested to talk

00:00:14,240 --> 00:00:21,600
so it's all yours good luck

00:00:18,400 --> 00:00:23,359
okay uh first of all thanks everybody

00:00:21,600 --> 00:00:26,880
for coming uh this is my

00:00:23,359 --> 00:00:31,039
first uh talk ever so

00:00:26,880 --> 00:00:33,440
please be gentle i'll be going over some

00:00:31,039 --> 00:00:34,320
the jungle testing especially using

00:00:33,440 --> 00:00:36,880
python

00:00:34,320 --> 00:00:38,399
hypothesis for test generation we're

00:00:36,880 --> 00:00:41,840
going to see how we can make

00:00:38,399 --> 00:00:44,960
thousands of tests with a relatively

00:00:41,840 --> 00:00:48,239
small code

00:00:44,960 --> 00:00:50,559
now uh my name is boeing militic

00:00:48,239 --> 00:00:52,239
i'm the founder of terrific i've been

00:00:50,559 --> 00:00:55,280
working as python developer

00:00:52,239 --> 00:00:56,800
for more than a decade and i absolutely

00:00:55,280 --> 00:00:59,840
love talking about

00:00:56,800 --> 00:01:03,359
python so you can connect with me on

00:00:59,840 --> 00:01:05,439
linkedin or on email

00:01:03,359 --> 00:01:08,240
uh sorry but i'm not very active on

00:01:05,439 --> 00:01:11,439
other social networks

00:01:08,240 --> 00:01:12,240
so uh during this presentation we're

00:01:11,439 --> 00:01:16,400
going to cover

00:01:12,240 --> 00:01:18,799
a pi test by this junko plugin

00:01:16,400 --> 00:01:19,600
and after that we're going to move to

00:01:18,799 --> 00:01:22,960
using uh

00:01:19,600 --> 00:01:25,280
python parameterization to generate text

00:01:22,960 --> 00:01:26,240
tests after that we are going to add

00:01:25,280 --> 00:01:30,799
hypothesis

00:01:26,240 --> 00:01:30,799
into the mix and see how far we can go

00:01:31,360 --> 00:01:38,560
uh main point

00:01:34,880 --> 00:01:40,960
uh to mention is that

00:01:38,560 --> 00:01:42,240
we're going to be focusing on pi tests

00:01:40,960 --> 00:01:44,640
and hypotheses

00:01:42,240 --> 00:01:45,680
uh but this is something you can apply

00:01:44,640 --> 00:01:49,280
to basically

00:01:45,680 --> 00:01:52,320
everything uh any kind of python script

00:01:49,280 --> 00:01:54,240
function it's we are

00:01:52,320 --> 00:01:55,840
talking about in the context of django

00:01:54,240 --> 00:01:58,880
but it's pretty much

00:01:55,840 --> 00:02:00,799
usable everywhere

00:01:58,880 --> 00:02:02,640
since you only have half an hour we're

00:02:00,799 --> 00:02:03,680
not going to go much into the depth

00:02:02,640 --> 00:02:07,280
because

00:02:03,680 --> 00:02:10,399
by test patterns jungle hypothesis

00:02:07,280 --> 00:02:12,800
good practices and stuff like that

00:02:10,399 --> 00:02:15,520
on its own would take much more time so

00:02:12,800 --> 00:02:17,440
i'm just going to give you a brief

00:02:15,520 --> 00:02:18,959
overview of the things and hopefully get

00:02:17,440 --> 00:02:22,000
you interested

00:02:18,959 --> 00:02:24,959
to start discovering more things

00:02:22,000 --> 00:02:25,599
on your own uh if you have any questions

00:02:24,959 --> 00:02:27,520
later

00:02:25,599 --> 00:02:29,200
feel free to ask me i'll be on the

00:02:27,520 --> 00:02:32,480
channel and

00:02:29,200 --> 00:02:34,319
let's get started uh

00:02:32,480 --> 00:02:36,879
for this example i decided to make a

00:02:34,319 --> 00:02:39,120
website for keeping track of unicorns

00:02:36,879 --> 00:02:42,480
basically we're going to add new unicorn

00:02:39,120 --> 00:02:44,560
and list added unicorns

00:02:42,480 --> 00:02:47,280
we're going to focus basically just one

00:02:44,560 --> 00:02:47,280
end point

00:02:48,319 --> 00:02:55,360
and i believe we can generate tons of

00:02:52,959 --> 00:02:57,200
huge number of tests uh for that end

00:02:55,360 --> 00:02:59,920
point

00:02:57,200 --> 00:03:00,720
uh before testing some of the good

00:02:59,920 --> 00:03:03,280
practices

00:03:00,720 --> 00:03:04,319
is that you know what you're building

00:03:03,280 --> 00:03:06,080
sometimes

00:03:04,319 --> 00:03:08,400
when you're a programmer you're going to

00:03:06,080 --> 00:03:11,200
get specification

00:03:08,400 --> 00:03:11,680
and clearly define inputs outputs and

00:03:11,200 --> 00:03:14,400
that's

00:03:11,680 --> 00:03:17,120
perfectly fine but when you're doing

00:03:14,400 --> 00:03:19,360
project on your own

00:03:17,120 --> 00:03:20,159
take some more time before jumping into

00:03:19,360 --> 00:03:24,000
the code

00:03:20,159 --> 00:03:27,120
it can save you quite a lot of time

00:03:24,000 --> 00:03:31,440
also uh since uh in this project

00:03:27,120 --> 00:03:35,440
we're going to be working uh rest api

00:03:31,440 --> 00:03:39,200
you want to write api specification

00:03:35,440 --> 00:03:43,360
and then consult your front-end team

00:03:39,200 --> 00:03:45,760
or some other person when writing api

00:03:43,360 --> 00:03:48,080
it's quite helpful to have multiple

00:03:45,760 --> 00:03:51,519
persons

00:03:48,080 --> 00:03:51,920
okay and once we have api specification

00:03:51,519 --> 00:03:55,439
set

00:03:51,920 --> 00:03:55,439
then you know what we need to do

00:03:56,000 --> 00:04:00,799
as you can see uh here is the example of

00:03:58,319 --> 00:04:04,239
the endpoint we are going to be using

00:04:00,799 --> 00:04:04,879
it uses just two parameters color in the

00:04:04,239 --> 00:04:08,000
name for

00:04:04,879 --> 00:04:11,040
the unicorn and it returns uh

00:04:08,000 --> 00:04:14,159
status cos uh 201 when it has

00:04:11,040 --> 00:04:18,400
successfully added unicorn to the

00:04:14,159 --> 00:04:20,639
database or 400 if we mess something up

00:04:18,400 --> 00:04:22,800
uh what we're going to do is make sure

00:04:20,639 --> 00:04:26,479
to generate as much

00:04:22,800 --> 00:04:29,120
as much as possible 400 responses

00:04:26,479 --> 00:04:30,000
basically try not to crash the server

00:04:29,120 --> 00:04:33,440
and get

00:04:30,000 --> 00:04:33,440
some 500 error

00:04:34,720 --> 00:04:41,040
uh for a unicore model it's

00:04:37,759 --> 00:04:45,040
very very simple i try to focus

00:04:41,040 --> 00:04:48,960
mostly on the testing side which made my

00:04:45,040 --> 00:04:53,120
uh jungle site a bit weaker we have

00:04:48,960 --> 00:04:56,800
one uh animal for the colors

00:04:53,120 --> 00:05:00,479
and then some limitation pretty simple

00:04:56,800 --> 00:05:03,360
so the name must be at least

00:05:00,479 --> 00:05:04,479
two letters long and it marks 30 letters

00:05:03,360 --> 00:05:08,160
long

00:05:04,479 --> 00:05:10,000
now when writing tests a big big number

00:05:08,160 --> 00:05:15,039
of tests is going to be located

00:05:10,000 --> 00:05:18,400
on the domain limitations of a specific

00:05:15,039 --> 00:05:19,680
value for example in the name if there

00:05:18,400 --> 00:05:24,160
is some kind of error

00:05:19,680 --> 00:05:27,280
it's going to happen either on

00:05:24,160 --> 00:05:28,000
character that is uh two uh two

00:05:27,280 --> 00:05:30,800
characters

00:05:28,000 --> 00:05:31,919
the text that is two characters long one

00:05:30,800 --> 00:05:34,639
character long

00:05:31,919 --> 00:05:35,199
uh 30 characters long and 31 characters

00:05:34,639 --> 00:05:38,080
long

00:05:35,199 --> 00:05:39,520
also we're going to test empty strings

00:05:38,080 --> 00:05:43,600
those are some extremes

00:05:39,520 --> 00:05:45,600
uh and they cover 99

00:05:43,600 --> 00:05:48,080
of the errors that happen it's quite

00:05:45,600 --> 00:05:49,840
unlikely that we are going to have

00:05:48,080 --> 00:05:51,199
some sort of error with the string that

00:05:49,840 --> 00:05:54,560
is

00:05:51,199 --> 00:05:57,120
length of 10. so always focus on the

00:05:54,560 --> 00:05:57,120
extremes

00:05:57,600 --> 00:06:04,400
and uh now we can start with our simple

00:06:00,880 --> 00:06:06,800
test uh in this first test

00:06:04,400 --> 00:06:08,479
we are sending just empty data for that

00:06:06,800 --> 00:06:12,720
to expect

00:06:08,479 --> 00:06:14,479
our back-end api to return us

00:06:12,720 --> 00:06:19,199
a simple error and tell us we're not

00:06:14,479 --> 00:06:19,199
doing fine error 400 invalid requests

00:06:19,280 --> 00:06:22,560
ideally when you're returning uh

00:06:21,280 --> 00:06:25,680
requests

00:06:22,560 --> 00:06:27,199
uh you wanna provide uh some text in the

00:06:25,680 --> 00:06:29,919
body of the request

00:06:27,199 --> 00:06:30,479
basically tell your friends and friends

00:06:29,919 --> 00:06:34,319
uh

00:06:30,479 --> 00:06:35,840
what they need to do to fix this uh

00:06:34,319 --> 00:06:38,479
but since we are doing as

00:06:35,840 --> 00:06:41,120
minimalistically as possible for this

00:06:38,479 --> 00:06:43,759
uh we're just returning status quote uh

00:06:41,120 --> 00:06:46,160
nothing more

00:06:43,759 --> 00:06:49,120
and the next one is basically checking

00:06:46,160 --> 00:06:51,919
if the client is uh

00:06:49,120 --> 00:06:52,240
if the unicorn is successfully added now

00:06:51,919 --> 00:06:54,560
uh

00:06:52,240 --> 00:06:55,840
one thing i will mention you can see

00:06:54,560 --> 00:06:59,199
that we have some

00:06:55,840 --> 00:06:59,759
nice fixtures in pi test uh that's the

00:06:59,199 --> 00:07:03,919
client

00:06:59,759 --> 00:07:06,800
and client db now uh

00:07:03,919 --> 00:07:08,720
that's all thanks to pi uh test jungle

00:07:06,800 --> 00:07:11,680
plugin

00:07:08,720 --> 00:07:12,639
client will allow us to basically use uh

00:07:11,680 --> 00:07:14,960
jungle

00:07:12,639 --> 00:07:16,000
as you would use the normal request

00:07:14,960 --> 00:07:19,599
library or something like

00:07:16,000 --> 00:07:22,880
that as you can see i'm not calling the

00:07:19,599 --> 00:07:26,319
view function directly but using the url

00:07:22,880 --> 00:07:29,520
which is quite handy and the

00:07:26,319 --> 00:07:33,199
database fixture

00:07:29,520 --> 00:07:34,000
in the second text uh test is basically

00:07:33,199 --> 00:07:36,800
telling us

00:07:34,000 --> 00:07:40,000
that uh this test will need access to

00:07:36,800 --> 00:07:41,919
database otherwise it's going to crash

00:07:40,000 --> 00:07:45,840
so those are the two fixtures that

00:07:41,919 --> 00:07:45,840
you're probably going to use the most

00:07:47,280 --> 00:07:52,080
onto the next things and here is our

00:07:50,319 --> 00:07:55,280
simple view

00:07:52,080 --> 00:07:58,240
uh basically i created a class

00:07:55,280 --> 00:07:58,800
based view since enormous situation

00:07:58,240 --> 00:08:01,039
we're not

00:07:58,800 --> 00:08:03,039
going to have just post we're going to

00:08:01,039 --> 00:08:06,080
have uh

00:08:03,039 --> 00:08:09,520
get delete uh options and

00:08:06,080 --> 00:08:10,879
a bunch of other stuff but for now just

00:08:09,520 --> 00:08:14,080
post

00:08:10,879 --> 00:08:16,000
if you can see uh my validated

00:08:14,080 --> 00:08:18,319
validation here is basically just

00:08:16,000 --> 00:08:19,360
checking if the dictionary is empty if

00:08:18,319 --> 00:08:23,039
yes

00:08:19,360 --> 00:08:26,160
uh return uh http

00:08:23,039 --> 00:08:28,319
or 400 that request

00:08:26,160 --> 00:08:31,120
which is perfectly fine because my test

00:08:28,319 --> 00:08:33,680
here is passing

00:08:31,120 --> 00:08:35,120
and afterwards i'm just saying it and

00:08:33,680 --> 00:08:38,399
it's all good

00:08:35,120 --> 00:08:42,080
when doing tdd it's very important

00:08:38,399 --> 00:08:45,760
to not get ahead of yourself for i love

00:08:42,080 --> 00:08:47,200
writing tests that fail because when you

00:08:45,760 --> 00:08:50,399
write a test that passes

00:08:47,200 --> 00:08:53,200
right away you don't know if your test

00:08:50,399 --> 00:08:55,120
has any errors in it if you're testing

00:08:53,200 --> 00:08:55,519
it wrong or if everything's perfectly

00:08:55,120 --> 00:08:59,440
fine

00:08:55,519 --> 00:09:03,519
it's much easier to debug when you uh

00:08:59,440 --> 00:09:03,519
your test crashes then you fix the code

00:09:04,000 --> 00:09:09,839
okay and now we're going to use pie test

00:09:08,080 --> 00:09:12,640
parameterize

00:09:09,839 --> 00:09:13,760
it works quite simple basically just

00:09:12,640 --> 00:09:16,000
type this

00:09:13,760 --> 00:09:16,880
give it a name of the parameter which is

00:09:16,000 --> 00:09:20,080
going to

00:09:16,880 --> 00:09:24,399
be parameterized here it is key

00:09:20,080 --> 00:09:27,920
and the list of values now

00:09:24,399 --> 00:09:31,600
as you can see in this example here it's

00:09:27,920 --> 00:09:33,279
very very basic but the idea is uh

00:09:31,600 --> 00:09:36,080
we don't want to repeat the code we

00:09:33,279 --> 00:09:38,160
could easily split this into two tests

00:09:36,080 --> 00:09:39,839
one that has only a name in the request

00:09:38,160 --> 00:09:41,440
the one that has only color in the

00:09:39,839 --> 00:09:44,480
request

00:09:41,440 --> 00:09:46,720
like this we only have uh one test

00:09:44,480 --> 00:09:49,519
it's quite trivial in this example but

00:09:46,720 --> 00:09:51,760
when you have a much more complex

00:09:49,519 --> 00:09:54,160
request structure is going to save you

00:09:51,760 --> 00:09:56,160
quite a lot of time

00:09:54,160 --> 00:09:57,920
almost regarding the pi test mark

00:09:56,160 --> 00:10:00,959
parameters

00:09:57,920 --> 00:10:03,279
you can supply multiple parameters that

00:10:00,959 --> 00:10:03,279
you wish

00:10:03,519 --> 00:10:07,279
behind the key in the as a first

00:10:06,000 --> 00:10:10,160
parameter you can just

00:10:07,279 --> 00:10:11,920
add comma and list the second parameter

00:10:10,160 --> 00:10:14,240
and instead of the list of values it's

00:10:11,920 --> 00:10:17,360
going to be a list of tuples

00:10:14,240 --> 00:10:19,600
that are the same length if not is the

00:10:17,360 --> 00:10:24,000
number of parameters

00:10:19,600 --> 00:10:27,360
okay so um

00:10:24,000 --> 00:10:30,720
next thing we're going to do is once we

00:10:27,360 --> 00:10:31,440
edit test that validate the structure of

00:10:30,720 --> 00:10:34,640
the

00:10:31,440 --> 00:10:38,000
request is basically try to send some

00:10:34,640 --> 00:10:38,000
uh junk data to our

00:10:38,160 --> 00:10:43,920
end point because

00:10:41,279 --> 00:10:45,760
also a good tip when testing is that the

00:10:43,920 --> 00:10:46,320
majority of your tests are going to be

00:10:45,760 --> 00:10:49,200
located

00:10:46,320 --> 00:10:51,519
at the borders of your system that means

00:10:49,200 --> 00:10:52,399
uh you're going to have to extensively

00:10:51,519 --> 00:10:55,600
test

00:10:52,399 --> 00:10:56,800
your api where you're receiving response

00:10:55,600 --> 00:10:59,760
requests

00:10:56,800 --> 00:11:01,279
from the user and the third party that

00:10:59,760 --> 00:11:04,800
you are using where you are sending

00:11:01,279 --> 00:11:07,360
requests and receiving responses

00:11:04,800 --> 00:11:08,079
uh since uh in majority of the cases

00:11:07,360 --> 00:11:11,200
we're going to

00:11:08,079 --> 00:11:12,720
uh get the white stuff from our

00:11:11,200 --> 00:11:15,760
front-end team

00:11:12,720 --> 00:11:18,480
which would be using this api but

00:11:15,760 --> 00:11:20,560
uh they may get something wrong or some

00:11:18,480 --> 00:11:21,519
kind of malicious user is going to send

00:11:20,560 --> 00:11:23,040
us

00:11:21,519 --> 00:11:24,880
some crazy stuff that we're not

00:11:23,040 --> 00:11:28,000
expecting

00:11:24,880 --> 00:11:31,200
uh for that we need to try drawing

00:11:28,000 --> 00:11:34,320
everything uh at the api and

00:11:31,200 --> 00:11:37,839
hopefully getting just here 400 which is

00:11:34,320 --> 00:11:39,360
user request is invalid uh what we don't

00:11:37,839 --> 00:11:42,320
want to do is get

00:11:39,360 --> 00:11:44,000
500 which is a series of errors that

00:11:42,320 --> 00:11:47,440
correspond to server

00:11:44,000 --> 00:11:49,760
crashes and stuff like that basically

00:11:47,440 --> 00:11:53,279
we want to be able to gracefully handle

00:11:49,760 --> 00:11:53,279
every exception possible

00:11:54,800 --> 00:12:01,760
now uh as you can see we got uh

00:11:58,000 --> 00:12:04,560
from here uh three tests above

00:12:01,760 --> 00:12:06,160
from this uh we got two tests so that's

00:12:04,560 --> 00:12:12,480
five tests and we just wrote

00:12:06,160 --> 00:12:15,839
uh two and it's time for uh hypothesis

00:12:12,480 --> 00:12:17,360
now uh hypothesis is a property-based

00:12:15,839 --> 00:12:22,560
testing library

00:12:17,360 --> 00:12:22,560
it uses it

00:12:23,360 --> 00:12:29,360
um this is a starting point

00:12:26,639 --> 00:12:31,040
and it had quite a lot of uh good stuff

00:12:29,360 --> 00:12:34,720
that we can use

00:12:31,040 --> 00:12:35,920
basically in hypothesis you specify your

00:12:34,720 --> 00:12:38,079
strategy

00:12:35,920 --> 00:12:39,440
here we are saying name is going to be a

00:12:38,079 --> 00:12:42,959
text

00:12:39,440 --> 00:12:46,399
and the text is going to be

00:12:42,959 --> 00:12:49,920
minimum size 2 and max size 30.

00:12:46,399 --> 00:12:50,560
the same thing we got when we define the

00:12:49,920 --> 00:12:53,760
field

00:12:50,560 --> 00:12:56,320
for the name now uh

00:12:53,760 --> 00:12:56,959
usually what's going to happen is we

00:12:56,320 --> 00:13:02,160
could write

00:12:56,959 --> 00:13:06,639
for example in pi test parameterize

00:13:02,160 --> 00:13:08,000
just a fast range of values at the same

00:13:06,639 --> 00:13:11,839
length from

00:13:08,000 --> 00:13:16,000
2 to 30 and basically multiply

00:13:11,839 --> 00:13:16,320
character a or b by that number and get

00:13:16,000 --> 00:13:19,839
the

00:13:16,320 --> 00:13:22,480
string length which is good

00:13:19,839 --> 00:13:24,079
which is going to work but uh like

00:13:22,480 --> 00:13:27,680
almost every single

00:13:24,079 --> 00:13:31,760
web input that requires text uh

00:13:27,680 --> 00:13:34,240
we're gonna get unicode and uh

00:13:31,760 --> 00:13:36,079
hypothesis is gonna provide us with a

00:13:34,240 --> 00:13:39,519
bunch of crazy stuff

00:13:36,079 --> 00:13:43,680
ascii text unicode text

00:13:39,519 --> 00:13:46,399
characters invalidly formatted skin puts

00:13:43,680 --> 00:13:48,160
and what we want to make sure is that we

00:13:46,399 --> 00:13:51,360
get uh

00:13:48,160 --> 00:13:54,639
status code 201 that everything is set

00:13:51,360 --> 00:13:58,320
in the database as it should be

00:13:54,639 --> 00:14:00,079
uh if you're doing some pre-processing

00:13:58,320 --> 00:14:02,399
lots of time this is where we're going

00:14:00,079 --> 00:14:06,000
to catch and call uh

00:14:02,399 --> 00:14:06,000
unicode errors with the text

00:14:06,399 --> 00:14:11,519
okay uh now that we have successfully

00:14:09,920 --> 00:14:13,920
tested

00:14:11,519 --> 00:14:16,000
this case we want to test all the

00:14:13,920 --> 00:14:19,519
invalid uh

00:14:16,000 --> 00:14:23,440
cases as well for example we can

00:14:19,519 --> 00:14:27,440
set up one strategy for text

00:14:23,440 --> 00:14:31,199
that is using maximal size of

00:14:27,440 --> 00:14:32,079
string one basically going to zero and

00:14:31,199 --> 00:14:36,079
one

00:14:32,079 --> 00:14:39,519
it's not is quite

00:14:36,079 --> 00:14:41,440
complex in this case but i'm just asking

00:14:39,519 --> 00:14:43,199
for a little bit of abstraction because

00:14:41,440 --> 00:14:45,360
you can apply this to pretty much

00:14:43,199 --> 00:14:50,079
anything

00:14:45,360 --> 00:14:50,079
also okay

00:14:51,920 --> 00:14:59,839
next thing we are also going to add the

00:14:55,600 --> 00:14:59,839
tests that are outside of maximum size

00:15:00,639 --> 00:15:05,040
that will allow us to test also a bunch

00:15:03,440 --> 00:15:09,279
of crazy stuff

00:15:05,040 --> 00:15:09,279
now the reason we are

00:15:09,839 --> 00:15:13,600
we're limiting the size we're not

00:15:12,560 --> 00:15:16,160
putting

00:15:13,600 --> 00:15:16,639
ten thousand or some other stuff is

00:15:16,160 --> 00:15:20,079
because

00:15:16,639 --> 00:15:25,440
the in sql when you define a field

00:15:20,079 --> 00:15:25,440
it has a fixed uh size in memory

00:15:25,760 --> 00:15:32,480
okay uh with this we did some

00:15:29,199 --> 00:15:35,839
basic basic overview of hypothesis by

00:15:32,480 --> 00:15:40,240
this and by this parametrize

00:15:35,839 --> 00:15:42,079
now uh i'm open to the questions

00:15:40,240 --> 00:15:44,079
feel free to ask me anything and that

00:15:42,079 --> 00:15:47,920
way i can go more into

00:15:44,079 --> 00:15:50,000
uh depth regarding concept interesting

00:15:47,920 --> 00:15:51,839
so for for anyone who wanted to ask

00:15:50,000 --> 00:15:54,959
questions there is a q a

00:15:51,839 --> 00:15:57,680
bottom and they need to click there

00:15:54,959 --> 00:15:59,680
and and ask the question it's also

00:15:57,680 --> 00:16:01,440
possible if you click in the right hand

00:15:59,680 --> 00:16:03,120
align name allow you for

00:16:01,440 --> 00:16:05,600
for the question so if anyone wants to

00:16:03,120 --> 00:16:05,600
ask that's

00:16:06,000 --> 00:16:09,839
now is the time so thank you very much

00:16:12,720 --> 00:16:15,040
okay

00:16:16,160 --> 00:16:24,720
okay any questions

00:16:22,560 --> 00:16:26,880
my presentation was so good that nobody

00:16:24,720 --> 00:16:28,480
had any additional question

00:16:26,880 --> 00:16:30,399
you were seems that you were really

00:16:28,480 --> 00:16:31,040
really good we have a couple of

00:16:30,399 --> 00:16:33,199
questions

00:16:31,040 --> 00:16:33,640
oh we have two now we have two now okay

00:16:33,199 --> 00:16:35,199
so

00:16:33,640 --> 00:16:39,360
[Music]

00:16:35,199 --> 00:16:42,720
uh one person is asking what is the

00:16:39,360 --> 00:16:46,639
uh given decorator

00:16:42,720 --> 00:16:49,040
oh yes i can explain that

00:16:46,639 --> 00:16:51,759
that's a very good question uh given

00:16:49,040 --> 00:16:55,120
decorator is provided by hypothesis

00:16:51,759 --> 00:16:58,959
you're basically uh telling here

00:16:55,120 --> 00:17:00,639
uh like we did here with pi parameters

00:16:58,959 --> 00:17:04,000
we're telling this function

00:17:00,639 --> 00:17:07,679
uh we're gonna supply multiple values

00:17:04,000 --> 00:17:11,760
for the name and here

00:17:07,679 --> 00:17:13,919
we are saying okay hypothesis is going

00:17:11,760 --> 00:17:14,799
to supply you multiple values for the

00:17:13,919 --> 00:17:17,280
name

00:17:14,799 --> 00:17:18,000
and generated by default this is going

00:17:17,280 --> 00:17:22,559
to supply

00:17:18,000 --> 00:17:24,880
you 100 different kinds of texts that

00:17:22,559 --> 00:17:27,199
correspond to these parameters uh

00:17:24,880 --> 00:17:28,000
there's you can use another decorator

00:17:27,199 --> 00:17:31,840
about this

00:17:28,000 --> 00:17:36,240
to set it to a higher or lower number

00:17:31,840 --> 00:17:38,680
this is the hypothesis decorator okay

00:17:36,240 --> 00:17:40,720
so the other question is um

00:17:38,680 --> 00:17:42,320
[Music]

00:17:40,720 --> 00:17:44,840
what's your feeling what was your

00:17:42,320 --> 00:17:48,880
thought about python's versus pi

00:17:44,840 --> 00:17:52,000
unit if you have a new opinion

00:17:48,880 --> 00:17:56,000
uh well when

00:17:52,000 --> 00:17:56,000
it's a difficult question for me because

00:17:56,160 --> 00:18:00,559
when i started i was using unit testing

00:17:59,280 --> 00:18:03,360
and it was

00:18:00,559 --> 00:18:04,960
pretty much similar like in uh other

00:18:03,360 --> 00:18:08,000
frameworks for me

00:18:04,960 --> 00:18:11,520
but when i started using pi tests uh

00:18:08,000 --> 00:18:14,799
it felt more platonic to me

00:18:11,520 --> 00:18:17,360
tests are much prettier and i

00:18:14,799 --> 00:18:18,640
like the fixtures and bunch of other

00:18:17,360 --> 00:18:22,000
stuff that gets

00:18:18,640 --> 00:18:25,760
provided here so

00:18:22,000 --> 00:18:29,120
i prefer using pie test

00:18:25,760 --> 00:18:30,000
mostly because it's my time for the

00:18:29,120 --> 00:18:32,720
style

00:18:30,000 --> 00:18:33,200
of programming uh i don't think you can

00:18:32,720 --> 00:18:36,320
get

00:18:33,200 --> 00:18:38,400
wrong with unit tests as well an

00:18:36,320 --> 00:18:40,320
important thing is to have tests

00:18:38,400 --> 00:18:42,160
find the framework that works best for

00:18:40,320 --> 00:18:45,360
you uh

00:18:42,160 --> 00:18:47,919
one plus side for pi test is that it has

00:18:45,360 --> 00:18:49,600
plugins for pretty much anything

00:18:47,919 --> 00:18:52,160
i'm not sure what the situation with the

00:18:49,600 --> 00:18:56,400
units to test

00:18:52,160 --> 00:18:59,520
okay so next question is

00:18:56,400 --> 00:19:02,640
how you define the number of cases the

00:18:59,520 --> 00:19:05,039
hypothesis has to generate

00:19:02,640 --> 00:19:05,039
oh yes

00:19:05,840 --> 00:19:11,360
above given you have

00:19:08,960 --> 00:19:12,400
another decorator which i don't know on

00:19:11,360 --> 00:19:15,440
top of my head

00:19:12,400 --> 00:19:18,880
i'll type into the chat uh after this

00:19:15,440 --> 00:19:22,320
uh you can set that it's add settings

00:19:18,880 --> 00:19:24,799
i believe and you define number of how

00:19:22,320 --> 00:19:29,919
much you want when running pi

00:19:24,799 --> 00:19:29,919
test you can provide additional argument

00:19:31,200 --> 00:19:38,080
dash dash show hypothesis uh

00:19:35,120 --> 00:19:39,120
this grip statistics and it will show

00:19:38,080 --> 00:19:42,160
you how many

00:19:39,120 --> 00:19:45,840
uh tests it has generated

00:19:42,160 --> 00:19:48,880
uh for you so uh please write me

00:19:45,840 --> 00:19:49,520
in the chat channel and i'll send you

00:19:48,880 --> 00:19:51,440
the code

00:19:49,520 --> 00:19:53,039
examples and we can discuss further if

00:19:51,440 --> 00:19:55,360
you like

00:19:53,039 --> 00:19:56,400
okay so i i just going to repeat that

00:19:55,360 --> 00:19:59,039
there is a talk

00:19:56,400 --> 00:20:00,320
django testing and i'm sure that that's

00:19:59,039 --> 00:20:02,640
the channel that you can follow the

00:20:00,320 --> 00:20:05,760
discussion so one more question

00:20:02,640 --> 00:20:07,919
um robert is asking

00:20:05,760 --> 00:20:12,480
do you have any recommendations for

00:20:07,919 --> 00:20:15,600
applying tests to an existing codebase

00:20:12,480 --> 00:20:18,400
yes now this

00:20:15,600 --> 00:20:20,320
is something that happens quite often

00:20:18,400 --> 00:20:24,880
you get the code base uh

00:20:20,320 --> 00:20:24,880
that has absolutely zero tests

00:20:25,520 --> 00:20:30,480
uh first of all before you even touch

00:20:28,880 --> 00:20:32,799
the code

00:20:30,480 --> 00:20:34,159
you are not going to search with tests

00:20:32,799 --> 00:20:35,679
like this

00:20:34,159 --> 00:20:37,840
you're going to have to start with

00:20:35,679 --> 00:20:41,520
functional testing

00:20:37,840 --> 00:20:44,960
basically start large test

00:20:41,520 --> 00:20:47,360
entire system and outputs to make sure

00:20:44,960 --> 00:20:50,559
you don't break anything

00:20:47,360 --> 00:20:51,280
large functionality and once you get

00:20:50,559 --> 00:20:54,799
that down

00:20:51,280 --> 00:20:57,679
then you can start moving code around

00:20:54,799 --> 00:20:59,440
then you modify a little bit of code

00:20:57,679 --> 00:21:03,120
write the test for that

00:20:59,440 --> 00:21:06,559
see if anything breaks down

00:21:03,120 --> 00:21:09,679
don't start with the functions start big

00:21:06,559 --> 00:21:12,480
that's the way i did it and it

00:21:09,679 --> 00:21:12,480
usually works

00:21:12,720 --> 00:21:18,960
because that way you discover oh

00:21:16,159 --> 00:21:20,960
in my local setup i'm missing this sort

00:21:18,960 --> 00:21:22,480
of library they did something crazy in

00:21:20,960 --> 00:21:26,480
the production

00:21:22,480 --> 00:21:29,600
uh i also need that so

00:21:26,480 --> 00:21:32,240
first start with a large functional test

00:21:29,600 --> 00:21:34,640
i would even go so far to recommend

00:21:32,240 --> 00:21:39,600
selenium for that

00:21:34,640 --> 00:21:42,000
and then get smaller and smaller

00:21:39,600 --> 00:21:44,880
it's when you usually get a code base

00:21:42,000 --> 00:21:47,280
that doesn't have any tests uh

00:21:44,880 --> 00:21:48,880
coding standards are not quite high so

00:21:47,280 --> 00:21:52,159
you might get a function

00:21:48,880 --> 00:21:54,720
that has uh i don't know

00:21:52,159 --> 00:21:56,799
one times the times of code the max that

00:21:54,720 --> 00:21:57,440
i saw was five thousand lines of code

00:21:56,799 --> 00:22:02,240
and

00:21:57,440 --> 00:22:05,440
45 input parameters stuff like that

00:22:02,240 --> 00:22:06,400
you cannot start to break apart until

00:22:05,440 --> 00:22:09,120
you have

00:22:06,400 --> 00:22:11,440
dozens of tests that test existing

00:22:09,120 --> 00:22:14,799
behavior

00:22:11,440 --> 00:22:17,919
and only that you can start uh slowly

00:22:14,799 --> 00:22:21,760
breaking down into smaller pieces

00:22:17,919 --> 00:22:24,159
okay cool cool thank you so i have one

00:22:21,760 --> 00:22:27,280
question more from

00:22:24,159 --> 00:22:29,280
this core javier is asking

00:22:27,280 --> 00:22:30,480
in case you need to test with more

00:22:29,280 --> 00:22:34,159
complex inputs

00:22:30,480 --> 00:22:36,080
like a self-made object hold hypothesis

00:22:34,159 --> 00:22:39,760
handle this

00:22:36,080 --> 00:22:42,960
uh if it's a jungle model

00:22:39,760 --> 00:22:43,520
hypothesis uh has a very nice support

00:22:42,960 --> 00:22:45,120
for that

00:22:43,520 --> 00:22:47,440
you basically just tell it use this

00:22:45,120 --> 00:22:50,159
model and it will generate

00:22:47,440 --> 00:22:51,440
a random values for that model and

00:22:50,159 --> 00:22:53,919
supply it

00:22:51,440 --> 00:22:55,120
uh you can also make your own strategies

00:22:53,919 --> 00:22:59,440
for generation

00:22:55,120 --> 00:22:59,440
link multiple strategies together

00:23:00,400 --> 00:23:05,280
for example if i wanted to add more

00:23:03,600 --> 00:23:08,320
unicorns here

00:23:05,280 --> 00:23:12,320
i would use i could use a name

00:23:08,320 --> 00:23:15,280
and color as input parameters

00:23:12,320 --> 00:23:15,280
for hypothesis

00:23:15,840 --> 00:23:21,520
okay good so we have more questions so

00:23:19,919 --> 00:23:22,720
i'm going to continue because we have a

00:23:21,520 --> 00:23:26,000
few minutes

00:23:22,720 --> 00:23:27,760
uh jennifer is in

00:23:26,000 --> 00:23:30,240
okay it seems that she she misses some

00:23:27,760 --> 00:23:33,440
parts because it was a three-year-old

00:23:30,240 --> 00:23:37,840
person interrupting so

00:23:33,440 --> 00:23:37,840
how did you generate the 400 tests

00:23:38,880 --> 00:23:48,000
here well when you say given

00:23:44,480 --> 00:23:51,120
that decorator basically tells

00:23:48,000 --> 00:23:53,840
okay i'm going to turn this uh

00:23:51,120 --> 00:23:56,720
provide i'm going to use this strategy

00:23:53,840 --> 00:24:00,880
to generate various values for the name

00:23:56,720 --> 00:24:00,880
and by default it's 100

00:24:00,960 --> 00:24:06,000
values so this piece of the code that is

00:24:04,159 --> 00:24:10,000
currently on the screen

00:24:06,000 --> 00:24:12,559
uh that is hundred test

00:24:10,000 --> 00:24:14,000
yeah you can set it up above and it will

00:24:12,559 --> 00:24:17,120
generate

00:24:14,000 --> 00:24:20,640
400 various deaths now the

00:24:17,120 --> 00:24:23,840
text field which i really really like

00:24:20,640 --> 00:24:26,640
in the strategies for hypothesis

00:24:23,840 --> 00:24:28,720
uh will try to break your code in ways

00:24:26,640 --> 00:24:30,799
you didn't think it was possible because

00:24:28,720 --> 00:24:33,919
it will throw unicode

00:24:30,799 --> 00:24:38,000
ascii characters

00:24:33,919 --> 00:24:40,960
that are invisible stuff like that

00:24:38,000 --> 00:24:42,080
also involve the formatted unicode

00:24:40,960 --> 00:24:43,840
basically

00:24:42,080 --> 00:24:46,080
all the crazy stuff you can expect from

00:24:43,840 --> 00:24:49,600
your users

00:24:46,080 --> 00:24:50,080
uh i hope that answers it i i think it

00:24:49,600 --> 00:24:51,919
does

00:24:50,080 --> 00:24:54,000
okay last one last one because we

00:24:51,919 --> 00:24:57,760
already like then

00:24:54,000 --> 00:24:59,840
um daniel is asking

00:24:57,760 --> 00:25:01,840
he's saying he he always has the

00:24:59,840 --> 00:25:05,039
impression that testing something

00:25:01,840 --> 00:25:08,720
a lot of times that doesn't do much

00:25:05,039 --> 00:25:11,279
more than be a few careful though like a

00:25:08,720 --> 00:25:13,120
with the tail normal test and he's

00:25:11,279 --> 00:25:16,159
asking if you have an example

00:25:13,120 --> 00:25:19,200
when hypothesis was a catching an error

00:25:16,159 --> 00:25:21,760
so one important household edge cases

00:25:19,200 --> 00:25:22,480
like because you were doing like a

00:25:21,760 --> 00:25:24,000
really big

00:25:22,480 --> 00:25:26,000
set of tests so i think that's a

00:25:24,000 --> 00:25:29,200
positive sorry it was like

00:25:26,000 --> 00:25:34,000
maybe changing uh

00:25:29,200 --> 00:25:36,720
yeah and basically uh

00:25:34,000 --> 00:25:37,600
i kind of agree with his approach when

00:25:36,720 --> 00:25:40,960
you're doing

00:25:37,600 --> 00:25:44,159
testing inside your own system because

00:25:40,960 --> 00:25:46,159
then and you are already

00:25:44,159 --> 00:25:47,279
my philosophy is this you have user

00:25:46,159 --> 00:25:49,440
input

00:25:47,279 --> 00:25:51,600
uh you have one giant wall you're gonna

00:25:49,440 --> 00:25:52,720
do lots of data validation and stuff

00:25:51,600 --> 00:25:55,760
like that

00:25:52,720 --> 00:25:58,240
and that's going to be most of your

00:25:55,760 --> 00:26:00,799
tests are going to be concentrated

00:25:58,240 --> 00:26:02,799
uh inside your system you can trust it

00:26:00,799 --> 00:26:05,600
uh to provide uh

00:26:02,799 --> 00:26:07,840
valid inputs and stuff like that so

00:26:05,600 --> 00:26:10,159
there you can use

00:26:07,840 --> 00:26:12,640
carefully designed tests and not treat

00:26:10,159 --> 00:26:15,919
it as a black box

00:26:12,640 --> 00:26:16,880
if you can see here i'm never calling

00:26:15,919 --> 00:26:19,520
the

00:26:16,880 --> 00:26:21,120
unicorn view i'm treating it completely

00:26:19,520 --> 00:26:24,240
as a black box

00:26:21,120 --> 00:26:25,440
so from my stand point of view if i

00:26:24,240 --> 00:26:27,440
didn't use

00:26:25,440 --> 00:26:28,799
pi test jungle this could be a flask

00:26:27,440 --> 00:26:33,360
application

00:26:28,799 --> 00:26:33,360
or something in java anything at all

00:26:34,000 --> 00:26:38,960
does it answer the question

00:26:37,279 --> 00:26:40,720
yeah i think it does i think it does

00:26:38,960 --> 00:26:42,480
okay thank you very much

00:26:40,720 --> 00:26:45,279
that was a really nice talk so i need to

00:26:42,480 --> 00:26:45,279
play some because

00:26:46,080 --> 00:26:51,279

YouTube URL: https://www.youtube.com/watch?v=GBk02RntSVk


