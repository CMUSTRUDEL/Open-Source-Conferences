Title: Neeraj Pandey - The Joy of Creating Art with Code.
Publication date: 2020-09-15
Playlist: EuroPython 2020
Description: 
	"The Joy of Creating Art with Code.
EuroPython 2020 - Talk - 2020-07-23 - Microsoft
Online

By Neeraj Pandey

Art is everywhere and it’s beautiful. Unleash the creative artist inside you with the beauty of Generative Art. Learn how algorithms are used to create these aesthetic art forms, how motion and structures emit sounds and what toolkits are required to do so. This talk looks at Python as an artistic and visual programming language with the simplicity and beauty of generative art using Processing, PyCairo and webGL. The audience will see an evolution of generative art over the last 50 years, how autonomously these art forms are created using algorithms and how we can stimulate paints and other media. The talk will be showing how to create artworks inspired by geometric and mathematical patterns which also includes randomness with hands-on examples (Two such examples are added here: https://imgur.com/a/lycAYnj ).



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2020.europython.eu/events/speaker-release-agreement/

    "
Captions: 
	00:00:06,399 --> 00:00:09,120
uh we have

00:00:07,279 --> 00:00:11,519
niraj pandey i hope i pronounced your

00:00:09,120 --> 00:00:14,639
name correctly

00:00:11,519 --> 00:00:16,080
uh he's a student at ashoka university

00:00:14,639 --> 00:00:18,160
and he's studying computer

00:00:16,080 --> 00:00:19,760
science he's interested in generative

00:00:18,160 --> 00:00:21,439
arts software development and

00:00:19,760 --> 00:00:22,720
quantitative finance and he's going to

00:00:21,439 --> 00:00:25,599
talk about

00:00:22,720 --> 00:00:26,400
creating art with code so how to use

00:00:25,599 --> 00:00:29,359
algorithms

00:00:26,400 --> 00:00:30,640
to create very nice looking things i

00:00:29,359 --> 00:00:33,440
suppose well

00:00:30,640 --> 00:00:35,040
this is going to be exciting so let's

00:00:33,440 --> 00:00:38,000
see what you have to present

00:00:35,040 --> 00:00:40,079
by the way where you're joining from i'm

00:00:38,000 --> 00:00:43,520
joining from india

00:00:40,079 --> 00:00:45,920
and we're in india new delhi

00:00:43,520 --> 00:00:47,760
ah right nice very nice how's the

00:00:45,920 --> 00:00:48,239
weather in new delhi what what time is

00:00:47,760 --> 00:00:49,760
it now

00:00:48,239 --> 00:00:51,360
it's it's pretty it's pretty good it's

00:00:49,760 --> 00:00:54,079
uh 2 30 p.m

00:00:51,360 --> 00:00:55,680
in the afternoon good comfortable time

00:00:54,079 --> 00:00:57,520
right

00:00:55,680 --> 00:00:59,840
excellent so let's start the screen

00:00:57,520 --> 00:01:01,680
sharing and then you can go ahead

00:00:59,840 --> 00:01:03,920
and give the tag shall i start the

00:01:01,680 --> 00:01:06,560
screen yes please

00:01:03,920 --> 00:01:07,360
okay so the talk is the joy of creating

00:01:06,560 --> 00:01:10,400
art with code

00:01:07,360 --> 00:01:13,040
and i'm needed hi everyone

00:01:10,400 --> 00:01:14,960
and a little bit about myself i'm

00:01:13,040 --> 00:01:15,759
currently a sophomore student at ashoka

00:01:14,960 --> 00:01:17,520
university

00:01:15,759 --> 00:01:19,119
and my interest lies in software

00:01:17,520 --> 00:01:20,720
development generative art

00:01:19,119 --> 00:01:22,320
distributed computing and quantitative

00:01:20,720 --> 00:01:25,520
finance

00:01:22,320 --> 00:01:26,159
so these are the points for discussion

00:01:25,520 --> 00:01:28,560
of the talk

00:01:26,159 --> 00:01:30,560
so we'll be talking about generative art

00:01:28,560 --> 00:01:31,280
the history behind generative art we'll

00:01:30,560 --> 00:01:32,880
see a

00:01:31,280 --> 00:01:34,880
quick overview of how processing that

00:01:32,880 --> 00:01:37,119
pie mode works and

00:01:34,880 --> 00:01:38,880
then we'll see how we can use geometry

00:01:37,119 --> 00:01:40,400
algorithms and randomness that frames

00:01:38,880 --> 00:01:42,640
our generative art

00:01:40,400 --> 00:01:44,479
and we'll be seeing some quick examples

00:01:42,640 --> 00:01:46,479
using processing.pi

00:01:44,479 --> 00:01:48,479
so the main objective or the main goal

00:01:46,479 --> 00:01:49,680
of that stock is to look at python as an

00:01:48,479 --> 00:01:52,479
artistic tool

00:01:49,680 --> 00:01:56,159
uh with the simplicity of generative art

00:01:52,479 --> 00:01:56,159
using processing and pipe idle

00:01:56,479 --> 00:02:01,200
so what is a generative art so an art

00:01:59,600 --> 00:02:02,960
created through the use of an autonomous

00:02:01,200 --> 00:02:04,479
system is simply generative or that's

00:02:02,960 --> 00:02:05,200
like the simplest definition you will

00:02:04,479 --> 00:02:07,360
see

00:02:05,200 --> 00:02:09,039
so it uses iterative commands to draw

00:02:07,360 --> 00:02:10,640
vector-based shapes on the screen

00:02:09,039 --> 00:02:12,480
and most of the art created draws

00:02:10,640 --> 00:02:14,319
inspiration from modern art and

00:02:12,480 --> 00:02:16,400
especially the pop art

00:02:14,319 --> 00:02:18,400
and usually an autonomous system is

00:02:16,400 --> 00:02:20,080
required because without it it will

00:02:18,400 --> 00:02:21,920
mostly be a digital art and

00:02:20,080 --> 00:02:24,319
randomness can be even form of that

00:02:21,920 --> 00:02:27,599
autonomous system

00:02:24,319 --> 00:02:30,239
so before we go forward so let's see

00:02:27,599 --> 00:02:32,160
how all this came from so when you talk

00:02:30,239 --> 00:02:33,680
about the analog art which is the art

00:02:32,160 --> 00:02:35,760
which is manipulated by

00:02:33,680 --> 00:02:36,800
hand the complexity and scale requires

00:02:35,760 --> 00:02:39,200
exponentially

00:02:36,800 --> 00:02:40,160
more effort in time and when you talk

00:02:39,200 --> 00:02:43,280
about computers

00:02:40,160 --> 00:02:45,840
they excel at repeating processes for

00:02:43,280 --> 00:02:46,959
like endlessly without exhaustion as you

00:02:45,840 --> 00:02:49,680
will see

00:02:46,959 --> 00:02:51,599
uh the ease at which which we computers

00:02:49,680 --> 00:02:54,080
can create these art forms

00:02:51,599 --> 00:02:56,160
contributes uh greatly to the aesthetic

00:02:54,080 --> 00:02:59,360
of generative art

00:02:56,160 --> 00:03:01,040
uh in the past one major uh challenge

00:02:59,360 --> 00:03:02,879
which was faced by the early generative

00:03:01,040 --> 00:03:03,680
artists was the limitation of an output

00:03:02,879 --> 00:03:06,400
device

00:03:03,680 --> 00:03:08,239
so the primary source of that time was

00:03:06,400 --> 00:03:08,879
using a plotter which is a mechanical

00:03:08,239 --> 00:03:11,040
device

00:03:08,879 --> 00:03:12,319
holding a pen whose movements were

00:03:11,040 --> 00:03:14,000
controlled by the

00:03:12,319 --> 00:03:17,360
instructions that were programmed into

00:03:14,000 --> 00:03:20,400
the computer and one of the first

00:03:17,360 --> 00:03:23,040
artist to produce a plotter

00:03:20,400 --> 00:03:23,920
color drawing was freedom nick and the

00:03:23,040 --> 00:03:25,360
painting the

00:03:23,920 --> 00:03:27,920
art has been shown on the screen it's

00:03:25,360 --> 00:03:29,920
called homage

00:03:27,920 --> 00:03:32,000
and this is one of the earliest best

00:03:29,920 --> 00:03:34,640
known pieces of generative art

00:03:32,000 --> 00:03:36,560
it's called scotter by george nice and

00:03:34,640 --> 00:03:37,760
scottish starts with the standard 12 by

00:03:36,560 --> 00:03:41,280
12 rows and it

00:03:37,760 --> 00:03:44,560
increases in magnitude as we uh

00:03:41,280 --> 00:03:46,480
go like down the road and it changes the

00:03:44,560 --> 00:03:47,040
rotation the magnitude of location

00:03:46,480 --> 00:03:49,680
change

00:03:47,040 --> 00:03:51,040
so generative art is one of the best

00:03:49,680 --> 00:03:53,840
option when you're working on

00:03:51,040 --> 00:03:55,760
similar art places because maybe you

00:03:53,840 --> 00:03:58,319
want to create a similar art piece

00:03:55,760 --> 00:04:00,000
using your hand on a pen and paper and

00:03:58,319 --> 00:04:02,799
it might take you hours to produce

00:04:00,000 --> 00:04:04,720
one so instead you can just input some

00:04:02,799 --> 00:04:06,400
simple commands on the computer and

00:04:04,720 --> 00:04:09,439
you can create thousands of such art

00:04:06,400 --> 00:04:13,200
pieces in a couple of minutes

00:04:09,439 --> 00:04:15,280
so after the uh creation of processing

00:04:13,200 --> 00:04:16,479
it became much much easier for artists

00:04:15,280 --> 00:04:18,799
and creators to

00:04:16,479 --> 00:04:21,359
design and uh make computer art so it

00:04:18,799 --> 00:04:23,040
was created by bin fly and k series

00:04:21,359 --> 00:04:25,360
who worked on the processing foundation

00:04:23,040 --> 00:04:27,600
from the last like 19 20 years now

00:04:25,360 --> 00:04:30,479
and processing is a programming language

00:04:27,600 --> 00:04:33,199
and environment built with

00:04:30,479 --> 00:04:34,320
media art communities you can say it's

00:04:33,199 --> 00:04:37,680
created to teach

00:04:34,320 --> 00:04:39,919
individuals uh the intro of programming

00:04:37,680 --> 00:04:43,199
within the media arts context and so

00:04:39,919 --> 00:04:46,960
as a software sketchbook

00:04:43,199 --> 00:04:48,800
and okay so the examples we'll be seeing

00:04:46,960 --> 00:04:50,960
in this talk will be using

00:04:48,800 --> 00:04:52,720
python mode and processing mostly so

00:04:50,960 --> 00:04:54,560
it's a good practice to quickly

00:04:52,720 --> 00:04:56,720
get an overview of how processing mode

00:04:54,560 --> 00:04:59,759
actually works with python

00:04:56,720 --> 00:05:01,600
so this is exactly how our

00:04:59,759 --> 00:05:03,919
any function will look like in

00:05:01,600 --> 00:05:06,240
processing in python mode and processing

00:05:03,919 --> 00:05:08,080
so we have two major functions one is a

00:05:06,240 --> 00:05:10,800
setup and the other is a draw

00:05:08,080 --> 00:05:12,560
and the setup function is basically it

00:05:10,800 --> 00:05:14,880
runs once the program is executed

00:05:12,560 --> 00:05:16,320
and mostly the methods which are called

00:05:14,880 --> 00:05:18,800
inside the setup

00:05:16,320 --> 00:05:19,840
function are the creating the size of

00:05:18,800 --> 00:05:22,080
the canvas

00:05:19,840 --> 00:05:24,240
adding a background color and maybe

00:05:22,080 --> 00:05:27,919
adding noise adding some blur effects

00:05:24,240 --> 00:05:29,919
etc and the draw function runs until the

00:05:27,919 --> 00:05:32,160
program is stopped so which means it is

00:05:29,919 --> 00:05:34,000
running in loops so each statement is

00:05:32,160 --> 00:05:37,440
executed in sequence

00:05:34,000 --> 00:05:39,280
uh as you can see if you

00:05:37,440 --> 00:05:41,120
don't want the draw function to run

00:05:39,280 --> 00:05:41,759
again and again you can simply use no

00:05:41,120 --> 00:05:44,080
loop

00:05:41,759 --> 00:05:45,759
and otherwise uh after the last line is

00:05:44,080 --> 00:05:46,560
executed the first line will be executed

00:05:45,759 --> 00:05:48,000
back again

00:05:46,560 --> 00:05:50,080
and if you run this program you'll

00:05:48,000 --> 00:05:52,400
simply get a black canvas with a small

00:05:50,080 --> 00:05:54,479
ellipse or a circle on the screen or the

00:05:52,400 --> 00:05:56,160
canvas

00:05:54,479 --> 00:05:57,680
so most of the art pieces are using

00:05:56,160 --> 00:06:01,199
mathematical functions like

00:05:57,680 --> 00:06:02,000
noise trigonometry filter methods like

00:06:01,199 --> 00:06:05,199
blur

00:06:02,000 --> 00:06:07,840
and we use various algorithms such as

00:06:05,199 --> 00:06:09,600
health systems pixel sorting dicks uh

00:06:07,840 --> 00:06:11,520
poisson dis sampling etc

00:06:09,600 --> 00:06:13,440
so we'll be discussing a few in this uh

00:06:11,520 --> 00:06:15,440
slides and see how we can incorporate

00:06:13,440 --> 00:06:17,759
all these mathematical functions

00:06:15,440 --> 00:06:20,880
in algorithms and create some simple

00:06:17,759 --> 00:06:23,120
study guide pieces

00:06:20,880 --> 00:06:24,720
okay so we have the random function

00:06:23,120 --> 00:06:25,440
which is like one of the most important

00:06:24,720 --> 00:06:28,960
function

00:06:25,440 --> 00:06:31,199
which art is used pretty often so

00:06:28,960 --> 00:06:33,039
the use use case is pretty simple it

00:06:31,199 --> 00:06:34,960
just provides you with a random floating

00:06:33,039 --> 00:06:36,880
point number between zero and one

00:06:34,960 --> 00:06:38,479
and random function differs in different

00:06:36,880 --> 00:06:40,000
programming languages so it's not

00:06:38,479 --> 00:06:42,319
like going to be the same how we are

00:06:40,000 --> 00:06:44,319
going to be using in processing

00:06:42,319 --> 00:06:46,479
so in processing random function is used

00:06:44,319 --> 00:06:48,639
by directly calling random

00:06:46,479 --> 00:06:49,840
and it returns a random floating point

00:06:48,639 --> 00:06:51,919
between zero and one

00:06:49,840 --> 00:06:53,440
and if you want a random number between

00:06:51,919 --> 00:06:55,840
a range it will be

00:06:53,440 --> 00:06:57,919
uh you have to provide a min and max

00:06:55,840 --> 00:06:59,440
range and if you're not using processing

00:06:57,919 --> 00:07:01,440
if you're using some other environment

00:06:59,440 --> 00:07:03,599
like pi kaido you can simply

00:07:01,440 --> 00:07:05,520
use the random module which is available

00:07:03,599 --> 00:07:08,319
in python

00:07:05,520 --> 00:07:10,319
okay so before we move forward and start

00:07:08,319 --> 00:07:11,120
exploring art pieces that uses vector

00:07:10,319 --> 00:07:13,199
operations

00:07:11,120 --> 00:07:14,880
shapes and the method we should

00:07:13,199 --> 00:07:16,160
understand how exactly a character's

00:07:14,880 --> 00:07:18,479
canvas looks like

00:07:16,160 --> 00:07:19,680
when you're working on a generative art

00:07:18,479 --> 00:07:21,759
so

00:07:19,680 --> 00:07:22,960
okay so the canvas is like a 2d

00:07:21,759 --> 00:07:24,960
cartesian plane

00:07:22,960 --> 00:07:27,440
where each point can be considered as a

00:07:24,960 --> 00:07:29,120
vector which is a vector in a 2d

00:07:27,440 --> 00:07:30,560
cartesian plane that's

00:07:29,120 --> 00:07:32,479
basically the distance between two

00:07:30,560 --> 00:07:33,520
points so as you can see on the right

00:07:32,479 --> 00:07:35,759
hand side

00:07:33,520 --> 00:07:36,800
uh we have a cartesian plane and each

00:07:35,759 --> 00:07:40,080
point can

00:07:36,800 --> 00:07:41,280
is denoted by x comma y which basically

00:07:40,080 --> 00:07:43,440
stores the information

00:07:41,280 --> 00:07:45,120
how to get to that point from the

00:07:43,440 --> 00:07:46,160
previous point or here we're using

00:07:45,120 --> 00:07:48,160
addition

00:07:46,160 --> 00:07:50,240
and we can further use operations or

00:07:48,160 --> 00:07:52,319
linear linear algebra operations like

00:07:50,240 --> 00:07:56,400
linear transformation rotation

00:07:52,319 --> 00:07:59,360
to add some instructions to the vectors

00:07:56,400 --> 00:08:00,000
and creating a point and a line is again

00:07:59,360 --> 00:08:03,199
pretty

00:08:00,000 --> 00:08:04,560
straightforward so if you want to go

00:08:03,199 --> 00:08:06,319
through all these again so you can

00:08:04,560 --> 00:08:08,000
directly go to the processing official

00:08:06,319 --> 00:08:08,560
documentation and all these stuff is

00:08:08,000 --> 00:08:10,639
already

00:08:08,560 --> 00:08:12,720
being mentioned there so i'll just

00:08:10,639 --> 00:08:14,319
quickly go through it so a point can be

00:08:12,720 --> 00:08:17,520
created by passing

00:08:14,319 --> 00:08:18,000
uh an x y coordinate and the processing

00:08:17,520 --> 00:08:19,840
will

00:08:18,000 --> 00:08:22,000
add a point to that pixel position in

00:08:19,840 --> 00:08:24,639
the canvas and if you want a line

00:08:22,000 --> 00:08:25,759
you can simply add the the coordinates

00:08:24,639 --> 00:08:28,319
of those two points

00:08:25,759 --> 00:08:29,520
x1 comma y1 x2 comma y2 and the and the

00:08:28,319 --> 00:08:32,399
processing ladder line

00:08:29,520 --> 00:08:34,159
between two points and if you want to

00:08:32,399 --> 00:08:35,519
change the thickness you can use stroke

00:08:34,159 --> 00:08:37,120
weight and if you want to change the

00:08:35,519 --> 00:08:38,320
color you can add the color by using

00:08:37,120 --> 00:08:41,440
stroke

00:08:38,320 --> 00:08:44,560
and similarly if you're working uh with

00:08:41,440 --> 00:08:45,279
a picairo you can use set line width

00:08:44,560 --> 00:08:48,800
which is

00:08:45,279 --> 00:08:50,640
a substitute of stroke weight

00:08:48,800 --> 00:08:53,440
and similarly you can create a line by

00:08:50,640 --> 00:08:56,560
using line two and other functions

00:08:53,440 --> 00:09:00,160
and these are the very basic examples

00:08:56,560 --> 00:09:02,800
of how you can use those straight lines

00:09:00,160 --> 00:09:04,320
and points on a canvas to create some

00:09:02,800 --> 00:09:06,399
very simple art pieces

00:09:04,320 --> 00:09:07,360
so like on the left hand side there are

00:09:06,399 --> 00:09:09,920
vertical lines

00:09:07,360 --> 00:09:11,040
of different length and opacity and

00:09:09,920 --> 00:09:14,480
they're using some

00:09:11,040 --> 00:09:17,200
points of random points with various

00:09:14,480 --> 00:09:18,320
variable opacity and on the right hand

00:09:17,200 --> 00:09:20,959
side we have

00:09:18,320 --> 00:09:22,640
uh just lines but they are using a large

00:09:20,959 --> 00:09:24,640
set of colors palettes and are

00:09:22,640 --> 00:09:26,640
randomly using those to fill the stroke

00:09:24,640 --> 00:09:30,000
fill

00:09:26,640 --> 00:09:31,760
and the next is okay so this is a very

00:09:30,000 --> 00:09:33,040
important function and we use it pretty

00:09:31,760 --> 00:09:34,720
often

00:09:33,040 --> 00:09:36,880
and it's called curve vertex and bezier

00:09:34,720 --> 00:09:39,360
curves so curve vertex is an

00:09:36,880 --> 00:09:41,760
implementation of catamount spline which

00:09:39,360 --> 00:09:44,240
is a type of interpolating spline

00:09:41,760 --> 00:09:46,560
uh that is it's basically goes through

00:09:44,240 --> 00:09:48,800
the points in processing

00:09:46,560 --> 00:09:50,080
uh it specifies the vector coordinates

00:09:48,800 --> 00:09:52,800
for curves so this

00:09:50,080 --> 00:09:54,000
function can be called in between can

00:09:52,800 --> 00:09:56,160
only be called in between

00:09:54,000 --> 00:09:58,160
begin shape and n shape method so that

00:09:56,160 --> 00:10:01,600
it can create some sort of

00:09:58,160 --> 00:10:03,519
stroke curves and these functions allow

00:10:01,600 --> 00:10:04,079
creating complex forms on a cartesian

00:10:03,519 --> 00:10:05,600
plane

00:10:04,079 --> 00:10:07,600
and on the other hand we have bezier

00:10:05,600 --> 00:10:09,120
curve which is a versatile mathematical

00:10:07,600 --> 00:10:11,600
[Music]

00:10:09,120 --> 00:10:13,120
curve in vector graphics basically these

00:10:11,600 --> 00:10:13,519
are the vector graphics that could be

00:10:13,120 --> 00:10:15,839
scaled

00:10:13,519 --> 00:10:19,120
indefinitely and has a series of anchor

00:10:15,839 --> 00:10:22,959
points and control points

00:10:19,120 --> 00:10:25,760
so for beazer curve you need at least

00:10:22,959 --> 00:10:26,800
three uh points which is the initial

00:10:25,760 --> 00:10:28,399
point the final point

00:10:26,800 --> 00:10:30,399
and one control point or the anchor

00:10:28,399 --> 00:10:31,760
point and you can simply call these here

00:10:30,399 --> 00:10:33,440
by providing the

00:10:31,760 --> 00:10:35,120
three-point coordinates it will create a

00:10:33,440 --> 00:10:37,600
bezier curve on this canvas

00:10:35,120 --> 00:10:38,959
and similarly you can use curve 2 to

00:10:37,600 --> 00:10:40,800
create a curve

00:10:38,959 --> 00:10:42,320
on the canvas if you're using pi chiral

00:10:40,800 --> 00:10:45,200
which draws a curve from

00:10:42,320 --> 00:10:47,200
the point a to d and it has b and c as

00:10:45,200 --> 00:10:50,560
the anchor points

00:10:47,200 --> 00:10:54,160
right so this is of uh this is

00:10:50,560 --> 00:10:57,279
how curves of variable opacity

00:10:54,160 --> 00:10:58,160
and lens look like when we let the draw

00:10:57,279 --> 00:11:01,040
function

00:10:58,160 --> 00:11:01,839
run for the number of time and to

00:11:01,040 --> 00:11:04,320
implement this

00:11:01,839 --> 00:11:05,200
what we are doing here is we are

00:11:04,320 --> 00:11:07,839
basically

00:11:05,200 --> 00:11:09,680
um inside the canvas we are creating a

00:11:07,839 --> 00:11:10,399
follow from which is going from zero to

00:11:09,680 --> 00:11:12,640
three so

00:11:10,399 --> 00:11:13,680
zero to four so we are creating uh four

00:11:12,640 --> 00:11:16,160
points here

00:11:13,680 --> 00:11:18,079
so we have x and y are they initialized

00:11:16,160 --> 00:11:21,760
and on line 17 and 18 we

00:11:18,079 --> 00:11:23,600
are adding uh the nice value so for now

00:11:21,760 --> 00:11:25,440
we i'm not going to tell you what

00:11:23,600 --> 00:11:27,680
exactly is nice so for you can for now

00:11:25,440 --> 00:11:31,440
you can think of it as a random number

00:11:27,680 --> 00:11:34,560
generating function uh so once we have

00:11:31,440 --> 00:11:34,959
those x and y values we are appended

00:11:34,560 --> 00:11:37,440
like

00:11:34,959 --> 00:11:38,959
incrementing the m and n factors and

00:11:37,440 --> 00:11:41,040
once we are done with the loop

00:11:38,959 --> 00:11:42,560
we are creating a bezier curve with all

00:11:41,040 --> 00:11:44,720
those four values

00:11:42,560 --> 00:11:45,600
and we are increasing the offset values

00:11:44,720 --> 00:11:47,680
so that

00:11:45,600 --> 00:11:49,040
once uh the draw function is done with

00:11:47,680 --> 00:11:51,920
one uh loop

00:11:49,040 --> 00:11:52,639
uh it should the next bezier curve

00:11:51,920 --> 00:11:54,480
should not

00:11:52,639 --> 00:11:56,720
be formed on the same position so there

00:11:54,480 --> 00:11:59,040
should be a distance in between

00:11:56,720 --> 00:12:00,480
and when we let it run for some time you

00:11:59,040 --> 00:12:02,399
get some

00:12:00,480 --> 00:12:03,839
like cool looking curves and all these

00:12:02,399 --> 00:12:05,760
things

00:12:03,839 --> 00:12:07,519
similarly there is another inbuilt

00:12:05,760 --> 00:12:08,560
function in processing which is curved

00:12:07,519 --> 00:12:12,000
vertex

00:12:08,560 --> 00:12:13,839
and it's like we need at least four

00:12:12,000 --> 00:12:15,360
points to create a simple curve on the

00:12:13,839 --> 00:12:17,360
screen and you can

00:12:15,360 --> 00:12:19,040
call this function by simply calling

00:12:17,360 --> 00:12:22,320
curve vertex and providing the

00:12:19,040 --> 00:12:24,480
point coordinates x and y

00:12:22,320 --> 00:12:27,360
and here what we're doing like on line

00:12:24,480 --> 00:12:29,360
13 we are calling the curve vertex

00:12:27,360 --> 00:12:31,200
and we are going from top left of the

00:12:29,360 --> 00:12:33,360
canvas to the bottom right

00:12:31,200 --> 00:12:35,760
and we are adding we are we're also

00:12:33,360 --> 00:12:38,079
using a 9 15 no loop which means we just

00:12:35,760 --> 00:12:40,240
want the draw function to execute once

00:12:38,079 --> 00:12:41,519
and on line 13 we are using curve vertex

00:12:40,240 --> 00:12:44,000
which is taking the

00:12:41,519 --> 00:12:44,639
i and j index of the loops and we are

00:12:44,000 --> 00:12:47,519
adding

00:12:44,639 --> 00:12:49,040
um the random value between -10 and 10

00:12:47,519 --> 00:12:52,079
to those

00:12:49,040 --> 00:12:53,760
ing index and but if we would have run

00:12:52,079 --> 00:12:54,720
the program with a single curve vertex

00:12:53,760 --> 00:12:56,480
function

00:12:54,720 --> 00:12:58,240
we would have got just a single point on

00:12:56,480 --> 00:13:01,279
the canvas but we want some

00:12:58,240 --> 00:13:02,160
curves so we added four five six i think

00:13:01,279 --> 00:13:05,040
six more

00:13:02,160 --> 00:13:06,880
points so when we run this program we

00:13:05,040 --> 00:13:07,600
get the scribble type effects on the

00:13:06,880 --> 00:13:10,000
canvas

00:13:07,600 --> 00:13:10,639
and if you let like add more points it

00:13:10,000 --> 00:13:12,800
will make

00:13:10,639 --> 00:13:15,120
more like curves and if you let the

00:13:12,800 --> 00:13:17,839
function run for more number of times

00:13:15,120 --> 00:13:20,000
by using frame count check then it might

00:13:17,839 --> 00:13:22,560
cover the entire screen

00:13:20,000 --> 00:13:24,639
and the next is okay so we can also

00:13:22,560 --> 00:13:26,480
create some basic shapes like ellipse

00:13:24,639 --> 00:13:28,240
rectangles and squares

00:13:26,480 --> 00:13:30,000
and this in the further videos we'll see

00:13:28,240 --> 00:13:31,600
how we can implement them actually to

00:13:30,000 --> 00:13:34,000
create art pieces so

00:13:31,600 --> 00:13:34,720
an ellipsis can be created by providing

00:13:34,000 --> 00:13:36,959
four

00:13:34,720 --> 00:13:39,040
parameters with uh which is a b is

00:13:36,959 --> 00:13:40,720
stands for the x and y coordinates

00:13:39,040 --> 00:13:42,320
and c and d are basically the width and

00:13:40,720 --> 00:13:44,240
height and

00:13:42,320 --> 00:13:46,240
a rectangle takes four required

00:13:44,240 --> 00:13:48,639
parameters which is a and b

00:13:46,240 --> 00:13:49,760
again the x y coordinates and c and d

00:13:48,639 --> 00:13:51,199
are the width and the height and the

00:13:49,760 --> 00:13:54,079
other four

00:13:51,199 --> 00:13:55,519
uh variables are basically the border

00:13:54,079 --> 00:13:57,440
radius of the rectangle

00:13:55,519 --> 00:13:59,199
and square takes x and y coordinates and

00:13:57,440 --> 00:14:01,040
the side length of the square similarly

00:13:59,199 --> 00:14:04,240
we can create the same shapes

00:14:01,040 --> 00:14:07,680
in pike island okay so one

00:14:04,240 --> 00:14:09,279
best example is by creating some art

00:14:07,680 --> 00:14:10,959
some art pieces which were already been

00:14:09,279 --> 00:14:13,040
created by artists so

00:14:10,959 --> 00:14:14,800
this is an art piece called composition

00:14:13,040 --> 00:14:16,480
two in a red blue and yellow it was

00:14:14,800 --> 00:14:18,720
created by p8 mondrian

00:14:16,480 --> 00:14:20,480
so this is not the actual painting this

00:14:18,720 --> 00:14:22,000
is like created randomly with random

00:14:20,480 --> 00:14:24,399
fills and random shapes

00:14:22,000 --> 00:14:25,279
but it looks similar it's using just

00:14:24,399 --> 00:14:28,160
rectangles

00:14:25,279 --> 00:14:30,079
and stroke colors and on the right hand

00:14:28,160 --> 00:14:31,680
side it's the same uh paint

00:14:30,079 --> 00:14:33,120
a same sketch that we created on the

00:14:31,680 --> 00:14:34,720
left side but instead of creating a

00:14:33,120 --> 00:14:35,440
single sketch on the canvas we are

00:14:34,720 --> 00:14:39,199
adding

00:14:35,440 --> 00:14:39,199
uh multiple sketches

00:14:39,360 --> 00:14:43,199
and this is a one simple example where

00:14:42,480 --> 00:14:45,680
we can

00:14:43,199 --> 00:14:46,240
just use rectangles this is very simple

00:14:45,680 --> 00:14:48,560
and

00:14:46,240 --> 00:14:50,399
using just rectangles and some random

00:14:48,560 --> 00:14:51,279
color fill we can create some cool

00:14:50,399 --> 00:14:54,320
looking

00:14:51,279 --> 00:14:55,920
uh sketch uh so to create this

00:14:54,320 --> 00:14:58,639
what we are doing is like we are going

00:14:55,920 --> 00:15:01,680
from top to bottom of the canvas and

00:14:58,639 --> 00:15:02,560
at each index we are dividing the width

00:15:01,680 --> 00:15:05,440
of the canvas

00:15:02,560 --> 00:15:06,959
by a random midpoint and then we are

00:15:05,440 --> 00:15:08,959
creating a rectangle from the initial

00:15:06,959 --> 00:15:09,600
position to that midpoint and from that

00:15:08,959 --> 00:15:11,680
midpoint

00:15:09,600 --> 00:15:13,199
to the final one so once we are done

00:15:11,680 --> 00:15:15,120
creating the rectangles we are filling

00:15:13,199 --> 00:15:17,600
them with a random color between 0 and

00:15:15,120 --> 00:15:17,920
255 so it can be a shade of black to

00:15:17,600 --> 00:15:20,720
gray

00:15:17,920 --> 00:15:21,760
black to white cell so once we run the

00:15:20,720 --> 00:15:23,519
function we get

00:15:21,760 --> 00:15:25,360
something like uh this on the left hand

00:15:23,519 --> 00:15:27,519
side and on the right hand side instead

00:15:25,360 --> 00:15:30,320
of using just random colors we are also

00:15:27,519 --> 00:15:31,360
using uh a color palette and then we're

00:15:30,320 --> 00:15:34,399
choosing colors

00:15:31,360 --> 00:15:37,680
from there right and

00:15:34,399 --> 00:15:38,800
okay linear interpolation so the low

00:15:37,680 --> 00:15:40,880
function or the

00:15:38,800 --> 00:15:42,240
linear interpolation function is very

00:15:40,880 --> 00:15:44,959
convenient for creating

00:15:42,240 --> 00:15:45,519
motion along a straight path and for

00:15:44,959 --> 00:15:48,800
drawing

00:15:45,519 --> 00:15:49,920
dotted lines so it basically calculates

00:15:48,800 --> 00:15:52,160
the number between

00:15:49,920 --> 00:15:54,160
our two numbers at a specific increment

00:15:52,160 --> 00:15:56,160
or this specific increment of time

00:15:54,160 --> 00:15:58,079
so the amt or the amount parameter is

00:15:56,160 --> 00:15:59,360
the amount to interpolate between the

00:15:58,079 --> 00:16:02,079
two values

00:15:59,360 --> 00:16:03,279
and we can say the zero value will be

00:16:02,079 --> 00:16:05,199
the first value

00:16:03,279 --> 00:16:06,720
zero point will will be the immediate

00:16:05,199 --> 00:16:08,079
next value and so on

00:16:06,720 --> 00:16:09,680
so to understand the linear

00:16:08,079 --> 00:16:11,519
interpolation in a better way we can

00:16:09,680 --> 00:16:12,800
think of something like a gradient fill

00:16:11,519 --> 00:16:14,959
in the canvas

00:16:12,800 --> 00:16:16,880
so this isn't very uh easy to use in

00:16:14,959 --> 00:16:19,279
build function in processing called the

00:16:16,880 --> 00:16:21,040
color so what we're doing here is we are

00:16:19,279 --> 00:16:22,079
going from left to right of the canvas

00:16:21,040 --> 00:16:24,639
and we are making

00:16:22,079 --> 00:16:26,160
adding a variable linear value which is

00:16:24,639 --> 00:16:29,440
basically mapping the value of

00:16:26,160 --> 00:16:30,399
index i uh to zero and one because we

00:16:29,440 --> 00:16:32,240
want the

00:16:30,399 --> 00:16:34,320
end value to be very small between zero

00:16:32,240 --> 00:16:36,079
and one just like the noise value

00:16:34,320 --> 00:16:38,639
and then we are using this linear in

00:16:36,079 --> 00:16:41,040
value to add a colors fill

00:16:38,639 --> 00:16:41,759
so we are uh adding the using the color

00:16:41,040 --> 00:16:44,079
fill as

00:16:41,759 --> 00:16:45,839
linux in color which is basically using

00:16:44,079 --> 00:16:48,160
the lower color function

00:16:45,839 --> 00:16:50,079
and this log color function is taking

00:16:48,160 --> 00:16:53,839
the initial value of the color

00:16:50,079 --> 00:16:57,360
and the final color value and it's

00:16:53,839 --> 00:16:59,680
adding the specific increment of

00:16:57,360 --> 00:17:00,720
unit point that we created above on line

00:16:59,680 --> 00:17:02,560
number 11

00:17:00,720 --> 00:17:03,839
and once we have this color fill we are

00:17:02,560 --> 00:17:04,559
just filling the rectangle we are

00:17:03,839 --> 00:17:07,039
creating

00:17:04,559 --> 00:17:08,400
and once we let the functions run we get

00:17:07,039 --> 00:17:10,720
this uh

00:17:08,400 --> 00:17:12,959
smooth smooth uh gradient fill on the

00:17:10,720 --> 00:17:16,400
canvas

00:17:12,959 --> 00:17:17,280
and okay so by now we talked a lot about

00:17:16,400 --> 00:17:20,079
how we can use

00:17:17,280 --> 00:17:21,919
random numbers of random generated stuff

00:17:20,079 --> 00:17:24,240
to create these art pieces

00:17:21,919 --> 00:17:26,400
so unlike random numbers generated that

00:17:24,240 --> 00:17:27,280
has no relationship between the previous

00:17:26,400 --> 00:17:29,600
numbers generated

00:17:27,280 --> 00:17:30,640
and the next number uh like we saw in

00:17:29,600 --> 00:17:33,520
the previous slides

00:17:30,640 --> 00:17:34,320
uh when we draw random points and the

00:17:33,520 --> 00:17:36,720
graph was

00:17:34,320 --> 00:17:37,520
pretty much like zigzag in our zigzag

00:17:36,720 --> 00:17:39,840
form

00:17:37,520 --> 00:17:41,440
and here instead of that the graph lines

00:17:39,840 --> 00:17:45,200
are pretty much smooth

00:17:41,440 --> 00:17:46,240
so in polynoice the numbers generated

00:17:45,200 --> 00:17:48,240
are

00:17:46,240 --> 00:17:49,280
pretty much close to each other and has

00:17:48,240 --> 00:17:51,679
a relationship with

00:17:49,280 --> 00:17:52,720
each other and is more organic in nature

00:17:51,679 --> 00:17:54,559
and that's because

00:17:52,720 --> 00:17:56,080
these numbers generated are naturally

00:17:54,559 --> 00:17:57,280
ordered sequence of pseudo-random

00:17:56,080 --> 00:18:00,400
numbers

00:17:57,280 --> 00:18:01,840
so what it means is we can see here okay

00:18:00,400 --> 00:18:04,480
after this uh so

00:18:01,840 --> 00:18:06,160
implementing a nice uh like generating a

00:18:04,480 --> 00:18:07,600
noise number is pretty straightforward

00:18:06,160 --> 00:18:10,000
like just like random

00:18:07,600 --> 00:18:11,760
we just pass the xyz coordinate or if

00:18:10,000 --> 00:18:12,559
you're working on xy coordinate system

00:18:11,760 --> 00:18:14,640
then just

00:18:12,559 --> 00:18:16,080
use noise and pass the coordinates value

00:18:14,640 --> 00:18:17,280
and it returns some polling noise at

00:18:16,080 --> 00:18:20,000
that value

00:18:17,280 --> 00:18:21,520
and sometimes we want the noise value to

00:18:20,000 --> 00:18:23,520
be constant

00:18:21,520 --> 00:18:25,840
whenever the draw function runs again

00:18:23,520 --> 00:18:28,320
and again so we can just

00:18:25,840 --> 00:18:30,799
fix the fix the noise value to a

00:18:28,320 --> 00:18:32,960
constant value by using noise seed

00:18:30,799 --> 00:18:34,320
and similarly if you're not using python

00:18:32,960 --> 00:18:36,559
processing you can

00:18:34,320 --> 00:18:39,039
use the noise module in python for pi

00:18:36,559 --> 00:18:40,880
card and other environments

00:18:39,039 --> 00:18:43,280
okay we can see this example to

00:18:40,880 --> 00:18:44,960
understand noise in a better way so what

00:18:43,280 --> 00:18:47,120
we're doing here is we're loading all

00:18:44,960 --> 00:18:48,960
the pixels from the image

00:18:47,120 --> 00:18:50,799
and what you're doing is like we're

00:18:48,960 --> 00:18:52,320
trying to add a variable initialize a

00:18:50,799 --> 00:18:54,720
variable r and we're trying

00:18:52,320 --> 00:18:55,440
using it to fill all those pixels back

00:18:54,720 --> 00:18:58,559
so you're

00:18:55,440 --> 00:18:59,520
creating a variable r so basically we're

00:18:58,559 --> 00:19:01,919
looping from top

00:18:59,520 --> 00:19:03,440
left of the canvas and to the top bottom

00:19:01,919 --> 00:19:04,400
right so we're covering all the pixel

00:19:03,440 --> 00:19:06,480
values

00:19:04,400 --> 00:19:08,240
and at each index we are creating a

00:19:06,480 --> 00:19:10,400
variable r which is uh

00:19:08,240 --> 00:19:11,440
generating a noise value at x offset and

00:19:10,400 --> 00:19:13,840
y offset

00:19:11,440 --> 00:19:14,799
and as noise value is between 0 and 1

00:19:13,840 --> 00:19:17,360
only so which

00:19:14,799 --> 00:19:19,039
this value is pretty small and to fill a

00:19:17,360 --> 00:19:20,240
color value we want a color to be

00:19:19,039 --> 00:19:23,280
between 0 and 2 5

00:19:20,240 --> 00:19:25,440
5 to maintain the rgb index

00:19:23,280 --> 00:19:27,600
uh so we basically multiplying it by two

00:19:25,440 --> 00:19:28,240
five five so that we get a color shade

00:19:27,600 --> 00:19:30,240
between

00:19:28,240 --> 00:19:32,400
black and white and not just black and

00:19:30,240 --> 00:19:34,960
once we have all these value we are

00:19:32,400 --> 00:19:35,760
updating the pixel index with this color

00:19:34,960 --> 00:19:37,039
and

00:19:35,760 --> 00:19:39,520
eventually we are updating all the

00:19:37,039 --> 00:19:41,760
pixels and once we run this function

00:19:39,520 --> 00:19:42,720
you get this cloud like effect so

00:19:41,760 --> 00:19:44,799
basically this is

00:19:42,720 --> 00:19:46,640
just like small small points but as we

00:19:44,799 --> 00:19:49,679
are using noise values

00:19:46,640 --> 00:19:51,919
all the values close uh pixel values

00:19:49,679 --> 00:19:53,600
are pretty much close to each other so

00:19:51,919 --> 00:19:54,480
that the noise values are close to each

00:19:53,600 --> 00:19:56,480
other

00:19:54,480 --> 00:19:57,520
and to understand this for like in a

00:19:56,480 --> 00:19:59,280
better way we can say

00:19:57,520 --> 00:20:00,720
if we have a canvas and if we have two

00:19:59,280 --> 00:20:02,480
points on the canvas

00:20:00,720 --> 00:20:04,000
and those two points are pretty close to

00:20:02,480 --> 00:20:06,000
each other then if we

00:20:04,000 --> 00:20:07,840
try to generate some random points on

00:20:06,000 --> 00:20:08,559
the sorry noise points on those two

00:20:07,840 --> 00:20:10,960
points

00:20:08,559 --> 00:20:12,400
then the numbers will be pretty close to

00:20:10,960 --> 00:20:15,120
each other

00:20:12,400 --> 00:20:17,120
and if we would have used random instead

00:20:15,120 --> 00:20:17,440
of noise we would have got a canvas with

00:20:17,120 --> 00:20:20,320
just

00:20:17,440 --> 00:20:23,679
random points and this doesn't show any

00:20:20,320 --> 00:20:23,679
discernible pattern also

00:20:23,919 --> 00:20:30,080
okay just right okay so we can also use

00:20:28,159 --> 00:20:32,000
noise and some trigonometric functions

00:20:30,080 --> 00:20:33,120
size like sine and cosine waves to

00:20:32,000 --> 00:20:35,120
create these

00:20:33,120 --> 00:20:36,400
uh waves like structure withion

00:20:35,120 --> 00:20:39,120
structures and

00:20:36,400 --> 00:20:39,760
to implement this we basically doing

00:20:39,120 --> 00:20:42,960
like we

00:20:39,760 --> 00:20:45,280
are making a while loop and which starts

00:20:42,960 --> 00:20:47,679
from zero to two pi so we want our

00:20:45,280 --> 00:20:48,559
our points to be aligned in a circular

00:20:47,679 --> 00:20:50,960
manner

00:20:48,559 --> 00:20:52,559
so we are adding an x offset and a y

00:20:50,960 --> 00:20:54,960
offset which is basically mapping the

00:20:52,559 --> 00:20:56,880
cosine value and the sine value between

00:20:54,960 --> 00:20:58,000
0 and 10 because initially these values

00:20:56,880 --> 00:21:00,480
are between -1 and

00:20:58,000 --> 00:21:02,240
1. and once we have these all offset

00:21:00,480 --> 00:21:04,960
values we are creating a nice

00:21:02,240 --> 00:21:06,240
noise factor which we'll be using to uh

00:21:04,960 --> 00:21:08,559
create our x on y

00:21:06,240 --> 00:21:10,159
coordinates so in the noise factor what

00:21:08,559 --> 00:21:12,480
we are doing is like we are basically

00:21:10,159 --> 00:21:13,360
mapping those x offset and the y offset

00:21:12,480 --> 00:21:16,000
values

00:21:13,360 --> 00:21:17,280
and we're also using a z offset because

00:21:16,000 --> 00:21:20,320
we want the curves to

00:21:17,280 --> 00:21:22,640
go in other direction as well so

00:21:20,320 --> 00:21:23,919
we are mapping those values between 0

00:21:22,640 --> 00:21:26,080
and 150

00:21:23,919 --> 00:21:27,919
that's because we don't want our curves

00:21:26,080 --> 00:21:29,360
to be very small so we want them to

00:21:27,919 --> 00:21:32,320
spread out across the

00:21:29,360 --> 00:21:33,520
canvas and once we have the noise factor

00:21:32,320 --> 00:21:35,760
we are

00:21:33,520 --> 00:21:37,520
uh changing the x and y coordinates and

00:21:35,760 --> 00:21:38,240
once we have changed those coordinate

00:21:37,520 --> 00:21:40,080
values

00:21:38,240 --> 00:21:42,000
and we are just creating curve vertex

00:21:40,080 --> 00:21:45,200
that we saw in the previous slides

00:21:42,000 --> 00:21:46,880
and we as and once we are done with this

00:21:45,200 --> 00:21:50,000
we are decrementing the radius

00:21:46,880 --> 00:21:50,480
that we used in the noise factor or uh

00:21:50,000 --> 00:21:52,960
sorry

00:21:50,480 --> 00:21:54,720
the x and y coordinates that's because

00:21:52,960 --> 00:21:57,360
we want that at each

00:21:54,720 --> 00:21:58,240
time the draw function is executing we

00:21:57,360 --> 00:22:01,120
want the next

00:21:58,240 --> 00:22:03,679
uh curves to be created at a distance

00:22:01,120 --> 00:22:07,679
different from the initial one

00:22:03,679 --> 00:22:07,679
and we can also change uh like

00:22:08,080 --> 00:22:13,120
cool so we can also change the rgb

00:22:10,559 --> 00:22:15,280
values or opacity

00:22:13,120 --> 00:22:17,919
whatever you want to do and you can also

00:22:15,280 --> 00:22:20,480
add other instructions

00:22:17,919 --> 00:22:21,760
and if you run the program you get

00:22:20,480 --> 00:22:22,880
something like this

00:22:21,760 --> 00:22:24,400
so i'll just quickly go through the

00:22:22,880 --> 00:22:25,679
other slides because we are left with

00:22:24,400 --> 00:22:28,159
not much time

00:22:25,679 --> 00:22:29,600
okay so pull in noise so it's like a

00:22:28,159 --> 00:22:32,400
very important function for

00:22:29,600 --> 00:22:34,159
adding movement to your art pieces and

00:22:32,400 --> 00:22:36,080
you can also add some using noise

00:22:34,159 --> 00:22:38,480
functions to add grain like effect on

00:22:36,080 --> 00:22:40,799
this uh canvas

00:22:38,480 --> 00:22:42,400
and this is an example of how you can

00:22:40,799 --> 00:22:43,919
use purl and noise fields so these

00:22:42,400 --> 00:22:46,159
fields are basically the 2d fields of

00:22:43,919 --> 00:22:48,240
vectors each pointing in a similar but

00:22:46,159 --> 00:22:49,520
different direction as its neighboring

00:22:48,240 --> 00:22:52,400
vectors and

00:22:49,520 --> 00:22:53,440
the velocities of these vectors depends

00:22:52,400 --> 00:22:55,520
on the

00:22:53,440 --> 00:22:57,360
other vectors only so depending on how

00:22:55,520 --> 00:22:59,520
we draw these particles

00:22:57,360 --> 00:23:00,640
uh we can generate some pretty cool

00:22:59,520 --> 00:23:03,039
stuff and

00:23:00,640 --> 00:23:04,799
as these are used for adding a movement

00:23:03,039 --> 00:23:06,320
in your art piece you can see that we

00:23:04,799 --> 00:23:07,760
are creating a noise field where all

00:23:06,320 --> 00:23:08,000
particles are moving from the right hand

00:23:07,760 --> 00:23:11,039
side

00:23:08,000 --> 00:23:12,799
to the top left and

00:23:11,039 --> 00:23:14,080
to implement this it's we're just

00:23:12,799 --> 00:23:15,760
basically creating some

00:23:14,080 --> 00:23:17,280
random vector points on the canvas and

00:23:15,760 --> 00:23:17,919
just appending those vector points to

00:23:17,280 --> 00:23:20,320
the points

00:23:17,919 --> 00:23:22,480
object and once we have those points

00:23:20,320 --> 00:23:26,880
object inside the draw function

00:23:22,480 --> 00:23:29,039
uh we are taking those uh the values of

00:23:26,880 --> 00:23:30,720
that object one by one and storing it

00:23:29,039 --> 00:23:33,520
inside vector object

00:23:30,720 --> 00:23:34,480
and we are looping from zero to 20 and

00:23:33,520 --> 00:23:36,159
what you're doing is

00:23:34,480 --> 00:23:37,760
uh we are creating a noise value which

00:23:36,159 --> 00:23:39,520
is like we are mapping the x and y

00:23:37,760 --> 00:23:41,120
coordinates of that point

00:23:39,520 --> 00:23:42,720
between 0 and 2 pi because we are

00:23:41,120 --> 00:23:43,279
getting the radiance value over here

00:23:42,720 --> 00:23:45,440
because

00:23:43,279 --> 00:23:47,760
uh by the radiance value we can change

00:23:45,440 --> 00:23:50,400
the x2 and y2 parameters

00:23:47,760 --> 00:23:52,000
on line number 21 and 22 and once we

00:23:50,400 --> 00:23:54,880
have created x1 y1

00:23:52,000 --> 00:23:55,679
x2 y2 variables we can add the vertex

00:23:54,880 --> 00:23:58,880
value

00:23:55,679 --> 00:24:00,559
at x1 comma y1 and we then have to

00:23:58,880 --> 00:24:03,279
update the vector object according to

00:24:00,559 --> 00:24:05,840
the x2 and y2 values that's because

00:24:03,279 --> 00:24:07,840
uh once we have a point uh added to the

00:24:05,840 --> 00:24:08,480
canvas we want we want the next point to

00:24:07,840 --> 00:24:10,400
have us

00:24:08,480 --> 00:24:12,080
a slightly different direction but as

00:24:10,400 --> 00:24:13,919
these are using noise values

00:24:12,080 --> 00:24:15,520
they will all be directing to a similar

00:24:13,919 --> 00:24:17,279
direction eventually

00:24:15,520 --> 00:24:18,559
and eventually if you let the program

00:24:17,279 --> 00:24:19,120
done for some time you will get

00:24:18,559 --> 00:24:22,159
something

00:24:19,120 --> 00:24:24,240
like this and

00:24:22,159 --> 00:24:25,760
we use heavy uh use of geometrical

00:24:24,240 --> 00:24:28,080
patterns and factors

00:24:25,760 --> 00:24:29,840
and chaotic the chaos theory when you're

00:24:28,080 --> 00:24:32,960
working in generative art

00:24:29,840 --> 00:24:34,080
a very simple example of a

00:24:32,960 --> 00:24:36,480
geometrical pattern would be the

00:24:34,080 --> 00:24:36,960
sierpinski triangle so this is a very

00:24:36,480 --> 00:24:38,640
basic

00:24:36,960 --> 00:24:40,000
and one of the famous example of

00:24:38,640 --> 00:24:41,679
geometric pattern

00:24:40,000 --> 00:24:43,919
and where we are recursively dividing

00:24:41,679 --> 00:24:47,120
the triangle into smaller triangles

00:24:43,919 --> 00:24:49,360
and adding a stroke to it and we can

00:24:47,120 --> 00:24:51,039
also modify the sierpinski triangle by

00:24:49,360 --> 00:24:52,159
not just adding a stroke we can also add

00:24:51,039 --> 00:24:53,840
some fill inside

00:24:52,159 --> 00:24:55,279
and we can use linear transformation

00:24:53,840 --> 00:24:57,279
that we talked about earlier

00:24:55,279 --> 00:24:59,360
and we can use rotations we can rotate

00:24:57,279 --> 00:25:00,080
these triangles we can use curve vertex

00:24:59,360 --> 00:25:03,120
to shred the

00:25:00,080 --> 00:25:03,600
sides of it and we can also use the

00:25:03,120 --> 00:25:05,919
cursor

00:25:03,600 --> 00:25:07,120
because of approach to create factors

00:25:05,919 --> 00:25:10,159
and by using

00:25:07,120 --> 00:25:12,240
vertex and curve vertex

00:25:10,159 --> 00:25:13,600
and when you talk about the factor the

00:25:12,240 --> 00:25:15,360
first thing that comes to the mind is a

00:25:13,600 --> 00:25:16,960
manual got set uh so

00:25:15,360 --> 00:25:18,960
the more they zoom inside the the

00:25:16,960 --> 00:25:20,960
mandelbrot set the most similar patterns

00:25:18,960 --> 00:25:23,120
you are able to see and that's the most

00:25:20,960 --> 00:25:25,279
fascinating part about fractals

00:25:23,120 --> 00:25:26,240
and this is being represented on a

00:25:25,279 --> 00:25:28,559
complex plane

00:25:26,240 --> 00:25:31,360
where x y axis represents are real and

00:25:28,559 --> 00:25:32,960
the z axis represents the imaginary path

00:25:31,360 --> 00:25:35,200
so we pick a point in the coordinate

00:25:32,960 --> 00:25:36,880
plane and add the and pass it

00:25:35,200 --> 00:25:38,880
iterate it and pass it through the

00:25:36,880 --> 00:25:41,360
equation z n plus 1

00:25:38,880 --> 00:25:43,440
z n square plus c and we can also add

00:25:41,360 --> 00:25:46,720
some instructions of changing the colors

00:25:43,440 --> 00:25:48,400
and everything accordingly and similarly

00:25:46,720 --> 00:25:50,159
we can create julia sets which are

00:25:48,400 --> 00:25:50,640
pretty much similar to mandelbrot set

00:25:50,159 --> 00:25:52,799
and

00:25:50,640 --> 00:25:54,720
these are basically the boundary points

00:25:52,799 --> 00:25:57,200
that tends to infinity and then doesn't

00:25:54,720 --> 00:25:58,799
in tends to infinity okay when you go

00:25:57,200 --> 00:26:00,799
deeper inside the mandelbrot set

00:25:58,799 --> 00:26:03,200
we see that the manual block set is

00:26:00,799 --> 00:26:05,440
extending outwards on the xy plane

00:26:03,200 --> 00:26:07,600
and creates a bifurcation diagram and

00:26:05,440 --> 00:26:09,279
this logistic map is basically a part of

00:26:07,600 --> 00:26:13,200
the handlebar set

00:26:09,279 --> 00:26:15,360
and weak this bifurcation diagram

00:26:13,200 --> 00:26:16,799
is created only on the rear line because

00:26:15,360 --> 00:26:17,679
we put only real numbers into the

00:26:16,799 --> 00:26:20,000
equation

00:26:17,679 --> 00:26:21,679
and one fascinating thing about this

00:26:20,000 --> 00:26:23,279
bifurcation diagram is that

00:26:21,679 --> 00:26:25,360
this method was the first method to

00:26:23,279 --> 00:26:25,760
generate random numbers on computers and

00:26:25,360 --> 00:26:27,440
gives

00:26:25,760 --> 00:26:29,919
rise to a very famous topic called

00:26:27,440 --> 00:26:31,760
chaotic behavior or chaos theory

00:26:29,919 --> 00:26:34,000
and which is basically deterministic

00:26:31,760 --> 00:26:35,600
chaos something which is unpredictable

00:26:34,000 --> 00:26:37,679
so where the small change in the initial

00:26:35,600 --> 00:26:39,840
state can bring a drastically different

00:26:37,679 --> 00:26:42,720
changes in the final outcome

00:26:39,840 --> 00:26:44,400
and so we can change an initial change

00:26:42,720 --> 00:26:46,000
by some margin and we think the final

00:26:44,400 --> 00:26:48,000
outcome will be slightly different

00:26:46,000 --> 00:26:49,120
like you can see the four images but

00:26:48,000 --> 00:26:52,880
what we actually got

00:26:49,120 --> 00:26:55,840
in the end is our deterministic chaos

00:26:52,880 --> 00:26:57,600
and the best example to see chaos theory

00:26:55,840 --> 00:27:00,000
is attractors and which are basically

00:26:57,600 --> 00:27:01,840
mathematical functions that tends to

00:27:00,000 --> 00:27:03,440
evolve over time and if you're using

00:27:01,840 --> 00:27:04,400
processing you can just use points to

00:27:03,440 --> 00:27:05,760
create these

00:27:04,400 --> 00:27:07,520
attractors and if you're not using

00:27:05,760 --> 00:27:08,480
processing there's a very cool library

00:27:07,520 --> 00:27:10,480
called fibers

00:27:08,480 --> 00:27:12,080
which has great examples of attractors

00:27:10,480 --> 00:27:13,520
and you can experiment with them like

00:27:12,080 --> 00:27:15,840
swings and attractors bed headed

00:27:13,520 --> 00:27:17,360
tractors and more

00:27:15,840 --> 00:27:19,520
okay so this is like the second last

00:27:17,360 --> 00:27:20,000
topic uh so we'll see how we can

00:27:19,520 --> 00:27:22,000
stimulate

00:27:20,000 --> 00:27:23,679
the water paint effects or the oil paint

00:27:22,000 --> 00:27:26,960
effects on the canvas

00:27:23,679 --> 00:27:29,039
so the second image shows how we can use

00:27:26,960 --> 00:27:30,799
the water paint effects uh on the canvas

00:27:29,039 --> 00:27:31,600
on a 2d cartesian plane so to give you

00:27:30,799 --> 00:27:33,279
an overview

00:27:31,600 --> 00:27:34,640
what i'm basically doing is like i'm

00:27:33,279 --> 00:27:36,399
basically uh

00:27:34,640 --> 00:27:38,480
creating a shape such as polygon and

00:27:36,399 --> 00:27:39,440
then starting extending its edges

00:27:38,480 --> 00:27:42,399
outwards

00:27:39,440 --> 00:27:43,600
uh and doing by doing so recursively and

00:27:42,399 --> 00:27:44,399
passing it through a deformation

00:27:43,600 --> 00:27:46,159
technique

00:27:44,399 --> 00:27:48,159
and eventually we will be getting some

00:27:46,159 --> 00:27:49,039
fine details and find vertexes on the

00:27:48,159 --> 00:27:51,120
outer layer

00:27:49,039 --> 00:27:52,240
which eventually gives us this cool

00:27:51,120 --> 00:27:54,080
watercolor effect

00:27:52,240 --> 00:27:55,919
and further you can also create use some

00:27:54,080 --> 00:27:59,120
blur effects or etc to

00:27:55,919 --> 00:28:01,520
add some more features and

00:27:59,120 --> 00:28:03,440
so how to do it so i'll quickly take two

00:28:01,520 --> 00:28:06,720
to three minutes to finish this thing

00:28:03,440 --> 00:28:09,120
uh so first we divide the polygon in

00:28:06,720 --> 00:28:11,200
so first firstly we create a polygon of

00:28:09,120 --> 00:28:12,720
say 20 sites and append those values to

00:28:11,200 --> 00:28:16,080
the polygon object

00:28:12,720 --> 00:28:19,039
then we initialized a mid-range

00:28:16,080 --> 00:28:20,559
of 50 and we try to divide those sides

00:28:19,039 --> 00:28:23,200
so we call the function get

00:28:20,559 --> 00:28:24,480
mid and by passing the parameters as the

00:28:23,200 --> 00:28:27,840
polygon object

00:28:24,480 --> 00:28:28,799
and the mid variable these variables

00:28:27,840 --> 00:28:30,640
these

00:28:28,799 --> 00:28:32,240
the values we passed are basically the

00:28:30,640 --> 00:28:33,120
mean and standard deviation in our

00:28:32,240 --> 00:28:36,080
function

00:28:33,120 --> 00:28:37,279
so inside the get mid function we as we

00:28:36,080 --> 00:28:38,799
pass the two

00:28:37,279 --> 00:28:41,520
values as mean and the standard

00:28:38,799 --> 00:28:42,240
deviation we are looping over and which

00:28:41,520 --> 00:28:44,399
is taking

00:28:42,240 --> 00:28:45,760
the previous value and the current value

00:28:44,399 --> 00:28:47,919
of the polygon

00:28:45,760 --> 00:28:50,320
and we are just passing them to the get

00:28:47,919 --> 00:28:52,320
center point function which is returning

00:28:50,320 --> 00:28:53,360
a random number fitting the gaussian

00:28:52,320 --> 00:28:55,919
distribution

00:28:53,360 --> 00:28:56,559
and once we had that value we can append

00:28:55,919 --> 00:28:58,799
those

00:28:56,559 --> 00:29:01,279
up and the previous value and the newly

00:28:58,799 --> 00:29:02,559
uh generated midpoint value to the new

00:29:01,279 --> 00:29:04,880
vector object and

00:29:02,559 --> 00:29:06,399
we can just directly return it and now

00:29:04,880 --> 00:29:08,240
what i'm doing is like i'm looping from

00:29:06,399 --> 00:29:10,159
zero to the length of the newly updated

00:29:08,240 --> 00:29:11,679
polygon so initially we had some 20

00:29:10,159 --> 00:29:13,120
sides of the polygon now we have

00:29:11,679 --> 00:29:15,120
thousands of sides

00:29:13,120 --> 00:29:16,720
and once we have those points we can

00:29:15,120 --> 00:29:18,640
simply uh

00:29:16,720 --> 00:29:19,919
create the x y coordinates by passing

00:29:18,640 --> 00:29:22,559
that value of

00:29:19,919 --> 00:29:27,840
side x and side y with a random value

00:29:22,559 --> 00:29:30,480
between 0 and 25

00:29:27,840 --> 00:29:31,279
right just give me one minute i'm done

00:29:30,480 --> 00:29:33,440
okay so

00:29:31,279 --> 00:29:34,880
we just passed it just we are sending

00:29:33,440 --> 00:29:36,159
the values back to the random gauss

00:29:34,880 --> 00:29:38,000
values and once we have those

00:29:36,159 --> 00:29:41,039
coordinates we are just creating vertex

00:29:38,000 --> 00:29:42,640
at x and y position and this is a random

00:29:41,039 --> 00:29:45,120
gaussian method for the scene

00:29:42,640 --> 00:29:46,159
and eventually we will get something

00:29:45,120 --> 00:29:48,080
like this

00:29:46,159 --> 00:29:50,320
and this is the last thing where okay

00:29:48,080 --> 00:29:52,000
this is uh using shaders or for creating

00:29:50,320 --> 00:29:54,000
oil paint effects

00:29:52,000 --> 00:29:56,000
and you can check the link for a better

00:29:54,000 --> 00:29:57,840
understanding of the better approach

00:29:56,000 --> 00:29:59,360
which is gonna say by telling hops this

00:29:57,840 --> 00:30:01,120
is the last thing which is like pixel

00:29:59,360 --> 00:30:02,880
sorting algorithms which is

00:30:01,120 --> 00:30:04,240
i just i won't be going to the code i'll

00:30:02,880 --> 00:30:06,159
just give you a quick overview

00:30:04,240 --> 00:30:08,240
i'll just take one more minute so what

00:30:06,159 --> 00:30:10,399
we do is in the pixel sorting is it's

00:30:08,240 --> 00:30:11,200
basically isolating the horizontal and

00:30:10,399 --> 00:30:15,200
vertical

00:30:11,200 --> 00:30:17,440
lines of pixel in an image and um

00:30:15,200 --> 00:30:18,880
we are sorting the positions based on a

00:30:17,440 --> 00:30:20,880
number of criteria

00:30:18,880 --> 00:30:22,240
so basically we load the pixels we then

00:30:20,880 --> 00:30:24,559
pick the original pixel

00:30:22,240 --> 00:30:26,080
with some accessor function we then pick

00:30:24,559 --> 00:30:28,880
the next pixel position

00:30:26,080 --> 00:30:30,559
change the number of uh signs and maybe

00:30:28,880 --> 00:30:31,919
you change you can also see a change in

00:30:30,559 --> 00:30:34,480
the direction of pixels

00:30:31,919 --> 00:30:35,520
we just compare it and swap the pixels

00:30:34,480 --> 00:30:37,919
so

00:30:35,520 --> 00:30:38,799
and this is a very simple uh

00:30:37,919 --> 00:30:41,039
implementation

00:30:38,799 --> 00:30:42,720
of it and eventually if you just run the

00:30:41,039 --> 00:30:44,240
function with this values you'll get

00:30:42,720 --> 00:30:47,600
something like this

00:30:44,240 --> 00:30:49,760
and the this is and

00:30:47,600 --> 00:30:51,360
i'm sorry you don't have to cut your

00:30:49,760 --> 00:30:53,279
shirt it was a very nice

00:30:51,360 --> 00:30:54,799
talk thank you you have some questions

00:30:53,279 --> 00:30:56,559
you can go back to the talk

00:30:54,799 --> 00:30:58,880
call back and just chat with me thank

00:30:56,559 --> 00:31:00,399
you so much yes thank you thank you very

00:30:58,880 --> 00:31:03,840
much and let me play your

00:31:00,399 --> 00:31:06,080
applause so let me just do this like

00:31:03,840 --> 00:31:06,080
this

00:31:10,000 --> 00:31:14,640

YouTube URL: https://www.youtube.com/watch?v=bjzPkhYmtOg


