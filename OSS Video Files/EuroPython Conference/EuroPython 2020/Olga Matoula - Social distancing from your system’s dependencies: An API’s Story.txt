Title: Olga Matoula - Social distancing from your system’s dependencies: An API’s Story
Publication date: 2020-09-15
Playlist: EuroPython 2020
Description: 
	"Social distancing from your system’s dependencies: An API’s Story
EuroPython 2020 - Talk - 2020-07-23 - Ni
Online

By Olga Matoula

Have you ever imagined life without your tests breaking due to an external dependency having changed? My team chased the dream. We used mocks, stubs, other dependency isolation techniques, and the result was … a lot of ugly tests.

We soon realized our tests required more care and they invoked some difficult questions. Is it possible that the limitations of the testing framework add or give away flaws on your design? Should your architecture be affected by your efforts to test the system? What did we learn in the process?

This presentation will introduce some testing isolation concepts and discuss how the choice of each can affect your architecture design. We will go through the basics of the unittest.mock library and the pytest framework and explore their potential. By diving into scenarios, attendees will learn where these features can be applied more effectively, and more importantly, how an API design can and should be driven by the value of testability, allowing the tests to be structured around clarity, readability and a happy Continuous Integration platform.

The target audience includes beginner Pythonistas, who are looking for ways to structure and test their code cleanly, while intermediate developers will enjoy a fun refreshment on dependency isolation and leave the session with practical examples on how to use it more effectively.



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2020.europython.eu/events/speaker-release-agreement/

    "
Captions: 
	00:00:06,480 --> 00:00:11,530
olga tell us about social distancing

00:00:08,720 --> 00:00:14,000
from our dependencies

00:00:11,530 --> 00:00:16,240
[Music]

00:00:14,000 --> 00:00:17,440
um okay uh thank you for the

00:00:16,240 --> 00:00:20,160
introduction

00:00:17,440 --> 00:00:22,960
i am i'm very happy to be here and today

00:00:20,160 --> 00:00:26,000
i'm going to be talking about a timely

00:00:22,960 --> 00:00:26,800
matter and since we have spent all of us

00:00:26,000 --> 00:00:29,920
a few months

00:00:26,800 --> 00:00:31,119
applying physical social distancing we

00:00:29,920 --> 00:00:34,800
can discuss today

00:00:31,119 --> 00:00:37,840
how we can use those techniques

00:00:34,800 --> 00:00:41,920
to make our systems a bit more reliable

00:00:37,840 --> 00:00:44,480
isolating our dependencies from them

00:00:41,920 --> 00:00:46,399
before i begin let me introduce myself

00:00:44,480 --> 00:00:49,360
my name is olga matuda

00:00:46,399 --> 00:00:50,000
and i come from sunny greece while i

00:00:49,360 --> 00:00:52,960
currently

00:00:50,000 --> 00:00:54,719
reside in as i said very funny london

00:00:52,960 --> 00:00:56,160
surprisingly this week has been very

00:00:54,719 --> 00:00:58,320
nice

00:00:56,160 --> 00:00:59,760
i studied electrical engineering but

00:00:58,320 --> 00:01:03,199
then software

00:00:59,760 --> 00:01:05,600
i won my heart and i enjoy immersing

00:01:03,199 --> 00:01:08,479
myself into risky activities

00:01:05,600 --> 00:01:09,119
be it public speaking dancing with other

00:01:08,479 --> 00:01:12,560
people

00:01:09,119 --> 00:01:15,439
or trying new recipes and nowadays i

00:01:12,560 --> 00:01:18,080
work at bloomberg as a software engineer

00:01:15,439 --> 00:01:20,400
and i spend a lot of my time in my team

00:01:18,080 --> 00:01:23,600
debugging c plus plus code

00:01:20,400 --> 00:01:27,119
and we do write some python code as well

00:01:23,600 --> 00:01:30,720
i we have mostly used python as a tool

00:01:27,119 --> 00:01:34,079
for writing scripts to quickly

00:01:30,720 --> 00:01:36,640
achieve something or for integration or

00:01:34,079 --> 00:01:39,680
end-to-end testing

00:01:36,640 --> 00:01:40,400
but last year we had the crazy idea how

00:01:39,680 --> 00:01:43,119
about we use

00:01:40,400 --> 00:01:43,520
python for a real service we wanted to

00:01:43,119 --> 00:01:47,920
do

00:01:43,520 --> 00:01:49,759
something simple and we said python

00:01:47,920 --> 00:01:51,520
it is a good opportunity for us to try

00:01:49,759 --> 00:01:53,520
using python for something real that we

00:01:51,520 --> 00:01:56,240
can use in production

00:01:53,520 --> 00:01:58,079
so that is what i'm saying today this is

00:01:56,240 --> 00:02:00,960
the story of a python service

00:01:58,079 --> 00:02:02,799
i written by simplest developers and i

00:02:00,960 --> 00:02:05,040
promise you it's not a horror story

00:02:02,799 --> 00:02:09,039
but it's a story of success and many

00:02:05,040 --> 00:02:12,400
many learnings

00:02:09,039 --> 00:02:14,400
as i said we are we have mainly been

00:02:12,400 --> 00:02:17,440
using c plus plus in the past

00:02:14,400 --> 00:02:19,040
and we have used python for simple

00:02:17,440 --> 00:02:22,160
applications

00:02:19,040 --> 00:02:25,120
and this is how we tend to use python

00:02:22,160 --> 00:02:26,879
so and this is how we envisioned our new

00:02:25,120 --> 00:02:29,440
service is going to look like

00:02:26,879 --> 00:02:30,400
there's gonna be one function we don't

00:02:29,440 --> 00:02:32,560
really need more

00:02:30,400 --> 00:02:33,599
we're gonna have an input we're gonna do

00:02:32,560 --> 00:02:35,680
the stuff we need

00:02:33,599 --> 00:02:36,720
and we have we're gonna have our output

00:02:35,680 --> 00:02:39,840
there

00:02:36,720 --> 00:02:41,200
how hard could that be um it turned out

00:02:39,840 --> 00:02:43,360
it wasn't that hard

00:02:41,200 --> 00:02:44,800
that was uh we wrote some completely

00:02:43,360 --> 00:02:47,760
valid code that looks a bit

00:02:44,800 --> 00:02:49,120
like what you see on that screen and we

00:02:47,760 --> 00:02:52,400
thought that we were ready

00:02:49,120 --> 00:02:54,319
everything seemed to be working

00:02:52,400 --> 00:02:55,519
and we had a meeting with our product

00:02:54,319 --> 00:02:57,760
manager mark

00:02:55,519 --> 00:02:59,040
and he said is this ready to go to

00:02:57,760 --> 00:03:02,000
production

00:02:59,040 --> 00:03:03,120
and that is where we ask ourselves okay

00:03:02,000 --> 00:03:05,200
maybe we can

00:03:03,120 --> 00:03:06,959
we can be safe as we do with all our

00:03:05,200 --> 00:03:07,840
other services it's time to write some

00:03:06,959 --> 00:03:09,920
tests

00:03:07,840 --> 00:03:11,680
and yeah what could possibly go wrong

00:03:09,920 --> 00:03:14,640
with python but okay

00:03:11,680 --> 00:03:15,680
let's write some tests and that is when

00:03:14,640 --> 00:03:18,560
we realized

00:03:15,680 --> 00:03:20,879
that that wasn't as easy as we had

00:03:18,560 --> 00:03:23,760
imagined previously

00:03:20,879 --> 00:03:24,799
um we didn't really know how to write

00:03:23,760 --> 00:03:27,200
unides in pa

00:03:24,799 --> 00:03:28,560
in python we had written an integration

00:03:27,200 --> 00:03:31,200
system this before

00:03:28,560 --> 00:03:32,400
uh but uh unit testing was something new

00:03:31,200 --> 00:03:36,080
for us

00:03:32,400 --> 00:03:38,959
we tried writing some but we

00:03:36,080 --> 00:03:40,000
are we had a dependency that ended up

00:03:38,959 --> 00:03:42,400
misbehaving

00:03:40,000 --> 00:03:44,879
in the dev environment so our test could

00:03:42,400 --> 00:03:48,400
fail randomly

00:03:44,879 --> 00:03:50,720
meaning that we are our constant

00:03:48,400 --> 00:03:51,680
continuous integration platform uh would

00:03:50,720 --> 00:03:53,680
complain a lot

00:03:51,680 --> 00:03:55,439
meaning that we would have have many

00:03:53,680 --> 00:03:57,280
emails meaning that there was no

00:03:55,439 --> 00:03:58,640
real automation that we could apply

00:03:57,280 --> 00:03:59,599
further because everyone was very

00:03:58,640 --> 00:04:02,640
annoyed

00:03:59,599 --> 00:04:05,470
and everyone was super super sad

00:04:02,640 --> 00:04:06,799
due to that and

00:04:05,470 --> 00:04:09,360
[Music]

00:04:06,799 --> 00:04:10,720
we knew it was time to take this a bit

00:04:09,360 --> 00:04:13,200
more seriously it was

00:04:10,720 --> 00:04:13,760
a small project but again we had to

00:04:13,200 --> 00:04:16,000
apply

00:04:13,760 --> 00:04:17,680
the same good principles that we applied

00:04:16,000 --> 00:04:21,280
as in any other object

00:04:17,680 --> 00:04:23,680
and project and since we had

00:04:21,280 --> 00:04:26,320
an unstable dependency we knew that we

00:04:23,680 --> 00:04:29,600
had to isolate our environment from it

00:04:26,320 --> 00:04:32,560
we had to somehow mock it and

00:04:29,600 --> 00:04:34,639
make our tests not directly depend on

00:04:32,560 --> 00:04:37,600
that

00:04:34,639 --> 00:04:38,639
so this is a sort of uh yeah physical

00:04:37,600 --> 00:04:42,160
distancing from

00:04:38,639 --> 00:04:45,280
that unstable dependency

00:04:42,160 --> 00:04:47,120
um as i cannot get into much detail

00:04:45,280 --> 00:04:49,840
about that specific project

00:04:47,120 --> 00:04:51,199
and today i'm going to be using another

00:04:49,840 --> 00:04:53,040
example

00:04:51,199 --> 00:04:54,240
let's say that we want to create an

00:04:53,040 --> 00:04:58,400
application

00:04:54,240 --> 00:05:00,560
that um i get movies from

00:04:58,400 --> 00:05:02,320
that are currently playing in theaters

00:05:00,560 --> 00:05:05,199
like in normal times

00:05:02,320 --> 00:05:05,520
and we want to rate those movies based

00:05:05,199 --> 00:05:08,080
on

00:05:05,520 --> 00:05:10,320
a very random metric that we have and

00:05:08,080 --> 00:05:11,120
that is uh based on the director of the

00:05:10,320 --> 00:05:14,240
movie

00:05:11,120 --> 00:05:17,280
we want to uh send back to that

00:05:14,240 --> 00:05:18,960
api a rating so let's say that every

00:05:17,280 --> 00:05:21,680
movie that is directed by

00:05:18,960 --> 00:05:22,880
quentin tarantino gets a 10 and every

00:05:21,680 --> 00:05:27,759
other movie gets

00:05:22,880 --> 00:05:30,560
a free i saw

00:05:27,759 --> 00:05:32,080
this is our great movie application by

00:05:30,560 --> 00:05:34,639
getting raped movies

00:05:32,080 --> 00:05:38,000
yes i laugh at my own jokes and let's

00:05:34,639 --> 00:05:40,240
start with a simple version of that

00:05:38,000 --> 00:05:41,199
here is an example of an application

00:05:40,240 --> 00:05:44,080
that

00:05:41,199 --> 00:05:45,680
uses the movie database api that is a

00:05:44,080 --> 00:05:47,120
free api that you can use for your

00:05:45,680 --> 00:05:50,800
personal projects

00:05:47,120 --> 00:05:52,479
and we send one get request to retrieve

00:05:50,800 --> 00:05:54,320
all the movies that are currently

00:05:52,479 --> 00:05:57,600
playing at theaters

00:05:54,320 --> 00:06:00,000
and so we send we use the um request

00:05:57,600 --> 00:06:02,880
module we send that get request

00:06:00,000 --> 00:06:04,880
we get back hopefully a good response

00:06:02,880 --> 00:06:06,960
and we put it in a nice dictionary

00:06:04,880 --> 00:06:09,840
and we return it that is all that we

00:06:06,960 --> 00:06:13,120
have to do for that

00:06:09,840 --> 00:06:14,319
and as mark is a really impatient and

00:06:13,120 --> 00:06:15,840
unwanted production

00:06:14,319 --> 00:06:17,600
we need to write tests and make sure

00:06:15,840 --> 00:06:19,520
that it works fine

00:06:17,600 --> 00:06:22,880
and this is how a test for this

00:06:19,520 --> 00:06:27,199
application would look like

00:06:22,880 --> 00:06:30,000
we want to we are using the unit s.mog

00:06:27,199 --> 00:06:30,639
module and we want to mock the path that

00:06:30,000 --> 00:06:33,120
sends

00:06:30,639 --> 00:06:35,120
that request to retrieve the movies that

00:06:33,120 --> 00:06:38,160
are currently playing

00:06:35,120 --> 00:06:39,600
above you can see that we are specifying

00:06:38,160 --> 00:06:42,000
a mock response

00:06:39,600 --> 00:06:43,039
and that can be a much simplified

00:06:42,000 --> 00:06:45,120
version of what

00:06:43,039 --> 00:06:46,720
the real api would written we just

00:06:45,120 --> 00:06:48,479
returned that the fields that we are

00:06:46,720 --> 00:06:51,360
interested in really

00:06:48,479 --> 00:06:52,960
and we have a simplified dictionary

00:06:51,360 --> 00:06:56,319
retrieved back

00:06:52,960 --> 00:06:58,880
and that is a very low effort test

00:06:56,319 --> 00:06:59,520
um at least and we don't have much to

00:06:58,880 --> 00:07:01,199
think about

00:06:59,520 --> 00:07:03,039
except maybe for the first one when we

00:07:01,199 --> 00:07:06,080
are first creating but

00:07:03,039 --> 00:07:08,080
this is easily extensible to more tests

00:07:06,080 --> 00:07:09,360
and we can write more tests where we

00:07:08,080 --> 00:07:11,759
parameterize

00:07:09,360 --> 00:07:13,599
and we expect empty results different

00:07:11,759 --> 00:07:16,319
responses we have different

00:07:13,599 --> 00:07:18,160
side effects when we call that external

00:07:16,319 --> 00:07:21,039
api we can expect failures

00:07:18,160 --> 00:07:24,000
connectivity issues and everything else

00:07:21,039 --> 00:07:24,000
that we can imagine

00:07:24,960 --> 00:07:29,520
and that was okay it was valid code it

00:07:27,919 --> 00:07:31,199
was a very valid test

00:07:29,520 --> 00:07:34,240
now let's see what happens when we have

00:07:31,199 --> 00:07:36,319
a more complete application

00:07:34,240 --> 00:07:38,160
this is what we want to achieve in this

00:07:36,319 --> 00:07:40,240
example we said that we

00:07:38,160 --> 00:07:42,080
want to get the movies that are

00:07:40,240 --> 00:07:45,360
currently playing at theaters

00:07:42,080 --> 00:07:47,840
that returns us the movie titles and

00:07:45,360 --> 00:07:49,759
the director ids so we need to send

00:07:47,840 --> 00:07:50,479
another request to the movie database

00:07:49,759 --> 00:07:52,960
api

00:07:50,479 --> 00:07:55,039
to get back the names of those directors

00:07:52,960 --> 00:07:56,879
so then we can apply the rating that we

00:07:55,039 --> 00:07:59,120
were discussing before

00:07:56,879 --> 00:08:00,080
so we sent on the second line we send

00:07:59,120 --> 00:08:03,120
another request

00:08:00,080 --> 00:08:04,960
where we fool the movie director's names

00:08:03,120 --> 00:08:06,400
and when we have all of that let's say

00:08:04,960 --> 00:08:08,400
we want to do some

00:08:06,400 --> 00:08:09,520
filtering on all of those movies that we

00:08:08,400 --> 00:08:11,360
have acquired

00:08:09,520 --> 00:08:13,039
because we don't want to get buffed from

00:08:11,360 --> 00:08:15,039
that api and that we send

00:08:13,039 --> 00:08:16,400
ratings for other movies we want to send

00:08:15,039 --> 00:08:19,199
only to some of them

00:08:16,400 --> 00:08:20,000
so we're using another let's say

00:08:19,199 --> 00:08:23,520
in-house

00:08:20,000 --> 00:08:25,520
api the magic api and first we

00:08:23,520 --> 00:08:27,759
do a request to that to do some

00:08:25,520 --> 00:08:29,919
filtering of those movies

00:08:27,759 --> 00:08:31,120
once we do that we have a filtered

00:08:29,919 --> 00:08:33,919
movies dictionary

00:08:31,120 --> 00:08:36,560
and for each movie that exists there we

00:08:33,919 --> 00:08:36,560
want to

00:08:37,039 --> 00:08:41,120
apply the magic algorithm that we have

00:08:38,959 --> 00:08:43,599
created that decides the rating

00:08:41,120 --> 00:08:44,720
according to the director of its movie

00:08:43,599 --> 00:08:47,839
and then we want to do

00:08:44,720 --> 00:08:48,560
a post request in the the movie database

00:08:47,839 --> 00:08:52,640
api

00:08:48,560 --> 00:08:54,480
posting the calculated rating we have

00:08:52,640 --> 00:08:56,000
and in the end we can just return the

00:08:54,480 --> 00:08:58,160
dictionaries and

00:08:56,000 --> 00:09:01,200
save them in database or what we want to

00:08:58,160 --> 00:09:03,200
do log them whatever

00:09:01,200 --> 00:09:04,480
that means that uh for this simple

00:09:03,200 --> 00:09:07,920
application we

00:09:04,480 --> 00:09:09,760
have five um five different calls into

00:09:07,920 --> 00:09:12,080
external apis

00:09:09,760 --> 00:09:13,360
three of them go to the movie database

00:09:12,080 --> 00:09:16,800
api two of them

00:09:13,360 --> 00:09:18,959
go to the magic api that we have created

00:09:16,800 --> 00:09:20,640
um this is this seems to be completely

00:09:18,959 --> 00:09:21,600
valid code that's everything that we

00:09:20,640 --> 00:09:24,560
want we have our

00:09:21,600 --> 00:09:25,440
separate functions and yeah all seems

00:09:24,560 --> 00:09:29,040
good

00:09:25,440 --> 00:09:32,160
what happens when we want to test it we

00:09:29,040 --> 00:09:34,160
patch it up right and then

00:09:32,160 --> 00:09:36,480
philosophical questions arise how many

00:09:34,160 --> 00:09:40,320
context managers can you fit in

00:09:36,480 --> 00:09:42,240
88 line characters

00:09:40,320 --> 00:09:43,839
and if we need to mock those five

00:09:42,240 --> 00:09:46,320
different api goals

00:09:43,839 --> 00:09:47,360
and i have very strong opinions on

00:09:46,320 --> 00:09:50,000
styling and that

00:09:47,360 --> 00:09:52,000
made my life very hard and thankfully we

00:09:50,000 --> 00:09:52,720
can use a decorator so that would mean

00:09:52,000 --> 00:09:54,240
that

00:09:52,720 --> 00:09:56,000
our tests are gonna look something like

00:09:54,240 --> 00:09:58,240
this we can

00:09:56,000 --> 00:10:00,160
have um yeah i couldn't even attend

00:09:58,240 --> 00:10:03,760
using context managers so

00:10:00,160 --> 00:10:05,360
decorators of the rescue um we have

00:10:03,760 --> 00:10:07,680
four different decorators that we need

00:10:05,360 --> 00:10:09,839
to carry with us in its tests that we're

00:10:07,680 --> 00:10:11,519
going to write

00:10:09,839 --> 00:10:13,680
the first one actually needs to be

00:10:11,519 --> 00:10:15,920
parameterized because we do

00:10:13,680 --> 00:10:17,279
two get requests in the movie database

00:10:15,920 --> 00:10:20,079
api

00:10:17,279 --> 00:10:21,279
and depending on the exact request that

00:10:20,079 --> 00:10:25,200
is called

00:10:21,279 --> 00:10:28,240
and as you can see this is already a lot

00:10:25,200 --> 00:10:28,560
we need to write more tests and we need

00:10:28,240 --> 00:10:33,600
to

00:10:28,560 --> 00:10:37,200
carry all of this with us every time

00:10:33,600 --> 00:10:40,720
so that test was okay

00:10:37,200 --> 00:10:43,200
but what happens uh it was okay

00:10:40,720 --> 00:10:43,920
but what happens when we want to write

00:10:43,200 --> 00:10:45,360
more tests

00:10:43,920 --> 00:10:47,440
what about when we have different

00:10:45,360 --> 00:10:49,760
arguments other responses

00:10:47,440 --> 00:10:50,880
empty responses other failures and

00:10:49,760 --> 00:10:53,920
exceptions

00:10:50,880 --> 00:10:56,399
in that test we want to taste our our

00:10:53,920 --> 00:10:58,000
application we and it's business logic

00:10:56,399 --> 00:11:00,240
it's not that

00:10:58,000 --> 00:11:02,160
it's not the place really to carry all

00:11:00,240 --> 00:11:03,279
these decorators and test the different

00:11:02,160 --> 00:11:05,760
apis

00:11:03,279 --> 00:11:07,200
and of course we want to test them that

00:11:05,760 --> 00:11:10,079
they are called correctly

00:11:07,200 --> 00:11:11,600
but do those tests can these tests even

00:11:10,079 --> 00:11:14,399
provide us that

00:11:11,600 --> 00:11:14,959
um so it's easy to mix the business

00:11:14,399 --> 00:11:17,300
logic

00:11:14,959 --> 00:11:18,399
with uh with these um

00:11:17,300 --> 00:11:21,680
[Music]

00:11:18,399 --> 00:11:23,279
i o concerns uh so because

00:11:21,680 --> 00:11:25,120
the mocks don't really help with that we

00:11:23,279 --> 00:11:26,240
will need to do to write integration

00:11:25,120 --> 00:11:29,680
tests

00:11:26,240 --> 00:11:32,399
and um yeah that was a lot

00:11:29,680 --> 00:11:34,320
uh it was very easy to forget to move

00:11:32,399 --> 00:11:36,640
those decorators with you it was tightly

00:11:34,320 --> 00:11:39,600
coupled to implementation details

00:11:36,640 --> 00:11:41,440
so we had to change our strategy and uh

00:11:39,600 --> 00:11:42,560
as every good developer when we don't

00:11:41,440 --> 00:11:44,880
know what to do

00:11:42,560 --> 00:11:46,079
we use a search engine and stack

00:11:44,880 --> 00:11:48,399
overflow

00:11:46,079 --> 00:11:49,680
and uh yeah you use your favorite search

00:11:48,399 --> 00:11:51,279
engine and you type how do you write

00:11:49,680 --> 00:11:53,680
units in python

00:11:51,279 --> 00:11:55,680
and you click on the first result and

00:11:53,680 --> 00:11:56,079
someone on stack overflow always has a

00:11:55,680 --> 00:11:58,240
very

00:11:56,079 --> 00:11:59,360
strong absolute opinion that says every

00:11:58,240 --> 00:12:01,040
time you use mocked

00:11:59,360 --> 00:12:03,279
parts it means that you have design flow

00:12:01,040 --> 00:12:05,440
in your architecture it seemed

00:12:03,279 --> 00:12:06,880
a bit offensive in the beginning but it

00:12:05,440 --> 00:12:10,160
made us think a lot

00:12:06,880 --> 00:12:13,040
um this phrase really stood out and it

00:12:10,160 --> 00:12:14,000
it triggered more this design decisions

00:12:13,040 --> 00:12:17,600
in our teams

00:12:14,000 --> 00:12:19,600
why were our tests so difficult to write

00:12:17,600 --> 00:12:22,480
then we remembered another principle

00:12:19,600 --> 00:12:25,440
that all of us could develop is new

00:12:22,480 --> 00:12:26,480
that don't mock what you don't own

00:12:25,440 --> 00:12:28,720
moko.pots

00:12:26,480 --> 00:12:30,480
ties you to specific limitation details

00:12:28,720 --> 00:12:31,200
but we wanted to test really what our

00:12:30,480 --> 00:12:32,959
application

00:12:31,200 --> 00:12:35,040
if our application is doing the right

00:12:32,959 --> 00:12:38,800
thing

00:12:35,040 --> 00:12:40,399
and we had to make a decision so we're

00:12:38,800 --> 00:12:42,959
also about those developers

00:12:40,399 --> 00:12:44,720
discussing python and then it came to us

00:12:42,959 --> 00:12:45,200
that probably we need to go back to our

00:12:44,720 --> 00:12:46,880
roots

00:12:45,200 --> 00:12:48,480
and everything that we have been

00:12:46,880 --> 00:12:52,320
complaining about uh

00:12:48,480 --> 00:12:54,320
simplest plus actually um so

00:12:52,320 --> 00:12:56,399
in order to write as unitas in simplest

00:12:54,320 --> 00:12:57,519
class we tend to use dependency

00:12:56,399 --> 00:12:59,839
injection

00:12:57,519 --> 00:13:01,600
that is a technique where an object

00:12:59,839 --> 00:13:02,399
supplies the dependencies of another

00:13:01,600 --> 00:13:04,399
object

00:13:02,399 --> 00:13:05,760
instead of a client specifying what

00:13:04,399 --> 00:13:07,600
service it will use

00:13:05,760 --> 00:13:09,680
something else tells a client what

00:13:07,600 --> 00:13:12,079
service to use

00:13:09,680 --> 00:13:12,720
and combining that with the adapter

00:13:12,079 --> 00:13:14,959
pattern

00:13:12,720 --> 00:13:16,160
that is a term that i have borrowed by

00:13:14,959 --> 00:13:20,480
hire principles

00:13:16,160 --> 00:13:20,959
python talk this year a stop stop using

00:13:20,480 --> 00:13:22,800
box

00:13:20,959 --> 00:13:24,959
such as a great talk and goes into

00:13:22,800 --> 00:13:27,440
further detail on those topics

00:13:24,959 --> 00:13:28,880
um yeah the adapter pattern provides an

00:13:27,440 --> 00:13:31,760
alternative interface

00:13:28,880 --> 00:13:32,399
for a class api that you are using and

00:13:31,760 --> 00:13:35,440
makes it

00:13:32,399 --> 00:13:36,399
easier to use so it's converting an

00:13:35,440 --> 00:13:39,360
incompatible

00:13:36,399 --> 00:13:40,240
interface of one class into something

00:13:39,360 --> 00:13:43,040
that is

00:13:40,240 --> 00:13:43,920
more easier for your code to use and

00:13:43,040 --> 00:13:46,160
that is

00:13:43,920 --> 00:13:48,240
not much different from just a thin

00:13:46,160 --> 00:13:50,079
wrapper around

00:13:48,240 --> 00:13:53,360
around different functionalities and

00:13:50,079 --> 00:13:56,079
those external api calls

00:13:53,360 --> 00:13:57,120
so this is how a wrapper is going to

00:13:56,079 --> 00:14:00,320
look like

00:13:57,120 --> 00:14:02,240
this is how we can create a new class

00:14:00,320 --> 00:14:04,000
and we can

00:14:02,240 --> 00:14:07,519
hide there all the different calls that

00:14:04,000 --> 00:14:10,880
we are sending to the movie database api

00:14:07,519 --> 00:14:14,399
and how we tend to use that in our code

00:14:10,880 --> 00:14:17,760
so we said we apply dependency injection

00:14:14,399 --> 00:14:20,720
and our main uh great application

00:14:17,760 --> 00:14:22,639
uh where in its initializer it can

00:14:20,720 --> 00:14:25,839
specify the different

00:14:22,639 --> 00:14:28,880
um the different dependencies of it that

00:14:25,839 --> 00:14:30,720
are wrapped in classes or they cannot be

00:14:28,880 --> 00:14:32,000
wrapped in classes if you don't want to

00:14:30,720 --> 00:14:35,440
do that even

00:14:32,000 --> 00:14:38,480
and and we

00:14:35,440 --> 00:14:40,720
the code really that we have below

00:14:38,480 --> 00:14:43,040
is not much different from what we had

00:14:40,720 --> 00:14:45,760
before instead of using

00:14:43,040 --> 00:14:46,399
functions we now have to call methods on

00:14:45,760 --> 00:14:48,959
these

00:14:46,399 --> 00:14:50,639
objects that we have created these two

00:14:48,959 --> 00:14:53,120
wrappers one for the

00:14:50,639 --> 00:14:55,519
database api and for the magic api that

00:14:53,120 --> 00:14:55,519
we own

00:14:56,079 --> 00:15:03,480
and what happens when we uh write tests

00:14:59,920 --> 00:15:06,560
so now we can use the mock object of the

00:15:03,480 --> 00:15:09,120
unity.module and uh

00:15:06,560 --> 00:15:10,160
it's much easier to mock as the api that

00:15:09,120 --> 00:15:13,519
we have created

00:15:10,160 --> 00:15:16,079
is much simpler simpler it makes

00:15:13,519 --> 00:15:17,760
we have more control over it and

00:15:16,079 --> 00:15:21,040
everything is decoupled

00:15:17,760 --> 00:15:23,120
we can add more and more tests and

00:15:21,040 --> 00:15:24,240
testing in the future will be much

00:15:23,120 --> 00:15:27,680
easier

00:15:24,240 --> 00:15:29,680
and then as you can see from this step

00:15:27,680 --> 00:15:31,040
everything is much more readable than

00:15:29,680 --> 00:15:34,320
before we don't have

00:15:31,040 --> 00:15:36,399
ugly context managers or decorators and

00:15:34,320 --> 00:15:37,759
uh if you want to take it as a step

00:15:36,399 --> 00:15:41,199
further you can even

00:15:37,759 --> 00:15:44,560
create your own objects

00:15:41,199 --> 00:15:45,680
but on top of the mock objects and you

00:15:44,560 --> 00:15:48,720
can reuse them

00:15:45,680 --> 00:15:50,959
in tests and the disadvantage

00:15:48,720 --> 00:15:52,240
is that you have to put a little bit

00:15:50,959 --> 00:15:55,680
more effort in your tests

00:15:52,240 --> 00:15:59,600
but the result if you can see already

00:15:55,680 --> 00:15:59,600
that is already much more rewarding

00:16:00,000 --> 00:16:04,800
so as we can see we have already much

00:16:03,680 --> 00:16:07,519
more readable

00:16:04,800 --> 00:16:09,279
extensible flexible tests there's no

00:16:07,519 --> 00:16:11,920
danger to forget to parts

00:16:09,279 --> 00:16:13,360
any dependency and we don't have to care

00:16:11,920 --> 00:16:16,079
about any specific

00:16:13,360 --> 00:16:17,279
api implementation details we hide all

00:16:16,079 --> 00:16:19,759
the ugliness

00:16:17,279 --> 00:16:22,320
into our wrappers and we have nice

00:16:19,759 --> 00:16:25,920
interfaces to work with now

00:16:22,320 --> 00:16:29,279
we test all your business logic not

00:16:25,920 --> 00:16:31,680
the i o and what

00:16:29,279 --> 00:16:33,040
really stood out is that it made us it

00:16:31,680 --> 00:16:35,519
made our design more

00:16:33,040 --> 00:16:36,480
uh thought through so it's a triggered

00:16:35,519 --> 00:16:39,199
conversations

00:16:36,480 --> 00:16:43,279
in the team about how we want to design

00:16:39,199 --> 00:16:43,279
our production code our application

00:16:43,759 --> 00:16:50,560
and uh this is nice uh testing um

00:16:47,680 --> 00:16:51,120
doesn't the implementation details of

00:16:50,560 --> 00:16:53,680
our

00:16:51,120 --> 00:16:54,320
main function but we want to test that

00:16:53,680 --> 00:16:55,839
everything

00:16:54,320 --> 00:16:57,839
plays well together everything is

00:16:55,839 --> 00:17:00,959
connected so what about

00:16:57,839 --> 00:17:04,959
integration tests what happens there

00:17:00,959 --> 00:17:05,439
um in bloomberg we have a concept that

00:17:04,959 --> 00:17:08,640
we

00:17:05,439 --> 00:17:10,799
we call imposters which is uh

00:17:08,640 --> 00:17:12,799
i don't know also called this verified

00:17:10,799 --> 00:17:15,679
fakes which is also

00:17:12,799 --> 00:17:16,240
a fake api generator that has some very

00:17:15,679 --> 00:17:19,839
thick

00:17:16,240 --> 00:17:23,199
verification for io so we

00:17:19,839 --> 00:17:26,400
we create fake apis but

00:17:23,199 --> 00:17:28,720
have um strong contracts about how they

00:17:26,400 --> 00:17:31,760
can code so we can test against them

00:17:28,720 --> 00:17:34,080
and see that the cost of them go as they

00:17:31,760 --> 00:17:34,080
should

00:17:34,400 --> 00:17:39,919
this is how it looks like

00:17:37,440 --> 00:17:40,480
so you can see on the left hand side

00:17:39,919 --> 00:17:43,440
that we

00:17:40,480 --> 00:17:44,720
how we have utilities and we can create

00:17:43,440 --> 00:17:47,760
multiple

00:17:44,720 --> 00:17:50,880
apis from just a simple uh

00:17:47,760 --> 00:17:53,360
fixture that we have created and that

00:17:50,880 --> 00:17:54,640
works well for the internal services

00:17:53,360 --> 00:17:56,000
that we have and

00:17:54,640 --> 00:17:57,679
if you want if you need to mock

00:17:56,000 --> 00:17:59,919
something similar you probably

00:17:57,679 --> 00:18:02,720
need to decide if it is worth doing more

00:17:59,919 --> 00:18:04,480
work but in our case it has proven to be

00:18:02,720 --> 00:18:06,720
a very valuable tool

00:18:04,480 --> 00:18:08,400
so we have one feature that can just

00:18:06,720 --> 00:18:11,679
create all of these

00:18:08,400 --> 00:18:12,559
imposers and that we said the advantage

00:18:11,679 --> 00:18:14,400
of them is that

00:18:12,559 --> 00:18:15,600
they have strong contracts about how

00:18:14,400 --> 00:18:17,520
they need to be called

00:18:15,600 --> 00:18:18,960
so they need to be called with um

00:18:17,520 --> 00:18:22,000
certain parameters

00:18:18,960 --> 00:18:22,480
and that we can specify responses from

00:18:22,000 --> 00:18:26,080
them

00:18:22,480 --> 00:18:27,919
that also adhere to the same contract

00:18:26,080 --> 00:18:30,720
we cannot say that we're gonna return

00:18:27,919 --> 00:18:32,160
just um a half dictionary it has to be a

00:18:30,720 --> 00:18:35,280
full dictionary

00:18:32,160 --> 00:18:36,640
but uh we can specify the fake values in

00:18:35,280 --> 00:18:39,280
that

00:18:36,640 --> 00:18:41,039
so when we make the call uh we hit a

00:18:39,280 --> 00:18:43,440
fake instance of that

00:18:41,039 --> 00:18:44,960
not the actual one not the actual

00:18:43,440 --> 00:18:48,320
service or api

00:18:44,960 --> 00:18:49,039
we can test against similarly again all

00:18:48,320 --> 00:18:51,520
possible

00:18:49,039 --> 00:18:53,039
and impossible scenarios because uh

00:18:51,520 --> 00:18:54,960
users are going to find a way to use the

00:18:53,039 --> 00:18:58,000
services the most wrong way

00:18:54,960 --> 00:18:59,600
and as you can see

00:18:58,000 --> 00:19:01,360
in the right hand side this is how this

00:18:59,600 --> 00:19:04,640
is going to look like we can

00:19:01,360 --> 00:19:05,360
instantiate um this magic servicing

00:19:04,640 --> 00:19:08,000
poster

00:19:05,360 --> 00:19:09,200
and again we can specify verified

00:19:08,000 --> 00:19:11,679
responses this time

00:19:09,200 --> 00:19:13,679
that we're going to say when we make a

00:19:11,679 --> 00:19:15,520
call that calls that api

00:19:13,679 --> 00:19:18,880
then this is the kind of this is the

00:19:15,520 --> 00:19:22,000
response that this is going to return us

00:19:18,880 --> 00:19:25,200
and this is a good way to verify

00:19:22,000 --> 00:19:27,840
that um your wrappers

00:19:25,200 --> 00:19:29,760
work well that you don't call them with

00:19:27,840 --> 00:19:31,120
random parameters but you call them as

00:19:29,760 --> 00:19:33,520
they need to be called

00:19:31,120 --> 00:19:34,400
so we have the unit tests that have

00:19:33,520 --> 00:19:36,480
tested

00:19:34,400 --> 00:19:37,679
all the details of our of our

00:19:36,480 --> 00:19:40,000
implementation

00:19:37,679 --> 00:19:40,799
we have a way to test that our wrappers

00:19:40,000 --> 00:19:44,000
work

00:19:40,799 --> 00:19:44,880
and uh what about endless uh they should

00:19:44,000 --> 00:19:47,280
just work

00:19:44,880 --> 00:19:48,000
right uh someone who regretted saying

00:19:47,280 --> 00:19:49,919
that

00:19:48,000 --> 00:19:51,120
but it is true we have covered

00:19:49,919 --> 00:19:55,679
everything else

00:19:51,120 --> 00:19:55,679
and now we can just test the happy pass

00:19:55,760 --> 00:19:59,760
and how we do that so in the latest

00:19:58,799 --> 00:20:02,320
attempt in the team

00:19:59,760 --> 00:20:04,240
uh we decided to try an approach of plug

00:20:02,320 --> 00:20:06,559
and play

00:20:04,240 --> 00:20:08,000
since we have dependence injection we

00:20:06,559 --> 00:20:11,360
can create a genetic

00:20:08,000 --> 00:20:14,960
test and we can pass different

00:20:11,360 --> 00:20:15,600
apis to that that the test is going to

00:20:14,960 --> 00:20:18,720
use

00:20:15,600 --> 00:20:20,320
and test against those so we can pass

00:20:18,720 --> 00:20:22,320
basically whatever we want

00:20:20,320 --> 00:20:24,000
as we saw before we could pass an

00:20:22,320 --> 00:20:27,280
imposter we can pass

00:20:24,000 --> 00:20:30,480
any other fake that we have created and

00:20:27,280 --> 00:20:33,440
um this is how it can look like

00:20:30,480 --> 00:20:35,520
so in this case we have we create a

00:20:33,440 --> 00:20:36,320
class that is a fake api and another

00:20:35,520 --> 00:20:39,440
class that is

00:20:36,320 --> 00:20:40,000
a real api and in our test class we can

00:20:39,440 --> 00:20:43,440
make

00:20:40,000 --> 00:20:46,080
instances of these two

00:20:43,440 --> 00:20:48,320
classes that we have created then we can

00:20:46,080 --> 00:20:51,440
have a test of is parameterized

00:20:48,320 --> 00:20:53,520
and we can pass different apis real

00:20:51,440 --> 00:20:56,000
and fakes whatever we want and we can

00:20:53,520 --> 00:20:59,520
have only we can write only one test

00:20:56,000 --> 00:21:01,840
that tests against both and that means

00:20:59,520 --> 00:21:03,600
we don't need to duplicate our tests and

00:21:01,840 --> 00:21:05,919
makes our life easier and we

00:21:03,600 --> 00:21:07,120
we make sure that those integration

00:21:05,919 --> 00:21:08,799
tests that we have before

00:21:07,120 --> 00:21:10,720
are really valid because they can also

00:21:08,799 --> 00:21:13,919
play when we pass

00:21:10,720 --> 00:21:16,080
the actual dependency uh of course then

00:21:13,919 --> 00:21:16,720
you can choose which test you want in

00:21:16,080 --> 00:21:19,280
your

00:21:16,720 --> 00:21:20,960
continuous integration platform and you

00:21:19,280 --> 00:21:22,880
can decide how much you test

00:21:20,960 --> 00:21:24,000
you trust your dependencies for some of

00:21:22,880 --> 00:21:27,039
them it can work

00:21:24,000 --> 00:21:30,960
just running all of them for others yeah

00:21:27,039 --> 00:21:34,559
you have to make a call um

00:21:30,960 --> 00:21:37,120
so this talk what has it been about and

00:21:34,559 --> 00:21:38,720
there are many values when it comes to

00:21:37,120 --> 00:21:40,720
good software design

00:21:38,720 --> 00:21:42,400
we want it to be factionable we want it

00:21:40,720 --> 00:21:45,200
to be performant we want to be

00:21:42,400 --> 00:21:46,720
robust we want it to be testable we want

00:21:45,200 --> 00:21:48,880
it to be abstract we want it to be

00:21:46,720 --> 00:21:50,559
extensible and we can be discussing for

00:21:48,880 --> 00:21:53,360
hours about all of these things

00:21:50,559 --> 00:21:55,600
and the important thing is that um

00:21:53,360 --> 00:21:59,039
testable is one of those values

00:21:55,600 --> 00:21:59,840
so i have been in a lot of strong

00:21:59,039 --> 00:22:02,799
discussions

00:21:59,840 --> 00:22:04,000
with developers about encapsulation

00:22:02,799 --> 00:22:07,440
invasion of control

00:22:04,000 --> 00:22:11,280
is it worth to have my tests

00:22:07,440 --> 00:22:14,880
change the way i write production code

00:22:11,280 --> 00:22:15,440
um the test initially we saw that it was

00:22:14,880 --> 00:22:17,120
looking

00:22:15,440 --> 00:22:18,720
uh the codes that we wrote in the

00:22:17,120 --> 00:22:20,559
beginning was looking fine

00:22:18,720 --> 00:22:22,000
but it was our desire to write tests

00:22:20,559 --> 00:22:24,559
that make made us

00:22:22,000 --> 00:22:26,240
really rethink our architecture so the

00:22:24,559 --> 00:22:29,520
pain of writing tests

00:22:26,240 --> 00:22:31,120
drove our design decisions and as i said

00:22:29,520 --> 00:22:33,360
many can complain that i don't want to

00:22:31,120 --> 00:22:36,559
ruin my beautiful production code

00:22:33,360 --> 00:22:37,039
just to test them well your production

00:22:36,559 --> 00:22:39,200
code

00:22:37,039 --> 00:22:40,720
doesn't mean much if it's not tested

00:22:39,200 --> 00:22:43,520
then it's not working

00:22:40,720 --> 00:22:45,360
testing is not optional nowadays it

00:22:43,520 --> 00:22:46,799
shouldn't be it is a requirement of

00:22:45,360 --> 00:22:49,360
completing a task

00:22:46,799 --> 00:22:50,000
so your tests are part of your codes you

00:22:49,360 --> 00:22:52,000
read them

00:22:50,000 --> 00:22:54,080
you write them you change them as you

00:22:52,000 --> 00:22:56,480
change your code you maintain them

00:22:54,080 --> 00:22:57,679
so testability is a good enough reason

00:22:56,480 --> 00:23:00,559
to affect your design

00:22:57,679 --> 00:23:01,679
decisions and this is my thought on the

00:23:00,559 --> 00:23:05,440
matter

00:23:01,679 --> 00:23:08,000
um that was it thank you for listening

00:23:05,440 --> 00:23:10,320
you can find me on twitter here and of

00:23:08,000 --> 00:23:12,080
course we are hiring so we have a

00:23:10,320 --> 00:23:14,080
channel on discord if you want to talk

00:23:12,080 --> 00:23:14,880
to any of our engineers feel free to do

00:23:14,080 --> 00:23:17,280
so

00:23:14,880 --> 00:23:17,280
thank you

00:23:17,350 --> 00:23:22,720
[Applause]

00:23:20,720 --> 00:23:24,000
so yeah again i forgot to i forgot to

00:23:22,720 --> 00:23:26,320
mention that if you want to

00:23:24,000 --> 00:23:27,760
ask any questions there's the q a button

00:23:26,320 --> 00:23:31,520
on soon

00:23:27,760 --> 00:23:34,799
um there's no there's no questions olga

00:23:31,520 --> 00:23:38,240
okay everything was clear yeah i think

00:23:34,799 --> 00:23:42,240
everyone's software is very testable

00:23:38,240 --> 00:23:43,039
that's what i'm assuming okay uh yeah

00:23:42,240 --> 00:23:46,080
feel free to

00:23:43,039 --> 00:23:48,720
chat later to the corresponding channel

00:23:46,080 --> 00:23:50,960
i'll be happy to discuss with everyone

00:23:48,720 --> 00:23:52,880
i'm gonna stop this here now

00:23:50,960 --> 00:23:54,320
cool can i i can ask you a question do

00:23:52,880 --> 00:23:57,279
you have you used any

00:23:54,320 --> 00:23:58,880
um in dependency injection library to

00:23:57,279 --> 00:24:02,000
help you with that

00:23:58,880 --> 00:24:04,000
uh no we haven't i am aware that there

00:24:02,000 --> 00:24:19,760
are some but we haven't tried anything

00:24:04,000 --> 00:24:24,480
yet we just freestyled it

00:24:19,760 --> 00:24:24,480
okay um i think

00:24:24,559 --> 00:24:29,120
yeah i think we can just yeah i'll be

00:24:28,000 --> 00:24:32,159
happy with this or later

00:24:29,120 --> 00:24:33,360
yeah okay cool so if you have any more

00:24:32,159 --> 00:24:35,520
questions do drop

00:24:33,360 --> 00:24:36,720
a message on the slack channel thanks

00:24:35,520 --> 00:24:45,919
olga again

00:24:36,720 --> 00:24:45,919

YouTube URL: https://www.youtube.com/watch?v=sgGOqb85VSU


