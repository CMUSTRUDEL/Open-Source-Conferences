Title: Chase Stevens - Painless Machine Learning in Production
Publication date: 2020-09-21
Playlist: EuroPython 2020
Description: 
	"Painless Machine Learning in Production
EuroPython 2020 - Talk - 2020-07-23 - Parrot Data Science
Online

By Chase Stevens

Developing machine learning models is easy; training, deploying, monitoring, scaling, and maintaining them in an automated fashion - all while maintaining your sanity - is hard. 

In this session, I'll discuss the infrastructure and tooling my small team of data science practitioners and engineers is using to manage and orchestrate the machine learning model lifecycle, including pitfalls we've encountered along the way. Particular attention will be paid to where we've opted to use off-the-shelf solutions versus developing our own, the importance of developer ergonomics, and how to maximally empower data scientists to get their work into production without the need for a dedicated MLOps team.

The talk will cover our ML stack as it exists in production today, and will touch on our application of a number of technologies and techniques, including:
- AWS SageMaker
- Airflow
- Docker
- Cookiecutter
- Property-based testing
- Jsonschema
- Linting
- Slack integration
- Model artifacts and diagnostics
- Automated deployments and rollbacks
- Healthchecks
- Autoscaling
- DBT

At the end of the session, attendees should expect to leave with new insights that they can apply immediately to their own ML systems and infrastructure, as well as a better understanding of how to minimize engineering and ops overhead, in the real world, across data science teams of any size and composition.



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2020.europython.eu/events/speaker-release-agreement/

    "
Captions: 
	00:00:06,480 --> 00:00:10,080
and

00:00:07,040 --> 00:00:14,799
now we are going to the next speaker

00:00:10,080 --> 00:00:18,320
it's jay stevens i see he is in the room

00:00:14,799 --> 00:00:21,760
um please start sharing your slides

00:00:18,320 --> 00:00:23,920
chase will talk about machine learning

00:00:21,760 --> 00:00:24,480
again his talk is painless machine

00:00:23,920 --> 00:00:28,400
learning

00:00:24,480 --> 00:00:31,439
in production hi uh thank you very much

00:00:28,400 --> 00:00:33,680
i'm in greetings from boston um so

00:00:31,439 --> 00:00:35,040
as martin just said in the introduction

00:00:33,680 --> 00:00:38,160
my name is chase

00:00:35,040 --> 00:00:39,840
uh i am a engineer at a company called

00:00:38,160 --> 00:00:42,079
take it metrics i've been working there

00:00:39,840 --> 00:00:44,320
for about the last three years or so

00:00:42,079 --> 00:00:45,200
um as uh the tech lead for the data

00:00:44,320 --> 00:00:46,879
science team

00:00:45,200 --> 00:00:49,760
i'm very excited to be talking about

00:00:46,879 --> 00:00:53,039
this topic um so i'll just get started

00:00:49,760 --> 00:00:53,760
um first of all i just wanted to um help

00:00:53,039 --> 00:00:56,000
clarify

00:00:53,760 --> 00:00:57,199
well what is the um point of this talk

00:00:56,000 --> 00:00:58,879
what am i going to be

00:00:57,199 --> 00:01:00,640
introducing you to if you read the

00:00:58,879 --> 00:01:02,079
description you know that um

00:01:00,640 --> 00:01:04,080
the talk is going to be essentially

00:01:02,079 --> 00:01:06,320
about the um internal machine learning

00:01:04,080 --> 00:01:09,040
platform that we use at ticketmetrics

00:01:06,320 --> 00:01:10,799
um but i just want to clarify like what

00:01:09,040 --> 00:01:12,560
specifically about that am i going to be

00:01:10,799 --> 00:01:14,799
talking about and um

00:01:12,560 --> 00:01:15,840
this is not a machine learning talk

00:01:14,799 --> 00:01:18,159
right this is not about

00:01:15,840 --> 00:01:19,600
painless machine learning in production

00:01:18,159 --> 00:01:20,479
it's about painless machine learning and

00:01:19,600 --> 00:01:22,479
production

00:01:20,479 --> 00:01:23,520
it's going to be much more about sort of

00:01:22,479 --> 00:01:25,280
taking

00:01:23,520 --> 00:01:26,960
models which are sort of our bread and

00:01:25,280 --> 00:01:28,400
butter as data scientists or machine

00:01:26,960 --> 00:01:30,960
learning practitioners

00:01:28,400 --> 00:01:32,960
we have that pretty down pat but taking

00:01:30,960 --> 00:01:33,360
the models and bring them into this sort

00:01:32,960 --> 00:01:35,680
of

00:01:33,360 --> 00:01:37,520
productionized environment where

00:01:35,680 --> 00:01:39,439
internal stakeholders can use them or

00:01:37,520 --> 00:01:40,000
internal consumers or we can expose them

00:01:39,439 --> 00:01:42,159
to the rest

00:01:40,000 --> 00:01:44,320
of the world um is something that we

00:01:42,159 --> 00:01:45,520
maybe need to mature a little in

00:01:44,320 --> 00:01:48,320
so that's what this talk is going to

00:01:45,520 --> 00:01:50,159
focus on also uh to martin's point

00:01:48,320 --> 00:01:51,840
um i say this is painless machine

00:01:50,159 --> 00:01:55,520
learning and production that's maybe

00:01:51,840 --> 00:01:56,799
a lofty goal um when i say painless

00:01:55,520 --> 00:01:57,920
don't don't think of that as like

00:01:56,799 --> 00:02:01,040
expressionless

00:01:57,920 --> 00:02:02,079
or colorless think more like stainless

00:02:01,040 --> 00:02:04,399
steel right

00:02:02,079 --> 00:02:05,840
where it's not going to be a description

00:02:04,399 --> 00:02:08,319
of

00:02:05,840 --> 00:02:08,959
totally pain-free utopia that we've

00:02:08,319 --> 00:02:12,640
built

00:02:08,959 --> 00:02:15,760
at my company but it's rather more of a

00:02:12,640 --> 00:02:18,560
pain resistant um sort of

00:02:15,760 --> 00:02:20,239
platform that we've built so given these

00:02:18,560 --> 00:02:21,120
sort of caveats i did consider other

00:02:20,239 --> 00:02:23,120
names for the

00:02:21,120 --> 00:02:24,480
talk but somehow i thought this wouldn't

00:02:23,120 --> 00:02:26,640
detract as many um

00:02:24,480 --> 00:02:28,239
as many attendees so painless machine

00:02:26,640 --> 00:02:30,720
learning and production it is

00:02:28,239 --> 00:02:32,319
um i also want to talk a little bit

00:02:30,720 --> 00:02:34,959
about the company and this will

00:02:32,319 --> 00:02:36,480
hopefully help um sort of contextualize

00:02:34,959 --> 00:02:37,200
why we have this machine learning

00:02:36,480 --> 00:02:39,440
platform

00:02:37,200 --> 00:02:41,120
what we needed it for all that sort of

00:02:39,440 --> 00:02:42,800
stuff and this is not

00:02:41,120 --> 00:02:44,879
hopefully not going to be your typical

00:02:42,800 --> 00:02:48,000
like shill for the company

00:02:44,879 --> 00:02:49,599
um but really it's more about um some of

00:02:48,000 --> 00:02:53,599
the intrinsic problems that we

00:02:49,599 --> 00:02:57,280
face in our space so um take a metrics

00:02:53,599 --> 00:03:00,239
goal is essentially to help sellers um

00:02:57,280 --> 00:03:02,000
on all sorts of e-commerce platforms

00:03:00,239 --> 00:03:05,040
manage their businesses and sort of

00:03:02,000 --> 00:03:05,920
optimize for profitability i guess you

00:03:05,040 --> 00:03:09,519
would say

00:03:05,920 --> 00:03:11,760
um if you're someone who has a product

00:03:09,519 --> 00:03:13,360
either you know a very small business or

00:03:11,760 --> 00:03:15,680
perhaps a single entrepreneur

00:03:13,360 --> 00:03:16,480
all the way up to very sort of large

00:03:15,680 --> 00:03:18,000
businesses

00:03:16,480 --> 00:03:19,840
if you have a product the things that

00:03:18,000 --> 00:03:23,360
you want to think about

00:03:19,840 --> 00:03:26,640
are like you know improving that product

00:03:23,360 --> 00:03:28,560
um how are sales doing how am i

00:03:26,640 --> 00:03:30,640
doing against my competition what are

00:03:28,560 --> 00:03:31,840
like new opportunities in the market

00:03:30,640 --> 00:03:33,920
these are the sort of things that you're

00:03:31,840 --> 00:03:35,280
probably really good at and really would

00:03:33,920 --> 00:03:38,480
like to focus on

00:03:35,280 --> 00:03:39,840
um unfortunately the reality of

00:03:38,480 --> 00:03:41,519
e-commerce today

00:03:39,840 --> 00:03:43,680
is that there's a bunch of sort of

00:03:41,519 --> 00:03:44,720
extrinsic things that you also have to

00:03:43,680 --> 00:03:46,159
worry about

00:03:44,720 --> 00:03:47,760
and that's sort of where we come in

00:03:46,159 --> 00:03:49,680
right we're trying to sort of smooth

00:03:47,760 --> 00:03:51,920
over that process and give you as much

00:03:49,680 --> 00:03:53,840
insight and as much empowerment as you

00:03:51,920 --> 00:03:55,360
possibly can have as a seller right

00:03:53,840 --> 00:03:57,760
and so the sort of things i'm talking

00:03:55,360 --> 00:03:59,760
about are things like

00:03:57,760 --> 00:04:02,319
managing your advertising spend right

00:03:59,760 --> 00:04:04,239
it's just not going to be an interesting

00:04:02,319 --> 00:04:05,920
interesting problem for for most people

00:04:04,239 --> 00:04:06,480
or maybe not something that people are

00:04:05,920 --> 00:04:09,680
going to be

00:04:06,480 --> 00:04:12,319
um that um that proficient at right

00:04:09,680 --> 00:04:12,959
um things like predicting what the

00:04:12,319 --> 00:04:15,280
demand

00:04:12,959 --> 00:04:16,959
for your product is going to be over the

00:04:15,280 --> 00:04:19,040
next six months right

00:04:16,959 --> 00:04:20,720
managing the inventory and warehousing

00:04:19,040 --> 00:04:23,040
these are the sorts of things where

00:04:20,720 --> 00:04:24,479
um you you really do need a machine

00:04:23,040 --> 00:04:28,080
learning solution

00:04:24,479 --> 00:04:30,240
and um the

00:04:28,080 --> 00:04:32,240
average seller is just not going to be

00:04:30,240 --> 00:04:34,160
either have access to the data

00:04:32,240 --> 00:04:36,000
to produce that sort of solution or

00:04:34,160 --> 00:04:37,520
frankly probably not going to um be

00:04:36,000 --> 00:04:39,120
sophisticated enough or

00:04:37,520 --> 00:04:41,280
have the the right background to sort of

00:04:39,120 --> 00:04:42,720
tackle those um tackle those sorts of

00:04:41,280 --> 00:04:43,600
problems as effectively as they might

00:04:42,720 --> 00:04:46,880
like

00:04:43,600 --> 00:04:49,280
um the other thing that i guess um

00:04:46,880 --> 00:04:51,600
will help sort of situate this talk is

00:04:49,280 --> 00:04:53,199
um we're uh we're a fairly small

00:04:51,600 --> 00:04:55,600
boston-based startup although we have

00:04:53,199 --> 00:04:57,919
offices all over the world now

00:04:55,600 --> 00:04:59,680
and like i said i joined three years ago

00:04:57,919 --> 00:05:01,600
when i joined it was about

00:04:59,680 --> 00:05:04,400
three or so people on the data science

00:05:01,600 --> 00:05:07,039
team so a very very small team

00:05:04,400 --> 00:05:08,560
um i think um two years ago when we

00:05:07,039 --> 00:05:09,680
started sort of building this machine

00:05:08,560 --> 00:05:12,800
learning platform

00:05:09,680 --> 00:05:15,199
it was around um four or five people

00:05:12,800 --> 00:05:16,240
um now we're at about 11 people and

00:05:15,199 --> 00:05:17,759
hoping to

00:05:16,240 --> 00:05:19,759
double the size of the team by the end

00:05:17,759 --> 00:05:21,919
of the year um

00:05:19,759 --> 00:05:24,800
so if you find this talk uh very

00:05:21,919 --> 00:05:26,960
fascinating and why get in on this stuff

00:05:24,800 --> 00:05:29,280
there are openings available but you

00:05:26,960 --> 00:05:32,479
know the i guess central conceit here

00:05:29,280 --> 00:05:35,919
is we've developed this to

00:05:32,479 --> 00:05:38,479
sort of um help our relatively small

00:05:35,919 --> 00:05:39,919
team be much more effective than we

00:05:38,479 --> 00:05:42,560
might otherwise be and it's

00:05:39,919 --> 00:05:43,840
really over the past couple of years um

00:05:42,560 --> 00:05:45,600
accelerated the

00:05:43,840 --> 00:05:47,120
um amount of work we've been able to do

00:05:45,600 --> 00:05:48,479
in the sort of solutions we've been able

00:05:47,120 --> 00:05:50,800
to develop

00:05:48,479 --> 00:05:51,840
but in addition to that you know like i

00:05:50,800 --> 00:05:53,280
said a pretty small

00:05:51,840 --> 00:05:54,960
team and we haven't been working on it

00:05:53,280 --> 00:05:56,400
continuously for the past two years

00:05:54,960 --> 00:05:58,240
we've been working sort of

00:05:56,400 --> 00:05:59,919
piecemeal here and there we've probably

00:05:58,240 --> 00:06:04,080
put in you know a collective

00:05:59,919 --> 00:06:06,880
i don't know um let's say 9 to 12

00:06:04,080 --> 00:06:07,919
developer months um into developing this

00:06:06,880 --> 00:06:11,919
platform

00:06:07,919 --> 00:06:13,120
so um the point being that um

00:06:11,919 --> 00:06:14,800
regardless of the size of your

00:06:13,120 --> 00:06:15,759
organization whether you also are

00:06:14,800 --> 00:06:17,120
working at a

00:06:15,759 --> 00:06:18,960
startup or whether you're working at

00:06:17,120 --> 00:06:20,479
like a fortune 500 company

00:06:18,960 --> 00:06:22,639
some of the principles that i'm going to

00:06:20,479 --> 00:06:23,680
be talking about and the technologies

00:06:22,639 --> 00:06:25,360
that we use

00:06:23,680 --> 00:06:27,440
are something that you can employ

00:06:25,360 --> 00:06:29,680
yourselves right this is not like

00:06:27,440 --> 00:06:30,960
a solution that's been developed by you

00:06:29,680 --> 00:06:34,800
know one of your

00:06:30,960 --> 00:06:35,919
big tech giants so in terms of what i'm

00:06:34,800 --> 00:06:38,240
actually

00:06:35,919 --> 00:06:39,840
going to be talking about in the talk um

00:06:38,240 --> 00:06:41,440
first i'm going to try and convince

00:06:39,840 --> 00:06:41,919
everyone to actually continue listening

00:06:41,440 --> 00:06:43,199
and

00:06:41,919 --> 00:06:45,680
motivate the rest of what i'm going to

00:06:43,199 --> 00:06:46,800
talk about um i'm then going to talk

00:06:45,680 --> 00:06:49,440
about well

00:06:46,800 --> 00:06:50,240
if you are a data scientist at taken

00:06:49,440 --> 00:06:52,319
metrics

00:06:50,240 --> 00:06:53,759
what is your experience uh when you

00:06:52,319 --> 00:06:55,919
start developing a new model

00:06:53,759 --> 00:06:56,960
and i should say that um for the

00:06:55,919 --> 00:06:58,960
purposes of this talk

00:06:56,960 --> 00:07:00,080
essentially all the malls we develop we

00:06:58,960 --> 00:07:02,319
expose as

00:07:00,080 --> 00:07:04,080
internal services so everything is an

00:07:02,319 --> 00:07:05,599
endpoint that you can hit and query and

00:07:04,080 --> 00:07:07,120
get a response back from

00:07:05,599 --> 00:07:08,800
um then i'm going to talk about sort of

00:07:07,120 --> 00:07:10,720
the stack that helps power that

00:07:08,800 --> 00:07:12,240
some of the tools and technologies we're

00:07:10,720 --> 00:07:15,039
using i'm not going to go

00:07:12,240 --> 00:07:16,800
too in-depth um about that that's you

00:07:15,039 --> 00:07:17,520
know this talk is really more focused on

00:07:16,800 --> 00:07:20,720
i guess the

00:07:17,520 --> 00:07:21,919
um the mechanics the um developer

00:07:20,720 --> 00:07:24,319
ergonomics

00:07:21,919 --> 00:07:26,240
and sort of the um general guiding

00:07:24,319 --> 00:07:27,440
principles rather than the nitty gritty

00:07:26,240 --> 00:07:28,080
so i'm not going to be showing you any

00:07:27,440 --> 00:07:29,360
code but

00:07:28,080 --> 00:07:31,360
hopefully it should be an interesting

00:07:29,360 --> 00:07:32,319
reference um if you would like to

00:07:31,360 --> 00:07:36,080
develop a similar

00:07:32,319 --> 00:07:37,680
um like a solution at your organization

00:07:36,080 --> 00:07:39,360
and then the last thing i want to cover

00:07:37,680 --> 00:07:41,520
is basically um

00:07:39,360 --> 00:07:42,639
what are the lessons that we've learned

00:07:41,520 --> 00:07:44,240
over the past two years or what are

00:07:42,639 --> 00:07:47,039
things we might have done differently or

00:07:44,240 --> 00:07:48,400
i guess how do we evolve the platform to

00:07:47,039 --> 00:07:51,440
the stands in today

00:07:48,400 --> 00:07:53,360
so without any further ado um

00:07:51,440 --> 00:07:55,360
first there are a couple of i guess

00:07:53,360 --> 00:07:58,400
premises to this talk that

00:07:55,360 --> 00:08:00,720
will help motivate why i'm giving it and

00:07:58,400 --> 00:08:04,479
why we sort of need this

00:08:00,720 --> 00:08:07,440
this solution so um i'll i'll

00:08:04,479 --> 00:08:09,520
help justify these later on but for now

00:08:07,440 --> 00:08:12,240
let's just assume these things are true

00:08:09,520 --> 00:08:13,840
first of all ops is intrinsic to ml and

00:08:12,240 --> 00:08:17,199
what i mean by ops is i mean

00:08:13,840 --> 00:08:19,520
sort of the process of bringing your

00:08:17,199 --> 00:08:20,319
machine learning model into production

00:08:19,520 --> 00:08:22,639
and

00:08:20,319 --> 00:08:23,599
monitoring maintaining that model it's

00:08:22,639 --> 00:08:26,080
it's really

00:08:23,599 --> 00:08:26,879
direly important for having an effective

00:08:26,080 --> 00:08:30,960
machine learning

00:08:26,879 --> 00:08:34,000
solution in addition to that

00:08:30,960 --> 00:08:36,880
um there's this concept called ml ops

00:08:34,000 --> 00:08:38,000
which is unsustainable and when i say

00:08:36,880 --> 00:08:41,839
ammo ops i mean

00:08:38,000 --> 00:08:45,600
sort of this this concept of um

00:08:41,839 --> 00:08:47,440
well you have the data scientists or

00:08:45,600 --> 00:08:48,720
machine learning practitioners or or

00:08:47,440 --> 00:08:50,399
what have you

00:08:48,720 --> 00:08:52,000
they know how to do data science stuff

00:08:50,399 --> 00:08:53,440
and develop the algorithms and whatever

00:08:52,000 --> 00:08:55,519
those data scientists do

00:08:53,440 --> 00:08:56,880
and when they're done with that you take

00:08:55,519 --> 00:08:58,480
whatever solution they develop and you

00:08:56,880 --> 00:09:00,640
hand off to someone else

00:08:58,480 --> 00:09:02,320
and they are the ones who maybe have a

00:09:00,640 --> 00:09:04,959
little more engineering background

00:09:02,320 --> 00:09:06,640
or a little more experience that take it

00:09:04,959 --> 00:09:07,120
and expose it to the rest of the world

00:09:06,640 --> 00:09:09,040
or

00:09:07,120 --> 00:09:10,959
integrate with other services or what

00:09:09,040 --> 00:09:13,760
have you um

00:09:10,959 --> 00:09:14,160
so assuming these two premises are true

00:09:13,760 --> 00:09:16,160
um

00:09:14,160 --> 00:09:17,440
the sort of inevitable conclusion is

00:09:16,160 --> 00:09:20,320
that um

00:09:17,440 --> 00:09:21,920
well if the mlops team is in the

00:09:20,320 --> 00:09:24,320
sustainable practice

00:09:21,920 --> 00:09:25,680
but operations are important to machine

00:09:24,320 --> 00:09:27,680
learning intrinsically

00:09:25,680 --> 00:09:28,959
then data scientists need to be able to

00:09:27,680 --> 00:09:30,880
productionize their own

00:09:28,959 --> 00:09:33,440
models right data scientists need to

00:09:30,880 --> 00:09:36,000
have the tooling and and be empowered

00:09:33,440 --> 00:09:38,320
to take things from conceptualization

00:09:36,000 --> 00:09:40,480
all the way through to production

00:09:38,320 --> 00:09:42,240
there's a catch though uh data

00:09:40,480 --> 00:09:44,640
scientists want to do data science and

00:09:42,240 --> 00:09:46,000
i won't help motivate this one um but

00:09:44,640 --> 00:09:48,560
this hopefully should be pretty

00:09:46,000 --> 00:09:49,680
uncontroversial right um as data

00:09:48,560 --> 00:09:50,640
scientists or machine learning

00:09:49,680 --> 00:09:52,320
practitioners

00:09:50,640 --> 00:09:54,560
the thing that we are best at and the

00:09:52,320 --> 00:09:56,480
thing that we find most interesting

00:09:54,560 --> 00:09:58,080
is you know sort of getting down to the

00:09:56,480 --> 00:10:00,320
nitty gritty and developing

00:09:58,080 --> 00:10:01,600
new innovative interesting solutions

00:10:00,320 --> 00:10:03,839
right

00:10:01,600 --> 00:10:05,200
people coming to data science from all

00:10:03,839 --> 00:10:05,920
sorts of different backgrounds with all

00:10:05,200 --> 00:10:08,160
sorts of different

00:10:05,920 --> 00:10:09,600
levels of i guess engineering expertise

00:10:08,160 --> 00:10:13,360
or experience

00:10:09,600 --> 00:10:15,120
and um we can't uniformly assume that

00:10:13,360 --> 00:10:16,640
every data scientist is going to know

00:10:15,120 --> 00:10:18,240
the best route forward to bringing a

00:10:16,640 --> 00:10:20,399
model into production

00:10:18,240 --> 00:10:22,560
so hence we need to develop these sort

00:10:20,399 --> 00:10:25,600
of tooling and services

00:10:22,560 --> 00:10:26,640
to really minimize the overhead minimize

00:10:25,600 --> 00:10:29,519
the pain

00:10:26,640 --> 00:10:29,839
and make it so that that whole process

00:10:29,519 --> 00:10:33,040
is

00:10:29,839 --> 00:10:36,720
is easy so now i'd like to start

00:10:33,040 --> 00:10:39,279
justifying those first two premises um

00:10:36,720 --> 00:10:40,880
i'm sure people have seen diagrams like

00:10:39,279 --> 00:10:43,200
this a million times but

00:10:40,880 --> 00:10:44,959
i'll just i'll just go through it this

00:10:43,200 --> 00:10:47,680
is sort of the

00:10:44,959 --> 00:10:48,880
platonic ideal of machine learning life

00:10:47,680 --> 00:10:51,920
cycle right

00:10:48,880 --> 00:10:53,920
and so the idea roughly is you have some

00:10:51,920 --> 00:10:55,120
data live somewhere in like a you know

00:10:53,920 --> 00:10:56,720
data warehouse or

00:10:55,120 --> 00:10:58,320
accessible through some apis or

00:10:56,720 --> 00:11:00,480
something like this and

00:10:58,320 --> 00:11:01,440
um the first thing you need to do is

00:11:00,480 --> 00:11:03,519
take that

00:11:01,440 --> 00:11:05,440
do some pre-processing query those apis

00:11:03,519 --> 00:11:07,839
or query that um data warehouse

00:11:05,440 --> 00:11:09,600
and turn it into you know a training set

00:11:07,839 --> 00:11:10,880
a test set of validation set

00:11:09,600 --> 00:11:13,120
all that sort of good stuff maybe do

00:11:10,880 --> 00:11:13,519
some feature engineering maybe some data

00:11:13,120 --> 00:11:17,120
cleaning

00:11:13,519 --> 00:11:19,200
things like that then you have some um

00:11:17,120 --> 00:11:20,640
some model that either is off the shelf

00:11:19,200 --> 00:11:22,320
or you developed yourself

00:11:20,640 --> 00:11:24,240
that you would like to train using the

00:11:22,320 --> 00:11:26,320
training data right

00:11:24,240 --> 00:11:28,079
after that's done you have some set of

00:11:26,320 --> 00:11:30,399
parameters you've learned for that model

00:11:28,079 --> 00:11:32,480
which you can then evaluate and the

00:11:30,399 --> 00:11:35,600
evaluation might be you know

00:11:32,480 --> 00:11:37,120
some sort of manual evaluation like hey

00:11:35,600 --> 00:11:39,600
does the accuracy of this model look

00:11:37,120 --> 00:11:41,200
good or it might be a comparison against

00:11:39,600 --> 00:11:43,390
an established baseline

00:11:41,200 --> 00:11:44,640
or something like this right and then

00:11:43,390 --> 00:11:47,600
[Music]

00:11:44,640 --> 00:11:48,399
you deploy it somehow right and this is

00:11:47,600 --> 00:11:52,639
sort of the step

00:11:48,399 --> 00:11:55,440
that um i think as a discipline we

00:11:52,639 --> 00:11:56,880
haven't focused enough on perhaps

00:11:55,440 --> 00:11:57,440
because there's a lot of complexity in

00:11:56,880 --> 00:11:59,360
here right

00:11:57,440 --> 00:12:00,399
if you think about like normal software

00:11:59,360 --> 00:12:02,399
engineering this is actually the

00:12:00,399 --> 00:12:05,680
majority of the complexity is uh

00:12:02,399 --> 00:12:07,760
figuring out um how to look at things

00:12:05,680 --> 00:12:08,880
like logs monitoring implement auto

00:12:07,760 --> 00:12:11,200
scaling

00:12:08,880 --> 00:12:12,959
all these sorts of considerations that

00:12:11,200 --> 00:12:14,240
again as data scientists we don't want

00:12:12,959 --> 00:12:16,079
to have to

00:12:14,240 --> 00:12:18,079
worry about or think about are really

00:12:16,079 --> 00:12:19,680
aren't our wheelhouse

00:12:18,079 --> 00:12:21,839
and in addition to that you have this

00:12:19,680 --> 00:12:23,920
sort of um

00:12:21,839 --> 00:12:25,120
intrinsic orchestration component where

00:12:23,920 --> 00:12:27,200
you'd like all of this

00:12:25,120 --> 00:12:28,240
cycle to just be automated for you

00:12:27,200 --> 00:12:31,760
basically

00:12:28,240 --> 00:12:33,600
um there's also this other strange

00:12:31,760 --> 00:12:36,399
aspect where

00:12:33,600 --> 00:12:37,040
okay you have a deployed model why do

00:12:36,399 --> 00:12:38,880
you need to do

00:12:37,040 --> 00:12:40,399
pre-processing again like why is there

00:12:38,880 --> 00:12:41,680
this little arrow from deployment to

00:12:40,399 --> 00:12:45,120
pre-processing

00:12:41,680 --> 00:12:47,360
the answer is you know um unfortunately

00:12:45,120 --> 00:12:48,160
the world is sort of pulling the rug out

00:12:47,360 --> 00:12:50,639
from under us

00:12:48,160 --> 00:12:52,079
at all times right um there are always

00:12:50,639 --> 00:12:52,720
new observations that you're making

00:12:52,079 --> 00:12:54,560
hopefully

00:12:52,720 --> 00:12:55,920
whatever models or solutions you've

00:12:54,560 --> 00:12:57,440
actually deployed in production

00:12:55,920 --> 00:12:59,200
are having some effect on that world

00:12:57,440 --> 00:13:01,040
that you'd like to monitor you might

00:12:59,200 --> 00:13:03,200
just be learning new things right

00:13:01,040 --> 00:13:04,720
and that i guess environment is

00:13:03,200 --> 00:13:06,800
constantly changing

00:13:04,720 --> 00:13:07,760
and you need to be able to adapt your

00:13:06,800 --> 00:13:11,839
model to

00:13:07,760 --> 00:13:13,519
survive um so you know two years ago

00:13:11,839 --> 00:13:15,360
we had this sort of concept which i

00:13:13,519 --> 00:13:17,839
think is is fairly standard

00:13:15,360 --> 00:13:19,519
um that we want to find a solution for

00:13:17,839 --> 00:13:22,320
and we searched high and low

00:13:19,519 --> 00:13:23,839
for some service that lives out there in

00:13:22,320 --> 00:13:27,200
the big wide world that will just

00:13:23,839 --> 00:13:29,680
sell us this platform and to be frank we

00:13:27,200 --> 00:13:31,600
couldn't find it you could find places

00:13:29,680 --> 00:13:33,200
maybe that will do the

00:13:31,600 --> 00:13:34,880
offer solutions for pre-processing and

00:13:33,200 --> 00:13:36,639
training or might offer

00:13:34,880 --> 00:13:38,240
all of these but um don't have that

00:13:36,639 --> 00:13:39,440
orchestration compiler right instead

00:13:38,240 --> 00:13:41,199
want you to

00:13:39,440 --> 00:13:42,800
manually run all the cells in some

00:13:41,199 --> 00:13:44,800
jupiter notebook you because data

00:13:42,800 --> 00:13:46,480
scientists love jupiter notebooks

00:13:44,800 --> 00:13:48,560
you know some some jupiter notebook that

00:13:46,480 --> 00:13:51,040
you have which is just not a

00:13:48,560 --> 00:13:52,320
sustainable practice and to sort of help

00:13:51,040 --> 00:13:55,199
evidence that

00:13:52,320 --> 00:13:56,560
so this is a very interesting uh chart

00:13:55,199 --> 00:13:58,720
this is basically

00:13:56,560 --> 00:14:00,480
a few different classifiers a few

00:13:58,720 --> 00:14:01,120
different models that were learned on

00:14:00,480 --> 00:14:03,199
data

00:14:01,120 --> 00:14:04,480
at the beginning of january of 2017

00:14:03,199 --> 00:14:06,399
right and

00:14:04,480 --> 00:14:09,120
what they're trying to do is determine

00:14:06,399 --> 00:14:12,160
or i guess classify whether a

00:14:09,120 --> 00:14:14,160
particular url is malicious or not and

00:14:12,160 --> 00:14:16,399
you can see that at the beginning of

00:14:14,160 --> 00:14:19,199
january they all do really well

00:14:16,399 --> 00:14:19,760
um i guess this is um their area under

00:14:19,199 --> 00:14:22,720
the curve

00:14:19,760 --> 00:14:23,920
over over time in using uh real world

00:14:22,720 --> 00:14:25,120
urls right

00:14:23,920 --> 00:14:27,120
and then you see this sort of

00:14:25,120 --> 00:14:29,040
precipitous drop all of a sudden in the

00:14:27,120 --> 00:14:31,600
middle of february

00:14:29,040 --> 00:14:33,120
if you're in an organization or if

00:14:31,600 --> 00:14:33,680
you're part of a data science team that

00:14:33,120 --> 00:14:35,600
is

00:14:33,680 --> 00:14:37,519
not constantly retraining the models on

00:14:35,600 --> 00:14:39,760
the newest freshest data

00:14:37,519 --> 00:14:40,800
if you aren't monitoring the accuracy of

00:14:39,760 --> 00:14:42,800
your models or

00:14:40,800 --> 00:14:44,639
um you know some of these operational

00:14:42,800 --> 00:14:46,320
metrics then

00:14:44,639 --> 00:14:48,079
this is going to come as a big surprise

00:14:46,320 --> 00:14:49,680
to you and all of a sudden things might

00:14:48,079 --> 00:14:50,800
start failing that you didn't expect to

00:14:49,680 --> 00:14:52,959
fail

00:14:50,800 --> 00:14:55,040
and to show this is not i guess uh

00:14:52,959 --> 00:14:58,480
phenomenon isolated just to

00:14:55,040 --> 00:15:01,040
this one domain um this is um some of

00:14:58,480 --> 00:15:02,000
uh our data right so the blue line here

00:15:01,040 --> 00:15:05,600
is showing you

00:15:02,000 --> 00:15:08,320
um the daily uh number of

00:15:05,600 --> 00:15:10,079
uh orders for a like household cleaning

00:15:08,320 --> 00:15:12,959
product that one of our sellers

00:15:10,079 --> 00:15:13,600
sells and the orange dotted line is

00:15:12,959 --> 00:15:17,279
showing you

00:15:13,600 --> 00:15:19,680
um uh oxford data set um

00:15:17,279 --> 00:15:20,720
a measurement of um the stringency of

00:15:19,680 --> 00:15:22,560
the

00:15:20,720 --> 00:15:24,160
coronavirus countermeasures in the

00:15:22,560 --> 00:15:25,600
united states right which is sort of an

00:15:24,160 --> 00:15:26,160
aggregate of all sorts of different

00:15:25,600 --> 00:15:28,560
individual

00:15:26,160 --> 00:15:29,680
measures that have been implemented uh

00:15:28,560 --> 00:15:31,279
and you can see this is sort of a

00:15:29,680 --> 00:15:34,320
correlation made in heaven

00:15:31,279 --> 00:15:36,880
i guess um but the um

00:15:34,320 --> 00:15:37,600
you know general gift of this is that if

00:15:36,880 --> 00:15:40,079
we

00:15:37,600 --> 00:15:41,120
we're in a space where if we had learned

00:15:40,079 --> 00:15:43,680
this model

00:15:41,120 --> 00:15:44,800
predicting what the daily order volume

00:15:43,680 --> 00:15:48,480
for instance is

00:15:44,800 --> 00:15:49,920
at the tail end of 2019 we wouldn't be

00:15:48,480 --> 00:15:53,040
doing very well come

00:15:49,920 --> 00:15:56,240
the middle of march right um and this

00:15:53,040 --> 00:15:58,399
um this sort of pervades into

00:15:56,240 --> 00:15:59,519
a whole different uh a whole different

00:15:58,399 --> 00:16:02,079
set of domains

00:15:59,519 --> 00:16:03,440
um all sorts of use cases um have the

00:16:02,079 --> 00:16:05,440
same sort of pattern it's not just the

00:16:03,440 --> 00:16:08,079
sort of time series data or

00:16:05,440 --> 00:16:10,240
not just um necessarily because the

00:16:08,079 --> 00:16:11,600
world is sort of stochastic and changing

00:16:10,240 --> 00:16:14,320
out from underneath you but

00:16:11,600 --> 00:16:15,440
also you know you anytime you have a new

00:16:14,320 --> 00:16:17,600
client or a new

00:16:15,440 --> 00:16:18,560
user a new customer a new use case for

00:16:17,600 --> 00:16:21,680
the model

00:16:18,560 --> 00:16:23,600
you might have the same problem again um

00:16:21,680 --> 00:16:25,519
in in our domain we have some models

00:16:23,600 --> 00:16:26,880
that we learn on a marketplace specific

00:16:25,519 --> 00:16:27,839
basis we learn parameters on a

00:16:26,880 --> 00:16:29,839
marketplace

00:16:27,839 --> 00:16:31,519
specific basis where a marketplace might

00:16:29,839 --> 00:16:34,560
be um

00:16:31,519 --> 00:16:35,040
great britain or you know germany or the

00:16:34,560 --> 00:16:38,079
us

00:16:35,040 --> 00:16:40,000
or wherever and you know for instance

00:16:38,079 --> 00:16:41,519
suppose it's the case that um

00:16:40,000 --> 00:16:43,600
we only have one seller in that

00:16:41,519 --> 00:16:46,160
marketplace and they sell i don't know

00:16:43,600 --> 00:16:48,000
pencils for you know 10 cents a piece

00:16:46,160 --> 00:16:49,920
something like this

00:16:48,000 --> 00:16:51,360
and then tomorrow we have a new seller

00:16:49,920 --> 00:16:53,920
that's selling luck that's selling

00:16:51,360 --> 00:16:56,480
luxury um watches for 500

00:16:53,920 --> 00:16:58,000
up right the parameters they've learned

00:16:56,480 --> 00:16:59,759
for that first seller aren't necessarily

00:16:58,000 --> 00:17:02,000
going to apply to the second seller

00:16:59,759 --> 00:17:04,319
so we constantly need to be retraining

00:17:02,000 --> 00:17:05,760
reevaluating these models and

00:17:04,319 --> 00:17:07,760
measuring the performance of them and

00:17:05,760 --> 00:17:11,199
that's why it's so so

00:17:07,760 --> 00:17:12,640
um important to have a good grasp and a

00:17:11,199 --> 00:17:16,839
good platform for

00:17:12,640 --> 00:17:19,039
easily enabling sort of these whole

00:17:16,839 --> 00:17:20,400
operational world that you you might

00:17:19,039 --> 00:17:24,000
like to have

00:17:20,400 --> 00:17:24,000
some system to orchestrate for you

00:17:25,199 --> 00:17:30,080
i also want to talk about why do i think

00:17:28,559 --> 00:17:31,600
machine learning operations is an

00:17:30,080 --> 00:17:34,400
unsustainable practice

00:17:31,600 --> 00:17:35,520
and let's go a little bit back in time

00:17:34,400 --> 00:17:38,480
let's say you're a

00:17:35,520 --> 00:17:39,840
hot shot developer in the 1970s right

00:17:38,480 --> 00:17:41,039
what is your what does your day-to-day

00:17:39,840 --> 00:17:45,280
look like

00:17:41,039 --> 00:17:48,559
well um you write your code onto

00:17:45,280 --> 00:17:49,919
punch cards and when you want to have

00:17:48,559 --> 00:17:51,280
that code run or when you want to

00:17:49,919 --> 00:17:54,080
compile it

00:17:51,280 --> 00:17:56,000
what do you do well you take the stack

00:17:54,080 --> 00:17:59,360
of punch cards that you've written

00:17:56,000 --> 00:18:01,520
and you go down to the computer lab

00:17:59,360 --> 00:18:04,559
and you hand it over to some computer

00:18:01,520 --> 00:18:07,919
operator because in the 1970s

00:18:04,559 --> 00:18:09,280
well programmers uh progress can't be

00:18:07,919 --> 00:18:10,640
trusted with computers right that's a

00:18:09,280 --> 00:18:12,799
ridiculous notion

00:18:10,640 --> 00:18:14,480
why uh you know the programmer doesn't

00:18:12,799 --> 00:18:14,880
know how to run the punch cards through

00:18:14,480 --> 00:18:17,440
the

00:18:14,880 --> 00:18:19,600
mainframe they don't know you know how

00:18:17,440 --> 00:18:20,720
to figure out oh this transistor's blown

00:18:19,600 --> 00:18:22,400
i need to replace it

00:18:20,720 --> 00:18:24,320
none of those things you would never

00:18:22,400 --> 00:18:28,400
have a programmer touching the

00:18:24,320 --> 00:18:31,760
the computer that's a very odd notion

00:18:28,400 --> 00:18:32,960
um and so what was what people at the

00:18:31,760 --> 00:18:34,960
time think about this

00:18:32,960 --> 00:18:37,360
and this uh next slide these are all

00:18:34,960 --> 00:18:39,200
real quotes that i've pulled from

00:18:37,360 --> 00:18:41,200
different accounts of people that are

00:18:39,200 --> 00:18:42,000
working in the 1970s using this sort of

00:18:41,200 --> 00:18:45,440
um

00:18:42,000 --> 00:18:47,600
punch card flow i guess um and they're

00:18:45,440 --> 00:18:48,960
pretty amusing but it was it was not a

00:18:47,600 --> 00:18:52,000
great experience

00:18:48,960 --> 00:18:54,320
so um for instance this middle uh

00:18:52,000 --> 00:18:55,280
quote here i think helps sort of justify

00:18:54,320 --> 00:18:57,120
what i was just saying

00:18:55,280 --> 00:18:58,559
only a select few programmers were

00:18:57,120 --> 00:19:00,720
allowed in the computer lab again there

00:18:58,559 --> 00:19:03,120
was this very odd division

00:19:00,720 --> 00:19:04,480
um but as you sort of read through these

00:19:03,120 --> 00:19:07,760
some of these they're

00:19:04,480 --> 00:19:10,320
pretty insidious accounts or

00:19:07,760 --> 00:19:11,679
very i guess poor development

00:19:10,320 --> 00:19:14,720
experiences where

00:19:11,679 --> 00:19:15,919
the um latency of you submitting that

00:19:14,720 --> 00:19:17,520
program and getting back

00:19:15,919 --> 00:19:19,679
the output or the compiled program or

00:19:17,520 --> 00:19:22,000
whatever is on the order of

00:19:19,679 --> 00:19:23,760
hours days there's one account here

00:19:22,000 --> 00:19:25,039
where um someone's doing something for a

00:19:23,760 --> 00:19:27,840
final exam

00:19:25,039 --> 00:19:29,360
and uh they have four days before the

00:19:27,840 --> 00:19:32,080
deadline and they can only comply

00:19:29,360 --> 00:19:33,840
compile it four times and if it happens

00:19:32,080 --> 00:19:35,200
to be the case you forgot a semicolon or

00:19:33,840 --> 00:19:39,280
something like that

00:19:35,200 --> 00:19:41,679
well try again next time right so um

00:19:39,280 --> 00:19:42,640
how did we how did we end up moving past

00:19:41,679 --> 00:19:46,000
this into a

00:19:42,640 --> 00:19:47,520
i guess more humane um ergonomic

00:19:46,000 --> 00:19:49,360
environment for development

00:19:47,520 --> 00:19:51,760
and the answer was the advent of this

00:19:49,360 --> 00:19:54,080
sort of um dumb terminal right so

00:19:51,760 --> 00:19:56,240
i can directly connect to the mainframe

00:19:54,080 --> 00:19:58,640
i have some time on that mainframe

00:19:56,240 --> 00:19:59,919
um and uh i can just run the programs

00:19:58,640 --> 00:20:01,039
myself i don't have to have this

00:19:59,919 --> 00:20:04,159
intermediary

00:20:01,039 --> 00:20:06,159
that's um helping me compile my programs

00:20:04,159 --> 00:20:07,200
um so there was an advancement in

00:20:06,159 --> 00:20:10,640
technology

00:20:07,200 --> 00:20:12,320
but that was also met with um i guess uh

00:20:10,640 --> 00:20:13,760
change in the skill set that was

00:20:12,320 --> 00:20:16,720
expected of programmers

00:20:13,760 --> 00:20:18,559
so it wasn't uh sufficient anymore to

00:20:16,720 --> 00:20:20,159
just know how to write the program

00:20:18,559 --> 00:20:21,600
you also had to you know get familiar

00:20:20,159 --> 00:20:23,039
with the command line and

00:20:21,600 --> 00:20:24,720
all these sorts of things figure out how

00:20:23,039 --> 00:20:28,000
to compile your program

00:20:24,720 --> 00:20:30,880
um so it was sort of this this measure

00:20:28,000 --> 00:20:32,640
we met in the middle a little bit um and

00:20:30,880 --> 00:20:34,880
of course we learned our lesson

00:20:32,640 --> 00:20:36,240
uh so we never had anything like this

00:20:34,880 --> 00:20:38,880
happen again

00:20:36,240 --> 00:20:39,600
so now let's say that you're a

00:20:38,880 --> 00:20:42,960
programmer

00:20:39,600 --> 00:20:43,440
in like the uh the heady early web days

00:20:42,960 --> 00:20:46,080
right

00:20:43,440 --> 00:20:46,640
your life is pretty sweet uh what do you

00:20:46,080 --> 00:20:50,000
do

00:20:46,640 --> 00:20:51,120
uh you code um then do you write unit

00:20:50,000 --> 00:20:53,440
tests or anything like that

00:20:51,120 --> 00:20:54,159
no of course not you have a qa team and

00:20:53,440 --> 00:20:57,760
you

00:20:54,159 --> 00:20:59,520
give your your solution to the qa team

00:20:57,760 --> 00:21:01,120
they write in some sort of environment

00:20:59,520 --> 00:21:02,480
and they go okay it looks good for

00:21:01,120 --> 00:21:05,039
release and then

00:21:02,480 --> 00:21:06,640
they pass it along to you know your like

00:21:05,039 --> 00:21:08,960
sys admin or it

00:21:06,640 --> 00:21:10,159
team or whomever that's going to release

00:21:08,960 --> 00:21:12,000
it

00:21:10,159 --> 00:21:13,200
easy peasy right you're living in a lap

00:21:12,000 --> 00:21:15,840
of luxury

00:21:13,200 --> 00:21:16,480
except that sometimes their problems

00:21:15,840 --> 00:21:20,320
right

00:21:16,480 --> 00:21:23,360
so um you uh maybe uh were

00:21:20,320 --> 00:21:25,600
using a functionality in php that uh is

00:21:23,360 --> 00:21:27,440
not actually installed on the server or

00:21:25,600 --> 00:21:28,799
you know whatever and you know

00:21:27,440 --> 00:21:31,280
fundamentally this was

00:21:28,799 --> 00:21:32,400
an insurmountable obstacle obviously you

00:21:31,280 --> 00:21:34,640
don't have the people

00:21:32,400 --> 00:21:36,400
doing the coding also doing the

00:21:34,640 --> 00:21:38,640
releasing because

00:21:36,400 --> 00:21:40,799
coders don't know how to i don't know

00:21:38,640 --> 00:21:44,880
install rpm packages

00:21:40,799 --> 00:21:46,960
or update open ssl or

00:21:44,880 --> 00:21:48,880
configure apache or anything like that

00:21:46,960 --> 00:21:50,159
right so you just don't have the same

00:21:48,880 --> 00:21:51,760
skill set and you wouldn't want those

00:21:50,159 --> 00:21:54,559
same people doing it

00:21:51,760 --> 00:21:55,039
but again over time we sort of remedied

00:21:54,559 --> 00:21:58,400
this

00:21:55,039 --> 00:22:00,240
um this situation um through the advent

00:21:58,400 --> 00:22:01,840
of services like aws

00:22:00,240 --> 00:22:03,840
where all of a sudden hey at least i

00:22:01,840 --> 00:22:05,840
don't have to actually physically

00:22:03,840 --> 00:22:07,840
put a server in some like co-located

00:22:05,840 --> 00:22:10,720
data center i can just

00:22:07,840 --> 00:22:12,559
spin up a box i guess and start

00:22:10,720 --> 00:22:13,280
installing things on that box which is

00:22:12,559 --> 00:22:14,880
great

00:22:13,280 --> 00:22:16,720
and then we got a little further along

00:22:14,880 --> 00:22:17,440
and you have services like heroku that

00:22:16,720 --> 00:22:20,000
is sort of

00:22:17,440 --> 00:22:21,200
one level of extraction higher where now

00:22:20,000 --> 00:22:22,880
i don't even have to know

00:22:21,200 --> 00:22:24,880
you know how to install things on my box

00:22:22,880 --> 00:22:27,520
or anything like that i don't have to

00:22:24,880 --> 00:22:29,600
worry about security patches or or any

00:22:27,520 --> 00:22:31,600
of those sort of operational concerns

00:22:29,600 --> 00:22:33,520
um this service will take care of it for

00:22:31,600 --> 00:22:36,000
me and then of course

00:22:33,520 --> 00:22:36,960
there are things like squarespace or wix

00:22:36,000 --> 00:22:38,240
or whatever where

00:22:36,960 --> 00:22:40,720
you don't even have to know how to code

00:22:38,240 --> 00:22:41,919
right you can make a web app or what

00:22:40,720 --> 00:22:44,960
have you

00:22:41,919 --> 00:22:47,360
pretty easily um but again

00:22:44,960 --> 00:22:50,000
um this wasn't just technological

00:22:47,360 --> 00:22:52,240
solutions um

00:22:50,000 --> 00:22:53,200
helping us gloss over this problem you

00:22:52,240 --> 00:22:56,080
also had a

00:22:53,200 --> 00:22:58,320
commensurate increase in the i guess um

00:22:56,080 --> 00:23:01,440
set of responsibilities or the remit

00:22:58,320 --> 00:23:03,200
of the average developer um

00:23:01,440 --> 00:23:05,360
developer software engineers i guess

00:23:03,200 --> 00:23:08,640
today have um

00:23:05,360 --> 00:23:09,120
a lot more skills about you know things

00:23:08,640 --> 00:23:12,400
like

00:23:09,120 --> 00:23:14,240
dockerization or um managing web server

00:23:12,400 --> 00:23:16,400
configurations than they used to

00:23:14,240 --> 00:23:17,520
and so again is was there this let's

00:23:16,400 --> 00:23:20,799
meet in the middle

00:23:17,520 --> 00:23:23,200
skill up a little bit but also

00:23:20,799 --> 00:23:24,799
significantly reduce the amount of uh

00:23:23,200 --> 00:23:26,400
work that you have to do or the amount

00:23:24,799 --> 00:23:28,400
of pain you have to encounter

00:23:26,400 --> 00:23:29,760
when trying to deploy things to

00:23:28,400 --> 00:23:30,960
production or when trying to release

00:23:29,760 --> 00:23:33,679
things

00:23:30,960 --> 00:23:35,200
so obviously fool me once shame on you

00:23:33,679 --> 00:23:38,320
fool me twice shame on me

00:23:35,200 --> 00:23:39,760
as an industry we've gone uh

00:23:38,320 --> 00:23:41,360
past this and will never make the same

00:23:39,760 --> 00:23:44,080
mistake again

00:23:41,360 --> 00:23:44,960
or so i thought imagine my surprise when

00:23:44,080 --> 00:23:48,320
um

00:23:44,960 --> 00:23:49,360
just last year i was at a big data

00:23:48,320 --> 00:23:52,720
conference

00:23:49,360 --> 00:23:53,279
and i heard a lot of i guess industry

00:23:52,720 --> 00:23:55,200
leaders

00:23:53,279 --> 00:23:57,120
from very large tech companies talking

00:23:55,200 --> 00:24:00,159
about ml ops

00:23:57,120 --> 00:24:01,520
and the idea behind ml ops is of course

00:24:00,159 --> 00:24:03,120
well you have your data scientists but

00:24:01,520 --> 00:24:04,240
they don't know anything about deploying

00:24:03,120 --> 00:24:06,080
things into production

00:24:04,240 --> 00:24:08,320
so you need to have this other team to

00:24:06,080 --> 00:24:11,600
um to help them do that

00:24:08,320 --> 00:24:14,000
and you know uh we had

00:24:11,600 --> 00:24:14,880
our at take a metrics our own dalliance

00:24:14,000 --> 00:24:17,360
with this

00:24:14,880 --> 00:24:18,000
um and i just want to i guess uh recount

00:24:17,360 --> 00:24:20,880
how that

00:24:18,000 --> 00:24:22,559
went so we only ever tried it once with

00:24:20,880 --> 00:24:24,799
one model but we thought at the

00:24:22,559 --> 00:24:26,320
beginning of some quarter well

00:24:24,799 --> 00:24:27,840
maybe things will work a little bit

00:24:26,320 --> 00:24:30,640
better maybe things will go smoother

00:24:27,840 --> 00:24:32,320
if we sort of split the team up and have

00:24:30,640 --> 00:24:33,360
a research division and engineering

00:24:32,320 --> 00:24:36,320
division

00:24:33,360 --> 00:24:38,400
and the researchers can focus on the the

00:24:36,320 --> 00:24:40,240
you know real meat of the modeling

00:24:38,400 --> 00:24:42,240
and then they can hand the solution off

00:24:40,240 --> 00:24:43,760
to this sort of engineering team who

00:24:42,240 --> 00:24:46,400
will productionize it

00:24:43,760 --> 00:24:49,200
all right so we tried this how'd it go

00:24:46,400 --> 00:24:50,799
well the initial model was developed

00:24:49,200 --> 00:24:52,400
and unfortunately immediately there was

00:24:50,799 --> 00:24:54,000
a problem where um

00:24:52,400 --> 00:24:56,000
oh they were using a data set but

00:24:54,000 --> 00:24:59,120
actually that data is not available in

00:24:56,000 --> 00:25:00,320
production so you know there's a obvious

00:24:59,120 --> 00:25:01,679
problem there we have to account for

00:25:00,320 --> 00:25:04,320
that somehow

00:25:01,679 --> 00:25:06,240
okay went back to the researchers try

00:25:04,320 --> 00:25:08,880
this different approach instead

00:25:06,240 --> 00:25:10,640
i fixed the code um we tried running it

00:25:08,880 --> 00:25:13,120
we're encountering errors

00:25:10,640 --> 00:25:14,000
turns out wrong version of numpy right

00:25:13,120 --> 00:25:15,679
the researcher

00:25:14,000 --> 00:25:17,440
was using a particular version in their

00:25:15,679 --> 00:25:19,360
sort of notebook environment

00:25:17,440 --> 00:25:21,120
uh which wasn't the one we were using in

00:25:19,360 --> 00:25:24,320
production boxes

00:25:21,120 --> 00:25:25,520
okay okay okay so now it's pretty easy

00:25:24,320 --> 00:25:28,000
to correct

00:25:25,520 --> 00:25:29,120
it should be all set now ah well it

00:25:28,000 --> 00:25:30,799
turns out in the

00:25:29,120 --> 00:25:32,559
training center development set that was

00:25:30,799 --> 00:25:34,559
being used to create the model

00:25:32,559 --> 00:25:36,559
um this one column was entirely

00:25:34,559 --> 00:25:38,080
populated but in production it wasn't

00:25:36,559 --> 00:25:40,080
always the case

00:25:38,080 --> 00:25:41,360
okay so back to the drawing board try

00:25:40,080 --> 00:25:43,120
again blah blah

00:25:41,360 --> 00:25:44,799
well there were a bunch of sort of

00:25:43,120 --> 00:25:47,120
diagnostic graphs that

00:25:44,799 --> 00:25:48,000
really were uh going to help us figure

00:25:47,120 --> 00:25:49,760
out um

00:25:48,000 --> 00:25:52,080
why the model was performing the way it

00:25:49,760 --> 00:25:54,159
was or help us identify ahead of time

00:25:52,080 --> 00:25:55,200
issues with the model that might be uh

00:25:54,159 --> 00:25:57,279
arising

00:25:55,200 --> 00:25:59,120
and uh for whatever reason those graphs

00:25:57,279 --> 00:26:00,880
just weren't uh weren't displaying when

00:25:59,120 --> 00:26:03,440
running production

00:26:00,880 --> 00:26:04,400
okay so maybe we can omit that part and

00:26:03,440 --> 00:26:05,840
get rid of it

00:26:04,400 --> 00:26:08,159
and we'll just learn to live without

00:26:05,840 --> 00:26:10,080
those ah well it turns out that our

00:26:08,159 --> 00:26:13,279
hosting provider has a like particular

00:26:10,080 --> 00:26:15,520
timeout on the model and uh it wasn't uh

00:26:13,279 --> 00:26:17,120
it wasn't the processing was taking

00:26:15,520 --> 00:26:20,159
longer than the timeout

00:26:17,120 --> 00:26:21,200
and by this time and then i don't joke

00:26:20,159 --> 00:26:23,120
when i say this

00:26:21,200 --> 00:26:24,880
there was already a new version of the

00:26:23,120 --> 00:26:26,799
model the researcher developed

00:26:24,880 --> 00:26:28,720
and so this particular version never

00:26:26,799 --> 00:26:31,600
made its way into production

00:26:28,720 --> 00:26:33,600
and again i i want to emphasize that

00:26:31,600 --> 00:26:36,640
just like the punch card example

00:26:33,600 --> 00:26:39,039
each of these steps was um on the hour

00:26:36,640 --> 00:26:39,840
on the order of hours or or days right

00:26:39,039 --> 00:26:42,159
because

00:26:39,840 --> 00:26:43,520
um maybe the researcher gets told

00:26:42,159 --> 00:26:46,000
there's an issue with the uh

00:26:43,520 --> 00:26:47,200
the model but you know they just started

00:26:46,000 --> 00:26:49,039
working on something else so they have

00:26:47,200 --> 00:26:51,279
to revisit it a few days later

00:26:49,039 --> 00:26:53,120
etcetera etcetera etcetera and so this

00:26:51,279 --> 00:26:56,240
is just sort of like

00:26:53,120 --> 00:26:57,600
operating in this way uh at least in my

00:26:56,240 --> 00:27:01,039
experience is going to make you

00:26:57,600 --> 00:27:03,279
want to tear your hair out so

00:27:01,039 --> 00:27:05,039
it's simply not a viable way forward for

00:27:03,279 --> 00:27:08,240
us at take a metrics

00:27:05,039 --> 00:27:10,240
or um i think across the industry so

00:27:08,240 --> 00:27:12,480
what's the alternative well let me tell

00:27:10,240 --> 00:27:15,360
you about what it now looks like

00:27:12,480 --> 00:27:15,840
two years uh past this point um to

00:27:15,360 --> 00:27:20,399
develop

00:27:15,840 --> 00:27:21,200
a model um at our company so don't worry

00:27:20,399 --> 00:27:23,200
too much about

00:27:21,200 --> 00:27:24,480
reading through um all of this uh

00:27:23,200 --> 00:27:27,360
command line output

00:27:24,480 --> 00:27:29,039
but the basic idea is um you have a

00:27:27,360 --> 00:27:30,960
cookie cutter which is sort of like a

00:27:29,039 --> 00:27:33,120
template repo

00:27:30,960 --> 00:27:35,840
that template repo is using a framework

00:27:33,120 --> 00:27:38,480
that we've developed internally

00:27:35,840 --> 00:27:40,080
and basically when you uh start out

00:27:38,480 --> 00:27:41,919
you're asked a few questions about the

00:27:40,080 --> 00:27:43,200
model you're developing right so

00:27:41,919 --> 00:27:45,120
you know you're asked what your your

00:27:43,200 --> 00:27:46,880
github username is and

00:27:45,120 --> 00:27:48,399
what the name should be for the model

00:27:46,880 --> 00:27:49,520
and you can see that things start um

00:27:48,399 --> 00:27:50,799
pre-populating

00:27:49,520 --> 00:27:53,279
based off of the answers you've given

00:27:50,799 --> 00:27:54,720
before um you're asked you know how are

00:27:53,279 --> 00:27:56,799
you going to evaluate this model what's

00:27:54,720 --> 00:27:59,279
an appropriate validation metric

00:27:56,799 --> 00:28:00,480
um you're asked well for that validation

00:27:59,279 --> 00:28:02,640
metric is this something

00:28:00,480 --> 00:28:04,080
you want to maximize or minimize or

00:28:02,640 --> 00:28:06,559
under what circumstances

00:28:04,080 --> 00:28:07,760
should i be promoting this model in

00:28:06,559 --> 00:28:09,440
comparison to

00:28:07,760 --> 00:28:11,760
a model that lives on production let's

00:28:09,440 --> 00:28:14,080
say um how many

00:28:11,760 --> 00:28:15,760
cpus do you need for the model how much

00:28:14,080 --> 00:28:16,320
memory do you need during pre-processing

00:28:15,760 --> 00:28:19,200
training

00:28:16,320 --> 00:28:19,679
serving um what what's the appropriate

00:28:19,200 --> 00:28:22,480
um

00:28:19,679 --> 00:28:23,600
test set proportion what's the maximum

00:28:22,480 --> 00:28:26,559
run time of the model

00:28:23,600 --> 00:28:26,960
you answer these sort of pretty easy

00:28:26,559 --> 00:28:29,279
pretty

00:28:26,960 --> 00:28:30,159
baseline questions and what you get out

00:28:29,279 --> 00:28:33,520
of this

00:28:30,159 --> 00:28:34,880
is um you get basically your entire repo

00:28:33,520 --> 00:28:38,320
made for you right

00:28:34,880 --> 00:28:40,080
um you have a lot of um

00:28:38,320 --> 00:28:41,840
very useful things you wouldn't have to

00:28:40,080 --> 00:28:42,720
want to write over and over and over

00:28:41,840 --> 00:28:45,760
again like

00:28:42,720 --> 00:28:46,640
a good standardized python package

00:28:45,760 --> 00:28:49,120
structure

00:28:46,640 --> 00:28:50,399
you have your ci integration you have

00:28:49,120 --> 00:28:53,200
all these sorts of things

00:28:50,399 --> 00:28:53,760
and really of this generated code there

00:28:53,200 --> 00:28:56,480
are only

00:28:53,760 --> 00:28:57,120
four or so files that you need to

00:28:56,480 --> 00:29:00,240
actually

00:28:57,120 --> 00:29:02,320
edit to implement your model so

00:29:00,240 --> 00:29:04,240
what does the implementation then look

00:29:02,320 --> 00:29:06,640
like well

00:29:04,240 --> 00:29:08,399
if you think back to that initial i

00:29:06,640 --> 00:29:08,640
guess model life cycle that i showed you

00:29:08,399 --> 00:29:10,480
it

00:29:08,640 --> 00:29:12,880
more or less maps directly onto that

00:29:10,480 --> 00:29:14,000
right so you have to define some

00:29:12,880 --> 00:29:16,159
function that

00:29:14,000 --> 00:29:17,760
does your preprocessing which normally

00:29:16,159 --> 00:29:18,720
in our case looks like oh we're making

00:29:17,760 --> 00:29:20,320
some um

00:29:18,720 --> 00:29:21,919
sql queries we're taking that we're

00:29:20,320 --> 00:29:22,480
loading into a pandas data frame we're

00:29:21,919 --> 00:29:25,360
doing

00:29:22,480 --> 00:29:26,240
manipulations on that etcetera etcetera

00:29:25,360 --> 00:29:28,480
um

00:29:26,240 --> 00:29:29,919
you then have to say well the training

00:29:28,480 --> 00:29:31,919
set and validation said that they're

00:29:29,919 --> 00:29:34,960
produced by that pre-processing step

00:29:31,919 --> 00:29:37,760
how do i actually train the model using

00:29:34,960 --> 00:29:39,039
that data and um how do i extract out

00:29:37,760 --> 00:29:41,360
the parameters

00:29:39,039 --> 00:29:42,559
that i'm going to want to use when

00:29:41,360 --> 00:29:45,520
serving it right

00:29:42,559 --> 00:29:46,960
so this step runs you get out these sort

00:29:45,520 --> 00:29:50,399
of artifacts which are

00:29:46,960 --> 00:29:53,200
arbitrary binaries

00:29:50,399 --> 00:29:54,080
that you then are asked to describe how

00:29:53,200 --> 00:29:57,120
to load into

00:29:54,080 --> 00:29:59,520
a function or a callable

00:29:57,120 --> 00:30:01,600
that um can be invoked at serving time

00:29:59,520 --> 00:30:04,720
or on a per request basis

00:30:01,600 --> 00:30:08,000
so three steps obviously i'm

00:30:04,720 --> 00:30:09,840
glossing over a lot of the code here

00:30:08,000 --> 00:30:12,960
because it varies on a mold by model

00:30:09,840 --> 00:30:16,159
basis but the general gist is that

00:30:12,960 --> 00:30:17,679
all these three steps are things that as

00:30:16,159 --> 00:30:19,360
machine learning practitioners or data

00:30:17,679 --> 00:30:21,600
scientists you should feel

00:30:19,360 --> 00:30:23,679
fairly comfortable implementing you do

00:30:21,600 --> 00:30:25,440
have to specify a few more things so

00:30:23,679 --> 00:30:26,720
um there's a config file that's

00:30:25,440 --> 00:30:29,039
generated for you

00:30:26,720 --> 00:30:30,399
um most of the config file is

00:30:29,039 --> 00:30:32,720
pre-populated but

00:30:30,399 --> 00:30:33,440
we also use json schema just to define i

00:30:32,720 --> 00:30:36,720
guess the

00:30:33,440 --> 00:30:38,720
um the request and response schemas for

00:30:36,720 --> 00:30:40,399
the service all of our machine learning

00:30:38,720 --> 00:30:43,200
models are some of the services that

00:30:40,399 --> 00:30:43,919
can be invoked internally at the company

00:30:43,200 --> 00:30:46,399
um

00:30:43,919 --> 00:30:47,760
and this is actually beyond giving you

00:30:46,399 --> 00:30:48,880
some really nice properties like being

00:30:47,760 --> 00:30:50,880
able to ensure that

00:30:48,880 --> 00:30:52,240
your model conforms to these schemas and

00:30:50,880 --> 00:30:54,880
that requests

00:30:52,240 --> 00:30:56,720
always conform to these schemas that um

00:30:54,880 --> 00:30:58,960
it has some really nice properties like

00:30:56,720 --> 00:31:00,000
when you see a pr that is implementing

00:30:58,960 --> 00:31:01,840
these schemas

00:31:00,000 --> 00:31:03,840
we can have a discussion as a team about

00:31:01,840 --> 00:31:05,360
you know ah well is this actually how

00:31:03,840 --> 00:31:06,720
this model should be shaped uh do you

00:31:05,360 --> 00:31:08,159
not need this

00:31:06,720 --> 00:31:09,840
feature to be specified is there not

00:31:08,159 --> 00:31:12,080
this setting that we want to expose

00:31:09,840 --> 00:31:13,679
things like that so as a cultural

00:31:12,080 --> 00:31:15,440
practice this is very interesting

00:31:13,679 --> 00:31:17,039
but also it gives you a lot of nice

00:31:15,440 --> 00:31:20,480
benefits um

00:31:17,039 --> 00:31:22,640
as as uh both the developer and as um

00:31:20,480 --> 00:31:23,840
a putative integrator with this with the

00:31:22,640 --> 00:31:27,679
service

00:31:23,840 --> 00:31:30,000
um so i guess what sort of things are

00:31:27,679 --> 00:31:32,000
provided for you um out of all that

00:31:30,000 --> 00:31:34,320
generated code that i showed you

00:31:32,000 --> 00:31:35,200
well for one you get a test suite that's

00:31:34,320 --> 00:31:38,320
integrated in

00:31:35,200 --> 00:31:39,840
in ci that is testing things that are

00:31:38,320 --> 00:31:42,399
common across all of our models

00:31:39,840 --> 00:31:44,000
like does the pre-processing step output

00:31:42,399 --> 00:31:45,120
work with the training step does the

00:31:44,000 --> 00:31:46,880
training step output

00:31:45,120 --> 00:31:48,320
work with loading the model does the

00:31:46,880 --> 00:31:50,640
loaded model um

00:31:48,320 --> 00:31:52,799
conform to the schemas i just mentioned

00:31:50,640 --> 00:31:54,159
you get this sort of um standing lit

00:31:52,799 --> 00:31:57,440
standard linting suite

00:31:54,159 --> 00:32:00,880
your dockerization you get ci cd through

00:31:57,440 --> 00:32:02,000
circle um we use uh airflow to

00:32:00,880 --> 00:32:03,679
orchestrate that machine learning

00:32:02,000 --> 00:32:05,600
lifecycle you don't want to have to

00:32:03,679 --> 00:32:07,440
write the dag yourself so the dag is

00:32:05,600 --> 00:32:09,039
generated for you

00:32:07,440 --> 00:32:10,720
by virtue of that you get this training

00:32:09,039 --> 00:32:13,840
orchestration you get automated model

00:32:10,720 --> 00:32:16,080
evaluation and promotion you get gradual

00:32:13,840 --> 00:32:16,080
um

00:32:18,399 --> 00:32:22,080
you get automated rollback monitoring

00:32:20,159 --> 00:32:22,720
alerting diagnostics auto scaling schema

00:32:22,080 --> 00:32:24,000
validation

00:32:22,720 --> 00:32:26,080
data capture health checks cost

00:32:24,000 --> 00:32:28,399
monitoring and all this other stuff that

00:32:26,080 --> 00:32:30,640
as a data scientist you might not be

00:32:28,399 --> 00:32:33,760
good at you probably don't want to do

00:32:30,640 --> 00:32:35,279
and is ideally best handled in a uniform

00:32:33,760 --> 00:32:35,919
fashion that you don't have to think

00:32:35,279 --> 00:32:38,320
about

00:32:35,919 --> 00:32:40,720
you just really want to distill it your

00:32:38,320 --> 00:32:42,720
your job your role at the company

00:32:40,720 --> 00:32:44,399
down to the things that you're good at

00:32:42,720 --> 00:32:47,120
ideally

00:32:44,399 --> 00:32:47,440
so basically you get all all this stuff

00:32:47,120 --> 00:32:50,000
for

00:32:47,440 --> 00:32:51,840
free obviously all this didn't exist at

00:32:50,000 --> 00:32:54,080
the beginning of the project's inception

00:32:51,840 --> 00:32:55,039
but over time we've added more and more

00:32:54,080 --> 00:32:57,039
features to it

00:32:55,039 --> 00:32:58,559
incrementally little by little

00:32:57,039 --> 00:33:00,480
essentially basically anytime

00:32:58,559 --> 00:33:02,000
you have something you run into where

00:33:00,480 --> 00:33:03,519
you go i don't want to do this for every

00:33:02,000 --> 00:33:06,159
model going forward

00:33:03,519 --> 00:33:07,919
there you go just add to our framework

00:33:06,159 --> 00:33:11,120
so what is the stack that powers us

00:33:07,919 --> 00:33:13,760
actually look like well um this is the

00:33:11,120 --> 00:33:15,440
the general architecture again i'm not

00:33:13,760 --> 00:33:16,320
going to go into too much detail on this

00:33:15,440 --> 00:33:18,799
but essentially

00:33:16,320 --> 00:33:20,559
the the framework that we've built like

00:33:18,799 --> 00:33:22,240
i said it's all orchestrated by apache

00:33:20,559 --> 00:33:24,159
airflow

00:33:22,240 --> 00:33:26,720
we use snowflake as our sort of data

00:33:24,159 --> 00:33:28,880
lake and most of it is just sort of glue

00:33:26,720 --> 00:33:31,440
um between various services we happen to

00:33:28,880 --> 00:33:33,679
use primarily aws services but

00:33:31,440 --> 00:33:34,960
in principle there's no reason why that

00:33:33,679 --> 00:33:38,399
platform especially

00:33:34,960 --> 00:33:40,640
um should be should be favored um

00:33:38,399 --> 00:33:42,720
but essentially this is a diagram

00:33:40,640 --> 00:33:45,679
showing that exact same sort of

00:33:42,720 --> 00:33:46,240
life cycle that i uh talked about before

00:33:45,679 --> 00:33:48,480
right

00:33:46,240 --> 00:33:49,279
you have uh some data especially from

00:33:48,480 --> 00:33:52,159
snowflake

00:33:49,279 --> 00:33:53,760
you pre-process it the results of that

00:33:52,159 --> 00:33:56,159
are emitted to s3

00:33:53,760 --> 00:33:57,440
you take those files from f3 and you do

00:33:56,159 --> 00:33:59,200
training on them that

00:33:57,440 --> 00:34:00,559
emits some sort of model parameters or

00:33:59,200 --> 00:34:03,120
model artifact

00:34:00,559 --> 00:34:04,720
you then can evaluate the efficacy of

00:34:03,120 --> 00:34:07,200
that model artifact against

00:34:04,720 --> 00:34:08,480
whichever validation metric you've

00:34:07,200 --> 00:34:10,399
chosen

00:34:08,480 --> 00:34:12,079
and compare that against the current

00:34:10,399 --> 00:34:15,839
model that's in production

00:34:12,079 --> 00:34:18,320
um the evaluation there happens in ecs

00:34:15,839 --> 00:34:19,919
if um the promotion criterion says that

00:34:18,320 --> 00:34:21,599
based off of the comparison between

00:34:19,919 --> 00:34:22,879
production and your new model

00:34:21,599 --> 00:34:24,639
you should promote it then it gets

00:34:22,879 --> 00:34:26,800
promoted to an endpoint

00:34:24,639 --> 00:34:27,839
very simple stuff and again all this is

00:34:26,800 --> 00:34:30,240
sort of just

00:34:27,839 --> 00:34:31,839
taken care of for you in terms of what

00:34:30,240 --> 00:34:33,919
the rollout looks like

00:34:31,839 --> 00:34:35,280
this is again the same sort of very

00:34:33,919 --> 00:34:37,679
standard experience

00:34:35,280 --> 00:34:39,200
that you'd have if you were doing um

00:34:37,679 --> 00:34:42,000
software development that

00:34:39,200 --> 00:34:44,079
as a i guess data science practitioners

00:34:42,000 --> 00:34:44,720
we haven't necessarily matured into yet

00:34:44,079 --> 00:34:46,960
right

00:34:44,720 --> 00:34:48,000
but the general idea being that you have

00:34:46,960 --> 00:34:49,839
your two models

00:34:48,000 --> 00:34:52,159
you're monitoring error rates

00:34:49,839 --> 00:34:55,200
specifically four and five hundreds

00:34:52,159 --> 00:34:57,119
in h p and you just want to

00:34:55,200 --> 00:34:58,640
gradually start shifting traffic over

00:34:57,119 --> 00:35:01,440
from one mall to another

00:34:58,640 --> 00:35:03,359
so this is uh fsm but at every every

00:35:01,440 --> 00:35:05,200
step here you have one of three options

00:35:03,359 --> 00:35:06,400
you can either say well based off the

00:35:05,200 --> 00:35:08,480
comparison um

00:35:06,400 --> 00:35:10,960
it looks like the new model's you know

00:35:08,480 --> 00:35:12,880
uh statistically indistinguishable from

00:35:10,960 --> 00:35:14,880
the old model in terms of error rate

00:35:12,880 --> 00:35:16,000
or or better in which case you'd like to

00:35:14,880 --> 00:35:19,520
start shifting more traffic

00:35:16,000 --> 00:35:20,640
to it um or maybe it looks worse in case

00:35:19,520 --> 00:35:23,040
would you like to roll back

00:35:20,640 --> 00:35:23,680
just to the old production model variant

00:35:23,040 --> 00:35:26,079
um

00:35:23,680 --> 00:35:27,760
or uh maybe it's the case you know all

00:35:26,079 --> 00:35:30,160
of our services have a uniform

00:35:27,760 --> 00:35:32,079
traffic that's amortized over the entire

00:35:30,160 --> 00:35:34,800
day some have sort of spiky

00:35:32,079 --> 00:35:35,680
access patterns or and that can change

00:35:34,800 --> 00:35:37,359
depending on

00:35:35,680 --> 00:35:39,440
what services integrate with them over

00:35:37,359 --> 00:35:41,040
time so it might be the case that you

00:35:39,440 --> 00:35:41,599
actually don't have enough observations

00:35:41,040 --> 00:35:42,880
to

00:35:41,599 --> 00:35:44,480
determine whether it's safe to continue

00:35:42,880 --> 00:35:46,000
to promote and so you can just sort of

00:35:44,480 --> 00:35:48,240
defer and wait for

00:35:46,000 --> 00:35:49,359
um wait for more data to come in

00:35:48,240 --> 00:35:51,839
basically

00:35:49,359 --> 00:35:52,480
and um i should say that all these steps

00:35:51,839 --> 00:35:55,119
when they

00:35:52,480 --> 00:35:56,480
are run they're emitting things to slack

00:35:55,119 --> 00:35:58,720
channel that we've set up

00:35:56,480 --> 00:36:00,000
so that we can monitor this and in the

00:35:58,720 --> 00:36:02,320
case of a rollback

00:36:00,000 --> 00:36:03,760
um someone is alerted so that we can

00:36:02,320 --> 00:36:05,040
investigate and figure out what the

00:36:03,760 --> 00:36:07,520
problem was

00:36:05,040 --> 00:36:08,640
um like i said this is all orchestrated

00:36:07,520 --> 00:36:10,640
through airflow

00:36:08,640 --> 00:36:12,079
if you're familiar with airflow writing

00:36:10,640 --> 00:36:15,359
the dags can be

00:36:12,079 --> 00:36:17,520
sort of a drag right

00:36:15,359 --> 00:36:18,800
so if you look at this diagram there's

00:36:17,520 --> 00:36:21,839
about i know 50

00:36:18,800 --> 00:36:23,599
60 nodes here this ends up being 1500

00:36:21,839 --> 00:36:26,240
lines of airflow

00:36:23,599 --> 00:36:27,680
dag declaration code which you don't

00:36:26,240 --> 00:36:30,000
have to write right that

00:36:27,680 --> 00:36:31,599
is provided for you by virtue of our dag

00:36:30,000 --> 00:36:33,040
generation

00:36:31,599 --> 00:36:35,040
this is the stack we're using or some of

00:36:33,040 --> 00:36:37,359
the technologies we're using

00:36:35,040 --> 00:36:39,200
this really isn't anything apart from

00:36:37,359 --> 00:36:40,480
bog standard again the the key thing

00:36:39,200 --> 00:36:42,720
that we've done is just sort of

00:36:40,480 --> 00:36:43,599
glue these various components together

00:36:42,720 --> 00:36:45,200
and and

00:36:43,599 --> 00:36:47,119
again any time that we've run something

00:36:45,200 --> 00:36:48,640
where we go that's going to be painful

00:36:47,119 --> 00:36:52,079
later on down the line

00:36:48,640 --> 00:36:54,240
well um we we embrace it

00:36:52,079 --> 00:36:55,200
and we try and add it as a feature to

00:36:54,240 --> 00:36:59,040
our existing uh

00:36:55,200 --> 00:37:01,599
platform so now i want to go over um

00:36:59,040 --> 00:37:02,320
some of the key i guess um principles

00:37:01,599 --> 00:37:04,800
and and

00:37:02,320 --> 00:37:05,760
things we've learned over the past two

00:37:04,800 --> 00:37:09,119
years right

00:37:05,760 --> 00:37:10,800
so one is um you know probably three

00:37:09,119 --> 00:37:11,599
months into developing this this is what

00:37:10,800 --> 00:37:13,359
we

00:37:11,599 --> 00:37:15,680
are the state of the platform look like

00:37:13,359 --> 00:37:18,000
right so in slack you'd see

00:37:15,680 --> 00:37:19,440
stuff like oh this model's been created

00:37:18,000 --> 00:37:22,960
we're running the validation

00:37:19,440 --> 00:37:23,359
here are the results and um now the onus

00:37:22,960 --> 00:37:26,480
was

00:37:23,359 --> 00:37:28,240
uh on the developer to um

00:37:26,480 --> 00:37:30,079
look at those results and say okay yes

00:37:28,240 --> 00:37:31,599
this looks good let's pronounce to the

00:37:30,079 --> 00:37:35,200
end point right

00:37:31,599 --> 00:37:37,359
and so um the

00:37:35,200 --> 00:37:39,040
issue there is we started talking about

00:37:37,359 --> 00:37:40,720
like okay operationally

00:37:39,040 --> 00:37:42,720
logistically or you know sort of

00:37:40,720 --> 00:37:44,079
culturally as a team

00:37:42,720 --> 00:37:45,440
who's going to be on the line for

00:37:44,079 --> 00:37:46,160
pressing that button who's going to be

00:37:45,440 --> 00:37:47,440
on the line for

00:37:46,160 --> 00:37:49,280
making sure that when it's promoted that

00:37:47,440 --> 00:37:50,000
it's working well who's going to be

00:37:49,280 --> 00:37:51,920
looking at these

00:37:50,000 --> 00:37:53,680
metrics and and and making sure that

00:37:51,920 --> 00:37:57,680
there aren't alerts going off

00:37:53,680 --> 00:38:00,079
and we talked about that as a team

00:37:57,680 --> 00:38:02,079
uh transpires maybe unsurprisingly that

00:38:00,079 --> 00:38:03,440
no one was really gung-ho about taking

00:38:02,079 --> 00:38:07,040
on that responsibility

00:38:03,440 --> 00:38:09,200
and so um again especially since we were

00:38:07,040 --> 00:38:10,560
uh planning on scaling this to many many

00:38:09,200 --> 00:38:12,320
models we thought

00:38:10,560 --> 00:38:14,160
this is unsustainable this is going to

00:38:12,320 --> 00:38:16,160
be painful for us

00:38:14,160 --> 00:38:17,520
let's just have the framework take care

00:38:16,160 --> 00:38:18,720
of this for us so

00:38:17,520 --> 00:38:19,920
it was a little bit of effort to

00:38:18,720 --> 00:38:21,599
implement this sort of automated

00:38:19,920 --> 00:38:23,520
promotion and rollout but

00:38:21,599 --> 00:38:24,960
um at the end of the day it's paid huge

00:38:23,520 --> 00:38:27,760
dividends

00:38:24,960 --> 00:38:29,680
um also you know i don't know if you've

00:38:27,760 --> 00:38:32,079
ever used aws before

00:38:29,680 --> 00:38:34,000
but these are some of the instances you

00:38:32,079 --> 00:38:36,079
choose you can choose from and they say

00:38:34,000 --> 00:38:38,160
how much memory and how much cpu they

00:38:36,079 --> 00:38:38,640
have this is the full list and actually

00:38:38,160 --> 00:38:40,960
i've

00:38:38,640 --> 00:38:42,880
cut off a little tail end of it this all

00:38:40,960 --> 00:38:44,320
lives on one web page and a completely

00:38:42,880 --> 00:38:45,200
different web page tells you what the

00:38:44,320 --> 00:38:46,720
prices are

00:38:45,200 --> 00:38:48,480
so if you're trying to figure out which

00:38:46,720 --> 00:38:49,839
instance size is going to match the

00:38:48,480 --> 00:38:52,960
needs of my model

00:38:49,839 --> 00:38:56,320
and also be cheap very painful process

00:38:52,960 --> 00:38:57,359
don't do that instead we have

00:38:56,320 --> 00:38:59,760
implemented uh

00:38:57,359 --> 00:39:01,599
basically a little tool that you just

00:38:59,760 --> 00:39:02,400
define what your memory and cpu

00:39:01,599 --> 00:39:04,240
requirements are

00:39:02,400 --> 00:39:05,599
and it finds the cheapest instance size

00:39:04,240 --> 00:39:07,280
for you so

00:39:05,599 --> 00:39:08,960
what i guess i mean to say here is that

00:39:07,280 --> 00:39:10,880
this um

00:39:08,960 --> 00:39:12,480
this notion of identifying painful parts

00:39:10,880 --> 00:39:14,000
of the development cycle

00:39:12,480 --> 00:39:15,839
isn't just for these really big

00:39:14,000 --> 00:39:17,920
architectural concepts but also

00:39:15,839 --> 00:39:19,280
um needs to pervade into these sort of

00:39:17,920 --> 00:39:22,320
smaller um

00:39:19,280 --> 00:39:25,280
rocks in the shoe if you will and then

00:39:22,320 --> 00:39:27,119
about air flow specifically um i just

00:39:25,280 --> 00:39:29,520
wanted to highlight you know

00:39:27,119 --> 00:39:31,040
we we started out hosting our own stack

00:39:29,520 --> 00:39:32,560
using cloud formation

00:39:31,040 --> 00:39:34,720
and we ran into these same sort of

00:39:32,560 --> 00:39:35,359
operational issues where hey we didn't

00:39:34,720 --> 00:39:37,119
know

00:39:35,359 --> 00:39:39,280
uh how many workers provision or all

00:39:37,119 --> 00:39:40,480
this sort of stuff we end up just having

00:39:39,280 --> 00:39:41,839
someone host it for us

00:39:40,480 --> 00:39:44,240
so don't be precious about the things

00:39:41,839 --> 00:39:47,440
you've built if something is really not

00:39:44,240 --> 00:39:49,280
within your wheelhouse give it away

00:39:47,440 --> 00:39:51,119
there are also issues with deployment

00:39:49,280 --> 00:39:54,160
interruptions and

00:39:51,119 --> 00:39:55,599
sort of these issues with

00:39:54,160 --> 00:39:58,400
different contributed operators not

00:39:55,599 --> 00:40:01,040
always being exactly what you want so

00:39:58,400 --> 00:40:02,320
um i guess just do do your due diligence

00:40:01,040 --> 00:40:03,920
if you're going to use airflow

00:40:02,320 --> 00:40:05,920
and make sure that things will integrate

00:40:03,920 --> 00:40:08,000
the way you're expecting but the bottom

00:40:05,920 --> 00:40:10,000
line here essentially is um

00:40:08,000 --> 00:40:11,920
if you want to achieve the same sort of

00:40:10,000 --> 00:40:14,720
thing that we have where

00:40:11,920 --> 00:40:15,920
you minimize the painfulness um you have

00:40:14,720 --> 00:40:16,640
to start solving the things that are

00:40:15,920 --> 00:40:19,359
painful

00:40:16,640 --> 00:40:19,760
and um as a team dedicate yourselves to

00:40:19,359 --> 00:40:21,680
um

00:40:19,760 --> 00:40:23,200
making the developer experience in

00:40:21,680 --> 00:40:26,000
ergonomics as

00:40:23,200 --> 00:40:27,359
simple and enjoyable as possible and

00:40:26,000 --> 00:40:30,079
that's all i wanted to leave you with so

00:40:27,359 --> 00:40:30,079
thank you very much

00:40:35,280 --> 00:40:38,960
thank you very much chase very

00:40:37,280 --> 00:40:42,880
interesting talk

00:40:38,960 --> 00:40:45,839
um the questions are coming in the

00:40:42,880 --> 00:40:46,400
burning question everyone is asking

00:40:45,839 --> 00:40:50,560
probably

00:40:46,400 --> 00:40:50,560
is your pyson logo in the background

00:40:51,119 --> 00:40:54,240
so this is actually uh from a local

00:40:53,760 --> 00:40:58,200
artist

00:40:54,240 --> 00:41:00,319
in in massachusetts but if you go to um

00:40:58,200 --> 00:41:01,839
bluefrogcollective.com um those are

00:41:00,319 --> 00:41:05,040
those are the people that um

00:41:01,839 --> 00:41:08,240
i had uh commissioned this for me so um

00:41:05,040 --> 00:41:08,240
they uh they did a great job

00:41:09,440 --> 00:41:14,640
so one comment is awesome talk it's not

00:41:11,920 --> 00:41:14,640
really a question

00:41:14,960 --> 00:41:21,839
and um yeah let me answer that

00:41:18,960 --> 00:41:22,480
according to architecture most ml is

00:41:21,839 --> 00:41:25,839
happening

00:41:22,480 --> 00:41:27,119
on amazon cloud where did you deploy

00:41:25,839 --> 00:41:29,040
airflow

00:41:27,119 --> 00:41:31,040
yeah so um like i alluded to we

00:41:29,040 --> 00:41:32,000
initially were also deploying uh airflow

00:41:31,040 --> 00:41:34,720
on aws through

00:41:32,000 --> 00:41:36,800
um through cloud and the hosted service

00:41:34,720 --> 00:41:38,880
we're using is astronomer.io

00:41:36,800 --> 00:41:40,480
they've been really great so far and

00:41:38,880 --> 00:41:42,160
it's really reassuring to have

00:41:40,480 --> 00:41:44,079
um a support team that you can sort of

00:41:42,160 --> 00:41:45,440
call up and ask questions for when you

00:41:44,079 --> 00:41:49,280
run into sort of these

00:41:45,440 --> 00:41:52,319
painful operational issues

00:41:49,280 --> 00:41:53,040
and then the next question um it's a

00:41:52,319 --> 00:41:56,400
little bit

00:41:53,040 --> 00:41:59,520
cryptic but i think the question is is

00:41:56,400 --> 00:42:01,920
cookie cutter better than ml ops

00:41:59,520 --> 00:42:03,440
well i guess it's not better but it

00:42:01,920 --> 00:42:05,040
helps you avoid having to have a

00:42:03,440 --> 00:42:08,319
dedicated anal ops team right

00:42:05,040 --> 00:42:09,839
the idea behind all of this is basically

00:42:08,319 --> 00:42:11,599
anything that you run into where it's

00:42:09,839 --> 00:42:13,119
painful or you think oh my

00:42:11,599 --> 00:42:14,640
oh my goodness i don't want to deal with

00:42:13,119 --> 00:42:16,240
this when i'm developing my models this

00:42:14,640 --> 00:42:18,480
is not what i'm interested in

00:42:16,240 --> 00:42:20,079
bite the bullet do it have some sort of

00:42:18,480 --> 00:42:21,440
set of libraries or tools that you can

00:42:20,079 --> 00:42:22,800
just contribute that to

00:42:21,440 --> 00:42:24,800
and then you've solved that problem in

00:42:22,800 --> 00:42:27,680
perpetuity for your entire team

00:42:24,800 --> 00:42:29,599
so it's not about this is better or

00:42:27,680 --> 00:42:30,560
worth in ml ops it's about just making

00:42:29,599 --> 00:42:33,040
the

00:42:30,560 --> 00:42:35,280
productionization process as painless as

00:42:33,040 --> 00:42:38,319
possible

00:42:35,280 --> 00:42:44,400
okay thank you very much again

00:42:38,319 --> 00:42:44,400

YouTube URL: https://www.youtube.com/watch?v=8Zn4hV9xE1I


