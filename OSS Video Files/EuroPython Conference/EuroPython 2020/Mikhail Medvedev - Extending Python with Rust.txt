Title: Mikhail Medvedev - Extending Python with Rust
Publication date: 2020-09-15
Playlist: EuroPython 2020
Description: 
	"Extending Python with Rust
EuroPython 2020 - Talk - 2020-07-23 - Microsoft
Online

By Mikhail Medvedev

Rust is a rising star of the programming language world. I'd like to discuss it from a Python developer perspective. Obviously, Rust is not a replacement for Python, but in case you're seeking better performance it may be a good idea to build an extension. This is safer and arguably easier to do in Rust than in C.
In this talk we will take a look at existing crates that provide interface to Python and see how easy it is to use them.
Then we go through the demo and see it in action.
Run some benchmarks against pure Python and also Cython.
Write a Dockerfile to build it all together.
Discuss CI/CD for mixed Rust/Python projects.



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2020.europython.eu/events/speaker-release-agreement/

    "
Captions: 
	00:00:07,919 --> 00:00:11,200
do you

00:00:08,639 --> 00:00:12,799
hear me well and see my screen that's

00:00:11,200 --> 00:00:16,640
perfect

00:00:12,799 --> 00:00:19,840
so uh hi everyone i'm mihayo

00:00:16,640 --> 00:00:23,840
and my talk is about

00:00:19,840 --> 00:00:27,920
how to extend python using rust

00:00:23,840 --> 00:00:31,039
first i'm gonna go through reasoning

00:00:27,920 --> 00:00:34,079
for such a thing um then

00:00:31,039 --> 00:00:37,360
why rust is such a great choice for this

00:00:34,079 --> 00:00:40,239
task then we'll go through

00:00:37,360 --> 00:00:40,640
some libraries that provide bindings

00:00:40,239 --> 00:00:44,160
from

00:00:40,640 --> 00:00:48,079
rust to python then we'll switch to

00:00:44,160 --> 00:00:53,039
the demo and build a dynamic library

00:00:48,079 --> 00:00:53,039
that we then can load into python

00:00:53,280 --> 00:01:00,000
then we'll build and run a simple

00:00:56,800 --> 00:01:00,960
web service example that uses post rust

00:01:00,000 --> 00:01:05,600
and python

00:01:00,960 --> 00:01:09,119
code and we will build and run it using

00:01:05,600 --> 00:01:12,799
docker and finally we will

00:01:09,119 --> 00:01:16,000
compile and

00:01:12,799 --> 00:01:20,640
build a pip package

00:01:16,000 --> 00:01:20,640
that contains both python and rust code

00:01:21,600 --> 00:01:29,439
so what would you even want to

00:01:25,600 --> 00:01:31,520
extend python first of all most obvious

00:01:29,439 --> 00:01:33,360
probably a reason would be speeds

00:01:31,520 --> 00:01:36,479
because python is great

00:01:33,360 --> 00:01:39,600
but it's

00:01:36,479 --> 00:01:42,640
easy to use but that comes at a cost

00:01:39,600 --> 00:01:46,799
the dynamic nature of python means

00:01:42,640 --> 00:01:50,720
it's it runs on the very high level and

00:01:46,799 --> 00:01:53,840
it's very slow at some things

00:01:50,720 --> 00:01:57,200
so you possibly might speed up to be

00:01:53,840 --> 00:02:01,119
speed it up with an extension then

00:01:57,200 --> 00:02:03,280
reusability uh why would you want to

00:02:01,119 --> 00:02:05,439
you don't have to necessarily port the

00:02:03,280 --> 00:02:06,960
whole code to python if your main code

00:02:05,439 --> 00:02:10,000
base and python

00:02:06,960 --> 00:02:13,040
you can just use

00:02:10,000 --> 00:02:13,840
some code written in another language

00:02:13,040 --> 00:02:16,879
from python

00:02:13,840 --> 00:02:17,840
for example large parts of numpy or

00:02:16,879 --> 00:02:21,360
scipy

00:02:17,840 --> 00:02:24,400
still written in fortran and if you

00:02:21,360 --> 00:02:25,040
when you install these uh packages you

00:02:24,400 --> 00:02:28,400
will see

00:02:25,040 --> 00:02:30,959
how fourth one isn't compiled

00:02:28,400 --> 00:02:32,239
um the next reason would be a

00:02:30,959 --> 00:02:35,599
cooperation

00:02:32,239 --> 00:02:38,720
for example when in your company

00:02:35,599 --> 00:02:40,160
one team might work uh in rust and

00:02:38,720 --> 00:02:42,959
another in python

00:02:40,160 --> 00:02:44,239
and uh would be nice to find a way for

00:02:42,959 --> 00:02:48,560
them to use

00:02:44,239 --> 00:02:51,120
code each other each other's code

00:02:48,560 --> 00:02:51,680
another reason might be a migration uh

00:02:51,120 --> 00:02:54,879
suppose

00:02:51,680 --> 00:02:58,720
for some tragic reason you want to

00:02:54,879 --> 00:03:02,640
rewrite your whole project from python

00:02:58,720 --> 00:03:07,040
into say rust then you don't have to

00:03:02,640 --> 00:03:09,760
do that all at once you might do it uh

00:03:07,040 --> 00:03:11,120
module module and then import what's

00:03:09,760 --> 00:03:14,159
already ported

00:03:11,120 --> 00:03:16,560
into what's uh what's you still haven't

00:03:14,159 --> 00:03:16,560
written

00:03:17,040 --> 00:03:20,879
so how you might approach this uh first

00:03:20,640 --> 00:03:22,959
and

00:03:20,879 --> 00:03:24,000
the classic way would be to write an

00:03:22,959 --> 00:03:27,280
extension c

00:03:24,000 --> 00:03:32,319
or c postpass it's a python provides a

00:03:27,280 --> 00:03:34,560
great beginnings for that uh

00:03:32,319 --> 00:03:37,280
the thing is that uh writing something

00:03:34,560 --> 00:03:41,599
in c or c plus plus it's uh

00:03:37,280 --> 00:03:44,640
cumbersome let's say that and um

00:03:41,599 --> 00:03:47,360
not exactly safe in terms of

00:03:44,640 --> 00:03:49,360
memory management so another way would

00:03:47,360 --> 00:03:52,879
be to apply some

00:03:49,360 --> 00:03:56,239
uh python improvers i would

00:03:52,879 --> 00:03:59,840
say um like a site on that

00:03:56,239 --> 00:04:00,799
recompiles your python code in c somehow

00:03:59,840 --> 00:04:04,239
or

00:04:00,799 --> 00:04:07,200
uh the newer library called

00:04:04,239 --> 00:04:09,360
number that jit compiles your python

00:04:07,200 --> 00:04:09,360
that

00:04:10,000 --> 00:04:13,680
if your only goal is speed it's a it's a

00:04:12,640 --> 00:04:16,799
it's a nice

00:04:13,680 --> 00:04:19,919
way of uh doing things but i would be

00:04:16,799 --> 00:04:21,120
wary of doing that on large projects

00:04:19,919 --> 00:04:25,919
because it's uh

00:04:21,120 --> 00:04:28,960
use control of how your code is run

00:04:25,919 --> 00:04:32,320
because these libraries perform some

00:04:28,960 --> 00:04:35,680
magic on your code

00:04:32,320 --> 00:04:38,000
um why rust rust

00:04:35,680 --> 00:04:38,960
well i have to say i'm not an expert in

00:04:38,000 --> 00:04:42,160
rust i'm

00:04:38,960 --> 00:04:47,280
i've been using i've been using it

00:04:42,160 --> 00:04:50,560
as uh my hobby language for some time

00:04:47,280 --> 00:04:54,000
and uh i think it's absolutely great uh

00:04:50,560 --> 00:04:58,960
it's a systems um language uh

00:04:54,000 --> 00:05:02,720
compiled and uh fairly low level but

00:04:58,960 --> 00:05:05,919
it uses um

00:05:02,720 --> 00:05:11,120
a very innovative system of

00:05:05,919 --> 00:05:11,120
borrowing basically

00:05:11,360 --> 00:05:17,440
it controls the memory management

00:05:14,400 --> 00:05:20,960
at compile time so if you uh

00:05:17,440 --> 00:05:24,160
don't properly manage the

00:05:20,960 --> 00:05:27,759
memory it just will refuse to

00:05:24,160 --> 00:05:30,400
compile your code and russ is

00:05:27,759 --> 00:05:30,400
rust is

00:05:31,280 --> 00:05:36,720
maintained by mozilla and it is voted as

00:05:34,720 --> 00:05:40,720
a one of the most loved

00:05:36,720 --> 00:05:43,199
languages by developers and

00:05:40,720 --> 00:05:44,639
recently it gets a lot of attention from

00:05:43,199 --> 00:05:48,080
companies to

00:05:44,639 --> 00:05:48,479
notably microsoft and what is important

00:05:48,080 --> 00:05:51,840
for

00:05:48,479 --> 00:05:55,360
in our case it that

00:05:51,840 --> 00:05:55,680
is that rust has a very minimal run time

00:05:55,360 --> 00:05:58,080
so

00:05:55,680 --> 00:05:59,680
no garbage collector no anything like

00:05:58,080 --> 00:06:03,520
that that will run

00:05:59,680 --> 00:06:07,280
in parallel to your code uh if you vote

00:06:03,520 --> 00:06:10,560
your compiled code

00:06:07,280 --> 00:06:11,280
extension code into python you will not

00:06:10,560 --> 00:06:14,080
have

00:06:11,280 --> 00:06:15,520
anything else rather than your code

00:06:14,080 --> 00:06:18,560
running

00:06:15,520 --> 00:06:21,680
inside the python interpreters this

00:06:18,560 --> 00:06:24,720
which will be not true for uh

00:06:21,680 --> 00:06:28,000
garbage collector garbage collected

00:06:24,720 --> 00:06:30,800
languages but um

00:06:28,000 --> 00:06:32,240
i wouldn't as i said i'm not a rust

00:06:30,800 --> 00:06:34,319
expert i wouldn't

00:06:32,240 --> 00:06:36,560
write the whole project in the rust

00:06:34,319 --> 00:06:40,319
because it's um

00:06:36,560 --> 00:06:45,520
it's uh it python has its

00:06:40,319 --> 00:06:45,520
uh advantages as a uh

00:06:45,840 --> 00:06:50,720
as a in terms of development development

00:06:48,800 --> 00:06:53,759
speed

00:06:50,720 --> 00:06:56,639
uh most of all

00:06:53,759 --> 00:06:57,440
so it would be nice to maybe write some

00:06:56,639 --> 00:07:00,880
uh

00:06:57,440 --> 00:07:04,560
critical code in rust and just

00:07:00,880 --> 00:07:05,280
vote in into python and some common code

00:07:04,560 --> 00:07:08,160
like uh

00:07:05,280 --> 00:07:09,280
pep service or cli you can write in

00:07:08,160 --> 00:07:12,720
python

00:07:09,280 --> 00:07:15,840
it's not um maybe um

00:07:12,720 --> 00:07:19,199
performance critical or

00:07:15,840 --> 00:07:23,520
safety critical so

00:07:19,199 --> 00:07:27,120
um how would we do that um there's a few

00:07:23,520 --> 00:07:29,360
there's a type of rust libraries that

00:07:27,120 --> 00:07:32,319
allow you to build a python extension

00:07:29,360 --> 00:07:35,199
for first of all it's a rust c python

00:07:32,319 --> 00:07:36,240
uh we're gonna use it in the examples uh

00:07:35,199 --> 00:07:40,240
during this talk

00:07:36,240 --> 00:07:44,560
um and then pio3

00:07:40,240 --> 00:07:47,360
which is a fork as the previous one um

00:07:44,560 --> 00:07:48,720
it the the reason i used rusty python

00:07:47,360 --> 00:07:52,560
because that's because

00:07:48,720 --> 00:07:55,280
um pyro3 works only on nightly rust and

00:07:52,560 --> 00:07:56,000
rusty python works on you know works on

00:07:55,280 --> 00:07:58,879
stable us

00:07:56,000 --> 00:07:59,280
as well i actually i have seen that pile

00:07:58,879 --> 00:08:02,800
00:07:59,280 --> 00:08:05,440
recently migrated to stable rust

00:08:02,800 --> 00:08:06,160
i mean it can be run on stable rust as

00:08:05,440 --> 00:08:09,360
well but

00:08:06,160 --> 00:08:11,919
i just didn't have time to check

00:08:09,360 --> 00:08:12,400
um they both libraries are very similar

00:08:11,919 --> 00:08:15,599
because

00:08:12,400 --> 00:08:18,879
one is the fork of another obviously

00:08:15,599 --> 00:08:23,759
um they also

00:08:18,879 --> 00:08:26,879
give you ability to run

00:08:23,759 --> 00:08:27,919
python scripts from russ but it's it's

00:08:26,879 --> 00:08:31,280
uh

00:08:27,919 --> 00:08:34,159
really out of scope for this stock um

00:08:31,280 --> 00:08:34,800
we're gonna use i'm not gonna go through

00:08:34,159 --> 00:08:40,000
uh

00:08:34,800 --> 00:08:41,839
setting up rust and syntax and so on

00:08:40,000 --> 00:08:43,279
there's plenty information online i

00:08:41,839 --> 00:08:46,640
would recommend reading

00:08:43,279 --> 00:08:50,320
rust book or and cargobook

00:08:46,640 --> 00:08:54,000
um the rust is pretty

00:08:50,320 --> 00:08:56,240
nicely documented um i just say

00:08:54,000 --> 00:08:59,120
i would just say that uh we're gonna use

00:08:56,240 --> 00:09:02,880
cargo that is um

00:08:59,120 --> 00:09:07,040
package manager and uh general cli for

00:09:02,880 --> 00:09:10,800
um rust

00:09:07,040 --> 00:09:14,399
um okay so let's

00:09:10,800 --> 00:09:18,959
switch to uh demo

00:09:14,399 --> 00:09:18,959
now um

00:09:19,120 --> 00:09:27,600
hope you see my dev environment well

00:09:24,000 --> 00:09:30,800
so let's look at

00:09:27,600 --> 00:09:33,600
our rust project i created a very small

00:09:30,800 --> 00:09:34,800
very simple example rust project and

00:09:33,600 --> 00:09:39,200
it's basically it

00:09:34,800 --> 00:09:39,200
consists of if we disregard the

00:09:40,880 --> 00:09:44,880
files like git ignore and stuff it

00:09:43,360 --> 00:09:48,839
consists only on

00:09:44,880 --> 00:09:52,399
of two files the first is

00:09:48,839 --> 00:09:55,519
lib.rc which contains our um

00:09:52,399 --> 00:09:58,880
rust code and

00:09:55,519 --> 00:10:02,160
another is cargo tomo which is a

00:09:58,880 --> 00:10:05,440
metal data fail sorry

00:10:02,160 --> 00:10:08,800
meta data file so

00:10:05,440 --> 00:10:12,000
uh lib.s um

00:10:08,800 --> 00:10:15,760
contains the ros code so here's all our

00:10:12,000 --> 00:10:19,360
whole rust code first one

00:10:15,760 --> 00:10:19,680
again i'm not gonna uh go into details

00:10:19,360 --> 00:10:23,040
on

00:10:19,680 --> 00:10:24,240
rust syntax it's well if you worked with

00:10:23,040 --> 00:10:28,320
the

00:10:24,240 --> 00:10:31,120
um c style languages before it's pretty

00:10:28,320 --> 00:10:32,240
uh obvious what's what's that what and

00:10:31,120 --> 00:10:34,800
it's also some

00:10:32,240 --> 00:10:37,519
somehow recent resembles uh python in

00:10:34,800 --> 00:10:40,720
some ways uh for example the

00:10:37,519 --> 00:10:43,920
typing syntax

00:10:40,720 --> 00:10:44,640
so uh the first line says that we will

00:10:43,920 --> 00:10:48,320
gonna use

00:10:44,640 --> 00:10:50,800
um see python create create as a package

00:10:48,320 --> 00:10:52,720
is a raster for package we're going to

00:10:50,800 --> 00:10:55,120
import these

00:10:52,720 --> 00:10:55,120
things

00:10:56,160 --> 00:11:02,480
then we run the

00:10:59,200 --> 00:11:05,920
pi module uh initializer macros

00:11:02,480 --> 00:11:09,040
that creates a

00:11:05,920 --> 00:11:13,680
python extension router for us

00:11:09,040 --> 00:11:17,120
we create a dock attributes with some

00:11:13,680 --> 00:11:18,160
helpers think here for python to see and

00:11:17,120 --> 00:11:21,519
we export

00:11:18,160 --> 00:11:25,120
a get result function that python will

00:11:21,519 --> 00:11:28,560
be able to use then we

00:11:25,120 --> 00:11:31,839
have our actual function it will

00:11:28,560 --> 00:11:33,360
return it it accepts a string and then

00:11:31,839 --> 00:11:37,120
returns

00:11:33,360 --> 00:11:40,480
the same string back to the color

00:11:37,120 --> 00:11:44,560
prepended by last says that's

00:11:40,480 --> 00:11:48,000
all it does so um

00:11:44,560 --> 00:11:52,160
it uh returns actually a pi result uh

00:11:48,000 --> 00:11:55,839
which is a wrapper for um

00:11:52,160 --> 00:11:56,399
rust types that kind of converts them

00:11:55,839 --> 00:11:59,680
into

00:11:56,399 --> 00:12:03,040
uh python types that so that is

00:11:59,680 --> 00:12:06,959
transparent for python

00:12:03,040 --> 00:12:10,320
so that's all here and then cargo tomo

00:12:06,959 --> 00:12:13,200
set up some metadata like name of the

00:12:10,320 --> 00:12:16,480
library my credentials

00:12:13,200 --> 00:12:20,800
name of the create and

00:12:16,480 --> 00:12:20,800
this is important it says that

00:12:21,519 --> 00:12:27,200
the resulting library will be a

00:12:24,720 --> 00:12:28,320
dynamic library that it's not statically

00:12:27,200 --> 00:12:32,320
linked by

00:12:28,320 --> 00:12:36,079
but uh dynamically loaded into uh

00:12:32,320 --> 00:12:40,480
runtime it so it will be a

00:12:36,079 --> 00:12:44,959
dot dll file on windows or

00:12:40,480 --> 00:12:48,639
dylip here on mac or

00:12:44,959 --> 00:12:48,639
dot so file on

00:12:49,279 --> 00:12:53,920
linux uh for some reason python only

00:12:53,279 --> 00:12:57,480
well

00:12:53,920 --> 00:12:58,720
so okay so for some reason python only

00:12:57,480 --> 00:13:01,760
understands

00:12:58,720 --> 00:13:04,160
uh a dot so files so we're gonna rename

00:13:01,760 --> 00:13:08,160
the file

00:13:04,160 --> 00:13:12,399
so uh let's build the

00:13:08,160 --> 00:13:12,399
the rust project it's a

00:13:13,360 --> 00:13:16,720
cd to the rust library and everything

00:13:16,000 --> 00:13:19,930
that we

00:13:16,720 --> 00:13:21,200
need to do is to run cargo build and we

00:13:19,930 --> 00:13:22,800
[Music]

00:13:21,200 --> 00:13:25,600
indicate that we will build for the

00:13:22,800 --> 00:13:28,880
release so no debug information

00:13:25,600 --> 00:13:31,680
and basically it's it's done uh

00:13:28,880 --> 00:13:32,639
so here in the target directory you can

00:13:31,680 --> 00:13:36,480
see

00:13:32,639 --> 00:13:36,480
it built our

00:13:36,560 --> 00:13:41,760
uh our binary it's a dynamic library

00:13:40,320 --> 00:13:45,360
that you can use

00:13:41,760 --> 00:13:45,760
already it is a python extension already

00:13:45,360 --> 00:13:48,880
so

00:13:45,760 --> 00:13:52,480
as i said we can't

00:13:48,880 --> 00:13:55,600
use it right now so we're gonna

00:13:52,480 --> 00:13:58,079
we're gonna uh copy

00:13:55,600 --> 00:13:58,880
on the top level and rename it as a

00:13:58,079 --> 00:14:02,320
miley dot

00:13:58,880 --> 00:14:04,639
so so

00:14:02,320 --> 00:14:04,639
now

00:14:06,880 --> 00:14:17,480
now it is very simple we run the python

00:14:11,839 --> 00:14:19,440
python 3 interpreter and we can just

00:14:17,480 --> 00:14:22,160
import

00:14:19,440 --> 00:14:22,560
my lip here and it imports you can see

00:14:22,160 --> 00:14:26,000
that

00:14:22,560 --> 00:14:29,440
help my lip will

00:14:26,000 --> 00:14:31,600
show our health stink and

00:14:29,440 --> 00:14:33,199
that's the function get result is

00:14:31,600 --> 00:14:38,399
available here

00:14:33,199 --> 00:14:38,399
so then we can run

00:14:38,720 --> 00:14:45,120
my leave get result

00:14:41,920 --> 00:14:48,320
hey um

00:14:45,120 --> 00:14:51,040
no it's a typo

00:14:48,320 --> 00:14:51,440
so yeah so we just run the last code

00:14:51,040 --> 00:14:53,839
from

00:14:51,440 --> 00:14:53,839
python

00:14:55,120 --> 00:15:02,079
now now we're gonna remove that

00:14:58,800 --> 00:15:05,519
file it's not needed anymore so

00:15:02,079 --> 00:15:08,959
um this is nice but how we

00:15:05,519 --> 00:15:13,360
uh let's look at a more

00:15:08,959 --> 00:15:16,880
real world example so here in the web

00:15:13,360 --> 00:15:19,680
in the web folder i created a small web

00:15:16,880 --> 00:15:21,040
project i use flask and i import the

00:15:19,680 --> 00:15:24,839
same

00:15:21,040 --> 00:15:27,600
library here and it when you call the

00:15:24,839 --> 00:15:30,560
main

00:15:27,600 --> 00:15:30,880
end point it will just return the result

00:15:30,560 --> 00:15:34,399
of

00:15:30,880 --> 00:15:39,120
my lip get result hello

00:15:34,399 --> 00:15:42,399
um so how can we

00:15:39,120 --> 00:15:45,880
run it from here so let's use

00:15:42,399 --> 00:15:47,120
a docker we're going to use a

00:15:45,880 --> 00:15:50,399
multi-stage

00:15:47,120 --> 00:15:54,160
build technique so because

00:15:50,399 --> 00:15:57,440
when we gonna run python

00:15:54,160 --> 00:16:00,800
um environment to run our

00:15:57,440 --> 00:16:04,240
web web

00:16:00,800 --> 00:16:07,839
service we not do we don't want to have

00:16:04,240 --> 00:16:10,399
rust uh and all the rust machinery

00:16:07,839 --> 00:16:11,600
in our tokyo container there so we're

00:16:10,399 --> 00:16:15,600
gonna

00:16:11,600 --> 00:16:18,800
we're gonna use the

00:16:15,600 --> 00:16:21,839
first stage from

00:16:18,800 --> 00:16:25,120
we pulled the rust

00:16:21,839 --> 00:16:26,560
docker image and we give the stage a

00:16:25,120 --> 00:16:30,399
name rust build

00:16:26,560 --> 00:16:33,680
so then we just copy our two files

00:16:30,399 --> 00:16:37,040
and then we set up the

00:16:33,680 --> 00:16:39,040
target the thing is that

00:16:37,040 --> 00:16:40,160
previously i run it and i run the

00:16:39,040 --> 00:16:43,759
example on my

00:16:40,160 --> 00:16:46,959
macbook so i use the mac

00:16:43,759 --> 00:16:50,240
os compatible binary but

00:16:46,959 --> 00:16:53,519
the last the python 3.7 slim

00:16:50,240 --> 00:16:56,560
image is a linux environment that is a

00:16:53,519 --> 00:16:58,079
debian i think so we're going to build

00:16:56,560 --> 00:17:01,440
for linux now

00:16:58,079 --> 00:17:04,880
so it's it's very easy for with cargo

00:17:01,440 --> 00:17:07,360
you just set the target and you will

00:17:04,880 --> 00:17:07,360
have the

00:17:08,480 --> 00:17:15,039
right binary on as an output so

00:17:11,839 --> 00:17:18,720
then we go to this next

00:17:15,039 --> 00:17:21,199
uh final stage of our builds we copy our

00:17:18,720 --> 00:17:21,199
python

00:17:21,760 --> 00:17:25,039
file then we we copy the requirements

00:17:24,400 --> 00:17:29,520
file

00:17:25,039 --> 00:17:32,640
and then from the previous stage we copy

00:17:29,520 --> 00:17:36,960
the library

00:17:32,640 --> 00:17:37,600
uh built uh is the same way as i did uh

00:17:36,960 --> 00:17:41,600
locally

00:17:37,600 --> 00:17:43,919
uh it will the it will be done in uh

00:17:41,600 --> 00:17:45,520
docker environment but uh this time it's

00:17:43,919 --> 00:17:48,640
called dot so

00:17:45,520 --> 00:17:52,400
it's it's built on linux

00:17:48,640 --> 00:17:54,799
but in the end it's the same by leap.so

00:17:52,400 --> 00:17:56,400
so then we install the libraries and run

00:17:54,799 --> 00:18:00,000
the service with the

00:17:56,400 --> 00:18:03,360
with the unicorn to

00:18:00,000 --> 00:18:08,400
have it uh production

00:18:03,360 --> 00:18:12,080
uh in a production manner

00:18:08,400 --> 00:18:12,080
so we're gonna just build it

00:18:12,320 --> 00:18:15,840
like this

00:18:18,000 --> 00:18:22,400
it uses a lot of caches uh and it's fine

00:18:20,400 --> 00:18:25,840
because we don't have much time

00:18:22,400 --> 00:18:30,640
um it copies the library and

00:18:25,840 --> 00:18:30,640
so now we can run this

00:18:33,360 --> 00:18:38,160
we can run this image and we're going to

00:18:36,720 --> 00:18:43,840
expose the

00:18:38,160 --> 00:18:43,840
port 8000 for tests

00:18:45,679 --> 00:18:52,559
right so let's uh see

00:18:48,960 --> 00:18:55,600
how it goes and it works

00:18:52,559 --> 00:18:57,760
it's uh so the rust says part comes from

00:18:55,600 --> 00:18:58,720
the last library and hello comes from

00:18:57,760 --> 00:19:02,000
the python

00:18:58,720 --> 00:19:05,440
part of the

00:19:02,000 --> 00:19:09,679
code let's

00:19:05,440 --> 00:19:12,799
cue it now right

00:19:09,679 --> 00:19:16,080
so you can build it as

00:19:12,799 --> 00:19:20,240
you can build it like that but um

00:19:16,080 --> 00:19:23,280
the thing is that um

00:19:20,240 --> 00:19:24,240
imagine uh you work in a company and you

00:19:23,280 --> 00:19:27,679
work on

00:19:24,240 --> 00:19:28,720
primarily in python and there is this

00:19:27,679 --> 00:19:32,400
project contains

00:19:28,720 --> 00:19:36,840
rust code as well and you have to

00:19:32,400 --> 00:19:40,080
maintain all this rust building

00:19:36,840 --> 00:19:43,600
part so probably you don't want to

00:19:40,080 --> 00:19:47,520
do this every time you want to do pip

00:19:43,600 --> 00:19:50,480
install my lip and

00:19:47,520 --> 00:19:51,760
have it uh installed on your machine so

00:19:50,480 --> 00:19:55,200
you don't have to

00:19:51,760 --> 00:19:59,200
even think about cargo

00:19:55,200 --> 00:20:01,840
and stuff from the rust world

00:19:59,200 --> 00:20:03,600
this can be achieved with the python

00:20:01,840 --> 00:20:06,720
packages

00:20:03,600 --> 00:20:10,240
so here in the package directory i have

00:20:06,720 --> 00:20:11,440
the same same vibe some last coat is

00:20:10,240 --> 00:20:14,480
exactly the same

00:20:11,440 --> 00:20:18,280
kargatomo as against the same

00:20:14,480 --> 00:20:21,120
the only thing that i added

00:20:18,280 --> 00:20:24,960
a few files here

00:20:21,120 --> 00:20:28,000
for a pic package machinery

00:20:24,960 --> 00:20:32,559
um and

00:20:28,000 --> 00:20:36,640
the main file is setup.pi

00:20:32,559 --> 00:20:40,080
which will build the python

00:20:36,640 --> 00:20:42,000
package um for us

00:20:40,080 --> 00:20:44,400
um we're gonna use the library called

00:20:42,000 --> 00:20:47,440
setup tools rust

00:20:44,400 --> 00:20:51,120
that provides a binding class

00:20:47,440 --> 00:20:52,480
and rust extension class so apart from

00:20:51,120 --> 00:20:56,799
the

00:20:52,480 --> 00:21:00,320
from packaging the python code it will

00:20:56,799 --> 00:21:03,840
build the rust extension

00:21:00,320 --> 00:21:04,799
for us and we'll use the binding rusty

00:21:03,840 --> 00:21:07,840
python

00:21:04,799 --> 00:21:10,640
um which we use but it

00:21:07,840 --> 00:21:12,240
can be set as pio3 as well and we want

00:21:10,640 --> 00:21:15,440
to use pyro3

00:21:12,240 --> 00:21:20,400
so it will build and include the rust

00:21:15,440 --> 00:21:20,400
binary for us in the package

00:21:20,880 --> 00:21:28,840
so for this we

00:21:23,919 --> 00:21:31,840
gonna let's create a virtual environment

00:21:28,840 --> 00:21:31,840
first

00:21:33,360 --> 00:21:35,600
now

00:21:40,799 --> 00:21:45,840
come on

00:21:48,960 --> 00:21:56,080
right okay so we can

00:21:52,880 --> 00:21:59,760
activate the environment and now

00:21:56,080 --> 00:22:00,960
we can just go to the package directory

00:21:59,760 --> 00:22:07,280
and run

00:22:00,960 --> 00:22:07,280
pip in pip install

00:22:07,360 --> 00:22:13,840
dot and we will

00:22:24,840 --> 00:22:27,840
see

00:22:30,720 --> 00:22:34,560
we will see so it's building

00:22:34,159 --> 00:22:37,619
the

00:22:34,560 --> 00:22:37,619
[Music]

00:22:39,360 --> 00:22:42,400
it's building uh the package called

00:22:41,520 --> 00:22:45,520
miley rust

00:22:42,400 --> 00:22:48,240
and it's it's built the wheel

00:22:45,520 --> 00:22:48,240
for uh

00:22:48,559 --> 00:22:55,600
us the wheel is uh

00:22:52,080 --> 00:22:58,799
it's a format w h l extension

00:22:55,600 --> 00:23:02,320
it's basically an archive with the

00:22:58,799 --> 00:23:06,080
binary and python code

00:23:02,320 --> 00:23:09,679
together for

00:23:06,080 --> 00:23:13,600
python 3.7 because it's my

00:23:09,679 --> 00:23:17,320
current version of python and for mac os

00:23:13,600 --> 00:23:20,490
because i'm running it on my

00:23:17,320 --> 00:23:20,490
[Music]

00:23:21,360 --> 00:23:28,159
macbook so this what it just

00:23:25,039 --> 00:23:31,360
did it built the

00:23:28,159 --> 00:23:31,360
package uh from

00:23:31,440 --> 00:23:37,919
from sources

00:23:34,559 --> 00:23:41,520
that means you gonna have to have a rust

00:23:37,919 --> 00:23:51,840
on your machine but at least you can

00:23:41,520 --> 00:23:51,840
import my deep

00:24:02,799 --> 00:24:09,039
something that wrong um

00:24:05,919 --> 00:24:09,360
ah yeah i i know what it is i just need

00:24:09,039 --> 00:24:12,640
to

00:24:09,360 --> 00:24:15,039
go up and then

00:24:12,640 --> 00:24:15,039
it will

00:24:16,799 --> 00:24:21,200
import imported from the environment

00:24:19,120 --> 00:24:24,880
yeah

00:24:21,200 --> 00:24:24,880
so my link

00:24:30,840 --> 00:24:37,279
without

00:24:33,760 --> 00:24:42,080
all right but the point is that

00:24:37,279 --> 00:24:46,159
it's it builds the

00:24:42,080 --> 00:24:48,960
thing from

00:24:46,159 --> 00:24:50,960
from sources uh which is uh which

00:24:48,960 --> 00:24:55,120
provides a lot of complications as well

00:24:50,960 --> 00:24:59,760
um uh what we can do

00:24:55,120 --> 00:25:02,080
now we can pre-build the wheels

00:24:59,760 --> 00:25:02,080
um

00:25:02,799 --> 00:25:07,039
and upload them to some uh to pipeline

00:25:06,080 --> 00:25:10,480
repository

00:25:07,039 --> 00:25:13,919
and then when you uh run creep

00:25:10,480 --> 00:25:17,440
install my leave

00:25:13,919 --> 00:25:20,480
rust it will uh download it will

00:25:17,440 --> 00:25:22,799
automatically select the wheel um

00:25:20,480 --> 00:25:24,480
supported by your environment and your

00:25:22,799 --> 00:25:28,240
uh python version and they'll

00:25:24,480 --> 00:25:30,799
download it for you so you don't

00:25:28,240 --> 00:25:32,320
have to have rust installed on your

00:25:30,799 --> 00:25:36,080
machine

00:25:32,320 --> 00:25:38,720
it's the same way same way as it

00:25:36,080 --> 00:25:38,720
works for

00:25:40,559 --> 00:25:49,200
c extensions so i'm i don't have time to

00:25:44,720 --> 00:25:52,880
really do that now but i will just show

00:25:49,200 --> 00:25:56,400
um so i can build uh

00:25:52,880 --> 00:25:59,600
things for mac os using the setup

00:25:56,400 --> 00:26:02,720
dot pi bill this will

00:25:59,600 --> 00:26:06,080
it will build

00:26:02,720 --> 00:26:10,000
yes this will build the wheel

00:26:06,080 --> 00:26:13,440
for me like this it's a

00:26:10,000 --> 00:26:17,120
will for my from my macos

00:26:13,440 --> 00:26:21,600
but uh suppose i'm want to do

00:26:17,120 --> 00:26:25,840
that for my uh little web service

00:26:21,600 --> 00:26:25,840
so now i can use

00:26:26,799 --> 00:26:30,320
a different way i can just build it

00:26:29,200 --> 00:26:33,760
upload

00:26:30,320 --> 00:26:36,799
somewhere and i can remove the first

00:26:33,760 --> 00:26:39,919
rust build stage and

00:26:36,799 --> 00:26:43,039
install it from requirements

00:26:39,919 --> 00:26:45,840
txt where i have

00:26:43,039 --> 00:26:45,840
just

00:26:46,720 --> 00:26:53,919
i have just this

00:26:50,880 --> 00:26:54,559
so uh in order to achieve that i will

00:26:53,919 --> 00:26:58,159
need to

00:26:54,559 --> 00:27:01,600
pre-build the

00:26:58,159 --> 00:27:04,159
wheels for linux um

00:27:01,600 --> 00:27:04,880
and upload it to somewhere somewhere

00:27:04,159 --> 00:27:10,240
would be

00:27:04,880 --> 00:27:10,240
the test pipe

00:27:11,840 --> 00:27:15,440
website in my case it's a

00:27:15,679 --> 00:27:21,840
playground for python package developers

00:27:22,000 --> 00:27:27,039
that you can use they they clean it up

00:27:24,640 --> 00:27:29,600
for once in a while but

00:27:27,039 --> 00:27:30,399
you can upload packages there and test

00:27:29,600 --> 00:27:34,960
it before

00:27:30,399 --> 00:27:37,279
polluting the actual global repository

00:27:34,960 --> 00:27:40,720
or in your company you might have

00:27:37,279 --> 00:27:43,520
uh your own mirror or your own

00:27:40,720 --> 00:27:45,200
private pip repository where you can

00:27:43,520 --> 00:27:49,679
store your packages

00:27:45,200 --> 00:27:51,919
so i created the miley blast here

00:27:49,679 --> 00:27:51,919
and

00:27:52,880 --> 00:27:59,840
uploaded the wheels for that

00:27:56,480 --> 00:28:03,279
library it's a macos here and

00:27:59,840 --> 00:28:06,320
linux here so

00:28:03,279 --> 00:28:06,960
i don't really have time for that so to

00:28:06,320 --> 00:28:12,240
upload it

00:28:06,960 --> 00:28:12,240
you can use the tool called twine and

00:28:13,200 --> 00:28:20,480
you can to build for linux on mac os

00:28:17,360 --> 00:28:24,000
you can use a docker image called

00:28:20,480 --> 00:28:27,679
many linux the the

00:28:24,000 --> 00:28:30,720
tricky part with linux is that

00:28:27,679 --> 00:28:34,320
there is lots of repositories and

00:28:30,720 --> 00:28:39,360
they differ from one another

00:28:34,320 --> 00:28:42,960
and the many linux projects claims that

00:28:39,360 --> 00:28:45,520
it won't maybe cover all the

00:28:42,960 --> 00:28:46,559
linux repositories but it it covers

00:28:45,520 --> 00:28:50,640
enough to

00:28:46,559 --> 00:28:54,399
to call themselves mainly linux

00:28:50,640 --> 00:28:57,520
so to build for linux

00:28:54,399 --> 00:29:01,200
i'm gonna pull that many linux

00:28:57,520 --> 00:29:04,720
image and run my build inside the

00:29:01,200 --> 00:29:08,559
docker container and i'm gonna

00:29:04,720 --> 00:29:10,320
run this i'm not gonna run it but i i

00:29:08,559 --> 00:29:13,360
would normally run this

00:29:10,320 --> 00:29:13,919
build wheels script which what it does

00:29:13,360 --> 00:29:17,120
it

00:29:13,919 --> 00:29:20,399
installs uh rust and

00:29:17,120 --> 00:29:23,440
cargo and then it goes through

00:29:20,399 --> 00:29:26,480
all the python versions

00:29:23,440 --> 00:29:29,039
present and built

00:29:26,480 --> 00:29:29,919
wills with the same command we would use

00:29:29,039 --> 00:29:35,200
locally it

00:29:29,919 --> 00:29:37,840
just uh builds the wills for this uh

00:29:35,200 --> 00:29:39,919
hi mikhail apologies for interrupting

00:29:37,840 --> 00:29:41,120
you in between your talk it was growing

00:29:39,919 --> 00:29:44,480
nicely but we have

00:29:41,120 --> 00:29:46,640
grown much much ahead of the time

00:29:44,480 --> 00:29:48,559
yeah there are two three questions uh

00:29:46,640 --> 00:29:49,679
that people have raised so maybe we can

00:29:48,559 --> 00:29:52,080
focus on them

00:29:49,679 --> 00:29:54,080
uh and then you can take the questions

00:29:52,080 --> 00:29:57,440
in the breakout channel

00:29:54,080 --> 00:29:59,919
yeah i'm gonna post a link to my to

00:29:57,440 --> 00:30:01,120
my github repo with all the code uh

00:29:59,919 --> 00:30:05,360
there and

00:30:01,120 --> 00:30:07,919
we and also uh

00:30:05,360 --> 00:30:09,200
everything will be in the discord

00:30:07,919 --> 00:30:13,039
breakout channel

00:30:09,200 --> 00:30:14,880
um right so sorry for the for uh

00:30:13,039 --> 00:30:16,799
apologies for that it was really going

00:30:14,880 --> 00:30:18,320
great but we are short of time uh we

00:30:16,799 --> 00:30:21,360
have three questions here

00:30:18,320 --> 00:30:24,640
uh one is by matthew he is asking

00:30:21,360 --> 00:30:27,760
that the flow uh with which uh fortran

00:30:24,640 --> 00:30:28,799
uh gets uh python gets extended with

00:30:27,760 --> 00:30:31,600
fortran using

00:30:28,799 --> 00:30:32,720
f2 pi is slightly different from what

00:30:31,600 --> 00:30:35,279
you showed for rust

00:30:32,720 --> 00:30:37,840
so is it because of setup tools first

00:30:35,279 --> 00:30:37,840
library

00:30:38,159 --> 00:30:40,720
well uh

00:30:41,200 --> 00:30:45,039
probably yes because we used sedator's

00:30:44,080 --> 00:30:48,320
rust for us

00:30:45,039 --> 00:30:52,159
and there is something specific for

00:30:48,320 --> 00:30:52,880
um for fortran built by numpy developers

00:30:52,159 --> 00:30:56,320
i

00:30:52,880 --> 00:30:59,360
i can i can post a link in the

00:30:56,320 --> 00:31:03,440
discord channel i i have a link for the

00:30:59,360 --> 00:31:06,559
tool they use for voltron okay

00:31:03,440 --> 00:31:09,519
right and radhu is actually

00:31:06,559 --> 00:31:10,080
asking of quoting some examples where

00:31:09,519 --> 00:31:13,600
you would

00:31:10,080 --> 00:31:17,440
actually write a specific python module

00:31:13,600 --> 00:31:20,640
in form of rust so

00:31:17,440 --> 00:31:23,200
uh kind of rewriting the specific

00:31:20,640 --> 00:31:26,480
module the python module in rust what

00:31:23,200 --> 00:31:26,480
can be the use case for it

00:31:26,559 --> 00:31:33,279
um the use case for example

00:31:29,760 --> 00:31:36,399
you have a well

00:31:33,279 --> 00:31:39,519
you can just uh want to speed up

00:31:36,399 --> 00:31:40,240
your python code then you can rewrite it

00:31:39,519 --> 00:31:44,840
in

00:31:40,240 --> 00:31:49,039
rust and more low low level language

00:31:44,840 --> 00:31:52,640
or sometimes if the code is

00:31:49,039 --> 00:31:54,640
critical and you you uh

00:31:52,640 --> 00:31:56,159
won't have more control over it the

00:31:54,640 --> 00:31:58,559
statically typed language would be

00:31:56,159 --> 00:32:00,480
better than titan

00:31:58,559 --> 00:32:01,919
it doesn't mean you have to rewrite

00:32:00,480 --> 00:32:05,440
everything in

00:32:01,919 --> 00:32:06,960
the systems language right thanks a lot

00:32:05,440 --> 00:32:08,720
for answering these questions

00:32:06,960 --> 00:32:10,559
uh i think we are running really short

00:32:08,720 --> 00:32:14,080
of time so i have to

00:32:10,559 --> 00:32:16,720
uh on both the next speakers uh yeah

00:32:14,080 --> 00:32:18,159
so thanks a lot mikhail for such an

00:32:16,720 --> 00:32:20,960
interesting talk

00:32:18,159 --> 00:32:24,000
uh people can further ask you questions

00:32:20,960 --> 00:32:26,480
in the breakout channel

00:32:24,000 --> 00:32:28,960
i'll post the link to same uh in the

00:32:26,480 --> 00:32:32,760
microsoft track

00:32:28,960 --> 00:32:35,760
yeah thank you for attending interesting

00:32:32,760 --> 00:32:35,760

YouTube URL: https://www.youtube.com/watch?v=hqFjJP5L-mk


