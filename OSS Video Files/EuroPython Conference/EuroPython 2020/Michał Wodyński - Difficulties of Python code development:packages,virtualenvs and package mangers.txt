Title: Michał Wodyński - Difficulties of Python code development:packages,virtualenvs and package mangers
Publication date: 2020-09-21
Playlist: EuroPython 2020
Description: 
	"Difficulties of Python code development:packages,virtualenvs and package mangers
EuroPython 2020 - Talk - 2020-07-23 - Ni
Online

By Michał Wodyński

In this presentation I will show different packages that are used in Python. I will point out differences and explain the prons and cons of using them during code development. 
    After that we will jump to the topic of virtualenvs and  popular tools that are used for managing them. I will explain what is purpose of the virtualenvs in Python and why we should use them.
    Finally we will focus on the most important topic without which development is not possible – package mangers. Package managers it is wide topic in Python world. There is many package mangers and  currently we have tools like pip, pipenv or poetry but it is not obvious which of them we should use in first place. Which of them are recommended to use? What are prons and cons of certain package mangers? Is there any other not well known packages mangers? How package mangers are packaging Python code? Which of the package mangers are good for data scientists? Is your package manger is resolving dependencies? 
    This questions can appear especially when you are beginner and just to want start working with Python. Unfortunately form the beginning you must face the problem which of the package manger you should use. In this presentation I will answer all of this questions. I will list popular package mangers and some not known. I will show differences and which of them are best for which case. Also I will explain differences between packages that are used by different packages mangers. If you are interested in code development and package mangers or you are just confused which of them you should use this presentation is definitely for you. During this presentation I will answer all questions and I will wipe out all doubts about packages, package mangers and virtualenvs.



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2020.europython.eu/events/speaker-release-agreement/

    "
Captions: 
	00:00:06,720 --> 00:00:11,519
all right okay

00:00:08,160 --> 00:00:15,519
and what are you going to talk about uh

00:00:11,519 --> 00:00:18,800
today i will be talking about

00:00:15,519 --> 00:00:24,080
difficulties that we can face

00:00:18,800 --> 00:00:27,279
during development of python code

00:00:24,080 --> 00:00:31,840
i will share my screen all right so

00:00:27,279 --> 00:00:31,840
give a big hand to me how

00:00:33,360 --> 00:00:39,760
go for it okay so

00:00:37,760 --> 00:00:41,200
before i start maybe a few words about

00:00:39,760 --> 00:00:43,920
me

00:00:41,200 --> 00:00:46,160
i have eight years experience in python

00:00:43,920 --> 00:00:49,520
five years commercial experience in

00:00:46,160 --> 00:00:53,520
developing python code and

00:00:49,520 --> 00:00:56,800
today i will share my knowledge

00:00:53,520 --> 00:01:01,280
and best practices and best tools that

00:00:56,800 --> 00:01:05,280
i'm using during uh project development

00:01:01,280 --> 00:01:08,640
uh my presentation will be divided

00:01:05,280 --> 00:01:12,159
uh in three main sections

00:01:08,640 --> 00:01:16,880
uh each of them will be covered with a

00:01:12,159 --> 00:01:16,880
small story and

00:01:17,280 --> 00:01:20,799
first of all we'll start with the

00:01:18,720 --> 00:01:24,320
packages

00:01:20,799 --> 00:01:26,400
that are available in python world

00:01:24,320 --> 00:01:27,520
we'll have a little bit about history of

00:01:26,400 --> 00:01:30,880
python and

00:01:27,520 --> 00:01:32,000
confusions uh related to that then we

00:01:30,880 --> 00:01:35,040
will switch

00:01:32,000 --> 00:01:38,320
to the virtual and ants

00:01:35,040 --> 00:01:42,159
um we will tell

00:01:38,320 --> 00:01:45,759
what are what are for and

00:01:42,159 --> 00:01:49,680
uh some great tools that

00:01:45,759 --> 00:01:52,240
uh are allowing uh developing

00:01:49,680 --> 00:01:53,200
uh our python code in virtual and ends

00:01:52,240 --> 00:01:56,560
and then

00:01:53,200 --> 00:02:00,159
we finally focus on package managers

00:01:56,560 --> 00:02:04,640
and we will

00:02:00,159 --> 00:02:04,640
try to clarify our all

00:02:06,159 --> 00:02:12,000
what are which are the best and what

00:02:09,679 --> 00:02:14,400
are the advantages and disadvantages of

00:02:12,000 --> 00:02:19,440
certain package managers

00:02:14,400 --> 00:02:22,160
but before that uh we have to say that

00:02:19,440 --> 00:02:23,280
the python world packages virtual

00:02:22,160 --> 00:02:28,160
enhance and

00:02:23,280 --> 00:02:28,160
package managers is looking like this

00:02:30,720 --> 00:02:37,599
because of the history we have

00:02:34,000 --> 00:02:38,720
some old documentation that is pointing

00:02:37,599 --> 00:02:41,599
for

00:02:38,720 --> 00:02:41,920
packages that are not used the same

00:02:41,599 --> 00:02:47,760
thing

00:02:41,920 --> 00:02:47,760
is for package managers

00:02:48,840 --> 00:02:53,440
which

00:02:50,319 --> 00:02:55,840
which we which is not obvious which of

00:02:53,440 --> 00:03:01,040
them we should use

00:02:55,840 --> 00:03:04,480
and uh today i will try to clarify

00:03:01,040 --> 00:03:06,800
uh what is the right path

00:03:04,480 --> 00:03:09,680
and i hope that this picture will be

00:03:06,800 --> 00:03:09,680
much simpler

00:03:10,000 --> 00:03:15,440
so in the beginning we'll start with the

00:03:13,200 --> 00:03:19,120
story related to aws

00:03:15,440 --> 00:03:23,280
recently i have a few projects

00:03:19,120 --> 00:03:26,480
related to the uh

00:03:23,280 --> 00:03:27,760
that are that were stored on aws and

00:03:26,480 --> 00:03:32,159
mainly i was working with

00:03:27,760 --> 00:03:36,000
lambda evos lambda functions

00:03:32,159 --> 00:03:39,120
and before we start our work we

00:03:36,000 --> 00:03:41,519
i was choosing a big

00:03:39,120 --> 00:03:42,239
out of many tools how to deploy the

00:03:41,519 --> 00:03:44,720
lambda

00:03:42,239 --> 00:03:46,080
we could use terraform serverless

00:03:44,720 --> 00:03:48,720
serverless framework

00:03:46,080 --> 00:03:49,840
button3 cloud formation and many many

00:03:48,720 --> 00:03:53,460
many other tools

00:03:49,840 --> 00:03:54,879
finally we decided for terraform and

00:03:53,460 --> 00:03:56,660
[Music]

00:03:54,879 --> 00:03:58,000
to use lambda

00:03:56,660 --> 00:04:01,360
[Music]

00:03:58,000 --> 00:04:04,720
the deployment of lambda is looking like

00:04:01,360 --> 00:04:08,159
this we have to prepare the zip file

00:04:04,720 --> 00:04:10,560
with our python code and

00:04:08,159 --> 00:04:11,360
we also have to add the libraries that

00:04:10,560 --> 00:04:14,159
we are

00:04:11,360 --> 00:04:14,879
required for example to communication

00:04:14,159 --> 00:04:17,919
with data

00:04:14,879 --> 00:04:21,680
the database like school alchemy because

00:04:17,919 --> 00:04:26,400
uh lam lam avos lambda

00:04:21,680 --> 00:04:29,199
itself contains only base libraries

00:04:26,400 --> 00:04:31,040
of python and during development we

00:04:29,199 --> 00:04:34,000
noticed that

00:04:31,040 --> 00:04:37,040
we have a problem that terraform is

00:04:34,000 --> 00:04:40,000
constantly building our

00:04:37,040 --> 00:04:40,400
our code on lambdas and the reason of

00:04:40,000 --> 00:04:43,840
that

00:04:40,400 --> 00:04:43,840
is was

00:04:44,000 --> 00:04:51,199
using different wheels because we

00:04:48,800 --> 00:04:53,120
in the beginning we was doing this by

00:04:51,199 --> 00:04:57,120
hand and each developer

00:04:53,120 --> 00:05:00,320
was using different platform

00:04:57,120 --> 00:05:03,360
and what this will i will tell

00:05:00,320 --> 00:05:08,160
in within a few slides

00:05:03,360 --> 00:05:11,440
uh and also i tell how we fix that issue

00:05:08,160 --> 00:05:16,240
but let's uh start

00:05:11,440 --> 00:05:16,240
from the beginning we have

00:05:18,000 --> 00:05:25,600
we have python files

00:05:21,039 --> 00:05:28,479
and we can share them between community

00:05:25,600 --> 00:05:29,759
for example in bottle web framework it

00:05:28,479 --> 00:05:32,800
is possible to

00:05:29,759 --> 00:05:36,080
create small web page

00:05:32,800 --> 00:05:38,000
to the for deployment

00:05:36,080 --> 00:05:39,600
and we can just share this file but it's

00:05:38,000 --> 00:05:43,280
not convenient to use that

00:05:39,600 --> 00:05:43,280
we have we have to

00:05:43,840 --> 00:05:47,039
use something more convenient and

00:05:45,840 --> 00:05:50,560
reliable

00:05:47,039 --> 00:05:55,680
and first thing that

00:05:50,560 --> 00:05:55,680
came across is a source source code

00:05:56,960 --> 00:06:03,440
and for that

00:06:00,800 --> 00:06:06,960
it is just simply the the archive that

00:06:03,440 --> 00:06:10,400
is containing the python code it may

00:06:06,960 --> 00:06:14,000
can it may contain other uh source

00:06:10,400 --> 00:06:16,800
files like uh c c source files for

00:06:14,000 --> 00:06:16,800
c python

00:06:17,520 --> 00:06:23,600
we can define there the scripts

00:06:20,880 --> 00:06:24,960
uh that will be available for our

00:06:23,600 --> 00:06:27,520
terminal

00:06:24,960 --> 00:06:29,600
uh we can define of course readme the

00:06:27,520 --> 00:06:33,280
set empire's

00:06:29,600 --> 00:06:34,319
cfg uh i will tell a little bit about

00:06:33,280 --> 00:06:38,000
setup by

00:06:34,319 --> 00:06:40,080
uh later uh and also we have

00:06:38,000 --> 00:06:41,919
uh the we have we can define some

00:06:40,080 --> 00:06:45,280
external packages

00:06:41,919 --> 00:06:49,039
uh package data like

00:06:45,280 --> 00:06:52,160
for example the trained model of

00:06:49,039 --> 00:06:56,160
neural artificial

00:06:52,160 --> 00:06:56,960
neural network and of course metadata to

00:06:56,160 --> 00:07:00,560
know what

00:06:56,960 --> 00:07:00,560
exactly we are uh

00:07:01,039 --> 00:07:07,840
what we have installed in our system

00:07:04,400 --> 00:07:10,160
and uh here we

00:07:07,840 --> 00:07:12,160
coming to the conclusion that each time

00:07:10,160 --> 00:07:12,800
we want to use that especially if we

00:07:12,160 --> 00:07:15,599
have the

00:07:12,800 --> 00:07:16,400
c source files uh we have to compile

00:07:15,599 --> 00:07:19,599
that

00:07:16,400 --> 00:07:23,440
and this takes time and

00:07:19,599 --> 00:07:26,479
we would like to have the instant

00:07:23,440 --> 00:07:30,160
uh package that will be ready to use and

00:07:26,479 --> 00:07:33,520
such such

00:07:30,160 --> 00:07:36,960
and this can be offered by binary

00:07:33,520 --> 00:07:40,800
packages the first approach uh

00:07:36,960 --> 00:07:44,479
was x in python

00:07:40,800 --> 00:07:47,440
the day was introduced with the setup

00:07:44,479 --> 00:07:49,520
tools in 2004

00:07:47,440 --> 00:07:52,000
there was no need for building or

00:07:49,520 --> 00:07:54,879
compilation

00:07:52,000 --> 00:07:56,840
it was a distribution format and runtime

00:07:54,879 --> 00:08:00,879
installation format

00:07:56,840 --> 00:08:04,800
uh and the first approach

00:08:00,879 --> 00:08:08,000
of uh listing what we have is

00:08:04,800 --> 00:08:11,520
installed in our system was a info

00:08:08,000 --> 00:08:15,280
directory where we have where we had

00:08:11,520 --> 00:08:19,280
all necessary formations uh

00:08:15,280 --> 00:08:21,840
what we have installed in our system uh

00:08:19,280 --> 00:08:24,080
the funny thing about x it was uh

00:08:21,840 --> 00:08:27,280
possible to

00:08:24,080 --> 00:08:31,919
uh to install many

00:08:27,280 --> 00:08:35,839
versions of certain library uh and

00:08:31,919 --> 00:08:39,919
uh of course uh it was be possible to

00:08:35,839 --> 00:08:43,680
import direct directly the the egg

00:08:39,919 --> 00:08:46,720
so what was the problem with them

00:08:43,680 --> 00:08:51,040
there actually wasn't a

00:08:46,720 --> 00:08:54,399
official pep for that

00:08:51,040 --> 00:08:58,720
and each package manager

00:08:54,399 --> 00:09:02,720
a package maintainer has its own

00:08:58,720 --> 00:09:06,480
directories inside x and

00:09:02,720 --> 00:09:09,519
we in python community

00:09:06,480 --> 00:09:12,640
we have we had to

00:09:09,519 --> 00:09:15,760
make something with that and

00:09:12,640 --> 00:09:18,800
make some standardization uh

00:09:15,760 --> 00:09:22,399
and for that uh

00:09:18,800 --> 00:09:26,800
wills uh came across and

00:09:22,399 --> 00:09:31,040
uh this also is a binary format

00:09:26,800 --> 00:09:34,160
uh it was introdu introduced in 2012

00:09:31,040 --> 00:09:37,279
together with path427

00:09:34,160 --> 00:09:40,800
uh with wheels we have

00:09:37,279 --> 00:09:44,000
uh also standard for distribution uh

00:09:40,800 --> 00:09:44,560
of the wheels and uh standardization of

00:09:44,000 --> 00:09:48,160
the

00:09:44,560 --> 00:09:51,519
metadata so instead of a gimmick for

00:09:48,160 --> 00:09:55,120
we now have the

00:09:51,519 --> 00:09:55,680
uh now we have a different directory

00:09:55,120 --> 00:09:58,880
that is

00:09:55,680 --> 00:10:01,920
that is contain different method data

00:09:58,880 --> 00:10:05,120
uh and this is the current standard for

00:10:01,920 --> 00:10:07,200
building the binary wheels are not

00:10:05,120 --> 00:10:10,399
containing the

00:10:07,200 --> 00:10:12,959
python byte codes but may contain other

00:10:10,399 --> 00:10:15,680
pre-compiled

00:10:12,959 --> 00:10:17,760
code for example for c python some c

00:10:15,680 --> 00:10:21,920
libraries

00:10:17,760 --> 00:10:22,640
as i mentioned uh instead of egg info it

00:10:21,920 --> 00:10:24,890
is used

00:10:22,640 --> 00:10:26,160
this info directory and

00:10:24,890 --> 00:10:29,920
[Music]

00:10:26,160 --> 00:10:31,839
the very big advantage of wheels is that

00:10:29,920 --> 00:10:34,480
they are versioned they have the name

00:10:31,839 --> 00:10:34,480
convention

00:10:34,959 --> 00:10:38,480
in the name we can find the python

00:10:36,720 --> 00:10:39,839
version that is supported they implement

00:10:38,480 --> 00:10:42,720
a certain implementation

00:10:39,839 --> 00:10:44,320
because the python can have different

00:10:42,720 --> 00:10:48,399
implementations

00:10:44,320 --> 00:10:50,399
uh also uh there is information about

00:10:48,399 --> 00:10:53,360
application binary interface

00:10:50,399 --> 00:10:55,120
which is different in macintosh and

00:10:53,360 --> 00:10:58,320
linux and

00:10:55,120 --> 00:10:59,440
windows and uh for which system

00:10:58,320 --> 00:11:02,560
architecture is

00:10:59,440 --> 00:11:02,560
built certain wheel

00:11:02,720 --> 00:11:07,120
for example intel and amd

00:11:07,920 --> 00:11:16,880
or other architectures and of course

00:11:11,120 --> 00:11:16,880
whether it's for 32 or 64 bits

00:11:20,320 --> 00:11:24,160
for now some wheels are importable

00:11:22,720 --> 00:11:27,200
directly for example

00:11:24,160 --> 00:11:32,000
for our rep but

00:11:27,200 --> 00:11:35,360
uh it's not supported by pep427 itself

00:11:32,000 --> 00:11:37,279
and here we can see the example uh

00:11:35,360 --> 00:11:40,160
wheels the first is a new varicella

00:11:37,279 --> 00:11:42,320
wheel of the pip

00:11:40,160 --> 00:11:43,440
library which is for python two and

00:11:42,320 --> 00:11:46,480
three

00:11:43,440 --> 00:11:50,320
uh and this is example or one of the

00:11:46,480 --> 00:11:54,000
numpy um wheel

00:11:50,320 --> 00:11:57,600
which is for c python 3.6

00:11:54,000 --> 00:12:01,120
for machitos 10 9

00:11:57,600 --> 00:12:04,880
for both uh intel architectures

00:12:01,120 --> 00:12:04,880
32 and 64 bits

00:12:05,360 --> 00:12:12,240
currently uh

00:12:08,399 --> 00:12:15,200
there are no uh

00:12:12,240 --> 00:12:16,160
there are no builder on the pie pie the

00:12:15,200 --> 00:12:19,360
maintainers

00:12:16,160 --> 00:12:22,560
uh just have to create on

00:12:19,360 --> 00:12:26,720
all necessary wheels we can create

00:12:22,560 --> 00:12:29,839
our will by the by this comment

00:12:26,720 --> 00:12:33,120
but there is a great talk

00:12:29,839 --> 00:12:36,160
about wheels by elena hashman

00:12:33,120 --> 00:12:38,639
if you want to know about

00:12:36,160 --> 00:12:41,519
application binary interface in linux

00:12:38,639 --> 00:12:45,760
the elf format

00:12:41,519 --> 00:12:49,360
and how they are maintained and built

00:12:45,760 --> 00:12:52,480
you can just watch it

00:12:49,360 --> 00:12:55,200
by clicking on the links provided here

00:12:52,480 --> 00:12:56,959
and she's also supporting two projects

00:12:55,200 --> 00:13:01,040
uh the many linux and and

00:12:56,959 --> 00:13:04,240
auditly uh will the many linux project

00:13:01,040 --> 00:13:07,279
uh is actually uh

00:13:04,240 --> 00:13:10,800
the group of uh the most

00:13:07,279 --> 00:13:14,320
popular linux distribution in docker

00:13:10,800 --> 00:13:16,880
uh that are uh building uh wheels for

00:13:14,320 --> 00:13:18,639
for this certain distribution and audit

00:13:16,880 --> 00:13:20,000
wheel is a command line tool that is

00:13:18,639 --> 00:13:23,360
used for

00:13:20,000 --> 00:13:27,279
checking whether this um wheel

00:13:23,360 --> 00:13:29,120
is uh is proper for certain distribution

00:13:27,279 --> 00:13:32,839
and nothing is missing

00:13:29,120 --> 00:13:36,160
so if you want to know more just

00:13:32,839 --> 00:13:39,920
uh click on the links

00:13:36,160 --> 00:13:43,199
and this is uh

00:13:39,920 --> 00:13:47,199
at the end of the the first section

00:13:43,199 --> 00:13:51,279
uh we will move to the virtual ends

00:13:47,199 --> 00:13:54,720
uh oh okay one one more thing

00:13:51,279 --> 00:13:55,519
just to show how it how the package is

00:13:54,720 --> 00:13:59,360
built

00:13:55,519 --> 00:14:01,920
uh in the most deep

00:13:59,360 --> 00:14:02,399
layer we have the standalone module

00:14:01,920 --> 00:14:05,920
which

00:14:02,399 --> 00:14:09,920
are python file we we

00:14:05,920 --> 00:14:13,040
have more python files we can we can

00:14:09,920 --> 00:14:13,040
have a source code

00:14:13,680 --> 00:14:21,440
and about that if we compile that uh

00:14:17,279 --> 00:14:21,440
we have the wheel for certain platform

00:14:21,600 --> 00:14:25,440
so this is the summary of the packages

00:14:24,079 --> 00:14:28,000
and then we can

00:14:25,440 --> 00:14:29,199
switch to the virtual ends and next

00:14:28,000 --> 00:14:32,880
story

00:14:29,199 --> 00:14:35,120
during my journey of the development of

00:14:32,880 --> 00:14:35,120
the

00:14:36,560 --> 00:14:39,839
python code on the studies i have many

00:14:39,120 --> 00:14:42,959
projects

00:14:39,839 --> 00:14:46,399
and i installed ubuntu on my

00:14:42,959 --> 00:14:49,760
laptop and i started developing many

00:14:46,399 --> 00:14:52,959
projects at once i started installing

00:14:49,760 --> 00:14:58,720
many libraries to the my

00:14:52,959 --> 00:15:03,519
global system python and i noticed that

00:14:58,720 --> 00:15:07,440
uh suddenly i noticed that

00:15:03,519 --> 00:15:10,480
such picture like here and

00:15:07,440 --> 00:15:12,160
the problem is that when i

00:15:10,480 --> 00:15:14,880
was developing and installing many

00:15:12,160 --> 00:15:19,440
packages i uh reinstalled one

00:15:14,880 --> 00:15:22,560
very important dependency that was

00:15:19,440 --> 00:15:25,279
used for a

00:15:22,560 --> 00:15:27,440
graphical engine of ubuntu and i had to

00:15:25,279 --> 00:15:31,680
reinstall everything

00:15:27,440 --> 00:15:34,800
from the scratch but

00:15:31,680 --> 00:15:38,639
it was very quick lesson for me

00:15:34,800 --> 00:15:41,600
how why we should use virtual and end

00:15:38,639 --> 00:15:42,560
so the what is exactly the virtual

00:15:41,600 --> 00:15:46,720
length it is

00:15:42,560 --> 00:15:51,440
isolated directory where we have all

00:15:46,720 --> 00:15:54,800
uh where we have all necessary

00:15:51,440 --> 00:15:56,720
uh libraries and python

00:15:54,800 --> 00:15:59,279
which is completely isolated from the

00:15:56,720 --> 00:16:02,800
global system

00:15:59,279 --> 00:16:05,839
which is good and we have

00:16:02,800 --> 00:16:10,000
few tools to do that

00:16:05,839 --> 00:16:13,600
one is the built-in tool virtual env

00:16:10,000 --> 00:16:17,279
which has which is refactored

00:16:13,600 --> 00:16:19,839
now and there is a great talk we have

00:16:17,279 --> 00:16:22,800
we had it today by bernard gaber

00:16:19,839 --> 00:16:28,079
rewriting the virtual anth

00:16:22,800 --> 00:16:31,519
i fully recommend to see this talk

00:16:28,079 --> 00:16:31,519
and uh

00:16:32,560 --> 00:16:39,120
together with virtualenv uh

00:16:36,000 --> 00:16:42,240
there is a useful thing to use uh the

00:16:39,120 --> 00:16:44,079
virtual and wrapper which provides

00:16:42,240 --> 00:16:47,759
useful commands for creating

00:16:44,079 --> 00:16:50,720
uh virtual and deleting deleting it

00:16:47,759 --> 00:16:54,480
switching between them uh

00:16:50,720 --> 00:16:55,519
and it's uh it it's it is easier to

00:16:54,480 --> 00:17:00,160
develop the

00:16:55,519 --> 00:17:02,399
uh the python code with with that uh

00:17:00,160 --> 00:17:04,400
how the virtual ends actually working

00:17:02,399 --> 00:17:09,360
they are putting the

00:17:04,400 --> 00:17:12,720
path of the certain of the certain

00:17:09,360 --> 00:17:16,000
uh and virtual and in directory

00:17:12,720 --> 00:17:17,120
in the to the path uh before the global

00:17:16,000 --> 00:17:20,400
system and

00:17:17,120 --> 00:17:22,559
um every uh

00:17:20,400 --> 00:17:23,679
every time we where we are typing the

00:17:22,559 --> 00:17:26,000
python it's first

00:17:23,679 --> 00:17:28,400
looking in the virtual and not in the

00:17:26,000 --> 00:17:31,440
global system

00:17:28,400 --> 00:17:34,320
uh from today's

00:17:31,440 --> 00:17:35,280
presentation i've heard there will be

00:17:34,320 --> 00:17:38,880
possibility

00:17:35,280 --> 00:17:42,480
to create virtual ends

00:17:38,880 --> 00:17:46,240
for different python versions which is

00:17:42,480 --> 00:17:50,000
very good but they are must be installed

00:17:46,240 --> 00:17:53,360
uh on the on the system

00:17:50,000 --> 00:17:56,720
there must be present for virtual length

00:17:53,360 --> 00:17:59,919
uh so uh

00:17:56,720 --> 00:18:01,600
in python world we have many

00:17:59,919 --> 00:18:05,360
implementations of the

00:18:01,600 --> 00:18:08,640
uh of the python we have the main

00:18:05,360 --> 00:18:11,760
python in c python uh which is

00:18:08,640 --> 00:18:15,039
uh uh written in c

00:18:11,760 --> 00:18:18,000
we have a pi pi which is written in

00:18:15,039 --> 00:18:20,000
python we have a jaton which is written

00:18:18,000 --> 00:18:22,880
in java

00:18:20,000 --> 00:18:24,400
we have an ion python which is uh which

00:18:22,880 --> 00:18:28,400
backend is written in

00:18:24,400 --> 00:18:31,760
c sharp we have a micropython which is

00:18:28,400 --> 00:18:31,760
used for certain

00:18:33,280 --> 00:18:37,120
embedded systems and we have the

00:18:35,520 --> 00:18:43,600
stackless

00:18:37,120 --> 00:18:46,960
python which is not containing the stack

00:18:43,600 --> 00:18:47,520
and if we for example want to develop

00:18:46,960 --> 00:18:50,720
our

00:18:47,520 --> 00:18:51,679
library and test it against many

00:18:50,720 --> 00:18:54,559
versions

00:18:51,679 --> 00:18:56,880
and many let's say distributions of

00:18:54,559 --> 00:19:00,240
certain python

00:18:56,880 --> 00:19:02,240
we have to have this

00:19:00,240 --> 00:19:03,679
this certain pythons installed on our

00:19:02,240 --> 00:19:06,799
system and there is

00:19:03,679 --> 00:19:11,039
a tool that is

00:19:06,799 --> 00:19:15,200
doing this which is called payment

00:19:11,039 --> 00:19:18,240
there is possibility for installing

00:19:15,200 --> 00:19:21,360
many versions of python

00:19:18,240 --> 00:19:25,520
mary implementations of python

00:19:21,360 --> 00:19:28,880
it is offerings switching between them

00:19:25,520 --> 00:19:31,919
there is an automation of

00:19:28,880 --> 00:19:34,880
switching between certain uh

00:19:31,919 --> 00:19:36,400
virtual and ends it is creating the

00:19:34,880 --> 00:19:39,360
virtual elements

00:19:36,400 --> 00:19:41,360
and here i prepared very useful uh

00:19:39,360 --> 00:19:45,280
command that can be used

00:19:41,360 --> 00:19:47,200
with uh payment uh but before that i

00:19:45,280 --> 00:19:50,880
just

00:19:47,200 --> 00:19:52,640
want to tell you that uh

00:19:50,880 --> 00:19:55,039
the installation of paella is very

00:19:52,640 --> 00:19:55,039
simple

00:19:56,640 --> 00:19:59,280
if we want

00:20:00,400 --> 00:20:03,280
if we want to

00:20:04,400 --> 00:20:12,159
install it it just can be done by

00:20:07,919 --> 00:20:12,159
uh the script provided on github

00:20:12,480 --> 00:20:16,559
uh which is called pyth installer if you

00:20:14,799 --> 00:20:19,840
don't trust this

00:20:16,559 --> 00:20:23,840
this script you can use

00:20:19,840 --> 00:20:27,360
you can do the uh common one by one

00:20:23,840 --> 00:20:29,760
uh in this in the script and

00:20:27,360 --> 00:20:31,679
very important thing uh you have to

00:20:29,760 --> 00:20:34,880
install dependencies

00:20:31,679 --> 00:20:39,120
uh that are required for compiling the

00:20:34,880 --> 00:20:39,120
python versions and there is uh

00:20:39,200 --> 00:20:45,600
all dependencies accordingly to uh

00:20:42,880 --> 00:20:48,240
to the distributions which can be fine

00:20:45,600 --> 00:20:51,280
here in the frequently asked questions

00:20:48,240 --> 00:20:54,240
and be aware of that if you want to for

00:20:51,280 --> 00:20:57,120
example use the jton you have to

00:20:54,240 --> 00:20:57,520
have java on your machine if you want to

00:20:57,120 --> 00:21:00,960
use

00:20:57,520 --> 00:21:03,280
c-sharp iron python you have to have the

00:21:00,960 --> 00:21:06,880
sushir on your machine

00:21:03,280 --> 00:21:07,919
uh and after that if you prepare

00:21:06,880 --> 00:21:11,360
everything

00:21:07,919 --> 00:21:14,960
uh you can just list all available

00:21:11,360 --> 00:21:18,240
uh every the pion is installing

00:21:14,960 --> 00:21:21,679
um in your home folder

00:21:18,240 --> 00:21:22,400
and all versions are as isolated from

00:21:21,679 --> 00:21:26,480
the global

00:21:22,400 --> 00:21:30,159
python system and i just put it on the

00:21:26,480 --> 00:21:33,520
home folder and

00:21:30,159 --> 00:21:37,039
if you want to uh

00:21:33,520 --> 00:21:39,360
list all available uh

00:21:37,039 --> 00:21:41,120
python versions you have to use the this

00:21:39,360 --> 00:21:43,440
command

00:21:41,120 --> 00:21:45,120
sometimes there is a need for

00:21:43,440 --> 00:21:48,720
checkouting the

00:21:45,120 --> 00:21:50,400
the github repo locally uh just to

00:21:48,720 --> 00:21:55,360
update the newest version

00:21:50,400 --> 00:21:57,600
that's appeared in community

00:21:55,360 --> 00:21:58,880
uh to install certain version we are

00:21:57,600 --> 00:22:01,840
using

00:21:58,880 --> 00:22:02,559
such comment we can uninstall certain

00:22:01,840 --> 00:22:05,039
version

00:22:02,559 --> 00:22:06,080
and the same command is used for uh

00:22:05,039 --> 00:22:09,919
uninstalling

00:22:06,080 --> 00:22:13,679
environment uh to list all available

00:22:09,919 --> 00:22:16,400
python versions we can use

00:22:13,679 --> 00:22:16,880
this command and very important thing is

00:22:16,400 --> 00:22:19,679
that

00:22:16,880 --> 00:22:22,240
uh if we want to know where exactly our

00:22:19,679 --> 00:22:25,440
virtual and f is stored

00:22:22,240 --> 00:22:28,559
we have to use the pi and which

00:22:25,440 --> 00:22:30,720
python command because

00:22:28,559 --> 00:22:32,240
the normal command which python we will

00:22:30,720 --> 00:22:35,440
uh

00:22:32,240 --> 00:22:37,679
will show the the shin directory

00:22:35,440 --> 00:22:38,559
uh which is an engine used by the the

00:22:37,679 --> 00:22:43,200
path

00:22:38,559 --> 00:22:45,070
and the real path will be shown

00:22:43,200 --> 00:22:46,240
by this

00:22:45,070 --> 00:22:48,960
[Music]

00:22:46,240 --> 00:22:51,360
by this comment also we can activate or

00:22:48,960 --> 00:22:54,960
deactivate the environment

00:22:51,360 --> 00:22:58,400
by hand and

00:22:54,960 --> 00:23:01,760
uh there is a possibility to set

00:22:58,400 --> 00:23:05,039
some a namespaces in our terminal

00:23:01,760 --> 00:23:08,240
of uh availability of the certain

00:23:05,039 --> 00:23:11,760
version of the python

00:23:08,240 --> 00:23:13,840
the here the karaki of the uh

00:23:11,760 --> 00:23:14,880
of these comments it's like this if we

00:23:13,840 --> 00:23:17,760
want to just test

00:23:14,880 --> 00:23:18,640
some python version we can use the

00:23:17,760 --> 00:23:22,640
command pi on

00:23:18,640 --> 00:23:25,840
pi of shelf and this certain comment

00:23:22,640 --> 00:23:29,280
uh we can uh attach certain

00:23:25,840 --> 00:23:31,039
version or environment to the directory

00:23:29,280 --> 00:23:34,640
and when we switch inside to this

00:23:31,039 --> 00:23:37,679
directory we will have our environment

00:23:34,640 --> 00:23:39,840
and we can set up the pion global

00:23:37,679 --> 00:23:41,919
which will be covering the system python

00:23:39,840 --> 00:23:46,320
which is very good

00:23:41,919 --> 00:23:49,520
and it will be shown

00:23:46,320 --> 00:23:52,159
uh the last in this character i will

00:23:49,520 --> 00:23:52,159
show it in a

00:23:52,400 --> 00:23:55,520
quick demonstration

00:23:55,679 --> 00:24:04,480
uh so here this is my pyeon

00:24:00,240 --> 00:24:05,679
virtual versions uh i have installed

00:24:04,480 --> 00:24:09,360
macro python

00:24:05,679 --> 00:24:09,360
i have minicon the three

00:24:09,919 --> 00:24:14,480
there is also uh

00:24:15,679 --> 00:24:21,200
anaconda for that this is all versions

00:24:19,520 --> 00:24:24,799
that are available by paying

00:24:21,200 --> 00:24:28,880
we have the version of anaconda

00:24:24,799 --> 00:24:31,039
and aislepython jton micropython

00:24:28,880 --> 00:24:35,279
miniconda

00:24:31,039 --> 00:24:38,559
pi pi and so on so on uh

00:24:35,279 --> 00:24:42,600
here uh currently

00:24:38,559 --> 00:24:45,760
i have uh my global system is

00:24:42,600 --> 00:24:50,159
382 which is gathering my

00:24:45,760 --> 00:24:50,720
system python and for example when i

00:24:50,159 --> 00:24:55,440
change

00:24:50,720 --> 00:24:58,559
my directory to the pipx

00:24:55,440 --> 00:25:00,080
directory automatically there is

00:24:58,559 --> 00:25:04,799
activation of my virtual

00:25:00,080 --> 00:25:09,279
env if i for example want to test the

00:25:04,799 --> 00:25:12,799
micropython i'm using the shell command

00:25:09,279 --> 00:25:12,799
which will be covering

00:25:12,840 --> 00:25:16,000
the uh

00:25:14,890 --> 00:25:18,320
[Music]

00:25:16,000 --> 00:25:19,600
the environment from uh from the

00:25:18,320 --> 00:25:23,600
directory and fro

00:25:19,600 --> 00:25:28,720
and my global pattern and if i just stop

00:25:23,600 --> 00:25:29,520
testing i can unset it and i will be

00:25:28,720 --> 00:25:33,120
back

00:25:29,520 --> 00:25:35,760
for my global python

00:25:33,120 --> 00:25:37,919
uh so this is very convenient during

00:25:35,760 --> 00:25:42,000
development

00:25:37,919 --> 00:25:45,440
i very recommend to use that uh

00:25:42,000 --> 00:25:48,640
and actually that was the last

00:25:45,440 --> 00:25:52,880
uh slide of the second part

00:25:48,640 --> 00:25:56,400
of uh uh

00:25:52,880 --> 00:25:59,039
then we are now we are now switching for

00:25:56,400 --> 00:26:01,600
package manager which is a big topic and

00:25:59,039 --> 00:26:04,080
big confusion python community

00:26:01,600 --> 00:26:05,600
uh because there is a lot of choices

00:26:04,080 --> 00:26:09,760
that we can make during

00:26:05,600 --> 00:26:14,640
uh before we start our project and here

00:26:09,760 --> 00:26:16,460
i start with my uh short story

00:26:14,640 --> 00:26:18,000
about uh

00:26:16,460 --> 00:26:21,360
[Music]

00:26:18,000 --> 00:26:23,520
dependency hell in one of my projects i

00:26:21,360 --> 00:26:26,640
have

00:26:23,520 --> 00:26:27,360
i have many libraries each of these

00:26:26,640 --> 00:26:29,880
libraries

00:26:27,360 --> 00:26:31,760
have many dependencies and

00:26:29,880 --> 00:26:33,840
[Music]

00:26:31,760 --> 00:26:34,880
most of these libraries was using the

00:26:33,840 --> 00:26:38,000
same

00:26:34,880 --> 00:26:41,919
dependencies but in different

00:26:38,000 --> 00:26:42,880
version uh our project in our project we

00:26:41,919 --> 00:26:46,799
are using the

00:26:42,880 --> 00:26:50,559
pip uh package manager and

00:26:46,799 --> 00:26:54,159
we were using the requirements txt file

00:26:50,559 --> 00:26:57,440
uh for reproducibility of the

00:26:54,159 --> 00:27:00,640
uh of the environment

00:26:57,440 --> 00:27:04,159
and uh

00:27:00,640 --> 00:27:07,760
after a few execution we noticed that uh

00:27:04,159 --> 00:27:09,200
sometimes our application is not working

00:27:07,760 --> 00:27:12,080
because of the wrong

00:27:09,200 --> 00:27:12,400
dependency version and we were just when

00:27:12,080 --> 00:27:15,520
they're

00:27:12,400 --> 00:27:17,600
wondering why it's happening and we

00:27:15,520 --> 00:27:20,960
noticed that in some cases

00:27:17,600 --> 00:27:24,320
uh the the or

00:27:20,960 --> 00:27:26,399
the order in requirements txt uh

00:27:24,320 --> 00:27:28,399
was changing our dependency because the

00:27:26,399 --> 00:27:31,840
first library for example

00:27:28,399 --> 00:27:37,200
for example was using the python uh

00:27:31,840 --> 00:27:40,399
the library version 1.00

00:27:37,200 --> 00:27:43,440
and the second one was using

00:27:40,399 --> 00:27:46,000
one zero three and

00:27:43,440 --> 00:27:48,399
what was happening the pip was not it's

00:27:46,000 --> 00:27:52,000
not resolving this dependency

00:27:48,399 --> 00:27:54,000
uh versions

00:27:52,000 --> 00:27:55,200
uh it's just installing the first

00:27:54,000 --> 00:27:56,880
version

00:27:55,200 --> 00:27:58,640
in this in the second line it's

00:27:56,880 --> 00:28:02,799
uninstalling this uh

00:27:58,640 --> 00:28:06,320
first version and it's installing again

00:28:02,799 --> 00:28:09,760
the the second version so

00:28:06,320 --> 00:28:14,000
we just wanted uh to know how we can

00:28:09,760 --> 00:28:17,039
just manage that and we switched

00:28:14,000 --> 00:28:18,559
for different uh package manager and i

00:28:17,039 --> 00:28:22,799
will

00:28:18,559 --> 00:28:26,799
show you uh plenty of them

00:28:22,799 --> 00:28:30,159
uh but before that the short story

00:28:26,799 --> 00:28:33,039
uh what was first in the beginning

00:28:30,159 --> 00:28:33,520
of python we have easy install which was

00:28:33,039 --> 00:28:37,360
using

00:28:33,520 --> 00:28:41,600
x for installing it was provided

00:28:37,360 --> 00:28:41,600
with setup tools in 2004

00:28:42,559 --> 00:28:49,919
it was using installing uh packages

00:28:46,559 --> 00:28:53,840
and its dependencies uh

00:28:49,919 --> 00:28:57,760
and it there there was no pep

00:28:53,840 --> 00:29:01,919
for uh for the easy install

00:28:57,760 --> 00:29:05,279
so with the standardization the pip

00:29:01,919 --> 00:29:09,039
came across and we find

00:29:05,279 --> 00:29:12,240
that and the pip

00:29:09,039 --> 00:29:15,440
was released in 2008 uh

00:29:12,240 --> 00:29:18,720
it's using wheels or source code and

00:29:15,440 --> 00:29:22,080
introduce the requirements txt uh

00:29:18,720 --> 00:29:22,799
for freezing the our for freezing our

00:29:22,080 --> 00:29:24,480
environment

00:29:22,799 --> 00:29:26,000
and knowing what we have exactly

00:29:24,480 --> 00:29:29,279
installed in our

00:29:26,000 --> 00:29:29,279
virtual environments

00:29:29,679 --> 00:29:34,240
the good news is that from

00:29:34,559 --> 00:29:38,840
certain versions of pip the latest

00:29:37,440 --> 00:29:42,000
versions of pip

00:29:38,840 --> 00:29:44,240
um there is a possibility of

00:29:42,000 --> 00:29:45,440
checking the hashes of the versions of

00:29:44,240 --> 00:29:49,279
python so we have

00:29:45,440 --> 00:29:52,080
more security but it has to be

00:29:49,279 --> 00:29:52,080
explicitly

00:29:52,840 --> 00:29:57,440
used but as i mentioned pip is not

00:29:56,080 --> 00:30:00,240
resolving

00:29:57,440 --> 00:30:03,619
dependencies so

00:30:00,240 --> 00:30:03,619
[Music]

00:30:04,000 --> 00:30:09,600
here is a package here is a table

00:30:07,120 --> 00:30:10,720
that is comparing easy install together

00:30:09,600 --> 00:30:13,039
with the pip

00:30:10,720 --> 00:30:14,720
the main difference is that easy install

00:30:13,039 --> 00:30:17,760
is using x

00:30:14,720 --> 00:30:21,360
there was possibility to install the

00:30:17,760 --> 00:30:24,720
many versions of certain library

00:30:21,360 --> 00:30:25,200
there is no pep for easy install and for

00:30:24,720 --> 00:30:28,600
pip

00:30:25,200 --> 00:30:31,440
there of course there is uh pep

00:30:28,600 --> 00:30:34,640
00:30:31,440 --> 00:30:34,640
it is using wheels

00:30:35,120 --> 00:30:42,480
and uh

00:30:38,399 --> 00:30:42,480
this is the main actually the main

00:30:45,440 --> 00:30:51,279
difference between them so

00:30:48,480 --> 00:30:52,480
we have but as i mentioned there is

00:30:51,279 --> 00:30:55,360
still a problem with

00:30:52,480 --> 00:30:56,720
um difference with the resulting of

00:30:55,360 --> 00:31:00,720
dependencies

00:30:56,720 --> 00:31:00,720
so uh

00:31:01,920 --> 00:31:06,960
[Music]

00:31:03,279 --> 00:31:09,200
okay oh i'm just moving

00:31:06,960 --> 00:31:10,240
forward it's that's happening okay so

00:31:09,200 --> 00:31:14,080
before i move

00:31:10,240 --> 00:31:18,000
to this tool uh uh

00:31:14,080 --> 00:31:21,120
to these tools uh i will tell short

00:31:18,000 --> 00:31:24,240
introduction to setup by script which is

00:31:21,120 --> 00:31:26,320
used for our packages and

00:31:24,240 --> 00:31:27,600
libraries that we want to install in our

00:31:26,320 --> 00:31:30,960
environment

00:31:27,600 --> 00:31:32,799
uh we are feeling we

00:31:30,960 --> 00:31:35,039
are feeling necessary information

00:31:32,799 --> 00:31:35,840
informations and the setup by script is

00:31:35,039 --> 00:31:38,640
providing

00:31:35,840 --> 00:31:39,120
the possibility of building the packages

00:31:38,640 --> 00:31:41,279
uh

00:31:39,120 --> 00:31:43,120
distributing them to the pi pi and

00:31:41,279 --> 00:31:46,480
installing in our

00:31:43,120 --> 00:31:49,519
virtual ends this is

00:31:46,480 --> 00:31:52,480
the example uh

00:31:49,519 --> 00:31:53,519
a piece of code of setup by where we

00:31:52,480 --> 00:31:56,880
have the version

00:31:53,519 --> 00:32:01,360
description authors packages

00:31:56,880 --> 00:32:04,720
we can define additional non-python

00:32:01,360 --> 00:32:08,240
packages like svg

00:32:04,720 --> 00:32:11,840
files or other

00:32:08,240 --> 00:32:12,320
data i don't want to focus on the setup

00:32:11,840 --> 00:32:15,760
pi

00:32:12,320 --> 00:32:18,159
in this presentation uh it is

00:32:15,760 --> 00:32:20,399
i just wanted to mention it because it's

00:32:18,159 --> 00:32:23,440
uh used in the next tool that i

00:32:20,399 --> 00:32:26,880
will be uh talking

00:32:23,440 --> 00:32:31,120
uh so the pip tools

00:32:26,880 --> 00:32:34,480
it's it's a package manager

00:32:31,120 --> 00:32:38,399
that is using two commands uh

00:32:34,480 --> 00:32:41,440
pip compile and pip sync and

00:32:38,399 --> 00:32:45,440
it is resolving dependencies

00:32:41,440 --> 00:32:49,120
in certain way it is using the setup by

00:32:45,440 --> 00:32:52,559
and requirements in file

00:32:49,120 --> 00:32:55,360
for knowing for

00:32:52,559 --> 00:32:55,760
resolving all dependencies and after

00:32:55,360 --> 00:32:59,279
that

00:32:55,760 --> 00:32:59,279
after compiling we are

00:33:00,799 --> 00:33:04,240
we have we are getting the requirements

00:33:03,120 --> 00:33:07,600
txt where we have

00:33:04,240 --> 00:33:08,559
all resolved environments uh all resolve

00:33:07,600 --> 00:33:13,039
dependencies

00:33:08,559 --> 00:33:15,440
and we can reproduce our environment

00:33:13,039 --> 00:33:16,240
the second common pip sync is checking

00:33:15,440 --> 00:33:19,519
whether

00:33:16,240 --> 00:33:21,279
uh all necessary versions of libraries

00:33:19,519 --> 00:33:22,480
are installed in our environment and

00:33:21,279 --> 00:33:26,720
it's just showing

00:33:22,480 --> 00:33:26,720
if there is some inconsistency

00:33:27,679 --> 00:33:34,640
so here we are

00:33:31,279 --> 00:33:37,600
requiring three files for uh

00:33:34,640 --> 00:33:38,000
resolving dependencies so if we would

00:33:37,600 --> 00:33:41,360
like for

00:33:38,000 --> 00:33:45,039
example to create it for a depth

00:33:41,360 --> 00:33:49,279
of test uat and prot environments we

00:33:45,039 --> 00:33:52,480
have to reproduce uh requirements in and

00:33:49,279 --> 00:33:55,120
requirements txt which is not so

00:33:52,480 --> 00:33:55,120
convenient

00:33:55,360 --> 00:33:58,720
and then we have a different tool that

00:33:57,440 --> 00:34:01,919
is

00:33:58,720 --> 00:34:06,399
p-band it is

00:34:01,919 --> 00:34:08,720
uh it can manage manage the

00:34:06,399 --> 00:34:10,320
virtual environments uh if we for

00:34:08,720 --> 00:34:12,639
example is installing something and we

00:34:10,320 --> 00:34:15,520
have not activated the virtual element

00:34:12,639 --> 00:34:18,079
it is automatically ins uh activating

00:34:15,520 --> 00:34:21,280
the random virtualenv

00:34:18,079 --> 00:34:24,639
with the random name and installing uh

00:34:21,280 --> 00:34:27,359
it there but it's but when it's uh

00:34:24,639 --> 00:34:28,399
something when the virtual lens is

00:34:27,359 --> 00:34:30,879
activated

00:34:28,399 --> 00:34:31,919
it is installing in the current virtual

00:34:30,879 --> 00:34:34,960
end

00:34:31,919 --> 00:34:38,159
um and it

00:34:34,960 --> 00:34:38,960
is using uh the pip file and the pip

00:34:38,159 --> 00:34:42,000
file lock

00:34:38,960 --> 00:34:46,000
files uh and

00:34:42,000 --> 00:34:48,159
p file uh contains two sections

00:34:46,000 --> 00:34:49,440
in the first section in the first

00:34:48,159 --> 00:34:52,800
section there are

00:34:49,440 --> 00:34:55,679
uh development

00:34:52,800 --> 00:34:56,480
local development packages that are used

00:34:55,679 --> 00:34:58,960
for

00:34:56,480 --> 00:35:00,240
uh creating the project and the

00:34:58,960 --> 00:35:03,680
production develop

00:35:00,240 --> 00:35:04,640
the production libraries and each time

00:35:03,680 --> 00:35:08,240
we are providing

00:35:04,640 --> 00:35:10,960
something it is resolving automatically

00:35:08,240 --> 00:35:11,599
uh all necessary dependent dependencies

00:35:10,960 --> 00:35:14,560
and it's

00:35:11,599 --> 00:35:16,640
telling whether there are conflicts that

00:35:14,560 --> 00:35:19,839
cannot be resolved for example

00:35:16,640 --> 00:35:23,680
one library is uh

00:35:19,839 --> 00:35:27,119
is requiring the version 2.3

00:35:23,680 --> 00:35:29,520
and uh the second

00:35:27,119 --> 00:35:30,240
the the second library one dependency

00:35:29,520 --> 00:35:33,839
that

00:35:30,240 --> 00:35:37,599
um will we require

00:35:33,839 --> 00:35:41,200
version uh below two

00:35:37,599 --> 00:35:45,040
so this is very useful tool

00:35:41,200 --> 00:35:47,440
uh for pointing out such situations

00:35:45,040 --> 00:35:48,160
and of course when we have the stable

00:35:47,440 --> 00:35:50,640
and

00:35:48,160 --> 00:35:51,920
environment we just locking the

00:35:50,640 --> 00:35:54,960
environment

00:35:51,920 --> 00:35:58,240
which then the p5 lock is used uh

00:35:54,960 --> 00:36:02,560
just simply for installing

00:35:58,240 --> 00:36:05,040
on our ci cds on docker images and so on

00:36:02,560 --> 00:36:08,960
so on

00:36:05,040 --> 00:36:08,960
also ppf is using

00:36:10,960 --> 00:36:18,079
is using is using

00:36:14,560 --> 00:36:21,839
uh our uh

00:36:18,079 --> 00:36:24,640
hashes so we have the security

00:36:21,839 --> 00:36:24,960
and there is an alternative pooping for

00:36:24,640 --> 00:36:27,520
pip

00:36:24,960 --> 00:36:28,640
f which is als which is also great which

00:36:27,520 --> 00:36:32,320
is poetry

00:36:28,640 --> 00:36:34,240
we use uh we use it for uh

00:36:32,320 --> 00:36:35,599
actually the poetry has the same

00:36:34,240 --> 00:36:38,880
features as

00:36:35,599 --> 00:36:41,200
uh p pen uh that is faster i will show

00:36:38,880 --> 00:36:45,280
that

00:36:41,200 --> 00:36:45,280
it's faster in resolving dependencies

00:36:46,800 --> 00:36:52,160
the myth so it is managing the

00:36:50,000 --> 00:36:53,359
different environments it's also

00:36:52,160 --> 00:36:56,560
installing packages

00:36:53,359 --> 00:36:59,599
it's resolving dependencies but there is

00:36:56,560 --> 00:37:00,960
also the convenient way of creating

00:36:59,599 --> 00:37:04,079
packages and publishing

00:37:00,960 --> 00:37:06,240
in to the pipeline so it is more useful

00:37:04,079 --> 00:37:06,240
for

00:37:06,880 --> 00:37:11,680
libraries and

00:37:11,920 --> 00:37:19,359
i will say a few words about a

00:37:16,720 --> 00:37:20,160
package manager that is not used that is

00:37:19,359 --> 00:37:24,320
not

00:37:20,160 --> 00:37:27,680
pure python which is anaconda which is

00:37:24,320 --> 00:37:30,480
the python libraries pros some other

00:37:27,680 --> 00:37:31,200
data scientist libraries the mini conda

00:37:30,480 --> 00:37:33,520
is the

00:37:31,200 --> 00:37:37,359
smaller version of anaconda and the

00:37:33,520 --> 00:37:40,079
conda is the package manager

00:37:37,359 --> 00:37:41,119
the main problem with uh anaconda is

00:37:40,079 --> 00:37:42,960
that it's used

00:37:41,119 --> 00:37:44,560
it's not supporting pi pi it's

00:37:42,960 --> 00:37:47,839
supporting uh

00:37:44,560 --> 00:37:51,040
only their their channels

00:37:47,839 --> 00:37:52,000
they have different standards for their

00:37:51,040 --> 00:37:54,720
packages

00:37:52,000 --> 00:37:56,640
so there is no compatibility between

00:37:54,720 --> 00:38:01,599
pipeline and

00:37:56,640 --> 00:38:01,599
channels conda channels and of course

00:38:02,160 --> 00:38:06,800
conda packages not working with python

00:38:05,280 --> 00:38:10,400
virtual elements

00:38:06,800 --> 00:38:12,560
so be our be aware of that

00:38:10,400 --> 00:38:14,000
if it is mainly used for machine

00:38:12,560 --> 00:38:16,640
learning

00:38:14,000 --> 00:38:18,000
projects and we have the possibility to

00:38:16,640 --> 00:38:21,040
use conda itself or

00:38:18,000 --> 00:38:24,320
conda with other package manager

00:38:21,040 --> 00:38:25,440
if we use conda alone we have to know

00:38:24,320 --> 00:38:29,440
that channels

00:38:25,440 --> 00:38:29,440
we have to choose good channel because

00:38:30,480 --> 00:38:36,320
very often libraries are uh outdated

00:38:34,320 --> 00:38:38,720
uh they are maintained by different

00:38:36,320 --> 00:38:38,720
people

00:38:39,760 --> 00:38:45,040
and most safe

00:38:42,960 --> 00:38:46,640
is to use conda with other package

00:38:45,040 --> 00:38:49,680
manager

00:38:46,640 --> 00:38:52,800
conda for some non-python packages

00:38:49,680 --> 00:38:55,200
and python package package manager

00:38:52,800 --> 00:38:57,330
for getting the latest libraries from

00:38:55,200 --> 00:38:58,839
python

00:38:57,330 --> 00:39:01,520
[Music]

00:38:58,839 --> 00:39:05,280
and uh and this is

00:39:01,520 --> 00:39:08,320
mainly useful for machine learning

00:39:05,280 --> 00:39:11,440
uh also recently

00:39:08,320 --> 00:39:14,640
uh also

00:39:11,440 --> 00:39:19,440
uh recently

00:39:14,640 --> 00:39:23,079
there there was a a release of a pdm

00:39:19,440 --> 00:39:25,520
package manager which is implementing

00:39:23,079 --> 00:39:28,720
pep582

00:39:25,520 --> 00:39:32,320
the pep582 is talking about

00:39:28,720 --> 00:39:36,160
storing is storing the

00:39:32,320 --> 00:39:38,320
uh storing the libraries inside the

00:39:36,160 --> 00:39:41,520
project there is no need for the virtual

00:39:38,320 --> 00:39:42,400
ends everything is with the project

00:39:41,520 --> 00:39:47,200
directory

00:39:42,400 --> 00:39:50,880
and also it's implementing pep517

00:39:47,200 --> 00:39:54,839
which is installing libraries from the

00:39:50,880 --> 00:39:58,160
directory uh so this is

00:39:54,839 --> 00:40:01,760
uh this is a great feature

00:39:58,160 --> 00:40:05,200
but it's on early stages and

00:40:01,760 --> 00:40:08,480
finally uh we can use sometimes the pip

00:40:05,200 --> 00:40:09,839
x which

00:40:08,480 --> 00:40:12,079
actually is not resolving the

00:40:09,839 --> 00:40:15,040
dependencies it's installing

00:40:12,079 --> 00:40:16,319
uh one package per environment and if

00:40:15,040 --> 00:40:18,800
you want to install

00:40:16,319 --> 00:40:20,400
uh a second package it is installing in

00:40:18,800 --> 00:40:22,560
different in virtualenv

00:40:20,400 --> 00:40:23,520
and also there is a possibility to

00:40:22,560 --> 00:40:26,319
install

00:40:23,520 --> 00:40:27,119
two packages in the same environment but

00:40:26,319 --> 00:40:30,160
it will

00:40:27,119 --> 00:40:33,200
finish with not

00:40:30,160 --> 00:40:35,599
resolving the dependency

00:40:33,200 --> 00:40:36,800
so it is resolving dependency because

00:40:35,599 --> 00:40:39,920
it's it's starting on

00:40:36,800 --> 00:40:43,359
one package so here

00:40:39,920 --> 00:40:45,359
uh i've just gathered uh all this

00:40:43,359 --> 00:40:46,400
all information that i have already said

00:40:45,359 --> 00:40:50,000
you can check it

00:40:46,400 --> 00:40:52,640
it is separated in three tables and

00:40:50,000 --> 00:40:53,839
annotations to these tables uh i will

00:40:52,640 --> 00:40:57,520
skip that

00:40:53,839 --> 00:41:01,839
uh this is just the reference

00:40:57,520 --> 00:41:05,040
uh and finally i've made some benchmark

00:41:01,839 --> 00:41:06,079
and uh surprisingly poetry is the

00:41:05,040 --> 00:41:11,200
fastest

00:41:06,079 --> 00:41:14,720
from from chosen package manager

00:41:11,200 --> 00:41:14,720
by me and

00:41:14,800 --> 00:41:22,800
i'm very often using it because of that

00:41:19,440 --> 00:41:23,359
and finally i will tell a few words

00:41:22,800 --> 00:41:26,640
about

00:41:23,359 --> 00:41:29,040
my setup uh i'm mainly

00:41:26,640 --> 00:41:30,319
installing uh pip locally on my home

00:41:29,040 --> 00:41:33,760
folder it's not

00:41:30,319 --> 00:41:34,400
if i something install from my user it's

00:41:33,760 --> 00:41:37,520
installing

00:41:34,400 --> 00:41:41,040
locally uh on my line like system

00:41:37,520 --> 00:41:44,160
uh then i'm installing uh pip poetry and

00:41:41,040 --> 00:41:45,200
other tools that i'm requiring for most

00:41:44,160 --> 00:41:48,319
of the projects

00:41:45,200 --> 00:41:49,599
that are common from for projects and

00:41:48,319 --> 00:41:52,160
then

00:41:49,599 --> 00:41:54,640
i'm installing pionf for managing many

00:41:52,160 --> 00:41:57,280
python versions and virtualenv

00:41:54,640 --> 00:42:00,960
and then i start i start project by

00:41:57,280 --> 00:42:00,960
creating virtual and then developing

00:42:01,200 --> 00:42:04,720
so here are all resources that i used

00:42:03,280 --> 00:42:08,800
for presentation

00:42:04,720 --> 00:42:13,119
uh feel free to uh to see everything

00:42:08,800 --> 00:42:14,960
what i used for this presentation and uh

00:42:13,119 --> 00:42:18,480
that's the end of my presentation feel

00:42:14,960 --> 00:42:18,480
free to ask me questions

00:42:18,800 --> 00:42:21,119
thank you

00:42:22,800 --> 00:42:26,240
see people love your talk see those

00:42:25,520 --> 00:42:29,280
claps

00:42:26,240 --> 00:42:30,800
um so okay so we got two minutes i i

00:42:29,280 --> 00:42:33,200
think i can only go through

00:42:30,800 --> 00:42:35,119
one or two questions so matthew is

00:42:33,200 --> 00:42:36,800
asking um

00:42:35,119 --> 00:42:40,079
how did wheels help you solve your

00:42:36,800 --> 00:42:44,000
problem with terraform and aws

00:42:40,079 --> 00:42:47,680
uh actually we just had to create

00:42:44,000 --> 00:42:49,920
a docker a docker image that was common

00:42:47,680 --> 00:42:53,440
for every developer and we solved that

00:42:49,920 --> 00:42:57,119
and then we created uh

00:42:53,440 --> 00:43:00,960
ios uh os layers

00:42:57,119 --> 00:43:00,960
where we have all libraries

00:43:01,760 --> 00:43:08,880
right right okay uh oliver is asking

00:43:05,520 --> 00:43:12,000
how is pi end in comparison to virtual m

00:43:08,880 --> 00:43:14,000
any preference and why i uh

00:43:12,000 --> 00:43:15,520
i love to use pile because i can easily

00:43:14,000 --> 00:43:18,560
switch between versions

00:43:15,520 --> 00:43:21,200
i currently work in a project

00:43:18,560 --> 00:43:22,560
where i have five repositories and five

00:43:21,200 --> 00:43:24,800
different

00:43:22,560 --> 00:43:26,560
uh python versions i don't have to

00:43:24,800 --> 00:43:30,079
install it

00:43:26,560 --> 00:43:33,040
in different i don't have to

00:43:30,079 --> 00:43:33,839
install globally and i just can switch

00:43:33,040 --> 00:43:37,359
it

00:43:33,839 --> 00:43:39,040
easily okay

00:43:37,359 --> 00:43:40,359
um what's the best way to maintain

00:43:39,040 --> 00:43:44,560
package versions between

00:43:40,359 --> 00:43:47,040
requirements.txt pip file and setup.pi

00:43:44,560 --> 00:43:48,880
uh could you repeat so what's the the

00:43:47,040 --> 00:43:50,640
best way to maintain package versions

00:43:48,880 --> 00:43:53,280
between requirements pip file and

00:43:50,640 --> 00:43:56,640
setup.pi

00:43:53,280 --> 00:44:00,160
uh i think uh

00:43:56,640 --> 00:44:03,359
i come on i'm commonly using the

00:44:00,160 --> 00:44:05,359
p5 log or poetry log because it's

00:44:03,359 --> 00:44:08,480
resolving my dependencies

00:44:05,359 --> 00:44:11,359
uh pip tools is uh okay

00:44:08,480 --> 00:44:11,359
but it's

00:44:11,520 --> 00:44:16,480
but it's too big to have many

00:44:14,240 --> 00:44:20,079
requirements for many the

00:44:16,480 --> 00:44:22,160
environments i think

00:44:20,079 --> 00:44:24,560
i don't know whether i i answered your

00:44:22,160 --> 00:44:28,079
question but we can talk

00:44:24,560 --> 00:44:30,079
we can talk uh yeah after

00:44:28,079 --> 00:44:31,119
on the text cool so we we reached the

00:44:30,079 --> 00:44:34,000
end of the time there's

00:44:31,119 --> 00:44:34,480
there's still three questions here um i

00:44:34,000 --> 00:44:36,880
will

00:44:34,480 --> 00:44:38,640
urge people to have questions to go to

00:44:36,880 --> 00:44:41,520
the talk on discord

00:44:38,640 --> 00:44:44,400
the channel of this talk uh thanks for

00:44:41,520 --> 00:44:46,640
coming and thanks mihai for the

00:44:44,400 --> 00:44:46,640
talk

00:44:48,079 --> 00:44:51,359

YouTube URL: https://www.youtube.com/watch?v=NZ8K1GXI94M


