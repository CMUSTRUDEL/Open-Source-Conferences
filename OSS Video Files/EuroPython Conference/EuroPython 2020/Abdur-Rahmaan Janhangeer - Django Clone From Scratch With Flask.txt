Title: Abdur-Rahmaan Janhangeer - Django Clone From Scratch With Flask
Publication date: 2020-09-21
Playlist: EuroPython 2020
Description: 
	"Django Clone From Scratch With Flask
EuroPython 2020 - Talk - 2020-07-23 - Ni
Online

By Abdur-Rahmaan Janhangeer

With Python, when thinking of web frameworks, two that come into mind are Django and Flask. Instead of having to choose one of the two, this session shows how you can engineer Flask to achieve a simili-Django app. It's a dive into the internal components of Django and the idea behind. The session covers different Flask development patterns to finally finish with an app that's functionally similar to Django with some extra features in for free. It also lists some caveats identified with such a pattern. This session requires attendees to know Flask and having used Django for building at least one project. At the very least it assumes the knowledge of models, views, controller, templates and migrations. It discusses along the way the educational and pedagogical aspect of learning web frameworks and proposes a syllabus. It discusses the benefits of learning Flask and the necessity of learning the two as a Pythonista. Django is the go-to framework for web development and it's no surprise that most freelancing jobs require Django. Flask is appreciated for the flexibility it gives. The session also touches about how we can better promote Flask through education. The session finishes with the hurdles identified when getting started with web development in Python, pulled from personal teaching experience.



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2020.europython.eu/events/speaker-release-agreement/

    "
Captions: 
	00:00:06,399 --> 00:00:11,120
greetings and welcome

00:00:08,240 --> 00:00:12,480
everybody this is a talk about the

00:00:11,120 --> 00:00:15,599
django

00:00:12,480 --> 00:00:19,039
about building a jungle clone from

00:00:15,599 --> 00:00:19,039
scratch with the flask

00:00:19,119 --> 00:00:21,439
and

00:00:26,080 --> 00:00:32,960
well that is our python

00:00:29,599 --> 00:00:34,880
user groups logo i am from malchest

00:00:32,960 --> 00:00:38,559
which is a small island in the

00:00:34,880 --> 00:00:39,200
indian ocean and our user group is

00:00:38,559 --> 00:00:42,399
called the

00:00:39,200 --> 00:00:45,680
pi meg the python user group of

00:00:42,399 --> 00:00:49,680
mauritius you can view more about this

00:00:45,680 --> 00:00:53,760
on this provided link

00:00:49,680 --> 00:00:57,199
and a bit about me i am abdul rahman

00:00:53,760 --> 00:00:58,879
jahangia from well from mauritius i'm a

00:00:57,199 --> 00:01:02,399
python programmer for

00:00:58,879 --> 00:01:03,199
myself you can find my twitter you can

00:01:02,399 --> 00:01:06,400
find me on

00:01:03,199 --> 00:01:07,119
github and you can find more about me on

00:01:06,400 --> 00:01:10,840
this

00:01:07,119 --> 00:01:12,880
url i'm also a flask on organizing

00:01:10,840 --> 00:01:17,600
member

00:01:12,880 --> 00:01:17,600
yes let us begin our talk

00:01:18,640 --> 00:01:23,280
and we put in the disclaimer that

00:01:21,040 --> 00:01:26,240
anybody following this talk should

00:01:23,280 --> 00:01:27,600
know both flask and jungle should have

00:01:26,240 --> 00:01:30,400
used the floss

00:01:27,600 --> 00:01:33,040
and django to build the apps should have

00:01:30,400 --> 00:01:36,400
mainly used flask and also

00:01:33,040 --> 00:01:39,600
uh jungle to build at least some

00:01:36,400 --> 00:01:41,920
apps so that you understand what

00:01:39,600 --> 00:01:42,960
the talk is about what is going on and

00:01:41,920 --> 00:01:46,079
how

00:01:42,960 --> 00:01:47,119
this talk might be beneficial for you to

00:01:46,079 --> 00:01:50,240
what degree

00:01:47,119 --> 00:01:52,560
it is is the talk worth it so you'll be

00:01:50,240 --> 00:01:56,479
able to judge if ever you used both

00:01:52,560 --> 00:01:56,479
flask and jungle

00:01:56,880 --> 00:02:00,079
so the aba is the idea about closing

00:01:59,360 --> 00:02:04,399
cloning

00:02:00,079 --> 00:02:04,399
django it is about the seeing

00:02:04,640 --> 00:02:11,440
and what the aspects of django

00:02:08,399 --> 00:02:16,480
makes the development experience

00:02:11,440 --> 00:02:20,319
interesting django is widely popular

00:02:16,480 --> 00:02:22,720
because maybe in my opinion it's easy to

00:02:20,319 --> 00:02:23,760
to to set up it's easy to use it

00:02:22,720 --> 00:02:26,319
provides

00:02:23,760 --> 00:02:26,879
lots of functionalities out of the box

00:02:26,319 --> 00:02:29,520
and

00:02:26,879 --> 00:02:32,319
at the beginning it was used in an

00:02:29,520 --> 00:02:35,519
environment and a high pressure

00:02:32,319 --> 00:02:38,560
people liked it and

00:02:35,519 --> 00:02:40,480
we can say that most of the freelancing

00:02:38,560 --> 00:02:43,760
jobs today require jungle

00:02:40,480 --> 00:02:44,480
if you go to even a freelancer.com you

00:02:43,760 --> 00:02:47,760
go to the

00:02:44,480 --> 00:02:48,959
or ships you will find that the most of

00:02:47,760 --> 00:02:52,080
the freelancing

00:02:48,959 --> 00:02:58,000
jobs for python for web is

00:02:52,080 --> 00:02:58,000
in django so we might ask ourselves

00:02:58,080 --> 00:03:01,599
what the aspects of django makes the

00:03:00,800 --> 00:03:04,000
development

00:03:01,599 --> 00:03:04,640
experience interesting what aspects of

00:03:04,000 --> 00:03:07,280
django

00:03:04,640 --> 00:03:09,760
makes it worth it to stick with django

00:03:07,280 --> 00:03:13,040
to work with the django

00:03:09,760 --> 00:03:16,800
well in my opinion these are some

00:03:13,040 --> 00:03:19,440
aspects that are really cool

00:03:16,800 --> 00:03:19,920
these are some aspects that in this talk

00:03:19,440 --> 00:03:22,800
will

00:03:19,920 --> 00:03:23,519
will show how we can replicate those

00:03:22,800 --> 00:03:27,200
features

00:03:23,519 --> 00:03:30,000
using flask and we'll try

00:03:27,200 --> 00:03:33,120
and this one the first one is about

00:03:30,000 --> 00:03:36,480
modules well django has modules with

00:03:33,120 --> 00:03:38,319
modules granular migration that is not

00:03:36,480 --> 00:03:42,159
only migration you can control

00:03:38,319 --> 00:03:44,480
what you want to migrate single point of

00:03:42,159 --> 00:03:45,519
operation that is you don't have to run

00:03:44,480 --> 00:03:48,799
several files

00:03:45,519 --> 00:03:53,040
you you it provides a central point

00:03:48,799 --> 00:03:56,560
of operation the queries are very cool

00:03:53,040 --> 00:04:00,000
the oh the syntax of the om

00:03:56,560 --> 00:04:03,519
is very cool you also have

00:04:00,000 --> 00:04:05,040
a wide number of packages online

00:04:03,519 --> 00:04:08,159
available

00:04:05,040 --> 00:04:12,080
and you have support tools meaning

00:04:08,159 --> 00:04:15,360
some rest apis etc are presented as

00:04:12,080 --> 00:04:17,840
a product oriented packages

00:04:15,360 --> 00:04:18,720
class base views generic views context

00:04:17,840 --> 00:04:21,440
boxing

00:04:18,720 --> 00:04:22,800
and you have the admin panel the admin

00:04:21,440 --> 00:04:25,440
panel which is

00:04:22,800 --> 00:04:26,960
a wonderful experience for anyone

00:04:25,440 --> 00:04:29,840
starting out that you just

00:04:26,960 --> 00:04:30,560
get to interact with your project

00:04:29,840 --> 00:04:33,360
products

00:04:30,560 --> 00:04:35,360
uh magically like out of the box you can

00:04:33,360 --> 00:04:36,080
add product you can delete product you

00:04:35,360 --> 00:04:39,040
can

00:04:36,080 --> 00:04:41,040
manage products you can do whatever you

00:04:39,040 --> 00:04:42,479
want with your models it and you just

00:04:41,040 --> 00:04:44,720
get it free

00:04:42,479 --> 00:04:47,680
out of the box and that is something

00:04:44,720 --> 00:04:47,680
really cool

00:04:48,160 --> 00:04:52,639
well what we mean about modules is that

00:04:50,880 --> 00:04:56,080
django allows you to

00:04:52,639 --> 00:04:58,720
to to have your forms to have related

00:04:56,080 --> 00:05:00,720
form codes to have related logic to have

00:04:58,720 --> 00:05:04,160
related views to have

00:05:00,720 --> 00:05:07,759
related models to have related urls all

00:05:04,160 --> 00:05:10,000
in one place all in one folder with

00:05:07,759 --> 00:05:11,199
normally when you make when you when you

00:05:10,000 --> 00:05:14,400
run the command

00:05:11,199 --> 00:05:14,960
python python startup django you have

00:05:14,400 --> 00:05:19,199
you

00:05:14,960 --> 00:05:22,320
you have django django automatically

00:05:19,199 --> 00:05:25,520
uh oh

00:05:22,320 --> 00:05:28,880
i i might say when you run the startup

00:05:25,520 --> 00:05:29,919
command junk automatically creates for

00:05:28,880 --> 00:05:33,360
you

00:05:29,919 --> 00:05:36,800
your some some files the folder

00:05:33,360 --> 00:05:39,199
and even some codes inside so

00:05:36,800 --> 00:05:41,199
that is what we get out of out of the

00:05:39,199 --> 00:05:43,360
box with the jungle and also

00:05:41,199 --> 00:05:45,039
the modules are just there and then you

00:05:43,360 --> 00:05:48,160
have to specify

00:05:45,039 --> 00:05:50,000
that you are installing the module that

00:05:48,160 --> 00:05:53,520
is you are using the module so

00:05:50,000 --> 00:05:55,440
one it is about uh grouping your related

00:05:53,520 --> 00:05:57,120
concerns together you get it with the

00:05:55,440 --> 00:05:59,600
jungle

00:05:57,120 --> 00:06:00,720
and with modules your good is more

00:05:59,600 --> 00:06:03,600
organized is

00:06:00,720 --> 00:06:05,199
more like loosely coupled you might even

00:06:03,600 --> 00:06:07,280
share it with a friend and

00:06:05,199 --> 00:06:09,120
hopefully he'll have it on his end he

00:06:07,280 --> 00:06:12,160
can interact with

00:06:09,120 --> 00:06:15,280
with it he can use it and

00:06:12,160 --> 00:06:18,000
it is easier to get the big picture

00:06:15,280 --> 00:06:19,680
of what is going on with your project

00:06:18,000 --> 00:06:22,400
with the modules

00:06:19,680 --> 00:06:25,039
like you know this this section this

00:06:22,400 --> 00:06:28,000
section this section you know exactly

00:06:25,039 --> 00:06:28,400
where the code is found where the logic

00:06:28,000 --> 00:06:32,080
is

00:06:28,400 --> 00:06:35,440
found and i heard of the case of

00:06:32,080 --> 00:06:38,479
someone who was using django

00:06:35,440 --> 00:06:41,919
and he wrote like

00:06:38,479 --> 00:06:45,759
about over 1gb of

00:06:41,919 --> 00:06:48,560
code before someone else took over

00:06:45,759 --> 00:06:50,240
and it was undocumented why in my

00:06:48,560 --> 00:06:53,440
opinion it's because

00:06:50,240 --> 00:06:56,720
it was clear to him in his head how

00:06:53,440 --> 00:06:59,599
things work how things are organized

00:06:56,720 --> 00:07:00,840
he didn't get lost even in a 1gb could

00:06:59,599 --> 00:07:03,599
be so

00:07:00,840 --> 00:07:07,919
it modules make your your

00:07:03,599 --> 00:07:11,039
your code really organized

00:07:07,919 --> 00:07:13,840
and yes a gradual granular migration

00:07:11,039 --> 00:07:14,240
where the jungle provides you with the

00:07:13,840 --> 00:07:17,759
the

00:07:14,240 --> 00:07:19,680
migration mechanism out of the box

00:07:17,759 --> 00:07:21,280
first it gives you the ability to

00:07:19,680 --> 00:07:24,080
migrate out of the box

00:07:21,280 --> 00:07:25,840
and you can control what you want to

00:07:24,080 --> 00:07:27,759
migrate if you will not want

00:07:25,840 --> 00:07:30,319
to migrate everything that is your

00:07:27,759 --> 00:07:33,280
choice but jungle provides you

00:07:30,319 --> 00:07:35,280
with the ability to do whatever you want

00:07:33,280 --> 00:07:38,240
and

00:07:35,280 --> 00:07:39,280
what that means for example laravel

00:07:38,240 --> 00:07:42,840
laravel

00:07:39,280 --> 00:07:46,479
is a drangle-inspired framework and

00:07:42,840 --> 00:07:50,720
laravel has

00:07:46,479 --> 00:07:54,400
what we can say yes laravel was

00:07:50,720 --> 00:07:57,680
inspired by jungkook and

00:07:54,400 --> 00:08:00,160
laravel has a gradual

00:07:57,680 --> 00:08:01,680
migrations if you organize your code

00:08:00,160 --> 00:08:05,120
into modules into

00:08:01,680 --> 00:08:07,919
a you if you have a modular architecture

00:08:05,120 --> 00:08:08,960
in laravel you can choose what to

00:08:07,919 --> 00:08:12,879
migrate

00:08:08,960 --> 00:08:14,960
and this results in less pollution like

00:08:12,879 --> 00:08:16,960
you don't migrate appreciate every

00:08:14,960 --> 00:08:20,560
change at once you choose

00:08:16,960 --> 00:08:23,919
what to reflect in the database

00:08:20,560 --> 00:08:27,759
and that jungle provides

00:08:23,919 --> 00:08:32,080
out of the box and

00:08:27,759 --> 00:08:35,120
yes a single point of operation

00:08:32,080 --> 00:08:37,120
with the manage.py you can have a single

00:08:35,120 --> 00:08:40,080
file you just input the

00:08:37,120 --> 00:08:41,279
file the command that is that comes

00:08:40,080 --> 00:08:44,800
after

00:08:41,279 --> 00:08:45,920
like like you don't have to run here run

00:08:44,800 --> 00:08:50,320
that py

00:08:45,920 --> 00:08:53,440
you don't have to run a migrate that py

00:08:50,320 --> 00:08:56,320
you don't have to run and apply settings

00:08:53,440 --> 00:08:56,320
dot py

00:08:57,120 --> 00:09:04,240
and yes these are about the query

00:09:01,440 --> 00:09:05,120
jungle provides cool queries out of the

00:09:04,240 --> 00:09:07,200
box and

00:09:05,120 --> 00:09:08,560
beginners i mean people just starting

00:09:07,200 --> 00:09:12,720
out people just is

00:09:08,560 --> 00:09:16,000
starting uh it can be daunting but

00:09:12,720 --> 00:09:19,920
on the other hand it is really nice that

00:09:16,000 --> 00:09:23,279
just as you are beginning you you just

00:09:19,920 --> 00:09:28,720
you just get to use the oim just get to

00:09:23,279 --> 00:09:28,720
use the query which is really powerful

00:09:30,399 --> 00:09:33,760
yes you have powerful queries in simple

00:09:32,880 --> 00:09:36,880
lines of

00:09:33,760 --> 00:09:39,680
code and beginners get exposed to

00:09:36,880 --> 00:09:43,360
serious concepts from the beginning

00:09:39,680 --> 00:09:43,760
like uh you have you're using an oh i am

00:09:43,360 --> 00:09:46,640
as a

00:09:43,760 --> 00:09:47,200
as a beginner which is a very cool like

00:09:46,640 --> 00:09:49,839
which

00:09:47,200 --> 00:09:52,000
maybe you would have to wait for quite

00:09:49,839 --> 00:09:54,540
some times if you were

00:09:52,000 --> 00:09:55,920
through another route and

00:09:54,540 --> 00:09:58,959
[Music]

00:09:55,920 --> 00:10:00,000
the way if you if you use jungle and the

00:09:58,959 --> 00:10:04,000
way jungle is

00:10:00,000 --> 00:10:07,600
organized and the way jungle does things

00:10:04,000 --> 00:10:10,000
i can say that it has a lasting impact

00:10:07,600 --> 00:10:12,160
on the way you write good on the way

00:10:10,000 --> 00:10:13,120
you do things because you've been

00:10:12,160 --> 00:10:16,480
exposed

00:10:13,120 --> 00:10:19,839
to a nice system to a nice

00:10:16,480 --> 00:10:19,839
way of doing things

00:10:19,920 --> 00:10:27,120
and yes and jungle has a while

00:10:23,440 --> 00:10:30,839
a really wide range of choice

00:10:27,120 --> 00:10:32,880
for packages for example you have django

00:10:30,839 --> 00:10:36,000
packages

00:10:32,880 --> 00:10:39,279
which is a a an

00:10:36,000 --> 00:10:42,720
unofficial if i i remember well

00:10:39,279 --> 00:10:44,079
pacqui repository repository for

00:10:42,720 --> 00:10:47,680
packages

00:10:44,079 --> 00:10:50,959
currently it has uh more than

00:10:47,680 --> 00:10:51,519
3000 apps and that is that that is

00:10:50,959 --> 00:10:54,640
really

00:10:51,519 --> 00:10:58,240
cool which is uh it's uh

00:10:54,640 --> 00:11:01,839
it's really great that people just share

00:10:58,240 --> 00:11:05,120
their a part of the of the import of an

00:11:01,839 --> 00:11:07,680
application which you can just pull in

00:11:05,120 --> 00:11:08,880
and start using it which is it is

00:11:07,680 --> 00:11:13,360
something really

00:11:08,880 --> 00:11:16,000
amazing like uh it's it's great it's

00:11:13,360 --> 00:11:17,200
i can't describe it yes and the modules

00:11:16,000 --> 00:11:20,240
are plug and play

00:11:17,200 --> 00:11:20,720
you put it and you specify but basically

00:11:20,240 --> 00:11:24,720
it

00:11:20,720 --> 00:11:28,160
just works and

00:11:24,720 --> 00:11:31,360
that is about the packages

00:11:28,160 --> 00:11:34,959
support tools as packages for example

00:11:31,360 --> 00:11:38,320
and jungle mini packages are

00:11:34,959 --> 00:11:41,600
for debugging or for profiling

00:11:38,320 --> 00:11:44,959
or for testing your endpoints those

00:11:41,600 --> 00:11:47,040
packages are really great like they are

00:11:44,959 --> 00:11:50,480
not only

00:11:47,040 --> 00:11:54,079
for product oriented but they

00:11:50,480 --> 00:11:57,279
also like for debugging to

00:11:54,079 --> 00:12:00,560
to help you with your coding

00:11:57,279 --> 00:12:05,279
and these are some packages that

00:12:00,560 --> 00:12:08,399
you find often yes and jungle has a

00:12:05,279 --> 00:12:11,920
class based views it has

00:12:08,399 --> 00:12:15,200
some clud it gives you

00:12:11,920 --> 00:12:18,560
a nice advantage when you are using

00:12:15,200 --> 00:12:20,720
crud operations and

00:12:18,560 --> 00:12:22,800
which is really nice because you are

00:12:20,720 --> 00:12:24,800
using only jungle you are

00:12:22,800 --> 00:12:26,320
you must adapt yourself to jungkook's

00:12:24,800 --> 00:12:29,279
way of doing things and

00:12:26,320 --> 00:12:30,000
it simplifies for you many things those

00:12:29,279 --> 00:12:33,200
are

00:12:30,000 --> 00:12:37,040
some irre uh some

00:12:33,200 --> 00:12:39,279
advantages of jungle and also

00:12:37,040 --> 00:12:41,200
jungle what makes it interesting to work

00:12:39,279 --> 00:12:44,480
with the jungle is the way

00:12:41,200 --> 00:12:48,160
jungkook passes template variables

00:12:44,480 --> 00:12:52,560
as you you know just pass a dictionary

00:12:48,160 --> 00:12:55,760
and normally uh in floss you

00:12:52,560 --> 00:12:57,760
the normal way is to have optional

00:12:55,760 --> 00:13:00,880
parameters

00:12:57,760 --> 00:13:04,480
so passing template variables

00:13:00,880 --> 00:13:08,079
as dictionaries uh

00:13:04,480 --> 00:13:11,279
as a dictionary is a really nice uh

00:13:08,079 --> 00:13:13,680
idea and you have yes

00:13:11,279 --> 00:13:15,519
the admin panel out of the box with

00:13:13,680 --> 00:13:18,639
which allows you to

00:13:15,519 --> 00:13:21,920
to work with your models uh

00:13:18,639 --> 00:13:25,279
like quite easily

00:13:21,920 --> 00:13:28,240
it also you can also out of the box

00:13:25,279 --> 00:13:28,959
interact with your users you can out of

00:13:28,240 --> 00:13:31,680
the box

00:13:28,959 --> 00:13:32,720
interact with them with permission

00:13:31,680 --> 00:13:36,160
groups

00:13:32,720 --> 00:13:39,519
the admin panel is really powerful

00:13:36,160 --> 00:13:41,680
and running in production.com it has a

00:13:39,519 --> 00:13:46,000
podcast with the

00:13:41,680 --> 00:13:50,000
tan bada if i'm not mistaken

00:13:46,000 --> 00:13:52,320
and uh there we i was surprised to

00:13:50,000 --> 00:13:53,839
discover that do to know that real

00:13:52,320 --> 00:13:57,920
python actually

00:13:53,839 --> 00:14:00,839
uses the built-in django admin

00:13:57,920 --> 00:14:03,199
for its editing for everybody to

00:14:00,839 --> 00:14:05,760
collaborate and

00:14:03,199 --> 00:14:07,279
it uses like it's possible it's a

00:14:05,760 --> 00:14:10,639
possibility in this

00:14:07,279 --> 00:14:13,680
time and era to have solo divs and

00:14:10,639 --> 00:14:17,360
that's him working on the side which is

00:14:13,680 --> 00:14:20,399
really great the admin panel

00:14:17,360 --> 00:14:23,440
and this is uh and

00:14:20,399 --> 00:14:24,160
when i picked my local friends so they

00:14:23,440 --> 00:14:27,199
said that

00:14:24,160 --> 00:14:30,560
this was one point that

00:14:27,199 --> 00:14:34,399
mr dominic he said that one point with

00:14:30,560 --> 00:14:36,320
which makes it really useful to for him

00:14:34,399 --> 00:14:37,600
really interesting for him to work with

00:14:36,320 --> 00:14:40,720
the jungle

00:14:37,600 --> 00:14:41,839
is the admin panel so i guess that that

00:14:40,720 --> 00:14:45,680
mean panel

00:14:41,839 --> 00:14:48,079
really makes a difference like

00:14:45,680 --> 00:14:48,959
sometimes you just want to do another

00:14:48,079 --> 00:14:52,560
result to

00:14:48,959 --> 00:14:52,560
view what is uh happening

00:14:54,320 --> 00:15:00,240
now now it's a bit about those are

00:14:57,360 --> 00:15:02,160
like some features that we'll try to

00:15:00,240 --> 00:15:05,279
replicate in our app

00:15:02,160 --> 00:15:07,680
but this section is about uh

00:15:05,279 --> 00:15:09,440
what i don't uh in a clone that i'm

00:15:07,680 --> 00:15:12,079
building like if ever

00:15:09,440 --> 00:15:13,120
i would want to to build something like

00:15:12,079 --> 00:15:16,480
jungle from from

00:15:13,120 --> 00:15:20,160
scratch what i don't want to include

00:15:16,480 --> 00:15:23,920
so these are some points

00:15:20,160 --> 00:15:27,120
one it's about the oom well one point

00:15:23,920 --> 00:15:30,720
why why i i like flask i

00:15:27,120 --> 00:15:33,759
i don't like django so much it is about

00:15:30,720 --> 00:15:38,240
the django om which

00:15:33,759 --> 00:15:39,440
which uh well is is not a complete

00:15:38,240 --> 00:15:43,279
orange but

00:15:39,440 --> 00:15:46,560
which is the root taken by many

00:15:43,279 --> 00:15:49,839
or orms but uh compared to

00:15:46,560 --> 00:15:51,199
sql alchemy so the django om is not

00:15:49,839 --> 00:15:54,800
since is simply not

00:15:51,199 --> 00:15:55,680
up to the level you must use for complex

00:15:54,800 --> 00:15:58,160
queries

00:15:55,680 --> 00:15:58,720
it is better to go with raw sql which

00:15:58,160 --> 00:16:02,240
kind

00:15:58,720 --> 00:16:02,800
of defeats the purpose of having and

00:16:02,240 --> 00:16:06,160
using

00:16:02,800 --> 00:16:10,079
an oem and mini django

00:16:06,160 --> 00:16:13,199
divs at the one at one point they

00:16:10,079 --> 00:16:15,839
they choose a web framework just because

00:16:13,199 --> 00:16:17,040
the orm is not up to the level just

00:16:15,839 --> 00:16:20,160
because they can't

00:16:17,040 --> 00:16:23,759
use some simple join queries

00:16:20,160 --> 00:16:27,120
which is uh like uh somewhat simple

00:16:23,759 --> 00:16:27,759
in sql and if you want if ever you want

00:16:27,120 --> 00:16:32,160
to have an

00:16:27,759 --> 00:16:36,399
overview on how uh the django oem

00:16:32,160 --> 00:16:36,800
and sql algae differ and why sql alchemy

00:16:36,399 --> 00:16:40,160
is

00:16:36,800 --> 00:16:43,519
better than the jungle and the default

00:16:40,160 --> 00:16:47,040
django om then you can refer to

00:16:43,519 --> 00:16:52,160
to this article by mr omin rolanker

00:16:47,040 --> 00:16:52,160
about sql alchemy and you

00:16:54,000 --> 00:16:58,480
and what i mean about django experience

00:16:57,680 --> 00:17:01,120
dave's

00:16:58,480 --> 00:17:02,959
experience that django developers

00:17:01,120 --> 00:17:06,400
switching over

00:17:02,959 --> 00:17:10,400
uh like the oom like growing out

00:17:06,400 --> 00:17:13,439
of the orm like quitting drangle

00:17:10,400 --> 00:17:16,400
just because of the oil i mean i think

00:17:13,439 --> 00:17:18,079
if ever the django developers the the

00:17:16,400 --> 00:17:20,240
the at one point or the other they

00:17:18,079 --> 00:17:23,199
decide to cancel their om

00:17:20,240 --> 00:17:24,959
and use sql algae instead so i think it

00:17:23,199 --> 00:17:27,439
will be a very good move

00:17:24,959 --> 00:17:28,160
which will improve the adoption rate of

00:17:27,439 --> 00:17:32,480
django

00:17:28,160 --> 00:17:36,400
and uh it will really properly the

00:17:32,480 --> 00:17:39,600
really nice and though it is uh

00:17:36,400 --> 00:17:42,240
undoubtedly very popular now

00:17:39,600 --> 00:17:44,960
but this is what the author of peewee

00:17:42,240 --> 00:17:49,039
has to say that

00:17:44,960 --> 00:17:52,799
he used the django before but uh

00:17:49,039 --> 00:17:56,200
being a veteran sql user he didn't

00:17:52,799 --> 00:17:59,440
uh he didn't feel

00:17:56,200 --> 00:18:02,880
comfortable comfortable with the default

00:17:59,440 --> 00:18:02,880
jungle oim

00:18:03,280 --> 00:18:06,799
that is him and

00:18:07,200 --> 00:18:14,160
you know when when a and om is great

00:18:11,120 --> 00:18:16,480
when for a question for example has

00:18:14,160 --> 00:18:17,840
anyone regretted using sql alchemy and

00:18:16,480 --> 00:18:21,760
this user

00:18:17,840 --> 00:18:24,880
who has been writing sql for

00:18:21,760 --> 00:18:28,080
quite some time he has to say that

00:18:24,880 --> 00:18:31,120
he searched rescue alchemy and he just

00:18:28,080 --> 00:18:34,320
doesn't miss uh raw

00:18:31,120 --> 00:18:35,280
sql since the last two years whether

00:18:34,320 --> 00:18:38,320
your library is

00:18:35,280 --> 00:18:40,559
great even for design when someone

00:18:38,320 --> 00:18:43,280
requests what disadvantages

00:18:40,559 --> 00:18:44,240
you get you get advantages you get

00:18:43,280 --> 00:18:47,919
someone who has been

00:18:44,240 --> 00:18:51,520
using raw sql turning to

00:18:47,919 --> 00:18:55,520
sql alchemy and of course sql alchemy

00:18:51,520 --> 00:18:59,039
gives you control over and flexibility

00:18:55,520 --> 00:19:02,480
over your your objects

00:18:59,039 --> 00:19:03,440
and uh yes when you use jungle so you

00:19:02,480 --> 00:19:07,120
have

00:19:03,440 --> 00:19:10,400
some default apps coming along

00:19:07,120 --> 00:19:13,200
tag some default tables

00:19:10,400 --> 00:19:13,679
coming along tagging along like you

00:19:13,200 --> 00:19:15,600
haven't

00:19:13,679 --> 00:19:17,600
yet is started too good but your

00:19:15,600 --> 00:19:19,919
database is already filled

00:19:17,600 --> 00:19:22,240
but i know it's the case with even

00:19:19,919 --> 00:19:26,160
wordpress etc but

00:19:22,240 --> 00:19:29,200
if you want to to to to have a clean

00:19:26,160 --> 00:19:32,799
look at your database so you're off with

00:19:29,200 --> 00:19:37,280
uh with you start with

00:19:32,799 --> 00:19:40,559
some some some some tables and

00:19:37,280 --> 00:19:41,919
one confusing point uh when you you

00:19:40,559 --> 00:19:45,120
teach django

00:19:41,919 --> 00:19:49,120
it is about the url so you have

00:19:45,120 --> 00:19:51,360
several urls.py and you ask

00:19:49,120 --> 00:19:52,400
students you ask people you ask

00:19:51,360 --> 00:19:55,640
attendees

00:19:52,400 --> 00:19:57,200
to modify such and such thing in the

00:19:55,640 --> 00:20:00,080
url.py but

00:19:57,200 --> 00:20:00,480
ins they end up modifying another urls

00:20:00,080 --> 00:20:04,240
that be

00:20:00,480 --> 00:20:06,159
why they end up like it's it's difficult

00:20:04,240 --> 00:20:09,280
to differentiate between

00:20:06,159 --> 00:20:10,880
those two like oh there's there are

00:20:09,280 --> 00:20:13,679
actually two

00:20:10,880 --> 00:20:14,799
types of urls that by one is for the

00:20:13,679 --> 00:20:18,159
modules and one

00:20:14,799 --> 00:20:21,200
is uh actually for the whole app

00:20:18,159 --> 00:20:23,760
to to map the the views but uh

00:20:21,200 --> 00:20:25,679
you it's not a problem for experienced

00:20:23,760 --> 00:20:29,039
users obviously

00:20:25,679 --> 00:20:29,600
and also why i what i know i i don't

00:20:29,039 --> 00:20:32,799
like

00:20:29,600 --> 00:20:36,159
with the jungle it is

00:20:32,799 --> 00:20:39,280
about having all apps on the same level

00:20:36,159 --> 00:20:40,000
you have your primary app on on on one

00:20:39,280 --> 00:20:42,559
level

00:20:40,000 --> 00:20:43,679
and all all the apps you have it on the

00:20:42,559 --> 00:20:46,640
same level

00:20:43,679 --> 00:20:49,200
and you have to remind yourself like

00:20:46,640 --> 00:20:53,280
what is the name of my application

00:20:49,200 --> 00:20:57,039
and oh those are not my primary

00:20:53,280 --> 00:20:57,919
app so you have to to to kind of remind

00:20:57,039 --> 00:21:01,440
yourself you

00:20:57,919 --> 00:21:04,799
have to kind of because

00:21:01,440 --> 00:21:07,840
as you put new applications your

00:21:04,799 --> 00:21:09,840
your primary app moves up and down but

00:21:07,840 --> 00:21:12,880
that should not happen at least

00:21:09,840 --> 00:21:12,880
according to me

00:21:13,280 --> 00:21:20,559
yes now let us talk about our

00:21:17,039 --> 00:21:21,200
concretely speaking about our prototype

00:21:20,559 --> 00:21:25,039
and

00:21:21,200 --> 00:21:27,600
how we we want to implement it

00:21:25,039 --> 00:21:30,159
the the features we we discussed can we

00:21:27,600 --> 00:21:33,520
implement it how to implement it

00:21:30,159 --> 00:21:36,720
but it is to be to be noted

00:21:33,520 --> 00:21:40,640
that we choose a

00:21:36,720 --> 00:21:44,240
with no we choose it as near as possible

00:21:40,640 --> 00:21:47,520
to to jungle how a jungle application is

00:21:44,240 --> 00:21:50,320
but obviously we preferred the to keep

00:21:47,520 --> 00:21:51,360
at least one aspect of the flask spirit

00:21:50,320 --> 00:21:54,000
floss

00:21:51,360 --> 00:21:55,120
default working which is having the

00:21:54,000 --> 00:21:57,840
decorator above

00:21:55,120 --> 00:21:58,960
the function but we also discussed

00:21:57,840 --> 00:22:02,720
implementing class

00:21:58,960 --> 00:22:04,799
based views in flask yes i said the

00:22:02,720 --> 00:22:05,280
jungle clone from scratch using floss

00:22:04,799 --> 00:22:09,440
and not

00:22:05,280 --> 00:22:12,960
django clone from scratch using python

00:22:09,440 --> 00:22:16,400
this is the architecture i can say

00:22:12,960 --> 00:22:18,880
of the application

00:22:16,400 --> 00:22:22,640
well you have app.by manage.py

00:22:18,880 --> 00:22:25,760
settings.by wsgi.py but you also have

00:22:22,640 --> 00:22:27,360
you and you have a for a folder called

00:22:25,760 --> 00:22:30,159
modules

00:22:27,360 --> 00:22:30,960
in and in the folder called modules

00:22:30,159 --> 00:22:34,960
every

00:22:30,960 --> 00:22:37,600
module has to be in a folder

00:22:34,960 --> 00:22:39,679
and inside the module folder you have

00:22:37,600 --> 00:22:43,200
templates folder you have

00:22:39,679 --> 00:22:46,799
models forms and view files and then

00:22:43,200 --> 00:22:51,679
inside the templates folder you have

00:22:46,799 --> 00:22:51,679
another folder called blog same as

00:22:52,720 --> 00:23:00,320
same as the module name

00:22:56,640 --> 00:23:02,799
and that is why

00:23:00,320 --> 00:23:03,440
yes you might wonder in the last slide

00:23:02,799 --> 00:23:06,480
why

00:23:03,440 --> 00:23:10,640
in the templates folder there is

00:23:06,480 --> 00:23:15,679
another folder called blog it is because

00:23:10,640 --> 00:23:19,840
when flask will look for index.html

00:23:15,679 --> 00:23:23,520
and if it defines several index.html

00:23:19,840 --> 00:23:26,960
so it won't return what you expect it to

00:23:23,520 --> 00:23:30,320
return but if you put like some kind of

00:23:26,960 --> 00:23:35,200
name spacing in the templates if you

00:23:30,320 --> 00:23:39,120
put blog if you put like

00:23:35,200 --> 00:23:42,480
a full denim blog so you can refer to

00:23:39,120 --> 00:23:45,679
this particular html as

00:23:42,480 --> 00:23:48,960
blog slash index.html

00:23:45,679 --> 00:23:52,240
which will be more clear in the coming

00:23:48,960 --> 00:23:54,880
slides yes

00:23:52,240 --> 00:23:55,960
this is for render template so you don't

00:23:54,880 --> 00:23:59,720
just don't render

00:23:55,960 --> 00:24:02,480
index.html but you render blog slash

00:23:59,720 --> 00:24:05,840
index.html and the app knows

00:24:02,480 --> 00:24:08,320
exactly which index.html you have been

00:24:05,840 --> 00:24:08,320
pointing

00:24:10,799 --> 00:24:14,000
and the project which prompts prompted

00:24:13,520 --> 00:24:18,159
me

00:24:14,000 --> 00:24:20,400
to to write to to give this talk

00:24:18,159 --> 00:24:21,200
it is a project called shopu which

00:24:20,400 --> 00:24:25,039
stands for

00:24:21,200 --> 00:24:29,120
shop plus python plus open

00:24:25,039 --> 00:24:32,159
and it is an android ongoing experiment

00:24:29,120 --> 00:24:35,760
yes it is an experiment it is an ongoing

00:24:32,159 --> 00:24:37,039
experiment in replicating the features

00:24:35,760 --> 00:24:40,960
of jungle

00:24:37,039 --> 00:24:44,559
but more specifically about enhancing

00:24:40,960 --> 00:24:47,600
the flask development

00:24:44,559 --> 00:24:49,840
experience further modules came along

00:24:47,600 --> 00:24:52,320
this came along that came along

00:24:49,840 --> 00:24:54,720
and i say that well i'm having the

00:24:52,320 --> 00:24:55,679
features of django i was looking for it

00:24:54,720 --> 00:24:58,960
i'm having it

00:24:55,679 --> 00:25:02,880
but the spirit behind is improving

00:24:58,960 --> 00:25:06,400
development experience using flask

00:25:02,880 --> 00:25:08,480
and you might be wondering well it's me

00:25:06,400 --> 00:25:11,440
who is saying that

00:25:08,480 --> 00:25:13,520
this app that this project i have is a

00:25:11,440 --> 00:25:16,159
django cloud

00:25:13,520 --> 00:25:17,120
and like we clone the features of django

00:25:16,159 --> 00:25:21,120
in it but

00:25:17,120 --> 00:25:24,480
is it really the is it really convincing

00:25:21,120 --> 00:25:25,520
is it a convincing django clone well i

00:25:24,480 --> 00:25:28,400
was talking to

00:25:25,520 --> 00:25:30,080
someone on our discord when he mentioned

00:25:28,400 --> 00:25:33,440
the project how he felt

00:25:30,080 --> 00:25:34,640
how we we were going over how a bit

00:25:33,440 --> 00:25:38,080
about how he found

00:25:34,640 --> 00:25:41,360
i found the project

00:25:38,080 --> 00:25:44,400
and then i said to him that well in this

00:25:41,360 --> 00:25:47,520
project we copied lots of django

00:25:44,400 --> 00:25:50,799
features and he was like oh

00:25:47,520 --> 00:25:54,960
really it's not that django

00:25:50,799 --> 00:25:57,600
and i said no that's not django

00:25:54,960 --> 00:25:59,679
and then he said well he was amazed that

00:25:57,600 --> 00:26:04,000
it's floss and then i explained to him

00:25:59,679 --> 00:26:07,200
different features that we copied and

00:26:04,000 --> 00:26:10,320
yes and so here's how we did it

00:26:07,200 --> 00:26:14,400
so here is how to implement

00:26:10,320 --> 00:26:16,799
django modules in flask

00:26:14,400 --> 00:26:18,720
well this is the architecture that you

00:26:16,799 --> 00:26:21,919
have

00:26:18,720 --> 00:26:25,120
just a few moments for you to

00:26:21,919 --> 00:26:27,279
to analyze it to see that there is a

00:26:25,120 --> 00:26:29,039
folder called modules and inside it a

00:26:27,279 --> 00:26:29,919
folder called blog and inside that

00:26:29,039 --> 00:26:33,120
folder could

00:26:29,919 --> 00:26:37,440
blog there are your templates models

00:26:33,120 --> 00:26:40,880
forms and view now this is the layout

00:26:37,440 --> 00:26:44,640
how concretely do you achieve

00:26:40,880 --> 00:26:47,840
modules this is what we'll see

00:26:44,640 --> 00:26:48,400
so let us see about referencing let's

00:26:47,840 --> 00:26:51,679
see

00:26:48,400 --> 00:26:55,279
in in how do we reference

00:26:51,679 --> 00:26:58,080
a model from plug in modules to

00:26:55,279 --> 00:26:58,720
view that py let's say in modules 2 we

00:26:58,080 --> 00:27:02,000
have a

00:26:58,720 --> 00:27:05,360
view.py so how do we refer

00:27:02,000 --> 00:27:09,240
to a model which is found in blog

00:27:05,360 --> 00:27:10,400
so that's how we do it we say from

00:27:09,240 --> 00:27:13,760
modules.blog.models

00:27:10,400 --> 00:27:14,320
import let's say model called pos so we

00:27:13,760 --> 00:27:18,320
import

00:27:14,320 --> 00:27:20,960
post and then let's say

00:27:18,320 --> 00:27:22,159
we are in blog in view we want to call

00:27:20,960 --> 00:27:24,080
in which you will find

00:27:22,159 --> 00:27:26,240
found in models like we are in the same

00:27:24,080 --> 00:27:29,120
folder how do we call it

00:27:26,240 --> 00:27:32,080
well we can call it generally from

00:27:29,120 --> 00:27:35,200
modules that block.models import post

00:27:32,080 --> 00:27:37,200
or we can do as jungle does from that

00:27:35,200 --> 00:27:40,320
model's import bus

00:27:37,200 --> 00:27:41,360
and also of course in view.py if you

00:27:40,320 --> 00:27:44,640
want to call

00:27:41,360 --> 00:27:49,600
something in forms.py you just say

00:27:44,640 --> 00:27:49,600
from that forms import your fall

00:27:49,760 --> 00:27:57,200
now how do we

00:27:52,799 --> 00:28:01,039
do register blueprints how do we

00:27:57,200 --> 00:28:04,559
achieve the plug and play behavior

00:28:01,039 --> 00:28:07,840
well we must uh we must run

00:28:04,559 --> 00:28:11,039
now yes you do it like this

00:28:07,840 --> 00:28:14,159
you you have your let's say a blueprint

00:28:11,039 --> 00:28:17,360
called people you say people blueprint

00:28:14,159 --> 00:28:19,679
you the name of the blueprint is people

00:28:17,360 --> 00:28:20,799
you template folder you put it as

00:28:19,679 --> 00:28:23,760
templates because

00:28:20,799 --> 00:28:25,440
remember we put out we name our

00:28:23,760 --> 00:28:28,559
templates folder template

00:28:25,440 --> 00:28:31,520
and the url prefix we put it as is slash

00:28:28,559 --> 00:28:33,039
people so you will see people repeating

00:28:31,520 --> 00:28:36,000
at three places

00:28:33,039 --> 00:28:37,600
one is in people blueprint so that

00:28:36,000 --> 00:28:38,960
that's one place in the first place

00:28:37,600 --> 00:28:41,520
where there is people

00:28:38,960 --> 00:28:42,640
the second is the name of the blueprint

00:28:41,520 --> 00:28:47,440
and the third

00:28:42,640 --> 00:28:50,399
is the url prefix and of course

00:28:47,440 --> 00:28:51,120
this is for the view but the modules

00:28:50,399 --> 00:28:55,360
folder

00:28:51,120 --> 00:28:57,919
is also named people and then

00:28:55,360 --> 00:29:00,960
not for every app but we have this

00:28:57,919 --> 00:29:04,320
snippet in our app.ppy

00:29:00,960 --> 00:29:07,919
which goes over every folder found in

00:29:04,320 --> 00:29:11,520
modules and then imports

00:29:07,919 --> 00:29:14,640
modules dot the module's name

00:29:11,520 --> 00:29:15,919
dot view it goes into the modules

00:29:14,640 --> 00:29:19,679
view.py

00:29:15,919 --> 00:29:22,880
and then it imports the blueprint

00:29:19,679 --> 00:29:26,320
which is of course named same

00:29:22,880 --> 00:29:30,080
as which is a prefixed

00:29:26,320 --> 00:29:33,200
same as the folder's name so with this

00:29:30,080 --> 00:29:37,120
little trick we would do register

00:29:33,200 --> 00:29:40,799
blueprints no need to to to import and

00:29:37,120 --> 00:29:44,159
to register that just you just

00:29:40,799 --> 00:29:44,880
lose time it looks for just but just you

00:29:44,159 --> 00:29:47,919
have to

00:29:44,880 --> 00:29:50,080
to to make this uh this

00:29:47,919 --> 00:29:52,240
convention you have to be consistent

00:29:50,080 --> 00:29:54,720
with this convective invention

00:29:52,240 --> 00:29:55,520
and using this snippet you want to

00:29:54,720 --> 00:29:58,559
register

00:29:55,520 --> 00:30:00,080
your blueprints and then you just have

00:29:58,559 --> 00:30:03,679
to restart your server

00:30:00,080 --> 00:30:05,760
you get a plug and play behavior you get

00:30:03,679 --> 00:30:06,880
really plug and play behavior of course

00:30:05,760 --> 00:30:09,200
you have to migrate

00:30:06,880 --> 00:30:10,159
you have to migrate don't forget but you

00:30:09,200 --> 00:30:12,720
what's what

00:30:10,159 --> 00:30:14,240
what is more important is that you get

00:30:12,720 --> 00:30:17,880
the plug and play

00:30:14,240 --> 00:30:19,279
behavior and now how do we implement

00:30:17,880 --> 00:30:22,720
manage.py

00:30:19,279 --> 00:30:26,240
well i'm skipping imports but normally

00:30:22,720 --> 00:30:29,120
i'm using flash script you have uh with

00:30:26,240 --> 00:30:29,760
just these three lines you get your

00:30:29,120 --> 00:30:34,159
whole

00:30:29,760 --> 00:30:37,440
manage your whole migration management

00:30:34,159 --> 00:30:39,520
commands and you need the database when

00:30:37,440 --> 00:30:40,559
you migrate and upgrade those two

00:30:39,520 --> 00:30:44,960
together

00:30:40,559 --> 00:30:47,840
form the migration command

00:30:44,960 --> 00:30:50,240
and of course you you have the run

00:30:47,840 --> 00:30:51,679
server you define it as search you have

00:30:50,240 --> 00:30:55,279
the run debug

00:30:51,679 --> 00:30:58,159
and then here you have some custom

00:30:55,279 --> 00:30:59,440
commands you put you say that uh if

00:30:58,159 --> 00:31:01,840
python is py

00:30:59,440 --> 00:31:04,240
if the next argument is run server so

00:31:01,840 --> 00:31:06,720
you just apply the run server

00:31:04,240 --> 00:31:07,840
you just call the run server function

00:31:06,720 --> 00:31:10,880
run debug

00:31:07,840 --> 00:31:11,840
and then start app what does startup

00:31:10,880 --> 00:31:14,960
does

00:31:11,840 --> 00:31:18,080
is that instead of you

00:31:14,960 --> 00:31:20,799
remember what to keep consistent

00:31:18,080 --> 00:31:22,559
in creating modules installed app is

00:31:20,799 --> 00:31:24,720
just a helper function

00:31:22,559 --> 00:31:25,919
it just created app files for you the

00:31:24,720 --> 00:31:28,960
folder for you

00:31:25,919 --> 00:31:31,679
and the file content for you such as

00:31:28,960 --> 00:31:32,640
it's instead of your creating manually

00:31:31,679 --> 00:31:35,440
which

00:31:32,640 --> 00:31:38,159
effectively by the way replicates the

00:31:35,440 --> 00:31:42,000
django's behavior of python manage.py

00:31:38,159 --> 00:31:45,760
is thought up and the name of the app

00:31:42,000 --> 00:31:49,919
and here it is the the the

00:31:45,760 --> 00:31:52,720
running the commands yes i was saying

00:31:49,919 --> 00:31:54,080
with them with our manager py with some

00:31:52,720 --> 00:31:56,399
simple line of code

00:31:54,080 --> 00:31:57,279
we are we already get run server we

00:31:56,399 --> 00:32:00,480
already

00:31:57,279 --> 00:32:01,519
crea have the a command to create our

00:32:00,480 --> 00:32:04,399
apps

00:32:01,519 --> 00:32:04,399
and uh

00:32:05,039 --> 00:32:09,039
it's a python manager.py is still tap

00:32:07,360 --> 00:32:12,480
robot it's a typo that

00:32:09,039 --> 00:32:16,080
i made so be careful about this yes

00:32:12,480 --> 00:32:18,799
and implementing context uh passing

00:32:16,080 --> 00:32:19,760
normally in flask you you render the

00:32:18,799 --> 00:32:23,039
template

00:32:19,760 --> 00:32:26,240
and then you say for template variable

00:32:23,039 --> 00:32:29,360
you say pencils is equal to five pens

00:32:26,240 --> 00:32:32,399
is equal to 4 like

00:32:29,360 --> 00:32:35,919
like that but you know it

00:32:32,399 --> 00:32:38,799
it is not very neat to to pause uh

00:32:35,919 --> 00:32:39,679
parameter parameters to pause pause

00:32:38,799 --> 00:32:42,960
pause

00:32:39,679 --> 00:32:46,399
it's not very neat what you can do is

00:32:42,960 --> 00:32:46,799
you put it in a dictionary okay and you

00:32:46,399 --> 00:32:52,640
just

00:32:46,799 --> 00:32:52,640
unpack it in your render template

00:32:52,720 --> 00:32:55,919
another thing which you can do is to

00:32:54,799 --> 00:32:58,159
have

00:32:55,919 --> 00:32:58,960
for example if you have some template

00:32:58,159 --> 00:33:01,919
variables

00:32:58,960 --> 00:33:02,640
that needs to be shared among every

00:33:01,919 --> 00:33:05,279
template

00:33:02,640 --> 00:33:07,600
for example some some some values in the

00:33:05,279 --> 00:33:08,480
footer some values here some values

00:33:07,600 --> 00:33:12,640
there

00:33:08,480 --> 00:33:16,559
so you can have a global default values

00:33:12,640 --> 00:33:19,760
and then in inside each and every

00:33:16,559 --> 00:33:23,039
uh view function

00:33:19,760 --> 00:33:26,080
what you do you copy the

00:33:23,039 --> 00:33:29,440
the the default uh

00:33:26,080 --> 00:33:32,399
dictionary and then you update it

00:33:29,440 --> 00:33:33,519
and then you you unpack it so that you

00:33:32,399 --> 00:33:37,039
get a similar

00:33:33,519 --> 00:33:40,240
behavior to django's context

00:33:37,039 --> 00:33:41,120
uh dictionaries i know in django some

00:33:40,240 --> 00:33:44,159
people

00:33:41,120 --> 00:33:45,840
they like to pass in locals like you

00:33:44,159 --> 00:33:49,120
they don't want to define

00:33:45,840 --> 00:33:51,519
any any you know

00:33:49,120 --> 00:33:54,240
variables but i think doing this in this

00:33:51,519 --> 00:33:58,240
way like you specify each variable

00:33:54,240 --> 00:33:58,240
so i think it's more explicit

00:33:58,720 --> 00:34:05,360
now uh what can we what can we customize

00:34:02,320 --> 00:34:07,919
further one it is about the admin panel

00:34:05,360 --> 00:34:11,520
i know that flaws has a flask admin

00:34:07,919 --> 00:34:11,919
but and what is the beauty of lost admin

00:34:11,520 --> 00:34:15,440
is

00:34:11,919 --> 00:34:18,800
that it doesn't create your tables etc

00:34:15,440 --> 00:34:22,000
but it it it is a manager

00:34:18,800 --> 00:34:25,839
and effective manager with which its aim

00:34:22,000 --> 00:34:28,879
is to replicate the the jungle

00:34:25,839 --> 00:34:32,000
the jungle admin panel i feel that

00:34:28,879 --> 00:34:35,040
uh it it aims to replicate it

00:34:32,000 --> 00:34:38,800
but of course it's not exactly as

00:34:35,040 --> 00:34:42,159
the admin panel so what is the solution

00:34:38,800 --> 00:34:45,520
is you go to do to

00:34:42,159 --> 00:34:47,839
to the empty tables that

00:34:45,520 --> 00:34:50,240
jungle due to the tables that jungle

00:34:47,839 --> 00:34:50,960
creates by default you see what fields

00:34:50,240 --> 00:34:53,919
there are

00:34:50,960 --> 00:34:55,119
and you will get an idea about how

00:34:53,919 --> 00:34:58,240
exactly

00:34:55,119 --> 00:35:01,119
jungle managers permission

00:34:58,240 --> 00:35:02,160
how jungle managers permission groups

00:35:01,119 --> 00:35:04,800
etc

00:35:02,160 --> 00:35:05,599
you will like how does it manage

00:35:04,800 --> 00:35:08,079
everything

00:35:05,599 --> 00:35:11,040
you will see the you can see it if it's

00:35:08,079 --> 00:35:13,520
sqlite you you go to sqlite browser

00:35:11,040 --> 00:35:15,359
and you see the tables or whatever

00:35:13,520 --> 00:35:16,720
database you are using see the default

00:35:15,359 --> 00:35:19,760
tables for django

00:35:16,720 --> 00:35:20,160
and try to implement one for you and of

00:35:19,760 --> 00:35:23,280
course

00:35:20,160 --> 00:35:25,760
share it with us afterwards yes

00:35:23,280 --> 00:35:28,000
if you are really adamant on having your

00:35:25,760 --> 00:35:30,720
url started py

00:35:28,000 --> 00:35:31,839
you you you say well this talk is uh

00:35:30,720 --> 00:35:34,960
bluffing it's

00:35:31,839 --> 00:35:36,320
it misses the ul's that py bought and

00:35:34,960 --> 00:35:39,200
it's not complete

00:35:36,320 --> 00:35:40,000
well flaws uh is specifically

00:35:39,200 --> 00:35:43,280
implemented

00:35:40,000 --> 00:35:45,359
for users who want the jungle behavior

00:35:43,280 --> 00:35:48,800
to have uh

00:35:45,359 --> 00:35:50,640
us that'd be why so to floss provides a

00:35:48,800 --> 00:35:54,079
class based views

00:35:50,640 --> 00:35:57,200
so here it is a here's a

00:35:54,079 --> 00:35:58,560
simple snippet taken from the floss the

00:35:57,200 --> 00:36:03,520
direct from the flask

00:35:58,560 --> 00:36:07,680
talks which is how you can do it

00:36:03,520 --> 00:36:11,280
and uh yes one thing uh i think it uh

00:36:07,680 --> 00:36:14,560
it's worth exploring it is about

00:36:11,280 --> 00:36:17,839
metadata well what do i mean by

00:36:14,560 --> 00:36:21,920
metadata it is for example you have

00:36:17,839 --> 00:36:26,079
packages okay you have uh packages

00:36:21,920 --> 00:36:29,119
and you want to include some more info

00:36:26,079 --> 00:36:32,000
about maybe what other package you need

00:36:29,119 --> 00:36:33,599
to install so that this package works

00:36:32,000 --> 00:36:37,520
maybe you can have under the

00:36:33,599 --> 00:36:40,640
another attribute another json attribute

00:36:37,520 --> 00:36:44,079
well you have the name you have the type

00:36:40,640 --> 00:36:47,280
show normally in shopu you can show or

00:36:44,079 --> 00:36:50,000
not show modules

00:36:47,280 --> 00:36:52,240
normally we have a control panel and we

00:36:50,000 --> 00:36:55,599
have different

00:36:52,240 --> 00:36:58,880
icons when you click it will it will

00:36:55,599 --> 00:37:01,920
it will link you to the index

00:36:58,880 --> 00:37:05,680
of the app and

00:37:01,920 --> 00:37:08,720
sure we choose to whether to display

00:37:05,680 --> 00:37:13,119
the app or not it's a bit

00:37:08,720 --> 00:37:16,640
we we took that concept we were inspired

00:37:13,119 --> 00:37:19,280
by android where an application can ask

00:37:16,640 --> 00:37:19,839
not to show its icon on the on on your

00:37:19,280 --> 00:37:22,960
phone

00:37:19,839 --> 00:37:26,160
which viruses abuse so that

00:37:22,960 --> 00:37:27,440
they they pass like incognito you you

00:37:26,160 --> 00:37:29,680
you don't know if they

00:37:27,440 --> 00:37:30,720
if they exist on your phone because they

00:37:29,680 --> 00:37:33,760
ask

00:37:30,720 --> 00:37:35,599
not to not to show the the icon but here

00:37:33,760 --> 00:37:36,640
we we put it because maybe some

00:37:35,599 --> 00:37:39,680
functional

00:37:36,640 --> 00:37:42,720
packages it doesn't need to to show up

00:37:39,680 --> 00:37:45,680
in uh to show up so that's

00:37:42,720 --> 00:37:46,240
a bit uh half shoe and then the font

00:37:45,680 --> 00:37:49,359
awesome

00:37:46,240 --> 00:37:52,400
icon which uh flask i build also

00:37:49,359 --> 00:37:55,680
users it be the same idea and then you

00:37:52,400 --> 00:37:58,240
you specify the the url prefix here

00:37:55,680 --> 00:37:58,720
so you get a bit more control but it

00:37:58,240 --> 00:38:02,720
also

00:37:58,720 --> 00:38:05,440
provides some more some more advantages

00:38:02,720 --> 00:38:06,400
some more options of what you can do

00:38:05,440 --> 00:38:10,000
with it in

00:38:06,400 --> 00:38:10,880
in the future and then what once you

00:38:10,000 --> 00:38:13,920
have the your

00:38:10,880 --> 00:38:16,640
info the json file in in your

00:38:13,920 --> 00:38:17,280
normal uh that's a quick fix that's a

00:38:16,640 --> 00:38:20,480
quick hack

00:38:17,280 --> 00:38:23,680
that's a proof of concept it's it's

00:38:20,480 --> 00:38:26,800
it needs to be improved certainly but

00:38:23,680 --> 00:38:27,599
that's how you can do it like you you

00:38:26,800 --> 00:38:31,280
have the

00:38:27,599 --> 00:38:34,560
directory path of the file

00:38:31,280 --> 00:38:37,440
and then you open the directory first uh

00:38:34,560 --> 00:38:38,320
path you append to it your info.json you

00:38:37,440 --> 00:38:40,880
can use

00:38:38,320 --> 00:38:43,200
uh os that bother join if you if you

00:38:40,880 --> 00:38:46,560
wish for the file you get the info

00:38:43,200 --> 00:38:48,640
and then you have the url prefix here

00:38:46,560 --> 00:38:50,400
you get it from your info file even the

00:38:48,640 --> 00:38:51,839
name you could have got from the info

00:38:50,400 --> 00:38:54,640
file that you would have to

00:38:51,839 --> 00:38:55,359
to be consistent with with it and maybe

00:38:54,640 --> 00:38:58,480
you can

00:38:55,359 --> 00:39:00,000
twerk it further etc but that's a that's

00:38:58,480 --> 00:39:02,480
a proof of concept

00:39:00,000 --> 00:39:03,599
that you can use you can have some

00:39:02,480 --> 00:39:06,960
metadata

00:39:03,599 --> 00:39:09,680
in your in your in your packages

00:39:06,960 --> 00:39:09,680
and uh

00:39:10,000 --> 00:39:17,280
yes for default users like how do you

00:39:13,520 --> 00:39:19,839
add new users that also of course the

00:39:17,280 --> 00:39:21,440
manage.py is very easy to to add your

00:39:19,839 --> 00:39:24,320
own custom function

00:39:21,440 --> 00:39:25,200
but you can also make it so that

00:39:24,320 --> 00:39:28,119
whenever

00:39:25,200 --> 00:39:29,280
you create a new project there are some

00:39:28,119 --> 00:39:31,599
initializations

00:39:29,280 --> 00:39:33,280
that get done you can have for example

00:39:31,599 --> 00:39:36,800
an initialize command

00:39:33,280 --> 00:39:39,520
that allows you to have some basis

00:39:36,800 --> 00:39:43,119
some some basic things set up such as

00:39:39,520 --> 00:39:46,640
adding some a new user any function

00:39:43,119 --> 00:39:48,640
you add the add user good and then you

00:39:46,640 --> 00:39:52,240
have a json where you have

00:39:48,640 --> 00:39:55,119
several you know users with name and

00:39:52,240 --> 00:39:55,520
and email addresses etc which you get

00:39:55,119 --> 00:39:58,960
which

00:39:55,520 --> 00:40:01,520
gets added by default in your

00:39:58,960 --> 00:40:02,800
database so that you can use them out of

00:40:01,520 --> 00:40:05,440
the box to test

00:40:02,800 --> 00:40:08,319
or if you implemented the panel to be

00:40:05,440 --> 00:40:11,280
able to use it

00:40:08,319 --> 00:40:12,000
in spontaneously and to conclude we can

00:40:11,280 --> 00:40:15,359
say that

00:40:12,000 --> 00:40:18,560
this proof of concept that works

00:40:15,359 --> 00:40:20,880
yes that works uh we have

00:40:18,560 --> 00:40:22,240
what do we have what what django

00:40:20,880 --> 00:40:24,640
features do we have

00:40:22,240 --> 00:40:25,520
one these modules with forms models

00:40:24,640 --> 00:40:27,880
views and

00:40:25,520 --> 00:40:29,200
we showed how you can implement your own

00:40:27,880 --> 00:40:31,520
urls.py

00:40:29,200 --> 00:40:32,560
if you ever want and of course your

00:40:31,520 --> 00:40:35,200
templates

00:40:32,560 --> 00:40:36,240
how to make modules plug and play just

00:40:35,200 --> 00:40:38,960
like you would do

00:40:36,240 --> 00:40:40,319
with with the jungle how to make mutual

00:40:38,960 --> 00:40:42,400
support metadata

00:40:40,319 --> 00:40:43,839
how to get the run server command how to

00:40:42,400 --> 00:40:47,440
apply migrations

00:40:43,839 --> 00:40:50,640
how to have the startup command how to

00:40:47,440 --> 00:40:53,280
have how to pass context and also

00:40:50,640 --> 00:40:54,079
exploring about the generic views how

00:40:53,280 --> 00:40:56,800
clo

00:40:54,079 --> 00:40:57,200
floss provides out-of-the-box support

00:40:56,800 --> 00:41:00,240
for

00:40:57,200 --> 00:41:03,359
generic views if ever you you want and

00:41:00,240 --> 00:41:07,040
uh okay i i think i

00:41:03,359 --> 00:41:09,599
i i just repeated it over there

00:41:07,040 --> 00:41:12,160
but the the point below it's about

00:41:09,599 --> 00:41:15,040
having default users default settings

00:41:12,160 --> 00:41:18,000
that you can use out of the box how to

00:41:15,040 --> 00:41:18,000
customize it

00:41:18,640 --> 00:41:24,800
yes and if you ask me how to teach

00:41:21,920 --> 00:41:25,359
uh web programming how to how to to

00:41:24,800 --> 00:41:28,640
teach

00:41:25,359 --> 00:41:29,280
like back-end programming i would start

00:41:28,640 --> 00:41:31,680
within

00:41:29,280 --> 00:41:32,880
the with a dot d but a thorough

00:41:31,680 --> 00:41:36,240
introduction

00:41:32,880 --> 00:41:39,520
is thorough explanation of api

00:41:36,240 --> 00:41:42,960
of requests of servers and then

00:41:39,520 --> 00:41:43,599
to teach people how to be behind the

00:41:42,960 --> 00:41:46,319
scenes

00:41:43,599 --> 00:41:48,640
them implementing that same thing they

00:41:46,319 --> 00:41:51,839
were interacting with using

00:41:48,640 --> 00:41:52,640
bare requests and from there when they

00:41:51,839 --> 00:41:55,920
get into

00:41:52,640 --> 00:41:59,040
into back end to restart the small and

00:41:55,920 --> 00:41:59,920
they give them a broad overview of

00:41:59,040 --> 00:42:03,040
whatever thing

00:41:59,920 --> 00:42:05,119
you can you can do and to let them

00:42:03,040 --> 00:42:06,800
you know come out with their own project

00:42:05,119 --> 00:42:09,359
to to make them

00:42:06,800 --> 00:42:10,560
you know really solid developers to

00:42:09,359 --> 00:42:13,920
provide them

00:42:10,560 --> 00:42:17,520
with a uh teaching with a testing

00:42:13,920 --> 00:42:18,079
education and uh because you know if you

00:42:17,520 --> 00:42:21,520
just

00:42:18,079 --> 00:42:24,640
put every concept in a child at once

00:42:21,520 --> 00:42:28,000
like you know jungle does maybe it

00:42:24,640 --> 00:42:31,520
it won't be easy it won't it is not fun

00:42:28,000 --> 00:42:34,319
and but uh if you if you do it like

00:42:31,520 --> 00:42:35,520
incrementally you can have a better

00:42:34,319 --> 00:42:38,800
chance and it it

00:42:35,520 --> 00:42:39,680
you can start i can say at a uh lower

00:42:38,800 --> 00:42:42,319
age

00:42:39,680 --> 00:42:43,520
and of course those who want it just

00:42:42,319 --> 00:42:47,280
just at once

00:42:43,520 --> 00:42:50,319
can can always uh go for it

00:42:47,280 --> 00:42:55,040
and uh that is one

00:42:50,319 --> 00:42:57,680
against the the link to do the project

00:42:55,040 --> 00:42:58,560
and some closing words about the

00:42:57,680 --> 00:43:01,680
offline's

00:42:58,560 --> 00:43:04,720
extensions reliable like

00:43:01,680 --> 00:43:06,640
the floss ecosystem is it reliable well

00:43:04,720 --> 00:43:09,839
mr joe cuban spoke at

00:43:06,640 --> 00:43:12,000
flosscon 2020 and he spoke

00:43:09,839 --> 00:43:12,880
about his lessons building micro

00:43:12,000 --> 00:43:16,800
services with

00:43:12,880 --> 00:43:20,319
floss and he said that

00:43:16,800 --> 00:43:23,920
he has 65 000 requests

00:43:20,319 --> 00:43:27,599
per minute yes per minute and

00:43:23,920 --> 00:43:30,319
that's three billion rate limited

00:43:27,599 --> 00:43:31,599
requests per year and he said if you

00:43:30,319 --> 00:43:36,960
listen to dojo

00:43:31,599 --> 00:43:36,960
that we've had absolutely no no issues

00:43:37,119 --> 00:43:46,800
and that is all i had to present

00:43:40,720 --> 00:43:46,800

YouTube URL: https://www.youtube.com/watch?v=rkzXQOC1T0Q


