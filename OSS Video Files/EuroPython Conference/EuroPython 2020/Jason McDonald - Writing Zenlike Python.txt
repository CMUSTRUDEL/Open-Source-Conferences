Title: Jason McDonald - Writing Zenlike Python
Publication date: 2020-09-15
Playlist: EuroPython 2020
Description: 
	"Writing Zenlike Python
EuroPython 2020 - Talk - 2020-07-23 - Microsoft
Online

By Jason McDonald

There's a profound gap between working code and Pythonic code. To the developer whose first language is NOT Python, the distinction can appear blurry, even arbitrary. What is this ""one obvious way"" all those Python nerds are going on about?

Most of us are familiar with the ""Zen of Python"", Tim Peters's legendary, if tongue-in-cheek, set of guiding principles for the Python language. But can they actually inform Pythonic code?

In this talk, Jason C. McDonald will unpack how the twenty principles (including the unwritten rule) of the Zen can guide you to write beautiful, maintainable code, by treating Python AS Python!

This talk is intended primarily for developers who have come to Python from another language, no matter their experience level. McDonald will shed light on how to work WITH Python's type system, statements, and iterative tools, rather than against them. You'll walk away with a new appreciation of the language, and an understanding of what Pythonic really means; an understanding which will empower you to find the One Obvious Way to solve any problem in Python.



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2020.europython.eu/events/speaker-release-agreement/

    "
Captions: 
	00:00:08,000 --> 00:00:10,719
there we go

00:00:09,040 --> 00:00:12,320
now we can see my talk that is awesome

00:00:10,719 --> 00:00:15,920
okay so

00:00:12,320 --> 00:00:16,640
um so the question is what does it mean

00:00:15,920 --> 00:00:19,920
to write

00:00:16,640 --> 00:00:21,920
pythonic code uh

00:00:19,920 --> 00:00:23,600
if you've been using the python language

00:00:21,920 --> 00:00:25,359
for any length of time you have

00:00:23,600 --> 00:00:27,920
probably noticed that there is a canyon

00:00:25,359 --> 00:00:30,720
of difference between functioning code

00:00:27,920 --> 00:00:32,880
and pythonic code uh tim peters now

00:00:30,720 --> 00:00:34,719
famous or should i say infamous poem

00:00:32,880 --> 00:00:36,079
zen of python is considered one of the

00:00:34,719 --> 00:00:38,480
previous summaries

00:00:36,079 --> 00:00:39,680
of what constitutes pythonic code but i

00:00:38,480 --> 00:00:43,360
think sometimes

00:00:39,680 --> 00:00:46,719
it seems a bit open to interpretation

00:00:43,360 --> 00:00:51,039
so in this talk i'm going to be

00:00:46,719 --> 00:00:54,320
um breaking down how i believe the uh

00:00:51,039 --> 00:00:55,920
20 aphorisms yes 20 uh i swear there's

00:00:54,320 --> 00:00:58,000
not enough by one error

00:00:55,920 --> 00:01:00,239
of the xena python can be applied to

00:00:58,000 --> 00:01:02,239
your code right now

00:01:00,239 --> 00:01:03,840
and um even though this is it says on

00:01:02,239 --> 00:01:05,439
the guide this is

00:01:03,840 --> 00:01:06,960
geared towards beginners i think this is

00:01:05,439 --> 00:01:10,560
something that anyone

00:01:06,960 --> 00:01:10,960
can benefit from so a little bit about

00:01:10,560 --> 00:01:14,159
me

00:01:10,960 --> 00:01:16,400
uh like it was mentioned previously i

00:01:14,159 --> 00:01:18,080
am the ceo lead developer of mousepalm

00:01:16,400 --> 00:01:18,799
media which is my own open source

00:01:18,080 --> 00:01:20,799
startup

00:01:18,799 --> 00:01:22,400
we make educational software and we are

00:01:20,799 --> 00:01:25,520
working on building an

00:01:22,400 --> 00:01:27,680
open source game engine as well

00:01:25,520 --> 00:01:28,799
i'm the author of dead simple python

00:01:27,680 --> 00:01:30,960
which is soon to be

00:01:28,799 --> 00:01:33,040
a book from no starts press early in

00:01:30,960 --> 00:01:35,280
2021 hopefully

00:01:33,040 --> 00:01:37,200
and i can be found all over the internet

00:01:35,280 --> 00:01:40,799
as codemouse92

00:01:37,200 --> 00:01:44,479
um i'm especially visible on dev and

00:01:40,799 --> 00:01:46,960
um python's chat room on

00:01:44,479 --> 00:01:48,560
freenode irc but you can find me all

00:01:46,960 --> 00:01:49,520
over the net you know stackoverflow

00:01:48,560 --> 00:01:52,079
github

00:01:49,520 --> 00:01:53,280
twitter very active there you can find

00:01:52,079 --> 00:01:54,960
the complete list of

00:01:53,280 --> 00:01:57,479
all the things i do in all the places i

00:01:54,960 --> 00:02:00,159
am at my website and the

00:01:57,479 --> 00:02:01,600
dellablebluepen.com

00:02:00,159 --> 00:02:04,240
so in case you've never read the xena

00:02:01,600 --> 00:02:07,600
python or if it's been a while i'll just

00:02:04,240 --> 00:02:10,239
go ahead and read it to you now

00:02:07,600 --> 00:02:11,920
beautiful is better than ugly explicit

00:02:10,239 --> 00:02:14,560
is better than implicit

00:02:11,920 --> 00:02:16,400
simple is better than complex complex is

00:02:14,560 --> 00:02:18,720
better than complicated

00:02:16,400 --> 00:02:19,920
flat is better than nested sparse is

00:02:18,720 --> 00:02:22,879
better than dense

00:02:19,920 --> 00:02:24,480
readability counts special cases aren't

00:02:22,879 --> 00:02:27,120
special enough to break the rules

00:02:24,480 --> 00:02:29,120
although practicality beats purity

00:02:27,120 --> 00:02:31,599
errors should never pass silently

00:02:29,120 --> 00:02:33,599
unless explicitly silenced in the face

00:02:31,599 --> 00:02:34,640
of ambiguity refuse the temptation to

00:02:33,599 --> 00:02:36,480
guess

00:02:34,640 --> 00:02:38,319
there should be one and preferably only

00:02:36,480 --> 00:02:40,239
one obvious way to do it although that

00:02:38,319 --> 00:02:40,560
way may not be obvious at first unless

00:02:40,239 --> 00:02:43,680
you're

00:02:40,560 --> 00:02:46,160
dutch now is better than never although

00:02:43,680 --> 00:02:48,319
never is often better than right now

00:02:46,160 --> 00:02:49,760
if the implementation is hard to explain

00:02:48,319 --> 00:02:51,680
it's bad idea

00:02:49,760 --> 00:02:53,200
if the implementation is easy to explain

00:02:51,680 --> 00:02:55,280
it may be a good idea

00:02:53,200 --> 00:02:58,239
namespace is a one-honking great idea

00:02:55,280 --> 00:02:58,239
let's do more of those

00:02:59,599 --> 00:03:04,159
so to understand the zen of python we

00:03:02,239 --> 00:03:06,080
have to start with understanding where

00:03:04,159 --> 00:03:07,440
this thing even came from to begin with

00:03:06,080 --> 00:03:10,560
and um

00:03:07,440 --> 00:03:11,840
this showed up in a june 1999 complaint

00:03:10,560 --> 00:03:13,200
python thread

00:03:11,840 --> 00:03:15,200
which was rehashing an eight-year-old

00:03:13,200 --> 00:03:17,599
debate about garbage collection

00:03:15,200 --> 00:03:20,080
and developer patrick phelan suggested

00:03:17,599 --> 00:03:22,239
that widow van rossum and tim peters

00:03:20,080 --> 00:03:24,080
should work out some sort of elements of

00:03:22,239 --> 00:03:25,840
style for python

00:03:24,080 --> 00:03:28,480
to which tim responded with a notably

00:03:25,840 --> 00:03:30,480
snarky humorous attempt at it

00:03:28,480 --> 00:03:32,319
it wasn't until 2004 though that

00:03:30,480 --> 00:03:33,200
actually gained the name the zen of

00:03:32,319 --> 00:03:36,239
python

00:03:33,200 --> 00:03:37,280
and was codified as the pep20 we know

00:03:36,239 --> 00:03:39,599
and love

00:03:37,280 --> 00:03:40,640
and uh fun fact although you may already

00:03:39,599 --> 00:03:42,720
know this if you run

00:03:40,640 --> 00:03:44,400
import this in any python shell that'll

00:03:42,720 --> 00:03:46,000
display the zen

00:03:44,400 --> 00:03:47,840
funny thing though is if you read the

00:03:46,000 --> 00:03:49,360
source code for that easter egg it

00:03:47,840 --> 00:03:50,080
doesn't even follow any of its own

00:03:49,360 --> 00:03:53,599
advice

00:03:50,080 --> 00:03:56,640
um intentionally uh because

00:03:53,599 --> 00:03:56,640
we all love irony

00:03:57,040 --> 00:04:00,400
but before i can really break down the

00:03:58,799 --> 00:04:02,000
zen of python we have to answer this

00:04:00,400 --> 00:04:04,000
question about whether or not tim peters

00:04:02,000 --> 00:04:05,599
was actually being serious when he wrote

00:04:04,000 --> 00:04:08,000
it

00:04:05,599 --> 00:04:10,239
uh well as tim later described to barry

00:04:08,000 --> 00:04:10,720
warsaw it was a throwaway python list

00:04:10,239 --> 00:04:12,080
post

00:04:10,720 --> 00:04:13,360
but like all great triumphs of

00:04:12,080 --> 00:04:14,799
literature it was written during

00:04:13,360 --> 00:04:16,560
commercial breaks while watching

00:04:14,799 --> 00:04:19,840
professional wrestling on tv

00:04:16,560 --> 00:04:22,960
and munching on a ham sandwich all true

00:04:19,840 --> 00:04:25,919
uh that's tim peters for you ironically

00:04:22,960 --> 00:04:27,600
uh his post initially fell on deaf ears

00:04:25,919 --> 00:04:28,000
as that garbage collection wrestling

00:04:27,600 --> 00:04:31,040
match

00:04:28,000 --> 00:04:33,759
raged on like i said it was until 2004

00:04:31,040 --> 00:04:36,000
that was really codified

00:04:33,759 --> 00:04:38,160
but whether this was intended as a joke

00:04:36,000 --> 00:04:39,520
or not as barry warsaw pointed out the

00:04:38,160 --> 00:04:41,440
zenith python

00:04:39,520 --> 00:04:43,040
captured the languages aesthetic through

00:04:41,440 --> 00:04:44,960
the eyes of one of the earliest

00:04:43,040 --> 00:04:47,040
pythonistas

00:04:44,960 --> 00:04:48,880
uh by the way i should mention that

00:04:47,040 --> 00:04:50,240
barry warsaw also set this thing to

00:04:48,880 --> 00:04:52,960
music this past may

00:04:50,240 --> 00:04:54,479
um so you can find that on his website

00:04:52,960 --> 00:04:56,479
he had he recorded

00:04:54,479 --> 00:04:57,840
a song is in a python which i think we

00:04:56,479 --> 00:04:59,919
should all learn how to sing

00:04:57,840 --> 00:05:01,360
maybe we should sing that at our next

00:04:59,919 --> 00:05:06,320
conference as our

00:05:01,360 --> 00:05:08,479
anthem so i'm gonna break down this

00:05:06,320 --> 00:05:10,400
uh statement by statement but instead of

00:05:08,479 --> 00:05:12,720
going in order i'm going to address

00:05:10,400 --> 00:05:14,560
several related concepts together and i

00:05:12,720 --> 00:05:16,000
want to write start

00:05:14,560 --> 00:05:17,840
right in the middle as i believe the

00:05:16,000 --> 00:05:21,919
entire zen of python hangs

00:05:17,840 --> 00:05:25,360
on this one statement readability counts

00:05:21,919 --> 00:05:27,680
pythonic code is readable above all else

00:05:25,360 --> 00:05:28,400
uh because see the hum the computer is

00:05:27,680 --> 00:05:32,000
not picky

00:05:28,400 --> 00:05:34,800
it's happiest with binary any day uh

00:05:32,000 --> 00:05:35,440
programming is really the art of

00:05:34,800 --> 00:05:37,840
converting

00:05:35,440 --> 00:05:38,960
human thought to computer logic code

00:05:37,840 --> 00:05:41,840
exists for

00:05:38,960 --> 00:05:43,600
people whether they be co-workers future

00:05:41,840 --> 00:05:44,320
maintainers people learning from our

00:05:43,600 --> 00:05:48,160
code

00:05:44,320 --> 00:05:50,240
or just ourselves two years from now

00:05:48,160 --> 00:05:51,520
and it's really tempting when we're

00:05:50,240 --> 00:05:54,080
coding to try and write

00:05:51,520 --> 00:05:56,479
clever code it feels cool to write

00:05:54,080 --> 00:05:57,680
clever code it makes us feel smart

00:05:56,479 --> 00:06:00,800
but as you're going to see throughout

00:05:57,680 --> 00:06:04,960
this talk clever is kind of the very

00:06:00,800 --> 00:06:06,400
antithesis to pythonic it doesn't mean

00:06:04,960 --> 00:06:08,240
that we shouldn't be writing brilliant

00:06:06,400 --> 00:06:11,039
code but clever code

00:06:08,240 --> 00:06:14,080
can be a bit of a problem especially

00:06:11,039 --> 00:06:16,479
because it often sacrifices readability

00:06:14,080 --> 00:06:18,319
uh brian caringan the co-author of the c

00:06:16,479 --> 00:06:20,400
programming language uh don't knock it

00:06:18,319 --> 00:06:20,960
by thomas written in z or at least the

00:06:20,400 --> 00:06:23,360
main

00:06:20,960 --> 00:06:25,440
enter the main interpreter was uh he

00:06:23,360 --> 00:06:27,440
said everyone knows that debugging is

00:06:25,440 --> 00:06:28,319
twice as hard as writing a program in

00:06:27,440 --> 00:06:30,000
the first place

00:06:28,319 --> 00:06:31,600
so if you're as clever as you can be

00:06:30,000 --> 00:06:33,199
when you write it how will you ever

00:06:31,600 --> 00:06:35,360
debug it

00:06:33,199 --> 00:06:39,280
i would like to add if you can't debug

00:06:35,360 --> 00:06:39,280
it how is your successor supposed to

00:06:41,199 --> 00:06:47,039
so later on

00:06:44,880 --> 00:06:49,360
in the zen uh tim says there should be

00:06:47,039 --> 00:06:50,639
one and preferably only one obvious way

00:06:49,360 --> 00:06:52,160
to do it

00:06:50,639 --> 00:06:54,319
this is one of the most quoted parts of

00:06:52,160 --> 00:06:57,599
the zen but what is

00:06:54,319 --> 00:06:59,520
obvious well obvious is

00:06:57,599 --> 00:07:02,080
i believe all about finding the optimal

00:06:59,520 --> 00:07:04,479
solution to a specific problem

00:07:02,080 --> 00:07:06,639
what is the best possible way to solve

00:07:04,479 --> 00:07:07,440
this specific thing i'm trying to solve

00:07:06,639 --> 00:07:09,360
in my code

00:07:07,440 --> 00:07:11,280
the trouble with obvious is that it's

00:07:09,360 --> 00:07:14,560
not always obvious looking

00:07:11,280 --> 00:07:16,880
into it it's only obvious looking

00:07:14,560 --> 00:07:17,759
back retrospectively reading the code

00:07:16,880 --> 00:07:20,319
you go

00:07:17,759 --> 00:07:21,840
oh yeah that makes sense why did i think

00:07:20,319 --> 00:07:24,639
of doing it any other way

00:07:21,840 --> 00:07:27,199
that's what obvious means in python as

00:07:24,639 --> 00:07:31,280
you'll see in a moment

00:07:27,199 --> 00:07:32,880
now our mantra in python is there's only

00:07:31,280 --> 00:07:34,800
one way to do it

00:07:32,880 --> 00:07:36,639
uh this contrasts with some languages

00:07:34,800 --> 00:07:38,400
like pearl

00:07:36,639 --> 00:07:39,759
where they say there's more than one way

00:07:38,400 --> 00:07:43,039
to do it do we say this in c

00:07:39,759 --> 00:07:45,919
plus plus two which is my other language

00:07:43,039 --> 00:07:46,960
uh but the trouble is uh both python and

00:07:45,919 --> 00:07:49,360
pearl

00:07:46,960 --> 00:07:50,960
ships working code maintainable code so

00:07:49,360 --> 00:07:53,840
who's right

00:07:50,960 --> 00:07:55,360
um i would actually argue that python

00:07:53,840 --> 00:07:57,520
and pearl are not really on opposing

00:07:55,360 --> 00:07:59,599
sites at all and understanding this

00:07:57,520 --> 00:08:00,560
will help make this concept of

00:07:59,599 --> 00:08:04,240
obviousness

00:08:00,560 --> 00:08:06,879
more um easier to understand

00:08:04,240 --> 00:08:07,520
uh apparently guido van rossum doesn't

00:08:06,879 --> 00:08:09,360
think that

00:08:07,520 --> 00:08:10,720
that these two languages are on opposing

00:08:09,360 --> 00:08:12,479
sides either

00:08:10,720 --> 00:08:13,759
as he said when asked about it the funny

00:08:12,479 --> 00:08:15,520
thing is that while there's a lot of

00:08:13,759 --> 00:08:16,960
animosity in the lower ranks

00:08:15,520 --> 00:08:18,960
i've actually been very friendly with

00:08:16,960 --> 00:08:20,960
larry wall and tom christensen

00:08:18,960 --> 00:08:23,840
ever since we met five years ago at the

00:08:20,960 --> 00:08:27,120
vhll symposium that tom organized

00:08:23,840 --> 00:08:28,879
so if uh widow's uh getting along with

00:08:27,120 --> 00:08:32,080
the creator of pearl uh we

00:08:28,879 --> 00:08:33,760
we probably should too uh so

00:08:32,080 --> 00:08:35,680
like i said these are not on opposing

00:08:33,760 --> 00:08:39,519
sides and i'll show that by

00:08:35,680 --> 00:08:41,279
breaking down kind of these two mantras

00:08:39,519 --> 00:08:43,919
so in python like i said we say there's

00:08:41,279 --> 00:08:46,080
only one way to do it

00:08:43,919 --> 00:08:48,480
we are looking for the one obvious way

00:08:46,080 --> 00:08:50,640
for each unique situation

00:08:48,480 --> 00:08:52,320
the trouble is we don't necessarily know

00:08:50,640 --> 00:08:54,240
this right off because remember

00:08:52,320 --> 00:08:56,399
obvious is retrospective so we have to

00:08:54,240 --> 00:08:56,800
try things out we have to experiment to

00:08:56,399 --> 00:09:00,720
find

00:08:56,800 --> 00:09:00,720
the best way to do it

00:09:01,120 --> 00:09:05,360
over in pearl they say there's more what

00:09:03,440 --> 00:09:06,320
more than one way to do it and this is a

00:09:05,360 --> 00:09:07,680
way of

00:09:06,320 --> 00:09:09,760
keeping people from shutting down

00:09:07,680 --> 00:09:12,160
experimentation because well we've

00:09:09,760 --> 00:09:15,120
always done it this way

00:09:12,160 --> 00:09:17,680
but the goal is still looking for the

00:09:15,120 --> 00:09:19,360
best solution to that particular problem

00:09:17,680 --> 00:09:20,959
it's not that we're just looking for any

00:09:19,360 --> 00:09:22,480
solution is that we're still looking for

00:09:20,959 --> 00:09:24,480
the best one

00:09:22,480 --> 00:09:26,800
so you see that this is the same

00:09:24,480 --> 00:09:27,760
strategy it's just the opposite focus

00:09:26,800 --> 00:09:30,640
python says

00:09:27,760 --> 00:09:31,600
find the optimal solution and experiment

00:09:30,640 --> 00:09:33,920
if necessary

00:09:31,600 --> 00:09:35,760
pearl says experiment to find the op to

00:09:33,920 --> 00:09:37,839
find the optimal solution so really it's

00:09:35,760 --> 00:09:41,680
the same thing

00:09:37,839 --> 00:09:42,880
in in many ways and on this whole note

00:09:41,680 --> 00:09:45,200
of obvious

00:09:42,880 --> 00:09:46,880
like i said that one obvious way is

00:09:45,200 --> 00:09:49,120
retrospective

00:09:46,880 --> 00:09:50,959
which is why tim says although that way

00:09:49,120 --> 00:09:51,360
may not be obvious at first unless

00:09:50,959 --> 00:09:53,680
you're

00:09:51,360 --> 00:09:53,680
dutch

00:09:54,560 --> 00:09:58,240
once we know the solution once we see

00:09:56,480 --> 00:10:00,959
the working code then it all becomes

00:09:58,240 --> 00:10:02,959
clear now python's implementation

00:10:00,959 --> 00:10:04,959
details do advise this when you

00:10:02,959 --> 00:10:06,800
understand how python does things behind

00:10:04,959 --> 00:10:08,720
the scenes it helps you pick

00:10:06,800 --> 00:10:10,320
better approaches for your particular

00:10:08,720 --> 00:10:12,560
situation but we're not all core

00:10:10,320 --> 00:10:14,640
developers we don't all know

00:10:12,560 --> 00:10:15,920
um the inner workings of python

00:10:14,640 --> 00:10:18,320
necessarily

00:10:15,920 --> 00:10:19,120
um you know widow understands it better

00:10:18,320 --> 00:10:22,399
than most of us

00:10:19,120 --> 00:10:24,160
ergo unless you're dutch so he'll get to

00:10:22,399 --> 00:10:25,120
the obvious way probably before most of

00:10:24,160 --> 00:10:27,120
us will

00:10:25,120 --> 00:10:29,200
but then there's also this factor that

00:10:27,120 --> 00:10:30,480
uh the one obvious way is continually

00:10:29,200 --> 00:10:33,200
evolving

00:10:30,480 --> 00:10:34,800
um i have a copy of the python cookbook

00:10:33,200 --> 00:10:38,160
from python 2.4

00:10:34,800 --> 00:10:39,680
yeah ancient history and um

00:10:38,160 --> 00:10:42,160
all the solutions in there of course

00:10:39,680 --> 00:10:45,120
were the obvious way at the time

00:10:42,160 --> 00:10:46,079
uh python cookbook was very popular at

00:10:45,120 --> 00:10:49,200
that time

00:10:46,079 --> 00:10:51,200
but um it's no longer none of these are

00:10:49,200 --> 00:10:53,120
any longer the one obvious way the one

00:10:51,200 --> 00:10:54,480
obviously has changed as the language

00:10:53,120 --> 00:10:56,000
has changed

00:10:54,480 --> 00:10:57,839
so it's important to remember too that

00:10:56,000 --> 00:10:59,440
what's obvious yesterday

00:10:57,839 --> 00:11:02,720
may not continue to be the obvious

00:10:59,440 --> 00:11:02,720
solution tomorrow

00:11:02,959 --> 00:11:07,040
so python code is readable and it's

00:11:05,680 --> 00:11:09,440
obvious

00:11:07,040 --> 00:11:10,560
it's also beautiful beautiful is better

00:11:09,440 --> 00:11:13,040
than ugly

00:11:10,560 --> 00:11:14,640
trouble is what is beautiful code view

00:11:13,040 --> 00:11:15,680
these in the eye of beholder it's a

00:11:14,640 --> 00:11:18,160
little hard to nail

00:11:15,680 --> 00:11:20,160
down but however you define that

00:11:18,160 --> 00:11:22,160
beautiful code is always a pleasure

00:11:20,160 --> 00:11:24,240
to read because we don't want to

00:11:22,160 --> 00:11:26,720
sacrifice readability

00:11:24,240 --> 00:11:30,240
it can be really hard to nail down what

00:11:26,720 --> 00:11:32,000
beautiful code is sometimes but you know

00:11:30,240 --> 00:11:33,519
beautiful coding you see it and you know

00:11:32,000 --> 00:11:35,519
ugly code when you see it

00:11:33,519 --> 00:11:36,959
most people would agree given one piece

00:11:35,519 --> 00:11:40,480
of code that yeah that's

00:11:36,959 --> 00:11:42,560
pretty bad or yeah that's pretty good uh

00:11:40,480 --> 00:11:44,480
and in terms of writing this this is why

00:11:42,560 --> 00:11:44,959
we have the pep 8 style guide to begin

00:11:44,480 --> 00:11:47,920
with

00:11:44,959 --> 00:11:49,200
to help advise writing beautiful code

00:11:47,920 --> 00:11:51,040
although that's not

00:11:49,200 --> 00:11:53,680
the whole picture of beautiful code but

00:11:51,040 --> 00:11:55,839
it's a it's a good chunk

00:11:53,680 --> 00:11:57,200
so this is this makes the most sense

00:11:55,839 --> 00:12:01,600
with some actual code so

00:11:57,200 --> 00:12:03,680
um here's some ugly code uh enough said

00:12:01,600 --> 00:12:05,519
um i take full responsibility for

00:12:03,680 --> 00:12:07,360
writing this monstrosity

00:12:05,519 --> 00:12:09,360
what are the problems poor spacing for

00:12:07,360 --> 00:12:12,560
one thing um

00:12:09,360 --> 00:12:13,600
the lines are crammed together uh we

00:12:12,560 --> 00:12:14,959
have multiple

00:12:13,600 --> 00:12:17,440
multiple statements in one line of

00:12:14,959 --> 00:12:20,560
defining n and r on the same line

00:12:17,440 --> 00:12:23,279
if um uh

00:12:20,560 --> 00:12:24,160
just you know the the conditionals that

00:12:23,279 --> 00:12:26,320
the header and the

00:12:24,160 --> 00:12:28,079
the header and the suite are on the same

00:12:26,320 --> 00:12:30,399
line this is just

00:12:28,079 --> 00:12:32,000
nasty it's over complicated besides that

00:12:30,399 --> 00:12:33,920
it's hard to read i'm using i'm not

00:12:32,000 --> 00:12:36,160
using any of python's particular

00:12:33,920 --> 00:12:39,839
abilities i'm just writing c code in

00:12:36,160 --> 00:12:39,839
python basically this is not nice

00:12:40,560 --> 00:12:44,639
here's the same goal but done

00:12:43,440 --> 00:12:46,800
beautifully

00:12:44,639 --> 00:12:49,760
so this employs better spacing

00:12:46,800 --> 00:12:51,120
especially around those operators

00:12:49,760 --> 00:12:54,000
as you see later white space is

00:12:51,120 --> 00:12:55,920
important there's one thought per line

00:12:54,000 --> 00:12:58,000
so it's much easier to break down what

00:12:55,920 --> 00:12:58,880
is going on it's idiomatic i'm using

00:12:58,000 --> 00:13:01,040
python as

00:12:58,880 --> 00:13:03,279
python i'm using this list comprehension

00:13:01,040 --> 00:13:04,560
i'm using the star operator

00:13:03,279 --> 00:13:05,839
if you don't know what these are of

00:13:04,560 --> 00:13:07,120
course you may have to read the

00:13:05,839 --> 00:13:09,519
documentation but

00:13:07,120 --> 00:13:10,880
once you know the syntax then it's very

00:13:09,519 --> 00:13:14,320
obvious what i'm doing

00:13:10,880 --> 00:13:16,160
and this is easy to read besides that

00:13:14,320 --> 00:13:18,079
now it's not as that is not to say that

00:13:16,160 --> 00:13:19,600
all list comprehensions are

00:13:18,079 --> 00:13:23,040
are automatically beautiful but i think

00:13:19,600 --> 00:13:23,040
this is one case where they are

00:13:23,120 --> 00:13:27,360
so pythonic code is readable it's

00:13:25,440 --> 00:13:32,399
obvious it's beautiful

00:13:27,360 --> 00:13:34,160
what else pythonic code is explicit

00:13:32,399 --> 00:13:35,839
uh surprising behavior was always a

00:13:34,160 --> 00:13:38,240
problem uh

00:13:35,839 --> 00:13:40,240
by the way a little bit of a relevant

00:13:38,240 --> 00:13:41,839
rabbit trail this is why i'm well known

00:13:40,240 --> 00:13:42,720
around the internet for my dislike of

00:13:41,839 --> 00:13:44,079
javascript

00:13:42,720 --> 00:13:46,240
it's not because i'm picking on

00:13:44,079 --> 00:13:48,320
javascript or because you know

00:13:46,240 --> 00:13:49,279
just some random personal dislikes of

00:13:48,320 --> 00:13:51,440
syntax

00:13:49,279 --> 00:13:53,839
my issue with javascript is simply that

00:13:51,440 --> 00:13:56,800
it has too much surprising behavior

00:13:53,839 --> 00:13:57,760
um and even it's even if experts will

00:13:56,800 --> 00:14:02,000
admit this

00:13:57,760 --> 00:14:04,079
um surprises are bad in any language

00:14:02,000 --> 00:14:05,519
most of our issues with python even come

00:14:04,079 --> 00:14:08,720
from surprising behavior

00:14:05,519 --> 00:14:09,760
if you've ever tried to pass a list as a

00:14:08,720 --> 00:14:11,279
default argument

00:14:09,760 --> 00:14:13,600
to a function you know what i'm talking

00:14:11,279 --> 00:14:17,760
about immutability can be

00:14:13,600 --> 00:14:20,399
surprising so we want to avoid

00:14:17,760 --> 00:14:21,839
surprising behavior and besides that if

00:14:20,399 --> 00:14:22,880
you have to comment what the code is

00:14:21,839 --> 00:14:25,360
doing

00:14:22,880 --> 00:14:27,040
uh in order for it to be clear then you

00:14:25,360 --> 00:14:29,440
really need to be rewriting the code the

00:14:27,040 --> 00:14:31,199
code's not pythonic at that point

00:14:29,440 --> 00:14:33,360
now that's not to say i don't believe in

00:14:31,199 --> 00:14:35,040
comments but comments have a specific

00:14:33,360 --> 00:14:36,399
purpose they should be describing the

00:14:35,040 --> 00:14:39,839
intention

00:14:36,399 --> 00:14:43,680
comment why not what

00:14:39,839 --> 00:14:46,959
i like to use the rule that the

00:14:43,680 --> 00:14:48,639
excuse me should describe the behavior

00:14:46,959 --> 00:14:50,079
without having any reference to the

00:14:48,639 --> 00:14:52,160
actual implementation

00:14:50,079 --> 00:14:53,920
and in effect your a good comment is

00:14:52,160 --> 00:14:55,760
part of the living specification

00:14:53,920 --> 00:14:58,000
and if the comment doesn't match the

00:14:55,760 --> 00:15:00,240
code then you assume both are wrong

00:14:58,000 --> 00:15:02,320
and you check and rewrite both to make

00:15:00,240 --> 00:15:05,760
them match

00:15:02,320 --> 00:15:06,639
um and then of course there's this issue

00:15:05,760 --> 00:15:08,079
of naming

00:15:06,639 --> 00:15:09,760
because usually when you're reading code

00:15:08,079 --> 00:15:11,199
you're looking for a given behavior and

00:15:09,760 --> 00:15:12,000
the name is one of the first places

00:15:11,199 --> 00:15:14,320
you're going to look

00:15:12,000 --> 00:15:16,079
never send a comment to do a names job

00:15:14,320 --> 00:15:17,600
and yes naming is hard

00:15:16,079 --> 00:15:19,360
fully acknowledging phil carlson's

00:15:17,600 --> 00:15:20,959
famous quote there's only two hard

00:15:19,360 --> 00:15:26,639
things in computer science

00:15:20,959 --> 00:15:29,519
cash invalidation and naming things

00:15:26,639 --> 00:15:30,560
so here's an example of some implicit

00:15:29,519 --> 00:15:32,560
code where this

00:15:30,560 --> 00:15:34,880
where this becomes very clear um the

00:15:32,560 --> 00:15:36,720
names are vague we're parsing data what

00:15:34,880 --> 00:15:38,320
what data what are we parsing out of the

00:15:36,720 --> 00:15:41,279
data um

00:15:38,320 --> 00:15:43,360
i don't who knows uh where is this sep

00:15:41,279 --> 00:15:45,120
coming from i don't see it defined okay

00:15:43,360 --> 00:15:46,560
maybe it's coming from that star import

00:15:45,120 --> 00:15:49,519
but if i have more than one

00:15:46,560 --> 00:15:51,199
import then that gets a bit foggy and

00:15:49,519 --> 00:15:54,320
what is this even doing

00:15:51,199 --> 00:15:56,720
uh i have no idea parsing data out of

00:15:54,320 --> 00:15:59,440
some file i guess

00:15:56,720 --> 00:15:59,759
here's the same code simply rewritten to

00:15:59,440 --> 00:16:01,360
be

00:15:59,759 --> 00:16:03,279
explicit i've changed none of the

00:16:01,360 --> 00:16:05,600
implementation

00:16:03,279 --> 00:16:07,759
so the names now reflect the purpose i'm

00:16:05,600 --> 00:16:08,800
parsing a name out of a line those lines

00:16:07,759 --> 00:16:10,800
are coming from

00:16:08,800 --> 00:16:12,800
a list i'm putting into a list called

00:16:10,800 --> 00:16:15,040
speakers okay this is coming from

00:16:12,800 --> 00:16:16,639
file this is making more sense and i've

00:16:15,040 --> 00:16:19,920
clarified that sep

00:16:16,639 --> 00:16:21,920
import uh that's coming from constants

00:16:19,920 --> 00:16:23,600
so that's that's useful information i

00:16:21,920 --> 00:16:25,680
know where that is defined

00:16:23,600 --> 00:16:27,440
it's very obvious what this is doing and

00:16:25,680 --> 00:16:31,839
if it weren't already that comment

00:16:27,440 --> 00:16:34,079
makes it much clearer what the goal is

00:16:31,839 --> 00:16:35,040
so focusing a little bit on that import

00:16:34,079 --> 00:16:38,399
situation

00:16:35,040 --> 00:16:39,440
um so explicit is better than implicit

00:16:38,399 --> 00:16:42,320
and adding to that

00:16:39,440 --> 00:16:44,639
name spaces are one honking great idea

00:16:42,320 --> 00:16:46,320
let's do more of those

00:16:44,639 --> 00:16:48,839
see the thing is that import star i

00:16:46,320 --> 00:16:51,040
showed a moment ago is absolutely

00:16:48,839 --> 00:16:52,959
insidious

00:16:51,040 --> 00:16:55,199
first of all because python doesn't have

00:16:52,959 --> 00:16:57,360
any concept of overloaded

00:16:55,199 --> 00:16:59,600
uh functions like you may be familiar

00:16:57,360 --> 00:17:03,120
with from languages like c plus plus

00:16:59,600 --> 00:17:04,000
or java instead it just shadows the

00:17:03,120 --> 00:17:07,039
previous function

00:17:04,000 --> 00:17:08,880
you can't have two functions named spam

00:17:07,039 --> 00:17:10,319
the second one is going to hide the

00:17:08,880 --> 00:17:12,640
first one

00:17:10,319 --> 00:17:13,760
uh and this can have some pretty

00:17:12,640 --> 00:17:16,319
unexpected

00:17:13,760 --> 00:17:18,000
side effects and consequences and

00:17:16,319 --> 00:17:20,240
working backwards is really hard when

00:17:18,000 --> 00:17:23,280
you don't even know what module

00:17:20,240 --> 00:17:23,280
something is defined in

00:17:23,760 --> 00:17:28,720
so an example of name spacing being

00:17:27,520 --> 00:17:32,080
important is here

00:17:28,720 --> 00:17:33,840
um so we're start importing from two

00:17:32,080 --> 00:17:36,799
modules door and window

00:17:33,840 --> 00:17:38,480
uh who knows what we're importing uh

00:17:36,799 --> 00:17:40,400
it's unclear what we're even really

00:17:38,480 --> 00:17:43,679
doing am i opening the door

00:17:40,400 --> 00:17:46,559
or closing the door uh or the window and

00:17:43,679 --> 00:17:48,160
open by the way uh fun fact that's

00:17:46,559 --> 00:17:50,799
coming from window

00:17:48,160 --> 00:17:53,039
i defined it in door and window uh in

00:17:50,799 --> 00:17:56,080
complete defiance of good sense

00:17:53,039 --> 00:17:57,840
and uh it happens and that

00:17:56,080 --> 00:17:59,760
of course completely shadows the

00:17:57,840 --> 00:18:01,919
built-in open function

00:17:59,760 --> 00:18:03,760
which then means okay this is going to

00:18:01,919 --> 00:18:05,360
be surprising if we now try to open a

00:18:03,760 --> 00:18:06,960
file later on

00:18:05,360 --> 00:18:09,039
or if i want to edit slam where do i

00:18:06,960 --> 00:18:10,559
edit that what module does that come out

00:18:09,039 --> 00:18:13,440
of

00:18:10,559 --> 00:18:14,000
and if we were to import star this

00:18:13,440 --> 00:18:16,160
module

00:18:14,000 --> 00:18:17,760
that you're looking at here then all of

00:18:16,160 --> 00:18:18,720
these problems would just replicate up

00:18:17,760 --> 00:18:22,960
to the next level

00:18:18,720 --> 00:18:25,360
so this is bad let's fix that

00:18:22,960 --> 00:18:27,360
no more star imports and as a result we

00:18:25,360 --> 00:18:29,280
know more we no longer have shadowing

00:18:27,360 --> 00:18:31,360
we're using explicit namespaces

00:18:29,280 --> 00:18:33,760
door.open okay so i could use the

00:18:31,360 --> 00:18:36,799
built-in open function just fine now

00:18:33,760 --> 00:18:38,559
uh it's also clear uh what i'm doing i'm

00:18:36,799 --> 00:18:40,480
opening a door i'm slamming a door the

00:18:38,559 --> 00:18:42,400
intent is much more obvious

00:18:40,480 --> 00:18:43,760
and it's clear where this stuff is

00:18:42,400 --> 00:18:46,640
originating from

00:18:43,760 --> 00:18:49,280
as well um so if i want to edit slam i

00:18:46,640 --> 00:18:49,280
go into door

00:18:49,679 --> 00:18:54,720
so on this same point

00:18:52,880 --> 00:18:57,840
in the face of ambiguity refuse the

00:18:54,720 --> 00:18:59,760
temptation to guest

00:18:57,840 --> 00:19:02,400
so when you come up against code that is

00:18:59,760 --> 00:19:05,200
not overly explicit

00:19:02,400 --> 00:19:06,000
you need to insist on knowing what's

00:19:05,200 --> 00:19:09,760
happening

00:19:06,000 --> 00:19:13,039
abstractions are not there to save us

00:19:09,760 --> 00:19:15,200
thinking they're there to save us typing

00:19:13,039 --> 00:19:16,559
you still need to understand when a

00:19:15,200 --> 00:19:19,440
linked list is being used

00:19:16,559 --> 00:19:20,880
versus a versus an array because that's

00:19:19,440 --> 00:19:22,799
going to have implications on the

00:19:20,880 --> 00:19:24,480
performance of your sorting algorithms

00:19:22,799 --> 00:19:25,840
or even whether or not you use the

00:19:24,480 --> 00:19:27,280
built-in sorting algorithm what

00:19:25,840 --> 00:19:29,039
algorithm does it use

00:19:27,280 --> 00:19:30,400
um you know how does that function

00:19:29,039 --> 00:19:32,080
you're relying on actually

00:19:30,400 --> 00:19:33,840
operate behind the scenes you should

00:19:32,080 --> 00:19:34,960
have some understanding of this because

00:19:33,840 --> 00:19:37,919
it's critical to the

00:19:34,960 --> 00:19:38,240
to the debugging process and to writing

00:19:37,919 --> 00:19:41,200
good

00:19:38,240 --> 00:19:42,160
solid maintainable code guessing what's

00:19:41,200 --> 00:19:43,600
going to happen

00:19:42,160 --> 00:19:45,360
is just going to lead to bugs and

00:19:43,600 --> 00:19:46,720
misunderstandings

00:19:45,360 --> 00:19:48,160
if it's not your code you're dealing

00:19:46,720 --> 00:19:49,840
with you're dealing with a library

00:19:48,160 --> 00:19:52,000
you're dealing with python itself which

00:19:49,840 --> 00:19:53,679
has unfortunately some surprises in it

00:19:52,000 --> 00:19:55,600
read the documentation if the

00:19:53,679 --> 00:19:57,679
documentation is sparse read the code

00:19:55,600 --> 00:19:59,520
find out what's actually going on

00:19:57,679 --> 00:20:01,120
abstractions are there to save us typing

00:19:59,520 --> 00:20:03,360
not to save us thinking

00:20:01,120 --> 00:20:04,960
but if it's your ambiguity if it's your

00:20:03,360 --> 00:20:09,760
team's ambiguity just

00:20:04,960 --> 00:20:09,760
fix it explicit is better than implicit

00:20:11,360 --> 00:20:15,919
okay so python code is readable obvious

00:20:13,600 --> 00:20:19,039
beautiful and explicit ideally it's also

00:20:15,919 --> 00:20:22,559
simple we write code to be maintainable

00:20:19,039 --> 00:20:23,760
not to be clever um

00:20:22,559 --> 00:20:25,280
and i think you're gonna see an example

00:20:23,760 --> 00:20:26,159
of this here you got that voice in your

00:20:25,280 --> 00:20:28,559
head that says well

00:20:26,159 --> 00:20:30,720
real programmer don't you hate that term

00:20:28,559 --> 00:20:31,360
a real programmer wouldn't use it if

00:20:30,720 --> 00:20:32,960
statement

00:20:31,360 --> 00:20:34,960
and you wind up spending all this time

00:20:32,960 --> 00:20:35,679
looking up some sort of advanced way of

00:20:34,960 --> 00:20:37,280
handling

00:20:35,679 --> 00:20:38,799
what an if statement would have done

00:20:37,280 --> 00:20:41,120
perfectly well doing

00:20:38,799 --> 00:20:42,720
and and i guarantee almost every person

00:20:41,120 --> 00:20:43,520
in this audience has had a moment like

00:20:42,720 --> 00:20:46,840
that

00:20:43,520 --> 00:20:48,960
sooner or later i i know i have many

00:20:46,840 --> 00:20:50,000
times but you have to understand it

00:20:48,960 --> 00:20:52,400
takes more skill

00:20:50,000 --> 00:20:53,120
to write simple maintainable code than

00:20:52,400 --> 00:20:56,159
to write

00:20:53,120 --> 00:20:56,640
clever code uh so let the simplicity be

00:20:56,159 --> 00:20:58,559
your show

00:20:56,640 --> 00:21:00,240
skill it's hard to read clever code it's

00:20:58,559 --> 00:21:04,320
hard to understand it ergo

00:21:00,240 --> 00:21:06,159
clever uh the basics are your friends

00:21:04,320 --> 00:21:08,400
so here's some complex code this isn't

00:21:06,159 --> 00:21:11,200
necessarily bad

00:21:08,400 --> 00:21:12,400
but um you see i've tried to make this

00:21:11,200 --> 00:21:14,799
dry by taking

00:21:12,400 --> 00:21:16,400
this input logic and putting into its

00:21:14,799 --> 00:21:18,240
own function uh

00:21:16,400 --> 00:21:20,640
but i'm only using it once so this is

00:21:18,240 --> 00:21:24,159
dry nearing absolutely arid

00:21:20,640 --> 00:21:26,799
it's this is this is terrible um

00:21:24,159 --> 00:21:29,039
because now i have to add this extra

00:21:26,799 --> 00:21:32,400
level of complexity i have to do this

00:21:29,039 --> 00:21:33,919
exit call which works but what if

00:21:32,400 --> 00:21:35,840
there's some unexpected side effects of

00:21:33,919 --> 00:21:36,960
cis exit that i'm not thinking about so

00:21:35,840 --> 00:21:39,039
this is

00:21:36,960 --> 00:21:40,080
uh adding complexity that while it's

00:21:39,039 --> 00:21:42,240
okay to ship this

00:21:40,080 --> 00:21:44,080
it doesn't need to be there i can just

00:21:42,240 --> 00:21:46,000
stick with the classics

00:21:44,080 --> 00:21:47,679
the infinite while loop with a break

00:21:46,000 --> 00:21:49,600
statement this is easy to

00:21:47,679 --> 00:21:51,919
read easy to maintain stick this in my

00:21:49,600 --> 00:21:55,120
main function and i'm good to go

00:21:51,919 --> 00:21:56,159
so the simple solutions are sometimes

00:21:55,120 --> 00:21:58,080
the best in fact

00:21:56,159 --> 00:21:59,600
if you have a simple solution it's

00:21:58,080 --> 00:22:01,120
probably better to do that than a

00:21:59,600 --> 00:22:04,240
complex one

00:22:01,120 --> 00:22:06,320
but complex is better than complicated

00:22:04,240 --> 00:22:07,760
while simple is best it isn't always

00:22:06,320 --> 00:22:10,480
possible

00:22:07,760 --> 00:22:12,799
to go for simple and you don't want to

00:22:10,480 --> 00:22:14,480
confuse elegance with obfuscation i

00:22:12,799 --> 00:22:16,320
don't know where i picked this

00:22:14,480 --> 00:22:19,440
this up somewhere on twitter but i loved

00:22:16,320 --> 00:22:21,919
it elegance is not obfuscation

00:22:19,440 --> 00:22:22,640
complex code still needs to be readable

00:22:21,919 --> 00:22:24,640
beautiful

00:22:22,640 --> 00:22:26,240
and obvious it might take you more time

00:22:24,640 --> 00:22:29,039
to read it but it should not take

00:22:26,240 --> 00:22:31,600
more effort to read it as long as it's

00:22:29,039 --> 00:22:31,600
pythonic

00:22:32,000 --> 00:22:35,120
so this is bad code this is complicated

00:22:34,400 --> 00:22:36,640
code

00:22:35,120 --> 00:22:38,640
once again this is kind of like writing

00:22:36,640 --> 00:22:41,200
c code in python oops

00:22:38,640 --> 00:22:41,919
sorry about that uh there's too many

00:22:41,200 --> 00:22:43,520
steps here

00:22:41,919 --> 00:22:45,039
first of all i'm not even going to

00:22:43,520 --> 00:22:46,400
support your your intelligence by

00:22:45,039 --> 00:22:48,720
breaking this down the

00:22:46,400 --> 00:22:50,480
the logic is obfuscated i'm completely

00:22:48,720 --> 00:22:54,080
ignoring all of the

00:22:50,480 --> 00:22:56,159
uh all the wonderful syntax that python

00:22:54,080 --> 00:22:58,480
offers to simplify this this is just

00:22:56,159 --> 00:23:02,000
plain nasty

00:22:58,480 --> 00:23:03,600
okay so what if i wrote code for

00:23:02,000 --> 00:23:05,600
finding the greatest common factor and i

00:23:03,600 --> 00:23:08,720
made it just complex but not complicated

00:23:05,600 --> 00:23:11,679
what would that look like oh

00:23:08,720 --> 00:23:13,280
much better tighten the logic up first

00:23:11,679 --> 00:23:13,919
of all first and foremost it's very

00:23:13,280 --> 00:23:15,840
clear

00:23:13,919 --> 00:23:17,200
what this is doing um you don't have to

00:23:15,840 --> 00:23:19,039
struggle to understand

00:23:17,200 --> 00:23:20,960
this it just takes more time to read it

00:23:19,039 --> 00:23:23,120
and i'm utilizing the syntactic sugar

00:23:20,960 --> 00:23:25,440
i've got a set comprehension i've got

00:23:23,120 --> 00:23:26,720
i've got a conditional in this

00:23:25,440 --> 00:23:29,280
comprehension

00:23:26,720 --> 00:23:30,880
um so this is much cleaner and it works

00:23:29,280 --> 00:23:33,919
just as well

00:23:30,880 --> 00:23:35,039
so um and again it

00:23:33,919 --> 00:23:37,360
you can get set comprehensions list

00:23:35,039 --> 00:23:39,360
comprehensions to get away from you do

00:23:37,360 --> 00:23:43,039
be careful of them but this is a good

00:23:39,360 --> 00:23:45,200
case of a nice clean set comprehension

00:23:43,039 --> 00:23:46,960
in action this is good complex code

00:23:45,200 --> 00:23:50,000
there's no simpler way to do this

00:23:46,960 --> 00:23:54,080
that i know of so

00:23:50,000 --> 00:23:57,760
pythonic code is simple or it's complex

00:23:54,080 --> 00:24:00,080
and it is obvious so with those in mind

00:23:57,760 --> 00:24:00,960
if the implementation is hard to explain

00:24:00,080 --> 00:24:03,840
it's a bad

00:24:00,960 --> 00:24:05,679
idea that is if you are having a hard

00:24:03,840 --> 00:24:06,720
time explaining the code it's not

00:24:05,679 --> 00:24:09,200
obvious

00:24:06,720 --> 00:24:10,799
and it's not simple it's probably not

00:24:09,200 --> 00:24:12,480
even complex at that point it's getting

00:24:10,799 --> 00:24:14,720
towards complicated

00:24:12,480 --> 00:24:18,000
the problem with cleverness is basically

00:24:14,720 --> 00:24:20,400
that it's exclusionary that's the poison

00:24:18,000 --> 00:24:21,919
because it feels clever because you're

00:24:20,400 --> 00:24:23,600
part of a select set

00:24:21,919 --> 00:24:25,440
that can understand this you have the

00:24:23,600 --> 00:24:26,000
prowess to understand what is going on

00:24:25,440 --> 00:24:29,120
here

00:24:26,000 --> 00:24:32,880
and that is just that's just terrible

00:24:29,120 --> 00:24:33,200
so um cleverness is exclusionary don't

00:24:32,880 --> 00:24:34,799
be

00:24:33,200 --> 00:24:36,799
clever you end up excluding yourself

00:24:34,799 --> 00:24:37,919
sooner or later because in two in

00:24:36,799 --> 00:24:40,159
six months you're not going to remember

00:24:37,919 --> 00:24:42,400
what that clever code did

00:24:40,159 --> 00:24:44,320
but there's an important corollary here

00:24:42,400 --> 00:24:46,559
if the implementation is easy to explain

00:24:44,320 --> 00:24:48,559
it may be a good idea because while all

00:24:46,559 --> 00:24:52,720
pythonic code is easy to explain

00:24:48,559 --> 00:24:56,159
not all easy to explain code is actually

00:24:52,720 --> 00:24:58,559
good or pythonic and

00:24:56,159 --> 00:25:00,559
just as all pythonic code is obvious but

00:24:58,559 --> 00:25:02,480
not all obvious code is pythonic

00:25:00,559 --> 00:25:04,320
this is kind of along the same lines as

00:25:02,480 --> 00:25:05,679
all snakes or reptiles but not all

00:25:04,320 --> 00:25:08,080
reptiles are snakes

00:25:05,679 --> 00:25:09,120
so your code should be easy to explain

00:25:08,080 --> 00:25:12,159
but it needs to

00:25:09,120 --> 00:25:14,880
fulfill the other criteria as well

00:25:12,159 --> 00:25:16,159
so are you still with me uh pythonic

00:25:14,880 --> 00:25:18,960
code is readable

00:25:16,159 --> 00:25:19,679
beautiful obvious explicit and simple or

00:25:18,960 --> 00:25:22,799
at least

00:25:19,679 --> 00:25:25,520
complex to that aim pythonic code is

00:25:22,799 --> 00:25:26,960
flat uh why is that because it's hard to

00:25:25,520 --> 00:25:28,880
read deep nesting especially in

00:25:26,960 --> 00:25:29,600
production code we can't read white

00:25:28,880 --> 00:25:31,679
space

00:25:29,600 --> 00:25:33,279
and when it gets deep and complex it's

00:25:31,679 --> 00:25:34,960
really easy to make mistakes and get it

00:25:33,279 --> 00:25:35,840
wrong is this in the outer else or the

00:25:34,960 --> 00:25:38,400
inner if

00:25:35,840 --> 00:25:39,520
and by the way this only applies to code

00:25:38,400 --> 00:25:41,039
not to your

00:25:39,520 --> 00:25:44,240
data not to your folder structures and

00:25:41,039 --> 00:25:46,880
your collections this is for code

00:25:44,240 --> 00:25:48,320
this is overly nested code here i don't

00:25:46,880 --> 00:25:50,000
need to say much about this here but

00:25:48,320 --> 00:25:50,720
this is really prone to indentation

00:25:50,000 --> 00:25:52,320
errors

00:25:50,720 --> 00:25:54,559
it's hard to reason about what's going

00:25:52,320 --> 00:25:56,000
on in a multi-nested for loop

00:25:54,559 --> 00:25:58,799
and the line limits are now getting

00:25:56,000 --> 00:26:00,720
painful true sad story i worked with the

00:25:58,799 --> 00:26:03,679
python developer who switched

00:26:00,720 --> 00:26:05,679
to 120 line limits and two space

00:26:03,679 --> 00:26:08,799
indentation because he was nesting

00:26:05,679 --> 00:26:10,559
all the time uh that's if you need to do

00:26:08,799 --> 00:26:14,080
that you're nesting too much

00:26:10,559 --> 00:26:16,400
uh so just keep it flat

00:26:14,080 --> 00:26:18,080
um i'm instead of this multiple nesting

00:26:16,400 --> 00:26:20,080
thing i'm using intertools product

00:26:18,080 --> 00:26:23,440
editor tools is a great built-in

00:26:20,080 --> 00:26:24,720
library uh please use it it's very

00:26:23,440 --> 00:26:26,640
helpful

00:26:24,720 --> 00:26:28,480
this is much easier to reason about

00:26:26,640 --> 00:26:30,000
quick glance the documentation and the

00:26:28,480 --> 00:26:31,760
line limits are not a problem we have

00:26:30,000 --> 00:26:35,279
one level of indentation

00:26:31,760 --> 00:26:35,279
very unlikely to mess that up

00:26:36,000 --> 00:26:41,279
uh meanwhile sparse is better than dense

00:26:39,200 --> 00:26:42,880
a skilled musician or composer will tell

00:26:41,279 --> 00:26:43,360
you the single most important symbol in

00:26:42,880 --> 00:26:46,480
music

00:26:43,360 --> 00:26:48,080
is the rest as beethoven says the music

00:26:46,480 --> 00:26:49,840
is not in the notes but in the silence

00:26:48,080 --> 00:26:51,679
between

00:26:49,840 --> 00:26:53,440
because silence defines rhythm it

00:26:51,679 --> 00:26:54,960
defines dynamics and one note for the

00:26:53,440 --> 00:26:56,400
next without it music is just a

00:26:54,960 --> 00:26:59,039
cacophony

00:26:56,400 --> 00:27:00,960
the same is true of code white space

00:26:59,039 --> 00:27:02,240
gives us a chance to pause and consider

00:27:00,960 --> 00:27:03,919
what we've read

00:27:02,240 --> 00:27:06,640
it allows us to organize the code

00:27:03,919 --> 00:27:08,000
logically and again while one-liners

00:27:06,640 --> 00:27:10,080
make us feel clever

00:27:08,000 --> 00:27:12,640
uh don't be clever it sacrifices

00:27:10,080 --> 00:27:15,600
readability

00:27:12,640 --> 00:27:16,960
do i even need to say anything this is

00:27:15,600 --> 00:27:18,559
obviously pretty dense

00:27:16,960 --> 00:27:20,000
this is hard to read even though it's

00:27:18,559 --> 00:27:22,080
decent python

00:27:20,000 --> 00:27:24,799
of code at the white spacing is just

00:27:22,080 --> 00:27:26,880
terrible so let's fix that

00:27:24,799 --> 00:27:28,320
same code i haven't changed a single

00:27:26,880 --> 00:27:29,200
character in this code except the white

00:27:28,320 --> 00:27:31,200
space

00:27:29,200 --> 00:27:33,600
uh this is much easier to parse it's

00:27:31,200 --> 00:27:35,679
broken down into logical chunks

00:27:33,600 --> 00:27:37,760
and you know it's okay that it's a bit

00:27:35,679 --> 00:27:39,600
longer vertical space is there to use

00:27:37,760 --> 00:27:40,720
a side note if anyone's thinking that's

00:27:39,600 --> 00:27:42,799
not pythonic you could have just

00:27:40,720 --> 00:27:44,880
reversed the spring hey i optimized for

00:27:42,799 --> 00:27:48,000
time and space complexity on this one

00:27:44,880 --> 00:27:50,880
so this is pythonic for my goal it's for

00:27:48,000 --> 00:27:54,000
checking for a palindrome

00:27:50,880 --> 00:27:55,600
i'm gonna get through this here as

00:27:54,000 --> 00:27:57,440
quickly as i can then um

00:27:55,600 --> 00:27:59,120
i don't have any questions yet if anyone

00:27:57,440 --> 00:28:00,799
does have any questions uh put it in

00:27:59,120 --> 00:28:02,960
there if i don't get any of those i'll

00:28:00,799 --> 00:28:04,640
i'll probably go towards them

00:28:02,960 --> 00:28:06,159
i'll probably use a little more of my

00:28:04,640 --> 00:28:10,320
time so the

00:28:06,159 --> 00:28:13,520
the term exception is meaningful

00:28:10,320 --> 00:28:15,520
errors should never pass silently an

00:28:13,520 --> 00:28:17,840
error is an exceptional state

00:28:15,520 --> 00:28:19,840
it means we've left the happy path and

00:28:17,840 --> 00:28:21,360
we're now into a territory where we need

00:28:19,840 --> 00:28:23,600
intelligent intervention

00:28:21,360 --> 00:28:25,520
to resolve it correctly so if there is

00:28:23,600 --> 00:28:27,360
no intelligent intervention

00:28:25,520 --> 00:28:30,159
it's best to just crash the program at

00:28:27,360 --> 00:28:32,640
that point an error caught at its origin

00:28:30,159 --> 00:28:34,399
is always going to be easier to debug

00:28:32,640 --> 00:28:36,159
than errors created within

00:28:34,399 --> 00:28:37,919
when an exceptional state moves forward

00:28:36,159 --> 00:28:40,559
blindly

00:28:37,919 --> 00:28:42,480
and uh i like how python developer mike

00:28:40,559 --> 00:28:44,480
granat calls this the diaper

00:28:42,480 --> 00:28:46,480
anti-pattern whenever you have this

00:28:44,480 --> 00:28:48,159
catch-all because you're you're catching

00:28:46,480 --> 00:28:50,000
all of the errors and you're silencing

00:28:48,159 --> 00:28:52,720
them all the exact opposite at this

00:28:50,000 --> 00:28:52,720
point of the zen

00:28:52,799 --> 00:28:56,640
mike says in the harsh and unforgiving

00:28:54,640 --> 00:28:58,000
real world the source may be tens

00:28:56,640 --> 00:29:00,159
hundreds or even thousands

00:28:58,000 --> 00:29:01,840
of lines away buried under umpteen

00:29:00,159 --> 00:29:02,399
layers of abstractions in a different

00:29:01,840 --> 00:29:04,880
module

00:29:02,399 --> 00:29:07,039
or worse in some third-party library and

00:29:04,880 --> 00:29:08,880
when it fails just as diapers fail it'll

00:29:07,039 --> 00:29:10,720
fail in the small hours of the night

00:29:08,880 --> 00:29:12,080
when we would rather be sleeping and

00:29:10,720 --> 00:29:14,799
someone important will make an awful

00:29:12,080 --> 00:29:18,080
fuss about it it will not be fun

00:29:14,799 --> 00:29:21,200
so all that to say um you know

00:29:18,080 --> 00:29:23,279
don't silence errors

00:29:21,200 --> 00:29:24,559
uh just you know don't don't let them

00:29:23,279 --> 00:29:27,840
pass silently

00:29:24,559 --> 00:29:31,919
let them explode where they're happening

00:29:27,840 --> 00:29:34,399
unless explicitly silenced

00:29:31,919 --> 00:29:36,480
it's okay to explicitly silence an error

00:29:34,399 --> 00:29:38,000
but only if you've already applied

00:29:36,480 --> 00:29:39,520
intelligent intervention

00:29:38,000 --> 00:29:41,279
or you've otherwise resolved the

00:29:39,520 --> 00:29:42,640
exceptional state

00:29:41,279 --> 00:29:44,159
so if you already know okay i don't have

00:29:42,640 --> 00:29:45,120
to worry about key errors here because

00:29:44,159 --> 00:29:47,760
i'm just going to return

00:29:45,120 --> 00:29:49,360
none that's fine silence that error and

00:29:47,760 --> 00:29:51,919
move on

00:29:49,360 --> 00:29:54,080
but if there's an unexpected error there

00:29:51,919 --> 00:29:55,679
perhaps you get a runtime error

00:29:54,080 --> 00:29:57,279
which if you're getting out on a

00:29:55,679 --> 00:29:58,480
dictionary read you got bigger problems

00:29:57,279 --> 00:30:01,760
than errors

00:29:58,480 --> 00:30:03,679
but you need to be specific silence only

00:30:01,760 --> 00:30:05,039
the error you resolve and let everything

00:30:03,679 --> 00:30:06,559
else continue to blow up

00:30:05,039 --> 00:30:08,080
at the source just because it works on

00:30:06,559 --> 00:30:09,679
your machine and you pass the test

00:30:08,080 --> 00:30:12,240
does not mean that it's actually going

00:30:09,679 --> 00:30:16,320
to be uh safe and safe

00:30:12,240 --> 00:30:16,320
so uh be very aware of that

00:30:16,960 --> 00:30:23,279
explicit is better than implicit okay

00:30:20,720 --> 00:30:25,200
so uh these uh next two aphorisms really

00:30:23,279 --> 00:30:27,039
aren't so much about pythonic code as

00:30:25,200 --> 00:30:29,440
about pythonic coding

00:30:27,039 --> 00:30:30,320
and the biggest lie we tell ourselves i

00:30:29,440 --> 00:30:33,840
think is

00:30:30,320 --> 00:30:36,559
the is i will do it later so tim says no

00:30:33,840 --> 00:30:37,760
now is better than never because when

00:30:36,559 --> 00:30:40,240
you say i'll do it later

00:30:37,760 --> 00:30:40,799
you probably won't and the longer you

00:30:40,240 --> 00:30:41,760
wait

00:30:40,799 --> 00:30:44,799
the more you're going to have to

00:30:41,760 --> 00:30:47,840
refactor your code to pull it off

00:30:44,799 --> 00:30:49,600
so the important thing is to do

00:30:47,840 --> 00:30:51,520
do whatever you're thinking about while

00:30:49,600 --> 00:30:53,440
you're thinking about it while the idea

00:30:51,520 --> 00:30:55,679
is fresh in your mind just implement it

00:30:53,440 --> 00:30:57,919
or at least set yourself up to be able

00:30:55,679 --> 00:31:00,559
to easily implement it later

00:30:57,919 --> 00:31:01,840
uh a really good example of this is at

00:31:00,559 --> 00:31:05,279
my software company

00:31:01,840 --> 00:31:06,799
um we are uh building a game

00:31:05,279 --> 00:31:08,559
and we have some features we want to add

00:31:06,799 --> 00:31:10,159
in a later version but we don't want to

00:31:08,559 --> 00:31:11,919
add them right now we're trying to limit

00:31:10,159 --> 00:31:14,559
our feature set for 1.0

00:31:11,919 --> 00:31:16,640
so we simply left spaces for us in the

00:31:14,559 --> 00:31:17,279
code and we structured certain parts of

00:31:16,640 --> 00:31:19,120
the code

00:31:17,279 --> 00:31:21,200
to allow us to do these things down the

00:31:19,120 --> 00:31:24,399
road we aren't doing them right now but

00:31:21,200 --> 00:31:24,399
we have the space to do them

00:31:24,480 --> 00:31:28,320
but important and perhaps confusing

00:31:27,200 --> 00:31:30,240
corollary

00:31:28,320 --> 00:31:31,679
although never is often better than

00:31:30,240 --> 00:31:33,200
right now

00:31:31,679 --> 00:31:35,360
isn't this a contradiction that now is

00:31:33,200 --> 00:31:36,480
better than ever no

00:31:35,360 --> 00:31:39,679
because of the other lab we tell

00:31:36,480 --> 00:31:42,399
ourselves it'll only take a minute

00:31:39,679 --> 00:31:43,600
yeah right if you have to drop

00:31:42,399 --> 00:31:46,880
everything to add a bell

00:31:43,600 --> 00:31:50,320
a whistle or a gong it's just not worth

00:31:46,880 --> 00:31:52,240
adding at all uh so this is all about

00:31:50,320 --> 00:31:54,320
priorities you need to ask yourself is

00:31:52,240 --> 00:31:55,679
it really needed or are we just piling

00:31:54,320 --> 00:31:58,240
on needless features

00:31:55,679 --> 00:32:00,559
i can't remember who coined this phrase

00:31:58,240 --> 00:32:03,440
but someone said that uh that all

00:32:00,559 --> 00:32:03,840
all software uh will naturally evolve

00:32:03,440 --> 00:32:08,240
until

00:32:03,840 --> 00:32:10,559
it is capable of sending email um so

00:32:08,240 --> 00:32:12,480
i want to be very careful not to let

00:32:10,559 --> 00:32:15,840
unnecessary features creep in and push

00:32:12,480 --> 00:32:15,840
out more important things

00:32:18,320 --> 00:32:22,320
special cases aren't special enough to

00:32:20,320 --> 00:32:23,120
break the rules tim says about this

00:32:22,320 --> 00:32:27,039
whole

00:32:23,120 --> 00:32:29,200
zen but my code is different you say

00:32:27,039 --> 00:32:30,080
okay great but that's not actually an

00:32:29,200 --> 00:32:32,720
excuse

00:32:30,080 --> 00:32:33,200
because new code is really the only code

00:32:32,720 --> 00:32:36,159
worth

00:32:33,200 --> 00:32:36,960
writing uh it may be a similar goal but

00:32:36,159 --> 00:32:40,080
your code

00:32:36,960 --> 00:32:42,240
is new hopefully your approach is new so

00:32:40,080 --> 00:32:43,840
if novelty were an excuse there would be

00:32:42,240 --> 00:32:46,640
no point in having a standard

00:32:43,840 --> 00:32:47,519
at all but we need a standard in order

00:32:46,640 --> 00:32:51,360
to make things

00:32:47,519 --> 00:32:52,960
same corollary although practicality

00:32:51,360 --> 00:32:54,880
beats purity

00:32:52,960 --> 00:32:56,960
because you have to remember the aim of

00:32:54,880 --> 00:32:58,720
the zen or any good standard is to

00:32:56,960 --> 00:32:59,760
protect and enforce readability

00:32:58,720 --> 00:33:02,080
maintainability

00:32:59,760 --> 00:33:04,000
stability and performance and if the

00:33:02,080 --> 00:33:06,320
rules are detracting from these goals

00:33:04,000 --> 00:33:08,640
we may be justified in breaking the

00:33:06,320 --> 00:33:08,640
rules

00:33:09,600 --> 00:33:13,760
so you can break the rules but you have

00:33:12,480 --> 00:33:16,080
to have an objective

00:33:13,760 --> 00:33:16,960
reason to do so and that reason can only

00:33:16,080 --> 00:33:20,000
come from the

00:33:16,960 --> 00:33:21,919
end um you know do you need to break a

00:33:20,000 --> 00:33:25,360
rule in order to keep this code

00:33:21,919 --> 00:33:27,679
um stable perhaps

00:33:25,360 --> 00:33:28,399
or maintainable okay then go ahead and

00:33:27,679 --> 00:33:30,000
break the

00:33:28,399 --> 00:33:31,519
break the rule but if the only reason

00:33:30,000 --> 00:33:33,200
you're breaking the rule you have to

00:33:31,519 --> 00:33:34,720
think carefully about this

00:33:33,200 --> 00:33:36,480
the reason you're breaking the rule is

00:33:34,720 --> 00:33:37,679
because of how you chose to implement

00:33:36,480 --> 00:33:39,519
your code

00:33:37,679 --> 00:33:42,159
what needs to change is not the rule but

00:33:39,519 --> 00:33:45,039
your implementation

00:33:42,159 --> 00:33:46,880
uh so make sure you are only getting

00:33:45,039 --> 00:33:50,080
your exceptions from the end and not

00:33:46,880 --> 00:33:51,120
the means okay so on the label i said 20

00:33:50,080 --> 00:33:53,519
aphorisms

00:33:51,120 --> 00:33:54,480
but the zen only has 19. like i said

00:33:53,519 --> 00:33:58,000
don't worry this is

00:33:54,480 --> 00:33:58,399
not an off by one error because as tim

00:33:58,000 --> 00:34:01,519
said

00:33:58,399 --> 00:34:03,679
in his original post 20 counting the one

00:34:01,519 --> 00:34:05,919
i'm leaving for wedo to fill in

00:34:03,679 --> 00:34:07,840
it left a spot for the benevolent

00:34:05,919 --> 00:34:08,639
dictator for life to add something but

00:34:07,840 --> 00:34:12,399
widow never

00:34:08,639 --> 00:34:12,879
did and perhaps this is just as well

00:34:12,399 --> 00:34:15,119
because

00:34:12,879 --> 00:34:17,440
python really isn't the work of just one

00:34:15,119 --> 00:34:18,639
person it's the work of the entire

00:34:17,440 --> 00:34:20,879
community

00:34:18,639 --> 00:34:22,720
it's always changing and growing and

00:34:20,879 --> 00:34:24,240
evolving just imagine what euro python

00:34:22,720 --> 00:34:25,440
2030 is going to look like it's going to

00:34:24,240 --> 00:34:27,200
be phenomenal

00:34:25,440 --> 00:34:29,040
there's going to be ideas here that are

00:34:27,200 --> 00:34:31,599
just completely new to us

00:34:29,040 --> 00:34:32,639
um and it's going to make all the trendy

00:34:31,599 --> 00:34:34,800
and new

00:34:32,639 --> 00:34:38,399
and fresh stuff from this conference

00:34:34,800 --> 00:34:38,399
feel really dusty and outdated

00:34:39,040 --> 00:34:43,839
the zen of python fits neatly inside the

00:34:42,079 --> 00:34:45,359
principle of pythonic code but you

00:34:43,839 --> 00:34:48,159
really can't contain

00:34:45,359 --> 00:34:51,359
pythonic into any one document there's a

00:34:48,159 --> 00:34:54,919
certain flavor to it that the zen

00:34:51,359 --> 00:34:57,919
somewhat approximates but can't fully

00:34:54,919 --> 00:34:57,919
encapsulate

00:34:58,000 --> 00:35:01,359
pythonic is just something you learn

00:34:59,440 --> 00:35:03,440
from experience it's always being

00:35:01,359 --> 00:35:06,079
debated parsed rehash reworked

00:35:03,440 --> 00:35:08,400
challenged improved but interestingly

00:35:06,079 --> 00:35:09,760
since 1999 the zen has remained

00:35:08,400 --> 00:35:12,800
completely unchanged

00:35:09,760 --> 00:35:15,599
pythonic code is always readable obvious

00:35:12,800 --> 00:35:17,440
beautiful explicit and simple or complex

00:35:15,599 --> 00:35:19,040
we'll just find different ways of doing

00:35:17,440 --> 00:35:20,079
these things and better ways of doing

00:35:19,040 --> 00:35:22,000
these things

00:35:20,079 --> 00:35:23,680
so i really hope by explaining the xena

00:35:22,000 --> 00:35:25,200
python to you i've given you some

00:35:23,680 --> 00:35:26,320
practical insights in how you can

00:35:25,200 --> 00:35:29,599
improve

00:35:26,320 --> 00:35:34,240
your code using this

00:35:29,599 --> 00:35:34,240
rather infamously snarky little poem

00:35:34,880 --> 00:35:48,079
so yeah thank you thank you very much

00:35:45,040 --> 00:35:49,599
so i do have uh i do have one question

00:35:48,079 --> 00:35:51,520
here and if anyone else wants to chat

00:35:49,599 --> 00:35:53,280
with me after this i'll be in the uh

00:35:51,520 --> 00:35:54,880
talk writing zen like python channel

00:35:53,280 --> 00:35:56,960
over on discord

00:35:54,880 --> 00:35:58,000
um and i'll be happy to chat with you

00:35:56,960 --> 00:36:01,520
all there

00:35:58,000 --> 00:36:03,200
um so i have one question uh from martin

00:36:01,520 --> 00:36:05,119
he says what's your opinion on code

00:36:03,200 --> 00:36:07,119
formatters like black that made code

00:36:05,119 --> 00:36:08,240
universally readable but in some cases

00:36:07,119 --> 00:36:10,560
ugly

00:36:08,240 --> 00:36:11,599
um i would say well like with most

00:36:10,560 --> 00:36:14,320
things it

00:36:11,599 --> 00:36:16,079
just depends on what you're doing

00:36:14,320 --> 00:36:18,480
personally i like black

00:36:16,079 --> 00:36:20,079
um that that's my own take on it i i

00:36:18,480 --> 00:36:22,960
rather like it because

00:36:20,079 --> 00:36:24,240
um it generally makes my code more

00:36:22,960 --> 00:36:27,359
readable and not less

00:36:24,240 --> 00:36:28,320
but if you are consistently discovering

00:36:27,359 --> 00:36:31,040
that your

00:36:28,320 --> 00:36:31,440
uh code is not being improved by black

00:36:31,040 --> 00:36:33,839
then

00:36:31,440 --> 00:36:35,119
this is why we have other tools as why

00:36:33,839 --> 00:36:36,880
we have um

00:36:35,119 --> 00:36:38,960
you know pie flakes and or not pie

00:36:36,880 --> 00:36:41,760
flakes um

00:36:38,960 --> 00:36:43,119
uh well we have pepe and we have um

00:36:41,760 --> 00:36:44,960
various other tools

00:36:43,119 --> 00:36:46,800
that can their names are escaping me

00:36:44,960 --> 00:36:48,880
right now that you can customize to meet

00:36:46,800 --> 00:36:51,760
your needs more specifically

00:36:48,880 --> 00:36:52,160
um so you know if black doesn't work for

00:36:51,760 --> 00:36:54,320
you

00:36:52,160 --> 00:36:55,599
um just find something else or you know

00:36:54,320 --> 00:36:57,200
you can go the old-fashioned route and

00:36:55,599 --> 00:36:59,359
just memorize paper

00:36:57,200 --> 00:37:00,560
actually not hard to get used to once

00:36:59,359 --> 00:37:01,599
you've been working with it for a little

00:37:00,560 --> 00:37:03,760
while

00:37:01,599 --> 00:37:05,440
and then you can just um apply it

00:37:03,760 --> 00:37:08,160
yourself and not worry about your

00:37:05,440 --> 00:37:10,480
auto formatter and its opinions on

00:37:08,160 --> 00:37:10,480
things

00:37:10,800 --> 00:37:14,800
so um yeah i'm actually finishing a

00:37:14,160 --> 00:37:17,359
little bit

00:37:14,800 --> 00:37:18,240
early here which is okay that's awesome

00:37:17,359 --> 00:37:21,680
so

00:37:18,240 --> 00:37:25,119
uh stay tuned because coming up next

00:37:21,680 --> 00:37:26,320
we have our keynote speaker jessica

00:37:25,119 --> 00:37:29,920
mckeller

00:37:26,320 --> 00:37:32,560
um and i'm actually going to turn things

00:37:29,920 --> 00:37:34,000
over at this point to the next session

00:37:32,560 --> 00:37:36,800
manager so it's been uh

00:37:34,000 --> 00:37:37,280
awesome seeing y'all here and i will

00:37:36,800 --> 00:37:39,520
answer

00:37:37,280 --> 00:37:44,720
uh any other questions you all have over

00:37:39,520 --> 00:37:44,720

YouTube URL: https://www.youtube.com/watch?v=ZHY5SCBckwg


