Title: Ben Nuttall - Tools for maintaining an open source Python project
Publication date: 2020-09-15
Playlist: EuroPython 2020
Description: 
	"Tools for maintaining an open source Python project
EuroPython 2020 - Talk - 2020-07-23 - Microsoft
Online

By Ben Nuttall

There is a wealth of amazing tools freely available to open source software developers to use to maintain their projects. Practically every problem we face or are likely to face in software development has been lived through and solved many times over. Patterns emerge for dealing with development practises and we build our software using the tools made by the previous generation of developers.

We're very fortunate to operate in an amazing open source ecosystem where we've learned we're stronger when we build on each other's foundations. We're constantly laying new foundations for ourselves and we share our ways of working with the world. We now have a very sophisticated set of tools for developing, managing, testing and documenting our new projects without reinventing the wheel.

But we don't discover all the tools at once - we pick them up as we go along, as we find uses for them and we hear about them. I'm going to share a range of great tools I use to maintain some popular open source Python projects, and explain how the difference they've made.

The talk covers:


Software packaging and distribution
Licensing
Virtual environments
Software testing
Continuous integration
Git &amp; GitHub
Contributor community
Project management tools
Documentation tools


The talk demonstrates examples for development of Python projects on Linux, but the tools can be used cross-language and cross-platform.



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2020.europython.eu/events/speaker-release-agreement/

    "
Captions: 
	00:00:06,080 --> 00:00:11,920
it's almost ready it's

00:00:07,440 --> 00:00:11,920
ben natto he will talk

00:00:12,960 --> 00:00:17,199
about his open source python project

00:00:15,519 --> 00:00:18,400
tools for maintaining an open source

00:00:17,199 --> 00:00:20,720
python project

00:00:18,400 --> 00:00:22,960
a walkthrough of some great tools i use

00:00:20,720 --> 00:00:26,880
for developing testing maintaining

00:00:22,960 --> 00:00:31,840
and managing projects i see he's online

00:00:26,880 --> 00:00:31,840
so please share your screen

00:00:34,800 --> 00:00:42,079
and let's go okay let me get this

00:00:38,559 --> 00:00:43,520
full screen okay can you see my slides

00:00:42,079 --> 00:00:47,120
okay

00:00:43,520 --> 00:00:49,840
perfect great okay well thanks for that

00:00:47,120 --> 00:00:51,199
uh so yeah i'm going to be speaking

00:00:49,840 --> 00:00:52,640
about tools for maintaining an open

00:00:51,199 --> 00:00:55,920
source python project

00:00:52,640 --> 00:00:56,480
um i'm a i'm a software engineer at the

00:00:55,920 --> 00:00:58,800
bbc

00:00:56,480 --> 00:00:59,600
i work in an innovation team called bbc

00:00:58,800 --> 00:01:02,640
news labs

00:00:59,600 --> 00:01:04,080
um i joined there in january from

00:01:02,640 --> 00:01:05,760
from the raspberry pi foundation so i

00:01:04,080 --> 00:01:06,640
was i was there the last six years so if

00:01:05,760 --> 00:01:08,880
you've seen me

00:01:06,640 --> 00:01:10,080
speak before i was probably advocating

00:01:08,880 --> 00:01:13,119
raspberry pi

00:01:10,080 --> 00:01:14,159
um i created the gpio0 library and the

00:01:13,119 --> 00:01:16,159
pi wheels project

00:01:14,159 --> 00:01:18,640
and also uh one of the contributors

00:01:16,159 --> 00:01:21,200
towards the pi jokes project

00:01:18,640 --> 00:01:24,240
i write for opensource.com and you can

00:01:21,200 --> 00:01:26,560
find me on twitter and that's my github

00:01:24,240 --> 00:01:27,680
this is what i um used to look like in

00:01:26,560 --> 00:01:29,600
real life and

00:01:27,680 --> 00:01:31,439
now i kind of look more like this as you

00:01:29,600 --> 00:01:34,000
can see um lock down

00:01:31,439 --> 00:01:34,960
lack of haircut and this is what i look

00:01:34,000 --> 00:01:38,479
like online this

00:01:34,960 --> 00:01:40,640
this is my avatar so

00:01:38,479 --> 00:01:42,079
just to give you um a brief over what

00:01:40,640 --> 00:01:43,840
this uh talk covers

00:01:42,079 --> 00:01:45,280
i'm gonna be talking about how to

00:01:43,840 --> 00:01:46,000
organize a python module and how to

00:01:45,280 --> 00:01:49,200
structure

00:01:46,000 --> 00:01:51,119
uh the files uh how to how people

00:01:49,200 --> 00:01:53,200
distribute software and different

00:01:51,119 --> 00:01:54,479
different methods of doing that and why

00:01:53,200 --> 00:01:57,600
we do it

00:01:54,479 --> 00:01:59,520
uh using git and github

00:01:57,600 --> 00:02:01,040
to version control and publish your and

00:01:59,520 --> 00:02:02,880
share and collaborate with your

00:02:01,040 --> 00:02:04,159
your software with other people i'm

00:02:02,880 --> 00:02:06,159
gonna be touching on virtual

00:02:04,159 --> 00:02:08,479
environments

00:02:06,159 --> 00:02:10,640
testing and testing your software and

00:02:08,479 --> 00:02:13,200
automating your testing

00:02:10,640 --> 00:02:13,920
uh documentation documenting your your

00:02:13,200 --> 00:02:16,640
code and

00:02:13,920 --> 00:02:19,599
your project and a little bit on uh

00:02:16,640 --> 00:02:19,599
licensing your software

00:02:19,680 --> 00:02:23,280
what this talk is not so this is not

00:02:21,520 --> 00:02:24,080
going to be a thorough follow-along

00:02:23,280 --> 00:02:26,640
tutorial

00:02:24,080 --> 00:02:27,760
uh because i mentioned about you know 50

00:02:26,640 --> 00:02:29,280
different tools

00:02:27,760 --> 00:02:30,800
uh and i'm just going to be mentioning

00:02:29,280 --> 00:02:34,239
them mostly in passing

00:02:30,800 --> 00:02:37,040
um you're not going to be able to um

00:02:34,239 --> 00:02:38,879
follow along and and kind of do examples

00:02:37,040 --> 00:02:41,360
and things as i go along i'm just gonna

00:02:38,879 --> 00:02:41,920
kind of quickly brief over them and um

00:02:41,360 --> 00:02:43,280
and

00:02:41,920 --> 00:02:44,879
you know kind of give you the the big

00:02:43,280 --> 00:02:45,840
picture if you want to learn more about

00:02:44,879 --> 00:02:47,280
each of them

00:02:45,840 --> 00:02:49,519
uh i'll tell you where you can you can

00:02:47,280 --> 00:02:50,800
find out more i'm also not going to be

00:02:49,519 --> 00:02:52,239
telling you which tools you should be

00:02:50,800 --> 00:02:54,080
using or which tools to use

00:02:52,239 --> 00:02:55,760
um it's not my job to be telling you

00:02:54,080 --> 00:02:58,080
which which tools um

00:02:55,760 --> 00:02:59,440
you should be using i'm just sharing the

00:02:58,080 --> 00:03:00,400
ones that i use and if i've not

00:02:59,440 --> 00:03:01,840
mentioned another tool

00:03:00,400 --> 00:03:04,080
it's either because i've not come across

00:03:01,840 --> 00:03:06,879
it or the examples i want to share

00:03:04,080 --> 00:03:07,440
with the tool i've chosen um everyone

00:03:06,879 --> 00:03:09,040
has

00:03:07,440 --> 00:03:10,720
the right to choose whatever tools they

00:03:09,040 --> 00:03:13,360
want to use

00:03:10,720 --> 00:03:14,159
i'm also not telling you that in order

00:03:13,360 --> 00:03:15,680
to be a proper

00:03:14,159 --> 00:03:17,120
considered a proper python programmer

00:03:15,680 --> 00:03:20,159
you need to know about all of these

00:03:17,120 --> 00:03:22,319
tools and need to know them inside out

00:03:20,159 --> 00:03:24,560
so i hope i hope that doesn't that that

00:03:22,319 --> 00:03:26,640
comes through

00:03:24,560 --> 00:03:27,920
so just to give you a background what a

00:03:26,640 --> 00:03:29,920
lot of the

00:03:27,920 --> 00:03:32,640
contents of this talk where they've come

00:03:29,920 --> 00:03:34,720
from so the gpixer library i mentioned

00:03:32,640 --> 00:03:35,840
uh i developed this uh when it's working

00:03:34,720 --> 00:03:37,680
at raspberry pi

00:03:35,840 --> 00:03:39,040
it's a python library providing a simple

00:03:37,680 --> 00:03:42,239
api for physical

00:03:39,040 --> 00:03:44,080
physical computing with raspberry pi uh

00:03:42,239 --> 00:03:47,040
it eases the learning curve for young

00:03:44,080 --> 00:03:48,879
people beginners and other educators

00:03:47,040 --> 00:03:50,000
it's a nice pythonic api if you're an

00:03:48,879 --> 00:03:51,440
advanced programmer if you're an

00:03:50,000 --> 00:03:53,840
experienced programmer it's

00:03:51,440 --> 00:03:54,879
it's not just um a kind of an easier way

00:03:53,840 --> 00:03:57,200
to do things for kids

00:03:54,879 --> 00:03:58,239
it's also quite a nice nice way to do

00:03:57,200 --> 00:04:00,959
things once you know

00:03:58,239 --> 00:04:02,400
good pythonic uh to write the be able to

00:04:00,959 --> 00:04:04,480
write nice pythonic code

00:04:02,400 --> 00:04:06,239
with your gpo and your physical

00:04:04,480 --> 00:04:07,760
confusion with raspberry pi

00:04:06,239 --> 00:04:09,680
and you find that the docs and the

00:04:07,760 --> 00:04:11,920
github project there um

00:04:09,680 --> 00:04:14,239
i just wanted to share that um keto uh

00:04:11,920 --> 00:04:17,120
started playing around with a pie

00:04:14,239 --> 00:04:18,479
last year and he tweeted saying it about

00:04:17,120 --> 00:04:20,959
how he loved the library so

00:04:18,479 --> 00:04:23,120
a bit of a humble brag there quite

00:04:20,959 --> 00:04:26,160
pleased with that

00:04:23,120 --> 00:04:27,840
pie wheels my other project so this is

00:04:26,160 --> 00:04:30,240
the tooling for automating building

00:04:27,840 --> 00:04:33,280
wheels uh of everything on pi pi

00:04:30,240 --> 00:04:35,360
so wheels are uh binary distributions of

00:04:33,280 --> 00:04:38,080
compile compiled python libraries uh

00:04:35,360 --> 00:04:39,040
modules and pyrells.org is the

00:04:38,080 --> 00:04:41,680
repository

00:04:39,040 --> 00:04:43,199
um that that's built on uh that's built

00:04:41,680 --> 00:04:46,639
from the tooling so it's a whole

00:04:43,199 --> 00:04:48,320
repository like pipe.org

00:04:46,639 --> 00:04:50,160
it's a pip compatible repository that

00:04:48,320 --> 00:04:51,360
hosts arm wheels that have been built by

00:04:50,160 --> 00:04:55,280
the tooling

00:04:51,360 --> 00:04:57,280
that is pie wheels we natively compile

00:04:55,280 --> 00:04:58,479
arm wheels built on raspberry pi 3

00:04:57,280 --> 00:05:02,000
hardware targeting

00:04:58,479 --> 00:05:03,680
raspberry pi users and uh it's

00:05:02,000 --> 00:05:06,080
it's a the repository is hosted on a

00:05:03,680 --> 00:05:07,759
single raspberry pi in a in a cloud

00:05:06,080 --> 00:05:10,720
platform

00:05:07,759 --> 00:05:11,440
and it's and that single pie serves over

00:05:10,720 --> 00:05:14,000
a million

00:05:11,440 --> 00:05:15,600
downloads of wheels per uh every month

00:05:14,000 --> 00:05:16,960
and that's at pi wheels.org and the

00:05:15,600 --> 00:05:19,840
sources on github

00:05:16,960 --> 00:05:21,520
so with these two projects i work with a

00:05:19,840 --> 00:05:23,600
friend of mine called dave jones

00:05:21,520 --> 00:05:24,560
uh he's a professional pro programmer an

00:05:23,600 --> 00:05:27,360
amateur dentist

00:05:24,560 --> 00:05:29,120
uh this is a recent picture of him um

00:05:27,360 --> 00:05:31,440
before he performs some

00:05:29,120 --> 00:05:34,000
dentures do on his uh on his partner

00:05:31,440 --> 00:05:36,000
over um over the lockdown period

00:05:34,000 --> 00:05:37,360
um and i'm using this photo with

00:05:36,000 --> 00:05:39,919
permission

00:05:37,360 --> 00:05:41,840
uh he's uh dave is responsible for

00:05:39,919 --> 00:05:43,840
implementing my crazy ideas so with

00:05:41,840 --> 00:05:45,600
things like gpro zero and pie wheels

00:05:43,840 --> 00:05:47,039
what generally happens is i come up with

00:05:45,600 --> 00:05:48,160
something i said well this be good if we

00:05:47,039 --> 00:05:51,360
could do this

00:05:48,160 --> 00:05:52,720
and um he ends up implementing it what

00:05:51,360 --> 00:05:53,759
the way we tend to work is i write the

00:05:52,720 --> 00:05:55,520
first 90

00:05:53,759 --> 00:05:56,960
and then he goes on and writes the next

00:05:55,520 --> 00:06:00,720
90 percent

00:05:56,960 --> 00:06:02,400
um and um yeah

00:06:00,720 --> 00:06:04,160
so dave's co-author jupiter and pie

00:06:02,400 --> 00:06:05,039
will's with me and he's also got a bunch

00:06:04,160 --> 00:06:07,199
of other

00:06:05,039 --> 00:06:08,160
really really cool projects that he that

00:06:07,199 --> 00:06:11,039
he's built himself

00:06:08,160 --> 00:06:12,080
as well um and dave introduced me to a

00:06:11,039 --> 00:06:13,600
lot of the tools that i'm

00:06:12,080 --> 00:06:16,800
that i'm using in this talk so i wanted

00:06:13,600 --> 00:06:19,120
to give him a hat tip for that

00:06:16,800 --> 00:06:20,560
so uh when we start writing a python

00:06:19,120 --> 00:06:20,960
module it usually looks something like

00:06:20,560 --> 00:06:24,160
this

00:06:20,960 --> 00:06:25,440
you just have a file a python file um

00:06:24,160 --> 00:06:28,000
named after your project whatever your

00:06:25,440 --> 00:06:30,160
project is you write your code in there

00:06:28,000 --> 00:06:31,759
and that's how generally speaking that's

00:06:30,160 --> 00:06:35,199
how projects start

00:06:31,759 --> 00:06:37,280
so you start with that um now you might

00:06:35,199 --> 00:06:38,319
want to throw that up onto github so you

00:06:37,280 --> 00:06:40,560
can use um

00:06:38,319 --> 00:06:42,080
you can create a repository and push

00:06:40,560 --> 00:06:44,479
your your code up to

00:06:42,080 --> 00:06:46,160
a personal github repository so for

00:06:44,479 --> 00:06:47,600
instance under your own name so this is

00:06:46,160 --> 00:06:48,000
this is my username on github and this

00:06:47,600 --> 00:06:50,560
this

00:06:48,000 --> 00:06:51,599
is a project that belongs to my own user

00:06:50,560 --> 00:06:53,840
account

00:06:51,599 --> 00:06:55,520
um so you push it up and the way the way

00:06:53,840 --> 00:06:57,280
github uh works is uh

00:06:55,520 --> 00:06:59,599
at a very base level is that it it's

00:06:57,280 --> 00:07:01,199
like providing uh so this is a folder

00:06:59,599 --> 00:07:03,120
containing a single file

00:07:01,199 --> 00:07:05,039
and if i create a git repository of that

00:07:03,120 --> 00:07:07,440
and push it to github

00:07:05,039 --> 00:07:09,039
it will essentially put the folder

00:07:07,440 --> 00:07:12,240
structure of

00:07:09,039 --> 00:07:13,599
um of my project online in a really

00:07:12,240 --> 00:07:15,039
really basic way and obviously it does

00:07:13,599 --> 00:07:18,639
much more

00:07:15,039 --> 00:07:20,240
um you can also use create a github

00:07:18,639 --> 00:07:22,560
organization for your project so

00:07:20,240 --> 00:07:24,319
especially if you have a a project which

00:07:22,560 --> 00:07:25,680
comprises multiple components multiple

00:07:24,319 --> 00:07:27,360
different repositories

00:07:25,680 --> 00:07:29,280
you could have different positions under

00:07:27,360 --> 00:07:30,720
a particular organization name so this

00:07:29,280 --> 00:07:32,000
might be a company it might be a

00:07:30,720 --> 00:07:33,840
an open source project it might be a

00:07:32,000 --> 00:07:36,720
wider group or something like that

00:07:33,840 --> 00:07:37,440
so gpi0 for instance um you can actually

00:07:36,720 --> 00:07:39,759
move

00:07:37,440 --> 00:07:41,599
things from a personal account to a to

00:07:39,759 --> 00:07:42,960
being under an organization

00:07:41,599 --> 00:07:44,800
uh so i did that with both of these

00:07:42,960 --> 00:07:45,199
projects gpr0 and pi wheels have their

00:07:44,800 --> 00:07:47,120
own

00:07:45,199 --> 00:07:48,240
organizations and the multiple

00:07:47,120 --> 00:07:51,599
repositories belong

00:07:48,240 --> 00:07:54,160
uh in in each organization

00:07:51,599 --> 00:07:56,000
so github provides a way to add

00:07:54,160 --> 00:07:57,919
collaborators to your project so you can

00:07:56,000 --> 00:08:00,000
invite individual github members github

00:07:57,919 --> 00:08:01,360
users um or you can create a team and

00:08:00,000 --> 00:08:03,520
say these people have access to these

00:08:01,360 --> 00:08:05,520
repositories these people have

00:08:03,520 --> 00:08:07,039
read access if it's a private repository

00:08:05,520 --> 00:08:09,919
that kind of thing

00:08:07,039 --> 00:08:11,680
um and uh and with an orchestrate

00:08:09,919 --> 00:08:13,599
organization obviously you you invite

00:08:11,680 --> 00:08:15,599
them to the organization and they

00:08:13,599 --> 00:08:17,440
they and they have whatever access that

00:08:15,599 --> 00:08:20,080
you've given them

00:08:17,440 --> 00:08:21,440
so get git uh has branches and so with

00:08:20,080 --> 00:08:22,960
github when you when you push up

00:08:21,440 --> 00:08:23,759
multiple branches of code you could be

00:08:22,960 --> 00:08:25,440
working on

00:08:23,759 --> 00:08:26,639
one feature that's not quite ready to be

00:08:25,440 --> 00:08:29,039
merged yet and you could be working on

00:08:26,639 --> 00:08:31,360
it and share it um

00:08:29,039 --> 00:08:32,080
online on github and other people can

00:08:31,360 --> 00:08:34,159
see it

00:08:32,080 --> 00:08:36,479
uh but also you know other people will

00:08:34,159 --> 00:08:38,320
be working on other on other

00:08:36,479 --> 00:08:39,519
parts of a project on different branches

00:08:38,320 --> 00:08:42,399
and they can be managed

00:08:39,519 --> 00:08:44,000
that way and with github you get a

00:08:42,399 --> 00:08:46,159
visual representation of what's going on

00:08:44,000 --> 00:08:46,159
there

00:08:46,160 --> 00:08:49,200
um so uh you with with github releases

00:08:48,720 --> 00:08:51,680
so

00:08:49,200 --> 00:08:52,880
if you tag a a git commit with a with a

00:08:51,680 --> 00:08:55,279
with a release

00:08:52,880 --> 00:08:56,399
name then you can you can share them

00:08:55,279 --> 00:08:57,760
like this and you can see

00:08:56,399 --> 00:09:00,160
the different points at which uh

00:08:57,760 --> 00:09:03,440
versions have been released

00:09:00,160 --> 00:09:06,480
github provides uh issues which are

00:09:03,440 --> 00:09:09,440
a really good way of both

00:09:06,480 --> 00:09:10,160
you accepting bug uh bug reports from

00:09:09,440 --> 00:09:12,399
your users

00:09:10,160 --> 00:09:13,680
and also for yourself to as the as a

00:09:12,399 --> 00:09:14,959
maintainer to

00:09:13,680 --> 00:09:17,040
kind of drive the development of your

00:09:14,959 --> 00:09:19,839
project and your roadmap actually well

00:09:17,040 --> 00:09:21,200
the way i tend to do things is i if i

00:09:19,839 --> 00:09:22,080
want to see a feature in my library that

00:09:21,200 --> 00:09:24,160
i'm going to implement

00:09:22,080 --> 00:09:25,600
i created an issue saying it would be

00:09:24,160 --> 00:09:27,200
nice if we had this or

00:09:25,600 --> 00:09:28,959
you know it would be good if we if we

00:09:27,200 --> 00:09:30,880
did this and describe it

00:09:28,959 --> 00:09:32,560
in whatever detail and either i get

00:09:30,880 --> 00:09:33,519
around to doing it or somebody else

00:09:32,560 --> 00:09:34,480
might be able to pick it up in the

00:09:33,519 --> 00:09:36,560
future and

00:09:34,480 --> 00:09:38,399
and do it themselves commit the code and

00:09:36,560 --> 00:09:40,720
close the issue

00:09:38,399 --> 00:09:41,600
and you can tag lay tag issues with

00:09:40,720 --> 00:09:44,320
labels and

00:09:41,600 --> 00:09:45,120
and organize them in different ways pull

00:09:44,320 --> 00:09:46,800
requests

00:09:45,120 --> 00:09:48,480
this is a way for once your code is on

00:09:46,800 --> 00:09:50,399
github and accessible to others

00:09:48,480 --> 00:09:52,800
other people could take a clone of your

00:09:50,399 --> 00:09:53,440
project and commit commit some code push

00:09:52,800 --> 00:09:56,399
it

00:09:53,440 --> 00:09:57,200
and request that you merge their changes

00:09:56,399 --> 00:09:58,959
in

00:09:57,200 --> 00:10:00,880
so a lot of people are able to

00:09:58,959 --> 00:10:02,800
contribute to some of these libraries

00:10:00,880 --> 00:10:04,160
because it's out there on github and

00:10:02,800 --> 00:10:06,320
they can

00:10:04,160 --> 00:10:08,399
they can contribute and you have the you

00:10:06,320 --> 00:10:11,680
know you have the ability to

00:10:08,399 --> 00:10:14,959
modify or reject or merge changes

00:10:11,680 --> 00:10:16,320
as as appropriate and github also

00:10:14,959 --> 00:10:18,000
provides project boards

00:10:16,320 --> 00:10:19,760
which are either way a way of you

00:10:18,000 --> 00:10:20,720
organizing your existing issues and pull

00:10:19,760 --> 00:10:23,200
requests

00:10:20,720 --> 00:10:23,920
uh however you want uh but also you can

00:10:23,200 --> 00:10:26,240
create

00:10:23,920 --> 00:10:27,920
uh sort of little notes which are just

00:10:26,240 --> 00:10:29,360
just uh not not issues but just little

00:10:27,920 --> 00:10:31,360
bits of text that say

00:10:29,360 --> 00:10:32,880
you know things describing your project

00:10:31,360 --> 00:10:34,480
and features that you want to add or

00:10:32,880 --> 00:10:37,120
things that you need to address

00:10:34,480 --> 00:10:38,800
and be able to visualize the kind of

00:10:37,120 --> 00:10:40,959
state of state of play

00:10:38,800 --> 00:10:42,480
um especially if you're collaborating

00:10:40,959 --> 00:10:45,279
online

00:10:42,480 --> 00:10:46,959
and not you know office based having

00:10:45,279 --> 00:10:47,440
visual representations of something you

00:10:46,959 --> 00:10:50,480
might have

00:10:47,440 --> 00:10:51,920
post-it notes for in in an office um i

00:10:50,480 --> 00:10:55,040
really can be really useful for

00:10:51,920 --> 00:10:56,399
for managing the project um so

00:10:55,040 --> 00:10:59,120
distributing software

00:10:56,399 --> 00:11:00,880
so um how do we do this so it's quite

00:10:59,120 --> 00:11:03,120
common for

00:11:00,880 --> 00:11:04,880
for software to be uh packaged uh in

00:11:03,120 --> 00:11:08,640
such a way that it can be installed

00:11:04,880 --> 00:11:10,640
by many users and for instance on linux

00:11:08,640 --> 00:11:13,600
you might expect to be able to install

00:11:10,640 --> 00:11:17,279
some software with at with the apps tool

00:11:13,600 --> 00:11:20,560
so apt install sudden such or fedora rpm

00:11:17,279 --> 00:11:22,480
and yeoman on other systems

00:11:20,560 --> 00:11:24,000
and then you've got things like pip

00:11:22,480 --> 00:11:26,560
which is a language specific

00:11:24,000 --> 00:11:27,600
package manager so pip is python's

00:11:26,560 --> 00:11:31,440
package manager

00:11:27,600 --> 00:11:33,600
npm is for node.js and gem for ruby

00:11:31,440 --> 00:11:35,760
then there's things like linux portable

00:11:33,600 --> 00:11:36,800
so snap flat pack app image

00:11:35,760 --> 00:11:40,160
different different methods of

00:11:36,800 --> 00:11:42,000
distribution have pros and cons

00:11:40,160 --> 00:11:44,079
and they're quite popular at the moment

00:11:42,000 --> 00:11:46,320
and then on mac um you've got homebrew

00:11:44,079 --> 00:11:49,680
so you can brew install something

00:11:46,320 --> 00:11:52,959
um and then there's sort of lesser

00:11:49,680 --> 00:11:54,959
um lesser sort of quality

00:11:52,959 --> 00:11:56,079
access to to software things like just

00:11:54,959 --> 00:11:58,000
downloading it from

00:11:56,079 --> 00:11:59,120
um lots of less sophisticated ways so

00:11:58,000 --> 00:12:01,360
downloading from github

00:11:59,120 --> 00:12:03,040
directly or you know i've talked about

00:12:01,360 --> 00:12:04,480
github a lot and i should mention

00:12:03,040 --> 00:12:06,480
gitlab and there are other alternatives

00:12:04,480 --> 00:12:07,680
available provide a lot of the same sort

00:12:06,480 --> 00:12:09,839
of functionality

00:12:07,680 --> 00:12:11,120
um downloading from sourceforge um in

00:12:09,839 --> 00:12:14,000
the olden days

00:12:11,120 --> 00:12:16,480
uh or providing something accessible for

00:12:14,000 --> 00:12:21,200
download on your personal website

00:12:16,480 --> 00:12:22,880
and uh and things like curl as well um

00:12:21,200 --> 00:12:24,399
different methods of distributing your

00:12:22,880 --> 00:12:26,240
software

00:12:24,399 --> 00:12:28,240
and so why do we distribute software so

00:12:26,240 --> 00:12:31,440
first of all for ease of access

00:12:28,240 --> 00:12:32,639
so uh you kind of you if you make some

00:12:31,440 --> 00:12:34,000
software and you want other people to be

00:12:32,639 --> 00:12:35,200
able to use it they need to be able to

00:12:34,000 --> 00:12:37,040
download and install it

00:12:35,200 --> 00:12:38,720
so if you can do that in a uniform way

00:12:37,040 --> 00:12:39,200
that that matches their expectations

00:12:38,720 --> 00:12:40,959
then

00:12:39,200 --> 00:12:42,399
it'll be much easier for them to to use

00:12:40,959 --> 00:12:44,959
it uh if

00:12:42,399 --> 00:12:46,959
if i'm on uh if i'm using linux or you

00:12:44,959 --> 00:12:48,880
know debian or ubuntu

00:12:46,959 --> 00:12:50,000
i sort of expect that you know if if

00:12:48,880 --> 00:12:52,320
software if

00:12:50,000 --> 00:12:54,320
uh if software is available it that it's

00:12:52,320 --> 00:12:55,760
available in-app for me so i can act

00:12:54,320 --> 00:12:58,880
install it and i kind of

00:12:55,760 --> 00:13:00,399
expect that it's just there um or or if

00:12:58,880 --> 00:13:01,279
it's a python library or something i

00:13:00,399 --> 00:13:03,360
might expect that

00:13:01,279 --> 00:13:05,040
i should be able to pip install this and

00:13:03,360 --> 00:13:06,959
not have to go and find the website

00:13:05,040 --> 00:13:10,880
where it's hosted on or

00:13:06,959 --> 00:13:14,079
or the obscure method of downloading it

00:13:10,880 --> 00:13:16,560
that they've provided um and with

00:13:14,079 --> 00:13:17,519
um especially with apt and things like

00:13:16,560 --> 00:13:19,519
that that you

00:13:17,519 --> 00:13:20,720
you have a certain amount of trust and

00:13:19,519 --> 00:13:22,720
confidence that you're what you're

00:13:20,720 --> 00:13:24,320
getting is good quality and that it's

00:13:22,720 --> 00:13:26,560
that it's the real deal it's from the

00:13:24,320 --> 00:13:27,920
from the uh the author themselves

00:13:26,560 --> 00:13:29,600
and that you're getting it from an

00:13:27,920 --> 00:13:32,320
official source

00:13:29,600 --> 00:13:33,120
and and that for the stability so you

00:13:32,320 --> 00:13:34,320
know that

00:13:33,120 --> 00:13:36,320
you know this is coming from the right

00:13:34,320 --> 00:13:37,600
source and it's um it might be

00:13:36,320 --> 00:13:39,040
especially in something like debbie and

00:13:37,600 --> 00:13:40,560
you know that this is the state this is

00:13:39,040 --> 00:13:41,360
a stable version that's supported in

00:13:40,560 --> 00:13:44,399
debian

00:13:41,360 --> 00:13:45,040
um and if it's if it's on pip you might

00:13:44,399 --> 00:13:46,240
um

00:13:45,040 --> 00:13:47,760
you know you can you can actually go

00:13:46,240 --> 00:13:49,199
there and look and see these are all the

00:13:47,760 --> 00:13:51,360
version numbers these are the

00:13:49,199 --> 00:13:52,240
release dates what version am i on and

00:13:51,360 --> 00:13:54,320
you can't no wait

00:13:52,240 --> 00:13:56,639
you know where you stand which is really

00:13:54,320 --> 00:13:58,800
important

00:13:56,639 --> 00:14:00,160
um so licensing is good important to

00:13:58,800 --> 00:14:00,880
talk about at this point so it's really

00:14:00,160 --> 00:14:02,639
important to

00:14:00,880 --> 00:14:04,079
for you to choose a license for your

00:14:02,639 --> 00:14:05,600
project um

00:14:04,079 --> 00:14:07,040
now it's really easy to just discard

00:14:05,600 --> 00:14:07,839
this and say well you know it's just

00:14:07,040 --> 00:14:09,839
open source

00:14:07,839 --> 00:14:11,040
if it's on github then people can do

00:14:09,839 --> 00:14:13,199
what they want with it

00:14:11,040 --> 00:14:14,160
but actually what people don't consider

00:14:13,199 --> 00:14:17,760
is well

00:14:14,160 --> 00:14:19,279
if this happened would that annoy me or

00:14:17,760 --> 00:14:21,600
would i be annoyed by

00:14:19,279 --> 00:14:23,040
somebody's use of my of my project if

00:14:21,600 --> 00:14:24,959
they started selling it would that would

00:14:23,040 --> 00:14:27,519
i well i think well that's not fair

00:14:24,959 --> 00:14:28,480
um if they started using it a particular

00:14:27,519 --> 00:14:30,480
way if they

00:14:28,480 --> 00:14:32,320
renamed your project if google took your

00:14:30,480 --> 00:14:32,639
project and renamed it and released it

00:14:32,320 --> 00:14:34,639
as

00:14:32,639 --> 00:14:37,199
you know under their own branding would

00:14:34,639 --> 00:14:38,959
you be happy about that would you rather

00:14:37,199 --> 00:14:40,720
choose a license that protects you in

00:14:38,959 --> 00:14:42,240
whatever you want to be protected

00:14:40,720 --> 00:14:43,440
so there's lots to think about it's not

00:14:42,240 --> 00:14:45,440
a simple issue i'm not going to

00:14:43,440 --> 00:14:47,680
recommend any particular license

00:14:45,440 --> 00:14:49,600
if you go to choose a license.com

00:14:47,680 --> 00:14:52,079
there's a great resource there for

00:14:49,600 --> 00:14:53,040
um describing what it is that your your

00:14:52,079 --> 00:14:55,519
project needs

00:14:53,040 --> 00:14:56,079
and what your needs are and it will help

00:14:55,519 --> 00:14:58,880
you

00:14:56,079 --> 00:15:01,120
choose a license that's appropriate uh

00:14:58,880 --> 00:15:03,279
it's also important to say that um

00:15:01,120 --> 00:15:04,800
it's important to include the license

00:15:03,279 --> 00:15:06,240
with the source code so

00:15:04,800 --> 00:15:07,920
include it in your github project

00:15:06,240 --> 00:15:10,240
include it in your files

00:15:07,920 --> 00:15:11,040
and when you make a distribution that

00:15:10,240 --> 00:15:14,240
you that you share

00:15:11,040 --> 00:15:15,600
if you're publishing it to um to pi pi

00:15:14,240 --> 00:15:16,800
and it's pip installable that the

00:15:15,600 --> 00:15:18,240
license should follow

00:15:16,800 --> 00:15:19,760
the code wherever it goes so when

00:15:18,240 --> 00:15:20,800
somebody installs it the license should

00:15:19,760 --> 00:15:23,120
be with the code

00:15:20,800 --> 00:15:24,959
that shouldn't be left to you know this

00:15:23,120 --> 00:15:26,000
came from pi pi and the licenses on the

00:15:24,959 --> 00:15:27,440
github page and

00:15:26,000 --> 00:15:30,480
that kind of thing so it's important to

00:15:27,440 --> 00:15:32,160
keep it with the with the project

00:15:30,480 --> 00:15:34,079
so if you just if you want to start

00:15:32,160 --> 00:15:35,680
creating a python module regardless of

00:15:34,079 --> 00:15:36,720
which method of distribution you're

00:15:35,680 --> 00:15:39,519
going to use

00:15:36,720 --> 00:15:40,000
um essentially you want to start with

00:15:39,519 --> 00:15:42,240
this so

00:15:40,000 --> 00:15:43,920
you've got your project.py that we had

00:15:42,240 --> 00:15:45,440
before so that's where your

00:15:43,920 --> 00:15:47,600
sort of implementation of your project

00:15:45,440 --> 00:15:49,920
lives if you stick that in a

00:15:47,600 --> 00:15:52,560
in a folder a directory called um

00:15:49,920 --> 00:15:54,880
there's the name of your project

00:15:52,560 --> 00:15:56,800
and you need to create an init dot py

00:15:54,880 --> 00:15:57,120
with double double underscores that you

00:15:56,800 --> 00:15:59,199
know

00:15:57,120 --> 00:16:00,880
each side so this is the name for this

00:15:59,199 --> 00:16:02,240
is dunder init which means double

00:16:00,880 --> 00:16:04,720
underscore

00:16:02,240 --> 00:16:05,600
so you stick an init.ui in your project

00:16:04,720 --> 00:16:08,399
folder

00:16:05,600 --> 00:16:08,639
have your project project project code

00:16:08,399 --> 00:16:11,519
in

00:16:08,639 --> 00:16:12,079
in another file and you have a readme

00:16:11,519 --> 00:16:13,040
file

00:16:12,079 --> 00:16:15,680
now i'm going to be talking about

00:16:13,040 --> 00:16:17,120
different formats for um for readme and

00:16:15,680 --> 00:16:20,240
documentation later but

00:16:17,120 --> 00:16:23,519
this is a restructured text file and you

00:16:20,240 --> 00:16:27,199
have a setup.py

00:16:23,519 --> 00:16:29,440
so the setup.py uh might look something

00:16:27,199 --> 00:16:32,480
like this this is a reasonably minimal

00:16:29,440 --> 00:16:34,160
setup.py so this describes how your your

00:16:32,480 --> 00:16:38,000
project is built and how

00:16:34,160 --> 00:16:38,800
it's how it's um which which modules it

00:16:38,000 --> 00:16:41,120
provides and

00:16:38,800 --> 00:16:43,360
and things like that so it's using uh

00:16:41,120 --> 00:16:45,360
the setup tools module

00:16:43,360 --> 00:16:47,120
uh so we've essentially runs on this

00:16:45,360 --> 00:16:47,920
setup function provided by setup tools

00:16:47,120 --> 00:16:49,519
so set up

00:16:47,920 --> 00:16:51,360
and you provide it all the different

00:16:49,519 --> 00:16:53,680
information about your project so

00:16:51,360 --> 00:16:54,560
you give it a project name uh a version

00:16:53,680 --> 00:16:56,000
number well

00:16:54,560 --> 00:16:57,680
it doesn't not strictly a number it's a

00:16:56,000 --> 00:16:59,600
string but uh

00:16:57,680 --> 00:17:02,240
you can look up about how how people

00:16:59,600 --> 00:17:04,240
tend to version their uh their software

00:17:02,240 --> 00:17:05,600
uh you give an author name a short

00:17:04,240 --> 00:17:08,720
description

00:17:05,600 --> 00:17:12,480
just a one-line string a license

00:17:08,720 --> 00:17:13,520
um you can provide keywords uh a url to

00:17:12,480 --> 00:17:15,039
where people can find

00:17:13,520 --> 00:17:16,880
find the project if you've got a home

00:17:15,039 --> 00:17:18,319
page or if it's just on github you can

00:17:16,880 --> 00:17:21,360
put it there

00:17:18,319 --> 00:17:22,559
now packages um i'm using the find

00:17:21,360 --> 00:17:24,880
packages

00:17:22,559 --> 00:17:26,400
uh function here provided by setup tools

00:17:24,880 --> 00:17:28,000
all that essentially does in this case

00:17:26,400 --> 00:17:30,240
because it's a really simple example

00:17:28,000 --> 00:17:31,360
is that that will return the string or a

00:17:30,240 --> 00:17:33,600
list i think the

00:17:31,360 --> 00:17:34,960
of the string project which is the the

00:17:33,600 --> 00:17:37,760
name of the folder which is

00:17:34,960 --> 00:17:39,440
this bit is what is becomes importable

00:17:37,760 --> 00:17:42,400
or becomes distributed on

00:17:39,440 --> 00:17:43,440
uh the system when somebody installs it

00:17:42,400 --> 00:17:45,600
um

00:17:43,440 --> 00:17:46,480
but fine packages will go away and find

00:17:45,600 --> 00:17:48,320
any any

00:17:46,480 --> 00:17:49,679
modules that are available provided by

00:17:48,320 --> 00:17:51,360
your your package

00:17:49,679 --> 00:17:53,360
and then a long description is what will

00:17:51,360 --> 00:17:55,520
be shown uh you'll see later on

00:17:53,360 --> 00:17:56,720
on a pipeline page that kind of full the

00:17:55,520 --> 00:17:58,720
full description of what

00:17:56,720 --> 00:17:59,840
uh what the project is which is usually

00:17:58,720 --> 00:18:01,840
your me

00:17:59,840 --> 00:18:03,760
in the github project and it's good to

00:18:01,840 --> 00:18:06,320
be able to replicate that both on github

00:18:03,760 --> 00:18:07,760
and on pipeline and i'm just using a

00:18:06,320 --> 00:18:10,000
read function there to open it from a

00:18:07,760 --> 00:18:11,600
file

00:18:10,000 --> 00:18:13,120
so if you want to publish your python

00:18:11,600 --> 00:18:15,039
module on pi pi

00:18:13,120 --> 00:18:16,559
that's the python package index so first

00:18:15,039 --> 00:18:19,679
of all you register an account on

00:18:16,559 --> 00:18:22,640
piper.org you uh create a

00:18:19,679 --> 00:18:24,320
pipe irc file with your credentials that

00:18:22,640 --> 00:18:25,520
you created so your username and

00:18:24,320 --> 00:18:26,880
password

00:18:25,520 --> 00:18:29,360
and you want to install a tool called

00:18:26,880 --> 00:18:32,240
twine um

00:18:29,360 --> 00:18:33,200
and if you if you look up um the on the

00:18:32,240 --> 00:18:35,280
python

00:18:33,200 --> 00:18:37,200
packaging documentation uh didn't used

00:18:35,280 --> 00:18:38,720
to be um as good as it was but it's got

00:18:37,200 --> 00:18:40,160
a lot better recently

00:18:38,720 --> 00:18:41,760
so some really good documentation there

00:18:40,160 --> 00:18:43,679
you can find out on how to go through

00:18:41,760 --> 00:18:45,200
this full process but that's

00:18:43,679 --> 00:18:47,440
the gist of it and once you've published

00:18:45,200 --> 00:18:49,039
your module you can see that it's

00:18:47,440 --> 00:18:51,600
it can be available as a pipeline

00:18:49,039 --> 00:18:53,760
project page something like this

00:18:51,600 --> 00:18:55,200
so this is the uh the one line pro the

00:18:53,760 --> 00:18:56,960
short description this is the full

00:18:55,200 --> 00:19:00,480
description which i haven't really

00:18:56,960 --> 00:19:02,240
made much use of um and the different

00:19:00,480 --> 00:19:03,840
version releases uh and the files that

00:19:02,240 --> 00:19:06,000
are available and a link to your

00:19:03,840 --> 00:19:09,520
homepage and all that kind of thing

00:19:06,000 --> 00:19:13,679
becomes available on on pipeline

00:19:09,520 --> 00:19:15,039
so um init.py um

00:19:13,679 --> 00:19:16,799
there are different choices that you can

00:19:15,039 --> 00:19:19,679
make about how you structure this

00:19:16,799 --> 00:19:21,200
so i mean it's possible to just write

00:19:19,679 --> 00:19:22,840
your full implementation of your project

00:19:21,200 --> 00:19:25,840
inside

00:19:22,840 --> 00:19:25,840
init.uy

00:19:26,480 --> 00:19:30,320
uh but people don't don't don't tend to

00:19:28,559 --> 00:19:31,200
do that the two kind of schools of

00:19:30,320 --> 00:19:33,360
thought that i use

00:19:31,200 --> 00:19:34,720
um are uh so this is one of them with

00:19:33,360 --> 00:19:36,640
gpi zero

00:19:34,720 --> 00:19:38,160
we want to make it really easy for uh

00:19:36,640 --> 00:19:39,440
it's just a library so people just

00:19:38,160 --> 00:19:40,720
import things from it

00:19:39,440 --> 00:19:42,080
so we want to be able to make it easy

00:19:40,720 --> 00:19:43,360
for them to import it and not worry

00:19:42,080 --> 00:19:45,200
about

00:19:43,360 --> 00:19:46,320
a nested structure of different where

00:19:45,200 --> 00:19:47,440
different things happen to be

00:19:46,320 --> 00:19:48,720
implemented in different files and

00:19:47,440 --> 00:19:51,440
different folders

00:19:48,720 --> 00:19:52,559
so we want to be able to provide from

00:19:51,440 --> 00:19:55,280
gpr0 import

00:19:52,559 --> 00:19:55,840
led or button or servo motor that kind

00:19:55,280 --> 00:19:57,280
of thing

00:19:55,840 --> 00:19:58,960
we just want them to be able to import

00:19:57,280 --> 00:20:00,400
all the bits that need at the top level

00:19:58,960 --> 00:20:04,080
name space

00:20:00,400 --> 00:20:07,280
um and so in init.py

00:20:04,080 --> 00:20:08,720
we kind of use relative imports to bring

00:20:07,280 --> 00:20:09,840
in everything that we need that

00:20:08,720 --> 00:20:11,280
whether that's scattered around in

00:20:09,840 --> 00:20:12,240
different files in different different

00:20:11,280 --> 00:20:14,960
locations

00:20:12,240 --> 00:20:17,360
we import that and provide it in init.ui

00:20:14,960 --> 00:20:20,400
which means people can import it easily

00:20:17,360 --> 00:20:21,200
and then the setup.py contains things

00:20:20,400 --> 00:20:23,600
like

00:20:21,200 --> 00:20:24,720
um the version number and that goes

00:20:23,600 --> 00:20:26,720
straight into setup

00:20:24,720 --> 00:20:28,080
and that it isn't being imported from

00:20:26,720 --> 00:20:30,640
here

00:20:28,080 --> 00:20:32,840
with a with a um with a library like

00:20:30,640 --> 00:20:36,400
this where you've got code in your

00:20:32,840 --> 00:20:37,840
init.py it's it's tempting to

00:20:36,400 --> 00:20:39,600
try and put your version number and

00:20:37,840 --> 00:20:42,000
things like that in in

00:20:39,600 --> 00:20:43,440
your init.py so that people can import

00:20:42,000 --> 00:20:46,559
it and see the version but

00:20:43,440 --> 00:20:48,640
it it can cause uh conflicts if you if

00:20:46,559 --> 00:20:51,120
you if you structure it like that

00:20:48,640 --> 00:20:51,919
um if you're providing inputs and things

00:20:51,120 --> 00:20:55,120
because

00:20:51,919 --> 00:20:56,960
when you run setup.py it tries to import

00:20:55,120 --> 00:20:58,159
your code which might have dependencies

00:20:56,960 --> 00:21:00,559
and then you might start

00:20:58,159 --> 00:21:02,480
importing things and that might cause

00:21:00,559 --> 00:21:05,280
you problems if for instance

00:21:02,480 --> 00:21:06,559
your dependencies uh aren't available at

00:21:05,280 --> 00:21:08,159
the time that somebody's trying to build

00:21:06,559 --> 00:21:10,640
the project

00:21:08,159 --> 00:21:11,520
uh and so the alternative way of doing

00:21:10,640 --> 00:21:13,919
it if you're not

00:21:11,520 --> 00:21:15,280
actually trying to provide if imports

00:21:13,919 --> 00:21:16,320
and the import structure isn't the most

00:21:15,280 --> 00:21:18,400
important thing

00:21:16,320 --> 00:21:19,360
um if your thing is that if your if your

00:21:18,400 --> 00:21:21,600
package is a

00:21:19,360 --> 00:21:23,520
um is a module that people install and

00:21:21,600 --> 00:21:25,600
they get access to command line

00:21:23,520 --> 00:21:27,520
tools for instance rather than a library

00:21:25,600 --> 00:21:29,760
that things that they import

00:21:27,520 --> 00:21:31,120
um this is a good way of doing it so

00:21:29,760 --> 00:21:33,520
actually putting all your

00:21:31,120 --> 00:21:34,320
um version number and all your setup.py

00:21:33,520 --> 00:21:37,679
metadata

00:21:34,320 --> 00:21:40,320
inside init.py and then

00:21:37,679 --> 00:21:40,960
um and then importing it from your

00:21:40,320 --> 00:21:45,360
module

00:21:40,960 --> 00:21:48,080
and passing them into setup uh

00:21:45,360 --> 00:21:49,840
and another thing is uh entry points so

00:21:48,080 --> 00:21:52,080
entry points are a way of providing

00:21:49,840 --> 00:21:53,200
access to um parts of your program that

00:21:52,080 --> 00:21:55,840
you want to make available

00:21:53,200 --> 00:21:56,240
as constant what we call console scripts

00:21:55,840 --> 00:21:58,240
so

00:21:56,240 --> 00:21:59,520
if you want to make a command line tool

00:21:58,240 --> 00:22:02,320
uh where the word

00:21:59,520 --> 00:22:03,600
the the command project for instance um

00:22:02,320 --> 00:22:05,520
launches some

00:22:03,600 --> 00:22:08,080
some part of your program your of your

00:22:05,520 --> 00:22:08,640
project um you would do like this so you

00:22:08,080 --> 00:22:11,280
provide

00:22:08,640 --> 00:22:13,679
uh entry points in the setup function

00:22:11,280 --> 00:22:15,600
you define entry points as a dictionary

00:22:13,679 --> 00:22:18,080
console scripts are one of the types of

00:22:15,600 --> 00:22:20,960
entry points uh there are others

00:22:18,080 --> 00:22:22,640
and then that's got a list of each

00:22:20,960 --> 00:22:25,280
command that you want to provide

00:22:22,640 --> 00:22:26,000
so project it's a bit odd that the

00:22:25,280 --> 00:22:27,919
syntax is like

00:22:26,000 --> 00:22:30,159
this uh that it's all just in one string

00:22:27,919 --> 00:22:31,440
and that the dot here and the colon are

00:22:30,159 --> 00:22:33,280
kind of syntact

00:22:31,440 --> 00:22:34,960
syntax within a string but this is um

00:22:33,280 --> 00:22:36,880
this is just how it is

00:22:34,960 --> 00:22:40,799
so this essentially makes the word

00:22:36,880 --> 00:22:40,799
project available as a as a command

00:22:41,440 --> 00:22:44,960
and it finds the main function in the

00:22:43,360 --> 00:22:48,000
cli file

00:22:44,960 --> 00:22:49,360
in your project called project and

00:22:48,000 --> 00:22:52,080
once it's installed you'll be able to do

00:22:49,360 --> 00:22:52,080
something like this

00:22:52,799 --> 00:22:58,000
so virtual environments um a really good

00:22:56,000 --> 00:22:59,440
way of isolate creating an isolated

00:22:58,000 --> 00:23:00,640
environment that you pip and store your

00:22:59,440 --> 00:23:02,480
requirements into in your

00:23:00,640 --> 00:23:04,000
and your package uh you can actually

00:23:02,480 --> 00:23:05,200
build your projects inside the virtual

00:23:04,000 --> 00:23:06,960
environment and

00:23:05,200 --> 00:23:09,039
in such a way that the changes you make

00:23:06,960 --> 00:23:09,679
in your library are sort of installed in

00:23:09,039 --> 00:23:12,559
real time

00:23:09,679 --> 00:23:14,559
so if you make changes you can it's as

00:23:12,559 --> 00:23:16,640
if you've got the latest version of your

00:23:14,559 --> 00:23:18,000
your your project installed in the in

00:23:16,640 --> 00:23:19,440
the environment

00:23:18,000 --> 00:23:21,039
and you know that it's separated from

00:23:19,440 --> 00:23:22,000
your wider environments it's not got

00:23:21,039 --> 00:23:24,799
your system python

00:23:22,000 --> 00:23:26,080
it's um it doesn't have the system

00:23:24,799 --> 00:23:27,679
packages that are installed

00:23:26,080 --> 00:23:29,120
um and it's just isolated from

00:23:27,679 --> 00:23:31,039
everything else

00:23:29,120 --> 00:23:32,960
um i recommend a tool called uh

00:23:31,039 --> 00:23:34,240
virtualenvwrapper which provides this

00:23:32,960 --> 00:23:37,280
this command

00:23:34,240 --> 00:23:39,919
make virtualmk virtual lens um

00:23:37,280 --> 00:23:41,279
and with this command you you create a

00:23:39,919 --> 00:23:42,000
virtual environment called project and

00:23:41,279 --> 00:23:43,840
as soon as you've

00:23:42,000 --> 00:23:45,360
run it you'll see the word project in

00:23:43,840 --> 00:23:49,039
brackets below in

00:23:45,360 --> 00:23:50,960
in front of your um in your shell

00:23:49,039 --> 00:23:52,159
uh and then in if you're on linux for

00:23:50,960 --> 00:23:52,880
instance you might be used to using

00:23:52,159 --> 00:23:55,120
python 3

00:23:52,880 --> 00:23:56,320
as your uh as your python because that's

00:23:55,120 --> 00:23:57,520
the system python

00:23:56,320 --> 00:23:58,960
but once you've created a virtual

00:23:57,520 --> 00:24:00,640
environment you can tell it to use

00:23:58,960 --> 00:24:04,240
python 3 but then

00:24:00,640 --> 00:24:06,159
python and pip become the they point at

00:24:04,240 --> 00:24:08,080
your python and your version environment

00:24:06,159 --> 00:24:09,039
your pip so you can see here i've got

00:24:08,080 --> 00:24:11,360
which python

00:24:09,039 --> 00:24:13,279
and it's put it inside environments

00:24:11,360 --> 00:24:15,760
project in python

00:24:13,279 --> 00:24:17,360
i use the deactivate command to to close

00:24:15,760 --> 00:24:19,279
the virtual environment and then

00:24:17,360 --> 00:24:20,640
if you want to switch to another project

00:24:19,279 --> 00:24:22,080
you can use work on

00:24:20,640 --> 00:24:24,320
so the first time you do it you don't

00:24:22,080 --> 00:24:25,039
need to do that but because it creates

00:24:24,320 --> 00:24:27,200
it for you

00:24:25,039 --> 00:24:28,159
and but if you want to revisit one just

00:24:27,200 --> 00:24:32,159
use work on

00:24:28,159 --> 00:24:33,679
and the project name make files so

00:24:32,159 --> 00:24:35,120
this is a bit this is the thing i

00:24:33,679 --> 00:24:36,240
imagine a lot of people are a little bit

00:24:35,120 --> 00:24:38,559
um

00:24:36,240 --> 00:24:39,279
not skeptical of sort of uh almost

00:24:38,559 --> 00:24:41,120
afraid of

00:24:39,279 --> 00:24:42,720
and they seem like quite a complicated

00:24:41,120 --> 00:24:44,480
arcade tool but um

00:24:42,720 --> 00:24:46,159
if you strip them down to their basics

00:24:44,480 --> 00:24:49,200
they can be really useful and

00:24:46,159 --> 00:24:51,120
actually quite simple so for instance uh

00:24:49,200 --> 00:24:52,960
everything i've showed you so far um i

00:24:51,120 --> 00:24:54,480
would you know you need to be able to

00:24:52,960 --> 00:24:56,000
be able to provide a way of people

00:24:54,480 --> 00:24:58,960
installing from

00:24:56,000 --> 00:25:00,960
the source code so pip install dot and

00:24:58,960 --> 00:25:03,120
you just provide

00:25:00,960 --> 00:25:04,559
the command make install which wraps

00:25:03,120 --> 00:25:05,840
around whatever your installed

00:25:04,559 --> 00:25:08,960
instructions are

00:25:05,840 --> 00:25:12,880
and make develop would in this case

00:25:08,960 --> 00:25:15,600
install it in an editable way um

00:25:12,880 --> 00:25:17,360
so that people can um people can develop

00:25:15,600 --> 00:25:18,640
on on the project in their virtual

00:25:17,360 --> 00:25:20,400
environment

00:25:18,640 --> 00:25:21,679
and just you know you start small with

00:25:20,400 --> 00:25:22,240
something like this and later once

00:25:21,679 --> 00:25:23,679
you've got

00:25:22,240 --> 00:25:25,760
you know things like test suites and

00:25:23,679 --> 00:25:26,159
documentation builders and deployments

00:25:25,760 --> 00:25:27,919
and

00:25:26,159 --> 00:25:29,760
all that other all those other things

00:25:27,919 --> 00:25:31,120
you can define inside here how each of

00:25:29,760 --> 00:25:32,960
them should be and then provide them in

00:25:31,120 --> 00:25:34,400
a really uniform way so make install

00:25:32,960 --> 00:25:36,559
make develop make tests

00:25:34,400 --> 00:25:38,559
make deploy whatever it is that you've

00:25:36,559 --> 00:25:39,840
got and you can just

00:25:38,559 --> 00:25:41,279
you know there's a lot more complex

00:25:39,840 --> 00:25:42,159
things you can do and lots more you can

00:25:41,279 --> 00:25:44,320
learn but

00:25:42,159 --> 00:25:45,440
i think a really good way um to get

00:25:44,320 --> 00:25:46,480
started and like

00:25:45,440 --> 00:25:48,240
like all the things i'm going to be

00:25:46,480 --> 00:25:49,440
talking about the best way to learn more

00:25:48,240 --> 00:25:52,480
is to take a look at other people's

00:25:49,440 --> 00:25:52,480
projects and see what they do

00:25:52,880 --> 00:25:56,880
so testing next so um the whole point of

00:25:56,080 --> 00:25:58,240
testing is

00:25:56,880 --> 00:25:59,679
the idea that you write tests to

00:25:58,240 --> 00:26:00,880
validate what your code is supposed to

00:25:59,679 --> 00:26:02,960
do

00:26:00,880 --> 00:26:04,480
you keep your old tests around to make

00:26:02,960 --> 00:26:05,840
sure nothing breaks in future and if

00:26:04,480 --> 00:26:07,039
other people are working on it

00:26:05,840 --> 00:26:09,039
they don't need to know about those

00:26:07,039 --> 00:26:11,200
tests they just need to run them

00:26:09,039 --> 00:26:12,080
run the test suite and if they introduce

00:26:11,200 --> 00:26:14,000
a bug

00:26:12,080 --> 00:26:16,880
of some code that you know you wrote a

00:26:14,000 --> 00:26:19,200
year ago five years ago

00:26:16,880 --> 00:26:21,279
the test suite will tell them about it

00:26:19,200 --> 00:26:22,840
um so there's an approach called test

00:26:21,279 --> 00:26:25,600
driven development tdd

00:26:22,840 --> 00:26:26,559
um so for maximum effect uh if you're

00:26:25,600 --> 00:26:28,080
taking that approach

00:26:26,559 --> 00:26:29,760
uh you write the tests before you write

00:26:28,080 --> 00:26:31,760
the code so you kind of

00:26:29,760 --> 00:26:33,200
write by wishful thinking and say well i

00:26:31,760 --> 00:26:34,480
think the library should do this and you

00:26:33,200 --> 00:26:36,799
write how the user would you

00:26:34,480 --> 00:26:37,520
would write it and you say well i assert

00:26:36,799 --> 00:26:38,799
that um

00:26:37,520 --> 00:26:41,760
this would happen when they run this

00:26:38,799 --> 00:26:43,039
function and then you see it fail and

00:26:41,760 --> 00:26:44,480
then you go and write the code that

00:26:43,039 --> 00:26:45,919
actually makes it pass

00:26:44,480 --> 00:26:48,799
and then you know you kind of drive

00:26:45,919 --> 00:26:52,400
yourself forward in that way which is a

00:26:48,799 --> 00:26:55,679
a an interesting and useful approach

00:26:52,400 --> 00:26:56,960
um so you can you know you can write

00:26:55,679 --> 00:26:58,799
tests that run really quickly

00:26:56,960 --> 00:27:00,240
um and it's important that they do run

00:26:58,799 --> 00:27:03,039
fast because then you you're not

00:27:00,240 --> 00:27:05,440
held up by waiting for your test to run

00:27:03,039 --> 00:27:07,919
and it can be automated so once you push

00:27:05,440 --> 00:27:09,600
it can run uh on something like travis

00:27:07,919 --> 00:27:13,919
which i'm gonna be talking about

00:27:09,600 --> 00:27:15,919
uh uh automatically so that you can um

00:27:13,919 --> 00:27:17,520
uh so you can just see instantly on for

00:27:15,919 --> 00:27:19,039
instance if you know somebody else write

00:27:17,520 --> 00:27:21,760
some code send you a pull request

00:27:19,039 --> 00:27:23,200
you can see did the test pass or did

00:27:21,760 --> 00:27:24,320
they add any new tests that kind of

00:27:23,200 --> 00:27:26,559
thing

00:27:24,320 --> 00:27:27,520
so important to be pragmatic when you're

00:27:26,559 --> 00:27:29,919
when you're writing tests

00:27:27,520 --> 00:27:31,360
test edge cases don't exhaustively test

00:27:29,919 --> 00:27:34,000
every single possible

00:27:31,360 --> 00:27:34,880
combination of inputs it will run slowly

00:27:34,000 --> 00:27:38,080
and

00:27:34,880 --> 00:27:39,600
it's not an effective way of testing uh

00:27:38,080 --> 00:27:41,600
but it is is as difficult

00:27:39,600 --> 00:27:42,799
as an art form uh writing writing good

00:27:41,600 --> 00:27:45,440
tests is uh

00:27:42,799 --> 00:27:46,159
is a complex task and you know like like

00:27:45,440 --> 00:27:48,799
all these things

00:27:46,159 --> 00:27:49,600
it's a learning curve so having tests is

00:27:48,799 --> 00:27:52,559
better than not

00:27:49,600 --> 00:27:53,600
um but having too many tests or having

00:27:52,559 --> 00:27:57,120
exhaustive tests

00:27:53,600 --> 00:27:58,559
is not that useful so the easiest way i

00:27:57,120 --> 00:28:00,559
think to get started with testing

00:27:58,559 --> 00:28:02,000
is not using any testing libraries not

00:28:00,559 --> 00:28:05,200
installing anything just using

00:28:02,000 --> 00:28:06,799
a built-in keyword assert so if for

00:28:05,200 --> 00:28:08,480
instance your project

00:28:06,799 --> 00:28:10,240
defines a function add which takes

00:28:08,480 --> 00:28:12,159
numbers and adds them

00:28:10,240 --> 00:28:13,279
you can just import that function and

00:28:12,159 --> 00:28:16,320
assert that add

00:28:13,279 --> 00:28:19,279
2 comma 2 equals four

00:28:16,320 --> 00:28:20,240
uh and if this if this didn't return

00:28:19,279 --> 00:28:21,840
four

00:28:20,240 --> 00:28:23,760
it would uh fail and there would be an

00:28:21,840 --> 00:28:26,880
assertion error so uh just a standard

00:28:23,760 --> 00:28:28,960
uh python exception and

00:28:26,880 --> 00:28:30,640
but if it passes it just carries on so

00:28:28,960 --> 00:28:31,840
they're really really useful way of just

00:28:30,640 --> 00:28:34,960
really quickly

00:28:31,840 --> 00:28:36,000
testing things um a good way to

00:28:34,960 --> 00:28:38,000
structure it

00:28:36,000 --> 00:28:40,000
is to put them in functions like this so

00:28:38,000 --> 00:28:42,720
i have test add and then had

00:28:40,000 --> 00:28:44,080
you know have multiple tests in here and

00:28:42,720 --> 00:28:48,320
with pi test if you

00:28:44,080 --> 00:28:51,919
um uh which is a really cool um

00:28:48,320 --> 00:28:53,919
testing library but it can at its most

00:28:51,919 --> 00:28:55,600
basic level can be a really nice

00:28:53,919 --> 00:28:57,440
runner for your for your standard tests

00:28:55,600 --> 00:28:58,880
your assert tests

00:28:57,440 --> 00:29:00,480
but if you name your functions like this

00:28:58,880 --> 00:29:03,039
and name your files like this

00:29:00,480 --> 00:29:04,640
so you have a test folder and you name

00:29:03,039 --> 00:29:06,640
your files test

00:29:04,640 --> 00:29:08,159
underscore something and have your

00:29:06,640 --> 00:29:09,360
functions named test underscore

00:29:08,159 --> 00:29:11,679
something

00:29:09,360 --> 00:29:13,200
it will run them and so you can see my

00:29:11,679 --> 00:29:16,000
structure looks something like this

00:29:13,200 --> 00:29:16,880
and i've got test add and that contains

00:29:16,000 --> 00:29:18,720
uh

00:29:16,880 --> 00:29:20,720
a test called test add and you can see

00:29:18,720 --> 00:29:22,799
that when i run that it passed

00:29:20,720 --> 00:29:24,399
it's just bog standard simple example

00:29:22,799 --> 00:29:26,399
but you can imagine for

00:29:24,399 --> 00:29:27,520
much bigger projects you have reams and

00:29:26,399 --> 00:29:30,320
reams of of

00:29:27,520 --> 00:29:31,760
uh tests passing and and and seeing when

00:29:30,320 --> 00:29:33,840
when anything fails when you've broken

00:29:31,760 --> 00:29:35,679
anything

00:29:33,840 --> 00:29:37,360
um pi test also gives you some

00:29:35,679 --> 00:29:40,399
additional features um

00:29:37,360 --> 00:29:40,960
the the main one i i use is um testing a

00:29:40,399 --> 00:29:43,679
search

00:29:40,960 --> 00:29:45,200
sorry testing exceptions so it's quite

00:29:43,679 --> 00:29:46,960
difficult just for using a cert one

00:29:45,200 --> 00:29:48,720
it's impossible using a cert on its own

00:29:46,960 --> 00:29:50,799
to assert that

00:29:48,720 --> 00:29:52,399
then an exception got raised because

00:29:50,799 --> 00:29:55,360
that will blow up your program

00:29:52,399 --> 00:29:56,559
um so the way you do it is you import pi

00:29:55,360 --> 00:29:59,600
test and you say

00:29:56,559 --> 00:30:01,600
with pi test.raisers some error

00:29:59,600 --> 00:30:03,440
and you and you use the context manager

00:30:01,600 --> 00:30:05,279
and put your um the code that's

00:30:03,440 --> 00:30:07,360
that you're expecting to raise the error

00:30:05,279 --> 00:30:08,000
inside now if it doesn't raise the error

00:30:07,360 --> 00:30:10,399
then

00:30:08,000 --> 00:30:13,120
the assertion fails so that's a good way

00:30:10,399 --> 00:30:14,960
of testing that as well

00:30:13,120 --> 00:30:16,240
mock is a really good library as well so

00:30:14,960 --> 00:30:17,840
this is um

00:30:16,240 --> 00:30:19,360
since python three-point something this

00:30:17,840 --> 00:30:21,039
has been in the standard library in the

00:30:19,360 --> 00:30:23,120
unit test module

00:30:21,039 --> 00:30:24,320
um so this is a really simple example of

00:30:23,120 --> 00:30:27,039
using mock in your test

00:30:24,320 --> 00:30:27,919
so you can create a mock object that in

00:30:27,039 --> 00:30:30,960
this case

00:30:27,919 --> 00:30:33,440
contains a method called message uh that

00:30:30,960 --> 00:30:34,399
that just has the return value of hello

00:30:33,440 --> 00:30:38,080
so you're kind of

00:30:34,399 --> 00:30:40,399
mocking up a a an object that has a

00:30:38,080 --> 00:30:42,080
um has an attribute that's a function

00:30:40,399 --> 00:30:45,200
that has a method that

00:30:42,080 --> 00:30:45,760
that has some predetermined uh return

00:30:45,200 --> 00:30:47,039
value

00:30:45,760 --> 00:30:49,039
and so you can see there i've got my

00:30:47,039 --> 00:30:51,600
mock object and that's the wrapper

00:30:49,039 --> 00:30:53,919
and when i when i call m.message i get

00:30:51,600 --> 00:30:56,320
the string hello back

00:30:53,919 --> 00:30:58,159
um and another thing that mock comes

00:30:56,320 --> 00:31:01,200
with is something called patch

00:30:58,159 --> 00:31:03,039
which is a good way to

00:31:01,200 --> 00:31:04,320
patch some functionality that's not in

00:31:03,039 --> 00:31:07,519
your library but perhaps your

00:31:04,320 --> 00:31:09,679
library relies on so something like this

00:31:07,519 --> 00:31:12,960
this is from the gpr0 tests we have

00:31:09,679 --> 00:31:15,120
uh a an interface for

00:31:12,960 --> 00:31:16,480
dealing with the time of day so it's a

00:31:15,120 --> 00:31:18,399
time of j object is

00:31:16,480 --> 00:31:20,480
active between the times that you set

00:31:18,399 --> 00:31:23,279
and it's inactive outside of those times

00:31:20,480 --> 00:31:26,080
so you could wire this up to say an led

00:31:23,279 --> 00:31:28,880
and say well this led should be active

00:31:26,080 --> 00:31:29,519
when this time of day uh object is

00:31:28,880 --> 00:31:31,600
active

00:31:29,519 --> 00:31:33,840
so the led is on during between the

00:31:31,600 --> 00:31:36,720
hours of seven and eight pm

00:31:33,840 --> 00:31:38,080
uh much the same as a button could could

00:31:36,720 --> 00:31:39,120
be connected to an led and you could

00:31:38,080 --> 00:31:41,039
press the button and

00:31:39,120 --> 00:31:43,039
that is what controls the led but this

00:31:41,039 --> 00:31:45,919
is a time construct

00:31:43,039 --> 00:31:46,480
uh rather than a physical button and so

00:31:45,919 --> 00:31:48,799
with that

00:31:46,480 --> 00:31:50,399
i'm obviously using date time underneath

00:31:48,799 --> 00:31:52,080
and so i have to patch

00:31:50,399 --> 00:31:54,799
the instance of date time within my

00:31:52,080 --> 00:31:56,240
library and say well

00:31:54,799 --> 00:31:58,159
i'm going to test it i'm going to say

00:31:56,240 --> 00:32:00,480
well the um

00:31:58,159 --> 00:32:02,480
when they call date time the first time

00:32:00,480 --> 00:32:04,559
um

00:32:02,480 --> 00:32:06,240
i wanted to return this particular date

00:32:04,559 --> 00:32:08,320
so at 6 59

00:32:06,240 --> 00:32:10,240
i should assert that the time of day is

00:32:08,320 --> 00:32:12,799
not active because it's not seven yet

00:32:10,240 --> 00:32:14,320
and then i should be able to tell it the

00:32:12,799 --> 00:32:17,679
next time you call date time

00:32:14,320 --> 00:32:20,399
return this uh and it's now 7am

00:32:17,679 --> 00:32:21,679
and now the assertion is should be

00:32:20,399 --> 00:32:23,760
should be true

00:32:21,679 --> 00:32:25,039
and then at 8am it should still be true

00:32:23,760 --> 00:32:27,039
and 801

00:32:25,039 --> 00:32:28,399
uh it should have gone back to being

00:32:27,039 --> 00:32:30,159
inactive so it's

00:32:28,399 --> 00:32:31,600
just just all i'm doing is patching date

00:32:30,159 --> 00:32:33,360
time i'm still

00:32:31,600 --> 00:32:34,960
actually testing the library still doing

00:32:33,360 --> 00:32:36,159
an effective test but it's

00:32:34,960 --> 00:32:38,799
the thing underneath that i can't

00:32:36,159 --> 00:32:40,320
control rather than have to subtract and

00:32:38,799 --> 00:32:42,720
say we'll take the current time and add

00:32:40,320 --> 00:32:46,000
a minute and blah blah

00:32:42,720 --> 00:32:49,200
that's a much simpler way of doing it

00:32:46,000 --> 00:32:51,120
tox is a really cool tool for um

00:32:49,200 --> 00:32:52,559
from running your tests in multiple

00:32:51,120 --> 00:32:54,720
python versions

00:32:52,559 --> 00:32:56,640
um so if you're on ubuntu you can if you

00:32:54,720 --> 00:32:59,440
look up something called the dead snakes

00:32:56,640 --> 00:33:00,720
ppa you can act install multiple python

00:32:59,440 --> 00:33:01,760
versions not just the one that comes

00:33:00,720 --> 00:33:04,960
with your distribution

00:33:01,760 --> 00:33:07,519
of ubuntu um and all it takes is

00:33:04,960 --> 00:33:08,640
a tox configuration file that describes

00:33:07,519 --> 00:33:10,000
which

00:33:08,640 --> 00:33:11,279
python versions you want to run your

00:33:10,000 --> 00:33:12,240
tests in and you have to have them

00:33:11,279 --> 00:33:13,600
installed or

00:33:12,240 --> 00:33:15,679
otherwise it will just give warnings

00:33:13,600 --> 00:33:17,200
saying couldn't find this python

00:33:15,679 --> 00:33:18,720
um so that's a really good way of just

00:33:17,200 --> 00:33:20,240
on your machine

00:33:18,720 --> 00:33:21,600
be able to run the tests in multiple

00:33:20,240 --> 00:33:22,640
piping versions there's a lot of times

00:33:21,600 --> 00:33:24,240
when you know if you're

00:33:22,640 --> 00:33:26,159
if you still support an older version of

00:33:24,240 --> 00:33:28,080
python and you're using a new

00:33:26,159 --> 00:33:29,679
new bit functionality like like f

00:33:28,080 --> 00:33:32,960
strings or something like that

00:33:29,679 --> 00:33:35,600
um but yeah it's passing on your machine

00:33:32,960 --> 00:33:38,320
because you're running python 3.7 or 3.8

00:33:35,600 --> 00:33:39,760
um but then you see tox you know tells

00:33:38,320 --> 00:33:40,559
you oh this one failed because i don't

00:33:39,760 --> 00:33:43,120
know what this

00:33:40,559 --> 00:33:45,080
uh this f string thing is um so it's

00:33:43,120 --> 00:33:47,519
good to be able to do that

00:33:45,080 --> 00:33:48,159
coverage.py is a really another really

00:33:47,519 --> 00:33:50,880
cool tool

00:33:48,159 --> 00:33:52,720
that um does coverage analysis of your

00:33:50,880 --> 00:33:53,679
of your programs so based on your test

00:33:52,720 --> 00:33:56,880
suite

00:33:53,679 --> 00:33:58,559
uh it checks whether uh checks which

00:33:56,880 --> 00:33:59,279
parts of your code which lines of code

00:33:58,559 --> 00:34:01,120
have been

00:33:59,279 --> 00:34:02,960
touched by your tests and which ones

00:34:01,120 --> 00:34:04,080
haven't and if you've got something like

00:34:02,960 --> 00:34:06,320
a tree like a

00:34:04,080 --> 00:34:07,840
you know an if or a four or a a

00:34:06,320 --> 00:34:09,119
tri-accept or something and it's going

00:34:07,840 --> 00:34:10,320
there's multiple different ways that it

00:34:09,119 --> 00:34:13,280
could go

00:34:10,320 --> 00:34:14,159
it will identify which which branches of

00:34:13,280 --> 00:34:16,320
those trees

00:34:14,159 --> 00:34:18,240
didn't didn't get touched so it could it

00:34:16,320 --> 00:34:20,000
could even be something like

00:34:18,240 --> 00:34:21,359
you know it always goes into the if and

00:34:20,000 --> 00:34:22,320
never goes to the else or you know

00:34:21,359 --> 00:34:24,399
something like that

00:34:22,320 --> 00:34:25,520
um and it just shows you like actually

00:34:24,399 --> 00:34:26,560
you are not testing this part

00:34:25,520 --> 00:34:29,599
functionality

00:34:26,560 --> 00:34:31,520
uh which is a good way of um of finding

00:34:29,599 --> 00:34:34,000
you know getting getting good coverage

00:34:31,520 --> 00:34:35,679
of your of your of your tests

00:34:34,000 --> 00:34:37,200
um it's not completely foolproof because

00:34:35,679 --> 00:34:39,599
it's really easy to just

00:34:37,200 --> 00:34:40,240
obey the thing and fill in all the gaps

00:34:39,599 --> 00:34:42,320
you know and

00:34:40,240 --> 00:34:43,280
sort of hack your way through it but you

00:34:42,320 --> 00:34:45,599
know again it's an

00:34:43,280 --> 00:34:47,280
art lots to learn but uh it's it's a

00:34:45,599 --> 00:34:49,760
good indication

00:34:47,280 --> 00:34:50,879
so coverage for gpr0 for instance gives

00:34:49,760 --> 00:34:52,000
you something like this so these are all

00:34:50,879 --> 00:34:53,679
the different files

00:34:52,000 --> 00:34:55,280
and it shows you which lines are missing

00:34:53,679 --> 00:34:56,560
from the tests and you know if

00:34:55,280 --> 00:34:57,760
something's at 98

00:34:56,560 --> 00:34:59,599
or something perhaps you're not that

00:34:57,760 --> 00:35:01,040
bothered but if something's a lot lower

00:34:59,599 --> 00:35:02,880
uh you might want to go and investigate

00:35:01,040 --> 00:35:06,240
actually we're not testing large

00:35:02,880 --> 00:35:09,520
parts of this of this file

00:35:06,240 --> 00:35:10,400
so travis ci ci's continuous integration

00:35:09,520 --> 00:35:12,400
so this is

00:35:10,400 --> 00:35:14,839
an online service which is free to use

00:35:12,400 --> 00:35:18,480
if your project is open source

00:35:14,839 --> 00:35:21,040
and uh you can you can run

00:35:18,480 --> 00:35:22,880
you can define uh which python versions

00:35:21,040 --> 00:35:23,520
to run but as soon as you uh push to

00:35:22,880 --> 00:35:25,920
github

00:35:23,520 --> 00:35:27,440
or if there's a branch or a pull request

00:35:25,920 --> 00:35:30,480
it will run all your tests

00:35:27,440 --> 00:35:32,000
um on on the travis servers and give you

00:35:30,480 --> 00:35:33,599
a report saying

00:35:32,000 --> 00:35:35,119
you know it passed on all these versions

00:35:33,599 --> 00:35:38,400
or it failed on

00:35:35,119 --> 00:35:38,880
3.5 or whatever uh which is really

00:35:38,400 --> 00:35:41,440
useful

00:35:38,880 --> 00:35:42,000
and it also feeds back to your um as

00:35:41,440 --> 00:35:44,960
does

00:35:42,000 --> 00:35:46,000
code coverage they feed back to your um

00:35:44,960 --> 00:35:47,440
to your github

00:35:46,000 --> 00:35:49,680
if it's a pull request for instance it

00:35:47,440 --> 00:35:51,920
will uh post an issue

00:35:49,680 --> 00:35:53,440
so i post a uh a comment on the pull

00:35:51,920 --> 00:35:56,880
request saying

00:35:53,440 --> 00:35:59,359
uh yeah all the tests passed but um

00:35:56,880 --> 00:36:00,480
the the code coverage went down by one

00:35:59,359 --> 00:36:01,599
point something percent

00:36:00,480 --> 00:36:03,839
and that kind of thing which can be

00:36:01,599 --> 00:36:06,320
really useful um both for you as the

00:36:03,839 --> 00:36:09,440
maintainer and for any contributors that

00:36:06,320 --> 00:36:12,400
that did the um uh the

00:36:09,440 --> 00:36:13,520
file the pr so again just revisiting

00:36:12,400 --> 00:36:15,839
mate files

00:36:13,520 --> 00:36:16,800
example here uh because you know the

00:36:15,839 --> 00:36:18,640
tests are it's

00:36:16,800 --> 00:36:20,400
it's sort of a non-trivial it's not just

00:36:18,640 --> 00:36:22,240
a case of you type pi test and

00:36:20,400 --> 00:36:24,800
hit enter it's because i'm using

00:36:22,240 --> 00:36:27,599
coverage aligned with pi test and i'm

00:36:24,800 --> 00:36:28,880
using a particular configuration file

00:36:27,599 --> 00:36:30,880
defining that in here

00:36:28,880 --> 00:36:33,200
just makes it much easier for for people

00:36:30,880 --> 00:36:36,160
because they just now i run make test

00:36:33,200 --> 00:36:37,760
and if that changes in future if the um

00:36:36,160 --> 00:36:38,960
if i'm if i'm adding another library

00:36:37,760 --> 00:36:41,040
that i'm using underneath or

00:36:38,960 --> 00:36:42,880
changing it somehow or the pi test

00:36:41,040 --> 00:36:45,359
command changes

00:36:42,880 --> 00:36:47,119
um you know it's it's still there make

00:36:45,359 --> 00:36:50,640
test still works you just update the

00:36:47,119 --> 00:36:52,079
uh the definition uh so again

00:36:50,640 --> 00:36:53,520
for stuff like this it's really really

00:36:52,079 --> 00:36:55,520
useful to have simple mate tests for

00:36:53,520 --> 00:36:59,359
that kind of thing

00:36:55,520 --> 00:36:59,359
documentation so um

00:37:01,359 --> 00:37:07,520
they're kind of according to daniel a

00:37:04,720 --> 00:37:08,640
um of divio he's a friend of the python

00:37:07,520 --> 00:37:11,839
community

00:37:08,640 --> 00:37:14,160
and previous chair of the pycon uk

00:37:11,839 --> 00:37:15,599
conference and society he does a

00:37:14,160 --> 00:37:15,920
brilliant blog post on this which you

00:37:15,599 --> 00:37:18,000
can

00:37:15,920 --> 00:37:19,599
you can read up on the divio website

00:37:18,000 --> 00:37:20,160
there are four types of documentation he

00:37:19,599 --> 00:37:22,160
says

00:37:20,160 --> 00:37:23,280
there's tutorials there are how-to

00:37:22,160 --> 00:37:25,839
guides

00:37:23,280 --> 00:37:26,480
explanation and reference so reference

00:37:25,839 --> 00:37:28,079
is one

00:37:26,480 --> 00:37:30,079
quite common one you'll find people

00:37:28,079 --> 00:37:31,520
document their apis so they'll say this

00:37:30,079 --> 00:37:33,200
is a function that has this

00:37:31,520 --> 00:37:35,440
this is a method that works like this

00:37:33,200 --> 00:37:38,960
this takes this these parameters

00:37:35,440 --> 00:37:40,640
that kind of thing um but they'll also

00:37:38,960 --> 00:37:42,800
kind of bundle in things like

00:37:40,640 --> 00:37:44,880
backstory and oh you know this is an in

00:37:42,800 --> 00:37:46,160
joke and you know oh this is this is how

00:37:44,880 --> 00:37:47,200
you install it and if you're on a mac

00:37:46,160 --> 00:37:49,440
then you do this and it

00:37:47,200 --> 00:37:50,400
kind of bloats and becomes really messy

00:37:49,440 --> 00:37:51,839
so his

00:37:50,400 --> 00:37:53,520
whole proposal is that we should be

00:37:51,839 --> 00:37:54,079
splitting these into into those four

00:37:53,520 --> 00:37:56,960
things but

00:37:54,079 --> 00:37:58,320
he gives a brilliant talk uh about that

00:37:56,960 --> 00:38:00,160
whole concept which is really

00:37:58,320 --> 00:38:01,359
and really worth reading about it on

00:38:00,160 --> 00:38:03,040
their website as well

00:38:01,359 --> 00:38:04,400
but yeah documentation is really useful

00:38:03,040 --> 00:38:06,160
so um

00:38:04,400 --> 00:38:07,440
again looking at really easy ways to get

00:38:06,160 --> 00:38:08,480
started with these things and and

00:38:07,440 --> 00:38:11,520
looking at more

00:38:08,480 --> 00:38:12,800
uh advanced routes as well so a really

00:38:11,520 --> 00:38:16,000
easy two ways

00:38:12,800 --> 00:38:16,560
to document stuff is just put readme

00:38:16,000 --> 00:38:19,119
files

00:38:16,560 --> 00:38:19,599
uh in your github repository so write

00:38:19,119 --> 00:38:22,640
them in

00:38:19,599 --> 00:38:24,160
um in markdown and um

00:38:22,640 --> 00:38:25,680
if people if somebody's looking at your

00:38:24,160 --> 00:38:27,200
project even if it's not published onto

00:38:25,680 --> 00:38:28,320
piper or it's not a debian package or

00:38:27,200 --> 00:38:30,320
whatever

00:38:28,320 --> 00:38:32,240
um just being able to come across it on

00:38:30,320 --> 00:38:35,280
github you can read

00:38:32,240 --> 00:38:37,680
on the readme and so

00:38:35,280 --> 00:38:38,400
this is just a couple of examples um of

00:38:37,680 --> 00:38:40,240
what readme

00:38:38,400 --> 00:38:41,920
uh what markdown documentation looks

00:38:40,240 --> 00:38:44,720
like on github

00:38:41,920 --> 00:38:46,000
and so markdown looks like this so it's

00:38:44,720 --> 00:38:48,560
really simple syntax

00:38:46,000 --> 00:38:49,520
really really really simple syntax um

00:38:48,560 --> 00:38:51,760
for

00:38:49,520 --> 00:38:52,560
for writing stuff so you've got a hash

00:38:51,760 --> 00:38:55,200
here which is

00:38:52,560 --> 00:38:56,480
which is a title two hashes is a header

00:38:55,200 --> 00:38:57,920
just text on its own it's just a

00:38:56,480 --> 00:39:01,200
paragraph

00:38:57,920 --> 00:39:01,599
uh use hyphens or asterisks to to make a

00:39:01,200 --> 00:39:03,760
list

00:39:01,599 --> 00:39:05,359
and a link looks like this you put the

00:39:03,760 --> 00:39:08,880
square brackets around the text and

00:39:05,359 --> 00:39:10,640
round brackets around the link itself um

00:39:08,880 --> 00:39:12,240
there's also a project called mk docs

00:39:10,640 --> 00:39:14,400
which is a mark

00:39:12,240 --> 00:39:16,800
markdown based documentation builder

00:39:14,400 --> 00:39:18,720
exports static html full websites of

00:39:16,800 --> 00:39:20,640
your markdown documentation

00:39:18,720 --> 00:39:22,800
easy to write it's easy to deploy and

00:39:20,640 --> 00:39:24,960
you can self-host it or put it on github

00:39:22,800 --> 00:39:27,200
pages or something like that there's

00:39:24,960 --> 00:39:29,119
lots you can do with it restructured

00:39:27,200 --> 00:39:31,599
text uh i find a much

00:39:29,119 --> 00:39:32,960
much more um stringent sort of markup

00:39:31,599 --> 00:39:35,599
language um

00:39:32,960 --> 00:39:38,160
quite complex quite um quite a lot quite

00:39:35,599 --> 00:39:40,000
a a learning curve but

00:39:38,160 --> 00:39:42,000
you know in essence this is as similar

00:39:40,000 --> 00:39:42,560
to to what i showed previously so you've

00:39:42,000 --> 00:39:44,160
got a

00:39:42,560 --> 00:39:47,119
title it's a bit more the books you've

00:39:44,160 --> 00:39:49,760
got a bit more stuff a header to

00:39:47,119 --> 00:39:50,800
list uh list items uh but this thing is

00:39:49,760 --> 00:39:51,680
something that's a little bit different

00:39:50,800 --> 00:39:54,240
so

00:39:51,680 --> 00:39:56,400
this is a link that's pointing to

00:39:54,240 --> 00:39:58,560
another documentation page

00:39:56,400 --> 00:39:59,920
so with another page within the project

00:39:58,560 --> 00:40:01,040
and you can do things like that they're

00:39:59,920 --> 00:40:02,800
a little bit more clever a little bit

00:40:01,040 --> 00:40:06,240
more sophisticated

00:40:02,800 --> 00:40:08,079
and it will actually get the um the

00:40:06,240 --> 00:40:10,240
page title because it has context of

00:40:08,079 --> 00:40:13,599
what the other pages are

00:40:10,240 --> 00:40:16,640
and it will um include

00:40:13,599 --> 00:40:17,119
uh the page title and a link that way um

00:40:16,640 --> 00:40:18,880
so there's

00:40:17,119 --> 00:40:21,520
a project called sphinx which uses

00:40:18,880 --> 00:40:23,119
restructured text um

00:40:21,520 --> 00:40:25,119
you can what's really clever about it is

00:40:23,119 --> 00:40:26,960
you can it extracts the docs from your

00:40:25,119 --> 00:40:27,760
doc strings so if you write doc strings

00:40:26,960 --> 00:40:28,800
anyway

00:40:27,760 --> 00:40:30,240
you've kind of already written your

00:40:28,800 --> 00:40:31,599
documentation and it will build you a

00:40:30,240 --> 00:40:33,680
site out of

00:40:31,599 --> 00:40:35,200
your docs strings you have the power to

00:40:33,680 --> 00:40:37,359
kind of choose which pages

00:40:35,200 --> 00:40:39,440
and where where things go for instance

00:40:37,359 --> 00:40:41,520
uh you can also link to

00:40:39,440 --> 00:40:42,800
a link to the python documentation so if

00:40:41,520 --> 00:40:43,680
you link to a python function or a

00:40:42,800 --> 00:40:45,839
python class

00:40:43,680 --> 00:40:48,400
from the standard library you can also

00:40:45,839 --> 00:40:52,160
link to other

00:40:48,400 --> 00:40:53,839
other sphinx projects um

00:40:52,160 --> 00:40:55,839
if you if you you know perhaps your

00:40:53,839 --> 00:40:57,200
dependent libraries

00:40:55,839 --> 00:40:59,839
so sphinx for instance something like

00:40:57,200 --> 00:41:01,440
this you can write um you can write a

00:40:59,839 --> 00:41:03,119
page and say well i want to have this

00:41:01,440 --> 00:41:06,000
paragraph and this title

00:41:03,119 --> 00:41:06,319
um and then for each class and you just

00:41:06,000 --> 00:41:08,640
say

00:41:06,319 --> 00:41:09,920
auto class and you tell it which which

00:41:08,640 --> 00:41:12,240
parameters to provide

00:41:09,920 --> 00:41:13,040
and which which methods and things to

00:41:12,240 --> 00:41:15,280
provide

00:41:13,040 --> 00:41:16,800
and it will automatically grab them from

00:41:15,280 --> 00:41:19,200
your documentation and fill them out

00:41:16,800 --> 00:41:21,040
like this

00:41:19,200 --> 00:41:22,720
uh the part you might be familiar with

00:41:21,040 --> 00:41:23,599
sphynx because the python documentation

00:41:22,720 --> 00:41:27,040
and a lot of

00:41:23,599 --> 00:41:28,400
uh projects okay a lot of uh projects in

00:41:27,040 --> 00:41:31,520
the python ecosystem

00:41:28,400 --> 00:41:33,680
are you stinks um

00:41:31,520 --> 00:41:35,040
read the docs is quite a common um

00:41:33,680 --> 00:41:36,720
method of deployment for those

00:41:35,040 --> 00:41:38,160
you can have multiple branches uh

00:41:36,720 --> 00:41:42,000
multiple versions and

00:41:38,160 --> 00:41:43,680
and access whole whole projects that way

00:41:42,000 --> 00:41:46,560
really easy to automate as soon as you

00:41:43,680 --> 00:41:48,000
do a release it um

00:41:46,560 --> 00:41:50,079
automates a new build of your

00:41:48,000 --> 00:41:53,359
documentation on every branch or every

00:41:50,079 --> 00:41:55,599
uh new release and um

00:41:53,359 --> 00:41:57,920
graphviz is uh something i use in my

00:41:55,599 --> 00:41:59,920
documentation as well really cool way of

00:41:57,920 --> 00:42:01,280
creating little graphs to describe parts

00:41:59,920 --> 00:42:03,920
of your project

00:42:01,280 --> 00:42:05,359
um i won't go over this but this is just

00:42:03,920 --> 00:42:07,520
a way of describing

00:42:05,359 --> 00:42:09,040
the relationship between two boxes and

00:42:07,520 --> 00:42:11,440
that kind of thing

00:42:09,040 --> 00:42:13,119
and you can do more complex things like

00:42:11,440 --> 00:42:14,960
class hierarchy diagrams which are

00:42:13,119 --> 00:42:17,599
automated from your python code

00:42:14,960 --> 00:42:19,760
which can be really cool so we've got a

00:42:17,599 --> 00:42:23,119
load of stuff in our project now

00:42:19,760 --> 00:42:24,160
um so just to summarize what we what we

00:42:23,119 --> 00:42:26,400
discussed so

00:42:24,160 --> 00:42:27,680
how to organize your python module the

00:42:26,400 --> 00:42:30,560
module structure

00:42:27,680 --> 00:42:31,440
uh distributing software pipeline pip

00:42:30,560 --> 00:42:33,520
using github

00:42:31,440 --> 00:42:35,760
and all the different um tools that it

00:42:33,520 --> 00:42:38,319
provides virtual environments

00:42:35,760 --> 00:42:39,520
testing and automated testing uh

00:42:38,319 --> 00:42:44,000
documentation

00:42:39,520 --> 00:42:45,599
and software licensing uh i i tend to um

00:42:44,000 --> 00:42:47,440
write about tools like this that i come

00:42:45,599 --> 00:42:50,000
across uh i've got a tooling blog

00:42:47,440 --> 00:42:50,720
at tooling.bendnosal.com inspired by my

00:42:50,000 --> 00:42:52,480
friend les

00:42:50,720 --> 00:42:53,760
who just does something similar and i

00:42:52,480 --> 00:42:55,520
kind of post on there

00:42:53,760 --> 00:42:56,800
uh every now and then so if you're

00:42:55,520 --> 00:42:58,720
interested in this kind of thing

00:42:56,800 --> 00:43:00,319
you know new tools that i come across do

00:42:58,720 --> 00:43:04,000
you follow that

00:43:00,319 --> 00:43:04,000
and that's all from me thanks very much

00:43:08,560 --> 00:43:12,400
thank you very much we already have

00:43:11,280 --> 00:43:14,240
questions here

00:43:12,400 --> 00:43:16,720
we are a little bit late but we have

00:43:14,240 --> 00:43:19,839
enough time for two questions

00:43:16,720 --> 00:43:22,720
the first one is you mentioned for

00:43:19,839 --> 00:43:23,920
linux those packages pip etc and also

00:43:22,720 --> 00:43:26,319
for mac

00:43:23,920 --> 00:43:28,560
what about windows packaging options

00:43:26,319 --> 00:43:31,520
with python

00:43:28,560 --> 00:43:32,160
uh so pip is is is compatible with

00:43:31,520 --> 00:43:35,200
windows

00:43:32,160 --> 00:43:35,520
um so you you know a lot of uh for most

00:43:35,200 --> 00:43:37,440
thing

00:43:35,520 --> 00:43:40,400
most projects you'll be able to use pip

00:43:37,440 --> 00:43:43,920
exactly the same on windows

00:43:40,400 --> 00:43:48,480
i don't know a lot about um

00:43:43,920 --> 00:43:50,560
windows packaging beyond um beyond that

00:43:48,480 --> 00:43:52,480
but there are people out there in the

00:43:50,560 --> 00:43:54,000
ecosystem making making i know that make

00:43:52,480 --> 00:43:54,640
making it work and there are some really

00:43:54,000 --> 00:43:56,319
good

00:43:54,640 --> 00:43:58,000
python community members that work at

00:43:56,319 --> 00:43:59,359
microsoft and working on those kind of

00:43:58,000 --> 00:44:01,920
things so

00:43:59,359 --> 00:44:03,200
um i don't have any particular expertise

00:44:01,920 --> 00:44:05,040
to be able to answer that but

00:44:03,200 --> 00:44:07,680
i know that there are there are options

00:44:05,040 --> 00:44:09,440
yeah and python itself i know it's

00:44:07,680 --> 00:44:11,599
in the windows 10 store now so i know

00:44:09,440 --> 00:44:14,160
it's it's easy to get python and

00:44:11,599 --> 00:44:14,800
uh and it comes with pip so yeah you can

00:44:14,160 --> 00:44:18,319
use pip

00:44:14,800 --> 00:44:20,079
um but uh there isn't uh necessarily the

00:44:18,319 --> 00:44:21,680
equivalent of something like apt for

00:44:20,079 --> 00:44:22,960
for windows not in quite in the same way

00:44:21,680 --> 00:44:24,400
i think there's there's something going

00:44:22,960 --> 00:44:27,760
on at the moment but

00:44:24,400 --> 00:44:30,079
um not quite

00:44:27,760 --> 00:44:30,960
a complete picture of the the open

00:44:30,079 --> 00:44:33,200
source as

00:44:30,960 --> 00:44:35,599
uh ecosystem the way there is on on say

00:44:33,200 --> 00:44:35,599
debian

00:44:35,839 --> 00:44:39,520
okay there is another question and also

00:44:37,680 --> 00:44:42,079
unfortunately last question for

00:44:39,520 --> 00:44:42,640
this session what are your thoughts

00:44:42,079 --> 00:44:46,240
using

00:44:42,640 --> 00:44:47,920
github actions instead of travis ci

00:44:46,240 --> 00:44:48,960
uh i haven't used it yet uh it looks

00:44:47,920 --> 00:44:50,800
really interesting i've been meaning to

00:44:48,960 --> 00:44:51,359
to take a look yeah definitely worth

00:44:50,800 --> 00:44:54,000
looking at

00:44:51,359 --> 00:44:55,520
i think uh there are some people um i've

00:44:54,000 --> 00:44:56,240
seen in the python ecosystem using it

00:44:55,520 --> 00:44:59,440
and

00:44:56,240 --> 00:44:59,440
seen some good things about it

00:44:59,520 --> 00:45:06,480
okay thank you very much again thank you

00:45:04,480 --> 00:45:08,640
and if you want to ask more questions

00:45:06,480 --> 00:45:12,079
please go to the discord channel you can

00:45:08,640 --> 00:45:14,720
reach that by pressing ctrl or command k

00:45:12,079 --> 00:45:15,760
and then typing maintaining and then you

00:45:14,720 --> 00:45:19,040
see the first

00:45:15,760 --> 00:45:21,119
first result search result is the

00:45:19,040 --> 00:45:23,839
channel for the talk

00:45:21,119 --> 00:45:24,480
and i see there's already some action

00:45:23,839 --> 00:45:28,599
there

00:45:24,480 --> 00:45:31,599
so please continue there thank you very

00:45:28,599 --> 00:45:31,599

YouTube URL: https://www.youtube.com/watch?v=qgM2md7TsEA


