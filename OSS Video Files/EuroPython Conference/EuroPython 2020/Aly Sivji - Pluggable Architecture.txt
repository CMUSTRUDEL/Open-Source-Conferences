Title: Aly Sivji - Pluggable Architecture
Publication date: 2020-09-21
Playlist: EuroPython 2020
Description: 
	"Pluggable Architecture
EuroPython 2020 - Talk - 2020-07-23 - Ni
Online

By Aly Sivji

Applications and libraries with a pluggable architecture allow developers to add custom functionality. Plugins can customize user interfaces, create new workflows, and interface with legacy systems. Designing a plugin is often difficult - documentation is sparse, outdated, or non-existent. You end up diving into a unfamiliar codebase to figure out what to do.

This talk examines Pluggable Architecture by creating a custom plugin system: we will design an interface, think about where to hook in custom behavior, and discuss testing techniques. Understanding these principles will enable us to write custom plugins for third-party libraries. Extend the functionality of your favourite library without touching existing code!



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2020.europython.eu/events/speaker-release-agreement/

    "
Captions: 
	00:00:06,240 --> 00:00:10,400
right so

00:00:07,120 --> 00:00:12,960
i think uh ali is ready hello ali

00:00:10,400 --> 00:00:14,240
hey how's it going yeah do i pronounce

00:00:12,960 --> 00:00:15,200
your name correctly like how do i

00:00:14,240 --> 00:00:17,920
pronounce your name

00:00:15,200 --> 00:00:19,760
it's it's ali ali yeah that's that's

00:00:17,920 --> 00:00:21,039
great that's amazing so uh where are you

00:00:19,760 --> 00:00:24,240
connecting from

00:00:21,039 --> 00:00:27,599
i'm calling in from chicago oh wow

00:00:24,240 --> 00:00:29,840
that's great that's amazing okay so uh

00:00:27,599 --> 00:00:32,480
yeah i can see that your slice is there

00:00:29,840 --> 00:00:34,320
and take us away

00:00:32,480 --> 00:00:35,840
awesome well i want to start by thanking

00:00:34,320 --> 00:00:38,399
the organizers for giving me this

00:00:35,840 --> 00:00:40,879
opportunity to share my knowledge

00:00:38,399 --> 00:00:42,239
get this going my name is ali sivjei you

00:00:40,879 --> 00:00:44,559
can find me on twitter

00:00:42,239 --> 00:00:46,239
at kaya sivjaz i've tweeted links to

00:00:44,559 --> 00:00:48,079
these slides so if you want to find them

00:00:46,239 --> 00:00:50,320
uh they will be available on my twitter

00:00:48,079 --> 00:00:52,480
there will also be links at the end

00:00:50,320 --> 00:00:53,680
i'm one of the organizers of the chicago

00:00:52,480 --> 00:00:55,920
python users group

00:00:53,680 --> 00:00:57,360
we call ourselves chippy chippy's one of

00:00:55,920 --> 00:00:58,239
the largest python communities in the

00:00:57,360 --> 00:01:00,800
world we have

00:00:58,239 --> 00:01:02,239
around 6 000 members and every month

00:01:00,800 --> 00:01:04,879
when we were meeting in person

00:01:02,239 --> 00:01:06,320
we held four to six events normally at

00:01:04,879 --> 00:01:07,280
this time i'd invite you all to come out

00:01:06,320 --> 00:01:08,880
to chicago

00:01:07,280 --> 00:01:10,799
and attend a chippy meet-up but we've

00:01:08,880 --> 00:01:13,119
had to postpone all of our events

00:01:10,799 --> 00:01:14,640
until it's safe to meet in large groups

00:01:13,119 --> 00:01:16,720
but we have started live streaming our

00:01:14,640 --> 00:01:18,560
events to our youtube channel

00:01:16,720 --> 00:01:20,240
now there's no reason to visit chicago

00:01:18,560 --> 00:01:21,360
although i still suggest you come when

00:01:20,240 --> 00:01:23,520
things clear up

00:01:21,360 --> 00:01:25,520
subscribe to our channel click that bell

00:01:23,520 --> 00:01:26,080
icon and you'll get notified of upcoming

00:01:25,520 --> 00:01:27,840
events

00:01:26,080 --> 00:01:29,600
hope to see you all on the live stream

00:01:27,840 --> 00:01:30,640
and we actually have diana appearing on

00:01:29,600 --> 00:01:32,240
august 4th so

00:01:30,640 --> 00:01:34,000
if you want to hear her give a talk

00:01:32,240 --> 00:01:35,680
about flask come on out it's going to be

00:01:34,000 --> 00:01:38,320
a good time

00:01:35,680 --> 00:01:39,439
let's just get started plugins are

00:01:38,320 --> 00:01:41,759
software components

00:01:39,439 --> 00:01:43,520
that extend or enhance existing an

00:01:41,759 --> 00:01:46,000
existing program

00:01:43,520 --> 00:01:47,040
plugins are also known as extensions or

00:01:46,000 --> 00:01:49,520
add-ons

00:01:47,040 --> 00:01:50,799
technically these definitions are a bit

00:01:49,520 --> 00:01:51,920
different for each of those words but

00:01:50,799 --> 00:01:53,840
for the purposes of

00:01:51,920 --> 00:01:55,680
this presentation we can treat them

00:01:53,840 --> 00:01:57,600
interchangeably

00:01:55,680 --> 00:02:00,399
if we start looking around we can find

00:01:57,600 --> 00:02:02,159
plugin systems everywhere we look

00:02:00,399 --> 00:02:04,960
web browsers are the most used piece of

00:02:02,159 --> 00:02:06,719
software each browser has an ecosystem

00:02:04,960 --> 00:02:09,039
of third-party developers

00:02:06,719 --> 00:02:10,479
making plugins for things like adblock

00:02:09,039 --> 00:02:13,120
password management

00:02:10,479 --> 00:02:16,160
then key bindings and javascript has a

00:02:13,120 --> 00:02:18,560
bunch of developer tools as well

00:02:16,160 --> 00:02:19,360
ides and text editors also have plugin

00:02:18,560 --> 00:02:21,520
systems

00:02:19,360 --> 00:02:23,200
in my vs code i have plugins to make it

00:02:21,520 --> 00:02:25,040
easier to debug javascript

00:02:23,200 --> 00:02:27,599
to improve my user experiences with

00:02:25,040 --> 00:02:29,440
ligatures to interact with third-party

00:02:27,599 --> 00:02:31,760
libraries and tools like docker

00:02:29,440 --> 00:02:33,760
like github and it also adds support for

00:02:31,760 --> 00:02:35,920
a query language

00:02:33,760 --> 00:02:38,080
with media players we can use plugins to

00:02:35,920 --> 00:02:41,200
add functionality for new file types

00:02:38,080 --> 00:02:42,560
and also change user interfaces they

00:02:41,200 --> 00:02:44,480
call those skins

00:02:42,560 --> 00:02:46,800
also does anybody remember all those

00:02:44,480 --> 00:02:47,360
fantastic visualization plugins from

00:02:46,800 --> 00:02:50,560
winamp

00:02:47,360 --> 00:02:52,640
from back in the day wordpress is a

00:02:50,560 --> 00:02:54,800
popular content management software

00:02:52,640 --> 00:02:56,720
it's written in php and it's estimated

00:02:54,800 --> 00:02:58,640
that wordpress powers 35

00:02:56,720 --> 00:03:00,000
of the world's websites there are

00:02:58,640 --> 00:03:01,680
thousands of plugins written for

00:03:00,000 --> 00:03:02,480
wordpress that allow you to customize

00:03:01,680 --> 00:03:05,519
your website

00:03:02,480 --> 00:03:07,840
to do pretty much everything woocommerce

00:03:05,519 --> 00:03:09,760
that's a wordpress a wordpress plugin

00:03:07,840 --> 00:03:12,400
that lets you add e-commerce

00:03:09,760 --> 00:03:13,440
to your website woocommerce has its own

00:03:12,400 --> 00:03:16,840
plugin system

00:03:13,440 --> 00:03:18,400
so you can write custom plugins for a

00:03:16,840 --> 00:03:20,319
plug-in

00:03:18,400 --> 00:03:21,920
your favorite web framework that

00:03:20,319 --> 00:03:22,800
probably has a way to use third-party

00:03:21,920 --> 00:03:24,159
libraries as well

00:03:22,800 --> 00:03:27,599
later on we're going to talk about

00:03:24,159 --> 00:03:29,280
adding plugins to django and to flask

00:03:27,599 --> 00:03:30,720
there are many benefits in implementing

00:03:29,280 --> 00:03:32,959
a plugin system

00:03:30,720 --> 00:03:34,640
the biggest one is that plugins they

00:03:32,959 --> 00:03:36,239
make it easier for us to develop new

00:03:34,640 --> 00:03:38,560
features

00:03:36,239 --> 00:03:40,159
plugins also allow us to split up our

00:03:38,560 --> 00:03:40,959
program functionality into logical

00:03:40,159 --> 00:03:42,640
chunks

00:03:40,959 --> 00:03:44,640
this makes our program smaller and

00:03:42,640 --> 00:03:46,560
easier to understand for instance

00:03:44,640 --> 00:03:48,400
when we want to make a plugin we really

00:03:46,560 --> 00:03:51,200
don't have to understand how the host

00:03:48,400 --> 00:03:51,200
application works

00:03:51,519 --> 00:03:55,200
and third-party developers they can

00:03:53,519 --> 00:03:57,280
leverage plug-in architecture

00:03:55,200 --> 00:03:58,959
to design solutions that fit their needs

00:03:57,280 --> 00:04:00,959
that fit their clients needs

00:03:58,959 --> 00:04:03,840
could you imagine using a web browser

00:04:00,959 --> 00:04:05,920
without any extensions

00:04:03,840 --> 00:04:07,760
we also have to discuss trade-offs for

00:04:05,920 --> 00:04:08,000
plugins i don't like to think of these

00:04:07,760 --> 00:04:09,680
as

00:04:08,000 --> 00:04:11,040
disadvantages they're more along the

00:04:09,680 --> 00:04:13,680
lines of things we need to consider

00:04:11,040 --> 00:04:15,280
before we make our decision

00:04:13,680 --> 00:04:16,720
like everything else in programming

00:04:15,280 --> 00:04:17,519
especially in object oriented

00:04:16,720 --> 00:04:19,199
programming

00:04:17,519 --> 00:04:21,359
we have to do a little bit of upfront

00:04:19,199 --> 00:04:22,320
design in order to implement plug-in

00:04:21,359 --> 00:04:24,320
architecture

00:04:22,320 --> 00:04:25,840
we have to figure out how our plug-in is

00:04:24,320 --> 00:04:29,040
going to interact with our core

00:04:25,840 --> 00:04:31,280
application logic plugins also

00:04:29,040 --> 00:04:33,120
mean that our core application logic

00:04:31,280 --> 00:04:34,400
will require additional complexity to

00:04:33,120 --> 00:04:36,000
handle these plugins

00:04:34,400 --> 00:04:39,440
we'd have to decide if this additional

00:04:36,000 --> 00:04:41,360
complexity is actually worth it

00:04:39,440 --> 00:04:42,880
before we start diving in any further i

00:04:41,360 --> 00:04:44,720
just want to give over overview of my

00:04:42,880 --> 00:04:46,960
goals for this talk

00:04:44,720 --> 00:04:48,240
by the end of this session i hope to

00:04:46,960 --> 00:04:50,479
provide you enough knowledge

00:04:48,240 --> 00:04:52,240
that you can go out and write a plug-in

00:04:50,479 --> 00:04:53,520
for any third-party

00:04:52,240 --> 00:04:55,600
or a third-party plugin for any

00:04:53,520 --> 00:04:56,000
application you want this doesn't have

00:04:55,600 --> 00:04:57,840
to be

00:04:56,000 --> 00:04:59,600
a python plugin the concepts we're going

00:04:57,840 --> 00:05:01,520
to talk about they can be applied pretty

00:04:59,600 --> 00:05:03,520
generally

00:05:01,520 --> 00:05:05,360
a brief outline to what's to come we're

00:05:03,520 --> 00:05:05,919
going to start by deconstructing plug-in

00:05:05,360 --> 00:05:08,639
systems

00:05:05,919 --> 00:05:10,080
into their base components then we're

00:05:08,639 --> 00:05:12,160
going to use that knowledge

00:05:10,080 --> 00:05:14,080
to build a small application with a

00:05:12,160 --> 00:05:15,520
naive plug-in system

00:05:14,080 --> 00:05:17,280
i like doing things from first

00:05:15,520 --> 00:05:18,479
principles so the best way to learn how

00:05:17,280 --> 00:05:21,199
to build plug-ins

00:05:18,479 --> 00:05:22,800
is to build a plug-in system finally

00:05:21,199 --> 00:05:25,199
we'll explore how we can write plug-ins

00:05:22,800 --> 00:05:27,520
for flask and django

00:05:25,199 --> 00:05:28,880
while we do build a naive implementation

00:05:27,520 --> 00:05:31,120
of a plugin system

00:05:28,880 --> 00:05:33,600
we don't have time to discuss all the

00:05:31,120 --> 00:05:35,280
things that make a plugin system

00:05:33,600 --> 00:05:37,199
be something you can like push out to

00:05:35,280 --> 00:05:38,080
production but if you are looking for

00:05:37,199 --> 00:05:40,160
resources

00:05:38,080 --> 00:05:42,160
i've provided links both of these talks

00:05:40,160 --> 00:05:44,320
are fantastic and i really want to thank

00:05:42,160 --> 00:05:46,240
doug and rose for sharing this knowledge

00:05:44,320 --> 00:05:46,560
with the community i use this material

00:05:46,240 --> 00:05:50,080
to

00:05:46,560 --> 00:05:50,960
create this talk so let's start by

00:05:50,080 --> 00:05:52,880
exploring

00:05:50,960 --> 00:05:55,199
what makes a plugin system a plugin

00:05:52,880 --> 00:05:55,199
system

00:06:00,160 --> 00:06:03,680
when we have a plugin by itself it

00:06:02,319 --> 00:06:05,600
doesn't do us any good

00:06:03,680 --> 00:06:06,960
it needs to be part of something larger

00:06:05,600 --> 00:06:08,800
that is it needs to plug

00:06:06,960 --> 00:06:12,000
into something and we call that

00:06:08,800 --> 00:06:14,400
something the host application

00:06:12,000 --> 00:06:15,120
plugins and hosts need a way to talk to

00:06:14,400 --> 00:06:16,960
each other

00:06:15,120 --> 00:06:19,120
the communication channel could be

00:06:16,960 --> 00:06:20,639
calling a function getting a value back

00:06:19,120 --> 00:06:23,520
or we could be using a communication

00:06:20,639 --> 00:06:25,440
layer like websockets

00:06:23,520 --> 00:06:27,440
there also needs to be a way for plugins

00:06:25,440 --> 00:06:28,880
to register with the host application

00:06:27,440 --> 00:06:31,600
this can be done a bunch of different

00:06:28,880 --> 00:06:33,759
ways some common ways are

00:06:31,600 --> 00:06:35,039
loading information or loading plugins

00:06:33,759 --> 00:06:36,880
into a folder

00:06:35,039 --> 00:06:38,639
and then when the program starts up it

00:06:36,880 --> 00:06:40,800
initializes all those plugins

00:06:38,639 --> 00:06:42,960
inside that folder and if this sounds

00:06:40,800 --> 00:06:43,360
familiar it's sort of the way how python

00:06:42,960 --> 00:06:45,360
works

00:06:43,360 --> 00:06:46,800
when we pip install a package all of

00:06:45,360 --> 00:06:47,440
that information goes into our site

00:06:46,800 --> 00:06:49,599
packages

00:06:47,440 --> 00:06:51,919
and then we're able to import it into

00:06:49,599 --> 00:06:53,520
our process

00:06:51,919 --> 00:06:55,360
other programs they require us to

00:06:53,520 --> 00:06:57,360
specify plugins explicitly

00:06:55,360 --> 00:06:58,720
in django we can add middleware by

00:06:57,360 --> 00:07:03,039
explicitly listing them

00:06:58,720 --> 00:07:04,800
in the middlewares list in settings.py

00:07:03,039 --> 00:07:06,960
so when we first start the program it

00:07:04,800 --> 00:07:07,680
has no idea what plugins it's going to

00:07:06,960 --> 00:07:09,599
load

00:07:07,680 --> 00:07:11,120
once we've registered plugins those

00:07:09,599 --> 00:07:12,160
programs are good those plugins are

00:07:11,120 --> 00:07:16,000
going to be loaded

00:07:12,160 --> 00:07:17,520
at runtime dynamically

00:07:16,000 --> 00:07:19,680
once the program is registered and

00:07:17,520 --> 00:07:21,280
loaded it needs to be able to respond

00:07:19,680 --> 00:07:22,240
when it's called upon by the host

00:07:21,280 --> 00:07:23,919
application

00:07:22,240 --> 00:07:25,919
and if the plugin was registered for

00:07:23,919 --> 00:07:27,039
specific actions we're only going to

00:07:25,919 --> 00:07:30,400
call that plugin

00:07:27,039 --> 00:07:31,759
if those specific actions were triggered

00:07:30,400 --> 00:07:34,319
now that we know what goes into a

00:07:31,759 --> 00:07:36,240
plug-in system let's make one of our own

00:07:34,319 --> 00:07:37,919
this is the checklist we just talked

00:07:36,240 --> 00:07:39,039
about we're gonna come back to this at

00:07:37,919 --> 00:07:40,319
the end of this section

00:07:39,039 --> 00:07:42,840
but i just want you to keep it in the

00:07:40,319 --> 00:07:44,080
back of your mind as we go through this

00:07:42,840 --> 00:07:45,599
exercise

00:07:44,080 --> 00:07:47,599
so let's talk about this example project

00:07:45,599 --> 00:07:49,520
we're going to build one of the best

00:07:47,599 --> 00:07:51,280
parts of python in my opinion is the

00:07:49,520 --> 00:07:53,840
python package index or pi

00:07:51,280 --> 00:07:54,479
pi chances are if you need to do

00:07:53,840 --> 00:07:57,039
something

00:07:54,479 --> 00:07:59,120
there's a library or a tool that gets

00:07:57,039 --> 00:08:01,199
you most of the way there

00:07:59,120 --> 00:08:02,879
but what if you find multiple package

00:08:01,199 --> 00:08:04,960
packages that seemingly do

00:08:02,879 --> 00:08:06,080
the same thing how do you know which one

00:08:04,960 --> 00:08:07,520
to use

00:08:06,080 --> 00:08:09,280
some of the things i look for when i'm

00:08:07,520 --> 00:08:11,599
making this decision include

00:08:09,280 --> 00:08:13,520
looking at the number of open issues the

00:08:11,599 --> 00:08:16,080
number of open pull requests

00:08:13,520 --> 00:08:16,720
the number of stars a project has when

00:08:16,080 --> 00:08:19,360
the last

00:08:16,720 --> 00:08:20,639
activity was all of these things they

00:08:19,360 --> 00:08:23,360
helped me understand

00:08:20,639 --> 00:08:25,120
how actively maintained this project is

00:08:23,360 --> 00:08:26,639
we can gather this information by going

00:08:25,120 --> 00:08:29,840
to github going to

00:08:26,639 --> 00:08:31,599
git lab or we can use an api so we're

00:08:29,840 --> 00:08:33,279
going to build a command line tool that

00:08:31,599 --> 00:08:34,880
takes in a url

00:08:33,279 --> 00:08:37,360
and it's going to print out some repo

00:08:34,880 --> 00:08:38,240
statistics the majority of projects

00:08:37,360 --> 00:08:40,240
we're going to use

00:08:38,240 --> 00:08:41,919
are on github that's sort of just what

00:08:40,240 --> 00:08:45,040
i've been finding but there are some

00:08:41,919 --> 00:08:47,920
like flake 8 which are on gitlab

00:08:45,040 --> 00:08:49,519
we might have to support some additional

00:08:47,920 --> 00:08:50,880
providers later on but since we're

00:08:49,519 --> 00:08:53,200
building with a plugin system we don't

00:08:50,880 --> 00:08:54,959
have to worry about it at this time

00:08:53,200 --> 00:08:56,240
we're also going to need a way to

00:08:54,959 --> 00:09:00,000
identify

00:08:56,240 --> 00:09:01,920
what provider belongs to a certain url

00:09:00,000 --> 00:09:03,120
and we're going to need a way to go out

00:09:01,920 --> 00:09:06,160
to the api

00:09:03,120 --> 00:09:07,760
and get some statistics

00:09:06,160 --> 00:09:10,720
and as i mentioned most importantly

00:09:07,760 --> 00:09:12,240
we're building with a plug-in system

00:09:10,720 --> 00:09:13,680
so we're going to start by defining our

00:09:12,240 --> 00:09:14,560
data objects that are inside of our

00:09:13,680 --> 00:09:17,279
program

00:09:14,560 --> 00:09:18,880
so we have a repo details type and this

00:09:17,279 --> 00:09:22,399
is a name tuple that's going to take an

00:09:18,880 --> 00:09:23,760
organization and a repo name

00:09:22,399 --> 00:09:26,320
we're also going to have a repo

00:09:23,760 --> 00:09:28,320
statistics table oh sorry a name tuple

00:09:26,320 --> 00:09:30,399
and this defines all the information we

00:09:28,320 --> 00:09:31,600
want to retrieve

00:09:30,399 --> 00:09:33,600
next let's walk through how we're going

00:09:31,600 --> 00:09:35,120
to go out and use the github api to get

00:09:33,600 --> 00:09:37,200
this information

00:09:35,120 --> 00:09:38,720
we're gonna go out make sure that the

00:09:37,200 --> 00:09:42,000
url is actually for

00:09:38,720 --> 00:09:44,000
github next we want to use the request

00:09:42,000 --> 00:09:46,160
library to hit the api

00:09:44,000 --> 00:09:48,240
we're gonna get the response back and

00:09:46,160 --> 00:09:50,240
then parse our json payload

00:09:48,240 --> 00:09:52,720
and then we'll return that information

00:09:50,240 --> 00:09:54,560
that we uh generated

00:09:52,720 --> 00:09:56,240
when we produce output this is what it

00:09:54,560 --> 00:09:57,360
looks like after we format it a little

00:09:56,240 --> 00:09:58,880
bit

00:09:57,360 --> 00:10:00,880
now that we have all those steps to

00:09:58,880 --> 00:10:01,600
solve our problem let's generalize it a

00:10:00,880 --> 00:10:02,959
bit more

00:10:01,600 --> 00:10:04,880
so i'm going to create a class i'm going

00:10:02,959 --> 00:10:07,279
to call it base plugin i'm going to

00:10:04,880 --> 00:10:08,959
initialize it with a repo

00:10:07,279 --> 00:10:10,640
we're going to have a check method that

00:10:08,959 --> 00:10:11,279
takes in a domain and returns true or

00:10:10,640 --> 00:10:12,800
false

00:10:11,279 --> 00:10:14,720
and this function is going to help us

00:10:12,800 --> 00:10:18,240
identify what providers

00:10:14,720 --> 00:10:19,920
belong to what domains

00:10:18,240 --> 00:10:22,240
and finally we're gonna have a method

00:10:19,920 --> 00:10:23,760
that abstracts going out to the api

00:10:22,240 --> 00:10:25,519
getting some information back and then

00:10:23,760 --> 00:10:27,680
doing some parsing and sending it back

00:10:25,519 --> 00:10:29,200
to uh the caller

00:10:27,680 --> 00:10:31,120
let's walk through how we would take

00:10:29,200 --> 00:10:32,959
that github script we wrote

00:10:31,120 --> 00:10:34,560
and make a plugin out of it so we're

00:10:32,959 --> 00:10:35,440
going to start by creating a github

00:10:34,560 --> 00:10:38,240
plugin class

00:10:35,440 --> 00:10:39,279
with base plugin as its parents we're

00:10:38,240 --> 00:10:41,200
going to override

00:10:39,279 --> 00:10:42,399
our check functionality and here we're

00:10:41,200 --> 00:10:45,600
going to return true

00:10:42,399 --> 00:10:47,360
if the domain is github.com

00:10:45,600 --> 00:10:49,360
and we'll also override our repo

00:10:47,360 --> 00:10:49,920
statistics and like before we're just

00:10:49,360 --> 00:10:52,640
gonna

00:10:49,920 --> 00:10:56,399
go out to the api get get a response

00:10:52,640 --> 00:10:57,839
parse it and send some information back

00:10:56,399 --> 00:11:00,079
next let's examine how we're gonna write

00:10:57,839 --> 00:11:01,839
a plug-in for gitlab

00:11:00,079 --> 00:11:03,839
we're going to create a gitlab plugin

00:11:01,839 --> 00:11:06,480
with base plugin as its parent

00:11:03,839 --> 00:11:07,839
this is just like before also just like

00:11:06,480 --> 00:11:09,920
before we're going to override

00:11:07,839 --> 00:11:12,240
our check method to return true if the

00:11:09,920 --> 00:11:13,760
domain is gitlab.com

00:11:12,240 --> 00:11:16,399
and just like before we're going to go

00:11:13,760 --> 00:11:18,240
out to the api get some information back

00:11:16,399 --> 00:11:20,079
this time we're going to be parsing the

00:11:18,240 --> 00:11:22,240
get lab response structure so it's a

00:11:20,079 --> 00:11:23,839
little bit different

00:11:22,240 --> 00:11:26,079
so now let's look at how our host

00:11:23,839 --> 00:11:28,720
application can be used to run

00:11:26,079 --> 00:11:30,480
our plugins we're going to start by

00:11:28,720 --> 00:11:31,680
adding these two plugins that we just

00:11:30,480 --> 00:11:33,760
created to a list

00:11:31,680 --> 00:11:35,440
called plugins next we're going to

00:11:33,760 --> 00:11:37,680
create a class

00:11:35,440 --> 00:11:39,120
we're going to initialize it with a url

00:11:37,680 --> 00:11:40,800
which we're going to parse to get things

00:11:39,120 --> 00:11:43,120
like the domain out

00:11:40,800 --> 00:11:44,800
or we're gonna have a private function

00:11:43,120 --> 00:11:47,279
that's gonna grab the domain

00:11:44,800 --> 00:11:48,079
as well as all this other information

00:11:47,279 --> 00:11:50,320
we're gonna

00:11:48,079 --> 00:11:51,839
look through each of the plugins we just

00:11:50,320 --> 00:11:54,880
uh initialized

00:11:51,839 --> 00:11:57,279
if that plugin matches the or if that uh

00:11:54,880 --> 00:11:58,000
plugins domain matches the domain that's

00:11:57,279 --> 00:11:59,680
passed in

00:11:58,000 --> 00:12:01,040
we're going to assign it to a variable

00:11:59,680 --> 00:12:02,880
if that plugin doesn't exist we're just

00:12:01,040 --> 00:12:05,040
going to raise an exception

00:12:02,880 --> 00:12:06,480
and then our host application is going

00:12:05,040 --> 00:12:08,560
to go out

00:12:06,480 --> 00:12:09,600
and use that plugin we saved in that

00:12:08,560 --> 00:12:12,000
instance variable

00:12:09,600 --> 00:12:14,079
and use that to get some statistics for

00:12:12,000 --> 00:12:16,320
that particular repo

00:12:14,079 --> 00:12:18,079
now when we go out and run this code it

00:12:16,320 --> 00:12:21,120
has that same output before

00:12:18,079 --> 00:12:23,519
after a little bit of formatting

00:12:21,120 --> 00:12:24,720
so we've designed an uh an application

00:12:23,519 --> 00:12:27,040
that has a plug-in system

00:12:24,720 --> 00:12:28,880
and this is fantastic if we ever wanted

00:12:27,040 --> 00:12:30,720
to add support for another provider

00:12:28,880 --> 00:12:31,920
say bitbucket we can do this pretty

00:12:30,720 --> 00:12:33,680
easily

00:12:31,920 --> 00:12:35,519
here's how we'd go about implementing a

00:12:33,680 --> 00:12:36,160
bitbucket plugin there's a code right

00:12:35,519 --> 00:12:38,000
there

00:12:36,160 --> 00:12:39,839
and then in our host application i'm

00:12:38,000 --> 00:12:43,040
just going to update that plugins list

00:12:39,839 --> 00:12:44,320
by adding that one particular uh plugin

00:12:43,040 --> 00:12:47,519
type

00:12:44,320 --> 00:12:50,560
so going back to that checklist

00:12:47,519 --> 00:12:52,639
does our system have a host application

00:12:50,560 --> 00:12:53,920
looking at the diagram yeah i think it

00:12:52,639 --> 00:12:56,800
does

00:12:53,920 --> 00:12:57,839
so that's a check next item is is there

00:12:56,800 --> 00:13:00,880
a communication channel

00:12:57,839 --> 00:13:03,839
between our host and our plugin

00:13:00,880 --> 00:13:05,600
the plugins and host communicate by by

00:13:03,839 --> 00:13:06,240
sending messages by calling public

00:13:05,600 --> 00:13:08,079
functions

00:13:06,240 --> 00:13:09,600
and returning a value we're using

00:13:08,079 --> 00:13:12,800
object-oriented python

00:13:09,600 --> 00:13:15,040
so yeah that's also a checkmark does our

00:13:12,800 --> 00:13:17,040
plugin register with the app

00:13:15,040 --> 00:13:19,040
from our host application we register

00:13:17,040 --> 00:13:20,560
plugins at that top so yeah that's also

00:13:19,040 --> 00:13:22,320
a check

00:13:20,560 --> 00:13:24,720
is our pro is there a plugin loaded

00:13:22,320 --> 00:13:27,200
dynamically at runtime

00:13:24,720 --> 00:13:27,920
until our code reads that first line it

00:13:27,200 --> 00:13:30,000
has no

00:13:27,920 --> 00:13:31,680
idea what plugins are gonna be loaded so

00:13:30,000 --> 00:13:32,959
yeah i think we can also knock this one

00:13:31,680 --> 00:13:35,200
off the list

00:13:32,959 --> 00:13:36,800
and for our last bullet does this

00:13:35,200 --> 00:13:39,120
plug-in respond when it's called by the

00:13:36,800 --> 00:13:40,880
host application

00:13:39,120 --> 00:13:42,240
the plugin functions does return a value

00:13:40,880 --> 00:13:43,279
when they're called so yeah i think this

00:13:42,240 --> 00:13:45,040
is a check as well

00:13:43,279 --> 00:13:49,839
so it looks like everything's good to go

00:13:45,040 --> 00:13:49,839
and we can give it a stamp of approval

00:13:53,199 --> 00:13:56,560
so now that we've implemented our own

00:13:54,720 --> 00:13:58,240
naive plugin system

00:13:56,560 --> 00:14:01,279
let's explore how plugins are

00:13:58,240 --> 00:14:03,120
implemented into python libraries

00:14:01,279 --> 00:14:06,560
it's going to help us understand how

00:14:03,120 --> 00:14:08,480
libraries in the ecosystem do things

00:14:06,560 --> 00:14:10,959
django that's a popular python what

00:14:08,480 --> 00:14:13,360
framework django is very opinionated

00:14:10,959 --> 00:14:14,959
opinionated and the developers they

00:14:13,360 --> 00:14:17,040
specified many places

00:14:14,959 --> 00:14:18,959
in the django code base we can go out

00:14:17,040 --> 00:14:21,920
and customize functionality

00:14:18,959 --> 00:14:22,560
a quick scan of the documentation sort

00:14:21,920 --> 00:14:24,480
of revealed

00:14:22,560 --> 00:14:26,399
all these ways that we can go out and

00:14:24,480 --> 00:14:27,680
customize jenga

00:14:26,399 --> 00:14:29,760
and this doesn't even include

00:14:27,680 --> 00:14:30,320
third-party applications that we can pip

00:14:29,760 --> 00:14:32,079
install

00:14:30,320 --> 00:14:34,639
and add to our installed apps list in

00:14:32,079 --> 00:14:36,560
settings.py

00:14:34,639 --> 00:14:38,560
so we're going to take a quick look at

00:14:36,560 --> 00:14:39,440
how we can go out and extend django

00:14:38,560 --> 00:14:42,560
functionality

00:14:39,440 --> 00:14:43,360
by writing custom middleware and in

00:14:42,560 --> 00:14:45,920
django

00:14:43,360 --> 00:14:46,800
middleware is something we can do or

00:14:45,920 --> 00:14:49,600
something we can write

00:14:46,800 --> 00:14:50,320
that allows us to hook into django's

00:14:49,600 --> 00:14:52,800
request

00:14:50,320 --> 00:14:54,560
response processing framework and so

00:14:52,800 --> 00:14:56,320
let's say this is our middleware list in

00:14:54,560 --> 00:14:58,959
our settings.py

00:14:56,320 --> 00:15:00,079
before the request gets down to the view

00:14:58,959 --> 00:15:01,760
from the client

00:15:00,079 --> 00:15:03,440
it gets passed through all of those

00:15:01,760 --> 00:15:04,800
layers of middleware

00:15:03,440 --> 00:15:07,040
and then we do what we need to in the

00:15:04,800 --> 00:15:08,399
view and then on the way out it goes

00:15:07,040 --> 00:15:10,160
back through those layers of middleware

00:15:08,399 --> 00:15:11,839
again

00:15:10,160 --> 00:15:14,000
so what does this middleware look like

00:15:11,839 --> 00:15:15,199
in code i pull this sample from the

00:15:14,000 --> 00:15:16,399
django docs

00:15:15,199 --> 00:15:18,399
so we're going to start by creating a

00:15:16,399 --> 00:15:18,800
class notice this doesn't have a base

00:15:18,399 --> 00:15:21,279
class

00:15:18,800 --> 00:15:22,959
we're going to be using duct typing here

00:15:21,279 --> 00:15:24,399
the middleware it's initialized with an

00:15:22,959 --> 00:15:26,959
argument

00:15:24,399 --> 00:15:28,480
uh it's called get responses we can just

00:15:26,959 --> 00:15:30,320
save that to an instance variable just

00:15:28,480 --> 00:15:32,480
boilerplate code we're doing

00:15:30,320 --> 00:15:34,240
uh in our dunder call method we're gonna

00:15:32,480 --> 00:15:36,720
pass in a request

00:15:34,240 --> 00:15:38,000
and in this section we can write code to

00:15:36,720 --> 00:15:40,240
modify a request

00:15:38,000 --> 00:15:41,199
before it moves down the chain into

00:15:40,240 --> 00:15:43,440
further middleware

00:15:41,199 --> 00:15:45,440
or into the view and then we're just

00:15:43,440 --> 00:15:47,920
going to call this function to specify

00:15:45,440 --> 00:15:48,560
that this particular middleware is done

00:15:47,920 --> 00:15:50,639
with

00:15:48,560 --> 00:15:51,839
the current request and in this

00:15:50,639 --> 00:15:53,600
following section

00:15:51,839 --> 00:15:56,000
we can do things with the response on

00:15:53,600 --> 00:15:57,759
the way back out to the client

00:15:56,000 --> 00:15:59,440
and then finally we'll just uh return

00:15:57,759 --> 00:15:59,920
that response to signify that we are

00:15:59,440 --> 00:16:02,880
done

00:15:59,920 --> 00:16:06,480
and it can move higher up that list in

00:16:02,880 --> 00:16:09,440
layers or back out to the client

00:16:06,480 --> 00:16:11,120
so now that we know what to do let's

00:16:09,440 --> 00:16:13,199
write up our own middleware that's going

00:16:11,120 --> 00:16:16,480
to add a unique request id

00:16:13,199 --> 00:16:18,160
to every single request

00:16:16,480 --> 00:16:20,320
so we're going to create a class call it

00:16:18,160 --> 00:16:22,399
request uuid middleware

00:16:20,320 --> 00:16:23,759
add a docstring we're going to

00:16:22,399 --> 00:16:26,399
initialize this class sort of

00:16:23,759 --> 00:16:28,959
boilerplate code just like before

00:16:26,399 --> 00:16:29,680
in our dunder call method we're going to

00:16:28,959 --> 00:16:31,759
just take

00:16:29,680 --> 00:16:33,199
a we're going to like see if the request

00:16:31,759 --> 00:16:35,199
already has a header set

00:16:33,199 --> 00:16:37,279
if it does we're going to use that as a

00:16:35,199 --> 00:16:38,959
request id if not we'll just generate

00:16:37,279 --> 00:16:41,759
one from scratch

00:16:38,959 --> 00:16:43,360
and then we'll signify that uh we want

00:16:41,759 --> 00:16:45,199
to add something to a request

00:16:43,360 --> 00:16:47,839
and that our middleware is done and it

00:16:45,199 --> 00:16:48,959
can go further down the chain

00:16:47,839 --> 00:16:50,399
and since we're not going to be doing

00:16:48,959 --> 00:16:50,880
anything with the response on the way

00:16:50,399 --> 00:16:53,920
out

00:16:50,880 --> 00:16:55,199
we can just return and now we have to

00:16:53,920 --> 00:16:57,440
update our settings

00:16:55,199 --> 00:16:59,440
and we're good to go we can just add

00:16:57,440 --> 00:17:05,839
some tests to confirm things work

00:16:59,440 --> 00:17:05,839
it's pretty straightforward

00:17:07,120 --> 00:17:10,240
we can't really talk about django

00:17:08,640 --> 00:17:11,839
without talking about how flask also

00:17:10,240 --> 00:17:14,400
does things

00:17:11,839 --> 00:17:15,280
flask is a python web framework it

00:17:14,400 --> 00:17:18,079
builds itself

00:17:15,280 --> 00:17:20,000
as a micro framework i don't know how

00:17:18,079 --> 00:17:21,679
micro i would consider flask

00:17:20,000 --> 00:17:23,280
but it's definitely a lot more

00:17:21,679 --> 00:17:25,280
lightweight than other options i've seen

00:17:23,280 --> 00:17:28,160
out there

00:17:25,280 --> 00:17:30,320
and since flask is less opinionated

00:17:28,160 --> 00:17:32,480
there aren't as many hooks available

00:17:30,320 --> 00:17:34,799
as what we had in django and this is not

00:17:32,480 --> 00:17:37,360
to say that flask is not customizable

00:17:34,799 --> 00:17:39,360
the design philosophy behind flask is

00:17:37,360 --> 00:17:40,400
that we want to figure out what third

00:17:39,360 --> 00:17:42,080
party libraries

00:17:40,400 --> 00:17:45,440
that we need to use and we'll have to

00:17:42,080 --> 00:17:47,679
wire them into our application ourselves

00:17:45,440 --> 00:17:49,120
i would say flask would be more plug and

00:17:47,679 --> 00:17:51,600
play than django

00:17:49,120 --> 00:17:52,799
but there are definitely like it doesn't

00:17:51,600 --> 00:17:53,840
make choices for you but there are

00:17:52,799 --> 00:17:56,000
definitely

00:17:53,840 --> 00:17:57,600
best practices and recommended libraries

00:17:56,000 --> 00:18:00,720
like classical alchemy sort of like a

00:17:57,600 --> 00:18:02,400
gold standard for orm

00:18:00,720 --> 00:18:04,320
let's take a look at how we can extend

00:18:02,400 --> 00:18:05,600
our our flask functionality

00:18:04,320 --> 00:18:07,520
we're going to write that same

00:18:05,600 --> 00:18:10,880
middleware to add a

00:18:07,520 --> 00:18:13,520
unique id to each incoming request

00:18:10,880 --> 00:18:14,160
so in order to modify request and

00:18:13,520 --> 00:18:15,919
responses

00:18:14,160 --> 00:18:17,520
inside of flask we're gonna have to play

00:18:15,919 --> 00:18:19,039
around with the

00:18:17,520 --> 00:18:21,120
whiskey middleware and i believe this is

00:18:19,039 --> 00:18:24,160
the web service gateway interface

00:18:21,120 --> 00:18:24,880
it's just the level uh below flask that

00:18:24,160 --> 00:18:28,080
processes

00:18:24,880 --> 00:18:30,240
all that information oh so we're just

00:18:28,080 --> 00:18:32,559
going to like before create a class

00:18:30,240 --> 00:18:33,679
uh it's also going to be using typing

00:18:32,559 --> 00:18:36,320
we're not going to have a parent

00:18:33,679 --> 00:18:38,160
a base class this class is going to be

00:18:36,320 --> 00:18:40,880
initialized with an app parameter

00:18:38,160 --> 00:18:42,480
this is just boilerplate uh we're going

00:18:40,880 --> 00:18:44,880
to have a dunder call method

00:18:42,480 --> 00:18:46,240
that's going to take in some parameters

00:18:44,880 --> 00:18:48,720
and we're going to

00:18:46,240 --> 00:18:49,360
create a request using our environment

00:18:48,720 --> 00:18:52,160
using

00:18:49,360 --> 00:18:52,880
flask's request helper or the library

00:18:52,160 --> 00:18:56,000
below flask

00:18:52,880 --> 00:18:57,919
works away i believe it's called

00:18:56,000 --> 00:18:59,840
if the request has a header set we'll

00:18:57,919 --> 00:19:00,559
use that value else we'll generate one

00:18:59,840 --> 00:19:02,240
from our own

00:19:00,559 --> 00:19:03,520
sort of similar to before and then we're

00:19:02,240 --> 00:19:04,880
just going to update our environment

00:19:03,520 --> 00:19:06,640
with the request id

00:19:04,880 --> 00:19:08,400
and then return the app with some

00:19:06,640 --> 00:19:10,400
parameters to like pass it on to the

00:19:08,400 --> 00:19:12,559
next layer

00:19:10,400 --> 00:19:13,840
if we want to enable this middleware

00:19:12,559 --> 00:19:16,720
we're going to have to update

00:19:13,840 --> 00:19:18,400
our whiskey app attribute of the flask

00:19:16,720 --> 00:19:20,799
application interest

00:19:18,400 --> 00:19:22,400
instant sorry and now we can add some

00:19:20,799 --> 00:19:25,520
tests and things are going to work

00:19:22,400 --> 00:19:27,679
just like they did before

00:19:25,520 --> 00:19:29,760
before we do close out i want to provide

00:19:27,679 --> 00:19:33,440
some advice on how you can go about

00:19:29,760 --> 00:19:33,440
writing your next plugin

00:19:37,280 --> 00:19:40,400
and i thought it'd be useful to talk

00:19:38,720 --> 00:19:42,160
about my thought process

00:19:40,400 --> 00:19:44,480
for when i'm gonna go about writing a

00:19:42,160 --> 00:19:47,360
plugin for a host application i've not

00:19:44,480 --> 00:19:49,919
really dealt with too much before

00:19:47,360 --> 00:19:51,360
the first question is does this app have

00:19:49,919 --> 00:19:53,039
a plugin system

00:19:51,360 --> 00:19:55,520
we can't really extend something that

00:19:53,039 --> 00:19:57,280
doesn't have a plug-in system

00:19:55,520 --> 00:19:59,120
to find out if our application supports

00:19:57,280 --> 00:20:01,120
plug-in the best way to do it is to go

00:19:59,120 --> 00:20:02,559
check out the documentation i would

00:20:01,120 --> 00:20:07,440
search for keywords like

00:20:02,559 --> 00:20:08,640
extend customize add-on

00:20:07,440 --> 00:20:10,960
the docs are probably going to have a

00:20:08,640 --> 00:20:12,640
section that defines where you can go

00:20:10,960 --> 00:20:14,480
out and find an example plug-in

00:20:12,640 --> 00:20:16,960
but if you're looking for more example

00:20:14,480 --> 00:20:20,159
plugins i recommend going out to maybe

00:20:16,960 --> 00:20:21,520
pi pi google search and an underrated

00:20:20,159 --> 00:20:23,679
search is github search

00:20:21,520 --> 00:20:25,200
i feel like you find a lot of code that

00:20:23,679 --> 00:20:27,039
you can pretty much ready

00:20:25,200 --> 00:20:29,679
like readily use by changing like a line

00:20:27,039 --> 00:20:29,679
here or there

00:20:30,720 --> 00:20:34,000
when i'm writing code i like to have a

00:20:32,720 --> 00:20:35,440
minimal project setup

00:20:34,000 --> 00:20:37,360
i call this a sandbox development

00:20:35,440 --> 00:20:38,559
environment and this is gonna have my

00:20:37,360 --> 00:20:40,960
host application

00:20:38,559 --> 00:20:42,400
with a single plugin and this is gonna

00:20:40,960 --> 00:20:44,960
enable me to

00:20:42,400 --> 00:20:45,520
quickly iterate on my solution it's also

00:20:44,960 --> 00:20:47,679
gonna make

00:20:45,520 --> 00:20:49,679
debugging easier since i have a very

00:20:47,679 --> 00:20:51,440
minimal interface

00:20:49,679 --> 00:20:53,360
and once i'm ready to go out and build

00:20:51,440 --> 00:20:54,320
my plugin the code i've already built

00:20:53,360 --> 00:20:56,559
out in the sandbox

00:20:54,320 --> 00:21:00,240
i can use it to copy over to my logic or

00:20:56,559 --> 00:21:00,240
maybe use that to create some tests

00:21:00,720 --> 00:21:03,440
also when you're playing with your

00:21:01,760 --> 00:21:04,080
sandbox development environment i

00:21:03,440 --> 00:21:06,400
recommend

00:21:04,080 --> 00:21:07,520
adding breakpoints to code that you do

00:21:06,400 --> 00:21:09,760
not own

00:21:07,520 --> 00:21:11,520
in order to find out what messages your

00:21:09,760 --> 00:21:14,000
plugin needs to respond to

00:21:11,520 --> 00:21:15,200
it's really helpful to get down in the

00:21:14,000 --> 00:21:19,120
application instance

00:21:15,200 --> 00:21:19,120
and mess around with things like pdb

00:21:19,440 --> 00:21:22,720
sometimes you won't be able to get into

00:21:21,679 --> 00:21:24,159
the host application

00:21:22,720 --> 00:21:26,080
so you're going to have to depend on

00:21:24,159 --> 00:21:27,039
logging and this can be done really

00:21:26,080 --> 00:21:29,039
depends on

00:21:27,039 --> 00:21:31,039
how this application has been written

00:21:29,039 --> 00:21:33,360
you can take advantage of things like

00:21:31,039 --> 00:21:34,320
python's built-in logging or the host

00:21:33,360 --> 00:21:36,960
application

00:21:34,320 --> 00:21:38,320
might have a framework that you can use

00:21:36,960 --> 00:21:40,640
to log messages

00:21:38,320 --> 00:21:42,720
if you're deploying this out as say like

00:21:40,640 --> 00:21:44,480
a plugin on a computer

00:21:42,720 --> 00:21:46,080
it's good to collect logs that users can

00:21:44,480 --> 00:21:49,520
send back to you so you can help

00:21:46,080 --> 00:21:51,520
diagnose if they have issues

00:21:49,520 --> 00:21:53,120
and now once we have our plugin already

00:21:51,520 --> 00:21:54,799
complete it starts

00:21:53,120 --> 00:21:56,720
it's time to start thinking about how

00:21:54,799 --> 00:21:59,919
this plugin fits into the

00:21:56,720 --> 00:22:01,520
application ecosystem so if you want to

00:21:59,919 --> 00:22:02,080
release your plugin for other people to

00:22:01,520 --> 00:22:04,559
use

00:22:02,080 --> 00:22:05,440
i recommend looking at other plugins as

00:22:04,559 --> 00:22:08,000
a template

00:22:05,440 --> 00:22:09,919
to get a feel of how things should look

00:22:08,000 --> 00:22:12,480
and it also helps you

00:22:09,919 --> 00:22:13,360
get a sense of if you need to initialize

00:22:12,480 --> 00:22:17,919
your plugins

00:22:13,360 --> 00:22:19,600
with a set of like a set of variables or

00:22:17,919 --> 00:22:21,440
if you need to uh

00:22:19,600 --> 00:22:23,360
create exceptions or overwrite

00:22:21,440 --> 00:22:25,760
exceptions that users already know about

00:22:23,360 --> 00:22:27,200
in that application

00:22:25,760 --> 00:22:29,919
there's a lot of material we can talk

00:22:27,200 --> 00:22:31,440
about when we're talking about testing

00:22:29,919 --> 00:22:34,000
but the main idea i really want to get

00:22:31,440 --> 00:22:35,919
across is integration tests are the

00:22:34,000 --> 00:22:37,360
tests that really we really care about

00:22:35,919 --> 00:22:39,360
we want to check that our host

00:22:37,360 --> 00:22:40,720
application and our plug-in they work

00:22:39,360 --> 00:22:41,520
well together and the best way to do

00:22:40,720 --> 00:22:44,960
that

00:22:41,520 --> 00:22:46,880
is to check the integration boundary

00:22:44,960 --> 00:22:48,799
and if we have a plug-in that supports

00:22:46,880 --> 00:22:51,120
more than one version of software

00:22:48,799 --> 00:22:52,720
we're gonna have to run our plug-in

00:22:51,120 --> 00:22:53,280
against each of the versions we care

00:22:52,720 --> 00:22:55,520
about

00:22:53,280 --> 00:22:56,480
if our plugin is connecting multiple

00:22:55,520 --> 00:22:58,960
different software

00:22:56,480 --> 00:23:00,080
we're going to have to run against each

00:22:58,960 --> 00:23:02,159
of those software

00:23:00,080 --> 00:23:03,120
each of those component pairs and if

00:23:02,159 --> 00:23:04,240
we're doing something that's

00:23:03,120 --> 00:23:06,960
cross-platform

00:23:04,240 --> 00:23:09,360
i recommend having tests run on mac on

00:23:06,960 --> 00:23:12,320
linux and on windows

00:23:09,360 --> 00:23:13,200
to recap plugins or software components

00:23:12,320 --> 00:23:16,480
that extend

00:23:13,200 --> 00:23:17,520
or enhance an existing program while

00:23:16,480 --> 00:23:19,360
plugin systems

00:23:17,520 --> 00:23:20,840
can be designed in many different ways

00:23:19,360 --> 00:23:22,400
they share a lot of common

00:23:20,840 --> 00:23:24,240
characteristics

00:23:22,400 --> 00:23:25,679
taking the things we learned by writing

00:23:24,240 --> 00:23:28,080
our own plugin system

00:23:25,679 --> 00:23:30,799
and the things we learn by extending a

00:23:28,080 --> 00:23:33,039
plugin system for a well-known library

00:23:30,799 --> 00:23:34,640
we can see that it's not too difficult

00:23:33,039 --> 00:23:35,760
to extend the functionality of your

00:23:34,640 --> 00:23:38,960
favorite library

00:23:35,760 --> 00:23:40,240
without modifying existing code so the

00:23:38,960 --> 00:23:43,919
next time you find yourself

00:23:40,240 --> 00:23:48,080
working on something complex stop

00:23:43,919 --> 00:23:48,080
take a step back and breathe

00:23:48,720 --> 00:23:52,640
break the problem you see in front of

00:23:50,080 --> 00:23:55,279
you into smaller logical chunks

00:23:52,640 --> 00:23:57,360
you got this it's not really that hard

00:23:55,279 --> 00:23:59,919
uh these are all the resources i found

00:23:57,360 --> 00:24:00,880
coming up with this talk thank you so

00:23:59,919 --> 00:24:02,480
much for your time

00:24:00,880 --> 00:24:04,640
before i go i do want to give a shout

00:24:02,480 --> 00:24:06,480
out to the chicago python users group

00:24:04,640 --> 00:24:08,080
i would not be where i am without that

00:24:06,480 --> 00:24:09,360
fantastic organization

00:24:08,080 --> 00:24:11,120
and i'm also going to be speaking at a

00:24:09,360 --> 00:24:12,960
few conferences in the coming weeks

00:24:11,120 --> 00:24:15,039
so i hope to see you all there thanks so

00:24:12,960 --> 00:24:17,360
much for your time again my name is ali

00:24:15,039 --> 00:24:19,919
sebje and hope to see you at euro python

00:24:17,360 --> 00:24:22,159
in person next year

00:24:19,919 --> 00:24:24,159
thank you so much it's amazing it's a

00:24:22,159 --> 00:24:24,640
very good talk and i love your energy

00:24:24,159 --> 00:24:27,760
that's

00:24:24,640 --> 00:24:30,559
very very good and we have actually yeah

00:24:27,760 --> 00:24:30,960
thank you we have one question from joe

00:24:30,559 --> 00:24:34,240
that

00:24:30,960 --> 00:24:35,360
uh have you tried using any plug-in

00:24:34,240 --> 00:24:38,400
library like

00:24:35,360 --> 00:24:39,600
yep see like that's y-a-p-s-y i i don't

00:24:38,400 --> 00:24:42,640
know about that so

00:24:39,600 --> 00:24:43,760
or would you prefer to write your own

00:24:42,640 --> 00:24:45,760
yeah so that's a great question so the

00:24:43,760 --> 00:24:47,200
question about if i used a particular

00:24:45,760 --> 00:24:48,640
library so there are libraries in the

00:24:47,200 --> 00:24:51,360
python ecosystem

00:24:48,640 --> 00:24:53,120
that um abstract a lot of the common

00:24:51,360 --> 00:24:54,400
boilerplate like if you're building out

00:24:53,120 --> 00:24:57,520
some things like you need to like

00:24:54,400 --> 00:24:59,120
set up like an entry points uh like uh

00:24:57,520 --> 00:25:00,960
like thing in your setup.py

00:24:59,120 --> 00:25:02,559
so you can use tools like i'm not too

00:25:00,960 --> 00:25:03,200
familiar with this yet another plugin

00:25:02,559 --> 00:25:05,279
generator

00:25:03,200 --> 00:25:07,039
but i have played around with stevedore

00:25:05,279 --> 00:25:09,760
and the links i provided earlier

00:25:07,039 --> 00:25:11,039
uh they they were about stevedore i

00:25:09,760 --> 00:25:12,000
thought it was cool and if i was

00:25:11,039 --> 00:25:13,679
building something

00:25:12,000 --> 00:25:15,440
i might leverage something along those

00:25:13,679 --> 00:25:16,240
lines but at the same time i like

00:25:15,440 --> 00:25:19,679
controlling

00:25:16,240 --> 00:25:21,120
a lot of what i'm doing and the things i

00:25:19,679 --> 00:25:22,720
am really concerned about are not that

00:25:21,120 --> 00:25:26,799
complex so i don't mind

00:25:22,720 --> 00:25:30,000
writing an interface to do that for me

00:25:26,799 --> 00:25:33,200
right so um yeah i think

00:25:30,000 --> 00:25:34,799
uh that's it and uh if anybody

00:25:33,200 --> 00:25:36,880
want to you know continue this

00:25:34,799 --> 00:25:38,320
discussion or have more questions to ask

00:25:36,880 --> 00:25:40,240
afterwards then

00:25:38,320 --> 00:25:42,799
uh i think ali will be answering the

00:25:40,240 --> 00:25:45,440
questions in the channels uh

00:25:42,799 --> 00:25:47,440
specific for this talk and i'll also

00:25:45,440 --> 00:25:49,360
post a message in the knee track that

00:25:47,440 --> 00:25:51,440
people can find the channel

00:25:49,360 --> 00:25:53,440
so thank you so much that's really great

00:25:51,440 --> 00:25:55,520
to have you this year at eurofiburn and

00:25:53,440 --> 00:26:03,840
hope to see you next year as well

00:25:55,520 --> 00:26:03,840

YouTube URL: https://www.youtube.com/watch?v=mR9LgU_Pakc


