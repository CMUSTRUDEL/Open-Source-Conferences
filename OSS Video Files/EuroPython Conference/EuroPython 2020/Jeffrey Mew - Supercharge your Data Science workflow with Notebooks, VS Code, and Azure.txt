Title: Jeffrey Mew - Supercharge your Data Science workflow with Notebooks, VS Code, and Azure
Publication date: 2020-09-15
Playlist: EuroPython 2020
Description: 
	"Supercharge your Data Science workflow with Notebooks, VS Code, and Azure
EuroPython 2020 - Talk - 2020-07-23 - Microsoft
Online

By Jeffrey Mew




License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2020.europython.eu/events/speaker-release-agreement/

    "
Captions: 
	00:00:06,240 --> 00:00:09,679
we're gonna

00:00:07,040 --> 00:00:10,480
um be kicking things off here um in just

00:00:09,679 --> 00:00:14,160
a minute with

00:00:10,480 --> 00:00:16,000
um a talk by jeffrey mu of microsoft

00:00:14,160 --> 00:00:17,600
uh and uh speaking of microsoft if you

00:00:16,000 --> 00:00:18,960
all haven't noticed in the track name

00:00:17,600 --> 00:00:20,880
you should probably mention that uh

00:00:18,960 --> 00:00:23,359
microsoft is one of our uh general

00:00:20,880 --> 00:00:24,480
sponsors that makes uh euro python 2020

00:00:23,359 --> 00:00:26,080
online possible

00:00:24,480 --> 00:00:27,920
they've got some really great tools for

00:00:26,080 --> 00:00:30,080
for python development i can say

00:00:27,920 --> 00:00:32,399
firsthand they're awesome because i do

00:00:30,080 --> 00:00:36,079
all my python development in vs code

00:00:32,399 --> 00:00:38,800
it's a fantastic tool so um

00:00:36,079 --> 00:00:40,239
yeah we got people coming in here and um

00:00:38,800 --> 00:00:44,239
so it's gonna be great so

00:00:40,239 --> 00:00:47,039
um jeffrey mew is a program manager

00:00:44,239 --> 00:00:49,360
at microsoft uh working on the python

00:00:47,039 --> 00:00:50,800
data science and ai experience in vs

00:00:49,360 --> 00:00:52,960
code which means he's responsible for

00:00:50,800 --> 00:00:55,280
building some of the stuff i like

00:00:52,960 --> 00:00:57,039
specifically he focuses on making the

00:00:55,280 --> 00:00:58,399
lives of data scientists easier across

00:00:57,039 --> 00:00:59,760
our ecosystem

00:00:58,399 --> 00:01:01,520
he holds his bachelor's degree in

00:00:59,760 --> 00:01:02,480
computer engineering from the university

00:01:01,520 --> 00:01:05,760
of waterloo

00:01:02,480 --> 00:01:07,280
he's a lover of dogs and python uh the

00:01:05,760 --> 00:01:07,680
language that is he's still a little bit

00:01:07,280 --> 00:01:11,439
uh

00:01:07,680 --> 00:01:16,240
unsure about the the snake uh

00:01:11,439 --> 00:01:16,240
so uh jeffrey thanks for joining us

00:01:16,560 --> 00:01:20,320
thank you for having me so where are you

00:01:18,960 --> 00:01:23,119
streaming from

00:01:20,320 --> 00:01:23,600
so i'm streaming from um seattle in the

00:01:23,119 --> 00:01:26,080
us

00:01:23,600 --> 00:01:26,720
so it's actually in the morning for me

00:01:26,080 --> 00:01:28,720
yeah

00:01:26,720 --> 00:01:31,200
uh same here i'm over in spokane so

00:01:28,720 --> 00:01:34,400
we're only about 300 miles apart

00:01:31,200 --> 00:01:34,720
okay really close awesome yeah is it is

00:01:34,400 --> 00:01:37,200
it

00:01:34,720 --> 00:01:38,159
warm there too yeah it's pretty pretty

00:01:37,200 --> 00:01:39,520
good weather

00:01:38,159 --> 00:01:40,880
um that's what i love about the west

00:01:39,520 --> 00:01:42,880
coast weather just really nice all the

00:01:40,880 --> 00:01:44,560
time

00:01:42,880 --> 00:01:46,399
yeah normally i don't hear people say

00:01:44,560 --> 00:01:48,399
that about about seattle but we

00:01:46,399 --> 00:01:50,560
we kind of like the rain you know yeah

00:01:48,399 --> 00:01:52,320
sometimes

00:01:50,560 --> 00:01:54,479
all right well i will turn this over to

00:01:52,320 --> 00:01:56,880
you then and uh

00:01:54,479 --> 00:01:58,880
rock and roll sure thank you so much for

00:01:56,880 --> 00:02:00,399
having me uh let me just quickly share

00:01:58,880 --> 00:02:02,560
my screen

00:02:00,399 --> 00:02:03,759
uh we're gonna be talking about how to

00:02:02,560 --> 00:02:05,600
supercharge your own data science

00:02:03,759 --> 00:02:07,200
workflow with notebooks vs code and

00:02:05,600 --> 00:02:10,720
azure

00:02:07,200 --> 00:02:12,080
and um like jason mentioned uh my name

00:02:10,720 --> 00:02:14,000
is jeffrey i'm a program manager here at

00:02:12,080 --> 00:02:15,680
microsoft and i work on all the data

00:02:14,000 --> 00:02:16,400
science and ai tools within visual

00:02:15,680 --> 00:02:17,760
studio code

00:02:16,400 --> 00:02:21,200
and there's some my contact info if you

00:02:17,760 --> 00:02:22,959
wanted to want to get get in touch

00:02:21,200 --> 00:02:24,480
so um obviously i just want to start

00:02:22,959 --> 00:02:25,840
with a quick demo of what we're actually

00:02:24,480 --> 00:02:26,959
building today and along the lines like

00:02:25,840 --> 00:02:28,480
i mentioned we're gonna be showcasing

00:02:26,959 --> 00:02:31,520
all the cool data science tools that we

00:02:28,480 --> 00:02:31,520
have in vs code

00:02:31,760 --> 00:02:35,200
so uh we're actually i've actually

00:02:33,920 --> 00:02:37,120
created this website and it's already

00:02:35,200 --> 00:02:38,640
hosted in azure web apps

00:02:37,120 --> 00:02:40,400
and this is what our final product is

00:02:38,640 --> 00:02:40,800
going to be it's just the website that

00:02:40,400 --> 00:02:43,200
um

00:02:40,800 --> 00:02:45,040
it takes in the image url um it passes

00:02:43,200 --> 00:02:47,040
this image to my model that i've already

00:02:45,040 --> 00:02:49,120
predefined it's also hosted in azure and

00:02:47,040 --> 00:02:50,879
it will generate the pep redetector or

00:02:49,120 --> 00:02:53,599
give me a prediction of what it is

00:02:50,879 --> 00:02:55,120
so i can just go to search for images of

00:02:53,599 --> 00:02:57,360
my favorite pet breed which is

00:02:55,120 --> 00:02:59,040
shiva's because they're so cute let's

00:02:57,360 --> 00:03:02,080
just pick this image

00:02:59,040 --> 00:03:02,480
i can right click copy image address go

00:03:02,080 --> 00:03:04,640
back

00:03:02,480 --> 00:03:06,080
to my website paste it in it gives me a

00:03:04,640 --> 00:03:06,800
preview of what it is and if i click

00:03:06,080 --> 00:03:08,560
submit

00:03:06,800 --> 00:03:10,319
it actually passes this image to my

00:03:08,560 --> 00:03:11,680
model and it gives me a prediction so

00:03:10,319 --> 00:03:12,959
you can see here it accurately predicted

00:03:11,680 --> 00:03:14,480
sheba's

00:03:12,959 --> 00:03:17,280
so this is what we're essentially going

00:03:14,480 --> 00:03:17,280
to be building today

00:03:17,599 --> 00:03:20,879
so how do we actually classify how are

00:03:18,879 --> 00:03:21,360
we going to classify uh dogs and cats

00:03:20,879 --> 00:03:23,120
and

00:03:21,360 --> 00:03:24,799
more importantly pet breeds well it's

00:03:23,120 --> 00:03:26,319
really easy for us as humans to detect

00:03:24,799 --> 00:03:28,480
the difference between

00:03:26,319 --> 00:03:30,080
like certain especially between dogs and

00:03:28,480 --> 00:03:32,159
cats but with pet breeds

00:03:30,080 --> 00:03:34,159
you can see between these two it's also

00:03:32,159 --> 00:03:35,360
um it might be a lot harder for even

00:03:34,159 --> 00:03:36,959
humans so to do this we're actually

00:03:35,360 --> 00:03:38,640
going to be training

00:03:36,959 --> 00:03:40,400
a computer vision model to do the same

00:03:38,640 --> 00:03:41,519
thing so as humans we've been trained to

00:03:40,400 --> 00:03:43,280
essentially tell the difference between

00:03:41,519 --> 00:03:44,239
these pet breeds and dogs

00:03:43,280 --> 00:03:46,640
but we're going to be doing the same

00:03:44,239 --> 00:03:49,680
thing with our

00:03:46,640 --> 00:03:50,799
computer vision model so to do this

00:03:49,680 --> 00:03:52,239
we're going to be going through our

00:03:50,799 --> 00:03:53,200
traditional machine learning workflow so

00:03:52,239 --> 00:03:55,439
this is something that

00:03:53,200 --> 00:03:56,400
almost all data scientists go through so

00:03:55,439 --> 00:03:58,080
we're going to start with our data

00:03:56,400 --> 00:03:59,599
exploration phase so this is includes

00:03:58,080 --> 00:04:01,360
things such as getting our data set

00:03:59,599 --> 00:04:03,120
up doing the data cleaning we're going

00:04:01,360 --> 00:04:04,480
to move on to our training step which is

00:04:03,120 --> 00:04:06,000
where we're going to actually

00:04:04,480 --> 00:04:07,040
create our training script we're going

00:04:06,000 --> 00:04:08,080
to be doing this entrepreneur notebooks

00:04:07,040 --> 00:04:10,239
and vs code

00:04:08,080 --> 00:04:11,360
um defining some compute so obviously

00:04:10,239 --> 00:04:12,959
you probably don't want to run this on

00:04:11,360 --> 00:04:14,560
your local machine or it'll take forever

00:04:12,959 --> 00:04:16,079
we're going to be running this on a more

00:04:14,560 --> 00:04:17,359
powerful gpu system

00:04:16,079 --> 00:04:19,359
and then finally we're going to actually

00:04:17,359 --> 00:04:21,600
productionize our code and deploy it to

00:04:19,359 --> 00:04:23,440
azure in the cloud like you just saw

00:04:21,600 --> 00:04:25,520
i had that website hosted and this is

00:04:23,440 --> 00:04:26,880
our final step

00:04:25,520 --> 00:04:28,800
so the first step like i mentioned is

00:04:26,880 --> 00:04:30,080
data exploration

00:04:28,800 --> 00:04:32,160
so to do this we're going to be using

00:04:30,080 --> 00:04:33,759
something called the oxford pet data set

00:04:32,160 --> 00:04:36,080
so it's a data set from the university

00:04:33,759 --> 00:04:38,479
of oxford it has around 37 different

00:04:36,080 --> 00:04:39,600
categories of pet breeds and around 200

00:04:38,479 --> 00:04:40,800
images of

00:04:39,600 --> 00:04:43,840
per class so this is something we're

00:04:40,800 --> 00:04:45,680
going to be using in bs code

00:04:43,840 --> 00:04:46,880
so we're going to go back into our demo

00:04:45,680 --> 00:04:48,000
we're going to go into our favorite

00:04:46,880 --> 00:04:51,919
editor and id

00:04:48,000 --> 00:04:54,320
visual studio code so to actually get um

00:04:51,919 --> 00:04:56,400
you can see here this the notebook i've

00:04:54,320 --> 00:04:57,040
already created but to get the data

00:04:56,400 --> 00:04:59,520
science features

00:04:57,040 --> 00:05:01,120
within vs code um you'll obviously first

00:04:59,520 --> 00:05:02,960
need to install visual studio code which

00:05:01,120 --> 00:05:04,800
is completely free and cross-platform so

00:05:02,960 --> 00:05:06,080
work on mac windows and linux

00:05:04,800 --> 00:05:07,680
and the more important thing is you need

00:05:06,080 --> 00:05:09,520
to install the python extension because

00:05:07,680 --> 00:05:10,000
that is where all of our data science

00:05:09,520 --> 00:05:12,479
goodies

00:05:10,000 --> 00:05:14,160
are held so to do this you just quickly

00:05:12,479 --> 00:05:16,240
click on the extensions tab and then

00:05:14,160 --> 00:05:17,520
search for the keyword python

00:05:16,240 --> 00:05:19,199
and it should be the first one that pops

00:05:17,520 --> 00:05:20,240
up and authored by microsoft and then

00:05:19,199 --> 00:05:21,360
you can quickly install it

00:05:20,240 --> 00:05:23,360
i've already installed it for the sake

00:05:21,360 --> 00:05:24,960
of this demo but once you actually have

00:05:23,360 --> 00:05:25,520
it installed you'll see this um start

00:05:24,960 --> 00:05:27,680
page

00:05:25,520 --> 00:05:28,960
up here and pop up and here you can just

00:05:27,680 --> 00:05:30,240
do things like if you want to create

00:05:28,960 --> 00:05:31,919
your own notebook you can do it but i

00:05:30,240 --> 00:05:33,600
already have an existing notebook which

00:05:31,919 --> 00:05:35,680
i can click on this to create and uh

00:05:33,600 --> 00:05:38,240
sorry to open up an existing notebook

00:05:35,680 --> 00:05:39,440
and open up in what we call our notebook

00:05:38,240 --> 00:05:41,280
editor

00:05:39,440 --> 00:05:43,440
so this is a brand new feature that we

00:05:41,280 --> 00:05:45,440
released near the end of last year

00:05:43,440 --> 00:05:47,360
and you can see it's it's your

00:05:45,440 --> 00:05:48,880
traditional jupyter notebook ui type

00:05:47,360 --> 00:05:50,400
view so you have your cells

00:05:48,880 --> 00:05:52,000
you have your input outputs if you have

00:05:50,400 --> 00:05:54,160
any output cells then it'll show

00:05:52,000 --> 00:05:55,919
below you can have markdown and

00:05:54,160 --> 00:05:57,360
everything and what's really great about

00:05:55,919 --> 00:05:59,280
the notebook editor vs code

00:05:57,360 --> 00:06:00,560
is that it combines the flexibility of

00:05:59,280 --> 00:06:03,360
jupiter notebooks as

00:06:00,560 --> 00:06:05,199
a as a data science or just python

00:06:03,360 --> 00:06:06,560
editing tool in general so you can

00:06:05,199 --> 00:06:09,280
because you can run cells on order and

00:06:06,560 --> 00:06:11,520
everything but with the power and um

00:06:09,280 --> 00:06:12,720
of vs code as editor id so one example

00:06:11,520 --> 00:06:14,720
of this is you have

00:06:12,720 --> 00:06:15,840
full and intellisense and autocomplete

00:06:14,720 --> 00:06:17,520
support within vs

00:06:15,840 --> 00:06:20,080
within your cells in vs code so if i

00:06:17,520 --> 00:06:23,919
want to do for example import

00:06:20,080 --> 00:06:27,039
pandas as gd and then i can type pd

00:06:23,919 --> 00:06:28,319
dot and then it will actually you can

00:06:27,039 --> 00:06:29,840
see a lot of these auto completions are

00:06:28,319 --> 00:06:31,120
popping up as i'm writing it so if i

00:06:29,840 --> 00:06:34,000
want to also do os

00:06:31,120 --> 00:06:34,479
dot it gives me the top suggestions of

00:06:34,000 --> 00:06:36,880
what

00:06:34,479 --> 00:06:39,360
um what it thinks i want to do with um

00:06:36,880 --> 00:06:40,639
this package os so if i want to

00:06:39,360 --> 00:06:42,960
make a path with something i can type

00:06:40,639 --> 00:06:44,080
that as well and then it gives me these

00:06:42,960 --> 00:06:44,400
suggestions which is really great

00:06:44,080 --> 00:06:45,759
because

00:06:44,400 --> 00:06:48,160
traditional jupiter notebooks often

00:06:45,759 --> 00:06:50,000
doesn't support this

00:06:48,160 --> 00:06:50,880
great so now we can um the first step

00:06:50,000 --> 00:06:52,639
like i mentioned with the data

00:06:50,880 --> 00:06:53,520
exploration is actually importing our

00:06:52,639 --> 00:06:56,639
data set

00:06:53,520 --> 00:06:57,919
into our local machine so to do this um

00:06:56,639 --> 00:06:58,400
i have this cell so the first cell was

00:06:57,919 --> 00:07:00,800
just

00:06:58,400 --> 00:07:02,479
some generic imports i needed to do but

00:07:00,800 --> 00:07:04,319
the next part is actually importing the

00:07:02,479 --> 00:07:06,000
data set onto my machine

00:07:04,319 --> 00:07:08,319
so i have my dataset url which is

00:07:06,000 --> 00:07:09,680
pointing to that same oxford data set

00:07:08,319 --> 00:07:11,360
and i've written a bunch of helper

00:07:09,680 --> 00:07:12,720
functions as you'll see um throughout

00:07:11,360 --> 00:07:14,160
this presentation

00:07:12,720 --> 00:07:15,759
in my notebook just to clean up the code

00:07:14,160 --> 00:07:17,120
a little bit so you have to worry too

00:07:15,759 --> 00:07:18,160
much about the code but if you're ever

00:07:17,120 --> 00:07:20,080
interested in learning

00:07:18,160 --> 00:07:21,759
uh more specifically of how all the code

00:07:20,080 --> 00:07:23,440
works and how these helper functions or

00:07:21,759 --> 00:07:24,960
what these helper functions actually do

00:07:23,440 --> 00:07:27,120
i'll be including a link at the end of

00:07:24,960 --> 00:07:28,560
my demo or at the end of this talk to

00:07:27,120 --> 00:07:30,720
the github repo so you can actually look

00:07:28,560 --> 00:07:32,319
at the code yourself in your own time

00:07:30,720 --> 00:07:34,240
but in this code that's all it's going

00:07:32,319 --> 00:07:34,880
to do is it's going to download this

00:07:34,240 --> 00:07:36,960
data set

00:07:34,880 --> 00:07:38,160
um and it's going to save it into my

00:07:36,960 --> 00:07:40,000
local workspace

00:07:38,160 --> 00:07:42,960
so you can see here if i go to my files

00:07:40,000 --> 00:07:44,560
tab if you can see i have this images

00:07:42,960 --> 00:07:45,759
subfolders so i've already run the cell

00:07:44,560 --> 00:07:46,879
just for the sake of time i've already

00:07:45,759 --> 00:07:48,560
pre-downloaded it

00:07:46,879 --> 00:07:50,160
and it's separated into its training and

00:07:48,560 --> 00:07:52,879
validation step and you can see all the

00:07:50,160 --> 00:07:54,560
different pet breeds are here

00:07:52,879 --> 00:07:56,080
so once we actually have our data set

00:07:54,560 --> 00:07:58,000
downloaded onto our machine

00:07:56,080 --> 00:07:59,360
one thing we want to do as a traditional

00:07:58,000 --> 00:08:00,800
data scientist you want to actually make

00:07:59,360 --> 00:08:03,360
sure that that data is correct

00:08:00,800 --> 00:08:04,400
so just do a sanity check and to do this

00:08:03,360 --> 00:08:07,360
i've written this really

00:08:04,400 --> 00:08:08,879
simple function um using matplotlib and

00:08:07,360 --> 00:08:10,560
what the function does is it will just

00:08:08,879 --> 00:08:12,000
plot random samples of each of the

00:08:10,560 --> 00:08:13,599
categories of images

00:08:12,000 --> 00:08:15,280
so you can see here i can just do a

00:08:13,599 --> 00:08:16,879
quick sanity check to make sure that

00:08:15,280 --> 00:08:18,960
these images look right there's no like

00:08:16,879 --> 00:08:21,120
really weird images there's no images of

00:08:18,960 --> 00:08:22,720
i don't know maybe like a snake or pig

00:08:21,120 --> 00:08:25,199
so we can make sure that these images

00:08:22,720 --> 00:08:27,520
are correct but another really great way

00:08:25,199 --> 00:08:29,360
is uh we have a we also fully support

00:08:27,520 --> 00:08:32,240
custom ipi widgets so you can see

00:08:29,360 --> 00:08:33,519
this plot um using matplotlib which is a

00:08:32,240 --> 00:08:35,200
really great library

00:08:33,519 --> 00:08:37,039
um you can see it's really static

00:08:35,200 --> 00:08:39,839
there's no real interaction

00:08:37,039 --> 00:08:41,599
with it you just look at it but with ipi

00:08:39,839 --> 00:08:44,240
widgets if we run this cell

00:08:41,599 --> 00:08:45,120
um ipad widgets are essentially a more

00:08:44,240 --> 00:08:46,959
interactive

00:08:45,120 --> 00:08:48,320
plotting or interactive experience so

00:08:46,959 --> 00:08:49,440
you can see here if i want to look at my

00:08:48,320 --> 00:08:50,880
plots or my

00:08:49,440 --> 00:08:53,040
training images more interactively i can

00:08:50,880 --> 00:08:55,279
actually scroll between

00:08:53,040 --> 00:08:56,399
and look through the different um look

00:08:55,279 --> 00:08:57,440
through my different cut braids so it's

00:08:56,399 --> 00:08:59,360
kind of like a uh

00:08:57,440 --> 00:09:00,880
a more customized interactive ui and we

00:08:59,360 --> 00:09:02,560
fully support this within vs code as

00:09:00,880 --> 00:09:03,839
well

00:09:02,560 --> 00:09:05,519
great so now that we've actually

00:09:03,839 --> 00:09:06,880
imported our data set and then quickly

00:09:05,519 --> 00:09:08,640
look through our data set to make sure

00:09:06,880 --> 00:09:11,200
that all the data is correct

00:09:08,640 --> 00:09:12,880
um now we can start transforming our

00:09:11,200 --> 00:09:14,560
data into tensors

00:09:12,880 --> 00:09:16,560
so um like i mentioned we're going to be

00:09:14,560 --> 00:09:17,920
doing this type detector and to train it

00:09:16,560 --> 00:09:20,240
we're going to be using something

00:09:17,920 --> 00:09:21,839
we're going to be using a python

00:09:20,240 --> 00:09:22,959
framework called pi torch which is a

00:09:21,839 --> 00:09:25,120
really popular

00:09:22,959 --> 00:09:26,800
deep learning framework but pi torch

00:09:25,120 --> 00:09:28,560
doesn't actually understand

00:09:26,800 --> 00:09:29,680
these image files it needs to actually

00:09:28,560 --> 00:09:31,200
be converted into something called

00:09:29,680 --> 00:09:31,760
tensors which you can just think about

00:09:31,200 --> 00:09:34,160
as

00:09:31,760 --> 00:09:36,800
a matrices of numbers and we need to

00:09:34,160 --> 00:09:38,480
convert them to tensors before we can

00:09:36,800 --> 00:09:40,480
actually pass into the training uh pass

00:09:38,480 --> 00:09:42,720
it to the model sorry

00:09:40,480 --> 00:09:45,440
so to do this um usually you just want

00:09:42,720 --> 00:09:46,880
to apply some transform so here i'm just

00:09:45,440 --> 00:09:48,240
cropping them because all these images

00:09:46,880 --> 00:09:49,519
can be different sizes so i'm going to

00:09:48,240 --> 00:09:50,800
want to make everything uniform and

00:09:49,519 --> 00:09:52,320
standard before it pass into the model

00:09:50,800 --> 00:09:55,360
i'm going to crop it

00:09:52,320 --> 00:09:57,519
apply some transformations and then um

00:09:55,360 --> 00:09:59,360
convert it to a tensor so i can again i

00:09:57,519 --> 00:10:02,000
can run the cell by just clicking this

00:09:59,360 --> 00:10:03,839
run cell icon or i can actually run the

00:10:02,000 --> 00:10:05,440
cell by uh we fully support jupiter

00:10:03,839 --> 00:10:07,680
hotkeys as well so if i want to

00:10:05,440 --> 00:10:08,959
use my shift enter i can just type shift

00:10:07,680 --> 00:10:10,320
enter and it'll also run the cell as

00:10:08,959 --> 00:10:13,200
well

00:10:10,320 --> 00:10:14,480
um so with these transforms it's often

00:10:13,200 --> 00:10:16,160
really easy to make a really quick

00:10:14,480 --> 00:10:17,519
mistake or it's hard to tell

00:10:16,160 --> 00:10:18,640
it's really easy to make a one-off error

00:10:17,519 --> 00:10:20,320
because these are just numbers and

00:10:18,640 --> 00:10:22,160
you're just applying these transforms

00:10:20,320 --> 00:10:23,760
so a really great way to check to see if

00:10:22,160 --> 00:10:24,640
these transforms are actually performing

00:10:23,760 --> 00:10:26,320
properly

00:10:24,640 --> 00:10:28,160
is with the feature we uh recently added

00:10:26,320 --> 00:10:29,519
called run by line

00:10:28,160 --> 00:10:32,160
so you think you can think of run by

00:10:29,519 --> 00:10:33,360
line as a simplified notebook debugging

00:10:32,160 --> 00:10:35,519
experience

00:10:33,360 --> 00:10:37,040
so what this means is that um i'll just

00:10:35,519 --> 00:10:39,200
show you with the example

00:10:37,040 --> 00:10:40,640
there's this run by line icon here and

00:10:39,200 --> 00:10:42,720
what run by line does is

00:10:40,640 --> 00:10:44,000
it steps through your code line by line

00:10:42,720 --> 00:10:45,680
and gives you a state

00:10:44,000 --> 00:10:47,600
of it shows you a state of all your

00:10:45,680 --> 00:10:49,519
variables at each line of code

00:10:47,600 --> 00:10:50,800
so rather than having to write print

00:10:49,519 --> 00:10:51,600
statements between all these so maybe

00:10:50,800 --> 00:10:54,240
you have to write

00:10:51,600 --> 00:10:55,040
print image.shape um instead of having

00:10:54,240 --> 00:10:56,399
to do that on

00:10:55,040 --> 00:10:58,480
having a bunch of print statements and

00:10:56,399 --> 00:11:01,360
just generally taking more time

00:10:58,480 --> 00:11:02,800
you can actually run um this sorry you

00:11:01,360 --> 00:11:05,519
can run run by line

00:11:02,800 --> 00:11:06,000
and it will actually showcase um you can

00:11:05,519 --> 00:11:07,600
see it's

00:11:06,000 --> 00:11:08,800
stepping stopping at the first line of

00:11:07,600 --> 00:11:10,160
code and it'll step through each of the

00:11:08,800 --> 00:11:11,360
lines of code and tell you the state of

00:11:10,160 --> 00:11:13,120
all your variables

00:11:11,360 --> 00:11:15,360
and actually showcases the state in what

00:11:13,120 --> 00:11:16,480
we call our variable explorer so you if

00:11:15,360 --> 00:11:19,200
you can see i opened up the variable

00:11:16,480 --> 00:11:21,839
explorer at the top of my notebook here

00:11:19,200 --> 00:11:22,880
and i wanted to look at the variable

00:11:21,839 --> 00:11:24,320
image because that's the one i'm most

00:11:22,880 --> 00:11:25,519
interested in so if i look at image you

00:11:24,320 --> 00:11:27,360
can see right now it's

00:11:25,519 --> 00:11:29,279
just a jpeg image file because in the

00:11:27,360 --> 00:11:31,360
previous cell i just

00:11:29,279 --> 00:11:33,040
i just opened up a random sample image

00:11:31,360 --> 00:11:33,839
just to test to see if my transforms are

00:11:33,040 --> 00:11:35,440
working

00:11:33,839 --> 00:11:37,519
so as you can see if you pay attention

00:11:35,440 --> 00:11:39,360
let me just make this bigger because i

00:11:37,519 --> 00:11:42,560
zoomed in

00:11:39,360 --> 00:11:43,279
i zoomed in on vs code just so everyone

00:11:42,560 --> 00:11:44,959
can see better

00:11:43,279 --> 00:11:48,640
but you can see um image right now is

00:11:44,959 --> 00:11:50,720
around 500 by 375 pixels

00:11:48,640 --> 00:11:53,279
so if you remember the first step is i

00:11:50,720 --> 00:11:57,279
crop it to 224 by 224

00:11:53,279 --> 00:11:59,120
um so you can see as this is running um

00:11:57,279 --> 00:12:00,880
yep so you can see now the size is 224

00:11:59,120 --> 00:12:03,279
by 224 so you can see the crop

00:12:00,880 --> 00:12:04,959
actually worked um and i can continue to

00:12:03,279 --> 00:12:06,160
step through my code and if there was an

00:12:04,959 --> 00:12:07,360
error it would just stop and tell me

00:12:06,160 --> 00:12:08,560
there's an error but so far there's no

00:12:07,360 --> 00:12:10,800
errors which is great

00:12:08,560 --> 00:12:11,760
um then i next transform into a tensor

00:12:10,800 --> 00:12:13,600
so you can see

00:12:11,760 --> 00:12:14,800
um the image afterwards it transforms

00:12:13,600 --> 00:12:16,720
you can see now it's a tensor type

00:12:14,800 --> 00:12:18,720
before it was an image type so

00:12:16,720 --> 00:12:20,399
and now now i know that this tensor

00:12:18,720 --> 00:12:21,760
transformation is actually working

00:12:20,399 --> 00:12:24,000
and then finally at the end it just

00:12:21,760 --> 00:12:25,360
finishes and it knows that um

00:12:24,000 --> 00:12:27,120
because i got no errors um and

00:12:25,360 --> 00:12:28,720
everything looks right so far that i can

00:12:27,120 --> 00:12:30,399
now apply this

00:12:28,720 --> 00:12:31,600
transformation to all my images so i

00:12:30,399 --> 00:12:33,519
just wanted to test on one image before

00:12:31,600 --> 00:12:34,720
i did it on everything

00:12:33,519 --> 00:12:36,959
great so let me just close up my

00:12:34,720 --> 00:12:38,480
variable explorer again and the next

00:12:36,959 --> 00:12:40,000
line is where i'm actually

00:12:38,480 --> 00:12:42,000
i've written this function previously to

00:12:40,000 --> 00:12:43,600
just do the same transformation but

00:12:42,000 --> 00:12:44,560
instead of just that one image do it on

00:12:43,600 --> 00:12:48,320
all my images

00:12:44,560 --> 00:12:48,320
in my uh in my data set

00:12:49,680 --> 00:12:53,120
great so now we just did the data

00:12:51,120 --> 00:12:54,800
exploration phase so um

00:12:53,120 --> 00:12:56,560
like you saw we imported our data set we

00:12:54,800 --> 00:12:58,399
did some data cleaning where we

00:12:56,560 --> 00:12:59,920
quickly checked all our data within our

00:12:58,399 --> 00:13:01,120
matplotlib just to see if everything

00:12:59,920 --> 00:13:02,720
looked great and then we converted

00:13:01,120 --> 00:13:04,880
everything into something that

00:13:02,720 --> 00:13:06,160
the computer and more importantly pi

00:13:04,880 --> 00:13:07,279
torch will understand when we do the

00:13:06,160 --> 00:13:10,480
training step so now we're going to

00:13:07,279 --> 00:13:12,639
actually head to the training phase

00:13:10,480 --> 00:13:14,240
so again we're going to go back to vs

00:13:12,639 --> 00:13:16,160
code for this

00:13:14,240 --> 00:13:18,240
so um in the training phase we're

00:13:16,160 --> 00:13:19,519
actually uh all we're doing is

00:13:18,240 --> 00:13:21,519
we're applying something called transfer

00:13:19,519 --> 00:13:23,760
learning and to do this we're just

00:13:21,519 --> 00:13:24,639
taking a pre-trained um neural network

00:13:23,760 --> 00:13:25,760
so we're taking something called

00:13:24,639 --> 00:13:27,120
resonant 18

00:13:25,760 --> 00:13:28,880
but we're actually just setting up the

00:13:27,120 --> 00:13:30,720
model within vs code

00:13:28,880 --> 00:13:32,800
this is all from pytorch as well and

00:13:30,720 --> 00:13:34,160
we're going to actually train the model

00:13:32,800 --> 00:13:35,600
so i've already written this training

00:13:34,160 --> 00:13:36,959
function and again if you want to learn

00:13:35,600 --> 00:13:38,320
more about how this training function

00:13:36,959 --> 00:13:40,320
works um please check out the github

00:13:38,320 --> 00:13:42,480
repo at the end of this presentation

00:13:40,320 --> 00:13:44,240
but um for the sake of this demo um i'm

00:13:42,480 --> 00:13:46,160
just trained it for one epoch and you

00:13:44,240 --> 00:13:48,560
can think of epochs as iterations so the

00:13:46,160 --> 00:13:48,959
more iterations you do um generally the

00:13:48,560 --> 00:13:50,160
better

00:13:48,959 --> 00:13:52,399
accuracy you're gonna get so i only did

00:13:50,160 --> 00:13:54,399
it for one just to show proof of concept

00:13:52,399 --> 00:13:56,240
but you can see um after training it for

00:13:54,399 --> 00:13:59,120
one iteration essentially

00:13:56,240 --> 00:14:00,320
uh it this kind of took 40 minutes

00:13:59,120 --> 00:14:01,600
almost to run which is

00:14:00,320 --> 00:14:03,760
extremely slow because i'm running just

00:14:01,600 --> 00:14:06,639
on my personal laptop and

00:14:03,760 --> 00:14:08,560
i think we can do a lot faster than this

00:14:06,639 --> 00:14:11,440
so to do this uh we're actually

00:14:08,560 --> 00:14:12,000
we can actually leverage um uh something

00:14:11,440 --> 00:14:15,199
called

00:14:12,000 --> 00:14:18,880
azure vms so azure vms are actually

00:14:15,199 --> 00:14:19,279
um we can leverage azure vms because

00:14:18,880 --> 00:14:21,360
they have

00:14:19,279 --> 00:14:23,199
gpu compute and this is where um these

00:14:21,360 --> 00:14:25,279
deep learning models actually thrive

00:14:23,199 --> 00:14:27,120
so to do this i just need to actually

00:14:25,279 --> 00:14:29,839
download this azure

00:14:27,120 --> 00:14:32,880
vms extension so i can search azure

00:14:29,839 --> 00:14:32,880
virtual machines

00:14:33,040 --> 00:14:36,000
and then you can see here um i already

00:14:34,399 --> 00:14:37,600
have it installed but once you actually

00:14:36,000 --> 00:14:39,680
have your azure virtual machine um this

00:14:37,600 --> 00:14:41,680
extension installed you can quickly

00:14:39,680 --> 00:14:43,199
go into your azure tab this azure tab

00:14:41,680 --> 00:14:44,320
will now pop up you can go into virtual

00:14:43,199 --> 00:14:45,360
machines

00:14:44,320 --> 00:14:48,399
and then you can see i've created a

00:14:45,360 --> 00:14:50,240
virtual machine already for euro python

00:14:48,399 --> 00:14:51,600
and then what's also great is vs code

00:14:50,240 --> 00:14:54,240
has really great uh

00:14:51,600 --> 00:14:55,360
remote um remote ssh support so you can

00:14:54,240 --> 00:14:56,880
actually connect remote machines and

00:14:55,360 --> 00:14:59,120
then do everything you're doing

00:14:56,880 --> 00:15:00,240
live on the room the same thing um that

00:14:59,120 --> 00:15:01,040
you're doing your local machine on that

00:15:00,240 --> 00:15:02,399
remote machine

00:15:01,040 --> 00:15:03,600
so what we're actually going to do is

00:15:02,399 --> 00:15:05,680
we're also going to install the remote

00:15:03,600 --> 00:15:08,800
ssh extension

00:15:05,680 --> 00:15:10,560
okay of the stage extension and then

00:15:08,800 --> 00:15:12,000
from here we can actually connect to

00:15:10,560 --> 00:15:13,199
you'll see this button up here and then

00:15:12,000 --> 00:15:13,760
you can actually connect to your remote

00:15:13,199 --> 00:15:15,760
machine

00:15:13,760 --> 00:15:17,360
and i already have the setup but for the

00:15:15,760 --> 00:15:18,320
sake of time just going to quickly skip

00:15:17,360 --> 00:15:20,720
over this but

00:15:18,320 --> 00:15:21,839
um this will this will just pop up a new

00:15:20,720 --> 00:15:23,040
vs code window

00:15:21,839 --> 00:15:24,959
it will look the exact same thing as

00:15:23,040 --> 00:15:26,160
this as you saw already but it's now

00:15:24,959 --> 00:15:27,199
going to be running on your remote

00:15:26,160 --> 00:15:29,120
machine

00:15:27,199 --> 00:15:31,199
and then on that remote machine we've

00:15:29,120 --> 00:15:33,600
gone i ran the same training uh

00:15:31,199 --> 00:15:34,480
the same exact same code the exact same

00:15:33,600 --> 00:15:36,560
file

00:15:34,480 --> 00:15:38,560
but i've ran it and it's actually got

00:15:36,560 --> 00:15:40,160
the same accuracy

00:15:38,560 --> 00:15:42,720
might be some errors with my connection

00:15:40,160 --> 00:15:45,040
but um i got the same accuracy

00:15:42,720 --> 00:15:47,360
but with uh i ran for 10 iterations

00:15:45,040 --> 00:15:48,800
sorry uh this is only one so it took

00:15:47,360 --> 00:15:50,399
my local machine it took 40 minutes to

00:15:48,800 --> 00:15:52,160
run one iteration but on that remote

00:15:50,399 --> 00:15:54,959
azure machine it actually took

00:15:52,160 --> 00:15:55,839
um around 15 minutes run 10 iterations

00:15:54,959 --> 00:15:58,639
which is

00:15:55,839 --> 00:15:59,519
insane about how much of a speed up i

00:15:58,639 --> 00:16:01,040
got from

00:15:59,519 --> 00:16:03,279
using the remote machine versus my local

00:16:01,040 --> 00:16:04,880
machine

00:16:03,279 --> 00:16:06,880
so now that we've actually trained our

00:16:04,880 --> 00:16:08,560
model um we actually need to save our

00:16:06,880 --> 00:16:10,880
model which is the final portion

00:16:08,560 --> 00:16:12,320
so um i just have this basic function

00:16:10,880 --> 00:16:14,399
which just saves the model

00:16:12,320 --> 00:16:17,600
and once we have the model saved we can

00:16:14,399 --> 00:16:19,120
start deploying it to the cloud

00:16:17,600 --> 00:16:20,639
so now we're actually on we've completed

00:16:19,120 --> 00:16:21,759
our data exploration we've completed our

00:16:20,639 --> 00:16:23,360
training and now we're ready to

00:16:21,759 --> 00:16:24,880
productionize the model

00:16:23,360 --> 00:16:27,040
so to do this we have this really great

00:16:24,880 --> 00:16:28,800
feature um that we called that we just

00:16:27,040 --> 00:16:29,920
released recently called gather

00:16:28,800 --> 00:16:32,160
and you can see the button for gathered

00:16:29,920 --> 00:16:33,759
right here and gather is essentially a

00:16:32,160 --> 00:16:34,240
dependency analysis and code cleanup

00:16:33,759 --> 00:16:36,160
tool

00:16:34,240 --> 00:16:38,320
and what it does is it will just look

00:16:36,160 --> 00:16:39,600
through all the code in your notebook

00:16:38,320 --> 00:16:41,920
and look through all the cells and all

00:16:39,600 --> 00:16:44,079
the code and only extract the relevant

00:16:41,920 --> 00:16:45,519
code and lines of code only extract the

00:16:44,079 --> 00:16:47,279
relevant cells and lines of code

00:16:45,519 --> 00:16:48,880
that are required to generate the cell

00:16:47,279 --> 00:16:51,199
so if i click on this button

00:16:48,880 --> 00:16:52,639
it will just give me a new file called

00:16:51,199 --> 00:16:53,839
the gather notebook and you can see it

00:16:52,639 --> 00:16:55,839
only contains

00:16:53,839 --> 00:16:57,519
the code that is required to generate my

00:16:55,839 --> 00:16:58,560
model so you can see it only contained

00:16:57,519 --> 00:17:00,320
the data set um

00:16:58,560 --> 00:17:02,320
transforming the data and the training

00:17:00,320 --> 00:17:03,759
and it left out all these plots because

00:17:02,320 --> 00:17:05,039
it realizes these are just intermediate

00:17:03,759 --> 00:17:06,880
steps that were not needed

00:17:05,039 --> 00:17:08,240
i left out um a bunch of my markdown

00:17:06,880 --> 00:17:09,839
cells because that's not needed as well

00:17:08,240 --> 00:17:11,679
and it left out a bunch of imports so

00:17:09,839 --> 00:17:13,439
only you can see it only kept the key

00:17:11,679 --> 00:17:16,720
imports as well

00:17:13,439 --> 00:17:19,199
uh finally i just need to move

00:17:16,720 --> 00:17:20,400
this sorry um so finally once you're

00:17:19,199 --> 00:17:21,600
actually in this gathered notebook to

00:17:20,400 --> 00:17:22,079
productionize your code instead of

00:17:21,600 --> 00:17:23,439
having

00:17:22,079 --> 00:17:24,880
you usually want to convert that python

00:17:23,439 --> 00:17:26,240
script because you can't really do much

00:17:24,880 --> 00:17:28,720
with a notebook to deploy

00:17:26,240 --> 00:17:30,720
um instead of um having to copy and

00:17:28,720 --> 00:17:32,880
paste your code over you can actually

00:17:30,720 --> 00:17:34,320
have a we have a feature called export

00:17:32,880 --> 00:17:35,360
where you can just quickly export as a

00:17:34,320 --> 00:17:37,200
python script

00:17:35,360 --> 00:17:39,440
and boom it's now a python file where

00:17:37,200 --> 00:17:42,320
you can start refactoring your code and

00:17:39,440 --> 00:17:43,440
um change it into something that you can

00:17:42,320 --> 00:17:45,200
basically refactor it and

00:17:43,440 --> 00:17:46,480
get it ready for production to deploy to

00:17:45,200 --> 00:17:47,840
the cloud

00:17:46,480 --> 00:17:50,400
so speaking of the cloud we're going to

00:17:47,840 --> 00:17:53,280
get to the deployment step now

00:17:50,400 --> 00:17:54,400
where um here's the outline which is

00:17:53,280 --> 00:17:56,160
just showing you how we're going to use

00:17:54,400 --> 00:17:57,280
this so previously we used vs code and

00:17:56,160 --> 00:17:59,120
azure virtual machines

00:17:57,280 --> 00:18:00,480
to leverage the compute but now we're

00:17:59,120 --> 00:18:01,919
going to actually make use of these

00:18:00,480 --> 00:18:03,760
three azure functions called

00:18:01,919 --> 00:18:05,840
um azure services sorry called azure

00:18:03,760 --> 00:18:06,799
storage azure functions and azure web

00:18:05,840 --> 00:18:08,160
apps

00:18:06,799 --> 00:18:10,080
so we're going to be using azure storage

00:18:08,160 --> 00:18:11,120
to actually store our model because we

00:18:10,080 --> 00:18:12,240
want it to be

00:18:11,120 --> 00:18:13,679
kind of like a micro service where we

00:18:12,240 --> 00:18:14,400
don't have to update the entire web app

00:18:13,679 --> 00:18:16,160
each time

00:18:14,400 --> 00:18:18,320
we can just upload the model directly to

00:18:16,160 --> 00:18:18,799
here and the our api or whatever we'll

00:18:18,320 --> 00:18:22,080
read

00:18:18,799 --> 00:18:23,360
from this um this microservice the next

00:18:22,080 --> 00:18:24,960
step is we're going to be using azure

00:18:23,360 --> 00:18:27,679
functions

00:18:24,960 --> 00:18:28,559
we're going to next use azure functions

00:18:27,679 --> 00:18:30,000
where

00:18:28,559 --> 00:18:31,440
azure functions you can think about as

00:18:30,000 --> 00:18:32,960
an api service and this is where we're

00:18:31,440 --> 00:18:34,640
actually going to host our api endpoint

00:18:32,960 --> 00:18:36,320
for the model so this is where the

00:18:34,640 --> 00:18:38,160
our um this is where the website's

00:18:36,320 --> 00:18:40,160
actually going to call it and finally

00:18:38,160 --> 00:18:41,520
we're going to be using azure web apps

00:18:40,160 --> 00:18:42,559
which is the front end so that's the

00:18:41,520 --> 00:18:44,320
front end we saw at the beginning the

00:18:42,559 --> 00:18:44,960
presentation of the demo where i hosted

00:18:44,320 --> 00:18:47,840
the

00:18:44,960 --> 00:18:50,080
um the website where i actually did the

00:18:47,840 --> 00:18:51,919
prediction of the pet breed

00:18:50,080 --> 00:18:53,679
and what's really great is because azure

00:18:51,919 --> 00:18:54,880
is so tightly coupled with vs code i can

00:18:53,679 --> 00:18:57,280
do everything

00:18:54,880 --> 00:18:58,960
to deploy from the from within vs code i

00:18:57,280 --> 00:19:00,400
don't need to go anywhere else

00:18:58,960 --> 00:19:02,480
so again to do this i just need to

00:19:00,400 --> 00:19:04,480
install the relevant azure extensions

00:19:02,480 --> 00:19:07,280
and again these are all completely free

00:19:04,480 --> 00:19:08,640
um these extensions so you can just you

00:19:07,280 --> 00:19:10,000
can see i already have

00:19:08,640 --> 00:19:11,679
them installed so i have azure app

00:19:10,000 --> 00:19:13,919
service azure functions

00:19:11,679 --> 00:19:15,440
azure storage and the first step like i

00:19:13,919 --> 00:19:18,880
mentioned is i want to deploy

00:19:15,440 --> 00:19:21,039
my model to the storage so if i just

00:19:18,880 --> 00:19:22,799
open my storages tab i can see

00:19:21,039 --> 00:19:24,640
i have i want to create a container to

00:19:22,799 --> 00:19:25,919
actually store my model

00:19:24,640 --> 00:19:26,960
and i've already created a pet detector

00:19:25,919 --> 00:19:28,960
but if you want to create your own you

00:19:26,960 --> 00:19:30,880
can just right click and click create

00:19:28,960 --> 00:19:33,280
and to deploy it you just right click

00:19:30,880 --> 00:19:35,679
and click upload block bob

00:19:33,280 --> 00:19:37,360
and then from here you can quickly

00:19:35,679 --> 00:19:39,360
scroll to where your model is so

00:19:37,360 --> 00:19:41,360
i have my model folder right here and

00:19:39,360 --> 00:19:43,039
it's a checkpoint.php because that's

00:19:41,360 --> 00:19:44,320
what tensorflow saves it as and i can

00:19:43,039 --> 00:19:45,039
just quickly click it and then click

00:19:44,320 --> 00:19:46,559
upload

00:19:45,039 --> 00:19:48,000
but again for the sake of time you can

00:19:46,559 --> 00:19:49,280
see if i've already previously uploaded

00:19:48,000 --> 00:19:50,240
this once you click upload it will show

00:19:49,280 --> 00:19:51,840
up here

00:19:50,240 --> 00:19:53,600
so now that i have my model in storage

00:19:51,840 --> 00:19:55,280
the next part is actually creating my

00:19:53,600 --> 00:19:56,559
api endpoint

00:19:55,280 --> 00:19:58,960
so to do this i will go into my

00:19:56,559 --> 00:19:59,679
functions tab and um i'll create a new

00:19:58,960 --> 00:20:02,960
function

00:19:59,679 --> 00:20:05,440
and you can see if i go into my folders

00:20:02,960 --> 00:20:06,080
my functions actually contained within

00:20:05,440 --> 00:20:08,000
this

00:20:06,080 --> 00:20:09,360
inference subfolder and you can see

00:20:08,000 --> 00:20:10,799
there's kind of a lot of files here

00:20:09,360 --> 00:20:11,919
might seem a little bit daunting but

00:20:10,799 --> 00:20:14,640
what's great is with this

00:20:11,919 --> 00:20:15,200
azure functions extension you can just

00:20:14,640 --> 00:20:16,640
click this

00:20:15,200 --> 00:20:18,240
one button here which creates a new

00:20:16,640 --> 00:20:18,640
project i can define where i want it to

00:20:18,240 --> 00:20:21,520
be

00:20:18,640 --> 00:20:21,919
in this case i created the inference one

00:20:21,520 --> 00:20:23,919
and

00:20:21,919 --> 00:20:25,039
here is where it automatically generates

00:20:23,919 --> 00:20:26,720
all these files for me so i don't need

00:20:25,039 --> 00:20:28,400
to do anything

00:20:26,720 --> 00:20:29,600
and this predict py is the only thing

00:20:28,400 --> 00:20:31,520
you need to create so when you actually

00:20:29,600 --> 00:20:34,480
create the template it's kind of blank

00:20:31,520 --> 00:20:35,760
but when you uh but once this is what

00:20:34,480 --> 00:20:38,320
you're actually editing to

00:20:35,760 --> 00:20:39,600
make your custom api so you can see here

00:20:38,320 --> 00:20:41,440
um this is where

00:20:39,600 --> 00:20:43,520
i'm actually just uh getting the image

00:20:41,440 --> 00:20:45,200
url it's passing it through the model

00:20:43,520 --> 00:20:46,799
that i'm getting from azure storage

00:20:45,200 --> 00:20:49,039
and then it's returning a response of

00:20:46,799 --> 00:20:50,320
what that prediction actually is

00:20:49,039 --> 00:20:52,320
and again once you have your azure

00:20:50,320 --> 00:20:53,679
function created you can quickly just

00:20:52,320 --> 00:20:55,760
deploy it by right clicking

00:20:53,679 --> 00:20:57,760
my azure function click deploy to

00:20:55,760 --> 00:20:59,760
function app

00:20:57,760 --> 00:21:00,960
and it'll just deploy to that function

00:20:59,760 --> 00:21:02,080
app again i've already deployed it for

00:21:00,960 --> 00:21:03,280
the sake of time

00:21:02,080 --> 00:21:04,559
and again you don't have to worry too

00:21:03,280 --> 00:21:05,520
much about the code i'm going to be

00:21:04,559 --> 00:21:06,880
linking the code at the end of this

00:21:05,520 --> 00:21:09,360
presentation if you want to take a

00:21:06,880 --> 00:21:10,880
closer look on your own time as well

00:21:09,360 --> 00:21:11,919
finally the last part is app service

00:21:10,880 --> 00:21:12,960
where we're going to be hosting our

00:21:11,919 --> 00:21:14,240
front end

00:21:12,960 --> 00:21:16,320
so here is where we're going to be

00:21:14,240 --> 00:21:18,640
hosting that

00:21:16,320 --> 00:21:19,360
front end i just created a basic by

00:21:18,640 --> 00:21:22,240
going to

00:21:19,360 --> 00:21:23,840
i just created a basic html file that

00:21:22,240 --> 00:21:27,120
was what you saw earlier for

00:21:23,840 --> 00:21:28,960
this and this basic html file all it

00:21:27,120 --> 00:21:30,799
does is it just calls my api

00:21:28,960 --> 00:21:32,480
that i've that you just saw previously

00:21:30,799 --> 00:21:33,760
on my azure functions and then just

00:21:32,480 --> 00:21:35,840
returns the result

00:21:33,760 --> 00:21:37,520
and again super simple to deploy to this

00:21:35,840 --> 00:21:39,120
i just go to my azure tab

00:21:37,520 --> 00:21:40,799
i can right click create a new web app

00:21:39,120 --> 00:21:43,039
but i already have one here called

00:21:40,799 --> 00:21:44,799
jmu pi torch web app all i need to do is

00:21:43,039 --> 00:21:45,440
just click right click deploy the web

00:21:44,799 --> 00:21:47,840
app

00:21:45,440 --> 00:21:49,440
and then just point it to that website

00:21:47,840 --> 00:21:50,559
um so i have this website and then you

00:21:49,440 --> 00:21:52,159
can see this folder all it

00:21:50,559 --> 00:21:54,080
contains is that index html just one

00:21:52,159 --> 00:21:56,480
file um click select

00:21:54,080 --> 00:21:58,080
and then it'll deploy to the cloud so

00:21:56,480 --> 00:21:59,679
those were how um

00:21:58,080 --> 00:22:02,960
and as you can see all this was done

00:21:59,679 --> 00:22:04,320
within the context of vs code

00:22:02,960 --> 00:22:06,000
okay so i'm just going to quickly jump

00:22:04,320 --> 00:22:08,080
through a quick summary um

00:22:06,000 --> 00:22:09,679
just because we're running low on time

00:22:08,080 --> 00:22:11,280
yep so we started off with their data

00:22:09,679 --> 00:22:13,440
exploration we did this with the python

00:22:11,280 --> 00:22:15,600
extension within visual studio code

00:22:13,440 --> 00:22:17,200
we next went through our training so we

00:22:15,600 --> 00:22:18,640
here we again we stayed within the

00:22:17,200 --> 00:22:20,400
studio code but we used azure virtual

00:22:18,640 --> 00:22:21,919
machines for the compute so we that's

00:22:20,400 --> 00:22:23,760
where we leveraged our gpu compute to

00:22:21,919 --> 00:22:25,360
speed things up

00:22:23,760 --> 00:22:27,200
and then finally to productionize our

00:22:25,360 --> 00:22:28,559
code we used our different azure

00:22:27,200 --> 00:22:30,880
services so we use

00:22:28,559 --> 00:22:32,400
you can see azure functions as the api

00:22:30,880 --> 00:22:34,080
azure storage to store our model and

00:22:32,400 --> 00:22:36,080
azure web apps to

00:22:34,080 --> 00:22:37,520
actually have hosts our front end and

00:22:36,080 --> 00:22:39,600
the key portion is this is all done

00:22:37,520 --> 00:22:41,120
within vs code so this is why vs code's

00:22:39,600 --> 00:22:42,480
so great it has all your data science

00:22:41,120 --> 00:22:43,520
tooling and needs and you didn't i

00:22:42,480 --> 00:22:44,880
didn't have to leave vs code for

00:22:43,520 --> 00:22:46,799
anything

00:22:44,880 --> 00:22:48,320
so what's next um here's just the link

00:22:46,799 --> 00:22:49,120
for the github repo if you're interested

00:22:48,320 --> 00:22:50,720
as well

00:22:49,120 --> 00:22:52,000
and as well if you want to try your vs

00:22:50,720 --> 00:22:53,919
code notebooks um you can just go to

00:22:52,000 --> 00:22:55,760
aka.net notebook so these are the only

00:22:53,919 --> 00:22:56,720
two links you need to remember

00:22:55,760 --> 00:22:59,120
if you want to remember this

00:22:56,720 --> 00:23:00,320
presentation and

00:22:59,120 --> 00:23:01,440
that was it thank you for putting up

00:23:00,320 --> 00:23:02,720
with the technical difficulties in the

00:23:01,440 --> 00:23:09,840
beginning but thank you so much for your

00:23:02,720 --> 00:23:09,840
time and listening

00:23:10,500 --> 00:23:23,120
[Applause]

00:23:21,760 --> 00:23:26,080
i'll leave this light up if people want

00:23:23,120 --> 00:23:26,080
to take notes as well

00:23:29,760 --> 00:23:34,000
sorry i think you're muted um oh thank

00:23:32,880 --> 00:23:36,320
you i'm sorry about that

00:23:34,000 --> 00:23:37,120
i think so thank you so much for that uh

00:23:36,320 --> 00:23:39,840
yeah um

00:23:37,120 --> 00:23:41,440
so microsoft uh harry has a question he

00:23:39,840 --> 00:23:43,200
said microsoft has announced the

00:23:41,440 --> 00:23:45,200
azure notebooks will be discontinued

00:23:43,200 --> 00:23:46,080
soon is the vs code editor recommended

00:23:45,200 --> 00:23:50,000
to replace

00:23:46,080 --> 00:23:51,919
the jupiter ide so um the azure

00:23:50,000 --> 00:23:53,039
notebook service is being discontinued

00:23:51,919 --> 00:23:54,960
but we're replacing with something

00:23:53,039 --> 00:23:56,320
called the azure notebooks component

00:23:54,960 --> 00:23:57,840
which is going to be

00:23:56,320 --> 00:23:59,440
basically a version 2 or a better

00:23:57,840 --> 00:24:00,880
version of azure notebooks but embedded

00:23:59,440 --> 00:24:02,799
within different components of azure

00:24:00,880 --> 00:24:06,480
services so one example could be

00:24:02,799 --> 00:24:08,880
like the within azure machine learning

00:24:06,480 --> 00:24:09,919
but i would say that uh code spaces uh

00:24:08,880 --> 00:24:11,120
that's something i forgot to bring up

00:24:09,919 --> 00:24:12,720
because i didn't have time but i can

00:24:11,120 --> 00:24:13,919
quickly show it right now

00:24:12,720 --> 00:24:15,279
um i don't know if i'm still sharing a

00:24:13,919 --> 00:24:16,240
screen yeah but there's a thing called

00:24:15,279 --> 00:24:18,559
code spaces

00:24:16,240 --> 00:24:19,919
which is vs code in the browser and this

00:24:18,559 --> 00:24:22,880
is a really great alternative

00:24:19,919 --> 00:24:23,760
to um azure notebooks um which you just

00:24:22,880 --> 00:24:24,960
have the same notebook

00:24:23,760 --> 00:24:26,080
experience that you just saw on vs code

00:24:24,960 --> 00:24:27,360
but now it's within your browser and

00:24:26,080 --> 00:24:30,960
within a virtual machine

00:24:27,360 --> 00:24:31,279
so just call it code spaces awesome well

00:24:30,960 --> 00:24:40,640
thank

00:24:31,279 --> 00:24:40,640

YouTube URL: https://www.youtube.com/watch?v=Tyvg0LOwd5o


