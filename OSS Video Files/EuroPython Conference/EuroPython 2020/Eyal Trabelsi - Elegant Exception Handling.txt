Title: Eyal Trabelsi - Elegant Exception Handling
Publication date: 2020-09-21
Playlist: EuroPython 2020
Description: 
	"Elegant Exception Handling
EuroPython 2020 - Talk - 2020-07-23 - Ni
Online

By Eyal Trabelsi

Error handling is hard. Regardless of the approach you take, it usually means littering your application with checks and validations that greatly reduce code readability. So how can we tackle exceptions?



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2020.europython.eu/events/speaker-release-agreement/

    "
Captions: 
	00:00:06,640 --> 00:00:12,400
all right so

00:00:07,759 --> 00:00:12,400
uh give a big hand for ir

00:00:14,240 --> 00:00:17,440
hello everyone i hope you are all

00:00:16,880 --> 00:00:20,720
enjoying

00:00:17,440 --> 00:00:23,519
this amazing uh conference i assure

00:00:20,720 --> 00:00:25,199
uh i'm enjoying all the amazing talks

00:00:23,519 --> 00:00:28,000
today i'm gonna speak to you about

00:00:25,199 --> 00:00:29,519
elegant exception handling my name is

00:00:28,000 --> 00:00:32,640
ayala belsey

00:00:29,519 --> 00:00:35,840
i i know it's hard to pronounce uh so

00:00:32,640 --> 00:00:39,360
my uh my starbucks

00:00:35,840 --> 00:00:41,840
name is jimmy so about myself

00:00:39,360 --> 00:00:44,559
i'm a software engineer at salesforce i

00:00:41,840 --> 00:00:46,960
have big passion for python and data

00:00:44,559 --> 00:00:50,000
and i love to share my knowledge in

00:00:46,960 --> 00:00:52,559
medium and on twitter

00:00:50,000 --> 00:00:53,520
so today i'm going to speak about how we

00:00:52,559 --> 00:00:57,440
can write

00:00:53,520 --> 00:00:59,440
safe code without compromising over

00:00:57,440 --> 00:01:00,480
maintainability and readability of the

00:00:59,440 --> 00:01:02,800
code

00:01:00,480 --> 00:01:05,840
so i will show an example of a

00:01:02,800 --> 00:01:08,400
restaurant recommendation function

00:01:05,840 --> 00:01:10,080
as you can see we have a get restaurant

00:01:08,400 --> 00:01:12,880
recommendation function

00:01:10,080 --> 00:01:14,640
we are extracting the configuration from

00:01:12,880 --> 00:01:18,640
a path that we are

00:01:14,640 --> 00:01:21,119
getting then we are extracting the user

00:01:18,640 --> 00:01:22,240
we are calculating the relevant

00:01:21,119 --> 00:01:26,479
restaurants

00:01:22,240 --> 00:01:29,680
and then we are picking the best ones

00:01:26,479 --> 00:01:31,280
so we can be proud of ourselves because

00:01:29,680 --> 00:01:32,880
we implemented our restaurant

00:01:31,280 --> 00:01:35,920
recommendation

00:01:32,880 --> 00:01:38,960
algorithm and it's clean code

00:01:35,920 --> 00:01:40,240
and it's highly maintainable so why

00:01:38,960 --> 00:01:43,280
should we even care about

00:01:40,240 --> 00:01:47,040
exceptional the obvious answer

00:01:43,280 --> 00:01:49,360
is that errols are everywhere everywhere

00:01:47,040 --> 00:01:50,479
they can come from hardware and they

00:01:49,360 --> 00:01:53,759
will certainly

00:01:50,479 --> 00:01:54,720
come from your software and it's simply

00:01:53,759 --> 00:01:57,600
unacceptable

00:01:54,720 --> 00:01:58,399
we want our users to still be able to

00:01:57,600 --> 00:02:01,920
use our

00:01:58,399 --> 00:02:02,560
uh program so the first first lesson

00:02:01,920 --> 00:02:05,600
that i'm

00:02:02,560 --> 00:02:07,520
i i think you should take is that we

00:02:05,600 --> 00:02:09,200
should want to build a fault tolerance

00:02:07,520 --> 00:02:12,080
system

00:02:09,200 --> 00:02:12,560
so we have exceptions for that and i'm

00:02:12,080 --> 00:02:15,280
gonna

00:02:12,560 --> 00:02:16,000
briefly cover the exception anatomy

00:02:15,280 --> 00:02:19,040
before

00:02:16,000 --> 00:02:22,640
i'm gonna show you the tricks and tips

00:02:19,040 --> 00:02:25,920
to white clean code so exceptions

00:02:22,640 --> 00:02:29,440
as exception messages tracebacks

00:02:25,920 --> 00:02:31,360
and types as you can see here we have

00:02:29,440 --> 00:02:33,440
uh the type of the exception the name

00:02:31,360 --> 00:02:35,040
error we have the descriptive message

00:02:33,440 --> 00:02:38,160
and we have the traceback

00:02:35,040 --> 00:02:41,120
which allows us to understand from where

00:02:38,160 --> 00:02:41,920
the exception was propagated from from

00:02:41,120 --> 00:02:45,680
which line

00:02:41,920 --> 00:02:48,080
and from which function i will delve a

00:02:45,680 --> 00:02:50,560
bit more on exception types

00:02:48,080 --> 00:02:52,560
so exception types help us distinguish

00:02:50,560 --> 00:02:55,599
between different exceptions

00:02:52,560 --> 00:02:59,120
whether it's find not found exception or

00:02:55,599 --> 00:03:02,400
a syntax level when our code

00:02:59,120 --> 00:03:04,239
is not syntactically correct they are

00:03:02,400 --> 00:03:06,720
irratical in nature

00:03:04,239 --> 00:03:08,480
there are dozens of built-in exceptions

00:03:06,720 --> 00:03:11,760
and if they are not enough for us

00:03:08,480 --> 00:03:14,560
we can create our own custom exceptions

00:03:11,760 --> 00:03:18,480
so this is not the full list of the

00:03:14,560 --> 00:03:20,560
built-in exceptions as you can see

00:03:18,480 --> 00:03:21,680
we have in the top of the pyramid base

00:03:20,560 --> 00:03:24,720
exceptions

00:03:21,680 --> 00:03:28,239
and we have uh many exceptions

00:03:24,720 --> 00:03:28,879
like syntax 0 and so on you don't need

00:03:28,239 --> 00:03:32,159
to remember

00:03:28,879 --> 00:03:35,680
all of these but the common ones

00:03:32,159 --> 00:03:38,959
you probably should so let's take the

00:03:35,680 --> 00:03:40,879
naive approach for exception handling

00:03:38,959 --> 00:03:43,200
we are basically gonna catch all the

00:03:40,879 --> 00:03:45,360
exceptions because we are catching base

00:03:43,200 --> 00:03:48,799
exception which is in the top

00:03:45,360 --> 00:03:51,440
of the map we are then gonna log it away

00:03:48,799 --> 00:03:52,400
and replace the same exact base

00:03:51,440 --> 00:03:56,400
exception

00:03:52,400 --> 00:04:00,000
so now our code is clean and safe

00:03:56,400 --> 00:04:02,319
but obviously there are problems

00:04:00,000 --> 00:04:03,519
located since we catch the base

00:04:02,319 --> 00:04:06,239
exceptions

00:04:03,519 --> 00:04:08,720
we are unintentionally catching many

00:04:06,239 --> 00:04:12,080
exceptions we didn't expect

00:04:08,720 --> 00:04:14,959
for example most programmers want

00:04:12,080 --> 00:04:15,840
their code to be at least syntactically

00:04:14,959 --> 00:04:18,160
correct

00:04:15,840 --> 00:04:18,880
and obviously we are catching it instead

00:04:18,160 --> 00:04:22,400
of uh

00:04:18,880 --> 00:04:25,520
raising syntax level in addition

00:04:22,400 --> 00:04:27,840
uh exceptions are not distinguishable

00:04:25,520 --> 00:04:28,960
because with ace base exception no

00:04:27,840 --> 00:04:32,000
matter what

00:04:28,960 --> 00:04:33,600
so if i'm gonna try to recover from the

00:04:32,000 --> 00:04:36,639
invoker of the function

00:04:33,600 --> 00:04:39,120
it will be hard for me to detect whether

00:04:36,639 --> 00:04:41,680
it was because of a missing file or

00:04:39,120 --> 00:04:44,960
because of a syntax issue

00:04:41,680 --> 00:04:47,280
and unfortunately the naive code is very

00:04:44,960 --> 00:04:50,080
very common

00:04:47,280 --> 00:04:51,199
so we understand that the naive approach

00:04:50,080 --> 00:04:54,560
for exception handling

00:04:51,199 --> 00:04:56,160
won't be enough for us so let's take the

00:04:54,560 --> 00:04:59,520
second

00:04:56,160 --> 00:05:00,320
try so instead of catching the base

00:04:59,520 --> 00:05:02,960
exception

00:05:00,320 --> 00:05:03,759
we are gonna catch a specific exception

00:05:02,960 --> 00:05:06,880
we're gonna catch

00:05:03,759 --> 00:05:09,840
find found exception json decodable

00:05:06,880 --> 00:05:12,400
and cable if i'm gonna catch a final

00:05:09,840 --> 00:05:15,600
found exception and jason's on the codel

00:05:12,400 --> 00:05:17,800
i'm going to raise the same exact arrow

00:05:15,600 --> 00:05:20,320
so here i'm going to raise final found

00:05:17,800 --> 00:05:24,000
exception and elijah's on the coil

00:05:20,320 --> 00:05:26,639
and when i have a qro i'm gonna uh

00:05:24,000 --> 00:05:27,840
use a default user as a recovery

00:05:26,639 --> 00:05:30,960
mechanism

00:05:27,840 --> 00:05:33,440
so just by doing so uh

00:05:30,960 --> 00:05:35,120
the invoker of this function can recover

00:05:33,440 --> 00:05:38,240
from final found exception and json

00:05:35,120 --> 00:05:41,199
decodable in a different manner

00:05:38,240 --> 00:05:43,199
so the second lesson is we should catch

00:05:41,199 --> 00:05:46,000
relevant exceptions only

00:05:43,199 --> 00:05:47,680
and that different propagated exception

00:05:46,000 --> 00:05:50,479
should be distinguishable

00:05:47,680 --> 00:05:54,320
this will make our code much safer than

00:05:50,479 --> 00:05:57,840
the naive approach

00:05:54,320 --> 00:06:00,960
but can we make it a little bit cleaner

00:05:57,840 --> 00:06:03,120
and obviously the answer is yes so

00:06:00,960 --> 00:06:04,400
in this stock i'm not going to cover all

00:06:03,120 --> 00:06:06,720
the type of

00:06:04,400 --> 00:06:07,919
cleaning that can be done i'm not gonna

00:06:06,720 --> 00:06:11,039
cover the paper

00:06:07,919 --> 00:06:14,080
object-oriented programming and so forth

00:06:11,039 --> 00:06:14,400
but uh let's begin uh and i will show

00:06:14,080 --> 00:06:18,639
you

00:06:14,400 --> 00:06:21,680
some useful techniques so in our example

00:06:18,639 --> 00:06:22,720
uh both the final found exception and

00:06:21,680 --> 00:06:25,919
json decoder

00:06:22,720 --> 00:06:28,400
all are handled in the same manner

00:06:25,919 --> 00:06:30,080
which mean they can share the same

00:06:28,400 --> 00:06:34,080
exception block

00:06:30,080 --> 00:06:37,600
in addition instead of ko i can use

00:06:34,080 --> 00:06:37,600
dictionary get method

00:06:38,479 --> 00:06:44,400
and by doing this so i'm avoiding

00:06:41,759 --> 00:06:48,800
another few lines

00:06:44,400 --> 00:06:51,599
lastly i can use the else clause which

00:06:48,800 --> 00:06:52,880
call only if no exception is being

00:06:51,599 --> 00:06:56,080
propagated

00:06:52,880 --> 00:06:57,199
and by that i know that the exceptions

00:06:56,080 --> 00:07:00,840
can only occur

00:06:57,199 --> 00:07:02,400
in this function so this is a bit

00:07:00,840 --> 00:07:06,240
cleaner

00:07:02,400 --> 00:07:08,400
than the previous code and that's

00:07:06,240 --> 00:07:11,199
teach us that we should use python

00:07:08,400 --> 00:07:13,840
syntax to the fullest

00:07:11,199 --> 00:07:14,880
but obviously our code is still not

00:07:13,840 --> 00:07:17,759
elegant

00:07:14,880 --> 00:07:18,720
it's dominated by exceptionally and the

00:07:17,759 --> 00:07:21,919
business logic

00:07:18,720 --> 00:07:24,560
is not clear and we should really

00:07:21,919 --> 00:07:25,680
try to make it clearer in order to for

00:07:24,560 --> 00:07:29,919
the code to be

00:07:25,680 --> 00:07:32,240
maintainable so i don't want you

00:07:29,919 --> 00:07:33,039
to give up i really believe that

00:07:32,240 --> 00:07:35,360
everlanding

00:07:33,039 --> 00:07:37,919
should not help secure our business

00:07:35,360 --> 00:07:41,280
logic and i will show you what we can do

00:07:37,919 --> 00:07:41,280
further to get there

00:07:41,759 --> 00:07:46,000
so we should separate the business logic

00:07:44,720 --> 00:07:49,520
from the exception and

00:07:46,000 --> 00:07:52,160
code and we can do it by handling the

00:07:49,520 --> 00:07:55,039
exceptions in another layer

00:07:52,160 --> 00:07:57,039
so i will remind you how the perfect

00:07:55,039 --> 00:07:59,280
code look like

00:07:57,039 --> 00:08:00,160
and i will show you how we can reach

00:07:59,280 --> 00:08:04,000
something

00:08:00,160 --> 00:08:05,680
familiar to it so as you can see we have

00:08:04,000 --> 00:08:06,800
to get the restaurant recommendation

00:08:05,680 --> 00:08:09,199
function and we

00:08:06,800 --> 00:08:10,000
have to get config function so if i want

00:08:09,199 --> 00:08:12,479
to make

00:08:10,000 --> 00:08:13,440
this part of code clear now the business

00:08:12,479 --> 00:08:17,280
logic

00:08:13,440 --> 00:08:21,599
i can i can simply uh push

00:08:17,280 --> 00:08:24,800
the exception and encode to different

00:08:21,599 --> 00:08:28,000
place and by

00:08:24,800 --> 00:08:31,199
that i'm making the business logic

00:08:28,000 --> 00:08:32,640
much cleaner so obviously the recovery

00:08:31,199 --> 00:08:34,880
mechanism

00:08:32,640 --> 00:08:36,719
depends on the use case here

00:08:34,880 --> 00:08:40,240
specifically

00:08:36,719 --> 00:08:43,200
i put it in the get config function

00:08:40,240 --> 00:08:43,680
and if i want to make it a bit further

00:08:43,200 --> 00:08:47,279
clean

00:08:43,680 --> 00:08:50,720
i can make the get config so i get user

00:08:47,279 --> 00:08:55,839
function doing

00:08:50,720 --> 00:08:55,839
doing something like this

00:09:03,120 --> 00:09:07,680
so obviously this is much cleaner now

00:09:06,240 --> 00:09:10,480
without compromising

00:09:07,680 --> 00:09:12,720
on the safety of the code so we should

00:09:10,480 --> 00:09:13,519
really try to pick the right abstraction

00:09:12,720 --> 00:09:17,120
level

00:09:13,519 --> 00:09:20,240
to handle the exceptions

00:09:17,120 --> 00:09:22,880
but are we completely safe we have some

00:09:20,240 --> 00:09:24,240
exception and encode and the code is

00:09:22,880 --> 00:09:26,320
quite clean

00:09:24,240 --> 00:09:27,920
obviously we are still not completely

00:09:26,320 --> 00:09:30,880
safe because we have

00:09:27,920 --> 00:09:31,680
silent levels and silent levels are

00:09:30,880 --> 00:09:34,240
levels that

00:09:31,680 --> 00:09:36,480
do not crash our code but they do

00:09:34,240 --> 00:09:38,880
deliver incorrect results

00:09:36,480 --> 00:09:39,680
which make them harder to detect and

00:09:38,880 --> 00:09:42,720
make them

00:09:39,680 --> 00:09:45,600
much worse so the question is

00:09:42,720 --> 00:09:47,120
how can we detect those ill and the

00:09:45,600 --> 00:09:50,240
answer is

00:09:47,120 --> 00:09:52,640
simply by using validations we have many

00:09:50,240 --> 00:09:55,440
type of validations that we can check

00:09:52,640 --> 00:09:56,959
we have output and input type and values

00:09:55,440 --> 00:09:57,839
we have preconditions and post

00:09:56,959 --> 00:10:00,240
conditions

00:09:57,839 --> 00:10:01,040
side effects and invariance and when we

00:10:00,240 --> 00:10:04,880
find

00:10:01,040 --> 00:10:05,680
an issue with the code when we validate

00:10:04,880 --> 00:10:08,880
and fail

00:10:05,680 --> 00:10:09,600
we should simply fail fast so we won't

00:10:08,880 --> 00:10:13,839
find

00:10:09,600 --> 00:10:16,240
the issue later on so i'm gonna

00:10:13,839 --> 00:10:17,360
briefly cover uh some techniques for

00:10:16,240 --> 00:10:20,399
validations

00:10:17,360 --> 00:10:22,800
we can use vanilla exceptions we can use

00:10:20,399 --> 00:10:24,640
type ends and we can use contract

00:10:22,800 --> 00:10:27,760
testing libraries

00:10:24,640 --> 00:10:28,800
obviously the the best solution is to

00:10:27,760 --> 00:10:32,560
combine

00:10:28,800 --> 00:10:35,120
all of these depending on the use case

00:10:32,560 --> 00:10:37,040
so vanilla exceptions will look

00:10:35,120 --> 00:10:39,120
something as follow

00:10:37,040 --> 00:10:42,000
uh we have our function and we are

00:10:39,120 --> 00:10:45,040
adding a if clause

00:10:42,000 --> 00:10:47,839
that validates the type of the

00:10:45,040 --> 00:10:49,040
input and the type of the output and

00:10:47,839 --> 00:10:52,800
raise the type arrow

00:10:49,040 --> 00:10:53,360
if there were occur and in addition i

00:10:52,800 --> 00:10:56,880
could have

00:10:53,360 --> 00:11:00,240
checked if it's a valid f3 path

00:10:56,880 --> 00:11:03,040
and by that raising a value level

00:11:00,240 --> 00:11:05,200
so obviously we can validate everything

00:11:03,040 --> 00:11:07,839
with vanilla exceptions

00:11:05,200 --> 00:11:10,560
those validation will occur only on

00:11:07,839 --> 00:11:13,120
runtime and not on compile time

00:11:10,560 --> 00:11:14,480
and unfortunately it's not the cleanest

00:11:13,120 --> 00:11:16,880
code so

00:11:14,480 --> 00:11:18,160
i'm gonna briefly speak why i didn't use

00:11:16,880 --> 00:11:20,560
a social nails

00:11:18,160 --> 00:11:23,360
here uh because it would save me a

00:11:20,560 --> 00:11:26,240
one-liner

00:11:23,360 --> 00:11:26,720
and basically because it raises the

00:11:26,240 --> 00:11:29,200
wrong

00:11:26,720 --> 00:11:30,399
exception type no matter what the issue

00:11:29,200 --> 00:11:33,680
is we're going to raise

00:11:30,399 --> 00:11:35,839
an assertion at all which will make our

00:11:33,680 --> 00:11:38,720
life one look much harder to recover

00:11:35,839 --> 00:11:39,839
so it will be hard for me to understand

00:11:38,720 --> 00:11:42,720
if the issue was

00:11:39,839 --> 00:11:44,800
type error or a level for example

00:11:42,720 --> 00:11:47,440
another small issue is that they can be

00:11:44,800 --> 00:11:50,800
compiled away

00:11:47,440 --> 00:11:53,040
the second technique is type-ins so this

00:11:50,800 --> 00:11:57,200
is an example for the same code

00:11:53,040 --> 00:12:01,040
as you can see simply uh i can add

00:11:57,200 --> 00:12:04,079
typings which tells which type

00:12:01,040 --> 00:12:06,560
and which type the output is uh

00:12:04,079 --> 00:12:08,240
and just by doing that we can validate

00:12:06,560 --> 00:12:11,279
the input and output type

00:12:08,240 --> 00:12:13,839
but we can do other validations

00:12:11,279 --> 00:12:14,560
we can check it both on compile time

00:12:13,839 --> 00:12:17,600
using

00:12:14,560 --> 00:12:20,800
numpy a mypie

00:12:17,600 --> 00:12:24,800
and on runtime using this decorator

00:12:20,800 --> 00:12:28,800
the type checked of typecard library

00:12:24,800 --> 00:12:32,639
and this is quite elegant another

00:12:28,800 --> 00:12:34,959
technique is contract testing libraries

00:12:32,639 --> 00:12:36,240
as you can see it's pretty similar to

00:12:34,959 --> 00:12:40,160
the previous slide

00:12:36,240 --> 00:12:43,040
i can validate if it's a valid s3 path

00:12:40,160 --> 00:12:44,079
just by using this decorator so

00:12:43,040 --> 00:12:47,279
obviously

00:12:44,079 --> 00:12:49,600
all the validations are supported

00:12:47,279 --> 00:12:51,680
they occur only on runtime and not

00:12:49,600 --> 00:12:54,880
compile time

00:12:51,680 --> 00:12:58,000
it's clean and elegant but unfortunately

00:12:54,880 --> 00:13:00,320
uh to my knowledge there is no mature

00:12:58,000 --> 00:13:01,680
and maintained option for contracts

00:13:00,320 --> 00:13:04,399
testing library

00:13:01,680 --> 00:13:05,200
so you should be really careful when we

00:13:04,399 --> 00:13:09,440
you pick

00:13:05,200 --> 00:13:09,440
uh your own uh solution

00:13:09,760 --> 00:13:13,519
but there are still problems lurking

00:13:11,920 --> 00:13:16,079
around even for

00:13:13,519 --> 00:13:17,519
a simple function like to get relevant

00:13:16,079 --> 00:13:20,160
restaurants

00:13:17,519 --> 00:13:21,600
which basically get requests to an

00:13:20,160 --> 00:13:25,440
imaginary

00:13:21,600 --> 00:13:28,560
url uh there are a lot of

00:13:25,440 --> 00:13:31,600
exceptions that can occur

00:13:28,560 --> 00:13:34,560
so our our app might live in an

00:13:31,600 --> 00:13:34,959
unstable environment and by that i mean

00:13:34,560 --> 00:13:37,279
that

00:13:34,959 --> 00:13:38,000
my network can be down the server

00:13:37,279 --> 00:13:41,120
network

00:13:38,000 --> 00:13:44,800
can be down the server can be too busy

00:13:41,120 --> 00:13:48,399
and many more issues so one technique

00:13:44,800 --> 00:13:52,560
to make our code more resilient to flaky

00:13:48,399 --> 00:13:56,399
environment is to do a retry mechanism

00:13:52,560 --> 00:13:58,320
so here is a naive native implementation

00:13:56,399 --> 00:14:00,399
of retired mechanism

00:13:58,320 --> 00:14:03,199
simply i'm going to iterate five times

00:14:00,399 --> 00:14:06,240
on the same request

00:14:03,199 --> 00:14:09,839
and if i'm getting an exception that

00:14:06,240 --> 00:14:11,600
is corresponding to a flaky environment

00:14:09,839 --> 00:14:12,240
i'm gonna reply unless i reach the

00:14:11,600 --> 00:14:16,240
maximum

00:14:12,240 --> 00:14:19,920
allowed it rise so obviously this

00:14:16,240 --> 00:14:23,680
is much safer again but it's not clean

00:14:19,920 --> 00:14:25,839
and it's obscure our logic

00:14:23,680 --> 00:14:27,680
so there must be a better way and

00:14:25,839 --> 00:14:31,519
obviously there is

00:14:27,680 --> 00:14:33,760
so python has a lot of patterns

00:14:31,519 --> 00:14:36,480
that are really common we have

00:14:33,760 --> 00:14:40,079
decorators and we have context managers

00:14:36,480 --> 00:14:43,120
i'm not gonna cover them too much

00:14:40,079 --> 00:14:47,120
because it deserves its own

00:14:43,120 --> 00:14:47,680
talk but obviously the most common use

00:14:47,120 --> 00:14:50,399
cases

00:14:47,680 --> 00:14:51,040
are already implemented in the standard

00:14:50,399 --> 00:14:55,519
library

00:14:51,040 --> 00:14:58,480
or in other third-party libraries

00:14:55,519 --> 00:14:59,519
so in our example we can use the

00:14:58,480 --> 00:15:02,480
tenacity

00:14:59,519 --> 00:15:03,120
library to do a reply mechanism and by

00:15:02,480 --> 00:15:06,800
just

00:15:03,120 --> 00:15:10,480
uh using external library

00:15:06,800 --> 00:15:13,600
we we are reducing the amount of bugs

00:15:10,480 --> 00:15:17,440
and we are getting more features

00:15:13,600 --> 00:15:19,600
as you can see this is much cleaner

00:15:17,440 --> 00:15:21,920
so we should use patterns for better

00:15:19,600 --> 00:15:25,040
quality use

00:15:21,920 --> 00:15:27,920
so what i'm gonna speak about next

00:15:25,040 --> 00:15:28,480
so i'm gonna delve a little bit more

00:15:27,920 --> 00:15:32,399
into

00:15:28,480 --> 00:15:34,959
exception uh types as a reminder

00:15:32,399 --> 00:15:35,519
exception types help us distinguish

00:15:34,959 --> 00:15:38,000
between

00:15:35,519 --> 00:15:40,480
different exceptions they help us

00:15:38,000 --> 00:15:44,560
emphasize our intent and we have

00:15:40,480 --> 00:15:46,959
both built-ins and custom exceptions

00:15:44,560 --> 00:15:47,600
so i'm gonna speak about when we should

00:15:46,959 --> 00:15:51,120
use

00:15:47,600 --> 00:15:54,880
custom exceptions or built-in exceptions

00:15:51,120 --> 00:15:57,920
so so in my point of view

00:15:54,880 --> 00:15:58,880
and it's very controversial uh topic the

00:15:57,920 --> 00:16:02,000
entire

00:15:58,880 --> 00:16:05,680
slide is is that we should use

00:16:02,000 --> 00:16:07,759
default exceptions by default

00:16:05,680 --> 00:16:09,440
because they are familiar they are well

00:16:07,759 --> 00:16:11,140
documented we can do some

00:16:09,440 --> 00:16:12,720
stuck overflow magic with them

00:16:11,140 --> 00:16:15,600
[Music]

00:16:12,720 --> 00:16:16,639
but obviously we have custom exceptions

00:16:15,600 --> 00:16:19,759
for a reason

00:16:16,639 --> 00:16:22,800
and the reason is that sometimes the

00:16:19,759 --> 00:16:26,000
built-in exceptions does not suffice

00:16:22,800 --> 00:16:28,639
and these are the cases when there

00:16:26,000 --> 00:16:30,000
is no built-in exceptions that emphasize

00:16:28,639 --> 00:16:33,360
our intent

00:16:30,000 --> 00:16:36,800
for example if i want to emphasize that

00:16:33,360 --> 00:16:41,360
the i have a configuration file and it's

00:16:36,800 --> 00:16:43,920
it's malformed i might create a malphone

00:16:41,360 --> 00:16:46,480
extension type as opposed to use some

00:16:43,920 --> 00:16:48,880
valuable

00:16:46,480 --> 00:16:50,000
in addition if i want to distinguish

00:16:48,880 --> 00:16:53,040
between these different

00:16:50,000 --> 00:16:54,000
exceptions for example if i want to

00:16:53,040 --> 00:16:56,079
recover

00:16:54,000 --> 00:16:57,040
differently from a value level that is

00:16:56,079 --> 00:16:59,600
too big

00:16:57,040 --> 00:17:00,480
and too small i might create a new

00:16:59,600 --> 00:17:03,600
exception

00:17:00,480 --> 00:17:05,679
type and when i want to

00:17:03,600 --> 00:17:07,199
group together together different

00:17:05,679 --> 00:17:10,959
exceptions to make

00:17:07,199 --> 00:17:14,079
a recovery easier so i can use multiple

00:17:10,959 --> 00:17:15,600
inheritance uh to make the recovery much

00:17:14,079 --> 00:17:18,959
cleaner

00:17:15,600 --> 00:17:21,280
and lastly when when i'm gonna wrap that

00:17:18,959 --> 00:17:23,760
about the apis and i'm gonna show it in

00:17:21,280 --> 00:17:26,799
the next slide

00:17:23,760 --> 00:17:30,080
so when we are wrapping third party apis

00:17:26,799 --> 00:17:33,200
we want to minimize our dependency

00:17:30,080 --> 00:17:35,039
i'm gonna show you an example uh here

00:17:33,200 --> 00:17:36,799
so let's say i have the get relevant

00:17:35,039 --> 00:17:39,919
restaurant function

00:17:36,799 --> 00:17:40,559
which can raise request read timeout if

00:17:39,919 --> 00:17:44,000
i

00:17:40,559 --> 00:17:47,440
want to recover from this function

00:17:44,000 --> 00:17:48,320
this means i need to do a import of

00:17:47,440 --> 00:17:52,000
request

00:17:48,320 --> 00:17:56,000
in this function so i

00:17:52,000 --> 00:17:59,360
so in this case i know in this function

00:17:56,000 --> 00:18:00,799
which implementation uh was using to get

00:17:59,360 --> 00:18:04,320
relevant restaurant

00:18:00,799 --> 00:18:04,960
and if in some case uh the get relevant

00:18:04,320 --> 00:18:07,840
first one

00:18:04,960 --> 00:18:08,720
will change the implementation i will

00:18:07,840 --> 00:18:12,799
need to change

00:18:08,720 --> 00:18:16,720
my code as well which is obviously bad

00:18:12,799 --> 00:18:19,760
another cool uh thing about

00:18:16,720 --> 00:18:21,120
except that it has cards so exception

00:18:19,760 --> 00:18:22,240
cards indicate the reason of the

00:18:21,120 --> 00:18:24,960
exception

00:18:22,240 --> 00:18:25,840
and we can override it to replace the

00:18:24,960 --> 00:18:28,960
exception

00:18:25,840 --> 00:18:31,760
that is being raises i will show it

00:18:28,960 --> 00:18:33,039
it will be much easier to understand so

00:18:31,760 --> 00:18:37,120
let's say we have

00:18:33,039 --> 00:18:37,120
a zero division

00:18:37,520 --> 00:18:41,039
and i'm doing some amazing recovery

00:18:39,840 --> 00:18:44,480
mechanism

00:18:41,039 --> 00:18:46,400
and i'm failing so by doing so i can

00:18:44,480 --> 00:18:49,440
raise the zero

00:18:46,400 --> 00:18:53,760
division error but let's say i wanna

00:18:49,440 --> 00:18:56,720
emphasize that my recovery mechanism

00:18:53,760 --> 00:18:57,440
actually failed so i can do something as

00:18:56,720 --> 00:19:00,080
follow

00:18:57,440 --> 00:19:02,880
and as you can see i will have the two

00:19:00,080 --> 00:19:06,400
tracebacks and two exceptions here

00:19:02,880 --> 00:19:09,200
if on the other end i just want to show

00:19:06,400 --> 00:19:10,880
that my amazing recovery mechanism fails

00:19:09,200 --> 00:19:13,919
i can do something as

00:19:10,880 --> 00:19:17,840
follow and as you can see

00:19:13,919 --> 00:19:20,960
i'm i'm raising the exception obviously

00:19:17,840 --> 00:19:24,160
raising exception as like this

00:19:20,960 --> 00:19:26,799
is a bad practice and you should pick uh

00:19:24,160 --> 00:19:28,400
or create your own custom exception in

00:19:26,799 --> 00:19:30,400
this case

00:19:28,400 --> 00:19:32,400
so we should really thrive to pick the

00:19:30,400 --> 00:19:35,360
right exception type and message

00:19:32,400 --> 00:19:37,760
to emphasize our intent and to help us

00:19:35,360 --> 00:19:40,080
recall

00:19:37,760 --> 00:19:41,440
small thing about uh sensitive

00:19:40,080 --> 00:19:44,640
information

00:19:41,440 --> 00:19:45,520
so our exceptions gonna be spread fall

00:19:44,640 --> 00:19:48,960
and wide

00:19:45,520 --> 00:19:51,600
it's gonna be in the login um

00:19:48,960 --> 00:19:53,120
logging system in the monitoring system

00:19:51,600 --> 00:19:56,000
in the incident system

00:19:53,120 --> 00:19:57,520
and even on slack so we should be really

00:19:56,000 --> 00:20:01,760
careful when we are

00:19:57,520 --> 00:20:05,039
handling personal data due to

00:20:01,760 --> 00:20:07,360
many reasons like compliance

00:20:05,039 --> 00:20:08,240
and we should never reveal our own uh

00:20:07,360 --> 00:20:10,000
weaknesses

00:20:08,240 --> 00:20:11,679
because there are better actors

00:20:10,000 --> 00:20:15,120
everywhere so

00:20:11,679 --> 00:20:17,840
you could never be too careful

00:20:15,120 --> 00:20:19,200
a funny example for that is that if i'm

00:20:17,840 --> 00:20:22,200
gonna do a login

00:20:19,200 --> 00:20:23,919
and i'm failing because of a too common

00:20:22,200 --> 00:20:27,120
password

00:20:23,919 --> 00:20:31,520
i don't expect anyone to write

00:20:27,120 --> 00:20:31,520
the password in the exception message

00:20:32,559 --> 00:20:38,640
there are some common gotchas for

00:20:35,679 --> 00:20:40,480
exception and link in a python that i'm

00:20:38,640 --> 00:20:44,240
gonna cover

00:20:40,480 --> 00:20:47,360
so exceptions as a block order

00:20:44,240 --> 00:20:50,559
and by that i mean that uh

00:20:47,360 --> 00:20:53,679
when when an exception is being raised

00:20:50,559 --> 00:20:54,320
it's gonna try to match the exception

00:20:53,679 --> 00:20:58,400
type

00:20:54,320 --> 00:21:01,600
from top to bottom by the way valuable

00:20:58,400 --> 00:21:04,880
is both exception and a value level so

00:21:01,600 --> 00:21:07,200
in this uh specific example

00:21:04,880 --> 00:21:09,039
we would expect to get the value a value

00:21:07,200 --> 00:21:12,000
arrow because it's the most

00:21:09,039 --> 00:21:14,159
specific exception but obviously we are

00:21:12,000 --> 00:21:17,679
getting an exception

00:21:14,159 --> 00:21:21,919
so we should write the exception

00:21:17,679 --> 00:21:25,360
exceptions from the most specific ones

00:21:21,919 --> 00:21:25,360
to the more generic ones

00:21:28,240 --> 00:21:34,720
another common catches is the

00:21:31,520 --> 00:21:35,520
not implemented and not implemented at

00:21:34,720 --> 00:21:38,400
all

00:21:35,520 --> 00:21:39,840
so not implemented at all is a valid

00:21:38,400 --> 00:21:42,880
python exception

00:21:39,840 --> 00:21:47,120
and not implemented is simply a constant

00:21:42,880 --> 00:21:50,480
in python what so when we are raising

00:21:47,120 --> 00:21:53,360
and not implemented a constant

00:21:50,480 --> 00:21:54,720
it tells us that it's a typo because we

00:21:53,360 --> 00:21:58,799
are trying to

00:21:54,720 --> 00:22:01,360
raise something that is not an exception

00:21:58,799 --> 00:22:03,120
it tells us that we should uh raise

00:22:01,360 --> 00:22:05,200
something that derives from base

00:22:03,120 --> 00:22:06,640
exception as we said it's in top of the

00:22:05,200 --> 00:22:09,600
pyramid

00:22:06,640 --> 00:22:10,559
another catcher is return in the final

00:22:09,600 --> 00:22:14,000
block

00:22:10,559 --> 00:22:18,000
so let's say we have the this try

00:22:14,000 --> 00:22:20,880
uh block we have some exception ending

00:22:18,000 --> 00:22:22,799
so when we see the return we think we

00:22:20,880 --> 00:22:25,280
don't need to read further

00:22:22,799 --> 00:22:26,000
the function but obviously we are

00:22:25,280 --> 00:22:29,520
getting the

00:22:26,000 --> 00:22:32,880
surprising result so finally

00:22:29,520 --> 00:22:36,400
uh occur no matter what in the

00:22:32,880 --> 00:22:38,320
try accept block so you should be really

00:22:36,400 --> 00:22:40,080
careful when you are returning from the

00:22:38,320 --> 00:22:43,360
finally

00:22:40,080 --> 00:22:46,480
if we would would have a

00:22:43,360 --> 00:22:50,000
return block it would which will uh

00:22:46,480 --> 00:22:53,039
work in the manner that we thought

00:22:50,000 --> 00:22:56,799
and that's about uh exceptionally

00:22:53,039 --> 00:22:57,440
catches but this sounds like a lot of

00:22:56,799 --> 00:23:00,720
work

00:22:57,440 --> 00:23:01,600
should i do all of these no matter what

00:23:00,720 --> 00:23:04,720
type of

00:23:01,600 --> 00:23:07,760
application do i have so obviously

00:23:04,720 --> 00:23:08,240
not all programs are made equal we have

00:23:07,760 --> 00:23:09,919
some

00:23:08,240 --> 00:23:12,080
programs that need to be extremely

00:23:09,919 --> 00:23:15,840
reliable like airplanes

00:23:12,080 --> 00:23:17,520
and electricity factories we have uh

00:23:15,840 --> 00:23:19,120
systems that we want to be highly

00:23:17,520 --> 00:23:22,159
reliable like our

00:23:19,120 --> 00:23:22,880
live driveless cars we have reliable

00:23:22,159 --> 00:23:26,799
systems

00:23:22,880 --> 00:23:29,360
dodgy systems and basically grab so

00:23:26,799 --> 00:23:29,840
for for the first lessons that we

00:23:29,360 --> 00:23:32,480
learned

00:23:29,840 --> 00:23:33,679
we want to build a fully tolerant system

00:23:32,480 --> 00:23:36,720
to a certain degree

00:23:33,679 --> 00:23:40,720
depending on the use case

00:23:36,720 --> 00:23:42,799
so let's remind ourselves the lessons

00:23:40,720 --> 00:23:44,720
uh we want to build a full tolerance

00:23:42,799 --> 00:23:48,640
system to a certain degree

00:23:44,720 --> 00:23:52,480
we should catch relevant exceptions only

00:23:48,640 --> 00:23:55,760
we should uh make different exception

00:23:52,480 --> 00:23:57,919
distinguishable we should use python

00:23:55,760 --> 00:24:00,480
syntax to the fullest

00:23:57,919 --> 00:24:02,080
everyone link should not obscure our

00:24:00,480 --> 00:24:04,000
business logic

00:24:02,080 --> 00:24:06,640
we should pick the right obstruction

00:24:04,000 --> 00:24:09,760
level for handling our exceptions

00:24:06,640 --> 00:24:12,880
we should validate and fail fast we

00:24:09,760 --> 00:24:15,279
should use patterns for better coder use

00:24:12,880 --> 00:24:16,400
we should pick the right exception types

00:24:15,279 --> 00:24:18,880
and messages

00:24:16,400 --> 00:24:21,360
to emphasize our intent and to help us

00:24:18,880 --> 00:24:24,720
to recover away from it

00:24:21,360 --> 00:24:27,360
we should not use sensitive information

00:24:24,720 --> 00:24:28,880
uh and there are some exception inland

00:24:27,360 --> 00:24:31,120
uh gotchas

00:24:28,880 --> 00:24:32,240
so there are some topics that i didn't

00:24:31,120 --> 00:24:34,480
cover

00:24:32,240 --> 00:24:35,360
uh errol codes and when we should use

00:24:34,480 --> 00:24:38,559
errol codes

00:24:35,360 --> 00:24:40,240
as opposed to exceptions uh the

00:24:38,559 --> 00:24:44,320
functional approach for

00:24:40,240 --> 00:24:47,760
exception handling and its benefits

00:24:44,320 --> 00:24:51,200
how we can avoid some error using

00:24:47,760 --> 00:24:54,080
domain driven designs and architectural

00:24:51,200 --> 00:24:57,120
patterns for resiliency

00:24:54,080 --> 00:25:00,240
so feel free to ask any questions

00:24:57,120 --> 00:25:01,279
now or later and i hope you enjoy the

00:25:00,240 --> 00:25:03,600
rest of uh

00:25:01,279 --> 00:25:05,279
the amazing talks in this amazing

00:25:03,600 --> 00:25:09,760
conference

00:25:05,279 --> 00:25:09,760
thank you thank you for this

00:25:10,480 --> 00:25:15,840
all right so we we got a question here

00:25:13,600 --> 00:25:18,159
when he recommended earlier to use the

00:25:15,840 --> 00:25:20,320
built-in exceptions when possible

00:25:18,159 --> 00:25:22,240
and and so like what are the advantages

00:25:20,320 --> 00:25:24,320
of using one of the customer

00:25:22,240 --> 00:25:27,600
one of the custom exceptions instead of

00:25:24,320 --> 00:25:31,279
one of our specific ones

00:25:27,600 --> 00:25:33,919
so i briefly covered it uh obviously

00:25:31,279 --> 00:25:35,200
uh if i want to recover i will give you

00:25:33,919 --> 00:25:39,120
an example

00:25:35,200 --> 00:25:42,080
so let's say uh i am an account manager

00:25:39,120 --> 00:25:43,039
and and i can only work on companies

00:25:42,080 --> 00:25:46,080
that are between

00:25:43,039 --> 00:25:49,360
100 and 200 people so

00:25:46,080 --> 00:25:52,799
if it's uh bigger i might move it

00:25:49,360 --> 00:25:53,840
to a different team and if it's smaller

00:25:52,799 --> 00:25:56,960
i might just

00:25:53,840 --> 00:26:00,640
i might just ignore uh

00:25:56,960 --> 00:26:00,960
this uh customer so basically if i want

00:26:00,640 --> 00:26:03,279
to

00:26:00,960 --> 00:26:04,400
uh distinguish between different

00:26:03,279 --> 00:26:07,039
exceptions

00:26:04,400 --> 00:26:10,880
this is one reason that i would pick uh

00:26:07,039 --> 00:26:14,640
to cast to create a custom

00:26:10,880 --> 00:26:17,679
custom exception another one is the

00:26:14,640 --> 00:26:18,480
third party apis that i showed and

00:26:17,679 --> 00:26:22,799
lastly

00:26:18,480 --> 00:26:25,840
if i want to emphasize my intent so

00:26:22,799 --> 00:26:29,360
if i want to emphasize that

00:26:25,840 --> 00:26:30,640
my config file is well formed i can't

00:26:29,360 --> 00:26:32,480
use

00:26:30,640 --> 00:26:38,000
any of the built-in exception because

00:26:32,480 --> 00:26:41,200
it's very specific

00:26:38,000 --> 00:26:43,840
right cool thank you um

00:26:41,200 --> 00:26:45,120
is the i contract package reliable for

00:26:43,840 --> 00:26:48,400
production

00:26:45,120 --> 00:26:52,480
john um so probably

00:26:48,400 --> 00:26:56,400
not what i do specifically is just uh

00:26:52,480 --> 00:26:59,600
to write my own decorator

00:26:56,400 --> 00:27:02,080
because uh the eye contract is not

00:26:59,600 --> 00:27:03,600
it's not very stable and mature

00:27:02,080 --> 00:27:06,640
unfortunately

00:27:03,600 --> 00:27:07,919
if any one of you know about a contact

00:27:06,640 --> 00:27:11,039
testing library

00:27:07,919 --> 00:27:12,159
that is uh more mature and uh more

00:27:11,039 --> 00:27:15,440
stable please

00:27:12,159 --> 00:27:18,559
share it with me uh but as i as i said

00:27:15,440 --> 00:27:22,399
it's pretty easy uh to just write uh

00:27:18,559 --> 00:27:25,520
test specific decorator and just

00:27:22,399 --> 00:27:28,080
simply use it all right

00:27:25,520 --> 00:27:30,399
thank you very much um that those are

00:27:28,080 --> 00:27:34,000
all the questions that we have

00:27:30,399 --> 00:27:40,320
amazing thank you very much

00:27:34,000 --> 00:27:40,320

YouTube URL: https://www.youtube.com/watch?v=6sVDuFQRGgo


