Title: Itamar Turner-Trauring - Best practices for production-ready Docker packaging
Publication date: 2020-09-15
Playlist: EuroPython 2020
Description: 
	"Best practices for production-ready Docker packaging
EuroPython 2020 - Talk - 2020-07-23 - Brian
Online

By Itamar Turner-Trauring

You know the basics of packaging your Python application for Docker, but do you know enough to run that image in production? Bad packaging can result in security and production problems, not to mention wasted time try to debug unreproducible errors.

And even if you figure out the best practices, there's still a huge number of details to get right, many of which interact with each other in unexpected ways. My personal list includes over 60 Docker packaging best practices, and it keeps growing. So where do you start? What should you do first?

To help you quickly package your application in a production-ready way, this talk will give you a plan to help you prioritize and iteratively implement these best practices, by starting with the highest priority best practices (security, automation), moving on the correctness and reproducibility, and finally focusing on optimization.

To make this process more concrete, along the way you'll also learn some of the techniques needed to build production-ready images:


Running as a non-root, for increased security.
Debugging C crashes with faulthandler.
Faster startup with pre-compiled .pycs.
Smaller images by disabling pip caching.
Avoiding Alpine Linux.
And more!


At the end of the talk you'll also get some resources to teach you even more best practices that can't be fit in a 30-minute talk.

This talk is for Python programmers who know the basics of Docker packaging, and need to run the resulting images in a production environment.



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2020.europython.eu/events/speaker-release-agreement/

    "
Captions: 
	00:00:11,840 --> 00:00:15,280
is

00:00:12,400 --> 00:00:16,480
a trainer and software developer and

00:00:15,280 --> 00:00:20,160
writes at

00:00:16,480 --> 00:00:22,320
about python at pythonspeed.com and

00:00:20,160 --> 00:00:23,840
you've been doing python for over 20

00:00:22,320 --> 00:00:27,760
years is that true

00:00:23,840 --> 00:00:30,640
yeah since 1999. that's amazing

00:00:27,760 --> 00:00:32,719
and you you still enjoy it a lot i do

00:00:30,640 --> 00:00:36,320
yes

00:00:32,719 --> 00:00:37,760
today you plan to uh show us something

00:00:36,320 --> 00:00:41,200
about docker

00:00:37,760 --> 00:00:42,960
yeah uh sort of in the process that

00:00:41,200 --> 00:00:44,559
i use for docker packaging to make it

00:00:42,960 --> 00:00:46,000
ready for production because

00:00:44,559 --> 00:00:47,200
there's a lot of details it's

00:00:46,000 --> 00:00:48,800
complicated enough you need a whole

00:00:47,200 --> 00:00:50,559
process for it

00:00:48,800 --> 00:00:52,320
okay let's see if your screen share

00:00:50,559 --> 00:00:54,800
works and then i'd say

00:00:52,320 --> 00:00:56,480
we should start your talk uh so yeah

00:00:54,800 --> 00:00:58,239
today i'll be talking about

00:00:56,480 --> 00:01:02,160
production really docker packaging for

00:00:58,239 --> 00:01:02,160
python and again my name is itamara

00:01:02,480 --> 00:01:06,560
and the first thing you need to

00:01:04,320 --> 00:01:08,080
understand is that docker packaging is

00:01:06,560 --> 00:01:09,920
really complicated there's a lot of

00:01:08,080 --> 00:01:13,119
details you need to get right

00:01:09,920 --> 00:01:14,400
and the reason is is that it builds on a

00:01:13,119 --> 00:01:16,799
whole on

00:01:14,400 --> 00:01:18,240
basically 50 years of technology from

00:01:16,799 --> 00:01:20,720
unix in the 70s to

00:01:18,240 --> 00:01:22,240
docker and modern modern python

00:01:20,720 --> 00:01:23,439
packaging in the 2010s

00:01:22,240 --> 00:01:26,720
i don't really want to talk about the

00:01:23,439 --> 00:01:28,799
2020s um

00:01:26,720 --> 00:01:31,119
and so each of these technologies which

00:01:28,799 --> 00:01:33,920
accumulated over the years has its own

00:01:31,119 --> 00:01:34,640
assumptions about how things work uh its

00:01:33,920 --> 00:01:37,360
own

00:01:34,640 --> 00:01:38,560
uh design mistakes like however useful

00:01:37,360 --> 00:01:39,759
these technologies are they're not

00:01:38,560 --> 00:01:42,000
perfect

00:01:39,759 --> 00:01:43,600
they all have certain defaults which may

00:01:42,000 --> 00:01:44,000
not be correct in the case of running

00:01:43,600 --> 00:01:47,360
within

00:01:44,000 --> 00:01:48,399
docker and so the accumulation of all

00:01:47,360 --> 00:01:51,119
these

00:01:48,399 --> 00:01:51,600
technologies sort of intersects within

00:01:51,119 --> 00:01:53,119
the

00:01:51,600 --> 00:01:54,960
docker packaging for your python

00:01:53,119 --> 00:01:57,280
application and so you just end up

00:01:54,960 --> 00:01:59,200
having to get a lot of details right

00:01:57,280 --> 00:02:01,200
in order to make something that's truly

00:01:59,200 --> 00:02:04,399
production ready

00:02:01,200 --> 00:02:06,479
so this is not simple

00:02:04,399 --> 00:02:08,479
and so the result is that there's

00:02:06,479 --> 00:02:10,959
basically i cannot

00:02:08,479 --> 00:02:11,680
uh cover all this material in one half

00:02:10,959 --> 00:02:14,560
hour talk

00:02:11,680 --> 00:02:15,280
um we only have 30 minutes that includes

00:02:14,560 --> 00:02:18,400
questions

00:02:15,280 --> 00:02:21,040
uh i have my own personal list of

00:02:18,400 --> 00:02:23,680
docker packaging best practices has only

00:02:21,040 --> 00:02:25,680
60 items on it and it keeps growing

00:02:23,680 --> 00:02:27,360
uh when i teach this as a training class

00:02:25,680 --> 00:02:28,959
uh these days i would do it like a day

00:02:27,360 --> 00:02:31,040
and a half because just there's so much

00:02:28,959 --> 00:02:33,920
material and even then i don't

00:02:31,040 --> 00:02:35,599
can't quite cover all the details uh but

00:02:33,920 --> 00:02:38,000
can do it anyways

00:02:35,599 --> 00:02:39,120
in some depth and so within a talk we

00:02:38,000 --> 00:02:42,319
can't

00:02:39,120 --> 00:02:44,959
actually learn all the best practices

00:02:42,319 --> 00:02:47,040
but what we can do is learn uh go over a

00:02:44,959 --> 00:02:49,280
process for how you do this packaging

00:02:47,040 --> 00:02:50,879
and the reason you need a process is in

00:02:49,280 --> 00:02:52,959
part just because of this complexity

00:02:50,879 --> 00:02:54,319
like there's a lot of details

00:02:52,959 --> 00:02:56,319
um there's a lot of things that are easy

00:02:54,319 --> 00:02:58,800
to miss it's easy to

00:02:56,319 --> 00:02:59,920
get sidetracked by certain aspects of

00:02:58,800 --> 00:03:01,840
the problem like

00:02:59,920 --> 00:03:04,959
oh my image is huge and then forget

00:03:01,840 --> 00:03:07,440
about other aspects like security

00:03:04,959 --> 00:03:08,560
but also because docker packaging is

00:03:07,440 --> 00:03:10,800
probably a thing you're going to be

00:03:08,560 --> 00:03:12,720
doing on your job

00:03:10,800 --> 00:03:14,400
and you know if you're working in a job

00:03:12,720 --> 00:03:16,000
there's usually lots of other things

00:03:14,400 --> 00:03:17,440
that you need to be doing

00:03:16,000 --> 00:03:18,640
there might be some critical bug that

00:03:17,440 --> 00:03:19,519
interrupts you you have to go to a

00:03:18,640 --> 00:03:21,440
meeting

00:03:19,519 --> 00:03:23,200
and so this isn't the sort of thing

00:03:21,440 --> 00:03:26,239
where you spend half an hour

00:03:23,200 --> 00:03:27,280
uh finish it and it's done and it's

00:03:26,239 --> 00:03:29,760
perfect

00:03:27,280 --> 00:03:31,040
uh you're gonna have to put a little bit

00:03:29,760 --> 00:03:33,599
more time into it

00:03:31,040 --> 00:03:34,959
and so what you need is a process a

00:03:33,599 --> 00:03:37,120
process that will help you

00:03:34,959 --> 00:03:38,879
do iterative development so so that you

00:03:37,120 --> 00:03:41,120
can stop at any point and come back

00:03:38,879 --> 00:03:42,640
later

00:03:41,120 --> 00:03:45,200
that helps you focus on doing the

00:03:42,640 --> 00:03:47,120
important parts first and reminds you

00:03:45,200 --> 00:03:48,799
what the important parts are and that

00:03:47,120 --> 00:03:50,400
builds so each step builds on the net on

00:03:48,799 --> 00:03:51,840
the previous one so that

00:03:50,400 --> 00:03:53,519
you sort of have this cycle of

00:03:51,840 --> 00:03:54,959
continuous improvement so i'm going to

00:03:53,519 --> 00:03:55,840
go through this process and steps in the

00:03:54,959 --> 00:03:58,080
process

00:03:55,840 --> 00:04:00,480
and for each step i'm going to give a

00:03:58,080 --> 00:04:02,480
example of one of the best practices

00:04:00,480 --> 00:04:03,920
uh and list a few more because i don't

00:04:02,480 --> 00:04:05,840
have the time to actually

00:04:03,920 --> 00:04:07,280
go through all of them i'm gonna do is

00:04:05,840 --> 00:04:09,920
at the end of the talk uh

00:04:07,280 --> 00:04:11,519
there'll be a link to my the free guide

00:04:09,920 --> 00:04:12,480
i have on my website it's at least 30

00:04:11,519 --> 00:04:13,680
articles

00:04:12,480 --> 00:04:15,840
and it covers a lot of these best

00:04:13,680 --> 00:04:18,959
practices in far more detail

00:04:15,840 --> 00:04:22,240
and so you don't have to like try to

00:04:18,959 --> 00:04:24,479
you know remember all this like

00:04:22,240 --> 00:04:26,240
there will be a link to the slides and

00:04:24,479 --> 00:04:29,440
link to much more detailed

00:04:26,240 --> 00:04:33,040
uh guide which for those best practices

00:04:29,440 --> 00:04:35,919
that i don't cover at least most of them

00:04:33,040 --> 00:04:37,199
so here's an overview of the process and

00:04:35,919 --> 00:04:40,479
this is what's going

00:04:37,199 --> 00:04:41,919
to structure the rest of the talk

00:04:40,479 --> 00:04:44,080
you start out with getting something

00:04:41,919 --> 00:04:47,680
working and then move on to security

00:04:44,080 --> 00:04:48,639
and eventually um the last thing you do

00:04:47,680 --> 00:04:50,720
is you

00:04:48,639 --> 00:04:53,360
optimize your image so you can build

00:04:50,720 --> 00:04:55,840
faster make it smaller

00:04:53,360 --> 00:04:58,080
and the idea here is you want to start

00:04:55,840 --> 00:05:01,520
with the most important parts

00:04:58,080 --> 00:05:02,720
like security is fairly critical in most

00:05:01,520 --> 00:05:03,600
applications you probably want to do it

00:05:02,720 --> 00:05:05,840
first

00:05:03,600 --> 00:05:06,800
having a small image is a thing you want

00:05:05,840 --> 00:05:08,880
to do we're probably

00:05:06,800 --> 00:05:10,000
like not immediately it's lower in the

00:05:08,880 --> 00:05:12,800
priority list

00:05:10,000 --> 00:05:14,400
this is sort of a generic list and in

00:05:12,800 --> 00:05:15,440
your particular application in your

00:05:14,400 --> 00:05:17,199
situation

00:05:15,440 --> 00:05:18,479
the order might be different so this is

00:05:17,199 --> 00:05:20,240
a starting point

00:05:18,479 --> 00:05:21,919
uh maybe that reproducible builds for

00:05:20,240 --> 00:05:24,240
example are really critical for what

00:05:21,919 --> 00:05:26,560
you're doing and so you might do them

00:05:24,240 --> 00:05:31,280
first

00:05:26,560 --> 00:05:31,280
and this is also a process that

00:05:31,440 --> 00:05:34,320
sort of guides you the first two or

00:05:33,120 --> 00:05:35,919
three times that you're doing that and

00:05:34,320 --> 00:05:38,240
eventually like you'll be doing a lot of

00:05:35,919 --> 00:05:40,320
these press practices automatically

00:05:38,240 --> 00:05:42,240
and so you won't need to think so much

00:05:40,320 --> 00:05:43,520
in terms of this exact order like you

00:05:42,240 --> 00:05:44,400
might just automatically do a whole

00:05:43,520 --> 00:05:47,120
bunch of

00:05:44,400 --> 00:05:48,800
step four right from the beginning but

00:05:47,120 --> 00:05:50,560
even then it's useful to have sort of a

00:05:48,800 --> 00:05:52,160
checklist of here's all the things i

00:05:50,560 --> 00:05:55,039
have to do because there are so many

00:05:52,160 --> 00:05:55,039
details to get right

00:05:56,560 --> 00:06:00,960
so the first step in packaging your

00:05:59,440 --> 00:06:01,680
docker image is just getting something

00:06:00,960 --> 00:06:02,800
working

00:06:01,680 --> 00:06:04,720
it doesn't matter how good your

00:06:02,800 --> 00:06:06,800
packaging is how secure

00:06:04,720 --> 00:06:08,560
and efficient and small and correct it

00:06:06,800 --> 00:06:10,400
doesn't actually run your application

00:06:08,560 --> 00:06:12,160
it doesn't run your server this is sort

00:06:10,400 --> 00:06:14,000
of the bare minimum

00:06:12,160 --> 00:06:15,600
to have said you've succeeded at doing

00:06:14,000 --> 00:06:17,919
something useful

00:06:15,600 --> 00:06:20,000
and so the first step is just get your

00:06:17,919 --> 00:06:22,720
application working even if it's

00:06:20,000 --> 00:06:24,960
done in a sort of in not an ideal way

00:06:22,720 --> 00:06:28,720
because it's just your starting point

00:06:24,960 --> 00:06:31,039
so this example docker file

00:06:28,720 --> 00:06:32,960
i'm using the python 38 slimbuster

00:06:31,039 --> 00:06:34,720
docker image as a base image

00:06:32,960 --> 00:06:37,440
copying in all the files in the current

00:06:34,720 --> 00:06:38,000
directory running pip install to install

00:06:37,440 --> 00:06:40,560
the code

00:06:38,000 --> 00:06:42,800
and then i use entry point to say when

00:06:40,560 --> 00:06:45,039
you run this image

00:06:42,800 --> 00:06:46,960
run this script to start up the

00:06:45,039 --> 00:06:50,160
container

00:06:46,960 --> 00:06:52,319
so it's not a as you'll see even from

00:06:50,160 --> 00:06:54,080
the example this has a bunch of flaws

00:06:52,319 --> 00:06:56,880
but it's a starting point and you have

00:06:54,080 --> 00:06:56,880
to start somewhere

00:06:58,240 --> 00:07:05,520
the next step is security

00:07:02,240 --> 00:07:07,120
before you can feel comfortable

00:07:05,520 --> 00:07:09,440
deploying something publicly where

00:07:07,120 --> 00:07:11,120
anyone on the internet can access it

00:07:09,440 --> 00:07:13,599
you probably should be making sure that

00:07:11,120 --> 00:07:14,840
that application is as secure as you can

00:07:13,599 --> 00:07:18,000
make it

00:07:14,840 --> 00:07:18,960
um otherwise you basically always have

00:07:18,000 --> 00:07:21,280
this worry that

00:07:18,960 --> 00:07:22,639
someone will break into it get access to

00:07:21,280 --> 00:07:25,759
your private data

00:07:22,639 --> 00:07:28,960
modify your website take it down

00:07:25,759 --> 00:07:30,880
and so since security is sort of a

00:07:28,960 --> 00:07:32,880
sort of minimal prerequisite for running

00:07:30,880 --> 00:07:35,919
anything from deploying anything

00:07:32,880 --> 00:07:36,479
um it's probably the good first step in

00:07:35,919 --> 00:07:40,080
terms of

00:07:36,479 --> 00:07:40,080
what best practices you should implement

00:07:40,240 --> 00:07:43,120
so again i will can't cover all the

00:07:41,680 --> 00:07:45,199
security risk practices but for each of

00:07:43,120 --> 00:07:49,039
these steps i'm going to give an example

00:07:45,199 --> 00:07:52,800
and for security one best practice is

00:07:49,039 --> 00:07:56,560
don't run as root containers

00:07:52,800 --> 00:07:57,680
are a way to isolate processes from each

00:07:56,560 --> 00:08:00,960
other and from

00:07:57,680 --> 00:08:02,479
the host operating system but they're

00:08:00,960 --> 00:08:04,800
only

00:08:02,479 --> 00:08:07,520
isolated in a limited way a virtual

00:08:04,800 --> 00:08:11,440
machine is much more isolated

00:08:07,520 --> 00:08:12,879
and so the when you run a docker image

00:08:11,440 --> 00:08:15,120
and create a container by default

00:08:12,879 --> 00:08:16,160
most docker images will run as a root as

00:08:15,120 --> 00:08:18,720
root

00:08:16,160 --> 00:08:20,080
so if you run nginx someone is ready

00:08:18,720 --> 00:08:20,800
when the official python image one is

00:08:20,080 --> 00:08:24,000
ripped

00:08:20,800 --> 00:08:26,000
from the ubuntu image one is root and

00:08:24,000 --> 00:08:29,680
the problem with running as root is

00:08:26,000 --> 00:08:33,039
that it gives

00:08:29,680 --> 00:08:34,880
rather more access than one would like

00:08:33,039 --> 00:08:36,719
to various capabilities of the operating

00:08:34,880 --> 00:08:38,560
system so if someone manages to take

00:08:36,719 --> 00:08:40,320
over your process remotely

00:08:38,560 --> 00:08:41,599
if your process is running as root even

00:08:40,320 --> 00:08:45,040
in a container

00:08:41,599 --> 00:08:47,920
it is much easier for an attacker to

00:08:45,040 --> 00:08:50,399
escape the container and escalate their

00:08:47,920 --> 00:08:51,920
access and take over your whole computer

00:08:50,399 --> 00:08:53,600
and so good security risk practices

00:08:51,920 --> 00:08:55,360
don't run as rude

00:08:53,600 --> 00:08:57,600
and so in this example i've updated the

00:08:55,360 --> 00:08:59,440
docker file so that

00:08:57,600 --> 00:09:00,880
after choosing the base image we run a

00:08:59,440 --> 00:09:03,440
command that creates a new user

00:09:00,880 --> 00:09:03,920
called app user and then we use a docker

00:09:03,440 --> 00:09:07,360
file

00:09:03,920 --> 00:09:09,600
user command to say all later commands

00:09:07,360 --> 00:09:11,360
should run as this new user

00:09:09,600 --> 00:09:13,040
so for example when you copy in files

00:09:11,360 --> 00:09:15,279
they'll now be owned by this

00:09:13,040 --> 00:09:16,959
new user when you run pip install it'll

00:09:15,279 --> 00:09:19,760
run as that user

00:09:16,959 --> 00:09:21,200
when you start up the container it will

00:09:19,760 --> 00:09:26,080
run the container as this

00:09:21,200 --> 00:09:29,360
non-root user and so with you know

00:09:26,080 --> 00:09:30,880
two three extra lines of code in your

00:09:29,360 --> 00:09:33,839
docker file you now have a much more

00:09:30,880 --> 00:09:33,839
secure docker image

00:09:34,080 --> 00:09:37,839
again there's plenty of other security

00:09:35,680 --> 00:09:39,440
best practices i won't go into them but

00:09:37,839 --> 00:09:42,560
the guy downloaded at the end has more

00:09:39,440 --> 00:09:42,560
details about many of them

00:09:43,120 --> 00:09:49,600
so now that you have a working image

00:09:46,160 --> 00:09:50,959
that is hopefully somewhat secure

00:09:49,600 --> 00:09:53,279
you might just start thinking about

00:09:50,959 --> 00:09:54,959
automation this up to this point you

00:09:53,279 --> 00:09:55,920
just you have this docker file you build

00:09:54,959 --> 00:09:58,560
it manually

00:09:55,920 --> 00:09:59,920
you could deploy it manually if you want

00:09:58,560 --> 00:10:01,279
but

00:09:59,920 --> 00:10:03,120
you know over time you don't want to

00:10:01,279 --> 00:10:03,519
have to rebuild your application every

00:10:03,120 --> 00:10:06,640
time

00:10:03,519 --> 00:10:07,440
someone merges a pull request you might

00:10:06,640 --> 00:10:09,600
have

00:10:07,440 --> 00:10:10,959
two other team members who are using

00:10:09,600 --> 00:10:12,320
this code base and they want things to

00:10:10,959 --> 00:10:14,320
be built automatically they don't want

00:10:12,320 --> 00:10:15,920
they don't care about the details and so

00:10:14,320 --> 00:10:17,040
a good next step is to automate the

00:10:15,920 --> 00:10:19,120
builds so that your

00:10:17,040 --> 00:10:21,040
builder ci system automatically builds

00:10:19,120 --> 00:10:23,360
docker images and pushes them

00:10:21,040 --> 00:10:25,519
to the image registry the server that

00:10:23,360 --> 00:10:27,680
stores your image docker images

00:10:25,519 --> 00:10:28,959
so here's a sample bash script that does

00:10:27,680 --> 00:10:32,240
that for you

00:10:28,959 --> 00:10:33,839
um we do set minus you o pipe fail which

00:10:32,240 --> 00:10:35,839
is a line you should have at every

00:10:33,839 --> 00:10:37,760
every pack script just so it stops

00:10:35,839 --> 00:10:40,399
running when there's errors

00:10:37,760 --> 00:10:42,000
we run our tests uh do docker build to

00:10:40,399 --> 00:10:42,800
build the image and then do docker push

00:10:42,000 --> 00:10:44,839
to push your image

00:10:42,800 --> 00:10:46,079
so if you put this in your build oci

00:10:44,839 --> 00:10:48,480
system

00:10:46,079 --> 00:10:52,240
every time you trigger a build it'll

00:10:48,480 --> 00:10:52,240
also build and push your docker image

00:10:52,800 --> 00:10:59,440
and so once you start doing this

00:10:57,120 --> 00:11:02,000
you have to start thinking about the way

00:10:59,440 --> 00:11:05,120
that you structure development

00:11:02,000 --> 00:11:07,440
and the way your development process

00:11:05,120 --> 00:11:08,640
integrates with your build system so for

00:11:07,440 --> 00:11:10,640
example a common

00:11:08,640 --> 00:11:11,920
uh development process is to have

00:11:10,640 --> 00:11:15,200
feature branches

00:11:11,920 --> 00:11:16,800
so if you have an issue 123 then

00:11:15,200 --> 00:11:19,760
the developer working on that issue will

00:11:16,800 --> 00:11:23,440
create a branch 123

00:11:19,760 --> 00:11:24,880
and do the work in that add the feature

00:11:23,440 --> 00:11:26,160
fix the bug in that branch and then do a

00:11:24,880 --> 00:11:27,600
pull request

00:11:26,160 --> 00:11:29,839
and then your build system will

00:11:27,600 --> 00:11:31,839
automatically build uh

00:11:29,839 --> 00:11:33,519
and run the tests and you build in the

00:11:31,839 --> 00:11:36,079
from that pull request

00:11:33,519 --> 00:11:37,200
and you might want to build a docker

00:11:36,079 --> 00:11:40,320
image

00:11:37,200 --> 00:11:41,920
um for every pull request

00:11:40,320 --> 00:11:44,240
because you might want to test that

00:11:41,920 --> 00:11:46,959
docker image manually or automatically

00:11:44,240 --> 00:11:50,160
maybe have an integration test

00:11:46,959 --> 00:11:52,320
and if you use the scripts that

00:11:50,160 --> 00:11:53,600
i showed in the last slide very which is

00:11:52,320 --> 00:11:55,040
fairly simplistic

00:11:53,600 --> 00:11:56,720
what's going to happen is you have this

00:11:55,040 --> 00:11:57,680
pull request for the branch

00:11:56,720 --> 00:11:58,720
and then you're going to build that

00:11:57,680 --> 00:11:59,920
image and you're going to push it and

00:11:58,720 --> 00:12:03,120
it's going to overwrite

00:11:59,920 --> 00:12:04,000
your stable release docker image because

00:12:03,120 --> 00:12:06,000
you're always giving

00:12:04,000 --> 00:12:07,600
the images you push the same name like

00:12:06,000 --> 00:12:08,399
you're always pushing to your image

00:12:07,600 --> 00:12:10,079
latest

00:12:08,399 --> 00:12:11,680
which means random pull requests are

00:12:10,079 --> 00:12:14,560
going to overwrite your

00:12:11,680 --> 00:12:15,839
official release docker image so what

00:12:14,560 --> 00:12:16,160
you want to do is you want to make sure

00:12:15,839 --> 00:12:18,240
that

00:12:16,160 --> 00:12:19,680
docker images built by pull requests

00:12:18,240 --> 00:12:22,720
don't stomp on your

00:12:19,680 --> 00:12:24,000
release docker image and one easy way to

00:12:22,720 --> 00:12:27,519
do this is to name your

00:12:24,000 --> 00:12:29,920
images based on your git rash so in this

00:12:27,519 --> 00:12:31,920
variant of the build script i'm getting

00:12:29,920 --> 00:12:34,000
the current good branch using the get

00:12:31,920 --> 00:12:36,320
riff bars command

00:12:34,000 --> 00:12:38,240
just for the record i don't remember the

00:12:36,320 --> 00:12:39,760
git commands ever i always use stack

00:12:38,240 --> 00:12:42,800
overflow or

00:12:39,760 --> 00:12:44,480
uh look at it at my notes because

00:12:42,800 --> 00:12:46,399
they're impossible to remember

00:12:44,480 --> 00:12:48,240
so you get the good wrench and then you

00:12:46,399 --> 00:12:51,279
say i'm going to name this man

00:12:48,240 --> 00:12:53,120
such that the i'm going to name my new

00:12:51,279 --> 00:12:54,000
image such that the part after the colon

00:12:53,120 --> 00:12:56,160
the tag

00:12:54,000 --> 00:12:57,040
is the same as the git branch and so if

00:12:56,160 --> 00:13:00,079
you have

00:12:57,040 --> 00:13:02,000
uh branch one two three more cowbell

00:13:00,079 --> 00:13:04,160
now this image will be your image colon

00:13:02,000 --> 00:13:06,720
one two three more cowbell

00:13:04,160 --> 00:13:09,839
and it won't overwrite your production

00:13:06,720 --> 00:13:09,839
image or stable image

00:13:10,399 --> 00:13:14,560
again plenty of other best practices

00:13:12,240 --> 00:13:17,839
that you can do in your ci system

00:13:14,560 --> 00:13:19,519
which we'll go into today

00:13:17,839 --> 00:13:21,200
so at this point you have an image that

00:13:19,519 --> 00:13:24,079
runs your application um

00:13:21,200 --> 00:13:25,519
it is hopefully secure and it has

00:13:24,079 --> 00:13:26,800
automated builds

00:13:25,519 --> 00:13:28,320
and so now that you have automated

00:13:26,800 --> 00:13:29,360
builds you're starting to accumulate

00:13:28,320 --> 00:13:30,720
multiple images

00:13:29,360 --> 00:13:32,959
uh you have the image you built last

00:13:30,720 --> 00:13:35,839
week of image build today the image from

00:13:32,959 --> 00:13:36,560
polarquest image your teammate created

00:13:35,839 --> 00:13:39,839
um

00:13:36,560 --> 00:13:41,120
you're running it in production maybe

00:13:39,839 --> 00:13:43,440
people are running different versions of

00:13:41,120 --> 00:13:44,720
it and so now you're more likely to see

00:13:43,440 --> 00:13:46,240
errors you're more likely to have to try

00:13:44,720 --> 00:13:48,160
to debug errors

00:13:46,240 --> 00:13:50,639
and so a good next step at this point is

00:13:48,160 --> 00:13:52,480
to work on making your docker image

00:13:50,639 --> 00:13:54,880
easier to identify and also easier to

00:13:52,480 --> 00:13:54,880
debug

00:13:57,279 --> 00:14:01,760
and so here's an example best practice

00:14:00,160 --> 00:14:02,959
for making your docker image or even

00:14:01,760 --> 00:14:04,560
your python code in general more

00:14:02,959 --> 00:14:08,079
debuggable

00:14:04,560 --> 00:14:10,480
so if you have a bug in your python code

00:14:08,079 --> 00:14:11,440
something went wrong bad input

00:14:10,480 --> 00:14:13,600
unexpected

00:14:11,440 --> 00:14:15,120
issue somewhere you'll get an exception

00:14:13,600 --> 00:14:16,240
thrown if it's something that can't get

00:14:15,120 --> 00:14:18,000
handled

00:14:16,240 --> 00:14:19,440
then what will usually happen is it'll

00:14:18,000 --> 00:14:21,760
get converted to a traceback the

00:14:19,440 --> 00:14:23,760
traceback will be stored in the logs

00:14:21,760 --> 00:14:25,519
and then if your server crashes you can

00:14:23,760 --> 00:14:26,959
go look in the logs uh if it doesn't

00:14:25,519 --> 00:14:28,240
crash and you have a bug report you can

00:14:26,959 --> 00:14:30,800
go look into logs

00:14:28,240 --> 00:14:32,480
you look into logs and you say oh it was

00:14:30,800 --> 00:14:33,199
this function calling this function this

00:14:32,480 --> 00:14:35,040
line of code

00:14:33,199 --> 00:14:36,639
through zero through a zero division

00:14:35,040 --> 00:14:37,920
error and that gives you a really good

00:14:36,639 --> 00:14:40,720
starting point for

00:14:37,920 --> 00:14:42,079
figuring out what went wrong because you

00:14:40,720 --> 00:14:44,880
know where in your code

00:14:42,079 --> 00:14:45,519
this error originated from if you have a

00:14:44,880 --> 00:14:47,600
bug in c

00:14:45,519 --> 00:14:49,279
code that's not what's going to happen

00:14:47,600 --> 00:14:50,160
if you have a bug in c code your program

00:14:49,279 --> 00:14:54,160
is going to crash

00:14:50,160 --> 00:14:54,959
silently and the python interpreter is

00:14:54,160 --> 00:14:58,240
written in c

00:14:54,959 --> 00:15:00,240
and chances are many of the third-party

00:14:58,240 --> 00:15:01,839
extensions you're installing are also

00:15:00,240 --> 00:15:02,480
using c code whether it's a database

00:15:01,839 --> 00:15:06,000
adapter

00:15:02,480 --> 00:15:06,000
or method lab or an empire

00:15:06,160 --> 00:15:11,120
most projects will end up using some c

00:15:09,839 --> 00:15:13,680
code so if you have a crash in your c

00:15:11,120 --> 00:15:15,760
code you might get a core dump

00:15:13,680 --> 00:15:17,360
but the file system for your docker

00:15:15,760 --> 00:15:18,720
container is ephemeral and typically

00:15:17,360 --> 00:15:19,839
will just get thrown away once your

00:15:18,720 --> 00:15:22,000
process crashes

00:15:19,839 --> 00:15:24,160
so process crashes may cordon out may

00:15:22,000 --> 00:15:25,279
not and then the file system disappears

00:15:24,160 --> 00:15:28,160
and then now you have nothing

00:15:25,279 --> 00:15:29,759
you have no logs no core dump all you

00:15:28,160 --> 00:15:31,839
know is that your program crashed

00:15:29,759 --> 00:15:33,839
so it's extremely difficult to debug

00:15:31,839 --> 00:15:35,920
code in this situation

00:15:33,839 --> 00:15:38,320
luckily python has a solution for this

00:15:35,920 --> 00:15:41,120
there's a module called faulthandler

00:15:38,320 --> 00:15:43,040
and what it does is it adds some hooks

00:15:41,120 --> 00:15:43,759
so that if your program crashes in c

00:15:43,040 --> 00:15:45,519
code

00:15:43,759 --> 00:15:47,759
it will do a best effort to print a

00:15:45,519 --> 00:15:50,800
traceback of the python code

00:15:47,759 --> 00:15:52,480
uh where you crashed what that means is

00:15:50,800 --> 00:15:54,079
crashes in c code give you the same

00:15:52,480 --> 00:15:54,720
information that crashes in python code

00:15:54,079 --> 00:15:57,120
do

00:15:54,720 --> 00:15:58,079
nice python traceback which allows you

00:15:57,120 --> 00:15:59,680
to

00:15:58,079 --> 00:16:02,000
sort of figure out where your code that

00:15:59,680 --> 00:16:04,160
came the bug came from from you can say

00:16:02,000 --> 00:16:06,320
oh this came out of the database adapter

00:16:04,160 --> 00:16:08,959
there's a bug in the database adapter

00:16:06,320 --> 00:16:10,320
instead of just no having no idea where

00:16:08,959 --> 00:16:12,240
the problem came from

00:16:10,320 --> 00:16:14,800
and the easiest way to use fault handler

00:16:12,240 --> 00:16:17,120
is to set a environment handler

00:16:14,800 --> 00:16:19,199
an environment variable called python

00:16:17,120 --> 00:16:21,279
fault handler so you set it to one

00:16:19,199 --> 00:16:23,600
and you can do this in your shell for

00:16:21,279 --> 00:16:25,120
local running code locally you can

00:16:23,600 --> 00:16:26,720
in your docker file you can use the end

00:16:25,120 --> 00:16:28,880
of command so you do end

00:16:26,720 --> 00:16:30,160
python fault handler equals one it's one

00:16:28,880 --> 00:16:32,480
extra line in your

00:16:30,160 --> 00:16:33,680
docker file and from now on anytime you

00:16:32,480 --> 00:16:37,839
have a crash in your c code you'll have

00:16:33,680 --> 00:16:37,839
a much easier time debugging it

00:16:37,920 --> 00:16:41,199
again there are other best practices you

00:16:39,920 --> 00:16:45,199
can use to make your image

00:16:41,199 --> 00:16:45,199
easier to identify and easier to debug

00:16:45,519 --> 00:16:49,279
so now onto step five so you have a

00:16:47,199 --> 00:16:51,279
working

00:16:49,279 --> 00:16:53,279
container it runs your application it's

00:16:51,279 --> 00:16:55,759
secure

00:16:53,279 --> 00:16:57,600
uh gets built automatically you made it

00:16:55,759 --> 00:16:59,440
easier to identify and debug

00:16:57,600 --> 00:17:01,680
and so the next step is to say well how

00:16:59,440 --> 00:17:04,640
can we make it run better

00:17:01,680 --> 00:17:06,959
run faster have be less likely to have

00:17:04,640 --> 00:17:09,039
issues in the first place

00:17:06,959 --> 00:17:10,400
and so that means things like making it

00:17:09,039 --> 00:17:13,919
start up faster

00:17:10,400 --> 00:17:13,919
which can in certain applications

00:17:14,079 --> 00:17:18,000
make a big difference shut down faster

00:17:17,360 --> 00:17:20,079
which can

00:17:18,000 --> 00:17:21,760
if you're deploying new versions of your

00:17:20,079 --> 00:17:23,919
code you might fast shut down makes it

00:17:21,760 --> 00:17:25,600
easier to deploy bug fix

00:17:23,919 --> 00:17:27,280
allow your runtime environment to detect

00:17:25,600 --> 00:17:29,520
if your process is frozen that sort of

00:17:27,280 --> 00:17:29,520
thing

00:17:30,480 --> 00:17:34,640
and so one example of a best practice

00:17:33,039 --> 00:17:38,720
for operational correctness

00:17:34,640 --> 00:17:40,799
is uh compiling your bytecode

00:17:38,720 --> 00:17:42,000
so when your python interpreter runs

00:17:40,799 --> 00:17:43,760
your source code

00:17:42,000 --> 00:17:45,600
it doesn't actually run the python

00:17:43,760 --> 00:17:48,799
source code the text that you wrote in

00:17:45,600 --> 00:17:51,200
that py file what actually happens is

00:17:48,799 --> 00:17:52,960
it parses the source code and then

00:17:51,200 --> 00:17:54,720
creates bytecode

00:17:52,960 --> 00:17:57,840
which is what the interpreter in the c

00:17:54,720 --> 00:17:59,919
python virtual machine runs

00:17:57,840 --> 00:18:01,360
interpreter virtual machine um and so

00:17:59,919 --> 00:18:03,360
and then it takes that bytecode and

00:18:01,360 --> 00:18:05,679
writes it to a dot pyc file

00:18:03,360 --> 00:18:07,039
and stores it on disk the next time you

00:18:05,679 --> 00:18:08,480
run your python application

00:18:07,039 --> 00:18:10,400
instead of having to parse the source

00:18:08,480 --> 00:18:12,480
code and convert it to pyc

00:18:10,400 --> 00:18:15,360
you can load the pyc directly that can

00:18:12,480 --> 00:18:16,720
speed up your startup

00:18:15,360 --> 00:18:18,880
so if your docker image doesn't have

00:18:16,720 --> 00:18:20,400
pycs for all of your source code

00:18:18,880 --> 00:18:22,240
that will mean slower startup because

00:18:20,400 --> 00:18:23,520
every time you start the container

00:18:22,240 --> 00:18:25,360
it's going to have to parse the source

00:18:23,520 --> 00:18:26,320
code and on your

00:18:25,360 --> 00:18:27,840
when you're running on your local

00:18:26,320 --> 00:18:28,480
computer this is not really a thing you

00:18:27,840 --> 00:18:31,120
think about

00:18:28,480 --> 00:18:32,720
because your file system is persistent

00:18:31,120 --> 00:18:35,200
so you run a program once

00:18:32,720 --> 00:18:37,120
creates the pycs you run the program a

00:18:35,200 --> 00:18:40,000
second time and the pycs are there

00:18:37,120 --> 00:18:41,120
and they can get used and your startup

00:18:40,000 --> 00:18:43,360
is faster

00:18:41,120 --> 00:18:44,400
when you're running in a docker image

00:18:43,360 --> 00:18:45,919
every time

00:18:44,400 --> 00:18:48,000
when you're starting a container from a

00:18:45,919 --> 00:18:48,720
docker image every time you start a new

00:18:48,000 --> 00:18:51,200
container

00:18:48,720 --> 00:18:53,039
it starts from a pristine copy of it

00:18:51,200 --> 00:18:54,240
whatever was in the docker image file

00:18:53,039 --> 00:18:55,840
system

00:18:54,240 --> 00:18:58,480
and so every time you start a new

00:18:55,840 --> 00:18:59,679
container if there's new node.pycs it'll

00:18:58,480 --> 00:19:01,760
create them

00:18:59,679 --> 00:19:02,960
and then when the process exits and the

00:19:01,760 --> 00:19:05,039
container exits

00:19:02,960 --> 00:19:06,160
that file system will get thrown away

00:19:05,039 --> 00:19:07,840
and the next time you start the

00:19:06,160 --> 00:19:09,120
container it'll again start without

00:19:07,840 --> 00:19:11,280
fpics

00:19:09,120 --> 00:19:13,840
and so if you're packaging something for

00:19:11,280 --> 00:19:17,120
docker you may have to explicitly create

00:19:13,840 --> 00:19:18,880
those.dyc files and have faster startup

00:19:17,120 --> 00:19:20,400
there's a couple of line example lines

00:19:18,880 --> 00:19:24,160
here you can add to your dockerfile

00:19:20,400 --> 00:19:25,360
one of them compiles

00:19:24,160 --> 00:19:27,280
the code that you've installed and

00:19:25,360 --> 00:19:29,520
typically pip does this so you

00:19:27,280 --> 00:19:30,880
may not have to do this most of the time

00:19:29,520 --> 00:19:32,320
but if you just copy some

00:19:30,880 --> 00:19:34,080
code into a directory and you're just

00:19:32,320 --> 00:19:35,600
running it from there

00:19:34,080 --> 00:19:37,200
pip doesn't know it exists pip didn't

00:19:35,600 --> 00:19:38,640
compile it and so you should they have

00:19:37,200 --> 00:19:40,880
to compile yourself

00:19:38,640 --> 00:19:43,200
and so you can use the uh compiler

00:19:40,880 --> 00:19:45,600
module that comes with python to compile

00:19:43,200 --> 00:19:47,120
the code to bytecode as part of your

00:19:45,600 --> 00:19:49,120
docker packaging and then startup will

00:19:47,120 --> 00:19:50,559
be faster

00:19:49,120 --> 00:19:53,280
and again there's plenty of other best

00:19:50,559 --> 00:19:56,080
practices from signal handling

00:19:53,280 --> 00:19:56,880
for shutdown to health checks uh if you

00:19:56,080 --> 00:20:00,720
want to learn about

00:19:56,880 --> 00:20:03,840
signal handling for shutdowns hennik

00:20:00,720 --> 00:20:08,240
schwalk is pronouncing his name um

00:20:03,840 --> 00:20:08,240
henik has a nice article about this

00:20:08,960 --> 00:20:15,200
and so at this point you have a

00:20:12,720 --> 00:20:17,360
docker image that is correct in terms of

00:20:15,200 --> 00:20:20,720
how it runs

00:20:17,360 --> 00:20:23,440
but not necessarily correct in

00:20:20,720 --> 00:20:24,720
how you build it and so you know if it's

00:20:23,440 --> 00:20:25,360
been like you know you spent the past

00:20:24,720 --> 00:20:27,520
day or two

00:20:25,360 --> 00:20:29,280
among other you know fixing bugs in your

00:20:27,520 --> 00:20:31,120
code and going to meetings but also

00:20:29,280 --> 00:20:34,240
doing docker packaging

00:20:31,120 --> 00:20:36,000
over the course of two days uh

00:20:34,240 --> 00:20:37,520
the things you depend on like the linux

00:20:36,000 --> 00:20:38,080
distribution you're using for your base

00:20:37,520 --> 00:20:42,159
image

00:20:38,080 --> 00:20:44,080
um yeah version of python django

00:20:42,159 --> 00:20:45,919
numpy whatever libraries you use there's

00:20:44,080 --> 00:20:48,559
probably not going to be a major release

00:20:45,919 --> 00:20:50,880
and so if you're saying uh just install

00:20:48,559 --> 00:20:52,960
the latest version of everything

00:20:50,880 --> 00:20:54,559
that's fine like if you do it today and

00:20:52,960 --> 00:20:56,080
you do it yes if you did it yesterday

00:20:54,559 --> 00:20:59,200
then you'll get the same image

00:20:56,080 --> 00:21:00,720
more or less most of the time at least

00:20:59,200 --> 00:21:02,640
six months from now if you try to

00:21:00,720 --> 00:21:04,240
rebuild an image that installs the

00:21:02,640 --> 00:21:05,919
latest version of everything

00:21:04,240 --> 00:21:07,919
some of those dependencies will change

00:21:05,919 --> 00:21:10,000
if you try to rebuild it two years later

00:21:07,919 --> 00:21:11,679
all of them will have changed so the

00:21:10,000 --> 00:21:12,880
problem here is

00:21:11,679 --> 00:21:15,120
if you're always installing the latest

00:21:12,880 --> 00:21:16,240
version of the code you can rebuild

00:21:15,120 --> 00:21:17,919
you might go back to something that

00:21:16,240 --> 00:21:19,280
hasn't changed in six months you just

00:21:17,919 --> 00:21:20,480
want to do a minor bug fix and you

00:21:19,280 --> 00:21:22,240
rebuild the image

00:21:20,480 --> 00:21:23,520
and suddenly three major dependencies

00:21:22,240 --> 00:21:24,000
have changed and you've broken

00:21:23,520 --> 00:21:25,039
everything

00:21:24,000 --> 00:21:27,039
even though all you want to do is a

00:21:25,039 --> 00:21:30,080
major bug fix so

00:21:27,039 --> 00:21:31,120
over time once you you have a docker

00:21:30,080 --> 00:21:33,039
file you can using

00:21:31,120 --> 00:21:34,559
over time you want to make sure that

00:21:33,039 --> 00:21:35,440
it's reproducible

00:21:34,559 --> 00:21:37,520
you want to make sure that you're

00:21:35,440 --> 00:21:38,480
installing specific versions of specific

00:21:37,520 --> 00:21:40,480
packages

00:21:38,480 --> 00:21:41,760
physical linux distribution so when you

00:21:40,480 --> 00:21:42,400
rebuild the image you'll get the exact

00:21:41,760 --> 00:21:43,679
same image

00:21:42,400 --> 00:21:45,120
which isn't to say you shouldn't be

00:21:43,679 --> 00:21:47,280
doing updates you should but you should

00:21:45,120 --> 00:21:49,600
be doing those in a controlled manner

00:21:47,280 --> 00:21:52,000
not as a side effect of doing a minor

00:21:49,600 --> 00:21:53,760
bug fix

00:21:52,000 --> 00:21:55,360
so one example of the ways you should

00:21:53,760 --> 00:21:58,000
make your image reproducible is by

00:21:55,360 --> 00:22:00,960
choosing a good base image

00:21:58,000 --> 00:22:02,960
so docker images are typically based on

00:22:00,960 --> 00:22:04,480
some other docker image you use the from

00:22:02,960 --> 00:22:06,559
command at the beginning to say use this

00:22:04,480 --> 00:22:08,720
as my base image and typically they're

00:22:06,559 --> 00:22:10,240
based on some linux distribution

00:22:08,720 --> 00:22:12,799
and so you want a linux distribution

00:22:10,240 --> 00:22:14,000
that will guarantee things like security

00:22:12,799 --> 00:22:15,760
updates

00:22:14,000 --> 00:22:17,280
will also guarantee stability for some

00:22:15,760 --> 00:22:20,480
period of time so like

00:22:17,280 --> 00:22:22,080
two three years of

00:22:20,480 --> 00:22:23,760
guaranteeing bug fixes while not

00:22:22,080 --> 00:22:25,200
changing uh apis

00:22:23,760 --> 00:22:26,640
major version libraries that sort of

00:22:25,200 --> 00:22:27,760
thing like does that you want the linux

00:22:26,640 --> 00:22:29,679
distribution to

00:22:27,760 --> 00:22:30,960
be stable not change out from under you

00:22:29,679 --> 00:22:33,039
unexpectedly

00:22:30,960 --> 00:22:34,400
and so ubuntu long term supports debian

00:22:33,039 --> 00:22:35,360
stable or centos are all linux

00:22:34,400 --> 00:22:37,840
distributions

00:22:35,360 --> 00:22:38,559
that make the guarantee the official

00:22:37,840 --> 00:22:42,320
python

00:22:38,559 --> 00:22:44,640
docker images are based on debian stable

00:22:42,320 --> 00:22:46,159
by default but they also give you access

00:22:44,640 --> 00:22:47,760
to different versions of python not just

00:22:46,159 --> 00:22:50,000
the versions of debian stable happens to

00:22:47,760 --> 00:22:51,440
have so when python 3.9 comes out

00:22:50,000 --> 00:22:53,440
debbie and steven won't have it but the

00:22:51,440 --> 00:22:56,400
official python image will just take

00:22:53,440 --> 00:22:58,080
debian stable and add python 3.9 to it

00:22:56,400 --> 00:23:01,120
so i like using the official python

00:22:58,080 --> 00:23:02,159
images so for example python 3.9 slim

00:23:01,120 --> 00:23:04,400
muster

00:23:02,159 --> 00:23:05,280
is python 3.8 the latest point release

00:23:04,400 --> 00:23:07,919
so

00:23:05,280 --> 00:23:10,080
3.8.4 if that's the latest release 2.8.5

00:23:07,919 --> 00:23:11,760
if that's the latest point release

00:23:10,080 --> 00:23:13,440
on debian buster which is the latest

00:23:11,760 --> 00:23:15,280
version of debian stable

00:23:13,440 --> 00:23:16,320
and slim means a smaller version because

00:23:15,280 --> 00:23:17,039
there's like a smaller version the

00:23:16,320 --> 00:23:18,720
bigger version

00:23:17,039 --> 00:23:21,840
the bigger version just takes more disk

00:23:18,720 --> 00:23:22,240
space but has more debugging utilities

00:23:21,840 --> 00:23:25,760
um

00:23:22,240 --> 00:23:27,280
like um and

00:23:25,760 --> 00:23:29,760
if you use a stable base image you'll

00:23:27,280 --> 00:23:31,360
have more reproducible builds

00:23:29,760 --> 00:23:34,960
again lots of other things you need to

00:23:31,360 --> 00:23:34,960
do like pinning your python packages

00:23:35,440 --> 00:23:38,799
once you have reproducible builds your

00:23:37,280 --> 00:23:41,279
builds are correct your

00:23:38,799 --> 00:23:42,559
run time is correct in some sense you're

00:23:41,279 --> 00:23:44,000
done

00:23:42,559 --> 00:23:46,559
but at that point you might want to

00:23:44,000 --> 00:23:48,159
start uh

00:23:46,559 --> 00:23:49,600
thinking about some optimizations it's

00:23:48,159 --> 00:23:50,799
correct but you might be able to make

00:23:49,600 --> 00:23:52,799
things more efficient

00:23:50,799 --> 00:23:55,039
a good starting point is faster builds

00:23:52,799 --> 00:23:56,640
because your time is expensive and if

00:23:55,039 --> 00:23:58,720
every time you do a build it takes 30

00:23:56,640 --> 00:24:00,880
minutes to build your docker image

00:23:58,720 --> 00:24:02,400
you can't see if your tests are passing

00:24:00,880 --> 00:24:04,240
until that bill passes

00:24:02,400 --> 00:24:06,559
just slowing you down wasting your time

00:24:04,240 --> 00:24:08,320
wasting your teammates time

00:24:06,559 --> 00:24:10,880
um so it's worth spending some time

00:24:08,320 --> 00:24:12,799
optimizing build times

00:24:10,880 --> 00:24:15,360
and one best practice for making faster

00:24:12,799 --> 00:24:17,279
builds is avoid using alpine linux

00:24:15,360 --> 00:24:19,679
alpha linux is a linux distribution and

00:24:17,279 --> 00:24:21,520
it's a small linux distribution

00:24:19,679 --> 00:24:22,799
makes for smaller images and so it's

00:24:21,520 --> 00:24:25,600
often recommended

00:24:22,799 --> 00:24:26,559
as a base image for docker images if

00:24:25,600 --> 00:24:29,279
you're a go programmer

00:24:26,559 --> 00:24:30,640
it's a fine advice if you're a python

00:24:29,279 --> 00:24:33,120
programmer you should not use it as your

00:24:30,640 --> 00:24:34,799
base image the issue is that

00:24:33,120 --> 00:24:36,480
when you're if you're a package

00:24:34,799 --> 00:24:39,360
maintainer who uploads packages to pi

00:24:36,480 --> 00:24:39,679
pi you can upload pre-compiled binaries

00:24:39,360 --> 00:24:41,919
like

00:24:39,679 --> 00:24:43,520
linux macos windows and then someone who

00:24:41,919 --> 00:24:45,600
downloads that

00:24:43,520 --> 00:24:46,640
binary doesn't have to compile the c

00:24:45,600 --> 00:24:48,080
code in the package

00:24:46,640 --> 00:24:50,320
lots of python packages you have lots of

00:24:48,080 --> 00:24:50,960
c code and so not having to compile the

00:24:50,320 --> 00:24:53,279
packages

00:24:50,960 --> 00:24:55,279
saves lots of time installing them

00:24:53,279 --> 00:24:57,600
alpine cannot use binary wheels from

00:24:55,279 --> 00:25:00,400
pipi these days at least

00:24:57,600 --> 00:25:01,919
that might change in the future so just

00:25:00,400 --> 00:25:04,159
to compare if you install pandas and

00:25:01,919 --> 00:25:06,960
matlab on my computer if you use

00:25:04,159 --> 00:25:08,240
the debian based official image python

00:25:06,960 --> 00:25:10,240
3.8 slimbuster

00:25:08,240 --> 00:25:11,279
installs in 30 seconds it just downloads

00:25:10,240 --> 00:25:13,360
it

00:25:11,279 --> 00:25:15,440
unpacks it it's done if you're using the

00:25:13,360 --> 00:25:17,120
alpine variant it takes 1500 seconds

00:25:15,440 --> 00:25:19,200
it's 50 times slower because it has to

00:25:17,120 --> 00:25:21,600
compile a whole pile c code

00:25:19,200 --> 00:25:22,880
has to install a compiler and compiler

00:25:21,600 --> 00:25:24,880
tool chain it's just

00:25:22,880 --> 00:25:28,240
much much slower so if you want fast

00:25:24,880 --> 00:25:30,720
builds don't use alpine linux and then

00:25:28,240 --> 00:25:32,400
plenty of other best practices

00:25:30,720 --> 00:25:35,200
the final step is making your image

00:25:32,400 --> 00:25:38,320
smaller having a 2 gigabyte images waste

00:25:35,200 --> 00:25:38,320
bandwidth waste time

00:25:38,480 --> 00:25:43,440
might be worth optimizing that part

00:25:41,600 --> 00:25:44,720
one example of best practice out of many

00:25:43,440 --> 00:25:47,120
is

00:25:44,720 --> 00:25:48,720
typically when uh pip pip installs

00:25:47,120 --> 00:25:51,440
something let's say pip install

00:25:48,720 --> 00:25:53,039
uh pandas or django it downloads the

00:25:51,440 --> 00:25:55,120
django package

00:25:53,039 --> 00:25:56,640
unzips it or untires it and then keeps

00:25:55,120 --> 00:25:57,440
that package around so that if you pip

00:25:56,640 --> 00:25:59,679
install later

00:25:57,440 --> 00:26:00,799
you won't have to download it again in a

00:25:59,679 --> 00:26:02,559
docker image you're never going to run

00:26:00,799 --> 00:26:04,000
pip install again so keeping this extra

00:26:02,559 --> 00:26:06,320
copy of the package around just

00:26:04,000 --> 00:26:07,039
waste space so if you add the no cached

00:26:06,320 --> 00:26:09,120
air

00:26:07,039 --> 00:26:10,400
option to pip install you'll end up with

00:26:09,120 --> 00:26:13,679
a smaller docker image

00:26:10,400 --> 00:26:14,880
and then with no harm done because

00:26:13,679 --> 00:26:17,120
you're never going to run pip install

00:26:14,880 --> 00:26:17,120
again

00:26:17,279 --> 00:26:21,120
again plenty of other best practices to

00:26:20,240 --> 00:26:22,720
recap

00:26:21,120 --> 00:26:24,320
you start getting something working make

00:26:22,720 --> 00:26:26,640
it secure make it automated

00:26:24,320 --> 00:26:28,400
make things easier to identify debug and

00:26:26,640 --> 00:26:30,159
easier and run better

00:26:28,400 --> 00:26:31,840
make builds reproducible and then

00:26:30,159 --> 00:26:32,960
optimize with faster builds and smaller

00:26:31,840 --> 00:26:35,039
images

00:26:32,960 --> 00:26:37,520
the goal here is to have some good

00:26:35,039 --> 00:26:39,279
stopping points if you do security first

00:26:37,520 --> 00:26:40,640
if you stop right after doing security

00:26:39,279 --> 00:26:42,320
at least you have a secure image if you

00:26:40,640 --> 00:26:43,039
mix up security and make your images

00:26:42,320 --> 00:26:44,559
smaller

00:26:43,039 --> 00:26:47,039
you might have a half secure image which

00:26:44,559 --> 00:26:50,240
isn't ideal if you're forced to stop

00:26:47,039 --> 00:26:52,080
and again your particular

00:26:50,240 --> 00:26:53,840
application environment might result in

00:26:52,080 --> 00:26:56,320
different priorities so this is

00:26:53,840 --> 00:26:56,880
just a suggested starting point for how

00:26:56,320 --> 00:26:58,400
you should

00:26:56,880 --> 00:27:00,320
the order in which you should work on

00:26:58,400 --> 00:27:01,279
your docker image your application might

00:27:00,320 --> 00:27:03,120
be different but this

00:27:01,279 --> 00:27:04,799
i think is a reasonable starting point

00:27:03,120 --> 00:27:08,080
and a reasonable way to remember

00:27:04,799 --> 00:27:08,080
all the different things that go into it

00:27:08,480 --> 00:27:12,720
so thanks for coming to my talk as i

00:27:11,200 --> 00:27:13,600
said many of these best practices are

00:27:12,720 --> 00:27:15,279
covered in

00:27:13,600 --> 00:27:17,279
great detail on the free guide on my

00:27:15,279 --> 00:27:18,640
website and

00:27:17,279 --> 00:27:20,880
there's links to that guide and other

00:27:18,640 --> 00:27:22,080
resources for python docker packaging as

00:27:20,880 --> 00:27:23,360
well these

00:27:22,080 --> 00:27:26,399
as well as these slides at

00:27:23,360 --> 00:27:29,200
pythonspeed.com europepython2020

00:27:26,399 --> 00:27:30,720
here's my email and twitter account um

00:27:29,200 --> 00:27:32,880
if you have any questions

00:27:30,720 --> 00:27:35,120
i believe there's a talk channel in

00:27:32,880 --> 00:27:38,799
discord for the stock

00:27:35,120 --> 00:27:40,799
talk dash docker dash packaging

00:27:38,799 --> 00:27:42,159
and we might have time for a question or

00:27:40,799 --> 00:27:43,600
two

00:27:42,159 --> 00:27:46,559
yeah thank you very much for the talk

00:27:43,600 --> 00:27:48,799
first and there's a few questions

00:27:46,559 --> 00:27:50,159
and the first one is can you give an

00:27:48,799 --> 00:27:52,159
example for

00:27:50,159 --> 00:27:55,919
install dependencies separately from

00:27:52,159 --> 00:27:59,679
your code as in your best practice

00:27:55,919 --> 00:28:05,200
yes so the way um docker packaging works

00:27:59,679 --> 00:28:06,799
is uh install things in layers

00:28:05,200 --> 00:28:09,039
so each line in your docker file to

00:28:06,799 --> 00:28:12,720
first approximation is a layer

00:28:09,039 --> 00:28:15,039
and docker has this caching system where

00:28:12,720 --> 00:28:17,039
when you rebuild an image you'll say if

00:28:15,039 --> 00:28:19,679
this layer hasn't changed

00:28:17,039 --> 00:28:23,679
i don't have to rebuild it and the way

00:28:19,679 --> 00:28:23,679
it decides if it's changed is based on

00:28:24,399 --> 00:28:27,760
either the text of the command or the

00:28:25,840 --> 00:28:29,440
files you copied in

00:28:27,760 --> 00:28:31,039
and so if you install both your code and

00:28:29,440 --> 00:28:33,360
your dependencies together that means

00:28:31,039 --> 00:28:35,600
you have to copy in

00:28:33,360 --> 00:28:36,480
everything and then install your

00:28:35,600 --> 00:28:38,559
dependencies

00:28:36,480 --> 00:28:40,720
and you know pandas and method and

00:28:38,559 --> 00:28:43,600
django and flask and what have you

00:28:40,720 --> 00:28:46,080
and your code at the same time and so if

00:28:43,600 --> 00:28:48,159
you change your source code

00:28:46,080 --> 00:28:50,640
that's going to invalidate the cache and

00:28:48,159 --> 00:28:52,000
you're going to have to rebuild

00:28:50,640 --> 00:28:54,159
you're going to have to reinstall all

00:28:52,000 --> 00:28:55,840
your dependencies so even though

00:28:54,159 --> 00:28:57,200
like you're still installing the exact

00:28:55,840 --> 00:28:58,799
same packages you're still installing

00:28:57,200 --> 00:29:01,200
the exact same version of django

00:28:58,799 --> 00:29:02,559
exact same version of your postgres

00:29:01,200 --> 00:29:06,640
adapter and

00:29:02,559 --> 00:29:07,919
so on you're still gonna have to um

00:29:06,640 --> 00:29:09,840
you can't use the cache you're gonna

00:29:07,919 --> 00:29:11,360
have to redo that from scratch

00:29:09,840 --> 00:29:13,360
if however instead of copying all the

00:29:11,360 --> 00:29:15,240
files and installing things

00:29:13,360 --> 00:29:16,799
together you first copy in

00:29:15,240 --> 00:29:18,640
requirements.txt

00:29:16,799 --> 00:29:20,640
and then do run pip install minus

00:29:18,640 --> 00:29:24,000
requirements at text

00:29:20,640 --> 00:29:26,399
then the caching layer

00:29:24,000 --> 00:29:28,240
you can say oh are text has been changed

00:29:26,399 --> 00:29:30,159
so i can just reuse this

00:29:28,240 --> 00:29:31,120
uh layer and then your build will be

00:29:30,159 --> 00:29:32,720
faster because you won't have to

00:29:31,120 --> 00:29:34,399
reinstall those packages

00:29:32,720 --> 00:29:36,080
every time your source code changes only

00:29:34,399 --> 00:29:39,200
you have to reinstall those packages

00:29:36,080 --> 00:29:41,600
on requirements and text changes

00:29:39,200 --> 00:29:42,399
okay there's a question about the

00:29:41,600 --> 00:29:45,520
compile

00:29:42,399 --> 00:29:48,080
all idea how does python minus m

00:29:45,520 --> 00:29:48,880
compile all interact with python code

00:29:48,080 --> 00:29:52,480
that uses

00:29:48,880 --> 00:29:54,480
the uh done domain pi uh

00:29:52,480 --> 00:29:55,520
that's from goose he says we often have

00:29:54,480 --> 00:29:59,279
two words like

00:29:55,520 --> 00:30:01,600
run like python minus m my two arguments

00:29:59,279 --> 00:30:03,120
so how would that compile all work there

00:30:01,600 --> 00:30:05,440
uh

00:30:03,120 --> 00:30:07,200
i believe compile and i could be wrong

00:30:05,440 --> 00:30:09,600
but my understanding of how compile

00:30:07,200 --> 00:30:10,399
all works is it just finds all that py

00:30:09,600 --> 00:30:11,919
files

00:30:10,399 --> 00:30:13,440
parses them and writes out the byte code

00:30:11,919 --> 00:30:15,200
so it's not running them

00:30:13,440 --> 00:30:17,039
it's just parsing them so it's just it's

00:30:15,200 --> 00:30:19,679
just a file system operation it just

00:30:17,039 --> 00:30:21,840
finds all dot py files

00:30:19,679 --> 00:30:23,520
so it doesn't matter how you run the

00:30:21,840 --> 00:30:24,799
code just matters what files you have in

00:30:23,520 --> 00:30:26,880
the file system

00:30:24,799 --> 00:30:28,480
if you have installed your code you

00:30:26,880 --> 00:30:30,880
typically don't need it because

00:30:28,480 --> 00:30:32,399
pip will by default compile things for

00:30:30,880 --> 00:30:35,679
you

00:30:32,399 --> 00:30:37,440
okay thank you that's the final question

00:30:35,679 --> 00:30:39,279
what kind of security testing would you

00:30:37,440 --> 00:30:42,240
recommend for docker images

00:30:39,279 --> 00:30:44,159
any good tools packages uh there's a

00:30:42,240 --> 00:30:46,559
bunch of

00:30:44,159 --> 00:30:50,159
security scanners there's bandit which

00:30:46,559 --> 00:30:51,760
is a security scanner for source code

00:30:50,159 --> 00:30:53,919
for python source codes you'll find

00:30:51,760 --> 00:30:55,200
things like sql injections and use of

00:30:53,919 --> 00:30:58,399
pickle

00:30:55,200 --> 00:31:00,480
there's a tool called

00:30:58,399 --> 00:31:01,600
command line tool called safety that

00:31:00,480 --> 00:31:03,600
will scan for

00:31:01,600 --> 00:31:04,799
insecure python dependencies although

00:31:03,600 --> 00:31:06,559
you have to pay them

00:31:04,799 --> 00:31:08,399
if you want more than like it's a

00:31:06,559 --> 00:31:08,799
commercial tool so by default you only

00:31:08,399 --> 00:31:12,320
get the

00:31:08,799 --> 00:31:13,519
up to one month last month of updates uh

00:31:12,320 --> 00:31:14,960
the updates can be as much as a month

00:31:13,519 --> 00:31:16,880
out of date so you have to pay them if

00:31:14,960 --> 00:31:20,080
you want more timely security updates

00:31:16,880 --> 00:31:21,840
there's a tool called trevi t-r-i-v-y

00:31:20,080 --> 00:31:24,960
which will do scans on your system

00:31:21,840 --> 00:31:26,960
packages again if you go to my

00:31:24,960 --> 00:31:30,000
website to the area about doctor

00:31:26,960 --> 00:31:30,000
packaging i have a

00:31:30,880 --> 00:31:37,840
article about um

00:31:34,240 --> 00:31:40,880
security scanners for docker packages

00:31:37,840 --> 00:31:44,080
okay thank you very much uh so

00:31:40,880 --> 00:31:45,600
at this point uh it was very useful and

00:31:44,080 --> 00:31:47,679
we have to thank you for all these

00:31:45,600 --> 00:31:50,080
tips that we can use in our real life so

00:31:47,679 --> 00:31:52,720
here's a round of virtual blogs for you

00:31:50,080 --> 00:31:54,720
and i hope you're going to find people

00:31:52,720 --> 00:32:01,110
abroad in the

00:31:54,720 --> 00:32:05,679
discord talk channel as well

00:32:01,110 --> 00:32:07,760
[Applause]

00:32:05,679 --> 00:32:07,760

YouTube URL: https://www.youtube.com/watch?v=H0UPw-ILiz4


