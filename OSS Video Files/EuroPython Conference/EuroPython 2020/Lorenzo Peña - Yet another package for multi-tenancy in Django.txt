Title: Lorenzo Peña - Yet another package for multi-tenancy in Django
Publication date: 2020-09-15
Playlist: EuroPython 2020
Description: 
	"Yet another package for multi-tenancy in Django
EuroPython 2020 - Talk - 2020-07-23 - Brian
Online

By Lorenzo Peña

Django is a popular, solid web framework for perfectionists with deadlines, with a wide ecosystem of packages that extend its powers in multiple directions. In the era of peaking popularity of Node/Deno, microservices, and heavyweight browser rendered webapps, Django still remains a triumphant monolith maker, very capable of major undertakings in the web arena.

For all you Django-lovers out there, it seems to me like a matter of time before you have to do some form of multi-tenancy in Django. Taking a solution that works well for one tenant and extending it to multiple tenants should still be a problem for perfectionists with deadlines. Interestingly, when it comes to covering all the many facets of multi-tenancy, Django can be not so batteries included, as one might end up working around or 'hacking' the framework in order to get things done.

In this talk I will walk you through the challenges of bringing multi-tenancy to a Django project. We'll cover the fundamental plumbing required to make it work reliably, securely, and elegantly. You will be expected to have a basic knowledge of Django (models, settings, users, URL reversing), and you will learn the working logic behind popular multi-tenancy packages like a href=""https://github.com/bernardopires/django-tenant-schemas""django-tenant-schemas/a and a href=""https://github.com/tomturner/django-tenants""django-tenants/a.



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2020.europython.eu/events/speaker-release-agreement/

    "
Captions: 
	00:00:06,640 --> 00:00:11,200
okay

00:00:07,200 --> 00:00:13,440
so lorenz is joining us from cuba

00:00:11,200 --> 00:00:16,160
this is your first era python lorenzo

00:00:13,440 --> 00:00:18,320
yeah my first euro python ever cool

00:00:16,160 --> 00:00:20,240
welcome it's also for me it's also my

00:00:18,320 --> 00:00:20,960
first server python so my first python

00:00:20,240 --> 00:00:23,760
conference

00:00:20,960 --> 00:00:25,760
but it's my first server python so thank

00:00:23,760 --> 00:00:28,400
you very much for presenting

00:00:25,760 --> 00:00:29,199
uh a reminder for everyone you can ask

00:00:28,400 --> 00:00:30,890
questions in

00:00:29,199 --> 00:00:32,399
a q a and

00:00:30,890 --> 00:00:36,000
[Music]

00:00:32,399 --> 00:00:36,000
and i will ask those questions

00:00:36,079 --> 00:00:43,040
after the talk the this talk is

00:00:39,920 --> 00:00:46,160
30 minutes so lorenzo

00:00:43,040 --> 00:00:47,120
all yours you're ready to go well thank

00:00:46,160 --> 00:00:49,360
you so much

00:00:47,120 --> 00:00:50,239
and good afternoon or good night good

00:00:49,360 --> 00:00:52,320
morning

00:00:50,239 --> 00:00:54,719
thank you for joining me today in this

00:00:52,320 --> 00:00:56,800
journey to discover yet another package

00:00:54,719 --> 00:00:59,120
for multi-tenancy in django

00:00:56,800 --> 00:01:00,960
my name is lorenzo pena that's my handle

00:00:59,120 --> 00:01:03,359
where you can find me pretty much

00:01:00,960 --> 00:01:05,280
everywhere i have been a software

00:01:03,359 --> 00:01:08,000
developer for over a decade

00:01:05,280 --> 00:01:09,920
and i have around 11 years of experience

00:01:08,000 --> 00:01:12,000
in django with around three packages in

00:01:09,920 --> 00:01:13,360
the pipe registry

00:01:12,000 --> 00:01:15,840
so i hope you're having a great time in

00:01:13,360 --> 00:01:17,360
this online version of your python 2020

00:01:15,840 --> 00:01:18,799
and i hope as long as my connection

00:01:17,360 --> 00:01:21,360
behaves properly

00:01:18,799 --> 00:01:23,280
that you're going to enjoy this talk as

00:01:21,360 --> 00:01:25,280
well

00:01:23,280 --> 00:01:27,520
so yet another package for multi-tenancy

00:01:25,280 --> 00:01:28,640
in django let's play this title kind of

00:01:27,520 --> 00:01:31,200
backwards

00:01:28,640 --> 00:01:32,960
and let's begin with tjango and firstly

00:01:31,200 --> 00:01:35,280
let's get all on the same page in that

00:01:32,960 --> 00:01:39,439
2020 has gotten a little bit

00:01:35,280 --> 00:01:43,840
out of control yeah and with the race of

00:01:39,439 --> 00:01:45,759
3 future is uncertain in some aspects

00:01:43,840 --> 00:01:47,759
you know probably we're thinking whether

00:01:45,759 --> 00:01:49,680
we're going to be keeping our jobs

00:01:47,759 --> 00:01:51,439
by the end of the year but i honestly

00:01:49,680 --> 00:01:53,280
think we don't have to be

00:01:51,439 --> 00:01:55,119
worried too much worried about it

00:01:53,280 --> 00:01:58,000
because why we are python it's

00:01:55,119 --> 00:01:58,399
nistas and djangonauts and we are in the

00:01:58,000 --> 00:02:00,479
world

00:01:58,399 --> 00:02:02,640
of django the web framework for

00:02:00,479 --> 00:02:04,880
perfectionists with deadlines

00:02:02,640 --> 00:02:06,079
we just turned 15 years old which is a

00:02:04,880 --> 00:02:08,959
great milestone

00:02:06,079 --> 00:02:10,479
is mature solid and battle tested it has

00:02:08,959 --> 00:02:11,760
an amazing community and a great

00:02:10,479 --> 00:02:14,080
momentum and

00:02:11,760 --> 00:02:16,480
is getting stronger than ever with more

00:02:14,080 --> 00:02:18,640
async and reactivity as of late

00:02:16,480 --> 00:02:19,520
so just in case you're wondering whether

00:02:18,640 --> 00:02:21,599
it's still a valid

00:02:19,520 --> 00:02:23,680
investment to be thinking in django and

00:02:21,599 --> 00:02:25,920
multi-tenancy as of 2020

00:02:23,680 --> 00:02:28,000
i think it is and i think django can

00:02:25,920 --> 00:02:30,879
perfectly handle

00:02:28,000 --> 00:02:32,400
the rest of the year and the upcoming

00:02:30,879 --> 00:02:34,000
decade and provide for you

00:02:32,400 --> 00:02:36,800
and for me and we are actually rooting

00:02:34,000 --> 00:02:39,840
for it so multi-tenancy

00:02:36,800 --> 00:02:41,120
what is exactly multi-tenancy let's play

00:02:39,840 --> 00:02:42,959
by an example

00:02:41,120 --> 00:02:44,640
suppose there is a customer read which

00:02:42,959 --> 00:02:46,319
has a problem

00:02:44,640 --> 00:02:48,400
and you develop a solution for that

00:02:46,319 --> 00:02:50,400
customer your deploying solution is

00:02:48,400 --> 00:02:52,239
working great but now customers blue

00:02:50,400 --> 00:02:55,040
green and yellow have exactly

00:02:52,239 --> 00:02:56,800
the same problem so what to do you have

00:02:55,040 --> 00:02:59,120
a solution that is already working for

00:02:56,800 --> 00:03:01,040
the customer read

00:02:59,120 --> 00:03:03,040
there are two things you could do you

00:03:01,040 --> 00:03:04,239
could just copy and paste that solution

00:03:03,040 --> 00:03:07,360
and provide multiple

00:03:04,239 --> 00:03:09,599
sync and single tenant solutions

00:03:07,360 --> 00:03:11,120
or you could make the jump into a

00:03:09,599 --> 00:03:13,120
multi-tenant solution which is

00:03:11,120 --> 00:03:14,640
single instance of the software that can

00:03:13,120 --> 00:03:16,959
provide for the needs of

00:03:14,640 --> 00:03:18,400
all your customers that's exactly what

00:03:16,959 --> 00:03:20,400
multi-tenancy is

00:03:18,400 --> 00:03:24,159
is the software architecture in which a

00:03:20,400 --> 00:03:24,159
single instance of the software

00:03:24,560 --> 00:03:28,000
serves multiple tenants and as an

00:03:27,440 --> 00:03:30,840
example

00:03:28,000 --> 00:03:32,560
you can see dropbox shopify slack and

00:03:30,840 --> 00:03:34,959
wordpress

00:03:32,560 --> 00:03:36,640
so what are tenants well tenants are the

00:03:34,959 --> 00:03:39,440
isolated spaces in which

00:03:36,640 --> 00:03:41,360
users with specific privileges interact

00:03:39,440 --> 00:03:44,000
there is the accounts of dropbox

00:03:41,360 --> 00:03:45,280
workspaces at slack blocks in wordpress

00:03:44,000 --> 00:03:47,599
servers at discord

00:03:45,280 --> 00:03:48,400
stores at shopify or sites slash

00:03:47,599 --> 00:03:51,519
communities

00:03:48,400 --> 00:03:54,080
as stack exchange so all shipping goods

00:03:51,519 --> 00:03:56,879
so far now how do we actually get to

00:03:54,080 --> 00:03:58,799
implement multi-tenancy in django

00:03:56,879 --> 00:04:00,400
well one does not simply add it to the

00:03:58,799 --> 00:04:01,920
project why because if you want to

00:04:00,400 --> 00:04:03,040
implement it from scratch there's a

00:04:01,920 --> 00:04:04,959
number of things to do

00:04:03,040 --> 00:04:06,640
and do right and even if you're going to

00:04:04,959 --> 00:04:08,080
use any of the existing packages out

00:04:06,640 --> 00:04:10,319
there it takes some knowledge to

00:04:08,080 --> 00:04:11,920
properly decide and determine

00:04:10,319 --> 00:04:14,000
which one is going to be suitable for

00:04:11,920 --> 00:04:16,959
your needs

00:04:14,000 --> 00:04:18,560
so about this thing of packages will you

00:04:16,959 --> 00:04:21,120
actually end up needing

00:04:18,560 --> 00:04:22,160
a package for multi-tenancy well most

00:04:21,120 --> 00:04:24,880
likely yes

00:04:22,160 --> 00:04:26,960
and there are many of them i made one of

00:04:24,880 --> 00:04:28,560
those i contributed towards the entropy

00:04:26,960 --> 00:04:30,240
which is kind of a four actually with

00:04:28,560 --> 00:04:32,400
some conceptual changes

00:04:30,240 --> 00:04:33,360
but the truth is that there is no one

00:04:32,400 --> 00:04:35,360
size fits all

00:04:33,360 --> 00:04:37,199
packages tend to be very opinionated in

00:04:35,360 --> 00:04:38,240
a number of architectural decisions that

00:04:37,199 --> 00:04:40,560
need to be taken

00:04:38,240 --> 00:04:41,360
and so there is no silver bullet for us

00:04:40,560 --> 00:04:44,479
when selecting

00:04:41,360 --> 00:04:46,160
packages for multi-tenancy so am i

00:04:44,479 --> 00:04:48,160
really going to give you jet another

00:04:46,160 --> 00:04:49,600
package for multi-tenancy in django well

00:04:48,160 --> 00:04:51,360
not exactly

00:04:49,600 --> 00:04:53,440
instead we're going to take a look at

00:04:51,360 --> 00:04:55,280
the building blocks the pieces that form

00:04:53,440 --> 00:04:55,840
the foundation of multi-tenancy in

00:04:55,280 --> 00:04:57,840
django

00:04:55,840 --> 00:04:59,440
itself and instead of taking a

00:04:57,840 --> 00:05:01,360
package-first approach we're going to be

00:04:59,440 --> 00:05:03,440
taking acknowledge first approach

00:05:01,360 --> 00:05:05,280
we're going to be pretending that we are

00:05:03,440 --> 00:05:07,840
implementing multi-tenancy from scratch

00:05:05,280 --> 00:05:08,720
without actually doing and i hope with

00:05:07,840 --> 00:05:11,120
this knowledge

00:05:08,720 --> 00:05:11,919
you will be able to select understand

00:05:11,120 --> 00:05:14,720
debug to

00:05:11,919 --> 00:05:15,840
contribute back to just any existing

00:05:14,720 --> 00:05:18,639
package

00:05:15,840 --> 00:05:18,960
so this is not just yet another package

00:05:18,639 --> 00:05:20,880
this

00:05:18,960 --> 00:05:22,720
is the package to rule every other

00:05:20,880 --> 00:05:24,639
package and if you think of it

00:05:22,720 --> 00:05:27,280
it could actually be the ultimate

00:05:24,639 --> 00:05:29,759
package so my dear audience i give you

00:05:27,280 --> 00:05:32,320
the ultimate package for multi-tenancy

00:05:29,759 --> 00:05:32,320
in django

00:05:33,440 --> 00:05:37,840
i hope you're ready to get your hands

00:05:36,080 --> 00:05:40,320
happily dirty in the concepts and

00:05:37,840 --> 00:05:42,320
notions we are about to cover right away

00:05:40,320 --> 00:05:44,880
and the first of these notions is the

00:05:42,320 --> 00:05:47,360
concept of the active tenant

00:05:44,880 --> 00:05:49,120
suppose we are inside stack exchange in

00:05:47,360 --> 00:05:49,840
some of the internal sites and we run

00:05:49,120 --> 00:05:54,000
this query

00:05:49,840 --> 00:05:56,080
question objects all okay but where

00:05:54,000 --> 00:05:57,280
are we expecting to get questions from

00:05:56,080 --> 00:05:58,560
because stack a chain is too big it

00:05:57,280 --> 00:06:00,639
could be stack overflow

00:05:58,560 --> 00:06:01,759
it could be server fall super user maybe

00:06:00,639 --> 00:06:03,440
area 51

00:06:01,759 --> 00:06:06,080
so welcome to this new concept the

00:06:03,440 --> 00:06:07,919
active tenant and the idea is that

00:06:06,080 --> 00:06:09,680
one tenon has to be the active tenon and

00:06:07,919 --> 00:06:11,280
the framework needs to be aware that

00:06:09,680 --> 00:06:11,600
it's going to be operate operating in

00:06:11,280 --> 00:06:13,919
this

00:06:11,600 --> 00:06:15,280
scope even in database access url

00:06:13,919 --> 00:06:17,360
reversing admin site

00:06:15,280 --> 00:06:18,560
cache pretty much every part of the

00:06:17,360 --> 00:06:20,000
framework but notice

00:06:18,560 --> 00:06:22,160
that this has to be in place even

00:06:20,000 --> 00:06:23,520
outside the request response cycle

00:06:22,160 --> 00:06:25,680
because we have things here like

00:06:23,520 --> 00:06:27,759
management commands and salary tasks

00:06:25,680 --> 00:06:30,639
where you don't have a request object to

00:06:27,759 --> 00:06:32,800
interrogate for the active tenant

00:06:30,639 --> 00:06:34,080
django has a couple of apis currently

00:06:32,800 --> 00:06:36,000
that you're probably familiar

00:06:34,080 --> 00:06:37,840
with where there is this notion of the

00:06:36,000 --> 00:06:38,639
active something it's the time zone and

00:06:37,840 --> 00:06:39,919
language

00:06:38,639 --> 00:06:41,919
and you probably know these couple of

00:06:39,919 --> 00:06:44,080
functions get current and activate where

00:06:41,919 --> 00:06:44,400
you don't have to be using a request at

00:06:44,080 --> 00:06:46,319
all

00:06:44,400 --> 00:06:48,000
so we could take some inspiration in

00:06:46,319 --> 00:06:49,680
this and actually create

00:06:48,000 --> 00:06:51,199
a couple of functions get current tenant

00:06:49,680 --> 00:06:53,520
and activate tenant so that

00:06:51,199 --> 00:06:55,039
we are able to enter the scope of a

00:06:53,520 --> 00:06:56,639
tenant by activating it

00:06:55,039 --> 00:06:58,240
and then retrieving the active tenant

00:06:56,639 --> 00:07:00,800
further on

00:06:58,240 --> 00:07:01,919
this is a possible implementation of the

00:07:00,800 --> 00:07:05,440
active tenon

00:07:01,919 --> 00:07:07,039
notice we're using here ascii ref local

00:07:05,440 --> 00:07:08,720
which is a drop in replacement from

00:07:07,039 --> 00:07:10,880
trading locals but uh

00:07:08,720 --> 00:07:12,639
without getting uh too deep this is

00:07:10,880 --> 00:07:14,160
actually a global variable

00:07:12,639 --> 00:07:15,680
that is thread safe but it's still a

00:07:14,160 --> 00:07:17,280
global variable and

00:07:15,680 --> 00:07:18,720
the use of globals is generally

00:07:17,280 --> 00:07:21,120
discouraged

00:07:18,720 --> 00:07:23,199
why well there is a reason why this

00:07:21,120 --> 00:07:24,400
pattern is actually so scar in django

00:07:23,199 --> 00:07:26,400
code base itself

00:07:24,400 --> 00:07:28,479
and the reason is that the more you

00:07:26,400 --> 00:07:30,080
depend on globals the more coppo becomes

00:07:28,479 --> 00:07:31,919
your code the harder to test

00:07:30,080 --> 00:07:33,840
in isolation and therefore it's not

00:07:31,919 --> 00:07:34,960
super recommended and django hasn't

00:07:33,840 --> 00:07:37,199
followed this pattern

00:07:34,960 --> 00:07:38,960
except when it's absolutely necessary so

00:07:37,199 --> 00:07:41,360
in this case i would consider

00:07:38,960 --> 00:07:42,479
that this would be a perfectly valid

00:07:41,360 --> 00:07:44,080
case for this

00:07:42,479 --> 00:07:45,919
but it would be a pattern that is

00:07:44,080 --> 00:07:47,919
frowned upon otherwise so please

00:07:45,919 --> 00:07:51,599
don't go out of this stuff just creating

00:07:47,919 --> 00:07:51,599
globals for the sake of it

00:07:53,360 --> 00:07:56,800
so there are two important questions

00:07:54,960 --> 00:07:58,720
about the active tenant and those are

00:07:56,800 --> 00:07:59,919
what is the type of a tenant object when

00:07:58,720 --> 00:08:01,840
we get and set

00:07:59,919 --> 00:08:03,680
a tenant as the active tenant what type

00:08:01,840 --> 00:08:05,520
of object we're working with

00:08:03,680 --> 00:08:07,039
and the other question is what happens

00:08:05,520 --> 00:08:08,879
if for some operation

00:08:07,039 --> 00:08:11,440
there is just no active tenant is that a

00:08:08,879 --> 00:08:13,599
buck is that a possible situation is

00:08:11,440 --> 00:08:13,840
that a wild card scenario in which you

00:08:13,599 --> 00:08:17,440
are

00:08:13,840 --> 00:08:19,280
actually hoping to run the operation in

00:08:17,440 --> 00:08:20,639
multiple tenants so these are all valid

00:08:19,280 --> 00:08:21,599
questions but it's more of food for

00:08:20,639 --> 00:08:24,639
thought

00:08:21,599 --> 00:08:26,160
so as as we get settled this concept of

00:08:24,639 --> 00:08:28,080
the active tenant there are three

00:08:26,160 --> 00:08:28,560
architectural choices that we need to

00:08:28,080 --> 00:08:30,160
make

00:08:28,560 --> 00:08:32,000
and these three architectural choices

00:08:30,160 --> 00:08:33,039
are users and tenants database

00:08:32,000 --> 00:08:36,399
architecture and

00:08:33,039 --> 00:08:38,479
tenant routing regarding user

00:08:36,399 --> 00:08:40,479
users and tenants there are three types

00:08:38,479 --> 00:08:42,719
of relationships between these

00:08:40,479 --> 00:08:45,200
one is the type in which users exist

00:08:42,719 --> 00:08:47,120
outside the context of tenants that is

00:08:45,200 --> 00:08:48,560
you can have tenants you can have users

00:08:47,120 --> 00:08:49,040
there could be relationships between

00:08:48,560 --> 00:08:51,120
them

00:08:49,040 --> 00:08:52,959
but this relationship is kind of loose

00:08:51,120 --> 00:08:55,600
non-strict an example

00:08:52,959 --> 00:08:57,839
wordpress shopify and discord another

00:08:55,600 --> 00:08:59,519
type is the one in which users are bound

00:08:57,839 --> 00:09:01,120
and constrained within the scope and the

00:08:59,519 --> 00:09:03,440
context of a tenant

00:09:01,120 --> 00:09:04,959
the perfect example is lack where you

00:09:03,440 --> 00:09:06,560
cannot think of a user outside the

00:09:04,959 --> 00:09:08,640
concept of a workspace

00:09:06,560 --> 00:09:10,399
and if there is a third type in which

00:09:08,640 --> 00:09:13,279
users and tenants are pretty much

00:09:10,399 --> 00:09:15,920
the same thing and this is uh an example

00:09:13,279 --> 00:09:17,680
of this is gmail dropbox and the like

00:09:15,920 --> 00:09:19,519
so which one to pick it will completely

00:09:17,680 --> 00:09:20,560
depend on your use case and how do you

00:09:19,519 --> 00:09:23,040
expect your users

00:09:20,560 --> 00:09:24,480
your users and tenants to be interacting

00:09:23,040 --> 00:09:26,640
and the baseline question

00:09:24,480 --> 00:09:29,120
here is how many tenants do you expect a

00:09:26,640 --> 00:09:31,200
user to be related with

00:09:29,120 --> 00:09:33,120
the second the second architectural

00:09:31,200 --> 00:09:34,480
choice to be making is the database

00:09:33,120 --> 00:09:37,839
architecture itself

00:09:34,480 --> 00:09:40,640
and there are typically three approaches

00:09:37,839 --> 00:09:42,399
one is the isolated approach in which in

00:09:40,640 --> 00:09:44,160
which you have multiple databases

00:09:42,399 --> 00:09:45,839
one for tenant the other one is the

00:09:44,160 --> 00:09:47,519
shared database approach and why in

00:09:45,839 --> 00:09:50,160
which you have a single database and a

00:09:47,519 --> 00:09:51,920
tenant column and on entry level tables

00:09:50,160 --> 00:09:54,000
and the third one which is kind of

00:09:51,920 --> 00:09:55,120
reason is the one in which you have one

00:09:54,000 --> 00:09:58,240
database but you use

00:09:55,120 --> 00:09:59,279
postgres schemas to do the tenant to

00:09:58,240 --> 00:10:02,399
store your tenant

00:09:59,279 --> 00:10:04,000
information so how how would

00:10:02,399 --> 00:10:06,240
that be if you were to implement

00:10:04,000 --> 00:10:07,040
multi-tenancy with isolated databases

00:10:06,240 --> 00:10:09,360
well

00:10:07,040 --> 00:10:11,279
django is compatible with uh

00:10:09,360 --> 00:10:12,560
multi-database configuration so there's

00:10:11,279 --> 00:10:15,040
nothing stopping you from having

00:10:12,560 --> 00:10:16,320
multiple databases there

00:10:15,040 --> 00:10:18,000
the only thing you would have to do is

00:10:16,320 --> 00:10:19,920
that you you would have to be switching

00:10:18,000 --> 00:10:21,760
between databases when accessing and

00:10:19,920 --> 00:10:23,760
storing your data

00:10:21,760 --> 00:10:25,680
here i am using a translation function

00:10:23,760 --> 00:10:27,120
from antenna from an active tenant into

00:10:25,680 --> 00:10:29,120
a database alias

00:10:27,120 --> 00:10:31,839
and everything you would have to do is

00:10:29,120 --> 00:10:33,279
just using that alias for saving your

00:10:31,839 --> 00:10:36,560
objects or for filtering

00:10:33,279 --> 00:10:39,279
your queries or even for generating

00:10:36,560 --> 00:10:41,600
already a scope manager so that your all

00:10:39,279 --> 00:10:45,360
your subsequent queries are already

00:10:41,600 --> 00:10:47,440
in the context of that database alias

00:10:45,360 --> 00:10:48,640
this could be somehow offloaded to

00:10:47,440 --> 00:10:50,079
database router since

00:10:48,640 --> 00:10:51,760
we have this function to get the current

00:10:50,079 --> 00:10:52,560
tenant and we also have a translation

00:10:51,760 --> 00:10:55,040
function

00:10:52,560 --> 00:10:57,440
from a tenant into a database alias we

00:10:55,040 --> 00:10:58,959
could be providing default values here

00:10:57,440 --> 00:11:01,839
so that we don't have to do the previous

00:10:58,959 --> 00:11:04,160
thing the router makes it so

00:11:01,839 --> 00:11:05,519
that whenever you do a data access you

00:11:04,160 --> 00:11:08,320
uh this would be a

00:11:05,519 --> 00:11:09,600
default value of of a database and you

00:11:08,320 --> 00:11:13,200
could still resort

00:11:09,600 --> 00:11:14,000
to doing manual specific scoping if you

00:11:13,200 --> 00:11:16,000
need to override

00:11:14,000 --> 00:11:18,000
the default behavior the good thing

00:11:16,000 --> 00:11:20,720
about the isolated databases is that you

00:11:18,000 --> 00:11:22,399
are optimized for isolation

00:11:20,720 --> 00:11:23,839
the bad is that there are no

00:11:22,399 --> 00:11:26,560
relationships across

00:11:23,839 --> 00:11:27,279
databases because django doesn't allow

00:11:26,560 --> 00:11:29,839
it

00:11:27,279 --> 00:11:32,240
and that adding tenants uh requires

00:11:29,839 --> 00:11:34,000
reconfiguring the project

00:11:32,240 --> 00:11:35,519
why because your tenant catalog is

00:11:34,000 --> 00:11:37,440
actually living in your settings so

00:11:35,519 --> 00:11:39,839
every time you're adding a new tenant

00:11:37,440 --> 00:11:40,880
you have to update your settings the not

00:11:39,839 --> 00:11:42,640
so funny

00:11:40,880 --> 00:11:44,560
thing about the isolated databases

00:11:42,640 --> 00:11:46,399
approach is that as you scale

00:11:44,560 --> 00:11:48,480
it's going to become quite expensive

00:11:46,399 --> 00:11:50,720
with the operational costs

00:11:48,480 --> 00:11:52,639
so unless you're planning to have a

00:11:50,720 --> 00:11:54,160
number of tenants in the lower tents or

00:11:52,639 --> 00:11:56,000
unless you're planning to have scrooge

00:11:54,160 --> 00:11:58,079
mcduck as your billing manager

00:11:56,000 --> 00:12:00,240
this is generally not recommended

00:11:58,079 --> 00:12:00,720
approach as for the shared database

00:12:00,240 --> 00:12:02,959
approach

00:12:00,720 --> 00:12:04,800
is is the one in which remember we have

00:12:02,959 --> 00:12:07,279
mixes mixed records

00:12:04,800 --> 00:12:09,360
in a single database so in this case

00:12:07,279 --> 00:12:11,360
entry level 10 specific models

00:12:09,360 --> 00:12:12,399
will require a pointer to the 10 and

00:12:11,360 --> 00:12:13,920
they belong too

00:12:12,399 --> 00:12:15,600
and notice that i'm saying tenant

00:12:13,920 --> 00:12:17,279
specific models because because

00:12:15,600 --> 00:12:18,720
not every model needs to be tenant

00:12:17,279 --> 00:12:21,120
specific you could you could have

00:12:18,720 --> 00:12:22,720
models that are uh used to share

00:12:21,120 --> 00:12:24,399
information across tenants

00:12:22,720 --> 00:12:25,760
and notice that i'm also saying entry

00:12:24,399 --> 00:12:27,839
level because

00:12:25,760 --> 00:12:30,000
models determine relationships between

00:12:27,839 --> 00:12:31,920
them so you you don't actually need to

00:12:30,000 --> 00:12:34,399
provide a pointer for each one of those

00:12:31,920 --> 00:12:35,440
as long as you're able to reach the

00:12:34,399 --> 00:12:37,519
tenant

00:12:35,440 --> 00:12:39,519
with a reasonable number of joints and

00:12:37,519 --> 00:12:40,720
this is an example of a hypothetical

00:12:39,519 --> 00:12:44,160
question model

00:12:40,720 --> 00:12:47,440
following the stack exchange example

00:12:44,160 --> 00:12:49,040
where you're having a foreign key to the

00:12:47,440 --> 00:12:49,680
site which is kind of the tenant in this

00:12:49,040 --> 00:12:51,920
example

00:12:49,680 --> 00:12:53,440
in this case you still have to rely on

00:12:51,920 --> 00:12:55,200
the active tenant in order to

00:12:53,440 --> 00:12:57,200
complete the missing part of your

00:12:55,200 --> 00:12:58,800
queries because you will have to use

00:12:57,200 --> 00:13:00,480
that tenant in order to create your

00:12:58,800 --> 00:13:02,800
records if you haven't provided if you

00:13:00,480 --> 00:13:06,160
have provided a tenant agnostic

00:13:02,800 --> 00:13:08,800
interface to to the client and

00:13:06,160 --> 00:13:10,480
you still have to filter by tenon no

00:13:08,800 --> 00:13:12,639
matter if you're actually filtering

00:13:10,480 --> 00:13:14,240
a model that has the tenant pointer

00:13:12,639 --> 00:13:15,760
pointer right away or if you're doing a

00:13:14,240 --> 00:13:18,079
number of joints in order to get to the

00:13:15,760 --> 00:13:19,680
tenant

00:13:18,079 --> 00:13:21,279
you could do this so you could do some

00:13:19,680 --> 00:13:23,360
of these automatically or you could try

00:13:21,279 --> 00:13:25,920
to assign the tenant automatically by

00:13:23,360 --> 00:13:28,959
means of using a default value

00:13:25,920 --> 00:13:29,680
for the the the field that holds the the

00:13:28,959 --> 00:13:31,680
tenant

00:13:29,680 --> 00:13:33,440
which could be a callable and in this

00:13:31,680 --> 00:13:34,000
case if appropriate could be get current

00:13:33,440 --> 00:13:35,760
tenant

00:13:34,000 --> 00:13:37,279
or you could have a custom field with a

00:13:35,760 --> 00:13:38,639
pre-safe hook

00:13:37,279 --> 00:13:40,320
if you're using a foreign key you could

00:13:38,639 --> 00:13:43,839
even subclass

00:13:40,320 --> 00:13:46,240
that a field finally you could resort to

00:13:43,839 --> 00:13:47,760
having a signal on relevant models in

00:13:46,240 --> 00:13:48,639
order to complete the model prior to

00:13:47,760 --> 00:13:50,720
saving it

00:13:48,639 --> 00:13:52,639
as for querying well you could use

00:13:50,720 --> 00:13:55,760
custom managers and custom queries

00:13:52,639 --> 00:13:56,240
in order to pre-filter by your active

00:13:55,760 --> 00:13:59,040
tenant

00:13:56,240 --> 00:14:00,639
and therefore the subsequent queries uh

00:13:59,040 --> 00:14:02,399
account that they these are already

00:14:00,639 --> 00:14:03,760
filtered however there are there could

00:14:02,399 --> 00:14:06,440
be some annotations

00:14:03,760 --> 00:14:08,720
on sub queries where uh this uh

00:14:06,440 --> 00:14:10,959
customization probably doesn't work

00:14:08,720 --> 00:14:12,240
so you still have to be open to be doing

00:14:10,959 --> 00:14:15,680
manual

00:14:12,240 --> 00:14:17,440
uh scoping from time to time

00:14:15,680 --> 00:14:19,600
the good thing about shared databases is

00:14:17,440 --> 00:14:21,839
that you are optimized for scalability

00:14:19,600 --> 00:14:24,079
because adding tenants is just a matter

00:14:21,839 --> 00:14:26,480
of adding rows into your tables

00:14:24,079 --> 00:14:27,839
the bad is that your data isolation will

00:14:26,480 --> 00:14:30,560
take extra

00:14:27,839 --> 00:14:32,079
effort on the development side and the

00:14:30,560 --> 00:14:32,880
not so funny thing about the shared

00:14:32,079 --> 00:14:36,000
databases

00:14:32,880 --> 00:14:36,480
is that it's very easy to just forget to

00:14:36,000 --> 00:14:38,880
scope

00:14:36,480 --> 00:14:40,160
any specific query by the tenant and

00:14:38,880 --> 00:14:41,920
therefore if you don't want to wake up

00:14:40,160 --> 00:14:43,440
in the middle of an eye with your brain

00:14:41,920 --> 00:14:45,199
wondering whether you have filtered by

00:14:43,440 --> 00:14:47,279
the active tenant or not

00:14:45,199 --> 00:14:49,600
my recommendation is that you bookmark

00:14:47,279 --> 00:14:52,240
all your tenant scope queries

00:14:49,600 --> 00:14:53,279
that you make automated tests for each

00:14:52,240 --> 00:14:54,320
one of them

00:14:53,279 --> 00:14:56,480
and you make sure that they are

00:14:54,320 --> 00:14:58,560
returning results in the scope

00:14:56,480 --> 00:14:59,680
of the active tenant and even that you

00:14:58,560 --> 00:15:02,160
take a step further

00:14:59,680 --> 00:15:04,079
and you make an automated test to test

00:15:02,160 --> 00:15:05,920
that you tested each one of them so it's

00:15:04,079 --> 00:15:07,760
kind of a riddle but it's going to save

00:15:05,920 --> 00:15:10,480
you at some point remember

00:15:07,760 --> 00:15:11,920
that tests are the softest pillow you

00:15:10,480 --> 00:15:12,720
could have in general for software

00:15:11,920 --> 00:15:14,079
development

00:15:12,720 --> 00:15:15,600
but specifically if you're going to

00:15:14,079 --> 00:15:16,880
share database approach for

00:15:15,600 --> 00:15:20,079
multi-tenancy

00:15:16,880 --> 00:15:21,360
as for semi-isolated databases approach

00:15:20,079 --> 00:15:23,360
this is going to rely

00:15:21,360 --> 00:15:25,600
impossible schemas in order to isolate

00:15:23,360 --> 00:15:27,920
the tenant within a single database

00:15:25,600 --> 00:15:30,000
so what are schemas well this is a

00:15:27,920 --> 00:15:32,160
specific postgres concept they are a

00:15:30,000 --> 00:15:33,440
layer of abstraction between databases

00:15:32,160 --> 00:15:35,759
and tables

00:15:33,440 --> 00:15:37,519
they can be thought of thought off as

00:15:35,759 --> 00:15:39,920
name spaces but the good thing

00:15:37,519 --> 00:15:41,759
about these namespaces is that they are

00:15:39,920 --> 00:15:44,079
not mutually exclusive

00:15:41,759 --> 00:15:44,959
so you can organize them and find tables

00:15:44,079 --> 00:15:47,279
in many of them

00:15:44,959 --> 00:15:48,160
by means of properly configuring your

00:15:47,279 --> 00:15:50,240
search path

00:15:48,160 --> 00:15:51,920
which is also another possibly specific

00:15:50,240 --> 00:15:53,440
concept

00:15:51,920 --> 00:15:55,360
in this case your queries remain

00:15:53,440 --> 00:15:56,160
practically unchanged this seems like

00:15:55,360 --> 00:15:57,680
magic

00:15:56,160 --> 00:15:59,120
but you're going to pay the price with

00:15:57,680 --> 00:16:00,320
an increased technical challenge

00:15:59,120 --> 00:16:03,680
somewhere else

00:16:00,320 --> 00:16:04,480
and this is where this is where you will

00:16:03,680 --> 00:16:06,560
have to do

00:16:04,480 --> 00:16:08,079
two major things or it's required to

00:16:06,560 --> 00:16:09,759
measure things in order to get this

00:16:08,079 --> 00:16:11,519
approach working first

00:16:09,759 --> 00:16:13,440
we're going to require a custom database

00:16:11,519 --> 00:16:15,120
backend based in the postgres

00:16:13,440 --> 00:16:16,480
backend or any other backend that is

00:16:15,120 --> 00:16:19,040
positive friendly

00:16:16,480 --> 00:16:20,959
and this backend will have to be able to

00:16:19,040 --> 00:16:22,959
convert the active tenant

00:16:20,959 --> 00:16:24,399
into a sequence of schemas and then you

00:16:22,959 --> 00:16:27,600
will have to run a query

00:16:24,399 --> 00:16:30,639
to activate those schemas by means

00:16:27,600 --> 00:16:33,120
of setting the search path

00:16:30,639 --> 00:16:35,040
the other interesting uh challenge and

00:16:33,120 --> 00:16:35,519
this is kind of the biggest challenge is

00:16:35,040 --> 00:16:38,079
that

00:16:35,519 --> 00:16:39,440
we have to teach django to do migrations

00:16:38,079 --> 00:16:40,800
again why

00:16:39,440 --> 00:16:43,040
because django doesn't know anything

00:16:40,800 --> 00:16:45,920
about schemas django knows

00:16:43,040 --> 00:16:47,199
about databases and django you can pass

00:16:45,920 --> 00:16:49,759
a database in order to run your

00:16:47,199 --> 00:16:52,000
migrations but when it comes to schemas

00:16:49,759 --> 00:16:53,920
that is uh that is not part of the world

00:16:52,000 --> 00:16:56,000
view of django itself

00:16:53,920 --> 00:16:58,000
so the idea here is that we are also

00:16:56,000 --> 00:17:00,959
using a database router in order to

00:16:58,000 --> 00:17:02,560
uh use the allow migrate hook in order

00:17:00,959 --> 00:17:06,400
to tell django whether or not

00:17:02,560 --> 00:17:09,280
it's legal to migrate a specific model

00:17:06,400 --> 00:17:11,679
based on the active tenant and this also

00:17:09,280 --> 00:17:12,000
requires the migrate command itself to

00:17:11,679 --> 00:17:14,079
be

00:17:12,000 --> 00:17:15,760
uh kind of tweaked because the migrate

00:17:14,079 --> 00:17:18,480
need to operate at the schema

00:17:15,760 --> 00:17:20,000
level the good thing about semi-isolated

00:17:18,480 --> 00:17:22,000
database approach is that you're

00:17:20,000 --> 00:17:23,839
optimized for isolation

00:17:22,000 --> 00:17:25,600
and at the same time you having

00:17:23,839 --> 00:17:26,880
increased scalability because since you

00:17:25,600 --> 00:17:30,559
have a single database

00:17:26,880 --> 00:17:32,720
you can scale faster by means of adding

00:17:30,559 --> 00:17:34,320
schemas the path is that it's going to

00:17:32,720 --> 00:17:38,000
take extra afford to understand and

00:17:34,320 --> 00:17:38,000
control how schemas interact

00:17:38,480 --> 00:17:42,080
the not so funny part about the

00:17:40,400 --> 00:17:44,160
semi-isolated database approach

00:17:42,080 --> 00:17:45,919
is that since you're able to scale

00:17:44,160 --> 00:17:46,640
faster you're going to be hitting the

00:17:45,919 --> 00:17:49,200
thousands

00:17:46,640 --> 00:17:50,720
of tenants very soon and therefore

00:17:49,200 --> 00:17:52,240
thousands of schemas

00:17:50,720 --> 00:17:54,960
and you still have to run your

00:17:52,240 --> 00:17:57,760
migrations on each one of those schemas

00:17:54,960 --> 00:17:59,919
so you're going to be paying the price

00:17:57,760 --> 00:18:02,320
with an increased time to run your

00:17:59,919 --> 00:18:04,480
migration so please be advised

00:18:02,320 --> 00:18:05,360
about this which one is the best well

00:18:04,480 --> 00:18:07,280
neither is it

00:18:05,360 --> 00:18:08,559
why because there are pros and cons in

00:18:07,280 --> 00:18:11,039
each one of them

00:18:08,559 --> 00:18:13,360
and it will depend on your specific use

00:18:11,039 --> 00:18:15,200
case and each one of those approaches

00:18:13,360 --> 00:18:16,640
is capable of shining in their specific

00:18:15,200 --> 00:18:18,559
use case anyways

00:18:16,640 --> 00:18:19,760
if you want to engage in a respectful

00:18:18,559 --> 00:18:21,679
ice cream fight

00:18:19,760 --> 00:18:23,520
you can hit me in the breakout and we

00:18:21,679 --> 00:18:26,559
can continue the debate there

00:18:23,520 --> 00:18:29,280
the third architectural choice

00:18:26,559 --> 00:18:30,640
is and routing that is how do you expect

00:18:29,280 --> 00:18:33,360
to take an incumbent request and

00:18:30,640 --> 00:18:36,240
generate an active tenant out of it

00:18:33,360 --> 00:18:36,799
so it's generally possible to do that

00:18:36,240 --> 00:18:39,679
because

00:18:36,799 --> 00:18:41,360
your tenant is somehow encoded encoded

00:18:39,679 --> 00:18:43,039
in the incoming request by means of the

00:18:41,360 --> 00:18:45,200
user session or headers

00:18:43,039 --> 00:18:47,200
or it could be even better if your

00:18:45,200 --> 00:18:48,080
tenant can be inferred from the url

00:18:47,200 --> 00:18:50,080
itself

00:18:48,080 --> 00:18:52,880
you could do the translation from the

00:18:50,080 --> 00:18:54,720
domain subfolder or query parameter

00:18:52,880 --> 00:18:57,039
so where is the perfect place to do this

00:18:54,720 --> 00:18:58,559
translation from an incumbent request

00:18:57,039 --> 00:19:00,000
into an active tenant but that places

00:18:58,559 --> 00:19:02,240
the middleware

00:19:00,000 --> 00:19:03,760
it's a perfect place to do it because

00:19:02,240 --> 00:19:05,440
you're capable of

00:19:03,760 --> 00:19:07,360
taking the request and comment requests

00:19:05,440 --> 00:19:09,360
just activate the 10 and therefore

00:19:07,360 --> 00:19:10,799
the rest of your request and response

00:19:09,360 --> 00:19:12,720
cycle for that request

00:19:10,799 --> 00:19:14,880
is going to be guaranteed to be uh in

00:19:12,720 --> 00:19:16,640
the scope of that active tenant

00:19:14,880 --> 00:19:18,480
this is a possible implementation of

00:19:16,640 --> 00:19:19,679
that middleware of all one of the

00:19:18,480 --> 00:19:22,080
middleware

00:19:19,679 --> 00:19:23,440
and in this in this case this middleware

00:19:22,080 --> 00:19:26,480
is translating

00:19:23,440 --> 00:19:29,600
from a session into

00:19:26,480 --> 00:19:31,919
into a tenant notice that

00:19:29,600 --> 00:19:33,760
the major complexity here is actually

00:19:31,919 --> 00:19:35,360
creating the translation function

00:19:33,760 --> 00:19:37,039
like to take something from the session

00:19:35,360 --> 00:19:38,000
and convert it into a tenant to activate

00:19:37,039 --> 00:19:40,000
because the rest is pretty

00:19:38,000 --> 00:19:41,120
much checking if there is no active 10

00:19:40,000 --> 00:19:43,360
already and then

00:19:41,120 --> 00:19:45,600
activate it the good part about this is

00:19:43,360 --> 00:19:48,480
that you only need to provide different

00:19:45,600 --> 00:19:50,720
translation functions for different

00:19:48,480 --> 00:19:52,400
retrieval methods and you could have

00:19:50,720 --> 00:19:54,880
similar functions for users headers

00:19:52,400 --> 00:19:57,440
domain subfolder parameters

00:19:54,880 --> 00:19:59,039
and you could still chain one middleware

00:19:57,440 --> 00:20:01,120
after the other if you want to combine

00:19:59,039 --> 00:20:03,280
the power the power of these

00:20:01,120 --> 00:20:05,280
retrieval methods so you only have to

00:20:03,280 --> 00:20:05,600
take care that the order will determine

00:20:05,280 --> 00:20:07,840
the

00:20:05,600 --> 00:20:09,440
the precedence of of those retrievable

00:20:07,840 --> 00:20:11,360
methods

00:20:09,440 --> 00:20:12,880
now what if you want the opposite what

00:20:11,360 --> 00:20:14,720
if you are already in the

00:20:12,880 --> 00:20:17,520
in the scope of a tenant and you just

00:20:14,720 --> 00:20:20,400
want to generate a canonical url

00:20:17,520 --> 00:20:22,159
that is capable uh to give you i mean if

00:20:20,400 --> 00:20:24,159
you share that url

00:20:22,159 --> 00:20:25,520
it can take take you not only to a

00:20:24,159 --> 00:20:27,919
specific path

00:20:25,520 --> 00:20:29,200
within your urls but also to a specific

00:20:27,919 --> 00:20:31,280
tenant

00:20:29,200 --> 00:20:32,400
well this is not going to be possible in

00:20:31,280 --> 00:20:34,640
some cases because

00:20:32,400 --> 00:20:36,480
i mean user sessions and header are not

00:20:34,640 --> 00:20:39,919
easily encodable

00:20:36,480 --> 00:20:41,840
as part of the url

00:20:39,919 --> 00:20:43,679
but you can totally do that if you're

00:20:41,840 --> 00:20:45,360
inferring your tenant from domain to

00:20:43,679 --> 00:20:48,799
folder or query parameter because

00:20:45,360 --> 00:20:49,360
even though django only reverses the

00:20:48,799 --> 00:20:52,240
path

00:20:49,360 --> 00:20:53,600
part of the url you can still prepend

00:20:52,240 --> 00:20:55,039
interpolate or append

00:20:53,600 --> 00:20:57,679
the tenant in order to provide the

00:20:55,039 --> 00:20:59,679
canonical url to land in a specific path

00:20:57,679 --> 00:21:01,200
of a specific tenant and this of course

00:20:59,679 --> 00:21:03,360
will require a little tweaking in the

00:21:01,200 --> 00:21:06,559
url reversing process

00:21:03,360 --> 00:21:09,440
as a bonus i also tell you that as

00:21:06,559 --> 00:21:10,159
i also give you that it's possible to

00:21:09,440 --> 00:21:12,559
provide

00:21:10,159 --> 00:21:14,159
custom uh your outcomes based on the

00:21:12,559 --> 00:21:16,480
active tenants so if you have different

00:21:14,159 --> 00:21:18,240
types of tenants

00:21:16,480 --> 00:21:21,039
and you want to provide different

00:21:18,240 --> 00:21:23,280
different your uh urls for those tenants

00:21:21,039 --> 00:21:24,240
you could also provide this translation

00:21:23,280 --> 00:21:27,600
function

00:21:24,240 --> 00:21:29,280
uh in order to convert a tenant into a

00:21:27,600 --> 00:21:31,360
urlconf module

00:21:29,280 --> 00:21:33,120
django already provides this hook where

00:21:31,360 --> 00:21:35,280
you can just assign

00:21:33,120 --> 00:21:36,799
the your outcome module into this

00:21:35,280 --> 00:21:38,960
variable in the request

00:21:36,799 --> 00:21:41,039
and you will be using that different

00:21:38,960 --> 00:21:42,159
module

00:21:41,039 --> 00:21:44,080
so these are the three major

00:21:42,159 --> 00:21:46,880
architectural choices uh you

00:21:44,080 --> 00:21:47,679
have to make and you'll see there are

00:21:46,880 --> 00:21:49,200
multiple

00:21:47,679 --> 00:21:51,600
choices for each one of those some

00:21:49,200 --> 00:21:53,919
combinations make sense play nice

00:21:51,600 --> 00:21:55,600
together while others don't make much

00:21:53,919 --> 00:21:57,600
sense at all so it's going to be up to

00:21:55,600 --> 00:22:00,400
you to determine whether or not things

00:21:57,600 --> 00:22:01,919
are playing nice for you but there is

00:22:00,400 --> 00:22:03,840
more to django than just

00:22:01,919 --> 00:22:05,280
those three parts and those three

00:22:03,840 --> 00:22:07,360
architectural choices

00:22:05,280 --> 00:22:09,200
so let's take a quick look at the scope

00:22:07,360 --> 00:22:11,039
of everything else and

00:22:09,200 --> 00:22:13,440
while this list is not going to be

00:22:11,039 --> 00:22:16,480
comprehensive let's please at least uh

00:22:13,440 --> 00:22:18,480
see one of the five major places where

00:22:16,480 --> 00:22:21,120
this dynamic of the active tenant is

00:22:18,480 --> 00:22:23,039
going to be an important thing

00:22:21,120 --> 00:22:25,200
so management commands uh it's going to

00:22:23,039 --> 00:22:28,240
be very

00:22:25,200 --> 00:22:30,400
valuable to be able to run

00:22:28,240 --> 00:22:32,159
management commands in the scope of a

00:22:30,400 --> 00:22:34,000
specific tenant

00:22:32,159 --> 00:22:35,280
and for new management commands you

00:22:34,000 --> 00:22:38,080
could just include

00:22:35,280 --> 00:22:39,840
a tenant argument so that this command

00:22:38,080 --> 00:22:41,360
is capable of first activating the

00:22:39,840 --> 00:22:43,840
tenant

00:22:41,360 --> 00:22:44,960
and then performing the the operation

00:22:43,840 --> 00:22:48,240
that the management command

00:22:44,960 --> 00:22:51,440
is expected to do now for existing

00:22:48,240 --> 00:22:52,080
non-tenant award commands you will have

00:22:51,440 --> 00:22:53,919
to i mean

00:22:52,080 --> 00:22:55,520
these commands are basically everything

00:22:53,919 --> 00:22:57,360
that ships with django

00:22:55,520 --> 00:22:59,280
and third-party applications so for this

00:22:57,360 --> 00:23:01,200
case you will have to

00:22:59,280 --> 00:23:02,400
define a special command wrapper that

00:23:01,200 --> 00:23:05,360
basically

00:23:02,400 --> 00:23:06,880
takes a tenant as an argument but also a

00:23:05,360 --> 00:23:10,000
nearer command to be running

00:23:06,880 --> 00:23:11,200
and this rapper should be in charge of

00:23:10,000 --> 00:23:13,440
activating the tenant

00:23:11,200 --> 00:23:14,480
and then calling the inner command you

00:23:13,440 --> 00:23:16,720
will find

00:23:14,480 --> 00:23:18,720
some packages existing out there that

00:23:16,720 --> 00:23:22,240
even take a step further in elegance

00:23:18,720 --> 00:23:24,240
and combine the arguments of both uh

00:23:22,240 --> 00:23:25,919
commands but you know this is kind of

00:23:24,240 --> 00:23:28,240
trickier to implement but it's possible

00:23:25,919 --> 00:23:30,159
completely possible to do

00:23:28,240 --> 00:23:32,480
as for file storage it's also going to

00:23:30,159 --> 00:23:35,760
be extremely valuable to be able to

00:23:32,480 --> 00:23:38,640
somehow organize the files uh

00:23:35,760 --> 00:23:39,200
by tenant and in this case you can

00:23:38,640 --> 00:23:41,600
totally

00:23:39,200 --> 00:23:42,559
uh define a custom file storage in order

00:23:41,600 --> 00:23:44,240
to perhaps

00:23:42,559 --> 00:23:46,159
prepend your else with a string

00:23:44,240 --> 00:23:48,400
representation of your tenant

00:23:46,159 --> 00:23:49,919
etc notice that i'm not providing any

00:23:48,400 --> 00:23:52,000
code example here because there are

00:23:49,919 --> 00:23:52,960
multiple types of file storage depending

00:23:52,000 --> 00:23:54,480
on your backend

00:23:52,960 --> 00:23:56,159
it could be file system or it could be

00:23:54,480 --> 00:23:58,480
something in the cloud

00:23:56,159 --> 00:23:59,679
so this actually takes a little bit of

00:23:58,480 --> 00:24:02,480
more uh specific

00:23:59,679 --> 00:24:03,760
use case thinking now in higher security

00:24:02,480 --> 00:24:06,880
context where you

00:24:03,760 --> 00:24:07,919
cannot afford one tenant accessing files

00:24:06,880 --> 00:24:10,559
in another tenant

00:24:07,919 --> 00:24:12,559
there are two uh kind of workarounds you

00:24:10,559 --> 00:24:13,600
can do in order to increase the security

00:24:12,559 --> 00:24:16,159
clear uh

00:24:13,600 --> 00:24:19,440
security level one is generating

00:24:16,159 --> 00:24:21,600
pre-signed urls so that your your static

00:24:19,440 --> 00:24:22,480
or media urls are short leave and

00:24:21,600 --> 00:24:25,600
therefore it's

00:24:22,480 --> 00:24:28,400
it makes it's harder to visit

00:24:25,600 --> 00:24:29,039
10 specific urls four files and the

00:24:28,400 --> 00:24:31,360
other one is

00:24:29,039 --> 00:24:33,440
actually using a proxy view so that the

00:24:31,360 --> 00:24:34,880
view acts as a middleman

00:24:33,440 --> 00:24:37,200
and determines whether or not the

00:24:34,880 --> 00:24:38,080
incoming request has security clearance

00:24:37,200 --> 00:24:40,960
to access

00:24:38,080 --> 00:24:42,559
the specific file storage again there

00:24:40,960 --> 00:24:44,159
are some interesting packages that are

00:24:42,559 --> 00:24:47,679
doing uh

00:24:44,159 --> 00:24:50,080
most part of these uh themselves so

00:24:47,679 --> 00:24:52,080
this is more like the underlying concept

00:24:50,080 --> 00:24:55,360
as for cash well as a buck

00:24:52,080 --> 00:24:56,640
the cash that comes with django is a

00:24:55,360 --> 00:24:59,600
tenant agnostic so

00:24:56,640 --> 00:25:01,360
uh if two tenants are using the same

00:24:59,600 --> 00:25:03,200
cache key there will be a clash

00:25:01,360 --> 00:25:05,279
but most dangerously they could you

00:25:03,200 --> 00:25:07,440
could be leaking information by means of

00:25:05,279 --> 00:25:08,159
one tenant storing storing zone data in

00:25:07,440 --> 00:25:09,760
the cache

00:25:08,159 --> 00:25:11,600
and then other tenants retrieving that

00:25:09,760 --> 00:25:13,600
that that's a leak so

00:25:11,600 --> 00:25:14,799
one thing you could do is actually

00:25:13,600 --> 00:25:16,480
generate

00:25:14,799 --> 00:25:18,000
a special key function that you could

00:25:16,480 --> 00:25:19,760
then use as part of your cache

00:25:18,000 --> 00:25:21,600
configuration and that

00:25:19,760 --> 00:25:23,600
key function the only things that need

00:25:21,600 --> 00:25:24,960
to do is just augment the

00:25:23,600 --> 00:25:28,480
the string representation of the key

00:25:24,960 --> 00:25:30,559
itself with the current tenant

00:25:28,480 --> 00:25:32,799
as facility task well it's more it's

00:25:30,559 --> 00:25:35,200
more a matter of discipline

00:25:32,799 --> 00:25:36,720
the idea is that you pass an identifier

00:25:35,200 --> 00:25:38,159
of your tenant so that the first thing

00:25:36,720 --> 00:25:40,640
you do in your tenant

00:25:38,159 --> 00:25:41,360
specific salary task is to activate the

00:25:40,640 --> 00:25:44,320
tenant

00:25:41,360 --> 00:25:44,880
and then you can resort to doing the the

00:25:44,320 --> 00:25:48,080
rest

00:25:44,880 --> 00:25:51,279
of the task itself and finally four

00:25:48,080 --> 00:25:53,200
channels well you're going to require

00:25:51,279 --> 00:25:55,120
a separate middleware for your

00:25:53,200 --> 00:25:56,320
websockets whatever you do for your

00:25:55,120 --> 00:25:58,400
regular uh

00:25:56,320 --> 00:26:00,559
request you're going to be doing you'll

00:25:58,400 --> 00:26:04,960
have to be doing that also

00:26:00,559 --> 00:26:04,960
for uh your middleware for your

00:26:06,240 --> 00:26:10,080
channels because they are not fully

00:26:09,360 --> 00:26:11,919
compatible

00:26:10,080 --> 00:26:13,279
and if you want to activate tenants from

00:26:11,919 --> 00:26:14,880
the incoming scope

00:26:13,279 --> 00:26:16,320
you're going to be uh kind of

00:26:14,880 --> 00:26:17,200
duplicating your middleweight board

00:26:16,320 --> 00:26:19,600
because

00:26:17,200 --> 00:26:21,760
they are not compatible and if you're

00:26:19,600 --> 00:26:24,240
using uh channel layers

00:26:21,760 --> 00:26:26,159
you will have to also do a similar

00:26:24,240 --> 00:26:27,840
approach like we did with cash with your

00:26:26,159 --> 00:26:31,039
consumer group's name

00:26:27,840 --> 00:26:33,600
because if you use an attendant agnostic

00:26:31,039 --> 00:26:35,760
name you will also end up leaking

00:26:33,600 --> 00:26:37,679
messages between the groups of multiple

00:26:35,760 --> 00:26:39,760
tenants

00:26:37,679 --> 00:26:40,880
so for everything else that what was not

00:26:39,760 --> 00:26:44,320
covered like

00:26:40,880 --> 00:26:45,520
admin site or template tenant specific

00:26:44,320 --> 00:26:48,080
templates i

00:26:45,520 --> 00:26:48,720
am certain that the principles here are

00:26:48,080 --> 00:26:51,200
generally

00:26:48,720 --> 00:26:53,120
extensible so i'm almost sure that you

00:26:51,200 --> 00:26:54,880
will be able to extend the principles

00:26:53,120 --> 00:26:56,799
in order to cover uh pretty much

00:26:54,880 --> 00:26:58,400
everywhere in the framework otherwise

00:26:56,799 --> 00:27:00,400
feel free to continue the discussion in

00:26:58,400 --> 00:27:02,080
the breakout now

00:27:00,400 --> 00:27:04,240
some of the packages that actually

00:27:02,080 --> 00:27:05,600
implement multi-tenancy and help you uh

00:27:04,240 --> 00:27:08,159
integrating multi-tenancy with your

00:27:05,600 --> 00:27:11,600
project which you could uh

00:27:08,159 --> 00:27:12,240
choose from uh here i'm displaying four

00:27:11,600 --> 00:27:14,559
packages

00:27:12,240 --> 00:27:15,600
notice that they are kind of opinionated

00:27:14,559 --> 00:27:18,799
based on the

00:27:15,600 --> 00:27:21,240
database approach these packages were

00:27:18,799 --> 00:27:23,039
taken from the multi-tenancy greet of

00:27:21,240 --> 00:27:25,360
djangopackages.org which i consider to

00:27:23,039 --> 00:27:28,159
be the market for django packages

00:27:25,360 --> 00:27:30,399
please visit there you could find more

00:27:28,159 --> 00:27:32,320
interesting things there just make sure

00:27:30,399 --> 00:27:34,240
you see whether or not the package is

00:27:32,320 --> 00:27:35,679
python 3 compatible whether or not it's

00:27:34,240 --> 00:27:37,039
production ready and even if it's

00:27:35,679 --> 00:27:38,720
actively maintained

00:27:37,039 --> 00:27:40,960
because otherwise you might end up in a

00:27:38,720 --> 00:27:42,799
very difficult situation

00:27:40,960 --> 00:27:45,120
so if you want to contribute back to any

00:27:42,799 --> 00:27:47,919
of those packages the ones i

00:27:45,120 --> 00:27:48,559
mentioned and the ones i didn't i by

00:27:47,919 --> 00:27:50,399
means of

00:27:48,559 --> 00:27:52,159
reporting box implementing new features

00:27:50,399 --> 00:27:55,039
or even improving documentation

00:27:52,159 --> 00:27:56,080
i will dare to speak on behalf of

00:27:55,039 --> 00:27:57,760
everybody

00:27:56,080 --> 00:27:59,679
of all the package maintainers and tell

00:27:57,760 --> 00:28:01,200
you please come we need you

00:27:59,679 --> 00:28:03,039
you're more than welcome to do so it

00:28:01,200 --> 00:28:03,919
could be a gold opportunity for you to

00:28:03,039 --> 00:28:06,240
put in practice

00:28:03,919 --> 00:28:08,159
everything you may have learned here or

00:28:06,240 --> 00:28:11,760
everything you have learned in your

00:28:08,159 --> 00:28:13,679
own experience and and progress

00:28:11,760 --> 00:28:15,600
through multi-tenancy in django so

00:28:13,679 --> 00:28:17,840
that's it we can keep in touch

00:28:15,600 --> 00:28:19,600
for more and i would like to give a

00:28:17,840 --> 00:28:21,760
special thanks to russell keith mcgee

00:28:19,600 --> 00:28:23,520
orlando willian and rafael mitchell

00:28:21,760 --> 00:28:25,440
which were of a huge help in the

00:28:23,520 --> 00:28:27,440
preparation of this talk

00:28:25,440 --> 00:28:29,279
and lastly thank you my dear audience

00:28:27,440 --> 00:28:32,240
for joining me today in this

00:28:29,279 --> 00:28:32,240
journey thank you

00:28:32,350 --> 00:28:44,240
[Applause]

00:28:34,640 --> 00:28:44,240

YouTube URL: https://www.youtube.com/watch?v=eYpcPJaE19I


