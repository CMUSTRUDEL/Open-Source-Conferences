Title: Christian Heimes - SSLError, now what?
Publication date: 2018-08-22
Playlist: EuroPython 2018
Description: 
	SSLError, now what?
[EuroPython 2018 - Talk - 2018-07-25 - Smarkets]
[Edinburgh, UK]

By Christian Heimes

TLS/SSL is the most important and widely-used protocol for secure and encrypted communication, e.g. HTTPS. It offers more than just encryption. TLS also ensures data integrity and strong authentication with X.509 certificates. But it provides merely a false sense of security, if you use it wrong.

Have you ever encountered ssl.SSLError: [SSL: CERTIFICATE em VERIFY/ em FAILED], while connecting to a server, but you didn’t understand what is going on? Are you running production code without TLS/SSL protection or with certificate validation disabled, because you couldn’t figure out how to make it work correctly?

I’ll give you the rundown of the basic cryptographic building blocks, protocol handshake, inner structure of certificates, and PKI. You’ll learn about the best practices, debugging tools and tips how to diagnose TLS/SSL and how to deal with certificates.



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2018.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:03,030 --> 00:00:08,910
as Ella arrow so this chalk is pretty

00:00:05,970 --> 00:00:11,160
tightly packed still have to runs

00:00:08,910 --> 00:00:12,929
through some of the slides I may have

00:00:11,160 --> 00:00:17,539
some time for questions at the end but

00:00:12,929 --> 00:00:20,300
I'm not sure yet so let's go story line

00:00:17,539 --> 00:00:24,720
well it doesn't work

00:00:20,300 --> 00:00:27,270
hey so it is maybe you're an engineer

00:00:24,720 --> 00:00:29,100
you're just on vacation or like here

00:00:27,270 --> 00:00:30,900
that's the venue of park on Russia have

00:00:29,100 --> 00:00:33,300
been the last couple of days enjoying

00:00:30,900 --> 00:00:36,690
your day at the pool relaxing maybe

00:00:33,300 --> 00:00:38,940
having a cocktail super great yeah

00:00:36,690 --> 00:00:40,469
fantastic final vacation and then your

00:00:38,940 --> 00:00:44,640
pager goes off you see

00:00:40,469 --> 00:00:47,159
oh no this is El Hierro hmm you run to

00:00:44,640 --> 00:00:50,850
your room already noise check the locks

00:00:47,159 --> 00:00:53,969
and you see something like that totally

00:00:50,850 --> 00:00:56,219
gibberish Wow what's going on here so I

00:00:53,969 --> 00:00:58,350
will give you a bit of pointers what may

00:00:56,219 --> 00:01:00,859
go wrong and on the line also explain

00:00:58,350 --> 00:01:03,359
how to de sel works on a high level

00:01:00,859 --> 00:01:05,940
including the handshake and certificates

00:01:03,359 --> 00:01:07,770
so my name is Christian Hymas I'm from

00:01:05,940 --> 00:01:09,479
Hamburg Germany I've been working with

00:01:07,770 --> 00:01:12,780
Linux and Python for a very long time

00:01:09,479 --> 00:01:14,610
and also a core developer working on the

00:01:12,780 --> 00:01:17,670
security team maintainer of the SSL

00:01:14,610 --> 00:01:20,670
model at Red Hat my personal life were

00:01:17,670 --> 00:01:22,259
actually my crowning work also in

00:01:20,670 --> 00:01:24,420
security engineering on the entity

00:01:22,259 --> 00:01:25,979
management stack single sign-on

00:01:24,420 --> 00:01:29,579
solutions called free IPA

00:01:25,979 --> 00:01:31,979
and related service talk our first would

00:01:29,579 --> 00:01:35,490
give you a short history of SSL a very

00:01:31,979 --> 00:01:37,469
high-level view a quick way how the

00:01:35,490 --> 00:01:41,100
connection works including shop

00:01:37,469 --> 00:01:42,719
Intermezzo crypto 101 after we have the

00:01:41,100 --> 00:01:46,979
handshake done or what explain

00:01:42,719 --> 00:01:50,070
certificates a bit how the routiers work

00:01:46,979 --> 00:01:52,409
hosting verification now at the end give

00:01:50,070 --> 00:01:55,159
you some pointers like resources links

00:01:52,409 --> 00:01:57,750
to books and tools you can use and

00:01:55,159 --> 00:02:00,320
hopefully maybe some questions but

00:01:57,750 --> 00:02:03,929
before we start should you actually lose

00:02:00,320 --> 00:02:07,409
deploy and use TLS there's one very

00:02:03,929 --> 00:02:10,890
short answer to that it's yes the bit

00:02:07,409 --> 00:02:15,090
longer answer is yes you should

00:02:10,890 --> 00:02:16,400
because TLS has just one big issue it's

00:02:15,090 --> 00:02:20,090
explained not

00:02:16,400 --> 00:02:22,370
moments but it's just not used widely

00:02:20,090 --> 00:02:24,230
enough yet so there's a website if you

00:02:22,370 --> 00:02:27,260
consider performance is still as fast

00:02:24,230 --> 00:02:29,689
yet they explain to you while keyless is

00:02:27,260 --> 00:02:32,720
actually fast enough

00:02:29,689 --> 00:02:35,180
usually the sometimes faster try hunch

00:02:32,720 --> 00:02:37,790
make this nice graph so it's downloading

00:02:35,180 --> 00:02:40,790
a big website lots of resource over HTTP

00:02:37,790 --> 00:02:44,420
takes almost six seconds we do that in

00:02:40,790 --> 00:02:47,260
the modern browser with HTTP - it looks

00:02:44,420 --> 00:02:50,510
like that BAM done one or two things

00:02:47,260 --> 00:02:54,379
much much much faster now the reason is

00:02:50,510 --> 00:02:58,280
if you happen to update chrome today Wow

00:02:54,379 --> 00:03:00,349
very lucky you will see that starting

00:02:58,280 --> 00:03:03,170
like yesterday night or today's morning

00:03:00,349 --> 00:03:06,200
depending on your update any kind of non

00:03:03,170 --> 00:03:10,310
HTTP link will give you a very big red

00:03:06,200 --> 00:03:13,069
warning box not secure of several

00:03:10,310 --> 00:03:15,139
websites fooling Google also give you

00:03:13,069 --> 00:03:17,810
much better page ranking when you use

00:03:15,139 --> 00:03:19,459
HTTPS so there's lots of reasons and

00:03:17,810 --> 00:03:22,280
these days is very easy to get a

00:03:19,459 --> 00:03:28,220
certificate for no money use let's

00:03:22,280 --> 00:03:31,040
encrypt fantastic tool so history as

00:03:28,220 --> 00:03:35,329
well sometimes be confusing because you

00:03:31,040 --> 00:03:37,099
have like SSL TLS and actually one is

00:03:35,329 --> 00:03:39,470
greater than three that's the first

00:03:37,099 --> 00:03:42,319
thing that people are confused when I

00:03:39,470 --> 00:03:43,609
talk to them about SSL TLS that one is

00:03:42,319 --> 00:03:48,949
bigger than three and one but 2 is

00:03:43,609 --> 00:03:49,760
actually hex 303 yeah SSL TLS sometimes

00:03:48,949 --> 00:03:51,560
start TLS

00:03:49,760 --> 00:03:56,440
I won't get into that's actually not

00:03:51,560 --> 00:04:00,079
that complicated but yeah these three

00:03:56,440 --> 00:04:02,120
that can be old ages Netscape 1993-94

00:04:00,079 --> 00:04:03,290
they wanted to solve ecommerce sending

00:04:02,120 --> 00:04:05,419
like critical information of the

00:04:03,290 --> 00:04:07,220
Internet and I figured out some way to

00:04:05,419 --> 00:04:10,970
encrypt that data so they came up with

00:04:07,220 --> 00:04:15,590
as 1.0 which was never released bit

00:04:10,970 --> 00:04:17,810
later they came up with so 2.0 1995 the

00:04:15,590 --> 00:04:20,269
first protocol that allowed encryption

00:04:17,810 --> 00:04:23,449
on the Internet as a standard and

00:04:20,269 --> 00:04:26,960
Beckman Netscape Navigator which was not

00:04:23,449 --> 00:04:28,849
that good so they figure out oh now we

00:04:26,960 --> 00:04:29,430
have to redesign the whole protocol to

00:04:28,849 --> 00:04:33,419
make us

00:04:29,430 --> 00:04:37,320
three but at the same time the ITF a

00:04:33,419 --> 00:04:39,060
sanitation body had also wanted to make

00:04:37,320 --> 00:04:41,190
that an official standard that works

00:04:39,060 --> 00:04:43,830
across multiple platforms and krauser's

00:04:41,190 --> 00:04:45,930
so they came out the idea let's

00:04:43,830 --> 00:04:48,360
tenderize that but let's give it a

00:04:45,930 --> 00:04:51,479
different name and restart the version

00:04:48,360 --> 00:04:53,160
numbers it's only very minor improvement

00:04:51,479 --> 00:04:55,770
a couple years later but they came up

00:04:53,160 --> 00:05:02,880
with a new name and actually Tia T last

00:04:55,770 --> 00:05:05,419
1.0 is SSL 3.1 internally couple of

00:05:02,880 --> 00:05:09,479
years later teals one but one which

00:05:05,419 --> 00:05:14,430
mitigated some attacks one or two was a

00:05:09,479 --> 00:05:17,639
big step ten years ago they added a ad

00:05:14,430 --> 00:05:19,949
and a better a PRF so the way how

00:05:17,639 --> 00:05:22,760
certain encryption works is no much

00:05:19,949 --> 00:05:26,039
better deals 1.2 than the older ones and

00:05:22,760 --> 00:05:28,500
eventually soonish hopefully for four

00:05:26,039 --> 00:05:31,080
years now in standardization is just 1.3

00:05:28,500 --> 00:05:34,050
which hopefully comes out in a couple of

00:05:31,080 --> 00:05:37,530
months from now this dennis is a thing

00:05:34,050 --> 00:05:39,660
finalized now but they still had like

00:05:37,530 --> 00:05:42,570
last two years trouble with certain

00:05:39,660 --> 00:05:46,110
hardware boxes there's several TL

00:05:42,570 --> 00:05:48,900
libraries you may encounter for us it's

00:05:46,110 --> 00:05:50,460
mostly important the OpenSSL library the

00:05:48,900 --> 00:05:53,130
other libraries are used like in Windows

00:05:50,460 --> 00:05:54,690
and Apple products but price me that

00:05:53,130 --> 00:05:56,370
were mostly interact with open messes

00:05:54,690 --> 00:06:00,900
all through other standard libraries our

00:05:56,370 --> 00:06:02,639
model or 2 pi open ssl yeah this is in

00:06:00,900 --> 00:06:04,590
most important libraries there's also

00:06:02,639 --> 00:06:06,419
written by core even field secure

00:06:04,590 --> 00:06:12,510
transport for your look three used in

00:06:06,419 --> 00:06:15,599
requests on mac OS to use the Apple cert

00:06:12,510 --> 00:06:18,030
at a basis only and just a quick look

00:06:15,599 --> 00:06:21,570
how it looks when you actually create a

00:06:18,030 --> 00:06:24,270
connection and as a model you first need

00:06:21,570 --> 00:06:26,340
to create some configuration space that

00:06:24,270 --> 00:06:27,750
holds information which kind of

00:06:26,340 --> 00:06:30,599
protocols you want to do that's the

00:06:27,750 --> 00:06:32,909
context you can do that of that way or

00:06:30,599 --> 00:06:34,919
can do it manually the first place you

00:06:32,909 --> 00:06:39,060
prefer the way it gives you always a

00:06:34,919 --> 00:06:41,310
nice lace security configuration will

00:06:39,060 --> 00:06:42,570
also update that in case there's some

00:06:41,310 --> 00:06:44,280
amount of attacks

00:06:42,570 --> 00:06:47,730
and then you have to create first the

00:06:44,280 --> 00:06:49,890
connection later wrap the connection and

00:06:47,730 --> 00:06:52,770
actually do the handshake and then you

00:06:49,890 --> 00:06:55,440
can start to send data over the wire and

00:06:52,770 --> 00:06:57,210
now I will run you through what happens

00:06:55,440 --> 00:07:01,470
at the different stages here throughout

00:06:57,210 --> 00:07:04,350
the whole rest of the presentation so

00:07:01,470 --> 00:07:07,230
high-level view what happens if you do

00:07:04,350 --> 00:07:09,270
in connection so how does a protocol

00:07:07,230 --> 00:07:12,150
work the first thing that most people

00:07:09,270 --> 00:07:15,440
will see if if you connect you get this

00:07:12,150 --> 00:07:18,840
nice shiny green lock symbol it means

00:07:15,440 --> 00:07:21,360
connection is secure and people think

00:07:18,840 --> 00:07:24,120
often that tls/ssl is mostly about

00:07:21,360 --> 00:07:27,420
encryption but actually it's much more

00:07:24,120 --> 00:07:30,350
than encryption is a very long

00:07:27,420 --> 00:07:33,560
presentation at definition by Wikipedia

00:07:30,350 --> 00:07:36,180
I've heard some of the key words it's

00:07:33,560 --> 00:07:39,240
communication security privacy and also

00:07:36,180 --> 00:07:41,910
data integrity so tillis SSL will not

00:07:39,240 --> 00:07:43,800
give you encryption but also integrity

00:07:41,910 --> 00:07:45,990
of the data so nobody can modify a

00:07:43,800 --> 00:07:49,410
temper with the information I also give

00:07:45,990 --> 00:07:53,240
you strong identification and of the

00:07:49,410 --> 00:07:55,890
peer so the core features of tls/ssl are

00:07:53,240 --> 00:07:57,900
encryption or we most people already

00:07:55,890 --> 00:08:00,060
figure probably out it's also

00:07:57,900 --> 00:08:01,920
interesting to know that's protocol

00:08:00,060 --> 00:08:05,040
agnostic you can run much more than just

00:08:01,920 --> 00:08:06,870
HTTP you can run like email you can IMAP

00:08:05,040 --> 00:08:10,560
you can run your database connection

00:08:06,870 --> 00:08:12,690
over tls/ssl and sometimes you use

00:08:10,560 --> 00:08:15,240
instead of Kilis SSL something called

00:08:12,690 --> 00:08:16,800
start TLS that just means you first

00:08:15,240 --> 00:08:18,600
create the connection do some

00:08:16,800 --> 00:08:20,460
communication then upgrade your

00:08:18,600 --> 00:08:23,640
connection to encrypted one so let's

00:08:20,460 --> 00:08:25,620
start TLS you also get the integrity

00:08:23,640 --> 00:08:27,780
check so that nobody can change your

00:08:25,620 --> 00:08:30,630
data you get something called replay

00:08:27,780 --> 00:08:33,120
attack protection and take account like

00:08:30,630 --> 00:08:34,890
record your bank transaction and send

00:08:33,120 --> 00:08:37,349
that a couple of time again later on to

00:08:34,890 --> 00:08:40,590
the bank to get more money from you it's

00:08:37,349 --> 00:08:42,690
also protected certain authentication of

00:08:40,590 --> 00:08:44,400
the server that's the one thing you get

00:08:42,690 --> 00:08:47,310
with the certificates and this also

00:08:44,400 --> 00:08:48,660
shrine pretty bar and for enterprise

00:08:47,310 --> 00:08:50,730
users if you like smart cut

00:08:48,660 --> 00:08:53,400
authentication or server-to-server

00:08:50,730 --> 00:08:56,130
authentication or for application back

00:08:53,400 --> 00:08:59,160
and you can also use client certificates

00:08:56,130 --> 00:09:00,839
on the on the client side so the client

00:08:59,160 --> 00:09:02,839
can offer to get weird the same kind of

00:09:00,839 --> 00:09:07,259
certificate as server certificate

00:09:02,839 --> 00:09:09,870
yeah and it's extensible which came in

00:09:07,259 --> 00:09:14,759
very in handy for Till's 103 because it

00:09:09,870 --> 00:09:17,940
builds a partly new protocol on the

00:09:14,759 --> 00:09:19,380
actual all protocol we got a lot of

00:09:17,940 --> 00:09:22,649
difference then that's just a cup of

00:09:19,380 --> 00:09:26,220
buzzwords you will see throughout the

00:09:22,649 --> 00:09:29,190
next slides and all this combination of

00:09:26,220 --> 00:09:31,620
different protocols and standards and

00:09:29,190 --> 00:09:33,750
network layers makes it rather hard to

00:09:31,620 --> 00:09:35,459
debug understand what's going wrong so

00:09:33,750 --> 00:09:38,819
it can go wrong on multiple layers

00:09:35,459 --> 00:09:40,889
starting from the network crypto can go

00:09:38,819 --> 00:09:42,240
wrong the certificates kind of wrong ace

00:09:40,889 --> 00:09:44,790
and one of the rather complicated

00:09:42,240 --> 00:09:50,279
standard that the formatted certificates

00:09:44,790 --> 00:09:52,949
I encoded in and yeah it's a bit of pain

00:09:50,279 --> 00:09:55,589
but hopefully I was able to explain some

00:09:52,949 --> 00:09:57,990
of the issues I see both in daily life

00:09:55,589 --> 00:10:01,079
at the maintainer as L model and at my

00:09:57,990 --> 00:10:04,380
work and how cute you understand so

00:10:01,079 --> 00:10:06,810
first of all connection first thing we

00:10:04,380 --> 00:10:08,250
do we have to talk for servers

00:10:06,810 --> 00:10:10,680
connectors so somehow

00:10:08,250 --> 00:10:15,089
and during that connection the initial

00:10:10,680 --> 00:10:17,009
handshake we do three vital steps first

00:10:15,089 --> 00:10:20,009
we have to agree on some kind of

00:10:17,009 --> 00:10:21,600
parameters to like which protocol

00:10:20,009 --> 00:10:23,970
version we talk which ciphers use we

00:10:21,600 --> 00:10:26,370
talk and we have to authenticate the

00:10:23,970 --> 00:10:27,990
server so nobody can do Menor middle

00:10:26,370 --> 00:10:32,100
attack so there's no attacker that can

00:10:27,990 --> 00:10:34,920
just pretend to be like your bank or

00:10:32,100 --> 00:10:36,480
your email provider and the last thing

00:10:34,920 --> 00:10:38,639
we need to do the actual encryption

00:10:36,480 --> 00:10:42,029
later on it's agree on something called

00:10:38,639 --> 00:10:44,220
the pre-master secret that's a shared

00:10:42,029 --> 00:10:46,050
secret that's then used to derive most

00:10:44,220 --> 00:10:50,519
secrets to do encryption and protection

00:10:46,050 --> 00:10:53,490
on the wire so first thing we have to

00:10:50,519 --> 00:10:56,759
look up the name do a kiss be handshake

00:10:53,490 --> 00:10:59,850
to establish a connection then the

00:10:56,759 --> 00:11:01,500
client sends certain part of hello the

00:10:59,850 --> 00:11:04,500
server answers with another hello and

00:11:01,500 --> 00:11:08,639
some other fields I will fill in later

00:11:04,500 --> 00:11:09,860
on and finally then the client sends

00:11:08,639 --> 00:11:11,570
something back that you

00:11:09,860 --> 00:11:14,269
of handshake so you see it's like

00:11:11,570 --> 00:11:16,430
ping-pong ping-pong and only at the very

00:11:14,269 --> 00:11:20,899
end we start the actual encrypted

00:11:16,430 --> 00:11:24,649
communication the let's make tell us a

00:11:20,899 --> 00:11:27,200
bit slow if you use it that way it's

00:11:24,649 --> 00:11:29,990
also optimized and here's 103 or if you

00:11:27,200 --> 00:11:32,930
use session resumption which is a bit

00:11:29,990 --> 00:11:36,260
advanced topic I'll can't talk during my

00:11:32,930 --> 00:11:39,410
talk so first step just establishing

00:11:36,260 --> 00:11:41,480
this initial TCP handshake looking out

00:11:39,410 --> 00:11:44,269
the name and saying the initial client

00:11:41,480 --> 00:11:47,570
hello that can go wrong how to walk

00:11:44,269 --> 00:11:49,310
buddies already so just get like a name

00:11:47,570 --> 00:11:52,519
of service unknown error usually means

00:11:49,310 --> 00:11:55,700
your host names unknown so just maybe

00:11:52,519 --> 00:11:58,130
some time DNS issues made a typo there's

00:11:55,700 --> 00:12:01,070
also connection refused maybe the server

00:11:58,130 --> 00:12:04,459
star maybe the network is down so that

00:12:01,070 --> 00:12:06,050
happens on the TCP level sometimes you

00:12:04,459 --> 00:12:09,940
get the error message from version

00:12:06,050 --> 00:12:12,500
number I'll come back to that later

00:12:09,940 --> 00:12:14,570
sometimes just you sent something to the

00:12:12,500 --> 00:12:16,670
server and just kills the connection

00:12:14,570 --> 00:12:20,390
error number zero which is rather

00:12:16,670 --> 00:12:22,790
annoying or in some cases it's just

00:12:20,390 --> 00:12:26,269
blocks hangs and does nothing that can

00:12:22,790 --> 00:12:29,899
be a whole different list of issues from

00:12:26,269 --> 00:12:31,820
firewall issues to network integrity to

00:12:29,899 --> 00:12:34,430
some service even if you send something

00:12:31,820 --> 00:12:36,800
they don't understand like new protocol

00:12:34,430 --> 00:12:40,010
versions they just block they are

00:12:36,800 --> 00:12:43,040
playing nice do you get the hang of it

00:12:40,010 --> 00:12:45,199
to see what's going on and to diagnose

00:12:43,040 --> 00:12:48,320
the first kind of issues I always start

00:12:45,199 --> 00:12:51,649
to first like look up the host name can

00:12:48,320 --> 00:12:54,769
actually resolve it maybe send a ping to

00:12:51,649 --> 00:12:56,890
the server so ping just sends a ICMP

00:12:54,769 --> 00:12:59,240
package to the other peer replies

00:12:56,890 --> 00:13:02,029
protocol comes from submarines so the

00:12:59,240 --> 00:13:04,790
tenth is ping and hopefully so replies

00:13:02,029 --> 00:13:07,430
were there which also helps to sieve the

00:13:04,790 --> 00:13:10,850
basic network connection works you can

00:13:07,430 --> 00:13:12,740
like trace routing that things to

00:13:10,850 --> 00:13:15,949
different steps so the routers and

00:13:12,740 --> 00:13:18,920
servers the routed through that my hope

00:13:15,949 --> 00:13:21,529
and if nothing else works you can still

00:13:18,920 --> 00:13:23,420
use it to a called TCP dump to look on

00:13:21,529 --> 00:13:27,020
the raw network layer

00:13:23,420 --> 00:13:30,140
which is kind of a lot of gibberish and

00:13:27,020 --> 00:13:32,810
how to read I can't read that myself

00:13:30,140 --> 00:13:33,920
very well but there's all tools I'll

00:13:32,810 --> 00:13:36,620
show you later

00:13:33,920 --> 00:13:42,700
that is very makes it much more

00:13:36,620 --> 00:13:45,080
approachable so one tool you can use to

00:13:42,700 --> 00:13:48,110
diagnose the kind of issues when you run

00:13:45,080 --> 00:13:50,990
on a server that I discover just like an

00:13:48,110 --> 00:13:55,690
year ago is you have the heard of the to

00:13:50,990 --> 00:13:58,610
curl the download tool it's just a

00:13:55,690 --> 00:14:04,010
common tool tool to download resources

00:13:58,610 --> 00:14:06,320
also has two options - s - V which gives

00:14:04,010 --> 00:14:08,150
you a enormous amount of information

00:14:06,320 --> 00:14:12,220
about the handshake you see all the

00:14:08,150 --> 00:14:16,430
steps in the handshake on the console so

00:14:12,220 --> 00:14:20,060
so these tools just some rather map DNS

00:14:16,430 --> 00:14:22,190
lookup ping Wireshark correct W get it's

00:14:20,060 --> 00:14:24,050
also an map port scanner you can figure

00:14:22,190 --> 00:14:28,970
out which ports are open or the

00:14:24,050 --> 00:14:30,920
firewalls blocked or very if you have

00:14:28,970 --> 00:14:32,870
access to the server just read the

00:14:30,920 --> 00:14:35,930
firewall locks read the server logs if

00:14:32,870 --> 00:14:38,240
you see any kind of errors or if you

00:14:35,930 --> 00:14:40,400
have a HTTP server Wow

00:14:38,240 --> 00:14:42,230
just use your browser just try to

00:14:40,400 --> 00:14:46,850
connect to your so with your web browser

00:14:42,230 --> 00:14:48,650
and see if that works ok we have the TCP

00:14:46,850 --> 00:14:51,650
connection out to the server resent the

00:14:48,650 --> 00:14:54,710
initial hello and let's see how the

00:14:51,650 --> 00:14:57,380
handshake works internally so again we

00:14:54,710 --> 00:14:59,840
have the DNS lookup we sent the client

00:14:57,380 --> 00:15:01,970
hello the client hello this package we

00:14:59,840 --> 00:15:04,400
Center the first tells the server which

00:15:01,970 --> 00:15:09,200
kind of versions we can talk which

00:15:04,400 --> 00:15:14,030
ciphers we could support and some random

00:15:09,200 --> 00:15:16,790
value and the server when it can handle

00:15:14,030 --> 00:15:18,920
the information and since back the

00:15:16,790 --> 00:15:20,510
server hello and it sends back the

00:15:18,920 --> 00:15:22,460
information which cypher student

00:15:20,510 --> 00:15:25,840
selected which version is selected and

00:15:22,460 --> 00:15:32,060
also random value and from there on we

00:15:25,840 --> 00:15:35,810
go on and we had that a couple minutes

00:15:32,060 --> 00:15:36,830
ago either wrong version number

00:15:35,810 --> 00:15:41,030
connection hang

00:15:36,830 --> 00:15:43,690
if the server doesn't reply with server

00:15:41,030 --> 00:15:47,150
hello were replied with this information

00:15:43,690 --> 00:15:48,800
from where's number that off means you

00:15:47,150 --> 00:15:50,870
may not actually talk to something

00:15:48,800 --> 00:15:52,880
that's an SSL TLS server maybe you have

00:15:50,870 --> 00:15:54,650
misconfigured you Apache or an engine

00:15:52,880 --> 00:15:59,030
crap server to not actually respond to

00:15:54,650 --> 00:16:00,710
HTTP it's something that is rather

00:15:59,030 --> 00:16:02,930
common if you start to deploy a new

00:16:00,710 --> 00:16:06,410
server and something it's not very

00:16:02,930 --> 00:16:10,100
obvious several other error messages you

00:16:06,410 --> 00:16:12,260
may get from oak messes L fail to

00:16:10,100 --> 00:16:14,870
negotiate except the hotel s-parameters

00:16:12,260 --> 00:16:16,550
handshake failure that can mean that any

00:16:14,870 --> 00:16:18,440
kind of this information what you

00:16:16,550 --> 00:16:20,450
support as a client is not

00:16:18,440 --> 00:16:22,550
understandable by the server and the

00:16:20,450 --> 00:16:24,200
some have policy the server tells you I

00:16:22,550 --> 00:16:27,950
don't like to talk to you with these

00:16:24,200 --> 00:16:29,630
parameters there is no way to get more

00:16:27,950 --> 00:16:32,030
information directly from the handshake

00:16:29,630 --> 00:16:33,980
because it so it just sends this generic

00:16:32,030 --> 00:16:36,410
error message back which is a bit of

00:16:33,980 --> 00:16:37,160
pickle but there are ways to get more

00:16:36,410 --> 00:16:41,840
information

00:16:37,160 --> 00:16:44,570
I want unsupported protocol that may

00:16:41,840 --> 00:16:47,150
mean that the server doesn't understand

00:16:44,570 --> 00:16:48,410
the killer's protocol but sometimes when

00:16:47,150 --> 00:16:50,120
it doesn't understand to kill as

00:16:48,410 --> 00:16:53,780
protocol version also sends the first

00:16:50,120 --> 00:16:55,490
error message again O's arrow it doesn't

00:16:53,780 --> 00:16:59,990
know what you're doing maybe just kills

00:16:55,490 --> 00:17:02,420
you kills the connection and if you knew

00:16:59,990 --> 00:17:03,650
you know version of Python do you have

00:17:02,420 --> 00:17:05,510
different kind of protocols on the

00:17:03,650 --> 00:17:11,060
client side may be selected the wrong

00:17:05,510 --> 00:17:15,530
one so handshake failure it's internally

00:17:11,060 --> 00:17:17,900
version um error number forty means for

00:17:15,530 --> 00:17:20,030
example you can't agree on a common

00:17:17,900 --> 00:17:22,459
sizes huge the list of ciphers you can

00:17:20,030 --> 00:17:25,010
speak happens raw often if the update

00:17:22,459 --> 00:17:27,199
open SSL to a new version or install a

00:17:25,010 --> 00:17:30,230
security update it disables all cipher

00:17:27,199 --> 00:17:33,170
suits unsupported that can also mean

00:17:30,230 --> 00:17:35,450
sometimes told a couple minutes ago a

00:17:33,170 --> 00:17:38,420
minute ago that the server doesn't know

00:17:35,450 --> 00:17:39,740
utilized version or that several of the

00:17:38,420 --> 00:17:43,730
other parameters you send to the server

00:17:39,740 --> 00:17:45,530
is unknown and not understandable so you

00:17:43,730 --> 00:17:49,150
got this error number 40 in a whole

00:17:45,530 --> 00:17:52,540
bunch of possible ways it can go wrong

00:17:49,150 --> 00:17:54,760
and the only way to figure out what goes

00:17:52,540 --> 00:17:57,250
wrong here you get that Aramis is

00:17:54,760 --> 00:17:59,950
actually use a tool that just tries

00:17:57,250 --> 00:18:03,010
different combination of parameters over

00:17:59,950 --> 00:18:04,750
and over again to give you a hint which

00:18:03,010 --> 00:18:07,840
kind of cipher suits entails versions

00:18:04,750 --> 00:18:10,420
your server supports one is a command

00:18:07,840 --> 00:18:14,160
line tool called SSL scan so every line

00:18:10,420 --> 00:18:16,600
you see here like this guru Jack fail

00:18:14,160 --> 00:18:18,250
anytime you get this line means it

00:18:16,600 --> 00:18:21,430
creates a new network connection it

00:18:18,250 --> 00:18:23,860
configures just one version of kill SSL

00:18:21,430 --> 00:18:26,770
once once Eiffel suit and then gives you

00:18:23,860 --> 00:18:28,450
the kind of error message so and that

00:18:26,770 --> 00:18:30,730
usually creates like a couple of hundred

00:18:28,450 --> 00:18:33,340
connections which looks loud ugly on the

00:18:30,730 --> 00:18:35,440
website under web server locks but it's

00:18:33,340 --> 00:18:40,060
the only way to figure out what's going

00:18:35,440 --> 00:18:43,630
on or if you can have a public service I

00:18:40,060 --> 00:18:47,170
totally live this website it's all labs

00:18:43,630 --> 00:18:50,290
so make small screen recording that

00:18:47,170 --> 00:18:52,780
gives you very nice diagnostics and so

00:18:50,290 --> 00:18:54,700
here test a pattern of Arc gives you

00:18:52,780 --> 00:18:57,610
some grading tells me how the

00:18:54,700 --> 00:18:59,620
certificate chain looks like which

00:18:57,610 --> 00:19:01,540
protocol version a support and it even

00:18:59,620 --> 00:19:04,810
gives me not only a list of all the

00:19:01,540 --> 00:19:07,330
cypher suits but also different version

00:19:04,810 --> 00:19:09,970
of Android Windows Mac OS different

00:19:07,330 --> 00:19:12,700
browsers and tells me what they will

00:19:09,970 --> 00:19:16,120
able to negotiate is best selection of

00:19:12,700 --> 00:19:18,730
cypher suits also it tests for several

00:19:16,120 --> 00:19:21,520
known attacks and gives you a list and

00:19:18,730 --> 00:19:24,730
which kind of vulnerabilities your web

00:19:21,520 --> 00:19:29,050
server ha has or which countermeasures

00:19:24,730 --> 00:19:33,280
you have to take ok we talked a bit

00:19:29,050 --> 00:19:34,990
about the cipher suits and I'll give you

00:19:33,280 --> 00:19:38,110
very very short introduction like three

00:19:34,990 --> 00:19:40,150
minutes in crypto to give you some of

00:19:38,110 --> 00:19:41,800
the steps we have in cipher suits to

00:19:40,150 --> 00:19:45,070
explain how they suffered usually build

00:19:41,800 --> 00:19:46,930
up and you also need that later on to

00:19:45,070 --> 00:19:49,600
understand how certificates work because

00:19:46,930 --> 00:19:51,850
both for the handshake verification of

00:19:49,600 --> 00:19:53,950
certificates and the chaining the

00:19:51,850 --> 00:19:58,210
signature of certificates we need public

00:19:53,950 --> 00:20:01,000
key crypto it's small very nice a key

00:19:58,210 --> 00:20:02,320
way to explain it so public key crypto

00:20:01,000 --> 00:20:05,110
means you have

00:20:02,320 --> 00:20:06,970
two different parts Yeti a public-key

00:20:05,110 --> 00:20:09,880
something you can just hand out to

00:20:06,970 --> 00:20:12,179
everybody you have a private key that's

00:20:09,880 --> 00:20:15,909
why it's also called a symmetric crypto

00:20:12,179 --> 00:20:18,850
that basically three ways to do as a

00:20:15,909 --> 00:20:21,490
meta crypto there are two ways one way

00:20:18,850 --> 00:20:24,130
is you can use a private key to sign a

00:20:21,490 --> 00:20:26,500
document virtually the fingerprint the

00:20:24,130 --> 00:20:28,899
hash of a document and people with a

00:20:26,500 --> 00:20:30,940
public key are able to verify that you

00:20:28,899 --> 00:20:33,490
have signed the document not some

00:20:30,940 --> 00:20:39,460
attacker that's on the your your right

00:20:33,490 --> 00:20:41,679
side yes or on the left side is if

00:20:39,460 --> 00:20:45,220
somebody can use your public key to

00:20:41,679 --> 00:20:48,009
encrypt some data and only the owner of

00:20:45,220 --> 00:20:50,919
the private key is able to revert that

00:20:48,009 --> 00:20:55,179
encryption decrypt the actual encrypted

00:20:50,919 --> 00:20:57,519
data so as some an encryption that are a

00:20:55,179 --> 00:21:01,450
couple of algorithms the red ones are

00:20:57,519 --> 00:21:05,200
the bad ones you shouldn't use they're

00:21:01,450 --> 00:21:08,649
also yeah things about estimating

00:21:05,200 --> 00:21:12,039
encryption is it's extremely slow it's

00:21:08,649 --> 00:21:14,049
very complex very long the mathematical

00:21:12,039 --> 00:21:16,870
operation that only can handle a couple

00:21:14,049 --> 00:21:19,350
of bites and it only takes lots of CPR

00:21:16,870 --> 00:21:22,570
cycles if you don't look like large

00:21:19,350 --> 00:21:23,139
images videos over the internet computer

00:21:22,570 --> 00:21:24,580
games

00:21:23,139 --> 00:21:26,289
you don't want to spend the amount of

00:21:24,580 --> 00:21:28,240
CPU time so we need another way to

00:21:26,289 --> 00:21:31,480
encrypt all the information that's

00:21:28,240 --> 00:21:34,149
called bulk encryption for ahead of them

00:21:31,480 --> 00:21:38,230
so these days we use either a yes or a

00:21:34,149 --> 00:21:40,570
ChaCha 20 again the rc4 or Triple DES or

00:21:38,230 --> 00:21:43,179
the decimal are the old ones and these

00:21:40,570 --> 00:21:47,379
two like take like a couple of CPU

00:21:43,179 --> 00:21:51,580
cycles provide or even abused these days

00:21:47,379 --> 00:21:53,740
like we feel modern intro MD or shipped

00:21:51,580 --> 00:22:00,039
you have dedicated CPU instructions to

00:21:53,740 --> 00:22:02,080
make a is even faster so we also need to

00:22:00,039 --> 00:22:06,639
sign documents or assigned certificates

00:22:02,080 --> 00:22:08,529
you can use our es for that or there are

00:22:06,639 --> 00:22:11,200
several kind of new elliptic curve

00:22:08,529 --> 00:22:12,850
algorithms lip the curves operate with a

00:22:11,200 --> 00:22:15,100
different kind of math this is usually

00:22:12,850 --> 00:22:15,700
faster to upper right and make smaller

00:22:15,100 --> 00:22:18,669
keys

00:22:15,700 --> 00:22:20,980
are secured to one very important thing

00:22:18,669 --> 00:22:23,320
since signing is also very slow you have

00:22:20,980 --> 00:22:25,840
to first hash your document make like a

00:22:23,320 --> 00:22:28,899
fingerprint and then you can sign the

00:22:25,840 --> 00:22:32,710
hash - is very small usually like 16

00:22:28,899 --> 00:22:35,470
bytes or so and you can hedge like very

00:22:32,710 --> 00:22:41,220
lengthy documents and then sign this

00:22:35,470 --> 00:22:44,260
very small hash and there are also

00:22:41,220 --> 00:22:46,690
several hashing algorithms md5 and sha-1

00:22:44,260 --> 00:22:50,260
are very insecure then use them these

00:22:46,690 --> 00:22:53,830
days mostly if you have till SSL

00:22:50,260 --> 00:22:56,970
Certificates is shot too so and the

00:22:53,830 --> 00:22:59,799
third way to do a symmetric crypto is

00:22:56,970 --> 00:23:02,169
something called a creep key agreement

00:22:59,799 --> 00:23:05,559
protocol or a so-called diffie-hellman

00:23:02,169 --> 00:23:08,620
operation where you can use some tricks

00:23:05,559 --> 00:23:13,240
to agree on a comment secret with up

00:23:08,620 --> 00:23:16,299
sending the secret over the wire with

00:23:13,240 --> 00:23:19,120
this kind of operation to Wikipedia

00:23:16,299 --> 00:23:20,620
explains that was mixing colors you have

00:23:19,120 --> 00:23:23,169
the private color you have a common

00:23:20,620 --> 00:23:24,639
public color you mix your private color

00:23:23,169 --> 00:23:28,330
with the common color sent over the wire

00:23:24,639 --> 00:23:30,340
yep aside it's the same its own private

00:23:28,330 --> 00:23:35,080
color to the mix and they both have the

00:23:30,340 --> 00:23:38,409
same color at the end and all these bits

00:23:35,080 --> 00:23:41,470
and pieces will up the soil code cypher

00:23:38,409 --> 00:23:44,080
suit so if the key agreement to agree on

00:23:41,470 --> 00:23:45,970
a comment premaster secret you have

00:23:44,080 --> 00:23:48,730
something to authenticate the Pierre

00:23:45,970 --> 00:23:51,070
you have the fastback encryption which

00:23:48,730 --> 00:23:54,580
also sometimes needs a mode of operation

00:23:51,070 --> 00:23:57,220
for block ciphers and finally the hash

00:23:54,580 --> 00:24:00,940
functions you use to verify some of the

00:23:57,220 --> 00:24:03,490
parameters and that's the toughest eats

00:24:00,940 --> 00:24:07,389
so you can still that so just go through

00:24:03,490 --> 00:24:09,250
the first line to keep in time the first

00:24:07,389 --> 00:24:12,190
one is an epoch curve diffie-hellman

00:24:09,250 --> 00:24:15,250
agreement I use also elliptic curves to

00:24:12,190 --> 00:24:19,019
authenticate the server yes with girls

00:24:15,250 --> 00:24:22,419
counter mode as block cipher and sha 384

00:24:19,019 --> 00:24:24,279
to verify the connection that's the

00:24:22,419 --> 00:24:28,090
official standardized name from the

00:24:24,279 --> 00:24:29,500
Ayana but if you ever used up masala

00:24:28,090 --> 00:24:31,660
reconfigured

00:24:29,500 --> 00:24:34,930
Seifer suits and python they look

00:24:31,660 --> 00:24:37,330
totally different because well open so

00:24:34,930 --> 00:24:40,110
decided why use standard names

00:24:37,330 --> 00:24:44,320
let's count with our own rules all names

00:24:40,110 --> 00:24:46,930
they map rather funny so the surface

00:24:44,320 --> 00:24:48,580
maps to that very short name because

00:24:46,930 --> 00:24:50,670
they figured out they can just omit lots

00:24:48,580 --> 00:24:53,170
of bits and pieces for common things

00:24:50,670 --> 00:24:54,430
some map choose like longer names you

00:24:53,170 --> 00:25:00,220
can actually recognize the different

00:24:54,430 --> 00:25:02,140
bits and pieces yeah - you can use the

00:25:00,220 --> 00:25:05,610
new version of Python you think pattern

00:25:02,140 --> 00:25:07,570
3 6 you can use the get cipher tool to

00:25:05,610 --> 00:25:12,190
configure a cipher student and get a

00:25:07,570 --> 00:25:14,740
list of support ones if you work with

00:25:12,190 --> 00:25:17,050
some kind of governmental bodies

00:25:14,740 --> 00:25:19,720
you may also run in additional

00:25:17,050 --> 00:25:23,260
restrictions result cipher suits call

00:25:19,720 --> 00:25:27,430
either tips cost or the Chinese one

00:25:23,260 --> 00:25:30,700
these are standards you should not

00:25:27,430 --> 00:25:33,010
actually use unless you have to work

00:25:30,700 --> 00:25:34,600
either for the US government or for the

00:25:33,010 --> 00:25:37,660
Russian government or Chinese government

00:25:34,600 --> 00:25:40,150
or have like restrictions on the market

00:25:37,660 --> 00:25:43,600
yourself so typical Python developer or

00:25:40,150 --> 00:25:46,960
engineers ignore these especially don't

00:25:43,600 --> 00:25:50,610
look into FIPS mode 15 it's a mode to

00:25:46,960 --> 00:25:54,730
run open SSL you don't need that

00:25:50,610 --> 00:25:56,350
so if geocentric part 2 just to rev up

00:25:54,730 --> 00:26:00,190
what we have learned so far and add that

00:25:56,350 --> 00:26:03,220
to the mix so we sent the client hello

00:26:00,190 --> 00:26:05,380
the server sent back the server hollow

00:26:03,220 --> 00:26:07,060
also sends back the certificate chain

00:26:05,380 --> 00:26:12,280
which will the next part of my

00:26:07,060 --> 00:26:14,320
presentation and in the RSA hensch like

00:26:12,280 --> 00:26:17,920
the old one we used the client would

00:26:14,320 --> 00:26:20,290
just select a secret encrypted with the

00:26:17,920 --> 00:26:23,440
public heat cook from the server as part

00:26:20,290 --> 00:26:25,030
of the certificate chain and then send

00:26:23,440 --> 00:26:27,310
it over to the server the server can

00:26:25,030 --> 00:26:28,600
then uses private key to decrypt that

00:26:27,310 --> 00:26:32,650
premaster secret

00:26:28,600 --> 00:26:34,420
and finally they changed cycle spec that

00:26:32,650 --> 00:26:38,760
means this switch over to encrypted

00:26:34,420 --> 00:26:42,190
communication this variety big issue

00:26:38,760 --> 00:26:43,240
since a client selects the private the

00:26:42,190 --> 00:26:46,510
shared master key

00:26:43,240 --> 00:26:49,870
and sent with a wire if an attacker with

00:26:46,510 --> 00:26:51,580
lots of hardest would just record all

00:26:49,870 --> 00:26:53,770
this information like for years and

00:26:51,580 --> 00:26:56,890
years and years and then somehow get the

00:26:53,770 --> 00:26:59,559
private key attacker would be able to

00:26:56,890 --> 00:27:01,840
decrypt all traffic for the last decade

00:26:59,559 --> 00:27:04,330
or even longer and there are some

00:27:01,840 --> 00:27:06,309
entities who have big big distance

00:27:04,330 --> 00:27:11,890
pastes somewhere in the desert of

00:27:06,309 --> 00:27:13,059
whatever so that's why we these days use

00:27:11,890 --> 00:27:14,620
a different way we use the

00:27:13,059 --> 00:27:18,970
diffie-hellman key exchange

00:27:14,620 --> 00:27:22,270
that means the server sends back some

00:27:18,970 --> 00:27:26,470
parameters and sends back his public key

00:27:22,270 --> 00:27:28,660
to the client and uses his private key

00:27:26,470 --> 00:27:32,230
of the certificate chain to sign that

00:27:28,660 --> 00:27:36,220
and this the client can then verify this

00:27:32,230 --> 00:27:38,770
signature with the public key and also

00:27:36,220 --> 00:27:41,110
generates on Defamer private public key

00:27:38,770 --> 00:27:44,290
percent the public key is the final

00:27:41,110 --> 00:27:48,309
message and both have then agreed on a

00:27:44,290 --> 00:27:50,380
private key so and that's the fair

00:27:48,309 --> 00:27:52,809
multiple Hellman key exchange with the

00:27:50,380 --> 00:27:53,740
very important step it's perfect forward

00:27:52,809 --> 00:27:56,620
secrecy

00:27:53,740 --> 00:27:57,820
so it's since they throw away the keys

00:27:56,620 --> 00:28:01,179
of the each operation

00:27:57,820 --> 00:28:04,390
these handshake I think I can't record

00:28:01,179 --> 00:28:06,790
that although actually until us one or

00:28:04,390 --> 00:28:09,179
two is not yet secured the actual ways

00:28:06,790 --> 00:28:12,490
to crack that with session resumption

00:28:09,179 --> 00:28:17,080
but that's fixed and here's one of three

00:28:12,490 --> 00:28:18,790
that we'll talk for next year in pattern

00:28:17,080 --> 00:28:20,890
you can't get that many information so

00:28:18,790 --> 00:28:25,360
I'm now used to open a command line tool

00:28:20,890 --> 00:28:29,890
to make a connection with this ciphers

00:28:25,360 --> 00:28:32,110
huge the modern one and that's the

00:28:29,890 --> 00:28:34,120
certificate chain you'll get I'll come

00:28:32,110 --> 00:28:35,800
to that in a minute some other

00:28:34,120 --> 00:28:40,179
information you will get you see which

00:28:35,800 --> 00:28:41,770
kind of connection it made and this it's

00:28:40,179 --> 00:28:44,860
a bit hard to read you don't understand

00:28:41,770 --> 00:28:46,570
what's going on the wire but this one

00:28:44,860 --> 00:28:50,290
too you can look on the bio what's going

00:28:46,570 --> 00:28:53,020
on it's called a Wireshark and I'll show

00:28:50,290 --> 00:28:56,020
you how cool a Chile's now recording I

00:28:53,020 --> 00:28:56,950
made a rule to look for pop for three

00:28:56,020 --> 00:28:59,500
it's

00:28:56,950 --> 00:29:02,039
ts Python made a connection with that

00:28:59,500 --> 00:29:05,169
come online zero we're now filtering out

00:29:02,039 --> 00:29:07,480
just interested in the keyless

00:29:05,169 --> 00:29:10,419
communication we created a connection

00:29:07,480 --> 00:29:13,419
kills one a to the Y of mattias one at

00:29:10,419 --> 00:29:15,100
zero but that's not the important we

00:29:13,419 --> 00:29:18,450
said also the hostname we're interested

00:29:15,100 --> 00:29:23,860
to talk to you and the server replies

00:29:18,450 --> 00:29:25,450
with the server hello we yeah so

00:29:23,860 --> 00:29:29,880
actually as I force you to select some

00:29:25,450 --> 00:29:34,570
other parameters elliptic curve we got a

00:29:29,880 --> 00:29:36,909
certificate chain back so this is a

00:29:34,570 --> 00:29:40,389
certificate we got they sent to back the

00:29:36,909 --> 00:29:44,110
entity cert an intermediate search with

00:29:40,389 --> 00:29:47,620
lots of additional informations we also

00:29:44,110 --> 00:29:49,389
now have the key exchange so you see if

00:29:47,620 --> 00:29:51,340
the diffie-hellman key exchange will

00:29:49,389 --> 00:29:55,539
uptick curve diffie-hellman that's a

00:29:51,340 --> 00:29:57,820
public key there's the signature with

00:29:55,539 --> 00:30:00,760
the private key of the server and then

00:29:57,820 --> 00:30:02,799
the client verifies the information also

00:30:00,760 --> 00:30:05,529
the client key exchange since its

00:30:02,799 --> 00:30:08,019
properly key and at the moment we should

00:30:05,529 --> 00:30:09,909
switch to encrypted communication that's

00:30:08,019 --> 00:30:12,309
the N Shake and this is one of my

00:30:09,909 --> 00:30:16,630
favourite tools to look into

00:30:12,309 --> 00:30:19,480
communication but you need a GUI program

00:30:16,630 --> 00:30:22,480
for every use interface which makes it

00:30:19,480 --> 00:30:24,399
not suitable for servers but in the

00:30:22,480 --> 00:30:27,190
beginning I talked about TCP dump you

00:30:24,399 --> 00:30:29,320
can use TCP dump to dump Network

00:30:27,190 --> 00:30:32,230
communication your server to a file as a

00:30:29,320 --> 00:30:35,740
root user download that file to your

00:30:32,230 --> 00:30:39,909
desktop computer and use the tool to

00:30:35,740 --> 00:30:40,809
diagnose that ok you have like 12

00:30:39,909 --> 00:30:43,510
minutes left

00:30:40,809 --> 00:30:46,090
it's enough for certificates so we have

00:30:43,510 --> 00:30:49,380
the handshake we have the premaster

00:30:46,090 --> 00:30:51,490
secret reach now we need some way to

00:30:49,380 --> 00:30:54,370
verify that we talked to the right

00:30:51,490 --> 00:30:57,000
server not to some kind of attacker ml

00:30:54,370 --> 00:30:59,620
in the middle attack and the whole

00:30:57,000 --> 00:31:02,230
verification process it's done with

00:30:59,620 --> 00:31:04,059
something called certificates or public

00:31:02,230 --> 00:31:07,029
hints for such a PKI

00:31:04,059 --> 00:31:09,220
the standard behind PKA the other very

00:31:07,029 --> 00:31:10,169
old standard from the 80s

00:31:09,220 --> 00:31:15,419
it's called

00:31:10,169 --> 00:31:18,149
5 online certificates XY prime are

00:31:15,419 --> 00:31:21,029
encoded and it's also all Senecal aids

00:31:18,149 --> 00:31:23,580
and one with different representation

00:31:21,029 --> 00:31:25,289
most of you you have seen if you have

00:31:23,580 --> 00:31:28,440
looked at a certificate or a private key

00:31:25,289 --> 00:31:30,929
something it looks like base64 encoded

00:31:28,440 --> 00:31:34,590
data was they begin and had a block

00:31:30,929 --> 00:31:38,580
that's just actually base64 encoded raw

00:31:34,590 --> 00:31:41,399
sn1 and these certificate always come

00:31:38,580 --> 00:31:45,389
and a pair of certificate and private

00:31:41,399 --> 00:31:47,489
keys one way to look at certificates oh

00:31:45,389 --> 00:31:50,369
there's also additional information are

00:31:47,489 --> 00:31:53,309
run through a minutes to look at a

00:31:50,369 --> 00:31:56,309
certificate there's a tool for

00:31:53,309 --> 00:32:00,539
text-based consoles and openness is all

00:31:56,309 --> 00:32:03,119
too so up missile x.509 we use the -

00:32:00,539 --> 00:32:06,450
text option you get the whole human

00:32:03,119 --> 00:32:08,789
readable text we use no out then you

00:32:06,450 --> 00:32:12,809
don't get the certificate again so it's

00:32:08,789 --> 00:32:15,809
a bit confusing but yeah and you get

00:32:12,809 --> 00:32:19,259
information like that certificates so

00:32:15,809 --> 00:32:21,419
you get some data first of all they have

00:32:19,259 --> 00:32:24,359
a version number these days you will

00:32:21,419 --> 00:32:26,100
only see version 3 ones except if you

00:32:24,359 --> 00:32:29,129
create your own ones without certain

00:32:26,100 --> 00:32:32,220
extensions they have a serial number

00:32:29,129 --> 00:32:34,320
that's a randomly selected number they

00:32:32,220 --> 00:32:36,899
used to be in serial but there were

00:32:34,320 --> 00:32:40,999
attacks and with random selected serial

00:32:36,899 --> 00:32:43,169
numbers it's bit more secure for the CA

00:32:40,999 --> 00:32:46,519
certificates are always signed by

00:32:43,169 --> 00:32:48,929
somebody to have designer name in there

00:32:46,519 --> 00:32:51,119
there well for a certain period with

00:32:48,929 --> 00:32:53,820
let's encrypt you typically have think

00:32:51,119 --> 00:32:58,980
three months yeah give or take three

00:32:53,820 --> 00:33:01,080
months and these also the subject was

00:32:58,980 --> 00:33:03,600
the name of the entity that requested

00:33:01,080 --> 00:33:05,820
the certificate that's these wicked for

00:33:03,600 --> 00:33:07,529
the Europe Python web site which

00:33:05,820 --> 00:33:09,629
actually has not the common names

00:33:07,529 --> 00:33:12,809
it's the n stands for common name EP

00:33:09,629 --> 00:33:15,450
2018 well it's later embedded in the

00:33:12,809 --> 00:33:17,009
certificates and finally we have the

00:33:15,450 --> 00:33:20,549
public key with some additional

00:33:17,009 --> 00:33:22,109
information that first block I shown you

00:33:20,549 --> 00:33:23,060
that's actually the version one

00:33:22,109 --> 00:33:26,540
information

00:33:23,060 --> 00:33:28,640
we have additional extensions the ex-59

00:33:26,540 --> 00:33:31,250
version 3 extension then the version 3

00:33:28,640 --> 00:33:34,790
certificates which also get these days

00:33:31,250 --> 00:33:39,260
have they have like a key usage how to

00:33:34,790 --> 00:33:41,480
use the certificate the signature means

00:33:39,260 --> 00:33:46,130
you can use the diffie-hellman key

00:33:41,480 --> 00:33:48,980
exchange and sign the secret key inside

00:33:46,130 --> 00:33:50,900
of a man means somebody can use specific

00:33:48,980 --> 00:33:53,870
to encrypt the key so this certificate

00:33:50,900 --> 00:33:57,200
you can use both kinds of encryption and

00:33:53,870 --> 00:33:59,030
signing without these you wouldn't be

00:33:57,200 --> 00:34:02,240
allowed to sign other fields you can

00:33:59,030 --> 00:34:06,200
have an that's like signing CAS signing

00:34:02,240 --> 00:34:09,650
revocation lists etc you also have an

00:34:06,200 --> 00:34:11,870
extended key usage which typically is

00:34:09,650 --> 00:34:14,870
web server sample web client you can

00:34:11,870 --> 00:34:19,429
also have ex energy usage for signing

00:34:14,870 --> 00:34:22,070
code CA false so that one is not a CA

00:34:19,429 --> 00:34:27,080
certificate it's an and entity

00:34:22,070 --> 00:34:30,919
certificates identifiers to build up the

00:34:27,080 --> 00:34:31,490
chain and some ways to get the

00:34:30,919 --> 00:34:34,100
certificate

00:34:31,490 --> 00:34:38,210
OCSP is online certificate revocation

00:34:34,100 --> 00:34:40,669
protocol status protocol and finally a

00:34:38,210 --> 00:34:44,390
list of names that city gets valid for

00:34:40,669 --> 00:34:50,540
and at the end that one is signed by a

00:34:44,390 --> 00:34:53,090
CA that's a signature so and we have

00:34:50,540 --> 00:34:56,000
three different major times you see it

00:34:53,090 --> 00:34:59,180
in web browsers you have first of all

00:34:56,000 --> 00:35:01,730
the arrest anchors a trust anchors also

00:34:59,180 --> 00:35:03,320
called root CAS these are self signed

00:35:01,730 --> 00:35:05,210
certificate they come pre-installed with

00:35:03,320 --> 00:35:08,420
a web browser or with your operating

00:35:05,210 --> 00:35:11,870
system and these are fully trusted

00:35:08,420 --> 00:35:15,100
certificates so then you have

00:35:11,870 --> 00:35:17,420
intermediate CAS these are also CAS

00:35:15,100 --> 00:35:20,570
already signed by other one you can have

00:35:17,420 --> 00:35:23,960
one too or just a chain of them we use

00:35:20,570 --> 00:35:26,360
intermediate CAS to keep the root CAS

00:35:23,960 --> 00:35:28,430
locked away securely so the intermediate

00:35:26,360 --> 00:35:31,760
CAS are typically in special hardware

00:35:28,430 --> 00:35:34,310
devices and the root CA is the keys

00:35:31,760 --> 00:35:36,240
printed out on paper and stop and

00:35:34,310 --> 00:35:38,609
evolved securely and

00:35:36,240 --> 00:35:42,270
not even a heart risk for security

00:35:38,609 --> 00:35:45,030
reasons and finally the silver

00:35:42,270 --> 00:35:48,359
certificate or the more technical terms

00:35:45,030 --> 00:35:51,660
and entities certificates these form is

00:35:48,359 --> 00:35:54,750
a chain so the root CA signs immediately

00:35:51,660 --> 00:35:57,030
one the next one sign next month and

00:35:54,750 --> 00:36:00,270
finally the end entity certificates the

00:35:57,030 --> 00:36:02,339
one you have on your machine and you

00:36:00,270 --> 00:36:07,920
have to post the website to send the

00:36:02,339 --> 00:36:09,660
whole chain back so I just skipped

00:36:07,920 --> 00:36:12,390
through that it's different field you

00:36:09,660 --> 00:36:19,740
can have gonna be a bit more too much

00:36:12,390 --> 00:36:22,109
time to explain that so the chain is you

00:36:19,740 --> 00:36:24,300
can see here the normal output all tool

00:36:22,109 --> 00:36:28,380
from other conference or present of the

00:36:24,300 --> 00:36:30,000
slides at you first have the your end

00:36:28,380 --> 00:36:32,339
entities certificate for your website

00:36:30,000 --> 00:36:36,240
and you have the next intermediate one

00:36:32,339 --> 00:36:42,720
and the route one will stay so on your

00:36:36,240 --> 00:36:44,369
browser installed and just in case just

00:36:42,720 --> 00:36:46,500
in case you wonder sometimes you see

00:36:44,369 --> 00:36:49,200
this big green bar that's it called

00:36:46,500 --> 00:36:50,700
Senate validation certificate this is

00:36:49,200 --> 00:36:53,819
just some additional fields on the

00:36:50,700 --> 00:36:55,559
certificates they use an extra process

00:36:53,819 --> 00:36:58,049
to validate you but these are not

00:36:55,559 --> 00:37:02,369
special certificate other than they have

00:36:58,049 --> 00:37:04,230
this additional field and one thing I

00:37:02,369 --> 00:37:07,410
want to point out please keep your

00:37:04,230 --> 00:37:11,520
private key security and don't throw

00:37:07,410 --> 00:37:13,099
them like on the pin so when the most

00:37:11,520 --> 00:37:16,440
common things that came along with

00:37:13,099 --> 00:37:19,250
verification is you get that kind of

00:37:16,440 --> 00:37:24,630
error message the most annoying one and

00:37:19,250 --> 00:37:27,390
too bad the service patent 3.6 or patent

00:37:24,630 --> 00:37:31,829
2.7 you won't get any more information

00:37:27,390 --> 00:37:33,930
back from python 3 7 is improved i added

00:37:31,829 --> 00:37:37,589
some extra code but you just get

00:37:33,930 --> 00:37:40,680
something went wrong so you have to use

00:37:37,589 --> 00:37:43,589
an external tool codes from open ssl for

00:37:40,680 --> 00:37:46,740
example to diagnose that such as client

00:37:43,589 --> 00:37:49,680
you connect to this client so he used

00:37:46,740 --> 00:37:53,880
bad ssl which is a nice work collect

00:37:49,680 --> 00:37:56,820
of eronel certificates or something is

00:37:53,880 --> 00:37:58,320
wrong and for that case also have to

00:37:56,820 --> 00:38:03,750
send the hosting I want to connect to

00:37:58,320 --> 00:38:08,040
and I get error message back for example

00:38:03,750 --> 00:38:09,660
here certificate has expired and I'm

00:38:08,040 --> 00:38:12,240
going through several of the error

00:38:09,660 --> 00:38:15,660
messages you make come back and give you

00:38:12,240 --> 00:38:19,010
some hints what can go wrong so one

00:38:15,660 --> 00:38:20,820
thing is obviously so it has expired so

00:38:19,010 --> 00:38:23,850
you have to get a new certificate

00:38:20,820 --> 00:38:27,540
somehow sometimes more rarely you get

00:38:23,850 --> 00:38:30,750
something like it's not valid yet that

00:38:27,540 --> 00:38:32,040
often means that your clock is wrong so

00:38:30,750 --> 00:38:35,430
if you have learnt right raspberry pi

00:38:32,040 --> 00:38:37,470
way down have clocks on the ship on the

00:38:35,430 --> 00:38:39,990
thigh you have to use an external clock

00:38:37,470 --> 00:38:44,640
sauce something goes wrong then you get

00:38:39,990 --> 00:38:46,860
that error message if you generate your

00:38:44,640 --> 00:38:49,020
own ones do you may get some kind of

00:38:46,860 --> 00:38:52,440
very funky error message with handshake

00:38:49,020 --> 00:38:56,190
failure these don't happen if you get

00:38:52,440 --> 00:38:59,070
official certificates on the client side

00:38:56,190 --> 00:39:02,030
if you connect to a server and have some

00:38:59,070 --> 00:39:04,260
kind of issues with it the actual chain

00:39:02,030 --> 00:39:08,190
there can be multiple issues you can

00:39:04,260 --> 00:39:10,560
have one if you run test certificates

00:39:08,190 --> 00:39:13,830
and you get self signed certificate as

00:39:10,560 --> 00:39:17,400
error message that then you have enabled

00:39:13,830 --> 00:39:21,840
as verification but that didn't add the

00:39:17,400 --> 00:39:23,840
certificate to your trust store or add

00:39:21,840 --> 00:39:26,430
some issue for your test certificates

00:39:23,840 --> 00:39:30,840
unable to verify the first certificate

00:39:26,430 --> 00:39:33,270
in the chain is in almost all cases I

00:39:30,840 --> 00:39:35,310
have witnessed that the issue that the

00:39:33,270 --> 00:39:37,470
server doesn't send you back the whole

00:39:35,310 --> 00:39:39,810
chain only the end entity's certificate

00:39:37,470 --> 00:39:41,550
so it's slightly misconfigured browsers

00:39:39,810 --> 00:39:43,350
can work around that you can use

00:39:41,550 --> 00:39:45,270
information from the ticket to look up

00:39:43,350 --> 00:39:49,470
the chain and build that on their own

00:39:45,270 --> 00:39:51,720
it's called a a-chasing tools like

00:39:49,470 --> 00:39:56,270
Python and command I totally don't do

00:39:51,720 --> 00:39:59,070
that so you have to fix your server

00:39:56,270 --> 00:40:02,760
unable to local get local issue a

00:39:59,070 --> 00:40:03,450
certificate is a sign that you don't

00:40:02,760 --> 00:40:06,510
have the roots

00:40:03,450 --> 00:40:08,250
a loaded Baptist on install perhaps

00:40:06,510 --> 00:40:11,040
you're missing the way you get the root

00:40:08,250 --> 00:40:14,250
certificates so do you have to load them

00:40:11,040 --> 00:40:18,840
somehow and they're multiplayer super

00:40:14,250 --> 00:40:21,690
computer it can be stored or sometimes

00:40:18,840 --> 00:40:24,420
you get them also a self-signed error

00:40:21,690 --> 00:40:27,540
message which is often a sign that the

00:40:24,420 --> 00:40:29,850
server sent alts the root CA back but

00:40:27,540 --> 00:40:31,380
you don't trust the root CA so so you

00:40:29,850 --> 00:40:33,990
can optionally send as part of the chain

00:40:31,380 --> 00:40:36,150
of the root CA but if you don't trust it

00:40:33,990 --> 00:40:39,000
then it looks like this self signed

00:40:36,150 --> 00:40:42,000
error again and if you update your

00:40:39,000 --> 00:40:44,040
Python 3 or 7 well you get actually a

00:40:42,000 --> 00:40:45,420
much better error message actually get

00:40:44,040 --> 00:40:48,270
the same information you would see in

00:40:45,420 --> 00:40:52,260
open SSL so here for example unable to

00:40:48,270 --> 00:40:54,630
get local issue certificates you all

00:40:52,260 --> 00:40:57,840
come I was annoyed to I was very annoyed

00:40:54,630 --> 00:41:00,030
and it wasn't that hard to add that I

00:40:57,840 --> 00:41:03,480
wanted to figure out how to do that

00:41:00,030 --> 00:41:05,910
so routiers root says can be stored in

00:41:03,480 --> 00:41:08,370
different places depending Brighton

00:41:05,910 --> 00:41:11,250
system or be not available at all so on

00:41:08,370 --> 00:41:13,410
Linux or BSD is typically some file

00:41:11,250 --> 00:41:15,360
that's compiled into open SSL so if you

00:41:13,410 --> 00:41:18,060
compile your Matt's own hope messes L

00:41:15,360 --> 00:41:20,340
may not work requests all they have

00:41:18,060 --> 00:41:23,640
certified package with just packages

00:41:20,340 --> 00:41:26,940
certificates which get rid of the error

00:41:23,640 --> 00:41:29,400
but have other issues on Windows edit a

00:41:26,940 --> 00:41:31,470
hex you add certificates from the

00:41:29,400 --> 00:41:33,180
Windows Store which does not work

00:41:31,470 --> 00:41:36,360
properly if you have a newly installed

00:41:33,180 --> 00:41:39,270
machine I didn't know that before I want

00:41:36,360 --> 00:41:42,480
to insert that and on Mac OS you can

00:41:39,270 --> 00:41:45,420
only have to install certify if you use

00:41:42,480 --> 00:41:50,370
the official installers because int only

00:41:45,420 --> 00:41:52,290
make a police in Patchogue must all be

00:41:50,370 --> 00:41:55,940
can't use that trick with Python or

00:41:52,290 --> 00:41:58,800
installers on Linux they may be so

00:41:55,940 --> 00:42:02,430
vendors have never agreed on a specific

00:41:58,800 --> 00:42:06,180
location so you can have a long list of

00:42:02,430 --> 00:42:09,740
places you can look if we don't have

00:42:06,180 --> 00:42:13,140
that list in and the SL model in Python

00:42:09,740 --> 00:42:15,750
but you can use this small tool small

00:42:13,140 --> 00:42:16,710
hyper functions to get lists also ways

00:42:15,750 --> 00:42:19,920
to over

00:42:16,710 --> 00:42:23,700
that as you said insert environment

00:42:19,920 --> 00:42:26,130
variables so I mentioned that I'm not a

00:42:23,700 --> 00:42:29,580
big fan of certified because you have to

00:42:26,130 --> 00:42:32,820
keep your certified package updated we

00:42:29,580 --> 00:42:36,599
don't do that you may run into some

00:42:32,820 --> 00:42:39,359
issues I've found in New Relic while ago

00:42:36,599 --> 00:42:43,790
that a very ancient version of certify

00:42:39,359 --> 00:42:48,380
and requests with very outdated invalid

00:42:43,790 --> 00:42:50,940
certificates so just the final one

00:42:48,380 --> 00:42:53,790
hosting verification because are just

00:42:50,940 --> 00:42:55,800
one minute left so we also have to

00:42:53,790 --> 00:42:58,320
verify the hostname matches the

00:42:55,800 --> 00:43:01,380
certificate that uses this subject

00:42:58,320 --> 00:43:03,359
alternative name extension and I have

00:43:01,380 --> 00:43:06,480
multiple issues to get that right in

00:43:03,359 --> 00:43:10,109
python the engineer there's so many way

00:43:06,480 --> 00:43:14,160
this thing go wrong it like six major

00:43:10,109 --> 00:43:18,359
back several cv6 CVS several major box

00:43:14,160 --> 00:43:21,900
and now we used opens offer that serve

00:43:18,359 --> 00:43:26,040
as a new feature and also lip ESL edit

00:43:21,900 --> 00:43:28,470
that until yeah yeah I found a bug

00:43:26,040 --> 00:43:31,500
libras all walls over compiler at seven

00:43:28,470 --> 00:43:35,190
and that CV actually paid for some fancy

00:43:31,500 --> 00:43:39,930
medicine for my then saket so thank you

00:43:35,190 --> 00:43:43,770
libras all you paid the vet and final

00:43:39,930 --> 00:43:46,380
remark is if you do HTTP you have be

00:43:43,770 --> 00:43:49,560
sure that you use the same hostname for

00:43:46,380 --> 00:43:54,119
both the server name indicator and it

00:43:49,560 --> 00:43:54,510
shall get requests so deals 103 out of

00:43:54,119 --> 00:43:58,770
time

00:43:54,510 --> 00:44:05,130
yeah all right I'm so skip that summary

00:43:58,770 --> 00:44:07,050
so so the tools you can use and I hiked

00:44:05,130 --> 00:44:10,200
recommend to get one of these books

00:44:07,050 --> 00:44:13,010
especially the bulletproof dsssl and I'm

00:44:10,200 --> 00:44:13,010

YouTube URL: https://www.youtube.com/watch?v=DDHF_OpQxMI


