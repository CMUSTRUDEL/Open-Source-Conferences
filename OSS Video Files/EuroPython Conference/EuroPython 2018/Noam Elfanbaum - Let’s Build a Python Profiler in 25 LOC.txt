Title: Noam Elfanbaum - Let’s Build a Python Profiler in 25 LOC
Publication date: 2018-08-22
Playlist: EuroPython 2018
Description: 
	Let’s Build a Python Profiler in 25 LOC
[EuroPython 2018 - Talk - 2018-07-25 - Lammermuir]
[Edinburgh, UK]

By Noam Elfanbaum

A profile is a set of statistics that describes how often and for how long various parts of the program executed. Most profilers run inside your Python process.  If you’re inside a Python program you generally have pretty easy access to its stack, hence we can gather information about time spent in each level.

In this talk we'll build a Python profiler from scratch and so learn about the dynamic nature of Python and how do well-known profilers such as cProfile. 

We'll also learn the difference between a tracing and a sampling profiler and which one to use in what circumstance.



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2018.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:00,140 --> 00:00:07,890
[Applause]

00:00:03,890 --> 00:00:13,320
okay so he's going to be somewhat of a

00:00:07,890 --> 00:00:15,719
hand hands-on talk I'm Nam elephant um I

00:00:13,320 --> 00:00:19,740
work at design which is a fin tech

00:00:15,719 --> 00:00:21,779
startup in Israel I helped organize the

00:00:19,740 --> 00:00:23,789
PI Web al the monthly meetup in the

00:00:21,779 --> 00:00:27,240
PyCon Israel it's kind of new only three

00:00:23,789 --> 00:00:29,369
years so you're welcome to to hop on on

00:00:27,240 --> 00:00:36,360
the next one and you can find me online

00:00:29,369 --> 00:00:40,340
at Twitter and it's NORTHCOM so what is

00:00:36,360 --> 00:00:43,140
a program profile so a profile is

00:00:40,340 --> 00:00:45,120
something we do on a program in order to

00:00:43,140 --> 00:00:47,640
understand what its resource consumption

00:00:45,120 --> 00:00:50,789
is and we can use it in production to

00:00:47,640 --> 00:00:52,559
monitor our service and we can also use

00:00:50,789 --> 00:00:59,070
it to debug performance problem that we

00:00:52,559 --> 00:01:01,530
see just locally when we're working so

00:00:59,070 --> 00:01:03,780
in Python being a better included

00:01:01,530 --> 00:01:07,200
language has a built in profiler in the

00:01:03,780 --> 00:01:07,650
standard standard library so it has two

00:01:07,200 --> 00:01:11,010
of them

00:01:07,650 --> 00:01:13,460
one is a pure Python implementation and

00:01:11,010 --> 00:01:16,409
after it

00:01:13,460 --> 00:01:18,600
someone computed contributed a sip

00:01:16,409 --> 00:01:23,600
profile which is just the C extension of

00:01:18,600 --> 00:01:26,640
the same profiler it's just faster so

00:01:23,600 --> 00:01:29,329
we're gonna start with a demo which is

00:01:26,640 --> 00:01:33,770
the easiest way to to understand stuff

00:01:29,329 --> 00:01:36,780
and so we have this module in our

00:01:33,770 --> 00:01:40,829
production and someone's noticing it's

00:01:36,780 --> 00:01:45,899
being kind of slow what it does it does

00:01:40,829 --> 00:01:50,310
a it does power twice on an average

00:01:45,899 --> 00:01:52,649
receives it counts the digits of that

00:01:50,310 --> 00:01:56,340
number using conversion to string and

00:01:52,649 --> 00:01:59,700
then lengths on it and then it just dot

00:01:56,340 --> 00:02:03,799
the calculation and prints it out so

00:01:59,700 --> 00:02:03,799
let's run it valve

00:02:06,260 --> 00:02:15,530
so we're running profiling demo so it

00:02:12,470 --> 00:02:17,140
takes quite some time to run we're

00:02:15,530 --> 00:02:20,990
running it locally we're trying to debug

00:02:17,140 --> 00:02:24,020
and it will come up soon okay so it

00:02:20,990 --> 00:02:34,670
takes nine point one seconds to run or

00:02:24,020 --> 00:02:36,530
make this feeling a bit larger okay with

00:02:34,670 --> 00:02:37,420
the pride maybe I can do it in white

00:02:36,530 --> 00:02:42,230
collar's

00:02:37,420 --> 00:02:47,720
by the way let me think let me think if

00:02:42,230 --> 00:02:49,640
I can fix that don't really want to get

00:02:47,720 --> 00:02:52,820
into changing the color of the terminal

00:02:49,640 --> 00:02:54,410
but try try work it out like that I hope

00:02:52,820 --> 00:03:00,320
you figure well enough maybe we could

00:02:54,410 --> 00:03:04,250
turn up the upfront lights here oh just

00:03:00,320 --> 00:03:10,790
for the number you can see here I can

00:03:04,250 --> 00:03:15,050
highlight here like this so it took nine

00:03:10,790 --> 00:03:16,130
point one seconds to run so what we're

00:03:15,050 --> 00:03:19,280
going to do is we're going to run it

00:03:16,130 --> 00:03:21,860
under the profiler so you're going to

00:03:19,280 --> 00:03:24,470
run Python add the mince m to run the

00:03:21,860 --> 00:03:27,440
module see profile and then use minutes

00:03:24,470 --> 00:03:30,739
s to sort it by the total time each line

00:03:27,440 --> 00:03:34,010
of code took to run so let's run the

00:03:30,739 --> 00:03:37,670
code again we'll take the same length

00:03:34,010 --> 00:03:40,640
but we'll see the results we'll see what

00:03:37,670 --> 00:03:43,940
happens now before we see it what do you

00:03:40,640 --> 00:03:44,959
guys think which part of the program is

00:03:43,940 --> 00:03:47,800
making it slow

00:03:44,959 --> 00:03:53,420
is it the superpower or the count digits

00:03:47,800 --> 00:03:56,420
who think the superpower okay and who

00:03:53,420 --> 00:03:58,190
think it's the count digit yeah oh god

00:03:56,420 --> 00:04:00,140
you're good and I say I did in another

00:03:58,190 --> 00:04:02,870
conference in Israel and no one like it

00:04:00,140 --> 00:04:06,230
was a different ratio so we're gonna see

00:04:02,870 --> 00:04:08,570
it as well here so apparently counting

00:04:06,230 --> 00:04:09,920
digits is very expensive in Python

00:04:08,570 --> 00:04:13,160
because we need to convert a very large

00:04:09,920 --> 00:04:15,140
number into a string and then actually

00:04:13,160 --> 00:04:17,910
the length the length method itself is

00:04:15,140 --> 00:04:19,800
not so expensive but the

00:04:17,910 --> 00:04:23,010
and the transition into string is very

00:04:19,800 --> 00:04:28,110
expensive and we can see it takes 8

00:04:23,010 --> 00:04:29,460
seconds that's seven and the superpower

00:04:28,110 --> 00:04:35,300
this is the cont digit and the

00:04:29,460 --> 00:04:40,740
superpower only take 200 milliseconds so

00:04:35,300 --> 00:04:42,480
good job guys let's continue now we want

00:04:40,740 --> 00:04:44,460
to create an optimization optimized

00:04:42,480 --> 00:04:47,820
version of it when running too much

00:04:44,460 --> 00:04:49,800
faster so I've created an optimized

00:04:47,820 --> 00:04:52,280
version do you think can anyone think

00:04:49,800 --> 00:04:59,970
what what it does differently

00:04:52,280 --> 00:05:01,650
yeah not modulo something else right

00:04:59,970 --> 00:05:03,300
exactly it's the log function I hope you

00:05:01,650 --> 00:05:03,660
didn't see when I moved it for a second

00:05:03,300 --> 00:05:07,770
there

00:05:03,660 --> 00:05:10,500
so exactly just use the locked-in

00:05:07,770 --> 00:05:11,510
function and then it's moving much much

00:05:10,500 --> 00:05:16,190
faster

00:05:11,510 --> 00:05:20,070
that's right now took 439 milliseconds

00:05:16,190 --> 00:05:22,410
she's much much better for us and but

00:05:20,070 --> 00:05:24,360
that wood is much bigger and you just

00:05:22,410 --> 00:05:27,030
see this very large output because of

00:05:24,360 --> 00:05:29,100
the imports imports is very there's a

00:05:27,030 --> 00:05:33,000
lot of function calls if you do an

00:05:29,100 --> 00:05:35,220
import you see very big output when the

00:05:33,000 --> 00:05:40,370
top you see that the superpower is now

00:05:35,220 --> 00:05:42,990
the most expensive function okay cool so

00:05:40,370 --> 00:05:45,390
it looks like magic right when you look

00:05:42,990 --> 00:05:49,140
at it how the spiking does that it's uh

00:05:45,390 --> 00:05:51,030
I know so it's so nice to have that one

00:05:49,140 --> 00:05:53,070
but when I side I was wondering what of

00:05:51,030 --> 00:05:57,810
the mechanism that helps but that helps

00:05:53,070 --> 00:05:59,910
it do it so python has a pretty easy

00:05:57,810 --> 00:06:02,160
access to its stack from all everywhere

00:05:59,910 --> 00:06:04,410
you are in the Python execution in your

00:06:02,160 --> 00:06:07,590
program you can see the whole stack of

00:06:04,410 --> 00:06:09,810
how you got there and so the most

00:06:07,590 --> 00:06:12,240
profiler what they do is run in as part

00:06:09,810 --> 00:06:15,120
of your Python profs process and set up

00:06:12,240 --> 00:06:19,530
a trigger to capture the step and then

00:06:15,120 --> 00:06:22,020
it can later do the analysis on it so

00:06:19,530 --> 00:06:25,919
let's see how access the process call

00:06:22,020 --> 00:06:30,030
stack so we can easily access the stack

00:06:25,919 --> 00:06:31,889
using the current frame method and then

00:06:30,030 --> 00:06:34,500
we'll just

00:06:31,889 --> 00:06:36,780
run on it convert it to something that

00:06:34,500 --> 00:06:41,460
we can access easily with the tracer

00:06:36,780 --> 00:06:44,340
module extract stack and print it out so

00:06:41,460 --> 00:06:46,949
let's run it here we have we have some

00:06:44,340 --> 00:06:49,379
more functions that help us just to see

00:06:46,949 --> 00:06:55,110
the hierarchy of the code when we'd run

00:06:49,379 --> 00:06:58,310
it so these stacks is so this is the

00:06:55,110 --> 00:07:04,919
actual code here and when we'll run it

00:06:58,310 --> 00:07:07,379
we'll see that the first line is them in

00:07:04,919 --> 00:07:11,639
the module level and each other we write

00:07:07,379 --> 00:07:15,270
we were calling bar the second line here

00:07:11,639 --> 00:07:17,849
is in the bar function and we're calling

00:07:15,270 --> 00:07:22,110
this show stack function here right

00:07:17,849 --> 00:07:25,680
and inside the show stack we see the for

00:07:22,110 --> 00:07:27,539
loop so we can really easily just by

00:07:25,680 --> 00:07:31,379
doing this current frame access Python

00:07:27,539 --> 00:07:32,969
stack now we're missing when it will be

00:07:31,379 --> 00:07:38,490
called right we need some trigger to

00:07:32,969 --> 00:07:41,190
call it so python or in general

00:07:38,490 --> 00:07:44,069
profilers have two types of triggers one

00:07:41,190 --> 00:07:45,839
is a deterministic trigger for detail

00:07:44,069 --> 00:07:48,120
which is then later a deterministic

00:07:45,839 --> 00:07:51,479
profiler it's triggered on every

00:07:48,120 --> 00:07:54,629
function or line call and then you can

00:07:51,479 --> 00:07:56,819
see the exact execution path and we have

00:07:54,629 --> 00:07:59,310
statistical profile which is triggered

00:07:56,819 --> 00:08:02,430
on a student time interval so let's see

00:07:59,310 --> 00:08:07,770
how someone builds a deterministic

00:08:02,430 --> 00:08:11,039
profilers so Python lets you specify the

00:08:07,770 --> 00:08:13,800
callback that gets run whenever a line

00:08:11,039 --> 00:08:18,240
or function is being executed you can do

00:08:13,800 --> 00:08:19,979
it using this set profile or css sees

00:08:18,240 --> 00:08:24,180
the trace the difference is the seats

00:08:19,979 --> 00:08:27,180
set profile is calling the handler every

00:08:24,180 --> 00:08:29,129
time a line or function is being called

00:08:27,180 --> 00:08:32,959
and the citrus is calling is being

00:08:29,129 --> 00:08:35,640
called only when a function is called

00:08:32,959 --> 00:08:39,019
now when this call will record the step

00:08:35,640 --> 00:08:39,019
so let's see an example of that

00:08:40,159 --> 00:08:45,510
okay so we're using the sister of file

00:08:43,790 --> 00:08:47,820
here is

00:08:45,510 --> 00:08:50,880
our handler the handle receives a

00:08:47,820 --> 00:08:54,920
caustic argument an event and the RV

00:08:50,880 --> 00:08:58,410
itself will see will see the output

00:08:54,920 --> 00:09:01,770
later when we run it when general will

00:08:58,410 --> 00:09:04,020
see that the event is a call to a

00:09:01,770 --> 00:09:06,630
function the argument is the function

00:09:04,020 --> 00:09:09,150
name and the line is just the line is

00:09:06,630 --> 00:09:12,480
that something that we created here it

00:09:09,150 --> 00:09:15,240
just what's lying it's on now we're

00:09:12,480 --> 00:09:18,000
gonna set the profiler just like that

00:09:15,240 --> 00:09:21,450
using the sis module set profile and our

00:09:18,000 --> 00:09:23,430
handler and we're gonna call hello world

00:09:21,450 --> 00:09:26,910
just for fun we're gonna we can execute

00:09:23,430 --> 00:09:29,150
whatever probably want so let's see how

00:09:26,910 --> 00:09:29,150
that goes

00:09:32,360 --> 00:09:39,330
okay so I'm going to do Python that

00:09:35,250 --> 00:09:42,540
profile and we're gonna run it now we

00:09:39,330 --> 00:09:47,670
can see the output so so maybe see the

00:09:42,540 --> 00:09:50,520
code so it'll be easier to understand so

00:09:47,670 --> 00:09:52,680
this is the code this is the output so

00:09:50,520 --> 00:09:54,660
you see that the first event that was

00:09:52,680 --> 00:09:56,940
receiving the C call it's a cycle

00:09:54,660 --> 00:10:02,400
because Python print function is

00:09:56,940 --> 00:10:05,190
actually implemented in C and we see the

00:10:02,400 --> 00:10:07,980
line itself print hello world now we get

00:10:05,190 --> 00:10:11,100
another event C return which is the

00:10:07,980 --> 00:10:12,360
function return it's finished so think

00:10:11,100 --> 00:10:14,250
about when you want to create the timer

00:10:12,360 --> 00:10:19,200
you get the time started the time it

00:10:14,250 --> 00:10:21,110
ended and then you get another event

00:10:19,200 --> 00:10:26,190
which is just the return of the whole

00:10:21,110 --> 00:10:30,540
executable the whole program so now we

00:10:26,190 --> 00:10:32,310
have our community profile we know how

00:10:30,540 --> 00:10:37,620
to trigger it but how do statistical

00:10:32,310 --> 00:10:39,720
profile profile at work so what they do

00:10:37,620 --> 00:10:41,820
like we said they sample the program on

00:10:39,720 --> 00:10:43,770
a given interval instead of a relying

00:10:41,820 --> 00:10:47,430
call on an interval that we decide in

00:10:43,770 --> 00:10:49,290
advance and one way to implement it you

00:10:47,430 --> 00:10:51,180
can you can implement it in several ways

00:10:49,290 --> 00:10:56,330
but one of the ways is to implement it

00:10:51,180 --> 00:10:58,850
using assistant OS interrupt or always

00:10:56,330 --> 00:11:07,830
signal so

00:10:58,850 --> 00:11:09,660
let's see the code that uses it so we

00:11:07,830 --> 00:11:11,820
have our handler right it's very similar

00:11:09,660 --> 00:11:15,150
to the handler we used we used in our

00:11:11,820 --> 00:11:16,650
deterministic profiler the handler is

00:11:15,150 --> 00:11:18,360
being called it received the signal

00:11:16,650 --> 00:11:21,150
number which is less interesting for us

00:11:18,360 --> 00:11:23,640
and the call stack we extract the call

00:11:21,150 --> 00:11:26,340
stack and then we can create printing

00:11:23,640 --> 00:11:29,460
into screen in a real profile it will

00:11:26,340 --> 00:11:32,370
capture capture the results and for

00:11:29,460 --> 00:11:35,340
later analysis now this is the

00:11:32,370 --> 00:11:38,670
interesting part for us this is how we

00:11:35,340 --> 00:11:42,120
set the actual signal so we create a

00:11:38,670 --> 00:11:45,330
signal sick proof with a signal that is

00:11:42,120 --> 00:11:47,370
used for profiling actually and we put

00:11:45,330 --> 00:11:49,890
the handler on it so when this thing

00:11:47,370 --> 00:11:54,000
says when the signal is called the

00:11:49,890 --> 00:11:57,390
handler will fire and we put a timer on

00:11:54,000 --> 00:11:59,150
it so the signal will be out like they

00:11:57,390 --> 00:12:02,310
always will send the signal every

00:11:59,150 --> 00:12:04,080
interval that we put this is the this is

00:12:02,310 --> 00:12:07,770
the first interval and this is all the

00:12:04,080 --> 00:12:11,700
intervals after it and we also need to

00:12:07,770 --> 00:12:14,310
do something else we need to remove the

00:12:11,700 --> 00:12:16,020
timer when the program exits so this is

00:12:14,310 --> 00:12:18,030
a pretty nice module that Python head

00:12:16,020 --> 00:12:19,890
that I wasn't familiar with it lets you

00:12:18,030 --> 00:12:24,150
execute something I'd acted when the

00:12:19,890 --> 00:12:27,960
when the interpreter exits it will

00:12:24,150 --> 00:12:33,030
execute this function I will just set

00:12:27,960 --> 00:12:36,140
the timer to zero now this is the

00:12:33,030 --> 00:12:39,630
explanation it's nice

00:12:36,140 --> 00:12:42,690
ok so the last part we're going to start

00:12:39,630 --> 00:12:45,840
the you're gonna call the the function

00:12:42,690 --> 00:12:47,820
that starts at this sampler it set the

00:12:45,840 --> 00:12:49,470
trigger it starts the sampler and then

00:12:47,820 --> 00:12:52,890
we're gonna make our calculation and

00:12:49,470 --> 00:12:58,580
we're going to print it to screen now

00:12:52,890 --> 00:12:58,580
let's run it in our terminal

00:13:00,740 --> 00:13:11,430
okay so this is our code and it's right

00:13:09,290 --> 00:13:15,690
so now you're going to see something

00:13:11,430 --> 00:13:18,630
which is pretty interesting right we can

00:13:15,690 --> 00:13:21,960
see that we only get the land STR like

00:13:18,630 --> 00:13:24,660
before we only get the this part of the

00:13:21,960 --> 00:13:29,820
code being sampled and I guess you know

00:13:24,660 --> 00:13:31,350
why it is like that right it since we're

00:13:29,820 --> 00:13:33,270
doing a statistical sampling we don't

00:13:31,350 --> 00:13:34,800
we're not seeing that so the answer well

00:13:33,270 --> 00:13:36,270
is just the longest one so since we're

00:13:34,800 --> 00:13:38,130
doing a statistical profiling we don't

00:13:36,270 --> 00:13:40,160
see everything that is being executed

00:13:38,130 --> 00:13:45,090
with just sampling on certain interval

00:13:40,160 --> 00:13:48,900
so what you get is less inclusive it

00:13:45,090 --> 00:13:53,100
won't impact performance as much but you

00:13:48,900 --> 00:13:57,750
also get less accurate analysis later so

00:13:53,100 --> 00:13:59,880
now we know how to do both so now for

00:13:57,750 --> 00:14:07,050
the practical question when do we use

00:13:59,880 --> 00:14:08,760
which profiler someone say what when

00:14:07,050 --> 00:14:10,290
will we use this the typical one and

00:14:08,760 --> 00:14:13,260
when will be used the deterministic one

00:14:10,290 --> 00:14:15,330
what what are the use cases which use

00:14:13,260 --> 00:14:21,890
cases are better for which interpret for

00:14:15,330 --> 00:14:21,890
which a profiler yes

00:14:24,140 --> 00:14:33,020
you wouldn't use it okay good good

00:14:27,660 --> 00:14:35,130
instinct okay cool yeah so that's that's

00:14:33,020 --> 00:14:39,500
exactly so that big part of the answer

00:14:35,130 --> 00:14:42,480
so the statistical profiler sends its

00:14:39,500 --> 00:14:43,890
Control Board predicted right you know

00:14:42,480 --> 00:14:46,050
what the interval you're going to sample

00:14:43,890 --> 00:14:50,640
and you know what is the effect on your

00:14:46,050 --> 00:14:52,910
production system will be so it's much

00:14:50,640 --> 00:14:56,790
more suitable for production monitoring

00:14:52,910 --> 00:15:00,750
but it's less accurate so when you debug

00:14:56,790 --> 00:15:02,910
locally right you might want to use the

00:15:00,750 --> 00:15:04,950
deterministic profiler it introduces a

00:15:02,910 --> 00:15:08,330
fixed amount of latency but you don't

00:15:04,950 --> 00:15:08,330
really mind when you're doing it locally

00:15:09,380 --> 00:15:17,910
yeah good good things so for the most

00:15:15,680 --> 00:15:22,590
interesting part of our lecture we want

00:15:17,910 --> 00:15:24,810
to build a profiler by our own so we

00:15:22,590 --> 00:15:25,440
have all the parts we just need to merge

00:15:24,810 --> 00:15:33,030
them together

00:15:25,440 --> 00:15:36,990
Mirjam Ian let's see okay so we already

00:15:33,030 --> 00:15:39,210
know how to set an interval right how do

00:15:36,990 --> 00:15:42,030
you say the sampling interval so we're

00:15:39,210 --> 00:15:44,880
going to set the set the signal set the

00:15:42,030 --> 00:15:48,839
timer on the signal and register and

00:15:44,880 --> 00:15:50,940
remove it once the program exits now the

00:15:48,839 --> 00:15:52,650
sample method itself is a little

00:15:50,940 --> 00:15:56,520
different now because we want to collect

00:15:52,650 --> 00:16:00,270
the data right so what we're going to do

00:15:56,520 --> 00:16:03,960
is extract the stack and then we're

00:16:00,270 --> 00:16:06,060
going to do a nice trick where we join

00:16:03,960 --> 00:16:08,520
the stack right we join the stack layers

00:16:06,060 --> 00:16:12,170
into a single string separated by

00:16:08,520 --> 00:16:15,930
semicolons and then we count each time

00:16:12,170 --> 00:16:19,530
we arrived at that path so we know how

00:16:15,930 --> 00:16:21,030
many time we spent there we have a here

00:16:19,530 --> 00:16:21,480
we have a global variable we keep it

00:16:21,030 --> 00:16:24,570
there

00:16:21,480 --> 00:16:30,350
you see the naive profiler right so we

00:16:24,570 --> 00:16:34,170
can do global variables and stuff and

00:16:30,350 --> 00:16:35,880
when the program has finishes we can

00:16:34,170 --> 00:16:39,570
call this format stats

00:16:35,880 --> 00:16:42,300
and out put it in a way which is I will

00:16:39,570 --> 00:16:45,030
use flame the flame graft tool to show

00:16:42,300 --> 00:16:47,190
it very nice on screen and this is its

00:16:45,030 --> 00:16:49,530
format it just put the frames with

00:16:47,190 --> 00:16:52,410
semicolon like we said and then the

00:16:49,530 --> 00:16:56,250
count of the how many time we spent

00:16:52,410 --> 00:16:58,910
there so let's go back to our command

00:16:56,250 --> 00:16:58,910
line Oh

00:16:59,040 --> 00:17:03,600
so firstly I need to prove to you that

00:17:01,020 --> 00:17:05,970
it's actually 25 lines right so we're on

00:17:03,600 --> 00:17:09,810
25 lines of code and I was pretty

00:17:05,970 --> 00:17:12,360
generous with the can be shorter if

00:17:09,810 --> 00:17:15,810
you're interested I was pretty generous

00:17:12,360 --> 00:17:19,020
with these spaces and stuff like that so

00:17:15,810 --> 00:17:22,410
you won't say cheating you see we have

00:17:19,020 --> 00:17:25,140
the imports on different lines right we

00:17:22,410 --> 00:17:29,670
have two spaces here so there's a lot

00:17:25,140 --> 00:17:33,090
more we can put in a lot more stuff and

00:17:29,670 --> 00:17:36,510
let's use it so in order to use it I've

00:17:33,090 --> 00:17:39,300
created a demo program what the demo

00:17:36,510 --> 00:17:40,680
product program does is a simple

00:17:39,300 --> 00:17:43,530
calculation

00:17:40,680 --> 00:17:45,210
it has two functions here the main

00:17:43,530 --> 00:17:48,030
functions called the calc function and

00:17:45,210 --> 00:17:50,180
it does power I'm using power all the

00:17:48,030 --> 00:17:54,440
time because it takes some time for the

00:17:50,180 --> 00:17:58,740
CPU to execute so we're doing power

00:17:54,440 --> 00:18:00,900
100,000 then power power 200,000 and

00:17:58,740 --> 00:18:04,610
then we're calling the start method on

00:18:00,900 --> 00:18:07,890
the profiler we're calling the code and

00:18:04,610 --> 00:18:14,010
formatting the stats printing it to STD

00:18:07,890 --> 00:18:15,840
out so let's run our code okay so this

00:18:14,010 --> 00:18:18,270
is the format and I'm not sure it was if

00:18:15,840 --> 00:18:22,800
it was clear earlier so now you can see

00:18:18,270 --> 00:18:27,000
it more clearly so we see that we spend

00:18:22,800 --> 00:18:31,200
time here in this whole stack is where

00:18:27,000 --> 00:18:34,970
we spent this amount of samplings

00:18:31,200 --> 00:18:38,420
okay so we've been in main calc

00:18:34,970 --> 00:18:41,280
when calc what with two hundred thousand

00:18:38,420 --> 00:18:45,120
seventy seventy nine times and we've

00:18:41,280 --> 00:18:46,830
been in calc 100,000 24 times which

00:18:45,120 --> 00:18:47,450
makes sense because it's a larger number

00:18:46,830 --> 00:18:51,840
right

00:18:47,450 --> 00:18:54,780
so now we can take this code which is

00:18:51,840 --> 00:18:56,310
it's pretty clear when we are just using

00:18:54,780 --> 00:18:59,010
it for a very simple program but it

00:18:56,310 --> 00:19:01,380
won't be in a larger program right so in

00:18:59,010 --> 00:19:06,290
order for really reviewing it we can

00:19:01,380 --> 00:19:09,060
output it into graph no no flame graph

00:19:06,290 --> 00:19:14,010
into slave graph and then I'll put it

00:19:09,060 --> 00:19:16,410
into our browser and now the flame graph

00:19:14,010 --> 00:19:18,210
tool now I'll give the reference to the

00:19:16,410 --> 00:19:19,410
guy who invented it later I really like

00:19:18,210 --> 00:19:21,840
it it's really it's a really simple

00:19:19,410 --> 00:19:25,320
format and you get really nice output so

00:19:21,840 --> 00:19:30,270
it's actually an SVG it shows you a nice

00:19:25,320 --> 00:19:31,680
diagram of of like the relative part of

00:19:30,270 --> 00:19:36,720
the program where things have been

00:19:31,680 --> 00:19:40,910
thanks so we can see that main had 91

00:19:36,720 --> 00:19:44,970
samples right 100 percent of the samples

00:19:40,910 --> 00:19:48,870
the cough 100,000 had 24 percent of the

00:19:44,970 --> 00:19:51,240
samples and we called 200,000 had 75% of

00:19:48,870 --> 00:19:57,110
the sample which is pretty clear right

00:19:51,240 --> 00:20:01,440
makes sense for us so this is a simple

00:19:57,110 --> 00:20:04,890
program but it will take a more complex

00:20:01,440 --> 00:20:08,100
one for example and downloading taps

00:20:04,890 --> 00:20:10,740
into our local hard drive which is still

00:20:08,100 --> 00:20:14,880
simple but complex enough so our lecture

00:20:10,740 --> 00:20:18,540
for a talk and so what this program does

00:20:14,880 --> 00:20:22,220
it takes it composed of the URL gets to

00:20:18,540 --> 00:20:25,760
the python.org and downloads app app

00:20:22,220 --> 00:20:29,940
sorry download the pap using URL open

00:20:25,760 --> 00:20:31,410
and I say saving it to memory reading

00:20:29,940 --> 00:20:34,500
the request saving it to memory memory

00:20:31,410 --> 00:20:39,120
and then writing it to a temporary file

00:20:34,500 --> 00:20:43,680
on this and the main function it loops

00:20:39,120 --> 00:20:46,380
through for peps in this example run the

00:20:43,680 --> 00:20:49,140
save tab and says it's accomplished it

00:20:46,380 --> 00:20:52,110
we're outputting it to a CD arrow

00:20:49,140 --> 00:20:52,890
because we want to use the pipe for

00:20:52,110 --> 00:20:53,910
something else

00:20:52,890 --> 00:20:57,120
I still do if we want to use for

00:20:53,910 --> 00:20:59,650
something else and that's it and now we

00:20:57,120 --> 00:21:01,960
can call our code

00:20:59,650 --> 00:21:08,289
go to start run the main function and

00:21:01,960 --> 00:21:11,679
then print out the stats so let's see so

00:21:08,289 --> 00:21:14,350
like I said earlier I'm counting on the

00:21:11,679 --> 00:21:16,360
Wi-Fi here so it's actually I'm

00:21:14,350 --> 00:21:19,929
surprised I thought I have a use an

00:21:16,360 --> 00:21:21,669
Ethernet cable so what we see we see

00:21:19,929 --> 00:21:23,950
like we have an output that we can't

00:21:21,669 --> 00:21:28,120
really understand anything from it and

00:21:23,950 --> 00:21:33,159
here comes the flame graph tool to the

00:21:28,120 --> 00:21:35,980
help and to run everything back but in

00:21:33,159 --> 00:21:41,020
the end we receive a very nice diagram

00:21:35,980 --> 00:21:43,450
again it shows how much time stuff it's

00:21:41,020 --> 00:21:47,169
part of the program was simple how much

00:21:43,450 --> 00:21:49,690
like the count of the saplings so what

00:21:47,169 --> 00:21:51,640
we can do we can really look into the

00:21:49,690 --> 00:21:54,010
Queen to the diagram and started like to

00:21:51,640 --> 00:21:55,630
understand actually it's nice also for

00:21:54,010 --> 00:21:57,039
just understanding the code if you want

00:21:55,630 --> 00:21:59,380
to understand like the standard library

00:21:57,039 --> 00:22:01,870
or stuff like that you just see the

00:21:59,380 --> 00:22:05,919
execution path and if you want to focus

00:22:01,870 --> 00:22:09,580
on a certain place for example we can

00:22:05,919 --> 00:22:11,500
click on it and then we'll have

00:22:09,580 --> 00:22:14,440
everything zoomed out and we'll only

00:22:11,500 --> 00:22:17,820
zoom on this certain part and see where

00:22:14,440 --> 00:22:21,010
it spends its time tokenizing stuff

00:22:17,820 --> 00:22:23,679
opening them we won't really get into

00:22:21,010 --> 00:22:25,630
that but it's something that you can do

00:22:23,679 --> 00:22:27,760
with your own code and really get a good

00:22:25,630 --> 00:22:30,279
notion of where you've spent time

00:22:27,760 --> 00:22:33,610
another nice thing about it by the way

00:22:30,279 --> 00:22:39,970
for here already it works really nicely

00:22:33,610 --> 00:22:44,320
with grip so for example I can do mmm

00:22:39,970 --> 00:22:55,899
I can do like a grip on the results and

00:22:44,320 --> 00:22:58,679
remove something for example it will be

00:22:55,899 --> 00:22:58,679
interesting for us

00:23:00,070 --> 00:23:07,149
so we can remove any connect any place

00:23:02,919 --> 00:23:11,830
we have a connect method and then we

00:23:07,149 --> 00:23:13,419
receive a much simpler diagram right the

00:23:11,830 --> 00:23:15,100
diagram will be smaller to be kind of

00:23:13,419 --> 00:23:17,379
funny because I just remove the random

00:23:15,100 --> 00:23:18,999
string but you can do it for yourself if

00:23:17,379 --> 00:23:21,070
you want to remove for example less

00:23:18,999 --> 00:23:22,570
certain library you don't want to see

00:23:21,070 --> 00:23:27,369
its output so we can just do graph

00:23:22,570 --> 00:23:33,759
ministry and then we'll be gone okay so

00:23:27,369 --> 00:23:36,759
we saw how it works I think we've come

00:23:33,759 --> 00:23:39,609
to the reference part so the flame graph

00:23:36,759 --> 00:23:42,129
tool is built by Brendan Gregg and it's

00:23:39,609 --> 00:23:46,299
really nice it just built it himself I

00:23:42,129 --> 00:23:48,190
think in a Netflix and you can use it

00:23:46,299 --> 00:23:51,580
for all types of things like you can

00:23:48,190 --> 00:23:53,649
start doing profiler you can just create

00:23:51,580 --> 00:23:57,249
this output and then you'll see it in

00:23:53,649 --> 00:23:58,749
whatever you want to profile right Julie

00:23:57,249 --> 00:24:00,849
I haven't had a really nice blog post

00:23:58,749 --> 00:24:05,679
about Ruby and Python profile which

00:24:00,849 --> 00:24:07,659
inspired this talk and which is also

00:24:05,679 --> 00:24:09,580
pretty interesting Nilus which is a San

00:24:07,659 --> 00:24:12,970
Francisco company just implemented their

00:24:09,580 --> 00:24:15,700
own performance monitoring service just

00:24:12,970 --> 00:24:17,320
a simple script and they're using it for

00:24:15,700 --> 00:24:18,700
all the production environment and we're

00:24:17,320 --> 00:24:21,340
using it my company we're using New

00:24:18,700 --> 00:24:24,549
Relic which is a really nice but it has

00:24:21,340 --> 00:24:26,289
some problem for example keeping the

00:24:24,549 --> 00:24:27,820
data for how long it keeps our data I

00:24:26,289 --> 00:24:29,979
think two weeks and stuff like that and

00:24:27,820 --> 00:24:34,570
you need to pay for everything if you

00:24:29,979 --> 00:24:36,940
want to get more right and you have

00:24:34,570 --> 00:24:40,989
Python profilers Docs and this talk can

00:24:36,940 --> 00:24:42,620
be found at github okay thank you

00:24:40,989 --> 00:24:51,280
any questions

00:24:42,620 --> 00:24:51,280
[Applause]

00:25:02,680 --> 00:25:30,860
if everything was very clear it's also

00:25:04,940 --> 00:25:34,100
okay so it's also good actually you see

00:25:30,860 --> 00:25:36,080
the profiler code in your profiling it's

00:25:34,100 --> 00:25:41,570
pretty funny we might we might be able

00:25:36,080 --> 00:25:44,600
to see it here as well that's really fun

00:25:41,570 --> 00:25:46,640
here see here we can see the extract

00:25:44,600 --> 00:25:50,210
stack that's what we use so we just show

00:25:46,640 --> 00:25:54,350
up in our profiling how would you

00:25:50,210 --> 00:25:56,630
profile it I don't know you can see it

00:25:54,350 --> 00:25:58,010
with part of the profile right profile

00:25:56,630 --> 00:25:59,870
of course and I think you probably want

00:25:58,010 --> 00:26:01,940
to keep it out so we probably do that

00:25:59,870 --> 00:26:16,030
loosely and take it out of your

00:26:01,940 --> 00:26:18,890
profiling and so I really like to talk

00:26:16,030 --> 00:26:22,730
what about I don't know profiling a

00:26:18,890 --> 00:26:25,220
multi processing type or thing with you

00:26:22,730 --> 00:26:29,330
know multiple processes and things yeah

00:26:25,220 --> 00:26:32,510
so so what what 9if did that's how they

00:26:29,330 --> 00:26:34,460
do they do it for the real workload so

00:26:32,510 --> 00:26:36,320
they have another service which takes

00:26:34,460 --> 00:26:39,260
all the outputs of the different

00:26:36,320 --> 00:26:40,760
processes separately and then merge them

00:26:39,260 --> 00:26:43,550
in together and then you can see like

00:26:40,760 --> 00:26:45,980
across your whole system the whole

00:26:43,550 --> 00:26:48,920
process is what weathers time is being

00:26:45,980 --> 00:26:51,890
spent so you just need to create another

00:26:48,920 --> 00:26:57,310
service forest they just created a web

00:26:51,890 --> 00:27:02,109
server another web server okay thanks

00:26:57,310 --> 00:27:02,109

YouTube URL: https://www.youtube.com/watch?v=H8uVgtVv44Y


