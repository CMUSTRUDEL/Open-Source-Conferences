Title: Emmanuel Leblond - Trio: A pythonic way to do async programming
Publication date: 2018-08-22
Playlist: EuroPython 2018
Description: 
	Trio: A pythonic way to do async programming
[EuroPython 2018 - Talk - 2018-07-25 - Lammermuir]
[Edinburgh, UK]

By Emmanuel Leblond

Concurrent programs are super useful: think of web apps juggling lots
of simultaneous downloads and websocket connections, chat bots
tracking multiple concurrent conversations, or web spiders fetching
pages in parallel. But writing concurrent programs is complicated,
intimidating to newcomers, and often challenging even for experts.

Does it have to be? Python is famous for being simple and
straightforward; can Python make concurrent programming simple and
straightforward too?
Trio is an attempt to address this question by the positive !

By taking advantage of new Python 3 features (async/await keywords,
async loops and context managers etc.) while dropping legacy concepts that
older asynchronous frameworks has to maintain, Trio defines a new set of
primitives that make it dramatically easier to write correct concurrent programs.

In this talk, we will describe those primitives, and demonstrate how to
use them to implement a basic algorithm for speeding up TCP connections.
Compared to the best previous Python implementation, our version turns out to
be easier to understand, more correct, and dramatically shorter.



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2018.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:05,450 --> 00:00:09,719
hi everyone

00:00:07,500 --> 00:00:12,450
yeah I'd like today to talk to you about

00:00:09,719 --> 00:00:13,830
trial and how it maybe can save your

00:00:12,450 --> 00:00:16,230
soul when you are working with a

00:00:13,830 --> 00:00:18,000
synchronous programming as you may know

00:00:16,230 --> 00:00:19,980
a singles programming is really not a

00:00:18,000 --> 00:00:22,560
new thing in Python it's been there

00:00:19,980 --> 00:00:25,590
basically forever like thanks to twisted

00:00:22,560 --> 00:00:27,869
but since some years it has been

00:00:25,590 --> 00:00:30,090
something really bigger with this new I

00:00:27,869 --> 00:00:32,520
think i/o library and especially is the

00:00:30,090 --> 00:00:36,570
introduction of this I think avoid

00:00:32,520 --> 00:00:38,640
keyword the thing is how how bad was it

00:00:36,570 --> 00:00:41,760
just before this I think away keyword

00:00:38,640 --> 00:00:44,489
was was a thing so let's see something

00:00:41,760 --> 00:00:46,920
so just in the beginning it was like

00:00:44,489 --> 00:00:48,600
that this is something that you no

00:00:46,920 --> 00:00:50,520
longer write in Python so I had to find

00:00:48,600 --> 00:00:54,300
an older language that still use it some

00:00:50,520 --> 00:00:56,280
time so it's really horrible because you

00:00:54,300 --> 00:00:59,399
have to handle error by yourself you

00:00:56,280 --> 00:01:01,680
cannot use exception if you use a

00:00:59,399 --> 00:01:04,650
debugger on this basically you know your

00:01:01,680 --> 00:01:07,320
own you never know a callback how it has

00:01:04,650 --> 00:01:09,210
been created by who or something so

00:01:07,320 --> 00:01:10,470
after some time people come up with a

00:01:09,210 --> 00:01:12,689
better idea

00:01:10,470 --> 00:01:14,400
so it's called premised on JavaScript

00:01:12,689 --> 00:01:16,740
it's called a different twisted or

00:01:14,400 --> 00:01:19,380
future on honest and IO but it's always

00:01:16,740 --> 00:01:22,740
the same ID so now it's a bit better

00:01:19,380 --> 00:01:24,630
because you can you know combine promise

00:01:22,740 --> 00:01:28,140
together to do synchronization between

00:01:24,630 --> 00:01:30,390
callbacks it's kind of cold box on

00:01:28,140 --> 00:01:33,840
steroids but you still you cannot use

00:01:30,390 --> 00:01:36,000
exception right and you know your

00:01:33,840 --> 00:01:38,640
debugger is still totally useless

00:01:36,000 --> 00:01:40,770
because it's still call box so after

00:01:38,640 --> 00:01:43,470
some time you got a real revolution

00:01:40,770 --> 00:01:45,600
which is a single keyword so now we have

00:01:43,470 --> 00:01:48,390
this concept of a synchronous function

00:01:45,600 --> 00:01:50,159
right so it's much better because now

00:01:48,390 --> 00:01:52,680
you have the regular function and you

00:01:50,159 --> 00:01:54,780
have not just a new kind of color of

00:01:52,680 --> 00:01:57,329
functions you actually synchronous one

00:01:54,780 --> 00:01:59,310
and you can just use this awake keyword

00:01:57,329 --> 00:02:01,110
and you stop the execution of this

00:01:59,310 --> 00:02:03,299
function for some time and you give a

00:02:01,110 --> 00:02:06,270
chance for another core routine to just

00:02:03,299 --> 00:02:08,039
write a bit so yeah it's much better I

00:02:06,270 --> 00:02:10,890
think we can just improve it a bit more

00:02:08,039 --> 00:02:13,170
like this and yeah it would be perfect

00:02:10,890 --> 00:02:13,580
right we're using this newest entire

00:02:13,170 --> 00:02:15,830
library

00:02:13,580 --> 00:02:19,040
using the sink away keyword everything

00:02:15,830 --> 00:02:21,830
is fine so this is the end right but

00:02:19,040 --> 00:02:24,830
yeah maybe not I mean if you've been to

00:02:21,830 --> 00:02:26,900
the tolk of Uri this morning you know

00:02:24,830 --> 00:02:30,170
that there is still kind of some trouble

00:02:26,900 --> 00:02:32,510
with Verizon kayo for instance let's see

00:02:30,170 --> 00:02:34,370
this code it's really simple like you

00:02:32,510 --> 00:02:36,860
see there is a scalar or function which

00:02:34,370 --> 00:02:38,900
act as a little server so it's a

00:02:36,860 --> 00:02:40,790
long-running and from time to time it

00:02:38,900 --> 00:02:43,010
will schedule a new routine which does

00:02:40,790 --> 00:02:45,740
some job the thing is each table is

00:02:43,010 --> 00:02:47,800
broken it will raise an exception so if

00:02:45,740 --> 00:02:52,430
we run this let's see what happens

00:02:47,800 --> 00:02:56,840
yeah I got the code right there you can

00:02:52,430 --> 00:03:00,020
really you can see yeah big enough so

00:02:56,840 --> 00:03:03,020
yeah if you're used to a synchronous

00:03:00,020 --> 00:03:05,630
programming maybe you don't feel it's

00:03:03,020 --> 00:03:07,610
that weird but if you not it seemed very

00:03:05,630 --> 00:03:09,410
wrong there because there is an

00:03:07,610 --> 00:03:12,500
exception occurring here it's really

00:03:09,410 --> 00:03:13,880
obvious but and we never tried to catch

00:03:12,500 --> 00:03:16,459
the exception right in your code base

00:03:13,880 --> 00:03:18,950
there is no except anything but anyway

00:03:16,459 --> 00:03:21,230
the the code was still running I mean we

00:03:18,950 --> 00:03:23,390
got an exception we just print it on the

00:03:21,230 --> 00:03:26,690
standard output and we go on like ok

00:03:23,390 --> 00:03:28,850
nothing across so yeah it feels wrong

00:03:26,690 --> 00:03:31,220
and the other thing is if we look at the

00:03:28,850 --> 00:03:33,470
stack trace it's not the Sacre is not

00:03:31,220 --> 00:03:35,930
complete if we see this function raise

00:03:33,470 --> 00:03:38,570
the exception then it was this function

00:03:35,930 --> 00:03:42,200
which called the other one and we cannot

00:03:38,570 --> 00:03:44,330
go up so it's like here we created these

00:03:42,200 --> 00:03:46,040
new care routines and in a sink i/o when

00:03:44,330 --> 00:03:47,840
you create a quarantine you go like it's

00:03:46,040 --> 00:03:49,489
fire-and-forget you just create the

00:03:47,840 --> 00:03:51,260
nuclear written and then there is no

00:03:49,489 --> 00:03:53,720
connection between the creator and the

00:03:51,260 --> 00:03:55,790
creation and so it's really bad because

00:03:53,720 --> 00:03:58,310
it means 101 coroutine raise an

00:03:55,790 --> 00:04:01,970
exception it bubbles up up up until it

00:03:58,310 --> 00:04:03,530
goes to the the the event loop and then

00:04:01,970 --> 00:04:05,300
the event loop doesn't know what you do

00:04:03,530 --> 00:04:08,450
with this exception it cannot give it to

00:04:05,300 --> 00:04:11,120
anyone so it just does the least worst

00:04:08,450 --> 00:04:14,299
thing you can do which would be printing

00:04:11,120 --> 00:04:16,459
it on the standard output and just go

00:04:14,299 --> 00:04:18,470
finger crossed and say okay maybe this

00:04:16,459 --> 00:04:21,410
thing was not too important and maybe we

00:04:18,470 --> 00:04:24,020
will be able to to go on let's see

00:04:21,410 --> 00:04:24,740
another example so here it's a bit more

00:04:24,020 --> 00:04:27,050
complicated

00:04:24,740 --> 00:04:28,970
I call it recursively roulette

00:04:27,050 --> 00:04:31,669
so it's basically were playing Russian

00:04:28,970 --> 00:04:33,530
roulette but we've with program so this

00:04:31,669 --> 00:04:35,539
morning we were killing threads now

00:04:33,530 --> 00:04:36,740
we're just killing co-routines so it's

00:04:35,539 --> 00:04:39,680
okay

00:04:36,740 --> 00:04:42,440
the idea is we had this function we

00:04:39,680 --> 00:04:44,780
let's say try our luck and if we get

00:04:42,440 --> 00:04:46,729
lucky the carotene doesn't blow off and

00:04:44,780 --> 00:04:49,069
what it does it just create two new

00:04:46,729 --> 00:04:52,039
carotenes that will just continue this

00:04:49,069 --> 00:04:54,500
same function and now we use this I

00:04:52,039 --> 00:04:56,300
think I uh gather so if you don't know

00:04:54,500 --> 00:04:58,669
what I think I gathered does it

00:04:56,300 --> 00:05:02,270
basically just wait for the corrosion to

00:04:58,669 --> 00:05:12,110
finish so if we run this code what will

00:05:02,270 --> 00:05:16,039
happen I got it here I think something

00:05:12,110 --> 00:05:18,949
wrong so if I if I just try it a bit to

00:05:16,039 --> 00:05:21,830
stop a bit faster yeah so we can see

00:05:18,949 --> 00:05:23,650
just we try our luck one time then we

00:05:21,830 --> 00:05:26,090
create new corrosion that will try

00:05:23,650 --> 00:05:28,370
eventually we run out of luck here and

00:05:26,090 --> 00:05:32,449
here there is the exception which is a

00:05:28,370 --> 00:05:35,180
handle we can see it's here and here

00:05:32,449 --> 00:05:37,639
it's getting crazy because even if we

00:05:35,180 --> 00:05:39,620
are out of our recursive Russian

00:05:37,639 --> 00:05:41,210
Roulette function there is anyway new

00:05:39,620 --> 00:05:42,469
coat in which which are created and

00:05:41,210 --> 00:05:44,479
which execute some code and create

00:05:42,469 --> 00:05:47,750
nuclear routine is getting crazy so

00:05:44,479 --> 00:05:49,460
what's happening there if we think about

00:05:47,750 --> 00:05:51,830
the corrosion we have just our main

00:05:49,460 --> 00:05:53,449
protein first and then this core routine

00:05:51,830 --> 00:05:55,580
will call the recursive russian

00:05:53,449 --> 00:05:57,949
roulette' function so let's say it gets

00:05:55,580 --> 00:06:00,770
lucky and it just has to create two new

00:05:57,949 --> 00:06:02,719
proteins that themself get lucky and so

00:06:00,770 --> 00:06:05,509
create two new curtains so well like

00:06:02,719 --> 00:06:07,370
this if we consider this a single

00:06:05,509 --> 00:06:09,979
gatherer function it's something like

00:06:07,370 --> 00:06:12,860
that so you have the main core routine

00:06:09,979 --> 00:06:14,990
which is listening on curtain one and

00:06:12,860 --> 00:06:16,789
Quarantine - and we have correcting one

00:06:14,990 --> 00:06:20,270
waiting on it children and creating two

00:06:16,789 --> 00:06:23,029
waiting on it in children so now let's

00:06:20,270 --> 00:06:25,520
say this cotton blows off what's

00:06:23,029 --> 00:06:27,919
happening and I thought it was what

00:06:25,520 --> 00:06:29,599
happening until I saw Yuri's talk and no

00:06:27,919 --> 00:06:32,180
I'm not sure of anything which means I

00:06:29,599 --> 00:06:36,020
think I always really hard even when we

00:06:32,180 --> 00:06:39,420
want to do at all slightly about this so

00:06:36,020 --> 00:06:42,270
I saw that when a court in the

00:06:39,420 --> 00:06:43,770
and the quarantine is watched by I think

00:06:42,270 --> 00:06:46,140
I gather I think I you gather will

00:06:43,770 --> 00:06:48,240
cancel the other protein it is tasks to

00:06:46,140 --> 00:06:51,270
watch and we'll make the exception

00:06:48,240 --> 00:06:54,270
bubbles up so it bubbles up to the

00:06:51,270 --> 00:06:56,310
corrosion to and this corrosion to is

00:06:54,270 --> 00:06:58,320
also watch by asking I gather by the

00:06:56,310 --> 00:07:01,130
correct in one by the sorry the curtain

00:06:58,320 --> 00:07:04,590
main so we can sulk routine one two and

00:07:01,130 --> 00:07:07,290
we end up like this so now it seems a

00:07:04,590 --> 00:07:09,780
bit wrong because in fact the I think I

00:07:07,290 --> 00:07:12,120
gather from curtain one couldn't kicks

00:07:09,780 --> 00:07:14,190
in so it was just killed he couldn't

00:07:12,120 --> 00:07:16,230
destroy the sub core routine it was

00:07:14,190 --> 00:07:18,990
tasked to watched and no end up like

00:07:16,230 --> 00:07:21,300
this and given we just catch the

00:07:18,990 --> 00:07:24,090
exception in the main and just sitting

00:07:21,300 --> 00:07:26,040
around for some time then the curtains

00:07:24,090 --> 00:07:29,670
existing protein can just spawn new

00:07:26,040 --> 00:07:30,660
proteins and go crazy so what's the

00:07:29,670 --> 00:07:32,400
problem here

00:07:30,660 --> 00:07:34,470
I see three things that could be

00:07:32,400 --> 00:07:36,270
improved the first thing is it will be

00:07:34,470 --> 00:07:38,100
much better to have complex stacktrace

00:07:36,270 --> 00:07:40,230
if we take one protein we should be able

00:07:38,100 --> 00:07:42,090
to read all the the part of the

00:07:40,230 --> 00:07:43,680
corrosion and to be able to go up up up

00:07:42,090 --> 00:07:46,200
until we see okay this Croton has been

00:07:43,680 --> 00:07:49,050
creating there and if we go up enough we

00:07:46,200 --> 00:07:50,430
should go to see the the main of the of

00:07:49,050 --> 00:07:52,920
the function of the of the root of our

00:07:50,430 --> 00:07:55,350
program sorry the other thing which is a

00:07:52,920 --> 00:07:58,260
bit related to this if if we get an

00:07:55,350 --> 00:08:00,570
exception from our routine it should

00:07:58,260 --> 00:08:02,490
bubbles up and never get silenced by

00:08:00,570 --> 00:08:04,770
something like okay we just print in an

00:08:02,490 --> 00:08:07,200
STD out and will be enough it should if

00:08:04,770 --> 00:08:08,940
nobody catch the exception it should go

00:08:07,200 --> 00:08:11,220
up until we blow off our program I mean

00:08:08,940 --> 00:08:12,930
that's how it works on the synchronous

00:08:11,220 --> 00:08:15,180
program right so it should be the same

00:08:12,930 --> 00:08:19,620
on a synchronous and finally something a

00:08:15,180 --> 00:08:21,750
bit slightly more abstract is we should

00:08:19,620 --> 00:08:24,810
be able to have our Co routine which

00:08:21,750 --> 00:08:26,820
which would have easy way to connect our

00:08:24,810 --> 00:08:30,030
protein together in order to express the

00:08:26,820 --> 00:08:31,890
lifetime over one protein according to

00:08:30,030 --> 00:08:33,510
another one for example we say okay we

00:08:31,890 --> 00:08:35,390
have a parent we have a child if the

00:08:33,510 --> 00:08:38,100
parent died we want to child to die too

00:08:35,390 --> 00:08:41,790
so yeah it's time to talk to you about

00:08:38,100 --> 00:08:45,450
trial and you know this guy I mean his

00:08:41,790 --> 00:08:48,330
name is nathaniel smith and he had these

00:08:45,450 --> 00:08:50,370
ideas great idea he said okay there is

00:08:48,330 --> 00:08:53,040
new feature in python like the icinga

00:08:50,370 --> 00:08:55,190
wait and so what if

00:08:53,040 --> 00:08:57,269
we just drop all the the other

00:08:55,190 --> 00:08:59,459
duplicated way of doing a synchronous

00:08:57,269 --> 00:09:01,889
function like a promise and call back

00:08:59,459 --> 00:09:04,320
and we just focus on this a single thing

00:09:01,889 --> 00:09:06,810
and what if you got a bit further what

00:09:04,320 --> 00:09:08,910
if we invent new way new abstraction new

00:09:06,810 --> 00:09:10,519
building blocks to do a synchronous

00:09:08,910 --> 00:09:12,750
function at synchronous programming and

00:09:10,519 --> 00:09:16,139
let's see how far we can go with this

00:09:12,750 --> 00:09:19,019
and so we end up with try over like this

00:09:16,139 --> 00:09:21,750
so what's about trial there is three

00:09:19,019 --> 00:09:24,569
main concept without trial the first

00:09:21,750 --> 00:09:26,639
thing is the async await keyword will

00:09:24,569 --> 00:09:29,579
reto about it we already know why there

00:09:26,639 --> 00:09:32,009
are so bright the two more exotic thing

00:09:29,579 --> 00:09:34,680
has a nursery and the cancel Scott so

00:09:32,009 --> 00:09:37,680
first the nursery here is a slightly

00:09:34,680 --> 00:09:40,230
modified version of the recursive

00:09:37,680 --> 00:09:42,149
Russian roulette this way it's it was

00:09:40,230 --> 00:09:44,519
written for trial and basically the only

00:09:42,149 --> 00:09:47,819
thing that change is the the red

00:09:44,519 --> 00:09:49,560
rectangle the idea in trial is if you

00:09:47,819 --> 00:09:51,269
want to spawn new Corrosion you cannot

00:09:49,560 --> 00:09:54,449
do it fire-and-forget style like you

00:09:51,269 --> 00:09:57,060
would do with asking hi you must use a

00:09:54,449 --> 00:10:00,300
nursery object so putting it another way

00:09:57,060 --> 00:10:02,130
you have to say that every coroutine in

00:10:00,300 --> 00:10:04,769
your program will be connected to a

00:10:02,130 --> 00:10:06,810
nursery and the good thing about nursery

00:10:04,769 --> 00:10:09,300
is there are a synchronous context

00:10:06,810 --> 00:10:11,610
manager so you use them with a scene

00:10:09,300 --> 00:10:14,220
quiz when you do a sync with a nursery

00:10:11,610 --> 00:10:16,410
you start when you enter it does nothing

00:10:14,220 --> 00:10:19,290
but when you want to leave this block it

00:10:16,410 --> 00:10:20,190
will be blocking it will block until all

00:10:19,290 --> 00:10:22,560
the croton

00:10:20,190 --> 00:10:26,510
that are connected to this nursery will

00:10:22,560 --> 00:10:29,490
end so how does it was all voir problem

00:10:26,510 --> 00:10:32,149
let's see the crow routine we have

00:10:29,490 --> 00:10:34,980
before and now we said are bundled

00:10:32,149 --> 00:10:37,350
inside the nursery right so it looks a

00:10:34,980 --> 00:10:39,990
bit something like that in fact there is

00:10:37,350 --> 00:10:42,990
a tool in in trial which is called a

00:10:39,990 --> 00:10:46,079
money tree and this tool allows you to

00:10:42,990 --> 00:10:48,420
plug inside a trailer application to

00:10:46,079 --> 00:10:50,970
just watch in real time the corrosions

00:10:48,420 --> 00:10:53,790
and so if you use this on our program

00:10:50,970 --> 00:10:57,029
you will see something like that so the

00:10:53,790 --> 00:11:00,269
idea is now what we have is a tree of

00:10:57,029 --> 00:11:02,459
courting it's real graph and so it's not

00:11:00,269 --> 00:11:05,189
simpler icing to visualize how trier

00:11:02,459 --> 00:11:06,870
works when you see this if you take our

00:11:05,189 --> 00:11:09,270
example back with the accept

00:11:06,870 --> 00:11:11,220
from here I think it's really simple to

00:11:09,270 --> 00:11:14,730
see that every time though your ex -

00:11:11,220 --> 00:11:16,380
bubbles up into one protein up it's

00:11:14,730 --> 00:11:19,200
really easy for trial to know which

00:11:16,380 --> 00:11:22,589
curtain is closed so it goes like this

00:11:19,200 --> 00:11:24,270
and so it it just works it really simple

00:11:22,589 --> 00:11:26,370
to see that you have a tree everything

00:11:24,270 --> 00:11:27,870
that enters a tree and unders in doubt

00:11:26,370 --> 00:11:29,970
that you are working on should be

00:11:27,870 --> 00:11:33,150
destroyed because this knot is going to

00:11:29,970 --> 00:11:36,180
to be destroyed too so you end up like

00:11:33,150 --> 00:11:39,300
this you end up clean something else

00:11:36,180 --> 00:11:41,100
about trial is the cancel scope so the

00:11:39,300 --> 00:11:43,410
idea is if we are doing an asynchronous

00:11:41,100 --> 00:11:45,630
if we are using an estranged framework

00:11:43,410 --> 00:11:48,839
it means that we are doing I all right

00:11:45,630 --> 00:11:51,630
the trouble with IO is it's basically

00:11:48,839 --> 00:11:54,240
you are waiting from some from someone

00:11:51,630 --> 00:11:55,740
else and this someone else can crash you

00:11:54,240 --> 00:11:57,930
can have the Rooter and the other end of

00:11:55,740 --> 00:11:59,580
the internet which die or something like

00:11:57,930 --> 00:12:03,120
that so you always have to deal with

00:11:59,580 --> 00:12:04,890
with timeout so it will be it would be

00:12:03,120 --> 00:12:06,960
really great if we could really easily

00:12:04,890 --> 00:12:08,970
say okay I want to have this part of the

00:12:06,960 --> 00:12:12,540
program which has this kind of timeout

00:12:08,970 --> 00:12:14,820
and to put it really easily but as we

00:12:12,540 --> 00:12:17,070
saw we already have this this tree of

00:12:14,820 --> 00:12:18,930
corroding this graph so it's really easy

00:12:17,070 --> 00:12:21,779
we've tried to just say okay I want this

00:12:18,930 --> 00:12:24,810
part of the graph to run say in 0.3

00:12:21,779 --> 00:12:27,120
seconds for example so to do that you

00:12:24,810 --> 00:12:29,339
just use a context manager so you put a

00:12:27,120 --> 00:12:32,370
context manager with this console scope

00:12:29,339 --> 00:12:34,770
and you say okay this block of code I

00:12:32,370 --> 00:12:37,110
want it to run for what most this time

00:12:34,770 --> 00:12:39,330
and if it goes more than that then we

00:12:37,110 --> 00:12:41,640
will just leave this block and every

00:12:39,330 --> 00:12:43,589
node that is been created remember we

00:12:41,640 --> 00:12:46,350
are we are like this so everything that

00:12:43,589 --> 00:12:48,630
is we created and routine you can

00:12:46,350 --> 00:12:53,520
destroy it so you have a guarantee yet

00:12:48,630 --> 00:12:56,310
that no matter what if the the timeout

00:12:53,520 --> 00:13:00,240
occurs your you won't leak any coding

00:12:56,310 --> 00:13:03,270
everything will between oh sorry I go

00:13:00,240 --> 00:13:06,060
too far so yeah one good thing about a

00:13:03,270 --> 00:13:09,089
regular version written right now is we

00:13:06,060 --> 00:13:10,980
got this timeout so now maybe the game

00:13:09,089 --> 00:13:15,390
is a bit more fair we won't kill any

00:13:10,980 --> 00:13:17,520
coalition so I just written a trial

00:13:15,390 --> 00:13:18,390
version of this frequency conversion

00:13:17,520 --> 00:13:21,840
rate and

00:13:18,390 --> 00:13:24,240
yeah we run out of luck this way yeah

00:13:21,840 --> 00:13:26,670
we're really unlucky yeah this time we

00:13:24,240 --> 00:13:29,400
didn't kill anybody so that's nice

00:13:26,670 --> 00:13:32,310
maybe you not bought yet to this concept

00:13:29,400 --> 00:13:34,290
but maybe you just have to think how you

00:13:32,310 --> 00:13:37,470
would have done to implement this

00:13:34,290 --> 00:13:39,270
timeout feature if you would have to do

00:13:37,470 --> 00:13:44,340
this we've just asking hi always a

00:13:39,270 --> 00:13:46,200
previous example okay so that's it and

00:13:44,340 --> 00:13:49,050
that's one of the feature of Trejo

00:13:46,200 --> 00:13:52,050
actually it's there is really really few

00:13:49,050 --> 00:13:54,030
concept it's like an extremely simple a

00:13:52,050 --> 00:13:57,510
synchronous library and that's something

00:13:54,030 --> 00:13:59,460
which is I think really restrained from

00:13:57,510 --> 00:14:00,690
a spirit library because you know you

00:13:59,460 --> 00:14:03,480
know twist it you know as a guy oh

00:14:00,690 --> 00:14:06,180
they're all with lots of documentation a

00:14:03,480 --> 00:14:08,280
lot of concept a lot of things and so it

00:14:06,180 --> 00:14:10,110
seemed very complicated and we try all

00:14:08,280 --> 00:14:11,910
you just read something and in half a

00:14:10,110 --> 00:14:13,650
day you're you're ready to work and you

00:14:11,910 --> 00:14:15,510
have those really small and simple

00:14:13,650 --> 00:14:18,120
building blocks but you can put them

00:14:15,510 --> 00:14:19,860
together to create re complex things the

00:14:18,120 --> 00:14:21,570
easy way I mean it's easy to get things

00:14:19,860 --> 00:14:25,170
right so I think it's a really great

00:14:21,570 --> 00:14:27,510
feature okay so maybe you're wondering

00:14:25,170 --> 00:14:30,330
it looks great on the paper but what

00:14:27,510 --> 00:14:32,100
about real life so there is this use

00:14:30,330 --> 00:14:34,980
case let's say you want you to connect

00:14:32,100 --> 00:14:36,720
to debbie inaud the thing is so you have

00:14:34,980 --> 00:14:39,750
this domain name you want to resolve it

00:14:36,720 --> 00:14:42,150
and you know Internet is a big big thing

00:14:39,750 --> 00:14:45,150
with a lot of complexity so it's never

00:14:42,150 --> 00:14:47,010
simple so when you resolve your domain

00:14:45,150 --> 00:14:48,690
name you will end up with multiple IP

00:14:47,010 --> 00:14:50,580
address and so now you have a new

00:14:48,690 --> 00:14:53,400
trouble which is which IP address should

00:14:50,580 --> 00:14:55,770
I connect to so the first idea you could

00:14:53,400 --> 00:14:57,990
have is you will just try to connect to

00:14:55,770 --> 00:14:59,760
the first one and after some time if you

00:14:57,990 --> 00:15:02,250
fail all right we try the next one and

00:14:59,760 --> 00:15:04,440
so on so forth it truly is yeah this is

00:15:02,250 --> 00:15:07,350
really slow so there is maybe a better

00:15:04,440 --> 00:15:10,020
way so the other way to do it is just to

00:15:07,350 --> 00:15:13,380
go a bit more violently so we just try

00:15:10,020 --> 00:15:16,050
everything in in concurrency and we take

00:15:13,380 --> 00:15:18,420
whichever is the fastest but it takes a

00:15:16,050 --> 00:15:21,570
lot more resources right so there may be

00:15:18,420 --> 00:15:23,610
a middle ground and so an attempt of

00:15:21,570 --> 00:15:26,880
this middle ground is this thing called

00:15:23,610 --> 00:15:29,640
happy eyeball so the idea is you start

00:15:26,880 --> 00:15:32,430
by connecting to the first IP address

00:15:29,640 --> 00:15:35,520
you have and if after some time

00:15:32,430 --> 00:15:38,670
you didn't I mean you still waiting for

00:15:35,520 --> 00:15:40,800
this connection to succeed then you try

00:15:38,670 --> 00:15:42,899
another address and if this other

00:15:40,800 --> 00:15:45,000
address just failed faster than the

00:15:42,899 --> 00:15:47,580
timeouts then you try the next one and

00:15:45,000 --> 00:15:50,130
even show you one of them will succeed

00:15:47,580 --> 00:15:52,740
and then you you can cancel all the

00:15:50,130 --> 00:15:56,339
other Curtin because you have a new

00:15:52,740 --> 00:15:58,140
connection which is correct now so how

00:15:56,339 --> 00:16:00,810
completely it's complicated is it to

00:15:58,140 --> 00:16:03,450
implement there is no implementation of

00:16:00,810 --> 00:16:08,250
this in asking hi oh but there is one in

00:16:03,450 --> 00:16:10,200
twisted so this is the code I didn't

00:16:08,250 --> 00:16:12,360
read it myself but according to

00:16:10,200 --> 00:16:15,120
Nathaniel it's quite complicated code

00:16:12,360 --> 00:16:17,160
there is a lot of nested function inside

00:16:15,120 --> 00:16:19,680
them so it's hard to read it's hard to

00:16:17,160 --> 00:16:21,959
understand it had to it's hard to manage

00:16:19,680 --> 00:16:24,029
so the twisted guy there are aware of

00:16:21,959 --> 00:16:26,820
this and so they come up with a new

00:16:24,029 --> 00:16:29,850
version of this which is much better you

00:16:26,820 --> 00:16:33,270
should know simple so okay as I said

00:16:29,850 --> 00:16:34,830
it's it's less crazy it's easier to work

00:16:33,270 --> 00:16:38,100
with but they are still not happy about

00:16:34,830 --> 00:16:39,990
it but the thing important here is the

00:16:38,100 --> 00:16:42,480
people working on this are like top guy

00:16:39,990 --> 00:16:44,070
I mean the guy who written this this

00:16:42,480 --> 00:16:46,170
implementation the second one is the

00:16:44,070 --> 00:16:48,300
creator of twisted installs so it's

00:16:46,170 --> 00:16:50,040
basically the guy which has the more

00:16:48,300 --> 00:16:52,589
experience in a synchronous programming

00:16:50,040 --> 00:16:54,270
of the whole Python community so the

00:16:52,589 --> 00:16:56,220
problem is not the people the problem is

00:16:54,270 --> 00:16:58,440
the language the language I mean we

00:16:56,220 --> 00:17:00,630
don't speak the right word it was really

00:16:58,440 --> 00:17:03,720
easy talking human language to say okay

00:17:00,630 --> 00:17:05,760
that's how happy I ball works but when

00:17:03,720 --> 00:17:07,559
you want to write it in Python it gets

00:17:05,760 --> 00:17:10,470
really hot and this is not what Python

00:17:07,559 --> 00:17:13,470
is about Python is about being able to

00:17:10,470 --> 00:17:17,189
write a complex thing easily so maybe it

00:17:13,470 --> 00:17:19,740
would be better in trial who knows this

00:17:17,189 --> 00:17:23,069
is a skeleton of our function so we call

00:17:19,740 --> 00:17:24,900
it open TCP socket it takes sauce name

00:17:23,069 --> 00:17:26,429
and the maximum time we want wait

00:17:24,900 --> 00:17:28,170
between to connect to attempt of

00:17:26,429 --> 00:17:30,570
connection so the first thing is a

00:17:28,170 --> 00:17:32,670
really simple we just do the DNS

00:17:30,570 --> 00:17:34,940
resolution and then we got multiple

00:17:32,670 --> 00:17:38,250
targets we could try to connect to two

00:17:34,940 --> 00:17:40,230
here we use this trial socket module

00:17:38,250 --> 00:17:43,110
which is just the same thing than the

00:17:40,230 --> 00:17:46,559
regular our socket module the standards

00:17:43,110 --> 00:17:48,210
one it's just an escrow version of it

00:17:46,559 --> 00:17:49,919
after that we define this winning

00:17:48,210 --> 00:17:51,960
circuit so this will be a variable which

00:17:49,919 --> 00:17:54,720
eventually will get which circuit one

00:17:51,960 --> 00:17:56,489
which socket is ready to be used and if

00:17:54,720 --> 00:17:59,909
we have no one well we just raise an

00:17:56,489 --> 00:18:02,460
exception right now what what what do we

00:17:59,909 --> 00:18:04,289
want to do we want to do multiple thing

00:18:02,460 --> 00:18:05,789
at a time we want to start a connection

00:18:04,289 --> 00:18:07,860
and then another one and this kind of

00:18:05,789 --> 00:18:10,830
thing so to do this in trials there is

00:18:07,860 --> 00:18:13,409
not two ways only one way which is we

00:18:10,830 --> 00:18:15,360
just have to create a nursery so yeah

00:18:13,409 --> 00:18:17,850
that's what we do we creates a nursery

00:18:15,360 --> 00:18:19,919
we just use it as a in synchronous

00:18:17,850 --> 00:18:21,869
context manager and we create this

00:18:19,919 --> 00:18:23,970
attend function so every time we try a

00:18:21,869 --> 00:18:26,190
new attempt against a new IP address we

00:18:23,970 --> 00:18:28,350
will call this a time function and so we

00:18:26,190 --> 00:18:32,639
we start by calling it for the first

00:18:28,350 --> 00:18:35,820
atoms so yeah what are we going to write

00:18:32,639 --> 00:18:38,700
inside this hat and what we can see here

00:18:35,820 --> 00:18:40,440
is a except for the first attempt we are

00:18:38,700 --> 00:18:42,570
always waiting the first thing we do is

00:18:40,440 --> 00:18:45,929
we just waiting waiting for two things

00:18:42,570 --> 00:18:48,570
in fact the first thing is if the

00:18:45,929 --> 00:18:51,330
previous attempt is taking more than the

00:18:48,570 --> 00:18:53,669
timeout time and the second thing we are

00:18:51,330 --> 00:18:57,090
waiting for is if the previous attempt

00:18:53,669 --> 00:18:59,730
just failed fast so to do this in trial

00:18:57,090 --> 00:19:02,100
what we can do is we can create multiple

00:18:59,730 --> 00:19:04,289
events each attempt will have a failed

00:19:02,100 --> 00:19:07,139
event so every time it failed it will

00:19:04,289 --> 00:19:09,690
set up this event so now we can wait on

00:19:07,139 --> 00:19:11,730
this event and we use a console scope to

00:19:09,690 --> 00:19:13,259
say okay I want to wait on this event

00:19:11,730 --> 00:19:16,109
but I want I don't want to wait on this

00:19:13,259 --> 00:19:18,330
event no longer than this time so if we

00:19:16,109 --> 00:19:21,320
reach the timeout we will just leave

00:19:18,330 --> 00:19:24,450
this context manager and continue a code

00:19:21,320 --> 00:19:26,820
so now you we are almost down to do the

00:19:24,450 --> 00:19:29,519
actual job but just before that we have

00:19:26,820 --> 00:19:31,799
to spawn the next attempt because before

00:19:29,519 --> 00:19:33,840
doing our own attempt we have to spawn

00:19:31,799 --> 00:19:36,239
the next one because it will watch to

00:19:33,840 --> 00:19:39,299
see if we are taking too long so to do

00:19:36,239 --> 00:19:42,239
that we just use the nursery so we just

00:19:39,299 --> 00:19:44,220
take the nursery and create a snow Sri

00:19:42,239 --> 00:19:47,220
to create a new Croton and to execute

00:19:44,220 --> 00:19:51,059
this next attend and the next IP address

00:19:47,220 --> 00:19:52,859
and now we all set we can just do a

00:19:51,059 --> 00:19:55,440
socket connection soak a trial

00:19:52,859 --> 00:19:57,250
connection so again it's just like the

00:19:55,440 --> 00:20:02,200
the regular

00:19:57,250 --> 00:20:03,670
the regular socket module library so now

00:20:02,200 --> 00:20:08,170
there is only two possible outcomes

00:20:03,670 --> 00:20:11,530
which are first the the collection

00:20:08,170 --> 00:20:14,260
failed so what we do is just we update

00:20:11,530 --> 00:20:16,120
this event about okay we couldn't do

00:20:14,260 --> 00:20:20,110
anything so now it's up to the next item

00:20:16,120 --> 00:20:22,240
to try to succeed and the other outcome

00:20:20,110 --> 00:20:25,120
is well we got the winning socket so we

00:20:22,240 --> 00:20:26,710
just have to update this and now we can

00:20:25,120 --> 00:20:28,360
cancel the nurse from the nursery

00:20:26,710 --> 00:20:30,880
so the idea about canceling the nursery

00:20:28,360 --> 00:20:33,580
is like we can sell all the croton which

00:20:30,880 --> 00:20:35,020
are connecting to this nursery and given

00:20:33,580 --> 00:20:37,060
we have cuckoo console all those

00:20:35,020 --> 00:20:39,940
coroutines it means the nursery is now

00:20:37,060 --> 00:20:41,620
free and so this blocks we have there

00:20:39,940 --> 00:20:44,080
with this a synchronous collects manager

00:20:41,620 --> 00:20:47,460
we will just leave it automatically and

00:20:44,080 --> 00:20:50,770
continue the code so yeah now we're done

00:20:47,460 --> 00:20:52,960
maybe you're not sure if it works so I

00:20:50,770 --> 00:20:55,420
have the card here I think it this one

00:20:52,960 --> 00:20:58,210
yeah so it's just the same I show you

00:20:55,420 --> 00:21:00,540
just I added this main function to just

00:20:58,210 --> 00:21:02,500
say okay we'll try some DB on.org

00:21:00,540 --> 00:21:04,480
obviously it would be a much more

00:21:02,500 --> 00:21:08,470
impressing if I have done a live coding

00:21:04,480 --> 00:21:21,360
but no it's not my kind of style so

00:21:08,470 --> 00:21:21,360
let's just pretend it works anyway yeah

00:21:23,340 --> 00:21:29,110
I'm doing applause - because it's not my

00:21:25,720 --> 00:21:33,310
code it's Nataniel ones I stole most of

00:21:29,110 --> 00:21:35,710
my talk from his own so anyway so what

00:21:33,310 --> 00:21:38,140
does trio offers you yes there is

00:21:35,710 --> 00:21:39,910
basically everything that you can expect

00:21:38,140 --> 00:21:41,170
from an a synchronous library like you

00:21:39,910 --> 00:21:43,810
know all the standard stuff you can use

00:21:41,170 --> 00:21:45,850
a synchronous file system access you can

00:21:43,810 --> 00:21:48,700
use networking there is all those

00:21:45,850 --> 00:21:51,370
synchronous tools like we use eval you

00:21:48,700 --> 00:21:53,110
have Q your blogs etc there is a really

00:21:51,370 --> 00:21:55,270
good testing helper if you love a PI

00:21:53,110 --> 00:21:57,220
test there is a great pices module if

00:21:55,270 --> 00:21:59,470
you have a hypothesis there is a great

00:21:57,220 --> 00:22:01,360
how about a this module if you don't

00:21:59,470 --> 00:22:03,940
love hypotheses you should try apathy

00:22:01,360 --> 00:22:05,920
this and then you will love it there is

00:22:03,940 --> 00:22:08,080
this control-c working I mean it's it's

00:22:05,920 --> 00:22:11,140
feel like yeah what is this I use

00:22:08,080 --> 00:22:13,210
control-c it works but no ctrl C is

00:22:11,140 --> 00:22:15,280
really hard to get it right and nobody

00:22:13,210 --> 00:22:18,040
knows about it until you have read this

00:22:15,280 --> 00:22:19,990
article that nothing y'all wrote on his

00:22:18,040 --> 00:22:22,000
blog you should dividual go to it work

00:22:19,990 --> 00:22:24,820
everything is reinter esting so yeah

00:22:22,000 --> 00:22:26,980
this is working and finally there is a

00:22:24,820 --> 00:22:30,100
one of my favorite feature is this

00:22:26,980 --> 00:22:31,480
comparable layer you know I think I

00:22:30,100 --> 00:22:34,900
always regrade

00:22:31,480 --> 00:22:36,940
it has it it makes all the entire

00:22:34,900 --> 00:22:38,770
asynchronous world in Python compatible

00:22:36,940 --> 00:22:40,990
with each other so we've asking how you

00:22:38,770 --> 00:22:42,580
have compatibility with twisted you have

00:22:40,990 --> 00:22:45,370
compatibility with Toronado everything

00:22:42,580 --> 00:22:48,700
is compatible so now we try all you just

00:22:45,370 --> 00:22:51,160
have to write an a single loop that you

00:22:48,700 --> 00:22:53,770
write it inside entry oh and now you got

00:22:51,160 --> 00:22:55,540
compatibility with the entire rest of

00:22:53,770 --> 00:22:58,210
the ecosystem of the a synchronous

00:22:55,540 --> 00:22:59,860
ecosystem just this way so it's very

00:22:58,210 --> 00:23:01,960
great because it means that your own

00:22:59,860 --> 00:23:05,080
code base the code you you just want to

00:23:01,960 --> 00:23:07,210
type fast and want to do the thing you

00:23:05,080 --> 00:23:09,670
can use it in trial so you will get

00:23:07,210 --> 00:23:11,350
safety but for the third-party library

00:23:09,670 --> 00:23:13,030
is the thing that like say you want to

00:23:11,350 --> 00:23:16,150
connect you possibly you want to use s

00:23:13,030 --> 00:23:18,340
in PG because it's really great but this

00:23:16,150 --> 00:23:20,020
code is already well tested so you know

00:23:18,340 --> 00:23:22,720
there won't be any trouble and you can

00:23:20,020 --> 00:23:24,460
really easily plug this a synchronous

00:23:22,720 --> 00:23:25,030
library with your code which is we can

00:23:24,460 --> 00:23:28,210
in trial

00:23:25,030 --> 00:23:29,920
so yeah it's regreat and yeah i'm not

00:23:28,210 --> 00:23:32,410
the only one who think this code is very

00:23:29,920 --> 00:23:36,790
great there is a penny of famous people

00:23:32,410 --> 00:23:39,940
like even rock stars yeah so anyway

00:23:36,790 --> 00:23:43,540
I guess this is about right one more

00:23:39,940 --> 00:23:45,730
thing I just I just stolen maybe half of

00:23:43,540 --> 00:23:48,340
my conference is from a national

00:23:45,730 --> 00:23:50,680
conference from last PyCon and the link

00:23:48,340 --> 00:23:53,110
which is here is home so you should

00:23:50,680 --> 00:23:55,120
definitely check this out because there

00:23:53,110 --> 00:23:57,280
is a lot of things if you are interested

00:23:55,120 --> 00:23:58,870
in this topic it's like okay you should

00:23:57,280 --> 00:24:00,490
watch this conference you should read

00:23:58,870 --> 00:24:02,950
this blog post and this one and this one

00:24:00,490 --> 00:24:05,860
so if you want to become better at this

00:24:02,950 --> 00:24:08,050
and you don't know already this guy

00:24:05,860 --> 00:24:12,270
Nathaniel you should definitely go to

00:24:08,050 --> 00:24:22,000
this link that's it

00:24:12,270 --> 00:24:22,000
[Applause]

00:24:35,960 --> 00:24:39,980
hi that was excellent could you say a

00:24:38,509 --> 00:24:42,139
little bit more about hyper test and

00:24:39,980 --> 00:24:44,960
indeed weather unit test is also

00:24:42,139 --> 00:24:46,309
available with this thing or yeah so

00:24:44,960 --> 00:24:48,110
what do you want to know about Hackett

00:24:46,309 --> 00:24:51,379
is you already know this thing oh no

00:24:48,110 --> 00:24:54,740
okay so it's basically the greatest

00:24:51,379 --> 00:24:57,429
thing if you want to test code the if

00:24:54,740 --> 00:25:01,610
you want to test code anything anything

00:24:57,429 --> 00:25:04,789
the idea is in normally what you do is

00:25:01,610 --> 00:25:07,100
you create use cases so you decide okay

00:25:04,789 --> 00:25:09,950
I want to test this function I will put

00:25:07,100 --> 00:25:12,440
this input and I want to get this output

00:25:09,950 --> 00:25:14,149
but the thing is most of the time when

00:25:12,440 --> 00:25:15,649
you do this you forget things for

00:25:14,149 --> 00:25:17,869
instance let's say you want to have a

00:25:15,649 --> 00:25:18,379
function that works on the on the

00:25:17,869 --> 00:25:20,450
strings

00:25:18,379 --> 00:25:22,429
you will try simple case like you use

00:25:20,450 --> 00:25:24,499
these ASCII strings but you will forget

00:25:22,429 --> 00:25:27,080
that there is like unique of strings and

00:25:24,499 --> 00:25:28,940
there is unique of string with Unicode

00:25:27,080 --> 00:25:31,039
code points which are not printable this

00:25:28,940 --> 00:25:33,309
kind of thing so it's get really really

00:25:31,039 --> 00:25:36,440
key very complicated and so we've

00:25:33,309 --> 00:25:40,340
hypothesis what you can say is yeah

00:25:36,440 --> 00:25:45,679
sorry it's by accent which is sorry I'm

00:25:40,340 --> 00:25:48,619
French yeah

00:25:45,679 --> 00:25:50,450
so now you can just turn around inside

00:25:48,619 --> 00:26:04,700
to people how great hypothesis is and

00:25:50,450 --> 00:26:06,499
pronounce it right yeah that's it so

00:26:04,700 --> 00:26:10,419
anyone who want to talks about trio and

00:26:06,499 --> 00:26:10,419
not hypothesis and French accent

00:26:16,970 --> 00:26:20,349
yeah you have to come here

00:26:30,780 --> 00:26:38,520
so have you have you encountered any

00:26:33,390 --> 00:26:41,880
bugs with the trio async I oh no I

00:26:38,520 --> 00:26:44,190
didn't encounter any bugs yet there is

00:26:41,880 --> 00:26:46,080
little kind of let's say quirks

00:26:44,190 --> 00:26:48,330
sometime because yeah obviously you're

00:26:46,080 --> 00:26:50,490
using one asynchronous library with

00:26:48,330 --> 00:26:54,420
another one so obviously you have to be

00:26:50,490 --> 00:27:00,630
careful but yeah if you're careful

00:26:54,420 --> 00:27:04,140
enough it's really straightforward and

00:27:00,630 --> 00:27:06,210
yeah by the way trial codebase is crazy

00:27:04,140 --> 00:27:08,610
good I mean when you read the code base

00:27:06,210 --> 00:27:11,250
there is like two time more comments

00:27:08,610 --> 00:27:14,550
than the code and every time is like the

00:27:11,250 --> 00:27:16,530
guy is is writing all the the

00:27:14,550 --> 00:27:18,480
state-of-the-art about just this line of

00:27:16,530 --> 00:27:21,420
code this kind of thing we are doing is

00:27:18,480 --> 00:27:22,680
this is DS DS and if you want to know

00:27:21,420 --> 00:27:25,230
more about this you should go there

00:27:22,680 --> 00:27:27,000
there they are there so just if you

00:27:25,230 --> 00:28:03,690
don't want to use trial at least read

00:27:27,000 --> 00:28:06,840
the code no it's you should see it a bit

00:28:03,690 --> 00:28:10,020
like you you're writing some code in I

00:28:06,840 --> 00:28:12,510
think IO and say you say okay I want to

00:28:10,020 --> 00:28:14,520
go faster so now I will don't use the I

00:28:12,510 --> 00:28:17,490
think IO normal implementation now I

00:28:14,520 --> 00:28:18,780
will use UV loop so it's still asking

00:28:17,490 --> 00:28:20,970
higher but it's just another

00:28:18,780 --> 00:28:22,770
implementation of I think I alright so

00:28:20,970 --> 00:28:24,990
now it's just the same thing with trial

00:28:22,770 --> 00:28:27,690
with trial you got any an implementation

00:28:24,990 --> 00:28:30,540
of a sync IO which is made with trial so

00:28:27,690 --> 00:28:32,190
you can run totally just as entire code

00:28:30,540 --> 00:28:33,900
with this but it wouldn't be really

00:28:32,190 --> 00:28:35,580
interesting and so the good thing is you

00:28:33,900 --> 00:28:37,710
can have a part of your code which is in

00:28:35,580 --> 00:28:39,900
trial and the rest which is in sync IO

00:28:37,710 --> 00:28:42,390
and use this implementation of the ICAO

00:28:39,900 --> 00:28:44,250
event loop to make the balls be able to

00:28:42,390 --> 00:28:51,809
talk to each other

00:28:44,250 --> 00:28:54,570
that's great yeah but twisted and

00:28:51,809 --> 00:28:57,120
tornado I mean I'm not 100% sure about

00:28:54,570 --> 00:28:59,220
this because I never tried it but what

00:28:57,120 --> 00:29:02,400
they say it twisted is now compatible

00:28:59,220 --> 00:29:10,320
with the I think IO event loop so you

00:29:02,400 --> 00:29:14,429
have no more no trouble now yeah even

00:29:10,320 --> 00:29:20,850
that yeah sorry you cannot have

00:29:14,429 --> 00:29:23,000
compatibility with PHP - now you're

00:29:20,850 --> 00:29:23,000
right

00:29:31,890 --> 00:29:43,380
[Music]

00:29:33,270 --> 00:29:43,380

YouTube URL: https://www.youtube.com/watch?v=DK4SwlyWm-k


