Title: David Beazley - Die Threads
Publication date: 2018-08-22
Playlist: EuroPython 2018
Description: 
	Die Threads
[EuroPython 2018 - Keynote - 2018-07-25 - Smarkets]
[Edinburgh, UK]

By David Beazley

In the brave new world of async, threads are now a thing of the past. Or are they not?



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2018.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:01,250 --> 00:00:06,930
all right thank thank you very much this

00:00:05,190 --> 00:00:08,340
it's even though I've been doing Python

00:00:06,930 --> 00:00:10,110
for a while it's actually the first time

00:00:08,340 --> 00:00:12,480
that I've been to Euro Python so if

00:00:10,110 --> 00:00:15,660
you're a first-time attendee come find

00:00:12,480 --> 00:00:18,510
me and we can talk about it here as far

00:00:15,660 --> 00:00:21,420
as the the talk here okay die threads

00:00:18,510 --> 00:00:23,070
had number people coming up to me last

00:00:21,420 --> 00:00:25,760
night there's my god this is some German

00:00:23,070 --> 00:00:28,740
joke or something like that and I'm like

00:00:25,760 --> 00:00:32,219
unfortunately no actually a lot of

00:00:28,740 --> 00:00:35,070
threads are gonna die in this talk so to

00:00:32,219 --> 00:00:37,469
just to start the talk off I'm gonna

00:00:35,070 --> 00:00:40,559
throw up a sort of a deep thought to

00:00:37,469 --> 00:00:44,340
ponder here you know when threads sleep

00:00:40,559 --> 00:00:45,899
do they dream I don't know what would

00:00:44,340 --> 00:00:49,079
possess someone to come up with that

00:00:45,899 --> 00:00:51,300
thought maybe it's related to this tweet

00:00:49,079 --> 00:00:54,539
that I saw recently because while you're

00:00:51,300 --> 00:00:57,239
pondering the first the first that there

00:00:54,539 --> 00:00:59,760
I saw saw this I don't I don't know

00:00:57,239 --> 00:01:03,120
Jackson and I apologize Jackson but I

00:00:59,760 --> 00:01:06,090
saw this and it's like what problem and

00:01:03,120 --> 00:01:07,830
I trying to create with this code maybe

00:01:06,090 --> 00:01:09,450
this is I'm going to talk about like

00:01:07,830 --> 00:01:11,970
what problem I trying to create with

00:01:09,450 --> 00:01:13,409
this talk but we'll get to that okay so

00:01:11,970 --> 00:01:18,270
the thing that I'm thinking about in

00:01:13,409 --> 00:01:19,890
this talk is actually kind of the more

00:01:18,270 --> 00:01:21,150
stuff with the world of async so there's

00:01:19,890 --> 00:01:23,610
been a lot of stuff with async

00:01:21,150 --> 00:01:25,560
programming going on and PI that I've

00:01:23,610 --> 00:01:27,450
given some talks about various aspects

00:01:25,560 --> 00:01:30,210
of that and I'm not really gonna gonna

00:01:27,450 --> 00:01:31,710
repeat that here but one thing with with

00:01:30,210 --> 00:01:33,840
kind of the world of acing cuz you've

00:01:31,710 --> 00:01:35,820
got this you have two different worlds

00:01:33,840 --> 00:01:38,159
of Python functions that have emerged

00:01:35,820 --> 00:01:40,530
you have the sort of the normal nice

00:01:38,159 --> 00:01:43,140
Python function so you know where you

00:01:40,530 --> 00:01:44,970
know the the tomato case there and then

00:01:43,140 --> 00:01:47,310
you have this this async world of

00:01:44,970 --> 00:01:50,250
functions you know the tomato case you

00:01:47,310 --> 00:01:51,780
know the famous song here and I'm really

00:01:50,250 --> 00:01:53,700
interested in the way that this that

00:01:51,780 --> 00:01:55,079
these two worlds kind of interact

00:01:53,700 --> 00:01:56,880
because it's it's sort of a very

00:01:55,079 --> 00:01:58,229
interesting thing having a programming

00:01:56,880 --> 00:02:01,200
language with two different types of

00:01:58,229 --> 00:02:02,880
functions in there and where you can get

00:02:01,200 --> 00:02:04,710
into sort of strange things as if you

00:02:02,880 --> 00:02:06,899
try to mix these two worlds together

00:02:04,710 --> 00:02:09,569
like if you try to write a normal Python

00:02:06,899 --> 00:02:12,140
function and then all the sudden you try

00:02:09,569 --> 00:02:14,390
to to go into like a sink

00:02:12,140 --> 00:02:16,220
the way you call an async functions with

00:02:14,390 --> 00:02:19,070
a weight you're you're basically gonna

00:02:16,220 --> 00:02:20,930
get shut off doing that okay it's like

00:02:19,070 --> 00:02:23,180
Python hates that it's like you can't

00:02:20,930 --> 00:02:25,700
call async from the world of synchronous

00:02:23,180 --> 00:02:27,560
code but you also run into problems if

00:02:25,700 --> 00:02:29,600
you go the other way like if you're if

00:02:27,560 --> 00:02:31,580
you're using async IO or a sink or

00:02:29,600 --> 00:02:33,530
something you're writing async functions

00:02:31,580 --> 00:02:35,450
and then you decide to execute like a

00:02:33,530 --> 00:02:38,600
like a synchronous you know normal

00:02:35,450 --> 00:02:41,110
Python function in there what happens at

00:02:38,600 --> 00:02:41,110
that point

00:02:41,170 --> 00:02:45,680
anything could happen I mean it's like a

00:02:43,940 --> 00:02:47,300
normal Python function it could launch a

00:02:45,680 --> 00:02:49,730
thread it could block it could go

00:02:47,300 --> 00:02:52,730
compute Fibonacci numbers or mind

00:02:49,730 --> 00:02:54,080
bitcoins or whatever it's sort of there

00:02:52,730 --> 00:02:57,290
sort of is there sort of lots of

00:02:54,080 --> 00:03:00,140
problems with that so I kind of look at

00:02:57,290 --> 00:03:02,300
this situation it's like huh that's just

00:03:00,140 --> 00:03:03,590
weird it's like okay yeah yeah it's like

00:03:02,300 --> 00:03:05,239
you have these two of these two worlds

00:03:03,590 --> 00:03:08,630
of functions and there's all sorts of

00:03:05,239 --> 00:03:11,090
bad things that can happen so stepping

00:03:08,630 --> 00:03:12,860
back from that a moment one of the

00:03:11,090 --> 00:03:15,560
things that I that kind of asked people

00:03:12,860 --> 00:03:18,590
when I teach and meet people is this

00:03:15,560 --> 00:03:21,350
question of why are you using async

00:03:18,590 --> 00:03:22,760
program this is actually a big question

00:03:21,350 --> 00:03:24,320
you know it's like why would you go into

00:03:22,760 --> 00:03:26,360
this world if async where you have all

00:03:24,320 --> 00:03:28,549
these async functions and so forth and

00:03:26,360 --> 00:03:30,799
typical answers that come up are things

00:03:28,549 --> 00:03:32,510
like wow we're we're Twitter or a

00:03:30,799 --> 00:03:33,440
Facebook or something like that it's

00:03:32,510 --> 00:03:35,330
like oh okay

00:03:33,440 --> 00:03:37,730
but that's probably a good use case I

00:03:35,330 --> 00:03:39,830
mean one one benefit of async is large

00:03:37,730 --> 00:03:42,560
scaling large lots of clients and so

00:03:39,830 --> 00:03:44,360
forth but a lot of Python programmers

00:03:42,560 --> 00:03:46,370
like myself it's like I'm not Twitter

00:03:44,360 --> 00:03:49,010
looks like I'm not doing things at that

00:03:46,370 --> 00:03:52,880
kind of scale okay so I'm not really so

00:03:49,010 --> 00:03:54,170
interested in that another question you

00:03:52,880 --> 00:03:55,760
know another response to sometimes get

00:03:54,170 --> 00:03:58,160
is well if there's the the global

00:03:55,760 --> 00:04:00,049
interpreter lock and I sort of feel bad

00:03:58,160 --> 00:04:02,540
about that because I sort of blew up the

00:04:00,049 --> 00:04:04,519
gill like eight years ago and some talk

00:04:02,540 --> 00:04:07,010
and everybody points at it and it's like

00:04:04,519 --> 00:04:09,920
a Python evil because of the because of

00:04:07,010 --> 00:04:11,870
the gill that's a that's a little weird

00:04:09,920 --> 00:04:13,220
too because if you get into a

00:04:11,870 --> 00:04:16,010
synchronous program it doesn't really

00:04:13,220 --> 00:04:17,239
solve the gill I mean you still have it

00:04:16,010 --> 00:04:19,130
it's just you're just getting rid of

00:04:17,239 --> 00:04:21,890
threads I mean it's it's like you're not

00:04:19,130 --> 00:04:23,260
getting any real benefit related to that

00:04:21,890 --> 00:04:26,140
so

00:04:23,260 --> 00:04:27,490
I'm not not so interested in that either

00:04:26,140 --> 00:04:29,830
I mean we're not gonna we're not gonna

00:04:27,490 --> 00:04:32,110
fix that problem but then there's this

00:04:29,830 --> 00:04:35,860
this third thing that comes up which is

00:04:32,110 --> 00:04:39,940
just people's impressions of threads I'm

00:04:35,860 --> 00:04:41,680
sort of cured under aming in here at one

00:04:39,940 --> 00:04:43,480
point or another I'm a little bit

00:04:41,680 --> 00:04:44,770
curious if your experience with thread

00:04:43,480 --> 00:04:46,690
program it's kind of like my experience

00:04:44,770 --> 00:04:49,630
with thread programming so you run some

00:04:46,690 --> 00:04:51,850
thread program and then just sits there

00:04:49,630 --> 00:04:53,890
and like nothing happens and then you

00:04:51,850 --> 00:04:55,990
and then you've like hit control-c and

00:04:53,890 --> 00:04:58,120
then like nothing still happens and then

00:04:55,990 --> 00:05:02,140
you hit it a few more times and you're

00:04:58,120 --> 00:05:04,510
like sucks and like finally you hit you

00:05:02,140 --> 00:05:06,010
control-z the whole thing and then you

00:05:04,510 --> 00:05:08,560
have to find your like Python process

00:05:06,010 --> 00:05:15,280
and then like kill minus 9 or something

00:05:08,560 --> 00:05:16,900
like that I said yeah okay so now we're

00:05:15,280 --> 00:05:19,990
getting into the German part of the talk

00:05:16,900 --> 00:05:21,190
here and I die threads that I hear now

00:05:19,990 --> 00:05:23,080
this I think that's like a common

00:05:21,190 --> 00:05:27,310
experience with threads as you do this

00:05:23,080 --> 00:05:30,040
and it's it's like terror terrible

00:05:27,310 --> 00:05:33,400
experience there it's not just this

00:05:30,040 --> 00:05:35,110
though I think if you look at threads if

00:05:33,400 --> 00:05:37,720
there's a lot of just weird stuff about

00:05:35,110 --> 00:05:38,710
it like like even creating a thread is

00:05:37,720 --> 00:05:41,470
kind of annoying

00:05:38,710 --> 00:05:42,700
I haven't teach people in classes it's

00:05:41,470 --> 00:05:45,550
like hey this is how you create a thread

00:05:42,700 --> 00:05:47,230
and they sort of ignore the whole thing

00:05:45,550 --> 00:05:49,360
that's up here and then focus on like

00:05:47,230 --> 00:05:51,580
the one topple and they at the end like

00:05:49,360 --> 00:05:54,640
why is it five comma and there's a whole

00:05:51,580 --> 00:05:56,050
discussion about that and then or the

00:05:54,640 --> 00:05:57,670
only way to create a thread is to use

00:05:56,050 --> 00:06:01,480
everybody's favorite and feature which

00:05:57,670 --> 00:06:03,040
is inheritance obviously do that so you

00:06:01,480 --> 00:06:06,610
know we like creating threads is sort of

00:06:03,040 --> 00:06:08,860
weird communicating with a thread is

00:06:06,610 --> 00:06:10,600
sort of annoying like let's say you have

00:06:08,860 --> 00:06:13,030
a thread and and and you want to return

00:06:10,600 --> 00:06:14,860
a result back you would think that there

00:06:13,030 --> 00:06:16,660
would be some easy way to do that like

00:06:14,860 --> 00:06:19,810
you start a thread and then you join it

00:06:16,660 --> 00:06:21,520
you get the result and like no I mean

00:06:19,810 --> 00:06:22,870
it's like threads basically you launch

00:06:21,520 --> 00:06:24,850
them and they just sort of fall off the

00:06:22,870 --> 00:06:27,370
end of the universe or the edge of the

00:06:24,850 --> 00:06:30,520
world the only way to get a result back

00:06:27,370 --> 00:06:32,320
is you you have to arrange for it

00:06:30,520 --> 00:06:34,330
maybe you mess around with futures or

00:06:32,320 --> 00:06:35,729
some other other thing but you know the

00:06:34,330 --> 00:06:37,409
code is already kind of making

00:06:35,729 --> 00:06:40,499
you know kind of cry a little bit with

00:06:37,409 --> 00:06:42,960
the with the added complexity and then

00:06:40,499 --> 00:06:45,029
and then you get into things like can

00:06:42,960 --> 00:06:46,979
you cancel a thread or kill it or

00:06:45,029 --> 00:06:49,559
something I mean this is a whole you

00:06:46,979 --> 00:06:51,210
know a whole big topic that we'll get to

00:06:49,559 --> 00:06:52,770
in a second but it's like if you want to

00:06:51,210 --> 00:06:55,259
kill a thread you're basically on your

00:06:52,770 --> 00:06:57,389
own you know roll on the floor laughing

00:06:55,259 --> 00:06:59,610
kind of kind of kind of thing with that

00:06:57,389 --> 00:07:01,439
if you if you've do some searching

00:06:59,610 --> 00:07:03,689
online by the way you might find people

00:07:01,439 --> 00:07:05,639
saying like well actually have you

00:07:03,689 --> 00:07:08,669
considered using c-types to kill us and

00:07:05,639 --> 00:07:11,309
then know like you'll find answers like

00:07:08,669 --> 00:07:13,620
oh you can you can like just directly go

00:07:11,309 --> 00:07:15,839
into like the posix library or something

00:07:13,620 --> 00:07:20,639
a new cure program with using c-type

00:07:15,839 --> 00:07:22,469
like so so i think about this this like

00:07:20,639 --> 00:07:26,789
thread experience and it's like this is

00:07:22,469 --> 00:07:28,889
just bad but they basically work I mean

00:07:26,789 --> 00:07:30,509
for some definition of work I mean one

00:07:28,889 --> 00:07:33,599
benefit of threads is you know you can

00:07:30,509 --> 00:07:35,159
run normal code and threads probably

00:07:33,599 --> 00:07:38,159
works you don't have to rewrite the

00:07:35,159 --> 00:07:40,339
whole universe you kind of you kind of

00:07:38,159 --> 00:07:44,009
get that but it's still not a great

00:07:40,339 --> 00:07:46,800
great experience and maybe because of

00:07:44,009 --> 00:07:48,599
that experience that is maybe a big

00:07:46,800 --> 00:07:50,729
appeal of some of the async stuff I mean

00:07:48,599 --> 00:07:52,889
it's in some sense it's like a new you

00:07:50,729 --> 00:07:54,479
know it's like a new starting point and

00:07:52,889 --> 00:07:56,279
maybe an appeal is you know you can kind

00:07:54,479 --> 00:07:58,050
of rebuild the universe or something

00:07:56,279 --> 00:08:00,959
it's like let's do it right this time

00:07:58,050 --> 00:08:02,279
and see what see what happens

00:08:00,959 --> 00:08:03,990
all right whether it's gonna end up like

00:08:02,279 --> 00:08:06,120
the slide on the right I don't know but

00:08:03,990 --> 00:08:09,059
it's you know kind of you know kind of

00:08:06,120 --> 00:08:10,319
kind of rebuild things and you do see

00:08:09,059 --> 00:08:11,759
this I mean there's there's a lot of

00:08:10,319 --> 00:08:14,249
people work in an async lie like

00:08:11,759 --> 00:08:16,589
versions of async libraries to do

00:08:14,249 --> 00:08:19,499
different things like HTTP and requests

00:08:16,589 --> 00:08:20,969
and database and Redis and all this all

00:08:19,499 --> 00:08:22,620
this stuff and this is there's actually

00:08:20,969 --> 00:08:23,939
a lot of very interesting things going

00:08:22,620 --> 00:08:25,559
on with this I mean if you look at some

00:08:23,939 --> 00:08:26,969
of the talks on it and some of the work

00:08:25,559 --> 00:08:28,709
I mean it's there's some there's some

00:08:26,969 --> 00:08:30,870
cool ideas you know like that's like the

00:08:28,709 --> 00:08:33,690
sans IO stuff trying to get rid of IO

00:08:30,870 --> 00:08:36,560
and so forth but but but I'm sort of

00:08:33,690 --> 00:08:42,360
looking at this and thinking about it

00:08:36,560 --> 00:08:45,360
had this sort of thought like couldn't

00:08:42,360 --> 00:08:47,130
you just rewrite threads or maybe could

00:08:45,360 --> 00:08:49,110
you re envision threads I mean if we're

00:08:47,130 --> 00:08:51,720
gonna re envision every

00:08:49,110 --> 00:08:55,699
maybe we could reinvent threads at the

00:08:51,720 --> 00:08:58,800
same time so I'm gonna do a little

00:08:55,699 --> 00:09:00,990
experiment of re-envisioning threads

00:08:58,800 --> 00:09:04,920
here this is gonna do involve some live

00:09:00,990 --> 00:09:07,440
coding and some demos and it's it's more

00:09:04,920 --> 00:09:09,120
of a thought experiment and I just want

00:09:07,440 --> 00:09:11,519
to I want to preface this by saying this

00:09:09,120 --> 00:09:12,959
is nothing that's suitable for any kind

00:09:11,519 --> 00:09:16,980
of production or anything at this time

00:09:12,959 --> 00:09:18,930
this is purely purely experimental so

00:09:16,980 --> 00:09:22,160
the thing that I'm kind of thinking

00:09:18,930 --> 00:09:25,610
about is you know what if there were

00:09:22,160 --> 00:09:28,529
like a replacement thread library I

00:09:25,610 --> 00:09:31,260
don't know we're basically gonna redo

00:09:28,529 --> 00:09:32,760
threads that's kind of our our thought

00:09:31,260 --> 00:09:36,019
so I mean so maybe I'm gonna have some

00:09:32,760 --> 00:09:38,690
library that involves the word we do I

00:09:36,019 --> 00:09:41,070
don't know maybe we call it's read oh

00:09:38,690 --> 00:09:43,230
it's a bad name but you need a you need

00:09:41,070 --> 00:09:45,630
a cute name for your your library

00:09:43,230 --> 00:09:47,339
they're actually thread Oh sounds really

00:09:45,630 --> 00:09:49,500
awesome if you've lower your voice use

00:09:47,339 --> 00:09:52,380
it the right o or something don't you

00:09:49,500 --> 00:09:54,389
actually don't do that so so imagine

00:09:52,380 --> 00:09:57,389
that you have like on this sort of new

00:09:54,389 --> 00:09:59,880
thread library and you tried to fix like

00:09:57,389 --> 00:10:02,220
all these problems that you hated about

00:09:59,880 --> 00:10:05,490
the old one so so maybe just it's like

00:10:02,220 --> 00:10:07,889
like starting off let's say let's say

00:10:05,490 --> 00:10:09,240
you had a simple function like that and

00:10:07,889 --> 00:10:12,060
you just wanted to launch a thread and

00:10:09,240 --> 00:10:14,160
get the result back I would really like

00:10:12,060 --> 00:10:15,240
to have some easier way to do this or

00:10:14,160 --> 00:10:19,490
you could just say well let's just spawn

00:10:15,240 --> 00:10:24,510
that function with those arguments and

00:10:19,490 --> 00:10:27,660
then just get the result back maybe

00:10:24,510 --> 00:10:29,940
maybe do that don't have inheritance

00:10:27,660 --> 00:10:32,100
don't have the one topple don't involve

00:10:29,940 --> 00:10:34,459
futures and all this stuff just just try

00:10:32,100 --> 00:10:36,959
to do something really simple like that

00:10:34,459 --> 00:10:40,319
and see what that would look like now

00:10:36,959 --> 00:10:44,069
see if I can find my curves area so run

00:10:40,319 --> 00:10:45,660
that maybe call this X Y x1 here oh no

00:10:44,069 --> 00:10:48,480
and you have to give it an argument here

00:10:45,660 --> 00:10:51,839
okay you always have to do debugging and

00:10:48,480 --> 00:10:52,860
then yeah in the talk okay so maybe you

00:10:51,839 --> 00:10:55,769
could maybe could just start with that

00:10:52,860 --> 00:10:58,740
just give my threads just just a better

00:10:55,769 --> 00:10:59,080
experience from the start basically it's

00:10:58,740 --> 00:11:00,940
like

00:10:59,080 --> 00:11:03,910
okay you have a function you can call it

00:11:00,940 --> 00:11:04,839
you can get you can get the results you

00:11:03,910 --> 00:11:07,839
might be able to do some things with

00:11:04,839 --> 00:11:10,120
errors as well you know maybe like let's

00:11:07,839 --> 00:11:14,830
say somebody called this with I've like

00:11:10,120 --> 00:11:16,390
bad like bad types or something instead

00:11:14,830 --> 00:11:18,010
of instead of just having it like right

00:11:16,390 --> 00:11:19,420
now with threads if you crash they sort

00:11:18,010 --> 00:11:21,010
of print a message and then disappear

00:11:19,420 --> 00:11:23,200
off into the paper or something like

00:11:21,010 --> 00:11:26,350
that maybe you could just take that and

00:11:23,200 --> 00:11:28,839
have it returned like a wrapped

00:11:26,350 --> 00:11:30,579
exception or something one feature of

00:11:28,839 --> 00:11:33,760
Python three is that they've got these

00:11:30,579 --> 00:11:35,620
these like like these chained exception

00:11:33,760 --> 00:11:37,660
objects so you can you can basically

00:11:35,620 --> 00:11:41,440
package up exceptions in kind of a nice

00:11:37,660 --> 00:11:46,510
way maybe you do that well let's just

00:11:41,440 --> 00:11:47,620
try running that okay so it failed and

00:11:46,510 --> 00:11:51,399
you've got a tight there

00:11:47,620 --> 00:11:52,810
so one thing on this just hypothetical

00:11:51,399 --> 00:11:54,940
you don't sort of new thread things like

00:11:52,810 --> 00:11:57,940
you just sort of you know fixing the way

00:11:54,940 --> 00:11:59,260
that you launch thread the other thing

00:11:57,940 --> 00:12:01,329
that you would want to do okay so let's

00:11:59,260 --> 00:12:02,920
let's do another next next thing you

00:12:01,329 --> 00:12:05,440
want to do maybe we'll do example two

00:12:02,920 --> 00:12:08,470
here it's actually make sure that it's

00:12:05,440 --> 00:12:10,839
real thread like you actually have some

00:12:08,470 --> 00:12:14,860
kind of actual concurrency going on here

00:12:10,839 --> 00:12:17,829
so let's let's write a function that

00:12:14,860 --> 00:12:20,380
that that basically takes like a counter

00:12:17,829 --> 00:12:23,320
and some label and then maybe maybe does

00:12:20,380 --> 00:12:25,899
like some very intensive CPU calculation

00:12:23,320 --> 00:12:27,700
with it this is not the most interesting

00:12:25,899 --> 00:12:30,700
example perhaps but what we're gonna do

00:12:27,700 --> 00:12:35,529
is just create a running total will

00:12:30,700 --> 00:12:39,459
decrement and and then maybe every so

00:12:35,529 --> 00:12:42,040
often will print out something do people

00:12:39,459 --> 00:12:47,740
know you can you can do that underscore

00:12:42,040 --> 00:12:50,350
in numbers and Python now I'm kind of a

00:12:47,740 --> 00:12:52,149
nice kind of a nice thing so maybe you

00:12:50,350 --> 00:12:53,620
have a function like that one of the

00:12:52,149 --> 00:12:57,610
things that that we should have in this

00:12:53,620 --> 00:13:00,790
thread library is the ability to spine

00:12:57,610 --> 00:13:04,170
like two of these things you know let's

00:13:00,790 --> 00:13:04,170
count down from like sixty million

00:13:04,910 --> 00:13:09,660
we'll call this one thread one so the

00:13:07,709 --> 00:13:24,740
label is just so that we can see them

00:13:09,660 --> 00:13:24,740
the different things are on join

00:13:27,070 --> 00:13:31,300
okay so maybe you have code like that

00:13:34,330 --> 00:13:38,030
okay looks what's sort of like thread

00:13:36,680 --> 00:13:40,130
you know it's like a different interface

00:13:38,030 --> 00:13:42,530
so we're doing is spawning that function

00:13:40,130 --> 00:13:43,910
off you know twice and we're just mainly

00:13:42,530 --> 00:13:46,040
what we're going to do here

00:13:43,910 --> 00:13:49,010
it's just see if they run at the same

00:13:46,040 --> 00:13:50,690
time one of the things just a note if

00:13:49,010 --> 00:13:53,080
you if you were to do something like

00:13:50,690 --> 00:13:56,030
this in like an async framework

00:13:53,080 --> 00:13:57,560
launching a big CPU bound dot job like

00:13:56,030 --> 00:13:59,150
that would just grind the whole thing to

00:13:57,560 --> 00:14:01,730
a halt and then nothing would happen

00:13:59,150 --> 00:14:04,580
until it's done so we're trying to not

00:14:01,730 --> 00:14:08,990
we don't want that okay let's let's run

00:14:04,580 --> 00:14:12,530
that here okay so this thing is this

00:14:08,990 --> 00:14:13,820
thing is kind of churning along and you

00:14:12,530 --> 00:14:15,740
see both the threads making progress

00:14:13,820 --> 00:14:19,910
they're both kind of going at about the

00:14:15,740 --> 00:14:21,500
same time printing stuff out so one of

00:14:19,910 --> 00:14:24,110
the things that you have here is it

00:14:21,500 --> 00:14:26,570
basically is real threads it's not you

00:14:24,110 --> 00:14:28,160
know it's not green LEDs it's not a sink

00:14:26,570 --> 00:14:30,170
or anything like that so it actually is

00:14:28,160 --> 00:14:33,320
a you know you do get the kind of the

00:14:30,170 --> 00:14:35,690
normal concurrency there but the the

00:14:33,320 --> 00:14:37,130
next thing that you want though and this

00:14:35,690 --> 00:14:40,880
is this is where the death is gonna

00:14:37,130 --> 00:14:43,070
start I apologize for that it'd be

00:14:40,880 --> 00:14:46,130
really nice if you could actually have

00:14:43,070 --> 00:14:48,650
these things die in some some way I mean

00:14:46,130 --> 00:14:50,720
that that's the thought that most people

00:14:48,650 --> 00:14:53,660
have with threads is you know can't can

00:14:50,720 --> 00:14:55,880
you can you make them die in some way so

00:14:53,660 --> 00:14:58,040
let's say you had a function you know

00:14:55,880 --> 00:15:00,530
that just did something trivially dumb

00:14:58,040 --> 00:15:06,670
here like maybe sleep for like 10

00:15:00,530 --> 00:15:06,670
seconds like it's like that

00:15:10,730 --> 00:15:15,300
we're gonna we're gonna launch it and

00:15:13,170 --> 00:15:19,220
then we're gonna we're gonna sleep arse

00:15:15,300 --> 00:15:19,220
well let's just pluses wait for it here

00:15:21,320 --> 00:15:25,500
there's no result coming back so I'm

00:15:23,700 --> 00:15:30,120
just gonna wait from it so so what this

00:15:25,500 --> 00:15:33,779
is gonna do is just sleep for a moment

00:15:30,120 --> 00:15:37,080
and then Ron keep missing that mein at

00:15:33,779 --> 00:15:39,390
the end there your job is to catch me on

00:15:37,080 --> 00:15:41,130
all typos by the way so you know see see

00:15:39,390 --> 00:15:43,740
something yell it out saying yeah you're

00:15:41,130 --> 00:15:48,649
forgetting something so so this thing is

00:15:43,740 --> 00:15:51,060
is sleeping for 10 second it comes back

00:15:48,649 --> 00:15:53,000
the thing that would be really nice and

00:15:51,060 --> 00:15:58,649
this is the thing that threads cannot do

00:15:53,000 --> 00:16:00,540
is just have the ability to kill them

00:15:58,649 --> 00:16:02,370
brief immediately like can I do

00:16:00,540 --> 00:16:04,110
something like that so instead of

00:16:02,370 --> 00:16:08,310
waiting for it can I just cancel the

00:16:04,110 --> 00:16:09,470
thing let's try that and see what

00:16:08,310 --> 00:16:12,870
happened

00:16:09,470 --> 00:16:15,150
okay so yawn and that it just comes back

00:16:12,870 --> 00:16:18,120
you never see you never see a return at

00:16:15,150 --> 00:16:20,250
that point essentially what you what

00:16:18,120 --> 00:16:22,080
you've got here is like a cancellation

00:16:20,250 --> 00:16:23,760
mechanism built into threads where it's

00:16:22,080 --> 00:16:24,089
where it's just like yeah we're done

00:16:23,760 --> 00:16:26,610
with it

00:16:24,089 --> 00:16:29,700
cancel it the other thing that would be

00:16:26,610 --> 00:16:33,810
nice about that would be if you could

00:16:29,700 --> 00:16:35,339
catch it in the threat itself like maybe

00:16:33,810 --> 00:16:38,720
you could wrap this with it with like a

00:16:35,339 --> 00:16:38,720
try except for something

00:16:41,940 --> 00:16:50,320
and do something in response to it so

00:16:44,860 --> 00:16:53,529
let's let's try that okay so it comes

00:16:50,320 --> 00:16:55,570
back and it's like I cancelled it so so

00:16:53,529 --> 00:16:57,160
this is kind of a kind of a starting

00:16:55,570 --> 00:17:00,430
point we're gonna do more with this in a

00:16:57,160 --> 00:17:01,810
second but the idea is Rhian vision

00:17:00,430 --> 00:17:04,180
threads a little bit it's like it get

00:17:01,810 --> 00:17:07,059
get rid of the crazy creation process

00:17:04,180 --> 00:17:10,120
get rid of the the lack of ability

00:17:07,059 --> 00:17:12,839
return to resolve and then add these

00:17:10,120 --> 00:17:15,760
this cancellation stuff into it now

00:17:12,839 --> 00:17:17,589
keeping with the title of the talk I

00:17:15,760 --> 00:17:19,929
kind of want to run with this

00:17:17,589 --> 00:17:22,660
cancellation idea a little bit this is

00:17:19,929 --> 00:17:25,300
actually I think a really big point of

00:17:22,660 --> 00:17:27,790
some of these acing frameworks is that

00:17:25,300 --> 00:17:29,950
they actually give you a lot of control

00:17:27,790 --> 00:17:31,150
over what happens on the in your program

00:17:29,950 --> 00:17:32,770
I mean that's actually a feature of

00:17:31,150 --> 00:17:35,140
these frameworks is that you have sort

00:17:32,770 --> 00:17:36,760
of control over what's happening and a

00:17:35,140 --> 00:17:39,550
big part of that is actually being able

00:17:36,760 --> 00:17:41,740
to like cancel work or to schedule work

00:17:39,550 --> 00:17:43,090
and do other things this is something

00:17:41,740 --> 00:17:45,040
that has never traditionally been

00:17:43,090 --> 00:17:47,800
possible with thread programming least

00:17:45,040 --> 00:17:49,240
not easily so I kind of want it I kind

00:17:47,800 --> 00:17:52,660
of want to just roll some different

00:17:49,240 --> 00:17:55,780
examples on that one of the one one

00:17:52,660 --> 00:17:57,970
example that you might consider is how

00:17:55,780 --> 00:18:00,390
this might interact with something like

00:17:57,970 --> 00:18:00,390
a lock

00:18:04,450 --> 00:18:10,220
already we're in dangerous territory

00:18:06,920 --> 00:18:13,250
here actually as an as an aside if you

00:18:10,220 --> 00:18:14,450
ever read about thread cancellation one

00:18:13,250 --> 00:18:16,700
of the things that you'll commonly

00:18:14,450 --> 00:18:19,130
encounter is it's like comets like never

00:18:16,700 --> 00:18:21,290
do this and then usually there's like a

00:18:19,130 --> 00:18:23,960
big long line of like laundry list of

00:18:21,290 --> 00:18:24,590
why and locking is usually at the top of

00:18:23,960 --> 00:18:28,429
that list

00:18:24,590 --> 00:18:29,720
here here's an example of what I'm

00:18:28,429 --> 00:18:34,760
talking about here okay so I'm gonna

00:18:29,720 --> 00:18:38,480
write a function dad just sort of starts

00:18:34,760 --> 00:18:40,940
off the argument is gonna be a lack of

00:18:38,480 --> 00:18:47,170
some kind and what it's going to do is

00:18:40,940 --> 00:18:47,170
basically acquire the lock do some word

00:18:47,350 --> 00:18:51,550
maybe it will sleep for a little bit

00:18:51,610 --> 00:18:59,510
will sleep for five second and then come

00:18:57,200 --> 00:19:01,760
back like that and here is the issue

00:18:59,510 --> 00:19:04,280
with with locking okay so let's say your

00:19:01,760 --> 00:19:05,630
library had some lock object the reading

00:19:04,280 --> 00:19:07,760
library should actually have different

00:19:05,630 --> 00:19:09,950
kinds of locks maybe a lack you know

00:19:07,760 --> 00:19:11,660
maybe you want to semaphore or something

00:19:09,950 --> 00:19:13,970
you know it's classic kinds of like

00:19:11,660 --> 00:19:17,300
threading you know primitives like that

00:19:13,970 --> 00:19:19,160
and what can happen is you might spawn

00:19:17,300 --> 00:19:20,360
like two different jobs you like you

00:19:19,160 --> 00:19:24,130
could say well here's here's that

00:19:20,360 --> 00:19:24,130
function on lock you know thread one

00:19:25,360 --> 00:19:31,760
there's the same function on the same

00:19:27,530 --> 00:19:33,559
lakh thread two and let's let's wait for

00:19:31,760 --> 00:19:35,240
them here okay so we're gonna we're

00:19:33,559 --> 00:19:40,610
going to wait for the for the two

00:19:35,240 --> 00:19:45,200
threads here and let's just run that to

00:19:40,610 --> 00:19:46,700
make sure that that does what we want

00:19:45,200 --> 00:19:48,950
here okay so what you should see if it

00:19:46,700 --> 00:19:51,920
comes up thread one starting thread one

00:19:48,950 --> 00:19:53,960
working thread two basically had to

00:19:51,920 --> 00:19:55,340
block there because it had to lock it

00:19:53,960 --> 00:19:58,070
didn't well it didn't have the lock and

00:19:55,340 --> 00:19:59,570
had to had to wait so what's happening

00:19:58,070 --> 00:20:01,250
is like the two threads are basically

00:19:59,570 --> 00:20:04,700
prevented from working because of

00:20:01,250 --> 00:20:08,120
because of the lock now the interesting

00:20:04,700 --> 00:20:10,490
case with something like that is what

00:20:08,120 --> 00:20:13,809
happens if you decide to cancel one of

00:20:10,490 --> 00:20:15,750
those things like like like case one

00:20:13,809 --> 00:20:22,350
what if you cancel

00:20:15,750 --> 00:20:23,490
thread waiting for the lock like let's

00:20:22,350 --> 00:20:25,200
say you do it like a little bit of

00:20:23,490 --> 00:20:26,040
sleeping here like you sleep for like

00:20:25,200 --> 00:20:27,480
two seconds

00:20:26,040 --> 00:20:31,140
and then you just come out of the blue

00:20:27,480 --> 00:20:34,200
and you're like yeah thread two I'm

00:20:31,140 --> 00:20:36,030
gonna I'm just gonna cancel you and then

00:20:34,200 --> 00:20:37,500
I'll join with red thread one the

00:20:36,030 --> 00:20:38,730
question is like what happens there I

00:20:37,500 --> 00:20:40,770
mean essentially you have this thread

00:20:38,730 --> 00:20:42,960
kind of waiting for a lacked is it does

00:20:40,770 --> 00:20:45,570
it like cleanly step away from the lock

00:20:42,960 --> 00:20:49,020
when you do that or does some other kind

00:20:45,570 --> 00:20:50,550
of bad thing happen there what you would

00:20:49,020 --> 00:20:53,400
like is you would like it to sort of

00:20:50,550 --> 00:20:55,230
cleanly step away so what would happen

00:20:53,400 --> 00:20:58,380
here is you know the threads would start

00:20:55,230 --> 00:21:00,210
you get thread one working thread two

00:20:58,380 --> 00:21:02,450
done and then you just never see

00:21:00,210 --> 00:21:04,740
anything more from thread two it's like

00:21:02,450 --> 00:21:09,900
basically it got cancelled it's like

00:21:04,740 --> 00:21:11,850
yeah the the more evil case though and

00:21:09,900 --> 00:21:13,740
this is this is why a lot of people

00:21:11,850 --> 00:21:17,610
would tell you to never do thread

00:21:13,740 --> 00:21:20,220
cancellation is essentially the opposite

00:21:17,610 --> 00:21:25,650
what happens if you cancel a thread that

00:21:20,220 --> 00:21:28,200
holds a lot it's like what's that you

00:21:25,650 --> 00:21:30,810
flip it around and you just decide to

00:21:28,200 --> 00:21:34,830
cancel thread one and then join with

00:21:30,810 --> 00:21:36,960
thread 2 the reason this is evil it's

00:21:34,830 --> 00:21:38,310
like you have this lack you go into the

00:21:36,960 --> 00:21:40,950
code and then all of a sudden it gets

00:21:38,310 --> 00:21:44,310
like a cancellation it's like what

00:21:40,950 --> 00:21:46,230
happens to that log I mean if you don't

00:21:44,310 --> 00:21:48,360
give up the lock I mean essentially your

00:21:46,230 --> 00:21:50,220
whole program is just gonna die out like

00:21:48,360 --> 00:21:51,750
a horrible death actually is not even

00:21:50,220 --> 00:21:53,820
that dies it's gonna sit there and then

00:21:51,750 --> 00:21:56,610
you're gonna do like a kill -9 on it at

00:21:53,820 --> 00:21:59,040
some point so so that's that's kind of

00:21:56,610 --> 00:22:03,390
the more the more evil case is that so

00:21:59,040 --> 00:22:05,610
let's try that what happens here is it

00:22:03,390 --> 00:22:07,980
kind of went into thread one working and

00:22:05,610 --> 00:22:09,540
then it just sort of never came back the

00:22:07,980 --> 00:22:10,410
reason it never came back is it got is

00:22:09,540 --> 00:22:13,410
that it got killed

00:22:10,410 --> 00:22:17,120
basically you never see like a thread

00:22:13,410 --> 00:22:20,520
one done thing so so something like that

00:22:17,120 --> 00:22:23,880
works works as well so in kind of this

00:22:20,520 --> 00:22:26,700
new thread library you've got the

00:22:23,880 --> 00:22:28,679
ability to like cancel wax just as it's

00:22:26,700 --> 00:22:29,400
one comment on this I think one thing

00:22:28,679 --> 00:22:32,640
that prob

00:22:29,400 --> 00:22:35,070
we makes this same is Pythons with

00:22:32,640 --> 00:22:37,200
statement that is actually a really

00:22:35,070 --> 00:22:38,550
amazing feature of Python it's the width

00:22:37,200 --> 00:22:41,600
the fact that you can like use a

00:22:38,550 --> 00:22:44,070
resource and have it properly cleaned up

00:22:41,600 --> 00:22:45,420
when you're when you're done with it

00:22:44,070 --> 00:22:46,860
that is what's making this kind of

00:22:45,420 --> 00:22:49,620
saying it's like if you get if you get

00:22:46,860 --> 00:22:51,690
some kind of cancellation showing up it

00:22:49,620 --> 00:22:54,120
does show up it's kind of an exception

00:22:51,690 --> 00:22:55,350
in that code but you can back out of it

00:22:54,120 --> 00:23:00,480
you can clean it up and you can release

00:22:55,350 --> 00:23:03,900
a lot all right so with me and on that

00:23:00,480 --> 00:23:07,290
to undoing thread cancellation stuff you

00:23:03,900 --> 00:23:11,370
could take this further by the way we'll

00:23:07,290 --> 00:23:13,350
see yeah we're we're doing that time you

00:23:11,370 --> 00:23:16,710
could look at more complicated kinds of

00:23:13,350 --> 00:23:19,230
problems like one famous problem from

00:23:16,710 --> 00:23:20,190
from kind of operating systems would be

00:23:19,230 --> 00:23:23,250
things like the dining philosophers

00:23:20,190 --> 00:23:24,450
problem I don't know you've seen that or

00:23:23,250 --> 00:23:26,190
not but basically the problems you have

00:23:24,450 --> 00:23:28,320
like five philosophers sitting around at

00:23:26,190 --> 00:23:30,510
a table and then on the table you've got

00:23:28,320 --> 00:23:33,150
five chopsticks so maybe that you have

00:23:30,510 --> 00:23:35,400
these these chopsticks on the table

00:23:33,150 --> 00:23:37,230
which are represented as locks okay so

00:23:35,400 --> 00:23:39,570
you have you have five chopsticks and

00:23:37,230 --> 00:23:42,900
then you have some philosopher process

00:23:39,570 --> 00:23:45,390
process that essentially just wants to

00:23:42,900 --> 00:23:48,240
eat and the way that it eats is maybe it

00:23:45,390 --> 00:23:50,790
sleeps for a certain amount of time so

00:23:48,240 --> 00:23:54,900
we're gonna do like a like a random

00:23:50,790 --> 00:23:57,120
sleep here and then in order to eat what

00:23:54,900 --> 00:24:00,240
it will do is acquire a lock so it will

00:23:57,120 --> 00:24:04,910
do like one of the sticks it'll acquire

00:24:00,240 --> 00:24:06,750
that maybe it sleeps a little bit more

00:24:04,910 --> 00:24:08,280
philosophers spend a lot of their time

00:24:06,750 --> 00:24:10,080
thinking right so if you grab one

00:24:08,280 --> 00:24:11,730
chopstick you know you might think a

00:24:10,080 --> 00:24:13,980
while before grabbing the second one

00:24:11,730 --> 00:24:17,310
there so so the idea is you have these

00:24:13,980 --> 00:24:20,970
these like two two chopsticks that you

00:24:17,310 --> 00:24:24,530
need to acquire yeah I see that the tree

00:24:20,970 --> 00:24:29,970
toe or tread oh okay okay

00:24:24,530 --> 00:24:35,420
maybe it's sleep some more am I missing

00:24:29,970 --> 00:24:35,420
a of sticks yeah

00:24:36,279 --> 00:24:41,240
see this is this is why I don't need a

00:24:38,179 --> 00:24:47,149
fancy IDE so I just use the crowd yeah

00:24:41,240 --> 00:24:50,120
okay yeah okay so eating okay yeah it's

00:24:47,149 --> 00:24:51,169
like eating and here okay so so you have

00:24:50,120 --> 00:24:54,830
something you have something like this

00:24:51,169 --> 00:24:58,340
okay so maybe maybe it sleeps for a

00:24:54,830 --> 00:25:00,110
random amount as well and and and so

00:24:58,340 --> 00:25:03,230
maybe that's your your program you have

00:25:00,110 --> 00:25:04,879
kind of the Philosopher's thing like

00:25:03,230 --> 00:25:15,649
that and then what you're gonna do is

00:25:04,879 --> 00:25:17,809
maybe launch these into into threads and

00:25:15,649 --> 00:25:25,610
then we'll maybe wake up wait up wait

00:25:17,809 --> 00:25:27,710
for them okay so okay we'll see if this

00:25:25,610 --> 00:25:30,980
works they have famous famous last words

00:25:27,710 --> 00:25:36,799
of this am I am I missing something I

00:25:30,980 --> 00:25:42,200
don't see anything oh okay yeah that one

00:25:36,799 --> 00:25:43,460
okay I like this this wait just means

00:25:42,200 --> 00:25:44,809
that they don't really like if you're

00:25:43,460 --> 00:25:46,850
not if you don't care about the result

00:25:44,809 --> 00:25:52,340
you can just wait for them join will

00:25:46,850 --> 00:25:54,320
return a result if you want it but maybe

00:25:52,340 --> 00:25:56,419
maybe you want the old behavior you know

00:25:54,320 --> 00:25:59,059
so let's just see what happens there so

00:25:56,419 --> 00:26:01,429
so that code the first time I run it it

00:25:59,059 --> 00:26:03,169
seems to work that the big reason why

00:26:01,429 --> 00:26:05,690
people care about the the dining

00:26:03,169 --> 00:26:09,799
philosophers though is that often times

00:26:05,690 --> 00:26:12,049
it does not work we'll see if it fails

00:26:09,799 --> 00:26:14,539
okay so right now it's basically not

00:26:12,049 --> 00:26:16,850
doing ever anything at all that the the

00:26:14,539 --> 00:26:18,289
problem here is that basically that just

00:26:16,850 --> 00:26:19,820
that the prime is in order to eat you

00:26:18,289 --> 00:26:22,429
need two chopsticks but there's only

00:26:19,820 --> 00:26:23,990
five and what has happened is like every

00:26:22,429 --> 00:26:26,750
philosopher has reached out to one

00:26:23,990 --> 00:26:29,149
chopstick and then nobody can make any

00:26:26,750 --> 00:26:30,590
progress right it's like okay so the

00:26:29,149 --> 00:26:33,139
whole thing is dead like that's what the

00:26:30,590 --> 00:26:34,789
Philosopher's all starve and die and now

00:26:33,139 --> 00:26:37,669
we're into like that the dying

00:26:34,789 --> 00:26:41,029
philosopher talked and it's like I know

00:26:37,669 --> 00:26:42,860
that's bad there so so so you spend a

00:26:41,029 --> 00:26:44,419
lot of time like operating systems you

00:26:42,860 --> 00:26:46,399
know if thinking's like okay how do we

00:26:44,419 --> 00:26:47,870
avoid this how do we make that Salah

00:26:46,399 --> 00:26:51,440
suffers you know play nice with

00:26:47,870 --> 00:26:52,910
each other and and and so forth we're

00:26:51,440 --> 00:26:55,430
not gonna do that because you know the

00:26:52,910 --> 00:26:57,800
age of diplomacy is over so you know

00:26:55,430 --> 00:27:02,360
kind of kind of think so so instead what

00:26:57,800 --> 00:27:04,309
we might do here is we could maybe we

00:27:02,360 --> 00:27:06,020
could just drop like a timeout on this

00:27:04,309 --> 00:27:08,930
thing like we could say like you know

00:27:06,020 --> 00:27:13,160
with with you know thread Oh timeout

00:27:08,930 --> 00:27:14,360
after I don't know after 10 seconds or

00:27:13,160 --> 00:27:17,540
something so we're gonna we're gonna try

00:27:14,360 --> 00:27:21,640
to do this this like waiting thing and

00:27:17,540 --> 00:27:26,120
then instead of trying to avoid deadlock

00:27:21,640 --> 00:27:28,010
we're just gonna do like add a deadlock

00:27:26,120 --> 00:27:30,400
recovery thing this is this is by no

00:27:28,010 --> 00:27:33,650
means graceful but what we'll do is

00:27:30,400 --> 00:27:36,679
we'll pick out like a random philosopher

00:27:33,650 --> 00:27:38,450
and we'll just cancel it that the

00:27:36,679 --> 00:27:40,880
thinking here is that you if you if you

00:27:38,450 --> 00:27:42,500
just if one of the philosophers dies it

00:27:40,880 --> 00:27:44,450
will drop its chopstick and then the

00:27:42,500 --> 00:27:49,940
rest of them can make progress bases

00:27:44,450 --> 00:27:56,929
yourselves so yeah I got a got to fix

00:27:49,940 --> 00:27:58,910
that so so we'll do that let's try let's

00:27:56,929 --> 00:28:01,010
try running that actually you know if

00:27:58,910 --> 00:28:01,850
the Philosopher's do have the option of

00:28:01,010 --> 00:28:04,280
dying

00:28:01,850 --> 00:28:06,170
we've probably should give them like

00:28:04,280 --> 00:28:08,980
some option to ponder it briefly

00:28:06,170 --> 00:28:08,980
actually

00:28:19,539 --> 00:28:29,679
I put it put an F string in there just

00:28:26,169 --> 00:28:32,499
for extra effect there okay so so let's

00:28:29,679 --> 00:28:34,509
let's try okay so okay so it looks like

00:28:32,499 --> 00:28:38,019
it's like maybe a needy immediately dead

00:28:34,509 --> 00:28:43,200
already here deadlock what was my time

00:28:38,019 --> 00:28:45,309
out ten seconds random innit oh okay

00:28:43,200 --> 00:28:46,989
well you got you got you got that you

00:28:45,309 --> 00:28:50,909
did see the time out there so let's

00:28:46,989 --> 00:28:50,909
let's let's try it again

00:28:51,389 --> 00:28:56,590
yeah deadlocked deadlocked again so the

00:28:54,700 --> 00:28:58,899
thing is kind of it's it's it's wedged

00:28:56,590 --> 00:29:01,330
but if it's working right it should just

00:28:58,899 --> 00:29:04,229
pick a random philosopher and then the

00:29:01,330 --> 00:29:07,479
rest of them the rest of them wake up

00:29:04,229 --> 00:29:09,279
but what is dead okay so that is that's

00:29:07,479 --> 00:29:10,720
actually kind of cool it's like huh you

00:29:09,279 --> 00:29:12,879
have like thread holding you know

00:29:10,720 --> 00:29:15,279
holding lacks and just blow it away and

00:29:12,879 --> 00:29:18,700
like everything everything everything

00:29:15,279 --> 00:29:21,099
worker horse diplomacy is not restored

00:29:18,700 --> 00:29:23,979
there but then okay so that's like

00:29:21,099 --> 00:29:25,599
another another example some other

00:29:23,979 --> 00:29:28,179
things that you that you might want with

00:29:25,599 --> 00:29:31,059
this this thread library I'm I don't

00:29:28,179 --> 00:29:34,059
know what example we're up to here would

00:29:31,059 --> 00:29:35,710
be things like hewing kinds of stuff one

00:29:34,059 --> 00:29:38,710
common thing that I that I often have to

00:29:35,710 --> 00:29:40,960
do in in in thread code as I often do

00:29:38,710 --> 00:29:42,940
like producer-consumer types of problems

00:29:40,960 --> 00:29:46,440
like you know training worker tasks and

00:29:42,940 --> 00:29:46,440
so forth like maybe you have a queue

00:29:48,299 --> 00:29:53,919
will do something like this like item is

00:29:50,889 --> 00:29:56,169
equal to Q get by the way this this

00:29:53,919 --> 00:29:59,409
would be one place to use this new like

00:29:56,169 --> 00:30:01,809
pet 572 stuff now it's not to open up

00:29:59,409 --> 00:30:04,269
that battle in this talk but you could

00:30:01,809 --> 00:30:06,669
you can do while items you know equals Q

00:30:04,269 --> 00:30:09,940
yet or something like let's stay let's

00:30:06,669 --> 00:30:11,739
stay away from that okay so but you you

00:30:09,940 --> 00:30:14,470
okay so you could do you know while true

00:30:11,739 --> 00:30:18,419
get the item maybe I'm gonna catch like

00:30:14,470 --> 00:30:18,419
this this except exception here

00:30:25,530 --> 00:30:31,080
okay so I I kind of do this stuff with

00:30:29,100 --> 00:30:34,170
with workers a lot so here here's here's

00:30:31,080 --> 00:30:35,580
what's gonna happen here maybe you want

00:30:34,170 --> 00:30:37,860
to create like a like some kind of

00:30:35,580 --> 00:30:41,130
worker pool okay so you're gonna you're

00:30:37,860 --> 00:30:43,050
gonna create like a like a queue of some

00:30:41,130 --> 00:30:44,430
kind and then what I want to do is I'm

00:30:43,050 --> 00:30:46,740
gonna launch a whole bunch of workers

00:30:44,430 --> 00:30:49,640
but I want them to be under like some

00:30:46,740 --> 00:30:51,690
kind of central control of of some sort

00:30:49,640 --> 00:30:53,370
one of the things that's really cool

00:30:51,690 --> 00:30:55,980
that's going on in kind of the async

00:30:53,370 --> 00:30:57,780
world right now is a whole bunch of

00:30:55,980 --> 00:30:59,910
stuff with like threat like task groups

00:30:57,780 --> 00:31:01,200
and cancellation sorts of stuff this is

00:30:59,910 --> 00:31:03,090
this is something that that Nathaniel

00:31:01,200 --> 00:31:06,060
Smith is working on a lot like a trio

00:31:03,090 --> 00:31:08,490
project if you've encountered that so it

00:31:06,060 --> 00:31:11,130
would be really cool to have something

00:31:08,490 --> 00:31:13,200
like that in our in our thread library

00:31:11,130 --> 00:31:16,920
like maybe we could make like a thread

00:31:13,200 --> 00:31:18,930
group of some kind where you create a

00:31:16,920 --> 00:31:21,030
group of threads and then you could you

00:31:18,930 --> 00:31:22,620
could basically launch like you say okay

00:31:21,030 --> 00:31:32,310
I'm gonna make like four workers

00:31:22,620 --> 00:31:34,590
I don't know I'm gonna give them a label

00:31:32,310 --> 00:31:35,430
here just so so you can see that so so

00:31:34,590 --> 00:31:37,020
what's gonna happen is you're

00:31:35,430 --> 00:31:38,640
essentially gonna latch like a bunch of

00:31:37,020 --> 00:31:41,190
workers under the control of like a

00:31:38,640 --> 00:31:43,590
thread group or something and then I'll

00:31:41,190 --> 00:31:48,000
feed I'll feed them some work like maybe

00:31:43,590 --> 00:31:49,680
I'll just drop stuff onto the queue I'm

00:31:48,000 --> 00:31:51,330
gonna slow it down a little bit just you

00:31:49,680 --> 00:31:53,660
can see it work so well

00:31:51,330 --> 00:31:56,160
well we'll feed it onto the queue there

00:31:53,660 --> 00:31:58,280
one thing with queues by the way is they

00:31:56,160 --> 00:32:01,020
do have a signaling mechanism in there

00:31:58,280 --> 00:32:02,730
this is this is basically from Python

00:32:01,020 --> 00:32:06,270
standard libraries they can do a task

00:32:02,730 --> 00:32:09,270
done so come down here and then I'll

00:32:06,270 --> 00:32:10,200
I'll join with the queue and then one of

00:32:09,270 --> 00:32:11,970
the problems you have with these work

00:32:10,200 --> 00:32:13,770
queues is how do you get all the workers

00:32:11,970 --> 00:32:15,480
to shut down I don't know they're

00:32:13,770 --> 00:32:17,190
anybody's encountered this problem those

00:32:15,480 --> 00:32:19,920
like you launched something but then you

00:32:17,190 --> 00:32:21,210
have to have it shut down a common way

00:32:19,920 --> 00:32:23,400
to do that is maybe you put like a

00:32:21,210 --> 00:32:24,930
special value on the queue like a nun or

00:32:23,400 --> 00:32:25,440
some kind of Sentinel or something like

00:32:24,930 --> 00:32:29,010
that

00:32:25,440 --> 00:32:30,750
we don't want to do that we just want to

00:32:29,010 --> 00:32:32,520
we just want to nuke everything it's

00:32:30,750 --> 00:32:37,590
like cancel remaining and then like

00:32:32,520 --> 00:32:39,090
we're done essentially so so we would

00:32:37,590 --> 00:32:41,820
really like to do something like that

00:32:39,090 --> 00:32:43,620
so it's like spawn workers you know give

00:32:41,820 --> 00:32:45,180
him some work join with it and then and

00:32:43,620 --> 00:32:47,970
then we're done just you know just clean

00:32:45,180 --> 00:32:55,200
the whole thing up so let's see if that

00:32:47,970 --> 00:32:56,880
word oh well gee is the group but Q is

00:32:55,200 --> 00:32:59,580
the cute terms like Q's actually have a

00:32:56,880 --> 00:33:01,590
join mechanism on there there's like

00:32:59,580 --> 00:33:03,060
tasks done which sort of tells you that

00:33:01,590 --> 00:33:04,710
you did something with it and then you

00:33:03,060 --> 00:33:06,510
can use a you can do use join to

00:33:04,710 --> 00:33:09,810
basically wait for the queue to process

00:33:06,510 --> 00:33:11,700
all the things so that's a great

00:33:09,810 --> 00:33:12,750
question and it's very subtle it's like

00:33:11,700 --> 00:33:14,460
it's a place where I could have made a

00:33:12,750 --> 00:33:16,290
mistake actually but now we're waiting

00:33:14,460 --> 00:33:20,550
waiting for the queue to kind of kind of

00:33:16,290 --> 00:33:23,100
in a jobs but that's just kind of cool

00:33:20,550 --> 00:33:25,380
it's like just cancelled cancelled all

00:33:23,100 --> 00:33:29,190
the things turns out you could probably

00:33:25,380 --> 00:33:31,050
clean that up even further one of the

00:33:29,190 --> 00:33:32,760
things that that it's sometimes done

00:33:31,050 --> 00:33:33,750
with these like thread groups or task

00:33:32,760 --> 00:33:36,440
groups is you can give different

00:33:33,750 --> 00:33:38,820
policies for how to how to process it

00:33:36,440 --> 00:33:41,160
what I'm doing here is I'm saying well

00:33:38,820 --> 00:33:42,930
make a thread group wait equals none

00:33:41,160 --> 00:33:46,680
that that's sort of the we wait for

00:33:42,930 --> 00:33:48,960
nobody policy and what happens is if the

00:33:46,680 --> 00:33:51,180
code ever leaves this with statement it

00:33:48,960 --> 00:33:54,000
will just blow away any thread that was

00:33:51,180 --> 00:33:55,650
still active at that time so so you can

00:33:54,000 --> 00:33:57,950
do some some some modifications like

00:33:55,650 --> 00:33:57,950
that

00:34:05,510 --> 00:34:13,620
um oh we like the ordering of that I I

00:34:10,350 --> 00:34:18,990
don't know I don't know you want it to

00:34:13,620 --> 00:34:20,580
be predictable it if there is some some

00:34:18,990 --> 00:34:22,470
element of fairness in that but that

00:34:20,580 --> 00:34:24,450
might be an accident so I'm not I'm not

00:34:22,470 --> 00:34:27,120
willing to bet bet on that

00:34:24,450 --> 00:34:30,900
what one thing I also do want to talk

00:34:27,120 --> 00:34:44,630
about I want to go back to this spinning

00:34:30,900 --> 00:34:44,630
thing for a second here okay

00:34:44,710 --> 00:34:50,829
I had this example with cpu-bound tasks

00:34:47,710 --> 00:34:52,480
that one at one point I want to

00:34:50,829 --> 00:34:55,210
emphasize that everything that's going

00:34:52,480 --> 00:34:57,250
on here is thread code I mean it's it's

00:34:55,210 --> 00:34:59,859
like if I if I were to come in here and

00:34:57,250 --> 00:35:01,809
just say like thread Oh spine spin it's

00:34:59,859 --> 00:35:05,319
that this at the start of this thing and

00:35:01,809 --> 00:35:06,760
then run it you will see it oh I have to

00:35:05,319 --> 00:35:10,660
give it some arguments here like like

00:35:06,760 --> 00:35:12,760
spin from like 60 million like that and

00:35:10,660 --> 00:35:15,279
and and run it you will see that running

00:35:12,760 --> 00:35:16,630
concurrently with the other code so it's

00:35:15,279 --> 00:35:18,670
like it's getting workers and then you

00:35:16,630 --> 00:35:22,079
see the spin stuff happening at the same

00:35:18,670 --> 00:35:24,670
time the presence of that cpu-bound whew

00:35:22,079 --> 00:35:27,039
it's not shutting down the rest of it

00:35:24,670 --> 00:35:29,650
like so this is not this is not a sink

00:35:27,039 --> 00:35:33,160
that's that's going on here I also want

00:35:29,650 --> 00:35:39,029
to want to point out that this that the

00:35:33,160 --> 00:35:41,200
cancellation on this is also not totally

00:35:39,029 --> 00:35:45,970
unconstrained it turns out that if you

00:35:41,200 --> 00:35:49,329
were to put that spin thing like like on

00:35:45,970 --> 00:35:51,069
a like on a thread group like that like

00:35:49,329 --> 00:35:52,510
let's do like maybe a hundred million or

00:35:51,069 --> 00:35:56,440
something like that

00:35:52,510 --> 00:35:59,279
the code will that will work but you

00:35:56,440 --> 00:36:04,210
can't actually cancel anything that is

00:35:59,279 --> 00:36:06,910
spinning on the CPU that is actually a

00:36:04,210 --> 00:36:08,410
probably a very good thing in a thread

00:36:06,910 --> 00:36:10,000
library it turns out if you allow

00:36:08,410 --> 00:36:13,089
something to be canceled I just on some

00:36:10,000 --> 00:36:14,910
random instruction that's really bad so

00:36:13,089 --> 00:36:17,140
in this in this framework the

00:36:14,910 --> 00:36:20,770
cancellation actually can only take

00:36:17,140 --> 00:36:24,430
place on things that block so so things

00:36:20,770 --> 00:36:27,339
like get operations blocking on sockets

00:36:24,430 --> 00:36:29,410
that that sort of thing okay so so

00:36:27,339 --> 00:36:32,470
that's that's kind of a kind of another

00:36:29,410 --> 00:36:33,789
another interesting thing now a final

00:36:32,470 --> 00:36:35,410
thing I'm getting I'm getting kind of

00:36:33,789 --> 00:36:39,240
five-minute timer here we're almost

00:36:35,410 --> 00:36:43,359
almost done you would definitely want

00:36:39,240 --> 00:36:45,510
this thread library to be able to work

00:36:43,359 --> 00:36:48,190
with things like sockets and other

00:36:45,510 --> 00:36:50,470
things for like network programming so

00:36:48,190 --> 00:36:55,779
the final thing that I'm gonna that I'm

00:36:50,470 --> 00:36:56,650
going to do here is do a dye request

00:36:55,779 --> 00:36:58,720
exam now this

00:36:56,650 --> 00:37:01,660
is not that I okay this is not did I

00:36:58,720 --> 00:37:04,960
love requests what I'm talking about

00:37:01,660 --> 00:37:07,000
here is it would be really cool if you

00:37:04,960 --> 00:37:09,849
could take like this this library you

00:37:07,000 --> 00:37:12,250
know like the threat OH thing and then

00:37:09,849 --> 00:37:14,289
let's say throat Oh head like I don't

00:37:12,250 --> 00:37:16,539
know some kind of magic thing that you

00:37:14,289 --> 00:37:18,099
could do we're not gonna get into the

00:37:16,539 --> 00:37:20,589
details of that but like let's say you

00:37:18,099 --> 00:37:25,630
could yeah you don't want to know that

00:37:20,589 --> 00:37:29,470
important request and then maybe maybe

00:37:25,630 --> 00:37:34,529
you could have some function where you

00:37:29,470 --> 00:37:34,529
fire off like like a request somewhere

00:37:41,790 --> 00:37:53,060
but you you have the ability to cancel

00:37:44,580 --> 00:37:55,500
it okay so maybe you do something like

00:37:53,060 --> 00:37:57,030
do something something like this like

00:37:55,500 --> 00:38:00,030
this you would say okay let's let's make

00:37:57,030 --> 00:38:03,360
like a thread group we're gonna wait for

00:38:00,030 --> 00:38:05,220
anything to finish and then we're just

00:38:03,360 --> 00:38:06,570
gonna fire off a whole bunch of stuff

00:38:05,220 --> 00:38:08,520
here like inflate inflate so this go

00:38:06,570 --> 00:38:10,200
spine like the function off so we're

00:38:08,520 --> 00:38:12,360
gonna we're gonna we're gonna spine like

00:38:10,200 --> 00:38:14,610
four copies of this request thing off

00:38:12,360 --> 00:38:20,240
and then maybe we'll just print out the

00:38:14,610 --> 00:38:22,020
result of the one that completed yes

00:38:20,240 --> 00:38:27,540
we'll talk later

00:38:22,020 --> 00:38:28,500
yes that you know yeah Beth yeah it's

00:38:27,540 --> 00:38:32,700
the only way to get the cool

00:38:28,500 --> 00:38:35,040
highlighting on it actually not are you

00:38:32,700 --> 00:38:37,410
are you horrified my improv probably

00:38:35,040 --> 00:38:39,570
yeah okay so so so that so the idea here

00:38:37,410 --> 00:38:40,980
I hope that this server is rotting so

00:38:39,570 --> 00:38:43,320
we're gonna fire off requests to a

00:38:40,980 --> 00:38:48,720
server four of them kind of in parallel

00:38:43,320 --> 00:38:50,880
and then the idea is I want to I want to

00:38:48,720 --> 00:38:53,430
print the result of whichever the first

00:38:50,880 --> 00:38:56,370
one that finished is like slight

00:38:53,430 --> 00:39:06,000
indentation problem there so let's try

00:38:56,370 --> 00:39:07,650
that one okay yeah connection error I

00:39:06,000 --> 00:39:09,510
might have like it means I might not

00:39:07,650 --> 00:39:17,180
have a server running on that so let me

00:39:09,510 --> 00:39:19,440
check it real quick here okay let's run

00:39:17,180 --> 00:39:23,850
okay so this thing is it's kind of just

00:39:19,440 --> 00:39:28,950
sitting there it slowed down on purpose

00:39:23,850 --> 00:39:34,530
so waiting no getting another error

00:39:28,950 --> 00:39:37,770
there oh wow did get a cancel there okay

00:39:34,530 --> 00:39:39,570
so so the idea on that is it basically

00:39:37,770 --> 00:39:41,790
did get a response it's something

00:39:39,570 --> 00:39:47,310
happened but then it canceled thee it

00:39:41,790 --> 00:39:50,630
canceled the other ones one more time

00:39:47,310 --> 00:39:59,029
here famous famous last

00:39:50,630 --> 00:40:01,180
last words here I can always use my

00:39:59,029 --> 00:40:07,849
excuse that it worked this morning right

00:40:01,180 --> 00:40:10,150
oh okay there that's not Network nothing

00:40:07,849 --> 00:40:12,380
ever works on there right work so so

00:40:10,150 --> 00:40:14,420
what happened there's basically fired

00:40:12,380 --> 00:40:17,990
off like a bunch of things to request

00:40:14,420 --> 00:40:19,339
four of them and like three of them were

00:40:17,990 --> 00:40:20,960
cancelled because the result came back

00:40:19,339 --> 00:40:22,789
and the last one came back with result

00:40:20,960 --> 00:40:24,500
die threads and that was the response

00:40:22,789 --> 00:40:27,140
from the other the other machine there

00:40:24,500 --> 00:40:28,609
so this is the kind of stuff I'm

00:40:27,140 --> 00:40:31,789
thinking about in this kind of

00:40:28,609 --> 00:40:33,109
reinvasion of rain work you know it's

00:40:31,789 --> 00:40:35,539
like okay we're gonna three envision

00:40:33,109 --> 00:40:36,859
threads most of it is about just killing

00:40:35,539 --> 00:40:38,269
threads because that's like the best

00:40:36,859 --> 00:40:41,390
thing to do with threads is to see them

00:40:38,269 --> 00:40:42,740
die and so forth but but it I think it's

00:40:41,390 --> 00:40:44,480
like more than that it's actually just

00:40:42,740 --> 00:40:46,549
having a lot of control over what the

00:40:44,480 --> 00:40:48,380
thread in flight what can you do with

00:40:46,549 --> 00:40:50,000
threads can you do like MAME way more of

00:40:48,380 --> 00:40:51,680
a threads can you put them in groups can

00:40:50,000 --> 00:40:54,440
you kill them can you get results back

00:40:51,680 --> 00:40:58,880
and you just totally re-envision that

00:40:54,440 --> 00:41:01,009
that thread programming interface and

00:40:58,880 --> 00:41:02,480
what would it be like to do that I don't

00:41:01,009 --> 00:41:04,309
know what you thought of that demo but I

00:41:02,480 --> 00:41:06,289
think it's kind of I think it's kind of

00:41:04,309 --> 00:41:08,750
cool it's like huh that's kind of

00:41:06,289 --> 00:41:11,440
interesting and it kind of brings me

00:41:08,750 --> 00:41:15,400
back to the opening slide

00:41:11,440 --> 00:41:20,960
so when threads sleep do they dream

00:41:15,400 --> 00:41:22,819
here's the gist of this talk do they

00:41:20,960 --> 00:41:25,309
dream of the kernel and by the kernel I

00:41:22,819 --> 00:41:26,779
mean the operating system like I said

00:41:25,309 --> 00:41:28,309
are threads when they're asleep are they

00:41:26,779 --> 00:41:30,710
sitting there dreaming of like icy

00:41:28,309 --> 00:41:33,019
plains of penguins like slapping around

00:41:30,710 --> 00:41:35,029
and like you know Linux and all that

00:41:33,019 --> 00:41:39,589
kind of stuff like the dream another

00:41:35,029 --> 00:41:44,240
kernel or are they dreaming of an async

00:41:39,589 --> 00:41:47,329
event loop what you saw in the demo is

00:41:44,240 --> 00:41:49,490
that it's a reemployment ation of

00:41:47,329 --> 00:41:51,970
threads on top of async

00:41:49,490 --> 00:41:54,559
it's a very interesting kind of concept

00:41:51,970 --> 00:41:56,210
but I have to give you like the French

00:41:54,559 --> 00:41:58,279
ending to this talk where I just leave

00:41:56,210 --> 00:42:00,650
you hanging like how the world does that

00:41:58,279 --> 00:42:02,140
work so we're pretty much we're pretty

00:42:00,650 --> 00:42:04,700
much out of time

00:42:02,140 --> 00:42:06,290
okay I guess the thought on the talk was

00:42:04,700 --> 00:42:09,950
maybe just kind of throw kind of an

00:42:06,290 --> 00:42:11,119
interesting wild concept out there and

00:42:09,950 --> 00:42:12,980
you want to find out more about it

00:42:11,119 --> 00:42:15,500
you're going to track me down and answer

00:42:12,980 --> 00:42:16,760
ask questions and so forth so that's

00:42:15,500 --> 00:42:19,700
that's pretty much the end of the talk

00:42:16,760 --> 00:42:22,730
we may have time for questions or not do

00:42:19,700 --> 00:42:24,619
we have time for questions there might

00:42:22,730 --> 00:42:26,480
be questions I don't know a few

00:42:24,619 --> 00:42:31,510
questions but let's see if there are

00:42:26,480 --> 00:42:31,510
questions here thank you very much

00:42:33,180 --> 00:42:36,320
[Music]

00:42:38,550 --> 00:42:43,990
thank you very much David was a great

00:42:41,560 --> 00:42:45,850
keynote so if you have any questions

00:42:43,990 --> 00:42:48,430
please we have two microphones in the

00:42:45,850 --> 00:42:51,250
front okay have to walk here we don't

00:42:48,430 --> 00:42:53,140
bring the microphones as usual so if you

00:42:51,250 --> 00:42:56,230
have a question queue up and we maybe

00:42:53,140 --> 00:42:58,000
have time for three to four questions

00:42:56,230 --> 00:43:00,670
and please keep them short

00:42:58,000 --> 00:43:02,290
well first people fighting to their way

00:43:00,670 --> 00:43:05,500
to the microphones please always

00:43:02,290 --> 00:43:13,450
remember questions are about asking

00:43:05,500 --> 00:43:17,260
something and not about yourself okay so

00:43:13,450 --> 00:43:19,240
that works so you shown those threats

00:43:17,260 --> 00:43:23,830
that do cpu-bound

00:43:19,240 --> 00:43:27,340
stuff and they work concurrently yes and

00:43:23,830 --> 00:43:29,800
it runs on a event loop but it's is it's

00:43:27,340 --> 00:43:32,560
like does it actually use a couple of

00:43:29,800 --> 00:43:35,260
courses like multi-processing or not or

00:43:32,560 --> 00:43:36,790
it did sort of multiple threads running

00:43:35,260 --> 00:43:40,330
and that you saw running concurrently

00:43:36,790 --> 00:43:41,980
they are actual Python threads and they

00:43:40,330 --> 00:43:44,140
are subject to the same limitations of

00:43:41,980 --> 00:43:45,520
the Gil so there is the Gil there's a

00:43:44,140 --> 00:43:48,100
you know the global interpreter lock

00:43:45,520 --> 00:43:52,090
they were just created in a slightly

00:43:48,100 --> 00:43:54,010
different way okay so but mysterious

00:43:52,090 --> 00:43:56,140
miss a bit mister I might I might

00:43:54,010 --> 00:43:59,710
uncover the mystery here in a second so

00:43:56,140 --> 00:44:02,320
yeah that's great talk thank you

00:43:59,710 --> 00:44:05,920
I was just wondering are actually using

00:44:02,320 --> 00:44:07,090
the new editor everything is it just for

00:44:05,920 --> 00:44:09,820
the draw

00:44:07,090 --> 00:44:11,350
now I'm I am using the question I mean

00:44:09,820 --> 00:44:14,860
am i using the move editor and the

00:44:11,350 --> 00:44:17,470
answer is yes I did modify it to take

00:44:14,860 --> 00:44:19,210
away command completion because I don't

00:44:17,470 --> 00:44:20,980
like but I don't like windows popping up

00:44:19,210 --> 00:44:26,890
during talks and stuff but no it's them

00:44:20,980 --> 00:44:28,750
it's the movie editing I really

00:44:26,890 --> 00:44:31,180
interested in editing environments to

00:44:28,750 --> 00:44:33,700
replace on beginners and I've used idle

00:44:31,180 --> 00:44:37,270
for a long time and teaching classes I'm

00:44:33,700 --> 00:44:39,190
kind of excited that mu has has come out

00:44:37,270 --> 00:44:40,960
in a way that it can run just standalone

00:44:39,190 --> 00:44:46,350
I know it's very early but it's it's

00:44:40,960 --> 00:44:46,350
kind of in I thought I'd try it out yeah

00:44:46,619 --> 00:44:49,869
have you gotten as far as building an an

00:44:49,150 --> 00:44:52,809
actor/model

00:44:49,869 --> 00:44:59,890
on top of shredder and not not with this

00:44:52,809 --> 00:45:03,460
project no what you've shown is crazy

00:44:59,890 --> 00:45:05,890
and evil at the same time as usual what

00:45:03,460 --> 00:45:07,839
I was thinking about the shredder sleep

00:45:05,890 --> 00:45:10,539
function can be cancer but time sleeper

00:45:07,839 --> 00:45:12,490
cannot be canceled how can you tell the

00:45:10,539 --> 00:45:13,480
difference if you just see asleep and

00:45:12,490 --> 00:45:16,240
you don't know whether it comes from

00:45:13,480 --> 00:45:19,269
shredder or time if that function can be

00:45:16,240 --> 00:45:21,069
canceled or not so you were actually

00:45:19,269 --> 00:45:23,079
onto something very critical with that

00:45:21,069 --> 00:45:26,140
it turns out that in order for this this

00:45:23,079 --> 00:45:28,359
library to work you have to use the

00:45:26,140 --> 00:45:30,970
functions that it provides like threat

00:45:28,359 --> 00:45:33,400
of sleep like threat or lack threat oq

00:45:30,970 --> 00:45:35,019
and so forth it is very analogous to

00:45:33,400 --> 00:45:36,970
these acing frameworks like if used

00:45:35,019 --> 00:45:38,710
threads and async I oh I'm not threats

00:45:36,970 --> 00:45:40,809
but locks and async i/o you pretty you

00:45:38,710 --> 00:45:44,500
have to use the async i/o locks and

00:45:40,809 --> 00:45:47,230
queues and so forth to do that if you

00:45:44,500 --> 00:45:49,480
choose to use the other sleep like let's

00:45:47,230 --> 00:45:51,700
say you use time sleep or use the

00:45:49,480 --> 00:45:54,400
regular threading lock the code will

00:45:51,700 --> 00:45:56,799
still work but you lose cancellation

00:45:54,400 --> 00:45:59,170
that's the only thing that you it's it's

00:45:56,799 --> 00:46:02,200
essentially like wow because you're not

00:45:59,170 --> 00:46:04,839
using my thing you can't you can't

00:46:02,200 --> 00:46:07,240
cancel it so that the worst penalty

00:46:04,839 --> 00:46:09,759
would be would be that you're actually

00:46:07,240 --> 00:46:12,400
on to what is happening in this library

00:46:09,759 --> 00:46:14,349
I kind of anticipated that that people

00:46:12,400 --> 00:46:17,799
almost like when the world is going on

00:46:14,349 --> 00:46:21,400
in this thing here's here's the basic

00:46:17,799 --> 00:46:25,150
gist of this library if you're in a

00:46:21,400 --> 00:46:27,130
thread and you block you block in the

00:46:25,150 --> 00:46:28,599
operating system kernel you work your

00:46:27,130 --> 00:46:30,700
way down from Python you go in to see

00:46:28,599 --> 00:46:32,200
python you go into Lib C you hit the OS

00:46:30,700 --> 00:46:34,720
kernel and you're in the kernel and

00:46:32,200 --> 00:46:36,460
you're like dead at that point you're

00:46:34,720 --> 00:46:38,049
not coming back until the colonel says

00:46:36,460 --> 00:46:42,250
that you're that you're that you're dead

00:46:38,049 --> 00:46:44,980
the gist of this talk though why does it

00:46:42,250 --> 00:46:46,420
have to block in the kernel not like why

00:46:44,980 --> 00:46:48,059
does it have to block in the operating

00:46:46,420 --> 00:46:52,390
system

00:46:48,059 --> 00:46:53,980
why not block on an event loop you have

00:46:52,390 --> 00:46:55,900
a sink i/o you have event loops

00:46:53,980 --> 00:46:57,700
you could go block over there like this

00:46:55,900 --> 00:46:58,420
you know like basically sleeping is

00:46:57,700 --> 00:47:00,760
sleep

00:46:58,420 --> 00:47:04,240
it's like doesn't matter where it takes

00:47:00,760 --> 00:47:05,079
place and so you know I mention it's

00:47:04,240 --> 00:47:08,380
like this is a thread library

00:47:05,079 --> 00:47:10,540
implemented on top of a sink it's

00:47:08,380 --> 00:47:12,520
actually running an async event loop in

00:47:10,540 --> 00:47:13,900
the background and every single time

00:47:12,520 --> 00:47:15,730
does a blocking operation and

00:47:13,900 --> 00:47:19,329
essentially says you go black over there

00:47:15,730 --> 00:47:22,240
like block in the event Lu and you know

00:47:19,329 --> 00:47:23,650
tell me when you come back so it's it's

00:47:22,240 --> 00:47:26,619
kind of it's it's sort of an interesting

00:47:23,650 --> 00:47:28,030
you know kind of weird weird thing but

00:47:26,619 --> 00:47:29,710
that's that's what's happening the

00:47:28,030 --> 00:47:31,270
reason that it's and because it does

00:47:29,710 --> 00:47:33,549
that is why you have to do this special

00:47:31,270 --> 00:47:34,900
but you have to use the special object

00:47:33,549 --> 00:47:40,740
because they're programmed to do this

00:47:34,900 --> 00:47:44,040
like sit like redirect okay thanks yeah

00:47:40,740 --> 00:47:47,230
did you build the interaction between

00:47:44,040 --> 00:47:53,890
some async code and some thread Oh code

00:47:47,230 --> 00:47:56,369
in the same code base yet oh so that

00:47:53,890 --> 00:47:59,589
this is so this whole implementation is

00:47:56,369 --> 00:48:02,140
is written on curio I don't want this to

00:47:59,589 --> 00:48:04,720
be like a like a curio talk but that

00:48:02,140 --> 00:48:07,030
it's essentially using a feature of

00:48:04,720 --> 00:48:09,609
curio that allows threads and async to

00:48:07,030 --> 00:48:13,660
work together so in that context they do

00:48:09,609 --> 00:48:15,339
work together I wouldn't say that's like

00:48:13,660 --> 00:48:17,319
specific to that library I mean you

00:48:15,339 --> 00:48:20,859
could make it work with other stuff it's

00:48:17,319 --> 00:48:24,069
having so ok pal

00:48:20,859 --> 00:48:28,000
so last and final question all of this

00:48:24,069 --> 00:48:29,829
Kino thank you great talk could you

00:48:28,000 --> 00:48:33,280
explain a little bit what's going on

00:48:29,829 --> 00:48:34,839
with more magic Oh more magic how you

00:48:33,280 --> 00:48:38,530
had to ask about the more magic thing

00:48:34,839 --> 00:48:40,000
the the more magic thing so in so in

00:48:38,530 --> 00:48:42,599
order to get this to work with

00:48:40,000 --> 00:48:45,220
third-party libraries like requests

00:48:42,599 --> 00:48:47,380
mainly what I need to do is I need it to

00:48:45,220 --> 00:48:50,200
use my socket object turns out that

00:48:47,380 --> 00:48:51,910
thread o has its own socket object the

00:48:50,200 --> 00:48:56,170
only way that I can get it to work is so

00:48:51,910 --> 00:48:57,549
for it to use my socket object so it's

00:48:56,170 --> 00:49:00,549
essentially what I'm doing there is

00:48:57,549 --> 00:49:02,740
temporarily replacing the socket module

00:49:00,549 --> 00:49:04,690
with a replacement it's it's it would be

00:49:02,740 --> 00:49:07,329
like using the monkey patching and like

00:49:04,690 --> 00:49:10,569
G event or something preferably I would

00:49:07,329 --> 00:49:11,980
not want to do that I mean you can

00:49:10,569 --> 00:49:13,840
actually get requests to work

00:49:11,980 --> 00:49:15,790
without monkey patching the socket

00:49:13,840 --> 00:49:17,859
module but it involves this really crazy

00:49:15,790 --> 00:49:21,130
chain of inheritance and making like

00:49:17,859 --> 00:49:22,690
session objects and other other things

00:49:21,130 --> 00:49:24,310
but but that that's why that that's what

00:49:22,690 --> 00:49:26,260
that was doing this essentially just

00:49:24,310 --> 00:49:29,170
getting it to use my socket object

00:49:26,260 --> 00:49:31,270
instead of the normal line hey thank you

00:49:29,170 --> 00:49:38,860
very much David all right yeah

00:49:31,270 --> 00:49:38,860

YouTube URL: https://www.youtube.com/watch?v=xOyJiN3yGfU


