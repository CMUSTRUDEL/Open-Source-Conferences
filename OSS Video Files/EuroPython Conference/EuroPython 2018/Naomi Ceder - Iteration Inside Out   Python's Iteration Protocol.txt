Title: Naomi Ceder - Iteration Inside Out   Python's Iteration Protocol
Publication date: 2018-08-30
Playlist: EuroPython 2018
Description: 
	Iteration Inside Out - Python's Iteration Protocol
[EuroPython 2018 - Talk - 2018-07-26 - Moorfoot]
[Edinburgh, UK]

By Naomi Ceder

Using for loops and list comprehensions in Python is basic and quite common, right? But how does iteration in Python actually work "under the hood"? The words "iterator" and "iterable" each occur over 500 times in the Python documentation, but what does an iterator actually do, as opposed to an iterable? And how do they do it? Learn the details as we turn the iteration protocol inside out, with live coded demonstrations along the way.

This talk will start from the way Python iterates of over a sequence, in comparison with iterating by index, like C. The key point of iterating over a sequence is that something needs to track which item in the sequence is next, which is something that Python's  iteration protocol manages.

The iterable section will demonstrate creating a simple object that returns items by index (e.g., a fibonacci series), showing that getitem is really all you need for an iterable, since an iterator is created for such objects when iterated upon. BUT, this doesn't answer the question of how Python keeps track of which item is next.

The iterator section answers that question by converting the iterable just created to an iterator - adding iter and next methods and showing how the iterator saves state and essentially drives the iteration protocol. 

Having an accurate understanding of iteration protocol will help developing Pythonistas reason better about both iterating over existing objects and creating their own iterables and iterators.



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2018.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:00,299 --> 00:00:07,170
yes this talk I call iteration inside

00:00:03,360 --> 00:00:11,219
out and it's an explanation of pythons

00:00:07,170 --> 00:00:13,700
iteration protocol yet assumes that you

00:00:11,219 --> 00:00:16,379
do not particularly know much more than

00:00:13,700 --> 00:00:18,390
how to write a for loop that that's the

00:00:16,379 --> 00:00:21,930
main assumption sorry yes I'm Naomi

00:00:18,390 --> 00:00:23,850
cedar I am at the moment the chair of

00:00:21,930 --> 00:00:25,619
the Python Software Foundation that has

00:00:23,850 --> 00:00:28,769
nothing to do with this talk but I put

00:00:25,619 --> 00:00:31,260
it there anyway I am the author of the

00:00:28,769 --> 00:00:34,170
quick Python book third edition just

00:00:31,260 --> 00:00:36,120
came out I do have a couple of copies

00:00:34,170 --> 00:00:38,700
with me that I will give away to people

00:00:36,120 --> 00:00:40,410
who ask nicely so come see me later on

00:00:38,700 --> 00:00:44,550
and I will be happy to talk to you about

00:00:40,410 --> 00:00:46,530
that and I also lead a small Python team

00:00:44,550 --> 00:00:49,469
for a company called Dick Blick Art

00:00:46,530 --> 00:00:52,230
Materials we're the largest supplier of

00:00:49,469 --> 00:00:55,680
fine art supplies that is paints brushes

00:00:52,230 --> 00:00:57,930
canvases in the United States it's not a

00:00:55,680 --> 00:01:03,660
huge market but we're one of the biggies

00:00:57,930 --> 00:01:07,409
so I enjoy that job actually so I'm

00:01:03,660 --> 00:01:10,380
gonna start with a quote from Dave

00:01:07,409 --> 00:01:12,810
Beasley I don't know if you had a chance

00:01:10,380 --> 00:01:15,900
to see he gave a remote talk for a hike

00:01:12,810 --> 00:01:18,380
on Pakistan which among other things

00:01:15,900 --> 00:01:21,420
features him doing a trombone solo

00:01:18,380 --> 00:01:22,530
highly recommend that but in this talk

00:01:21,420 --> 00:01:24,600
which is called

00:01:22,530 --> 00:01:27,659
the iterations of evolution he goes way

00:01:24,600 --> 00:01:31,799
way way back in in in Python history

00:01:27,659 --> 00:01:34,710
he describes the for loop and the

00:01:31,799 --> 00:01:38,340
iteration protocol as pythons most

00:01:34,710 --> 00:01:40,860
powerful useful feature and I happen to

00:01:38,340 --> 00:01:42,869
agree it's really an interesting thing

00:01:40,860 --> 00:01:46,920
that is enormous ly powerful and

00:01:42,869 --> 00:01:51,270
enormous ly taken for granted so what do

00:01:46,920 --> 00:01:54,270
you think about you we have repetitive

00:01:51,270 --> 00:01:56,040
chunks of data all around us it's one of

00:01:54,270 --> 00:01:58,560
the things after all that computers are

00:01:56,040 --> 00:02:00,439
good at is repeating something over and

00:01:58,560 --> 00:02:04,290
over and over and over and over again

00:02:00,439 --> 00:02:07,170
many more times and much faster than we

00:02:04,290 --> 00:02:10,289
can do so you know just picking some

00:02:07,170 --> 00:02:13,860
random examples of things that

00:02:10,289 --> 00:02:16,049
I have run across not that long ago I

00:02:13,860 --> 00:02:17,730
you could have a series of temperature

00:02:16,049 --> 00:02:20,640
readings for the month you could have

00:02:17,730 --> 00:02:22,799
dictionary keys maybe for a dictionary

00:02:20,640 --> 00:02:26,760
mapping member IDs to members

00:02:22,799 --> 00:02:30,329
you could have a CSV of a million or two

00:02:26,760 --> 00:02:32,970
or twenty million products you could

00:02:30,329 --> 00:02:36,810
have the text of Moby Dick to a very big

00:02:32,970 --> 00:02:38,129
book a lot of things in sequence you

00:02:36,810 --> 00:02:40,260
could have the results set for a

00:02:38,129 --> 00:02:42,659
database query finding your daily sales

00:02:40,260 --> 00:02:46,680
even there so they're just a lot of

00:02:42,659 --> 00:02:49,889
different things and these things don't

00:02:46,680 --> 00:02:52,260
on the face of them have a whole lot in

00:02:49,889 --> 00:02:55,709
common they're different types the vid

00:02:52,260 --> 00:02:58,590
the objects involved or different the

00:02:55,709 --> 00:03:01,409
elements contained in those objects are

00:02:58,590 --> 00:03:03,230
of different types sometimes it might be

00:03:01,409 --> 00:03:06,359
just a simple type sometimes it might be

00:03:03,230 --> 00:03:08,849
itself a compound type of various other

00:03:06,359 --> 00:03:12,629
pieces whatever they're all kind of

00:03:08,849 --> 00:03:15,000
different but the situation that we want

00:03:12,629 --> 00:03:18,569
to use to get at them is all the same

00:03:15,000 --> 00:03:21,269
that is their large series of data where

00:03:18,569 --> 00:03:23,209
we want to do the same thing one after

00:03:21,269 --> 00:03:29,340
the other all the way through

00:03:23,209 --> 00:03:35,090
so in Python obviously we would use a

00:03:29,340 --> 00:03:38,310
for loop and that seems pretty obvious

00:03:35,090 --> 00:03:43,769
except that the way that Python does for

00:03:38,310 --> 00:03:46,229
loops was not always an obvious thing in

00:03:43,769 --> 00:03:49,549
fact it used to be something that had to

00:03:46,229 --> 00:03:53,010
be called out as being different so

00:03:49,549 --> 00:03:56,699
going back in history this is from the

00:03:53,010 --> 00:04:00,419
Python 1.1 documentation which is nearly

00:03:56,699 --> 00:04:02,040
25 years ago and here's what it says

00:04:00,419 --> 00:04:03,989
about for loops I kind of like the tone

00:04:02,040 --> 00:04:07,919
of this whole thing it's like Python in

00:04:03,989 --> 00:04:09,629
for loops like for loops and you and the

00:04:07,919 --> 00:04:11,729
for statement in Python differs a bit

00:04:09,629 --> 00:04:17,549
from what you may be used to in C or

00:04:11,729 --> 00:04:20,310
Pascal those were the days Pascal and

00:04:17,549 --> 00:04:21,989
rather than always iterating over an

00:04:20,310 --> 00:04:24,060
arithmetic progression of numbers like

00:04:21,989 --> 00:04:25,410
in Pascal and for the

00:04:24,060 --> 00:04:27,120
of us who suffered through Pascal you

00:04:25,410 --> 00:04:29,690
remember that's a for-loop just gave you

00:04:27,120 --> 00:04:32,190
numbers that was it or leaving the user

00:04:29,690 --> 00:04:34,590
completely free in the iteration test

00:04:32,190 --> 00:04:35,930
and step as in C and I'll talk about

00:04:34,590 --> 00:04:39,270
that in a second

00:04:35,930 --> 00:04:42,510
pythons for statement iterates over the

00:04:39,270 --> 00:04:45,060
items of any sequence eg illest or

00:04:42,510 --> 00:04:48,900
string in the order they appear in the

00:04:45,060 --> 00:04:51,389
sequence so in the early days of Python

00:04:48,900 --> 00:04:53,550
this was weird this was something that

00:04:51,389 --> 00:04:59,970
was specifically called out in the

00:04:53,550 --> 00:05:01,919
documentation so for contrast some of

00:04:59,970 --> 00:05:03,840
you may have done see I mean I you know

00:05:01,919 --> 00:05:08,669
some of us have survived C programming

00:05:03,840 --> 00:05:11,490
this is a C for loop and for those of

00:05:08,669 --> 00:05:13,980
you aren't familiar you can see though

00:05:11,490 --> 00:05:17,910
that there's a lot going on in the line

00:05:13,980 --> 00:05:21,360
with the for on it okay in the parens

00:05:17,910 --> 00:05:23,490
there we're declaring a variable we're

00:05:21,360 --> 00:05:26,820
initializing the variable to be able to

00:05:23,490 --> 00:05:30,240
control we have a condition for when the

00:05:26,820 --> 00:05:32,669
loop continues and we are incrementing I

00:05:30,240 --> 00:05:36,600
the loop control variable that's all

00:05:32,669 --> 00:05:38,520
packaged in that four line now if you

00:05:36,600 --> 00:05:41,729
haven't done C before I can tell you

00:05:38,520 --> 00:05:44,760
that what's required there is that you

00:05:41,729 --> 00:05:47,900
have two semicolons basically all the

00:05:44,760 --> 00:05:52,820
rest is up for grabs in that four line

00:05:47,900 --> 00:05:57,360
and in fact really what's going on is

00:05:52,820 --> 00:05:59,700
that this is just a repackaging of this

00:05:57,360 --> 00:06:02,160
kind of while loop you see you've got

00:05:59,700 --> 00:06:04,169
the same pieces we declare a loop

00:06:02,160 --> 00:06:06,840
control variable we initialize the loop

00:06:04,169 --> 00:06:08,760
control variable got a condition to see

00:06:06,840 --> 00:06:10,380
whether the loop continues and then at

00:06:08,760 --> 00:06:12,510
the bottom we increment the loop control

00:06:10,380 --> 00:06:16,830
variable it's the same thing in both

00:06:12,510 --> 00:06:18,990
cases you are free if you want to not

00:06:16,830 --> 00:06:21,240
put those things in or to put in

00:06:18,990 --> 00:06:22,289
something completely different it

00:06:21,240 --> 00:06:23,700
doesn't matter you can do whatever you

00:06:22,289 --> 00:06:27,570
want but that's that's the way that it

00:06:23,700 --> 00:06:31,260
works and in both of those cases then

00:06:27,570 --> 00:06:33,360
I'll loop control variable the I is just

00:06:31,260 --> 00:06:36,270
an integer variable that gets

00:06:33,360 --> 00:06:39,090
incremented and it's used as an index

00:06:36,270 --> 00:06:43,830
into the array there is no particular

00:06:39,090 --> 00:06:45,450
connection between the two in fact when

00:06:43,830 --> 00:06:48,930
you notice this is controlled by a

00:06:45,450 --> 00:06:50,760
variable called list dot Len and of

00:06:48,930 --> 00:06:52,080
course I didn't realize it for C it's a

00:06:50,760 --> 00:06:54,120
little bit of an anachronism or a

00:06:52,080 --> 00:06:58,110
misnomer to even use the word list but I

00:06:54,120 --> 00:07:00,320
put it in but that has to be determined

00:06:58,110 --> 00:07:03,870
completely separately that has nothing

00:07:00,320 --> 00:07:05,910
intrinsically to do with the array so

00:07:03,870 --> 00:07:07,790
that's that's the way that things used

00:07:05,910 --> 00:07:11,280
to be

00:07:07,790 --> 00:07:12,690
now you can and here's where I'm going

00:07:11,280 --> 00:07:15,510
to start playing around a little bit

00:07:12,690 --> 00:07:19,140
with code for your amusement for my

00:07:15,510 --> 00:07:20,580
excitement I'm going but you can in

00:07:19,140 --> 00:07:23,100
people when they used to start doing

00:07:20,580 --> 00:07:25,020
Python you'd see this a lot they would

00:07:23,100 --> 00:07:36,720
do a for loop and they would say like

00:07:25,020 --> 00:07:43,920
for I range when a list and then we

00:07:36,720 --> 00:07:48,000
would do something and that's kind of

00:07:43,920 --> 00:07:49,770
reproducing what what the see sort of

00:07:48,000 --> 00:07:51,690
loop would be and as I say people

00:07:49,770 --> 00:07:55,170
beginning Python coming from a language

00:07:51,690 --> 00:07:57,420
like C would do this a lot I remember I

00:07:55,170 --> 00:08:01,440
think I did it when I started so so that

00:07:57,420 --> 00:08:04,710
gets you the the loop it works but in

00:08:01,440 --> 00:08:08,940
fact even that isn't exactly what C is

00:08:04,710 --> 00:08:12,240
doing because to get our list of index

00:08:08,940 --> 00:08:14,100
values are 0 1 2 3 2 to go through those

00:08:12,240 --> 00:08:17,040
elements in the list we're actually

00:08:14,100 --> 00:08:18,870
using the range to get ourselves a

00:08:17,040 --> 00:08:20,730
sequence and we're going over this

00:08:18,870 --> 00:08:23,250
sequence so it's not even exactly the

00:08:20,730 --> 00:08:25,440
same as what C does and it's certainly

00:08:23,250 --> 00:08:27,960
not the way that most people would write

00:08:25,440 --> 00:08:31,370
a for loop that they would think of as

00:08:27,960 --> 00:08:35,150
as being you know quote pythonic

00:08:31,370 --> 00:08:35,150
normally what we would do

00:08:38,329 --> 00:08:50,269
is more something like this and that

00:08:47,149 --> 00:08:52,730
you'll notice throws away that hole

00:08:50,269 --> 00:08:56,119
going by index and instead we're going

00:08:52,730 --> 00:08:58,100
by one item in a sequence okay now this

00:08:56,119 --> 00:08:59,839
shouldn't be new to any of you this is

00:08:58,100 --> 00:09:02,660
just kind of setting up our me and

00:08:59,839 --> 00:09:05,600
premise here that pythons for loops

00:09:02,660 --> 00:09:07,549
pythons iteration is a somewhat

00:09:05,600 --> 00:09:10,069
different thing than a lot of the

00:09:07,549 --> 00:09:13,339
traditional things I will say that these

00:09:10,069 --> 00:09:15,619
days there are many sort of newer

00:09:13,339 --> 00:09:18,439
languages that do sort of the same thing

00:09:15,619 --> 00:09:20,299
and pretty much the same thing a lot of

00:09:18,439 --> 00:09:23,989
the languages that didn't use to have

00:09:20,299 --> 00:09:26,209
something like this now do even in C

00:09:23,989 --> 00:09:27,679
they have some macro Chickering that

00:09:26,209 --> 00:09:30,649
makes you come up with something that

00:09:27,679 --> 00:09:32,119
kind of sort is similar in a way so

00:09:30,649 --> 00:09:34,339
there are lots of different options for

00:09:32,119 --> 00:09:35,839
doing this but for a while Python was

00:09:34,339 --> 00:09:40,699
pretty much one of the few that did

00:09:35,839 --> 00:09:44,559
things this way and all of this kind of

00:09:40,699 --> 00:09:48,889
raises the question how does it do that

00:09:44,559 --> 00:09:51,230
so when we go back and we look at that

00:09:48,889 --> 00:09:53,959
example let's just pop back there how

00:09:51,230 --> 00:09:55,489
does that for loop know where it is I

00:09:53,959 --> 00:09:56,959
mean the whole key to a for loop is you

00:09:55,489 --> 00:10:00,139
go through an order one after another

00:09:56,959 --> 00:10:00,919
after another so how does it know what's

00:10:00,139 --> 00:10:03,410
next

00:10:00,919 --> 00:10:05,209
there's nothing in the for loop that we

00:10:03,410 --> 00:10:09,559
just did that really explicitly says

00:10:05,209 --> 00:10:12,410
that and how is it that basically you

00:10:09,559 --> 00:10:15,499
can use for loops on all of these wide

00:10:12,410 --> 00:10:17,619
varieties of container types and it all

00:10:15,499 --> 00:10:20,419
just seems to work

00:10:17,619 --> 00:10:22,189
or better yet suppose I want to make

00:10:20,419 --> 00:10:24,100
something that I can stick in a for loop

00:10:22,189 --> 00:10:27,040
how do I do that

00:10:24,100 --> 00:10:33,679
so that's what I want to talk about very

00:10:27,040 --> 00:10:37,369
so key thing is for Python this whole

00:10:33,679 --> 00:10:40,549
iteration using four relies on a

00:10:37,369 --> 00:10:43,730
protocol not on individual types and

00:10:40,549 --> 00:10:47,240
this has been the case since python 2.2

00:10:43,730 --> 00:10:50,389
and I'm old I mean I was around at the

00:10:47,240 --> 00:10:51,769
end of the Python 2.1 few months

00:10:50,389 --> 00:10:54,709
whatever it was an out it wasn't

00:10:51,769 --> 00:10:56,600
currentversion for very long but so so

00:10:54,709 --> 00:10:58,790
this is about as long as I've been doing

00:10:56,600 --> 00:11:01,759
Python this has been kind of codified as

00:10:58,790 --> 00:11:03,439
a protocol and particularly if you're

00:11:01,759 --> 00:11:05,600
newer to the language and you hear

00:11:03,439 --> 00:11:07,550
people talking about Python doing duck

00:11:05,600 --> 00:11:10,360
typing and you don't really have a clear

00:11:07,550 --> 00:11:14,839
example in your head what this means

00:11:10,360 --> 00:11:17,809
that is what this means is that pythons

00:11:14,839 --> 00:11:20,839
iteration protocol is an example of duck

00:11:17,809 --> 00:11:23,239
typing and if you're not familiar with

00:11:20,839 --> 00:11:25,519
duck typing this is a case where if it

00:11:23,239 --> 00:11:29,869
walks like iteration and it quacks like

00:11:25,519 --> 00:11:35,799
iteration its iteration okay so so this

00:11:29,869 --> 00:11:40,160
is is a protocol and for this protocol

00:11:35,799 --> 00:11:41,809
turns out you need two things okay I

00:11:40,160 --> 00:11:44,029
realize this is sort of looking like

00:11:41,809 --> 00:11:45,410
we're defining one thing by variations

00:11:44,029 --> 00:11:48,980
of the same thing what's this

00:11:45,410 --> 00:11:51,980
what you need for iteration is you need

00:11:48,980 --> 00:11:56,929
an iterable object I'll tell you about

00:11:51,980 --> 00:12:00,829
those next and there is also need for an

00:11:56,929 --> 00:12:02,480
iterator object and I'm going to talk

00:12:00,829 --> 00:12:06,110
about that after I do the iterable but

00:12:02,480 --> 00:12:09,679
in fact most of the time Python actually

00:12:06,110 --> 00:12:10,999
takes care of the iterator for you so

00:12:09,679 --> 00:12:15,549
it's not something that you need to

00:12:10,999 --> 00:12:17,899
worry about a lot most at the time so

00:12:15,549 --> 00:12:19,309
before I realized I was gonna grind way

00:12:17,899 --> 00:12:20,779
way over and I had to sort of squeeze

00:12:19,309 --> 00:12:24,259
things down I was gonna go through the

00:12:20,779 --> 00:12:26,990
whole Python glossary thing on iterable

00:12:24,259 --> 00:12:31,189
but instead no you got the the TLDR

00:12:26,990 --> 00:12:32,959
version so basically an iterable is

00:12:31,189 --> 00:12:36,350
something that can return its members

00:12:32,959 --> 00:12:41,569
one at a time in order like a list

00:12:36,350 --> 00:12:44,119
string tuple anything like that or it's

00:12:41,569 --> 00:12:47,660
so and and basically that means one of

00:12:44,119 --> 00:12:50,720
two things it can be a class with a

00:12:47,660 --> 00:12:53,089
dunder inner method that returns an

00:12:50,720 --> 00:12:57,199
iterator which again I haven't talked

00:12:53,089 --> 00:13:00,860
about yet so put that on hold or it can

00:12:57,199 --> 00:13:03,730
be any class that you make that has a

00:13:00,860 --> 00:13:05,900
dunder get item method that follows

00:13:03,730 --> 00:13:08,540
sequence Samman

00:13:05,900 --> 00:13:10,790
and by that we mean you start at the

00:13:08,540 --> 00:13:12,680
beginning from zero and count up using

00:13:10,790 --> 00:13:16,280
integers to get to where ever you want

00:13:12,680 --> 00:13:17,990
to be in the sequence so it's one of

00:13:16,280 --> 00:13:20,840
those two things can be both but

00:13:17,990 --> 00:13:25,870
basically those are the two things and

00:13:20,840 --> 00:13:29,270
what happens is when you do a for loop I

00:13:25,870 --> 00:13:32,600
if you hand it an iterable it's going to

00:13:29,270 --> 00:13:34,640
create an iterator sort of anonymous

00:13:32,600 --> 00:13:37,580
leave behind the scenes to manage the

00:13:34,640 --> 00:13:39,110
for loop for you okay so that's why you

00:13:37,580 --> 00:13:42,890
almost never need to worry about it

00:13:39,110 --> 00:13:46,100
because it's done automatically so the

00:13:42,890 --> 00:13:49,970
Gendry state if you use the inner

00:13:46,100 --> 00:13:52,370
function which is a built-in function on

00:13:49,970 --> 00:13:55,810
an object in order for it to be an

00:13:52,370 --> 00:14:00,230
iterable it needs to return an iterator

00:13:55,810 --> 00:14:02,360
so it's either got a get item that we

00:14:00,230 --> 00:14:04,070
can use square brackets and an index two

00:14:02,360 --> 00:14:07,340
or it's got an interest

00:14:04,070 --> 00:14:10,160
so let's actually talk about doing that

00:14:07,340 --> 00:14:11,930
now there are a couple of different ways

00:14:10,160 --> 00:14:14,780
that you can check to see if you've

00:14:11,930 --> 00:14:16,580
actually got an iterator so you can look

00:14:14,780 --> 00:14:22,130
and see if it's got an inner math it's

00:14:16,580 --> 00:14:28,760
like we've got a list I can check and

00:14:22,130 --> 00:14:34,160
see if my list has a I a property under

00:14:28,760 --> 00:14:36,680
it err and since it's a list it does so

00:14:34,160 --> 00:14:38,810
you can check that but that's only one

00:14:36,680 --> 00:14:41,000
of the possibilities the other

00:14:38,810 --> 00:14:44,030
possibility is does it have a get item

00:14:41,000 --> 00:14:46,120
that follows sequence semantics well you

00:14:44,030 --> 00:14:49,640
can check and see if it's got a get item

00:14:46,120 --> 00:14:51,710
but it still might not be following

00:14:49,640 --> 00:14:54,350
sequence semantics dictionaries for

00:14:51,710 --> 00:14:57,680
example have get items but they don't

00:14:54,350 --> 00:15:01,340
take integer indexes so that wouldn't

00:14:57,680 --> 00:15:04,880
work so that's a little bit trickier to

00:15:01,340 --> 00:15:07,520
decide basically though remember we're

00:15:04,880 --> 00:15:09,200
programming Python so we have the

00:15:07,520 --> 00:15:11,780
philosophy it's easier to ask for

00:15:09,200 --> 00:15:14,180
forgiveness than permission so what you

00:15:11,780 --> 00:15:16,550
can do is you can just try calling it or

00:15:14,180 --> 00:15:18,140
on an object and either it will give you

00:15:16,550 --> 00:15:19,100
a type error or it will give you an

00:15:18,140 --> 00:15:21,320
iterator if it's an

00:15:19,100 --> 00:15:26,990
greater than this you have an iterable

00:15:21,320 --> 00:15:30,460
object so what I want to do first step

00:15:26,990 --> 00:15:34,190
is I want to make the minimum possible

00:15:30,460 --> 00:15:36,110
iterable okay now this is kind of

00:15:34,190 --> 00:15:39,470
modeled on an iterator that is in the

00:15:36,110 --> 00:15:41,510
collections library but basically I want

00:15:39,470 --> 00:15:45,140
I don't want to make a thing that

00:15:41,510 --> 00:15:47,540
repeats itself trying to keep this as

00:15:45,140 --> 00:15:49,550
simple as possible so basically if I

00:15:47,540 --> 00:15:52,130
make a repeater object and I tell it

00:15:49,550 --> 00:15:54,980
that what I want it to repeat is hello

00:15:52,130 --> 00:15:58,180
and I give it the number 4 I can loop

00:15:54,980 --> 00:16:01,510
over it and it will give me 4 hellos

00:15:58,180 --> 00:16:01,510
simple enough right

00:16:01,600 --> 00:16:07,880
so let's see what that's like so I'm

00:16:05,450 --> 00:16:10,250
going to and as I say here's the

00:16:07,880 --> 00:16:12,170
exciting part where we'll see if I can

00:16:10,250 --> 00:16:13,730
actually manage to write this class

00:16:12,170 --> 00:16:18,680
without having something horrible go

00:16:13,730 --> 00:16:24,500
wrong so let's see here we need and in

00:16:18,680 --> 00:16:28,790
it and I want to give it the value that

00:16:24,500 --> 00:16:30,860
it's going to be echoing to me and I'm

00:16:28,790 --> 00:16:35,570
gonna give it the limit as in the number

00:16:30,860 --> 00:16:37,970
of times I want it to repeat so here

00:16:35,570 --> 00:16:44,710
this is just a little bit see slef I

00:16:37,970 --> 00:16:47,830
already did it so value

00:16:44,710 --> 00:16:47,830
[Music]

00:16:48,630 --> 00:16:59,519
equals limit okay that's good enough for

00:16:54,130 --> 00:17:02,440
my in it now the other part I needed was

00:16:59,519 --> 00:17:11,770
get it right so let's see what that

00:17:02,440 --> 00:17:18,220
might look like itself and I'll call

00:17:11,770 --> 00:17:19,030
that index oh thank you that that that's

00:17:18,220 --> 00:17:21,189
very helpful

00:17:19,030 --> 00:17:22,870
I know I did that when I was practicing

00:17:21,189 --> 00:17:24,669
and it took me like two or three minutes

00:17:22,870 --> 00:17:26,319
to go back and figure out what I did it

00:17:24,669 --> 00:17:32,169
kept saying this is not an interval yes

00:17:26,319 --> 00:17:34,990
it is what is it so yes so got that so

00:17:32,169 --> 00:17:38,320
here we need to do something that will

00:17:34,990 --> 00:17:44,950
will similarly you know sort of satisfy

00:17:38,320 --> 00:17:46,900
sequence semantics so I'm gonna do we

00:17:44,950 --> 00:17:48,370
need to start from zero if it's less

00:17:46,900 --> 00:17:52,480
than zero this is really not going to

00:17:48,370 --> 00:17:53,919
work out well for us in this case and we

00:17:52,480 --> 00:17:55,750
don't want to go over our limit

00:17:53,919 --> 00:17:59,559
otherwise why would we bother to set the

00:17:55,750 --> 00:18:01,540
limit there so if it's if it's in aa

00:17:59,559 --> 00:18:05,580
thank you that was the other thing I

00:18:01,540 --> 00:18:08,380
kept screwing up I was just testing you

00:18:05,580 --> 00:18:14,790
there we go okay

00:18:08,380 --> 00:18:14,790
so if that's the case I'm gonna return

00:18:15,480 --> 00:18:25,179
self dot value and what happens if we go

00:18:23,140 --> 00:18:30,510
over it's the other question that's not

00:18:25,179 --> 00:18:30,510
quite solved so what what we do there is

00:18:35,669 --> 00:18:42,700
if if you want out of my for element

00:18:39,580 --> 00:18:45,040
repair petition you want item 99 I'm

00:18:42,700 --> 00:18:47,790
going to say that's not a good index and

00:18:45,040 --> 00:18:54,940
I'm going to throw you an index error

00:18:47,790 --> 00:18:57,400
okay so we got that I don't think we

00:18:54,940 --> 00:19:01,669
screwed that up so so we actually have

00:18:57,400 --> 00:19:04,129
then this is a class for an iterable

00:19:01,669 --> 00:19:10,389
at least I'm seeing that let's see if it

00:19:04,129 --> 00:19:13,190
actually is so I'm gonna make an

00:19:10,389 --> 00:19:17,719
instance of my repeater class here I

00:19:13,190 --> 00:19:21,979
want it to say hello four times and then

00:19:17,719 --> 00:19:28,429
I want to see if it's if it actually

00:19:21,979 --> 00:19:36,320
does have a thundered under either

00:19:28,429 --> 00:19:39,019
method okay it doesn't because I didn't

00:19:36,320 --> 00:19:41,929
define one okay

00:19:39,019 --> 00:19:43,609
fair enough does it have a get item with

00:19:41,929 --> 00:19:44,899
sequence semantics well we could mess

00:19:43,609 --> 00:19:47,059
around with that a little bit but I

00:19:44,899 --> 00:19:50,509
think basically the easiest thing to do

00:19:47,059 --> 00:19:56,809
is just to see if I can get something

00:19:50,509 --> 00:19:58,459
from index 0 and they do so ok so we've

00:19:56,809 --> 00:20:03,019
got something that kind of looks like a

00:19:58,459 --> 00:20:06,709
sequence object let's see how that

00:20:03,019 --> 00:20:10,129
actually goes so can I get an iterator

00:20:06,709 --> 00:20:11,779
from it this is sort of the real test if

00:20:10,129 --> 00:20:14,959
I can get an iterator from it then this

00:20:11,779 --> 00:20:23,089
whole talk is over right so maybe that's

00:20:14,959 --> 00:20:25,570
a hint I don't know but let's see so

00:20:23,089 --> 00:20:27,709
yeah you can get an iterator from I

00:20:25,570 --> 00:20:31,399
remember what I got there is really

00:20:27,709 --> 00:20:34,989
pretty simple so if it's an iterator

00:20:31,399 --> 00:20:34,989
should work in a for loop right

00:20:40,769 --> 00:20:47,320
so there we go so that that little tiny

00:20:45,039 --> 00:20:51,969
class is all that you need to have it be

00:20:47,320 --> 00:20:52,690
an iterable and you know this

00:20:51,969 --> 00:20:55,710
comprehension

00:20:52,690 --> 00:21:01,719
oops let me do that again there we go

00:20:55,710 --> 00:21:03,429
there we go okay so that works too so

00:21:01,719 --> 00:21:08,080
basically what happens behind the scenes

00:21:03,429 --> 00:21:10,179
as I say every time that repeat my

00:21:08,080 --> 00:21:13,509
little object gets passed to a for loop

00:21:10,179 --> 00:21:15,639
the inner method is called on it and an

00:21:13,509 --> 00:21:19,029
anonymous iterator is created behind the

00:21:15,639 --> 00:21:25,570
scenes and that's what manages how many

00:21:19,029 --> 00:21:27,639
hellos we get okay and when you get to

00:21:25,570 --> 00:21:29,649
that point where you're off the end of

00:21:27,639 --> 00:21:33,219
your object when you hit that index

00:21:29,649 --> 00:21:37,869
that's one too far the iterator knows to

00:21:33,219 --> 00:21:40,690
pick up the index error and stops the

00:21:37,869 --> 00:21:44,769
iteration and then every time we do that

00:21:40,690 --> 00:21:46,719
we get a fresh iterator otherwise we

00:21:44,769 --> 00:21:49,029
would only be able to do the once and

00:21:46,719 --> 00:21:50,950
I'll talk about that in a second so

00:21:49,029 --> 00:21:53,469
again this this was the minimum case we

00:21:50,950 --> 00:21:55,179
had the get item was the bit that we

00:21:53,469 --> 00:21:58,059
actually needed to make an iterable

00:21:55,179 --> 00:22:00,839
and the index error was the part we

00:21:58,059 --> 00:22:04,059
needed so that our iteration would stop

00:22:00,839 --> 00:22:05,889
you can for amusement and I've done this

00:22:04,059 --> 00:22:08,109
before I don't recommend doing it very

00:22:05,889 --> 00:22:10,389
often though you can leave off that part

00:22:08,109 --> 00:22:12,820
and just have it go forever

00:22:10,389 --> 00:22:15,460
one hopes you have some other a strategy

00:22:12,820 --> 00:22:17,229
for getting out of the loop then short

00:22:15,460 --> 00:22:19,330
of turning off your computer and walking

00:22:17,229 --> 00:22:20,649
away and discussed at least that's all

00:22:19,330 --> 00:22:24,159
you had to do it in the in the bad old

00:22:20,649 --> 00:22:26,789
days so so that's it it's really very

00:22:24,159 --> 00:22:30,639
easy to make an iterable

00:22:26,789 --> 00:22:32,529
but that's kind of just taken that

00:22:30,639 --> 00:22:33,940
question we raised at the beginning and

00:22:32,529 --> 00:22:36,759
just kind of kicked it on down the road

00:22:33,940 --> 00:22:39,960
it hasn't really answered how does it

00:22:36,759 --> 00:22:43,509
know which item is next because clearly

00:22:39,960 --> 00:22:44,799
the iterator is just responding to our

00:22:43,509 --> 00:22:46,690
the iterable excuse me it's just

00:22:44,799 --> 00:22:48,609
responding to being given an index and

00:22:46,690 --> 00:22:50,070
it feeds back an item it doesn't know

00:22:48,609 --> 00:22:52,989
what's next

00:22:50,070 --> 00:22:53,799
the loop itself doesn't seem to know

00:22:52,989 --> 00:22:55,059
what's next

00:22:53,799 --> 00:22:56,529
Luke doesn't even care what you're

00:22:55,059 --> 00:23:00,039
giving it as long as it follows the

00:22:56,529 --> 00:23:02,169
protocol so it's the iterator part that

00:23:00,039 --> 00:23:05,799
is actually keeping track of what's next

00:23:02,169 --> 00:23:08,320
and anything that does that for us is an

00:23:05,799 --> 00:23:12,070
iterator and the key thing for an

00:23:08,320 --> 00:23:15,519
iterator is that it has a dunder next

00:23:12,070 --> 00:23:17,169
method or for reasons that I've never

00:23:15,519 --> 00:23:20,289
really managed to make up a good

00:23:17,169 --> 00:23:22,029
explanation for in Python 2x it's just

00:23:20,289 --> 00:23:26,289
next without the dungeon I don't know

00:23:22,029 --> 00:23:27,850
why that happened but obviously it

00:23:26,289 --> 00:23:32,109
seemed like a good idea at the time but

00:23:27,850 --> 00:23:35,409
it's it's got a next that gives you the

00:23:32,109 --> 00:23:37,090
items in turn so that's what an iterator

00:23:35,409 --> 00:23:38,859
is it's one of these things that will

00:23:37,090 --> 00:23:41,350
manage where you are in the sequence and

00:23:38,859 --> 00:23:44,049
keep on giving you the next when you get

00:23:41,350 --> 00:23:46,659
to the end doesn't raise an index error

00:23:44,049 --> 00:23:50,109
like our interval did instead it raises

00:23:46,659 --> 00:23:54,700
a stop iteration exception that it knows

00:23:50,109 --> 00:23:57,580
means no more loop and if you keep

00:23:54,700 --> 00:23:59,739
trying with that same iterator it'll

00:23:57,580 --> 00:24:00,309
keep on telling you stop iteration it's

00:23:59,739 --> 00:24:05,100
over

00:24:00,309 --> 00:24:08,109
basically iterators our one use objects

00:24:05,100 --> 00:24:10,350
you can make one that wouldn't be that

00:24:08,109 --> 00:24:13,359
you but this is the way that they work

00:24:10,350 --> 00:24:16,629
the other thing that iterator needs is

00:24:13,359 --> 00:24:19,539
it needs add under in term ended and

00:24:16,629 --> 00:24:23,919
that dunder error method returns the

00:24:19,539 --> 00:24:27,629
object itself which means that all

00:24:23,919 --> 00:24:32,739
iterators can be used as iterables

00:24:27,629 --> 00:24:35,139
so it's like huh well we'll talk a

00:24:32,739 --> 00:24:37,480
little bit about this in a second the

00:24:35,139 --> 00:24:40,749
premium with with iterators though again

00:24:37,480 --> 00:24:43,059
is one use and done they don't magically

00:24:40,749 --> 00:24:44,590
refresh you can't reuse the same

00:24:43,059 --> 00:24:48,940
iterator draw it's gonna get a new

00:24:44,590 --> 00:24:51,399
object so I want to do the same thing

00:24:48,940 --> 00:24:54,399
but I want to do it with an iterator now

00:24:51,399 --> 00:24:57,429
so that you can see how that works so

00:24:54,399 --> 00:25:00,039
let's back up here we need to do two

00:24:57,429 --> 00:25:05,100
things we need to have a next and we

00:25:00,039 --> 00:25:11,799
need to have an under interim method so

00:25:05,100 --> 00:25:16,509
again let's sort of do this oops help me

00:25:11,799 --> 00:25:22,480
out here so first thing I want to do is

00:25:16,509 --> 00:25:27,419
again a little bit of housekeeping we'll

00:25:22,480 --> 00:25:34,830
do the same sort of thing well do that

00:25:27,419 --> 00:25:34,830
so obviously that's just same business

00:25:39,480 --> 00:25:43,509
and we want to do one more thing because

00:25:41,980 --> 00:25:47,200
we're gonna actually need to keep track

00:25:43,509 --> 00:25:50,740
of where we are in this sequence so I'm

00:25:47,200 --> 00:25:52,419
gonna call it count and I'm gonna start

00:25:50,740 --> 00:25:54,639
counting how many objects we've iterated

00:25:52,419 --> 00:25:59,379
it's zero so I'm just kind of setting

00:25:54,639 --> 00:26:04,350
this up as part of my dunder init so

00:25:59,379 --> 00:26:06,720
then what was the next thing we needed

00:26:04,350 --> 00:26:09,990
audience participation

00:26:06,720 --> 00:26:20,309
next well or either whichever but yes so

00:26:09,990 --> 00:26:23,440
next is more fun soldi davon okay and

00:26:20,309 --> 00:26:27,639
again we can kind of whatever I mean

00:26:23,440 --> 00:26:28,779
this is a little bit simpler I don't

00:26:27,639 --> 00:26:39,999
mean to do that

00:26:28,779 --> 00:26:44,309
stop that there so we want to be sure

00:26:39,999 --> 00:26:44,309
we're not past our limit basically

00:26:48,700 --> 00:26:53,230
so if we're still in the iteration

00:26:51,309 --> 00:26:54,609
business remember we started to count it

00:26:53,230 --> 00:26:56,129
zero but we don't want to go past our

00:26:54,609 --> 00:27:03,460
limits so if we're still able to do that

00:26:56,129 --> 00:27:07,539
we kind of need to do two things now we

00:27:03,460 --> 00:27:09,519
need to type properly as one thing first

00:27:07,539 --> 00:27:11,619
we want to keep track that oh yeah we've

00:27:09,519 --> 00:27:13,960
probably used up one of our iterations

00:27:11,619 --> 00:27:17,820
so we'll do that and then the other

00:27:13,960 --> 00:27:17,820
thing we would do of course is return

00:27:18,059 --> 00:27:29,139
self dot value okay and if we are at the

00:27:26,859 --> 00:27:48,700
limiter over if we've gone past where we

00:27:29,139 --> 00:27:53,379
should be I'm sorry by me I'm sorry I'm

00:27:48,700 --> 00:27:55,929
not hearing you well Y all right that's

00:27:53,379 --> 00:27:57,669
probably the wise thing to do oh oh I

00:27:55,929 --> 00:28:01,539
see I lost the whole thing that would

00:27:57,669 --> 00:28:06,369
have been embarrassing that would have

00:28:01,539 --> 00:28:12,730
not been good okay else so let's see

00:28:06,369 --> 00:28:17,950
here we want to raise stop iteration

00:28:12,730 --> 00:28:25,269
there we go okay there we go let's move

00:28:17,950 --> 00:28:26,889
ahead advances quickly okay we're

00:28:25,269 --> 00:28:30,669
running out of time I know I'll get in

00:28:26,889 --> 00:28:36,460
trouble if I go too far so basically I

00:28:30,669 --> 00:28:41,049
need to back up here and I'm going to

00:28:36,460 --> 00:28:42,820
make a repeat iterator does it have a

00:28:41,049 --> 00:28:45,159
knitter method well you can guess that

00:28:42,820 --> 00:28:53,399
yes it does have it under inter method

00:28:45,159 --> 00:28:53,399
and I will quickly do this for me

00:29:09,470 --> 00:29:27,239
pardon me oh I didn't actually thank you

00:29:23,600 --> 00:29:31,379
well-spotted all right there we go

00:29:27,239 --> 00:29:33,539
okay now I'm going to do this and we

00:29:31,379 --> 00:29:38,009
should be good so there we got one

00:29:33,539 --> 00:29:42,989
repeat all right I'm gonna move ahead

00:29:38,009 --> 00:29:44,700
here and this is the last question

00:29:42,989 --> 00:29:46,769
because we're running out of time I

00:29:44,700 --> 00:29:54,559
didn't go nearly fast enough but if I do

00:29:46,769 --> 00:29:54,559
a for loop here this is a trick question

00:29:57,109 --> 00:30:00,799
what happens now

00:30:02,690 --> 00:30:07,519
we should get three because I've already

00:30:05,580 --> 00:30:14,220
called it on at once

00:30:07,519 --> 00:30:16,590
oops oh yeah oh that's because you know

00:30:14,220 --> 00:30:21,330
in my hurry in my hurry I forgot to add

00:30:16,590 --> 00:30:23,190
the it er method there we go so yeah

00:30:21,330 --> 00:30:26,299
we're running out of time so I clearly

00:30:23,190 --> 00:30:26,299
miss time this

00:30:30,020 --> 00:30:36,009
[Music]

00:30:37,440 --> 00:30:51,510
there we go make that and then if we do

00:30:47,910 --> 00:30:53,550
that now we have four because I didn't

00:30:51,510 --> 00:30:57,800
it didn't exhaust it now if I were to do

00:30:53,550 --> 00:31:01,350
this again if I were to run this again

00:30:57,800 --> 00:31:04,080
nothing happens right because it's

00:31:01,350 --> 00:31:06,720
exhausted and in fact if I then want to

00:31:04,080 --> 00:31:10,310
let's fake this I'm going to do this one

00:31:06,720 --> 00:31:18,510
last thing I'm gonna call next on it

00:31:10,310 --> 00:31:21,110
next six probably won't work what

00:31:18,510 --> 00:31:21,110
happens now

00:31:22,340 --> 00:31:26,610
right so for those of you know yes

00:31:24,780 --> 00:31:28,080
you've got to stop iteration thing it's

00:31:26,610 --> 00:31:30,960
only when you call next you're good to

00:31:28,080 --> 00:31:34,230
see that so in any case this is a little

00:31:30,960 --> 00:31:36,960
bit beyond says what are we gonna do but

00:31:34,230 --> 00:31:38,100
the slides are there and I will post

00:31:36,960 --> 00:31:40,050
them and you can look at the Jupiter

00:31:38,100 --> 00:31:42,920
notebook and you can contact me and

00:31:40,050 --> 00:31:43,480
thank you very much for your time

00:31:42,920 --> 00:31:46,860
[Music]

00:31:43,480 --> 00:31:47,390
[Applause]

00:31:46,860 --> 00:31:51,179
you

00:31:47,390 --> 00:31:51,179

YouTube URL: https://www.youtube.com/watch?v=kXd1sIbdM8w


