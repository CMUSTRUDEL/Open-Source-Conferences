Title: Yenny Cheung - Washing away code smells
Publication date: 2018-08-22
Playlist: EuroPython 2018
Description: 
	Washing away code smells
[EuroPython 2018 - Talk - 2018-07-25 - Kilsyth]
[Edinburgh, UK]

By Yenny Cheung

Does your code smell? Have a weird fragrance? It turns out code smells are a real thing and an amazing conceptualization of suboptimal design. This talk helps you identify code smells in Python. It also shows you how to wash them away by the technique of refactoring. You will learn the art of writing Pythonic, clean and maintainable code.

Code smells refer to the symptoms of problematic code design. Identifying different types of code smells is the first step to successful refactoring. I will talk through some classic examples:


Unnecessary long and complex code
Using mutable data structures
Uncommunicative naming
Coupled code


Knowing what to refactor, I will share a few learnings that lead to good quality code:


The boy scout rule: always leave the code cleaner than you found it
Pythonic data structures: Enum, Namedtuple
The art of naming
DRY and the separation of concerns principle


I will also share tips on using refactoring at your company, which includes convincing your product manager, looking out for code smells during code reviews, and employing automatic tools.

The speaker has previously presented on Talk Python To Me Podcast: https://talkpython.fm/episodes/show/150/technical-lessons-learned-from-pythonic-refactoring, and at PyCon.DE: https://www.youtube.com/watch?v=Yq9-b2JKUyU.



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2018.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:03,890 --> 00:00:08,580
thank you for coming to the top so I'm

00:00:06,600 --> 00:00:12,480
Jenny and today I'm gonna talk to you

00:00:08,580 --> 00:00:14,190
about washing away coat smells so this

00:00:12,480 --> 00:00:16,890
is a nicer picture of me in real life

00:00:14,190 --> 00:00:18,840
and I'm originally from Hong Kong I'm a

00:00:16,890 --> 00:00:20,609
software engineer at Yelp on the

00:00:18,840 --> 00:00:23,279
business level team in Hamburg Germany

00:00:20,609 --> 00:00:25,859
where we're scaling advertising tools

00:00:23,279 --> 00:00:28,710
and also doing reporting solutions for

00:00:25,859 --> 00:00:31,619
our biggest customers I was previously a

00:00:28,710 --> 00:00:34,500
speaker at PyCon de Paris Vienna and

00:00:31,619 --> 00:00:36,000
also the talk pipe icon podcast the

00:00:34,500 --> 00:00:37,649
reason why I want to mention this is

00:00:36,000 --> 00:00:39,809
because I learned a lot from these of

00:00:37,649 --> 00:00:41,460
these kind of experiences so I just want

00:00:39,809 --> 00:00:43,500
to give credits for the people I talked

00:00:41,460 --> 00:00:44,850
to the organizers and also a lot of

00:00:43,500 --> 00:00:47,149
things that I learned through the

00:00:44,850 --> 00:00:51,719
experience of presenting to at these

00:00:47,149 --> 00:00:53,910
occasions so yeah a little bit more

00:00:51,719 --> 00:00:56,190
about my company our mission is really

00:00:53,910 --> 00:00:59,160
simple we want to connect people with

00:00:56,190 --> 00:01:01,530
great local businesses so you're in this

00:00:59,160 --> 00:01:03,120
beautiful city of Edinburgh and one of

00:01:01,530 --> 00:01:05,189
the really important question you ask

00:01:03,120 --> 00:01:07,500
yourself is where do we get dinner right

00:01:05,189 --> 00:01:10,470
so Yelp help you find exactly that

00:01:07,500 --> 00:01:14,189
through people's reviews photos videos

00:01:10,470 --> 00:01:16,560
and also their opinions which one you

00:01:14,189 --> 00:01:19,049
should go to and that's one of the thing

00:01:16,560 --> 00:01:22,080
that I'm thinking about as well and this

00:01:19,049 --> 00:01:23,790
is probably what our homepage looks like

00:01:22,080 --> 00:01:25,439
here so there is a search and you can

00:01:23,790 --> 00:01:30,600
just put down the category that you want

00:01:25,439 --> 00:01:33,210
to search for so pretty easy and some

00:01:30,600 --> 00:01:35,970
fun facts about our company so yonkers

00:01:33,210 --> 00:01:38,280
have written over 100 55 millions

00:01:35,970 --> 00:01:40,049
reviews there are a lot of users as you

00:01:38,280 --> 00:01:42,840
can see a lot of monthly unique visitors

00:01:40,049 --> 00:01:45,899
and our engineering team is growing very

00:01:42,840 --> 00:01:49,049
fast we have over 500 developers now

00:01:45,899 --> 00:01:51,180
over the the offices of San Francisco of

00:01:49,049 --> 00:01:54,420
London and also of Hamburg where I'm

00:01:51,180 --> 00:01:56,729
working and we have over 300 services

00:01:54,420 --> 00:01:59,549
and our model is young main has over

00:01:56,729 --> 00:02:01,710
three million lines of code and why am i

00:01:59,549 --> 00:02:03,360
bringing this up to all of you it's

00:02:01,710 --> 00:02:05,520
because when you have so many people

00:02:03,360 --> 00:02:07,380
working on the same code space it's

00:02:05,520 --> 00:02:08,910
actually really important that we keep a

00:02:07,380 --> 00:02:10,950
standard of what kind of code we're

00:02:08,910 --> 00:02:12,239
checking in to production and that's why

00:02:10,950 --> 00:02:12,760
I want to share with you this little

00:02:12,239 --> 00:02:14,890
message

00:02:12,760 --> 00:02:17,170
that I'm I learned basically from my

00:02:14,890 --> 00:02:21,069
time at Yelp here and hopefully you'll

00:02:17,170 --> 00:02:23,230
like it so that leads us to our agenda

00:02:21,069 --> 00:02:25,510
we're gonna talk about what coat smells

00:02:23,230 --> 00:02:27,220
are why is that something that we should

00:02:25,510 --> 00:02:29,140
spend hyman why should we care about

00:02:27,220 --> 00:02:31,480
this why should we spend our engineer

00:02:29,140 --> 00:02:34,480
your effort into clearing out these coat

00:02:31,480 --> 00:02:36,610
smells and how we can use the technique

00:02:34,480 --> 00:02:38,709
of refactoring to wash away these coat

00:02:36,610 --> 00:02:40,959
smells and also if your thought about

00:02:38,709 --> 00:02:42,579
the message that I'm bringing to you how

00:02:40,959 --> 00:02:47,049
you can bring refactoring and this

00:02:42,579 --> 00:02:51,579
technique to your company so let's get

00:02:47,049 --> 00:02:53,650
started what our coat smells a cold

00:02:51,579 --> 00:02:55,959
smell is a service indication that

00:02:53,650 --> 00:02:58,659
usually corresponds to a deeper problem

00:02:55,959 --> 00:03:01,239
in the in the system so one thing to

00:02:58,659 --> 00:03:03,730
know is the service indication here so

00:03:01,239 --> 00:03:05,560
sometimes you can have a coat smell but

00:03:03,730 --> 00:03:07,510
maybe there's nothing wrong with it if

00:03:05,560 --> 00:03:09,549
you look deeper into the coat if you do

00:03:07,510 --> 00:03:12,010
for some investigation maybe that's what

00:03:09,549 --> 00:03:14,139
it takes to complete the problem right

00:03:12,010 --> 00:03:16,389
so this is the surface in occasion so I

00:03:14,139 --> 00:03:17,769
want to bring forward a metaphor here

00:03:16,389 --> 00:03:19,269
it's like eating cheese right

00:03:17,769 --> 00:03:21,370
sometimes you smell really really

00:03:19,269 --> 00:03:23,319
pungent cheese and you think there's a

00:03:21,370 --> 00:03:24,730
problem with this but then when you eat

00:03:23,319 --> 00:03:26,889
it oh it's actually fine it's good

00:03:24,730 --> 00:03:32,799
cheese so that's something like coat

00:03:26,889 --> 00:03:34,959
smells so why do we care about this so

00:03:32,799 --> 00:03:38,019
the tech lead for Twitter's engineering

00:03:34,959 --> 00:03:41,650
effective groups once said let 1,000

00:03:38,019 --> 00:03:42,760
flowers boom and then rip 999 of them

00:03:41,650 --> 00:03:45,730
out by the roots

00:03:42,760 --> 00:03:48,760
so what do we mean by that I think

00:03:45,730 --> 00:03:51,160
that's a metaphor for your developers

00:03:48,760 --> 00:03:53,109
have a lot of ways to do things and yeah

00:03:51,160 --> 00:03:54,970
of course everybody can try out you know

00:03:53,109 --> 00:03:56,799
their creativity we can try out things

00:03:54,970 --> 00:03:58,959
and see if it works but then gradually

00:03:56,799 --> 00:04:01,329
through experiments we realized that

00:03:58,959 --> 00:04:02,889
some of them don't so that's the time

00:04:01,329 --> 00:04:06,549
when we want to rip them out from your

00:04:02,889 --> 00:04:08,349
codebase and this is why we should do

00:04:06,549 --> 00:04:10,720
that first of all we just leave it

00:04:08,349 --> 00:04:12,729
unchecked it builds up tag debt so what

00:04:10,720 --> 00:04:15,159
that means it's not like if we

00:04:12,729 --> 00:04:17,650
procrastinate and not solve this problem

00:04:15,159 --> 00:04:19,449
in this project it's gonna go away it's

00:04:17,650 --> 00:04:21,370
actually gonna gradually build up and

00:04:19,449 --> 00:04:23,380
comes back to you in the next project

00:04:21,370 --> 00:04:25,180
which is actually exactly what is

00:04:23,380 --> 00:04:28,030
happening to me right now but

00:04:25,180 --> 00:04:30,250
so there's a problem and also it's not

00:04:28,030 --> 00:04:32,259
like if you design the code like say I'm

00:04:30,250 --> 00:04:34,240
very good at designing code I do it

00:04:32,259 --> 00:04:34,930
right the first time and then it's gonna

00:04:34,240 --> 00:04:37,750
go away

00:04:34,930 --> 00:04:40,210
so code actually gradually rots as time

00:04:37,750 --> 00:04:42,250
goes by so one example that I can give

00:04:40,210 --> 00:04:44,500
you is say you have a code base in

00:04:42,250 --> 00:04:47,169
Python 2.7 you can create everything

00:04:44,500 --> 00:04:49,000
that off the standard of the time but

00:04:47,169 --> 00:04:50,680
then over time your code rots and now we

00:04:49,000 --> 00:04:52,419
have to migrate to Python 3 because

00:04:50,680 --> 00:04:54,400
there are new standards there are news

00:04:52,419 --> 00:04:56,620
experiments that people do that make

00:04:54,400 --> 00:04:59,530
things better so here we don't want to

00:04:56,620 --> 00:05:02,500
let your coat rot and there is also a

00:04:59,530 --> 00:05:05,320
class of saying that talks about why do

00:05:02,500 --> 00:05:07,300
we need to uphold that kind of quality

00:05:05,320 --> 00:05:09,550
in code when you know one day we'll

00:05:07,300 --> 00:05:11,830
throw the code away because technology

00:05:09,550 --> 00:05:13,990
moves so fast and we're building so many

00:05:11,830 --> 00:05:15,910
products so many new products we might

00:05:13,990 --> 00:05:17,590
have to get rid of the old products so

00:05:15,910 --> 00:05:19,660
why do I have to maintain the standard

00:05:17,590 --> 00:05:22,660
actually this is a very strong argument

00:05:19,660 --> 00:05:26,080
on why we have to spend time doing this

00:05:22,660 --> 00:05:28,240
it's because only with good code can you

00:05:26,080 --> 00:05:31,780
identify what to throw away immediately

00:05:28,240 --> 00:05:33,669
so I can give you an example I'm sure in

00:05:31,780 --> 00:05:36,400
your company there is this one file

00:05:33,669 --> 00:05:38,169
there's the admin code that's 4,000

00:05:36,400 --> 00:05:40,840
lines long nobody know what it where

00:05:38,169 --> 00:05:42,070
does and you know that's not great

00:05:40,840 --> 00:05:43,720
because when you have to throw away

00:05:42,070 --> 00:05:46,330
functionalities that that you want you

00:05:43,720 --> 00:05:48,909
don't want this is the problem here you

00:05:46,330 --> 00:05:50,979
don't want your code to be like CSS so

00:05:48,909 --> 00:05:52,479
you have like a long CSS file you want

00:05:50,979 --> 00:05:54,340
to take out one line and suddenly your

00:05:52,479 --> 00:05:55,750
page breaks and you don't know why this

00:05:54,340 --> 00:05:58,870
is not what you want your code to be

00:05:55,750 --> 00:06:00,669
like and at the same time I also want to

00:05:58,870 --> 00:06:03,220
bring for it that it decreases

00:06:00,669 --> 00:06:06,400
productivity so I definitely have that

00:06:03,220 --> 00:06:08,409
experience before I'm working on legacy

00:06:06,400 --> 00:06:09,940
code well in my dry run I keep on saying

00:06:08,409 --> 00:06:13,539
legendary coats I have to be very

00:06:09,940 --> 00:06:15,310
careful here legacy code um and yeah I

00:06:13,539 --> 00:06:17,050
thought I figured it out this one day

00:06:15,310 --> 00:06:19,300
okay I know what's happening I'll even

00:06:17,050 --> 00:06:22,270
try to write down you know how it

00:06:19,300 --> 00:06:24,940
inherits ten hierarchy in the Python

00:06:22,270 --> 00:06:27,039
code and then the next day I sleep and I

00:06:24,940 --> 00:06:29,530
come back to work and then what is this

00:06:27,039 --> 00:06:31,539
so imagine that times five because your

00:06:29,530 --> 00:06:33,219
whole team is trying it's struggling and

00:06:31,539 --> 00:06:35,210
doing the same thing so that really

00:06:33,219 --> 00:06:37,310
weighs our productivity here

00:06:35,210 --> 00:06:40,039
and there's one story that I want to

00:06:37,310 --> 00:06:41,930
share with you briefly so in New York

00:06:40,039 --> 00:06:44,000
City there is an area with a lot of

00:06:41,930 --> 00:06:46,100
primes and you know the city is very

00:06:44,000 --> 00:06:48,410
dirty and there are a lot of drug

00:06:46,100 --> 00:06:50,870
problems homeless people and then they

00:06:48,410 --> 00:06:52,910
actually sent in some psychologists to

00:06:50,870 --> 00:06:55,160
check you know what is the origin of the

00:06:52,910 --> 00:06:56,600
problem of why is it so dirty you know

00:06:55,160 --> 00:06:59,990
why there are so many problems and

00:06:56,600 --> 00:07:03,229
actually it all originated from a few

00:06:59,990 --> 00:07:06,199
broken windows can you imagine so if you

00:07:03,229 --> 00:07:09,020
leave this broken windows or you know

00:07:06,199 --> 00:07:10,849
and here analogic layer your code smell

00:07:09,020 --> 00:07:12,770
here you're giving other people a

00:07:10,849 --> 00:07:14,419
message that you can just do whatever to

00:07:12,770 --> 00:07:16,699
the code you can check any code that

00:07:14,419 --> 00:07:18,590
it's not enough quality you're checking

00:07:16,699 --> 00:07:20,479
in code that is not up to the standard

00:07:18,590 --> 00:07:23,150
so you don't want your code to be like

00:07:20,479 --> 00:07:25,400
this and at the same time I also think

00:07:23,150 --> 00:07:28,669
it's very important for developer

00:07:25,400 --> 00:07:30,830
happiness and why is that so a show of

00:07:28,669 --> 00:07:37,280
hands who here just really likes working

00:07:30,830 --> 00:07:41,060
on legacy code how can I say it's not

00:07:37,280 --> 00:07:43,250
the majority sure yeah so you get the

00:07:41,060 --> 00:07:45,260
idea maybe that's also important for us

00:07:43,250 --> 00:07:47,389
to retain people if you know your day to

00:07:45,260 --> 00:07:49,610
day work is just cranking out what your

00:07:47,389 --> 00:07:52,490
Python code of you know ten levels of

00:07:49,610 --> 00:07:55,610
inheritance means yeah so probably we

00:07:52,490 --> 00:07:57,260
don't want that um so we have a

00:07:55,610 --> 00:08:01,699
technique of refactoring that can

00:07:57,260 --> 00:08:03,289
actually come to our rescue so one thing

00:08:01,699 --> 00:08:05,240
to bear in mind throughout the talk it's

00:08:03,289 --> 00:08:07,400
about changing the design of your code

00:08:05,240 --> 00:08:08,840
but not the functionality so the end

00:08:07,400 --> 00:08:11,720
result of what is being produced

00:08:08,840 --> 00:08:16,789
shouldn't be shouldn't be altered during

00:08:11,720 --> 00:08:19,190
the process of refactoring so here let's

00:08:16,789 --> 00:08:21,259
go through a small example to develop

00:08:19,190 --> 00:08:23,810
our code notes to see if we can identify

00:08:21,259 --> 00:08:25,550
some of these code smells here so I'll

00:08:23,810 --> 00:08:27,979
give you one second to look through this

00:08:25,550 --> 00:08:34,070
I'm not brave enough to do live coding

00:08:27,979 --> 00:08:36,620
but this is the best I can give here so

00:08:34,070 --> 00:08:39,770
this is a fairly simple program that get

00:08:36,620 --> 00:08:43,310
us the cheese we want based on our mood

00:08:39,770 --> 00:08:44,930
hunger and money so there are a few

00:08:43,310 --> 00:08:47,420
problems here this is supposed to be a

00:08:44,930 --> 00:08:48,250
fairly simple function but it's quite

00:08:47,420 --> 00:08:49,900
low no

00:08:48,250 --> 00:08:51,730
let's see what kind of problems we have

00:08:49,900 --> 00:09:00,340
here can anyone in the audience already

00:08:51,730 --> 00:09:03,250
see if there is any problems yeah that's

00:09:00,340 --> 00:09:04,540
that's one of it it's missing time oh

00:09:03,250 --> 00:09:08,680
that's an interesting one we'll talk

00:09:04,540 --> 00:09:19,390
about that in a second multiple return

00:09:08,680 --> 00:09:21,100
points yeah that's a good point

00:09:19,390 --> 00:09:22,780
so let's organize that a little bit I

00:09:21,100 --> 00:09:23,860
think you you basically hit all the

00:09:22,780 --> 00:09:27,010
points here already

00:09:23,860 --> 00:09:29,500
right here so first of all the naming is

00:09:27,010 --> 00:09:31,180
a little problematic here so moods

00:09:29,500 --> 00:09:33,310
bigger than three what does that even

00:09:31,180 --> 00:09:36,190
mean does that mean you're ecstatic does

00:09:33,310 --> 00:09:38,110
that mean you're a sad angry there is no

00:09:36,190 --> 00:09:40,090
way to tell so if it's not for the

00:09:38,110 --> 00:09:44,080
comment we actually don't know what

00:09:40,090 --> 00:09:46,690
we're meeting here and we're using

00:09:44,080 --> 00:09:48,250
comments here as a deodorant to cover up

00:09:46,690 --> 00:09:50,110
where our clothes smell right

00:09:48,250 --> 00:09:52,030
so the problem itself is we didn't name

00:09:50,110 --> 00:09:54,010
things correctly and that's why you need

00:09:52,030 --> 00:09:56,050
to write a comment to kind of explain

00:09:54,010 --> 00:10:00,430
where your code is supposed to do but we

00:09:56,050 --> 00:10:02,380
don't actually need that doing and as

00:10:00,430 --> 00:10:05,140
you pointed out here we have some dead

00:10:02,380 --> 00:10:06,730
code that never got executed so for a

00:10:05,140 --> 00:10:08,680
simple program like this it's pretty

00:10:06,730 --> 00:10:11,320
easy to spot out that this never gets

00:10:08,680 --> 00:10:13,300
executed before say like the program

00:10:11,320 --> 00:10:15,460
that I was dealing with maybe it's much

00:10:13,300 --> 00:10:16,960
harder to see what is being run and what

00:10:15,460 --> 00:10:18,940
it's not especially when you're not

00:10:16,960 --> 00:10:24,370
familiar with what the code is supposed

00:10:18,940 --> 00:10:26,500
to do and duplicate code which we can

00:10:24,370 --> 00:10:30,610
also extract out out of the if-else

00:10:26,500 --> 00:10:33,610
conditions and also conditional

00:10:30,610 --> 00:10:35,410
complexity right for a simple program

00:10:33,610 --> 00:10:38,320
like this we're a nested it for three

00:10:35,410 --> 00:10:39,730
levels which is probably the maximum we

00:10:38,320 --> 00:10:41,020
should have like if you have more than

00:10:39,730 --> 00:10:42,820
three levels you really should think

00:10:41,020 --> 00:10:43,270
about if there is another way to do

00:10:42,820 --> 00:10:46,780
things

00:10:43,270 --> 00:10:49,570
oh yeah let's do a simple refactoring

00:10:46,780 --> 00:10:51,940
here so magic and oh wow something

00:10:49,570 --> 00:10:53,560
better in real life it rarely happens

00:10:51,940 --> 00:10:55,300
that's this way you know actually does

00:10:53,560 --> 00:10:57,640
it take some effort to do that but yeah

00:10:55,300 --> 00:10:59,740
let's point out the things that we have

00:10:57,640 --> 00:11:00,660
improved here first of all just what I

00:10:59,740 --> 00:11:02,759
mentioned there's an

00:11:00,660 --> 00:11:04,889
stock string that tells you what the

00:11:02,759 --> 00:11:08,579
function does that's usually helpful in

00:11:04,889 --> 00:11:10,500
most of the cases also we changed the

00:11:08,579 --> 00:11:15,720
mood bigger than 32 is happier so now

00:11:10,500 --> 00:11:17,430
you know it's actually happy and we have

00:11:15,720 --> 00:11:19,920
introduced something called that guard

00:11:17,430 --> 00:11:22,500
Klaus is here to get rid of the

00:11:19,920 --> 00:11:24,959
complexity so one thing to know is like

00:11:22,500 --> 00:11:26,459
the top four are the cases where is not

00:11:24,959 --> 00:11:28,199
supposed to happen and the last one is

00:11:26,459 --> 00:11:31,379
the fifty fault case that you want to

00:11:28,199 --> 00:11:35,839
return so if I have money and I'm hungry

00:11:31,379 --> 00:11:35,839
and I'm happy I'll return blue cheese

00:11:36,199 --> 00:11:43,500
and also bonus this one is also Pepe

00:11:40,500 --> 00:11:45,209
compliant for people who like Pepe yeah

00:11:43,500 --> 00:11:46,529
personally I don't recommend you to go

00:11:45,209 --> 00:11:48,509
buck your colleagues and just be like oh

00:11:46,529 --> 00:11:50,699
you're missing a space there or missing

00:11:48,509 --> 00:11:52,709
an indentation there actually automatic

00:11:50,699 --> 00:11:54,149
tools that you can use that but I think

00:11:52,709 --> 00:11:56,310
it does bring value to your company

00:11:54,149 --> 00:11:58,769
because since we're working with more

00:11:56,310 --> 00:12:01,379
than 500 developers it's good to have a

00:11:58,769 --> 00:12:03,029
style guide of how you write code it

00:12:01,379 --> 00:12:05,759
just makes things easier to read for

00:12:03,029 --> 00:12:09,740
everyone and also it avoids get merge

00:12:05,759 --> 00:12:12,689
conflicts so that's the practical point

00:12:09,740 --> 00:12:15,029
so yeah we have taken a look at a simple

00:12:12,689 --> 00:12:17,639
exercise so now we're gonna dive into

00:12:15,029 --> 00:12:20,759
some of the points that I want to

00:12:17,639 --> 00:12:23,610
mention for refactoring so just a quick

00:12:20,759 --> 00:12:26,610
recap a recap of what we've done here

00:12:23,610 --> 00:12:28,430
for the refactoring first of all we

00:12:26,610 --> 00:12:31,860
named things right

00:12:28,430 --> 00:12:36,449
same for the comments point we have

00:12:31,860 --> 00:12:40,259
removed dead code and we have tried out

00:12:36,449 --> 00:12:42,899
the duplicated code and also we have

00:12:40,259 --> 00:12:48,930
reduced the conditional into our classes

00:12:42,899 --> 00:12:52,649
so I can briefly briefly categorize

00:12:48,930 --> 00:12:54,329
these into categories and these are

00:12:52,649 --> 00:12:56,639
probably the lower hanging fruits that

00:12:54,329 --> 00:12:58,170
you can get basically once you start

00:12:56,639 --> 00:13:01,139
refactoring there are definitely much

00:12:58,170 --> 00:13:03,870
more ways for you to do that but you

00:13:01,139 --> 00:13:05,490
know we can also investigate into that

00:13:03,870 --> 00:13:07,589
later these are these are the things

00:13:05,490 --> 00:13:11,459
that I think is easier to do and has the

00:13:07,589 --> 00:13:13,630
most immediate effects so name it right

00:13:11,459 --> 00:13:16,060
um naming is Ashley

00:13:13,630 --> 00:13:19,960
the hardest problem in programming do

00:13:16,060 --> 00:13:22,480
you know which three it is yeah naming

00:13:19,960 --> 00:13:25,150
is my own cache invalidation then women

00:13:22,480 --> 00:13:27,370
huh 30 okay there we go three three of

00:13:25,150 --> 00:13:29,320
them so I'm happy to talk to you about

00:13:27,370 --> 00:13:31,840
one of it which is naming things right

00:13:29,320 --> 00:13:35,530
so it's a cure for uncommunicative

00:13:31,840 --> 00:13:38,110
naming Python itself it's dynamically

00:13:35,530 --> 00:13:40,780
typed so since you don't have the typing

00:13:38,110 --> 00:13:42,190
information we want to name things very

00:13:40,780 --> 00:13:44,740
clear so that other people know exactly

00:13:42,190 --> 00:13:47,020
what's going on here of course I would

00:13:44,740 --> 00:13:49,060
also recommend pushing for type

00:13:47,020 --> 00:13:50,770
annotation that can that is one thing

00:13:49,060 --> 00:13:53,830
that will help but naming is also very

00:13:50,770 --> 00:13:55,780
important for Python and apart from the

00:13:53,830 --> 00:13:58,180
variable naming that we have mentioned

00:13:55,780 --> 00:13:59,980
there is also function and module naming

00:13:58,180 --> 00:14:02,530
and module naming is probably more

00:13:59,980 --> 00:14:04,840
specific to Python so you probably don't

00:14:02,530 --> 00:14:06,790
want to do something like from Yelp

00:14:04,840 --> 00:14:09,250
thought business thought this import

00:14:06,790 --> 00:14:10,720
bits info you know like something like

00:14:09,250 --> 00:14:13,030
this that doesn't give people a clear

00:14:10,720 --> 00:14:16,660
sense of what you're trying to do and

00:14:13,030 --> 00:14:18,550
that's just asking for bugs and at the

00:14:16,660 --> 00:14:19,720
same time keyword arguments that's part

00:14:18,550 --> 00:14:22,240
of the Pepe as well

00:14:19,720 --> 00:14:24,640
that increases clarity so if you have it

00:14:22,240 --> 00:14:26,080
in the code that you're using then you

00:14:24,640 --> 00:14:28,690
don't have to go back to the original

00:14:26,080 --> 00:14:31,180
function to check actually this one

00:14:28,690 --> 00:14:32,620
corresponds to hood or is it hunger so

00:14:31,180 --> 00:14:35,950
it just saves you some time and

00:14:32,620 --> 00:14:38,140
increases clarity at the same time I

00:14:35,950 --> 00:14:39,820
would want to introduce replacing magic

00:14:38,140 --> 00:14:42,250
strings and numbers within use I think

00:14:39,820 --> 00:14:45,040
that's a very good practice so here

00:14:42,250 --> 00:14:47,410
there is a short how-to that we can go

00:14:45,040 --> 00:14:50,080
through together so one thing that is

00:14:47,410 --> 00:14:52,450
good about it so even like it's happier

00:14:50,080 --> 00:14:54,790
it's not as explicit as this one now I

00:14:52,450 --> 00:14:57,130
can specify your mood to be a sugar and

00:14:54,790 --> 00:14:59,590
you can be content you can be a pathetic

00:14:57,130 --> 00:15:02,350
or melancholic as specific as you want

00:14:59,590 --> 00:15:07,230
and you can specify it right in the a

00:15:02,350 --> 00:15:07,230
new class of mood and if you're a fan of

00:15:08,190 --> 00:15:13,060
being explicit over implicit so I think

00:15:11,290 --> 00:15:15,310
this is something that you'll like and

00:15:13,060 --> 00:15:17,230
at the same time it also have pretty

00:15:15,310 --> 00:15:21,610
good properties like it supports

00:15:17,230 --> 00:15:23,020
iterable and also it's hashable

00:15:21,610 --> 00:15:25,600
that means you can use in a dictionary

00:15:23,020 --> 00:15:26,710
you can use it as a key so it can be a

00:15:25,600 --> 00:15:29,860
substitute

00:15:26,710 --> 00:15:32,320
for just a pure string or an integer and

00:15:29,860 --> 00:15:34,660
that's really great because consider the

00:15:32,320 --> 00:15:37,030
situation where this string is just used

00:15:34,660 --> 00:15:39,130
in like 15 places in your code and

00:15:37,030 --> 00:15:40,510
suddenly your product manager wants you

00:15:39,130 --> 00:15:43,270
to change it into something else which

00:15:40,510 --> 00:15:44,740
happens very often naturally and then

00:15:43,270 --> 00:15:45,910
you just have to change one place in the

00:15:44,740 --> 00:15:48,880
code and you don't have to worry about

00:15:45,910 --> 00:15:51,460
typos because there's just one place so

00:15:48,880 --> 00:15:54,880
that's something that is considered a

00:15:51,460 --> 00:15:57,100
good practice at the same time I want to

00:15:54,880 --> 00:15:59,020
push for also getting organized so it

00:15:57,100 --> 00:16:01,330
sounds pretty simple but it's actually

00:15:59,020 --> 00:16:04,330
probably one of the hardest thing to do

00:16:01,330 --> 00:16:07,210
it's a cure for lung functions classes

00:16:04,330 --> 00:16:09,190
and parameters so one thing that this

00:16:07,210 --> 00:16:11,950
wants to uphold is the single

00:16:09,190 --> 00:16:14,290
responsibility principle so your

00:16:11,950 --> 00:16:16,540
function or your class is only supposed

00:16:14,290 --> 00:16:18,520
to do one thing and how do you know that

00:16:16,540 --> 00:16:20,110
actually when you're after you write the

00:16:18,520 --> 00:16:22,120
function and when you try to name the

00:16:20,110 --> 00:16:24,610
function if you find yourself having a

00:16:22,120 --> 00:16:26,020
very hard time naming that function it's

00:16:24,610 --> 00:16:27,580
probably because you're not following

00:16:26,020 --> 00:16:29,950
the single responsibility principle

00:16:27,580 --> 00:16:32,350
because it should be fairly easy to name

00:16:29,950 --> 00:16:34,300
it's only doing one thing so in this

00:16:32,350 --> 00:16:36,160
case you might have to extract some of

00:16:34,300 --> 00:16:38,290
that into other functions or break it

00:16:36,160 --> 00:16:40,360
down there is also decompose

00:16:38,290 --> 00:16:44,020
conditionals which is one of the getting

00:16:40,360 --> 00:16:45,940
organized method and also dry which is

00:16:44,020 --> 00:16:47,650
don't repeat yourself I also didn't know

00:16:45,940 --> 00:16:49,870
that I to look it up I think in the

00:16:47,650 --> 00:16:52,900
beginning of when I learn about this dry

00:16:49,870 --> 00:16:55,780
ashlee means don't repeat yourself so

00:16:52,900 --> 00:16:58,060
yeah one of the example that I want to

00:16:55,780 --> 00:17:00,190
give here is fixing long parameter lists

00:16:58,060 --> 00:17:02,830
I think this I've encountered when I'm

00:17:00,190 --> 00:17:05,320
doing programming as well and so here

00:17:02,830 --> 00:17:07,600
there is a simple example of identified

00:17:05,320 --> 00:17:09,070
cheese and you know identify cheese it's

00:17:07,600 --> 00:17:11,620
a hard task so like we need to pass in

00:17:09,070 --> 00:17:13,270
the country smell touch City Year taste

00:17:11,620 --> 00:17:16,510
you know a lot of information for the

00:17:13,270 --> 00:17:18,430
program to decide what use it is but you

00:17:16,510 --> 00:17:19,930
know gradually this list grows right and

00:17:18,430 --> 00:17:22,090
it gets out of hand you know you have

00:17:19,930 --> 00:17:25,870
what 20 parameters that you want to pass

00:17:22,090 --> 00:17:28,180
in and that's kind of like an eyesore so

00:17:25,870 --> 00:17:30,010
what we can do is we create name tuples

00:17:28,180 --> 00:17:32,560
that can organize these things together

00:17:30,010 --> 00:17:34,540
and you can even add type annotation

00:17:32,560 --> 00:17:36,790
that kind of groups them into a more

00:17:34,540 --> 00:17:37,740
orderly fashion and hence you can only

00:17:36,790 --> 00:17:39,690
pass in

00:17:37,740 --> 00:17:41,550
you end up passing in only two things of

00:17:39,690 --> 00:17:44,040
cheese production info and she's

00:17:41,550 --> 00:17:46,500
attributes so and there's also like a

00:17:44,040 --> 00:17:54,059
it's a way to document what exactly do

00:17:46,500 --> 00:17:58,770
you want to pass in yeah it's two paws

00:17:54,059 --> 00:18:01,740
to the rescue and actually going from

00:17:58,770 --> 00:18:04,050
this point why do I put name tuples

00:18:01,740 --> 00:18:05,520
instead of other data structures so

00:18:04,050 --> 00:18:08,429
that's also one thing that we need to

00:18:05,520 --> 00:18:09,480
think about when we're designing so I

00:18:08,429 --> 00:18:12,540
would want to go through some examples

00:18:09,480 --> 00:18:15,000
to talk through why dictionaries versus

00:18:12,540 --> 00:18:17,340
named two balls and also lists versus

00:18:15,000 --> 00:18:19,650
sets but you know like you use these

00:18:17,340 --> 00:18:21,480
data structure based on your need but in

00:18:19,650 --> 00:18:26,040
this case maybe one thing is better than

00:18:21,480 --> 00:18:27,750
the other and we'll see why so here's

00:18:26,040 --> 00:18:30,420
how it's like using dictionaries but

00:18:27,750 --> 00:18:33,150
this is the wrong case or a bad case of

00:18:30,420 --> 00:18:36,530
using a dictionary so just one second

00:18:33,150 --> 00:18:36,530
for you to digest this

00:18:39,880 --> 00:18:45,400
so we're just doing some cheese math

00:18:42,880 --> 00:18:47,440
manipulation I guess and we're passing

00:18:45,400 --> 00:18:49,720
in a dictionary as a default value so

00:18:47,440 --> 00:18:52,539
I'm housing and cheese counts that

00:18:49,720 --> 00:18:54,400
consists of three and blue and we're

00:18:52,539 --> 00:18:58,750
just doing something simple like cheese

00:18:54,400 --> 00:19:01,510
counts blue incrementing by one what is

00:18:58,750 --> 00:19:03,490
happening here that I scary is so what

00:19:01,510 --> 00:19:06,549
Python is actually doing is just saving

00:19:03,490 --> 00:19:08,590
that into like a default variable and in

00:19:06,549 --> 00:19:10,929
the beginning you have what you expected

00:19:08,590 --> 00:19:13,630
right Bri and blue both are equal to

00:19:10,929 --> 00:19:17,260
zero but after you call it once what

00:19:13,630 --> 00:19:19,630
happens this actually gets mutated and

00:19:17,260 --> 00:19:21,250
your default got changed so depending on

00:19:19,630 --> 00:19:23,169
how many times you're calling your

00:19:21,250 --> 00:19:24,669
function your defaults is different and

00:19:23,169 --> 00:19:26,440
that's pretty scary

00:19:24,669 --> 00:19:28,750
and imagine how can you debug this in

00:19:26,440 --> 00:19:31,150
our model with code base I cannot

00:19:28,750 --> 00:19:34,360
imagine so this is one thing that we

00:19:31,150 --> 00:19:37,690
actively try to avoid putting mutable

00:19:34,360 --> 00:19:40,600
data structure as a default that's not

00:19:37,690 --> 00:19:42,340
recommended and here is where name

00:19:40,600 --> 00:19:45,250
tuples can come as a rescue because

00:19:42,340 --> 00:19:47,409
they're immutable so the same thing we

00:19:45,250 --> 00:19:49,720
can actually pass in cheese counts as a

00:19:47,409 --> 00:19:53,500
name tuple and here is how you can

00:19:49,720 --> 00:19:56,650
specify a default for name tuples so

00:19:53,500 --> 00:19:59,710
here if you're just specifying 3 equals

00:19:56,650 --> 00:20:02,049
to this the default knows that blue is

00:19:59,710 --> 00:20:04,000
equals 0 and breathe equals 2 if you

00:20:02,049 --> 00:20:07,030
don't put anything at all then you get

00:20:04,000 --> 00:20:08,559
blue equals 0 and 3 equals 0 and what

00:20:07,030 --> 00:20:11,860
happens if we put this in the previous

00:20:08,559 --> 00:20:14,860
function of some cheese it's gonna shout

00:20:11,860 --> 00:20:17,590
at you it's gonna not let you mutate the

00:20:14,860 --> 00:20:19,900
default so that's better because you

00:20:17,590 --> 00:20:21,309
realize the mistake before it goes to

00:20:19,900 --> 00:20:25,299
production and I don't know how far I

00:20:21,309 --> 00:20:29,500
can take before someone finds out so

00:20:25,299 --> 00:20:33,159
there's that and also between using

00:20:29,500 --> 00:20:35,230
lists and sets here is a function that

00:20:33,159 --> 00:20:37,450
select my favorite cheese from the

00:20:35,230 --> 00:20:39,309
catalogue so we're passing in two things

00:20:37,450 --> 00:20:41,110
that she's catalogue and also my

00:20:39,309 --> 00:20:43,240
favorite cheese and you're just

00:20:41,110 --> 00:20:45,669
basically doing a loop to see if this

00:20:43,240 --> 00:20:48,700
thing is in the my favorite cheese list

00:20:45,669 --> 00:20:51,059
and we will return picking the favorite

00:20:48,700 --> 00:20:53,010
cheese from the cheese catalogue and

00:20:51,059 --> 00:20:55,140
yeah everything looks

00:20:53,010 --> 00:20:57,510
we're passing in blue and cheddar in the

00:20:55,140 --> 00:20:59,340
cheese catalog and my favorite cheese is

00:20:57,510 --> 00:21:02,610
truffle brie like because of course and

00:20:59,340 --> 00:21:04,770
also blue cheese right and in the end

00:21:02,610 --> 00:21:06,360
you return blue cheese because that's

00:21:04,770 --> 00:21:08,970
the only thing in the catalogue it's

00:21:06,360 --> 00:21:11,309
supposed to do why does and that's good

00:21:08,970 --> 00:21:13,049
but except it's a very long function for

00:21:11,309 --> 00:21:17,040
for this because we can do something

00:21:13,049 --> 00:21:21,630
actually simpler than that and that's

00:21:17,040 --> 00:21:23,490
where it's that's come in right so right

00:21:21,630 --> 00:21:25,440
now how many lines do we use one two

00:21:23,490 --> 00:21:27,750
three oh five okay five lines for a

00:21:25,440 --> 00:21:30,990
one-liner like this and you can

00:21:27,750 --> 00:21:34,070
basically just use intersection to come

00:21:30,990 --> 00:21:37,500
up with the common set between your

00:21:34,070 --> 00:21:39,570
cheese catalog and my favorite cheese so

00:21:37,500 --> 00:21:42,360
it also returns the same result except

00:21:39,570 --> 00:21:44,669
now it's a one-liner which is more of a

00:21:42,360 --> 00:21:46,110
pythonic way of doing things but of

00:21:44,669 --> 00:21:48,809
course there are some drawbacks between

00:21:46,110 --> 00:21:51,450
sets and lists maybe sometimes sets it

00:21:48,809 --> 00:21:53,280
has performance or memory implications

00:21:51,450 --> 00:21:54,960
so that's also something that we need to

00:21:53,280 --> 00:21:57,570
consider when we're refactoring

00:21:54,960 --> 00:21:59,760
but you know if for like a general use

00:21:57,570 --> 00:22:05,880
case the side comparisons are pretty

00:21:59,760 --> 00:22:07,890
awesome no it is and yeah another

00:22:05,880 --> 00:22:09,510
suggestion is to check out the standard

00:22:07,890 --> 00:22:11,460
library there are actually a lot of gems

00:22:09,510 --> 00:22:13,620
in there that I feel like I personally

00:22:11,460 --> 00:22:17,010
also don't spend enough time on it

00:22:13,620 --> 00:22:18,480
especially in tools and collections if

00:22:17,010 --> 00:22:20,280
you make something a knitter tool there

00:22:18,480 --> 00:22:22,590
are a lot of it's horrible you can

00:22:20,280 --> 00:22:26,250
actually make use of a lot of toolings

00:22:22,590 --> 00:22:28,200
there on it and also with different

00:22:26,250 --> 00:22:30,299
collections like sets and you know other

00:22:28,200 --> 00:22:35,460
data structures so I think those are

00:22:30,299 --> 00:22:36,960
pretty handy and yeah testing so we're

00:22:35,460 --> 00:22:40,410
missing some tests so let's talk about

00:22:36,960 --> 00:22:41,850
testing a pretty short one but it's

00:22:40,410 --> 00:22:44,100
pretty necessary in the refactoring

00:22:41,850 --> 00:22:46,410
process because if you don't write them

00:22:44,100 --> 00:22:48,299
maybe it's too late already so the first

00:22:46,410 --> 00:22:51,600
part I would recommend writing

00:22:48,299 --> 00:22:53,880
integration or end-to-end tests for the

00:22:51,600 --> 00:22:55,500
code to be refactored and that ties back

00:22:53,880 --> 00:22:57,780
to the one of the slides we talked about

00:22:55,500 --> 00:22:59,760
right refactoring is changing the design

00:22:57,780 --> 00:23:03,150
of your code and not really the end

00:22:59,760 --> 00:23:05,190
result or the functionality of your

00:23:03,150 --> 00:23:07,050
program so supposedly if

00:23:05,190 --> 00:23:09,360
right and integration test they should

00:23:07,050 --> 00:23:11,340
pass throughout the whole process of

00:23:09,360 --> 00:23:13,890
your refactoring and that's also your

00:23:11,340 --> 00:23:15,570
compass to make sure that you're doing

00:23:13,890 --> 00:23:17,820
the right thing during refactoring and

00:23:15,570 --> 00:23:19,950
not deviate too far away from what the

00:23:17,820 --> 00:23:22,050
program is supposed to do so it's kind

00:23:19,950 --> 00:23:23,760
of like a check for myself and of course

00:23:22,050 --> 00:23:26,370
you're having fun doing other three

00:23:23,760 --> 00:23:28,770
factoring and after that we can write

00:23:26,370 --> 00:23:30,840
some unit tests for the refactored code

00:23:28,770 --> 00:23:31,620
to make sure that the code is actually

00:23:30,840 --> 00:23:34,140
correct

00:23:31,620 --> 00:23:35,790
so this kind of helps you gear you

00:23:34,140 --> 00:23:38,310
towards the right direction in the

00:23:35,790 --> 00:23:40,560
refactoring process and I think we

00:23:38,310 --> 00:23:42,690
shouldn't be lazy with the test it's a

00:23:40,560 --> 00:23:45,200
very important part of the refactoring

00:23:42,690 --> 00:23:48,510
process so cool

00:23:45,200 --> 00:23:50,880
and so if you think that you're so sold

00:23:48,510 --> 00:23:53,310
about the refactoring idea like tackling

00:23:50,880 --> 00:23:55,980
code smells how do we sell this to the

00:23:53,310 --> 00:23:57,630
company how do we talk to your product

00:23:55,980 --> 00:23:59,820
manager about this how do we convince

00:23:57,630 --> 00:24:05,780
other people to also jump on the same

00:23:59,820 --> 00:24:09,300
boat the secret weapon is code reviews

00:24:05,780 --> 00:24:11,310
so I remember when I first joined Yelp I

00:24:09,300 --> 00:24:12,990
don't know who taught me but one of the

00:24:11,310 --> 00:24:15,300
people who told me I don't like a Boy

00:24:12,990 --> 00:24:17,190
Scout rule is you should leave the code

00:24:15,300 --> 00:24:20,310
cleaner than you found it and I think

00:24:17,190 --> 00:24:23,130
now it's very valuable advice every time

00:24:20,310 --> 00:24:25,620
I'm trying to push some code even if I'm

00:24:23,130 --> 00:24:28,110
not trying to change and reinvent the

00:24:25,620 --> 00:24:29,640
wheel or try to refactor to a very deep

00:24:28,110 --> 00:24:31,620
extent I try to make it a little bit

00:24:29,640 --> 00:24:33,420
better say I see a variable that it's

00:24:31,620 --> 00:24:35,790
not named correctly or maybe I can do a

00:24:33,420 --> 00:24:37,920
little change I see a test as not well

00:24:35,790 --> 00:24:40,260
covering the code then I add a node has

00:24:37,920 --> 00:24:43,890
to make sure all cases are covered so

00:24:40,260 --> 00:24:45,720
things like that it's a culture that we

00:24:43,890 --> 00:24:47,940
need to cultivate in the company to make

00:24:45,720 --> 00:24:50,640
this happen so one thing that we can do

00:24:47,940 --> 00:24:52,350
is also to encourage refactoring when

00:24:50,640 --> 00:24:54,390
people are adding code and especially

00:24:52,350 --> 00:24:56,000
fixing bugs right because you know

00:24:54,390 --> 00:24:58,280
something happened to the code and

00:24:56,000 --> 00:25:00,570
refactoring can probably help with that

00:24:58,280 --> 00:25:03,540
there are also other things like you can

00:25:00,570 --> 00:25:05,280
write code review guidelines to tell the

00:25:03,540 --> 00:25:07,800
code reviewers what to look for

00:25:05,280 --> 00:25:10,230
especially when doing code reviews so

00:25:07,800 --> 00:25:14,160
these are also pretty good advice I've

00:25:10,230 --> 00:25:17,130
heard and I think the harder part is

00:25:14,160 --> 00:25:17,830
coming with the product manager because

00:25:17,130 --> 00:25:19,690
they

00:25:17,830 --> 00:25:21,369
we have usually they have a different

00:25:19,690 --> 00:25:23,259
agenda than engineers because they

00:25:21,369 --> 00:25:25,360
really want the product to ship path and

00:25:23,259 --> 00:25:27,759
they care a little bit less on the

00:25:25,360 --> 00:25:31,690
engineering integrity or the engineering

00:25:27,759 --> 00:25:34,090
quality one way I would go about that is

00:25:31,690 --> 00:25:36,580
to break down the tasks and really take

00:25:34,090 --> 00:25:38,499
maintenance into account so from my

00:25:36,580 --> 00:25:41,499
personal experience as I told you all

00:25:38,499 --> 00:25:44,409
right I'm working on the ledge know like

00:25:41,499 --> 00:25:46,119
legacy a good case and yeah I have the

00:25:44,409 --> 00:25:49,389
hardest time trying to understand what

00:25:46,119 --> 00:25:51,070
is happening there and afterwards I have

00:25:49,389 --> 00:25:53,049
to spend a lot of time to maintain this

00:25:51,070 --> 00:25:54,789
codebase and it actually takes a lot of

00:25:53,049 --> 00:25:57,070
time that you know in retrospect maybe

00:25:54,789 --> 00:25:58,659
if we have rewritten some of it if we

00:25:57,070 --> 00:26:00,730
have refactored more of it we can

00:25:58,659 --> 00:26:03,850
actually save a lot of time in squashing

00:26:00,730 --> 00:26:06,639
the bugs afterwards and in the

00:26:03,850 --> 00:26:08,889
maintenance part of it so you know a

00:26:06,639 --> 00:26:11,169
rule of thumb that I tell myself is you

00:26:08,889 --> 00:26:12,639
know four weeks for with refactoring

00:26:11,169 --> 00:26:14,350
with the maintenance effort and

00:26:12,639 --> 00:26:15,850
otherwise six weeks because we have to

00:26:14,350 --> 00:26:18,429
account for the times that we need to

00:26:15,850 --> 00:26:21,970
get ourselves into the you know not so

00:26:18,429 --> 00:26:24,549
well done encoder again yeah if all

00:26:21,970 --> 00:26:25,960
things fail maybe one thing we can do is

00:26:24,549 --> 00:26:28,659
to abstract out the implementation

00:26:25,960 --> 00:26:30,429
detail and as a good engineer you can

00:26:28,659 --> 00:26:32,679
adjust your estimates to include

00:26:30,429 --> 00:26:35,409
refactoring and also the test and just

00:26:32,679 --> 00:26:42,460
say this feature takes X but that's the

00:26:35,409 --> 00:26:46,320
last resort yeah so so far we've gone

00:26:42,460 --> 00:26:48,580
through mostly the manual work of doing

00:26:46,320 --> 00:26:52,119
refactoring but there are some things

00:26:48,580 --> 00:26:54,639
that can be automated not all of them so

00:26:52,119 --> 00:26:57,070
I think we have some over open-source

00:26:54,639 --> 00:26:59,590
tools or things that we use one of it is

00:26:57,070 --> 00:27:01,779
called undead so that's based on high

00:26:59,590 --> 00:27:03,399
parsing it can do massive find and

00:27:01,779 --> 00:27:05,080
replace so that's something that's

00:27:03,399 --> 00:27:07,029
helpful because if you want to replicate

00:27:05,080 --> 00:27:08,830
a function or definitely account class

00:27:07,029 --> 00:27:12,489
deprecated a package you can do a

00:27:08,830 --> 00:27:14,830
massive fine and replace and on the same

00:27:12,489 --> 00:27:17,769
note there we also use a debt tracker

00:27:14,830 --> 00:27:19,809
called branch that and for some of the

00:27:17,769 --> 00:27:21,970
code reviews we actually include that

00:27:19,809 --> 00:27:24,159
into the code review itself so that

00:27:21,970 --> 00:27:25,960
gives people more pressure by both the

00:27:24,159 --> 00:27:29,440
reviewer and also person who writes the

00:27:25,960 --> 00:27:30,780
code how much how much tech that they're

00:27:29,440 --> 00:27:33,150
introducing and

00:27:30,780 --> 00:27:35,850
new coat that they're deploying some of

00:27:33,150 --> 00:27:40,440
the example metrics that this tool looks

00:27:35,850 --> 00:27:41,460
at including how much no QA text you put

00:27:40,440 --> 00:27:44,610
in in the code

00:27:41,460 --> 00:27:47,160
how many deprecated functions are using

00:27:44,610 --> 00:27:49,320
or also how many lines are you adding to

00:27:47,160 --> 00:27:52,080
the monolith domain because we want to

00:27:49,320 --> 00:27:53,730
move out of it eventually yeah so these

00:27:52,080 --> 00:27:56,010
aren't some things that can give

00:27:53,730 --> 00:27:58,170
yourself more pressure to really deal

00:27:56,010 --> 00:28:01,170
with it now instead of procrastinating

00:27:58,170 --> 00:28:05,370
it to later or another project that

00:28:01,170 --> 00:28:07,110
you're working on yeah some of the

00:28:05,370 --> 00:28:09,540
takeaways just to wrap it up we talked

00:28:07,110 --> 00:28:11,490
about code smells why is it important

00:28:09,540 --> 00:28:13,740
how do we use the technique of

00:28:11,490 --> 00:28:15,540
refactoring to get rid of them and also

00:28:13,740 --> 00:28:17,820
some of the tips to bring that to your

00:28:15,540 --> 00:28:22,320
company if you're sold about the idea of

00:28:17,820 --> 00:28:24,360
refactoring and thoughts now most

00:28:22,320 --> 00:28:26,760
important of all if you want to work for

00:28:24,360 --> 00:28:28,560
a company that cares about coke ecology

00:28:26,760 --> 00:28:30,840
that lets you spend time to do

00:28:28,560 --> 00:28:32,700
refactoring work we're hiring we have

00:28:30,840 --> 00:28:35,460
offices in Hamburg that's where I work

00:28:32,700 --> 00:28:36,960
London and also San Francisco so we also

00:28:35,460 --> 00:28:38,940
have a booth down there if you're

00:28:36,960 --> 00:28:43,370
interested in want to talk to us we're

00:28:38,940 --> 00:28:43,370
there yeah thank you

00:28:49,629 --> 00:29:02,869
for the questions let me remind you

00:28:52,210 --> 00:29:03,889
actual questions so two has one thank

00:29:02,869 --> 00:29:06,470
you for a talk

00:29:03,889 --> 00:29:10,340
so one of the things that wanders me

00:29:06,470 --> 00:29:14,330
from sometime is because many of these

00:29:10,340 --> 00:29:18,830
tips looks like you know them they look

00:29:14,330 --> 00:29:23,779
like a great idea but though are people

00:29:18,830 --> 00:29:27,109
likely to like just make up them by

00:29:23,779 --> 00:29:28,820
themselves or do they rather need to

00:29:27,109 --> 00:29:32,059
learn them do you have an experience

00:29:28,820 --> 00:29:36,649
like did you see junior developers for

00:29:32,059 --> 00:29:40,039
example looking at such bad code and do

00:29:36,649 --> 00:29:43,159
they know what to do with it or rather

00:29:40,039 --> 00:29:45,529
oh so you mean how to acquire the skill

00:29:43,159 --> 00:29:47,659
of practicing your code notes to start

00:29:45,529 --> 00:29:51,799
out what is good in a code and what is

00:29:47,659 --> 00:29:54,440
bad yeah so um I'm I'm just wondering

00:29:51,799 --> 00:29:59,379
what are your thoughts about it and it's

00:29:54,440 --> 00:30:04,159
like people need to learn it or rather

00:29:59,379 --> 00:30:05,989
they just see what's bad well I think so

00:30:04,159 --> 00:30:08,210
there is the first date keeper which is

00:30:05,989 --> 00:30:10,519
the code review right where I guess more

00:30:08,210 --> 00:30:13,009
experienced engineers tend to tell newer

00:30:10,519 --> 00:30:14,869
or less experienced engineers what they

00:30:13,009 --> 00:30:17,090
have learned throughout their times but

00:30:14,869 --> 00:30:19,789
I'm a proponent of you know you crash

00:30:17,090 --> 00:30:21,440
and you burn and you learn so you know

00:30:19,789 --> 00:30:27,369
next time you'll know because you see

00:30:21,440 --> 00:30:27,369
what didn't work any more questions

00:30:29,789 --> 00:30:39,099
why didn't you sit closer okay so my

00:30:37,330 --> 00:30:40,629
question is related to say that you

00:30:39,099 --> 00:30:42,340
should live your code in a better state

00:30:40,629 --> 00:30:44,440
than you found it

00:30:42,340 --> 00:30:46,659
some could argue that goes against

00:30:44,440 --> 00:30:49,059
having small reviews because now the

00:30:46,659 --> 00:30:51,669
reviewer has to see ten pages of the

00:30:49,059 --> 00:30:54,759
factor instead of just actual value

00:30:51,669 --> 00:30:57,519
added so to say so well just practice I

00:30:54,759 --> 00:30:59,289
usually use is I I see the problem and

00:30:57,519 --> 00:31:01,059
yet I usually tackle in another coat

00:30:59,289 --> 00:31:03,999
review just so because it's a different

00:31:01,059 --> 00:31:06,309
context but I should I would recommend

00:31:03,999 --> 00:31:11,279
following it up immediately otherwise it

00:31:06,309 --> 00:31:16,269
was lost in the JIRA trigger forest

00:31:11,279 --> 00:31:17,950
jungle or yeah or sometimes if you

00:31:16,269 --> 00:31:21,509
identify these to be good new hire

00:31:17,950 --> 00:31:21,509
tickets that can also be the case

00:31:21,809 --> 00:31:27,869
anything else

00:31:24,599 --> 00:31:27,869
Thank You Yanni

00:31:27,980 --> 00:31:31,099
[Applause]

00:31:35,600 --> 00:31:37,660

YouTube URL: https://www.youtube.com/watch?v=-8ljgLLlyZw


