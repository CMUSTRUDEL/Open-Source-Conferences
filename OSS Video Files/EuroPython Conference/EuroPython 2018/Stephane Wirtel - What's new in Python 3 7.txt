Title: Stephane Wirtel - What's new in Python 3 7
Publication date: 2018-08-22
Playlist: EuroPython 2018
Description: 
	What's new in Python 3.7
[EuroPython 2018 - Talk - 2018-07-25 - Smarkets]
[Edinburgh, UK]

By Stephane Wirtel

Scheduled for release in mid-June before the conference, Python 3.7 is shaping up to be a feature-packed release! 
This talk will cover all the new features of Python 3.7, including the Data Classes and the Context Variables for the asynchronous programming with asyncio.



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2018.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:06,160 --> 00:00:11,950
if I in fact it just a joke it's not

00:00:08,440 --> 00:00:13,780
about Python just Java okay now just I'm

00:00:11,950 --> 00:00:16,120
little bit stressed and I like to play

00:00:13,780 --> 00:00:20,380
with the jokes in French that's better

00:00:16,120 --> 00:00:22,300
in English that will be harder okay you

00:00:20,380 --> 00:00:25,840
we are here just about a new feature

00:00:22,300 --> 00:00:30,939
about Python 3.7 okay just that not

00:00:25,840 --> 00:00:33,430
about 2.7 and not about 2.8 okay we are

00:00:30,939 --> 00:00:37,330
sure that we will use the last version

00:00:33,430 --> 00:00:39,670
of Python what can you say Oh an empty

00:00:37,330 --> 00:00:41,800
side sorry about me

00:00:39,670 --> 00:00:44,860
I'm just Tiffin I'm a small contributor

00:00:41,800 --> 00:00:47,080
of Python of the Python ecosystem and I

00:00:44,860 --> 00:00:49,360
am a small contributor of Europe Python

00:00:47,080 --> 00:00:53,560
because I have the badge with organizer

00:00:49,360 --> 00:00:55,540
thank you to be here and I'm a fellow

00:00:53,560 --> 00:00:57,910
member of the PSF member of your Python

00:00:55,540 --> 00:01:00,180
Society and you can see there's a blah

00:00:57,910 --> 00:01:07,240
blah blah blah if you know a movie with

00:01:00,180 --> 00:01:11,229
Dracula that's fine so with Python 3.7

00:01:07,240 --> 00:01:12,700
we have some pep to respect of course

00:01:11,229 --> 00:01:15,399
because it's a contract with the new

00:01:12,700 --> 00:01:18,670
version of Python the first one is just

00:01:15,399 --> 00:01:20,170
the old song break point I'm going to

00:01:18,670 --> 00:01:22,899
explain that because sometimes when you

00:01:20,170 --> 00:01:26,259
give a technical training to some newby

00:01:22,899 --> 00:01:29,590
newby sorry they want to know how to

00:01:26,259 --> 00:01:32,079
debug with Python usually they try to

00:01:29,590 --> 00:01:34,359
with PyCharm or maybe we've at home or

00:01:32,079 --> 00:01:37,359
whatever in this case we have a new

00:01:34,359 --> 00:01:39,789
built-in function for that I'm going to

00:01:37,359 --> 00:01:41,950
explain about the data classes and don't

00:01:39,789 --> 00:01:45,069
want to go into details about this

00:01:41,950 --> 00:01:49,659
project but I'm going to to give you an

00:01:45,069 --> 00:01:52,479
overview many how to define a get out

00:01:49,659 --> 00:01:56,049
here and the dear method for a new model

00:01:52,479 --> 00:01:58,090
and we will see some other stuff and the

00:01:56,049 --> 00:02:01,270
most important is maybe the break point

00:01:58,090 --> 00:02:03,009
for the first point so the break point

00:02:01,270 --> 00:02:05,139
when you want to start the burglar

00:02:03,009 --> 00:02:08,259
software usually you have this kind of

00:02:05,139 --> 00:02:10,750
color I know that the code will give

00:02:08,259 --> 00:02:14,680
this kind of error just divided by zero

00:02:10,750 --> 00:02:16,690
is just forbidden okay if allow if I

00:02:14,680 --> 00:02:18,700
would like to debug it I've

00:02:16,690 --> 00:02:21,930
two solutions firstly I'm going to use

00:02:18,700 --> 00:02:25,660
the print function yeah why not

00:02:21,930 --> 00:02:31,480
yes and we could use the debugger

00:02:25,660 --> 00:02:35,050
keyword from JavaScript no no no no no

00:02:31,480 --> 00:02:37,480
I'm not with JavaScript just with Python

00:02:35,050 --> 00:02:41,770
and we fight on we can have a lot of

00:02:37,480 --> 00:02:44,890
debuggers okay we have PDB I'm going to

00:02:41,770 --> 00:02:48,960
start with the first one PDB PUD be I

00:02:44,890 --> 00:02:48,960
pee pee pee pee pee pee

00:02:49,480 --> 00:02:54,490
okay do you understand when you start to

00:02:52,330 --> 00:02:56,950
learn Python there is a problem which

00:02:54,490 --> 00:02:59,680
debugger can I uh can I use in this case

00:02:56,950 --> 00:03:02,470
that's really figured for that there is

00:02:59,680 --> 00:03:06,220
a new key a new Bolton function just

00:03:02,470 --> 00:03:09,610
know not PD is a trace but this one or

00:03:06,220 --> 00:03:11,830
not this one just break plant okay so

00:03:09,610 --> 00:03:15,040
when you will start to use the debugger

00:03:11,830 --> 00:03:19,350
when you start when you start python for

00:03:15,040 --> 00:03:23,440
the kids you have this one PDB okay

00:03:19,350 --> 00:03:25,600
PDB is really ugly but functional we

00:03:23,440 --> 00:03:28,420
don't have any problem with this one we

00:03:25,600 --> 00:03:30,940
can find a bug really hitting it with

00:03:28,420 --> 00:03:33,310
this one okay but if you like to have an

00:03:30,940 --> 00:03:36,850
impure console and uncurse interface you

00:03:33,310 --> 00:03:41,020
can use PUD be okay with the new cue

00:03:36,850 --> 00:03:44,190
world new function breakpoint you can

00:03:41,020 --> 00:03:48,810
define your debugger on the common line

00:03:44,190 --> 00:03:52,900
just after firstly with the breakpoint

00:03:48,810 --> 00:03:56,650
you have some X you have an environment

00:03:52,900 --> 00:03:59,950
variable sorry from English but where

00:03:56,650 --> 00:04:02,620
you can specify your debugger on the

00:03:59,950 --> 00:04:04,930
command line the first one if you don't

00:04:02,620 --> 00:04:09,000
if you don't specify something it just

00:04:04,930 --> 00:04:14,230
PDB okay we have an example just here la

00:04:09,000 --> 00:04:18,820
okay if you want to specify PUD B you

00:04:14,230 --> 00:04:21,609
could use this command line okay and if

00:04:18,820 --> 00:04:24,820
you want to use ipython with your

00:04:21,609 --> 00:04:27,520
project because you like ipython and and

00:04:24,820 --> 00:04:29,470
the magic stuff I of ipython you can use

00:04:27,520 --> 00:04:31,750
that okay

00:04:29,470 --> 00:04:34,300
so there is an interesting thing with

00:04:31,750 --> 00:04:36,970
the break point with this new function

00:04:34,300 --> 00:04:38,350
if you don't specify the break point on

00:04:36,970 --> 00:04:40,900
the command line

00:04:38,350 --> 00:04:43,930
just with break point is equal to zero

00:04:40,900 --> 00:04:45,940
we will disable everything all the begin

00:04:43,930 --> 00:04:49,000
session okay

00:04:45,940 --> 00:04:53,320
in this case you could exist execute

00:04:49,000 --> 00:04:54,400
your script without a debugger yes I'm

00:04:53,320 --> 00:04:59,830
not sure okay

00:04:54,400 --> 00:05:02,440
so and of course sometimes you can use

00:04:59,830 --> 00:05:06,010
the print function if you prefer because

00:05:02,440 --> 00:05:08,950
we like the print fiction okay so it's

00:05:06,010 --> 00:05:12,490
just the first new feature of python 3.7

00:05:08,950 --> 00:05:14,580
not really funny but i like to use it

00:05:12,490 --> 00:05:18,220
just with the newbies because sometimes

00:05:14,580 --> 00:05:22,050
I'm sorry sir but which which a bigger

00:05:18,220 --> 00:05:25,420
can we use this one okay next point

00:05:22,050 --> 00:05:30,340
about the data classes you know that

00:05:25,420 --> 00:05:35,290
that a class is great yes you are a

00:05:30,340 --> 00:05:39,700
developer of course so the data classes

00:05:35,290 --> 00:05:42,850
what is the tackle Isis a data class we

00:05:39,700 --> 00:05:46,870
wants to represent a user or just a

00:05:42,850 --> 00:05:51,640
person or an account usually we can use

00:05:46,870 --> 00:05:54,430
the name table we could use the table or

00:05:51,640 --> 00:05:57,730
just dictionary or maybe just a class

00:05:54,430 --> 00:06:00,340
okay but sometimes that's really

00:05:57,730 --> 00:06:03,040
difficult to explain to a new person why

00:06:00,340 --> 00:06:05,830
I need to have a very big class in my

00:06:03,040 --> 00:06:08,169
example I'm going to explain I'm going

00:06:05,830 --> 00:06:10,030
to give this example just with a pepper

00:06:08,169 --> 00:06:12,940
I'm going to represent the person with

00:06:10,030 --> 00:06:15,880
this table like welcome is my first name

00:06:12,940 --> 00:06:19,660
and last name in my age sorry not

00:06:15,880 --> 00:06:23,110
younger and the problem with at Apple we

00:06:19,660 --> 00:06:26,980
don't know if this index is the first

00:06:23,110 --> 00:06:29,500
name the last name or the age okay we

00:06:26,980 --> 00:06:32,200
could use the dict okay which are just

00:06:29,500 --> 00:06:36,520
of just the form we use object first

00:06:32,200 --> 00:06:39,590
name last name and age we can use for

00:06:36,520 --> 00:06:43,100
that yet another attribute but the name

00:06:39,590 --> 00:06:45,760
with with the the dictionary but for me

00:06:43,100 --> 00:06:51,530
I prefer to use just the dot notation

00:06:45,760 --> 00:06:55,190
person first name okay we could use the

00:06:51,530 --> 00:06:58,669
connect collection name triple the same

00:06:55,190 --> 00:07:02,180
thing we here we can use it we have a

00:06:58,669 --> 00:07:04,370
tuple we can define the parameter and we

00:07:02,180 --> 00:07:06,169
have the dot notation okay

00:07:04,370 --> 00:07:09,139
I have a mix between the temple and

00:07:06,169 --> 00:07:11,600
maybe a class but it's not very perfect

00:07:09,139 --> 00:07:15,290
because in this case we don't specify

00:07:11,600 --> 00:07:17,479
the tip of the variable we don't we

00:07:15,290 --> 00:07:20,120
cannot override it there is no default

00:07:17,479 --> 00:07:24,460
values for this one so in this case

00:07:20,120 --> 00:07:30,350
maybe we could use a simple class okay

00:07:24,460 --> 00:07:35,510
there is a Java developer here yes just

00:07:30,350 --> 00:07:38,180
one I'm sorry for you at - okay now that

00:07:35,510 --> 00:07:40,639
when you want to develop one class for

00:07:38,180 --> 00:07:42,979
an object just you have to define the

00:07:40,639 --> 00:07:46,820
properties and the metal decatur the

00:07:42,979 --> 00:07:49,550
saturn and the rest okay and we can have

00:07:46,820 --> 00:07:55,070
this kind of code that's very boring and

00:07:49,550 --> 00:07:58,820
really verbose and for that python can

00:07:55,070 --> 00:08:01,340
be can be a better choice for that okay

00:07:58,820 --> 00:08:03,260
so in this case we have the person with

00:08:01,340 --> 00:08:05,990
the constructor I'm going to give some

00:08:03,260 --> 00:08:08,770
parameters I'm going since I'm going to

00:08:05,990 --> 00:08:12,860
give this parameter to the instance

00:08:08,770 --> 00:08:16,880
I'll have representation with a string

00:08:12,860 --> 00:08:19,340
just methods for the Equality where I'm

00:08:16,880 --> 00:08:21,710
going to test the first name last name

00:08:19,340 --> 00:08:27,139
and the edge and maybe if I would like

00:08:21,710 --> 00:08:28,430
to make a comparison the LT okay so but

00:08:27,139 --> 00:08:31,190
I would like to replace that with

00:08:28,430 --> 00:08:39,480
another thing just the data classes this

00:08:31,190 --> 00:08:43,740
case before after before

00:08:39,480 --> 00:08:47,570
after for the next Java developer you

00:08:43,740 --> 00:08:47,570
can come we have a lot of jobs for you

00:08:47,930 --> 00:08:53,070
that's really hazy we fightin because in

00:08:51,030 --> 00:08:55,710
fact we don't need to improve the

00:08:53,070 --> 00:08:58,350
interpreter is just a new place a new

00:08:55,710 --> 00:09:00,420
function in the in the standard library

00:08:58,350 --> 00:09:04,010
and from that we will create a new

00:09:00,420 --> 00:09:07,020
function for the kids class okay so

00:09:04,010 --> 00:09:10,320
we've decide with this code and the same

00:09:07,020 --> 00:09:13,500
result but I can define the kind the tip

00:09:10,320 --> 00:09:17,820
of the name or latitude or longitude the

00:09:13,500 --> 00:09:20,610
default value with the name couple with

00:09:17,820 --> 00:09:24,090
pepper we would take I cannot do that

00:09:20,610 --> 00:09:25,370
here in five lines I have the result

00:09:24,090 --> 00:09:28,740
okay

00:09:25,370 --> 00:09:31,650
so of course with the data classes I

00:09:28,740 --> 00:09:33,540
could define a new method or just a new

00:09:31,650 --> 00:09:36,090
property in this case I'm going to

00:09:33,540 --> 00:09:38,640
define the full name my full name with a

00:09:36,090 --> 00:09:42,480
representation and I can use it like a

00:09:38,640 --> 00:09:46,680
normal class okay of course with the

00:09:42,480 --> 00:09:49,440
data classes we can define some we have

00:09:46,680 --> 00:09:52,350
some properties options when we will use

00:09:49,440 --> 00:09:55,170
the decorator for example we have in it

00:09:52,350 --> 00:09:57,510
just here this one will create the init

00:09:55,170 --> 00:09:59,730
function the constructor of the class if

00:09:57,510 --> 00:10:04,680
this one does not exist that will be the

00:09:59,730 --> 00:10:06,720
same for wrap equal order and frozen if

00:10:04,680 --> 00:10:08,550
you know the frozen set you will have

00:10:06,720 --> 00:10:10,380
the same result and fight the frozen

00:10:08,550 --> 00:10:13,740
just for the name table because an

00:10:10,380 --> 00:10:16,380
enterprise just in read-only model small

00:10:13,740 --> 00:10:21,120
example where I'm going to specify

00:10:16,380 --> 00:10:22,920
keyword parameter just here and I'm

00:10:21,120 --> 00:10:26,070
going to have an exception when I try to

00:10:22,920 --> 00:10:27,060
us assign a new value new value to the

00:10:26,070 --> 00:10:30,930
to my edge

00:10:27,060 --> 00:10:34,070
okay and of course with the data classes

00:10:30,930 --> 00:10:37,650
I can try to work with the inheritance I

00:10:34,070 --> 00:10:39,660
can create a person and I can iterate

00:10:37,650 --> 00:10:44,360
from this person in create a new user

00:10:39,660 --> 00:10:45,660
class can we do that with the name table

00:10:44,360 --> 00:10:48,620
now

00:10:45,660 --> 00:10:52,230
we've the table now with the dictionary

00:10:48,620 --> 00:10:53,170
no welcome this new feature is just the

00:10:52,230 --> 00:11:00,050
data class

00:10:53,170 --> 00:11:03,020
okay the next point is just for example

00:11:00,050 --> 00:11:06,260
you are developing a new feature our new

00:11:03,020 --> 00:11:11,270
function and in your source code you

00:11:06,260 --> 00:11:14,660
have some deprecated functions okay with

00:11:11,270 --> 00:11:17,930
this kind of car I'm going to check if I

00:11:14,660 --> 00:11:21,800
have a function in the deprecated list

00:11:17,930 --> 00:11:25,460
this one a function and if my function

00:11:21,800 --> 00:11:28,130
is deprecated I'm going to execute a

00:11:25,460 --> 00:11:31,490
warning at the execution at the right

00:11:28,130 --> 00:11:34,010
time just with that the system when you

00:11:31,490 --> 00:11:37,730
we will load the library and try to

00:11:34,010 --> 00:11:41,410
import this dysfunction we will get just

00:11:37,730 --> 00:11:44,270
a warning a deprecation warning okay

00:11:41,410 --> 00:11:48,830
it's a good reason if you want to clear

00:11:44,270 --> 00:11:52,550
your cut a good tool for that okay so

00:11:48,830 --> 00:11:55,940
for the rest we have the deer function

00:11:52,550 --> 00:12:00,260
this one can just change the list of the

00:11:55,940 --> 00:12:04,460
attributes of a module it just sympathic

00:12:00,260 --> 00:12:11,870
for the developer okay and it's just an

00:12:04,460 --> 00:12:13,580
example okay another thing sorry when

00:12:11,870 --> 00:12:15,940
you are stressed you have to drink a lot

00:12:13,580 --> 00:12:15,940
of water

00:12:17,980 --> 00:12:24,380
who is using the annotation for the type

00:12:20,810 --> 00:12:28,010
I things okay

00:12:24,380 --> 00:12:32,230
we've the current version of Python if

00:12:28,010 --> 00:12:32,230
the example is correct or not

00:12:35,160 --> 00:12:43,960
well now in French no no senior and fat

00:12:41,320 --> 00:12:46,150
in fact no it's not the case because we

00:12:43,960 --> 00:12:49,210
will have a problem here we try to

00:12:46,150 --> 00:12:51,940
define the new the node class and this

00:12:49,210 --> 00:12:54,220
nut class will be used just here when we

00:12:51,940 --> 00:12:56,560
define the kind the type of left and

00:12:54,220 --> 00:12:58,570
right and in this row we have a program

00:12:56,560 --> 00:13:00,550
because the interpreter has not finished

00:12:58,570 --> 00:13:03,850
to read the description of the node

00:13:00,550 --> 00:13:07,240
class for that if we try to execute the

00:13:03,850 --> 00:13:10,630
curl we will get an exception just the

00:13:07,240 --> 00:13:13,390
node does not is not defined yes ok but

00:13:10,630 --> 00:13:15,640
how can I use my node because my

00:13:13,390 --> 00:13:18,970
writings is really useful we can use my

00:13:15,640 --> 00:13:23,410
PI and I can detect a lot of bugs with

00:13:18,970 --> 00:13:29,260
just a static analyzer there's a pet for

00:13:23,410 --> 00:13:34,170
that oh sorry but if you want to solve

00:13:29,260 --> 00:13:40,360
the program just use the string notation

00:13:34,170 --> 00:13:44,560
okay there is a pub this pep is the

00:13:40,360 --> 00:13:48,520
annotation you can implement it from

00:13:44,560 --> 00:13:51,040
future and with this import in port we

00:13:48,520 --> 00:13:53,080
can define left as a node right as a

00:13:51,040 --> 00:13:58,000
node in this case we don't have to

00:13:53,080 --> 00:14:00,100
define a forward reference okay because

00:13:58,000 --> 00:14:03,580
this notation with the string is a

00:14:00,100 --> 00:14:05,650
forward reference there is the this kind

00:14:03,580 --> 00:14:07,470
of stuff with CP switch and the forward

00:14:05,650 --> 00:14:11,770
declaration okay

00:14:07,470 --> 00:14:15,510
so and if we mix the annotation and the

00:14:11,770 --> 00:14:15,510
data classes we can have this result

00:14:15,840 --> 00:14:21,910
just that okay we have an optional nod

00:14:19,810 --> 00:14:24,730
the default value is just none and

00:14:21,910 --> 00:14:32,860
that's the same for the right right

00:14:24,730 --> 00:14:35,260
attribute okay another point who likes

00:14:32,860 --> 00:14:41,200
all of to make some benchmark with

00:14:35,260 --> 00:14:42,259
Python yes scientists here yeah of

00:14:41,200 --> 00:14:44,629
course

00:14:42,259 --> 00:14:46,399
I'm going to present you the master of

00:14:44,629 --> 00:14:47,299
the performance of white on it just here

00:14:46,399 --> 00:14:50,540
Victor

00:14:47,299 --> 00:14:52,579
Ennis fight has found a program with

00:14:50,540 --> 00:14:55,759
Python with the current implementation

00:14:52,579 --> 00:14:58,999
of the time module we have a problem

00:14:55,759 --> 00:15:02,600
because the current time model use the

00:14:58,999 --> 00:15:06,079
fluid system the float type just for the

00:15:02,600 --> 00:15:09,100
representation of the number for when we

00:15:06,079 --> 00:15:11,600
need some seconds on millisecond and

00:15:09,100 --> 00:15:13,910
because we use the float we have a

00:15:11,600 --> 00:15:17,869
limitation this limitation is just for

00:15:13,910 --> 00:15:20,319
104 days after that you will have a

00:15:17,869 --> 00:15:25,220
program with the precision precision

00:15:20,319 --> 00:15:27,679
okay in in this example the first

00:15:25,220 --> 00:15:30,350
example came from Victor it just above

00:15:27,679 --> 00:15:32,389
the benchmark of Python when you call a

00:15:30,350 --> 00:15:36,529
function sometimes this call can take

00:15:32,389 --> 00:15:39,309
less than 100 nanoseconds and for that I

00:15:36,529 --> 00:15:42,169
started to write this new PAP and

00:15:39,309 --> 00:15:47,169
introduce new function where you can you

00:15:42,169 --> 00:15:50,449
can work at the nanosecond level okay

00:15:47,169 --> 00:15:53,899
this example is just with the normal

00:15:50,449 --> 00:15:56,720
monotonic function where we can see the

00:15:53,899 --> 00:16:00,230
float and with the nanosecond

00:15:56,720 --> 00:16:03,350
resolution we have a Python in integer

00:16:00,230 --> 00:16:07,879
and you have all the information about

00:16:03,350 --> 00:16:11,089
that okay so the next point is just

00:16:07,879 --> 00:16:14,199
about the deprecation warning just

00:16:11,089 --> 00:16:18,470
before when we have an exception we can

00:16:14,199 --> 00:16:20,089
raise a deprecation warning there was a

00:16:18,470 --> 00:16:22,629
problem since the last word and not the

00:16:20,089 --> 00:16:25,909
last version but since the version field

00:16:22,629 --> 00:16:28,899
faded too in fact by default the

00:16:25,909 --> 00:16:32,749
brocation warning was hidden by default

00:16:28,899 --> 00:16:36,049
with the new version of item 3.7 we will

00:16:32,749 --> 00:16:41,419
show the deprecation warning in the main

00:16:36,049 --> 00:16:43,699
namespace show that and for the rest for

00:16:41,419 --> 00:16:45,979
the future warning and the pending

00:16:43,699 --> 00:16:52,090
deprecation warning we will show them in

00:16:45,979 --> 00:16:53,350
the test ok just that so

00:16:52,090 --> 00:16:56,899
[Music]

00:16:53,350 --> 00:16:59,660
the next point sorry there is a lot of

00:16:56,899 --> 00:17:03,200
next point sorry that's very difficult

00:16:59,660 --> 00:17:06,319
the pep is very long and I have to read

00:17:03,200 --> 00:17:07,970
a lot of paths and try to make a small

00:17:06,319 --> 00:17:10,100
scene tears of that is very difficult

00:17:07,970 --> 00:17:12,740
for example the context variable is

00:17:10,100 --> 00:17:15,189
really useful for us for the developer

00:17:12,740 --> 00:17:18,949
using the unsecure news and development

00:17:15,189 --> 00:17:21,439
because for example when we use a

00:17:18,949 --> 00:17:24,530
website when we try to develop a website

00:17:21,439 --> 00:17:28,459
with jungle or flask or another

00:17:24,530 --> 00:17:32,510
framework we will use a thread and this

00:17:28,459 --> 00:17:34,610
thread will receive the request okay but

00:17:32,510 --> 00:17:36,820
there is a problem with the synchronous

00:17:34,610 --> 00:17:40,250
environment because we use only one

00:17:36,820 --> 00:17:42,800
thread and we have a lot of asynchronous

00:17:40,250 --> 00:17:46,010
tasks in the same way at the same time

00:17:42,800 --> 00:17:47,780
for that we have a new module the

00:17:46,010 --> 00:17:51,260
context VAR this context var will

00:17:47,780 --> 00:17:53,690
provide the context object and the

00:17:51,260 --> 00:17:56,390
context of our object the context will

00:17:53,690 --> 00:17:58,490
be associated to the OS thread and the

00:17:56,390 --> 00:18:00,920
context var will contain the value of

00:17:58,490 --> 00:18:04,580
the context for the context for the

00:18:00,920 --> 00:18:07,730
current context in this example I create

00:18:04,580 --> 00:18:10,730
just a context bar with a default value

00:18:07,730 --> 00:18:14,630
I'm going to set the value and just read

00:18:10,730 --> 00:18:19,429
before and I'm going to execute the main

00:18:14,630 --> 00:18:23,150
function with a new context okay and if

00:18:19,429 --> 00:18:26,420
I see the result the first first print

00:18:23,150 --> 00:18:30,559
will be 42 the second one will be in

00:18:26,420 --> 00:18:34,340
size one just here we can see that we

00:18:30,559 --> 00:18:39,140
have the original value we can change it

00:18:34,340 --> 00:18:41,900
with set am just here and when we go

00:18:39,140 --> 00:18:45,320
outside of the context of the function

00:18:41,900 --> 00:18:49,600
we will get the first version of the

00:18:45,320 --> 00:18:53,480
value so when okay thank you

00:18:49,600 --> 00:18:55,280
when can we use that maybe when you want

00:18:53,480 --> 00:18:59,030
to develop and I think reduce web

00:18:55,280 --> 00:19:01,669
service okay for example because with

00:18:59,030 --> 00:19:04,669
the asynchronous web service we don't

00:19:01,669 --> 00:19:06,510
use we have a lot we only have one

00:19:04,669 --> 00:19:09,210
thread and not a lot of tread

00:19:06,510 --> 00:19:12,960
and in this case we will define a new

00:19:09,210 --> 00:19:15,809
context bar set just a default value and

00:19:12,960 --> 00:19:22,230
we can use it just with the reference

00:19:15,809 --> 00:19:25,500
current user in this case okay so with

00:19:22,230 --> 00:19:28,380
the context variable you can search the

00:19:25,500 --> 00:19:29,940
lab nothink renew software without any

00:19:28,380 --> 00:19:32,880
problem because you don't have the

00:19:29,940 --> 00:19:36,570
problem with the TLS for the next thing

00:19:32,880 --> 00:19:39,809
it's just about documentation with

00:19:36,570 --> 00:19:42,900
python 3.7 we have of course the

00:19:39,809 --> 00:19:47,490
documentation in English maybe and know

00:19:42,900 --> 00:19:51,900
in French in Japan and in Korean with

00:19:47,490 --> 00:19:55,080
Spanish or Italian if you want to

00:19:51,900 --> 00:19:57,299
contribute Chinese okay you can become

00:19:55,080 --> 00:20:06,240
the new contributor of Chinese for the

00:19:57,299 --> 00:20:09,870
Chinese yeah just that but in fact if we

00:20:06,240 --> 00:20:14,100
follow the PAP of Python 3.7 it's not a

00:20:09,870 --> 00:20:16,620
funny story for you sometimes we we

00:20:14,100 --> 00:20:19,380
develop some new feature without a pap

00:20:16,620 --> 00:20:23,429
is the case with the dictionary for

00:20:19,380 --> 00:20:28,290
example the new dict in Python 2.7 we

00:20:23,429 --> 00:20:33,179
guarantee the insertion order just that

00:20:28,290 --> 00:20:37,200
and the lane motive of Guido did keep

00:20:33,179 --> 00:20:41,429
insertion order yeah good thing in await

00:20:37,200 --> 00:20:44,250
our keywords that was not the case

00:20:41,429 --> 00:20:46,620
before it was a deprecation warning no

00:20:44,250 --> 00:20:49,679
it's a keyword if you want to migrate

00:20:46,620 --> 00:20:51,540
your code to python 3.7 don't forget to

00:20:49,679 --> 00:20:55,740
change the name of your variable or

00:20:51,540 --> 00:20:58,290
function just that hey stop

00:20:55,740 --> 00:21:01,220
you cannot you cannot do that sorry for

00:20:58,290 --> 00:21:06,030
you if you have 1 million lines of code

00:21:01,220 --> 00:21:08,940
that's for you not for me sorry no I'm

00:21:06,030 --> 00:21:11,690
just I am in the same case and we can do

00:21:08,940 --> 00:21:17,970
we cannot do that therefore wait sorry

00:21:11,690 --> 00:21:19,320
so yes with Python 3.7 we have some

00:21:17,970 --> 00:21:25,610
improvements about

00:21:19,320 --> 00:21:27,990
I think you would like to use icing hail

00:21:25,610 --> 00:21:33,600
one two three four

00:21:27,990 --> 00:21:37,680
yes ten yes good we see that we can

00:21:33,600 --> 00:21:40,650
continue to work on a single okay when

00:21:37,680 --> 00:21:44,940
you want to use a sink a o you have to

00:21:40,650 --> 00:21:47,930
define an event loop okay with this

00:21:44,940 --> 00:21:51,570
event loop you will run until the

00:21:47,930 --> 00:21:54,540
croydon is just finished and after that

00:21:51,570 --> 00:21:57,240
you will close the loop since the new

00:21:54,540 --> 00:22:00,770
version of Python 3.7 instead of that

00:21:57,240 --> 00:22:04,020
just that I think yeah you're right

00:22:00,770 --> 00:22:10,800
sorry two years for this function but

00:22:04,020 --> 00:22:13,620
it's two years yeah with I think we have

00:22:10,800 --> 00:22:16,680
some new function create tasks how to

00:22:13,620 --> 00:22:20,070
create a task is just a shortcut to the

00:22:16,680 --> 00:22:22,710
create task of the loop we can start an

00:22:20,070 --> 00:22:25,200
TLS connection for example you are with

00:22:22,710 --> 00:22:27,690
an unsecure connection you can start a

00:22:25,200 --> 00:22:31,590
TLS connection you can get the current

00:22:27,690 --> 00:22:34,380
task you can have all the tasks from the

00:22:31,590 --> 00:22:39,570
loop and if you want if you like to send

00:22:34,380 --> 00:22:42,360
some mail or some files from the web

00:22:39,570 --> 00:22:45,120
server to your customer you can use the

00:22:42,360 --> 00:22:48,530
sake send file this and this function

00:22:45,120 --> 00:22:51,840
will use the kernel Linux in this case

00:22:48,530 --> 00:22:54,980
about the performance we can see that

00:22:51,840 --> 00:22:59,600
the Gator then loop has been completely

00:22:54,980 --> 00:23:05,700
rewritten in C just for the performance

00:22:59,600 --> 00:23:07,920
more more or less at 15 times faster as

00:23:05,700 --> 00:23:10,140
the case for the Gator function the C

00:23:07,920 --> 00:23:14,910
function and the future because future

00:23:10,140 --> 00:23:18,360
has been improved improved we have some

00:23:14,910 --> 00:23:20,100
new function under command line for

00:23:18,360 --> 00:23:23,630
example if you want to know if your in

00:23:20,100 --> 00:23:26,700
poorly just slow and why you can use X

00:23:23,630 --> 00:23:30,590
import tank you will have you will have

00:23:26,700 --> 00:23:30,590
a profiling of your import

00:23:31,380 --> 00:23:41,300
yeah this mucomyst this new parameter

00:23:35,910 --> 00:23:45,330
just if you want to use Python in utf-8

00:23:41,300 --> 00:23:50,070
because I'm in some case on Windows

00:23:45,330 --> 00:23:52,590
Linux Python will use the locale of the

00:23:50,070 --> 00:23:55,320
current system and sometimes we can have

00:23:52,590 --> 00:23:57,630
some problem with this parameter and the

00:23:55,320 --> 00:24:02,910
common line we will first Buyten to use

00:23:57,630 --> 00:24:06,000
it f8 okay another thing if you're a

00:24:02,910 --> 00:24:10,740
developer of Python and if you want to

00:24:06,000 --> 00:24:12,150
have a very big dump of your stack trace

00:24:10,740 --> 00:24:16,260
thank you

00:24:12,150 --> 00:24:19,050
you can use Python X and dev this one

00:24:16,260 --> 00:24:22,350
will will enable the debug model of a

00:24:19,050 --> 00:24:25,500
sink io will use the photon module just

00:24:22,350 --> 00:24:28,679
for the dump and because we like to have

00:24:25,500 --> 00:24:30,450
a very big dump of a crash and install

00:24:28,679 --> 00:24:34,830
some debug hooks for the memory

00:24:30,450 --> 00:24:37,200
allocation so for the rest and after

00:24:34,830 --> 00:24:39,410
that I'm going to finish in five minutes

00:24:37,200 --> 00:24:39,410
maybe

00:24:39,440 --> 00:24:49,340
do you like to load your data from your

00:24:43,320 --> 00:24:54,120
packages we have Becky package resource

00:24:49,340 --> 00:24:57,840
just one good okay there is a new

00:24:54,120 --> 00:25:01,710
function a new new module resources

00:24:57,840 --> 00:25:04,230
resources it just is the same behavior

00:25:01,710 --> 00:25:08,600
of the previous but with the performance

00:25:04,230 --> 00:25:08,600
and without the okay

00:25:08,640 --> 00:25:15,030
in fact just I'm going I would like to

00:25:11,520 --> 00:25:18,750
be clean but pkg a resource like to do a

00:25:15,030 --> 00:25:22,230
lot of useless stuff okay

00:25:18,750 --> 00:25:24,270
we've resources in fact there is a very

00:25:22,230 --> 00:25:27,929
big improvement about the performances

00:25:24,270 --> 00:25:30,240
and know we can read a file from the

00:25:27,929 --> 00:25:33,750
file system a zip file from the network

00:25:30,240 --> 00:25:37,320
or whatever okay a small example I have

00:25:33,750 --> 00:25:40,570
my package I would like to read this

00:25:37,320 --> 00:25:44,890
file message dot e ma a.m.

00:25:40,570 --> 00:25:47,650
with the standard library I could do

00:25:44,890 --> 00:25:53,370
that try to find the directory of the

00:25:47,650 --> 00:25:56,470
project and directory of the data try to

00:25:53,370 --> 00:25:57,220
make the pass for the message and read

00:25:56,470 --> 00:26:00,640
the file

00:25:57,220 --> 00:26:06,490
ok or with the path we pass we can do

00:26:00,640 --> 00:26:09,190
that we've import Lib resources in two

00:26:06,490 --> 00:26:11,500
lines are just one line for the second

00:26:09,190 --> 00:26:15,910
one just for the import but with one

00:26:11,500 --> 00:26:19,740
line you can load the binary file from

00:26:15,910 --> 00:26:22,570
your package from your zip file whatever

00:26:19,740 --> 00:26:24,940
you can do that with a context manager

00:26:22,570 --> 00:26:28,450
if you want to play with the reference

00:26:24,940 --> 00:26:30,820
to the file and if you'll unlike this

00:26:28,450 --> 00:26:31,540
form with the string you can use just

00:26:30,820 --> 00:26:35,100
your module

00:26:31,540 --> 00:26:37,840
import your module and you want to get

00:26:35,100 --> 00:26:41,890
running a file from your mother we can

00:26:37,840 --> 00:26:46,780
do so of course we have many improvement

00:26:41,890 --> 00:26:48,820
and Breakfast in Python 2.7 and Python

00:26:46,780 --> 00:26:55,990
is faster than the last version of

00:26:48,820 --> 00:27:01,540
course conclusion I think that patent

00:26:55,990 --> 00:27:03,600
3.7 is a great advantage does that thank

00:27:01,540 --> 00:27:03,600
you

00:27:09,779 --> 00:27:14,649
do you have any question no yeah it's a

00:27:13,269 --> 00:27:17,039
new question Chris sent out and they

00:27:14,649 --> 00:27:17,039
come here

00:27:17,129 --> 00:27:31,289
no what about visor with how we gotta

00:27:28,989 --> 00:27:31,289
play

00:27:36,309 --> 00:27:45,490
hi thanks for your presentation a

00:27:39,120 --> 00:27:52,950
question when is the case to use an

00:27:45,490 --> 00:27:57,700
image tuple or a data class for example

00:27:52,950 --> 00:28:06,730
are the performance the same if in the

00:27:57,700 --> 00:28:09,820
case of read-only thanks okay in fact we

00:28:06,730 --> 00:28:13,330
don't use usually we don't like to use a

00:28:09,820 --> 00:28:18,280
class and we prefer to use just a table

00:28:13,330 --> 00:28:20,679
because at Apple is just more efficient

00:28:18,280 --> 00:28:22,809
okay but in there is a problem you don't

00:28:20,679 --> 00:28:28,480
have the notation the dot notation you

00:28:22,809 --> 00:28:31,090
cannot know which put in the tuple the

00:28:28,480 --> 00:28:33,039
position correspond which element you

00:28:31,090 --> 00:28:35,559
don't know that but we have the total

00:28:33,039 --> 00:28:37,570
classes you have this result and now if

00:28:35,559 --> 00:28:40,140
you have a problem about the performance

00:28:37,570 --> 00:28:43,150
you can use a slot with the data classes

00:28:40,140 --> 00:28:46,690
just specify underscore underscore slot

00:28:43,150 --> 00:28:47,470
and you give your fields just that no no

00:28:46,690 --> 00:28:50,080
more no less

00:28:47,470 --> 00:28:55,600
and you will get the same result maybe

00:28:50,080 --> 00:29:02,049
that will be slower but you really see

00:28:55,600 --> 00:29:06,520
if it's not resilient okay okay another

00:29:02,049 --> 00:29:11,230
question about Python free or 4.0 no no

00:29:06,520 --> 00:29:15,990
or Java no yeah I confirm it just by the

00:29:11,230 --> 00:29:19,049
Euro Python not your euro Java okay

00:29:15,990 --> 00:29:19,049
thank you

00:29:20,260 --> 00:29:25,459
you

00:29:21,950 --> 00:29:25,459

YouTube URL: https://www.youtube.com/watch?v=uSp0-TkGx3c


