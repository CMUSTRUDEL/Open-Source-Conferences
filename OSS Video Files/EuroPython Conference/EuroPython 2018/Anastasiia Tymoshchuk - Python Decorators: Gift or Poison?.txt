Title: Anastasiia Tymoshchuk - Python Decorators: Gift or Poison?
Publication date: 2018-08-22
Playlist: EuroPython 2018
Description: 
	Python Decorators: Gift or Poison?
[EuroPython 2018 - Talk - 2018-07-25 - Kilsyth]
[Edinburgh, UK]

By Anastasiia Tymoshchuk

Why would you ever need to use decorators in Python? 
Have you ever had the task when you need to use one function in few places and you really wanted to avoid of code duplicating? For example to add some logging into functions or timers, etc. Decorators in Python are super powerful with these tasks, but at the same time they are super complicated, sometimes even magical. When I started learning Python, Decorators were really like a magic: how to use them, how are they working, lots of questions. The goal is to make the things easier and clear to answer a question: to use or not to use Decorators in your project. 
Whatâ€™s in the Talk: 
- Functions nature in Python 
- Magic of a Decorator 
- Basics 
- When to use Decorators 
- Examples 
- Even more Python magic

My slides are here: https://atymo.me/projects/presentations/GiftOrPoison/ 
Code examples: https://github.com/atymoshchuk/python_tutorials



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2018.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:05,750 --> 00:00:10,349
thank you for coming to my talk my name

00:00:08,099 --> 00:00:15,360
is Anastasia Timmy shook I'm working for

00:00:10,349 --> 00:00:17,310
a sovereign company in Berlin you can

00:00:15,360 --> 00:00:20,310
access presentation slides they are

00:00:17,310 --> 00:00:22,560
published online and also called

00:00:20,310 --> 00:00:28,349
snippets if you want to check them later

00:00:22,560 --> 00:00:30,480
or right now while doing that you can

00:00:28,349 --> 00:00:33,210
make a photo and I will tell you a story

00:00:30,480 --> 00:00:35,700
how I started with Python decorators and

00:00:33,210 --> 00:00:38,370
one why I wanted to make the stock

00:00:35,700 --> 00:00:41,210
happen so basically when I started

00:00:38,370 --> 00:00:43,440
working with Python it was really

00:00:41,210 --> 00:00:46,379
unbelievable for me that I will turn

00:00:43,440 --> 00:00:48,420
back to Python term just fightin because

00:00:46,379 --> 00:00:50,969
I was supposed to Vella per we were

00:00:48,420 --> 00:00:53,190
working in a team of 10 people were so

00:00:50,969 --> 00:00:56,340
excited to start and then in one week

00:00:53,190 --> 00:00:58,410
suddenly our customer told us hmm now

00:00:56,340 --> 00:01:01,350
you're writing Python and we said yeah

00:00:58,410 --> 00:01:04,739
why not we would try it was really nice

00:01:01,350 --> 00:01:09,270
and funny and we tried to build

00:01:04,739 --> 00:01:12,240
something from scratch and then we were

00:01:09,270 --> 00:01:14,280
kind of using the creators it was a bit

00:01:12,240 --> 00:01:17,340
hard fast to understand so we goo code

00:01:14,280 --> 00:01:21,960
we found something and then it was made

00:01:17,340 --> 00:01:24,990
you could work him somehow we didn't go

00:01:21,960 --> 00:01:25,710
deeply and in details but it was working

00:01:24,990 --> 00:01:29,220
it was fine

00:01:25,710 --> 00:01:31,890
sometimes it was throw in some weird box

00:01:29,220 --> 00:01:34,140
which we couldn't really understand how

00:01:31,890 --> 00:01:36,479
is it working so we're just replacing

00:01:34,140 --> 00:01:39,780
with the normal code it's fine can work

00:01:36,479 --> 00:01:43,649
but sometimes you really would like to

00:01:39,780 --> 00:01:47,399
have nice decorator which you can use

00:01:43,649 --> 00:01:50,840
everywhere and to Justin Verl invent

00:01:47,399 --> 00:01:54,329
your own wheel or just to reuse the code

00:01:50,840 --> 00:01:57,860
so a few words about my company and

00:01:54,329 --> 00:02:01,710
working for Internet security company

00:01:57,860 --> 00:02:05,939
it's all about security and I will show

00:02:01,710 --> 00:02:10,979
you some really nice video so siren is

00:02:05,939 --> 00:02:13,580
about security the internet security is

00:02:10,979 --> 00:02:18,290
erased again time against time

00:02:13,580 --> 00:02:23,720
and there are only minutes when the

00:02:18,290 --> 00:02:25,580
virus or some thread is launched and

00:02:23,720 --> 00:02:30,050
then it's trying to block all the users

00:02:25,580 --> 00:02:32,060
it's trying to mess up with the payment

00:02:30,050 --> 00:02:37,250
system and everything so it depends on

00:02:32,060 --> 00:02:40,220
the virus type or the viral email or

00:02:37,250 --> 00:02:43,160
something sometimes it's common that hey

00:02:40,220 --> 00:02:46,400
do you know me and then some of our

00:02:43,160 --> 00:02:48,710
business partners is answered hey how

00:02:46,400 --> 00:02:49,250
are you doing and then please I'm stuck

00:02:48,710 --> 00:02:51,980
somewhere

00:02:49,250 --> 00:02:56,120
please pay something yeah yeah of course

00:02:51,980 --> 00:02:59,570
I will give you money so that's about

00:02:56,120 --> 00:03:03,800
siren we are blocking those kinds of

00:02:59,570 --> 00:03:07,280
threads we are fully online so we have

00:03:03,800 --> 00:03:10,209
everything as a service and then it's

00:03:07,280 --> 00:03:12,800
just numerous seconds to detect

00:03:10,209 --> 00:03:15,200
something new and then to block it

00:03:12,800 --> 00:03:18,410
that's why I just go with us if you are

00:03:15,200 --> 00:03:20,570
the company I really like the company

00:03:18,410 --> 00:03:24,290
because we are pretty open to something

00:03:20,570 --> 00:03:27,200
new and then as long as developer has a

00:03:24,290 --> 00:03:29,330
new idea something to use then company

00:03:27,200 --> 00:03:31,489
saying yes just go for it and we are

00:03:29,330 --> 00:03:34,580
super happy about that but we are not

00:03:31,489 --> 00:03:39,680
open source yet maybe in the future we

00:03:34,580 --> 00:03:42,440
will see so what's in the talk the name

00:03:39,680 --> 00:03:44,959
of the talk is Python decorators gift a

00:03:42,440 --> 00:03:48,590
poison and then maybe at the end of the

00:03:44,959 --> 00:03:52,370
talk you will see the answer of it first

00:03:48,590 --> 00:03:54,860
we will think about functions nature in

00:03:52,370 --> 00:03:56,780
Python and then I will show you some

00:03:54,860 --> 00:03:59,420
magic of decorators then we will dive

00:03:56,780 --> 00:04:01,730
into basics and then I will show you

00:03:59,420 --> 00:04:05,380
some examples and maybe some examples

00:04:01,730 --> 00:04:08,480
from my real life so let's start

00:04:05,380 --> 00:04:12,080
functions nature's nature in Python you

00:04:08,480 --> 00:04:15,380
know all the functions are first class

00:04:12,080 --> 00:04:18,320
objects what does it mean that means

00:04:15,380 --> 00:04:20,299
that you can return funds function as an

00:04:18,320 --> 00:04:22,640
object you can assign function to

00:04:20,299 --> 00:04:25,960
another object you can do whatever you

00:04:22,640 --> 00:04:27,050
want the same as you can do with objects

00:04:25,960 --> 00:04:31,729
okay

00:04:27,050 --> 00:04:36,520
you see the cold yes okay let's try to

00:04:31,729 --> 00:04:36,520
run it just a second

00:04:42,880 --> 00:04:47,720
so we have just normal function it's

00:04:45,740 --> 00:04:51,259
printing hello something and then

00:04:47,720 --> 00:04:54,820
variable and we are assigning this

00:04:51,259 --> 00:04:59,080
function to another function name and

00:04:54,820 --> 00:05:02,500
then we are trying to call the function

00:04:59,080 --> 00:05:02,500
let's run it

00:05:03,070 --> 00:05:09,889
it's simply printing the same so those

00:05:07,039 --> 00:05:12,440
two functions are equal basically it's

00:05:09,889 --> 00:05:15,380
just one function the function which is

00:05:12,440 --> 00:05:18,139
say hello it's an object and this object

00:05:15,380 --> 00:05:20,360
was assigned to another name that means

00:05:18,139 --> 00:05:22,789
that my function is basically the say

00:05:20,360 --> 00:05:27,550
hello function and what will happen it

00:05:22,789 --> 00:05:27,550
if we will try to delete say hello

00:05:40,270 --> 00:05:46,180
it's still working why because it's an

00:05:43,599 --> 00:05:49,990
object so we assign the object and then

00:05:46,180 --> 00:05:54,940
it's working another thing that the name

00:05:49,990 --> 00:06:03,210
of the function is the same so if we

00:05:54,940 --> 00:06:03,210
will print name

00:06:11,880 --> 00:06:17,220
it will have the same name because we

00:06:14,700 --> 00:06:19,050
assigned the say hello name we didn't

00:06:17,220 --> 00:06:24,090
delete the function which has delete the

00:06:19,050 --> 00:06:30,600
name of it the name of the object let's

00:06:24,090 --> 00:06:32,930
go further now as you know functions are

00:06:30,600 --> 00:06:35,370
objects you can dive more into

00:06:32,930 --> 00:06:38,840
decorators and to understand how they

00:06:35,370 --> 00:06:42,540
are working let's see the magic of it

00:06:38,840 --> 00:06:44,190
there are two types of decorators there

00:06:42,540 --> 00:06:48,210
are function the color decorators and

00:06:44,190 --> 00:06:51,420
class decorators and we will basically

00:06:48,210 --> 00:06:54,390
cover all of them first about function

00:06:51,420 --> 00:06:57,480
decorators let's build the basic one

00:06:54,390 --> 00:07:00,540
it's a decorator which is just printing

00:06:57,480 --> 00:07:02,730
something that something happen it's

00:07:00,540 --> 00:07:09,240
decorating some function which is

00:07:02,730 --> 00:07:11,580
getting as a argument here it's a

00:07:09,240 --> 00:07:18,470
decorated function it's an argument and

00:07:11,580 --> 00:07:22,320
then we can use the decorator like this

00:07:18,470 --> 00:07:24,750
it's a syntax is sugar with AD and then

00:07:22,320 --> 00:07:29,100
the name of the decorator the function

00:07:24,750 --> 00:07:32,360
which is the character or we can just

00:07:29,100 --> 00:07:35,010
assign it it will do exactly the same so

00:07:32,360 --> 00:07:39,510
my decorator is the name of the

00:07:35,010 --> 00:07:43,490
decorator and my second function is the

00:07:39,510 --> 00:07:43,490
function which is going to be decorated

00:07:45,440 --> 00:07:48,980
let's run it

00:07:52,610 --> 00:07:59,629
so what is actually doing decorator is

00:07:56,419 --> 00:08:02,689
also a function which is taken another

00:07:59,629 --> 00:08:06,050
function as an argument and also running

00:08:02,689 --> 00:08:08,389
it or can just skip the running of the

00:08:06,050 --> 00:08:10,699
function but it's definitely changing

00:08:08,389 --> 00:08:13,550
the behavior of the function that means

00:08:10,699 --> 00:08:16,909
that just be careful when you are using

00:08:13,550 --> 00:08:19,219
decorators just you have to be sure how

00:08:16,909 --> 00:08:21,080
the decorator is working because if it's

00:08:19,219 --> 00:08:24,710
doing something super weird

00:08:21,080 --> 00:08:28,520
for example removing the running of the

00:08:24,710 --> 00:08:30,500
function that it might be wrong and if

00:08:28,520 --> 00:08:33,500
you will not dive deeply into the

00:08:30,500 --> 00:08:34,820
decorator the decorator itself then you

00:08:33,500 --> 00:08:40,310
will not find out what is happening

00:08:34,820 --> 00:08:43,279
there so both of this type of assigning

00:08:40,310 --> 00:08:46,690
the function into decorators are working

00:08:43,279 --> 00:08:48,829
the same as you can see it printed

00:08:46,690 --> 00:08:50,990
actually the same so it called the

00:08:48,829 --> 00:08:59,440
function and then it gave the argument

00:08:50,990 --> 00:09:02,390
there and just printed it we can use

00:08:59,440 --> 00:09:04,760
stacked function decorator and that

00:09:02,390 --> 00:09:07,730
means that you you will have few

00:09:04,760 --> 00:09:10,430
decorators in the row you will have like

00:09:07,730 --> 00:09:12,829
a first decorator the first function and

00:09:10,430 --> 00:09:16,310
then the second one and you will use

00:09:12,829 --> 00:09:18,560
them one by one as you can see here we

00:09:16,310 --> 00:09:21,500
have just two functions which are

00:09:18,560 --> 00:09:23,180
decorators and they are also taking

00:09:21,500 --> 00:09:25,610
function as an argument the same

00:09:23,180 --> 00:09:27,769
scenario as the previous one and they

00:09:25,610 --> 00:09:30,050
are just printing some text first

00:09:27,769 --> 00:09:34,850
decorator and second decorator and you

00:09:30,050 --> 00:09:38,019
are using two of the decorators and how

00:09:34,850 --> 00:09:38,019
will it actually work

00:09:48,160 --> 00:09:59,540
so we are assigning the first first

00:09:57,110 --> 00:10:01,670
decorator and then second inside and

00:09:59,540 --> 00:10:04,490
then as a parameter to the second we

00:10:01,670 --> 00:10:06,709
have a function so it will call the

00:10:04,490 --> 00:10:09,319
first one as the first and then the

00:10:06,709 --> 00:10:12,800
second as a second it doesn't matter if

00:10:09,319 --> 00:10:17,149
you will use those decorators with a @

00:10:12,800 --> 00:10:19,040
symbol or you will just assign them if

00:10:17,149 --> 00:10:22,060
you will assign then you will clearly

00:10:19,040 --> 00:10:24,709
see how is it working maybe at the

00:10:22,060 --> 00:10:31,970
beginners time it's more clear to

00:10:24,709 --> 00:10:33,889
understand class decorators they're a

00:10:31,970 --> 00:10:37,009
bit more complicated than just a

00:10:33,889 --> 00:10:39,439
function decorators it's also a

00:10:37,009 --> 00:10:42,319
decorator it's not a function it's a

00:10:39,439 --> 00:10:46,910
class which is the creating something it

00:10:42,319 --> 00:10:49,790
can so it depends if we want to decorate

00:10:46,910 --> 00:10:52,910
a class it's a cluster crater with a

00:10:49,790 --> 00:10:58,339
function in this case we are decorating

00:10:52,910 --> 00:10:59,899
a class with another class probably we

00:10:58,339 --> 00:11:02,180
want to change the behavior of this

00:10:59,899 --> 00:11:06,379
class which is my class with another

00:11:02,180 --> 00:11:10,339
class and that's why we just need to use

00:11:06,379 --> 00:11:13,899
class decorator we can use a class as a

00:11:10,339 --> 00:11:17,089
decorator for example we want to count

00:11:13,899 --> 00:11:21,259
entries into the function and that's why

00:11:17,089 --> 00:11:23,329
we need to just adjust a little bit the

00:11:21,259 --> 00:11:27,439
function behavior but it's not really

00:11:23,329 --> 00:11:29,569
possible with just function decorators

00:11:27,439 --> 00:11:33,680
and then we will use class decorators in

00:11:29,569 --> 00:11:36,350
this example we can have like in it when

00:11:33,680 --> 00:11:40,519
we are assigning the function and then

00:11:36,350 --> 00:11:45,730
we are writing the name where we entered

00:11:40,519 --> 00:11:49,240
and where we exited let's run it and see

00:11:45,730 --> 00:11:49,240
how will it work

00:11:51,140 --> 00:11:56,670
so we decorated function one and

00:11:54,180 --> 00:11:58,380
function two with the same decorator and

00:11:56,670 --> 00:12:02,670
then we just called function one and

00:11:58,380 --> 00:12:05,790
function two so the same decorator the

00:12:02,670 --> 00:12:07,680
same class decorator and then classes

00:12:05,790 --> 00:12:11,160
the decorator and then different

00:12:07,680 --> 00:12:14,430
functions it saved the function name in

00:12:11,160 --> 00:12:17,100
need of the decorator and then it's

00:12:14,430 --> 00:12:19,770
printing which was entering the name of

00:12:17,100 --> 00:12:22,680
the function and then exiting the name

00:12:19,770 --> 00:12:28,440
of the function and then just running

00:12:22,680 --> 00:12:31,650
the function as we can see here it's

00:12:28,440 --> 00:12:38,580
printing exactly the same for the first

00:12:31,650 --> 00:12:42,090
one and the second one let's go a bit

00:12:38,580 --> 00:12:45,330
deeper into decorators how does the

00:12:42,090 --> 00:12:48,480
decorator work we have basic decorator

00:12:45,330 --> 00:12:51,510
here which is taking the function as an

00:12:48,480 --> 00:12:54,300
argument and then it's printing one line

00:12:51,510 --> 00:12:56,880
before calling the function and then

00:12:54,300 --> 00:12:58,950
running the function print in line after

00:12:56,880 --> 00:13:01,410
and then returning result

00:12:58,950 --> 00:13:02,760
it's a classic decorator which is not

00:13:01,410 --> 00:13:05,670
really changing the behavior it's just

00:13:02,760 --> 00:13:07,710
printing something but still running the

00:13:05,670 --> 00:13:09,840
function and then returning the result

00:13:07,710 --> 00:13:12,600
back but it could happen that you will

00:13:09,840 --> 00:13:15,150
change the result and you will return

00:13:12,600 --> 00:13:20,040
modified result for example if you need

00:13:15,150 --> 00:13:23,760
to beautify some output if you want to

00:13:20,040 --> 00:13:26,820
print some table or something in a nice

00:13:23,760 --> 00:13:29,400
way then you will probably return not

00:13:26,820 --> 00:13:34,170
the original result but the nicer result

00:13:29,400 --> 00:13:36,740
which you want to decorate so let's run

00:13:34,170 --> 00:13:36,740
the code

00:13:42,580 --> 00:13:47,930
it printed the same it printed before

00:13:45,890 --> 00:13:49,820
the decorated function and then the

00:13:47,930 --> 00:13:54,560
function itself and then after

00:13:49,820 --> 00:13:57,760
decorating function and the name of the

00:13:54,560 --> 00:14:03,620
function which we try to print here it's

00:13:57,760 --> 00:14:09,529
the function name and the name is

00:14:03,620 --> 00:14:13,160
wrapped that means I will show the code

00:14:09,529 --> 00:14:16,850
again that means that we printed this

00:14:13,160 --> 00:14:20,270
name not the original name of the

00:14:16,850 --> 00:14:24,110
function how to get rid of it there is a

00:14:20,270 --> 00:14:26,660
trick which you can use wraps decorator

00:14:24,110 --> 00:14:30,410
it's also the Creator but it will assign

00:14:26,660 --> 00:14:32,630
all the function names correctly and

00:14:30,410 --> 00:14:35,390
then you will have the correct behavior

00:14:32,630 --> 00:14:37,730
which you expected actually because when

00:14:35,390 --> 00:14:41,510
you are using decorators then be aware

00:14:37,730 --> 00:14:46,610
that you cannot rely on the name if you

00:14:41,510 --> 00:14:49,310
are not using reps and in this case the

00:14:46,610 --> 00:14:51,860
name is correct and also the dog's twin

00:14:49,310 --> 00:14:58,850
is correct it's the same from the

00:14:51,860 --> 00:15:01,040
function so when to use decorators I

00:14:58,850 --> 00:15:03,500
have prepared a few examples for you

00:15:01,040 --> 00:15:06,410
the first one is the time and with

00:15:03,500 --> 00:15:09,290
function decorators for example you have

00:15:06,410 --> 00:15:11,720
some functions which you want to have

00:15:09,290 --> 00:15:13,610
timing on them and you don't want to

00:15:11,720 --> 00:15:16,490
duplicate code you don't want to right

00:15:13,610 --> 00:15:19,880
at the very beginning like save time and

00:15:16,490 --> 00:15:22,970
then after substract time and then print

00:15:19,880 --> 00:15:25,459
it again and then another one sometimes

00:15:22,970 --> 00:15:27,020
it's just for debugging and then if you

00:15:25,459 --> 00:15:29,060
want to get rid of this code then you

00:15:27,020 --> 00:15:34,490
probably need to remove all of the lines

00:15:29,060 --> 00:15:37,570
each time and it's a bit annoying so

00:15:34,490 --> 00:15:37,570
let's run the code

00:15:44,980 --> 00:15:54,070
it's taking some time because we have

00:15:47,650 --> 00:15:57,310
the first function waiting for zero two

00:15:54,070 --> 00:16:03,220
seconds and then the second one for 1

00:15:57,310 --> 00:16:05,860
second and then 2 and 0 3 so in this

00:16:03,220 --> 00:16:08,770
particular example we have the function

00:16:05,860 --> 00:16:11,020
which is doing the timing and it's

00:16:08,770 --> 00:16:13,120
printing the name of the function and

00:16:11,020 --> 00:16:16,990
then all the arguments keyword arguments

00:16:13,120 --> 00:16:20,200
and then the timing basically there is a

00:16:16,990 --> 00:16:21,880
class where you want to decorate just a

00:16:20,200 --> 00:16:24,940
function as you could function not the

00:16:21,880 --> 00:16:28,030
whole class and then also a function

00:16:24,940 --> 00:16:31,120
where you want to decorate on the

00:16:28,030 --> 00:16:33,420
function then another one with an

00:16:31,120 --> 00:16:37,240
argument and then another one with

00:16:33,420 --> 00:16:41,200
argument and keyword arguments so the

00:16:37,240 --> 00:16:44,020
first one is taking nothing and then the

00:16:41,200 --> 00:16:46,060
second one is taking some argument the

00:16:44,020 --> 00:16:48,310
third one is taking two arguments and

00:16:46,060 --> 00:16:50,740
then keyword argument and then the third

00:16:48,310 --> 00:16:53,500
one is a class which is : the class

00:16:50,740 --> 00:16:55,990
function which is decorated and then

00:16:53,500 --> 00:16:57,940
suddenly it's working its printing that

00:16:55,990 --> 00:17:04,930
it was waiting for one second and then

00:16:57,940 --> 00:17:07,300
for 2 seconds 0 0 3 and then 0 2 and for

00:17:04,930 --> 00:17:09,870
that we use just a single piece of code

00:17:07,300 --> 00:17:13,120
here just a function decorator

00:17:09,870 --> 00:17:15,910
which is written here and we reused with

00:17:13,120 --> 00:17:19,089
all the cases which we wanted to and

00:17:15,910 --> 00:17:21,040
next time if your boss is coming to your

00:17:19,089 --> 00:17:23,890
door and then asking you to add some

00:17:21,040 --> 00:17:27,040
timing on the functions and you're not

00:17:23,890 --> 00:17:29,110
just throwing your heads away like oh my

00:17:27,040 --> 00:17:31,570
god no it's taking too much time to

00:17:29,110 --> 00:17:34,450
decorate all of the thousand millionth

00:17:31,570 --> 00:17:38,250
function it will take a month you will

00:17:34,450 --> 00:17:38,250
say yeah in one hour it will be done

00:17:40,230 --> 00:17:44,310
timing with class decorators

00:17:45,360 --> 00:17:53,250
for example if you have a class and like

00:17:49,320 --> 00:17:56,399
ten thousand functions there inside and

00:17:53,250 --> 00:17:59,490
you want to decorate all of them every

00:17:56,399 --> 00:18:01,799
single function should be timed of

00:17:59,490 --> 00:18:05,220
course you can do it like that you can

00:18:01,799 --> 00:18:07,289
just use all of the timers to each

00:18:05,220 --> 00:18:09,240
function but sometimes it's really

00:18:07,289 --> 00:18:11,519
annoying because you have too much fun

00:18:09,240 --> 00:18:14,399
too many functions and then you want to

00:18:11,519 --> 00:18:18,269
decorate all of them we can do it in

00:18:14,399 --> 00:18:20,399
this case as a decorator of the class we

00:18:18,269 --> 00:18:23,159
will use the function decorator to

00:18:20,399 --> 00:18:30,929
decorate all of the functions in one

00:18:23,159 --> 00:18:38,639
class it's looking nice yeah so this is

00:18:30,929 --> 00:18:47,370
an example we have the function time

00:18:38,639 --> 00:18:50,519
this and then we have the class with all

00:18:47,370 --> 00:18:55,710
of the functions ABC which are printing

00:18:50,519 --> 00:18:59,909
something and simply using one decorator

00:18:55,710 --> 00:19:02,370
which is time all class methods which is

00:18:59,909 --> 00:19:08,519
a bit more complicated than just one

00:19:02,370 --> 00:19:10,289
single decorator then we will have the

00:19:08,519 --> 00:19:12,360
same that we wanted to have

00:19:10,289 --> 00:19:15,419
so it's decorating it start in time and

00:19:12,360 --> 00:19:18,590
timer enter in function a exit in

00:19:15,419 --> 00:19:25,320
function a and then printing the time

00:19:18,590 --> 00:19:29,130
it's look it looks correct so the next

00:19:25,320 --> 00:19:35,010
example which I have for you I used in

00:19:29,130 --> 00:19:39,059
one of my companies and it was a bit

00:19:35,010 --> 00:19:41,700
confusing because I used also decorators

00:19:39,059 --> 00:19:43,679
and laid binding and lambdas and

00:19:41,700 --> 00:19:46,919
everything all together and then

00:19:43,679 --> 00:19:48,779
suddenly my developers told me you know

00:19:46,919 --> 00:19:51,240
it's to complicate it we don't know how

00:19:48,779 --> 00:19:53,490
decorators are working and I said ok

00:19:51,240 --> 00:19:57,400
just come to my workshop and then I will

00:19:53,490 --> 00:20:00,280
show you the magic I will

00:19:57,400 --> 00:20:02,760
show you how is it working because we

00:20:00,280 --> 00:20:14,230
are running out of time

00:20:02,760 --> 00:20:19,330
so we have we have four functions to

00:20:14,230 --> 00:20:21,940
test basically here tree and sometimes

00:20:19,330 --> 00:20:24,850
if you want to test functions in the

00:20:21,940 --> 00:20:27,809
simple way as a you test in a word ever

00:20:24,850 --> 00:20:31,420
and then you need to pass the parameter

00:20:27,809 --> 00:20:33,720
as it as a parameter into function and

00:20:31,420 --> 00:20:37,210
then the result which should be returned

00:20:33,720 --> 00:20:40,150
in the test and then the function which

00:20:37,210 --> 00:20:44,559
to check you don't want to write all of

00:20:40,150 --> 00:20:49,090
the functions for testing like except

00:20:44,559 --> 00:20:52,450
equals and then the function and input

00:20:49,090 --> 00:20:56,080
output and then the result what I did I

00:20:52,450 --> 00:21:00,309
just use decorators in this case which

00:20:56,080 --> 00:21:06,600
are who are creating the use cases for

00:21:00,309 --> 00:21:08,950
that so it looks a bit tricky and weird

00:21:06,600 --> 00:21:11,429
it's working nice so we have three

00:21:08,950 --> 00:21:14,770
functions which we wanted to check and

00:21:11,429 --> 00:21:17,860
the input for the function which I wrote

00:21:14,770 --> 00:21:21,070
for the decorator is this one name of

00:21:17,860 --> 00:21:23,190
the function and then arguments and then

00:21:21,070 --> 00:21:27,460
the result

00:21:23,190 --> 00:21:30,429
so while import time is going it's

00:21:27,460 --> 00:21:33,910
adding all of the tests the class

00:21:30,429 --> 00:21:38,530
decorator which is written here is

00:21:33,910 --> 00:21:41,260
decorating the class which will add all

00:21:38,530 --> 00:21:46,210
of the tests you can check the example

00:21:41,260 --> 00:21:50,800
later is also using the lambda and light

00:21:46,210 --> 00:21:55,290
binding and I want to ask you about some

00:21:50,800 --> 00:21:55,290
magic what will be printed here

00:22:04,040 --> 00:22:07,030
any ideas

00:22:23,050 --> 00:22:25,890
which one

00:22:26,050 --> 00:22:36,610
yes that's correct that's also a bit

00:22:29,710 --> 00:22:43,960
complicated so actually I would expect

00:22:36,610 --> 00:22:47,700
here numbers from 0 to 0 2 4 6 but

00:22:43,960 --> 00:22:51,370
actually we got just sixes why because

00:22:47,700 --> 00:22:53,530
when at the time when we are calling the

00:22:51,370 --> 00:22:57,280
function multi-layers

00:22:53,530 --> 00:22:59,950
then is the I variable is already look

00:22:57,280 --> 00:23:04,240
looked up it's because of light biding

00:22:59,950 --> 00:23:05,650
because the eye is not binding right

00:23:04,240 --> 00:23:11,040
away when we are calling the function

00:23:05,650 --> 00:23:14,710
it's right it's binding it at the first

00:23:11,040 --> 00:23:18,250
so the I looked up until the last one

00:23:14,710 --> 00:23:22,060
until the last in our range and that's

00:23:18,250 --> 00:23:25,930
why we got all the sixes how to fix it

00:23:22,060 --> 00:23:31,780
we have few opportunities for that we

00:23:25,930 --> 00:23:37,620
can bind it right away so we can just

00:23:31,780 --> 00:23:41,440
bind I to I which would really expect or

00:23:37,620 --> 00:23:47,230
we can just change the behavior of the

00:23:41,440 --> 00:23:50,820
function to yield the volume we can try

00:23:47,230 --> 00:23:50,820
with that and that should work

00:24:01,130 --> 00:24:11,299
yes we got what we expected so now ask

00:24:09,080 --> 00:24:13,130
yourself other decorators invite and

00:24:11,299 --> 00:24:15,590
gift a poison it's a new to decide

00:24:13,130 --> 00:24:17,929
whether you will use them in your code

00:24:15,590 --> 00:24:22,520
or you will get rid of them just think

00:24:17,929 --> 00:24:25,100
and use them wisely thank you for coming

00:24:22,520 --> 00:24:27,640
and if you have any questions and if we

00:24:25,100 --> 00:24:27,640
have some time

00:24:33,809 --> 00:24:46,029
so is anyone question hi do you have to

00:24:43,779 --> 00:24:47,529
pay extra attention really when you're

00:24:46,029 --> 00:24:50,799
decorating class methods for example

00:24:47,529 --> 00:24:53,279
will self be available to you like as an

00:24:50,799 --> 00:24:56,470
argument or will it be already bound

00:24:53,279 --> 00:24:59,020
even in your decorating will already be

00:24:56,470 --> 00:25:01,600
bound to the first argument yourself or

00:24:59,020 --> 00:25:04,899
will you have like self as an argument

00:25:01,600 --> 00:25:08,200
um self were in the function which

00:25:04,899 --> 00:25:09,970
you're in the class method in the class

00:25:08,200 --> 00:25:12,250
method of the of the class which you

00:25:09,970 --> 00:25:16,360
want to decorate no you the correct a

00:25:12,250 --> 00:25:19,630
method of the class so if you wanted to

00:25:16,360 --> 00:25:23,230
create a function with a class or not no

00:25:19,630 --> 00:25:25,779
so you if you have your class and you

00:25:23,230 --> 00:25:28,570
want to decorate one of its methods so

00:25:25,779 --> 00:25:29,950
you are adding this decorator yes what

00:25:28,570 --> 00:25:34,659
kind of arguments will you have access

00:25:29,950 --> 00:25:38,279
to okay will you be able to see self so

00:25:34,659 --> 00:25:41,289
in into decorator we are passing the

00:25:38,279 --> 00:25:43,750
function itself and then it's passed

00:25:41,289 --> 00:25:46,870
with all of the parameters of of it and

00:25:43,750 --> 00:25:49,809
if you want to pass any parameters to do

00:25:46,870 --> 00:25:51,399
any kind of magic on the function which

00:25:49,809 --> 00:25:54,429
we are passing there then we need to

00:25:51,399 --> 00:25:56,380
pass there as a parameter there is

00:25:54,429 --> 00:25:58,659
another way to decorate the decorator

00:25:56,380 --> 00:26:01,830
with another function which is taking

00:25:58,659 --> 00:26:04,950
arguments and then passing them later

00:26:01,830 --> 00:26:04,950
thank you

00:26:06,539 --> 00:26:16,589
so okay this one hi nice dog do you know

00:26:14,699 --> 00:26:20,699
by any chance what happens if you try to

00:26:16,589 --> 00:26:24,479
decorate a recursive function never

00:26:20,699 --> 00:26:31,619
tried that but you want to try you can

00:26:24,479 --> 00:26:40,799
try okay we still have it hi so anyone

00:26:31,619 --> 00:26:42,299
have a question so thanks for to talk a

00:26:40,799 --> 00:26:47,219
quick question how do you debug

00:26:42,299 --> 00:26:50,039
decorators can you give some tips you

00:26:47,219 --> 00:26:52,440
mean in my code yes some tips how do you

00:26:50,039 --> 00:26:55,019
debug for example complex decorator

00:26:52,440 --> 00:26:57,389
because it can be really painful yeah it

00:26:55,019 --> 00:27:00,569
can be really really painful but it's on

00:26:57,389 --> 00:27:01,529
you to decide how is it painful and how

00:27:00,569 --> 00:27:04,199
is it complex

00:27:01,529 --> 00:27:06,719
so my advice not to make them too

00:27:04,199 --> 00:27:09,029
complex because then you will not get

00:27:06,719 --> 00:27:10,440
afraid of feeling that something might

00:27:09,029 --> 00:27:12,659
be wrong inside because if you are

00:27:10,440 --> 00:27:14,599
calling functions in functions in

00:27:12,659 --> 00:27:17,729
functions and then you are decorating

00:27:14,599 --> 00:27:20,279
decorators few times then probably bug

00:27:17,729 --> 00:27:23,789
can be inside and then you are lost at

00:27:20,279 --> 00:27:27,209
some point so your suggestion is to keep

00:27:23,789 --> 00:27:28,519
them simple enough yes one function at a

00:27:27,209 --> 00:27:35,879
time

00:27:28,519 --> 00:27:37,829
Thanks okay it's a good question okay

00:27:35,879 --> 00:27:38,850
you feel okay sure and nicest things

00:27:37,829 --> 00:27:41,860
Mesa

00:27:38,850 --> 00:27:48,650
[Music]

00:27:41,860 --> 00:27:48,650

YouTube URL: https://www.youtube.com/watch?v=JiikQ6Hg-Ac


