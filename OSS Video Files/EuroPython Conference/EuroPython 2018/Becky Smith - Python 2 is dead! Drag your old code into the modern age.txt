Title: Becky Smith - Python 2 is dead! Drag your old code into the modern age
Publication date: 2018-08-22
Playlist: EuroPython 2018
Description: 
	Python 2 is dead! Drag your old code into the modern age.
[EuroPython 2018 - Talk - 2018-07-25 - Smarkets]
[Edinburgh, UK]

By Becky Smith

The clock is ticking on Python 2.7, with support to be dropped in January 2020.  With major dependencies such as Django, NumPy and pandas moving to Python 3 only, the time has come for even big established codebases to consider upgrading.  Many organisations are still postponing for various reasons; we will attempt to demonstrate that with a bit of planning and perseverance, and the assistance of some handy tools, we can embrace the future!

This session will provide a first-hand perspective on how we upgraded a large (~65,000 lines of python code) 8-year-old Django project with multiple external dependencies from Python 2.7 to Python 3.6.

We will briefly discuss the benefits of upgrading to Python 3, and architectural considerations.  The session will primarily focus on the practicalities of upgrading the code itself.  We will not try to provide a single “best” solution for upgrading to Python 3, but rather will introduce some of the available tools, provide an insight into how we used them, and their advantages and disadvantages from our experience.  We will discuss preparatory steps and approaches, strategies for dealing with external dependencies, and “gotchas” that we encountered during the process.

The aim of this session is to provide an example of how a Python 3 upgrade on an established commercial product can be successfully completed, and to furnish audience members with a set of tools and strategies to help them with their own projects.  

Prerequisites: basic knowledge of Python.



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2018.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:03,800 --> 00:00:06,950
[Applause]

00:00:07,059 --> 00:00:17,980
okay hello everyone welcome can you hear

00:00:11,030 --> 00:00:21,380
me okay awesome so a little bit about me

00:00:17,980 --> 00:00:24,290
just a little bit I'm Rev Walker on

00:00:21,380 --> 00:00:26,510
github Twitter in most other places

00:00:24,290 --> 00:00:28,910
I'm software developer at ecchymotic oh

00:00:26,510 --> 00:00:31,370
we're here in Edinburgh we are hiring

00:00:28,910 --> 00:00:33,020
but only in Montreal at the moment but

00:00:31,370 --> 00:00:35,050
if you're interested then come talk to

00:00:33,020 --> 00:00:38,000
me later

00:00:35,050 --> 00:00:39,650
I'm also an axe psychologist I haven't

00:00:38,000 --> 00:00:42,650
spoken at a conference since my academic

00:00:39,650 --> 00:00:47,020
days which were a long time ago so bear

00:00:42,650 --> 00:00:50,480
with me if I'm a little bit rusty so

00:00:47,020 --> 00:00:53,329
this talks about how we as an individual

00:00:50,480 --> 00:00:56,300
company went once about upgrading a

00:00:53,329 --> 00:00:59,630
large established Python 2.7 codebase to

00:00:56,300 --> 00:01:01,100
Python 3.6 I'll talk about some of the

00:00:59,630 --> 00:01:03,380
available tools that are out there to

00:01:01,100 --> 00:01:05,449
help you so I'll talk a bit about our

00:01:03,380 --> 00:01:07,999
experience and our general approach and

00:01:05,449 --> 00:01:12,979
some of the gotchas and pitfalls that we

00:01:07,999 --> 00:01:14,899
encountered along the way this was only

00:01:12,979 --> 00:01:18,560
our approach it's certainly not the only

00:01:14,899 --> 00:01:20,389
way to do it I'm by no means telling you

00:01:18,560 --> 00:01:22,729
that it's the right way to go about it

00:01:20,389 --> 00:01:24,200
and I'm not going to attempt to give you

00:01:22,729 --> 00:01:26,780
a single best way of approaching the

00:01:24,200 --> 00:01:29,179
problem instead I just hope to give you

00:01:26,780 --> 00:01:35,319
a useful case study and share with you

00:01:29,179 --> 00:01:38,359
some of the lessons that we learned so

00:01:35,319 --> 00:01:42,529
why did we and and why should you even

00:01:38,359 --> 00:01:44,359
want to upgrade to Python 3 well the

00:01:42,529 --> 00:01:46,639
main reason obviously is that the

00:01:44,359 --> 00:01:48,909
deadline for dropping Python 2.7 support

00:01:46,639 --> 00:01:53,240
is approaching pretty fast

00:01:48,909 --> 00:01:56,539
Jeremie January 2020 so less than a year

00:01:53,240 --> 00:01:59,029
and a half away now major projects are

00:01:56,539 --> 00:02:04,099
also either dropping or planning to drop

00:01:59,029 --> 00:02:07,219
support for Python 2 including Django

00:02:04,099 --> 00:02:10,009
numpy Syfy pandas but there are lots of

00:02:07,219 --> 00:02:11,959
others so in the not too far off future

00:02:10,009 --> 00:02:13,970
you're gonna be stuck with old versions

00:02:11,959 --> 00:02:17,860
that are only being bug fixed if you're

00:02:13,970 --> 00:02:20,569
lucky I need I got any new features

00:02:17,860 --> 00:02:24,680
so in terms of motivation to upgrade

00:02:20,569 --> 00:02:26,750
that's the stick what's the current why

00:02:24,680 --> 00:02:28,670
should you want to embrace Python 3

00:02:26,750 --> 00:02:30,200
rather than just grumbling about how

00:02:28,670 --> 00:02:37,160
annoying it is you're being pushed into

00:02:30,200 --> 00:02:39,739
it that words and and has filled at

00:02:37,160 --> 00:02:41,060
least another few talks so I'm just

00:02:39,739 --> 00:02:43,220
going to touch on a few highlights here

00:02:41,060 --> 00:02:45,110
as I've got some references at the end

00:02:43,220 --> 00:02:50,660
of the slides that go into more detail

00:02:45,110 --> 00:02:53,989
if you're interested in that so first

00:02:50,660 --> 00:02:56,090
there's that Unicode thing so python 3

00:02:53,989 --> 00:02:58,970
gets rid of the overloaded string type

00:02:56,090 --> 00:03:02,959
where it's true objects can represent

00:02:58,970 --> 00:03:04,850
either textual or binary data this link

00:03:02,959 --> 00:03:07,850
here is a nice description of how it

00:03:04,850 --> 00:03:12,260
came about why python 3 largely exists

00:03:07,850 --> 00:03:16,269
to fix that in Python 3 stroke is always

00:03:12,260 --> 00:03:16,269
a texturing and it's Unicode by default

00:03:17,470 --> 00:03:23,540
there's some better iterations so in

00:03:20,799 --> 00:03:26,540
Python 2 you have a lot of pairs of

00:03:23,540 --> 00:03:29,570
functions that do the same thing except

00:03:26,540 --> 00:03:32,980
that one's eager and one's lazy Python 3

00:03:29,570 --> 00:03:35,840
eliminates all of the lazy versions and

00:03:32,980 --> 00:03:38,600
instead makes everything lazy so

00:03:35,840 --> 00:03:41,420
everything's in iterator iterating over

00:03:38,600 --> 00:03:43,489
them works exactly the same way but it

00:03:41,420 --> 00:03:45,709
no longer creates an intermediate list

00:03:43,489 --> 00:03:48,049
so it makes it harder to write codes

00:03:45,709 --> 00:03:52,910
that he accidentally uses up lots of

00:03:48,049 --> 00:03:56,780
memory we also have some restrictions on

00:03:52,910 --> 00:04:00,370
comparators so you now can't do nonsense

00:03:56,780 --> 00:04:03,260
comparisons between different types

00:04:00,370 --> 00:04:08,959
incidentally foo is greater than 4

00:04:03,260 --> 00:04:10,820
according to Python 2 we get some

00:04:08,959 --> 00:04:14,329
advanced unpacking and we're going to

00:04:10,820 --> 00:04:17,359
detail in this but in Python 3 you get

00:04:14,329 --> 00:04:18,289
the nice star notation for unpacking

00:04:17,359 --> 00:04:21,470
both iterables

00:04:18,289 --> 00:04:22,850
and especially dictionaries so this is

00:04:21,470 --> 00:04:26,180
what I came across quite recently but

00:04:22,850 --> 00:04:30,909
it's a nice way of making new

00:04:26,180 --> 00:04:30,909
dictionaries from existing ones

00:04:32,650 --> 00:04:38,170
we get the option of keywords only

00:04:34,180 --> 00:04:40,300
arguments in Python 3 so this is a

00:04:38,170 --> 00:04:42,340
function with two positional and one

00:04:40,300 --> 00:04:47,320
keyword arguments this is how we would

00:04:42,340 --> 00:04:49,840
do it in Python 2 and any of these three

00:04:47,320 --> 00:04:51,910
methods of calling it would be valid but

00:04:49,840 --> 00:04:55,930
they might not do what you expected them

00:04:51,910 --> 00:04:58,710
to you can use the same definition in

00:04:55,930 --> 00:05:01,630
Python 3 but you can optionally add this

00:04:58,710 --> 00:05:03,550
star arguments and that means that the

00:05:01,630 --> 00:05:06,160
keywords argument that follows it has to

00:05:03,550 --> 00:05:10,120
be called by name so now only that first

00:05:06,160 --> 00:05:11,830
method of calling it is valid so when

00:05:10,120 --> 00:05:14,830
you use keyword argument keywords only

00:05:11,830 --> 00:05:16,390
arguments you can avoid accidentally

00:05:14,830 --> 00:05:19,840
passing too many arguments to a function

00:05:16,390 --> 00:05:30,190
and then having them misinterpreted as

00:05:19,840 --> 00:05:32,530
the as the keyword argument f strings

00:05:30,190 --> 00:05:35,380
are awesome and are totally the reason

00:05:32,530 --> 00:05:38,100
to go all the way to Python 3.6 and the

00:05:35,380 --> 00:05:41,230
reason that we did go to more than 3.6

00:05:38,100 --> 00:05:43,810
as well as the just variable

00:05:41,230 --> 00:05:45,550
substitution they can contain any Python

00:05:43,810 --> 00:05:48,190
expressions including method and

00:05:45,550 --> 00:05:49,810
function calls they're more reasonable

00:05:48,190 --> 00:05:52,390
they're more concise they're less prone

00:05:49,810 --> 00:05:57,730
to error and they're also faster than

00:05:52,390 --> 00:05:59,440
other ways of formatting strings and

00:05:57,730 --> 00:06:01,210
then there's a sync i/o which is the new

00:05:59,440 --> 00:06:04,930
concurrency module that's been

00:06:01,210 --> 00:06:07,000
introduced in Python 3.4 I'm not going

00:06:04,930 --> 00:06:08,140
to say much more than that about it

00:06:07,000 --> 00:06:09,370
because I don't know a lot more than

00:06:08,140 --> 00:06:14,380
that about it but I'm told it's very

00:06:09,370 --> 00:06:15,580
cool so a little bit about the project

00:06:14,380 --> 00:06:17,860
that we're dealing with

00:06:15,580 --> 00:06:21,370
it's like echo match because mapping

00:06:17,860 --> 00:06:25,060
platform is big Django projects but does

00:06:21,370 --> 00:06:26,200
some cool stuff with GIS data and some

00:06:25,060 --> 00:06:29,020
of my colleagues will tell you more

00:06:26,200 --> 00:06:31,060
about that if you would like to know it

00:06:29,020 --> 00:06:33,760
works with detail and other underlying

00:06:31,060 --> 00:06:36,550
GIS libraries to import and transform

00:06:33,760 --> 00:06:39,360
mapping data sets display areas of

00:06:36,550 --> 00:06:41,760
interest on an interactive map interface

00:06:39,360 --> 00:06:44,640
and run user-defined queries across

00:06:41,760 --> 00:06:47,700
multiple data layers it's about eight

00:06:44,640 --> 00:06:49,740
years old it consists of around 70,000

00:06:47,700 --> 00:06:52,530
lines of Python codes in the core

00:06:49,740 --> 00:06:54,180
project and it has a bunch of

00:06:52,530 --> 00:06:58,650
dependencies including some of the

00:06:54,180 --> 00:07:01,110
typically temperamental GIS ones this is

00:06:58,650 --> 00:07:03,890
what it looks like we're looking at

00:07:01,110 --> 00:07:07,530
national parks here in the Amazon

00:07:03,890 --> 00:07:09,750
highlighted in purple so we can upload

00:07:07,530 --> 00:07:14,570
and show display layers like this one

00:07:09,750 --> 00:07:17,520
which shows land cover in 2000 in turn

00:07:14,570 --> 00:07:22,140
you can explore individual areas of

00:07:17,520 --> 00:07:24,510
interest and have a look at results of

00:07:22,140 --> 00:07:27,090
some user-defined questions based on

00:07:24,510 --> 00:07:31,140
information from raster datasets like

00:07:27,090 --> 00:07:33,270
carbon density biomass within an area or

00:07:31,140 --> 00:07:35,340
how land use has changed over time and

00:07:33,270 --> 00:07:43,650
there's a number of ways that those can

00:07:35,340 --> 00:07:45,570
be displayed so there are a bunch of

00:07:43,650 --> 00:07:48,210
useful tools that are out there to help

00:07:45,570 --> 00:07:51,090
you with your Python 3 upgrade I'll take

00:07:48,210 --> 00:07:53,280
a look at a few of them but this isn't

00:07:51,090 --> 00:07:55,050
by any means an exhaustive list there's

00:07:53,280 --> 00:08:01,280
there's lots of help out there these are

00:07:55,050 --> 00:08:04,410
just some of the ones that we used so

00:08:01,280 --> 00:08:06,930
first you want to upgrade your project

00:08:04,410 --> 00:08:09,000
that's all well and good but what about

00:08:06,930 --> 00:08:11,310
will your dependencies well they still

00:08:09,000 --> 00:08:13,140
work when you upgrades and there's a

00:08:11,310 --> 00:08:15,930
quick way to do a first check and that's

00:08:13,140 --> 00:08:18,720
the can I use Python 3 package which

00:08:15,930 --> 00:08:20,820
does what it says on the turn so you pip

00:08:18,720 --> 00:08:23,930
install it and then you just run it on

00:08:20,820 --> 00:08:29,220
your dependencies from the command line

00:08:23,930 --> 00:08:31,050
in a variety of different ways can I use

00:08:29,220 --> 00:08:33,660
Python 3 relies on projects being

00:08:31,050 --> 00:08:35,760
classified on pi PI is supporting at

00:08:33,660 --> 00:08:38,580
least one version of Python 3 so it's

00:08:35,760 --> 00:08:42,870
not perfect it depends on you saying

00:08:38,580 --> 00:08:47,510
that your Python 3 compliant no Python 3

00:08:42,870 --> 00:08:47,510
compatible otherwise it won't find it

00:08:49,530 --> 00:08:54,460
so next there's a tool called 2 to 3

00:08:53,200 --> 00:08:56,980
which I think most people will have

00:08:54,460 --> 00:08:58,990
heard about it's usually installed with

00:08:56,980 --> 00:09:01,900
the Python interpreter as a script and

00:08:58,990 --> 00:09:04,480
it reads Python 2 codes and applies a

00:09:01,900 --> 00:09:09,520
series of fixes to transform it into

00:09:04,480 --> 00:09:13,770
valid Python 3 code so here is an

00:09:09,520 --> 00:09:16,870
example of a little Python 2.7 program

00:09:13,770 --> 00:09:18,220
that just takes some input from the

00:09:16,870 --> 00:09:20,650
command line and says hello to you

00:09:18,220 --> 00:09:24,610
welcome to Europe I thing whatever year

00:09:20,650 --> 00:09:26,080
you want so we just run it from the

00:09:24,610 --> 00:09:28,390
command line with a list of files or

00:09:26,080 --> 00:09:34,240
directories to transform so 2 to 3

00:09:28,390 --> 00:09:36,100
welcome to PI and 2 to 3 outputs a def

00:09:34,240 --> 00:09:38,800
of the fixes that it's going to make for

00:09:36,100 --> 00:09:44,410
Python 3 so you can see here it's

00:09:38,800 --> 00:09:47,680
identified print statements and the raw

00:09:44,410 --> 00:09:53,140
inputs that is two changes to input in

00:09:47,680 --> 00:10:01,570
Python 3 and it also picked up the

00:09:53,140 --> 00:10:04,210
change to the exception syntax so that's

00:10:01,570 --> 00:10:06,240
you know a useful first first start for

00:10:04,210 --> 00:10:06,240
us

00:10:06,270 --> 00:10:13,150
lensing you can also help you so

00:10:09,220 --> 00:10:14,970
violence has a pi3k flag which will

00:10:13,150 --> 00:10:18,220
highlight Python 3 in compatible codes

00:10:14,970 --> 00:10:22,980
so when you run it on our little example

00:10:18,220 --> 00:10:26,980
program it prints out a list of

00:10:22,980 --> 00:10:30,400
identified Python 3 issues note that

00:10:26,980 --> 00:10:35,680
it's identified this one which 2 to 3

00:10:30,400 --> 00:10:39,550
didn't so it's neither of them are

00:10:35,680 --> 00:10:44,470
perfect and you'd still need to review

00:10:39,550 --> 00:10:46,330
your codes but they can help so it's

00:10:44,470 --> 00:10:49,540
briefly a side note about supporting

00:10:46,330 --> 00:10:51,880
python 2 and 3 so our main projects our

00:10:49,540 --> 00:10:53,320
mapping project is end-user software

00:10:51,880 --> 00:10:55,780
it doesn't need to support external

00:10:53,320 --> 00:10:58,030
developers and we were happy to go

00:10:55,780 --> 00:11:00,190
python 3 all the way with it but we did

00:10:58,030 --> 00:11:02,200
have external dependencies

00:11:00,190 --> 00:11:06,160
and those need to continue to support

00:11:02,200 --> 00:11:09,180
both Python two and three and there are

00:11:06,160 --> 00:11:12,250
tools to help you with that too

00:11:09,180 --> 00:11:14,890
so future insects are libraries that

00:11:12,250 --> 00:11:17,830
provides utilities for writing python

00:11:14,890 --> 00:11:20,770
two and three compatible codes modernize

00:11:17,830 --> 00:11:22,960
is built on top of two to three it's

00:11:20,770 --> 00:11:25,090
used in a very similar way to two two to

00:11:22,960 --> 00:11:27,880
three but it's more conservative so it

00:11:25,090 --> 00:11:30,460
uses six to try and fix that code to be

00:11:27,880 --> 00:11:32,800
both Python two and three compatible

00:11:30,460 --> 00:11:40,510
rather than just changing it all to

00:11:32,800 --> 00:11:44,320
Python 3 tox is helpful to let you run

00:11:40,510 --> 00:11:46,510
your tests with specific environments so

00:11:44,320 --> 00:11:48,250
you can make sure that your your tests

00:11:46,510 --> 00:11:53,800
are going to run under every version of

00:11:48,250 --> 00:11:56,590
Python that you plan to support and the

00:11:53,800 --> 00:11:58,780
Python Docs and Django Docs also have a

00:11:56,590 --> 00:12:00,430
lot of useful information on porting to

00:11:58,780 --> 00:12:09,880
Python 3 by still maintaining

00:12:00,430 --> 00:12:15,400
compatibility with tightened to so going

00:12:09,880 --> 00:12:17,880
on to what we actually did first things

00:12:15,400 --> 00:12:23,770
first we needed Python 3 on our system

00:12:17,880 --> 00:12:26,410
we were we're on Ubuntu 1604 that ships

00:12:23,770 --> 00:12:30,760
with Python 3.5 but we went to python

00:12:26,410 --> 00:12:32,590
3.6 because f strings so there was a

00:12:30,760 --> 00:12:37,150
little bit more setup involved but only

00:12:32,590 --> 00:12:38,950
a little bit so we had to install these

00:12:37,150 --> 00:12:42,220
additional packages but that was pretty

00:12:38,950 --> 00:12:44,260
much it and other than that we were

00:12:42,220 --> 00:12:47,110
using virtual lengths with virtual and

00:12:44,260 --> 00:12:49,050
proper so we just specify our Python 3

00:12:47,110 --> 00:12:51,790
version when we create the virtual ends

00:12:49,050 --> 00:12:53,350
and that really wasn't that much else

00:12:51,790 --> 00:13:00,220
that we had to change and our deployment

00:12:53,350 --> 00:13:02,620
process that pretty much covered it so

00:13:00,220 --> 00:13:05,260
the first thing that we really needed to

00:13:02,620 --> 00:13:08,980
do and in terms of upgrading the code

00:13:05,260 --> 00:13:10,570
itself was some research so we need you

00:13:08,980 --> 00:13:13,260
need to learn about the differences the

00:13:10,570 --> 00:13:15,090
main differences between python 2 & 3

00:13:13,260 --> 00:13:17,640
the Unicode issue is the one that

00:13:15,090 --> 00:13:19,260
everyone knows about but there are lots

00:13:17,640 --> 00:13:22,740
of others and it's worth reading up on

00:13:19,260 --> 00:13:26,190
the differences before you start Python

00:13:22,740 --> 00:13:29,100
3 porting comm is a has a free online

00:13:26,190 --> 00:13:31,100
book it has guidance to porting to

00:13:29,100 --> 00:13:36,270
Python 3 and a pretty comprehensive

00:13:31,100 --> 00:13:38,850
description of the differences and the

00:13:36,270 --> 00:13:48,240
Python future projects cheat sheet which

00:13:38,850 --> 00:13:51,630
is here is is also a useful reference so

00:13:48,240 --> 00:13:53,910
next we had a look at the project's test

00:13:51,630 --> 00:13:55,620
coverage so we're going to use our

00:13:53,910 --> 00:13:57,570
unique unit tests as a tool to help

00:13:55,620 --> 00:14:00,000
figure out whether our graded code was

00:13:57,570 --> 00:14:02,310
working so it's important to have decent

00:14:00,000 --> 00:14:03,990
test coverage before we started I was

00:14:02,310 --> 00:14:06,900
could have been better but it was

00:14:03,990 --> 00:14:09,720
respectable so we didn't spend a lot of

00:14:06,900 --> 00:14:17,300
time improving test coverage

00:14:09,720 --> 00:14:20,760
specifically for doing this process so

00:14:17,300 --> 00:14:24,180
dependencies this is the one that tends

00:14:20,760 --> 00:14:26,190
to put people off upgrading so we want

00:14:24,180 --> 00:14:29,490
to use Python 3 but we rely on external

00:14:26,190 --> 00:14:32,340
dependencies and dependency x y&z

00:14:29,490 --> 00:14:34,770
doesn't support python 3 yet so we just

00:14:32,340 --> 00:14:36,540
give up until they do and for quite a

00:14:34,770 --> 00:14:38,220
long while that's as far as we got we

00:14:36,540 --> 00:14:40,530
periodically checked the blocking

00:14:38,220 --> 00:14:43,800
requirements and just put stuff off

00:14:40,530 --> 00:14:45,330
until it until the list looks better but

00:14:43,800 --> 00:14:47,490
by the end of last year our list of

00:14:45,330 --> 00:14:50,520
pending dependent pending dependencies

00:14:47,490 --> 00:14:55,250
was looking kind of manageable more and

00:14:50,520 --> 00:14:58,830
more packages of supporting Python 3 so

00:14:55,250 --> 00:15:04,350
this is the results when we round

00:14:58,830 --> 00:15:06,420
calories Python 3 it's doesn't look so

00:15:04,350 --> 00:15:09,480
good we've got 11 projects blocking our

00:15:06,420 --> 00:15:11,970
Python 3 upgrades we had about 75 total

00:15:09,480 --> 00:15:14,400
in our requirements file so it could

00:15:11,970 --> 00:15:16,620
have been worse but still

00:15:14,400 --> 00:15:18,840
but the thing things start to look up a

00:15:16,620 --> 00:15:26,180
bit when we when we look at the list in

00:15:18,840 --> 00:15:26,180
a bit more detail so 3 of these

00:15:26,350 --> 00:15:34,260
things that we didn't use anymore so we

00:15:28,899 --> 00:15:36,670
just took them out another four were

00:15:34,260 --> 00:15:39,220
they showed up because they they don't

00:15:36,670 --> 00:15:43,390
have Python versions identified in the

00:15:39,220 --> 00:15:44,829
classifiers classifiers on pi PI so they

00:15:43,390 --> 00:15:46,779
weren't currently identified by can I

00:15:44,829 --> 00:15:49,990
use Python three but they did all have

00:15:46,779 --> 00:15:54,760
Python 3 supported versions that we

00:15:49,990 --> 00:15:58,750
could upgrade to there was pythons

00:15:54,760 --> 00:16:00,940
grubber we check that out too that

00:15:58,750 --> 00:16:03,250
wasn't compatible but it also wasn't a

00:16:00,940 --> 00:16:05,350
very active package and it's a bit out

00:16:03,250 --> 00:16:06,640
of date and there was another more

00:16:05,350 --> 00:16:08,829
up-to-date package we could replace it

00:16:06,640 --> 00:16:14,829
with that did the same thing and was

00:16:08,829 --> 00:16:18,850
compatible so we did that instead django

00:16:14,829 --> 00:16:20,800
migration test case that one also wasn't

00:16:18,850 --> 00:16:22,450
compatible at the time but hopefully

00:16:20,800 --> 00:16:28,589
someone had already made a PRT

00:16:22,450 --> 00:16:33,010
to upgrade it so he's that then we had

00:16:28,589 --> 00:16:36,910
yes three FS yes three FS is a package

00:16:33,010 --> 00:16:40,329
for syncing your local files with s3

00:16:36,910 --> 00:16:41,980
that did cause us some issues it looked

00:16:40,329 --> 00:16:43,750
good to start with there was a poor

00:16:41,980 --> 00:16:46,630
across supporting Python 3 that had been

00:16:43,750 --> 00:16:50,350
merged but it turned out only to address

00:16:46,630 --> 00:16:53,279
a few fixes so we we added the remaining

00:16:50,350 --> 00:16:55,570
Python 3 support to that package and

00:16:53,279 --> 00:16:58,120
then the last one on here Jango hashed

00:16:55,570 --> 00:17:00,730
filename storage that's a library that

00:16:58,120 --> 00:17:03,250
we maintain a tea kimitaka so bad for

00:17:00,730 --> 00:17:05,470
not upgrading it sooner the same went

00:17:03,250 --> 00:17:07,750
for a couple of other dependencies that

00:17:05,470 --> 00:17:09,959
we install from private repos so we

00:17:07,750 --> 00:17:13,800
upgraded those ourselves we maintained

00:17:09,959 --> 00:17:16,510
Python 2 compatibility for other users

00:17:13,800 --> 00:17:18,970
we added cin talks to make sure that

00:17:16,510 --> 00:17:23,130
we're testing under multiple python

00:17:18,970 --> 00:17:25,990
versions and we keep our compatibility

00:17:23,130 --> 00:17:27,970
so then in the end we whittled this list

00:17:25,990 --> 00:17:29,530
down to only a few that really needed we

00:17:27,970 --> 00:17:35,410
really needed to put any significant

00:17:29,530 --> 00:17:37,650
efforts into fixing up so next was the

00:17:35,410 --> 00:17:39,180
exciting bit fixing the code

00:17:37,650 --> 00:17:41,430
actually updating the code is quite a

00:17:39,180 --> 00:17:42,870
daunting process to starts because you

00:17:41,430 --> 00:17:45,630
know that your changes are going to be

00:17:42,870 --> 00:17:47,610
so widespread throughout the project but

00:17:45,630 --> 00:17:49,340
in this respect it was kind of nice to

00:17:47,610 --> 00:17:51,660
be working with the Django projects

00:17:49,340 --> 00:17:55,290
where the code is mostly divided up

00:17:51,660 --> 00:17:58,590
nicely into Django apps so we worked out

00:17:55,290 --> 00:18:02,280
by app the first thing we did was to run

00:17:58,590 --> 00:18:05,130
two to three on the entire app keeping

00:18:02,280 --> 00:18:07,140
the backup files that two to three

00:18:05,130 --> 00:18:10,610
generates so that we could easily check

00:18:07,140 --> 00:18:12,870
back on the previous version of the code

00:18:10,610 --> 00:18:17,310
pretty much we just accepted all the

00:18:12,870 --> 00:18:20,610
changes that it suggested and then we

00:18:17,310 --> 00:18:22,620
ran the tests on just that up fixed the

00:18:20,610 --> 00:18:27,150
code as necessary until the tests were

00:18:22,620 --> 00:18:28,920
passing and committed the changes app by

00:18:27,150 --> 00:18:33,110
app made things a little bit easier for

00:18:28,920 --> 00:18:36,330
code review and then we run Django

00:18:33,110 --> 00:18:37,680
something invariably broke we'd fix it

00:18:36,330 --> 00:18:41,730
again until it ran it until it ran

00:18:37,680 --> 00:18:43,380
properly around the thing we ran the

00:18:41,730 --> 00:18:45,150
application so we could manually check

00:18:43,380 --> 00:18:53,910
the functional functionality of that

00:18:45,150 --> 00:18:58,440
that app and then we kind of proceeded

00:18:53,910 --> 00:19:03,300
to the next step so that got our code

00:18:58,440 --> 00:19:06,230
mostly working but the next step was to

00:19:03,300 --> 00:19:09,750
review it and refactor things

00:19:06,230 --> 00:19:12,960
so here again committing app by app was

00:19:09,750 --> 00:19:14,490
useful it helps keep things together it

00:19:12,960 --> 00:19:18,330
also made it easier for other people to

00:19:14,490 --> 00:19:20,250
code review my coat of years are

00:19:18,330 --> 00:19:21,360
actually in this room and will attest to

00:19:20,250 --> 00:19:28,530
the fact that it was still pretty

00:19:21,360 --> 00:19:32,190
horrible to do but in the previous step

00:19:28,530 --> 00:19:34,650
we we also just fixed stop code until

00:19:32,190 --> 00:19:36,120
the tests worked so now what we needed

00:19:34,650 --> 00:19:40,350
to do was to review the diffs more

00:19:36,120 --> 00:19:43,700
carefully in particular to fix up to two

00:19:40,350 --> 00:19:43,700
threes over conservativeness

00:19:48,760 --> 00:19:55,610
so two to three it's designed to convert

00:19:53,299 --> 00:19:58,789
Python C codes at me phallus Python

00:19:55,610 --> 00:20:02,539
three codes and for any version of

00:19:58,789 --> 00:20:05,179
Python in some cases it may add extra

00:20:02,539 --> 00:20:08,919
code that you don't actually want so the

00:20:05,179 --> 00:20:08,919
main cases we found of this were

00:20:11,200 --> 00:20:17,600
converting new iterators to Lists

00:20:14,990 --> 00:20:19,370
unnecessarily so whether you actually

00:20:17,600 --> 00:20:22,400
need to convert to a list depends on

00:20:19,370 --> 00:20:24,110
your current use case two to three tends

00:20:22,400 --> 00:20:25,789
to be over conservative and wrap

00:20:24,110 --> 00:20:32,150
everything in list when it isn't

00:20:25,789 --> 00:20:34,220
necessarily needed it also sometimes

00:20:32,150 --> 00:20:37,090
wrap print statements with extra

00:20:34,220 --> 00:20:40,340
parentheses especially if you've got

00:20:37,090 --> 00:20:54,650
prints prints statements that have been

00:20:40,340 --> 00:20:57,350
asbestos functions already there's also

00:20:54,650 --> 00:20:59,240
the specific case of is callable that

00:20:57,350 --> 00:21:02,750
was initially removed in Python 3 and

00:20:59,240 --> 00:21:04,280
reintroduced in Python 3.2 so it doesn't

00:21:02,750 --> 00:21:10,700
need to be replaced to newer Python

00:21:04,280 --> 00:21:14,230
versions but 2 to 3 still does it then

00:21:10,700 --> 00:21:16,309
we did quite a lot of refactoring so

00:21:14,230 --> 00:21:19,100
especially places where we've been doing

00:21:16,309 --> 00:21:21,070
manual bites of string conversions and

00:21:19,100 --> 00:21:22,850
it sometimes got a bit convoluted

00:21:21,070 --> 00:21:24,860
because we just done what was necessary

00:21:22,850 --> 00:21:28,730
to get tests to pass and get the app

00:21:24,860 --> 00:21:30,140
running with a bit more attention Python

00:21:28,730 --> 00:21:37,730
3 generally allowed us to simplify

00:21:30,140 --> 00:21:41,179
things quite a lot and then just as a

00:21:37,730 --> 00:21:44,659
warning if you use from future imports

00:21:41,179 --> 00:21:46,520
you know code literals it helps to keep

00:21:44,659 --> 00:21:48,409
your Python two and three compatibility

00:21:46,520 --> 00:21:53,059
but it does sometimes introduce some

00:21:48,409 --> 00:21:54,980
sort of subtle issues and Python future

00:21:53,059 --> 00:21:58,950
projects has has quite a good review of

00:21:54,980 --> 00:22:10,530
the pros and cons of both using that

00:21:58,950 --> 00:22:10,530
c23 compatibility so next up is linting

00:22:12,870 --> 00:22:17,590
so we didn't actually do this

00:22:14,980 --> 00:22:19,840
I wish we had but I didn't know about it

00:22:17,590 --> 00:22:21,460
and didn't discover it until later it

00:22:19,840 --> 00:22:25,120
would have definitely avoided a few a

00:22:21,460 --> 00:22:29,070
few issues but once your porting is done

00:22:25,120 --> 00:22:32,020
you can run pilant with the pi3k flag

00:22:29,070 --> 00:22:33,850
which will highlight some Python 3

00:22:32,020 --> 00:22:41,260
incompatible codes that your tests might

00:22:33,850 --> 00:22:43,420
not have found and then use the testing

00:22:41,260 --> 00:22:47,080
so we dedicated quite a lot of time to

00:22:43,420 --> 00:22:48,940
front-end manual testing it's tedious

00:22:47,080 --> 00:22:51,880
but it did find issues that our unit

00:22:48,940 --> 00:22:54,460
tests didn't and it's also useful for us

00:22:51,880 --> 00:22:56,170
to have our GIS specialists who are

00:22:54,460 --> 00:22:59,140
familiar with the platform data of units

00:22:56,170 --> 00:23:00,250
and make sure that process datasets look

00:22:59,140 --> 00:23:07,180
like they should and the queries

00:23:00,250 --> 00:23:08,800
generated expected results and then

00:23:07,180 --> 00:23:10,570
everything was going so well we thought

00:23:08,800 --> 00:23:12,730
we were more or less done and we ran

00:23:10,570 --> 00:23:20,800
into one final hurdle which is this

00:23:12,730 --> 00:23:22,120
library called G Delta MB tiles so T

00:23:20,800 --> 00:23:24,190
cells MB tiles is a library that

00:23:22,120 --> 00:23:26,530
generates mapping tiles from D reference

00:23:24,190 --> 00:23:30,580
files and lets you display them with a

00:23:26,530 --> 00:23:33,640
mapping library like map dot map box it

00:23:30,580 --> 00:23:37,000
has some extra fiddling us around

00:23:33,640 --> 00:23:39,340
installing we install it separately in

00:23:37,000 --> 00:23:40,750
our deployment steps it's also minimally

00:23:39,340 --> 00:23:42,610
used in the mapping projects it's kind

00:23:40,750 --> 00:23:44,290
of used in a site one so it slipped

00:23:42,610 --> 00:23:46,150
under the radar when we were assessing

00:23:44,290 --> 00:23:48,940
dependencies and during our initial

00:23:46,150 --> 00:23:51,820
testing and upgrading it turned out to

00:23:48,940 --> 00:23:54,010
be a mammoth task that I don't have time

00:23:51,820 --> 00:23:56,080
to go into but just when we thought we

00:23:54,010 --> 00:23:57,880
were more or less done so the moral of

00:23:56,080 --> 00:24:01,800
the story is check all your dependencies

00:23:57,880 --> 00:24:01,800
no matter where they're coming from so

00:24:02,400 --> 00:24:07,690
there were a bunch of gotchas that we

00:24:05,860 --> 00:24:10,730
encountered things that tripped us up

00:24:07,690 --> 00:24:12,080
along the way most of them were result

00:24:10,730 --> 00:24:13,700
of lack of thoroughness in the first

00:24:12,080 --> 00:24:14,900
step when we should have been learning

00:24:13,700 --> 00:24:17,000
about the Python two to three

00:24:14,900 --> 00:24:20,299
differences but some are maybe a little

00:24:17,000 --> 00:24:23,210
bit less less immediately obvious a

00:24:20,299 --> 00:24:25,990
little bit more obscure not necessarily

00:24:23,210 --> 00:24:29,090
identified by things like two to three

00:24:25,990 --> 00:24:31,120
one is rounding so the rounding

00:24:29,090 --> 00:24:33,380
strategy's changed in Python three

00:24:31,120 --> 00:24:35,299
python two it works the way you were

00:24:33,380 --> 00:24:39,260
taught at school exact halves are

00:24:35,299 --> 00:24:43,190
rounded away from zero so rounding 2.5

00:24:39,260 --> 00:24:47,780
gives you three rounds in 3.5 to 4 in

00:24:43,190 --> 00:24:52,340
Python 3 that's changed and exact halves

00:24:47,780 --> 00:24:55,880
are rounded to the nearest even this is

00:24:52,340 --> 00:24:57,169
bakers bankers rounding it's the

00:24:55,880 --> 00:24:58,850
advantage is supposed to be that it's

00:24:57,169 --> 00:25:01,580
unbiased so it produces better results

00:24:58,850 --> 00:25:04,220
than with operations that involve

00:25:01,580 --> 00:25:08,630
rounding whereas the old way is biased

00:25:04,220 --> 00:25:11,750
towards the upper value but but now

00:25:08,630 --> 00:25:14,990
rounding 2.5 will give you to 3.5 still

00:25:11,750 --> 00:25:18,610
gives you 4 but it may introduce bugs

00:25:14,990 --> 00:25:18,610
that you didn't necessarily expect

00:25:22,330 --> 00:25:29,450
exceptions the exception dot message no

00:25:26,299 --> 00:25:32,840
longer exists exceptions if your if your

00:25:29,450 --> 00:25:34,250
tests don't actually check for every

00:25:32,840 --> 00:25:37,010
exception that you have then you may

00:25:34,250 --> 00:25:40,970
miss them this doesn't get picked up by

00:25:37,010 --> 00:25:42,980
2 to 3 if you've got custom defined

00:25:40,970 --> 00:25:46,760
exceptions they may have a message

00:25:42,980 --> 00:25:48,890
attribute Django has some so you kinda

00:25:46,760 --> 00:25:52,030
need to check anything that's not a core

00:25:48,890 --> 00:26:00,620
exception and find out whether the the

00:25:52,030 --> 00:26:05,240
message attribute is valid or not hash

00:26:00,620 --> 00:26:07,070
so in Python 3.3 and up the inbuilt hash

00:26:05,240 --> 00:26:09,500
function uses a random seed for each

00:26:07,070 --> 00:26:11,540
Python process and that means that hash

00:26:09,500 --> 00:26:15,590
returns different values in different

00:26:11,540 --> 00:26:17,210
Python processors that was introduced to

00:26:15,590 --> 00:26:19,280
adjust the security vulnerability so

00:26:17,210 --> 00:26:21,740
while you can turn it off you really

00:26:19,280 --> 00:26:23,270
shouldn't and in a few places we were

00:26:21,740 --> 00:26:26,720
using hash on

00:26:23,270 --> 00:26:28,220
keys which meant that when we one of you

00:26:26,720 --> 00:26:31,780
had a new Python process you didn't find

00:26:28,220 --> 00:26:34,510
your your own cached items anymore

00:26:31,780 --> 00:26:37,720
pickle also turned out to be a problem

00:26:34,510 --> 00:26:41,030
so objects that are pickled in Python to

00:26:37,720 --> 00:26:42,800
give you you know codes errors in place

00:26:41,030 --> 00:26:47,390
when you try to UM pickle them in Python

00:26:42,800 --> 00:26:50,750
3 the pickle protocols are also changed

00:26:47,390 --> 00:26:53,030
so you have 0 to 2 and Python to 0 to 4

00:26:50,750 --> 00:26:55,130
in Python 3 so if you need to load

00:26:53,030 --> 00:26:56,360
objects pickled in Python to buy them 3

00:26:55,130 --> 00:27:00,410
you have to make sure you specify the

00:26:56,360 --> 00:27:02,810
right protocol and if you're using

00:27:00,410 --> 00:27:05,150
Django Redis that defaults to the latest

00:27:02,810 --> 00:27:12,290
protocol so if you're using the default

00:27:05,150 --> 00:27:14,090
it won't work in Python 3 sorting and

00:27:12,290 --> 00:27:16,010
comparing things I don't really have

00:27:14,090 --> 00:27:19,400
time to go through that much but you no

00:27:16,010 --> 00:27:19,850
need to be using the same type in Python

00:27:19,400 --> 00:27:22,670
00:27:19,850 --> 00:27:24,980
you'll get errors if you don't and it

00:27:22,670 --> 00:27:30,170
couldn't sometimes give you some some

00:27:24,980 --> 00:27:32,270
odd bugs that you didn't expect so this

00:27:30,170 --> 00:27:37,820
is just from a rough estimate if the get

00:27:32,270 --> 00:27:40,300
commits on the core mapping projects so

00:27:37,820 --> 00:27:42,800
for our lessons learned from this well

00:27:40,300 --> 00:27:45,110
upgrading any projects of Python 3 is

00:27:42,800 --> 00:27:47,150
going to be hard work it doesn't have to

00:27:45,110 --> 00:27:48,830
be too painful it went more smoothly

00:27:47,150 --> 00:27:52,130
than we expected really once we got

00:27:48,830 --> 00:27:55,190
started if you're not quite ready to

00:27:52,130 --> 00:27:57,380
embark on your Python 3 upgrades yet you

00:27:55,190 --> 00:28:00,290
can make your Python 2 code Python 3

00:27:57,380 --> 00:28:01,430
compatible as much as possible and in

00:28:00,290 --> 00:28:03,560
the more recent parts of the code base

00:28:01,430 --> 00:28:07,190
where we did this upgrading was much

00:28:03,560 --> 00:28:09,920
simpler being familiar with the changes

00:28:07,190 --> 00:28:11,480
it's really useful it also lets you know

00:28:09,920 --> 00:28:17,120
what new things you can take advantage

00:28:11,480 --> 00:28:19,400
of 2 to 3 is really good it's a

00:28:17,120 --> 00:28:20,840
fantastic tool but it can only do so

00:28:19,400 --> 00:28:23,900
much so you really interview everything

00:28:20,840 --> 00:28:28,100
that it does you can't rely on it to

00:28:23,900 --> 00:28:30,800
find everything tests your friend if

00:28:28,100 --> 00:28:32,420
your test Suites covers more your major

00:28:30,800 --> 00:28:35,570
code paths and you can be reasonably

00:28:32,420 --> 00:28:37,820
confident in your code is working check

00:28:35,570 --> 00:28:39,680
all your dependencies

00:28:37,820 --> 00:28:43,280
not just the ones in your requirement

00:28:39,680 --> 00:28:44,840
file and lastly be prepared to spend

00:28:43,280 --> 00:28:47,600
some time upgrading third-party

00:28:44,840 --> 00:28:49,340
libraries don't give up or justify

00:28:47,600 --> 00:28:50,600
putting off your upgrades just because

00:28:49,340 --> 00:28:52,810
the main tailors haven't done it for you

00:28:50,600 --> 00:28:52,810
yet

00:28:53,870 --> 00:29:05,480
that's it for me thank you there's some

00:29:02,800 --> 00:29:08,000
resources on things that I didn't go

00:29:05,480 --> 00:29:10,330
into in much detail and I'll upload the

00:29:08,000 --> 00:29:10,330

YouTube URL: https://www.youtube.com/watch?v=h5tmNkyNAKs


