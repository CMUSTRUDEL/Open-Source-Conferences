Title: EuroPython 2018 - Lightning talks on Wednesday, July 25
Publication date: 2018-08-22
Playlist: EuroPython 2018
Description: 
	Lightning talks
[EuroPython 2018 -  - 2018-07-25 - Smarkets]
[Edinburgh, UK]




License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2018.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:00,000 --> 00:00:04,350
I will hand over to our first lightning

00:00:01,920 --> 00:00:05,580
talk speaker who is Peter Hoffman he's

00:00:04,350 --> 00:00:10,889
going to give us a pitch for a pike on

00:00:05,580 --> 00:00:13,860
de stops I thought we have only one

00:00:10,889 --> 00:00:16,139
minute so let's go I want to invite you

00:00:13,860 --> 00:00:18,300
to Germany the southern part of Germany

00:00:16,139 --> 00:00:20,369
and I city of Casas where we have the

00:00:18,300 --> 00:00:22,980
pike on and apply data there last year

00:00:20,369 --> 00:00:25,050
we are doing this this time for the

00:00:22,980 --> 00:00:27,449
second time let's give you some

00:00:25,050 --> 00:00:29,340
impressions we have a really nice venue

00:00:27,449 --> 00:00:33,329
with the Center for Arden media and cars

00:00:29,340 --> 00:00:35,100
last year we had great talks about how

00:00:33,329 --> 00:00:37,079
the universe and the structure and

00:00:35,100 --> 00:00:40,200
everything fits together we had keynotes

00:00:37,079 --> 00:00:42,719
from Matthew Rocklin so I just want you

00:00:40,200 --> 00:00:46,079
to invite to come to cars who talk to us

00:00:42,719 --> 00:00:49,559
we are the organizers there's the many

00:00:46,079 --> 00:00:52,110
more organizers here and one small

00:00:49,559 --> 00:00:54,570
announcement we have the first keynote

00:00:52,110 --> 00:00:56,760
speaker confirmed so Wes McKinney will

00:00:54,570 --> 00:00:58,949
be in Germany so if you ever want to

00:00:56,760 --> 00:01:01,559
rant about pandas or ask him some

00:00:58,949 --> 00:01:02,910
questions why the indexing works like it

00:01:01,559 --> 00:01:09,150
works this is your chance

00:01:02,910 --> 00:01:10,549
so it's see you in Germany thank you

00:01:09,150 --> 00:01:12,990
Peter

00:01:10,549 --> 00:01:13,670
MC oh you ready to go okay I'll let you

00:01:12,990 --> 00:01:17,509
go

00:01:13,670 --> 00:01:17,509
all right thank you

00:01:17,799 --> 00:01:23,350
so I'm Nicolas I'm the chair for Python

00:01:20,890 --> 00:01:26,350
Ireland and we organise a yearly

00:01:23,350 --> 00:01:28,570
conference about Python to PyCon ie so

00:01:26,350 --> 00:01:29,860
this year will be the 10th and 11th of

00:01:28,570 --> 00:01:33,310
November

00:01:29,860 --> 00:01:35,860
lots of hashtags email link so you can

00:01:33,310 --> 00:01:39,369
find me around we're looking for more

00:01:35,860 --> 00:01:41,939
speakers of course sponsorships is still

00:01:39,369 --> 00:01:46,000
available and an extra news about

00:01:41,939 --> 00:01:48,880
Ireland and Python we have 40 pilot

00:01:46,000 --> 00:01:50,590
school starting Python in high school

00:01:48,880 --> 00:01:52,569
now and there will be a first sitting

00:01:50,590 --> 00:01:58,630
exam in Python or for living cert in

00:01:52,569 --> 00:01:59,950
2020 so that's something interesting so

00:01:58,630 --> 00:02:02,099
if you have experience in teaching

00:01:59,950 --> 00:02:04,840
computer science and want to help that

00:02:02,099 --> 00:02:06,670
you know settle properly in a long time

00:02:04,840 --> 00:02:08,990
come to me as well I'll be around all

00:02:06,670 --> 00:02:10,090
week thank you thank you very much

00:02:08,990 --> 00:02:13,169
[Applause]

00:02:10,090 --> 00:02:13,169
[Music]

00:02:16,020 --> 00:02:21,510
so hi I'm Melinda press key and I'm

00:02:18,630 --> 00:02:24,030
going to try to convince you that then

00:02:21,510 --> 00:02:27,590
of Python is actually harmful for the

00:02:24,030 --> 00:02:31,970
Python community and Python programming

00:02:27,590 --> 00:02:33,770
so yeah the you know Zen is the Japanese

00:02:31,970 --> 00:02:36,390
philosophical thing there is a

00:02:33,770 --> 00:02:39,810
competition to that code Tao which is

00:02:36,390 --> 00:02:42,600
Chinese and one of the translations of

00:02:39,810 --> 00:02:44,550
one of the parts of Tao is when the way

00:02:42,600 --> 00:02:46,680
is forgotten duty and justice appeared

00:02:44,550 --> 00:02:52,100
then knowledge and wisdom aboard and

00:02:46,680 --> 00:02:54,690
along with hypocrisy and the thing is

00:02:52,100 --> 00:02:59,250
you know what's actually is enough

00:02:54,690 --> 00:03:02,310
Python so it's it was an email posted by

00:02:59,250 --> 00:03:05,640
Tim patters on the Python developers

00:03:02,310 --> 00:03:10,290
mailing list quite a bit ago there

00:03:05,640 --> 00:03:14,130
wasn't Python 3 yet and it was actually

00:03:10,290 --> 00:03:17,250
a summary of some rules of thumb that he

00:03:14,130 --> 00:03:19,140
observed being used when when deciding

00:03:17,250 --> 00:03:22,710
whether to put something into python or

00:03:19,140 --> 00:03:25,340
not and whether how to design it and it

00:03:22,710 --> 00:03:29,370
was humorous it was actually a joke

00:03:25,340 --> 00:03:31,890
unfortunately not everybody got it so it

00:03:29,370 --> 00:03:34,590
got added to Python as an easter egg you

00:03:31,890 --> 00:03:37,650
can actually type import this to get it

00:03:34,590 --> 00:03:43,320
displayed and it is actually used

00:03:37,650 --> 00:03:45,960
sometimes as a weapon to you know cut

00:03:43,320 --> 00:03:49,230
discussion and said ok this is against

00:03:45,960 --> 00:03:52,740
end of Python we we won't have it or you

00:03:49,230 --> 00:03:55,650
know a part of it is gets quoted as an

00:03:52,740 --> 00:03:57,690
argument against something which is very

00:03:55,650 --> 00:04:01,860
strange because the way it is structured

00:03:57,690 --> 00:04:04,980
the way why it's called then is because

00:04:01,860 --> 00:04:06,900
every other sentence is a negation of

00:04:04,980 --> 00:04:12,420
the previous one so you can pretty much

00:04:06,900 --> 00:04:15,660
say anything you want anyway so here are

00:04:12,420 --> 00:04:17,460
some examples of how the Python

00:04:15,660 --> 00:04:21,390
developers themselves don't don't

00:04:17,460 --> 00:04:22,650
actually follow it so first it's simple

00:04:21,390 --> 00:04:25,470
it's better than complex and that's

00:04:22,650 --> 00:04:29,780
obviously excellent advice so recently

00:04:25,470 --> 00:04:29,780
there was a new implementation of the

00:04:30,150 --> 00:04:35,200
in Python that is obviously much better

00:04:33,580 --> 00:04:39,430
than the previous one it uses less

00:04:35,200 --> 00:04:43,360
memory it's faster however it makes the

00:04:39,430 --> 00:04:45,670
ticked sorted and because of that the

00:04:43,360 --> 00:04:49,060
definition of Python as a language is

00:04:45,670 --> 00:04:53,340
was changed to include that into dicta

00:04:49,060 --> 00:04:56,260
that bits are sorted and one of the

00:04:53,340 --> 00:04:58,330
features of complexity is that you end

00:04:56,260 --> 00:05:00,760
twine the implementation with the

00:04:58,330 --> 00:05:03,310
definition with with your API and in

00:05:00,760 --> 00:05:04,930
this case that's actually damaged a

00:05:03,310 --> 00:05:07,420
little bit the micro Python which

00:05:04,930 --> 00:05:09,460
doesn't can't use this particular

00:05:07,420 --> 00:05:13,240
implementation because of memory limits

00:05:09,460 --> 00:05:15,760
and now it has a problem because micro

00:05:13,240 --> 00:05:19,170
Python sticks are not sorted and will

00:05:15,760 --> 00:05:21,280
not be so it's not Python any more

00:05:19,170 --> 00:05:23,380
explicit is better than implicit you

00:05:21,280 --> 00:05:26,380
know this super call that everybody

00:05:23,380 --> 00:05:30,130
complained about in Python 3 that has

00:05:26,380 --> 00:05:32,440
been shortened to implicitly take all

00:05:30,130 --> 00:05:37,180
the arguments that it needs from from

00:05:32,440 --> 00:05:40,930
your local scope and yeah that breaks

00:05:37,180 --> 00:05:43,600
this advice obviously flat is better

00:05:40,930 --> 00:05:46,330
than nested but recently in Python 3 we

00:05:43,600 --> 00:05:48,760
see a lots more use of the whiff

00:05:46,330 --> 00:05:51,340
statement it gets into the standard

00:05:48,760 --> 00:05:55,690
library a lot we seen it in the keynote

00:05:51,340 --> 00:05:58,870
today morning it's getting used a lot

00:05:55,690 --> 00:06:03,190
and what it does it lets you do your

00:05:58,870 --> 00:06:05,230
custom nested things in Python errors

00:06:03,190 --> 00:06:07,330
should never passed silently so they

00:06:05,230 --> 00:06:09,850
recently fixed actually this is a fixed

00:06:07,330 --> 00:06:12,130
back so kudos to that Oh at least they

00:06:09,850 --> 00:06:14,590
would silently ignore all files it

00:06:12,130 --> 00:06:16,930
couldn't convert to Unicode on in your

00:06:14,590 --> 00:06:21,100
local file system without raising any

00:06:16,930 --> 00:06:23,020
errors yeah there should be one and

00:06:21,100 --> 00:06:25,870
preferably only one obvious way to do it

00:06:23,020 --> 00:06:28,480
so we have now three or four ways of

00:06:25,870 --> 00:06:30,880
formatting strings in Python admittedly

00:06:28,480 --> 00:06:32,560
it next to each next one is better than

00:06:30,880 --> 00:06:37,110
the previous but you still have to learn

00:06:32,560 --> 00:06:37,110
all three to understand code

00:06:41,360 --> 00:06:46,560
namespaces are one honking great idea

00:06:43,590 --> 00:06:48,570
this is the last point and actually it

00:06:46,560 --> 00:06:51,750
I'm shocked because there was no

00:06:48,570 --> 00:06:56,700
namespace added to Python since that was

00:06:51,750 --> 00:07:00,270
published and it says let's do more of

00:06:56,700 --> 00:07:03,650
those even even feels like the type

00:07:00,270 --> 00:07:06,630
annotations with like beg for a separate

00:07:03,650 --> 00:07:09,360
namespace you don't want to use the same

00:07:06,630 --> 00:07:10,800
names for types for type add notation as

00:07:09,360 --> 00:07:13,020
you have in your code because you know

00:07:10,800 --> 00:07:14,450
don't use them in your code anywhere you

00:07:13,020 --> 00:07:18,510
don't need them in the same namespace

00:07:14,450 --> 00:07:22,470
now they are in the global namespace so

00:07:18,510 --> 00:07:24,990
yeah the thing is once things are

00:07:22,470 --> 00:07:27,270
written down you forget about them you

00:07:24,990 --> 00:07:30,540
you get them out of your head on top the

00:07:27,270 --> 00:07:33,480
paper and they become Dogma and you can

00:07:30,540 --> 00:07:37,380
only use them as you know love advocates

00:07:33,480 --> 00:07:39,750
and as a weapon but what's important is

00:07:37,380 --> 00:07:43,650
the process that actually produces

00:07:39,750 --> 00:07:45,960
produced those rules we we can reuse the

00:07:43,650 --> 00:07:48,270
same process again to produce new rules

00:07:45,960 --> 00:07:50,070
when the situation changes and this way

00:07:48,270 --> 00:07:56,450
the language and the community will be

00:07:50,070 --> 00:07:59,580
alive so so don't be you know like

00:07:56,450 --> 00:08:03,330
language lawyer don't be a sign of

00:07:59,580 --> 00:08:06,930
Python lawyer don't follow the rules

00:08:03,330 --> 00:08:09,930
strictly just just think about what

00:08:06,930 --> 00:08:13,950
actually how they were actually came up

00:08:09,930 --> 00:08:15,270
to how they were produced and and okay

00:08:13,950 --> 00:08:16,900
randomized thank you very much thank you

00:08:15,270 --> 00:08:24,030
big round of applause please

00:08:16,900 --> 00:08:26,800
[Applause]

00:08:24,030 --> 00:08:28,690
hi my name is Sebastian and I would like

00:08:26,800 --> 00:08:30,370
to talk with you about keyboards those

00:08:28,690 --> 00:08:33,310
beautiful creatures that are so

00:08:30,370 --> 00:08:34,599
perfectly designed that after hours and

00:08:33,310 --> 00:08:36,430
hours of using them every day they

00:08:34,599 --> 00:08:38,399
leaves us with nothing less but the

00:08:36,430 --> 00:08:40,930
feeling of ultimate satisfaction right

00:08:38,399 --> 00:08:42,820
well except that they are not perfectly

00:08:40,930 --> 00:08:45,490
designed but it actually took me a

00:08:42,820 --> 00:08:47,140
couple of years to notice it I remember

00:08:45,490 --> 00:08:49,149
when I first discovered that some people

00:08:47,140 --> 00:08:51,760
are swapping the Escape key and capslock

00:08:49,149 --> 00:08:53,800
and I thought wow it's actually amazing

00:08:51,760 --> 00:08:55,779
I mean when you think about it the

00:08:53,800 --> 00:08:58,959
capsule key is one of the biggest keys

00:08:55,779 --> 00:09:00,310
out there and you only really use it

00:08:58,959 --> 00:09:03,730
with me to argue with someone on

00:09:00,310 --> 00:09:05,410
Facebook while the Escape key use it way

00:09:03,730 --> 00:09:07,930
more often even if you're not a pin

00:09:05,410 --> 00:09:10,839
programmer but it's way smaller and it's

00:09:07,930 --> 00:09:12,700
quite in conveniently located so I

00:09:10,839 --> 00:09:17,260
swapped those two together and I was

00:09:12,700 --> 00:09:18,970
very happy until I got this guy so

00:09:17,260 --> 00:09:21,339
apparently Apple decided that you won't

00:09:18,970 --> 00:09:23,620
be able to swap the Escape key from the

00:09:21,339 --> 00:09:25,330
touchpad with any other key so I was

00:09:23,620 --> 00:09:27,670
stuck with two escapees one on the

00:09:25,330 --> 00:09:31,089
touchpad one on the caps lock and no cap

00:09:27,670 --> 00:09:32,580
stock key which was bad I mean what if

00:09:31,089 --> 00:09:35,080
someone is wrong on the Internet

00:09:32,580 --> 00:09:36,850
how can I keep my discussions to a

00:09:35,080 --> 00:09:39,250
typical Internet level if I cannot turn

00:09:36,850 --> 00:09:41,230
on the cap stock so I had to I had to

00:09:39,250 --> 00:09:43,660
find a solution and I did a bit of

00:09:41,230 --> 00:09:44,920
reading and I found something that is I

00:09:43,660 --> 00:09:47,320
think the most clever solution I have

00:09:44,920 --> 00:09:49,390
seen in my life you see someone came up

00:09:47,320 --> 00:09:51,190
with an idea to map pressing both shift

00:09:49,390 --> 00:09:52,930
keys at the same time to activating caps

00:09:51,190 --> 00:09:55,120
lock so you press both shift keys you

00:09:52,930 --> 00:09:56,470
activate the cap song we perhaps you

00:09:55,120 --> 00:09:58,540
press both shift keys again you

00:09:56,470 --> 00:10:00,760
deactivate it again once I saw it I

00:09:58,540 --> 00:10:02,529
thought this is brilliant Edwards only

00:10:00,760 --> 00:10:04,750
not with not only with the MacBooks it

00:10:02,529 --> 00:10:07,089
works with any keyboard and it's very

00:10:04,750 --> 00:10:09,880
nice trick so that made me think about

00:10:07,089 --> 00:10:11,589
productivity like are there any other

00:10:09,880 --> 00:10:13,089
ways that I can improve the way I work

00:10:11,589 --> 00:10:14,770
so I did a bit of reading and I found

00:10:13,089 --> 00:10:17,920
this getting things done book by David

00:10:14,770 --> 00:10:20,200
Allen it was mentioned on many websites

00:10:17,920 --> 00:10:22,290
related with productivity and had a lot

00:10:20,200 --> 00:10:24,940
of review so I thought it has to be good

00:10:22,290 --> 00:10:28,000
it wasn't

00:10:24,940 --> 00:10:29,890
I mean the book is okay but it talks

00:10:28,000 --> 00:10:31,180
mostly about creating lists and if you

00:10:29,890 --> 00:10:32,920
have been working for a while you

00:10:31,180 --> 00:10:34,780
probably already figure out that making

00:10:32,920 --> 00:10:36,940
the lists of things that you have to do

00:10:34,780 --> 00:10:39,160
will help you so I was a bit

00:10:36,940 --> 00:10:41,710
disappointed and I tried to find other

00:10:39,160 --> 00:10:43,630
ways and what I found is that what

00:10:41,710 --> 00:10:45,760
really works well for me are all small

00:10:43,630 --> 00:10:47,770
tips that I can start using right away

00:10:45,760 --> 00:10:49,570
not like whole methodologies that will

00:10:47,770 --> 00:10:51,670
require me to change the way I work

00:10:49,570 --> 00:10:53,740
but those tips are not easy to find I

00:10:51,670 --> 00:10:55,240
mean people don't write books about

00:10:53,740 --> 00:10:57,940
productivity tips people write books

00:10:55,240 --> 00:10:58,990
about methodologies and sometimes you

00:10:57,940 --> 00:11:00,520
don't even know that something is

00:10:58,990 --> 00:11:01,870
possible so you don't try to improve it

00:11:00,520 --> 00:11:04,420
like I didn't know that you can actually

00:11:01,870 --> 00:11:05,980
map keys on your keyboard so I'm gonna

00:11:04,420 --> 00:11:09,010
share with you a couple of things that I

00:11:05,980 --> 00:11:11,950
found and maybe someone some some of you

00:11:09,010 --> 00:11:13,600
will find it useful most of you probably

00:11:11,950 --> 00:11:15,550
already heard about the dot files like

00:11:13,600 --> 00:11:17,050
if not then you should really check them

00:11:15,550 --> 00:11:18,760
out those are basically like

00:11:17,050 --> 00:11:20,680
configuration files for your computers

00:11:18,760 --> 00:11:22,210
so you can store them on github and you

00:11:20,680 --> 00:11:24,370
can download them on each new machine

00:11:22,210 --> 00:11:26,050
that we'll be using and that way you'll

00:11:24,370 --> 00:11:29,110
immediately have all your settings or

00:11:26,050 --> 00:11:30,670
your commas or your shortcuts back I'll

00:11:29,110 --> 00:11:33,330
actually have a link to the slides so we

00:11:30,670 --> 00:11:35,740
can check the source don't take pictures

00:11:33,330 --> 00:11:37,750
and the same applies to beam you can

00:11:35,740 --> 00:11:39,430
configure all your shortcuts or your

00:11:37,750 --> 00:11:42,400
plugins or your mappings by editing just

00:11:39,430 --> 00:11:44,290
one file and it also applies to get I

00:11:42,400 --> 00:11:46,060
mean you can define some one or

00:11:44,290 --> 00:11:47,500
two-letter shortcuts for the most common

00:11:46,060 --> 00:11:48,580
commands that you're using but you can

00:11:47,500 --> 00:11:50,530
actually write some more advanced

00:11:48,580 --> 00:11:52,600
functions like I have a function that

00:11:50,530 --> 00:11:53,980
will squash together last and commits or

00:11:52,600 --> 00:11:55,420
I have a different function that will

00:11:53,980 --> 00:11:57,220
check out the pull request from github

00:11:55,420 --> 00:11:59,680
to a separate branch so I can view the

00:11:57,220 --> 00:12:01,660
code there and there is no way I would

00:11:59,680 --> 00:12:03,010
remember how to do this from the top of

00:12:01,660 --> 00:12:05,830
my head without take check in Stack

00:12:03,010 --> 00:12:08,560
Overflow but once you put it in this git

00:12:05,830 --> 00:12:10,570
config it's super easy to use coming

00:12:08,560 --> 00:12:11,890
back to them for a moment I don't use

00:12:10,570 --> 00:12:14,110
beam very often but I found a very

00:12:11,890 --> 00:12:16,330
useful tip use a space bar as a leader

00:12:14,110 --> 00:12:18,160
key it's much bigger it's centrally

00:12:16,330 --> 00:12:20,230
located you can reach it with both hands

00:12:18,160 --> 00:12:23,710
so it's gonna be way easier to use the

00:12:20,230 --> 00:12:25,360
default backslash and one thing that I

00:12:23,710 --> 00:12:27,640
notice is that each time I log in to

00:12:25,360 --> 00:12:28,300
ipython the production machines to do

00:12:27,640 --> 00:12:31,150
some debugging

00:12:28,300 --> 00:12:32,770
I always have to use I quite often use

00:12:31,150 --> 00:12:35,470
the same comments and that requires me

00:12:32,770 --> 00:12:38,350
to type from for import bar each time so

00:12:35,470 --> 00:12:39,010
that's annoying and apparently there is

00:12:38,350 --> 00:12:41,050
a way to config

00:12:39,010 --> 00:12:42,850
right Python so each time you started it

00:12:41,050 --> 00:12:43,950
will execute some arbitrary code so this

00:12:42,850 --> 00:12:46,150
is pretty nice

00:12:43,950 --> 00:12:47,440
and speaking of typing the same stuff

00:12:46,150 --> 00:12:48,940
over and over again there are some

00:12:47,440 --> 00:12:50,440
phrases that you probably typed quite

00:12:48,940 --> 00:12:52,300
often like your full name your home

00:12:50,440 --> 00:12:54,850
address your email or whatever your

00:12:52,300 --> 00:12:56,290
signature of your email and so you can

00:12:54,850 --> 00:12:58,600
use a text expander that will take like

00:12:56,290 --> 00:13:01,720
a small block of text and expand it to

00:12:58,600 --> 00:13:04,990
predefined sentences so it's basically

00:13:01,720 --> 00:13:06,610
like code snippets in real life so here

00:13:04,990 --> 00:13:08,440
are just a few of my productivity tips

00:13:06,610 --> 00:13:10,090
and I know that there is a lot of people

00:13:08,440 --> 00:13:12,190
here who have their own shortcuts their

00:13:10,090 --> 00:13:14,680
own mappings their own settings that

00:13:12,190 --> 00:13:15,970
make the their life much easier so I

00:13:14,680 --> 00:13:19,000
would really love to talk with you guys

00:13:15,970 --> 00:13:21,400
so if you can find me I will be here

00:13:19,000 --> 00:13:23,320
until Friday or if you can't find me

00:13:21,400 --> 00:13:25,390
just ping me on Twitter and the slides

00:13:23,320 --> 00:13:27,850
with links to those files are available

00:13:25,390 --> 00:13:35,260
there thank you okay thanks very much

00:13:27,850 --> 00:13:37,930
Sebastian okay hello everyone

00:13:35,260 --> 00:13:40,120
say I'm Tony I'm gonna talk about Point

00:13:37,930 --> 00:13:41,560
Break so I don't know what I'm doing my

00:13:40,120 --> 00:13:45,040
life but I seem to spend an awful lot of

00:13:41,560 --> 00:13:48,340
time in gdb and other debuggers I found

00:13:45,040 --> 00:13:50,590
that using a debugger is especially with

00:13:48,340 --> 00:13:52,420
the complicated program is is the

00:13:50,590 --> 00:13:54,190
tedious process using a debugger

00:13:52,420 --> 00:13:55,600
manually quite often I'll get to the

00:13:54,190 --> 00:13:59,070
point I want to debug in and I'll do the

00:13:55,600 --> 00:13:59,070
wrong thing and then I have to redo all

00:13:59,340 --> 00:14:03,520
particularly when you're debugging a

00:14:01,810 --> 00:14:04,960
complicated program something unexpected

00:14:03,520 --> 00:14:08,650
might happen and again you have to redo

00:14:04,960 --> 00:14:10,000
everything it's really annoying and also

00:14:08,650 --> 00:14:12,310
quite often I want to not necessarily

00:14:10,000 --> 00:14:13,840
directly debug something but monitor

00:14:12,310 --> 00:14:15,520
something or investigate something my

00:14:13,840 --> 00:14:17,950
program they may be log something or

00:14:15,520 --> 00:14:20,530
just fine use something like a debugger

00:14:17,950 --> 00:14:23,020
to find out what's going on so this is

00:14:20,530 --> 00:14:26,050
Point Break it was a film the tank line

00:14:23,020 --> 00:14:28,690
was 100% adrenaline so my tagline is a

00:14:26,050 --> 00:14:29,950
hundred percent pure Python this is what

00:14:28,690 --> 00:14:32,470
we have at the moment if you want to

00:14:29,950 --> 00:14:33,820
extend your debugging with something

00:14:32,470 --> 00:14:35,890
that's scriptable so you have something

00:14:33,820 --> 00:14:38,830
like gdb which is a command line

00:14:35,890 --> 00:14:40,360
debugger with a Python interface in

00:14:38,830 --> 00:14:41,860
there and an API that lets you write

00:14:40,360 --> 00:14:43,150
code but it's all embedded in the

00:14:41,860 --> 00:14:46,360
debugger and you have to use their API

00:14:43,150 --> 00:14:47,950
what I would like instead is like a

00:14:46,360 --> 00:14:50,020
debugger that so just a library in

00:14:47,950 --> 00:14:51,640
Python that I can write programs against

00:14:50,020 --> 00:14:52,420
because then I can build other tools on

00:14:51,640 --> 00:14:54,490
top of that

00:14:52,420 --> 00:14:56,110
so if I had a debugging library I could

00:14:54,490 --> 00:14:57,850
build an analyzer that use the debugger

00:14:56,110 --> 00:15:00,340
to collect information than you write to

00:14:57,850 --> 00:15:01,750
present it to myself or someone else so

00:15:00,340 --> 00:15:03,670
what we have at the moment I think it's

00:15:01,750 --> 00:15:06,070
okay but I think that my idea would be

00:15:03,670 --> 00:15:07,240
way more awesome so you could do

00:15:06,070 --> 00:15:09,910
something like if you write a simple

00:15:07,240 --> 00:15:11,230
program that I just looked at put

00:15:09,910 --> 00:15:13,180
breakpoints on two methods to collect

00:15:11,230 --> 00:15:14,500
some information then like graph the

00:15:13,180 --> 00:15:15,880
number of things so this is like great

00:15:14,500 --> 00:15:17,740
for you destroy foo then you've got a

00:15:15,880 --> 00:15:19,420
number of account of that the calls

00:15:17,740 --> 00:15:21,460
total number of foods that exist at any

00:15:19,420 --> 00:15:23,740
one time or you could create something

00:15:21,460 --> 00:15:25,360
really complicated with like you know

00:15:23,740 --> 00:15:27,490
crazy logic and like reactive

00:15:25,360 --> 00:15:28,720
breakpoints and investing all kinds of

00:15:27,490 --> 00:15:30,490
stuff that would tell you exactly what

00:15:28,720 --> 00:15:32,560
you've done wrong I might be too hard

00:15:30,490 --> 00:15:35,920
but it's a possibility

00:15:32,560 --> 00:15:38,500
so it's simple demo okay right with the

00:15:35,920 --> 00:15:41,020
power of name shell so here's a really

00:15:38,500 --> 00:15:44,050
simple C program it doesn't do anything

00:15:41,020 --> 00:15:45,730
other than call a function ten times in

00:15:44,050 --> 00:15:48,430
a loop doesn't print anything there

00:15:45,730 --> 00:15:51,490
shouldn't be any output so if I make

00:15:48,430 --> 00:15:57,400
that then I run it unsurprisingly it

00:15:51,490 --> 00:16:02,920
does nothing then this is a how do I

00:15:57,400 --> 00:16:05,530
make things small so this is a little

00:16:02,920 --> 00:16:07,870
script written against Point Break my

00:16:05,530 --> 00:16:09,010
debugger so I add a breakpoint which is

00:16:07,870 --> 00:16:11,920
just a Python function it's going to

00:16:09,010 --> 00:16:19,300
print boom each time it hits that that C

00:16:11,920 --> 00:16:20,770
function there is a ghost so if we rerun

00:16:19,300 --> 00:16:26,620
that it prints blue ten times that

00:16:20,770 --> 00:16:29,830
simple so it's really early days I spent

00:16:26,620 --> 00:16:31,480
about two weeks developing this at the

00:16:29,830 --> 00:16:35,950
moment it's line eight sixty four-bit

00:16:31,480 --> 00:16:37,960
only API is still developing it doesn't

00:16:35,950 --> 00:16:39,070
yet read dwarf symbols which would be

00:16:37,960 --> 00:16:40,240
really useful example give you line

00:16:39,070 --> 00:16:42,250
debugging information and other

00:16:40,240 --> 00:16:44,350
information about types the reason it

00:16:42,250 --> 00:16:47,350
doesn't do that is the parser is too

00:16:44,350 --> 00:16:50,230
slow so I'm working on that it's missing

00:16:47,350 --> 00:16:51,760
many common debugging features but yeah

00:16:50,230 --> 00:16:53,320
so I'll probably be sticking around

00:16:51,760 --> 00:16:55,510
further sprints and maybe working on

00:16:53,320 --> 00:16:58,540
this but if you like the idea or you

00:16:55,510 --> 00:17:00,930
hate the idea come and say hello thank

00:16:58,540 --> 00:17:00,930
you very much

00:17:02,129 --> 00:17:05,970
the ground reports brandy please

00:17:07,970 --> 00:17:12,980
what to do with the flock of lamb does

00:17:10,480 --> 00:17:15,740
librarian talk by Andy funnier that's me

00:17:12,980 --> 00:17:18,589
there's my email I'm a senior engineer

00:17:15,740 --> 00:17:20,030
at Bloomberg I'll get one thing out of

00:17:18,589 --> 00:17:23,299
the way right off the top

00:17:20,030 --> 00:17:25,159
what is flock good for usually that's a

00:17:23,299 --> 00:17:27,709
question at the end right at the

00:17:25,159 --> 00:17:30,049
beginning it's fun it's kind of an

00:17:27,709 --> 00:17:31,909
effect like a spreadsheet it's good for

00:17:30,049 --> 00:17:34,100
dealing with poorly defined mathematical

00:17:31,909 --> 00:17:37,460
systems like say taxes or role-playing

00:17:34,100 --> 00:17:40,669
games and I'm really looking for more

00:17:37,460 --> 00:17:42,049
uses out of this so if you find

00:17:40,669 --> 00:17:44,840
something that you think this would be

00:17:42,049 --> 00:17:47,240
useful for tell me after I'd really like

00:17:44,840 --> 00:17:49,039
to know so let's just look at some

00:17:47,240 --> 00:17:50,990
fairly normal functions there's a

00:17:49,039 --> 00:17:52,010
function there's a function declared

00:17:50,990 --> 00:17:55,159
with the lambda

00:17:52,010 --> 00:17:57,020
there's the lambda declared with no

00:17:55,159 --> 00:18:00,260
arguments hey look it does what you

00:17:57,020 --> 00:18:01,970
expect here's some closures there's a

00:18:00,260 --> 00:18:04,960
perfectly normal closure with lists

00:18:01,970 --> 00:18:08,270
inside it it also does what you'd expect

00:18:04,960 --> 00:18:10,850
if we change the list even though it's

00:18:08,270 --> 00:18:13,100
already inside a closure it's going to

00:18:10,850 --> 00:18:16,280
return based on the list that's already

00:18:13,100 --> 00:18:19,309
enclosed even though we edited the list

00:18:16,280 --> 00:18:21,500
that's just a reminder that that does

00:18:19,309 --> 00:18:23,929
what it's supposed to do not for that

00:18:21,500 --> 00:18:26,090
let's take a look at dictionaries we're

00:18:23,929 --> 00:18:27,590
gonna make some closures we're gonna put

00:18:26,090 --> 00:18:34,669
them in the same dictionary that's

00:18:27,590 --> 00:18:36,679
inside the closure that's inside that

00:18:34,669 --> 00:18:40,100
they're inside of there all references

00:18:36,679 --> 00:18:42,110
so we can totally do this let's just

00:18:40,100 --> 00:18:46,070
pretend we're putting up a bill of sale

00:18:42,110 --> 00:18:51,380
so we'll put 30 of something these are

00:18:46,070 --> 00:18:55,190
all zero argument lambdas price a

00:18:51,380 --> 00:18:57,320
hundred the subtotal is gonna be the

00:18:55,190 --> 00:18:59,510
quantity times the price call each of

00:18:57,320 --> 00:19:02,049
them as we pull them out we'll take the

00:18:59,510 --> 00:19:04,789
new york city sales tax put that on

00:19:02,049 --> 00:19:08,210
calculate the tax calculate the subtotal

00:19:04,789 --> 00:19:10,760
and then if we call each of those and

00:19:08,210 --> 00:19:12,909
pull it out we're just evaluating

00:19:10,760 --> 00:19:16,539
closures and we're getting the values

00:19:12,909 --> 00:19:20,800
all of this just calls the things inside

00:19:16,539 --> 00:19:22,660
pulls it out and gets it evaluated

00:19:20,800 --> 00:19:29,770
the tax line we can just pull out the

00:19:22,660 --> 00:19:33,160
tax line now we're in Edinburgh so let's

00:19:29,770 --> 00:19:35,650
say we're just gonna say the tax here is

00:19:33,160 --> 00:19:39,100
7% it that's a little more complicated

00:19:35,650 --> 00:19:41,740
so we changed just the tax rate to 7%

00:19:39,100 --> 00:19:44,320
and we just want to see the tax and we

00:19:41,740 --> 00:19:47,230
just want to see the total we don't have

00:19:44,320 --> 00:19:50,650
to go back and do everything else we can

00:19:47,230 --> 00:19:52,150
just pull out these two values and

00:19:50,650 --> 00:19:56,410
that's really what we've been going for

00:19:52,150 --> 00:19:57,100
here so it's a neat trick if we clean

00:19:56,410 --> 00:19:59,800
this up

00:19:57,100 --> 00:20:01,840
let's hit three things to clean it up

00:19:59,800 --> 00:20:04,750
storing a constant should not require

00:20:01,840 --> 00:20:06,580
creating these constant lambdas we know

00:20:04,750 --> 00:20:09,400
anytime we pull it out we want to call

00:20:06,580 --> 00:20:12,280
it and we may want to do some caching

00:20:09,400 --> 00:20:14,230
eventually so we'll prepare for that so

00:20:12,280 --> 00:20:17,620
now it looks like this we can just put

00:20:14,230 --> 00:20:20,890
values in we create a flock dict

00:20:17,620 --> 00:20:23,050
out of the flock library and when we put

00:20:20,890 --> 00:20:25,540
a constant in it notices and deals with

00:20:23,050 --> 00:20:28,870
that we still create our lambdas just

00:20:25,540 --> 00:20:30,880
the same way but we don't have to say

00:20:28,870 --> 00:20:33,250
we're going to call it flock nose when

00:20:30,880 --> 00:20:37,000
we pull it out that we're going to be

00:20:33,250 --> 00:20:39,640
calling it to pull out the value and our

00:20:37,000 --> 00:20:42,580
subtotals all work out the same way that

00:20:39,640 --> 00:20:44,350
functionality is preserved but we're

00:20:42,580 --> 00:20:47,050
here so we can add some more tricks

00:20:44,350 --> 00:20:48,820
because we know what we're doing so I've

00:20:47,050 --> 00:20:51,130
created something called an aggregator

00:20:48,820 --> 00:20:53,230
will make our bill of sale have five

00:20:51,130 --> 00:20:56,260
different items on it each with its own

00:20:53,230 --> 00:20:58,270
quantity each with its own price then I

00:20:56,260 --> 00:21:01,120
can create a flock aggregator say I'm

00:20:58,270 --> 00:21:04,060
gonna have some parallel Maps and here's

00:21:01,120 --> 00:21:06,040
the properties to go across them again

00:21:04,060 --> 00:21:10,780
we'll calculate those when they're

00:21:06,040 --> 00:21:13,720
needed and here's a function in this

00:21:10,780 --> 00:21:16,960
case a to argue in this case taking a

00:21:13,720 --> 00:21:20,620
tuple of the things going in that'll

00:21:16,960 --> 00:21:24,250
calculate across it I can go ahead and

00:21:20,620 --> 00:21:25,930
see what's the price on line three I can

00:21:24,250 --> 00:21:28,120
go ahead and change the price each on

00:21:25,930 --> 00:21:31,960
line three and then just go look at the

00:21:28,120 --> 00:21:33,130
total line and it just comes dropping it

00:21:31,960 --> 00:21:37,840
right out the

00:21:33,130 --> 00:21:40,270
of the function now if I have a flock I

00:21:37,840 --> 00:21:42,580
should be able to share my flock so

00:21:40,270 --> 00:21:45,190
sharing the flock just removes all this

00:21:42,580 --> 00:21:47,860
special functionality and gives me kind

00:21:45,190 --> 00:21:50,429
of a final answer for every value of

00:21:47,860 --> 00:21:54,070
every lambda in the entire thing

00:21:50,429 --> 00:21:55,630
calculates it out like this so here we

00:21:54,070 --> 00:21:57,460
see the prices the price each is the

00:21:55,630 --> 00:21:59,799
quantities the subtotals the taxes the

00:21:57,460 --> 00:22:02,860
tax rates the total everything dropped

00:21:59,799 --> 00:22:05,820
out once I shared my flock

00:22:02,860 --> 00:22:09,640
it's up on my github there's my email

00:22:05,820 --> 00:22:11,200
there's the corporate Twitter and as I

00:22:09,640 --> 00:22:13,630
said what's it good for

00:22:11,200 --> 00:22:22,750
I'm really looking for the question of

00:22:13,630 --> 00:22:27,880
what is this good for it's fun and let

00:22:22,750 --> 00:22:31,030
me know so hello my name is Leo and I'm

00:22:27,880 --> 00:22:33,520
from Israel and when I'm working in a

00:22:31,030 --> 00:22:34,059
start-up and when we started to to be

00:22:33,520 --> 00:22:37,299
loud

00:22:34,059 --> 00:22:40,630
we decided about security rules right

00:22:37,299 --> 00:22:43,390
one of the security rules is you have to

00:22:40,630 --> 00:22:47,169
lock your computer every time that you

00:22:43,390 --> 00:22:50,380
go to coffee or something now for me two

00:22:47,169 --> 00:22:53,770
things happened one I always forgot it

00:22:50,380 --> 00:22:57,580
and the second thing all of my friends

00:22:53,770 --> 00:23:00,159
knew that I always forget it and started

00:22:57,580 --> 00:23:01,690
to look and start to hack my computer

00:23:00,159 --> 00:23:06,309
when I'm not near it

00:23:01,690 --> 00:23:10,030
how many people it happened for them so

00:23:06,309 --> 00:23:13,539
it's not just Israel II think so I tried

00:23:10,030 --> 00:23:18,100
to think what can I do and best idea

00:23:13,539 --> 00:23:21,159
that I can came for came with is I have

00:23:18,100 --> 00:23:24,700
a Bluetooth in my phone if I'm living I

00:23:21,159 --> 00:23:27,450
can check it so I try to think if there

00:23:24,700 --> 00:23:30,000
is something like this for Mac users

00:23:27,450 --> 00:23:33,030
there is something like 10 applications

00:23:30,000 --> 00:23:37,720
that that is what they are doing for

00:23:33,030 --> 00:23:41,950
Windows there is a Windows feature for

00:23:37,720 --> 00:23:45,250
that in Windows it's weird for Mac there

00:23:41,950 --> 00:23:46,720
is this application but it's old and for

00:23:45,250 --> 00:23:50,830
me personally it didn't

00:23:46,720 --> 00:23:55,179
walk so ice well it to look and found

00:23:50,830 --> 00:23:59,260
this with a blog that explains how you

00:23:55,179 --> 00:24:04,360
can without pinging check what is your

00:23:59,260 --> 00:24:07,240
connection okay and we just write it

00:24:04,360 --> 00:24:10,419
this is a script bear script from the

00:24:07,240 --> 00:24:13,659
blog that is doing that okay and if I

00:24:10,419 --> 00:24:17,169
will run it you'll see that it's try to

00:24:13,659 --> 00:24:34,030
connect FSI is the connection okay so we

00:24:17,169 --> 00:24:37,750
fill my computer right and then on top

00:24:34,030 --> 00:24:41,770
of that we created a small Python script

00:24:37,750 --> 00:24:45,340
that check it every time that it's no

00:24:41,770 --> 00:24:50,230
less than minus one it's edited to a

00:24:45,340 --> 00:24:56,890
queue and check the queue okay so if I

00:24:50,230 --> 00:24:59,730
run it and go with my telephone to drink

00:24:56,890 --> 00:24:59,730
coffee or something

00:25:05,270 --> 00:25:13,069
[Applause]

00:25:14,470 --> 00:25:25,190
thank you two issues one issue is if you

00:25:20,870 --> 00:25:28,070
office is never and with multiple places

00:25:25,190 --> 00:25:31,400
that you can work go maybe a computer

00:25:28,070 --> 00:25:34,010
suddenly will get up and down up and

00:25:31,400 --> 00:25:36,980
down when you have nothing in your room

00:25:34,010 --> 00:25:39,080
and the second thing is now all my

00:25:36,980 --> 00:25:47,510
friends are trying to steal my computer

00:25:39,080 --> 00:25:51,470
my telephone thank you okay I would yeah

00:25:47,510 --> 00:25:54,010
okay so hi I'm Thomas and this talk is

00:25:51,470 --> 00:25:58,510
about something I noticed for many years

00:25:54,010 --> 00:26:00,580
it's not about - even if it looks like

00:25:58,510 --> 00:26:04,850
but you'll see

00:26:00,580 --> 00:26:05,630
so I've guessed most of you know the

00:26:04,850 --> 00:26:09,710
docstrings

00:26:05,630 --> 00:26:11,090
done the talk they are pronounced so not

00:26:09,710 --> 00:26:13,580
underscore underscore underscore

00:26:11,090 --> 00:26:16,490
underscore just say dunder that means

00:26:13,580 --> 00:26:20,120
the same and you all know you can use

00:26:16,490 --> 00:26:22,400
them to interactively get help or to

00:26:20,120 --> 00:26:24,710
generate documentation using things or

00:26:22,400 --> 00:26:27,350
some other tool kit and you can also

00:26:24,710 --> 00:26:30,410
access it from the codes or the code

00:26:27,350 --> 00:26:33,320
basically knows about its documentation

00:26:30,410 --> 00:26:36,230
and this is how you do it you just have

00:26:33,320 --> 00:26:38,510
a class and a doc string in there and if

00:26:36,230 --> 00:26:40,370
you are on the interactive Python

00:26:38,510 --> 00:26:42,620
interpreter you can just use the help

00:26:40,370 --> 00:26:44,960
function to access that kind of

00:26:42,620 --> 00:26:47,540
documentation so you don't need a

00:26:44,960 --> 00:26:50,690
browser you can just use the Python in

00:26:47,540 --> 00:26:53,630
the freedom and why do we do this

00:26:50,690 --> 00:26:56,300
because so we don't have to wonder about

00:26:53,630 --> 00:26:58,700
what is this class doing we document our

00:26:56,300 --> 00:27:04,550
stuff and everybody can use it that way

00:26:58,700 --> 00:27:07,100
so the class self documents itself so

00:27:04,550 --> 00:27:11,690
this was the technical part of my talk

00:27:07,100 --> 00:27:14,030
and now to something different we also

00:27:11,690 --> 00:27:17,810
have some sort of documentation is you

00:27:14,030 --> 00:27:21,230
in real life so a lot of you hang around

00:27:17,810 --> 00:27:23,600
on conferences like this one maybe some

00:27:21,230 --> 00:27:26,210
of you also with it the hacker space or

00:27:23,600 --> 00:27:30,080
in general just the place with a lot of

00:27:26,210 --> 00:27:32,870
people and if there are a thousand

00:27:30,080 --> 00:27:37,130
people like here you maybe don't know a

00:27:32,870 --> 00:27:38,810
lot of them maybe most of them but all

00:27:37,130 --> 00:27:41,240
of them are maybe working on some

00:27:38,810 --> 00:27:44,810
interesting project but you don't know

00:27:41,240 --> 00:27:48,740
it and why do you not know it because

00:27:44,810 --> 00:27:51,410
there's no documentation it looks like

00:27:48,740 --> 00:27:55,970
this for example you see just a lot of

00:27:51,410 --> 00:27:59,210
people doing things on their laptops but

00:27:55,970 --> 00:28:03,370
you don't know what more people doing

00:27:59,210 --> 00:28:06,290
things but you don't know either

00:28:03,370 --> 00:28:09,290
so everybody's doing something but you

00:28:06,290 --> 00:28:12,220
don't know what so okay you can just go

00:28:09,290 --> 00:28:15,890
to them and say hey what are you doing

00:28:12,220 --> 00:28:21,440
but maybe you are shy maybe you don't

00:28:15,890 --> 00:28:23,470
want to do that and even if you would do

00:28:21,440 --> 00:28:25,940
that it does not scale I can't walk

00:28:23,470 --> 00:28:30,560
2,000 people and say hey what are you

00:28:25,940 --> 00:28:32,680
doing it's just taking a lot of time so

00:28:30,560 --> 00:28:36,080
we can use docstrings

00:28:32,680 --> 00:28:38,930
so the idea is just document yourself

00:28:36,080 --> 00:28:41,720
and if a lot of people do that they can

00:28:38,930 --> 00:28:45,830
just read other people's talk strings

00:28:41,720 --> 00:28:49,190
basically so you can use just a piece of

00:28:45,830 --> 00:28:51,920
paper but in that case you need to

00:28:49,190 --> 00:28:55,160
prepare it just print a few of your

00:28:51,920 --> 00:28:57,260
projects on it in big letters so you can

00:28:55,160 --> 00:29:00,590
read it from two meters distance at

00:28:57,260 --> 00:29:03,320
least and if it's not totally clear what

00:29:00,590 --> 00:29:06,410
it means maybe add some explanation

00:29:03,320 --> 00:29:08,990
below it in a bit smaller font some nice

00:29:06,410 --> 00:29:11,600
graphics is also nice and don't write

00:29:08,990 --> 00:29:16,790
too much only a few words you don't want

00:29:11,600 --> 00:29:18,830
to take an hour to read it so put on the

00:29:16,790 --> 00:29:21,170
paper what interests you what you love

00:29:18,830 --> 00:29:23,360
what you work on maybe what you did work

00:29:21,170 --> 00:29:26,150
on in the past you can use a piece of

00:29:23,360 --> 00:29:28,169
paper you can also use your laptop

00:29:26,150 --> 00:29:29,879
screen but it's a bit

00:29:28,169 --> 00:29:33,539
problematic if you want to work on it at

00:29:29,879 --> 00:29:35,129
the same time you can use a beamer with

00:29:33,539 --> 00:29:38,340
the second screen and just beam it

00:29:35,129 --> 00:29:40,830
somewhere a projector I mean you can use

00:29:38,340 --> 00:29:44,970
a poster or you can just use a t-shirt

00:29:40,830 --> 00:29:46,830
and write something about - on it but

00:29:44,970 --> 00:29:48,600
it's not great for Python conference

00:29:46,830 --> 00:29:52,289
because everybody does Python of course

00:29:48,600 --> 00:29:52,980
and this is an example how it could look

00:29:52,289 --> 00:29:54,749
like

00:29:52,980 --> 00:29:57,210
so left the example right the

00:29:54,749 --> 00:29:59,879
explanation may be just put your name on

00:29:57,210 --> 00:30:02,100
it the project's you laugh a short line

00:29:59,879 --> 00:30:05,220
under it explaining what it is some

00:30:02,100 --> 00:30:09,090
keywords maybe add some color or your

00:30:05,220 --> 00:30:11,039
homepage or whatever and then just put

00:30:09,090 --> 00:30:12,989
it besides you if you are sitting

00:30:11,039 --> 00:30:14,970
somewhere and hacking on your laptop

00:30:12,989 --> 00:30:17,549
just put it beside scene so people can

00:30:14,970 --> 00:30:20,940
just read it they don't need to say

00:30:17,549 --> 00:30:26,549
hello to a thousand people and then you

00:30:20,940 --> 00:30:29,429
have a doc string basically you can use

00:30:26,549 --> 00:30:32,159
these slides for whatever you want you

00:30:29,429 --> 00:30:35,309
know this license do what the you

00:30:32,159 --> 00:30:37,999
want public license it basically says do

00:30:35,309 --> 00:30:42,919
what the you want

00:30:37,999 --> 00:30:42,919
so yeah distributed

00:30:43,640 --> 00:30:50,450
thank you very much for coming I guess

00:30:46,610 --> 00:30:52,780
we kickoff at 9:00 a.m. tomorrow yep

00:30:50,450 --> 00:30:56,280
okay bye everybody

00:30:52,780 --> 00:30:56,280

YouTube URL: https://www.youtube.com/watch?v=hgPH19nBlrk


