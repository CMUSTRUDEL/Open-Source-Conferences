Title: Hayley Denbraver - Recursion, Fractals, and the Python Turtle Module
Publication date: 2018-08-22
Playlist: EuroPython 2018
Description: 
	Recursion, Fractals, and the Python Turtle Module
[EuroPython 2018 - Talk - 2018-07-25 - Smarkets]
[Edinburgh, UK]

By Hayley Denbraver

To understand recursion you must first understand recursion. Alternatively, you could come to a talk that will demonstrate the basics of recursion, using fractals drawn by the python turtle module! 

What are fractals? Fractals are psychedelic designs that appear basically the same regardless of scale. They also appear all over natureâ€“consider how a tree trunk and branches is similar in structure to branches and twigs or how a wave is made of mini waves. Best of all, fractals can be constructed using recursive functions. 

What is the turtle module? It is part of the standard python library that can be used to draw amazing things and is commonly used as a tool for learning to code.

Come for the recursion, stay for the amazing fractals, and leave knowing that no turtles were harmed in the making of this talk.

This talk is suitable for all python enthusiasts. Those who love mathematics will love this talk. Advanced developers will learn more about a tool that can be used to teach people to code. There is something for everyone.


License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2018.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:05,670 --> 00:00:09,990
so thanks for coming to my talk I'm

00:00:07,859 --> 00:00:12,629
really happy to be here at Euro Python

00:00:09,990 --> 00:00:16,430
and just share some Python e things with

00:00:12,629 --> 00:00:19,859
you so my name is Haley Dunn braver and

00:00:16,430 --> 00:00:22,170
I'm a web developer I think I became a

00:00:19,859 --> 00:00:25,500
developer because deep inside my heart

00:00:22,170 --> 00:00:28,880
I'm a nerd and deep inside that nerd is

00:00:25,500 --> 00:00:33,719
a developer who deep down is a nerd and

00:00:28,880 --> 00:00:37,109
I live in San Diego so Scotland is an

00:00:33,719 --> 00:00:40,460
experience in San Diego it's nice about

00:00:37,109 --> 00:00:43,499
99% of the year and I'm a big fan of

00:00:40,460 --> 00:00:45,059
nature and of hiking that's so nice

00:00:43,499 --> 00:00:47,999
outdoors you should get outdoors and

00:00:45,059 --> 00:00:51,120
just things like that it's all amazing

00:00:47,999 --> 00:00:53,699
and beautiful from the little water

00:00:51,120 --> 00:00:56,339
ripples where the ocean meets the beach

00:00:53,699 --> 00:00:59,909
to the waves out in the distance it all

00:00:56,339 --> 00:01:02,909
has a similar sense of wonder so at my

00:00:59,909 --> 00:01:05,519
job I work primarily with Python using

00:01:02,909 --> 00:01:08,340
Django the best part of my job involves

00:01:05,519 --> 00:01:12,539
training great non-technical employees

00:01:08,340 --> 00:01:16,380
to learn Python and Django and to join

00:01:12,539 --> 00:01:19,859
our dev team and recently we've had them

00:01:16,380 --> 00:01:22,380
use the Python turtle module for some

00:01:19,859 --> 00:01:25,289
exercises it allows them to draw with

00:01:22,380 --> 00:01:29,700
code and it's pretty cool and here's

00:01:25,289 --> 00:01:31,979
their finished work they are signed

00:01:29,700 --> 00:01:35,369
placed on the fridge and these are

00:01:31,979 --> 00:01:39,420
drawings of pusheen the cat and it was

00:01:35,369 --> 00:01:42,509
super fun so now you know a bit about me

00:01:39,420 --> 00:01:46,380
but you've also been introduced to our

00:01:42,509 --> 00:01:49,740
topic which is namely recursion fractals

00:01:46,380 --> 00:01:51,659
in the Python turtle module so wait

00:01:49,740 --> 00:01:53,579
we've been introduced to those well

00:01:51,659 --> 00:01:57,630
let's break it down a little bit and

00:01:53,579 --> 00:02:01,380
we'll talk over occurs in first so side

00:01:57,630 --> 00:02:03,630
note I just added this yesterday you can

00:02:01,380 --> 00:02:05,869
go see a visual representation of

00:02:03,630 --> 00:02:10,229
recursion at the camera obscura

00:02:05,869 --> 00:02:12,690
attraction near the castle using mirrors

00:02:10,229 --> 00:02:15,030
they created this ladder that apparently

00:02:12,690 --> 00:02:17,280
tunnels through the earth all the way to

00:02:15,030 --> 00:02:18,760
Australia but you use it at your own

00:02:17,280 --> 00:02:22,700
risk

00:02:18,760 --> 00:02:25,220
so recursion is like when I said that

00:02:22,700 --> 00:02:28,190
I'm a developer who's deep down a nerd

00:02:25,220 --> 00:02:30,830
who's a developer because she's a nerd

00:02:28,190 --> 00:02:34,549
so inside each part of this description

00:02:30,830 --> 00:02:36,650
is a description of itself and down and

00:02:34,549 --> 00:02:39,620
down and down you can think of it a

00:02:36,650 --> 00:02:43,819
little bit like this picture of the

00:02:39,620 --> 00:02:47,060
Russian nesting dolls so what is

00:02:43,819 --> 00:02:49,370
recursion well according to my very

00:02:47,060 --> 00:02:50,840
favorite learn to code resource which is

00:02:49,370 --> 00:02:53,569
called how to think like a computer

00:02:50,840 --> 00:02:55,790
scientist recursion is a method of

00:02:53,569 --> 00:02:58,299
solving problems that involves breaking

00:02:55,790 --> 00:03:00,860
a problem down into smaller and smaller

00:02:58,299 --> 00:03:04,239
subproblems until it can be solved

00:03:00,860 --> 00:03:08,360
trivially the recursion will look at

00:03:04,239 --> 00:03:10,069
involves a function calling itself it's

00:03:08,360 --> 00:03:14,269
a problem within a problem within a

00:03:10,069 --> 00:03:16,519
problem so it's probably easiest to get

00:03:14,269 --> 00:03:19,670
the sense of recursion by looking at an

00:03:16,519 --> 00:03:22,100
example and we're going to look at a

00:03:19,670 --> 00:03:27,489
recursive function to solve factorials

00:03:22,100 --> 00:03:29,840
so brief explanation review of math n

00:03:27,489 --> 00:03:32,780
factorial is going to be equal to the

00:03:29,840 --> 00:03:36,470
product of all positive integers less

00:03:32,780 --> 00:03:40,010
than or equal to itself so here we have

00:03:36,470 --> 00:03:42,349
five factorial and that's going to equal

00:03:40,010 --> 00:03:46,519
five times four times three times two

00:03:42,349 --> 00:03:49,220
times one which happens to be 120 but

00:03:46,519 --> 00:03:51,859
inside five factorial is four factorial

00:03:49,220 --> 00:03:53,870
and inside that is three factorial and

00:03:51,859 --> 00:03:56,720
then two factorial and then one

00:03:53,870 --> 00:04:00,709
factorial and you can see by the color

00:03:56,720 --> 00:04:02,329
coding on this slide it helps you see

00:04:00,709 --> 00:04:05,870
how this is kind of like the Russian

00:04:02,329 --> 00:04:09,410
nesting dolls right and so we're gonna

00:04:05,870 --> 00:04:11,419
dig down to the trivial problem which is

00:04:09,410 --> 00:04:14,120
gonna be one factorial and then we're

00:04:11,419 --> 00:04:18,859
gonna resurface easily solving problems

00:04:14,120 --> 00:04:23,450
along the way here is some sample code

00:04:18,859 --> 00:04:28,990
to solve the factorial problem and it's

00:04:23,450 --> 00:04:31,780
written recursively now a recursive

00:04:28,990 --> 00:04:34,930
function has three features that we're

00:04:31,780 --> 00:04:38,440
going to explore first is the recursive

00:04:34,930 --> 00:04:44,110
case which you can see here is where I

00:04:38,440 --> 00:04:49,060
have if num is greater than 1 now in the

00:04:44,110 --> 00:04:52,150
recursive case then the function calls

00:04:49,060 --> 00:04:56,910
itself we see here we're returning num

00:04:52,150 --> 00:05:01,000
times recursion factorial of numbness 1

00:04:56,910 --> 00:05:02,980
now secondly we have the base case the

00:05:01,000 --> 00:05:09,580
base case here is our else statement

00:05:02,980 --> 00:05:12,670
where we're returning 1 now this part of

00:05:09,580 --> 00:05:17,080
the function will not call itself it's

00:05:12,670 --> 00:05:19,440
the trivial problem of 1 factorial it's

00:05:17,080 --> 00:05:22,990
the tiniest doll in the nesting set

00:05:19,440 --> 00:05:27,970
won't call the function it's there

00:05:22,990 --> 00:05:29,620
because if it's not this program will

00:05:27,970 --> 00:05:34,180
just keep running and then we all die

00:05:29,620 --> 00:05:39,870
and so we have to make sure it's in

00:05:34,180 --> 00:05:44,080
place or else it's just it's not usable

00:05:39,870 --> 00:05:49,870
so the third feature that I want to talk

00:05:44,080 --> 00:05:53,230
about is the third feature is going to

00:05:49,870 --> 00:05:56,470
move toward the base case so you can see

00:05:53,230 --> 00:05:59,350
this here where recursion factorial is

00:05:56,470 --> 00:06:02,170
called but it's called for one less than

00:05:59,350 --> 00:06:04,330
it was previously called and so it's

00:06:02,170 --> 00:06:09,850
going to move us closer and closer to

00:06:04,330 --> 00:06:12,580
being equal to one so by the way any

00:06:09,850 --> 00:06:16,720
anything you can program recursively you

00:06:12,580 --> 00:06:19,300
can also write a program that won't use

00:06:16,720 --> 00:06:21,070
recursion so here's an example of what

00:06:19,300 --> 00:06:24,850
the factorial problem might look like

00:06:21,070 --> 00:06:26,770
solved not recursively it will work it

00:06:24,850 --> 00:06:32,140
works fine it's maybe a little less

00:06:26,770 --> 00:06:34,900
elegant than the recursive function all

00:06:32,140 --> 00:06:37,750
right so that's recursion and let's talk

00:06:34,900 --> 00:06:40,690
about fractals fractals are phenomenon

00:06:37,750 --> 00:06:42,289
in both math and nature a fractal is a

00:06:40,690 --> 00:06:46,009
never-ending pattern with

00:06:42,289 --> 00:06:48,889
self similarity across skills so this is

00:06:46,009 --> 00:06:51,409
a gif of a snowflake and no matter

00:06:48,889 --> 00:06:54,800
how much we zoom it's gonna look the

00:06:51,409 --> 00:06:57,649
same it may be at 10x kale it may be at

00:06:54,800 --> 00:06:59,479
1x kale it may be at point 1 X scale we

00:06:57,649 --> 00:07:04,339
don't know and they all look the same

00:06:59,479 --> 00:07:07,129
and so this is a an example of a

00:07:04,339 --> 00:07:09,199
mathematical fractal but we see them all

00:07:07,129 --> 00:07:12,199
around us in nature - it's kind of like

00:07:09,199 --> 00:07:13,939
how I mentioned that in San Diego the

00:07:12,199 --> 00:07:17,360
waves out in the ocean had a similar

00:07:13,939 --> 00:07:21,050
beauty to the water ripples where the

00:07:17,360 --> 00:07:24,559
ocean meets the sand other examples

00:07:21,050 --> 00:07:27,680
could include lightening see the bolts

00:07:24,559 --> 00:07:30,520
there where the little tributaries look

00:07:27,680 --> 00:07:33,559
very much the same as the main branch

00:07:30,520 --> 00:07:38,330
these broccoli which I think are really

00:07:33,559 --> 00:07:40,789
cool each little prick will look

00:07:38,330 --> 00:07:44,449
generate generally the same as the full

00:07:40,789 --> 00:07:48,699
head of broccoli and of course real

00:07:44,449 --> 00:07:51,319
snowflakes not just Cox snowflakes and

00:07:48,699 --> 00:07:53,779
just as on the side I spent a few days

00:07:51,319 --> 00:07:56,360
in London before making my way here and

00:07:53,779 --> 00:07:57,889
I found this example of a fractal in the

00:07:56,360 --> 00:08:00,499
Baker Street underground station

00:07:57,889 --> 00:08:02,529
Sherlock Holmes's silhouette is made up

00:08:00,499 --> 00:08:05,059
of tiny Sherlock Holmes's silhouettes

00:08:02,529 --> 00:08:07,819
one could imagine that the tiny

00:08:05,059 --> 00:08:10,839
silhouettes are also made out of tinier

00:08:07,819 --> 00:08:15,019
silhouettes and on and on and on all

00:08:10,839 --> 00:08:17,119
right so we have recursion and we have

00:08:15,019 --> 00:08:20,449
fractals but how are these connected

00:08:17,119 --> 00:08:24,129
well fractals can be described with

00:08:20,449 --> 00:08:27,349
recursive functions yep and that's cool

00:08:24,129 --> 00:08:30,529
but can we experience this in our real

00:08:27,349 --> 00:08:32,810
lives well I'm gonna introduce you to my

00:08:30,529 --> 00:08:38,089
favorite Python friend the Python turtle

00:08:32,810 --> 00:08:41,329
module so what is the turtle module it's

00:08:38,089 --> 00:08:43,969
a cool it's cool bit of code included in

00:08:41,329 --> 00:08:47,839
the standard library before the concept

00:08:43,969 --> 00:08:50,149
was used in four before it was used in

00:08:47,839 --> 00:08:52,189
Python it was used in the logo

00:08:50,149 --> 00:08:53,630
programming language and this dates back

00:08:52,189 --> 00:08:55,590
to 1966

00:08:53,630 --> 00:08:58,020
so it's been around a long

00:08:55,590 --> 00:09:00,300
long time and what we're gonna do is

00:08:58,020 --> 00:09:03,540
we're going to imagine that a turtle is

00:09:00,300 --> 00:09:05,550
placed on a big canvas its tail has been

00:09:03,540 --> 00:09:09,500
dipped in paint and when the turtle

00:09:05,550 --> 00:09:12,600
moves around the canvas it draws a line

00:09:09,500 --> 00:09:15,450
the turtle is also perfectly trained so

00:09:12,600 --> 00:09:19,890
you the programmer can tell the turtle

00:09:15,450 --> 00:09:23,910
okay move forward 20 steps rotates to

00:09:19,890 --> 00:09:26,190
the left 90 degrees etc etc and with

00:09:23,910 --> 00:09:33,030
just simple instructions we can create

00:09:26,190 --> 00:09:34,770
really interesting patterns so we're

00:09:33,030 --> 00:09:38,040
going to draw I like to call this a

00:09:34,770 --> 00:09:42,600
spirograph I don't know if European

00:09:38,040 --> 00:09:47,010
people had those toys growing up yeah so

00:09:42,600 --> 00:09:52,200
it's very similar to that and we're

00:09:47,010 --> 00:09:55,080
going to instantiate a turtle and it's

00:09:52,200 --> 00:09:56,880
going to execute a some code that's in a

00:09:55,080 --> 00:09:59,400
loop and so you'll see it draw a

00:09:56,880 --> 00:10:04,910
triangle rotate and then repeat the

00:09:59,400 --> 00:10:04,910
process so let's pull that up

00:10:13,290 --> 00:10:21,120
all right so we're watching it go now

00:10:18,480 --> 00:10:23,180
it's kind of fun about this I've sped it

00:10:21,120 --> 00:10:25,759
up so it's kind of a turtle on coffee

00:10:23,180 --> 00:10:28,589
but that way we can see it easy

00:10:25,759 --> 00:10:30,899
so what's fun about this is you might be

00:10:28,589 --> 00:10:33,139
teaching someone to code and they don't

00:10:30,899 --> 00:10:35,819
really understand the concept of a loop

00:10:33,139 --> 00:10:38,250
maybe we are covering that well if you

00:10:35,819 --> 00:10:41,009
have them program a turtle you can

00:10:38,250 --> 00:10:45,319
actually see it execute and it helps

00:10:41,009 --> 00:10:48,600
take kind of out there Spacey ideas and

00:10:45,319 --> 00:10:52,529
gives them a concrete shape and form

00:10:48,600 --> 00:10:58,769
that people can relate to all right

00:10:52,529 --> 00:11:02,279
gonna pull up the slides again all right

00:10:58,769 --> 00:11:06,209
so that's basically the feel of the

00:11:02,279 --> 00:11:09,000
Python turtle module but with the really

00:11:06,209 --> 00:11:12,269
exciting thing we're gonna do is is to

00:11:09,000 --> 00:11:20,220
draw a fractal with the Python turtle

00:11:12,269 --> 00:11:21,930
module so we're going to let's see so

00:11:20,220 --> 00:11:26,819
we're gonna draw this triangle it's

00:11:21,930 --> 00:11:29,279
called the sierpinski triangle and you

00:11:26,819 --> 00:11:31,050
can see what our turtle drawing is

00:11:29,279 --> 00:11:38,519
basically going to look like when we're

00:11:31,050 --> 00:11:40,110
finished and I'm gonna show you the code

00:11:38,519 --> 00:11:45,449
first and we can talk about it a little

00:11:40,110 --> 00:11:47,730
and then we'll watch the turtle run so I

00:11:45,449 --> 00:11:51,649
want to draw your attention to a couple

00:11:47,730 --> 00:11:54,779
of interesting things in this code and

00:11:51,649 --> 00:11:57,389
the first of those being that it's

00:11:54,779 --> 00:11:59,670
necessary to specify how many layers

00:11:57,389 --> 00:12:03,660
deep we want to go with this triangle if

00:11:59,670 --> 00:12:06,060
I had a sharp enough pencil and a lot of

00:12:03,660 --> 00:12:09,600
patience I could just keep drawing

00:12:06,060 --> 00:12:13,560
triangles you know just making this

00:12:09,600 --> 00:12:15,630
finer and finer and finer but we don't

00:12:13,560 --> 00:12:19,319
really want to write a program that'll

00:12:15,630 --> 00:12:22,709
do that we want to give it a base case

00:12:19,319 --> 00:12:24,569
basically we're going to specify how

00:12:22,709 --> 00:12:26,579
many layers deep to go and then that way

00:12:24,569 --> 00:12:30,779
we'll hit the base case

00:12:26,579 --> 00:12:34,199
recursion will stop a second

00:12:30,779 --> 00:12:38,970
if I were drawing this by hand I would

00:12:34,199 --> 00:12:43,470
probably follow reasoning similar to the

00:12:38,970 --> 00:12:45,869
gif here where I draw one big triangle

00:12:43,470 --> 00:12:51,299
and then draw little triangles and

00:12:45,869 --> 00:12:53,569
basically this pattern however this is

00:12:51,299 --> 00:12:58,470
not how the turtle is going to do this

00:12:53,569 --> 00:13:03,540
you can see in the code it calls the

00:12:58,470 --> 00:13:05,809
sierpinski function three times and the

00:13:03,540 --> 00:13:09,749
way you can kind of think about that is

00:13:05,809 --> 00:13:12,509
if you had those Russian nesting dolls

00:13:09,749 --> 00:13:16,199
and you open one of them instead of

00:13:12,509 --> 00:13:18,540
finding just another Russian nesting

00:13:16,199 --> 00:13:22,139
doll that has nested dolls inside of it

00:13:18,540 --> 00:13:23,699
you would find two or three Russian

00:13:22,139 --> 00:13:25,499
nesting dolls inside this Russian

00:13:23,699 --> 00:13:30,299
nesting doll and then each of those

00:13:25,499 --> 00:13:35,339
three would have other dolls inside of

00:13:30,299 --> 00:13:38,100
them and on and on so you don't you

00:13:35,339 --> 00:13:40,649
don't necessarily go layer by layer but

00:13:38,100 --> 00:13:43,919
you dig down to the very bottom of one

00:13:40,649 --> 00:13:47,059
of the nesting dolls resolve it and then

00:13:43,919 --> 00:13:50,419
move back up and then you move back down

00:13:47,059 --> 00:13:53,669
through a different nesting doll and

00:13:50,419 --> 00:13:58,399
we're going to see that as the code

00:13:53,669 --> 00:14:01,790
executes so I'm gonna pull that up again

00:13:58,399 --> 00:14:01,790
hold tight

00:14:04,709 --> 00:14:12,940
alright are you guys ready let's go now

00:14:10,029 --> 00:14:18,010
this one is super sped up but you can

00:14:12,940 --> 00:14:23,740
see it went down to the very bottom the

00:14:18,010 --> 00:14:26,230
base level and executed completely

00:14:23,740 --> 00:14:29,050
before coming back up and addressing

00:14:26,230 --> 00:14:33,300
some of the other triangles and we're

00:14:29,050 --> 00:14:36,220
gonna show you a schematic so kind of

00:14:33,300 --> 00:14:41,800
hopefully make that make a little bit

00:14:36,220 --> 00:14:45,790
more sense so here's our code and here's

00:14:41,800 --> 00:14:48,370
the final product and I've color-coded

00:14:45,790 --> 00:14:54,190
some of the levels so you can get an

00:14:48,370 --> 00:14:55,660
idea of of the recursive function

00:14:54,190 --> 00:14:58,389
calling itself and then calling itself

00:14:55,660 --> 00:15:01,600
right so the little orange triangle is

00:14:58,389 --> 00:15:08,160
the smallest and is the base case and

00:15:01,600 --> 00:15:15,699
the larger ones are a couple levels up

00:15:08,160 --> 00:15:17,410
now what have we learned well we've

00:15:15,699 --> 00:15:19,510
learned that recursion is awesome

00:15:17,410 --> 00:15:22,630
because it's recursive which is awesome

00:15:19,510 --> 00:15:25,449
and we've learned that pythons and

00:15:22,630 --> 00:15:28,029
turtles are friends we've also learned

00:15:25,449 --> 00:15:31,180
that fractals can be mind-blowing even

00:15:28,029 --> 00:15:35,050
when you're entirely sober so what can

00:15:31,180 --> 00:15:37,120
you do with this info well first if

00:15:35,050 --> 00:15:40,180
there's someone in your life that wants

00:15:37,120 --> 00:15:42,940
to learn to code might be a child a

00:15:40,180 --> 00:15:45,070
niece nephew son daughter in your life

00:15:42,940 --> 00:15:48,819
it might even be you if you're fairly

00:15:45,070 --> 00:15:50,319
new to the Python scene there's someone

00:15:48,819 --> 00:15:52,690
in your life who wants to learn to code

00:15:50,319 --> 00:15:54,760
this is an awesome resource and I highly

00:15:52,690 --> 00:15:56,440
recommend the Python turtles I think

00:15:54,760 --> 00:16:01,510
it's it's your answer to learning to

00:15:56,440 --> 00:16:03,790
code at least a good introduction now if

00:16:01,510 --> 00:16:05,829
that doesn't describe you I would

00:16:03,790 --> 00:16:08,769
encourage you to write some recursive

00:16:05,829 --> 00:16:10,630
code maybe refactor something that you

00:16:08,769 --> 00:16:14,010
already wrote and make it recursive or

00:16:10,630 --> 00:16:18,160
solve a problem on project Euler net

00:16:14,010 --> 00:16:21,040
recursively or even attempt a fractal

00:16:18,160 --> 00:16:22,300
could be this sierpinski triangle the

00:16:21,040 --> 00:16:25,389
 snowflake

00:16:22,300 --> 00:16:29,110
we saw earlier I also have an example of

00:16:25,389 --> 00:16:30,850
a fractal tree on my github and the link

00:16:29,110 --> 00:16:37,060
will be included in the slides if you

00:16:30,850 --> 00:16:39,129
want to see that and maybe you're not up

00:16:37,060 --> 00:16:41,319
for recursion but I would still

00:16:39,129 --> 00:16:43,629
encourage you to give the Python Turtles

00:16:41,319 --> 00:16:46,689
a try because it's refreshing to have

00:16:43,629 --> 00:16:49,990
fun with code and I 100% certified that

00:16:46,689 --> 00:16:53,019
using the turtle module is fun and if

00:16:49,990 --> 00:16:56,410
you do draw something please tweet me a

00:16:53,019 --> 00:16:58,990
screenshot I'll retreat it we retweet is

00:16:56,410 --> 00:16:59,709
a hard board I'll retweet it and rate it

00:16:58,990 --> 00:17:02,139
out of 10

00:16:59,709 --> 00:17:04,990
I used the dog rating method for

00:17:02,139 --> 00:17:07,329
evaluating Python turtle creations this

00:17:04,990 --> 00:17:10,329
method is where all will score above 10

00:17:07,329 --> 00:17:13,089
out of 10 because just like all dogs are

00:17:10,329 --> 00:17:16,750
awesome all Python turtle creations are

00:17:13,089 --> 00:17:22,240
amazing you can find me on Twitter

00:17:16,750 --> 00:17:23,049
here at hailey Denby and I guess that's

00:17:22,240 --> 00:17:26,439
a wrap

00:17:23,049 --> 00:17:28,630
relevant links will be tweeted and I

00:17:26,439 --> 00:17:31,630
will share my slides with the Euro

00:17:28,630 --> 00:17:33,610
Python people the slides have links to

00:17:31,630 --> 00:17:37,330
sources and to relevant information

00:17:33,610 --> 00:17:40,360
you'll find them here just to give you

00:17:37,330 --> 00:17:42,909
more info on recursion fractals and the

00:17:40,360 --> 00:17:45,190
Python turtle module thank you so much

00:17:42,909 --> 00:17:48,909
for listening and your all 14 out of 10

00:17:45,190 --> 00:17:52,380
and I know I said no questions but we

00:17:48,909 --> 00:17:59,849
can do questions I changed my mind

00:17:52,380 --> 00:17:59,849
[Applause]

00:18:02,590 --> 00:18:17,870
we can rerun the turtles too but if we

00:18:15,320 --> 00:18:21,440
leave that up there will be a short

00:18:17,870 --> 00:18:24,860
break before the afternoon keynote

00:18:21,440 --> 00:18:26,480
that's back in here so there's enough

00:18:24,860 --> 00:18:31,240
time for you to kind of head back out

00:18:26,480 --> 00:18:31,240
and come back in and that's

00:18:36,040 --> 00:18:41,120
yeah there's a link to my github repo on

00:18:39,230 --> 00:18:43,550
the slides which I'm sharing with Euro

00:18:41,120 --> 00:18:49,610
Python and I'm tweeting out from my

00:18:43,550 --> 00:18:56,270
Twitter Hayley Denby thanks everyone

00:18:49,610 --> 00:18:56,270

YouTube URL: https://www.youtube.com/watch?v=b6AcYxIxXMA


