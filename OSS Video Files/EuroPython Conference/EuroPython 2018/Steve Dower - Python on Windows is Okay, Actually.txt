Title: Steve Dower - Python on Windows is Okay, Actually
Publication date: 2018-08-22
Playlist: EuroPython 2018
Description: 
	Python on Windows is Okay, Actually
[EuroPython 2018 - Talk - 2018-07-25 - Moorfoot]
[Edinburgh, UK]

By Steve Dower

Packages that won't install, encodings that don't work, installers that ask too many questions, and having to own a PC are all great reasons to just ignore Windows. Or they would be, if they were true.
Despite community perception, more than half of Python usage still happens on Windows, including web development, system administration, and data science, just like on Linux and Mac. And for the most part, Python works the same regardless of what operating system you happen to be using. Still, many library developers will unnecessarily exclude half of their potential audience by not even attempting to be compatible.
This session will walk through the things to be aware of when creating cross-platform libraries. From simple things like using pathlib rather than bytestrings, through to all the ways you can get builds and tests running on Windows for free, by the end of this session you will have a checklist of easy tasks for your project that will really enable the whole Python world to benefit from your work.



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2018.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:00,620 --> 00:00:06,600
thank you ah let's see a pretty good

00:00:04,230 --> 00:00:08,099
turnout here in general talks about

00:00:06,600 --> 00:00:10,860
windows don't get a huge amount of

00:00:08,099 --> 00:00:12,300
interest at a lot of - conferences and

00:00:10,860 --> 00:00:13,769
in fact Windows doesn't tends not to get

00:00:12,300 --> 00:00:16,890
a lot of attention in Python conferences

00:00:13,769 --> 00:00:18,150
in general I want to start off with a

00:00:16,890 --> 00:00:22,109
few reasons why that shouldn't be the

00:00:18,150 --> 00:00:23,550
case but the fact that it is it's kind

00:00:22,109 --> 00:00:25,080
of reflected by the makeup of the

00:00:23,550 --> 00:00:29,010
laptops you see around most Python

00:00:25,080 --> 00:00:30,840
conferences typically most people are

00:00:29,010 --> 00:00:32,730
here with a Mac there's a decent chunk

00:00:30,840 --> 00:00:35,219
on Windows and there's a few on Linux

00:00:32,730 --> 00:00:37,290
there's a few people with Windows I will

00:00:35,219 --> 00:00:38,910
say Euro Python has a lot more Windows

00:00:37,290 --> 00:00:40,379
machines and a lot more pcs than any

00:00:38,910 --> 00:00:43,610
other Python conference I've been to and

00:00:40,379 --> 00:00:45,750
I feel so welcome here it's so good

00:00:43,610 --> 00:00:48,059
but this is a rough breakdown

00:00:45,750 --> 00:00:50,700
anecdotally from the conference's I've

00:00:48,059 --> 00:00:52,079
been to predominantly Mac if you start

00:00:50,700 --> 00:00:55,110
looking at what the speakers are using

00:00:52,079 --> 00:01:00,059
up on stage it gets even more clear that

00:00:55,110 --> 00:01:01,230
this is a Mac dominated community and as

00:01:00,059 --> 00:01:02,489
I say I designed this for a u.s.

00:01:01,230 --> 00:01:05,189
audience where this would totally be

00:01:02,489 --> 00:01:06,960
true in here I can already see it's not

00:01:05,189 --> 00:01:09,960
there's only a few sort of glowing

00:01:06,960 --> 00:01:12,659
apples facing me right now which is very

00:01:09,960 --> 00:01:14,970
pleasant this is our community how it

00:01:12,659 --> 00:01:16,500
looks for the public spaces we're in

00:01:14,970 --> 00:01:18,119
when we're meeting with each other when

00:01:16,500 --> 00:01:20,220
we're hanging out but does it reflect

00:01:18,119 --> 00:01:21,540
any sort of reality I went and grabbed

00:01:20,220 --> 00:01:24,270
some actual stats from a number of

00:01:21,540 --> 00:01:26,549
sources downloads from from the Python

00:01:24,270 --> 00:01:27,750
package index this is rough and

00:01:26,549 --> 00:01:29,340
approximate but if you look at the

00:01:27,750 --> 00:01:31,770
packages that are interesting to all

00:01:29,340 --> 00:01:34,920
platforms your tendenci breakdowns like

00:01:31,770 --> 00:01:37,560
this majority linux roughly even mac and

00:01:34,920 --> 00:01:40,170
windows downloads if you look at

00:01:37,560 --> 00:01:42,360
packages from condo windows gets a much

00:01:40,170 --> 00:01:46,290
bigger chunk the data science world more

00:01:42,360 --> 00:01:49,950
into Windows then it is then pie pie in

00:01:46,290 --> 00:01:52,860
general if you look at the PSF survey

00:01:49,950 --> 00:01:55,079
that was run last year a full 50% of

00:01:52,860 --> 00:01:57,180
respondents were using Windows we're now

00:01:55,079 --> 00:02:00,930
up to half the Python community is on

00:01:57,180 --> 00:02:03,570
Windows if you look at users of Visual

00:02:00,930 --> 00:02:06,780
Studio code again just over 50 percent

00:02:03,570 --> 00:02:10,619
are using it on Windows for Python and

00:02:06,780 --> 00:02:12,430
roughly even Mac and Linux if you go to

00:02:10,619 --> 00:02:14,079
play charm

00:02:12,430 --> 00:02:16,569
see even more of a majority we have

00:02:14,079 --> 00:02:18,670
about 70% of PyCharm users are using it

00:02:16,569 --> 00:02:20,829
on Windows and again smaller on the

00:02:18,670 --> 00:02:22,420
other two and finally this ratio is a

00:02:20,829 --> 00:02:25,000
little unfair but this is the python.org

00:02:22,420 --> 00:02:26,860
downloads by operating system people who

00:02:25,000 --> 00:02:30,760
downloaded python from the official

00:02:26,860 --> 00:02:32,379
website the ratio is off because very

00:02:30,760 --> 00:02:33,939
few people should be downloading Python

00:02:32,379 --> 00:02:36,609
for there Linux distro from that website

00:02:33,939 --> 00:02:38,560
very few people are going to be getting

00:02:36,609 --> 00:02:40,060
their Mac installers from there when you

00:02:38,560 --> 00:02:42,040
can get them from brew but just to give

00:02:40,060 --> 00:02:44,620
you a sense of scale this is 14 million

00:02:42,040 --> 00:02:46,209
downloads per month of Python for

00:02:44,620 --> 00:02:50,010
Windows that's over 150 million

00:02:46,209 --> 00:02:50,010
downloads a year of Python for Windows

00:02:50,340 --> 00:02:54,639
even its most conservative estimate from

00:02:53,170 --> 00:02:57,310
the actual data we have a community that

00:02:54,639 --> 00:02:59,470
looks like this but when you look around

00:02:57,310 --> 00:03:04,000
the conferences we're seeing this part

00:02:59,470 --> 00:03:05,349
of it we just simply don't have this big

00:03:04,000 --> 00:03:07,629
half of the community showing up to our

00:03:05,349 --> 00:03:09,639
conferences engaging with our open

00:03:07,629 --> 00:03:12,549
source developments giving talks

00:03:09,639 --> 00:03:15,790
releasing projects but they are using it

00:03:12,549 --> 00:03:18,819
there's a huge quiet mass of people

00:03:15,790 --> 00:03:20,620
using Python for work making your living

00:03:18,819 --> 00:03:23,109
feeding their families with Python on

00:03:20,620 --> 00:03:25,690
Windows that are simply not visible that

00:03:23,109 --> 00:03:29,019
are not present in our community and not

00:03:25,690 --> 00:03:33,430
visible in a way that other platforms

00:03:29,019 --> 00:03:36,370
are we have essentially a divide in our

00:03:33,430 --> 00:03:37,449
community now I don't want to make this

00:03:36,370 --> 00:03:39,340
sound like it's all the conference's

00:03:37,449 --> 00:03:41,590
fault because I don't believe that's

00:03:39,340 --> 00:03:44,379
true a lot of these people and I've

00:03:41,590 --> 00:03:45,699
spoken to many of them simply would

00:03:44,379 --> 00:03:47,979
never consider coming to a conference

00:03:45,699 --> 00:03:49,720
they would never think that they would

00:03:47,979 --> 00:03:51,400
be welcomed at a Python conference it's

00:03:49,720 --> 00:03:52,569
never even entered their mind that

00:03:51,400 --> 00:03:55,329
that's the thing that they'd want to do

00:03:52,569 --> 00:03:56,919
that there are people doing things that

00:03:55,329 --> 00:04:00,340
they can engage with that they can share

00:03:56,919 --> 00:04:02,470
with who would be like who would want to

00:04:00,340 --> 00:04:04,599
have them there and as a result we end

00:04:02,470 --> 00:04:06,310
up with such a biased view of what the

00:04:04,599 --> 00:04:10,269
Python community looks like from the

00:04:06,310 --> 00:04:12,250
conferences we do have I believe a lot

00:04:10,269 --> 00:04:14,799
of this comes from the code that is out

00:04:12,250 --> 00:04:16,630
there the projects that are out there in

00:04:14,799 --> 00:04:18,820
particular the opinions that are put out

00:04:16,630 --> 00:04:21,219
there and I want to start addressing

00:04:18,820 --> 00:04:23,710
some of those today this session I'm

00:04:21,219 --> 00:04:25,600
going to go through five questions five

00:04:23,710 --> 00:04:28,480
topics phrases questions

00:04:25,600 --> 00:04:30,730
for each one of these I'm going to bring

00:04:28,480 --> 00:04:32,410
up two ways in which you can be wrong

00:04:30,730 --> 00:04:34,120
about this and these are all real

00:04:32,410 --> 00:04:35,500
opinions that I've heard from people

00:04:34,120 --> 00:04:37,590
that have been stated publicly

00:04:35,500 --> 00:04:40,060
I haven't had to make anything up here

00:04:37,590 --> 00:04:43,390
and many of these you look at and go

00:04:40,060 --> 00:04:45,100
well that's obviously wrong and if so

00:04:43,390 --> 00:04:46,720
I'm glad that that's your reaction to it

00:04:45,100 --> 00:04:49,150
if you're a Windows user you look at it

00:04:46,720 --> 00:04:50,170
and go that's obviously wrong but the

00:04:49,150 --> 00:04:51,790
problem is there are people out there

00:04:50,170 --> 00:04:53,770
who don't recognize this and

00:04:51,790 --> 00:04:56,320
unacknowledged in it so I'm not calling

00:04:53,770 --> 00:04:58,390
you out but I want to bring these up so

00:04:56,320 --> 00:05:01,270
that I can address them with one simple

00:04:58,390 --> 00:05:02,770
way to improve the situation for each of

00:05:01,270 --> 00:05:04,360
these topics I'm going to give you one

00:05:02,770 --> 00:05:06,730
simple thing you can do with your code

00:05:04,360 --> 00:05:10,300
your library your projects your tools

00:05:06,730 --> 00:05:12,490
that will make that code better not just

00:05:10,300 --> 00:05:14,560
for Windows users for any platform users

00:05:12,490 --> 00:05:17,140
all of these should improve your code

00:05:14,560 --> 00:05:18,310
generally and at the end one simple

00:05:17,140 --> 00:05:21,280
checklist so you have your camera's

00:05:18,310 --> 00:05:22,570
ready for that one of the things that

00:05:21,280 --> 00:05:25,930
you can just go off today

00:05:22,570 --> 00:05:29,340
check possibly change about your project

00:05:25,930 --> 00:05:31,900
or how it's presented that will be more

00:05:29,340 --> 00:05:33,820
inclusive more welcoming to the full

00:05:31,900 --> 00:05:39,810
Python community that we have available

00:05:33,820 --> 00:05:39,810
to us ever I'm ready okay

00:05:40,950 --> 00:05:46,930
first up how do I run Python you see the

00:05:45,880 --> 00:05:49,240
initial instructions on a lot of

00:05:46,930 --> 00:05:51,130
people's pages pif install this and then

00:05:49,240 --> 00:05:54,790
type this command and now you can run

00:05:51,130 --> 00:05:57,910
the code the first assumption a lot of

00:05:54,790 --> 00:05:59,680
people make is that everything is going

00:05:57,910 --> 00:06:01,600
to be on path now what this means is if

00:05:59,680 --> 00:06:03,730
you're in a terminal you can simply type

00:06:01,600 --> 00:06:05,830
the name and it will automatically

00:06:03,730 --> 00:06:09,370
locate either a user-specified

00:06:05,830 --> 00:06:12,040
copy of the the tool or a machine wide

00:06:09,370 --> 00:06:14,860
site one or a system one or some model

00:06:12,040 --> 00:06:16,450
like this to locate and figure out what

00:06:14,860 --> 00:06:19,120
to run so say you've just installed

00:06:16,450 --> 00:06:20,740
black you'll type black and that will

00:06:19,120 --> 00:06:22,090
run that tool that was just installed

00:06:20,740 --> 00:06:24,250
because it can look it up on the path

00:06:22,090 --> 00:06:26,590
and it knows which one to run it sounds

00:06:24,250 --> 00:06:28,930
great unfortunately on Windows this is

00:06:26,590 --> 00:06:33,490
not how the paths is designed to work

00:06:28,930 --> 00:06:34,870
it's often how it's abused to work but

00:06:33,490 --> 00:06:37,600
it's not how it's meant to work and so

00:06:34,870 --> 00:06:39,450
it doesn't always work this way path on

00:06:37,600 --> 00:06:41,710
Windows starts with the system file

00:06:39,450 --> 00:06:45,190
the path variable is how the system

00:06:41,710 --> 00:06:46,900
locates system libraries you can come

00:06:45,190 --> 00:06:50,500
along and add your app to this and now

00:06:46,900 --> 00:06:51,850
your app can be found automatically but

00:06:50,500 --> 00:06:53,500
know that it's not looking in like a

00:06:51,850 --> 00:06:55,030
user bin directory it's not looking in a

00:06:53,500 --> 00:06:58,180
specific place where there are only

00:06:55,030 --> 00:07:00,660
files to be found on path it's your

00:06:58,180 --> 00:07:02,860
entire app is now available there and

00:07:00,660 --> 00:07:05,440
because your app can be there it means

00:07:02,860 --> 00:07:06,940
their app can be there and someone else

00:07:05,440 --> 00:07:08,170
is going to come along with some other

00:07:06,940 --> 00:07:09,460
app and declare that they're the most

00:07:08,170 --> 00:07:12,160
important app in the world and they need

00:07:09,460 --> 00:07:14,500
to be first and guess how easy it is to

00:07:12,160 --> 00:07:17,070
find your system files now and this is

00:07:14,500 --> 00:07:19,900
when everything starts going wrong

00:07:17,070 --> 00:07:21,970
modifying the path on Windows is really

00:07:19,900 --> 00:07:27,040
just rolling a dice to figure out what

00:07:21,970 --> 00:07:27,550
you're actually going to get next

00:07:27,040 --> 00:07:30,390
assumption

00:07:27,550 --> 00:07:34,330
typing Python 3 is going to launch -

00:07:30,390 --> 00:07:36,790
this is not true Windows has an

00:07:34,330 --> 00:07:39,250
executable called Python dot exe the

00:07:36,790 --> 00:07:41,770
data XC is optional but there's no three

00:07:39,250 --> 00:07:44,530
in this name there's no 3.7 there's no

00:07:41,770 --> 00:07:45,790
Python - there's just one Python

00:07:44,530 --> 00:07:49,000
executable that's the same for all

00:07:45,790 --> 00:07:50,800
versions of Python on Windows now

00:07:49,000 --> 00:07:53,350
arguably this is not the right way to do

00:07:50,800 --> 00:07:55,360
it but it's the way it is currently done

00:07:53,350 --> 00:07:56,290
and you can pretend that it should be

00:07:55,360 --> 00:08:01,240
some other way but that doesn't actually

00:07:56,290 --> 00:08:04,360
help anyone because it's not true what

00:08:01,240 --> 00:08:07,150
is true is Windows also comes with the

00:08:04,360 --> 00:08:08,710
py launcher this is a slightly different

00:08:07,150 --> 00:08:12,060
tool

00:08:08,710 --> 00:08:14,860
it's py DXE but you can run it with py

00:08:12,060 --> 00:08:16,930
this tool automatically finds the latest

00:08:14,860 --> 00:08:18,760
install of python on someone's machine

00:08:16,930 --> 00:08:22,240
and will launch it so it's the

00:08:18,760 --> 00:08:24,430
equivalent of typing python 3 on a linux

00:08:22,240 --> 00:08:26,560
system which is going to be symlink to

00:08:24,430 --> 00:08:29,190
the correct hopefully to the latest

00:08:26,560 --> 00:08:31,420
version of python that you want to run

00:08:29,190 --> 00:08:34,510
the downside of this for launching a

00:08:31,420 --> 00:08:36,849
tool say black is that black has no way

00:08:34,510 --> 00:08:40,740
of saying I need to be run with py Dodd

00:08:36,849 --> 00:08:42,820
XE you have to say using py launch black

00:08:40,740 --> 00:08:46,840
which brings me to my one simple

00:08:42,820 --> 00:08:51,370
suggestion for these problems the Python

00:08:46,840 --> 00:08:52,840
- M option typically you'll type Python

00:08:51,370 --> 00:08:55,900
followed by the name of the script some

00:08:52,840 --> 00:08:57,820
ey the full path to a script it will go

00:08:55,900 --> 00:09:00,190
and launch that fail the dash M option

00:08:57,820 --> 00:09:02,980
lets you type the name of a module so

00:09:00,190 --> 00:09:05,260
just as if you type Python import that

00:09:02,980 --> 00:09:07,540
module this command will do the same

00:09:05,260 --> 00:09:09,640
thing it will automatically import that

00:09:07,540 --> 00:09:12,010
module find if it's runnable and run it

00:09:09,640 --> 00:09:14,470
and so my recommendation is make sure

00:09:12,010 --> 00:09:16,690
your module can be run in that way

00:09:14,470 --> 00:09:20,290
don't rely on someone installing black

00:09:16,690 --> 00:09:23,230
and then typing black you tell them that

00:09:20,290 --> 00:09:25,180
they can use py - M black and make sure

00:09:23,230 --> 00:09:27,670
that that works this actually works

00:09:25,180 --> 00:09:29,020
better on all systems you can the main

00:09:27,670 --> 00:09:30,610
reason you have to activate virtual

00:09:29,020 --> 00:09:34,050
environments is to make this work

00:09:30,610 --> 00:09:36,370
automatically but if you don't do that

00:09:34,050 --> 00:09:36,940
then the full path is going to work just

00:09:36,370 --> 00:09:38,440
fine

00:09:36,940 --> 00:09:41,260
whatever version of Python you launch

00:09:38,440 --> 00:09:43,510
will are using - M will run in that

00:09:41,260 --> 00:09:45,580
version of Python pip actually

00:09:43,510 --> 00:09:47,350
recommends always using - M pip on all

00:09:45,580 --> 00:09:49,180
platforms to make sure that you install

00:09:47,350 --> 00:09:51,190
the packages into the version of Python

00:09:49,180 --> 00:09:52,480
that Python is going to launch because

00:09:51,190 --> 00:09:53,800
as soon as your path gets messed up you

00:09:52,480 --> 00:09:55,690
can pip install in the wrong place and

00:09:53,800 --> 00:09:58,390
then you go to import it and it's all

00:09:55,690 --> 00:10:00,700
broken so it works everywhere but please

00:09:58,390 --> 00:10:02,560
document it you've got a little section

00:10:00,700 --> 00:10:07,000
in you read me that says this is how you

00:10:02,560 --> 00:10:09,460
run this project add a line python - m

00:10:07,000 --> 00:10:11,530
name of the project that's all it takes

00:10:09,460 --> 00:10:13,570
and suddenly you've enabled a big group

00:10:11,530 --> 00:10:21,660
of people to use your project on their

00:10:13,570 --> 00:10:21,660
system handling parts

00:10:26,680 --> 00:10:30,949
hopefully you think this is one of these

00:10:28,430 --> 00:10:32,740
silly assumptions of course I know that

00:10:30,949 --> 00:10:36,769
of course everyone uses Ford's that no

00:10:32,740 --> 00:10:38,620
here's this sample path on Windows those

00:10:36,769 --> 00:10:40,730
are back slashes not forward slashes

00:10:38,620 --> 00:10:43,339
which means if you come along and do

00:10:40,730 --> 00:10:45,860
something like this it splits it into

00:10:43,339 --> 00:10:49,149
exactly one element because there's no

00:10:45,860 --> 00:10:51,019
forward slashes in this string at at all

00:10:49,149 --> 00:10:52,880
that is a bad idea

00:10:51,019 --> 00:10:54,529
now Windows gets a little bit

00:10:52,880 --> 00:10:56,300
interesting here because if you give it

00:10:54,529 --> 00:10:56,810
a path with forward slashes instead of

00:10:56,300 --> 00:10:58,850
back slashes

00:10:56,810 --> 00:11:00,680
it'll interpret it just fine it can

00:10:58,850 --> 00:11:02,959
it'll automatically convert the forward

00:11:00,680 --> 00:11:05,389
slashes to back slashes locate your file

00:11:02,959 --> 00:11:06,920
just like perfectly alright but if

00:11:05,389 --> 00:11:09,589
you're getting anything from a user if

00:11:06,920 --> 00:11:12,199
you're getting anything from skander or

00:11:09,589 --> 00:11:14,209
the globe module or the command line

00:11:12,199 --> 00:11:17,240
it's going to come with back slashes and

00:11:14,209 --> 00:11:18,769
if your code assumes that it's going to

00:11:17,240 --> 00:11:25,880
have forward slashes you're going to be

00:11:18,769 --> 00:11:27,110
broken on a number of systems the next

00:11:25,880 --> 00:11:28,430
common assumption that people make with

00:11:27,110 --> 00:11:34,459
path handling is that they know how to

00:11:28,430 --> 00:11:39,050
do it so on POSIX systems this is the

00:11:34,459 --> 00:11:41,360
root directory on Windows systems this

00:11:39,050 --> 00:11:42,709
is the root directory needs to be

00:11:41,360 --> 00:11:44,449
handled differently you can't assume a

00:11:42,709 --> 00:11:48,290
single slash of the start is the root

00:11:44,449 --> 00:11:51,410
directory on Windows this is also the

00:11:48,290 --> 00:11:54,709
root directory so now splitting our back

00:11:51,410 --> 00:11:56,600
slash doesn't help either this is not a

00:11:54,709 --> 00:12:00,199
root directory this is not a directory

00:11:56,600 --> 00:12:02,870
at all feel like you you know know how

00:12:00,199 --> 00:12:05,240
to handle paths yourself it's a couple

00:12:02,870 --> 00:12:12,019
of edge cases ok who knew that this is a

00:12:05,240 --> 00:12:13,759
root directory 3/4 I didn't until I

00:12:12,019 --> 00:12:15,050
started doing research and someone

00:12:13,759 --> 00:12:16,850
pointed out hey guess what there's

00:12:15,050 --> 00:12:20,420
another way to refer to the root

00:12:16,850 --> 00:12:22,759
directory and it involves a good and now

00:12:20,420 --> 00:12:28,490
all of your code for handling C colon

00:12:22,759 --> 00:12:32,809
backslash is broken so one simple idea

00:12:28,490 --> 00:12:35,089
don't handle pods don't manipulate them

00:12:32,809 --> 00:12:36,209
like strings use path Lib this has been

00:12:35,089 --> 00:12:37,920
part of the Python standard

00:12:36,209 --> 00:12:40,079
every since three four there's a back

00:12:37,920 --> 00:12:41,730
port so you can install the path live

00:12:40,079 --> 00:12:44,790
module for older versions if you need to

00:12:41,730 --> 00:12:47,519
and it comes with an object-oriented

00:12:44,790 --> 00:12:49,439
model for paths they're essentially

00:12:47,519 --> 00:12:51,629
still strings underneath but you get

00:12:49,439 --> 00:12:54,990
objects to manipulate them with to add

00:12:51,629 --> 00:12:56,999
more items to it /on all platforms

00:12:54,990 --> 00:13:00,869
it's the divide operator with a string

00:12:56,999 --> 00:13:03,089
will join segments to the path there are

00:13:00,869 --> 00:13:05,639
properties to reduce it to take pieces

00:13:03,089 --> 00:13:08,009
off the end properties for the various

00:13:05,639 --> 00:13:10,139
parts of it names suffixes functions to

00:13:08,009 --> 00:13:12,540
change those so you don't have to split

00:13:10,139 --> 00:13:14,639
strings or anything

00:13:12,540 --> 00:13:16,499
there are file system operations such as

00:13:14,639 --> 00:13:19,259
glob straight on to it which will give

00:13:16,499 --> 00:13:21,629
you a list of new path objects from that

00:13:19,259 --> 00:13:24,600
directory and comparisons basic

00:13:21,629 --> 00:13:26,730
comparisons are handled there one step

00:13:24,600 --> 00:13:28,470
better than comparing strings they're

00:13:26,730 --> 00:13:30,149
deliberately not at the level of

00:13:28,470 --> 00:13:31,259
comparing like AI nodes or anything

00:13:30,149 --> 00:13:34,649
they're not going to tell you this is

00:13:31,259 --> 00:13:36,689
exactly the same file though there are

00:13:34,649 --> 00:13:42,929
other functions for doing that more

00:13:36,689 --> 00:13:46,170
reliably settings if you've got a

00:13:42,929 --> 00:13:47,549
command-line tool or something that

00:13:46,170 --> 00:13:48,779
isn't a straight Python API you've

00:13:47,549 --> 00:13:50,999
probably got some big mix of

00:13:48,779 --> 00:13:52,799
command-line arguments and environment

00:13:50,999 --> 00:13:55,199
variables and hopefully a configuration

00:13:52,799 --> 00:13:56,790
file where people can put settings so

00:13:55,199 --> 00:13:59,149
that they're always used like proxy

00:13:56,790 --> 00:14:02,129
settings username password whatever

00:13:59,149 --> 00:14:04,709
where do you keep these one assumption

00:14:02,129 --> 00:14:07,439
that I've seen made is that tilde is the

00:14:04,709 --> 00:14:09,990
home directory and on Windows this is

00:14:07,439 --> 00:14:11,429
not the case tilde on Windows is simply

00:14:09,990 --> 00:14:14,579
a character that you can use anywhere in

00:14:11,429 --> 00:14:15,869
a path that you like and so if you try

00:14:14,579 --> 00:14:18,110
and navigate to the tool directory and

00:14:15,869 --> 00:14:20,220
someone actually has one called that

00:14:18,110 --> 00:14:21,779
then you've just gone into some other

00:14:20,220 --> 00:14:24,990
directory if not it's probably not there

00:14:21,779 --> 00:14:28,199
certainly doesn't resolve to any of the

00:14:24,990 --> 00:14:29,699
specific user folders one way to find

00:14:28,199 --> 00:14:30,990
those and I and I hesitate to say this

00:14:29,699 --> 00:14:32,429
I'll get to the real recommendation a

00:14:30,990 --> 00:14:34,170
bit one way to find that is to look at

00:14:32,429 --> 00:14:36,240
the user profile environment variable

00:14:34,170 --> 00:14:39,869
which will tell you the route of the

00:14:36,240 --> 00:14:42,660
users directory profile directory which

00:14:39,869 --> 00:14:44,669
leads to the second assumption the home

00:14:42,660 --> 00:14:47,810
directory is the best directory for

00:14:44,669 --> 00:14:50,450
keeping configuration settings

00:14:47,810 --> 00:14:51,740
I personally don't believe this is the

00:14:50,450 --> 00:14:53,360
case on any platform though I know

00:14:51,740 --> 00:14:55,250
people like to argue about that and

00:14:53,360 --> 00:14:57,020
certainly other people note posix better

00:14:55,250 --> 00:15:00,200
than I do is so I'm willing to listen to

00:14:57,020 --> 00:15:01,670
them in that case but certainly on

00:15:00,200 --> 00:15:03,170
Windows if you find the user's profile

00:15:01,670 --> 00:15:05,060
directory that's not a good place to put

00:15:03,170 --> 00:15:07,310
anything it comes with the whole set of

00:15:05,060 --> 00:15:09,920
sub directories there's a group

00:15:07,310 --> 00:15:12,260
documents pictures videos that a user

00:15:09,920 --> 00:15:14,750
visible the user can see these can put

00:15:12,260 --> 00:15:17,300
whatever they want in there can modify

00:15:14,750 --> 00:15:19,220
things that are in there and then

00:15:17,300 --> 00:15:20,990
there's a set of hidden directories

00:15:19,220 --> 00:15:23,720
under the app data folder is the most

00:15:20,990 --> 00:15:25,850
common which then breaks down into

00:15:23,720 --> 00:15:27,410
slightly different semantics the local

00:15:25,850 --> 00:15:29,060
one is guaranteed to stay only on that

00:15:27,410 --> 00:15:30,950
current machine the roaming one might

00:15:29,060 --> 00:15:33,680
automatically sync to another machine

00:15:30,950 --> 00:15:35,420
that the user signs into and so you have

00:15:33,680 --> 00:15:36,920
all these different places where you may

00:15:35,420 --> 00:15:38,750
want to put configuration you may want

00:15:36,920 --> 00:15:40,700
to put settings if the user user should

00:15:38,750 --> 00:15:42,980
see it and edit it maybe documents is

00:15:40,700 --> 00:15:44,630
the right place if it should

00:15:42,980 --> 00:15:46,580
automatically go to every machine that

00:15:44,630 --> 00:15:49,400
user ever uses perhaps roaming is the

00:15:46,580 --> 00:15:52,520
right place if it's a local cache maybe

00:15:49,400 --> 00:15:54,740
app data local is the right place but

00:15:52,520 --> 00:15:57,110
the easy way to deal with all this is to

00:15:54,740 --> 00:15:58,250
get the app doors module it's a single

00:15:57,110 --> 00:16:01,370
file package

00:15:58,250 --> 00:16:02,570
I believe it's MIT license so most

00:16:01,370 --> 00:16:04,180
people should have no problem dropping

00:16:02,570 --> 00:16:07,400
in a simple file if that's what you want

00:16:04,180 --> 00:16:09,410
but it comes with functions that work

00:16:07,400 --> 00:16:11,810
across multiple platforms to provide

00:16:09,410 --> 00:16:14,330
these directories so in your code you

00:16:11,810 --> 00:16:16,580
can simply say app does give me the user

00:16:14,330 --> 00:16:18,770
data derp here is the name of my app

00:16:16,580 --> 00:16:21,110
here's my author it will make sure it

00:16:18,770 --> 00:16:26,360
doesn't collide with other people's apps

00:16:21,110 --> 00:16:28,220
or your own apps and it gives you some

00:16:26,360 --> 00:16:29,870
somewhat opinionated directories but

00:16:28,220 --> 00:16:33,050
they all end up in generally good spots

00:16:29,870 --> 00:16:34,850
for configuration caches logs and per

00:16:33,050 --> 00:16:38,230
machine locations as well if that's

00:16:34,850 --> 00:16:38,230
where you need to look or modify

00:16:44,750 --> 00:16:53,220
text encodings always a lot of fun first

00:16:50,700 --> 00:16:56,760
assumption utf-8 is always the correct

00:16:53,220 --> 00:16:59,820
encoding okay let's start with a brief

00:16:56,760 --> 00:17:05,699
history lesson who knows what happened

00:16:59,820 --> 00:17:09,839
in 1985 Windows 1.0 was released who

00:17:05,699 --> 00:17:13,230
knows what happened in 1991 unicode 1.0

00:17:09,839 --> 00:17:15,709
was released so for six years Windows

00:17:13,230 --> 00:17:19,350
was shipping with international support

00:17:15,709 --> 00:17:21,089
without Unicode even existing so there's

00:17:19,350 --> 00:17:22,380
no way that utf-8 was the right encoding

00:17:21,089 --> 00:17:24,839
for that now Windows is really good at

00:17:22,380 --> 00:17:27,600
backwards compatibility you might have

00:17:24,839 --> 00:17:28,950
noticed that you can build or install

00:17:27,600 --> 00:17:30,920
applications for early versions of

00:17:28,950 --> 00:17:33,120
Windows and they'll continue to work

00:17:30,920 --> 00:17:36,660
which means that all of the support that

00:17:33,120 --> 00:17:41,550
was there in 1985 86 87 88 89 90 is

00:17:36,660 --> 00:17:47,190
still there you may be familiar with

00:17:41,550 --> 00:17:48,720
these as the a and W api's the a api's

00:17:47,190 --> 00:17:51,960
are a whole lot of the windows API is

00:17:48,720 --> 00:17:54,570
that end in a capital a they take char

00:17:51,960 --> 00:17:57,810
star string arguments they use what's

00:17:54,570 --> 00:18:01,980
called the system code page so a char in

00:17:57,810 --> 00:18:03,660
C 255 possible values more letters than

00:18:01,980 --> 00:18:05,850
that in the world we know that how do

00:18:03,660 --> 00:18:07,860
you map between them the code page is a

00:18:05,850 --> 00:18:10,620
system-wide setting that says use this

00:18:07,860 --> 00:18:14,520
particular table to map these characters

00:18:10,620 --> 00:18:16,620
into what they really mean the wapi czar

00:18:14,520 --> 00:18:18,900
the new ones the replacements they use

00:18:16,620 --> 00:18:22,730
16-bit characters the encoding is always

00:18:18,900 --> 00:18:25,290
utf-16 natively Windows users utf-16

00:18:22,730 --> 00:18:26,750
without surrogate pairs which chat about

00:18:25,290 --> 00:18:30,360
later if you are interested in that

00:18:26,750 --> 00:18:31,860
users usually have sixteen internally so

00:18:30,360 --> 00:18:33,330
in fact for Windows utf-8 is never

00:18:31,860 --> 00:18:35,100
correct you've always got to convert it

00:18:33,330 --> 00:18:37,490
generally to use you have 16 for the

00:18:35,100 --> 00:18:42,440
operating system to be able to use it

00:18:37,490 --> 00:18:42,440
which comes to the next assumption

00:18:44,510 --> 00:18:50,809
there's a lot of negatives on this so

00:18:46,429 --> 00:18:53,960
let me go through and explain we know

00:18:50,809 --> 00:18:55,730
the bytes are not text we know the bytes

00:18:53,960 --> 00:18:57,620
are not so it's why we have Python 3

00:18:55,730 --> 00:19:01,070
it's why we have two different types we

00:18:57,620 --> 00:19:03,470
have a bytes type in astra type but

00:19:01,070 --> 00:19:06,080
there is an assumption that I have seen

00:19:03,470 --> 00:19:07,940
come up from time to time and in fact I

00:19:06,080 --> 00:19:10,940
had to write a pep and make changes to

00:19:07,940 --> 00:19:13,460
help deal with this where if you have a

00:19:10,940 --> 00:19:15,110
if you have something that's stored in

00:19:13,460 --> 00:19:18,350
bytes and you pass it to the operating

00:19:15,110 --> 00:19:19,910
system and then get it back it will come

00:19:18,350 --> 00:19:22,190
back just as by its bytes in bytes out

00:19:19,910 --> 00:19:24,590
and never be corrupted because it's just

00:19:22,190 --> 00:19:26,049
some blob of data now on POSIX this

00:19:24,590 --> 00:19:29,299
works for things like filesystem paths

00:19:26,049 --> 00:19:31,490
which are arguably text because they get

00:19:29,299 --> 00:19:34,309
shown to a user but if you have a path

00:19:31,490 --> 00:19:36,559
as a blob of bytes and pass that into

00:19:34,309 --> 00:19:38,540
the OS and get it back then it'll be

00:19:36,559 --> 00:19:42,440
just fine because the OS ignores it and

00:19:38,540 --> 00:19:45,140
says it's just a blob of bytes not true

00:19:42,440 --> 00:19:47,360
on Windows because as I mentioned the

00:19:45,140 --> 00:19:49,640
native encoding is utf-8 which means if

00:19:47,360 --> 00:19:51,470
you pass a blob of bytes to something

00:19:49,640 --> 00:19:53,600
that the OS thinks is text such as a

00:19:51,470 --> 00:19:55,910
file system path it's going to convert

00:19:53,600 --> 00:19:57,530
it to utf-16 it will do that with your

00:19:55,910 --> 00:20:00,200
code page so you've got 255

00:19:57,530 --> 00:20:02,179
possibilities for what the letters will

00:20:00,200 --> 00:20:03,530
turn into then when you get it back it

00:20:02,179 --> 00:20:05,990
will go back to your code page and

00:20:03,530 --> 00:20:07,580
you'll get if there's anything that

00:20:05,990 --> 00:20:11,559
doesn't in code properly you'll get

00:20:07,580 --> 00:20:16,520
question marks so the one simple idea is

00:20:11,559 --> 00:20:18,679
to simply use stro use strings Python

00:20:16,520 --> 00:20:21,559
has built in all the ability to do the

00:20:18,679 --> 00:20:24,230
OS conversions for all platforms so if

00:20:21,559 --> 00:20:26,030
you're even concerned about invalid

00:20:24,230 --> 00:20:28,040
encodings in POSIX filesystem paths

00:20:26,030 --> 00:20:29,690
Python can handle that it can encode

00:20:28,040 --> 00:20:32,710
them into strings in a way that will be

00:20:29,690 --> 00:20:34,940
preserved through string processing and

00:20:32,710 --> 00:20:36,200
then when you pass it back out it will

00:20:34,940 --> 00:20:38,140
convert them back correctly and you

00:20:36,200 --> 00:20:41,620
won't lose those invalid encoded

00:20:38,140 --> 00:20:44,990
characters for windows obviously its

00:20:41,620 --> 00:20:46,700
unicode - unicode back to unicode it

00:20:44,990 --> 00:20:50,540
does have to do some transcoding but

00:20:46,700 --> 00:20:52,130
it's a reliable mapping and so letting

00:20:50,540 --> 00:20:55,040
Python do the OS conversions is

00:20:52,130 --> 00:20:56,229
generally the safest thing to do for all

00:20:55,040 --> 00:20:59,149
platforms

00:20:56,229 --> 00:21:01,639
for iostream conversions anytime you

00:20:59,149 --> 00:21:03,830
open a file and rather than reading

00:21:01,639 --> 00:21:06,169
bytes you want to read text you need to

00:21:03,830 --> 00:21:07,580
do your own conversion this one's

00:21:06,169 --> 00:21:10,669
probably the hardest recommendation of

00:21:07,580 --> 00:21:13,190
the day because choosing the encoding to

00:21:10,669 --> 00:21:15,440
use for reading and writing user data

00:21:13,190 --> 00:21:16,820
can get really messy really quick so

00:21:15,440 --> 00:21:18,859
this is why I've quoted part of the zone

00:21:16,820 --> 00:21:21,710
of - up here in the face of ambiguity

00:21:18,859 --> 00:21:23,899
refuse the temptation to guess you will

00:21:21,710 --> 00:21:27,289
still be tempted to guess I don't blame

00:21:23,899 --> 00:21:29,629
you do what you need to do when you have

00:21:27,289 --> 00:21:33,919
the opportunity to say this file must be

00:21:29,629 --> 00:21:35,889
utf-8 do that if you don't know what

00:21:33,919 --> 00:21:38,599
encoding a file is you've been given I

00:21:35,889 --> 00:21:41,210
would suggest assume it's utf-8 and if

00:21:38,599 --> 00:21:42,979
it fails complain to the user tell them

00:21:41,210 --> 00:21:44,570
it needs to be utf-8 let them change it

00:21:42,979 --> 00:21:50,479
or let them tell you what encoding it

00:21:44,570 --> 00:21:53,330
should be but ultimately and and as part

00:21:50,479 --> 00:21:55,249
of my work preparing perhaps five to

00:21:53,330 --> 00:21:57,289
eight and five twenty nine which deal

00:21:55,249 --> 00:22:00,769
with encoding we decided there was no

00:21:57,289 --> 00:22:03,830
safe way to ever make a change to help -

00:22:00,769 --> 00:22:05,599
does stream encoding by default the only

00:22:03,830 --> 00:22:08,629
safe way to approach it is for you as

00:22:05,599 --> 00:22:10,279
the application developer to know what

00:22:08,629 --> 00:22:12,799
encoding it should be because you have

00:22:10,279 --> 00:22:14,899
some extra information or you can force

00:22:12,799 --> 00:22:16,909
the data provider to provide the right

00:22:14,899 --> 00:22:18,649
thing or as a library developer let the

00:22:16,909 --> 00:22:20,330
user specify the ink it will let the

00:22:18,649 --> 00:22:24,950
call up specify what encoding it should

00:22:20,330 --> 00:22:27,129
be but please refuse the temptation to

00:22:24,950 --> 00:22:27,129
guess

00:22:30,100 --> 00:22:37,450
I think we all care about this one right

00:22:34,140 --> 00:22:40,120
how do I make my code work a lot of

00:22:37,450 --> 00:22:43,450
people are very concerned that nobody

00:22:40,120 --> 00:22:45,929
can install packages on Windows and this

00:22:43,450 --> 00:22:49,090
is simply not true

00:22:45,929 --> 00:22:51,220
most Python packages are pure Python

00:22:49,090 --> 00:22:53,919
code there is absolutely no reason they

00:22:51,220 --> 00:22:56,080
can't be installed on Windows because

00:22:53,919 --> 00:22:59,679
that's simply extracting a zip file that

00:22:56,080 --> 00:23:03,159
works totally fine all of the time there

00:22:59,679 --> 00:23:08,169
are some code that includes C code for

00:23:03,159 --> 00:23:09,580
those you need a compiler now if you do

00:23:08,169 --> 00:23:11,440
want people on Windows to be able to

00:23:09,580 --> 00:23:13,809
install it the two options are tell them

00:23:11,440 --> 00:23:15,370
they need a compiler and the easiest way

00:23:13,809 --> 00:23:17,350
to get the compiler is to install Visual

00:23:15,370 --> 00:23:19,929
Studio Community Edition which is

00:23:17,350 --> 00:23:21,789
totally free and includes a single check

00:23:19,929 --> 00:23:25,030
box that gives you the right compilers

00:23:21,789 --> 00:23:28,990
for Python or the other option is to

00:23:25,030 --> 00:23:30,580
build a wheel so wheels are a different

00:23:28,990 --> 00:23:32,650
form of packaging that can go on the

00:23:30,580 --> 00:23:35,049
Python package index they are pre

00:23:32,650 --> 00:23:37,900
compiled which means you will compile

00:23:35,049 --> 00:23:40,390
all the package for Windows 32 or 64-bit

00:23:37,900 --> 00:23:42,070
and publish an early build users can

00:23:40,390 --> 00:23:44,440
simply download and extract that and

00:23:42,070 --> 00:23:47,200
mention windows compatibility earlier it

00:23:44,440 --> 00:23:49,270
works totally fine you can build them on

00:23:47,200 --> 00:23:52,030
the latest Windows 10 it will largely

00:23:49,270 --> 00:23:54,190
work all the way back to as far back as

00:23:52,030 --> 00:23:55,360
Python supports and it will continue

00:23:54,190 --> 00:23:58,419
working in the future so the

00:23:55,360 --> 00:24:01,539
compatibility is not the concern there

00:23:58,419 --> 00:24:03,700
the concern is generally not being able

00:24:01,539 --> 00:24:07,360
to build on Windows at all or not having

00:24:03,700 --> 00:24:08,679
your own machine for it but I'll point

00:24:07,360 --> 00:24:10,360
out that in that case the problem isn't

00:24:08,679 --> 00:24:12,490
that nobody else can install on Windows

00:24:10,360 --> 00:24:14,409
that it's a personal problem if you

00:24:12,490 --> 00:24:20,020
don't have the ability to install on

00:24:14,409 --> 00:24:22,059
Windows similarly people refuse to do it

00:24:20,020 --> 00:24:25,980
because they claim they can't test on

00:24:22,059 --> 00:24:29,289
Windows and that's just absolutely false

00:24:25,980 --> 00:24:33,610
that's just absolutely false that's this

00:24:29,289 --> 00:24:35,020
idea comes up far too often I'm trying

00:24:33,610 --> 00:24:38,559
not to get too upset about it right now

00:24:35,020 --> 00:24:42,340
but it is something that that people say

00:24:38,559 --> 00:24:44,219
and and frankly it's I don't think

00:24:42,340 --> 00:24:46,359
there's any good excuse for this

00:24:44,219 --> 00:24:47,950
more than half the Python community is

00:24:46,359 --> 00:24:50,739
running Python just fine on Windows if

00:24:47,950 --> 00:24:52,719
you want to engage and include that

00:24:50,739 --> 00:24:53,799
community you might have to step outside

00:24:52,719 --> 00:24:56,590
of your shell and do a little bit of

00:24:53,799 --> 00:24:59,109
work that might involve getting a

00:24:56,590 --> 00:25:02,769
virtual machine from somewhere but you

00:24:59,109 --> 00:25:09,809
can do that this is not outside of the

00:25:02,769 --> 00:25:12,009
bounds of your ability as a developer so

00:25:09,809 --> 00:25:15,489
you get two ideas for the price of one

00:25:12,009 --> 00:25:19,389
here either get continuous integration

00:25:15,489 --> 00:25:21,039
set up or collaborate there are many

00:25:19,389 --> 00:25:22,509
many free continuous integration

00:25:21,039 --> 00:25:24,549
providers you don't want to install

00:25:22,509 --> 00:25:26,979
windows on your home machine that's fine

00:25:24,549 --> 00:25:29,830
there are plenty of people that will let

00:25:26,979 --> 00:25:31,809
you use theirs automatically you can set

00:25:29,830 --> 00:25:33,549
it up visual studio team services will

00:25:31,809 --> 00:25:35,830
give you free Windows Mac and Linux

00:25:33,549 --> 00:25:37,330
builds all in the one system you can

00:25:35,830 --> 00:25:40,059
build all your wheels in one go and

00:25:37,330 --> 00:25:41,830
publish them all from there and it has a

00:25:40,059 --> 00:25:42,399
free tier that'll more than get you

00:25:41,830 --> 00:25:44,889
started

00:25:42,399 --> 00:25:47,919
Bay is also available you tend to see

00:25:44,889 --> 00:25:49,690
that show up in combination with other

00:25:47,919 --> 00:25:52,659
CI providers that will do the other

00:25:49,690 --> 00:25:55,450
platforms but these these are free

00:25:52,659 --> 00:25:57,190
there's no excuse for not having access

00:25:55,450 --> 00:25:59,440
to this stuff because everyone is dying

00:25:57,190 --> 00:26:00,609
to give it away to you if you are

00:25:59,440 --> 00:26:02,139
interested in visual studio team

00:26:00,609 --> 00:26:04,799
services I can talk to you about that

00:26:02,139 --> 00:26:06,940
for days to come and find me afterwards

00:26:04,799 --> 00:26:09,549
but the other option is to collaborate

00:26:06,940 --> 00:26:11,679
is to actually get on your github page

00:26:09,549 --> 00:26:13,719
and say I'm sorry we don't have great

00:26:11,679 --> 00:26:16,210
Windows support right now if anyone can

00:26:13,719 --> 00:26:18,519
help me occasionally test the library

00:26:16,210 --> 00:26:20,799
which is download the sources run the

00:26:18,519 --> 00:26:22,450
tests and let me know whether there's a

00:26:20,799 --> 00:26:24,070
problem or not that would be very much

00:26:22,450 --> 00:26:26,799
appreciated if there's someone who had

00:26:24,070 --> 00:26:29,080
released time can install this can have

00:26:26,799 --> 00:26:31,149
the compilers can produce a wheel that I

00:26:29,080 --> 00:26:35,080
can upload and publish I am willing to

00:26:31,149 --> 00:26:36,999
accept your help it's not a big step we

00:26:35,080 --> 00:26:40,149
have a large community of people who are

00:26:36,999 --> 00:26:41,739
willing to do this but are largely not

00:26:40,149 --> 00:26:44,649
going to walk into your project and

00:26:41,739 --> 00:26:47,049
demand the right to do it you have to

00:26:44,649 --> 00:26:49,210
invite them because it is your project

00:26:47,049 --> 00:26:50,710
and if you care about it it's very easy

00:26:49,210 --> 00:26:52,859
to invite people to come and help you

00:26:50,710 --> 00:26:52,859
out

00:26:53,790 --> 00:26:59,610
so where to from here here's the

00:26:56,160 --> 00:27:01,590
checklist that I offered earlier if

00:26:59,610 --> 00:27:04,920
you're releasing a project ask yourself

00:27:01,590 --> 00:27:08,250
does - M work on it if it's a tool can

00:27:04,920 --> 00:27:12,360
people Python - M - start running my

00:27:08,250 --> 00:27:14,480
code do I manipulate paths by hand am i

00:27:12,360 --> 00:27:19,050
using string operations reg acts on

00:27:14,480 --> 00:27:20,060
paths do you put your configuration in

00:27:19,050 --> 00:27:23,670
weird places

00:27:20,060 --> 00:27:25,050
you force people to navigate into places

00:27:23,670 --> 00:27:28,350
they may never have looked at on their

00:27:25,050 --> 00:27:30,840
machine to change settings do you keep

00:27:28,350 --> 00:27:32,910
your text in strings or do you just keep

00:27:30,840 --> 00:27:34,080
it floating around as bytes and assume

00:27:32,910 --> 00:27:38,040
that all the encoding is going to work

00:27:34,080 --> 00:27:39,930
out on its own and do you have

00:27:38,040 --> 00:27:42,390
continuous integration for your project

00:27:39,930 --> 00:27:50,520
or collaborators who are helping you out

00:27:42,390 --> 00:27:52,080
even on a part-time basis Python is a

00:27:50,520 --> 00:27:56,220
great community and it's really really

00:27:52,080 --> 00:27:57,540
sad to have a split between so many of

00:27:56,220 --> 00:28:03,960
the people that make it such a great

00:27:57,540 --> 00:28:06,870
time I would love to see even just these

00:28:03,960 --> 00:28:09,690
little things changing projects that

00:28:06,870 --> 00:28:13,980
people are releasing making it easier

00:28:09,690 --> 00:28:16,050
for people to use and share the projects

00:28:13,980 --> 00:28:18,300
that make Python great and to engage and

00:28:16,050 --> 00:28:19,560
to reach and to fix that reach in the

00:28:18,300 --> 00:28:21,200
community bring more people together

00:28:19,560 --> 00:28:25,590
bring more people to these conferences

00:28:21,200 --> 00:28:29,040
and overall make Python even more of the

00:28:25,590 --> 00:28:31,110
greatest community on earth thank you Oh

00:28:29,040 --> 00:28:33,590
take questions out in the hallway

00:28:31,110 --> 00:28:33,590
afterwards

00:28:35,320 --> 00:28:38,500

YouTube URL: https://www.youtube.com/watch?v=ugeulM2gjvY


