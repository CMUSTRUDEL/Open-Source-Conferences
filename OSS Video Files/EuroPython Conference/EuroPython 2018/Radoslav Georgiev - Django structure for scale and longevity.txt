Title: Radoslav Georgiev - Django structure for scale and longevity
Publication date: 2018-08-30
Playlist: EuroPython 2018
Description: 
	Django structure for scale and longevity
[EuroPython 2018 - Talk - 2018-07-26 - Moorfoot]
[Edinburgh, UK]

By Radoslav Georgiev

Django structure for scale and longevity

Why

Django is great.

But as we add new features, as our dev team grows &amp; the software needs to be stable on production, things can get quite messy.

We are going to look at some common patterns, derived from experience, on how to structure your Django project for scale and longevity.

What

Main topics are:


Django service layer or where should business logic live?
Using Django Rest Framework in a clean &amp; repeatable way &amp; combining it with the service layer.
Testing everything that matters, without repeating ourselves in different tests.


We are going to talk about when to rely on existing abstraction so it's actually helpful &amp; when to avoid existing abstraction, and code things ourselves.

The examples showed in this talk are derived from working with Django in the last 5 years on projects with:


Daily production usage &amp; production deploys.
Dozens of apps.
Hundreds of models &amp; APIs.
Tens of integrations working simultaneously.
Teams of 5 to 10 people.


Who
Key takeaways from the talk:


Increased productivity when developing with Django.
Deeper understanding of the software development process with Django.
Demo project with everything mentioned in it.


The talk is great for all levels of Django knowledge - from beginners to advanced users &amp; teams.

How

The main way of getting the point across is going to be by showing regular code, talking how it can get messy &amp; then following up with examples of improving that code. Hopefully this talk will start a lot of discussion afterwards.

Breakdown of the talk:


Django service layer

Fat models or fat views?
Where do I put my business logic?
What is a service &amp; what goes into a service?
What is a selector &amp; what goes into a selector?

General Django structure

How many apps should I have?
Structuring your code so youÑ€ team can be more productive and have less conflicts.
Common modules &amp; utilities.

Doing APIs with Django Rest Framework

Splitting APIs in 2 groups - "giving data" and "taking data"
Using a lot of generics for "give data"
When do to selectors?
Using no generics for "take data" (APIView + Services)
Handling errors from services
Inlining serializers &amp; avoiding serializers reuse
A neat inline_serializer util
Introducing general error formatting for your API

Testing all of that - what should be &amp; not be tested?




License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2018.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:04,100 --> 00:00:08,280
thank you and hello everyone good to see

00:00:07,200 --> 00:00:12,420
you here

00:00:08,280 --> 00:00:14,280
I'm Ratliff George if it's really hard

00:00:12,420 --> 00:00:15,719
to pronounce Eastern European name so

00:00:14,280 --> 00:00:20,220
just call me righto

00:00:15,719 --> 00:00:22,470
it will do I'm the CEO CEO of a software

00:00:20,220 --> 00:00:24,840
development company where we mainly do

00:00:22,470 --> 00:00:27,510
django and react this is like our bread

00:00:24,840 --> 00:00:32,250
and butter so if you want to find more

00:00:27,510 --> 00:00:32,759
about me and those beautiful people over

00:00:32,250 --> 00:00:34,950
there

00:00:32,759 --> 00:00:37,350
this is hex of team we went to Django

00:00:34,950 --> 00:00:39,989
Cone in Heidelberg this year and if you

00:00:37,350 --> 00:00:42,090
happen randomly to pass by us while

00:00:39,989 --> 00:00:43,890
we're taking this picture you're going

00:00:42,090 --> 00:00:53,850
to say those people are from Eastern

00:00:43,890 --> 00:00:59,760
Europe definitely yeah and let's talk

00:00:53,850 --> 00:01:03,420
about scaling images yeah so the red

00:00:59,760 --> 00:01:06,650
arrow pointing at Instanbul this will

00:01:03,420 --> 00:01:10,860
create some historic turmoil but

00:01:06,650 --> 00:01:13,950
Bulgaria is right next to this red arrow

00:01:10,860 --> 00:01:16,170
and we're somewhere over there in the

00:01:13,950 --> 00:01:19,979
United Kingdom so it's far away but in

00:01:16,170 --> 00:01:22,229
case you don't know where Bulgaria and

00:01:19,979 --> 00:01:25,200
we the final thing that we do is we do a

00:01:22,229 --> 00:01:27,030
lot of free courses for students mostly

00:01:25,200 --> 00:01:29,520
in Python and Django where we prepare

00:01:27,030 --> 00:01:32,970
people for their first job we have like

00:01:29,520 --> 00:01:37,820
a highly successful rate of placing

00:01:32,970 --> 00:01:40,320
people in companies and it's pretty good

00:01:37,820 --> 00:01:41,970
so but we're here for something

00:01:40,320 --> 00:01:44,670
different we want to talk about Django

00:01:41,970 --> 00:01:50,189
so let's see by raise of hands who here

00:01:44,670 --> 00:01:52,610
is working with Django daily all right

00:01:50,189 --> 00:01:57,000
and now the people who are working

00:01:52,610 --> 00:01:58,770
weekly but just weekly not they they

00:01:57,000 --> 00:02:00,420
have to touch Django from time to time

00:01:58,770 --> 00:02:03,270
alright so pretty pretty pretty good

00:02:00,420 --> 00:02:05,939
audience I hope this is going to be

00:02:03,270 --> 00:02:08,310
interesting and actually valuable and

00:02:05,939 --> 00:02:13,540
resourceful for you so what do we want

00:02:08,310 --> 00:02:17,140
to achieve first thing we want to enable

00:02:13,540 --> 00:02:19,450
productive jungle teams as mentioned in

00:02:17,140 --> 00:02:22,569
the keynote this morning it's really

00:02:19,450 --> 00:02:26,709
hard when you have like a big software

00:02:22,569 --> 00:02:28,659
and it's not using popular framework and

00:02:26,709 --> 00:02:30,370
it's really hard to sit up in bootstrap

00:02:28,659 --> 00:02:32,470
it's really hard to get people to

00:02:30,370 --> 00:02:35,170
contribute because there's a high

00:02:32,470 --> 00:02:37,120
barrier to actually running any piece of

00:02:35,170 --> 00:02:38,709
code so this is one of the things that

00:02:37,120 --> 00:02:40,540
we want to do when we're developing

00:02:38,709 --> 00:02:42,129
django applications and we're developing

00:02:40,540 --> 00:02:45,010
django applications that are going to be

00:02:42,129 --> 00:02:47,140
used for like next five to ten years and

00:02:45,010 --> 00:02:49,680
we need to support it and we need to add

00:02:47,140 --> 00:02:55,420
features through more features fix bugs

00:02:49,680 --> 00:02:57,849
write bugs and so on which is the same

00:02:55,420 --> 00:03:00,549
thing we want to have a stable software

00:02:57,849 --> 00:03:03,819
and we don't want to introduce random

00:03:00,549 --> 00:03:06,849
bugs which we are going to see in the

00:03:03,819 --> 00:03:09,670
presentation and also avoid any kind of

00:03:06,849 --> 00:03:12,519
needless abstraction avoid this thing

00:03:09,670 --> 00:03:15,280
where someone writes a a really nice

00:03:12,519 --> 00:03:17,980
piece of abstraction and only he or she

00:03:15,280 --> 00:03:19,840
understands it and then everyone else

00:03:17,980 --> 00:03:22,870
who has to touch this code is like oh

00:03:19,840 --> 00:03:25,870
just a skimmer better make him or her

00:03:22,870 --> 00:03:27,940
write this piece of code because we have

00:03:25,870 --> 00:03:32,290
a needless abstraction so this we're

00:03:27,940 --> 00:03:34,269
going to try to eliminate this and the

00:03:32,290 --> 00:03:36,430
most important thing for me is to have a

00:03:34,269 --> 00:03:38,889
repeatable pattern and this applies not

00:03:36,430 --> 00:03:41,049
only to jungle but applies generally to

00:03:38,889 --> 00:03:43,389
software development the best thing we

00:03:41,049 --> 00:03:46,239
can do is to have a repeatable pattern

00:03:43,389 --> 00:03:48,790
of adding new features or fixing

00:03:46,239 --> 00:03:51,190
existing features or removing existing

00:03:48,790 --> 00:03:52,690
features we don't want to invent the

00:03:51,190 --> 00:03:56,079
wheel every time you have to do

00:03:52,690 --> 00:04:01,329
something new and this is what we're

00:03:56,079 --> 00:04:02,859
trying to achieve today alright so the

00:04:01,329 --> 00:04:05,409
main question because I'll need an

00:04:02,859 --> 00:04:07,900
entire day of Django can't you talk

00:04:05,409 --> 00:04:09,310
about the entire topic because Django is

00:04:07,900 --> 00:04:10,989
a big framework so the question that

00:04:09,310 --> 00:04:14,260
we're going to focus on today is where

00:04:10,989 --> 00:04:16,150
to put business logic in Django and the

00:04:14,260 --> 00:04:18,630
first thing that's we need to ask

00:04:16,150 --> 00:04:22,599
ourselves is how do we define this

00:04:18,630 --> 00:04:24,639
mythical beast called business logic any

00:04:22,599 --> 00:04:26,560
suggestions how do you define business

00:04:24,639 --> 00:04:33,550
logic in less than five

00:04:26,560 --> 00:04:35,740
sentences yeah I'll try so for me this

00:04:33,550 --> 00:04:37,240
is everything that's specific to the

00:04:35,740 --> 00:04:39,280
domain of the software that we were

00:04:37,240 --> 00:04:41,350
writing if you're writing a software

00:04:39,280 --> 00:04:43,750
that deals with hotel management and

00:04:41,350 --> 00:04:46,060
booking everything related to how we

00:04:43,750 --> 00:04:50,320
book and manage a hotel which is a

00:04:46,060 --> 00:04:52,360
business logic or more generally

00:04:50,320 --> 00:04:55,120
speaking the constraints and the

00:04:52,360 --> 00:04:57,669
relationships in our code every time you

00:04:55,120 --> 00:04:59,710
see an if and this if is not in an

00:04:57,669 --> 00:05:03,880
utility method that check some strings

00:04:59,710 --> 00:05:05,740
it this if probably is a business rule

00:05:03,880 --> 00:05:08,470
that needs to be applied in the software

00:05:05,740 --> 00:05:11,710
so almost everything that's not

00:05:08,470 --> 00:05:13,960
framework or utility is business logic

00:05:11,710 --> 00:05:19,780
it's the thing that we are writing the

00:05:13,960 --> 00:05:23,979
software about all right so let's talk

00:05:19,780 --> 00:05:27,280
about boxes I really love this house the

00:05:23,979 --> 00:05:30,850
example framework or frameworks in

00:05:27,280 --> 00:05:33,130
general they give us boxes and those

00:05:30,850 --> 00:05:36,820
boxes are places where we can put our

00:05:33,130 --> 00:05:39,789
code in we have boxes and in Django

00:05:36,820 --> 00:05:42,220
we have several boxes where we can put

00:05:39,789 --> 00:05:44,440
and structure our application and

00:05:42,220 --> 00:05:46,990
actually put our business logic because

00:05:44,440 --> 00:05:49,300
our business logic is like 80% of the

00:05:46,990 --> 00:05:50,200
entire code base the rest is views

00:05:49,300 --> 00:05:53,169
models and so on

00:05:50,200 --> 00:05:56,320
and the very first box that people

00:05:53,169 --> 00:05:59,889
actually hit when writing Django is the

00:05:56,320 --> 00:06:02,860
models and I think models are like the

00:05:59,889 --> 00:06:06,970
big and integral integral part of Django

00:06:02,860 --> 00:06:11,320
and we kind of use Django because it has

00:06:06,970 --> 00:06:15,090
really nice aura so models they defined

00:06:11,320 --> 00:06:18,100
the so called data model we have like

00:06:15,090 --> 00:06:20,560
entity relationship diagram people love

00:06:18,100 --> 00:06:23,889
creating those diagrams I don't know how

00:06:20,560 --> 00:06:25,840
and we have to turn this ER diagram into

00:06:23,889 --> 00:06:29,590
models with the proper relationships

00:06:25,840 --> 00:06:31,690
with the proper constraints as I said

00:06:29,590 --> 00:06:35,169
they're a very important part of Django

00:06:31,690 --> 00:06:37,240
and they defined the relations that

00:06:35,169 --> 00:06:39,300
later we're going to assume so called

00:06:37,240 --> 00:06:41,490
business logic

00:06:39,300 --> 00:06:44,819
and models can have properties and

00:06:41,490 --> 00:06:47,909
static or class methods and we usually

00:06:44,819 --> 00:06:50,669
start putting some small part of our

00:06:47,909 --> 00:06:54,930
business logic in those model properties

00:06:50,669 --> 00:06:57,530
or in those model methods either class

00:06:54,930 --> 00:07:01,099
metastatic method or instance method and

00:06:57,530 --> 00:07:03,720
the think we're where people start

00:07:01,099 --> 00:07:06,240
tripping over and things start to get

00:07:03,720 --> 00:07:09,000
like bad is when they start put putting

00:07:06,240 --> 00:07:12,270
business logic in the safe method so

00:07:09,000 --> 00:07:15,060
this is a lot of tutorials do this it's

00:07:12,270 --> 00:07:17,789
like you refine safe method and you

00:07:15,060 --> 00:07:21,509
start adding code there you start adding

00:07:17,789 --> 00:07:24,509
tasks that send email and you run a test

00:07:21,509 --> 00:07:28,199
suit where you bootstrap a lot of users

00:07:24,509 --> 00:07:30,060
and you have production settings on your

00:07:28,199 --> 00:07:32,250
local machine and while running your

00:07:30,060 --> 00:07:34,590
tests you you send emails to randomly

00:07:32,250 --> 00:07:38,610
generates the mouse which is predict fun

00:07:34,590 --> 00:07:41,430
experience so Moto's let's see an

00:07:38,610 --> 00:07:43,620
example let's let's have a course model

00:07:41,430 --> 00:07:46,259
that defines a start and end date so

00:07:43,620 --> 00:07:50,039
business logic can be this thing here

00:07:46,259 --> 00:07:52,139
has started or has finished it depends

00:07:50,039 --> 00:07:53,759
on the now we have some get now that

00:07:52,139 --> 00:07:56,669
returns the proper date in the proper

00:07:53,759 --> 00:07:59,699
time zone and we say true or false the

00:07:56,669 --> 00:08:02,159
course started or cultures have has

00:07:59,699 --> 00:08:04,710
finished and we return this in some API

00:08:02,159 --> 00:08:07,289
and the UI updates accordingly to this

00:08:04,710 --> 00:08:09,779
so this is an example of business logic

00:08:07,289 --> 00:08:12,080
is pretty straightforward and is the

00:08:09,779 --> 00:08:15,419
right place to add it

00:08:12,080 --> 00:08:19,219
another thing that models allow us to do

00:08:15,419 --> 00:08:21,479
is to define custom validation because

00:08:19,219 --> 00:08:24,090
sometimes the validation needs to be

00:08:21,479 --> 00:08:26,669
expressed as a Python code and not just

00:08:24,090 --> 00:08:29,400
as a database constraint and this custom

00:08:26,669 --> 00:08:32,190
validation is usually written in the

00:08:29,400 --> 00:08:34,829
clean method and the thing that we

00:08:32,190 --> 00:08:37,380
usually do is redefine safe call foo

00:08:34,829 --> 00:08:40,440
clean not to forget to call it in the

00:08:37,380 --> 00:08:43,140
other place and rice validation errors

00:08:40,440 --> 00:08:45,029
if something's wrong and this is also a

00:08:43,140 --> 00:08:47,089
good place to put your business logic

00:08:45,029 --> 00:08:49,709
it's like additional validations and

00:08:47,089 --> 00:08:52,350
models keep those two things together

00:08:49,709 --> 00:08:56,210
properties and additional validation

00:08:52,350 --> 00:08:58,770
and this is kind of ugly and it's

00:08:56,210 --> 00:09:01,560
according to me and this presentation

00:08:58,770 --> 00:09:03,390
not the right way to do it so don't try

00:09:01,560 --> 00:09:06,710
to read the code I've just pasted some

00:09:03,390 --> 00:09:09,420
call from a system that we use for our

00:09:06,710 --> 00:09:12,660
our learning management system that we

00:09:09,420 --> 00:09:14,730
use for the courses when you create the

00:09:12,660 --> 00:09:16,530
course you need to generate weeks for

00:09:14,730 --> 00:09:19,470
the course because we organize content

00:09:16,530 --> 00:09:22,410
around weeks and this suddenly starts to

00:09:19,470 --> 00:09:25,230
feel heavy because I have a really core

00:09:22,410 --> 00:09:26,820
thing defined in my model safe it's

00:09:25,230 --> 00:09:32,850
going to work it's not going to scale

00:09:26,820 --> 00:09:34,830
and the thing is if I put it here I have

00:09:32,850 --> 00:09:38,970
to put everything else related to this

00:09:34,830 --> 00:09:41,030
here tasks more logic whatever you

00:09:38,970 --> 00:09:45,240
imagine related to course creation and

00:09:41,030 --> 00:09:47,790
for me models should take care only of

00:09:45,240 --> 00:09:50,280
the data model have simple properties

00:09:47,790 --> 00:09:52,340
and find extra validation and this is

00:09:50,280 --> 00:09:54,540
where we draw the line we don't do like

00:09:52,340 --> 00:09:56,760
everything is going to be in the model

00:09:54,540 --> 00:09:58,980
we just don't do this because then we

00:09:56,760 --> 00:10:00,810
get a phat models which don't scale very

00:09:58,980 --> 00:10:04,800
well because you have to put everything

00:10:00,810 --> 00:10:07,110
there so business logic in models

00:10:04,800 --> 00:10:09,740
through simple rules that we have is

00:10:07,110 --> 00:10:13,740
like it's ok to do it in properties and

00:10:09,740 --> 00:10:15,750
we'll see later when it's not ok it's ok

00:10:13,740 --> 00:10:18,510
to define additional validation and

00:10:15,750 --> 00:10:19,950
clean and it's totally not ok to start

00:10:18,510 --> 00:10:22,500
adding a bunch of code in your safe

00:10:19,950 --> 00:10:24,870
method because you want to keep some

00:10:22,500 --> 00:10:29,480
kind of separation of concerns models

00:10:24,870 --> 00:10:34,170
data model not business logic all right

00:10:29,480 --> 00:10:36,900
carry on the next integral part of

00:10:34,170 --> 00:10:38,850
jungle is views and api's I'm going to

00:10:36,900 --> 00:10:42,690
talk about api's using rest framework

00:10:38,850 --> 00:10:44,640
for us rest framework is Django you

00:10:42,690 --> 00:10:46,350
install it as a separate library but

00:10:44,640 --> 00:10:47,910
it's the go-to library that you're using

00:10:46,350 --> 00:10:50,190
when doing KPIs

00:10:47,910 --> 00:10:51,690
the same thing applies for views excel

00:10:50,190 --> 00:10:55,110
you don't have enough time to cover

00:10:51,690 --> 00:10:57,180
everything so the views and the api's

00:10:55,110 --> 00:10:59,280
they're like the HTTP interface to the

00:10:57,180 --> 00:11:01,970
rest of the world and they call things

00:10:59,280 --> 00:11:01,970
on the inside

00:11:02,500 --> 00:11:08,350
can help business logic which is usually

00:11:05,589 --> 00:11:10,330
shown in tutorials we'll take a look at

00:11:08,350 --> 00:11:12,100
your tutorials it's like if you don't do

00:11:10,330 --> 00:11:14,500
it in the models you're going to do it

00:11:12,100 --> 00:11:18,190
in the post method of your API or or

00:11:14,500 --> 00:11:24,279
your view of your view and as I said our

00:11:18,190 --> 00:11:26,380
focus on it guys so this is copy-pasted

00:11:24,279 --> 00:11:30,700
example from rest framework which again

00:11:26,380 --> 00:11:32,860
is a great framework and the thing

00:11:30,700 --> 00:11:38,140
that's being defined here is to api's

00:11:32,860 --> 00:11:41,290
that do a crud over some snippet model

00:11:38,140 --> 00:11:43,209
and even more if you screw off your

00:11:41,290 --> 00:11:45,700
scrolls down in the tutorial you're

00:11:43,209 --> 00:11:49,180
going to end up with this example this

00:11:45,700 --> 00:11:52,649
is a model view set that needs two

00:11:49,180 --> 00:11:56,500
things to work a query set and a

00:11:52,649 --> 00:12:02,010
serializer you can then use a router and

00:11:56,500 --> 00:12:05,079
you have a croute api over a model in

00:12:02,010 --> 00:12:07,440
around five lines of code which is

00:12:05,079 --> 00:12:11,920
pretty neat it looks really good but

00:12:07,440 --> 00:12:16,899
then what's happening

00:12:11,920 --> 00:12:19,660
do you know three lines of code where in

00:12:16,899 --> 00:12:21,910
the three lines of code is your model

00:12:19,660 --> 00:12:23,160
being created for example if used to

00:12:21,910 --> 00:12:25,959
create API

00:12:23,160 --> 00:12:30,579
who knows who can shout out raise hand

00:12:25,959 --> 00:12:33,880
we're in the serialize ER so what

00:12:30,579 --> 00:12:35,200
happens you hit this API the create

00:12:33,880 --> 00:12:39,220
model mixing from the rest framework

00:12:35,200 --> 00:12:41,980
create method is called the serializer

00:12:39,220 --> 00:12:45,279
is instantiated and validation is run

00:12:41,980 --> 00:12:48,370
and then the snippet civilizer method

00:12:45,279 --> 00:12:51,220
create is code so we have three lines

00:12:48,370 --> 00:12:53,399
which look need for an api but then the

00:12:51,220 --> 00:12:56,980
heavyweight needs to be done by the

00:12:53,399 --> 00:12:59,500
serializer and it's a third-party

00:12:56,980 --> 00:13:02,380
library thing which is really nice but

00:12:59,500 --> 00:13:04,060
it has to create our objects so if you

00:13:02,380 --> 00:13:06,790
want to put additional business logic

00:13:04,060 --> 00:13:10,149
around creating some something which is

00:13:06,790 --> 00:13:11,680
like almost all the cases this is really

00:13:10,149 --> 00:13:14,529
good for hooking people up

00:13:11,680 --> 00:13:15,470
look three lines of code crud we're

00:13:14,529 --> 00:13:19,040
awesome

00:13:15,470 --> 00:13:21,410
work but then reality comes in you have

00:13:19,040 --> 00:13:23,660
to do five additional things when you're

00:13:21,410 --> 00:13:25,430
creating a snippet and then you go to

00:13:23,660 --> 00:13:27,410
the serializer and you'd really find

00:13:25,430 --> 00:13:31,040
create method and you start dumping cold

00:13:27,410 --> 00:13:33,560
there so let's talk about serializers

00:13:31,040 --> 00:13:38,810
they're like really really great and I

00:13:33,560 --> 00:13:41,030
wish some somehow Forks the amount of

00:13:38,810 --> 00:13:43,700
rest framework is a separate library

00:13:41,030 --> 00:13:46,460
because the plains rÃ©aliser is really

00:13:43,700 --> 00:13:50,120
nice model serializers generated plane

00:13:46,460 --> 00:13:52,670
you can use them for a lot of things so

00:13:50,120 --> 00:13:56,420
they're great to transform Python and RM

00:13:52,670 --> 00:14:00,530
objects to json or whatever you want XML

00:13:56,420 --> 00:14:01,820
and so on Jason is the usual thing they

00:14:00,530 --> 00:14:04,040
are great to do the other thing

00:14:01,820 --> 00:14:09,500
transform Jason coming to an API and

00:14:04,040 --> 00:14:13,310
make it Python data or even or M object

00:14:09,500 --> 00:14:16,190
a to make the query for you and this is

00:14:13,310 --> 00:14:18,440
where we draw the line two things that

00:14:16,190 --> 00:14:22,280
Surdas already good at and should be

00:14:18,440 --> 00:14:25,610
used it's okay the last thing that

00:14:22,280 --> 00:14:28,490
people often do is to use your lasers to

00:14:25,610 --> 00:14:30,710
create objects it's like you define

00:14:28,490 --> 00:14:33,260
create and you have like five hundred

00:14:30,710 --> 00:14:35,540
lines of a create in a serializer and

00:14:33,260 --> 00:14:39,470
it's again a separation of concerns

00:14:35,540 --> 00:14:41,750
thing serializers the first two things

00:14:39,470 --> 00:14:43,700
not the third thing it's not a

00:14:41,750 --> 00:14:46,010
serializers job to create your objects

00:14:43,700 --> 00:14:48,530
it's your job to create your edges it's

00:14:46,010 --> 00:14:50,870
it's not the API is job to create your

00:14:48,530 --> 00:14:53,120
objects deep in some abstraction because

00:14:50,870 --> 00:14:53,980
we have three lines of code it's again

00:14:53,120 --> 00:14:56,930
your job

00:14:53,980 --> 00:15:00,200
all right so here's an alternative then

00:14:56,930 --> 00:15:01,580
you say rod oh okay I won't do it in the

00:15:00,200 --> 00:15:03,890
safe method I won't do it in the

00:15:01,580 --> 00:15:07,190
serializer but I will definitely do it

00:15:03,890 --> 00:15:09,470
in the post of the API which is also

00:15:07,190 --> 00:15:13,910
shown in a lot of tutorials again though

00:15:09,470 --> 00:15:15,470
just to dump a code dump which not even

00:15:13,910 --> 00:15:20,050
sure if it's correct we need to refactor

00:15:15,470 --> 00:15:24,830
this but this is what people also do and

00:15:20,050 --> 00:15:27,110
this may be okay if you think hard about

00:15:24,830 --> 00:15:27,790
it there are not a lot of bad reasons to

00:15:27,110 --> 00:15:32,080
do it

00:15:27,790 --> 00:15:36,730
and then again business logic and api's

00:15:32,080 --> 00:15:41,950
is great until you need to do the same

00:15:36,730 --> 00:15:44,980
business logic you know you know in a

00:15:41,950 --> 00:15:47,830
view you have you have API for react and

00:15:44,980 --> 00:15:51,160
you have some old django view with HTML

00:15:47,830 --> 00:15:55,120
you have to do the same thing or you

00:15:51,160 --> 00:15:57,040
have to do it in a task you have celery

00:15:55,120 --> 00:16:00,640
and you have to do the same thing in a

00:15:57,040 --> 00:16:02,920
task or you have to do the same thing in

00:16:00,640 --> 00:16:05,500
a command or you have to do the same

00:16:02,920 --> 00:16:08,010
thing somewhere internally in your

00:16:05,500 --> 00:16:11,020
system because you have a chain of

00:16:08,010 --> 00:16:14,460
automation where snippets or courses are

00:16:11,020 --> 00:16:19,510
being created as part of other flows and

00:16:14,460 --> 00:16:23,830
then we have five places where we can do

00:16:19,510 --> 00:16:28,710
the same thing and the the bad approach

00:16:23,830 --> 00:16:32,200
here is to start instantiating the API

00:16:28,710 --> 00:16:34,330
to use the post methods in order to have

00:16:32,200 --> 00:16:37,990
the same business logic it's like red

00:16:34,330 --> 00:16:40,990
flags everywhere so if you have on the

00:16:37,990 --> 00:16:42,700
API it perhaps is ok if you have

00:16:40,990 --> 00:16:44,860
something very simple perhaps it's ok to

00:16:42,700 --> 00:16:46,570
use the model view sets of the rest

00:16:44,860 --> 00:16:49,000
framework but we're talking about

00:16:46,570 --> 00:16:50,650
projects that evolve and scale with time

00:16:49,000 --> 00:16:54,760
and we need to be flexible and we do

00:16:50,650 --> 00:16:58,000
have teams working on them so this is

00:16:54,760 --> 00:16:59,860
not the box we are looking for not none

00:16:58,000 --> 00:17:01,690
of the things that are shown so far it's

00:16:59,860 --> 00:17:06,600
not the box that we need for business

00:17:01,690 --> 00:17:10,810
logic and often time we need more boxes

00:17:06,600 --> 00:17:13,240
how to say it's wrong to assume that all

00:17:10,810 --> 00:17:15,100
the things that Django is giving us are

00:17:13,240 --> 00:17:18,160
all the things that we have to use and

00:17:15,100 --> 00:17:20,380
we try to put and we try to put things

00:17:18,160 --> 00:17:24,970
two boxes where they don't belong and

00:17:20,380 --> 00:17:27,820
when we do this often and times go and

00:17:24,970 --> 00:17:29,470
time goes by then we end up with a bad

00:17:27,820 --> 00:17:30,720
design and then we end up with random

00:17:29,470 --> 00:17:33,790
bugs and then we end up with

00:17:30,720 --> 00:17:35,950
unmaintainable codebase because you have

00:17:33,790 --> 00:17:39,190
a sillier Iser somewhere in your code

00:17:35,950 --> 00:17:40,730
base and you just add a simple property

00:17:39,190 --> 00:17:43,340
because your API

00:17:40,730 --> 00:17:46,340
needs it and you break five other api's

00:17:43,340 --> 00:17:47,960
because five polar api's are using the

00:17:46,340 --> 00:17:50,570
same serialize ER and you don't know

00:17:47,960 --> 00:17:53,360
that and such things can be really

00:17:50,570 --> 00:17:57,290
really bad developer experience so we

00:17:53,360 --> 00:18:00,530
need a new box and this box is like it's

00:17:57,290 --> 00:18:04,490
pretty simple a personal note on

00:18:00,530 --> 00:18:07,520
abstraction I don't feel really good

00:18:04,490 --> 00:18:10,580
when I have three lines of code and then

00:18:07,520 --> 00:18:13,070
100 lines of abstraction under needed

00:18:10,580 --> 00:18:16,280
that creates my object in the database

00:18:13,070 --> 00:18:18,020
and then I'm not sure what I have to

00:18:16,280 --> 00:18:20,690
redefine I have to read the rest

00:18:18,020 --> 00:18:23,840
framework code which is nice done it

00:18:20,690 --> 00:18:25,840
many times but I don't feel good when

00:18:23,840 --> 00:18:29,210
there's a lot of layers of abstraction

00:18:25,840 --> 00:18:31,850
between me and the Orang which actually

00:18:29,210 --> 00:18:33,830
saves the object to the database that's

00:18:31,850 --> 00:18:37,010
why I don't like the model view sets or

00:18:33,830 --> 00:18:39,770
the generic API or views at all their

00:18:37,010 --> 00:18:43,010
dish should not be used unless you have

00:18:39,770 --> 00:18:46,910
a really simple project and on the other

00:18:43,010 --> 00:18:48,260
hand sometimes when reading things from

00:18:46,910 --> 00:18:51,230
the database you have additional

00:18:48,260 --> 00:18:53,179
business logic you have to do filtering

00:18:51,230 --> 00:18:56,750
based on other objects in the database

00:18:53,179 --> 00:18:59,480
or filtering based on your internal

00:18:56,750 --> 00:19:02,299
business logic it's not like of just a

00:18:59,480 --> 00:19:06,980
list API view which dumps all objects

00:19:02,299 --> 00:19:09,860
define pagination and we're done it also

00:19:06,980 --> 00:19:13,100
happens we can get away with abstraction

00:19:09,860 --> 00:19:15,440
here but when the thing comes that we

00:19:13,100 --> 00:19:20,150
need more flexibility and control we

00:19:15,440 --> 00:19:22,610
have to again redo everything so those

00:19:20,150 --> 00:19:25,520
are the existing boxes that Django is

00:19:22,610 --> 00:19:31,280
giving us models view stand play its

00:19:25,520 --> 00:19:34,700
tasks with salary for example and none

00:19:31,280 --> 00:19:37,640
of those boxes are suitable for heavy

00:19:34,700 --> 00:19:40,520
business logic I don't have time to show

00:19:37,640 --> 00:19:42,140
you some nice template examples where

00:19:40,520 --> 00:19:44,240
you put a lot of business logic in

00:19:42,140 --> 00:19:47,390
templates and you do a lot of queries

00:19:44,240 --> 00:19:49,610
and you can't understand from where

00:19:47,390 --> 00:19:51,559
these queries are coming but templates

00:19:49,610 --> 00:19:54,349
are like the worst idea to add business

00:19:51,559 --> 00:19:57,179
logic just no time for this

00:19:54,349 --> 00:19:59,549
so the thing that we're doing at our

00:19:57,179 --> 00:20:01,409
company seems to be writing django every

00:19:59,549 --> 00:20:03,769
day and all of our clients or our

00:20:01,409 --> 00:20:06,359
projects versed in django we're

00:20:03,769 --> 00:20:09,059
developing a style guide which we are

00:20:06,359 --> 00:20:11,399
constantly debating and updating because

00:20:09,059 --> 00:20:13,950
we want to have a repeatable pattern of

00:20:11,399 --> 00:20:16,320
writing django apps that is nice easy to

00:20:13,950 --> 00:20:17,879
use it's not a burden it's not something

00:20:16,320 --> 00:20:21,059
that you have to learn as an abstraction

00:20:17,879 --> 00:20:24,409
and that's why I'm here actually to

00:20:21,059 --> 00:20:28,619
share where we put our business logic

00:20:24,409 --> 00:20:31,739
and the first new box that we introduced

00:20:28,619 --> 00:20:34,379
which is the fancy name service

00:20:31,739 --> 00:20:39,539
it's called services it's like services

00:20:34,379 --> 00:20:41,669
dot py module in your app each app has a

00:20:39,539 --> 00:20:44,609
services py you can split the module

00:20:41,669 --> 00:20:47,669
site however you want but this is the

00:20:44,609 --> 00:20:51,269
general unit that deals with the

00:20:47,669 --> 00:20:53,639
business logic meaning creating or M

00:20:51,269 --> 00:20:55,889
objects doing additional stuff with

00:20:53,639 --> 00:20:59,519
those oral objects calling color

00:20:55,889 --> 00:21:01,889
services and so on software we'll see an

00:20:59,519 --> 00:21:03,629
example in a second and the art thing

00:21:01,889 --> 00:21:06,509
that we're doing with the services is we

00:21:03,629 --> 00:21:08,969
have like a specification it's a keyword

00:21:06,509 --> 00:21:12,749
only function with type annotations

00:21:08,969 --> 00:21:14,609
which helps a lot for document

00:21:12,749 --> 00:21:18,239
documenting what you're actually doing

00:21:14,609 --> 00:21:20,429
with this with this function speaks the

00:21:18,239 --> 00:21:22,409
domain language can call other services

00:21:20,429 --> 00:21:25,200
can call other tasks it's like all the

00:21:22,409 --> 00:21:27,570
heavy lifting is isolated in a core part

00:21:25,200 --> 00:21:30,419
called services and selectors will see

00:21:27,570 --> 00:21:33,659
them in a second and the rest of the

00:21:30,419 --> 00:21:36,089
Django is either communicating with the

00:21:33,659 --> 00:21:39,989
service like api's or being communicated

00:21:36,089 --> 00:21:41,909
from the service like Oren yeah as I

00:21:39,989 --> 00:21:45,719
said can handle everything that needs to

00:21:41,909 --> 00:21:47,549
be done and works mostly and mainly with

00:21:45,719 --> 00:21:50,820
models because Django without your M

00:21:47,549 --> 00:21:53,070
it's like no use to use Django at all so

00:21:50,820 --> 00:21:56,179
here's the good stuff here's the example

00:21:53,070 --> 00:22:02,219
pretty simple service code create user

00:21:56,179 --> 00:22:04,889
as you can see we're doing the we're

00:22:02,219 --> 00:22:06,809
doing the keyword only thing which means

00:22:04,889 --> 00:22:07,380
you can't call a service with ten

00:22:06,809 --> 00:22:10,920
position

00:22:07,380 --> 00:22:14,400
arguments and wonder which is which or

00:22:10,920 --> 00:22:17,610
what is what you have to pass the key

00:22:14,400 --> 00:22:19,620
words by name explicitly this is the

00:22:17,610 --> 00:22:23,400
first thing the second thing is we have

00:22:19,620 --> 00:22:26,910
type annotations what are the arguments

00:22:23,400 --> 00:22:31,200
what is the return type and even if we

00:22:26,910 --> 00:22:33,390
don't use my PI yet it's it still needs

00:22:31,200 --> 00:22:36,450
something for Django support it's really

00:22:33,390 --> 00:22:38,160
nice because it lets you understand what

00:22:36,450 --> 00:22:40,590
the service is doing it lets you jump

00:22:38,160 --> 00:22:42,120
around the project I see that this is

00:22:40,590 --> 00:22:44,460
returning to user model and I want to

00:22:42,120 --> 00:22:48,300
see what the user model is I hit some

00:22:44,460 --> 00:22:51,720
combination in my editor or IDE and I

00:22:48,300 --> 00:22:54,300
jump there and I see and I return it's

00:22:51,720 --> 00:22:57,330
really really nice and what's happening

00:22:54,300 --> 00:23:00,090
in site is I create a model and I call

00:22:57,330 --> 00:23:02,970
to our services the first one creates a

00:23:00,090 --> 00:23:05,820
profile the second one calls the task

00:23:02,970 --> 00:23:07,920
again we don't have time to talk about

00:23:05,820 --> 00:23:09,180
services and salary tasks because there

00:23:07,920 --> 00:23:12,020
is a lot of interesting stuff there but

00:23:09,180 --> 00:23:16,020
the thing that we do is we wrap over

00:23:12,020 --> 00:23:18,780
tasks in a service because if this way

00:23:16,020 --> 00:23:22,650
is isolated nicely we can mock we can

00:23:18,780 --> 00:23:25,950
test so on so forth all right this is it

00:23:22,650 --> 00:23:28,170
this is a pretty simple service here is

00:23:25,950 --> 00:23:29,760
a little bit more complicated service

00:23:28,170 --> 00:23:31,800
when creating a course I need to

00:23:29,760 --> 00:23:34,860
generate weeks so this is the right

00:23:31,800 --> 00:23:36,600
place to do it a bunch of code can be

00:23:34,860 --> 00:23:40,920
tested we'll talk about testing in a

00:23:36,600 --> 00:23:44,160
minute and the roof dump is that every

00:23:40,920 --> 00:23:47,730
non-trivial operation that touches the

00:23:44,160 --> 00:23:52,130
database should be done in service it's

00:23:47,730 --> 00:23:58,200
like you should have no Aram code in

00:23:52,130 --> 00:24:00,470
your API in your model properties talk

00:23:58,200 --> 00:24:03,540
about this in a second or anywhere else

00:24:00,470 --> 00:24:06,480
except your services and selectors this

00:24:03,540 --> 00:24:09,090
is the core that defines how your

00:24:06,480 --> 00:24:12,860
software is behaving and on top of that

00:24:09,090 --> 00:24:15,690
core you have the shell which is Jango

00:24:12,860 --> 00:24:18,570
which communicates with the core exposes

00:24:15,690 --> 00:24:20,850
API to the rest of the world and this I

00:24:18,570 --> 00:24:24,050
should I'll probably add

00:24:20,850 --> 00:24:27,360
- Garrett Bernhardt's talk about

00:24:24,050 --> 00:24:30,000
boundaries it's really nice some he did

00:24:27,360 --> 00:24:32,190
it on railsconf way back in the time and

00:24:30,000 --> 00:24:34,830
this is actually the thing that we're

00:24:32,190 --> 00:24:40,050
doing is is inspired by this but by the

00:24:34,830 --> 00:24:43,860
stop alright and services take care of

00:24:40,050 --> 00:24:44,490
writing to the database selectors yeah

00:24:43,860 --> 00:24:46,110
our way around

00:24:44,490 --> 00:24:48,720
take care for things that needs to be

00:24:46,110 --> 00:24:52,710
fetched from the database again

00:24:48,720 --> 00:24:55,770
selectors of UI we have me let me get

00:24:52,710 --> 00:24:57,630
all the bullets they take care of the

00:24:55,770 --> 00:24:59,730
business logic when fetching which to do

00:24:57,630 --> 00:25:03,210
some kind of filtering they can call

00:24:59,730 --> 00:25:06,030
arbitrary services selectors or tasks

00:25:03,210 --> 00:25:08,310
whatever needs to be done and can handle

00:25:06,030 --> 00:25:10,770
permissions filters and so on so

00:25:08,310 --> 00:25:13,800
permissioning filtering should be also

00:25:10,770 --> 00:25:17,910
happening inside the core and not on the

00:25:13,800 --> 00:25:21,300
shell not from the API of course there

00:25:17,910 --> 00:25:23,760
are some exceptions again which we don't

00:25:21,300 --> 00:25:27,630
have time for this and here is a simple

00:25:23,760 --> 00:25:30,960
selector from a project that needed this

00:25:27,630 --> 00:25:32,910
simple selector you you want to list all

00:25:30,960 --> 00:25:35,220
users for a specific user for

00:25:32,910 --> 00:25:37,770
specifically logged in user which is

00:25:35,220 --> 00:25:40,350
called fetch by but there are

00:25:37,770 --> 00:25:43,140
restrictions from the business from the

00:25:40,350 --> 00:25:48,810
domain about what you can actually see

00:25:43,140 --> 00:25:52,410
and the the this code was firstly

00:25:48,810 --> 00:25:54,690
written in a get of an API and was not

00:25:52,410 --> 00:25:57,420
really scalable because after this all

00:25:54,690 --> 00:25:59,240
other interactions for fetching from the

00:25:57,420 --> 00:26:02,730
database needed some kind of

00:25:59,240 --> 00:26:07,260
permissioning and filtering so selector

00:26:02,730 --> 00:26:10,500
you say give me the visible users yeah

00:26:07,260 --> 00:26:12,090
ID so i can filter by them so you don't

00:26:10,500 --> 00:26:14,040
accidentally see something that you

00:26:12,090 --> 00:26:16,830
don't have the permission to see and as

00:26:14,040 --> 00:26:18,480
you can see having a plain Python code

00:26:16,830 --> 00:26:23,970
just using the jungle ramp is much

00:26:18,480 --> 00:26:29,340
better than having an API and then this

00:26:23,970 --> 00:26:32,100
is like the asterisk star on the model

00:26:29,340 --> 00:26:34,470
properties for using business logic if

00:26:32,100 --> 00:26:39,419
your model property is a simple

00:26:34,470 --> 00:26:41,399
on several of your fields it's good if

00:26:39,419 --> 00:26:45,210
your model property starts making

00:26:41,399 --> 00:26:50,450
queries outside of its relations or even

00:26:45,210 --> 00:26:52,710
with its relations and let's say

00:26:50,450 --> 00:26:57,480
something like this this is a model

00:26:52,710 --> 00:26:59,629
property it better be a selector because

00:26:57,480 --> 00:27:02,850
right now we have business logic we have

00:26:59,629 --> 00:27:06,450
not present students is making queries

00:27:02,850 --> 00:27:09,059
and the general rule of thumb the

00:27:06,450 --> 00:27:11,309
general rule of thumb here is if you

00:27:09,059 --> 00:27:14,490
have a bottle property and you just add

00:27:11,309 --> 00:27:20,909
it in a list API and you get n plus 1

00:27:14,490 --> 00:27:23,820
problem it should be a selector ok this

00:27:20,909 --> 00:27:26,610
is a bit too deep in Django but if you

00:27:23,820 --> 00:27:28,519
had a property let's make it and okay

00:27:26,610 --> 00:27:31,259
then you're going to say select related

00:27:28,519 --> 00:27:33,840
ok this can solve the problem but if you

00:27:31,259 --> 00:27:37,139
add a property which cannot be solved

00:27:33,840 --> 00:27:38,820
with just select related to B to solve

00:27:37,139 --> 00:27:42,960
the n plus 1 curves problem then it

00:27:38,820 --> 00:27:46,350
should move to a selector so on our roof

00:27:42,960 --> 00:27:50,220
dump and then you're going to ask righto

00:27:46,350 --> 00:27:52,080
but what about the API is we started

00:27:50,220 --> 00:27:55,799
with a three-line API what have you said

00:27:52,080 --> 00:27:58,919
and now I bet you imagine so some huge

00:27:55,799 --> 00:28:00,720
APIs or arrow how are our guys are going

00:27:58,919 --> 00:28:02,820
to look and the could think about the

00:28:00,720 --> 00:28:06,600
our API is that they're going to look

00:28:02,820 --> 00:28:10,049
absolutely the same they're going to be

00:28:06,600 --> 00:28:13,049
five to seven lines long and we're going

00:28:10,049 --> 00:28:14,820
to use zero abstraction over them which

00:28:13,049 --> 00:28:17,700
is actually the same thing that we

00:28:14,820 --> 00:28:20,429
achieve with Model View sets but without

00:28:17,700 --> 00:28:23,370
the abstraction so there's no hidden

00:28:20,429 --> 00:28:25,830
coupe or complex and the thing that we

00:28:23,370 --> 00:28:27,809
achieve with the api's is this

00:28:25,830 --> 00:28:30,210
repeatable pattern because if you open

00:28:27,809 --> 00:28:32,820
or pick a random API in a project that

00:28:30,210 --> 00:28:34,590
follows strictly this it's going to do

00:28:32,820 --> 00:28:37,769
the same you're not going to be

00:28:34,590 --> 00:28:39,659
surprised or if you are surprised then

00:28:37,769 --> 00:28:41,220
there is a good exception to everything

00:28:39,659 --> 00:28:43,230
and there should be a good comment why

00:28:41,220 --> 00:28:46,049
this is a good exception from everything

00:28:43,230 --> 00:28:48,120
and you suddenly see the boundaries

00:28:46,049 --> 00:28:49,320
between things and you suddenly start to

00:28:48,120 --> 00:28:51,750
navigate the codebase much better

00:28:49,320 --> 00:28:55,200
because you know what to expect this is

00:28:51,750 --> 00:29:00,510
how you use framework for all right so

00:28:55,200 --> 00:29:05,159
let's make a course groups API first we

00:29:00,510 --> 00:29:07,740
have the list API we'll talk about why

00:29:05,159 --> 00:29:10,890
we defines here serializers inside in a

00:29:07,740 --> 00:29:13,679
minute we have a get with the selector

00:29:10,890 --> 00:29:16,429
we use the serializer to transform the

00:29:13,679 --> 00:29:19,559
result to something that Jason

00:29:16,429 --> 00:29:24,200
serializable and we'll return three

00:29:19,559 --> 00:29:30,600
lines it's all nothing more nothing less

00:29:24,200 --> 00:29:34,500
detail happy alright we have yet but

00:29:30,600 --> 00:29:36,899
with course ID we use selector which

00:29:34,500 --> 00:29:39,929
will prolly fetch or the other thing

00:29:36,899 --> 00:29:42,179
that we can do here is to use an input

00:29:39,929 --> 00:29:44,159
serializer that's using primary key

00:29:42,179 --> 00:29:46,860
related field that's going to fetch this

00:29:44,159 --> 00:29:50,010
course ID for us they are like nuances

00:29:46,860 --> 00:29:53,490
and options here but we go a selector

00:29:50,010 --> 00:29:56,580
and we return and all list and get api's

00:29:53,490 --> 00:29:58,799
they look like this you can call

00:29:56,580 --> 00:30:00,899
generate them if you want this is

00:29:58,799 --> 00:30:03,390
nothing in this API that's actually

00:30:00,899 --> 00:30:08,429
hidden or complex it's a stupid thing

00:30:03,390 --> 00:30:10,950
that causes lender again create API we

00:30:08,429 --> 00:30:13,140
need to create objects in our system for

00:30:10,950 --> 00:30:16,260
list and detail we define output

00:30:13,140 --> 00:30:21,200
realizers for create and update we

00:30:16,260 --> 00:30:26,100
define input serializers and what we do

00:30:21,200 --> 00:30:28,890
get the serializer validated we probably

00:30:26,100 --> 00:30:32,730
need some additional mixed scenes to

00:30:28,890 --> 00:30:34,440
catch validation error and through now

00:30:32,730 --> 00:30:35,909
this won't result in a 500 this is

00:30:34,440 --> 00:30:36,270
actually okay because it comes from rest

00:30:35,909 --> 00:30:40,529
from work

00:30:36,270 --> 00:30:43,919
nevermind we call create course service

00:30:40,529 --> 00:30:46,169
which usually just duplicates the

00:30:43,919 --> 00:30:49,020
serializers as keyword argument so i can

00:30:46,169 --> 00:30:52,049
just expand it with two stars and then

00:30:49,020 --> 00:30:54,690
return whatever i want to create it so

00:30:52,049 --> 00:30:59,250
on ten minutes from any thank you and

00:30:54,690 --> 00:31:01,890
finally an update api which looks

00:30:59,250 --> 00:31:06,690
basically like create an detail

00:31:01,890 --> 00:31:09,929
we use update courses service and we use

00:31:06,690 --> 00:31:14,670
inputs your riser again this is for me

00:31:09,929 --> 00:31:16,110
it's also neat but it's neater than the

00:31:14,670 --> 00:31:18,150
the other thing because there's no

00:31:16,110 --> 00:31:20,010
hidden abstraction there's no additional

00:31:18,150 --> 00:31:24,150
knowledge of the framework that you need

00:31:20,010 --> 00:31:26,820
to have and let's talk about the

00:31:24,150 --> 00:31:31,110
elephant in the room which is not me is

00:31:26,820 --> 00:31:34,049
the serializers we nest

00:31:31,110 --> 00:31:37,410
our serializers inside the API and we do

00:31:34,049 --> 00:31:41,100
this because otherwise it's really easy

00:31:37,410 --> 00:31:45,330
to reuse utilizers I really can't say

00:31:41,100 --> 00:31:48,390
this word serializers alright and if you

00:31:45,330 --> 00:31:51,030
reuse your lasers then someone can add

00:31:48,390 --> 00:31:53,760
or remove something from a base utilizer

00:31:51,030 --> 00:31:57,870
that's inherited five times down the

00:31:53,760 --> 00:31:59,820
road and break who knows how many api's

00:31:57,870 --> 00:32:02,549
which if you don't have a good

00:31:59,820 --> 00:32:04,020
integration test coverage the users will

00:32:02,549 --> 00:32:06,059
catch it it's the user driven

00:32:04,020 --> 00:32:10,080
development where they do the final

00:32:06,059 --> 00:32:17,100
testing so we try to inline serializers

00:32:10,080 --> 00:32:19,410
and and try to not reuse them it's like

00:32:17,100 --> 00:32:21,780
you have you need a good reason to reuse

00:32:19,410 --> 00:32:24,630
and we still we still haven't figured

00:32:21,780 --> 00:32:27,120
out how to freeze a sewer laser that's

00:32:24,630 --> 00:32:28,799
being reused it's like you're reusing it

00:32:27,120 --> 00:32:31,350
but you cannot modify it anymore because

00:32:28,799 --> 00:32:33,059
you're going to break api's and this

00:32:31,350 --> 00:32:35,520
happened to way too many times and

00:32:33,059 --> 00:32:37,830
that's why we started doing it we have a

00:32:35,520 --> 00:32:40,200
rule of thumb which says four outputs

00:32:37,830 --> 00:32:42,299
realizers it's okay to use model

00:32:40,200 --> 00:32:44,700
sterilizer sometimes it saves lines of

00:32:42,299 --> 00:32:47,760
code but for input serializers it's

00:32:44,700 --> 00:32:51,720
strictly forbidden you don't use model

00:32:47,760 --> 00:32:53,880
serializer because this kind of says let

00:32:51,720 --> 00:32:56,520
the model serializer do the creating no

00:32:53,880 --> 00:32:58,770
it's a plain serializer and you define

00:32:56,520 --> 00:33:00,990
all the fields that you need no model

00:32:58,770 --> 00:33:02,910
serializers there and this saves a lot

00:33:00,990 --> 00:33:08,370
of problems a lot of headaches this

00:33:02,910 --> 00:33:13,320
simple roof dump and to avoid reusing

00:33:08,370 --> 00:33:15,270
sometimes you kind of want to have like

00:33:13,320 --> 00:33:17,970
in Ruby anonymous class

00:33:15,270 --> 00:33:21,120
in peyten in order just to create in

00:33:17,970 --> 00:33:23,210
place an anonymous class which extends

00:33:21,120 --> 00:33:25,559
us utilizer and I can define few fields

00:33:23,210 --> 00:33:27,929
suddenly we don't have the syntax but we

00:33:25,559 --> 00:33:30,630
have the tools to do it so we have this

00:33:27,929 --> 00:33:32,940
really neat YouTube utility method

00:33:30,630 --> 00:33:35,010
called inline serializer which takes all

00:33:32,940 --> 00:33:38,040
the keywords for a serializer and

00:33:35,010 --> 00:33:40,380
defines the fields as a dictionary and

00:33:38,040 --> 00:33:42,900
then there's no need to reuse a weak

00:33:40,380 --> 00:33:43,860
sealer serializer defined elsewhere you

00:33:42,900 --> 00:33:49,020
can just do it here

00:33:43,860 --> 00:33:50,820
in place in line I don't know I've put

00:33:49,020 --> 00:33:53,760
the implementation here it just creates

00:33:50,820 --> 00:33:56,429
a new type from the base utilizar

00:33:53,760 --> 00:33:58,140
in the resources to this presentation

00:33:56,429 --> 00:34:01,620
there is the code for this it's pretty

00:33:58,140 --> 00:34:04,260
neat it's pretty neat to use it and to

00:34:01,620 --> 00:34:06,630
end everything let's talk about testing

00:34:04,260 --> 00:34:08,490
because really important when we do this

00:34:06,630 --> 00:34:11,190
service selector thing the color and the

00:34:08,490 --> 00:34:13,379
shell testing models comes down to

00:34:11,190 --> 00:34:16,710
testing the properties and testing the

00:34:13,379 --> 00:34:19,050
clean method and oftentimes testing

00:34:16,710 --> 00:34:22,040
properties that are functions on fields

00:34:19,050 --> 00:34:25,889
you don't have to instantiate models

00:34:22,040 --> 00:34:28,440
fast tests good tests also clean you

00:34:25,889 --> 00:34:30,119
don't have to instantiate you don't have

00:34:28,440 --> 00:34:34,530
to instantiate models if you're clean

00:34:30,119 --> 00:34:36,510
might just use these fields some set of

00:34:34,530 --> 00:34:39,389
the fields and do something around them

00:34:36,510 --> 00:34:41,639
which is really nice testing services

00:34:39,389 --> 00:34:43,470
and selectors this is the heavy lifting

00:34:41,639 --> 00:34:47,250
this is where you actually hit the

00:34:43,470 --> 00:34:49,139
database you use a lot of you use a lot

00:34:47,250 --> 00:34:50,909
of mocking because you use isolate

00:34:49,139 --> 00:34:52,619
different parts for example you've

00:34:50,909 --> 00:34:54,419
tested this service a lot and you want

00:34:52,619 --> 00:34:56,340
to test just the integration between for

00:34:54,419 --> 00:34:59,220
services you mock the services that

00:34:56,340 --> 00:35:01,470
you've tested or you mock the email

00:34:59,220 --> 00:35:05,160
sending that we've done three times to

00:35:01,470 --> 00:35:07,380
randomly fake generated emails you use a

00:35:05,160 --> 00:35:09,830
lot of mocking here and it's like the

00:35:07,380 --> 00:35:15,590
heavy liftings down here your brain

00:35:09,830 --> 00:35:19,290
capabilities goal here and testing kpi's

00:35:15,590 --> 00:35:21,240
there's with this approach there's

00:35:19,290 --> 00:35:22,950
usually no need to test ApS because

00:35:21,240 --> 00:35:24,690
they're just an interface and it's

00:35:22,950 --> 00:35:26,160
usually delegated to integration test

00:35:24,690 --> 00:35:28,710
five minutes rank all right usually

00:35:26,160 --> 00:35:32,190
delegated to

00:35:28,710 --> 00:35:37,260
sighs delegated to integration testing

00:35:32,190 --> 00:35:38,460
which is also really nice but my talks

00:35:37,260 --> 00:35:41,010
not about testing if you want to hear

00:35:38,460 --> 00:35:42,750
more about Django testing and what

00:35:41,010 --> 00:35:48,330
approaches we use you can listen to

00:35:42,750 --> 00:35:50,760
Martin who is here in LEM we're well how

00:35:48,330 --> 00:35:56,339
do you pronounce this lemma here all

00:35:50,760 --> 00:36:00,330
right in this whole six at 4:05 all

00:35:56,339 --> 00:36:03,560
right so to recap and to finish avoid

00:36:00,330 --> 00:36:06,510
business logic in models safe method

00:36:03,560 --> 00:36:09,270
forms any kind of forms in any kind of

00:36:06,510 --> 00:36:11,490
serializers just don't do it again

00:36:09,270 --> 00:36:15,089
view san api's there's no need to do

00:36:11,490 --> 00:36:17,430
their business logic and templates tax

00:36:15,089 --> 00:36:19,920
and utility methods utility methods

00:36:17,430 --> 00:36:23,880
should work like like pure functions on

00:36:19,920 --> 00:36:25,530
pure Python data structures on Python

00:36:23,880 --> 00:36:28,680
data structures you should not have

00:36:25,530 --> 00:36:30,480
utility which Peaks your domain or if

00:36:28,680 --> 00:36:33,450
you have it don't call it a utility just

00:36:30,480 --> 00:36:35,520
create a simple function with leading

00:36:33,450 --> 00:36:37,680
underscore and don't use it elsewhere

00:36:35,520 --> 00:36:41,130
so utilities should not be doing

00:36:37,680 --> 00:36:43,290
business logic again tasks tasks is an

00:36:41,130 --> 00:36:45,720
interesting topic sometimes you have to

00:36:43,290 --> 00:36:50,520
do it I don't have the time for this

00:36:45,720 --> 00:36:53,010
sorry selectors and services again your

00:36:50,520 --> 00:36:56,250
services for creating of detections use

00:36:53,010 --> 00:36:59,160
selectors for lists and detail actually

00:36:56,250 --> 00:37:01,349
it's really it's really simple approach

00:36:59,160 --> 00:37:06,000
but it pays a lot in the Agra in the

00:37:01,349 --> 00:37:08,099
long run there's more to it I've just

00:37:06,000 --> 00:37:10,230
published this morning the style guide

00:37:08,099 --> 00:37:12,480
because we have it internally and we're

00:37:10,230 --> 00:37:15,570
going to update it a lot so I'm going to

00:37:12,480 --> 00:37:18,599
tweet it add it to the presentation it's

00:37:15,570 --> 00:37:21,570
already alright and so on in case you're

00:37:18,599 --> 00:37:23,609
interested how we're doing this again

00:37:21,570 --> 00:37:25,710
I'm not saying this is the best way to

00:37:23,609 --> 00:37:27,300
write Jango because there are many ways

00:37:25,710 --> 00:37:29,550
that are actually valid and you can

00:37:27,300 --> 00:37:30,990
build software with them this is just

00:37:29,550 --> 00:37:32,670
the way that's working for us and it's

00:37:30,990 --> 00:37:34,859
working from experience it's working

00:37:32,670 --> 00:37:37,560
from shipping software that's being used

00:37:34,859 --> 00:37:40,940
by a lot of users every day and we have

00:37:37,560 --> 00:37:40,940
to be flexible with the features

00:37:41,560 --> 00:37:51,930
that's it thanks

00:37:44,490 --> 00:37:55,990
[Applause]

00:37:51,930 --> 00:37:58,660
any questions are welcome hello hi I

00:37:55,990 --> 00:38:01,270
used to have my business logic in the

00:37:58,660 --> 00:38:03,220
monitors like I extend the back update

00:38:01,270 --> 00:38:07,270
manager and have the business logic here

00:38:03,220 --> 00:38:08,890
do you think this is a bad method so you

00:38:07,270 --> 00:38:10,480
say you put your business logic in

00:38:08,890 --> 00:38:13,960
custom managers and custom query sets

00:38:10,480 --> 00:38:16,839
that's actually good but it's not the

00:38:13,960 --> 00:38:20,470
best how to say it's true or and

00:38:16,839 --> 00:38:22,780
specific you can achieve absolutely the

00:38:20,470 --> 00:38:24,609
same thing with services in selectors

00:38:22,780 --> 00:38:27,490
with custom managers and custom query

00:38:24,609 --> 00:38:31,030
sets but this kind but this kind of

00:38:27,490 --> 00:38:34,150
makes you want to use them an API sand

00:38:31,030 --> 00:38:36,190
tax and templates and so on so it's

00:38:34,150 --> 00:38:38,349
basically the same but we just define a

00:38:36,190 --> 00:38:40,990
nice boundary around it it's still good

00:38:38,349 --> 00:38:43,089
too if you feel comfortable doing things

00:38:40,990 --> 00:38:44,950
in managers just wrap the thing that

00:38:43,089 --> 00:38:47,589
you've done in a manager in a service

00:38:44,950 --> 00:38:50,650
and called service just have one entry

00:38:47,589 --> 00:38:52,690
point to the database and one entry

00:38:50,650 --> 00:38:54,849
point outside of the database that's the

00:38:52,690 --> 00:38:58,690
general idea to have the boundary so yep

00:38:54,849 --> 00:38:59,770
I hope this answers it very nice talk

00:38:58,690 --> 00:39:02,140
thank you

00:38:59,770 --> 00:39:03,549
in all the examples we saw everything

00:39:02,140 --> 00:39:06,099
seemed to work out ok

00:39:03,549 --> 00:39:08,170
are there any best practices for how you

00:39:06,099 --> 00:39:10,569
handle exception raised from within

00:39:08,170 --> 00:39:14,099
services and transactions within the

00:39:10,569 --> 00:39:14,099
services yep

00:39:14,700 --> 00:39:22,180
let's hope I've copy pasted or I think I

00:39:18,960 --> 00:39:25,420
missed it all right so let's talk about

00:39:22,180 --> 00:39:27,220
exceptions first since we're doing

00:39:25,420 --> 00:39:30,010
validation and permission checking in

00:39:27,220 --> 00:39:32,410
these services and selectors we usually

00:39:30,010 --> 00:39:35,740
define a mixin that goes in all of the

00:39:32,410 --> 00:39:38,799
api's that just had those the exception

00:39:35,740 --> 00:39:41,349
that we define as in our core in our

00:39:38,799 --> 00:39:42,609
business and just translated to rest

00:39:41,349 --> 00:39:45,309
framework exceptions this is how I

00:39:42,609 --> 00:39:47,859
handle it to avoid 500s and then for

00:39:45,309 --> 00:39:49,900
transactions we usually if you have a

00:39:47,859 --> 00:39:53,470
service you decorate it with transaction

00:39:49,900 --> 00:39:55,329
atomic that's it and if there are

00:39:53,470 --> 00:39:57,849
special edge cases where we have some

00:39:55,329 --> 00:40:00,940
special edge cases like you need to be

00:39:57,849 --> 00:40:03,490
sequential in some ordering for example

00:40:00,940 --> 00:40:05,849
invoice numbers you lock but you do this

00:40:03,490 --> 00:40:08,589
in service

00:40:05,849 --> 00:40:11,589
yeah I was wondering about now you have

00:40:08,589 --> 00:40:13,119
all the logic and selectors and services

00:40:11,589 --> 00:40:15,490
that's awesome what do you think about

00:40:13,119 --> 00:40:18,520
in providing shortcuts to those from a

00:40:15,490 --> 00:40:20,920
model for example as a property and if

00:40:18,520 --> 00:40:25,540
yes what you do about the circular

00:40:20,920 --> 00:40:27,940
import oh this this is pain

00:40:25,540 --> 00:40:29,680
so circular imports you either import

00:40:27,940 --> 00:40:33,040
the module and use the dots or you

00:40:29,680 --> 00:40:35,349
import it inside the function which

00:40:33,040 --> 00:40:38,440
makes it really hard for test 2 for

00:40:35,349 --> 00:40:40,270
testing so I'm not sure I could give you

00:40:38,440 --> 00:40:41,830
a general solution for this because I

00:40:40,270 --> 00:40:44,530
still struggle every time I hit a

00:40:41,830 --> 00:40:47,560
circular import as for shortcuts we

00:40:44,530 --> 00:40:49,780
usually do the other way around we have

00:40:47,560 --> 00:40:51,940
some methods and properties that are

00:40:49,780 --> 00:40:54,130
simple enough on a model and we expose

00:40:51,940 --> 00:40:56,890
them via service we do the other way

00:40:54,130 --> 00:40:59,650
around because again we try to have the

00:40:56,890 --> 00:41:01,869
boundary between the API and database

00:40:59,650 --> 00:41:04,690
with the business logic in between we

00:41:01,869 --> 00:41:08,710
try to have no other way of using the

00:41:04,690 --> 00:41:13,390
application instead aside from using a

00:41:08,710 --> 00:41:16,080
service or selector ok did you mention

00:41:13,390 --> 00:41:20,830
that when we have a property that

00:41:16,080 --> 00:41:25,349
calculates on something into relation we

00:41:20,830 --> 00:41:28,660
have a tendon just today another which

00:41:25,349 --> 00:41:32,410
talking about how to optimize the

00:41:28,660 --> 00:41:34,300
Auriemma to do queries and so on so with

00:41:32,410 --> 00:41:38,140
the best practice to do that calculation

00:41:34,300 --> 00:41:40,270
as a property doing a selector to doing

00:41:38,140 --> 00:41:42,160
that calculation of set the property and

00:41:40,270 --> 00:41:44,830
the property call that yeah so actually

00:41:42,160 --> 00:41:46,750
this is evil stock right in front of you

00:41:44,830 --> 00:41:49,570
for the query organization this is a

00:41:46,750 --> 00:41:51,730
nice edge case in case you need this you

00:41:49,570 --> 00:41:56,730
you better preserve them as properties

00:41:51,730 --> 00:41:59,800
or you have to use civilizer method

00:41:56,730 --> 00:42:02,380
fields in order to the selectors but

00:41:59,800 --> 00:42:05,560
this is an edge case and when there's an

00:42:02,380 --> 00:42:07,240
edge case you have to decide with your

00:42:05,560 --> 00:42:12,339
gather team make a decision and add a

00:42:07,240 --> 00:42:14,260
comment wife why we've done this why we

00:42:12,339 --> 00:42:17,020
did this and why it's not like the rest

00:42:14,260 --> 00:42:18,010
of the rest of the system but it's

00:42:17,020 --> 00:42:19,870
really this is like

00:42:18,010 --> 00:42:21,100
the specific sometimes you can do it

00:42:19,870 --> 00:42:23,080
with a selector it's pretty easy

00:42:21,100 --> 00:42:24,880
sometimes you have to use the cached

00:42:23,080 --> 00:42:27,400
property because you're doing some

00:42:24,880 --> 00:42:30,790
annotation grouping and aggregation in

00:42:27,400 --> 00:42:33,790
the query set okay thank you and just to

00:42:30,790 --> 00:42:35,590
say we don't follow a hundred percent of

00:42:33,790 --> 00:42:38,470
this in our projects because we

00:42:35,590 --> 00:42:41,170
developed this over time it's like last

00:42:38,470 --> 00:42:44,550
week we made some decisions that are

00:42:41,170 --> 00:42:48,820
looking good but we try gradually to

00:42:44,550 --> 00:42:50,740
turn our entire code base to be like

00:42:48,820 --> 00:42:53,710
that the last project that I did which

00:42:50,740 --> 00:42:55,690
was a two month long project it was

00:42:53,710 --> 00:42:59,590
entirely like this and it works like

00:42:55,690 --> 00:43:05,710
magic it's really good but we learn

00:42:59,590 --> 00:43:07,270
along the way also hey I haven't used

00:43:05,710 --> 00:43:08,680
enough Django rest framework so I'm just

00:43:07,270 --> 00:43:11,230
going to double check this is there

00:43:08,680 --> 00:43:13,300
anything like a model form serializer

00:43:11,230 --> 00:43:15,190
that would be serialize it to the form

00:43:13,300 --> 00:43:18,400
that could then get like clean verify

00:43:15,190 --> 00:43:20,590
pathway so there's a plane serialize er

00:43:18,400 --> 00:43:22,630
which just takes for example JSON

00:43:20,590 --> 00:43:24,400
intercept into Python objects and

00:43:22,630 --> 00:43:26,800
there's this thing called model

00:43:24,400 --> 00:43:30,760
serializer which takes jason and turns

00:43:26,800 --> 00:43:34,170
it to a ramp object so yeah would you

00:43:30,760 --> 00:43:36,790
use forms it all with this method so

00:43:34,170 --> 00:43:38,470
most of our projects are using for

00:43:36,790 --> 00:43:41,260
example react as a front-end so we don't

00:43:38,470 --> 00:43:43,330
use forms but the thing that we had we

00:43:41,260 --> 00:43:47,350
had duplicate forms and models here

00:43:43,330 --> 00:43:49,270
eliezer sense for me the best thing is

00:43:47,350 --> 00:43:52,780
to drop one and just use models here

00:43:49,270 --> 00:43:54,550
writers render test forms yeah because

00:43:52,780 --> 00:43:56,910
you have again duplication and it's

00:43:54,550 --> 00:43:56,910
really painful

00:44:01,750 --> 00:44:09,290
thank you I have a couple of questions

00:44:06,260 --> 00:44:13,580
the first one why not put in selectors

00:44:09,290 --> 00:44:15,770
into services because you get to way too

00:44:13,580 --> 00:44:17,210
many services you get way too many

00:44:15,770 --> 00:44:19,730
services and you make the separation

00:44:17,210 --> 00:44:22,550
visually in the file it's like there's a

00:44:19,730 --> 00:44:24,700
comment in the middle which says things

00:44:22,550 --> 00:44:28,190
that create and update things that's

00:44:24,700 --> 00:44:30,530
listing and do details yep my gut

00:44:28,190 --> 00:44:32,030
feeling would be that if I'm able to

00:44:30,530 --> 00:44:33,530
create something with the service I

00:44:32,030 --> 00:44:37,250
should also be able to select it with

00:44:33,530 --> 00:44:39,980
the same service I guess I guess yes

00:44:37,250 --> 00:44:41,869
your same good feeling here perhaps it's

00:44:39,980 --> 00:44:45,230
a naming thing because we started with

00:44:41,869 --> 00:44:48,520
services which were doing both and then

00:44:45,230 --> 00:44:51,350
we decided to start factoring the

00:44:48,520 --> 00:44:53,060
selectors so perhaps the entire thing

00:44:51,350 --> 00:44:55,550
should be called service and we should

00:44:53,060 --> 00:44:57,560
have some names inside of it for the two

00:44:55,550 --> 00:44:59,540
different types of functions so I agree

00:44:57,560 --> 00:45:02,300
with you and then well then what's your

00:44:59,540 --> 00:45:04,070
take on using the main driven design

00:45:02,300 --> 00:45:05,960
approach towards structuring your

00:45:04,070 --> 00:45:07,430
project this is basically the main

00:45:05,960 --> 00:45:09,530
driven design it's like you do the data

00:45:07,430 --> 00:45:11,750
model you expose the business logic and

00:45:09,530 --> 00:45:13,720
you do the api's yeah but even from my

00:45:11,750 --> 00:45:16,550
point of view of course yeah okay okay

00:45:13,720 --> 00:45:19,550
all right that was all the time you had

00:45:16,550 --> 00:45:20,960
for questions give another one last

00:45:19,550 --> 00:45:25,690
round of applause please

00:45:20,960 --> 00:45:25,690

YouTube URL: https://www.youtube.com/watch?v=yG3ZdxBb1oo


