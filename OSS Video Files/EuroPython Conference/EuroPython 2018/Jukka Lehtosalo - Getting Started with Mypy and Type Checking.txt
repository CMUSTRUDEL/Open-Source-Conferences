Title: Jukka Lehtosalo - Getting Started with Mypy and Type Checking
Publication date: 2018-08-30
Playlist: EuroPython 2018
Description: 
	Getting Started with Mypy and Type Checking
[EuroPython 2018 - Talk - 2018-07-26 - Moorfoot]
[Edinburgh, UK]

By Jukka Lehtosalo

Ever wondered if you should try type checking in your Python project, or what it takes to get started with mypy? I will show how to introduce type checking the easy way, one step at a time.

Dropbox was an early adopter of type checking and mypy, and we've been gradually adding type annotations to our large production codebases since 2016. Engineers love how type annotations improve the clarity of code, and how mypy can surface hard-to-find bugs. We've learned a lot in the process of annotating millions of lines of code, and in this talk you'll learn battle-tested approaches for adding type checking to an existing codebase.

I expect no previous experience with mypy. You'll benefit the most if you've worked on a project with multiple developers.



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2018.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:05,120 --> 00:00:10,860
yep hello everybody let's start with a

00:00:09,240 --> 00:00:15,929
very small example

00:00:10,860 --> 00:00:18,330
so I've these tiny program only three

00:00:15,929 --> 00:00:21,300
lines seems pretty straightforward but

00:00:18,330 --> 00:00:24,630
let's see if we can type check it using

00:00:21,300 --> 00:00:27,359
my PI so I guess first you need to

00:00:24,630 --> 00:00:31,579
install my PI just is pip install my pi

00:00:27,359 --> 00:00:33,870
I know do you need Python 3 to run my PI

00:00:31,579 --> 00:00:36,000
it's presently application party you can

00:00:33,870 --> 00:00:40,160
use my body type check also Python C

00:00:36,000 --> 00:00:44,100
code which we'll talk about later and

00:00:40,160 --> 00:00:48,620
then the simplest way to type check the

00:00:44,100 --> 00:00:51,629
edges from my PI name of the file and

00:00:48,620 --> 00:00:55,110
actually since either this program has

00:00:51,629 --> 00:00:59,120
an error so reversed returns an iterator

00:00:55,110 --> 00:01:04,290
and you can't append an iterator so

00:00:59,120 --> 00:01:08,310
great my PI found a bug nice so what

00:01:04,290 --> 00:01:10,650
exactly is my PI it is a static type

00:01:08,310 --> 00:01:14,100
checker so static in this context means

00:01:10,650 --> 00:01:17,220
that it analyzes your code like tries to

00:01:14,100 --> 00:01:19,290
understand some aspects of the code but

00:01:17,220 --> 00:01:21,240
it doesn't actually run the code so it

00:01:19,290 --> 00:01:24,360
has no idea like what is exactly

00:01:21,240 --> 00:01:26,580
happening at runtime so it tries to find

00:01:24,360 --> 00:01:29,070
type errors things like like missing

00:01:26,580 --> 00:01:30,750
attribute calling a function a method

00:01:29,070 --> 00:01:32,250
with the wrong number of arguments or

00:01:30,750 --> 00:01:34,530
like wrong name for give a document or

00:01:32,250 --> 00:01:38,100
for an argument type and things like

00:01:34,530 --> 00:01:40,200
that and it needs a bit of help from the

00:01:38,100 --> 00:01:43,649
programmer so you need to add

00:01:40,200 --> 00:01:45,930
annotations to your code to actually

00:01:43,649 --> 00:01:48,630
have my PI do a useful type checking so

00:01:45,930 --> 00:01:50,490
the type annotations are part of like

00:01:48,630 --> 00:01:53,970
Python they are standardizing back for

00:01:50,490 --> 00:01:56,850
that was mentioned briefly and like

00:01:53,970 --> 00:01:58,590
python 3 5 comes with the typing module

00:01:56,850 --> 00:02:01,770
instant library which kind of we are

00:01:58,590 --> 00:02:03,840
going to use later on so ok and I'm just

00:02:01,770 --> 00:02:07,069
going to give you a very brief overview

00:02:03,840 --> 00:02:09,599
of how you like annotate your code so

00:02:07,069 --> 00:02:11,550
I'm not going you to there there's like

00:02:09,599 --> 00:02:13,830
a large number for different kinds of

00:02:11,550 --> 00:02:15,420
sites you can use it's pretty flexible

00:02:13,830 --> 00:02:17,070
but you get started with just like a

00:02:15,420 --> 00:02:18,960
couple of basic things and then

00:02:17,070 --> 00:02:22,200
gradually kind of learn more stuff as

00:02:18,960 --> 00:02:24,390
you go on so here's a slightly more

00:02:22,200 --> 00:02:28,080
complicated example so here we have a

00:02:24,390 --> 00:02:31,260
user-defined class cats which has and

00:02:28,080 --> 00:02:33,390
these pasts type annotations so here we

00:02:31,260 --> 00:02:36,000
have a Python three type annotation for

00:02:33,390 --> 00:02:38,700
the dunder init method so the argument

00:02:36,000 --> 00:02:41,670
color has side stir it just basically

00:02:38,700 --> 00:02:45,090
reference to the built in mr. class

00:02:41,670 --> 00:02:46,950
object and then also don't really it

00:02:45,090 --> 00:02:49,650
doesn't return a value so we have a

00:02:46,950 --> 00:02:52,470
return type that's like arrow nine which

00:02:49,650 --> 00:02:54,600
means that it doesn't return anything

00:02:52,470 --> 00:02:56,750
what implicitly returns none but we

00:02:54,600 --> 00:02:59,850
don't really mostly care about that

00:02:56,750 --> 00:03:02,130
another slightly interesting thing is

00:02:59,850 --> 00:03:04,260
like the self argument isn't annotated

00:03:02,130 --> 00:03:07,860
my by is clever enough to figure out

00:03:04,260 --> 00:03:09,930
that a type of self is cat so it has no

00:03:07,860 --> 00:03:11,640
need to kind of explicitly kind of

00:03:09,930 --> 00:03:17,610
that's that sort of redundant

00:03:11,640 --> 00:03:18,510
information and then the body seems kind

00:03:17,610 --> 00:03:21,690
of straightforward there's actually

00:03:18,510 --> 00:03:23,580
something interesting going on there so

00:03:21,690 --> 00:03:25,800
my PI by looking at the body of Daenerys

00:03:23,580 --> 00:03:27,989
might by figures are oh the class cat

00:03:25,800 --> 00:03:31,200
has an attribute called

00:03:27,989 --> 00:03:34,170
color and also does type inference so it

00:03:31,200 --> 00:03:36,810
looks at the initializer which is just

00:03:34,170 --> 00:03:38,940
the expression color and another type of

00:03:36,810 --> 00:03:40,470
that is string side as you like infer

00:03:38,940 --> 00:03:43,110
that a type of the color attribute is

00:03:40,470 --> 00:03:46,560
also string so you didn't need to

00:03:43,110 --> 00:03:47,760
annotate are explicitly and usually like

00:03:46,560 --> 00:03:52,080
you don't need to annotate variables

00:03:47,760 --> 00:03:53,520
just functions and then I mentioned the

00:03:52,080 --> 00:03:54,780
typing module this in the standard

00:03:53,520 --> 00:03:57,120
library and there's a back port for

00:03:54,780 --> 00:03:58,709
Python three four three four

00:03:57,120 --> 00:04:01,620
if somebody's still using that on Python

00:03:58,709 --> 00:04:04,440
su-7 and it is a lot bunch of like sites

00:04:01,620 --> 00:04:07,050
and utilities that are very helpful and

00:04:04,440 --> 00:04:09,090
almost all non-trivial code using

00:04:07,050 --> 00:04:10,380
annotations will use some of those so in

00:04:09,090 --> 00:04:15,480
this case we import of the types

00:04:10,380 --> 00:04:18,120
iterable and sit and we use them in the

00:04:15,480 --> 00:04:22,590
annotation for the function all colors

00:04:18,120 --> 00:04:25,620
so the cat argument is an eatable or our

00:04:22,590 --> 00:04:27,660
cats so we use square brackets so you're

00:04:25,620 --> 00:04:30,720
going to build more complex types out of

00:04:27,660 --> 00:04:32,220
kind of simple types and also there's a

00:04:30,720 --> 00:04:34,920
return type use the square brackets to

00:04:32,220 --> 00:04:40,350
say this is like a concrete set object

00:04:34,920 --> 00:04:42,870
with string items and actually if we run

00:04:40,350 --> 00:04:45,390
my pipe against this program it finds

00:04:42,870 --> 00:04:46,740
another error nice look-alike we

00:04:45,390 --> 00:04:50,040
actually be misspelled the color

00:04:46,740 --> 00:04:52,440
attribute so obviously like it should be

00:04:50,040 --> 00:04:53,010
written like that and now it's green so

00:04:52,440 --> 00:04:55,560
my tie

00:04:53,010 --> 00:04:58,980
and again like my needs to know the site

00:04:55,560 --> 00:05:01,380
off cats so you kind of know that the

00:04:58,980 --> 00:05:02,670
collar degree actually is misspelled

00:05:01,380 --> 00:05:04,580
because otherwise you have no idea

00:05:02,670 --> 00:05:10,380
saying like what it is supposed to be

00:05:04,580 --> 00:05:12,630
inside cats okay another example so in

00:05:10,380 --> 00:05:16,980
this case we just have like an tasks

00:05:12,630 --> 00:05:18,780
which is an empty list and actually like

00:05:16,980 --> 00:05:20,160
my body kind of complains if you write

00:05:18,780 --> 00:05:21,330
it's hard to use program because like it

00:05:20,160 --> 00:05:24,360
doesn't have enough information to

00:05:21,330 --> 00:05:27,660
decide why the type of the list item is

00:05:24,360 --> 00:05:30,360
so you need to help my PI a little in

00:05:27,660 --> 00:05:33,450
this case it's straightforward enough so

00:05:30,360 --> 00:05:35,970
okay you just import another like type

00:05:33,450 --> 00:05:38,340
from typing and then we added side

00:05:35,970 --> 00:05:40,560
meditation so this is like variable type

00:05:38,340 --> 00:05:43,560
annotation which is was added in Python

00:05:40,560 --> 00:05:45,300
3 6 which is pretty nice and you can

00:05:43,560 --> 00:05:47,540
also leave out initializer if you just

00:05:45,300 --> 00:05:51,870
want to declare that type of a variable

00:05:47,540 --> 00:05:54,450
so this kind of helps my PI a bit but

00:05:51,870 --> 00:05:56,280
what if we actually are not sure what

00:05:54,450 --> 00:05:58,530
the item type is maybe there's some

00:05:56,280 --> 00:06:00,780
legacy code that you nobody understands

00:05:58,530 --> 00:06:03,360
anymore so in that case and in general

00:06:00,780 --> 00:06:05,970
if there's a type that you can't kind of

00:06:03,360 --> 00:06:07,410
figure out you can always fall back to

00:06:05,970 --> 00:06:10,200
any which means basically unknown

00:06:07,410 --> 00:06:12,030
something so my PI kind of lets you put

00:06:10,200 --> 00:06:13,740
anything within the sleep at least so

00:06:12,030 --> 00:06:15,120
it's kind of a cost it can't type like

00:06:13,740 --> 00:06:16,590
as much but then it gives you more

00:06:15,120 --> 00:06:20,520
flexibility so you should you can use

00:06:16,590 --> 00:06:22,110
this but you should use it too much okay

00:06:20,520 --> 00:06:25,110
I mentioned that like you can also type

00:06:22,110 --> 00:06:27,950
checked Python soup so these obviously

00:06:25,110 --> 00:06:29,700
have to use a slightly different syntax

00:06:27,950 --> 00:06:31,590
in these guys these are also

00:06:29,700 --> 00:06:33,090
standardized in pet for you had site

00:06:31,590 --> 00:06:36,600
comments you can with different sub

00:06:33,090 --> 00:06:38,479
comments for functions and variables and

00:06:36,600 --> 00:06:41,490
the variable side comment is also useful

00:06:38,479 --> 00:06:44,069
in Python 3 5 which

00:06:41,490 --> 00:06:46,050
support the variable annotations insects

00:06:44,069 --> 00:06:48,300
and again like there's a black pod for

00:06:46,050 --> 00:06:50,520
typing for Python pseudo you have to

00:06:48,300 --> 00:06:53,280
like people install that's and then you

00:06:50,520 --> 00:06:55,110
can basically all the same stuff except

00:06:53,280 --> 00:06:57,870
with a slightly different syntax or

00:06:55,110 --> 00:07:00,330
quite different syntax and if you type

00:06:57,870 --> 00:07:03,330
like my using my PI then you should use

00:07:00,330 --> 00:07:06,360
that as the spy - option to run my by in

00:07:03,330 --> 00:07:08,280
Python C mode you can also like a Python

00:07:06,360 --> 00:07:12,259
CO and freeze-dried linker and just run

00:07:08,280 --> 00:07:15,990
my by twice with different options and

00:07:12,259 --> 00:07:18,270
note about Python 3 7 so my 3 7 I did

00:07:15,990 --> 00:07:20,039
some pretty cool stuff we ready typing

00:07:18,270 --> 00:07:22,259
so you should really consider upgrading

00:07:20,039 --> 00:07:25,590
to Python 370 if you are still using

00:07:22,259 --> 00:07:28,039
like something else in particular I like

00:07:25,590 --> 00:07:30,870
that from future import annotations

00:07:28,039 --> 00:07:33,419
thing which might not sound like much

00:07:30,870 --> 00:07:36,569
but actually makes life much easier so

00:07:33,419 --> 00:07:38,909
it lets you have forward references in

00:07:36,569 --> 00:07:41,370
the outsides like this just like as

00:07:38,909 --> 00:07:45,509
you'd expect so libraries defined after

00:07:41,370 --> 00:07:47,490
the like label attribute in Python 3 6

00:07:45,509 --> 00:07:49,289
you have to use like string literal

00:07:47,490 --> 00:07:52,169
around the label indentation which is

00:07:49,289 --> 00:07:54,840
kind of ugly so it just jump straight to

00:07:52,169 --> 00:07:58,560
2.37 and you can just forget about that

00:07:54,840 --> 00:08:00,270
problem okay so now you have a general

00:07:58,560 --> 00:08:02,789
idea of hide sites work and what my

00:08:00,270 --> 00:08:06,840
place but should you use types what's

00:08:02,789 --> 00:08:09,389
the point the main thing that we've

00:08:06,840 --> 00:08:12,090
heard like over and over again from

00:08:09,389 --> 00:08:14,759
users and like other people giving talks

00:08:12,090 --> 00:08:17,009
about my whenever it is like site the

00:08:14,759 --> 00:08:19,770
annotations make it much easier to

00:08:17,009 --> 00:08:22,560
understand because they act as machine

00:08:19,770 --> 00:08:27,150
checked machine very white documentation

00:08:22,560 --> 00:08:29,280
and this is something particularly

00:08:27,150 --> 00:08:31,440
important for large code bases if you

00:08:29,280 --> 00:08:32,490
are like a team of multiple programmers

00:08:31,440 --> 00:08:34,440
working in the same parts you can't

00:08:32,490 --> 00:08:37,320
expect everybody to understand

00:08:34,440 --> 00:08:39,839
everything and these types really make

00:08:37,320 --> 00:08:43,200
good understanding much easier and

00:08:39,839 --> 00:08:45,540
obviously sides can find box early so

00:08:43,200 --> 00:08:47,640
basically you should run my PI like

00:08:45,540 --> 00:08:49,890
after what maybe each change you make

00:08:47,640 --> 00:08:51,390
not even trivial once to make sure that

00:08:49,890 --> 00:08:53,610
you didn't have like typo or something

00:08:51,390 --> 00:08:55,329
so because it's like the faster you find

00:08:53,610 --> 00:08:57,279
box the easier the other fixed

00:08:55,329 --> 00:08:59,129
you just remember the code better so

00:08:57,279 --> 00:09:02,709
like few bucks introduction which is

00:08:59,129 --> 00:09:05,100
obviously another big benefits there's

00:09:02,709 --> 00:09:07,600
also like a slightly less obvious thing

00:09:05,100 --> 00:09:09,639
by increasing credibility people are

00:09:07,600 --> 00:09:11,410
less likely to make mistakes by

00:09:09,639 --> 00:09:14,110
misunderstanding occur so like calling a

00:09:11,410 --> 00:09:16,179
function with say like wrong argument

00:09:14,110 --> 00:09:17,649
that just happens to run dude attacked

00:09:16,179 --> 00:09:20,319
site being but it might produce

00:09:17,649 --> 00:09:22,089
something completely bogus say

00:09:20,319 --> 00:09:24,309
type-checking kind of can catch those

00:09:22,089 --> 00:09:28,329
sorts of issues so again like few bucks

00:09:24,309 --> 00:09:30,220
thanks to typing and both of those gonna

00:09:28,329 --> 00:09:33,009
mean that you spent less time reading

00:09:30,220 --> 00:09:35,230
code less time like fixing and debugging

00:09:33,009 --> 00:09:37,089
issues introduction which means like

00:09:35,230 --> 00:09:38,199
more productivity and more time to do

00:09:37,089 --> 00:09:40,389
actually useful work

00:09:38,199 --> 00:09:42,179
productive work and there are a couple

00:09:40,389 --> 00:09:45,610
of other big things that are kind of

00:09:42,179 --> 00:09:48,489
slightly less obvious is like IDs like

00:09:45,610 --> 00:09:50,619
by Chairman we saw city code can take

00:09:48,489 --> 00:09:53,470
advantage of type annotations and they

00:09:50,619 --> 00:09:56,529
can like give you better like code

00:09:53,470 --> 00:09:58,299
completion in firearm like go to

00:09:56,529 --> 00:10:00,009
definition etc work better and more

00:09:58,299 --> 00:10:01,660
reliably again like especially a few

00:10:00,009 --> 00:10:04,989
large code base like the automatic type

00:10:01,660 --> 00:10:06,160
analyzers don't work that well but if

00:10:04,989 --> 00:10:08,829
you have type annotations then kind of

00:10:06,160 --> 00:10:12,910
it scales much better and much more

00:10:08,829 --> 00:10:15,009
reliably and also like sipes make brief

00:10:12,910 --> 00:10:16,299
fracturing easier things like it

00:10:15,009 --> 00:10:18,790
generally you can leave you like modify

00:10:16,299 --> 00:10:20,529
the sink Jeff function generally you

00:10:18,790 --> 00:10:22,689
just modify the annotation and then run

00:10:20,529 --> 00:10:25,179
my by and it'll say exactly which part

00:10:22,689 --> 00:10:26,799
of the code base needs to be updated not

00:10:25,179 --> 00:10:28,839
like you get some like weird exception

00:10:26,799 --> 00:10:30,369
in your tests or maybe in production

00:10:28,839 --> 00:10:32,230
because your forget to update something

00:10:30,369 --> 00:10:34,419
so this is really okay like improved

00:10:32,230 --> 00:10:36,129
productivity and also it makes easier to

00:10:34,419 --> 00:10:39,129
refraction so that's your molarity to

00:10:36,129 --> 00:10:41,559
refactor code which means that your code

00:10:39,129 --> 00:10:43,720
is cleaner and you're less likely to

00:10:41,559 --> 00:10:46,360
introduce box because cleaner code is

00:10:43,720 --> 00:10:48,639
also less buggy code so all of these

00:10:46,360 --> 00:10:50,379
benefits are kind of they might be want

00:10:48,639 --> 00:10:51,579
to be obvious from the beginning but if

00:10:50,379 --> 00:10:53,739
you actually start using marking

00:10:51,579 --> 00:10:57,660
slightly crowd soon you'll be kind of

00:10:53,739 --> 00:11:01,379
getting the benefits okay another thing

00:10:57,660 --> 00:11:04,029
that my pilots you do is gradual typing

00:11:01,379 --> 00:11:06,240
so most users as my pie I'd expect

00:11:04,029 --> 00:11:08,980
started with an existing code base

00:11:06,240 --> 00:11:10,500
without edit type annotation

00:11:08,980 --> 00:11:12,700
the idea is that you can start with

00:11:10,500 --> 00:11:15,399
meditations and then start Crutchley at

00:11:12,700 --> 00:11:16,720
them until you're it's like a reasonable

00:11:15,399 --> 00:11:19,870
level of coverage you don't need to go

00:11:16,720 --> 00:11:21,610
like three hundred percent but this is a

00:11:19,870 --> 00:11:23,350
great thing because it makes my crate an

00:11:21,610 --> 00:11:25,600
easier but there are some issues you

00:11:23,350 --> 00:11:28,510
should be aware of so this is another

00:11:25,600 --> 00:11:33,399
like really tiny example we have like

00:11:28,510 --> 00:11:36,640
two modules a and B and B calls function

00:11:33,399 --> 00:11:39,250
f in a and obviously like what it'll

00:11:36,640 --> 00:11:42,600
blow up because you can't you'll add an

00:11:39,250 --> 00:11:45,010
interest ring so what have you run my PI

00:11:42,600 --> 00:11:49,690
actually my place is like okay I can't

00:11:45,010 --> 00:11:51,660
see any problem why is this well the

00:11:49,690 --> 00:11:54,250
thing is my PI doesn't type check

00:11:51,660 --> 00:11:56,410
functions with a limitations this is to

00:11:54,250 --> 00:11:59,020
make the gradual typing easier so if you

00:11:56,410 --> 00:12:01,120
have like huge numbers of legacy go then

00:11:59,020 --> 00:12:03,190
often like my PI will generate some kind

00:12:01,120 --> 00:12:05,260
of warnings about things that it kind of

00:12:03,190 --> 00:12:06,880
can't figure out and you might get like

00:12:05,260 --> 00:12:09,190
hundreds of errors if it if you try to

00:12:06,880 --> 00:12:10,810
like type check everything in one go so

00:12:09,190 --> 00:12:12,370
basically the idea is to gradually under

00:12:10,810 --> 00:12:14,410
coverage which means like if you don't

00:12:12,370 --> 00:12:15,279
have annotations then there's not much

00:12:14,410 --> 00:12:16,690
Michael I can do

00:12:15,279 --> 00:12:19,029
so basically okay let's add an

00:12:16,690 --> 00:12:22,930
annotation but again like what they

00:12:19,029 --> 00:12:24,880
still no error what thing is with my

00:12:22,930 --> 00:12:26,980
still doesn't know what F returns

00:12:24,880 --> 00:12:28,600
because it doesn't have an annotation so

00:12:26,980 --> 00:12:31,930
it stills like f returns something maybe

00:12:28,600 --> 00:12:35,500
you can add it to string so now when he

00:12:31,930 --> 00:12:37,839
actually also annotate F then my PI can

00:12:35,500 --> 00:12:39,370
find the error so but it means like such

00:12:37,839 --> 00:12:41,380
a something curly you might need to like

00:12:39,370 --> 00:12:43,779
other code that picker interacts with

00:12:41,380 --> 00:12:46,570
the get like actually useful type to get

00:12:43,779 --> 00:12:49,770
results so if you have fewer annotations

00:12:46,570 --> 00:12:52,959
you get some checking but not that much

00:12:49,770 --> 00:12:55,390
you have more attentions then more

00:12:52,959 --> 00:13:00,279
checking so that's kind of the thing to

00:12:55,390 --> 00:13:01,660
remember it kind of like and that's kind

00:13:00,279 --> 00:13:03,190
of something that some people complain

00:13:01,660 --> 00:13:05,800
but they don't understand this later why

00:13:03,190 --> 00:13:08,370
can't my PI catch this error so this is

00:13:05,800 --> 00:13:10,990
really important thing to understand

00:13:08,370 --> 00:13:12,820
okay now assume that you have some

00:13:10,990 --> 00:13:14,829
existing code that you'd like to see

00:13:12,820 --> 00:13:16,180
migrated to static typing and you

00:13:14,829 --> 00:13:19,209
haven't used my before

00:13:16,180 --> 00:13:21,579
so now annotations so the first step I

00:13:19,209 --> 00:13:23,139
recommend is to try to get my PI to run

00:13:21,579 --> 00:13:24,910
against some codes

00:13:23,139 --> 00:13:26,170
without adding any annotations other

00:13:24,910 --> 00:13:31,240
than the minimal ones to get kind of

00:13:26,170 --> 00:13:32,500
kettle clean my platter on so again like

00:13:31,240 --> 00:13:33,940
I said like you might have to tweak

00:13:32,500 --> 00:13:35,860
things a bit maybe you do some like

00:13:33,940 --> 00:13:37,660
dynamic stuff that my part doesn't quite

00:13:35,860 --> 00:13:40,690
understand or something else like you

00:13:37,660 --> 00:13:42,459
need to might add some annotations so it

00:13:40,690 --> 00:13:44,410
takes a bit of work I didn't study me

00:13:42,459 --> 00:13:45,759
it's maybe like five thousand twenty

00:13:44,410 --> 00:13:48,699
thousand lines of code that's really

00:13:45,759 --> 00:13:49,930
like a reasonable size so if you have

00:13:48,699 --> 00:13:51,850
like million lines of code you shouldn't

00:13:49,930 --> 00:13:55,750
kind of try to get that all running

00:13:51,850 --> 00:13:56,860
under my eye so maybe like one or two

00:13:55,750 --> 00:13:57,940
days of every and you should get a

00:13:56,860 --> 00:13:59,470
likely neuron for that

00:13:57,940 --> 00:14:01,389
it kind of stops it up your codebase so

00:13:59,470 --> 00:14:03,880
maybe that's all your code then grade

00:14:01,389 --> 00:14:05,259
then you're kind of doing well but

00:14:03,880 --> 00:14:07,870
things like how do you gonna peak that

00:14:05,259 --> 00:14:10,449
like it's 20,000 lines of code that's

00:14:07,870 --> 00:14:13,839
kind of can be a bit tricky so I'm going

00:14:10,449 --> 00:14:16,209
to spend some time talking about that so

00:14:13,839 --> 00:14:18,459
I guess the simplest thing is to only

00:14:16,209 --> 00:14:21,130
type check specific directories or

00:14:18,459 --> 00:14:24,250
specific files just like my bite and

00:14:21,130 --> 00:14:27,220
some paths which is great it works

00:14:24,250 --> 00:14:29,380
that's what you expect but obviously if

00:14:27,220 --> 00:14:32,470
you have like hundred directories you

00:14:29,380 --> 00:14:33,850
don't want to enumerate them explicitly

00:14:32,470 --> 00:14:36,699
so it doesn't really scale so like

00:14:33,850 --> 00:14:38,500
really large code bases this is slightly

00:14:36,699 --> 00:14:40,810
more general thing you can do is kind of

00:14:38,500 --> 00:14:43,540
similar so you can have like regular

00:14:40,810 --> 00:14:45,730
expressions all I go up patterns which

00:14:43,540 --> 00:14:48,699
kind of used to kind of pick up which

00:14:45,730 --> 00:14:50,980
files not see type check or maybe the

00:14:48,699 --> 00:14:52,720
sub-base even is a blacklist alternative

00:14:50,980 --> 00:14:54,759
you lose a whitelist which I like have a

00:14:52,720 --> 00:14:57,160
patterns which match the files that you

00:14:54,759 --> 00:14:58,750
want to tactical in this case like we

00:14:57,160 --> 00:15:04,990
don't want to type like test code so we

00:14:58,750 --> 00:15:06,250
have this like slash test / pattern so

00:15:04,990 --> 00:15:07,540
you probably won't what use exactly this

00:15:06,250 --> 00:15:10,569
thing but something similar might have

00:15:07,540 --> 00:15:12,490
work for you but the like this kind of

00:15:10,569 --> 00:15:14,709
is more scalable than previous well it

00:15:12,490 --> 00:15:18,310
still doesn't scale to like tens of

00:15:14,709 --> 00:15:19,930
hundreds of files probably okay this is

00:15:18,310 --> 00:15:22,779
what we use at Dropbox so we have like

00:15:19,930 --> 00:15:24,880
tens of thousands of files we don't

00:15:22,779 --> 00:15:26,800
maintain like manually switch we also

00:15:24,880 --> 00:15:28,839
have like black lists and actually

00:15:26,800 --> 00:15:31,930
produce all of these in some capacity

00:15:28,839 --> 00:15:34,510
but we also have this like type command

00:15:31,930 --> 00:15:35,779
kind of detection script which kind of

00:15:34,510 --> 00:15:38,300
looks for files with type come

00:15:35,779 --> 00:15:39,680
and then we include all those files in

00:15:38,300 --> 00:15:40,970
the bills so that the memory you start

00:15:39,680 --> 00:15:43,910
under a new file it get automatically

00:15:40,970 --> 00:15:45,589
picked up by the mypie built-in Python 3

00:15:43,910 --> 00:15:47,240
you might like have a like regular

00:15:45,589 --> 00:15:49,730
expression which looks for like type

00:15:47,240 --> 00:15:51,980
annotations or imports from the typing

00:15:49,730 --> 00:15:54,740
module or you can invent your own kind

00:15:51,980 --> 00:15:56,569
of marker so that way you can kind of

00:15:54,740 --> 00:15:57,769
pretty easily add new files they're

00:15:56,569 --> 00:15:59,540
built without having to modify some

00:15:57,769 --> 00:16:00,949
configuration file so you have to do a

00:15:59,540 --> 00:16:03,319
bit of scripting but it should be pretty

00:16:00,949 --> 00:16:04,699
straightforward again like this is a

00:16:03,319 --> 00:16:06,410
problem that maybe you don't have that

00:16:04,699 --> 00:16:08,540
like a type annotation in the file

00:16:06,410 --> 00:16:10,670
because it doesn't have a function or

00:16:08,540 --> 00:16:12,410
you forget to add the tag then you're

00:16:10,670 --> 00:16:14,240
kind of like probably then my PI doesn't

00:16:12,410 --> 00:16:15,709
see that file so they can know these are

00:16:14,240 --> 00:16:16,850
kind of trade offs you need to think

00:16:15,709 --> 00:16:19,129
about these carefully because it's kind

00:16:16,850 --> 00:16:23,420
of hard to change these like like six

00:16:19,129 --> 00:16:27,050
months into the project and if you have

00:16:23,420 --> 00:16:29,059
really lots of code then my advice is -

00:16:27,050 --> 00:16:31,639
does follow import option which kind of

00:16:29,059 --> 00:16:33,889
decides like what should my PI do with

00:16:31,639 --> 00:16:37,249
files that are imported from the files

00:16:33,889 --> 00:16:39,350
you pass it on the command line but that

00:16:37,249 --> 00:16:40,759
I learned that I imported from those

00:16:39,350 --> 00:16:41,029
files but I'll include it in the command

00:16:40,759 --> 00:16:44,120
line

00:16:41,029 --> 00:16:45,709
so skip means just like I can only type

00:16:44,120 --> 00:16:47,930
check these files and the command line

00:16:45,709 --> 00:16:49,850
there's also a silent option which kind

00:16:47,930 --> 00:16:51,199
of process those files but doesn't

00:16:49,850 --> 00:16:52,550
generate errors these can be useful

00:16:51,199 --> 00:16:54,500
because otherwise you might get like

00:16:52,550 --> 00:16:55,819
large number of errors from my PI on

00:16:54,500 --> 00:16:59,509
your first time so this is like good

00:16:55,819 --> 00:17:02,059
thing to try okay next I'm going to

00:16:59,509 --> 00:17:04,909
something that's kind of directly

00:17:02,059 --> 00:17:06,709
related the previous topic but you'll

00:17:04,909 --> 00:17:09,559
hit it pretty quickly when you're like

00:17:06,709 --> 00:17:12,439
annotating any real code so my PI uses

00:17:09,559 --> 00:17:14,630
stub files to describe types in library

00:17:12,439 --> 00:17:16,699
modules they're stubs for the standard

00:17:14,630 --> 00:17:17,260
library and a bunch of third-party

00:17:16,699 --> 00:17:20,449
packages

00:17:17,260 --> 00:17:22,459
my pie ships with stop so if you only

00:17:20,449 --> 00:17:25,250
use the standard library then some like

00:17:22,459 --> 00:17:28,459
common said party modules it might just

00:17:25,250 --> 00:17:29,600
work but it seems my back on planes if

00:17:28,459 --> 00:17:30,950
you can't find stuff because then you

00:17:29,600 --> 00:17:32,929
can't type check your code and it

00:17:30,950 --> 00:17:36,230
doesn't want to go silently kind of

00:17:32,929 --> 00:17:37,940
start ignoring stuff you can recognize

00:17:36,230 --> 00:17:41,620
stops by the dot pyi

00:17:37,940 --> 00:17:44,960
external negative this is like standard

00:17:41,620 --> 00:17:47,750
so what if you are using a third-party

00:17:44,960 --> 00:17:49,160
library and it's missing a stop bundle

00:17:47,750 --> 00:17:51,350
with my PI

00:17:49,160 --> 00:17:52,760
thing is you can look for like an

00:17:51,350 --> 00:17:55,760
external maybe somebody has contributed

00:17:52,760 --> 00:17:58,010
I start being like Google or this or

00:17:55,760 --> 00:18:01,520
that in a recent pep-pep five six one

00:17:58,010 --> 00:18:03,500
which lets you install stops using paper

00:18:01,520 --> 00:18:05,600
install which is nice but unfortunately

00:18:03,500 --> 00:18:07,880
it's kind of new thing so there aren't

00:18:05,600 --> 00:18:10,040
that many stub packages available but if

00:18:07,880 --> 00:18:12,880
you write new stubs you should come to

00:18:10,040 --> 00:18:15,170
the country pretty it's the community

00:18:12,880 --> 00:18:17,810
next thing is you can just use a type

00:18:15,170 --> 00:18:20,420
ignore a comment which means that don't

00:18:17,810 --> 00:18:22,700
report any errors on this line so you

00:18:20,420 --> 00:18:24,890
guys okay we don't ship with sequel

00:18:22,700 --> 00:18:27,170
alchemy stops but it's in a big probably

00:18:24,890 --> 00:18:29,000
just like type ignore the problem it

00:18:27,170 --> 00:18:31,400
makes kind of explicit that it's my

00:18:29,000 --> 00:18:32,600
pecan type check your sigil alchemy but

00:18:31,400 --> 00:18:35,030
I can do a lot of type checking for

00:18:32,600 --> 00:18:36,620
other stuff and maybe you so this is

00:18:35,030 --> 00:18:38,810
like if you don't have a few hours this

00:18:36,620 --> 00:18:40,520
is like a nice an easy way to do it and

00:18:38,810 --> 00:18:42,470
it was for other kinds of like complains

00:18:40,520 --> 00:18:44,480
that you can't figure out just ignore it

00:18:42,470 --> 00:18:46,610
initially an England commits back to it

00:18:44,480 --> 00:18:49,250
later and see if you can fix it in a

00:18:46,610 --> 00:18:50,990
kind of more a better way

00:18:49,250 --> 00:18:52,430
what if you have like a lot of like

00:18:50,990 --> 00:18:55,060
fifteen parts to see clog me in that

00:18:52,430 --> 00:18:57,680
case you can create a my PI dot ini

00:18:55,060 --> 00:19:00,800
configuration file and you can just type

00:18:57,680 --> 00:19:03,530
sail my white ignore all missing imports

00:19:00,800 --> 00:19:06,860
suckering these packages like maybe

00:19:03,530 --> 00:19:08,630
better seal alchemy and then there's go

00:19:06,860 --> 00:19:10,400
away but if you import from something

00:19:08,630 --> 00:19:12,080
else then you'll still get an error so

00:19:10,400 --> 00:19:13,790
it's kind of like you can't like

00:19:12,080 --> 00:19:15,200
accidentally like paper over like a

00:19:13,790 --> 00:19:18,130
large number of errors only those things

00:19:15,200 --> 00:19:20,810
that you don't want my whites report

00:19:18,130 --> 00:19:22,610
okay now that you have a clean run from

00:19:20,810 --> 00:19:25,340
my PI then you have way of running my

00:19:22,610 --> 00:19:26,930
pie which against some subdivision card

00:19:25,340 --> 00:19:29,450
pays or all of your card place depending

00:19:26,930 --> 00:19:31,220
on the size you should write commit that

00:19:29,450 --> 00:19:33,260
script into your repo and have everybody

00:19:31,220 --> 00:19:35,870
in your team use that to run my apply

00:19:33,260 --> 00:19:39,520
because you want consistent results this

00:19:35,870 --> 00:19:42,230
is again should be pretty clear but it's

00:19:39,520 --> 00:19:43,460
important dates remember and once you

00:19:42,230 --> 00:19:47,090
have the script then you can run the

00:19:43,460 --> 00:19:48,740
script in CI to make sure that nobody

00:19:47,090 --> 00:19:50,390
will introduce additional errors

00:19:48,740 --> 00:19:55,870
accidentally at least you will catch

00:19:50,390 --> 00:19:58,940
them pretty soon the fourth step is

00:19:55,870 --> 00:20:01,520
going back to their like the modules a

00:19:58,940 --> 00:20:02,659
and B you should add annotations to

00:20:01,520 --> 00:20:04,489
commonly

00:20:02,659 --> 00:20:06,349
library modules because otherwise like

00:20:04,489 --> 00:20:06,830
these this module are used all over the

00:20:06,349 --> 00:20:08,779
place

00:20:06,830 --> 00:20:10,759
and each time you call something in that

00:20:08,779 --> 00:20:12,679
module my PI thinks it's I don't know

00:20:10,759 --> 00:20:15,470
what is it's any and it can't be much

00:20:12,679 --> 00:20:16,940
type checking with the result so pretty

00:20:15,470 --> 00:20:19,609
early on you should annotate a bunch of

00:20:16,940 --> 00:20:21,649
library functions and classes

00:20:19,609 --> 00:20:23,419
this will create Li increase the

00:20:21,649 --> 00:20:27,259
coverage and actually my part will catch

00:20:23,419 --> 00:20:29,119
more errors pretty soon and then you

00:20:27,259 --> 00:20:31,940
should kind of talk to your team and

00:20:29,119 --> 00:20:34,580
kind of establish guidelines it's like

00:20:31,940 --> 00:20:36,919
if you edit a file you should add

00:20:34,580 --> 00:20:39,019
functions to the modified foundation so

00:20:36,919 --> 00:20:42,109
the modified functions if you write any

00:20:39,019 --> 00:20:44,389
new functions you should annotate them

00:20:42,109 --> 00:20:47,059
so this way you'll gradually get more

00:20:44,389 --> 00:20:48,049
and more annotations in your code and

00:20:47,059 --> 00:20:49,789
this because when you're writing code

00:20:48,049 --> 00:20:50,929
you should understand what it's going so

00:20:49,789 --> 00:20:52,220
if writing the annotations should be

00:20:50,929 --> 00:20:54,049
pretty straightforward

00:20:52,220 --> 00:20:55,580
so it actually you'd have to write a dot

00:20:54,049 --> 00:20:57,409
string anyway so this actually saves

00:20:55,580 --> 00:20:59,840
time because annotations are more

00:20:57,409 --> 00:21:02,720
compact so you save some time and you

00:20:59,840 --> 00:21:07,489
get like more type checking coverage at

00:21:02,720 --> 00:21:09,739
the same time so it's a win-win and then

00:21:07,489 --> 00:21:11,840
at some point you should probably look

00:21:09,739 --> 00:21:13,820
at their legacy code and try to start

00:21:11,840 --> 00:21:16,580
analyzing that because it will kind of

00:21:13,820 --> 00:21:20,059
leak some like imprecise types to the

00:21:16,580 --> 00:21:21,919
other parts of your code base so you can

00:21:20,059 --> 00:21:24,109
do it manually it works pretty well it's

00:21:21,919 --> 00:21:26,929
kind of boring but it's not that much

00:21:24,109 --> 00:21:29,450
work or those tools like monkey type and

00:21:26,929 --> 00:21:32,029
plight annotate which led you collect

00:21:29,450 --> 00:21:34,460
types at runtime so if for example I

00:21:32,029 --> 00:21:37,009
can't run tests they can collect like

00:21:34,460 --> 00:21:38,809
the actual runtime type types and then

00:21:37,009 --> 00:21:41,599
they can generate draft annotations

00:21:38,809 --> 00:21:43,489
check out they aren't ten percent

00:21:41,599 --> 00:21:45,769
correct but you can often like you just

00:21:43,489 --> 00:21:47,389
slightly manually tweak it then you can

00:21:45,769 --> 00:21:50,239
actually get like a lot of care

00:21:47,389 --> 00:21:51,739
annotated without too much effort but

00:21:50,239 --> 00:21:55,369
again like you seem to give it a try

00:21:51,739 --> 00:21:58,489
they may work but sometimes they have

00:21:55,369 --> 00:21:59,929
some properties okay

00:21:58,489 --> 00:22:01,789
now you kind of you've been adding a

00:21:59,929 --> 00:22:04,129
bunch of files here build maybe have a

00:22:01,789 --> 00:22:06,710
like this means like my PI runs might be

00:22:04,129 --> 00:22:09,320
a bit slower because it's doing more my

00:22:06,710 --> 00:22:12,139
work sites useful but it obviously like

00:22:09,320 --> 00:22:15,229
faster is better say repeal of things

00:22:12,139 --> 00:22:16,429
pretty recent my PI features that can

00:22:15,229 --> 00:22:18,860
speed up my parents by

00:22:16,429 --> 00:22:20,840
maybe 10x or even more there's my buddy

00:22:18,860 --> 00:22:22,789
Minh which keeps like a program steady

00:22:20,840 --> 00:22:23,119
memory so that like you the incremental

00:22:22,789 --> 00:22:24,950
bills

00:22:23,119 --> 00:22:27,409
it'll only have to like reprocess the

00:22:24,950 --> 00:22:29,299
modified files that's a really nice

00:22:27,409 --> 00:22:32,419
thing I go something like remarriage

00:22:29,299 --> 00:22:34,700
caching to basically download like a

00:22:32,419 --> 00:22:37,519
recent snapshot of the mypie internal

00:22:34,700 --> 00:22:39,470
state so that you can then only has to

00:22:37,519 --> 00:22:41,570
do an incremental builds on top of the

00:22:39,470 --> 00:22:43,220
most recent thing from Adelstein instead

00:22:41,570 --> 00:22:45,679
of like processing the inside code base

00:22:43,220 --> 00:22:49,570
every time you say switch to another

00:22:45,679 --> 00:22:52,309
branch so this is a summary of the steps

00:22:49,570 --> 00:22:53,899
we should kind of get you started then

00:22:52,309 --> 00:22:55,759
obviously is more advanced topics in you

00:22:53,899 --> 00:22:57,169
used to create a Docs after it and see

00:22:55,759 --> 00:23:00,409
whether there's like other stuff you

00:22:57,169 --> 00:23:02,929
want to experiment with and finally I'll

00:23:00,409 --> 00:23:06,619
talk about a few mistakes beginners

00:23:02,929 --> 00:23:10,789
might make and I want to kind of avoid

00:23:06,619 --> 00:23:13,009
these the first mistake is like I'll

00:23:10,789 --> 00:23:15,139
just start with this single file which

00:23:13,009 --> 00:23:18,440
I'm working on and I only did it with my

00:23:15,139 --> 00:23:20,090
pie I used my PI type check it and then

00:23:18,440 --> 00:23:21,950
I get like good idea of how my publish

00:23:20,090 --> 00:23:23,990
this is not true because I said that you

00:23:21,950 --> 00:23:25,399
need to annotate like the library

00:23:23,990 --> 00:23:27,590
modules and other modules to your code

00:23:25,399 --> 00:23:28,789
interacts with otherwise it looks like

00:23:27,590 --> 00:23:30,559
it might look like my pie doesn't check

00:23:28,789 --> 00:23:32,990
anything because you haven't understated

00:23:30,559 --> 00:23:36,019
that much so this is not a good way to

00:23:32,990 --> 00:23:37,549
get started another mistake might be

00:23:36,019 --> 00:23:40,460
like oh we just like write annotations

00:23:37,549 --> 00:23:42,499
only code that we write so in like 12

00:23:40,460 --> 00:23:44,629
months we have like a lot of our code

00:23:42,499 --> 00:23:46,519
annotated again like this means all the

00:23:44,629 --> 00:23:47,840
legacy code you probably have a lot of

00:23:46,519 --> 00:23:50,119
code that doesn't get changed in 12

00:23:47,840 --> 00:23:52,100
months and that will never get annotated

00:23:50,119 --> 00:23:54,470
if you you should like an today the

00:23:52,100 --> 00:23:58,490
legacy code as well outside the normal

00:23:54,470 --> 00:24:00,230
kind of cutting work flow and then the

00:23:58,490 --> 00:24:01,879
mistake 3 is like oh you have this

00:24:00,230 --> 00:24:04,639
million line cycle let's type SEC

00:24:01,879 --> 00:24:08,269
everything and then you might get like I

00:24:04,639 --> 00:24:11,269
don't know 500,000 errors that I'm not

00:24:08,269 --> 00:24:13,490
on gave up it's too much work yeah you

00:24:11,269 --> 00:24:14,570
should start with like a little like

00:24:13,490 --> 00:24:15,740
maybe it's when they saw the light so

00:24:14,570 --> 00:24:17,990
good and then gradually increase it so

00:24:15,740 --> 00:24:19,940
there's no like Big Bang sort of

00:24:17,990 --> 00:24:23,779
integration which is pretty demoralizing

00:24:19,940 --> 00:24:27,289
and if things go wrong then you wasted a

00:24:23,779 --> 00:24:30,539
lot of time so I think it starts simple

00:24:27,289 --> 00:24:33,029
okay and quickly I'm going to talk about

00:24:30,539 --> 00:24:36,479
our experiences of using my PI at

00:24:33,029 --> 00:24:39,239
Dropbox so we be using my PI since

00:24:36,479 --> 00:24:42,599
pretty early days in my pipe yes

00:24:39,239 --> 00:24:46,200
since 2016 we couldn't have our three

00:24:42,599 --> 00:24:49,919
million and edit lines and pretty much

00:24:46,200 --> 00:24:52,139
all teams using Python here's my patrol

00:24:49,919 --> 00:24:54,269
box and this can be like organic growth

00:24:52,139 --> 00:24:55,769
people just like see it's useful for

00:24:54,269 --> 00:24:58,200
them so they start using it have you

00:24:55,769 --> 00:24:59,669
kind of improved my PI on the way so

00:24:58,200 --> 00:25:03,659
it's getting like basically more teams

00:24:59,669 --> 00:25:05,489
on board and currently we I use my PI

00:25:03,659 --> 00:25:07,200
daemon which I'm briefly mentioned and

00:25:05,489 --> 00:25:09,509
we get like incremental grants we could

00:25:07,200 --> 00:25:11,129
like telemetry from users typical

00:25:09,509 --> 00:25:12,659
incremental run takes about two seconds

00:25:11,129 --> 00:25:14,999
even if you're like millions of lines of

00:25:12,659 --> 00:25:16,619
cut so you can it scales pretty well it

00:25:14,999 --> 00:25:19,080
was much better than it was like six

00:25:16,619 --> 00:25:20,070
months ago so this is really improved we

00:25:19,080 --> 00:25:21,539
also used a remote cache that I

00:25:20,070 --> 00:25:22,889
mentioned so that like it's also like

00:25:21,539 --> 00:25:25,590
when you start running over the first

00:25:22,889 --> 00:25:27,690
time it's also much faster and then we

00:25:25,590 --> 00:25:29,399
have a PI term my PI plugin which is

00:25:27,690 --> 00:25:30,989
open source you should look it up if use

00:25:29,399 --> 00:25:33,509
by term it's really a kind of makes it

00:25:30,989 --> 00:25:35,249
easy to run my PI from PyCharm and can't

00:25:33,509 --> 00:25:37,249
jump through the error it's really kind

00:25:35,249 --> 00:25:40,950
of simplifies the water is really smooth

00:25:37,249 --> 00:25:42,420
so that's all I heard thank you

00:25:40,950 --> 00:25:43,970
everybody

00:25:42,420 --> 00:25:48,990
[Applause]

00:25:43,970 --> 00:25:51,280
[Music]

00:25:48,990 --> 00:25:54,600
Thank You Yuka if you have a question

00:25:51,280 --> 00:25:54,600
please can you raise your hand

00:25:57,750 --> 00:26:01,720
thank you great great talk my question

00:26:00,310 --> 00:26:03,700
is about stub files

00:26:01,720 --> 00:26:06,790
supposing I've got a bunch of C++ code

00:26:03,700 --> 00:26:08,560
it's exposed to Python do you know of

00:26:06,790 --> 00:26:12,820
any way of being able to generate those

00:26:08,560 --> 00:26:15,550
stub files from the C++ binary my boy

00:26:12,820 --> 00:26:17,320
sleeps with a tool called stop Jen and

00:26:15,550 --> 00:26:20,320
it can do some like runtime

00:26:17,320 --> 00:26:22,090
introspection off C extension modules

00:26:20,320 --> 00:26:25,720
and it'll try to generate some draft

00:26:22,090 --> 00:26:27,880
files so you can give it a try the thing

00:26:25,720 --> 00:26:29,530
is it's kind of impossible to do that

00:26:27,880 --> 00:26:32,470
like how to present reliably so

00:26:29,530 --> 00:26:35,890
basically if it's simple enough in my

00:26:32,470 --> 00:26:43,420
work if not then it doesn't work so

00:26:35,890 --> 00:26:47,190
basically it's right out just a quick

00:26:43,420 --> 00:26:51,190
question so there's a support Python 2.7

00:26:47,190 --> 00:26:52,930
Python 2 7 is fully supported as a type

00:26:51,190 --> 00:26:55,660
checking target so you can use the type

00:26:52,930 --> 00:26:58,690
comment syntax you just you're on my PI

00:26:55,660 --> 00:27:00,430
- that's PI - that's likely what we use

00:26:58,690 --> 00:27:04,780
at Dropbox I'd really like production

00:27:00,430 --> 00:27:06,460
quality as much as spies and 3 but you

00:27:04,780 --> 00:27:08,110
can't run my PI using Python C but

00:27:06,460 --> 00:27:13,720
that's no probably completely install my

00:27:08,110 --> 00:27:17,650
Python 3 will greeter be angry if Python

00:27:13,720 --> 00:27:20,200
becomes statically typed language Gouda

00:27:17,650 --> 00:27:23,890
is certainly behind and you're actually

00:27:20,200 --> 00:27:26,410
working on my PI so yeah it's not like

00:27:23,890 --> 00:27:27,340
Python is not coming becoming a sale

00:27:26,410 --> 00:27:30,490
exact language this isn't totally

00:27:27,340 --> 00:27:32,500
optional so it's for basically mostly

00:27:30,490 --> 00:27:34,870
for large projects and large code bases

00:27:32,500 --> 00:27:37,780
it's really helpful so this is it once

00:27:34,870 --> 00:27:40,090
all in your in the toolbox I use it if

00:27:37,780 --> 00:27:41,950
you think it's useful if you only have

00:27:40,090 --> 00:27:44,890
like small projects that you work on

00:27:41,950 --> 00:27:46,510
then probably it doesn't make sense to

00:27:44,890 --> 00:27:47,590
learn it it might still be useful but it

00:27:46,510 --> 00:27:50,110
might not be worth the kind of

00:27:47,590 --> 00:27:54,040
investment in kind of learning this

00:27:50,110 --> 00:27:57,010
stuff is there some fundamental problem

00:27:54,040 --> 00:27:59,050
with canary treating type sets for

00:27:57,010 --> 00:28:00,800
psycho PG because it's like a very

00:27:59,050 --> 00:28:03,800
popular project and it's

00:28:00,800 --> 00:28:07,400
you know Chavez's cannot import no stuff

00:28:03,800 --> 00:28:09,080
from psycho pretty to do you know I even

00:28:07,400 --> 00:28:11,840
not sure about this particular library

00:28:09,080 --> 00:28:14,120
it might be just nobody has kind of

00:28:11,840 --> 00:28:15,740
contributed them because if it sometimes

00:28:14,120 --> 00:28:17,420
it is so simple the right that stops

00:28:15,740 --> 00:28:18,380
yourself if everybody writes there

00:28:17,420 --> 00:28:21,170
instead of Stubbs

00:28:18,380 --> 00:28:24,470
and then nobody contributes them back so

00:28:21,170 --> 00:28:27,380
I recommend trying it out there's a

00:28:24,470 --> 00:28:28,970
subject utilities ship with my PI it's

00:28:27,380 --> 00:28:32,270
not kind of well-documented but it's

00:28:28,970 --> 00:28:34,309
there so I've been trying it out often

00:28:32,270 --> 00:28:35,720
it's kind of straightforward a little

00:28:34,309 --> 00:28:36,770
really big library like Django then

00:28:35,720 --> 00:28:38,630
that's actually like I wouldn't

00:28:36,770 --> 00:28:42,679
recommend starting out with that because

00:28:38,630 --> 00:28:45,830
it can take a lot of work do you have

00:28:42,679 --> 00:28:48,559
any metrics of the you know what kind of

00:28:45,830 --> 00:28:52,000
the quality improvements you get or how

00:28:48,559 --> 00:28:54,800
much to speed up the current process

00:28:52,000 --> 00:28:56,900
this is something it's really hard to

00:28:54,800 --> 00:28:59,390
have a like hard matrix but from Dropbox

00:28:56,900 --> 00:29:02,540
like me periodically somebody said like

00:28:59,390 --> 00:29:04,250
oh we had an outage or some Cara like

00:29:02,540 --> 00:29:06,290
production issue that would have been

00:29:04,250 --> 00:29:09,380
prevented if the code would have been

00:29:06,290 --> 00:29:11,090
inside annotated so it definitely but

00:29:09,380 --> 00:29:14,570
things like if you print something then

00:29:11,090 --> 00:29:17,809
that's how do you it no because it

00:29:14,570 --> 00:29:19,429
didn't happen but basically people I get

00:29:17,809 --> 00:29:20,929
a feedback from users and they'll really

00:29:19,429 --> 00:29:23,050
happier they say likely to actually I'd

00:29:20,929 --> 00:29:26,300
say so it's like a subjective thing but

00:29:23,050 --> 00:29:28,190
it won't work in a large code base we

00:29:26,300 --> 00:29:31,070
have pretty convinced that it's mostly a

00:29:28,190 --> 00:29:32,540
win once you get like the initial some

00:29:31,070 --> 00:29:34,550
level of type checking coverage then it

00:29:32,540 --> 00:29:36,110
gets really helpful but that initially

00:29:34,550 --> 00:29:38,600
you have to like do a bit of investment

00:29:36,110 --> 00:29:42,260
if you just added one single file it's

00:29:38,600 --> 00:29:46,750
not that helpful thank you we have time

00:29:42,260 --> 00:29:50,150
for a last good question how do you

00:29:46,750 --> 00:29:52,220
imagine some library

00:29:50,150 --> 00:29:55,010
one who supports a multiple other

00:29:52,220 --> 00:29:58,130
dependent dependencies and and one of

00:29:55,010 --> 00:30:00,410
them we expect once saw something to

00:29:58,130 --> 00:30:02,390
some type and the other one and updated

00:30:00,410 --> 00:30:04,460
one we expecting other side how did you

00:30:02,390 --> 00:30:06,560
deal such as you think sorry can you

00:30:04,460 --> 00:30:07,910
repeat a question I didn't imagine that

00:30:06,560 --> 00:30:10,400
the library depends on some other

00:30:07,910 --> 00:30:12,830
library from one version in that other

00:30:10,400 --> 00:30:15,140
library the type changed how do we deal

00:30:12,830 --> 00:30:16,550
with such things in bother so if you

00:30:15,140 --> 00:30:18,320
have a third-party library and the

00:30:16,550 --> 00:30:20,600
signatures changed typcially can only

00:30:18,320 --> 00:30:23,690
have like one person at a time but we

00:30:20,600 --> 00:30:25,160
support like peep installable stop

00:30:23,690 --> 00:30:26,800
packages so you can have like multiple

00:30:25,160 --> 00:30:28,640
versions of the stop package

00:30:26,800 --> 00:30:31,190
corresponding to different versions of

00:30:28,640 --> 00:30:33,110
the library and then you just like pin

00:30:31,190 --> 00:30:36,230
the correct version of the stop package

00:30:33,110 --> 00:30:38,360
and you get a type checking correct type

00:30:36,230 --> 00:30:49,160
checking so that's pretty the best

00:30:38,360 --> 00:30:52,630
option Thanks okay fantastic talk Thank

00:30:49,160 --> 00:30:52,630

YouTube URL: https://www.youtube.com/watch?v=18nZ5xMeGno


