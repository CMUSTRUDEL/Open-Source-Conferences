Title: Antonia Mey - How is python used in biomolecular sciences?
Publication date: 2018-08-22
Playlist: EuroPython 2018
Description: 
	How is python used in biomolecular sciences?
[EuroPython 2018 - Talk - 2018-07-25 - Fintry [PyData]]
[Edinburgh, UK]

By Antonia Mey

In the last ten years scientists working on computational problems involving proteins and other small molecules have largely moved to using python when developing simulation and data analysis tools allowing for a fast prototyping and development of new ideas. One big challenge is dealing with the compatibility of different tools and using these to create very complex adaptive, yet robust workflows in order to be able to guide cutting edge experiments e.g. predicting how well a small drug like molecule can bind to a protein that could serve as a target for a new drug. The talk will give a gentle introduction to what kind of python related tools are available in the field  of computational molecular biology, how they are used, and what kind of complex workflows scientist have to solve.
I will then introduce BioSimSpace an open source python library and flagship project of the CCPBioSim consortium in the UK, which provides a common API to avoid having to learn many individual tools facing compatibility and dependency challenges allowing scientists to focus on the scientific question at hand and not solving programming challenges. BioSimSpace allows fast and interoperable building of workflow components (nodes) for bimolecular problems, which can easily be used on a variety of different computational resources. In particular I will introduce the cloud facilities available for fast prototyping using a Jupyter notebook interface.



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2018.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:00,170 --> 00:00:02,870
[Applause]

00:00:04,759 --> 00:00:10,320
good afternoon everyone I hope you're

00:00:07,230 --> 00:00:13,320
all digesting your lunch well and are

00:00:10,320 --> 00:00:15,809
ready to hear a bit about how we use

00:00:13,320 --> 00:00:18,630
Python and the biomolecular scientists

00:00:15,809 --> 00:00:20,730
so I personally am a postdoc at the

00:00:18,630 --> 00:00:22,560
University of Edinburgh in the chemistry

00:00:20,730 --> 00:00:24,990
department and I work together with

00:00:22,560 --> 00:00:27,090
Nesta hedges and Christopher woods based

00:00:24,990 --> 00:00:29,189
at the University of Bristol who are

00:00:27,090 --> 00:00:33,090
both research software engineers and

00:00:29,189 --> 00:00:34,829
we're working on a Python integrated

00:00:33,090 --> 00:00:37,230
code for biomolecular sciences which I'm

00:00:34,829 --> 00:00:40,260
going to talk about in more detail in a

00:00:37,230 --> 00:00:41,489
second so I'm going to go down with the

00:00:40,260 --> 00:00:43,430
acknowledgments straight away so we've

00:00:41,489 --> 00:00:44,640
got funding from Asia and Oracle and

00:00:43,430 --> 00:00:48,420
EPSRC

00:00:44,640 --> 00:00:51,000
and with that I shall actually get

00:00:48,420 --> 00:00:53,789
started so what is bio computational

00:00:51,000 --> 00:00:55,829
something so by training I'm a physicist

00:00:53,789 --> 00:00:59,190
I don't really know much about this

00:00:55,829 --> 00:01:03,390
apparently this is a protein or at least

00:00:59,190 --> 00:01:06,150
a cartoon representation and biologists

00:01:03,390 --> 00:01:07,770
or biochemists they will go and run

00:01:06,150 --> 00:01:11,850
experiments where they crystallize this

00:01:07,770 --> 00:01:15,270
and then they do an x-ray experiment and

00:01:11,850 --> 00:01:16,710
get x y&z coordinates for all the atoms

00:01:15,270 --> 00:01:19,110
of this protein so that's why we have

00:01:16,710 --> 00:01:21,659
this representation and these things

00:01:19,110 --> 00:01:27,990
aren't very big so that's sort of 42

00:01:21,659 --> 00:01:30,450
angstrom diameter and what are the

00:01:27,990 --> 00:01:33,570
questions you then ask so how does this

00:01:30,450 --> 00:01:36,600
particular smaller molecule actually

00:01:33,570 --> 00:01:37,950
bind to my protein for example so while

00:01:36,600 --> 00:01:40,590
I'm actually showing here is a protein

00:01:37,950 --> 00:01:42,960
called cyclin a and this is a molecule

00:01:40,590 --> 00:01:45,899
called cyclosporine and it's an

00:01:42,960 --> 00:01:49,890
inhibitor and a drug you get if you have

00:01:45,899 --> 00:01:53,460
a liver transplant or any kind of organ

00:01:49,890 --> 00:01:56,670
transplant so this kind of leads to what

00:01:53,460 --> 00:02:01,350
other sort of common uses of bio

00:01:56,670 --> 00:02:03,659
molecular simulations we run them

00:02:01,350 --> 00:02:05,909
because experiments fail to tell the

00:02:03,659 --> 00:02:08,849
whole story and ideally we want to

00:02:05,909 --> 00:02:10,379
predict experiments and we want to have

00:02:08,849 --> 00:02:12,760
this of cross validation of what is

00:02:10,379 --> 00:02:17,120
actually going on in a molecular level

00:02:12,760 --> 00:02:20,209
so a typical question could be how well

00:02:17,120 --> 00:02:21,950
do I don't know 10,000 of these small

00:02:20,209 --> 00:02:24,709
molecules inhibit this particular

00:02:21,950 --> 00:02:26,180
protein so that I don't have to make

00:02:24,709 --> 00:02:31,819
them all in the lab I just have to make

00:02:26,180 --> 00:02:35,049
the five good ones in the lab hmm MD its

00:02:31,819 --> 00:02:35,049
molecular down right so I'll get to that

00:02:35,139 --> 00:02:39,819
will I'll explain what MD actually means

00:02:44,200 --> 00:02:51,409
yeah well we'll get there then we'll get

00:02:46,970 --> 00:02:53,810
there I'll actually explain this so in

00:02:51,409 --> 00:02:56,000
fact what we do is we run simulations

00:02:53,810 --> 00:02:58,730
these molecular dynamic simulations

00:02:56,000 --> 00:03:00,769
where we take our cartoon structure and

00:02:58,730 --> 00:03:03,260
see it wiggle about it essentially and

00:03:00,769 --> 00:03:06,590
then we can ask things how do proteins

00:03:03,260 --> 00:03:08,569
fold oh we ask things like how do

00:03:06,590 --> 00:03:10,609
proteins actually interact with each

00:03:08,569 --> 00:03:12,019
other because in our body we have so

00:03:10,609 --> 00:03:14,829
many proteins and all they do is

00:03:12,019 --> 00:03:16,909
interact with each other all the time

00:03:14,829 --> 00:03:19,389
but we're interested what actually

00:03:16,909 --> 00:03:22,340
happens on the molecular level and

00:03:19,389 --> 00:03:24,739
here's a sort of an overview of time

00:03:22,340 --> 00:03:29,000
skills in biology this is a various of

00:03:24,739 --> 00:03:30,919
busy slide and you have various

00:03:29,000 --> 00:03:33,229
experimental techniques to probe biology

00:03:30,919 --> 00:03:36,949
and you have various computational

00:03:33,229 --> 00:03:39,260
techniques to probe allergy so in order

00:03:36,949 --> 00:03:40,939
to know something about structures as I

00:03:39,260 --> 00:03:42,470
already said you do something like x-ray

00:03:40,939 --> 00:03:46,189
crystallography where you actually

00:03:42,470 --> 00:03:49,099
freeze your protein and then as you

00:03:46,189 --> 00:03:51,709
would a lot of GP practice or something

00:03:49,099 --> 00:03:53,329
take an x-ray of your protein and get

00:03:51,709 --> 00:03:54,620
some structural information you might

00:03:53,329 --> 00:03:56,120
also be interested in dynamics

00:03:54,620 --> 00:03:58,849
information which bits of the protein

00:03:56,120 --> 00:04:00,849
move in some way this is where nuclear

00:03:58,849 --> 00:04:03,229
magnetic resonance comes in and

00:04:00,849 --> 00:04:07,099
different types of experiments can probe

00:04:03,229 --> 00:04:10,489
different timescales so in a protein you

00:04:07,099 --> 00:04:14,389
have certain vibrations so how fast do

00:04:10,489 --> 00:04:16,609
Atem bonds vibrate sidechain rotation so

00:04:14,389 --> 00:04:18,440
proteins are made up of amino acids

00:04:16,609 --> 00:04:22,340
these are the building blocks and how do

00:04:18,440 --> 00:04:25,070
they move about then ligand binding

00:04:22,340 --> 00:04:26,510
happens at timescales between sort of

00:04:25,070 --> 00:04:30,860
ten to the minus seven

00:04:26,510 --> 00:04:33,590
two seconds how does catalysis happen so

00:04:30,860 --> 00:04:36,320
proteins are often enzymes so they speed

00:04:33,590 --> 00:04:38,630
up a reaction in your body and these are

00:04:36,320 --> 00:04:40,580
things you can study with experiments

00:04:38,630 --> 00:04:44,060
but you can also study them with these

00:04:40,580 --> 00:04:45,710
molecular dynamic simulations or in some

00:04:44,060 --> 00:04:47,810
cases you might have to resolve two

00:04:45,710 --> 00:04:49,910
quantum mechanical descriptions of the

00:04:47,810 --> 00:04:53,960
protein but this is not what I'm talking

00:04:49,910 --> 00:04:57,770
about right now so molecular Domenic's

00:04:53,960 --> 00:05:00,200
can probe timescales from 10 to the

00:04:57,770 --> 00:05:02,510
minus 12 seconds to about 10 to the

00:05:00,200 --> 00:05:07,310
minus 3 seconds and pushing it sort of

00:05:02,510 --> 00:05:09,590
to a second but that's very uncommon and

00:05:07,310 --> 00:05:10,970
then you have vast zoo of various

00:05:09,590 --> 00:05:13,160
experimental techniques that help you

00:05:10,970 --> 00:05:14,810
with a structure determination some

00:05:13,160 --> 00:05:20,360
dynamics and then you can compare these

00:05:14,810 --> 00:05:21,980
two so how do we actually do these MD

00:05:20,360 --> 00:05:25,940
simulations or why do we want to do them

00:05:21,980 --> 00:05:27,680
so a typical 200 nanosecond protein

00:05:25,940 --> 00:05:30,260
dynamics trajectory generated and a

00:05:27,680 --> 00:05:33,050
computer looks like this and in

00:05:30,260 --> 00:05:35,120
particular we just focus on these four

00:05:33,050 --> 00:05:38,650
amino acid side chains which I've

00:05:35,120 --> 00:05:43,400
highlighted here and they wiggle about

00:05:38,650 --> 00:05:46,640
you can now go and look at a particular

00:05:43,400 --> 00:05:49,610
time trace of say this dihedral angle

00:05:46,640 --> 00:05:51,740
here of this phenyl alanine ring and

00:05:49,610 --> 00:05:55,910
then you can do some statistics and data

00:05:51,740 --> 00:05:57,650
analysis and it's all great so what

00:05:55,910 --> 00:06:00,440
other sort of ingredients to actually

00:05:57,650 --> 00:06:01,850
run this kind of simulation which is the

00:06:00,440 --> 00:06:04,760
molecular dynamics simulation is

00:06:01,850 --> 00:06:07,100
essentially you take a box into this box

00:06:04,760 --> 00:06:10,490
you put a protein and some water

00:06:07,100 --> 00:06:14,030
molecules and then you need to find a

00:06:10,490 --> 00:06:16,370
way of describing your protein so it's

00:06:14,030 --> 00:06:18,290
out of coordinates the protein has I

00:06:16,370 --> 00:06:19,910
don't know four thousand atoms or

00:06:18,290 --> 00:06:24,950
something and they interact with each

00:06:19,910 --> 00:06:27,680
other so you have angles you have bonds

00:06:24,950 --> 00:06:31,480
you have dihedral angles and you have

00:06:27,680 --> 00:06:35,150
electrostatic in columbic interactions

00:06:31,480 --> 00:06:36,530
so this is kind of what they look like

00:06:35,150 --> 00:06:38,420
and you call them force peels and

00:06:36,530 --> 00:06:39,600
different types of atoms have different

00:06:38,420 --> 00:06:42,750
parameters it gets very

00:06:39,600 --> 00:06:48,420
applicated but basically you've defined

00:06:42,750 --> 00:06:51,960
your potential your forces between your

00:06:48,420 --> 00:06:56,070
atoms by by this force field and then

00:06:51,960 --> 00:06:59,250
use the forces to integrate your system

00:06:56,070 --> 00:07:00,540
over time by using Newtonian equations

00:06:59,250 --> 00:07:02,220
of motion and using a leapfrog

00:07:00,540 --> 00:07:04,350
integrator or something like this and

00:07:02,220 --> 00:07:06,660
then you run your dynamics and then you

00:07:04,350 --> 00:07:08,340
hope that the ensemble average is equal

00:07:06,660 --> 00:07:10,950
to the time average so you have sub

00:07:08,340 --> 00:07:16,700
stationary observable so you can look at

00:07:10,950 --> 00:07:19,680
the statistics of a dihedral moving or

00:07:16,700 --> 00:07:21,030
side-chain movements or whatever you

00:07:19,680 --> 00:07:23,490
might be interested in how a ligand

00:07:21,030 --> 00:07:28,940
binds to a protein and what the

00:07:23,490 --> 00:07:28,940
interaction energy is and so forth yes

00:07:30,950 --> 00:07:40,590
molecular dynamics yes yes so what is a

00:07:37,320 --> 00:07:44,880
typical workflow it's very complicated

00:07:40,590 --> 00:07:47,100
and the whole field of molecular virus

00:07:44,880 --> 00:07:51,720
has been developed in the academic world

00:07:47,100 --> 00:07:54,390
over the last of thirty years mostly and

00:07:51,720 --> 00:07:57,240
usually what happens you go through a

00:07:54,390 --> 00:07:59,790
bunch of prep steps simulation

00:07:57,240 --> 00:08:03,060
generation or trajectory data generation

00:07:59,790 --> 00:08:05,520
steps and then an analysis step so

00:08:03,060 --> 00:08:07,760
download PDB PDB stands for the protein

00:08:05,520 --> 00:08:11,460
databank which is where all the

00:08:07,760 --> 00:08:12,930
crystallographic data is stored then

00:08:11,460 --> 00:08:15,300
usually that file is not very well

00:08:12,930 --> 00:08:17,310
behaved so you need to do some work to

00:08:15,300 --> 00:08:20,430
it then you need to actually generate

00:08:17,310 --> 00:08:21,780
this box with solvent and so forth then

00:08:20,430 --> 00:08:24,960
you actually run your integration

00:08:21,780 --> 00:08:26,850
dynamics and then you have all these XYZ

00:08:24,960 --> 00:08:28,200
coordinates of your trajectory you need

00:08:26,850 --> 00:08:33,240
to analyze in some kind of meaningful

00:08:28,200 --> 00:08:35,460
way for this purpose an entire zoo of

00:08:33,240 --> 00:08:40,020
different software has been generated

00:08:35,460 --> 00:08:42,320
over the past mostly in academic groups

00:08:40,020 --> 00:08:46,230
[Music]

00:08:42,320 --> 00:08:49,980
so some of them are Python based most of

00:08:46,230 --> 00:08:51,360
them mix of our TCL scripting Perl

00:08:49,980 --> 00:08:56,890
scripting

00:08:51,360 --> 00:08:58,900
these are the simulation toolboxes that

00:08:56,890 --> 00:09:02,050
actually run the molecular dynamics ie

00:08:58,900 --> 00:09:05,020
the Newtonian integration steps which

00:09:02,050 --> 00:09:07,210
are mostly C++ written some of them have

00:09:05,020 --> 00:09:11,080
Python API is some of them don't and

00:09:07,210 --> 00:09:14,050
then you have a Vasu analysis scripts or

00:09:11,080 --> 00:09:15,640
libraries which some of them will the

00:09:14,050 --> 00:09:18,910
more modern ones are written in Python

00:09:15,640 --> 00:09:25,090
most of them are things like TCL probe

00:09:18,910 --> 00:09:29,440
and so then you have the problem of

00:09:25,090 --> 00:09:31,600
various coordinate files and trajectory

00:09:29,440 --> 00:09:33,610
files that forcefield files are

00:09:31,600 --> 00:09:35,680
obviously not standardized across all

00:09:33,610 --> 00:09:38,410
the different tools some tools can read

00:09:35,680 --> 00:09:40,540
more of these file formats than other

00:09:38,410 --> 00:09:42,510
tools and it's not very easy to

00:09:40,540 --> 00:09:45,760
interconvert between these file formats

00:09:42,510 --> 00:09:50,650
so oftentimes people will just write

00:09:45,760 --> 00:09:53,230
their own passes so here's a very simple

00:09:50,650 --> 00:09:56,350
scenario i as a researcher i want to run

00:09:53,230 --> 00:09:58,810
simulations using a particular

00:09:56,350 --> 00:10:03,040
simulation toolbox and that's called

00:09:58,810 --> 00:10:05,500
amber this is their amazing logo and my

00:10:03,040 --> 00:10:08,530
collaborator has given me a coordinate

00:10:05,500 --> 00:10:12,910
file in graham ax coordinates a

00:10:08,530 --> 00:10:15,220
different simulation tool so typically

00:10:12,910 --> 00:10:16,750
what we would do is i visualize the

00:10:15,220 --> 00:10:17,530
coordinates to make sure that they are

00:10:16,750 --> 00:10:20,350
not stupid

00:10:17,530 --> 00:10:23,080
then i would have to convert it to a

00:10:20,350 --> 00:10:25,690
file format that can be understood by

00:10:23,080 --> 00:10:27,760
amber then run the whole set up where i

00:10:25,690 --> 00:10:30,970
generate the box and the water and then

00:10:27,760 --> 00:10:33,430
actually run my diamond dynamics so i

00:10:30,970 --> 00:10:37,560
would use one particular tool called vm

00:10:33,430 --> 00:10:41,380
d in this case to visualize my structure

00:10:37,560 --> 00:10:45,100
then i would save this either using this

00:10:41,380 --> 00:10:46,720
vm d a visualization tool to a different

00:10:45,100 --> 00:10:49,960
file format in this case the protein

00:10:46,720 --> 00:10:52,930
database format or I could use a Python

00:10:49,960 --> 00:10:56,680
tool to do so or I could use five other

00:10:52,930 --> 00:11:00,130
tools that also do this then I can run

00:10:56,680 --> 00:11:02,170
the simple setup which is taken from

00:11:00,130 --> 00:11:04,560
this amber tutorial where you basically

00:11:02,170 --> 00:11:07,079
go from your file

00:11:04,560 --> 00:11:09,300
go through a bunch of essentially bash

00:11:07,079 --> 00:11:11,730
scripts to get to the point where you

00:11:09,300 --> 00:11:17,100
can actually run your dynamics and you

00:11:11,730 --> 00:11:18,959
get your XYZ trajectories out so you can

00:11:17,100 --> 00:11:23,269
you do that with Amber on its own

00:11:18,959 --> 00:11:29,449
you could use a tool that kind of

00:11:23,269 --> 00:11:32,399
substitutes the the the many bash things

00:11:29,449 --> 00:11:35,819
in a one line command line argument type

00:11:32,399 --> 00:11:38,730
thing or you could use an online web app

00:11:35,819 --> 00:11:40,499
that generates a Python script for you

00:11:38,730 --> 00:11:42,990
which you could run to to do the set up

00:11:40,499 --> 00:11:46,110
or so forth there's even more than that

00:11:42,990 --> 00:11:48,029
and then eventually you can run your

00:11:46,110 --> 00:11:51,240
actual simulation which would usually be

00:11:48,029 --> 00:11:54,269
from a bash terminal running a command

00:11:51,240 --> 00:11:57,209
like this so it's all quite complicated

00:11:54,269 --> 00:11:59,009
and particularly if you start out you're

00:11:57,209 --> 00:12:00,360
very confused and was like why do I have

00:11:59,009 --> 00:12:03,420
to know all these things it's very

00:12:00,360 --> 00:12:04,829
complicated so the problem is most of

00:12:03,420 --> 00:12:05,939
these tools have grown organically in

00:12:04,829 --> 00:12:09,209
different labs there's not a lot of

00:12:05,939 --> 00:12:11,069
communication there's a lot of sort of

00:12:09,209 --> 00:12:13,559
happy bash scripting where you inherit

00:12:11,069 --> 00:12:15,509
some bash scripts from a previous PhD

00:12:13,559 --> 00:12:21,750
student who's never really tested it

00:12:15,509 --> 00:12:23,069
properly then you have to be essentially

00:12:21,750 --> 00:12:24,300
an expert in many different types of

00:12:23,069 --> 00:12:25,920
software in order to be able to do all

00:12:24,300 --> 00:12:28,350
the things you want to do and if you

00:12:25,920 --> 00:12:30,600
find a problem which just have software

00:12:28,350 --> 00:12:32,579
you know can't do you get into this

00:12:30,600 --> 00:12:34,050
Google trap where you search for

00:12:32,579 --> 00:12:36,689
something you're trying to do and then

00:12:34,050 --> 00:12:38,250
you find on reset gate or on Stack

00:12:36,689 --> 00:12:40,139
Overflow here's how you do it and then

00:12:38,250 --> 00:12:42,059
you try and doesn't work and then you go

00:12:40,139 --> 00:12:43,470
to the next solution retry it doesn't

00:12:42,059 --> 00:12:44,309
work and eventually maybe you find

00:12:43,470 --> 00:12:47,850
something else

00:12:44,309 --> 00:12:49,379
but basically you lose the focus on the

00:12:47,850 --> 00:12:51,800
science you're trying to do rather than

00:12:49,379 --> 00:12:55,350
trying to use all all the tools

00:12:51,800 --> 00:12:58,259
so this is where biasing space came into

00:12:55,350 --> 00:13:00,660
play and this is the Python code I'm I

00:12:58,259 --> 00:13:02,309
want to talk about so basically all this

00:13:00,660 --> 00:13:05,610
complicated workflow I've just talked

00:13:02,309 --> 00:13:11,519
about can be condensed into these seven

00:13:05,610 --> 00:13:16,139
lines of Python yeah exactly

00:13:11,519 --> 00:13:18,390
it was a big build up for hey so the

00:13:16,139 --> 00:13:20,790
idea is actually that we're not

00:13:18,390 --> 00:13:21,899
rewriting all the underlying tools we're

00:13:20,790 --> 00:13:24,810
just wrapping around all these

00:13:21,899 --> 00:13:27,839
underlying tools and making it very easy

00:13:24,810 --> 00:13:29,790
for an academic user who had some Python

00:13:27,839 --> 00:13:32,550
experience and some scripting experience

00:13:29,790 --> 00:13:34,260
to actually interact with an API that

00:13:32,550 --> 00:13:38,519
lets you focus on the science or in this

00:13:34,260 --> 00:13:42,750
case while we import by some space and

00:13:38,519 --> 00:13:47,310
then we can read this drum ax file we

00:13:42,750 --> 00:13:48,870
can visualize it we can get the molecule

00:13:47,310 --> 00:13:50,940
we can then parameterize the molecule

00:13:48,870 --> 00:13:52,740
with this force field we can solve ate

00:13:50,940 --> 00:13:54,660
it and then we can run it and it doesn't

00:13:52,740 --> 00:13:57,209
matter that it was a grow grow max file

00:13:54,660 --> 00:14:00,420
we can still run it in amber it's it's

00:13:57,209 --> 00:14:05,519
completely agnostic to this so at this

00:14:00,420 --> 00:14:09,209
point I will go to a live demo of how

00:14:05,519 --> 00:14:12,959
this works hopefully so basically

00:14:09,209 --> 00:14:17,010
everything we've prepared at the moment

00:14:12,959 --> 00:14:20,010
is we're running a docker image of the

00:14:17,010 --> 00:14:24,930
software on either an Oracle cloud

00:14:20,010 --> 00:14:32,279
service or Asia and you can try it out

00:14:24,930 --> 00:14:38,370
yourself if you wanted to so we have we

00:14:32,279 --> 00:14:41,070
import the library and then in this case

00:14:38,370 --> 00:14:46,320
I'm reading co-ordinate file and this

00:14:41,070 --> 00:14:49,110
force field file in in order to define

00:14:46,320 --> 00:14:52,589
my molecular system and before I had to

00:14:49,110 --> 00:14:57,029
go to my bash console in order to open

00:14:52,589 --> 00:15:01,760
this VM D now I can just look at it in

00:14:57,029 --> 00:15:04,620
in the browser in the stupider notebook

00:15:01,760 --> 00:15:07,709
so you see this box and there's a little

00:15:04,620 --> 00:15:10,199
molecule in there I can also look at a

00:15:07,709 --> 00:15:12,709
particular molecule if I wanted so I can

00:15:10,199 --> 00:15:12,709
do something like

00:15:15,140 --> 00:15:20,899
so I know the 0th molecule in this case

00:15:18,019 --> 00:15:23,600
is actually this peptide I'm trying to

00:15:20,899 --> 00:15:25,160
simulate which is a London dipeptide

00:15:23,600 --> 00:15:26,720
it's not very interesting system from a

00:15:25,160 --> 00:15:31,970
biological point of view but for

00:15:26,720 --> 00:15:34,519
demonstrations it's great and then we

00:15:31,970 --> 00:15:36,220
can run in this tool a typical

00:15:34,519 --> 00:15:39,709
simulation workflow which would be

00:15:36,220 --> 00:15:41,480
minimizing this water box running in

00:15:39,709 --> 00:15:44,300
equilibration where we actually get the

00:15:41,480 --> 00:15:46,610
temperature of the system to 300 Kelvin

00:15:44,300 --> 00:15:48,380
and then we do production run which we

00:15:46,610 --> 00:15:54,140
then take the trajectory to do our

00:15:48,380 --> 00:15:55,940
analysis and we can also kind of we've

00:15:54,140 --> 00:15:58,370
implemented a sort of standard default

00:15:55,940 --> 00:16:04,430
protocol which can be easily written by

00:15:58,370 --> 00:16:08,149
any expert user so basically what you

00:16:04,430 --> 00:16:10,040
define is this protocol and in this case

00:16:08,149 --> 00:16:12,050
we're running an equilibration and then

00:16:10,040 --> 00:16:14,630
you have all these default parameters

00:16:12,050 --> 00:16:16,610
that automatically set or you can set

00:16:14,630 --> 00:16:20,860
them yourself if you wanted so in this

00:16:16,610 --> 00:16:25,010
case we're running for point zero five

00:16:20,860 --> 00:16:27,320
nanoseconds of 500 femtoseconds and

00:16:25,010 --> 00:16:31,130
we're doing a temperature raising from

00:16:27,320 --> 00:16:32,660
zero Kelvin to 300 Kelvin and we don't

00:16:31,130 --> 00:16:36,380
restrain backbones that's a very

00:16:32,660 --> 00:16:39,769
technical term in this case so we define

00:16:36,380 --> 00:16:42,079
the protocol then we define a process we

00:16:39,769 --> 00:16:43,730
want to run an MD process we don't run

00:16:42,079 --> 00:16:46,339
it and we give it the system the

00:16:43,730 --> 00:16:48,760
molecular system and the protocol and

00:16:46,339 --> 00:16:51,800
then we can just simply execute this

00:16:48,760 --> 00:16:53,540
using Sanders so basically actually by

00:16:51,800 --> 00:16:55,880
some space we'll look in your path and

00:16:53,540 --> 00:16:57,800
see what tools are available and then

00:16:55,880 --> 00:17:01,100
choose the one that is best suited for

00:16:57,800 --> 00:17:02,959
the job you're trying to run you can

00:17:01,100 --> 00:17:05,089
give it a working directory if you don't

00:17:02,959 --> 00:17:11,390
it will create some temp directory and

00:17:05,089 --> 00:17:14,569
write things there and it actually then

00:17:11,390 --> 00:17:18,439
writes these files so MD aMDA and MD

00:17:14,569 --> 00:17:23,660
door are st7 the two input files I read

00:17:18,439 --> 00:17:25,459
in and sorry the MDR c7n deep rm7

00:17:23,660 --> 00:17:27,620
are the two input files I gave in but

00:17:25,459 --> 00:17:28,610
the MD dot amber is the configuration

00:17:27,620 --> 00:17:31,490
file that was

00:17:28,610 --> 00:17:33,650
generated by the protocol because

00:17:31,490 --> 00:17:36,470
someone decided that this is the best

00:17:33,650 --> 00:17:38,420
practice protocol for your elaboration

00:17:36,470 --> 00:17:40,490
if I didn't like this particular

00:17:38,420 --> 00:17:41,990
protocol I could just give it a config

00:17:40,490 --> 00:17:44,690
file if I want it instead and I don't

00:17:41,990 --> 00:17:50,150
have to deal with it I can look at this

00:17:44,690 --> 00:17:51,890
config file which yes you need to be

00:17:50,150 --> 00:17:53,929
kind of an expert in order to understand

00:17:51,890 --> 00:17:56,690
what's going on in there if I don't care

00:17:53,929 --> 00:17:58,100
about these things because I know

00:17:56,690 --> 00:17:59,690
someone decided that this is a good

00:17:58,100 --> 00:18:01,160
protocol it's great I can just run the

00:17:59,690 --> 00:18:06,290
dynamics without having to understand

00:18:01,160 --> 00:18:08,390
all the different bits I then can look

00:18:06,290 --> 00:18:16,910
at the argument string for the command

00:18:08,390 --> 00:18:19,419
line to actually run my simulation I can

00:18:16,910 --> 00:18:22,390
then actually get these arguments and

00:18:19,419 --> 00:18:25,460
that returns a dictionary and I can

00:18:22,390 --> 00:18:31,030
unset them change them as I wanted to so

00:18:25,460 --> 00:18:31,030
I can set this - oh flag here - false

00:18:31,900 --> 00:18:37,309
it's now false if I now look at the

00:18:34,160 --> 00:18:41,270
arguments again the - oh but from up

00:18:37,309 --> 00:18:43,090
here it's gone and I can just reset to

00:18:41,270 --> 00:18:47,630
the original in case I messed it all up

00:18:43,090 --> 00:18:50,440
and I can start running this process so

00:18:47,630 --> 00:18:54,710
this is now running on a Oracle cloud

00:18:50,440 --> 00:19:00,140
instance and I can query various things

00:18:54,710 --> 00:19:02,660
about it is it running how long has it

00:19:00,140 --> 00:19:06,100
been running for and then obviously sort

00:19:02,660 --> 00:19:08,720
of the more protein simulation

00:19:06,100 --> 00:19:10,760
interesting parameters such as what is

00:19:08,720 --> 00:19:15,380
the total energy of my system so at the

00:19:10,760 --> 00:19:22,070
moment it's - 6000 494 kcal per mole and

00:19:15,380 --> 00:19:24,770
I can kind of monitor an update of this

00:19:22,070 --> 00:19:29,510
okay so the time moves up

00:19:24,770 --> 00:19:32,179
I can also interactively plot time

00:19:29,510 --> 00:19:34,750
series of what's happening so here I'm

00:19:32,179 --> 00:19:37,760
plotting the time versus the temperature

00:19:34,750 --> 00:19:40,760
so we said we're slowly going from 0 to

00:19:37,760 --> 00:19:42,170
300 Kelvin so I don't know there's a

00:19:40,760 --> 00:19:45,460
Spyke because that's part of the

00:19:42,170 --> 00:19:48,770
algorithm and then we're ramping up and

00:19:45,460 --> 00:19:53,480
then we can look at how the total energy

00:19:48,770 --> 00:19:54,890
changes over time and then the main

00:19:53,480 --> 00:19:59,210
thing what you're usually interested in

00:19:54,890 --> 00:20:04,370
is the analysis the data analysis in

00:19:59,210 --> 00:20:06,230
which you use the trajectory x-bar that

00:20:04,370 --> 00:20:09,320
coordinates to actually do the analysis

00:20:06,230 --> 00:20:12,050
and so you can get your trajectory you

00:20:09,320 --> 00:20:17,390
can I'm gonna stop here with a demo you

00:20:12,050 --> 00:20:21,710
can access the trajectory data in

00:20:17,390 --> 00:20:24,050
different tools so MD analysis is a

00:20:21,710 --> 00:20:27,200
Python tool for trajectory analysis as

00:20:24,050 --> 00:20:28,640
well as MV trash so we wrapped around

00:20:27,200 --> 00:20:32,960
both of them and you have complete

00:20:28,640 --> 00:20:42,130
access to either of them essentially and

00:20:32,960 --> 00:20:46,040
then you can write out stuff yeah ok so

00:20:42,130 --> 00:20:48,800
what is bias in space basically it sits

00:20:46,040 --> 00:20:51,980
in this layer and the sort of simulation

00:20:48,800 --> 00:20:54,680
setup simulation run analysis layer but

00:20:51,980 --> 00:20:58,100
not so much in the sort of cleaning up

00:20:54,680 --> 00:20:59,180
of the x-ray data but there's quite a

00:20:58,100 --> 00:21:01,100
lot of commercial software available

00:20:59,180 --> 00:21:05,390
that does that really well so we didn't

00:21:01,100 --> 00:21:10,610
want to dive in there and sort of a very

00:21:05,390 --> 00:21:13,970
quick overview of the API so we try to

00:21:10,610 --> 00:21:16,370
be as clean and obvious as possible

00:21:13,970 --> 00:21:18,290
so basically protocols are the things

00:21:16,370 --> 00:21:21,110
you want to do like an equilibration or

00:21:18,290 --> 00:21:23,750
production run whatever you could think

00:21:21,110 --> 00:21:28,490
of MD is the dynamics this could be

00:21:23,750 --> 00:21:30,440
Monte Carlo has a lot of potential to be

00:21:28,490 --> 00:21:32,270
extended io is anything that has

00:21:30,440 --> 00:21:35,960
something to do with writing and reading

00:21:32,270 --> 00:21:40,520
files gateway contains a lot of

00:21:35,960 --> 00:21:42,590
information such as units how to handle

00:21:40,520 --> 00:21:45,430
the processes trajectory contains the

00:21:42,590 --> 00:21:49,280
trajectory data and process is obviously

00:21:45,430 --> 00:21:53,330
the guy that manages all the the process

00:21:49,280 --> 00:21:54,050
assistant essentially so what is biasing

00:21:53,330 --> 00:21:55,820
space it's

00:21:54,050 --> 00:21:59,150
interoperable tools for a LeMat

00:21:55,820 --> 00:22:03,460
biomolecular simulations and yeah it's

00:21:59,150 --> 00:22:06,200
kind of the same thing so it encompasses

00:22:03,460 --> 00:22:08,720
systems that are trajectory generation

00:22:06,200 --> 00:22:11,410
and simulation analysis and kind of

00:22:08,720 --> 00:22:16,090
supports and the aim is to support

00:22:11,410 --> 00:22:16,090
underlying existing software

00:22:16,100 --> 00:22:24,680
so in summary it is a Python API API

00:22:22,160 --> 00:22:26,860
that allows you to write work for

00:22:24,680 --> 00:22:29,540
components for biomolecular simulations

00:22:26,860 --> 00:22:30,800
the idea is that you can really focus on

00:22:29,540 --> 00:22:34,460
the science you're trying to achieve and

00:22:30,800 --> 00:22:39,350
not so much the knowing how to use the

00:22:34,460 --> 00:22:41,960
software we're very much pushing for

00:22:39,350 --> 00:22:44,960
cloud use so that you can basically spin

00:22:41,960 --> 00:22:47,000
up an instant of GPU cluster send your

00:22:44,960 --> 00:22:52,090
jobs there it runs them and they come

00:22:47,000 --> 00:22:55,550
back and we're planning support for

00:22:52,090 --> 00:22:57,280
workflow managers such as Neyman common

00:22:55,550 --> 00:23:01,250
workflow language I don't really know if

00:22:57,280 --> 00:23:02,780
any of you use this but it's not it's

00:23:01,250 --> 00:23:04,100
not trying to be a workflow engine we

00:23:02,780 --> 00:23:06,830
don't want to manage all the workflows

00:23:04,100 --> 00:23:10,730
we just want to be able to write rule

00:23:06,830 --> 00:23:12,980
that allows you to do so it's a top-down

00:23:10,730 --> 00:23:14,420
it's not a top-down approach so we're

00:23:12,980 --> 00:23:18,770
not trying to reinvent the wheel we're

00:23:14,420 --> 00:23:20,210
just trying to make it easy to four

00:23:18,770 --> 00:23:23,180
different software's to communicate with

00:23:20,210 --> 00:23:25,250
each other and it's definitely not

00:23:23,180 --> 00:23:29,450
finished we started this project in

00:23:25,250 --> 00:23:34,220
January this year and it's got funding

00:23:29,450 --> 00:23:36,020
for two years and yeah we hope that

00:23:34,220 --> 00:23:40,190
people might be interested in getting

00:23:36,020 --> 00:23:43,690
involved it's all open source oh yeah

00:23:40,190 --> 00:23:47,120
it's on github I think there we go it's

00:23:43,690 --> 00:23:52,490
github Michelle our BIOS in space it was

00:23:47,120 --> 00:23:58,700
as a website and all the server and the

00:23:52,490 --> 00:24:01,280
cloud server docker image they're all

00:23:58,700 --> 00:24:02,990
available for download and playing

00:24:01,280 --> 00:24:06,550
around with it essentially and all the

00:24:02,990 --> 00:24:08,140
software's online all the code is online

00:24:06,550 --> 00:24:12,690
that's it thank you very much for your

00:24:08,140 --> 00:24:12,690
attention I'm happy to receive questions

00:24:17,040 --> 00:24:25,900
thanks very much are there any questions

00:24:18,940 --> 00:24:28,510
five minutes hello I have one rather

00:24:25,900 --> 00:24:31,059
weird question I work also in the life

00:24:28,510 --> 00:24:34,360
sciences and can witness a lot of hockey

00:24:31,059 --> 00:24:39,490
code especially biologists don't really

00:24:34,360 --> 00:24:41,670
take care for a nice going one question

00:24:39,490 --> 00:24:45,910
my question is why does the Python

00:24:41,670 --> 00:24:49,750
example code you should not follow the

00:24:45,910 --> 00:24:50,429
PEP eight naming conventions excellent

00:24:49,750 --> 00:24:55,510
question

00:24:50,429 --> 00:25:00,910
so this has legacy reasons which aren't

00:24:55,510 --> 00:25:02,080
great but so bison space builds on a

00:25:00,910 --> 00:25:06,520
code called

00:25:02,080 --> 00:25:10,510
SIA SIA is a biomolecular software

00:25:06,520 --> 00:25:13,840
library written in C++ with its entire

00:25:10,510 --> 00:25:15,280
API exposed to Python with Python

00:25:13,840 --> 00:25:17,740
wrappers but obviously it was written

00:25:15,280 --> 00:25:20,620
and C++ styles so we decided to keep

00:25:17,740 --> 00:25:23,260
everything in the C++ style and not go

00:25:20,620 --> 00:25:24,730
with depth because it would have ended

00:25:23,260 --> 00:25:26,640
up being some weird mixture of

00:25:24,730 --> 00:25:34,990
everything so rather just go with one

00:25:26,640 --> 00:25:37,350
off style then yeah thanks any other

00:25:34,990 --> 00:25:37,350
questions

00:25:41,600 --> 00:25:48,890
when a stock I would like to ask to

00:25:44,240 --> 00:25:52,150
about the submission of the task after

00:25:48,890 --> 00:25:55,670
of the simulation because a lot of

00:25:52,150 --> 00:25:59,360
because I will also paste the student in

00:25:55,670 --> 00:26:03,080
biochemistry and my colleagues working

00:25:59,360 --> 00:26:06,970
with very really experiments trying to

00:26:03,080 --> 00:26:12,230
change two parameters and do a lot of

00:26:06,970 --> 00:26:16,250
programming changing dynamics and we

00:26:12,230 --> 00:26:19,670
also have clusters on the whole Republic

00:26:16,250 --> 00:26:22,640
Republic for economical purpose and you

00:26:19,670 --> 00:26:26,470
need to ask unit submission to task or

00:26:22,640 --> 00:26:32,830
to or to job in the queue and then you

00:26:26,470 --> 00:26:37,340
retire a result and I think that

00:26:32,830 --> 00:26:39,890
different environment can be tricky to

00:26:37,340 --> 00:26:43,880
to approach this to have any idea how

00:26:39,890 --> 00:26:47,900
can be dissolved sir I mean submitting

00:26:43,880 --> 00:26:50,570
so the idea is that you would write 100

00:26:47,900 --> 00:26:52,250
line Python code with this API and then

00:26:50,570 --> 00:26:54,440
you have a Python script and you can

00:26:52,250 --> 00:26:58,190
just submit that whether I don't know

00:26:54,440 --> 00:27:00,770
excuse up or whatever plus tangelo you

00:26:58,190 --> 00:27:02,450
use a cluster I think this is dark or

00:27:00,770 --> 00:27:04,250
something like that yes I mean it

00:27:02,450 --> 00:27:05,600
doesn't really matter so it's just

00:27:04,250 --> 00:27:07,340
basically you just call the Python

00:27:05,600 --> 00:27:10,040
scripts you just have to have the

00:27:07,340 --> 00:27:14,270
software installed on the cluster I

00:27:10,040 --> 00:27:16,640
suppose what we're particularly

00:27:14,270 --> 00:27:19,160
interested in is sort of generating

00:27:16,640 --> 00:27:22,250
artificial cloud clusters so at the

00:27:19,160 --> 00:27:24,740
moment we use a lot of GPU computations

00:27:22,250 --> 00:27:28,490
because they're fast for the kind of

00:27:24,740 --> 00:27:34,010
purposes I want to use it and so we just

00:27:28,490 --> 00:27:36,620
spin up a GPU cluster in the cloud it's

00:27:34,010 --> 00:27:40,010
alive for the time of the simulation and

00:27:36,620 --> 00:27:41,630
then it shut down again and we also have

00:27:40,010 --> 00:27:44,030
a local cluster but I barely use it

00:27:41,630 --> 00:27:47,440
anymore because it takes forever to get

00:27:44,030 --> 00:27:49,400
anything through it so yeah yeah and

00:27:47,440 --> 00:27:54,830
dunno about that leaks here

00:27:49,400 --> 00:27:58,519
sorry dunno about that lives here no

00:27:54,830 --> 00:28:01,640
it's it's part of your European Union

00:27:58,519 --> 00:28:04,460
this initiative for biomolecular and

00:28:01,640 --> 00:28:08,659
biological tools you have the database

00:28:04,460 --> 00:28:10,940
of this tool you can you can ask for

00:28:08,659 --> 00:28:14,090
help and you can propagate your software

00:28:10,940 --> 00:28:17,360
and find the way it's supported by

00:28:14,090 --> 00:28:23,929
European Union and you can find the way

00:28:17,360 --> 00:28:38,529
how it can be moved forward I'll be else

00:28:23,929 --> 00:28:38,529
here yeah yeah I can help you with

00:28:39,159 --> 00:28:42,309
thanks very much

00:28:44,049 --> 00:28:48,950
sorry as a I attended these meetings

00:28:46,370 --> 00:28:54,769
because I was a Python programmer and my

00:28:48,950 --> 00:28:56,960
wife is a biologist so and yeah I keep

00:28:54,769 --> 00:28:58,399
seeing she doing some examination which

00:28:56,960 --> 00:29:01,070
I actually don't understand

00:28:58,399 --> 00:29:03,409
but there's one time as a sport there's

00:29:01,070 --> 00:29:05,840
some keywords just jab in my eye which

00:29:03,409 --> 00:29:07,789
is a Python so if you confused I think

00:29:05,840 --> 00:29:11,899
it she's really using she was a

00:29:07,789 --> 00:29:12,980
alampi in Cambridge so it's a laboratory

00:29:11,899 --> 00:29:17,059
of molecular biology

00:29:12,980 --> 00:29:20,139
it's a Nobel Prize winner I think that

00:29:17,059 --> 00:29:24,070
in there it's instead if they use some

00:29:20,139 --> 00:29:28,429
simulation tools seems like commercial

00:29:24,070 --> 00:29:30,740
I'm not sure I just so they're very few

00:29:28,429 --> 00:29:32,740
commercial simulation tools because

00:29:30,740 --> 00:29:36,860
industry at least for biomolecular

00:29:32,740 --> 00:29:38,990
simulations because only in the last of

00:29:36,860 --> 00:29:41,690
two years farmer industries who are

00:29:38,990 --> 00:29:44,840
probably the main target for this have

00:29:41,690 --> 00:29:46,880
shown interest in molecular simulations

00:29:44,840 --> 00:29:48,409
the problem is these simulations do take

00:29:46,880 --> 00:29:50,120
quite some time so you have to wait for

00:29:48,409 --> 00:29:51,799
a week or so to get your free

00:29:50,120 --> 00:29:56,149
directories back I think yes she was

00:29:51,799 --> 00:29:58,970
doing yeah and so that just wouldn't fit

00:29:56,149 --> 00:30:02,409
timeframes of pharmaceutical companies

00:29:58,970 --> 00:30:05,240
to do lead to target optimization but

00:30:02,409 --> 00:30:10,010
this is changing now

00:30:05,240 --> 00:30:13,460
yeah just ask oh yeah sorry sorry guys I

00:30:10,010 --> 00:30:16,450
think if if she wants you use like a use

00:30:13,460 --> 00:30:18,950
simulation to to simulate the the

00:30:16,450 --> 00:30:21,770
interactive of some molecular a small

00:30:18,950 --> 00:30:23,659
molecular to war some target point so

00:30:21,770 --> 00:30:26,600
can we use this yes

00:30:23,659 --> 00:30:31,399
so this the underlying software we

00:30:26,600 --> 00:30:33,289
support can do this yeah okay wait I

00:30:31,399 --> 00:30:33,830
know but we think until you're going to

00:30:33,289 --> 00:30:41,440
leave

00:30:33,830 --> 00:30:41,440

YouTube URL: https://www.youtube.com/watch?v=NoTQLb0oN-4


