Title: Dan Taylor - From Zero to Azure with Python, Docker containers, and Visual Studio Code
Publication date: 2018-08-22
Playlist: EuroPython 2018
Description: 
	From Zero to Azure with Python, Docker containers, and Visual Studio Code
[EuroPython 2018 - Talk - 2018-07-25 - Kilsyth]
[Edinburgh, UK]

By Dan Taylor

In this session we will walk through creating a Python web app
with Docker and deploying it to Microsoft Azure using the free,
cross-platform, and open-source Visual Studio Code. We will also show
using hosted Jupyter notebooks in Azure Notebooks to analyze data, and
storing data in CosmosDB using the Azure SDK for Python. If you're
excited about Python and want to learn more about the capabilities of
Azure, then this session is for you. We will cover all of the basics, no
experience with Azure, containers, cloud computing, or Visual Studio
Code necessary!



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2018.europython.eu/en/speaker-release-agreement/
Captions: 
	00:00:01,939 --> 00:00:06,450
all right everyone I'm gonna go ahead

00:00:04,230 --> 00:00:09,179
and get started thank you all for coming

00:00:06,450 --> 00:00:10,710
to the session today my name is Dan

00:00:09,179 --> 00:00:13,170
Taylor I'm a program manager for our

00:00:10,710 --> 00:00:15,450
Python developer tools at Microsoft and

00:00:13,170 --> 00:00:17,670
this is a sponsored session so I'm going

00:00:15,450 --> 00:00:20,970
to be going through how you can deploy a

00:00:17,670 --> 00:00:24,240
Python application to Azure in a docker

00:00:20,970 --> 00:00:27,150
container using visual studio code so

00:00:24,240 --> 00:00:28,920
together with Azure and Visual Studio

00:00:27,150 --> 00:00:30,720
code you get a really productive

00:00:28,920 --> 00:00:33,750
developer experience and I'm basically

00:00:30,720 --> 00:00:35,010
going to show how we start with just

00:00:33,750 --> 00:00:36,510
these prerequisites here on the screen

00:00:35,010 --> 00:00:38,579
if you have an address subscription

00:00:36,510 --> 00:00:40,770
visual studio code and get command-line

00:00:38,579 --> 00:00:44,489
tools and docker kind of how you can

00:00:40,770 --> 00:00:47,070
deploy an app starting from basically a

00:00:44,489 --> 00:00:48,960
command line and so the steps are gonna

00:00:47,070 --> 00:00:50,550
run through today we're gonna create an

00:00:48,960 --> 00:00:53,059
application and run it in a local docker

00:00:50,550 --> 00:00:55,920
container running on this local machine

00:00:53,059 --> 00:00:57,690
then we're gonna deploy this to at your

00:00:55,920 --> 00:01:00,059
web apps for containers using vs code

00:00:57,690 --> 00:01:02,969
and then we're going to add some data to

00:01:00,059 --> 00:01:04,949
a cosmos DB database using our azure

00:01:02,969 --> 00:01:08,520
notebooks and then we're gonna update

00:01:04,949 --> 00:01:10,380
the code and redeploy it so just a quick

00:01:08,520 --> 00:01:11,700
summary of some of the key services and

00:01:10,380 --> 00:01:14,040
Azure that you might be thinking of if

00:01:11,700 --> 00:01:16,170
you're a Python developer we've got web

00:01:14,040 --> 00:01:18,990
app hosting and app service and azure

00:01:16,170 --> 00:01:20,520
kubernetes you can will be using Azure

00:01:18,990 --> 00:01:22,409
notebooks but there's also things like

00:01:20,520 --> 00:01:25,439
Azure machine learning and batch III for

00:01:22,409 --> 00:01:28,170
doing training of ml and then we've got

00:01:25,439 --> 00:01:30,900
various data services like hosted Redis

00:01:28,170 --> 00:01:33,360
and Azure database for Postgres and then

00:01:30,900 --> 00:01:35,220
we've got a cosmos DB which will be

00:01:33,360 --> 00:01:36,570
going through today and then finally

00:01:35,220 --> 00:01:39,150
we'll be using Visual Studio code which

00:01:36,570 --> 00:01:41,040
is Microsoft's free cross-platform an

00:01:39,150 --> 00:01:43,920
open source editor it's very lightweight

00:01:41,040 --> 00:01:45,990
and fast it's got a very rich extension

00:01:43,920 --> 00:01:48,869
ecosystem and the extensions that we'll

00:01:45,990 --> 00:01:50,490
be using today are the Python extension

00:01:48,869 --> 00:01:53,130
which is actually what my team builds at

00:01:50,490 --> 00:01:54,899
Microsoft the docker extension and then

00:01:53,130 --> 00:01:56,430
some of the Azure extensions that make

00:01:54,899 --> 00:02:00,060
it really easy to package up and deploy

00:01:56,430 --> 00:02:03,840
this application so let's go ahead dive

00:02:00,060 --> 00:02:06,630
right in and get started from zero all

00:02:03,840 --> 00:02:07,950
right so I've got a command line here so

00:02:06,630 --> 00:02:10,229
Visual Studio code is a very lightweight

00:02:07,950 --> 00:02:13,410
editor as I mentioned it's meant to work

00:02:10,229 --> 00:02:15,210
with a command line

00:02:13,410 --> 00:02:17,520
editor so I usually start out from the

00:02:15,210 --> 00:02:19,650
command line and the first thing I do is

00:02:17,520 --> 00:02:21,870
just make a new folder and we'll make a

00:02:19,650 --> 00:02:24,330
new folder called zero to Azure I'm

00:02:21,870 --> 00:02:29,610
going to change CD into that folder zero

00:02:24,330 --> 00:02:32,640
to Azure and then from here I'm gonna

00:02:29,610 --> 00:02:34,200
type code dot write so one of the things

00:02:32,640 --> 00:02:36,060
if you install a visual studio code on

00:02:34,200 --> 00:02:38,130
Windows it automatically puts the BS

00:02:36,060 --> 00:02:40,050
code on the path on Mac or Linux is a

00:02:38,130 --> 00:02:42,180
simple command that you can run to put

00:02:40,050 --> 00:02:44,490
vs code on the path and it just makes it

00:02:42,180 --> 00:02:45,870
nice and easy for you type code dot and

00:02:44,490 --> 00:02:48,030
then it opens up in the folder and then

00:02:45,870 --> 00:02:49,950
I can start working with Visual Studio

00:02:48,030 --> 00:02:52,770
code in the folder alternatively you can

00:02:49,950 --> 00:02:56,280
come in here and click open folder to

00:02:52,770 --> 00:02:58,080
open up that folder so the first thing I

00:02:56,280 --> 00:02:59,700
want to do is define my entry point from

00:02:58,080 --> 00:03:02,010
my application so I'm going to click

00:02:59,700 --> 00:03:04,650
this new file button when I click that

00:03:02,010 --> 00:03:08,730
it lets me name the file and I'm gonna

00:03:04,650 --> 00:03:11,670
put my file into a folder called app and

00:03:08,730 --> 00:03:12,870
I'm gonna name it main dot py so what's

00:03:11,670 --> 00:03:14,400
really cool about this if I just hit

00:03:12,870 --> 00:03:17,220
enter here it's going to create a folder

00:03:14,400 --> 00:03:18,840
called app and put a Python file in that

00:03:17,220 --> 00:03:22,830
folder it's a really neat little

00:03:18,840 --> 00:03:26,550
shortcut trick there can everyone see ok

00:03:22,830 --> 00:03:28,140
on the screen great the first thing I'm

00:03:26,550 --> 00:03:29,880
going to do is go to write a basic flask

00:03:28,140 --> 00:03:31,530
application how many people here are

00:03:29,880 --> 00:03:35,280
familiar with flask as a web service

00:03:31,530 --> 00:03:37,260
great looks like 60% or so of the room

00:03:35,280 --> 00:03:40,740
I'm gonna use a little snippet that I've

00:03:37,260 --> 00:03:42,720
written a flask app tab that I've just

00:03:40,740 --> 00:03:44,280
customized my user snippets here I'm a

00:03:42,720 --> 00:03:48,920
BS code so you want to watch me type

00:03:44,280 --> 00:03:51,300
this out but this command s to save this

00:03:48,920 --> 00:03:53,430
here just the most basic flask

00:03:51,300 --> 00:03:56,850
application you can write we import the

00:03:53,430 --> 00:03:59,100
flask object we define our app we define

00:03:56,850 --> 00:04:01,590
a homepage route there we render a

00:03:59,100 --> 00:04:03,870
template index.html and then this little

00:04:01,590 --> 00:04:08,040
piece of code here if you run this main

00:04:03,870 --> 00:04:10,560
dot py file directly it will it will run

00:04:08,040 --> 00:04:12,209
the web server alternatively web servers

00:04:10,560 --> 00:04:14,400
typically grab this app variable and

00:04:12,209 --> 00:04:15,600
then then use that to run the host which

00:04:14,400 --> 00:04:18,030
is how we're going to run it in the

00:04:15,600 --> 00:04:19,980
docker container okay so now we need to

00:04:18,030 --> 00:04:22,460
add this index.html file that I have

00:04:19,980 --> 00:04:24,780
here so I'll create another file here

00:04:22,460 --> 00:04:27,030
and I'll use that same trick where I'll

00:04:24,780 --> 00:04:28,650
put templates slash indexed

00:04:27,030 --> 00:04:30,720
jemelle that's where this render

00:04:28,650 --> 00:04:32,840
template function expects it to be and

00:04:30,720 --> 00:04:35,280
I'll use another cool trick in vs code

00:04:32,840 --> 00:04:37,740
here we have an integration with Emmet

00:04:35,280 --> 00:04:39,930
so I can type exclamation mark and press

00:04:37,740 --> 00:04:43,020
ENTER and they'll give me some template

00:04:39,930 --> 00:04:45,510
some boilerplate HTML code which does

00:04:43,020 --> 00:04:47,430
some nice things like sets the device

00:04:45,510 --> 00:04:49,680
width and the scaling so that'll it will

00:04:47,430 --> 00:04:54,000
render nice on a mobile application so

00:04:49,680 --> 00:04:55,800
we'll call this hello euro Python and

00:04:54,000 --> 00:05:01,590
then we're gonna say you know hello

00:04:55,800 --> 00:05:05,270
flask + docker + euro Python plus any

00:05:01,590 --> 00:05:10,050
any one we got Edinburgh what was that

00:05:05,270 --> 00:05:13,590
+ kitty and then all the things okay

00:05:10,050 --> 00:05:15,480
great so this is our application here

00:05:13,590 --> 00:05:17,940
very fancy this is what we're gonna go

00:05:15,480 --> 00:05:19,530
ahead and deploy to a sure so I

00:05:17,940 --> 00:05:21,750
mentioned this is with docker I could go

00:05:19,530 --> 00:05:23,430
ahead and just right click and run this

00:05:21,750 --> 00:05:25,440
file locally but I'm actually gonna run

00:05:23,430 --> 00:05:27,000
it inside of a docker container so what

00:05:25,440 --> 00:05:30,540
do I need to do I need to add some

00:05:27,000 --> 00:05:31,770
darker files to my workspace here so so

00:05:30,540 --> 00:05:33,690
far I actually haven't installed any

00:05:31,770 --> 00:05:36,000
extensions yet and this is just with

00:05:33,690 --> 00:05:39,930
vanilla vs code so let me go ahead and

00:05:36,000 --> 00:05:43,500
install all the extensions I need from

00:05:39,930 --> 00:05:47,760
here actually I've got these all saved

00:05:43,500 --> 00:05:49,440
offline in case the Wi-Fi drops out on

00:05:47,760 --> 00:05:52,380
me I've actually got Wi-Fi in my pocket

00:05:49,440 --> 00:05:53,820
because this is a very connected demo so

00:05:52,380 --> 00:05:56,490
the first thing I'm gonna do is search

00:05:53,820 --> 00:05:58,410
for the python extension normally you'd

00:05:56,490 --> 00:06:01,140
install it for heat for me I just need

00:05:58,410 --> 00:06:02,460
to enable it so will enable that python

00:06:01,140 --> 00:06:05,580
extension we're going to turn on the

00:06:02,460 --> 00:06:09,440
docker extension as well i'll come in

00:06:05,580 --> 00:06:11,789
here and click enable on that and then

00:06:09,440 --> 00:06:14,690
as i mentioned we've got some azure

00:06:11,789 --> 00:06:16,979
extensions that we want to turn on so

00:06:14,690 --> 00:06:18,990
we'll add the azure app service

00:06:16,979 --> 00:06:21,360
extension so we're deploying - as your

00:06:18,990 --> 00:06:23,610
web apps which is part of app service

00:06:21,360 --> 00:06:26,130
and this is going to turn on our address

00:06:23,610 --> 00:06:28,229
account extension and then later in the

00:06:26,130 --> 00:06:32,970
talk I'll need cosmos DB so I'm going to

00:06:28,229 --> 00:06:35,460
turn on the cosmos DB extension great so

00:06:32,970 --> 00:06:36,720
let's reload vs code so I just clicked

00:06:35,460 --> 00:06:38,550
that reload button every time you

00:06:36,720 --> 00:06:38,999
install an extension you need to reload

00:06:38,550 --> 00:06:40,379
vs

00:06:38,999 --> 00:06:41,969
so that it can start up with all the

00:06:40,379 --> 00:06:47,099
extensions turned on and and those

00:06:41,969 --> 00:06:48,599
things great okay so now that I've

00:06:47,099 --> 00:06:51,419
installed particularly the docker

00:06:48,599 --> 00:06:53,579
extension I can use command shift P or

00:06:51,419 --> 00:06:55,469
control shift P if you're on Windows to

00:06:53,579 --> 00:06:56,909
bring up this command palette and one of

00:06:55,469 --> 00:06:58,739
the things that the docker extension

00:06:56,909 --> 00:07:00,689
does is it adds a bunch of docker

00:06:58,739 --> 00:07:02,459
commands to this command palette the one

00:07:00,689 --> 00:07:05,279
that I'm going to use is the add darker

00:07:02,459 --> 00:07:07,589
two workspace command so when I run that

00:07:05,279 --> 00:07:08,519
command that was at the top there it's

00:07:07,589 --> 00:07:10,529
got some templates for different

00:07:08,519 --> 00:07:13,610
languages one of those languages being

00:07:10,529 --> 00:07:16,589
Python so if I select the Python

00:07:13,610 --> 00:07:18,929
application platform it will have some

00:07:16,589 --> 00:07:20,759
boilerplate stuff there and it's asking

00:07:18,929 --> 00:07:24,449
me which port my app listens on it

00:07:20,759 --> 00:07:28,559
listens on port 8000 so that's important

00:07:24,449 --> 00:07:30,569
okay so this adds some docker

00:07:28,559 --> 00:07:32,159
files here I'm gonna go in actually

00:07:30,569 --> 00:07:33,539
customize these darker files they don't

00:07:32,159 --> 00:07:37,349
know anything about flask or anything

00:07:33,539 --> 00:07:38,879
like that just yet so if you're if

00:07:37,349 --> 00:07:41,339
you're not familiar with docker it's

00:07:38,879 --> 00:07:42,569
composed of various layers right so the

00:07:41,339 --> 00:07:45,569
first thing you define is what is the

00:07:42,569 --> 00:07:47,459
base image that you want to depend upon

00:07:45,569 --> 00:07:49,579
and then you just add the little pieces

00:07:47,459 --> 00:07:52,349
of code that your application depends on

00:07:49,579 --> 00:07:56,279
so one of the neat things I'm gonna use

00:07:52,349 --> 00:07:58,800
a docker file that's or a darker image

00:07:56,279 --> 00:08:00,929
base that's publicly published on docker

00:07:58,800 --> 00:08:03,119
hub and one of the cool things about

00:08:00,929 --> 00:08:06,239
this docker extension is it actually has

00:08:03,119 --> 00:08:08,219
autocomplete for the base images so that

00:08:06,239 --> 00:08:11,519
as I type I'm actually going to use this

00:08:08,219 --> 00:08:13,919
one by this member of the community user

00:08:11,519 --> 00:08:15,989
tangle oh that's created a really good

00:08:13,919 --> 00:08:19,379
docker image for hosting flask

00:08:15,989 --> 00:08:21,149
applications so I'm gonna use this you

00:08:19,379 --> 00:08:23,489
whiskey nginx flask

00:08:21,149 --> 00:08:25,589
this puts flask behind a production web

00:08:23,489 --> 00:08:31,049
server so that it's nice and fast and

00:08:25,589 --> 00:08:32,579
then as I type out my tags here it gives

00:08:31,049 --> 00:08:36,059
me autocomplete for the tags so I want

00:08:32,579 --> 00:08:38,189
this to run in Python 3.6 using Alpine

00:08:36,059 --> 00:08:40,259
Linux because Alpine Linux is very small

00:08:38,189 --> 00:08:44,339
makes the docker image much smaller than

00:08:40,259 --> 00:08:45,600
a full Ubuntu or Debian image this just

00:08:44,339 --> 00:08:47,870
makes everything faster as you're

00:08:45,600 --> 00:08:51,059
deploying and running your application

00:08:47,870 --> 00:08:52,570
so a couple other quick customizations

00:08:51,059 --> 00:08:54,250
that I want to make to this

00:08:52,570 --> 00:08:55,870
file it's exposing this port on this

00:08:54,250 --> 00:08:58,209
docker container so when it runs you can

00:08:55,870 --> 00:09:00,699
connect into port 8000 but I also I'm

00:08:58,209 --> 00:09:03,009
going to set an environment variable

00:09:00,699 --> 00:09:04,660
listen port which which basically tells

00:09:03,009 --> 00:09:06,820
the base image to start the flask

00:09:04,660 --> 00:09:08,980
application up on port 8000 so those

00:09:06,820 --> 00:09:11,410
things are aligned and then I'm going to

00:09:08,980 --> 00:09:14,350
make one other customization here I'm

00:09:11,410 --> 00:09:17,560
going to add I want to add this app

00:09:14,350 --> 00:09:20,410
folder into the app folder of the docker

00:09:17,560 --> 00:09:23,829
container and then I'm just gonna come

00:09:20,410 --> 00:09:25,569
comment out these commands because this

00:09:23,829 --> 00:09:27,190
is would install additional packages but

00:09:25,569 --> 00:09:28,810
the container already has flask built

00:09:27,190 --> 00:09:33,279
into it and has a startup script so I

00:09:28,810 --> 00:09:35,259
don't need these right so if I look at

00:09:33,279 --> 00:09:37,230
the docker compose file here this has

00:09:35,259 --> 00:09:39,759
some like local build time runtime

00:09:37,230 --> 00:09:41,529
parameters here so it tells the tools on

00:09:39,759 --> 00:09:44,560
my local machine for the most part what

00:09:41,529 --> 00:09:46,480
to do it has the image name that I want

00:09:44,560 --> 00:09:48,699
to run this at and then it has the the

00:09:46,480 --> 00:09:51,750
port to map this to so when I run this

00:09:48,699 --> 00:09:56,079
locally it'll be available on port 8000

00:09:51,750 --> 00:09:57,190
so I've set up those containers those

00:09:56,079 --> 00:10:00,130
files to have what I need

00:09:57,190 --> 00:10:01,620
I'm just going to run compose up which

00:10:00,130 --> 00:10:05,260
is a command added by the docker

00:10:01,620 --> 00:10:08,310
extension so if I run composed up it's

00:10:05,260 --> 00:10:10,690
going to that was pretty quick it'll

00:10:08,310 --> 00:10:12,940
create a docker image building building

00:10:10,690 --> 00:10:14,769
that docker file it actually runs it

00:10:12,940 --> 00:10:18,610
starts up the docker container running

00:10:14,769 --> 00:10:21,370
on port 8000 locally and if I go into my

00:10:18,610 --> 00:10:23,019
docker tab over here I can see the that

00:10:21,370 --> 00:10:25,480
it's actually started up a docker

00:10:23,019 --> 00:10:26,980
container here called 0 to Azure and I

00:10:25,480 --> 00:10:30,220
can actually manage these containers I

00:10:26,980 --> 00:10:32,529
can start stop remove and one of the

00:10:30,220 --> 00:10:34,060
other things is that I can show logs so

00:10:32,529 --> 00:10:35,670
if I right click and show logs I can

00:10:34,060 --> 00:10:38,410
actually see the log of the running

00:10:35,670 --> 00:10:40,870
nginx web server inside of this

00:10:38,410 --> 00:10:43,569
container here I can see that it started

00:10:40,870 --> 00:10:47,139
up it ran a bunch of commands and then

00:10:43,569 --> 00:10:49,870
of course I can also run I can also

00:10:47,139 --> 00:10:52,050
connect to port 8000 locally and there

00:10:49,870 --> 00:10:57,009
we go we've got hello all the things

00:10:52,050 --> 00:10:58,480
including the kiddies cool right so we

00:10:57,009 --> 00:11:00,130
just created our app from scratch and

00:10:58,480 --> 00:11:02,529
ran it in a local docker container so a

00:11:00,130 --> 00:11:04,870
quick review we made a folder we

00:11:02,529 --> 00:11:05,889
launched vs code with code dot we

00:11:04,870 --> 00:11:09,069
installed the

00:11:05,889 --> 00:11:11,049
and Python and docker extensions we

00:11:09,069 --> 00:11:13,359
created a hello world flask app using

00:11:11,049 --> 00:11:15,040
some snippets that are available we

00:11:13,359 --> 00:11:17,559
added the docker files and we made some

00:11:15,040 --> 00:11:19,809
changes to the base image including

00:11:17,559 --> 00:11:21,459
setting using one of the images from

00:11:19,809 --> 00:11:23,699
docker hub and changing the listen port

00:11:21,459 --> 00:11:28,600
and just copying the write files over

00:11:23,699 --> 00:11:31,089
and then we used compose up to to build

00:11:28,600 --> 00:11:36,059
and run the container locally showed the

00:11:31,089 --> 00:11:38,980
logs and browsed it to it on localhost

00:11:36,059 --> 00:11:41,799
alright so the next thing that we want

00:11:38,980 --> 00:11:44,259
to do is take this container and shove

00:11:41,799 --> 00:11:46,089
it up into Azure right we want to host

00:11:44,259 --> 00:11:48,999
this as a web application that the

00:11:46,089 --> 00:11:54,279
public Internet can see because this is

00:11:48,999 --> 00:11:55,600
the best website in the world alright so

00:11:54,279 --> 00:12:00,790
let me just minimize this that's for

00:11:55,600 --> 00:12:05,109
later in the talk so the first thing I'm

00:12:00,790 --> 00:12:07,899
going to do is s go to the azure portal

00:12:05,109 --> 00:12:10,480
and create an azure container registry

00:12:07,899 --> 00:12:12,569
so when you publish a docker container

00:12:10,480 --> 00:12:15,660
it has to live in a registry somewhere

00:12:12,569 --> 00:12:18,040
and you can publish it to docker hub

00:12:15,660 --> 00:12:20,980
that's that's sort of the default

00:12:18,040 --> 00:12:24,579
container registry you can also create a

00:12:20,980 --> 00:12:25,660
Azure container registry for hosting

00:12:24,579 --> 00:12:27,279
that docker image so that's what I'm

00:12:25,660 --> 00:12:29,529
going to do so I went to portal Dodger

00:12:27,279 --> 00:12:31,509
comm and I'm going to sign into the

00:12:29,529 --> 00:12:33,850
azure portal this is where the Azure

00:12:31,509 --> 00:12:36,369
subscription comes in you can get a free

00:12:33,850 --> 00:12:39,149
subscription you can get $200 in free

00:12:36,369 --> 00:12:44,470
credits if you want to just play with

00:12:39,149 --> 00:12:46,299
Azure and try out all these steps so

00:12:44,470 --> 00:12:48,189
when you come into the portal I've got

00:12:46,299 --> 00:12:49,509
some resources here created already but

00:12:48,189 --> 00:12:53,289
the first thing I want to do is create a

00:12:49,509 --> 00:12:57,189
resource and for that I will I want then

00:12:53,289 --> 00:13:00,789
to create a container registry so I'll

00:12:57,189 --> 00:13:04,449
select that there we go

00:13:00,789 --> 00:13:07,509
so here's the container registry I'll

00:13:04,449 --> 00:13:10,059
select create it's going to put this

00:13:07,509 --> 00:13:12,489
into so this is going to create a

00:13:10,059 --> 00:13:15,399
registry I'll just call it my new

00:13:12,489 --> 00:13:18,770
registry and this will create a registry

00:13:15,399 --> 00:13:21,740
that's available at Azure cRIO

00:13:18,770 --> 00:13:23,990
and I get to create a new resource group

00:13:21,740 --> 00:13:25,730
so a resource group is basically a set

00:13:23,990 --> 00:13:29,140
of folders for all your Azure resources

00:13:25,730 --> 00:13:31,339
so I'll just say my new resource group

00:13:29,140 --> 00:13:32,510
we'll put it in north Europe because I

00:13:31,339 --> 00:13:36,860
think that's pretty close to where we

00:13:32,510 --> 00:13:38,540
are and then I'll pick the basic SKU

00:13:36,860 --> 00:13:40,940
because that's the cheapest and I'm just

00:13:38,540 --> 00:13:42,920
a developer playing with things right so

00:13:40,940 --> 00:13:46,610
all these things you can do with the the

00:13:42,920 --> 00:13:53,470
free credits that you get with the Adric

00:13:46,610 --> 00:13:57,560
trial so I will select create here and

00:13:53,470 --> 00:13:59,810
at this point just to minimize potential

00:13:57,560 --> 00:14:02,660
again Wi-Fi gacho's I'm gonna switch

00:13:59,810 --> 00:14:04,700
over to a zero to Azure resource group

00:14:02,660 --> 00:14:08,899
that I have that already has a container

00:14:04,700 --> 00:14:12,020
registry created and it's called EP

00:14:08,899 --> 00:14:17,209
registry so I'm gonna go into the access

00:14:12,020 --> 00:14:19,250
keys and copy the password here so that

00:14:17,209 --> 00:14:22,310
I can login to this registry with vs

00:14:19,250 --> 00:14:25,910
code so let's hit control C here stop

00:14:22,310 --> 00:14:27,589
this container so the first thing I'm

00:14:25,910 --> 00:14:31,430
going to log into that registry from the

00:14:27,589 --> 00:14:36,620
command line so docker log an EP

00:14:31,430 --> 00:14:38,510
registry as your CR that I owe the

00:14:36,620 --> 00:14:41,690
default username works and then press

00:14:38,510 --> 00:14:44,450
command V to paste that password that i

00:14:41,690 --> 00:14:46,459
just copied with the portal and then

00:14:44,450 --> 00:14:49,550
that's going to allow me to push this

00:14:46,459 --> 00:14:51,529
container image over to Azure so if I

00:14:49,550 --> 00:14:53,089
come back to this file here I need to

00:14:51,529 --> 00:14:57,860
change the image name so that it's

00:14:53,089 --> 00:14:59,899
prefixed with the location where this

00:14:57,860 --> 00:15:03,950
container is going to be pushed so I

00:14:59,899 --> 00:15:06,320
will prefix it with that's the registry

00:15:03,950 --> 00:15:09,290
I want to push this to and we'll throw a

00:15:06,320 --> 00:15:14,649
version number tag on it just for it's

00:15:09,290 --> 00:15:17,060
just a good practice so now if I go and

00:15:14,649 --> 00:15:19,850
run that compose up command it'll

00:15:17,060 --> 00:15:22,520
rebuild this container I'll select that

00:15:19,850 --> 00:15:25,190
docker compose file so it'll rebuild

00:15:22,520 --> 00:15:26,990
this container and then if I go and see

00:15:25,190 --> 00:15:28,699
the images that I have on my local

00:15:26,990 --> 00:15:30,890
machine there's the container image that

00:15:28,699 --> 00:15:31,880
we just built I can right-click this and

00:15:30,890 --> 00:15:35,690
say push

00:15:31,880 --> 00:15:37,550
so if I push that container it'll it

00:15:35,690 --> 00:15:40,940
knows where to push it using the docker

00:15:37,550 --> 00:15:44,660
command line and because I've prefixed

00:15:40,940 --> 00:15:46,600
the image name with the registry URI and

00:15:44,660 --> 00:15:53,509
so it's gone ahead and pushed that up to

00:15:46,600 --> 00:15:55,790
my container running in Azure now I can

00:15:53,509 --> 00:15:57,350
also browse my container registries that

00:15:55,790 --> 00:15:59,600
are running into Azure but now I need to

00:15:57,350 --> 00:16:02,509
sign in for this step right so if I

00:15:59,600 --> 00:16:04,910
click here to sign in vs code has this

00:16:02,509 --> 00:16:06,949
really nice sign-in experience where it

00:16:04,910 --> 00:16:10,370
just has this code that it copies to the

00:16:06,949 --> 00:16:11,870
clipboard and I can click copy and open

00:16:10,370 --> 00:16:14,180
and it gives me a login prompt in the

00:16:11,870 --> 00:16:20,149
browser so I can just paste this code

00:16:14,180 --> 00:16:22,250
into that browser hit continue and it

00:16:20,149 --> 00:16:25,639
just asks me to sign in to confirm Who I

00:16:22,250 --> 00:16:28,699
am and then that should be it and I

00:16:25,639 --> 00:16:31,730
should now be signed in to Azure with vs

00:16:28,699 --> 00:16:32,990
code so we can see there it says python

00:16:31,730 --> 00:16:35,060
demos at outlook.com

00:16:32,990 --> 00:16:37,970
I'm signed in to Azure with vs code and

00:16:35,060 --> 00:16:39,920
now vs code can see my Azure resources

00:16:37,970 --> 00:16:41,360
including the Azure registry there's the

00:16:39,920 --> 00:16:43,160
one I just created this is the one that

00:16:41,360 --> 00:16:45,439
we're actually using I can actually

00:16:43,160 --> 00:16:48,459
expand this and browse through all the

00:16:45,439 --> 00:16:51,230
containers and version numbers that are

00:16:48,459 --> 00:16:53,149
deployed so if I had multiple versions I

00:16:51,230 --> 00:16:54,829
could see them here but this is the 0 to

00:16:53,149 --> 00:16:57,500
Azure container that I just pushed and

00:16:54,829 --> 00:17:00,410
then this is the version that I just

00:16:57,500 --> 00:17:02,959
deployed and so I can right click this

00:17:00,410 --> 00:17:05,600
and from here I can just deploy this

00:17:02,959 --> 00:17:07,789
container directly to a new website web

00:17:05,600 --> 00:17:10,839
app running in Azure so I'll select

00:17:07,789 --> 00:17:12,770
deploy image to add your app service

00:17:10,839 --> 00:17:15,919
it's going to take me through a set of

00:17:12,770 --> 00:17:17,449
questions here I've got a resource group

00:17:15,919 --> 00:17:19,309
again that's a folder for all of my

00:17:17,449 --> 00:17:22,610
different Azure resources called 0 to a

00:17:19,309 --> 00:17:24,650
sure I'll select that we're going to

00:17:22,610 --> 00:17:26,600
create a new app service plan so a plan

00:17:24,650 --> 00:17:28,130
is the actual physical VM on which the

00:17:26,600 --> 00:17:30,500
container runs you can host multiple

00:17:28,130 --> 00:17:33,200
containers running on the same plan and

00:17:30,500 --> 00:17:37,220
you only pay for the one plan so if we

00:17:33,200 --> 00:17:39,890
will call this the 0 to Azure plan hit

00:17:37,220 --> 00:17:41,870
enter and we'll pick again the b1 the

00:17:39,890 --> 00:17:43,909
basic pricing tier this actually allows

00:17:41,870 --> 00:17:45,169
us to run 3 containers on the same set

00:17:43,909 --> 00:17:47,960
of resources so if you have

00:17:45,169 --> 00:17:51,350
of a dev staging and prod site you can

00:17:47,960 --> 00:17:58,899
host them all on one set of resources

00:17:51,350 --> 00:18:02,029
and then let's call this your Python app

00:17:58,899 --> 00:18:05,690
and so this is the actual location where

00:18:02,029 --> 00:18:09,080
the app is going to be available so in

00:18:05,690 --> 00:18:12,889
the output window it's creating the app

00:18:09,080 --> 00:18:15,499
service plan that I have there and if I

00:18:12,889 --> 00:18:17,690
switch back to the portal and back to

00:18:15,499 --> 00:18:21,470
this resource group here I'll actually

00:18:17,690 --> 00:18:25,700
be able to see these resources come in

00:18:21,470 --> 00:18:27,919
as they're being created by vs code so

00:18:25,700 --> 00:18:30,619
says the plans been created so if i

00:18:27,919 --> 00:18:36,230
refresh there's the the host for the web

00:18:30,619 --> 00:18:37,820
app and then it says that the web apps

00:18:36,230 --> 00:18:41,929
been created there so there's the actual

00:18:37,820 --> 00:18:44,529
website there euro Python app now one

00:18:41,929 --> 00:18:47,029
final thing that I need to do before

00:18:44,529 --> 00:18:49,309
this website will be available as I need

00:18:47,029 --> 00:18:50,809
to tell the app Service which port my

00:18:49,309 --> 00:18:54,409
container is listening on so that was

00:18:50,809 --> 00:18:57,619
port 8000 that's what I had used so if I

00:18:54,409 --> 00:18:59,929
go to I went to the Azure tab here which

00:18:57,619 --> 00:19:02,179
is added by the app service extension

00:18:59,929 --> 00:19:04,340
there's the Euro Python app that I just

00:19:02,179 --> 00:19:06,139
created here are the different

00:19:04,340 --> 00:19:09,289
application settings which are all my

00:19:06,139 --> 00:19:11,480
environment variables so if I right

00:19:09,289 --> 00:19:17,840
click here add a new setting say

00:19:11,480 --> 00:19:22,489
websites port put 8,000 in there this

00:19:17,840 --> 00:19:23,809
container will now be available so now

00:19:22,489 --> 00:19:27,379
I'll browse to the website so the first

00:19:23,809 --> 00:19:28,820
time the website gets hit it actually

00:19:27,379 --> 00:19:30,440
takes about a minute to load because

00:19:28,820 --> 00:19:33,019
it's downloading that docker container

00:19:30,440 --> 00:19:34,549
from the azure registry so I thought

00:19:33,019 --> 00:19:36,980
right now I just take any quick

00:19:34,549 --> 00:19:38,960
questions I've like time for one

00:19:36,980 --> 00:19:41,889
question if anyone is sort of lost or

00:19:38,960 --> 00:19:41,889
has everything yes sir

00:19:53,400 --> 00:19:57,610
yes so the question was can we do it in

00:19:56,110 --> 00:20:03,340
different locations and can we isolate

00:19:57,610 --> 00:20:05,380
it from the outside web so yes so I

00:20:03,340 --> 00:20:07,690
deployed this one to Northern Europe we

00:20:05,380 --> 00:20:09,280
have locations all around the world

00:20:07,690 --> 00:20:11,680
actually there was a point where I could

00:20:09,280 --> 00:20:13,240
pick which region to deploy to I'm so

00:20:11,680 --> 00:20:15,700
yeah you would just pick which region

00:20:13,240 --> 00:20:18,179
that you want it to go to and yes there

00:20:15,700 --> 00:20:21,010
is a way to configure things behind

00:20:18,179 --> 00:20:22,720
virtual networks and VLANs and stuff

00:20:21,010 --> 00:20:25,300
like that just the default is that it's

00:20:22,720 --> 00:20:26,770
publicly exposed because that's the

00:20:25,300 --> 00:20:28,990
easiest thing to get started with but

00:20:26,770 --> 00:20:30,400
yeah I'd be happy to talk to you

00:20:28,990 --> 00:20:33,190
afterwards about how to get the it

00:20:30,400 --> 00:20:34,750
behind a virtual network cool so I said

00:20:33,190 --> 00:20:37,630
I had time for one question there's the

00:20:34,750 --> 00:20:39,190
app now deployed your Python app - your

00:20:37,630 --> 00:20:42,070
website's net you can all hit this on

00:20:39,190 --> 00:20:44,160
your phones if you feel like confirming

00:20:42,070 --> 00:20:47,679
that we actually live out there online

00:20:44,160 --> 00:20:49,900
all right so moving along so just a

00:20:47,679 --> 00:20:51,790
quick recap so we signed into Azure with

00:20:49,900 --> 00:20:53,920
vs code using the azure sign-in command

00:20:51,790 --> 00:20:56,350
we posted that code into the browser -

00:20:53,920 --> 00:20:58,660
authenticated we created an azure

00:20:56,350 --> 00:21:00,490
container registry so that we could

00:20:58,660 --> 00:21:02,080
actually host our docker container as

00:21:00,490 --> 00:21:03,220
part of that we created a resource group

00:21:02,080 --> 00:21:05,880
which would hold all of the other

00:21:03,220 --> 00:21:09,400
resources that we have for this web app

00:21:05,880 --> 00:21:13,390
we then logged in using docker login and

00:21:09,400 --> 00:21:15,880
then we built the image and we gave it a

00:21:13,390 --> 00:21:18,100
new tag and pushed it to that registry

00:21:15,880 --> 00:21:20,050
and then finally we right clicked I

00:21:18,100 --> 00:21:22,270
deployed the image to Azure app service

00:21:20,050 --> 00:21:26,650
and then we set the website port on it

00:21:22,270 --> 00:21:30,580
to 8,000 there cool so now we're gonna

00:21:26,650 --> 00:21:32,500
add some data to this website using our

00:21:30,580 --> 00:21:35,440
hosted Jupiter notebook service as your

00:21:32,500 --> 00:21:38,170
notebooks and cosmos DB which is a

00:21:35,440 --> 00:21:41,040
globally distributed document storage

00:21:38,170 --> 00:21:43,540
database but with very configurable

00:21:41,040 --> 00:21:46,630
trade-offs between throughput latency

00:21:43,540 --> 00:21:49,120
and things like that so it provides a

00:21:46,630 --> 00:21:50,980
lot of different flexibility for the

00:21:49,120 --> 00:21:53,380
schema you need so you can sort of get

00:21:50,980 --> 00:21:55,690
guaranteed performance and you can

00:21:53,380 --> 00:21:57,929
trade-off performance for various other

00:21:55,690 --> 00:22:01,899
factors

00:21:57,929 --> 00:22:05,710
okay so the first thing I'm going to do

00:22:01,899 --> 00:22:12,100
is I've got this if you go to notebooks

00:22:05,710 --> 00:22:13,330
a sure comm I have again it's a hosted

00:22:12,100 --> 00:22:15,190
jupiter notebook service but one of the

00:22:13,330 --> 00:22:17,889
cool things that allows you to do is

00:22:15,190 --> 00:22:19,509
make notebooks available publicly so

00:22:17,889 --> 00:22:22,419
i've got a notebook where i've done some

00:22:19,509 --> 00:22:24,789
analysis of some Stack Overflow surveys

00:22:22,419 --> 00:22:26,080
over the various years and so we're

00:22:24,789 --> 00:22:28,210
gonna take this data and we're actually

00:22:26,080 --> 00:22:30,669
going to put it into a database and then

00:22:28,210 --> 00:22:32,409
render a chart with our web app I'm

00:22:30,669 --> 00:22:33,610
going to pull down the code for for the

00:22:32,409 --> 00:22:37,750
chart stuff I'm not going to type all

00:22:33,610 --> 00:22:39,730
that here but so this is a public

00:22:37,750 --> 00:22:42,070
library you can actually clone this and

00:22:39,730 --> 00:22:44,169
then start running this code locally and

00:22:42,070 --> 00:22:46,000
so if you do that you should probably

00:22:44,169 --> 00:22:48,159
uncheck it just so that you know if you

00:22:46,000 --> 00:22:50,080
put some connection if you should you

00:22:48,159 --> 00:22:51,549
can clone it as a private notebook so

00:22:50,080 --> 00:22:53,110
that if you put any connection strings

00:22:51,549 --> 00:22:56,100
or anything like that and there people

00:22:53,110 --> 00:22:58,450
won't be able to get your credentials so

00:22:56,100 --> 00:22:59,980
I'll switch I would click this clone

00:22:58,450 --> 00:23:01,779
button here but I'm gonna switch over to

00:22:59,980 --> 00:23:02,950
one that I've already got cloned how

00:23:01,779 --> 00:23:05,830
many people here are familiar with

00:23:02,950 --> 00:23:07,629
Jupiter at notebooks great so I don't

00:23:05,830 --> 00:23:10,629
need to tell you too much about them but

00:23:07,629 --> 00:23:12,899
for for people who are new to them

00:23:10,629 --> 00:23:14,980
basically it allows you to run

00:23:12,899 --> 00:23:17,289
interactively and you can run code cells

00:23:14,980 --> 00:23:18,429
one at a time and view the output so I'm

00:23:17,289 --> 00:23:19,929
not gonna spend too much time on how

00:23:18,429 --> 00:23:21,399
this works but basically I've got some

00:23:19,929 --> 00:23:22,929
code in here that downloads Stack

00:23:21,399 --> 00:23:24,759
Overflow survey data it's one of my

00:23:22,929 --> 00:23:27,639
favorite demos to do because the data is

00:23:24,759 --> 00:23:31,360
all public for the last eight or so

00:23:27,639 --> 00:23:32,590
years and it grabs the totals of people

00:23:31,360 --> 00:23:34,929
who have indicated they're using all the

00:23:32,590 --> 00:23:36,490
different languages so one of the neat

00:23:34,929 --> 00:23:39,669
things here is that you can kind of view

00:23:36,490 --> 00:23:41,470
the intermediate data one cell at a time

00:23:39,669 --> 00:23:42,820
and so I kind of take you through how I

00:23:41,470 --> 00:23:45,100
actually go through and analyze and

00:23:42,820 --> 00:23:47,590
crunch this data to get to basically

00:23:45,100 --> 00:23:50,080
this this language and percent by your

00:23:47,590 --> 00:23:52,629
information at the very end it's all in

00:23:50,080 --> 00:23:54,759
this totals dictionary which which has

00:23:52,629 --> 00:23:56,799
the years that counts and the percents

00:23:54,759 --> 00:23:58,480
so this is this dictionary is what I

00:23:56,799 --> 00:24:02,139
actually want to push into as your

00:23:58,480 --> 00:24:04,000
cosmos DB so this is kind of where we're

00:24:02,139 --> 00:24:05,289
going to start with this demo is it's

00:24:04,000 --> 00:24:08,010
pushing this data from this notebook

00:24:05,289 --> 00:24:15,100
into cosmos

00:24:08,010 --> 00:24:17,890
so let me switch over here to vs code so

00:24:15,100 --> 00:24:22,480
the first thing I'm going to do is open

00:24:17,890 --> 00:24:24,580
up this cosmos DB tab you can create a

00:24:22,480 --> 00:24:29,020
new cosmos database in here by clicking

00:24:24,580 --> 00:24:31,210
again the plus sign those DB one two

00:24:29,020 --> 00:24:33,820
three four so we give the database a

00:24:31,210 --> 00:24:36,549
name we picked the API schema that we

00:24:33,820 --> 00:24:38,950
want to use Microsoft has a document DB

00:24:36,549 --> 00:24:41,380
sequel query language we also support

00:24:38,950 --> 00:24:44,380
MongoDB so if you want geo distributed

00:24:41,380 --> 00:24:45,909
 you can use this API and we

00:24:44,380 --> 00:24:49,330
have a few other ones but we're going to

00:24:45,909 --> 00:24:51,610
use the sequel one in this case and we

00:24:49,330 --> 00:24:55,090
put that in that same zero to add your

00:24:51,610 --> 00:24:56,620
resource group we'll all put it in this

00:24:55,090 --> 00:24:58,360
my new resource group and here we pick

00:24:56,620 --> 00:24:59,980
the location so I'm gonna put this one

00:24:58,360 --> 00:25:03,909
in north Europe where the other the

00:24:59,980 --> 00:25:06,250
other ones are but I already have this

00:25:03,909 --> 00:25:08,860
your Python database here that I've

00:25:06,250 --> 00:25:10,210
created and just for expediency I'm

00:25:08,860 --> 00:25:12,669
gonna use this because it takes about a

00:25:10,210 --> 00:25:14,649
minute to create this database so I've

00:25:12,669 --> 00:25:21,100
got a the first thing I'm going to do is

00:25:14,649 --> 00:25:23,140
copy the connection string so I'll just

00:25:21,100 --> 00:25:26,200
run this cell that imports the cosmos DB

00:25:23,140 --> 00:25:27,490
libraries and I'm gonna paste the

00:25:26,200 --> 00:25:31,179
connection string here into these

00:25:27,490 --> 00:25:34,419
variables so there's the key put the key

00:25:31,179 --> 00:25:38,350
there and there's the hostname so we'll

00:25:34,419 --> 00:25:40,450
put that in there and then I've got

00:25:38,350 --> 00:25:43,840
about five minutes to get this all out

00:25:40,450 --> 00:25:46,210
to the door alright so we run this this

00:25:43,840 --> 00:25:49,809
defines our variables this cell here

00:25:46,210 --> 00:25:53,679
creates a client to the document DB or

00:25:49,809 --> 00:25:56,350
to the cosmos DB this one creates a

00:25:53,679 --> 00:25:58,240
database in this case we're critic

00:25:56,350 --> 00:26:00,850
created database called stackoverflow

00:25:58,240 --> 00:26:03,580
and then this one will create a

00:26:00,850 --> 00:26:05,260
collection that will call the collection

00:26:03,580 --> 00:26:07,059
the results collection so we're gonna

00:26:05,260 --> 00:26:08,679
create basically a place to shove our

00:26:07,059 --> 00:26:10,929
pre-computer results from these surveys

00:26:08,679 --> 00:26:12,730
and then finally this query actually

00:26:10,929 --> 00:26:15,960
takes this totals dictionary that we had

00:26:12,730 --> 00:26:18,820
from above and inserts it as a document

00:26:15,960 --> 00:26:20,500
and then okay so it's inserted that into

00:26:18,820 --> 00:26:21,080
cosmos DB and just to make sure that we

00:26:20,500 --> 00:26:23,410
have it

00:26:21,080 --> 00:26:26,540
I've got a query here that selects

00:26:23,410 --> 00:26:30,140
basically from that database and shows

00:26:26,540 --> 00:26:32,300
the result down here okay so now I'm

00:26:30,140 --> 00:26:33,290
going to switch over to and now we want

00:26:32,300 --> 00:26:34,790
to actually display this information

00:26:33,290 --> 00:26:36,200
within the app so I'm going to switch

00:26:34,790 --> 00:26:38,780
over to an app which has a little bit

00:26:36,200 --> 00:26:47,030
more code in it so go back to the

00:26:38,780 --> 00:26:53,840
command line here and go to 0 to Azure

00:26:47,030 --> 00:26:55,640
flask cosmos and again I'll run code dot

00:26:53,840 --> 00:26:57,470
which I showed you earlier so that will

00:26:55,640 --> 00:26:59,720
just open up this version I've got this

00:26:57,470 --> 00:27:04,430
code on github same app with just a

00:26:59,720 --> 00:27:06,290
little bit more code and the main

00:27:04,430 --> 00:27:08,360
difference here is that we've added an

00:27:06,290 --> 00:27:11,120
API that reads the information from

00:27:08,360 --> 00:27:12,410
cosmos DB so the other thing is we've

00:27:11,120 --> 00:27:16,190
got the host and the key are read from

00:27:12,410 --> 00:27:20,810
environment variables here so what I

00:27:16,190 --> 00:27:22,070
want to do is go back to my well the

00:27:20,810 --> 00:27:29,480
first thing is I'm just going to rebuild

00:27:22,070 --> 00:27:33,440
this container compose up stop the one

00:27:29,480 --> 00:27:39,950
we had there and then we'll go to the

00:27:33,440 --> 00:27:45,010
azure tab and add those keys to the

00:27:39,950 --> 00:27:52,270
cosmos DB there's your euro Python app

00:27:45,010 --> 00:27:52,270
and the first one is cosmos DB host

00:27:52,990 --> 00:28:05,080
sorry I did that wrong well copy that

00:28:01,490 --> 00:28:05,080
from our database

00:28:16,020 --> 00:28:22,910
and there is the key piece will add

00:28:19,860 --> 00:28:22,910
cosmos dB

00:28:31,620 --> 00:28:37,350
so we'll set that there okay

00:28:33,990 --> 00:28:38,790
so we've built our container locally we

00:28:37,350 --> 00:28:40,559
just want to re push so if we want to

00:28:38,790 --> 00:28:42,480
update code and redeploy all we need to

00:28:40,559 --> 00:28:47,370
do is push a new version of the

00:28:42,480 --> 00:28:50,130
container and that will just only push

00:28:47,370 --> 00:28:52,110
the Delta layers that we've added and

00:28:50,130 --> 00:28:53,940
this time it actually should load faster

00:28:52,110 --> 00:28:55,080
so I'll just give it a quick restart to

00:28:53,940 --> 00:28:58,470
make sure it picks up the latest

00:28:55,080 --> 00:29:00,770
container and then I will browse to that

00:28:58,470 --> 00:29:00,770
site

00:29:06,650 --> 00:29:17,360
I caught it in the middle of the restart

00:29:10,250 --> 00:29:22,340
there so with any luck crossing my

00:29:17,360 --> 00:29:24,650
fingers will see a nice chart here there

00:29:22,340 --> 00:29:30,230
we go we've pulled data from cosmos DB

00:29:24,650 --> 00:29:33,920
and it's ready for ya you weren't

00:29:30,230 --> 00:29:35,810
expecting that to work for you thank you

00:29:33,920 --> 00:29:38,000
so just a quick recap and then we'll

00:29:35,810 --> 00:29:41,150
wrap up here we created the cosmos TV

00:29:38,000 --> 00:29:44,240
account from within the azure extension

00:29:41,150 --> 00:29:46,670
we ran code in our jupiter notebook to

00:29:44,240 --> 00:29:49,580
push that document into cosmos DB and

00:29:46,670 --> 00:29:51,440
then we added some environment variables

00:29:49,580 --> 00:29:54,080
to our application settings rebuilt the

00:29:51,440 --> 00:29:56,060
container pushed and restarted thanks

00:29:54,080 --> 00:29:57,590
for coming to the talk that's everything

00:29:56,060 --> 00:30:00,020
the code is available including slides

00:29:57,590 --> 00:30:01,280
and everything on this github URL if you

00:30:00,020 --> 00:30:03,410
want to know about more about anything

00:30:01,280 --> 00:30:05,060
we're doing at Microsoft with Python aka

00:30:03,410 --> 00:30:06,110
autumn s slash Python blog and I'm

00:30:05,060 --> 00:30:09,200
available here if you have more

00:30:06,110 --> 00:30:14,259
questions thank you

00:30:09,200 --> 00:30:14,259

YouTube URL: https://www.youtube.com/watch?v=I1cG1FRjFOQ


