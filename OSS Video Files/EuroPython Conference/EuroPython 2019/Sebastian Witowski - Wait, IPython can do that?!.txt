Title: Sebastian Witowski - Wait, IPython can do that?!
Publication date: 2019-09-03
Playlist: EuroPython 2019
Description: 
	"Wait, IPython can do that?!
[EuroPython 2019 - Talk - 2019-07-10 - Shanghai]
[Basel, CH]

By Sebastian Witowski

I've been programming in Python for over 7 years. And from the time someone introduced me to IPython, it immediately became my default Python REPL. I enjoyed the syntax highlighting, code completion or the instant access to the documentation. Over the years, I've picked up more and more tricks that IPython could do: embedding IPython sessions, starting IPython automatically when a test fails, taking advantage of the startup files, not to mention all the various magic functions.

It took me some time to discover all those features (if there is one thing I would like you to take away from this talk, itâ€™s that reading the documentation of a tool that you are using emevery day/em is probably a good idea) and in this talk, I will give an overview of what you can do with IPython REPL.

Some of the things I will talk about:
- Documentation with ? and ??, running shell functions in IPython, magic functions
- Profiles, startup files, configuration file, kernels, and extensions
- How to better use IPython for debugging
- How to use IPython for profiling
- Alternatives to IPython REPL

This talk is for you if you are a casual user of IPython - you know some of its features, but maybe not all of them and instead of reading through the documentation, you would prefer to see someone giving an overview of IPython features and how you can use them.

This talk is NOT for you if you are up to date with IPython documentation and you think you know most of its features.



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2019.europython.eu/events/speaker-release-agreement/

    "
Captions: 
	00:00:04,450 --> 00:00:09,590
all right let's start hi everyone I'm

00:00:07,490 --> 00:00:11,120
Sebastian I write Python code for living

00:00:09,590 --> 00:00:13,280
and I also teach people how to write

00:00:11,120 --> 00:00:15,230
Python code you can find me on Twitter

00:00:13,280 --> 00:00:17,240
so if you have some questions or

00:00:15,230 --> 00:00:19,640
comments that's probably the easiest way

00:00:17,240 --> 00:00:21,590
to find me and get in touch and I'm also

00:00:19,640 --> 00:00:24,260
sometimes blogging at this URL I have a

00:00:21,590 --> 00:00:25,520
few posts about ipython and I'm planning

00:00:24,260 --> 00:00:26,869
to actually write a few more as a

00:00:25,520 --> 00:00:30,529
follow-up to this talk so if you're

00:00:26,869 --> 00:00:32,449
interested go check it out and two

00:00:30,529 --> 00:00:34,340
technical remarks before we start so

00:00:32,449 --> 00:00:36,500
first there will be a lot of features

00:00:34,340 --> 00:00:38,329
that I want to talk about and when I

00:00:36,500 --> 00:00:40,239
speak publicly I tend to get nervous and

00:00:38,329 --> 00:00:42,770
when I get nervous I tend to speak fast

00:00:40,239 --> 00:00:44,420
so if you miss something and you want to

00:00:42,770 --> 00:00:46,820
come back or maybe you're sitting far

00:00:44,420 --> 00:00:48,739
you cannot see it here's the link to the

00:00:46,820 --> 00:00:52,790
slides I will also display this link at

00:00:48,739 --> 00:00:55,370
the end of my talk and also keep in mind

00:00:52,790 --> 00:00:58,430
that the music version 7.4 of ipython

00:00:55,370 --> 00:01:00,469
and 3.7 of Python so if you try to

00:00:58,430 --> 00:01:02,059
reproduce some of the things and they

00:01:00,469 --> 00:01:06,380
won't work just make sure to update

00:01:02,059 --> 00:01:08,539
ipython and python to those versions so

00:01:06,380 --> 00:01:11,300
why am i giving a talk about ipython

00:01:08,539 --> 00:01:11,990
well I've been using ipython for over

00:01:11,300 --> 00:01:14,929
six years

00:01:11,990 --> 00:01:17,179
and I thought that everyone else from

00:01:14,929 --> 00:01:19,819
the community is doing the same which

00:01:17,179 --> 00:01:22,190
apparently is not true some people don't

00:01:19,819 --> 00:01:23,539
know about ipython some people use just

00:01:22,190 --> 00:01:27,830
a small subset of its features

00:01:23,539 --> 00:01:29,780
so I mean ipython is much more than just

00:01:27,830 --> 00:01:31,459
syntax highlighting in top completions

00:01:29,780 --> 00:01:33,500
so I decided to gather all the most

00:01:31,459 --> 00:01:34,880
interesting features and show you how

00:01:33,500 --> 00:01:37,250
they can be used to boost your

00:01:34,880 --> 00:01:39,349
productivity we'll start with the basic

00:01:37,250 --> 00:01:43,160
and then we will move to more advanced

00:01:39,349 --> 00:01:45,679
stuff later so what is ipython exactly

00:01:43,160 --> 00:01:47,810
well for those of you who never heard

00:01:45,679 --> 00:01:50,030
about it I Python is the father of the

00:01:47,810 --> 00:01:51,890
Jupiter notebook project well took it on

00:01:50,030 --> 00:01:54,050
notebook and Jupiter notebook is the

00:01:51,890 --> 00:01:56,479
father of Jupiter notebook project yeah

00:01:54,050 --> 00:01:59,569
Jupiter project so I might almost

00:01:56,479 --> 00:02:03,440
initially created as 259 lines of code

00:01:59,569 --> 00:02:05,390
by Fernando Perez in 2001 and this code

00:02:03,440 --> 00:02:08,000
was just executed at Python startup and

00:02:05,390 --> 00:02:10,640
all it did at that time is to display

00:02:08,000 --> 00:02:12,799
numbered prompt store the input of each

00:02:10,640 --> 00:02:14,670
command in a global variable and import

00:02:12,799 --> 00:02:16,590
some libraries for Mathematica

00:02:14,670 --> 00:02:19,530
and the mathematical operations in

00:02:16,590 --> 00:02:22,410
plotting so it's been around for over 18

00:02:19,530 --> 00:02:25,050
years initially it was just interactive

00:02:22,410 --> 00:02:27,599
prompt for Python later it was turned

00:02:25,050 --> 00:02:30,599
into ipython notebooks to make data

00:02:27,599 --> 00:02:32,760
analysis easier then project Jupiter was

00:02:30,599 --> 00:02:35,010
born the idea behind it was to decouple

00:02:32,760 --> 00:02:37,140
the notebook part from the engine part

00:02:35,010 --> 00:02:39,690
so people could use the notebooks with

00:02:37,140 --> 00:02:41,190
different programming languages today

00:02:39,690 --> 00:02:45,209
project Jupiter is probably the most

00:02:41,190 --> 00:02:47,100
well known form of ipython but this talk

00:02:45,209 --> 00:02:48,750
is not about Jupiter if you're

00:02:47,100 --> 00:02:50,670
interested in learning more what TripIt

00:02:48,750 --> 00:02:53,760
er can do there is a great three hour

00:02:50,670 --> 00:02:57,120
long talk that was given at PyCon us in

00:02:53,760 --> 00:02:59,160
2017 by the core developers and long

00:02:57,120 --> 00:03:02,489
term users of ipython so you can check

00:02:59,160 --> 00:03:05,040
it out and even though I want to talk

00:03:02,489 --> 00:03:06,989
about IBM I won't talk about Jupiter or

00:03:05,040 --> 00:03:10,610
notebooks today most of the stuff that I

00:03:06,989 --> 00:03:12,870
will mention will also work with Jupiter

00:03:10,610 --> 00:03:15,030
so ipython is a repo

00:03:12,870 --> 00:03:17,670
for those of you not familiar with this

00:03:15,030 --> 00:03:20,100
term it stands for read eval print loop

00:03:17,670 --> 00:03:22,799
so it's a type of shell that reads a

00:03:20,100 --> 00:03:25,100
command evaluates it prints the results

00:03:22,799 --> 00:03:27,900
and wait for the next command

00:03:25,100 --> 00:03:30,630
so ipython is basically a Python wrapper

00:03:27,900 --> 00:03:32,900
on steroids like a massive dose of

00:03:30,630 --> 00:03:32,900
steroids

00:03:34,730 --> 00:03:40,290
it has syntax highlighting it has tab

00:03:37,799 --> 00:03:42,840
completion and not only for keywords

00:03:40,290 --> 00:03:44,850
modules methods and variables but also

00:03:42,840 --> 00:03:47,579
for files in your current directory or

00:03:44,850 --> 00:03:49,709
for the Unicode characters it has smart

00:03:47,579 --> 00:03:51,840
indentation so when you start writing a

00:03:49,709 --> 00:03:53,790
function or you start writing a loop and

00:03:51,840 --> 00:03:56,400
you press ENTER it will automatically

00:03:53,790 --> 00:03:57,900
indent the next line you can search in

00:03:56,400 --> 00:04:00,090
the history either with arrow up and

00:03:57,900 --> 00:04:02,700
down or by typing the part of the

00:04:00,090 --> 00:04:04,980
command to match then using arrows or by

00:04:02,700 --> 00:04:06,569
pressing ctrl R then typing some text

00:04:04,980 --> 00:04:10,109
and then pressing the arrows to switch

00:04:06,569 --> 00:04:11,220
between the results but that's just the

00:04:10,109 --> 00:04:14,100
tip of the iceberg

00:04:11,220 --> 00:04:16,109
so ipython also has extensions magic

00:04:14,100 --> 00:04:18,299
functions shell commands events hooks

00:04:16,109 --> 00:04:19,530
macros is fully configurable you can

00:04:18,299 --> 00:04:21,329
swap kernels you can use it for

00:04:19,530 --> 00:04:25,560
debugging a synchronous code and many

00:04:21,329 --> 00:04:27,720
many many many things so what I really

00:04:25,560 --> 00:04:28,380
love about ipython is how easily you can

00:04:27,720 --> 00:04:30,720
access the

00:04:28,380 --> 00:04:32,910
documentation of basically any object

00:04:30,720 --> 00:04:35,640
you can think of classes variables

00:04:32,910 --> 00:04:37,920
functions modules you name it all you

00:04:35,640 --> 00:04:39,540
have to do is to append or prepend a

00:04:37,920 --> 00:04:42,750
question mark to the name of the object

00:04:39,540 --> 00:04:44,670
and if you want to see the whole source

00:04:42,750 --> 00:04:48,510
code of an object you have to use two

00:04:44,670 --> 00:04:51,000
question marks instead also a nice trick

00:04:48,510 --> 00:04:52,560
so if you're not sure what's the name of

00:04:51,000 --> 00:04:54,870
the function that you want to call you

00:04:52,560 --> 00:04:57,450
can use stars as wildcards to see the

00:04:54,870 --> 00:04:59,490
functions matching certain strings so

00:04:57,450 --> 00:05:02,160
here I want to run a function from the

00:04:59,490 --> 00:05:04,290
OS module and I vaguely remember that it

00:05:02,160 --> 00:05:05,700
has something to do with a deer so I'm

00:05:04,290 --> 00:05:09,990
just listing all the functions

00:05:05,700 --> 00:05:11,940
containing deer in the name a Python

00:05:09,990 --> 00:05:13,440
stores the input and output of each

00:05:11,940 --> 00:05:15,750
command that you run in the current

00:05:13,440 --> 00:05:18,120
session it will also store the input of

00:05:15,750 --> 00:05:19,620
the previous sessions and if you enable

00:05:18,120 --> 00:05:22,280
it in the settings it will store the

00:05:19,620 --> 00:05:22,280
output as well

00:05:22,560 --> 00:05:26,190
if you want to access the cache input

00:05:24,450 --> 00:05:28,020
for a given cell there are many ways

00:05:26,190 --> 00:05:29,850
that you can do this i python will

00:05:28,020 --> 00:05:32,040
create a new global variable for each

00:05:29,850 --> 00:05:36,000
input command that you use or you can

00:05:32,040 --> 00:05:37,740
use underscore i h or in lists to access

00:05:36,000 --> 00:05:39,540
the previous commands just keep in mind

00:05:37,740 --> 00:05:42,900
that those two lists are indexed from

00:05:39,540 --> 00:05:44,790
one not from zero the same of the output

00:05:42,900 --> 00:05:46,200
caching you can access the output of

00:05:44,790 --> 00:05:48,150
each cell through one of the global

00:05:46,200 --> 00:05:53,130
variables or using one of two

00:05:48,150 --> 00:05:55,350
dictionaries that stores them you might

00:05:53,130 --> 00:05:58,410
be wondering why do I care about the

00:05:55,350 --> 00:06:00,480
input and output caching well did you

00:05:58,410 --> 00:06:02,820
ever run a command that return returns

00:06:00,480 --> 00:06:04,320
the value just to realize later that you

00:06:02,820 --> 00:06:09,300
actually want to do something with this

00:06:04,320 --> 00:06:11,400
value I did many many times and if it's

00:06:09,300 --> 00:06:13,860
a fast command then no problem you can

00:06:11,400 --> 00:06:16,440
rerun it but if it's a long-running

00:06:13,860 --> 00:06:19,020
command or maybe you just can't rerun it

00:06:16,440 --> 00:06:21,600
because you had authentication token and

00:06:19,020 --> 00:06:24,230
now it expired then you have a problem

00:06:21,600 --> 00:06:26,340
unless you're using ipython so

00:06:24,230 --> 00:06:27,750
everything is cached you can just go

00:06:26,340 --> 00:06:31,830
back and retrieve the value from the

00:06:27,750 --> 00:06:33,780
cache on the other hand if you don't

00:06:31,830 --> 00:06:36,000
want the cache if you don't want to

00:06:33,780 --> 00:06:37,710
cache the input for a given command you

00:06:36,000 --> 00:06:40,350
can put the semicolon at the end of the

00:06:37,710 --> 00:06:41,820
line ipython won't print the results and

00:06:40,350 --> 00:06:45,660
it will also won't store

00:06:41,820 --> 00:06:47,160
the results in the cache one of the

00:06:45,660 --> 00:06:50,310
coolest features of ipython are the

00:06:47,160 --> 00:06:52,350
magic functions so magic functions are a

00:06:50,310 --> 00:06:54,870
bunch of helper methods that starts with

00:06:52,350 --> 00:06:57,690
one or two percentage signs why the

00:06:54,870 --> 00:06:59,820
percentage sign well to distinguish them

00:06:57,690 --> 00:07:01,320
from standard Python functions as they

00:06:59,820 --> 00:07:03,330
behave slightly different for example

00:07:01,320 --> 00:07:05,700
they don't require parentheses when

00:07:03,330 --> 00:07:08,220
you're passing arguments just keep in

00:07:05,700 --> 00:07:09,870
mind that in Python the dunder method so

00:07:08,220 --> 00:07:11,730
metals that are starting with two

00:07:09,870 --> 00:07:14,220
underscores are also called

00:07:11,730 --> 00:07:15,780
magic functions or magic methods but

00:07:14,220 --> 00:07:19,070
those functions are something completely

00:07:15,780 --> 00:07:21,390
different than ipython magic functions

00:07:19,070 --> 00:07:23,670
so there are two types of magic

00:07:21,390 --> 00:07:26,190
functions line magics and cell magics

00:07:23,670 --> 00:07:27,510
line magic functions are similar to

00:07:26,190 --> 00:07:28,830
shell commands they don't require

00:07:27,510 --> 00:07:32,280
parentheses when you're passing

00:07:28,830 --> 00:07:34,410
arguments and if a function is starting

00:07:32,280 --> 00:07:36,870
with two percentage signs then it's a

00:07:34,410 --> 00:07:38,940
cell magic cell magics can accept

00:07:36,870 --> 00:07:40,920
multiple lines of input you can pass

00:07:38,940 --> 00:07:43,440
arguments right after the function name

00:07:40,920 --> 00:07:45,270
then you press ENTER and you type the

00:07:43,440 --> 00:07:48,000
input code that the magic function will

00:07:45,270 --> 00:07:50,010
run on to let the cell magic function

00:07:48,000 --> 00:07:51,750
know that you are done with typing the

00:07:50,010 --> 00:07:57,330
input and it should run now you need to

00:07:51,750 --> 00:08:00,390
press ENTER twice as of version 7.4 of

00:07:57,330 --> 00:08:02,820
ipython there were 124 magic functions

00:08:00,390 --> 00:08:05,670
now I'm going to discuss all of them one

00:08:02,820 --> 00:08:08,820
by one now I'm just kidding this is not

00:08:05,670 --> 00:08:10,170
a lecture at the University so I have

00:08:08,820 --> 00:08:12,330
some magic functions that I'm using

00:08:10,170 --> 00:08:14,520
quite often but it's still too much to

00:08:12,330 --> 00:08:16,140
discuss them especially since the

00:08:14,520 --> 00:08:18,600
documentation of those methods are

00:08:16,140 --> 00:08:19,920
pretty good so if there are some

00:08:18,600 --> 00:08:22,650
functions here that you don't recognize

00:08:19,920 --> 00:08:29,220
I suggest that you take a look and maybe

00:08:22,650 --> 00:08:30,660
you'll find them useful I will just

00:08:29,220 --> 00:08:34,800
quickly show you a few interesting ones

00:08:30,660 --> 00:08:36,599
as I said before ipython keeps the track

00:08:34,800 --> 00:08:38,310
of the commands that you run and the

00:08:36,599 --> 00:08:41,250
history function can be used to print

00:08:38,310 --> 00:08:43,469
those commands back it can be run with

00:08:41,250 --> 00:08:45,000
no parameters in this case it will print

00:08:43,469 --> 00:08:46,980
you the whole history of the current

00:08:45,000 --> 00:08:48,780
session or with the number specifying

00:08:46,980 --> 00:08:51,570
which line of the history you want to

00:08:48,780 --> 00:08:53,550
print I'm actually showing you the

00:08:51,570 --> 00:08:55,440
history because it's one of a few

00:08:53,550 --> 00:08:57,240
functions in ipython that can

00:08:55,440 --> 00:08:59,490
except a range of lines as a parameter

00:08:57,240 --> 00:09:01,080
and the range parameter is quite

00:08:59,490 --> 00:09:05,220
interesting so let's take a closer look

00:09:01,080 --> 00:09:07,560
at how it works there are a few ways you

00:09:05,220 --> 00:09:10,080
can specify a range of lines in ipython

00:09:07,560 --> 00:09:13,230
a simple one is to use a dash between

00:09:10,080 --> 00:09:15,900
two numbers you can also mix ranges and

00:09:13,230 --> 00:09:20,640
single lines so in the first example I'm

00:09:15,900 --> 00:09:22,500
selecting lines 2 3 5 7 8 and 9 it's

00:09:20,640 --> 00:09:26,340
also fine if the ranges are overlapping

00:09:22,500 --> 00:09:27,660
of or if they are duplicated and if you

00:09:26,340 --> 00:09:29,550
want to reference lines from the

00:09:27,660 --> 00:09:31,650
previous sessions you can specify the

00:09:29,550 --> 00:09:34,470
session number at the front slash and

00:09:31,650 --> 00:09:36,780
then the line number or a range it's

00:09:34,470 --> 00:09:38,640
great but usually you don't remember how

00:09:36,780 --> 00:09:42,690
many ipython sessions you had before

00:09:38,640 --> 00:09:45,690
like here I had 457 sessions when I was

00:09:42,690 --> 00:09:48,180
preparing this slide so ipython accepts

00:09:45,690 --> 00:09:50,880
a different notation you can use a tilde

00:09:48,180 --> 00:09:53,220
character prefix to say I want to print

00:09:50,880 --> 00:09:55,830
history from that many sessions before

00:09:53,220 --> 00:09:58,800
the current one so in the third example

00:09:55,830 --> 00:10:02,160
I'm printing the line number seven from

00:09:58,800 --> 00:10:04,050
two sessions ago also you can provide

00:10:02,160 --> 00:10:07,020
the session number and skip the range

00:10:04,050 --> 00:10:09,660
parameter that way I python will print

00:10:07,020 --> 00:10:12,240
the whole session and finally you can

00:10:09,660 --> 00:10:15,300
provide a range across multiple sessions

00:10:12,240 --> 00:10:17,130
so in the last example I'm selecting I'm

00:10:15,300 --> 00:10:19,830
printing the history from the first line

00:10:17,130 --> 00:10:25,860
eight sessions ago until the fifth line

00:10:19,830 --> 00:10:27,630
six sessions ago so even though writing

00:10:25,860 --> 00:10:29,760
multiple lines of code in ipython is

00:10:27,630 --> 00:10:31,530
easier than it is in the default Python

00:10:29,760 --> 00:10:33,900
repo because you have the small

00:10:31,530 --> 00:10:36,360
indentation you can always make it even

00:10:33,900 --> 00:10:39,089
easier with the Edit magic command it

00:10:36,360 --> 00:10:41,520
will open a temporary file in your

00:10:39,089 --> 00:10:44,430
favorite editor where you can type the

00:10:41,520 --> 00:10:46,790
code and after you save and close that

00:10:44,430 --> 00:10:49,560
file it will execute it in ipython and

00:10:46,790 --> 00:10:52,050
by favorite editor I mean the one that's

00:10:49,560 --> 00:10:54,390
defined in the editor or visual

00:10:52,050 --> 00:10:56,070
environment variables so if you don't

00:10:54,390 --> 00:10:58,050
set it up you will probably end up with

00:10:56,070 --> 00:11:02,250
the greatest text editor of all time or

00:10:58,050 --> 00:11:04,920
nano or women so each time you run the

00:11:02,250 --> 00:11:06,870
edit command ipython is going to open a

00:11:04,920 --> 00:11:08,620
new file so if you want to go back and

00:11:06,870 --> 00:11:10,990
edit the same file as last

00:11:08,620 --> 00:11:13,990
you have to pass the minus B parameter

00:11:10,990 --> 00:11:16,120
and also to save yourself typing the

00:11:13,990 --> 00:11:20,470
editing you can just press f2 this is a

00:11:16,120 --> 00:11:22,510
shortcut what's really cool about the

00:11:20,470 --> 00:11:24,520
edit command is that it can accept an

00:11:22,510 --> 00:11:26,500
argument and depending on what this

00:11:24,520 --> 00:11:28,990
argument is and it will behave

00:11:26,500 --> 00:11:31,480
differently so if it's a file name I

00:11:28,990 --> 00:11:34,150
python will open that file if it's a

00:11:31,480 --> 00:11:36,790
range of the input history I python will

00:11:34,150 --> 00:11:39,070
open a new file and copy the lines from

00:11:36,790 --> 00:11:41,380
the history to that file if it's a

00:11:39,070 --> 00:11:43,420
variable i python will open a new file

00:11:41,380 --> 00:11:46,060
and copy the content of that variable to

00:11:43,420 --> 00:11:47,980
that file if it's an object but not a

00:11:46,060 --> 00:11:50,830
variable for example if it's a function

00:11:47,980 --> 00:11:53,440
named ipython we'll try to figure out in

00:11:50,830 --> 00:11:55,480
which file you define this function open

00:11:53,440 --> 00:11:58,060
that file exactly on the line when the

00:11:55,480 --> 00:11:59,950
function definition is starting which is

00:11:58,060 --> 00:12:02,020
super cool and you can use it for

00:11:59,950 --> 00:12:05,740
example to monkey part some functions

00:12:02,020 --> 00:12:07,570
and finally if you recorded a macro you

00:12:05,740 --> 00:12:12,820
can pass the name of the macro to the

00:12:07,570 --> 00:12:15,940
edit command to edit the macro so run

00:12:12,820 --> 00:12:18,460
magic run magic will well run a python

00:12:15,940 --> 00:12:20,650
script and load all its data into the

00:12:18,460 --> 00:12:22,600
current name-space it seems pretty

00:12:20,650 --> 00:12:24,940
straightforward but i find it very

00:12:22,600 --> 00:12:27,220
useful when I'm writing a module or just

00:12:24,940 --> 00:12:29,470
a bunch of functions in a file and I

00:12:27,220 --> 00:12:30,100
want to test them if there is a bug in

00:12:29,470 --> 00:12:32,410
my module

00:12:30,100 --> 00:12:35,260
I can't just rain pour tit I would have

00:12:32,410 --> 00:12:37,390
to import this I can't just do from my

00:12:35,260 --> 00:12:39,580
module import my function I would have

00:12:37,390 --> 00:12:42,130
to import the reload function from the

00:12:39,580 --> 00:12:45,190
import Lib module and use that to reload

00:12:42,130 --> 00:12:49,120
my module which is a bit of a typing

00:12:45,190 --> 00:12:50,890
it's not 100% reliable and to be honest

00:12:49,120 --> 00:12:53,530
I'm usually forgetting the name of the

00:12:50,890 --> 00:12:54,820
import Lib library so instead of

00:12:53,530 --> 00:12:57,340
importing my modules I'm usually

00:12:54,820 --> 00:12:59,650
rerunning them I can run it how many

00:12:57,340 --> 00:13:02,080
times I want and each time I do this I

00:12:59,650 --> 00:13:04,450
pattern will update the current current

00:13:02,080 --> 00:13:08,140
namespace with the latest code from my

00:13:04,450 --> 00:13:10,630
module also as a bonus point there is a

00:13:08,140 --> 00:13:13,960
configuration option of ipython called

00:13:10,630 --> 00:13:16,060
auto reload if you enable it i patton

00:13:13,960 --> 00:13:17,800
will always reload the whole module

00:13:16,060 --> 00:13:20,160
before running a function from that

00:13:17,800 --> 00:13:20,160
module

00:13:20,730 --> 00:13:23,850
so there are many other magic functions

00:13:22,440 --> 00:13:26,070
that you can use for example to rerun

00:13:23,850 --> 00:13:28,710
some commands from the past or edit them

00:13:26,070 --> 00:13:30,900
and then rerun them to save commands as

00:13:28,710 --> 00:13:32,400
a macro save them in a file or in a

00:13:30,900 --> 00:13:35,040
paste bin so you can share them with

00:13:32,400 --> 00:13:37,170
someone to save macros variables and

00:13:35,040 --> 00:13:38,820
aliases because once you caused ipython

00:13:37,170 --> 00:13:40,770
sessions they are gone so you can save

00:13:38,820 --> 00:13:43,230
them in the database and retrieve them

00:13:40,770 --> 00:13:44,760
back in another session or you can just

00:13:43,230 --> 00:13:46,710
print a list of variables or functions

00:13:44,760 --> 00:13:52,230
that you have created in a nicely

00:13:46,710 --> 00:13:54,600
formatted way so far automatic functions

00:13:52,230 --> 00:13:56,220
that I mentioned were line magics as for

00:13:54,600 --> 00:13:57,630
the cell magics there is a whole

00:13:56,220 --> 00:13:59,850
collection of functions that we can use

00:13:57,630 --> 00:14:02,040
to run a piece of code written in a

00:13:59,850 --> 00:14:04,800
different programming language one of

00:14:02,040 --> 00:14:06,930
the most interesting cases until the end

00:14:04,800 --> 00:14:10,050
of this year is when you want to quickly

00:14:06,930 --> 00:14:12,780
test a piece of Python 2 code you can

00:14:10,050 --> 00:14:15,300
type double percentage Python 2 then

00:14:12,780 --> 00:14:18,630
write the code press ENTER to tois press

00:14:15,300 --> 00:14:21,150
ENTER twice and ipython executed with no

00:14:18,630 --> 00:14:23,640
problems it works with other languages

00:14:21,150 --> 00:14:27,480
like bash or Ruby or JavaScript out of

00:14:23,640 --> 00:14:28,980
the box and also notice how in the last

00:14:27,480 --> 00:14:31,470
example I don't know if you can see it

00:14:28,980 --> 00:14:35,970
but I pattern is actually correctly

00:14:31,470 --> 00:14:38,670
highlighting the Ruby syntax so what if

00:14:35,970 --> 00:14:41,160
those 124 magic functions are not enough

00:14:38,670 --> 00:14:43,770
well you can very easily create your own

00:14:41,160 --> 00:14:45,720
magic function all you have to do is to

00:14:43,770 --> 00:14:48,810
write a function and decorate it with

00:14:45,720 --> 00:14:51,180
either a register line magic or register

00:14:48,810 --> 00:14:54,540
sell magic decorator let's see an

00:14:51,180 --> 00:14:56,310
example so here I'm creating a magic

00:14:54,540 --> 00:15:00,330
function that will reverse any string

00:14:56,310 --> 00:15:01,740
that they pass first with we start with

00:15:00,330 --> 00:15:04,020
writing a function that takes an

00:15:01,740 --> 00:15:06,600
argument and returns the reversed

00:15:04,020 --> 00:15:09,090
version each line magic function should

00:15:06,600 --> 00:15:10,440
accept at least one parameter the string

00:15:09,090 --> 00:15:14,850
that will be passed to that function

00:15:10,440 --> 00:15:16,950
when we call it next we import the

00:15:14,850 --> 00:15:18,510
register line magic function and use it

00:15:16,950 --> 00:15:22,530
to decorate the function that we just

00:15:18,510 --> 00:15:24,750
created I'm passing a parameter to the

00:15:22,530 --> 00:15:27,360
decorator that will be used as the name

00:15:24,750 --> 00:15:29,310
of the magic function if I don't do this

00:15:27,360 --> 00:15:30,960
my new magic function will be called in

00:15:29,310 --> 00:15:34,499
the same way as the function that I'm

00:15:30,960 --> 00:15:36,719
decorating so in this case it would be

00:15:34,499 --> 00:15:37,979
magic so I want to change it to I want

00:15:36,719 --> 00:15:41,759
to change the name to something more

00:15:37,979 --> 00:15:43,829
descriptive finally after I run this

00:15:41,759 --> 00:15:46,049
code in ipython my new magic function is

00:15:43,829 --> 00:15:49,289
ready to use it will reverse anything

00:15:46,049 --> 00:15:50,639
that I pass and since all arguments do

00:15:49,289 --> 00:15:52,589
the magic functions are passed as

00:15:50,639 --> 00:15:54,509
strings I don't really have to worry

00:15:52,589 --> 00:15:58,409
about checking the types to see if I can

00:15:54,509 --> 00:16:00,629
reverse it or not creating sell magic

00:15:58,409 --> 00:16:02,189
functions is pretty similar and you can

00:16:00,629 --> 00:16:04,799
even create a function that will work

00:16:02,189 --> 00:16:06,779
both as a cell and line magic function

00:16:04,799 --> 00:16:08,759
if you want to learn more the

00:16:06,779 --> 00:16:11,489
documentation of ipython has some pretty

00:16:08,759 --> 00:16:13,499
simple examples and I also wrote a very

00:16:11,489 --> 00:16:15,479
short step-by-step guide on how to

00:16:13,499 --> 00:16:17,729
create a cell magic that will run the

00:16:15,479 --> 00:16:22,019
mypie type checker on a block block of

00:16:17,729 --> 00:16:24,659
code so creating magic functions is easy

00:16:22,019 --> 00:16:27,359
but to be able to run our magic function

00:16:24,659 --> 00:16:30,119
we have to copy and paste our code into

00:16:27,359 --> 00:16:32,369
ipython if you want to run our magic

00:16:30,119 --> 00:16:34,799
function often then each time you start

00:16:32,369 --> 00:16:37,499
a new session you have to paste this

00:16:34,799 --> 00:16:40,439
code into ipython which sounds terribly

00:16:37,499 --> 00:16:42,709
inconvenient so we might want to turn

00:16:40,439 --> 00:16:46,529
our magic function into an extension

00:16:42,709 --> 00:16:48,209
extensions in ipython are an easy way to

00:16:46,529 --> 00:16:50,459
make your magic functions reusable and

00:16:48,209 --> 00:16:52,139
to share them with the world and they

00:16:50,459 --> 00:16:54,659
are not limited only to the magic

00:16:52,139 --> 00:16:56,699
functions you can for example write some

00:16:54,659 --> 00:16:59,279
code that modifies any part of ipython

00:16:56,699 --> 00:17:01,470
from custom key bindings custom colors

00:16:59,279 --> 00:17:03,269
modification to the configuration and

00:17:01,470 --> 00:17:07,529
you can very easily turn that into

00:17:03,269 --> 00:17:09,209
extension to create an extension you

00:17:07,529 --> 00:17:12,509
need to create a file that contains the

00:17:09,209 --> 00:17:14,159
load ipython extension function this is

00:17:12,509 --> 00:17:15,779
the function that will be executed when

00:17:14,159 --> 00:17:17,610
you load the extension you can

00:17:15,779 --> 00:17:19,259
optionally add the unload ipython

00:17:17,610 --> 00:17:22,980
extension if you want to have your

00:17:19,259 --> 00:17:24,360
extension to be unloaded and then you

00:17:22,980 --> 00:17:28,529
need to save this file in a directory

00:17:24,360 --> 00:17:30,210
called ipython slash extensions okay

00:17:28,529 --> 00:17:33,539
that's a pretty bad explanation let's

00:17:30,210 --> 00:17:37,730
see an example let's say we want to turn

00:17:33,539 --> 00:17:37,730
our magic function into an extension

00:17:37,970 --> 00:17:44,460
that was the code of our magic function

00:17:41,330 --> 00:17:47,369
all we have to do is take this code put

00:17:44,460 --> 00:17:48,300
it inside load ipython extension keep in

00:17:47,369 --> 00:17:50,310
mind that this function

00:17:48,300 --> 00:17:53,580
should always accept one parameter the

00:17:50,310 --> 00:17:56,100
ipython object so even though we are not

00:17:53,580 --> 00:17:57,960
using it in our example we have to

00:17:56,100 --> 00:18:02,730
accept this parameter other otherwise

00:17:57,960 --> 00:18:04,290
ipython will complain and you have to

00:18:02,730 --> 00:18:06,930
save the function in a file called

00:18:04,290 --> 00:18:10,680
reverser py inside the extensions that a

00:18:06,930 --> 00:18:14,100
directory of ipython now if we start

00:18:10,680 --> 00:18:15,990
ipython and load our extension the magic

00:18:14,100 --> 00:18:20,970
function reverse will be available in

00:18:15,990 --> 00:18:22,770
our session all the load X magic method

00:18:20,970 --> 00:18:25,980
does is to find a file with a matching

00:18:22,770 --> 00:18:31,350
name and call the load ipython extension

00:18:25,980 --> 00:18:33,210
function from that file so you probably

00:18:31,350 --> 00:18:35,370
noticed this duplication warning and

00:18:33,210 --> 00:18:37,890
might be thinking why am i showing you

00:18:35,370 --> 00:18:41,520
something that is deprecated well it's

00:18:37,890 --> 00:18:44,490
not really deprecated it's just a subtle

00:18:41,520 --> 00:18:47,190
way of ipython telling you like hey I

00:18:44,490 --> 00:18:48,480
see you have created an extension how

00:18:47,190 --> 00:18:53,040
about you share it with others and

00:18:48,480 --> 00:18:54,720
publish it on pi PI so I don't think

00:18:53,040 --> 00:18:57,300
there is any point in publishing such a

00:18:54,720 --> 00:18:59,520
silly extension on pi PI but then again

00:18:57,300 --> 00:19:01,200
I don't need there is I don't think

00:18:59,520 --> 00:19:04,500
there is a need for a package that Pat's

00:19:01,200 --> 00:19:06,210
text left yet some languages think

00:19:04,500 --> 00:19:09,330
differently so of course we're gonna

00:19:06,210 --> 00:19:11,850
publish it so you can find a package

00:19:09,330 --> 00:19:13,950
here you can install it with peep and

00:19:11,850 --> 00:19:16,920
voila now you can reverse strings with a

00:19:13,950 --> 00:19:18,690
magic method in ipython so this package

00:19:16,920 --> 00:19:20,820
contains just the absolute minimum of

00:19:18,690 --> 00:19:23,040
code that you need to publish an ipython

00:19:20,820 --> 00:19:26,630
extension on PI P I so if you want to

00:19:23,040 --> 00:19:26,630
publish your own you can go check it out

00:19:26,900 --> 00:19:32,340
so that was how we can write and publish

00:19:29,220 --> 00:19:33,900
our extensions if on the other hand you

00:19:32,340 --> 00:19:35,930
want to see the extensions that other

00:19:33,900 --> 00:19:38,820
people have created there are two places

00:19:35,930 --> 00:19:42,240
first and biggest place is the extension

00:19:38,820 --> 00:19:44,760
index it's a wiki page on ipython github

00:19:42,240 --> 00:19:47,100
repository that contains a huge list of

00:19:44,760 --> 00:19:49,530
extensions just keep in mind that some

00:19:47,100 --> 00:19:51,360
extensions here can be quite old and you

00:19:49,530 --> 00:19:52,890
might have problems installing them but

00:19:51,360 --> 00:19:55,080
if you see an extension that you really

00:19:52,890 --> 00:19:57,720
like and you cannot install it just copy

00:19:55,080 --> 00:20:00,120
the code and paste it into ipython and

00:19:57,720 --> 00:20:01,800
that should work and the second place to

00:20:00,120 --> 00:20:04,050
find extensions is pi pi

00:20:01,800 --> 00:20:05,640
the Python ipython developers are

00:20:04,050 --> 00:20:07,470
actually recommending to put your

00:20:05,640 --> 00:20:10,320
extensions there and tack them with

00:20:07,470 --> 00:20:12,360
ipython tag but not everyone is tagging

00:20:10,320 --> 00:20:15,900
their extensions properly so simply

00:20:12,360 --> 00:20:18,630
searching for ipython or ipython magic

00:20:15,900 --> 00:20:21,540
on pipey I can return you some more more

00:20:18,630 --> 00:20:23,430
results so what kind of extensions

00:20:21,540 --> 00:20:25,590
people are creating well for example

00:20:23,430 --> 00:20:27,660
there is a Python SQL that lets you

00:20:25,590 --> 00:20:30,060
interact with SQL databases from ipython

00:20:27,660 --> 00:20:32,760
there is ipython cipher that lets you

00:20:30,060 --> 00:20:35,280
interact with now 4j or Django or M

00:20:32,760 --> 00:20:38,550
magic that lets you define django models

00:20:35,280 --> 00:20:41,370
on the fly the popularity of the those

00:20:38,550 --> 00:20:43,950
extensions is not very high many of them

00:20:41,370 --> 00:20:46,110
are below version 1.0 or have been

00:20:43,950 --> 00:20:48,710
abandoned a long time ago but sometimes

00:20:46,110 --> 00:20:51,510
you can actually find something useful

00:20:48,710 --> 00:20:54,110
so what else can you do with ipython you

00:20:51,510 --> 00:20:56,340
can for example run shell commands and

00:20:54,110 --> 00:20:59,190
any command that is starting with

00:20:56,340 --> 00:21:01,350
exclamation mark is treated as a shell

00:20:59,190 --> 00:21:04,110
command and some of the most common ones

00:21:01,350 --> 00:21:07,230
like the CD or LS can work even without

00:21:04,110 --> 00:21:08,030
the exclamation mark you can create

00:21:07,230 --> 00:21:10,410
aliases

00:21:08,030 --> 00:21:12,900
Alyce's in ipython are basically the

00:21:10,410 --> 00:21:14,610
same thing as aliases in Linux they let

00:21:12,900 --> 00:21:17,220
you call a system command under a

00:21:14,610 --> 00:21:20,930
different name and in ipython they can

00:21:17,220 --> 00:21:20,930
also accept positional parameters

00:21:20,960 --> 00:21:25,770
speaking of aliases there is actually

00:21:23,760 --> 00:21:28,950
cool and probably not very well known

00:21:25,770 --> 00:21:31,170
magic function called rehash ex it will

00:21:28,950 --> 00:21:34,380
load all the executables from the path

00:21:31,170 --> 00:21:36,540
variable into the ipython session which

00:21:34,380 --> 00:21:38,790
basically mean that now you can call any

00:21:36,540 --> 00:21:41,370
shell command right from ipython which

00:21:38,790 --> 00:21:44,220
is pretty cool little curiosity like

00:21:41,370 --> 00:21:47,520
here I'm starting an old rifle inside

00:21:44,220 --> 00:21:50,030
ipython rifle I want to go deep down and

00:21:47,520 --> 00:21:52,830
start more apples but I failed

00:21:50,030 --> 00:21:54,900
so ipython has a four different settings

00:21:52,830 --> 00:21:56,820
of how they're balls the exceptions

00:21:54,900 --> 00:21:59,670
should be and you can change between

00:21:56,820 --> 00:22:00,930
them with the X mode magic function you

00:21:59,670 --> 00:22:05,300
can select the lowest amount of

00:22:00,930 --> 00:22:09,270
information I'm a bit more verbose a

00:22:05,300 --> 00:22:11,520
context which is the default one and the

00:22:09,270 --> 00:22:14,570
most verbose which will also show you

00:22:11,520 --> 00:22:19,190
the local and global variables for each

00:22:14,570 --> 00:22:21,320
point in your stack trace and starting

00:22:19,190 --> 00:22:23,149
from version 7 of ipython you can

00:22:21,320 --> 00:22:25,249
execute a synchronous code by using a

00:22:23,149 --> 00:22:27,499
weight whatever you want so if you try

00:22:25,249 --> 00:22:29,119
to put away it in a top-level scope in

00:22:27,499 --> 00:22:32,179
standard Python rebel you will get a

00:22:29,119 --> 00:22:34,239
syntax error however ipython has

00:22:32,179 --> 00:22:36,169
implemented some hacks to make it work

00:22:34,239 --> 00:22:37,849
so if you're playing with some

00:22:36,169 --> 00:22:40,159
asynchronous code and you want to

00:22:37,849 --> 00:22:42,709
quickly await an asynchronous function

00:22:40,159 --> 00:22:44,329
this is a great way to do this just keep

00:22:42,709 --> 00:22:46,519
in mind that this is not actually a

00:22:44,329 --> 00:22:50,299
valid Python code so just don't do this

00:22:46,519 --> 00:22:53,179
on production and there is a demo mode

00:22:50,299 --> 00:22:55,729
in ipython to use it you have to create

00:22:53,179 --> 00:22:57,709
a Python file with some simple markup in

00:22:55,729 --> 00:23:01,519
the comments and then need to load that

00:22:57,709 --> 00:23:04,009
file into the demo object this is how it

00:23:01,519 --> 00:23:06,379
works in practice each time it called my

00:23:04,009 --> 00:23:08,869
demo object ipython will execute the

00:23:06,379 --> 00:23:11,329
next block of code from the demo in the

00:23:08,869 --> 00:23:13,190
current namespace so you'll have access

00:23:11,329 --> 00:23:15,289
to all the variables and functions that

00:23:13,190 --> 00:23:17,359
were created in that block of code and

00:23:15,289 --> 00:23:20,449
you can play with them before executing

00:23:17,359 --> 00:23:22,009
the next block so demo mode is pretty

00:23:20,449 --> 00:23:24,409
similar to what you can do with Jupiter

00:23:22,009 --> 00:23:26,719
notebooks and to be honest for a

00:23:24,409 --> 00:23:28,359
presentation outs take to Jupiter

00:23:26,719 --> 00:23:31,940
notebooks so people can actually see

00:23:28,359 --> 00:23:33,319
what code you are executing but if you

00:23:31,940 --> 00:23:35,149
live in a terminal and you want to

00:23:33,319 --> 00:23:36,619
impress your colleagues with a pretty

00:23:35,149 --> 00:23:41,299
cool coding demo for your next

00:23:36,619 --> 00:23:42,859
presentation this is a great tool so I

00:23:41,299 --> 00:23:45,349
buy tone comes with a lot of good

00:23:42,859 --> 00:23:47,029
defaults in fact I never actually felt I

00:23:45,349 --> 00:23:48,859
need to modify the configuration file

00:23:47,029 --> 00:23:50,989
but if you want to change something it's

00:23:48,859 --> 00:23:52,699
very easy to do this the default

00:23:50,989 --> 00:23:54,889
configuration lives in the ipython

00:23:52,699 --> 00:23:57,649
config file and this is where it's

00:23:54,889 --> 00:23:59,329
located for for the current user well

00:23:57,649 --> 00:24:01,459
actually when you first install ipython

00:23:59,329 --> 00:24:04,429
the file is not there you have to first

00:24:01,459 --> 00:24:06,409
run ipython profile create command that

00:24:04,429 --> 00:24:09,649
will generate the file with default

00:24:06,409 --> 00:24:11,419
values and if you look inside that file

00:24:09,649 --> 00:24:15,019
you will see a huge amount of options

00:24:11,419 --> 00:24:17,179
that you can change for example you can

00:24:15,019 --> 00:24:20,440
execute some lines of code that start up

00:24:17,179 --> 00:24:23,269
execute some files load extensions

00:24:20,440 --> 00:24:25,399
change the color schema change exception

00:24:23,269 --> 00:24:29,049
mode select a different editor to use

00:24:25,399 --> 00:24:29,049
with the Edit command stuff like

00:24:33,890 --> 00:24:40,290
if you look what else is inside ipython

00:24:36,870 --> 00:24:42,390
profile default folder you will see a

00:24:40,290 --> 00:24:44,340
bunch of directories most of them are

00:24:42,390 --> 00:24:47,820
internal to ipython so there is nothing

00:24:44,340 --> 00:24:49,910
interesting for us but there is one that

00:24:47,820 --> 00:24:52,500
is particularly interesting

00:24:49,910 --> 00:24:55,200
it's called startup and it lets you

00:24:52,500 --> 00:24:57,360
start a startup know it consent it

00:24:55,200 --> 00:25:00,000
contains a readme file that explains

00:24:57,360 --> 00:25:02,820
what's the purpose of this directory so

00:25:00,000 --> 00:25:04,980
basically any file with py or i py

00:25:02,820 --> 00:25:08,370
extension that you put in that directory

00:25:04,980 --> 00:25:09,809
will be executed when ipython starts so

00:25:08,370 --> 00:25:12,590
we can use this folder to define some

00:25:09,809 --> 00:25:15,179
helper methods or maybe magic functions

00:25:12,590 --> 00:25:17,070
remember when we wrote our magic method

00:25:15,179 --> 00:25:18,929
and we had to create an extension to be

00:25:17,070 --> 00:25:21,750
able to use our magic method between

00:25:18,929 --> 00:25:23,880
sessions well an easier solution would

00:25:21,750 --> 00:25:26,550
be to just create a file in the startup

00:25:23,880 --> 00:25:29,670
directory and put the code of our magic

00:25:26,550 --> 00:25:31,590
method there just keep in mind that

00:25:29,670 --> 00:25:34,650
whatever you put in that folder gets

00:25:31,590 --> 00:25:36,240
executed each time I python stars so if

00:25:34,650 --> 00:25:39,030
you put a bunch of slow functions there

00:25:36,240 --> 00:25:41,700
then is gonna make your Python startup

00:25:39,030 --> 00:25:42,960
ipython startup time very slow so in

00:25:41,700 --> 00:25:44,790
this case it's better to create a

00:25:42,960 --> 00:25:49,080
separate profile for those slow

00:25:44,790 --> 00:25:51,090
functions so profiles are like accounts

00:25:49,080 --> 00:25:54,030
on your computer each profile is a

00:25:51,090 --> 00:25:55,800
separate directory in ipython folder so

00:25:54,030 --> 00:25:59,220
each has its own configuration and

00:25:55,800 --> 00:26:01,590
startup files you can create a new

00:25:59,220 --> 00:26:03,150
profile by running ipython profile

00:26:01,590 --> 00:26:05,850
create command then you can start

00:26:03,150 --> 00:26:08,670
ipython with that profile by running

00:26:05,850 --> 00:26:11,340
ipython their stash profile equals full

00:26:08,670 --> 00:26:12,900
and if you don't specify which profile

00:26:11,340 --> 00:26:15,690
you want to use i patton will use the

00:26:12,900 --> 00:26:17,940
default one so for example i once had

00:26:15,690 --> 00:26:20,250
the profile just for debugging debugging

00:26:17,940 --> 00:26:22,530
and profiling my code and accent

00:26:20,250 --> 00:26:24,809
exceptions were said to be as verbose as

00:26:22,530 --> 00:26:26,910
possible and i was loading a few

00:26:24,809 --> 00:26:28,679
extensions for profiling but I was not

00:26:26,910 --> 00:26:32,010
debugging or profiling my code all the

00:26:28,679 --> 00:26:33,750
time so I instead of putting all those

00:26:32,010 --> 00:26:37,620
things into the default configuration

00:26:33,750 --> 00:26:39,090
I had a separate profile for that so we

00:26:37,620 --> 00:26:40,919
talked about magic functions and

00:26:39,090 --> 00:26:41,220
extensions before and I told you that a

00:26:40,919 --> 00:26:43,380
lot of

00:26:41,220 --> 00:26:45,059
extensions define magic functions that

00:26:43,380 --> 00:26:46,580
you can use but that's not the only

00:26:45,059 --> 00:26:48,809
thing you can do with the extensions

00:26:46,580 --> 00:26:50,789
another thing that you can do is to

00:26:48,809 --> 00:26:53,850
register some callbacks to ipython

00:26:50,789 --> 00:26:56,309
events ipython defines a set of events

00:26:53,850 --> 00:26:58,919
like before I run the code after I run

00:26:56,309 --> 00:27:01,049
the code after I start ipython and you

00:26:58,919 --> 00:27:02,669
can very easily plug custom function

00:27:01,049 --> 00:27:06,210
that will be executed during those

00:27:02,669 --> 00:27:08,130
events in general to be able to add a

00:27:06,210 --> 00:27:10,110
callback to an event we need three

00:27:08,130 --> 00:27:11,970
things first you need to create a

00:27:10,110 --> 00:27:13,860
callback function check out the

00:27:11,970 --> 00:27:16,320
documentation to see what parameters

00:27:13,860 --> 00:27:18,510
each callback will get then you need to

00:27:16,320 --> 00:27:20,250
define the load ipython extension

00:27:18,510 --> 00:27:22,830
function and register the callback

00:27:20,250 --> 00:27:25,559
inside pretty similar to what we did

00:27:22,830 --> 00:27:27,960
with the magic functions and finally as

00:27:25,559 --> 00:27:30,120
with all the extensions you need to load

00:27:27,960 --> 00:27:34,049
it to make it work so let's see how it

00:27:30,120 --> 00:27:35,970
works in practice let's say we want to

00:27:34,049 --> 00:27:38,340
make a function that will print the

00:27:35,970 --> 00:27:40,409
variables after the execution of each

00:27:38,340 --> 00:27:44,370
cell so this is all the code that we

00:27:40,409 --> 00:27:47,280
need for it first we create a class that

00:27:44,370 --> 00:27:49,860
will store our callback function so I'm

00:27:47,280 --> 00:27:51,929
using a class to store the reference to

00:27:49,860 --> 00:27:55,350
the ipython object that I will use

00:27:51,929 --> 00:27:57,750
inside my callback function then I'm

00:27:55,350 --> 00:27:59,730
defining the callback function the

00:27:57,750 --> 00:28:01,710
result parameter will be passed from the

00:27:59,730 --> 00:28:04,049
event so even though I'm not actually

00:28:01,710 --> 00:28:08,250
using it in my function I still have to

00:28:04,049 --> 00:28:10,020
put it in the function signature inside

00:28:08,250 --> 00:28:12,240
my callback function I'm calling the

00:28:10,020 --> 00:28:14,940
magic method whose to print the

00:28:12,240 --> 00:28:17,730
variables since it has to be a valid

00:28:14,940 --> 00:28:19,710
Python code I can't just use percentage

00:28:17,730 --> 00:28:22,770
whose as this is gonna give me a syntax

00:28:19,710 --> 00:28:25,020
error so this run line magic function is

00:28:22,770 --> 00:28:28,789
actually a way to call ipython magic

00:28:25,020 --> 00:28:31,350
functions from valid Python code and

00:28:28,789 --> 00:28:33,240
finally I'm registering the callback

00:28:31,350 --> 00:28:37,230
inside the load I python extension

00:28:33,240 --> 00:28:39,390
function and now I'm saving the file in

00:28:37,230 --> 00:28:42,419
my extensions directory as a var printer

00:28:39,390 --> 00:28:44,520
if I load it in ipython session it will

00:28:42,419 --> 00:28:47,809
automatically start working and printing

00:28:44,520 --> 00:28:47,809
the variables after itself

00:28:50,510 --> 00:28:55,910
so speaking of events there is also

00:28:53,420 --> 00:28:58,760
something quite interesting similar to

00:28:55,910 --> 00:29:01,190
events that is called Hookes ipython has

00:28:58,760 --> 00:29:03,260
a set of default default hooks that are

00:29:01,190 --> 00:29:05,630
executed at certain situations for

00:29:03,260 --> 00:29:08,120
example when you're opening the editor

00:29:05,630 --> 00:29:10,040
with edit magic command shutting down

00:29:08,120 --> 00:29:12,890
ipython or copying something from the

00:29:10,040 --> 00:29:14,930
clipboard the main difference between

00:29:12,890 --> 00:29:17,840
the events and hooks is how they are

00:29:14,930 --> 00:29:19,760
intended to work you can have a bunch of

00:29:17,840 --> 00:29:22,040
callback functions that are independent

00:29:19,760 --> 00:29:25,160
from each other and all of them will be

00:29:22,040 --> 00:29:27,380
called when an event happens hooks on

00:29:25,160 --> 00:29:29,480
the other hand will call only one

00:29:27,380 --> 00:29:31,460
function so if you have a multiple

00:29:29,480 --> 00:29:34,070
functions attached to the same hook

00:29:31,460 --> 00:29:36,770
ipython will call the first one and if

00:29:34,070 --> 00:29:39,500
it's successful it will stop but if the

00:29:36,770 --> 00:29:41,660
function throws an exception ipython

00:29:39,500 --> 00:29:43,610
will try to call the next function and

00:29:41,660 --> 00:29:47,660
the next and the next until it finds one

00:29:43,610 --> 00:29:49,760
that's actually successful so let's see

00:29:47,660 --> 00:29:51,800
an example of a hook here we are

00:29:49,760 --> 00:29:54,830
registering our own function that will

00:29:51,800 --> 00:29:56,930
be executed when the editor is open this

00:29:54,830 --> 00:29:59,980
function will try to use the jet editor

00:29:56,930 --> 00:30:02,210
instead of the default one an

00:29:59,980 --> 00:30:04,490
interesting piece of code is this try

00:30:02,210 --> 00:30:06,980
next exception it's used to indicate

00:30:04,490 --> 00:30:09,770
that this hook failed and I Patton

00:30:06,980 --> 00:30:11,990
should try to use the next function if

00:30:09,770 --> 00:30:14,540
for some reason there was a problem with

00:30:11,990 --> 00:30:16,580
the jet editor ipython will try to open

00:30:14,540 --> 00:30:20,270
another in another editor instead of

00:30:16,580 --> 00:30:22,520
failing moving on to the next feature

00:30:20,270 --> 00:30:24,710
debugging so ipython is my default

00:30:22,520 --> 00:30:26,450
debugging tool it all started because I

00:30:24,710 --> 00:30:28,310
was using sublime text for a very very

00:30:26,450 --> 00:30:30,740
long time and I only recently switched

00:30:28,310 --> 00:30:32,960
to visual studio code which has a pretty

00:30:30,740 --> 00:30:34,880
good debugger but using the one from my

00:30:32,960 --> 00:30:37,460
Python still works for me in most of the

00:30:34,880 --> 00:30:41,420
cases so how can I use ipython as my

00:30:37,460 --> 00:30:43,760
debugger well first thing that you can

00:30:41,420 --> 00:30:46,430
do is to embed ipython anywhere in your

00:30:43,760 --> 00:30:48,500
code to do that you need to import the

00:30:46,430 --> 00:30:51,170
embed function from my Python and then

00:30:48,500 --> 00:30:52,880
just call it I'd like to put those two

00:30:51,170 --> 00:30:55,040
statements on one line so I can remove

00:30:52,880 --> 00:30:57,260
them with just one keystroke and also

00:30:55,040 --> 00:30:59,150
old all the code linters will complain

00:30:57,260 --> 00:31:03,440
about it so I don't forget to remove it

00:30:59,150 --> 00:31:03,940
when I'm done now I can run my script

00:31:03,440 --> 00:31:06,159
and what

00:31:03,940 --> 00:31:08,259
the intern interpreter gets to that line

00:31:06,159 --> 00:31:10,690
in the code it will open the ipython

00:31:08,259 --> 00:31:12,730
shell I will have access to all the

00:31:10,690 --> 00:31:14,289
variables set at that point so I can

00:31:12,730 --> 00:31:17,320
poke around and see what's going on with

00:31:14,289 --> 00:31:19,029
my code when I'm done I just exit

00:31:17,320 --> 00:31:23,110
ipython and the code execution will

00:31:19,029 --> 00:31:25,269
continue also if I change some variables

00:31:23,110 --> 00:31:30,070
from ipython those changes will persist

00:31:25,269 --> 00:31:32,110
after I close the embedded session so

00:31:30,070 --> 00:31:34,120
embedding is nice but it's not really

00:31:32,110 --> 00:31:38,049
debugging to actually run the debugger

00:31:34,120 --> 00:31:39,909
you can run magic function run with the

00:31:38,049 --> 00:31:42,879
minus D parameter and then specify the

00:31:39,909 --> 00:31:45,250
file name ipython wildon run the file to

00:31:42,879 --> 00:31:48,759
the IP DB debugger and put a breakpoint

00:31:45,250 --> 00:31:50,320
on the first line i pdb debugger is just

00:31:48,759 --> 00:31:52,690
a wrapper around the standard p DB

00:31:50,320 --> 00:31:54,730
debugger that adds some features from

00:31:52,690 --> 00:31:57,299
ipython like syntax highlighting tab

00:31:54,730 --> 00:32:01,389
completion and other small improvements

00:31:57,299 --> 00:32:04,600
and now my favorite part of ipython the

00:32:01,389 --> 00:32:07,470
post-mortem debugger so imagine you're

00:32:04,600 --> 00:32:07,470
running a Python script

00:32:12,200 --> 00:32:23,350
a long-running Python script almost

00:32:21,110 --> 00:32:23,350
there

00:32:26,380 --> 00:32:32,990
suddenly it crashes because that's what

00:32:28,760 --> 00:32:35,600
programs do and you're probably sitting

00:32:32,990 --> 00:32:37,910
there and thinking man I wish I run this

00:32:35,600 --> 00:32:39,980
script of a debugger enabled now I have

00:32:37,910 --> 00:32:42,080
to enable the debugger run the slow

00:32:39,980 --> 00:32:46,070
function again and wait to see what's a

00:32:42,080 --> 00:32:48,920
problem right well now you don't at

00:32:46,070 --> 00:32:50,660
least not when you're using ipython so

00:32:48,920 --> 00:32:53,720
you can run the debug magic command

00:32:50,660 --> 00:32:55,130
after the exception happened and it will

00:32:53,720 --> 00:32:57,200
start the debugger for the last

00:32:55,130 --> 00:32:59,120
exception you can inspect variables move

00:32:57,200 --> 00:33:00,440
up and down the stack trace the same

00:32:59,120 --> 00:33:04,250
stuff as you can do with the standard

00:33:00,440 --> 00:33:05,960
debugger finally if you want to

00:33:04,250 --> 00:33:08,060
automatically start the debugger when

00:33:05,960 --> 00:33:10,160
the exception happens there is a magic

00:33:08,060 --> 00:33:16,160
function called PDB that you can use to

00:33:10,160 --> 00:33:18,440
enable this behavior so that was

00:33:16,160 --> 00:33:20,510
debugging another interesting set of

00:33:18,440 --> 00:33:23,420
functions is related to profiling your

00:33:20,510 --> 00:33:26,450
code if you're curious how slow your

00:33:23,420 --> 00:33:28,370
code is or what's more important where

00:33:26,450 --> 00:33:32,240
is the bottleneck I Patton has a few

00:33:28,370 --> 00:33:34,430
magic tricks up its sleeves the first

00:33:32,240 --> 00:33:36,350
magic function is called time it's the

00:33:34,430 --> 00:33:39,020
most simple way to measure the execution

00:33:36,350 --> 00:33:40,970
time of a piece of code it will just run

00:33:39,020 --> 00:33:42,920
your code once and print you how long it

00:33:40,970 --> 00:33:45,950
took according to the CPU clock and the

00:33:42,920 --> 00:33:47,600
world clock kind of boring so there is

00:33:45,950 --> 00:33:51,110
much more interesting function called

00:33:47,600 --> 00:33:53,060
time it by default it will automatically

00:33:51,110 --> 00:33:55,190
determine how many times your code

00:33:53,060 --> 00:33:57,650
should run to give you reliable results

00:33:55,190 --> 00:34:00,080
for a very fast function it might run a

00:33:57,650 --> 00:34:03,260
few thousand times and for a slow one it

00:34:00,080 --> 00:34:06,290
might just run a few times there's also

00:34:03,260 --> 00:34:07,970
a cell magic func so magic version of

00:34:06,290 --> 00:34:09,649
the time-it function it's more

00:34:07,970 --> 00:34:12,140
convenient if you want to profile code

00:34:09,649 --> 00:34:14,810
that has multiple lines one nice thing

00:34:12,140 --> 00:34:17,060
about the cell magic version is that

00:34:14,810 --> 00:34:19,700
after the arguments you can pass some

00:34:17,060 --> 00:34:23,020
setup code that will be executed but it

00:34:19,700 --> 00:34:23,020
won't be the part of the measurement

00:34:23,470 --> 00:34:27,980
once we know that our code is

00:34:25,730 --> 00:34:29,300
though we probably want to see why

00:34:27,980 --> 00:34:31,879
exactly it's slow

00:34:29,300 --> 00:34:34,940
what's taking so much time so we can run

00:34:31,879 --> 00:34:36,980
the P run magic function and it will

00:34:34,940 --> 00:34:39,020
show us a nice overview of how many

00:34:36,980 --> 00:34:40,790
times a given function was called what

00:34:39,020 --> 00:34:42,290
was the total time spent on calling

00:34:40,790 --> 00:34:45,889
those functions where a given function

00:34:42,290 --> 00:34:47,780
is located etc etcetera so here we can

00:34:45,889 --> 00:34:49,940
see that our slow function is running

00:34:47,780 --> 00:34:52,790
for 12 seconds and it's performing

00:34:49,940 --> 00:34:54,379
50-million function calls and most of

00:34:52,790 --> 00:34:58,040
the time is spent in a function called

00:34:54,379 --> 00:35:00,560
check factor in a file called my file py

00:34:58,040 --> 00:35:02,540
so now we can go there and check what's

00:35:00,560 --> 00:35:04,390
wrong with this function and if you can

00:35:02,540 --> 00:35:07,250
make it better

00:35:04,390 --> 00:35:10,670
another interesting type of profiler is

00:35:07,250 --> 00:35:12,890
line profiler the Piron will report how

00:35:10,670 --> 00:35:16,310
much time each function took but the

00:35:12,890 --> 00:35:18,380
line profiler or LP run will give you

00:35:16,310 --> 00:35:20,630
even more detailed information and show

00:35:18,380 --> 00:35:23,359
you a line by line report of how your

00:35:20,630 --> 00:35:25,550
code was executed since this profiler is

00:35:23,359 --> 00:35:27,200
not included by default with ipython you

00:35:25,550 --> 00:35:30,920
have to install it from pip and then

00:35:27,200 --> 00:35:33,800
load it as an extension once you do this

00:35:30,920 --> 00:35:35,600
you can use the magic LP run command now

00:35:33,800 --> 00:35:38,330
to run this profiler you need two things

00:35:35,600 --> 00:35:40,280
you need a statement so a function or a

00:35:38,330 --> 00:35:42,680
piece of code that will be executed and

00:35:40,280 --> 00:35:46,060
then you need to specify which functions

00:35:42,680 --> 00:35:48,530
you want to profile let's see an example

00:35:46,060 --> 00:35:50,810
so here I'm running a function called

00:35:48,530 --> 00:35:52,670
long-running script and I want my

00:35:50,810 --> 00:35:54,920
profiler to check two functions the

00:35:52,670 --> 00:35:57,920
long-running script itself and the one

00:35:54,920 --> 00:35:59,869
that it's called important function so

00:35:57,920 --> 00:36:01,760
line profile will generate this nice

00:35:59,869 --> 00:36:04,430
report for each function that I specify

00:36:01,760 --> 00:36:06,710
where I can see how many times each line

00:36:04,430 --> 00:36:08,900
was run how much time Python spent on

00:36:06,710 --> 00:36:10,970
this line and how many percent of a

00:36:08,900 --> 00:36:15,020
total running time was spent on that

00:36:10,970 --> 00:36:16,550
particular line and the last profiler I

00:36:15,020 --> 00:36:19,340
want to mention is called memory

00:36:16,550 --> 00:36:21,290
profiler and as the name suggests it can

00:36:19,340 --> 00:36:23,810
be used to profile the memory usage of

00:36:21,290 --> 00:36:25,790
your programs again to be able to use it

00:36:23,810 --> 00:36:29,359
we have to install it from pip first and

00:36:25,790 --> 00:36:30,980
then load the extension you run it

00:36:29,359 --> 00:36:32,780
basically in the same way as the line

00:36:30,980 --> 00:36:34,820
profiler so you specify which function

00:36:32,780 --> 00:36:36,589
you want to profile and then a statement

00:36:34,820 --> 00:36:39,529
that needs to be run

00:36:36,589 --> 00:36:40,880
and then you get output that is again

00:36:39,529 --> 00:36:43,219
similar to the one from the line

00:36:40,880 --> 00:36:45,170
profiler you see how the memory usage

00:36:43,219 --> 00:36:51,859
has changed between each line of your

00:36:45,170 --> 00:36:54,049
code so in ipython the evaluation part

00:36:51,859 --> 00:36:56,900
of repple happens in a separate process

00:36:54,049 --> 00:36:59,299
it means that the process evaluating

00:36:56,900 --> 00:37:01,430
your code called kernel can be decoupled

00:36:59,299 --> 00:37:04,039
from the rest of ipython it has one

00:37:01,430 --> 00:37:06,079
great advantage ipython is not limited

00:37:04,039 --> 00:37:08,239
just to python programming language you

00:37:06,079 --> 00:37:10,219
can easily swap kernels and use a

00:37:08,239 --> 00:37:12,380
completely different language the

00:37:10,219 --> 00:37:15,920
interface won't change but a different

00:37:12,380 --> 00:37:17,809
interpreter will be running your code so

00:37:15,920 --> 00:37:19,789
if you want to quickly run some Ruby or

00:37:17,809 --> 00:37:23,239
JavaScript code that's one way to do

00:37:19,789 --> 00:37:25,819
this so how can we change the kernel

00:37:23,239 --> 00:37:27,799
well first we have to find the kernel

00:37:25,819 --> 00:37:32,809
that we want to use on the list that is

00:37:27,799 --> 00:37:34,279
published at Jupiter github repo it will

00:37:32,809 --> 00:37:36,079
contain a link to the documentation

00:37:34,279 --> 00:37:38,329
explaining how to install the kernel

00:37:36,079 --> 00:37:40,609
since each kernel has a different

00:37:38,329 --> 00:37:43,489
dependencies there is no one standard

00:37:40,609 --> 00:37:47,660
way to install kernels so let's try to

00:37:43,489 --> 00:37:49,759
install the IDE julia package and once

00:37:47,660 --> 00:37:53,150
we do this we can start ipython with

00:37:49,759 --> 00:37:55,910
julia kernel as you can see the repple

00:37:53,150 --> 00:37:59,119
still looks the same but now you can use

00:37:55,910 --> 00:38:00,920
julia syntax and if we try to write

00:37:59,119 --> 00:38:04,699
Python then we're gonna get a syntax

00:38:00,920 --> 00:38:07,249
error so the new kernel will work with

00:38:04,699 --> 00:38:10,189
both ipython rebel and Jupiter notebooks

00:38:07,249 --> 00:38:11,900
and while installing a custom kernel to

00:38:10,189 --> 00:38:13,999
use with the notebooks is a pretty good

00:38:11,900 --> 00:38:16,489
idea installing a custom kernel just to

00:38:13,999 --> 00:38:19,039
use with ipython might be a bit of an

00:38:16,489 --> 00:38:21,229
overkill I mean nowadays programming

00:38:19,039 --> 00:38:23,209
languages have a very solid Rapallo of

00:38:21,229 --> 00:38:25,640
their own so it's probably easier to use

00:38:23,209 --> 00:38:28,969
that instead unless you really really

00:38:25,640 --> 00:38:30,799
want to use ipython all the time and if

00:38:28,969 --> 00:38:32,329
you really really love ipython there is

00:38:30,799 --> 00:38:34,309
still a bunch of crazy stuff that you

00:38:32,329 --> 00:38:35,839
can do but I don't have time to discuss

00:38:34,309 --> 00:38:38,749
them all so I'm just gonna quickly show

00:38:35,839 --> 00:38:40,400
some of them so you can enable auto

00:38:38,749 --> 00:38:44,390
calls so you don't have to use brackets

00:38:40,400 --> 00:38:46,309
when calling functions or you can start

00:38:44,390 --> 00:38:48,199
a line with a comma so you don't even

00:38:46,309 --> 00:38:49,990
have to put quotes around the parameters

00:38:48,199 --> 00:38:52,790
when calling a function

00:38:49,990 --> 00:38:54,620
you can enable the auto reloading that I

00:38:52,790 --> 00:38:56,570
mentioned before so you can change the

00:38:54,620 --> 00:38:58,280
imported modules on the fly and then you

00:38:56,570 --> 00:39:02,570
don't have to reinforce them each time

00:38:58,280 --> 00:39:04,190
and if you're writing doc tests you can

00:39:02,570 --> 00:39:09,020
turn on the doc test mode to make

00:39:04,190 --> 00:39:11,210
copying code from ipython easier and you

00:39:09,020 --> 00:39:13,340
can use ipython as your shell which

00:39:11,210 --> 00:39:15,080
would require for example changing the

00:39:13,340 --> 00:39:17,930
prompt to show you the current directory

00:39:15,080 --> 00:39:21,770
enable enabling auto calls and running

00:39:17,930 --> 00:39:23,870
rehash acts for all the aliases or you

00:39:21,770 --> 00:39:26,120
can add custom keyboard shortcuts or

00:39:23,870 --> 00:39:31,430
input transformations or if you're brave

00:39:26,120 --> 00:39:33,020
enough the ast transformations and since

00:39:31,430 --> 00:39:35,150
this is already a talk about the Python

00:39:33,020 --> 00:39:36,980
rebel replacement it wouldn't be fair to

00:39:35,150 --> 00:39:39,380
at least not mention the alternatives so

00:39:36,980 --> 00:39:43,520
there are three main ones B Python PT

00:39:39,380 --> 00:39:46,130
Python and conch-shell the first

00:39:43,520 --> 00:39:48,140
alternative is B Python in the quest of

00:39:46,130 --> 00:39:50,420
making a replacement for the default

00:39:48,140 --> 00:39:53,120
Python ripple be Python took a more

00:39:50,420 --> 00:39:55,370
lightweight approach it has a lot less

00:39:53,120 --> 00:39:57,260
features than ipython but it has the

00:39:55,370 --> 00:40:00,380
essential ones like syntax highlighting

00:39:57,260 --> 00:40:04,070
smart indentation auto completion and

00:40:00,380 --> 00:40:06,380
suggestions when you're typing and it

00:40:04,070 --> 00:40:08,900
has a very interesting feature called

00:40:06,380 --> 00:40:10,790
rewind that basically lets you remove

00:40:08,900 --> 00:40:13,280
the last command from the history like

00:40:10,790 --> 00:40:19,960
it never happened you can see it in the

00:40:13,280 --> 00:40:19,960
moment here this

00:40:20,950 --> 00:40:25,520
next there is Petey Python a Python

00:40:23,570 --> 00:40:27,920
rapper built on top of the prompt

00:40:25,520 --> 00:40:30,410
toolkit it's slightly more advanced than

00:40:27,920 --> 00:40:32,840
B Python as it combined it contains a

00:40:30,410 --> 00:40:34,640
bit more features the obvious ones are

00:40:32,840 --> 00:40:37,190
the syntax highlighting multi-line

00:40:34,640 --> 00:40:40,010
editing with smart indentation auto

00:40:37,190 --> 00:40:41,660
completion or shell commands but there

00:40:40,010 --> 00:40:44,030
are some more innovative ones like a

00:40:41,660 --> 00:40:46,100
syntax validation that checks your code

00:40:44,030 --> 00:40:48,290
if your code is correct

00:40:46,100 --> 00:40:51,170
actually before executing it i've Veeam

00:40:48,290 --> 00:40:55,630
or Emacs keybindings or those nice menus

00:40:51,170 --> 00:40:57,370
for configuration or the history and

00:40:55,630 --> 00:40:59,900
finally there is conch

00:40:57,370 --> 00:41:03,320
but conch is quite different than

00:40:59,900 --> 00:41:04,910
ipython B Python opt Python because it's

00:41:03,320 --> 00:41:07,430
not really a Python repo it's a shell

00:41:04,910 --> 00:41:09,670
it's a shell that's adding Python on top

00:41:07,430 --> 00:41:12,470
of bash so you can actually use both and

00:41:09,670 --> 00:41:14,150
it has a massive amount of features so

00:41:12,470 --> 00:41:16,130
if you're interested in want to learn

00:41:14,150 --> 00:41:18,650
more there are two good talks about

00:41:16,130 --> 00:41:20,630
conch first one is from Anthony who's

00:41:18,650 --> 00:41:22,820
the creator of conch and second one is

00:41:20,630 --> 00:41:25,340
from matias who's actually a core

00:41:22,820 --> 00:41:27,440
developer of ipython and a user and

00:41:25,340 --> 00:41:33,720
contributor to conch so we can go check

00:41:27,440 --> 00:41:42,040
them out and that's what that's all

00:41:33,720 --> 00:41:44,260
[Applause]

00:41:42,040 --> 00:41:45,970
so thank you for coming thank you for

00:41:44,260 --> 00:41:47,530
listening and I would also like to say

00:41:45,970 --> 00:41:49,300
thank you for the to the creators of

00:41:47,530 --> 00:41:50,859
ipython for making such an awesome tool

00:41:49,300 --> 00:41:59,440
so if we can give him a big hand that

00:41:50,859 --> 00:42:04,170
would be appreciated and we have time

00:41:59,440 --> 00:42:09,760
for questions okay do we have a question

00:42:04,170 --> 00:42:11,560
and again we have time to thank you for

00:42:09,760 --> 00:42:13,810
your great talk and for providing a link

00:42:11,560 --> 00:42:15,850
to the slides so that we can rewind them

00:42:13,810 --> 00:42:16,960
at a slower pace thank you very much and

00:42:15,850 --> 00:42:17,930
give another round of applause for

00:42:16,960 --> 00:42:21,150
Sebastian

00:42:17,930 --> 00:42:21,150

YouTube URL: https://www.youtube.com/watch?v=3i6db5zX3Rw


