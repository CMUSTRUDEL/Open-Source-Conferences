Title: Mark Smith - Publish a (Perfect) Python Package on PyPI
Publication date: 2019-09-03
Playlist: EuroPython 2019
Description: 
	"Publish a (Perfect) Python Package on PyPI
[EuroPython 2019 - Talk - 2019-07-10 - Shanghai]
[Basel, CH]

By Mark Smith

Always wanted to publish a package on PyPI, but didn't know where to start? This talk is for you! Starting with nothing, we'll build a package and publish it on PyPI using current best practices.

Learn how to structure your project and your code. Discover what goes in your coderequirements.txt/code and your codesetup.py/code. Ensure your code will work in different on different platforms! Document your code so people won't ask you loads of questions! Finally, learn how avoid doing any of this yourself.

This talk will cover: 


Why should you package your code for PyPI?
How to structure your project and your code, including why you need a codesrc/code folder!
Discover what goes in your codePipfile/code and your codesetup.py/code, and why. Learn the difference between installing your library to use it, and installing it to develop on it.
Write tests for your project, and run them using Tox.
Ensure your code will work in different on different platforms with
Continuous Integration!
Document your code so people won't ask you loads of questions!
How to actually get your code on PyPI using Twine.
Finally, learn how avoid doing any of this yourself (or avoid doing it twice) using CookieCutter templates.




License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2019.europython.eu/events/speaker-release-agreement/
Captions: 
	00:00:31,500 --> 00:00:35,520
spice speaks for 30 minutes anyway but I

00:00:33,840 --> 00:00:36,720
still have to talk about something first

00:00:35,520 --> 00:00:42,150
that's more important than Python

00:00:36,720 --> 00:00:44,580
packaging and that's me so my name is

00:00:42,150 --> 00:00:46,890
not gt2k but this is my handle more or

00:00:44,580 --> 00:00:48,120
less everywhere online feel free to

00:00:46,890 --> 00:00:51,350
follow me on Twitter I tweet about

00:00:48,120 --> 00:00:54,360
Python and brexit occasionally angrily

00:00:51,350 --> 00:00:56,070
so yeah my real name is Mark Smith I'm a

00:00:54,360 --> 00:00:58,470
developer advocate for next mode one of

00:00:56,070 --> 00:01:00,059
the conference sponsors I would be

00:00:58,470 --> 00:01:02,820
remiss if I didn't at least briefly talk

00:01:00,059 --> 00:01:04,500
about next mode we are a software as a

00:01:02,820 --> 00:01:06,090
service company we offer REST API is

00:01:04,500 --> 00:01:08,010
that allow you to do telecommunications

00:01:06,090 --> 00:01:09,630
and various other forms of communication

00:01:08,010 --> 00:01:12,300
including video streaming online to

00:01:09,630 --> 00:01:13,260
mobile devices and web server your web

00:01:12,300 --> 00:01:15,120
apps and things like that

00:01:13,260 --> 00:01:16,950
if that sounds interesting come and talk

00:01:15,120 --> 00:01:18,030
to us at the next mode booth or send me

00:01:16,950 --> 00:01:19,530
a tweet or come and talk to me around

00:01:18,030 --> 00:01:22,860
the conference I'm happy to talk about

00:01:19,530 --> 00:01:24,890
that another time so now I've talked

00:01:22,860 --> 00:01:30,720
about next mode let me talk about

00:01:24,890 --> 00:01:33,270
JavaScript so in March 2016 a developer

00:01:30,720 --> 00:01:36,810
removed a library called left pad from

00:01:33,270 --> 00:01:39,090
NPM the node.js equivalent of Pi P is a

00:01:36,810 --> 00:01:40,830
big web service holds packages when you

00:01:39,090 --> 00:01:41,970
need to pull down those packages and

00:01:40,830 --> 00:01:44,700
install them into your JavaScript

00:01:41,970 --> 00:01:46,500
application you run NPM and it downloads

00:01:44,700 --> 00:01:49,410
them and installs them so that you can

00:01:46,500 --> 00:01:51,780
access them from your program left pad

00:01:49,410 --> 00:01:54,090
so it broke lots of packages that

00:01:51,780 --> 00:01:56,490
depended on left pad it turns out that

00:01:54,090 --> 00:01:58,170
quite a lot of packages on NPM depended

00:01:56,490 --> 00:02:00,330
on left pad in fact it has been

00:01:58,170 --> 00:02:01,920
downloaded two million four hundred and

00:02:00,330 --> 00:02:05,490
eighty six thousand six hundred and

00:02:01,920 --> 00:02:08,429
ninety six times in the months before it

00:02:05,490 --> 00:02:12,000
was removed from and from the NPM

00:02:08,429 --> 00:02:15,030
repository it was just one function and

00:02:12,000 --> 00:02:16,650
it was 11 lines of code that padded a

00:02:15,030 --> 00:02:18,360
string to a certain length by adding

00:02:16,650 --> 00:02:20,760
characters to the start of our string

00:02:18,360 --> 00:02:22,650
and lots of people thought that this

00:02:20,760 --> 00:02:27,360
made the JavaScript community look kind

00:02:22,650 --> 00:02:29,640
of silly it's why would anybody publish

00:02:27,360 --> 00:02:31,800
a package that only consisted of 11

00:02:29,640 --> 00:02:34,080
lines of code why would anybody use a

00:02:31,800 --> 00:02:36,659
package that only consisted of 11 lines

00:02:34,080 --> 00:02:38,760
of code now I don't think it made the

00:02:36,659 --> 00:02:40,319
JavaScript community look silly I think

00:02:38,760 --> 00:02:42,780
actually it made the JavaScript

00:02:40,319 --> 00:02:44,069
community look pretty awesome now

00:02:42,780 --> 00:02:44,370
obviously there's some problems with the

00:02:44,069 --> 00:02:45,599
fact

00:02:44,370 --> 00:02:47,220
people can remove a package that

00:02:45,599 --> 00:02:49,230
everybody's depending on and kind of

00:02:47,220 --> 00:02:52,290
break the entire JavaScript community of

00:02:49,230 --> 00:02:55,440
software but in general why was this

00:02:52,290 --> 00:02:56,909
package published so if you don't agree

00:02:55,440 --> 00:02:57,739
that this made the JavaScript community

00:02:56,909 --> 00:03:03,030
look awesome

00:02:57,739 --> 00:03:05,370
feel free to fight me on Twitter so the

00:03:03,030 --> 00:03:07,200
left pad the left pad is not a problem

00:03:05,370 --> 00:03:11,819
left pad was a solution

00:03:07,200 --> 00:03:14,549
so because the JavaScript standard

00:03:11,819 --> 00:03:16,560
library is relatively small and doesn't

00:03:14,549 --> 00:03:18,299
contain lots of useful functions that

00:03:16,560 --> 00:03:20,459
say the Python library standard library

00:03:18,299 --> 00:03:22,760
does contain like the ability to left

00:03:20,459 --> 00:03:25,019
pad a string with some characters a

00:03:22,760 --> 00:03:29,040
developer wrote a solution for it

00:03:25,019 --> 00:03:31,859
himself and because NPM makes it easy to

00:03:29,040 --> 00:03:33,480
publish small items of code he did and

00:03:31,859 --> 00:03:35,640
he made that code available to other

00:03:33,480 --> 00:03:37,230
developers so that they then didn't have

00:03:35,640 --> 00:03:39,000
to reinvent the wheel and that means

00:03:37,230 --> 00:03:40,530
that we people can bug fix in one

00:03:39,000 --> 00:03:42,780
location they can submit peers to

00:03:40,530 --> 00:03:44,609
improve these eleven lines of code and

00:03:42,780 --> 00:03:47,489
then ultimately people can well ideally

00:03:44,609 --> 00:03:50,310
depend upon it now the alternative to

00:03:47,489 --> 00:03:51,900
this is copy and paste copy and paste I

00:03:50,310 --> 00:03:54,150
think you can agree is not how you

00:03:51,900 --> 00:03:55,799
should share your code because it's

00:03:54,150 --> 00:03:57,720
really easy to share with NPM people do

00:03:55,799 --> 00:03:58,980
and even with really small libraries and

00:03:57,720 --> 00:04:01,889
I don't think that's really the case

00:03:58,980 --> 00:04:03,900
with Python because people find Python

00:04:01,889 --> 00:04:05,250
packaging slightly fiddly it's there are

00:04:03,900 --> 00:04:08,370
some slightly odd things which we'll go

00:04:05,250 --> 00:04:10,500
through about putting your first Python

00:04:08,370 --> 00:04:11,700
package to pipe I do I made it difficult

00:04:10,500 --> 00:04:14,849
for myself to say that some of these

00:04:11,700 --> 00:04:18,180
sentences as well so people are a bit

00:04:14,849 --> 00:04:19,889
afraid of setup P why there is good

00:04:18,180 --> 00:04:22,680
documentation out there lots of it

00:04:19,889 --> 00:04:24,330
conflicts with each other but there is I

00:04:22,680 --> 00:04:25,320
think a growing movement to bring some

00:04:24,330 --> 00:04:27,449
of this stuff together and make it

00:04:25,320 --> 00:04:29,340
easier to find current best practices

00:04:27,449 --> 00:04:33,210
hopefully this talk will help a little

00:04:29,340 --> 00:04:34,830
bit so what I really want everybody in

00:04:33,210 --> 00:04:37,380
this room to feel at the end of this

00:04:34,830 --> 00:04:39,510
talk is confident to publish packages to

00:04:37,380 --> 00:04:41,550
pi PI relatively small packages maybe

00:04:39,510 --> 00:04:45,260
ideally pure Python packages which is

00:04:41,550 --> 00:04:47,099
what the example is going to be so I

00:04:45,260 --> 00:04:49,080
would like you all to make a package

00:04:47,099 --> 00:04:51,570
what we're going to do in this talk is I

00:04:49,080 --> 00:04:53,580
am going to show you how to make a

00:04:51,570 --> 00:04:55,950
package so the first thing the

00:04:53,580 --> 00:04:57,759
assumption is that you already have some

00:04:55,950 --> 00:04:59,499
code which is general enough

00:04:57,759 --> 00:05:00,460
or close to general enough that you

00:04:59,499 --> 00:05:02,379
think it would be useful for other

00:05:00,460 --> 00:05:04,659
people so let's take some useful

00:05:02,379 --> 00:05:07,270
general-purpose code like a function

00:05:04,659 --> 00:05:09,610
that prints hello world now who in this

00:05:07,270 --> 00:05:11,620
room hasn't written this program in some

00:05:09,610 --> 00:05:13,029
form exactly

00:05:11,620 --> 00:05:14,529
now that is totally wasted time

00:05:13,029 --> 00:05:16,240
everybody in this room has written this

00:05:14,529 --> 00:05:17,529
program wouldn't it be so much better if

00:05:16,240 --> 00:05:21,129
you could pip install it and call that

00:05:17,529 --> 00:05:23,169
code from somewhere else so that's what

00:05:21,129 --> 00:05:24,759
we're going to do also note there's an F

00:05:23,169 --> 00:05:27,969
string here F strings are awesome you

00:05:24,759 --> 00:05:28,870
should use them so the idea is you've

00:05:27,969 --> 00:05:30,069
written some code that you're proud of

00:05:28,870 --> 00:05:30,490
you would like to share it with the

00:05:30,069 --> 00:05:32,289
world

00:05:30,490 --> 00:05:34,029
so the first thing to do is extract it

00:05:32,289 --> 00:05:35,800
from your code base so that it is

00:05:34,029 --> 00:05:36,969
independent of that code base that's

00:05:35,800 --> 00:05:38,649
your problem I'm not going to show you

00:05:36,969 --> 00:05:40,300
how to do that in this case we're going

00:05:38,649 --> 00:05:45,639
to extract this code into a file called

00:05:40,300 --> 00:05:47,139
hello world py is a Python module next

00:05:45,639 --> 00:05:49,389
we're going to put that module in a

00:05:47,139 --> 00:05:51,159
source directory and I will explain

00:05:49,389 --> 00:05:53,620
towards the end of the talk why we did

00:05:51,159 --> 00:05:56,439
that for the moment just assume henyk is

00:05:53,620 --> 00:06:04,599
excitedly clapping for the second time

00:05:56,439 --> 00:06:07,060
today walk word so I'll explain why

00:06:04,599 --> 00:06:09,099
later but for the moment just just take

00:06:07,060 --> 00:06:10,990
this as correct practice and then in the

00:06:09,099 --> 00:06:12,999
same directory as the source directory

00:06:10,990 --> 00:06:14,110
the directory contains our source

00:06:12,999 --> 00:06:17,050
directory we were going to create our

00:06:14,110 --> 00:06:19,839
setup py file you can open it up in your

00:06:17,050 --> 00:06:22,209
favorite text editor or Python IDE and

00:06:19,839 --> 00:06:24,129
we will enter something like this into

00:06:22,209 --> 00:06:25,719
the file so the first thing to note here

00:06:24,129 --> 00:06:28,300
is that we're importing from setup tools

00:06:25,719 --> 00:06:29,649
not to dis utils dist utils you will

00:06:28,300 --> 00:06:30,969
still find documentation online that

00:06:29,649 --> 00:06:32,529
recommends importing from disk details

00:06:30,969 --> 00:06:36,279
don't do that it's not that powerful

00:06:32,529 --> 00:06:38,169
compared to setup tools pip already is

00:06:36,279 --> 00:06:39,849
distributed with setup tools so if you

00:06:38,169 --> 00:06:41,589
are installing packages with pip you

00:06:39,849 --> 00:06:45,189
have setup tools it's not a third-party

00:06:41,589 --> 00:06:47,589
dependency or so and then we have this

00:06:45,189 --> 00:06:49,330
function underneath it we call setup

00:06:47,589 --> 00:06:52,539
that we've imported from the setup tools

00:06:49,330 --> 00:06:54,159
tools module it's a bit weird just for

00:06:52,539 --> 00:06:56,080
now just don't think of it as a function

00:06:54,159 --> 00:06:57,459
call think of it as configuration each

00:06:56,080 --> 00:06:59,020
of those parameters is essentially a

00:06:57,459 --> 00:07:00,610
line of configuration that you are

00:06:59,020 --> 00:07:03,009
posited that you are telling you are

00:07:00,610 --> 00:07:05,469
giving to Pip to tell it how to install

00:07:03,009 --> 00:07:08,139
your package so this is pretty much the

00:07:05,469 --> 00:07:10,569
bare minimum setup information you need

00:07:08,139 --> 00:07:11,440
to provide so we start with a name name

00:07:10,569 --> 00:07:14,470
is what you pip

00:07:11,440 --> 00:07:16,330
stall so this is the name on pipe I that

00:07:14,470 --> 00:07:18,640
it will be uploaded under so people will

00:07:16,330 --> 00:07:20,740
have install it it doesn't have to be

00:07:18,640 --> 00:07:22,290
the name of the Python code that people

00:07:20,740 --> 00:07:25,120
with import it's a separate thing

00:07:22,290 --> 00:07:26,950
usually they're the same sometimes they

00:07:25,120 --> 00:07:29,230
are different we need to pick a version

00:07:26,950 --> 00:07:32,860
number here I've just started with zero

00:07:29,230 --> 00:07:35,350
zero one zero zero X version numbers and

00:07:32,860 --> 00:07:36,910
imply that it's unstable there is a good

00:07:35,350 --> 00:07:38,530
chance that the first few times you

00:07:36,910 --> 00:07:41,500
upload this to pi PI there will be a

00:07:38,530 --> 00:07:43,780
minor packaging mistake and so this is a

00:07:41,500 --> 00:07:45,310
good stage to start to upload packages

00:07:43,780 --> 00:07:46,930
to pi PI while you've still got this

00:07:45,310 --> 00:07:49,780
unstable version number so you're not

00:07:46,930 --> 00:07:51,730
worried about kind of breaking people

00:07:49,780 --> 00:07:53,260
seeing instability and it's not actually

00:07:51,730 --> 00:07:55,240
your codebase it's actually your

00:07:53,260 --> 00:07:55,930
packaging configuration then we have a

00:07:55,240 --> 00:07:57,670
description

00:07:55,930 --> 00:07:59,800
this is usually a one-liner at this

00:07:57,670 --> 00:08:02,140
point say hello is not a very useful

00:07:59,800 --> 00:08:04,660
description but we'll leave it at that

00:08:02,140 --> 00:08:07,810
then we have pi modules which is a list

00:08:04,660 --> 00:08:09,970
of the actual Python code modules so we

00:08:07,810 --> 00:08:11,260
have a file called hello world py so in

00:08:09,970 --> 00:08:12,730
here we're saying this is the code that

00:08:11,260 --> 00:08:14,700
we want to distribute so that's what

00:08:12,730 --> 00:08:18,010
people import not what they pip install

00:08:14,700 --> 00:08:20,890
and then finally again this is a kind of

00:08:18,010 --> 00:08:23,440
cargo cult copy and paste setup config

00:08:20,890 --> 00:08:25,210
we have this package dear line which is

00:08:23,440 --> 00:08:27,490
a map that sort of said empty string and

00:08:25,210 --> 00:08:30,520
source that all that is doing is telling

00:08:27,490 --> 00:08:32,800
setup tools that our code is under a

00:08:30,520 --> 00:08:34,270
source directory so don't worry put it

00:08:32,800 --> 00:08:38,080
in your code and forget about it

00:08:34,270 --> 00:08:40,990
after that so now we've we've got a

00:08:38,080 --> 00:08:43,780
package so let's build it potentially we

00:08:40,990 --> 00:08:45,640
could distribute it so we run the setup

00:08:43,780 --> 00:08:48,280
file we just created with the be distri

00:08:45,640 --> 00:08:49,900
all commands this tells it to create a

00:08:48,280 --> 00:08:51,700
wheeeeel file that's something that is

00:08:49,900 --> 00:08:53,710
appropriate for uploading to pi PI and

00:08:51,700 --> 00:08:55,150
it will spit out a load about but most

00:08:53,710 --> 00:08:56,740
of which i've deleted from here but the

00:08:55,150 --> 00:08:58,930
line that i've highlighted in bold up

00:08:56,740 --> 00:09:00,760
here is the one that's important so what

00:08:58,930 --> 00:09:03,550
that's saying is that it's just copied

00:09:00,760 --> 00:09:05,140
our HelloWorld py code file into the Lib

00:09:03,550 --> 00:09:06,970
directory which means that it will end

00:09:05,140 --> 00:09:08,680
up in in our wheel if that's not there

00:09:06,970 --> 00:09:11,530
then essentially there will be no code

00:09:08,680 --> 00:09:15,100
in we'll have an empty an empty wheel

00:09:11,530 --> 00:09:17,680
file and it won't work so we can now

00:09:15,100 --> 00:09:19,870
look at what's been created as that part

00:09:17,680 --> 00:09:22,150
of up B dis will command so here are the

00:09:19,870 --> 00:09:23,770
directories and files so remember we've

00:09:22,150 --> 00:09:24,170
only actually created two files so far

00:09:23,770 --> 00:09:26,450
hello

00:09:24,170 --> 00:09:30,170
world py and setup ey so everything else

00:09:26,450 --> 00:09:31,910
here it was created by setup tools so I

00:09:30,170 --> 00:09:33,589
have a few things here it's created an

00:09:31,910 --> 00:09:35,720
egg info directory in our source

00:09:33,589 --> 00:09:37,670
directory you'll want to get ignore this

00:09:35,720 --> 00:09:39,680
I'll show you how to do that in a moment

00:09:37,670 --> 00:09:41,500
this is horrible I wish it didn't do

00:09:39,680 --> 00:09:43,730
this I'm going to ignore it from now on

00:09:41,500 --> 00:09:45,500
then we have a built directory so this

00:09:43,730 --> 00:09:47,930
is where setup tools kind of moved our

00:09:45,500 --> 00:09:51,170
files to in the process of building our

00:09:47,930 --> 00:09:52,459
will file you will see the hello the

00:09:51,170 --> 00:09:53,959
error is not in the right place but you

00:09:52,459 --> 00:09:54,610
will see the hello world py file in

00:09:53,959 --> 00:09:57,199
there

00:09:54,610 --> 00:09:59,000
so again validated that our code is

00:09:57,199 --> 00:10:00,350
actually going to be in our will and

00:09:59,000 --> 00:10:02,329
then finally we've got the actual wheel

00:10:00,350 --> 00:10:03,470
file here and that it's put in our disk

00:10:02,329 --> 00:10:07,339
directories so that is our final

00:10:03,470 --> 00:10:09,019
distribution so now we can install it

00:10:07,339 --> 00:10:10,430
locally so this is just effectively

00:10:09,019 --> 00:10:11,750
testing our packaging so it's not

00:10:10,430 --> 00:10:15,290
testing our code but it's testing our

00:10:11,750 --> 00:10:18,260
setup py file so here we are going to

00:10:15,290 --> 00:10:21,410
pip install and then with the - e flag

00:10:18,260 --> 00:10:24,560
and the . . dot whatever you want to

00:10:21,410 --> 00:10:25,940
call it this can be confusing to people

00:10:24,560 --> 00:10:27,620
if you haven't seen this before

00:10:25,940 --> 00:10:31,220
just out of interest who hasn't seen

00:10:27,620 --> 00:10:33,410
this before yeah i thought so

00:10:31,220 --> 00:10:35,630
this is actually an essential command if

00:10:33,410 --> 00:10:37,940
you are building Python packages or

00:10:35,630 --> 00:10:39,860
rather they're essential flags so the -

00:10:37,940 --> 00:10:42,890
e normally when you install a Python

00:10:39,860 --> 00:10:45,320
package it installs it into your site

00:10:42,890 --> 00:10:47,029
packages folder inside your Python

00:10:45,320 --> 00:10:49,279
distribution it copies the code into

00:10:47,029 --> 00:10:50,899
your Python distribution we don't really

00:10:49,279 --> 00:10:52,550
want to do that while we're working on

00:10:50,899 --> 00:10:54,500
our project we wanted to just work with

00:10:52,550 --> 00:10:58,100
the code that's in our source directory

00:10:54,500 --> 00:10:59,899
so that's what - e does it essentially

00:10:58,100 --> 00:11:02,180
links to the code that you're working on

00:10:59,899 --> 00:11:03,769
instead of copying code into another

00:11:02,180 --> 00:11:04,730
location so that means we can once we've

00:11:03,769 --> 00:11:06,410
installed this package we can to

00:11:04,730 --> 00:11:07,970
continue to work with it continues to

00:11:06,410 --> 00:11:09,920
run it continue to write code against it

00:11:07,970 --> 00:11:11,660
without having these two copies of that

00:11:09,920 --> 00:11:13,699
code that it's just going to cause us

00:11:11,660 --> 00:11:15,800
problems further down the line the full

00:11:13,699 --> 00:11:18,050
stop at the end means install the

00:11:15,800 --> 00:11:20,360
package in the current directory so it's

00:11:18,050 --> 00:11:23,180
looking at the setup py file and so it's

00:11:20,360 --> 00:11:26,269
saying install this package by linking

00:11:23,180 --> 00:11:27,649
to the code that I'm working on will you

00:11:26,269 --> 00:11:28,760
run this every so often every time you

00:11:27,649 --> 00:11:30,199
change your setup your Wi-Fi you

00:11:28,760 --> 00:11:31,399
essentially run this again to make sure

00:11:30,199 --> 00:11:32,280
that your package is installing

00:11:31,399 --> 00:11:34,710
correctly and

00:11:32,280 --> 00:11:36,780
your your Python code is available to

00:11:34,710 --> 00:11:37,890
you so bear in mind our code is under a

00:11:36,780 --> 00:11:39,570
source directory at the moment so if we

00:11:37,890 --> 00:11:42,390
run Python in our current directory we

00:11:39,570 --> 00:11:46,290
can't import hello world yet because

00:11:42,390 --> 00:11:49,050
it's not in our path so let's in theory

00:11:46,290 --> 00:11:50,940
let's test it so here we run Python the

00:11:49,050 --> 00:11:52,710
repple and then we do our from hello

00:11:50,940 --> 00:11:55,050
world import say hello because we've

00:11:52,710 --> 00:11:57,390
just installed our code into our current

00:11:55,050 --> 00:11:58,260
virtual environments we can't this will

00:11:57,390 --> 00:11:59,580
work now

00:11:58,260 --> 00:12:01,800
even though our code is on to the source

00:11:59,580 --> 00:12:04,320
directory Python has been told where our

00:12:01,800 --> 00:12:06,030
code is by the setup py file so we can

00:12:04,320 --> 00:12:07,440
execute the say hello function we can

00:12:06,030 --> 00:12:09,180
execute it by passing at the optional

00:12:07,440 --> 00:12:11,130
parameter everything works as we would

00:12:09,180 --> 00:12:12,300
hope so that's it some rough testing

00:12:11,130 --> 00:12:13,860
we'll get on to better testing at a

00:12:12,300 --> 00:12:17,430
moment but it's just just a confirmation

00:12:13,860 --> 00:12:20,100
that our code is installing correctly so

00:12:17,430 --> 00:12:21,660
at this point we have a working package

00:12:20,100 --> 00:12:23,940
with some useful code in it so we could

00:12:21,660 --> 00:12:25,260
upload that to pi pi immediately but I

00:12:23,940 --> 00:12:27,210
would say that there's a few things that

00:12:25,260 --> 00:12:29,070
we really need to do before we get to

00:12:27,210 --> 00:12:31,260
that point that's documentation and

00:12:29,070 --> 00:12:32,550
testing but also just a little bit of

00:12:31,260 --> 00:12:35,340
housekeeping which I'll run through now

00:12:32,550 --> 00:12:36,810
so as I said there's some files created

00:12:35,340 --> 00:12:39,360
that you really don't want to add to

00:12:36,810 --> 00:12:42,420
your git repository so as useful forget

00:12:39,360 --> 00:12:44,670
ignore file this website is fantastic

00:12:42,420 --> 00:12:47,640
they make it easy to get hold of github

00:12:44,670 --> 00:12:50,040
z' standard get ignore files that they

00:12:47,640 --> 00:12:52,020
publish for different language and

00:12:50,040 --> 00:12:54,180
operating system communities so you

00:12:52,020 --> 00:12:56,130
would write Python in that text box hit

00:12:54,180 --> 00:12:57,780
create and it will just spit out a text

00:12:56,130 --> 00:12:59,100
file into the web browser that you can

00:12:57,780 --> 00:13:01,140
copy and paste into a dot git ignore

00:12:59,100 --> 00:13:03,150
file so now we're ignoring all the main

00:13:01,140 --> 00:13:05,310
files that Python creates so it will

00:13:03,150 --> 00:13:06,780
stop you from uploading pyc files and a

00:13:05,310 --> 00:13:09,300
bunch of other artifacts on a python

00:13:06,780 --> 00:13:10,980
project if we're going to publish this

00:13:09,300 --> 00:13:12,150
code we also need a license if we don't

00:13:10,980 --> 00:13:13,650
have a license we haven't given

00:13:12,150 --> 00:13:15,330
permission to people permission to run

00:13:13,650 --> 00:13:17,400
our code they can look at it but they

00:13:15,330 --> 00:13:19,440
can't copy it or use it which is not

00:13:17,400 --> 00:13:22,350
greatly useful so we need a license dot

00:13:19,440 --> 00:13:23,940
txt file and a good way to if you if you

00:13:22,350 --> 00:13:26,730
don't know the ins and outs of the

00:13:23,940 --> 00:13:28,050
different licenses and the restrictions

00:13:26,730 --> 00:13:29,730
and freedoms they grant the software

00:13:28,050 --> 00:13:32,070
that you're publishing and this website

00:13:29,730 --> 00:13:34,140
choose a license com is incredibly

00:13:32,070 --> 00:13:35,790
useful it essentially ask you lots of

00:13:34,140 --> 00:13:37,290
questions and then gives you your

00:13:35,790 --> 00:13:39,060
options and how they compare to each

00:13:37,290 --> 00:13:41,520
other so it's a good way it's a human

00:13:39,060 --> 00:13:42,600
way for non legal people to understand

00:13:41,520 --> 00:13:45,380
the differences between different

00:13:42,600 --> 00:13:45,380
software licenses

00:13:46,750 --> 00:13:50,560
we need to add some classifiers to our

00:13:48,910 --> 00:13:52,720
setup py file so that people can find

00:13:50,560 --> 00:13:55,779
the project in pi PI by searching on or

00:13:52,720 --> 00:13:57,820
filtering on Common Criteria so here we

00:13:55,779 --> 00:14:00,070
say that this is Python 3 code it runs

00:13:57,820 --> 00:14:02,740
under Python 3.6 and 3.7 we haven't

00:14:00,070 --> 00:14:04,240
really tested that yet but but we know

00:14:02,740 --> 00:14:05,260
that it only runs under those versions

00:14:04,240 --> 00:14:07,210
of Python because weather was an F

00:14:05,260 --> 00:14:08,980
string in the code as I pointed out I

00:14:07,210 --> 00:14:10,810
chose the gplv2

00:14:08,980 --> 00:14:12,640
so put that in there that was a bit of

00:14:10,810 --> 00:14:15,400
an arbitrary choice and these can all be

00:14:12,640 --> 00:14:17,410
looked up in this URL at the bottom ypi

00:14:15,400 --> 00:14:19,720
dogs classify it classifies there's a

00:14:17,410 --> 00:14:21,850
bunch of them try and be as try and

00:14:19,720 --> 00:14:23,920
apply all the useful classifiers to your

00:14:21,850 --> 00:14:26,370
project so that you're describing what

00:14:23,920 --> 00:14:28,510
this project is for and how it's used

00:14:26,370 --> 00:14:30,310
then you need some documentation but

00:14:28,510 --> 00:14:31,540
before you write some documentation you

00:14:30,310 --> 00:14:32,830
need to work out what format you're

00:14:31,540 --> 00:14:35,380
going to write your documentation and

00:14:32,830 --> 00:14:38,110
you basically have two choices at the

00:14:35,380 --> 00:14:40,300
moment one is restructured text which is

00:14:38,110 --> 00:14:41,980
written in Python it's used widely in

00:14:40,300 --> 00:14:43,540
the Python community all over the place

00:14:41,980 --> 00:14:45,460
and core documentation is written in it

00:14:43,540 --> 00:14:48,130
a whole bunch of the libraries you use

00:14:45,460 --> 00:14:50,200
have written in restructured text but it

00:14:48,130 --> 00:14:51,430
is a Python solution and if you're

00:14:50,200 --> 00:14:53,230
working on a project that has some

00:14:51,430 --> 00:14:54,910
Python code and maybe some rust code or

00:14:53,230 --> 00:14:56,700
some C code or something like that those

00:14:54,910 --> 00:14:59,260
people will will probably not have a

00:14:56,700 --> 00:15:00,610
encountered restructure text before but

00:14:59,260 --> 00:15:02,350
they will probably have encountered

00:15:00,610 --> 00:15:06,070
markdown and markdown is a valid choice

00:15:02,350 --> 00:15:07,780
it is simpler but also less powerful so

00:15:06,070 --> 00:15:10,150
you'll really choose you're making some

00:15:07,780 --> 00:15:12,460
compromises here both of them allow you

00:15:10,150 --> 00:15:15,100
to use tools like Sphinx to restructure

00:15:12,460 --> 00:15:17,410
text or make ducts for markdown to

00:15:15,100 --> 00:15:20,410
compile a directory of markdown or rest

00:15:17,410 --> 00:15:22,750
files into a directory of documentation

00:15:20,410 --> 00:15:25,360
that's all linked together and both of

00:15:22,750 --> 00:15:26,860
these are supported by read the docs so

00:15:25,360 --> 00:15:29,440
you can publish either of these

00:15:26,860 --> 00:15:30,850
documentation kind of sites to read the

00:15:29,440 --> 00:15:32,339
docs and then not have to worry about

00:15:30,850 --> 00:15:34,690
hosting them yourself

00:15:32,339 --> 00:15:37,810
so once we've decided and I've chosen

00:15:34,690 --> 00:15:39,459
markdown again kind of arbitrarily we

00:15:37,810 --> 00:15:42,430
need to write a readme that's pretty

00:15:39,459 --> 00:15:43,959
much essential for a modern project here

00:15:42,430 --> 00:15:46,029
we have a title the title of the project

00:15:43,959 --> 00:15:48,190
we have a small paragraph describing

00:15:46,029 --> 00:15:50,770
what the project does we should have a

00:15:48,190 --> 00:15:53,440
section describing how to install the

00:15:50,770 --> 00:15:55,209
project with some sample command line

00:15:53,440 --> 00:15:56,459
code for install for pip installing this

00:15:55,209 --> 00:15:59,100
project

00:15:56,459 --> 00:16:00,809
we should have some sample code just

00:15:59,100 --> 00:16:04,199
tell people how to use the useful code

00:16:00,809 --> 00:16:05,759
that we published two pi pi and then

00:16:04,199 --> 00:16:08,129
once we've written this it's nice to

00:16:05,759 --> 00:16:09,990
have this also published on pi PI so as

00:16:08,129 --> 00:16:11,160
well as publishing on say github or get

00:16:09,990 --> 00:16:13,499
lab or wherever you're publishing your

00:16:11,160 --> 00:16:15,480
code it would be really nice if we could

00:16:13,499 --> 00:16:17,850
insert make this essentially the

00:16:15,480 --> 00:16:20,970
official description of our project and

00:16:17,850 --> 00:16:23,040
we can do that so this again this is

00:16:20,970 --> 00:16:25,709
even if you've published packages before

00:16:23,040 --> 00:16:29,519
and you used restructured text to write

00:16:25,709 --> 00:16:32,100
your readme this is now a new feature in

00:16:29,519 --> 00:16:33,689
pi PI as of about a year ago pi PI

00:16:32,100 --> 00:16:34,889
supports markdown directly so you don't

00:16:33,689 --> 00:16:36,629
need to convert your markdown to

00:16:34,889 --> 00:16:38,850
restructure text before pushing it up to

00:16:36,629 --> 00:16:40,379
PI pi so here I've just got we're taking

00:16:38,850 --> 00:16:42,389
advantage of the fact that sets up py

00:16:40,379 --> 00:16:45,209
file is code and not configuration by

00:16:42,389 --> 00:16:48,509
opening the readme file reading in this

00:16:45,209 --> 00:16:50,759
this block of markdown and then we apply

00:16:48,509 --> 00:16:52,259
that string to our setup call so we use

00:16:50,759 --> 00:16:53,970
the long description parameter just

00:16:52,259 --> 00:16:55,889
provide this this string value that we

00:16:53,970 --> 00:16:57,809
put into a variable and then very

00:16:55,889 --> 00:16:59,910
importantly we need to tell pi PI this

00:16:57,809 --> 00:17:01,980
is marked down and not restructured text

00:16:59,910 --> 00:17:04,169
which we do by providing this mime type

00:17:01,980 --> 00:17:09,449
as this content type parameter at the

00:17:04,169 --> 00:17:11,730
end I wanted to talk about dependencies

00:17:09,449 --> 00:17:13,169
I've cut this talk down a bit so we

00:17:11,730 --> 00:17:15,149
won't actually show any code that uses

00:17:13,169 --> 00:17:16,829
blessings but for example if we used

00:17:15,149 --> 00:17:19,890
this terminal coloring library called

00:17:16,829 --> 00:17:21,779
blessings this is how we would add it to

00:17:19,890 --> 00:17:25,010
our setup py file so we have an install

00:17:21,779 --> 00:17:27,179
requires parameter it's a list of these

00:17:25,010 --> 00:17:28,890
specifies that describe the library and

00:17:27,179 --> 00:17:30,450
the versions we're prepared to accept I

00:17:28,890 --> 00:17:34,020
will talk a little bit more about those

00:17:30,450 --> 00:17:35,940
in a moment if we change the library

00:17:34,020 --> 00:17:37,799
dependencies or anything else as I said

00:17:35,940 --> 00:17:39,750
we should run our pip install - each

00:17:37,799 --> 00:17:40,919
command again and just to reinstall the

00:17:39,750 --> 00:17:42,750
package and just make sure it actually

00:17:40,919 --> 00:17:44,610
pulls down the dependencies and that

00:17:42,750 --> 00:17:46,470
these things work together and then we

00:17:44,610 --> 00:17:48,510
should run some tests but we don't have

00:17:46,470 --> 00:17:50,070
tests and we shouldn't just keep on

00:17:48,510 --> 00:17:51,240
opening up the repple and randomly

00:17:50,070 --> 00:17:53,010
calling functions to make sure that

00:17:51,240 --> 00:17:54,659
things work I would recommend you write

00:17:53,010 --> 00:17:58,140
your tests with PI tes PI test it's

00:17:54,659 --> 00:18:00,120
awesome but in order to write tests with

00:17:58,140 --> 00:18:01,799
quite us again we need more dependencies

00:18:00,120 --> 00:18:03,960
but this time we're not talking about

00:18:01,799 --> 00:18:05,549
dependency of our library like blessings

00:18:03,960 --> 00:18:07,409
so we're not saying this is how this is

00:18:05,549 --> 00:18:08,429
needed to run we're we're saying this is

00:18:07,409 --> 00:18:09,629
a development

00:18:08,429 --> 00:18:11,639
so this is something people need to

00:18:09,629 --> 00:18:14,129
install in order to develop code without

00:18:11,639 --> 00:18:17,070
library and in order to declare to

00:18:14,129 --> 00:18:19,139
develop dev dependencies I recommend you

00:18:17,070 --> 00:18:20,850
add them as extras into your setup py

00:18:19,139 --> 00:18:22,799
but a lot of people here I suspect are

00:18:20,850 --> 00:18:24,809
using requirements dot txt for this if

00:18:22,799 --> 00:18:27,149
you have a setup py file I would argue

00:18:24,809 --> 00:18:29,249
you do not need a requirements ext you

00:18:27,149 --> 00:18:30,690
can do all of this within python

00:18:29,249 --> 00:18:32,309
standard packaging framework and you get

00:18:30,690 --> 00:18:35,759
some advantages because again this is

00:18:32,309 --> 00:18:37,169
code not configuration extra so the way

00:18:35,759 --> 00:18:39,960
this works it looks a little bit like

00:18:37,169 --> 00:18:42,419
install requires but it's got an extra

00:18:39,960 --> 00:18:44,159
layer of interaction so you'll see that

00:18:42,419 --> 00:18:46,499
it's a it's a dictionary rather than a

00:18:44,159 --> 00:18:48,570
list it's a but but you still see that

00:18:46,499 --> 00:18:51,179
list in there is the first value so the

00:18:48,570 --> 00:18:53,039
key is the name of your extra so in this

00:18:51,179 --> 00:18:54,990
case we're saying dev and we will tell

00:18:53,039 --> 00:18:57,210
people that they need to install the dev

00:18:54,990 --> 00:18:59,220
extras in order to work with our project

00:18:57,210 --> 00:19:00,330
and then after that it is just a list of

00:18:59,220 --> 00:19:02,039
dependencies so in this case we're

00:19:00,330 --> 00:19:06,210
setting PI tests above or equal to the

00:19:02,039 --> 00:19:07,830
value of 3.2 version 3.7 and then we can

00:19:06,210 --> 00:19:09,809
tell people how to use it so again we

00:19:07,830 --> 00:19:11,730
update the readme we have a section

00:19:09,809 --> 00:19:14,940
saying if you would like to help develop

00:19:11,730 --> 00:19:16,409
hello world this is how you install the

00:19:14,940 --> 00:19:18,960
development dependencies so that you can

00:19:16,409 --> 00:19:20,460
run the tests and it looks very similar

00:19:18,960 --> 00:19:22,169
to before but you'll see we'd have the

00:19:20,460 --> 00:19:23,580
word dev in square brackets afterwards

00:19:22,169 --> 00:19:26,940
it's saying we're installing our current

00:19:23,580 --> 00:19:28,529
module with the dev extras you may have

00:19:26,940 --> 00:19:31,499
used this with other packages maybe not

00:19:28,529 --> 00:19:32,879
seen how that was specified I stole this

00:19:31,499 --> 00:19:38,399
straight from adders which i think is

00:19:32,879 --> 00:19:39,929
why Teaneck is here so yes if we if we

00:19:38,399 --> 00:19:41,159
install the extras you will see that it

00:19:39,929 --> 00:19:45,779
installs a whole bunch of other stuff

00:19:41,159 --> 00:19:46,980
basically dependencies for pi tests so

00:19:45,779 --> 00:19:49,710
the difference between install requires

00:19:46,980 --> 00:19:51,269
and extras requires is that install

00:19:49,710 --> 00:19:53,940
requires is for production dependencies

00:19:51,269 --> 00:19:56,039
things like flask click non ply pandas

00:19:53,940 --> 00:19:57,749
and a version should be as relaxed as

00:19:56,039 --> 00:19:59,190
they possibly can be so you should be

00:19:57,749 --> 00:20:00,869
testing against multiple versions of

00:19:59,190 --> 00:20:02,909
each dependency in this way you're not

00:20:00,869 --> 00:20:05,460
locking your users into a specific

00:20:02,909 --> 00:20:08,070
version of a shared dependency so if

00:20:05,460 --> 00:20:10,710
both you and your user are using a ters

00:20:08,070 --> 00:20:12,480
ideally you need an overlap there so if

00:20:10,710 --> 00:20:15,419
you're all using if you're using version

00:20:12,480 --> 00:20:15,800
3 they use in thousand for you they're

00:20:15,419 --> 00:20:17,090
not going to

00:20:15,800 --> 00:20:20,360
to use your package unless it make some

00:20:17,090 --> 00:20:21,500
changes extras require is different it's

00:20:20,360 --> 00:20:22,760
for optional requirements for

00:20:21,500 --> 00:20:24,830
development or testing or whatever

00:20:22,760 --> 00:20:27,050
extras you what groups of extras you

00:20:24,830 --> 00:20:28,520
want to create and the version should be

00:20:27,050 --> 00:20:30,200
in my opinion as specific as possible

00:20:28,520 --> 00:20:32,990
because you're you're trying to get your

00:20:30,200 --> 00:20:35,930
your developers up and running as

00:20:32,990 --> 00:20:37,880
quickly as possible and so creating an

00:20:35,930 --> 00:20:39,260
identical environment to yours and the

00:20:37,880 --> 00:20:41,420
other developers have been working with

00:20:39,260 --> 00:20:42,740
with the code is that's just going to

00:20:41,420 --> 00:20:44,960
make everybody's life easier rather than

00:20:42,740 --> 00:20:46,630
trying to debug like minor variations in

00:20:44,960 --> 00:20:49,910
your development dependencies

00:20:46,630 --> 00:20:51,260
requirements txt still has a place but I

00:20:49,910 --> 00:20:53,240
would argue it's for apps that you

00:20:51,260 --> 00:20:55,100
deploy onto machines that you control so

00:20:53,240 --> 00:20:56,720
in this case you're pinning every single

00:20:55,100 --> 00:20:58,400
production requirement to a specific

00:20:56,720 --> 00:20:59,350
version so that you're producing a

00:20:58,400 --> 00:21:02,120
well-tested

00:20:59,350 --> 00:21:04,040
collection of code on a on a destination

00:21:02,120 --> 00:21:07,010
machine so use fixed version numbers

00:21:04,040 --> 00:21:09,080
with a double equals operator and you

00:21:07,010 --> 00:21:10,810
use pip freeze to just spit out all of

00:21:09,080 --> 00:21:14,570
the things that are currently installed

00:21:10,810 --> 00:21:16,100
straight to your requirements dot txt so

00:21:14,570 --> 00:21:17,090
here we write some tests I'm going to

00:21:16,100 --> 00:21:19,190
zoom through this a bit because I'm

00:21:17,090 --> 00:21:22,280
running slowly as slower than I would

00:21:19,190 --> 00:21:24,170
like so but yes we run run our code now

00:21:22,280 --> 00:21:26,000
we just need to run my test to actually

00:21:24,170 --> 00:21:27,290
test our code each time it's much easier

00:21:26,000 --> 00:21:29,690
than actually executing the code by hand

00:21:27,290 --> 00:21:32,060
and it will spit out a bunch of stuff to

00:21:29,690 --> 00:21:33,200
say what it's version of Python you're

00:21:32,060 --> 00:21:35,000
using and things like that and then it

00:21:33,200 --> 00:21:38,390
will spit up hope in hopefully that your

00:21:35,000 --> 00:21:40,190
tests passed so now what we've done so

00:21:38,390 --> 00:21:41,900
far this is this is what we've produced

00:21:40,190 --> 00:21:43,640
we've got a license file a readme file

00:21:41,900 --> 00:21:45,890
setup file source directory with our

00:21:43,640 --> 00:21:47,270
code and a test you can obviously stick

00:21:45,890 --> 00:21:51,170
your tests in a test directory if you

00:21:47,270 --> 00:21:53,030
have more test files it's good to

00:21:51,170 --> 00:21:54,500
distribute source just distributions as

00:21:53,030 --> 00:21:55,940
well as binary distributions for various

00:21:54,500 --> 00:21:57,410
reasons people can check the code before

00:21:55,940 --> 00:22:01,190
they run it they may not have access to

00:21:57,410 --> 00:22:02,990
github to access the code they may just

00:22:01,190 --> 00:22:06,320
need to verify the code before they run

00:22:02,990 --> 00:22:08,900
it when you run Estus against our setup

00:22:06,320 --> 00:22:10,730
UI file we actually get some warning

00:22:08,900 --> 00:22:12,530
saying it would like some more data for

00:22:10,730 --> 00:22:14,150
some reason s test would really like to

00:22:12,530 --> 00:22:16,880
know the maintainer and maintainer email

00:22:14,150 --> 00:22:19,040
or the author and author email so it's

00:22:16,880 --> 00:22:20,480
told us that so we can just add those in

00:22:19,040 --> 00:22:22,040
there's three lines we have the URL of

00:22:20,480 --> 00:22:25,010
the project's link to github in this

00:22:22,040 --> 00:22:26,020
case my name and my email address excuse

00:22:25,010 --> 00:22:28,640
me

00:22:26,020 --> 00:22:29,570
so now we need to test that make sure

00:22:28,640 --> 00:22:31,340
that source distribution

00:22:29,570 --> 00:22:33,830
contains all the files we want it to so

00:22:31,340 --> 00:22:35,570
it just when you run s test it just

00:22:33,830 --> 00:22:38,600
creates an in this case of gzip tar ball

00:22:35,570 --> 00:22:39,920
and we can use the tar command to unzip

00:22:38,600 --> 00:22:41,600
that and have a look at the stuff inside

00:22:39,920 --> 00:22:43,400
and when we have a look at it we notice

00:22:41,600 --> 00:22:45,980
that it hasn't got our license txt file

00:22:43,400 --> 00:22:47,870
or our test hello world file ideally a

00:22:45,980 --> 00:22:49,940
source distribution cookie should

00:22:47,870 --> 00:22:52,370
contain everything that is in this

00:22:49,940 --> 00:22:53,870
snapshot of code so yeah and everything

00:22:52,370 --> 00:23:00,260
we're distributing everything that gets

00:22:53,870 --> 00:23:02,360
built into the binary distribution in

00:23:00,260 --> 00:23:05,210
order to add those missing files into

00:23:02,360 --> 00:23:06,710
our source distribution we need to write

00:23:05,210 --> 00:23:09,560
a manifest input file

00:23:06,710 --> 00:23:10,910
they are fiddly and annoying fortunately

00:23:09,560 --> 00:23:13,190
there's a tool called check manifest

00:23:10,910 --> 00:23:14,960
that does pretty much all of this for us

00:23:13,190 --> 00:23:16,610
or at least will get us started quickly

00:23:14,960 --> 00:23:17,840
so you can pip install that you can add

00:23:16,610 --> 00:23:20,330
it to your development dependencies if

00:23:17,840 --> 00:23:22,310
you like you run it for the first time

00:23:20,330 --> 00:23:24,200
with this create flag and then it will

00:23:22,310 --> 00:23:25,640
create your manifest I am I recommend

00:23:24,200 --> 00:23:27,590
having a look at it it's just things

00:23:25,640 --> 00:23:28,820
like includes and excludes lines for

00:23:27,590 --> 00:23:32,150
various files that it's found in the

00:23:28,820 --> 00:23:34,250
project that it tries to make sure that

00:23:32,150 --> 00:23:36,380
everything you have in get ends up in

00:23:34,250 --> 00:23:38,150
your source distribution so it's finding

00:23:36,380 --> 00:23:40,580
these files and adding them to the

00:23:38,150 --> 00:23:42,110
manifest input file so then if we build

00:23:40,580 --> 00:23:45,140
our source distribution again we can

00:23:42,110 --> 00:23:47,840
unzip it and then we see that now just

00:23:45,140 --> 00:23:51,350
out of the box the check manifest has

00:23:47,840 --> 00:23:52,180
created a manifest file that includes

00:23:51,350 --> 00:23:54,710
the files that were missing

00:23:52,180 --> 00:23:56,270
so now let's publish it it's good to

00:23:54,710 --> 00:23:57,980
publish earlier rather than later if you

00:23:56,270 --> 00:24:00,560
try to perfect everything you will

00:23:57,980 --> 00:24:02,000
really never publish the package so as

00:24:00,560 --> 00:24:04,310
soon as the point you have something

00:24:02,000 --> 00:24:05,840
useful not necessarily perfect try and

00:24:04,310 --> 00:24:09,080
get it up apart from anything else it

00:24:05,840 --> 00:24:11,990
will register your package name on PI pi

00:24:09,080 --> 00:24:13,580
to your project so you're not letting

00:24:11,990 --> 00:24:14,630
somebody else just kind of come in in

00:24:13,580 --> 00:24:17,350
the months while you're working on your

00:24:14,630 --> 00:24:19,760
project you used to be able to register

00:24:17,350 --> 00:24:21,500
your project before you uploaded code

00:24:19,760 --> 00:24:24,380
now you need to actually upload the code

00:24:21,500 --> 00:24:26,960
in order to register your name so here

00:24:24,380 --> 00:24:29,570
we run a setup py with the be distri

00:24:26,960 --> 00:24:31,700
land the s dist command 2 and in our

00:24:29,570 --> 00:24:35,270
district tree will now have a will file

00:24:31,700 --> 00:24:36,770
and our source distribution in order to

00:24:35,270 --> 00:24:39,380
push the PI P I you need to use twine

00:24:36,770 --> 00:24:41,630
for various reasons it separates the

00:24:39,380 --> 00:24:43,399
build step from the upload step which

00:24:41,630 --> 00:24:45,799
means that you can do these manual check

00:24:43,399 --> 00:24:48,080
of your of your distribution files

00:24:45,799 --> 00:24:49,820
before you upload to PI PPI otherwise

00:24:48,080 --> 00:24:51,799
it's a it's a single command to kind of

00:24:49,820 --> 00:24:54,109
build and push up your code if you get

00:24:51,799 --> 00:24:56,509
it wrong it's it's going to mess things

00:24:54,109 --> 00:24:57,710
up for you so here we install twine we

00:24:56,509 --> 00:25:00,109
use the twine upload to command it it

00:24:57,710 --> 00:25:02,629
also uses HTTPS whereas for a while pip

00:25:00,109 --> 00:25:07,519
didn't so it's it's safer

00:25:02,629 --> 00:25:09,859
sorry setup source didn't if you get to

00:25:07,519 --> 00:25:11,719
play PI the website quickly enough you

00:25:09,859 --> 00:25:13,249
will see the name of your project on the

00:25:11,719 --> 00:25:14,809
home page as the most recently updated

00:25:13,249 --> 00:25:16,279
package and that's kind of cool

00:25:14,809 --> 00:25:17,869
if you click on it you will then get to

00:25:16,279 --> 00:25:19,399
the project page you can see our readme

00:25:17,869 --> 00:25:21,259
file is essentially duplicated here

00:25:19,399 --> 00:25:23,149
there's a github link that I've just cut

00:25:21,259 --> 00:25:24,289
off at the bottom I had to change the

00:25:23,149 --> 00:25:26,450
name of the project by the way because

00:25:24,289 --> 00:25:29,809
there is a HelloWorld package on pypy ie

00:25:26,450 --> 00:25:31,279
some obviously somebody has done that so

00:25:29,809 --> 00:25:34,609
there's still some more stuff that we

00:25:31,279 --> 00:25:35,960
need to do I would recommend using tox I

00:25:34,609 --> 00:25:37,839
really am running out of time so I

00:25:35,960 --> 00:25:39,919
apologize for running through these I

00:25:37,839 --> 00:25:41,119
recommend using talks for testing

00:25:39,919 --> 00:25:43,309
against different distributions of

00:25:41,119 --> 00:25:44,929
Python and different versions of the

00:25:43,309 --> 00:25:48,109
libraries that you depend on here we're

00:25:44,929 --> 00:25:49,399
just testing you into python 3.6 3.7 you

00:25:48,109 --> 00:25:52,369
installed tox you have that toxic

00:25:49,399 --> 00:25:53,960
configuration file you it spits out

00:25:52,369 --> 00:25:56,809
loads of output when you run tox and

00:25:53,960 --> 00:25:58,399
hopefully at the end you get for each

00:25:56,809 --> 00:26:00,379
one of your targets you get a command

00:25:58,399 --> 00:26:01,399
succeeded and a little smiley face at

00:26:00,379 --> 00:26:04,789
the end which I always think is rather

00:26:01,399 --> 00:26:07,580
lovely here's why we use the source

00:26:04,789 --> 00:26:11,320
directory so root directory is the

00:26:07,580 --> 00:26:14,389
directory we have I've been working in

00:26:11,320 --> 00:26:15,919
if our code was in this directory if we

00:26:14,389 --> 00:26:18,019
import hello world while running the

00:26:15,919 --> 00:26:19,399
tests it will run the code in our source

00:26:18,019 --> 00:26:21,049
directory sorry in our current directory

00:26:19,399 --> 00:26:22,999
but we don't want it to do that we

00:26:21,049 --> 00:26:25,700
wanted to test installing the package

00:26:22,999 --> 00:26:27,229
and using the code from there by having

00:26:25,700 --> 00:26:28,489
a source directory you are forcing it to

00:26:27,229 --> 00:26:30,679
use the version it was just installed

00:26:28,489 --> 00:26:33,679
into the virtual environment you should

00:26:30,679 --> 00:26:36,349
also build on test machine on clean

00:26:33,679 --> 00:26:37,909
machines in the past I've used Travis

00:26:36,349 --> 00:26:39,950
for this I am probably moving my stuff

00:26:37,909 --> 00:26:43,359
to as your pipelines and depending on

00:26:39,950 --> 00:26:43,359
when it gets his stuff stabilized

00:26:44,750 --> 00:26:48,809
yes I won't talk about that any more for

00:26:47,370 --> 00:26:50,940
extra credit you can add badges to your

00:26:48,809 --> 00:26:52,590
readme for code coverage for quality

00:26:50,940 --> 00:26:54,059
metrics you can manage versions with

00:26:52,590 --> 00:26:56,100
bump version that's quite nice

00:26:54,059 --> 00:26:58,110
you can test on different operating

00:26:56,100 --> 00:26:59,730
systems you can write more documentation

00:26:58,110 --> 00:27:02,220
you can always write more documentation

00:26:59,730 --> 00:27:04,500
and tests you can add a contributed

00:27:02,220 --> 00:27:08,039
section to your readme you can implement

00:27:04,500 --> 00:27:10,529
the code of conduct and there's lots

00:27:08,039 --> 00:27:12,240
that you can do but I recommend that you

00:27:10,529 --> 00:27:13,909
don't do any of the stuff that I've

00:27:12,240 --> 00:27:16,379
described in this talk

00:27:13,909 --> 00:27:18,299
so there's a project called cookie

00:27:16,379 --> 00:27:19,559
cutter that generates sets of files from

00:27:18,299 --> 00:27:22,830
templates and people have already

00:27:19,559 --> 00:27:25,830
created template projects for pi PI for

00:27:22,830 --> 00:27:28,049
Python projects so if you install cookie

00:27:25,830 --> 00:27:29,129
cutter and then you run this command to

00:27:28,049 --> 00:27:31,080
download youngins

00:27:29,129 --> 00:27:32,519
it's there's a few of them out there I

00:27:31,080 --> 00:27:34,559
quite like yours it's similar to my own

00:27:32,519 --> 00:27:37,169
way of thinking of these things and this

00:27:34,559 --> 00:27:39,240
cookie cutter library it will then it

00:27:37,169 --> 00:27:40,470
will download the template from github

00:27:39,240 --> 00:27:42,539
it will ask you lots of questions

00:27:40,470 --> 00:27:44,700
because it's much more flexible than all

00:27:42,539 --> 00:27:46,169
the I've given you one option for each

00:27:44,700 --> 00:27:47,490
step he offers you lots of options

00:27:46,169 --> 00:27:52,139
different testing libraries and things

00:27:47,490 --> 00:27:54,210
like that and then at the end of it

00:27:52,139 --> 00:27:55,769
you're done in theory you will probably

00:27:54,210 --> 00:27:57,120
have to go and tweak some of these files

00:27:55,769 --> 00:27:59,759
because they won't be quite the way you

00:27:57,120 --> 00:28:02,759
want but it took me five minutes to get

00:27:59,759 --> 00:28:06,149
up and running using this process and

00:28:02,759 --> 00:28:07,679
then it created all of this so you will

00:28:06,149 --> 00:28:09,000
recognize some of the stuff in here from

00:28:07,679 --> 00:28:11,029
the tutorial we've been through there is

00:28:09,000 --> 00:28:14,220
extra stuff in there there is a Sphynx

00:28:11,029 --> 00:28:15,779
directory of documentation and with just

00:28:14,220 --> 00:28:17,129
boilerplate documentation in there at

00:28:15,779 --> 00:28:20,009
the moment but just waiting for you to

00:28:17,129 --> 00:28:23,039
fill it out you copy and in your code

00:28:20,009 --> 00:28:25,590
and then you're done

00:28:23,039 --> 00:28:27,269
so that took me about five minutes could

00:28:25,590 --> 00:28:29,159
have cut this talk down to the last two

00:28:27,269 --> 00:28:31,889
slides if I'd wanted instead of wasting

00:28:29,159 --> 00:28:32,879
all of your time for half an hour but

00:28:31,889 --> 00:28:35,009
hopefully give this gives you an

00:28:32,879 --> 00:28:36,600
overview of good packaging practice and

00:28:35,009 --> 00:28:38,519
all the things that you need to do to

00:28:36,600 --> 00:28:40,320
kind of build a well-rounded package

00:28:38,519 --> 00:28:41,519
there's obviously different directions

00:28:40,320 --> 00:28:42,899
you can move in but this is a really

00:28:41,519 --> 00:28:44,429
good core understanding of the things

00:28:42,899 --> 00:28:47,519
you should do for a professionally

00:28:44,429 --> 00:28:49,559
released package there are other

00:28:47,519 --> 00:28:51,419
projects for distributing libraries

00:28:49,559 --> 00:28:54,210
these days they're very interesting that

00:28:51,419 --> 00:28:56,390
don't you set up py or use it in

00:28:54,210 --> 00:28:57,380
different ways I would really recommend

00:28:56,390 --> 00:28:59,150
having a look at them if you're

00:28:57,380 --> 00:29:00,560
struggling with setup py poetry is

00:28:59,150 --> 00:29:02,600
getting a lot of mindshare at the moment

00:29:00,560 --> 00:29:04,520
I haven't really used them so I can't

00:29:02,600 --> 00:29:09,170
really recommend them I'm trying to push

00:29:04,520 --> 00:29:12,010
current most common best practice if you

00:29:09,170 --> 00:29:15,200
are interested in the slides or the code

00:29:12,010 --> 00:29:17,840
for this talk they are available on this

00:29:15,200 --> 00:29:20,480
bitly link follow me on Twitter if you

00:29:17,840 --> 00:29:21,650
have any questions feel free to grab me

00:29:20,480 --> 00:29:24,760
at the conference comes to the next Moe

00:29:21,650 --> 00:29:26,690
booth tweet at me preferably not abuse

00:29:24,760 --> 00:29:28,360
but thank you very much for coming to my

00:29:26,690 --> 00:29:31,560
talk

00:29:28,360 --> 00:29:31,560

YouTube URL: https://www.youtube.com/watch?v=-WDV0-OB4fE


