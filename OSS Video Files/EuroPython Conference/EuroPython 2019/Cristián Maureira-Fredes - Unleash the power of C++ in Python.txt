Title: Cristián Maureira-Fredes - Unleash the power of C++ in Python
Publication date: 2019-09-03
Playlist: EuroPython 2019
Description: 
	"Unleash the power of C++ in Python
[EuroPython 2019 - Talk - 2019-07-10 - Shanghai]
[Basel, CH]

By Cristián Maureira-Fredes

One of the main Python aspects is to have a clear syntax and be an
easy-to-understand language, which compared to others like C++
(depending of the kindness of the developer) can make a huge difference.
Not only the readability is in play, having a dynamically typed
and interpreted language improves the development workflow.

This improvement comes with a cost, performance.
In most of the cases, a raw comparison of simple routines will leave
Python behind, but there is a partial solution to this problem, connecting
a powerful performant C++ library with the simplicity of Python.

In this talk, we will go through the process of generating language bindings
to allow you to take any amazing C or C++ project and bring it to Python
land. We will briefly discuss one of the many success stories, and we will
analyze how the Qt project managed to expose its whole framework to Python,
with the help of a self-made binding generator called Shiboken.

After the talk, you will be able to decide which option is better for the
projects you have in mind, and with a bit of luck you will be responsible
of exposing the next popular C++ library that makes the life of us all Pythonistas easier.



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2019.europython.eu/events/speaker-release-agreement/
Captions: 
	00:00:02,770 --> 00:00:08,360
hello everyone and this is one room more

00:00:06,260 --> 00:00:09,980
that I was expecting for because I know

00:00:08,360 --> 00:00:12,379
that there's also amazing talks that I

00:00:09,980 --> 00:00:14,090
would like to go to at this moment so if

00:00:12,379 --> 00:00:15,830
you want we can all go to the other

00:00:14,090 --> 00:00:19,370
talks or I mean we can stay here that

00:00:15,830 --> 00:00:21,500
some fun with C++ of course and I I know

00:00:19,370 --> 00:00:23,420
is this the last talk from all the

00:00:21,500 --> 00:00:25,430
tracks so bear with me there will be no

00:00:23,420 --> 00:00:28,039
weird things here and we will not like

00:00:25,430 --> 00:00:30,050
be trying to understand office gated c++

00:00:28,039 --> 00:00:33,350
or something else oh it's a real light

00:00:30,050 --> 00:00:36,140
talk with advanced topics so let's cover

00:00:33,350 --> 00:00:37,910
it so a well as you heard my name is

00:00:36,140 --> 00:00:39,680
Christian and currently I'm working as a

00:00:37,910 --> 00:00:41,390
software engineer in the acute company

00:00:39,680 --> 00:00:42,920
which one of the companies that support

00:00:41,390 --> 00:00:45,230
the cute project maybe you heard about

00:00:42,920 --> 00:00:48,170
it later I will have one slides explain

00:00:45,230 --> 00:00:50,630
the motivation behind this talk and why

00:00:48,170 --> 00:00:52,730
I'm talking about C++ and Python so

00:00:50,630 --> 00:00:54,920
first of all don't worry about the

00:00:52,730 --> 00:00:57,350
examples or the slice or whatever just

00:00:54,920 --> 00:00:59,360
go to that github repository there is a

00:00:57,350 --> 00:01:01,070
link to the slides and you're gonna get

00:00:59,360 --> 00:01:02,420
all the source code it's oh my god I

00:01:01,070 --> 00:01:05,840
feel like a star everyone taking

00:01:02,420 --> 00:01:07,549
pictures like that you can take it out

00:01:05,840 --> 00:01:09,200
on at the end of the talk also is my kid

00:01:07,549 --> 00:01:13,880
have usernames you can check it out it's

00:01:09,200 --> 00:01:16,310
called unleash the pub CBB ok so first

00:01:13,880 --> 00:01:18,409
of all the cute project in general is a

00:01:16,310 --> 00:01:20,840
C++ framework huge Pro framework and

00:01:18,409 --> 00:01:22,670
with starting to do some Python stuff

00:01:20,840 --> 00:01:25,219
you need to have the mandatory

00:01:22,670 --> 00:01:27,439
comparison between two languages first

00:01:25,219 --> 00:01:29,719
of all the fall we know that both

00:01:27,439 --> 00:01:32,060
languages are general purpose but also

00:01:29,719 --> 00:01:33,889
you have multi-paradigm you can do many

00:01:32,060 --> 00:01:35,389
things with them and then we start to

00:01:33,889 --> 00:01:36,859
notice some difference that may I'm

00:01:35,389 --> 00:01:39,039
pretty sure that most of you are aware

00:01:36,859 --> 00:01:42,439
of dynamically type statically type

00:01:39,039 --> 00:01:44,450
compile interpret and then memory

00:01:42,439 --> 00:01:46,609
management and about also called

00:01:44,450 --> 00:01:49,159
reliability so I know this is kind of a

00:01:46,609 --> 00:01:53,359
if we have just raise your hands who is

00:01:49,159 --> 00:01:57,229
currently writing C or C++ code okay

00:01:53,359 --> 00:01:59,359
good so I I felt your pain too so I know

00:01:57,229 --> 00:02:01,279
that sometimes C++ could be complicated

00:01:59,359 --> 00:02:03,349
but it's just want to show you that it's

00:02:01,279 --> 00:02:06,649
not and you can even make things in

00:02:03,349 --> 00:02:08,149
Python better so first of all everyone

00:02:06,649 --> 00:02:09,380
knows that python is beautiful I

00:02:08,149 --> 00:02:11,660
remember the first time that I typed

00:02:09,380 --> 00:02:12,890
I've that on console when I was studying

00:02:11,660 --> 00:02:15,260
computer science and it was WOW

00:02:12,890 --> 00:02:15,950
everything works but if you think about

00:02:15,260 --> 00:02:19,010
it I mean see

00:02:15,950 --> 00:02:20,330
it's not so different right I mean you

00:02:19,010 --> 00:02:22,910
can write something like maybe you need

00:02:20,330 --> 00:02:24,830
to run an external compiler or something

00:02:22,910 --> 00:02:25,670
but you achieve the same thing right so

00:02:24,830 --> 00:02:29,959
okay

00:02:25,670 --> 00:02:31,280
after all C++ is simple it's not because

00:02:29,959 --> 00:02:32,870
then you have things like meta

00:02:31,280 --> 00:02:35,120
programming and you certain you know

00:02:32,870 --> 00:02:36,500
templates over template and this is one

00:02:35,120 --> 00:02:38,989
of the reason that people get scared of

00:02:36,500 --> 00:02:40,640
C++ but it was it's not so ugly and this

00:02:38,989 --> 00:02:42,620
is some extreme cases of people with a

00:02:40,640 --> 00:02:44,120
lot of time that a lot of effort and try

00:02:42,620 --> 00:02:47,780
to do these complicated things like a

00:02:44,120 --> 00:02:49,819
compile time if but let's go about one

00:02:47,780 --> 00:02:53,470
of the goodies a couple of goodies that

00:02:49,819 --> 00:02:55,940
C++ and the latest standards being 11 on

00:02:53,470 --> 00:02:58,790
has I mean if you're familiar with C or

00:02:55,940 --> 00:03:00,950
C++ now there is this amazing it's Auto

00:02:58,790 --> 00:03:02,660
type that kind of detects the variable

00:03:00,950 --> 00:03:06,470
that you have which is kind of a similar

00:03:02,660 --> 00:03:09,590
like a more dynamic language but not you

00:03:06,470 --> 00:03:11,329
can even use some functions and to get

00:03:09,590 --> 00:03:13,010
the declarative time of a different

00:03:11,329 --> 00:03:16,010
variable to the to the clear another one

00:03:13,010 --> 00:03:17,569
and stuff and then again we have the for

00:03:16,010 --> 00:03:18,980
loops that with the time it has been

00:03:17,569 --> 00:03:21,319
improve it I mean this is kind of the

00:03:18,980 --> 00:03:23,810
more dumb old version that we have in

00:03:21,319 --> 00:03:25,280
C++ to kind of like own a vector I know

00:03:23,810 --> 00:03:27,380
that you can do also with an iterator

00:03:25,280 --> 00:03:29,230
too but it's kind of like going element

00:03:27,380 --> 00:03:31,850
by element but it's too complicated so

00:03:29,230 --> 00:03:33,680
then you can do more fancy things like

00:03:31,850 --> 00:03:35,959
this and if you remember the author 1

00:03:33,680 --> 00:03:39,139
then you can kind of color it which is

00:03:35,959 --> 00:03:40,760
not so complicated you want to set also

00:03:39,139 --> 00:03:43,340
if you're a fan of Python lambdas you

00:03:40,760 --> 00:03:45,109
can now so also do it in C++ with the

00:03:43,340 --> 00:03:47,060
latest standards and so on and so forth

00:03:45,109 --> 00:03:48,859
and you can have this for each meant in

00:03:47,060 --> 00:03:52,190
handling a nice lambda there to just

00:03:48,859 --> 00:03:54,889
serving up some values but most

00:03:52,190 --> 00:03:57,079
interesting things about C++ are coming

00:03:54,889 --> 00:03:59,150
in my opinion in civil F plus 20 which

00:03:57,079 --> 00:04:00,889
is I don't know I have this relationship

00:03:59,150 --> 00:04:02,480
with love and hate we see the past 20

00:04:00,889 --> 00:04:04,790
there are some things are really nice

00:04:02,480 --> 00:04:06,650
and some things that I have no idea why

00:04:04,790 --> 00:04:08,859
people is doing it but one of the things

00:04:06,650 --> 00:04:12,079
that I like is this one so you have this

00:04:08,859 --> 00:04:14,480
amount sorry this type of ranges that

00:04:12,079 --> 00:04:16,400
you can use now and if you see the 4

00:04:14,480 --> 00:04:18,440
they kind of like the type of the 4

00:04:16,400 --> 00:04:20,750
there it's kind of similar that can you

00:04:18,440 --> 00:04:24,349
you can have their so after all I mean

00:04:20,750 --> 00:04:25,700
it's not so crazy different right the

00:04:24,349 --> 00:04:27,380
same with a more example I mean I know

00:04:25,700 --> 00:04:28,670
that this mod way maybe is the first

00:04:27,380 --> 00:04:31,010
line that is commented out but

00:04:28,670 --> 00:04:32,750
can write the function maybe like the

00:04:31,010 --> 00:04:34,730
second line that you see there which is

00:04:32,750 --> 00:04:38,300
also quite similar what you can achieve

00:04:34,730 --> 00:04:41,960
in C++ 20 so after all I mean it's just

00:04:38,300 --> 00:04:44,090
adding some semicolon sense yet right so

00:04:41,960 --> 00:04:46,010
the idea is that now it's not about like

00:04:44,090 --> 00:04:48,410
which language is best but how to make

00:04:46,010 --> 00:04:50,620
both languages to to improve each other

00:04:48,410 --> 00:04:52,910
and try to collaborate in a more

00:04:50,620 --> 00:04:54,260
efficient way so I want to propose now a

00:04:52,910 --> 00:04:56,440
new language that is code now I know

00:04:54,260 --> 00:04:59,300
it's not but I'll just talking to an

00:04:56,440 --> 00:05:01,610
extending Python with C++ and for this

00:04:59,300 --> 00:05:05,570
we will go through a couple of example

00:05:01,610 --> 00:05:07,700
really simple ones and the first of who

00:05:05,570 --> 00:05:10,430
here didn't know before the conference

00:05:07,700 --> 00:05:12,980
that Python was written in C we had some

00:05:10,430 --> 00:05:14,360
ok we have some people ok so it is

00:05:12,980 --> 00:05:15,590
something that also was kind of shocking

00:05:14,360 --> 00:05:17,090
to me because I thought that it was some

00:05:15,590 --> 00:05:18,590
black magic assembly stuff but it was

00:05:17,090 --> 00:05:20,360
written in C so if you learn some see

00:05:18,590 --> 00:05:22,940
you quit at the standard and then you

00:05:20,360 --> 00:05:25,790
can understand all the things like this

00:05:22,940 --> 00:05:27,830
joke for example I know that is really

00:05:25,790 --> 00:05:29,540
bad but is it's the only job that I have

00:05:27,830 --> 00:05:32,630
in this slides but so I'm really sorry

00:05:29,540 --> 00:05:34,220
bad idea to do it so let's take a look

00:05:32,630 --> 00:05:38,030
at how we can create an amazing module

00:05:34,220 --> 00:05:39,890
based in pure C Python and ok let's go

00:05:38,030 --> 00:05:41,720
for it so the first thing that you need

00:05:39,890 --> 00:05:44,810
to know is that you just need to see C

00:05:41,720 --> 00:05:47,330
file and we will go through these

00:05:44,810 --> 00:05:48,710
examples with a most simple thing that I

00:05:47,330 --> 00:05:51,770
could think that was a HelloWorld

00:05:48,710 --> 00:05:54,110
function that just returns the char star

00:05:51,770 --> 00:05:56,570
or a string whatever so I hope that

00:05:54,110 --> 00:05:58,580
everyone can read if C if you don't know

00:05:56,570 --> 00:06:00,800
C or C++ is kind of that you get the

00:05:58,580 --> 00:06:04,760
idea it's kind of a function declaration

00:06:00,800 --> 00:06:09,080
that returns some message which is hello

00:06:04,760 --> 00:06:10,850
Europe - 2019 okay so for building a C++

00:06:09,080 --> 00:06:13,550
I will just sum out don't be aware it'll

00:06:10,850 --> 00:06:15,410
be afraid just to show you so dot that's

00:06:13,550 --> 00:06:18,110
all the code that we are required to

00:06:15,410 --> 00:06:20,390
create a new Python module written in C

00:06:18,110 --> 00:06:22,130
Python which one function that is just

00:06:20,390 --> 00:06:24,170
printing hello world it's not so scary

00:06:22,130 --> 00:06:25,610
right I mean I need to confess the first

00:06:24,170 --> 00:06:26,900
time that I start to play around this I

00:06:25,610 --> 00:06:28,730
was just copying all this weird

00:06:26,900 --> 00:06:31,420
structure that you have around that all

00:06:28,730 --> 00:06:33,490
these Weider's has null null 0 and

00:06:31,420 --> 00:06:36,040
other things you just copy some stuff

00:06:33,490 --> 00:06:37,960
and it works so if you are brave enough

00:06:36,040 --> 00:06:39,550
after this hope just go to the cpython

00:06:37,960 --> 00:06:41,290
directory and play with it

00:06:39,550 --> 00:06:43,360
and maybe you can write other

00:06:41,290 --> 00:06:45,220
sophisticated models with it so this is

00:06:43,360 --> 00:06:47,440
the simple case right and this is just

00:06:45,220 --> 00:06:52,270
one example one simple function and we

00:06:47,440 --> 00:06:55,390
have this so um what's the motivation

00:06:52,270 --> 00:06:58,480
behind these cute things so cute is just

00:06:55,390 --> 00:07:00,280
a C++ framework that is like huge and

00:06:58,480 --> 00:07:02,980
the main one of the main functionalities

00:07:00,280 --> 00:07:05,170
was to offer the way of developing user

00:07:02,980 --> 00:07:08,020
interface graphical user interfaces for

00:07:05,170 --> 00:07:09,580
people and also cute implements many of

00:07:08,020 --> 00:07:12,670
the things that we have for free in

00:07:09,580 --> 00:07:14,260
Python in C++ which is like a lot of

00:07:12,670 --> 00:07:18,010
instructions for different classes to

00:07:14,260 --> 00:07:20,380
interact with more m4 databases or maybe

00:07:18,010 --> 00:07:22,990
do in command line or scripting alike in

00:07:20,380 --> 00:07:24,310
C++ and even other advanced things a

00:07:22,990 --> 00:07:26,650
different way of creating user

00:07:24,310 --> 00:07:28,720
interfaces action notification threats

00:07:26,650 --> 00:07:29,950
all these things so they are providing a

00:07:28,720 --> 00:07:33,250
lot of goodies to the Silver's past

00:07:29,950 --> 00:07:35,680
world and at some point the project was

00:07:33,250 --> 00:07:37,060
but you know what which I mean this

00:07:35,680 --> 00:07:38,530
thing need to be maybe available other

00:07:37,060 --> 00:07:43,000
languages so people started to worry

00:07:38,530 --> 00:07:44,710
about Python so maybe you are aware

00:07:43,000 --> 00:07:46,780
there is already a set of binding which

00:07:44,710 --> 00:07:48,330
is really also called PI cute and this

00:07:46,780 --> 00:07:50,530
was developed by a different company

00:07:48,330 --> 00:07:52,390
some people doing a lot of work there

00:07:50,530 --> 00:07:53,890
and this was fantastic I mean the good

00:07:52,390 --> 00:07:56,740
project they wanted to kind of have an

00:07:53,890 --> 00:07:59,170
official adoption of these things so

00:07:56,740 --> 00:08:01,030
they decided so maybe we can create a

00:07:59,170 --> 00:08:02,950
new set of bindings and you know just

00:08:01,030 --> 00:08:04,690
put it there and see it's a no problem

00:08:02,950 --> 00:08:06,190
you know market so people can decide

00:08:04,690 --> 00:08:07,870
with use at the moment there but the

00:08:06,190 --> 00:08:10,240
same level one is really old and there's

00:08:07,870 --> 00:08:12,100
a lot of examples and tutorials but they

00:08:10,240 --> 00:08:14,530
are the the cute project at that point

00:08:12,100 --> 00:08:16,900
had a couple of options to do this with

00:08:14,530 --> 00:08:19,630
this huge c plus web framework so they

00:08:16,900 --> 00:08:22,060
could roll a right Rossy Python they

00:08:19,630 --> 00:08:24,250
could wrote a sweet I mean maybe you

00:08:22,060 --> 00:08:27,250
heard about sick or they could use boost

00:08:24,250 --> 00:08:33,160
Python so if you take a look at this

00:08:27,250 --> 00:08:34,600
week implementation so which week and we

00:08:33,160 --> 00:08:37,060
just just for you to believe me

00:08:34,600 --> 00:08:39,640
we have here or difficult function to

00:08:37,060 --> 00:08:41,470
understand and the only things that we

00:08:39,640 --> 00:08:42,460
need to do for this week is just to

00:08:41,470 --> 00:08:44,440
create an interface

00:08:42,460 --> 00:08:47,020
so this interface is in that I file that

00:08:44,440 --> 00:08:50,190
also nothing really scary or something

00:08:47,020 --> 00:08:53,110
at the moment so we have a couple of

00:08:50,190 --> 00:08:55,120
instructions to build it I mean we run

00:08:53,110 --> 00:08:58,180
tweak and then we compile some stuff and

00:08:55,120 --> 00:09:02,920
then we can just use a normal simple

00:08:58,180 --> 00:09:04,600
import the module and execute it and

00:09:02,920 --> 00:09:08,250
then we have the message nothing to lose

00:09:04,600 --> 00:09:12,279
with booze Python is kind of a similar

00:09:08,250 --> 00:09:16,600
story we go there again we have this

00:09:12,279 --> 00:09:18,550
simple CBP file with our function there

00:09:16,600 --> 00:09:21,190
and then we just need to define booze by

00:09:18,550 --> 00:09:23,260
the module the name the namespace and

00:09:21,190 --> 00:09:25,990
then we define the function nothing too

00:09:23,260 --> 00:09:27,399
scary at the moment right so this was

00:09:25,990 --> 00:09:29,920
looking that's really a really nice

00:09:27,399 --> 00:09:32,050
solution right I mean we were achieving

00:09:29,920 --> 00:09:34,480
the same thing but the problem lied that

00:09:32,050 --> 00:09:37,510
many things that we do in C++ need to be

00:09:34,480 --> 00:09:39,940
specially treated inside Python for

00:09:37,510 --> 00:09:42,700
example ownership of objects if you are

00:09:39,940 --> 00:09:44,649
rubbing an interface that is in C++ who

00:09:42,700 --> 00:09:46,779
owns the objects some cases will be

00:09:44,649 --> 00:09:48,220
Python so in case it would be C++ so you

00:09:46,779 --> 00:09:50,800
need to deal with all these things ok so

00:09:48,220 --> 00:09:53,080
the option that added at that time the

00:09:50,800 --> 00:09:54,700
developer head was ok this use one of

00:09:53,080 --> 00:09:58,060
the generator and we can maybe modify

00:09:54,700 --> 00:10:01,560
the wrapper generated code so let's take

00:09:58,060 --> 00:10:04,839
a look of the code that sweet generates

00:10:01,560 --> 00:10:06,880
so just for you to give you an idea so

00:10:04,839 --> 00:10:10,420
this is kind of the code that generates

00:10:06,880 --> 00:10:13,900
and I will start to go down we're in two

00:10:10,420 --> 00:10:17,320
percent three percent okay we'll just

00:10:13,900 --> 00:10:19,660
page down for five seven two so I

00:10:17,320 --> 00:10:22,390
understand it it's a little bit too much

00:10:19,660 --> 00:10:24,850
with this small function right so okay

00:10:22,390 --> 00:10:26,950
that's all and there is kind of a

00:10:24,850 --> 00:10:28,900
motivation to say okay I know that they

00:10:26,950 --> 00:10:31,240
need to set up many things to get for

00:10:28,900 --> 00:10:33,070
granted and to automate many process and

00:10:31,240 --> 00:10:34,660
it's a really smart solution but if you

00:10:33,070 --> 00:10:36,850
want to modify this file it will be

00:10:34,660 --> 00:10:38,020
invertible I mean you cannot do it so

00:10:36,850 --> 00:10:41,740
there was a lot of motivation behind

00:10:38,020 --> 00:10:44,350
this C Python and sorry else week and

00:10:41,740 --> 00:10:45,579
boost Python boost I don't have the

00:10:44,350 --> 00:10:47,470
source code from the boost Python here

00:10:45,579 --> 00:10:49,120
but the shared libraries roughly the

00:10:47,470 --> 00:10:51,610
same size so you can imagine that there

00:10:49,120 --> 00:10:52,420
are a lot of black magic there so what

00:10:51,610 --> 00:10:54,550
do you say okay

00:10:52,420 --> 00:10:55,350
they started the development of these

00:10:54,550 --> 00:10:57,600
new

00:10:55,350 --> 00:10:59,130
always in booths at the mall and the set

00:10:57,600 --> 00:11:01,200
and I was too heavy let's write our own

00:10:59,130 --> 00:11:03,450
thing okay everything was released

00:11:01,200 --> 00:11:06,360
properly then there was the project will

00:11:03,450 --> 00:11:08,280
continue the development and the good

00:11:06,360 --> 00:11:09,960
news was that last year officially was

00:11:08,280 --> 00:11:12,630
released this new set of bindings of

00:11:09,960 --> 00:11:14,130
cute in Python and in their name of a

00:11:12,630 --> 00:11:16,500
new project was called cute for Python

00:11:14,130 --> 00:11:16,950
so maybe you heard about this or PI site

00:11:16,500 --> 00:11:19,470
too

00:11:16,950 --> 00:11:21,300
it was this all this story behind but

00:11:19,470 --> 00:11:22,710
okay this is just a story but what was

00:11:21,300 --> 00:11:24,570
the important part at least in my

00:11:22,710 --> 00:11:27,390
opinion how do we do it

00:11:24,570 --> 00:11:29,760
so this tool that you see here in the

00:11:27,390 --> 00:11:34,140
center calls evoke into is kind of like

00:11:29,760 --> 00:11:36,570
the response for writing our own code

00:11:34,140 --> 00:11:39,000
generator tool to expose all this huge

00:11:36,570 --> 00:11:41,370
C++ framework to Python so there is a

00:11:39,000 --> 00:11:43,320
module inside that it kind of extracts

00:11:41,370 --> 00:11:45,120
all the API information from cute base

00:11:43,320 --> 00:11:46,620
is basing clang of course if you want to

00:11:45,120 --> 00:11:49,200
do smart things in silver plus you need

00:11:46,620 --> 00:11:51,120
to use mine and then we have a support

00:11:49,200 --> 00:11:53,130
type system which is nothing else than

00:11:51,120 --> 00:11:54,870
XML file then then you get wait

00:11:53,130 --> 00:11:57,210
something's weird

00:11:54,870 --> 00:11:58,200
an XML file what you can define all

00:11:57,210 --> 00:12:00,450
these things that I told you about

00:11:58,200 --> 00:12:02,940
ownership or for example what do we do

00:12:00,450 --> 00:12:05,010
if a function has a void star argument

00:12:02,940 --> 00:12:08,160
in Python we need to have a special or

00:12:05,010 --> 00:12:10,530
type or treatment or do some casting or

00:12:08,160 --> 00:12:12,570
something around so this to a graph this

00:12:10,530 --> 00:12:15,150
type system the information from the

00:12:12,570 --> 00:12:16,920
framework and generate some wrapper that

00:12:15,150 --> 00:12:18,810
the one that you saw from France wig but

00:12:16,920 --> 00:12:20,370
of course more reduce and it makes more

00:12:18,810 --> 00:12:22,350
sense and it's more clean in my opinion

00:12:20,370 --> 00:12:24,840
and then with this we can just compile

00:12:22,350 --> 00:12:27,180
it and have a the same Python module

00:12:24,840 --> 00:12:29,760
over here so this tool is called people

00:12:27,180 --> 00:12:31,440
can the documentation is there and I

00:12:29,760 --> 00:12:34,770
don't know what is happening on to doing

00:12:31,440 --> 00:12:37,830
anything and the slides are coming okay

00:12:34,770 --> 00:12:39,060
so the Japanese candies done doesn't

00:12:37,830 --> 00:12:40,590
mean anything is there we have some

00:12:39,060 --> 00:12:42,420
Japanese speaker there here is just

00:12:40,590 --> 00:12:46,790
three words that make no sense but let's

00:12:42,420 --> 00:12:50,700
take a look of the typical thing okay

00:12:46,790 --> 00:12:52,500
so again and we will go first for you to

00:12:50,700 --> 00:12:54,300
believe me that we have here the

00:12:52,500 --> 00:12:55,680
implementation and we are like cheating

00:12:54,300 --> 00:12:57,390
a little bit because of course we are

00:12:55,680 --> 00:13:00,870
working with strings from the standard

00:12:57,390 --> 00:13:05,700
library then we define complex header

00:13:00,870 --> 00:13:07,970
for this which is just that and for this

00:13:05,700 --> 00:13:11,929
type system that I just told you

00:13:07,970 --> 00:13:14,119
is nothing else that this email we said

00:13:11,929 --> 00:13:15,709
this would be a package called simple it

00:13:14,119 --> 00:13:17,689
would have a primitive type there is a

00:13:15,709 --> 00:13:21,649
string from standard library and a hello

00:13:17,689 --> 00:13:23,269
function after all the them the

00:13:21,649 --> 00:13:34,339
compiling and stuff we will get

00:13:23,269 --> 00:13:36,319
something like this and it's inside

00:13:34,339 --> 00:13:38,599
simple and here you have the module

00:13:36,319 --> 00:13:41,659
wrapper I will zoom out just for you

00:13:38,599 --> 00:13:42,919
sure that I'm not lying it's long but

00:13:41,659 --> 00:13:45,649
it's not so long as the other one so

00:13:42,919 --> 00:13:47,179
here you have it I wait I don't expect

00:13:45,649 --> 00:13:48,889
you to read the code I just want to show

00:13:47,179 --> 00:13:50,749
you the magnitude of the code so at

00:13:48,889 --> 00:13:53,239
least this is being coded genetically

00:13:50,749 --> 00:13:55,069
generated calling this C++ function and

00:13:53,239 --> 00:13:57,319
exposing everything which the Python too

00:13:55,069 --> 00:13:59,089
to be able to use it from Python so it's

00:13:57,319 --> 00:14:01,869
way shorter that the option that we had

00:13:59,089 --> 00:14:04,159
of course this translates into having a

00:14:01,869 --> 00:14:05,449
more a light way to hedge shared

00:14:04,159 --> 00:14:08,989
libraries and you can achieve the same

00:14:05,449 --> 00:14:13,459
things so there are other nice options

00:14:08,989 --> 00:14:15,079
out there and for this I kind of tend to

00:14:13,459 --> 00:14:16,309
recommend people to take a look of all

00:14:15,079 --> 00:14:18,649
the solutions that you have out there

00:14:16,309 --> 00:14:20,509
because it's unfair to say yeah this is

00:14:18,649 --> 00:14:21,649
the best solution up now it's not I mean

00:14:20,509 --> 00:14:23,389
there are many things that you can

00:14:21,649 --> 00:14:24,949
complement to each other I don't know if

00:14:23,389 --> 00:14:26,959
you have the chance and or maybe know

00:14:24,949 --> 00:14:28,609
one of these ones the last one for

00:14:26,959 --> 00:14:30,589
example is the one that the other set of

00:14:28,609 --> 00:14:34,189
binding code by cute uses which is

00:14:30,589 --> 00:14:36,919
called sip pi by xi it also is a really

00:14:34,189 --> 00:14:38,329
nice project that appear and the I think

00:14:36,919 --> 00:14:40,909
a couple of years ago even a thing that

00:14:38,329 --> 00:14:43,429
to your pythons ago there was also a

00:14:40,909 --> 00:14:46,369
talk about 5 and 11 so let's take a look

00:14:43,429 --> 00:14:49,429
of like how do you achieve the same

00:14:46,369 --> 00:14:50,809
things and with the other options I

00:14:49,429 --> 00:14:53,299
think that I'm good with the time at the

00:14:50,809 --> 00:14:57,049
moment so this is the case of pipe and

00:14:53,299 --> 00:14:59,329
11 so let's open again the the file if

00:14:57,049 --> 00:15:00,559
you see the motivation here is clearly

00:14:59,329 --> 00:15:03,079
from booze Python

00:15:00,559 --> 00:15:04,909
I mean it's again I kind of a macro that

00:15:03,079 --> 00:15:06,589
kind of defines a module then you have

00:15:04,909 --> 00:15:08,259
the definition of the function some

00:15:06,589 --> 00:15:10,759
documentation and so on and so forth and

00:15:08,259 --> 00:15:12,529
then you can do the same thing I mean

00:15:10,759 --> 00:15:16,999
after you compile it and everything you

00:15:12,529 --> 00:15:18,769
have your simple M main that you can

00:15:16,999 --> 00:15:21,220
achieve the same so it's kind of like

00:15:18,769 --> 00:15:22,959
same ideas boost Python but they are

00:15:21,220 --> 00:15:24,250
doing way more things and there is a lot

00:15:22,959 --> 00:15:26,519
of nice support there that I encourage

00:15:24,250 --> 00:15:30,490
you to to check it out

00:15:26,519 --> 00:15:33,879
csfi well this is again not really fair

00:15:30,490 --> 00:15:35,860
comparison because cf5 we had some talks

00:15:33,879 --> 00:15:39,009
already that we explain about this thing

00:15:35,860 --> 00:15:41,019
it's not kind of like generating code

00:15:39,009 --> 00:15:48,759
but it's just kind of loading something

00:15:41,019 --> 00:15:51,160
so we can have this is here this is the

00:15:48,759 --> 00:15:53,949
code that is being generated yes so we

00:15:51,160 --> 00:15:56,740
go to the simple build and then you have

00:15:53,949 --> 00:15:58,149
to have like inline row a string that

00:15:56,740 --> 00:16:01,779
contains the function that we want to

00:15:58,149 --> 00:16:03,279
expose and then we just compile this

00:16:01,779 --> 00:16:05,290
thing in some share library that we can

00:16:03,279 --> 00:16:08,050
easily load from Python so if you check

00:16:05,290 --> 00:16:09,730
you check here for example they the main

00:16:08,050 --> 00:16:11,980
is the same thing that we were seeing in

00:16:09,730 --> 00:16:14,199
the other examples just calling this

00:16:11,980 --> 00:16:15,850
nice function in this case we are

00:16:14,199 --> 00:16:17,949
casting two strings so and so forth but

00:16:15,850 --> 00:16:20,079
it's kind of the same idea but again I

00:16:17,949 --> 00:16:23,230
mean it's not like you can write inline

00:16:20,079 --> 00:16:25,870
code kind of read a lots of C++ code to

00:16:23,230 --> 00:16:28,870
kind of expose in this way the other

00:16:25,870 --> 00:16:31,420
option that I had there Accor and c if c

00:16:28,870 --> 00:16:37,089
if fi is kind of focused on c or when

00:16:31,420 --> 00:16:40,059
they support c 89 and other standard but

00:16:37,089 --> 00:16:43,420
for playing with c++ you have a similar

00:16:40,059 --> 00:16:46,269
idea which is CPP why why and finally

00:16:43,420 --> 00:16:47,860
CPP and then it's kind of the same idea

00:16:46,269 --> 00:16:49,990
so you will declare everything like in a

00:16:47,860 --> 00:16:51,790
string and then you they have this big

00:16:49,990 --> 00:16:54,879
declaration you can use this from the

00:16:51,790 --> 00:16:58,240
GBL again same idea and nothing too

00:16:54,879 --> 00:17:01,660
scary and the last one is kind of

00:16:58,240 --> 00:17:03,089
similar it was a sip that I show you the

00:17:01,660 --> 00:17:08,860
one that is using in the PI cute

00:17:03,089 --> 00:17:13,839
bindings I will just show you this is

00:17:08,860 --> 00:17:15,789
yes there we have the simple again same

00:17:13,839 --> 00:17:20,500
idea but the only difference that they

00:17:15,789 --> 00:17:23,470
were required to define a sip file and

00:17:20,500 --> 00:17:24,880
it's nothing like else at this I mean is

00:17:23,470 --> 00:17:26,770
also it's quite simple I mean you just

00:17:24,880 --> 00:17:28,240
need to define the module and then we

00:17:26,770 --> 00:17:29,919
have some include and then the the

00:17:28,240 --> 00:17:31,809
signature at the function so there are

00:17:29,919 --> 00:17:34,480
many options are there to achieve the

00:17:31,809 --> 00:17:39,340
same thing right but what's the idea of

00:17:34,480 --> 00:17:40,779
doing this right em I have been having

00:17:39,340 --> 00:17:42,610
some conversation with people sometimes

00:17:40,779 --> 00:17:44,289
that they say I but I mean I use Python

00:17:42,610 --> 00:17:46,419
for everything I mean you'll need C++

00:17:44,289 --> 00:17:47,740
and I say okay what do you use now on I

00:17:46,419 --> 00:17:48,880
do everything with numpy because it's

00:17:47,740 --> 00:17:51,100
amazing in this fashion

00:17:48,880 --> 00:17:53,080
it's Python you know and then I like yep

00:17:51,100 --> 00:17:55,120
you know it's written in C but it's not

00:17:53,080 --> 00:17:56,590
so okay there's even some people that is

00:17:55,120 --> 00:17:59,110
not aware that many of the popular

00:17:56,590 --> 00:18:00,940
libraries out there are using s it as

00:17:59,110 --> 00:18:03,370
phallus or C so in this case you have a

00:18:00,940 --> 00:18:05,679
case of numpy I just don't know the

00:18:03,370 --> 00:18:07,960
source code the first line is all the

00:18:05,679 --> 00:18:09,789
Python files that they have that is not

00:18:07,960 --> 00:18:12,429
test and then you have the C files there

00:18:09,789 --> 00:18:14,260
which is 96 which is I'll still a lot

00:18:12,429 --> 00:18:16,659
the things that they are doing and if

00:18:14,260 --> 00:18:18,820
you want to maybe refer to a more modern

00:18:16,659 --> 00:18:21,429
module the case of pi storage is a

00:18:18,820 --> 00:18:31,000
little bit more extreme then if you look

00:18:21,429 --> 00:18:32,710
there we have so here we have 547 C++

00:18:31,000 --> 00:18:34,330
files inside the package because of

00:18:32,710 --> 00:18:35,649
course is based in torch and 30 zeros

00:18:34,330 --> 00:18:37,899
pass so everything is it was passed

00:18:35,649 --> 00:18:40,720
inside so it's kind of a good a nice

00:18:37,899 --> 00:18:42,220
motivation of using all these tools to

00:18:40,720 --> 00:18:44,590
start to write things to improve the

00:18:42,220 --> 00:18:46,840
Python we are all here so if we know C

00:18:44,590 --> 00:18:48,250
or C++ we kind of kind of have some

00:18:46,840 --> 00:18:50,740
responsibility in your hands in our

00:18:48,250 --> 00:18:53,080
hands to improve things and one of the

00:18:50,740 --> 00:18:55,510
examples that just out of curiosity and

00:18:53,080 --> 00:18:58,330
please don't blame me about the things

00:18:55,510 --> 00:19:00,549
that I will show you is that simple case

00:18:58,330 --> 00:19:03,700
I was helping someone that I was listing

00:19:00,549 --> 00:19:06,010
some files in Python and getting old you

00:19:03,700 --> 00:19:09,730
know different absolute path and what do

00:19:06,010 --> 00:19:12,039
you use their globe right you use or if

00:19:09,730 --> 00:19:13,600
you are more like up-to-date person do

00:19:12,039 --> 00:19:17,039
you use the path leaf and then also you

00:19:13,600 --> 00:19:21,760
have the globe access there so for this

00:19:17,039 --> 00:19:26,049
you know the deal I mean writing glove

00:19:21,760 --> 00:19:28,120
is things are kind of simple this is a

00:19:26,049 --> 00:19:29,710
hard coded thing just to play with the

00:19:28,120 --> 00:19:32,470
recursion thing but you know import love

00:19:29,710 --> 00:19:35,080
and then you need to double stars there

00:19:32,470 --> 00:19:39,070
and specify if it's recursive not at the

00:19:35,080 --> 00:19:42,850
same way which paths leaf is kind of the

00:19:39,070 --> 00:19:44,230
same idea right and then I thought I

00:19:42,850 --> 00:19:45,490
mean let's let's look at the

00:19:44,230 --> 00:19:47,200
implementation and see if we can kind of

00:19:45,490 --> 00:19:47,920
do something is more than see bus bus so

00:19:47,200 --> 00:19:51,250
the first

00:19:47,920 --> 00:19:53,290
in my mind that in C++ 17 maybe you know

00:19:51,250 --> 00:19:55,150
there is a new adoption in the C++

00:19:53,290 --> 00:19:55,950
standard which is the more local file

00:19:55,150 --> 00:19:59,110
system

00:19:55,950 --> 00:20:00,700
this is basing the boosts file system so

00:19:59,110 --> 00:20:02,440
I thought okay I will just copy paste

00:20:00,700 --> 00:20:06,810
the hell were example there and I will

00:20:02,440 --> 00:20:13,780
put a file system and call to list

00:20:06,810 --> 00:20:15,760
directories so again same idea I will

00:20:13,780 --> 00:20:17,860
just replace they all the simple and

00:20:15,760 --> 00:20:19,810
hello and the only difference is this if

00:20:17,860 --> 00:20:21,550
there is any easy Python code available

00:20:19,810 --> 00:20:22,960
in the audience please forgive my C

00:20:21,550 --> 00:20:25,240
Python policies just to show how simple

00:20:22,960 --> 00:20:27,550
we can achieve things of course this is

00:20:25,240 --> 00:20:30,640
and say if there's memory leaks there

00:20:27,550 --> 00:20:32,320
because you went you a pen that increase

00:20:30,640 --> 00:20:35,260
the rift counts and I'm not taking care

00:20:32,320 --> 00:20:37,150
of anything but just taking one argument

00:20:35,260 --> 00:20:40,540
which is the recursive to see true or

00:20:37,150 --> 00:20:42,760
false and create an empty list and then

00:20:40,540 --> 00:20:44,800
just to in some dumb appends so the

00:20:42,760 --> 00:20:46,660
magic here from the c++ side is that i'm

00:20:44,800 --> 00:20:50,620
using the file system module I am using

00:20:46,660 --> 00:20:51,970
C++ 17 and there's likely some directory

00:20:50,620 --> 00:20:55,780
diretor that you can kind of do

00:20:51,970 --> 00:20:58,390
recursively or not and that's it I mean

00:20:55,780 --> 00:20:59,860
if you don't know C Python you just into

00:20:58,390 --> 00:21:01,810
this is just a function that will take

00:20:59,860 --> 00:21:04,120
here some arguments we create an empty

00:21:01,810 --> 00:21:05,860
list and then if it's recursive or not

00:21:04,120 --> 00:21:08,050
we are appending well you know how

00:21:05,860 --> 00:21:10,480
append works some stuff and then we are

00:21:08,050 --> 00:21:13,000
returning this nothing else so I thought

00:21:10,480 --> 00:21:15,280
okay let's see how this thing was

00:21:13,000 --> 00:21:18,520
working and then I wrote a really really

00:21:15,280 --> 00:21:20,290
simple batch script because yeah I was

00:21:18,520 --> 00:21:22,170
growing up with bash and I thought I

00:21:20,290 --> 00:21:25,630
will just have this scenario when I have

00:21:22,170 --> 00:21:28,360
1000 directories with 1000 files inside

00:21:25,630 --> 00:21:31,330
of each empty files I'm going to list

00:21:28,360 --> 00:21:32,890
them so I just create a shell script to

00:21:31,330 --> 00:21:34,450
measure this as you can see here they

00:21:32,890 --> 00:21:36,550
love the non recursive option which is

00:21:34,450 --> 00:21:40,840
just listing the director is inside this

00:21:36,550 --> 00:21:43,720
fake environment is 0.05 was not

00:21:40,840 --> 00:21:44,950
expecting love to take so long but I

00:21:43,720 --> 00:21:48,430
think that it should be something around

00:21:44,950 --> 00:21:50,410
20 something seconds I mean in the

00:21:48,430 --> 00:21:51,970
meantime I can tell you that I was aware

00:21:50,410 --> 00:21:53,890
afraid that maybe I was using a user

00:21:51,970 --> 00:21:55,360
beam time and maybe it's not the proper

00:21:53,890 --> 00:21:55,660
way of doing it it's okay there you have

00:21:55,360 --> 00:21:58,150
it

00:21:55,660 --> 00:22:00,250
recursive 33 seconds we were talking

00:21:58,150 --> 00:22:01,130
about all these files then I tried a bad

00:22:00,250 --> 00:22:04,910
leave

00:22:01,130 --> 00:22:07,280
again it was a little bit more um was it

00:22:04,910 --> 00:22:09,169
slower than the club file then the other

00:22:07,280 --> 00:22:14,330
case is the recursive way it will be

00:22:09,169 --> 00:22:15,950
roughly I guess at the same I should

00:22:14,330 --> 00:22:16,460
have have this prepared okay there you

00:22:15,950 --> 00:22:18,559
have it

00:22:16,460 --> 00:22:21,140
twenty seconds and then the first law of

00:22:18,559 --> 00:22:22,970
implementation that I have there it's

00:22:21,140 --> 00:22:25,309
less than a second I mean I know I am

00:22:22,970 --> 00:22:27,410
NOT taking care of cash or you know they

00:22:25,309 --> 00:22:28,910
I don't know releasing the GL to use

00:22:27,410 --> 00:22:30,650
parallel computer or something fancy

00:22:28,910 --> 00:22:32,240
just the simplest thing that you can

00:22:30,650 --> 00:22:34,039
think okay and there you have it I mean

00:22:32,240 --> 00:22:35,690
it's and then I thought maybe it's the

00:22:34,039 --> 00:22:38,350
same thing I am doing it wrong so let's

00:22:35,690 --> 00:22:40,490
do the same performance and in Python

00:22:38,350 --> 00:22:43,070
which you know the time module or

00:22:40,490 --> 00:22:46,250
something and after all the twice it was

00:22:43,070 --> 00:22:47,840
more or less the same result and it's

00:22:46,250 --> 00:22:49,760
not like I want to say yeah this should

00:22:47,840 --> 00:22:51,650
be the new glove but this is how easy

00:22:49,760 --> 00:22:53,630
you can improve things there and maybe

00:22:51,650 --> 00:22:55,370
you are thinking in the next numpy the

00:22:53,630 --> 00:22:57,289
name in the next pandas the neck bite or

00:22:55,370 --> 00:22:59,360
something like that or I will not wait

00:22:57,289 --> 00:23:02,750
for the results their part is roughly

00:22:59,360 --> 00:23:04,700
the same believe me so yeah this is a

00:23:02,750 --> 00:23:06,049
summary is it's okay if you cannot read

00:23:04,700 --> 00:23:08,539
everything because you can check the

00:23:06,049 --> 00:23:09,950
slides afterwards about the version that

00:23:08,539 --> 00:23:11,750
you can use the licenses the

00:23:09,950 --> 00:23:13,730
compatibility with Python here I just

00:23:11,750 --> 00:23:15,380
want to highlight she Balkan I think the

00:23:13,730 --> 00:23:17,299
thing that I am working with and also

00:23:15,380 --> 00:23:19,039
sip because there is something that is

00:23:17,299 --> 00:23:20,809
called stable ABI maybe you heard about

00:23:19,039 --> 00:23:23,179
it yes yes

00:23:20,809 --> 00:23:25,070
similar be a good so this is just for

00:23:23,179 --> 00:23:27,380
developers to release wheels that are

00:23:25,070 --> 00:23:29,179
compatible with Python 3.5 onwards I

00:23:27,380 --> 00:23:31,010
don't need to have different wheels with

00:23:29,179 --> 00:23:32,630
different Python versions so this is

00:23:31,010 --> 00:23:34,159
really tricky it's just the way that you

00:23:32,630 --> 00:23:36,320
create objects are a more dynamic way

00:23:34,159 --> 00:23:38,590
but it's really hard and it's

00:23:36,320 --> 00:23:41,240
implementing it in those two options so

00:23:38,590 --> 00:23:43,370
that you can have information from the

00:23:41,240 --> 00:23:46,549
PI sub project you can find me here also

00:23:43,370 --> 00:23:48,049
you can check the my social networks and

00:23:46,549 --> 00:23:50,630
all their all the information and the

00:23:48,049 --> 00:23:52,610
you can just type make I add so make

00:23:50,630 --> 00:23:54,140
faster just for you to know the process

00:23:52,610 --> 00:23:56,900
of building all this wrapper so you can

00:23:54,140 --> 00:24:00,530
start playing around today about it and

00:23:56,900 --> 00:24:02,720
just as a PSA that it's always good to

00:24:00,530 --> 00:24:04,400
support your local groups so if you at

00:24:02,720 --> 00:24:05,720
any moment you come to Berlin I mean we

00:24:04,400 --> 00:24:07,850
have I think one of the most amazing

00:24:05,720 --> 00:24:09,910
Python communities out there we have pi

00:24:07,850 --> 00:24:12,940
ladies Python users Berlin Berlin

00:24:09,910 --> 00:24:15,300
by date everything so that's it thank

00:24:12,940 --> 00:24:15,300
you very much

00:24:15,660 --> 00:24:18,749
[Music]

00:24:21,979 --> 00:24:27,629
all right thank you very much we have

00:24:24,809 --> 00:24:29,999
time for some questions we have actually

00:24:27,629 --> 00:24:31,679
five minutes so a couple of questions

00:24:29,999 --> 00:24:33,179
sure and if you don't like your voice in

00:24:31,679 --> 00:24:34,859
a microphone maybe you can find me

00:24:33,179 --> 00:24:36,659
outside I will be here until Friday or

00:24:34,859 --> 00:24:38,609
we can hang after a couple of beer we

00:24:36,659 --> 00:24:47,209
can discuss the truth behind see was

00:24:38,609 --> 00:24:49,889
possible did you ever look into

00:24:47,209 --> 00:24:52,859
performance over had differences between

00:24:49,889 --> 00:24:54,719
those options no I haven't and I wanted

00:24:52,859 --> 00:24:56,969
to but then I thought hey that's not a

00:24:54,719 --> 00:24:58,859
half-an-hour talk so I was really think

00:24:56,969 --> 00:25:00,899
considering for the meetups or

00:24:58,859 --> 00:25:02,459
conference so to kind of do this kind of

00:25:00,899 --> 00:25:05,399
thing because I want to measure code

00:25:02,459 --> 00:25:06,899
length and a performance which is also

00:25:05,399 --> 00:25:08,819
critical I mean I have noticed some

00:25:06,899 --> 00:25:11,099
stuff different between the SIP and they

00:25:08,819 --> 00:25:12,659
spoken for example that there was an

00:25:11,099 --> 00:25:15,599
issue that she voguing was way slower

00:25:12,659 --> 00:25:18,239
because we were using lists in C++ and

00:25:15,599 --> 00:25:19,919
she ship was using back doors and then

00:25:18,239 --> 00:25:21,569
we have for example in some tables or

00:25:19,919 --> 00:25:23,339
cases like this they were kind of but

00:25:21,569 --> 00:25:24,989
yeah it's a good question and I will try

00:25:23,339 --> 00:25:28,189
to maybe next year I will have one

00:25:24,989 --> 00:25:28,189
performance thank you

00:25:34,899 --> 00:25:52,700
you can shout if your eyes yes

00:25:50,570 --> 00:25:54,909
lately there was a something that fixes

00:25:52,700 --> 00:25:57,379
that because I wanted to implement

00:25:54,909 --> 00:26:00,710
breaking the QAPI having for example for

00:25:57,379 --> 00:26:02,809
acute settings to have explicit cast in

00:26:00,710 --> 00:26:04,820
types and I needed to do those the name

00:26:02,809 --> 00:26:06,710
arguments so now it's implemented and

00:26:04,820 --> 00:26:08,629
it's out there so you can do it and now

00:26:06,710 --> 00:26:11,629
they have this a new notation which is

00:26:08,629 --> 00:26:12,950
at so you use the add between the name

00:26:11,629 --> 00:26:14,600
that you want to use and then you have

00:26:12,950 --> 00:26:16,279
nine arguments and you can parse it like

00:26:14,600 --> 00:26:20,539
a big normal dictionary for the arcs and

00:26:16,279 --> 00:26:22,090
there so yeah you can you can ask me

00:26:20,539 --> 00:26:26,019
live if you and I can show you how to do

00:26:22,090 --> 00:26:26,019
okay any more question

00:26:32,980 --> 00:26:42,259
you hear me yeah yes the Balkan uses

00:26:37,809 --> 00:26:45,440
some does it have some Simic integration

00:26:42,259 --> 00:26:49,249
yeah yeah it's he make its he make and

00:26:45,440 --> 00:26:51,619
you can make C++ project and you see

00:26:49,249 --> 00:26:57,259
make an integration in your project okay

00:26:51,619 --> 00:27:01,820
and does it for example you want to

00:26:57,259 --> 00:27:05,509
override land or some other Python

00:27:01,820 --> 00:27:07,340
futures can you override it in XML file

00:27:05,509 --> 00:27:09,019
for bindings and you name when I mean

00:27:07,340 --> 00:27:11,090
the only override that came come to my

00:27:09,019 --> 00:27:13,100
mind is that for example you can kind of

00:27:11,090 --> 00:27:16,039
like remove functions and replace it

00:27:13,100 --> 00:27:18,169
with a whole new Python equivalent so

00:27:16,039 --> 00:27:20,629
signature wise or functions we can

00:27:18,169 --> 00:27:25,159
remove arguments sometimes you had items

00:27:20,629 --> 00:27:27,350
like square brackets override operators

00:27:25,159 --> 00:27:29,389
yes I mean we have some special

00:27:27,350 --> 00:27:32,869
treatment for a few operate I don't know

00:27:29,389 --> 00:27:34,279
how come how much you can modify this

00:27:32,869 --> 00:27:36,230
thing but at least I know that you can

00:27:34,279 --> 00:27:39,019
manually modify for example the lower

00:27:36,230 --> 00:27:40,669
lower operator in C++ and in Python to

00:27:39,019 --> 00:27:43,549
do different things so you kind of like

00:27:40,669 --> 00:27:48,289
override the pythons default stuff yeah

00:27:43,549 --> 00:27:51,950
for example I have C++ method size and

00:27:48,289 --> 00:27:56,239
the other one is a operator for

00:27:51,950 --> 00:27:58,850
accessing it and I want in Python to to

00:27:56,239 --> 00:28:00,529
just use clear brackets for operating as

00:27:58,850 --> 00:28:02,809
long as you define this operator inside

00:28:00,529 --> 00:28:04,609
the type of the variable it will be

00:28:02,809 --> 00:28:07,460
possible because underneath it will call

00:28:04,609 --> 00:28:19,669
this specific rewriting that you have

00:28:07,460 --> 00:28:23,960
okay thank you any other question I will

00:28:19,669 --> 00:28:29,269
ask you a question okay so how is it is

00:28:23,960 --> 00:28:30,590
it to wrap a C++ class it's kind of the

00:28:29,269 --> 00:28:32,690
same thing that you saw there you need

00:28:30,590 --> 00:28:34,850
to just say the class will be an object

00:28:32,690 --> 00:28:37,609
so you declare declare a new object and

00:28:34,850 --> 00:28:38,960
then inside you have any function that

00:28:37,609 --> 00:28:40,410
you want to modify if you don't want to

00:28:38,960 --> 00:28:42,390
modify that you just close the tag

00:28:40,410 --> 00:28:44,610
and that automatically go to your header

00:28:42,390 --> 00:28:47,130
see the class take all the signature and

00:28:44,610 --> 00:28:49,290
expose everything if everything is

00:28:47,130 --> 00:28:52,110
normal in the sense of like there is no

00:28:49,290 --> 00:28:55,710
void star or weird you know kind of like

00:28:52,110 --> 00:28:58,260
the pointers poking around so yeah and

00:28:55,710 --> 00:29:01,350
can you then subclass that class from

00:28:58,260 --> 00:29:04,110
within Python as yes because you are

00:29:01,350 --> 00:29:06,390
exposing some a new type in Python so

00:29:04,110 --> 00:29:08,640
for example simple things that you can

00:29:06,390 --> 00:29:10,560
have in cute is a queue widget and then

00:29:08,640 --> 00:29:13,080
this is C++ you're exposed to the Python

00:29:10,560 --> 00:29:15,150
and the the recommended way of doing it

00:29:13,080 --> 00:29:17,070
is to use this as a meta class for your

00:29:15,150 --> 00:29:19,260
new class in Python that is called my

00:29:17,070 --> 00:29:22,150
widget or something like that so it is

00:29:19,260 --> 00:29:25,589
you can do it very nice

00:29:22,150 --> 00:29:25,589

YouTube URL: https://www.youtube.com/watch?v=02-IYuDQdTE


