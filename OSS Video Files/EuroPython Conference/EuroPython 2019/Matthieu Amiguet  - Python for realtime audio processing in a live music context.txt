Title: Matthieu Amiguet  - Python for realtime audio processing in a live music context
Publication date: 2019-09-03
Playlist: EuroPython 2019
Description: 
	"Python for realtime audio processing in a live music context
[EuroPython 2019 - Talk - 2019-07-10 - MongoDB  [PyData track]
[Basel, CH]

By Matthieu Amiguet 

At Les Chemins de Traverse we explore ways of ""augmenting"" acoustical musical instruments with new sonic possibilities offered by computers. For doing so, we need ultra-low latency real-time audio processing programs. Pretty much the typical situation where python should emnot/em be used, right? Wrong. As it happens, that's exactly what we've been doing for the past few years.

Building on Olivier Belanger's wonderful pyo module and (ab)using python's flexibility, we developed custom software to allow us to express our musical ideas.

If you want to hear how it sounds, you should go to Europython's social event that will feature a gig based on python-augmented (!) instruments. And if you want to know how we came to use python in this context and how we do it, you should come to this talk!



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2019.europython.eu/events/speaker-release-agreement/
Captions: 
	00:00:03,600 --> 00:00:10,660
so hello thank you too to be here the

00:00:08,170 --> 00:00:12,700
first thing I want to say even if Mark

00:00:10,660 --> 00:00:16,900
already said it is that we are giving a

00:00:12,700 --> 00:00:19,240
concert at the social even tomorrow and

00:00:16,900 --> 00:00:21,520
in these concerts we are going to use

00:00:19,240 --> 00:00:25,150
Python heavily even if it's not very

00:00:21,520 --> 00:00:28,150
visible in the concert so I propose to

00:00:25,150 --> 00:00:31,060
have this talk to explain why and how we

00:00:28,150 --> 00:00:34,420
are using Python for making music so

00:00:31,060 --> 00:00:36,040
this is the theoretical part and if you

00:00:34,420 --> 00:00:39,180
don't believe that it works just come

00:00:36,040 --> 00:00:42,820
tomorrow to the social event and listen

00:00:39,180 --> 00:00:45,010
so a very useful question when you meet

00:00:42,820 --> 00:00:49,270
someone in a convention like this one is

00:00:45,010 --> 00:00:52,629
and what are you using Python for and my

00:00:49,270 --> 00:00:54,670
answer is a little bit less usual it's

00:00:52,629 --> 00:00:57,270
well mainly for real-time audio

00:00:54,670 --> 00:01:02,199
processing in live music context and

00:00:57,270 --> 00:01:05,500
this is quite unexpected and it

00:01:02,199 --> 00:01:06,490
sometimes triggers reactions like what

00:01:05,500 --> 00:01:09,310
are you crazy

00:01:06,490 --> 00:01:11,950
why Python for this kind of this kind of

00:01:09,310 --> 00:01:14,529
thing and as it happens the answers are

00:01:11,950 --> 00:01:17,170
very easy are you crazy

00:01:14,529 --> 00:01:18,279
yes we are definitely and why Python

00:01:17,170 --> 00:01:21,039
because it's fun

00:01:18,279 --> 00:01:21,520
so I could stop here thank you for your

00:01:21,039 --> 00:01:25,840
attention

00:01:21,520 --> 00:01:29,619
have a nice meal thank you but as I was

00:01:25,840 --> 00:01:31,929
lucky enough to be a lot to the 45

00:01:29,619 --> 00:01:34,869
minutes slot for this talk I think I can

00:01:31,929 --> 00:01:38,560
get into some more detail than that so

00:01:34,869 --> 00:01:40,659
first some elements of context my name

00:01:38,560 --> 00:01:45,520
is Matt um again I'm a musician and a

00:01:40,659 --> 00:01:47,409
developer I'm I'm artistic director at

00:01:45,520 --> 00:01:50,799
lachemann service jointly with Barbara

00:01:47,409 --> 00:01:53,020
Mandir and Lee Sherman the Sabbath is a

00:01:50,799 --> 00:01:55,929
collective of musicians that plays in a

00:01:53,020 --> 00:01:58,679
variety of styles from Renaissance

00:01:55,929 --> 00:01:58,679
repertoire

00:02:01,650 --> 00:02:20,190
[Music]

00:02:15,180 --> 00:02:29,310
to algorithmic algorithmic composition

00:02:20,190 --> 00:02:29,310
[Music]

00:02:32,150 --> 00:02:43,380
[Music]

00:02:51,660 --> 00:02:58,660
[Music]

00:02:55,800 --> 00:03:00,580
by the way this music was generated by

00:02:58,660 --> 00:03:03,820
Python but that's not at all what I'm

00:03:00,580 --> 00:03:06,730
going to talk about today and one thing

00:03:03,820 --> 00:03:09,310
we've been researching quite a lot for

00:03:06,730 --> 00:03:13,710
the last decade or so is augmented

00:03:09,310 --> 00:03:16,930
instruments what do I mean by that it's

00:03:13,710 --> 00:03:19,360
taking an acoustic instrument like you

00:03:16,930 --> 00:03:23,110
know a flute violin piano or some talk

00:03:19,360 --> 00:03:25,810
that I am trying to extend the sonic

00:03:23,110 --> 00:03:29,200
possibilities of this instrument using

00:03:25,810 --> 00:03:32,380
new technologies and especially

00:03:29,200 --> 00:03:34,210
computers so why the strange name of

00:03:32,380 --> 00:03:36,790
mantid instruments actually it comes

00:03:34,210 --> 00:03:40,090
from augmented reality augmented reality

00:03:36,790 --> 00:03:43,180
we mix real-time views of the world with

00:03:40,090 --> 00:03:47,950
synthetic information that we add to the

00:03:43,180 --> 00:03:50,650
image and augmented instruments do the

00:03:47,950 --> 00:03:52,660
same they make they mix a real-time

00:03:50,650 --> 00:03:54,580
acoustic sound of the instruments with

00:03:52,660 --> 00:03:56,860
processed audio

00:03:54,580 --> 00:04:00,150
so in a sense augment and instruments

00:03:56,860 --> 00:04:04,450
our augmented reality applied to music

00:04:00,150 --> 00:04:06,190
as a side note it's not that important

00:04:04,450 --> 00:04:10,060
in depth oh but it's very important in

00:04:06,190 --> 00:04:12,280
our research we decided to use only free

00:04:10,060 --> 00:04:14,080
software for our research so we are

00:04:12,280 --> 00:04:18,070
making music with Linux and free

00:04:14,080 --> 00:04:21,230
software that's not a very common choice

00:04:18,070 --> 00:04:25,980
in the in the music world

00:04:21,230 --> 00:04:29,070
but I guess we would have ended up to to

00:04:25,980 --> 00:04:34,530
use Python even if we hadn't decided for

00:04:29,070 --> 00:04:36,180
this this restriction anyway the

00:04:34,530 --> 00:04:38,580
definition of augmentative means is a

00:04:36,180 --> 00:04:42,570
little bit Tara reticle wouldn't you

00:04:38,580 --> 00:04:45,300
have an example actually I will show you

00:04:42,570 --> 00:04:47,790
a set of examples the first one is very

00:04:45,300 --> 00:04:49,950
very simple you have a musician I

00:04:47,790 --> 00:04:52,110
picture the flute is because that the

00:04:49,950 --> 00:04:57,750
instrument I play but it could be any

00:04:52,110 --> 00:05:00,570
instrument and he plays through a

00:04:57,750 --> 00:05:04,220
speaker so you have a set of microphones

00:05:00,570 --> 00:05:07,740
wires amplification and everything and

00:05:04,220 --> 00:05:09,960
discussed with a speaker and in a very

00:05:07,740 --> 00:05:13,680
simple setup you could simply add a

00:05:09,960 --> 00:05:17,580
delay module that will like his name

00:05:13,680 --> 00:05:22,080
suggests delay the sound in time such a

00:05:17,580 --> 00:05:23,730
time shifting of the sound and the

00:05:22,080 --> 00:05:26,160
musician can have a full controller

00:05:23,730 --> 00:05:28,650
he needs a food controller because the

00:05:26,160 --> 00:05:31,230
hands are already busy playing the

00:05:28,650 --> 00:05:34,680
instrument a food controller to control

00:05:31,230 --> 00:05:37,500
the time of the of the delay the length

00:05:34,680 --> 00:05:39,810
of the delay and even with a very simple

00:05:37,500 --> 00:05:42,320
setup like this you can already do some

00:05:39,810 --> 00:05:53,700
interesting things

00:05:42,320 --> 00:05:58,790
[Music]

00:05:53,700 --> 00:05:59,220
[Applause]

00:05:58,790 --> 00:06:01,560
[Music]

00:05:59,220 --> 00:06:12,640
[Applause]

00:06:01,560 --> 00:06:15,890
[Music]

00:06:12,640 --> 00:06:18,350
okay so that's not bad for very simple

00:06:15,890 --> 00:06:19,760
setup and one flute-playing so this is

00:06:18,350 --> 00:06:21,920
really one foot playing with itself

00:06:19,760 --> 00:06:25,670
there's no pretty recorded song or

00:06:21,920 --> 00:06:27,130
anything I'm not sure Talman had

00:06:25,670 --> 00:06:29,810
envisioned this way of playing his music

00:06:27,130 --> 00:06:34,490
but actually it works pretty well

00:06:29,810 --> 00:06:36,980
and for this kind of setup you really

00:06:34,490 --> 00:06:40,730
don't need a computer you can do it with

00:06:36,980 --> 00:06:45,200
a hardware pedal and it's cheaper it's

00:06:40,730 --> 00:06:47,870
easier but if you get a little bit crazy

00:06:45,200 --> 00:06:50,800
with delays and become begin to have

00:06:47,870 --> 00:06:54,169
several delays wired in strange manners

00:06:50,800 --> 00:06:57,740
and the delay times are linked one to

00:06:54,169 --> 00:07:00,320
another it's not that clear that it's

00:06:57,740 --> 00:07:03,260
better to do it with harder pedals in

00:07:00,320 --> 00:07:06,080
this example with a set of four delays

00:07:03,260 --> 00:07:07,850
that are set up in the right manner and

00:07:06,080 --> 00:07:09,470
if you play the right notes in the right

00:07:07,850 --> 00:07:11,070
time you can get some interesting

00:07:09,470 --> 00:07:48,009
effects

00:07:11,070 --> 00:07:50,689
[Music]

00:07:48,009 --> 00:07:51,740
by the way this is an extra point of a

00:07:50,689 --> 00:07:53,659
piece we are we're going to play

00:07:51,740 --> 00:07:59,599
tomorrow with the social even so if you

00:07:53,659 --> 00:08:01,580
like it and just come to the concert so

00:07:59,599 --> 00:08:03,110
we are quickly reaching the point where

00:08:01,580 --> 00:08:05,150
it might be more reasonable to use a

00:08:03,110 --> 00:08:09,020
computer instead of multiple Hardware

00:08:05,150 --> 00:08:10,669
pedals but it's still relatively easy to

00:08:09,020 --> 00:08:13,460
do it with stock software you know

00:08:10,669 --> 00:08:17,659
you're just taking existing software I'm

00:08:13,460 --> 00:08:20,870
wiring it the right way and it you can

00:08:17,659 --> 00:08:26,180
play it the next example is a little bit

00:08:20,870 --> 00:08:28,610
more complicated I'm going to show you a

00:08:26,180 --> 00:08:30,169
complex piece of music with a strong

00:08:28,610 --> 00:08:35,349
architecture with a beginning a middle

00:08:30,169 --> 00:08:38,209
an end and really a an evolution and

00:08:35,349 --> 00:08:43,219
many things happening on the technical

00:08:38,209 --> 00:08:45,680
side many volumes changing and loops

00:08:43,219 --> 00:08:48,709
being recorded and lucid triggered and

00:08:45,680 --> 00:08:52,880
it becomes a unpractical and practicable

00:08:48,709 --> 00:08:56,720
for the musician to to control other

00:08:52,880 --> 00:08:59,779
details himself so either we have a

00:08:56,720 --> 00:09:02,779
technician that does all the you know

00:08:59,779 --> 00:09:04,610
the knob turning and button pressing why

00:09:02,779 --> 00:09:05,959
the musician plays but that's not

00:09:04,610 --> 00:09:07,579
exactly what we want to do with

00:09:05,959 --> 00:09:09,680
documentation students because we want

00:09:07,579 --> 00:09:13,310
them to be musical instruments that can

00:09:09,680 --> 00:09:18,350
be played by one person so the other the

00:09:13,310 --> 00:09:21,529
other possibility is to have choice that

00:09:18,350 --> 00:09:22,350
are made in advance and encoded in the

00:09:21,529 --> 00:09:23,900
computer

00:09:22,350 --> 00:09:29,130
[Music]

00:09:23,900 --> 00:09:33,680
a way or another so in this example we

00:09:29,130 --> 00:09:36,060
have a state machine and when the

00:09:33,680 --> 00:09:37,980
musician presses on the buttons of good

00:09:36,060 --> 00:09:40,460
food controller he triggers state

00:09:37,980 --> 00:09:44,280
changes I'm going to from this stage to

00:09:40,460 --> 00:09:46,710
this state and this triggers set of

00:09:44,280 --> 00:09:49,770
action like changing volumes or or

00:09:46,710 --> 00:09:52,350
recording a loose antioch that and so

00:09:49,770 --> 00:09:54,900
many things happen but the musician has

00:09:52,350 --> 00:09:59,070
only a few simple actions to make and

00:09:54,900 --> 00:10:01,760
hopefully it's freed up his heads to do

00:09:59,070 --> 00:10:01,760
better music

00:10:19,490 --> 00:10:22,570
[Music]

00:10:35,040 --> 00:11:04,710
[Music]

00:11:11,230 --> 00:11:14,330
[Music]

00:11:19,100 --> 00:11:23,479
[Music]

00:11:30,610 --> 00:11:38,990
[Music]

00:11:41,850 --> 00:11:49,100
[Music]

00:12:06,450 --> 00:12:09,559
[Music]

00:12:12,250 --> 00:12:20,419
[Music]

00:12:29,000 --> 00:12:35,049
[Music]

00:12:31,980 --> 00:12:35,049
[Applause]

00:12:42,820 --> 00:12:52,900
[Music]

00:13:02,030 --> 00:13:05,110
[Music]

00:13:07,740 --> 00:13:14,600
[Music]

00:13:18,940 --> 00:13:45,589
[Music]

00:13:37,810 --> 00:13:47,450
so thank you thank you so as I said

00:13:45,589 --> 00:13:51,200
before everything is play light there

00:13:47,450 --> 00:13:54,410
are no pre-recorded sounds I once played

00:13:51,200 --> 00:13:58,279
this piece in a wedding party and after

00:13:54,410 --> 00:14:01,279
I played it some someone a professional

00:13:58,279 --> 00:14:03,890
musician came to me and said oh that

00:14:01,279 --> 00:14:07,310
that was nice your your piece your car

00:14:03,890 --> 00:14:11,089
okay like this and I said well no it's

00:14:07,310 --> 00:14:13,540
not really Carol okay you really have to

00:14:11,089 --> 00:14:16,399
understand that the idea is that

00:14:13,540 --> 00:14:21,620
everything is played live in in the

00:14:16,399 --> 00:14:24,020
concert also we are slowly exiting the

00:14:21,620 --> 00:14:26,450
realm of existing software of stock

00:14:24,020 --> 00:14:28,700
software because here the Box state

00:14:26,450 --> 00:14:31,070
machine doesn't really exist with the

00:14:28,700 --> 00:14:33,440
right connections and everything so we

00:14:31,070 --> 00:14:39,310
had to develop this part ourselves to

00:14:33,440 --> 00:14:43,579
play this piece perhaps last example

00:14:39,310 --> 00:14:47,450
it's very similar but Nezzer an

00:14:43,579 --> 00:14:49,579
interesting thing until now I showed you

00:14:47,450 --> 00:14:52,640
only things with loopers and delays and

00:14:49,579 --> 00:14:55,490
so only time shifting if you want it's

00:14:52,640 --> 00:14:58,700
of course also possible to add effects

00:14:55,490 --> 00:15:00,680
of all kinds or synthetic sounds but

00:14:58,700 --> 00:15:03,380
that's not when something really do much

00:15:00,680 --> 00:15:05,270
synthetic lumps but and in this one

00:15:03,380 --> 00:15:09,380
something funny is happening if you look

00:15:05,270 --> 00:15:11,180
at the at the bottom blue path that goes

00:15:09,380 --> 00:15:13,550
through a loop and then something we

00:15:11,180 --> 00:15:19,670
call an envelope full over what comes

00:15:13,550 --> 00:15:23,180
out is a red red path so an audio part

00:15:19,670 --> 00:15:26,839
is getting is transformed into a control

00:15:23,180 --> 00:15:31,220
part for another and another sound and

00:15:26,839 --> 00:15:34,959
that's something funny to do and also

00:15:31,220 --> 00:15:34,959
that we had to developed ourselves

00:15:36,640 --> 00:16:25,409
[Music]

00:16:26,410 --> 00:16:32,660
so if you think of a solo flute piece

00:16:30,530 --> 00:16:34,850
probably you don't picture this kind of

00:16:32,660 --> 00:16:36,530
sound and that's exactly what we we are

00:16:34,850 --> 00:16:38,240
trying to do to extend as much as

00:16:36,530 --> 00:16:41,210
possible there's sonic possibilities of

00:16:38,240 --> 00:16:43,730
the instrument and actually for a few

00:16:41,210 --> 00:16:45,860
years we have been doing this kind of

00:16:43,730 --> 00:16:49,430
thing and everything was going very

00:16:45,860 --> 00:16:52,160
smoothly using partly existing software

00:16:49,430 --> 00:16:54,290
so free software as I told you so super

00:16:52,160 --> 00:16:57,380
looper guitar it's rock rock this kind

00:16:54,290 --> 00:16:59,300
of thing also custom fragments written

00:16:57,380 --> 00:17:02,270
in audio programming languages so

00:16:59,300 --> 00:17:05,870
specialized programming languages for

00:17:02,270 --> 00:17:10,010
audio we mostly use chalk but we also

00:17:05,870 --> 00:17:14,120
have few experiences with the pure data

00:17:10,010 --> 00:17:17,510
supercollider never see some what we

00:17:14,120 --> 00:17:19,730
could have done this kind of thing and

00:17:17,510 --> 00:17:21,680
we would connect everything with Jack I

00:17:19,730 --> 00:17:25,250
don't know if fusion we were probably

00:17:21,680 --> 00:17:28,190
not familiar with Jack for once it's one

00:17:25,250 --> 00:17:30,260
of the best recursive acronyms in the in

00:17:28,190 --> 00:17:35,120
the history with free software jack is

00:17:30,260 --> 00:17:38,720
the jack audio connection kit and it's a

00:17:35,120 --> 00:17:41,630
software that allow it's an audio audio

00:17:38,720 --> 00:17:45,430
daemon that allows to connect different

00:17:41,630 --> 00:17:47,990
audio applications on the same computer

00:17:45,430 --> 00:17:51,890
in the same way we do you would connect

00:17:47,990 --> 00:17:56,480
different audio you know rackable audio

00:17:51,890 --> 00:17:59,090
units with with jack cables but you do

00:17:56,480 --> 00:18:01,760
it in software it's it's very nice and

00:17:59,090 --> 00:18:05,030
we would manage everything with bash

00:18:01,760 --> 00:18:06,770
scripts so simply launch the the

00:18:05,030 --> 00:18:09,680
software we needed and connect

00:18:06,770 --> 00:18:15,040
everything and everything was what's

00:18:09,680 --> 00:18:17,660
good we thought but then we hit the wall

00:18:15,040 --> 00:18:19,340
we had a big problem and we realized

00:18:17,660 --> 00:18:22,120
that we couldn't go

00:18:19,340 --> 00:18:25,490
the same way we had to change something

00:18:22,120 --> 00:18:28,190
very fundamental in our way to do it

00:18:25,490 --> 00:18:31,100
what was the problem the problem was

00:18:28,190 --> 00:18:35,029
that we were able to play single single

00:18:31,100 --> 00:18:38,269
songs single Tunes very easily but we

00:18:35,029 --> 00:18:43,100
couldn't go smoothly from one song to

00:18:38,269 --> 00:18:45,529
another what we had to do was launch the

00:18:43,100 --> 00:18:48,380
right script then play the song and then

00:18:45,529 --> 00:18:51,769
go to the computer quit everything stop

00:18:48,380 --> 00:18:53,990
every sound launch a new a new script

00:18:51,769 --> 00:18:57,350
and then we couldn't continue and it's

00:18:53,990 --> 00:18:59,059
not that nice in the in a concert you

00:18:57,350 --> 00:19:03,129
know sometimes you want to crossfade

00:18:59,059 --> 00:19:06,649
from one song to another or or simply

00:19:03,129 --> 00:19:08,330
it's also not so nice on stage who have

00:19:06,649 --> 00:19:11,570
some someone go into a computer and

00:19:08,330 --> 00:19:17,450
bending and tightening things and that's

00:19:11,570 --> 00:19:21,049
not very very nice to look at so and of

00:19:17,450 --> 00:19:24,919
course possibility could have been to

00:19:21,049 --> 00:19:28,789
have some kind of mega a patch with

00:19:24,919 --> 00:19:32,210
every song encoded every song ready to

00:19:28,789 --> 00:19:35,090
go and just going from one to another

00:19:32,210 --> 00:19:36,679
but we have two problems with this the

00:19:35,090 --> 00:19:39,309
first one is performance if you have

00:19:36,679 --> 00:19:41,659
every possible song running in parallel

00:19:39,309 --> 00:19:43,779
you you are likely to have some

00:19:41,659 --> 00:19:47,990
performance problems on your computer

00:19:43,779 --> 00:19:49,490
and the other other problem is that we

00:19:47,990 --> 00:19:53,570
really wanted to have a modular approach

00:19:49,490 --> 00:19:55,460
because we compose songs and then when

00:19:53,570 --> 00:19:56,990
we make gigs we say well I'm going to

00:19:55,460 --> 00:19:59,480
play that song and that song and that

00:19:56,990 --> 00:20:01,460
song but maybe for another gig I will

00:19:59,480 --> 00:20:04,460
take another song and the first one of

00:20:01,460 --> 00:20:08,330
the first gig and you know so we really

00:20:04,460 --> 00:20:13,610
had to have a modern way of of

00:20:08,330 --> 00:20:17,029
implementing our songs and then reusing

00:20:13,610 --> 00:20:23,029
them in in gigs or in in sets in set

00:20:17,029 --> 00:20:25,370
lists so what we needed was some kind of

00:20:23,029 --> 00:20:28,930
gig framework you know like in web

00:20:25,370 --> 00:20:31,540
framework but for gigs

00:20:28,930 --> 00:20:35,650
the flask of the gigging musician if you

00:20:31,540 --> 00:20:38,080
want and what we realize is that that's

00:20:35,650 --> 00:20:40,809
that's something really really difficult

00:20:38,080 --> 00:20:42,970
to do in all your programming languages

00:20:40,809 --> 00:20:48,130
all your programming languages are very

00:20:42,970 --> 00:20:50,320
good at programming audio better be but

00:20:48,130 --> 00:20:52,540
they lack you know the higher

00:20:50,320 --> 00:20:54,970
abstractions the meet our programming

00:20:52,540 --> 00:20:57,720
features that make it easy to make

00:20:54,970 --> 00:21:01,630
something that looks even remotely like

00:20:57,720 --> 00:21:05,980
framework so we did quite a lot of

00:21:01,630 --> 00:21:09,309
research and finally we found this piyo

00:21:05,980 --> 00:21:12,070
piyo is a dedicated Python module for

00:21:09,309 --> 00:21:15,700
digital signal processing it's a very

00:21:12,070 --> 00:21:18,550
nice module developed mainly by Olivia

00:21:15,700 --> 00:21:23,920
Banerjee in the University of Montreal

00:21:18,550 --> 00:21:26,230
in Canada and actually I was also

00:21:23,920 --> 00:21:29,460
already quite familiar with Python

00:21:26,230 --> 00:21:34,900
before and when I saw this I thought

00:21:29,460 --> 00:21:37,210
well that sounds nice but if you know

00:21:34,900 --> 00:21:42,179
anything about real-time audio

00:21:37,210 --> 00:21:47,760
processing you should be quite skeptical

00:21:42,179 --> 00:21:51,400
are you it should be quite skeptical

00:21:47,760 --> 00:21:55,300
because it's very likely that Python is

00:21:51,400 --> 00:21:59,260
too slow for real-time audio and even if

00:21:55,300 --> 00:22:00,220
it's not to slow things like memory

00:21:59,260 --> 00:22:02,590
management

00:22:00,220 --> 00:22:05,500
you know garbage collections and this

00:22:02,590 --> 00:22:09,910
kind of thing are very likely to

00:22:05,500 --> 00:22:12,280
introduce too much latency and so you

00:22:09,910 --> 00:22:18,850
you get clicks in your audio and that's

00:22:12,280 --> 00:22:21,929
not nice however piyo does work because

00:22:18,850 --> 00:22:27,340
it works more or less like a marble run

00:22:21,929 --> 00:22:32,950
this one the idea if that you have

00:22:27,340 --> 00:22:35,470
blocks with and you can build paths with

00:22:32,950 --> 00:22:37,850
this block and these blocks and in this

00:22:35,470 --> 00:22:40,850
example if you drop a marble on

00:22:37,850 --> 00:22:42,679
Finnish path it will just follow the

00:22:40,850 --> 00:22:46,130
path on the normal speed on its own

00:22:42,679 --> 00:22:48,919
speed even if you were slow to build the

00:22:46,130 --> 00:22:52,700
path and you can build a second path

00:22:48,919 --> 00:22:54,500
while while marbles are running down

00:22:52,700 --> 00:22:57,440
there the first one and then just you

00:22:54,500 --> 00:23:00,200
know switch to to the other we just have

00:22:57,440 --> 00:23:01,640
to be a little bit careful on the moment

00:23:00,200 --> 00:23:04,010
of the switch because if there's a

00:23:01,640 --> 00:23:08,740
marble at that time it it will go out

00:23:04,010 --> 00:23:17,390
but you can do things relatively slowly

00:23:08,740 --> 00:23:20,000
and then had the path run at a higher

00:23:17,390 --> 00:23:24,440
speed and that's exactly what piyo is

00:23:20,000 --> 00:23:27,080
doing piyo has knowed you enjoin that's

00:23:24,440 --> 00:23:32,860
implemented and see it's very efficient

00:23:27,080 --> 00:23:32,860
very lightweight very nice sorry

00:23:36,799 --> 00:23:46,840
and there are bindings to Python that

00:23:41,659 --> 00:23:49,900
give you building blocks and and

00:23:46,840 --> 00:23:53,890
you know hook's to change things at all

00:23:49,900 --> 00:23:58,240
kind of of places and so all the heavy

00:23:53,890 --> 00:24:02,170
works of of dealing with them with audio

00:23:58,240 --> 00:24:04,960
samples and and memory and everything

00:24:02,170 --> 00:24:07,120
low level is completely invisible and

00:24:04,960 --> 00:24:11,200
you just have the nice colored blocks

00:24:07,120 --> 00:24:13,300
and you construct your path so this is

00:24:11,200 --> 00:24:15,640
not a toy convention this is a Python

00:24:13,300 --> 00:24:18,010
convention so maybe I can get a little

00:24:15,640 --> 00:24:20,110
bit more precise on how it works so

00:24:18,010 --> 00:24:22,570
remember the first example I showed you

00:24:20,110 --> 00:24:26,230
the Telamon cannon played by one

00:24:22,570 --> 00:24:29,580
musician how could we implant implement

00:24:26,230 --> 00:24:32,770
this in PI Oh actually it's very easy

00:24:29,580 --> 00:24:35,290
first you need some boilerplate code but

00:24:32,770 --> 00:24:37,960
really not that much that's an import

00:24:35,290 --> 00:24:40,720
create what's called the server that see

00:24:37,960 --> 00:24:43,470
the audio engine and then later on you

00:24:40,720 --> 00:24:48,850
will start the server and find a way to

00:24:43,470 --> 00:24:51,160
keep the main thread alive because the

00:24:48,850 --> 00:24:55,150
server is started on and a different

00:24:51,160 --> 00:24:57,910
thread and so if you just say server

00:24:55,150 --> 00:25:01,420
start and stop there the script will

00:24:57,910 --> 00:25:04,510
quit so one way is launching a GUI and

00:25:01,420 --> 00:25:06,700
there are other ways we don't choose a

00:25:04,510 --> 00:25:09,810
GUI on stage so we don't launch a GUI

00:25:06,700 --> 00:25:14,860
but and that's not that important then

00:25:09,810 --> 00:25:18,400
we try to do the the upper path on on

00:25:14,860 --> 00:25:19,780
the on the drawing so just having the

00:25:18,400 --> 00:25:21,940
sound of the musician going to the

00:25:19,780 --> 00:25:24,340
speaker and that's really easy you just

00:25:21,940 --> 00:25:27,220
have to create an input subject and the

00:25:24,340 --> 00:25:29,650
input object will represent the the

00:25:27,220 --> 00:25:33,360
audio stream coming from the input of

00:25:29,650 --> 00:25:37,030
the program so from the sound card and

00:25:33,360 --> 00:25:39,370
then if you call on any stream any audio

00:25:37,030 --> 00:25:42,160
stream of bio if you call the out method

00:25:39,370 --> 00:25:44,500
it will send this stream to the output

00:25:42,160 --> 00:25:47,860
of the program so this is a fully

00:25:44,500 --> 00:25:51,100
working program that will just get the

00:25:47,860 --> 00:25:57,970
sound through so that's that's not bad

00:25:51,100 --> 00:25:59,620
with what 1 2 3 4 5 lines of codes for

00:25:57,970 --> 00:26:00,490
the second path the one that goes

00:25:59,620 --> 00:26:03,790
through the

00:26:00,490 --> 00:26:07,120
lay that's not much more difficult

00:26:03,790 --> 00:26:10,390
we have several delay objects in PI over

00:26:07,120 --> 00:26:15,040
here I used a simple delay and the first

00:26:10,390 --> 00:26:18,120
argument to were a PI object-- they are

00:26:15,040 --> 00:26:21,670
cold so to an audio stream is the input

00:26:18,120 --> 00:26:25,809
cell here and the delay will take its

00:26:21,670 --> 00:26:28,960
input from the input object we will

00:26:25,809 --> 00:26:31,720
create it and then as we want the delay

00:26:28,960 --> 00:26:36,700
to to go also to to the speaker we

00:26:31,720 --> 00:26:40,240
called the out method on it and we have

00:26:36,700 --> 00:26:43,990
a third path to implement that's the red

00:26:40,240 --> 00:26:47,920
one so I want to use a food controller

00:26:43,990 --> 00:26:50,710
to tap tempo the length of the delay for

00:26:47,920 --> 00:26:55,090
this this code is using fukuko the food

00:26:50,710 --> 00:26:59,530
controller controller which is a small

00:26:55,090 --> 00:27:04,630
library I implemented to use the soft F

00:26:59,530 --> 00:27:07,210
food controller with with piyo and so

00:27:04,630 --> 00:27:10,780
some boilerplate code but what's

00:27:07,210 --> 00:27:14,860
interesting is b1 equals press button 1

00:27:10,780 --> 00:27:17,350
so mainly I'm making an object that

00:27:14,860 --> 00:27:19,300
represents the the all the times when I

00:27:17,350 --> 00:27:26,160
press a button of my food controller and

00:27:19,300 --> 00:27:28,090
then I make a timer object that will

00:27:26,160 --> 00:27:31,450
compute the time between two successive

00:27:28,090 --> 00:27:34,480
presses so if I press and then I wait

00:27:31,450 --> 00:27:36,850
three seconds and I press it will

00:27:34,480 --> 00:27:39,660
contain the number three and it's it's

00:27:36,850 --> 00:27:43,300
also a stream of data which continuously

00:27:39,660 --> 00:27:46,510
contains this information and then I

00:27:43,300 --> 00:27:48,460
just say to my delay object so the

00:27:46,510 --> 00:27:51,010
length of the delay will be the value of

00:27:48,460 --> 00:27:54,510
the timer and this is a full

00:27:51,010 --> 00:27:58,809
implementation of what you see above and

00:27:54,510 --> 00:28:01,510
it's really usable in a concert I mean

00:27:58,809 --> 00:28:05,559
you have to do some work to set up your

00:28:01,510 --> 00:28:09,130
computer so that it can deal with low

00:28:05,559 --> 00:28:13,529
latency audio that can be some work but

00:28:09,130 --> 00:28:18,549
the code and the code can work like this

00:28:13,529 --> 00:28:22,360
so we are very happy but we still have

00:28:18,549 --> 00:28:25,720
the wall because if I want to go to

00:28:22,360 --> 00:28:28,720
another another song I'll have to get

00:28:25,720 --> 00:28:31,539
this script and launch another one and I

00:28:28,720 --> 00:28:38,500
have gained nothing or almost nothing

00:28:31,539 --> 00:28:43,409
because now I have Python so we really

00:28:38,500 --> 00:28:46,870
needed to do some kind of a framework

00:28:43,409 --> 00:28:52,269
and we thought we have to modernize our

00:28:46,870 --> 00:28:56,889
gigs for our sets in a simple way so we

00:28:52,269 --> 00:28:59,259
said our gigs will be modules and we

00:28:56,889 --> 00:29:02,830
have some naming convention for instance

00:28:59,259 --> 00:29:05,080
if I say scenes equals and at least

00:29:02,830 --> 00:29:08,799
after that that will be the scenes order

00:29:05,080 --> 00:29:12,549
the tunes that I want to play in my gig

00:29:08,799 --> 00:29:14,980
scenes are also modules so that means

00:29:12,549 --> 00:29:17,500
that I will take advantage of the

00:29:14,980 --> 00:29:22,389
important dynamic importing capabilities

00:29:17,500 --> 00:29:26,169
of Python and then some setup code so

00:29:22,389 --> 00:29:28,269
I'm saying well forum for this gig I

00:29:26,169 --> 00:29:30,129
will have two microphones and I want to

00:29:28,269 --> 00:29:33,480
be able to be due to cross straight from

00:29:30,129 --> 00:29:38,019
one to another and I have some kind of

00:29:33,480 --> 00:29:41,230
blackboard object that anyone can read

00:29:38,019 --> 00:29:46,750
or write anyone mean the gig and and the

00:29:41,230 --> 00:29:49,029
scenes and the tools so I can for

00:29:46,750 --> 00:29:51,250
instance in my gig I set up my

00:29:49,029 --> 00:29:54,909
microphone and then I said contacts that

00:29:51,250 --> 00:29:58,720
make equals make and so I can access it

00:29:54,909 --> 00:30:00,639
from other other part of my code that's

00:29:58,720 --> 00:30:02,580
taking advantage of course of the

00:30:00,639 --> 00:30:08,080
dynamic typing possibilities of peyten

00:30:02,580 --> 00:30:11,610
and the scenes become very very easy so

00:30:08,080 --> 00:30:15,140
in a scene so as I said it's a module

00:30:11,610 --> 00:30:18,650
and I I can say well I I need

00:30:15,140 --> 00:30:22,910
to use the expression pedal and I want

00:30:18,650 --> 00:30:24,980
to have loops of course I can use all

00:30:22,910 --> 00:30:29,090
the features of Python for instance in

00:30:24,980 --> 00:30:31,700
this example I had several buttons of my

00:30:29,090 --> 00:30:33,890
foot controller that had to behave in a

00:30:31,700 --> 00:30:36,110
similar fashion so why not use this

00:30:33,890 --> 00:30:41,480
comprehension to make all four of them

00:30:36,110 --> 00:30:45,620
in one one time you see that I used the

00:30:41,480 --> 00:30:49,430
context that make in the in the

00:30:45,620 --> 00:30:52,340
definition of my of my loops and I also

00:30:49,430 --> 00:30:56,300
have some decorators to that provide

00:30:52,340 --> 00:30:58,160
hooks in the at some points in the

00:30:56,300 --> 00:31:00,770
lifecycle of the scene so when the scene

00:30:58,160 --> 00:31:04,820
is create he'll activate he deactivated

00:31:00,770 --> 00:31:07,580
and so and then it's very easy to have a

00:31:04,820 --> 00:31:13,370
master script that's the core of our

00:31:07,580 --> 00:31:15,260
framework that will find the gig in this

00:31:13,370 --> 00:31:18,230
example you you have to call it in the

00:31:15,260 --> 00:31:24,650
comment line with the name of the gig so

00:31:18,230 --> 00:31:26,990
I launch gig Europe - to 2019 it will

00:31:24,650 --> 00:31:28,880
find the right module it will find the

00:31:26,990 --> 00:31:31,910
scenes that are in it

00:31:28,880 --> 00:31:34,790
import every scene and then I can

00:31:31,910 --> 00:31:36,530
register some events for instance when I

00:31:34,790 --> 00:31:38,510
press on certain buttons of my foot

00:31:36,530 --> 00:31:43,700
controller to switch from one scene to

00:31:38,510 --> 00:31:50,410
another and with this I can I can really

00:31:43,700 --> 00:31:55,550
easily make this kind of gig framework I

00:31:50,410 --> 00:31:57,200
talked about and it works pretty well of

00:31:55,550 --> 00:31:58,490
course this is only a principle there

00:31:57,200 --> 00:32:00,770
wasn't the real code is much longer

00:31:58,490 --> 00:32:05,120
there there's there's some error

00:32:00,770 --> 00:32:07,930
checking and things like that so but

00:32:05,120 --> 00:32:11,720
still I think the the whole framework

00:32:07,930 --> 00:32:15,020
must be way under a thousand line which

00:32:11,720 --> 00:32:19,940
is really really reasonable for all the

00:32:15,020 --> 00:32:20,930
kind of thing we were doing and so this

00:32:19,940 --> 00:32:25,510
was

00:32:20,930 --> 00:32:28,910
- thanks - very nice features of Python

00:32:25,510 --> 00:32:31,960
like the dynamic time typing dynamic

00:32:28,910 --> 00:32:35,420
imports decorators code introspection

00:32:31,960 --> 00:32:38,480
this kind of thing to be completely

00:32:35,420 --> 00:32:42,590
honest in a first version we also used

00:32:38,480 --> 00:32:45,470
some disreputable features like monkey

00:32:42,590 --> 00:32:52,280
patching live inspection of execution

00:32:45,470 --> 00:32:55,070
frames and all kind of hacks but still

00:32:52,280 --> 00:32:57,260
we thought we need them and we had them

00:32:55,070 --> 00:33:01,010
so we could have a prototype very

00:32:57,260 --> 00:33:03,680
quickly and after some months we thought

00:33:01,010 --> 00:33:06,950
well this is really really ugly we must

00:33:03,680 --> 00:33:09,290
make some something about it and we we

00:33:06,950 --> 00:33:13,490
are getting rid of all the obvious

00:33:09,290 --> 00:33:15,050
features one by one but still all the

00:33:13,490 --> 00:33:17,180
features are there and if you need

00:33:15,050 --> 00:33:20,510
something and you need to do something

00:33:17,180 --> 00:33:23,030
really unusual or strange everything is

00:33:20,510 --> 00:33:27,950
there and that's something really nice

00:33:23,030 --> 00:33:32,870
with the Python language I think so now

00:33:27,950 --> 00:33:34,850
we found a way around the world we see

00:33:32,870 --> 00:33:36,980
that there is still a long journey in

00:33:34,850 --> 00:33:41,660
front of us but now we can go forward

00:33:36,980 --> 00:33:44,180
and explore new territories and we are

00:33:41,660 --> 00:33:50,170
now able to go seamlessly from one scene

00:33:44,180 --> 00:33:53,720
to another without sound interruption or

00:33:50,170 --> 00:33:56,030
also with for those who know that with

00:33:53,720 --> 00:33:57,800
this kind of thing also with the effects

00:33:56,030 --> 00:34:00,140
tales you know if you have a long long

00:33:57,800 --> 00:34:02,150
reverb and you switch to another scene

00:34:00,140 --> 00:34:06,550
or tune you don't want the reverb to be

00:34:02,150 --> 00:34:09,950
cut but you want to it to die slowly

00:34:06,550 --> 00:34:13,820
this kind of thing and everything works

00:34:09,950 --> 00:34:16,730
very well so my conclusion would be that

00:34:13,820 --> 00:34:22,070
the combination of Python pile really

00:34:16,730 --> 00:34:24,650
supports our creative process in that it

00:34:22,070 --> 00:34:28,280
makes experimentation easy when we have

00:34:24,650 --> 00:34:30,770
an idea a musical idea it's very easy to

00:34:28,280 --> 00:34:33,080
implement it and test it and this is

00:34:30,770 --> 00:34:36,590
very important because we have

00:34:33,080 --> 00:34:40,910
ideas and to be honest I would say nine

00:34:36,590 --> 00:34:43,370
out of ten never reach the stage we try

00:34:40,910 --> 00:34:46,190
them and say well no that wasn't a good

00:34:43,370 --> 00:34:48,530
idea so if we need I don't know three

00:34:46,190 --> 00:34:52,130
four five days to implement an idea

00:34:48,530 --> 00:34:55,760
before we test it we simply don't have

00:34:52,130 --> 00:34:58,040
the time to do it and with Python

00:34:55,760 --> 00:35:02,320
everything is going very fast and we can

00:34:58,040 --> 00:35:06,560
we have a very direct path from the

00:35:02,320 --> 00:35:08,810
initial idea to its prototype and well

00:35:06,560 --> 00:35:14,300
most of the time the prototype is also

00:35:08,810 --> 00:35:16,760
the production code another really

00:35:14,300 --> 00:35:19,070
really great thing is that piyo is very

00:35:16,760 --> 00:35:20,990
actively developed the the main

00:35:19,070 --> 00:35:23,210
developer led by no she is very very

00:35:20,990 --> 00:35:27,740
dedicated to making piyo better and

00:35:23,210 --> 00:35:30,470
better and it happened many times that I

00:35:27,740 --> 00:35:35,060
was working on some clothes and some

00:35:30,470 --> 00:35:36,980
time as suddenly I was blocked and I

00:35:35,060 --> 00:35:39,020
would write through the list saying well

00:35:36,980 --> 00:35:42,260
I'm trying to do this and this with piyo

00:35:39,020 --> 00:35:44,060
and I can't find how to do it and

00:35:42,260 --> 00:35:47,570
usually I would do it

00:35:44,060 --> 00:35:48,200
you know on the evening and I would go

00:35:47,570 --> 00:35:50,450
to sleep

00:35:48,200 --> 00:35:52,250
and I'm living in Switzerland Olivia no

00:35:50,450 --> 00:35:55,430
she is living in Canada and that means

00:35:52,250 --> 00:35:58,220
that he had still a long day in front of

00:35:55,430 --> 00:36:00,650
him at that time and when I would wake

00:35:58,220 --> 00:36:02,840
up the following morning I would have an

00:36:00,650 --> 00:36:05,000
answer on the list well it was not

00:36:02,840 --> 00:36:08,060
possible but it's now implemented just

00:36:05,000 --> 00:36:11,510
check out the latest code and it really

00:36:08,060 --> 00:36:14,240
happened many times and well that's

00:36:11,510 --> 00:36:16,460
simply great so I know he couldn't be

00:36:14,240 --> 00:36:21,230
here today but thank you Olivia for this

00:36:16,460 --> 00:36:23,900
great world and this combination of

00:36:21,230 --> 00:36:26,300
Python piyo allows us to have the sea

00:36:23,900 --> 00:36:28,580
efficiency it's we really need

00:36:26,300 --> 00:36:30,650
efficiency and very low latency when we

00:36:28,580 --> 00:36:34,670
do real-time audio but with all the

00:36:30,650 --> 00:36:37,580
flexibility of Tizen it's also an quite

00:36:34,670 --> 00:36:40,220
an unexpected use case for Python and I

00:36:37,580 --> 00:36:42,350
think it really shows their fertility of

00:36:40,220 --> 00:36:46,070
the language and the ecosystem and

00:36:42,350 --> 00:36:46,850
that's great now maybe an interesting

00:36:46,070 --> 00:36:51,080
question

00:36:46,850 --> 00:36:55,910
would be we are very happy now with this

00:36:51,080 --> 00:36:57,770
pattern pyro solution but what could

00:36:55,910 --> 00:37:00,890
possibly make us consider another

00:36:57,770 --> 00:37:04,430
solution and I can see two places where

00:37:00,890 --> 00:37:06,650
I'm not completely satisfied and I would

00:37:04,430 --> 00:37:10,310
consider changing the first one is

00:37:06,650 --> 00:37:12,890
catching errors if you see this code

00:37:10,310 --> 00:37:14,210
here I have a callback that would be

00:37:12,890 --> 00:37:17,720
called when I press the button on my

00:37:14,210 --> 00:37:19,940
foot and roller and as it's as it

00:37:17,720 --> 00:37:22,730
happens I made a typo in my in my

00:37:19,940 --> 00:37:26,840
callback code I wanted to say loop set

00:37:22,730 --> 00:37:31,700
something and I wrote something else as

00:37:26,840 --> 00:37:34,550
I'm a very very serious developer I also

00:37:31,700 --> 00:37:38,120
documented my typos but I don't do it

00:37:34,550 --> 00:37:41,030
all I don't always do it and of course

00:37:38,120 --> 00:37:43,400
this typo will be absolutely no problem

00:37:41,030 --> 00:37:45,770
when I launch my script and it's only

00:37:43,400 --> 00:37:49,730
when I press on the foot controller that

00:37:45,770 --> 00:37:52,130
I will get an error so piyo is

00:37:49,730 --> 00:37:55,090
relatively resilient in this kind of

00:37:52,130 --> 00:37:58,190
case it won't crash the whole thing so

00:37:55,090 --> 00:38:01,610
even if it happens in a gig it's not the

00:37:58,190 --> 00:38:03,980
end of the world but one thing is sure

00:38:01,610 --> 00:38:10,370
it won't do what I intended it to do and

00:38:03,980 --> 00:38:15,080
it can be quite annoying so I I would

00:38:10,370 --> 00:38:20,320
appreciate to to have some tools that

00:38:15,080 --> 00:38:25,220
would catch most of errors before the

00:38:20,320 --> 00:38:27,740
they are even executed another thing is

00:38:25,220 --> 00:38:32,390
that like many frameworks in imperative

00:38:27,740 --> 00:38:38,720
languages piyo heavily relies on

00:38:32,390 --> 00:38:42,050
callbacks and callbacks are very nice

00:38:38,720 --> 00:38:46,160
they work nice we are used to it to them

00:38:42,050 --> 00:38:50,440
but that's they are not always the best

00:38:46,160 --> 00:38:50,440
way of expressing ideas and

00:38:50,620 --> 00:38:55,030
maybe it would be interesting to explore

00:38:52,480 --> 00:38:59,620
other other manner of organizing things

00:38:55,030 --> 00:39:02,580
in time then then callbacks so maybe I

00:38:59,620 --> 00:39:05,200
read too much about Haskell now I want

00:39:02,580 --> 00:39:08,430
catching errors the compile time get rid

00:39:05,200 --> 00:39:13,480
of callbacks I don't know anyway

00:39:08,430 --> 00:39:16,270
reimplemented the the our whole set ups

00:39:13,480 --> 00:39:24,670
and and gigs in our new language would

00:39:16,270 --> 00:39:27,010
be quite an expensive thing to do so I

00:39:24,670 --> 00:39:30,610
think we would really need to have very

00:39:27,010 --> 00:39:32,740
very obvious advantages to to go away

00:39:30,610 --> 00:39:37,210
from this solution but that was just

00:39:32,740 --> 00:39:41,620
true to say what could be even better

00:39:37,210 --> 00:39:44,860
if you want to hear more music than the

00:39:41,620 --> 00:39:46,810
little experts you heard of course the

00:39:44,860 --> 00:39:50,080
best thing to do is come to the social

00:39:46,810 --> 00:39:51,970
even tomorrow we are playing live if you

00:39:50,080 --> 00:39:55,600
are the kind of old-fashioned people

00:39:51,970 --> 00:39:58,000
that still buy CD like me you can buy a

00:39:55,600 --> 00:40:01,590
CD I have a few with me you can just

00:39:58,000 --> 00:40:05,410
come to me this is our latest album with

00:40:01,590 --> 00:40:09,670
many many augmented instruments things

00:40:05,410 --> 00:40:13,540
all backed by piyo you can also have

00:40:09,670 --> 00:40:18,100
this album energy mat dematerialized

00:40:13,540 --> 00:40:21,550
that's a hard word in mp3 format on

00:40:18,100 --> 00:40:23,980
Bandcamp and if you really want to

00:40:21,550 --> 00:40:26,140
support the platforms instead of

00:40:23,980 --> 00:40:28,930
supporting the musicians you can also

00:40:26,140 --> 00:40:31,900
stream from spotify deezer

00:40:28,930 --> 00:40:37,990
google and virtually any streaming

00:40:31,900 --> 00:40:41,140
platform so that's it if you have

00:40:37,990 --> 00:40:44,110
questions I think we can take one or two

00:40:41,140 --> 00:40:46,900
questions and of course I'm available

00:40:44,110 --> 00:40:49,290
after after my talk to to answer

00:40:46,900 --> 00:40:51,910
questions one by one

00:40:49,290 --> 00:40:59,460
thank you for your attention

00:40:51,910 --> 00:41:02,710
[Applause]

00:40:59,460 --> 00:41:04,750
hello so thank you for this insightful

00:41:02,710 --> 00:41:07,180
presentation I'm just curious to know

00:41:04,750 --> 00:41:09,910
how you choose to annotate your music

00:41:07,180 --> 00:41:12,790
music score in order to know which foot

00:41:09,910 --> 00:41:16,240
button to press at what time sorry I

00:41:12,790 --> 00:41:18,670
didn't so I said I'm curious to know how

00:41:16,240 --> 00:41:23,140
you chose to annotate your own music

00:41:18,670 --> 00:41:25,930
score in your part you know which foot

00:41:23,140 --> 00:41:28,599
button to press at what times that's

00:41:25,930 --> 00:41:31,839
that's a big problem how to how to write

00:41:28,599 --> 00:41:34,180
we do quite some compositions for for

00:41:31,839 --> 00:41:40,000
augmented instruments and the writing

00:41:34,180 --> 00:41:43,210
part is is a real problem sometimes we

00:41:40,000 --> 00:41:46,480
just have you know a standard music

00:41:43,210 --> 00:41:48,760
scores and we just annotate like numbers

00:41:46,480 --> 00:41:52,359
or a thing like that sometimes

00:41:48,760 --> 00:41:57,070
we really have a completely different

00:41:52,359 --> 00:42:00,310
notation because we we don't have any

00:41:57,070 --> 00:42:04,720
use for the the traditional five five

00:42:00,310 --> 00:42:08,740
lines notation but actually we don't

00:42:04,720 --> 00:42:11,670
really know and sometimes it's even the

00:42:08,740 --> 00:42:16,030
code that's that's slowly becoming the

00:42:11,670 --> 00:42:19,920
score it happens that we you we also do

00:42:16,030 --> 00:42:23,380
a lot of improvisation on so on canvases

00:42:19,920 --> 00:42:25,660
and sometimes we don't even write

00:42:23,380 --> 00:42:28,599
anything and if we have a question we go

00:42:25,660 --> 00:42:30,339
to and do the code and say oh yes we

00:42:28,599 --> 00:42:33,490
decided to I have that and that and that

00:42:30,339 --> 00:42:37,960
so that's that's a good question but I

00:42:33,490 --> 00:42:43,210
don't really have an answer another

00:42:37,960 --> 00:42:47,949
question okay so thank you very much

00:42:43,210 --> 00:42:47,949

YouTube URL: https://www.youtube.com/watch?v=IdsrZYZ0TI0


