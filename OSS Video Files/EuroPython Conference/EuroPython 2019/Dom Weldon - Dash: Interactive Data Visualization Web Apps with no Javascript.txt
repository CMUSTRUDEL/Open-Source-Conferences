Title: Dom Weldon - Dash: Interactive Data Visualization Web Apps with no Javascript
Publication date: 2019-09-03
Playlist: EuroPython 2019
Description: 
	"Dash: Interactive Data Visualization Web Apps with no Javascript
[EuroPython 2019 - Talk - 2019-07-10 - Singapore [PyData track]
[Basel, CH]

By Dom Weldon

Your data science or machine learning project probably won't just produce a written report. Instead, projects are increasingly expected to produce interactive tools to allow end-users to explore data and results with rich, interactive visualizations. Inevitably, this will be done in a web browser, meaning you'll need to add a quantitatively trained web developer to your team, or have your data scientists spend time learning HTML, Javascript and CSS. Dash, a project by the team that makes Plotly, solves some of these problems by allowing data scientists to build rich and interactive websites in pure python, with minimal knowledge of HTML and absolutely no Javascript. 

At decisionLab, a London-based data science consultancy producing decision tools, we've embraced Dash to produce proof-of-concept models for our projects in alpha. Although we're not officially connected to the plotly/Dash project, by using the library daily across many projects, we've learned many lessons and what we feel are best practises we'd like to share, and hear feedback on!

This talk will give an overview of Dash, how it works and what it can be used for, before outlining some of the common problems that emerge when data scientists are let loose to produce web applications, and web developers have to work with the pydata ecosystem. The talk also covers effective working practises to start producing cool interactive statistical web applications, fast. We'll also identify some of the pitfalls of Dash, and how and when to make the decision to stop using Dash and start building a proper web application.

Slides: http://domweldon-europython-2019-dash.s3.eu-west-2.amazonaws.com/index.html



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2019.europython.eu/events/speaker-release-agreement/

    "
Captions: 
	00:00:02,649 --> 00:00:10,090
thank you very much and so yes hello I'm

00:00:06,490 --> 00:00:11,710
here to talk about - and so this is a -

00:00:10,090 --> 00:00:15,429
is a framework that allows you to have

00:00:11,710 --> 00:00:17,080
an interactive data visualization web

00:00:15,429 --> 00:00:20,950
applications with minimal or no

00:00:17,080 --> 00:00:22,300
JavaScript and so just before I go on as

00:00:20,950 --> 00:00:24,610
well and these slides are actually

00:00:22,300 --> 00:00:26,259
themselves a web page and so if you want

00:00:24,610 --> 00:00:29,230
to follow along or look at these slides

00:00:26,259 --> 00:00:31,390
and either during the talk or a bit

00:00:29,230 --> 00:00:35,230
later on please do take those links down

00:00:31,390 --> 00:00:36,339
and use them to explore the various bits

00:00:35,230 --> 00:00:40,269
of code that are in this presentation

00:00:36,339 --> 00:00:43,300
and an alternative title and for this

00:00:40,269 --> 00:00:45,699
particular talk is what you can can't

00:00:43,300 --> 00:00:48,370
should and also probably shouldn't do

00:00:45,699 --> 00:00:51,100
and with that and from the plotly

00:00:48,370 --> 00:00:52,359
project and and so throughout this talk

00:00:51,100 --> 00:00:54,280
I'm gonna give a brief introduction

00:00:52,359 --> 00:00:56,559
stash and how it works and what you can

00:00:54,280 --> 00:00:58,420
do with it discuss what we've learned a

00:00:56,559 --> 00:01:00,640
decision lab from using - across our

00:00:58,420 --> 00:01:02,649
various different projects and kind of

00:01:00,640 --> 00:01:03,879
identifying all sort of shapes and areas

00:01:02,649 --> 00:01:05,050
that we think might be sort of good

00:01:03,879 --> 00:01:07,930
practice and lessons that we've learned

00:01:05,050 --> 00:01:09,760
and I will be kind of looking for

00:01:07,930 --> 00:01:11,590
feedback on some of the thoughts and the

00:01:09,760 --> 00:01:14,050
ways that we're using - and so please do

00:01:11,590 --> 00:01:16,000
ask a question at the end or grab me if

00:01:14,050 --> 00:01:17,650
you see me at the conference and and

00:01:16,000 --> 00:01:18,820
start talking about - because it really

00:01:17,650 --> 00:01:20,470
is quite a young project and it's

00:01:18,820 --> 00:01:21,670
something that we're very interested in

00:01:20,470 --> 00:01:23,590
and I'd be very interested in

00:01:21,670 --> 00:01:25,330
collaborating with people to see how

00:01:23,590 --> 00:01:27,370
they're using - and where they can use -

00:01:25,330 --> 00:01:28,900
in the future and just bring those links

00:01:27,370 --> 00:01:30,220
up there again because I'm not sure that

00:01:28,900 --> 00:01:33,340
I've put them throughout the rest of

00:01:30,220 --> 00:01:34,870
presentation and I should also say as

00:01:33,340 --> 00:01:37,320
well if you're really keen and there's a

00:01:34,870 --> 00:01:42,730
docker that you can start up in the

00:01:37,320 --> 00:01:43,990
examples the - github and and the links

00:01:42,730 --> 00:01:46,030
and the slides will link to the docker

00:01:43,990 --> 00:01:49,450
so you can follow the presentation and

00:01:46,030 --> 00:01:51,220
in the comfort of your own home okay a

00:01:49,450 --> 00:01:52,360
final point about the slides as well if

00:01:51,220 --> 00:01:54,280
you are viewing them on the web and

00:01:52,360 --> 00:01:56,020
because I know that this is recorded as

00:01:54,280 --> 00:01:58,180
well and every time you see one of those

00:01:56,020 --> 00:02:00,700
down emojis push the down and the down

00:01:58,180 --> 00:02:04,480
button rather than the right hand side

00:02:00,700 --> 00:02:07,630
button and say should also practice this

00:02:04,480 --> 00:02:10,330
saying that I'm not - experts and I'm

00:02:07,630 --> 00:02:12,249
not an author on the project you know

00:02:10,330 --> 00:02:13,660
and if you are actually from the plotly

00:02:12,249 --> 00:02:15,130
- project and

00:02:13,660 --> 00:02:16,780
and you know anything I say is out of

00:02:15,130 --> 00:02:18,970
date or wildly contentious

00:02:16,780 --> 00:02:20,320
please Steve get in touch and I'm more

00:02:18,970 --> 00:02:23,500
than happy to correct anything you'll

00:02:20,320 --> 00:02:24,790
learn more about - and so actually that

00:02:23,500 --> 00:02:26,710
does kind of pose a question why on

00:02:24,790 --> 00:02:28,630
earth am I here if I'm not a - expert

00:02:26,710 --> 00:02:30,760
and and most of the point as well I'm a

00:02:28,630 --> 00:02:33,130
my background is in full stack web

00:02:30,760 --> 00:02:35,890
development I'm a Python and JavaScript

00:02:33,130 --> 00:02:39,280
developer so why am i using place and to

00:02:35,890 --> 00:02:42,040
write JavaScript well and to answer that

00:02:39,280 --> 00:02:43,390
question and as was introduced before I

00:02:42,040 --> 00:02:45,160
work for a decision lab we're a

00:02:43,390 --> 00:02:47,590
london-based mathematical modeling

00:02:45,160 --> 00:02:49,270
consultancy and before I go on as well I

00:02:47,590 --> 00:02:50,410
should say I'm very sorry about the

00:02:49,270 --> 00:02:52,510
state of my country at the moment and

00:02:50,410 --> 00:02:54,510
brexit please don't ask me about brexit

00:02:52,510 --> 00:02:58,450
I have no idea what's going on either

00:02:54,510 --> 00:03:00,400
and I should also invite et another very

00:02:58,450 --> 00:03:03,490
fun Python conference which is Pike on

00:03:00,400 --> 00:03:05,590
London which is also Pike on UK this is

00:03:03,490 --> 00:03:07,090
in Cardiff this year in September it's

00:03:05,590 --> 00:03:09,100
great fun please do you come along and

00:03:07,090 --> 00:03:11,070
don't be put off by everything you read

00:03:09,100 --> 00:03:14,800
in the news about the UK at the moment

00:03:11,070 --> 00:03:16,690
say and why are we using - that decision

00:03:14,800 --> 00:03:18,459
now and well one thing you might have

00:03:16,690 --> 00:03:21,160
identified at various places in

00:03:18,459 --> 00:03:23,080
conferences or at your company or your

00:03:21,160 --> 00:03:26,230
organization and is that they're almost

00:03:23,080 --> 00:03:28,120
like two cultures of Python I kind of

00:03:26,230 --> 00:03:30,910
call this like the Python data and the

00:03:28,120 --> 00:03:32,650
Python Software cultures and like you'll

00:03:30,910 --> 00:03:34,270
kind of spot it in the developers that

00:03:32,650 --> 00:03:36,370
you meet or in the the meetups that you

00:03:34,270 --> 00:03:38,260
attend there are some you know Python

00:03:36,370 --> 00:03:40,810
courses which are very much focused on G

00:03:38,260 --> 00:03:42,610
Python notebooks pandas Syfy tensorflow

00:03:40,810 --> 00:03:44,020
that kind of thing and and then there's

00:03:42,610 --> 00:03:46,870
also a community of software engineers

00:03:44,020 --> 00:03:49,060
that use Python and you know hate do

00:03:46,870 --> 00:03:51,430
fighter notebooks then I sometimes fall

00:03:49,060 --> 00:03:53,860
into that camp and but we'll use and

00:03:51,430 --> 00:03:54,910
tools more like c-clown kami and the

00:03:53,860 --> 00:03:56,650
various other kind of database

00:03:54,910 --> 00:03:59,350
technologies and so on and to actually

00:03:56,650 --> 00:04:00,910
kind of build production software and so

00:03:59,350 --> 00:04:02,830
collaboration between these two cultures

00:04:00,910 --> 00:04:04,209
is very important and it's something

00:04:02,830 --> 00:04:06,040
that we we try and break down as much as

00:04:04,209 --> 00:04:08,440
possible that decision lab and but it

00:04:06,040 --> 00:04:10,090
can be very time-consuming and and so

00:04:08,440 --> 00:04:11,860
what we were looking for especially on a

00:04:10,090 --> 00:04:13,150
small project I should say and so if

00:04:11,860 --> 00:04:14,760
you're building a big production web app

00:04:13,150 --> 00:04:16,630
that's certainly something that you

00:04:14,760 --> 00:04:17,680
going to start in a very different

00:04:16,630 --> 00:04:19,780
approach but if you've got a small

00:04:17,680 --> 00:04:20,709
project a little bit of data analysis

00:04:19,780 --> 00:04:22,960
and you want to do some visualization

00:04:20,709 --> 00:04:25,570
with it you don't want to have to get a

00:04:22,960 --> 00:04:26,880
software engineer to start building all

00:04:25,570 --> 00:04:28,710
sorts of custom

00:04:26,880 --> 00:04:30,810
javascript integrations between your

00:04:28,710 --> 00:04:32,850
your Python code and your data science

00:04:30,810 --> 00:04:34,770
project and it really is quite quite a

00:04:32,850 --> 00:04:37,230
challenge and so we wanted to minimize

00:04:34,770 --> 00:04:40,740
the new technologies that are maybe

00:04:37,230 --> 00:04:43,080
fresh PhD graduates or and maybe interns

00:04:40,740 --> 00:04:44,460
even would be able to kind of minimize

00:04:43,080 --> 00:04:46,440
the new technologies that they would

00:04:44,460 --> 00:04:49,860
need to learn and in order to be able to

00:04:46,440 --> 00:04:51,840
get a project off the ground and if is

00:04:49,860 --> 00:04:53,970
purely because if I'm building this kind

00:04:51,840 --> 00:04:55,620
of very basic proof of concept and I

00:04:53,970 --> 00:04:57,510
want a data scientist to be able to take

00:04:55,620 --> 00:04:59,220
the lead in the early stages looking and

00:04:57,510 --> 00:05:01,470
exploring data creating visualizations

00:04:59,220 --> 00:05:04,020
and so on if their background isn't in

00:05:01,470 --> 00:05:05,610
web development then they might they're

00:05:04,020 --> 00:05:08,730
not going to be naturally placed to

00:05:05,610 --> 00:05:12,300
create a web application for their data

00:05:08,730 --> 00:05:14,010
and and also as a software engineer I

00:05:12,300 --> 00:05:16,080
want to be able to facilitate members of

00:05:14,010 --> 00:05:17,580
my team to really go places and do

00:05:16,080 --> 00:05:19,050
exciting things with data without

00:05:17,580 --> 00:05:21,530
getting bogged down thinking about

00:05:19,050 --> 00:05:24,390
various different you know JavaScript

00:05:21,530 --> 00:05:25,170
callbacks and the latest reactor library

00:05:24,390 --> 00:05:29,580
and that kind of thing

00:05:25,170 --> 00:05:32,070
and and so just to summarize exactly why

00:05:29,580 --> 00:05:35,480
this was a problem for us and react has

00:05:32,070 --> 00:05:38,340
a you can see this react has a very

00:05:35,480 --> 00:05:40,860
difficult reputation at times is quite a

00:05:38,340 --> 00:05:42,780
complex and style of development to get

00:05:40,860 --> 00:05:45,360
your head in T and you can see here that

00:05:42,780 --> 00:05:47,370
and this is the Thomas or Mark almost

00:05:45,360 --> 00:05:49,200
preparing to put together is hello world

00:05:47,370 --> 00:05:51,300
reactor it's it's a difficult language

00:05:49,200 --> 00:05:53,520
to learn especially if your data if your

00:05:51,300 --> 00:05:56,190
background is more in a data science

00:05:53,520 --> 00:05:59,220
focused rather than a software engineer

00:05:56,190 --> 00:06:01,020
focus background and so we found - it's

00:05:59,220 --> 00:06:03,360
an open source project although there

00:06:01,020 --> 00:06:05,640
are paid options for consultancy with

00:06:03,360 --> 00:06:07,590
plotly and it describes itself still as

00:06:05,640 --> 00:06:09,000
experimental although recently I think

00:06:07,590 --> 00:06:10,530
that's about three weeks ago it hit

00:06:09,000 --> 00:06:12,660
version one so it's an established

00:06:10,530 --> 00:06:15,570
project but and like everything in

00:06:12,660 --> 00:06:17,340
JavaScript it changes all the time you

00:06:15,570 --> 00:06:20,250
can see the website here it's kind of

00:06:17,340 --> 00:06:21,720
very flashy and and they describe

00:06:20,250 --> 00:06:23,790
themselves being on simple beautiful

00:06:21,720 --> 00:06:27,060
projects with minimal involvement from

00:06:23,790 --> 00:06:29,130
from JavaScript and that's a good thing

00:06:27,060 --> 00:06:31,470
sometimes and not having to use

00:06:29,130 --> 00:06:33,300
JavaScript is in and of itself helpful

00:06:31,470 --> 00:06:35,610
and it certainly speeds up development

00:06:33,300 --> 00:06:37,200
for some project teams but as I'll cover

00:06:35,610 --> 00:06:40,039
a little bit later on it's not always

00:06:37,200 --> 00:06:43,279
and it's not always desirable to only

00:06:40,039 --> 00:06:44,689
and they used - say for the rest of the

00:06:43,279 --> 00:06:45,889
talk I'll just give a quick introduction

00:06:44,689 --> 00:06:48,110
to - and how it works

00:06:45,889 --> 00:06:50,240
some examples are the really cool things

00:06:48,110 --> 00:06:51,860
that you can do with that and as I said

00:06:50,240 --> 00:06:54,020
before some of those sort of tips on

00:06:51,860 --> 00:06:56,869
larger - projects that we've developed a

00:06:54,020 --> 00:06:58,639
decision lab and also discuss as I

00:06:56,869 --> 00:07:01,460
mentioned before when to stop using -

00:06:58,639 --> 00:07:03,740
and to start hiring JavaScript engineers

00:07:01,460 --> 00:07:08,629
and so let's start with a hello world

00:07:03,740 --> 00:07:10,099
and it's very kind of simple syntax that

00:07:08,629 --> 00:07:11,479
hopefully if you're familiar with niacin

00:07:10,099 --> 00:07:14,089
you'll get to grips with quite quickly

00:07:11,479 --> 00:07:16,759
and literally you just installed that by

00:07:14,089 --> 00:07:19,399
a pip and this is a simple hello world

00:07:16,759 --> 00:07:21,710
script so you can see here we've got you

00:07:19,399 --> 00:07:24,649
know we're doing our imports we create

00:07:21,710 --> 00:07:26,870
an app on that line we produce a layout

00:07:24,649 --> 00:07:29,089
which in this case is a div tag which is

00:07:26,870 --> 00:07:31,999
an HTML tag with a fundamental kind of

00:07:29,089 --> 00:07:35,089
division in HTML and the children of

00:07:31,999 --> 00:07:38,149
that tag are going to be this h1 or

00:07:35,089 --> 00:07:39,889
header 1 and so just a big header and it

00:07:38,149 --> 00:07:43,550
says hello Europe - and then at the

00:07:39,889 --> 00:07:46,659
bottom we run we run our app and you

00:07:43,550 --> 00:07:48,800
just literally call it that now if we

00:07:46,659 --> 00:07:49,639
this is the moment of truth as to

00:07:48,800 --> 00:07:51,830
whether or not all of this works

00:07:49,639 --> 00:07:54,139
together and here you can see yeah okay

00:07:51,830 --> 00:07:57,110
so we've got a hello world and hello

00:07:54,139 --> 00:07:58,789
you're a Python and example app in - and

00:07:57,110 --> 00:08:00,349
I've cheated a little bit I've put a

00:07:58,789 --> 00:08:02,449
style sheet on here to give us our logo

00:08:00,349 --> 00:08:06,949
and so on and that's just completely

00:08:02,449 --> 00:08:09,769
ride a bike and so that's the basic very

00:08:06,949 --> 00:08:12,229
basic tune of hello world of - there are

00:08:09,769 --> 00:08:13,610
two bits of code there that are quite

00:08:12,229 --> 00:08:15,110
important that you should have a look at

00:08:13,610 --> 00:08:17,629
and so there are two modules or

00:08:15,110 --> 00:08:22,580
libraries that are being used as - and -

00:08:17,629 --> 00:08:24,589
HTML components so - HTML components is

00:08:22,580 --> 00:08:27,949
a module it's just wrapped all the core

00:08:24,589 --> 00:08:30,050
react and components so every single

00:08:27,949 --> 00:08:34,099
HTML tag has a corresponding react AG

00:08:30,050 --> 00:08:35,569
and now every single react HTML react

00:08:34,099 --> 00:08:37,729
component has a corresponding data

00:08:35,569 --> 00:08:40,969
component and so you can plug and play

00:08:37,729 --> 00:08:43,519
these together and then - the actual

00:08:40,969 --> 00:08:45,709
framework and manages the relationships

00:08:43,519 --> 00:08:47,510
between these particular tags which I'll

00:08:45,709 --> 00:08:49,339
cover in a minute and it serves the

00:08:47,510 --> 00:08:50,930
layout just using a really basic flask

00:08:49,339 --> 00:08:52,290
interface and so you can actually

00:08:50,930 --> 00:08:54,389
provide your own custom

00:08:52,290 --> 00:08:56,670
Flass cap as well they and add all sorts

00:08:54,389 --> 00:08:59,759
of modules and routes onto there as well

00:08:56,670 --> 00:09:02,070
and but as I said in the title to this

00:08:59,759 --> 00:09:03,870
talk and I want an interactive web page

00:09:02,070 --> 00:09:05,519
not just a hello world that serves some

00:09:03,870 --> 00:09:07,709
static data with a ton of Python on top

00:09:05,519 --> 00:09:08,040
of them and so how do you go about doing

00:09:07,709 --> 00:09:10,470
that

00:09:08,040 --> 00:09:11,790
now I'm going to detour very quickly to

00:09:10,470 --> 00:09:13,829
ask how would you do that in JavaScript

00:09:11,790 --> 00:09:15,269
and I'm not sure what how familiar

00:09:13,829 --> 00:09:16,740
people in the room are with with

00:09:15,269 --> 00:09:18,240
JavaScript there might be some very

00:09:16,740 --> 00:09:21,300
experienced JavaScript engineers and

00:09:18,240 --> 00:09:23,639
some people life is I'm gonna give it

00:09:21,300 --> 00:09:25,980
and even you how this would work but

00:09:23,639 --> 00:09:27,389
fundamentally will have two things on

00:09:25,980 --> 00:09:29,880
our web page and so you can see on the

00:09:27,389 --> 00:09:32,009
top line there we've got this output you

00:09:29,880 --> 00:09:34,440
might call it so this is a paragraph tag

00:09:32,009 --> 00:09:36,540
that says hello and I said there for the

00:09:34,440 --> 00:09:39,060
time being our rating is to be able to

00:09:36,540 --> 00:09:40,769
take the name of our user or the person

00:09:39,060 --> 00:09:42,750
on our web page and say hello to that

00:09:40,769 --> 00:09:44,790
person so you've got our output at the

00:09:42,750 --> 00:09:47,250
top there and in particular that spam

00:09:44,790 --> 00:09:48,690
tag which is just another HTML tag which

00:09:47,250 --> 00:09:50,850
is where they're going to place our

00:09:48,690 --> 00:09:52,380
user's name and then there's this input

00:09:50,850 --> 00:09:54,540
tag as well which is going to take some

00:09:52,380 --> 00:09:57,240
text input from the user and that has an

00:09:54,540 --> 00:09:58,589
ID of hello hello input and the place

00:09:57,240 --> 00:10:03,600
it's going to go is ID

00:09:58,589 --> 00:10:05,660
hello name oh yeah I fell for my own

00:10:03,600 --> 00:10:09,720
mistake there and right rather than down

00:10:05,660 --> 00:10:11,550
and say we can see here that if we look

00:10:09,720 --> 00:10:13,079
at the tree if those HTML objects we've

00:10:11,550 --> 00:10:15,389
got I should say as well these are

00:10:13,079 --> 00:10:18,029
you'll often hear that hear me referring

00:10:15,389 --> 00:10:20,339
to the Dom and this is the document

00:10:18,029 --> 00:10:23,130
object model and I'm not vain enough to

00:10:20,339 --> 00:10:24,269
refer to webpages as myself and I just

00:10:23,130 --> 00:10:27,000
happened to be a web developer called

00:10:24,269 --> 00:10:30,060
Dom and so this is the document object

00:10:27,000 --> 00:10:32,760
model here and so here are three zero

00:10:30,060 --> 00:10:34,260
three and nodes here in our Dom we've

00:10:32,760 --> 00:10:36,329
got our paragraph node and then the

00:10:34,260 --> 00:10:38,880
child of that paragraph node is this

00:10:36,329 --> 00:10:41,850
spam node with that ID hello name the

00:10:38,880 --> 00:10:44,490
hash tag indicates an ID and then we've

00:10:41,850 --> 00:10:47,130
got our inputs as well which is hello

00:10:44,490 --> 00:10:49,680
input and so we need to write a

00:10:47,130 --> 00:10:52,079
JavaScript and that sets the value or

00:10:49,680 --> 00:10:55,290
the inner HTML as we call it and of the

00:10:52,079 --> 00:10:57,930
hello name span to whatever the value of

00:10:55,290 --> 00:11:00,000
the input is at that particular time and

00:10:57,930 --> 00:11:01,709
now it's not good enough to just do this

00:11:00,000 --> 00:11:03,449
once as well we have to monitor it so

00:11:01,709 --> 00:11:04,310
that every time that that value changes

00:11:03,449 --> 00:11:08,600
and we

00:11:04,310 --> 00:11:10,190
our user or so so that's what we entity

00:11:08,600 --> 00:11:13,490
now javaScript we can write a program

00:11:10,190 --> 00:11:15,260
directly that with monitor it constantly

00:11:13,490 --> 00:11:16,850
say every second or so will respond to

00:11:15,260 --> 00:11:18,529
an event and that's really

00:11:16,850 --> 00:11:19,910
time-consuming and really quite

00:11:18,529 --> 00:11:20,810
difficult to keep on top of especially

00:11:19,910 --> 00:11:23,570
in the larger air

00:11:20,810 --> 00:11:26,089
so what reacted us is it lets us do this

00:11:23,570 --> 00:11:28,010
declaratively and so rather than write

00:11:26,089 --> 00:11:29,089
our own scripts to do everything and

00:11:28,010 --> 00:11:30,650
kind of figure out everything that

00:11:29,089 --> 00:11:32,360
should go on the page we just declare

00:11:30,650 --> 00:11:34,910
how this and the page should work and

00:11:32,360 --> 00:11:36,440
then react figures everything out works

00:11:34,910 --> 00:11:38,060
out a graph of how things are dependent

00:11:36,440 --> 00:11:40,970
on one other and sorts everything out

00:11:38,060 --> 00:11:42,050
for us and the important point to

00:11:40,970 --> 00:11:45,050
remember here though is that we're going

00:11:42,050 --> 00:11:47,930
to have to define the behavior of or

00:11:45,050 --> 00:11:50,990
define and how a change in the input

00:11:47,930 --> 00:11:53,450
should affect the display that we have

00:11:50,990 --> 00:11:55,730
at the end of our output and so this in

00:11:53,450 --> 00:11:58,610
fact isn't really important and but in

00:11:55,730 --> 00:12:00,320
react terminology we say that input so

00:11:58,610 --> 00:12:03,920
the value of our input would be a prop

00:12:00,320 --> 00:12:06,350
and to this spam component and so we can

00:12:03,920 --> 00:12:09,260
define using this JavaScript syntax here

00:12:06,350 --> 00:12:11,000
that all this does is say and I want to

00:12:09,260 --> 00:12:12,830
take the value that you give me from my

00:12:11,000 --> 00:12:17,300
input and I'm gonna put it inside of

00:12:12,830 --> 00:12:19,030
this span and so yeah that's kind of an

00:12:17,300 --> 00:12:21,170
example of how it would work in

00:12:19,030 --> 00:12:24,320
JavaScript but if we wanted to see how

00:12:21,170 --> 00:12:25,880
it would work in bash and we have a

00:12:24,320 --> 00:12:28,130
slightly similar about a similar concept

00:12:25,880 --> 00:12:30,410
but one that's also different and the

00:12:28,130 --> 00:12:33,410
key to interaction in bash is a callback

00:12:30,410 --> 00:12:34,940
and these define the relationships

00:12:33,410 --> 00:12:35,990
between the various different components

00:12:34,940 --> 00:12:37,700
and you can think of this as being a

00:12:35,990 --> 00:12:39,800
little bit like Excel and so whenever

00:12:37,700 --> 00:12:42,530
the input to one particular component

00:12:39,800 --> 00:12:44,120
changes and the other function is run

00:12:42,530 --> 00:12:48,290
and its output is displayed somewhere as

00:12:44,120 --> 00:12:50,959
well and so if we were to take a look at

00:12:48,290 --> 00:12:51,950
our hello world and update it you can

00:12:50,959 --> 00:12:54,080
see here that we're defining another

00:12:51,950 --> 00:12:56,060
layout and so we've got that div tag

00:12:54,080 --> 00:12:58,339
like we had before and I've got this h1

00:12:56,060 --> 00:13:01,370
and now I'm calling my h1 sorry rather

00:12:58,339 --> 00:13:03,860
than hello name and you can see here on

00:13:01,370 --> 00:13:06,410
set we've also got this input so this

00:13:03,860 --> 00:13:08,240
comes from another module called - core

00:13:06,410 --> 00:13:10,820
components which about the interactive -

00:13:08,240 --> 00:13:13,459
modules and so we're giving this a name

00:13:10,820 --> 00:13:17,240
I'm setting its initial value to basil

00:13:13,459 --> 00:13:21,360
and its type is text as well

00:13:17,240 --> 00:13:23,339
sorry so next we set the and we define

00:13:21,360 --> 00:13:26,430
how this relationship works using our

00:13:23,339 --> 00:13:27,839
callback and I'm sorry that the the text

00:13:26,430 --> 00:13:30,269
here is a little bit small because then

00:13:27,839 --> 00:13:32,310
it's a little bit just the way it's

00:13:30,269 --> 00:13:34,019
spaced out to be compliant with black

00:13:32,310 --> 00:13:36,209
and but you can see here we've got a

00:13:34,019 --> 00:13:38,100
decorator at the top and we say what our

00:13:36,209 --> 00:13:40,560
inputs are so in this case it's just the

00:13:38,100 --> 00:13:42,389
the value of that that text box and our

00:13:40,560 --> 00:13:44,639
output is going to be the value or the

00:13:42,389 --> 00:13:46,980
HTML that's inside and inside our header

00:13:44,639 --> 00:13:48,779
and we get the value by running this

00:13:46,980 --> 00:13:50,790
function and here I've just used an F

00:13:48,779 --> 00:13:55,649
string to interpolate whatever the value

00:13:50,790 --> 00:13:59,100
is with hello and so again we just run

00:13:55,649 --> 00:14:01,560
it as we did before and now if I open

00:13:59,100 --> 00:14:03,569
this up hopefully you can see sorry it's

00:14:01,560 --> 00:14:07,069
a little bit small but I could change

00:14:03,569 --> 00:14:07,069
something like this to be Swift

00:14:07,220 --> 00:14:11,490
so we have an interactive web page now

00:14:10,439 --> 00:14:13,529
it takes the value from the user

00:14:11,490 --> 00:14:17,430
displays it and we haven't had to touch

00:14:13,529 --> 00:14:19,529
JavaScript once and the there is a

00:14:17,430 --> 00:14:21,269
important caveat for this and before we

00:14:19,529 --> 00:14:22,709
kind of think about redesigning all of

00:14:21,269 --> 00:14:24,480
the web pages and software that you make

00:14:22,709 --> 00:14:27,120
and the code that define this

00:14:24,480 --> 00:14:29,370
relationship now lives in Python or it

00:14:27,120 --> 00:14:30,930
lives on our server and whereas in a

00:14:29,370 --> 00:14:33,720
reactor all of this would be managed in

00:14:30,930 --> 00:14:37,410
the browser using reactors kind of

00:14:33,720 --> 00:14:39,240
optimized algorithms to do that now this

00:14:37,410 --> 00:14:41,130
involves a call to the server and that

00:14:39,240 --> 00:14:42,959
has a big performance impact and so

00:14:41,130 --> 00:14:44,730
every time that our user presses a key

00:14:42,959 --> 00:14:46,259
or does something on our web page it

00:14:44,730 --> 00:14:47,610
means that we have to go to the server

00:14:46,259 --> 00:14:49,800
ask what should the new web page look

00:14:47,610 --> 00:14:51,990
like and then display that in our web

00:14:49,800 --> 00:14:54,209
page so that's a big performance impact

00:14:51,990 --> 00:14:56,490
but like I said at the start you know

00:14:54,209 --> 00:14:58,439
that's okay largely because I want to

00:14:56,490 --> 00:15:00,000
build a map really really quickly and I

00:14:58,439 --> 00:15:01,649
want to use familiar technologies and

00:15:00,000 --> 00:15:02,759
for data scientists and I want to be

00:15:01,649 --> 00:15:05,459
able to make you know just a

00:15:02,759 --> 00:15:07,680
proof-of-concept app or an alpha of some

00:15:05,459 --> 00:15:11,279
kind I'm not looking to make production

00:15:07,680 --> 00:15:12,809
software and using using that and so

00:15:11,279 --> 00:15:13,949
just to give it another bit of a tour

00:15:12,809 --> 00:15:15,600
you know what can you actually do with

00:15:13,949 --> 00:15:16,860
that and you know some of the things

00:15:15,600 --> 00:15:18,809
that you can actually make it really

00:15:16,860 --> 00:15:20,040
quite impressive so as the name kind of

00:15:18,809 --> 00:15:22,319
suggests it's mostly geared towards

00:15:20,040 --> 00:15:25,079
dashboards and you can make some quite

00:15:22,319 --> 00:15:27,120
transactional and interesting pieces of

00:15:25,079 --> 00:15:30,209
know example software using it as well

00:15:27,120 --> 00:15:30,810
and so just to show how far you can go

00:15:30,209 --> 00:15:32,579
quite quickly

00:15:30,810 --> 00:15:35,910
and we wanted to display data for

00:15:32,579 --> 00:15:39,769
example and this is the Titanic data set

00:15:35,910 --> 00:15:41,519
and so it's example 3 in this and github

00:15:39,769 --> 00:15:43,470
repository that you can take a look at

00:15:41,519 --> 00:15:44,610
and all we're doing here is you know

00:15:43,470 --> 00:15:46,589
there's a lot of code here but it's not

00:15:44,610 --> 00:15:48,600
not very complex we've got our layout

00:15:46,589 --> 00:15:50,160
again and we're just giving a header and

00:15:48,600 --> 00:15:52,560
I'm also giving the option here to

00:15:50,160 --> 00:15:54,629
filter all of the passengers on the so

00:15:52,560 --> 00:15:56,610
this days the the entire manifest of the

00:15:54,629 --> 00:15:59,310
Titanic are giving an option here to

00:15:56,610 --> 00:16:01,410
filter it based on sex and you can see

00:15:59,310 --> 00:16:03,810
here that I'm just using this components

00:16:01,410 --> 00:16:06,089
called the dash data table and and that

00:16:03,810 --> 00:16:09,389
will simply display all of the all of

00:16:06,089 --> 00:16:10,980
the columns in my my data frame I've got

00:16:09,389 --> 00:16:12,930
this callback as well and you can see

00:16:10,980 --> 00:16:15,870
that this callback provides the value to

00:16:12,930 --> 00:16:17,550
that bash table I mean this input it

00:16:15,870 --> 00:16:18,839
takes the the value of the drop-down at

00:16:17,550 --> 00:16:21,209
that particular given point so whenever

00:16:18,839 --> 00:16:23,490
the drop-down changes and this function

00:16:21,209 --> 00:16:24,839
is run and it will either give all of

00:16:23,490 --> 00:16:25,949
the passengers on the Titanic

00:16:24,839 --> 00:16:29,670
or just the ones that match this

00:16:25,949 --> 00:16:31,379
particularly criteria and so that's

00:16:29,670 --> 00:16:34,139
literally all there is to it so now if

00:16:31,379 --> 00:16:36,180
we wanted to see our data set here we've

00:16:34,139 --> 00:16:38,160
got a fully kind of interactive data set

00:16:36,180 --> 00:16:39,509
this is a list of all of the passengers

00:16:38,160 --> 00:16:41,819
that are on the Titanic and all of the

00:16:39,509 --> 00:16:46,740
or the Condit vailable but I wanted to

00:16:41,819 --> 00:16:49,759
select just the women you can see that's

00:16:46,740 --> 00:16:53,370
now just as playing all the females and

00:16:49,759 --> 00:16:55,110
likewise with males you can see here

00:16:53,370 --> 00:16:57,089
that we've got an interactive

00:16:55,110 --> 00:17:05,069
interactive browser for our data set as

00:16:57,089 --> 00:17:07,350
well okay now as I said at the start

00:17:05,069 --> 00:17:09,480
this is a project from plotly and plotly

00:17:07,350 --> 00:17:10,709
is obviously one named fritz and you

00:17:09,480 --> 00:17:12,689
know it's graphing technologies in this

00:17:10,709 --> 00:17:14,610
and ability to produce kind of data

00:17:12,689 --> 00:17:16,740
visualizations and so it's no surprise

00:17:14,610 --> 00:17:18,839
that data also has a really rich set of

00:17:16,740 --> 00:17:22,890
and essentially plotly graphs that you

00:17:18,839 --> 00:17:25,110
can use and to produce your own and your

00:17:22,890 --> 00:17:26,459
own graphical visualizations of data so

00:17:25,110 --> 00:17:28,199
you're sticking with the Titanic data

00:17:26,459 --> 00:17:29,370
set and you can take a look at the code

00:17:28,199 --> 00:17:31,919
but it's it's a very very

00:17:29,370 --> 00:17:33,299
straightforward and - component where I

00:17:31,919 --> 00:17:35,789
just provided with a couple of arguments

00:17:33,299 --> 00:17:37,770
and - just like a understand a plot a

00:17:35,789 --> 00:17:40,770
graph and so now I've taken the Titanic

00:17:37,770 --> 00:17:42,780
data set and now this is the number of

00:17:40,770 --> 00:17:43,730
passengers on the Titanic by the first

00:17:42,780 --> 00:17:45,590
letter of their

00:17:43,730 --> 00:17:47,410
name and again that's just a couple of

00:17:45,590 --> 00:17:49,940
lines of code to make a you know a

00:17:47,410 --> 00:17:52,540
webpage visualization no JavaScript

00:17:49,940 --> 00:17:55,190
involved everything done in places and

00:17:52,540 --> 00:17:57,020
you can also start to make some more

00:17:55,190 --> 00:17:58,160
interactive tools and like I've

00:17:57,020 --> 00:17:59,900
mentioned before so rather than just

00:17:58,160 --> 00:18:01,790
displaying data or you know just taking

00:17:59,900 --> 00:18:03,530
little bits of data if you wanted to

00:18:01,790 --> 00:18:07,490
start making changes to your data say

00:18:03,530 --> 00:18:10,490
and you can use this so this is an

00:18:07,490 --> 00:18:12,350
example here that gives you a simple

00:18:10,490 --> 00:18:15,200
to-do list so you can see here I've got

00:18:12,350 --> 00:18:17,960
an a list that displays all of my tasks

00:18:15,200 --> 00:18:19,850
I've got an input that takes the text

00:18:17,960 --> 00:18:22,669
for a particular task and I've got this

00:18:19,850 --> 00:18:25,309
button here and I can use the

00:18:22,669 --> 00:18:26,870
differences so I can use the fact that

00:18:25,309 --> 00:18:28,730
whenever the button is clicked and I'm

00:18:26,870 --> 00:18:31,520
able to get the value of the particular

00:18:28,730 --> 00:18:33,350
task and add that to a list and again

00:18:31,520 --> 00:18:34,850
you can take a look in more detail at

00:18:33,350 --> 00:18:38,960
the code she's like on that repository

00:18:34,850 --> 00:18:40,640
and he takes the input to say whenever I

00:18:38,960 --> 00:18:42,530
need to call my function whenever this

00:18:40,640 --> 00:18:43,760
button is pressed the state provides

00:18:42,530 --> 00:18:46,600
what the value of that function was at

00:18:43,760 --> 00:18:50,679
the particular time and now I can see it

00:18:46,600 --> 00:18:57,980
live here and say for example if we did

00:18:50,679 --> 00:18:59,860
to do this you can see here that we're

00:18:57,980 --> 00:19:02,150
able to literally start creating

00:18:59,860 --> 00:19:04,040
interactive software so obviously that

00:19:02,150 --> 00:19:06,200
would be more more used to here I just

00:19:04,040 --> 00:19:07,700
stored this in a global list but

00:19:06,200 --> 00:19:10,730
obviously you could link that to a

00:19:07,700 --> 00:19:12,049
database in description or anything else

00:19:10,730 --> 00:19:14,450
that you wanted to so you can actually

00:19:12,049 --> 00:19:15,770
start to reduce very basic user

00:19:14,450 --> 00:19:22,400
interface it's really quite quite

00:19:15,770 --> 00:19:26,510
quickly not just data visualization say

00:19:22,400 --> 00:19:27,950
moving and you can also build your own -

00:19:26,510 --> 00:19:29,929
components and if you're familiar with

00:19:27,950 --> 00:19:32,179
JavaScript and but I should say that

00:19:29,929 --> 00:19:34,370
actually the - API does rather limit

00:19:32,179 --> 00:19:36,110
what you can do and in particular access

00:19:34,370 --> 00:19:38,390
to you something we call Redux which is

00:19:36,110 --> 00:19:40,460
and kind of internal database inside of

00:19:38,390 --> 00:19:42,410
your browser and so Apps can be a little

00:19:40,460 --> 00:19:43,429
bit jittery at times without without

00:19:42,410 --> 00:19:45,770
access to some of these kind of

00:19:43,429 --> 00:19:47,679
technologies and but you can still get

00:19:45,770 --> 00:19:50,270
very far with - and you can actually

00:19:47,679 --> 00:19:51,799
limit a couple of the limitations here

00:19:50,270 --> 00:19:53,990
you can actually really make some quite

00:19:51,799 --> 00:19:55,850
impressive and useful bits of software

00:19:53,990 --> 00:19:57,080
without having to have any real

00:19:55,850 --> 00:19:58,580
knowledge of where

00:19:57,080 --> 00:20:01,310
development or how how those things work

00:19:58,580 --> 00:20:02,740
and for example recently we had a

00:20:01,310 --> 00:20:05,720
projected decision lab looking for

00:20:02,740 --> 00:20:08,090
detecting illegal gold mining in the

00:20:05,720 --> 00:20:09,650
Amazonian rainforest and said we were

00:20:08,090 --> 00:20:12,410
able to make a tool that's used by

00:20:09,650 --> 00:20:14,630
Colombian police and military and so on

00:20:12,410 --> 00:20:15,920
to go and use it you know interface with

00:20:14,630 --> 00:20:18,950
a machine learning module to see whether

00:20:15,920 --> 00:20:21,170
or not you know whether or not is likely

00:20:18,950 --> 00:20:23,210
that particular area in the rainforest

00:20:21,170 --> 00:20:25,520
as being illegally mined by by gold

00:20:23,210 --> 00:20:27,470
miners and that was all done with the

00:20:25,520 --> 00:20:29,600
exception of the map which I had to

00:20:27,470 --> 00:20:31,550
produce um which is a custom data

00:20:29,600 --> 00:20:33,680
component you can see that actually all

00:20:31,550 --> 00:20:35,780
of this was done by people with no real

00:20:33,680 --> 00:20:37,250
familiar familiarity with web

00:20:35,780 --> 00:20:39,260
development or anything like that just

00:20:37,250 --> 00:20:41,600
data scientists who are more happy with

00:20:39,260 --> 00:20:43,490
you know pcan things than they are with

00:20:41,600 --> 00:20:45,860
necessarily developing javascript

00:20:43,490 --> 00:20:48,230
libraries we are also looking to

00:20:45,860 --> 00:20:50,450
open-source that interface and see the

00:20:48,230 --> 00:20:54,950
leaflet map and over the next next few

00:20:50,450 --> 00:20:56,870
months and so kind of moving on towards

00:20:54,950 --> 00:20:58,460
towards the end how is it that you

00:20:56,870 --> 00:20:59,630
should get the most out of - if you want

00:20:58,460 --> 00:21:01,820
to start going and building -

00:20:59,630 --> 00:21:04,160
applications at the moment and what what

00:21:01,820 --> 00:21:06,020
would your my advice to you be and so

00:21:04,160 --> 00:21:07,640
there are four tips I'm gonna suggest

00:21:06,020 --> 00:21:09,440
and go through at the moment the first

00:21:07,640 --> 00:21:12,680
one is to organize around be disciplined

00:21:09,440 --> 00:21:14,420
and I'll come to this in just a second

00:21:12,680 --> 00:21:16,790
and the second one is to actually start

00:21:14,420 --> 00:21:18,980
and second third and fourth are all to

00:21:16,790 --> 00:21:21,530
start kind of tooling up how you use

00:21:18,980 --> 00:21:22,520
that in your teams as well when to build

00:21:21,530 --> 00:21:23,930
your app using something called a

00:21:22,520 --> 00:21:25,190
factory function and then that allows

00:21:23,930 --> 00:21:26,660
you to do something called route well

00:21:25,190 --> 00:21:28,220
what to do routing and navigation which

00:21:26,660 --> 00:21:30,470
will come to you briefly in a moment or

00:21:28,220 --> 00:21:33,140
so and at the end I'll talk about how we

00:21:30,470 --> 00:21:34,730
plan to actually make the most out of -

00:21:33,140 --> 00:21:37,070
and tool that possibly with the

00:21:34,730 --> 00:21:40,250
community and towards the end of this

00:21:37,070 --> 00:21:44,450
talk and so the very first one organize

00:21:40,250 --> 00:21:46,220
your application and so it's I think

00:21:44,450 --> 00:21:48,110
something that's become clear to me it's

00:21:46,220 --> 00:21:50,270
- is a very novel and experimental

00:21:48,110 --> 00:21:51,920
technology people refer to the

00:21:50,270 --> 00:21:54,530
documentation all the time which they

00:21:51,920 --> 00:21:56,840
should the docs though will always

00:21:54,530 --> 00:21:58,580
display an app in a single file and so

00:21:56,840 --> 00:21:59,510
the result can be at times for

00:21:58,580 --> 00:22:00,650
especially with people who might be

00:21:59,510 --> 00:22:02,990
familiar with to you quite a notebook

00:22:00,650 --> 00:22:05,150
coding I said we get kind of 2000 line

00:22:02,990 --> 00:22:07,730
single file - apps which obviously are

00:22:05,150 --> 00:22:09,620
somewhat unwieldy and it might seem like

00:22:07,730 --> 00:22:11,030
a very basic piece of advice but that

00:22:09,620 --> 00:22:13,250
kind of two cultures that we

00:22:11,030 --> 00:22:15,440
identified before it's something that

00:22:13,250 --> 00:22:18,470
we've had to kind of talk about in our

00:22:15,440 --> 00:22:21,230
team and think about how you split up

00:22:18,470 --> 00:22:24,590
your code into kind of logical units and

00:22:21,230 --> 00:22:28,310
files as kind of very basic advice and

00:22:24,590 --> 00:22:29,870
so on and we also try to run and apps at

00:22:28,310 --> 00:22:31,370
decision lab using the kind of the main

00:22:29,870 --> 00:22:32,630
interface there so you can run something

00:22:31,370 --> 00:22:36,320
as a module rather than have to run a

00:22:32,630 --> 00:22:38,450
specific script and so a standard - app

00:22:36,320 --> 00:22:41,840
or like a component inside a - app as we

00:22:38,450 --> 00:22:43,220
kind of modules Ariel as we visit it at

00:22:41,840 --> 00:22:45,200
the moment we'll generally have this

00:22:43,220 --> 00:22:48,170
kind of the main file to actually run

00:22:45,200 --> 00:22:50,630
the app this sort of app file which will

00:22:48,170 --> 00:22:53,150
manage how the app is app is kind of

00:22:50,630 --> 00:22:54,860
created and so on and then we separate

00:22:53,150 --> 00:22:57,920
our callbacks from our layouts and then

00:22:54,860 --> 00:22:59,450
often we'll have and other associated

00:22:57,920 --> 00:23:01,160
utils files and that kind of thing but

00:22:59,450 --> 00:23:02,450
and but I'd say the big thing here is to

00:23:01,160 --> 00:23:05,960
make sure you separate your callbacks

00:23:02,450 --> 00:23:07,970
from your layouts from your app and it

00:23:05,960 --> 00:23:12,830
allows you to run just like we do here

00:23:07,970 --> 00:23:14,540
and as a module rather than the next one

00:23:12,830 --> 00:23:16,100
is to build your app using a factory

00:23:14,540 --> 00:23:17,960
function and which might be an

00:23:16,100 --> 00:23:19,400
unfamiliar term to some and better

00:23:17,960 --> 00:23:21,290
coming from a flask world it's there

00:23:19,400 --> 00:23:23,900
it's a very common thing to be and

00:23:21,290 --> 00:23:25,940
because it allows in my opinion you see

00:23:23,900 --> 00:23:28,220
better control and kind of better

00:23:25,940 --> 00:23:29,930
facilitate and routing and navigation

00:23:28,220 --> 00:23:32,050
now routing and navigation they will

00:23:29,930 --> 00:23:34,370
allow you to have more than one

00:23:32,050 --> 00:23:36,350
certainly and - have more than one kind

00:23:34,370 --> 00:23:37,790
of feature inside your app because

00:23:36,350 --> 00:23:41,960
you're able to have different different

00:23:37,790 --> 00:23:43,610
pages so our decision lab and this an

00:23:41,960 --> 00:23:46,940
example here in in the code I think it's

00:23:43,610 --> 00:23:49,280
six and you can see that we've

00:23:46,940 --> 00:23:51,140
abstracted the - interface and from the

00:23:49,280 --> 00:23:53,180
standard callbacks and layouts

00:23:51,140 --> 00:23:55,430
decorators and so we actually have our

00:23:53,180 --> 00:23:57,080
own class now which just records all of

00:23:55,430 --> 00:24:00,250
our and decorators that are coming into

00:23:57,080 --> 00:24:02,060
our app and all of our sorry all about

00:24:00,250 --> 00:24:03,740
callbacks and all of our layouts that

00:24:02,060 --> 00:24:05,600
are coming into the app and then we have

00:24:03,740 --> 00:24:08,240
a kind of base route that allows us to

00:24:05,600 --> 00:24:09,860
control which particular component is

00:24:08,240 --> 00:24:13,280
displayed at which particular path in

00:24:09,860 --> 00:24:14,990
our inside our app and so a standard app

00:24:13,280 --> 00:24:17,090
now would look something more like this

00:24:14,990 --> 00:24:18,830
where you could be importing a couple of

00:24:17,090 --> 00:24:22,030
different sets of features which might

00:24:18,830 --> 00:24:24,710
have and so here I've got I've

00:24:22,030 --> 00:24:26,240
shamelessly stolen the code that I used

00:24:24,710 --> 00:24:27,590
here I've got two lists one is a

00:24:26,240 --> 00:24:29,570
shopping list and one is a to-do list

00:24:27,590 --> 00:24:31,249
and so you can see now that we're just

00:24:29,570 --> 00:24:33,470
reinforcing the the two different

00:24:31,249 --> 00:24:35,990
modules there and then we're able to

00:24:33,470 --> 00:24:38,210
when it decide which one is run and

00:24:35,990 --> 00:24:40,220
using our kind of base layout here and

00:24:38,210 --> 00:24:43,129
our we've got a callback that that

00:24:40,220 --> 00:24:45,169
manages this and say please feel free to

00:24:43,129 --> 00:24:47,119
kind of look through this these examples

00:24:45,169 --> 00:24:51,440
a bit more later but you can see that if

00:24:47,119 --> 00:24:54,169
we actually run this now were able now

00:24:51,440 --> 00:24:56,659
to have so we've got here we have three

00:24:54,169 --> 00:24:57,860
particular options for our layout like a

00:24:56,659 --> 00:25:00,320
home page that we run at the moment

00:24:57,860 --> 00:25:02,029
we've also got our to-do list and our

00:25:00,320 --> 00:25:04,749
shopping list which are completely kind

00:25:02,029 --> 00:25:07,669
of separate from one another so if I put

00:25:04,749 --> 00:25:09,320
something into my shopping list it will

00:25:07,669 --> 00:25:15,710
stand my shopping list but then I can

00:25:09,320 --> 00:25:18,889
also put it in my to-do list so now we

00:25:15,710 --> 00:25:20,690
have two separate lists that you can use

00:25:18,889 --> 00:25:22,879
and sort of manage through a little them

00:25:20,690 --> 00:25:25,009
almost like pseudo framework - yet to

00:25:22,879 --> 00:25:26,539
keep your at your app can disciplined

00:25:25,009 --> 00:25:29,690
and lean rather than having huge files

00:25:26,539 --> 00:25:32,559
with them without having huge files that

00:25:29,690 --> 00:25:35,690
have lots of unwieldy code in them and

00:25:32,559 --> 00:25:38,690
now finally is what I want to touch on

00:25:35,690 --> 00:25:40,970
and what I call it tooling up - and she

00:25:38,690 --> 00:25:42,350
implements and the like I said the

00:25:40,970 --> 00:25:43,999
factory function approach before and

00:25:42,350 --> 00:25:46,009
you're able to abstract actually

00:25:43,999 --> 00:25:48,139
defining what should go into your your

00:25:46,009 --> 00:25:50,389
web application from actually executing

00:25:48,139 --> 00:25:52,009
it and running it and so we have like I

00:25:50,389 --> 00:25:54,559
said before that class to manage the

00:25:52,009 --> 00:25:55,669
application and then build it you can

00:25:54,559 --> 00:25:58,909
actually start to integrate lots of

00:25:55,669 --> 00:26:02,029
other useful tools and facilities for

00:25:58,909 --> 00:26:05,059
your data fan in my position for my my

00:26:02,029 --> 00:26:06,980
data scientists to be able to and use

00:26:05,059 --> 00:26:09,289
and exploit without having to worry too

00:26:06,980 --> 00:26:12,049
much about and for example integrating

00:26:09,289 --> 00:26:13,789
with their MongoDB database or making an

00:26:12,049 --> 00:26:16,460
API request to another service that can

00:26:13,789 --> 00:26:17,960
all be abstracted out so that and data

00:26:16,460 --> 00:26:19,940
scientists can focus more on the

00:26:17,960 --> 00:26:21,529
important stuff which is it may be a

00:26:19,940 --> 00:26:24,169
machine learning model or how that model

00:26:21,529 --> 00:26:25,460
is going to be used and so we've done

00:26:24,169 --> 00:26:27,499
this through implementing dependency

00:26:25,460 --> 00:26:31,369
injection into all of our callbacks in

00:26:27,499 --> 00:26:33,049
our layouts using a Google and Google

00:26:31,369 --> 00:26:34,369
dependency injection framework and if

00:26:33,049 --> 00:26:35,990
this is something that kind of interests

00:26:34,369 --> 00:26:37,460
you or that you might want to look at

00:26:35,990 --> 00:26:38,430
doing for your own your own projects

00:26:37,460 --> 00:26:40,560
Petey get into

00:26:38,430 --> 00:26:42,450
because I'd love to have the time to

00:26:40,560 --> 00:26:45,570
open-source that properly and kind of

00:26:42,450 --> 00:26:47,190
really make it available and and so just

00:26:45,570 --> 00:26:48,990
coming to this final point now and

00:26:47,190 --> 00:26:50,760
there's a question that you have to ask

00:26:48,990 --> 00:26:52,590
yourself about when do you want to stop

00:26:50,760 --> 00:26:54,360
using bash and start building what I've

00:26:52,590 --> 00:26:56,220
turned to like a proper web application

00:26:54,360 --> 00:26:58,410
so by that I mean something that you

00:26:56,220 --> 00:27:00,570
might ship to production rather than

00:26:58,410 --> 00:27:02,520
something that's a proof-of-concept that

00:27:00,570 --> 00:27:06,000
you might kind of use to iterate with a

00:27:02,520 --> 00:27:08,970
client or maybe you know an internal

00:27:06,000 --> 00:27:10,890
project and so - is great

00:27:08,970 --> 00:27:13,140
I really must stress this enough that

00:27:10,890 --> 00:27:14,820
although I criticize you know as they

00:27:13,140 --> 00:27:16,470
point out some of the weaknesses of -

00:27:14,820 --> 00:27:18,180
and things that you can't do on the

00:27:16,470 --> 00:27:19,740
whole it is actually really good and I

00:27:18,180 --> 00:27:21,480
never cease to be amazed by what people

00:27:19,740 --> 00:27:23,880
can produce and how quickly they can

00:27:21,480 --> 00:27:26,340
produce it using a very simple -

00:27:23,880 --> 00:27:27,750
framework and it allows this kind of

00:27:26,340 --> 00:27:29,970
like rapid development by non non

00:27:27,750 --> 00:27:32,940
specialists and it's also informed web

00:27:29,970 --> 00:27:35,430
development - a sense that rather than a

00:27:32,940 --> 00:27:37,770
data scientist having to hand over lots

00:27:35,430 --> 00:27:40,080
of know their code or their idea to a

00:27:37,770 --> 00:27:42,000
software engineer and and then see it

00:27:40,080 --> 00:27:43,350
either produced the way they want or not

00:27:42,000 --> 00:27:44,550
produced the way they want they can

00:27:43,350 --> 00:27:46,200
actually build it themselves and

00:27:44,550 --> 00:27:48,600
actually start to produce something

00:27:46,200 --> 00:27:50,610
that's really and they really focused on

00:27:48,600 --> 00:27:52,530
to the particular mathematical tasks

00:27:50,610 --> 00:27:55,110
that we have in mind a decision lab and

00:27:52,530 --> 00:27:58,650
likewise with lots of other tasks that

00:27:55,110 --> 00:27:59,970
you might have but it's also very rapid

00:27:58,650 --> 00:28:01,860
UI development and that's a big problem

00:27:59,970 --> 00:28:03,240
and I mean you've got to go to ask

00:28:01,860 --> 00:28:05,340
yourself are you creating a technical

00:28:03,240 --> 00:28:07,170
debt and if your apps going to be built

00:28:05,340 --> 00:28:09,270
in JavaScript eventually why are you

00:28:07,170 --> 00:28:11,360
doing a proof-of-concept in pure Python

00:28:09,270 --> 00:28:14,790
like is it not better to invest early in

00:28:11,360 --> 00:28:17,010
JavaScript within your team and it's

00:28:14,790 --> 00:28:18,270
also that point where yes it's a UI

00:28:17,010 --> 00:28:20,010
development that's been informed by

00:28:18,270 --> 00:28:22,650
maybe your data scientist or the person

00:28:20,010 --> 00:28:24,720
leading your project but are they the

00:28:22,650 --> 00:28:26,610
right person to do that is using the -

00:28:24,720 --> 00:28:27,930
the right framework to go about trying

00:28:26,610 --> 00:28:29,490
that and it surely maybe you should

00:28:27,930 --> 00:28:30,810
start with the use of researcher or UX

00:28:29,490 --> 00:28:33,450
consultant to start building a

00:28:30,810 --> 00:28:35,580
production application and so these are

00:28:33,450 --> 00:28:37,920
all questions that you have to ask if

00:28:35,580 --> 00:28:40,320
you want to create your M you know your

00:28:37,920 --> 00:28:41,580
own app and there's also areas here that

00:28:40,320 --> 00:28:43,590
we should talk about authentication

00:28:41,580 --> 00:28:45,720
testing something I haven't covered here

00:28:43,590 --> 00:28:47,160
and other kind of complex interactions

00:28:45,720 --> 00:28:49,530
with third-party libraries are things

00:28:47,160 --> 00:28:51,720
that haven't really been today properly

00:28:49,530 --> 00:28:53,490
addressed and covered in the basket

00:28:51,720 --> 00:28:55,440
there's also that issue with heavy loads

00:28:53,490 --> 00:28:58,920
and you know the performance thing that

00:28:55,440 --> 00:29:00,570
I mentioned before and so final point -

00:28:58,920 --> 00:29:01,890
is great for facilitating very rapid

00:29:00,570 --> 00:29:04,260
development of data-driven interfaces

00:29:01,890 --> 00:29:06,900
and dashboards investing a bit of time

00:29:04,260 --> 00:29:09,150
allows you to go very very far inside it

00:29:06,900 --> 00:29:10,559
and crazing a - app but ultimately

00:29:09,150 --> 00:29:13,830
front-end developers will still have a

00:29:10,559 --> 00:29:16,160
job after - kind of takes off so thank

00:29:13,830 --> 00:29:16,160
you very much

00:29:16,370 --> 00:29:26,020
[Applause]

00:29:38,470 --> 00:29:47,520
Oh where you can yeah

00:29:48,740 --> 00:30:02,140
hello-o I'm wondering if dashes at all

00:29:55,100 --> 00:30:04,670
amenable to transpiling into a web

00:30:02,140 --> 00:30:07,670
whatsit webassembly or something like

00:30:04,670 --> 00:30:09,800
that not to my knowledge at present no

00:30:07,670 --> 00:30:12,550
rather than taking like a translation

00:30:09,800 --> 00:30:15,170
approach and - is more focused on

00:30:12,550 --> 00:30:17,660
actually wrapping around and react

00:30:15,170 --> 00:30:18,770
components so there isn't direct

00:30:17,660 --> 00:30:20,630
translation that I mean there are

00:30:18,770 --> 00:30:23,540
projects which trans parallel JavaScript

00:30:20,630 --> 00:30:25,670
into a transpiler Python into JavaScript

00:30:23,540 --> 00:30:27,140
I can't remember the names of those or

00:30:25,670 --> 00:30:30,350
what what they do I know that that does

00:30:27,140 --> 00:30:31,850
exist and as to webassembly and not to

00:30:30,350 --> 00:30:33,559
my knowledge at the moment but with tiny

00:30:31,850 --> 00:30:35,720
annotations now the interaction and

00:30:33,559 --> 00:30:37,280
things like oxide putting and they're

00:30:35,720 --> 00:30:38,450
taking Python putting it into rust and

00:30:37,280 --> 00:30:39,350
then putting it into web assembly could

00:30:38,450 --> 00:30:44,720
be a really interesting thing in the

00:30:39,350 --> 00:30:48,260
future I have a comment and a question

00:30:44,720 --> 00:30:51,020
yo first it is clear that the developer

00:30:48,260 --> 00:30:56,530
cannot escape from understanding HTML

00:30:51,020 --> 00:30:59,750
you are writing HTML in Python HTML and

00:30:56,530 --> 00:31:04,850
typical data scientist is not familiar

00:30:59,750 --> 00:31:07,820
with it maybe and a question is how the

00:31:04,850 --> 00:31:12,440
bugging works because some of the events

00:31:07,820 --> 00:31:16,130
happens on the client side click

00:31:12,440 --> 00:31:20,510
listeners or and and the rest are in the

00:31:16,130 --> 00:31:23,210
server side so yeah well you're right

00:31:20,510 --> 00:31:24,650
the developer has to have and you know

00:31:23,210 --> 00:31:27,140
at least some basic familiarity with

00:31:24,650 --> 00:31:28,160
HTML and although that generally hasn't

00:31:27,140 --> 00:31:29,360
hasn't really been a problem I think

00:31:28,160 --> 00:31:31,429
most people have been quite quite

00:31:29,360 --> 00:31:33,679
familiar with it and you're right there

00:31:31,429 --> 00:31:35,720
are certainly occasions where you'll get

00:31:33,679 --> 00:31:38,000
a complex bug that might be something to

00:31:35,720 --> 00:31:39,140
do with the the front end and something

00:31:38,000 --> 00:31:41,300
is happening in JavaScript rather than

00:31:39,140 --> 00:31:43,400
the backend and they they tend to be

00:31:41,300 --> 00:31:44,960
bugs in the - framework itself or in a

00:31:43,400 --> 00:31:48,320
custom component that you've made and

00:31:44,960 --> 00:31:50,030
and rather than the actual established

00:31:48,320 --> 00:31:52,730
components which themselves are very

00:31:50,030 --> 00:31:54,350
very stable generally and will often

00:31:52,730 --> 00:31:55,670
have a quite a helpful debug message

00:31:54,350 --> 00:32:00,190
that allows you to kind of figure out

00:31:55,670 --> 00:32:00,190
what's what's going on thank you

00:32:01,809 --> 00:32:13,429
question oh I'm afraid what sorry

00:32:09,460 --> 00:32:16,900
directive library called Altair nope but

00:32:13,429 --> 00:32:16,900
actually some media hobby

00:32:20,180 --> 00:32:26,749

YouTube URL: https://www.youtube.com/watch?v=mMzFhGXGrVc


