Title: Martin Christen - Geospatial Analysis using Python and JupyterHub
Publication date: 2019-09-03
Playlist: EuroPython 2019
Description: 
	"Geospatial Analysis using Python and JupyterHub
[EuroPython 2019 - Talk - 2019-07-10 - Singapore [PyData track]
[Basel, CH]

By Martin Christen

Geospatial data is data containing a spatial component â€“ describing objects with a reference to the planet's surface. This data usually consists of a spatial component, of various attributes, and sometimes of a time reference (where, what, and when). Efficient processing and visualization of small to large-scale spatial data is a challenging task. 

This talk describes how to process and visualize geospatial vector and raster data using Python and the Jupyter Notebook. 

To process the data a high performance computer with 4 GPUS (NVidia Tesla V100), 192 GB RAM, 44 CPU Cores is used to run JupyterHub.

There are numerous modules available which help using geospatial data in using low- and high-level interfaces, which are shown in this presentation. In addition, it is shown how to use deep learning for raster analysis using the high performance GPUs and several deep learning frameworks.



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2019.europython.eu/events/speaker-release-agreement/
Captions: 
	00:00:05,250 --> 00:00:12,570
thank you very much for the kind

00:00:07,840 --> 00:00:14,920
introduction I'm talking about

00:00:12,570 --> 00:00:19,060
geospatial analysis and the second thing

00:00:14,920 --> 00:00:21,850
you see the title is Jupiter help anyone

00:00:19,060 --> 00:00:26,289
of you already used to Peter hurt before

00:00:21,850 --> 00:00:28,830
oh cool so not too many but more and

00:00:26,289 --> 00:00:32,290
more and more that's great

00:00:28,830 --> 00:00:33,910
actually I could have titled that talk

00:00:32,290 --> 00:00:36,519
to Peter aligned with Jupiter lab

00:00:33,910 --> 00:00:38,470
instead of Jupiter but I want to show

00:00:36,519 --> 00:00:42,940
you how cool - Peter hobbies it's

00:00:38,470 --> 00:00:46,720
basically Jupiter lab where you can log

00:00:42,940 --> 00:00:48,699
in so if you go on a website and you

00:00:46,720 --> 00:00:51,909
have a Jupiter hub installed you just

00:00:48,699 --> 00:00:54,930
get this page here and you can sign in

00:00:51,909 --> 00:00:58,199
and after signing in you see days so

00:00:54,930 --> 00:01:02,820
it's perfect so it's a multi-user

00:00:58,199 --> 00:01:06,310
Jupiter lab and that's pretty much all

00:01:02,820 --> 00:01:08,439
there is something I like to show you -

00:01:06,310 --> 00:01:11,649
this one you can do with a regular

00:01:08,439 --> 00:01:13,869
Jupiter node worker Jupiter lab

00:01:11,649 --> 00:01:16,090
installation - you see I have three

00:01:13,869 --> 00:01:18,280
Colonels here I have a pison Colonel I

00:01:16,090 --> 00:01:20,289
have a markdown colonel have our colonel

00:01:18,280 --> 00:01:22,479
but there is another feature you can

00:01:20,289 --> 00:01:26,469
have Colonels with different pison

00:01:22,479 --> 00:01:29,049
versions and that's quite handy and it

00:01:26,469 --> 00:01:31,450
just create a virtual environment you

00:01:29,049 --> 00:01:35,469
see that oppose using Conda in our case

00:01:31,450 --> 00:01:39,729
and environment name whatever you like

00:01:35,469 --> 00:01:44,079
and then you specify pison 3.5 3.6 3.7

00:01:39,729 --> 00:01:47,289
whatever don't use - I pass the colonel

00:01:44,079 --> 00:01:50,259
and then you activate this environment

00:01:47,289 --> 00:01:53,350
and install or your cool packages you

00:01:50,259 --> 00:01:56,560
want to use and after that you can

00:01:53,350 --> 00:02:00,310
create a new kernel with line above just

00:01:56,560 --> 00:02:07,179
I PI Carano install user space and name

00:02:00,310 --> 00:02:11,110
of the new kernel and the screen turns

00:02:07,179 --> 00:02:13,150
black and then you can list all the

00:02:11,110 --> 00:02:15,370
kernels using Jupiter kernels backlist

00:02:13,150 --> 00:02:15,940
and you see actually all the current

00:02:15,370 --> 00:02:18,069
system

00:02:15,940 --> 00:02:21,670
so if you make this purchase procedure

00:02:18,069 --> 00:02:24,400
for let me say five different price

00:02:21,670 --> 00:02:26,380
inversions you will see actually five

00:02:24,400 --> 00:02:29,410
different price inversions in your

00:02:26,380 --> 00:02:32,170
jupiter lab environment and that's

00:02:29,410 --> 00:02:34,050
really quite handy and if and now we

00:02:32,170 --> 00:02:36,640
come back to the original title

00:02:34,050 --> 00:02:40,270
geospatial if you installed she was

00:02:36,640 --> 00:02:44,830
spatial modules then you usually have to

00:02:40,270 --> 00:02:46,480
install many sea based libraries and for

00:02:44,830 --> 00:02:49,440
that it's really really recommended to

00:02:46,480 --> 00:02:52,989
have multiple price inversions and

00:02:49,440 --> 00:02:54,670
environment and of course if you are on

00:02:52,989 --> 00:02:57,989
jupiter hub you will have your file

00:02:54,670 --> 00:03:02,370
system there and you can access all your

00:02:57,989 --> 00:03:06,720
user files from the Jupiter lab for help

00:03:02,370 --> 00:03:10,180
so what we are doing we have a HP Apollo

00:03:06,720 --> 00:03:14,950
6500 server and on the server we

00:03:10,180 --> 00:03:19,090
installed Jupiter hub and we bought this

00:03:14,950 --> 00:03:22,799
machine with forty eight cores 192 gigs

00:03:19,090 --> 00:03:25,739
of RAM and attached it to our small

00:03:22,799 --> 00:03:28,150
storage system is one or 20 terabytes

00:03:25,739 --> 00:03:31,450
which is actually quite fast storage

00:03:28,150 --> 00:03:33,670
where we have 1 GB per second reading

00:03:31,450 --> 00:03:36,400
and writing speed and that's also a very

00:03:33,670 --> 00:03:38,950
important fact if you have terabytes of

00:03:36,400 --> 00:03:41,980
Chiho data you want to have a really

00:03:38,950 --> 00:03:46,769
fast and reliable system we also have

00:03:41,980 --> 00:03:50,950
fourth and meet a Tesla V 100 in it wow

00:03:46,769 --> 00:03:57,640
that's high tech II so I think the cable

00:03:50,950 --> 00:03:59,709
should be changed tomorrow okay so what

00:03:57,640 --> 00:04:04,510
I wanted to say we have immediate Tesla

00:03:59,709 --> 00:04:11,350
V 100 s XM to model that's here one of

00:04:04,510 --> 00:04:14,920
them and uses lots of power and 900 GB

00:04:11,350 --> 00:04:19,419
bandwidth so it's quite fast that we use

00:04:14,920 --> 00:04:21,780
to create our deep learning models more

00:04:19,419 --> 00:04:25,630
about that maybe later

00:04:21,780 --> 00:04:28,060
so what is geodata there are some

00:04:25,630 --> 00:04:28,910
standards iso standards describing

00:04:28,060 --> 00:04:31,580
what's

00:04:28,910 --> 00:04:34,010
geodata attacked the commission 211

00:04:31,580 --> 00:04:36,920
series and so but the most important is

00:04:34,010 --> 00:04:40,100
most data you have has a geospatial

00:04:36,920 --> 00:04:42,290
component most data you actually have

00:04:40,100 --> 00:04:45,140
has a location component or you can

00:04:42,290 --> 00:04:50,090
create a location component out of it

00:04:45,140 --> 00:04:54,100
and mostly people use GIS software to

00:04:50,090 --> 00:04:57,290
load and manage this data however that's

00:04:54,100 --> 00:05:01,220
something I do not want to do personally

00:04:57,290 --> 00:05:04,040
I use pison for that so what I show you

00:05:01,220 --> 00:05:08,120
now is everything I'm doing with geo

00:05:04,040 --> 00:05:12,590
data is done in a 2p2 notebook and you

00:05:08,120 --> 00:05:15,820
can really run install or J software if

00:05:12,590 --> 00:05:20,360
you if you do that and today I'm

00:05:15,820 --> 00:05:22,220
limiting myself to two vector data and a

00:05:20,360 --> 00:05:25,580
little bit roster data there is also

00:05:22,220 --> 00:05:29,060
other geospatial data like point clouds

00:05:25,580 --> 00:05:32,750
and three objects and that's not what

00:05:29,060 --> 00:05:36,230
I'm going to tell you so everything is

00:05:32,750 --> 00:05:39,680
open source I'm showing today the most

00:05:36,230 --> 00:05:48,380
important two libraries are C++ based

00:05:39,680 --> 00:05:52,730
it's cheadle OTR okay and the second

00:05:48,380 --> 00:05:56,810
library is Gio's and there they have

00:05:52,730 --> 00:05:59,570
bindings in Pisan and it's really it's

00:05:56,810 --> 00:06:02,960
not pythonic so therefore some people

00:05:59,570 --> 00:06:06,410
created new pison modules which are

00:06:02,960 --> 00:06:09,410
really pythonic and and use the same c++

00:06:06,410 --> 00:06:11,900
library and it's much much nicer to work

00:06:09,410 --> 00:06:15,620
with that I would not recommend using

00:06:11,900 --> 00:06:17,540
cheedo directory I would use rusty ryo

00:06:15,620 --> 00:06:21,169
for russell data processing

00:06:17,540 --> 00:06:24,380
phaona for vector processing and Shapley

00:06:21,169 --> 00:06:28,540
to do some vector data operations I will

00:06:24,380 --> 00:06:32,480
show you instant and if you know pandas

00:06:28,540 --> 00:06:35,630
really nice module in PI's there is also

00:06:32,480 --> 00:06:40,550
geo pandas which extends pandas for

00:06:35,630 --> 00:06:42,500
geospatial data so that's a give you the

00:06:40,550 --> 00:06:48,460
links which projects we are

00:06:42,500 --> 00:06:51,560
today most important is that we use

00:06:48,460 --> 00:06:54,650
Jupiter notebook and the first module

00:06:51,560 --> 00:06:58,040
I'm showing you is volume volume is

00:06:54,650 --> 00:07:01,360
basically leaflet is JavaScript library

00:06:58,040 --> 00:07:04,930
to create maps it's one of many

00:07:01,360 --> 00:07:08,360
JavaScript libraries to create maps and

00:07:04,930 --> 00:07:12,080
misra lines of code you have a map in

00:07:08,360 --> 00:07:15,590
your Jupiter notebook or Jupiter lab so

00:07:12,080 --> 00:07:18,140
you can specify important for you module

00:07:15,590 --> 00:07:21,740
and you just create a map specify a

00:07:18,140 --> 00:07:24,200
location and a zoom level the zoom level

00:07:21,740 --> 00:07:26,960
is how far away from the ground

00:07:24,200 --> 00:07:29,210
or are you typically about 22 levels you

00:07:26,960 --> 00:07:32,590
know that from other mapping services

00:07:29,210 --> 00:07:35,570
like Google Maps Bing Maps OpenStreetMap

00:07:32,590 --> 00:07:40,100
Yahoo Maps and all these map services

00:07:35,570 --> 00:07:42,800
that exist today another thing is if we

00:07:40,100 --> 00:07:45,410
look at vector a datum there are some

00:07:42,800 --> 00:07:48,169
specifications like the OGC simple

00:07:45,410 --> 00:07:52,040
feature access specifications virtue

00:07:48,169 --> 00:07:55,300
data and and in this case vector data is

00:07:52,040 --> 00:07:59,650
defined this is used in many databases

00:07:55,300 --> 00:08:02,479
like post keys PostgreSQL and so on and

00:07:59,650 --> 00:08:06,530
one of many representations is just use

00:08:02,479 --> 00:08:09,530
text so I use text to specify a point I

00:08:06,530 --> 00:08:12,680
use text to specify a polygon and so on

00:08:09,530 --> 00:08:15,340
the reason for that is you can print it

00:08:12,680 --> 00:08:18,290
and in 100 years you can still read it

00:08:15,340 --> 00:08:22,190
so at the Chico world that's a very

00:08:18,290 --> 00:08:24,050
important topic there's also the wkb a

00:08:22,190 --> 00:08:26,930
binary format but I'm not talking about

00:08:24,050 --> 00:08:31,190
that now so here are some examples if

00:08:26,930 --> 00:08:31,820
you specify a point in wkt well-known

00:08:31,190 --> 00:08:35,060
text

00:08:31,820 --> 00:08:38,210
it's just point brackets 10 20 in this

00:08:35,060 --> 00:08:40,880
example or if you have polygon if a

00:08:38,210 --> 00:08:43,460
polygon takes the coordinates or there

00:08:40,880 --> 00:08:45,650
are some things like multi polygons so

00:08:43,460 --> 00:08:47,990
you have multiple polygons for example

00:08:45,650 --> 00:08:49,820
if you have a country with Islands there

00:08:47,990 --> 00:08:52,160
are multiple polygons in that there are

00:08:49,820 --> 00:08:55,820
also clones with holes and then you have

00:08:52,160 --> 00:08:58,790
a whole this is all specified in a wkt

00:08:55,820 --> 00:09:01,100
so it's a it's it's a nice thing and we

00:08:58,790 --> 00:09:04,940
can use that array with shape we can use

00:09:01,100 --> 00:09:09,580
that directly so we can create something

00:09:04,940 --> 00:09:13,070
similar like like the wkt just using

00:09:09,580 --> 00:09:15,610
pison lists and tuples for the

00:09:13,070 --> 00:09:19,010
coordinates and you see you create your

00:09:15,610 --> 00:09:21,620
import polygon import point and here you

00:09:19,010 --> 00:09:23,780
just specify your polygon and if you

00:09:21,620 --> 00:09:26,480
look at it you see the first and the

00:09:23,780 --> 00:09:28,790
last point is the same that's an

00:09:26,480 --> 00:09:30,170
important aspect of this standard the

00:09:28,790 --> 00:09:35,750
first and the last point is the same so

00:09:30,170 --> 00:09:38,990
we have a closed polygon we can actually

00:09:35,750 --> 00:09:42,890
load it from text to we can create a

00:09:38,990 --> 00:09:47,330
string with wkt definition and Lotus

00:09:42,890 --> 00:09:49,700
using shapely wkt and just load SS per

00:09:47,330 --> 00:09:52,490
string and then we have our polygon

00:09:49,700 --> 00:09:56,660
definition and also format which is

00:09:52,490 --> 00:10:01,880
quite popular in the JavaScript world is

00:09:56,660 --> 00:10:04,760
geo J'son and there you also create your

00:10:01,880 --> 00:10:09,530
polygons and specified coordinates

00:10:04,760 --> 00:10:11,390
that's another approach to define vector

00:10:09,530 --> 00:10:13,760
data of course there are many other

00:10:11,390 --> 00:10:17,300
formats - I'm not going into details

00:10:13,760 --> 00:10:20,690
there now but that's what you find if

00:10:17,300 --> 00:10:24,560
you go into geo business so let's let's

00:10:20,690 --> 00:10:26,560
just add such a cute Jason in volume you

00:10:24,560 --> 00:10:29,660
see it's a little bit more complicated

00:10:26,560 --> 00:10:32,780
but basically you open the cheo cheo

00:10:29,660 --> 00:10:36,290
file you load it and you put it on the

00:10:32,780 --> 00:10:38,540
map again same syntax and then you use

00:10:36,290 --> 00:10:41,150
the CHEO Jason from volumes just called

00:10:38,540 --> 00:10:43,670
chill Jason and you add it to your map

00:10:41,150 --> 00:10:46,670
in this case I wrote it at Jason of

00:10:43,670 --> 00:10:49,610
Switzerland okay you see that it's a

00:10:46,670 --> 00:10:54,500
it's a shape it's aligned and now I do

00:10:49,610 --> 00:10:57,050
the same again but I plopped it directly

00:10:54,500 --> 00:10:59,510
using shapely and you see there is a

00:10:57,050 --> 00:11:03,290
it's not it's not the same so there is a

00:10:59,510 --> 00:11:06,980
distortion so sweet so it is not that

00:11:03,290 --> 00:11:08,240
distorted distorted usually and the

00:11:06,980 --> 00:11:09,640
reason for that is we have different

00:11:08,240 --> 00:11:14,650
coordinates

00:11:09,640 --> 00:11:16,030
so let me show you the critique you on

00:11:14,650 --> 00:11:19,960
the sphere you know that there is

00:11:16,030 --> 00:11:25,090
longitude latitude longitude along the

00:11:19,960 --> 00:11:29,140
greater latitude for the poles and you

00:11:25,090 --> 00:11:32,770
can project this to to map the easiest

00:11:29,140 --> 00:11:35,020
way is just to create out of the sphere

00:11:32,770 --> 00:11:37,960
you just create a Cartesian coordinate

00:11:35,020 --> 00:11:40,450
system so you to map latitude longitude

00:11:37,960 --> 00:11:44,350
on it and then you get this one and

00:11:40,450 --> 00:11:49,210
that's a completely distorted image of

00:11:44,350 --> 00:11:52,630
the world it's not what you see in

00:11:49,210 --> 00:11:57,700
Google Maps actually there is even more

00:11:52,630 --> 00:11:58,600
bad with more distortions so there are

00:11:57,700 --> 00:12:02,290
some definitions

00:11:58,600 --> 00:12:06,010
the earth is a ellipsoid so the world

00:12:02,290 --> 00:12:13,020
geodetic system 1985 for defined some

00:12:06,010 --> 00:12:16,900
some data how the earth is best fit in a

00:12:13,020 --> 00:12:19,450
rotational ellipsoid or spheroid and out

00:12:16,900 --> 00:12:23,140
of that you can create different map

00:12:19,450 --> 00:12:26,110
projections I talked three here out of

00:12:23,140 --> 00:12:28,600
many 10,000 different actually you could

00:12:26,110 --> 00:12:32,410
invent your own map projection if you

00:12:28,600 --> 00:12:35,140
want to and here I printed three of them

00:12:32,410 --> 00:12:37,720
and you see there are all a little bit

00:12:35,140 --> 00:12:40,990
different Mercator projection is what

00:12:37,720 --> 00:12:45,970
you know from google maps etc and you

00:12:40,990 --> 00:12:49,870
see the authorities down here is bigger

00:12:45,970 --> 00:12:51,790
than most other continents which is

00:12:49,870 --> 00:12:58,060
completely wrong but it's an effect of

00:12:51,790 --> 00:13:00,010
projections so they can look at the so

00:12:58,060 --> 00:13:04,110
called coordinate reference systems or

00:13:00,010 --> 00:13:08,800
spatial reference systems and we can

00:13:04,110 --> 00:13:10,720
have two special cases one is we use two

00:13:08,800 --> 00:13:13,990
eccentric Cartesian system that just

00:13:10,720 --> 00:13:16,920
Cartesian system with X Y Zed or we use

00:13:13,990 --> 00:13:21,950
projected coordinates that's usually not

00:13:16,920 --> 00:13:24,170
3d it's actually flat and that's

00:13:21,950 --> 00:13:26,690
the actually every country has its own

00:13:24,170 --> 00:13:29,660
representation Switzerland has its

00:13:26,690 --> 00:13:33,110
swissgrid and for example also countries

00:13:29,660 --> 00:13:35,410
don't have their special coordinate

00:13:33,110 --> 00:13:39,529
systems - I'm not going to details here

00:13:35,410 --> 00:13:41,899
but you can look it up but epsg dot IO

00:13:39,529 --> 00:13:44,899
you can look the system of your country

00:13:41,899 --> 00:13:47,810
if you see is the European petroleum

00:13:44,899 --> 00:13:50,480
survey group catalog all these these

00:13:47,810 --> 00:13:54,079
college systems and for example the epsg

00:13:50,480 --> 00:13:58,310
for three to six is the world geodetic

00:13:54,079 --> 00:13:58,910
system 1984 okay that was a little bit

00:13:58,310 --> 00:14:00,949
off-topic

00:13:58,910 --> 00:14:03,620
let's look at a real example we are

00:14:00,949 --> 00:14:08,540
located around here they are located

00:14:03,620 --> 00:14:13,940
around here so we can say we have a

00:14:08,540 --> 00:14:20,000
longitude of 7.5 so here we need ms 0

00:14:13,940 --> 00:14:26,480
and we are seven degrees to the east and

00:14:20,000 --> 00:14:30,170
then 47 is is the latitude so here would

00:14:26,480 --> 00:14:32,540
be equator so we go 47 up here and we're

00:14:30,170 --> 00:14:35,380
in Switzerland at the Congress center

00:14:32,540 --> 00:14:39,560
parcel so that's how it works

00:14:35,380 --> 00:14:40,010
maybe the problem we will see in an

00:14:39,560 --> 00:14:44,240
instant

00:14:40,010 --> 00:14:47,420
so this Shapley we can do some nice

00:14:44,240 --> 00:14:49,399
expressions we can we can check if a

00:14:47,420 --> 00:14:51,199
point is inside a polygon for example

00:14:49,399 --> 00:14:53,360
that's a very complex operation but with

00:14:51,199 --> 00:14:56,240
Shapley it's just a few lines of code

00:14:53,360 --> 00:14:59,209
actually one line of code so you create

00:14:56,240 --> 00:15:03,320
a point 47 7 that's our coordinate of

00:14:59,209 --> 00:15:08,060
the Congress Center Basel you I can look

00:15:03,320 --> 00:15:10,010
at it as W kita w Katie representation a

00:15:08,060 --> 00:15:13,910
C point and the coordinate so everything

00:15:10,010 --> 00:15:16,490
is perfect and then I check the

00:15:13,910 --> 00:15:18,319
operation this Europe liason point is

00:15:16,490 --> 00:15:24,250
within Switzerland and we get a result

00:15:18,319 --> 00:15:24,250
false so what did I do wrong

00:15:28,860 --> 00:15:35,170
they'll work a lowercase R on

00:15:31,240 --> 00:15:38,290
projections all wrong though it it's

00:15:35,170 --> 00:15:40,600
very simple it's very simple you see I

00:15:38,290 --> 00:15:42,760
show you the result how it is done

00:15:40,600 --> 00:15:48,519
correctly so what was it what was the

00:15:42,760 --> 00:15:51,010
difference I flipped a latitude

00:15:48,519 --> 00:15:56,700
longitude now I have the longitude first

00:15:51,010 --> 00:16:00,250
and then it works so the problem is

00:15:56,700 --> 00:16:03,149
before we had the volume module volume

00:16:00,250 --> 00:16:07,060
size first latitude and longitude

00:16:03,149 --> 00:16:10,630
shapeless is first first longitude and

00:16:07,060 --> 00:16:13,060
latitude and that's that's that's a

00:16:10,630 --> 00:16:14,680
common problem some people say a lot

00:16:13,060 --> 00:16:16,269
long long lat not long

00:16:14,680 --> 00:16:19,450
this is based or no that that is better

00:16:16,269 --> 00:16:21,459
and the confusion is perfect so we have

00:16:19,450 --> 00:16:23,970
to always consider that and now which

00:16:21,459 --> 00:16:28,209
module uses which representation

00:16:23,970 --> 00:16:31,270
personally I'm I prefer this approach

00:16:28,209 --> 00:16:34,120
too because it's something light x-axis

00:16:31,270 --> 00:16:35,709
first and y-axis second but it

00:16:34,120 --> 00:16:40,560
geographic coordinate you can't say

00:16:35,709 --> 00:16:45,100
x-axis and y-axis so that's the point of

00:16:40,560 --> 00:16:46,899
many people find it's worth disputing so

00:16:45,100 --> 00:16:49,270
I said before we have other vector

00:16:46,899 --> 00:16:51,459
formats I'm not going into the details I

00:16:49,270 --> 00:16:54,160
just recommend if you want to read

00:16:51,459 --> 00:16:57,250
vector that I used if I own a module but

00:16:54,160 --> 00:17:02,110
as the time is going on I'm showing

00:16:57,250 --> 00:17:04,870
quickly to pandas which is pandas with

00:17:02,110 --> 00:17:08,350
the ability to make some Geographic of

00:17:04,870 --> 00:17:11,050
geospatial queries so I can load

00:17:08,350 --> 00:17:13,449
something let me lower the data set with

00:17:11,050 --> 00:17:16,720
all cities of the world with more than

00:17:13,449 --> 00:17:18,520
5000 with a population greater than 5000

00:17:16,720 --> 00:17:22,540
you can download this data set at

00:17:18,520 --> 00:17:25,209
geonames dot org so it's very small so

00:17:22,540 --> 00:17:29,530
you don't see that good well because it

00:17:25,209 --> 00:17:31,929
has many data in it so I reduced it to

00:17:29,530 --> 00:17:34,030
the most important data so I take the

00:17:31,929 --> 00:17:35,950
name latitude longitude population now

00:17:34,030 --> 00:17:39,429
you see it has take latitude first and

00:17:35,950 --> 00:17:39,770
longitude and that's the data set

00:17:39,429 --> 00:17:43,790
you

00:17:39,770 --> 00:17:45,980
created CHEO pandas out of it the trick

00:17:43,790 --> 00:17:49,160
is you'd make a column is named geometry

00:17:45,980 --> 00:17:52,250
and in this geometry you have a shapely

00:17:49,160 --> 00:17:53,870
representation of the geographic

00:17:52,250 --> 00:17:55,730
information this could be a point like

00:17:53,870 --> 00:17:58,190
in this case or a polygon a multi

00:17:55,730 --> 00:18:01,880
polygon whatever you can create your

00:17:58,190 --> 00:18:04,250
geometry : just there so she opened us

00:18:01,880 --> 00:18:07,460
can also plot like we know that from

00:18:04,250 --> 00:18:09,559
pandas just make your geo data frame and

00:18:07,460 --> 00:18:10,220
you plot it and if you plot all cities

00:18:09,559 --> 00:18:13,820
of the world

00:18:10,220 --> 00:18:18,800
you see you recognize the shape of the

00:18:13,820 --> 00:18:21,740
continents more or less so Europe is

00:18:18,800 --> 00:18:27,710
quite green in this case there are many

00:18:21,740 --> 00:18:31,730
cities so I can do some queries okay I

00:18:27,710 --> 00:18:34,360
basically pandas so same and you see if

00:18:31,730 --> 00:18:37,520
I'm a query named Basel I get

00:18:34,360 --> 00:18:41,630
information but more interesting our

00:18:37,520 --> 00:18:43,670
spatial queries so let me get the

00:18:41,630 --> 00:18:46,550
distance from the Congress center here

00:18:43,670 --> 00:18:50,020
to all other cities in this data set so

00:18:46,550 --> 00:18:55,150
I just create our point again and

00:18:50,020 --> 00:18:57,520
calculate distance and make a new column

00:18:55,150 --> 00:19:00,170
miss distance and I sort this column

00:18:57,520 --> 00:19:02,059
distance so they show you the result

00:19:00,170 --> 00:19:06,170
it's simple to understand so you have

00:19:02,059 --> 00:19:08,900
the name here and geometry and here the

00:19:06,170 --> 00:19:12,440
distance so we see we have miss Varens

00:19:08,900 --> 00:19:14,179
just next to Berlin basel itself so it's

00:19:12,440 --> 00:19:16,580
a bit strange because it's also always

00:19:14,179 --> 00:19:18,200
the center so it's the distance to the

00:19:16,580 --> 00:19:19,520
coordinates or we are closer to

00:19:18,200 --> 00:19:22,280
prevailed on to Berlin

00:19:19,520 --> 00:19:26,090
Finnegan viola - in Germany jean-louis

00:19:22,280 --> 00:19:31,490
France and so on so that's the names of

00:19:26,090 --> 00:19:35,540
these errors in with the distance so I

00:19:31,490 --> 00:19:38,390
can also query within a polygon so I can

00:19:35,540 --> 00:19:40,580
use my polygon again and say I would

00:19:38,390 --> 00:19:44,210
like to have all the cities within the

00:19:40,580 --> 00:19:46,790
polygon Switzerland and then we see if I

00:19:44,210 --> 00:19:48,830
do that and combine it with something

00:19:46,790 --> 00:19:51,590
else like for example I make I would

00:19:48,830 --> 00:19:53,690
have like to have all the the cities

00:19:51,590 --> 00:19:58,430
with population bigger than

00:19:53,690 --> 00:20:00,590
than 20,000 and I retire this is not

00:19:58,430 --> 00:20:03,620
sorted actually but it doesn't matter so

00:20:00,590 --> 00:20:06,500
I get all cities in this data that with

00:20:03,620 --> 00:20:11,450
in Switzerland and with a population

00:20:06,500 --> 00:20:14,150
greater than 20,000 so let's do one more

00:20:11,450 --> 00:20:16,580
thing display the cities in a volume map

00:20:14,150 --> 00:20:20,270
that's quite easy you can combine those

00:20:16,580 --> 00:20:22,760
modules so you just create this apply

00:20:20,270 --> 00:20:26,150
for example you can specify a function

00:20:22,760 --> 00:20:30,440
which fails the create marker of every

00:20:26,150 --> 00:20:34,730
city and then you have that in folium so

00:20:30,440 --> 00:20:39,980
let me do a last example before session

00:20:34,730 --> 00:20:43,720
shares rose being there is for example a

00:20:39,980 --> 00:20:47,000
nice dataset with live earthquakes or

00:20:43,720 --> 00:20:50,650
the earthquakes of the last two weeks so

00:20:47,000 --> 00:20:53,960
you can download that directly with this

00:20:50,650 --> 00:20:56,840
missus link I do that for example two

00:20:53,960 --> 00:21:00,380
requests module and then I store it as a

00:20:56,840 --> 00:21:04,400
file earthquakes goj is I just did it

00:21:00,380 --> 00:21:08,270
half an hour ago abroad and that was the

00:21:04,400 --> 00:21:11,030
result so I can use two pandas to open

00:21:08,270 --> 00:21:15,020
my Geo jason directly and display the

00:21:11,030 --> 00:21:17,840
first five incidents and again I

00:21:15,020 --> 00:21:22,010
simplify the dataset I reduce it to two

00:21:17,840 --> 00:21:24,350
four columns time magnitude place and

00:21:22,010 --> 00:21:28,610
geometry we see the first five it's not

00:21:24,350 --> 00:21:30,830
sorted anyway and we see a trend in

00:21:28,610 --> 00:21:32,360
California at the moment there is a

00:21:30,830 --> 00:21:35,660
hotspot there at the moment

00:21:32,360 --> 00:21:38,570
and we can create a histogram out of the

00:21:35,660 --> 00:21:40,730
data that's a nice way using histograms

00:21:38,570 --> 00:21:44,590
with sixteen bins in this case we see

00:21:40,730 --> 00:21:48,500
most luckily most earthquakes are around

00:21:44,590 --> 00:21:53,060
three and there are higher ones in there

00:21:48,500 --> 00:21:54,710
unfortunately and we can you see in the

00:21:53,060 --> 00:21:58,400
in the first column here you have a

00:21:54,710 --> 00:22:02,360
timestamp and two to change this

00:21:58,400 --> 00:22:04,520
timestamp to a to a better readable

00:22:02,360 --> 00:22:07,130
representation you can use the daytime

00:22:04,520 --> 00:22:09,950
and the timezone module of pison and

00:22:07,130 --> 00:22:13,640
create a new column with which is more

00:22:09,950 --> 00:22:17,030
readable so we have ten of try this is

00:22:13,640 --> 00:22:19,130
UTC time zone maybe we hear something

00:22:17,030 --> 00:22:20,350
about time zones and a lightning talk I

00:22:19,130 --> 00:22:23,270
don't know

00:22:20,350 --> 00:22:25,570
tomorrow tomorrow it's very nice talk

00:22:23,270 --> 00:22:29,960
about time sounds very important

00:22:25,570 --> 00:22:32,630
Miroslav yours laughs so you can plot

00:22:29,960 --> 00:22:37,100
this and we can also plot multiple geo

00:22:32,630 --> 00:22:39,380
data sets and you see I read this geo

00:22:37,100 --> 00:22:42,590
data frame and I can combine this using

00:22:39,380 --> 00:22:44,360
just plots multiple plots using the axis

00:22:42,590 --> 00:22:46,670
you can have multiple out so I can

00:22:44,360 --> 00:22:49,400
display the continents and some

00:22:46,670 --> 00:22:51,820
earthquake on it it could do more it

00:22:49,400 --> 00:22:56,390
could change the size of the of the dots

00:22:51,820 --> 00:23:01,930
depending the magnitude and I think the

00:22:56,390 --> 00:23:04,650
cable says it's time for questions so

00:23:01,930 --> 00:23:11,739
thank you very much for your attention

00:23:04,650 --> 00:23:11,739
[Applause]

00:23:11,999 --> 00:23:35,759
and are there any I think I think that's

00:23:37,409 --> 00:23:41,769
actually there is a microphone on the

00:23:39,519 --> 00:23:46,690
table and I think somewhere I'm not

00:23:41,769 --> 00:23:48,490
quite sure hello I'm not sure okay can

00:23:46,690 --> 00:23:53,409
you say something about what you use

00:23:48,490 --> 00:23:56,019
this very expensive computer for that's

00:23:53,409 --> 00:23:57,999
a good question I unfortunately wanted

00:23:56,019 --> 00:23:58,809
to say more about that but I was running

00:23:57,999 --> 00:24:03,009
out of time

00:23:58,809 --> 00:24:06,789
after 35 slides I said oh we have to

00:24:03,009 --> 00:24:08,679
start like we do some project for

00:24:06,789 --> 00:24:11,499
example to detect solar panels on the

00:24:08,679 --> 00:24:13,480
roofs we have the data set of

00:24:11,499 --> 00:24:16,299
orthophotos of Torah Switzerland that's

00:24:13,480 --> 00:24:18,970
about 2 terabyte of data and there we

00:24:16,299 --> 00:24:22,299
try to detect solar panels different

00:24:18,970 --> 00:24:25,960
kind of solar panels and therefore we

00:24:22,299 --> 00:24:28,330
create models deep learning models and

00:24:25,960 --> 00:24:32,999
train that and for training we use the

00:24:28,330 --> 00:24:32,999
forward gpu's and to improve it oh

00:24:33,690 --> 00:24:41,619
they're confusing mr. microphone and of

00:24:39,669 --> 00:24:43,480
course many other applications we do

00:24:41,619 --> 00:24:45,809
many deep learning projects at the

00:24:43,480 --> 00:24:45,809
moment

00:24:56,679 --> 00:25:00,740
no I didn't have enscape I actually

00:24:59,330 --> 00:25:06,200
didn't even put in that in this

00:25:00,740 --> 00:25:09,679
presentation yeah but I don't have it

00:25:06,200 --> 00:25:13,340
ready actually - are there any solutions

00:25:09,679 --> 00:25:15,380
for Gayo geo data spatial queries in

00:25:13,340 --> 00:25:17,000
databases in django applications you

00:25:15,380 --> 00:25:19,220
would recommend because we've seen

00:25:17,000 --> 00:25:22,100
Python now but if I have to trim it down

00:25:19,220 --> 00:25:23,690
to SQL it becomes a bit more complex

00:25:22,100 --> 00:25:26,659
especially when I have to do it from

00:25:23,690 --> 00:25:28,490
Django of course you can you can this is

00:25:26,659 --> 00:25:33,500
something I don't I don't like to answer

00:25:28,490 --> 00:25:35,990
any applies and conference but I for

00:25:33,500 --> 00:25:39,860
example is post rescue and post J's and

00:25:35,990 --> 00:25:42,220
post GIS uses spatial queries tool you

00:25:39,860 --> 00:25:44,179
can do the same like a showed here and

00:25:42,220 --> 00:25:46,730
unfortunately you can do that with

00:25:44,179 --> 00:25:50,690
suppose suppose chess much faster than

00:25:46,730 --> 00:25:52,190
using the Jupiter lab solution I showed

00:25:50,690 --> 00:25:56,299
you so what I showed you is actually

00:25:52,190 --> 00:25:58,429
slower than if you are using Postgres so

00:25:56,299 --> 00:26:00,799
but you can you can do actually the same

00:25:58,429 --> 00:26:02,840
the disadvantage of course is you don't

00:26:00,799 --> 00:26:04,789
have a nice pison environment you can't

00:26:02,840 --> 00:26:09,350
program it nicely like this you can just

00:26:04,789 --> 00:26:11,419
do queries I'm aware of that but it's

00:26:09,350 --> 00:26:13,970
it's a feature of a specific data page

00:26:11,419 --> 00:26:16,039
and and if I want to do it from Django

00:26:13,970 --> 00:26:20,330
and and the Django query should also

00:26:16,039 --> 00:26:22,909
work with SQLite then I think I'll just

00:26:20,330 --> 00:26:26,090
use data to possible the product geo

00:26:22,909 --> 00:26:28,340
Chango there's a few Chango which takes

00:26:26,090 --> 00:26:32,059
takes care of these details so you can

00:26:28,340 --> 00:26:35,559
directly access the features of postures

00:26:32,059 --> 00:26:35,559
geo Chango

00:26:42,440 --> 00:26:52,890
there is some possibilities to use this

00:26:48,300 --> 00:26:58,620
these libraries for the planets other

00:26:52,890 --> 00:27:01,460
than Earth so Mars yes it's actually no

00:26:58,620 --> 00:27:04,050
problem you can you can do any planet

00:27:01,460 --> 00:27:06,720
the only problem is that you don't have

00:27:04,050 --> 00:27:08,370
high-resolution data of other planets

00:27:06,720 --> 00:27:11,070
but it's basically the same

00:27:08,370 --> 00:27:13,050
it just needs the model there are models

00:27:11,070 --> 00:27:17,400
for for Mars for example there are

00:27:13,050 --> 00:27:21,360
models for most near planets on earth

00:27:17,400 --> 00:27:24,600
you have the wgs84 representation but

00:27:21,360 --> 00:27:26,790
Mars is basically also ellipsoid so you

00:27:24,600 --> 00:27:30,090
can do exactly the same calculations

00:27:26,790 --> 00:27:32,190
with you could even do distance

00:27:30,090 --> 00:27:34,020
calculations from one point to the other

00:27:32,190 --> 00:27:38,840
always geo pandas and the Marseilles

00:27:34,020 --> 00:27:38,840
that so it's no problem okay thanks

00:27:52,500 --> 00:27:58,380
yes I will make I think all in Europe

00:27:54,990 --> 00:28:01,260
license lights will be on the program on

00:27:58,380 --> 00:28:03,780
the website program so all speakers will

00:28:01,260 --> 00:28:05,760
upload them and you can just download it

00:28:03,780 --> 00:28:08,580
from the from the place very very

00:28:05,760 --> 00:28:11,370
schedule is so it just click on the on

00:28:08,580 --> 00:28:29,250
the on the topic and you will get the

00:28:11,370 --> 00:28:31,610
link to the to the slides that's a very

00:28:29,250 --> 00:28:31,610
good question

00:28:32,010 --> 00:28:39,360
don't use your pandas for very large

00:28:34,409 --> 00:28:40,799
datasets if you if it's same like pandas

00:28:39,360 --> 00:28:43,289
you can't use pandas for very large

00:28:40,799 --> 00:28:45,630
datasets at the moment the developers

00:28:43,289 --> 00:28:49,799
are working on that they try to do some

00:28:45,630 --> 00:28:53,610
memory voodoo sorry for that but it will

00:28:49,799 --> 00:28:55,350
not work unless you use modules I didn't

00:28:53,610 --> 00:28:57,690
show that because it's already too much

00:28:55,350 --> 00:29:01,620
in a detail if you use Phi ona for

00:28:57,690 --> 00:29:05,190
example you can take one actually one

00:29:01,620 --> 00:29:07,380
row of the data set and you have that in

00:29:05,190 --> 00:29:09,510
the memory so it you have to do the

00:29:07,380 --> 00:29:12,000
memory management yourself for for

00:29:09,510 --> 00:29:14,700
example if you want to do some distance

00:29:12,000 --> 00:29:17,429
calculations you would just do it of a

00:29:14,700 --> 00:29:20,070
pair row base and then you could take a

00:29:17,429 --> 00:29:23,460
multi terabyte data set and do your

00:29:20,070 --> 00:29:25,740
calculations with that there is also for

00:29:23,460 --> 00:29:28,530
larger data sets there spice Park and

00:29:25,740 --> 00:29:31,799
geo PI's Park see there is a trend in

00:29:28,530 --> 00:29:34,770
putting a geo in front of classic Python

00:29:31,799 --> 00:29:38,659
modules and this Geopark of price park

00:29:34,770 --> 00:29:38,659
you can do much bigger calculations

00:29:43,380 --> 00:29:50,380
actually there is there is almost no

00:29:46,150 --> 00:29:52,150
limit its hardware it's it's a hardware

00:29:50,380 --> 00:29:54,309
issue if you have enough money for the

00:29:52,150 --> 00:30:00,789
hardware use you can you can have

00:29:54,309 --> 00:30:01,940
unlimited amounts of data okay thank you

00:30:00,789 --> 00:30:06,969
very much again

00:30:01,940 --> 00:30:06,969

YouTube URL: https://www.youtube.com/watch?v=2OD8loVvHXc


