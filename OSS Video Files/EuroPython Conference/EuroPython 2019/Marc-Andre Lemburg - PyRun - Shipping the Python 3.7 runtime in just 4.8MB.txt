Title: Marc-Andre Lemburg - PyRun - Shipping the Python 3.7 runtime in just 4.8MB
Publication date: 2019-09-03
Playlist: EuroPython 2019
Description: 
	"PyRun - Shipping the Python 3.7 runtime in just 4.8MB
[EuroPython 2019 - Talk - 2019-07-10 - Shanghai]
[Basel, CH]

By Marc-Andre Lemburg

Python has become the defacto standard tool for many people to write tools, command scripts, smaller applications and even large applications.

On Windows, it is fairly easy to build application bundles using e.g. py2exe, but on Unix, the situation is less obvious, unless you want to rely on OS specific Python distributions, which often require severall 100MB with of installation on the system and are usually customized in distribution specific ways.

Instead of relying on OS installed Python distributions on Unix, our open-source eGenix PyRun provides a more or less complete Python runtime (interpreter and stdlib modules) in a single file, which can be ""installed"" by simply copying the binary to the destination system. The file can be as small as 4.8MB for Python 3.7, by using compressors such as upx.

Due to its size, it's also the perfect Python distribution for Docker containers.

The talk will show how PyRun works, is built, how to customize it to include additional modules and applications.



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2019.europython.eu/events/speaker-release-agreement/
Captions: 
	00:00:05,080 --> 00:00:09,059
[Applause]

00:00:06,859 --> 00:00:11,099
so thanks for the introduction

00:00:09,059 --> 00:00:14,269
can you can you all hear me do I need to

00:00:11,099 --> 00:00:19,620
speak up a bit yeah it's okay good

00:00:14,269 --> 00:00:22,350
right so PI run this is something that I

00:00:19,620 --> 00:00:26,820
do for my day job we're not doing your

00:00:22,350 --> 00:00:29,220
Python so just to give you a little bit

00:00:26,820 --> 00:00:32,129
more background of what I'm what I'm

00:00:29,220 --> 00:00:33,840
actually doing all the time during the

00:00:32,129 --> 00:00:35,820
day so I have my own consulting company

00:00:33,840 --> 00:00:38,489
I'm a CTO of a fin tech company in

00:00:35,820 --> 00:00:40,499
Cyprus I'm a senior software architect

00:00:38,489 --> 00:00:43,559
and I've done lots and lots of things in

00:00:40,499 --> 00:00:45,539
the Python community you can read up all

00:00:43,559 --> 00:00:48,749
on that on my blog I don't want to go

00:00:45,539 --> 00:00:52,460
into too much detail here let's jump

00:00:48,749 --> 00:00:56,039
directly into the talk so what is pi run

00:00:52,460 --> 00:00:57,780
pyrin has a long history it started I

00:00:56,039 --> 00:01:00,859
think I don't really remember it started

00:00:57,780 --> 00:01:05,100
in the late 1990s I think it was 1998

00:01:00,859 --> 00:01:07,259
ish kind of and it started with a

00:01:05,100 --> 00:01:11,159
completely different project the project

00:01:07,259 --> 00:01:13,040
was called MX CGI Python at the time I

00:01:11,159 --> 00:01:15,299
named all my tools and make something

00:01:13,040 --> 00:01:17,880
because of a naming conflict I had with

00:01:15,299 --> 00:01:22,229
the soap Corp packages for MX day time

00:01:17,880 --> 00:01:26,130
and the idea there was that I wanted to

00:01:22,229 --> 00:01:29,159
use Python on the typical FTP website

00:01:26,130 --> 00:01:31,380
hosters that you had at the time so in

00:01:29,159 --> 00:01:34,740
in those days you you couldn't just you

00:01:31,380 --> 00:01:37,350
know upload a script and then run it if

00:01:34,740 --> 00:01:40,590
it was Python you could do that with

00:01:37,350 --> 00:01:44,189
Perl they all supported Perl at the time

00:01:40,590 --> 00:01:46,380
but Python was not really a thing there

00:01:44,189 --> 00:01:49,500
so what I wanted to do is I wanted to

00:01:46,380 --> 00:01:52,409
get you know sneaked Python in on the

00:01:49,500 --> 00:01:54,030
web hostess machines which was kind of

00:01:52,409 --> 00:01:56,130
like hacking you know an executable in

00:01:54,030 --> 00:01:58,140
there and it it worked really well

00:01:56,130 --> 00:02:00,570
because I found that you can upload it

00:01:58,140 --> 00:02:02,009
isn't into the CGI bin directory and

00:02:00,570 --> 00:02:04,109
then you could also upload a shell

00:02:02,009 --> 00:02:06,749
script which then turned your uploaded

00:02:04,109 --> 00:02:09,179
file into an executable so I thought

00:02:06,749 --> 00:02:12,390
okay let's let's try this let's do this

00:02:09,179 --> 00:02:14,060
and and take Python make it really small

00:02:12,390 --> 00:02:17,060
upload it because

00:02:14,060 --> 00:02:20,209
FTP space that at those times was

00:02:17,060 --> 00:02:21,980
expensive and so we we I wanted it to be

00:02:20,209 --> 00:02:26,690
really easy to do so I just created a

00:02:21,980 --> 00:02:28,520
single file out of Python and then

00:02:26,690 --> 00:02:30,950
uploaded it to FTP through the up the

00:02:28,520 --> 00:02:32,900
FTP host I ran the script and then I had

00:02:30,950 --> 00:02:35,620
an executable Python interpreter and I

00:02:32,900 --> 00:02:39,860
could upload my Python script to the CG

00:02:35,620 --> 00:02:42,170
CGI bin directory and run it and I was

00:02:39,860 --> 00:02:45,230
not alone with that with that wish to

00:02:42,170 --> 00:02:46,819
run Python on one of these holsters they

00:02:45,230 --> 00:02:50,380
were actually quite a few other people

00:02:46,819 --> 00:02:50,380
so there is a project sorry about that

00:02:52,299 --> 00:02:57,890
now I just press here so there were

00:02:56,120 --> 00:03:01,010
quite a few contributors who then

00:02:57,890 --> 00:03:03,080
created these single file Python

00:03:01,010 --> 00:03:06,530
binaries for lots and lots of different

00:03:03,080 --> 00:03:08,480
systems at that time there was it was

00:03:06,530 --> 00:03:10,250
not like today where UNIX basically

00:03:08,480 --> 00:03:14,209
means you know you have Linux you have

00:03:10,250 --> 00:03:17,630
maybe FreeBSD and then maybe you have a

00:03:14,209 --> 00:03:18,739
unique system like Mac OS there were

00:03:17,630 --> 00:03:21,799
lots and lots of different systems

00:03:18,739 --> 00:03:25,130
solaris hp-ux or currents of variants of

00:03:21,799 --> 00:03:27,140
that so you you needed to first figure

00:03:25,130 --> 00:03:28,940
out what system was running at the ftp

00:03:27,140 --> 00:03:32,750
hoster and then you could upload the

00:03:28,940 --> 00:03:35,209
correct binary so that lasted a couple

00:03:32,750 --> 00:03:38,030
of years it then pedaled out early in

00:03:35,209 --> 00:03:40,730
the 2000s because then the web host has

00:03:38,030 --> 00:03:44,150
started to support Python and then

00:03:40,730 --> 00:03:47,989
basically I dropped that project now in

00:03:44,150 --> 00:03:50,389
2009 my company was producing a product

00:03:47,989 --> 00:03:53,959
or wanted to produce a product which is

00:03:50,389 --> 00:03:55,910
one part of the product is a is a server

00:03:53,959 --> 00:03:59,239
application that's written in Python

00:03:55,910 --> 00:04:01,790
needs to run on on Linux and I needed

00:03:59,239 --> 00:04:03,920
some way to ship this product to clients

00:04:01,790 --> 00:04:07,100
and so the the problem that I ran into

00:04:03,920 --> 00:04:09,590
was that if I would were just to use

00:04:07,100 --> 00:04:11,540
this the OS based Python installation

00:04:09,590 --> 00:04:13,010
there were so many variants of that OS

00:04:11,540 --> 00:04:14,750
based Python installation that I

00:04:13,010 --> 00:04:16,579
couldn't really support it because I was

00:04:14,750 --> 00:04:19,060
basically a one-man show as a company

00:04:16,579 --> 00:04:22,880
and so I needed something that had a

00:04:19,060 --> 00:04:24,810
stock configuration something that where

00:04:22,880 --> 00:04:28,770
I knew exactly what kind of present

00:04:24,810 --> 00:04:32,669
expect and so I remembered that I had

00:04:28,770 --> 00:04:34,860
this MXC GI Pisan project and I then

00:04:32,669 --> 00:04:40,110
revived it and then turn it into a bit

00:04:34,860 --> 00:04:41,700
more than just a single executable for

00:04:40,110 --> 00:04:44,300
Windows 8 this solution for us was very

00:04:41,700 --> 00:04:47,880
easy we could just use PI 2 XE for this

00:04:44,300 --> 00:04:49,860
so PI run clearly does not run on

00:04:47,880 --> 00:04:54,210
Windows because of this because we don't

00:04:49,860 --> 00:04:56,130
have an eat there but on UNIX you do

00:04:54,210 --> 00:04:59,580
there was no appropriate solution for

00:04:56,130 --> 00:05:01,590
that so I started to do the revive the

00:04:59,580 --> 00:05:04,169
MX CG ipython and I beefed it up a bit

00:05:01,590 --> 00:05:06,060
so I had a business requirement

00:05:04,169 --> 00:05:07,740
you know let's add some more business

00:05:06,060 --> 00:05:09,330
aspects to this so the business

00:05:07,740 --> 00:05:12,900
requirement for me was to create a

00:05:09,330 --> 00:05:15,150
single executable that has the complete

00:05:12,900 --> 00:05:16,860
or more or less to complete Python

00:05:15,150 --> 00:05:19,919
runtime including the standard library

00:05:16,860 --> 00:05:22,169
in a single file so that installing

00:05:19,919 --> 00:05:26,130
Python on a machine literally becomes a

00:05:22,169 --> 00:05:29,190
single copy operation and I wanted it to

00:05:26,130 --> 00:05:31,110
work on Linux on FreeBSD on Mac OS those

00:05:29,190 --> 00:05:33,150
were the ones that I was interested in

00:05:31,110 --> 00:05:36,960
at the time it probably does work on

00:05:33,150 --> 00:05:39,690
other systems as well now how does this

00:05:36,960 --> 00:05:46,050
work how many of you know the freeze

00:05:39,690 --> 00:05:48,440
tool in Python ok I I bet you didn't

00:05:46,050 --> 00:05:51,000
know about this five years ago because

00:05:48,440 --> 00:05:55,440
or maybe let's say ten years ago the

00:05:51,000 --> 00:05:57,030
Python 3 is a bit older now so the the

00:05:55,440 --> 00:06:02,190
freeze tool what it does is it takes

00:05:57,030 --> 00:06:03,990
Python modules it compiles them to

00:06:02,190 --> 00:06:07,740
bytecode and then stores the byte code

00:06:03,990 --> 00:06:10,560
in a C struct or array and then it puts

00:06:07,740 --> 00:06:13,860
everything into into C files and then

00:06:10,560 --> 00:06:18,060
compiles everything as Python C

00:06:13,860 --> 00:06:21,870
extensions and then puts that into into

00:06:18,060 --> 00:06:23,700
a module file that you can then link and

00:06:21,870 --> 00:06:26,940
so this is how you get how you can get a

00:06:23,700 --> 00:06:30,030
Python code into a an executable or a

00:06:26,940 --> 00:06:32,729
library and this tool has been around

00:06:30,030 --> 00:06:35,400
for ages it was written by Guido himself

00:06:32,729 --> 00:06:37,110
later mark Herron extended it to also

00:06:35,400 --> 00:06:40,979
work on Windows

00:06:37,110 --> 00:06:42,930
I don't exactly know why cuido wrote

00:06:40,979 --> 00:06:44,909
this but he probably had some some use

00:06:42,930 --> 00:06:46,710
case for it nowadays it's used for the

00:06:44,909 --> 00:06:49,050
import lip because for the import lip

00:06:46,710 --> 00:06:51,629
you have this bootstrap problem that you

00:06:49,050 --> 00:06:53,129
first need to if you want to run past

00:06:51,629 --> 00:06:54,780
and you first need to get the code from

00:06:53,129 --> 00:06:57,479
somewhere the Python code and import lip

00:06:54,780 --> 00:06:59,580
is written in Python so the the issue is

00:06:57,479 --> 00:07:01,319
that if you want to import something you

00:06:59,580 --> 00:07:03,389
know that the import has to use import

00:07:01,319 --> 00:07:05,729
lip and so you need to somehow figure

00:07:03,389 --> 00:07:09,509
out how to do this and the way it works

00:07:05,729 --> 00:07:11,550
is that is small let's say a core part

00:07:09,509 --> 00:07:15,360
of the import lip is actually frozen

00:07:11,550 --> 00:07:18,330
into Python as well and and this is why

00:07:15,360 --> 00:07:21,090
it's why it started to be used again

00:07:18,330 --> 00:07:22,680
when I started to write pi run the

00:07:21,090 --> 00:07:24,659
freeze tool was not maintained anymore

00:07:22,680 --> 00:07:27,860
so I had to do some fixes to make it

00:07:24,659 --> 00:07:29,879
work again so how does it work

00:07:27,860 --> 00:07:32,009
essentially I wanted to take the sign

00:07:29,879 --> 00:07:35,849
library which is mostly Python modules

00:07:32,009 --> 00:07:38,580
it's also a few C modules so you had two

00:07:35,849 --> 00:07:40,800
things one was to get all the C modules

00:07:38,580 --> 00:07:43,289
the extensions that are being built in

00:07:40,800 --> 00:07:45,150
the standard build process of Python to

00:07:43,289 --> 00:07:46,979
not be compiled as shared libraries but

00:07:45,150 --> 00:07:48,509
instead a static library so that you can

00:07:46,979 --> 00:07:50,520
link them directly into the interpreter

00:07:48,509 --> 00:07:52,289
and then the second step was taking all

00:07:50,520 --> 00:07:54,089
the Python modules that you have in the

00:07:52,289 --> 00:07:55,860
standard library and then convert them

00:07:54,089 --> 00:07:57,599
to C extensions as well and also link

00:07:55,860 --> 00:08:03,419
them statically so you get everything

00:07:57,599 --> 00:08:06,690
into a single file now of course you can

00:08:03,419 --> 00:08:08,669
do this for a single application it's a

00:08:06,690 --> 00:08:10,529
bit tedious to always redo everything

00:08:08,669 --> 00:08:12,900
for every single application that you

00:08:10,529 --> 00:08:14,849
want to run or let's say you want to do

00:08:12,900 --> 00:08:16,139
a release cycle in your in your product

00:08:14,849 --> 00:08:18,930
and you always have to run all these

00:08:16,139 --> 00:08:22,009
things again which I didn't really like

00:08:18,930 --> 00:08:25,620
so what I decided to do is to just take

00:08:22,009 --> 00:08:27,360
the the standard Python turn that into a

00:08:25,620 --> 00:08:29,279
single executable and then wanted to

00:08:27,360 --> 00:08:31,500
ship the application code the Python

00:08:29,279 --> 00:08:34,469
code as a zip module so that you

00:08:31,500 --> 00:08:36,659
essentially get two files the the PI run

00:08:34,469 --> 00:08:40,430
and the executable and then the zip file

00:08:36,659 --> 00:08:44,099
with the packages to python code now

00:08:40,430 --> 00:08:45,959
that was relatively easy to do but then

00:08:44,099 --> 00:08:48,120
I wanted a little bit more because I

00:08:45,959 --> 00:08:50,080
thought that well we're almost there we

00:08:48,120 --> 00:08:51,760
always have almost half something

00:08:50,080 --> 00:08:55,240
which is more or less identical to

00:08:51,760 --> 00:08:56,470
Python and it's tiny and it would be

00:08:55,240 --> 00:08:58,209
really nice to use it pretty much

00:08:56,470 --> 00:09:00,670
everywhere instead of virtual ends for

00:08:58,209 --> 00:09:02,830
example you can just you know you copy

00:09:00,670 --> 00:09:05,470
up your tyrunt and you're done you don't

00:09:02,830 --> 00:09:08,709
have to have a separate installation for

00:09:05,470 --> 00:09:10,690
a virtual end so I thought I'd add the

00:09:08,709 --> 00:09:13,720
the Python command line as well now the

00:09:10,690 --> 00:09:15,730
problem is that the way Python works it

00:09:13,720 --> 00:09:18,220
cannot use the the C command line

00:09:15,730 --> 00:09:20,350
parsing that we have in in Python but

00:09:18,220 --> 00:09:23,140
instead it has to use Python code for

00:09:20,350 --> 00:09:24,910
this so I had to rewrite most of the

00:09:23,140 --> 00:09:29,800
command line parsing that's being done

00:09:24,910 --> 00:09:31,839
in Python in Python and then you know

00:09:29,800 --> 00:09:34,630
again do the same thing wrap everything

00:09:31,839 --> 00:09:36,970
put it in to put it through freeze and

00:09:34,630 --> 00:09:41,430
then put it into the executable so I

00:09:36,970 --> 00:09:41,430
managed to do that okay that's very nice

00:09:41,730 --> 00:09:49,420
I managed to do that it is a bit slower

00:09:47,410 --> 00:09:51,519
of course because it's Python running to

00:09:49,420 --> 00:09:54,610
do the command line parsing but there's

00:09:51,519 --> 00:09:57,100
a trade-off there because when importing

00:09:54,610 --> 00:09:59,410
things from the C extensions that freeze

00:09:57,100 --> 00:10:01,240
builds the import is a lot faster than

00:09:59,410 --> 00:10:02,290
going to the fried system because it

00:10:01,240 --> 00:10:05,079
doesn't have to go to the file system

00:10:02,290 --> 00:10:06,839
file I always always very slow if you

00:10:05,079 --> 00:10:10,750
load everything into Ram is much faster

00:10:06,839 --> 00:10:13,060
so I could make it a bit a little bit

00:10:10,750 --> 00:10:15,240
slower then gain all the flexibility and

00:10:13,060 --> 00:10:17,079
then have it work and it even supports

00:10:15,240 --> 00:10:19,149
interactive huse know so you can

00:10:17,079 --> 00:10:21,130
actually start it and it comes up with a

00:10:19,149 --> 00:10:24,370
command prompt again so you can use it

00:10:21,130 --> 00:10:26,709
just as regular Python so this is

00:10:24,370 --> 00:10:29,380
essentially where I am so we now I have

00:10:26,709 --> 00:10:32,560
a PI run it's open source it's a free

00:10:29,380 --> 00:10:34,060
more nests drop-in for a standard Python

00:10:32,560 --> 00:10:35,740
runtime it doesn't use hundreds of

00:10:34,060 --> 00:10:38,490
megabytes in the file system you don't

00:10:35,740 --> 00:10:42,100
have to install it anywhere

00:10:38,490 --> 00:10:47,829
it runs on or let's say it works with

00:10:42,100 --> 00:10:50,529
Python 2.7 3.6 and 3.3 dot seven now it

00:10:47,829 --> 00:10:52,209
also supports lots of older versions so

00:10:50,529 --> 00:10:54,699
to that force the oldest versions

00:10:52,209 --> 00:10:56,320
version that I used to support not in

00:10:54,699 --> 00:10:58,300
the current version of Pi run but in in

00:10:56,320 --> 00:11:00,040
previous ones and it runs on all the

00:10:58,300 --> 00:11:02,740
platforms that I wanted

00:11:00,040 --> 00:11:07,560
to have it run on the executable size is

00:11:02,740 --> 00:11:10,840
between 3.7 megabytes for Python 2.7 and

00:11:07,560 --> 00:11:12,550
4.8 megabytes of course I'm cheating a

00:11:10,840 --> 00:11:14,470
bit I'm using upx compressed for this

00:11:12,550 --> 00:11:18,790
but anyway it still works

00:11:14,470 --> 00:11:21,370
it's the startup time is a bit slower so

00:11:18,790 --> 00:11:25,210
this is what it looks like and because I

00:11:21,370 --> 00:11:32,050
wanted to not only talk but only show

00:11:25,210 --> 00:11:36,580
some stuff so this is the project let's

00:11:32,050 --> 00:11:41,350
go here for example for 2.7 in case

00:11:36,580 --> 00:11:42,600
anyone is still interested in that so

00:11:41,350 --> 00:11:48,400
here you go

00:11:42,600 --> 00:11:52,840
3.7 3.7 can you read that is that should

00:11:48,400 --> 00:11:55,270
I make it bigger no it's okay good so

00:11:52,840 --> 00:11:57,820
just to demonstrate how this works let

00:11:55,270 --> 00:12:01,630
me just do this and you can actually see

00:11:57,820 --> 00:12:07,960
it so this is the upx version where is

00:12:01,630 --> 00:12:10,000
it 2.7 upx so this is what you get when

00:12:07,960 --> 00:12:11,410
you when you run it and it works you

00:12:10,000 --> 00:12:14,920
know in standard way you can import

00:12:11,410 --> 00:12:16,960
stuff you can you can do all kinds of

00:12:14,920 --> 00:12:19,090
things you can you know basically it's a

00:12:16,960 --> 00:12:27,600
standard Python you can also run a pip

00:12:19,090 --> 00:12:29,650
with it so I can do like this let's see

00:12:27,600 --> 00:12:34,800
actually let me see whether it's already

00:12:29,650 --> 00:12:37,510
installed it is already installed so I

00:12:34,800 --> 00:12:39,580
can install pip I can install setup

00:12:37,510 --> 00:12:43,150
tools and I can I can then also run pip

00:12:39,580 --> 00:12:49,450
the pip will then use this is a bit

00:12:43,150 --> 00:12:56,010
annoying I can then you know install

00:12:49,450 --> 00:12:56,010
something let's say let's say this one

00:13:01,119 --> 00:13:07,149
okay installed something and then I can

00:13:03,849 --> 00:13:12,789
go here and I can I can then run this

00:13:07,149 --> 00:13:21,099
this is a game of life in Python so that

00:13:12,789 --> 00:13:28,019
was 2.7 let's go to 3.7 3.7 is a little

00:13:21,099 --> 00:13:28,019
bit I just turn this off this not good

00:13:33,950 --> 00:13:41,240
so you can see here down here 4.7

00:13:38,600 --> 00:13:43,220
megabytes the original one the

00:13:41,240 --> 00:13:45,980
uncompressed one is fourteen point four

00:13:43,220 --> 00:13:47,810
megabytes which also is not that big but

00:13:45,980 --> 00:13:51,620
it's amazing that you can actually

00:13:47,810 --> 00:13:53,570
compress it down to that size and it

00:13:51,620 --> 00:13:57,699
works in the same way as the 2.7 one I

00:13:53,570 --> 00:13:57,699
just showed so let's go back here

00:14:07,950 --> 00:14:13,560
by the way if you have questions just

00:14:09,660 --> 00:14:16,769
feel free to ask her so we I can just

00:14:13,560 --> 00:14:19,200
answer them right away these are some

00:14:16,769 --> 00:14:21,269
use cases of a Jenks pyrin I'm pretty

00:14:19,200 --> 00:14:23,610
sure that there are lots more these are

00:14:21,269 --> 00:14:25,680
mostly the ones that I I came out with I

00:14:23,610 --> 00:14:28,949
know there are other projects that try

00:14:25,680 --> 00:14:30,570
to do similar things and they are better

00:14:28,949 --> 00:14:33,660
in marketing and I am so they come up

00:14:30,570 --> 00:14:36,029
with more use cases but the one set with

00:14:33,660 --> 00:14:37,470
that we really care about is that we are

00:14:36,029 --> 00:14:38,790
independent of the OS Python

00:14:37,470 --> 00:14:39,089
installation that's the most important

00:14:38,790 --> 00:14:42,029
one

00:14:39,089 --> 00:14:46,320
we want something small to easily ship

00:14:42,029 --> 00:14:48,750
to two clients we want to easily make it

00:14:46,320 --> 00:14:52,050
available as a download without having

00:14:48,750 --> 00:14:54,269
too much bandwidth use it's extremely

00:14:52,050 --> 00:14:56,250
good for darker containers because for

00:14:54,269 --> 00:14:57,930
darker Danis unit because it's so small

00:14:56,250 --> 00:15:00,240
you can just easily put it into a

00:14:57,930 --> 00:15:01,949
container image and then you the loading

00:15:00,240 --> 00:15:03,899
the image is very fast it's much faster

00:15:01,949 --> 00:15:06,870
than having a regular Python

00:15:03,899 --> 00:15:09,329
installation there and it's very easy to

00:15:06,870 --> 00:15:11,959
build single app applications out of it

00:15:09,329 --> 00:15:15,089
I'm gonna go into that detail some more

00:15:11,959 --> 00:15:17,850
because what I've added is integrated

00:15:15,089 --> 00:15:20,519
zip file support for pi run and the way

00:15:17,850 --> 00:15:24,390
it works is very simple you create your

00:15:20,519 --> 00:15:26,430
view Pisan application very important is

00:15:24,390 --> 00:15:28,140
you have to add add under main module

00:15:26,430 --> 00:15:33,839
how many of you know what done domain

00:15:28,140 --> 00:15:35,459
does some of them okay so the way it

00:15:33,839 --> 00:15:38,040
works is when you when you have a zip

00:15:35,459 --> 00:15:41,220
module and you have Python run that zip

00:15:38,040 --> 00:15:43,560
module then if it finds a done domain

00:15:41,220 --> 00:15:45,390
module at the top level of that zip file

00:15:43,560 --> 00:15:47,579
it will execute that so it works

00:15:45,390 --> 00:15:51,390
basically like what you have with the

00:15:47,579 --> 00:15:53,100
with the typical the the main execution

00:15:51,390 --> 00:15:56,220
part that you put into python scripts

00:15:53,100 --> 00:15:57,870
and so if you have an application like

00:15:56,220 --> 00:16:00,240
that if you have if you have a script

00:15:57,870 --> 00:16:04,800
and you just add this dunder main module

00:16:00,240 --> 00:16:07,649
to your zip file you then concatenate pi

00:16:04,800 --> 00:16:10,260
run that zip file you produce a new file

00:16:07,649 --> 00:16:12,510
let's say hello you make it executable

00:16:10,260 --> 00:16:15,750
and you're done so you don't need

00:16:12,510 --> 00:16:18,060
compilation anymore so this this

00:16:15,750 --> 00:16:20,270
basically you made my day because I did

00:16:18,060 --> 00:16:23,570
not have to send the files

00:16:20,270 --> 00:16:25,370
anymore for the Lexus a application

00:16:23,570 --> 00:16:29,630
updates I could just create a new

00:16:25,370 --> 00:16:32,740
executable and send that around and just

00:16:29,630 --> 00:16:40,370
so to show you how that works

00:16:32,740 --> 00:16:42,320
let me find so I prepared a little

00:16:40,370 --> 00:16:46,520
something here so you can see there

00:16:42,320 --> 00:16:49,520
there's the main module it's just a very

00:16:46,520 --> 00:16:51,620
simple hello world right and then you

00:16:49,520 --> 00:16:55,040
have the I put that into a hello that

00:16:51,620 --> 00:17:04,360
fire actually I don't want a hands up it

00:16:55,040 --> 00:17:07,870
I just want to read it forget it it's

00:17:04,360 --> 00:17:07,870
you just do that again

00:17:08,380 --> 00:17:16,310
so I put the done domain in there right

00:17:12,380 --> 00:17:19,550
and then I concatenate the two so I can

00:17:16,310 --> 00:17:22,490
I can choose the slightly bigger one the

00:17:19,550 --> 00:17:24,200
40 megabyte one which is faster to load

00:17:22,490 --> 00:17:29,320
or I can use the upx one which is

00:17:24,200 --> 00:17:32,170
smaller to load so let's use the upx one

00:17:29,320 --> 00:17:35,900
and i've simply put the the hello

00:17:32,170 --> 00:17:41,450
zip behind that and i you know create

00:17:35,900 --> 00:17:43,960
this one hello new px let me make it

00:17:41,450 --> 00:17:43,960
executable

00:17:47,990 --> 00:18:01,100
and you Rhenish there you go so as you

00:17:55,010 --> 00:18:03,440
can see now thanks so it's like magic

00:18:01,100 --> 00:18:06,490
huh it's like you know you turn 100

00:18:03,440 --> 00:18:11,000
megabytes into footprint seven megabytes

00:18:06,490 --> 00:18:13,159
yeah so it's it's really really easy to

00:18:11,000 --> 00:18:15,500
create these single file perhaps now I'm

00:18:13,159 --> 00:18:16,730
basically these three steps or two steps

00:18:15,500 --> 00:18:18,529
that I have here I'm probably going to

00:18:16,730 --> 00:18:21,230
turn into some shell script or something

00:18:18,529 --> 00:18:23,440
as well so that you you can just run

00:18:21,230 --> 00:18:23,440
that

00:18:27,909 --> 00:18:34,220
okay so customizing hi run of course

00:18:32,480 --> 00:18:36,049
this this was deal like the easy way to

00:18:34,220 --> 00:18:37,610
do things you just get the PI run for

00:18:36,049 --> 00:18:41,179
your platform maybe you have to compile

00:18:37,610 --> 00:18:43,460
it yourself normally we provide binaries

00:18:41,179 --> 00:18:45,529
for these we haven't done that in a

00:18:43,460 --> 00:18:47,029
while because the build from that we had

00:18:45,529 --> 00:18:49,820
basically crashed and they haven't had

00:18:47,029 --> 00:18:53,690
time to refix it and then get it running

00:18:49,820 --> 00:18:55,159
again so the nice thing about this is

00:18:53,690 --> 00:18:57,409
that you don't actually have to be a

00:18:55,159 --> 00:19:00,140
core developer to do this it's not

00:18:57,409 --> 00:19:02,320
really if you know the right places to

00:19:00,140 --> 00:19:05,630
fix in the right places to tweak then

00:19:02,320 --> 00:19:08,779
it's it's not that hard so of course you

00:19:05,630 --> 00:19:14,960
you should know a bit about how to

00:19:08,779 --> 00:19:17,299
freeze works we I put this I put a

00:19:14,960 --> 00:19:21,230
special file in here this pi run dunder

00:19:17,299 --> 00:19:24,559
ex extras dot py in that file you just

00:19:21,230 --> 00:19:26,330
import whatever packages you want to

00:19:24,559 --> 00:19:29,149
have and then freeze will automatically

00:19:26,330 --> 00:19:32,299
find them for you and then integrate

00:19:29,149 --> 00:19:36,830
them into the package so it's very easy

00:19:32,299 --> 00:19:39,440
to add new modules it's a bit harder to

00:19:36,830 --> 00:19:41,360
exclude modules so let's say if let's

00:19:39,440 --> 00:19:43,279
say you have a Python package that has

00:19:41,360 --> 00:19:45,200
test modules and you don't want to ship

00:19:43,279 --> 00:19:47,750
the test modules together with your

00:19:45,200 --> 00:19:49,490
product then you typically want to

00:19:47,750 --> 00:19:50,960
exclude that and in order to X two

00:19:49,490 --> 00:19:53,929
things you actually have to go into the

00:19:50,960 --> 00:19:56,389
make file into the excludes variable and

00:19:53,929 --> 00:19:57,950
put put your particular what you ever

00:19:56,389 --> 00:19:59,990
would you want to exclude let's say your

00:19:57,950 --> 00:20:01,610
test subjects clewd

00:19:59,990 --> 00:20:04,190
so it doesn't get integrated into the

00:20:01,610 --> 00:20:06,350
package and then the next thing is if

00:20:04,190 --> 00:20:09,170
the next step let's say is if you want

00:20:06,350 --> 00:20:11,240
to add custom C extensions that you have

00:20:09,170 --> 00:20:14,570
or maybe you have dependencies that have

00:20:11,240 --> 00:20:17,690
C extensions for those of course you

00:20:14,570 --> 00:20:20,660
have to tell Python when it compiles to

00:20:17,690 --> 00:20:24,200
add those to the executable that comes

00:20:20,660 --> 00:20:27,950
out in order to that you you have to use

00:20:24,200 --> 00:20:30,770
the module setup how many of you know or

00:20:27,950 --> 00:20:35,330
have ever edited this file in a Python

00:20:30,770 --> 00:20:41,950
installation when compiling it extremely

00:20:35,330 --> 00:20:45,020
few okay so here's some fun so let's say

00:20:41,950 --> 00:20:51,610
what's the name again let's say we go

00:20:45,020 --> 00:20:55,340
here so this is a standard

00:20:51,610 --> 00:20:57,140
implementation at distribution of Python

00:20:55,340 --> 00:20:59,450
it's it has a few patches because I need

00:20:57,140 --> 00:21:04,700
to do a few tweaks for pi run but not

00:20:59,450 --> 00:21:06,710
really that much and then the way that

00:21:04,700 --> 00:21:08,540
that Python determines whether to

00:21:06,710 --> 00:21:12,740
compile any of these modules that you

00:21:08,540 --> 00:21:14,179
see here into the into the executable

00:21:12,740 --> 00:21:18,340
that you're building or into a shared

00:21:14,179 --> 00:21:20,929
module it looks into the setup file

00:21:18,340 --> 00:21:24,290
which looks like this this is an

00:21:20,929 --> 00:21:28,010
extremely old file it's so references to

00:21:24,290 --> 00:21:29,510
make fire pre logic that Python used in

00:21:28,010 --> 00:21:31,970
the very early days to build C

00:21:29,510 --> 00:21:33,559
extensions so in the very early days you

00:21:31,970 --> 00:21:35,900
did not have any some anything like

00:21:33,559 --> 00:21:37,460
these two tools you had to basically do

00:21:35,900 --> 00:21:40,820
everything yourself you use this make

00:21:37,460 --> 00:21:43,040
fire pre in concept and then you added

00:21:40,820 --> 00:21:45,559
your configuration into one of these

00:21:43,040 --> 00:21:48,590
setup files and and this would then make

00:21:45,559 --> 00:21:52,429
Python compile your your extension into

00:21:48,590 --> 00:21:54,190
an executable or a shared library and

00:21:52,429 --> 00:21:59,210
then you could put it into your package

00:21:54,190 --> 00:22:00,830
so there's lots of description here you

00:21:59,210 --> 00:22:03,380
know you have it looks a lot like a make

00:22:00,830 --> 00:22:05,270
file when you come down to this section

00:22:03,380 --> 00:22:09,500
this section down here tells python

00:22:05,270 --> 00:22:12,980
which modules to actually integrate into

00:22:09,500 --> 00:22:15,500
the into the executable

00:22:12,980 --> 00:22:17,950
and then there is let me see what I can

00:22:15,500 --> 00:22:17,950
find it

00:22:23,360 --> 00:22:34,200
it's here so all these modules that you

00:22:30,150 --> 00:22:36,500
see here those are statically compiled

00:22:34,200 --> 00:22:39,360
and put into the right here it is

00:22:36,500 --> 00:22:41,430
statically compiled into into Python and

00:22:39,360 --> 00:22:44,340
everything that comes below this this

00:22:41,430 --> 00:22:47,820
shared indicator in here this will then

00:22:44,340 --> 00:22:49,890
be compiled into a shared library and as

00:22:47,820 --> 00:22:51,960
you can see here I commented out that

00:22:49,890 --> 00:22:54,540
shared so everything that comes below is

00:22:51,960 --> 00:22:56,490
still going to be compared into the the

00:22:54,540 --> 00:22:59,790
executable and because that's what I

00:22:56,490 --> 00:23:01,830
wanted and as you can see here these are

00:22:59,790 --> 00:23:04,410
just you know see modules that python

00:23:01,830 --> 00:23:07,470
sonnet lip uses and then I had to make a

00:23:04,410 --> 00:23:10,590
few fixes because I wanted to add some

00:23:07,470 --> 00:23:14,910
of the modules that typically don't get

00:23:10,590 --> 00:23:19,280
added as a static version into into

00:23:14,910 --> 00:23:21,840
Python this file is not being let's say

00:23:19,280 --> 00:23:24,450
it's not well maintained anymore

00:23:21,840 --> 00:23:26,180
because normally nowadays everything

00:23:24,450 --> 00:23:29,160
gets gets compiled as a shared library

00:23:26,180 --> 00:23:31,470
and so some parts are missing like the

00:23:29,160 --> 00:23:34,620
the the various char modules here for

00:23:31,470 --> 00:23:37,080
example they were not not in that file I

00:23:34,620 --> 00:23:39,120
had to add them some things are also

00:23:37,080 --> 00:23:44,430
remove for example TK inter I don't use

00:23:39,120 --> 00:23:46,140
so I did not put that in and then if you

00:23:44,430 --> 00:23:50,340
want to add other stuff then you can

00:23:46,140 --> 00:23:51,780
just go down here and just append it so

00:23:50,340 --> 00:23:54,690
the way it works is you just have to

00:23:51,780 --> 00:23:56,610
tell Python where the C code is whether

00:23:54,690 --> 00:23:58,590
you need any parameters like for example

00:23:56,610 --> 00:24:01,440
here this is the these are the things

00:23:58,590 --> 00:24:03,750
that you have to do for sequel light and

00:24:01,440 --> 00:24:06,630
then you just add it to the setup file

00:24:03,750 --> 00:24:09,750
and essentially you can just let them

00:24:06,630 --> 00:24:15,270
make run and everything works out by

00:24:09,750 --> 00:24:19,740
itself so that was a short tour through

00:24:15,270 --> 00:24:21,150
the setup forum I don't think I have

00:24:19,740 --> 00:24:25,620
time to actually show the complete

00:24:21,150 --> 00:24:27,150
compilation but let me just maybe go

00:24:25,620 --> 00:24:31,440
through the changes that I had to make

00:24:27,150 --> 00:24:33,979
to go from 3.6 to 3.7 and this is

00:24:31,440 --> 00:24:37,950
interesting I don't know is Victor here

00:24:33,979 --> 00:24:40,879
no Victor Stenger heap he made some

00:24:37,950 --> 00:24:44,129
changes between those two releases and

00:24:40,879 --> 00:24:45,419
because the import logic in in pison

00:24:44,129 --> 00:24:49,070
sometimes changes from release to

00:24:45,419 --> 00:24:51,659
release or their new new ways of

00:24:49,070 --> 00:24:53,909
integrated into the Python build process

00:24:51,659 --> 00:24:55,710
of how to configure certain things you

00:24:53,909 --> 00:24:59,190
always have to touch the the code base a

00:24:55,710 --> 00:25:04,039
bit there was a lot to do from 3.5 to

00:24:59,190 --> 00:25:08,129
3.6 the the path from 3.6 to 3.7 was

00:25:04,039 --> 00:25:09,720
basically just a few hours work this is

00:25:08,129 --> 00:25:12,179
just to give you an idea of how how you

00:25:09,720 --> 00:25:13,529
import PI run to new Python versions

00:25:12,179 --> 00:25:15,090
it's actually quite easy you just take

00:25:13,529 --> 00:25:16,440
what's there already for the existing

00:25:15,090 --> 00:25:19,799
Python version and then you have to

00:25:16,440 --> 00:25:24,269
tweak the patches a bit

00:25:19,799 --> 00:25:26,879
you have to sorry you have to then adapt

00:25:24,269 --> 00:25:29,940
your setup a bit because new models get

00:25:26,879 --> 00:25:31,619
added of course others may need some

00:25:29,940 --> 00:25:35,159
tweaks in terms of definitions that you

00:25:31,619 --> 00:25:37,259
have to add and then basically things

00:25:35,159 --> 00:25:39,599
just work and then the freeze tool

00:25:37,259 --> 00:25:41,999
itself also sometimes need some fixes

00:25:39,599 --> 00:25:44,729
because what I did like I said I had to

00:25:41,999 --> 00:25:47,789
tweak freeze to make it work with Python

00:25:44,729 --> 00:25:50,159
again and and what I did is I basically

00:25:47,789 --> 00:25:52,109
copied the freeze tool into PI run into

00:25:50,159 --> 00:25:56,789
the source code package so that I can

00:25:52,109 --> 00:25:58,590
apply changes to that as well and I had

00:25:56,789 --> 00:26:00,929
to make some some fixes there as well

00:25:58,590 --> 00:26:05,309
and that was done I was done and

00:26:00,929 --> 00:26:08,639
everything worked so this is where you

00:26:05,309 --> 00:26:10,470
can get PI run like I said at the source

00:26:08,639 --> 00:26:13,710
of the released source and binary

00:26:10,470 --> 00:26:17,700
versions are a bit a bit older I think

00:26:13,710 --> 00:26:20,909
the release ones only supports 3.5 as

00:26:17,700 --> 00:26:22,499
the latest version and then 2.7 what I

00:26:20,909 --> 00:26:25,109
will do is I will put the current

00:26:22,499 --> 00:26:27,179
version that I have already working I

00:26:25,109 --> 00:26:28,679
will put that up on github so you can

00:26:27,179 --> 00:26:31,379
download the sources and then compile it

00:26:28,679 --> 00:26:35,970
yourself compiling it yourself is pretty

00:26:31,379 --> 00:26:37,470
pretty easy it comes the package comes

00:26:35,970 --> 00:26:39,210
with the make file it comes with some

00:26:37,470 --> 00:26:41,220
documentation you just have to run make

00:26:39,210 --> 00:26:44,159
make distribution and then basically

00:26:41,220 --> 00:26:45,869
you're done everything it should then be

00:26:44,159 --> 00:26:46,860
done for you and then you can just pick

00:26:45,869 --> 00:26:49,710
up the

00:26:46,860 --> 00:26:52,200
the release package of Pi run from the

00:26:49,710 --> 00:26:57,930
distribution directory and then you can

00:26:52,200 --> 00:27:00,230
use that yep that's it thank you for

00:26:57,930 --> 00:27:00,230
your attention

00:27:03,730 --> 00:27:09,899
[Applause]

00:27:06,710 --> 00:27:11,999
we do have time for a couple of

00:27:09,899 --> 00:27:17,489
questions there is a microphone there

00:27:11,999 --> 00:27:19,889
you came just ask away for the talk I

00:27:17,489 --> 00:27:25,470
have a question is it possible to use PI

00:27:19,889 --> 00:27:28,039
rant and bat Python in binaries or if

00:27:25,470 --> 00:27:30,869
not how much work would that be to

00:27:28,039 --> 00:27:35,309
create a static statically linked

00:27:30,869 --> 00:27:37,619
library to be used by executables you

00:27:35,309 --> 00:27:40,889
want to take PI run and put it into some

00:27:37,619 --> 00:27:44,460
other executable I would like to have a

00:27:40,889 --> 00:27:46,229
library that I can then use to embed

00:27:44,460 --> 00:27:49,019
Python me for example for example in AC

00:27:46,229 --> 00:27:51,950
program and so that library doesn't have

00:27:49,019 --> 00:27:55,440
any dependencies external dependencies

00:27:51,950 --> 00:27:59,159
that would require some work but it's

00:27:55,440 --> 00:28:00,299
possible yes definitely so essentially

00:27:59,159 --> 00:28:02,639
what you have to do is you have to

00:28:00,299 --> 00:28:07,979
basically you have to change the way

00:28:02,639 --> 00:28:09,359
that the main the main function works in

00:28:07,979 --> 00:28:11,669
environments where you have to remove

00:28:09,359 --> 00:28:13,139
that and turn it into a library but it's

00:28:11,669 --> 00:28:17,489
suppose you could do the same trick with

00:28:13,139 --> 00:28:20,159
a lip Python let's say or lip hi run and

00:28:17,489 --> 00:28:21,869
then get everything integrated you'd

00:28:20,159 --> 00:28:24,259
probably have to define some some entry

00:28:21,869 --> 00:28:26,489
points there for the library subdue ones

00:28:24,259 --> 00:28:36,710
to get everything working but it should

00:28:26,489 --> 00:28:43,429
be possible yes okay thank you question

00:28:36,710 --> 00:28:43,429
anybody but I have a question

00:28:43,740 --> 00:28:54,210
there is a question there from the

00:28:45,149 --> 00:28:56,669
audience oops thank you

00:28:54,210 --> 00:28:59,010
thanks for the talk I'm just just

00:28:56,669 --> 00:29:00,929
wondering with this barand it it looks

00:28:59,010 --> 00:29:02,760
great and everything but I've just

00:29:00,929 --> 00:29:04,679
wondering whether there are there any

00:29:02,760 --> 00:29:06,270
limitations some features fights and

00:29:04,679 --> 00:29:08,460
features that you cannot use it with it

00:29:06,270 --> 00:29:10,370
I mean are there any downsides or is it

00:29:08,460 --> 00:29:13,830
a silver bullet for all the problems

00:29:10,370 --> 00:29:16,500
there is there's one downside with this

00:29:13,830 --> 00:29:18,120
whole approach and this is also why for

00:29:16,500 --> 00:29:21,659
example the the Python tests we does not

00:29:18,120 --> 00:29:25,110
fully run which is that some packages

00:29:21,659 --> 00:29:27,270
they put extra files let's say let's say

00:29:25,110 --> 00:29:31,049
text files or symbol files or whatever

00:29:27,270 --> 00:29:32,880
into the packages themselves and because

00:29:31,049 --> 00:29:36,179
of the way that those packages are

00:29:32,880 --> 00:29:37,710
written they try to actually access the

00:29:36,179 --> 00:29:39,870
file system to get to that particular

00:29:37,710 --> 00:29:42,000
extra fry that they have put into that

00:29:39,870 --> 00:29:43,500
package and of course pyrin doesn't have

00:29:42,000 --> 00:29:46,320
a file system it doesn't also does an

00:29:43,500 --> 00:29:49,740
emulator file system so the the files

00:29:46,320 --> 00:29:51,480
are not available I had that issue with

00:29:49,740 --> 00:29:53,580
PI run because for example the Python

00:29:51,480 --> 00:29:56,940
grammar is one of those files it gets

00:29:53,580 --> 00:29:59,090
put into a special file that it gets

00:29:56,940 --> 00:30:01,770
installed in the in the file system and

00:29:59,090 --> 00:30:03,809
in order to make that file available I

00:30:01,770 --> 00:30:05,700
had to basically take the file and in

00:30:03,809 --> 00:30:07,559
the process of building PI run I had to

00:30:05,700 --> 00:30:09,690
integrate it into PI run as well and

00:30:07,559 --> 00:30:11,720
then you know write some extra code to

00:30:09,690 --> 00:30:14,850
make it available via the standard API

00:30:11,720 --> 00:30:17,580
inside PI run so I had to do some of

00:30:14,850 --> 00:30:20,100
those tweaks I only did those tweaks for

00:30:17,580 --> 00:30:22,260
things that Python itself needed if you

00:30:20,100 --> 00:30:23,940
want to if you have something like that

00:30:22,260 --> 00:30:27,419
and you would have to do those tweaks

00:30:23,940 --> 00:30:29,340
yourself but that's that's actually

00:30:27,419 --> 00:30:33,440
pretty much the only limitation I I know

00:30:29,340 --> 00:30:37,140
of the I could imagine that some

00:30:33,440 --> 00:30:39,750
packages that have external C extensions

00:30:37,140 --> 00:30:43,350
that they might be hard to compile it to

00:30:39,750 --> 00:30:45,809
a static version because sometimes they

00:30:43,350 --> 00:30:48,270
the way that those shared libraries are

00:30:45,809 --> 00:30:50,450
built is very complex in and if you want

00:30:48,270 --> 00:30:53,330
to turn everything into a static library

00:30:50,450 --> 00:30:55,590
then you can you can run into problems

00:30:53,330 --> 00:30:57,320
but it's you know it's just a matter of

00:30:55,590 --> 00:31:02,640
effort you can get this working

00:30:57,320 --> 00:31:05,570
pretty much in any case alright let's

00:31:02,640 --> 00:31:05,570

YouTube URL: https://www.youtube.com/watch?v=JdorsyCim5U


