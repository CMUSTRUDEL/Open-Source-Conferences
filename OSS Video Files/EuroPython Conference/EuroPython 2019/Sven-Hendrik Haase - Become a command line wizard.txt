Title: Sven-Hendrik Haase - Become a command line wizard
Publication date: 2019-09-03
Playlist: EuroPython 2019
Description: 
	"Become a command line wizard
[EuroPython 2019 - Talk - 2019-07-10 - Boston]
[Basel, CH]

By Sven-Hendrik Haase

There are many modern terminal tools with vastly improved user experiences as compared to their traditional alternatives. This talk aims to show off some of those modern terminal tools and compare them side by side with the traditional ones.

Python is not only used by software developers with fancy IDEs but also by DevOps engineers, administrators, and on remote development machines where using a GUI is impractical. Therefore, many people are stuck with a terminal interface only and have to use tools like vim, grep, find, wc, cloc, less and many others to explore their way around their Python programs.

However, thanks to the advent of many new and improved tools, we can do many of the same tasks better, faster and with nicer ergonomics.

This talk will show off effective use of vim as an IDE with completions and linting provided by LSP, fd (instead of find) for finding files, ripgrep (instead of grep) for searching strings, tokei (instead of cloc) for counting lines of code, bat (instead of cat) for looking at files, hyperfine for microbenchmarking, httpie (instead of curl) for making HTTP requests, sd (instead of sed) for text replacement.

This talk should make terminal work more approachable for all attendees by showing off how to do some everyday tasks on the terminal.



License: This video is licensed under the CC BY-NC-SA 3.0 license: https://creativecommons.org/licenses/by-nc-sa/3.0/
Please see our speaker release agreement for details: https://ep2019.europython.eu/events/speaker-release-agreement/
Captions: 
	00:00:02,680 --> 00:00:10,920
so you want to become a comment on

00:00:05,680 --> 00:00:15,340
wizard huh yes okay so yeah this talk

00:00:10,920 --> 00:00:21,730
basically it's gonna be sorry

00:00:15,340 --> 00:00:22,630
too quiet it's not hello oh there we go

00:00:21,730 --> 00:00:25,330
okay

00:00:22,630 --> 00:00:26,980
I'm sorry it's a bit I'm quite a tall

00:00:25,330 --> 00:00:30,009
person so I gonna have to leave for a

00:00:26,980 --> 00:00:32,680
little bit so yes in this talk I'm gonna

00:00:30,009 --> 00:00:34,990
show you quite a few new command-line

00:00:32,680 --> 00:00:38,470
tools and in fact I'm gonna give this

00:00:34,990 --> 00:00:41,470
talk on the command line and the

00:00:38,470 --> 00:00:43,630
takeaway is supposed to be at least that

00:00:41,470 --> 00:00:45,340
you know some new tools at the end of

00:00:43,630 --> 00:00:47,230
this and you basically don't have to

00:00:45,340 --> 00:00:49,480
know anything before that like you don't

00:00:47,230 --> 00:00:54,940
even have to know how to get around any

00:00:49,480 --> 00:00:57,010
kind of UNIX system and and one thing to

00:00:54,940 --> 00:00:58,240
note is that even though I'm gonna be

00:00:57,010 --> 00:01:01,210
presenting many tools and many

00:00:58,240 --> 00:01:03,340
alternatives to well-known tools this is

00:01:01,210 --> 00:01:04,930
not meant to be like that you have to

00:01:03,340 --> 00:01:07,300
replace your old ways of doing things

00:01:04,930 --> 00:01:09,310
it's just like that you can supplant

00:01:07,300 --> 00:01:11,740
supplant your current knowledge with

00:01:09,310 --> 00:01:13,780
some new tools and these tools are

00:01:11,740 --> 00:01:15,490
mainly meant to be for interactive usage

00:01:13,780 --> 00:01:16,960
and not so much for script usage for

00:01:15,490 --> 00:01:18,550
script users you should always kind of

00:01:16,960 --> 00:01:20,800
use the old tools that you're used to

00:01:18,550 --> 00:01:22,270
because they are most likely not going

00:01:20,800 --> 00:01:24,640
to be available on the systems that

00:01:22,270 --> 00:01:27,520
you're gonna be scripting for so with

00:01:24,640 --> 00:01:30,340
that said let's talk about me just a

00:01:27,520 --> 00:01:32,770
really quick so yeah I'm a command-line

00:01:30,340 --> 00:01:36,970
enthusiast as you might have figured I'm

00:01:32,770 --> 00:01:42,310
an Arch Linux developer yeah

00:01:36,970 --> 00:01:44,440
and I use arch by the way and yeah and I

00:01:42,310 --> 00:01:51,070
work as a deaf was consultant freelance

00:01:44,440 --> 00:01:53,170
so why even bother sorry

00:01:51,070 --> 00:01:55,799
it was meant to be like this why even

00:01:53,170 --> 00:01:58,360
bother with the command line

00:01:55,799 --> 00:02:00,640
yeah so anyway so command line is not

00:01:58,360 --> 00:02:03,340
gonna go away it's been here for like

00:02:00,640 --> 00:02:05,820
many decades it's gonna be here for some

00:02:03,340 --> 00:02:08,709
more decades might as well embrace it

00:02:05,820 --> 00:02:10,060
it's efficient for many kinds of tasks

00:02:08,709 --> 00:02:11,950
it's not so efficient for other kinds of

00:02:10,060 --> 00:02:13,690
tasks but the you know you should pick

00:02:11,950 --> 00:02:15,580
the right kinds of tests to use the

00:02:13,690 --> 00:02:16,810
command line for right or or that pick

00:02:15,580 --> 00:02:20,260
the command line for the right kind of

00:02:16,810 --> 00:02:22,390
tasks and sometimes you just can't use a

00:02:20,260 --> 00:02:24,160
GUI right sometimes you walk into some

00:02:22,390 --> 00:02:26,819
service now me working as DevOps I

00:02:24,160 --> 00:02:28,959
logged into many servers a day and

00:02:26,819 --> 00:02:31,269
basically I already got to know my tools

00:02:28,959 --> 00:02:35,319
around that and you can't always have an

00:02:31,269 --> 00:02:38,200
excerpt very not possible and yeah text

00:02:35,319 --> 00:02:40,720
is still the only truly universal

00:02:38,200 --> 00:02:44,799
exchange format despite what other

00:02:40,720 --> 00:02:46,630
people might tell you and yes the slides

00:02:44,799 --> 00:02:48,510
themselves I'm just gonna go ahead they

00:02:46,630 --> 00:02:52,210
are on the command line

00:02:48,510 --> 00:02:55,540
yeah right

00:02:52,210 --> 00:02:58,659
[Applause]

00:02:55,540 --> 00:03:00,640
I want to draw attention to the fact

00:02:58,659 --> 00:03:06,129
that we have fade out effect and fading

00:03:00,640 --> 00:03:07,659
effect swatches all right so don't worry

00:03:06,129 --> 00:03:09,700
you don't have to memorize this this is

00:03:07,659 --> 00:03:12,310
just like an overview because this is

00:03:09,700 --> 00:03:15,209
essentially a completely life kind of

00:03:12,310 --> 00:03:18,159
affair that we're gonna have going here

00:03:15,209 --> 00:03:21,760
so please cut me some slack if something

00:03:18,159 --> 00:03:23,440
goes wrong right so yeah we're gonna be

00:03:21,760 --> 00:03:24,970
looking at some tools and some common

00:03:23,440 --> 00:03:27,370
tasks and how what you were probably

00:03:24,970 --> 00:03:29,739
used to and then what you might be one

00:03:27,370 --> 00:03:33,459
are you using now so let's have a look

00:03:29,739 --> 00:03:35,829
right so first of all exa X is the tool

00:03:33,459 --> 00:03:37,959
for listing files now you might know

00:03:35,829 --> 00:03:42,280
that you can list files and unique

00:03:37,959 --> 00:03:44,859
systems using LS and 3 but X is pretty

00:03:42,280 --> 00:03:47,670
by default and it has good support so

00:03:44,859 --> 00:03:51,129
let's take a look what that means right

00:03:47,670 --> 00:03:53,230
so a normal LS looks like this all right

00:03:51,129 --> 00:03:54,549
it's a pretty pretty plane the my LS

00:03:53,230 --> 00:03:57,190
looks like this because I have some

00:03:54,549 --> 00:03:59,079
areas to make it pretty but usually if

00:03:57,190 --> 00:03:59,829
you log into some default system looks

00:03:59,079 --> 00:04:02,590
like this right

00:03:59,829 --> 00:04:05,530
but exa also looks like this but you

00:04:02,590 --> 00:04:08,230
fought but now this is not really so fun

00:04:05,530 --> 00:04:12,730
is it so let's for for fairness sake

00:04:08,230 --> 00:04:14,440
let's use LS dash L and use my oh I

00:04:12,730 --> 00:04:16,750
don't want to rap I'm gonna I'm gonna

00:04:14,440 --> 00:04:19,630
see what I can can you guys see there at

00:04:16,750 --> 00:04:20,889
the back this is okay great and then I'm

00:04:19,630 --> 00:04:25,000
gonna keep it like this so doesn't wrap

00:04:20,889 --> 00:04:26,919
so um so we can see here what LD LS dash

00:04:25,000 --> 00:04:29,020
L output looks like so list my user the

00:04:26,919 --> 00:04:31,150
attributes lots of stuff it's not

00:04:29,020 --> 00:04:32,530
particularly helpful though if you want

00:04:31,150 --> 00:04:34,510
to know the real sizes you've got to do

00:04:32,530 --> 00:04:37,210
this right so that you get the human

00:04:34,510 --> 00:04:38,349
readable sizes and everything could be

00:04:37,210 --> 00:04:40,690
more colorful right you could always

00:04:38,349 --> 00:04:42,310
make it no colorful basically the trend

00:04:40,690 --> 00:04:44,930
nowadays is to make everything more

00:04:42,310 --> 00:04:47,389
colorful and so you've got exit a shell

00:04:44,930 --> 00:04:50,720
and now it's very colorful you can see

00:04:47,389 --> 00:04:52,639
here that the the attributes are all

00:04:50,720 --> 00:04:55,880
colorized so you can easily skim that

00:04:52,639 --> 00:04:58,160
and the the sizes are human readable by

00:04:55,880 --> 00:05:00,380
default and the users actually might use

00:04:58,160 --> 00:05:02,419
a Spencer oh so it's like yellowish and

00:05:00,380 --> 00:05:05,180
the root user which is not my user is

00:05:02,419 --> 00:05:07,250
just kind of like greyish and then the

00:05:05,180 --> 00:05:11,380
other thing is also readable now the the

00:05:07,250 --> 00:05:13,910
way the the files are colored is that

00:05:11,380 --> 00:05:15,919
executable files and that have the

00:05:13,910 --> 00:05:17,990
executable flag and the in this side

00:05:15,919 --> 00:05:20,150
here they are green so you can see these

00:05:17,990 --> 00:05:21,979
a screen multimedia files are like

00:05:20,150 --> 00:05:23,780
violet and so on and so forth so there

00:05:21,979 --> 00:05:27,080
is actually some logic to that but we

00:05:23,780 --> 00:05:28,759
can go even further now what if we had

00:05:27,080 --> 00:05:30,830
good support right built-in so we have

00:05:28,759 --> 00:05:33,410
this get column here I can actually show

00:05:30,830 --> 00:05:36,620
headers so it might be a bit more oops

00:05:33,410 --> 00:05:38,030
header header and we have this get

00:05:36,620 --> 00:05:39,740
column and on the right side of the get

00:05:38,030 --> 00:05:41,720
column you have files which will change

00:05:39,740 --> 00:05:43,220
locally but not get staged and then left

00:05:41,720 --> 00:05:45,710
side you have files which were staged so

00:05:43,220 --> 00:05:47,300
we have n for new and M for modified so

00:05:45,710 --> 00:05:49,550
this is pretty cool and this doesn't

00:05:47,300 --> 00:05:51,650
really have that but we also have tree

00:05:49,550 --> 00:05:54,289
right you have this UNIX tool code tree

00:05:51,650 --> 00:05:56,510
which shows you a file tree and if you

00:05:54,289 --> 00:05:59,479
want to have the same in Excel you can

00:05:56,510 --> 00:06:01,159
also do like XE - tree now it looks a

00:05:59,479 --> 00:06:05,270
lot like the same right as extinct

00:06:01,159 --> 00:06:10,070
essentially the same but can you tree do

00:06:05,270 --> 00:06:13,039
this it killed it was a trick question

00:06:10,070 --> 00:06:14,659
it can but you have to do you have to

00:06:13,039 --> 00:06:18,979
like T I actually had to write this down

00:06:14,659 --> 00:06:22,580
to P right like that not quite as

00:06:18,979 --> 00:06:23,810
colorful is it but now we have we have

00:06:22,580 --> 00:06:27,080
seen that X I can do this but can you

00:06:23,810 --> 00:06:28,940
treat with this no it can't and this is

00:06:27,080 --> 00:06:30,199
amazing right you can basically check

00:06:28,940 --> 00:06:31,849
your structure and you don't have to

00:06:30,199 --> 00:06:34,520
alternate between tools like it's status

00:06:31,849 --> 00:06:36,440
all the time right like that that's

00:06:34,520 --> 00:06:40,099
pretty amazing so that's exit in a

00:06:36,440 --> 00:06:42,949
nutshell let's continue Ft finding files

00:06:40,099 --> 00:06:45,380
now personally a pet peeve of mine is

00:06:42,949 --> 00:06:47,539
like fine is kind of sucky to be honest

00:06:45,380 --> 00:06:50,270
in interactive usage like if you want to

00:06:47,539 --> 00:06:52,039
just kind of do something and and like

00:06:50,270 --> 00:06:54,650
make it fuzzy search for something it I

00:06:52,039 --> 00:06:56,630
always have to put the put the single

00:06:54,650 --> 00:06:57,720
cause of the right location put the SRS

00:06:56,630 --> 00:07:00,600
with the right location

00:06:57,720 --> 00:07:03,090
sucks now but we have FD which is like

00:07:00,600 --> 00:07:07,680
find but it doesn't suck when to active

00:07:03,090 --> 00:07:10,590
usage and it's colorful as well so you

00:07:07,680 --> 00:07:13,140
might see a trend here so M let's find

00:07:10,590 --> 00:07:14,640
let's find all of the revenues in the C

00:07:13,140 --> 00:07:17,640
Python source code right so I have this

00:07:14,640 --> 00:07:22,380
prepared so we are find right and I've

00:07:17,640 --> 00:07:25,080
see Python right here and we want to

00:07:22,380 --> 00:07:26,790
kind of because people can we have we

00:07:25,080 --> 00:07:28,380
have to give a name because it might be

00:07:26,790 --> 00:07:30,060
case insensitive because people might

00:07:28,380 --> 00:07:32,700
write read needs and we had kind of

00:07:30,060 --> 00:07:33,750
capitalization so go like that and we

00:07:32,700 --> 00:07:36,360
have to go like this

00:07:33,750 --> 00:07:38,940
readme asterisk and then we get all the

00:07:36,360 --> 00:07:41,070
read nice and C Python great so we can

00:07:38,940 --> 00:07:46,320
do the same thing with find every def t

00:07:41,070 --> 00:07:49,980
go like this ft and then jos source c

00:07:46,320 --> 00:07:51,780
python and it's so the same output but a

00:07:49,980 --> 00:07:54,270
lot less tedious to type right if you

00:07:51,780 --> 00:07:58,800
compare these guys but that's used to

00:07:54,270 --> 00:08:01,110
type and honestly it just nicer to look

00:07:58,800 --> 00:08:03,419
at because it has colors but we can go

00:08:01,110 --> 00:08:09,710
even further of course what if we wanted

00:08:03,419 --> 00:08:12,030
to find all of the Python files in the

00:08:09,710 --> 00:08:16,530
kernel output a kernel source could

00:08:12,030 --> 00:08:17,970
actually write we can do that or

00:08:16,530 --> 00:08:20,940
actually let's do something out let's

00:08:17,970 --> 00:08:25,140
find all the parser files in the C

00:08:20,940 --> 00:08:28,770
Python the C paprika sauce so we might

00:08:25,140 --> 00:08:30,060
want to go like this and we only want to

00:08:28,770 --> 00:08:34,950
find Python files so we do like this

00:08:30,060 --> 00:08:37,919
right now we can do the same thing with

00:08:34,950 --> 00:08:41,159
FD like this you have to stash a which

00:08:37,919 --> 00:08:48,360
means extension like that and then we

00:08:41,159 --> 00:08:50,310
can do the same thing right but now we

00:08:48,360 --> 00:08:52,410
can keep adding extensions easily right

00:08:50,310 --> 00:08:54,600
like that for instance we can find all

00:08:52,410 --> 00:08:57,780
the or the rst probably it has our STS

00:08:54,600 --> 00:08:59,300
it has some you see and we can keep

00:08:57,780 --> 00:09:01,410
adding extensions for that so we can

00:08:59,300 --> 00:09:02,490
more easily do this I had to be honest I

00:09:01,410 --> 00:09:04,200
have no idea how to do this and find

00:09:02,490 --> 00:09:05,700
because you can have two like right now

00:09:04,200 --> 00:09:08,280
wreck X and maybe make it a subgroup or

00:09:05,700 --> 00:09:11,190
something so that's kind of annoying

00:09:08,280 --> 00:09:11,780
another nice feature find is FD is that

00:09:11,190 --> 00:09:14,750
it actually

00:09:11,780 --> 00:09:16,670
users I'll get ignore to ignore fight

00:09:14,750 --> 00:09:18,500
that we don't want so if we look at our

00:09:16,670 --> 00:09:20,210
get ignore right here it has some like

00:09:18,500 --> 00:09:22,540
they had this little example reporter

00:09:20,210 --> 00:09:24,890
that I did there's this ignored fire and

00:09:22,540 --> 00:09:27,560
lo and behold there's our ignored file

00:09:24,890 --> 00:09:29,300
and if we have D for ignore won't find

00:09:27,560 --> 00:09:31,400
it but if we go like you for

00:09:29,300 --> 00:09:32,840
unrestricted it will find it so that's a

00:09:31,400 --> 00:09:34,640
nice feature because usually you don't

00:09:32,840 --> 00:09:36,350
want to search for feature F of I it's

00:09:34,640 --> 00:09:41,330
which I ignored while you're getting nor

00:09:36,350 --> 00:09:42,290
so that's if deep continuing rip grep

00:09:41,330 --> 00:09:44,360
now many people might have heard about

00:09:42,290 --> 00:09:46,400
that it's a quite a common tool nowadays

00:09:44,360 --> 00:09:49,040
it's insanely fast it's like rep but

00:09:46,400 --> 00:09:50,890
it's really really quick and it's also

00:09:49,040 --> 00:09:54,890
user friendly and it has amazing colors

00:09:50,890 --> 00:09:59,180
and it also uses kid ignores so what

00:09:54,890 --> 00:10:01,640
does this mean in practice well how

00:09:59,180 --> 00:10:04,580
about we search through the whole Linux

00:10:01,640 --> 00:10:06,500
source code and we search for buffer

00:10:04,580 --> 00:10:11,990
right the buffer word comes up quite a

00:10:06,500 --> 00:10:13,340
lot with the Linux context so I'm just

00:10:11,990 --> 00:10:15,410
gonna let it run for a little while but

00:10:13,340 --> 00:10:18,290
the general idea is that Linux uses a

00:10:15,410 --> 00:10:19,730
lot of buffers and and it takes quite a

00:10:18,290 --> 00:10:21,680
long time like it took like nine seconds

00:10:19,730 --> 00:10:25,600
as you can see my shell there and let's

00:10:21,680 --> 00:10:25,600
do the same thing with rip Brett Oh

00:10:41,130 --> 00:10:47,580
what the hell Oh because sorry because

00:10:45,690 --> 00:10:49,380
their copy this we don't have to have to

00:10:47,580 --> 00:10:51,000
we don't have to provide the recursive

00:10:49,380 --> 00:10:53,340
flag for it grab it also does this body

00:10:51,000 --> 00:10:55,440
fall it's quite a bit fast if you see

00:10:53,340 --> 00:10:57,600
two seconds against nine seconds but now

00:10:55,440 --> 00:10:59,460
Android grab also does something nice it

00:10:57,600 --> 00:11:02,400
ignores binary files by default which

00:10:59,460 --> 00:11:04,320
grep doesn't do and and get is basically

00:11:02,400 --> 00:11:05,610
a bunch of binary blobs and we don't

00:11:04,320 --> 00:11:07,740
really need to search that and also it

00:11:05,610 --> 00:11:09,300
has get ignores by default so we search

00:11:07,740 --> 00:11:11,790
a lot less stuff and we usually don't

00:11:09,300 --> 00:11:14,940
care about all of that stuff and also if

00:11:11,790 --> 00:11:17,580
you check the default way that things

00:11:14,940 --> 00:11:20,580
are kind of looking so I have this file

00:11:17,580 --> 00:11:22,950
here we API helper and this is the

00:11:20,580 --> 00:11:25,770
output for rip crap and this is the

00:11:22,950 --> 00:11:27,510
default output for grep and you can see

00:11:25,770 --> 00:11:30,330
here that the output differs quite a bit

00:11:27,510 --> 00:11:32,250
in the way that we get file numbers I

00:11:30,330 --> 00:11:33,510
think rep can do this as well but this

00:11:32,250 --> 00:11:36,000
is just like comparing the default

00:11:33,510 --> 00:11:38,160
output and by default rap actually

00:11:36,000 --> 00:11:40,920
doesn't do any and recursive searching

00:11:38,160 --> 00:11:41,880
which if you don't do this like it just

00:11:40,920 --> 00:11:43,920
kind of sits there and waits for

00:11:41,880 --> 00:11:45,810
standard input it doesn't but very

00:11:43,920 --> 00:11:47,910
useful to be honest right so it might

00:11:45,810 --> 00:11:50,400
make sense to just search that so this

00:11:47,910 --> 00:11:52,530
is what grippier does and it also allows

00:11:50,400 --> 00:11:54,660
you to search for specific types of

00:11:52,530 --> 00:11:57,390
files so if we provide the file tab pipe

00:11:54,660 --> 00:11:59,700
for Python and we search for buffer and

00:11:57,390 --> 00:12:02,460
the Linux source code turns out there's

00:11:59,700 --> 00:12:04,830
actually some occurrences of buffer in

00:12:02,460 --> 00:12:06,690
Linux right so this is all Linux or

00:12:04,830 --> 00:12:09,930
Python files as you can see in Linux

00:12:06,690 --> 00:12:12,450
which do some epitaphs so that was

00:12:09,930 --> 00:12:14,760
pretty nice to do and with grab you can

00:12:12,450 --> 00:12:17,550
I have to find all Python files grep

00:12:14,760 --> 00:12:19,350
type that in to grab and that can I

00:12:17,550 --> 00:12:22,410
annoying so that's right grep it's

00:12:19,350 --> 00:12:24,180
pretty cool um next up we have Tokai

00:12:22,410 --> 00:12:25,800
what okay I don't know how to pronounce

00:12:24,180 --> 00:12:28,200
that but anyway so it's kind of like

00:12:25,800 --> 00:12:29,640
clock not many people have thought about

00:12:28,200 --> 00:12:32,850
clock actually but if you want to count

00:12:29,640 --> 00:12:34,670
your lines of code on the on the command

00:12:32,850 --> 00:12:37,700
line usually it would use a Perl script

00:12:34,670 --> 00:12:40,290
called clock now Perl is a language

00:12:37,700 --> 00:12:41,700
engineer to be the slowest possible

00:12:40,290 --> 00:12:45,930
scripting language so it takes a long

00:12:41,700 --> 00:12:48,060
time actually to do anything and in Perl

00:12:45,930 --> 00:12:50,370
and I can actually demonstrate this by

00:12:48,060 --> 00:12:55,260
just counting the number of files and

00:12:50,370 --> 00:12:58,270
then I'm a of source lines in C Python

00:12:55,260 --> 00:13:02,680
it takes a little bit of time but the

00:12:58,270 --> 00:13:04,000
general idea is that well I think septum

00:13:02,680 --> 00:13:07,900
is degenerated to be honest

00:13:04,000 --> 00:13:10,120
so there we go yeah it's rapping sorry

00:13:07,900 --> 00:13:12,520
for that but the you can see it counted

00:13:10,120 --> 00:13:16,840
this we get some result now - okay

00:13:12,520 --> 00:13:20,800
as an alternative basically like that

00:13:16,840 --> 00:13:26,770
right so it's pretty fast toca allows us

00:13:20,800 --> 00:13:28,840
to count anything we want like Linux it

00:13:26,770 --> 00:13:30,930
takes a few seconds but I did this with

00:13:28,840 --> 00:13:34,810
clock and it didn't finish when I like

00:13:30,930 --> 00:13:38,650
take it took minutes to be honest and we

00:13:34,810 --> 00:13:41,200
can also see just how many C files they

00:13:38,650 --> 00:13:44,350
are in Python we can only count the C

00:13:41,200 --> 00:13:46,690
files like t4 type and then turns out

00:13:44,350 --> 00:13:48,250
there's a few or sorry not no I'm saying

00:13:46,690 --> 00:13:49,260
files right but I mean lines of code of

00:13:48,250 --> 00:13:52,090
course

00:13:49,260 --> 00:13:53,890
so that's Tokai short and sweet if you

00:13:52,090 --> 00:13:55,390
want to count lines of code it's not

00:13:53,890 --> 00:13:57,160
coloured I think this is probably the

00:13:55,390 --> 00:13:59,170
only tool utility that we have today

00:13:57,160 --> 00:14:01,780
that's not colorful

00:13:59,170 --> 00:14:04,360
next up HTTP a personal favorite of mine

00:14:01,780 --> 00:14:06,070
it's like curl but it's like super user

00:14:04,360 --> 00:14:07,840
friendly you know curl also kinda was

00:14:06,070 --> 00:14:09,550
made with the ability to be super user

00:14:07,840 --> 00:14:10,630
unfriendly like you have to like if you

00:14:09,550 --> 00:14:12,820
actually want to provide JSON or

00:14:10,630 --> 00:14:14,920
something like I don't remember the

00:14:12,820 --> 00:14:18,310
syntax ever right but let's try and

00:14:14,920 --> 00:14:21,970
request right so I had to prepare this

00:14:18,310 --> 00:14:28,690
because I really can't so I have this

00:14:21,970 --> 00:14:30,640
local loopback HTTP server so it just

00:14:28,690 --> 00:14:33,370
gives us that so that lets do the same

00:14:30,640 --> 00:14:35,140
thing with HTTP I and for some reason

00:14:33,370 --> 00:14:38,140
the command-line tools just called like

00:14:35,140 --> 00:14:40,750
HTTP right this I can't imagine this

00:14:38,140 --> 00:14:43,480
ever conflicting with anything at all so

00:14:40,750 --> 00:14:45,950
it looks like that

00:14:43,480 --> 00:14:49,730
so this looks a much much better right

00:14:45,950 --> 00:14:51,920
and this is the same kind of like output

00:14:49,730 --> 00:14:56,930
but it shows us the response headers in

00:14:51,920 --> 00:14:59,750
a nice kind of formatting yes colors and

00:14:56,930 --> 00:15:02,150
then it has the it knows is Jason and so

00:14:59,750 --> 00:15:06,130
in Part C Jason and in conformity Jason

00:15:02,150 --> 00:15:09,080
as well right so that's pretty cool and

00:15:06,130 --> 00:15:11,480
now for instance we can also tell curl

00:15:09,080 --> 00:15:12,770
to show the spawns headers and click

00:15:11,480 --> 00:15:16,160
rest headers and everything it looks

00:15:12,770 --> 00:15:18,590
like that and I'm like goof what I mean

00:15:16,160 --> 00:15:20,900
so these are the request headers because

00:15:18,590 --> 00:15:22,520
it has these lines going inside or the

00:15:20,900 --> 00:15:24,050
arrows going inside and these are the

00:15:22,520 --> 00:15:27,800
response headers and the response body

00:15:24,050 --> 00:15:29,510
but to be unlike ACK so let's let's

00:15:27,800 --> 00:15:30,830
obscure to send some data and I had to

00:15:29,510 --> 00:15:38,480
write this down because it looks like

00:15:30,830 --> 00:15:39,980
this so this is some jason and then we

00:15:38,480 --> 00:15:46,940
can't forget to set the headers always

00:15:39,980 --> 00:15:48,350
set the headers like that and then don't

00:15:46,940 --> 00:15:51,020
forget the method never forget the

00:15:48,350 --> 00:15:52,160
method alright and it looks like that

00:15:51,020 --> 00:15:54,380
any of this all right

00:15:52,160 --> 00:15:56,570
and we get this back because it's just

00:15:54,380 --> 00:15:59,540
like a dummy HTTP server but you get the

00:15:56,570 --> 00:16:01,570
idea right and this in in HTTP eyes like

00:15:59,540 --> 00:16:01,570
that

00:16:03,070 --> 00:16:09,620
I'm not kidding it's that simple and

00:16:07,640 --> 00:16:11,540
yeah we can actually also show the

00:16:09,620 --> 00:16:14,330
request headers and everything in HTTP

00:16:11,540 --> 00:16:16,130
by using show and then the basically is

00:16:14,330 --> 00:16:18,050
a bit weird of syntax but you get like

00:16:16,130 --> 00:16:20,180
capital H s I think the response headers

00:16:18,050 --> 00:16:23,210
and then the requester assist like the

00:16:20,180 --> 00:16:24,380
lowercase H and simple body and then it

00:16:23,210 --> 00:16:28,010
looks like that so I think this is

00:16:24,380 --> 00:16:30,200
pretty cool right you can see that and

00:16:28,010 --> 00:16:33,650
you can also set head us the same way so

00:16:30,200 --> 00:16:36,470
well ROFL or something and you can see

00:16:33,650 --> 00:16:44,089
that we set the header low rofl right so

00:16:36,470 --> 00:16:45,650
that's pretty cool let's continue bat no

00:16:44,089 --> 00:16:49,030
bat is an interesting one bat is like

00:16:45,650 --> 00:16:54,340
like cat and

00:16:49,030 --> 00:16:56,170
if ket and LS had an amazing magical

00:16:54,340 --> 00:16:59,440
unicorn baby right and that's kind of

00:16:56,170 --> 00:17:01,960
what what that is it has syntax

00:16:59,440 --> 00:17:03,910
highlighting support and it has

00:17:01,960 --> 00:17:05,860
automatic paging support for long fires

00:17:03,910 --> 00:17:07,930
and it has good support now how that how

00:17:05,860 --> 00:17:11,800
does that possibly work well I can show

00:17:07,930 --> 00:17:14,439
you so if I just bet something like

00:17:11,800 --> 00:17:16,060
changed file you can see that it has

00:17:14,439 --> 00:17:18,250
these weird things at the or actually

00:17:16,060 --> 00:17:19,839
let me show you let me show you this let

00:17:18,250 --> 00:17:21,250
me show you this first so we have ap I

00:17:19,839 --> 00:17:23,680
have a wizard who is just a Python

00:17:21,250 --> 00:17:25,300
program which does something right but

00:17:23,680 --> 00:17:27,400
it looks like that right not very

00:17:25,300 --> 00:17:29,680
interesting but then we have pet looks

00:17:27,400 --> 00:17:32,920
like that and it also has a pager built

00:17:29,680 --> 00:17:35,740
in so we have like this right so we have

00:17:32,920 --> 00:17:37,450
some tech support we have on the left

00:17:35,740 --> 00:17:38,920
side you can see that we have these

00:17:37,450 --> 00:17:40,570
little squiggles which means that this

00:17:38,920 --> 00:17:42,520
line was changed and I wrote the series

00:17:40,570 --> 00:17:45,400
name was changed these lines were added

00:17:42,520 --> 00:17:47,110
you can see the pluses and it won't use

00:17:45,400 --> 00:17:49,450
the pager for short files so if we just

00:17:47,110 --> 00:17:52,240
go like staged file it will like

00:17:49,450 --> 00:17:53,560
basically just not use the pager it will

00:17:52,240 --> 00:17:55,780
also give us line numbers which is nice

00:17:53,560 --> 00:17:57,430
and it's essentially all there is to

00:17:55,780 --> 00:18:00,700
know about that now obviously never use

00:17:57,430 --> 00:18:03,250
bad as a prepare to like cat or less if

00:18:00,700 --> 00:18:04,800
you want to use or competitive cat if

00:18:03,250 --> 00:18:07,000
you want to actually concatenate files

00:18:04,800 --> 00:18:09,270
but if you just want to look at files

00:18:07,000 --> 00:18:12,940
right it's pretty cool and also if you

00:18:09,270 --> 00:18:17,490
bat binary files it will just say like

00:18:12,940 --> 00:18:17,490
binary and cat is gonna be like yeah

00:18:20,220 --> 00:18:25,809
yeah

00:18:21,460 --> 00:18:27,519
so so that's that SDSU's a short and

00:18:25,809 --> 00:18:29,080
sweet one it's basically like said but

00:18:27,519 --> 00:18:33,730
people can actually use that without

00:18:29,080 --> 00:18:35,799
looking at the menu so have a look at

00:18:33,730 --> 00:18:38,529
this we have this change file and we

00:18:35,799 --> 00:18:40,539
have this replace me replace so with set

00:18:38,529 --> 00:18:45,249
if you actually want to replace that we

00:18:40,539 --> 00:18:49,029
will go like set - I s / - replace and

00:18:45,249 --> 00:18:50,139
then something and then G because can't

00:18:49,029 --> 00:18:52,090
forget the G because it will only

00:18:50,139 --> 00:18:54,820
replace the first occurrence per line

00:18:52,090 --> 00:18:57,309
alright so can't forget the G and then

00:18:54,820 --> 00:19:01,509
this and then change file and then it's

00:18:57,309 --> 00:19:02,980
me if we bad this again see it replace

00:19:01,509 --> 00:19:06,999
that bad with SD you'll school like

00:19:02,980 --> 00:19:10,059
something changed back to replace and

00:19:06,999 --> 00:19:12,429
then change file and that will actually

00:19:10,059 --> 00:19:15,249
have to change it back but if you don't

00:19:12,429 --> 00:19:17,320
want to commit right we are a generation

00:19:15,249 --> 00:19:19,629
of Millennials we cannot commit right if

00:19:17,320 --> 00:19:20,919
we go like - P we can preview that

00:19:19,629 --> 00:19:22,570
without actually changing the file so

00:19:20,919 --> 00:19:25,090
that's pretty cool right so that's all

00:19:22,570 --> 00:19:27,429
there is about SD which is like set but

00:19:25,090 --> 00:19:29,919
user friendly and then we have hyperfine

00:19:27,429 --> 00:19:32,049
notice is interesting Ron usually in

00:19:29,919 --> 00:19:33,549
UNIX if you benchmark things you would

00:19:32,049 --> 00:19:35,049
what would you do you would whip up time

00:19:33,549 --> 00:19:37,169
right and then just run time a bunch of

00:19:35,049 --> 00:19:39,730
times I can actually demonstrate that I

00:19:37,169 --> 00:19:43,059
have this Texas simulation here which is

00:19:39,730 --> 00:19:45,759
a very fast program that does something

00:19:43,059 --> 00:19:47,679
and in theory has some output but we

00:19:45,759 --> 00:19:49,840
don't show it but so if we want to time

00:19:47,679 --> 00:19:51,669
that how long that actually runs for you

00:19:49,840 --> 00:19:53,859
can run this a few times and we have

00:19:51,669 --> 00:19:57,820
some like we have some data but yeah you

00:19:53,859 --> 00:20:02,409
know then we have hyperfine and now

00:19:57,820 --> 00:20:05,470
watch this there's some spawn up time to

00:20:02,409 --> 00:20:07,779
measure something and then a basically

00:20:05,470 --> 00:20:09,869
runs the program a few times to make

00:20:07,779 --> 00:20:13,210
sure to sort out these statistical

00:20:09,869 --> 00:20:14,649
errors and we actually also take note of

00:20:13,210 --> 00:20:16,659
the min and Max times and you can see

00:20:14,649 --> 00:20:18,789
the they were actually quite quite

00:20:16,659 --> 00:20:20,169
considerable right and we can actually

00:20:18,789 --> 00:20:21,399
tell it to run a few more times but the

00:20:20,169 --> 00:20:23,799
general idea is that the program runs

00:20:21,399 --> 00:20:24,970
quite a few times and in order for it to

00:20:23,799 --> 00:20:27,940
figure out how long the program really

00:20:24,970 --> 00:20:30,700
takes in total right and so we get the

00:20:27,940 --> 00:20:33,970
we can execute very quickly

00:20:30,700 --> 00:20:36,009
terminating programs and still make sure

00:20:33,970 --> 00:20:37,779
to benchmark them properly and so now we

00:20:36,009 --> 00:20:39,609
are down to a delta of like you're a

00:20:37,779 --> 00:20:41,350
plus and minus of ten milliseconds which

00:20:39,609 --> 00:20:42,999
is quite quite a bit still but at least

00:20:41,350 --> 00:20:44,379
I mean the program terminates very

00:20:42,999 --> 00:20:46,269
quickly but you can imagine how this is

00:20:44,379 --> 00:20:50,950
useful if you want to benchmark some

00:20:46,269 --> 00:20:52,749
other tools right so and yeah you can

00:20:50,950 --> 00:20:54,580
also specify a warm-up phase if you're

00:20:52,749 --> 00:20:55,779
into that kind of thing where basically

00:20:54,580 --> 00:20:57,639
you runs the program like a few times

00:20:55,779 --> 00:20:59,559
beforehand and then completely discards

00:20:57,639 --> 00:21:02,769
and measurements too just in case you

00:20:59,559 --> 00:21:04,840
have some kind of i/o demanding program

00:21:02,769 --> 00:21:06,759
where you want your want to be very sure

00:21:04,840 --> 00:21:08,679
that the thing that you wanna benchmark

00:21:06,759 --> 00:21:11,409
is absolutely not your i/o cache right

00:21:08,679 --> 00:21:14,769
so you can do that it's pretty cool and

00:21:11,409 --> 00:21:16,749
now yeah we have a bonus because we

00:21:14,769 --> 00:21:18,970
still have a little bit of time

00:21:16,749 --> 00:21:21,190
MDP which is actually the program that

00:21:18,970 --> 00:21:23,980
I'm using right now to run the sim at

00:21:21,190 --> 00:21:25,929
this demonstration which is basically at

00:21:23,980 --> 00:21:29,340
the markdown presenter so you write some

00:21:25,929 --> 00:21:38,769
markdown files it looks like this if you

00:21:29,340 --> 00:21:41,289
want to be very specific it looks like

00:21:38,769 --> 00:21:44,679
this and this is my talk actually which

00:21:41,289 --> 00:21:45,970
is run right now by MVP and it is like

00:21:44,679 --> 00:21:48,190
PowerPoint but has one percent of the

00:21:45,970 --> 00:21:50,320
peaches but it's all the features that

00:21:48,190 --> 00:21:53,200
matter right

00:21:50,320 --> 00:21:56,200
and it's on the command line and your

00:21:53,200 --> 00:22:00,550
powerpoint can't do that nor can it we

00:21:56,200 --> 00:22:01,630
have another bonus Gen Act so imagine

00:22:00,550 --> 00:22:04,060
you want to pretend to be doing some

00:22:01,630 --> 00:22:08,500
work but don't actually wanna do any

00:22:04,060 --> 00:22:11,050
work now what do you do right so you can

00:22:08,500 --> 00:22:13,890
run genic and go like CC and now we're

00:22:11,050 --> 00:22:13,890
compiling something

00:22:20,660 --> 00:22:25,639
[Applause]

00:22:22,850 --> 00:22:29,960
and you can run Janek that's my blog and

00:22:25,639 --> 00:22:36,679
pretend you're looking at some I don't

00:22:29,960 --> 00:22:38,059
know Colonel compiler you'll get the

00:22:36,679 --> 00:22:39,649
idea right you can also just ran it like

00:22:38,059 --> 00:22:40,899
and without any arguments that will go

00:22:39,649 --> 00:22:43,039
into demo mode and we'll run a few

00:22:40,899 --> 00:22:47,350
errands of every kind of program that it

00:22:43,039 --> 00:22:47,350
has it has quite a few programs actually

00:22:50,200 --> 00:22:57,590
as these programs you can run that you

00:22:55,580 --> 00:23:00,080
can do this I don't know you get the

00:22:57,590 --> 00:23:01,460
idea right so I am glad you like it

00:23:00,080 --> 00:23:02,929
because it's actually the only program

00:23:01,460 --> 00:23:07,779
in this whole list that I've written

00:23:02,929 --> 00:23:11,299
myself so thank you thank you for that

00:23:07,779 --> 00:23:13,600
yeah we have one more bonus which is a

00:23:11,299 --> 00:23:16,070
very short and sweet one ask aquarium

00:23:13,600 --> 00:23:17,779
it's just like that right you have fish

00:23:16,070 --> 00:23:20,509
on your command line we have one more

00:23:17,779 --> 00:23:23,330
and then I'm done which is C matrix

00:23:20,509 --> 00:23:27,550
probably everybody else's but still for

00:23:23,330 --> 00:23:30,760
completeness sake yeah thank you

00:23:27,550 --> 00:23:30,760
[Applause]

00:23:42,210 --> 00:23:47,410
yeah thank you very much spending for

00:23:44,830 --> 00:23:49,860
this very colorful talk at any questions

00:23:47,410 --> 00:23:49,860
or comments

00:23:51,880 --> 00:23:57,160
does FD also have a statement like

00:23:54,850 --> 00:23:58,720
executes less yes it does in fact it

00:23:57,160 --> 00:24:00,429
also has a batch statement for execute

00:23:58,720 --> 00:24:02,350
so if you want to have if you want to

00:24:00,429 --> 00:24:04,050
get rid of ex arcs you can do that

00:24:02,350 --> 00:24:07,600
instead so it's pretty cool actually

00:24:04,050 --> 00:24:08,800
much less painful to use so when you

00:24:07,600 --> 00:24:13,809
have questions you can also line up at

00:24:08,800 --> 00:24:16,570
the microphones on the side the Rose was

00:24:13,809 --> 00:24:18,250
second science after your like command

00:24:16,570 --> 00:24:21,030
line like after master like three

00:24:18,250 --> 00:24:24,610
seconds and so on what's that like oh

00:24:21,030 --> 00:24:26,710
yes okay so that's yeah yeah like if I

00:24:24,610 --> 00:24:28,929
see yeah so if you run a command which

00:24:26,710 --> 00:24:31,179
takes a few or seconds to execute after

00:24:28,929 --> 00:24:32,890
one second my shell will like it will

00:24:31,179 --> 00:24:34,090
always keep track of the command and I

00:24:32,890 --> 00:24:40,150
will show you how long the command took

00:24:34,090 --> 00:24:41,800
always so you can't forget that it's

00:24:40,150 --> 00:24:47,050
actually called liquid prompt it's for a

00:24:41,800 --> 00:24:50,260
sea shell and it's therefore for the CSH

00:24:47,050 --> 00:24:52,809
yes usually yeah for that and it's like

00:24:50,260 --> 00:24:55,240
a special prompt which has this thing

00:24:52,809 --> 00:24:57,010
built in where basically only shows you

00:24:55,240 --> 00:24:59,770
what you need to know you see I also

00:24:57,010 --> 00:25:02,650
like this is my my get state currently

00:24:59,770 --> 00:25:04,450
it's like oh my kind of no no a well

00:25:02,650 --> 00:25:09,840
it's a it's a it's a special prompt for

00:25:04,450 --> 00:25:12,580
the show it's also best version of that

00:25:09,840 --> 00:25:18,450
it's pretty cool I can recommend liquid

00:25:12,580 --> 00:25:18,450
prompt more questions

00:25:24,760 --> 00:25:29,540
maybe in the meantime you can tell us

00:25:26,540 --> 00:25:31,850
how does fade in fade out works I

00:25:29,540 --> 00:25:33,410
actually don't know I think it uses NZ

00:25:31,850 --> 00:25:36,790
colour codes but I don't actually know

00:25:33,410 --> 00:25:39,350
but I actually wanted to look that up

00:25:36,790 --> 00:25:41,750
hey Chad you know if there's no option

00:25:39,350 --> 00:25:43,490
to print to the alternative Queen so

00:25:41,750 --> 00:25:46,070
when you close it it doesn't show up in

00:25:43,490 --> 00:25:48,410
your health I see so this is just a

00:25:46,070 --> 00:25:50,900
normal thing shell feature where you can

00:25:48,410 --> 00:25:53,360
press ctrl-z

00:25:50,900 --> 00:25:55,490
in order to background the task and then

00:25:53,360 --> 00:25:57,500
you have this you can see this this one

00:25:55,490 --> 00:25:58,850
sleeping process yeah which is now

00:25:57,500 --> 00:26:00,950
sleeping which is my presentation you

00:25:58,850 --> 00:26:02,390
can tap jobs to see which jobs are

00:26:00,950 --> 00:26:04,160
currently sleeping is just this right

00:26:02,390 --> 00:26:08,510
and then I can press fge to for granted

00:26:04,160 --> 00:26:11,260
again that's pretty cool oh sorry yeah

00:26:08,510 --> 00:26:14,260
well let's let's I can show you outside

00:26:11,260 --> 00:26:14,260
okay

00:26:17,140 --> 00:26:22,700
so if you're ever running graphics what

00:26:20,390 --> 00:26:24,560
kind of window manager do you use well I

00:26:22,700 --> 00:26:26,330
use graphics right now actually I'm not

00:26:24,560 --> 00:26:29,540
really actually lying

00:26:26,330 --> 00:26:32,000
it's a I use i 319 as you can see just

00:26:29,540 --> 00:26:34,130
normal a3 stuff we just do this right

00:26:32,000 --> 00:26:38,680
what terminal is that is that this is

00:26:34,130 --> 00:26:38,680
the termite terminal term okay thanks

00:26:41,230 --> 00:26:46,150
any more questions

00:26:43,050 --> 00:26:46,150
[Music]

00:26:52,830 --> 00:26:58,240
there is any other tools related to

00:26:56,440 --> 00:27:01,230
terminal work which increase your

00:26:58,240 --> 00:27:06,160
productivity or economics for example I

00:27:01,230 --> 00:27:09,010
I think the best to I found is a

00:27:06,160 --> 00:27:11,950
drop-down terminal I use the Aqua maybe

00:27:09,010 --> 00:27:16,780
some another tips or tools you use or

00:27:11,950 --> 00:27:20,440
your work well so originally I wanted to

00:27:16,780 --> 00:27:21,760
show of whim because this I also put

00:27:20,440 --> 00:27:24,160
this in the title of the presentation or

00:27:21,760 --> 00:27:25,270
in the the description text and I

00:27:24,160 --> 00:27:28,060
figured we didn't have enough time for

00:27:25,270 --> 00:27:29,680
that for whole women thing so I use whim

00:27:28,060 --> 00:27:32,680
a lot for everything really I do

00:27:29,680 --> 00:27:34,390
everything know without team I just use

00:27:32,680 --> 00:27:36,610
I three and just keep opening terminals

00:27:34,390 --> 00:27:38,080
I don't like the double kind of window

00:27:36,610 --> 00:27:39,550
management I know that there's tools to

00:27:38,080 --> 00:27:42,400
make that easier but honestly I like to

00:27:39,550 --> 00:27:45,250
keep it simple and I just have just a

00:27:42,400 --> 00:27:47,650
lot lots of I three windows in fact I

00:27:45,250 --> 00:27:50,680
have ten open desktops right now and all

00:27:47,650 --> 00:27:55,750
of them full of Windows so I use a lot

00:27:50,680 --> 00:28:00,190
of Windows one question here is regret

00:27:55,750 --> 00:28:02,080
faster than silver search yes at least I

00:28:00,190 --> 00:28:04,840
mean so I used to use the silver

00:28:02,080 --> 00:28:06,400
searches so the question was whether rip

00:28:04,840 --> 00:28:08,020
grep is faster than the earth is the

00:28:06,400 --> 00:28:10,000
silver searcher which is another tool

00:28:08,020 --> 00:28:13,570
that looks a lot like grep and also has

00:28:10,000 --> 00:28:15,400
colors and also same defaults the basic

00:28:13,570 --> 00:28:17,680
philosophy of rip grep and a G or the

00:28:15,400 --> 00:28:20,200
silver search are much the same which is

00:28:17,680 --> 00:28:22,530
that rip crap just happens to be like

00:28:20,200 --> 00:28:24,820
five times faster in the benchmarks so

00:28:22,530 --> 00:28:30,910
make some difference I suppose with very

00:28:24,820 --> 00:28:35,680
large repositories do you recommend

00:28:30,910 --> 00:28:37,570
using the de-mux well so I use quite a

00:28:35,680 --> 00:28:42,430
bit of T max but honestly not for

00:28:37,570 --> 00:28:45,400
development more for well well it looks

00:28:42,430 --> 00:28:48,070
nice it's just I don't know so I I know

00:28:45,400 --> 00:28:50,770
T max is very popular with OSX people

00:28:48,070 --> 00:28:52,720
because they don't have a proper native

00:28:50,770 --> 00:28:55,270
window manager I think nowadays they do

00:28:52,720 --> 00:28:57,100
but generally speaking I don't really

00:28:55,270 --> 00:28:59,470
like window management in Enochs so much

00:28:57,100 --> 00:29:01,120
as I like it in i3 and I don't want to

00:28:59,470 --> 00:29:05,500
manage them like in too

00:29:01,120 --> 00:29:06,670
ways and all these apps that you

00:29:05,500 --> 00:29:08,710
demonstrated being installed with

00:29:06,670 --> 00:29:10,510
pac-man or yes

00:29:08,710 --> 00:29:13,000
in fact I package most of them for our

00:29:10,510 --> 00:29:15,340
clinics but also for other distributions

00:29:13,000 --> 00:29:16,750
and also for Windows and O's eggs so

00:29:15,340 --> 00:29:18,880
they're all available in brew I think

00:29:16,750 --> 00:29:20,530
and they are also all they also all have

00:29:18,880 --> 00:29:24,850
precompiled binaries for Windows which

00:29:20,530 --> 00:29:26,920
just work how difficult it is for you to

00:29:24,850 --> 00:29:31,600
reproduce the same environmental another

00:29:26,920 --> 00:29:35,440
system pretty easy I mean it depends on

00:29:31,600 --> 00:29:36,820
how much control I get since most of

00:29:35,440 --> 00:29:37,900
these tools that I demonstrated are

00:29:36,820 --> 00:29:39,220
written and are us and have static

00:29:37,900 --> 00:29:40,480
binaries you can just gonna get the

00:29:39,220 --> 00:29:43,030
binaries don't know them and they will

00:29:40,480 --> 00:29:45,309
always keep working except for HTTP PI

00:29:43,030 --> 00:29:46,990
which sadly is a Python and the

00:29:45,309 --> 00:29:48,880
distribution is a bit more complicated I

00:29:46,990 --> 00:29:51,309
know it's a bit it's a weird thing to

00:29:48,880 --> 00:29:53,950
say here but yeah Python distribution is

00:29:51,309 --> 00:29:55,809
still not a solved problem I think but

00:29:53,950 --> 00:29:58,840
yeah it's pretty easy to replicate the

00:29:55,809 --> 00:30:00,880
environments do you use any other

00:29:58,840 --> 00:30:03,190
displays like status bar or anything

00:30:00,880 --> 00:30:04,870
like that sorry come again do you use

00:30:03,190 --> 00:30:08,559
anything else like a status bar I need

00:30:04,870 --> 00:30:11,470
other kinds of display oh yes well so I

00:30:08,559 --> 00:30:13,480
use poly bar for for displaying my my

00:30:11,470 --> 00:30:16,660
system stuff but I like to keep the

00:30:13,480 --> 00:30:18,760
output to a minimum like I'm not into

00:30:16,660 --> 00:30:20,200
very flashy conky stats and stuff like

00:30:18,760 --> 00:30:22,120
that because I never look at them anyway

00:30:20,200 --> 00:30:25,450
just I keep it simple and make sure that

00:30:22,120 --> 00:30:30,190
the system has enough battery time good

00:30:25,450 --> 00:30:33,270
very very much thank you to spend give a

00:30:30,190 --> 00:30:33,270
warm hand to son

00:30:34,550 --> 00:30:37,690

YouTube URL: https://www.youtube.com/watch?v=dnzaIeUgH_4


