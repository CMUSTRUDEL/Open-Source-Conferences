Title: Alessandro Molina - Fast, documented and reliable JSON based webservices with Python
Publication date: 2015-04-18
Playlist: EuroPython 2013
Description: 
	[EuroPython 2013] Alessandro Molina - Fast, documented and reliable JSON based webservices with Python - 05 July 2013 "Track Spaghetti"
Captions: 
	00:00:17,230 --> 00:00:23,970
hello everybody welcome to the last

00:00:20,400 --> 00:00:26,919
standard tracker on his Europe item

00:00:23,970 --> 00:00:29,640
welcome my son Drew and his talk on

00:00:26,919 --> 00:00:38,559
Jason web services in Python thank you

00:00:29,640 --> 00:00:40,780
okay first of all who am i I'm currently

00:00:38,559 --> 00:00:42,850
working as a CDI packs on teeth which is

00:00:40,780 --> 00:00:45,550
a small development company in northern

00:00:42,850 --> 00:00:48,519
Italy and we work mostly on Python for

00:00:45,550 --> 00:00:50,500
everything that she's set aside and we

00:00:48,519 --> 00:00:53,590
have still do some iOS and Android

00:00:50,500 --> 00:00:55,629
development for application that contact

00:00:53,590 --> 00:00:57,250
Python web services to retrieve their

00:00:55,629 --> 00:00:59,410
time perform whatever they need to do

00:00:57,250 --> 00:01:02,440
and this is the reason why I'm going to

00:00:59,410 --> 00:01:04,960
talk you about web services with Python

00:01:02,440 --> 00:01:07,090
then I'm a member of the two burgers to

00:01:04,960 --> 00:01:09,039
development team and this is their major

00:01:07,090 --> 00:01:11,500
reason why you're going to see a lot of

00:01:09,039 --> 00:01:14,229
turbo girls code in this presentation if

00:01:11,500 --> 00:01:16,720
you are pyramid user I'm sorry for you

00:01:14,229 --> 00:01:19,630
you can tell me why you prefer other

00:01:16,720 --> 00:01:23,410
solutions after whenever you want I'm a

00:01:19,630 --> 00:01:25,780
MongoDB user and ending object document

00:01:23,410 --> 00:01:27,940
that per contributor and we are going to

00:01:25,780 --> 00:01:30,670
see some of the reason why Ming among

00:01:27,940 --> 00:01:32,530
that we are really good choices for web

00:01:30,670 --> 00:01:35,440
services and especially when working

00:01:32,530 --> 00:01:37,420
with Jason and I miss kept develop I've

00:01:35,440 --> 00:01:41,250
always looking for a better solution so

00:01:37,420 --> 00:01:44,860
any suggestion is a greatly appreciated

00:01:41,250 --> 00:01:46,929
well so what we are going to see my talk

00:01:44,860 --> 00:01:49,569
would be on rapid prototyping of web

00:01:46,929 --> 00:01:51,910
services so making possible to have a

00:01:49,569 --> 00:01:54,550
working solution in the minimum time

00:01:51,910 --> 00:01:57,310
possible so with a minimal effort and

00:01:54,550 --> 00:02:00,340
making something which is possible to

00:01:57,310 --> 00:02:03,399
expand or later when you need the two

00:02:00,340 --> 00:02:05,590
performance such as verily source when

00:02:03,399 --> 00:02:07,869
you're at the budget and time to make it

00:02:05,590 --> 00:02:10,539
happen we are going to see a bunch of

00:02:07,869 --> 00:02:12,670
pills document JSON services because

00:02:10,539 --> 00:02:15,520
whenever you are going to make a service

00:02:12,670 --> 00:02:17,739
someone else we need to call it so

00:02:15,520 --> 00:02:20,349
documenting it is one of the core parts

00:02:17,739 --> 00:02:22,660
of developing a web service and we are

00:02:20,349 --> 00:02:25,450
going to use me to see how to use me

00:02:22,660 --> 00:02:28,480
mungry be especially the manga memory

00:02:25,450 --> 00:02:29,690
feature of Ming to make a full test

00:02:28,480 --> 00:02:31,670
server and

00:02:29,690 --> 00:02:34,250
right index fishes without having to

00:02:31,670 --> 00:02:36,440
actually run among the DB server on your

00:02:34,250 --> 00:02:39,080
machine and we are going to see a bunch

00:02:36,440 --> 00:02:41,060
of tools to deploy fast what you did

00:02:39,080 --> 00:02:42,890
because we are looking at rapid

00:02:41,060 --> 00:02:45,500
prototyping so that the deployment

00:02:42,890 --> 00:02:47,930
should be as fast as possible to why

00:02:45,500 --> 00:02:49,820
turbo years well two burgers is one

00:02:47,930 --> 00:02:52,130
great feature which is that you can

00:02:49,820 --> 00:02:54,550
start small with the so-called minimal

00:02:52,130 --> 00:02:57,110
mode you don't need to bring in any

00:02:54,550 --> 00:02:58,910
dependency it works much like a micro

00:02:57,110 --> 00:03:00,680
framework I don't know which is this the

00:02:58,910 --> 00:03:02,870
term is correct because now it's really

00:03:00,680 --> 00:03:04,370
hard to see you to decide what is a

00:03:02,870 --> 00:03:06,440
micro framework as where you actually

00:03:04,370 --> 00:03:08,900
had most of the features that a full

00:03:06,440 --> 00:03:10,850
stack frame of gas and whenever you need

00:03:08,900 --> 00:03:12,470
it you can easily scout with full

00:03:10,850 --> 00:03:14,810
spectrum herbs will feature an

00:03:12,470 --> 00:03:16,850
environment with packages without

00:03:14,810 --> 00:03:19,460
indication and whatever you might need

00:03:16,850 --> 00:03:21,860
to without having to actually set up

00:03:19,460 --> 00:03:24,130
anything about setting an option to true

00:03:21,860 --> 00:03:26,780
and then two bogies does that for you

00:03:24,130 --> 00:03:29,210
Tobias uses a special dispatch system

00:03:26,780 --> 00:03:31,520
which doesn't rely on regular special

00:03:29,210 --> 00:03:34,459
it's much like the travels of this

00:03:31,520 --> 00:03:36,770
system of the pyramid and so on but user

00:03:34,459 --> 00:03:39,110
subject Sierra keys instead of

00:03:36,770 --> 00:03:41,150
dictionaries so you just declare your

00:03:39,110 --> 00:03:45,950
objects provide some methods and those

00:03:41,150 --> 00:03:49,280
meters automotive exposed as services to

00:03:45,950 --> 00:03:51,260
your front end user and it also have the

00:03:49,280 --> 00:03:52,880
specialization of the object display

00:03:51,260 --> 00:03:55,670
system which is the replica louis

00:03:52,880 --> 00:03:58,489
controller where you just the clevis

00:03:55,670 --> 00:04:01,220
controller and put inside each HTTP web

00:03:58,489 --> 00:04:03,080
as a method of the rest controller and

00:04:01,220 --> 00:04:06,400
it gets automatically dispatched to the

00:04:03,080 --> 00:04:09,440
correct well Andrew begins as a way of

00:04:06,400 --> 00:04:13,130
implementing validation which cops great

00:04:09,440 --> 00:04:16,070
with ap is because it uses decoration on

00:04:13,130 --> 00:04:18,560
the arguments of the function so you can

00:04:16,070 --> 00:04:20,419
actually set up the validation for each

00:04:18,560 --> 00:04:22,970
argument your function is going to

00:04:20,419 --> 00:04:25,580
receive and so it's applied when your

00:04:22,970 --> 00:04:28,490
mint which is best to the API service

00:04:25,580 --> 00:04:30,800
through being it a poster multi-part

00:04:28,490 --> 00:04:33,590
encoded body being it well encoded in

00:04:30,800 --> 00:04:38,180
your get request being it whatever you

00:04:33,590 --> 00:04:40,490
are receiving from your client so this

00:04:38,180 --> 00:04:42,330
is the minimum world that was talking

00:04:40,490 --> 00:04:45,800
you about it's uh sure

00:04:42,330 --> 00:04:48,389
really simple to start this way you just

00:04:45,800 --> 00:04:50,370
import whatever you need from turbo

00:04:48,389 --> 00:04:53,310
yells you set up your route controller

00:04:50,370 --> 00:04:55,560
which is going to be the root of the

00:04:53,310 --> 00:04:58,199
dispatch they cannot the core of your

00:04:55,560 --> 00:05:01,409
dispatch system and whatever you expose

00:04:58,199 --> 00:05:04,620
with that expose decorator inside your

00:05:01,409 --> 00:05:07,919
route controller is an API available at

00:05:04,620 --> 00:05:10,949
the UML with the same name of the method

00:05:07,919 --> 00:05:13,020
do you just wrote if you said expose

00:05:10,949 --> 00:05:16,889
JSON to burgers with automatically

00:05:13,020 --> 00:05:20,810
render the output of the of the method

00:05:16,889 --> 00:05:23,610
as a JSON in this case dictionary or

00:05:20,810 --> 00:05:27,389
better say object as we are talking

00:05:23,610 --> 00:05:29,310
passages then whatever you passes an

00:05:27,389 --> 00:05:31,310
argument to your method is actually

00:05:29,310 --> 00:05:34,590
passed as an argument to the underlying

00:05:31,310 --> 00:05:37,500
function so whatever you pass wing it

00:05:34,590 --> 00:05:41,490
true that get request is your own closet

00:05:37,500 --> 00:05:45,000
or being it even as a JSON encoded body

00:05:41,490 --> 00:05:47,310
every variable of the JSON object is

00:05:45,000 --> 00:05:50,460
passed as they argument if you are using

00:05:47,310 --> 00:05:53,069
some kind of decorators you can enable

00:05:50,460 --> 00:05:54,719
on through boogie us and then to start

00:05:53,069 --> 00:05:57,150
your application you just need to create

00:05:54,719 --> 00:05:58,800
an application config tell him which is

00:05:57,150 --> 00:06:01,289
the root controller you want to use

00:05:58,800 --> 00:06:03,629
telling that you have a minimal mode and

00:06:01,289 --> 00:06:05,069
make it happen you just create the

00:06:03,629 --> 00:06:06,930
whiskey application from the

00:06:05,069 --> 00:06:09,060
configuration and turbo guess we set up

00:06:06,930 --> 00:06:11,129
every middle level feature whatever you

00:06:09,060 --> 00:06:12,930
need for you and you can just serve it

00:06:11,129 --> 00:06:15,089
of course you don't want to serve it on

00:06:12,930 --> 00:06:17,610
whiskey referencing yonward they just

00:06:15,089 --> 00:06:20,490
will show you how you can achieve that

00:06:17,610 --> 00:06:22,830
and to start it you just save your file

00:06:20,490 --> 00:06:25,379
run Python point your browser there and

00:06:22,830 --> 00:06:28,560
you'll get you Jason back so we created

00:06:25,379 --> 00:06:31,830
their vessel in not rest sorry in JSON

00:06:28,560 --> 00:06:36,240
service in like 30 seconds without any

00:06:31,830 --> 00:06:38,580
effort required and this is probably the

00:06:36,240 --> 00:06:41,310
most simple solution you can achieve on

00:06:38,580 --> 00:06:43,379
a server it requires minimal

00:06:41,310 --> 00:06:45,599
configuration it requires no routing

00:06:43,379 --> 00:06:47,699
specification because you're just

00:06:45,599 --> 00:06:49,979
relying on object dispatch it requires

00:06:47,699 --> 00:06:51,569
no Jason model encoding because the

00:06:49,979 --> 00:06:54,360
framework is going to do that for you

00:06:51,569 --> 00:06:57,060
and so on you can actually you can

00:06:54,360 --> 00:07:00,300
achieve similar speed using a lot of

00:06:57,060 --> 00:07:02,250
other different solutions like every

00:07:00,300 --> 00:07:05,550
other framework has some kind of rapid

00:07:02,250 --> 00:07:07,740
prototyping tool for your API so this is

00:07:05,550 --> 00:07:10,590
just the weight or but yes does that but

00:07:07,740 --> 00:07:12,300
you are not enforced to using there and

00:07:10,590 --> 00:07:14,759
then where you are going to store your

00:07:12,300 --> 00:07:17,310
data when you need to create an API

00:07:14,759 --> 00:07:19,319
salvage or you have a really lucky guy

00:07:17,310 --> 00:07:21,300
you don't need to store anything or

00:07:19,319 --> 00:07:24,569
you're probably going to save her to

00:07:21,300 --> 00:07:26,879
even update and so on data and you can

00:07:24,569 --> 00:07:29,099
do that using manga to be among the be

00:07:26,879 --> 00:07:32,669
is a great match for API services

00:07:29,099 --> 00:07:35,909
because if you design your collection

00:07:32,669 --> 00:07:38,069
properly you can actually make most of

00:07:35,909 --> 00:07:41,009
your API so probably going just be a

00:07:38,069 --> 00:07:42,900
fine modify atomic operation so we have

00:07:41,009 --> 00:07:45,270
a single call to the database you can

00:07:42,900 --> 00:07:47,719
actually perform complex operations like

00:07:45,270 --> 00:07:50,310
updating multiple objects updating

00:07:47,719 --> 00:07:53,629
values with the value of something else

00:07:50,310 --> 00:07:56,370
pushing to SF making sure it's actually

00:07:53,629 --> 00:07:59,550
doesn't have duplicated elements and so

00:07:56,370 --> 00:08:02,279
on turbo gas / sre MongoDB provides a

00:07:59,550 --> 00:08:04,409
lot of operators they make possible to

00:08:02,279 --> 00:08:07,680
perform on database side complex

00:08:04,409 --> 00:08:10,199
operations and this is one of the reason

00:08:07,680 --> 00:08:13,650
why it's really good because your API

00:08:10,199 --> 00:08:17,190
server gets just became just a proxy

00:08:13,650 --> 00:08:19,680
from the HTTP lever to MongoDB reads

00:08:17,190 --> 00:08:22,860
your data back and goes on which cop is

00:08:19,680 --> 00:08:25,740
great with a single on servers like grn

00:08:22,860 --> 00:08:27,569
and so on and this is one of the reason

00:08:25,740 --> 00:08:29,779
why pymongo which is actually the

00:08:27,569 --> 00:08:34,289
underlying library that mink and other

00:08:29,779 --> 00:08:36,810
odm use it works great with GM you just

00:08:34,289 --> 00:08:39,240
enabled patch everything and you don't

00:08:36,810 --> 00:08:41,099
have any issue your connections to the

00:08:39,240 --> 00:08:44,370
dot baby became a synchronous and you

00:08:41,099 --> 00:08:46,790
get data whenever you are going up

00:08:44,370 --> 00:08:49,589
dispatcher permits that too and so on

00:08:46,790 --> 00:08:51,990
and you can use sub documents among to

00:08:49,589 --> 00:08:54,510
be so if you have like an article with

00:08:51,990 --> 00:08:56,940
the information on the outer and

00:08:54,510 --> 00:08:58,589
comments and tags and so on you can

00:08:56,940 --> 00:09:01,920
store everything inside the single

00:08:58,589 --> 00:09:04,529
document and whenever you need to like

00:09:01,920 --> 00:09:06,660
update the document Osan you just need

00:09:04,529 --> 00:09:07,150
to update on single place and the game

00:09:06,660 --> 00:09:08,890
you can

00:09:07,150 --> 00:09:10,870
is a single call to update everything

00:09:08,890 --> 00:09:13,570
because everything inside a single place

00:09:10,870 --> 00:09:17,440
then if you need to perform like logical

00:09:13,570 --> 00:09:19,390
connection or more complex analysis on

00:09:17,440 --> 00:09:22,300
your data you can actually use a

00:09:19,390 --> 00:09:24,700
reference which are like a simple formal

00:09:22,300 --> 00:09:27,520
joints I don't know how to explain them

00:09:24,700 --> 00:09:30,610
you just a pointer to a collection entry

00:09:27,520 --> 00:09:33,490
so you can perform analysis you don't

00:09:30,610 --> 00:09:36,270
know before how your data needs to be

00:09:33,490 --> 00:09:40,390
started to perform that kind of

00:09:36,270 --> 00:09:42,790
computation on your data so you just

00:09:40,390 --> 00:09:45,130
track sure your database the way you are

00:09:42,790 --> 00:09:47,140
going to use it most often and then for

00:09:45,130 --> 00:09:49,570
everything else you use a relationship

00:09:47,140 --> 00:09:53,140
or duplicate data or whatever you prefer

00:09:49,570 --> 00:09:55,630
to do and it provides VFS which is a

00:09:53,140 --> 00:09:58,330
great tool that permits to store files

00:09:55,630 --> 00:10:00,070
inside MongoDB itself and use the

00:09:58,330 --> 00:10:02,740
sharding replication and so on of

00:10:00,070 --> 00:10:04,420
MongoDB cells to store the data so

00:10:02,740 --> 00:10:06,730
you're actually going to have something

00:10:04,420 --> 00:10:08,650
which is replicated PI system

00:10:06,730 --> 00:10:10,330
distributed file system are very fast

00:10:08,650 --> 00:10:13,180
you're reading because you're going to

00:10:10,330 --> 00:10:15,910
reform every shard available so also

00:10:13,180 --> 00:10:18,670
MongoDB keeps a lot of data in memory as

00:10:15,910 --> 00:10:21,130
much as possible for the server you are

00:10:18,670 --> 00:10:24,430
going to put MongoDB on its residents

00:10:21,130 --> 00:10:26,320
that will be as much as possible you're

00:10:24,430 --> 00:10:27,850
going to allocate for the vehicle memory

00:10:26,320 --> 00:10:30,340
available it's going to keep in memory

00:10:27,850 --> 00:10:32,890
as much as your users are going to use

00:10:30,340 --> 00:10:34,900
so your files will probably be served

00:10:32,890 --> 00:10:36,640
directly from memory and not from this

00:10:34,900 --> 00:10:39,450
because they are probably going to be in

00:10:36,640 --> 00:10:43,360
your residence set of the MongoDB sell

00:10:39,450 --> 00:10:45,460
any scales these kids are really easy

00:10:43,360 --> 00:10:47,770
and it's so much important today the

00:10:45,460 --> 00:10:50,890
scale word is the most common one on web

00:10:47,770 --> 00:10:52,780
blogs and this is actually a MongoDB

00:10:50,890 --> 00:10:54,760
skills you need to scale you just and

00:10:52,780 --> 00:10:57,070
start another manga DB server and it

00:10:54,760 --> 00:10:59,470
attaches to your manga distributor

00:10:57,070 --> 00:11:01,540
mongos proxy and so on and you have

00:10:59,470 --> 00:11:03,220
actually automatic sharping and so on so

00:11:01,540 --> 00:11:04,390
you don't have to perform anything you

00:11:03,220 --> 00:11:06,670
start another server the server

00:11:04,390 --> 00:11:09,670
themselves off today at work the server

00:11:06,670 --> 00:11:12,340
you just need to declare HR binky which

00:11:09,670 --> 00:11:15,820
has to make sense because if you declare

00:11:12,340 --> 00:11:18,910
a dinky which doesn't have enough which

00:11:15,820 --> 00:11:20,710
is to Lena MongoDB is going to store all

00:11:18,910 --> 00:11:23,080
the data on the same shots

00:11:20,710 --> 00:11:25,960
begins useless because mongodb a service

00:11:23,080 --> 00:11:27,580
chunks of data for a chart so like if

00:11:25,960 --> 00:11:30,070
you use an outer in current key it's

00:11:27,580 --> 00:11:33,100
going just be stored a bunch of

00:11:30,070 --> 00:11:35,500
subsequent cell data on the same sharp

00:11:33,100 --> 00:11:36,790
if you use a totally random key you are

00:11:35,500 --> 00:11:38,710
going on the opposite of everything

00:11:36,790 --> 00:11:41,680
these two butanone shop but you are not

00:11:38,710 --> 00:11:43,330
going to be able to know on which are

00:11:41,680 --> 00:11:44,740
then you need to perform the query so

00:11:43,330 --> 00:11:46,570
we're it will be really slow because

00:11:44,740 --> 00:11:49,120
they need to be performing on each child

00:11:46,570 --> 00:11:51,820
so you the only effort you need to put

00:11:49,120 --> 00:11:54,400
these in studying a correct shopping key

00:11:51,820 --> 00:11:58,300
for your MongoDB cluster and among the B

00:11:54,400 --> 00:12:00,190
does everything for you and also it's

00:11:58,300 --> 00:12:01,960
really really easy to enable it on to

00:12:00,190 --> 00:12:04,000
bug ears whenever you stop the two

00:12:01,960 --> 00:12:07,360
biggest project you use the gearbox week

00:12:04,000 --> 00:12:09,520
start comment and it creates a project

00:12:07,360 --> 00:12:11,920
skeleton for you is create like

00:12:09,520 --> 00:12:13,900
controllers models and sample pages

00:12:11,920 --> 00:12:16,420
which you're probably just going to

00:12:13,900 --> 00:12:19,390
trash away for a whatsoever but they are

00:12:16,420 --> 00:12:20,980
there it places a static files are being

00:12:19,390 --> 00:12:23,560
in place for view is that ops

00:12:20,980 --> 00:12:26,890
authentication if you want me if it set

00:12:23,560 --> 00:12:28,750
up the database for you and as it set up

00:12:26,890 --> 00:12:31,240
the database for you to promise you to

00:12:28,750 --> 00:12:32,920
choose which database you want to use if

00:12:31,240 --> 00:12:35,230
you don't say anything is going to be

00:12:32,920 --> 00:12:38,950
sequel alchemy if you say dash dash mean

00:12:35,230 --> 00:12:41,560
is going to be mean so MongoDB and then

00:12:38,950 --> 00:12:43,990
you just tell the project name and then

00:12:41,560 --> 00:12:46,600
it's created for you automatically by

00:12:43,990 --> 00:12:50,260
the gearbox toolkit if you want to have

00:12:46,600 --> 00:12:52,450
some information on how Ming and among

00:12:50,260 --> 00:12:53,830
the be work with two burgers you can

00:12:52,450 --> 00:12:55,510
give a look at that obvious or

00:12:53,830 --> 00:12:59,080
documentation which has actually an

00:12:55,510 --> 00:13:01,090
entire section among gonna be and if you

00:12:59,080 --> 00:13:03,010
are coming from sequel like me like

00:13:01,090 --> 00:13:05,290
you're probably are if you have a tuba

00:13:03,010 --> 00:13:08,710
gears user and lower days it's probably

00:13:05,290 --> 00:13:12,820
the most common object relational

00:13:08,710 --> 00:13:15,100
mattering by the world I should say that

00:13:12,820 --> 00:13:19,060
basal Kita's actually has a lot of thing

00:13:15,100 --> 00:13:21,300
more than URL and you can give a look at

00:13:19,060 --> 00:13:23,980
the merciless doses for dotnet

00:13:21,300 --> 00:13:26,740
documentation because Ming is actually

00:13:23,980 --> 00:13:29,080
the evil emperor of manga so it's Ming

00:13:26,740 --> 00:13:31,690
the Merciless and the Ming has been

00:13:29,080 --> 00:13:34,690
designed and developed the SOS vouch for

00:13:31,690 --> 00:13:37,640
their own use because they work on

00:13:34,690 --> 00:13:40,880
terberg years and the manga to be for

00:13:37,640 --> 00:13:44,300
all the website and they develop a mink

00:13:40,880 --> 00:13:46,610
which works much like sequel alchemy so

00:13:44,300 --> 00:13:49,870
if you are used to sequel alchemy the

00:13:46,610 --> 00:13:52,310
query syntax is really similar you just

00:13:49,870 --> 00:13:54,740
perform the Kree operation the same way

00:13:52,310 --> 00:13:56,960
about from the fact that monkey has a

00:13:54,740 --> 00:13:59,920
totally different query languages for so

00:13:56,960 --> 00:14:02,870
you're not going to right field there or

00:13:59,920 --> 00:14:04,400
limit or things like that you're just

00:14:02,870 --> 00:14:06,290
going to write this in place for a

00:14:04,400 --> 00:14:08,690
monkey to be the operators of manga to

00:14:06,290 --> 00:14:10,730
be and it works with the unit will work

00:14:08,690 --> 00:14:13,010
so that pattern is much similar to

00:14:10,730 --> 00:14:15,410
sequel alchemy you just say every

00:14:13,010 --> 00:14:18,050
operation you want to be performed every

00:14:15,410 --> 00:14:20,120
update or inception you want to be

00:14:18,050 --> 00:14:22,700
performing your unit of work and then

00:14:20,120 --> 00:14:25,610
when the unit of work gets flushed the

00:14:22,700 --> 00:14:29,480
operation happen if your program crashes

00:14:25,610 --> 00:14:32,240
or doesn't our doesn't flash the unit of

00:14:29,480 --> 00:14:34,430
work it removes it to trash it away no

00:14:32,240 --> 00:14:38,030
bright operation happen so it's useful

00:14:34,430 --> 00:14:40,250
when you have like code that might not

00:14:38,030 --> 00:14:42,880
work and you want to avoid writing data

00:14:40,250 --> 00:14:46,010
on the policies on the actual database

00:14:42,880 --> 00:14:48,050
just pay attention that sequel alchemy

00:14:46,010 --> 00:14:50,990
as it works with sequel databases is

00:14:48,050 --> 00:14:53,480
often using transactional model while a

00:14:50,990 --> 00:14:56,390
monkey has no transaction so if you I

00:14:53,480 --> 00:14:59,300
wrote half of the data and it crashes

00:14:56,390 --> 00:15:01,340
while flashing the unit of work you just

00:14:59,300 --> 00:15:03,380
wrote output the data so you probably

00:15:01,340 --> 00:15:05,390
need to keep track of what you're

00:15:03,380 --> 00:15:09,440
writing a performative coming

00:15:05,390 --> 00:15:11,390
face-to-face commits and so on and you

00:15:09,440 --> 00:15:13,400
can if you want just totally skip the

00:15:11,390 --> 00:15:15,500
unit of working go bail bond at the

00:15:13,400 --> 00:15:17,090
MongoDB level which is really cool

00:15:15,500 --> 00:15:19,190
because in that case you can use the

00:15:17,090 --> 00:15:21,050
atomic operation longer it provides a

00:15:19,190 --> 00:15:23,990
bunch of atomic operation which are

00:15:21,050 --> 00:15:25,580
performed like in the transaction you

00:15:23,990 --> 00:15:28,040
don't have transaction but you have some

00:15:25,580 --> 00:15:31,010
atomic operators so you can perform them

00:15:28,040 --> 00:15:33,050
without having concurrency problems and

00:15:31,010 --> 00:15:34,820
atomic operators are actually really

00:15:33,050 --> 00:15:38,690
powerful because they can do a lot of

00:15:34,820 --> 00:15:41,150
complex beings and as I told you is a

00:15:38,690 --> 00:15:43,700
perfect solution working on really big

00:15:41,150 --> 00:15:44,440
size so it's stable youth development

00:15:43,700 --> 00:15:47,350
movie

00:15:44,440 --> 00:15:49,930
really old system it has these issues

00:15:47,350 --> 00:15:52,900
you need to study before starting to use

00:15:49,930 --> 00:15:55,390
it I saw a lot of blog posts complaining

00:15:52,900 --> 00:15:58,360
on MongoDB is broken or lost all my data

00:15:55,390 --> 00:15:59,980
or things like that it's true if you

00:15:58,360 --> 00:16:02,140
don't know how to properly configure

00:15:59,980 --> 00:16:04,420
manga be you are going to you lose your

00:16:02,140 --> 00:16:06,010
data so pay attention to read the

00:16:04,420 --> 00:16:07,990
documentation understand what the

00:16:06,010 --> 00:16:10,630
database does by default and what it

00:16:07,990 --> 00:16:13,330
does it that's really your important

00:16:10,630 --> 00:16:16,270
thing we want to be and then after we

00:16:13,330 --> 00:16:18,940
wrote with our API and we are able to

00:16:16,270 --> 00:16:21,250
store and retrieve data we probably want

00:16:18,940 --> 00:16:24,640
to bright our test unit because everyone

00:16:21,250 --> 00:16:26,950
here right there sweets right so we can

00:16:24,640 --> 00:16:29,200
use the circle mongering memory

00:16:26,950 --> 00:16:31,330
representation which is much like the

00:16:29,200 --> 00:16:33,460
sequel lighting memorial presentation if

00:16:31,330 --> 00:16:36,580
you ever used it instead of having a

00:16:33,460 --> 00:16:40,650
real debate working on your machine you

00:16:36,580 --> 00:16:42,820
just have the database driver

00:16:40,650 --> 00:16:46,120
implementing all the database interface

00:16:42,820 --> 00:16:48,460
and saving your data in case of mongrel

00:16:46,120 --> 00:16:50,770
memory dictionaries collections of

00:16:48,460 --> 00:16:52,690
dictionaries so you can perform at the

00:16:50,770 --> 00:16:55,660
same operation so you can perform a

00:16:52,690 --> 00:16:58,510
MongoDB you just use me but you tell to

00:16:55,660 --> 00:17:00,760
me to connect the two meme which stands

00:16:58,510 --> 00:17:02,740
for manga memory and it doesn't connect

00:17:00,760 --> 00:17:05,680
when in database it just keeps the data

00:17:02,740 --> 00:17:08,709
in memory and you can platform terming

00:17:05,680 --> 00:17:11,140
cooperation update pushes or inserting

00:17:08,709 --> 00:17:14,890
data editing data looking for data and

00:17:11,140 --> 00:17:17,290
it even as support for JavaScript you

00:17:14,890 --> 00:17:20,110
know probably that Mongol we can perform

00:17:17,290 --> 00:17:21,939
JavaScript on server side you can use

00:17:20,110 --> 00:17:24,939
the web operator or you can perform

00:17:21,939 --> 00:17:27,459
metroid users writing JavaScript code

00:17:24,939 --> 00:17:29,020
that gets executed on the server and if

00:17:27,459 --> 00:17:31,090
you are using meme and you have

00:17:29,020 --> 00:17:33,550
installed part spider monkey on your

00:17:31,090 --> 00:17:38,050
system you can use the JavaScript code

00:17:33,550 --> 00:17:39,610
execution evenly among the memory and

00:17:38,050 --> 00:17:41,650
when you start the trip against budget

00:17:39,610 --> 00:17:43,720
by default you get to fully work in

00:17:41,650 --> 00:17:46,600
their suite with the Fisher to set up

00:17:43,720 --> 00:17:49,360
your models you database connection on

00:17:46,600 --> 00:17:52,300
meme and so on so you get it for free if

00:17:49,360 --> 00:17:54,810
you are big ears user so you just want

00:17:52,300 --> 00:17:57,549
to use it because it's so comfortable so

00:17:54,810 --> 00:17:59,259
convenient that there is no reason

00:17:57,549 --> 00:18:01,299
why should I start among the be silver

00:17:59,259 --> 00:18:03,190
and use them well you want to have a

00:18:01,299 --> 00:18:04,960
staging environment wherever you get the

00:18:03,190 --> 00:18:06,850
vldb server you want to have a

00:18:04,960 --> 00:18:08,769
continuous integration system where you

00:18:06,850 --> 00:18:11,230
have a you will move to be server but on

00:18:08,769 --> 00:18:16,419
your system to just check your coat

00:18:11,230 --> 00:18:18,309
before committing minutes perfect now we

00:18:16,419 --> 00:18:20,889
have everything in place and something

00:18:18,309 --> 00:18:23,259
probably Brooks like it always happen

00:18:20,889 --> 00:18:25,779
whenever you start your server it just

00:18:23,259 --> 00:18:28,210
crashes the first time you start so you

00:18:25,779 --> 00:18:30,340
need to the back how you can the back

00:18:28,210 --> 00:18:32,109
what the two begins provide the so

00:18:30,340 --> 00:18:33,850
called the background is really common

00:18:32,109 --> 00:18:36,609
in every frame work you have it one

00:18:33,850 --> 00:18:39,220
jungle your one pyramid and as far as i

00:18:36,609 --> 00:18:41,379
know you have one awesome flask so you

00:18:39,220 --> 00:18:43,899
can start at the back down and they have

00:18:41,379 --> 00:18:46,600
every query that gets a digital log on

00:18:43,899 --> 00:18:49,629
your shell and logged onto the back rub

00:18:46,600 --> 00:18:52,179
you have the timings of your queries you

00:18:49,629 --> 00:18:55,149
have in case you have javascript inside

00:18:52,179 --> 00:18:58,960
your queries like you ever wear look up

00:18:55,149 --> 00:19:00,909
or you have a MapReduce execution the

00:18:58,960 --> 00:19:02,590
debugger is going to prettify a long

00:19:00,909 --> 00:19:06,480
light your JavaScript because you are

00:19:02,590 --> 00:19:06,480
probably going just put it inside a

00:19:07,109 --> 00:19:11,830
Python string so you don't understand

00:19:09,820 --> 00:19:14,230
anything as far as the jaws can get

00:19:11,830 --> 00:19:16,059
bigger than two lines of code because we

00:19:14,230 --> 00:19:20,679
have all lazy developers and we'll mix

00:19:16,059 --> 00:19:23,200
JavaScript and Python always so the

00:19:20,679 --> 00:19:26,409
debugger is really useful because it

00:19:23,200 --> 00:19:28,659
performs all these features is also

00:19:26,409 --> 00:19:30,489
performs like profiling of your Python

00:19:28,659 --> 00:19:32,200
code timings and whatever you might need

00:19:30,489 --> 00:19:35,080
to know while developing your

00:19:32,200 --> 00:19:38,169
application but it's really good also

00:19:35,080 --> 00:19:41,710
for having an actual knowledge on how

00:19:38,169 --> 00:19:44,440
fast your server is how fast your API is

00:19:41,710 --> 00:19:47,799
because it keeps a log of all the

00:19:44,440 --> 00:19:50,200
performance of each requested god so you

00:19:47,799 --> 00:19:51,999
know how much time it has been spending

00:19:50,200 --> 00:19:54,399
performing a specific request and you

00:19:51,999 --> 00:19:56,080
know each query that got executed for

00:19:54,399 --> 00:19:57,850
each request so you know where you are

00:19:56,080 --> 00:20:00,489
going slow and why you are doing is well

00:19:57,850 --> 00:20:03,009
you probably just mix any index you

00:20:00,489 --> 00:20:05,619
probably just need the something without

00:20:03,009 --> 00:20:07,899
limit some wearing you are loading the

00:20:05,619 --> 00:20:09,879
world that basic memory whether the back

00:20:07,899 --> 00:20:11,149
Bobby is going to tell you so you can

00:20:09,879 --> 00:20:13,609
just go back to your mom

00:20:11,149 --> 00:20:17,239
we create your index and then go back

00:20:13,609 --> 00:20:20,059
into your web service going fast and

00:20:17,239 --> 00:20:22,190
this is that I shot the Bible in action

00:20:20,059 --> 00:20:24,580
this is a screenshot of a really old

00:20:22,190 --> 00:20:27,169
version actually change somehow the

00:20:24,580 --> 00:20:29,509
interface but the concepts in the same

00:20:27,169 --> 00:20:31,249
we have the nearly the same data and you

00:20:29,509 --> 00:20:34,159
can see that for which operate on that

00:20:31,249 --> 00:20:37,039
got executed my my page in this case

00:20:34,159 --> 00:20:39,349
Jason page so i don't know if it's

00:20:37,039 --> 00:20:42,109
correct to call it a page but as the

00:20:39,349 --> 00:20:45,009
back love is HTML you can see it inside

00:20:42,109 --> 00:20:48,950
the json documentation and it get custom

00:20:45,009 --> 00:20:51,289
HTML the world thing any other time

00:20:48,950 --> 00:20:53,299
spent by your common you have the

00:20:51,289 --> 00:20:55,879
comment you executed in these gates was

00:20:53,299 --> 00:20:58,969
a fine for a group group were just a

00:20:55,879 --> 00:21:01,339
model of the users groups and so on and

00:20:58,969 --> 00:21:03,589
you have each parameter you send MongoDB

00:21:01,339 --> 00:21:06,409
which in this case was nothing which

00:21:03,589 --> 00:21:09,289
means get all the groups and you have

00:21:06,409 --> 00:21:12,589
like here you have a lookup query which

00:21:09,289 --> 00:21:16,219
performs if JavaScript statement to

00:21:12,589 --> 00:21:20,539
actually do like nothing it's much like

00:21:16,219 --> 00:21:25,190
Italy and you can see that it gets

00:21:20,539 --> 00:21:27,379
alighted for you and so on so if you

00:21:25,190 --> 00:21:29,929
want to wrap it to the type something we

00:21:27,379 --> 00:21:31,429
have seen that turbo geass and among

00:21:29,929 --> 00:21:33,379
going to be a really good tools for

00:21:31,429 --> 00:21:36,139
doing that and but you probably want to

00:21:33,379 --> 00:21:37,609
try also the tj's good extension which

00:21:36,139 --> 00:21:39,589
is a two biggest extension that

00:21:37,609 --> 00:21:42,289
automatically generate is for you your

00:21:39,589 --> 00:21:44,299
recipe is it's really good when you

00:21:42,289 --> 00:21:46,219
start when you need to start with

00:21:44,299 --> 00:21:48,259
something you are probably not going to

00:21:46,219 --> 00:21:50,179
end up using it for the world problem

00:21:48,259 --> 00:21:52,999
for the world software but is really

00:21:50,179 --> 00:21:54,440
good when prototyping api's most people

00:21:52,999 --> 00:21:57,919
in the turbo gears community actually

00:21:54,440 --> 00:22:00,169
use it Holly to Papa type HTML create

00:21:57,919 --> 00:22:02,450
read update and delete controllers but

00:22:00,169 --> 00:22:04,339
it actually creates also be a P is for

00:22:02,450 --> 00:22:07,009
the same operation so it's really good

00:22:04,339 --> 00:22:10,399
it has a really good rest implementation

00:22:07,009 --> 00:22:12,320
it performs like validation on the

00:22:10,399 --> 00:22:15,289
arguments it returns the correct our

00:22:12,320 --> 00:22:18,219
code as far as a common conception of

00:22:15,289 --> 00:22:21,320
correctable codes SMS doesn't enforcing

00:22:18,219 --> 00:22:23,419
it will tell you what went wrong if an

00:22:21,320 --> 00:22:23,800
argument is missing it was a false it is

00:22:23,419 --> 00:22:26,140
going

00:22:23,800 --> 00:22:29,620
tell you a bad request this argument was

00:22:26,140 --> 00:22:32,260
required and so on and it's built in

00:22:29,620 --> 00:22:34,570
validation and I was as i was telling

00:22:32,260 --> 00:22:36,700
you which is automatically detected by

00:22:34,570 --> 00:22:39,190
your model description you can customize

00:22:36,700 --> 00:22:41,860
it if you want but by default is the

00:22:39,190 --> 00:22:43,900
texture automatically and as it is just

00:22:41,860 --> 00:22:45,940
a subclass of the rest controller you

00:22:43,900 --> 00:22:49,150
can just customize it want to replace

00:22:45,940 --> 00:22:53,260
the behavior of your putte request just

00:22:49,150 --> 00:22:55,420
plays over right they put me in the dj's

00:22:53,260 --> 00:22:58,560
good controller and you can write it on

00:22:55,420 --> 00:23:00,970
yourself want to innovate them

00:22:58,560 --> 00:23:04,690
decoration so the validation and

00:23:00,970 --> 00:23:07,630
everything else you just expose it as an

00:23:04,690 --> 00:23:10,630
innovative method which is something

00:23:07,630 --> 00:23:12,730
that two burgers permit you can get off

00:23:10,630 --> 00:23:14,710
the Declaration of this parent class

00:23:12,730 --> 00:23:19,530
method without getting the actual

00:23:14,710 --> 00:23:23,650
implementation only the decorations so

00:23:19,530 --> 00:23:26,140
it works on both equal acne a mongodb so

00:23:23,650 --> 00:23:27,880
you can use it actually whenever your

00:23:26,140 --> 00:23:31,180
databases and this is pretty cool

00:23:27,880 --> 00:23:33,190
because sometimes i have seen like in my

00:23:31,180 --> 00:23:35,050
company a few times we started with a

00:23:33,190 --> 00:23:36,640
sequel database and switch it to among

00:23:35,050 --> 00:23:38,620
gonna be just because we saw that the

00:23:36,640 --> 00:23:41,830
major use case for the application was

00:23:38,620 --> 00:23:43,930
just like reading two tables constantly

00:23:41,830 --> 00:23:46,090
and in the case you just probably want

00:23:43,930 --> 00:23:48,790
to make one sub table of the other and

00:23:46,090 --> 00:23:50,800
as the among the damage to have sub

00:23:48,790 --> 00:23:54,190
documents we often switch back to

00:23:50,800 --> 00:23:57,340
MongoDB and in that case you can use the

00:23:54,190 --> 00:23:58,870
TJX code to manage your API because you

00:23:57,340 --> 00:24:00,880
just switch the backend and everything

00:23:58,870 --> 00:24:02,770
was like before without switching much

00:24:00,880 --> 00:24:04,810
gorda partner model definitions because

00:24:02,770 --> 00:24:07,480
you are switching from an oven with the

00:24:04,810 --> 00:24:09,760
other one but there has mean gamer and

00:24:07,480 --> 00:24:12,160
sequel act may have similar syntax it

00:24:09,760 --> 00:24:15,850
just ends up being a son something like

00:24:12,160 --> 00:24:17,890
insertion replacing your modify it can

00:24:15,850 --> 00:24:22,060
perform subscene filtering a lot of

00:24:17,890 --> 00:24:24,520
other solutions for recipe is just

00:24:22,060 --> 00:24:27,040
performance of matches so whenever you

00:24:24,520 --> 00:24:30,400
are filtering your like get all of equus

00:24:27,040 --> 00:24:33,430
or so on you probably want to look for

00:24:30,400 --> 00:24:36,659
something that is named somehow like

00:24:33,430 --> 00:24:40,019
there and most api out the generators

00:24:36,659 --> 00:24:43,049
support that why the teachers got one

00:24:40,019 --> 00:24:45,029
permits that and also as a lot of

00:24:43,049 --> 00:24:47,039
configurable features so you're probably

00:24:45,029 --> 00:24:49,529
not going to need to about right

00:24:47,039 --> 00:24:52,109
anything unless you have some kind of

00:24:49,529 --> 00:24:54,720
specific requirement because you can use

00:24:52,109 --> 00:24:58,139
like multi-part Oh URL encoded

00:24:54,720 --> 00:24:59,849
parameters you can use JSON body with a

00:24:58,139 --> 00:25:03,599
JSON object with all your parameters

00:24:59,849 --> 00:25:07,080
inside you can use the conditional put

00:25:03,599 --> 00:25:09,389
method if your model has an updated at

00:25:07,080 --> 00:25:11,789
field or whatever you called it so you

00:25:09,389 --> 00:25:14,309
can put that down update the object if

00:25:11,789 --> 00:25:16,859
has been modified in the meantime since

00:25:14,309 --> 00:25:19,919
you've got it and you are updating it it

00:25:16,859 --> 00:25:21,869
can automatically perform several

00:25:19,919 --> 00:25:23,879
additional relationships even

00:25:21,869 --> 00:25:26,039
many-to-many relationships and you can

00:25:23,879 --> 00:25:28,139
update a many-to-many relationships and

00:25:26,039 --> 00:25:30,869
so on which doesn't make a lot of sense

00:25:28,139 --> 00:25:33,029
among the B but is really useful if

00:25:30,869 --> 00:25:35,639
you're using Sigma like me and by

00:25:33,029 --> 00:25:37,919
different really configurable pagination

00:25:35,639 --> 00:25:42,389
system up this is something that most

00:25:37,919 --> 00:25:44,789
API servers heavy so you have your API

00:25:42,389 --> 00:25:46,979
server in place and now you need to use

00:25:44,789 --> 00:25:49,289
it in your client application or from

00:25:46,979 --> 00:25:50,759
their website or whatever else if you

00:25:49,289 --> 00:25:52,649
are like me you probably just forgot

00:25:50,759 --> 00:25:54,989
everything you brought the moment is

00:25:52,649 --> 00:25:57,179
which project it always happened to me I

00:25:54,989 --> 00:26:00,690
don't know why I don't remember the API

00:25:57,179 --> 00:26:02,549
definition I myself declare and if you

00:26:00,690 --> 00:26:04,859
know other people the other team members

00:26:02,549 --> 00:26:07,499
don't know it because you brought them

00:26:04,859 --> 00:26:10,320
and they aren't going to use so B your T

00:26:07,499 --> 00:26:12,690
me or bribed the documentation and this

00:26:10,320 --> 00:26:14,729
is document which is the hero of your

00:26:12,690 --> 00:26:16,499
team and is the one which is always in

00:26:14,729 --> 00:26:19,080
charge of writing documentation because

00:26:16,499 --> 00:26:21,299
there is only one single guy that then 1

00:26:19,080 --> 00:26:23,970
times looks at the condensate we need

00:26:21,299 --> 00:26:26,639
documentation and goes about it and he

00:26:23,970 --> 00:26:28,289
has been sparse superpowers and some of

00:26:26,639 --> 00:26:30,629
his superpowers are actually made

00:26:28,289 --> 00:26:33,419
possible by spins contact Jason Cole

00:26:30,629 --> 00:26:35,220
which is a think extension which is

00:26:33,419 --> 00:26:37,889
pretty common in the two biggest one

00:26:35,220 --> 00:26:41,340
it's not I've seen not much it outside

00:26:37,889 --> 00:26:44,039
but the text n distinct on Twitter HTTP

00:26:41,340 --> 00:26:46,499
domain extension for spins and makes

00:26:44,039 --> 00:26:49,740
possible to document Jason base URLs

00:26:46,499 --> 00:26:53,960
what it does is just making using

00:26:49,740 --> 00:26:57,870
syntax of HTTP domain but it happens a

00:26:53,960 --> 00:26:59,850
playground for your API so it declares a

00:26:57,870 --> 00:27:02,340
form inside your documentation page

00:26:59,850 --> 00:27:04,380
where you can write the actual data you

00:27:02,340 --> 00:27:06,929
want to send API do you have a submit

00:27:04,380 --> 00:27:09,510
button it gets sent to the API and using

00:27:06,929 --> 00:27:14,390
real-time the response of API so you can

00:27:09,510 --> 00:27:17,370
play it with the API you can make like

00:27:14,390 --> 00:27:20,640
example calls already available inside

00:27:17,370 --> 00:27:22,380
the documentation and so on and of

00:27:20,640 --> 00:27:24,720
course it pretty finds you respond so

00:27:22,380 --> 00:27:26,490
you don't end up looking inside the

00:27:24,720 --> 00:27:28,890
browser as the response and you don't

00:27:26,490 --> 00:27:31,559
understand nothing because you get just

00:27:28,890 --> 00:27:34,470
a huge bunch of JSON which is not

00:27:31,559 --> 00:27:37,140
indented and so on unless you're using

00:27:34,470 --> 00:27:39,090
an indentation plugin of course and this

00:27:37,140 --> 00:27:42,650
is what you get this is a real world

00:27:39,090 --> 00:27:45,540
example for one of our references and

00:27:42,650 --> 00:27:49,500
it's a really simple API gets only one

00:27:45,540 --> 00:27:51,600
parameter get the idea of the object

00:27:49,500 --> 00:27:53,610
it's not rest the guy that started it

00:27:51,600 --> 00:27:55,890
didn't like probably the idea of having

00:27:53,610 --> 00:27:58,650
something rest and it returns the

00:27:55,890 --> 00:28:01,050
information of the present you were

00:27:58,650 --> 00:28:02,910
looking for all if it is a public

00:28:01,050 --> 00:28:05,730
present does a return information

00:28:02,910 --> 00:28:08,730
private place and you see it under that

00:28:05,730 --> 00:28:12,660
you have the sample call the automatic

00:28:08,730 --> 00:28:14,850
indented by you so you just like call

00:28:12,660 --> 00:28:18,270
the api and copy and paste inside the

00:28:14,850 --> 00:28:20,460
doc sting of the api the sample result

00:28:18,270 --> 00:28:22,110
and it gets automatically indent and i

00:28:20,460 --> 00:28:24,570
liked it for you by the string

00:28:22,110 --> 00:28:27,600
suspension and you have a field where

00:28:24,570 --> 00:28:29,880
you can write any object ID you want and

00:28:27,600 --> 00:28:31,679
submit it and see the data of the after

00:28:29,880 --> 00:28:34,140
all object so it provides a playground

00:28:31,679 --> 00:28:36,360
for the users that are reading the

00:28:34,140 --> 00:28:38,630
reference to start trying the FBI and

00:28:36,360 --> 00:28:41,400
see what happens in which data you get

00:28:38,630 --> 00:28:44,190
and if you are using two bogies you also

00:28:41,400 --> 00:28:46,950
have the TG JSON autodoc extension which

00:28:44,190 --> 00:28:49,290
is part of the TG g of the JSON whole

00:28:46,950 --> 00:28:51,720
extension which automatically generates

00:28:49,290 --> 00:28:53,970
the documentation it looks in your code

00:28:51,720 --> 00:28:56,700
in your application for every single

00:28:53,970 --> 00:28:59,100
meter that is exposed Junction you can

00:28:56,700 --> 00:29:01,380
of course that skip this metal but it

00:28:59,100 --> 00:29:02,410
looks in your code and it reads the docs

00:29:01,380 --> 00:29:04,240
things and

00:29:02,410 --> 00:29:08,170
automatically create the reference for

00:29:04,240 --> 00:29:10,060
your api's how is that done well it

00:29:08,170 --> 00:29:12,400
looks at the middle definition to see

00:29:10,060 --> 00:29:14,710
which arguments are required it looks at

00:29:12,400 --> 00:29:16,510
the validator definition to see which

00:29:14,710 --> 00:29:18,580
validate or some in place and tell to

00:29:16,510 --> 00:29:20,410
the user like this field is the required

00:29:18,580 --> 00:29:22,510
to be an integral if you variety of your

00:29:20,410 --> 00:29:25,240
son named you are not going to get

00:29:22,510 --> 00:29:28,180
anything and it automatically generates

00:29:25,240 --> 00:29:30,130
a form with some sample data like if you

00:29:28,180 --> 00:29:33,250
declare this as an integral you get a

00:29:30,130 --> 00:29:37,660
default value for an integral it just

00:29:33,250 --> 00:29:42,250
uses the validation definition to see

00:29:37,660 --> 00:29:44,940
which is the right type to use and then

00:29:42,250 --> 00:29:48,460
this is a real world example this is our

00:29:44,940 --> 00:29:52,210
TG JSON out the back looks like you have

00:29:48,460 --> 00:29:54,100
your method you have your exposed JSON

00:29:52,210 --> 00:29:56,530
to tell to a buoy also include details

00:29:54,100 --> 00:29:58,810
Jason and you have your validations in

00:29:56,530 --> 00:30:01,780
place in this case we have an optional

00:29:58,810 --> 00:30:04,930
player you can put it or not we have

00:30:01,780 --> 00:30:07,780
account which has the pio many results

00:30:04,930 --> 00:30:10,060
you want to know and you have never been

00:30:07,780 --> 00:30:12,400
driving place that if the some

00:30:10,060 --> 00:30:15,250
requirements are faded just returns you

00:30:12,400 --> 00:30:17,590
you're forbidden to assess these api and

00:30:15,250 --> 00:30:20,200
you see under the daxing which is

00:30:17,590 --> 00:30:23,140
actually automatically palace by TG json

00:30:20,200 --> 00:30:25,330
out the book and the dog thing as the

00:30:23,140 --> 00:30:27,280
classical information of what the API is

00:30:25,330 --> 00:30:30,190
going to do and then you have the

00:30:27,280 --> 00:30:33,580
special syntax the query parameters are

00:30:30,190 --> 00:30:37,050
actually far from HTTP domain so you can

00:30:33,580 --> 00:30:40,570
use it for any kind of URL not only for

00:30:37,050 --> 00:30:43,210
JSON API and you have didn't the JSON

00:30:40,570 --> 00:30:47,020
call information which tells how

00:30:43,210 --> 00:30:49,690
therefore the playground for me is to be

00:30:47,020 --> 00:30:52,000
generated so you have where you need to

00:30:49,690 --> 00:30:54,880
submit your data and you have you like

00:30:52,000 --> 00:30:56,860
the default argument if you want to put

00:30:54,880 --> 00:30:59,020
them in place yourself instead of how to

00:30:56,860 --> 00:31:00,940
generating them and you have a simple

00:30:59,020 --> 00:31:03,130
response you can put inside the

00:31:00,940 --> 00:31:06,460
documentation itself and get past and

00:31:03,130 --> 00:31:09,100
used as the default response until use

00:31:06,460 --> 00:31:10,840
it is really simple well the first thing

00:31:09,100 --> 00:31:12,670
you probably want to do is put your

00:31:10,840 --> 00:31:14,130
documentation in the place which is

00:31:12,670 --> 00:31:16,110
visible from your application

00:31:14,130 --> 00:31:18,920
you're selfish you are very busy lazy

00:31:16,110 --> 00:31:21,510
guy otherwise you need to place they

00:31:18,920 --> 00:31:24,330
allow averaging a dozen place or the

00:31:21,510 --> 00:31:27,120
wiser so lets you try to use your api

00:31:24,330 --> 00:31:28,710
you just get your brother want to fund

00:31:27,120 --> 00:31:30,420
the request of course because your

00:31:28,710 --> 00:31:32,670
documentation is probably hosted in a

00:31:30,420 --> 00:31:34,140
different space but if you just put the

00:31:32,670 --> 00:31:36,690
documentation inside the public

00:31:34,140 --> 00:31:38,820
directory of the application itself it

00:31:36,690 --> 00:31:41,940
gets F's by the same application so you

00:31:38,820 --> 00:31:44,310
can use it and play with it and to use

00:31:41,940 --> 00:31:46,830
the TG JSON out doc you just go inside

00:31:44,310 --> 00:31:48,600
your spins configuration file your

00:31:46,830 --> 00:31:51,840
neighbors all the extension you need

00:31:48,600 --> 00:31:54,180
like the HTTP domain the JSON call MTG

00:31:51,840 --> 00:31:56,310
jace on auto dock and then you link to

00:31:54,180 --> 00:31:58,080
their configuration file the pace deploy

00:31:56,310 --> 00:32:01,560
compatible configuration file of your

00:31:58,080 --> 00:32:03,090
application the TG Jason autodoc

00:32:01,560 --> 00:32:04,920
extension is going to avoid that

00:32:03,090 --> 00:32:07,950
configuration file see which is the

00:32:04,920 --> 00:32:10,440
application model packaging place loaded

00:32:07,950 --> 00:32:14,280
and pops all the control of exports by

00:32:10,440 --> 00:32:15,690
the application and then you just need

00:32:14,280 --> 00:32:17,730
to put somewhere inside your

00:32:15,690 --> 00:32:21,390
documentation hey disease the reference

00:32:17,730 --> 00:32:24,030
and say like put the reference here and

00:32:21,390 --> 00:32:26,190
if you want to add it you can say like

00:32:24,030 --> 00:32:28,290
skip these URLs because I don't want to

00:32:26,190 --> 00:32:30,900
expose by admin api's inside the

00:32:28,290 --> 00:32:32,580
reference and so on and then of it that

00:32:30,900 --> 00:32:35,280
you get exactly the one we saw before

00:32:32,580 --> 00:32:36,840
and your team members are now happy as

00:32:35,280 --> 00:32:38,490
soon as they read them in your

00:32:36,840 --> 00:32:40,650
documentation they are going to

00:32:38,490 --> 00:32:42,960
congratulate with you because they made

00:32:40,650 --> 00:32:45,720
you made their life easier and just like

00:32:42,960 --> 00:32:48,000
five lines of code now you are fully

00:32:45,720 --> 00:32:49,740
working and documented api and you

00:32:48,000 --> 00:32:52,620
probably want to deploy somewhere unless

00:32:49,740 --> 00:32:55,050
you are already epica with having york

00:32:52,620 --> 00:32:57,630
or computer serving everything on the

00:32:55,050 --> 00:32:59,880
internet and so on so when you want to

00:32:57,630 --> 00:33:02,730
deploy your api you don't want to use

00:32:59,880 --> 00:33:05,490
the building server it's something i see

00:33:02,730 --> 00:33:07,560
i saw people do a few times if something

00:33:05,490 --> 00:33:09,480
that doesn't work is not concurrent it

00:33:07,560 --> 00:33:11,930
doesn't scale if there's a lot of issues

00:33:09,480 --> 00:33:15,600
and so on you want to use a more

00:33:11,930 --> 00:33:18,300
structure than well-performed solution

00:33:15,600 --> 00:33:20,490
and my favorite solution current is co

00:33:18,300 --> 00:33:23,040
co sign shows that there has been a

00:33:20,490 --> 00:33:25,230
previous talk by taxi app in this

00:33:23,040 --> 00:33:27,060
conference on secret ensure that it was

00:33:25,230 --> 00:33:27,370
a really cool park if you have not seen

00:33:27,060 --> 00:33:29,440
it

00:33:27,370 --> 00:33:32,440
go on youtube look at the registration

00:33:29,440 --> 00:33:34,870
and watch it because it's really great

00:33:32,440 --> 00:33:37,360
talk and see your credentials that have

00:33:34,870 --> 00:33:39,700
a super easy solution and flexible they

00:33:37,360 --> 00:33:42,070
don't only manage your application but

00:33:39,700 --> 00:33:44,410
they manage your wall ecosystem required

00:33:42,070 --> 00:33:46,330
by your application inside the two

00:33:44,410 --> 00:33:48,880
bogies documentation you have a web page

00:33:46,330 --> 00:33:51,910
inside the cookbook how to deploy to

00:33:48,880 --> 00:33:53,890
baguio sincere so it's actually a fancy

00:33:51,910 --> 00:33:56,680
design for the two values is one of the

00:33:53,890 --> 00:33:59,410
two suggested deploy needle and you have

00:33:56,680 --> 00:34:00,910
inside the gearbox toolkit some comments

00:33:59,410 --> 00:34:04,780
while timate the deployed configuration

00:34:00,910 --> 00:34:08,830
process what you need to do it just

00:34:04,780 --> 00:34:12,310
create a circus configuration file in

00:34:08,830 --> 00:34:15,129
this case it's the minimal case is just

00:34:12,310 --> 00:34:17,379
a sea of crustacean with telling an

00:34:15,129 --> 00:34:19,389
include statement to include the

00:34:17,379 --> 00:34:22,090
configuration for every application I

00:34:19,389 --> 00:34:24,460
upon that Sarah the minimum sequence

00:34:22,090 --> 00:34:27,100
configuration required no more to start

00:34:24,460 --> 00:34:29,050
using circles well you probably want to

00:34:27,100 --> 00:34:31,450
add a lot more options but it's been the

00:34:29,050 --> 00:34:33,790
minimum requirement then you move inside

00:34:31,450 --> 00:34:35,830
your application you enable your

00:34:33,790 --> 00:34:37,990
beautiful environment the one you need

00:34:35,830 --> 00:34:39,760
to serve their you want to use with your

00:34:37,990 --> 00:34:43,330
application if you are using the util

00:34:39,760 --> 00:34:45,669
environment you want to install pick the

00:34:43,330 --> 00:34:47,590
gearbox tools extensions so you have the

00:34:45,669 --> 00:34:49,480
comments automatically generate a

00:34:47,590 --> 00:34:52,419
configuration and then you just run

00:34:49,480 --> 00:34:54,879
gearbox deploys yokels in this case with

00:34:52,419 --> 00:34:57,300
the given back n you can choose a lot of

00:34:54,879 --> 00:35:01,180
different back-end shows that is the

00:34:57,300 --> 00:35:03,070
whiskey server use bicycles it's not the

00:35:01,180 --> 00:35:06,520
only one you can use bodies like the

00:35:03,070 --> 00:35:08,560
default one ensure that is actually not

00:35:06,520 --> 00:35:10,840
a real whiskey server it's more like a

00:35:08,560 --> 00:35:12,580
proxy server I don't know if it's

00:35:10,840 --> 00:35:14,890
correct to call it that way but it's

00:35:12,580 --> 00:35:18,130
much like what it does because it beans

00:35:14,890 --> 00:35:20,890
to an existing socket open it by seal

00:35:18,130 --> 00:35:23,350
itself instead of working an opening in

00:35:20,890 --> 00:35:27,550
your sock itself you read from there and

00:35:23,350 --> 00:35:29,380
then forward it to a real back end so

00:35:27,550 --> 00:35:32,170
you can you show that with javon

00:35:29,380 --> 00:35:35,560
waitress mainul or whatever you want to

00:35:32,170 --> 00:35:37,480
use it just performs like a common setup

00:35:35,560 --> 00:35:39,710
interface for every different back-end

00:35:37,480 --> 00:35:40,970
so you starting on G

00:35:39,710 --> 00:35:42,950
then you want to switch the main

00:35:40,970 --> 00:35:45,349
although you start to nowhere wait right

00:35:42,950 --> 00:35:47,540
so you want to switch on GM you just

00:35:45,349 --> 00:35:50,359
change a single configuration online

00:35:47,540 --> 00:35:52,430
saying use GM intense that they can and

00:35:50,359 --> 00:35:54,230
now your application is on GM and it

00:35:52,430 --> 00:35:56,690
shows that exposes the same

00:35:54,230 --> 00:35:58,730
configuration interface for both GM and

00:35:56,690 --> 00:36:00,859
waitress or you whatever you want to use

00:35:58,730 --> 00:36:03,490
so you don't have to set up your

00:36:00,859 --> 00:36:06,980
configuration deploy again from scratch

00:36:03,490 --> 00:36:09,619
and then I save the output of the carbon

00:36:06,980 --> 00:36:11,630
inside my configuration file which is of

00:36:09,619 --> 00:36:13,970
course inside the configs directory so

00:36:11,630 --> 00:36:17,270
gets included by sequence itself and

00:36:13,970 --> 00:36:19,339
then I style CEO cos I see my logs my

00:36:17,270 --> 00:36:21,500
project start so it worked like a

00:36:19,339 --> 00:36:23,930
Spectre then required light single line

00:36:21,500 --> 00:36:26,270
of code and I don't even need to know

00:36:23,930 --> 00:36:28,190
what has been generated what is going to

00:36:26,270 --> 00:36:30,200
happen is I show you that the deploy see

00:36:28,190 --> 00:36:32,420
whose common reads your application

00:36:30,200 --> 00:36:34,580
configuration file when you're using

00:36:32,420 --> 00:36:36,770
paste deployers the configuration system

00:36:34,580 --> 00:36:39,830
you have an innie file or something like

00:36:36,770 --> 00:36:42,470
that in place and the sequence reads

00:36:39,830 --> 00:36:44,690
that decides all the option they need to

00:36:42,470 --> 00:36:46,490
be changed like switches of the bug mode

00:36:44,690 --> 00:36:47,750
switches off automatic complete

00:36:46,490 --> 00:36:49,609
reloading everything's in place

00:36:47,750 --> 00:36:51,349
everything which is common in trouble

00:36:49,609 --> 00:36:53,810
years when you switch from development

00:36:51,349 --> 00:36:55,670
to production environment and it writes

00:36:53,810 --> 00:36:58,190
as you cruise configuration for your

00:36:55,670 --> 00:37:00,099
application and this is our sequence

00:36:58,190 --> 00:37:03,170
configuration that's what it looks like

00:37:00,099 --> 00:37:05,330
so its pretty long run not really

00:37:03,170 --> 00:37:08,210
complex and it gets written for you by

00:37:05,330 --> 00:37:10,730
the gearbox common the first line tell

00:37:08,210 --> 00:37:14,630
for my project which environment to set

00:37:10,730 --> 00:37:17,000
up and actually newer version of civ cuz

00:37:14,630 --> 00:37:19,430
you have a simpler syntax you just can

00:37:17,000 --> 00:37:23,089
declare of the environment for the

00:37:19,430 --> 00:37:27,020
process watches and gets used but this

00:37:23,089 --> 00:37:30,440
is what you did not like and maybe two

00:37:27,020 --> 00:37:32,780
or one versions ago on co goes and you

00:37:30,440 --> 00:37:34,609
set up the path where you will find your

00:37:32,780 --> 00:37:38,000
script then you set up your viet anh

00:37:34,609 --> 00:37:40,160
environment pet so it gets used by the

00:37:38,000 --> 00:37:42,109
vehicle environment and you just set up

00:37:40,160 --> 00:37:45,560
your working directory for the watcher

00:37:42,109 --> 00:37:47,330
house includes works well it starts a

00:37:45,560 --> 00:37:49,430
bunch of programs you can compare it

00:37:47,330 --> 00:37:52,369
like to daemon tools or other so we

00:37:49,430 --> 00:37:53,990
supervise the other solutions like that

00:37:52,369 --> 00:37:56,660
so you just tell that your application

00:37:53,990 --> 00:37:59,240
is a common and specifically you show

00:37:56,660 --> 00:38:01,430
that common you tap the back and you

00:37:59,240 --> 00:38:03,079
tell show that which file descriptor to

00:38:01,430 --> 00:38:05,420
use which is the thing that has been

00:38:03,079 --> 00:38:07,819
opened by C equals and you tend to show

00:38:05,420 --> 00:38:10,849
that which based configuration file to

00:38:07,819 --> 00:38:13,730
load any dis Kate the production fighter

00:38:10,849 --> 00:38:17,480
gets automatically generated by gearbox

00:38:13,730 --> 00:38:19,940
itself and then you can set up like the

00:38:17,480 --> 00:38:21,859
number of processors and so on for your

00:38:19,940 --> 00:38:23,390
application then you can redirect the

00:38:21,859 --> 00:38:25,220
output stream if you want to say

00:38:23,390 --> 00:38:27,680
whatever your application right so long

00:38:25,220 --> 00:38:29,809
somewhere and like you declare any

00:38:27,680 --> 00:38:31,369
socket that needs to be open by seeing

00:38:29,809 --> 00:38:34,970
because if you declare them that way

00:38:31,369 --> 00:38:37,249
instead of letting your comment open the

00:38:34,970 --> 00:38:39,289
socket is far more faster because you

00:38:37,249 --> 00:38:42,769
actually reuse the same socket is an

00:38:39,289 --> 00:38:46,220
opening closing new one and circles can

00:38:42,769 --> 00:38:48,589
actually orchestrate your wall stack so

00:38:46,220 --> 00:38:50,509
this is a really cool feature as you can

00:38:48,589 --> 00:38:53,960
see is actually a demonic process

00:38:50,509 --> 00:38:57,319
manager I will call it something like

00:38:53,960 --> 00:38:59,660
that and you just stop co coos and then

00:38:57,319 --> 00:39:01,759
you can set your configuration files and

00:38:59,660 --> 00:39:05,180
starts all the processes you need to

00:39:01,759 --> 00:39:07,069
have to make your application work so

00:39:05,180 --> 00:39:09,650
like your application requires ladies

00:39:07,069 --> 00:39:12,289
you add the information of how to start

00:39:09,650 --> 00:39:13,730
readies to your Co Coast configuration

00:39:12,289 --> 00:39:15,680
and it gets started with your

00:39:13,730 --> 00:39:19,220
application and you can even choose the

00:39:15,680 --> 00:39:21,829
sequence of operation and you're even a

00:39:19,220 --> 00:39:24,619
bunch of plugins to monitor the state of

00:39:21,829 --> 00:39:26,950
your application by default sequence as

00:39:24,619 --> 00:39:30,589
a web interface that as you like the

00:39:26,950 --> 00:39:33,430
memory consumption CPU cycles and things

00:39:30,589 --> 00:39:36,739
like that and you have also a bunch of

00:39:33,430 --> 00:39:39,109
plug-ins for specific services like you

00:39:36,739 --> 00:39:41,480
have already plugins that instead of

00:39:39,109 --> 00:39:44,119
just watching afraid disease in

00:39:41,480 --> 00:39:46,249
execution is also tries to connect it to

00:39:44,119 --> 00:39:49,009
see if it is actually working that's not

00:39:46,249 --> 00:39:51,319
froze or things like that and so you can

00:39:49,009 --> 00:39:53,569
perform actually a lot of complex

00:39:51,319 --> 00:39:56,089
operation which are usually performed by

00:39:53,569 --> 00:39:59,569
third-party tools or things like that in

00:39:56,089 --> 00:40:02,210
a single tool as like plug-ins for

00:39:59,569 --> 00:40:05,339
salary or whatever you might need to do

00:40:02,210 --> 00:40:08,219
add there is also plug in to have a

00:40:05,339 --> 00:40:10,829
vo follows manager in size yokels so you

00:40:08,219 --> 00:40:13,229
can just start CEO constancy who starts

00:40:10,829 --> 00:40:15,930
a plug-in that listings on port 80 and

00:40:13,229 --> 00:40:18,089
forwards requests so you are declared

00:40:15,930 --> 00:40:20,460
applications inside vehicles so you can

00:40:18,089 --> 00:40:22,529
avoid having a front-end web server if

00:40:20,460 --> 00:40:24,690
you want for example that's funny not

00:40:22,529 --> 00:40:26,729
something you want to do one production

00:40:24,690 --> 00:40:28,710
but it might be useful in your

00:40:26,729 --> 00:40:31,460
continuous integration system or

00:40:28,710 --> 00:40:34,499
continuous deployment system and so on

00:40:31,460 --> 00:40:36,869
if you want to have more informations on

00:40:34,499 --> 00:40:38,609
circles you can actually give a look at

00:40:36,869 --> 00:40:40,799
the sequence documentation which is

00:40:38,609 --> 00:40:43,259
pretty well written as a lot of examples

00:40:40,799 --> 00:40:47,249
and you will find everything you might

00:40:43,259 --> 00:40:50,719
need to know they're so questions this

00:40:47,249 --> 00:40:50,719
is practically everything I wanted

00:41:10,750 --> 00:41:20,050
thank you very interesting um I've seen

00:41:14,620 --> 00:41:22,420
I do a lot of high-frequency Jason stuff

00:41:20,050 --> 00:41:25,990
and seen there's a bottleneck for

00:41:22,420 --> 00:41:28,150
encoding and decoding Jason using for

00:41:25,990 --> 00:41:30,340
example simple Jason's quite slow notice

00:41:28,150 --> 00:41:33,670
of alternatives what is too low gears

00:41:30,340 --> 00:41:37,090
using by default while actually turbo

00:41:33,670 --> 00:41:40,270
gears use a simple JSON by default so if

00:41:37,090 --> 00:41:43,180
you have the C speedups in place is not

00:41:40,270 --> 00:41:48,250
so slow to be your actual application

00:41:43,180 --> 00:41:50,170
bottleneck body can be the issue one of

00:41:48,250 --> 00:41:53,050
the things you might want to know is

00:41:50,170 --> 00:41:54,850
that there is some way for using MongoDB

00:41:53,050 --> 00:41:57,040
as a pass through because MongoDB

00:41:54,850 --> 00:41:58,960
actually uses Jason for internal

00:41:57,040 --> 00:42:02,230
representation leviton's dictionaries

00:41:58,960 --> 00:42:04,900
and so on so you can actually when you

00:42:02,230 --> 00:42:06,760
are using JSON to send back your

00:42:04,900 --> 00:42:09,550
response you're actually encoding in

00:42:06,760 --> 00:42:11,560
JSON two times because you are getting

00:42:09,550 --> 00:42:14,890
json in the middle and then you encode

00:42:11,560 --> 00:42:16,690
it again which is a something which is

00:42:14,890 --> 00:42:18,370
actually really complex people don't do

00:42:16,690 --> 00:42:20,230
that because you are messing with think

00:42:18,370 --> 00:42:23,740
there are more stuff on Mungo and so on

00:42:20,230 --> 00:42:26,140
but you can retrieve the binary JSON in

00:42:23,740 --> 00:42:29,440
serp and send it back and so on which

00:42:26,140 --> 00:42:30,880
skips an encoding part I don't know if

00:42:29,440 --> 00:42:33,670
you want to do that I think that

00:42:30,880 --> 00:42:35,440
encoding Jason is not a real bottleneck

00:42:33,670 --> 00:42:37,510
of your application in real what is

00:42:35,440 --> 00:42:41,700
probably going to be your database the

00:42:37,510 --> 00:42:41,700
first bottle neck and things like that

00:42:42,570 --> 00:42:48,310
but there are any ways on faster and

00:42:45,430 --> 00:42:51,070
libraries I never tried them actually

00:42:48,310 --> 00:42:53,560
you're usually rely on simple JSON with

00:42:51,070 --> 00:42:55,480
see speed ups in place is pretty fast

00:42:53,560 --> 00:42:59,080
but I saw that there are a bunch of

00:42:55,480 --> 00:43:00,850
Python libraries with rap see encoders

00:42:59,080 --> 00:43:03,700
and there are some of them which are but

00:43:00,850 --> 00:43:05,770
we also work we've seen the response so

00:43:03,700 --> 00:43:07,420
when you need to parse JSON you don't

00:43:05,770 --> 00:43:09,460
need to have them all response you can

00:43:07,420 --> 00:43:12,130
pass pieces of it and things like that

00:43:09,460 --> 00:43:21,070
just look on github I remember seeing a

00:43:12,130 --> 00:43:22,340
bunch of that anybody else okay thank

00:43:21,070 --> 00:43:24,400
you very much

00:43:22,340 --> 00:43:24,400

YouTube URL: https://www.youtube.com/watch?v=OZJzRYxxpMs


