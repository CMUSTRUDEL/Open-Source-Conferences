Title: Petr Viktorin - Terminals, command lines, and text interfaces
Publication date: 2015-04-18
Playlist: EuroPython 2013
Description: 
	[EuroPython 2013] Petr Viktorin - Terminals, command lines, and text interfaces - 05 July 2013 "Track Spaghetti"
Captions: 
	00:00:04,370 --> 00:00:11,730
so hello everybody and welcome to our

00:00:09,360 --> 00:00:16,230
last day of the conference here in

00:00:11,730 --> 00:00:17,960
Florence after a lot of days with what

00:00:16,230 --> 00:00:21,060
basic technologies and the

00:00:17,960 --> 00:00:30,599
three-dimensional things here it is an

00:00:21,060 --> 00:00:32,790
old-school talk by Peter thank you so

00:00:30,599 --> 00:00:34,500
hello I'm Peter i work at Red Hat on

00:00:32,790 --> 00:00:37,559
identity management bringing a little

00:00:34,500 --> 00:00:39,390
Python to enterprises in case you

00:00:37,559 --> 00:00:42,600
haven't noticed without desiring so if

00:00:39,390 --> 00:00:44,700
you're interested to go there I also

00:00:42,600 --> 00:00:46,670
helped organize python meetup san bruno

00:00:44,700 --> 00:00:51,239
so if you ever visit the Czech Republic

00:00:46,670 --> 00:00:55,980
go to python dots easy but what we'll

00:00:51,239 --> 00:00:58,050
talk about today is consoles so in the

00:00:55,980 --> 00:01:01,050
old days when computers got fast enough

00:00:58,050 --> 00:01:03,930
to be interactive people connected them

00:01:01,050 --> 00:01:08,610
to teletypes which are basically a

00:01:03,930 --> 00:01:10,860
typewriter and a printer and you can

00:01:08,610 --> 00:01:14,250
send messages to another teletype or you

00:01:10,860 --> 00:01:18,119
can control a computer with them that's

00:01:14,250 --> 00:01:20,850
still in the TTYL contraction that you

00:01:18,119 --> 00:01:22,920
can see sometimes today it's called it

00:01:20,850 --> 00:01:25,020
also a terminal because it was at the

00:01:22,920 --> 00:01:28,439
end of the wire or a console because

00:01:25,020 --> 00:01:32,820
it's pretty much for the big box then

00:01:28,439 --> 00:01:36,060
bit later came unix and said everything

00:01:32,820 --> 00:01:38,850
is a file so normal pfizer files disks

00:01:36,060 --> 00:01:41,939
or partitions are files anything you can

00:01:38,850 --> 00:01:47,009
reach 40 more right to as a file so a

00:01:41,939 --> 00:01:50,100
network socket pi so terminals also our

00:01:47,009 --> 00:01:52,229
files and unix and the way it works is

00:01:50,100 --> 00:01:54,659
you write something on the keyboard goes

00:01:52,229 --> 00:01:58,820
through the colonel and the process gets

00:01:54,659 --> 00:02:01,230
it on a special file called standard in

00:01:58,820 --> 00:02:04,320
process right something out that goes

00:02:01,230 --> 00:02:06,180
through standard output and to the

00:02:04,320 --> 00:02:08,399
screen or printer or whatever you have

00:02:06,180 --> 00:02:11,060
there oh so now standard error so you

00:02:08,399 --> 00:02:13,230
can redirect those independently and

00:02:11,060 --> 00:02:14,850
something that processes the standard

00:02:13,230 --> 00:02:18,750
output would get confused by all your

00:02:14,850 --> 00:02:22,250
error messages it's a bit complicated

00:02:18,750 --> 00:02:24,420
now because this whole machinery for

00:02:22,250 --> 00:02:27,450
interacting with the hardware terminals

00:02:24,420 --> 00:02:30,209
is connected to a pseudo terminal and a

00:02:27,450 --> 00:02:31,709
terminal emulator which draw stuff in

00:02:30,209 --> 00:02:35,400
your nice little window on your

00:02:31,709 --> 00:02:37,590
graphical screen and it's also a bit

00:02:35,400 --> 00:02:39,660
more complicated in that if you type

00:02:37,590 --> 00:02:43,080
something on the keyboard it doesn't go

00:02:39,660 --> 00:02:45,060
directly to your process because what

00:02:43,080 --> 00:02:48,989
happens if you for example press

00:02:45,060 --> 00:02:52,680
backspace we don't want the process to

00:02:48,989 --> 00:02:54,720
handle backspace so the colonel keeps a

00:02:52,680 --> 00:02:56,730
little buffer and you can edit that

00:02:54,720 --> 00:02:59,880
buffer and whenever you press enter the

00:02:56,730 --> 00:03:04,610
whole line gets sent to the process you

00:02:59,880 --> 00:03:07,830
can can control this functionality

00:03:04,610 --> 00:03:09,900
biases call code I control which is

00:03:07,830 --> 00:03:14,100
pretty much do something to a file

00:03:09,900 --> 00:03:15,930
that's not file like so you can turn off

00:03:14,100 --> 00:03:17,910
this functionality or modify it in

00:03:15,930 --> 00:03:20,760
different ways another thing the colonel

00:03:17,910 --> 00:03:22,590
handles is a few press control-c it

00:03:20,760 --> 00:03:25,980
sends a signal to the process saying

00:03:22,590 --> 00:03:28,040
yeah hey somebody wants you dead and if

00:03:25,980 --> 00:03:32,880
the process doesn't respond well go

00:03:28,040 --> 00:03:35,040
along you can also press ctrl Z which

00:03:32,880 --> 00:03:38,580
suspends the process and there's a whole

00:03:35,040 --> 00:03:43,680
machinery involving signals and sessions

00:03:38,580 --> 00:03:45,989
that makes this all work ok there's also

00:03:43,680 --> 00:03:48,209
a window size each terminal has two

00:03:45,989 --> 00:03:50,070
numbers attached which is pretty much

00:03:48,209 --> 00:03:53,900
the resolution of the screen of this

00:03:50,070 --> 00:03:56,790
screen is 41 by 17 for some reason

00:03:53,900 --> 00:03:59,459
characters and the process can get that

00:03:56,790 --> 00:04:02,280
information and whenever the screen size

00:03:59,459 --> 00:04:06,120
changes a signal gets and saying hey you

00:04:02,280 --> 00:04:08,070
should read those two numbers again you

00:04:06,120 --> 00:04:10,049
can look at all these properties or

00:04:08,070 --> 00:04:11,090
terminal hats there's quite a lot of

00:04:10,049 --> 00:04:13,769
them

00:04:11,090 --> 00:04:16,290
there's a speed 40 terminals there are

00:04:13,769 --> 00:04:18,630
the frozen columns there are settings

00:04:16,290 --> 00:04:22,139
for what keys control this signal

00:04:18,630 --> 00:04:26,520
functionality a whole slew of stuff I

00:04:22,139 --> 00:04:30,540
have no idea about this terminal was in

00:04:26,520 --> 00:04:32,190
utf-8 mode and echo means that when I

00:04:30,540 --> 00:04:34,080
typed something on the keyboard it

00:04:32,190 --> 00:04:36,210
automatically appears on the screen

00:04:34,080 --> 00:04:37,560
without the process doing something and

00:04:36,210 --> 00:04:43,440
you can of course change all of these

00:04:37,560 --> 00:04:45,240
turn them off and on and so on so we

00:04:43,440 --> 00:04:48,210
have these these are the colonel handles

00:04:45,240 --> 00:04:50,669
and what the colonel handles and the

00:04:48,210 --> 00:04:52,950
terminal itself because many companies

00:04:50,669 --> 00:04:55,650
made them and they wanted to be better

00:04:52,950 --> 00:04:58,950
than everybody else so they added some

00:04:55,650 --> 00:05:01,889
new functionality like bold text so you

00:04:58,950 --> 00:05:04,710
send a special character saying I want

00:05:01,889 --> 00:05:06,270
text to be bold now and all the texts

00:05:04,710 --> 00:05:08,220
that she wrote from that point on was

00:05:06,270 --> 00:05:12,539
bold then you send a character that's a

00:05:08,220 --> 00:05:14,789
reset can get colors this way you can

00:05:12,539 --> 00:05:18,720
get underline text you can get blinking

00:05:14,789 --> 00:05:20,970
text you can also move the cursor so if

00:05:18,720 --> 00:05:22,950
you want to write something in the

00:05:20,970 --> 00:05:25,229
middle of the screen you send special

00:05:22,950 --> 00:05:27,919
character not say these are the cordons

00:05:25,229 --> 00:05:31,620
I want the text to be displayed at and

00:05:27,919 --> 00:05:35,160
wrightwood there's an ascii code for

00:05:31,620 --> 00:05:37,620
beep you can have you can change

00:05:35,160 --> 00:05:39,060
character set so you send special codes

00:05:37,620 --> 00:05:41,460
and then the rest of the text is

00:05:39,060 --> 00:05:44,760
illegible fortunately you can also use

00:05:41,460 --> 00:05:48,289
unicode these days if you ask nicely you

00:05:44,760 --> 00:05:52,380
can also get the mouse input from

00:05:48,289 --> 00:05:53,970
terminal emulators and so there are all

00:05:52,380 --> 00:05:56,580
these different things and not all

00:05:53,970 --> 00:05:59,010
terminals support these and some support

00:05:56,580 --> 00:06:03,150
a bit more so it's pretty much all a

00:05:59,010 --> 00:06:06,930
giant backwards compatible mess so why

00:06:03,150 --> 00:06:08,880
do I use this why do I use this he use

00:06:06,930 --> 00:06:11,550
this because text user interfaces are

00:06:08,880 --> 00:06:14,669
simple we all started yep writing a text

00:06:11,550 --> 00:06:17,479
user interface now text user interfaces

00:06:14,669 --> 00:06:20,759
are universal try

00:06:17,479 --> 00:06:24,150
going to the manual of your favorite

00:06:20,759 --> 00:06:27,270
library and it will say to use this do

00:06:24,150 --> 00:06:30,330
pip install by shiny lid there's this

00:06:27,270 --> 00:06:32,699
assumption that terminals are on every

00:06:30,330 --> 00:06:34,440
computer if a computer doesn't have a

00:06:32,699 --> 00:06:38,550
terminal it's probably a phone or some

00:06:34,440 --> 00:06:40,350
other entertainment device whatever text

00:06:38,550 --> 00:06:43,710
user interfaces are scriptable you can

00:06:40,350 --> 00:06:46,289
take the output of one program and pipe

00:06:43,710 --> 00:06:48,259
it to another program and that other

00:06:46,289 --> 00:06:51,810
program can parse the output

00:06:48,259 --> 00:06:54,570
successfully or not and do something

00:06:51,810 --> 00:06:58,620
with it of course he can use JSON for

00:06:54,570 --> 00:07:00,539
this or you can use rest api but in that

00:06:58,620 --> 00:07:06,210
case you have to have a server and it's

00:07:00,539 --> 00:07:09,389
all very complicated also import text

00:07:06,210 --> 00:07:11,669
formats work in every language if he you

00:07:09,389 --> 00:07:15,330
Jace on it doesn't really matter well to

00:07:11,669 --> 00:07:17,610
say see if you were at the google code

00:07:15,330 --> 00:07:19,050
jam you could notice that the inputs and

00:07:17,610 --> 00:07:25,010
outputs through all the problems were

00:07:19,050 --> 00:07:27,630
simple space separated text files also

00:07:25,010 --> 00:07:30,240
text user interfaces are lightweight if

00:07:27,630 --> 00:07:32,490
I streamed this presentation via telnet

00:07:30,240 --> 00:07:35,070
or something I would transfer about a

00:07:32,490 --> 00:07:37,590
megabyte which is nothing and it's not

00:07:35,070 --> 00:07:41,400
very optimized and also text you know

00:07:37,590 --> 00:07:44,669
first interfaces are cool right please

00:07:41,400 --> 00:07:46,620
to you otherwise why are you here now

00:07:44,669 --> 00:07:49,409
we're a bunch of geeks who want nothing

00:07:46,620 --> 00:07:53,970
else than just stared greentech step in

00:07:49,409 --> 00:07:56,310
a black background right so what are the

00:07:53,970 --> 00:08:01,169
types of texts user interfaces we have

00:07:56,310 --> 00:08:03,960
blind based like cat rep get simple

00:08:01,169 --> 00:08:07,590
stuff we have full screen like these

00:08:03,960 --> 00:08:10,380
slides not take over your terminal so

00:08:07,590 --> 00:08:12,990
the first one is simple Universal

00:08:10,380 --> 00:08:17,280
scriptable lightweight the second one

00:08:12,990 --> 00:08:20,039
not so much so when are you build a text

00:08:17,280 --> 00:08:22,560
user interface you should decide which

00:08:20,039 --> 00:08:24,930
one you want to do you want to do a line

00:08:22,560 --> 00:08:27,630
based and make it friendly with all the

00:08:24,930 --> 00:08:30,480
other UNIX see stuff on the system or

00:08:27,630 --> 00:08:32,919
you want to make it to land full screen

00:08:30,480 --> 00:08:35,979
and that Kasich you should probably go

00:08:32,919 --> 00:08:39,669
for a traditional desktop app or web app

00:08:35,979 --> 00:08:41,650
or something if if you're doing

00:08:39,669 --> 00:08:43,360
something for users if you have a UX

00:08:41,650 --> 00:08:47,170
designer then you're probably not doing

00:08:43,360 --> 00:08:51,520
a text step a text app is for guys like

00:08:47,170 --> 00:08:55,210
you and once you have that he parts the

00:08:51,520 --> 00:08:58,210
command line arguments which pretty much

00:08:55,210 --> 00:09:01,150
have to do for every up yeah you handle

00:08:58,210 --> 00:09:03,910
the input somehow and you are push the

00:09:01,150 --> 00:09:09,100
outfit so the first thing is the command

00:09:03,910 --> 00:09:11,529
line arguments normally use what's

00:09:09,100 --> 00:09:13,510
called the new style there are other

00:09:11,529 --> 00:09:15,180
styles too but this one is used pretty

00:09:13,510 --> 00:09:17,950
much everywhere now because it's better

00:09:15,180 --> 00:09:22,480
so you can have positional arguments you

00:09:17,950 --> 00:09:24,640
call the program with some argument like

00:09:22,480 --> 00:09:28,210
the file you want to process and you

00:09:24,640 --> 00:09:32,430
have options single- means a single

00:09:28,210 --> 00:09:36,040
letter option two minuses means the

00:09:32,430 --> 00:09:39,520
forward option and options of course can

00:09:36,040 --> 00:09:42,310
have arguments too and you can have more

00:09:39,520 --> 00:09:44,980
options and there's then there's this

00:09:42,310 --> 00:09:47,500
pretty relatively new thing called

00:09:44,980 --> 00:09:50,680
subcommands which means you have one

00:09:47,500 --> 00:09:53,350
command that does that has different

00:09:50,680 --> 00:09:55,839
subcommands like get log and then you

00:09:53,350 --> 00:09:58,600
can have options that apply to the git

00:09:55,839 --> 00:10:00,520
command like configuration and you can

00:09:58,600 --> 00:10:06,250
have options that apply to the sub

00:10:00,520 --> 00:10:09,100
command like that so how do you do this

00:10:06,250 --> 00:10:11,970
in Python you import art bars there's

00:10:09,100 --> 00:10:15,220
also an older one called our octoparse

00:10:11,970 --> 00:10:19,510
but you know if you should use the real

00:10:15,220 --> 00:10:23,200
one so how do you use our parts you

00:10:19,510 --> 00:10:28,900
construct an argument parser object you

00:10:23,200 --> 00:10:30,880
add argument objects to it these are the

00:10:28,900 --> 00:10:33,940
names there's an action that it should

00:10:30,880 --> 00:10:37,000
store some value there's some help text

00:10:33,940 --> 00:10:39,579
you can add positional arguments pretty

00:10:37,000 --> 00:10:41,410
much the same way and then you parse the

00:10:39,579 --> 00:10:44,259
arguments and

00:10:41,410 --> 00:10:47,889
you get them in a nice little object and

00:10:44,259 --> 00:10:51,670
you can access them by attributes now if

00:10:47,889 --> 00:10:54,699
you leave this thing out it gives us the

00:10:51,670 --> 00:10:56,980
arguments you get from the system that's

00:10:54,699 --> 00:11:04,920
the program's called with its and says

00:10:56,980 --> 00:11:08,050
Darvey now how do you document these you

00:11:04,920 --> 00:11:12,129
can have a help option which pretty much

00:11:08,050 --> 00:11:15,040
writes out the cheat sheets of what what

00:11:12,129 --> 00:11:19,120
each option does you can have a man page

00:11:15,040 --> 00:11:21,069
which is a little more verbose but not

00:11:19,120 --> 00:11:25,149
too much energy document everything your

00:11:21,069 --> 00:11:28,060
program does and then you of course can

00:11:25,149 --> 00:11:30,339
have traditional websites tutorials that

00:11:28,060 --> 00:11:34,930
get users engaged and look pretty and

00:11:30,339 --> 00:11:37,029
stuff like that so our parts will make

00:11:34,930 --> 00:11:38,800
this help for you well at least the

00:11:37,029 --> 00:11:41,350
first one so if you call it with the

00:11:38,800 --> 00:11:44,170
help option the whole health gets

00:11:41,350 --> 00:11:48,040
generated automatically so you only have

00:11:44,170 --> 00:11:52,689
to deal with the other two there's also

00:11:48,040 --> 00:11:55,509
da comped which is pretty nice use it

00:11:52,689 --> 00:11:58,329
like this you write the help text

00:11:55,509 --> 00:12:03,910
yourself and then doc opt parses this

00:11:58,329 --> 00:12:05,769
help text and and generates you know the

00:12:03,910 --> 00:12:08,620
option configuration for you and then

00:12:05,769 --> 00:12:11,199
you can parse the command line arguments

00:12:08,620 --> 00:12:16,269
and you get them in a dictionary like

00:12:11,199 --> 00:12:18,579
that so if your arguments are static if

00:12:16,269 --> 00:12:21,370
you don't you know dynamically generates

00:12:18,579 --> 00:12:23,860
you know this object has those kind of

00:12:21,370 --> 00:12:27,819
arguments and stuff like that you should

00:12:23,860 --> 00:12:32,939
pretty much be using knockout also if

00:12:27,819 --> 00:12:37,300
you leave this out in the system or the

00:12:32,939 --> 00:12:40,899
sisters vs use the top level structure

00:12:37,300 --> 00:12:43,120
of a program should look like this you

00:12:40,899 --> 00:12:45,850
should have a main function that gets

00:12:43,120 --> 00:12:51,309
the arguments and return some value and

00:12:45,850 --> 00:12:54,520
then you should call this main function

00:12:51,309 --> 00:12:56,470
this is like a see style main function

00:12:54,520 --> 00:12:59,380
and wondered what it does instead of

00:12:56,470 --> 00:13:02,620
relying on the automatic functionality

00:12:59,380 --> 00:13:05,770
of sistar RV inside your Mainers makes

00:13:02,620 --> 00:13:08,890
your main debuggable or testable sorry

00:13:05,770 --> 00:13:13,330
so you can pull it in a test in it and

00:13:08,890 --> 00:13:16,990
give it different arguments now if you

00:13:13,330 --> 00:13:21,690
want to do some fancy output you can

00:13:16,990 --> 00:13:29,530
install package called term color which

00:13:21,690 --> 00:13:31,840
does authorization so you import the

00:13:29,530 --> 00:13:33,700
colored function you call it on some

00:13:31,840 --> 00:13:36,550
text and say I want the sticks to be

00:13:33,700 --> 00:13:39,850
right and while I you print it out and

00:13:36,550 --> 00:13:44,560
the text is read how this happens is how

00:13:39,850 --> 00:13:46,570
I told you earlier the some special

00:13:44,560 --> 00:13:50,710
weird characters are added that means

00:13:46,570 --> 00:13:54,850
this text should have color 31 and 31 is

00:13:50,710 --> 00:13:58,090
the code for red color then there's the

00:13:54,850 --> 00:14:01,090
text and then you have something called

00:13:58,090 --> 00:14:05,920
something that says the color should be

00:14:01,090 --> 00:14:10,510
0 and 0 is reset back to home there are

00:14:05,920 --> 00:14:12,690
this these codes work on unix they don't

00:14:10,510 --> 00:14:17,520
work on Windows on Windows you have to

00:14:12,690 --> 00:14:21,760
use system calls or when i pea i calls

00:14:17,520 --> 00:14:24,040
but you can also import colorama and do

00:14:21,760 --> 00:14:26,880
this at the beginning of your program

00:14:24,040 --> 00:14:30,700
and then everything you have every

00:14:26,880 --> 00:14:32,800
special character or this and see

00:14:30,700 --> 00:14:36,220
control code you write to standard

00:14:32,800 --> 00:14:38,650
output will be hijacked and removed from

00:14:36,220 --> 00:14:43,600
that stream and the corresponding

00:14:38,650 --> 00:14:46,030
windows API call will be called of

00:14:43,600 --> 00:14:49,110
course on on unix systems that doesn't

00:14:46,030 --> 00:14:51,550
do anything you so you can use it easily

00:14:49,110 --> 00:14:54,580
you can also use a package called

00:14:51,550 --> 00:14:58,210
blessings which does pretty much the

00:14:54,580 --> 00:15:01,000
same thing but a little bit differently

00:14:58,210 --> 00:15:03,760
you import a terminal object construct

00:15:01,000 --> 00:15:06,820
that and then

00:15:03,760 --> 00:15:09,100
call a method called red and the way

00:15:06,820 --> 00:15:12,430
it's done this and the reason it's done

00:15:09,100 --> 00:15:15,250
this way is because blessings is pipe

00:15:12,430 --> 00:15:20,470
friendly so if you redirect this output

00:15:15,250 --> 00:15:22,750
to a file and so it doesn't go to the

00:15:20,470 --> 00:15:28,210
terminal it turns out the coloring so

00:15:22,750 --> 00:15:30,640
that a command that processes the output

00:15:28,210 --> 00:15:33,970
of your program will not get confused by

00:15:30,640 --> 00:15:37,660
all these weird characters only escape

00:15:33,970 --> 00:15:39,970
sequences now if you do this that's it's

00:15:37,660 --> 00:15:42,070
very good if you do this you should also

00:15:39,970 --> 00:15:46,870
have a command line option to turn the

00:15:42,070 --> 00:15:49,390
coloring off or on so if you pipe it to

00:15:46,870 --> 00:15:54,100
something like plus minus R which

00:15:49,390 --> 00:15:57,700
actually understands the colors then you

00:15:54,100 --> 00:16:03,160
do get them so if you have a color text

00:15:57,700 --> 00:16:07,480
so this is the law obey it there's a

00:16:03,160 --> 00:16:11,500
package called Clint on github it does

00:16:07,480 --> 00:16:13,480
everything you need for for command line

00:16:11,500 --> 00:16:16,480
or line based interfaces so we'd ask

00:16:13,480 --> 00:16:19,450
coloring as indented printing it has

00:16:16,480 --> 00:16:21,510
columns it has progress bars it has some

00:16:19,450 --> 00:16:25,080
argument handlings and has some

00:16:21,510 --> 00:16:27,880
interactive prompting it has joined with

00:16:25,080 --> 00:16:30,610
that puts hand in the proper place and

00:16:27,880 --> 00:16:34,180
stuff like that and if you submit a pull

00:16:30,610 --> 00:16:39,070
request it'll probably get in it doesn't

00:16:34,180 --> 00:16:43,030
have other things yeah with all respect

00:16:39,070 --> 00:16:45,760
to the author and I do mean that I am

00:16:43,030 --> 00:16:48,210
pretty careful about libraries like this

00:16:45,760 --> 00:16:51,820
so I recommend either helping out or

00:16:48,210 --> 00:16:53,830
just looking at the source and seeing

00:16:51,820 --> 00:16:59,650
how these things can be done and then

00:16:53,830 --> 00:17:01,330
doing it your way there are two very

00:16:59,650 --> 00:17:04,209
unique specific libraries in the

00:17:01,330 --> 00:17:10,089
standard library one is term miles which

00:17:04,209 --> 00:17:13,480
lets you call the term butts you call

00:17:10,089 --> 00:17:15,570
the aisle control cisco which i talked

00:17:13,480 --> 00:17:17,329
about earlier so set all the different

00:17:15,570 --> 00:17:21,409
properties of the term

00:17:17,329 --> 00:17:24,199
and then there's TTYL which is higher

00:17:21,409 --> 00:17:27,769
level wrapper around that so you can set

00:17:24,199 --> 00:17:29,990
see break or what that is it when you

00:17:27,769 --> 00:17:31,789
press a key on the keyboard your program

00:17:29,990 --> 00:17:36,890
gets it out of math and it gets it right

00:17:31,789 --> 00:17:40,610
away problem with TT is that there's not

00:17:36,890 --> 00:17:45,490
much way to revert this change so what

00:17:40,610 --> 00:17:50,120
you end up doing is getting the state

00:17:45,490 --> 00:17:52,460
then calling said C break and then by

00:17:50,120 --> 00:17:58,940
some magic you find on Stack Overflow

00:17:52,460 --> 00:18:03,950
somewhere use you turn it back so dr.

00:17:58,940 --> 00:18:08,360
useful there okay that was pretty much

00:18:03,950 --> 00:18:10,970
the line base and now if you want to do

00:18:08,360 --> 00:18:13,850
the full screen applications you can

00:18:10,970 --> 00:18:17,149
import curses which is like a full

00:18:13,850 --> 00:18:20,090
screen text user interface library you

00:18:17,149 --> 00:18:22,250
write data to buffer there are some

00:18:20,090 --> 00:18:26,029
helpers for that and then led curses

00:18:22,250 --> 00:18:29,389
display it and it has virtual windows so

00:18:26,029 --> 00:18:32,000
you can have portions of the screen that

00:18:29,389 --> 00:18:36,279
are pretty much independent there are

00:18:32,000 --> 00:18:39,830
different implementations of curses and

00:18:36,279 --> 00:18:41,360
yeah curses the name stands for what

00:18:39,830 --> 00:18:45,159
you'll do when you try to use it pretty

00:18:41,360 --> 00:18:48,889
much yeah it's a very old c library

00:18:45,159 --> 00:18:51,320
there are various implementation so you

00:18:48,889 --> 00:18:55,190
can never be sure which one you're using

00:18:51,320 --> 00:18:57,230
the Python wrapper is very thin so if

00:18:55,190 --> 00:19:00,350
you use characters for example you have

00:18:57,230 --> 00:19:03,820
to use the entered integer numbers for

00:19:00,350 --> 00:19:08,389
them there are not much dark strings

00:19:03,820 --> 00:19:11,389
it's pretty bad but if you know how

00:19:08,389 --> 00:19:14,750
terminals work and if if you used it

00:19:11,389 --> 00:19:19,130
before and see then it's perfect for the

00:19:14,750 --> 00:19:21,559
rest of us there's a wit which is a

00:19:19,130 --> 00:19:27,020
widget based library like what you'd

00:19:21,559 --> 00:19:30,800
find in say cute or or TV or something

00:19:27,020 --> 00:19:33,800
like that it has which can use curses

00:19:30,800 --> 00:19:38,180
the hood it can also just do away with

00:19:33,800 --> 00:19:43,130
all that and use raw control codes you

00:19:38,180 --> 00:19:49,850
can also take HTML screenshots of your

00:19:43,130 --> 00:19:51,550
applications very nice widgets work

00:19:49,850 --> 00:19:54,230
something like this you can have

00:19:51,550 --> 00:19:57,680
scrollable list so you can have progress

00:19:54,230 --> 00:20:01,430
bars there's there's quite a lot of them

00:19:57,680 --> 00:20:06,950
nog them already ready and if you have

00:20:01,430 --> 00:20:09,320
used you tour GDK it works pretty much

00:20:06,950 --> 00:20:12,230
the same with similar clothes do so you

00:20:09,320 --> 00:20:15,920
have a pile which puts two widgets on

00:20:12,230 --> 00:20:22,760
top of each other next here takes their

00:20:15,920 --> 00:20:25,010
and you wrap it all in a line box and it

00:20:22,760 --> 00:20:29,360
also handles input of course so one

00:20:25,010 --> 00:20:37,790
widget has focus and keystrokes go into

00:20:29,360 --> 00:20:41,510
it also handles mouse input by default

00:20:37,790 --> 00:20:44,990
so you can you get mouse events just

00:20:41,510 --> 00:20:49,100
like keyboard events the problem with

00:20:44,990 --> 00:20:51,530
that is if you if you tell the terminal

00:20:49,100 --> 00:20:53,690
that you want to get mouse events then

00:20:51,530 --> 00:20:59,650
the terminal emulator doesn't happen

00:20:53,690 --> 00:21:03,620
doesn't get to use them so here I can

00:20:59,650 --> 00:21:07,490
select some text and copy it to my

00:21:03,620 --> 00:21:09,830
system clipboard but if my program

00:21:07,490 --> 00:21:15,640
handled input and mouse input I wouldn't

00:21:09,830 --> 00:21:15,640
be able to do that so I recommend always

00:21:15,910 --> 00:21:20,480
burning yourself because it's much

00:21:18,770 --> 00:21:23,720
easier to use something that you can get

00:21:20,480 --> 00:21:26,870
data out by copying if you don't do it

00:21:23,720 --> 00:21:32,620
you have to provide some other way to

00:21:26,870 --> 00:21:36,610
get the data and that's it thank you I

00:21:32,620 --> 00:21:36,610
thought this would take on this

00:21:42,340 --> 00:21:53,900
okay any question hello thanks for the

00:21:50,840 --> 00:21:56,690
talk I'm the last bit you mentioned I

00:21:53,900 --> 00:21:59,720
mean you could also implement with a

00:21:56,690 --> 00:22:01,730
little bit selection and copy/paste

00:21:59,720 --> 00:22:04,490
yourself I mean oh the library could

00:22:01,730 --> 00:22:07,910
actually your comment about problem is

00:22:04,490 --> 00:22:10,970
that the terminal is sort of not

00:22:07,910 --> 00:22:14,120
integrated with your graphical system so

00:22:10,970 --> 00:22:17,360
you would have to decide if there's a

00:22:14,120 --> 00:22:21,140
graphical system running and do some

00:22:17,360 --> 00:22:23,120
kind of interaction with that so it's

00:22:21,140 --> 00:22:25,370
not that easy and and the mouse input in

00:22:23,120 --> 00:22:29,750
a text user face is not that important

00:22:25,370 --> 00:22:33,110
usually I'm so I have a question about

00:22:29,750 --> 00:22:35,720
you said that this one of this leap who

00:22:33,110 --> 00:22:39,560
just discovers that the program is piped

00:22:35,720 --> 00:22:43,040
and automatically turn out the colors so

00:22:39,560 --> 00:22:44,510
how do you can do by yourself in your in

00:22:43,040 --> 00:22:49,720
your own program how do you discover

00:22:44,510 --> 00:22:49,720
that your program is piped actually okay

00:23:01,149 --> 00:23:04,649
ah what's it

00:23:14,809 --> 00:23:28,669
they TTYL yeah thanks and thus over the

00:23:25,330 --> 00:23:31,999
supporting proportional phones anyway no

00:23:28,669 --> 00:23:39,620
okay you want proportional phones then

00:23:31,999 --> 00:23:44,090
you should build a web key webview up or

00:23:39,620 --> 00:23:46,370
well okay some characters are bigger

00:23:44,090 --> 00:23:49,460
than others even here so if you have

00:23:46,370 --> 00:23:52,159
like Japanese characters they take

00:23:49,460 --> 00:23:54,529
pretty much two blocks and over it

00:23:52,159 --> 00:23:59,240
supports that but it's not really

00:23:54,529 --> 00:24:02,619
proportional fund I think thanks for the

00:23:59,240 --> 00:24:05,539
talk do you know something that that to

00:24:02,619 --> 00:24:08,450
generate out to completion for the

00:24:05,539 --> 00:24:15,169
modern shell like bash or generate order

00:24:08,450 --> 00:24:17,509
completion okay there I think red line

00:24:15,169 --> 00:24:21,230
would do it there's a library called red

00:24:17,509 --> 00:24:22,610
line that you can import and look in the

00:24:21,230 --> 00:24:31,999
documentation I'm pretty sure it does

00:24:22,610 --> 00:24:34,039
that anybody else actually for auto

00:24:31,999 --> 00:24:36,169
completion in bash and other shows as a

00:24:34,039 --> 00:24:38,840
think'll are complete that'll take your

00:24:36,169 --> 00:24:40,340
art parse and can generate all the

00:24:38,840 --> 00:24:41,960
completions automatically so you can use

00:24:40,340 --> 00:24:44,389
that to sort of automatically generated

00:24:41,960 --> 00:24:51,440
completions amend this for bash oh come

00:24:44,389 --> 00:24:53,149
on line you well red line is for when

00:24:51,440 --> 00:24:55,850
you have a Python program and you're

00:24:53,149 --> 00:25:00,669
implementing a shell in that so you can

00:24:55,850 --> 00:25:03,820
have completion there anybody else

00:25:00,669 --> 00:25:03,820
firstly else

00:25:07,110 --> 00:25:11,429
can you tell something about

00:25:08,640 --> 00:25:15,620
compatibility between different systems

00:25:11,429 --> 00:25:19,410
for example windows mac and linux care

00:25:15,620 --> 00:25:22,500
all the full screen apps i showed here

00:25:19,410 --> 00:25:24,360
are pretty much unix only it probably

00:25:22,500 --> 00:25:27,090
wouldn't take that much effort to port

00:25:24,360 --> 00:25:32,850
or wit two windows but nobody seems to

00:25:27,090 --> 00:25:35,150
be interested for the blessings you can

00:25:32,850 --> 00:25:39,600
use the colorama with it to wrap it and

00:25:35,150 --> 00:25:47,250
it'll work though the line based ones

00:25:39,600 --> 00:25:48,929
there's no problem there i'm in the

00:25:47,250 --> 00:25:51,120
episode to you also make sure the

00:25:48,929 --> 00:25:52,679
midnight commander you may want to spend

00:25:51,120 --> 00:25:54,630
their cover was about this wonderful

00:25:52,679 --> 00:25:57,600
application which almost no one

00:25:54,630 --> 00:26:08,400
currently uses thanks okay i won't try

00:25:57,600 --> 00:26:12,419
to though midnight commander is pretty

00:26:08,400 --> 00:26:21,750
much a file browser for the command line

00:26:12,419 --> 00:26:28,530
so browse files you can view them let's

00:26:21,750 --> 00:26:34,950
see the slides are a young a file that

00:26:28,530 --> 00:26:36,929
looks like this and yeah but it's pretty

00:26:34,950 --> 00:26:41,910
awesome it has all the functionality

00:26:36,929 --> 00:26:45,559
geeks put into it so the documentation

00:26:41,910 --> 00:26:45,559
is of course also pretty huge

00:26:52,999 --> 00:27:01,309
I did you give your presentation in some

00:26:58,929 --> 00:27:03,709
terminal tool that you made yourself for

00:27:01,309 --> 00:27:06,859
yeah what it's made out of it sorry It's

00:27:03,709 --> 00:27:08,779
Made innovate yes all right then we find

00:27:06,859 --> 00:27:13,159
it somewhere or can you tell me about it

00:27:08,779 --> 00:27:17,419
up just as i get some internet and free

00:27:13,159 --> 00:27:20,479
time but have yeah it's it's so one time

00:27:17,419 --> 00:27:23,539
used to when it's not too polished so

00:27:20,479 --> 00:27:27,099
the code is is not that great I had to

00:27:23,539 --> 00:27:27,099
wow I made a little

00:27:47,820 --> 00:27:57,630
I have this confidence monitor and oh it

00:27:52,350 --> 00:28:00,600
doesn't really oh it doesn't really

00:27:57,630 --> 00:28:04,860
support having to screen so i had to

00:28:00,600 --> 00:28:06,900
monkey patch it a bit and i'll probably

00:28:04,860 --> 00:28:14,970
send it for requesting to make it a fish

00:28:06,900 --> 00:28:18,990
open anybody else I actually I ever got

00:28:14,970 --> 00:28:21,750
one question and as you said sometimes

00:28:18,990 --> 00:28:26,220
there are programs that detect whether

00:28:21,750 --> 00:28:29,550
you are a TTY or not is there any way to

00:28:26,220 --> 00:28:32,340
prove those programs and make the think

00:28:29,550 --> 00:28:35,970
do is a tty for example when you run a

00:28:32,340 --> 00:28:38,430
supper user you need TTYL otherwise it's

00:28:35,970 --> 00:28:42,450
usually refuses to accept the password

00:28:38,430 --> 00:28:45,210
yes there is a command line till to do

00:28:42,450 --> 00:28:47,310
that I don't remember the name remember

00:28:45,210 --> 00:28:49,170
because you would you later so yeah

00:28:47,310 --> 00:28:53,430
there's a command line tool that does

00:28:49,170 --> 00:28:55,830
that good you run that and then your

00:28:53,430 --> 00:29:00,600
program and it drops that in a pseudo

00:28:55,830 --> 00:29:05,250
TTYL just Google hmm or you can use

00:29:00,600 --> 00:29:08,760
screen yes I hadn't thought about that

00:29:05,250 --> 00:29:15,690
okay thank you our team acts of course

00:29:08,760 --> 00:29:18,600
uh maybe do you know any library that

00:29:15,690 --> 00:29:21,570
will help to build a tool like a varnish

00:29:18,600 --> 00:29:23,610
hist so it's like a histogram plot it on

00:29:21,570 --> 00:29:25,830
so absolute are actually plotting any

00:29:23,610 --> 00:29:28,230
kind of actually orbit has some plots

00:29:25,830 --> 00:29:29,850
built in we may be there will not be

00:29:28,230 --> 00:29:32,760
enough for you but it's pretty easy to

00:29:29,850 --> 00:29:38,850
make your own it's just putting text on

00:29:32,760 --> 00:29:41,120
the screen okay anybody else thank you

00:29:38,850 --> 00:29:41,120
very much

00:29:42,720 --> 00:29:44,780

YouTube URL: https://www.youtube.com/watch?v=BErOaezd4Hw


