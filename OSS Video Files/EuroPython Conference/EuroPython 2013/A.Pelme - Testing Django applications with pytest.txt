Title: A.Pelme - Testing Django applications with pytest
Publication date: 2015-04-18
Playlist: EuroPython 2013
Description: 
	A  Pelme Testing Django applications with pytest
[Europython 2013]
5 July 2013
Track Ravioli
Captions: 
	00:00:30,900 --> 00:00:42,420
sitra binti second inizio a bad i was in

00:00:47,980 --> 00:00:55,629
in its aura hello and welcome back to

00:00:51,940 --> 00:00:59,940
room revealing our next speaker is going

00:00:55,629 --> 00:01:02,770
to be andreas Pellman from belgium and

00:00:59,940 --> 00:01:06,930
is going to be speaking about testing

00:01:02,770 --> 00:01:06,930
jenga applications with my test yes

00:01:09,930 --> 00:01:15,460
thanks so yeah my name is andreas palma

00:01:12,729 --> 00:01:18,990
i'm the co-founder and developer at the

00:01:15,460 --> 00:01:21,520
personal column we build a web based

00:01:18,990 --> 00:01:23,080
scheduling time tracking and seller

00:01:21,520 --> 00:01:26,560
application that is supposed to be

00:01:23,080 --> 00:01:30,729
really really easy to use and the

00:01:26,560 --> 00:01:37,119
testing is really a crucial part of our

00:01:30,729 --> 00:01:39,039
developed in the process so these are

00:01:37,119 --> 00:01:43,810
the topics for today I'm going to start

00:01:39,039 --> 00:01:46,210
by like giving some in some info about

00:01:43,810 --> 00:01:48,220
the state of testing in Django currently

00:01:46,210 --> 00:01:51,070
and what what it looks like the tools

00:01:48,220 --> 00:01:53,580
that are provided with Django and what

00:01:51,070 --> 00:01:56,580
you kind of what your options are there

00:01:53,580 --> 00:02:00,670
I'm then going to introduce tightest and

00:01:56,580 --> 00:02:03,250
show how you can get used get started to

00:02:00,670 --> 00:02:06,369
using hi test for you testing your

00:02:03,250 --> 00:02:12,130
gangplank applications then I'll try to

00:02:06,369 --> 00:02:14,310
give some tips and tricks for how to how

00:02:12,130 --> 00:02:20,040
to make your django tests better and

00:02:14,310 --> 00:02:23,560
easier to test so how many here are

00:02:20,040 --> 00:02:26,319
already like writing django tests tests

00:02:23,560 --> 00:02:29,650
for junk applications today ok that's

00:02:26,319 --> 00:02:35,489
good lot of people so anyone use use PI

00:02:29,650 --> 00:02:35,489
test for thats already ok good so

00:02:36,209 --> 00:02:42,879
testing in django i started doing

00:02:41,260 --> 00:02:45,520
testing django a couple of years ago

00:02:42,879 --> 00:02:48,700
when i developed and like an early

00:02:45,520 --> 00:02:52,300
version of our product and we were

00:02:48,700 --> 00:02:55,989
rapidly adding new features and yeah no

00:02:52,300 --> 00:02:59,709
tests and stuff broke all the time you

00:02:55,989 --> 00:03:00,930
know how it goes so having heard about

00:02:59,709 --> 00:03:05,400
testing I thought

00:03:00,930 --> 00:03:10,530
could help me with this so I jumped into

00:03:05,400 --> 00:03:11,939
Django's documentation on testing and I

00:03:10,530 --> 00:03:15,030
read some articles about testing in

00:03:11,939 --> 00:03:18,799
Django and the thing is that Django's

00:03:15,030 --> 00:03:22,019
documentation is very well written but

00:03:18,799 --> 00:03:23,939
it in some places it recommends some

00:03:22,019 --> 00:03:28,650
like bad practices when it comes to

00:03:23,939 --> 00:03:30,329
testing so there are two ways of writing

00:03:28,650 --> 00:03:33,629
tests in Django according to the

00:03:30,329 --> 00:03:37,439
documentation that's writing unit tests

00:03:33,629 --> 00:03:39,329
style tests or dog tests and this is

00:03:37,439 --> 00:03:44,340
what a jungle documentation has said for

00:03:39,329 --> 00:03:45,930
a very long time about doc tests so when

00:03:44,340 --> 00:03:49,919
I got into this I started writing a lot

00:03:45,930 --> 00:03:53,760
of dog tests and yeah because I wanted

00:03:49,919 --> 00:03:56,849
to be pythonic right so turns out it doc

00:03:53,760 --> 00:03:58,950
test wasn't really intended to to do

00:03:56,849 --> 00:04:02,669
real testing with I mean it's more tool

00:03:58,950 --> 00:04:07,590
to to help you test your documentation

00:04:02,669 --> 00:04:10,650
examples and at that time it was really

00:04:07,590 --> 00:04:13,040
like a lot of articles recommended doing

00:04:10,650 --> 00:04:15,810
doc tests and a big part of Jango's

00:04:13,040 --> 00:04:19,789
internal tests were written in doc tests

00:04:15,810 --> 00:04:22,349
too so seemed like the right thing to do

00:04:19,789 --> 00:04:24,510
but since a couple of weeks ago this

00:04:22,349 --> 00:04:26,370
this text is actually removed from the

00:04:24,510 --> 00:04:30,539
jungle documentation so I'm very happy

00:04:26,370 --> 00:04:33,259
about that so in the 1.6 documentation

00:04:30,539 --> 00:04:33,259
this will not be there

00:04:36,860 --> 00:04:40,759
and yeah apart from the doc test stuff

00:04:39,229 --> 00:04:43,490
there are other things that can be

00:04:40,759 --> 00:04:45,860
improved too and i'll come back to that

00:04:43,490 --> 00:04:51,590
during the talk and try to point that

00:04:45,860 --> 00:04:53,599
out give another approaches instead so

00:04:51,590 --> 00:04:57,770
yeah I went with unit testing stud and

00:04:53,599 --> 00:05:00,680
you probably recognize this you write

00:04:57,770 --> 00:05:04,310
been writing tests before so the Union

00:05:00,680 --> 00:05:06,050
the jungle testing stuff is based on the

00:05:04,310 --> 00:05:09,349
unisys library and the unit test library

00:05:06,050 --> 00:05:11,569
is included in the standard Python

00:05:09,349 --> 00:05:14,449
library so it makes a lot of sense for

00:05:11,569 --> 00:05:18,169
for Django's testing tools to be based

00:05:14,449 --> 00:05:20,960
on this I don't personally think that

00:05:18,169 --> 00:05:23,259
the unit test style tests are very

00:05:20,960 --> 00:05:27,199
pythonic I mean that's matter of taste

00:05:23,259 --> 00:05:30,580
but that's how I see it and there are

00:05:27,199 --> 00:05:33,229
some boilerplate that you have to do for

00:05:30,580 --> 00:05:37,460
just adding new tests with the unit s

00:05:33,229 --> 00:05:42,949
style and that's something I feel I feel

00:05:37,460 --> 00:05:46,219
that it gets in the way sometimes so

00:05:42,949 --> 00:05:48,259
another it's anyone here are using the

00:05:46,219 --> 00:05:53,509
built-in jungle test runner for running

00:05:48,259 --> 00:05:56,509
your tests yeah so a common thing I find

00:05:53,509 --> 00:05:59,029
hard to do with that is to specify

00:05:56,509 --> 00:06:02,360
certain tests it's a bit special syntax

00:05:59,029 --> 00:06:07,069
you have to specify Apennines and test

00:06:02,360 --> 00:06:12,949
case names so that's a bit cumbersome I

00:06:07,069 --> 00:06:15,979
think but so it basically goes through

00:06:12,949 --> 00:06:17,930
all apps in installed apps and find all

00:06:15,979 --> 00:06:21,199
those tests in the test module in each

00:06:17,930 --> 00:06:22,759
app yeah so this leads to a number of

00:06:21,199 --> 00:06:25,099
problems and this is also something

00:06:22,759 --> 00:06:28,310
that's actually being fixed fixed in the

00:06:25,099 --> 00:06:31,069
jungle master version so it will be part

00:06:28,310 --> 00:06:34,460
of jungle 1.6 then the test runner will

00:06:31,069 --> 00:06:37,569
be based on the unit has to discovery

00:06:34,460 --> 00:06:37,569
mechanism itself

00:06:40,250 --> 00:06:47,250
yeah so things are improving in Django

00:06:43,139 --> 00:06:52,020
one point x 1.6 will be a good release

00:06:47,250 --> 00:06:54,780
when it comes to testing but yeah there

00:06:52,020 --> 00:06:56,460
are some still issues and people that

00:06:54,780 --> 00:07:02,819
are new to testing a new to django will

00:06:56,460 --> 00:07:05,340
probably hit those issues so if you take

00:07:02,819 --> 00:07:07,289
a look outside of jungle you'll find

00:07:05,340 --> 00:07:12,389
that there are a lot of other testing

00:07:07,289 --> 00:07:14,490
tools in the python ecosystem these are

00:07:12,389 --> 00:07:16,830
some of them that you might recognize

00:07:14,490 --> 00:07:18,780
and the i encourage you all to check

00:07:16,830 --> 00:07:25,590
them out because a lot of this stuff can

00:07:18,780 --> 00:07:30,090
be used with django but this talk is of

00:07:25,590 --> 00:07:32,240
course about a pilot testify test so

00:07:30,090 --> 00:07:35,610
what is pi test it's it's basically a

00:07:32,240 --> 00:07:39,590
testing tool that has some very

00:07:35,610 --> 00:07:45,199
innovative features i would say that

00:07:39,590 --> 00:07:47,819
simply makes testing much easier better

00:07:45,199 --> 00:07:53,190
it's used in some large projects that

00:07:47,819 --> 00:07:56,819
you probably have heard about and there

00:07:53,190 --> 00:08:00,409
is a very powerful plug-in system that

00:07:56,819 --> 00:08:03,750
comes with PI test there are hooks for

00:08:00,409 --> 00:08:06,060
customizing pretty much everything and

00:08:03,750 --> 00:08:09,389
this makes customizations very easy both

00:08:06,060 --> 00:08:13,110
for your own project and if you want to

00:08:09,389 --> 00:08:16,020
write plugins so these are some of the

00:08:13,110 --> 00:08:22,169
plugins that you can use right away by

00:08:16,020 --> 00:08:25,199
just installing them but the thing that

00:08:22,169 --> 00:08:27,659
I like the most with my test is that it

00:08:25,199 --> 00:08:33,930
allows you to write tests in a like in a

00:08:27,659 --> 00:08:37,949
very pythonic style so let's have a look

00:08:33,930 --> 00:08:41,240
at some code this is I'm going to

00:08:37,949 --> 00:08:41,240
recognize what this this is

00:08:41,870 --> 00:08:52,930
yeah it's it's the standard Django test

00:08:46,520 --> 00:08:57,520
case with using the unit test module and

00:08:52,930 --> 00:09:00,230
this is using the test client which

00:08:57,520 --> 00:09:03,020
files of a request at that URL and then

00:09:00,230 --> 00:09:06,529
it makes sure that the response has the

00:09:03,020 --> 00:09:13,490
correct status code and that iqbal day

00:09:06,529 --> 00:09:16,100
of the content is hello world so you

00:09:13,490 --> 00:09:19,160
should notice here that there it uses

00:09:16,100 --> 00:09:23,960
the self.assertequal to do the actual

00:09:19,160 --> 00:09:25,670
assertion and you need to subclass you

00:09:23,960 --> 00:09:30,050
need to create subclass from the test

00:09:25,670 --> 00:09:32,120
case just to have this working so this

00:09:30,050 --> 00:09:35,180
is what the same example would look like

00:09:32,120 --> 00:09:39,650
if you wrote it in the high-test style

00:09:35,180 --> 00:09:41,630
instead yeah so notice that there are no

00:09:39,650 --> 00:09:44,630
imports there are no sub classing going

00:09:41,630 --> 00:09:49,430
on here there's literally no boilerplate

00:09:44,630 --> 00:09:53,620
code it's just a test so I think this is

00:09:49,430 --> 00:09:53,620
a very platonic way of doing this test

00:09:53,860 --> 00:09:59,930
so by just adding the client as the

00:09:56,990 --> 00:10:02,959
argument our PI test figures out how to

00:09:59,930 --> 00:10:06,320
instantiate this test client and inject

00:10:02,959 --> 00:10:08,000
it to the test if you think this looks a

00:10:06,320 --> 00:10:10,490
bit like magic I'll come back to this

00:10:08,000 --> 00:10:12,860
later how this works to explain it more

00:10:10,490 --> 00:10:19,730
but it's a really useful feature of Pi

00:10:12,860 --> 00:10:22,970
test so a note that the assert the

00:10:19,730 --> 00:10:25,580
assertions are made with a search

00:10:22,970 --> 00:10:32,390
statement rather than the assert equal

00:10:25,580 --> 00:10:35,450
method this is what it looks like when

00:10:32,390 --> 00:10:40,010
you run this test so this actually fails

00:10:35,450 --> 00:10:44,180
because the the viewer returns the wrong

00:10:40,010 --> 00:10:46,279
output and even though we're using the

00:10:44,180 --> 00:10:51,260
assert statement we still get a very

00:10:46,279 --> 00:10:52,790
nice diff of the of the failure so we're

00:10:51,260 --> 00:10:54,110
not just getting a planar search

00:10:52,790 --> 00:10:55,820
assertion

00:10:54,110 --> 00:11:01,100
exception which would have been pretty

00:10:55,820 --> 00:11:04,550
useless and this this is search

00:11:01,100 --> 00:11:07,880
statement it works with pretty much

00:11:04,550 --> 00:11:11,019
anything you throw at it you can check

00:11:07,880 --> 00:11:13,640
for existence in lists you can do

00:11:11,019 --> 00:11:17,630
operation on dictionaries and sets and

00:11:13,640 --> 00:11:25,430
it will in most cases cases it will give

00:11:17,630 --> 00:11:32,959
you a very good very good output you're

00:11:25,430 --> 00:11:35,089
not going to miss this ok so the pie

00:11:32,959 --> 00:11:38,269
test Django package is the package that

00:11:35,089 --> 00:11:42,860
allows the jungle tests to be wrong with

00:11:38,269 --> 00:11:46,010
pie test so it basically make sure that

00:11:42,860 --> 00:11:48,170
the test database is available for your

00:11:46,010 --> 00:11:51,170
tests so that you can make queries

00:11:48,170 --> 00:11:55,670
against it very much like the same way

00:11:51,170 --> 00:11:58,449
that Django's test framework works there

00:11:55,670 --> 00:12:01,459
are also some nice helpers for doing

00:11:58,449 --> 00:12:03,140
Django testing stuff like the client

00:12:01,459 --> 00:12:08,029
that I showed you earlier I'll come back

00:12:03,140 --> 00:12:10,399
to this later so it's it's real easy to

00:12:08,029 --> 00:12:13,370
get started using this for your own

00:12:10,399 --> 00:12:16,310
tests I'm going to assume that you're

00:12:13,370 --> 00:12:20,149
using pip and virtual end so this is how

00:12:16,310 --> 00:12:27,949
you install it by doing this you also

00:12:20,149 --> 00:12:31,970
get PI test automatically so in order to

00:12:27,949 --> 00:12:34,010
have your tests picked up by PI test

00:12:31,970 --> 00:12:37,670
your code must be available on the

00:12:34,010 --> 00:12:40,640
Python path and so this might not be the

00:12:37,670 --> 00:12:45,829
case if you're only using manage doc pie

00:12:40,640 --> 00:12:47,690
previously but this is a easy way to do

00:12:45,829 --> 00:12:50,180
this make sure your that your project

00:12:47,690 --> 00:12:52,880
has a set up top I file then you can use

00:12:50,180 --> 00:12:55,449
people like this to have the paths all

00:12:52,880 --> 00:12:55,449
set up correctly

00:12:57,829 --> 00:13:04,680
so tightest also needs to know where

00:13:01,529 --> 00:13:07,140
your django settings are located a good

00:13:04,680 --> 00:13:09,870
idea is to put this line into your

00:13:07,140 --> 00:13:12,660
virtual end post activate script so you

00:13:09,870 --> 00:13:20,220
will automatically have it set whenever

00:13:12,660 --> 00:13:21,720
you enable your virtual and there's a

00:13:20,220 --> 00:13:24,750
very nice side effect of doing this

00:13:21,720 --> 00:13:27,209
actually because if you have your code

00:13:24,750 --> 00:13:30,269
on the path and you have the settings

00:13:27,209 --> 00:13:32,579
module you can just you don't have to go

00:13:30,269 --> 00:13:34,380
manage the pie shell to get a Python

00:13:32,579 --> 00:13:36,600
shell anymore you can just do Python and

00:13:34,380 --> 00:13:39,360
start importing things right away so I

00:13:36,600 --> 00:13:46,790
mean that this is a good thing to do

00:13:39,360 --> 00:13:49,620
anyway you might want to have specific

00:13:46,790 --> 00:13:52,769
settings that are used when you run the

00:13:49,620 --> 00:13:54,300
tests but not when you develop for

00:13:52,769 --> 00:13:57,120
instance you might want to put the

00:13:54,300 --> 00:13:59,459
faster password hasher in there when you

00:13:57,120 --> 00:14:01,560
run your tests you can you set that in

00:13:59,459 --> 00:14:06,660
the inner pie test of ina file that you

00:14:01,560 --> 00:14:10,980
have to create so how to actually run

00:14:06,660 --> 00:14:14,370
the tests so pilot test is not invoked

00:14:10,980 --> 00:14:17,339
with the manage that pie test command as

00:14:14,370 --> 00:14:21,240
you might assume I'd being used to so

00:14:17,339 --> 00:14:25,680
you instead use the fighters c'mon it's

00:14:21,240 --> 00:14:28,260
very easy my test takes a bunch of

00:14:25,680 --> 00:14:31,800
different options that lets you specify

00:14:28,260 --> 00:14:33,930
which tests are wrong and you can

00:14:31,800 --> 00:14:37,500
exclude or include certain parts of your

00:14:33,930 --> 00:14:39,570
testitude very easy this is what it

00:14:37,500 --> 00:14:42,690
looks like running tests in a specific

00:14:39,570 --> 00:14:45,120
file don't the works on directories will

00:14:42,690 --> 00:14:49,680
scan everything that recursively find

00:14:45,120 --> 00:14:51,540
your tests you can match test spied in

00:14:49,680 --> 00:14:55,920
their name so this will match all the

00:14:51,540 --> 00:14:59,660
tests that contain whose names contains

00:14:55,920 --> 00:14:59,660
the test food string

00:15:03,860 --> 00:15:09,570
so Whitest looks for files and modules

00:15:07,620 --> 00:15:13,200
rather than going through the installed

00:15:09,570 --> 00:15:15,650
apps to find your tasks so this means

00:15:13,200 --> 00:15:20,160
that your tests must no longer live

00:15:15,650 --> 00:15:21,720
inside of your django apps and these

00:15:20,160 --> 00:15:24,660
kinds of this opens up a lot of

00:15:21,720 --> 00:15:29,250
possibilities for how to how you can

00:15:24,660 --> 00:15:33,360
structure your tests actually so by

00:15:29,250 --> 00:15:35,790
default PI test picks up tests in files

00:15:33,360 --> 00:15:38,310
that are named like this but this this

00:15:35,790 --> 00:15:40,980
can of course be configured to anything

00:15:38,310 --> 00:15:46,200
you like you just change the Python file

00:15:40,980 --> 00:15:48,240
settings in PI test dining so you can

00:15:46,200 --> 00:15:50,970
also configure which directories which

00:15:48,240 --> 00:15:52,710
kind of classes which kind of functions

00:15:50,970 --> 00:15:55,230
are considered to be test everything is

00:15:52,710 --> 00:15:58,010
configurable there but gives you nice

00:15:55,230 --> 00:15:58,010
defaults

00:16:00,560 --> 00:16:07,090
so you can put your tests like this

00:16:02,590 --> 00:16:09,950
under under the applications this is

00:16:07,090 --> 00:16:13,840
kind of close to how it's usually done

00:16:09,950 --> 00:16:16,580
in Django that's that's one way to do it

00:16:13,840 --> 00:16:18,650
but then you can also move all your

00:16:16,580 --> 00:16:20,450
tests into its own root directory I find

00:16:18,650 --> 00:16:25,130
this very nice because you have the

00:16:20,450 --> 00:16:28,760
tests in one place and you can take that

00:16:25,130 --> 00:16:30,620
even further I'd like to split up the my

00:16:28,760 --> 00:16:32,660
unit tests into its own directory and

00:16:30,620 --> 00:16:34,250
then have like high-level integration

00:16:32,660 --> 00:16:36,950
and functional tests in another

00:16:34,250 --> 00:16:42,260
directory it makes it very very clear

00:16:36,950 --> 00:16:45,200
where to find the tests so I'm just

00:16:42,260 --> 00:16:47,350
using the same name in the unit test

00:16:45,200 --> 00:16:50,210
directory as the real code file so I

00:16:47,350 --> 00:16:52,610
directly know where to find the tests

00:16:50,210 --> 00:16:58,790
for each class and for each file each

00:16:52,610 --> 00:17:01,100
function and if you already have a

00:16:58,790 --> 00:17:03,500
jungle testitude the existing test cases

00:17:01,100 --> 00:17:08,540
they will just work they will be picked

00:17:03,500 --> 00:17:09,980
up and run just as before so you can

00:17:08,540 --> 00:17:13,010
just you can just use that you can

00:17:09,980 --> 00:17:15,350
switch to PI test for collecting your

00:17:13,010 --> 00:17:17,120
tasks and you can run you can write

00:17:15,350 --> 00:17:20,030
jungle tests that's you as you always

00:17:17,120 --> 00:17:22,610
been doing that's fine or you can start

00:17:20,030 --> 00:17:24,770
switching over to PI test features step

00:17:22,610 --> 00:17:28,490
by step but still have your own tests it

00:17:24,770 --> 00:17:30,860
wrong so in my project we still have a

00:17:28,490 --> 00:17:32,780
lot of unit tests tests what we're

00:17:30,860 --> 00:17:37,330
trying to get away from them but they're

00:17:32,780 --> 00:17:37,330
still there this all works together

00:17:40,700 --> 00:17:47,150
one nice thing that Titus Django

00:17:43,460 --> 00:17:50,570
provides it's not included in the Django

00:17:47,150 --> 00:17:55,250
test runner is the ability to to save

00:17:50,570 --> 00:17:58,700
the database between test runs so what

00:17:55,250 --> 00:18:03,080
usually happens when you run a Django

00:17:58,700 --> 00:18:05,330
destitute it creates all the tables runs

00:18:03,080 --> 00:18:10,250
the tests and then it drops the test

00:18:05,330 --> 00:18:12,170
database if use this option it won't

00:18:10,250 --> 00:18:14,090
actually drop the database after the

00:18:12,170 --> 00:18:16,640
tests are run it will keep it in the

00:18:14,090 --> 00:18:19,520
database so the next time that you run

00:18:16,640 --> 00:18:21,770
your tests it again the database and all

00:18:19,520 --> 00:18:25,940
the tables are already there so you

00:18:21,770 --> 00:18:28,760
won't have to recreate them again this

00:18:25,940 --> 00:18:32,240
saves a lot of time a lot of start up

00:18:28,760 --> 00:18:34,550
start up time for your tests so in my

00:18:32,240 --> 00:18:36,920
project we have about 100 tables or so

00:18:34,550 --> 00:18:38,810
and takes about 10 seconds in my

00:18:36,920 --> 00:18:43,100
computer to just create all the tables

00:18:38,810 --> 00:18:45,230
that's time that's really useful to save

00:18:43,100 --> 00:18:50,900
their otherwise it really gets you out

00:18:45,230 --> 00:18:53,530
of the flow and writing tests you can

00:18:50,900 --> 00:18:59,200
add this to PI test a tiny and have it

00:18:53,530 --> 00:19:03,440
always enabled then you just pass to 8tb

00:18:59,200 --> 00:19:06,880
to PI test to force it to recreate the

00:19:03,440 --> 00:19:10,490
entire database so when you change your

00:19:06,880 --> 00:19:13,570
your schemas just pass create DB to

00:19:10,490 --> 00:19:13,570
force it to recreate it

00:19:17,760 --> 00:19:26,980
so one of the most important things when

00:19:23,830 --> 00:19:29,800
you're writing when you're really trying

00:19:26,980 --> 00:19:32,170
to test your code is to actually write

00:19:29,800 --> 00:19:36,640
the code in such a way that it it

00:19:32,170 --> 00:19:39,970
becomes easy to test it or that it makes

00:19:36,640 --> 00:19:42,940
it possible to test it at all and I

00:19:39,970 --> 00:19:46,270
think that Django's documentation

00:19:42,940 --> 00:19:48,820
focuses a bit too much on integration

00:19:46,270 --> 00:19:52,450
level tests there are very little advice

00:19:48,820 --> 00:19:57,460
on how you actually can unit test your

00:19:52,450 --> 00:20:00,120
code and by unit testing I mean running

00:19:57,460 --> 00:20:02,770
your code in isolation without access to

00:20:00,120 --> 00:20:06,100
database to the network or to the file

00:20:02,770 --> 00:20:09,670
system so if you're serious about

00:20:06,100 --> 00:20:14,790
testing our stuff unit tests have a very

00:20:09,670 --> 00:20:14,790
important role to play in the testitude

00:20:17,280 --> 00:20:25,060
yeah I mean it's the secret are really

00:20:21,670 --> 00:20:28,770
writing testable code that's the hard

00:20:25,060 --> 00:20:32,200
part this quote is from misko hybrid

00:20:28,770 --> 00:20:35,820
he's an engineer at Google his he knows

00:20:32,200 --> 00:20:38,170
a lot about testable code is given some

00:20:35,820 --> 00:20:42,090
presentations that that are available on

00:20:38,170 --> 00:20:42,090
YouTube you should really check them out

00:20:43,980 --> 00:20:50,800
anyone recognize these files yeah so

00:20:48,880 --> 00:20:55,960
these are the files that you get when

00:20:50,800 --> 00:20:57,910
you do start up in Django and sometimes

00:20:55,960 --> 00:21:00,430
people seem to forget that you can

00:20:57,910 --> 00:21:04,810
actually create your own modules beside

00:21:00,430 --> 00:21:09,100
these files yeah so you might create the

00:21:04,810 --> 00:21:14,500
admin forms file but don't stop at this

00:21:09,100 --> 00:21:17,590
point put I mean create new files and

00:21:14,500 --> 00:21:20,470
put your own logic into those files try

00:21:17,590 --> 00:21:24,420
to like separate your own application as

00:21:20,470 --> 00:21:27,420
much as possible from being tied in

00:21:24,420 --> 00:21:27,420
interview

00:21:28,150 --> 00:21:36,250
so this will make testing much easier

00:21:33,120 --> 00:21:39,220
but yes separate your own stuff into its

00:21:36,250 --> 00:21:44,020
own files so that they can be tested in

00:21:39,220 --> 00:21:50,080
isolation a place where this is

00:21:44,020 --> 00:21:52,210
especially important is views so if you

00:21:50,080 --> 00:21:55,810
write all of your application logic

00:21:52,210 --> 00:21:58,390
inside of your views directly it will be

00:21:55,810 --> 00:22:02,830
very hard to test them because your only

00:21:58,390 --> 00:22:05,260
way of really calling that view is to

00:22:02,830 --> 00:22:08,530
give it a HTTP request so you basically

00:22:05,260 --> 00:22:11,800
have to use the the test client or

00:22:08,530 --> 00:22:14,110
something similar to that you can of

00:22:11,800 --> 00:22:20,830
course start mocking things out but it

00:22:14,110 --> 00:22:24,190
gets very hard so views I think they

00:22:20,830 --> 00:22:26,380
should really be the place where like

00:22:24,190 --> 00:22:29,280
things come together in your application

00:22:26,380 --> 00:22:33,010
where you glue all your logic together

00:22:29,280 --> 00:22:40,150
but it's not a place to put the logic

00:22:33,010 --> 00:22:43,750
itself in so i'm going to show an

00:22:40,150 --> 00:22:45,930
example to try to make sense of this so

00:22:43,750 --> 00:22:50,350
let's imagine we have this view it

00:22:45,930 --> 00:22:54,910
doesn't look that bad from the first

00:22:50,350 --> 00:23:01,510
sight but it is problematic to test for

00:22:54,910 --> 00:23:05,650
many for two reasons I would say so this

00:23:01,510 --> 00:23:08,800
is the first problem it's hard to yeah

00:23:05,650 --> 00:23:13,960
now gets cold in directly on the daytime

00:23:08,800 --> 00:23:15,550
here so it's hard to change the time I

00:23:13,960 --> 00:23:19,210
mean when we want to test with multi

00:23:15,550 --> 00:23:21,100
different times of the day here and the

00:23:19,210 --> 00:23:24,640
only way to test this is probably the

00:23:21,100 --> 00:23:26,410
monkey patch on daytime which happens to

00:23:24,640 --> 00:23:28,390
be very hard especially for daytime

00:23:26,410 --> 00:23:34,680
since you can't really ask setattribute

00:23:28,390 --> 00:23:37,180
sir the other problem here is yet

00:23:34,680 --> 00:23:39,460
usually in this case we might be able to

00:23:37,180 --> 00:23:40,760
just test it directly since there are no

00:23:39,460 --> 00:23:43,310
other dependencies

00:23:40,760 --> 00:23:46,640
but usually use have a lot of other

00:23:43,310 --> 00:23:48,770
dependencies like databases and middle

00:23:46,640 --> 00:23:52,070
words that needs to be run before to set

00:23:48,770 --> 00:23:53,900
certain things on your request object so

00:23:52,070 --> 00:24:01,190
it's very hard to cover the different

00:23:53,900 --> 00:24:03,290
branches in different things here so I

00:24:01,190 --> 00:24:06,230
would break this out into its own

00:24:03,290 --> 00:24:09,530
function the load this is this is the

00:24:06,230 --> 00:24:11,570
application logic this is the the things

00:24:09,530 --> 00:24:16,280
that are really important that goes on

00:24:11,570 --> 00:24:19,220
here so by breaking this out we do not

00:24:16,280 --> 00:24:22,370
depend on Jango in any way because this

00:24:19,220 --> 00:24:26,090
code does not care about HTTP or Django

00:24:22,370 --> 00:24:29,320
or reviews really it just takes the time

00:24:26,090 --> 00:24:34,910
of the day and returned the greeting so

00:24:29,320 --> 00:24:37,580
this becomes very easy to test because

00:24:34,910 --> 00:24:40,570
you just pass things in and you look at

00:24:37,580 --> 00:24:45,140
the output it's very very easy to cover

00:24:40,570 --> 00:24:51,920
all these cases in in unit tests and you

00:24:45,140 --> 00:24:55,910
can test it completely in isolation so

00:24:51,920 --> 00:24:57,980
yeah notice that this this is much

00:24:55,910 --> 00:24:59,450
better than calling now here too because

00:24:57,980 --> 00:25:04,280
then we would still have the monkey

00:24:59,450 --> 00:25:10,310
patching problem if we got the time

00:25:04,280 --> 00:25:13,340
directly so this is what the view will

00:25:10,310 --> 00:25:18,470
look like if we do this instead so it's

00:25:13,340 --> 00:25:20,870
it's much simpler but we still need to

00:25:18,470 --> 00:25:22,820
test the view of course to make sure

00:25:20,870 --> 00:25:25,040
that everything is hooked up properly

00:25:22,820 --> 00:25:32,150
with each other and that it actually

00:25:25,040 --> 00:25:35,570
works so we need some kind of

00:25:32,150 --> 00:25:40,910
integration test to make sure that this

00:25:35,570 --> 00:25:44,600
works so usually you return HTML from

00:25:40,910 --> 00:25:46,970
your views and Django advocates using

00:25:44,600 --> 00:25:49,760
the test client mostly for checking that

00:25:46,970 --> 00:25:52,790
I think that's I mean you can check

00:25:49,760 --> 00:25:53,910
parts of the HTML but you still will not

00:25:52,790 --> 00:25:55,710
know if

00:25:53,910 --> 00:25:58,760
if it actually works there might be a

00:25:55,710 --> 00:26:02,270
javascript error or something that Soyuz

00:25:58,760 --> 00:26:05,790
you still might have a completely broken

00:26:02,270 --> 00:26:07,650
site but it looks good from from the

00:26:05,790 --> 00:26:10,650
jungle from the test clients point of

00:26:07,650 --> 00:26:12,210
view so I think this view should really

00:26:10,650 --> 00:26:14,370
be tested with something like selenium

00:26:12,210 --> 00:26:17,430
or web tests or something that is more

00:26:14,370 --> 00:26:21,120
higher level so this is there's no HTML

00:26:17,430 --> 00:26:22,800
here but usually that's how you dislike

00:26:21,120 --> 00:26:29,040
the only way of actually knowing that

00:26:22,800 --> 00:26:31,530
your stuff works and there it's probably

00:26:29,040 --> 00:26:34,440
enough with one integration tests for

00:26:31,530 --> 00:26:38,070
this because there are no branches in it

00:26:34,440 --> 00:26:40,590
so yeah you can keep the integration

00:26:38,070 --> 00:26:47,840
tests very few and test all the tricky

00:26:40,590 --> 00:26:50,610
cases in your unit tests instead so

00:26:47,840 --> 00:26:54,450
factoring things out from your views

00:26:50,610 --> 00:26:57,290
it's a very good start but as soon as

00:26:54,450 --> 00:27:02,610
you invoke the database from your tests

00:26:57,290 --> 00:27:05,670
things are getting really slow you've

00:27:02,610 --> 00:27:08,100
probably seen this one the problem for

00:27:05,670 --> 00:27:12,420
us is we don't really compile much

00:27:08,100 --> 00:27:15,990
things so doesn't really apply to us but

00:27:12,420 --> 00:27:17,790
there's a fix for this we asked to run

00:27:15,990 --> 00:27:26,880
our tests instead and if they are slow

00:27:17,790 --> 00:27:29,850
we get to do sword fights so Django's

00:27:26,880 --> 00:27:36,210
over m is I mean it's really easy to

00:27:29,850 --> 00:27:40,110
work with it you can do like pretty cool

00:27:36,210 --> 00:27:43,110
queries very easy but it's easy to

00:27:40,110 --> 00:27:46,410
forget that you're actually running SQL

00:27:43,110 --> 00:27:48,960
code against your database when you're

00:27:46,410 --> 00:27:54,390
doing that because it's so abstracted

00:27:48,960 --> 00:27:56,310
away from you but the thing is I i think

00:27:54,390 --> 00:27:58,920
that the query code should go into its

00:27:56,310 --> 00:28:02,460
own methods and you should do as little

00:27:58,920 --> 00:28:05,130
else as possible then like pure querying

00:28:02,460 --> 00:28:08,430
the database because then those methods

00:28:05,130 --> 00:28:10,530
that actually does the query they can be

00:28:08,430 --> 00:28:13,860
tested against the database and you can

00:28:10,530 --> 00:28:18,360
have few tests that actually needs to

00:28:13,860 --> 00:28:21,060
use the database and then you have the

00:28:18,360 --> 00:28:23,940
application logic by itself there too so

00:28:21,060 --> 00:28:28,430
by splitting it up it makes it makes it

00:28:23,940 --> 00:28:28,430
much easier to test things in isolation

00:28:28,670 --> 00:28:34,610
soap itís jungle helps you a bit with

00:28:32,220 --> 00:28:37,860
this it helps you to do the right thing

00:28:34,610 --> 00:28:40,680
because usually in in Django tests you

00:28:37,860 --> 00:28:43,110
always have the database available even

00:28:40,680 --> 00:28:45,060
if use the simple test case it will not

00:28:43,110 --> 00:28:48,030
really warned you about accidental

00:28:45,060 --> 00:28:50,940
database usage that you might not be

00:28:48,030 --> 00:28:58,130
aware of but i'll come back to how that

00:28:50,940 --> 00:28:58,130
works later can anyone see what that is

00:28:59,030 --> 00:29:05,190
that is my terminal window and it's it's

00:29:02,940 --> 00:29:09,930
filled with pile of poo the Unicode pile

00:29:05,190 --> 00:29:12,720
of poo character so this is when i run

00:29:09,930 --> 00:29:18,140
my tests I you might not be able to see

00:29:12,720 --> 00:29:21,720
it but I have a dash dash poo option so

00:29:18,140 --> 00:29:24,360
this instead of dots I get pints of poo

00:29:21,720 --> 00:29:26,490
for some tests and that means that are

00:29:24,360 --> 00:29:28,050
my old tests that pretty much they

00:29:26,490 --> 00:29:32,580
violate pretty much everything I just

00:29:28,050 --> 00:29:34,350
told you about so they are super slow so

00:29:32,580 --> 00:29:38,370
this is a nice way to point them out I

00:29:34,350 --> 00:29:40,170
think they actually represent ten

00:29:38,370 --> 00:29:42,600
percent of the number of tests in my

00:29:40,170 --> 00:29:45,210
project but they take about seventy-five

00:29:42,600 --> 00:29:48,810
percent of the time to run all the tests

00:29:45,210 --> 00:29:53,220
so I'm trying to get rid of these but

00:29:48,810 --> 00:29:55,740
it's it's a slow process so most of

00:29:53,220 --> 00:29:57,720
these could actually by being factored

00:29:55,740 --> 00:30:01,560
out and they could be rewritten as very

00:29:57,720 --> 00:30:02,279
fast unit tests they would require some

00:30:01,560 --> 00:30:07,139
a couple of

00:30:02,279 --> 00:30:12,269
figuration tests but would be very could

00:30:07,139 --> 00:30:14,729
be good speed up here and i also want to

00:30:12,269 --> 00:30:17,159
mention that this poo option this shows

00:30:14,729 --> 00:30:19,799
how easy it is to customize pilot test

00:30:17,159 --> 00:30:21,869
it took actually took me six lines of

00:30:19,799 --> 00:30:23,759
code to implement that option and make

00:30:21,869 --> 00:30:32,070
this possible so that's I think that's

00:30:23,759 --> 00:30:36,269
very cool too so Titus Django takes a

00:30:32,070 --> 00:30:38,729
different approach from the standard

00:30:36,269 --> 00:30:42,690
Django test cases when it comes to the

00:30:38,729 --> 00:30:44,969
database usage so in standard jungle

00:30:42,690 --> 00:30:49,200
tests the test database is always

00:30:44,969 --> 00:30:51,869
available but with Titus jungle you have

00:30:49,200 --> 00:30:55,769
to be explicit when you need access to

00:30:51,869 --> 00:30:58,859
the database and if you haven't

00:30:55,769 --> 00:31:00,839
requested database access in a test it

00:30:58,859 --> 00:31:04,649
will fail and it will point out where

00:31:00,839 --> 00:31:07,739
your query happens so this forces you to

00:31:04,649 --> 00:31:09,539
think about which of your code actually

00:31:07,739 --> 00:31:15,149
interacts with your database and which

00:31:09,539 --> 00:31:17,669
code which does not this is what it

00:31:15,149 --> 00:31:21,389
looks like you put this you mark your

00:31:17,669 --> 00:31:24,179
test with this marker that's called

00:31:21,389 --> 00:31:29,009
Jango DB so this would this will tell

00:31:24,179 --> 00:31:30,899
tell fighters jungle too yeah to wrap

00:31:29,009 --> 00:31:33,239
this test in a transaction and

00:31:30,899 --> 00:31:35,669
everything you works as normal which any

00:31:33,239 --> 00:31:39,629
changes will be rolled back at the end

00:31:35,669 --> 00:31:43,859
of the test if you don't put that

00:31:39,629 --> 00:31:46,619
they're just doing a standard test like

00:31:43,859 --> 00:31:48,929
this this will fail and it will look

00:31:46,619 --> 00:31:50,999
like this it would point out where your

00:31:48,929 --> 00:31:53,159
failure in the code is where the query

00:31:50,999 --> 00:31:58,830
happens so that you can so you know

00:31:53,159 --> 00:32:00,419
what's going on if you read lots of

00:31:58,830 --> 00:32:02,849
functions in the same module that

00:32:00,419 --> 00:32:06,719
actually needs the database you can mark

00:32:02,849 --> 00:32:09,179
the entire test module for database use

00:32:06,719 --> 00:32:13,399
so you don't have to put that decorator

00:32:09,179 --> 00:32:13,399
on each test function

00:32:14,630 --> 00:32:22,740
this is something I find very useful

00:32:18,740 --> 00:32:28,169
tightest actually allows you to exclude

00:32:22,740 --> 00:32:32,909
certain tests based on these markers so

00:32:28,169 --> 00:32:35,760
this this runs all the tests that does

00:32:32,909 --> 00:32:38,070
not need database access so this will ya

00:32:35,760 --> 00:32:41,100
this will basically basically run all

00:32:38,070 --> 00:32:43,500
your unit tests I use this all the time

00:32:41,100 --> 00:32:49,020
when I develop to avoid that you just

00:32:43,500 --> 00:32:50,669
run the past tests there are a lot of

00:32:49,020 --> 00:32:56,610
other things you can do with us these

00:32:50,669 --> 00:32:58,289
two of course it's very powerful so

00:32:56,610 --> 00:33:04,740
another thing I want to talk about is

00:32:58,289 --> 00:33:06,870
how to create test data for your for

00:33:04,740 --> 00:33:11,399
your tests and there are a couple of

00:33:06,870 --> 00:33:14,429
different ways of doing this the most

00:33:11,399 --> 00:33:17,010
obvious one is to just instantiate

00:33:14,429 --> 00:33:20,659
objects and save them to the database by

00:33:17,010 --> 00:33:23,279
hand this has a number of problems

00:33:20,659 --> 00:33:26,130
because as soon as you add the new field

00:33:23,279 --> 00:33:28,740
that is required all your own all all

00:33:26,130 --> 00:33:31,559
your old tests will break and you have

00:33:28,740 --> 00:33:35,700
to trade all all relations and

00:33:31,559 --> 00:33:38,580
everything by hand to to make sure that

00:33:35,700 --> 00:33:40,919
the database constraints that your data

00:33:38,580 --> 00:33:45,350
fits within there so that's that's

00:33:40,919 --> 00:33:45,350
really you just not possible to do

00:33:46,940 --> 00:33:53,840
the way it's recommended in the jungle

00:33:51,240 --> 00:33:59,309
documentation is to use something called

00:33:53,840 --> 00:34:03,900
fixtures so fixtures is basically JSON

00:33:59,309 --> 00:34:07,320
or XML files which is a serialized form

00:34:03,900 --> 00:34:09,929
of your data then jungle loads this data

00:34:07,320 --> 00:34:15,089
into your database before the test runs

00:34:09,929 --> 00:34:17,429
and removes it afterwards so this is one

00:34:15,089 --> 00:34:20,639
point where the jungle documentation is

00:34:17,429 --> 00:34:26,310
really helpful because this is generally

00:34:20,639 --> 00:34:29,730
considered to be an anti-pattern makes

00:34:26,310 --> 00:34:32,280
it very hard to maintain your your test

00:34:29,730 --> 00:34:33,629
data and all of your different tests are

00:34:32,280 --> 00:34:36,330
probably going to need different test

00:34:33,629 --> 00:34:39,359
data so you have to be very clever to

00:34:36,330 --> 00:34:41,720
construct fixtures that match all of

00:34:39,359 --> 00:34:43,950
your tests that will be helpful learn

00:34:41,720 --> 00:34:46,190
all the other way would be to create

00:34:43,950 --> 00:34:49,649
different fixture for different feature

00:34:46,190 --> 00:34:52,010
fixtures for each test but then you will

00:34:49,649 --> 00:34:54,839
have to maintain them Orleans that so

00:34:52,010 --> 00:34:59,240
it's not a good solution so don't use

00:34:54,839 --> 00:35:03,710
them the solution i found is to use

00:34:59,240 --> 00:35:03,710
something that's going like factories i

00:35:03,950 --> 00:35:12,839
use a library that's called factory boy

00:35:07,500 --> 00:35:18,030
to handle this that's a nice helpers so

00:35:12,839 --> 00:35:19,770
imagine we have this these models we

00:35:18,030 --> 00:35:23,820
have a person that belongs to a groups

00:35:19,770 --> 00:35:25,740
to live with a foreign key and we also

00:35:23,820 --> 00:35:29,070
have this method on the person that

00:35:25,740 --> 00:35:35,520
actually returns the first letter of the

00:35:29,070 --> 00:35:40,589
related group this is how you would

00:35:35,520 --> 00:35:45,690
write the factory classes for this for

00:35:40,589 --> 00:35:48,900
these models this will then know how to

00:35:45,690 --> 00:35:52,230
construct objects with test data for you

00:35:48,900 --> 00:35:53,670
with these attributes so you specify the

00:35:52,230 --> 00:35:58,400
relationship here too

00:35:53,670 --> 00:35:58,400
and pointed at that factory class

00:36:03,740 --> 00:36:09,970
this is what it looks like when you use

00:36:05,990 --> 00:36:15,710
it so you call the build method on the

00:36:09,970 --> 00:36:17,360
person factory and you can specify the

00:36:15,710 --> 00:36:22,369
name of the group that you want to use

00:36:17,360 --> 00:36:25,400
in the test and the thing to notice here

00:36:22,369 --> 00:36:27,530
is the double underscore entation that's

00:36:25,400 --> 00:36:30,230
between group and the name you probably

00:36:27,530 --> 00:36:33,170
recognize that from the jungle over m so

00:36:30,230 --> 00:36:36,550
it works the same way you can override

00:36:33,170 --> 00:36:39,050
attributes on related objects too and

00:36:36,550 --> 00:36:42,320
any keyword arguments you passing to

00:36:39,050 --> 00:36:44,630
build will override the defaults this

00:36:42,320 --> 00:36:47,119
makes it very very clear what this test

00:36:44,630 --> 00:36:49,670
is doing without having to go go through

00:36:47,119 --> 00:36:57,500
all these hopes of getting your test

00:36:49,670 --> 00:37:01,010
data there and you can change build if

00:36:57,500 --> 00:37:03,080
you change that to create these objects

00:37:01,010 --> 00:37:05,270
we like to actually be saved in the

00:37:03,080 --> 00:37:07,610
database so that you can do queries

00:37:05,270 --> 00:37:11,710
against them so that you can use these

00:37:07,610 --> 00:37:14,270
factories both for unsaved data and poor

00:37:11,710 --> 00:37:17,690
data that are actually saved in the

00:37:14,270 --> 00:37:20,050
database this makes it very flexible to

00:37:17,690 --> 00:37:20,050
use these

00:37:23,440 --> 00:37:30,540
so I will tell you a bit about something

00:37:27,520 --> 00:37:33,820
that is called fixtures within pi test

00:37:30,540 --> 00:37:35,890
so don't be confused now because there

00:37:33,820 --> 00:37:38,500
are fixtures in Django and fixtures in

00:37:35,890 --> 00:37:41,650
PI test and these are different things

00:37:38,500 --> 00:37:43,960
these are completely different things so

00:37:41,650 --> 00:37:48,490
I'm going to show the fixtures in hi

00:37:43,960 --> 00:37:52,260
test now so they they are another

00:37:48,490 --> 00:37:56,230
approach to setting up and tearing down

00:37:52,260 --> 00:37:59,080
state for your tests basically but they

00:37:56,230 --> 00:38:04,030
are more explicit and more flexible to

00:37:59,080 --> 00:38:06,820
use I've seen setup and teardown methods

00:38:04,030 --> 00:38:10,600
grow really huge you usually have a base

00:38:06,820 --> 00:38:13,330
class for all your tests and it grows

00:38:10,600 --> 00:38:17,910
over time and it becomes a mess usually

00:38:13,330 --> 00:38:17,910
at least that's how it turns out for me

00:38:19,080 --> 00:38:25,570
so this is what it looks like when you

00:38:21,520 --> 00:38:28,510
use a fixture this fixture I already

00:38:25,570 --> 00:38:31,810
show you showed it to you earlier this

00:38:28,510 --> 00:38:37,560
is included with Titus jungle so you get

00:38:31,810 --> 00:38:41,170
it by just having parties jungle gold so

00:38:37,560 --> 00:38:43,570
you will just get an instance of the

00:38:41,170 --> 00:38:45,880
test client passed in whenever you add

00:38:43,570 --> 00:38:48,390
the client argument to any of your test

00:38:45,880 --> 00:38:48,390
functions

00:38:54,789 --> 00:39:00,669
this is another fixture that is bundled

00:38:57,309 --> 00:39:03,969
with Pettis Django so fixtures can also

00:39:00,669 --> 00:39:06,579
handle tear down and this is what this

00:39:03,969 --> 00:39:10,900
fixture does because this is a special

00:39:06,579 --> 00:39:13,569
kind of setting subject which records

00:39:10,900 --> 00:39:17,349
all the changes you do to it and then

00:39:13,569 --> 00:39:19,949
after the test it will restore the

00:39:17,349 --> 00:39:23,919
modifications you made to the settings

00:39:19,949 --> 00:39:25,900
so this is useful if you want to run

00:39:23,919 --> 00:39:28,419
some code with other settings and it

00:39:25,900 --> 00:39:31,479
shows how powerful the the fixtures are

00:39:28,419 --> 00:39:34,349
that you can automatically do things

00:39:31,479 --> 00:39:34,349
after the test

00:39:38,520 --> 00:39:42,570
but the best part about fixtures is

00:39:40,710 --> 00:39:47,250
really that they are really it's really

00:39:42,570 --> 00:39:50,400
easy to create your own fixtures so you

00:39:47,250 --> 00:39:53,730
basically create a function that will be

00:39:50,400 --> 00:39:55,800
called to instantiate the object that

00:39:53,730 --> 00:39:59,940
you want to inject into the test

00:39:55,800 --> 00:40:03,870
function then you decorate that method

00:39:59,940 --> 00:40:08,100
with the PI test fixture decorator so

00:40:03,870 --> 00:40:11,430
this will allow us to add a person as an

00:40:08,100 --> 00:40:13,170
argument for any test in our testitude

00:40:11,430 --> 00:40:17,690
and we will have an instance of the

00:40:13,170 --> 00:40:19,950
person passed in for us you can put this

00:40:17,690 --> 00:40:24,050
globally for your project so you can

00:40:19,950 --> 00:40:24,050
have access to them in all of your tests

00:40:25,730 --> 00:40:30,300
this also works for saved objects

00:40:28,500 --> 00:40:32,790
objects that you want to have saved in

00:40:30,300 --> 00:40:35,070
your database the thing to notice here

00:40:32,790 --> 00:40:38,520
is that you in order for that to work

00:40:35,070 --> 00:40:43,170
your fixture needs access to the

00:40:38,520 --> 00:40:45,330
database and the django d B marker does

00:40:43,170 --> 00:40:51,080
not work for fixtures so you have to put

00:40:45,330 --> 00:40:51,080
in the DB argument to the fixture itself

00:40:52,970 --> 00:40:59,630
so I don't have time to go more deeply

00:40:55,980 --> 00:41:02,820
into these fixtures but they are really

00:40:59,630 --> 00:41:09,390
powerful feature and the I highly

00:41:02,820 --> 00:41:10,920
recommend that you check them out I'm

00:41:09,390 --> 00:41:15,300
just going to give some recommendations

00:41:10,920 --> 00:41:17,940
on some videos some presentations the

00:41:15,300 --> 00:41:21,690
first it from kollmeyer is a django core

00:41:17,940 --> 00:41:23,940
developer in this presentation he shows

00:41:21,690 --> 00:41:27,450
a lot of best practices when it comes to

00:41:23,940 --> 00:41:30,480
testing in Django you should really

00:41:27,450 --> 00:41:33,090
check it out you can if you missed

00:41:30,480 --> 00:41:35,460
holgate crackles talk the other day on

00:41:33,090 --> 00:41:38,370
high test you should check that out too

00:41:35,460 --> 00:41:41,730
he goes into more detail on how to use

00:41:38,370 --> 00:41:46,880
fixtures and he shows other parts of my

00:41:41,730 --> 00:41:46,880
test so i highly recommend both of those

00:41:47,660 --> 00:41:54,599
so there's also going to be a sprint on

00:41:51,510 --> 00:41:58,349
pi test tomorrow here your Python so

00:41:54,599 --> 00:42:00,920
holy crackle and others will be there to

00:41:58,349 --> 00:42:04,560
work on pi test I will probably work on

00:42:00,920 --> 00:42:08,250
Titus jungle to make it handle paralyzed

00:42:04,560 --> 00:42:11,280
test runs so everyone is of course very

00:42:08,250 --> 00:42:14,010
welcome to join us you'll stab your name

00:42:11,280 --> 00:42:18,960
to the your pythons print page if you're

00:42:14,010 --> 00:42:22,500
interested so I just want to point out

00:42:18,960 --> 00:42:26,130
again that pie tests and pitas jungle

00:42:22,500 --> 00:42:29,369
works with both worlds so your existing

00:42:26,130 --> 00:42:32,310
test suit will most likely just run asus

00:42:29,369 --> 00:42:35,310
so you can it's really easy to change to

00:42:32,310 --> 00:42:39,060
switch to PI test since it's so

00:42:35,310 --> 00:42:41,990
compatible and then you can migrate to

00:42:39,060 --> 00:42:45,240
PI test style tests over time as you see

00:42:41,990 --> 00:42:51,089
when your new writing new tests or when

00:42:45,240 --> 00:42:52,800
you're in changing old code so i hope

00:42:51,089 --> 00:42:55,230
you all picked up something useful and

00:42:52,800 --> 00:42:58,760
that you try out by test for your tests

00:42:55,230 --> 00:42:58,760
and yeah thank you for listening

00:43:03,680 --> 00:43:14,549
it was really good are there any

00:43:06,329 --> 00:43:18,089
questions hello thanks a lot for this

00:43:14,549 --> 00:43:20,549
awesome talk I have a few thousand

00:43:18,089 --> 00:43:23,369
questions I hope you have times sure go

00:43:20,549 --> 00:43:25,410
ahead just quickly you talked about the

00:43:23,369 --> 00:43:27,539
the test data base and that you can

00:43:25,410 --> 00:43:29,400
reuse it yeah what's the name is it

00:43:27,539 --> 00:43:33,569
tests and the project name like in

00:43:29,400 --> 00:43:36,900
jungle well okay perfect what happens if

00:43:33,569 --> 00:43:39,809
you use a assert with your your asset

00:43:36,900 --> 00:43:43,829
and then coma and your message like you

00:43:39,809 --> 00:43:46,460
can do usually will it later I think

00:43:43,829 --> 00:43:48,779
that the message will be shown to them

00:43:46,460 --> 00:43:53,369
I'm not entirely sure but yeah I think

00:43:48,779 --> 00:43:59,190
so yes yeah Holger Holger author of my

00:43:53,369 --> 00:44:01,920
test and you should help me ask him also

00:43:59,190 --> 00:44:03,839
so you're was very funny the pile of poo

00:44:01,920 --> 00:44:05,369
thing so I would be interested to see

00:44:03,839 --> 00:44:09,930
how yeah maybe I should pack lift up

00:44:05,369 --> 00:44:12,329
this fight as per week I wanna see what

00:44:09,930 --> 00:44:15,180
was missing maybe I don't know why but

00:44:12,329 --> 00:44:17,640
can you see the the the time taken for

00:44:15,180 --> 00:44:20,880
the whole test run yes you can you can

00:44:17,640 --> 00:44:24,450
actually specify different options with

00:44:20,880 --> 00:44:28,170
different verbosity levels so if you

00:44:24,450 --> 00:44:30,420
turn if you pass a dash B you will have

00:44:28,170 --> 00:44:32,640
the timings of the test run and you can

00:44:30,420 --> 00:44:35,099
you can have different different ways of

00:44:32,640 --> 00:44:40,979
show showing the test results you have

00:44:35,099 --> 00:44:45,299
something to hug you and I was that's

00:44:40,979 --> 00:44:48,269
the last one sorry just a quick thought

00:44:45,299 --> 00:44:51,749
I saw there's the markers thing yes

00:44:48,269 --> 00:44:53,880
magic on only rendered test for the the

00:44:51,749 --> 00:44:55,799
database or software that can you add a

00:44:53,880 --> 00:44:58,529
marker for functional tests for example

00:44:55,799 --> 00:45:00,869
and say okay this is a nine-run only

00:44:58,529 --> 00:45:02,880
those you can create any markers you

00:45:00,869 --> 00:45:07,190
like and you can name them anything you

00:45:02,880 --> 00:45:07,190
like and then you can filter on those

00:45:09,640 --> 00:45:17,450
yes yeah I a small question about

00:45:15,529 --> 00:45:20,539
Marcus's where I assume you can combine

00:45:17,450 --> 00:45:24,680
multiple marks on test cases is that

00:45:20,539 --> 00:45:26,809
true yes and how do you then you I think

00:45:24,680 --> 00:45:30,109
you just put multiple decorator on each

00:45:26,809 --> 00:45:32,569
and you can also put I show the tightest

00:45:30,109 --> 00:45:35,119
mark for an eat an entire module I think

00:45:32,569 --> 00:45:42,039
you can put a list of markers mark

00:45:35,119 --> 00:45:46,690
multiple tests yeah okay yeah thanks is

00:45:42,039 --> 00:45:51,410
there some sort of standard mock for

00:45:46,690 --> 00:45:58,190
Django models and if not would it be a

00:45:51,410 --> 00:46:00,440
good idea I know there is a not sure

00:45:58,190 --> 00:46:05,299
what it's called there is a package that

00:46:00,440 --> 00:46:08,750
does that mocks manager and query

00:46:05,299 --> 00:46:16,910
methods I'm can't remember the name of

00:46:08,750 --> 00:46:19,309
it right now so I can look that up but

00:46:16,910 --> 00:46:23,809
I'm not really sure I think it's if you

00:46:19,309 --> 00:46:25,460
separate your code into put Aquarian

00:46:23,809 --> 00:46:28,910
code in one place and put your logic in

00:46:25,460 --> 00:46:31,430
one place there's not much need for any

00:46:28,910 --> 00:46:35,029
special case special kinds of machs I

00:46:31,430 --> 00:46:38,480
think but that's called the pepper it

00:46:35,029 --> 00:46:40,700
depends on what you do I have another

00:46:38,480 --> 00:46:43,039
question you've been recommending a

00:46:40,700 --> 00:46:46,940
factory boy i've been using a different

00:46:43,039 --> 00:46:49,609
library called model mommy yeah so they

00:46:46,940 --> 00:46:51,559
we can just say mommy make and then pass

00:46:49,609 --> 00:46:53,539
it a model or you can even pass a string

00:46:51,559 --> 00:46:55,309
with the name of a model and it's going

00:46:53,539 --> 00:46:57,319
to create an instance with a random data

00:46:55,309 --> 00:47:01,569
and it's going to change every time so

00:46:57,319 --> 00:47:01,569
after a similar option in factory boy

00:47:01,720 --> 00:47:06,920
I'm not sure actually but that sounds

00:47:05,150 --> 00:47:08,930
really useful then you don't have to

00:47:06,920 --> 00:47:11,900
type out the definitions for the

00:47:08,930 --> 00:47:15,140
factories yeah I think there are other

00:47:11,900 --> 00:47:17,599
alternatives to and you can create

00:47:15,140 --> 00:47:19,460
factories pretty easily by just doing a

00:47:17,599 --> 00:47:20,730
dictionary with the folds and then

00:47:19,460 --> 00:47:22,710
updating the addiction

00:47:20,730 --> 00:47:24,450
a if you want to do it by hand for

00:47:22,710 --> 00:47:29,190
simpler things so that's also a

00:47:24,450 --> 00:47:31,560
possibility okay so you are saying about

00:47:29,190 --> 00:47:35,280
separating your models and your query

00:47:31,560 --> 00:47:36,870
logic from the business logic yeah could

00:47:35,280 --> 00:47:40,200
you could you talk more about that what

00:47:36,870 --> 00:47:42,270
what would the query return how many

00:47:40,200 --> 00:47:46,950
query methods would you make how will

00:47:42,270 --> 00:47:51,660
you organize them so basically I try to

00:47:46,950 --> 00:47:54,900
put the query encode on on managers so

00:47:51,660 --> 00:47:56,930
they do any complex squaring and then

00:47:54,900 --> 00:48:00,180
then you just return equations and then

00:47:56,930 --> 00:48:04,800
I take that question and pass that into

00:48:00,180 --> 00:48:06,600
like the application logic functions so

00:48:04,800 --> 00:48:10,280
the application logic functions

00:48:06,600 --> 00:48:14,280
basically get a list of model objects

00:48:10,280 --> 00:48:15,990
and then it becomes very easy because

00:48:14,280 --> 00:48:18,180
then you can just create your own list

00:48:15,990 --> 00:48:21,210
of unsaved model objects and pass those

00:48:18,180 --> 00:48:23,550
in into the logic functions so that's

00:48:21,210 --> 00:48:27,030
the kind of separation i usually do and

00:48:23,550 --> 00:48:29,190
I mean I guess how many or how much is

00:48:27,030 --> 00:48:33,570
clear it up the pencil project and how

00:48:29,190 --> 00:48:36,090
you how you yeah what things you need to

00:48:33,570 --> 00:48:38,340
do and do you ever need to access

00:48:36,090 --> 00:48:42,300
related objects from the business logic

00:48:38,340 --> 00:48:45,450
and can you also do a similar yes yeah

00:48:42,300 --> 00:48:50,120
you can for instance with the person and

00:48:45,450 --> 00:48:56,820
the group if you use the the unsaved

00:48:50,120 --> 00:48:59,850
objects you can just access by the by

00:48:56,820 --> 00:49:02,450
the attributes for your unsaved objects

00:48:59,850 --> 00:49:05,280
too so you can pass any objects in that

00:49:02,450 --> 00:49:07,200
you acquire your application logic does

00:49:05,280 --> 00:49:09,630
not need to know about if it's saved or

00:49:07,200 --> 00:49:12,050
if it's not most of the time did that

00:49:09,630 --> 00:49:12,050
answer your question

00:49:13,650 --> 00:49:16,740
anyone else

00:49:18,840 --> 00:49:23,630
with the option of not destroying the

00:49:21,360 --> 00:49:27,720
database does the data persist across

00:49:23,630 --> 00:49:31,230
test ones no because after each tests

00:49:27,720 --> 00:49:36,510
each test case or run a within a

00:49:31,230 --> 00:49:38,790
transaction so after each test all data

00:49:36,510 --> 00:49:41,160
rolled back that you might have happen

00:49:38,790 --> 00:49:49,290
to create so there will be no data left

00:49:41,160 --> 00:49:51,620
in the database a lot alright thank you

00:49:49,290 --> 00:49:51,620

YouTube URL: https://www.youtube.com/watch?v=aUf8Fkb7TaY


