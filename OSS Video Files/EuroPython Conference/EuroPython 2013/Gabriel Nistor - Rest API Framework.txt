Title: Gabriel Nistor - Rest API Framework
Publication date: 2015-04-18
Playlist: EuroPython 2013
Description: 
	[EuroPython 2013]  
Gabriel Nistor - Rest API Framework - 05 July 2013 "Track Big-Mac"
Captions: 
	00:00:00,000 --> 00:00:09,120
well I work for a source fabric which is

00:00:03,270 --> 00:00:14,610
the open source company its products for

00:00:09,120 --> 00:00:25,529
maybe we can you can visit us at source

00:00:14,610 --> 00:00:30,260
fabric the log okay so sorry did we

00:00:25,529 --> 00:00:30,260
start creating this frame

00:00:36,690 --> 00:00:43,239
okay so why did we created a leap I

00:00:40,570 --> 00:00:46,000
framework which is a rest framework the

00:00:43,239 --> 00:00:49,239
main reasons after making the proper

00:00:46,000 --> 00:00:52,089
research in the mainstream frameworks we

00:00:49,239 --> 00:00:55,030
notice that either they had something

00:00:52,089 --> 00:00:56,530
but they're missing other parts for

00:00:55,030 --> 00:00:59,829
instance we needed a lot of plug-in

00:00:56,530 --> 00:01:02,530
ability and isolation of components in

00:00:59,829 --> 00:01:05,080
order to have proper coastal

00:01:02,530 --> 00:01:07,150
customization since we might have

00:01:05,080 --> 00:01:10,600
different clients in media organizations

00:01:07,150 --> 00:01:12,580
have different requirements so

00:01:10,600 --> 00:01:17,409
customization was one important thing to

00:01:12,580 --> 00:01:20,650
have then another problem was the fact

00:01:17,409 --> 00:01:22,810
that when you committed to a normal

00:01:20,650 --> 00:01:26,409
framework usually are really committed

00:01:22,810 --> 00:01:29,369
to that in the sense that you're

00:01:26,409 --> 00:01:32,170
starting writing rest api is in django

00:01:29,369 --> 00:01:35,170
you need also try besides the business

00:01:32,170 --> 00:01:37,840
logic also the representation like your

00:01:35,170 --> 00:01:40,509
strict to jason strictly rest we need

00:01:37,840 --> 00:01:44,229
something for instance one time I at

00:01:40,509 --> 00:01:47,109
some point request well we use soap our

00:01:44,229 --> 00:01:50,350
application you so well you can do about

00:01:47,109 --> 00:01:53,649
it so we needed also to have disability

00:01:50,350 --> 00:01:56,829
to later on change how we render the

00:01:53,649 --> 00:02:01,539
data without the need of reimplemented

00:01:56,829 --> 00:02:04,299
all the logic that we already had of

00:02:01,539 --> 00:02:08,110
course everybody in scalability that was

00:02:04,299 --> 00:02:10,470
also one concern the framework it's in

00:02:08,110 --> 00:02:13,600
such a way written that you can

00:02:10,470 --> 00:02:16,870
distribute or separate business logic

00:02:13,600 --> 00:02:19,540
since rest is stateless you can have

00:02:16,870 --> 00:02:22,209
multiple machines serving special

00:02:19,540 --> 00:02:26,080
purposes like one machine handling user

00:02:22,209 --> 00:02:28,000
management one machine media hive so for

00:02:26,080 --> 00:02:31,150
the song so you can actually scale

00:02:28,000 --> 00:02:37,800
vertically or horizontally as you need

00:02:31,150 --> 00:02:41,470
to and we also have the reusability part

00:02:37,800 --> 00:02:43,730
this is mostly linked with the fact that

00:02:41,470 --> 00:02:46,400
we have a service-oriented

00:02:43,730 --> 00:02:50,180
the architecture so in order to be able

00:02:46,400 --> 00:02:55,549
to not write the same stuff more than

00:02:50,180 --> 00:02:58,250
once we had this approach and there's

00:02:55,549 --> 00:03:05,690
also some magic happening behind all of

00:02:58,250 --> 00:03:13,420
this in the sense that the rest is based

00:03:05,690 --> 00:03:13,420
on a model layout like so just a second

00:03:15,610 --> 00:03:20,989
so rested something like you have a user

00:03:18,620 --> 00:03:22,640
model then append it with other

00:03:20,989 --> 00:03:25,250
resources that you can later or

00:03:22,640 --> 00:03:27,230
investigate I know if I think everybody

00:03:25,250 --> 00:03:31,220
it's kind of familiar with the restful

00:03:27,230 --> 00:03:33,260
concept so in order to have this but

00:03:31,220 --> 00:03:36,049
also write a service-oriented

00:03:33,260 --> 00:03:37,970
architecture which is much friendly and

00:03:36,049 --> 00:03:40,340
much easier to customize and change

00:03:37,970 --> 00:03:42,670
later on we have some magic happening

00:03:40,340 --> 00:03:45,019
behind that which transform so from a

00:03:42,670 --> 00:03:51,260
service-oriented architecture to a model

00:03:45,019 --> 00:03:55,549
restful model layout okay the early

00:03:51,260 --> 00:03:58,160
framework is basically component the

00:03:55,549 --> 00:04:03,590
main component it provides dependency

00:03:58,160 --> 00:04:08,690
injection so in order to use all the

00:04:03,590 --> 00:04:12,019
services that you implement or all the

00:04:08,690 --> 00:04:13,880
required components we have a special

00:04:12,019 --> 00:04:16,820
package where you will declare all your

00:04:13,880 --> 00:04:20,870
setup functions it's somehow inspired

00:04:16,820 --> 00:04:23,870
based on spring but it's not using XML

00:04:20,870 --> 00:04:30,169
is pure python and it's much more

00:04:23,870 --> 00:04:33,020
powerful since allows more than just set

00:04:30,169 --> 00:04:36,500
up it also allows for distribution

00:04:33,020 --> 00:04:39,169
control allows you to check if one

00:04:36,500 --> 00:04:41,810
component or plugin is present then act

00:04:39,169 --> 00:04:45,110
upon it or make the necessary updates

00:04:41,810 --> 00:04:50,270
based on your new version of plug-in or

00:04:45,110 --> 00:04:53,510
component dependency injection has one

00:04:50,270 --> 00:04:55,639
flaw it's the fact that you need to

00:04:53,510 --> 00:04:59,090
write a lot of setup files in order to

00:04:55,639 --> 00:05:02,090
figure to your code and in order to

00:04:59,090 --> 00:05:03,889
avoid this we also that other adapted

00:05:02,090 --> 00:05:06,740
some ideas for spring which is

00:05:03,889 --> 00:05:09,050
aspect-oriented programming I don't know

00:05:06,740 --> 00:05:12,400
who are you familiar with dependency

00:05:09,050 --> 00:05:12,400
injection in aspect-oriented programming

00:05:12,610 --> 00:05:17,210
dependency injection is something like

00:05:14,779 --> 00:05:20,210
in order to avoid patterns like single

00:05:17,210 --> 00:05:22,639
tone or factory where you are actually

00:05:20,210 --> 00:05:25,099
searching for your resource like one

00:05:22,639 --> 00:05:29,240
service using another service in order

00:05:25,099 --> 00:05:31,219
to avoid such a location of service we

00:05:29,240 --> 00:05:34,909
have the dependency injection you just

00:05:31,219 --> 00:05:37,759
define a class attribute saying that I'm

00:05:34,909 --> 00:05:40,400
the user service and I require the user

00:05:37,759 --> 00:05:42,710
type service in order to properly work

00:05:40,400 --> 00:05:45,379
so somebody needs to provide me that

00:05:42,710 --> 00:05:47,900
implementation for the user type service

00:05:45,379 --> 00:05:52,879
it's not like I'm going to search it in

00:05:47,900 --> 00:05:55,759
some factory or repository and as I said

00:05:52,879 --> 00:05:58,759
this leads up to setup functions a lot

00:05:55,759 --> 00:06:01,939
of setup function and ninety percent of

00:05:58,759 --> 00:06:04,669
the case you just have the same thing

00:06:01,939 --> 00:06:08,839
repeating over and over so in order to

00:06:04,669 --> 00:06:10,339
apply this batch setups we use

00:06:08,839 --> 00:06:12,949
aspect-oriented programming where you

00:06:10,339 --> 00:06:16,699
just say ok all the classes that are

00:06:12,949 --> 00:06:21,759
followed in user management for instance

00:06:16,699 --> 00:06:24,469
API just load them and consider them as

00:06:21,759 --> 00:06:26,649
the API and publish them and the

00:06:24,469 --> 00:06:30,080
implementation are found in this package

00:06:26,649 --> 00:06:32,750
so you can I using conventions for the

00:06:30,080 --> 00:06:38,449
names for instance for alchemy we use

00:06:32,750 --> 00:06:40,189
something like request service alchemy

00:06:38,449 --> 00:06:42,139
at the end and then we just say

00:06:40,189 --> 00:06:47,479
everything that's with alchemy needs to

00:06:42,139 --> 00:06:50,330
have a session wrap for SQL alchemy also

00:06:47,479 --> 00:06:53,240
other nice abilities that the framework

00:06:50,330 --> 00:06:55,659
provides is extracting configuration so

00:06:53,240 --> 00:06:58,729
you don't need to actually put your

00:06:55,659 --> 00:07:01,009
general configuration in a file reading

00:06:58,729 --> 00:07:02,629
from there you just say I have this

00:07:01,009 --> 00:07:05,019
configuration it's a default and the

00:07:02,629 --> 00:07:07,310
container actually knows to extract that

00:07:05,019 --> 00:07:07,740
configuration and place it in a property

00:07:07,310 --> 00:07:10,349
file

00:07:07,740 --> 00:07:12,780
for you there's also the distribution

00:07:10,349 --> 00:07:18,360
management as I said provides version

00:07:12,780 --> 00:07:21,690
control and plug-in management the

00:07:18,360 --> 00:07:24,780
components so the application is made

00:07:21,690 --> 00:07:26,789
very flexible so as I said the AL

00:07:24,780 --> 00:07:29,280
framework is actually the base component

00:07:26,789 --> 00:07:31,199
but it also manages the other components

00:07:29,280 --> 00:07:35,039
from the distribution by distribution I

00:07:31,199 --> 00:07:38,160
mean you can have an application just

00:07:35,039 --> 00:07:42,210
have several components or and plugins

00:07:38,160 --> 00:07:43,949
depending on a case and that application

00:07:42,210 --> 00:07:45,810
behaves a certain way when you actually

00:07:43,949 --> 00:07:48,419
remove a component you might get

00:07:45,810 --> 00:07:50,940
different behavior because now you don't

00:07:48,419 --> 00:07:55,159
have users just user type it's kind of

00:07:50,940 --> 00:08:00,210
behaviors so also manages the components

00:07:55,159 --> 00:08:04,349
what's the architecture behind this so

00:08:00,210 --> 00:08:07,409
we don't use rest as a side dish for our

00:08:04,349 --> 00:08:11,250
application we actually use rest as the

00:08:07,409 --> 00:08:14,250
main back-end service and we have

00:08:11,250 --> 00:08:19,380
JavaScript client that uses rest now

00:08:14,250 --> 00:08:21,150
it's rewritten for angularjs and the

00:08:19,380 --> 00:08:23,599
request comes from the JavaScript client

00:08:21,150 --> 00:08:27,930
and goes through several proxies in

00:08:23,599 --> 00:08:29,669
order to provide functionality that's

00:08:27,930 --> 00:08:32,130
usually associated with a web

00:08:29,669 --> 00:08:35,010
application since the restful

00:08:32,130 --> 00:08:37,770
application are stateless so you're not

00:08:35,010 --> 00:08:42,990
allowed to keep information about user

00:08:37,770 --> 00:08:45,750
or change states between requests so you

00:08:42,990 --> 00:08:48,630
don't have security there we cannot have

00:08:45,750 --> 00:08:52,320
security it's a bad design pattern so

00:08:48,630 --> 00:08:54,329
that's why we have the Gateway it

00:08:52,320 --> 00:08:57,810
automatically handles the blocking of

00:08:54,329 --> 00:09:03,390
URLs or ready reacting or whatever is

00:08:57,810 --> 00:09:06,680
necessary the cash I think it's very

00:09:03,390 --> 00:09:09,870
obvious we also have a CDN component

00:09:06,680 --> 00:09:12,270
since the rest is just handling model

00:09:09,870 --> 00:09:15,120
data models there's no content there

00:09:12,270 --> 00:09:17,160
there's no files nothing like that so we

00:09:15,120 --> 00:09:18,209
need another server to provide us to

00:09:17,160 --> 00:09:20,429
stream as the

00:09:18,209 --> 00:09:24,529
modern files like the client JavaScript

00:09:20,429 --> 00:09:27,990
files or media files and stuff like that

00:09:24,529 --> 00:09:30,899
the CDM is actually now a simple

00:09:27,990 --> 00:09:35,339
implementation that we can have but that

00:09:30,899 --> 00:09:37,319
actual CDN can be even a third party

00:09:35,339 --> 00:09:39,290
application or something else like we

00:09:37,319 --> 00:09:43,800
can use mobile TV or something like that

00:09:39,290 --> 00:09:48,230
the assemblage is something that we

00:09:43,800 --> 00:09:50,759
invented the biggest problem with rest

00:09:48,230 --> 00:09:54,480
it's the fact that you have huge amounts

00:09:50,759 --> 00:09:57,029
of requests if you have a user list that

00:09:54,480 --> 00:09:59,160
has 10 users in it you don't get the

00:09:57,029 --> 00:10:02,189
entire user there just get a reference

00:09:59,160 --> 00:10:04,410
to where you can fetch the user so this

00:10:02,189 --> 00:10:06,689
means if you have a 10 user list you

00:10:04,410 --> 00:10:10,970
need to make like 11 request to actually

00:10:06,689 --> 00:10:13,829
have a table with those users which is

00:10:10,970 --> 00:10:16,559
it's not very good create an intensity

00:10:13,829 --> 00:10:19,559
is big problems so in order to avoid is

00:10:16,559 --> 00:10:23,549
we have this proxy server actually has

00:10:19,559 --> 00:10:25,769
the ability to make those requests for

00:10:23,549 --> 00:10:28,110
you you just specify ok I want the user

00:10:25,769 --> 00:10:30,509
list but please fetch me also the user

00:10:28,110 --> 00:10:32,790
entity based on the reference that the

00:10:30,509 --> 00:10:35,519
user have and compose a response that

00:10:32,790 --> 00:10:38,189
contains all of them this is much better

00:10:35,519 --> 00:10:40,860
than forces a keep connection alive or

00:10:38,189 --> 00:10:43,110
something like that where you just get a

00:10:40,860 --> 00:10:44,549
response dance and the network next

00:10:43,110 --> 00:10:46,860
because because you don't have the LA

00:10:44,549 --> 00:10:49,230
tensity you just get response one once

00:10:46,860 --> 00:10:53,509
you don't need to read the previous

00:10:49,230 --> 00:10:56,670
response we also have the notifier which

00:10:53,509 --> 00:11:00,420
basically watches the rest data for you

00:10:56,670 --> 00:11:03,089
and pushes through web sockets all the

00:11:00,420 --> 00:11:04,740
changes to the client so these are voids

00:11:03,089 --> 00:11:09,179
like for instance if you have a user

00:11:04,740 --> 00:11:12,089
list and you know you need refreshing on

00:11:09,179 --> 00:11:15,449
that because it's a lot of traffic then

00:11:12,089 --> 00:11:17,999
notify actually avoids you avoids the

00:11:15,449 --> 00:11:20,779
need of making multiple requests same

00:11:17,999 --> 00:11:25,379
user list by pushing the changes to you

00:11:20,779 --> 00:11:29,519
so it's not the rest server its rest but

00:11:25,379 --> 00:11:31,260
all the other proxy makes the actual

00:11:29,519 --> 00:11:36,150
work with rest much more

00:11:31,260 --> 00:11:39,030
yeah here's a brief discussion of the

00:11:36,150 --> 00:11:43,530
proxy server so we have the CDM the cash

00:11:39,030 --> 00:11:46,950
the gateway the assemblage and the

00:11:43,530 --> 00:11:51,240
notifier was the previous things I was

00:11:46,950 --> 00:11:53,370
saying okay so now we end up to the

00:11:51,240 --> 00:11:59,040
wrestler what exactly does the rest of

00:11:53,370 --> 00:12:01,950
our do so as I said the magic from a

00:11:59,040 --> 00:12:07,770
service-oriented architecture it's

00:12:01,950 --> 00:12:10,560
creating a model layout like Wilson like

00:12:07,770 --> 00:12:13,530
attaching one model with another model

00:12:10,560 --> 00:12:16,680
based on either services or model

00:12:13,530 --> 00:12:20,250
definitions also provides transforming

00:12:16,680 --> 00:12:24,030
like making your models represented

00:12:20,250 --> 00:12:26,400
either in JSON XML soap if you need or

00:12:24,030 --> 00:12:29,070
whatever other technologies since we

00:12:26,400 --> 00:12:31,290
already have all the data like we have

00:12:29,070 --> 00:12:33,840
the metadata we already know what

00:12:31,290 --> 00:12:37,710
components what types we have so we can

00:12:33,840 --> 00:12:39,960
do all of that very easily and the

00:12:37,710 --> 00:12:42,300
container relies on plugins in order to

00:12:39,960 --> 00:12:46,680
provide the models that are related to

00:12:42,300 --> 00:12:49,710
the users the plugins need all it to

00:12:46,680 --> 00:12:51,840
implement the business logic not more

00:12:49,710 --> 00:12:54,930
than that like they don't need to care

00:12:51,840 --> 00:12:57,240
how its rendered how is represented not

00:12:54,930 --> 00:13:00,540
like nothing like that need to be

00:12:57,240 --> 00:13:03,450
stateless so they don't need to contain

00:13:00,540 --> 00:13:04,860
any data for more requests or other they

00:13:03,450 --> 00:13:11,730
don't have to worry about cashing your

00:13:04,860 --> 00:13:13,230
security will make a simple example as I

00:13:11,730 --> 00:13:16,110
said because of tango string this is a

00:13:13,230 --> 00:13:18,420
really simple example that makes an idea

00:13:16,110 --> 00:13:21,260
on how easy is to create something so

00:13:18,420 --> 00:13:24,300
this is the model we just define a class

00:13:21,260 --> 00:13:26,850
with class attribute saying I deeds type

00:13:24,300 --> 00:13:30,840
integer name in string and description

00:13:26,850 --> 00:13:34,500
also string the class it's random a

00:13:30,840 --> 00:13:36,660
right and you see we need to decorate it

00:13:34,500 --> 00:13:38,970
with the model we need to specify to the

00:13:36,660 --> 00:13:42,690
container this class is actually a model

00:13:38,970 --> 00:13:44,550
that you need to represent it's not

00:13:42,690 --> 00:13:46,860
mandatory but usually more

00:13:44,550 --> 00:13:49,019
those need to have an ID so i'm

00:13:46,860 --> 00:13:51,630
specifying that the idea is actually the

00:13:49,019 --> 00:13:55,800
ID attribute this helps in constructing

00:13:51,630 --> 00:13:58,620
the URL and now we have the service

00:13:55,800 --> 00:14:00,269
which provides these models maybe i

00:13:58,620 --> 00:14:02,430
should mention that the model has no

00:14:00,269 --> 00:14:05,490
business in it so it's just the data

00:14:02,430 --> 00:14:08,970
carrier all the business is finding

00:14:05,490 --> 00:14:13,620
services so it's a simple service we

00:14:08,970 --> 00:14:15,450
just have a method get by ID where we

00:14:13,620 --> 00:14:18,899
actually provide the right model based

00:14:15,450 --> 00:14:21,810
on on right ID model we also need to

00:14:18,899 --> 00:14:24,810
decorate with service the service class

00:14:21,810 --> 00:14:28,649
and we call all the functions that we

00:14:24,810 --> 00:14:30,750
need to expose to the rest api we use

00:14:28,649 --> 00:14:33,180
annotations in order to inform the

00:14:30,750 --> 00:14:37,019
container that the ID is actually the

00:14:33,180 --> 00:14:38,670
right ID i'm talking about so he needs

00:14:37,019 --> 00:14:40,829
to know this kind of information like

00:14:38,670 --> 00:14:46,010
you need to specify ok this function

00:14:40,829 --> 00:14:50,459
will accept an idea return an ID model

00:14:46,010 --> 00:14:52,170
in this case now the container will know

00:14:50,459 --> 00:14:55,790
how to handle this method will see later

00:14:52,170 --> 00:14:59,850
on how it's done implementation is a

00:14:55,790 --> 00:15:01,860
rather rudimentary implementation we use

00:14:59,850 --> 00:15:04,579
mainly sqlalchemy for our

00:15:01,860 --> 00:15:07,140
implementations but then we'll go to

00:15:04,579 --> 00:15:10,800
didn't want to go too deep because of

00:15:07,140 --> 00:15:13,709
time so we just say create a right model

00:15:10,800 --> 00:15:15,529
set the ID that was provided a name a

00:15:13,709 --> 00:15:18,390
description and just written that right

00:15:15,529 --> 00:15:23,880
it's just something to see if it's

00:15:18,390 --> 00:15:26,899
working ok as a result we have a xml

00:15:23,880 --> 00:15:30,810
representation we just have this URL

00:15:26,899 --> 00:15:34,050
localhost 8080 resources right which is

00:15:30,810 --> 00:15:37,110
the model a and then the ID so this URL

00:15:34,050 --> 00:15:39,630
is basically constructed on based on

00:15:37,110 --> 00:15:42,779
your specifications in the annotation

00:15:39,630 --> 00:15:45,810
for the service so it automatically

00:15:42,779 --> 00:15:50,730
associates this URL with the get body

00:15:45,810 --> 00:15:53,190
method in your right service so you can

00:15:50,730 --> 00:15:56,910
see here the model gets represented in

00:15:53,190 --> 00:15:58,030
XML why I should mention also the

00:15:56,910 --> 00:16:02,020
services are

00:15:58,030 --> 00:16:03,910
never found as as being representing the

00:16:02,020 --> 00:16:06,370
models for instance if i change my

00:16:03,910 --> 00:16:07,960
service name or my functions name will

00:16:06,370 --> 00:16:10,450
not affect how the application behaves

00:16:07,960 --> 00:16:13,780
those are not used anywhere if i change

00:16:10,450 --> 00:16:16,750
my modeling from right to user that will

00:16:13,780 --> 00:16:19,570
get reflected so the model is the

00:16:16,750 --> 00:16:21,490
primary thing that it's used the

00:16:19,570 --> 00:16:25,870
services are just associated based

00:16:21,490 --> 00:16:27,880
validations and here's a simple Jaser so

00:16:25,870 --> 00:16:33,840
it knows represent the same model either

00:16:27,880 --> 00:16:37,840
JSON or XML while we use these Python 3

00:16:33,840 --> 00:16:40,750
as I said SQL alchemy it's our main or

00:16:37,840 --> 00:16:42,820
am we use we have really nice way of

00:16:40,750 --> 00:16:46,570
embedding our rest models with

00:16:42,820 --> 00:16:50,080
declarative models from SPL alchemy we

00:16:46,570 --> 00:16:52,630
also have query models which are easily

00:16:50,080 --> 00:16:55,120
integrated the query mothers actually

00:16:52,630 --> 00:16:59,800
reflecting data that you can filter by

00:16:55,120 --> 00:17:02,470
your models that can also be handled for

00:16:59,800 --> 00:17:08,530
you automatically we use bubble for

00:17:02,470 --> 00:17:13,030
internalization scanning mongrel for for

00:17:08,530 --> 00:17:15,850
production deployment especially and ma

00:17:13,030 --> 00:17:18,280
gram 0 and Q I should mention that the

00:17:15,850 --> 00:17:20,920
server is also not buying it so we have

00:17:18,280 --> 00:17:23,110
like three type of servers now a basic

00:17:20,920 --> 00:17:26,740
one for development a sink or a

00:17:23,110 --> 00:17:29,260
synchronous one also using development

00:17:26,740 --> 00:17:31,720
emigrate for production and optionally

00:17:29,260 --> 00:17:39,850
we use also solar for our media hype

00:17:31,720 --> 00:17:42,300
plugins thank you very much and any

00:17:39,850 --> 00:17:42,300
questions

00:17:53,539 --> 00:17:56,200
expose

00:18:00,840 --> 00:18:03,440
great

00:18:03,860 --> 00:18:13,450
there are some constraints okay so

00:18:10,700 --> 00:18:17,150
you're actually interested how you can

00:18:13,450 --> 00:18:22,390
bind res model story the existing SQL

00:18:17,150 --> 00:18:26,390
corrupt me meta meta declarative classes

00:18:22,390 --> 00:18:30,530
there's some constraint on the model by

00:18:26,390 --> 00:18:32,360
convention but it's can be changed the

00:18:30,530 --> 00:18:34,309
back conversion everything starts with

00:18:32,360 --> 00:18:40,280
an uppercase vs. and this might create

00:18:34,309 --> 00:18:48,710
the problem but as a mapping can show

00:18:40,280 --> 00:18:51,470
you wisdom it's basically just create a

00:18:48,710 --> 00:19:02,059
declarative class inherit the rest model

00:18:51,470 --> 00:19:07,040
or create one previously of that there's

00:19:02,059 --> 00:19:11,240
a lot of cool application is quite big

00:19:07,040 --> 00:19:18,169
it has like the ninety thousand lines of

00:19:11,240 --> 00:19:23,570
you so this is an example on how the

00:19:18,169 --> 00:19:28,400
right it's mapped you know we listen to

00:19:23,570 --> 00:19:30,890
me okay so I have the right model I just

00:19:28,400 --> 00:19:35,480
create the right map which extends the

00:19:30,890 --> 00:19:38,000
base with the declarative declarative

00:19:35,480 --> 00:19:39,890
sqlalchemy I just associate the table

00:19:38,000 --> 00:19:41,990
create the unique constraints whatever

00:19:39,890 --> 00:19:45,049
is needed and then I just simply

00:19:41,990 --> 00:19:48,760
override the same ID by saying column ID

00:19:45,049 --> 00:19:52,510
create actually a column for that type

00:19:48,760 --> 00:19:57,890
so if you go in reverse you can actually

00:19:52,510 --> 00:20:00,049
based on this create different create

00:19:57,890 --> 00:20:02,150
another model for the rest and just

00:20:00,049 --> 00:20:05,660
reflect this ID type name and

00:20:02,150 --> 00:20:08,840
description we can actually also do to

00:20:05,660 --> 00:20:11,299
create models on directly from these

00:20:08,840 --> 00:20:13,429
types since we already have the

00:20:11,299 --> 00:20:16,380
information about it's an integra type

00:20:13,429 --> 00:20:20,760
or string type or whatever

00:20:16,380 --> 00:20:22,980
so yeah you can also move existing meta

00:20:20,760 --> 00:20:29,270
declarative class and expose them to

00:20:22,980 --> 00:20:32,460
rest the only things the models are only

00:20:29,270 --> 00:20:35,100
having as data primitive data or

00:20:32,460 --> 00:20:37,880
relations with other models so you

00:20:35,100 --> 00:20:41,520
cannot inject the for instance if right

00:20:37,880 --> 00:20:43,740
like you see here type it's just the ID

00:20:41,520 --> 00:20:47,040
of the right type that's associated with

00:20:43,740 --> 00:20:50,970
that right it's not the entire model so

00:20:47,040 --> 00:20:53,850
this is one constraint and the framework

00:20:50,970 --> 00:20:55,500
actually when renders the right we just

00:20:53,850 --> 00:21:02,010
provides you with the reference where

00:20:55,500 --> 00:21:04,550
you can get the actual right types hope

00:21:02,010 --> 00:21:04,550
this helps

00:21:13,720 --> 00:21:21,920
I haven't tried that so it's possible to

00:21:18,470 --> 00:21:24,710
use Rackspace for the application I'm

00:21:21,920 --> 00:21:30,380
not able to ask that since you never

00:21:24,710 --> 00:21:32,350
came up momentarily I think we host the

00:21:30,380 --> 00:21:34,820
solutions ourselves yeah but

00:21:32,350 --> 00:21:38,630
theoretically if you have Python 3 2

00:21:34,820 --> 00:21:43,250
since everything is pure python set some

00:21:38,630 --> 00:21:45,620
libraries it should work wherever you

00:21:43,250 --> 00:21:55,300
have Python 3 so the application is pure

00:21:45,620 --> 00:21:55,300

YouTube URL: https://www.youtube.com/watch?v=RWFpMMfECeg


