Title: Joe Gordon - Very Large Development How to run code review for 800+ Open Source Python Developers
Publication date: 2015-04-18
Playlist: EuroPython 2013
Description: 
	[EuroPython 2013] 
Joe Gordon - Very Large Development: How to run code review for 800+ Open Source Python Developers - 05 July 2013 "Track Lasagne"
Captions: 
	00:00:01,159 --> 00:00:05,879
okay good morning I'm good morning this

00:00:04,140 --> 00:00:12,840
is the last day of our Python in

00:00:05,879 --> 00:00:16,470
Florence I'm so sad but but here we have

00:00:12,840 --> 00:00:19,380
Joe Gordon if you are interested in open

00:00:16,470 --> 00:00:22,830
second out how to manage a very large

00:00:19,380 --> 00:00:30,420
scale project he has the answers thank

00:00:22,830 --> 00:00:31,710
you Joe thank you and good morning Terry

00:00:30,420 --> 00:00:33,360
but very large development had to run

00:00:31,710 --> 00:00:37,320
open how to run code review for a big

00:00:33,360 --> 00:00:38,940
large Python project so about me I'm a

00:00:37,320 --> 00:00:40,230
open stack developer at HP I've been

00:00:38,940 --> 00:00:43,800
working up a sack for about two years

00:00:40,230 --> 00:00:46,020
now and HP for about a month so still

00:00:43,800 --> 00:00:48,360
pretty new there so very large developed

00:00:46,020 --> 00:00:51,660
what is it so all numbers here in this

00:00:48,360 --> 00:00:54,930
presentation from Olo net so olo defines

00:00:51,660 --> 00:00:56,789
very large as in this case its recent

00:00:54,930 --> 00:01:00,239
development and so it's 889 developers

00:00:56,789 --> 00:01:02,100
in last one year and OpenStack is in the

00:01:00,239 --> 00:01:05,479
top two percent of all projects ah no lo

00:01:02,100 --> 00:01:08,520
and one of the biggest ones in the world

00:01:05,479 --> 00:01:11,460
so what is OpenStack it's Python lots

00:01:08,520 --> 00:01:13,890
and lots of Python it's 620,000 12

00:01:11,460 --> 00:01:17,850
Python plus comment and white space and

00:01:13,890 --> 00:01:19,049
other files as well though its massive

00:01:17,850 --> 00:01:21,000
and there's very few projects on the

00:01:19,049 --> 00:01:23,159
scale of open second pipe and I've been

00:01:21,000 --> 00:01:24,240
trying to find answers for that what's

00:01:23,159 --> 00:01:26,610
bigger and it's been hard to find those

00:01:24,240 --> 00:01:28,740
numbers but the only project to know

00:01:26,610 --> 00:01:30,630
that bigger is pi PI at just hundred

00:01:28,740 --> 00:01:33,420
million lines of Python itself no

00:01:30,630 --> 00:01:34,740
comments no spaces and if anybody knows

00:01:33,420 --> 00:01:36,509
anything bigger than this I'd be happy

00:01:34,740 --> 00:01:38,310
to to update the slides and find out

00:01:36,509 --> 00:01:39,600
about it but these are very very few

00:01:38,310 --> 00:01:41,579
projects have been working at the scale

00:01:39,600 --> 00:01:44,939
of you know python descriptive language

00:01:41,579 --> 00:01:46,320
and massive massive massive scale the

00:01:44,939 --> 00:01:47,790
OpenStack is some of you may know by now

00:01:46,320 --> 00:01:48,869
since we have a bunch of people here and

00:01:47,790 --> 00:01:51,149
a bunch of companies and a bunch of

00:01:48,869 --> 00:01:53,909
presentations is API is to

00:01:51,149 --> 00:01:55,259
programmatically consume allocate and

00:01:53,909 --> 00:01:58,110
consume compute Network and storage

00:01:55,259 --> 00:02:00,270
resources and so this is a simplified

00:01:58,110 --> 00:02:01,710
you know PR diagram we have for what

00:02:00,270 --> 00:02:03,390
OpenStack does what it looks like this

00:02:01,710 --> 00:02:04,530
is what it looks like to a user they

00:02:03,390 --> 00:02:06,060
want to spin up an instance you want to

00:02:04,530 --> 00:02:08,030
spin up some networking or some storage

00:02:06,060 --> 00:02:09,989
this is what it looks like to you

00:02:08,030 --> 00:02:12,150
underneath it's a bit more complex than

00:02:09,989 --> 00:02:14,370
that there's a lot more than just

00:02:12,150 --> 00:02:16,170
for different pieces here our dashboard

00:02:14,370 --> 00:02:18,209
compute Network and storage there's a

00:02:16,170 --> 00:02:20,220
lot more underneath all of it so this is

00:02:18,209 --> 00:02:21,150
a moray from a more developer point of

00:02:20,220 --> 00:02:22,860
view what it looks like this is the

00:02:21,150 --> 00:02:25,019
different services we have a dashboard

00:02:22,860 --> 00:02:26,579
that's a big django app we have we have

00:02:25,019 --> 00:02:28,170
networking which just recently changed

00:02:26,579 --> 00:02:31,260
from quantum two neutron because of

00:02:28,170 --> 00:02:32,609
copyright infringement so we're going

00:02:31,260 --> 00:02:35,040
through some growing you know growth

00:02:32,609 --> 00:02:36,930
pains here we have block storage compute

00:02:35,040 --> 00:02:38,849
image object storage and identity

00:02:36,930 --> 00:02:40,890
service to manage identity across all

00:02:38,849 --> 00:02:42,180
these services and then we have many

00:02:40,890 --> 00:02:44,670
many more services that are becoming

00:02:42,180 --> 00:02:46,620
online as new incubated projects will be

00:02:44,670 --> 00:02:49,590
out of the next six months year year and

00:02:46,620 --> 00:02:50,760
a half or so and so that's still a

00:02:49,590 --> 00:02:51,870
simplified diagram and this is what it

00:02:50,760 --> 00:02:53,489
actually looks like underneath so it's

00:02:51,870 --> 00:02:56,609
even bigger than that each project

00:02:53,489 --> 00:02:57,900
itself for example compute here has a

00:02:56,609 --> 00:02:59,340
whole bunch of different components to

00:02:57,900 --> 00:03:01,500
it and so each one is running many many

00:02:59,340 --> 00:03:02,790
services across many many machines so

00:03:01,500 --> 00:03:04,980
this is a big complicated piece of

00:03:02,790 --> 00:03:06,329
software that runs in many machines a

00:03:04,980 --> 00:03:07,439
lot of moving parts a lot of different

00:03:06,329 --> 00:03:09,329
projects were working trying to

00:03:07,439 --> 00:03:12,120
coordinate together this is a big mess

00:03:09,329 --> 00:03:16,799
as you can see by all the messy lines on

00:03:12,120 --> 00:03:18,989
this diagram so who is OpenStack so

00:03:16,799 --> 00:03:20,760
these are the top OpenStack is run by a

00:03:18,989 --> 00:03:23,310
foundation now similar to other big

00:03:20,760 --> 00:03:26,669
projects Linux a whole bunch of others

00:03:23,310 --> 00:03:28,470
these are the main the top two tiers of

00:03:26,669 --> 00:03:31,579
members to the boards we have some big

00:03:28,470 --> 00:03:35,609
companies here HP my company AT&T IBM

00:03:31,579 --> 00:03:38,430
Ubuntu Red Hat suzay cisco dell intel

00:03:35,609 --> 00:03:39,930
and many many more and then those are

00:03:38,430 --> 00:03:41,280
this to people who are on the foundation

00:03:39,930 --> 00:03:42,359
there's a whole bunch many the whole

00:03:41,280 --> 00:03:44,489
bunch more people actually using

00:03:42,359 --> 00:03:47,099
OpenStack in production today paypal

00:03:44,489 --> 00:03:50,280
cisco cern they've been a bunch of news

00:03:47,099 --> 00:03:52,079
about sharon using this NSA which were

00:03:50,280 --> 00:03:53,220
not necessarily happy about anymore that

00:03:52,079 --> 00:03:55,790
they're using it but they're using it

00:03:53,220 --> 00:03:58,319
for something we're not really sure what

00:03:55,790 --> 00:04:00,090
canonical katie dreamhost some big

00:03:58,319 --> 00:04:01,949
clouds on it now whole bunch of big

00:04:00,090 --> 00:04:04,349
companies been putting lots of work and

00:04:01,949 --> 00:04:05,459
using an open sack so it's starting to

00:04:04,349 --> 00:04:09,690
gain momentum and starting to really

00:04:05,459 --> 00:04:11,099
starting a seed in the marketplace so

00:04:09,690 --> 00:04:12,090
unfortunately this is crop the bottom

00:04:11,099 --> 00:04:14,099
here is crap but this is a rackspace

00:04:12,090 --> 00:04:15,599
data center so deployment scale what are

00:04:14,099 --> 00:04:16,799
we trying to do for an OpenStack what

00:04:15,599 --> 00:04:18,720
scale are you trying to aim for anything

00:04:16,799 --> 00:04:19,859
for the data center so this is actually

00:04:18,720 --> 00:04:21,560
you see if you look carefully this is

00:04:19,859 --> 00:04:24,300
actually an empty data center

00:04:21,560 --> 00:04:26,080
unfortunately but this is one of

00:04:24,300 --> 00:04:28,569
Rackspace's data centers that are

00:04:26,080 --> 00:04:29,800
open sat cloud into so we're looking for

00:04:28,569 --> 00:04:31,930
the whole data etc we're not looking for

00:04:29,800 --> 00:04:33,430
small scale everything's big here things

00:04:31,930 --> 00:04:34,689
where OpenStack works on small scale but

00:04:33,430 --> 00:04:37,330
we try to make it work on a large scale

00:04:34,689 --> 00:04:38,680
data center scale as well so we're

00:04:37,330 --> 00:04:42,460
trying to make this big complex system

00:04:38,680 --> 00:04:44,080
working this big complex scale not only

00:04:42,460 --> 00:04:46,240
is this signing this thing for a big

00:04:44,080 --> 00:04:47,889
scale it's being developed a large scale

00:04:46,240 --> 00:04:49,750
and so that makes things even harder so

00:04:47,889 --> 00:04:51,430
everything about OpenStack is big so

00:04:49,750 --> 00:04:54,039
trying to work out the biggest

00:04:51,430 --> 00:04:56,860
deployment I know of is 16,000 nodes so

00:04:54,039 --> 00:04:58,690
one cluster 16,000 nodes there's a whole

00:04:56,860 --> 00:05:00,909
bunch more clusters of similar size out

00:04:58,690 --> 00:05:04,090
there and we're trying to you know

00:05:00,909 --> 00:05:07,659
develop this with 900 developers over

00:05:04,090 --> 00:05:09,969
all the time zones that I know if so by

00:05:07,659 --> 00:05:12,520
the numbers the last 30 days this is

00:05:09,969 --> 00:05:15,280
also from olo there's been 2,200 commits

00:05:12,520 --> 00:05:18,219
over it from 290 contributors last 12

00:05:15,280 --> 00:05:20,169
months it's been 24 24,000 commits and

00:05:18,219 --> 00:05:22,090
eat just under nine hundred committers

00:05:20,169 --> 00:05:25,029
so that's a huge scale there's very few

00:05:22,090 --> 00:05:26,110
projects in Python the work of the scale

00:05:25,029 --> 00:05:28,629
things like the Linux kernel are

00:05:26,110 --> 00:05:30,400
massively bigger than this we don't even

00:05:28,629 --> 00:05:31,960
compare I think they're like one or two

00:05:30,400 --> 00:05:33,819
orders of magnitude bigger one or two

00:05:31,960 --> 00:05:34,900
orders of magnitude bigger than us we've

00:05:33,819 --> 00:05:37,960
been around for three years they've been

00:05:34,900 --> 00:05:39,340
around for a few more so the past three

00:05:37,960 --> 00:05:42,729
years of OpenStack and it's turning

00:05:39,340 --> 00:05:45,250
three I think next month next week maybe

00:05:42,729 --> 00:05:46,990
actually there's been just over a

00:05:45,250 --> 00:05:49,569
thousand contributors and there's been

00:05:46,990 --> 00:05:50,740
65,000 commits so this is a lot of code

00:05:49,569 --> 00:05:52,509
and a lot of a lot of it's moving

00:05:50,740 --> 00:05:55,509
quickly and it's been growing by leaps

00:05:52,509 --> 00:05:56,860
and bounds so this is a graph over time

00:05:55,509 --> 00:05:59,050
unfortunately this is cropped a little

00:05:56,860 --> 00:06:00,490
bit sorry about that in January two

00:05:59,050 --> 00:06:02,710
thousand eleven this is early on the

00:06:00,490 --> 00:06:04,599
project that was the first year there is

00:06:02,710 --> 00:06:06,279
only 61 contributors in 71 thousand

00:06:04,599 --> 00:06:07,719
lines of code and now we're just under

00:06:06,279 --> 00:06:09,909
you know six hundred thousand lines of

00:06:07,719 --> 00:06:11,620
code so we've run by an order of

00:06:09,909 --> 00:06:12,610
magnitude in two and a half years or so

00:06:11,620 --> 00:06:14,680
so this has been a huge accomplishment

00:06:12,610 --> 00:06:17,740
for us to be able to grow at this scale

00:06:14,680 --> 00:06:19,449
and try to maintain you know improve the

00:06:17,740 --> 00:06:21,879
the you know the quality of this offerin

00:06:19,449 --> 00:06:23,680
you improve the numbers you can grow the

00:06:21,879 --> 00:06:25,240
number of services we provide and to

00:06:23,680 --> 00:06:26,500
make everything work at large scale so

00:06:25,240 --> 00:06:28,180
this has been a big challenge for us and

00:06:26,500 --> 00:06:30,260
we've we're pretty proud of the results

00:06:28,180 --> 00:06:32,300
we have

00:06:30,260 --> 00:06:33,440
so as some of you know and hopefully

00:06:32,300 --> 00:06:35,120
many of you know python is a great

00:06:33,440 --> 00:06:36,410
language we all love it but this in pros

00:06:35,120 --> 00:06:39,860
and cons for using a massive massive

00:06:36,410 --> 00:06:41,930
massive scale pros is fast develop it's

00:06:39,860 --> 00:06:43,610
fun hopefully we're here agrees with

00:06:41,930 --> 00:06:44,840
that one it's a very approachable

00:06:43,610 --> 00:06:46,700
language that's one of the reason we be

00:06:44,840 --> 00:06:48,440
able to grow the project so quickly it's

00:06:46,700 --> 00:06:50,420
very easy to get you know say hade start

00:06:48,440 --> 00:06:51,440
you know working on Python it's easy a

00:06:50,420 --> 00:06:53,020
lot of people already know and if they

00:06:51,440 --> 00:06:54,710
don't know it it's not too hard to learn

00:06:53,020 --> 00:06:55,940
that's one of the ways we've actually

00:06:54,710 --> 00:06:57,620
been able to grow the project to the

00:06:55,940 --> 00:06:58,910
scale of us today and without that it

00:06:57,620 --> 00:07:01,460
was something like see we would not have

00:06:58,910 --> 00:07:03,500
the success we've had today in this some

00:07:01,460 --> 00:07:04,850
of the cons is that it doesn't really

00:07:03,500 --> 00:07:06,260
work well a large scale it's not

00:07:04,850 --> 00:07:08,330
designed for doesn't have really good

00:07:06,260 --> 00:07:09,590
type checking if at all this has been

00:07:08,330 --> 00:07:11,810
good talks here about how to do type

00:07:09,590 --> 00:07:14,080
checking in Python but they all involve

00:07:11,810 --> 00:07:17,450
adding more data into the system

00:07:14,080 --> 00:07:18,980
docstrings or whatever it is other

00:07:17,450 --> 00:07:20,660
static analysis isn't as good as it

00:07:18,980 --> 00:07:22,250
could be for a compiled language up say

00:07:20,660 --> 00:07:23,360
and it doesn't have really built and

00:07:22,250 --> 00:07:26,120
concurrency that's something we want to

00:07:23,360 --> 00:07:28,220
use a large system even small system

00:07:26,120 --> 00:07:29,390
still Monty's concurrency and that's

00:07:28,220 --> 00:07:30,590
been a problem for us although we've

00:07:29,390 --> 00:07:32,570
been using event led for that as to work

00:07:30,590 --> 00:07:33,830
very well for us we've hit a few snags

00:07:32,570 --> 00:07:35,720
along the way with event lit and file

00:07:33,830 --> 00:07:38,390
bugs upstream and are working through

00:07:35,720 --> 00:07:39,710
those problems with concurrency so these

00:07:38,390 --> 00:07:41,330
are some of the problems we've had a try

00:07:39,710 --> 00:07:44,320
to address invasion the development

00:07:41,330 --> 00:07:48,400
process work for Python and large scale

00:07:44,320 --> 00:07:48,400
so the development process itself

00:07:48,800 --> 00:07:52,890
so a very common way to do development

00:07:51,210 --> 00:07:54,870
today is on github it's a great tool we

00:07:52,890 --> 00:07:56,130
all love and use it and it's great for

00:07:54,870 --> 00:07:58,380
really small projects and this is the

00:07:56,130 --> 00:07:59,610
sort of standard process on a small

00:07:58,380 --> 00:08:01,860
github project you're running with some

00:07:59,610 --> 00:08:03,180
friends or in a small company you fork

00:08:01,860 --> 00:08:05,310
the repo you go to you know it's running

00:08:03,180 --> 00:08:06,750
from for example pet bait let's say pet

00:08:05,310 --> 00:08:09,660
baits on there the guy is not in the

00:08:06,750 --> 00:08:11,820
room today but you a fork Pepe make a

00:08:09,660 --> 00:08:13,680
change you write the code run the test

00:08:11,820 --> 00:08:16,020
you push it up to the github then you

00:08:13,680 --> 00:08:17,520
say you submit a pull request the patch

00:08:16,020 --> 00:08:20,370
is interviewed by the maintainer or

00:08:17,520 --> 00:08:21,870
anybody else and then you you know you

00:08:20,370 --> 00:08:23,460
fix the patch up as you go along to

00:08:21,870 --> 00:08:25,260
amend you know fix any negative comments

00:08:23,460 --> 00:08:27,420
and the code is merged and then

00:08:25,260 --> 00:08:29,670
something like a travesty I runs on

00:08:27,420 --> 00:08:31,860
trunk to see if it's green or red and

00:08:29,670 --> 00:08:34,020
this is example I took this morning and

00:08:31,860 --> 00:08:35,280
you know that little I'm sure I'll you

00:08:34,020 --> 00:08:38,250
seen that the light on bill does green

00:08:35,280 --> 00:08:40,380
build is failing and it's very useful

00:08:38,250 --> 00:08:43,080
but this didn't work for us and so we've

00:08:40,380 --> 00:08:44,520
had to evolve our process so where we

00:08:43,080 --> 00:08:47,970
started we started actually under Tsar

00:08:44,520 --> 00:08:50,880
and launch pad so no get this was three

00:08:47,970 --> 00:08:52,080
years ago github wasn't really the you

00:08:50,880 --> 00:08:54,090
know the powerhouse it is today it

00:08:52,080 --> 00:08:55,500
wasn't as you know feature riches you

00:08:54,090 --> 00:08:57,450
know we would have needed it we use the

00:08:55,500 --> 00:08:59,250
tool at the time which was launchpad and

00:08:57,450 --> 00:09:01,710
bizarre this is an example of early

00:08:59,250 --> 00:09:04,500
patch it's very similar to the process

00:09:01,710 --> 00:09:07,020
but bizarre is well bazaars in some

00:09:04,500 --> 00:09:08,340
cases and it didn't work for us we

00:09:07,020 --> 00:09:09,870
wanted to improve the process and make

00:09:08,340 --> 00:09:12,810
it scale a little better so the first

00:09:09,870 --> 00:09:14,070
thing we did so this is the evolution of

00:09:12,810 --> 00:09:16,560
how things have changed since the

00:09:14,070 --> 00:09:18,240
beginning the first step is going to get

00:09:16,560 --> 00:09:21,030
and Garrett we all love get hopefully

00:09:18,240 --> 00:09:24,540
here and I don't know who anybody here

00:09:21,030 --> 00:09:28,370
is use Garrett before or just from well

00:09:24,540 --> 00:09:30,630
a few others ok Garrett's a nice tool it

00:09:28,370 --> 00:09:32,820
hooks into get very well it hooks into a

00:09:30,630 --> 00:09:35,010
common tool common use cases get Garrett

00:09:32,820 --> 00:09:37,530
and and Jenkins they all work very well

00:09:35,010 --> 00:09:38,790
together and it's a nice review tool so

00:09:37,530 --> 00:09:41,490
it's designed for reviewing you go on

00:09:38,790 --> 00:09:42,720
there you push a patch up somebody

00:09:41,490 --> 00:09:44,490
provides feedback you know inline

00:09:42,720 --> 00:09:46,320
comments like this one put comments at

00:09:44,490 --> 00:09:48,480
the bottom could amend your patch have

00:09:46,320 --> 00:09:50,700
histories and it manages the merge

00:09:48,480 --> 00:09:52,860
process it's a very nice tool for for

00:09:50,700 --> 00:09:54,630
just doing you know high quality reviews

00:09:52,860 --> 00:09:55,800
with the nice things actually is the

00:09:54,630 --> 00:09:57,630
inline commenting it's a really great

00:09:55,800 --> 00:09:59,640
feature we all been really you know

00:09:57,630 --> 00:10:01,020
enjoyed a lot I'm this an example of

00:09:59,640 --> 00:10:01,930
early on what things look like so

00:10:01,020 --> 00:10:03,490
everything

00:10:01,930 --> 00:10:05,080
manual we just had get and Garrett so we

00:10:03,490 --> 00:10:07,180
could do in line commenting you could

00:10:05,080 --> 00:10:08,710
amend it a patch you could have a whole

00:10:07,180 --> 00:10:10,960
you know you know discussion at the

00:10:08,710 --> 00:10:12,190
bottom things like that but unit tests

00:10:10,960 --> 00:10:13,839
were run manual if this is an example of

00:10:12,190 --> 00:10:16,300
guys saying I tried running this it

00:10:13,839 --> 00:10:17,680
didn't work something's wrong so this

00:10:16,300 --> 00:10:19,570
was nice we could actually do this now

00:10:17,680 --> 00:10:21,070
but this wasn't really enough this is

00:10:19,570 --> 00:10:22,959
sort of a slow process and nobody really

00:10:21,070 --> 00:10:24,820
wants to be you know run the unit test

00:10:22,959 --> 00:10:28,089
which could take a long time openstack

00:10:24,820 --> 00:10:30,880
now the biggest project Nova has just

00:10:28,089 --> 00:10:32,350
under seventy thousand unit tests so

00:10:30,880 --> 00:10:34,209
it's we have a lot of unit tests they

00:10:32,350 --> 00:10:35,290
take a long time with all the

00:10:34,209 --> 00:10:37,180
improvements we have now I think it's

00:10:35,290 --> 00:10:38,680
about five to ten minutes depending on a

00:10:37,180 --> 00:10:40,600
computer so even that that's pretty slow

00:10:38,680 --> 00:10:42,279
so we want to we don't actually have to

00:10:40,600 --> 00:10:43,959
manually run this all the time when

00:10:42,279 --> 00:10:46,360
you're doing this manually just like

00:10:43,959 --> 00:10:48,100
this you know trunk breaks somebody

00:10:46,360 --> 00:10:49,839
misses something somehow it happens it

00:10:48,100 --> 00:10:52,270
happens for all you know only human and

00:10:49,839 --> 00:10:53,770
you have to fix trunk and it breaks and

00:10:52,270 --> 00:10:55,209
nobody's happy about that well you have

00:10:53,770 --> 00:10:57,100
800 developers somebody wants to kill

00:10:55,209 --> 00:10:59,380
you if you break trunk so that was the

00:10:57,100 --> 00:11:01,330
first thing we did is we actually

00:10:59,380 --> 00:11:03,160
decided the gate on pet bait and unit

00:11:01,330 --> 00:11:04,810
tests so before anything was merged

00:11:03,160 --> 00:11:06,640
would actually run pet bait and the unit

00:11:04,810 --> 00:11:08,380
tests on it and if it didn't work then

00:11:06,640 --> 00:11:10,500
you would the patch won't get merchant

00:11:08,380 --> 00:11:13,150
has to go back to the review the

00:11:10,500 --> 00:11:14,320
developer to actually fix it and so this

00:11:13,150 --> 00:11:16,660
one of the first steps in making sure

00:11:14,320 --> 00:11:18,790
things scale which was never break trunk

00:11:16,660 --> 00:11:20,260
and that helped us a lot and this kit

00:11:18,790 --> 00:11:23,620
you owns look this is really useful for

00:11:20,260 --> 00:11:24,970
us but it wasn't enough for us turns out

00:11:23,620 --> 00:11:27,100
that opens after trying to run out many

00:11:24,970 --> 00:11:28,690
many platforms when the platforms is rel

00:11:27,100 --> 00:11:30,160
rels a great platform but it doesn't

00:11:28,690 --> 00:11:32,560
support pipeline 27 as many of you may

00:11:30,160 --> 00:11:35,529
know or not so we had I do want to run

00:11:32,560 --> 00:11:37,300
Python 26 as well so now we have in

00:11:35,529 --> 00:11:39,430
addition to just running Python 27 unit

00:11:37,300 --> 00:11:41,589
test we said we decided to run Python 26

00:11:39,430 --> 00:11:43,050
unit test as well you're using talks for

00:11:41,589 --> 00:11:46,180
that makes it really easy to run both

00:11:43,050 --> 00:11:47,440
but now we have twice amount of work an

00:11:46,180 --> 00:11:49,690
additional unit tests are pretty good

00:11:47,440 --> 00:11:50,980
but for a big project like OpenStack you

00:11:49,690 --> 00:11:53,770
want something like integration tests to

00:11:50,980 --> 00:11:55,810
really flush out all the bugs so the

00:11:53,770 --> 00:11:57,459
next step was to start running Python

00:11:55,810 --> 00:11:59,459
2627 unit tests and then doing

00:11:57,459 --> 00:12:01,990
integration tests on every merge as well

00:11:59,459 --> 00:12:05,410
and this caught a lot more bugs and make

00:12:01,990 --> 00:12:06,850
things even more stable but we still had

00:12:05,410 --> 00:12:10,810
this problem this is a classic review

00:12:06,850 --> 00:12:12,040
problem you know may have pet bait

00:12:10,810 --> 00:12:13,690
mistakes won't get into trunk but

00:12:12,040 --> 00:12:15,430
they'll get into the reviewer has to

00:12:13,690 --> 00:12:15,790
tell the developer to fix it otherwise

00:12:15,430 --> 00:12:17,830
they

00:12:15,790 --> 00:12:19,210
try to merge it and then you realize oh

00:12:17,830 --> 00:12:21,550
this didn't merge because I have a tab

00:12:19,210 --> 00:12:24,370
in there because Python doesn't like

00:12:21,550 --> 00:12:25,930
tabs and you have to go back and fix it

00:12:24,370 --> 00:12:27,570
and that's a slow process and developer

00:12:25,930 --> 00:12:29,920
reviewers will look out for that and

00:12:27,570 --> 00:12:31,210
that really just wasn't a fun thing to

00:12:29,920 --> 00:12:33,430
do you'd have to check unit tests by

00:12:31,210 --> 00:12:35,080
hand and then you know we try to merge

00:12:33,430 --> 00:12:36,730
it things went merge cuz it broke and

00:12:35,080 --> 00:12:37,810
it'd be this whole painful process and

00:12:36,730 --> 00:12:39,880
there's a lot of burden on the reviewer

00:12:37,810 --> 00:12:42,190
to fix this and reviewers are fairly

00:12:39,880 --> 00:12:44,680
score scarce resource and want to make

00:12:42,190 --> 00:12:46,420
things as easy as possible for them so

00:12:44,680 --> 00:12:49,210
the next step is decided to have run

00:12:46,420 --> 00:12:51,250
these same tests on the the gate checks

00:12:49,210 --> 00:12:52,870
the add submission time so you put it

00:12:51,250 --> 00:12:54,760
push a patch to get it I'm going to run

00:12:52,870 --> 00:12:56,410
all the tests we have on that patch and

00:12:54,760 --> 00:12:58,480
reviewer could see that so here's an

00:12:56,410 --> 00:12:59,980
example it's a similar to similar to the

00:12:58,480 --> 00:13:01,960
one before but this is from a patch the

00:12:59,980 --> 00:13:03,250
guy pushes a patch we run the unit tests

00:13:01,960 --> 00:13:05,320
on if you run pepe to run the

00:13:03,250 --> 00:13:08,110
integration tests and he sees he messed

00:13:05,320 --> 00:13:10,960
something up in Python 26 so he goes and

00:13:08,110 --> 00:13:12,400
tries again and then finally when

00:13:10,960 --> 00:13:14,410
everything the screen or Rovira co this

00:13:12,400 --> 00:13:16,060
patch is working this is up to the basic

00:13:14,410 --> 00:13:17,830
standards we want now we'll go and

00:13:16,060 --> 00:13:19,630
actually look at the code for is this

00:13:17,830 --> 00:13:22,180
make sense does this you know is it done

00:13:19,630 --> 00:13:25,260
right just have unit tests for it all

00:13:22,180 --> 00:13:25,260
these other things we're looking for

00:13:25,459 --> 00:13:28,910
and we've taken this even further and

00:13:27,679 --> 00:13:31,309
currently we have is you can see a lot

00:13:28,910 --> 00:13:33,470
more tests this was not too long ago

00:13:31,309 --> 00:13:36,050
this is I think under a year ago and

00:13:33,470 --> 00:13:37,639
this is today we've you know why not run

00:13:36,050 --> 00:13:39,050
more tests we have one of the nice

00:13:37,639 --> 00:13:40,699
things about running OpenStack is said

00:13:39,050 --> 00:13:42,829
we have a bunch of big public cloud

00:13:40,699 --> 00:13:44,990
providers like HP Rackspace and others

00:13:42,829 --> 00:13:48,019
and so we have essentially unlimited CI

00:13:44,990 --> 00:13:50,209
resources so our Jenkins system has you

00:13:48,019 --> 00:13:52,550
know the number about 100-200 if not

00:13:50,209 --> 00:13:55,100
more slave to and we could add more

00:13:52,550 --> 00:13:56,449
we're actually working on Jenkins isn't

00:13:55,100 --> 00:13:58,490
scaling the level we wanted to do so

00:13:56,449 --> 00:14:00,529
actually working on running multiple

00:13:58,490 --> 00:14:02,509
Jenkins with multiple multiple Jenkins

00:14:00,529 --> 00:14:05,509
masters and pushing to multiple Jenkins

00:14:02,509 --> 00:14:06,439
masters who can run even more tests you

00:14:05,509 --> 00:14:08,089
see here actually some of these tests

00:14:06,439 --> 00:14:10,490
take up to an hour so things are a bit

00:14:08,089 --> 00:14:12,559
slow but we have you know as many

00:14:10,490 --> 00:14:13,519
servers as you want they're all VMS it's

00:14:12,559 --> 00:14:16,100
you know we're using the cloud to

00:14:13,519 --> 00:14:18,529
develop the cloud it all sort of works

00:14:16,100 --> 00:14:20,449
out nicely so now we have pet bay tests

00:14:18,529 --> 00:14:22,610
we have now doc tests we wanna make sure

00:14:20,449 --> 00:14:24,019
the docs always build i believe that

00:14:22,610 --> 00:14:25,670
just Fink's we build them all there make

00:14:24,019 --> 00:14:26,509
sure it works if you're changing a doc

00:14:25,670 --> 00:14:28,519
in there you don't want to break

00:14:26,509 --> 00:14:30,319
something I've done it many times before

00:14:28,519 --> 00:14:31,879
and it's nice to know early on that you

00:14:30,319 --> 00:14:34,910
broke it and not have somebody yell at

00:14:31,879 --> 00:14:36,589
you later still run the Python 2627 test

00:14:34,910 --> 00:14:39,019
and they're about depending the project

00:14:36,589 --> 00:14:42,019
in this case the Nova one this is a 10

00:14:39,019 --> 00:14:46,160
to 20 minutes and it takes it's about

00:14:42,019 --> 00:14:47,449
60,000 tests so it's pretty big then we

00:14:46,160 --> 00:14:49,279
have Deb stack and temperature

00:14:47,449 --> 00:14:50,749
integration environment so tempest is

00:14:49,279 --> 00:14:52,639
our integration test suite and def sax

00:14:50,749 --> 00:14:54,439
or integration testing environment and

00:14:52,639 --> 00:14:56,540
because OpenStack supports many many

00:14:54,439 --> 00:14:58,309
backends we support my sequel sequel

00:14:56,540 --> 00:15:00,259
alchemy or we support sequel alchemy

00:14:58,309 --> 00:15:02,660
which supports my sequel postgres equal

00:15:00,259 --> 00:15:04,639
light etc etc we actually decided to

00:15:02,660 --> 00:15:06,619
start running the integration test

00:15:04,639 --> 00:15:09,319
against multiple different backends so

00:15:06,619 --> 00:15:10,699
we test multiple databases we test two

00:15:09,319 --> 00:15:12,350
different networking models and we're

00:15:10,699 --> 00:15:14,779
always looking to add more tests and

00:15:12,350 --> 00:15:15,949
different environments to support and we

00:15:14,779 --> 00:15:18,019
also this new tool which as you can see

00:15:15,949 --> 00:15:19,879
is actually not working as of a couple

00:15:18,019 --> 00:15:22,129
days ago which is called grenade which

00:15:19,879 --> 00:15:24,230
is a upgrade test OpenStack is a big

00:15:22,129 --> 00:15:26,269
project a lot of real case deployments

00:15:24,230 --> 00:15:27,410
who might we want to make sure upgrades

00:15:26,269 --> 00:15:29,149
and that's been a real problem for us in

00:15:27,410 --> 00:15:31,339
the past so we decided we're working on

00:15:29,149 --> 00:15:32,629
a upgrade test this will take the old

00:15:31,339 --> 00:15:34,579
test apply the new patch with this

00:15:32,629 --> 00:15:36,199
upgrade in it it'll try running the

00:15:34,579 --> 00:15:38,720
database upgrade and see if everything

00:15:36,199 --> 00:15:39,139
works but it's a work in progress right

00:15:38,720 --> 00:15:41,600
now and we

00:15:39,139 --> 00:15:43,910
always looking to add more tests to make

00:15:41,600 --> 00:15:45,829
our lives easier and lastly have a pilot

00:15:43,910 --> 00:15:47,389
test this is actually an interesting one

00:15:45,829 --> 00:15:48,889
which it's not running piloting the

00:15:47,389 --> 00:15:52,249
whole project it runs pylant on the year

00:15:48,889 --> 00:15:54,109
patch only pilot had so many pilots so

00:15:52,249 --> 00:15:55,669
thorough and so detailed that making a

00:15:54,109 --> 00:15:58,639
big project you know 200,000 line

00:15:55,669 --> 00:16:00,259
project past pilot was a big project if

00:15:58,639 --> 00:16:01,279
you wanted to get around that and you

00:16:00,259 --> 00:16:02,299
know what could we do in the meantime to

00:16:01,279 --> 00:16:05,589
make sure we don't make things at least

00:16:02,299 --> 00:16:05,589
worse and so that's where we are today

00:16:06,249 --> 00:16:10,220
so the life of an openstack patch today

00:16:08,629 --> 00:16:13,279
it's very different than the the

00:16:10,220 --> 00:16:14,869
standard github process so the first few

00:16:13,279 --> 00:16:16,790
steps are similar code is written you

00:16:14,869 --> 00:16:18,529
test it locally you run talks that runs

00:16:16,790 --> 00:16:19,999
all our tests for you you submit the

00:16:18,529 --> 00:16:22,249
code we have a nice tool for that

00:16:19,999 --> 00:16:23,660
actually one of the big changes here now

00:16:22,249 --> 00:16:26,149
is we actually have the code is tested

00:16:23,660 --> 00:16:27,619
on submission time to not after merges

00:16:26,149 --> 00:16:29,899
of trunk not before it merged the trunk

00:16:27,619 --> 00:16:31,639
but essentially every single time we

00:16:29,899 --> 00:16:33,139
could think of you run the tests as we

00:16:31,639 --> 00:16:35,509
as I said we have so many servers we

00:16:33,139 --> 00:16:36,829
could you know run tests on that we just

00:16:35,509 --> 00:16:39,949
you know we run them as many times do we

00:16:36,829 --> 00:16:41,029
need tail code is peer reviewed the the

00:16:39,949 --> 00:16:42,499
review process is open to anybody

00:16:41,029 --> 00:16:44,629
anybody could plus or minus your code

00:16:42,499 --> 00:16:45,860
then we have a set of core developers /

00:16:44,629 --> 00:16:48,049
project which have the right to approve

00:16:45,860 --> 00:16:49,970
code to be merged and if there's any

00:16:48,049 --> 00:16:52,249
negative comments on the code you go in

00:16:49,970 --> 00:16:53,299
you amend your patch eventually your

00:16:52,249 --> 00:16:55,129
hopefully your code is approved and not

00:16:53,299 --> 00:16:56,779
rejected and then we begin to gate the

00:16:55,129 --> 00:16:58,699
merging process so the test sorry run

00:16:56,779 --> 00:16:59,839
then I'm just because you pass tests on

00:16:58,699 --> 00:17:01,819
submission time doesn't mean they'll

00:16:59,839 --> 00:17:03,559
pass on merge time if you're you know

00:17:01,819 --> 00:17:05,029
your code is merged in or maybe it's

00:17:03,559 --> 00:17:06,529
rebase depending on the situation and

00:17:05,029 --> 00:17:09,019
something underneath may have changed

00:17:06,529 --> 00:17:11,360
that you assumed and change and it'll

00:17:09,019 --> 00:17:12,439
break an example is if if somebody else

00:17:11,360 --> 00:17:15,260
touch the same line is who you have a

00:17:12,439 --> 00:17:17,179
emerge conflict so get you know stops

00:17:15,260 --> 00:17:19,159
there and so you throw you an arrow and

00:17:17,179 --> 00:17:22,039
Garrett will say unable to merge you

00:17:19,159 --> 00:17:23,959
know send a new patch in or a dependency

00:17:22,039 --> 00:17:25,699
you had changed underneath you and the

00:17:23,959 --> 00:17:27,019
unit tests all of us haven't failed and

00:17:25,699 --> 00:17:29,059
that's something that is unavoidable

00:17:27,019 --> 00:17:30,830
right now and but that's why we run

00:17:29,059 --> 00:17:32,539
tests on verge time and if everything

00:17:30,830 --> 00:17:34,720
passes will actually go ahead and merge

00:17:32,539 --> 00:17:34,720
everything

00:17:35,029 --> 00:17:39,029
so these are lessons we've taken from

00:17:37,559 --> 00:17:42,779
you know the evolution of the review

00:17:39,029 --> 00:17:43,860
process so for things we do today some

00:17:42,779 --> 00:17:45,779
of the big principles we have is never

00:17:43,860 --> 00:17:48,059
break trunk this was a very hard process

00:17:45,779 --> 00:17:49,380
for us to begin as many of you probably

00:17:48,059 --> 00:17:52,049
know in your smaller projects if you

00:17:49,380 --> 00:17:53,340
don't have any gating on trunk it's hard

00:17:52,049 --> 00:17:54,990
to get the test up to you know that

00:17:53,340 --> 00:17:56,789
working so well that you can actually

00:17:54,990 --> 00:17:57,809
run them in every commit I worked a

00:17:56,789 --> 00:17:59,490
small company swear this had been a real

00:17:57,809 --> 00:18:01,380
challenge for us is you know it's

00:17:59,490 --> 00:18:02,340
there's not so many people only you know

00:18:01,380 --> 00:18:03,990
two or three people are gonna be angry

00:18:02,340 --> 00:18:05,940
at you maybe it's not worth it for a

00:18:03,990 --> 00:18:08,909
small scale project but for a you know

00:18:05,940 --> 00:18:11,580
800 800 developers you can't break trunk

00:18:08,909 --> 00:18:13,799
in the past it would break you know

00:18:11,580 --> 00:18:16,169
every maybe one or two weeks I would see

00:18:13,799 --> 00:18:18,179
a break now it breaks there are so ways

00:18:16,169 --> 00:18:20,909
of breaking trunk a dependency changes

00:18:18,179 --> 00:18:22,289
there's a transient race condition bug

00:18:20,909 --> 00:18:25,019
that gets in somehow those are really

00:18:22,289 --> 00:18:26,490
hard to to gate against things will

00:18:25,019 --> 00:18:28,409
break and people get really angry at you

00:18:26,490 --> 00:18:30,809
but the past year so I haven't seen

00:18:28,409 --> 00:18:32,190
trunk break for more than maybe a couple

00:18:30,809 --> 00:18:33,360
hours so that's been a really great

00:18:32,190 --> 00:18:35,429
accomplishment of us we're really proud

00:18:33,360 --> 00:18:37,049
of that um before that you know you're

00:18:35,429 --> 00:18:38,159
trying to work on something alternate

00:18:37,049 --> 00:18:40,289
shrink breaks you can't merge anything

00:18:38,159 --> 00:18:41,429
you can't start new work because you

00:18:40,289 --> 00:18:43,500
don't have a clean slate to work from

00:18:41,429 --> 00:18:46,049
and it's a whole mess and everybody's

00:18:43,500 --> 00:18:48,480
yelling at you and so you know that's

00:18:46,049 --> 00:18:49,590
this has been a big help for us another

00:18:48,480 --> 00:18:51,360
thing we've done is transparency

00:18:49,590 --> 00:18:52,649
everything is having the public we try

00:18:51,360 --> 00:18:55,380
to keep everything open its open source

00:18:52,649 --> 00:18:57,360
project all the reviews are in public we

00:18:55,380 --> 00:18:58,830
try to their our private communications

00:18:57,360 --> 00:19:00,330
emails are private things like that but

00:18:58,830 --> 00:19:02,190
as a principal to try to make everything

00:19:00,330 --> 00:19:04,380
as public as possible automate

00:19:02,190 --> 00:19:05,970
everything I'm lazy I don't like doing

00:19:04,380 --> 00:19:08,010
anything if I could help it so why not

00:19:05,970 --> 00:19:09,659
have a computer do it for you and we

00:19:08,010 --> 00:19:11,760
have so many you know patches you know a

00:19:09,659 --> 00:19:14,279
day and so many reviewers and so many

00:19:11,760 --> 00:19:16,950
committers you know anything manual it's

00:19:14,279 --> 00:19:18,299
just a huge pain and everybody so let

00:19:16,950 --> 00:19:19,789
the computer do as much as I can for you

00:19:18,299 --> 00:19:22,169
and the least burden on the reviewer

00:19:19,789 --> 00:19:24,000
galloped Arian be equal this is open

00:19:22,169 --> 00:19:25,559
project anybody could go in they find a

00:19:24,000 --> 00:19:26,700
bug they could commit it we have we try

00:19:25,559 --> 00:19:29,399
to reduce the overhead for getting

00:19:26,700 --> 00:19:31,260
involved in the project there's no

00:19:29,399 --> 00:19:33,210
there's not too many hurdles to get into

00:19:31,260 --> 00:19:35,210
the project will review everybody

00:19:33,210 --> 00:19:37,529
equally we try to be as open as possible

00:19:35,210 --> 00:19:39,179
the last one is be strict and that's to

00:19:37,529 --> 00:19:40,799
reduce the burden on reviewers so we

00:19:39,179 --> 00:19:43,559
have a very stringent somewhat crazy

00:19:40,799 --> 00:19:45,360
style guide and that's because there's

00:19:43,559 --> 00:19:46,500
no right there's no wrong style long as

00:19:45,360 --> 00:19:48,299
it all looks the same everybody's happy

00:19:46,500 --> 00:19:48,570
so it doesn't matter what you say the

00:19:48,299 --> 00:19:50,700
long

00:19:48,570 --> 00:19:52,230
run on whether use Pepe to use your own

00:19:50,700 --> 00:19:54,480
crazy thing you wrote up its opposite of

00:19:52,230 --> 00:19:56,039
pep eight use tabs only and then what

00:19:54,480 --> 00:19:57,779
matters that all the code looks uniform

00:19:56,039 --> 00:20:00,029
and people don't say hey you're missing

00:19:57,779 --> 00:20:01,470
a space over there or I want to use that

00:20:00,029 --> 00:20:03,269
style but you're using that style we

00:20:01,470 --> 00:20:04,679
don't like that so that's something the

00:20:03,269 --> 00:20:06,419
computer works really well at dealings

00:20:04,679 --> 00:20:10,019
we want to enforce all that stuff

00:20:06,419 --> 00:20:12,029
whenever possible the same thing for

00:20:10,019 --> 00:20:13,289
unit tests integration tests we want to

00:20:12,029 --> 00:20:15,240
make sure that people always pass them

00:20:13,289 --> 00:20:16,500
give that feedback as early as possible

00:20:15,240 --> 00:20:19,080
we're also looking at other kinds of

00:20:16,500 --> 00:20:20,519
feedback we can give to people maybe not

00:20:19,080 --> 00:20:24,090
gate on but other information that's

00:20:20,519 --> 00:20:25,559
useful for a reviewer and so we have the

00:20:24,090 --> 00:20:27,269
limited resource we actually have is

00:20:25,559 --> 00:20:29,399
reviewers as humans that's usually the

00:20:27,269 --> 00:20:31,139
limited resource in most projects and so

00:20:29,399 --> 00:20:34,710
we're trying to do our best to optimize

00:20:31,139 --> 00:20:35,879
you know the humans we have so we have a

00:20:34,710 --> 00:20:37,440
lot of tools to get to where we are

00:20:35,879 --> 00:20:40,220
today we have a bunch of tools for

00:20:37,440 --> 00:20:45,000
workflow testing integration testing and

00:20:40,220 --> 00:20:47,250
communication the workflow is have used

00:20:45,000 --> 00:20:50,100
garrett and jenkins so jenkins runs all

00:20:47,250 --> 00:20:51,509
our jobs for us Garrett's the code

00:20:50,100 --> 00:20:53,789
review process we have a nice tool to

00:20:51,509 --> 00:20:55,080
actually push code up so if people have

00:20:53,789 --> 00:20:56,549
used Garrett and other projects there's

00:20:55,080 --> 00:20:58,289
it's not so easy to actually push your

00:20:56,549 --> 00:21:00,389
code onto Garrett there's a few commands

00:20:58,289 --> 00:21:02,309
you have to do it's a bit clunky so we

00:21:00,389 --> 00:21:04,019
wrote a tool called a get module called

00:21:02,309 --> 00:21:05,519
get review now use type and get review

00:21:04,019 --> 00:21:08,070
and we'll push up your patch on to get

00:21:05,519 --> 00:21:10,110
on to Garrett so it makes a nice easy

00:21:08,070 --> 00:21:11,519
here's a good example of it so somebody

00:21:10,110 --> 00:21:13,049
made a patch we did get commit then he

00:21:11,519 --> 00:21:15,210
types in get review and it pushes

00:21:13,049 --> 00:21:17,070
upstream as you can see their new change

00:21:15,210 --> 00:21:18,330
over there and the same thing works for

00:21:17,070 --> 00:21:19,980
a mending and patch you could use the

00:21:18,330 --> 00:21:21,330
same thing to download a patch get

00:21:19,980 --> 00:21:23,879
reviewed and you pass in that number

00:21:21,330 --> 00:21:25,799
there the 3072 on your computer if you

00:21:23,879 --> 00:21:28,379
had this repo open you type in get

00:21:25,799 --> 00:21:29,490
reviewed dash G 3072 and download this

00:21:28,379 --> 00:21:31,529
patch for you to look at so that makes

00:21:29,490 --> 00:21:32,909
it easy for reviewer to look at the code

00:21:31,529 --> 00:21:34,919
it makes it easy for the developer to

00:21:32,909 --> 00:21:37,110
push the code up it's one line it's nice

00:21:34,919 --> 00:21:38,820
and see easy it's all in hooks and agate

00:21:37,110 --> 00:21:40,409
so it's a nice tool for us it makes our

00:21:38,820 --> 00:21:42,720
lives easier this is part of the

00:21:40,409 --> 00:21:44,070
streamline everything is possible you

00:21:42,720 --> 00:21:46,399
know make things as easy as possible and

00:21:44,070 --> 00:21:46,399
everybody

00:21:46,690 --> 00:21:50,540
testing we use a lot of tools for

00:21:48,440 --> 00:21:52,760
testing we used talks it's a great tool

00:21:50,540 --> 00:21:54,440
we love it we use test repository which

00:21:52,760 --> 00:21:56,900
took the command line is tester and

00:21:54,440 --> 00:21:59,210
that's a parallel unit tests running

00:21:56,900 --> 00:22:01,730
tool so before and Noah the biggest

00:21:59,210 --> 00:22:03,350
project the open of the older ones it

00:22:01,730 --> 00:22:04,910
took about 20 to 30 minutes to run all

00:22:03,350 --> 00:22:07,130
the unit tests all sixty thousand or so

00:22:04,910 --> 00:22:08,420
seventy thousand or so that was you know

00:22:07,130 --> 00:22:10,340
that's way too slow for everybody to

00:22:08,420 --> 00:22:11,780
wait and you know you run the test and

00:22:10,340 --> 00:22:13,220
you wait half an hour you'll get a drink

00:22:11,780 --> 00:22:15,800
of coffee at another drink of coffee and

00:22:13,220 --> 00:22:16,880
the still not done so we have a you know

00:22:15,800 --> 00:22:19,610
modern machines are parallel this

00:22:16,880 --> 00:22:21,230
computer has two or four cpus on it why

00:22:19,610 --> 00:22:23,000
not use all of them so we actually had a

00:22:21,230 --> 00:22:25,220
big push for a lot of the projects to go

00:22:23,000 --> 00:22:26,570
to parallel testing this is available

00:22:25,220 --> 00:22:29,090
for anything that uses knows tests or

00:22:26,570 --> 00:22:30,890
unit tests so this is where a plate this

00:22:29,090 --> 00:22:33,110
replace them the nose test command line

00:22:30,890 --> 00:22:34,820
so your run tests are instead and it

00:22:33,110 --> 00:22:36,680
doesn't work well in Mac actually

00:22:34,820 --> 00:22:39,740
unfortunately but it automatically will

00:22:36,680 --> 00:22:41,660
paralyze your jobs to the number CPS you

00:22:39,740 --> 00:22:43,130
have the on Mac it doesn't actually have

00:22:41,660 --> 00:22:47,120
you have to specify how many CPS you

00:22:43,130 --> 00:22:48,620
have due to max being max and last we

00:22:47,120 --> 00:22:50,330
have as much automated code quality

00:22:48,620 --> 00:22:52,340
checks to possibly flake eight pep 8pi

00:22:50,330 --> 00:22:53,930
flakes in our own home brew version

00:22:52,340 --> 00:22:55,100
which is hacking all of these hook into

00:22:53,930 --> 00:22:57,260
flight gates so that's the command line

00:22:55,100 --> 00:22:59,510
interface you just run whenever you have

00:22:57,260 --> 00:23:01,100
some sort of you know code quality

00:22:59,510 --> 00:23:03,380
something you know check the one in

00:23:01,100 --> 00:23:04,880
force you put it in hacking of late

00:23:03,380 --> 00:23:06,440
movement a lot of work and put making

00:23:04,880 --> 00:23:08,480
everything around on Python 33 so he

00:23:06,440 --> 00:23:10,610
support 26 27 and we're looking to

00:23:08,480 --> 00:23:12,380
support 334 as many projects as possible

00:23:10,610 --> 00:23:14,120
and so that's a slow you know and

00:23:12,380 --> 00:23:16,070
painful process for six hundred thousand

00:23:14,120 --> 00:23:17,870
lines of code so it's been taking a

00:23:16,070 --> 00:23:20,330
while as you expect and we're doing it

00:23:17,870 --> 00:23:21,620
and you know step by step so we'll make

00:23:20,330 --> 00:23:24,500
sure that we're having the right syntax

00:23:21,620 --> 00:23:25,760
for exceptions for example it'll put a

00:23:24,500 --> 00:23:27,770
check in hacking to make sure that

00:23:25,760 --> 00:23:29,630
nobody adds a new exception format that

00:23:27,770 --> 00:23:32,900
doesn't look like it won't run in Python

00:23:29,630 --> 00:23:35,090
26 27 to 33 and if we have all kinds of

00:23:32,900 --> 00:23:36,850
we have a whole bunch of other rules in

00:23:35,090 --> 00:23:39,830
there as well to make things easy for

00:23:36,850 --> 00:23:41,480
merging and whatnot hacking is loosely

00:23:39,830 --> 00:23:44,780
based on this a google style guide for

00:23:41,480 --> 00:23:45,560
Python that's publicly available and one

00:23:44,780 --> 00:23:48,280
of the things they do is they have

00:23:45,560 --> 00:23:50,660
alphabetical imports imports by blocks

00:23:48,280 --> 00:23:53,630
and one import pearl on what that means

00:23:50,660 --> 00:23:55,370
is that it's easy to merge important so

00:23:53,630 --> 00:23:56,570
you're working on you know file a and

00:23:55,370 --> 00:23:58,010
somebody else is working file and you

00:23:56,570 --> 00:24:00,020
both add the same requirement and

00:23:58,010 --> 00:24:01,700
merging Wilda seamlessly work we'll see

00:24:00,020 --> 00:24:04,070
the same file the same import in the

00:24:01,700 --> 00:24:05,270
same place and we'll make merging much

00:24:04,070 --> 00:24:08,120
easier you don't have you know ten

00:24:05,270 --> 00:24:10,700
copies of import X in the same file and

00:24:08,120 --> 00:24:11,900
that's made our lives a bit easier and

00:24:10,700 --> 00:24:12,680
we have a bunch of other requirements in

00:24:11,900 --> 00:24:14,410
there as well that makes our lives

00:24:12,680 --> 00:24:16,430
easier some of them are in there because

00:24:14,410 --> 00:24:17,450
somebody thinks that the style should be

00:24:16,430 --> 00:24:19,100
that way somebody else thinks it should

00:24:17,450 --> 00:24:21,590
be that way and you say let's just pick

00:24:19,100 --> 00:24:22,640
one we'll put it in there and then you

00:24:21,590 --> 00:24:24,050
know if door every worried about no

00:24:22,640 --> 00:24:25,070
never focus on is again and so the

00:24:24,050 --> 00:24:27,950
computer will do it for you and the

00:24:25,070 --> 00:24:29,090
human doesn't have to do it we have a

00:24:27,950 --> 00:24:31,130
whole bunch of integration tests we have

00:24:29,090 --> 00:24:33,230
a tool called devstack which is a big

00:24:31,130 --> 00:24:36,500
ugly bash script but it works for us and

00:24:33,230 --> 00:24:38,060
what is is it's a big way to run all of

00:24:36,500 --> 00:24:41,180
OpenStack an integrated environment all

00:24:38,060 --> 00:24:42,470
on the laptop or in a vm this is a

00:24:41,180 --> 00:24:44,210
standard way of testing everything and

00:24:42,470 --> 00:24:45,800
so it's easy to say does this work in

00:24:44,210 --> 00:24:47,480
the integration tests we running on our

00:24:45,800 --> 00:24:49,310
integration environments so it's a nice

00:24:47,480 --> 00:24:50,660
standard way of doing it and we're

00:24:49,310 --> 00:24:52,640
adding support for all kinds of back

00:24:50,660 --> 00:24:53,720
ends at things like that but that's the

00:24:52,640 --> 00:24:55,430
first step for making something like

00:24:53,720 --> 00:24:57,050
OpenStack which has depending on how

00:24:55,430 --> 00:24:59,180
you're configuring it 10 20 maybe 30

00:24:57,050 --> 00:25:01,520
services separately running you need a

00:24:59,180 --> 00:25:03,860
nice environment to run them all we have

00:25:01,520 --> 00:25:05,420
a tool called recheck this is a fairly

00:25:03,860 --> 00:25:06,980
no one being really proud about it as

00:25:05,420 --> 00:25:08,990
you can see ratcheting a pretty bad job

00:25:06,980 --> 00:25:10,220
of keeping up with it one of the

00:25:08,990 --> 00:25:12,020
problems with trying to get everything

00:25:10,220 --> 00:25:14,120
as you get race conditions you have him

00:25:12,020 --> 00:25:15,830
you know tons of services running we

00:25:14,120 --> 00:25:17,180
have a database in the back end and

00:25:15,830 --> 00:25:19,010
we're may or may not be using it

00:25:17,180 --> 00:25:21,290
properly all the time we have all kinds

00:25:19,010 --> 00:25:23,000
of race condition so here's this is a

00:25:21,290 --> 00:25:24,650
way we track when we have to recheck the

00:25:23,000 --> 00:25:26,450
unit tests and the integration tests

00:25:24,650 --> 00:25:27,440
because of a bug so we can actually see

00:25:26,450 --> 00:25:29,660
what kind of race conditions are

00:25:27,440 --> 00:25:31,070
happening the most often and this you

00:25:29,660 --> 00:25:33,080
know allows us to isolate the problems

00:25:31,070 --> 00:25:35,780
and focus on them we're actually working

00:25:33,080 --> 00:25:37,070
on setting up logstash as well and it's

00:25:35,780 --> 00:25:39,950
not right now log stash that OpenStack

00:25:37,070 --> 00:25:41,330
got orgs a bit slow but that's another

00:25:39,950 --> 00:25:43,460
way for us to look at the logs and help

00:25:41,330 --> 00:25:45,650
analyze how often a race condition

00:25:43,460 --> 00:25:47,270
happens on the Lhasa use a tool called

00:25:45,650 --> 00:25:50,900
zool this is a something we wrote

00:25:47,270 --> 00:25:52,100
ourselves this is because we try to get

00:25:50,900 --> 00:25:53,240
everything on these unit tests in these

00:25:52,100 --> 00:25:54,980
integration tests we have and some of

00:25:53,240 --> 00:25:56,750
them as I said take about an hour so if

00:25:54,980 --> 00:25:58,220
you're getting everything you have to

00:25:56,750 --> 00:25:59,840
run all the tests takes an hour and

00:25:58,220 --> 00:26:02,600
every commit you can only commit 24

00:25:59,840 --> 00:26:04,970
committed patches a day and we have you

00:26:02,600 --> 00:26:07,280
know 200 committers in the last you know

00:26:04,970 --> 00:26:09,500
a month and 2000 patches that's just not

00:26:07,280 --> 00:26:11,630
an option so we have we pipeline the

00:26:09,500 --> 00:26:13,460
commits so you assume that if there's

00:26:11,630 --> 00:26:14,750
three commits in the pipeline you

00:26:13,460 --> 00:26:15,860
run the unit test in the first all the

00:26:14,750 --> 00:26:17,120
tests in the first run run them on the

00:26:15,860 --> 00:26:19,250
second one assumed the first one will

00:26:17,120 --> 00:26:21,140
emerge and that way if something that

00:26:19,250 --> 00:26:23,539
they're fit everything works out you

00:26:21,140 --> 00:26:27,049
could run a whole bunch of tests and

00:26:23,539 --> 00:26:29,059
parallel this is basic compile

00:26:27,049 --> 00:26:30,950
pipelining and it works great for us and

00:26:29,059 --> 00:26:32,929
now instead of having the only 24

00:26:30,950 --> 00:26:35,649
patches per day that we can merge its

00:26:32,929 --> 00:26:37,840
you know there's no limit on it anymore

00:26:35,649 --> 00:26:39,799
lastly communication it's a big project

00:26:37,840 --> 00:26:41,270
one of the problems I always have I wake

00:26:39,799 --> 00:26:43,880
up in the morning and I live in San

00:26:41,270 --> 00:26:45,320
Francisco and I have 50 patches or 50

00:26:43,880 --> 00:26:46,850
patch to review and you know 20 emails

00:26:45,320 --> 00:26:49,159
because all the guys in Europe and

00:26:46,850 --> 00:26:51,380
working hard all night and or hard all

00:26:49,159 --> 00:26:53,120
day and I wake up and there's tons to do

00:26:51,380 --> 00:26:55,460
and so communication is a big problem in

00:26:53,120 --> 00:26:57,620
this and a big distributed project and

00:26:55,460 --> 00:26:59,120
so we use some basic tools for that

00:26:57,620 --> 00:27:01,370
views launchpad for bug tracking and

00:26:59,120 --> 00:27:03,260
blueprints we actually have bug tracking

00:27:01,370 --> 00:27:05,600
blueprints hooked up into Garrett so in

00:27:03,260 --> 00:27:07,730
your commit message say this fixes bug X

00:27:05,600 --> 00:27:09,440
or this fixes bloop this implements

00:27:07,730 --> 00:27:10,730
blueprint whatever and you can actually

00:27:09,440 --> 00:27:12,500
click on the links and Garrett and i'll

00:27:10,730 --> 00:27:14,179
show you the bug so somebody puts a

00:27:12,500 --> 00:27:15,470
patch up to fix something it's very easy

00:27:14,179 --> 00:27:17,240
for you to just to find out what bug it

00:27:15,470 --> 00:27:18,710
was you don't have to go open up the URL

00:27:17,240 --> 00:27:20,929
cut and paste anything you just click a

00:27:18,710 --> 00:27:23,090
button you can see what bug it was we

00:27:20,929 --> 00:27:24,830
use eco pad for note taking this is a

00:27:23,090 --> 00:27:27,799
big deal when we're actually in the

00:27:24,830 --> 00:27:29,630
summit we have a biannual summit so the

00:27:27,799 --> 00:27:30,980
next one's in Hong Kong in November and

00:27:29,630 --> 00:27:32,029
everybody gets together and we talk

00:27:30,980 --> 00:27:34,159
about what things should look like in

00:27:32,029 --> 00:27:35,809
the future we make plans we put all an

00:27:34,159 --> 00:27:37,850
etherpad on it's a great tool for that

00:27:35,809 --> 00:27:40,460
day-to-day communication is done via IRC

00:27:37,850 --> 00:27:41,720
we're all on freenode all the time and

00:27:40,460 --> 00:27:44,059
the mailing lists we have a few mailing

00:27:41,720 --> 00:27:46,419
lists we have the general mailings

00:27:44,059 --> 00:27:49,309
mailing lists one for developers 14

00:27:46,419 --> 00:27:51,260
deployers and a whole bunch more that i

00:27:49,309 --> 00:27:53,270
can't think of right now so some basic

00:27:51,260 --> 00:27:54,919
communication skills unless we're always

00:27:53,270 --> 00:27:56,330
looking for more tool to make our lives

00:27:54,919 --> 00:27:58,279
easier this is one somebody told me

00:27:56,330 --> 00:27:59,840
about a couple days ago clone digger I

00:27:58,279 --> 00:28:02,929
haven't actually looked at yet but it

00:27:59,840 --> 00:28:04,279
sounds interesting oh there he is thanks

00:28:02,929 --> 00:28:05,630
for the tip and we're always looking for

00:28:04,279 --> 00:28:07,130
more ideas this one looks for duplicated

00:28:05,630 --> 00:28:08,840
code this is a big problem in when you

00:28:07,130 --> 00:28:09,919
have you know over a half million lines

00:28:08,840 --> 00:28:12,620
of Python you're going to have a lot of

00:28:09,919 --> 00:28:14,750
clone duplicate code and you know that

00:28:12,620 --> 00:28:16,070
just makes life harder we have you fix

00:28:14,750 --> 00:28:17,330
bugs were you know the bug isn't eight

00:28:16,070 --> 00:28:18,500
places at once because the code is

00:28:17,330 --> 00:28:20,570
copied eight times and there's a bug in

00:28:18,500 --> 00:28:22,549
the original code so you want to isolate

00:28:20,570 --> 00:28:23,870
you know as much common code as possible

00:28:22,549 --> 00:28:25,309
and this sounds like a good tool for it

00:28:23,870 --> 00:28:26,880
if you guys know of another awesome tool

00:28:25,309 --> 00:28:30,690
please let me know after and we'll love

00:28:26,880 --> 00:28:33,060
try to use it another big way we

00:28:30,690 --> 00:28:34,830
actually make things work is we have in

00:28:33,060 --> 00:28:37,050
a one repo with you know six hundred

00:28:34,830 --> 00:28:39,390
thousand lines of code in it it's hard

00:28:37,050 --> 00:28:41,580
to do she try to shrink the project

00:28:39,390 --> 00:28:42,990
scope when he started out OpenStack I'm

00:28:41,580 --> 00:28:44,730
just about three years ago had Nova and

00:28:42,990 --> 00:28:47,250
Swift Nova's compute Swift and storage

00:28:44,730 --> 00:28:48,930
and the same features today in same

00:28:47,250 --> 00:28:50,220
functionality spread out over six

00:28:48,930 --> 00:28:52,740
projects we have nowhere for compute

00:28:50,220 --> 00:28:54,120
still Swift sulfur object storage glands

00:28:52,740 --> 00:28:56,310
for image storage that was pulled out a

00:28:54,120 --> 00:28:57,870
nova Keystone for user management once

00:28:56,310 --> 00:28:59,730
again pulled an ANOVA cinder for volley

00:28:57,870 --> 00:29:00,990
management you want to have an instance

00:28:59,730 --> 00:29:03,150
you want to attach a persistent volume

00:29:00,990 --> 00:29:04,460
to it cinder does that for you neutron

00:29:03,150 --> 00:29:07,080
which used to be quantum which is

00:29:04,460 --> 00:29:08,550
network management and so we break them

00:29:07,080 --> 00:29:10,500
all down we put a rest api between them

00:29:08,550 --> 00:29:12,060
which is a contract between projects you

00:29:10,500 --> 00:29:13,830
can't change the rest api will test for

00:29:12,060 --> 00:29:15,450
that but that means if somebody is

00:29:13,830 --> 00:29:16,950
optimizing keystone there you know

00:29:15,450 --> 00:29:18,210
making it ten times faster and we're

00:29:16,950 --> 00:29:19,950
really grateful for that but it changes

00:29:18,210 --> 00:29:21,840
everything inside of it as somebody

00:29:19,950 --> 00:29:23,160
working on glance nova or cinder you

00:29:21,840 --> 00:29:24,480
don't have to know about that you'll

00:29:23,160 --> 00:29:25,560
just see everything you know stays the

00:29:24,480 --> 00:29:27,210
same from the outside and the code

00:29:25,560 --> 00:29:28,230
changes on the inside and oh wow

00:29:27,210 --> 00:29:30,510
everything worked faster now that's

00:29:28,230 --> 00:29:33,630
wonderful and so that's a big way we've

00:29:30,510 --> 00:29:35,490
helped make things work it's break

00:29:33,630 --> 00:29:37,320
things down possible and use real

00:29:35,490 --> 00:29:38,760
country you know real rest api is the

00:29:37,320 --> 00:29:40,670
good part for rest rest is that there

00:29:38,760 --> 00:29:43,290
it's easy way to make a contract between

00:29:40,670 --> 00:29:44,580
projects so it's easy to test it's a

00:29:43,290 --> 00:29:46,320
very they're hard to change sometimes

00:29:44,580 --> 00:29:51,150
and so that makes them easy to enforce

00:29:46,320 --> 00:29:59,600
they don't change and that's it any

00:29:51,150 --> 00:30:03,060
questions yes Alito reportedly working I

00:29:59,600 --> 00:30:05,280
was wondering do you have any working

00:30:03,060 --> 00:30:07,940
process when you introduce a new tool

00:30:05,280 --> 00:30:11,070
that text for something in the code

00:30:07,940 --> 00:30:13,110
initially it will result in a lot of

00:30:11,070 --> 00:30:15,240
failures yes so that's that's been a big

00:30:13,110 --> 00:30:17,730
challenge for us there's a few ways we

00:30:15,240 --> 00:30:19,050
do that so for example the hacking tool

00:30:17,730 --> 00:30:20,430
first the style guide enforcement the

00:30:19,050 --> 00:30:22,170
way that evolved and this is a common

00:30:20,430 --> 00:30:23,670
way other things evolve if you first you

00:30:22,170 --> 00:30:25,320
write the tool you start running the

00:30:23,670 --> 00:30:26,730
tool against the code base and then you

00:30:25,320 --> 00:30:28,410
start fixing it you start fixing the

00:30:26,730 --> 00:30:29,550
problems with it you get to the point

00:30:28,410 --> 00:30:31,560
where you only have you know you have

00:30:29,550 --> 00:30:33,330
let's say five thousand problems with

00:30:31,560 --> 00:30:36,180
the code the code based on this tool and

00:30:33,330 --> 00:30:38,160
so you fix you know 4500 then get most

00:30:36,180 --> 00:30:39,330
of them slowly slowly slowly and then

00:30:38,160 --> 00:30:40,559
you have the last few then you can

00:30:39,330 --> 00:30:42,059
actually say you fix the

00:30:40,559 --> 00:30:43,799
last few and enable the tool for gating

00:30:42,059 --> 00:30:45,929
we're currently for example getting rid

00:30:43,799 --> 00:30:47,759
of locals in our doctor in our strings

00:30:45,929 --> 00:30:49,919
some of the problems of using locals for

00:30:47,759 --> 00:30:51,360
a big project is that you know the

00:30:49,919 --> 00:30:52,590
diction the locals dictionary could just

00:30:51,360 --> 00:30:54,299
change under you and it's hard to test

00:30:52,590 --> 00:30:55,230
and it just makes things confusing and

00:30:54,299 --> 00:30:56,399
we have a lot of we've had a lot of

00:30:55,230 --> 00:30:58,379
problems in the past with locals or

00:30:56,399 --> 00:30:59,249
getting rid of them right now so what

00:30:58,379 --> 00:31:00,600
we're doing right now is we're fixing

00:30:59,249 --> 00:31:03,090
all the examples of using locals in a

00:31:00,600 --> 00:31:06,749
string you know you know percent

00:31:03,090 --> 00:31:07,919
parentheses variable name s and we're

00:31:06,749 --> 00:31:09,990
trying to fix those all once we have

00:31:07,919 --> 00:31:11,779
those mostly fixed will enable gating on

00:31:09,990 --> 00:31:15,499
that and fix the rest in the same patch

00:31:11,779 --> 00:31:18,240
did you try with doing something like

00:31:15,499 --> 00:31:20,909
track the number of warnings and don't

00:31:18,240 --> 00:31:22,950
let them grow yes and we're doing that

00:31:20,909 --> 00:31:24,809
for pilots actually that's so pilot we

00:31:22,950 --> 00:31:27,119
tried ringing an anova we had some

00:31:24,809 --> 00:31:29,909
astronomical number of bugs at a cot or

00:31:27,119 --> 00:31:32,460
you know concerns it found and so we've

00:31:29,909 --> 00:31:34,830
somebody wrote a tool to run it on the

00:31:32,460 --> 00:31:36,799
the previous patch on to you know your

00:31:34,830 --> 00:31:39,629
patch might its trunk minus your patch

00:31:36,799 --> 00:31:41,519
run pylant on that then run it again on

00:31:39,629 --> 00:31:43,169
yours and look for make sure the number

00:31:41,519 --> 00:31:44,580
doesn't go up so that's another tool

00:31:43,169 --> 00:31:46,139
you've been doing is making sure things

00:31:44,580 --> 00:31:47,129
don't get worse and that's you know if

00:31:46,139 --> 00:31:50,509
we can we can better at least i'll make

00:31:47,129 --> 00:31:50,509
them worse thank you

00:31:51,630 --> 00:31:57,250
thank you that was a very interesting

00:31:54,130 --> 00:31:59,740
talk I have a few questions one is how

00:31:57,250 --> 00:32:04,090
do you how do you deal with the process

00:31:59,740 --> 00:32:06,130
that basically leads up to a patch so

00:32:04,090 --> 00:32:08,140
for example in Python development what

00:32:06,130 --> 00:32:10,210
you usually do is you open a ticket you

00:32:08,140 --> 00:32:12,010
just you you have some question or yes I

00:32:10,210 --> 00:32:13,660
have a suggestion and someone adds a

00:32:12,010 --> 00:32:17,230
patch for it then you discuss the patch

00:32:13,660 --> 00:32:19,690
on that ticket few people try it review

00:32:17,230 --> 00:32:23,530
it make suggestions etc and then finally

00:32:19,690 --> 00:32:25,090
you merge the the the patch and because

00:32:23,530 --> 00:32:27,940
on your slide you just talked about

00:32:25,090 --> 00:32:30,220
basically the the path from when you

00:32:27,940 --> 00:32:33,160
already have the patch to how it goes

00:32:30,220 --> 00:32:34,480
into trunk right so we use a launchpad

00:32:33,160 --> 00:32:37,330
for that launchpad abuse for tracking

00:32:34,480 --> 00:32:38,710
all our blueprints and lower bugs so

00:32:37,330 --> 00:32:40,750
there's two basic ways that will happen

00:32:38,710 --> 00:32:42,970
one is you're a consumer of this you

00:32:40,750 --> 00:32:44,860
have a bug you know this environment

00:32:42,970 --> 00:32:46,330
this thing doesn't work I don't want to

00:32:44,860 --> 00:32:48,040
fix it somebody else fix you file a bug

00:32:46,330 --> 00:32:50,200
look at triage may be critical

00:32:48,040 --> 00:32:52,060
unimportant won't fix whatever it is and

00:32:50,200 --> 00:32:53,140
either somebody else will fix it or if

00:32:52,060 --> 00:32:56,050
you want to fix it yourself you should

00:32:53,140 --> 00:32:57,400
go and fix it so the the triaging bugs

00:32:56,050 --> 00:32:58,930
and isolating which bugs are important

00:32:57,400 --> 00:33:00,180
and critical and how to fix them that

00:32:58,930 --> 00:33:03,310
will happen commonly in launchpad

00:33:00,180 --> 00:33:05,440
although sometimes it happens in IRC if

00:33:03,310 --> 00:33:07,330
it's you know some people say hey look

00:33:05,440 --> 00:33:09,370
at this new bug happened somebody posted

00:33:07,330 --> 00:33:11,920
how do we fix it they'll talk on IRC how

00:33:09,370 --> 00:33:13,840
to fix it and they'll post it the second

00:33:11,920 --> 00:33:15,520
part that will happen is somebody post a

00:33:13,840 --> 00:33:18,430
first attempt at fixing it somebody new

00:33:15,520 --> 00:33:20,290
comes into the ecosystem they try to you

00:33:18,430 --> 00:33:21,940
know fix the patch will discuss it on

00:33:20,290 --> 00:33:23,650
Garret actually what their pad should

00:33:21,940 --> 00:33:25,960
look like so I'll say no this is awesome

00:33:23,650 --> 00:33:26,770
great let's merge it or maybe it's well

00:33:25,960 --> 00:33:28,210
this is good but what about this

00:33:26,770 --> 00:33:29,230
condition or what about you add some

00:33:28,210 --> 00:33:31,650
more tests to it to make sure we don't

00:33:29,230 --> 00:33:34,090
you know this doesn't change it again

00:33:31,650 --> 00:33:35,710
what about what about I mean there are

00:33:34,090 --> 00:33:36,970
often different ways of fixing something

00:33:35,710 --> 00:33:38,770
or different ways of implementing

00:33:36,970 --> 00:33:40,720
something's different strategies how do

00:33:38,770 --> 00:33:42,820
you discuss those on Lance launchpad as

00:33:40,720 --> 00:33:45,220
well or um it depends so sometimes its

00:33:42,820 --> 00:33:47,290
launch pad sometimes that's on the on

00:33:45,220 --> 00:33:49,000
the actual the patch set so the young

00:33:47,290 --> 00:33:50,620
Garrett itself that's actually something

00:33:49,000 --> 00:33:53,410
we need a lead improve on which is

00:33:50,620 --> 00:33:55,780
there's about you know the number of I

00:33:53,410 --> 00:33:57,460
think core reviewers is about a hundred

00:33:55,780 --> 00:33:59,650
for about eight to nine hundred

00:33:57,460 --> 00:34:02,620
developers total so there's a pretty

00:33:59,650 --> 00:34:04,150
good spread but not every but not every

00:34:02,620 --> 00:34:04,720
reviewer not every core developer will

00:34:04,150 --> 00:34:06,250
look at

00:34:04,720 --> 00:34:08,109
per project look at each patch for that

00:34:06,250 --> 00:34:09,280
project so sometimes different people

00:34:08,109 --> 00:34:11,230
may have different ideas about it so

00:34:09,280 --> 00:34:12,639
sometimes it'll get fixed in a way that

00:34:11,230 --> 00:34:14,500
maybe wasn't even fix that way we have

00:34:12,639 --> 00:34:16,570
to refix it again so that's something

00:34:14,500 --> 00:34:19,330
we're actually still struggling with but

00:34:16,570 --> 00:34:20,470
generally we use if you know the cook up

00:34:19,330 --> 00:34:23,290
if you want to get feedback you go onto

00:34:20,470 --> 00:34:25,270
IRC or the mailing list or post on the

00:34:23,290 --> 00:34:27,790
bug it's helped I think I should fix it

00:34:25,270 --> 00:34:29,560
this way what do you guys think okay

00:34:27,790 --> 00:34:31,210
thank you and the second question is how

00:34:29,560 --> 00:34:32,830
do you manage refactoring because you

00:34:31,210 --> 00:34:35,080
often have to touch the lots lots not

00:34:32,830 --> 00:34:37,599
suffice for refactoring and it can be

00:34:35,080 --> 00:34:40,270
confusing for people working on those on

00:34:37,599 --> 00:34:42,940
those particular files yes painfully

00:34:40,270 --> 00:34:44,619
very painfully this actually we're going

00:34:42,940 --> 00:34:47,800
through some sort of refactoring right

00:34:44,619 --> 00:34:49,599
now and it's always happening I looked

00:34:47,800 --> 00:34:51,070
at the stats I think the last release

00:34:49,599 --> 00:34:52,899
and there's enough commits to rewrite

00:34:51,070 --> 00:34:55,889
the code like once or twice so it's the

00:34:52,899 --> 00:34:58,810
codes always changing for refactoring we

00:34:55,889 --> 00:35:01,480
we try to keep the code that commits the

00:34:58,810 --> 00:35:03,390
lines change per la perk commit to be

00:35:01,480 --> 00:35:05,980
about under 500 or so because after that

00:35:03,390 --> 00:35:07,869
you know you try removing like a 5,000

00:35:05,980 --> 00:35:10,119
line commit it just not fun so you try

00:35:07,869 --> 00:35:11,530
to keep patches fairly small but in a

00:35:10,119 --> 00:35:14,099
refractory don't to have you know one

00:35:11,530 --> 00:35:17,500
patch per line it just not going to work

00:35:14,099 --> 00:35:19,150
then so if you're you know your pick you

00:35:17,500 --> 00:35:20,740
you get cloned the project you write

00:35:19,150 --> 00:35:22,150
your code and you try to push it up and

00:35:20,740 --> 00:35:24,369
something was refactor under you you

00:35:22,150 --> 00:35:26,410
just mutter to yourself incur somebody

00:35:24,369 --> 00:35:28,660
out and then you just be rebased and

00:35:26,410 --> 00:35:29,890
hope for the best that's been another

00:35:28,660 --> 00:35:32,290
problem or actually we're trying to work

00:35:29,890 --> 00:35:34,060
on which is sometimes a patch you may

00:35:32,290 --> 00:35:36,099
have a you know change a lot of things

00:35:34,060 --> 00:35:38,560
and there's a high chance of collision

00:35:36,099 --> 00:35:40,420
for rebasing merging rather so you have

00:35:38,560 --> 00:35:43,390
to you may know that if this doesn't get

00:35:40,420 --> 00:35:44,920
merchant in two days i'll have to rebase

00:35:43,390 --> 00:35:46,270
it and try again and that's something

00:35:44,920 --> 00:35:49,300
we're try to trying to do a better job

00:35:46,270 --> 00:35:51,730
of prioritizing commit commits which

00:35:49,300 --> 00:35:53,970
ones we should focus more on you use

00:35:51,730 --> 00:35:56,650
branches for for preparing a refactoring

00:35:53,970 --> 00:35:58,210
yes so we use branches in a bit of

00:35:56,650 --> 00:36:00,369
different we would only have the concept

00:35:58,210 --> 00:36:02,800
of long-running branches we have garrett

00:36:00,369 --> 00:36:04,089
uses branches in two basic ways you

00:36:02,800 --> 00:36:06,910
write your code even if you commit it to

00:36:04,089 --> 00:36:08,230
master you type in get review garrett

00:36:06,910 --> 00:36:10,540
we'll see we'll see that you only have

00:36:08,230 --> 00:36:12,130
one pat one patch different than the

00:36:10,540 --> 00:36:14,080
remote to push up so you push the one

00:36:12,130 --> 00:36:15,550
patch up and that'll be in a separate

00:36:14,080 --> 00:36:17,590
branch so that doesn't get merged in so

00:36:15,550 --> 00:36:19,450
Garrett has every patch coming in

00:36:17,590 --> 00:36:21,430
its own branch if you want to have a

00:36:19,450 --> 00:36:22,630
bunch of dependent Brant commits you

00:36:21,430 --> 00:36:24,070
could have your own branch locally and

00:36:22,630 --> 00:36:25,810
you just do get commit you'll get commit

00:36:24,070 --> 00:36:27,250
git commit you commit you have three

00:36:25,810 --> 00:36:29,380
patches on one branch to type in get

00:36:27,250 --> 00:36:31,720
review it'll be three patches that are

00:36:29,380 --> 00:36:35,260
dependent on each other I was more

00:36:31,720 --> 00:36:36,820
referring to something that that we say

00:36:35,260 --> 00:36:38,200
you want to do a refactoring and

00:36:36,820 --> 00:36:40,210
everyone knows that it's going to be

00:36:38,200 --> 00:36:42,640
refactored so you open up a new branch

00:36:40,210 --> 00:36:44,560
and all the patches going in to trunk

00:36:42,640 --> 00:36:46,150
from then on have to be applied to both

00:36:44,560 --> 00:36:48,580
branch and the trunk we don't do that

00:36:46,150 --> 00:36:51,370
now we don't want to be only for work

00:36:48,580 --> 00:36:53,380
during before stable branches so we have

00:36:51,370 --> 00:36:54,670
masters or development branch you could

00:36:53,380 --> 00:36:56,710
have your local branch like that so if

00:36:54,670 --> 00:36:58,060
you're working on a work in progress you

00:36:56,710 --> 00:36:59,410
may have you know you and a bunch of

00:36:58,060 --> 00:37:01,240
guys may be working on something on the

00:36:59,410 --> 00:37:03,130
side and doing something like that but

00:37:01,240 --> 00:37:09,160
once it goes to trunk everything is on

00:37:03,130 --> 00:37:11,800
master thank you I was just going to

00:37:09,160 --> 00:37:13,390
mention that for long leg a branch we

00:37:11,800 --> 00:37:15,640
have like stable branch so we could use

00:37:13,390 --> 00:37:17,290
that stable point and we use that

00:37:15,640 --> 00:37:19,300
feature once we don't really use it but

00:37:17,290 --> 00:37:21,280
I support for 18 me garrett but for

00:37:19,300 --> 00:37:23,680
keystone we had a rewrite of keystone so

00:37:21,280 --> 00:37:25,210
we did like a copy disparate branch for

00:37:23,680 --> 00:37:27,310
that thing and we work on it and after

00:37:25,210 --> 00:37:28,570
we just merging the master usually not

00:37:27,310 --> 00:37:32,910
been stuck with just two everything in

00:37:28,570 --> 00:37:32,910
master break it as one

00:37:36,460 --> 00:37:41,140
you mentioned you using pilant I'm

00:37:38,800 --> 00:37:43,270
furious to know if you've turned a

00:37:41,140 --> 00:37:46,180
number of the style checks off in Piland

00:37:43,270 --> 00:37:47,230
because it's very strict I actually

00:37:46,180 --> 00:37:49,450
don't know if the top me I don't have to

00:37:47,230 --> 00:37:50,680
check but we don't we don't actually

00:37:49,450 --> 00:37:52,330
make sure everything is great you know

00:37:50,680 --> 00:37:54,700
note this no pylons really make sure

00:37:52,330 --> 00:37:56,140
that there's no new problems I don't

00:37:54,700 --> 00:37:58,480
think you run all of them based on how

00:37:56,140 --> 00:37:59,859
strict you say it is because pile in

00:37:58,480 --> 00:38:02,290
general has been pretty good lately I

00:37:59,859 --> 00:38:04,359
think my guess is that our other code

00:38:02,290 --> 00:38:06,820
you know style checks probably are very

00:38:04,359 --> 00:38:09,130
their overlap lot with the pylons for

00:38:06,820 --> 00:38:10,810
example placate support snow on use

00:38:09,130 --> 00:38:12,550
imports that's been a nice one for us

00:38:10,810 --> 00:38:14,020
because turns out when you refactor code

00:38:12,550 --> 00:38:15,820
a lot and this you know hundreds of

00:38:14,020 --> 00:38:17,440
developers get a whole bunch of unuse

00:38:15,820 --> 00:38:19,200
imports and so flaky does a pretty

00:38:17,440 --> 00:38:21,609
decent job of actually checking for that

00:38:19,200 --> 00:38:24,220
so a lot of it ends up in flight gate

00:38:21,609 --> 00:38:26,619
found Island to be quite strict didn't

00:38:24,220 --> 00:38:28,270
flake eight yeah so I've actually looked

00:38:26,619 --> 00:38:30,250
at different unused import tools and

00:38:28,270 --> 00:38:34,890
things like pylons and others are better

00:38:30,250 --> 00:38:34,890
than flight gate but one step at a time

00:38:36,470 --> 00:38:44,970
thank you for the talk um you said that

00:38:41,430 --> 00:38:47,400
pile in tirana or just only diff is it

00:38:44,970 --> 00:38:49,819
is it an operation an option of piling

00:38:47,400 --> 00:38:52,500
to or is something that sounds great

00:38:49,819 --> 00:38:55,050
yeah it's a i think a bash script we

00:38:52,500 --> 00:38:57,390
have buddy the bash grip so you it

00:38:55,050 --> 00:38:59,250
involves get so it's pilot plus did you

00:38:57,390 --> 00:39:02,190
know yes I'm check out head you know

00:38:59,250 --> 00:39:04,890
carrot you know pylons record the output

00:39:02,190 --> 00:39:07,650
get check out head pylant record the

00:39:04,890 --> 00:39:09,390
output do a diff something like that is

00:39:07,650 --> 00:39:10,589
something that you implemented them I

00:39:09,390 --> 00:39:11,819
didn't personally implement but

00:39:10,589 --> 00:39:14,369
something OpenStack implementing it's

00:39:11,819 --> 00:39:15,900
it's it's not a it's just like a system

00:39:14,369 --> 00:39:18,470
you know a short-term solution for us

00:39:15,900 --> 00:39:21,690
maybe long-term but it's a hack for us

00:39:18,470 --> 00:39:25,290
is it interesting because if you start

00:39:21,690 --> 00:39:28,859
using piling good after that a lot of

00:39:25,290 --> 00:39:31,440
the code has been written if you don't

00:39:28,859 --> 00:39:33,930
do the pylons only differ you should

00:39:31,440 --> 00:39:36,540
check also the designs that you didn't

00:39:33,930 --> 00:39:38,520
modify so there is it does a good job of

00:39:36,540 --> 00:39:40,230
actually detecting what the script makes

00:39:38,520 --> 00:39:41,940
sure that only running on the on the new

00:39:40,230 --> 00:39:43,619
code to it so we haven't seen too many

00:39:41,940 --> 00:39:45,720
false positives if any with the new pod

00:39:43,619 --> 00:39:47,960
lunch will leave so you've been happy

00:39:45,720 --> 00:39:47,960
with it

00:39:49,170 --> 00:39:57,600
okay so thumbs up unfortunately um thank

00:39:53,680 --> 00:39:57,600

YouTube URL: https://www.youtube.com/watch?v=w0Y91qRaxhQ


