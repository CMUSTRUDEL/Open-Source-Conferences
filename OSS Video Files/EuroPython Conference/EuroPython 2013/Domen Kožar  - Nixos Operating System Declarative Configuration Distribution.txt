Title: Domen Kožar  - Nixos Operating System Declarative Configuration Distribution
Publication date: 2015-04-18
Playlist: EuroPython 2013
Description: 
	[EuroPython 2013]  
Domen Kožar
Nixos Operating System: Declarative Configuration Distribution - 05 July 2013 "Track Big-Mac"
Captions: 
	00:00:00,000 --> 00:00:11,370
going to do an unprepared presentation

00:00:04,200 --> 00:00:14,820
on Nick sighs so so this is basically

00:00:11,370 --> 00:00:17,520
the the project it was started quite a

00:00:14,820 --> 00:00:20,520
long ago I think in 2004 something like

00:00:17,520 --> 00:00:25,260
that and it consists of Nix Nix packages

00:00:20,520 --> 00:00:28,019
Nick it's a little bit too loudly it's

00:00:25,260 --> 00:00:31,289
okay okay yeah I'm behind here so that's

00:00:28,019 --> 00:00:35,180
why it's that one so um so basically Nix

00:00:31,289 --> 00:00:40,710
is a very limited functional language

00:00:35,180 --> 00:00:44,640
designed only to to to be the toolset

00:00:40,710 --> 00:00:46,440
for packaging um and and the goal is so

00:00:44,640 --> 00:00:49,079
so first the problem we're trying to

00:00:46,440 --> 00:01:01,350
solve nowadays how we packaged software

00:00:49,079 --> 00:01:04,799
is something like this okay right so um

00:01:01,350 --> 00:01:08,340
so the currently the distribution is

00:01:04,799 --> 00:01:10,890
pack software by by giving the whole

00:01:08,340 --> 00:01:12,930
file system as an input so you know the

00:01:10,890 --> 00:01:15,930
make scripts no make file would go

00:01:12,930 --> 00:01:18,000
search you know user include user local

00:01:15,930 --> 00:01:20,460
include and so and so on and and that

00:01:18,000 --> 00:01:23,009
breaks in a lot of possible ways because

00:01:20,460 --> 00:01:24,840
there can be different versions of

00:01:23,009 --> 00:01:27,299
software installed on different parts of

00:01:24,840 --> 00:01:30,960
the file system so what Nick's does is

00:01:27,299 --> 00:01:34,250
it tries to isolate everything when

00:01:30,960 --> 00:01:38,610
building a package and it does that by

00:01:34,250 --> 00:01:40,350
it does that by removing the whole file

00:01:38,610 --> 00:01:42,450
system that's currently installed and

00:01:40,350 --> 00:01:45,450
and the whole environment is clean and

00:01:42,450 --> 00:01:49,890
and provides only a very limited set of

00:01:45,450 --> 00:01:54,899
tools that are used said make and GCC

00:01:49,890 --> 00:01:56,700
and a few others so so then you actually

00:01:54,899 --> 00:01:59,640
when you have that isolate that you

00:01:56,700 --> 00:02:01,590
actually specify which of the which wich

00:01:59,640 --> 00:02:07,079
are the dependencies of a package and so

00:02:01,590 --> 00:02:10,319
on so to go further than that all the

00:02:07,079 --> 00:02:12,569
other inputs that that is provided for

00:02:10,319 --> 00:02:13,670
the package to build is hashed so you

00:02:12,569 --> 00:02:15,920
get a hash

00:02:13,670 --> 00:02:17,870
and it has changes every time you

00:02:15,920 --> 00:02:21,020
basically change the instructions for

00:02:17,870 --> 00:02:23,270
the package to build and and in that

00:02:21,020 --> 00:02:25,700
hash are also the hatches of

00:02:23,270 --> 00:02:28,489
dependencies so if you change one pipe

00:02:25,700 --> 00:02:30,140
package all the stuff that depends on

00:02:28,489 --> 00:02:33,800
this package there there's hashes will

00:02:30,140 --> 00:02:36,350
also change so what you need is is that

00:02:33,800 --> 00:02:38,270
when when when you change the way that

00:02:36,350 --> 00:02:41,330
the package builds you know how it in

00:02:38,270 --> 00:02:43,220
fact how that propagates all the other

00:02:41,330 --> 00:02:47,000
packages and you can rebuild those

00:02:43,220 --> 00:02:51,410
packages um so well let's let's take

00:02:47,000 --> 00:02:53,720
quickly a look well so this is this is

00:02:51,410 --> 00:02:55,790
nick store and he rolled the stuff i

00:02:53,720 --> 00:02:57,530
have currently installed so you can see

00:02:55,790 --> 00:02:59,870
like the hashes in the beginning and

00:02:57,530 --> 00:03:02,980
then the name of the package version and

00:02:59,870 --> 00:03:08,239
the derivation so all the packages are

00:03:02,980 --> 00:03:15,370
isolated and and then if i go free and

00:03:08,239 --> 00:03:18,079
then for example it's really nice so

00:03:15,370 --> 00:03:20,840
then all the binaries that are in the

00:03:18,079 --> 00:03:23,930
bin are basically sim linked into those

00:03:20,840 --> 00:03:25,790
packages so it's completely isolated and

00:03:23,930 --> 00:03:28,579
then the whole system basically symlinks

00:03:25,790 --> 00:03:31,340
to to these packages for whatever it

00:03:28,579 --> 00:03:34,310
needs and this this this provides a very

00:03:31,340 --> 00:03:36,920
very interesting things like people like

00:03:34,310 --> 00:03:39,380
users root users and so on can install

00:03:36,920 --> 00:03:42,799
packages and there is a global like

00:03:39,380 --> 00:03:44,750
repository of stuff of packages so if if

00:03:42,799 --> 00:03:46,160
i install as a user a package and it's

00:03:44,750 --> 00:03:48,470
already installed on the system it will

00:03:46,160 --> 00:03:51,859
not duplicate and so on it will just

00:03:48,470 --> 00:03:53,690
seem linked into into my user account so

00:03:51,859 --> 00:03:59,799
if i go to like my user shell and the

00:03:53,690 --> 00:03:59,799
cynics and install I don't know tmax

00:04:01,209 --> 00:04:04,609
yeah it's going to just seemed like

00:04:02,930 --> 00:04:10,299
because it's already installed on my

00:04:04,609 --> 00:04:14,150
system um so this is nicks and now and

00:04:10,299 --> 00:04:17,680
now i'm going to show you Nick sighs let

00:04:14,150 --> 00:04:20,030
me just find my ah so much things open

00:04:17,680 --> 00:04:26,580
here

00:04:20,030 --> 00:04:28,500
watch other and now another nick says so

00:04:26,580 --> 00:04:30,750
Nick shires uses the Knicks package

00:04:28,500 --> 00:04:33,389
manager and provides the declarative

00:04:30,750 --> 00:04:36,750
configuration of the system so what we

00:04:33,389 --> 00:04:38,700
see here is for example i say networking

00:04:36,750 --> 00:04:40,560
host name is boron ichika so that's my

00:04:38,700 --> 00:04:43,590
so that's how I set my hostname and then

00:04:40,560 --> 00:04:46,740
I say networking firewall enable is true

00:04:43,590 --> 00:04:51,950
and you know a lot ecp ports and I don't

00:04:46,740 --> 00:04:58,380
know x 0 and e 0 poblana and you know

00:04:51,950 --> 00:05:00,840
there's a chance of stuff um so for

00:04:58,380 --> 00:05:03,930
example here I say enable each server

00:05:00,840 --> 00:05:08,220
and I configure synaptics and in the

00:05:03,930 --> 00:05:10,320
best well let me do it like this so here

00:05:08,220 --> 00:05:13,950
I say the window manager is I three

00:05:10,320 --> 00:05:16,380
desktop manager is X phase display

00:05:13,950 --> 00:05:18,419
manager is slim default login is my name

00:05:16,380 --> 00:05:23,760
and so on so so basically that's how you

00:05:18,419 --> 00:05:26,450
describe the whole system and then when

00:05:23,760 --> 00:05:29,550
you when you want to when you want to

00:05:26,450 --> 00:05:31,860
like upgrade and induce that config file

00:05:29,550 --> 00:05:34,830
you say mixers rebuild switch and that

00:05:31,860 --> 00:05:39,030
will what that will do is figure out the

00:05:34,830 --> 00:05:40,950
changes and an upgrade the system and

00:05:39,030 --> 00:05:42,600
there are also commands like dry run so

00:05:40,950 --> 00:05:44,550
it will actually see which packages will

00:05:42,600 --> 00:05:46,680
be downloaded and so on there's also

00:05:44,550 --> 00:05:48,060
builds vm so basically it will take all

00:05:46,680 --> 00:05:50,610
this configuration build a virtual

00:05:48,060 --> 00:05:52,320
machine so you can test all the

00:05:50,610 --> 00:05:55,530
configuration and then when you're okay

00:05:52,320 --> 00:05:58,050
you can deploy on to to your system so

00:05:55,530 --> 00:06:01,169
that's kind of the point so if I que se

00:05:58,050 --> 00:06:04,500
switch now it will basically look for

00:06:01,169 --> 00:06:09,810
changes and I think I upgraded before so

00:06:04,500 --> 00:06:12,750
it's not gonna do anything new um yeah I

00:06:09,810 --> 00:06:17,340
basically just reconfigure some stuff

00:06:12,750 --> 00:06:22,650
again and that's about it so on so

00:06:17,340 --> 00:06:27,260
that's that's Nick so i spar and then we

00:06:22,650 --> 00:06:27,260
have Hedra this is where the fun begins

00:06:27,409 --> 00:06:34,340
basically if i go to mix OS

00:06:31,270 --> 00:06:37,999
so this is basically a build system for

00:06:34,340 --> 00:06:41,270
all the packages if I commit a change to

00:06:37,999 --> 00:06:44,210
a package how it's built Hedra will will

00:06:41,270 --> 00:06:46,490
pull from git it will know which package

00:06:44,210 --> 00:06:49,310
has changed it will build those packages

00:06:46,490 --> 00:06:51,889
and provide the binary form of those

00:06:49,310 --> 00:06:55,520
packages and and what what Nick size

00:06:51,889 --> 00:06:58,159
will do when you say mix is revealed

00:06:55,520 --> 00:07:01,400
switch it will ask either for for depth

00:06:58,159 --> 00:07:02,900
hash and infielder has a binary package

00:07:01,400 --> 00:07:05,839
with that hash it will download it and

00:07:02,900 --> 00:07:08,419
just unpack and if not it will compile

00:07:05,839 --> 00:07:10,159
it on your system so it's it's a mix of

00:07:08,419 --> 00:07:12,860
a source distribution and a binary

00:07:10,159 --> 00:07:17,629
distribution which is as far as I know

00:07:12,860 --> 00:07:20,960
really a unique thing on and so by the

00:07:17,629 --> 00:07:22,909
ways of having this configuration state

00:07:20,960 --> 00:07:26,990
of whole system you basically can do

00:07:22,909 --> 00:07:29,900
this in a very repeatable way um now now

00:07:26,990 --> 00:07:32,360
the sonic size is built on I think for

00:07:29,900 --> 00:07:34,250
PhD thesis and there is no to new one

00:07:32,360 --> 00:07:37,039
I'm not correct uh not sure about the

00:07:34,250 --> 00:07:40,009
numbers but now they're doing annex ops

00:07:37,039 --> 00:07:42,439
which is basically mastic mess cloud

00:07:40,009 --> 00:07:44,000
deployment tool so you can have like

00:07:42,439 --> 00:07:47,089
these configurations for different

00:07:44,000 --> 00:07:49,159
machines and then you say this is the

00:07:47,089 --> 00:07:50,629
global configuration and these are the

00:07:49,159 --> 00:07:53,930
little bits that are different for each

00:07:50,629 --> 00:08:00,050
machine and then you just push that 22 I

00:07:53,930 --> 00:08:09,020
don't 2020 machines in the in the Amazon

00:08:00,050 --> 00:08:12,889
network for example so I don't know if

00:08:09,020 --> 00:08:16,969
there's any examples here oh there

00:08:12,889 --> 00:08:23,550
should be a matter of somewhere but I'm

00:08:16,969 --> 00:08:29,880
not sure there was okay

00:08:23,550 --> 00:08:31,980
oh it's yeah so there is that one

00:08:29,880 --> 00:08:39,420
section that you define like how to how

00:08:31,980 --> 00:08:41,730
to deploy to the ec2 um yeah so

00:08:39,420 --> 00:08:43,290
basically this is this is the NYX

00:08:41,730 --> 00:08:47,520
language the functional language and

00:08:43,290 --> 00:08:49,410
here you define like the easy to easy

00:08:47,520 --> 00:08:51,240
two parameters and then you define

00:08:49,410 --> 00:08:53,640
machines and it will build all the

00:08:51,240 --> 00:08:57,090
packages locally and then push just the

00:08:53,640 --> 00:08:59,220
binary divs to to the machines so if

00:08:57,090 --> 00:09:01,140
there is only one package missing on one

00:08:59,220 --> 00:09:03,480
machine it will just upload that not

00:09:01,140 --> 00:09:06,330
reconfigure the whole system and inspect

00:09:03,480 --> 00:09:08,190
and so on because what you build on your

00:09:06,330 --> 00:09:09,960
local machine and remote it should be

00:09:08,190 --> 00:09:11,670
the same so only the binary difference

00:09:09,960 --> 00:09:17,790
is that the stuff that should be

00:09:11,670 --> 00:09:21,780
uploaded so yeah that's that maybe we

00:09:17,790 --> 00:09:23,580
should take a look at how how the other

00:09:21,780 --> 00:09:29,220
source so you will not be scared about

00:09:23,580 --> 00:09:31,830
how you specify package for example X

00:09:29,220 --> 00:09:33,990
packages and X packages is basically now

00:09:31,830 --> 00:09:36,870
a collection of packages package with

00:09:33,990 --> 00:09:41,820
the Knicks manager so if you go to

00:09:36,870 --> 00:09:43,560
packages for example we will take a look

00:09:41,820 --> 00:09:52,020
at Python so we actually do something

00:09:43,560 --> 00:09:54,500
related to python level there is Python

00:09:52,020 --> 00:09:54,500
packages

00:09:56,279 --> 00:10:10,350
better than so if we go i'll do some

00:10:03,959 --> 00:10:13,110
similar example did it wear something so

00:10:10,350 --> 00:10:14,879
arc fires a so basically there is a

00:10:13,110 --> 00:10:17,790
function that we built called built

00:10:14,879 --> 00:10:19,949
python package and then you say the name

00:10:17,790 --> 00:10:22,620
and you say the source fetch it from

00:10:19,949 --> 00:10:24,720
this URL and then you verify the biggest

00:10:22,620 --> 00:10:27,089
and then you say built-in puts these are

00:10:24,720 --> 00:10:30,809
the dependencies to build the package

00:10:27,089 --> 00:10:32,339
which is unzipped because and then

00:10:30,809 --> 00:10:36,149
there's do check which will run the

00:10:32,339 --> 00:10:38,069
which will run the tests so this package

00:10:36,149 --> 00:10:41,910
doesn't have tests apparently and then

00:10:38,069 --> 00:10:44,069
just delete the data and what it does is

00:10:41,910 --> 00:10:46,470
when you said when you set meter dot

00:10:44,069 --> 00:10:48,389
platform which is not set here Kid Rock

00:10:46,470 --> 00:10:51,269
will know for which platforms to build

00:10:48,389 --> 00:10:53,939
this package and the next package also

00:10:51,269 --> 00:10:56,399
builds for freebsd and four or six and

00:10:53,939 --> 00:10:58,889
four for windows and the knicks OS is

00:10:56,399 --> 00:11:01,160
built only on linux kernel so you can

00:10:58,889 --> 00:11:04,529
use the next package manager on any

00:11:01,160 --> 00:11:06,990
existing linux distribution and so on

00:11:04,529 --> 00:11:10,079
just to have a repository of packages

00:11:06,990 --> 00:11:11,910
that you can install for example for i I

00:11:10,079 --> 00:11:14,309
don't know for my scientists and use my

00:11:11,910 --> 00:11:22,079
plot leap and so on it's hard to be

00:11:14,309 --> 00:11:27,779
those packages yes question yeah so what

00:11:22,079 --> 00:11:31,790
oh so he asked what architectures does

00:11:27,779 --> 00:11:35,550
it support Sonic's currently builds 444

00:11:31,790 --> 00:11:41,689
well the standard ones the the 32-bit

00:11:35,550 --> 00:11:41,689
and 64-bit the Darwin psych

00:11:44,970 --> 00:11:54,709
it's on where and letting expect it to

00:11:51,300 --> 00:11:54,709
sell you right ok so let's open that

00:12:00,630 --> 00:12:04,700
I mean you guys only building for

00:12:05,620 --> 00:12:08,790
yeah so this

00:12:11,930 --> 00:12:17,490
so so this is what its building now so

00:12:14,550 --> 00:12:19,769
arm is not supported because it's hard

00:12:17,490 --> 00:12:22,550
to build are we have we have a lot we

00:12:19,769 --> 00:12:26,100
have spent sunk one time on making

00:12:22,550 --> 00:12:28,290
cross-compiling forearm I'm trying to

00:12:26,100 --> 00:12:31,500
push that but you know it's it's of like

00:12:28,290 --> 00:12:34,199
a fun project so it's advancing slowly

00:12:31,500 --> 00:12:37,800
but we have one crazy guy who already

00:12:34,199 --> 00:12:40,050
runs Nick sighs on Raspberry Pi but it's

00:12:37,800 --> 00:12:42,449
not sufficiently supported so Hedra does

00:12:40,050 --> 00:12:44,160
not build you have to cross compile at

00:12:42,449 --> 00:12:46,170
your own on your system and then use

00:12:44,160 --> 00:12:48,810
those packages basically just copy them

00:12:46,170 --> 00:12:50,250
to the nick story and that's it it's

00:12:48,810 --> 00:12:54,029
it's not really convenient at the moment

00:12:50,250 --> 00:12:55,800
and to do that but yeah so so this is

00:12:54,029 --> 00:13:00,720
basically like a really quick at hawk

00:12:55,800 --> 00:13:02,730
introduction to to mix may if i were

00:13:00,720 --> 00:13:05,040
more prepared i could show you nix nix

00:13:02,730 --> 00:13:07,500
ops you can say like you define like two

00:13:05,040 --> 00:13:09,930
machines and then say deploy and it will

00:13:07,500 --> 00:13:12,329
far up to virtual boxes and like install

00:13:09,930 --> 00:13:15,149
all the stuff and you have that ready

00:13:12,329 --> 00:13:18,329
and then you say like services that ssh

00:13:15,149 --> 00:13:21,149
enable and say deploy and it will figure

00:13:18,329 --> 00:13:24,300
out download ssh and run it with some

00:13:21,149 --> 00:13:27,600
some parameters on both machines for

00:13:24,300 --> 00:13:29,300
example and so on so maybe maybe i can

00:13:27,600 --> 00:13:39,930
show that on my machine just quickly

00:13:29,300 --> 00:13:49,459
there was one question yeah Oh are the

00:13:39,930 --> 00:13:49,459
binary questions what packages yeah yeah

00:13:55,490 --> 00:14:01,380
yeah so yeah so the question is if you

00:13:58,230 --> 00:14:10,470
can relocate the binary packages they

00:14:01,380 --> 00:14:12,620
link to to the next or so maybe you can

00:14:10,470 --> 00:14:12,620
answer

00:14:23,930 --> 00:14:44,839
like this with what yet Nick yeah you

00:14:41,120 --> 00:14:46,550
can use it with all true yes so to

00:14:44,839 --> 00:14:48,470
repeat the question can you use nicks

00:14:46,550 --> 00:14:52,120
without root yes you can install it on

00:14:48,470 --> 00:14:55,520
your user account and and then then

00:14:52,120 --> 00:14:58,279
install packages as a user although

00:14:55,520 --> 00:15:00,589
that's not that there is some extra

00:14:58,279 --> 00:15:09,890
setup than normal normally but you can

00:15:00,589 --> 00:15:12,050
do okay if you if you want binary

00:15:09,890 --> 00:15:18,649
support you will need the slash Nick

00:15:12,050 --> 00:15:21,290
selector so good take your home

00:15:18,649 --> 00:15:23,920
directory I mixed area but you will not

00:15:21,290 --> 00:15:27,290
be able to use any binary because they

00:15:23,920 --> 00:15:29,000
they obviously not found it where they

00:15:27,290 --> 00:15:38,740
find the library so you do not have

00:15:29,000 --> 00:15:42,620
support from you currently own directory

00:15:38,740 --> 00:15:45,740
so one side effect is also that all this

00:15:42,620 --> 00:15:48,230
stuff is read-only so you cannot like

00:15:45,740 --> 00:15:51,250
create package like you cannot modify

00:15:48,230 --> 00:15:54,350
the packages once they are installed

00:15:51,250 --> 00:15:57,500
this is this is because NYX has this

00:15:54,350 --> 00:16:00,200
idea called impurities which means if

00:15:57,500 --> 00:16:01,640
you build with the same parameters on

00:16:00,200 --> 00:16:03,290
the same system and two different

00:16:01,640 --> 00:16:06,410
letters the result should be the same

00:16:03,290 --> 00:16:08,209
and and and well that's why the hashes

00:16:06,410 --> 00:16:10,220
and that's why that's why you should not

00:16:08,209 --> 00:16:17,110
modify the whole package otherwise you

00:16:10,220 --> 00:16:17,110
break the vernix so um yeah

00:16:19,800 --> 00:16:26,860
for me it sounds I wanted and change the

00:16:24,940 --> 00:16:32,350
last time I think a better explanation

00:16:26,860 --> 00:16:59,620
is to say it will realize the system

00:16:32,350 --> 00:17:35,770
configuration and already it doesn't

00:16:59,620 --> 00:17:41,830
know it's like additional packages and

00:17:35,770 --> 00:17:44,530
you can find it yourself so one of the

00:17:41,830 --> 00:17:47,860
the results of this system is because

00:17:44,530 --> 00:17:49,960
everything is like it keeps a sister II

00:17:47,860 --> 00:17:53,680
of your upgrades you can roll back so

00:17:49,960 --> 00:17:56,080
you know you can upgrade the binary

00:17:53,680 --> 00:17:58,540
packages and do some stuff and then say

00:17:56,080 --> 00:18:01,300
roll back and it will go to the previous

00:17:58,540 --> 00:18:04,770
state which is sounds you know really

00:18:01,300 --> 00:18:04,770
magic but it actually works

00:18:09,880 --> 00:18:16,090
mix profiles yeah

00:18:18,010 --> 00:18:22,970
so this is basically like a history of

00:18:20,800 --> 00:18:25,100
everything and how that works is when

00:18:22,970 --> 00:18:28,190
you boot your system in a group you will

00:18:25,100 --> 00:18:29,870
get like a history of snapshots and you

00:18:28,190 --> 00:18:32,120
can select in group which one to boot

00:18:29,870 --> 00:18:36,500
and by default it boots the latest one

00:18:32,120 --> 00:18:38,150
of course so maybe maybe just um so one

00:18:36,500 --> 00:18:39,950
of the cool thing is you can say like

00:18:38,150 --> 00:18:42,170
the call many packages you can download

00:18:39,950 --> 00:18:43,850
in parallel and because there is no like

00:18:42,170 --> 00:18:46,130
extra configuration it just needs to

00:18:43,850 --> 00:18:50,200
download and extract it so it's really

00:18:46,130 --> 00:18:59,720
fast when you're like adding new stuff

00:18:50,200 --> 00:19:01,210
so any more questions yeah so so the

00:18:59,720 --> 00:19:03,590
question is can we combine different

00:19:01,210 --> 00:19:06,200
configurations so you mean like you can

00:19:03,590 --> 00:19:10,370
split them in two and so on yeah Nix has

00:19:06,200 --> 00:19:20,920
this require function or that will

00:19:10,370 --> 00:19:24,080
import like a config file inside so so

00:19:20,920 --> 00:19:31,190
so maybe i will try to show i don't know

00:19:24,080 --> 00:19:36,800
if this is going to work ok it kind of

00:19:31,190 --> 00:19:39,790
put so so basically on the terminal f8

00:19:36,800 --> 00:19:47,050
you have all the things you can define

00:19:39,790 --> 00:19:47,050
unique size so if i go for example sshd

00:19:49,450 --> 00:19:53,590
come on something more simpler

00:19:58,190 --> 00:20:04,009
so so here for example is like the

00:20:00,679 --> 00:20:07,340
networking stuff like extra hosts enable

00:20:04,009 --> 00:20:10,700
will on allow pinga low tcp ports UDP

00:20:07,340 --> 00:20:13,730
ports and Bubba so you have all options

00:20:10,700 --> 00:20:15,470
that you can define for Nyx's and this

00:20:13,730 --> 00:20:17,840
is like automatically generated when you

00:20:15,470 --> 00:20:19,610
add new features to make sense so you

00:20:17,840 --> 00:20:23,389
have basically documentation on your

00:20:19,610 --> 00:20:31,490
terminal there's a lot of stiphu

00:20:23,389 --> 00:20:38,080
configure nice um so any more questions

00:20:31,490 --> 00:20:38,080
I hope this was ok kind of words yeah

00:20:42,690 --> 00:20:52,480
again can we comply compile you mean if

00:20:49,360 --> 00:20:55,120
you can compile GCC with yeah you need

00:20:52,480 --> 00:20:59,680
to compile GCC in order to to compile

00:20:55,120 --> 00:21:03,330
all other packages so and maybe maybe I

00:20:59,680 --> 00:21:03,330
can show what happens if you add stuff

00:21:06,540 --> 00:21:11,620
so for example here I have like extra

00:21:09,880 --> 00:21:13,810
users I like three quenette's a name is

00:21:11,620 --> 00:21:16,150
electric great home is through extra

00:21:13,810 --> 00:21:20,080
groups is like wheel and so on in this

00:21:16,150 --> 00:21:22,360
will also create the user and here like

00:21:20,080 --> 00:21:24,910
chromium I have a disable Java

00:21:22,360 --> 00:21:27,940
explicitly just in case they enable it

00:21:24,910 --> 00:21:34,270
globally and adult flash I have enabled

00:21:27,940 --> 00:21:40,720
and so on but if we go up I'll have to

00:21:34,270 --> 00:21:42,700
change my passwords later yeah well

00:21:40,720 --> 00:21:44,530
that's one of the things that we have a

00:21:42,700 --> 00:21:46,660
debate how to treat the passwords and

00:21:44,530 --> 00:21:48,550
this is it's a hard problem with the

00:21:46,660 --> 00:21:59,500
current system but when we're working on

00:21:48,550 --> 00:22:06,280
it so mmm for example something that I

00:21:59,500 --> 00:22:08,350
don't have installed hmm so no some

00:22:06,280 --> 00:22:13,590
service well yeah we can add that to the

00:22:08,350 --> 00:22:13,590
packages so like

00:22:15,120 --> 00:22:17,270
x

00:22:18,830 --> 00:22:27,799
I almost don't see anything so i hope i

00:22:25,130 --> 00:22:29,870
typed it correctly but now what should

00:22:27,799 --> 00:22:38,149
happen is it will download all the

00:22:29,870 --> 00:22:44,000
dependencies for a maxim yeah so just

00:22:38,149 --> 00:22:46,309
the Emacs package yeah it's thirty-five

00:22:44,000 --> 00:22:58,700
percent and so on so on you you can ask

00:22:46,309 --> 00:23:02,539
questions in was no consulting you go

00:22:58,700 --> 00:23:04,159
what are you see our cash reserves or it

00:23:02,539 --> 00:23:06,200
was comes out in regard if you have a

00:23:04,159 --> 00:23:08,600
replacement or substitution for this

00:23:06,200 --> 00:23:10,669
hash and we are told ya we have one so

00:23:08,600 --> 00:23:12,860
it's not long enough and if you would

00:23:10,669 --> 00:23:15,380
change something in that set of

00:23:12,860 --> 00:23:17,450
instructions to compiling you next then

00:23:15,380 --> 00:23:19,250
you would get a different hash and do

00:23:17,450 --> 00:23:21,409
doesn't have a partner equal you so you

00:23:19,250 --> 00:23:23,600
can park in scratch so then I've always

00:23:21,409 --> 00:23:25,340
get the thank you it's a it's a

00:23:23,600 --> 00:23:28,370
transparent binary support it's not like

00:23:25,340 --> 00:23:32,230
you if it's there you go get it or you

00:23:28,370 --> 00:23:32,230
can set up your own binary cash

00:23:33,400 --> 00:23:38,320
I wasn't at the beginning of the talk

00:23:35,380 --> 00:23:40,600
you might have answered this but the

00:23:38,320 --> 00:23:44,890
question is how about from the

00:23:40,600 --> 00:23:48,450
conflicting binary like one side one

00:23:44,890 --> 00:23:51,880
application where binary language

00:23:48,450 --> 00:23:54,310
survivors library older and yeah so

00:23:51,880 --> 00:23:56,860
that's basically what mix also you can

00:23:54,310 --> 00:23:58,620
have you know multiple versions of the

00:23:56,860 --> 00:24:02,500
same library installed and then use

00:23:58,620 --> 00:24:04,210
symlink to to the you know like to one

00:24:02,500 --> 00:24:06,550
package and to the other into the third

00:24:04,210 --> 00:24:08,080
and for example when we have like a

00:24:06,550 --> 00:24:09,820
postgres service you define which

00:24:08,080 --> 00:24:13,090
postgis version you use and you can have

00:24:09,820 --> 00:24:14,830
multiple of those and so on son so

00:24:13,090 --> 00:24:17,290
that's also what one of the things we're

00:24:14,830 --> 00:24:21,660
trying to solve so we are out of time

00:24:17,290 --> 00:24:21,660

YouTube URL: https://www.youtube.com/watch?v=DtOBROowzDg


