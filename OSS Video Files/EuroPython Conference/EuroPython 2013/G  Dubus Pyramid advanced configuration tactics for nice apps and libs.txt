Title: G  Dubus Pyramid advanced configuration tactics for nice apps and libs
Publication date: 2015-04-18
Playlist: EuroPython 2013
Description: 
	G  Dubus Pyramid advanced configuration tactics for nice apps and libs
[Europython 2013]
5 July 2013
Track Ravioli
Captions: 
	00:00:02,149 --> 00:00:07,950
before I'll do how would you test them

00:00:05,390 --> 00:00:14,969
idea toilet as do not as do it with rice

00:00:07,950 --> 00:00:17,340
cuatro Cinco seis a total hire one we're

00:00:14,969 --> 00:00:21,420
going to begin my next talk from Georgia

00:00:17,340 --> 00:00:31,349
to boost about the pyramids please turn

00:00:21,420 --> 00:00:34,410
off your cell phones and enjoy okay so I

00:00:31,349 --> 00:00:37,170
everyone I'm George before we start a

00:00:34,410 --> 00:00:44,660
quick question who among you as the

00:00:37,170 --> 00:00:47,399
tried or use by remedy okay great so

00:00:44,660 --> 00:00:49,379
just a quick introduction for the others

00:00:47,399 --> 00:00:51,329
these are the key word that I used to

00:00:49,379 --> 00:00:54,079
describe by ramit on the introduction in

00:00:51,329 --> 00:00:57,750
the in the documentation there are some

00:00:54,079 --> 00:00:59,219
basic and current stuff see focus and

00:00:57,750 --> 00:01:01,350
documentation and reliability which

00:00:59,219 --> 00:01:04,619
means if you try to commit something

00:01:01,350 --> 00:01:05,909
that is not test covered test covered

00:01:04,619 --> 00:01:09,060
and documentation covers you won't

00:01:05,909 --> 00:01:11,189
accept it it's open source they focus on

00:01:09,060 --> 00:01:14,030
the speed of the implementation trying

00:01:11,189 --> 00:01:17,659
not to be too slow for a web application

00:01:14,030 --> 00:01:20,580
but the more unique parts of simplicity

00:01:17,659 --> 00:01:23,100
minimalism so simplicity means that they

00:01:20,580 --> 00:01:25,170
try to make it so that you don't have to

00:01:23,100 --> 00:01:27,869
learn concepts that you don't use for

00:01:25,170 --> 00:01:31,320
example there are two ways to map URLs

00:01:27,869 --> 00:01:33,570
to code in pyramid but you can only know

00:01:31,320 --> 00:01:36,180
about one and you can only know that

00:01:33,570 --> 00:01:38,460
when a news 14 months and that's not a

00:01:36,180 --> 00:01:40,290
problem and the whole framework is like

00:01:38,460 --> 00:01:41,850
that there's a lot of tools but you

00:01:40,290 --> 00:01:44,520
don't have to use them if you don't if

00:01:41,850 --> 00:01:47,390
you don't want and they want you all

00:01:44,520 --> 00:01:49,920
need to learn them it's minimalist

00:01:47,390 --> 00:01:52,229
minimalistic because unlike jungle it

00:01:49,920 --> 00:01:54,540
does not provide everything you need to

00:01:52,229 --> 00:01:56,640
know to make a web application it only

00:01:54,540 --> 00:01:59,790
focuses on the core of the web

00:01:56,640 --> 00:02:02,579
application the call being mapping the

00:01:59,790 --> 00:02:03,110
euros to code Tom plating security and

00:02:02,579 --> 00:02:12,200
so

00:02:03,110 --> 00:02:15,920
oh I'm sorry yes this is better okay and

00:02:12,200 --> 00:02:18,370
so mapping URLs to coat on blazing

00:02:15,920 --> 00:02:23,510
security and serving static assets and

00:02:18,370 --> 00:02:25,820
it doesn't do SQL it doesn't do an RM

00:02:23,510 --> 00:02:28,520
doesn't do forms there are other

00:02:25,820 --> 00:02:31,400
libraries that you can plug plug in PI

00:02:28,520 --> 00:02:34,100
ram it on the top of pyrometer to do

00:02:31,400 --> 00:02:36,350
that this enable you to choose which

00:02:34,100 --> 00:02:38,600
library you would like to do with that

00:02:36,350 --> 00:02:41,540
with jungle you you have to use the

00:02:38,600 --> 00:02:43,550
jungle or RM you have to do SQL and if

00:02:41,540 --> 00:02:46,130
you don't do that you lose some part of

00:02:43,550 --> 00:02:49,100
jungle you load the admin so that's

00:02:46,130 --> 00:02:52,070
that's what my remit is much smaller but

00:02:49,100 --> 00:02:58,489
still have the potential to to row with

00:02:52,070 --> 00:03:00,580
extensions so why am I here I I write

00:02:58,489 --> 00:03:02,989
some web application we spy remit and

00:03:00,580 --> 00:03:05,930
one thing I have to do again and again

00:03:02,989 --> 00:03:07,610
is authentication and authentication is

00:03:05,930 --> 00:03:10,489
boring because it's really hard to do

00:03:07,610 --> 00:03:13,040
right and it's always the same thing and

00:03:10,489 --> 00:03:15,170
then I discovered persona which is a an

00:03:13,040 --> 00:03:18,140
authentication system written by by

00:03:15,170 --> 00:03:21,260
Mozilla it's quite some it as a lot of

00:03:18,140 --> 00:03:24,049
technical qualities in the

00:03:21,260 --> 00:03:26,959
implementation itself but Mother it's

00:03:24,049 --> 00:03:28,940
really easy to use just about adding a

00:03:26,959 --> 00:03:30,950
few JavaScript lines to your application

00:03:28,940 --> 00:03:34,010
and implementing a few stuff on the

00:03:30,950 --> 00:03:37,190
server side so i did it in i implemented

00:03:34,010 --> 00:03:40,160
it in a few on ma on my abs and then I

00:03:37,190 --> 00:03:43,160
decided a i'm copy pasting this from up

00:03:40,160 --> 00:03:45,769
shouldn't shouldn't i be able to to make

00:03:43,160 --> 00:03:49,340
this in a more reusable away so i put it

00:03:45,769 --> 00:03:51,650
in the library and I release the library

00:03:49,340 --> 00:03:54,890
because it was there I just just a

00:03:51,650 --> 00:03:56,930
little documentation and during that I

00:03:54,890 --> 00:03:58,660
discovered how to make libraries we

00:03:56,930 --> 00:04:00,950
whisper remit and i discovered the

00:03:58,660 --> 00:04:02,959
libraries and extension system is really

00:04:00,950 --> 00:04:05,870
well done so that's mostly what i'm

00:04:02,959 --> 00:04:08,660
going to talk about today there will be

00:04:05,870 --> 00:04:10,760
two ipads first i will explain the

00:04:08,660 --> 00:04:13,010
extensible configuration system so you

00:04:10,760 --> 00:04:15,180
have an idea of what we are dealing with

00:04:13,010 --> 00:04:18,570
then i'm going to give you

00:04:15,180 --> 00:04:21,570
examples of of what's can be done with

00:04:18,570 --> 00:04:25,830
it both through my libraries and to

00:04:21,570 --> 00:04:30,270
write nicely organized applications so

00:04:25,830 --> 00:04:32,789
here is an edible example with spiral we

00:04:30,270 --> 00:04:34,770
have on the top of you which is just a

00:04:32,789 --> 00:04:36,720
function that takes a request and return

00:04:34,770 --> 00:04:39,780
a response and here is the configuration

00:04:36,720 --> 00:04:42,020
parts we have realigned to configure the

00:04:39,780 --> 00:04:46,350
application itself and three lines to

00:04:42,020 --> 00:04:49,770
create whiskey application and pass it

00:04:46,350 --> 00:04:51,360
to a server so the part that that is

00:04:49,770 --> 00:04:54,750
going to our interests as the most today

00:04:51,360 --> 00:04:57,150
is this one the configuration so here is

00:04:54,750 --> 00:05:01,530
the configurator object it's the center

00:04:57,150 --> 00:05:04,139
of any every parameter application it's

00:05:01,530 --> 00:05:09,180
what is used to bring all the little

00:05:04,139 --> 00:05:13,259
bits together here for the low world we

00:05:09,180 --> 00:05:16,199
have two to come to concept to wake up

00:05:13,259 --> 00:05:20,010
to methods we add a root which is just

00:05:16,199 --> 00:05:21,840
more or less and well and we attached a

00:05:20,010 --> 00:05:25,979
few to this route the view being the

00:05:21,840 --> 00:05:27,750
code we have written earlier and there's

00:05:25,979 --> 00:05:30,060
a lot of this message which are called

00:05:27,750 --> 00:05:32,729
directives and pyramid has that enable

00:05:30,060 --> 00:05:35,970
you to add and configure a lot of stuff

00:05:32,729 --> 00:05:38,010
new application the configure views

00:05:35,970 --> 00:05:40,530
authentication and grandiose complete

00:05:38,010 --> 00:05:48,210
from the earth stations and everything

00:05:40,530 --> 00:05:49,800
that can be done in pyramid so sorry one

00:05:48,210 --> 00:05:51,949
interesting thing is that we can move

00:05:49,800 --> 00:05:55,889
the directives around the order is not

00:05:51,949 --> 00:05:58,560
significant because the calling a

00:05:55,889 --> 00:06:00,270
directive doesn't do doesn't do anything

00:05:58,560 --> 00:06:01,770
right now it only does something when

00:06:00,270 --> 00:06:04,770
the configuration is committed and that

00:06:01,770 --> 00:06:08,460
happens when we make the whiskey

00:06:04,770 --> 00:06:10,440
application so we can add directives in

00:06:08,460 --> 00:06:13,199
any other and they added to some list

00:06:10,440 --> 00:06:19,710
that is processed later and that's going

00:06:13,199 --> 00:06:21,570
to be important another 19 is that like

00:06:19,710 --> 00:06:24,760
a flask for example we can decorate

00:06:21,570 --> 00:06:27,460
views with some decorator to 22

00:06:24,760 --> 00:06:30,970
them but I'm not unlike flask it's not

00:06:27,460 --> 00:06:33,280
decorator with a import side import time

00:06:30,970 --> 00:06:37,870
side effect in flask you add a bitter

00:06:33,280 --> 00:06:40,360
and when the module is imported the the

00:06:37,870 --> 00:06:43,180
view is added to some list of some

00:06:40,360 --> 00:06:46,420
register here it's not the case the only

00:06:43,180 --> 00:06:50,170
things is decorated does is marking the

00:06:46,420 --> 00:06:53,470
view with som som tum tak t it so

00:06:50,170 --> 00:06:55,690
callbacks that is 30 school later it's

00:06:53,470 --> 00:06:58,360
called when I do a configured scanner

00:06:55,690 --> 00:07:00,940
when i call this config dog scan the

00:06:58,360 --> 00:07:02,320
callback you will be called and the view

00:07:00,940 --> 00:07:04,810
will be I will be added to the

00:07:02,320 --> 00:07:09,040
configuration and that's nice property

00:07:04,810 --> 00:07:12,850
because we don't have to we don't have

00:07:09,040 --> 00:07:16,780
to to come on import time effects which

00:07:12,850 --> 00:07:19,420
can be troublesome in some situations so

00:07:16,780 --> 00:07:23,320
this configurator as a few nice things

00:07:19,420 --> 00:07:25,570
it has sanity checks i am when i define

00:07:23,320 --> 00:07:28,390
of you i have to attach the attached it

00:07:25,570 --> 00:07:30,070
to root if the truth doesn't makes

00:07:28,390 --> 00:07:32,830
doesn't like this it doesn't make sense

00:07:30,070 --> 00:07:35,050
the application can't work and the

00:07:32,830 --> 00:07:38,740
configurator will fill me with a very

00:07:35,050 --> 00:07:45,400
precise error message on this line there

00:07:38,740 --> 00:07:48,910
is no Ruth name name like this but sorry

00:07:45,400 --> 00:07:51,640
even more importantly the conflict

00:07:48,910 --> 00:07:55,780
detection if I try to add to add two

00:07:51,640 --> 00:07:57,880
views to the exact cemburu same root Z

00:07:55,780 --> 00:08:00,280
configurator will will raise a conflict

00:07:57,880 --> 00:08:02,710
because there's no way to know which one

00:08:00,280 --> 00:08:06,580
to use and that's pretty interesting it

00:08:02,710 --> 00:08:09,160
means that pyramid won't want silently

00:08:06,580 --> 00:08:11,500
disk out one arrows shouldn't be passed

00:08:09,160 --> 00:08:14,280
silently so there is an explicit

00:08:11,500 --> 00:08:16,990
conflict and the application won't start

00:08:14,280 --> 00:08:20,200
I'll come back under conflicts a little

00:08:16,990 --> 00:08:22,570
later another night thing and pretty

00:08:20,200 --> 00:08:25,840
important with the configurator is that

00:08:22,570 --> 00:08:27,490
I got include documented not

00:08:25,840 --> 00:08:30,150
documentation I can include

00:08:27,490 --> 00:08:32,860
configuration that is somewhere else

00:08:30,150 --> 00:08:36,209
basically I have a callable a function

00:08:32,860 --> 00:08:38,309
that takes a config argument and I go

00:08:36,209 --> 00:08:41,729
I can call include under on this

00:08:38,309 --> 00:08:44,429
function the function itself only calls

00:08:41,729 --> 00:08:46,709
other directives on this country from

00:08:44,429 --> 00:08:49,050
there it looks like just a simple

00:08:46,709 --> 00:08:51,420
function call but it's nuts as else

00:08:49,050 --> 00:08:54,660
there are some nice night things that

00:08:51,420 --> 00:08:57,420
can be done for example I can add a root

00:08:54,660 --> 00:09:01,470
prefix argument to this include and this

00:08:57,420 --> 00:09:05,220
route prefix argument makes so make it

00:09:01,470 --> 00:09:07,769
so that any route defined in my more

00:09:05,220 --> 00:09:11,160
configuration functions will be prefixed

00:09:07,769 --> 00:09:13,470
with this prefix which mean I can take

00:09:11,160 --> 00:09:15,839
some library or some code from someone

00:09:13,470 --> 00:09:17,610
else and import it as a sub bass in my

00:09:15,839 --> 00:09:22,649
application so that it doesn't conflict

00:09:17,610 --> 00:09:24,660
with my own my own roots I can also use

00:09:22,649 --> 00:09:26,339
it to make different part of my

00:09:24,660 --> 00:09:30,240
application in different modules and it

00:09:26,339 --> 00:09:34,769
brought them all in different surpass of

00:09:30,240 --> 00:09:38,790
my of my application so the most

00:09:34,769 --> 00:09:40,920
important part of the most useful part

00:09:38,790 --> 00:09:43,980
of this include it's the way it saw it

00:09:40,920 --> 00:09:46,649
handles conflicts I told you if I have

00:09:43,980 --> 00:09:49,459
two conflicting directives by Raymond

00:09:46,649 --> 00:09:53,429
will tell me but if I have a conflicting

00:09:49,459 --> 00:09:55,709
directive in an included function and in

00:09:53,429 --> 00:09:57,389
a top loader pyrah meet will assume I

00:09:55,709 --> 00:10:00,179
want the top little directive to

00:09:57,389 --> 00:10:03,299
override the included directive this

00:10:00,179 --> 00:10:06,149
means that I can include some library

00:10:03,299 --> 00:10:09,360
and replace on part just by calling the

00:10:06,149 --> 00:10:12,660
directives again it also provides me

00:10:09,360 --> 00:10:18,059
with a way to solve myself conflict

00:10:12,660 --> 00:10:20,009
between libraries if I include 222

00:10:18,059 --> 00:10:22,709
function to two colors that are

00:10:20,009 --> 00:10:24,959
conflicting your parameters are know how

00:10:22,709 --> 00:10:27,600
to solve this conflict because two

00:10:24,959 --> 00:10:32,759
libraries it doesn't know which one I

00:10:27,600 --> 00:10:34,829
want so I can simply call this directive

00:10:32,759 --> 00:10:38,699
and this one with other rights choosers

00:10:34,829 --> 00:10:40,829
and solve the conflict so libraries

00:10:38,699 --> 00:10:45,860
might be conflicting but I ever was a

00:10:40,829 --> 00:10:48,800
way to solve it in my code last part of

00:10:45,860 --> 00:10:50,600
the configuration goodness of the

00:10:48,800 --> 00:10:54,190
include goodness is the include me

00:10:50,600 --> 00:10:57,950
convention so I conco include on a

00:10:54,190 --> 00:11:01,579
callable a function but I I comes I can

00:10:57,950 --> 00:11:05,180
also call include on a dotted path just

00:11:01,579 --> 00:11:08,029
path and if I can include on the pass of

00:11:05,180 --> 00:11:10,610
a motive or on on a model pyramid will

00:11:08,029 --> 00:11:13,820
look for a function that is called

00:11:10,610 --> 00:11:17,480
include me in it this mean that I can

00:11:13,820 --> 00:11:19,160
include any python module and if item

00:11:17,480 --> 00:11:21,709
package without knowing what's in it

00:11:19,160 --> 00:11:26,529
because I know that the writer will have

00:11:21,709 --> 00:11:26,529
put and include me a function in it I

00:11:30,130 --> 00:11:37,610
don't have to worry what's inside this

00:11:32,660 --> 00:11:40,250
module so this means that pie remedy

00:11:37,610 --> 00:11:43,730
extension is just any pie tin package

00:11:40,250 --> 00:11:45,410
that has an include may function because

00:11:43,730 --> 00:11:47,360
an include me functions can call

00:11:45,410 --> 00:11:48,560
anything on a config and extension can

00:11:47,360 --> 00:11:51,860
do everything that is possible

00:11:48,560 --> 00:11:55,640
environment and because the top-level

00:11:51,860 --> 00:11:57,800
directives that are / / ID included

00:11:55,640 --> 00:12:00,500
directives this means that extension can

00:11:57,800 --> 00:12:04,490
set any defaults you want and they can

00:12:00,500 --> 00:12:07,850
be overridden in my application an

00:12:04,490 --> 00:12:10,190
example of that code from my pirate

00:12:07,850 --> 00:12:12,170
personal library i define I'm not a

00:12:10,190 --> 00:12:14,390
medication and an unauthorized asian

00:12:12,170 --> 00:12:16,910
policy so that ma so that the user can

00:12:14,390 --> 00:12:18,910
just include pirate personal and use it

00:12:16,910 --> 00:12:20,089
right away with these default

00:12:18,910 --> 00:12:23,029
authentication and authorization

00:12:20,089 --> 00:12:25,850
policies but if the user wants to use

00:12:23,029 --> 00:12:29,510
another authentication policy or change

00:12:25,850 --> 00:12:33,649
some ass only our only has to do is

00:12:29,510 --> 00:12:35,329
include the library and just call call

00:12:33,649 --> 00:12:37,370
the same directive with another value

00:12:35,329 --> 00:12:39,980
and this will override the default I set

00:12:37,370 --> 00:12:42,620
in the in the library so that that's

00:12:39,980 --> 00:12:45,079
nice that also means that when I'm a

00:12:42,620 --> 00:12:47,300
library whiter I don't have to worry

00:12:45,079 --> 00:12:51,820
about reducing the possibilities of the

00:12:47,300 --> 00:12:54,890
user I can just set defaults and 94 sent

00:12:51,820 --> 00:12:57,250
here the user can customize everything

00:12:54,890 --> 00:12:57,250
later

00:12:57,450 --> 00:13:03,240
some nice iron older stuff there is a

00:13:00,750 --> 00:13:05,010
directive to add directives this

00:13:03,240 --> 00:13:07,290
directive as itself conflict detection

00:13:05,010 --> 00:13:11,130
and the directive i will add will have

00:13:07,290 --> 00:13:13,590
conflict detection let me give you an

00:13:11,130 --> 00:13:16,200
example basically i want to add a

00:13:13,590 --> 00:13:19,500
directive to set some mass level of my

00:13:16,200 --> 00:13:22,020
application what it will do it it will

00:13:19,500 --> 00:13:25,370
just change in the registry of my

00:13:22,020 --> 00:13:28,590
application also nest of an attribute

00:13:25,370 --> 00:13:32,280
there are two things to do when I are

00:13:28,590 --> 00:13:34,830
when I add a directive I will call back

00:13:32,280 --> 00:13:37,170
which is what what what is the

00:13:34,830 --> 00:13:40,770
configuration code itself and I have a

00:13:37,170 --> 00:13:42,780
discriminator which is basically if I

00:13:40,770 --> 00:13:44,780
call two directives with the same

00:13:42,780 --> 00:13:48,510
discriminators they are conflicting I

00:13:44,780 --> 00:13:51,240
just have core other functions that

00:13:48,510 --> 00:13:53,580
takes my configuration object then the

00:13:51,240 --> 00:13:55,830
argument I said to call back into this

00:13:53,580 --> 00:13:58,860
reactor and I call configured action to

00:13:55,830 --> 00:14:01,020
add this configuration action I then

00:13:58,860 --> 00:14:03,150
call config that's a directive to add

00:14:01,020 --> 00:14:05,820
this new directive and once I import

00:14:03,150 --> 00:14:08,670
this by pyrometer awesomeness module I

00:14:05,820 --> 00:14:14,520
conjured called config that set of

00:14:08,670 --> 00:14:17,220
somnos level 22 anyway like 42 this

00:14:14,520 --> 00:14:19,140
means that an application a library

00:14:17,220 --> 00:14:21,530
writer can add directive sets are

00:14:19,140 --> 00:14:25,800
exactly like the built-in directives

00:14:21,530 --> 00:14:27,330
it's possible to add hooks and really

00:14:25,800 --> 00:14:32,490
really useful when when writing

00:14:27,330 --> 00:14:35,520
libraries so to summarise this first

00:14:32,490 --> 00:14:37,020
part I have a system to delegate

00:14:35,520 --> 00:14:38,460
configuration and to check that

00:14:37,020 --> 00:14:40,170
everything is sounds that there's no

00:14:38,460 --> 00:14:43,080
conflicts and I didn't make a mistake

00:14:40,170 --> 00:14:44,610
while configuring it's a great way to

00:14:43,080 --> 00:14:46,950
organize configuration of an application

00:14:44,610 --> 00:14:48,990
because i can put parts of the app in

00:14:46,950 --> 00:14:51,450
different modules and import it all in

00:14:48,990 --> 00:14:53,670
the end and it's also a great way to

00:14:51,450 --> 00:14:55,500
make libraries because actually there is

00:14:53,670 --> 00:14:57,540
no much difference between a modular

00:14:55,500 --> 00:14:59,520
rights application in the library it's

00:14:57,540 --> 00:15:01,050
just such the libraries extracted from

00:14:59,520 --> 00:15:03,330
the application and there is named

00:15:01,050 --> 00:15:06,230
interpretation but it's the same

00:15:03,330 --> 00:15:09,670
techniques just to give you some

00:15:06,230 --> 00:15:12,050
comparison with django when I want to

00:15:09,670 --> 00:15:15,620
include the library I have to configure

00:15:12,050 --> 00:15:18,140
every hook a hand every hood by hand I

00:15:15,620 --> 00:15:20,600
have a list of things in my settings of

00:15:18,140 --> 00:15:22,760
pie why not only if I want to use Django

00:15:20,600 --> 00:15:27,020
browser idea without the same thing as

00:15:22,760 --> 00:15:29,000
by ramit personal I have two are added

00:15:27,020 --> 00:15:30,920
to my installed apps then i have to add

00:15:29,000 --> 00:15:32,720
a notification backends to the

00:15:30,920 --> 00:15:34,040
authentication back end i have to add

00:15:32,720 --> 00:15:36,380
something to the complaint complaint

00:15:34,040 --> 00:15:39,500
cortex processors i have to add some

00:15:36,380 --> 00:15:42,050
stuff to my euros of pie i have to

00:15:39,500 --> 00:15:45,050
handle all the entry points of the hook

00:15:42,050 --> 00:15:47,000
by a hand so there won't be any

00:15:45,050 --> 00:15:49,970
conflicts because i'm the run right I'm

00:15:47,000 --> 00:15:52,430
the one writing the right things the

00:15:49,970 --> 00:15:55,030
configuration file and adding every

00:15:52,430 --> 00:15:57,980
stuff by hand but it can be a tedious

00:15:55,030 --> 00:16:00,980
just for the comparison byram it enable

00:15:57,980 --> 00:16:02,600
you to just write one line and import

00:16:00,980 --> 00:16:07,220
everything without having to endure

00:16:02,600 --> 00:16:09,680
until it all so what can I do we with

00:16:07,220 --> 00:16:13,190
all this i'm going to give you some some

00:16:09,680 --> 00:16:15,560
tape some examples taken from byron by

00:16:13,190 --> 00:16:18,230
Remy the extensions existing pyro media

00:16:15,560 --> 00:16:21,460
extensions and how to use the

00:16:18,230 --> 00:16:25,130
configuration to improve library

00:16:21,460 --> 00:16:30,230
application writing so first of all for

00:16:25,130 --> 00:16:31,640
applications it's possible to to use the

00:16:30,230 --> 00:16:35,030
add directives to simplify the

00:16:31,640 --> 00:16:37,100
configuration let's suppose I have a

00:16:35,030 --> 00:16:40,220
very simple application where I have

00:16:37,100 --> 00:16:42,290
only one view for each route and I'm

00:16:40,220 --> 00:16:44,210
racking it like this and it's quite two

00:16:42,290 --> 00:16:46,550
years because for each view I have to

00:16:44,210 --> 00:16:49,790
put two lines and I have to define your

00:16:46,550 --> 00:16:51,950
temporary route with a domain name so

00:16:49,790 --> 00:16:54,710
it's possible with a directive to

00:16:51,950 --> 00:16:58,010
simplify this I'm just going to add a

00:16:54,710 --> 00:17:00,260
directive what it does is it called to

00:16:58,010 --> 00:17:02,840
light it generates on route 9 it holds

00:17:00,260 --> 00:17:05,870
these two lines rich as root imagine and

00:17:02,840 --> 00:17:09,580
I add my directive and then I can just

00:17:05,870 --> 00:17:13,380
call it like that I add simple view with

00:17:09,580 --> 00:17:16,000
and the bus for h1 and because i use a

00:17:13,380 --> 00:17:19,090
directive i have conflict detection on

00:17:16,000 --> 00:17:22,060
this i can I can't define two views with

00:17:19,090 --> 00:17:23,710
the same path the culture at the

00:17:22,060 --> 00:17:27,100
committee decoration of the application

00:17:23,710 --> 00:17:29,410
it will crash it will tell me but we can

00:17:27,100 --> 00:17:34,420
make it even even nicer if we use a

00:17:29,410 --> 00:17:37,620
decorator so let's see how all these

00:17:34,420 --> 00:17:40,660
decorators are implemented they are

00:17:37,620 --> 00:17:44,440
quite simple in fact it's just about

00:17:40,660 --> 00:17:47,290
attaching daunting to the view so that

00:17:44,440 --> 00:17:50,350
it's detected by scan the Venusian

00:17:47,290 --> 00:17:52,480
library which is about of that part of

00:17:50,350 --> 00:17:55,840
the part of the pyramid project not

00:17:52,480 --> 00:17:59,620
pirate code base is used to do that so

00:17:55,840 --> 00:18:02,440
my decorator is just just take an

00:17:59,620 --> 00:18:05,200
argument which is passed and when it's

00:18:02,440 --> 00:18:08,850
called so when it's called with the with

00:18:05,200 --> 00:18:12,300
the view it just venue gendered attached

00:18:08,850 --> 00:18:15,340
w and self-taught Reggie so it is a

00:18:12,300 --> 00:18:18,760
configuration code just it will just

00:18:15,340 --> 00:18:22,860
call at simple view when I do the config

00:18:18,760 --> 00:18:26,140
dots can and with these few lines I have

00:18:22,860 --> 00:18:27,820
exactly the flask configuration same

00:18:26,140 --> 00:18:30,580
configuration as a flask application

00:18:27,820 --> 00:18:36,430
just simple decorators with the with the

00:18:30,580 --> 00:18:39,100
root and the nice things to do with a

00:18:36,430 --> 00:18:41,620
configuration when I have my my own

00:18:39,100 --> 00:18:45,160
little application is to add stuff to

00:18:41,620 --> 00:18:47,920
the request for example I really like

00:18:45,160 --> 00:18:51,250
that when I call when I get requests

00:18:47,920 --> 00:18:53,680
user it returns me the user object for

00:18:51,250 --> 00:18:55,660
the current user but when I excited to

00:18:53,680 --> 00:18:57,910
use our job object it's the one I define

00:18:55,660 --> 00:19:01,150
my model it's not some pre-existing one

00:18:57,910 --> 00:19:02,560
so it's quite simple just imagine of

00:19:01,150 --> 00:19:04,150
defining the function that takes a

00:19:02,560 --> 00:19:06,790
request and reach of the user object

00:19:04,150 --> 00:19:10,270
here is an example from my code it uses

00:19:06,790 --> 00:19:14,290
SQL Jimmy just does a database query and

00:19:10,270 --> 00:19:17,380
I i call the directive old or add

00:19:14,290 --> 00:19:19,080
request method we get you get user and

00:19:17,380 --> 00:19:20,820
the name of the

00:19:19,080 --> 00:19:23,250
I sure is the attribute of the matter

00:19:20,820 --> 00:19:27,419
that I wanted to be but that's not all

00:19:23,250 --> 00:19:29,010
because I am so telling to reify first

00:19:27,419 --> 00:19:31,620
of all this implies that this will be a

00:19:29,010 --> 00:19:34,230
property and not a method so it's Rick

00:19:31,620 --> 00:19:36,539
without user not a method call but an

00:19:34,230 --> 00:19:40,590
attribute and all right if I make it

00:19:36,539 --> 00:19:43,649
that make it so that the function we

00:19:40,590 --> 00:19:45,990
will only be called once by request once

00:19:43,649 --> 00:19:48,210
a faction is called the property is

00:19:45,990 --> 00:19:50,610
replaced by the result of the attributes

00:19:48,210 --> 00:19:52,820
of if i call it multiple time in the

00:19:50,610 --> 00:19:55,470
same request every subsequent call

00:19:52,820 --> 00:19:58,169
request doc user is just to use our

00:19:55,470 --> 00:20:04,950
object and not some property or function

00:19:58,169 --> 00:20:08,669
call and that that's kind of nice pyrah

00:20:04,950 --> 00:20:10,409
me does a concept of events which is

00:20:08,669 --> 00:20:14,639
just at some point of the application

00:20:10,409 --> 00:20:17,220
and events is if droning you can you can

00:20:14,639 --> 00:20:20,669
add subscriber to execute some code at

00:20:17,220 --> 00:20:22,470
that point there's events just before

00:20:20,669 --> 00:20:24,809
the rendering of the top latest on on

00:20:22,470 --> 00:20:27,299
your request on your response when the

00:20:24,809 --> 00:20:29,130
application is created and 12 context is

00:20:27,299 --> 00:20:34,139
phone with Travis all is done but I'm

00:20:29,130 --> 00:20:37,620
not going to spend the time on that so

00:20:34,139 --> 00:20:43,880
this is used for example with the befo

00:20:37,620 --> 00:20:46,440
before under i can i can add i can

00:20:43,880 --> 00:20:48,360
consider the zealand as a dict and if i

00:20:46,440 --> 00:20:50,490
put things in this dick they will be

00:20:48,360 --> 00:20:53,250
available as global variables in my

00:20:50,490 --> 00:20:55,470
complex this is extremely useful to add

00:20:53,250 --> 00:20:59,039
some helpers to my to my templates what

00:20:55,470 --> 00:21:06,000
i do with our helper module and i added

00:20:59,039 --> 00:21:07,230
to my to my template like that so that

00:21:06,000 --> 00:21:09,929
was a quick example of what you can

00:21:07,230 --> 00:21:11,880
change in your your application a lot of

00:21:09,929 --> 00:21:14,340
things can be changed and can be

00:21:11,880 --> 00:21:16,909
customized in very deep ways you can

00:21:14,340 --> 00:21:20,010
choose two miles away URLs are generated

00:21:16,909 --> 00:21:21,809
you can customize of your responses on

00:21:20,010 --> 00:21:24,600
let's say so that you don't have to

00:21:21,809 --> 00:21:26,130
reach you love you sorry you don't have

00:21:24,600 --> 00:21:27,779
to return a response object at the end

00:21:26,130 --> 00:21:28,710
of the view but you can return

00:21:27,779 --> 00:21:31,140
everything and

00:21:28,710 --> 00:21:34,320
register an adapter two are treated in

00:21:31,140 --> 00:21:36,120
tomm special way you can change how

00:21:34,320 --> 00:21:37,890
requests are mapped reviews so is that

00:21:36,120 --> 00:21:40,440
something very deep in the web framework

00:21:37,890 --> 00:21:43,140
you can change sessions can change

00:21:40,440 --> 00:21:47,880
authentication renders nearly everything

00:21:43,140 --> 00:21:50,940
can be changed so now libraries how can

00:21:47,880 --> 00:21:53,520
we use the config to make library nice

00:21:50,940 --> 00:21:58,409
libraries of our extensions the example

00:21:53,520 --> 00:22:00,630
are taken from real life applications no

00:21:58,409 --> 00:22:03,750
real life libraries existing extensions

00:22:00,630 --> 00:22:06,120
so again the people and events and I

00:22:03,750 --> 00:22:07,890
don't need to inject some variables into

00:22:06,120 --> 00:22:10,710
the templates for the user of the

00:22:07,890 --> 00:22:14,100
library to use years in my pirated

00:22:10,710 --> 00:22:16,020
personal I introduce the JavaScript they

00:22:14,100 --> 00:22:18,179
use on each were introduced directly

00:22:16,020 --> 00:22:21,809
into the template so i can use it right

00:22:18,179 --> 00:22:25,110
there it's possible to use a directive

00:22:21,809 --> 00:22:27,000
to add an entry point for example

00:22:25,110 --> 00:22:29,220
parameter i would exempt but extends

00:22:27,000 --> 00:22:32,730
pyrimidine add two new concept of

00:22:29,220 --> 00:22:35,010
layouts and panels and it introduced the

00:22:32,730 --> 00:22:37,860
new directors add layer and add panel

00:22:35,010 --> 00:22:39,809
and the pretty interesting thing is once

00:22:37,860 --> 00:22:41,460
you have included it there's no

00:22:39,809 --> 00:22:43,200
difference between the built-in

00:22:41,460 --> 00:22:45,600
directives and the directors that were

00:22:43,200 --> 00:22:48,090
added no difference between add view and

00:22:45,600 --> 00:22:49,830
add panel to the user it's seamless so

00:22:48,090 --> 00:22:53,010
it's possible to extend the framework

00:22:49,830 --> 00:22:54,960
and turn it into something much more

00:22:53,010 --> 00:22:58,520
much more complex with much more

00:22:54,960 --> 00:23:01,740
functionality without without it being

00:22:58,520 --> 00:23:07,830
just some noble on a knob it's pretty

00:23:01,740 --> 00:23:10,289
pretty nice and seamless one night in

00:23:07,830 --> 00:23:12,649
just just an example of what can be done

00:23:10,289 --> 00:23:16,020
is it possible to add view predicate so

00:23:12,649 --> 00:23:19,169
just to explain your view predicated

00:23:16,020 --> 00:23:21,570
when I i I've you and I'd say Ruth

00:23:19,169 --> 00:23:24,270
passing out LOL request matata compost

00:23:21,570 --> 00:23:27,710
this to last thing our view predicates

00:23:24,270 --> 00:23:29,850
they are used to decide whether or not

00:23:27,710 --> 00:23:34,710
view should be used to learn to a

00:23:29,850 --> 00:23:36,750
request it's possible to to add son to

00:23:34,710 --> 00:23:38,980
change the way we request how much or

00:23:36,750 --> 00:23:41,990
just to do some extra work

00:23:38,980 --> 00:23:45,710
tyramine layout again and I got someone

00:23:41,990 --> 00:23:48,830
to write configured as you to read name

00:23:45,710 --> 00:23:52,910
English go sing and lay article summit

00:23:48,830 --> 00:23:57,100
layout and what it does is it will call

00:23:52,910 --> 00:23:59,660
this as my much nicer to add this in the

00:23:57,100 --> 00:24:01,910
interview definition or even in the

00:23:59,660 --> 00:24:04,010
decorator just above the view then to

00:24:01,910 --> 00:24:08,390
call this inside the view so it's an

00:24:04,010 --> 00:24:10,310
able to to add to them not to the syntax

00:24:08,390 --> 00:24:14,200
itself but really took to the core part

00:24:10,310 --> 00:24:17,660
of the of the framework to customize it

00:24:14,200 --> 00:24:22,490
what else why have I have twins which is

00:24:17,660 --> 00:24:24,710
which are wrap around a pyramid request

00:24:22,490 --> 00:24:26,720
handling I can do stuff before I can do

00:24:24,710 --> 00:24:28,430
stuff after and I can get exceptions

00:24:26,720 --> 00:24:30,530
these are for example news the

00:24:28,430 --> 00:24:33,670
environment debug debug tool bar Tyra

00:24:30,530 --> 00:24:36,850
meet explode epic toolbar ism a nice

00:24:33,670 --> 00:24:38,750
provides among other things a nice

00:24:36,850 --> 00:24:40,910
exception view when there is an

00:24:38,750 --> 00:24:44,060
exception in the application and X log

00:24:40,910 --> 00:24:46,070
logs exceptions and both of these youth

00:24:44,060 --> 00:24:49,370
twins to get exception from the

00:24:46,070 --> 00:24:51,560
application and do stuff on the on the

00:24:49,370 --> 00:24:53,960
way out of the requested also possible

00:24:51,560 --> 00:24:57,770
to do some stuff on the way in there

00:24:53,960 --> 00:25:00,500
pretty much like whiskey middlewares but

00:24:57,770 --> 00:25:02,090
they're inside parameter I'd access to

00:25:00,500 --> 00:25:06,500
all the configuration of the pyramid

00:25:02,090 --> 00:25:10,760
application and one thought that I found

00:25:06,500 --> 00:25:12,500
out and no direct answer I finally found

00:25:10,760 --> 00:25:14,510
its not to enter the global stuff

00:25:12,500 --> 00:25:15,950
because when you write an application or

00:25:14,510 --> 00:25:19,040
an extension you need to have somewhat

00:25:15,950 --> 00:25:21,560
both in the database connections that

00:25:19,040 --> 00:25:26,300
took bets persist between requests I

00:25:21,560 --> 00:25:29,300
found two answers and people the people

00:25:26,300 --> 00:25:32,870
thing do you want people saying it was

00:25:29,300 --> 00:25:35,630
the wrong I've got people telling me I

00:25:32,870 --> 00:25:37,940
had to write in the registry with some

00:25:35,630 --> 00:25:40,910
kind of central registry of the

00:25:37,940 --> 00:25:42,740
application that some people told me the

00:25:40,910 --> 00:25:45,020
registry is unbanned for that and I

00:25:42,740 --> 00:25:46,290
should use settings the settings

00:25:45,020 --> 00:25:48,000
which is

00:25:46,290 --> 00:25:49,860
setting of the application all the

00:25:48,000 --> 00:25:52,050
people told me the second x is for

00:25:49,860 --> 00:25:54,390
settings not school of all objects so

00:25:52,050 --> 00:25:57,450
both are available I don't think there

00:25:54,390 --> 00:25:59,940
is a problem with putting in the bank

00:25:57,450 --> 00:26:04,950
one maybe someone will be able to tell

00:25:59,940 --> 00:26:08,310
me which is the one true way to finish

00:26:04,950 --> 00:26:10,530
an example of a real big frail frame

00:26:08,310 --> 00:26:13,560
work with is implemented on the top on

00:26:10,530 --> 00:26:16,650
the top of of Pyra mean it it is gonna

00:26:13,560 --> 00:26:21,360
switch is a framework to build Jesus

00:26:16,650 --> 00:26:24,240
JSON API ice it provides let's just make

00:26:21,360 --> 00:26:27,810
sure how it's done before to use the

00:26:24,240 --> 00:26:29,610
time I create a service object I give it

00:26:27,810 --> 00:26:32,130
a name I give it a bath and the

00:26:29,610 --> 00:26:36,660
description to some documentation and i

00:26:32,130 --> 00:26:39,840
can define this you for for the message

00:26:36,660 --> 00:26:42,240
HTTP method i want i can find view for

00:26:39,840 --> 00:26:45,540
the gates to get method that will return

00:26:42,240 --> 00:26:48,420
some taunting for for this this user for

00:26:45,540 --> 00:26:51,720
example i can find posts that will do

00:26:48,420 --> 00:26:55,860
something else and the conus framework

00:26:51,720 --> 00:26:58,560
will give me a validation of on the the

00:26:55,860 --> 00:27:01,260
request if the request is not valid JSON

00:26:58,560 --> 00:27:05,100
it won't clash it will reach on the the

00:27:01,260 --> 00:27:07,050
right arrow message error message for

00:27:05,100 --> 00:27:08,850
the other methods if i called delete

00:27:07,050 --> 00:27:11,100
method it will say no matter not

00:27:08,850 --> 00:27:14,130
implemented it gives me things

00:27:11,100 --> 00:27:16,830
documentation so it will generate a nice

00:27:14,130 --> 00:27:20,250
documentation for the whole API other

00:27:16,830 --> 00:27:22,920
type of validation a lot of nice stuff

00:27:20,250 --> 00:27:25,860
and this is implemented on the top of

00:27:22,920 --> 00:27:29,010
pyramid and it's implemented quite

00:27:25,860 --> 00:27:33,210
simply because when I look at it doesn't

00:27:29,010 --> 00:27:35,160
look like dynamic but it's just more or

00:27:33,210 --> 00:27:38,340
less to two simple steps first of all

00:27:35,160 --> 00:27:42,300
they've added configured our mark on his

00:27:38,340 --> 00:27:43,680
service to the gc's directive you just

00:27:42,300 --> 00:27:47,250
have to call it with a service object

00:27:43,680 --> 00:27:49,890
and we it will add all the view of

00:27:47,250 --> 00:27:52,110
defines ute to the right place in the

00:27:49,890 --> 00:27:54,390
pyramid configuration and then they

00:27:52,110 --> 00:27:56,700
added a venue on call back so the

00:27:54,390 --> 00:27:59,580
Venusian call back was what what was

00:27:56,700 --> 00:28:00,060
used in the decorators this time it's

00:27:59,580 --> 00:28:02,910
not

00:28:00,060 --> 00:28:05,190
greater is added to the to the user of

00:28:02,910 --> 00:28:07,680
the earth to the service subject when

00:28:05,190 --> 00:28:09,420
you create it this meant that the

00:28:07,680 --> 00:28:11,760
service object somewhere in your model

00:28:09,420 --> 00:28:16,260
will be detected by the config dots can

00:28:11,760 --> 00:28:18,440
so to create my my API with cons I just

00:28:16,260 --> 00:28:21,180
we find all these i create a

00:28:18,440 --> 00:28:23,730
configuration I call conflicted scan and

00:28:21,180 --> 00:28:30,420
that's it and this is possible because

00:28:23,730 --> 00:28:33,240
of person has extension system so just

00:28:30,420 --> 00:28:34,680
as a conclusion pi remedies really

00:28:33,240 --> 00:28:37,530
customizable you can do a lot of

00:28:34,680 --> 00:28:41,730
different stuff with a can and bend it

00:28:37,530 --> 00:28:44,370
to the way you want to do it if you

00:28:41,730 --> 00:28:46,710
don't already use it if your jungle just

00:28:44,370 --> 00:28:48,720
keep this in a corner of your minded if

00:28:46,710 --> 00:28:51,090
one day what you want to do doesn't fit

00:28:48,720 --> 00:28:52,890
the jungle way remember that this is

00:28:51,090 --> 00:28:57,680
available this is very close to me so i

00:28:52,890 --> 00:29:00,600
built and this is quite simple to use a

00:28:57,680 --> 00:29:03,000
few of your legs if you want to get this

00:29:00,600 --> 00:29:07,650
later my presentation must be based on

00:29:03,000 --> 00:29:12,780
the on the documentation and the slides

00:29:07,650 --> 00:29:16,580
are available nice oh sorry and the

00:29:12,780 --> 00:29:16,580
slides are available online thank you

00:29:26,340 --> 00:29:34,240
quick question one register when you

00:29:31,300 --> 00:29:38,560
subscribe an event inside the library

00:29:34,240 --> 00:29:42,490
how can you override it give it in a

00:29:38,560 --> 00:29:45,060
room now okay thanks how can you

00:29:42,490 --> 00:29:48,640
override and even that a good question

00:29:45,060 --> 00:29:51,910
there are q4 matter I know yes if you

00:29:48,640 --> 00:29:54,220
subscribe some code to an event it will

00:29:51,910 --> 00:29:55,930
be added to some list but I believe

00:29:54,220 --> 00:29:58,470
there is array is there is a way to

00:29:55,930 --> 00:30:04,800
access that list of register vent and to

00:29:58,470 --> 00:30:04,800
unregister some okay thank you

00:30:20,650 --> 00:30:27,380
well first sensible talk and I'd like to

00:30:24,110 --> 00:30:29,690
ask whether there are some techniques to

00:30:27,380 --> 00:30:32,030
register applications twice or three

00:30:29,690 --> 00:30:36,080
times because I've seen some of the

00:30:32,030 --> 00:30:39,560
techniques assumes that the application

00:30:36,080 --> 00:30:42,170
is a single tone and is it possible for

00:30:39,560 --> 00:30:45,200
example to pass some configuration to

00:30:42,170 --> 00:30:48,860
include me so I can register the

00:30:45,200 --> 00:30:51,530
application extension once with some

00:30:48,860 --> 00:30:54,800
graphics some config and the other time

00:30:51,530 --> 00:30:57,110
with another quarter ok I'm not sure I'm

00:30:54,800 --> 00:30:58,700
still your question but my roommate

00:30:57,110 --> 00:31:01,310
doesn't assume the application is a

00:30:58,700 --> 00:31:03,290
singleton it's just an update sorry

00:31:01,310 --> 00:31:05,930
sorry I mean not application but

00:31:03,290 --> 00:31:07,910
extension so is it possible to register

00:31:05,930 --> 00:31:09,650
the extension twice with different

00:31:07,910 --> 00:31:13,670
settings oh that's an interesting

00:31:09,650 --> 00:31:15,710
question no I think it wouldn't be

00:31:13,670 --> 00:31:17,420
possible to register on application I

00:31:15,710 --> 00:31:19,670
think it wouldn't be possible to

00:31:17,420 --> 00:31:23,450
register an extension multiple times

00:31:19,670 --> 00:31:25,250
accept it it only does routes the words

00:31:23,450 --> 00:31:27,380
because they have different prefix one

00:31:25,250 --> 00:31:30,170
conflict but any other directive will

00:31:27,380 --> 00:31:33,800
conflict one way to work around that

00:31:30,170 --> 00:31:37,100
would be to split split it into two

00:31:33,800 --> 00:31:39,080
things all the directives that would

00:31:37,100 --> 00:31:41,630
conflict if in included multiple times

00:31:39,080 --> 00:31:49,250
in some module and all the roots in

00:31:41,630 --> 00:31:52,360
tomada thank you for your talk just one

00:31:49,250 --> 00:31:57,290
quick question now excuse me that

00:31:52,360 --> 00:32:03,590
parameter gives offers could a good

00:31:57,290 --> 00:32:07,430
solution for can I say okay choosing

00:32:03,590 --> 00:32:10,310
between Django a spear or pyramid is now

00:32:07,430 --> 00:32:13,490
clear to me depending what you want to

00:32:10,310 --> 00:32:16,300
do I mean it seems that Django does a

00:32:13,490 --> 00:32:19,850
lot of things in your backends sometimes

00:32:16,300 --> 00:32:22,070
great and useful and you can customize a

00:32:19,850 --> 00:32:24,770
lot of things with sperm it just one

00:32:22,070 --> 00:32:29,320
quick question if you develop the same

00:32:24,770 --> 00:32:34,000
kind of thing I mean just defining views

00:32:29,320 --> 00:32:36,130
roots and views in both framework have

00:32:34,000 --> 00:32:39,130
you an idea about the the performances

00:32:36,130 --> 00:32:41,980
between the two frameworks I don't have

00:32:39,130 --> 00:32:45,700
some proper benchmark but from what I

00:32:41,980 --> 00:32:47,740
understand pyramid for the pyramid

00:32:45,700 --> 00:32:50,230
developers speed matches and they try to

00:32:47,740 --> 00:32:55,630
make it through that basic bathing

00:32:50,230 --> 00:32:58,600
things the zoom request routing and all

00:32:55,630 --> 00:33:00,730
this is quite fast I don't have a number

00:32:58,600 --> 00:33:03,279
but i think by remedies supposed to be

00:33:00,730 --> 00:33:07,570
fast as a jungle they make it so so that

00:33:03,279 --> 00:33:10,480
it is well actually just to answer that

00:33:07,570 --> 00:33:11,950
question there's a nice design document

00:33:10,480 --> 00:33:14,740
from Chris McDonough the author of

00:33:11,950 --> 00:33:16,059
pyramid defending pyramid where he

00:33:14,740 --> 00:33:17,620
argues for all these different design

00:33:16,059 --> 00:33:21,340
decisions and one of it is the

00:33:17,620 --> 00:33:23,289
configuration so pyramid does all this

00:33:21,340 --> 00:33:25,179
work up front like conflict resolution

00:33:23,289 --> 00:33:26,470
detection all that and that when the

00:33:25,179 --> 00:33:28,539
request comes in it's actually very very

00:33:26,470 --> 00:33:30,820
fast so it's much faster because it

00:33:28,539 --> 00:33:38,250
doesn't use any regular expressions for

00:33:30,820 --> 00:33:38,250
instance so any one another

00:33:41,280 --> 00:33:45,290

YouTube URL: https://www.youtube.com/watch?v=VmfWkeUOuYY


