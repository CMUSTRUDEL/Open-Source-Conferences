Title: Edward Easton - Python Packaging on the Enterprise
Publication date: 2015-04-18
Playlist: EuroPython 2013
Description: 
	[EuroPython 2013] 
Edward Easton - Python Packaging on the Enterprise - 05 July 2013 "Track Lasagne"
Captions: 
	00:00:07,130 --> 00:00:13,830
okay um thank you everybody for being

00:00:10,920 --> 00:00:18,630
here we are here with the Edward and we

00:00:13,830 --> 00:00:21,779
are well see ya we'll see how to do

00:00:18,630 --> 00:00:28,170
Python packaging on the enterprise Thank

00:00:21,779 --> 00:00:30,480
You Edward thank you good morning thanks

00:00:28,170 --> 00:00:32,669
all for getting up on this last day of

00:00:30,480 --> 00:00:35,700
the conference my name's Edward Easton

00:00:32,669 --> 00:00:37,440
I'm an Aussie freelancer working in

00:00:35,700 --> 00:00:39,510
London at the moment I've been a pipe

00:00:37,440 --> 00:00:41,100
encoder for about 10 years currently

00:00:39,510 --> 00:00:43,950
contracting for an algorithmic trading

00:00:41,100 --> 00:00:46,530
firm in London now I'm not much of a

00:00:43,950 --> 00:00:48,450
Trekkie so to speak I'm or if it's more

00:00:46,530 --> 00:00:50,010
of a Star Wars kind of person but I am

00:00:48,450 --> 00:00:52,170
wearing the traditional red shirt of the

00:00:50,010 --> 00:00:55,800
disposable crew member as you should all

00:00:52,170 --> 00:00:59,129
know being Trekkies here um okay so why

00:00:55,800 --> 00:01:00,629
the Star Trek jokes um usually when

00:00:59,129 --> 00:01:02,820
people think Enterprise in computing

00:01:00,629 --> 00:01:04,049
it's expensive bloated we paid far too

00:01:02,820 --> 00:01:05,339
much for a piece of code that didn't

00:01:04,049 --> 00:01:08,250
actually work when we had to spend

00:01:05,339 --> 00:01:09,810
another year making it work in this case

00:01:08,250 --> 00:01:12,510
I'm not really going down that route I

00:01:09,810 --> 00:01:14,159
mean more big teams lots of packages

00:01:12,510 --> 00:01:15,630
lots of people working on big code bases

00:01:14,159 --> 00:01:19,080
all the time things changing all over

00:01:15,630 --> 00:01:20,880
the place and also the sense of a more a

00:01:19,080 --> 00:01:23,490
more restricted environment so you've

00:01:20,880 --> 00:01:25,290
got you know paranoid sysadmin so don't

00:01:23,490 --> 00:01:28,920
let you put compilers on the boxes and

00:01:25,290 --> 00:01:31,590
all that kind of stuff okay so package

00:01:28,920 --> 00:01:33,720
Lee that's what this is about it's

00:01:31,590 --> 00:01:36,750
library that we put together and open

00:01:33,720 --> 00:01:38,100
sourced just very recently why do we

00:01:36,750 --> 00:01:41,070
write this the reason we wrote it was

00:01:38,100 --> 00:01:42,840
this look here you know that look that

00:01:41,070 --> 00:01:44,399
you people give you when you're digging

00:01:42,840 --> 00:01:47,130
yourself into a sort of conversational

00:01:44,399 --> 00:01:49,799
hole basically this is a look I got from

00:01:47,130 --> 00:01:52,110
my chief science officer when explaining

00:01:49,799 --> 00:01:55,770
how to do python packaging as of about

00:01:52,110 --> 00:01:57,840
two years ago so we were onboarding

00:01:55,770 --> 00:01:59,399
Python in a big pond shop basically as

00:01:57,840 --> 00:02:02,280
the main language for research as well

00:01:59,399 --> 00:02:03,960
as trading and explaining that we needed

00:02:02,280 --> 00:02:05,189
one tool to install this kind of package

00:02:03,960 --> 00:02:06,810
a different tool for that kind of

00:02:05,189 --> 00:02:09,509
package oh and this other thing to me an

00:02:06,810 --> 00:02:11,550
uninstall it wasn't very pretty so he

00:02:09,509 --> 00:02:12,930
basically just said please go and sort

00:02:11,550 --> 00:02:16,209
this out

00:02:12,930 --> 00:02:19,540
so what sort of problems do we have that

00:02:16,209 --> 00:02:21,069
we had to solve with this library and

00:02:19,540 --> 00:02:22,450
what were the goals of the project so we

00:02:21,069 --> 00:02:24,099
had lots of developers coming on board

00:02:22,450 --> 00:02:26,349
who are not necessarily new developers

00:02:24,099 --> 00:02:28,000
but need to python so a lot of Java guys

00:02:26,349 --> 00:02:31,720
that were coming in expecting something

00:02:28,000 --> 00:02:33,489
sort of like maven so we had to

00:02:31,720 --> 00:02:35,260
basically unify what was a pretty

00:02:33,489 --> 00:02:37,269
inconsistent command set for managing

00:02:35,260 --> 00:02:39,970
virtual environments creating projects

00:02:37,269 --> 00:02:41,379
documenting code that kind of stuff we

00:02:39,970 --> 00:02:43,269
also had to improve on improving the

00:02:41,379 --> 00:02:45,160
dependency resolver when you have lots

00:02:43,269 --> 00:02:46,629
of code and we need to be able to treat

00:02:45,160 --> 00:02:50,440
in-house package is different from

00:02:46,629 --> 00:02:52,510
external packages and so handle quite

00:02:50,440 --> 00:02:54,299
complex dependency graphs when you've

00:02:52,510 --> 00:02:57,280
got lots and lots and lots of packages

00:02:54,299 --> 00:02:59,109
and sort of weight different to normal

00:02:57,280 --> 00:03:00,879
Python shop workflows where we had

00:02:59,109 --> 00:03:03,609
internal releases we had researchers

00:03:00,879 --> 00:03:05,590
building trading code and technologists

00:03:03,609 --> 00:03:07,150
building code they have to release it

00:03:05,590 --> 00:03:08,560
you know gold standard and then more

00:03:07,150 --> 00:03:12,340
code was built on top of it so it's just

00:03:08,560 --> 00:03:14,440
kind of internal release process so a

00:03:12,340 --> 00:03:16,359
quick overview originally package lib

00:03:14,440 --> 00:03:17,980
was was three different packages to make

00:03:16,359 --> 00:03:19,299
it easier on the compliance team for

00:03:17,980 --> 00:03:22,239
getting it signed off i squish them into

00:03:19,299 --> 00:03:24,280
one I may actually split this up again

00:03:22,239 --> 00:03:26,530
because there it is somewhat monolithic

00:03:24,280 --> 00:03:28,599
at the moment but basically the main

00:03:26,530 --> 00:03:29,859
section is the package of code which is

00:03:28,599 --> 00:03:31,720
the tools for managing virtual

00:03:29,859 --> 00:03:33,220
environments managing sauce checkouts

00:03:31,720 --> 00:03:34,959
running tests building on your code

00:03:33,220 --> 00:03:38,079
uploading it to pi PI that kind of stuff

00:03:34,959 --> 00:03:42,130
is packaged lib testing which is a suite

00:03:38,079 --> 00:03:44,139
of testing utilities so this is testing

00:03:42,130 --> 00:03:46,239
utils a lot of pi dot test fixtures for

00:03:44,139 --> 00:03:49,299
working with services working with

00:03:46,239 --> 00:03:52,239
databases special stuff for working with

00:03:49,299 --> 00:03:54,099
web apps hooking up web drivers and lots

00:03:52,239 --> 00:03:55,540
of tools for play top test and also

00:03:54,099 --> 00:03:57,250
there's the batteries included project

00:03:55,540 --> 00:03:59,200
template which is as the pace group

00:03:57,250 --> 00:04:02,230
template for generating packages of been

00:03:59,200 --> 00:04:03,849
able packages now because we're working

00:04:02,230 --> 00:04:07,299
in an enclosed environment we got to

00:04:03,849 --> 00:04:09,879
take some shortcuts so currently as it's

00:04:07,299 --> 00:04:12,970
dance only works on linux only works on

00:04:09,879 --> 00:04:15,730
Python 26 and 27 and the VCS support has

00:04:12,970 --> 00:04:19,000
only been tested with subversion I know

00:04:15,730 --> 00:04:20,320
shock horror big banks I like that we

00:04:19,000 --> 00:04:22,750
also got to make some opinion ated

00:04:20,320 --> 00:04:24,520
decision so we only work with Python

00:04:22,750 --> 00:04:26,620
eggs and we don't work with source

00:04:24,520 --> 00:04:29,770
packages and we use pyro test

00:04:26,620 --> 00:04:32,199
beta testers awesome why do we use eggs

00:04:29,770 --> 00:04:34,449
basically because we wanted to have

00:04:32,199 --> 00:04:35,590
binary support when you've got lots of

00:04:34,449 --> 00:04:37,389
packages in a bill server that's

00:04:35,590 --> 00:04:38,800
continually burning away having to

00:04:37,389 --> 00:04:42,400
recompile things over and over again as

00:04:38,800 --> 00:04:44,139
a massive waste of time so python eggs

00:04:42,400 --> 00:04:46,120
is the way forward be that but don't

00:04:44,139 --> 00:04:50,470
worry now that it's open sourced we can

00:04:46,120 --> 00:04:51,310
basically fill in the gaps so explain a

00:04:50,470 --> 00:04:53,020
little bit about the architecture

00:04:51,310 --> 00:04:56,050
package of a very short and very

00:04:53,020 --> 00:04:57,850
simplified history of python packaging

00:04:56,050 --> 00:05:00,520
so in the beginning there was man and

00:04:57,850 --> 00:05:03,160
man gave his package info distutils and

00:05:00,520 --> 00:05:05,919
set up top i and all those things there

00:05:03,160 --> 00:05:07,750
man became a spacefaring race we got set

00:05:05,919 --> 00:05:09,940
up tools which gave us easy install in

00:05:07,750 --> 00:05:12,970
the egg file format so good dependency

00:05:09,940 --> 00:05:15,550
management and man went into the

00:05:12,970 --> 00:05:17,650
green-blooded Vulcans so set up stalls

00:05:15,550 --> 00:05:19,300
was fought distribute was born was bit

00:05:17,650 --> 00:05:21,789
more active development few less bugs

00:05:19,300 --> 00:05:23,699
which was good that Along Came them our

00:05:21,789 --> 00:05:26,350
Lord marauding Klingons which was pip

00:05:23,699 --> 00:05:28,240
which is the new new hot tool on the

00:05:26,350 --> 00:05:29,949
block I gave us a good API and the

00:05:28,240 --> 00:05:32,919
ability to uninstall packages which is

00:05:29,949 --> 00:05:35,530
always nice but don't forget the clever

00:05:32,919 --> 00:05:39,340
Romulans we've got ZD don't build out

00:05:35,530 --> 00:05:42,880
here you have a quite a good a penalty

00:05:39,340 --> 00:05:46,830
resolver really great build recipes so

00:05:42,880 --> 00:05:49,599
it is packaged they live kind of here so

00:05:46,830 --> 00:05:50,979
we basically picked the aspects of all

00:05:49,599 --> 00:05:54,900
of these tools that we wanted to use

00:05:50,979 --> 00:05:57,639
it's primarily based on distributes API

00:05:54,900 --> 00:06:01,240
and it sort of unites everyone into a

00:05:57,639 --> 00:06:04,360
grand Federation of Planets why didn't

00:06:01,240 --> 00:06:05,560
we use pip again like I said before pip

00:06:04,360 --> 00:06:07,300
at the time I we're doing this pip

00:06:05,560 --> 00:06:10,510
didn't support binary so it was kind of

00:06:07,300 --> 00:06:12,070
that was the start and the end of it if

00:06:10,510 --> 00:06:14,110
I was doing this a second time around I

00:06:12,070 --> 00:06:16,510
would have used pip and just forced it

00:06:14,110 --> 00:06:20,620
to use binaries or made changes because

00:06:16,510 --> 00:06:22,270
setuptools API is truly horrendous in

00:06:20,620 --> 00:06:25,090
the meantime setups awesome distribute

00:06:22,270 --> 00:06:27,190
have merged but this is after after

00:06:25,090 --> 00:06:29,949
package soup is built so that's nothing

00:06:27,190 --> 00:06:32,260
to deal with in the future okay some

00:06:29,949 --> 00:06:35,080
technical details now I'm going to go

00:06:32,260 --> 00:06:37,479
into things about the configuration so

00:06:35,080 --> 00:06:39,750
pack is live originally it was a whole

00:06:37,479 --> 00:06:41,280
bunch of hard coded internal

00:06:39,750 --> 00:06:42,870
configuration this has been ripped out

00:06:41,280 --> 00:06:46,080
and we've made a configuration system

00:06:42,870 --> 00:06:47,430
which uses standard ini format you need

00:06:46,080 --> 00:06:49,460
to do some stuff about your company

00:06:47,430 --> 00:06:51,720
things like your pi PI server address

00:06:49,460 --> 00:06:54,390
why would you just use the normal

00:06:51,720 --> 00:06:55,950
outside pi PI server well in a company

00:06:54,390 --> 00:06:57,390
it's good you don't necessarily want to

00:06:55,950 --> 00:06:58,950
release all your code to the internet so

00:06:57,390 --> 00:07:00,570
having an internal pi PI server is good

00:06:58,950 --> 00:07:02,220
there are lots of good implementations

00:07:00,570 --> 00:07:06,810
for this mr. crackles excellent def PI

00:07:02,220 --> 00:07:08,010
server is a good example of that I need

00:07:06,810 --> 00:07:09,930
to know things about how to identify

00:07:08,010 --> 00:07:12,390
your in-house packages like your name

00:07:09,930 --> 00:07:14,130
spaces things like Jenkins and Hudson

00:07:12,390 --> 00:07:17,040
servers test directory layouts all that

00:07:14,130 --> 00:07:19,200
kind of stuff it uses standard ini

00:07:17,040 --> 00:07:21,870
format as designated by the package of

00:07:19,200 --> 00:07:23,400
config environment variable so as you

00:07:21,870 --> 00:07:25,140
have different environments you can have

00:07:23,400 --> 00:07:26,760
a development environment CI environment

00:07:25,140 --> 00:07:29,220
your production environment you can meet

00:07:26,760 --> 00:07:30,900
your swap your configs around within the

00:07:29,220 --> 00:07:33,780
file itself it also does environment

00:07:30,900 --> 00:07:35,610
variable resolution so again as you swap

00:07:33,780 --> 00:07:38,490
your environments you can change the

00:07:35,610 --> 00:07:39,870
configuration of your system if you want

00:07:38,490 --> 00:07:41,640
to know what the config is at any given

00:07:39,870 --> 00:07:43,230
time there is a set up top by target

00:07:41,640 --> 00:07:45,360
called set up top I config which will

00:07:43,230 --> 00:07:46,320
print it out for you now I'm not going

00:07:45,360 --> 00:07:48,030
to go through all the individual

00:07:46,320 --> 00:07:49,229
settings here rather I'll point them out

00:07:48,030 --> 00:07:57,180
as they go through the features of the

00:07:49,229 --> 00:07:58,680
library okay so let's go water please

00:07:57,180 --> 00:08:02,070
tell me if I'm going speaking too fast

00:07:58,680 --> 00:08:05,580
by the way okay so I'm going to go on to

00:08:02,070 --> 00:08:07,320
the package configuration itself now one

00:08:05,580 --> 00:08:10,110
of the things that we didn't like about

00:08:07,320 --> 00:08:11,820
the standard packaging system was how

00:08:10,110 --> 00:08:13,860
all of the configuration was inside the

00:08:11,820 --> 00:08:16,410
Python file not so very good for

00:08:13,860 --> 00:08:19,200
downstream tools so we moved everything

00:08:16,410 --> 00:08:21,270
out into the setup dot CFG file in a

00:08:19,200 --> 00:08:23,430
metadata section and this is sort of

00:08:21,270 --> 00:08:24,450
looked up at runtime I was quite pleased

00:08:23,430 --> 00:08:26,040
that we actually came up with exactly

00:08:24,450 --> 00:08:29,280
the same format that was in dis utils to

00:08:26,040 --> 00:08:30,810
in quickly separate train of thought so

00:08:29,280 --> 00:08:32,520
yeah so this is quite good if you have

00:08:30,810 --> 00:08:35,880
things like release tools which need to

00:08:32,520 --> 00:08:40,080
pass and update your version numbers and

00:08:35,880 --> 00:08:41,400
whatnot for doing a release tool the

00:08:40,080 --> 00:08:43,339
opposite up slider this is that your

00:08:41,400 --> 00:08:45,750
setup the pie is now essentially empty

00:08:43,339 --> 00:08:47,580
so much like several tools you can

00:08:45,750 --> 00:08:50,370
import set up from package lib and run

00:08:47,580 --> 00:08:52,440
the setup method caveat to this of

00:08:50,370 --> 00:08:53,670
course is with C extensions if you've

00:08:52,440 --> 00:08:56,220
got c extensions in your pack

00:08:53,670 --> 00:08:57,390
you still have to define them in code it

00:08:56,220 --> 00:08:59,190
was slightly more trouble than it was

00:08:57,390 --> 00:09:00,780
worth to make an innie file format

00:08:59,190 --> 00:09:02,730
version of C extensions but if you want

00:09:00,780 --> 00:09:06,690
to do it feel free to send me a pull

00:09:02,730 --> 00:09:08,580
request on github okay so I'm going to

00:09:06,690 --> 00:09:11,820
look at package names and versions now

00:09:08,580 --> 00:09:13,920
so this little diagram shows a few of

00:09:11,820 --> 00:09:15,510
the various flavors of packages and what

00:09:13,920 --> 00:09:17,550
sort of version schemes they support in

00:09:15,510 --> 00:09:19,140
the kind of package the world so we've

00:09:17,550 --> 00:09:22,290
got in-house packages and we've got

00:09:19,140 --> 00:09:24,450
third party packages so third party

00:09:22,290 --> 00:09:26,690
packages only support released versions

00:09:24,450 --> 00:09:30,090
you shouldn't be using dev versions of

00:09:26,690 --> 00:09:32,490
third-party stuff your in-house packages

00:09:30,090 --> 00:09:34,290
can be either source source code

00:09:32,490 --> 00:09:36,540
checkouts development versions or

00:09:34,290 --> 00:09:39,210
release versions so it's all very pep

00:09:36,540 --> 00:09:40,260
386 compliant so here some examples of

00:09:39,210 --> 00:09:41,910
the sorts of version numbers you have

00:09:40,260 --> 00:09:43,260
source code doesn't really have a

00:09:41,910 --> 00:09:46,230
version number it's just whatever your

00:09:43,260 --> 00:09:48,030
current source code check these so how

00:09:46,230 --> 00:09:51,570
do we identify an in-house package for

00:09:48,030 --> 00:09:53,190
us a third party package okay so in your

00:09:51,570 --> 00:09:55,590
package they've got any file there's a

00:09:53,190 --> 00:09:57,240
section called namespaces now the zenifi

00:09:55,590 --> 00:09:58,860
friend says namespaces is good so this

00:09:57,240 --> 00:10:00,300
is how it's done it's basically a

00:09:58,860 --> 00:10:01,590
straight string comparison if your

00:10:00,300 --> 00:10:03,420
package name starts with any of the

00:10:01,590 --> 00:10:05,900
things in your name spaces section then

00:10:03,420 --> 00:10:08,220
it's an in-house package simple as that

00:10:05,900 --> 00:10:10,170
okay so next I'm going to talk about

00:10:08,220 --> 00:10:15,930
dependency resolution subject very dear

00:10:10,170 --> 00:10:17,670
to my heart so ostensibly when you pack

00:10:15,930 --> 00:10:18,960
as it provides a command called PI

00:10:17,670 --> 00:10:22,500
install which is kind of like easy

00:10:18,960 --> 00:10:24,170
install but by default it works it can

00:10:22,500 --> 00:10:26,400
work in either two modes release or

00:10:24,170 --> 00:10:28,890
development mode by default it works in

00:10:26,400 --> 00:10:31,920
release mode so you go PI install a

00:10:28,890 --> 00:10:33,990
package it's in release mode I install

00:10:31,920 --> 00:10:36,450
minus minus dev it's in development mode

00:10:33,990 --> 00:10:37,740
or set up top I develop also in

00:10:36,450 --> 00:10:41,820
development mode because you're

00:10:37,740 --> 00:10:44,130
obviously developing code when it's

00:10:41,820 --> 00:10:46,470
doing dependency resolution it has a

00:10:44,130 --> 00:10:48,660
backtracking resolver I'll go on to this

00:10:46,470 --> 00:10:50,310
a little bit later but it's to solve a

00:10:48,660 --> 00:10:51,720
rather tricky problem you have when you

00:10:50,310 --> 00:10:53,970
often have lots of packages and lots of

00:10:51,720 --> 00:10:56,700
different requirements another thing

00:10:53,970 --> 00:10:58,260
that it does is when you have a build

00:10:56,700 --> 00:11:00,030
target requirements for an example with

00:10:58,260 --> 00:11:01,560
say for example your buildings links to

00:11:00,030 --> 00:11:03,750
documentation using the set up top I

00:11:01,560 --> 00:11:05,600
build things target instead of having to

00:11:03,750 --> 00:11:07,529
have that installed before you run it

00:11:05,600 --> 00:11:08,970
all of that stuff is

00:11:07,529 --> 00:11:10,290
is sort of lazily loaded so if you go

00:11:08,970 --> 00:11:12,329
set it up I build Sphinx it'll then

00:11:10,290 --> 00:11:15,329
install sinks if you don't have it just

00:11:12,329 --> 00:11:16,879
a sort of a time-saving thing there okay

00:11:15,329 --> 00:11:18,749
so now some of the workflows in

00:11:16,879 --> 00:11:20,699
development mode so in development mode

00:11:18,749 --> 00:11:23,249
if you've got a source package it'll

00:11:20,699 --> 00:11:25,319
leave the loan basically source packages

00:11:23,249 --> 00:11:27,480
are sort of sacrosanct in the whole kind

00:11:25,319 --> 00:11:29,009
of package in version world it sort of

00:11:27,480 --> 00:11:30,180
leaves them alone assumes you've checked

00:11:29,009 --> 00:11:32,699
out a source packages you know what

00:11:30,180 --> 00:11:34,079
you're doing in-house packages it will

00:11:32,699 --> 00:11:35,970
go to the latest development version

00:11:34,079 --> 00:11:37,529
third party packages they'll stay on the

00:11:35,970 --> 00:11:40,019
release diversion so like I said before

00:11:37,529 --> 00:11:43,470
if its third party it sticks on release

00:11:40,019 --> 00:11:44,910
all the time you can always override

00:11:43,470 --> 00:11:46,980
this behavior by the way if you pin

00:11:44,910 --> 00:11:48,480
stuff in your as a virgin requirement a

00:11:46,980 --> 00:11:50,850
specific you know say if you wanted a

00:11:48,480 --> 00:11:53,399
dev version of something third party you

00:11:50,850 --> 00:11:54,980
go that version equals equals that

00:11:53,399 --> 00:11:57,720
development version that'll be fine

00:11:54,980 --> 00:12:00,389
women release mode nothing much changes

00:11:57,720 --> 00:12:02,040
source code remains being left alone and

00:12:00,389 --> 00:12:05,249
in-house and third party packages now

00:12:02,040 --> 00:12:07,199
always use the latest release version ok

00:12:05,249 --> 00:12:12,089
so the workflow of the pie install

00:12:07,199 --> 00:12:14,009
command itself as expected if it's not

00:12:12,089 --> 00:12:17,069
installed you'll get the latest version

00:12:14,009 --> 00:12:18,629
and then it'll repeat the process for

00:12:17,069 --> 00:12:20,399
all of its dependencies if it is

00:12:18,629 --> 00:12:22,019
installed and it's a source code check

00:12:20,399 --> 00:12:23,790
out it'll update your source code for

00:12:22,019 --> 00:12:26,399
you and then it will repeat the process

00:12:23,790 --> 00:12:29,100
for all of your dependencies if it's an

00:12:26,399 --> 00:12:30,569
egg file it'll throw away their get the

00:12:29,100 --> 00:12:32,970
latest version and repeat for all the

00:12:30,569 --> 00:12:34,350
dependencies for all of these stages at

00:12:32,970 --> 00:12:35,939
once it's finished it'll clean up your

00:12:34,350 --> 00:12:39,420
site packages directory so what this

00:12:35,939 --> 00:12:40,920
means basically is that it'll actually

00:12:39,420 --> 00:12:43,350
if you just eggs in there that you're

00:12:40,920 --> 00:12:44,699
not using it will delete them now why

00:12:43,350 --> 00:12:48,540
would we do this because disk is cheap

00:12:44,699 --> 00:12:51,139
these days well yes but when you've got

00:12:48,540 --> 00:12:53,339
really big file system lots of uses them

00:12:51,139 --> 00:12:55,939
file systems can be quite expensive to

00:12:53,339 --> 00:12:58,259
back up off site in big companies and

00:12:55,939 --> 00:13:00,809
lots of redundant copies of little files

00:12:58,259 --> 00:13:01,980
are really not good and I scored an

00:13:00,809 --> 00:13:05,309
awful lot of beer with the Linux team

00:13:01,980 --> 00:13:07,350
when we implemented us so yeah basically

00:13:05,309 --> 00:13:08,519
I install does different things

00:13:07,350 --> 00:13:10,259
depending on the state of your

00:13:08,519 --> 00:13:12,019
environment to sort of simplify the

00:13:10,259 --> 00:13:14,699
command set that people have to learn

00:13:12,019 --> 00:13:17,519
okay back onto dependency management so

00:13:14,699 --> 00:13:19,440
here's a sample dependency graph they're

00:13:17,519 --> 00:13:20,850
going to used to explain

00:13:19,440 --> 00:13:23,940
one of the resolution problems that it

00:13:20,850 --> 00:13:26,670
does so the arrows here denote I depend

00:13:23,940 --> 00:13:29,160
on you and the little code snippets are

00:13:26,670 --> 00:13:32,100
the setup that CFG sections which denote

00:13:29,160 --> 00:13:34,470
in the requirements of what it is so the

00:13:32,100 --> 00:13:36,720
ones at the bottom he installs he

00:13:34,470 --> 00:13:38,970
requires acne bar and acne bears with no

00:13:36,720 --> 00:13:42,150
particular version and so on and so

00:13:38,970 --> 00:13:43,740
forth acme dot bears up here requires a

00:13:42,150 --> 00:13:46,410
specific version of ecuador clarks the

00:13:43,740 --> 00:13:48,480
one on the left doesn't so before when i

00:13:46,410 --> 00:13:51,150
mentioned the diamond problem of

00:13:48,480 --> 00:13:54,240
dependency resolution that's this one

00:13:51,150 --> 00:13:55,380
here so when dependency rule resolvers

00:13:54,240 --> 00:13:57,450
work they have to work their way around

00:13:55,380 --> 00:13:59,610
a graph of requirements not packages

00:13:57,450 --> 00:14:01,830
requirements a requirement is this bit

00:13:59,610 --> 00:14:03,780
here where it says i require this

00:14:01,830 --> 00:14:06,870
package at this version or not or any

00:14:03,780 --> 00:14:09,030
not any particular version so the

00:14:06,870 --> 00:14:10,920
diamond problem here comes in when it

00:14:09,030 --> 00:14:13,710
moves around the left-hand part of the

00:14:10,920 --> 00:14:15,960
graph first so for example okay it gets

00:14:13,710 --> 00:14:18,630
ahmed foo and then it goes to acme bar

00:14:15,960 --> 00:14:20,100
and then it says i just want a version

00:14:18,630 --> 00:14:21,870
of ahmed clucks i don't care which one

00:14:20,100 --> 00:14:24,270
it is so it gets latest one which in

00:14:21,870 --> 00:14:27,030
this case is 1.3 and then it picks up

00:14:24,270 --> 00:14:28,350
its dependency acne not Waldo okay we've

00:14:27,030 --> 00:14:30,720
done with that path around the other

00:14:28,350 --> 00:14:32,580
side acne not bears I need a cleanup

00:14:30,720 --> 00:14:34,200
collector version 1.2 oh we've already

00:14:32,580 --> 00:14:38,070
got one point three that's a conflict

00:14:34,200 --> 00:14:39,300
stop now that's not a great solution and

00:14:38,070 --> 00:14:42,350
that's currently what easy install this

00:14:39,300 --> 00:14:42,350
release is what it did two years ago

00:14:43,010 --> 00:14:49,830
because at the end of the day 1.3 came

00:14:47,370 --> 00:14:53,190
from acne bar which didn't actually care

00:14:49,830 --> 00:14:54,870
which version it was so what package

00:14:53,190 --> 00:14:57,690
live does is actually backtracks it goes

00:14:54,870 --> 00:14:59,880
back and says well hang on a minute my

00:14:57,690 --> 00:15:01,200
requirement is more specific than your

00:14:59,880 --> 00:15:03,240
requirement so I'm more important than

00:15:01,200 --> 00:15:05,850
you so it goes back and it throws it up

00:15:03,240 --> 00:15:07,589
throws away unwinds that part of the

00:15:05,850 --> 00:15:09,660
dependency resolution so it throws away

00:15:07,589 --> 00:15:11,820
acme not collect some point through and

00:15:09,660 --> 00:15:13,770
it throws away ecuador although 3.0 and

00:15:11,820 --> 00:15:15,690
it starts back again at this side so

00:15:13,770 --> 00:15:17,280
picks up the slightly older version and

00:15:15,690 --> 00:15:21,180
a slightly older version of its

00:15:17,280 --> 00:15:23,580
dependency it does all of this using cut

00:15:21,180 --> 00:15:26,130
what's called requirement specificity

00:15:23,580 --> 00:15:29,280
this yes specificity I always have to

00:15:26,130 --> 00:15:30,450
say that like three times so a pinned

00:15:29,280 --> 00:15:32,610
requirement at the bottom is more

00:15:30,450 --> 00:15:34,260
specific than a version range which

00:15:32,610 --> 00:15:37,380
turn is more specific than an pintura

00:15:34,260 --> 00:15:39,420
climate and that's how it orders the

00:15:37,380 --> 00:15:41,880
basically the different requirements and

00:15:39,420 --> 00:15:44,040
a place them off against each other so

00:15:41,880 --> 00:15:46,260
why all the bother with this this is all

00:15:44,040 --> 00:15:48,209
quite complicated and stuff basically if

00:15:46,260 --> 00:15:49,620
you make it really easy to people to

00:15:48,209 --> 00:15:51,240
make packages in your organization

00:15:49,620 --> 00:15:53,579
they're going to make lots of them

00:15:51,240 --> 00:15:54,959
they're going to make tons of them

00:15:53,579 --> 00:15:56,550
they'll be packages with one line in

00:15:54,959 --> 00:16:00,870
them and that's still going to be a good

00:15:56,550 --> 00:16:02,310
thing so to help help with all of these

00:16:00,870 --> 00:16:04,170
package package management things

00:16:02,310 --> 00:16:06,660
there's a command called pydev graph

00:16:04,170 --> 00:16:10,529
which comes along which basically draws

00:16:06,660 --> 00:16:13,140
your dependency graph users graph is by

00:16:10,529 --> 00:16:15,060
default it also supports ascii art if

00:16:13,140 --> 00:16:18,240
you've got one of the pill dependencies

00:16:15,060 --> 00:16:20,010
install that's quite useful sort of

00:16:18,240 --> 00:16:25,950
color codes for in-house versus external

00:16:20,010 --> 00:16:27,839
as well okay another little feature so

00:16:25,950 --> 00:16:30,029
if you're on the holodeck your reality

00:16:27,839 --> 00:16:31,170
is slightly different from normal you

00:16:30,029 --> 00:16:33,750
might not have all of the freedoms that

00:16:31,170 --> 00:16:35,730
you normally do in regular reality what

00:16:33,750 --> 00:16:38,339
I'm trying to get to here is again back

00:16:35,730 --> 00:16:39,839
with the big file system thing having

00:16:38,339 --> 00:16:41,880
lots of redundant copies of things is

00:16:39,839 --> 00:16:44,130
not a very good idea so when we are

00:16:41,880 --> 00:16:45,480
developing in normal open source home

00:16:44,130 --> 00:16:46,920
we've got lots of virtual environment in

00:16:45,480 --> 00:16:48,209
every virtual environment has a copy of

00:16:46,920 --> 00:16:49,560
everything which is which is really

00:16:48,209 --> 00:16:51,420
useful but having lots of copies of

00:16:49,560 --> 00:16:54,060
things is is not very fun for the big

00:16:51,420 --> 00:16:57,420
NFS doesn't doesn't basically perform

00:16:54,060 --> 00:16:58,920
very nicely at all so in your packages

00:16:57,420 --> 00:17:01,920
if do I know you can define an installer

00:16:58,920 --> 00:17:04,370
search path what this does is allows you

00:17:01,920 --> 00:17:07,380
to put unpacked versions of egg files

00:17:04,370 --> 00:17:09,000
which at install time instead of

00:17:07,380 --> 00:17:10,620
actually copying them into your site

00:17:09,000 --> 00:17:12,089
packages it'll just egg link them much

00:17:10,620 --> 00:17:14,910
like you does when you do set up top I

00:17:12,089 --> 00:17:16,290
develop so just exactly the same as it

00:17:14,910 --> 00:17:18,329
does with that it creates an egg link

00:17:16,290 --> 00:17:22,079
onto these directories here and then

00:17:18,329 --> 00:17:24,230
runs the post and small steps and that's

00:17:22,079 --> 00:17:26,880
another another disk space saver as well

00:17:24,230 --> 00:17:28,710
okay some more features there's a little

00:17:26,880 --> 00:17:31,200
command called PI checkout which allows

00:17:28,710 --> 00:17:33,120
you to check out files by name this is

00:17:31,200 --> 00:17:34,350
useful if you've got about four or five

00:17:33,120 --> 00:17:35,880
different repositories in your

00:17:34,350 --> 00:17:39,299
organization and people can't remember

00:17:35,880 --> 00:17:40,890
where your code is the way this works is

00:17:39,299 --> 00:17:42,840
it sort of shanghai's part of the

00:17:40,890 --> 00:17:45,840
package metadata in this case the home

00:17:42,840 --> 00:17:46,520
page home page section which points to

00:17:45,840 --> 00:17:48,440
your

00:17:46,520 --> 00:17:50,950
the address in your virtual Couture

00:17:48,440 --> 00:17:53,090
repository for that particular package

00:17:50,950 --> 00:17:54,860
this gets written into that bit of

00:17:53,090 --> 00:17:56,840
metadata at runtime when the package is

00:17:54,860 --> 00:17:58,250
built it looks at your current source

00:17:56,840 --> 00:18:00,020
code check out it figures out where in

00:17:58,250 --> 00:18:01,340
the repositories and writes it into the

00:18:00,020 --> 00:18:03,830
package metadata that gets built into

00:18:01,340 --> 00:18:06,200
the egg when you run PI check out some

00:18:03,830 --> 00:18:09,110
package it queries your pi PI server and

00:18:06,200 --> 00:18:10,580
then finds it checks out the code in

00:18:09,110 --> 00:18:11,810
your current location and sets it up in

00:18:10,580 --> 00:18:14,720
the environment using set up top I

00:18:11,810 --> 00:18:18,860
develop that's quite a nice little hat

00:18:14,720 --> 00:18:21,830
time saver too ok so the plat tool not

00:18:18,860 --> 00:18:22,970
greatly named I must say when you've got

00:18:21,830 --> 00:18:24,380
lots and lots and lots and lots of

00:18:22,970 --> 00:18:26,600
packages and your teams have been making

00:18:24,380 --> 00:18:27,740
lots of things it's quite nice sometimes

00:18:26,600 --> 00:18:30,050
to be able to bundle them all together

00:18:27,740 --> 00:18:32,630
so this this came from the idea of

00:18:30,050 --> 00:18:34,130
working with I pie then numpy they had

00:18:32,630 --> 00:18:35,510
this really nice concept called pylab

00:18:34,130 --> 00:18:37,070
which is the sort of i phi therm

00:18:35,510 --> 00:18:39,830
matplotlib an umpire little working

00:18:37,070 --> 00:18:41,510
group so when you've got lots of

00:18:39,830 --> 00:18:42,980
packages and you want to sort of bundle

00:18:41,510 --> 00:18:46,880
them all together much like the Borg

00:18:42,980 --> 00:18:48,410
they simulate them you can you can

00:18:46,880 --> 00:18:49,880
create these these platform packages

00:18:48,410 --> 00:18:51,170
technically they're not much different

00:18:49,880 --> 00:18:52,850
from just another package which has

00:18:51,170 --> 00:18:55,730
dependencies on another one there's no

00:18:52,850 --> 00:18:56,960
real code in it but it's quite we found

00:18:55,730 --> 00:18:58,250
it quite useful if you have a team of

00:18:56,960 --> 00:18:59,960
people who are working on a particular

00:18:58,250 --> 00:19:01,720
subject material and they've got a set

00:18:59,960 --> 00:19:03,680
of packages which make up their

00:19:01,720 --> 00:19:05,210
development world and you've got someone

00:19:03,680 --> 00:19:06,770
moves into that team they want to easily

00:19:05,210 --> 00:19:08,510
be able to set themselves up with all

00:19:06,770 --> 00:19:10,730
those packages with with the minimum of

00:19:08,510 --> 00:19:12,710
fuss so we came up with these these

00:19:10,730 --> 00:19:14,090
platform packages there's a little tool

00:19:12,710 --> 00:19:17,510
that comes along with the thing called

00:19:14,090 --> 00:19:20,720
plat you can which lists and manages

00:19:17,510 --> 00:19:23,330
these these platforms basically again

00:19:20,720 --> 00:19:25,340
it's configured in a package of the ini

00:19:23,330 --> 00:19:26,960
you just list the packages in your ini

00:19:25,340 --> 00:19:30,140
file in that and that's how it works it

00:19:26,960 --> 00:19:32,930
out so this little tool corp lat it's

00:19:30,140 --> 00:19:34,250
loosely based on the VCS command line so

00:19:32,930 --> 00:19:36,290
you go plat info and it tells you what

00:19:34,250 --> 00:19:38,480
your platform packages are and any other

00:19:36,290 --> 00:19:40,970
source checkouts you've got there's a

00:19:38,480 --> 00:19:42,830
quick summary of the help file so you

00:19:40,970 --> 00:19:45,320
can do plat use and then you use that

00:19:42,830 --> 00:19:47,870
platform there's plat up update your

00:19:45,320 --> 00:19:52,280
platform plat info plaque versions what

00:19:47,870 --> 00:19:54,040
are the versions etc etc etc ok so let's

00:19:52,280 --> 00:19:56,900
move on to tests because we like tests

00:19:54,040 --> 00:19:58,820
so this is set up top by target call

00:19:56,900 --> 00:20:01,670
python set up top i test what this does

00:19:58,820 --> 00:20:03,170
is a kicks off quite test under the set

00:20:01,670 --> 00:20:05,300
up top I process or in a subprocess

00:20:03,170 --> 00:20:07,610
depending on how you want to run it with

00:20:05,300 --> 00:20:11,180
a few sensible defaults you know verbose

00:20:07,610 --> 00:20:12,710
output and code coverage if you haven't

00:20:11,180 --> 00:20:14,630
got your test stuff installed it'll go

00:20:12,710 --> 00:20:18,410
and get it install the test requirements

00:20:14,630 --> 00:20:20,750
and then run your tests test discovery

00:20:18,410 --> 00:20:23,090
works much the same as usual so you can

00:20:20,750 --> 00:20:24,440
have different layouts so some people

00:20:23,090 --> 00:20:25,910
like to have the test next to their code

00:20:24,440 --> 00:20:28,730
some people like to have their test in a

00:20:25,910 --> 00:20:30,500
separate directory it will work with

00:20:28,730 --> 00:20:32,450
either you can change the name of the

00:20:30,500 --> 00:20:35,450
directories where the tests get found

00:20:32,450 --> 00:20:36,770
from your package of the ini file you'll

00:20:35,450 --> 00:20:38,630
notice there's some sub directories here

00:20:36,770 --> 00:20:40,640
in an integration this allows you to

00:20:38,630 --> 00:20:42,470
sort of subdivide your tests in two

00:20:40,640 --> 00:20:45,200
different components so unit has to go

00:20:42,470 --> 00:20:47,090
here integration tests go there and

00:20:45,200 --> 00:20:49,520
there are command-line options to kick

00:20:47,090 --> 00:20:51,620
off just the unit tests or just

00:20:49,520 --> 00:20:54,500
integration tests there's once for

00:20:51,620 --> 00:20:56,300
regression tests as well there's also a

00:20:54,500 --> 00:20:58,910
command line target for running just the

00:20:56,300 --> 00:21:00,290
doc test another nicety of this is when

00:20:58,910 --> 00:21:02,450
it's running under Jenkins or Hudkins

00:21:00,290 --> 00:21:04,280
Hudson it'll detect this and change the

00:21:02,450 --> 00:21:06,770
output so instead of giving you terminal

00:21:04,280 --> 00:21:12,220
output it'll generate the XML files for

00:21:06,770 --> 00:21:16,520
coverage j unit and pilots so this works

00:21:12,220 --> 00:21:17,960
when you're you're running a des gens

00:21:16,520 --> 00:21:21,350
with like the violations plugin and

00:21:17,960 --> 00:21:23,990
those sorts of things another bit of

00:21:21,350 --> 00:21:26,030
test nicety is this little command here

00:21:23,990 --> 00:21:27,740
XG cough txt now I didn't even know you

00:21:26,030 --> 00:21:30,380
could do this until one of the clever

00:21:27,740 --> 00:21:32,150
guys at the company where we've

00:21:30,380 --> 00:21:33,890
developed this basically this allows you

00:21:32,150 --> 00:21:37,670
to get code coverage on your C

00:21:33,890 --> 00:21:40,160
extensions this is absolutely awesome I

00:21:37,670 --> 00:21:42,040
don't even know this was possible so

00:21:40,160 --> 00:21:45,200
kicks off this project called G cough r

00:21:42,040 --> 00:21:47,600
which does lots of clever stuff and

00:21:45,200 --> 00:21:51,860
basically allows you to get Co coverage

00:21:47,600 --> 00:21:55,760
on CC extensions very very cool ok

00:21:51,860 --> 00:21:58,310
moving along project templates so

00:21:55,760 --> 00:21:59,690
package lib needs to have a few little

00:21:58,310 --> 00:22:02,120
bits and pieces in place for projects to

00:21:59,690 --> 00:22:03,860
work with it so there's a template

00:22:02,120 --> 00:22:04,640
called pi make project you give it a

00:22:03,860 --> 00:22:06,170
name

00:22:04,640 --> 00:22:08,030
it'll ask you the usual questions and

00:22:06,170 --> 00:22:09,560
spit out a project for you this is just

00:22:08,030 --> 00:22:12,050
a paste project so there's nothing

00:22:09,560 --> 00:22:14,000
really special here although it does

00:22:12,050 --> 00:22:16,070
have one nice little feature in that it

00:22:14,000 --> 00:22:17,660
supports multi level namespaces so this

00:22:16,070 --> 00:22:21,290
is the sort of thing it'll create it'll

00:22:17,660 --> 00:22:24,200
create a namespace package for you so if

00:22:21,290 --> 00:22:26,750
you if you create a package say primate

00:22:24,200 --> 00:22:28,160
project adobe CD it'll create all the

00:22:26,750 --> 00:22:30,080
nested directories for you each as a

00:22:28,160 --> 00:22:32,510
namespace package and put all the files

00:22:30,080 --> 00:22:35,840
in the correct place gives you a few

00:22:32,510 --> 00:22:39,230
sample tests some example code that kind

00:22:35,840 --> 00:22:41,240
of stuff okay so once you've got your

00:22:39,230 --> 00:22:42,350
project and you you've been working on

00:22:41,240 --> 00:22:45,440
it for a while you want to write some

00:22:42,350 --> 00:22:47,630
documentation so we have some tools for

00:22:45,440 --> 00:22:50,060
that too so this uses Fink's of course

00:22:47,630 --> 00:22:52,670
and it's driven from the set up top I

00:22:50,060 --> 00:22:54,920
build things target so you run set up

00:22:52,670 --> 00:22:57,610
top I build Sphinx and it builds your

00:22:54,920 --> 00:23:00,140
cut it builds your documentation and

00:22:57,610 --> 00:23:03,800
runs the autodoc and run some doc tests

00:23:00,140 --> 00:23:06,370
as well now this is slightly different

00:23:03,800 --> 00:23:08,510
from standard Sphinx in that it combines

00:23:06,370 --> 00:23:11,060
API documentation and standalone

00:23:08,510 --> 00:23:12,770
documentation in the same run so the

00:23:11,060 --> 00:23:15,650
first part of it is it runs an auto

00:23:12,770 --> 00:23:17,420
Doc's all of your API into an autodoc

00:23:15,650 --> 00:23:19,310
things to it generates little snippets

00:23:17,420 --> 00:23:22,840
it syncs needs to to auto doc your

00:23:19,310 --> 00:23:24,710
modules and your your class files and

00:23:22,840 --> 00:23:26,180
then it then it will build the

00:23:24,710 --> 00:23:28,460
standalone documentation things like

00:23:26,180 --> 00:23:31,100
recipes and you know user guides and

00:23:28,460 --> 00:23:32,600
whatnot it skips anything starting with

00:23:31,100 --> 00:23:33,710
an underscore so if you've got private

00:23:32,600 --> 00:23:34,880
files you just put an underscore in

00:23:33,710 --> 00:23:37,760
front of them and i'll just be dropped

00:23:34,880 --> 00:23:40,070
from the other doc documentation it

00:23:37,760 --> 00:23:42,740
generates this is just a sample at the

00:23:40,070 --> 00:23:44,270
moment of the current theme one thing we

00:23:42,740 --> 00:23:45,950
did with this though is because we do a

00:23:44,270 --> 00:23:48,050
lot of working with vampire is we stole

00:23:45,950 --> 00:23:49,760
their documentation there doc string

00:23:48,050 --> 00:23:51,560
format they have quite a nice little

00:23:49,760 --> 00:23:53,480
module called vamp I dock which is

00:23:51,560 --> 00:23:54,920
integrated into this as well so that's

00:23:53,480 --> 00:23:58,190
an example of what it looks like where

00:23:54,920 --> 00:24:00,440
you get nice views on parameters return

00:23:58,190 --> 00:24:01,880
types examples that kind of stuff the

00:24:00,440 --> 00:24:05,720
doc string format itself looks a bit

00:24:01,880 --> 00:24:08,090
like this so it is quite verbose which I

00:24:05,720 --> 00:24:09,680
agree but this is the it's also quite

00:24:08,090 --> 00:24:11,300
nice if people are working with ideas

00:24:09,680 --> 00:24:13,130
you've got researchers and they do the

00:24:11,300 --> 00:24:14,600
current sort of mouse over a function

00:24:13,130 --> 00:24:16,370
what does the docs drink for this it

00:24:14,600 --> 00:24:18,230
means that your your doc string is

00:24:16,370 --> 00:24:19,700
actually nicely readable as well

00:24:18,230 --> 00:24:21,410
and if you've got nice IDs that read

00:24:19,700 --> 00:24:26,210
irst it will render it to HTML inside

00:24:21,410 --> 00:24:28,549
the IDE also quite nice so yeah and it

00:24:26,210 --> 00:24:31,490
also renders too nice a nice HTML the

00:24:28,549 --> 00:24:33,140
actual format of this is in the standard

00:24:31,490 --> 00:24:34,940
example code that comes from PI make

00:24:33,140 --> 00:24:39,290
project and there's lots of docs online

00:24:34,940 --> 00:24:41,150
there okay so moving along build a

00:24:39,290 --> 00:24:42,860
deploy tool so it comes with a few few

00:24:41,150 --> 00:24:44,660
niceties for this as well you can run

00:24:42,860 --> 00:24:46,250
set up the pie Jenkins and it'll go and

00:24:44,660 --> 00:24:49,910
create a build for this project on your

00:24:46,250 --> 00:24:52,309
Jenkins server so it looks up the VCS

00:24:49,910 --> 00:24:54,650
address much like much liked I check out

00:24:52,309 --> 00:24:56,900
and the Jenkins URL that's it in your

00:24:54,650 --> 00:24:59,270
package of the ini will be used to go

00:24:56,900 --> 00:25:04,280
and either create or update a job on

00:24:59,270 --> 00:25:07,429
there it uses a set of five minutes

00:25:04,280 --> 00:25:09,290
thank you uses a set of send it to the

00:25:07,429 --> 00:25:11,960
modules use curvature for code coverage

00:25:09,290 --> 00:25:17,480
X unit for tests test reporting and the

00:25:11,960 --> 00:25:19,220
violations plugin for code quality it

00:25:17,480 --> 00:25:21,410
just runs to the standard set of set up

00:25:19,220 --> 00:25:26,000
top I develop test build stinks and

00:25:21,410 --> 00:25:28,490
upload steps okay so what else we got

00:25:26,000 --> 00:25:30,250
this set up to play deploy which given a

00:25:28,490 --> 00:25:32,450
path in your package subdue I file

00:25:30,250 --> 00:25:34,640
creates versioned virtual environments

00:25:32,450 --> 00:25:37,090
so you built a thing you go set up the

00:25:34,640 --> 00:25:38,929
play deploy and it will create a

00:25:37,090 --> 00:25:41,120
whatever the version number that is

00:25:38,929 --> 00:25:42,500
it'll create a directory a virtual

00:25:41,120 --> 00:25:44,480
environment that and install the package

00:25:42,500 --> 00:25:45,890
into that and all of its dependencies it

00:25:44,480 --> 00:25:47,090
also maintains a current fling so

00:25:45,890 --> 00:25:49,070
whichever one was the latest when you

00:25:47,090 --> 00:25:52,720
installed it will move that but move

00:25:49,070 --> 00:25:55,220
that link along it'll also similar Kenny

00:25:52,720 --> 00:25:58,640
console scripts into a bin directory if

00:25:55,220 --> 00:26:01,790
you so desire ok so some of the more

00:25:58,640 --> 00:26:05,690
experimental features there's set up top

00:26:01,790 --> 00:26:07,820
I test egg what this does is it

00:26:05,690 --> 00:26:10,940
generates an egg from your package that

00:26:07,820 --> 00:26:12,770
contains only test code so some people

00:26:10,940 --> 00:26:14,510
like don't like deploying the test code

00:26:12,770 --> 00:26:15,890
along with their production code I went

00:26:14,510 --> 00:26:17,710
i justjust want production code on

00:26:15,890 --> 00:26:21,890
production no no test code none of that

00:26:17,710 --> 00:26:23,450
so what it does is it basically it does

00:26:21,890 --> 00:26:25,370
the equivalent of running set up top by

00:26:23,450 --> 00:26:27,980
all of the code that is required to do

00:26:25,370 --> 00:26:29,780
what was equivalently set up top py test

00:26:27,980 --> 00:26:30,690
including the configuration build it

00:26:29,780 --> 00:26:33,120
into an egg

00:26:30,690 --> 00:26:35,430
and gives you a little command line hook

00:26:33,120 --> 00:26:37,380
called run tests so you create the test

00:26:35,430 --> 00:26:39,660
egg and it'll spit it out and then you

00:26:37,380 --> 00:26:41,460
install that at any point later in time

00:26:39,660 --> 00:26:43,650
you can then install that testing run

00:26:41,460 --> 00:26:45,450
setup run run tests and the name of the

00:26:43,650 --> 00:26:47,430
package and it will do exactly the same

00:26:45,450 --> 00:26:48,750
thing as it would have had you run setup

00:26:47,430 --> 00:26:50,940
to buy tests on the source code check

00:26:48,750 --> 00:26:54,240
out now why would you do this crazy

00:26:50,940 --> 00:26:56,640
thing if you have a hotfix to a

00:26:54,240 --> 00:26:58,560
production production store it's nice to

00:26:56,640 --> 00:26:59,970
be able to recreate what the developing

00:26:58,560 --> 00:27:01,860
of raiment was originally without having

00:26:59,970 --> 00:27:04,140
to go back to source code check out for

00:27:01,860 --> 00:27:06,270
everything again it slightly

00:27:04,140 --> 00:27:09,420
experimental another slightly

00:27:06,270 --> 00:27:11,910
experimental thing is the ability to

00:27:09,420 --> 00:27:16,080
generate new development versions on the

00:27:11,910 --> 00:27:17,430
fly so if you the egg info set up top I

00:27:16,080 --> 00:27:19,530
built target is the thing that manages

00:27:17,430 --> 00:27:20,880
package metadata there's an option to it

00:27:19,530 --> 00:27:22,380
called minus minus new build and what

00:27:20,880 --> 00:27:24,450
this will do is it will do the

00:27:22,380 --> 00:27:26,520
equivalent of pip freeze and then then

00:27:24,450 --> 00:27:29,940
bake that into the into the requirements

00:27:26,520 --> 00:27:33,960
of that egg so it sort of freezes all of

00:27:29,940 --> 00:27:35,370
the requirements at runtime and then it

00:27:33,960 --> 00:27:36,570
queries your pi PI server and figures

00:27:35,370 --> 00:27:38,640
out what's the next version of this

00:27:36,570 --> 00:27:40,290
development egg so what you can do is

00:27:38,640 --> 00:27:43,620
you can you set up to play egg info-

00:27:40,290 --> 00:27:45,810
minus new build on every of your your CI

00:27:43,620 --> 00:27:46,980
server builds and each each and every

00:27:45,810 --> 00:27:49,110
one of them will be kind of linked to

00:27:46,980 --> 00:27:50,760
each other and then you kind of

00:27:49,110 --> 00:27:52,200
guaranteed that all of these things are

00:27:50,760 --> 00:27:53,340
passed all of the tests and in a

00:27:52,200 --> 00:27:54,600
production release you don't have to

00:27:53,340 --> 00:27:56,160
test anything again you just turn that

00:27:54,600 --> 00:27:58,380
development egg into production one and

00:27:56,160 --> 00:28:03,090
then you're done again slightly

00:27:58,380 --> 00:28:05,130
experimental okay so packaged up testing

00:28:03,090 --> 00:28:08,550
now I sort of hold a little bit of a

00:28:05,130 --> 00:28:09,780
white lie in the in the talk Barry for

00:28:08,550 --> 00:28:11,010
this is that I'd be demonstrating some

00:28:09,780 --> 00:28:13,680
of this stuff unfortunately in my code

00:28:11,010 --> 00:28:15,360
with my talk was slightly shortened from

00:28:13,680 --> 00:28:17,430
my original plan so I'm just going to

00:28:15,360 --> 00:28:20,010
have to give it a summary here so pakka

00:28:17,430 --> 00:28:22,710
saved our testing has a bunch of quite

00:28:20,010 --> 00:28:24,720
useful tools it has contacts managers

00:28:22,710 --> 00:28:26,940
and also pi dot test fixtures for

00:28:24,720 --> 00:28:28,650
managing temporary directories coding

00:28:26,940 --> 00:28:31,050
virtual environments and indeed the

00:28:28,650 --> 00:28:32,520
entire packages themselves one of my

00:28:31,050 --> 00:28:36,060
favorite features on this is actually

00:28:32,520 --> 00:28:38,520
the the server runners so what this does

00:28:36,060 --> 00:28:40,650
is allows you to just basically add a

00:28:38,520 --> 00:28:42,870
title test fixture or fun card into your

00:28:40,650 --> 00:28:44,260
test which will start ups which will

00:28:42,870 --> 00:28:45,940
start up a server

00:28:44,260 --> 00:28:47,590
give you a handle to it allow you to do

00:28:45,940 --> 00:28:49,600
all your stuff on it and then when the

00:28:47,590 --> 00:28:52,660
test is finished or when the fixture has

00:28:49,600 --> 00:28:54,700
expired it's its scope it will then go

00:28:52,660 --> 00:28:56,590
away again they have sort of a save

00:28:54,700 --> 00:28:59,230
restore and tear down hooks into them

00:28:56,590 --> 00:29:01,480
and it's implementations for Redis

00:28:59,230 --> 00:29:03,070
Jenkins and pyramid server

00:29:01,480 --> 00:29:05,230
implementations so if your packages a

00:29:03,070 --> 00:29:07,120
pyramid server setup within package lib

00:29:05,230 --> 00:29:09,370
it'll it'll allow you to basically

00:29:07,120 --> 00:29:12,100
create run your server within the test

00:29:09,370 --> 00:29:14,010
and give you a handle to it there's

00:29:12,100 --> 00:29:16,180
fixtures also for the selenium webdriver

00:29:14,010 --> 00:29:17,380
which talk to the pyramid server

00:29:16,180 --> 00:29:20,260
implementation so if you have the

00:29:17,380 --> 00:29:22,210
webdriver fixture and your your pyramid

00:29:20,260 --> 00:29:23,500
server fixture in the same test your

00:29:22,210 --> 00:29:24,970
webdriver instance will know where to

00:29:23,500 --> 00:29:27,070
find your pyramid service you don't have

00:29:24,970 --> 00:29:29,440
to do any extra configuration around

00:29:27,070 --> 00:29:31,330
that another part of it is the page

00:29:29,440 --> 00:29:33,610
objects pattern implementation our page

00:29:31,330 --> 00:29:35,050
objects are a very cool way of testing

00:29:33,610 --> 00:29:35,980
web applications I won't go into the

00:29:35,050 --> 00:29:38,290
details here because you could do a

00:29:35,980 --> 00:29:39,760
whole talk on them basically the basic

00:29:38,290 --> 00:29:41,890
it's it varies very quickly it

00:29:39,760 --> 00:29:44,890
essentially encapsulates an entire web

00:29:41,890 --> 00:29:47,080
page into a single class with with

00:29:44,890 --> 00:29:48,580
attribute lookups to look look for those

00:29:47,080 --> 00:29:51,550
things on the page it's a good way of

00:29:48,580 --> 00:29:52,690
reusing components of tests so there's

00:29:51,550 --> 00:29:54,070
an implementation of that in there

00:29:52,690 --> 00:29:57,970
there's also if you use for little

00:29:54,070 --> 00:30:00,340
mocking utils okay quick feature summary

00:29:57,970 --> 00:30:02,350
again so we've got pie install for

00:30:00,340 --> 00:30:03,940
installing packages I install minus

00:30:02,350 --> 00:30:05,410
death for dev packages ply uninstall

00:30:03,940 --> 00:30:06,760
which is just as like pip uninstall but

00:30:05,410 --> 00:30:08,440
looks the same as the other links

00:30:06,760 --> 00:30:11,380
there's pie make project there's the

00:30:08,440 --> 00:30:12,940
plat tool there's checkout dependency

00:30:11,380 --> 00:30:14,890
graphs and clean up which does the

00:30:12,940 --> 00:30:16,330
equivalent of the end of that resolution

00:30:14,890 --> 00:30:18,700
phase clean up face if you want to kick

00:30:16,330 --> 00:30:21,940
it off manually there's also the set up

00:30:18,700 --> 00:30:24,600
top I targets for test update build

00:30:21,940 --> 00:30:26,770
Sphinx creating jobs on Jenkins

00:30:24,600 --> 00:30:28,180
deploying stuff into two versions

00:30:26,770 --> 00:30:32,140
virtual environments and creating test

00:30:28,180 --> 00:30:33,580
only eggs a question has actually come

00:30:32,140 --> 00:30:36,010
up which is why would I use this if I'm

00:30:33,580 --> 00:30:37,810
not working in the company so I think

00:30:36,010 --> 00:30:40,480
some of the nice things in there like

00:30:37,810 --> 00:30:42,580
the dependency graph viewer the project

00:30:40,480 --> 00:30:44,230
templates and the text just having a

00:30:42,580 --> 00:30:47,020
text config file if your metadata is

00:30:44,230 --> 00:30:50,500
quite nice that's my favorite bit I hate

00:30:47,020 --> 00:30:53,680
having to hack on settl top I files okay

00:30:50,500 --> 00:30:56,410
so where to from here this is the

00:30:53,680 --> 00:30:57,130
interactive bit of the talk so this kind

00:30:56,410 --> 00:30:59,140
of sort of

00:30:57,130 --> 00:31:01,150
hands on you guys because I respect the

00:30:59,140 --> 00:31:02,860
Python communities opinions on things

00:31:01,150 --> 00:31:04,870
there's there's far too much

00:31:02,860 --> 00:31:07,030
fragmentation in the Python packaging

00:31:04,870 --> 00:31:08,920
world already I don't want to sort of

00:31:07,030 --> 00:31:12,100
create yet another standard allow the

00:31:08,920 --> 00:31:13,750
xkcd comic there are some features

00:31:12,100 --> 00:31:15,160
missing from this gear in mercurial

00:31:13,750 --> 00:31:16,900
support should be pretty quick pretty

00:31:15,160 --> 00:31:20,260
quick to add in because it's already

00:31:16,900 --> 00:31:22,240
using pips version control wrappers and

00:31:20,260 --> 00:31:23,890
I need a little bit of work to to get it

00:31:22,240 --> 00:31:26,470
installable with pip straight off pi PI

00:31:23,890 --> 00:31:28,710
and I like to wire in the wheel

00:31:26,470 --> 00:31:33,490
distribution format which has come along

00:31:28,710 --> 00:31:35,710
so hands up if you if you guys think it

00:31:33,490 --> 00:31:38,140
would be worth finishing this library as

00:31:35,710 --> 00:31:41,710
it is as a standalone project with all

00:31:38,140 --> 00:31:44,140
these kind of features installed okay so

00:31:41,710 --> 00:31:45,730
hands up if you like you think the ideas

00:31:44,140 --> 00:31:47,140
here should be kind of split up and

00:31:45,730 --> 00:31:49,510
broken implemented in the current

00:31:47,140 --> 00:31:52,980
packaging tools things like dis lib and

00:31:49,510 --> 00:31:52,980
all those other sorts of things

00:31:53,300 --> 00:32:00,330
okay all right that's pretty much it for

00:31:58,260 --> 00:32:02,940
me thanks for listening that's my tutor

00:32:00,330 --> 00:32:04,530
the codes their documentation is up

00:32:02,940 --> 00:32:05,940
there the api docs will be up as soon as

00:32:04,530 --> 00:32:08,850
i can figure out why read the docs

00:32:05,940 --> 00:32:12,120
doesn't like my config file and there's

00:32:08,850 --> 00:32:24,320
a google groups there thanks so much

00:32:12,120 --> 00:32:24,320
thank you so question time

00:32:35,100 --> 00:32:40,540
well thank you for this talk and thank

00:32:38,680 --> 00:32:44,460
you for going for all the trouble of

00:32:40,540 --> 00:32:47,020
making this I think this is great we

00:32:44,460 --> 00:32:50,230
it's not so much a question as much as

00:32:47,020 --> 00:32:52,240
like share where I've just want to say

00:32:50,230 --> 00:32:54,610
that we go through exactly the same

00:32:52,240 --> 00:32:58,420
problem the the one difference though is

00:32:54,610 --> 00:33:00,460
that I think that people in the Python

00:32:58,420 --> 00:33:03,750
community maybe that's just my opinion

00:33:00,460 --> 00:33:09,340
are trying to go away from from binary

00:33:03,750 --> 00:33:11,740
yep both for many reasons um but that's

00:33:09,340 --> 00:33:13,960
that that was really oh yeah I

00:33:11,740 --> 00:33:15,670
understand like I said it was a it was

00:33:13,960 --> 00:33:18,730
an internal kind of policy decision we

00:33:15,670 --> 00:33:21,490
wanted binary packages because it just

00:33:18,730 --> 00:33:23,200
took too long to installing a source

00:33:21,490 --> 00:33:24,580
package if you've got see lots of C

00:33:23,200 --> 00:33:26,230
extensions is to churn through them

00:33:24,580 --> 00:33:27,610
every time people want to create in

00:33:26,230 --> 00:33:29,560
throwaway environments quickly and

00:33:27,610 --> 00:33:31,450
having source packages just takes too

00:33:29,560 --> 00:33:34,230
long and the build server is well when

00:33:31,450 --> 00:33:37,000
it's doing 30 40 50 bills at a time just

00:33:34,230 --> 00:33:38,950
it's just a waste of time having to

00:33:37,000 --> 00:33:40,990
recompile even just the PI C compilation

00:33:38,950 --> 00:33:42,370
takes a while when you're scaling out to

00:33:40,990 --> 00:33:44,410
lots and lots and lots of it builds all

00:33:42,370 --> 00:33:46,810
the time that it was really as simple as

00:33:44,410 --> 00:33:49,690
that it's just a time thing I agree that

00:33:46,810 --> 00:33:51,490
binary packages aren't so good for open

00:33:49,690 --> 00:33:54,030
source world but but for in-house

00:33:51,490 --> 00:33:54,030
it made more sense

00:33:58,530 --> 00:34:02,350
do you by chance also follow thanks for

00:34:01,270 --> 00:34:05,650
the talk it's really very I'm very

00:34:02,350 --> 00:34:09,690
impressed by all the details also that

00:34:05,650 --> 00:34:12,940
you try to tackle the you know about pep

00:34:09,690 --> 00:34:16,060
426 that's the reason meta data to lat 0

00:34:12,940 --> 00:34:19,240
yeah yeah so that's good so it's not so

00:34:16,060 --> 00:34:21,970
easy to actually compare against I just

00:34:19,240 --> 00:34:25,710
changed something and I was just a major

00:34:21,970 --> 00:34:29,080
changed last week so but how does the

00:34:25,710 --> 00:34:34,810
how do you think how far is your and set

00:34:29,080 --> 00:34:38,200
up the CFG apart from what hap for 260

00:34:34,810 --> 00:34:41,800
fines ah so a lot of this was kind of

00:34:38,200 --> 00:34:43,119
developed sort of like a mall Iraq kind

00:34:41,800 --> 00:34:44,740
of underground and now we're popping our

00:34:43,119 --> 00:34:46,419
heads out to see what's changed in the

00:34:44,740 --> 00:34:48,159
world we took her we took a view of the

00:34:46,419 --> 00:34:50,020
world as it was when we were developing

00:34:48,159 --> 00:34:52,090
right we've got to make this work now so

00:34:50,020 --> 00:34:53,560
we finished it in production and we left

00:34:52,090 --> 00:34:56,320
alone for a while and now we're seeing

00:34:53,560 --> 00:34:58,270
what's happening along so I one of my

00:34:56,320 --> 00:35:00,130
goals for the next week or so is to look

00:34:58,270 --> 00:35:02,260
exactly this stuff where of all the pep

00:35:00,130 --> 00:35:05,410
to come to what can I tweaked to make it

00:35:02,260 --> 00:35:09,040
work so I'm not sure is the answer to

00:35:05,410 --> 00:35:16,450
that but I will find out yeah I I would

00:35:09,040 --> 00:35:19,869
not be at all surprised because any more

00:35:16,450 --> 00:35:21,160
questions okay thank you very much head

00:35:19,869 --> 00:35:23,220
book right

00:35:21,160 --> 00:35:23,220

YouTube URL: https://www.youtube.com/watch?v=IacmaNwU458


