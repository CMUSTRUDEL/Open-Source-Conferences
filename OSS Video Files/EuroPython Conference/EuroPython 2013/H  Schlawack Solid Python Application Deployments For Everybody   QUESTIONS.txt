Title: H  Schlawack Solid Python Application Deployments For Everybody   QUESTIONS
Publication date: 2015-04-18
Playlist: EuroPython 2013
Description: 
	[Europython 2013]
H  Schlawack Solid Python Application Deployments For Everybody   QUESTIONS
2 July 2013
TRACK ravioli
Captions: 
	00:00:01,820 --> 00:00:06,860
a bit you talked about redirecting

00:00:03,770 --> 00:00:08,179
standard error to sis love thee how does

00:00:06,860 --> 00:00:10,820
that bit work I didn't follow that at

00:00:08,179 --> 00:00:14,120
all um you can ask the person behind you

00:00:10,820 --> 00:00:17,150
ok no it's it's a feature of some

00:00:14,120 --> 00:00:19,670
application containers so microbead she

00:00:17,150 --> 00:00:22,279
does that it's it's it's just the option

00:00:19,670 --> 00:00:24,500
I I wrote there like this syslog name or

00:00:22,279 --> 00:00:25,730
something like that that's all it takes

00:00:24,500 --> 00:00:29,980
what you have to do and it gets

00:00:25,730 --> 00:00:29,980
automatically redirected thank you

00:00:37,830 --> 00:00:42,880
how do you manage your version

00:00:40,570 --> 00:00:45,880
dependencies and come again please which

00:00:42,880 --> 00:00:49,380
dependencies the which version of things

00:00:45,880 --> 00:00:51,610
you depend on I'm gonna do yeah our

00:00:49,380 --> 00:00:53,620
while for your deployments because you

00:00:51,610 --> 00:00:55,360
say you're opening to a specific version

00:00:53,620 --> 00:00:57,940
yeah and if you're deploying two

00:00:55,360 --> 00:01:03,250
packages together of two different

00:00:57,940 --> 00:01:05,290
things how do you keep those in line and

00:01:03,250 --> 00:01:07,360
or edit some point I have a small team

00:01:05,290 --> 00:01:09,400
is it quite easy each application has

00:01:07,360 --> 00:01:10,810
its own virtual environments so there is

00:01:09,400 --> 00:01:12,850
no such as a conflict I don't have to

00:01:10,810 --> 00:01:15,250
care about that at all I don't know if

00:01:12,850 --> 00:01:17,680
I'm getting you wrong now but um each

00:01:15,250 --> 00:01:19,560
application i deploy as its own

00:01:17,680 --> 00:01:22,600
dependencies packaged with its together

00:01:19,560 --> 00:01:24,970
it's one thing in a Debian package which

00:01:22,600 --> 00:01:26,440
you put on a server and they don't they

00:01:24,970 --> 00:01:28,119
don't affect each other at all that's

00:01:26,440 --> 00:01:30,899
the basic is the main idea I'm trying to

00:01:28,119 --> 00:01:30,899
convey here

00:01:44,909 --> 00:01:51,359
and in a cluster of more than one server

00:01:47,880 --> 00:01:56,609
are you managing the source code on a

00:01:51,359 --> 00:01:59,390
file a shared by all the machines or she

00:01:56,609 --> 00:02:03,539
have the source code on all the machines

00:01:59,390 --> 00:02:08,369
deployed and how do you manage caches

00:02:03,539 --> 00:02:11,760
and stuffs like that so I'm not sure

00:02:08,369 --> 00:02:13,860
I've got it everything but I just reply

00:02:11,760 --> 00:02:16,579
what I think you want to know so we have

00:02:13,860 --> 00:02:19,799
a good Reaper which runs in our office

00:02:16,579 --> 00:02:21,930
local network and our bill pots are in a

00:02:19,799 --> 00:02:24,420
local network too so they have access to

00:02:21,930 --> 00:02:26,819
the get to the get Reapers and they pull

00:02:24,420 --> 00:02:29,129
the data from there that's part of the

00:02:26,819 --> 00:02:31,049
deployment script it just connects with

00:02:29,129 --> 00:02:33,209
a bill pot and then checks out the

00:02:31,049 --> 00:02:36,420
current version and builds a package out

00:02:33,209 --> 00:02:38,569
of it so yeah said what you wanted to

00:02:36,420 --> 00:02:38,569
know

00:03:03,160 --> 00:03:13,600
okay now get you know we'd we don't do a

00:03:08,360 --> 00:03:15,800
networked storage it's e try to make

00:03:13,600 --> 00:03:18,490
laurens van Hagen might actually a very

00:03:15,800 --> 00:03:21,020
good talk called fracture architectures

00:03:18,490 --> 00:03:23,060
fractal accurate accurate architectures

00:03:21,020 --> 00:03:26,540
and that's what I'm trying to do to be

00:03:23,060 --> 00:03:29,690
on each each system should be as

00:03:26,540 --> 00:03:32,120
independent of the earth as possible so

00:03:29,690 --> 00:03:34,850
if you have one one big storage with all

00:03:32,120 --> 00:03:38,180
the source code you have a single point

00:03:34,850 --> 00:03:39,680
of failure so it but I agree that it

00:03:38,180 --> 00:03:43,250
makes sense if you have a certain size

00:03:39,680 --> 00:03:49,550
of deployment but for us it doesn't it

00:03:43,250 --> 00:03:52,100
was you answered about biting

00:03:49,550 --> 00:03:53,780
dependencies and the fixed version for

00:03:52,100 --> 00:03:56,600
pipe in the basis but about system

00:03:53,780 --> 00:04:00,980
dependencies like leap whatever how do

00:03:56,600 --> 00:04:02,660
you handle the exact version of that lib

00:04:00,980 --> 00:04:04,340
that you want to install because that

00:04:02,660 --> 00:04:05,990
can bite you too if you yes well I

00:04:04,340 --> 00:04:08,720
that's what sagginess for that's what

00:04:05,990 --> 00:04:11,600
settings for that's it's hard to control

00:04:08,720 --> 00:04:13,640
so we don't do automatic system upgrade

00:04:11,600 --> 00:04:15,830
something like that we test first if it

00:04:13,640 --> 00:04:18,250
breaks anything but there's only so much

00:04:15,830 --> 00:04:18,250
you can do

00:04:23,080 --> 00:04:28,270
we were talking about robic procedure

00:04:25,300 --> 00:04:31,210
again be a very talking about rollback

00:04:28,270 --> 00:04:35,229
procedure but what will you do if your

00:04:31,210 --> 00:04:38,680
database is already modified how long I

00:04:35,229 --> 00:04:42,550
think okay let's imagine it is so big

00:04:38,680 --> 00:04:45,219
that we can't just restore it from

00:04:42,550 --> 00:04:53,379
backup so how long does it take to

00:04:45,219 --> 00:04:59,050
package a new to repackage okay h2 I get

00:04:53,379 --> 00:05:01,240
it so yeah currently I knew it depends

00:04:59,050 --> 00:05:03,789
because some applications are quicker to

00:05:01,240 --> 00:05:05,710
deploy because that is the point is the

00:05:03,789 --> 00:05:07,990
Assembly of the virtual environment so

00:05:05,710 --> 00:05:10,240
which is pretty quick if you're doing

00:05:07,990 --> 00:05:12,870
like twisted applications because that

00:05:10,240 --> 00:05:15,969
you have very few dependencies but

00:05:12,870 --> 00:05:18,750
deploying pyramid and pylons takes a

00:05:15,969 --> 00:05:22,270
while and a while means one-half minutes

00:05:18,750 --> 00:05:25,810
approximately so if you have a look at

00:05:22,270 --> 00:05:28,810
the pipe pipe is caching server on it so

00:05:25,810 --> 00:05:31,389
you get rid of the metadata queries to

00:05:28,810 --> 00:05:33,520
pi PI you can get it down to like one

00:05:31,389 --> 00:05:37,440
half minutes some deployments are 30

00:05:33,520 --> 00:05:37,440
seconds it depends on the dependencies

00:05:43,379 --> 00:05:50,289
are you talked about salary and the

00:05:46,300 --> 00:05:52,060
alternative of twisted what can you tell

00:05:50,289 --> 00:05:54,370
me more about the twisted alternative I

00:05:52,060 --> 00:05:57,940
mean how do you first using that if you

00:05:54,370 --> 00:06:00,490
ever use that well it's just good ways

00:05:57,940 --> 00:06:08,199
to our do RPC it it's not the same as

00:06:00,490 --> 00:06:12,819
salary so yeah and how does it integrate

00:06:08,199 --> 00:06:15,520
into its application or I mean once you

00:06:12,819 --> 00:06:20,800
have a few workers working on that how

00:06:15,520 --> 00:06:22,539
do you get that with have you ever tried

00:06:20,800 --> 00:06:24,550
to use that and how do you felt in

00:06:22,539 --> 00:06:25,840
comparison with sorry you can't compare

00:06:24,550 --> 00:06:30,030
it okay it's

00:06:25,840 --> 00:06:36,340
it's what I was just giving examples of

00:06:30,030 --> 00:06:39,100
easy ways to interface brokers from from

00:06:36,340 --> 00:06:42,880
a front end so celery does a lot of more

00:06:39,100 --> 00:06:45,070
than for example our cue or even a MP

00:06:42,880 --> 00:06:47,440
and perspective broker so you can't

00:06:45,070 --> 00:06:50,229
really compare them the only similarity

00:06:47,440 --> 00:06:54,190
is that it's a good way to get on this

00:06:50,229 --> 00:06:55,690
broken thing going but you can't you

00:06:54,190 --> 00:06:57,190
can't do a feature comparison only like

00:06:55,690 --> 00:07:03,100
that if it's a different concept

00:06:57,190 --> 00:07:06,280
entirely the section of the question is

00:07:03,100 --> 00:07:08,080
more like something back to whoever back

00:07:06,280 --> 00:07:11,229
there you asked about the post-test

00:07:08,080 --> 00:07:12,910
rollbacks so if you need to roll back

00:07:11,229 --> 00:07:15,340
databases should actually take care of

00:07:12,910 --> 00:07:16,540
light or I'm talking about bolsters but

00:07:15,340 --> 00:07:19,300
they devised in general that you have

00:07:16,540 --> 00:07:21,940
some sort of point in time recovery so

00:07:19,300 --> 00:07:24,729
with postgres you can always store like

00:07:21,940 --> 00:07:26,139
a right ahead logs you can our archive

00:07:24,729 --> 00:07:28,539
them I mean I have like a period

00:07:26,139 --> 00:07:30,250
snapshots so if you make make a poopoo

00:07:28,539 --> 00:07:33,220
by while you deploy you can always roll

00:07:30,250 --> 00:07:35,070
back a bit to the point of time you want

00:07:33,220 --> 00:07:37,539
I don't really think you can do that

00:07:35,070 --> 00:07:40,240
reliably in your deployment process it

00:07:37,539 --> 00:07:41,800
will always be in my pants yeah I very

00:07:40,240 --> 00:07:44,380
case to case in New York if you do this

00:07:41,800 --> 00:07:47,620
jump back yours data so it advances the

00:07:44,380 --> 00:07:50,680
pencil if you can if it's okay for you

00:07:47,620 --> 00:07:53,020
so yeah there's really no no general

00:07:50,680 --> 00:07:55,979
solution to the data migrations or to

00:07:53,020 --> 00:07:55,979
how to do them properly

00:08:00,910 --> 00:08:05,040

YouTube URL: https://www.youtube.com/watch?v=V5YcM-MV0hY


