Title: Alexys Jacob - Write a Fault Tolerant web service using gevent + uwsgi
Publication date: 2015-04-18
Playlist: EuroPython 2013
Description: 
	[EuroPython 2013]  
 Julien Thebault
Write a Fault Tolerant web service using gevent + uwsgi - 05 July 2013 "Track Big-Mac"
Captions: 
	00:00:00,000 --> 00:00:13,440
currency I could our concurrency works

00:00:03,000 --> 00:00:18,119
and how you can use this or two it's

00:00:13,440 --> 00:00:20,550
okay to to increment the counter on

00:00:18,119 --> 00:00:23,300
MongoDB so each time one of you will

00:00:20,550 --> 00:00:27,380
load the page it will simply put

00:00:23,300 --> 00:00:30,990
increment a counter on MongoDB okay and

00:00:27,380 --> 00:00:38,309
we will see what happens if I shut down

00:00:30,990 --> 00:00:42,120
MongoDB how do I undo this with still

00:00:38,309 --> 00:00:44,040
keeping the residency and concurrency so

00:00:42,120 --> 00:00:47,430
that the clients you are I am not

00:00:44,040 --> 00:00:49,649
affected you won't see that MongoDB is

00:00:47,430 --> 00:00:53,850
down you won't get any error message and

00:00:49,649 --> 00:00:55,680
the thing we continue to just work the

00:00:53,850 --> 00:00:59,910
only thing you will see is that the

00:00:55,680 --> 00:01:03,989
counter will stop incrementing on your

00:00:59,910 --> 00:01:06,540
on your screen but the thing with fault

00:01:03,989 --> 00:01:10,409
tolerance is to not actually lose data

00:01:06,540 --> 00:01:13,830
so i will show you a simple trick of how

00:01:10,409 --> 00:01:18,990
to use us key to achieve that with no

00:01:13,830 --> 00:01:22,380
real big of her head and when I will put

00:01:18,990 --> 00:01:26,549
down put back on MongoDB the thing will

00:01:22,380 --> 00:01:30,840
just get all the pings you will have

00:01:26,549 --> 00:01:33,990
done by the time MongoDB was down and it

00:01:30,840 --> 00:01:37,350
will just requirement every call that it

00:01:33,990 --> 00:01:40,680
has received during the downtime so that

00:01:37,350 --> 00:01:43,560
the counter will actually be consistent

00:01:40,680 --> 00:01:49,020
with the whole time and we won't lose

00:01:43,560 --> 00:01:53,130
any data okay and as I said it's a

00:01:49,020 --> 00:01:55,500
concrete talk so I will hopefully be

00:01:53,130 --> 00:01:58,710
able to present you the actual code and

00:01:55,500 --> 00:02:03,049
I ousted it on get up so you can get it

00:01:58,710 --> 00:02:03,049
whenever you want and if you have

00:02:03,130 --> 00:02:08,600
the problem one day or you are

00:02:06,110 --> 00:02:12,380
interested in in going further we can

00:02:08,600 --> 00:02:18,050
discuss it also what the idea is to get

00:02:12,380 --> 00:02:23,180
really really a simple yeah that would

00:02:18,050 --> 00:02:37,610
be me a simple web service that that's

00:02:23,180 --> 00:02:40,790
achieving that great and sorry so that's

00:02:37,610 --> 00:02:42,680
me ultra bag I'm CIO at minima see

00:02:40,790 --> 00:02:48,200
that's that's a French advertising

00:02:42,680 --> 00:02:50,990
company in Paris and I'm also quite

00:02:48,200 --> 00:02:53,900
narrow pretty long time gentoo linux

00:02:50,990 --> 00:02:58,489
developer and where I focused mainly on

00:02:53,900 --> 00:03:01,700
cluster staff and I packaged some things

00:02:58,489 --> 00:03:05,870
like in no sequel work like I'm the main

00:03:01,700 --> 00:03:07,940
page cager of MongoDB pymongo and stuff

00:03:05,870 --> 00:03:09,980
like that and you whiskey as well I'm

00:03:07,940 --> 00:03:13,850
the one taking care of that the

00:03:09,980 --> 00:03:17,720
packaging of us g4 gentoo linux so I'm a

00:03:13,850 --> 00:03:21,019
DevOps at a sign not so I'm mainly a

00:03:17,720 --> 00:03:24,049
sysadmin we who went into the

00:03:21,019 --> 00:03:26,810
programming world thanks to python so

00:03:24,049 --> 00:03:29,269
that's why Allah this this language a

00:03:26,810 --> 00:03:32,950
lot and I like to promote it and now I

00:03:29,269 --> 00:03:36,650
also take care of a little team in our

00:03:32,950 --> 00:03:40,580
company who is focused on uniquely

00:03:36,650 --> 00:03:42,890
developing in Python okay so you will

00:03:40,580 --> 00:03:45,080
fortran i think you will have some

00:03:42,890 --> 00:03:47,600
things to say about my code or coding

00:03:45,080 --> 00:03:53,780
style or anything so bear with me i'm

00:03:47,600 --> 00:03:56,090
sorry for this but well so without

00:03:53,780 --> 00:03:59,090
further presentation this is the stack

00:03:56,090 --> 00:04:02,810
will be talking about so we'll have one

00:03:59,090 --> 00:04:07,980
ng next process and server in running on

00:04:02,810 --> 00:04:12,840
front of our stack and this has

00:04:07,980 --> 00:04:15,840
many advantages for the first one

00:04:12,840 --> 00:04:18,690
obviously is to serve static files but

00:04:15,840 --> 00:04:21,570
which we won't use that in in this talk

00:04:18,690 --> 00:04:26,010
there is also things you can implement

00:04:21,570 --> 00:04:30,030
in nginx 204 tolerance if your USB stack

00:04:26,010 --> 00:04:33,479
goes down and but we won't go too much

00:04:30,030 --> 00:04:36,780
in this as well I will just focus on how

00:04:33,479 --> 00:04:41,550
you can design a concurrent web service

00:04:36,780 --> 00:04:44,820
using your whiskey so the thing is you

00:04:41,550 --> 00:04:47,699
will have one USD jeevan process running

00:04:44,820 --> 00:04:51,930
ok so we have only one processor on the

00:04:47,699 --> 00:04:57,020
machine so that's pretty easy you don't

00:04:51,930 --> 00:05:01,260
have much much choice and we will also

00:04:57,020 --> 00:05:04,169
so this jevon process will insert each

00:05:01,260 --> 00:05:07,080
time you load the page a counter in

00:05:04,169 --> 00:05:10,830
MongoDB ok that's what that's when

00:05:07,080 --> 00:05:13,950
things go smooth and you're happy but

00:05:10,830 --> 00:05:16,520
what if it goes down well we will just

00:05:13,950 --> 00:05:19,020
use the u.s. gives pull up processing

00:05:16,520 --> 00:05:22,800
method I don't know if you any of you

00:05:19,020 --> 00:05:26,310
use you go sleep and you know about the

00:05:22,800 --> 00:05:28,919
spooler mechanism no well I'll show you

00:05:26,310 --> 00:05:32,240
how to use that spoon a mechanism to

00:05:28,919 --> 00:05:37,160
actually handles under failure of your

00:05:32,240 --> 00:05:41,000
 DB server or whatever you want and

00:05:37,160 --> 00:05:43,830
the main idea is that i'll try to a

00:05:41,000 --> 00:05:47,160
synchronously right into MongoDB so

00:05:43,830 --> 00:05:49,349
generate an ion network at il on MongoDB

00:05:47,160 --> 00:05:54,150
and if it fails I'll catch that and

00:05:49,349 --> 00:05:57,229
instead write or spool a file containing

00:05:54,150 --> 00:06:03,270
a message which is basically message one

00:05:57,229 --> 00:06:06,270
ok and ready on disk so each call that

00:06:03,270 --> 00:06:08,699
will go and in my application instead of

00:06:06,270 --> 00:06:12,810
writing MongoDB as long as MongoDB fails

00:06:08,699 --> 00:06:16,740
I will spawn a new file on disk and on

00:06:12,810 --> 00:06:21,599
and on and on when the spooler process

00:06:16,740 --> 00:06:22,020
will frequently retry and get all the

00:06:21,599 --> 00:06:24,840
files

00:06:22,020 --> 00:06:28,470
UF's pool over the time and we try to

00:06:24,840 --> 00:06:31,379
insert them in MongoDB the normal way if

00:06:28,470 --> 00:06:33,629
it still face the file will go will will

00:06:31,379 --> 00:06:36,180
will not be removed and will it will

00:06:33,629 --> 00:06:40,830
stay there and we will retry later it's

00:06:36,180 --> 00:06:45,270
okay okay this way when i get home buddy

00:06:40,830 --> 00:06:50,039
be back every call will actually have it

00:06:45,270 --> 00:06:54,780
increment back into MongoDB alright so

00:06:50,039 --> 00:07:00,810
let's experience it so if you can go on

00:06:54,780 --> 00:07:03,360
this URL you will see a simple number

00:07:00,810 --> 00:07:06,120
and there is a lot a little bit of

00:07:03,360 --> 00:07:08,930
JavaScript which actually says the time

00:07:06,120 --> 00:07:12,360
out of one second so your browser will

00:07:08,930 --> 00:07:14,699
refer to refresh the page and you should

00:07:12,360 --> 00:07:20,879
see the counter incrementing by one

00:07:14,699 --> 00:07:25,909
every second am i right yeah you can see

00:07:20,879 --> 00:07:28,530
it alright so this runs concurrently

00:07:25,909 --> 00:07:33,659
because as i said i have only one

00:07:28,530 --> 00:07:37,919
process i won usg process managing the

00:07:33,659 --> 00:07:43,380
Python code and using g event I'm

00:07:37,919 --> 00:07:47,159
actually able to serve you all on the on

00:07:43,380 --> 00:07:50,789
at the same time even if I have some hio

00:07:47,159 --> 00:07:55,830
between this because what you see is and

00:07:50,789 --> 00:08:02,779
I don't have the code years old and that

00:07:55,830 --> 00:08:02,779
won't be really cool but anyway

00:08:03,720 --> 00:08:10,140
I'll try now you have the spec of the

00:08:06,840 --> 00:08:14,550
machine running the actual test you are

00:08:10,140 --> 00:08:19,980
seeing so you can see it's pretty old

00:08:14,550 --> 00:08:23,960
stuff ok so here I can see Greta thanks

00:08:19,980 --> 00:08:27,000
to us key statistics that the requests

00:08:23,960 --> 00:08:31,260
come in and everything works smoothly

00:08:27,000 --> 00:08:33,930
all right the i have also fine which is

00:08:31,260 --> 00:08:36,719
which says that i have 0 spool fights

00:08:33,930 --> 00:08:39,570
for now let's know it's normal mongodb

00:08:36,719 --> 00:08:50,340
is working so now i'm just going to stop

00:08:39,570 --> 00:08:52,520
mongodb bit laggy as I said it's running

00:08:50,340 --> 00:08:59,460
on a personal connection so it's really

00:08:52,520 --> 00:09:03,630
not it's not super alright so now my

00:08:59,460 --> 00:09:05,640
server starts complaining well my code

00:09:03,630 --> 00:09:09,480
starts complaining and logging because I

00:09:05,640 --> 00:09:13,620
asked him so that he got connection

00:09:09,480 --> 00:09:16,830
refused to MongoDB ok and now I can see

00:09:13,620 --> 00:09:20,940
that my spool files are being as spice

00:09:16,830 --> 00:09:23,610
as being spool sorry on the spooler it

00:09:20,940 --> 00:09:28,530
should still run smoothly for you but

00:09:23,610 --> 00:09:31,950
the counter no yeah that's fine that's

00:09:28,530 --> 00:09:35,160
that's that's that's perfectly normal so

00:09:31,950 --> 00:09:37,740
yeah yeah I just keep the last value I

00:09:35,160 --> 00:09:40,610
had from Mungo and I still serve it to

00:09:37,740 --> 00:09:46,110
you but I still answer to you don't I

00:09:40,610 --> 00:09:49,890
you don't see an actual 500 error no no

00:09:46,110 --> 00:09:55,530
no that still works and the current

00:09:49,890 --> 00:09:59,550
count of spool fights so of cold is 18 9

00:09:55,530 --> 00:10:02,370
9 900-1000 now ok so when I'm going to

00:09:59,550 --> 00:10:06,630
get MongoDB back up you should see this

00:10:02,370 --> 00:10:11,580
this this counter increase more or less

00:10:06,630 --> 00:10:15,769
rapidly by let's say one on one thousand

00:10:11,580 --> 00:10:20,470
and three hundred ok ready

00:10:15,769 --> 00:10:28,429
if the SSH let's be too so counter is

00:10:20,470 --> 00:10:34,639
100 about and 1500 okay let's go mongodb

00:10:28,429 --> 00:10:46,970
is back up and everything's back and the

00:10:34,639 --> 00:10:53,720
counter just kept up yeah where else can

00:10:46,970 --> 00:10:55,489
I say it's pretty fairly simple I will

00:10:53,720 --> 00:10:58,819
love to I would love to show you the

00:10:55,489 --> 00:11:04,339
actual code but I can I'm sorry about

00:10:58,819 --> 00:11:08,029
that the URL of the code is here ok so

00:11:04,339 --> 00:11:11,860
in trebek that's me that's me on gentoo

00:11:08,029 --> 00:11:15,230
on everywhere you can and so the that's

00:11:11,860 --> 00:11:18,920
you will see it's really a simple cut

00:11:15,230 --> 00:11:24,439
and I would have loved to explain it to

00:11:18,920 --> 00:11:29,480
you in life but oh yeah see I mean I'm

00:11:24,439 --> 00:11:34,100
stupid oh can I go to can you go to this

00:11:29,480 --> 00:11:39,439
URL thank you I'm sorry what else can I

00:11:34,100 --> 00:11:42,889
say between this um well it's what's

00:11:39,439 --> 00:11:46,999
it's really really really simple I mean

00:11:42,889 --> 00:11:52,040
that we're we're using this for when

00:11:46,999 --> 00:12:02,559
this kind of method for ultra bug you

00:11:52,040 --> 00:12:02,559
LTR be you yeah that's me and thanks

00:12:04,089 --> 00:12:06,149
you

00:12:10,790 --> 00:12:18,620
that's the code okay so if you have gone

00:12:14,900 --> 00:12:21,970
to some g event torx you heard about

00:12:18,620 --> 00:12:25,190
monkey patching which replaces

00:12:21,970 --> 00:12:27,740
synchronous okay you know about this so

00:12:25,190 --> 00:12:30,520
we'll skip that then we have the

00:12:27,740 --> 00:12:34,750
standard flask imports nothing big here

00:12:30,520 --> 00:12:36,890
will use us key so you use Yugi

00:12:34,750 --> 00:12:42,580
decorators which is the spool row

00:12:36,890 --> 00:12:47,150
decorator which is oh yeah I guess

00:12:42,580 --> 00:12:49,910
where's the plus here who what kind of

00:12:47,150 --> 00:12:54,760
weird languages oh the fact it's the

00:12:49,910 --> 00:12:54,760
safer it is worth that French all right

00:12:55,480 --> 00:13:03,470
yeah cool all right the spool row

00:12:59,750 --> 00:13:05,300
decorator is a decorator you apply to a

00:13:03,470 --> 00:13:07,700
function and this is the function that

00:13:05,300 --> 00:13:11,090
will be called with an argument the

00:13:07,700 --> 00:13:13,730
message you have pulled when the when

00:13:11,090 --> 00:13:18,710
things goes down i use the flashed by

00:13:13,730 --> 00:13:22,750
mongol project 22 to unload my manga

00:13:18,710 --> 00:13:22,750
connection in flash so okay so

00:13:27,769 --> 00:13:38,660
good enough all right i'll take the main

00:13:32,959 --> 00:13:42,139
code is ear you know so every time you

00:13:38,660 --> 00:13:47,179
call the page i will spawn adjuvant

00:13:42,139 --> 00:13:49,129
green let asking get me the counter get

00:13:47,179 --> 00:13:53,199
counter function get me the counter from

00:13:49,129 --> 00:13:56,569
mongodb that's all and will join so

00:13:53,199 --> 00:14:00,139
that's the part where I will block I

00:13:56,569 --> 00:14:03,679
will wait and process another request of

00:14:00,139 --> 00:14:06,619
one of the other you of you guys and do

00:14:03,679 --> 00:14:09,439
the same thing until I get the answer

00:14:06,619 --> 00:14:14,329
from mongodb okay so that's where

00:14:09,439 --> 00:14:16,489
concurrency happens right when i get the

00:14:14,329 --> 00:14:19,639
result i will store it in a counter

00:14:16,489 --> 00:14:22,160
which i will take the value returned by

00:14:19,639 --> 00:14:25,179
the green light so the function get

00:14:22,160 --> 00:14:31,670
counter really returns a value that's

00:14:25,179 --> 00:14:34,939
here okay well it just connect to to

00:14:31,670 --> 00:14:38,360
 just the fine one get me the

00:14:34,939 --> 00:14:40,579
counter get me the value if something

00:14:38,360 --> 00:14:43,790
happens I written none if says if I get

00:14:40,579 --> 00:14:47,329
the result I return the result so that's

00:14:43,790 --> 00:14:50,119
why I check and if something happens so

00:14:47,329 --> 00:14:53,209
when MongoDB was down I was returning

00:14:50,119 --> 00:14:57,379
the Ord so that's the last count I was

00:14:53,209 --> 00:14:59,869
able to get that's a class where I I

00:14:57,379 --> 00:15:06,670
stored and then i present it to you

00:14:59,869 --> 00:15:13,819
which I I just give you the HTML okay so

00:15:06,670 --> 00:15:17,089
yeah I'm almost done then what happens

00:15:13,819 --> 00:15:20,179
is that i will just spawn a new green

00:15:17,089 --> 00:15:22,999
net with the order to increment the

00:15:20,179 --> 00:15:28,759
counter but i won't wait for it to be

00:15:22,999 --> 00:15:31,790
finished before serving you do HTML so

00:15:28,759 --> 00:15:34,999
that can keep i don't know i don't care

00:15:31,790 --> 00:15:37,209
about what the time it can keep a can

00:15:34,999 --> 00:15:40,400
take two to actually happen in MongoDB

00:15:37,209 --> 00:15:44,150
the thing is you got your page

00:15:40,400 --> 00:15:46,760
and I can process still lots of you guys

00:15:44,150 --> 00:15:50,000
so the increment counter is that it

00:15:46,760 --> 00:15:53,150
there is where it's the spoon ring

00:15:50,000 --> 00:15:55,790
happens so I try to insert if I get an

00:15:53,150 --> 00:16:00,740
exception what whatever what I can't

00:15:55,790 --> 00:16:04,160
insert into MongoDB and I am not in the

00:16:00,740 --> 00:16:08,750
so that's the only tricky part is here

00:16:04,160 --> 00:16:12,380
if I am NOT the spooler process okay

00:16:08,750 --> 00:16:15,640
that means is if I am the one talking

00:16:12,380 --> 00:16:18,890
with nginx I am the one who has to spoon

00:16:15,640 --> 00:16:23,360
okay if I am the spooler process as i

00:16:18,890 --> 00:16:27,850
told you i reuse the same function both

00:16:23,360 --> 00:16:36,980
in the spooler and in the front

00:16:27,850 --> 00:16:40,190
processing process sorry so if I am if I

00:16:36,980 --> 00:16:42,260
am the front process I just put a

00:16:40,190 --> 00:16:44,990
message we can switch contain one and

00:16:42,260 --> 00:16:49,670
that's all and that's what is written on

00:16:44,990 --> 00:16:51,380
disk ok if not I race so that means i am

00:16:49,670 --> 00:16:54,920
the spooling process i am trying to

00:16:51,380 --> 00:16:57,410
process a spool file but MongoDB is

00:16:54,920 --> 00:16:59,720
still down so i rewrite the exception

00:16:57,410 --> 00:17:02,870
and i won't do anything i will try again

00:16:59,720 --> 00:17:05,900
later okay and that's the end here

00:17:02,870 --> 00:17:12,980
that's the spool row so that's the

00:17:05,900 --> 00:17:15,950
spooler function I just call the

00:17:12,980 --> 00:17:18,650
increment counter if it fails well I

00:17:15,950 --> 00:17:22,810
print it so that gets me the logs you

00:17:18,650 --> 00:17:26,930
should have saw that here and I just a

00:17:22,810 --> 00:17:29,660
retry later it's okay else that means I

00:17:26,930 --> 00:17:32,810
actually managed to insert it in MongoDB

00:17:29,660 --> 00:17:36,170
and I say spool okay to you you whiskey

00:17:32,810 --> 00:17:41,440
and you will take care of deleting the

00:17:36,170 --> 00:17:41,440
file from the school directory okay

00:17:44,140 --> 00:18:05,720
yeah sorry so what is it what Declan

00:18:03,650 --> 00:18:09,200
what is the actual data gets stored on

00:18:05,720 --> 00:18:10,880
the school I'd only get to a question so

00:18:09,200 --> 00:18:12,770
you said you had a spool file against

00:18:10,880 --> 00:18:16,090
any good yeah what is the date and they

00:18:12,770 --> 00:18:20,030
get stolen well that's the message one

00:18:16,090 --> 00:18:22,400
yeah sorry so what gets deleted in your

00:18:20,030 --> 00:18:24,980
meaning what gets written on the spool

00:18:22,400 --> 00:18:29,420
file on the spool file you can write on

00:18:24,980 --> 00:18:32,090
this string so you have to actually use

00:18:29,420 --> 00:18:34,370
pickle or anything if you have Python

00:18:32,090 --> 00:18:37,340
objects you want to store but in my case

00:18:34,370 --> 00:18:39,950
I was just send saying write me a string

00:18:37,340 --> 00:18:42,260
which is basically a dictionary and I

00:18:39,950 --> 00:18:45,350
will get back a dictionary with a field

00:18:42,260 --> 00:18:47,510
message and a value of one in my case

00:18:45,350 --> 00:18:49,460
that's always a counter which I

00:18:47,510 --> 00:18:52,070
increment by 1 so i didn't have to

00:18:49,460 --> 00:18:55,070
actually get the message and process it

00:18:52,070 --> 00:18:56,960
but you could have a complex message

00:18:55,070 --> 00:19:03,170
that's actually what we do in production

00:18:56,960 --> 00:19:05,270
at work and write a complete decent in

00:19:03,170 --> 00:19:08,770
in the school fight and that's what you

00:19:05,270 --> 00:19:08,770
will get back from the environment I

00:19:12,910 --> 00:19:19,270
yeah I'll kick you again

00:19:22,630 --> 00:19:24,690

YouTube URL: https://www.youtube.com/watch?v=AIYsV5scL7A


