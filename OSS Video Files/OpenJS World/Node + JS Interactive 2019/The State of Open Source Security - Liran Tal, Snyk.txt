Title: The State of Open Source Security - Liran Tal, Snyk
Publication date: 2020-05-11
Playlist: Node + JS Interactive 2019
Description: 
	The State of Open Source Security - Liran Tal, Snyk
Speakers: Liran Tal
Open source security affects everything from software supply chain attacks in package managers to container security which revealed in a recent study that the top ten most popular Docker images contain at least 30 vulnerable system libraries. In this session we will further explore the security posture of open source maintainers and deep characteristics of application dependencies across language ecosystems, with stories from the Node.js and npm ecosystem.
Captions: 
	00:00:00,149 --> 00:00:04,170
good morning everyone thank you for

00:00:01,260 --> 00:00:06,270
joining me we're gonna kick it off with

00:00:04,170 --> 00:00:07,890
the state of open source security I want

00:00:06,270 --> 00:00:10,260
to talk to you about high-level view of

00:00:07,890 --> 00:00:12,420
everything that happens on language

00:00:10,260 --> 00:00:14,969
based software ecosystems containers

00:00:12,420 --> 00:00:17,430
technologies projects of open-source

00:00:14,969 --> 00:00:19,619
maintainer Xen developers as well so

00:00:17,430 --> 00:00:21,930
quick introduction about myself my name

00:00:19,619 --> 00:00:22,920
is Liran Tao I'm a developer advocate at

00:00:21,930 --> 00:00:24,480
sneaked where we build developer

00:00:22,920 --> 00:00:27,539
friendly security tooling to help

00:00:24,480 --> 00:00:29,429
developers build secure applications I'm

00:00:27,539 --> 00:00:31,590
also involved with the no js' security

00:00:29,429 --> 00:00:33,809
working group and bunch of other

00:00:31,590 --> 00:00:35,820
activities across a wasp and publishing

00:00:33,809 --> 00:00:37,350
books if you wanna follow me on twitter

00:00:35,820 --> 00:00:38,879
and ask me anything about us I'm happy

00:00:37,350 --> 00:00:41,160
to help and I'll be here the whole day

00:00:38,879 --> 00:00:44,010
and doing the collaborators from it so

00:00:41,160 --> 00:00:46,289
you know just find me around so we can

00:00:44,010 --> 00:00:48,270
off today I think nobody would question

00:00:46,289 --> 00:00:50,250
the fact that open-source has made an

00:00:48,270 --> 00:00:53,160
incredible impact on modern software

00:00:50,250 --> 00:00:55,680
development and it continues to expand

00:00:53,160 --> 00:00:58,050
every year github had reported that 2018

00:00:55,680 --> 00:01:00,660
had seen more new users signing up then

00:00:58,050 --> 00:01:01,890
all of its first six years combined so

00:01:00,660 --> 00:01:03,690
open source software is really

00:01:01,890 --> 00:01:05,450
everywhere and contributions are made

00:01:03,690 --> 00:01:07,799
across all languages and platforms

00:01:05,450 --> 00:01:10,260
impacting roads across different

00:01:07,799 --> 00:01:12,390
industries and undoubtedly essential

00:01:10,260 --> 00:01:16,590
product of business technology strategy

00:01:12,390 --> 00:01:20,549
in 2018 actually Java packages doubled

00:01:16,590 --> 00:01:22,380
NPM added about 250 K packages as well

00:01:20,549 --> 00:01:25,140
and we actually surpassed already 1

00:01:22,380 --> 00:01:29,640
million packages early early 2019 so

00:01:25,140 --> 00:01:31,200
this year around June on on NPM the use

00:01:29,640 --> 00:01:34,079
of open source is accelerating however

00:01:31,200 --> 00:01:36,360
with great adoption of open source comes

00:01:34,079 --> 00:01:37,920
great responsibility and risk that we

00:01:36,360 --> 00:01:40,170
need to mitigate you know whether we are

00:01:37,920 --> 00:01:41,850
owners of open-source maintainer of open

00:01:40,170 --> 00:01:44,520
source or just using open source

00:01:41,850 --> 00:01:48,350
software in 2018 vulnerabilities for NPM

00:01:44,520 --> 00:01:50,670
grew by 47% PHP and maven had grew a

00:01:48,350 --> 00:01:52,530
considerable percentage percentages as

00:01:50,670 --> 00:01:53,430
well something around 27 and 56 percent

00:01:52,530 --> 00:01:56,009
respectively

00:01:53,430 --> 00:01:57,719
so we're seeing all-in-all about 88

00:01:56,009 --> 00:02:00,649
percent growth of application security

00:01:57,719 --> 00:02:02,729
vulnerabilities in the last two years

00:02:00,649 --> 00:02:05,280
what is really interesting is that

00:02:02,729 --> 00:02:08,459
vulnerable versions have a long tail of

00:02:05,280 --> 00:02:10,979
downloads in other words how long does

00:02:08,459 --> 00:02:13,680
it take for users to adapt to a new

00:02:10,979 --> 00:02:13,890
version that has a fix from an old one

00:02:13,680 --> 00:02:16,140
that

00:02:13,890 --> 00:02:18,510
is vulnerable how long does that take so

00:02:16,140 --> 00:02:20,660
we turned into a Python the pi pi

00:02:18,510 --> 00:02:23,010
registry and they took a look at a

00:02:20,660 --> 00:02:26,190
pretty popular fairly popular package

00:02:23,010 --> 00:02:27,630
called WebSocket we found that even

00:02:26,190 --> 00:02:30,480
though it has a high denial of service

00:02:27,630 --> 00:02:32,970
vulnerability disclosed in August you

00:02:30,480 --> 00:02:35,310
can see that downloads have been in Oh

00:02:32,970 --> 00:02:36,780
thousands of downloads or tens of

00:02:35,310 --> 00:02:38,550
thousands of downloads have been

00:02:36,780 --> 00:02:40,500
actually accumulating even after that so

00:02:38,550 --> 00:02:42,060
people are still downloading vulnerable

00:02:40,500 --> 00:02:43,440
versions of that or this could be for

00:02:42,060 --> 00:02:46,320
different reasons you know maybe there's

00:02:43,440 --> 00:02:48,660
a no legacy maybe there's issues to

00:02:46,320 --> 00:02:50,070
upgrade you to a fix but considering

00:02:48,660 --> 00:02:51,989
this fact you know we're still getting

00:02:50,070 --> 00:02:54,690
those long tails of downloads even for

00:02:51,989 --> 00:02:57,360
vulnerable versions this turn is

00:02:54,690 --> 00:02:58,950
actually increasing of security

00:02:57,360 --> 00:03:00,810
vulnerabilities even across you know

00:02:58,950 --> 00:03:03,900
well-known system libraries so whether

00:03:00,810 --> 00:03:05,580
you look at things like you know Red Hat

00:03:03,900 --> 00:03:07,200
Enterprise Linux Debian sees all of

00:03:05,580 --> 00:03:08,940
those UNIX t-shirts now we're seeing

00:03:07,200 --> 00:03:10,680
those same trends of increasing you know

00:03:08,940 --> 00:03:13,110
CVS and security vulnerabilities being

00:03:10,680 --> 00:03:13,739
reported being disclosed and we'll get

00:03:13,110 --> 00:03:15,930
to that in a bit

00:03:13,739 --> 00:03:17,519
but I will say that you know those TVs

00:03:15,930 --> 00:03:19,829
that we're seeing here at you know Linux

00:03:17,519 --> 00:03:22,410
OS libraries are not something far away

00:03:19,829 --> 00:03:23,640
from us actually they manifest in the

00:03:22,410 --> 00:03:25,350
container technology that we're using

00:03:23,640 --> 00:03:26,850
you know most probably to power

00:03:25,350 --> 00:03:29,579
applications and bundle them with them

00:03:26,850 --> 00:03:31,290
so kind of transit transitively we are

00:03:29,579 --> 00:03:33,989
being affected and impacted by these

00:03:31,290 --> 00:03:36,420
vulnerabilities so let's take a look at

00:03:33,989 --> 00:03:38,880
what happens in language based software

00:03:36,420 --> 00:03:39,930
ecosystems and how much do we rely and

00:03:38,880 --> 00:03:42,209
know about those open source

00:03:39,930 --> 00:03:44,370
dependencies that we use so recent

00:03:42,209 --> 00:03:45,900
academic research paper had actually

00:03:44,370 --> 00:03:47,880
investigated the characteristics and

00:03:45,900 --> 00:03:49,590
properties of different language base

00:03:47,880 --> 00:03:52,950
type of systems it took for example

00:03:49,590 --> 00:03:54,120
Python pi PI pi PI registry and also NPM

00:03:52,950 --> 00:03:56,790
try to compare and figure out you know

00:03:54,120 --> 00:03:58,950
what is different what is familiar and

00:03:56,790 --> 00:04:01,620
similar around those what it found out

00:03:58,950 --> 00:04:04,079
for in pair specifically is that 61% of

00:04:01,620 --> 00:04:06,299
all packages on NPM could be considered

00:04:04,079 --> 00:04:08,220
abandoned packages now straight out that

00:04:06,299 --> 00:04:10,530
seems you know very outrageous you know

00:04:08,220 --> 00:04:11,940
proposition to say but it depends what

00:04:10,530 --> 00:04:14,130
do you you know how what is what is your

00:04:11,940 --> 00:04:16,049
opinion on what is or what do you

00:04:14,130 --> 00:04:18,150
measure what is an abandoned package

00:04:16,049 --> 00:04:20,010
right so for the sake of this research

00:04:18,150 --> 00:04:22,260
paper and you know research paper being

00:04:20,010 --> 00:04:23,789
you know something easily to consume we

00:04:22,260 --> 00:04:25,710
have decided or you know the researchers

00:04:23,789 --> 00:04:27,240
have decided that an abandoned package

00:04:25,710 --> 00:04:27,790
will be that which did not have a

00:04:27,240 --> 00:04:30,730
release in the

00:04:27,790 --> 00:04:32,800
12 months so rightfully so you could go

00:04:30,730 --> 00:04:34,180
ahead and argue back that you know last

00:04:32,800 --> 00:04:35,740
12 months did not have released maybe

00:04:34,180 --> 00:04:37,960
that package had reached maturity you

00:04:35,740 --> 00:04:39,220
know maybe it's already so well known

00:04:37,960 --> 00:04:39,880
and well-developed it does not need

00:04:39,220 --> 00:04:42,490
anymore

00:04:39,880 --> 00:04:43,960
new releases everything is fine except

00:04:42,490 --> 00:04:46,630
event stream incident happened a

00:04:43,960 --> 00:04:48,070
security issue that kind of I'm pretty

00:04:46,630 --> 00:04:49,510
sure somewhere up to some people in the

00:04:48,070 --> 00:04:52,060
room have heard of if not your whole

00:04:49,510 --> 00:04:54,130
post mortem you will not have a problem

00:04:52,060 --> 00:04:56,650
finding and googling this information

00:04:54,130 --> 00:04:58,480
but just like put it into into like a

00:04:56,650 --> 00:05:00,670
small disclaimer of what was going under

00:04:58,480 --> 00:05:02,380
event stream has been on their own the

00:05:00,670 --> 00:05:04,390
NPM registry for like almost eight or

00:05:02,380 --> 00:05:05,980
nine years since then definitely mature

00:05:04,390 --> 00:05:08,140
did not see any release in the last two

00:05:05,980 --> 00:05:09,820
or three years but someone through a

00:05:08,140 --> 00:05:12,250
social engineering technique was able to

00:05:09,820 --> 00:05:15,400
go ahead over over take publishing

00:05:12,250 --> 00:05:17,530
access you know and true that you know

00:05:15,400 --> 00:05:20,050
being able to inject a malicious package

00:05:17,530 --> 00:05:21,910
inside transitive dependencies of event

00:05:20,050 --> 00:05:23,440
stream that you would usually also

00:05:21,910 --> 00:05:25,420
probably will use not as a direct one

00:05:23,440 --> 00:05:27,670
but as a transitive dependency so true

00:05:25,420 --> 00:05:29,680
all of that injecting something into a

00:05:27,670 --> 00:05:32,860
package that being downloaded about two

00:05:29,680 --> 00:05:34,450
million times awake another interesting

00:05:32,860 --> 00:05:37,630
insight that this research paper pointed

00:05:34,450 --> 00:05:39,700
out was that if you take a look at what

00:05:37,630 --> 00:05:41,290
you install your average NPM install

00:05:39,700 --> 00:05:43,000
there's a whole difference between what

00:05:41,290 --> 00:05:45,850
happens on Python for example to NPM

00:05:43,000 --> 00:05:47,980
so for NPM your average NPM install for

00:05:45,850 --> 00:05:50,200
a package would pull in full levels deep

00:05:47,980 --> 00:05:51,520
of nested dependencies which means this

00:05:50,200 --> 00:05:53,410
is you know great if you're like

00:05:51,520 --> 00:05:55,840
tracking something like Express or fast

00:05:53,410 --> 00:05:57,700
if I but at at the same time they're

00:05:55,840 --> 00:05:58,990
gonna pull in you know a bunch of those

00:05:57,700 --> 00:06:00,730
other dependencies as well

00:05:58,990 --> 00:06:02,740
that you need to track and understand as

00:06:00,730 --> 00:06:04,860
well have this the exact mindset of a

00:06:02,740 --> 00:06:07,090
security risk of what's going on there

00:06:04,860 --> 00:06:09,460
experimental exercise imagine you build

00:06:07,090 --> 00:06:11,470
a node.js app your mental image of the

00:06:09,460 --> 00:06:13,540
application is this you know following

00:06:11,470 --> 00:06:15,070
blob where you see you know your

00:06:13,540 --> 00:06:17,800
application being deployed or you know

00:06:15,070 --> 00:06:21,130
being used somewhere except the reality

00:06:17,800 --> 00:06:23,200
however is that the actual code that you

00:06:21,130 --> 00:06:25,270
write write the code that we write as

00:06:23,200 --> 00:06:27,550
developers is significantly smaller

00:06:25,270 --> 00:06:28,870
amount than what we actually ship out so

00:06:27,550 --> 00:06:30,550
your M your mental image of your

00:06:28,870 --> 00:06:32,560
application might be a bit distorted

00:06:30,550 --> 00:06:34,690
towards the reality of what you actually

00:06:32,560 --> 00:06:36,370
wrote versus all the app that you are

00:06:34,690 --> 00:06:37,930
actually responsible for as well because

00:06:36,370 --> 00:06:40,210
all of us are relying on open source

00:06:37,930 --> 00:06:41,080
software community powered code which is

00:06:40,210 --> 00:06:43,090
you know leveraging

00:06:41,080 --> 00:06:44,199
beautiful open-source world and boost

00:06:43,090 --> 00:06:46,419
our productivity but we need to

00:06:44,199 --> 00:06:48,280
understand this concept of what we write

00:06:46,419 --> 00:06:49,810
and you know what is not ours and then

00:06:48,280 --> 00:06:53,439
what is our risk and responsibility

00:06:49,810 --> 00:06:55,210
towards those dependencies as well so

00:06:53,439 --> 00:06:57,639
granted it is I think hard to imagine

00:06:55,210 --> 00:06:59,710
these days writing software delivering

00:06:57,639 --> 00:07:01,689
products without being reliant on any

00:06:59,710 --> 00:07:03,610
kind of open source software or

00:07:01,689 --> 00:07:05,680
dependency and you know managing

00:07:03,610 --> 00:07:08,020
dependencies for project is an important

00:07:05,680 --> 00:07:09,789
task and requires due diligence you know

00:07:08,020 --> 00:07:11,740
tracking those dependencies that you use

00:07:09,789 --> 00:07:13,539
and that you rely upon and making sure

00:07:11,740 --> 00:07:14,710
that everything is ok after all the

00:07:13,539 --> 00:07:16,539
application that you're deploying is

00:07:14,710 --> 00:07:17,680
making use of that code and you know

00:07:16,539 --> 00:07:19,690
bundles that as part of your

00:07:17,680 --> 00:07:21,520
dependencies so we wanted to understand

00:07:19,690 --> 00:07:23,650
what is going on in terms of where do we

00:07:21,520 --> 00:07:26,469
find security vulnerabilities this is

00:07:23,650 --> 00:07:27,699
all like most of this is part of the

00:07:26,469 --> 00:07:29,560
opens the state of open source security

00:07:27,699 --> 00:07:31,090
or that we published in which we have

00:07:29,560 --> 00:07:33,099
taken a look at what happens both for

00:07:31,090 --> 00:07:35,650
users of sneek and the ecosystem itself

00:07:33,099 --> 00:07:38,620
etc and what we found for this example

00:07:35,650 --> 00:07:40,330
is 78% of the time when we will find

00:07:38,620 --> 00:07:42,639
security vulnerabilities for users you

00:07:40,330 --> 00:07:45,879
know using snake is we will find it for

00:07:42,639 --> 00:07:47,409
NPM in frontof dependencies so again

00:07:45,879 --> 00:07:48,849
going back to that example if you are

00:07:47,409 --> 00:07:50,500
you know a JavaScript or noir developer

00:07:48,849 --> 00:07:52,360
you're tracking all of the FASTA file

00:07:50,500 --> 00:07:55,270
change logs all of the angular and react

00:07:52,360 --> 00:07:56,560
change logs etc most of the time 78% of

00:07:55,270 --> 00:07:58,089
those when we find security

00:07:56,560 --> 00:08:00,520
vulnerabilities for your project as we

00:07:58,089 --> 00:08:02,740
scan it as we offer you fixes for it it

00:08:00,520 --> 00:08:03,969
will not be for that they reg dependency

00:08:02,740 --> 00:08:05,830
that you will use it will actually be

00:08:03,969 --> 00:08:07,270
most of the time for those transitive

00:08:05,830 --> 00:08:08,610
dependencies you can see this is

00:08:07,270 --> 00:08:10,719
actually a bit different between

00:08:08,610 --> 00:08:12,339
different deco system which is you know

00:08:10,719 --> 00:08:14,319
could say a lot about what is going on

00:08:12,339 --> 00:08:15,930
with oracle systems but i will not go

00:08:14,319 --> 00:08:18,639
into that right now

00:08:15,930 --> 00:08:20,199
so what can possibly go wrong with

00:08:18,639 --> 00:08:22,569
transitive dependencies in my

00:08:20,199 --> 00:08:23,949
applications so I have a whole different

00:08:22,569 --> 00:08:26,379
talk about what is happening with

00:08:23,949 --> 00:08:28,539
malicious packages on ecosystems and I

00:08:26,379 --> 00:08:30,909
won't relate in to one one of them and

00:08:28,539 --> 00:08:32,740
these are all examples and use cases of

00:08:30,909 --> 00:08:34,240
things that happened in security

00:08:32,740 --> 00:08:35,409
incidents that happen in the ecosystems

00:08:34,240 --> 00:08:38,529
I'm going to really into something

00:08:35,409 --> 00:08:41,199
that's called get cookies get cookies

00:08:38,529 --> 00:08:43,390
sounds I guess pretty simple in terms of

00:08:41,199 --> 00:08:49,209
what it does it parses HTTP headers for

00:08:43,390 --> 00:08:51,040
cookie data or does it so actually get

00:08:49,209 --> 00:08:54,350
cookies is nothing less than a command

00:08:51,040 --> 00:08:56,300
and control backdoor the sole purpose

00:08:54,350 --> 00:08:57,800
of allowing someone to attack your web

00:08:56,300 --> 00:09:00,890
server through sending command

00:08:57,800 --> 00:09:02,930
injections remotely so any web server

00:09:00,890 --> 00:09:04,370
that would bundle this dependency will

00:09:02,930 --> 00:09:06,500
actually allow a malicious attacker

00:09:04,370 --> 00:09:08,060
remotely knowing this vulnerability to

00:09:06,500 --> 00:09:11,690
go ahead and inject any kind of

00:09:08,060 --> 00:09:13,970
arbitrary code into your app how does it

00:09:11,690 --> 00:09:15,800
does so so the whole kind of exploit

00:09:13,970 --> 00:09:17,450
code in get cookies is roughly 40 lines

00:09:15,800 --> 00:09:19,580
of code I've actually summed up the

00:09:17,450 --> 00:09:21,590
important part here to process this

00:09:19,580 --> 00:09:23,360
remote code injection and it has a

00:09:21,590 --> 00:09:26,300
simple switch case does three things

00:09:23,360 --> 00:09:27,590
reset the buffer load data into the

00:09:26,300 --> 00:09:29,360
buffer which in our case will be

00:09:27,590 --> 00:09:31,510
JavaScript code and then execute

00:09:29,360 --> 00:09:33,710
whatever is on the buffer so someone

00:09:31,510 --> 00:09:35,720
having control on this web server could

00:09:33,710 --> 00:09:37,880
go ahead you know input inject malicious

00:09:35,720 --> 00:09:40,280
JavaScript code through things like HTTP

00:09:37,880 --> 00:09:44,600
headers this will process it you know

00:09:40,280 --> 00:09:46,220
reset it and run it now the attacker had

00:09:44,600 --> 00:09:48,320
to build a whole pyramid of nested

00:09:46,220 --> 00:09:49,970
dependencies to hide get cookies behind

00:09:48,320 --> 00:09:51,710
them mind you all of these tree

00:09:49,970 --> 00:09:53,180
dependencies are actually offsprings of

00:09:51,710 --> 00:09:55,460
the same attacker right all of them

00:09:53,180 --> 00:09:57,830
belong to the same one but one or two or

00:09:55,460 --> 00:10:00,920
three malicious packages on NPM having

00:09:57,830 --> 00:10:02,630
one billion packages inside will not you

00:10:00,920 --> 00:10:04,220
know be that much of a threat as in who

00:10:02,630 --> 00:10:06,200
would go ahead and install get cookies

00:10:04,220 --> 00:10:08,060
which has maybe zero downloads so

00:10:06,200 --> 00:10:10,040
without a vessel to propagate this and

00:10:08,060 --> 00:10:12,380
you know kind of claim trust it's gonna

00:10:10,040 --> 00:10:14,420
be hard so what this attacker was able

00:10:12,380 --> 00:10:17,180
to do is compromised this library called

00:10:14,420 --> 00:10:19,100
mail parser which has something like

00:10:17,180 --> 00:10:21,110
half a million downloads on the on the

00:10:19,100 --> 00:10:22,790
you know on the registry and true that

00:10:21,110 --> 00:10:24,170
you know be able to push those

00:10:22,790 --> 00:10:26,420
dependencies into the metal parser

00:10:24,170 --> 00:10:28,700
project now male parser itself is not a

00:10:26,420 --> 00:10:30,740
web server so having that bundled in or

00:10:28,700 --> 00:10:33,470
even required in years may not have been

00:10:30,740 --> 00:10:35,360
with you on harm's way but perhaps this

00:10:33,470 --> 00:10:37,580
was all done in order to provide some

00:10:35,360 --> 00:10:39,560
legitimacy in terms of someone searching

00:10:37,580 --> 00:10:41,570
for a get cookies management package and

00:10:39,560 --> 00:10:42,140
sees something gets downloaded half a

00:10:41,570 --> 00:10:45,770
million times

00:10:42,140 --> 00:10:47,600
well maybe I'll use it so this kind of

00:10:45,770 --> 00:10:49,400
malicious packages happen all the time

00:10:47,600 --> 00:10:51,140
here's an example from the NP NGS

00:10:49,400 --> 00:10:53,060
advisories we could find that also as

00:10:51,140 --> 00:10:54,440
like a sneak volunteer injuries doesn't

00:10:53,060 --> 00:10:56,150
really matter which one you're tracking

00:10:54,440 --> 00:10:58,010
except I wanted to give you the fact

00:10:56,150 --> 00:10:59,180
that all of these malicious packages

00:10:58,010 --> 00:11:01,070
different kind of type of squaring

00:10:59,180 --> 00:11:03,260
attacks happen all the time right this

00:11:01,070 --> 00:11:06,410
is November 27 this is just like two

00:11:03,260 --> 00:11:07,660
weeks ago how do we handle all of that

00:11:06,410 --> 00:11:10,120
how do we you know my

00:11:07,660 --> 00:11:11,620
sure into being responsible to

00:11:10,120 --> 00:11:13,720
open-source dependencies to what do we

00:11:11,620 --> 00:11:15,970
install for the sake of data I've

00:11:13,720 --> 00:11:18,070
created a project while back called npq

00:11:15,970 --> 00:11:20,620
what it does is when you do an ant pick

00:11:18,070 --> 00:11:21,670
you install something like jQuery as you

00:11:20,620 --> 00:11:24,220
can see here this is a wrong

00:11:21,670 --> 00:11:26,980
abbreviation of jQuery because this is

00:11:24,220 --> 00:11:28,630
actually a type of kwatak package it

00:11:26,980 --> 00:11:30,460
will go and do some due diligence it

00:11:28,630 --> 00:11:31,870
will check for example how much or is

00:11:30,460 --> 00:11:33,790
this package is it's something that gets

00:11:31,870 --> 00:11:36,100
20 download is it just new someone is

00:11:33,790 --> 00:11:37,180
trying to maliciously inject users or is

00:11:36,100 --> 00:11:38,590
it something that gets downloaded a

00:11:37,180 --> 00:11:39,880
million times times a month to probably

00:11:38,590 --> 00:11:41,770
get some kind of trust from the

00:11:39,880 --> 00:11:43,390
community around it does it have a

00:11:41,770 --> 00:11:45,610
repository open source repository

00:11:43,390 --> 00:11:46,900
associated with it to allow you to go

00:11:45,610 --> 00:11:48,070
ahead you know and and ensure that

00:11:46,900 --> 00:11:49,990
there's like an open source code base

00:11:48,070 --> 00:11:51,730
that you can in check etc maybe it has

00:11:49,990 --> 00:11:53,380
wonder abilities in it why would you not

00:11:51,730 --> 00:11:54,790
know about it before installing it you

00:11:53,380 --> 00:11:56,800
know rather than after the fact and then

00:11:54,790 --> 00:11:58,030
finding out ways to mitigate it so

00:11:56,800 --> 00:12:00,300
here's one example that we can go ahead

00:11:58,030 --> 00:12:02,350
and use to be a bit more responsible and

00:12:00,300 --> 00:12:04,330
security vulnerabilities happen all the

00:12:02,350 --> 00:12:06,460
time what are you using you know

00:12:04,330 --> 00:12:08,140
different types of language ecosystems

00:12:06,460 --> 00:12:10,630
here is marked for example a very

00:12:08,140 --> 00:12:12,580
popular markdown parsing library for

00:12:10,630 --> 00:12:15,310
node and JavaScript kind of used between

00:12:12,580 --> 00:12:17,020
the server and the front-end as well you

00:12:15,310 --> 00:12:18,550
can see that there's a fix for it for

00:12:17,020 --> 00:12:20,410
like a reduce vulnerabilities happen you

00:12:18,550 --> 00:12:22,690
know just awhile back right just few

00:12:20,410 --> 00:12:24,520
months back and the interesting thing

00:12:22,690 --> 00:12:26,050
about vulnerability is at least in the

00:12:24,520 --> 00:12:27,820
last two years is that they have a bit

00:12:26,050 --> 00:12:30,550
shifted in terms of the trend that we're

00:12:27,820 --> 00:12:32,740
looking at so when 2016 as we look at

00:12:30,550 --> 00:12:35,620
you know the high and medium have like a

00:12:32,740 --> 00:12:37,660
kind of ratio where there's more a

00:12:35,620 --> 00:12:40,120
medium than high in the last two years

00:12:37,660 --> 00:12:41,320
we've seen this ratio actually flip so

00:12:40,120 --> 00:12:44,830
more of this vulnerability that we're

00:12:41,320 --> 00:12:46,360
seeing actually high than medium so

00:12:44,830 --> 00:12:47,980
multiple uppers and maintainers I think

00:12:46,360 --> 00:12:50,230
would agree that security should play an

00:12:47,980 --> 00:12:53,200
important role when we're building our

00:12:50,230 --> 00:12:54,250
applications except there are no text

00:12:53,200 --> 00:12:55,780
books and how do you build secure

00:12:54,250 --> 00:12:58,840
applications or so many guidelines and

00:12:55,780 --> 00:13:00,430
os kind of like standards or like semi

00:12:58,840 --> 00:13:01,870
standards but there's no like

00:13:00,430 --> 00:13:03,430
open-source maintainer in this room that

00:13:01,870 --> 00:13:04,780
would you know say I'm following this

00:13:03,430 --> 00:13:07,990
and that standard and this is how I do

00:13:04,780 --> 00:13:09,430
secure code so standard can also vary

00:13:07,990 --> 00:13:11,230
between different projects which means

00:13:09,430 --> 00:13:13,090
you know one project can follow very

00:13:11,230 --> 00:13:14,650
good and highly secure guidelines and

00:13:13,090 --> 00:13:16,420
secure coding conventions etc but

00:13:14,650 --> 00:13:18,940
another open source project know very

00:13:16,420 --> 00:13:20,530
very you know popular in the same in the

00:13:18,940 --> 00:13:21,430
same sense would not follow those as

00:13:20,530 --> 00:13:23,050
well so

00:13:21,430 --> 00:13:25,810
of these security standards things for

00:13:23,050 --> 00:13:26,950
open-source project is very varied in

00:13:25,810 --> 00:13:29,440
terms of how it is done

00:13:26,950 --> 00:13:31,750
so just in this year's 2019 state of the

00:13:29,440 --> 00:13:33,970
october's report from github security

00:13:31,750 --> 00:13:37,029
was actually the most popular project

00:13:33,970 --> 00:13:38,350
integration app category and the more we

00:13:37,029 --> 00:13:40,089
use open source software I think that we

00:13:38,350 --> 00:13:42,190
realized this research we accumulate

00:13:40,089 --> 00:13:43,899
upon ourselves as we're trying to use

00:13:42,190 --> 00:13:46,029
someone else's code in our application

00:13:43,899 --> 00:13:48,880
and having automated tools that we can

00:13:46,029 --> 00:13:50,170
use in our in our sea ice is out most

00:13:48,880 --> 00:13:51,310
important right because this is how

00:13:50,170 --> 00:13:53,080
we're going to be able to scale up

00:13:51,310 --> 00:13:54,610
security as part of the way that we

00:13:53,080 --> 00:13:58,870
scale up the public delivery of our

00:13:54,610 --> 00:14:00,610
applications code so truly a survey we

00:13:58,870 --> 00:14:03,850
asked some questions for maintainers and

00:14:00,610 --> 00:14:05,620
developers in this part we asked open

00:14:03,850 --> 00:14:07,089
source materials to write their security

00:14:05,620 --> 00:14:09,610
knowledge and how good that is

00:14:07,089 --> 00:14:11,140
so we found that 70% of open-source

00:14:09,610 --> 00:14:13,180
maintainer would actually not feel that

00:14:11,140 --> 00:14:15,520
confident in handling a security issue

00:14:13,180 --> 00:14:16,930
if it was disclosed to them so averaging

00:14:15,520 --> 00:14:20,589
their security knowledge somewhere

00:14:16,930 --> 00:14:22,180
around six point six out of ten moreover

00:14:20,589 --> 00:14:24,220
as much of you know we're seeing

00:14:22,180 --> 00:14:25,930
adoption of CI tools whether that's like

00:14:24,220 --> 00:14:27,940
things like circle CI for example to

00:14:25,930 --> 00:14:32,440
help us you know you know have a have a

00:14:27,940 --> 00:14:34,450
good CI CD a kind of pipeline thing they

00:14:32,440 --> 00:14:35,740
still go underutilized so you know we're

00:14:34,450 --> 00:14:37,750
not enabling you know we're not

00:14:35,740 --> 00:14:39,670
empowering that the CI integration that

00:14:37,750 --> 00:14:42,190
we have for applications this devops

00:14:39,670 --> 00:14:44,440
pipeline to go ahead and put security

00:14:42,190 --> 00:14:46,240
into it as a testament of that you know

00:14:44,440 --> 00:14:48,040
when we asked developers you know how

00:14:46,240 --> 00:14:50,470
often or what is the currents of like

00:14:48,040 --> 00:14:51,670
the security auditing one of four open

00:14:50,470 --> 00:14:54,160
source main tenets not perform any

00:14:51,670 --> 00:14:57,970
source any sort of security auditing for

00:14:54,160 --> 00:14:59,560
their projects so security practices are

00:14:57,970 --> 00:15:01,660
taking many different shapes and forms

00:14:59,560 --> 00:15:02,980
and some of which are really easy winds

00:15:01,660 --> 00:15:04,990
for example choosing a really good

00:15:02,980 --> 00:15:06,880
password so your package would not get

00:15:04,990 --> 00:15:08,740
compromised right like mail processor

00:15:06,880 --> 00:15:10,060
like many other packages and incidents

00:15:08,740 --> 00:15:12,459
that were happening before on the

00:15:10,060 --> 00:15:14,320
ecosystem another option is for example

00:15:12,459 --> 00:15:17,560
to enable 2fa in your in your code

00:15:14,320 --> 00:15:18,910
whether that is you know the NPM package

00:15:17,560 --> 00:15:21,279
registry or docker hub or something like

00:15:18,910 --> 00:15:22,360
that but how often are we doing that so

00:15:21,279 --> 00:15:25,870
what is the state of to a PHA for

00:15:22,360 --> 00:15:28,060
example in the NPM ecosystem well as we

00:15:25,870 --> 00:15:30,730
look back into it and to FA had been

00:15:28,060 --> 00:15:33,070
available on NPM since the late 2017 and

00:15:30,730 --> 00:15:34,900
maybe despite the fact that had been

00:15:33,070 --> 00:15:35,379
there for so long there's only a very

00:15:34,900 --> 00:15:38,199
small

00:15:35,379 --> 00:15:39,910
percentage of of the ecosystem of

00:15:38,199 --> 00:15:42,009
developing developers and maintenance

00:15:39,910 --> 00:15:44,649
actually enabling that and this accounts

00:15:42,009 --> 00:15:46,029
also very small insignificant amount of

00:15:44,649 --> 00:15:48,660
packages out of the whole million

00:15:46,029 --> 00:15:51,369
packages happening on NPM itself so its

00:15:48,660 --> 00:15:53,139
responsibility of all of us enabling 2fa

00:15:51,369 --> 00:15:54,759
making that possible for us making the

00:15:53,139 --> 00:15:56,639
security possible for users consuming

00:15:54,759 --> 00:15:58,569
open-source software

00:15:56,639 --> 00:16:00,039
interesting take is how does this affect

00:15:58,569 --> 00:16:03,009
and how does this look like an

00:16:00,039 --> 00:16:05,319
adjustment ecosystems for example what's

00:16:03,009 --> 00:16:07,919
the state of open source of 2fa for

00:16:05,319 --> 00:16:11,439
example in in docker hub as an ecosystem

00:16:07,919 --> 00:16:12,849
well funny thing is it's zero percent

00:16:11,439 --> 00:16:14,829
and there's a whole funny story around

00:16:12,849 --> 00:16:16,479
it and that's kind of accurate to

00:16:14,829 --> 00:16:16,749
October 1st which I'll get to in in a

00:16:16,479 --> 00:16:19,029
minute

00:16:16,749 --> 00:16:21,459
and why does that happen because

00:16:19,029 --> 00:16:24,009
somewhere around June someone on the

00:16:21,459 --> 00:16:25,269
docker repository chimed in on this

00:16:24,009 --> 00:16:27,519
issue and said you know we're planning

00:16:25,269 --> 00:16:29,079
to rolling out this multi-factor

00:16:27,519 --> 00:16:31,720
authentication at the end of June

00:16:29,079 --> 00:16:34,689
everyone we're thumbs up great amazing

00:16:31,720 --> 00:16:36,099
let's do it except it didn't happen

00:16:34,689 --> 00:16:38,769
someone chanting Angela and say you know

00:16:36,099 --> 00:16:43,059
hey we're July what's up you said June

00:16:38,769 --> 00:16:44,559
and then came August you know someone

00:16:43,059 --> 00:16:47,139
chimed in again and said you know this

00:16:44,559 --> 00:16:48,879
is August what's going on fellas how are

00:16:47,139 --> 00:16:51,329
we doing there I like it that they are

00:16:48,879 --> 00:16:53,139
giving the programmers kind of

00:16:51,329 --> 00:16:54,669
perspective into it I'm a programmer

00:16:53,139 --> 00:16:56,679
myself how hard can it be

00:16:54,669 --> 00:16:59,289
all right so we didn't have it back in

00:16:56,679 --> 00:17:01,359
in July back in August guess what

00:16:59,289 --> 00:17:03,240
happened in September nothing much we

00:17:01,359 --> 00:17:04,899
didn't not have 2fa available they're

00:17:03,240 --> 00:17:07,059
reminding you that we're talking about

00:17:04,899 --> 00:17:09,519
docker hub this is a very primary

00:17:07,059 --> 00:17:11,069
registry for docker container probably

00:17:09,519 --> 00:17:13,799
powering a lot of applications for

00:17:11,069 --> 00:17:16,269
everyone in this room including myself

00:17:13,799 --> 00:17:17,860
an October coming up right what are we

00:17:16,269 --> 00:17:19,929
what is happening there so there's an

00:17:17,860 --> 00:17:21,879
interesting update we've been rolling

00:17:19,929 --> 00:17:25,360
out personal access tokens which is not

00:17:21,879 --> 00:17:26,919
the same as 2fa but you know maybe maybe

00:17:25,360 --> 00:17:28,120
a step in a good direction except you

00:17:26,919 --> 00:17:30,039
know we need to remind them that maybe

00:17:28,120 --> 00:17:31,720
we need to afaik and you know then it

00:17:30,039 --> 00:17:33,220
happened everyone are happy so I hope

00:17:31,720 --> 00:17:35,919
after this talk everyone is gonna have

00:17:33,220 --> 00:17:40,149
to FA enabled on docker hub and on NPM

00:17:35,919 --> 00:17:41,409
j/s so the security blind spot of lock

00:17:40,149 --> 00:17:43,059
fallen when I talk about this as an

00:17:41,409 --> 00:17:44,950
example of going back again to maintain

00:17:43,059 --> 00:17:47,559
ORS and you know open source activities

00:17:44,950 --> 00:17:48,940
and how often are have we as maintainer

00:17:47,559 --> 00:17:50,830
isn't as developers

00:17:48,940 --> 00:17:52,960
are kind of putting this out of pilot

00:17:50,830 --> 00:17:54,580
mode where we didn't even consider the

00:17:52,960 --> 00:17:56,350
security risk of you know in attack

00:17:54,580 --> 00:17:58,840
vectors or things that we do as like a

00:17:56,350 --> 00:18:01,510
day to day activities for the most basic

00:17:58,840 --> 00:18:03,850
things so I'll give you an example here

00:18:01,510 --> 00:18:05,770
is a pull request I opened on github

00:18:03,850 --> 00:18:07,630
but you can see that I have actually

00:18:05,770 --> 00:18:09,190
part of this pull request for a real

00:18:07,630 --> 00:18:11,590
project actually change some

00:18:09,190 --> 00:18:15,160
dependencies as I needed to what's part

00:18:11,590 --> 00:18:17,320
of my contribution can see that my yarn

00:18:15,160 --> 00:18:20,290
log file is actually not being displayed

00:18:17,320 --> 00:18:21,880
because we take that kind of for granted

00:18:20,290 --> 00:18:23,470
it's a machine generated thing is there

00:18:21,880 --> 00:18:25,360
anything that I need to look at maybe

00:18:23,470 --> 00:18:28,750
not you know there's a whole lot of code

00:18:25,360 --> 00:18:30,370
being changed as well so it's kind of

00:18:28,750 --> 00:18:32,710
collapsed and you know do not show you

00:18:30,370 --> 00:18:34,240
all of that and if I will open it up and

00:18:32,710 --> 00:18:37,060
show you what were my contributions

00:18:34,240 --> 00:18:39,460
along this dependency update along the

00:18:37,060 --> 00:18:41,230
code that I actually added as well maybe

00:18:39,460 --> 00:18:43,000
the those of you will with a good

00:18:41,230 --> 00:18:43,720
eyesight here will actually see that on

00:18:43,000 --> 00:18:46,210
the left

00:18:43,720 --> 00:18:48,220
I'm actually changing something that is

00:18:46,210 --> 00:18:50,200
an actual package that is being used

00:18:48,220 --> 00:18:51,820
from the registry and you can see on the

00:18:50,200 --> 00:18:53,800
right that my change is actually using

00:18:51,820 --> 00:18:56,380
the exact same package but from my own

00:18:53,800 --> 00:18:59,200
controlled domain whether that's like a

00:18:56,380 --> 00:19:00,730
an NPM proxy mirror or I can already

00:18:59,200 --> 00:19:02,710
install it directly as you can install

00:19:00,730 --> 00:19:05,020
NPM packages from github and it has

00:19:02,710 --> 00:19:07,090
malicious code in it so as you will

00:19:05,020 --> 00:19:08,920
merge this pull request we'll probably

00:19:07,090 --> 00:19:11,410
not see it because you know you did not

00:19:08,920 --> 00:19:12,790
even take care of go ahead and you know

00:19:11,410 --> 00:19:14,860
reviewing what's you know in a locked

00:19:12,790 --> 00:19:16,240
file go ahead merge it maybe you're at

00:19:14,860 --> 00:19:18,130
this point when you're doing an NPM

00:19:16,240 --> 00:19:20,470
install the next time any of those

00:19:18,130 --> 00:19:21,670
developers we usually know enough look

00:19:20,470 --> 00:19:23,140
probably usually being used for

00:19:21,670 --> 00:19:25,270
application developers of a project

00:19:23,140 --> 00:19:27,160
specifically not the consumers of it you

00:19:25,270 --> 00:19:29,230
might be susceptible to this injection

00:19:27,160 --> 00:19:30,700
attack so why don't we have tools to

00:19:29,230 --> 00:19:33,070
help us with it's very simple things

00:19:30,700 --> 00:19:35,290
there we go I built this thing called

00:19:33,070 --> 00:19:37,510
lock file lint I think as JavaScript

00:19:35,290 --> 00:19:39,340
developers we heavily rely on static

00:19:37,510 --> 00:19:40,690
analysis and linters so there we go

00:19:39,340 --> 00:19:42,430
another one that you can add to your CI

00:19:40,690 --> 00:19:43,720
lock file and you can tell it to

00:19:42,430 --> 00:19:46,300
validate that everything is first of all

00:19:43,720 --> 00:19:48,700
HTTPS specific sources what are you

00:19:46,300 --> 00:19:49,930
using you know just NPM or just yarn you

00:19:48,700 --> 00:19:52,390
don't want anyone to inject anything

00:19:49,930 --> 00:19:54,550
from github or anything other I like

00:19:52,390 --> 00:19:56,640
that there we go another tool that you

00:19:54,550 --> 00:19:59,170
can go ahead and use in your CI

00:19:56,640 --> 00:20:01,330
perhaps a silver lining in in most of

00:19:59,170 --> 00:20:02,840
this talk I would say you know we're not

00:20:01,330 --> 00:20:04,429
doing that bad but

00:20:02,840 --> 00:20:06,590
across the ecosystem but I would say

00:20:04,429 --> 00:20:08,030
what is the silver lining here as we ask

00:20:06,590 --> 00:20:09,860
the velop resume turns you know who is

00:20:08,030 --> 00:20:11,900
there is Swiss like actually responsible

00:20:09,860 --> 00:20:13,549
for security and the most of the

00:20:11,900 --> 00:20:14,720
respondents have been around developers

00:20:13,549 --> 00:20:16,520
and this is great because we're seeing

00:20:14,720 --> 00:20:18,950
this you know strong statement you know

00:20:16,520 --> 00:20:20,270
strong testament of developers being

00:20:18,950 --> 00:20:22,070
like fools back and it's not just owning

00:20:20,270 --> 00:20:23,660
you know the DevOps or the back end in

00:20:22,070 --> 00:20:25,250
the front end it's also being you know

00:20:23,660 --> 00:20:26,840
responsible for things like performance

00:20:25,250 --> 00:20:29,419
or applications accessibility

00:20:26,840 --> 00:20:32,510
requirements how about security for

00:20:29,419 --> 00:20:35,030
applications as well understanding the

00:20:32,510 --> 00:20:36,500
risk of for us as maintenance of open

00:20:35,030 --> 00:20:38,809
source software to actually like

00:20:36,500 --> 00:20:41,270
mitigate and and push out security fixes

00:20:38,809 --> 00:20:43,370
is really really important in terms of

00:20:41,270 --> 00:20:44,780
how are we actually rolling this out so

00:20:43,370 --> 00:20:47,120
I want to show you an example happened

00:20:44,780 --> 00:20:49,130
not a whole long time ago this is a

00:20:47,120 --> 00:20:51,320
github project for a very popular NPM

00:20:49,130 --> 00:20:52,640
package doesn't remember doesn't matter

00:20:51,320 --> 00:20:53,809
the name because these kind of things

00:20:52,640 --> 00:20:55,760
happen all the time but I'm giving you

00:20:53,809 --> 00:20:56,600
one example where someone was chiming

00:20:55,760 --> 00:20:58,580
gaining saying oh there's a

00:20:56,600 --> 00:21:00,320
vulnerability that was reported are

00:20:58,580 --> 00:21:02,330
there's a link to the speak phone you

00:21:00,320 --> 00:21:04,580
know telling the person to go ahead and

00:21:02,330 --> 00:21:06,260
release like the owner of this package

00:21:04,580 --> 00:21:08,870
to go ahead and release like a new

00:21:06,260 --> 00:21:10,790
version so this can be consumed as a fix

00:21:08,870 --> 00:21:12,679
for for the package that they are

00:21:10,790 --> 00:21:15,350
relying upon at the transitive DEP that

00:21:12,679 --> 00:21:17,120
has a vulnerability in it the meter did

00:21:15,350 --> 00:21:18,919
get involved right this did happen you

00:21:17,120 --> 00:21:21,380
know everyone were proactive about doing

00:21:18,919 --> 00:21:23,000
it except you know I think kind of like

00:21:21,380 --> 00:21:25,190
lack of education of how you mitigate

00:21:23,000 --> 00:21:27,410
security issues it was published at a

00:21:25,190 --> 00:21:28,610
major version so if version 2 is

00:21:27,410 --> 00:21:31,040
vulnerable and you publish as a

00:21:28,610 --> 00:21:33,140
maintainer affixed in version 3 that's

00:21:31,040 --> 00:21:35,090
gonna be a bit tricky because being

00:21:33,140 --> 00:21:37,429
having an automated upgrade from 2 to 3

00:21:35,090 --> 00:21:39,440
has different semantic meanings to it

00:21:37,429 --> 00:21:41,390
maybe an API was broken maybe you know I

00:21:39,440 --> 00:21:42,980
see a very elaborate C I will not go

00:21:41,390 --> 00:21:44,080
ahead and update it because they are

00:21:42,980 --> 00:21:46,400
afraid that this will break their

00:21:44,080 --> 00:21:47,870
applications so there's a whole lot of

00:21:46,400 --> 00:21:49,580
you know a security education not in

00:21:47,870 --> 00:21:50,929
terms of how you write secure code but

00:21:49,580 --> 00:21:52,970
also how do you push that how do you

00:21:50,929 --> 00:21:55,130
make that available to users to consume

00:21:52,970 --> 00:21:56,780
it in a very seamless way that you know

00:21:55,130 --> 00:21:59,780
automated upgrades things like you know

00:21:56,780 --> 00:22:01,370
dependable or sneak upgrade PRS would be

00:21:59,780 --> 00:22:05,540
able to go ahead and pull in those new

00:22:01,370 --> 00:22:06,710
versions for you so there's a whole lot

00:22:05,540 --> 00:22:08,870
of best practices for open-source

00:22:06,710 --> 00:22:11,990
maintainer I've got this cheat sheet

00:22:08,870 --> 00:22:13,220
some of it is kind of left here you can

00:22:11,990 --> 00:22:14,900
find it online as well I've worked on

00:22:13,220 --> 00:22:16,310
that with Juan de kado who is the

00:22:14,900 --> 00:22:18,470
maintainer over that

00:22:16,310 --> 00:22:21,800
sure local NPM proxy it's been doing an

00:22:18,470 --> 00:22:23,900
amazing job as well for open source so

00:22:21,800 --> 00:22:25,520
moving on what about open source

00:22:23,900 --> 00:22:27,410
dependence is impacting container

00:22:25,520 --> 00:22:29,330
security technology what is this

00:22:27,410 --> 00:22:31,160
increased of adoption I think around

00:22:29,330 --> 00:22:32,810
docker and you know the strong wrote of

00:22:31,160 --> 00:22:35,090
around open source that we're saying and

00:22:32,810 --> 00:22:36,350
is expected to grow more and more we're

00:22:35,090 --> 00:22:38,630
talking about more than 1 billion

00:22:36,350 --> 00:22:40,240
downloads happening probably every one

00:22:38,630 --> 00:22:43,040
or two weeks on the container registry

00:22:40,240 --> 00:22:45,350
docker hub reported about 1 million

00:22:43,040 --> 00:22:48,590
applications in the form of container

00:22:45,350 --> 00:22:50,660
images being uploaded to the registry in

00:22:48,590 --> 00:22:52,880
the last in the docker hub registry I

00:22:50,660 --> 00:22:54,860
should say in the last year so this is

00:22:52,880 --> 00:22:57,170
you know very very much fueling or open

00:22:54,860 --> 00:22:58,940
source wrote accept docker images you

00:22:57,170 --> 00:23:00,980
know almost always bring known

00:22:58,940 --> 00:23:03,080
vulnerabilities alongside a great value

00:23:00,980 --> 00:23:05,150
so if we take a look at you know just

00:23:03,080 --> 00:23:06,500
counting those 10 most popular docker

00:23:05,150 --> 00:23:08,810
images on docker hub just you know

00:23:06,500 --> 00:23:10,610
scanning that most popular page of all

00:23:08,810 --> 00:23:12,860
of those images we would find that if

00:23:10,610 --> 00:23:14,750
you just get a default images of each of

00:23:12,860 --> 00:23:16,700
them they at least have each 30

00:23:14,750 --> 00:23:19,370
vulnerabilities inside them notice you

00:23:16,700 --> 00:23:22,250
know presumably are here with 580 as

00:23:19,370 --> 00:23:23,480
well so most of those vulnerabilities

00:23:22,250 --> 00:23:25,940
are actually recognized from the base

00:23:23,480 --> 00:23:27,320
image or your application so this is why

00:23:25,940 --> 00:23:28,790
it is so crucial to understand you know

00:23:27,320 --> 00:23:30,590
what are you using as a base or as a

00:23:28,790 --> 00:23:33,020
perfect image in your docker file if

00:23:30,590 --> 00:23:34,040
you're using something like debian jesse

00:23:33,020 --> 00:23:35,810
you're gonna pull in something like

00:23:34,040 --> 00:23:39,080
seven hundred dependencies if you're

00:23:35,810 --> 00:23:40,670
using something like buster or justice

00:23:39,080 --> 00:23:42,740
liam or some other variations of it

00:23:40,670 --> 00:23:44,480
I'm gonna pull smaller images you know

00:23:42,740 --> 00:23:47,120
smaller dependencies of always libraries

00:23:44,480 --> 00:23:49,430
inside them and thus also I'm gonna pull

00:23:47,120 --> 00:23:51,650
in lesser honorable owner abilities as

00:23:49,430 --> 00:23:53,090
well that's a smaller image and the

00:23:51,650 --> 00:23:54,560
thing is that fixing it can be really

00:23:53,090 --> 00:23:56,750
easy so if you understand if you know

00:23:54,560 --> 00:23:58,190
this fact you know you you understand

00:23:56,750 --> 00:24:00,470
that fixing it is something that is very

00:23:58,190 --> 00:24:02,300
easy to do for example 44% of those

00:24:00,470 --> 00:24:04,790
darker image vulnerabilities can just be

00:24:02,300 --> 00:24:06,830
you know fixed if you change too on your

00:24:04,790 --> 00:24:09,350
image if you do not use no latest or no

00:24:06,830 --> 00:24:12,740
10 but you use node 10 slim for example

00:24:09,350 --> 00:24:14,990
there is here is here is the open source

00:24:12,740 --> 00:24:16,760
on durability is in each of those image

00:24:14,990 --> 00:24:19,460
tags for docker hub you can see that

00:24:16,760 --> 00:24:20,930
using node 10 will pull in 582

00:24:19,460 --> 00:24:22,430
vulnerabilities into that image just by

00:24:20,930 --> 00:24:23,990
using you know just by using that you're

00:24:22,430 --> 00:24:26,150
vulnerable to this amount of

00:24:23,990 --> 00:24:27,950
vulnerabilities now sure granted may

00:24:26,150 --> 00:24:29,570
know you may not all be exploitable they

00:24:27,950 --> 00:24:29,810
may not have all exploit in the wild but

00:24:29,570 --> 00:24:32,450
why

00:24:29,810 --> 00:24:33,890
would you ship by default almost 600

00:24:32,450 --> 00:24:36,170
vulnerabilities with your doctor

00:24:33,890 --> 00:24:39,220
application there's no sane way or sane

00:24:36,170 --> 00:24:41,570
reason to do that use a different image

00:24:39,220 --> 00:24:44,750
except I know it is not that you know

00:24:41,570 --> 00:24:46,010
it's a bit of a smarty kind of way from

00:24:44,750 --> 00:24:47,630
it'll just go ahead and say it but we

00:24:46,010 --> 00:24:49,190
need a tool to help us do this this is

00:24:47,630 --> 00:24:50,750
you know an example of how stick tests

00:24:49,190 --> 00:24:52,850
that you can use other tools as well but

00:24:50,750 --> 00:24:55,010
idea of tooling friendly tooling that

00:24:52,850 --> 00:24:56,960
helped us figure out you know we'll

00:24:55,010 --> 00:24:58,960
maybe you should attack I detected that

00:24:56,960 --> 00:25:02,240
you're using no dot and something it has

00:24:58,960 --> 00:25:03,740
nine hundred almost owner abilities you

00:25:02,240 --> 00:25:06,170
can consider moving to any of these

00:25:03,740 --> 00:25:08,090
other alternative images that you can

00:25:06,170 --> 00:25:09,200
try and use and mitigate and these

00:25:08,090 --> 00:25:11,720
securities that you have so instead of

00:25:09,200 --> 00:25:13,760
having pulling in 862 vulnerabilities

00:25:11,720 --> 00:25:15,350
you'll be pulling in only 54 of them

00:25:13,760 --> 00:25:19,820
which you know may be an acceptable risk

00:25:15,350 --> 00:25:22,070
in your in your in your workplace the

00:25:19,820 --> 00:25:23,990
only the other thing that we should kind

00:25:22,070 --> 00:25:25,970
of like pay attention to is that just by

00:25:23,990 --> 00:25:27,620
rebuilding an image we can we can go

00:25:25,970 --> 00:25:29,510
ahead and mitigate 20% of the darker

00:25:27,620 --> 00:25:31,280
image vulnerabilities because rebuilding

00:25:29,510 --> 00:25:32,990
an image may pull it depending on how

00:25:31,280 --> 00:25:34,910
the image is built you know when you opt

00:25:32,990 --> 00:25:36,500
get updates or new upgrades coming in

00:25:34,910 --> 00:25:39,980
and pulling in your versions if nothing

00:25:36,500 --> 00:25:43,970
is have been pinned by the dependency

00:25:39,980 --> 00:25:44,930
manager inside the OS itself so we're

00:25:43,970 --> 00:25:46,610
talking a lot about container technology

00:25:44,930 --> 00:25:48,110
you know we also ask some people some

00:25:46,610 --> 00:25:50,180
questions about this so when do you scan

00:25:48,110 --> 00:25:52,160
your daughter images right for OS

00:25:50,180 --> 00:25:53,690
vulnerabilities interestingly even

00:25:52,160 --> 00:25:54,830
though security is such an important

00:25:53,690 --> 00:25:57,050
part even though there's a whole train

00:25:54,830 --> 00:25:59,960
of security CVS going on and we're not

00:25:57,050 --> 00:26:01,640
so as 50% of developers will fail to do

00:25:59,960 --> 00:26:03,080
so they will not scan those dependencies

00:26:01,640 --> 00:26:05,450
even it is something that it's very easy

00:26:03,080 --> 00:26:07,040
to do many tooling available free and

00:26:05,450 --> 00:26:10,250
some of them are open source as well you

00:26:07,040 --> 00:26:12,590
can go ahead and and check that what

00:26:10,250 --> 00:26:14,660
about you have those containers deploy

00:26:12,590 --> 00:26:16,610
to production what about going ahead and

00:26:14,660 --> 00:26:18,650
testing this on production because

00:26:16,610 --> 00:26:20,810
unlike functions which are very

00:26:18,650 --> 00:26:22,310
short-lived boqueria docker containers

00:26:20,810 --> 00:26:23,960
could be very long-lived you could have

00:26:22,310 --> 00:26:25,580
a very legacy service or micro service

00:26:23,960 --> 00:26:27,770
that the team is using has been deployed

00:26:25,580 --> 00:26:29,480
to production no no one had pushed any

00:26:27,770 --> 00:26:31,340
update on to it it's been running for

00:26:29,480 --> 00:26:32,690
like a month or two it is now in

00:26:31,340 --> 00:26:34,070
production maybe there are new civvies

00:26:32,690 --> 00:26:36,020
affecting it something like a new

00:26:34,070 --> 00:26:39,940
heartbleed or whatever that could be

00:26:36,020 --> 00:26:42,230
impacting it still 50% almost 50% of

00:26:39,940 --> 00:26:44,000
developers or engineers would not even

00:26:42,230 --> 00:26:46,440
find out about it

00:26:44,000 --> 00:26:48,750
so I guess another silver lining for

00:26:46,440 --> 00:26:50,580
container technology is that developers

00:26:48,750 --> 00:26:52,200
are still even for that for the sake of

00:26:50,580 --> 00:26:54,000
docker images and docker father stuff

00:26:52,200 --> 00:26:55,920
like that you know with the empowerment

00:26:54,000 --> 00:26:57,870
I think of developers to kind of own

00:26:55,920 --> 00:26:59,580
their infrastructure as well we're

00:26:57,870 --> 00:27:01,230
seeing a good I think it good and

00:26:59,580 --> 00:27:03,810
positive trend in terms of you know us

00:27:01,230 --> 00:27:06,990
as developers owning the security of our

00:27:03,810 --> 00:27:08,700
container technology as well so some

00:27:06,990 --> 00:27:10,440
best practices around docker image

00:27:08,700 --> 00:27:12,330
security are that you can find or the

00:27:10,440 --> 00:27:14,430
whole kind of linters and how to scan

00:27:12,330 --> 00:27:15,870
them and you know very easy things that

00:27:14,430 --> 00:27:18,720
you can go ahead and pull into your

00:27:15,870 --> 00:27:19,830
pipeline it's you can go ahead and like

00:27:18,720 --> 00:27:20,820
ping me afterwards I'll give you all the

00:27:19,830 --> 00:27:23,430
links and all this will be available

00:27:20,820 --> 00:27:26,130
after the talk as well but I would I

00:27:23,430 --> 00:27:27,750
would want to end off with with kind of

00:27:26,130 --> 00:27:29,370
like this note or attackers are kind of

00:27:27,750 --> 00:27:31,470
kind of targeting open source because

00:27:29,370 --> 00:27:33,900
you know finding one vulnerability one

00:27:31,470 --> 00:27:35,580
CV affecting you know fast if I annular

00:27:33,900 --> 00:27:38,220
whatever kind of open source project

00:27:35,580 --> 00:27:40,230
that you may use is also kind of

00:27:38,220 --> 00:27:42,060
translates into many victims because

00:27:40,230 --> 00:27:43,680
there's always a lot of users for these

00:27:42,060 --> 00:27:45,990
open source packages so if something has

00:27:43,680 --> 00:27:47,970
you know very large popularity it means

00:27:45,990 --> 00:27:49,980
they'll probably be able to infect or

00:27:47,970 --> 00:27:51,870
you know attack a lot of consumers as

00:27:49,980 --> 00:27:54,000
well as not everyone may be up to date

00:27:51,870 --> 00:27:55,920
not everyone may be rolling out patches

00:27:54,000 --> 00:27:57,780
and upgrades as fast as they can and

00:27:55,920 --> 00:28:00,200
this is why it is so easy for attackers

00:27:57,780 --> 00:28:02,760
to just target open source software

00:28:00,200 --> 00:28:04,650
what if security was a bit easier was

00:28:02,760 --> 00:28:06,450
kind of more developer-friendly was

00:28:04,650 --> 00:28:08,610
actually actionable so not just allowing

00:28:06,450 --> 00:28:10,050
you to like learn about your new

00:28:08,610 --> 00:28:12,300
vulnerability but actually fixing it for

00:28:10,050 --> 00:28:13,950
you like opening a pull request to let

00:28:12,300 --> 00:28:17,880
you know I will tell you that I will

00:28:13,950 --> 00:28:19,230
upgrade your your dependency because I

00:28:17,880 --> 00:28:21,540
want to pull in a new version for that

00:28:19,230 --> 00:28:23,100
maybe a smart minor version upgrade and

00:28:21,540 --> 00:28:25,380
not pulling the latest version to not

00:28:23,100 --> 00:28:27,000
break your your apps what if it was

00:28:25,380 --> 00:28:29,310
something that you would just push into

00:28:27,000 --> 00:28:31,290
your CI example showing sneak what you

00:28:29,310 --> 00:28:33,510
can use and p.m. audit or us dependency

00:28:31,290 --> 00:28:35,220
checks in your CI tooling as well but

00:28:33,510 --> 00:28:36,990
what a fee would have this security

00:28:35,220 --> 00:28:39,750
integrated into your pipeline into your

00:28:36,990 --> 00:28:42,240
workflow so when someone adds a new

00:28:39,750 --> 00:28:43,560
vulnerable package when someone adds you

00:28:42,240 --> 00:28:45,720
know a new security vulnerability to a

00:28:43,560 --> 00:28:47,880
transitive package your CI breaks right

00:28:45,720 --> 00:28:50,310
you're a bit more conscious in how to do

00:28:47,880 --> 00:28:52,050
this in a more significantly

00:28:50,310 --> 00:28:54,330
considerable way a more responsible way

00:28:52,050 --> 00:28:56,520
to protect your open source

00:28:54,330 --> 00:28:58,740
dependencies

00:28:56,520 --> 00:29:01,230
thank you for much use open source you

00:28:58,740 --> 00:29:01,559
know stay awesome stay responsible thank

00:29:01,230 --> 00:29:08,940
you

00:29:01,559 --> 00:29:29,850
I think we have time for questions if

00:29:08,940 --> 00:29:32,370
anyone is yes good question I'm not sure

00:29:29,850 --> 00:29:33,900
we are defining a specific echo system

00:29:32,370 --> 00:29:37,530
like NPM if that's what you mean as

00:29:33,900 --> 00:29:40,290
polluted as in Java would have you know

00:29:37,530 --> 00:29:42,270
a similar amount of depend of like open

00:29:40,290 --> 00:29:44,670
source vulnerabilities growth and in a

00:29:42,270 --> 00:29:46,380
similar kind of it's not like a like an

00:29:44,670 --> 00:29:49,650
order of magnitude difference it's kind

00:29:46,380 --> 00:29:51,540
of the same playing field as well it is

00:29:49,650 --> 00:29:53,429
more about I think understanding the

00:29:51,540 --> 00:29:55,200
security risk and being able to do

00:29:53,429 --> 00:29:56,700
something about them understanding you

00:29:55,200 --> 00:29:58,530
know what you should be responsible for

00:29:56,700 --> 00:30:00,270
not taking those things for granted so I

00:29:58,530 --> 00:30:04,320
don't think like a specific industry is

00:30:00,270 --> 00:30:06,480
polluted or not there's a hole if you go

00:30:04,320 --> 00:30:08,090
and dive into the report itself you

00:30:06,480 --> 00:30:12,020
would see that we actually looked into

00:30:08,090 --> 00:30:15,390
kind of very early stage growth

00:30:12,020 --> 00:30:17,280
ecosystems like a goal that would have

00:30:15,390 --> 00:30:18,240
you know they they also have kind of

00:30:17,280 --> 00:30:20,220
like this trend of increasing

00:30:18,240 --> 00:30:21,690
vulnerabilities and even though it has

00:30:20,220 --> 00:30:24,059
like a whole significant amount of

00:30:21,690 --> 00:30:25,650
secret owner bills in total compared to

00:30:24,059 --> 00:30:27,530
something else but you could attribute

00:30:25,650 --> 00:30:30,179
that to you know maybe go isn't that

00:30:27,530 --> 00:30:31,830
popularly used maybe security

00:30:30,179 --> 00:30:33,330
researchers simply not looking at it to

00:30:31,830 --> 00:30:35,850
go ahead and find vulnerabilities there

00:30:33,330 --> 00:30:37,740
so this whole kind of wide range of what

00:30:35,850 --> 00:30:39,570
would be the reasons that we're not

00:30:37,740 --> 00:30:45,950
saying this in go overseas you know NPM

00:30:39,570 --> 00:30:45,950
or Java for example yes

00:30:48,820 --> 00:31:08,299
go ahead yeah yes yes yes sure

00:31:05,630 --> 00:31:09,919
so glad you were bringing this up so

00:31:08,299 --> 00:31:11,900
actually this security researcher who

00:31:09,919 --> 00:31:13,850
found this his name is daniel bruhl is

00:31:11,900 --> 00:31:15,559
actually involved with radicchio and a

00:31:13,850 --> 00:31:18,289
bunch of other projects his a ver

00:31:15,559 --> 00:31:19,970
security minded developer as well he's

00:31:18,289 --> 00:31:22,820
not a security researcher by profession

00:31:19,970 --> 00:31:26,659
and what he discovered is if you're

00:31:22,820 --> 00:31:28,789
using NPM or yarn they they both so the

00:31:26,659 --> 00:31:29,929
NPM kind of like not the ecosystem

00:31:28,789 --> 00:31:32,030
itself what like the the tooling around

00:31:29,929 --> 00:31:33,350
it allows you to distribute binary files

00:31:32,030 --> 00:31:34,669
so you could go ahead and you know by

00:31:33,350 --> 00:31:36,110
the way that I was building this and

00:31:34,669 --> 00:31:38,299
pick you and lock for a link see allies

00:31:36,110 --> 00:31:40,760
you could go and build in a CLI where

00:31:38,299 --> 00:31:42,289
you install something make it global NPM

00:31:40,760 --> 00:31:43,700
or you're on as a client will go ahead

00:31:42,289 --> 00:31:45,590
and make you know make the whole path

00:31:43,700 --> 00:31:48,799
and seam links changes so anywhere in

00:31:45,590 --> 00:31:50,270
your in your shell kind of prompting you

00:31:48,799 --> 00:31:53,120
would go ahead and be able to run

00:31:50,270 --> 00:31:54,230
commands the thing that Daniel found is

00:31:53,120 --> 00:31:55,549
that you could have

00:31:54,230 --> 00:31:57,950
he called it like we call that

00:31:55,549 --> 00:32:01,970
terminology is like a beam planting the

00:31:57,950 --> 00:32:03,350
idea is that if say one one one NPM

00:32:01,970 --> 00:32:05,870
dependency we can take in whatever

00:32:03,350 --> 00:32:08,659
example you want with one define the

00:32:05,870 --> 00:32:11,360
specific bin file to be executed like a

00:32:08,659 --> 00:32:13,100
CLI and installs it and there is a turn

00:32:11,360 --> 00:32:14,390
and then there's like another one like T

00:32:13,100 --> 00:32:16,070
that you install so I can different

00:32:14,390 --> 00:32:20,120
package that you install but it uses the

00:32:16,070 --> 00:32:21,679
same kind of name for that bin CLI it

00:32:20,120 --> 00:32:23,330
will overwrite the original one that was

00:32:21,679 --> 00:32:25,250
created before that so you could

00:32:23,330 --> 00:32:26,809
actually say you know for example if

00:32:25,250 --> 00:32:29,240
you're using young man which and I'm

00:32:26,809 --> 00:32:31,580
gonna go completely a hardcore retro

00:32:29,240 --> 00:32:34,340
old-school kind of thing using yeoman as

00:32:31,580 --> 00:32:36,890
a CLI I could go ahead and create this

00:32:34,340 --> 00:32:38,419
yo man - - whatever get you to install

00:32:36,890 --> 00:32:41,150
it once you installed it I will actually

00:32:38,419 --> 00:32:43,220
be able to overwrite the original yo

00:32:41,150 --> 00:32:44,870
command Y oh that yeoman had actually

00:32:43,220 --> 00:32:47,419
declared I'm actually being able to

00:32:44,870 --> 00:32:48,950
override something else it is you could

00:32:47,419 --> 00:32:50,480
say that you could do the same thing

00:32:48,950 --> 00:32:51,740
with script so basically when you

00:32:50,480 --> 00:32:53,539
install something you could just go

00:32:51,740 --> 00:32:56,510
ahead and do like a post install scripts

00:32:53,539 --> 00:32:58,460
and do the exact same thing except NPM

00:32:56,510 --> 00:32:59,750
and you are has this ignore scripts

00:32:58,460 --> 00:33:00,300
which is a convention at you know

00:32:59,750 --> 00:33:02,190
security con

00:33:00,300 --> 00:33:05,040
you should probably understand in years

00:33:02,190 --> 00:33:07,020
but even if that is used this kind of

00:33:05,040 --> 00:33:09,720
blimp and been planting could still

00:33:07,020 --> 00:33:12,180
happen so it is still a very significant

00:33:09,720 --> 00:33:14,550
security issue interesting to say about

00:33:12,180 --> 00:33:16,740
it is that pnpn had not been vulnerable

00:33:14,550 --> 00:33:18,390
to all of the cases that we've sim and

00:33:16,740 --> 00:33:19,560
it actually warns you if like if you're

00:33:18,390 --> 00:33:21,660
trying to override something that

00:33:19,560 --> 00:33:23,250
already exists so yeah if you are using

00:33:21,660 --> 00:33:24,570
NPM and Yaron should probably update to

00:33:23,250 --> 00:33:26,640
the latest version so that you're not

00:33:24,570 --> 00:33:28,140
vulnerable to that the only way to kind

00:33:26,640 --> 00:33:30,480
of like become vulnerable to that is if

00:33:28,140 --> 00:33:33,380
dependency is being installed and you

00:33:30,480 --> 00:33:35,940
know declaring those those been files

00:33:33,380 --> 00:33:37,620
which is something that you know could

00:33:35,940 --> 00:33:39,660
happen if you install it like

00:33:37,620 --> 00:33:41,190
specifically like at BMS or something or

00:33:39,660 --> 00:33:42,690
maybe that gets installed as the

00:33:41,190 --> 00:33:44,070
transitive dependency as well so you

00:33:42,690 --> 00:33:50,520
know don't have a lot of control on what

00:33:44,070 --> 00:33:52,380
what gets there no I don't think there

00:33:50,520 --> 00:33:54,950
have been none as we've seen it's a

00:33:52,380 --> 00:33:57,000
fairly new issue Daniel actually

00:33:54,950 --> 00:33:58,550
consulted with me about it we talked to

00:33:57,000 --> 00:34:02,400
its NIC security team we involved both

00:33:58,550 --> 00:34:03,960
NPM security team as well as yarn mile

00:34:02,400 --> 00:34:05,550
is the current maintainer for yarn

00:34:03,960 --> 00:34:08,310
actually contact contacted all of them

00:34:05,550 --> 00:34:10,290
kind of to consolidate all of this

00:34:08,310 --> 00:34:12,510
messaging and communications and have

00:34:10,290 --> 00:34:14,520
all been like NPM anyone have been

00:34:12,510 --> 00:34:16,260
releasing a security updates so we

00:34:14,520 --> 00:34:20,000
haven't this is like freshly used for

00:34:16,260 --> 00:34:20,000
like the last four days or something

00:34:21,780 --> 00:34:25,679
the reason true github that they have

00:34:24,210 --> 00:34:27,690
requested I don't I don't know if it's

00:34:25,679 --> 00:34:30,270
like have already been a block assigned

00:34:27,690 --> 00:34:32,820
but there is like three cities as far as

00:34:30,270 --> 00:34:56,450
I remember concerning all of these for

00:34:32,820 --> 00:34:56,450
NPM specifically this one yeah

00:34:59,820 --> 00:35:05,130
yep it is you know I graphed that as

00:35:04,770 --> 00:35:09,030
well

00:35:05,130 --> 00:35:12,170
it's basically uh this one ticket

00:35:09,030 --> 00:35:16,110
shooters like also golang and others

00:35:12,170 --> 00:35:17,760
what is it yeah yeah that was just in

00:35:16,110 --> 00:35:19,650
pain specific hard I remember that was

00:35:17,760 --> 00:35:22,230
the one yeah this one for eco system

00:35:19,650 --> 00:35:34,110
considers groped for everything goal and

00:35:22,230 --> 00:35:35,730
as well it's all kind of growth I think

00:35:34,110 --> 00:35:38,460
historically yes because like you can

00:35:35,730 --> 00:35:41,370
see from the Linux OS that's almost

00:35:38,460 --> 00:35:43,560
going you know I want to exponentially

00:35:41,370 --> 00:35:46,020
did not want to go there but yeah that's

00:35:43,560 --> 00:35:49,350
that kind of taking that trend I would

00:35:46,020 --> 00:35:51,060
say you know being a bit more conscious

00:35:49,350 --> 00:35:53,610
about what is this man so first of all

00:35:51,060 --> 00:35:55,500
for NPM and JavaScript we have been

00:35:53,610 --> 00:35:56,940
having a lot of activity around that so

00:35:55,500 --> 00:35:58,650
that the security working group being

00:35:56,940 --> 00:36:00,000
there you know being a bit more active

00:35:58,650 --> 00:36:01,800
and vigilant and what's going on

00:36:00,000 --> 00:36:03,030
assigning city is so there's there's

00:36:01,800 --> 00:36:04,680
also been like a lot of activity so

00:36:03,030 --> 00:36:06,450
obviously like there will be more CVS as

00:36:04,680 --> 00:36:08,700
well if no one had looked at it before

00:36:06,450 --> 00:36:10,620
so that contributes the other the other

00:36:08,700 --> 00:36:12,570
thing is not everything is you know

00:36:10,620 --> 00:36:15,180
exploitable so you have you know you may

00:36:12,570 --> 00:36:17,340
be vulnerable to like some high issues

00:36:15,180 --> 00:36:19,080
but for example just may have a reduced

00:36:17,340 --> 00:36:20,790
attack versus whatever but you need to

00:36:19,080 --> 00:36:22,350
understand that you know just is maybe a

00:36:20,790 --> 00:36:24,360
dev dependence you're not deploying that

00:36:22,350 --> 00:36:26,310
to production so that is not something

00:36:24,360 --> 00:36:28,260
you know specifically to like worry

00:36:26,310 --> 00:36:30,930
about right under a kind of like a

00:36:28,260 --> 00:36:32,430
statement here so there's a whole kind

00:36:30,930 --> 00:36:33,930
of like prioritization understanding you

00:36:32,430 --> 00:36:36,240
know what is an actual risk you know

00:36:33,930 --> 00:36:39,150
what is a manifested risk and what is

00:36:36,240 --> 00:36:40,320
something that may not impact you that

00:36:39,150 --> 00:36:41,610
said I would say you know you do not

00:36:40,320 --> 00:36:43,380
want to go into production with having

00:36:41,610 --> 00:36:44,820
like twenty low vulnerability if you can

00:36:43,380 --> 00:36:46,920
just lower them to zero with like zero

00:36:44,820 --> 00:36:48,660
effort right so you do want to go ahead

00:36:46,920 --> 00:36:57,290
and mitigate these security risk if you

00:36:48,660 --> 00:36:57,290

YouTube URL: https://www.youtube.com/watch?v=j7PY7gRpizY


