Title: JS Party LIVE at Node+JS Interactive!
Publication date: 2020-05-11
Playlist: Node + JS Interactive 2019
Description: 
	JS Party LIVE at Node+JS Interactive!
The much loved podcast JS Party is hosting a live show at Node+JS Interactive! Come join the group to discuss the latest in JavaScript!
Captions: 
	00:00:00,030 --> 00:00:10,349
hi everyone welcome to the live taping

00:00:03,360 --> 00:00:12,000
of Jay s party thank you thank you

00:00:10,349 --> 00:00:13,559
how many people here have listened to

00:00:12,000 --> 00:00:16,199
Jay s party before at least one episode

00:00:13,559 --> 00:00:18,510
Wow a lot of people thank you so much

00:00:16,199 --> 00:00:21,390
for listening that's awesome so you know

00:00:18,510 --> 00:00:24,630
that we usually have some intro music so

00:00:21,390 --> 00:00:27,840
can't break with tradition there start

00:00:24,630 --> 00:00:31,019
that up you don't normally see this but

00:00:27,840 --> 00:00:32,640
we we use zoom and we dance in the

00:00:31,019 --> 00:00:36,670
videos to each other but we don't place

00:00:32,640 --> 00:00:40,329
that so I don't know how to dance

00:00:36,670 --> 00:00:40,329
[Music]

00:00:47,070 --> 00:00:52,290
all right awesome that gets us in the

00:00:49,950 --> 00:00:55,110
mood alright thank you so much for

00:00:52,290 --> 00:00:57,900
coming to Jay's party live at nodejs

00:00:55,110 --> 00:01:00,300
interactive now another thing that we

00:00:57,900 --> 00:01:04,320
end up doing on a lot of episodes is

00:01:00,300 --> 00:01:07,830
either some kind of rap or poem or or

00:01:04,320 --> 00:01:10,170
haiku to kick off and get started and so

00:01:07,830 --> 00:01:12,750
I have one of those prepared written by

00:01:10,170 --> 00:01:14,940
yours truly but first I got my slides

00:01:12,750 --> 00:01:16,200
mixed up I want to talk about jazz party

00:01:14,940 --> 00:01:16,979
a little bit for those of you who may

00:01:16,200 --> 00:01:19,860
not have heard of it

00:01:16,979 --> 00:01:22,619
Jes party is a weekly podcast about

00:01:19,860 --> 00:01:24,360
JavaScript in the web and we talk a lot

00:01:22,619 --> 00:01:27,869
about a lot of different things and we

00:01:24,360 --> 00:01:29,310
have a great diverse cast list where not

00:01:27,869 --> 00:01:32,310
all of us around the every episode so

00:01:29,310 --> 00:01:35,250
that keeps things fresh but we have suze

00:01:32,310 --> 00:01:37,530
Hinton for us Ibuki DJ Kevin ball Emma

00:01:35,250 --> 00:01:39,840
wedeck and Divya saucier our and Michael

00:01:37,530 --> 00:01:41,340
Rogers Christopher Hiller who is at this

00:01:39,840 --> 00:01:43,110
conference and if you're in this room

00:01:41,340 --> 00:01:46,200
that means that you're not at his talk

00:01:43,110 --> 00:01:49,470
right now so thank you for supporting me

00:01:46,200 --> 00:01:53,390
and then Jared Santo and myself Nick

00:01:49,470 --> 00:01:58,830
nisi thank you so much so back to that

00:01:53,390 --> 00:02:00,810
that Limerick that I have at nodejs

00:01:58,830 --> 00:02:03,690
interactive the talks are all quite

00:02:00,810 --> 00:02:05,610
attractive from transpilation dred -

00:02:03,690 --> 00:02:09,860
awesome worker threads this comp is

00:02:05,610 --> 00:02:09,860
surely impacted thank you

00:02:11,209 --> 00:02:16,860
so yeah in this we're gonna get started

00:02:14,640 --> 00:02:18,150
and we're just going to talk to some of

00:02:16,860 --> 00:02:21,209
the speakers that you've heard

00:02:18,150 --> 00:02:23,790
throughout today and yesterday and we're

00:02:21,209 --> 00:02:25,230
going to talk about their talks and dig

00:02:23,790 --> 00:02:28,110
a little deeper ask some other questions

00:02:25,230 --> 00:02:30,480
and really get more out of them and more

00:02:28,110 --> 00:02:31,980
out of their content and yeah so let's

00:02:30,480 --> 00:02:35,070
let's just go ahead and kick it off the

00:02:31,980 --> 00:02:37,230
first speaker I got my slides mixed up

00:02:35,070 --> 00:02:39,000
again sorry I forgot that I have this in

00:02:37,230 --> 00:02:42,030
here if if you haven't listened to us

00:02:39,000 --> 00:02:44,790
before these are some recent episodes

00:02:42,030 --> 00:02:46,380
that we have right now if you're here

00:02:44,790 --> 00:02:49,560
you're also not listening to this live

00:02:46,380 --> 00:02:52,470
but we are currently live interviewing

00:02:49,560 --> 00:02:53,670
Ahmad Nasari the CTO of NPM that episode

00:02:52,470 --> 00:02:55,560
will be released next week

00:02:53,670 --> 00:02:57,440
but other episodes that we've had

00:02:55,560 --> 00:02:59,720
include a discussion on es modules

00:02:57,440 --> 00:03:01,170
modernizing Etsy's codebase with react

00:02:59,720 --> 00:03:03,900
mentorship

00:03:01,170 --> 00:03:06,450
with Khalil Lachelle you're probably

00:03:03,900 --> 00:03:08,360
using streams with Matteo Kalina who

00:03:06,450 --> 00:03:11,190
also gave a talk at this conference and

00:03:08,360 --> 00:03:13,350
then we also have some fun episodes like

00:03:11,190 --> 00:03:15,150
we should rebrand JavaScript yep or nope

00:03:13,350 --> 00:03:17,880
and that's a debate where you're

00:03:15,150 --> 00:03:18,990
assigned your thoughts on that and then

00:03:17,880 --> 00:03:20,820
you have to defend those thoughts

00:03:18,990 --> 00:03:23,520
whether we should rebrand javascript in

00:03:20,820 --> 00:03:25,980
this case all right so let's get started

00:03:23,520 --> 00:03:28,470
and let's interview our first guest and

00:03:25,980 --> 00:03:38,610
that is Vladimir deter Kim I'm gonna

00:03:28,470 --> 00:03:41,160
come on up hi hi thanks for joining me

00:03:38,610 --> 00:03:44,640
thanks for having me so you gave a talk

00:03:41,160 --> 00:03:46,740
yesterday and it was called it was on

00:03:44,640 --> 00:03:50,160
nodejs loader hooks yes that's right

00:03:46,740 --> 00:03:53,520
tell me about that so no js' loader hook

00:03:50,160 --> 00:03:55,680
is a experimental API in node.js it's

00:03:53,520 --> 00:03:58,490
linked with es6 modules so it's the

00:03:55,680 --> 00:04:01,110
future and everyone loves that yes

00:03:58,490 --> 00:04:03,959
basically it's an API that enables you

00:04:01,110 --> 00:04:06,150
to hook any modules that is loaded and

00:04:03,959 --> 00:04:09,120
then you can do whatever you want from

00:04:06,150 --> 00:04:11,730
logging to actually creating virtual

00:04:09,120 --> 00:04:14,580
module and load them because it doesn't

00:04:11,730 --> 00:04:16,739
hook existing modules that are loaded it

00:04:14,580 --> 00:04:19,260
tooks modules that are asked to be

00:04:16,739 --> 00:04:20,910
loaded so let's say you are loading your

00:04:19,260 --> 00:04:23,310
modules that is not present in your node

00:04:20,910 --> 00:04:24,960
modules you could dynamically create

00:04:23,310 --> 00:04:27,600
virtually from a hook

00:04:24,960 --> 00:04:28,740
it's just mad science is really cool and

00:04:27,600 --> 00:04:31,320
it this is actually something that I

00:04:28,740 --> 00:04:34,860
haven't hadn't heard about until seeing

00:04:31,320 --> 00:04:37,350
your talk yesterday so what why were

00:04:34,860 --> 00:04:39,390
loader hooks created what's the the

00:04:37,350 --> 00:04:41,910
problem that they're trying to solve so

00:04:39,390 --> 00:04:43,710
that's a great question this is a review

00:04:41,910 --> 00:04:46,380
reason why you won't want to know which

00:04:43,710 --> 00:04:48,300
modules are loaded I was not part of the

00:04:46,380 --> 00:04:50,010
working group with designed this API so

00:04:48,300 --> 00:04:52,800
I can't give a definitive answer on why

00:04:50,010 --> 00:04:56,940
they created it true what I can say that

00:04:52,800 --> 00:04:59,820
so at screen I do instrumentation of

00:04:56,940 --> 00:05:01,320
node.js processes for security meaning

00:04:59,820 --> 00:05:03,390
that I need to know which modules are

00:05:01,320 --> 00:05:05,669
loaded because I need to inject security

00:05:03,390 --> 00:05:07,830
algorithms in these modules as they are

00:05:05,669 --> 00:05:10,950
loaded and that a similar issue that

00:05:07,830 --> 00:05:14,370
APM's have as new really elastic or our

00:05:10,950 --> 00:05:16,740
dynaTrace so all this vent

00:05:14,370 --> 00:05:18,420
we need to know which modules are loaded

00:05:16,740 --> 00:05:20,910
because we need to know what we need to

00:05:18,420 --> 00:05:23,400
instrument usually historically we use a

00:05:20,910 --> 00:05:26,400
very ugly patch by monkey patching some

00:05:23,400 --> 00:05:29,100
private method in node which out of out

00:05:26,400 --> 00:05:31,230
of which technically is not private

00:05:29,100 --> 00:05:35,280
anymore because half of the ecosystem

00:05:31,230 --> 00:05:37,770
relies on that anymore now but I see TSE

00:05:35,280 --> 00:05:40,350
member who can get me with anger so they

00:05:37,770 --> 00:05:43,020
created a proper API for us to do that

00:05:40,350 --> 00:05:46,200
without breaking everything nice very

00:05:43,020 --> 00:05:48,420
cool so it's it's to understand what's

00:05:46,200 --> 00:05:51,390
in the cache it's kind of a big so it

00:05:48,420 --> 00:05:53,910
it's even before what's in the cache

00:05:51,390 --> 00:05:57,270
it's when the module are loaded you have

00:05:53,910 --> 00:06:00,420
the chance the opportunity to intercept

00:05:57,270 --> 00:06:02,850
that and even rewrite the modules so in

00:06:00,420 --> 00:06:05,490
the talk yesterday I had three examples

00:06:02,850 --> 00:06:08,640
one of them was actually rewriting type

00:06:05,490 --> 00:06:10,950
loading type script modules so if you

00:06:08,640 --> 00:06:13,290
create a loader hook that transpires

00:06:10,950 --> 00:06:15,900
type script to Java scripts you could

00:06:13,290 --> 00:06:18,450
really tell node hey this is how to do

00:06:15,900 --> 00:06:20,070
with type script and it should not run

00:06:18,450 --> 00:06:22,470
type straight natively because nobody

00:06:20,070 --> 00:06:24,600
does that but it will run type Street

00:06:22,470 --> 00:06:27,330
transparently meaning that you would not

00:06:24,600 --> 00:06:29,880
have any single file of JavaScript in

00:06:27,330 --> 00:06:31,440
your code except a module and node will

00:06:29,880 --> 00:06:33,420
know how to do types creepy because you

00:06:31,440 --> 00:06:35,550
you would have teach it how to do that

00:06:33,420 --> 00:06:38,010
after the talk to mine told me about

00:06:35,550 --> 00:06:39,630
having a yellow loader because there was

00:06:38,010 --> 00:06:42,420
a lot of thing you can do in yellow that

00:06:39,630 --> 00:06:45,750
you can't do in JSON but that are still

00:06:42,420 --> 00:06:47,310
possible in JavaScript objects so the

00:06:45,750 --> 00:06:49,890
idea would be like hey I want to import

00:06:47,310 --> 00:06:52,110
channel modules transparently without

00:06:49,890 --> 00:06:54,450
ever having to read the file and

00:06:52,110 --> 00:06:56,670
transpire that I want my developers to

00:06:54,450 --> 00:06:58,350
just import channels module and that

00:06:56,670 --> 00:07:02,010
pretty much what this API can do

00:06:58,350 --> 00:07:05,610
interesting so do you see that as being

00:07:02,010 --> 00:07:08,970
something that developers use like in

00:07:05,610 --> 00:07:11,220
their actual production apps like for

00:07:08,970 --> 00:07:12,480
that example like could that be I know

00:07:11,220 --> 00:07:15,930
that it's experimental now but is the

00:07:12,480 --> 00:07:18,000
end goal to be like a really stable API

00:07:15,930 --> 00:07:20,550
that you can use to to do things like

00:07:18,000 --> 00:07:23,940
that so it will be used in production at

00:07:20,550 --> 00:07:25,680
least for a PM's because eventually it

00:07:23,940 --> 00:07:27,270
will be the only way to intercept

00:07:25,680 --> 00:07:29,370
loading modules so

00:07:27,270 --> 00:07:34,650
that's definitely a business need for a

00:07:29,370 --> 00:07:36,090
PMS regarding transformations yes I mean

00:07:34,650 --> 00:07:38,430
the types creat transformation I would

00:07:36,090 --> 00:07:40,949
recommend adding a build step but if you

00:07:38,430 --> 00:07:43,080
want to load other things like ml this

00:07:40,949 --> 00:07:44,849
is a great example I don't see any

00:07:43,080 --> 00:07:47,009
reason why we would not use that in

00:07:44,849 --> 00:07:49,830
production register table the only

00:07:47,009 --> 00:07:52,770
potential issues in the future that how

00:07:49,830 --> 00:07:55,289
do you compose multiple loader hooks and

00:07:52,770 --> 00:07:57,660
we know that the JavaScript ecosystem is

00:07:55,289 --> 00:07:59,699
really strong and having a entropy and

00:07:57,660 --> 00:08:02,280
diverse things in the ecosystems why I

00:07:59,699 --> 00:08:04,830
hope there will be a sooner standard for

00:08:02,280 --> 00:08:06,599
people to play along and not to step in

00:08:04,830 --> 00:08:09,330
on each other's feet when loading

00:08:06,599 --> 00:08:12,000
modules very cool so you can only load

00:08:09,330 --> 00:08:15,180
use one loader at a time is that right I

00:08:12,000 --> 00:08:17,690
think so yeah okay another example that

00:08:15,180 --> 00:08:21,240
you gave in your talk yesterday was

00:08:17,690 --> 00:08:22,979
mocking or stubbing modules by changing

00:08:21,240 --> 00:08:24,360
them and and you were using a proxy do

00:08:22,979 --> 00:08:27,449
you want to describe that a little bit

00:08:24,360 --> 00:08:31,229
for our listeners yeah it was a pretty

00:08:27,449 --> 00:08:33,240
complex use case so the idea is that as

00:08:31,229 --> 00:08:36,180
I told you can rewrite the modules

00:08:33,240 --> 00:08:37,890
dynamically as they are loaded so in my

00:08:36,180 --> 00:08:40,589
example which is a proof of concept

00:08:37,890 --> 00:08:43,829
please don't use that even if it's on

00:08:40,589 --> 00:08:46,020
github so I guess it's public domain in

00:08:43,829 --> 00:08:48,270
this example what I do is that when

00:08:46,020 --> 00:08:50,310
it'll module is loaded I check

00:08:48,270 --> 00:08:53,040
everything that is exported because it's

00:08:50,310 --> 00:08:54,959
just an array of string with the name of

00:08:53,040 --> 00:08:57,450
the things that are exported and I

00:08:54,959 --> 00:09:00,149
replace all of the exports by your proxy

00:08:57,450 --> 00:09:02,250
which is native objecting in JavaScript

00:09:00,149 --> 00:09:05,160
that enables you to trap everything that

00:09:02,250 --> 00:09:09,000
happens on an object so I replace each

00:09:05,160 --> 00:09:12,839
of this export by a proxy and I expose

00:09:09,000 --> 00:09:15,360
the proxy handler the definition of how

00:09:12,839 --> 00:09:16,980
the proxy behave to the end-user meaning

00:09:15,360 --> 00:09:19,980
then when you load the module that has

00:09:16,980 --> 00:09:23,430
been transformed you also have access to

00:09:19,980 --> 00:09:25,230
a set of objects that enables you to

00:09:23,430 --> 00:09:27,450
change the behavior of all of the

00:09:25,230 --> 00:09:30,000
exports so of course to make it smarter

00:09:27,450 --> 00:09:33,060
we need to bet rico civet e on that to

00:09:30,000 --> 00:09:34,790
change deeper deeper deeper fails but as

00:09:33,060 --> 00:09:37,740
a first everything is good enough

00:09:34,790 --> 00:09:38,990
basically instead of changing your code

00:09:37,740 --> 00:09:41,990
to make it easier to

00:09:38,990 --> 00:09:44,060
test you would just need to load your

00:09:41,990 --> 00:09:46,610
code and then in your test file you will

00:09:44,060 --> 00:09:49,130
be able to work by changing the proxies

00:09:46,610 --> 00:09:51,020
and the behavior of the code but only

00:09:49,130 --> 00:09:52,910
for your test file not for the world

00:09:51,020 --> 00:09:54,589
world yeah that's really cool so you

00:09:52,910 --> 00:09:57,110
would not necessarily have to write like

00:09:54,589 --> 00:09:59,830
code that injects the dependencies yeah

00:09:57,110 --> 00:10:03,649
just have it through the loader inject

00:09:59,830 --> 00:10:05,270
the the hook sorry the handler for the

00:10:03,649 --> 00:10:08,180
proxy and then change things on the fly

00:10:05,270 --> 00:10:10,490
and change them back exactly over the

00:10:08,180 --> 00:10:12,920
flu last year have been so many people

00:10:10,490 --> 00:10:15,910
since so many people reinventing the

00:10:12,920 --> 00:10:18,740
wheel for dependency injection in node I

00:10:15,910 --> 00:10:23,060
won't roll in the annotation every

00:10:18,740 --> 00:10:25,190
framework and that but that the thing

00:10:23,060 --> 00:10:28,820
stopped reinventing the wheel and

00:10:25,190 --> 00:10:32,570
creating 1000 of projects where we can

00:10:28,820 --> 00:10:34,880
have one single at least cleaner way of

00:10:32,570 --> 00:10:38,060
doing that that does not require your

00:10:34,880 --> 00:10:39,260
code 12 and standard module loading

00:10:38,060 --> 00:10:42,020
because that's the main issue I have

00:10:39,260 --> 00:10:44,750
with all of these alternative dependency

00:10:42,020 --> 00:10:47,029
injections thing is that they reinvent

00:10:44,750 --> 00:10:49,279
the way you load modules meaning that a

00:10:47,029 --> 00:10:51,170
I'm still a vendor I still do new JS

00:10:49,279 --> 00:10:52,760
instrumentation and if you do weird

00:10:51,170 --> 00:10:56,149
things that gives me more work to

00:10:52,760 --> 00:11:00,140
instrument it and I'm lazy the best

00:10:56,149 --> 00:11:01,940
developers are so the like one thing

00:11:00,140 --> 00:11:04,910
that we rely on right now like I write

00:11:01,940 --> 00:11:08,089
typescript full-time and I use es module

00:11:04,910 --> 00:11:11,240
exploit Rex yeah I use es module like

00:11:08,089 --> 00:11:13,190
syntax in typescript and then I rely on

00:11:11,240 --> 00:11:15,140
tools like like just and I haven't

00:11:13,190 --> 00:11:17,120
looked at what just is actually doing

00:11:15,140 --> 00:11:20,329
but it has the ability to mock your

00:11:17,120 --> 00:11:22,610
dependencies like this which I assume is

00:11:20,329 --> 00:11:24,680
just relying on the fact that it's just

00:11:22,610 --> 00:11:26,300
an underlying command J s module that's

00:11:24,680 --> 00:11:28,220
actually being running and being able to

00:11:26,300 --> 00:11:30,890
do that so do you see

00:11:28,220 --> 00:11:33,380
loader hooks as like the solution for

00:11:30,890 --> 00:11:35,690
those types of problems in the future

00:11:33,380 --> 00:11:39,500
when theoretically we're all just

00:11:35,690 --> 00:11:40,970
writing straight yes M definitely also

00:11:39,500 --> 00:11:43,279
in my understanding loader hooks will

00:11:40,970 --> 00:11:47,230
also be available available for common

00:11:43,279 --> 00:11:49,520
jeaious a closing parenthesis but

00:11:47,230 --> 00:11:52,460
actually there will be no other solution

00:11:49,520 --> 00:11:54,650
trained working to things that are

00:11:52,460 --> 00:11:56,860
imported four years six modules so

00:11:54,650 --> 00:11:59,900
people will have to go with that and

00:11:56,860 --> 00:12:02,870
sometimes it's good to have a unique way

00:11:59,900 --> 00:12:05,360
of doing that but this API has been done

00:12:02,870 --> 00:12:08,390
cleanly history carry you can only mock

00:12:05,360 --> 00:12:10,490
modules synchronously this API is based

00:12:08,390 --> 00:12:12,560
on async functions meaning that you can

00:12:10,490 --> 00:12:14,990
do icing treatment when you merge the

00:12:12,560 --> 00:12:16,940
modules it should be pretty powerful and

00:12:14,990 --> 00:12:18,980
I think my talk is just an opening and a

00:12:16,940 --> 00:12:20,990
few possibilities you can do with that

00:12:18,980 --> 00:12:23,180
but I'm really excited to see what

00:12:20,990 --> 00:12:23,930
people will build on that yeah yeah

00:12:23,180 --> 00:12:25,780
definitely

00:12:23,930 --> 00:12:28,120
so that that really opens up things like

00:12:25,780 --> 00:12:31,190
what was one example you you were

00:12:28,120 --> 00:12:32,840
fetching something right yeah it's I

00:12:31,190 --> 00:12:35,930
think it's the equivalent of yeah

00:12:32,840 --> 00:12:37,610
Craigan prale's a GU yeah module loading

00:12:35,930 --> 00:12:40,130
system where you don't have to package a

00:12:37,610 --> 00:12:41,750
JSON disclaimer I love package dot J's

00:12:40,130 --> 00:12:45,170
and I just love to do weird stuff too

00:12:41,750 --> 00:12:48,350
and my free time so basically you would

00:12:45,170 --> 00:12:50,870
be loading modules from a URL because

00:12:48,350 --> 00:12:54,410
it's just plain text at the end of the

00:12:50,870 --> 00:12:56,000
day or bytes and if you have stream

00:12:54,410 --> 00:12:58,070
bytes that no js' no zero to

00:12:56,000 --> 00:13:00,380
instrumented whether it's Jana script or

00:12:58,070 --> 00:13:02,420
whether somebody you just need to find a

00:13:00,380 --> 00:13:06,200
way to get it locally on your machine

00:13:02,420 --> 00:13:08,870
and to give that to node.js to build a

00:13:06,200 --> 00:13:12,020
module for so yeah one of my example was

00:13:08,870 --> 00:13:13,580
like instantiating a guest without

00:13:12,020 --> 00:13:16,250
downloading it before starting the

00:13:13,580 --> 00:13:19,970
process letting node do not exist for me

00:13:16,250 --> 00:13:21,970
and instantiate it this cool this opened

00:13:19,970 --> 00:13:24,680
the door to a lot of and a thousand of

00:13:21,970 --> 00:13:27,500
security concerns that's why it was just

00:13:24,680 --> 00:13:29,390
one exam which in over an a I think if

00:13:27,500 --> 00:13:32,660
you want to go that way we you need to

00:13:29,390 --> 00:13:34,730
have a couple people full-time to figure

00:13:32,660 --> 00:13:36,290
out the security impact of such things

00:13:34,730 --> 00:13:37,070
yeah we don't need to worry about that

00:13:36,290 --> 00:13:42,020
I'm sure we'll be fine

00:13:37,070 --> 00:13:43,540
security is it someone just saying now

00:13:42,020 --> 00:13:46,760
[Laughter]

00:13:43,540 --> 00:13:49,340
so that's really cool and I see this API

00:13:46,760 --> 00:13:51,470
as being like one of those API I'm

00:13:49,340 --> 00:13:54,230
thinking back to miles as keynote

00:13:51,470 --> 00:13:56,960
yesterday where he was talking about I

00:13:54,230 --> 00:13:59,270
think he called it the existential dread

00:13:56,960 --> 00:14:03,020
of transpilation or something along

00:13:59,270 --> 00:14:05,209
those lines where like will

00:14:03,020 --> 00:14:08,089
we are using transpilation and we're

00:14:05,209 --> 00:14:09,770
using like come on Jas and all of this

00:14:08,089 --> 00:14:12,500
and like there are a lot of things that

00:14:09,770 --> 00:14:13,339
come and J's can do or can be abused to

00:14:12,500 --> 00:14:15,529
do that

00:14:13,339 --> 00:14:16,670
yes modules really can't because of the

00:14:15,529 --> 00:14:18,649
way that they are statically analyzed

00:14:16,670 --> 00:14:21,290
and things like that and this seems like

00:14:18,649 --> 00:14:23,810
one of those api's that is allowing us

00:14:21,290 --> 00:14:25,880
to have not really have to take away a

00:14:23,810 --> 00:14:28,160
lot of features when we go to that so we

00:14:25,880 --> 00:14:29,750
can do things like that kind of get in

00:14:28,160 --> 00:14:31,520
the middle of how modules are actually

00:14:29,750 --> 00:14:32,660
loaded and changed that in really

00:14:31,520 --> 00:14:35,660
interesting ways

00:14:32,660 --> 00:14:36,980
another way is like the I think you're

00:14:35,660 --> 00:14:39,380
what's called module attributes where

00:14:36,980 --> 00:14:41,120
you can you might be able to allo JSON

00:14:39,380 --> 00:14:43,970
in the future with yes modules for

00:14:41,120 --> 00:14:46,760
example so yeah actually someone came to

00:14:43,970 --> 00:14:49,399
me after the token asked hey would it be

00:14:46,760 --> 00:14:51,589
possible to es6 import command J's

00:14:49,399 --> 00:14:53,690
module with a loader hook and that's

00:14:51,589 --> 00:14:56,180
actually doable because you would

00:14:53,690 --> 00:14:59,029
there's a method in no name create

00:14:56,180 --> 00:15:01,370
require that enables you to create a

00:14:59,029 --> 00:15:05,060
custom require function that you can use

00:15:01,370 --> 00:15:07,310
in es6 modules to load command J's

00:15:05,060 --> 00:15:10,430
modules so you could definitely build a

00:15:07,310 --> 00:15:12,649
loader that would do that actually in my

00:15:10,430 --> 00:15:14,630
typescript example to import a type

00:15:12,649 --> 00:15:16,940
strict and spyler i had to do that

00:15:14,630 --> 00:15:18,890
because it's not exposed as you near six

00:15:16,940 --> 00:15:22,250
modules i had to load it as a command

00:15:18,890 --> 00:15:23,930
reyes module and that's yeah if you want

00:15:22,250 --> 00:15:25,700
to create backward compatibility which

00:15:23,930 --> 00:15:28,790
command area through a loader you can

00:15:25,700 --> 00:15:31,220
the the entropy of weird things that

00:15:28,790 --> 00:15:33,380
will be available with this api is

00:15:31,220 --> 00:15:35,000
limitless and that is that one of the

00:15:33,380 --> 00:15:37,959
thing i love with an odious and

00:15:35,000 --> 00:15:42,050
javascript ecológico system in that it's

00:15:37,959 --> 00:15:44,870
just infinite state machine where you

00:15:42,050 --> 00:15:47,120
just give a few rules it's an AI it's a

00:15:44,870 --> 00:15:48,740
collective AI you give a few rules and

00:15:47,120 --> 00:15:50,959
the pool of developers around the world

00:15:48,740 --> 00:15:55,279
will hack around it until everything is

00:15:50,959 --> 00:15:58,750
act around absolutely so kind of as a

00:15:55,279 --> 00:16:01,070
closing question what's one thing that

00:15:58,750 --> 00:16:06,170
you want developers to take away about

00:16:01,070 --> 00:16:11,600
loader hooks that's a good question

00:16:06,170 --> 00:16:16,460
oh i'm really unprepared for that one

00:16:11,600 --> 00:16:19,400
I guess the thing is no js' can be

00:16:16,460 --> 00:16:22,160
turned into a universal runtime and I

00:16:19,400 --> 00:16:25,070
could I could make a pennant saying it's

00:16:22,160 --> 00:16:27,200
the growl of friend times referencing

00:16:25,070 --> 00:16:29,930
Grande VM which is an amazing product in

00:16:27,200 --> 00:16:32,420
development by Rykiel which aims at

00:16:29,930 --> 00:16:34,640
training all languages over the JVM and

00:16:32,420 --> 00:16:37,490
we have a chance of doing something

00:16:34,640 --> 00:16:40,730
similar in nodejs because through letter

00:16:37,490 --> 00:16:42,230
hooks you you can load anything and when

00:16:40,730 --> 00:16:44,900
I mean anything it's anything that new

00:16:42,230 --> 00:16:47,210
J's can understand eventually including

00:16:44,900 --> 00:16:47,900
loading rest code and adding it

00:16:47,210 --> 00:16:50,570
transpiled

00:16:47,900 --> 00:16:54,500
compile to whether somebody under fly so

00:16:50,570 --> 00:16:56,690
or mem even see press press code as long

00:16:54,500 --> 00:16:59,900
as it can runs either in web as somebody

00:16:56,690 --> 00:17:02,000
or in JavaScript you can run that and v8

00:16:59,900 --> 00:17:04,850
and as long as you can do that you can

00:17:02,000 --> 00:17:07,850
do a lot of heuk to transparently get

00:17:04,850 --> 00:17:09,980
that into v8 so yeah hack around and

00:17:07,850 --> 00:17:12,199
bring every language of the world to no

00:17:09,980 --> 00:17:14,620
js' so we can finally achieve world

00:17:12,199 --> 00:17:18,230
domination as it was a plan all along

00:17:14,620 --> 00:17:21,579
that's great well thank you so much for

00:17:18,230 --> 00:17:28,400
attending this thank you

00:17:21,579 --> 00:17:30,770
alright how's everyone feeling we I'm

00:17:28,400 --> 00:17:32,530
very excited for our next our next guest

00:17:30,770 --> 00:17:36,110
to come on and that is Maryanne via

00:17:32,530 --> 00:17:37,140
which please come up to the stage let's

00:17:36,110 --> 00:17:43,529
have a round of applause for

00:17:37,140 --> 00:17:43,529
[Applause]

00:17:47,480 --> 00:17:57,500
I think it's on

00:17:53,559 --> 00:17:59,269
welcome Marian thank you so tell us a

00:17:57,500 --> 00:18:00,710
little bit about your talk and the title

00:17:59,269 --> 00:18:04,039
of that talk was transforming a country

00:18:00,710 --> 00:18:05,840
through code so yeah today we are

00:18:04,039 --> 00:18:08,210
showing about our work impunity

00:18:05,840 --> 00:18:11,200
appearance DEP is a nonprofit

00:18:08,210 --> 00:18:15,309
organization and NGO from Columbia and

00:18:11,200 --> 00:18:17,690
in in my talk I I was talking about

00:18:15,309 --> 00:18:20,929
sharing about when you think about

00:18:17,690 --> 00:18:23,480
Colombia South America first you don't

00:18:20,929 --> 00:18:26,299
know how to pronounce it if you are from

00:18:23,480 --> 00:18:28,519
out of Colombia so it's column yet not

00:18:26,299 --> 00:18:30,350
Colombia as the university is very

00:18:28,519 --> 00:18:32,299
different I admit that I was taking

00:18:30,350 --> 00:18:36,710
notes and I totally spelled it wrong and

00:18:32,299 --> 00:18:37,130
then you corrected me so yeah it's

00:18:36,710 --> 00:18:40,760
different

00:18:37,130 --> 00:18:44,080
so and the other thing is I know we have

00:18:40,760 --> 00:18:47,179
a really strong story about war and

00:18:44,080 --> 00:18:50,809
about the internal guerrilla problem and

00:18:47,179 --> 00:18:53,929
I know you so narcos of course and

00:18:50,809 --> 00:18:56,240
Netflix is a pretty primetime show but

00:18:53,929 --> 00:18:59,720
that's not the reality in our country so

00:18:56,240 --> 00:19:04,850
we create a small group with Tigers in

00:18:59,720 --> 00:19:08,570
2002 and a 15 and we stir from them and

00:19:04,850 --> 00:19:11,830
right now we are circled 1200 women

00:19:08,570 --> 00:19:15,110
young women who are learning how to code

00:19:11,830 --> 00:19:19,100
that's that's just crazy the growth on

00:19:15,110 --> 00:19:23,240
that so that's great can you tell us

00:19:19,100 --> 00:19:23,620
what what - is it plainer am I saying

00:19:23,240 --> 00:19:27,080
that right

00:19:23,620 --> 00:19:30,769
pioneers dev can you tell us what that

00:19:27,080 --> 00:19:33,320
looks like like what what you do with

00:19:30,769 --> 00:19:35,539
that and what what is like the typical

00:19:33,320 --> 00:19:37,639
story of a young woman who goes through

00:19:35,539 --> 00:19:40,639
that program what does it look like okay

00:19:37,639 --> 00:19:44,330
so we realized that a it becomes like a

00:19:40,639 --> 00:19:48,320
study group of five enthusiastic girls I

00:19:44,330 --> 00:19:52,700
was one of them but then we realized

00:19:48,320 --> 00:19:55,190
that 85% of our group that sir small was

00:19:52,700 --> 00:19:57,200
from they have lower income so they

00:19:55,190 --> 00:20:00,840
don't can afford to take a ticket to go

00:19:57,200 --> 00:20:03,690
to our innovation hub Rita Imogene

00:20:00,840 --> 00:20:06,570
so the first a successful story was

00:20:03,690 --> 00:20:08,580
milady milady is a typical girl from the

00:20:06,570 --> 00:20:11,249
communist communist is the press area of

00:20:08,580 --> 00:20:15,230
our city and she can afford to go to

00:20:11,249 --> 00:20:20,309
university or to get a job because she

00:20:15,230 --> 00:20:24,769
doesn't know how to do to work in in in

00:20:20,309 --> 00:20:28,049
a qualified war no on the street so she

00:20:24,769 --> 00:20:28,440
goes to Pineda's and we only create a

00:20:28,049 --> 00:20:31,740
meet-up

00:20:28,440 --> 00:20:35,399
but this meetup really changed her life

00:20:31,740 --> 00:20:39,480
so it was like 10a meetups that year it

00:20:35,399 --> 00:20:42,269
was like 2016 and at the end of the year

00:20:39,480 --> 00:20:45,169
she could get her first job in technical

00:20:42,269 --> 00:20:47,970
so it was possible that's so awesome

00:20:45,169 --> 00:20:52,619
what kind of technology does the group

00:20:47,970 --> 00:20:55,080
focus on so our our core was note

00:20:52,619 --> 00:20:58,519
because we have a really cool mentors

00:20:55,080 --> 00:21:01,230
that are here in in this conference and

00:20:58,519 --> 00:21:03,539
they are really great for up there from

00:21:01,230 --> 00:21:06,090
the tech culture in Colombia because

00:21:03,539 --> 00:21:08,190
they create the first conference in our

00:21:06,090 --> 00:21:12,960
country that was joyous conf I was

00:21:08,190 --> 00:21:15,419
Corgan Iser in 2018 and 2017 and I very

00:21:12,960 --> 00:21:17,190
close to this community and actually

00:21:15,419 --> 00:21:22,200
they most of them

00:21:17,190 --> 00:21:24,869
I know note is is is back-end but most

00:21:22,200 --> 00:21:28,139
of them has really strong a route from

00:21:24,869 --> 00:21:30,269
in the JavaScript language and most of

00:21:28,139 --> 00:21:32,580
them are front-end developers but we

00:21:30,269 --> 00:21:36,450
have really cool girls and with markers

00:21:32,580 --> 00:21:39,269
doing note in Colombia very cool so that

00:21:36,450 --> 00:21:41,639
that's like the way that you get into

00:21:39,269 --> 00:21:43,919
the program you you kind of start with

00:21:41,639 --> 00:21:47,070
no no skills in Peru

00:21:43,919 --> 00:21:50,309
zero they they they actually mmm and

00:21:47,070 --> 00:21:54,350
most of them don't have a computer so we

00:21:50,309 --> 00:21:59,129
we have a special room in retainer with

00:21:54,350 --> 00:22:01,049
really cool PC laptops and they get in

00:21:59,129 --> 00:22:03,269
touch with the technology through this

00:22:01,049 --> 00:22:07,279
space because they don't have it in

00:22:03,269 --> 00:22:10,860
their homes so that's from zero actually

00:22:07,279 --> 00:22:11,970
and this is and so they they go from

00:22:10,860 --> 00:22:15,660
that and

00:22:11,970 --> 00:22:18,240
and how about how long does it is the

00:22:15,660 --> 00:22:22,320
typical program is one year but I

00:22:18,240 --> 00:22:25,920
actually as specified that I mean they

00:22:22,320 --> 00:22:28,500
they learn how to how to search how to

00:22:25,920 --> 00:22:33,530
search and how to search in a stack

00:22:28,500 --> 00:22:37,380
overflow and github and yes on how to

00:22:33,530 --> 00:22:40,170
they self learn in their in their in

00:22:37,380 --> 00:22:42,420
other space like libraries or a small

00:22:40,170 --> 00:22:46,140
study groups and they can share a one

00:22:42,420 --> 00:22:48,870
laptop four five five young women but

00:22:46,140 --> 00:22:51,360
with mentorship because we also have a

00:22:48,870 --> 00:22:54,990
mentorship program through a year they

00:22:51,360 --> 00:22:59,190
can get the job very cool

00:22:54,990 --> 00:23:02,730
so this was started in 2015 you said in

00:22:59,190 --> 00:23:05,220
your city right and that's amazing yep

00:23:02,730 --> 00:23:07,980
and it has expanded beyond that right

00:23:05,220 --> 00:23:09,900
yes right now we are in treatment cities

00:23:07,980 --> 00:23:12,990
in Colombia Cali Barranquilla and

00:23:09,900 --> 00:23:16,680
merging imagine actually right now is a

00:23:12,990 --> 00:23:19,020
really big we have a really big tech hub

00:23:16,680 --> 00:23:21,330
right there but in other cities

00:23:19,020 --> 00:23:24,450
that's no story because they don't have

00:23:21,330 --> 00:23:26,850
too many companies in there oh actually

00:23:24,450 --> 00:23:28,710
it's not it's not trending for for

00:23:26,850 --> 00:23:32,190
companies to be there or don't have

00:23:28,710 --> 00:23:35,070
these spaces to to to run the meetups so

00:23:32,190 --> 00:23:38,280
we are really helping through melody to

00:23:35,070 --> 00:23:40,010
reach other areas from Colombia that

00:23:38,280 --> 00:23:42,900
they don't have too many opportunities

00:23:40,010 --> 00:23:45,600
what kind of support do you get like

00:23:42,900 --> 00:23:48,120
from the local businesses or from the

00:23:45,600 --> 00:23:50,400
city or from the country like what kind

00:23:48,120 --> 00:23:52,950
of support is there for you I just did

00:23:50,400 --> 00:23:56,220
three things we need we need someone to

00:23:52,950 --> 00:23:59,490
want to share their knowledge so you if

00:23:56,220 --> 00:24:01,710
you are if you feel like you can share

00:23:59,490 --> 00:24:05,040
with us Unidas you can write us or

00:24:01,710 --> 00:24:07,920
follow us in our social media and you

00:24:05,040 --> 00:24:10,110
are able to to share with one p anita in

00:24:07,920 --> 00:24:12,660
made in colombia or in other three

00:24:10,110 --> 00:24:14,520
series that we are right now the other

00:24:12,660 --> 00:24:17,340
thing is venue because we need a place

00:24:14,520 --> 00:24:20,640
to run these meetups and the co-working

00:24:17,340 --> 00:24:22,230
so innovation hubs will be very open to

00:24:20,640 --> 00:24:25,800
us in

00:24:22,230 --> 00:24:27,900
in cities like Ali or another ones that

00:24:25,800 --> 00:24:30,360
we'd like to to open his car to Hannah

00:24:27,900 --> 00:24:32,310
for example on Cartagena was really

00:24:30,360 --> 00:24:35,280
difficult to find a place but perhaps

00:24:32,310 --> 00:24:39,570
through universities we can reach them

00:24:35,280 --> 00:24:41,790
for 2020 and the third thing will be a

00:24:39,570 --> 00:24:45,330
food because we like to share with them

00:24:41,790 --> 00:24:52,080
something snacks but will be a really

00:24:45,330 --> 00:24:56,460
low we need a really we need cookies and

00:24:52,080 --> 00:25:01,890
coffee that's it yeah absolutely

00:24:56,460 --> 00:25:04,080
what how does is there any other like

00:25:01,890 --> 00:25:09,390
type of funding that happens for that

00:25:04,080 --> 00:25:14,280
yeah we create we can shop if I like we

00:25:09,390 --> 00:25:16,560
put these t-shirts that cost like $15 is

00:25:14,280 --> 00:25:19,380
in pesos that people say that and it's

00:25:16,560 --> 00:25:23,460
like 35 K and they say like oh my god

00:25:19,380 --> 00:25:27,660
it's so much but it's the ERM then the

00:25:23,460 --> 00:25:30,510
conversion will be $15 it could be less

00:25:27,660 --> 00:25:32,760
but you can buy a t-shirt and perhaps

00:25:30,510 --> 00:25:34,890
with called sentence out of Colombia

00:25:32,760 --> 00:25:40,530
right now but you are supporting our

00:25:34,890 --> 00:25:42,900
cause and has has the group has it

00:25:40,530 --> 00:25:43,530
expended outside of Colombia yes

00:25:42,900 --> 00:25:47,820
actually

00:25:43,530 --> 00:25:51,090
I know in Latin America they're few

00:25:47,820 --> 00:25:54,030
groups about girls in coding areas but

00:25:51,090 --> 00:25:58,650
there are some places like Bolivia or

00:25:54,030 --> 00:26:00,930
Peru Peru also have but I mean Bolivia

00:25:58,650 --> 00:26:04,130
Ecuador and they have a space for

00:26:00,930 --> 00:26:06,600
something like pinellas but we are

00:26:04,130 --> 00:26:09,930
creating a change one community at a

00:26:06,600 --> 00:26:14,670
time so open a meet-up in other cities

00:26:09,930 --> 00:26:16,230
because we have 32 departamentos and the

00:26:14,670 --> 00:26:19,560
parameters will be like puros or

00:26:16,230 --> 00:26:23,580
something like that in demographical

00:26:19,560 --> 00:26:27,810
political divisions but we have a really

00:26:23,580 --> 00:26:29,910
a jungle or really poor areas that they

00:26:27,810 --> 00:26:31,650
don't have developed like the big cities

00:26:29,910 --> 00:26:33,820
that we are right now so we like to

00:26:31,650 --> 00:26:35,800
spend to the rural areas

00:26:33,820 --> 00:26:40,300
create a bigger impact in our country

00:26:35,800 --> 00:26:42,910
mm-hmm first very interesting yeah it's

00:26:40,300 --> 00:26:44,950
so cool and it's such a great thing and

00:26:42,910 --> 00:26:47,800
you truly are transforming a country

00:26:44,950 --> 00:26:51,490
just as your your title states which is

00:26:47,800 --> 00:26:52,000
really cool how can how can we help with

00:26:51,490 --> 00:26:55,240
that

00:26:52,000 --> 00:26:57,910
no just only right doesn't mean an email

00:26:55,240 --> 00:27:01,600
and give us ideas how you could support

00:26:57,910 --> 00:27:05,170
us and I'm sure we can figure out yeah

00:27:01,600 --> 00:27:07,360
and is that through like like helping

00:27:05,170 --> 00:27:11,080
with like teaching and and things like

00:27:07,360 --> 00:27:13,930
that yeah we need we need people to

00:27:11,080 --> 00:27:17,410
share knowledge and right now I know you

00:27:13,930 --> 00:27:20,560
are we always know something to share

00:27:17,410 --> 00:27:22,780
but perhaps you are always apprentice in

00:27:20,560 --> 00:27:25,600
life but this could really need

00:27:22,780 --> 00:27:27,310
knowledge and time time is the most

00:27:25,600 --> 00:27:29,230
value of currency that you already have

00:27:27,310 --> 00:27:31,780
so if you have the time to share one

00:27:29,230 --> 00:27:33,400
hour with these women young women in

00:27:31,780 --> 00:27:35,380
Colombia will be great

00:27:33,400 --> 00:27:37,780
perhaps we need to improve our English

00:27:35,380 --> 00:27:41,200
skills because they are really smart but

00:27:37,780 --> 00:27:44,470
they need to to to pass the barrier of

00:27:41,200 --> 00:27:46,870
the language and we need to to practice

00:27:44,470 --> 00:27:49,840
our skills so perhaps we'll be taking

00:27:46,870 --> 00:27:53,830
English skills I don't know very good

00:27:49,840 --> 00:27:55,120
and was there anything that you you

00:27:53,830 --> 00:28:00,490
didn't mention in your talk that you

00:27:55,120 --> 00:28:03,100
want to to get out to everyone what do

00:28:00,490 --> 00:28:05,650
you like I don't know any kind of

00:28:03,100 --> 00:28:07,570
message or what do you think I mean your

00:28:05,650 --> 00:28:12,490
talk was really great I was just asking

00:28:07,570 --> 00:28:15,880
no I I think yeah the message is that I

00:28:12,490 --> 00:28:20,020
like to share with you with all of you

00:28:15,880 --> 00:28:22,690
yes please help us help us to transform

00:28:20,020 --> 00:28:24,550
our country it helped us with your time

00:28:22,690 --> 00:28:27,490
and with your knowledge because I know

00:28:24,550 --> 00:28:30,100
here will be the brightest mine too to

00:28:27,490 --> 00:28:32,740
share about note and about JavaScript

00:28:30,100 --> 00:28:35,080
world so we need them we need change

00:28:32,740 --> 00:28:37,990
these women young women wore lights

00:28:35,080 --> 00:28:39,850
thank you love it love what you're doing

00:28:37,990 --> 00:28:42,780
thank you so much for doing that and

00:28:39,850 --> 00:28:42,780
thank you for talking with us

00:28:47,429 --> 00:28:54,249
all right next up we have Chris well

00:28:51,159 --> 00:29:06,519
Wilcox and Jason ekkuva ch so please

00:28:54,249 --> 00:29:10,149
welcome them to the stage all right

00:29:06,519 --> 00:29:13,720
welcome so Chris you are an engineer at

00:29:10,149 --> 00:29:16,389
Google and your talk yesterday was oh no

00:29:13,720 --> 00:29:18,850
the robots are taking over I think yeah

00:29:16,389 --> 00:29:20,740
so I gave a talk about how you use bots

00:29:18,850 --> 00:29:23,409
and automation for the Google cloud

00:29:20,740 --> 00:29:25,360
client libraries to try to make our job

00:29:23,409 --> 00:29:29,529
a little bit easier and a little less

00:29:25,360 --> 00:29:32,110
repo gardeny yeah absolutely and in your

00:29:29,529 --> 00:29:34,710
talk you you mentioned using Pro bot and

00:29:32,110 --> 00:29:37,570
so Jason you're the maintainer of robot

00:29:34,710 --> 00:29:41,619
welcome welcome to the show thank you

00:29:37,570 --> 00:29:42,970
thank you for having me so one thing

00:29:41,619 --> 00:29:45,970
that I thought was pretty cool in your

00:29:42,970 --> 00:29:47,919
talk was you gave an example of or you

00:29:45,970 --> 00:29:49,360
gave a list of the five levels of

00:29:47,919 --> 00:29:50,799
automation and I just wanted to go over

00:29:49,360 --> 00:29:53,710
those real quick and then talk about

00:29:50,799 --> 00:29:56,769
them and they were automating portions

00:29:53,710 --> 00:29:59,409
of your workflow is step one automating

00:29:56,769 --> 00:30:01,690
the discovery and work but under

00:29:59,409 --> 00:30:03,190
supervision would be step two letting

00:30:01,690 --> 00:30:06,570
the robot do the work for you but with

00:30:03,190 --> 00:30:10,029
supervision would be step three and then

00:30:06,570 --> 00:30:12,249
supervisors doing the work supervising

00:30:10,029 --> 00:30:14,110
unsupervised and pulling out the

00:30:12,249 --> 00:30:16,269
fallback support would be step four and

00:30:14,110 --> 00:30:20,320
then the robot is your boss is

00:30:16,269 --> 00:30:21,850
step 5 and so you mentioned that we

00:30:20,320 --> 00:30:24,129
probably will never get to step 5 and we

00:30:21,850 --> 00:30:26,740
wouldn't want to which is is probably a

00:30:24,129 --> 00:30:28,240
good thing yeah it's probably not that

00:30:26,740 --> 00:30:29,409
surprising as some of the works in

00:30:28,240 --> 00:30:32,230
technology but I watched some

00:30:29,409 --> 00:30:34,539
science-fiction and generally that goes

00:30:32,230 --> 00:30:36,369
poorly right anyone that's seen how

00:30:34,539 --> 00:30:38,470
knows that when we take technology to

00:30:36,369 --> 00:30:41,080
that point it gets mean-spirited and

00:30:38,470 --> 00:30:41,830
causes us more pain than then good yeah

00:30:41,080 --> 00:30:45,369
for sure

00:30:41,830 --> 00:30:48,399
what could possibly go wrong so tell us

00:30:45,369 --> 00:30:51,909
about a problem that you're using robots

00:30:48,399 --> 00:30:53,919
to solve so we use we used robots for a

00:30:51,909 --> 00:30:56,620
lot of different things on Google Cloud

00:30:53,919 --> 00:30:59,320
the example I used in the talk

00:30:56,620 --> 00:31:02,290
was about being able to run CIA for

00:30:59,320 --> 00:31:04,480
things that are initiated by non

00:31:02,290 --> 00:31:07,030
contributors so many people in the

00:31:04,480 --> 00:31:09,690
community use dependency monitors so

00:31:07,030 --> 00:31:12,730
things like renovate and those aren't

00:31:09,690 --> 00:31:15,040
first-class members of a repository they

00:31:12,730 --> 00:31:16,690
don't have write access but we don't

00:31:15,040 --> 00:31:19,300
really want to have developers having to

00:31:16,690 --> 00:31:20,770
screen repositories and for for most

00:31:19,300 --> 00:31:23,170
developers this probably isn't a huge

00:31:20,770 --> 00:31:25,060
problem but at Google we have hundreds

00:31:23,170 --> 00:31:27,970
of repositories and so having to go over

00:31:25,060 --> 00:31:30,100
each and everyone just to initiate CI to

00:31:27,970 --> 00:31:32,020
build and test the dependency update is

00:31:30,100 --> 00:31:34,450
it's very painful and so we could save

00:31:32,020 --> 00:31:36,370
literally hundreds of hours developer

00:31:34,450 --> 00:31:38,500
time by using bots to do that work and

00:31:36,370 --> 00:31:41,050
we do it BOTS also for release

00:31:38,500 --> 00:31:43,480
management publishing Docs monitoring

00:31:41,050 --> 00:31:46,930
and we even take it not quite to step

00:31:43,480 --> 00:31:49,150
five but we have some robots that do bot

00:31:46,930 --> 00:31:52,330
monitoring so for instance our

00:31:49,150 --> 00:31:54,490
publishing flow to NPM is multi-step the

00:31:52,330 --> 00:31:56,650
first step is that we build CI and we

00:31:54,490 --> 00:31:58,330
tag things on the github side but

00:31:56,650 --> 00:32:00,640
there's a step after that that will

00:31:58,330 --> 00:32:01,990
publish the NPM and for some reason in

00:32:00,640 --> 00:32:03,640
between those two it doesn't get all the

00:32:01,990 --> 00:32:06,610
way to the end the bot comes through and

00:32:03,640 --> 00:32:08,380
notices and it opens a bug for us that

00:32:06,610 --> 00:32:10,360
sort of ties back into the talk it's

00:32:08,380 --> 00:32:12,100
good to scope your BOTS so while it's

00:32:10,360 --> 00:32:13,690
monitoring it is a very simple task the

00:32:12,100 --> 00:32:16,150
worst thing you can do is open bugs

00:32:13,690 --> 00:32:17,890
against a repo we have some safeguards

00:32:16,150 --> 00:32:21,460
so it doesn't try to open a lot of bugs

00:32:17,890 --> 00:32:24,640
but yeah yeah what could go wrong so you

00:32:21,460 --> 00:32:26,140
have BOTS watching the bots yeah and the

00:32:24,640 --> 00:32:27,790
last the last button the chain is never

00:32:26,140 --> 00:32:28,300
really monitored which is sort of

00:32:27,790 --> 00:32:31,180
problematic

00:32:28,300 --> 00:32:34,750
I don't put knock on knock on wood I

00:32:31,180 --> 00:32:36,190
think terrible's haven't yet so so these

00:32:34,750 --> 00:32:39,940
bots they that you're building to watch

00:32:36,190 --> 00:32:42,700
and tag issues and such that you're

00:32:39,940 --> 00:32:43,780
using Probot for that so Jason why don't

00:32:42,700 --> 00:32:46,720
you tell us a little bit about Probot

00:32:43,780 --> 00:32:48,850
sure I can do that before I do though I

00:32:46,720 --> 00:32:51,490
have this really funny story that I want

00:32:48,850 --> 00:32:53,590
to share about bots watching BOTS there

00:32:51,490 --> 00:32:57,880
was this tweet thread and there was this

00:32:53,590 --> 00:33:02,110
tweet where an open-source project had a

00:32:57,880 --> 00:33:04,360
PO request that was CI was run by a bot

00:33:02,110 --> 00:33:06,490
it was then approved by a different pot

00:33:04,360 --> 00:33:08,530
it was then deployed by a different bot

00:33:06,490 --> 00:33:09,970
and then a different bot came along and

00:33:08,530 --> 00:33:11,139
said hey congratulations everybody great

00:33:09,970 --> 00:33:13,960
job

00:33:11,139 --> 00:33:15,399
so you know who watches the BOTS except

00:33:13,960 --> 00:33:18,129
when they're kind of doing their own

00:33:15,399 --> 00:33:20,230
thing it's kind of dangerous yeah it was

00:33:18,129 --> 00:33:21,970
this sort of weird thing where phosphor

00:33:20,230 --> 00:33:27,220
interacting with each other yeah it was

00:33:21,970 --> 00:33:29,529
awesome and terrifying so pro bot is the

00:33:27,220 --> 00:33:31,600
sort of tagline on the website is it's a

00:33:29,529 --> 00:33:33,190
framework for building github apps so

00:33:31,600 --> 00:33:37,029
kind of apps are awaiting a great with

00:33:33,190 --> 00:33:39,210
github pro bot is very webhook focused

00:33:37,029 --> 00:33:41,860
so you know something happens on github

00:33:39,210 --> 00:33:43,749
your pro bot app will be set up to

00:33:41,860 --> 00:33:46,240
receive a web hook and then it has all

00:33:43,749 --> 00:33:48,460
kinds of like helper api is to say okay

00:33:46,240 --> 00:33:51,669
this happened on github now here's how

00:33:48,460 --> 00:33:53,830
we're gonna handle it so you know very

00:33:51,669 --> 00:33:56,950
common example would be somebody pushes

00:33:53,830 --> 00:33:58,419
code we want to run CI most CI providers

00:33:56,950 --> 00:33:59,799
will sort of have that built in but if

00:33:58,419 --> 00:34:01,840
you wanted to build that through Probot

00:33:59,799 --> 00:34:05,919
that's how you would sort of frame it

00:34:01,840 --> 00:34:08,109
Thanks so that sounds very similar to

00:34:05,919 --> 00:34:11,079
how actions work from my understanding

00:34:08,109 --> 00:34:12,690
like they they're responding to actions

00:34:11,079 --> 00:34:15,399
on a repository that might be

00:34:12,690 --> 00:34:17,619
essentially hooks yeah totally yeah so

00:34:15,399 --> 00:34:20,260
pro bot does predate actions done so in

00:34:17,619 --> 00:34:21,700
actions was coming along the other

00:34:20,260 --> 00:34:23,740
Probot maintainers and I we sort of

00:34:21,700 --> 00:34:25,299
looked it and said wow this is awesome

00:34:23,740 --> 00:34:27,669
you know this is great this covers so

00:34:25,299 --> 00:34:30,129
many pain points that Probot has so like

00:34:27,669 --> 00:34:31,629
deploying your so you know pro bot is

00:34:30,129 --> 00:34:33,520
just a framework it's a node.js

00:34:31,629 --> 00:34:35,379
framework under the hood it's running an

00:34:33,520 --> 00:34:37,510
Express server so where do you deploy

00:34:35,379 --> 00:34:39,879
that but with github actions all of a

00:34:37,510 --> 00:34:41,020
sudden github runs your workflow

00:34:39,879 --> 00:34:43,629
automation tools which is really

00:34:41,020 --> 00:34:46,419
exciting nice that's really cool so yeah

00:34:43,629 --> 00:34:48,460
it's that was one take away that I took

00:34:46,419 --> 00:34:50,589
from from your talk is is that proba

00:34:48,460 --> 00:34:51,849
really are the apps that you create the

00:34:50,589 --> 00:34:53,859
bots that you create are really just

00:34:51,849 --> 00:34:55,540
note apps and then you can put them

00:34:53,859 --> 00:34:57,730
under version control and keep them

00:34:55,540 --> 00:34:58,990
there it sounds like you could do pretty

00:34:57,730 --> 00:35:01,299
much the same thing

00:34:58,990 --> 00:35:03,609
with github actions where they're just

00:35:01,299 --> 00:35:05,230
under version control in your repository

00:35:03,609 --> 00:35:07,000
itself yeah yeah I mean there are

00:35:05,230 --> 00:35:08,440
definitely a few things that like if I

00:35:07,000 --> 00:35:10,180
were to build a workflow automation tool

00:35:08,440 --> 00:35:13,000
sometimes I'll use get up actions

00:35:10,180 --> 00:35:14,710
sometimes I'll use Pro bot I'd say that

00:35:13,000 --> 00:35:19,059
you know for things like persistence or

00:35:14,710 --> 00:35:21,670
long running tasks if you know you care

00:35:19,059 --> 00:35:22,630
if the server suddenly dies Pro BOTS

00:35:21,670 --> 00:35:23,320
probably a better option

00:35:22,630 --> 00:35:24,940
but if

00:35:23,320 --> 00:35:27,120
you think to yourself hey I'm gonna run

00:35:24,940 --> 00:35:29,500
this app in like a lambda function

00:35:27,120 --> 00:35:37,990
actions might be a really really great

00:35:29,500 --> 00:35:41,470
place to do that nice so tell me like

00:35:37,990 --> 00:35:44,260
are there things that that actions solve

00:35:41,470 --> 00:35:47,890
that Probot doesn't or vice versa yeah

00:35:44,260 --> 00:35:50,590
so one of the sort of I have two things

00:35:47,890 --> 00:35:52,840
that I want to mention so I think the

00:35:50,590 --> 00:35:55,630
most exciting one to me is in github

00:35:52,840 --> 00:35:59,560
actions you can really really easily

00:35:55,630 --> 00:36:01,120
clone down the repository that the

00:35:59,560 --> 00:36:02,800
action is you know taking actions

00:36:01,120 --> 00:36:04,690
against so you know you'll push some

00:36:02,800 --> 00:36:06,880
code and you want to run like some kind

00:36:04,690 --> 00:36:09,430
of test coverage tool or something in

00:36:06,880 --> 00:36:13,210
Probot you'd have to like download a

00:36:09,430 --> 00:36:15,010
whole get you know object thing which in

00:36:13,210 --> 00:36:17,560
no it isn't very fun to do but in

00:36:15,010 --> 00:36:19,030
actions you can you know add one line to

00:36:17,560 --> 00:36:20,290
a yamo file and suddenly you have all

00:36:19,030 --> 00:36:23,350
that code available to you so that's

00:36:20,290 --> 00:36:25,600
really exciting that sort of enables a

00:36:23,350 --> 00:36:27,370
whole slew of new things and then

00:36:25,600 --> 00:36:29,560
another one and this is something that

00:36:27,370 --> 00:36:31,450
in the probic community we saw as being

00:36:29,560 --> 00:36:33,670
like a really important addition that we

00:36:31,450 --> 00:36:37,660
wanted to see in the platform itself is

00:36:33,670 --> 00:36:39,280
some concept of secrets so you know in a

00:36:37,660 --> 00:36:41,050
repository you want to configure some

00:36:39,280 --> 00:36:42,790
API tokens to deal with other things

00:36:41,050 --> 00:36:45,070
like maybe you're pushing to send grid

00:36:42,790 --> 00:36:47,380
or some other service right

00:36:45,070 --> 00:36:49,510
there's not really a built-in way to do

00:36:47,380 --> 00:36:50,800
that in a repository but with actions

00:36:49,510 --> 00:36:52,990
you can include these things called

00:36:50,800 --> 00:36:54,820
secrets and you can include those in

00:36:52,990 --> 00:36:58,930
your action runs and it sort of just

00:36:54,820 --> 00:37:01,000
works super well nice that's really cool

00:36:58,930 --> 00:37:03,310
so there's there's a lot of a lot that

00:37:01,000 --> 00:37:06,700
you can do with that with either Probot

00:37:03,310 --> 00:37:10,470
or actions Chris what is the most

00:37:06,700 --> 00:37:10,470
complex thing that you have a bot doing

00:37:10,650 --> 00:37:17,800
so typically you don't want BOTS to be

00:37:14,500 --> 00:37:19,810
complex yeah so complex boxes fail and

00:37:17,800 --> 00:37:22,180
complex ways and and that that tends to

00:37:19,810 --> 00:37:23,950
get sort of hairy I would say the the

00:37:22,180 --> 00:37:27,010
neatest thing we probably do though I'm

00:37:23,950 --> 00:37:29,140
not that it's that complex we find that

00:37:27,010 --> 00:37:31,630
especially so many repositories issues

00:37:29,140 --> 00:37:33,280
go stale either it gets assigned to a

00:37:31,630 --> 00:37:35,700
developer and that developer gets

00:37:33,280 --> 00:37:37,800
overburdened or goes on leave

00:37:35,700 --> 00:37:39,870
or just not their area of expertise they

00:37:37,800 --> 00:37:41,070
were miss assigned so it just Falls to

00:37:39,870 --> 00:37:42,870
the bottom of their or their sack and

00:37:41,070 --> 00:37:44,250
the stuff they do and if we detect that

00:37:42,870 --> 00:37:46,860
we'll we'll pick someone else on the

00:37:44,250 --> 00:37:50,100
team to randomly assign it to it's a an

00:37:46,860 --> 00:37:51,810
issue juggler essentially and that that

00:37:50,100 --> 00:37:53,010
tends to stop things from just getting

00:37:51,810 --> 00:37:54,750
stale and makes it makes it look like

00:37:53,010 --> 00:37:55,740
we're a little more active and and we

00:37:54,750 --> 00:37:59,280
can be a little more responsive to

00:37:55,740 --> 00:38:01,050
customers the actually most complex

00:37:59,280 --> 00:38:02,160
thing we do is probably publishing just

00:38:01,050 --> 00:38:04,080
because there's a lot of steps

00:38:02,160 --> 00:38:06,540
sure individually it's all very simple

00:38:04,080 --> 00:38:08,640
but we have to publish Docs and as well

00:38:06,540 --> 00:38:10,590
as the the samples that sell the samples

00:38:08,640 --> 00:38:13,140
for the the repository pod story in the

00:38:10,590 --> 00:38:15,260
package the NPM package we use

00:38:13,140 --> 00:38:18,000
typescript so that needs to be transpile

00:38:15,260 --> 00:38:19,620
none of it's too complicated but all the

00:38:18,000 --> 00:38:21,330
pieces do need to fall together and for

00:38:19,620 --> 00:38:23,700
that example what level of automation

00:38:21,330 --> 00:38:26,820
would you say that falls under at this

00:38:23,700 --> 00:38:28,530
point it's up to I would say it's three

00:38:26,820 --> 00:38:30,150
or four so the the levels are a bit

00:38:28,530 --> 00:38:32,790
fluid mm-hmm if you notice from the talk

00:38:30,150 --> 00:38:34,740
they're based on something to do an

00:38:32,790 --> 00:38:36,600
automotive engineering to sort of do

00:38:34,740 --> 00:38:38,460
driverless car leveling and

00:38:36,600 --> 00:38:41,040
understanding so it's just really a way

00:38:38,460 --> 00:38:43,440
to frame sort of risk and reward yeah

00:38:41,040 --> 00:38:45,180
honestly more than anything else but

00:38:43,440 --> 00:38:48,330
it's about a level probably of three

00:38:45,180 --> 00:38:50,190
maybe a four at this point the the thing

00:38:48,330 --> 00:38:52,950
that that made the change for us is we

00:38:50,190 --> 00:38:55,260
we go as far now to auto detect if we

00:38:52,950 --> 00:38:57,540
ought to publish and so as commits come

00:38:55,260 --> 00:38:59,940
in to the main branch we can detect that

00:38:57,540 --> 00:39:02,400
there are our new changes and we use a

00:38:59,940 --> 00:39:04,530
thing called conventional commits so at

00:39:02,400 --> 00:39:07,530
the front of every commit is a label be

00:39:04,530 --> 00:39:09,180
that chore fix breaking that allows us

00:39:07,530 --> 00:39:11,190
to detect is it a patch or minor a major

00:39:09,180 --> 00:39:13,740
release we can auto generate change logs

00:39:11,190 --> 00:39:14,940
and from that really the only thing you

00:39:13,740 --> 00:39:17,430
do is a developer on the team at this

00:39:14,940 --> 00:39:19,500
point is merge the PR and everything

00:39:17,430 --> 00:39:21,720
else is done for you so we still control

00:39:19,500 --> 00:39:23,700
whether or not we we published NPM sure

00:39:21,720 --> 00:39:26,190
but the rest is is fully automated nice

00:39:23,700 --> 00:39:28,950
so that must save a lot of time it's

00:39:26,190 --> 00:39:32,190
really nice I don't want to go back yeah

00:39:28,950 --> 00:39:34,200
so going back to that example that

00:39:32,190 --> 00:39:39,270
shuffles commits or sorry shuffles

00:39:34,200 --> 00:39:42,420
issues that are getting stale I haven't

00:39:39,270 --> 00:39:45,480
looked at the api's closely but like is

00:39:42,420 --> 00:39:47,520
there an action for that or sorry a web

00:39:45,480 --> 00:39:49,290
hook for that or like are you doing it

00:39:47,520 --> 00:39:50,880
like is it proactively

00:39:49,290 --> 00:39:54,170
searching for that and running like on a

00:39:50,880 --> 00:39:58,620
cron job or something how is that being

00:39:54,170 --> 00:40:01,200
being kicked off so we have we have cron

00:39:58,620 --> 00:40:02,790
BOTS so yeah that that's how this is

00:40:01,200 --> 00:40:05,220
done and that's something we extended

00:40:02,790 --> 00:40:07,230
ourselves with using a thing called

00:40:05,220 --> 00:40:09,740
cloud scheduler that Google cloud can

00:40:07,230 --> 00:40:13,740
provide us as we kick off that action

00:40:09,740 --> 00:40:16,980
but already Probot uses a thing called

00:40:13,740 --> 00:40:19,920
octa kit that gives you access to a ton

00:40:16,980 --> 00:40:21,480
of different github events and there's

00:40:19,920 --> 00:40:22,770
far more than I would have originally

00:40:21,480 --> 00:40:23,460
thought it's definitely something worth

00:40:22,770 --> 00:40:25,800
checking out

00:40:23,460 --> 00:40:28,050
you can trigger on all sorts of things

00:40:25,800 --> 00:40:29,670
and it's very fine-grained it's down to

00:40:28,050 --> 00:40:32,220
pull requests open to synchronization

00:40:29,670 --> 00:40:34,560
comments labels well so you can get you

00:40:32,220 --> 00:40:37,230
can get pretty pretty exact to when you

00:40:34,560 --> 00:40:41,340
want to take some sort of action and run

00:40:37,230 --> 00:40:42,620
some script yeah very cool so what does

00:40:41,340 --> 00:40:45,540
the future look like for you would you

00:40:42,620 --> 00:40:49,410
still continue to use Pro bot would you

00:40:45,540 --> 00:40:51,030
use actions would you have a mix so we

00:40:49,410 --> 00:40:53,280
started doing this before actions this

00:40:51,030 --> 00:40:55,080
around which is why we we made the

00:40:53,280 --> 00:40:56,850
choices we did we didn't have a chance

00:40:55,080 --> 00:40:58,380
to evaluate actions I think if we

00:40:56,850 --> 00:41:00,060
started today we would definitely

00:40:58,380 --> 00:41:03,510
consider actions but there are there are

00:41:00,060 --> 00:41:05,490
a few constraints so actions don't deal

00:41:03,510 --> 00:41:09,180
very well with long running tasks so

00:41:05,490 --> 00:41:10,740
that can be problematic you also it's

00:41:09,180 --> 00:41:12,840
also hard if we ever wanted to scale up

00:41:10,740 --> 00:41:15,570
so we used we used to think called

00:41:12,840 --> 00:41:18,480
Google Cloud functions which ultimately

00:41:15,570 --> 00:41:20,220
takes a small bit of nodejs or a few

00:41:18,480 --> 00:41:22,680
other languages in our case it snowed

00:41:20,220 --> 00:41:25,350
and it executed for us on an event hook

00:41:22,680 --> 00:41:27,180
it starts up a service when we need it

00:41:25,350 --> 00:41:30,420
and shuts it down so it costs us very

00:41:27,180 --> 00:41:32,310
little money and we could adapt that

00:41:30,420 --> 00:41:34,470
into docker containers fairly

00:41:32,310 --> 00:41:35,730
straightforward like and then you know

00:41:34,470 --> 00:41:38,400
and maybe eventually we need to cook in

00:41:35,730 --> 00:41:40,680
Eddie's cluster who knows we've also

00:41:38,400 --> 00:41:43,110
extended to have some security measures

00:41:40,680 --> 00:41:44,700
so we we stored none of the secrets in

00:41:43,110 --> 00:41:46,620
the functions themselves that are all

00:41:44,700 --> 00:41:48,960
stored in a key management service also

00:41:46,620 --> 00:41:51,660
a thing that Google cloud provides and

00:41:48,960 --> 00:41:53,130
allows us to to be a little more secure

00:41:51,660 --> 00:41:55,170
a little more confident it's also a lot

00:41:53,130 --> 00:41:57,510
easier for us to rotate our secrets and

00:41:55,170 --> 00:42:00,540
so for a convenience standpoint it's

00:41:57,510 --> 00:42:02,700
pretty good for us nice so Jason what is

00:42:00,540 --> 00:42:04,500
what is the future of robot

00:42:02,700 --> 00:42:06,960
look like that will it have some kind of

00:42:04,500 --> 00:42:10,410
maybe integration with actions or some

00:42:06,960 --> 00:42:13,560
way of sharing like the capabilities

00:42:10,410 --> 00:42:16,260
between the two how does that look

00:42:13,560 --> 00:42:18,180
that's a great question first of all who

00:42:16,260 --> 00:42:18,750
knows and we can sort of you know do our

00:42:18,180 --> 00:42:21,420
best guess

00:42:18,750 --> 00:42:24,180
but what I'd love to see is some of the

00:42:21,420 --> 00:42:25,770
features of actions sort of opened up to

00:42:24,180 --> 00:42:27,420
the ecosystem so like the secrets thing

00:42:25,770 --> 00:42:28,859
I was talking about yeah that's specific

00:42:27,420 --> 00:42:31,109
to actions but I'd love to see it come

00:42:28,859 --> 00:42:33,660
to you know the general ecosystem so the

00:42:31,109 --> 00:42:36,030
pro bot can use it and you know enable

00:42:33,660 --> 00:42:37,530
it for integrators that way that itself

00:42:36,030 --> 00:42:40,650
a big problem yeah for sure

00:42:37,530 --> 00:42:43,320
um but otherwise I mean I still see them

00:42:40,650 --> 00:42:44,490
as separate hmm I still see them as you

00:42:43,320 --> 00:42:47,280
know two separate ways to build

00:42:44,490 --> 00:42:49,200
integrations I personally have written

00:42:47,280 --> 00:42:50,880
you know a ton of github actions I think

00:42:49,200 --> 00:42:52,650
they're wonderful I've done of Probot

00:42:50,880 --> 00:42:54,510
apps and you know every time I go and

00:42:52,650 --> 00:42:56,329
build something new I'm like which one

00:42:54,510 --> 00:42:59,849
am I going to choose today you know

00:42:56,329 --> 00:43:03,270
there are some ways to use app robot app

00:42:59,849 --> 00:43:05,490
within actions there's a repository in

00:43:03,270 --> 00:43:09,420
the Probot org on github github comp

00:43:05,490 --> 00:43:12,540
robot it's called I want to say actions

00:43:09,420 --> 00:43:14,430
adapter and the you know premise is you

00:43:12,540 --> 00:43:17,390
wrap your Probot app in this like little

00:43:14,430 --> 00:43:19,680
node adapter thing you run it in actions

00:43:17,390 --> 00:43:21,329
so it can kind of have the best of both

00:43:19,680 --> 00:43:23,250
worlds I mean like I said Pro bots just

00:43:21,329 --> 00:43:24,750
node so you can you know make some

00:43:23,250 --> 00:43:27,569
adjustments and throw it into a github

00:43:24,750 --> 00:43:28,980
action and call it a day so yeah and it

00:43:27,569 --> 00:43:31,770
really gives you that flexibility to

00:43:28,980 --> 00:43:33,750
really choose anything whereas get up

00:43:31,770 --> 00:43:35,099
actions are more kind of streamlined for

00:43:33,750 --> 00:43:37,349
get up there running on github servers

00:43:35,099 --> 00:43:39,660
this like you're running yours on Google

00:43:37,349 --> 00:43:42,900
Lab functions so you can you can have

00:43:39,660 --> 00:43:46,200
way more flexibility and make those

00:43:42,900 --> 00:43:48,690
those more fine-grained decisions with

00:43:46,200 --> 00:43:50,940
robot yeah I mean I'd like in it too you

00:43:48,690 --> 00:43:53,099
know running your own server versus like

00:43:50,940 --> 00:43:56,480
throwing something on Heroku or you know

00:43:53,099 --> 00:43:58,619
it's just about control yeah very cool

00:43:56,480 --> 00:44:03,780
another cool thing that you you showed

00:43:58,619 --> 00:44:06,780
off in your talk was a way to proxy the

00:44:03,780 --> 00:44:08,880
web hooks locally so that you can access

00:44:06,780 --> 00:44:10,609
those and test your Probot locally you

00:44:08,880 --> 00:44:13,740
want to talk about that a little bit so

00:44:10,609 --> 00:44:14,790
I can talk about it or I think I think

00:44:13,740 --> 00:44:18,180
Jason is

00:44:14,790 --> 00:44:19,470
kind of an expert on Smita oh I don't

00:44:18,180 --> 00:44:21,000
want to hear you talk about it cuz I'm

00:44:19,470 --> 00:44:24,060
curious I never get to hear people like

00:44:21,000 --> 00:44:28,260
you know describe it to me sure

00:44:24,060 --> 00:44:32,430
so speed audio is a service that Jason's

00:44:28,260 --> 00:44:34,290
also pretty involved in that proxies in

00:44:32,430 --> 00:44:36,840
our case Jason payloads from github to a

00:44:34,290 --> 00:44:38,700
localhost and so it's it's a rather

00:44:36,840 --> 00:44:41,040
simple service Jason was telling me I

00:44:38,700 --> 00:44:43,920
think it's a hundred hundreds of lines

00:44:41,040 --> 00:44:46,320
of code it's that level and what what it

00:44:43,920 --> 00:44:48,240
allows us to do is locally test our bots

00:44:46,320 --> 00:44:49,950
so we don't need to get Google Cloud

00:44:48,240 --> 00:44:52,020
involved at all we don't need to get

00:44:49,950 --> 00:44:54,869
actions involved or anything we can run

00:44:52,020 --> 00:44:57,359
the Express server locally we can make a

00:44:54,869 --> 00:45:00,510
test repository on github and that will

00:44:57,359 --> 00:45:02,250
send the event to me dot IO and they

00:45:00,510 --> 00:45:04,470
give you a select so it ends up being a

00:45:02,250 --> 00:45:06,600
random character string and that will

00:45:04,470 --> 00:45:09,000
forward to localhost 3000 and allow us

00:45:06,600 --> 00:45:11,100
to test it locally you can debug things

00:45:09,000 --> 00:45:13,200
then that way you can play around a bit

00:45:11,100 --> 00:45:15,750
it doesn't have to be too serious then

00:45:13,200 --> 00:45:18,000
it lets you experiment the other really

00:45:15,750 --> 00:45:19,730
nice thing that semi i/o does is it lets

00:45:18,000 --> 00:45:22,260
you see the requests that have been made

00:45:19,730 --> 00:45:24,690
which I find very useful when it comes

00:45:22,260 --> 00:45:26,790
time to write integration tests unit

00:45:24,690 --> 00:45:28,560
tests I can look at a real JSON payload

00:45:26,790 --> 00:45:31,830
and I can capture that and I can use it

00:45:28,560 --> 00:45:33,030
again later that that I think is

00:45:31,830 --> 00:45:34,350
something I don't see a lot of examples

00:45:33,030 --> 00:45:36,420
of but it's probably for me personally

00:45:34,350 --> 00:45:38,880
the most useful thing about Smee yeah

00:45:36,420 --> 00:45:41,850
that's a nice way to get out that is

00:45:38,880 --> 00:45:44,460
very beneficial yeah I think we actually

00:45:41,850 --> 00:45:47,369
have an issue open in the web like the

00:45:44,460 --> 00:45:50,369
server repo that's like add screenshots

00:45:47,369 --> 00:45:54,270
of the JSON payload view because it's

00:45:50,369 --> 00:45:56,340
super super helpful yeah very cool well

00:45:54,270 --> 00:45:59,280
is there anything else that you want to

00:45:56,340 --> 00:46:01,590
tell us about robot that that we haven't

00:45:59,280 --> 00:46:03,960
heard about today um I'd actually like

00:46:01,590 --> 00:46:05,609
to expand on how Smee works on the

00:46:03,960 --> 00:46:07,950
inside because there's like this sort of

00:46:05,609 --> 00:46:10,080
really interesting API that I'd never

00:46:07,950 --> 00:46:11,390
heard about before it's called the event

00:46:10,080 --> 00:46:14,130
source API

00:46:11,390 --> 00:46:15,450
yeah and it's kind of like a I'm

00:46:14,130 --> 00:46:18,990
probably get this wrong but it's like a

00:46:15,450 --> 00:46:22,109
unidirectional WebSocket implementation

00:46:18,990 --> 00:46:24,990
kind of and Smee works by having this

00:46:22,109 --> 00:46:28,170
one server that's constantly running and

00:46:24,990 --> 00:46:31,230
then multiple clients connect to it

00:46:28,170 --> 00:46:34,920
as I'll say eventsource clients is the

00:46:31,230 --> 00:46:39,119
right term but it's sort of this like we

00:46:34,920 --> 00:46:42,540
have this no primary Smee server that

00:46:39,119 --> 00:46:44,430
then shares payloads as they come in to

00:46:42,540 --> 00:46:45,869
all the different clients listening so

00:46:44,430 --> 00:46:49,200
you know we built it specifically for

00:46:45,869 --> 00:46:51,180
Probot apps to like receive webhook

00:46:49,200 --> 00:46:52,619
payloads locally but you know I've

00:46:51,180 --> 00:46:54,599
played around with like really weird

00:46:52,619 --> 00:46:58,440
implementations of it you know using it

00:46:54,599 --> 00:47:00,930
to capture payloads from you know all

00:46:58,440 --> 00:47:02,640
over the place to not just a Probot app

00:47:00,930 --> 00:47:05,549
but you know some running servers or

00:47:02,640 --> 00:47:09,440
something so yeah it's a it's a weird

00:47:05,549 --> 00:47:12,210
thing that we've seen people use for

00:47:09,440 --> 00:47:14,819
completely different you know intentions

00:47:12,210 --> 00:47:16,410
and me ever thought about yeah and it's

00:47:14,819 --> 00:47:20,970
kind of cool seeing it yeah that's

00:47:16,410 --> 00:47:22,890
really cool yeah so that is that's like

00:47:20,970 --> 00:47:24,210
you said there's a single server that's

00:47:22,890 --> 00:47:26,549
the server that you're running and then

00:47:24,210 --> 00:47:29,010
the clients would be like like a server

00:47:26,549 --> 00:47:30,690
that that Chris is running for yeah yeah

00:47:29,010 --> 00:47:32,700
exactly so there's like two separate

00:47:30,690 --> 00:47:35,040
parts to it there's me IO and then

00:47:32,700 --> 00:47:36,839
there's the semi client there's a CLI or

00:47:35,040 --> 00:47:38,520
you can use it programmatically so like

00:47:36,839 --> 00:47:40,950
there's some built-in support and Probot

00:47:38,520 --> 00:47:45,270
okay but you can also just use the CLI

00:47:40,950 --> 00:47:46,500
directly cool very cool well thank you

00:47:45,270 --> 00:47:49,410
so much for for coming on and talking

00:47:46,500 --> 00:47:52,680
about robot and for sharing your wisdom

00:47:49,410 --> 00:47:54,000
on on robots and making me feel a little

00:47:52,680 --> 00:47:55,920
a little safer that we're not going to

00:47:54,000 --> 00:47:57,990
get to level five automation anytime

00:47:55,920 --> 00:48:00,180
soon and then you're actively not doing

00:47:57,990 --> 00:48:02,960
that so appreciate that yeah thanks for

00:48:00,180 --> 00:48:02,960
having me thank you

00:48:07,820 --> 00:48:13,500
all right we have one more talk that

00:48:11,160 --> 00:48:15,480
we're gonna do and that is on nodejs

00:48:13,500 --> 00:48:17,850
worker thread so I'd like to introduce

00:48:15,480 --> 00:48:19,860
rich taut and Anna Henningsen if you'd

00:48:17,850 --> 00:48:39,150
please come up let's give them a round

00:48:19,860 --> 00:48:40,380
of applause I was gonna have some I was

00:48:39,150 --> 00:48:42,900
gonna have some stadium walk out me and

00:48:40,380 --> 00:48:48,570
sake but I was gonna have some stadium

00:48:42,900 --> 00:48:54,210
walk out music yeah so welcome why don't

00:48:48,570 --> 00:48:57,930
you introduce yourselves okay so I'm

00:48:54,210 --> 00:49:00,000
Anna I work for a firm which is an Irish

00:48:57,930 --> 00:49:04,830
noches consulting company and I work on

00:49:00,000 --> 00:49:07,140
noches so my job is working on bleeding

00:49:04,830 --> 00:49:09,420
edge features panochas and other noches

00:49:07,140 --> 00:49:12,570
things yeah so workers this one thing

00:49:09,420 --> 00:49:16,770
that I pushed right a bit yeah yeah and

00:49:12,570 --> 00:49:20,190
workers so I'm learning about the node

00:49:16,770 --> 00:49:21,660
like team internals and does what

00:49:20,190 --> 00:49:24,359
working group does workers kind of fall

00:49:21,660 --> 00:49:28,020
under or does it and so it doesn't have

00:49:24,359 --> 00:49:30,119
its own working group it is it is what

00:49:28,020 --> 00:49:33,660
the like we call a strategic initiative

00:49:30,119 --> 00:49:36,090
and rich can probably talk a lot more

00:49:33,660 --> 00:49:39,210
about what that exactly is than I do

00:49:36,090 --> 00:49:40,410
but basically in stew there's somebody

00:49:39,210 --> 00:49:42,900
on the technical steering committee of

00:49:40,410 --> 00:49:45,869
no Jess who is in charge of like pushing

00:49:42,900 --> 00:49:48,270
that forward it's like who's who reports

00:49:45,869 --> 00:49:51,750
like what progress has been made and so

00:49:48,270 --> 00:49:52,200
on yeah cool and rich you an introduce

00:49:51,750 --> 00:49:54,540
yourself

00:49:52,200 --> 00:49:56,070
yeah I'm rich I work at the UCSF

00:49:54,540 --> 00:49:58,830
University of California in San

00:49:56,070 --> 00:50:02,330
Francisco library where my nodejs work

00:49:58,830 --> 00:50:07,590
is tolerated what is not not my primary

00:50:02,330 --> 00:50:11,490
responsibility yeah so yeah but most of

00:50:07,590 --> 00:50:14,340
the work that happens inside noches well

00:50:11,490 --> 00:50:16,380
I don't know depends I wanta fied but a

00:50:14,340 --> 00:50:18,030
lot of the work that happens isn't an

00:50:16,380 --> 00:50:19,370
association initiative and isn't in a

00:50:18,030 --> 00:50:22,640
working group it's you

00:50:19,370 --> 00:50:24,050
there's no roadmap because the features

00:50:22,640 --> 00:50:25,790
that get implemented and the bugs that

00:50:24,050 --> 00:50:28,610
get fixed or whatever the people who are

00:50:25,790 --> 00:50:31,670
contributing and collaborating wanna you

00:50:28,610 --> 00:50:36,470
know take their time to fix and and and

00:50:31,670 --> 00:50:39,950
implement and really really wanted

00:50:36,470 --> 00:50:41,900
worker threads yeah very cool so let's

00:50:39,950 --> 00:50:49,540
take a step back actually for a moment

00:50:41,900 --> 00:50:53,060
and what even our work of threads well

00:50:49,540 --> 00:50:55,340
well they are threats built on the

00:50:53,060 --> 00:50:57,620
worker model that is used in browsers

00:50:55,340 --> 00:51:04,000
okay like for a long long time Rosa's

00:50:57,620 --> 00:51:09,890
hat this worker like a surprise no I

00:51:04,000 --> 00:51:12,440
know web web workers I mean like service

00:51:09,890 --> 00:51:13,790
workers are also things like yeah like a

00:51:12,440 --> 00:51:15,740
while there we go somebody came up to me

00:51:13,790 --> 00:51:17,300
and asked me like like how do workers

00:51:15,740 --> 00:51:19,610
and service workers relate to each other

00:51:17,300 --> 00:51:21,250
and like them and I'm sorry it's like

00:51:19,610 --> 00:51:23,990
completely different

00:51:21,250 --> 00:51:25,550
it's like Java and JavaScript right yeah

00:51:23,990 --> 00:51:28,280
exactly I totally had my terminology

00:51:25,550 --> 00:51:30,860
mixed up I met web workers they asked

00:51:28,280 --> 00:51:33,710
web workers our way for for like web

00:51:30,860 --> 00:51:35,660
sites to offload CPU intensive work to a

00:51:33,710 --> 00:51:37,340
different threat communicate with it

00:51:35,660 --> 00:51:42,230
like sent JavaScript data back and forth

00:51:37,340 --> 00:51:45,890
and and yeah worker threads essentially

00:51:42,230 --> 00:51:47,720
brings that to know Jess okay yes so you

00:51:45,890 --> 00:51:49,730
can like spawn multiple threads like

00:51:47,720 --> 00:51:52,340
they're kind of like separate no just

00:51:49,730 --> 00:51:54,920
processes they are like in the same

00:51:52,340 --> 00:51:56,450
process and they can share data very

00:51:54,920 --> 00:51:58,460
efficiently especially if it's like

00:51:56,450 --> 00:52:02,170
typed array data thatís you know

00:51:58,460 --> 00:52:05,150
structure very easily as serializable

00:52:02,170 --> 00:52:07,400
yeah yeah I don't know if you saw my

00:52:05,150 --> 00:52:09,110
talk yesterday but I totally evaded the

00:52:07,400 --> 00:52:11,180
subject of explaining what they were by

00:52:09,110 --> 00:52:12,980
saying they're kind of like web workers

00:52:11,180 --> 00:52:15,020
but they have some difference isn't it

00:52:12,980 --> 00:52:16,580
yeah listen I point out one difference I

00:52:15,020 --> 00:52:18,590
think and then they're kind of like

00:52:16,580 --> 00:52:21,440
threads in other programming languages

00:52:18,590 --> 00:52:23,960
but not really and you know and I just

00:52:21,440 --> 00:52:27,470
quickly moved on rather than actually

00:52:23,960 --> 00:52:29,840
try to clarify what kind of gray area

00:52:27,470 --> 00:52:31,190
they actually fall into just go look at

00:52:29,840 --> 00:52:31,730
the documentation start using them don't

00:52:31,190 --> 00:52:33,650
worry

00:52:31,730 --> 00:52:35,599
right don't worry about that's it don't

00:52:33,650 --> 00:52:37,730
worry about a good advice I love it

00:52:35,599 --> 00:52:41,869
those Brits don't worry about it just

00:52:37,730 --> 00:52:44,570
just use the thing so yeah not to to get

00:52:41,869 --> 00:52:47,210
into semantics much about it cuz I will

00:52:44,570 --> 00:52:49,579
get all of this wrong but like when I

00:52:47,210 --> 00:52:52,130
think about like you have your main

00:52:49,579 --> 00:52:54,140
thread in like a JavaScript app or a

00:52:52,130 --> 00:52:56,599
node app and then like every time you do

00:52:54,140 --> 00:52:58,520
something asynchronous that's kind of is

00:52:56,599 --> 00:53:01,849
that considered like a thread or a

00:52:58,520 --> 00:53:05,570
process so that will offload that could

00:53:01,849 --> 00:53:08,630
offload to a thread in the in the in in

00:53:05,570 --> 00:53:12,260
the pool that that that node maintains

00:53:08,630 --> 00:53:14,690
under the hood but no it's not gonna be

00:53:12,260 --> 00:53:16,730
a separate like it's gonna be a thread

00:53:14,690 --> 00:53:18,380
that you manage through place but

00:53:16,730 --> 00:53:20,060
definitely not in a way that should be

00:53:18,380 --> 00:53:21,320
visible through the API exactly like you

00:53:20,060 --> 00:53:24,980
shouldn't think of it that's the

00:53:21,320 --> 00:53:26,750
separate threat unless like yeah you

00:53:24,980 --> 00:53:29,030
should think of it more in terms of like

00:53:26,750 --> 00:53:30,160
the event loop right like yeah yeah

00:53:29,030 --> 00:53:34,579
exactly

00:53:30,160 --> 00:53:36,800
yeah cool so I know that like web

00:53:34,579 --> 00:53:39,109
workers have some constraints in like

00:53:36,800 --> 00:53:40,880
they for example can't access the Dom or

00:53:39,109 --> 00:53:42,950
things like that other similar

00:53:40,880 --> 00:53:44,839
constraints obviously not to the Dom but

00:53:42,950 --> 00:53:47,920
are there or they're constraints to work

00:53:44,839 --> 00:53:47,920
with threads oh yeah

00:53:48,490 --> 00:53:54,770
well let me like for the most part note

00:53:51,230 --> 00:53:56,420
for the most part most Noches libraries

00:53:54,770 --> 00:53:59,000
are available built-in module it's like

00:53:56,420 --> 00:54:00,440
you can use require and it will work the

00:53:59,000 --> 00:54:03,140
same way as it does on the main thread

00:54:00,440 --> 00:54:04,940
okay there are some restrictions that

00:54:03,140 --> 00:54:07,430
are around like managing per process

00:54:04,940 --> 00:54:09,380
state like for example you can't change

00:54:07,430 --> 00:54:11,420
the process title or change the current

00:54:09,380 --> 00:54:13,520
working directory is you know we were

00:54:11,420 --> 00:54:15,170
thinking like okay this is something

00:54:13,520 --> 00:54:17,359
that you know it affects the entire

00:54:15,170 --> 00:54:21,040
process right so like that should

00:54:17,359 --> 00:54:21,040
ideally only happen on the main thread

00:54:21,400 --> 00:54:25,940
but generally no there's like no

00:54:24,290 --> 00:54:28,069
restrictions on what workers can do and

00:54:25,940 --> 00:54:29,540
that's one of the like very important

00:54:28,069 --> 00:54:33,050
ways in which they are different from

00:54:29,540 --> 00:54:36,050
from web workers there's like one or two

00:54:33,050 --> 00:54:38,060
things or whatever small number things

00:54:36,050 --> 00:54:40,850
in process dot or OS

00:54:38,060 --> 00:54:43,760
I think that they can't access but for

00:54:40,850 --> 00:54:44,930
the most part yeah you can do it in the

00:54:43,760 --> 00:54:46,520
main thread you can do it in the worker

00:54:44,930 --> 00:54:48,410
thread worker threads can spawn worker

00:54:46,520 --> 00:54:50,090
threads it spawned additional worker

00:54:48,410 --> 00:54:55,820
threads yeah it could just be worker

00:54:50,090 --> 00:54:57,380
threads all the way down so what what

00:54:55,820 --> 00:54:59,150
state are working threads at right now

00:54:57,380 --> 00:55:02,450
like are they something that that I can

00:54:59,150 --> 00:55:06,560
use in production today yes next

00:55:02,450 --> 00:55:08,720
question so so in no 10 they're still

00:55:06,560 --> 00:55:10,730
considered experimental remote both they

00:55:08,720 --> 00:55:13,340
are stable like there haven't been any

00:55:10,730 --> 00:55:15,830
like significant changes to the API over

00:55:13,340 --> 00:55:17,540
the last half a year maybe a year or so

00:55:15,830 --> 00:55:19,640
so they have effectively been stable for

00:55:17,540 --> 00:55:21,170
a while like the only few adjustments

00:55:19,640 --> 00:55:23,660
that we did before making it officially

00:55:21,170 --> 00:55:26,150
stable I have some very weird edge cases

00:55:23,660 --> 00:55:28,640
around timing and like the message

00:55:26,150 --> 00:55:30,260
transfer thing that you know so in order

00:55:28,640 --> 00:55:32,660
to make it conform to the web platform

00:55:30,260 --> 00:55:34,820
tests for that you you know you would

00:55:32,660 --> 00:55:37,910
never run into that as a regular note

00:55:34,820 --> 00:55:41,840
developer so yeah they've been stable

00:55:37,910 --> 00:55:43,280
for a while I have it in a way nice cool

00:55:41,840 --> 00:55:45,440
so I can use them in as long as I'm in

00:55:43,280 --> 00:55:48,440
there twelve I can use them today how do

00:55:45,440 --> 00:55:52,250
you I could also use some on node ten

00:55:48,440 --> 00:55:57,020
but like you know yeah a little warning

00:55:52,250 --> 00:55:58,580
sign in what what can't you do with

00:55:57,020 --> 00:56:00,890
threads and are there like with the

00:55:58,580 --> 00:56:02,390
other like experimental features are

00:56:00,890 --> 00:56:03,650
there things like I'm specifically

00:56:02,390 --> 00:56:05,570
thinking you said you can require in

00:56:03,650 --> 00:56:08,810
there I assume yes modules would also

00:56:05,570 --> 00:56:15,140
work within threads yeah what can't you

00:56:08,810 --> 00:56:18,260
do with them well I mean like one thing

00:56:15,140 --> 00:56:20,480
is like workers are not there to replace

00:56:18,260 --> 00:56:23,390
like the existing multi-process model

00:56:20,480 --> 00:56:27,280
that most order to like at least a lot

00:56:23,390 --> 00:56:27,280
of noches applications use mmm-hmm

00:56:27,670 --> 00:56:33,500
similar because like you know it kind of

00:56:31,430 --> 00:56:36,170
makes things easier when you have

00:56:33,500 --> 00:56:38,840
different processes in some ways like

00:56:36,170 --> 00:56:41,570
you can attach debuggers to them

00:56:38,840 --> 00:56:45,380
individually with with note workers

00:56:41,570 --> 00:56:46,910
that's you know it's kind of tricky it

00:56:45,380 --> 00:56:48,380
works but it's tricky and like chrome

00:56:46,910 --> 00:56:50,870
dev tools doesn't have support for that

00:56:48,380 --> 00:56:53,750
yet and

00:56:50,870 --> 00:56:55,460
you know if like there's a hard crash

00:56:53,750 --> 00:56:57,380
for some reason like the bug and note or

00:56:55,460 --> 00:56:59,270
something it won't tear the whole

00:56:57,380 --> 00:57:01,160
application down just the single process

00:56:59,270 --> 00:57:02,800
that like was spawned by the parent

00:57:01,160 --> 00:57:05,060
mm-hmm

00:57:02,800 --> 00:57:10,310
you know they yet they aren't there to

00:57:05,060 --> 00:57:16,150
replace child processes yeah it said I

00:57:10,310 --> 00:57:18,380
mean that's kind of I mean yeah every

00:57:16,150 --> 00:57:24,470
like every use case is different I guess

00:57:18,380 --> 00:57:27,650
um I would I was I've been surprised a

00:57:24,470 --> 00:57:29,450
few times where you know most mostly

00:57:27,650 --> 00:57:31,640
making you know example applications to

00:57:29,450 --> 00:57:33,550
sort of demonstrate worker threats but

00:57:31,640 --> 00:57:36,020
um but I've been surprised a few times

00:57:33,550 --> 00:57:37,250
in both directions like oh this should

00:57:36,020 --> 00:57:38,810
really you know worker threats should

00:57:37,250 --> 00:57:40,970
have really performed a lot better here

00:57:38,810 --> 00:57:44,540
and they didn't or the other way around

00:57:40,970 --> 00:57:48,980
where wow that really made that take no

00:57:44,540 --> 00:57:51,650
time at all it's yeah so I mean they're

00:57:48,980 --> 00:57:55,490
uh you know the API for worker threads

00:57:51,650 --> 00:57:57,980
is pretty small the surface area it's

00:57:55,490 --> 00:58:00,530
not it's not a sprawling API it's not a

00:57:57,980 --> 00:58:03,050
complicated API it's that everything you

00:58:00,530 --> 00:58:05,570
can you can learn pretty quickly and and

00:58:03,050 --> 00:58:06,770
then I mean I just I find them just it's

00:58:05,570 --> 00:58:08,920
just a lot of fun to just experiment

00:58:06,770 --> 00:58:11,150
with so I mean I would I my

00:58:08,920 --> 00:58:13,190
recommendations go hog-wild and just

00:58:11,150 --> 00:58:14,510
like and just and just benchmark

00:58:13,190 --> 00:58:15,800
everything and see what happens and use

00:58:14,510 --> 00:58:17,570
them where they make sense and don't use

00:58:15,800 --> 00:58:19,850
them where they don't make sense I mean

00:58:17,570 --> 00:58:22,340
the one thing on a warrants against in

00:58:19,850 --> 00:58:25,670
her blog post and and and is absolutely

00:58:22,340 --> 00:58:29,630
true is that you know if you you know

00:58:25,670 --> 00:58:31,850
you can you're not gonna you know you

00:58:29,630 --> 00:58:36,890
you're not going to get any benefit for

00:58:31,850 --> 00:58:40,190
IO heavy stuff with with worker threads

00:58:36,890 --> 00:58:43,160
because you know it already does a lot

00:58:40,190 --> 00:58:45,370
in the with the asynchronous yep calls

00:58:43,160 --> 00:58:49,820
and like your FS dot read or whatever

00:58:45,370 --> 00:58:51,410
two FS not open and you know so like you

00:58:49,820 --> 00:58:53,180
know trying to like you know spawn

00:58:51,410 --> 00:58:55,700
worker threads to deal with you know

00:58:53,180 --> 00:58:58,010
massively concurrent IO is probably not

00:58:55,700 --> 00:59:00,320
gonna get you anything not gonna help it

00:58:58,010 --> 00:59:01,819
all right so that's that's something you

00:59:00,320 --> 00:59:03,619
can just not bother experimenting with

00:59:01,819 --> 00:59:08,319
you like seeing negative results which

00:59:03,619 --> 00:59:11,299
some of us do so yeah so what what is

00:59:08,319 --> 00:59:13,819
there like a specific use case that that

00:59:11,299 --> 00:59:18,920
worker threads were created to to like

00:59:13,819 --> 00:59:22,369
be a solution for yeah that is like CPU

00:59:18,920 --> 00:59:23,660
intensive work that ideally requires a

00:59:22,369 --> 00:59:25,549
lot of communication between the

00:59:23,660 --> 00:59:27,489
different threads because that is

00:59:25,549 --> 00:59:29,769
usually going to be faster than

00:59:27,489 --> 00:59:31,729
communicating with child processes

00:59:29,769 --> 00:59:34,489
depending on how your data is structured

00:59:31,729 --> 00:59:37,489
it's also a lot more flexible like you

00:59:34,489 --> 00:59:39,489
can send circular data or like generally

00:59:37,489 --> 00:59:42,799
things that don't fit into Jason over

00:59:39,489 --> 00:59:45,319
over to threats I think what rich did in

00:59:42,799 --> 00:59:49,039
his talk is a very good example like for

00:59:45,319 --> 00:59:54,289
those who didn't see it you want to

00:59:49,039 --> 00:59:57,559
explain yeah so so if you might recall

00:59:54,289 --> 00:59:58,880
the six degrees of Kevin Bacon game it

00:59:57,559 --> 01:00:03,410
was kind of like that before before

00:59:58,880 --> 01:00:05,869
music and so was you know like you have

01:00:03,410 --> 01:00:08,089
you know two musicians and so you spawn

01:00:05,869 --> 01:00:09,979
two worker threads and have one thread

01:00:08,089 --> 01:00:11,719
try to find everybody who played with

01:00:09,979 --> 01:00:13,369
that musician and the other worker

01:00:11,719 --> 01:00:15,079
thread do it for the other musician and

01:00:13,369 --> 01:00:16,640
sends it back to the main thread and the

01:00:15,079 --> 01:00:18,559
main thread the main thread just you

01:00:16,640 --> 01:00:20,989
know tells the worker threads to stop

01:00:18,559 --> 01:00:22,549
once once they've like once they have a

01:00:20,989 --> 01:00:25,729
musician in common which basically means

01:00:22,549 --> 01:00:27,079
you have a connection but until that

01:00:25,729 --> 01:00:28,579
happens both workers right there just

01:00:27,079 --> 01:00:32,119
you know running running running

01:00:28,579 --> 01:00:33,619
you know gathering lists of people did

01:00:32,119 --> 01:00:38,539
that cover the part you want to cover

01:00:33,619 --> 01:00:40,039
yeah you know you want to offload from

01:00:38,539 --> 01:00:42,829
the main thread yeah because those are

01:00:40,039 --> 01:00:44,329
like really those those queries get to

01:00:42,829 --> 01:00:47,089
be really expensive at least the way I

01:00:44,329 --> 01:00:48,609
did them so for me like the exciting use

01:00:47,089 --> 01:00:50,900
cases are they're like you know you know

01:00:48,609 --> 01:00:53,479
so where I work there's a lot of people

01:00:50,900 --> 01:00:55,759
who do you do or are interested in doing

01:00:53,479 --> 01:00:57,680
data science stuff and they all want to

01:00:55,759 --> 01:01:01,249
use Python which is a great language for

01:00:57,680 --> 01:01:03,369
that javascript has been a terrible

01:01:01,249 --> 01:01:06,229
language for that but you know between

01:01:03,369 --> 01:01:09,739
between worker threads and recently also

01:01:06,229 --> 01:01:11,690
getting big int I you know like I mean

01:01:09,739 --> 01:01:13,459
we're not we're you know rad we're not

01:01:11,690 --> 01:01:16,270
there yet but it's getting you know it's

01:01:13,459 --> 01:01:18,050
getting pretty good for things like

01:01:16,270 --> 01:01:19,580
machine learning and natural language

01:01:18,050 --> 01:01:21,680
processing all that sort of stuff

01:01:19,580 --> 01:01:24,650
the other thing I think about for worker

01:01:21,680 --> 01:01:28,040
threads is all those JavaScript packages

01:01:24,650 --> 01:01:30,140
that do graphic graphics manipulation

01:01:28,040 --> 01:01:32,600
you know like cute here's an NPM package

01:01:30,140 --> 01:01:34,430
that will you know you know create

01:01:32,600 --> 01:01:36,920
thumbnails for you or whatever you know

01:01:34,430 --> 01:01:39,080
I think I think of graphics processing

01:01:36,920 --> 01:01:41,390
and you know that sort of thing is a CPU

01:01:39,080 --> 01:01:44,570
intensive thing and you know why not

01:01:41,390 --> 01:01:47,150
fire off you know for you know want to

01:01:44,570 --> 01:01:50,000
get a pool of four or a worker threads

01:01:47,150 --> 01:01:52,460
or any processes normally you know make

01:01:50,000 --> 01:01:54,860
sense and just you know launch them and

01:01:52,460 --> 01:01:59,030
have them do all of them at once and you

01:01:54,860 --> 01:02:03,320
know bask in the glory of of finishing

01:01:59,030 --> 01:02:05,330
your your your your job faster like

01:02:03,320 --> 01:02:07,730
image processing is a great example of

01:02:05,330 --> 01:02:10,460
you know it's also CPU intensive work

01:02:07,730 --> 01:02:13,130
like image day is usually represented in

01:02:10,460 --> 01:02:15,170
some way as like you and ADA rares you

01:02:13,130 --> 01:02:17,720
know array of bytes so like you can

01:02:15,170 --> 01:02:20,630
transfer or share them with zero cost

01:02:17,720 --> 01:02:21,710
with workers and yeah yeah that's

01:02:20,630 --> 01:02:24,890
something we haven't mentioned yet which

01:02:21,710 --> 01:02:26,840
is that you know um you know unlike with

01:02:24,890 --> 01:02:28,940
a cluster module where you have

01:02:26,840 --> 01:02:31,100
individual processes or or anything we

01:02:28,940 --> 01:02:34,010
have individual processes workers you

01:02:31,100 --> 01:02:36,610
can you can you know share memory if you

01:02:34,010 --> 01:02:39,200
know in certain situations like you know

01:02:36,610 --> 01:02:40,730
if you know the data isn't a very if you

01:02:39,200 --> 01:02:43,610
know what size it is and if it's a very

01:02:40,730 --> 01:02:46,100
predictable format that you can that you

01:02:43,610 --> 01:02:48,140
can put it in you can share the memory

01:02:46,100 --> 01:02:49,610
or you can even transfer the memory so

01:02:48,140 --> 01:02:51,230
that like you know I you know you know

01:02:49,610 --> 01:02:54,170
if you're the worker thread I give you

01:02:51,230 --> 01:02:56,210
the the shared array buffer and I can't

01:02:54,170 --> 01:02:58,430
use it anymore but you can and then you

01:02:56,210 --> 01:03:00,500
know and it's uh which is really really

01:02:58,430 --> 01:03:02,060
cool I think yeah I was just gonna ask

01:03:00,500 --> 01:03:03,920
if it was like shared array buffer if

01:03:02,060 --> 01:03:06,800
that's what you're using as the medium

01:03:03,920 --> 01:03:08,210
to transport between yeah sure you like

01:03:06,800 --> 01:03:10,970
shared array buffers are shared

01:03:08,210 --> 01:03:12,980
beautiful and and array buffers can be

01:03:10,970 --> 01:03:18,050
transferred like you can title Spanish

01:03:12,980 --> 01:03:20,330
it yeah pretty cool so how can people

01:03:18,050 --> 01:03:22,070
get started with worker threads or where

01:03:20,330 --> 01:03:25,490
would you point them to to get started

01:03:22,070 --> 01:03:28,190
with both using them and or contributing

01:03:25,490 --> 01:03:31,320
to them well let me tell you Nick

01:03:28,190 --> 01:03:33,540
if you if you go to I don't know if this

01:03:31,320 --> 01:03:35,430
will still be true for like you know too

01:03:33,540 --> 01:03:38,820
much longer but if you go to Palace

01:03:35,430 --> 01:03:42,060
family Steakhouse dot-com there will be

01:03:38,820 --> 01:03:44,970
a list of links from my talk and the

01:03:42,060 --> 01:03:48,930
very first link is a blog post that on a

01:03:44,970 --> 01:03:52,320
road using worker threads to solve

01:03:48,930 --> 01:03:56,910
Sudoku puzzles and and then there's a

01:03:52,320 --> 01:03:59,970
bunch of other things in there about you

01:03:56,910 --> 01:04:03,750
know my couple blog posts for me and the

01:03:59,970 --> 01:04:06,750
documentation and some sample code and a

01:04:03,750 --> 01:04:07,620
few other things as far as contributing

01:04:06,750 --> 01:04:09,960
to worker threads

01:04:07,620 --> 01:04:12,840
my recommendation is know a lot about

01:04:09,960 --> 01:04:15,200
when this is this is kind of joke but

01:04:12,840 --> 01:04:20,970
not really know a lot about Windows and

01:04:15,200 --> 01:04:26,100
debugging Windows and C++ and then clone

01:04:20,970 --> 01:04:28,290
the node repository and fix tests -

01:04:26,100 --> 01:04:34,130
worker - profit because that one has

01:04:28,290 --> 01:04:36,420
real has been pretty stubborn that yeah

01:04:34,130 --> 01:04:39,000
that's going to be quite a journey if

01:04:36,420 --> 01:04:42,630
you want to do it but we're here to help

01:04:39,000 --> 01:04:44,190
well I'm by we I mean Anna because yeah

01:04:42,630 --> 01:04:47,640
actually knows the implementation yeah I

01:04:44,190 --> 01:04:48,900
don't so far for like you know usually

01:04:47,640 --> 01:04:50,850
when you want to contribute you want to

01:04:48,900 --> 01:04:56,910
like have some visible result of that

01:04:50,850 --> 01:04:59,220
like having like like I think the way

01:04:56,910 --> 01:05:01,590
that they are right now workers as a

01:04:59,220 --> 01:05:03,390
feature are kind of complete you know we

01:05:01,590 --> 01:05:05,460
can add stuff and there's things that I

01:05:03,390 --> 01:05:09,030
want to work on like startup performance

01:05:05,460 --> 01:05:11,040
or there's this like really cool thing

01:05:09,030 --> 01:05:12,990
that the a Java screen your provides was

01:05:11,040 --> 01:05:16,530
called snapshotting it's like you can

01:05:12,990 --> 01:05:18,630
basically take it up note instance and

01:05:16,530 --> 01:05:20,700
take a snapshot of that and then later

01:05:18,630 --> 01:05:23,250
deserialize it which is kind of going to

01:05:20,700 --> 01:05:25,650
give you like a very fast start up if

01:05:23,250 --> 01:05:26,790
you like half boilerplate code that you

01:05:25,650 --> 01:05:29,130
run at the start of a thread or

01:05:26,790 --> 01:05:30,720
something like that that would be really

01:05:29,130 --> 01:05:33,030
cool to have it's gonna be a ton of work

01:05:30,720 --> 01:05:35,820
if somebody's interested that's great

01:05:33,030 --> 01:05:38,970
but yeah you're gonna have to read up a

01:05:35,820 --> 01:05:40,890
lot of v8 AP is with very poor

01:05:38,970 --> 01:05:45,840
documentation yeah you

01:05:40,890 --> 01:05:47,070
I know not at all but that sounds

01:05:45,840 --> 01:05:51,420
amazing I thank you for the very

01:05:47,070 --> 01:05:55,140
specific we know exactly where we

01:05:51,420 --> 01:06:00,480
struggle yeah it's been a terrible test

01:05:55,140 --> 01:06:02,310
for like forever well cool on a rich

01:06:00,480 --> 01:06:03,900
thank you so much for for chatting with

01:06:02,310 --> 01:06:05,460
me today about worker threads and thank

01:06:03,900 --> 01:06:08,880
you to all of the guests that we had on

01:06:05,460 --> 01:06:11,310
Jay s party definitely check out the

01:06:08,880 --> 01:06:14,310
podcast at changeling calm slash Jay's

01:06:11,310 --> 01:06:16,440
party I think that QR code should work I

01:06:14,310 --> 01:06:17,970
tested it though and it didn't so I mean

01:06:16,440 --> 01:06:20,640
just because the screens not bright

01:06:17,970 --> 01:06:23,490
enough but yeah definitely change talk

01:06:20,640 --> 01:06:26,790
that calms party go there check it out

01:06:23,490 --> 01:06:29,130
and we record every Thursday at noon

01:06:26,790 --> 01:06:32,010
central 1:00 Eastern Time so check us

01:06:29,130 --> 01:06:38,119
out join the the party thank you

01:06:32,010 --> 01:06:38,119

YouTube URL: https://www.youtube.com/watch?v=aJK8M1Ab29Q


