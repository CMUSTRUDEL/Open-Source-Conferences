Title: Memory Chronicles: Manage, Trace and Fix Memory Leaks - Giovanny Gongora, NodeSource
Publication date: 2020-05-11
Playlist: Node + JS Interactive 2019
Description: 
	Memory Chronicles: Manage, Trace and Fix Memory Leaks - Giovanny Gongora, NodeSource
Speakers: Giovanny Gongora
Letâ€™s start talking about taking the time to set up a proper test environment to repeat the exact same conditions as in production. Performance metrics? Response time higher? Memory leak? We would walk through different memory leak situations to identify and analyze patterns that produce an increase of memory, CPU usage, and the load average over time, without any apparent reason. Learn about memory and how to access Node.js memory using a V8 Inspector & Chrome Dev Tools, create a dump of the heap memory for the inspected application, with a lot of details about the memory usage, watching memory allocation in real time and finally a compilation of best practices about how we could end fixing the memory leak. In the end, we'll be able to use the right tools to monitor, understand, and debug the memory consumption of a Node.js application on time.
Captions: 
	00:00:00,030 --> 00:00:10,530
okay up this is the name of the talk

00:00:06,690 --> 00:00:13,440
in case you are here for a different one

00:00:10,530 --> 00:00:17,880
don't worry you can go to the one that

00:00:13,440 --> 00:00:21,900
you actually going to hear Oh what I'm

00:00:17,880 --> 00:00:24,269
going to try to do today is show you or

00:00:21,900 --> 00:00:30,029
explain you a few cases where you can

00:00:24,269 --> 00:00:32,610
have memory issues I'll try to go

00:00:30,029 --> 00:00:38,000
through most of the cases it's really

00:00:32,610 --> 00:00:40,829
hard to actually have a definite guy or

00:00:38,000 --> 00:00:44,640
something like you will see in a YouTube

00:00:40,829 --> 00:00:49,079
video this one words one link mega 4k

00:00:44,640 --> 00:00:51,899
full HD fixes all the issues it's really

00:00:49,079 --> 00:00:54,570
hard to get that especially for memory

00:00:51,899 --> 00:00:58,050
issues why because they can happen for

00:00:54,570 --> 00:01:01,230
many reasons and that you can fix them

00:00:58,050 --> 00:01:04,350
on me how many ways so what we are going

00:01:01,230 --> 00:01:07,680
to do is just try to talk about some of

00:01:04,350 --> 00:01:08,880
the cases I have seen some of them are

00:01:07,680 --> 00:01:13,860
worse than others

00:01:08,880 --> 00:01:17,810
but that's it yeah my name it I think

00:01:13,860 --> 00:01:20,880
you all know now my name and my birthday

00:01:17,810 --> 00:01:24,560
that's that's my email that's my Twitter

00:01:20,880 --> 00:01:28,110
if you wanna reach out so sometimes I

00:01:24,560 --> 00:01:28,560
don't treat too much but if you're into

00:01:28,110 --> 00:01:31,430
that

00:01:28,560 --> 00:01:31,430
that's my tutor

00:01:31,619 --> 00:01:38,520
what was this talk is you know just has

00:01:36,119 --> 00:01:42,270
a safe obviously this is more about

00:01:38,520 --> 00:01:44,750
talking and if you really want to or if

00:01:42,270 --> 00:01:47,549
you have a memory leak or you have a

00:01:44,750 --> 00:01:50,460
something wrong with really your

00:01:47,549 --> 00:01:53,280
application and you want to probably

00:01:50,460 --> 00:01:58,079
discuss a bit a little bit more in deep

00:01:53,280 --> 00:02:01,890
we can just talk later the talk or I'll

00:01:58,079 --> 00:02:03,450
be giving a workshop at 2 p.m. just

00:02:01,890 --> 00:02:06,270
around the corner

00:02:03,450 --> 00:02:09,959
about memory leaks and we can just run

00:02:06,270 --> 00:02:12,060
some examples and just hold let you know

00:02:09,959 --> 00:02:13,860
how to fix them and how to identify them

00:02:12,060 --> 00:02:18,030
so if you want to

00:02:13,860 --> 00:02:22,770
have something more protocol you have it

00:02:18,030 --> 00:02:27,480
see you at 2:00 p.m. so this is the

00:02:22,770 --> 00:02:30,120
question I usually ask why because

00:02:27,480 --> 00:02:32,850
people are really excited to just create

00:02:30,120 --> 00:02:35,490
the hand because hey you I have it and

00:02:32,850 --> 00:02:37,980
there's more people eraser is yeah yeah

00:02:35,490 --> 00:02:40,590
you too you too so so this is the

00:02:37,980 --> 00:02:45,060
question how many of you have a memory

00:02:40,590 --> 00:02:48,180
leak or a memory issue you can't

00:02:45,060 --> 00:02:52,790
remember the number of the times or you

00:02:48,180 --> 00:02:56,970
can remember the last time okay okay

00:02:52,790 --> 00:02:59,850
yeah I mean that this is this pretty

00:02:56,970 --> 00:03:02,430
interesting because that there's

00:02:59,850 --> 00:03:04,590
something great about JavaScript and

00:03:02,430 --> 00:03:08,280
node.js in general is that you really

00:03:04,590 --> 00:03:10,740
don't need to learn from the beginning

00:03:08,280 --> 00:03:12,960
about how to deal with this type of

00:03:10,740 --> 00:03:17,370
issues and I think that's what makes

00:03:12,960 --> 00:03:20,310
node and JavaScript really a language

00:03:17,370 --> 00:03:23,430
that everybody can get it start and

00:03:20,310 --> 00:03:27,720
actually start to build stuff because

00:03:23,430 --> 00:03:29,310
you really don't need to learn this the

00:03:27,720 --> 00:03:33,300
issue is that when you have to learn

00:03:29,310 --> 00:03:35,610
this it's on Friday night when

00:03:33,300 --> 00:03:38,220
production is down and someone is

00:03:35,610 --> 00:03:40,410
calling you hey why did the server is

00:03:38,220 --> 00:03:43,910
what application is not working why wait

00:03:40,410 --> 00:03:47,790
Sam or have you seen this application

00:03:43,910 --> 00:03:52,650
well why this server what this service

00:03:47,790 --> 00:03:55,550
is not running so it does it don't worry

00:03:52,650 --> 00:03:59,580
it happens in real life it happens in T

00:03:55,550 --> 00:04:01,670
it happens in all the companies do not

00:03:59,580 --> 00:04:05,040
worry you're not alone

00:04:01,670 --> 00:04:08,670
it happens to only including the best

00:04:05,040 --> 00:04:09,540
one and I can't make sure be sure that

00:04:08,670 --> 00:04:11,810
that's true

00:04:09,540 --> 00:04:14,459
we have my add node source we have been

00:04:11,810 --> 00:04:17,520
working with different companies some of

00:04:14,459 --> 00:04:21,810
them have products that you are using

00:04:17,520 --> 00:04:24,479
right now and with real critical process

00:04:21,810 --> 00:04:27,460
that they need to handle in node.js

00:04:24,479 --> 00:04:31,270
applications and they're really

00:04:27,460 --> 00:04:34,479
and complicated applications so don't

00:04:31,270 --> 00:04:37,569
know if it by feel bad it happens to

00:04:34,479 --> 00:04:41,680
engineers at big companies so why you

00:04:37,569 --> 00:04:44,849
cannot happen to you up so let's start

00:04:41,680 --> 00:04:46,900
with the most important part of

00:04:44,849 --> 00:04:49,210
detecting a memory leak or actually

00:04:46,900 --> 00:04:52,060
trying to fix it is one of the thing is

00:04:49,210 --> 00:04:55,870
and check the heap of a heap profiler

00:04:52,060 --> 00:04:57,849
and the timeline what the timeline is or

00:04:55,870 --> 00:05:00,880
what the hippo prefer we hit profiler is

00:04:57,849 --> 00:05:03,070
the timeline is just a tool that I think

00:05:00,880 --> 00:05:06,699
how many of you have used a chrome dev

00:05:03,070 --> 00:05:09,210
tools yeah okay you can see that the

00:05:06,699 --> 00:05:11,590
timeline determine is really not

00:05:09,210 --> 00:05:14,770
something that I'm just going to tell

00:05:11,590 --> 00:05:17,520
you exactly what the issue is that is

00:05:14,770 --> 00:05:20,740
pretty much for you to understand when

00:05:17,520 --> 00:05:24,009
or at what time it is started to slow

00:05:20,740 --> 00:05:26,650
down because one of the things with with

00:05:24,009 --> 00:05:30,009
node.js application is that you not only

00:05:26,650 --> 00:05:32,110
can do servers your press AP is or

00:05:30,009 --> 00:05:35,110
something like that so the memory can

00:05:32,110 --> 00:05:36,789
happen the memory leak can happen not

00:05:35,110 --> 00:05:39,039
only when you're receiving connection

00:05:36,789 --> 00:05:41,800
but the memory keep a more unique can't

00:05:39,039 --> 00:05:44,020
happen when you are doing some

00:05:41,800 --> 00:05:47,530
processing or something like that so it

00:05:44,020 --> 00:05:49,630
doesn't mean that that the leaks or

00:05:47,530 --> 00:05:53,159
memory issues only happen on

00:05:49,630 --> 00:05:54,460
applications that you get little or

00:05:53,159 --> 00:05:56,229
something like that

00:05:54,460 --> 00:05:57,669
or customers just joining the your

00:05:56,229 --> 00:06:00,340
application or something

00:05:57,669 --> 00:06:03,630
that's probably one of the biggest

00:06:00,340 --> 00:06:06,159
issues to to try to understand that

00:06:03,630 --> 00:06:09,159
because you know something and you know

00:06:06,159 --> 00:06:10,479
that this could probably be an issue it

00:06:09,159 --> 00:06:12,130
doesn't matter it doesn't mean that it's

00:06:10,479 --> 00:06:16,750
going to apply every sound so you have

00:06:12,130 --> 00:06:18,280
to be really sure that you know your

00:06:16,750 --> 00:06:19,930
application you know what are the

00:06:18,280 --> 00:06:23,650
bottlenecks and that's something we are

00:06:19,930 --> 00:06:26,199
going to discuss later so the timeline

00:06:23,650 --> 00:06:28,780
is just for you to understand at what

00:06:26,199 --> 00:06:32,440
time your application it started to not

00:06:28,780 --> 00:06:34,479
work as expected and the heap profiler

00:06:32,440 --> 00:06:37,900
is just get all the information in all

00:06:34,479 --> 00:06:40,770
the nodes and the roots inside your

00:06:37,900 --> 00:06:44,530
application at that time

00:06:40,770 --> 00:06:51,010
or at the time you took the the hip

00:06:44,530 --> 00:06:53,800
right hip the hip profile so you really

00:06:51,010 --> 00:06:56,140
are when you are trying to fix its car

00:06:53,800 --> 00:06:59,200
it is type of issues you'd really need

00:06:56,140 --> 00:07:02,320
to have a workflow how to detect or how

00:06:59,200 --> 00:07:05,230
to fix it and this one is it this one is

00:07:02,320 --> 00:07:09,730
actually it are really good one I call

00:07:05,230 --> 00:07:14,950
it TST that is the trivia snapshot

00:07:09,730 --> 00:07:16,330
technique but in the car I mean it

00:07:14,950 --> 00:07:20,560
depends off the case because sometimes

00:07:16,330 --> 00:07:26,380
it's worse so I change it for a t3 TTT

00:07:20,560 --> 00:07:29,590
that it means three no it's four so ft

00:07:26,380 --> 00:07:32,080
SS t is for it snapchatting need or five

00:07:29,590 --> 00:07:34,570
it's not yet again why because it really

00:07:32,080 --> 00:07:37,300
depends on the application but if you're

00:07:34,570 --> 00:07:39,310
just going to start digging and just

00:07:37,300 --> 00:07:41,770
start to understand what application is

00:07:39,310 --> 00:07:44,980
doing you really need to embrace that

00:07:41,770 --> 00:07:49,930
work that way to figure out things and I

00:07:44,980 --> 00:07:51,840
didn't invent this I you know what up it

00:07:49,930 --> 00:07:53,350
was not surely someone at the Gmail team

00:07:51,840 --> 00:07:56,620
it's cool

00:07:53,350 --> 00:07:58,530
Lauren alley so thanks for thanks to her

00:07:56,620 --> 00:08:02,650
for that

00:07:58,530 --> 00:08:04,960
what this means is that you take heat

00:08:02,650 --> 00:08:06,790
profile at the beginning of your

00:08:04,960 --> 00:08:11,410
application as a cold star

00:08:06,790 --> 00:08:13,810
why because you need to make sure how

00:08:11,410 --> 00:08:17,140
your application is in memory when it

00:08:13,810 --> 00:08:19,930
starts then you start to increase the

00:08:17,140 --> 00:08:23,980
load so you just start sending more and

00:08:19,930 --> 00:08:27,520
more requests or whatever your

00:08:23,980 --> 00:08:29,320
application does and after certain point

00:08:27,520 --> 00:08:32,620
could be one minute two minutes three

00:08:29,320 --> 00:08:36,400
minutes you take an order he was a he is

00:08:32,620 --> 00:08:38,680
an option and after more time it could

00:08:36,400 --> 00:08:41,919
be another two or three minutes you take

00:08:38,680 --> 00:08:45,910
a different one so why would you do that

00:08:41,919 --> 00:08:46,750
or what would you take three snaps just

00:08:45,910 --> 00:08:49,510
at different times

00:08:46,750 --> 00:08:52,270
well it's because you really want to

00:08:49,510 --> 00:08:53,140
make sure which objects are the ones

00:08:52,270 --> 00:08:56,110
that are in

00:08:53,140 --> 00:08:58,240
you know at the time and the only way to

00:08:56,110 --> 00:09:00,580
know that is knowing how your

00:08:58,240 --> 00:09:04,660
application started and after a period

00:09:00,580 --> 00:09:07,030
time which objects are newer or didn't

00:09:04,660 --> 00:09:09,270
disappear from the first snapshot

00:09:07,030 --> 00:09:13,060
compared with the second a snapshot and

00:09:09,270 --> 00:09:15,370
that if you want to make complete be

00:09:13,060 --> 00:09:17,530
completely sure you'd compare the second

00:09:15,370 --> 00:09:19,840
is option with the third a snapshot so

00:09:17,530 --> 00:09:24,430
you are making sure that you are going

00:09:19,840 --> 00:09:26,950
to look only for the objects in your hip

00:09:24,430 --> 00:09:30,010
as an option that are still alive that

00:09:26,950 --> 00:09:31,690
are not being garbage collected so

00:09:30,010 --> 00:09:37,060
that's a really good technique you

00:09:31,690 --> 00:09:40,960
should totally use it so there's

00:09:37,060 --> 00:09:44,170
something in the chrome dev tools and I

00:09:40,960 --> 00:09:48,010
think how many of you have take HIPAA

00:09:44,170 --> 00:09:51,640
snapshot before yeah and there's a bunch

00:09:48,010 --> 00:09:55,180
of columns that you see a percentage of

00:09:51,640 --> 00:10:00,970
for each column and usually you don't

00:09:55,180 --> 00:10:03,430
know what what any of them mean and is

00:10:00,970 --> 00:10:05,500
fine I mean it takes some time to

00:10:03,430 --> 00:10:10,180
understand all of that in what is

00:10:05,500 --> 00:10:14,920
important but was something I'd really

00:10:10,180 --> 00:10:17,170
highly recommend is to check our for the

00:10:14,920 --> 00:10:21,310
distance there's a column called

00:10:17,170 --> 00:10:23,590
distance in the in the chrome developer

00:10:21,310 --> 00:10:25,810
tool when you take a HIPAA snapshot and

00:10:23,590 --> 00:10:30,670
something I have seen for for it for a

00:10:25,810 --> 00:10:33,340
while is that the closest and the AR day

00:10:30,670 --> 00:10:35,890
the constructor that has the the closest

00:10:33,340 --> 00:10:39,490
or the minimum the closest it will be

00:10:35,890 --> 00:10:42,970
like two or three number in the distance

00:10:39,490 --> 00:10:45,400
column it's usually the one that is

00:10:42,970 --> 00:10:48,780
responsible for the memory leak so

00:10:45,400 --> 00:10:51,790
that's something it's not completely

00:10:48,780 --> 00:10:53,920
true for all the applications but I have

00:10:51,790 --> 00:10:59,380
seen many cases and that's what I can

00:10:53,920 --> 00:11:01,750
usually recommend if you see a big

00:10:59,380 --> 00:11:04,630
constructor and that constructor is

00:11:01,750 --> 00:11:06,579
really close to that root that means

00:11:04,630 --> 00:11:09,579
that the usual

00:11:06,579 --> 00:11:11,139
actually go for that and start to look

00:11:09,579 --> 00:11:13,449
on that direction because he's pretty

00:11:11,139 --> 00:11:22,269
sure that that constructor is going to

00:11:13,449 --> 00:11:22,899
have the memory leak yeah so check for

00:11:22,269 --> 00:11:27,129
contrast

00:11:22,899 --> 00:11:29,980
constructors are usually check some of

00:11:27,129 --> 00:11:32,379
the cold stock that's something I'm

00:11:29,980 --> 00:11:34,689
going to recommend at the end that how

00:11:32,379 --> 00:11:39,100
many of them how many of you name your

00:11:34,689 --> 00:11:41,319
functions or you just make function the

00:11:39,100 --> 00:11:42,970
arguments and all the stuff well when

00:11:41,319 --> 00:11:45,790
you don't name your fractures and I

00:11:42,970 --> 00:11:48,309
think there was kind of fix by the time

00:11:45,790 --> 00:11:50,850
and and I think in Note 8

00:11:48,309 --> 00:11:54,699
something was implemented on VA that it

00:11:50,850 --> 00:11:56,829
didn't matter that you did you didn't

00:11:54,699 --> 00:12:00,249
name your applications because something

00:11:56,829 --> 00:12:04,319
in b8 was more intelligent than us so it

00:12:00,249 --> 00:12:08,199
was kind of generally names for unnamed

00:12:04,319 --> 00:12:10,869
functions however when you start to look

00:12:08,199 --> 00:12:13,600
at the HIPAA snapshot you start to see

00:12:10,869 --> 00:12:15,369
in the call stack that there's a lot of

00:12:13,600 --> 00:12:17,529
functions and they don't have name so

00:12:15,369 --> 00:12:21,309
there's actually no way for you to track

00:12:17,529 --> 00:12:23,319
where this call is being done or or how

00:12:21,309 --> 00:12:27,089
you can actually fit they fix the issue

00:12:23,319 --> 00:12:30,579
so highly recommend just put a name

00:12:27,089 --> 00:12:32,319
don't put an X or like Y or something

00:12:30,579 --> 00:12:34,899
like that on your functions it's not

00:12:32,319 --> 00:12:37,929
really helpful seriously when you are

00:12:34,899 --> 00:12:40,899
trying to debug stuff in especially for

00:12:37,929 --> 00:12:42,639
HIPAA sorry in memory you really want to

00:12:40,899 --> 00:12:46,299
make sure that you have all the compute

00:12:42,639 --> 00:12:48,939
information and this is only talking if

00:12:46,299 --> 00:12:52,179
your application is not unified or

00:12:48,939 --> 00:12:54,160
transpile if you application is minified

00:12:52,179 --> 00:12:56,529
on transpire and you don't have source

00:12:54,160 --> 00:12:58,600
maps then you're going to have a really

00:12:56,529 --> 00:13:02,110
good time trying to figure out what this

00:12:58,600 --> 00:13:10,059
strange seam will transpire to my code

00:13:02,110 --> 00:13:12,220
so have fun with that on Friday this is

00:13:10,059 --> 00:13:14,379
something I this is something that

00:13:12,220 --> 00:13:17,649
people actually don't know is that you

00:13:14,379 --> 00:13:18,129
can generate Riddick redic it's not

00:13:17,649 --> 00:13:19,970
shirts

00:13:18,129 --> 00:13:22,359
what this means is

00:13:19,970 --> 00:13:25,959
when you take a HIPAA snapshot it takes

00:13:22,359 --> 00:13:28,369
you are going to see all the strings uh

00:13:25,959 --> 00:13:31,669
most of those strings have sensitive

00:13:28,369 --> 00:13:34,220
data so if you are going to send these

00:13:31,669 --> 00:13:38,119
HIPAA snapshot to someone just please

00:13:34,220 --> 00:13:39,739
make it protected so any of the strings

00:13:38,119 --> 00:13:41,179
I mean strings are at the content of

00:13:39,739 --> 00:13:43,699
this race that's not important for the

00:13:41,179 --> 00:13:45,559
person or the company or whatever or the

00:13:43,699 --> 00:13:47,329
service that is going to face they they

00:13:45,559 --> 00:13:49,849
issue or actually do consulting for you

00:13:47,329 --> 00:13:52,669
but do it because it's probably going to

00:13:49,849 --> 00:13:54,619
have all your secrets of your

00:13:52,669 --> 00:13:58,159
application including credit cards

00:13:54,619 --> 00:14:02,809
information and all that stuff so really

00:13:58,159 --> 00:14:04,429
take care of that if you don't strip the

00:14:02,809 --> 00:14:06,979
strings in your hip as an option you are

00:14:04,429 --> 00:14:09,439
giving someone else information about

00:14:06,979 --> 00:14:14,419
your application and probably you users

00:14:09,439 --> 00:14:16,759
so so just be careful because you are

00:14:14,419 --> 00:14:21,889
sending information to someone else that

00:14:16,759 --> 00:14:24,379
it's really highly relevant and there's

00:14:21,889 --> 00:14:27,499
this one core dumps and this one are

00:14:24,379 --> 00:14:30,769
really interesting because it's it's

00:14:27,499 --> 00:14:33,759
probably less use and usually when you

00:14:30,769 --> 00:14:37,699
use the people who use Khartoum's

00:14:33,759 --> 00:14:40,189
they usually are familiar with suppose

00:14:37,699 --> 00:14:41,899
files in all the debugger tooling that

00:14:40,189 --> 00:14:45,979
there's out there for suppose path or

00:14:41,899 --> 00:14:50,029
COC but but you can naturally do core

00:14:45,979 --> 00:14:51,739
dumps on note' and and in this way

00:14:50,029 --> 00:14:54,319
because when they talk about this people

00:14:51,739 --> 00:14:57,709
do not do not know that you can actually

00:14:54,319 --> 00:15:00,139
do that and actually have more interest

00:14:57,709 --> 00:15:02,959
in information because we card them we

00:15:00,139 --> 00:15:07,129
can in real time

00:15:02,959 --> 00:15:09,889
actually it's like a travel time when

00:15:07,129 --> 00:15:11,989
you can actually know the state or an

00:15:09,889 --> 00:15:14,859
application or something at certain

00:15:11,989 --> 00:15:16,970
point or a certain period of time and

00:15:14,859 --> 00:15:19,699
that doesn't happen with the HIPAA

00:15:16,970 --> 00:15:22,579
snapshot you are the one that is trying

00:15:19,699 --> 00:15:26,419
to collect all the information in the

00:15:22,579 --> 00:15:29,839
memory at certain time so curtains are

00:15:26,419 --> 00:15:32,209
really interesting they take a while to

00:15:29,839 --> 00:15:33,500
understand especially if you are not

00:15:32,209 --> 00:15:38,570
familiar with

00:15:33,500 --> 00:15:41,180
any longer on suppose plus a or C to

00:15:38,570 --> 00:15:44,600
create a card occurred on usually what

00:15:41,180 --> 00:15:47,870
you have to do is most of the time just

00:15:44,600 --> 00:15:50,830
send us a sign now to award or you can

00:15:47,870 --> 00:15:53,480
put on your card the process that award

00:15:50,830 --> 00:15:58,370
but what that means is that you have to

00:15:53,480 --> 00:16:01,520
modify your code to actually trigger the

00:15:58,370 --> 00:16:04,400
cardem and the curtain in the court

00:16:01,520 --> 00:16:06,470
don't is actually is expected to be

00:16:04,400 --> 00:16:10,490
triggered when there's a new handle as

00:16:06,470 --> 00:16:13,070
as exception however you can I mean you

00:16:10,490 --> 00:16:16,580
can do that or you can just use this

00:16:13,070 --> 00:16:18,110
option when you run your application so

00:16:16,580 --> 00:16:21,620
you don't have to modify anything and

00:16:18,110 --> 00:16:25,880
it's going to avoid every time you have

00:16:21,620 --> 00:16:28,340
a new handle exception it's just way

00:16:25,880 --> 00:16:30,200
better do not modify your code and

00:16:28,340 --> 00:16:35,570
especially if you're on production you

00:16:30,200 --> 00:16:37,700
cannot modify your code to actually get

00:16:35,570 --> 00:16:41,210
all the in handle expressions or every

00:16:37,700 --> 00:16:43,460
time you throw something to do something

00:16:41,210 --> 00:16:46,280
weird and and something is when you get

00:16:43,460 --> 00:16:50,120
the core file with the previous one

00:16:46,280 --> 00:16:52,220
with the process that award you can you

00:16:50,120 --> 00:16:55,430
get more stack traces that are not

00:16:52,220 --> 00:16:57,290
really relevant today to the to the

00:16:55,430 --> 00:17:00,020
problem why because you are modifying

00:16:57,290 --> 00:17:03,890
the code to actually make it break at

00:17:00,020 --> 00:17:06,860
some point to actually abort so don't

00:17:03,890 --> 00:17:09,230
actually do it if you really have to

00:17:06,860 --> 00:17:12,500
make sure that you are awarding others

00:17:09,230 --> 00:17:16,100
at some point and you are not able to

00:17:12,500 --> 00:17:17,780
trigger I mean because it's really it's

00:17:16,100 --> 00:17:19,850
pretty normal I mean how many of you

00:17:17,780 --> 00:17:22,400
have had an issue that is on production

00:17:19,850 --> 00:17:26,270
but it never happens it never happens on

00:17:22,400 --> 00:17:28,850
development yeah it's like everyday

00:17:26,270 --> 00:17:31,610
right it's it that happens all the time

00:17:28,850 --> 00:17:34,550
and usually there's a few things that

00:17:31,610 --> 00:17:37,310
you can do for that especially with the

00:17:34,550 --> 00:17:39,830
stress testing you can actually prevent

00:17:37,310 --> 00:17:42,220
my some of those cases but there's some

00:17:39,830 --> 00:17:42,220
hard talk

00:17:43,400 --> 00:17:48,590
so yeah you can use that is better you

00:17:45,650 --> 00:17:51,260
don't get too much things on your core

00:17:48,590 --> 00:17:55,520
file you get only everything that you

00:17:51,260 --> 00:18:00,080
actually need then you can use a lot dB

00:17:55,520 --> 00:18:04,850
it's the booger it's not database if

00:18:00,080 --> 00:18:09,130
that happens a lot that confusion you

00:18:04,850 --> 00:18:11,690
can use that to actually inspect and get

00:18:09,130 --> 00:18:14,420
all the information that I'd like you

00:18:11,690 --> 00:18:16,850
actually need from the core file there

00:18:14,420 --> 00:18:20,210
this week we can go more in deep and

00:18:16,850 --> 00:18:24,170
that but that's that's trying to explain

00:18:20,210 --> 00:18:27,470
how a debugger works for C++ and I think

00:18:24,170 --> 00:18:30,080
that's just too much there's something

00:18:27,470 --> 00:18:33,860
called L know that it's kind of plug-in

00:18:30,080 --> 00:18:35,750
for adult Eevee yeah a little to be what

00:18:33,860 --> 00:18:37,809
was was the thing with this is that you

00:18:35,750 --> 00:18:40,730
can actually get a stack trace

00:18:37,809 --> 00:18:43,490
JavaScript s actress so it's really

00:18:40,730 --> 00:18:48,340
useful but I think is I'm not sure if

00:18:43,490 --> 00:18:53,200
it's highly level at this moment

00:18:48,340 --> 00:18:56,750
something it's something that is not

00:18:53,200 --> 00:18:59,090
good about core part is that you have to

00:18:56,750 --> 00:19:01,970
make sure that the debugger that you are

00:18:59,090 --> 00:19:05,290
using and the core file are on seeing

00:19:01,970 --> 00:19:08,720
conversions why because if you are using

00:19:05,290 --> 00:19:11,630
at the work or part that has for example

00:19:08,720 --> 00:19:13,450
at something in v8 or a different

00:19:11,630 --> 00:19:15,920
version of you than you the worker has

00:19:13,450 --> 00:19:17,990
then you're going to have a problem

00:19:15,920 --> 00:19:19,670
because if that change if there's

00:19:17,990 --> 00:19:21,830
something that changed between versions

00:19:19,670 --> 00:19:24,110
then the de Vitoria is not going to be

00:19:21,830 --> 00:19:27,429
able to catch that so you are missing

00:19:24,110 --> 00:19:31,520
information you are making core files

00:19:27,429 --> 00:19:33,140
out of nothing and and it's not not not

00:19:31,520 --> 00:19:35,120
going to be worth it because you're not

00:19:33,140 --> 00:19:38,809
getting the whole story or the whole

00:19:35,120 --> 00:19:41,420
picture for the application and that's

00:19:38,809 --> 00:19:43,910
one of the things I would say just make

00:19:41,420 --> 00:19:46,220
sure that you are running at the same

00:19:43,910 --> 00:19:48,890
variance between to the blogger and the

00:19:46,220 --> 00:19:50,990
moment you're building the core file if

00:19:48,890 --> 00:19:54,440
not then you are going to have a hard

00:19:50,990 --> 00:19:57,110
time trying to figure out why your core

00:19:54,440 --> 00:19:59,900
file doesn't have certain things because

00:19:57,110 --> 00:20:03,080
is probably named different in some

00:19:59,900 --> 00:20:05,000
times he ate something in the structure

00:20:03,080 --> 00:20:07,400
just changed the name and because of

00:20:05,000 --> 00:20:09,020
that there's no way to know that there's

00:20:07,400 --> 00:20:10,429
no way that the debugger and the core

00:20:09,020 --> 00:20:14,500
files are going to link that because

00:20:10,429 --> 00:20:18,350
they don't know what happened from Isis

00:20:14,500 --> 00:20:24,620
so something interesting with promises

00:20:18,350 --> 00:20:28,010
is from Isis are really hard to handle

00:20:24,620 --> 00:20:31,790
and something with memory is that when

00:20:28,010 --> 00:20:33,500
you when they when the promisor

00:20:31,790 --> 00:20:38,030
is not the same when they promise'

00:20:33,500 --> 00:20:40,370
finish to wendy from my support so when

00:20:38,030 --> 00:20:42,260
you take a for example a hip is not sure

00:20:40,370 --> 00:20:45,290
or something or a cordon

00:20:42,260 --> 00:20:48,500
you can accent as you get the from ice

00:20:45,290 --> 00:20:51,559
finish but it doesn't mean at the state

00:20:48,500 --> 00:20:55,700
of the promise can change during that

00:20:51,559 --> 00:20:59,360
time until it awards so that's one of

00:20:55,700 --> 00:21:01,640
the unknown things about promises that

00:20:59,360 --> 00:21:05,380
means this is one of many and i think

00:21:01,640 --> 00:21:08,419
you on the previous talk just so that so

00:21:05,380 --> 00:21:10,190
make sure that you understand from isis

00:21:08,419 --> 00:21:13,040
really well if not you're going to have

00:21:10,190 --> 00:21:17,299
a really hard time i think we all have

00:21:13,040 --> 00:21:19,940
we promises already a hard time but I

00:21:17,299 --> 00:21:23,990
actually recommend I think away so

00:21:19,940 --> 00:21:26,360
please if you still not using a secure

00:21:23,990 --> 00:21:30,440
way just do it it's really important

00:21:26,360 --> 00:21:32,990
that you try to embrace this is why

00:21:30,440 --> 00:21:35,630
cleaner is much easier to the block and

00:21:32,990 --> 00:21:38,750
it's going to be less painful ah I

00:21:35,630 --> 00:21:41,390
actually it really highly recommended so

00:21:38,750 --> 00:21:43,400
I have some tips for different

00:21:41,390 --> 00:21:48,140
situations I know that people usually

00:21:43,400 --> 00:21:51,620
look for something to not do so they can

00:21:48,140 --> 00:21:53,450
avoid the sort of things one of this is

00:21:51,620 --> 00:21:56,090
on server-side rendering I'm not saying

00:21:53,450 --> 00:21:59,330
you should not do server-side rendering

00:21:56,090 --> 00:22:02,120
is that you should do it properly why

00:21:59,330 --> 00:22:04,490
I'm saying this because we have seen

00:22:02,120 --> 00:22:07,809
companies the doing server-side

00:22:04,490 --> 00:22:10,640
rendering that they have are really big

00:22:07,809 --> 00:22:13,820
our views on how the

00:22:10,640 --> 00:22:15,530
I do the transportation or the tour or

00:22:13,820 --> 00:22:19,580
all the process of the service are

00:22:15,530 --> 00:22:22,520
rendering and what when you do that you

00:22:19,580 --> 00:22:24,890
have to you have to know that there's a

00:22:22,520 --> 00:22:29,180
cost there's a trade-off and what that

00:22:24,890 --> 00:22:31,790
means is they are simple and no jeaious

00:22:29,180 --> 00:22:34,310
application can start on 20 megabytes or

00:22:31,790 --> 00:22:37,760
30 megabytes if it's too complex of a

00:22:34,310 --> 00:22:41,330
memory on a cold star however for a

00:22:37,760 --> 00:22:43,940
service on Ranieri it can start on 200

00:22:41,330 --> 00:22:46,670
megabytes of memory 300 megawatts hot

00:22:43,940 --> 00:22:49,640
memory and that's just starting it's

00:22:46,670 --> 00:22:51,830
doing nothing why because most of the

00:22:49,640 --> 00:22:53,540
server-side rendering all the components

00:22:51,830 --> 00:22:54,950
or everything that is being processed

00:22:53,540 --> 00:22:58,250
it's a storage memory

00:22:54,950 --> 00:22:59,780
so when you to keep a snapshot of

00:22:58,250 --> 00:23:02,300
services rendered applications you are

00:22:59,780 --> 00:23:04,100
going to see many strings or many

00:23:02,300 --> 00:23:07,610
template in the strings on your memory

00:23:04,100 --> 00:23:09,920
and that's how pretty much a server-side

00:23:07,610 --> 00:23:14,230
rendering works so it's going to be

00:23:09,920 --> 00:23:17,630
white harder to actually strip all those

00:23:14,230 --> 00:23:21,500
objects or strings or whatever service

00:23:17,630 --> 00:23:23,540
our engine is created so if you're using

00:23:21,500 --> 00:23:25,430
server-side rendering make sure that you

00:23:23,540 --> 00:23:28,340
know what is the trailer trade-off and

00:23:25,430 --> 00:23:31,460
you know the cost and that's something

00:23:28,340 --> 00:23:33,980
people do not know the same they usually

00:23:31,460 --> 00:23:36,500
and I understand that there's reasons

00:23:33,980 --> 00:23:40,550
for some architects to use something

00:23:36,500 --> 00:23:43,310
but usually memory is not that because

00:23:40,550 --> 00:23:46,130
we are so used to when something doesn't

00:23:43,310 --> 00:23:50,240
work it just just put more more memory

00:23:46,130 --> 00:23:53,650
more cores and let's make because it's

00:23:50,240 --> 00:23:56,030
pretty easy in AWS just to increase the

00:23:53,650 --> 00:23:57,950
it doesn't matter if he if he's not

00:23:56,030 --> 00:24:02,540
working just put more memory and more

00:23:57,950 --> 00:24:05,600
cores and we were fine ok still it's

00:24:02,540 --> 00:24:08,150
monitoring tools make sure that you are

00:24:05,600 --> 00:24:11,720
choosing the right monitoring tools

00:24:08,150 --> 00:24:16,100
why how many of you have been using

00:24:11,720 --> 00:24:18,920
dynaTrace at some point probably of you

00:24:16,100 --> 00:24:21,230
well if you do see paper fire or the

00:24:18,920 --> 00:24:24,320
HIPAA snapshot you are going to or if

00:24:21,230 --> 00:24:25,610
you see the stock a the coal stock

00:24:24,320 --> 00:24:28,309
what you're going to see is that

00:24:25,610 --> 00:24:31,419
dynaTrace is crapping almost every

00:24:28,309 --> 00:24:33,500
function every call why because is

00:24:31,419 --> 00:24:34,850
dynaTrace needs to know what is

00:24:33,500 --> 00:24:37,450
happening with your application but the

00:24:34,850 --> 00:24:41,990
way they do it they grab all of that

00:24:37,450 --> 00:24:45,909
every call so you just make sure that I

00:24:41,990 --> 00:24:51,110
have seen people just blaming dynaTrace

00:24:45,909 --> 00:24:51,649
because because this function is taking

00:24:51,110 --> 00:24:54,769
too much time

00:24:51,649 --> 00:24:57,769
oh it's way too common in the hip is not

00:24:54,769 --> 00:25:00,200
sure but it doesn't mean a it's most of

00:24:57,769 --> 00:25:01,879
the time that's agents or monitoring

00:25:00,200 --> 00:25:03,710
tools that they just grab the clothes

00:25:01,879 --> 00:25:05,090
because they need to get information but

00:25:03,710 --> 00:25:06,740
it doesn't mean that they are very

00:25:05,090 --> 00:25:09,610
responsible and that's something that

00:25:06,740 --> 00:25:13,909
you were with CPU profiles in keep CPU

00:25:09,610 --> 00:25:16,340
snapshots so just make sure a deltas a

00:25:13,909 --> 00:25:19,159
few tools that cause an overhead on

00:25:16,340 --> 00:25:20,779
memory but you really have to understand

00:25:19,159 --> 00:25:23,269
how the monitoring tool that you are

00:25:20,779 --> 00:25:24,769
implementing actually works if not then

00:25:23,269 --> 00:25:28,100
you're going to have a hard time and

00:25:24,769 --> 00:25:29,899
your start calling dynaTrace hey hey you

00:25:28,100 --> 00:25:34,220
just brought my application and that's

00:25:29,899 --> 00:25:38,779
that's not good cause your connections

00:25:34,220 --> 00:25:50,690
and I think I have a really interesting

00:25:38,779 --> 00:25:57,279
case here if you can see why is this let

00:25:50,690 --> 00:25:57,279
me close that okay I tried to create

00:26:05,169 --> 00:26:23,179
what I'm doing yes okay oh I'm not sure

00:26:19,179 --> 00:26:25,490
yeah if you can see it well this is just

00:26:23,179 --> 00:26:29,630
how a application you saw press

00:26:25,490 --> 00:26:33,190
API it's just pretty simple

00:26:29,630 --> 00:26:35,240
nothing special is it has it has a

00:26:33,190 --> 00:26:39,230
database that has been loaded with

00:26:35,240 --> 00:26:41,840
random data and this is it probably the

00:26:39,230 --> 00:26:43,940
closest exercise that I can find to

00:26:41,840 --> 00:26:53,710
explain people why you should close your

00:26:43,940 --> 00:26:53,710
connections because if we this Way's

00:26:58,040 --> 00:27:14,750
I'm going to mirror so I can if you see

00:27:09,100 --> 00:27:22,160
here I'm just going to start then I'll

00:27:14,750 --> 00:27:24,380
start there on go and yeah just ignore

00:27:22,160 --> 00:27:32,660
the fact of the car that just appeared

00:27:24,380 --> 00:27:35,710
on my screen and 8,000 tabs on my okay

00:27:32,660 --> 00:27:39,260
this is this is sin solid if you never

00:27:35,710 --> 00:27:41,840
have used that or seeing that it's

00:27:39,260 --> 00:27:45,980
monitoring tool you can do other stuff

00:27:41,840 --> 00:27:47,450
one of this this one has something

00:27:45,980 --> 00:27:51,970
interesting is that you can see this

00:27:47,450 --> 00:27:57,650
graph is CPU and for the x-axis and

00:27:51,970 --> 00:28:01,880
memory on the y-axis so what our

00:27:57,650 --> 00:28:05,840
application is here in twelve megabytes

00:28:01,880 --> 00:28:12,800
between 12 and 14 megabytes so I'm going

00:28:05,840 --> 00:28:17,080
to just add a bit more of some load you

00:28:12,800 --> 00:28:23,330
see how Mongolia starts to get crazy

00:28:17,080 --> 00:28:25,430
you see that's and it just got increase

00:28:23,330 --> 00:28:29,890
in memory and that's fine I mean that's

00:28:25,430 --> 00:28:34,940
how it's supposed to work if it recovers

00:28:29,890 --> 00:28:36,370
that will be the natural way but it

00:28:34,940 --> 00:28:41,090
doesn't recover

00:28:36,370 --> 00:28:43,700
he never garbage collect the rest of the

00:28:41,090 --> 00:28:46,760
objects that he just created and doesn't

00:28:43,700 --> 00:28:50,020
need anymore so if you see any if I keep

00:28:46,760 --> 00:28:57,400
increasing the load I mean another 100

00:28:50,020 --> 00:28:57,400
users where's

00:28:57,710 --> 00:29:02,730
you see it's going to increase increase

00:29:01,080 --> 00:29:05,370
increase increase in memory that is

00:29:02,730 --> 00:29:08,760
never going to recover and this is a

00:29:05,370 --> 00:29:10,620
memory leak this is actually memory leak

00:29:08,760 --> 00:29:13,350
why because the application is not

00:29:10,620 --> 00:29:15,720
recovering that's that's how you

00:29:13,350 --> 00:29:20,910
identify that you are having memory

00:29:15,720 --> 00:29:25,410
issues so how do we fix this it's

00:29:20,910 --> 00:29:31,470
actually pretty simple you just do kind

00:29:25,410 --> 00:29:34,020
close after you said send answer and you

00:29:31,470 --> 00:29:38,490
the issue was that you not closing the

00:29:34,020 --> 00:29:42,630
connection after you answer now you fix

00:29:38,490 --> 00:29:46,500
it the memory leak so this is one of the

00:29:42,630 --> 00:29:50,010
things that I really make people

00:29:46,500 --> 00:29:52,200
understand is that it's just follow back

00:29:50,010 --> 00:29:54,510
best practices don't think that if

00:29:52,200 --> 00:29:57,420
you're doing something missing something

00:29:54,510 --> 00:29:59,280
and that's the application it doesn't

00:29:57,420 --> 00:30:01,350
break it doesn't mean that it's not

00:29:59,280 --> 00:30:03,810
doing we run things on the inside

00:30:01,350 --> 00:30:06,300
because he it actually is and he's going

00:30:03,810 --> 00:30:11,460
to break later and really hard and it's

00:30:06,300 --> 00:30:13,770
going to be way harder to to recover and

00:30:11,460 --> 00:30:15,900
try to debug and understand what the

00:30:13,770 --> 00:30:21,780
application is doing so the only issue

00:30:15,900 --> 00:30:23,370
here was it wasn't even but some

00:30:21,780 --> 00:30:27,930
people blame for everything I mean

00:30:23,370 --> 00:30:30,750
I blame Bongo for many things but this

00:30:27,930 --> 00:30:33,330
at this time it wasn't even

00:30:30,750 --> 00:30:35,310
was fine we are doing everything fine

00:30:33,330 --> 00:30:37,790
except that we don't cause connection

00:30:35,310 --> 00:30:43,220
because we think this is fine to have

00:30:37,790 --> 00:30:43,220
connections open so

00:30:59,019 --> 00:31:06,350
yeah so close your connections please do

00:31:01,639 --> 00:31:09,679
it you don't want a lot of things being

00:31:06,350 --> 00:31:11,870
kept especially if you use a poll how

00:31:09,679 --> 00:31:13,970
many of you suppose well you probably

00:31:11,870 --> 00:31:16,549
use it or grab fuel when you keep your

00:31:13,970 --> 00:31:18,679
connections open the object created for

00:31:16,549 --> 00:31:21,019
a polar or graph field they are a store

00:31:18,679 --> 00:31:24,860
in memory so you are keeping all of that

00:31:21,019 --> 00:31:27,610
and not getting garbage collected look

00:31:24,860 --> 00:31:32,509
for an EOC service to page to serve

00:31:27,610 --> 00:31:37,249
pages what this means is you actually

00:31:32,509 --> 00:31:40,100
the way you serve stuff actually matters

00:31:37,249 --> 00:31:43,279
for your application - so make sure that

00:31:40,100 --> 00:31:46,940
you have a way not you implement a way

00:31:43,279 --> 00:31:48,889
to be not attached to a certain platform

00:31:46,940 --> 00:31:51,200
that you can actually try on different

00:31:48,889 --> 00:31:54,889
ones why because some of its own a few

00:31:51,200 --> 00:31:57,980
times is that what you serve things and

00:31:54,889 --> 00:32:00,320
you can if you can actually try

00:31:57,980 --> 00:32:02,990
different ways it's really helpful for

00:32:00,320 --> 00:32:06,080
you to lease this car than what you are

00:32:02,990 --> 00:32:08,779
serving things and something interesting

00:32:06,080 --> 00:32:14,480
and we have seen a lot is review your

00:32:08,779 --> 00:32:16,789
package darf that our CS CSS - or in

00:32:14,480 --> 00:32:19,850
JavaScript or - JavaScript or something

00:32:16,789 --> 00:32:22,340
like that just please review that make

00:32:19,850 --> 00:32:23,029
sure that you know what their package is

00:32:22,340 --> 00:32:25,100
how are you doing

00:32:23,029 --> 00:32:28,100
that's a lot of translation that's a lot

00:32:25,100 --> 00:32:31,220
of compilation that's a lot of things

00:32:28,100 --> 00:32:33,619
are happening there in those package if

00:32:31,220 --> 00:32:35,570
you are really not sure or if you think

00:32:33,619 --> 00:32:37,759
that's a cool package just make sure

00:32:35,570 --> 00:32:41,029
that it doesn't impact you for your

00:32:37,759 --> 00:32:45,440
memory and a special performance a lot

00:32:41,029 --> 00:32:47,419
of these package store many things on

00:32:45,440 --> 00:32:50,179
memory because they have to do

00:32:47,419 --> 00:32:52,909
templating of the things that you do and

00:32:50,179 --> 00:32:56,210
what that translates to for example

00:32:52,909 --> 00:32:59,659
JavaScript so please check that if you

00:32:56,210 --> 00:33:01,940
have a dependency just check it and

00:32:59,659 --> 00:33:04,380
keeping them in naming your functions

00:33:01,940 --> 00:33:08,700
that's something nice point before

00:33:04,380 --> 00:33:11,940
please do it it's really helpful I'm

00:33:08,700 --> 00:33:14,400
telling you you are going to be really

00:33:11,940 --> 00:33:18,690
happy to know that you know the specific

00:33:14,400 --> 00:33:22,230
function where the issue is and again if

00:33:18,690 --> 00:33:24,240
you're doing a lot of minified code or

00:33:22,230 --> 00:33:27,030
if you're working with typescript you

00:33:24,240 --> 00:33:33,120
really want to start using source Maps

00:33:27,030 --> 00:33:35,700
so you don't get unforgettable cold here

00:33:33,120 --> 00:33:39,960
in snapshots that you cannot understand

00:33:35,700 --> 00:33:41,820
or fix yeah and this one is the most

00:33:39,960 --> 00:33:46,800
interesting one because I have seen

00:33:41,820 --> 00:33:49,830
combinations of nodejs and Java back-end

00:33:46,800 --> 00:33:53,420
servers in many other combinations and

00:33:49,830 --> 00:33:56,100
one of the thing is I have seen Java

00:33:53,420 --> 00:33:58,320
servers or database or other service

00:33:56,100 --> 00:34:02,370
that same information to know GS servers

00:33:58,320 --> 00:34:04,650
it services when one of the thing is we

00:34:02,370 --> 00:34:06,690
had a team that was playing me didn't

00:34:04,650 --> 00:34:09,330
know that the Java team was blaming the

00:34:06,690 --> 00:34:12,000
noisiest team because he was taking too

00:34:09,330 --> 00:34:16,740
much time it was taking four seconds to

00:34:12,000 --> 00:34:19,590
process many things but we just jump a

00:34:16,740 --> 00:34:22,919
notice to the call and we figure out

00:34:19,590 --> 00:34:25,649
that the Java service was actually

00:34:22,919 --> 00:34:28,590
taking the four seconds to process and

00:34:25,649 --> 00:34:31,500
get back to the service so make sure

00:34:28,590 --> 00:34:33,780
that you actually understand where the

00:34:31,500 --> 00:34:35,510
bottlenecks and sometimes is a network

00:34:33,780 --> 00:34:37,740
bottleneck is not your application

00:34:35,510 --> 00:34:42,139
bottlenecks or you can just blame the

00:34:37,740 --> 00:34:42,139
Java team that actually works sometimes

00:34:42,619 --> 00:34:48,330
okay crazy right I mean and I and I

00:34:45,570 --> 00:34:51,859
could just keep going keep going and

00:34:48,330 --> 00:34:54,869
keep going on all the reasons and

00:34:51,859 --> 00:34:58,260
possibilities that you can have actually

00:34:54,869 --> 00:35:02,160
an issue with memory but this is pretty

00:34:58,260 --> 00:35:04,950
much like a hobby or a general view how

00:35:02,160 --> 00:35:08,880
do you look for and what probably you

00:35:04,950 --> 00:35:10,859
can you don't want to do or at least try

00:35:08,880 --> 00:35:12,859
to avoid as much as you can and try to

00:35:10,859 --> 00:35:15,660
fix it later

00:35:12,859 --> 00:35:21,550
that's it thank you very much

00:35:15,660 --> 00:35:21,550

YouTube URL: https://www.youtube.com/watch?v=Xv_m5yF1Cyw


