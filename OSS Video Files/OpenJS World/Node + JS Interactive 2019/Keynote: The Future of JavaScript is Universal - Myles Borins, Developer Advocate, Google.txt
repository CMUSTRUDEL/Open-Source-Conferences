Title: Keynote: The Future of JavaScript is Universal - Myles Borins, Developer Advocate, Google
Publication date: 2020-05-11
Playlist: Node + JS Interactive 2019
Description: 
	Keynote: The Future of JavaScript is Universal - Myles Borins, Developer Advocate, Google
Speakers: Myles Borins
Captions: 
	00:00:00,359 --> 00:00:04,799
I'm beyond excited that we have Robin

00:00:03,060 --> 00:00:09,179
joining us at the foundation as our

00:00:04,799 --> 00:00:10,559
executive director yeah I'll gush to all

00:00:09,179 --> 00:00:12,780
of you about it separately I won't use

00:00:10,559 --> 00:00:14,460
my stage time too much on it but one

00:00:12,780 --> 00:00:15,929
more quick round of applause in the back

00:00:14,460 --> 00:00:18,390
of the room you can see a bunch of

00:00:15,929 --> 00:00:19,680
people who are you know heads down on

00:00:18,390 --> 00:00:21,810
computers and there's a whole bunch of

00:00:19,680 --> 00:00:22,949
people back there you also can't see but

00:00:21,810 --> 00:00:25,199
just a quick round applause for all the

00:00:22,949 --> 00:00:34,500
people making this happen who you don't

00:00:25,199 --> 00:00:36,329
actually get to see so we're going to

00:00:34,500 --> 00:00:40,920
talk today about universal JavaScript

00:00:36,329 --> 00:00:43,489
and a vision I personally have and we'll

00:00:40,920 --> 00:00:47,460
just start with saying hello Bonjour oh

00:00:43,489 --> 00:00:49,610
this is a cat I really like this that's

00:00:47,460 --> 00:00:49,610
all

00:00:50,280 --> 00:00:54,750
my name is Myles and I'm a developer

00:00:52,739 --> 00:00:56,730
advocate at Google focused on the

00:00:54,750 --> 00:01:00,059
node.js ecosystem and Google cloud

00:00:56,730 --> 00:01:02,280
platform you know I always put this at

00:01:00,059 --> 00:01:06,180
the bottom of this slide just saying hey

00:01:02,280 --> 00:01:07,890
this is my own opinions so you know it

00:01:06,180 --> 00:01:10,049
take it or leave it but I'll take it a

00:01:07,890 --> 00:01:12,180
step further this time and say you know

00:01:10,049 --> 00:01:14,939
the opinions expressed in this talk may

00:01:12,180 --> 00:01:16,710
even be wrong I don't know but what I

00:01:14,939 --> 00:01:19,020
can promise you is the opinions in this

00:01:16,710 --> 00:01:20,159
talk are definitely opinions and that

00:01:19,020 --> 00:01:24,659
and that's about the level of commitment

00:01:20,159 --> 00:01:26,880
I'm willing to make on them but so you

00:01:24,659 --> 00:01:29,939
may be asking the question of like what

00:01:26,880 --> 00:01:34,350
even is universal JavaScript it's a

00:01:29,939 --> 00:01:36,960
pretty broad term and so I cheated and I

00:01:34,350 --> 00:01:40,560
wrote a tweet and asked other people to

00:01:36,960 --> 00:01:44,340
answer it for me and we got a wide

00:01:40,560 --> 00:01:45,930
variety of responses this was what many

00:01:44,340 --> 00:01:47,159
of you may be thinking right now cuz

00:01:45,930 --> 00:01:49,140
without any context

00:01:47,159 --> 00:01:51,390
I'd say it's meaningless Universal means

00:01:49,140 --> 00:01:53,070
different things to different people you

00:01:51,390 --> 00:01:56,670
can get an idea of the positive response

00:01:53,070 --> 00:02:00,920
I'm getting here someone playing

00:01:56,670 --> 00:02:04,690
buzzword bingo so that's always fun

00:02:00,920 --> 00:02:08,830
1998 called and once it's optimism back

00:02:04,690 --> 00:02:10,810
and this actually came in two separate

00:02:08,830 --> 00:02:13,960
forms from two separate people I think

00:02:10,810 --> 00:02:15,730
this is you could say the same thing in

00:02:13,960 --> 00:02:19,840
a different way it was such a hype idea

00:02:15,730 --> 00:02:22,030
a decade ago - I even got quotes we did

00:02:19,840 --> 00:02:25,260
buy a horse Jay asked which made my

00:02:22,030 --> 00:02:27,400
whole week I love it when that happens

00:02:25,260 --> 00:02:29,290
but some people in my personal opinion

00:02:27,400 --> 00:02:31,630
just got it like they they have that

00:02:29,290 --> 00:02:33,700
same vision code just works in the

00:02:31,630 --> 00:02:37,540
browser a note and I don't have to think

00:02:33,700 --> 00:02:41,350
very hard no build step necessary across

00:02:37,540 --> 00:02:46,150
both the web and node not having to

00:02:41,350 --> 00:02:49,330
transpile code to multiple targets write

00:02:46,150 --> 00:02:51,070
once run everywhere this is great I'm

00:02:49,330 --> 00:02:53,860
hiring this person to do marketing for

00:02:51,070 --> 00:02:57,220
me this is very succinct very

00:02:53,860 --> 00:02:59,050
to-the-point and you may be asking

00:02:57,220 --> 00:03:01,660
yourself is this different than

00:02:59,050 --> 00:03:04,090
isomorphic JavaScript and the answer is

00:03:01,660 --> 00:03:05,530
clearly yes and this is going to talk

00:03:04,090 --> 00:03:07,330
about isomorphic JavaScript so I'm not

00:03:05,530 --> 00:03:08,920
gonna get too much into it but

00:03:07,330 --> 00:03:11,440
isomorphic JavaScript is a term that

00:03:08,920 --> 00:03:12,790
actually it was created in 2011 so when

00:03:11,440 --> 00:03:15,220
people were saying oh you have the

00:03:12,790 --> 00:03:18,070
optimism of a decade ago they're not

00:03:15,220 --> 00:03:19,870
exaggerating and and this blog post

00:03:18,070 --> 00:03:21,550
written by Charlie Robbins who is a

00:03:19,870 --> 00:03:23,350
board member of the open J's Foundation

00:03:21,550 --> 00:03:25,690
potentially somewhere in this room

00:03:23,350 --> 00:03:27,790
coined the term isomorphic JavaScript

00:03:25,690 --> 00:03:30,670
and you can find this from the wayback

00:03:27,790 --> 00:03:32,290
machine you if you're reading the small

00:03:30,670 --> 00:03:33,940
text which you probably can't you'll

00:03:32,290 --> 00:03:36,910
notice that it does talk about the idea

00:03:33,940 --> 00:03:39,220
of running JavaScript both on the client

00:03:36,910 --> 00:03:40,390
and the server but one of the things

00:03:39,220 --> 00:03:42,640
that was fundamentally different about

00:03:40,390 --> 00:03:44,830
the concept of isomorphic JavaScript it

00:03:42,640 --> 00:03:47,019
was heavily heavily tied to the concept

00:03:44,830 --> 00:03:49,420
of the view and and Model View

00:03:47,019 --> 00:03:52,120
controller and which patterns of

00:03:49,420 --> 00:03:53,830
designing single page applications could

00:03:52,120 --> 00:03:57,880
be run on the server for server-side

00:03:53,830 --> 00:03:59,800
rendering you know nine years ago it was

00:03:57,880 --> 00:04:03,010
just as hard as today maybe a little

00:03:59,800 --> 00:04:04,920
harder to serve a site that was

00:04:03,010 --> 00:04:07,840
primarily JavaScript and actually have

00:04:04,920 --> 00:04:09,580
any sort of machine like know what it's

00:04:07,840 --> 00:04:11,230
doing without running the code and it

00:04:09,580 --> 00:04:13,960
also creates like a really slow time to

00:04:11,230 --> 00:04:15,700
first paint and this talk is not about

00:04:13,960 --> 00:04:17,799
any of those things and I would argue

00:04:15,700 --> 00:04:18,489
that universal JavaScript is while it's

00:04:17,799 --> 00:04:20,620
similar to

00:04:18,489 --> 00:04:22,569
morphic javascript is a fundamentally

00:04:20,620 --> 00:04:24,880
different thing and we'll dig into that

00:04:22,569 --> 00:04:29,620
a bit but universal JavaScript and its

00:04:24,880 --> 00:04:30,610
new tagline runs once run anywhere and I

00:04:29,620 --> 00:04:32,680
bet all of you are now thinking

00:04:30,610 --> 00:04:34,539
Universal JavaScript is great and you

00:04:32,680 --> 00:04:36,460
want me to actually tell you about it so

00:04:34,539 --> 00:04:37,780
I'm going to the first thing that's

00:04:36,460 --> 00:04:39,400
important about the concept of universal

00:04:37,780 --> 00:04:40,750
JavaScript and running everywhere is

00:04:39,400 --> 00:04:42,690
thinking about all the places you may

00:04:40,750 --> 00:04:46,440
want to actually run your code so

00:04:42,690 --> 00:04:48,880
obviously we've got browsers and node

00:04:46,440 --> 00:04:50,319
we've already mentioned that but there's

00:04:48,880 --> 00:04:52,150
a lot of other places where you might be

00:04:50,319 --> 00:04:54,280
running JavaScript as well

00:04:52,150 --> 00:04:57,099
demo is a fantastic new platform that

00:04:54,280 --> 00:04:59,259
Ryan Dahl the creator of node has come

00:04:57,099 --> 00:05:00,699
up with has some different concepts and

00:04:59,259 --> 00:05:03,759
different thoughts about how JavaScript

00:05:00,699 --> 00:05:05,560
would work different api's we have edge

00:05:03,759 --> 00:05:07,569
workers a great product from CloudFlare

00:05:05,560 --> 00:05:10,720
that is running javascript on the edge

00:05:07,569 --> 00:05:12,639
of a CDN it's API is designed heavily

00:05:10,720 --> 00:05:14,590
after the serviceworker api

00:05:12,639 --> 00:05:16,750
it has fetch but it's kind of its own

00:05:14,590 --> 00:05:19,060
subset it's its own run time it has its

00:05:16,750 --> 00:05:21,520
own opinions about how to run execute

00:05:19,060 --> 00:05:23,500
and debug JavaScript moddable is a

00:05:21,520 --> 00:05:24,909
really cool one for embedded systems

00:05:23,500 --> 00:05:28,229
it's a version of JavaScript that you

00:05:24,909 --> 00:05:31,000
can run on tiny chips and put anywhere

00:05:28,229 --> 00:05:33,310
moddable implements their own API is

00:05:31,000 --> 00:05:35,800
they also implement the entire language

00:05:33,310 --> 00:05:37,240
itself as far as I know moddable

00:05:35,800 --> 00:05:39,009
actually already influenced top-level

00:05:37,240 --> 00:05:41,199
await and is one of the most compliant

00:05:39,009 --> 00:05:42,789
JavaScript engines out there it's

00:05:41,199 --> 00:05:45,430
actually probably a good time to stop

00:05:42,789 --> 00:05:48,039
for a second and say that all of the the

00:05:45,430 --> 00:05:49,960
ones above aside from browsers a lot of

00:05:48,039 --> 00:05:52,719
those are using v8 the javascript engine

00:05:49,960 --> 00:05:54,460
from chrome model is not it's using its

00:05:52,719 --> 00:05:56,740
own JavaScript engine that they manage

00:05:54,460 --> 00:05:58,210
themselves and we'll see we see a lot of

00:05:56,740 --> 00:06:01,050
other places where javascript is showing

00:05:58,210 --> 00:06:03,099
up as well embedded inside of databases

00:06:01,050 --> 00:06:05,409
you can also see it inside of

00:06:03,099 --> 00:06:08,229
productivity software all sorts of ways

00:06:05,409 --> 00:06:10,960
of scripting things and automating

00:06:08,229 --> 00:06:13,120
things in ways you wouldn't have

00:06:10,960 --> 00:06:14,800
imagined and JavaScript is showing up

00:06:13,120 --> 00:06:16,330
all over the place and to me this is one

00:06:14,800 --> 00:06:19,270
of the reasons why Universal javascript

00:06:16,330 --> 00:06:20,800
is so important when we're writing our

00:06:19,270 --> 00:06:22,419
libraries or we're writing our

00:06:20,800 --> 00:06:24,490
productivity tools or we're moving

00:06:22,419 --> 00:06:25,750
between these different environments we

00:06:24,490 --> 00:06:27,669
don't necessarily know where the code

00:06:25,750 --> 00:06:29,770
we're writing is going to end up we

00:06:27,669 --> 00:06:31,389
don't even know who's going to use it so

00:06:29,770 --> 00:06:32,350
kind of starting from this principle of

00:06:31,389 --> 00:06:34,180
a baseline that can be

00:06:32,350 --> 00:06:35,680
share it everywhere make sure that your

00:06:34,180 --> 00:06:39,100
codes extensible make sure it can be

00:06:35,680 --> 00:06:41,950
shared in different places all of these

00:06:39,100 --> 00:06:44,020
environments share parts there are not

00:06:41,950 --> 00:06:46,840
these fundamentally different things we

00:06:44,020 --> 00:06:49,600
have standards we align along a baseline

00:06:46,840 --> 00:06:52,750
and the the core of all of that is equi

00:06:49,600 --> 00:06:54,490
to 6 2 which is specified by tc39 the

00:06:52,750 --> 00:06:59,200
standards organization that specifies

00:06:54,490 --> 00:07:01,900
the JavaScript language and within Etna

00:06:59,200 --> 00:07:03,970
2 6 2 if you look into the spec there's

00:07:01,900 --> 00:07:07,270
a couple concepts that I won't get too

00:07:03,970 --> 00:07:09,760
much into right now of realms intrinsics

00:07:07,270 --> 00:07:11,740
and primordial x' and this is like the

00:07:09,760 --> 00:07:14,710
soup that makes up the core of

00:07:11,740 --> 00:07:18,310
JavaScript realms are the context where

00:07:14,710 --> 00:07:19,800
your code runs I'm glossing over it but

00:07:18,310 --> 00:07:22,540
find me later for more details

00:07:19,800 --> 00:07:24,010
intrinsics are all the different

00:07:22,540 --> 00:07:26,200
built-ins that are available on the

00:07:24,010 --> 00:07:28,600
global object that you can change and

00:07:26,200 --> 00:07:30,580
you can use and primordial are the ones

00:07:28,600 --> 00:07:33,040
that are necessary to even bootstrap the

00:07:30,580 --> 00:07:35,110
environment so some examples of

00:07:33,040 --> 00:07:38,320
primordial would be like array and

00:07:35,110 --> 00:07:40,450
number and object and function without

00:07:38,320 --> 00:07:42,160
these instantiated in the environment

00:07:40,450 --> 00:07:44,830
you can't even make the higher-level

00:07:42,160 --> 00:07:47,200
things like some of the namespace

00:07:44,830 --> 00:07:51,370
objects such as JSON and math and

00:07:47,200 --> 00:07:53,470
reflect these these API s are all

00:07:51,370 --> 00:07:55,870
available in every single JavaScript

00:07:53,470 --> 00:07:58,390
runtime these are all standardized by

00:07:55,870 --> 00:08:00,760
equi - 6 - but they serve slightly

00:07:58,390 --> 00:08:04,180
different purposes something like JSON

00:08:00,760 --> 00:08:06,910
or math or date are almost more like

00:08:04,180 --> 00:08:09,100
libraries within JavaScript whereas

00:08:06,910 --> 00:08:11,440
things like object our core capabilities

00:08:09,100 --> 00:08:13,840
one of the cool things about these these

00:08:11,440 --> 00:08:15,370
are all intrinsic node has done some

00:08:13,840 --> 00:08:17,080
work recently and freezing all of these

00:08:15,370 --> 00:08:18,730
objects because you don't want some

00:08:17,080 --> 00:08:20,590
random module changing the way that node

00:08:18,730 --> 00:08:22,570
does things internally this is an

00:08:20,590 --> 00:08:26,250
example of a way that a platform can do

00:08:22,570 --> 00:08:30,010
small changes to the way it works above

00:08:26,250 --> 00:08:33,550
the baseline runtime without really

00:08:30,010 --> 00:08:36,479
causing major differences for people but

00:08:33,550 --> 00:08:39,070
one of the things that tc39 specified

00:08:36,479 --> 00:08:44,169
you know in the recent future of 5 years

00:08:39,070 --> 00:08:45,350
ago was es modules and prior to es

00:08:44,169 --> 00:08:48,710
modules there

00:08:45,350 --> 00:08:50,600
was no common way to share code between

00:08:48,710 --> 00:08:53,450
all of these different environments if

00:08:50,600 --> 00:08:55,640
you wanted to take one piece of code and

00:08:53,450 --> 00:08:57,920
link it to another piece of code you are

00:08:55,640 --> 00:09:00,200
either literally concatenating the files

00:08:57,920 --> 00:09:02,900
together or running a tool such as Babel

00:09:00,200 --> 00:09:04,600
or roll-up or web pack to pack

00:09:02,900 --> 00:09:07,100
everything together so you could run it

00:09:04,600 --> 00:09:09,200
node was one of the few environments

00:09:07,100 --> 00:09:11,270
that had a built in module system which

00:09:09,200 --> 00:09:13,850
was common j/s which is what a lot of

00:09:11,270 --> 00:09:15,980
other runtimes copied but it was not

00:09:13,850 --> 00:09:17,300
standardized and it wasn't common

00:09:15,980 --> 00:09:19,910
jeaious itself wasn't built in a way

00:09:17,300 --> 00:09:23,270
that browsers could use as well

00:09:19,910 --> 00:09:24,740
yes modules made some compromises didn't

00:09:23,270 --> 00:09:26,420
make everyone happy but was something

00:09:24,740 --> 00:09:30,020
that all of these different environments

00:09:26,420 --> 00:09:31,760
can share and I would like to push it a

00:09:30,020 --> 00:09:34,030
step further and say that modules have

00:09:31,760 --> 00:09:37,430
been the missing piece to really enable

00:09:34,030 --> 00:09:39,470
universal JavaScript without modules as

00:09:37,430 --> 00:09:44,060
kind of this shared way of sharing code

00:09:39,470 --> 00:09:48,560
we were destined to have to transpile we

00:09:44,060 --> 00:09:49,880
had to do some sort of function on the

00:09:48,560 --> 00:09:52,820
code in order to use it in different

00:09:49,880 --> 00:09:55,070
places but that's where things get kind

00:09:52,820 --> 00:09:58,400
of weird because even though es modules

00:09:55,070 --> 00:10:00,770
are specified in Ethne the loader itself

00:09:58,400 --> 00:10:03,110
is not the loaders implemented by the

00:10:00,770 --> 00:10:05,420
embedder so in node.js we implement the

00:10:03,110 --> 00:10:09,230
loader and the chromium browser blink

00:10:05,420 --> 00:10:10,880
implements the loader and tc39 also

00:10:09,230 --> 00:10:13,820
leaves it up to the hosting environment

00:10:10,880 --> 00:10:16,010
to determine resolution how do we take

00:10:13,820 --> 00:10:19,550
that string that you give that says hey

00:10:16,010 --> 00:10:21,560
I want this thing and find it it's up to

00:10:19,550 --> 00:10:24,050
the runtime to turn a reference into a

00:10:21,560 --> 00:10:26,420
location to fetch a resource from that

00:10:24,050 --> 00:10:28,610
location to do this recursively and

00:10:26,420 --> 00:10:31,490
build a graph and give the engine the

00:10:28,610 --> 00:10:34,190
entire graph to execute this core piece

00:10:31,490 --> 00:10:37,670
of shared infrastructure which is

00:10:34,190 --> 00:10:39,260
standardized has this single place where

00:10:37,670 --> 00:10:41,630
every single runtime can make their own

00:10:39,260 --> 00:10:43,010
decisions in bv8 this single place where

00:10:41,630 --> 00:10:44,870
you're actually saying hey here's the

00:10:43,010 --> 00:10:47,960
code I'm sharing this is one of the

00:10:44,870 --> 00:10:50,270
reasons that in the ESM implementation

00:10:47,960 --> 00:10:52,760
of node were pushing towards removing

00:10:50,270 --> 00:10:54,800
some of the magic from common j/s that

00:10:52,760 --> 00:10:58,220
browsers will that won't be capable in

00:10:54,800 --> 00:10:59,000
the browsers this is a potential place

00:10:58,220 --> 00:11:02,150
of

00:10:59,000 --> 00:11:03,940
platform divergence and platform

00:11:02,150 --> 00:11:07,220
divergence is something that gives me

00:11:03,940 --> 00:11:09,620
existential dread and a known side

00:11:07,220 --> 00:11:13,190
effect about existential dread is that

00:11:09,620 --> 00:11:16,030
it causes nihilistic transpilation this

00:11:13,190 --> 00:11:19,250
is a term I coined myself recently

00:11:16,030 --> 00:11:21,050
nihilistic transpilation is when you

00:11:19,250 --> 00:11:23,600
have so given up on the concept of

00:11:21,050 --> 00:11:25,160
universal MA JavaScript where you've so

00:11:23,600 --> 00:11:26,630
bought into the fact that we're always

00:11:25,160 --> 00:11:28,720
going to need to build we're always

00:11:26,630 --> 00:11:30,680
going to need to transpile that

00:11:28,720 --> 00:11:32,840
universal JavaScript doesn't even matter

00:11:30,680 --> 00:11:35,750
anymore it's not a priority it's not a

00:11:32,840 --> 00:11:37,460
thing that needs to be thought about

00:11:35,750 --> 00:11:41,090
it's just not possible we may as well

00:11:37,460 --> 00:11:45,230
just you know accept our transporation

00:11:41,090 --> 00:11:47,200
gods and move forward and it's built on

00:11:45,230 --> 00:11:50,170
this idea in my personal opinion that

00:11:47,200 --> 00:11:54,200
javascript platforms are potentially

00:11:50,170 --> 00:11:55,820
fundamentally different I would say that

00:11:54,200 --> 00:11:57,380
they're not fundamentally different but

00:11:55,820 --> 00:11:59,690
they can have drastically different

00:11:57,380 --> 00:12:01,760
api's which is fine different platforms

00:11:59,690 --> 00:12:03,410
have different needs that doesn't mean

00:12:01,760 --> 00:12:06,140
that the core language needs to be

00:12:03,410 --> 00:12:08,480
different and people may ask that

00:12:06,140 --> 00:12:11,240
question is the browser fundamentally

00:12:08,480 --> 00:12:13,400
different from nodejs and yes it's api's

00:12:11,240 --> 00:12:16,100
are gonna be fundamentally different but

00:12:13,400 --> 00:12:18,050
they do come from the same soup they

00:12:16,100 --> 00:12:20,780
have the same primordial x' they have

00:12:18,050 --> 00:12:24,860
the same base language they have the

00:12:20,780 --> 00:12:27,200
ability to have this shared core in fact

00:12:24,860 --> 00:12:30,230
nodejs has adapted many of the api is

00:12:27,200 --> 00:12:31,160
designed originally for browsers so if

00:12:30,230 --> 00:12:33,470
you look at a standards organization

00:12:31,160 --> 00:12:34,850
like what working group you may think to

00:12:33,470 --> 00:12:36,500
yourself aren't what working group of

00:12:34,850 --> 00:12:39,080
standards standards brother

00:12:36,500 --> 00:12:41,330
browser-specific so they standardize

00:12:39,080 --> 00:12:43,100
HTML and they standardize dom and those

00:12:41,330 --> 00:12:45,020
aren't things that node does although

00:12:43,100 --> 00:12:48,680
with server-side rendering maybe it does

00:12:45,020 --> 00:12:50,390
I guess note as a platform doesn't but

00:12:48,680 --> 00:12:53,120
we do have what working group standards

00:12:50,390 --> 00:12:54,740
api is in both run way runtimes and i

00:12:53,120 --> 00:12:56,510
have an asterisks there because they

00:12:54,740 --> 00:12:59,780
differ a little bit but we're trying but

00:12:56,510 --> 00:13:01,940
something like console or URL or the

00:12:59,780 --> 00:13:03,500
encoder api these are all things that

00:13:01,940 --> 00:13:05,930
are standardized at what working group

00:13:03,500 --> 00:13:07,640
that we have in node I think you'd be

00:13:05,930 --> 00:13:10,760
very hard-pressed to find a JavaScript

00:13:07,640 --> 00:13:12,589
runtime that's easy to use that doesn't

00:13:10,760 --> 00:13:13,390
have console in it hat like that's how I

00:13:12,589 --> 00:13:15,340
debug

00:13:13,390 --> 00:13:16,800
like if you don't have console you're

00:13:15,340 --> 00:13:19,720
kind of like how do you even get started

00:13:16,800 --> 00:13:21,940
and there's even other standards that

00:13:19,720 --> 00:13:24,550
aren't yet in nodejs that we're

00:13:21,940 --> 00:13:26,230
exploring I know people say stop trying

00:13:24,550 --> 00:13:27,310
to make fetch happen I'm not gonna stop

00:13:26,230 --> 00:13:29,800
trying to make fetch happen

00:13:27,310 --> 00:13:31,510
I want such to happen but this is a

00:13:29,800 --> 00:13:34,110
really great example of one of those ap

00:13:31,510 --> 00:13:36,160
is that like on the surface from an API

00:13:34,110 --> 00:13:36,640
perspective most developers like that's

00:13:36,160 --> 00:13:39,490
great

00:13:36,640 --> 00:13:40,990
I give a string to a function and it

00:13:39,490 --> 00:13:42,370
gives me a promise and then that promise

00:13:40,990 --> 00:13:44,440
is gonna give me the thing that I asked

00:13:42,370 --> 00:13:46,360
for but under the hood there's so many

00:13:44,440 --> 00:13:48,550
subtle differences between node and the

00:13:46,360 --> 00:13:49,870
browser the browser only really ever has

00:13:48,550 --> 00:13:52,330
one tenant you're not worried about

00:13:49,870 --> 00:13:54,730
multiple people making requests and node

00:13:52,330 --> 00:13:57,280
the same process may have requests from

00:13:54,730 --> 00:13:58,810
10 20 a hundred different people you

00:13:57,280 --> 00:14:00,370
can't share the state of the fetch

00:13:58,810 --> 00:14:03,010
object in the same way it can create

00:14:00,370 --> 00:14:04,780
security concerns but should those

00:14:03,010 --> 00:14:07,210
plumbing problems be something that

00:14:04,780 --> 00:14:09,430
means we don't have shared API surface

00:14:07,210 --> 00:14:11,110
what working group streams is another

00:14:09,430 --> 00:14:12,550
great example here Matteo Kalina who I

00:14:11,110 --> 00:14:14,770
believe is in the audience somewhere has

00:14:12,550 --> 00:14:17,860
been exploring in getting what working

00:14:14,770 --> 00:14:19,600
group streams support in node whether or

00:14:17,860 --> 00:14:20,950
not we get stream support in node I

00:14:19,600 --> 00:14:23,830
think that there's definitely a

00:14:20,950 --> 00:14:25,600
possibility of finding ways to have a

00:14:23,830 --> 00:14:27,160
communication layer between the two so

00:14:25,600 --> 00:14:29,980
that node streams in what working group

00:14:27,160 --> 00:14:31,840
streams can talk but like these kinds of

00:14:29,980 --> 00:14:34,530
fundamental differences in the platform

00:14:31,840 --> 00:14:37,090
make it hard to see that future of

00:14:34,530 --> 00:14:40,270
universal JavaScript and makes it easy

00:14:37,090 --> 00:14:41,070
to fall into that pit of nihilistic

00:14:40,270 --> 00:14:44,860
transpilation

00:14:41,070 --> 00:14:46,870
and I mentioned the interface versus

00:14:44,860 --> 00:14:50,610
plumbing and I think that this is so

00:14:46,870 --> 00:14:53,080
important as platform developers as

00:14:50,610 --> 00:14:55,360
library developers and even framework

00:14:53,080 --> 00:14:58,300
developers when you are designing ap is

00:14:55,360 --> 00:14:59,530
the plumbing matters in the plumbing is

00:14:58,300 --> 00:15:01,870
all you're working on and it's really

00:14:59,530 --> 00:15:05,110
easy to lose track of everything else

00:15:01,870 --> 00:15:06,460
but to many people who are consuming

00:15:05,110 --> 00:15:09,760
what you're using what they care about

00:15:06,460 --> 00:15:11,740
is the interface how am i calling into

00:15:09,760 --> 00:15:14,980
that thing does it work the way that I'm

00:15:11,740 --> 00:15:17,230
expecting it to work and I think for a

00:15:14,980 --> 00:15:19,060
world of universal JavaScript we need to

00:15:17,230 --> 00:15:21,550
be thinking more about the interface

00:15:19,060 --> 00:15:22,960
than the plumbing platforms can worry

00:15:21,550 --> 00:15:25,270
about the plumbing as long as the

00:15:22,960 --> 00:15:26,490
behavior is similar enough if developers

00:15:25,270 --> 00:15:30,600
have shared interfaces

00:15:26,490 --> 00:15:32,070
we can get a lot done and that Sirsa ass

00:15:30,600 --> 00:15:34,470
kind of like this question of like where

00:15:32,070 --> 00:15:36,720
does the platform begin we have those

00:15:34,470 --> 00:15:40,110
intrinsics and primordial zat what point

00:15:36,720 --> 00:15:42,120
does it become the platform is console

00:15:40,110 --> 00:15:44,700
part of the platform is it part of the

00:15:42,120 --> 00:15:46,770
runtime where does the platform end when

00:15:44,700 --> 00:15:49,470
does it start becoming the part that is

00:15:46,770 --> 00:15:52,020
frameworks like these are these are a

00:15:49,470 --> 00:15:53,760
lot of words and maybe you know maybe

00:15:52,020 --> 00:15:55,050
it's a little too broad but I think it's

00:15:53,760 --> 00:15:57,240
really important to think about these

00:15:55,050 --> 00:15:58,649
things we're all using these tools what

00:15:57,240 --> 00:16:01,350
part is the language what part is the

00:15:58,649 --> 00:16:03,240
platform what part of the frameworks why

00:16:01,350 --> 00:16:04,800
do I care about these things and where

00:16:03,240 --> 00:16:08,910
is the code that I'm writing fitting

00:16:04,800 --> 00:16:11,550
into this picture and I want to suppose

00:16:08,910 --> 00:16:14,610
that perhaps Universal JavaScript is a

00:16:11,550 --> 00:16:17,250
platform concern and a great example

00:16:14,610 --> 00:16:21,089
here is JSON modules how many people

00:16:17,250 --> 00:16:22,950
here have ever required JSON before in

00:16:21,089 --> 00:16:24,180
node you can just require JSON and it

00:16:22,950 --> 00:16:25,920
gives you an object and it's a really

00:16:24,180 --> 00:16:28,140
great experience in the browser if you

00:16:25,920 --> 00:16:29,550
want to get JSON right now you have to

00:16:28,140 --> 00:16:31,770
fetch it which all of a sudden

00:16:29,550 --> 00:16:35,040
introduces a promise and it complicates

00:16:31,770 --> 00:16:36,630
things so inspired by nodejs JSON

00:16:35,040 --> 00:16:40,260
modules were actually specified in the

00:16:36,630 --> 00:16:42,089
HTML spec by what working group but it

00:16:40,260 --> 00:16:43,920
was rejected at T PAC for security

00:16:42,089 --> 00:16:46,980
concerns t pack being the conference of

00:16:43,920 --> 00:16:49,230
w3c as a response to this there's a

00:16:46,980 --> 00:16:51,870
proposal at TC 39 working on module

00:16:49,230 --> 00:16:54,620
attributes to try to handle the security

00:16:51,870 --> 00:16:57,270
concerns that were raised by the w3c the

00:16:54,620 --> 00:16:59,760
reason that I bring this all up is that

00:16:57,270 --> 00:17:02,370
Universal needs to be a platform ethos

00:16:59,760 --> 00:17:04,140
the idea that we could have JSON modules

00:17:02,370 --> 00:17:06,720
and have a shared interface for JSON

00:17:04,140 --> 00:17:09,990
modules across every single runtime

00:17:06,720 --> 00:17:12,540
requires all of these different partners

00:17:09,990 --> 00:17:18,120
in the web ecosystem to work together

00:17:12,540 --> 00:17:19,559
for a you know shared good and there are

00:17:18,120 --> 00:17:21,929
a lot of these standards happening at

00:17:19,559 --> 00:17:23,490
tc39 we're exploring built-in modules

00:17:21,929 --> 00:17:25,020
and standard libraries and module

00:17:23,490 --> 00:17:27,179
attributes these are all things that

00:17:25,020 --> 00:17:29,520
will bring us closer to a future of of

00:17:27,179 --> 00:17:31,260
universal JavaScript at what working

00:17:29,520 --> 00:17:33,750
group they're they're exploring JSON

00:17:31,260 --> 00:17:35,370
modules at the w3c they're exploring

00:17:33,750 --> 00:17:37,620
import Maps which will allow bear

00:17:35,370 --> 00:17:39,900
imports in the browser and huazi which

00:17:37,620 --> 00:17:40,220
would be a shared system interface that

00:17:39,900 --> 00:17:41,630
can be

00:17:40,220 --> 00:17:45,620
used across many runtimes with

00:17:41,630 --> 00:17:47,659
webassembly but with all this work

00:17:45,620 --> 00:17:49,640
happening in different places how do we

00:17:47,659 --> 00:17:51,710
find a shared vision and this isn't a

00:17:49,640 --> 00:17:53,990
question that I have an answer to today

00:17:51,710 --> 00:17:57,200
this is a question that I think we as a

00:17:53,990 --> 00:17:58,970
group need to be thinking about where do

00:17:57,200 --> 00:18:00,890
we collaborate when we have all of these

00:17:58,970 --> 00:18:05,000
disparate stakeholders where do we all

00:18:00,890 --> 00:18:07,130
come to collaborate together in that

00:18:05,000 --> 00:18:09,700
question that we started with our

00:18:07,130 --> 00:18:13,220
various JavaScript platforms

00:18:09,700 --> 00:18:15,049
fundamentally different I would say that

00:18:13,220 --> 00:18:18,980
developers shouldn't have to know about

00:18:15,049 --> 00:18:21,380
that beyond an API developer skills

00:18:18,980 --> 00:18:22,640
should be portable and to me that's one

00:18:21,380 --> 00:18:24,049
of the most powerful things about the

00:18:22,640 --> 00:18:26,090
concept of universal and I think it's

00:18:24,049 --> 00:18:29,150
one of the reasons why a platform like

00:18:26,090 --> 00:18:32,510
node was so successful portable skills

00:18:29,150 --> 00:18:35,360
and I would even go as far as to say

00:18:32,510 --> 00:18:37,909
Universal needs to be a platform concern

00:18:35,360 --> 00:18:39,860
and not a development target this needs

00:18:37,909 --> 00:18:43,010
to be something that fundamentally we

00:18:39,860 --> 00:18:47,450
are all working towards Universal it's a

00:18:43,010 --> 00:18:49,100
goal not a technique and I'll end on a

00:18:47,450 --> 00:18:51,169
pretty bold note that I think the future

00:18:49,100 --> 00:18:53,770
of JavaScript needs to be universal if

00:18:51,169 --> 00:18:55,730
javascript is to have a future

00:18:53,770 --> 00:18:57,100
thank you I'm Myles and this is a

00:18:55,730 --> 00:19:01,980
surfing dog

00:18:57,100 --> 00:19:01,980

YouTube URL: https://www.youtube.com/watch?v=HcFOYEKdTZY


