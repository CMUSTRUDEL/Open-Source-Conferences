Title: GraphQL, Simplified - David Clements & Matteo Collina, NearForm
Publication date: 2020-05-11
Playlist: Node + JS Interactive 2019
Description: 
	GraphQL, Simplified - David Clements & Matteo Collina, NearForm 
Speakers: David Clements
Use React? Use GraphQL? Love Hooks? Graphql-hooks is a new GraphQL client for React with a hooks-first API. It’s super fast and weighs only 1.9kB gzipped.

The motivation behind graphql-hooks was a barebones GraphQL Client, focused on speed and lightweight. Both Apollo and Relay have pioneered how to use GraphQL on the client. However, over the years they’ve grown in size and complexity. This has increased the barrier to entry for new developers excited to try out GraphQL.

In this workshop, David and Matteo will be demonstrating how quick and simple it is to get up and running with the graphql-hooks client and fastify-gql GraphQL server library to produce an easily maintainable and high performance fullstack GraphQL implementation.
Captions: 
	00:00:00,060 --> 00:00:12,690
welcome to the Dave matterr show this

00:00:05,790 --> 00:00:14,730
might be our last time I guess how many

00:00:12,690 --> 00:00:18,630
people have done what we graphic y'all

00:00:14,730 --> 00:00:21,040
before couple cool how many people have

00:00:18,630 --> 00:00:23,620
worked with react hoaxes before

00:00:21,040 --> 00:00:27,190
so we have the right crowd yeah yeah

00:00:23,620 --> 00:00:29,170
this is good if you haven't done either

00:00:27,190 --> 00:00:33,550
of those things probably the person next

00:00:29,170 --> 00:00:37,059
to you has so feel free to interact yes

00:00:33,550 --> 00:00:38,860
with us and with each other you have my

00:00:37,059 --> 00:00:43,210
permission and blessing to do so I'll

00:00:38,860 --> 00:00:46,030
try crashes and whatever follow us on

00:00:43,210 --> 00:00:46,330
Twitter as usual you know commander you

00:00:46,030 --> 00:00:48,280
know

00:00:46,330 --> 00:00:49,989
it's deputy Mike lamb and at Mattel

00:00:48,280 --> 00:00:53,440
Collina so please follow us on Twitter

00:00:49,989 --> 00:00:55,120
thank you and so bless I would say

00:00:53,440 --> 00:01:00,309
that's let's start Dave let's stop

00:00:55,120 --> 00:01:02,440
yay so welcome everybody and this is an

00:01:00,309 --> 00:01:05,229
interactive workshop so you suspect to

00:01:02,440 --> 00:01:08,830
do some coding maybe there will be some

00:01:05,229 --> 00:01:10,690
material left over to be home do do at

00:01:08,830 --> 00:01:13,240
home exercise because it's a short

00:01:10,690 --> 00:01:14,740
format so yeah there's seven parts we're

00:01:13,240 --> 00:01:17,830
hoping to get we really want to get to

00:01:14,740 --> 00:01:20,260
part three in the hour we might get to

00:01:17,830 --> 00:01:21,640
part four so it's C but it's self guided

00:01:20,260 --> 00:01:24,520
as well so you can just keep going if

00:01:21,640 --> 00:01:27,340
you want to you first thing we both work

00:01:24,520 --> 00:01:29,350
for near firm so check us out we out of

00:01:27,340 --> 00:01:30,880
the booth so if you have any out with

00:01:29,350 --> 00:01:33,010
your JavaScript application we are a

00:01:30,880 --> 00:01:36,250
professional services company so let's

00:01:33,010 --> 00:01:41,140
talk and we can help no sort of ways so

00:01:36,250 --> 00:01:42,910
please just you know just reach out so a

00:01:41,140 --> 00:01:45,640
couple of things quick things of the

00:01:42,910 --> 00:01:49,240
sitter setup you can use no ten plus so

00:01:45,640 --> 00:01:50,530
if you have no 12 is fine and but but if

00:01:49,240 --> 00:01:52,030
you do have issues switch to this

00:01:50,530 --> 00:01:53,920
version because that's what it's written

00:01:52,030 --> 00:01:56,850
against originally and does everyone

00:01:53,920 --> 00:02:01,509
know and understand and have installed

00:01:56,850 --> 00:02:04,619
nvm anyone don't

00:02:01,509 --> 00:02:06,250
how does anyone not have nvm installed

00:02:04,619 --> 00:02:07,990
okay kukuku

00:02:06,250 --> 00:02:13,569
what version of node do you have

00:02:07,990 --> 00:02:15,129
installed no - V okay okay well okay if

00:02:13,569 --> 00:02:15,519
you have issues just let it we'll come

00:02:15,129 --> 00:02:18,760
help you

00:02:15,519 --> 00:02:21,060
yeah no worries okay good so everyone's

00:02:18,760 --> 00:02:24,660
pretty well set up then

00:02:21,060 --> 00:02:25,890
oh we might need more chairs here well

00:02:24,660 --> 00:02:29,310
there's there's two here there's one

00:02:25,890 --> 00:02:31,440
here or three people

00:02:29,310 --> 00:02:35,090
as one listen chairs over here as well

00:02:31,440 --> 00:02:35,090
so if you want to go over

00:02:36,540 --> 00:02:41,640
dude craft wells really yes really

00:02:38,819 --> 00:02:45,239
popular you know do you see I know also

00:02:41,640 --> 00:02:48,060
reactives Oh Oh more people okay hi hi

00:02:45,239 --> 00:02:50,489
hi everybody we start too early I guess

00:02:48,060 --> 00:02:54,030
you know it's actually like right we are

00:02:50,489 --> 00:02:54,660
right on time man does everyone have a

00:02:54,030 --> 00:02:57,090
seat

00:02:54,660 --> 00:02:58,530
oh yes maybe one over there there is one

00:02:57,090 --> 00:03:02,579
more seat over there one here at the

00:02:58,530 --> 00:03:05,700
front two three ah good okay

00:03:02,579 --> 00:03:07,079
yeah feet everybody listen this is I

00:03:05,700 --> 00:03:08,519
think there is some if you want if you

00:03:07,079 --> 00:03:09,390
don't want to sit on the floor there

00:03:08,519 --> 00:03:10,470
Laura

00:03:09,390 --> 00:03:11,610
there is one of here you want it but

00:03:10,470 --> 00:03:15,000
otherwise if you're comfortable there

00:03:11,610 --> 00:03:19,379
cool okay so let's just reiterate new

00:03:15,000 --> 00:03:22,769
form near form hey booth booth bridge a

00:03:19,379 --> 00:03:25,170
raffle at the end of the at lunchtime so

00:03:22,769 --> 00:03:27,150
please come there go there for a bit I'm

00:03:25,170 --> 00:03:29,160
go right this is what airports so they

00:03:27,150 --> 00:03:31,709
all airports as well yeah oh wow we're

00:03:29,160 --> 00:03:33,269
really like ramping up yeah yeah okay

00:03:31,709 --> 00:03:34,470
there's a thing called a bangle as well

00:03:33,269 --> 00:03:35,459
with so it was a Kickstarter project

00:03:34,470 --> 00:03:38,569
yeah whatever

00:03:35,459 --> 00:03:41,549
blah blah blah it's nice an IOT project

00:03:38,569 --> 00:03:45,239
everyone who came in that would this is

00:03:41,549 --> 00:03:46,919
written against note 10.1 six but your

00:03:45,239 --> 00:03:50,040
version of nodes should work with it as

00:03:46,919 --> 00:03:52,169
well but if it doesn't know date one no

00:03:50,040 --> 00:03:55,440
date work no ones are no date are they

00:03:52,169 --> 00:03:58,380
still what about in production hahaha

00:03:55,440 --> 00:04:00,329
because you really shouldn't be because

00:03:58,380 --> 00:04:01,650
there's not support anymore yeah it was

00:04:00,329 --> 00:04:06,359
a weeks and two weeks from support

00:04:01,650 --> 00:04:08,160
anymore so we're gonna clone a

00:04:06,359 --> 00:04:09,599
repository

00:04:08,160 --> 00:04:12,450
we're assuming everyone knows how to use

00:04:09,599 --> 00:04:14,520
get if anyone doesn't talk to your

00:04:12,450 --> 00:04:17,220
neighbor talk to us

00:04:14,520 --> 00:04:17,580
so oh yeah we're gonna do that in a

00:04:17,220 --> 00:04:21,050
minute

00:04:17,580 --> 00:04:21,050
what a react hooks

00:04:23,600 --> 00:04:29,120
a react took is a essentially like a

00:04:26,540 --> 00:04:32,080
mini state machine it's a reusable

00:04:29,120 --> 00:04:37,520
staple function and it doesn't obstruct

00:04:32,080 --> 00:04:39,720
the view hierarchy versus other ways of

00:04:37,520 --> 00:04:42,690
managing state and react

00:04:39,720 --> 00:04:45,660
I there's a seat just there at the front

00:04:42,690 --> 00:04:51,960
if you can find it

00:04:45,660 --> 00:04:54,960
no ten you want also near forum booth so

00:04:51,960 --> 00:04:56,550
here's an example of a react talk this

00:04:54,960 --> 00:04:58,080
is one is considered conceptually this

00:04:56,550 --> 00:05:03,840
wise this requires some levers just like

00:04:58,080 --> 00:05:06,210
you know for talking purposes so you say

00:05:03,840 --> 00:05:08,850
we have a library that has a used API

00:05:06,210 --> 00:05:15,810
hook so the use API hook would be used

00:05:08,850 --> 00:05:19,800
within a function component and it would

00:05:15,810 --> 00:05:22,260
return an object from which we do D

00:05:19,800 --> 00:05:26,010
structure the parameter the keys error

00:05:22,260 --> 00:05:27,840
and name the the second value here would

00:05:26,010 --> 00:05:30,390
be like what the initial value should be

00:05:27,840 --> 00:05:34,260
which is where name is loading so the

00:05:30,390 --> 00:05:36,660
first value of name would be loading so

00:05:34,260 --> 00:05:39,180
when it renders the age to element in

00:05:36,660 --> 00:05:42,990
the the JSX there it would first say

00:05:39,180 --> 00:05:45,660
loading the use the API hook would go

00:05:42,990 --> 00:05:48,210
and query the make make the asynchronous

00:05:45,660 --> 00:05:50,550
call when that call resolves it would

00:05:48,210 --> 00:05:52,890
trigger a rerender with that new value

00:05:50,550 --> 00:05:55,560
and the second time it's called the use

00:05:52,890 --> 00:05:58,800
API hook would return an object where

00:05:55,560 --> 00:06:01,320
the name is whatever that user's name is

00:05:58,800 --> 00:06:02,610
the correlates with the ID do you

00:06:01,320 --> 00:06:06,330
understand so this is the flow of how

00:06:02,610 --> 00:06:08,550
hooks work there you're not awaiting

00:06:06,330 --> 00:06:11,070
your your rendering and then your reer

00:06:08,550 --> 00:06:12,360
entering which is the react way and the

00:06:11,070 --> 00:06:15,030
major difference is you move away from

00:06:12,360 --> 00:06:17,640
classes yeah you know react and just use

00:06:15,030 --> 00:06:19,440
functions which is way for me makes it

00:06:17,640 --> 00:06:22,200
understandable I could never understood

00:06:19,440 --> 00:06:24,270
react with use classes so sorry I just

00:06:22,200 --> 00:06:28,400
you know quick admission here and just

00:06:24,270 --> 00:06:33,750
these make me use react and lovely yeah

00:06:28,400 --> 00:06:35,630
anyway yeah and I also agree but it did

00:06:33,750 --> 00:06:37,800
this is this is a much more

00:06:35,630 --> 00:06:44,460
self-contained kind of encapsulated way

00:06:37,800 --> 00:06:45,720
towards react in our opinion so what

00:06:44,460 --> 00:06:47,430
hooks do is they allow you to store a

00:06:45,720 --> 00:06:48,960
manage local state state it allows you

00:06:47,430 --> 00:06:50,010
to have a separation of concerns that

00:06:48,960 --> 00:06:51,750
ties into what we're saying about

00:06:50,010 --> 00:06:53,129
classes so if you have a class and you

00:06:51,750 --> 00:06:55,169
have to define how

00:06:53,129 --> 00:06:56,879
gets its state and different things and

00:06:55,169 --> 00:06:58,979
then you have class inheritance involved

00:06:56,879 --> 00:07:03,080
in that too things can get coupled quite

00:06:58,979 --> 00:07:04,649
quickly but if you're using hooks

00:07:03,080 --> 00:07:06,629
particularly if you've written them

00:07:04,649 --> 00:07:08,729
yourself then you can kind of update

00:07:06,629 --> 00:07:12,330
that functionality across your

00:07:08,729 --> 00:07:13,860
application quite easily and that's

00:07:12,330 --> 00:07:17,729
where it comes into the functions res

00:07:13,860 --> 00:07:21,149
classes which we've just covered so

00:07:17,729 --> 00:07:24,629
graph QL is a data query language okay

00:07:21,149 --> 00:07:27,990
it's it's it was it was born at Facebook

00:07:24,629 --> 00:07:30,559
long time ago to to build an API that

00:07:27,990 --> 00:07:35,219
can represent the entirety of Facebook

00:07:30,559 --> 00:07:37,169
whatever this means what is useful for

00:07:35,219 --> 00:07:40,349
well it has some varied a lot of very

00:07:37,169 --> 00:07:42,209
nice properties which is itself evolving

00:07:40,349 --> 00:07:44,490
you can evolve it you don't need to

00:07:42,209 --> 00:07:47,159
version it and it's really powerful it's

00:07:44,490 --> 00:07:48,899
it schema based so you write the schema

00:07:47,159 --> 00:07:51,259
you get the graphical schema and then

00:07:48,899 --> 00:07:55,499
you provide some functions and called

00:07:51,259 --> 00:07:57,209
resolvers to populate that data it's

00:07:55,499 --> 00:08:00,059
also strongly typed so you can actually

00:07:57,209 --> 00:08:01,769
define your types and everything would

00:08:00,059 --> 00:08:03,659
work now it's nothing it's nothing

00:08:01,769 --> 00:08:04,229
related to typescript okay so I don't

00:08:03,659 --> 00:08:06,809
worry about that

00:08:04,229 --> 00:08:08,249
every different thing it's also self

00:08:06,809 --> 00:08:10,079
documenting which is for me the most

00:08:08,249 --> 00:08:12,329
critical the most nice feature of this

00:08:10,079 --> 00:08:14,429
and what it enables at create a mento of

00:08:12,329 --> 00:08:16,829
productivity so you can actually explore

00:08:14,429 --> 00:08:17,909
the API using some tools that which you

00:08:16,829 --> 00:08:19,949
will see if you're not familiar with

00:08:17,909 --> 00:08:23,129
them and it's actually very powerful

00:08:19,949 --> 00:08:24,749
because of this it's it shortened up the

00:08:23,129 --> 00:08:26,639
development cycle of not all I need to

00:08:24,749 --> 00:08:28,289
think about these rest api blah blah

00:08:26,639 --> 00:08:29,999
blah instead you can just add some more

00:08:28,289 --> 00:08:32,159
data term some more some more something

00:08:29,999 --> 00:08:35,250
more into the schema and just about the

00:08:32,159 --> 00:08:37,740
day it's if it has fewer run it provides

00:08:35,250 --> 00:08:39,180
fewer round trips so in a normal

00:08:37,740 --> 00:08:42,329
traditional rest application if you want

00:08:39,180 --> 00:08:45,630
to fetch three the data for for your app

00:08:42,329 --> 00:08:46,920
needs to do three holes or over HTTP

00:08:45,630 --> 00:08:48,870
instead of doing trick holes you can

00:08:46,920 --> 00:08:50,639
just hit your graph you out and point

00:08:48,870 --> 00:08:52,439
all the ones asking for all the tree

00:08:50,639 --> 00:08:54,329
three pieces of data and will

00:08:52,439 --> 00:08:56,670
automatically bring it back to you which

00:08:54,329 --> 00:08:59,130
is really powerful to provide a better

00:08:56,670 --> 00:09:03,329
performance on the on the front end of

00:08:59,130 --> 00:09:04,709
your system and it also provides a

00:09:03,329 --> 00:09:05,670
little bit smaller payloads because of

00:09:04,709 --> 00:09:08,940
all of this

00:09:05,670 --> 00:09:11,490
so what is a graph QL hooks graph QL

00:09:08,940 --> 00:09:14,190
hooks are it's a library that we have

00:09:11,490 --> 00:09:18,209
written an ear for to provide a smaller

00:09:14,190 --> 00:09:21,300
version a smaller a minimal way of using

00:09:18,209 --> 00:09:23,550
graph QL with with hooks with react

00:09:21,300 --> 00:09:26,160
talks and it's you know you probably use

00:09:23,550 --> 00:09:27,959
familiar with the Polo Apple is kind of

00:09:26,160 --> 00:09:29,790
big compared to what what you are aiming

00:09:27,959 --> 00:09:32,149
to do with real with graphical hooks

00:09:29,790 --> 00:09:35,279
this is tiny and it was really well and

00:09:32,149 --> 00:09:37,230
it's it's really lightweight it's a few

00:09:35,279 --> 00:09:42,510
kilobytes to add to your to your bundle

00:09:37,230 --> 00:09:46,350
compared to to a poll so right let's

00:09:42,510 --> 00:09:48,750
clone the first URL the second URL is

00:09:46,350 --> 00:09:50,390
just to for your interest it's the

00:09:48,750 --> 00:09:52,860
library that we're going to be using

00:09:50,390 --> 00:09:54,690
we'll keep this up until everyone's got

00:09:52,860 --> 00:09:57,690
that clone because we can't really

00:09:54,690 --> 00:09:59,370
proceed until you've done that Nene a

00:09:57,690 --> 00:10:00,600
picture all tribes I guess what people

00:09:59,370 --> 00:10:02,339
are cloning if anyone has any questions

00:10:00,600 --> 00:10:03,240
they want to shout out on a discussion

00:10:02,339 --> 00:10:05,730
while that's happening

00:10:03,240 --> 00:10:08,570
feel free or if not we can just sit here

00:10:05,730 --> 00:10:08,570
in awkward silence Hey

00:10:09,589 --> 00:10:15,589
yes yeah there it's good it's a good is

00:10:14,329 --> 00:10:17,389
actually what I wanted to see him react

00:10:15,589 --> 00:10:19,129
in the first place yes like years ago

00:10:17,389 --> 00:10:22,029
but I'm glad that they actually went to

00:10:19,129 --> 00:10:22,029
that place in the end

00:10:22,450 --> 00:10:27,580
no only with function components

00:10:27,730 --> 00:10:31,970
well it's that's that's how they've I

00:10:30,920 --> 00:10:36,640
think they're trying to move people

00:10:31,970 --> 00:10:36,640
towards that by by making that call

00:10:42,549 --> 00:10:48,769
it was yeah it was yes because es6

00:10:46,579 --> 00:10:51,049
classes were introduced so they followed

00:10:48,769 --> 00:10:53,509
that trend of es6 classes and then they

00:10:51,049 --> 00:10:57,319
another come back to the original kind

00:10:53,509 --> 00:10:58,549
of simple idea which is great like we

00:10:57,319 --> 00:10:59,869
have a problem in this industry where

00:10:58,549 --> 00:11:01,879
people had complexity for the sake of

00:10:59,869 --> 00:11:06,379
adding complexity because they think it

00:11:01,879 --> 00:11:08,149
makes them look good this is recorded a

00:11:06,379 --> 00:11:11,079
- I don't care

00:11:08,149 --> 00:11:13,429
I mean to me I think like if you know

00:11:11,079 --> 00:11:14,749
what makes people look good to me is

00:11:13,429 --> 00:11:17,029
when they found an elegant and simple

00:11:14,749 --> 00:11:18,499
solution to something and we actually I

00:11:17,029 --> 00:11:21,529
do actually really like rap looks for

00:11:18,499 --> 00:11:24,619
that have you cloned this okay have

00:11:21,529 --> 00:11:26,580
anybody had any problems cloning okay

00:11:24,619 --> 00:11:30,210
fine

00:11:26,580 --> 00:11:32,870
this is the same thing yep so first part

00:11:30,210 --> 00:11:32,870
one great

00:11:35,440 --> 00:11:39,500
yes they are fully interoperable so you

00:11:37,850 --> 00:11:42,230
can use a class component in sidewalks

00:11:39,500 --> 00:11:43,730
and vice versa right yes yes but you

00:11:42,230 --> 00:11:46,040
can't use hooks inside of a class

00:11:43,730 --> 00:11:47,510
component so with so say for instance

00:11:46,040 --> 00:11:50,830
the react talk

00:11:47,510 --> 00:11:53,690
use effect it's kind of analogous to the

00:11:50,830 --> 00:11:58,550
component did mount lifecycle method I

00:11:53,690 --> 00:12:01,730
think so there's there's analogs so

00:11:58,550 --> 00:12:03,380
first of all the goals of the first step

00:12:01,730 --> 00:12:05,720
is get a graphical server up and running

00:12:03,380 --> 00:12:08,450
and explored that server using graphic

00:12:05,720 --> 00:12:10,010
graph iql graphical graphical yeah

00:12:08,450 --> 00:12:12,050
graphical so what you're going to use

00:12:10,010 --> 00:12:14,240
you're gonna choose no js' okay it's no

00:12:12,050 --> 00:12:15,920
process interactive so maybe it's wrong

00:12:14,240 --> 00:12:18,470
you have the wrong conference if you

00:12:15,920 --> 00:12:19,310
want to use another language we're going

00:12:18,470 --> 00:12:21,800
to use FASTA Phi

00:12:19,310 --> 00:12:25,040
hey I'm Matteo I kind of started fast if

00:12:21,800 --> 00:12:27,620
I with Thomas like back in 2016 so it's

00:12:25,040 --> 00:12:30,110
a long time ago I had some ideas you had

00:12:27,620 --> 00:12:31,850
some idea they didn't see me anywhere

00:12:30,110 --> 00:12:33,740
near it but I was probably it was part

00:12:31,850 --> 00:12:35,930
of it of the original ideas about all of

00:12:33,740 --> 00:12:38,180
this please check it out it's smarter

00:12:35,930 --> 00:12:39,980
open say yes Foundation and so on so you

00:12:38,180 --> 00:12:42,200
know trade-off and we're going to use

00:12:39,980 --> 00:12:44,240
react okay yeah it's rare tubes so I

00:12:42,200 --> 00:12:47,030
don't have to react and we're gonna do

00:12:44,240 --> 00:12:48,170
some graphical stuff so you can check

00:12:47,030 --> 00:12:51,440
yourself the first thing you do you're

00:12:48,170 --> 00:12:55,430
going to the exercise folder part one l

00:12:51,440 --> 00:12:57,080
word run npm install and ran ran and PM

00:12:55,430 --> 00:12:58,310
run watch yeah so that you know it

00:12:57,080 --> 00:13:00,290
automatically restart when you make

00:12:58,310 --> 00:13:01,790
changes so you don't need to you know

00:13:00,290 --> 00:13:03,560
restart the process manually this is

00:13:01,790 --> 00:13:05,510
also gonna take a little little time to

00:13:03,560 --> 00:13:09,500
do because MPM install it's a little bit

00:13:05,510 --> 00:13:12,350
slow because of the Wi-Fi and so on so

00:13:09,500 --> 00:13:16,580
and then you want to go to local Oz mm

00:13:12,350 --> 00:13:20,300
hmm come on in we got floor space floor

00:13:16,580 --> 00:13:21,530
space she's at me is there's a chair

00:13:20,300 --> 00:13:23,120
here in this chair here it's been almost

00:13:21,530 --> 00:13:25,130
a chair for their back or whatever

00:13:23,120 --> 00:13:29,270
there's a chair here check out here

00:13:25,130 --> 00:13:30,740
after your bad guys we want to take care

00:13:29,270 --> 00:13:35,100
of your house and just wash up you see

00:13:30,740 --> 00:13:40,949
anyone need some help with this

00:13:35,100 --> 00:13:43,350
oh good okay well that's uh oh no no

00:13:40,949 --> 00:13:44,940
wait they've got do it yeah yeah yeah do

00:13:43,350 --> 00:13:51,029
it do it give us a nod when you're done

00:13:44,940 --> 00:13:51,449
we'll check in in a second got an hour

00:13:51,029 --> 00:13:53,990
left

00:13:51,449 --> 00:13:53,990
oh yeah

00:13:57,010 --> 00:13:59,070
you

00:14:06,910 --> 00:14:10,600
I've already installed us

00:14:10,790 --> 00:14:15,960
so you should see

00:14:14,010 --> 00:14:17,850
that should be your end result after

00:14:15,960 --> 00:14:20,430
you've run npm run watch should have a

00:14:17,850 --> 00:14:22,190
server listening one two seven zero zero

00:14:20,430 --> 00:14:24,980
one three thousand and if you open that

00:14:22,190 --> 00:14:28,440
it will be this hello world thing and

00:14:24,980 --> 00:14:32,550
you can list users you're gonna add a

00:14:28,440 --> 00:14:33,810
user in add matteo if we refresh it it

00:14:32,550 --> 00:14:35,310
disappears and so what we're going to do

00:14:33,810 --> 00:14:38,130
is we're going to add that server-side

00:14:35,310 --> 00:14:40,310
state using graph URL with with react

00:14:38,130 --> 00:14:40,310
took

00:14:44,210 --> 00:14:47,170
hmm

00:14:49,520 --> 00:14:52,880
what you need

00:14:53,930 --> 00:14:59,149
okay it's not using

00:15:02,710 --> 00:15:06,130
did you given

00:15:06,570 --> 00:15:13,839
okay has everyone been able to load

00:15:10,860 --> 00:15:15,639
localhost 3000 and see yeah okay

00:15:13,839 --> 00:15:18,149
fantastic the beautiful HelloWorld

00:15:15,639 --> 00:15:22,420
application you see we have really good

00:15:18,149 --> 00:15:24,519
CSS developers you know so we just I'll

00:15:22,420 --> 00:15:28,899
we just choose not to do it happy

00:15:24,519 --> 00:15:31,810
we're minimalist okay so if you go to

00:15:28,899 --> 00:15:33,579
the list users page you can see as I

00:15:31,810 --> 00:15:36,190
just showed you you can add a name if

00:15:33,579 --> 00:15:38,579
you refresh it'll disappear because we

00:15:36,190 --> 00:15:44,649
haven't connected up graph QL dot dot

00:15:38,579 --> 00:15:47,320
yeah so everyone take a look at in the

00:15:44,649 --> 00:15:50,010
source server folder as a graphic you

00:15:47,320 --> 00:15:50,010
all that yes file

00:15:50,100 --> 00:15:53,670
I'll open as well

00:15:55,440 --> 00:16:00,270
by the way in the thing that you cloned

00:15:58,710 --> 00:16:03,510
probably want you in the repo that you

00:16:00,270 --> 00:16:05,040
cloned you also have this this

00:16:03,510 --> 00:16:08,630
index.html file so you can look at the

00:16:05,040 --> 00:16:08,630
slide there - on your machine

00:16:08,680 --> 00:16:11,520
so

00:16:12,070 --> 00:16:15,780
this graphic J's file

00:16:17,460 --> 00:16:22,440
we're requiring faster fire gql which is

00:16:20,670 --> 00:16:23,730
a module written by Matteo we'll go into

00:16:22,440 --> 00:16:28,080
details on that in a second don't get

00:16:23,730 --> 00:16:30,540
too excited we have just like a mocked

00:16:28,080 --> 00:16:32,520
data we don't we're not using a database

00:16:30,540 --> 00:16:34,830
of this would take too long but you get

00:16:32,520 --> 00:16:37,440
the idea this is a placeholder for you

00:16:34,830 --> 00:16:40,800
know data storage of an array of users

00:16:37,440 --> 00:16:43,470
we have two schemas which we gonna go

00:16:40,800 --> 00:16:45,540
into details of two types yeah - ty -

00:16:43,470 --> 00:16:48,090
key Metrotech yeah one schema sorry -

00:16:45,540 --> 00:16:51,840
graph QL types one called user one

00:16:48,090 --> 00:16:56,010
called Q query query has a user's key

00:16:51,840 --> 00:16:58,110
with an array of types of user so this

00:16:56,010 --> 00:17:01,890
is basically saying this is an array of

00:16:58,110 --> 00:17:08,120
objects with the names which are strings

00:17:01,890 --> 00:17:10,960
which is describing this here no

00:17:08,120 --> 00:17:14,240
and then we have resolvers which is

00:17:10,960 --> 00:17:17,030
basically the counterpart that you give

00:17:14,240 --> 00:17:20,360
to us to fight you all to say this is

00:17:17,030 --> 00:17:22,610
how we handle a particular type in the

00:17:20,360 --> 00:17:25,400
schema so we only have one defined for

00:17:22,610 --> 00:17:28,040
queried and it has a user's method which

00:17:25,400 --> 00:17:32,200
corresponds to this users key and we

00:17:28,040 --> 00:17:35,870
return the user list array from that and

00:17:32,200 --> 00:17:39,250
here we have the lip lock in the first

00:17:35,870 --> 00:17:42,130
fi plugging that registers phosphide gql

00:17:39,250 --> 00:17:46,310
with our schema where the resolvers and

00:17:42,130 --> 00:17:49,780
notably we set graph eql or graphical to

00:17:46,310 --> 00:17:49,780
true because

00:17:50,660 --> 00:17:56,660
if you still have your server running

00:17:52,340 --> 00:17:58,100
yes you can go to is a four slash

00:17:56,660 --> 00:18:01,940
graphic you all days you know

00:17:58,100 --> 00:18:07,860
so go to localhost 3000

00:18:01,940 --> 00:18:10,860
for / graphic UL the HTML

00:18:07,860 --> 00:18:12,809
yeah you missed the edge

00:18:10,860 --> 00:18:14,730
I miss the age you know I can I can

00:18:12,809 --> 00:18:19,380
always put in a typo in here all the

00:18:14,730 --> 00:18:22,470
time you know okay okay so now we have

00:18:19,380 --> 00:18:24,149
like wait you when you when you open

00:18:22,470 --> 00:18:27,330
your you are you won't see this query

00:18:24,149 --> 00:18:29,309
variables piece it'll be down here but

00:18:27,330 --> 00:18:33,690
your you might want to just pull the up

00:18:29,309 --> 00:18:35,610
for later you'll see why so one of the

00:18:33,690 --> 00:18:38,340
greatest thing about about about

00:18:35,610 --> 00:18:40,169
graphical is that you can actually you

00:18:38,340 --> 00:18:42,149
know what you can say you can open up

00:18:40,169 --> 00:18:44,460
this and then if you start typing you

00:18:42,149 --> 00:18:47,820
automated here out of completion and you

00:18:44,460 --> 00:18:52,110
can add in line docs to your you can you

00:18:47,820 --> 00:18:53,760
can add in line dogs to to your comments

00:18:52,110 --> 00:18:57,000
to it to your error solvers so you can

00:18:53,760 --> 00:18:59,460
basically said I want users okay and so

00:18:57,000 --> 00:19:01,260
and then you can actually say for

00:18:59,460 --> 00:19:03,299
example and then you can specify the

00:19:01,260 --> 00:19:05,549
property the properties that you want

00:19:03,299 --> 00:19:07,710
and you say name again and you close

00:19:05,549 --> 00:19:09,750
note that if you open dogs you will see

00:19:07,710 --> 00:19:11,159
the drop of the route types those are

00:19:09,750 --> 00:19:13,320
the ones that are attached to the query

00:19:11,159 --> 00:19:16,350
object so that you know it's you can

00:19:13,320 --> 00:19:18,750
actually explore this and search it and

00:19:16,350 --> 00:19:20,639
navigate it completely so a graphic

00:19:18,750 --> 00:19:23,330
graphic well graphical is fully sub the

00:19:20,639 --> 00:19:23,330
scrappy yes

00:19:26,620 --> 00:19:32,630
yes so if you open dogs you can actually

00:19:30,530 --> 00:19:34,580
say for example you say you see users

00:19:32,630 --> 00:19:40,130
then you can click on users I need to

00:19:34,580 --> 00:19:41,720
tell you the fields no you need to say

00:19:40,130 --> 00:19:42,200
the key part there is reducing the

00:19:41,720 --> 00:19:44,720
payloads

00:19:42,200 --> 00:19:49,160
so you want to long reload the data that

00:19:44,720 --> 00:19:50,810
are you that you need so you you know

00:19:49,160 --> 00:19:53,090
you want to know which fields you want

00:19:50,810 --> 00:19:54,410
so that because that's a key part of

00:19:53,090 --> 00:19:56,030
this so I don't want to return all the

00:19:54,410 --> 00:19:57,680
full object because my object of my

00:19:56,030 --> 00:20:00,050
serum database can have I don't know 100

00:19:57,680 --> 00:20:02,090
fields but if I can only ship five two

00:20:00,050 --> 00:20:04,970
or three of those fields you know I

00:20:02,090 --> 00:20:07,760
don't need to develop a version of map

00:20:04,970 --> 00:20:09,770
of the of my API for my mobile app that

00:20:07,760 --> 00:20:11,000
requires less fields I came back and

00:20:09,770 --> 00:20:13,040
just connect to the same graphical and

00:20:11,000 --> 00:20:15,550
point of the web app that needs more

00:20:13,040 --> 00:20:17,840
fields so it don't need to actually

00:20:15,550 --> 00:20:20,630
implement the same API twice for

00:20:17,840 --> 00:20:22,640
different clients so it is really

00:20:20,630 --> 00:20:24,500
powerful if if you think it like that

00:20:22,640 --> 00:20:26,420
especially it's a way for teams to

00:20:24,500 --> 00:20:28,040
communicate then you can press Enter

00:20:26,420 --> 00:20:30,110
you can press play and it automatically

00:20:28,040 --> 00:20:32,060
works which is pretty powerful because

00:20:30,110 --> 00:20:33,920
you can explore and develop your queries

00:20:32,060 --> 00:20:35,330
while using you using these these

00:20:33,920 --> 00:20:36,920
development environments that are

00:20:35,330 --> 00:20:39,440
already part of the graph care ecosystem

00:20:36,920 --> 00:20:41,030
and it's really really really really

00:20:39,440 --> 00:20:42,330
powerful at least for me from my point

00:20:41,030 --> 00:20:48,030
of view

00:20:42,330 --> 00:20:51,090
so we okay so one of the things of a

00:20:48,030 --> 00:20:53,670
fast if I left you out ggq out that you

00:20:51,090 --> 00:20:55,590
that we have developed is the is about

00:20:53,670 --> 00:20:58,770
performance so you might want to check

00:20:55,590 --> 00:21:01,560
this out if you're already using graph

00:20:58,770 --> 00:21:04,470
QL because first if I gql is actually

00:21:01,560 --> 00:21:05,880
fast and we have done a lot of distance

00:21:04,470 --> 00:21:08,520
the amount of research on out optimize

00:21:05,880 --> 00:21:10,710
graph QL we've done the last year at

00:21:08,520 --> 00:21:13,320
this conference mathias booth and myself

00:21:10,710 --> 00:21:14,940
did a talk called graph UL accelerated

00:21:13,320 --> 00:21:17,760
if you are interested you might want to

00:21:14,940 --> 00:21:19,920
check that out and it's a pretty goes

00:21:17,760 --> 00:21:21,510
into deep into why and how we have

00:21:19,920 --> 00:21:24,750
optimized it how we have optimize it

00:21:21,510 --> 00:21:26,670
graph you out this is the graph QL is

00:21:24,750 --> 00:21:29,730
actually a hard problem and because it's

00:21:26,670 --> 00:21:31,020
solving something that that if you

00:21:29,730 --> 00:21:33,000
design your API is really well in the

00:21:31,020 --> 00:21:34,530
first place and there they come from the

00:21:33,000 --> 00:21:36,480
client in the first place like you're

00:21:34,530 --> 00:21:39,240
you're driving it from like a UI

00:21:36,480 --> 00:21:40,800
perspective then you could theoretically

00:21:39,240 --> 00:21:42,990
try to design a system without graph QL

00:21:40,800 --> 00:21:45,000
graph ul comes into play when you need

00:21:42,990 --> 00:21:47,280
to aggregate a lot of AP is that you

00:21:45,000 --> 00:21:49,860
haven't had control over right and so

00:21:47,280 --> 00:21:52,230
but what it's doing is application joins

00:21:49,860 --> 00:21:54,090
yeah so an application join is obviously

00:21:52,230 --> 00:21:55,110
usually a very bad idea you want to do

00:21:54,090 --> 00:21:57,120
that in a database that's going to be

00:21:55,110 --> 00:21:58,620
more efficient so this is actually a

00:21:57,120 --> 00:22:00,300
hard problem in node because we're

00:21:58,620 --> 00:22:03,110
you're trading off a lot of different

00:22:00,300 --> 00:22:07,050
things so performance is very hard for

00:22:03,110 --> 00:22:09,240
for for this kind of thing so first why

00:22:07,050 --> 00:22:11,190
gql is like pretty amazing but the one

00:22:09,240 --> 00:22:13,470
thing it doesn't have yet mateo

00:22:11,190 --> 00:22:15,570
federated Federation yeah Federation so

00:22:13,470 --> 00:22:17,340
if you're in a Palo you can have you can

00:22:15,570 --> 00:22:19,940
you can distribute your graph you old

00:22:17,340 --> 00:22:22,740
schemas across basically an organization

00:22:19,940 --> 00:22:25,890
first for gqr needs that if you want to

00:22:22,740 --> 00:22:28,380
see that with performance you got a dr.

00:22:25,890 --> 00:22:30,379
hit him on on github so were you all

00:22:28,380 --> 00:22:32,820
able to run the query

00:22:30,379 --> 00:22:35,219
fantastic one more thing that first if

00:22:32,820 --> 00:22:38,580
Isaac ul does which is pretty amazing it

00:22:35,219 --> 00:22:41,459
does it compiles the queries the graph

00:22:38,580 --> 00:22:43,499
PL queries into JavaScript functions in

00:22:41,459 --> 00:22:45,389
a safe way so what it does is

00:22:43,499 --> 00:22:47,369
essentially just you know take your

00:22:45,389 --> 00:22:49,639
graphical and click validate it and then

00:22:47,369 --> 00:22:52,019
compiling down to a really fast

00:22:49,639 --> 00:22:54,509
JavaScript function that then it's

00:22:52,019 --> 00:22:56,669
evaluated and executed and we cast that

00:22:54,509 --> 00:22:59,489
function so because of that we can save

00:22:56,669 --> 00:23:02,789
a lot of the time a lot of time that is

00:22:59,489 --> 00:23:04,349
spent in to validating the query caching

00:23:02,789 --> 00:23:07,700
the query a validating the query and

00:23:04,349 --> 00:23:07,700
compiling the period

00:23:08,850 --> 00:23:14,679
yes and no so it's to some extent it's a

00:23:12,610 --> 00:23:17,559
similar but the problem is that

00:23:14,679 --> 00:23:18,970
persistent queries do not do that on the

00:23:17,559 --> 00:23:20,380
other so that the implementation of

00:23:18,970 --> 00:23:22,299
persistent we did not do that all of

00:23:20,380 --> 00:23:24,700
this is done at run time so essentially

00:23:22,299 --> 00:23:26,289
is cached within the same process so it

00:23:24,700 --> 00:23:27,909
is slightly different technique it's the

00:23:26,289 --> 00:23:29,529
same kind of constant but a different

00:23:27,909 --> 00:23:33,760
technique so if your service service

00:23:29,529 --> 00:23:35,049
still running run this query and see

00:23:33,760 --> 00:23:40,690
that you get the result just make sure

00:23:35,049 --> 00:23:43,409
that everyone's working as if it's

00:23:40,690 --> 00:23:43,409
working for you

00:23:45,980 --> 00:23:53,220
if we run ourselves yes

00:23:49,740 --> 00:23:55,470
yes we do okay so everyone who's run it

00:23:53,220 --> 00:24:00,480
have you seen this this output yeah yeah

00:23:55,470 --> 00:24:01,980
cool okay part two I think we're gonna

00:24:00,480 --> 00:24:05,850
make it to part three yeah

00:24:01,980 --> 00:24:08,549
so part two the graph QL schema we're

00:24:05,850 --> 00:24:09,809
gonna update the schema to create a user

00:24:08,549 --> 00:24:12,289
so we're not just going to query the

00:24:09,809 --> 00:24:14,039
users we're gonna start creating users

00:24:12,289 --> 00:24:16,890
and we're going to test it with

00:24:14,039 --> 00:24:22,130
graphical or graphic UL whatever so

00:24:16,890 --> 00:24:25,380
going to the second part to exercise so

00:24:22,130 --> 00:24:28,679
you have to run npm install again run

00:24:25,380 --> 00:24:31,669
npm run watch again same pattern and go

00:24:28,679 --> 00:24:31,669
to localhost 3000

00:24:32,870 --> 00:24:40,120
yes absolutely yeah stop the first one

00:24:36,470 --> 00:24:40,120
otherwise you'll have a port conflict

00:24:48,550 --> 00:24:50,610
you

00:25:16,520 --> 00:25:23,410
everyone got their yeah still waiting

00:25:28,180 --> 00:25:34,000
okay

00:25:30,670 --> 00:25:40,830
so let's take a look at the graph ql j s

00:25:34,000 --> 00:25:40,830
in part two source server so

00:25:46,360 --> 00:25:52,770
how she really liked working with the

00:25:48,610 --> 00:25:52,770
font this big so much nicer on the eyes

00:25:53,380 --> 00:25:59,350
so in the graph guess in part two we

00:25:57,220 --> 00:26:02,170
still have the user list we've got some

00:25:59,350 --> 00:26:04,450
to-do items everything else I think is

00:26:02,170 --> 00:26:08,620
the same so we're going to start editing

00:26:04,450 --> 00:26:10,000
this file and on the to do list you say

00:26:08,620 --> 00:26:11,679
we're going to add a mutation type to

00:26:10,000 --> 00:26:14,049
schema we're going to add a create using

00:26:11,679 --> 00:26:16,750
mutation we're going to take a prep

00:26:14,049 --> 00:26:21,760
named parameter and we're going to

00:26:16,750 --> 00:26:24,130
return a user type from schema so let's

00:26:21,760 --> 00:26:26,290
do that so graph your schema defines the

00:26:24,130 --> 00:26:28,270
relationships and the structures of the

00:26:26,290 --> 00:26:31,980
data nothing to really elaborate on

00:26:28,270 --> 00:26:35,049
there is a so one of the key things off

00:26:31,980 --> 00:26:36,970
of the SQL is that you have this typed

00:26:35,049 --> 00:26:38,860
object that can return types are the

00:26:36,970 --> 00:26:42,490
types object and other types object

00:26:38,860 --> 00:26:44,799
another object it's and it defines the

00:26:42,490 --> 00:26:46,690
relationship between things let's say

00:26:44,799 --> 00:26:50,350
that you have a dog that you have a type

00:26:46,690 --> 00:26:55,450
dog and the type person you can say you

00:26:50,350 --> 00:26:59,650
can create a property on the type person

00:26:55,450 --> 00:27:01,840
that says da it dogs and that returns

00:26:59,650 --> 00:27:04,240
the dogs for that person now these will

00:27:01,840 --> 00:27:07,690
colors different resolvers so what you

00:27:04,240 --> 00:27:10,900
can do is you can structure your code

00:27:07,690 --> 00:27:13,419
into in a way so that all this all these

00:27:10,900 --> 00:27:15,010
various concerns are separated and it

00:27:13,419 --> 00:27:16,419
actually works pretty well because you

00:27:15,010 --> 00:27:18,250
can actually think about different

00:27:16,419 --> 00:27:20,350
features on your application and

00:27:18,250 --> 00:27:23,290
implement them very quickly based of

00:27:20,350 --> 00:27:27,070
this because the what suppose well I

00:27:23,290 --> 00:27:28,600
Brown yeah maybe and so you know in the

00:27:27,070 --> 00:27:33,010
schema in our graphic world at JS file

00:27:28,600 --> 00:27:34,990
this is what it currently looks like the

00:27:33,010 --> 00:27:38,320
resolvers as we've explained are the

00:27:34,990 --> 00:27:44,830
functions that are the counterparts to

00:27:38,320 --> 00:27:47,860
the schema but the queries are fetching

00:27:44,830 --> 00:27:53,059
so we have this query in our schema but

00:27:47,860 --> 00:27:54,409
mutations are for writing so

00:27:53,059 --> 00:27:55,909
obviously some of you probably know this

00:27:54,409 --> 00:27:58,159
but we're just making sure that we lure

00:27:55,909 --> 00:28:01,490
all the same page as we get to the hooks

00:27:58,159 --> 00:28:04,039
part so to create user we're going to

00:28:01,490 --> 00:28:05,899
add a mutation to schema and we add to

00:28:04,039 --> 00:28:08,240
the counter part of it to the resolvers

00:28:05,899 --> 00:28:10,519
in our graph q GS so at the bottom of

00:28:08,240 --> 00:28:11,269
the schema if we add this in here type

00:28:10,519 --> 00:28:15,950
mutation

00:28:11,269 --> 00:28:19,070
create user name string with an

00:28:15,950 --> 00:28:21,440
exclamation point they call this a non

00:28:19,070 --> 00:28:23,870
nullable type okay otherwise known as

00:28:21,440 --> 00:28:25,580
require required it's an on that level

00:28:23,870 --> 00:28:29,289
we need to require what a weird way to

00:28:25,580 --> 00:28:31,879
say required you know it's not inaudible

00:28:29,289 --> 00:28:36,080
which is required right I don't know

00:28:31,879 --> 00:28:38,649
it's I'm sorry depends if you are a

00:28:36,080 --> 00:28:41,149
positive person or an really negative

00:28:38,649 --> 00:28:43,009
you see here you can see negative logic

00:28:41,149 --> 00:28:47,320
or positive logic I don't know it

00:28:43,009 --> 00:28:47,320
depends on how you write your sentences

00:28:48,940 --> 00:28:52,930
has everyone been able to add to this

00:28:50,770 --> 00:28:56,760
yet still some people working on it I

00:28:52,930 --> 00:28:56,760
hear a couple of Keys clicking away so

00:29:05,330 --> 00:29:08,080
he

00:29:09,500 --> 00:29:13,880
you need to put them into the model that

00:29:12,200 --> 00:29:16,030
is top-level notation but I would put

00:29:13,880 --> 00:29:16,030
them

00:29:17,310 --> 00:29:22,530
yes

00:29:19,890 --> 00:29:23,670
these are top level things but here now

00:29:22,530 --> 00:29:25,920
you can make things a little bit more

00:29:23,670 --> 00:29:29,010
complicated with the nesting and objects

00:29:25,920 --> 00:29:31,530
but you need to have a top level entry

00:29:29,010 --> 00:29:33,240
point so the only top level entry points

00:29:31,530 --> 00:29:36,210
that your application can use our query

00:29:33,240 --> 00:29:42,860
and mutation so the rest is known top

00:29:36,210 --> 00:29:42,860
level so no but I could

00:29:44,200 --> 00:29:51,399
cool everyone good everyone got this

00:29:47,139 --> 00:29:53,619
into their schema now we're going to do

00:29:51,399 --> 00:29:55,409
the resolver so in the resolvers object

00:29:53,619 --> 00:30:00,070
we need to add a mutation key capital m

00:29:55,409 --> 00:30:02,320
and then that key holds an object which

00:30:00,070 --> 00:30:04,690
has a method called create user

00:30:02,320 --> 00:30:06,879
oh shoot a frog to look into what's the

00:30:04,690 --> 00:30:08,109
underscore for is the current object so

00:30:06,879 --> 00:30:10,960
it's a mutation of it don't work all

00:30:08,109 --> 00:30:14,649
right so the mutation this is your

00:30:10,960 --> 00:30:16,029
design no it's not myself oh yeah so one

00:30:14,649 --> 00:30:18,129
of the key things about graphical is

00:30:16,029 --> 00:30:20,019
that you can always return the current

00:30:18,129 --> 00:30:22,749
object so if you're actually create

00:30:20,019 --> 00:30:25,210
query or mutating something in a big

00:30:22,749 --> 00:30:28,299
tree you can always refer to the parent

00:30:25,210 --> 00:30:30,309
object on that on that chain and that is

00:30:28,299 --> 00:30:31,809
that underscore but even that mutation

00:30:30,309 --> 00:30:33,970
is the root object we don't need it so

00:30:31,809 --> 00:30:35,529
we call it underscore forget it's a

00:30:33,970 --> 00:30:37,389
little bit functional style putting it

00:30:35,529 --> 00:30:38,499
as underscore so I don't know if you're

00:30:37,389 --> 00:30:39,970
familiar with one of those functional

00:30:38,499 --> 00:30:41,080
language we put underscore when you

00:30:39,970 --> 00:30:44,249
don't need that basically means I don't

00:30:41,080 --> 00:30:44,249
care about this parameter right

00:30:46,450 --> 00:30:52,130
well you would use the object in yeah so

00:30:49,700 --> 00:30:54,350
you typically you use those objects a

00:30:52,130 --> 00:30:57,320
lot when you query so if you're feeling

00:30:54,350 --> 00:30:59,120
a big graph structure you can you want

00:30:57,320 --> 00:31:01,970
to know for example which you know if

00:30:59,120 --> 00:31:03,290
you have a person that has a dog you

00:31:01,970 --> 00:31:04,790
want to know when you're called you

00:31:03,290 --> 00:31:06,740
writing there are older dog you want to

00:31:04,790 --> 00:31:08,360
know which person you are asking the dog

00:31:06,740 --> 00:31:12,200
for and that data will be in that

00:31:08,360 --> 00:31:14,030
parameter make sense okay so in the

00:31:12,200 --> 00:31:17,060
mutation resolver we're just pushing to

00:31:14,030 --> 00:31:21,140
the user list obviously this is just for

00:31:17,060 --> 00:31:22,640
the purposes of of learning because you

00:31:21,140 --> 00:31:26,810
don't want stateful services you want to

00:31:22,640 --> 00:31:28,460
push the database right everyone good

00:31:26,810 --> 00:31:32,300
okay so we're going to test that

00:31:28,460 --> 00:31:33,980
mutation in graphi cool so if you still

00:31:32,300 --> 00:31:35,270
got your server running go or if you

00:31:33,980 --> 00:31:38,150
haven't you to start it with NPM run

00:31:35,270 --> 00:31:41,720
watch logos 3000 forward slash graphic

00:31:38,150 --> 00:31:43,760
you are that HTML and make sure remember

00:31:41,720 --> 00:31:45,380
I said like that little hidden almost

00:31:43,760 --> 00:31:46,670
hidden panel where it's like your

00:31:45,380 --> 00:31:47,750
variables make sure you've got that

00:31:46,670 --> 00:31:50,690
ready because we're going to use that in

00:31:47,750 --> 00:31:56,420
a second now has everyone been able to

00:31:50,690 --> 00:31:57,680
load the graphical graphical UI for part

00:31:56,420 --> 00:31:59,990
00:31:57,680 --> 00:32:02,810
okay I'm seeing yes as I'm not seeing

00:31:59,990 --> 00:32:04,430
nose so we shall proceed we might want

00:32:02,810 --> 00:32:06,740
to test it first

00:32:04,430 --> 00:32:07,940
oh yeah oh yeah sure you're right yeah

00:32:06,740 --> 00:32:10,520
this is it

00:32:07,940 --> 00:32:11,720
so we're going to you can book by the

00:32:10,520 --> 00:32:15,740
way and gets off the slides if you don't

00:32:11,720 --> 00:32:17,990
want a hand type it so now you need to

00:32:15,740 --> 00:32:23,270
run the picture move we're not right now

00:32:17,990 --> 00:32:27,790
oh I'm sure you keep killing I don't

00:32:23,270 --> 00:32:27,790
know why muscle memory yeah I know

00:32:31,250 --> 00:32:38,820
it's already

00:32:34,830 --> 00:32:42,169
refresh yep so first we need to put this

00:32:38,820 --> 00:32:42,169
in no not that

00:32:43,860 --> 00:32:47,670
yeah the copy-paste on the slides is

00:32:46,350 --> 00:32:50,490
annoying because when you try to copy it

00:32:47,670 --> 00:32:52,260
goes to the next slide so we put that in

00:32:50,490 --> 00:32:55,080
there the query variables down here we

00:32:52,260 --> 00:32:58,340
also need to add and I'm just going to

00:32:55,080 --> 00:32:58,340
do it and you can kind of see it

00:33:00,039 --> 00:33:06,519
the query variables here because this is

00:33:03,399 --> 00:33:07,720
uh this is essentially a variable kind

00:33:06,519 --> 00:33:11,919
of a variable that you define in the

00:33:07,720 --> 00:33:16,389
schema and then the query variables are

00:33:11,919 --> 00:33:19,480
then passed to finish over the resolver

00:33:16,389 --> 00:33:21,549
and one of the key thing about using

00:33:19,480 --> 00:33:24,460
this type of this is using query

00:33:21,549 --> 00:33:26,139
variables it's because it's like I don't

00:33:24,460 --> 00:33:28,240
know sequel I will if you're familiar

00:33:26,139 --> 00:33:29,409
with sequel hopefully everybody you

00:33:28,240 --> 00:33:32,169
probably have seen like there is

00:33:29,409 --> 00:33:33,460
question marks when you put put that put

00:33:32,169 --> 00:33:35,230
the things down you don't concatenate a

00:33:33,460 --> 00:33:37,149
string for all sorts of problems like

00:33:35,230 --> 00:33:40,240
sequel injections and all whatever issue

00:33:37,149 --> 00:33:42,429
you can imagine query variables are the

00:33:40,240 --> 00:33:43,960
exact same thing so you use them when

00:33:42,429 --> 00:33:49,299
you specify parameters you don't

00:33:43,960 --> 00:33:52,659
concatenate that string into the make

00:33:49,299 --> 00:33:56,110
sense run it oh wait let's run it

00:33:52,659 --> 00:33:58,389
oh and probably I mean totally because

00:33:56,110 --> 00:33:59,769
we didn't do it right okay hold on hold

00:33:58,389 --> 00:34:01,539
on

00:33:59,769 --> 00:34:06,570
you have you go I'm gonna go to one I

00:34:01,539 --> 00:34:06,570
made earlier you see it's

00:34:08,820 --> 00:34:16,080
yeah unique refreshment it's not yeah

00:34:12,030 --> 00:34:17,190
but in to refresh yeah that's what you

00:34:16,080 --> 00:34:20,100
should see if you see the other thing

00:34:17,190 --> 00:34:21,870
you didn't do it right like me so then

00:34:20,100 --> 00:34:24,290
you can actually and then if you go back

00:34:21,870 --> 00:34:24,290
to the query

00:34:26,690 --> 00:34:29,910
then you can see the Bob's been added

00:34:28,830 --> 00:34:31,950
okay

00:34:29,910 --> 00:34:36,300
and I want a hair call Bob guest of

00:34:31,950 --> 00:34:38,310
honor oh no Bob come on no Roberts

00:34:36,300 --> 00:34:42,640
I guess that names fallen out of fashion

00:34:38,310 --> 00:34:48,490
then yeah I like the way

00:34:42,640 --> 00:34:51,250
Uncle Bob that sorry oh you are showing

00:34:48,490 --> 00:34:53,740
the data in euro to the resolver it's

00:34:51,250 --> 00:34:56,350
not there not there go to the slides

00:34:53,740 --> 00:34:58,690
okay yeah so if we go back through the

00:34:56,350 --> 00:35:01,450
slides for a second go back go back up

00:34:58,690 --> 00:35:03,460
at one Ford yeah you see it so we see is

00:35:01,450 --> 00:35:06,880
pushing it to the list user list as an

00:35:03,460 --> 00:35:08,440
array again just for learning purposes

00:35:06,880 --> 00:35:10,690
and we don't recommended and you just

00:35:08,440 --> 00:35:12,520
draw an array for your state and in your

00:35:10,690 --> 00:35:19,180
process but we just push it like that

00:35:12,520 --> 00:35:22,180
mutation resolver pools create user yes

00:35:19,180 --> 00:35:23,620
and for the purposes of this workshop

00:35:22,180 --> 00:35:27,190
one of the things that is interesting

00:35:23,620 --> 00:35:30,000
here is that if you use you both create

00:35:27,190 --> 00:35:32,350
users and users can be a sync function

00:35:30,000 --> 00:35:35,800
so you can use the async function and

00:35:32,350 --> 00:35:40,390
promises to write your result nice okay

00:35:35,800 --> 00:35:43,780
does it make sense we're nearly at the

00:35:40,390 --> 00:35:46,180
hook spot and we still have time so yeah

00:35:43,780 --> 00:35:50,560
yeah rushing for us through towards the

00:35:46,180 --> 00:35:54,510
goal so here okay here we are

00:35:50,560 --> 00:35:59,290
part three it's very hard to get to okay

00:35:54,510 --> 00:36:01,960
foundation laid so the goals of part

00:35:59,290 --> 00:36:04,360
three we wanted check out this graph QL

00:36:01,960 --> 00:36:05,830
hooks library see in action we want to

00:36:04,360 --> 00:36:08,410
hook up the backend data the front-end

00:36:05,830 --> 00:36:12,900
web page we want to retrieve a list of

00:36:08,410 --> 00:36:16,420
users from an API using a graphical hook

00:36:12,900 --> 00:36:17,920
so if you go into part 3 or you can

00:36:16,420 --> 00:36:19,600
continue if you got part 2 working you

00:36:17,920 --> 00:36:22,420
can continue working on that however you

00:36:19,600 --> 00:36:24,250
want to do it but anyone who wants to

00:36:22,420 --> 00:36:26,710
make sure that you know they're starting

00:36:24,250 --> 00:36:29,370
fresh go to part 3 ampere install and

00:36:26,710 --> 00:36:29,370
p.m. run watch

00:36:53,029 --> 00:36:55,089
you

00:37:04,630 --> 00:37:12,820
everyone there yeah okay the stores fast

00:37:09,490 --> 00:37:14,050
today in the same folder we're gonna you

00:37:12,820 --> 00:37:15,370
might need to open a new tab or you

00:37:14,050 --> 00:37:17,560
might need to control C and then run him

00:37:15,370 --> 00:37:19,480
Cam'ron watch again have your do it but

00:37:17,560 --> 00:37:21,130
we want to do NPM install graph QL hooks

00:37:19,480 --> 00:37:25,650
so we're gonna bring this graph your

00:37:21,130 --> 00:37:25,650
hooks librarian right now download it

00:37:26,750 --> 00:37:28,810
you

00:37:29,720 --> 00:37:34,800
the pushin if we push the new release

00:37:31,490 --> 00:37:39,170
out this morning oh that's a good time

00:37:34,800 --> 00:37:46,999
[Laughter]

00:37:39,170 --> 00:37:49,340
you know you deploy on Fridays right so

00:37:46,999 --> 00:37:51,620
if it doesn't work raise your hand

00:37:49,340 --> 00:37:55,310
they all raise their hand there we are

00:37:51,620 --> 00:37:57,140
going to play Ryan yeah I just want to

00:37:55,310 --> 00:37:59,030
by the way we're here opera I just want

00:37:57,140 --> 00:38:00,800
to shout out to Brian Mullen which is

00:37:59,030 --> 00:38:04,570
was the hi Brian hi Brian

00:38:00,800 --> 00:38:07,820
the original author of Garfield hooks so

00:38:04,570 --> 00:38:09,950
we have laces in shipped support for

00:38:07,820 --> 00:38:13,640
graphical subscriptions which is a long

00:38:09,950 --> 00:38:16,010
conversation topic for to support like

00:38:13,640 --> 00:38:17,990
like data both on graphical loops and

00:38:16,010 --> 00:38:23,450
fast if I take you out in the last month

00:38:17,990 --> 00:38:25,020
so pretty good a deterministic a few

00:38:23,450 --> 00:38:29,160
hooks

00:38:25,020 --> 00:38:32,310
okay so in a source client dress app -

00:38:29,160 --> 00:38:34,230
shell dot J s we want to import the

00:38:32,310 --> 00:38:38,300
graph your client from graphical hooks

00:38:34,230 --> 00:38:38,300
and then we need to set it up

00:38:39,070 --> 00:38:46,090
so internally all the graphical query

00:38:41,800 --> 00:38:49,530
goes to slash / D you could have made

00:38:46,090 --> 00:38:53,600
that the default yeah you maybe should

00:38:49,530 --> 00:38:56,719
so and

00:38:53,600 --> 00:38:56,719
[Music]

00:39:00,559 --> 00:39:10,160
great what have you done so we're going

00:39:06,289 --> 00:39:14,029
to was a client jazz app shell and we

00:39:10,160 --> 00:39:16,279
want to import the graph to our client

00:39:14,029 --> 00:39:18,499
and we want to instantiate the ref to

00:39:16,279 --> 00:39:22,959
our client and then we can probably

00:39:18,499 --> 00:39:22,959
remove important stand she ate

00:39:23,070 --> 00:39:29,300
good anchor point three and yeah so

00:39:26,520 --> 00:39:29,300
that's that to do done

00:39:41,090 --> 00:39:43,150
you

00:39:47,470 --> 00:39:51,150
yes

00:39:49,090 --> 00:39:51,150
you

00:39:51,670 --> 00:39:59,570
yeah so these are long topic yeah you

00:39:55,400 --> 00:40:01,849
know broad hello my the current waiting

00:39:59,570 --> 00:40:04,970
what where the industry is going most of

00:40:01,849 --> 00:40:08,560
time is using a JSON web tokens most of

00:40:04,970 --> 00:40:11,380
the that's what goes for possibly the

00:40:08,560 --> 00:40:13,640
one of the most white pride solution

00:40:11,380 --> 00:40:14,660
budget to keep it services tailored yes

00:40:13,640 --> 00:40:17,119
because you would like to keep your

00:40:14,660 --> 00:40:19,490
sources and the other that's a standard

00:40:17,119 --> 00:40:21,290
way to actually encode a token somewhere

00:40:19,490 --> 00:40:22,940
and then you need can store that token

00:40:21,290 --> 00:40:25,970
whatever you want or regenerate it

00:40:22,940 --> 00:40:28,220
refreshing it's really it's a we're very

00:40:25,970 --> 00:40:32,140
well done standard and I would just

00:40:28,220 --> 00:40:32,140
recommend to use that and not random

00:40:38,120 --> 00:40:41,510
okay everyone got that

00:40:42,100 --> 00:40:47,590
no frowns all the friends are upside

00:40:45,140 --> 00:40:47,590
okay

00:40:48,330 --> 00:40:57,869
the next part is in the same file we

00:40:50,910 --> 00:41:00,270
want to add that client into the we want

00:40:57,869 --> 00:41:01,859
to wrap a provider all right does anyone

00:41:00,270 --> 00:41:04,550
know how react providers work rec

00:41:01,859 --> 00:41:07,380
provider in context so react context is

00:41:04,550 --> 00:41:08,880
essentially a way to do sort of lateral

00:41:07,380 --> 00:41:10,500
state instead of having to pass

00:41:08,880 --> 00:41:12,660
properties all the way down through two

00:41:10,500 --> 00:41:14,760
components we can rapper a provider

00:41:12,660 --> 00:41:17,220
around a component and then we can

00:41:14,760 --> 00:41:20,040
access that that context from any

00:41:17,220 --> 00:41:21,950
component in that tree later on so it's

00:41:20,040 --> 00:41:24,599
kind of like a little bit of a trapdoor

00:41:21,950 --> 00:41:26,460
so called dependency injection depends

00:41:24,599 --> 00:41:28,890
on our dependency injection I don't know

00:41:26,460 --> 00:41:30,540
I'd get it you know a bit sort of

00:41:28,890 --> 00:41:32,880
narrative with it

00:41:30,540 --> 00:41:35,880
narration talk about it for like a and

00:41:32,880 --> 00:41:37,290
Danny yeah so what we'd like we we've

00:41:35,880 --> 00:41:39,450
got this here but actually you don't

00:41:37,290 --> 00:41:42,660
need to redo placate that you can just

00:41:39,450 --> 00:41:47,960
say I'm gonna add client context into my

00:41:42,660 --> 00:41:51,349
imports like this right

00:41:47,960 --> 00:41:56,410
and then we're going to wrap the client

00:41:51,349 --> 00:41:56,410
contacts provider around

00:41:58,520 --> 00:42:01,780
the app shell

00:42:02,200 --> 00:42:13,109
and then we say the value of that

00:42:05,710 --> 00:42:13,109
provider is client yes

00:42:13,390 --> 00:42:17,250
so if we get these all in

00:42:20,140 --> 00:42:24,850
so when we when you set the value of a

00:42:22,420 --> 00:42:26,920
provider you can hurt you can import

00:42:24,850 --> 00:42:29,890
that client context somewhere else and

00:42:26,920 --> 00:42:32,860
then you can say client context consumer

00:42:29,890 --> 00:42:36,870
wrap that around your component and then

00:42:32,860 --> 00:42:36,870
suddenly you have access to that client

00:42:37,510 --> 00:42:40,320
yes

00:42:43,749 --> 00:42:48,109
yes but this is this is this is now the

00:42:46,700 --> 00:42:51,339
graph QL Hookes library which is

00:42:48,109 --> 00:42:51,339
front-end yeah

00:42:52,760 --> 00:42:58,480
yeah we're pointing it out pacifier oh

00:42:55,040 --> 00:42:58,480
yeah partying at a fancy feature yeah

00:43:05,140 --> 00:43:13,490
trying maybe if we had our own context

00:43:10,869 --> 00:43:17,480
like our custom context for react we

00:43:13,490 --> 00:43:20,140
just wrap it up of this or we have to

00:43:17,480 --> 00:43:25,730
you can reputable

00:43:20,140 --> 00:43:27,650
battery right yeah it's if you want

00:43:25,730 --> 00:43:29,330
without them context you can just wrap

00:43:27,650 --> 00:43:30,500
that oh yeah you get a multiple contact

00:43:29,330 --> 00:43:32,570
you can have as many as you want there's

00:43:30,500 --> 00:43:34,130
also you instead of using client context

00:43:32,570 --> 00:43:35,990
consumer there's also a used context

00:43:34,130 --> 00:43:37,430
react hook so then you can just use a

00:43:35,990 --> 00:43:40,640
hook to get your context once you've

00:43:37,430 --> 00:43:45,980
wrapped it which is quite elegant as

00:43:40,640 --> 00:43:48,500
everyone got this part great now we're

00:43:45,980 --> 00:43:51,290
going to set up in source app pages list

00:43:48,500 --> 00:43:52,970
users Jes we're going to take those

00:43:51,290 --> 00:43:56,540
queries that we're playing with earlier

00:43:52,970 --> 00:44:00,680
in graphical and we're going to you know

00:43:56,540 --> 00:44:02,750
put them into that file as uppercase

00:44:00,680 --> 00:44:05,260
list users query and create users

00:44:02,750 --> 00:44:05,260
mutation

00:44:09,880 --> 00:44:20,170
source up pages source app pages list

00:44:15,670 --> 00:44:23,100
users so they go outside of the function

00:44:20,170 --> 00:44:23,100
right yeah

00:44:23,320 --> 00:44:27,740
so that's what that's what we're doing

00:44:25,190 --> 00:44:31,550
we're adding this to source app pages

00:44:27,740 --> 00:44:33,320
list users j/s adding these two queries

00:44:31,550 --> 00:44:43,490
that we were playing with earlier

00:44:33,320 --> 00:44:44,260
well one query one mutation and we're

00:44:43,490 --> 00:44:45,880
just about

00:44:44,260 --> 00:44:48,120
magical part where we actually use a

00:44:45,880 --> 00:44:48,120
hook

00:44:50,810 --> 00:44:57,210
wait I'm just coming we can't hear you

00:44:53,730 --> 00:44:59,370
from it I noticed that the schema has

00:44:57,210 --> 00:45:01,560
been duplicated right because we had you

00:44:59,370 --> 00:45:03,510
stop the schema and the server - yes yes

00:45:01,560 --> 00:45:09,150
will that always be the case do you have

00:45:03,510 --> 00:45:11,340
to duplicate it or do you like project

00:45:09,150 --> 00:45:13,100
and you can probably import it there is

00:45:11,340 --> 00:45:16,500
so this this is not the schema

00:45:13,100 --> 00:45:18,810
these are queries oh yeah there are

00:45:16,500 --> 00:45:20,160
types they're not type types are in the

00:45:18,810 --> 00:45:22,350
types are them the other side these

00:45:20,160 --> 00:45:24,060
specified the queries so this reason we

00:45:22,350 --> 00:45:25,650
use these queries in graphical earlier

00:45:24,060 --> 00:45:26,790
that's why you recognize them but

00:45:25,650 --> 00:45:30,740
they're not actually in the server sorry

00:45:26,790 --> 00:45:32,800
I miss I was incorrect there

00:45:30,740 --> 00:45:32,800
you

00:45:34,589 --> 00:45:40,230
you

00:45:36,610 --> 00:45:40,230
stole some typing so we're gonna

00:45:43,210 --> 00:45:49,160
we still have half an hour we can do

00:45:46,970 --> 00:45:52,340
more we can do part 4 we could we could

00:45:49,160 --> 00:45:59,960
start part 4 of these see it's part 7 7

00:45:52,340 --> 00:46:03,130
parts of this yeah we weren't worried

00:45:59,960 --> 00:46:03,130
about whether we had enough content

00:46:09,430 --> 00:46:14,090
okay I'm hearing a couple of keys still

00:46:12,349 --> 00:46:15,410
typing so it would sweat few more

00:46:14,090 --> 00:46:18,730
minutes

00:46:15,410 --> 00:46:18,730
a one two minutes

00:46:32,180 --> 00:46:34,240
you

00:46:41,930 --> 00:46:46,830
any questions

00:46:44,370 --> 00:46:51,390
you see no you're not almost not typing

00:46:46,830 --> 00:46:53,210
any more it's good okay it's good all

00:46:51,390 --> 00:46:56,700
right

00:46:53,210 --> 00:47:00,030
so also unless users yes we're gonna use

00:46:56,700 --> 00:47:04,680
the youths query hook from graph to out

00:47:00,030 --> 00:47:09,500
hooks so here we're importing it as my

00:47:04,680 --> 00:47:12,750
lovely assistant just helped to display

00:47:09,500 --> 00:47:16,920
and then with this this piece here needs

00:47:12,750 --> 00:47:19,470
to be inside the actual component

00:47:16,920 --> 00:47:24,000
because you can only use hooks inside of

00:47:19,470 --> 00:47:26,190
components else it doesn't work react

00:47:24,000 --> 00:47:27,480
we've complained badly yeah I mean

00:47:26,190 --> 00:47:29,280
there's there's very good reason for

00:47:27,480 --> 00:47:30,630
that because they actually use the fact

00:47:29,280 --> 00:47:33,090
that you've used it in the component to

00:47:30,630 --> 00:47:35,700
actually track the state so that's why

00:47:33,090 --> 00:47:38,460
you can't use it without so the use

00:47:35,700 --> 00:47:41,640
query hook returns an object with a data

00:47:38,460 --> 00:47:44,550
and a refetch key the data key is the

00:47:41,640 --> 00:47:48,660
the data that is fetched by the query

00:47:44,550 --> 00:47:50,850
and we do an assignment as we're

00:47:48,660 --> 00:47:53,550
destructuring that object we also assign

00:47:50,850 --> 00:47:57,510
a default value of an object with a

00:47:53,550 --> 00:47:59,850
user's key and an empty array so that we

00:47:57,510 --> 00:48:01,380
don't have issues where it means we can

00:47:59,850 --> 00:48:01,890
just map over an empty array later on

00:48:01,380 --> 00:48:08,190
right

00:48:01,890 --> 00:48:11,610
yes it's users type is users tied to our

00:48:08,190 --> 00:48:14,370
query which part yes the list users

00:48:11,610 --> 00:48:17,010
query yes yes called something else if

00:48:14,370 --> 00:48:19,290
we change the shape no so this is your

00:48:17,010 --> 00:48:20,910
content you have a Content area we just

00:48:19,290 --> 00:48:23,460
did here that's that caught that

00:48:20,910 --> 00:48:26,280
constant yeah okay so it's nothing

00:48:23,460 --> 00:48:28,260
lazily the types hmm no it because of

00:48:26,280 --> 00:48:30,240
the texting there you can call it Bob if

00:48:28,260 --> 00:48:33,900
you want to or fubar when we define

00:48:30,240 --> 00:48:37,020
their schema we had users as a property

00:48:33,900 --> 00:48:39,330
that was formally defined oh yes yes so

00:48:37,020 --> 00:48:43,260
that won't change no all this code is

00:48:39,330 --> 00:48:46,110
stable yes yes right the key try to keep

00:48:43,260 --> 00:48:49,320
evolving graph QL is I'm writing SQL

00:48:46,110 --> 00:48:52,800
applique based application is that you

00:48:49,320 --> 00:48:55,530
do not change things you just just add

00:48:52,800 --> 00:48:57,900
more properties more solvers more types

00:48:55,530 --> 00:49:00,599
you do not remove and

00:48:57,900 --> 00:49:02,849
in this way old clients can still work

00:49:00,599 --> 00:49:05,279
so for example if you write em on web

00:49:02,849 --> 00:49:08,400
mobile app you can actually have used

00:49:05,279 --> 00:49:09,479
different graphic well you can use the

00:49:08,400 --> 00:49:11,219
same queries but with different

00:49:09,479 --> 00:49:12,989
properties and then your multiple

00:49:11,219 --> 00:49:14,459
versions of that app being server at the

00:49:12,989 --> 00:49:17,069
same graphical and point even if you

00:49:14,459 --> 00:49:18,630
have more types and more queries to

00:49:17,069 --> 00:49:21,359
support new features so you don't need

00:49:18,630 --> 00:49:23,489
to it's an essential it shows one of the

00:49:21,359 --> 00:49:25,709
problems of REST API that you have those

00:49:23,489 --> 00:49:27,619
nice version numbers in those the REST

00:49:25,709 --> 00:49:30,569
API is I don't know if you love them but

00:49:27,619 --> 00:49:32,640
whatever I like them I like those

00:49:30,569 --> 00:49:35,219
version numbers okay so I put it into

00:49:32,640 --> 00:49:37,349
I'm in the right place let's use yeah so

00:49:35,219 --> 00:49:39,150
I put it into the list users AS VAL so

00:49:37,349 --> 00:49:41,640
we have import you squared from

00:49:39,150 --> 00:49:44,579
graphical hooks at the top and then

00:49:41,640 --> 00:49:47,279
within our exported list users function

00:49:44,579 --> 00:49:51,449
component we at the very top of that we

00:49:47,279 --> 00:49:53,609
have this cool to use query and as as

00:49:51,449 --> 00:49:59,579
we're just discussing we pass in the

00:49:53,609 --> 00:50:02,249
list users query constant into the use

00:49:59,579 --> 00:50:05,489
query hook and so what's going to happen

00:50:02,249 --> 00:50:07,499
is what we need to do some more set up

00:50:05,489 --> 00:50:10,019
but what what can happen then is that

00:50:07,499 --> 00:50:11,429
use query can asynchronously call the

00:50:10,019 --> 00:50:16,229
server as I was talking about earlier

00:50:11,429 --> 00:50:19,799
with the use API I concept concept the

00:50:16,229 --> 00:50:22,529
initial state will just be a data with

00:50:19,799 --> 00:50:25,019
an empty users array when that query

00:50:22,529 --> 00:50:27,150
resolves it can re render that list

00:50:25,019 --> 00:50:29,170
users component with that with that

00:50:27,150 --> 00:50:32,880
state

00:50:29,170 --> 00:50:37,110
Mayson so far has everyone got this down

00:50:32,880 --> 00:50:37,110
yeah cool

00:50:37,869 --> 00:50:45,109
so the data the use query returns a data

00:50:42,710 --> 00:50:47,119
key and that's the JSON that's passed

00:50:45,109 --> 00:50:50,480
Jason that's received from the API and a

00:50:47,119 --> 00:50:54,260
refetch function so you can trigger a

00:50:50,480 --> 00:50:58,519
refetch potentially with I guess a

00:50:54,260 --> 00:51:01,910
button yeah or maybe when you do an

00:50:58,519 --> 00:51:03,319
action so yeah if you want to if you

00:51:01,910 --> 00:51:06,950
change the data you might want to affect

00:51:03,319 --> 00:51:10,010
that so again in the same in the same

00:51:06,950 --> 00:51:15,049
file we're gonna be structure the the

00:51:10,010 --> 00:51:17,210
the use mutation hook from the graph

00:51:15,049 --> 00:51:18,680
your hooks library so we don't have to

00:51:17,210 --> 00:51:19,369
do as a separate import we can just do

00:51:18,680 --> 00:51:21,849
this

00:51:19,369 --> 00:51:21,849
this here

00:51:22,950 --> 00:51:30,480
you can remove line from three to six

00:51:25,670 --> 00:51:34,400
okay all right yeah I'm also gonna

00:51:30,480 --> 00:51:34,400
remove all this getting away yeah

00:51:36,280 --> 00:51:45,520
okay so if everyone got the use mutation

00:51:39,310 --> 00:51:48,970
hook imported and then we can use the

00:51:45,520 --> 00:51:50,140
user mutation hook it also inside our

00:51:48,970 --> 00:51:52,920
function component we'll put it

00:51:50,140 --> 00:51:57,090
underneath user query

00:51:52,920 --> 00:51:59,310
so use mutation returns an array where

00:51:57,090 --> 00:52:01,680
the first element of that array is the

00:51:59,310 --> 00:52:04,230
function that's used to call that

00:52:01,680 --> 00:52:05,520
mutation so we're calling it create user

00:52:04,230 --> 00:52:08,330
we can call it whatever we want when we

00:52:05,520 --> 00:52:08,330
do structure an array

00:52:09,510 --> 00:52:15,450
is everyone familiar with these

00:52:11,040 --> 00:52:18,359
structuring yeah pretty neat I like it

00:52:15,450 --> 00:52:21,950
just don't you like they just don't nest

00:52:18,359 --> 00:52:21,950
you destructuring because that's crazy

00:52:24,190 --> 00:52:29,609
don't do that keep it dislike go on a

00:52:27,849 --> 00:52:32,410
new line and D structure the next thing

00:52:29,609 --> 00:52:35,349
otherwise it gets a bit insane we're

00:52:32,410 --> 00:52:36,849
done a massive requested recently I'm

00:52:35,349 --> 00:52:38,650
not called to remove some very nasty

00:52:36,849 --> 00:52:40,590
restructuring that rebooting for some

00:52:38,650 --> 00:52:43,460
reason nice

00:52:40,590 --> 00:52:43,460
uh-huh

00:52:44,430 --> 00:52:52,650
right here so refetch is is aliased to

00:52:49,770 --> 00:52:54,360
refetch users with the fracturing yeah

00:52:52,650 --> 00:52:56,280
so when you do structure you can

00:52:54,360 --> 00:52:59,510
actually alias one key to another key

00:52:56,280 --> 00:52:59,510
using a colon

00:52:59,660 --> 00:53:03,620
right no we're not using it yet but it's

00:53:01,790 --> 00:53:06,410
right here that's the declaration of

00:53:03,620 --> 00:53:08,570
that minimum so the so use query returns

00:53:06,410 --> 00:53:11,830
an object with a refetch key court

00:53:08,570 --> 00:53:11,830
function yeah you got it

00:53:13,600 --> 00:53:21,200
okay yeah you can remove line 30

00:53:18,470 --> 00:53:24,109
13:30

00:53:21,200 --> 00:53:28,460
oh yeah now then yeah just keep the

00:53:24,109 --> 00:53:35,480
function but remove just er yeah yeah

00:53:28,460 --> 00:53:37,820
okay and now in create new user we want

00:53:35,480 --> 00:53:40,660
to turn that into an async function

00:53:37,820 --> 00:53:40,660
because currently it's not

00:53:40,980 --> 00:53:47,040
is everyone familiar with async/await

00:53:43,280 --> 00:53:48,510
yeah do you like us you can wait okay

00:53:47,040 --> 00:53:54,870
have you watched well compromises talk

00:53:48,510 --> 00:53:59,280
with Apes now here's not fun is your

00:53:54,870 --> 00:53:59,880
mind still all intact oh yeah this is

00:53:59,280 --> 00:54:02,330
yeah

00:53:59,880 --> 00:54:06,210
it requires thought this is the problem

00:54:02,330 --> 00:54:08,310
with like easy to learn hard to master

00:54:06,210 --> 00:54:13,290
it's pretty much the motto of JavaScript

00:54:08,310 --> 00:54:15,150
and it's still going with async/await so

00:54:13,290 --> 00:54:16,650
we got this remember we got this create

00:54:15,150 --> 00:54:18,240
user function that we've destructured

00:54:16,650 --> 00:54:20,820
from the first element of the user

00:54:18,240 --> 00:54:23,900
mutation hook we're now gonna use that

00:54:20,820 --> 00:54:28,350
it returns a promise so we can await the

00:54:23,900 --> 00:54:30,900
results of that in our create a new user

00:54:28,350 --> 00:54:34,110
function right here which is in turn

00:54:30,900 --> 00:54:37,380
used in this onclick handler so we await

00:54:34,110 --> 00:54:39,480
the create new user function passing

00:54:37,380 --> 00:54:42,830
variables pass in name which we're

00:54:39,480 --> 00:54:45,200
getting from the use state hook here

00:54:42,830 --> 00:54:49,200
initially that's going to be set to

00:54:45,200 --> 00:54:52,170
nothing but we can set the name the name

00:54:49,200 --> 00:54:55,610
is set in the the info field here when

00:54:52,170 --> 00:54:58,650
you when you had name so this variables

00:54:55,610 --> 00:55:01,020
property that you that you prat passed

00:54:58,650 --> 00:55:03,000
to create user an object with the

00:55:01,020 --> 00:55:06,750
property variables is saying I want to

00:55:03,000 --> 00:55:11,000
set the variable of my mutation which is

00:55:06,750 --> 00:55:15,000
name right so that that gets passed in

00:55:11,000 --> 00:55:18,590
on me on the server side similar to how

00:55:15,000 --> 00:55:23,960
we did name Bob in the query variables

00:55:18,590 --> 00:55:23,960
panel that we had to lift up same thing

00:55:25,580 --> 00:55:27,730
RAAA

00:55:28,420 --> 00:55:34,240
oh and we also want to do Refik refresh

00:55:31,480 --> 00:55:36,940
users after we create a new user so then

00:55:34,240 --> 00:55:40,170
you've got like a an immediate update

00:55:36,940 --> 00:55:40,170
from adding that user

00:55:41,710 --> 00:55:44,710
yeah

00:55:48,950 --> 00:55:55,140
he protects very well though so I'm not

00:55:52,920 --> 00:55:57,960
familiar that much with react but when

00:55:55,140 --> 00:56:00,150
you do set name want you updating the

00:55:57,960 --> 00:56:02,700
state which will trigger a rerender

00:56:00,150 --> 00:56:05,070
wheel in itself will redo the used query

00:56:02,700 --> 00:56:08,480
which will refresh the user's on its own

00:56:05,070 --> 00:56:08,480
so why you need to refresh again

00:56:09,800 --> 00:56:15,300
so it does not that refer you know that

00:56:13,350 --> 00:56:17,580
it's a memo the data is memorized

00:56:15,300 --> 00:56:19,920
automatically so we're not referring

00:56:17,580 --> 00:56:22,080
that you calling the graphical API and

00:56:19,920 --> 00:56:25,410
it's every time we are just calling it

00:56:22,080 --> 00:56:27,750
once and then cased cast data and when

00:56:25,410 --> 00:56:29,880
you call refresh you actually fetch get

00:56:27,750 --> 00:56:31,740
the data again otherwise you'd end up in

00:56:29,880 --> 00:56:33,180
continuous won't know because you're not

00:56:31,740 --> 00:56:38,850
calling set your own accounts that name

00:56:33,180 --> 00:56:42,110
in create a new user it's it's all

00:56:38,850 --> 00:56:42,110
maintaining in the local state switch

00:56:43,280 --> 00:56:51,550
these are good questions yes yeah so

00:56:49,099 --> 00:56:55,250
when is the types of flash from memory

00:56:51,550 --> 00:56:57,920
so if the if any data used do you that

00:56:55,250 --> 00:57:00,079
you will get with use query is stating

00:56:57,920 --> 00:57:01,940
memorized when is it flash from memory

00:57:00,079 --> 00:57:08,270
do you keep it in local storage memory

00:57:01,940 --> 00:57:11,030
or it's attached to the the component so

00:57:08,270 --> 00:57:12,859
it's not connected to okay to other

00:57:11,030 --> 00:57:16,430
stuff so it's basically when the

00:57:12,859 --> 00:57:19,910
component goes out of scope which is how

00:57:16,430 --> 00:57:21,619
hooks work at a call away if for

00:57:19,910 --> 00:57:23,839
whatever reason instead of doing the

00:57:21,619 --> 00:57:25,760
queries in in the components themselves

00:57:23,839 --> 00:57:27,290
you want it to do it let's say in one

00:57:25,760 --> 00:57:28,940
centralized spot on an app startup you

00:57:27,290 --> 00:57:30,980
just want to get everything like a big

00:57:28,940 --> 00:57:32,450
app state you would just need a compiler

00:57:30,980 --> 00:57:34,700
to do that you just taking the one

00:57:32,450 --> 00:57:36,380
combined you pass whatever do that yeah

00:57:34,700 --> 00:57:38,119
what about the reef fetches because

00:57:36,380 --> 00:57:40,099
let's say individual things need to know

00:57:38,119 --> 00:57:41,900
let's say I believe you could pass the

00:57:40,099 --> 00:57:46,720
refetch function down if you wanted to I

00:57:41,900 --> 00:57:46,720
see yeah yeah or is context

00:57:48,420 --> 00:57:55,430
okay good great questions guys loving it

00:57:55,519 --> 00:58:00,829
that name is the set state function

00:57:58,829 --> 00:58:03,779
which is just this is just a normal

00:58:00,829 --> 00:58:05,220
reactor called you state if you know

00:58:03,779 --> 00:58:08,400
about hooks you'll be familiar with you

00:58:05,220 --> 00:58:10,619
state it's kind of a core piece it

00:58:08,400 --> 00:58:12,839
returns an array with the the value of

00:58:10,619 --> 00:58:16,880
the state and then an updated function

00:58:12,839 --> 00:58:16,880
we call it set name because we can't

00:58:17,750 --> 00:58:22,670
oh gosh or apart for know we can try

00:58:20,840 --> 00:58:24,590
that today you want to ran that oh yeah

00:58:22,670 --> 00:58:26,210
right yeah you might want to ran eat I

00:58:24,590 --> 00:58:26,840
don't know alright okay okay so what we

00:58:26,210 --> 00:58:30,080
can do

00:58:26,840 --> 00:58:32,590
mmm run watch you made me wrong yeah it

00:58:30,080 --> 00:58:37,300
might be wrong about I need to fix it

00:58:32,590 --> 00:58:40,100
yay you go oh I didn't install it yeah

00:58:37,300 --> 00:58:42,730
do what I say not what I do apparently

00:58:40,100 --> 00:58:42,730
yeah

00:58:42,960 --> 00:58:49,069
no we also say the load we're using use

00:58:46,109 --> 00:58:49,069
query to load the good data

00:58:49,760 --> 00:58:53,960
oh yeah Dave you need to update the

00:58:51,710 --> 00:58:56,570
thing sorry sorry second what's

00:58:53,960 --> 00:58:59,180
happening you need to alright yeah you

00:58:56,570 --> 00:59:01,460
need to do data instead of users you

00:58:59,180 --> 00:59:02,660
need to put down no the accusers it's

00:59:01,460 --> 00:59:04,280
fine it's fine

00:59:02,660 --> 00:59:05,900
yeah but we need to disclose it no no

00:59:04,280 --> 00:59:07,430
Dave is fine because it's already put

00:59:05,900 --> 00:59:07,820
his users it's fine you don't need to do

00:59:07,430 --> 00:59:10,130
anything

00:59:07,820 --> 00:59:12,200
you should work no I won't just try it

00:59:10,130 --> 00:59:14,540
anyway because the users is here inside

00:59:12,200 --> 00:59:18,030
of data so yeah but yeah ok yes do we

00:59:14,540 --> 00:59:20,490
have to do constant users

00:59:18,030 --> 00:59:20,970
yeah but they think it was data yeah

00:59:20,490 --> 00:59:23,580
okay

00:59:20,970 --> 00:59:25,830
so if you add this line to line two

00:59:23,580 --> 00:59:28,109
underneath you can do Const D structure

00:59:25,830 --> 00:59:29,820
users from data because there's a user's

00:59:28,109 --> 00:59:33,420
array in there that you need to get rid

00:59:29,820 --> 00:59:36,359
of or and then that will be then mapped

00:59:33,420 --> 00:59:39,210
over in this you know L element so

00:59:36,359 --> 00:59:41,760
before we can progress let's try data

00:59:39,210 --> 00:59:43,800
structure yeah well it will work this

00:59:41,760 --> 00:59:46,250
will work okay I'm pretty confident

00:59:43,800 --> 00:59:46,250
it'll work

00:59:47,480 --> 00:59:52,480
staking my reputation on it cool

00:59:52,660 --> 01:00:01,500
no cool what open hey hey

00:59:56,100 --> 01:00:04,220
look at the look at the control

01:00:01,500 --> 01:00:04,220
what is there

01:00:05,400 --> 01:00:09,680
he is not banned incorrectly

01:00:10,010 --> 01:00:14,750
oh really

01:00:12,390 --> 01:00:19,030
yeah

01:00:14,750 --> 01:00:19,030
when in doubt remove node modules

01:00:19,840 --> 01:00:23,020
little package luck if you have that

01:00:21,760 --> 01:00:27,750
yeah

01:00:23,020 --> 01:00:27,750
package lock has caused us some issues

01:00:28,789 --> 01:00:35,520
hmm or shrink-wrapping

01:00:32,750 --> 01:00:38,539
at least shrink-wrap is kind of like an

01:00:35,520 --> 01:00:38,539
explicit opt-in

01:00:43,000 --> 01:00:45,060
you

01:00:47,420 --> 01:00:52,480
all right is this your update no it's

01:00:49,910 --> 01:00:52,480
funny

01:00:52,760 --> 01:00:55,839
hey I think

01:00:56,040 --> 01:01:00,059
is it working for somebody well you're a

01:00:59,640 --> 01:01:02,569
better

01:01:00,059 --> 01:01:02,569
rather than me

01:01:04,030 --> 01:01:14,349
that would be a good one thank you thank

01:01:08,839 --> 01:01:14,349
you pair programming

01:01:15,140 --> 01:01:20,910
mm so cray user

01:01:18,240 --> 01:01:23,730
Dave do myself yeah you gotta send it

01:01:20,910 --> 01:01:27,020
yeah refresh and it's still there okay

01:01:23,730 --> 01:01:29,930
so you should be able to do that

01:01:27,020 --> 01:01:31,880
we go unable to do it

01:01:29,930 --> 01:01:35,360
because we were naughty at or without

01:01:31,880 --> 01:01:39,820
help okay who needs help

01:01:35,360 --> 01:01:39,820
I might not be the best person but

01:01:44,180 --> 01:01:46,240
you

01:01:52,940 --> 01:01:58,150
oh you've not

01:01:54,520 --> 01:02:00,490
sorry go back no go back to use mutation

01:01:58,150 --> 01:02:02,230
that way where is it you just showed me

01:02:00,490 --> 01:02:04,690
it yeah

01:02:02,230 --> 01:02:08,070
you're not um you're not calling it you

01:02:04,690 --> 01:02:12,330
just say yeah you got a pass in the

01:02:08,070 --> 01:02:12,330
create users mutation

01:02:12,890 --> 01:02:15,670
yeah

01:02:16,220 --> 01:02:21,590
they're their users

01:02:18,750 --> 01:02:21,590
uh-huh

01:02:23,010 --> 01:02:29,270
where is the error sorry what line okay

01:02:27,210 --> 01:02:32,510
go to that lines right

01:02:29,270 --> 01:02:34,670
yeah that's it five four okay so it's

01:02:32,510 --> 01:02:37,700
where you're trying to do structure from

01:02:34,670 --> 01:02:40,450
you since the you that says user query

01:02:37,700 --> 01:02:40,450
not usually

01:02:40,470 --> 01:02:49,390
reasoning what tail out or not know

01:02:45,720 --> 01:02:52,120
anyone else or everyone else got this

01:02:49,390 --> 01:02:55,080
working nice

01:02:52,120 --> 01:02:55,080
over here

01:02:55,400 --> 01:02:57,460
you

01:02:58,110 --> 01:03:04,790
so you state one simple you call set

01:03:02,580 --> 01:03:04,790
name

01:03:05,010 --> 01:03:11,510
mutation the same thing Refik word so we

01:03:09,580 --> 01:03:15,460
called reefer

01:03:11,510 --> 01:03:15,460
yeah yeah yeah

01:03:16,530 --> 01:03:22,300
next one America let me see it yes now

01:03:20,530 --> 01:03:25,540
I'm man she's thoroughly not magic you

01:03:22,300 --> 01:03:27,810
know query any hooks are using prefix

01:03:25,540 --> 01:03:27,810
with news

01:03:30,859 --> 01:03:38,000
you can you can yes you can I don't but

01:03:35,670 --> 01:03:38,000
you can

01:03:40,790 --> 01:03:44,370
yeah sorry this is actually a good

01:03:42,990 --> 01:03:47,460
question so you might want to say it

01:03:44,370 --> 01:03:50,160
loud I was wondering if you could use

01:03:47,460 --> 01:03:52,770
typescript to help keep track of all the

01:03:50,160 --> 01:03:56,070
different schema consistencies that you

01:03:52,770 --> 01:03:58,020
need to create across this I think that

01:03:56,070 --> 01:04:00,090
depends if you if you if you bought into

01:03:58,020 --> 01:04:02,610
typescript then probably but if you've

01:04:00,090 --> 01:04:06,510
not then don't though news typescript to

01:04:02,610 --> 01:04:07,920
do this it's a I think there's just a

01:04:06,510 --> 01:04:09,960
completely different paradigm and

01:04:07,920 --> 01:04:11,190
there's an opt-in kind of things like

01:04:09,960 --> 01:04:12,690
you need the whole house to get the

01:04:11,190 --> 01:04:15,060
kitchen sink

01:04:12,690 --> 01:04:16,980
I like typescript for the DTS Wells

01:04:15,060 --> 01:04:20,280
because I think that has my value and

01:04:16,980 --> 01:04:22,380
like across all and I like typescript

01:04:20,280 --> 01:04:24,240
because it can process Jas doc so that's

01:04:22,380 --> 01:04:27,360
completely opt-in and you can apply at

01:04:24,240 --> 01:04:30,210
all to that at any time you want to be

01:04:27,360 --> 01:04:31,980
on that like I think it's valued you

01:04:30,210 --> 01:04:35,160
could use that in that way you could use

01:04:31,980 --> 01:04:37,380
J a stock with typescript to help you

01:04:35,160 --> 01:04:40,860
with any the graphical kind of typing

01:04:37,380 --> 01:04:44,220
trade-ins like that works but and I like

01:04:40,860 --> 01:04:46,230
that because it's totally opt-in but if

01:04:44,220 --> 01:04:47,880
you're using typescript then why not

01:04:46,230 --> 01:04:49,800
there's actually a library so recently

01:04:47,880 --> 01:04:52,440
there was a I think it's called like TS

01:04:49,800 --> 01:04:54,030
graph QL or graphical yes where someone

01:04:52,440 --> 01:04:56,400
has actually done a project where it's

01:04:54,030 --> 01:04:57,570
like a merging of those two things so

01:04:56,400 --> 01:05:00,170
might be worth checking out if you're

01:04:57,570 --> 01:05:00,170
into the live script

01:05:05,869 --> 01:05:12,570
yeah yeah yeah no again I think like if

01:05:10,380 --> 01:05:15,270
you follow Mateos advice of like never

01:05:12,570 --> 01:05:16,800
change your schemas then that's easy but

01:05:15,270 --> 01:05:18,810
if you ever want to change a schema like

01:05:16,800 --> 01:05:21,030
the more you kind of enforce those types

01:05:18,810 --> 01:05:24,810
the more places there are to change and

01:05:21,030 --> 01:05:26,010
the harder it gets and yeah my thing

01:05:24,810 --> 01:05:30,119
we'll graph you well as well as I said I

01:05:26,010 --> 01:05:32,790
wouldn't I wouldn't I would use it when

01:05:30,119 --> 01:05:35,190
I had no other choice because as soon as

01:05:32,790 --> 01:05:37,200
you start using it you have overhead so

01:05:35,190 --> 01:05:39,720
like when I'm green fielding I'd say

01:05:37,200 --> 01:05:42,060
don't do graph QL until you get to this

01:05:39,720 --> 01:05:43,710
place where you kind of think okay the

01:05:42,060 --> 01:05:45,830
complexity here is running a little bit

01:05:43,710 --> 01:05:49,109
control so now we need to use graph QL

01:05:45,830 --> 01:05:51,359
unless the project your green fielding

01:05:49,109 --> 01:05:52,980
is a back-end project where with no

01:05:51,359 --> 01:05:54,630
front end component that the

01:05:52,980 --> 01:05:56,640
organization is separated in such a way

01:05:54,630 --> 01:05:58,200
that the front-end team never wants to

01:05:56,640 --> 01:05:59,609
interact with the backend then there's

01:05:58,200 --> 01:06:02,850
no full stack say there might be a

01:05:59,609 --> 01:06:04,650
mobile T U and out in that case it makes

01:06:02,850 --> 01:06:06,330
sense new graphical front start because

01:06:04,650 --> 01:06:08,660
then they can always define exactly what

01:06:06,330 --> 01:06:08,660
they want

01:06:12,050 --> 01:06:15,650
can I bring you to work hmm yes of

01:06:15,150 --> 01:06:19,200
course

01:06:15,650 --> 01:06:23,010
yes of course come to the booths we can

01:06:19,200 --> 01:06:25,250
talk huh sorry say again when you say

01:06:23,010 --> 01:06:28,980
lady shaking on the server on the client

01:06:25,250 --> 01:06:45,990
is there anybody stuck they meet on the

01:06:28,980 --> 01:06:47,700
UI yes you could do that you could do

01:06:45,990 --> 01:06:51,270
that but we want to set the name because

01:06:47,700 --> 01:06:52,620
we want to display it as well yeah so we

01:06:51,270 --> 01:06:55,250
do it look we take an extra step but you

01:06:52,620 --> 01:06:55,250
could do that yes

01:06:57,050 --> 01:07:02,130
eight by five minutes anywhere any point

01:07:00,210 --> 01:07:07,050
been apart for no could introduce it now

01:07:02,130 --> 01:07:08,850
I would just go through do you think do

01:07:07,050 --> 01:07:15,359
you think okay so have you got any

01:07:08,850 --> 01:07:17,990
questions yeah yes just sitting there

01:07:15,359 --> 01:07:17,990
Weiss

01:07:21,380 --> 01:07:28,200
okay yeah the selfie is a local testing

01:07:26,520 --> 01:07:29,850
is there a wave like a pattern in place

01:07:28,200 --> 01:07:33,000
for making use query and use meet

01:07:29,850 --> 01:07:36,630
mutation return I would recommend to use

01:07:33,000 --> 01:07:40,440
test just mocked sound it is there is

01:07:36,630 --> 01:07:43,380
some some track some stuff on there on

01:07:40,440 --> 01:07:44,280
your wrong but it's yeah that's a react

01:07:43,380 --> 01:07:45,870
way of doing things

01:07:44,280 --> 01:07:48,240
I know man I just don't like it I know

01:07:45,870 --> 01:07:50,940
but I know you don't like it yeah yeah

01:07:48,240 --> 01:07:52,140
and I agree with you though if the right

01:07:50,940 --> 01:07:54,420
way that we actually of doing things

01:07:52,140 --> 01:07:56,160
just used as much but the reason is some

01:07:54,420 --> 01:07:59,660
more discussion about this in the readme

01:07:56,160 --> 01:07:59,660
asan and if not open an issue

01:08:01,450 --> 01:08:07,279
any other questions a couple more things

01:08:05,479 --> 01:08:08,150
that are interesting in this workshop so

01:08:07,279 --> 01:08:10,910
I'm going through them very quickly

01:08:08,150 --> 01:08:13,609
first of all it's you know to be some

01:08:10,910 --> 01:08:15,380
pagination how to implement pagination

01:08:13,609 --> 01:08:17,869
in this is a concept it needs to

01:08:15,380 --> 01:08:19,130
implement Avenue everywhere and you need

01:08:17,869 --> 01:08:21,949
to drink reinvent the wheel with a

01:08:19,130 --> 01:08:23,540
graphic you out to some extent so you

01:08:21,949 --> 01:08:26,089
know another way of doing pagination so

01:08:23,540 --> 01:08:28,069
please check it out I'm not going I'm

01:08:26,089 --> 01:08:29,630
going very quickly so I'm just yeah this

01:08:28,069 --> 01:08:32,929
is Joseph in case you want to continue

01:08:29,630 --> 01:08:35,779
in your own time and popov is crushing

01:08:32,929 --> 01:08:38,750
my five is caching again very important

01:08:35,779 --> 01:08:41,389
by piece unfortunately draft well it

01:08:38,750 --> 01:08:42,739
cites a poll or nice things about HTTP

01:08:41,389 --> 01:08:45,319
caching so you might want to do some

01:08:42,739 --> 01:08:48,859
different things for caching you know it

01:08:45,319 --> 01:08:50,659
hasn't died some side effect so I'm not

01:08:48,859 --> 01:08:54,859
going to go through that much but there

01:08:50,659 --> 01:08:56,179
is some some caching and so forth and if

01:08:54,859 --> 01:08:58,549
you want to go forward that is

01:08:56,179 --> 01:09:01,009
server-side rendering which is pretty

01:08:58,549 --> 01:09:02,480
important part if you're writing react

01:09:01,009 --> 01:09:03,889
applications five six I got a

01:09:02,480 --> 01:09:05,389
server-side rendering in general you

01:09:03,889 --> 01:09:07,250
know I don't want to enter the topic we

01:09:05,389 --> 01:09:09,139
don't have much time how much over three

01:09:07,250 --> 01:09:10,429
minutes don't server-side render as a

01:09:09,139 --> 01:09:13,969
default choice that's all I'm gonna say

01:09:10,429 --> 01:09:20,659
yeah if you want to know more why booth

01:09:13,969 --> 01:09:23,239
booth and there is another module called

01:09:20,659 --> 01:09:27,349
a graphical oops SSR that you can use to

01:09:23,239 --> 01:09:32,230
piece nice and yeah and blah blah blah

01:09:27,349 --> 01:09:32,230
and graphic looks are awesome

01:09:36,960 --> 01:09:41,830
so these were some people that were

01:09:40,359 --> 01:09:43,239
involved in helping prepare this because

01:09:41,830 --> 01:09:45,310
this was actually a cross cross team

01:09:43,239 --> 01:09:47,259
effort yes so this was done by a lot of

01:09:45,310 --> 01:09:50,380
people at near forum so if you want just

01:09:47,259 --> 01:09:53,650
reach out to all those guys that angers

01:09:50,380 --> 01:09:55,659
that hugged out over the course of of

01:09:53,650 --> 01:09:59,920
this year so it's a nice project that we

01:09:55,659 --> 01:10:02,080
started at the beginning of 20 of 2019

01:09:59,920 --> 01:10:04,480
so it's been growing and done pretty

01:10:02,080 --> 01:10:06,760
well so I feel free to free to throw any

01:10:04,480 --> 01:10:12,340
PRS or issues all that kind of stuff as

01:10:06,760 --> 01:10:13,630
usual hope you enjoyed it you closed a

01:10:12,340 --> 01:10:16,260
lot of it you have them on your machine

01:10:13,630 --> 01:10:19,030
already indexed dirty talk index.html

01:10:16,260 --> 01:10:20,620
that's open index dot HTML it doesn't

01:10:19,030 --> 01:10:25,570
use any crazy framework for doing slides

01:10:20,620 --> 01:10:27,310
just an HTML file you see as I say I

01:10:25,570 --> 01:10:29,170
think I'll show about our style but you

01:10:27,310 --> 01:10:32,239
know booth

01:10:29,170 --> 01:10:32,239

YouTube URL: https://www.youtube.com/watch?v=P2hovoVBZQM


