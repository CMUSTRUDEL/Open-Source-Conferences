Title: Throw Me a Lifebuoy: Debugging Node.js in Production with Diagnostic Reports - Christopher Hiller
Publication date: 2020-05-11
Playlist: Node + JS Interactive 2019
Description: 
	Throw Me a Lifebuoy: Debugging Node.js in Production with Diagnostic Reports - Christopher Hiller, IBM
Speakers: Christopher Hiller
Diagnostic Reports are a recent addition to Node.js core. This feature enables insight into Node.js processes running in production—without needing to attach a debugger—and the results can be interpreted offline. If you've ever had to debug issues in production with a customer, you know this can be a life-saver.

I’ll show you how to trigger report generation manually and automatically, then use the results to diagnose a problem process. While this is fine and dandy, manual diagnosis can be tedious, so I'll also demo a toolkit I've been working on. This toolkit can help automatically detect known issues, redact secrets from a report, and much more.
Captions: 
	00:00:00,060 --> 00:00:06,960
so this talk is about diagnostic reports

00:00:05,279 --> 00:00:08,610
and nodejs it's going to cover some of

00:00:06,960 --> 00:00:12,809
the material that gireesh covered

00:00:08,610 --> 00:00:16,379
yesterday but it's also going to talk a

00:00:12,809 --> 00:00:18,600
little bit about all I'm going to talk

00:00:16,379 --> 00:00:19,470
about giving you an introduction say a

00:00:18,600 --> 00:00:20,850
few things that you can do with

00:00:19,470 --> 00:00:23,310
diagnostic reports how to use them

00:00:20,850 --> 00:00:28,859
basics and I'm going to talk about some

00:00:23,310 --> 00:00:30,990
tooling and belt to help you use so my

00:00:28,859 --> 00:00:32,430
name is Chris Hillier I come from

00:00:30,990 --> 00:00:36,079
Portland Oregon

00:00:32,430 --> 00:00:42,180
I'm known as bone skull on the internet

00:00:36,079 --> 00:00:44,120
so I work for IBM primarily working on

00:00:42,180 --> 00:00:47,129
nodejs

00:00:44,120 --> 00:00:50,010
related things I'm a maintainer of MOCA

00:00:47,129 --> 00:00:52,590
which is a testing framework also

00:00:50,010 --> 00:00:54,300
involved as a maintainer of MOCA in the

00:00:52,590 --> 00:00:59,489
open J's Foundation cross-project

00:00:54,300 --> 00:01:01,859
Council and I am bone skull on get up

00:00:59,489 --> 00:01:03,270
and on Twitter if you have nothing

00:01:01,859 --> 00:01:08,130
better to do you can look at my tweets

00:01:03,270 --> 00:01:11,390
and that's bone skull with a zero so I

00:01:08,130 --> 00:01:13,560
want to start with with kind of some

00:01:11,390 --> 00:01:16,200
hypothetical problems so you have a

00:01:13,560 --> 00:01:20,310
hypothetical problem your process

00:01:16,200 --> 00:01:22,020
crashed so what happens in a process

00:01:20,310 --> 00:01:25,830
crash is if you're lucky you're going to

00:01:22,020 --> 00:01:28,979
get a spec trace somewhere unless things

00:01:25,830 --> 00:01:31,530
went really self but so you might get a

00:01:28,979 --> 00:01:32,750
stack trace and you've been you're a

00:01:31,530 --> 00:01:36,210
developer and you've been tasked with

00:01:32,750 --> 00:01:37,640
investigating the stack trace and trying

00:01:36,210 --> 00:01:39,780
to figure out what's going on so

00:01:37,640 --> 00:01:42,030
remember this is a this is a dead

00:01:39,780 --> 00:01:43,950
process maybe your stack raises in your

00:01:42,030 --> 00:01:46,619
logs and so you look at the stack trace

00:01:43,950 --> 00:01:49,799
that says oh well you're doing something

00:01:46,619 --> 00:01:51,720
weird and the stack trace points to to

00:01:49,799 --> 00:01:55,770
this code where you're you're saying

00:01:51,720 --> 00:01:58,890
like rinder and you want to delete a

00:01:55,770 --> 00:02:03,110
temp directory or something and you pass

00:01:58,890 --> 00:02:04,560
this flag and so the error that you get

00:02:03,110 --> 00:02:06,990
looks like this

00:02:04,560 --> 00:02:10,580
so error not empty directory not empty

00:02:06,990 --> 00:02:13,260
or under yadda yadda yadda not empty so

00:02:10,580 --> 00:02:14,360
okay why would this fail some of you may

00:02:13,260 --> 00:02:17,900
have an idea

00:02:14,360 --> 00:02:21,200
so you're you're passing a correct flag

00:02:17,900 --> 00:02:25,080
you're meticulous integration test pass

00:02:21,200 --> 00:02:30,870
works on your machine works in CI builds

00:02:25,080 --> 00:02:32,490
green but this happens so one way to

00:02:30,870 --> 00:02:35,820
help you figure out this problem is to

00:02:32,490 --> 00:02:37,980
use a diagnostic report and can you and

00:02:35,820 --> 00:02:41,430
see that anyway it says use a diagnostic

00:02:37,980 --> 00:02:43,440
report and so let me describe the

00:02:41,430 --> 00:02:46,860
diagnostic report and this is the gist

00:02:43,440 --> 00:02:50,280
it's a experimental module some

00:02:46,860 --> 00:02:52,800
functionality added it's in no.12 so

00:02:50,280 --> 00:02:56,280
this is in LTS you can use it but it is

00:02:52,800 --> 00:02:58,110
an experimental API so that means it's

00:02:56,280 --> 00:02:59,250
behind a flag you need to pass a flag to

00:02:58,110 --> 00:03:02,520
use it

00:02:59,250 --> 00:03:04,560
experimental if you're not familiar in

00:03:02,520 --> 00:03:09,540
the node sense that that essentially

00:03:04,560 --> 00:03:12,150
means the API or the the behavior could

00:03:09,540 --> 00:03:14,880
break outside of the normal major

00:03:12,150 --> 00:03:16,770
release cadence so if you do start using

00:03:14,880 --> 00:03:20,519
them please be aware that they could

00:03:16,770 --> 00:03:23,790
break that being said they do their job

00:03:20,519 --> 00:03:25,890
very well but that that API might change

00:03:23,790 --> 00:03:29,989
the output might change slightly you

00:03:25,890 --> 00:03:29,989
know before we hit the next next major

00:03:30,140 --> 00:03:35,549
so essentially what this is is it's a

00:03:33,299 --> 00:03:39,959
huge JSON dump reflecting the state of

00:03:35,549 --> 00:03:44,970
the process most of I seen of them I've

00:03:39,959 --> 00:03:46,799
seen work out to be two up 28 25k you

00:03:44,970 --> 00:03:48,510
can trigger it several looking ways

00:03:46,799 --> 00:03:49,620
including you can give it some command

00:03:48,510 --> 00:03:52,910
line flags you can create

00:03:49,620 --> 00:03:57,360
programmatically you can even tell it to

00:03:52,910 --> 00:04:01,530
dump a diagnostic report when you

00:03:57,360 --> 00:04:03,030
receive a user signal so how do we want

00:04:01,530 --> 00:04:05,430
to create a port in this case where

00:04:03,030 --> 00:04:07,620
we've got this process that's crashed so

00:04:05,430 --> 00:04:09,090
we're gonna we're gonna start up that

00:04:07,620 --> 00:04:13,110
process again except for any of these

00:04:09,090 --> 00:04:14,880
flags so experimental report you need

00:04:13,110 --> 00:04:17,400
that to do any of this stuff right now

00:04:14,880 --> 00:04:20,970
you're gonna see report uncut exception

00:04:17,400 --> 00:04:24,630
and then give it a nice file name you

00:04:20,970 --> 00:04:27,620
don't need to pass the the file name but

00:04:24,630 --> 00:04:31,050
in our case that will be helpful but

00:04:27,620 --> 00:04:34,200
normally it'll create this very long

00:04:31,050 --> 00:04:36,870
filename based on the time stamp so you

00:04:34,200 --> 00:04:38,520
run this in in your production and time

00:04:36,870 --> 00:04:40,590
time passes and now you have another

00:04:38,520 --> 00:04:42,660
problem so now you have a diagnostic

00:04:40,590 --> 00:04:44,130
report and it crashed and now you have a

00:04:42,660 --> 00:04:46,980
lot of JSON and so it looks kind of like

00:04:44,130 --> 00:04:49,830
this where it's just like this blob and

00:04:46,980 --> 00:04:54,210
you know we can kind of zoom in and

00:04:49,830 --> 00:04:56,400
maybe take a closer look so it contains

00:04:54,210 --> 00:04:59,040
a whole lot of stuff and I'm gonna try

00:04:56,400 --> 00:05:02,520
to run through this pretty quick but so

00:04:59,040 --> 00:05:05,490
there's nine or eight defending nine

00:05:02,520 --> 00:05:07,230
top-level properties and the first one

00:05:05,490 --> 00:05:11,270
is going to be header and that's going

00:05:07,230 --> 00:05:14,520
to talk all about the report itself

00:05:11,270 --> 00:05:18,900
information about the node process the

00:05:14,520 --> 00:05:21,270
command line you can see the version the

00:05:18,900 --> 00:05:28,670
versions of the in the libraries that

00:05:21,270 --> 00:05:32,520
node uses operating system version CPUs

00:05:28,670 --> 00:05:35,730
all sorts of stuff so that's gonna be in

00:05:32,520 --> 00:05:37,560
the header next one if we will scroll

00:05:35,730 --> 00:05:39,150
down and this is an order so the next

00:05:37,560 --> 00:05:42,930
one you see is JavaScript stack and it's

00:05:39,150 --> 00:05:46,020
going to of course give you the stack in

00:05:42,930 --> 00:05:47,280
this case it crashed on an air next

00:05:46,020 --> 00:05:49,710
you'll get the native stack which is

00:05:47,280 --> 00:05:51,900
which is pretty far under the hood and

00:05:49,710 --> 00:05:53,550
you may or may not need that but it's

00:05:51,900 --> 00:05:57,120
there anyway the next will be

00:05:53,550 --> 00:06:00,570
information about the heap so this is

00:05:57,120 --> 00:06:03,030
your your memory usage resource usage

00:06:00,570 --> 00:06:06,960
will be your CPU usage a little bit

00:06:03,030 --> 00:06:10,530
about filesystem activity next is this

00:06:06,960 --> 00:06:12,330
libuv might need a better name but it's

00:06:10,530 --> 00:06:14,750
it's essentially the state of the event

00:06:12,330 --> 00:06:18,480
loop what's in that event loop right now

00:06:14,750 --> 00:06:20,760
and so this is it you know it gets a

00:06:18,480 --> 00:06:23,040
little technical but there's stuff in

00:06:20,760 --> 00:06:24,900
this this particular event loop and over

00:06:23,040 --> 00:06:29,370
there environment variables this has

00:06:24,900 --> 00:06:31,550
been trimmed but it's everything in your

00:06:29,370 --> 00:06:31,550
environment

00:06:34,790 --> 00:06:40,420
Windows users will not get this so user

00:06:38,550 --> 00:06:42,700
limits

00:06:40,420 --> 00:06:44,290
if you're a user on a Linux system

00:06:42,700 --> 00:06:47,890
you'll have like limits of what you can

00:06:44,290 --> 00:06:50,890
consume shared objects will be the

00:06:47,890 --> 00:06:55,870
shared libraries that that node has is

00:06:50,890 --> 00:06:57,940
using and so what we are concerned with

00:06:55,870 --> 00:07:00,160
like what can help us solve the problem

00:06:57,940 --> 00:07:06,040
we have well it would be here in the

00:07:00,160 --> 00:07:09,940
header so we look in this header and we

00:07:06,040 --> 00:07:16,660
see we want to focus on this the node.js

00:07:09,940 --> 00:07:18,430
version so the problem here is rim ref

00:07:16,660 --> 00:07:22,360
with that recursive flag didn't land

00:07:18,430 --> 00:07:23,230
until 12.10 so your node version is too

00:07:22,360 --> 00:07:25,360
old but a start

00:07:23,230 --> 00:07:28,000
no stack trace wouldn't tell you that so

00:07:25,360 --> 00:07:30,070
great hey you found the problem good job

00:07:28,000 --> 00:07:31,510
so you take this and you want to say oh

00:07:30,070 --> 00:07:33,400
look this is this is the problem

00:07:31,510 --> 00:07:36,130
everybody and you're going to slack and

00:07:33,400 --> 00:07:36,930
you take this big report you paste it in

00:07:36,130 --> 00:07:40,560
there

00:07:36,930 --> 00:07:42,700
and now you have another problem and

00:07:40,560 --> 00:07:44,860
what you did was you just leaked the

00:07:42,700 --> 00:07:46,240
entire environment like in the slack or

00:07:44,860 --> 00:07:46,890
wherever you sent it maybe you sent it

00:07:46,240 --> 00:07:48,880
through email

00:07:46,890 --> 00:07:52,780
hopefully you didn't put it on paste bin

00:07:48,880 --> 00:07:55,900
but yeah they're gonna be your your your

00:07:52,780 --> 00:07:59,290
AWS stuff in there who knows so your

00:07:55,900 --> 00:08:02,110
team lead is pissed and so that's that's

00:07:59,290 --> 00:08:04,230
kind of what we need to avoid so so how

00:08:02,110 --> 00:08:06,340
we gonna what are we gonna do about this

00:08:04,230 --> 00:08:07,960
if you want to send one of these report

00:08:06,340 --> 00:08:10,120
files around you need to make sure

00:08:07,960 --> 00:08:13,870
they're kind of scrubbed of things that

00:08:10,120 --> 00:08:15,490
shouldn't get out and so what you do is

00:08:13,870 --> 00:08:17,920
you go back and you you delete your

00:08:15,490 --> 00:08:21,850
slack message and you go and you open

00:08:17,920 --> 00:08:23,770
the report and you you delete this

00:08:21,850 --> 00:08:26,560
secrets and then figure out how to exit

00:08:23,770 --> 00:08:32,200
them and then of course this is all very

00:08:26,560 --> 00:08:36,760
tedious so there is a tool that I was

00:08:32,200 --> 00:08:38,590
working on and and it's out now but it's

00:08:36,760 --> 00:08:40,479
called report toolkit and it's a tool

00:08:38,590 --> 00:08:44,229
for processing and analyzing diagnose

00:08:40,479 --> 00:08:45,760
reports it's kind of a multi-tool so it

00:08:44,229 --> 00:08:46,540
does several different things it's not

00:08:45,760 --> 00:08:49,270
Unix

00:08:46,540 --> 00:08:50,650
you know you know how multi tools kind

00:08:49,270 --> 00:08:54,130
of suck to do any of those with anyway

00:08:50,650 --> 00:08:55,840
so they don't do any one thing great but

00:08:54,130 --> 00:08:58,320
I'm getting ahead of myself so this

00:08:55,840 --> 00:09:01,690
thing is going this does some cool stuff

00:08:58,320 --> 00:09:02,980
it gives you a CLI tool to to consume

00:09:01,690 --> 00:09:07,120
these things and there's programmable

00:09:02,980 --> 00:09:08,020
API you can check out the docs which are

00:09:07,120 --> 00:09:12,190
incredible

00:09:08,020 --> 00:09:14,530
and there's the repo up there so what

00:09:12,190 --> 00:09:16,420
what can we do so we can use report

00:09:14,530 --> 00:09:19,990
toolkit and give it this redact command

00:09:16,420 --> 00:09:23,710
and pass it be the report dot JSON file

00:09:19,990 --> 00:09:26,970
or Fugees whatever I called it and what

00:09:23,710 --> 00:09:30,460
this command will do was is it will look

00:09:26,970 --> 00:09:33,370
for things that it knows are potentially

00:09:30,460 --> 00:09:35,380
naughty and need to be kept secret and

00:09:33,370 --> 00:09:38,080
it's based on the black list that may be

00:09:35,380 --> 00:09:40,900
WSS get secrets project news you may be

00:09:38,080 --> 00:09:43,840
familiar with that but you can kind of

00:09:40,900 --> 00:09:46,060
customize it to your needs so what I

00:09:43,840 --> 00:09:48,940
will do is little it'll replace all

00:09:46,060 --> 00:09:53,050
those terrible secrets in that report

00:09:48,940 --> 00:09:55,360
file with this string and so it'll and

00:09:53,050 --> 00:09:59,140
it'll overwrite the file in place so you

00:09:55,360 --> 00:10:01,210
know nope nobody's the wiser right and

00:09:59,140 --> 00:10:03,760
so now you can you can safely pass this

00:10:01,210 --> 00:10:06,000
report around sure with your colleagues

00:10:03,760 --> 00:10:09,730
you know discuss it over dinner

00:10:06,000 --> 00:10:11,560
but so time passes and you get you you

00:10:09,730 --> 00:10:15,010
have another problem so you have this

00:10:11,560 --> 00:10:17,110
this process and maybe it's even a test

00:10:15,010 --> 00:10:22,390
or something but you have this process

00:10:17,110 --> 00:10:25,780
and it's running but but you thought it

00:10:22,390 --> 00:10:27,280
should have stopped so it's not a zombie

00:10:25,780 --> 00:10:29,910
process but I'm just gonna call it a

00:10:27,280 --> 00:10:32,770
zombie process so you don't know why and

00:10:29,910 --> 00:10:34,390
this is this is weird because so you got

00:10:32,770 --> 00:10:39,820
this process and you'll know why and so

00:10:34,390 --> 00:10:41,320
you open up your debugger and it doesn't

00:10:39,820 --> 00:10:42,490
you know it doesn't stop it's not doing

00:10:41,320 --> 00:10:44,680
anything it's just sitting there so it's

00:10:42,490 --> 00:10:47,050
not hitting lines of code you know you

00:10:44,680 --> 00:10:49,660
set breakpoints whatever so you don't

00:10:47,050 --> 00:10:52,390
know why one thing you can do this is

00:10:49,660 --> 00:10:55,690
something that report diagnostic reports

00:10:52,390 --> 00:10:57,520
can help you with so you can actually

00:10:55,690 --> 00:10:59,080
generate a diagnostic report on demanded

00:10:57,520 --> 00:11:02,170
the process doesn't have to crash for

00:10:59,080 --> 00:11:03,940
you to get a diagnostic report and so I

00:11:02,170 --> 00:11:07,170
know we love command line flags and so

00:11:03,940 --> 00:11:10,139
we can send report on the signal and so

00:11:07,170 --> 00:11:14,430
by default what this will do is the

00:11:10,139 --> 00:11:17,850
process will respond to the user to

00:11:14,430 --> 00:11:19,950
signal and that that's configurable but

00:11:17,850 --> 00:11:24,029
it but so you'll start start your

00:11:19,950 --> 00:11:29,190
process and you can do this sort of

00:11:24,029 --> 00:11:30,990
thing and the process ID and so that

00:11:29,190 --> 00:11:32,430
sends the user to signal and when the

00:11:30,990 --> 00:11:34,410
process receives that signal node will

00:11:32,430 --> 00:11:37,050
say ah it's time for me to create a

00:11:34,410 --> 00:11:43,709
diagnostic report and so it'll dump a

00:11:37,050 --> 00:11:47,100
diagnostic report out so you look at

00:11:43,709 --> 00:11:48,720
this diagnose report and then the I'm

00:11:47,100 --> 00:11:50,930
gonna cheat because I know where to look

00:11:48,720 --> 00:11:54,600
here so I would look in this libuv

00:11:50,930 --> 00:12:01,949
property and I would go down and look oh

00:11:54,600 --> 00:12:07,199
look there's this timer and so this

00:12:01,949 --> 00:12:09,029
timer and it's active so it's so it's in

00:12:07,199 --> 00:12:11,699
the event loop and it's referenced so

00:12:09,029 --> 00:12:13,920
okay it's so it's still on hasn't been

00:12:11,699 --> 00:12:17,130
garbage collected fires an MS from now

00:12:13,920 --> 00:12:19,290
999 that's a while right and so you can

00:12:17,130 --> 00:12:22,920
see that using this you can get a clue

00:12:19,290 --> 00:12:24,690
ah so I must have created some set

00:12:22,920 --> 00:12:27,209
timeout or some interval or something

00:12:24,690 --> 00:12:30,329
and you know I was off by several orders

00:12:27,209 --> 00:12:32,160
of magnitude you know who knows but

00:12:30,329 --> 00:12:34,350
that'll give you a clue to try to figure

00:12:32,160 --> 00:12:40,019
out oh this is this is one of the this

00:12:34,350 --> 00:12:43,620
is where a problem could be so report

00:12:40,019 --> 00:12:46,829
toolkit if you aren't if you don't know

00:12:43,620 --> 00:12:49,890
where to look so it can do this sort of

00:12:46,829 --> 00:12:52,260
thing for you and so it has this inspect

00:12:49,890 --> 00:12:54,720
sub command and this is this is the

00:12:52,260 --> 00:12:56,699
thing I think is really neat so there

00:12:54,720 --> 00:13:00,000
are these rules they're heuristics

00:12:56,699 --> 00:13:03,149
they're just some algorithms and

00:13:00,000 --> 00:13:06,060
functions that that accept a a report

00:13:03,149 --> 00:13:07,829
file and you can examine the function

00:13:06,060 --> 00:13:10,440
examines the report file and it decides

00:13:07,829 --> 00:13:13,620
what to do and so the the there are

00:13:10,440 --> 00:13:16,500
built-in rules one of these happens to

00:13:13,620 --> 00:13:18,329
be the long timeout rule which will look

00:13:16,500 --> 00:13:20,550
for this very situation in your report

00:13:18,329 --> 00:13:23,010
file and so you

00:13:20,550 --> 00:13:24,899
could run this on your report file any

00:13:23,010 --> 00:13:26,459
report file really and it'll look and

00:13:24,899 --> 00:13:30,120
you'll see is there anything fishy going

00:13:26,459 --> 00:13:32,370
on here so one of those rules is it a

00:13:30,120 --> 00:13:37,550
long time out one where it will it will

00:13:32,370 --> 00:13:39,750
let you know if there's a timeout that's

00:13:37,550 --> 00:13:44,160
that's far off in the future and it's

00:13:39,750 --> 00:13:45,570
still active and so you could you know

00:13:44,160 --> 00:13:47,490
write your own rules to this it's like a

00:13:45,570 --> 00:13:50,010
you know a plugin system and so you

00:13:47,490 --> 00:13:52,320
could you could write your own it works

00:13:50,010 --> 00:13:53,790
similarly the similar I came and say

00:13:52,320 --> 00:13:57,269
that word but that's how it works

00:13:53,790 --> 00:13:59,010
it works like yes LaHood and so you can

00:13:57,269 --> 00:14:00,890
write your own rules publish the ESM you

00:13:59,010 --> 00:14:02,940
could have it talked to the blockchain

00:14:00,890 --> 00:14:04,860
it's not sure why you do that but you

00:14:02,940 --> 00:14:09,720
could do that and so this is what the

00:14:04,860 --> 00:14:11,610
output would look like so pretty simple

00:14:09,720 --> 00:14:13,829
so it's just like this kind of tabular

00:14:11,610 --> 00:14:16,649
standing where it says oh there's an

00:14:13,829 --> 00:14:18,149
error very issue in this report file in

00:14:16,649 --> 00:14:20,640
the rule that was triggered as this one

00:14:18,149 --> 00:14:25,860
and then there's the thing with this bad

00:14:20,640 --> 00:14:28,040
expiration date time that's one of the

00:14:25,860 --> 00:14:31,800
rules there's there's others that will

00:14:28,040 --> 00:14:34,200
look and make sure that you're you know

00:14:31,800 --> 00:14:37,350
memory usage is within expected range

00:14:34,200 --> 00:14:40,649
your CPU usage is within an expected

00:14:37,350 --> 00:14:45,240
range there's another one that actually

00:14:40,649 --> 00:14:47,100
will examine your shared shared

00:14:45,240 --> 00:14:49,200
libraries versus the libraries that node

00:14:47,100 --> 00:14:51,270
was built built with and if there's a

00:14:49,200 --> 00:14:53,339
mismatch there and so that's not gonna

00:14:51,270 --> 00:14:54,690
you know be something that most people

00:14:53,339 --> 00:14:57,410
wouldn't be concerned about but if

00:14:54,690 --> 00:14:59,670
you're compiling node that might come up

00:14:57,410 --> 00:15:07,949
where you say have a different version

00:14:59,670 --> 00:15:11,070
of open SSL than node expects so another

00:15:07,949 --> 00:15:15,000
problem you might have so you got this

00:15:11,070 --> 00:15:16,949
flaky process in the flaky process you

00:15:15,000 --> 00:15:19,350
know it's running and you're not sure

00:15:16,949 --> 00:15:23,070
why it just kind of it fails once in a

00:15:19,350 --> 00:15:24,660
while you know maybe it fails on one

00:15:23,070 --> 00:15:27,630
machine but not the other and you can't

00:15:24,660 --> 00:15:31,020
really tell what the difference is so

00:15:27,630 --> 00:15:34,569
one thing that report toolkit can help

00:15:31,020 --> 00:15:38,759
us here is it provides a diff sub come

00:15:34,569 --> 00:15:42,220
and so it's you know you could take a

00:15:38,759 --> 00:15:44,980
report a dot Jason for BJ's and give it

00:15:42,220 --> 00:15:47,679
to your favorite dipping tool but that's

00:15:44,980 --> 00:15:50,079
for dipping source code or text files

00:15:47,679 --> 00:15:52,420
it's it's not for dipping these report

00:15:50,079 --> 00:15:56,110
files a neat thing about when we know

00:15:52,420 --> 00:15:58,989
the data we have we can create a custom

00:15:56,110 --> 00:16:00,309
a purpose-built diff tool for this and

00:15:58,989 --> 00:16:03,879
so that's what this is it

00:16:00,309 --> 00:16:05,290
it tries to ignore stuff that it thinks

00:16:03,879 --> 00:16:06,970
you probably won't care about and so

00:16:05,290 --> 00:16:09,339
tries to kind of you know

00:16:06,970 --> 00:16:11,230
signal-to-noise ratio it tries to make

00:16:09,339 --> 00:16:13,959
it nicer for you to to look at your

00:16:11,230 --> 00:16:15,459
reports and say oh well that's how

00:16:13,959 --> 00:16:17,499
they're different instead of this you

00:16:15,459 --> 00:16:21,040
know huge unified dump or side-by-side

00:16:17,499 --> 00:16:23,499
diff and and so it answers your process

00:16:21,040 --> 00:16:24,790
how does this if you run this again and

00:16:23,499 --> 00:16:26,290
again again you couldn't you can

00:16:24,790 --> 00:16:29,259
different them all and say how does the

00:16:26,290 --> 00:16:33,519
process change over time maybe that's a

00:16:29,259 --> 00:16:36,639
single process maybe that's a process on

00:16:33,519 --> 00:16:38,499
several different machines but you can

00:16:36,639 --> 00:16:44,139
dip any two reports this way and the

00:16:38,499 --> 00:16:48,189
diff output looks something like that in

00:16:44,139 --> 00:16:49,329
this case we see that you know the

00:16:48,189 --> 00:16:52,110
command line flags are a little

00:16:49,329 --> 00:16:58,480
different so with this first report file

00:16:52,110 --> 00:17:00,189
we actually said - efore for eval and so

00:16:58,480 --> 00:17:02,110
the the command that was sent was

00:17:00,189 --> 00:17:04,360
actually hey just write a report the

00:17:02,110 --> 00:17:07,059
other one who knows but it didn't have

00:17:04,360 --> 00:17:10,029
any command line options the the first

00:17:07,059 --> 00:17:13,059
report was generated with 12.1 the

00:17:10,029 --> 00:17:16,240
second one was generated with 11.2 and

00:17:13,059 --> 00:17:19,839
so it this is this is an excerpt of that

00:17:16,240 --> 00:17:25,120
diff but yeah that's kind of the idea

00:17:19,839 --> 00:17:27,089
there and you know if you don't like the

00:17:25,120 --> 00:17:29,620
the tabular kind of output you can

00:17:27,089 --> 00:17:33,419
choose different formats maybe you want

00:17:29,620 --> 00:17:33,419
to in JSON or CSV or something

00:17:34,419 --> 00:17:43,630
another thing is maybe you got maybe got

00:17:40,779 --> 00:17:46,570
processes that are crashing somewhere

00:17:43,630 --> 00:17:49,090
maybe a lot of them and maybe you're

00:17:46,570 --> 00:17:50,830
like that's not a big deal

00:17:49,090 --> 00:17:54,700
we can just restart them because it's no

00:17:50,830 --> 00:17:58,440
right but so you want to know how

00:17:54,700 --> 00:18:00,640
frequently certain exceptions are

00:17:58,440 --> 00:18:02,830
happening and maybe this will help you

00:18:00,640 --> 00:18:07,120
prioritize bug fixes or who knows what

00:18:02,830 --> 00:18:09,520
um but to be able to figure this out how

00:18:07,120 --> 00:18:13,570
often does a particular exception happen

00:18:09,520 --> 00:18:14,920
you need to be able to count them so how

00:18:13,570 --> 00:18:19,090
do you count an exception well you need

00:18:14,920 --> 00:18:21,250
to somehow you know you could you can

00:18:19,090 --> 00:18:24,370
take the whole exception and stuff it

00:18:21,250 --> 00:18:25,960
who knows but you could take a what you

00:18:24,370 --> 00:18:30,809
can do here is you can take a hash of

00:18:25,960 --> 00:18:33,160
that exception and you can kind of

00:18:30,809 --> 00:18:34,600
there's there's some customization that

00:18:33,160 --> 00:18:40,150
can happen here but you can take a hash

00:18:34,600 --> 00:18:42,760
and actually just kind of output this a

00:18:40,150 --> 00:18:45,640
little little bit of Jason with an SH

00:18:42,760 --> 00:18:47,470
one here music report tool kit of course

00:18:45,640 --> 00:18:48,850
you could do that with a script report

00:18:47,470 --> 00:18:52,900
toolkit we'll do it out of the box it'll

00:18:48,850 --> 00:18:56,169
also convert these diagnostic reports to

00:18:52,900 --> 00:18:58,419
CSV JSON you can filter stuff so if you

00:18:56,169 --> 00:19:01,929
only want a couple of those fields you

00:18:58,419 --> 00:19:05,230
have to filter table of course is that

00:19:01,929 --> 00:19:06,429
kind of output you saw before newline

00:19:05,230 --> 00:19:08,290
would be something like new line

00:19:06,429 --> 00:19:12,610
delimited JSON if you need that sort of

00:19:08,290 --> 00:19:15,610
thing a numeric eye kind of this kind of

00:19:12,610 --> 00:19:17,530
experiment where you can like use it in

00:19:15,610 --> 00:19:20,169
in a shell context where you can

00:19:17,530 --> 00:19:22,540
actually pipe it to something and maybe

00:19:20,169 --> 00:19:24,250
generate there's like these like neat

00:19:22,540 --> 00:19:26,710
little tools that'll generate like

00:19:24,250 --> 00:19:29,200
graphs and your console you could do

00:19:26,710 --> 00:19:32,470
that and just combine it with filter and

00:19:29,200 --> 00:19:34,630
only pick out you know a certain a

00:19:32,470 --> 00:19:36,880
certain field and keep running that over

00:19:34,630 --> 00:19:40,600
time redact of course is it's

00:19:36,880 --> 00:19:44,770
essentially the same thing as the redact

00:19:40,600 --> 00:19:47,700
command so you can combine these

00:19:44,770 --> 00:19:51,460
transforms you write your own ocean npn

00:19:47,700 --> 00:19:53,230
using no you can't do that but so this

00:19:51,460 --> 00:19:57,910
is what if something would look like so

00:19:53,230 --> 00:20:00,970
you'd get this stack hash and you can

00:19:57,910 --> 00:20:01,779
see there is sha 1 hash calculated for

00:20:00,970 --> 00:20:04,239
this

00:20:01,779 --> 00:20:06,039
I think you know you need to be able to

00:20:04,239 --> 00:20:08,499
customize this a bit maybe if your

00:20:06,039 --> 00:20:10,929
exceptions have some user information in

00:20:08,499 --> 00:20:12,419
them and you want to get rid of that you

00:20:10,929 --> 00:20:15,219
know maybe there's some personal

00:20:12,419 --> 00:20:18,460
personally identifiable information in

00:20:15,219 --> 00:20:20,739
there you should be able to pass it a a

00:20:18,460 --> 00:20:23,409
like a red regular expression or just a

00:20:20,739 --> 00:20:26,619
function and you know write your own and

00:20:23,409 --> 00:20:29,409
plug it into this thing and it'll help

00:20:26,619 --> 00:20:31,169
you generate those stack that that hash

00:20:29,409 --> 00:20:33,669
and then you can give this to your

00:20:31,169 --> 00:20:35,909
logging tool or your metric system or

00:20:33,669 --> 00:20:35,909
what have you

00:20:41,639 --> 00:20:48,389
so I think that's about it but what we

00:20:45,489 --> 00:20:52,299
learned is what a diagnostic report is

00:20:48,389 --> 00:20:53,830
how to create them it's not everywhere

00:20:52,299 --> 00:20:55,330
you can create them but that's that's a

00:20:53,830 --> 00:20:58,239
couple of them you can also create them

00:20:55,330 --> 00:21:00,519
programmatically which might be useful

00:20:58,239 --> 00:21:04,330
if you're trying to grab them in like a

00:21:00,519 --> 00:21:06,639
server less environment how you can use

00:21:04,330 --> 00:21:07,899
them to solve certain problems they're

00:21:06,639 --> 00:21:10,359
especially useful of course and

00:21:07,899 --> 00:21:11,799
post-mortem debugging where you don't

00:21:10,359 --> 00:21:15,029
have the option of running a debugger

00:21:11,799 --> 00:21:17,559
because your process is stopped so and

00:21:15,029 --> 00:21:20,259
of course how report toolkit can help

00:21:17,559 --> 00:21:22,839
you work with diagnostic reports when

00:21:20,259 --> 00:21:24,549
they become tedious or how it can help

00:21:22,839 --> 00:21:29,229
you uncover problems that you may not be

00:21:24,549 --> 00:21:31,779
aware of and so if you want more

00:21:29,229 --> 00:21:34,119
information about diagnostic reports of

00:21:31,779 --> 00:21:36,879
course it is in the lovely nodejs

00:21:34,119 --> 00:21:39,249
documentation there's a tutorial written

00:21:36,879 --> 00:21:41,019
by gireesh who spoke about diagnosed

00:21:39,249 --> 00:21:44,649
reports yesterday and also he was the

00:21:41,019 --> 00:21:47,440
one who who got this code into core but

00:21:44,649 --> 00:21:53,080
there's a tutorial there which links to

00:21:47,440 --> 00:21:57,489
those two developer.com you can also and

00:21:53,080 --> 00:21:59,379
I apologize this is not very legible but

00:21:57,489 --> 00:22:02,499
the documentation site for report

00:21:59,379 --> 00:22:06,309
toolkit is IBM github do forward slash

00:22:02,499 --> 00:22:12,070
report toolkit and I'll leave that up

00:22:06,309 --> 00:22:14,019
for a second but it is an IBM project

00:22:12,070 --> 00:22:15,670
I'm the only person working on it but

00:22:14,019 --> 00:22:18,040
it's still an IBM project

00:22:15,670 --> 00:22:20,680
and so again I am Christopher Hiller you

00:22:18,040 --> 00:22:23,230
can call me Chris I work for IBM

00:22:20,680 --> 00:22:28,030
I like node mocha and stuff look at my

00:22:23,230 --> 00:22:30,350
website and things so Thank You Montreal

00:22:28,030 --> 00:22:36,760
and noches Inara

00:22:30,350 --> 00:22:36,760

YouTube URL: https://www.youtube.com/watch?v=427SmfRkgpA


