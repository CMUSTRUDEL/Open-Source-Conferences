Title: Why You Should Maintain Type Definitions for Your JavaScript Project - Ethan Arrowood, Microsoft
Publication date: 2020-05-11
Playlist: Node + JS Interactive 2019
Description: 
	Why You Should Maintain Type Definitions for Your JavaScript Project - Ethan Arrowood, Microsoft
Speakers: Ethan Arrowood
TypeScript support is one of the most sought-after features for any popular open source JavaScript project.

Fastify, a fast and low overhead web framework for Node.js, strives to treat TypeScript developers as first-class citizens even in a library written entirely in JavaScript. Since TypeScript 2.8 the Fastify team has been able to write and maintain our own type definition file shipped directly from Fastify itself. This has enabled our developers to rely on a single dependency and trust what they are using is always up-to-date.

This talk will share some of the lessons we've learned thus far, and it will explore some of the interesting changes we are making in the v3 refactor.
Captions: 
	00:00:00,299 --> 00:00:08,550
hello everybody we'll get started in

00:00:02,850 --> 00:00:10,530
just a minute here and my name is Ethan

00:00:08,550 --> 00:00:14,190
Arrowwood I'm a software engineer at

00:00:10,530 --> 00:00:16,320
Microsoft pronouns are he his and today

00:00:14,190 --> 00:00:18,300
my talk is going to be on why you should

00:00:16,320 --> 00:00:21,330
maintain your type definitions for your

00:00:18,300 --> 00:00:23,310
JavaScript project I'll be covering some

00:00:21,330 --> 00:00:26,220
of the ways that I've gone about it so

00:00:23,310 --> 00:00:28,769
I'll be diving into some fun with fun

00:00:26,220 --> 00:00:30,210
generic work that I got to do then I'll

00:00:28,769 --> 00:00:33,930
talk about some of the ways that you can

00:00:30,210 --> 00:00:36,630
support your custom type definitions so

00:00:33,930 --> 00:00:39,090
to get started the project and the

00:00:36,630 --> 00:00:41,640
context for this talk is vasa phi i'm a

00:00:39,090 --> 00:00:45,360
maintainer i mainly focus on the types

00:00:41,640 --> 00:00:47,489
crap typescript set of things but fafsa

00:00:45,360 --> 00:00:50,879
phi as you some of you know is a part of

00:00:47,489 --> 00:00:54,210
the open J's foundation and we really

00:00:50,879 --> 00:00:58,739
want to work to offer the best developer

00:00:54,210 --> 00:01:01,260
and user experience on all facets FASTA

00:00:58,739 --> 00:01:04,439
file like I said is open source and it's

00:01:01,260 --> 00:01:08,250
entirely written in JavaScript as you

00:01:04,439 --> 00:01:11,850
can see it's 97.3% exactly and the

00:01:08,250 --> 00:01:13,409
JavaScript chunk of this is the same

00:01:11,850 --> 00:01:15,960
JavaScript that you'll run when you

00:01:13,409 --> 00:01:19,200
consume FAFSA Phi it is not compiled

00:01:15,960 --> 00:01:21,360
it's not built the es6 code that we run

00:01:19,200 --> 00:01:24,960
that we write is shipped directly to you

00:01:21,360 --> 00:01:26,790
when you download our package this is a

00:01:24,960 --> 00:01:31,409
little bit of what it looks like this is

00:01:26,790 --> 00:01:33,030
the JavaScript use of pacifies so it's a

00:01:31,409 --> 00:01:35,670
lot like Express if anyone's familiar

00:01:33,030 --> 00:01:37,320
with that you instantiate the server to

00:01:35,670 --> 00:01:41,220
find some routes and then kick it off

00:01:37,320 --> 00:01:44,490
and though my talk today is not about

00:01:41,220 --> 00:01:47,610
JavaScript but about typescript and fast

00:01:44,490 --> 00:01:49,290
and here at fafsa phi we love typescript

00:01:47,610 --> 00:01:51,720
even though it's not written in

00:01:49,290 --> 00:01:54,990
typescript and this is because we see

00:01:51,720 --> 00:01:57,030
the natural progression of projects now

00:01:54,990 --> 00:02:00,950
open source projects nowadays need to

00:01:57,030 --> 00:02:03,090
support both sides however for us

00:02:00,950 --> 00:02:06,450
rewriting it in typescript is not an

00:02:03,090 --> 00:02:08,550
option so instead we write a type

00:02:06,450 --> 00:02:10,349
definition file and all type all

00:02:08,550 --> 00:02:12,709
typescript projects even if they're

00:02:10,349 --> 00:02:16,129
written in typescript will need 2x

00:02:12,709 --> 00:02:22,299
for some sort of type definition file

00:02:16,129 --> 00:02:22,299
I'll take a quick break for a HDMI

00:02:26,590 --> 00:02:33,180
it's okay yeah

00:02:41,630 --> 00:02:50,160
yeah no worries so while we while we

00:02:46,500 --> 00:02:54,210
wait who in this room writes typescript

00:02:50,160 --> 00:02:57,750
already all right sweet so who here is

00:02:54,210 --> 00:02:59,730
interested in writing typescript awesome

00:02:57,750 --> 00:03:02,300
and has anyone ever written their own

00:02:59,730 --> 00:03:06,860
typescript definition file before

00:03:02,300 --> 00:03:11,640
alright so I see some like shaky hands

00:03:06,860 --> 00:03:15,890
okay should I read do it okay all right

00:03:11,640 --> 00:03:15,890
no worries we'll get right back into it

00:03:18,080 --> 00:03:22,710
awesome

00:03:19,230 --> 00:03:26,400
all right so we'll resume from here the

00:03:22,710 --> 00:03:27,900
FAFSA fee definition file I just asked a

00:03:26,400 --> 00:03:29,790
question who here's a written one by

00:03:27,900 --> 00:03:31,820
hand before and I saw a couple hands

00:03:29,790 --> 00:03:35,340
some like shaky hands and that's because

00:03:31,820 --> 00:03:39,210
normally this file is exported when you

00:03:35,340 --> 00:03:41,010
run the types of compiler but when

00:03:39,210 --> 00:03:42,960
you're writing JavaScript code you don't

00:03:41,010 --> 00:03:45,710
get that luxury so you have to write it

00:03:42,960 --> 00:03:47,760
yourself in the recent

00:03:45,710 --> 00:03:50,460
three-point-something update they

00:03:47,760 --> 00:03:53,040
actually did add the ability to export

00:03:50,460 --> 00:03:56,160
type definitions from J stock but that

00:03:53,040 --> 00:03:57,990
happened like really recently and I

00:03:56,160 --> 00:04:00,060
don't know a whole lot about it so so

00:03:57,990 --> 00:04:02,160
we'll kind of just skip over that detail

00:04:00,060 --> 00:04:03,960
but just know that typescript is working

00:04:02,160 --> 00:04:05,520
hard to provide this kind of type

00:04:03,960 --> 00:04:08,040
support even if your code is in

00:04:05,520 --> 00:04:09,930
JavaScript but anyways when you write a

00:04:08,040 --> 00:04:13,680
definition file you need to ship this to

00:04:09,930 --> 00:04:15,980
your users so it needs to live somewhere

00:04:13,680 --> 00:04:18,570
either in a repository or somewhere else

00:04:15,980 --> 00:04:20,580
one of the examples of a somewhere else

00:04:18,570 --> 00:04:22,980
is something you may be familiar with

00:04:20,580 --> 00:04:25,980
definitively types this is that classic

00:04:22,980 --> 00:04:29,190
app types organization that you might

00:04:25,980 --> 00:04:33,810
npm installing from and definitely typed

00:04:29,190 --> 00:04:37,500
is a good project except it has a big

00:04:33,810 --> 00:04:39,900
flaw that turns me away from it when an

00:04:37,500 --> 00:04:42,180
api or a library or module is being

00:04:39,900 --> 00:04:44,700
developed it's not necessarily going to

00:04:42,180 --> 00:04:46,320
also get it's definitely typed updates

00:04:44,700 --> 00:04:49,020
and many of you have may may have seen

00:04:46,320 --> 00:04:51,000
this when a brand new update especially

00:04:49,020 --> 00:04:53,910
a major update comes out for a library

00:04:51,000 --> 00:04:54,930
and the maintainer x' aren't maintaining

00:04:53,910 --> 00:04:57,090
that definitely

00:04:54,930 --> 00:04:58,530
typed part of the package those types

00:04:57,090 --> 00:05:02,070
are usually out of date and the type

00:04:58,530 --> 00:05:04,410
script users get left behind but if you

00:05:02,070 --> 00:05:06,780
ship your types with your repo within

00:05:04,410 --> 00:05:09,210
your actual export then you can sort of

00:05:06,780 --> 00:05:12,840
control how those get updated and also

00:05:09,210 --> 00:05:15,690
be have more safe of mind that you'll be

00:05:12,840 --> 00:05:18,000
shipping valid types with every either

00:05:15,690 --> 00:05:20,490
minor or major release so that's what we

00:05:18,000 --> 00:05:23,180
do at FASTA Phi we ship our type

00:05:20,490 --> 00:05:27,120
definitions alongside the JavaScript and

00:05:23,180 --> 00:05:28,110
as I said before we when you download

00:05:27,120 --> 00:05:30,090
fafsa file you're getting the

00:05:28,110 --> 00:05:31,530
handwritten JavaScript code you're also

00:05:30,090 --> 00:05:34,919
getting the handwritten typescript code

00:05:31,530 --> 00:05:37,169
and today we're gonna dive into this

00:05:34,919 --> 00:05:40,710
function at the bottom of the screenshot

00:05:37,169 --> 00:05:43,860
it's the only real export from FAFSA Phi

00:05:40,710 --> 00:05:46,949
is this factory function and this

00:05:43,860 --> 00:05:48,960
function definition in typescript starts

00:05:46,949 --> 00:05:49,500
out a little little bit big but we'll

00:05:48,960 --> 00:05:52,259
break it down

00:05:49,500 --> 00:05:54,870
first there is an options object that

00:05:52,259 --> 00:05:58,080
you pass in and the function returns a

00:05:54,870 --> 00:06:00,990
FAFSA Phi instance but it also has this

00:05:58,080 --> 00:06:02,760
big block of generics anyone that has

00:06:00,990 --> 00:06:05,669
ever done a strictly typed language

00:06:02,760 --> 00:06:07,889
before will know what these are and I

00:06:05,669 --> 00:06:09,510
love generics I didn't use to it can

00:06:07,889 --> 00:06:11,760
tell you that much but after spending a

00:06:09,510 --> 00:06:14,010
lot of time with them they are really

00:06:11,760 --> 00:06:15,389
powerful and there's two patterns that I

00:06:14,010 --> 00:06:17,699
want to highlight today and that is

00:06:15,389 --> 00:06:20,789
generic constraints and generic defaults

00:06:17,699 --> 00:06:23,820
I don't know if these similar things are

00:06:20,789 --> 00:06:27,090
in other strictly typed languages but

00:06:23,820 --> 00:06:29,280
they are in typescript so let's break

00:06:27,090 --> 00:06:31,430
this down this first line here raw

00:06:29,280 --> 00:06:34,349
server extends Ross over base equals

00:06:31,430 --> 00:06:36,240
Ross server default this is actually

00:06:34,349 --> 00:06:38,759
implementing both of those patterns that

00:06:36,240 --> 00:06:41,009
I just said constraining and defaulting

00:06:38,759 --> 00:06:44,159
the constraint here is raw server

00:06:41,009 --> 00:06:47,000
extends raw server base raw server base

00:06:44,159 --> 00:06:51,270
is a list of types in this case it's HD

00:06:47,000 --> 00:06:54,750
HTTP sn2 server types that are given

00:06:51,270 --> 00:06:57,630
from nodejs it enforces that this

00:06:54,750 --> 00:07:00,630
generic is one of these four or an

00:06:57,630 --> 00:07:02,520
instance of one of these four and this

00:07:00,630 --> 00:07:06,539
is important because when we create a

00:07:02,520 --> 00:07:08,310
fafsa phi server as a library we need

00:07:06,539 --> 00:07:11,250
you to give us the types

00:07:08,310 --> 00:07:13,500
for your server and at default which is

00:07:11,250 --> 00:07:17,669
the second part of this that equals raw

00:07:13,500 --> 00:07:20,880
server default is HTTP server so by

00:07:17,669 --> 00:07:24,389
default FAFSA Phi will return an HTTP

00:07:20,880 --> 00:07:29,610
node server you can though enable some

00:07:24,389 --> 00:07:31,260
things like HTTP in HTTP two and the

00:07:29,610 --> 00:07:33,840
reason why this is important is the

00:07:31,260 --> 00:07:37,080
request and reply and other properties

00:07:33,840 --> 00:07:39,570
will differ when you define a different

00:07:37,080 --> 00:07:41,550
server type so in this line the raw

00:07:39,570 --> 00:07:43,260
request we have that similar pattern

00:07:41,550 --> 00:07:45,450
where it's extending something and it's

00:07:43,260 --> 00:07:47,610
equaling something except this is

00:07:45,450 --> 00:07:49,980
something now is an expression as you

00:07:47,610 --> 00:07:51,960
can see by this blown up code it is a

00:07:49,980 --> 00:07:55,710
ternary expression and we're checking

00:07:51,960 --> 00:07:58,919
the raw server type again and we're

00:07:55,710 --> 00:08:01,200
determining what the request definition

00:07:58,919 --> 00:08:03,720
should be should it be an HDPE incoming

00:08:01,200 --> 00:08:06,270
message or an HTTP to server request

00:08:03,720 --> 00:08:08,160
method and this is that power of

00:08:06,270 --> 00:08:10,860
generics that I'm trying to highlight in

00:08:08,160 --> 00:08:14,130
typescript is by just defining the

00:08:10,860 --> 00:08:17,100
server type we can infer the remainder

00:08:14,130 --> 00:08:19,080
of your types and if you see back on

00:08:17,100 --> 00:08:21,900
this definition for the function we're

00:08:19,080 --> 00:08:23,460
really almost abusing this raw server

00:08:21,900 --> 00:08:25,620
generic we're passing it down to almost

00:08:23,460 --> 00:08:27,090
everything because at the core we're

00:08:25,620 --> 00:08:30,050
building an API server or back-end

00:08:27,090 --> 00:08:32,219
server so that's really important and

00:08:30,050 --> 00:08:35,700
when you get to start looking at some

00:08:32,219 --> 00:08:37,200
code a default FAFSA Phi server is this

00:08:35,700 --> 00:08:38,940
simple we don't have to actually pass

00:08:37,200 --> 00:08:42,780
anything if you're just doing with HTTP

00:08:38,940 --> 00:08:45,600
it with HTTP and if you're doing HTTP -

00:08:42,780 --> 00:08:48,600
all you have to do is pass in that type

00:08:45,600 --> 00:08:50,730
from node from the node core and turn on

00:08:48,600 --> 00:08:51,120
the HTTP to flag in the FASTA fiop

00:08:50,730 --> 00:08:53,580
shion's

00:08:51,120 --> 00:08:56,160
which i want to go down more because the

00:08:53,580 --> 00:08:59,160
inference doesn't stop at the generic

00:08:56,160 --> 00:09:02,370
level when you define a type this is the

00:08:59,160 --> 00:09:04,410
FAFSA Phi server options type within the

00:09:02,370 --> 00:09:06,540
property itself you can use these

00:09:04,410 --> 00:09:08,310
expressions to determine what it should

00:09:06,540 --> 00:09:11,190
be in this case we're saying is it

00:09:08,310 --> 00:09:15,089
should be true or should it be false now

00:09:11,190 --> 00:09:17,550
in FASTA phi the hb2 option actually

00:09:15,089 --> 00:09:20,570
needs to be specified if you are using

00:09:17,550 --> 00:09:24,590
an h mq server but because i couldn't

00:09:20,570 --> 00:09:26,440
how to make the HPG property optional or

00:09:24,590 --> 00:09:29,180
not optional on sort of a like

00:09:26,440 --> 00:09:31,100
expression based way at least we can

00:09:29,180 --> 00:09:35,120
enforce the user is passing the right

00:09:31,100 --> 00:09:37,970
boolean type to this property so that's

00:09:35,120 --> 00:09:39,950
that for the sort of like generic

00:09:37,970 --> 00:09:42,050
constraining and defaulting that is

00:09:39,950 --> 00:09:44,510
available on the FAFSA Phi server part

00:09:42,050 --> 00:09:47,510
but I want to dive into one more fast

00:09:44,510 --> 00:09:50,270
generic example here and we're gonna

00:09:47,510 --> 00:09:52,370
take a look at this code jump down to

00:09:50,270 --> 00:09:54,320
the to the bottom of the the code bite

00:09:52,370 --> 00:09:57,020
you'll see it's server dot get and I'm

00:09:54,320 --> 00:09:59,450
passing in four generic properties three

00:09:57,020 --> 00:10:03,320
of them are defaults one of them is

00:09:59,450 --> 00:10:05,810
custom also one of them is the body and

00:10:03,320 --> 00:10:08,120
we're defining a get route why would I

00:10:05,810 --> 00:10:11,600
ever need to specify the body of a get

00:10:08,120 --> 00:10:13,490
request and this is something I realized

00:10:11,600 --> 00:10:14,960
after building the type system that

00:10:13,490 --> 00:10:18,920
maybe there's a way to do this better

00:10:14,960 --> 00:10:22,130
and in fact there is named generic

00:10:18,920 --> 00:10:23,540
parameters in the JavaScript world if

00:10:22,130 --> 00:10:25,850
you ever defined a function that has

00:10:23,540 --> 00:10:27,230
like eight arguments to it sometimes

00:10:25,850 --> 00:10:29,750
it's better to put those all into one

00:10:27,230 --> 00:10:32,540
object and give them names you can do

00:10:29,750 --> 00:10:34,910
the exact same thing in typescript with

00:10:32,540 --> 00:10:37,910
generics you can make a singular generic

00:10:34,910 --> 00:10:40,340
object with named properties and then

00:10:37,910 --> 00:10:42,590
pass in your types or interfaces to

00:10:40,340 --> 00:10:44,360
those properties this way when you're

00:10:42,590 --> 00:10:46,400
defining a route that has some sort of

00:10:44,360 --> 00:10:48,710
generic property like the custom query

00:10:46,400 --> 00:10:50,240
string all you have to do is specify the

00:10:48,710 --> 00:10:52,130
query string you don't have to specify

00:10:50,240 --> 00:10:55,460
the body the params or any custom

00:10:52,130 --> 00:10:58,520
headers if they're not being modified so

00:10:55,460 --> 00:11:01,130
those are the three generic advanced

00:10:58,520 --> 00:11:03,710
patterns that were really making use of

00:11:01,130 --> 00:11:05,480
and the FAFSA fight type system but now

00:11:03,710 --> 00:11:08,510
we're gonna switch gears into how we can

00:11:05,480 --> 00:11:10,790
support a custom type definition system

00:11:08,510 --> 00:11:13,070
and everyone's favorite software

00:11:10,790 --> 00:11:13,850
engineering topic is testing and we

00:11:13,070 --> 00:11:15,440
don't worry we'll get to your

00:11:13,850 --> 00:11:18,830
second-favorite when documentation just

00:11:15,440 --> 00:11:20,690
a bit there is this library called TST

00:11:18,830 --> 00:11:23,480
it was originally shipped by definitely

00:11:20,690 --> 00:11:26,450
typed but they have since deprecated

00:11:23,480 --> 00:11:29,690
their version of it and a new author Sam

00:11:26,450 --> 00:11:32,090
has created this API and it is wonderful

00:11:29,690 --> 00:11:34,010
it's hasn't it's not even in version one

00:11:32,090 --> 00:11:35,330
yet but it is

00:11:34,010 --> 00:11:37,840
one of my favorite parts about doing

00:11:35,330 --> 00:11:40,400
custom types is you can now write

00:11:37,840 --> 00:11:43,190
assertion like tests for your type

00:11:40,400 --> 00:11:47,330
definitions so you can actually expect a

00:11:43,190 --> 00:11:49,550
type to be returned from some call to

00:11:47,330 --> 00:11:52,640
your API in this case we're going back

00:11:49,550 --> 00:11:55,190
to the HTTP server example we're by

00:11:52,640 --> 00:11:58,310
calling the default classify we expect

00:11:55,190 --> 00:12:01,190
instance with these types similarly if

00:11:58,310 --> 00:12:04,850
we pass in that HTTP to server type we

00:12:01,190 --> 00:12:06,440
expect it to be an HTTP to server and at

00:12:04,850 --> 00:12:08,960
the bottom line you can see the expect

00:12:06,440 --> 00:12:10,790
error line if you set that property that

00:12:08,960 --> 00:12:12,980
also had that expression inside it to

00:12:10,790 --> 00:12:15,050
false this will error out and we can

00:12:12,980 --> 00:12:16,910
test our Lodge we can test our type

00:12:15,050 --> 00:12:19,130
definition logic and I think that's

00:12:16,910 --> 00:12:21,910
incredible because testing is very

00:12:19,130 --> 00:12:23,690
important even for type definitions and

00:12:21,910 --> 00:12:25,730
this is something I didn't consider

00:12:23,690 --> 00:12:28,490
before and not a lot our positives are

00:12:25,730 --> 00:12:30,680
doing it but now you can assert that

00:12:28,490 --> 00:12:31,840
your types are even more even stronger

00:12:30,680 --> 00:12:35,270
than they were before

00:12:31,840 --> 00:12:37,460
there is a missing feature features

00:12:35,270 --> 00:12:38,900
though and this is around coverage and

00:12:37,460 --> 00:12:41,450
it's just thing I would love to see

00:12:38,900 --> 00:12:43,930
develop in the future is how much of my

00:12:41,450 --> 00:12:46,940
type definition system am i testing

00:12:43,930 --> 00:12:48,980
similarly how much of my JavaScript code

00:12:46,940 --> 00:12:51,470
have I defined type definitions for

00:12:48,980 --> 00:12:53,630
these are two big questions in the sort

00:12:51,470 --> 00:12:55,490
of custom type definition space that I

00:12:53,630 --> 00:12:58,700
haven't found great answers to but would

00:12:55,490 --> 00:13:02,420
love for the the rest of us to work on

00:12:58,700 --> 00:13:05,800
or hopefully develop in the future so

00:13:02,420 --> 00:13:08,440
documentation the next piece to this as

00:13:05,800 --> 00:13:11,630
much as writing a great type system is

00:13:08,440 --> 00:13:15,170
is fun and all you have to write Docs

00:13:11,630 --> 00:13:17,030
but the best way to learn at least the

00:13:15,170 --> 00:13:18,830
fafsa fight type system is by example

00:13:17,030 --> 00:13:20,750
and i think the best thing you can do

00:13:18,830 --> 00:13:22,970
for your users is define as many

00:13:20,750 --> 00:13:27,410
examples as possible for your type

00:13:22,970 --> 00:13:29,690
system or or and i should say you should

00:13:27,410 --> 00:13:31,820
include a detailed api guide it doesn't

00:13:29,690 --> 00:13:33,650
have to be identical to the guide that

00:13:31,820 --> 00:13:35,840
you already have for your api but rather

00:13:33,650 --> 00:13:37,250
the type definitions themselves think

00:13:35,840 --> 00:13:38,900
about all the generic properties you

00:13:37,250 --> 00:13:40,370
have you should tell your user what they

00:13:38,900 --> 00:13:43,490
should be and how they how they're going

00:13:40,370 --> 00:13:45,020
to be used references the source code

00:13:43,490 --> 00:13:46,160
are really important especially in

00:13:45,020 --> 00:13:47,930
typescript realm

00:13:46,160 --> 00:13:49,910
I find myself by

00:13:47,930 --> 00:13:51,589
find myself often inspecting the source

00:13:49,910 --> 00:13:53,060
types and being like okay can I see what

00:13:51,589 --> 00:13:55,220
this should look like what is it

00:13:53,060 --> 00:13:56,690
expecting maybe if you have really good

00:13:55,220 --> 00:13:59,420
API guides you might not have to provide

00:13:56,690 --> 00:14:00,740
that but it's so good to show hey this

00:13:59,420 --> 00:14:03,440
is where you can find the source if you

00:14:00,740 --> 00:14:04,940
want it frequently asked questions goes

00:14:03,440 --> 00:14:07,760
hand in hand with the examples and

00:14:04,940 --> 00:14:09,830
tutorials often times users will hit a

00:14:07,760 --> 00:14:11,690
lot of the same problem cases and if you

00:14:09,830 --> 00:14:13,899
can answer that for them before they

00:14:11,690 --> 00:14:16,670
even have to open a new issue that can

00:14:13,899 --> 00:14:18,500
decrease the sort of troubles they might

00:14:16,670 --> 00:14:21,140
have and then finally links for

00:14:18,500 --> 00:14:22,160
contributing the the whole type system

00:14:21,140 --> 00:14:24,110
wouldn't be where it is without the

00:14:22,160 --> 00:14:27,200
contributions from our open-source

00:14:24,110 --> 00:14:29,330
developers and so if you're using the

00:14:27,200 --> 00:14:31,399
types and you find an error it's best to

00:14:29,330 --> 00:14:34,130
open an issue or even better yet submit

00:14:31,399 --> 00:14:36,320
a PR and making that an easy process by

00:14:34,130 --> 00:14:38,209
saying hey find something wrong come

00:14:36,320 --> 00:14:40,580
here and contribute it's gonna help them

00:14:38,209 --> 00:14:42,230
a lot instead of them having to dig

00:14:40,580 --> 00:14:43,730
around here github to try and find out

00:14:42,230 --> 00:14:47,959
where the repository is or how to open

00:14:43,730 --> 00:14:49,700
up a valid issue if you're interested in

00:14:47,959 --> 00:14:51,620
seeing how the docs are coming along I'm

00:14:49,700 --> 00:14:54,020
actually actively working on them right

00:14:51,620 --> 00:14:56,720
now there's a PR open on our FAFSA file

00:14:54,020 --> 00:14:59,150
repository I have a couple examples up

00:14:56,720 --> 00:15:02,180
and I'm still working a lot on trying to

00:14:59,150 --> 00:15:04,400
make this as perfect as possible the

00:15:02,180 --> 00:15:06,440
type system that I've defined is not

00:15:04,400 --> 00:15:08,180
available yet it's it's gonna be in the

00:15:06,440 --> 00:15:12,500
next branch and which will be released

00:15:08,180 --> 00:15:14,450
as version 3 in 2020 but it's there and

00:15:12,500 --> 00:15:17,390
you can poke around it and if you want

00:15:14,450 --> 00:15:19,670
to use it you could use NPM link to link

00:15:17,390 --> 00:15:22,339
it locally and try it out or you could

00:15:19,670 --> 00:15:24,620
require or import I guess the next

00:15:22,339 --> 00:15:28,130
branch directly if you've are familiar

00:15:24,620 --> 00:15:30,380
with doing that and so the last thing I

00:15:28,130 --> 00:15:33,020
want to leave you all with is while this

00:15:30,380 --> 00:15:35,540
effort it seems like a lot of work and

00:15:33,020 --> 00:15:37,790
it is to find your own type system write

00:15:35,540 --> 00:15:41,690
a bunch of tests and write documentation

00:15:37,790 --> 00:15:43,100
for almost supplemental code like it's

00:15:41,690 --> 00:15:46,700
already hard enough that you're defining

00:15:43,100 --> 00:15:48,079
a library but then going ahead and

00:15:46,700 --> 00:15:50,540
defining all these types on top of it

00:15:48,079 --> 00:15:53,060
that can that's a lot of effort but I

00:15:50,540 --> 00:15:55,600
find for me it's important because of

00:15:53,060 --> 00:15:59,150
like the community and its entirety

00:15:55,600 --> 00:16:01,190
typescript is growing that there's no

00:15:59,150 --> 00:16:03,410
doubt about it so

00:16:01,190 --> 00:16:05,660
if you want to support this growing mass

00:16:03,410 --> 00:16:08,300
of developers taking the time to define

00:16:05,660 --> 00:16:11,540
a strong type system can really help get

00:16:08,300 --> 00:16:13,520
your library or module from you know

00:16:11,540 --> 00:16:17,540
something small to something way larger

00:16:13,520 --> 00:16:19,430
than it has been so with that I say

00:16:17,540 --> 00:16:21,190
thank you for coming to my talk you can

00:16:19,430 --> 00:16:23,330
follow me on Twitter or github and

00:16:21,190 --> 00:16:26,180
please feel free to chat with me any

00:16:23,330 --> 00:16:32,090
time here on line thank you very much

00:16:26,180 --> 00:16:32,090

YouTube URL: https://www.youtube.com/watch?v=fpIE3A3EVKE


