Title: Productive Web Development Powered by AMP - Kristofer Baxter & Ben Morss, Google
Publication date: 2020-05-11
Playlist: Node + JS Interactive 2019
Description: 
	Productive Web Development Powered by AMP - Kristofer Baxter & Ben Morss, Google
Speakers: Kristofer Baxter, Ben Morss
Captions: 
	00:00:00,030 --> 00:00:05,220
so hello welcome to a session here on

00:00:02,399 --> 00:00:08,849
amp and productive abilipad powered by

00:00:05,220 --> 00:00:11,099
amp my name is Ben Morse I'm a developer

00:00:08,849 --> 00:00:14,099
advocate for Google my job there is help

00:00:11,099 --> 00:00:17,310
the web be faster and easier to use for

00:00:14,099 --> 00:00:18,480
users as for developers as well I used

00:00:17,310 --> 00:00:20,400
to be full-time musician which we can

00:00:18,480 --> 00:00:22,199
discuss if you're interested also but

00:00:20,400 --> 00:00:25,140
I'm not here today is really a Googler

00:00:22,199 --> 00:00:26,760
or of course musician I'm here today as

00:00:25,140 --> 00:00:29,640
a representative of the amp open source

00:00:26,760 --> 00:00:32,030
project amp is joining open jeaious and

00:00:29,640 --> 00:00:34,890
we're very excited about this so today

00:00:32,030 --> 00:00:39,960
my Googler hat is not on my amp open

00:00:34,890 --> 00:00:42,180
source hat is on so why am first of all

00:00:39,960 --> 00:00:43,290
what is this app thing and why do you

00:00:42,180 --> 00:00:45,329
think it's a good idea to try out amp

00:00:43,290 --> 00:00:47,579
the thing is that the web is a wonderful

00:00:45,329 --> 00:00:49,379
place of endless possibilities it's like

00:00:47,579 --> 00:00:51,539
cooking you can use any ingredients you

00:00:49,379 --> 00:00:53,399
want to in any way you want to mix and

00:00:51,539 --> 00:00:54,750
match things however you want to and do

00:00:53,399 --> 00:00:56,699
whatever you want which is great because

00:00:54,750 --> 00:00:58,829
the web should be free so in website you

00:00:56,699 --> 00:01:00,930
can for example have lots of stuff if

00:00:58,829 --> 00:01:04,080
you want to you can have lots of images

00:01:00,930 --> 00:01:07,530
and lots of CSS and code and third-party

00:01:04,080 --> 00:01:10,080
libraries and you can put on chat

00:01:07,530 --> 00:01:13,650
widgets and complicated elaborate menus

00:01:10,080 --> 00:01:15,720
and video embeds and you can have pixels

00:01:13,650 --> 00:01:18,390
on there various sorts analytics lots of

00:01:15,720 --> 00:01:20,490
things which is all finding good useful

00:01:18,390 --> 00:01:21,420
functionality the problem can happy

00:01:20,490 --> 00:01:23,280
though when you have a lot of these

00:01:21,420 --> 00:01:25,680
things on there it can become a little

00:01:23,280 --> 00:01:28,829
more like this it came became become a

00:01:25,680 --> 00:01:31,890
little more of a giant wonderful kind of

00:01:28,829 --> 00:01:33,420
mess and that's fine that's good to you

00:01:31,890 --> 00:01:35,009
but this right as web developer the

00:01:33,420 --> 00:01:36,659
problem may be also that not just things

00:01:35,009 --> 00:01:38,790
are kind of complicated to use or might

00:01:36,659 --> 00:01:41,159
taste funny in strange combinations but

00:01:38,790 --> 00:01:44,399
also that a site with lots of JavaScript

00:01:41,159 --> 00:01:45,810
on it and lots of CSS may be slower what

00:01:44,399 --> 00:01:47,610
happens then is people like this here

00:01:45,810 --> 00:01:49,259
are looking at your site loading up your

00:01:47,610 --> 00:01:51,030
site they're on their phone and it's not

00:01:49,259 --> 00:01:53,460
loading they're looking at their site

00:01:51,030 --> 00:01:55,350
they're getting frustrated by it this

00:01:53,460 --> 00:01:57,509
guy over here you see taken up smoking

00:01:55,350 --> 00:02:00,060
and drinking because his life's looking

00:01:57,509 --> 00:02:03,000
so slowly and the frustration so you're

00:02:00,060 --> 00:02:05,040
gonna shorten his lifespan so to save

00:02:03,000 --> 00:02:07,140
this guy's life given more years to

00:02:05,040 --> 00:02:09,780
enjoy everything there is to enjoy about

00:02:07,140 --> 00:02:12,090
Montreal the poutine here is incredible

00:02:09,780 --> 00:02:13,800
for example you should make your site

00:02:12,090 --> 00:02:15,870
faster for him

00:02:13,800 --> 00:02:18,060
and it isn't just this guy over here I

00:02:15,870 --> 00:02:20,160
mean you may also say well my site has a

00:02:18,060 --> 00:02:22,740
lot of users who have 4G connections and

00:02:20,160 --> 00:02:24,360
LTE they live in nice cities where they

00:02:22,740 --> 00:02:26,700
get great connections they have

00:02:24,360 --> 00:02:28,710
top-of-the-line iPhones or Galaxy phones

00:02:26,700 --> 00:02:31,260
but remember also it's about inclusion

00:02:28,710 --> 00:02:32,190
it's about accessibility because last

00:02:31,260 --> 00:02:33,840
time I checked

00:02:32,190 --> 00:02:36,570
40% of connections in the world were

00:02:33,840 --> 00:02:38,610
still 2g and 2g is quite different

00:02:36,570 --> 00:02:42,510
experience I know because I have

00:02:38,610 --> 00:02:46,800
t-mobile and I travel I get free

00:02:42,510 --> 00:02:48,810
unlimited 2g data roaming and many sites

00:02:46,800 --> 00:02:50,430
don't work at all you can tell actually

00:02:48,810 --> 00:02:52,410
ok this a it's gonna load up I can look

00:02:50,430 --> 00:02:54,330
Wikipedia it's gonna work other things

00:02:52,410 --> 00:02:56,670
you're like my banking site it's never

00:02:54,330 --> 00:02:58,620
gonna work at any point it'll be slow

00:02:56,670 --> 00:02:59,760
and hard to use I mean you guys know

00:02:58,620 --> 00:03:01,890
this already your program is about

00:02:59,760 --> 00:03:03,450
performance before we often forget the

00:03:01,890 --> 00:03:05,010
people and other places in the world

00:03:03,450 --> 00:03:06,810
we've been in this country often can't

00:03:05,010 --> 00:03:08,550
use sites unless they're made carefully

00:03:06,810 --> 00:03:11,160
so they can load quickly not too much

00:03:08,550 --> 00:03:13,500
code not too large images and so on and

00:03:11,160 --> 00:03:15,720
so forth amp was created to make these

00:03:13,500 --> 00:03:17,550
problems easier to solve problems like

00:03:15,720 --> 00:03:19,739
slow loading which we just discussed but

00:03:17,550 --> 00:03:22,050
also if content already has loaded up

00:03:19,739 --> 00:03:24,450
and JavaScript is still loading and

00:03:22,050 --> 00:03:25,830
parsing and executing event handlers

00:03:24,450 --> 00:03:28,260
you're still attaching to things in the

00:03:25,830 --> 00:03:29,370
Dom you may have things you can see that

00:03:28,260 --> 00:03:31,590
actually worked up for a little while

00:03:29,370 --> 00:03:33,540
you can have a menu or an accordion that

00:03:31,590 --> 00:03:36,239
you can see there you can tap on it but

00:03:33,540 --> 00:03:39,030
for 5 or 10 seconds nothing happens also

00:03:36,239 --> 00:03:40,770
we think a bad user experience and also

00:03:39,030 --> 00:03:42,300
looking on the right over here something

00:03:40,770 --> 00:03:43,980
else which happens on a site you're

00:03:42,300 --> 00:03:45,690
looking at a site in your phone looking

00:03:43,980 --> 00:03:47,670
at text worried about to do something

00:03:45,690 --> 00:03:50,820
and then suddenly an image pops in

00:03:47,670 --> 00:03:52,680
everything moves down or an ad pops in

00:03:50,820 --> 00:03:53,850
or a video pops and something else

00:03:52,680 --> 00:03:55,530
appears on the screen

00:03:53,850 --> 00:03:57,600
I think shift around sometimes several

00:03:55,530 --> 00:03:59,790
times as the site loads and this kind of

00:03:57,600 --> 00:04:02,580
unstable content loading is kind of

00:03:59,790 --> 00:04:05,340
disturbing for the user and hard to make

00:04:02,580 --> 00:04:08,280
things kind of feel like a bowl and

00:04:05,340 --> 00:04:09,660
trustworthy and accessible so amp was

00:04:08,280 --> 00:04:11,850
designed to fix these kinds of problems

00:04:09,660 --> 00:04:13,260
of course you need amp for these things

00:04:11,850 --> 00:04:14,700
you can't fix it yourself right away

00:04:13,260 --> 00:04:16,410
you're supposed to get it programmers

00:04:14,700 --> 00:04:18,600
you can use JavaScript to make things

00:04:16,410 --> 00:04:20,549
better and you can make things easier

00:04:18,600 --> 00:04:22,590
for the user and all of these ways the

00:04:20,549 --> 00:04:25,050
problem is it's pretty hard to actually

00:04:22,590 --> 00:04:26,910
do because we see on the web that most

00:04:25,050 --> 00:04:27,880
people don't do these things at all we

00:04:26,910 --> 00:04:29,920
see that very people

00:04:27,880 --> 00:04:32,080
people lazy load images we still see a

00:04:29,920 --> 00:04:34,000
web full of a megabyte of unmodified

00:04:32,080 --> 00:04:36,370
JavaScript it's hard for people to

00:04:34,000 --> 00:04:37,690
actually make things fast out there so

00:04:36,370 --> 00:04:41,500
this is what app was created to make

00:04:37,690 --> 00:04:43,240
easier for people on the web so it's why

00:04:41,500 --> 00:04:45,850
people do say sometimes things like yeah

00:04:43,240 --> 00:04:47,800
everyone's doing amp tried to use amp -

00:04:45,850 --> 00:04:49,900
yeah you should because Google kinda

00:04:47,800 --> 00:04:51,370
wants it for SEO it's just kind of do it

00:04:49,900 --> 00:04:51,700
because Google really expects you to do

00:04:51,370 --> 00:04:54,100
it

00:04:51,700 --> 00:04:55,660
okay so I'll make this amp thing should

00:04:54,100 --> 00:04:57,940
I pick my site better or change it for

00:04:55,660 --> 00:05:00,310
amp or you work it no just kind of use a

00:04:57,940 --> 00:05:03,130
plug-in and you just watch the money you

00:05:00,310 --> 00:05:04,600
kind of roll in or something and some

00:05:03,130 --> 00:05:06,370
truth to be things because Google does

00:05:04,600 --> 00:05:08,410
actually give certain amp pages ice

00:05:06,370 --> 00:05:10,330
little badge on search which shows it's

00:05:08,410 --> 00:05:11,830
an amp page so some of this has some

00:05:10,330 --> 00:05:14,440
truth to it but it makes me sad because

00:05:11,830 --> 00:05:16,840
I wasn't why app was created it wasn't

00:05:14,440 --> 00:05:18,910
to make these kind of sort of haphazard

00:05:16,840 --> 00:05:22,600
sites that aren't great and maybe load

00:05:18,910 --> 00:05:24,490
faster in some way so what is amp I keep

00:05:22,600 --> 00:05:27,370
saying this word amp what is this thing

00:05:24,490 --> 00:05:29,680
simply put AMPAS web component framework

00:05:27,370 --> 00:05:31,570
and it's web components and it was

00:05:29,680 --> 00:05:33,880
designed several years ago to create

00:05:31,570 --> 00:05:36,100
websites they were easier to make and

00:05:33,880 --> 00:05:37,840
then faster for users that was the idea

00:05:36,100 --> 00:05:40,000
it also has since then Bend up to other

00:05:37,840 --> 00:05:42,220
kinds purposes as well so for example

00:05:40,000 --> 00:05:43,330
there are now amp stories out there the

00:05:42,220 --> 00:05:45,940
kind of story format that snapchat

00:05:43,330 --> 00:05:48,550
pioneered Instagram made famous on

00:05:45,940 --> 00:05:51,190
Instagram these open web stories now

00:05:48,550 --> 00:05:53,290
exist powered by amp also if it's being

00:05:51,190 --> 00:05:55,360
used in emails now they're being a bit

00:05:53,290 --> 00:05:57,190
of the web power embedded into emails

00:05:55,360 --> 00:05:59,680
little features you can do with amp

00:05:57,190 --> 00:06:01,390
components like refreshing data or

00:05:59,680 --> 00:06:03,220
sending things to a server somewhere

00:06:01,390 --> 00:06:06,010
those kinds of things are possible now

00:06:03,220 --> 00:06:08,200
an email using amp and also because amp

00:06:06,010 --> 00:06:10,540
makes things faster in general and it

00:06:08,200 --> 00:06:12,820
conserve discourages extra JavaScript

00:06:10,540 --> 00:06:14,770
and it's been useful making ads as

00:06:12,820 --> 00:06:17,320
they're less of intrusive and ads that

00:06:14,770 --> 00:06:19,420
also load more quickly for users so I

00:06:17,320 --> 00:06:21,010
said AMPAS web components here are a few

00:06:19,420 --> 00:06:23,530
of the possible components you can use

00:06:21,010 --> 00:06:25,660
in one big jumble would be a quiz later

00:06:23,530 --> 00:06:27,310
on now this is just to show you some

00:06:25,660 --> 00:06:30,070
examples of the kinds of things amp can

00:06:27,310 --> 00:06:32,680
do so it can embed things it can embed

00:06:30,070 --> 00:06:35,140
tweets and there's music players and is

00:06:32,680 --> 00:06:36,870
also interactive app components there's

00:06:35,140 --> 00:06:40,270
iframes there's all kinds of things

00:06:36,870 --> 00:06:41,680
here's what hamper

00:06:40,270 --> 00:06:43,930
it's basically

00:06:41,680 --> 00:06:44,710
EML framework so here's an example web

00:06:43,930 --> 00:06:46,900
components

00:06:44,710 --> 00:06:48,460
this here embeds a YouTube video on your

00:06:46,900 --> 00:06:50,889
site instead of using YouTube's

00:06:48,460 --> 00:06:52,419
JavaScript use this component instead a

00:06:50,889 --> 00:06:54,370
few things that are notable about this

00:06:52,419 --> 00:06:56,259
over here the first attribute is called

00:06:54,370 --> 00:06:57,789
layout it says lay it equals responsive

00:06:56,259 --> 00:06:59,320
when they have amp scenes this

00:06:57,789 --> 00:07:01,509
automatically will take your YouTube

00:06:59,320 --> 00:07:03,370
video it will shrink it and grow it as

00:07:01,509 --> 00:07:05,620
the container shrinks and grows it does

00:07:03,370 --> 00:07:06,729
is all for you out of the box the width

00:07:05,620 --> 00:07:08,020
and height are there because the

00:07:06,729 --> 00:07:10,090
amplitude are the size of things in

00:07:08,020 --> 00:07:12,039
advance that way amp can leave space for

00:07:10,090 --> 00:07:13,600
things as your page loads up so in this

00:07:12,039 --> 00:07:15,729
case YouTube videos over here on the

00:07:13,600 --> 00:07:17,740
page it leaves a blank space for it and

00:07:15,729 --> 00:07:19,840
then as it loads up it pops into its

00:07:17,740 --> 00:07:22,060
space so amp guarantee is stable layout

00:07:19,840 --> 00:07:24,039
on your page as well and then you

00:07:22,060 --> 00:07:26,020
provide the video ID on the bottom over

00:07:24,039 --> 00:07:28,539
there and it just kind of sticks the

00:07:26,020 --> 00:07:30,970
YouTube video on your site and that's it

00:07:28,539 --> 00:07:32,710
a simple exemple and get much more

00:07:30,970 --> 00:07:35,440
sophisticated than this but this is

00:07:32,710 --> 00:07:37,810
simply what it is if you make a valid

00:07:35,440 --> 00:07:39,520
amp page that follows amps rules there

00:07:37,810 --> 00:07:41,440
are also our web spiders out there like

00:07:39,520 --> 00:07:42,970
Google's and like bings they're looking

00:07:41,440 --> 00:07:44,680
out there for pages that are valid amp

00:07:42,970 --> 00:07:46,120
which don't have the JavaScript in the

00:07:44,680 --> 00:07:47,889
wrong places that will make performance

00:07:46,120 --> 00:07:49,510
worse which don't have too much CSS

00:07:47,889 --> 00:07:52,300
which follow the various rules for

00:07:49,510 --> 00:07:54,130
accessibility that happen Courage's if

00:07:52,300 --> 00:07:56,590
you follow these rules when spiders will

00:07:54,130 --> 00:07:59,229
find these things and they will tell amp

00:07:56,590 --> 00:08:01,330
caches to cast your documents on the

00:07:59,229 --> 00:08:04,210
caches so for example on Google's app

00:08:01,330 --> 00:08:06,039
cache Google will find these things and

00:08:04,210 --> 00:08:08,080
then serve your page from its own

00:08:06,039 --> 00:08:10,000
servers it gets a little bit of a badge

00:08:08,080 --> 00:08:11,740
there on search and then in some cases

00:08:10,000 --> 00:08:13,750
it will be get pre-rendered in an iframe

00:08:11,740 --> 00:08:15,520
so it loads up almost immediately when

00:08:13,750 --> 00:08:18,070
the user clicks on it another cases it

00:08:15,520 --> 00:08:20,199
just loads a lot faster so amp has this

00:08:18,070 --> 00:08:22,330
sort of search tie-in as well

00:08:20,199 --> 00:08:24,759
so amp really is this thing about

00:08:22,330 --> 00:08:27,330
components and about validation if you

00:08:24,759 --> 00:08:29,590
want to get into these amp caches

00:08:27,330 --> 00:08:31,599
impulse is used in various contexts

00:08:29,590 --> 00:08:33,339
these days it was used at first for

00:08:31,599 --> 00:08:34,990
simple publisher sites but now we're

00:08:33,339 --> 00:08:36,520
seeing it all over the place so on the

00:08:34,990 --> 00:08:39,339
left is an e-commerce example this is

00:08:36,520 --> 00:08:41,649
Aliexpress you know Alibaba the very

00:08:39,339 --> 00:08:43,029
large Chinese company they made it they

00:08:41,649 --> 00:08:44,610
made an ecommerce experience for mobile

00:08:43,029 --> 00:08:46,959
sites with amp a couple of years ago

00:08:44,610 --> 00:08:48,720
Alibaba is a very large company and it's

00:08:46,959 --> 00:08:50,589
been pretty good for them in production

00:08:48,720 --> 00:08:52,060
various interactive features are

00:08:50,589 --> 00:08:53,890
possible in amp you see the second

00:08:52,060 --> 00:08:54,970
example there or something from SB

00:08:53,890 --> 00:08:57,370
Nation the

00:08:54,970 --> 00:08:58,779
quiz they're done with amp and as many

00:08:57,370 --> 00:09:00,879
components now like the one on the far

00:08:58,779 --> 00:09:03,129
right there that have nice UI features

00:09:00,879 --> 00:09:05,139
like this automatic lightbox thing over

00:09:03,129 --> 00:09:07,120
here again doing things you can do as a

00:09:05,139 --> 00:09:08,800
programmer yourself but amp tries to

00:09:07,120 --> 00:09:13,660
make them faster for you and easier for

00:09:08,800 --> 00:09:15,790
you so also when app was first created

00:09:13,660 --> 00:09:17,889
is used in this pared approach where

00:09:15,790 --> 00:09:19,779
people would make an app page and also a

00:09:17,889 --> 00:09:21,610
regular desktop page and use both these

00:09:19,779 --> 00:09:22,930
pages together but we're seeing that

00:09:21,610 --> 00:09:25,269
more and more it's easier to have one

00:09:22,930 --> 00:09:26,980
page than two pages so sites out there

00:09:25,269 --> 00:09:29,050
like Action Network for example are

00:09:26,980 --> 00:09:30,310
making their sites amp all the time so

00:09:29,050 --> 00:09:32,410
this is an example of a page here which

00:09:30,310 --> 00:09:35,259
is responsive working on desktop and

00:09:32,410 --> 00:09:37,269
mobile all created with amp that's the

00:09:35,259 --> 00:09:38,889
basic overview of amp but now for more

00:09:37,269 --> 00:09:41,259
details about amp I want to bring up

00:09:38,889 --> 00:09:44,709
over here my colleague Chris to discuss

00:09:41,259 --> 00:09:46,209
much more detail like that that's the

00:09:44,709 --> 00:09:48,370
slide for you to your home base server

00:09:46,209 --> 00:09:50,230
yeah that's that's good hi I'm Chris

00:09:48,370 --> 00:09:52,720
it's very nice to meet you all I'm a

00:09:50,230 --> 00:09:53,829
performance engineer at Google my job is

00:09:52,720 --> 00:09:56,680
to try to make the internet faster

00:09:53,829 --> 00:09:59,439
specifically my goal is 1% faster for

00:09:56,680 --> 00:10:01,029
all users every single year so I work on

00:09:59,439 --> 00:10:05,379
lots of open-source technologies and

00:10:01,029 --> 00:10:07,720
frameworks but I also work on amp I want

00:10:05,379 --> 00:10:08,860
to talk a little bit about improving the

00:10:07,720 --> 00:10:11,439
return on investment for your

00:10:08,860 --> 00:10:13,360
development time we think that amp can

00:10:11,439 --> 00:10:15,129
support this concept of the accelerated

00:10:13,360 --> 00:10:16,959
developer workflows to allow you to

00:10:15,129 --> 00:10:19,329
focus more on the content and the things

00:10:16,959 --> 00:10:23,410
that make your domains unique and less

00:10:19,329 --> 00:10:25,149
on your infrastructure but first a brief

00:10:23,410 --> 00:10:26,589
aside we talked about amp but not the

00:10:25,149 --> 00:10:29,199
amp project the amp project as a whole

00:10:26,589 --> 00:10:31,449
is larger than just the web component

00:10:29,199 --> 00:10:34,689
framework amps mission is to try to make

00:10:31,449 --> 00:10:37,029
a user focused format for the web not

00:10:34,689 --> 00:10:39,220
locked within walled gardens available

00:10:37,029 --> 00:10:42,009
as HTML documents that render within any

00:10:39,220 --> 00:10:44,500
browser and we think by doing this we

00:10:42,009 --> 00:10:48,600
can sustain a healthy open web ecosystem

00:10:44,500 --> 00:10:48,600
for merchants publishers and advertisers

00:10:48,930 --> 00:10:56,649
if you're using amp you can also use it

00:10:53,050 --> 00:10:59,589
across many different surfaces sorry my

00:10:56,649 --> 00:11:01,569
notes are very large here so the the

00:10:59,589 --> 00:11:03,399
surface is that a bin kind of briefly

00:11:01,569 --> 00:11:05,740
touched on you can make websites using

00:11:03,399 --> 00:11:08,439
amp technologies you can make stories

00:11:05,740 --> 00:11:10,540
which are rich visual storytelling tools

00:11:08,439 --> 00:11:13,839
you can make advertisements that use the

00:11:10,540 --> 00:11:15,699
same amp runtime in cash as documents

00:11:13,839 --> 00:11:16,149
and you can also create interactive

00:11:15,699 --> 00:11:18,639
emails

00:11:16,149 --> 00:11:22,360
interactive emails is fairly new and I

00:11:18,639 --> 00:11:24,370
think also very interesting so in a good

00:11:22,360 --> 00:11:26,319
example of this is you can respond in

00:11:24,370 --> 00:11:28,809
line with in your email client to a

00:11:26,319 --> 00:11:30,699
Google Doc directly without having to

00:11:28,809 --> 00:11:33,490
leave your email client and go to the

00:11:30,699 --> 00:11:38,920
doc no waiting 10 seconds for the Google

00:11:33,490 --> 00:11:41,199
Doc to load just reply instantly amp

00:11:38,920 --> 00:11:43,000
stories are captivating and beautiful

00:11:41,199 --> 00:11:44,679
because they use the landscape they use

00:11:43,000 --> 00:11:46,420
the format the vertical format that your

00:11:44,679 --> 00:11:49,149
phone is designed with the way that we

00:11:46,420 --> 00:11:50,709
all consume format on our devices this

00:11:49,149 --> 00:11:53,050
means that we can pair that with great

00:11:50,709 --> 00:11:55,120
rich visual imagery and we can get a

00:11:53,050 --> 00:11:59,410
good experience for users of all sorts

00:11:55,120 --> 00:12:02,170
of different devices but amp works

00:11:59,410 --> 00:12:04,240
across all sorts of things not just

00:12:02,170 --> 00:12:05,139
mobile phones but browsers and desktop

00:12:04,240 --> 00:12:08,110
machines as well

00:12:05,139 --> 00:12:10,929
it supports every single user agent we

00:12:08,110 --> 00:12:13,329
can there are course limitations we

00:12:10,929 --> 00:12:16,000
can't support ie8 anymore but we can

00:12:13,329 --> 00:12:17,920
support IE 10 which is a huge

00:12:16,000 --> 00:12:23,529
compatibility matrix that is not found

00:12:17,920 --> 00:12:25,509
across many technologies and if you were

00:12:23,529 --> 00:12:28,059
looking at how a high-level view of how

00:12:25,509 --> 00:12:31,089
amp works this is kind of it you've got

00:12:28,059 --> 00:12:32,709
origins that contain amp documents those

00:12:31,089 --> 00:12:35,079
amp documents can either be served

00:12:32,709 --> 00:12:39,579
directly from the origin or via a cache

00:12:35,079 --> 00:12:42,309
that is a distributed CDN by huge CDN

00:12:39,579 --> 00:12:44,679
partners then you have devices that will

00:12:42,309 --> 00:12:46,529
pre render that content to make it feel

00:12:44,679 --> 00:12:51,100
almost instant the moment you touch it

00:12:46,529 --> 00:12:53,529
an amp is really great as a result of

00:12:51,100 --> 00:12:55,059
this instant pre loading for a lot of

00:12:53,529 --> 00:12:57,370
things but it's not perfect for

00:12:55,059 --> 00:12:59,769
everything if someone comes up and says

00:12:57,370 --> 00:13:01,569
to you there's one framework or one

00:12:59,769 --> 00:13:02,470
technology that can build every single

00:13:01,569 --> 00:13:04,689
thing on the planet

00:13:02,470 --> 00:13:07,209
you should call them out for it they're

00:13:04,689 --> 00:13:09,790
wrong the web is an open healthy

00:13:07,209 --> 00:13:11,949
ecosystem because of so many tools that

00:13:09,790 --> 00:13:12,829
work together and different technologies

00:13:11,949 --> 00:13:15,350
and different approach

00:13:12,829 --> 00:13:17,749
amp is no different we think amp is

00:13:15,350 --> 00:13:20,179
great for content focused experiences

00:13:17,749 --> 00:13:23,410
things that are focused more on bringing

00:13:20,179 --> 00:13:25,970
information to users but not say Gmail

00:13:23,410 --> 00:13:28,100
so as a result you should use amp on

00:13:25,970 --> 00:13:30,019
things like article pages and product

00:13:28,100 --> 00:13:31,790
details but if you have more

00:13:30,019 --> 00:13:34,399
sophisticated workflows like say

00:13:31,790 --> 00:13:36,189
settings pages or shopping carts or

00:13:34,399 --> 00:13:38,989
you've got advanced search capabilities

00:13:36,189 --> 00:13:40,459
amp isn't a great fit there you should

00:13:38,989 --> 00:13:41,749
use a different technology you should

00:13:40,459 --> 00:13:46,790
use something that's more fitting to

00:13:41,749 --> 00:13:50,209
that use case amp is an open source

00:13:46,790 --> 00:13:52,339
technology I may work at Google but amp

00:13:50,209 --> 00:13:55,100
is not a Google product and I think

00:13:52,339 --> 00:13:56,689
that's very important to reinforce the

00:13:55,100 --> 00:13:59,059
amp project is open source

00:13:56,689 --> 00:14:01,610
it's joined the open J's foundation and

00:13:59,059 --> 00:14:03,889
we think as a result of this it will

00:14:01,610 --> 00:14:07,309
make it much easier to use in a long

00:14:03,889 --> 00:14:09,559
term we have public meetings for all of

00:14:07,309 --> 00:14:11,329
our working groups I lead the UI and the

00:14:09,559 --> 00:14:13,489
performance working group ones there's

00:14:11,329 --> 00:14:15,769
ones for outreach as well as several of

00:14:13,489 --> 00:14:17,540
the facets we would love to have new

00:14:15,769 --> 00:14:21,860
people joining and helping us make a

00:14:17,540 --> 00:14:24,670
better experience of the web I won't

00:14:21,860 --> 00:14:26,540
briefly talk about amp as a service or

00:14:24,670 --> 00:14:30,949
affectionally how you can worry less

00:14:26,540 --> 00:14:33,889
with amp here the segment's they'll

00:14:30,949 --> 00:14:36,139
briefly dive into as fast as I possibly

00:14:33,889 --> 00:14:38,389
can get through them more content less

00:14:36,139 --> 00:14:40,720
code caching and distribution being

00:14:38,389 --> 00:14:44,709
always up to date guaranteed performance

00:14:40,720 --> 00:14:47,869
work Erised JavaScript and PWI support

00:14:44,709 --> 00:14:48,769
so more content and less code one of the

00:14:47,869 --> 00:14:50,329
things that's really interesting and

00:14:48,769 --> 00:14:51,649
been touched on this is that amp is not

00:14:50,329 --> 00:14:54,079
a JavaScript framework it's an HTML

00:14:51,649 --> 00:14:56,660
framework and the intent here is to

00:14:54,079 --> 00:14:58,369
allow you to express your interactions

00:14:56,660 --> 00:15:00,649
and all the complexities of those types

00:14:58,369 --> 00:15:02,990
of documents but enrich them in a way

00:15:00,649 --> 00:15:05,059
that is that happens over time

00:15:02,990 --> 00:15:06,769
it doesn't require a large amount of

00:15:05,059 --> 00:15:09,709
JavaScript upfront to be functional and

00:15:06,769 --> 00:15:11,989
usable but as a result there's a

00:15:09,709 --> 00:15:14,389
trade-off and if you look at what amp

00:15:11,989 --> 00:15:15,529
kind of lies in this matrix here we

00:15:14,389 --> 00:15:17,749
think this is a fairly realistic

00:15:15,529 --> 00:15:20,149
representation of it vanilla JavaScript

00:15:17,749 --> 00:15:21,829
you can do almost anything unless you

00:15:20,149 --> 00:15:24,919
need web assembly then you can do

00:15:21,829 --> 00:15:26,059
anything with a J's library

00:15:24,919 --> 00:15:26,420
you probably don't write a lot of

00:15:26,059 --> 00:15:27,740
Village

00:15:26,420 --> 00:15:31,010
javascript most people don't anymore

00:15:27,740 --> 00:15:33,560
when it comes to front-end documents you

00:15:31,010 --> 00:15:35,750
can use JSI very like a react or pre-act

00:15:33,560 --> 00:15:37,639
and you're able to achieve a lot of that

00:15:35,750 --> 00:15:41,480
functionality that you wanted with a

00:15:37,639 --> 00:15:43,220
little bit less complexity amp pulls the

00:15:41,480 --> 00:15:44,750
complexity down significantly but as a

00:15:43,220 --> 00:15:47,060
result of that it's slightly less

00:15:44,750 --> 00:15:48,680
flexible and we think this is an

00:15:47,060 --> 00:15:52,880
interesting trade-off for large swathes

00:15:48,680 --> 00:15:54,470
of the web if you're familiar with

00:15:52,880 --> 00:15:56,089
building content focused websites and

00:15:54,470 --> 00:15:58,970
this is a bit what your time looks like

00:15:56,089 --> 00:16:01,100
if you're using a JavaScript framework a

00:15:58,970 --> 00:16:03,470
lot of time spent on performance

00:16:01,100 --> 00:16:06,410
optimization and build tools and babel

00:16:03,470 --> 00:16:08,570
configuration and web pack it's a lot of

00:16:06,410 --> 00:16:10,250
work and a lot of expensive time that

00:16:08,570 --> 00:16:14,000
you could be using to focus on your

00:16:10,250 --> 00:16:15,620
content instead with amp our partners

00:16:14,000 --> 00:16:17,750
that have used it have seen a shift in

00:16:15,620 --> 00:16:20,000
the way that they work this is more like

00:16:17,750 --> 00:16:21,980
their work style now they spend far more

00:16:20,000 --> 00:16:26,510
of their time on things that are custom

00:16:21,980 --> 00:16:28,399
and unique to their domains some of the

00:16:26,510 --> 00:16:29,139
app components also have a little bit of

00:16:28,399 --> 00:16:32,019
superpower

00:16:29,139 --> 00:16:34,160
so amp analytics is a great example

00:16:32,019 --> 00:16:35,779
analytics are incredibly important to

00:16:34,160 --> 00:16:37,310
any page it's making money because you

00:16:35,779 --> 00:16:39,620
need to be able to track how it's being

00:16:37,310 --> 00:16:42,040
seen and so as a result what happens

00:16:39,620 --> 00:16:44,690
often is you have several of them and

00:16:42,040 --> 00:16:47,690
they all starve and compete for

00:16:44,690 --> 00:16:50,300
attention each vendor is monitoring the

00:16:47,690 --> 00:16:52,459
Dom each vendor spending CPU cycles

00:16:50,300 --> 00:16:54,470
capturing information none of them are

00:16:52,459 --> 00:16:57,380
coordinating with one another and as a

00:16:54,470 --> 00:17:01,370
result you get huge micro tasks chunks

00:16:57,380 --> 00:17:03,370
on browsers so amp changes this slightly

00:17:01,370 --> 00:17:06,530
because there's an intermediary later

00:17:03,370 --> 00:17:08,569
amp analytics measures once for all

00:17:06,530 --> 00:17:10,579
vendors and then distributes those

00:17:08,569 --> 00:17:12,949
responses to the vendors using the most

00:17:10,579 --> 00:17:15,770
efficient form that it can to each

00:17:12,949 --> 00:17:21,230
vendor so for instance it prefers beacon

00:17:15,770 --> 00:17:23,990
over using HTTP XML HTTP requests and in

00:17:21,230 --> 00:17:25,939
order to use one of these vendors with

00:17:23,990 --> 00:17:27,949
amp there's a collaboration that happens

00:17:25,939 --> 00:17:30,140
between people on the amp project and

00:17:27,949 --> 00:17:32,179
the vendors and that makes sure that

00:17:30,140 --> 00:17:34,700
those things work efficiently only have

00:17:32,179 --> 00:17:36,320
documents that might make it seem like

00:17:34,700 --> 00:17:37,850
we want to have very many menders that

00:17:36,320 --> 00:17:39,650
work with amp analytics but the great

00:17:37,850 --> 00:17:43,400
news is that there's already 100

00:17:39,650 --> 00:17:45,650
do and this is growing by the day there

00:17:43,400 --> 00:17:48,050
isn't a problem about a specific vendor

00:17:45,650 --> 00:17:52,460
at this point most of them are supported

00:17:48,050 --> 00:17:54,890
but done performant Li the next item is

00:17:52,460 --> 00:17:56,450
being always up to date when you npm

00:17:54,890 --> 00:17:58,910
install something you tend to get a hat

00:17:56,450 --> 00:18:00,230
version of something like react but

00:17:58,910 --> 00:18:02,780
that's the version that you ship and

00:18:00,230 --> 00:18:05,510
until you update react you don't ship a

00:18:02,780 --> 00:18:07,670
new version this is great in many ways

00:18:05,510 --> 00:18:09,620
but there are also trade offs it means

00:18:07,670 --> 00:18:11,570
that the the react team for instance

00:18:09,620 --> 00:18:13,910
couldn't operate it fully independently

00:18:11,570 --> 00:18:15,590
from your website they would need you to

00:18:13,910 --> 00:18:18,560
pull the new version of react in in

00:18:15,590 --> 00:18:21,620
order to leverage their new code on your

00:18:18,560 --> 00:18:25,280
site amp acts differently you point to

00:18:21,620 --> 00:18:26,930
the amp CDN to grab JavaScript the amp

00:18:25,280 --> 00:18:28,880
has a cadence and a release cycle on

00:18:26,930 --> 00:18:30,680
different release branches that allows

00:18:28,880 --> 00:18:33,050
you to pick how flexible you want to be

00:18:30,680 --> 00:18:35,210
but you always get an up-to-date version

00:18:33,050 --> 00:18:38,060
of amp one that changes and improves

00:18:35,210 --> 00:18:40,670
over time a good example of this is

00:18:38,060 --> 00:18:42,320
animation support animations may start

00:18:40,670 --> 00:18:45,020
by implemented being implemented

00:18:42,320 --> 00:18:47,300
directly with CSS but over time without

00:18:45,020 --> 00:18:50,900
changing the API contract move to being

00:18:47,300 --> 00:18:52,580
implemented by Houdini but how do we

00:18:50,900 --> 00:18:54,110
make sure we don't break these documents

00:18:52,580 --> 00:18:57,290
because there are over a hundred billion

00:18:54,110 --> 00:18:59,270
of them in the web we can't break them

00:18:57,290 --> 00:19:01,850
is the answer and so we do a lot of

00:18:59,270 --> 00:19:04,070
testing a lot of testing we have one of

00:19:01,850 --> 00:19:06,170
the biggest test matrix that you've ever

00:19:04,070 --> 00:19:08,360
seen for a front-end framework it's not

00:19:06,170 --> 00:19:10,340
perfect of course that we do our

00:19:08,360 --> 00:19:13,460
absolute best and we feel reasonably

00:19:10,340 --> 00:19:14,930
confident here for four years we've been

00:19:13,460 --> 00:19:19,580
doing this and we've not had to roll

00:19:14,930 --> 00:19:21,380
back a crazy number of times amp is

00:19:19,580 --> 00:19:23,540
built for speed from the very core

00:19:21,380 --> 00:19:26,360
concepts of how it works it's a very

00:19:23,540 --> 00:19:28,280
small runtime that guarantees static

00:19:26,360 --> 00:19:29,930
layout on the on a document and allows

00:19:28,280 --> 00:19:33,710
it to do some performance enhancements

00:19:29,930 --> 00:19:35,150
along the way however if you're like me

00:19:33,710 --> 00:19:37,820
you've probably had this conversation a

00:19:35,150 --> 00:19:40,160
few times I just want one more beacon

00:19:37,820 --> 00:19:42,140
library on the page or can you just add

00:19:40,160 --> 00:19:44,150
that one more third-party vendor and

00:19:42,140 --> 00:19:46,280
every single time this happens I feel

00:19:44,150 --> 00:19:48,320
like sab Batman who realized that he

00:19:46,280 --> 00:19:51,770
picked the wrong comic universe to build

00:19:48,320 --> 00:19:53,720
movies in well amp is

00:19:51,770 --> 00:19:55,370
also a technical tool for you if

00:19:53,720 --> 00:19:58,190
something doesn't work in amp you can't

00:19:55,370 --> 00:19:59,630
put it on a valid amp document and in

00:19:58,190 --> 00:20:01,520
order for that thing to be on a valid

00:19:59,630 --> 00:20:04,280
amp document it has to meet amps

00:20:01,520 --> 00:20:05,800
performance guarantees this means that

00:20:04,280 --> 00:20:08,600
we work with those vendors to ensure

00:20:05,800 --> 00:20:12,620
their code is performant and we'll work

00:20:08,600 --> 00:20:14,240
on across the corpus of documents a good

00:20:12,620 --> 00:20:16,730
example of this is the above-the-fold

00:20:14,240 --> 00:20:18,740
layout system which ensures that only

00:20:16,730 --> 00:20:20,420
the JavaScript that is necessary for

00:20:18,740 --> 00:20:23,090
where you're looking at any given time

00:20:20,420 --> 00:20:25,820
on a page is used because we have a

00:20:23,090 --> 00:20:27,680
static layout guarantee an amp we can

00:20:25,820 --> 00:20:30,620
effectively understand when a component

00:20:27,680 --> 00:20:31,970
will become on-screen and in advance of

00:20:30,620 --> 00:20:35,770
it becoming on-screen fetch the

00:20:31,970 --> 00:20:38,630
JavaScript eval and parse it lazily

00:20:35,770 --> 00:20:41,930
every one of amps constructors claw in

00:20:38,630 --> 00:20:44,090
their classes does nothing the goal is

00:20:41,930 --> 00:20:48,220
to just set it up to be invoked lazily

00:20:44,090 --> 00:20:50,890
later and as a result we can also

00:20:48,220 --> 00:20:53,750
deprioritize specific content on a page

00:20:50,890 --> 00:20:56,330
so if we're a little CPU bound at any

00:20:53,750 --> 00:20:58,750
given time we can tell the ad unit that

00:20:56,330 --> 00:21:01,700
it's going to get a bit less CPU and

00:20:58,750 --> 00:21:02,840
that's great for user experience because

00:21:01,700 --> 00:21:07,280
it means the article remains

00:21:02,840 --> 00:21:09,290
consistently usable now computers have

00:21:07,280 --> 00:21:11,360
multiple CPU cores you can do multiple

00:21:09,290 --> 00:21:13,190
things in tandem but the browser doesn't

00:21:11,360 --> 00:21:15,170
really work that way in general it tends

00:21:13,190 --> 00:21:17,270
to be single threaded there are

00:21:15,170 --> 00:21:18,530
exceptions of course to this so if you

00:21:17,270 --> 00:21:19,760
haven't if you have JavaScript that's

00:21:18,530 --> 00:21:21,500
interfering with the main threads

00:21:19,760 --> 00:21:23,920
processing it's very difficult to

00:21:21,500 --> 00:21:26,480
understand how to process the next input

00:21:23,920 --> 00:21:29,810
looks a little like this and it ends up

00:21:26,480 --> 00:21:31,850
with something called Rage clicks brief

00:21:29,810 --> 00:21:34,670
aside it's a bit like how the DMV used

00:21:31,850 --> 00:21:36,410
to work you'd go to the DMV you'd wait

00:21:34,670 --> 00:21:38,180
in line until you got to the front desk

00:21:36,410 --> 00:21:41,210
they've asked you to fill out a form and

00:21:38,180 --> 00:21:42,920
then you could move on but most offices

00:21:41,210 --> 00:21:45,320
realize that this wasn't efficient and

00:21:42,920 --> 00:21:47,210
so they move to the dr. model and the

00:21:45,320 --> 00:21:49,370
dr. model is effectively that you come

00:21:47,210 --> 00:21:51,560
in they give you a form you go sit down

00:21:49,370 --> 00:21:53,270
and you fill out the form and then you

00:21:51,560 --> 00:21:55,460
take it back and you go get your results

00:21:53,270 --> 00:21:57,440
the result is that they're able to

00:21:55,460 --> 00:21:59,570
process have more people filling out

00:21:57,440 --> 00:22:01,930
forms simultaneously instead of a single

00:21:59,570 --> 00:22:01,930
person

00:22:02,060 --> 00:22:05,980
been possible on the front end in the

00:22:03,590 --> 00:22:08,300
web for a long time - with web workers

00:22:05,980 --> 00:22:09,790
we just haven't used them because

00:22:08,300 --> 00:22:13,940
they're difficult to use

00:22:09,790 --> 00:22:16,790
so amp makes this transparent most of

00:22:13,940 --> 00:22:18,680
amp can run within a worker and we think

00:22:16,790 --> 00:22:22,750
as a result of this we can offload a lot

00:22:18,680 --> 00:22:24,740
of the CPU time from the main thread

00:22:22,750 --> 00:22:26,560
that's where I was supposed to say that

00:22:24,740 --> 00:22:29,630
sorry

00:22:26,560 --> 00:22:33,020
so worker as JavaScript we think is made

00:22:29,630 --> 00:22:35,120
much easier with amp and quickly 2 amp

00:22:33,020 --> 00:22:37,340
doesn't hate JavaScript amp loves

00:22:35,120 --> 00:22:40,670
JavaScript all of amp is written in

00:22:37,340 --> 00:22:42,770
JavaScript you can use JavaScript in amp

00:22:40,670 --> 00:22:44,150
just because it's an HTML framework

00:22:42,770 --> 00:22:46,790
doesn't mean you can't use JavaScript

00:22:44,150 --> 00:22:49,190
it's just we think that the future of

00:22:46,790 --> 00:22:50,540
JavaScript isn't on the main thread we

00:22:49,190 --> 00:22:52,730
think the future of javascript in a

00:22:50,540 --> 00:22:53,960
browser runs off main thread and only

00:22:52,730 --> 00:22:57,380
interacts with the main thread as

00:22:53,960 --> 00:22:59,510
necessary the way that this works in amp

00:22:57,380 --> 00:23:01,160
is that we built an implementation of

00:22:59,510 --> 00:23:04,400
the Dom from scratch that runs and

00:23:01,160 --> 00:23:06,350
worker so you load your application code

00:23:04,400 --> 00:23:09,380
that's specific to your domain it runs

00:23:06,350 --> 00:23:11,750
within a worker it has no idea that it's

00:23:09,380 --> 00:23:13,820
not running on the main thread and as a

00:23:11,750 --> 00:23:15,830
result the main thread stays less

00:23:13,820 --> 00:23:18,880
contentious there's less competing

00:23:15,830 --> 00:23:21,470
resources on that on the main thread and

00:23:18,880 --> 00:23:24,410
this changes that equation I talked

00:23:21,470 --> 00:23:26,300
about earlier with amp script allowing

00:23:24,410 --> 00:23:28,370
you to run your custom code off the main

00:23:26,300 --> 00:23:29,810
thread you get it you get to retain the

00:23:28,370 --> 00:23:32,240
productivity benefits but you get a

00:23:29,810 --> 00:23:33,740
little bit more flexible and as a result

00:23:32,240 --> 00:23:35,930
you start to look a little bit more like

00:23:33,740 --> 00:23:39,430
this ant moves to be a bit more capable

00:23:35,930 --> 00:23:42,170
without being more complex

00:23:39,430 --> 00:23:43,700
so what's supported in amp script

00:23:42,170 --> 00:23:45,260
because it can't be perfect right there

00:23:43,700 --> 00:23:47,600
are things that are synchronous about

00:23:45,260 --> 00:23:48,980
the Dom and you're in a worker that

00:23:47,600 --> 00:23:51,590
can't be synchronously known at that

00:23:48,980 --> 00:23:53,840
point it's a really good question the

00:23:51,590 --> 00:23:55,340
compact tables here we're also happy to

00:23:53,840 --> 00:23:57,290
answer questions about this there's a

00:23:55,340 --> 00:23:59,440
few people here that work on amp right

00:23:57,290 --> 00:23:59,440
now

00:24:00,120 --> 00:24:04,050
and distribution is also built into amp

00:24:02,400 --> 00:24:07,140
it's an important part about how it

00:24:04,050 --> 00:24:09,780
stays performant amp pages aren't just

00:24:07,140 --> 00:24:12,810
web documents they're ultra portable

00:24:09,780 --> 00:24:14,850
embeddable content units the idea is to

00:24:12,810 --> 00:24:17,820
be able to distribute them and load them

00:24:14,850 --> 00:24:20,490
independently of a route origin and this

00:24:17,820 --> 00:24:21,930
is what we call instant loading so for

00:24:20,490 --> 00:24:24,240
instance here on a Google search results

00:24:21,930 --> 00:24:26,340
page amp documents can be loaded in the

00:24:24,240 --> 00:24:29,700
background so when the user clicks on

00:24:26,340 --> 00:24:31,290
them they're instantly available to

00:24:29,700 --> 00:24:33,600
support this amp has something called a

00:24:31,290 --> 00:24:36,060
pre render mode internally inside of it

00:24:33,600 --> 00:24:37,890
all of the components do not expose this

00:24:36,060 --> 00:24:42,000
through their API contract but deal with

00:24:37,890 --> 00:24:43,590
it internally pre-rendering comes with a

00:24:42,000 --> 00:24:45,270
bunch of caches though that are

00:24:43,590 --> 00:24:47,790
difficult to do unless you design for it

00:24:45,270 --> 00:24:49,350
upfront so if you were to pre render in

00:24:47,790 --> 00:24:52,080
advance you would leak a person's

00:24:49,350 --> 00:24:55,200
identity and we think this is terrible

00:24:52,080 --> 00:24:57,990
for users so if I went to a search

00:24:55,200 --> 00:25:00,090
results page and then I loaded a domain

00:24:57,990 --> 00:25:02,160
for noted a document from another domain

00:25:00,090 --> 00:25:04,080
I would expose who that person is to the

00:25:02,160 --> 00:25:07,350
other domain without them having clicked

00:25:04,080 --> 00:25:10,830
on it and this is why we have an amp

00:25:07,350 --> 00:25:12,840
cache the amp cache allows that document

00:25:10,830 --> 00:25:15,900
to be pre loaded safely without saying

00:25:12,840 --> 00:25:17,850
who the user is and it allows the origin

00:25:15,900 --> 00:25:21,500
then to be given the information about

00:25:17,850 --> 00:25:23,610
the user once they click on the result

00:25:21,500 --> 00:25:26,430
so it looks a little like this at the

00:25:23,610 --> 00:25:28,620
end when they're click now an xhr

00:25:26,430 --> 00:25:31,350
request can be made or a fetch and you

00:25:28,620 --> 00:25:34,980
can stitch together the sessions the two

00:25:31,350 --> 00:25:36,540
separate sessions we think this is

00:25:34,980 --> 00:25:39,480
awesome because it means you get the

00:25:36,540 --> 00:25:42,090
speed benefits of pre loading but you

00:25:39,480 --> 00:25:43,830
retain privacy you don't compromise who

00:25:42,090 --> 00:25:49,170
you are or it can't be used as an

00:25:43,830 --> 00:25:50,940
advertising signal now when you run an

00:25:49,170 --> 00:25:52,680
amp document locally on your domain and

00:25:50,940 --> 00:25:56,220
you run an amp document on the cache

00:25:52,680 --> 00:25:57,540
they're very different because there's

00:25:56,220 --> 00:26:00,000
static guarantees about how amp

00:25:57,540 --> 00:26:01,230
documents look and feel and operate the

00:26:00,000 --> 00:26:03,450
cache can perform a series of

00:26:01,230 --> 00:26:05,760
optimizations on those documents every

00:26:03,450 --> 00:26:08,300
image can be modified to be compressed

00:26:05,760 --> 00:26:10,890
in a lossless manner every part of the

00:26:08,300 --> 00:26:13,169
document as needed

00:26:10,890 --> 00:26:15,269
the in order to make this available to

00:26:13,169 --> 00:26:17,340
things besides a cache like say your

00:26:15,269 --> 00:26:19,769
canonical domain we've open-sourced the

00:26:17,340 --> 00:26:21,390
amp optimizer the amp optimizer is a

00:26:19,769 --> 00:26:24,120
series of transforms written in

00:26:21,390 --> 00:26:26,330
JavaScript that work on your documents

00:26:24,120 --> 00:26:28,740
and do pretty much what the cache does

00:26:26,330 --> 00:26:30,539
this allows you to get the benefits of

00:26:28,740 --> 00:26:36,149
the optimizations of the cache but on

00:26:30,539 --> 00:26:38,460
your local domain lastly and and PWA

00:26:36,149 --> 00:26:41,309
work really well together even better

00:26:38,460 --> 00:26:43,350
than this animated gif shows we have a

00:26:41,309 --> 00:26:45,690
one-line serviceworker that's built and

00:26:43,350 --> 00:26:48,000
customized for amp documents so you can

00:26:45,690 --> 00:26:50,309
retain that functionality immediately

00:26:48,000 --> 00:26:52,279
without having to build complexity

00:26:50,309 --> 00:26:55,769
within your serviceworker implementation

00:26:52,279 --> 00:26:58,440
and now dr. Ben thank you doing all the

00:26:55,769 --> 00:27:00,330
hard work there Chris so that was a lot

00:26:58,440 --> 00:27:01,289
of content over there if you want to

00:27:00,330 --> 00:27:02,940
hear about more of these things in

00:27:01,289 --> 00:27:05,010
detail you can come to us or their folks

00:27:02,940 --> 00:27:07,380
here work with amp or you of course can

00:27:05,010 --> 00:27:09,389
go to our site and EV which of course is

00:27:07,380 --> 00:27:10,590
created with amp'd and you can find over

00:27:09,389 --> 00:27:12,779
here many things that are useful

00:27:10,590 --> 00:27:14,789
interesting kinds of things on the site

00:27:12,779 --> 00:27:16,590
for example there are courses you can

00:27:14,789 --> 00:27:19,350
take to learn how to use amp using a

00:27:16,590 --> 00:27:21,929
project-based approach there's tools you

00:27:19,350 --> 00:27:24,570
can use to build your site better to

00:27:21,929 --> 00:27:27,149
optimize things lots of nice node

00:27:24,570 --> 00:27:29,010
modules things like that templates that

00:27:27,149 --> 00:27:30,659
are built in that you can then download

00:27:29,010 --> 00:27:34,139
and you can use to build your site

00:27:30,659 --> 00:27:38,730
quickly and of course lots of

00:27:34,139 --> 00:27:40,350
documentation examples sometimes I think

00:27:38,730 --> 00:27:42,000
actually work and interactive

00:27:40,350 --> 00:27:44,010
playgrounds you can use to try amp code

00:27:42,000 --> 00:27:47,220
out in and modify things and see what

00:27:44,010 --> 00:27:49,200
they do and if here's what we're working

00:27:47,220 --> 00:27:51,029
on in the future then come visit over

00:27:49,200 --> 00:27:53,100
here our roadmap is public because it's

00:27:51,029 --> 00:27:55,710
an open source project go to am dev

00:27:53,100 --> 00:27:58,549
slash community slash roadmap I think

00:27:55,710 --> 00:28:01,170
what's happening with amp in the future

00:27:58,549 --> 00:28:06,279
thank you very much

00:28:01,170 --> 00:28:06,279

YouTube URL: https://www.youtube.com/watch?v=QS_Zy55Kg2A


