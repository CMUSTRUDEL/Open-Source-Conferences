Title: When Porgs Scream at Webpack and Other Stories - Dominik Kundel, Twilio
Publication date: 2020-05-11
Playlist: Node + JS Interactive 2019
Description: 
	When Porgs Scream at Webpack and Other Stories - Dominik Kundel, Twilio
Speakers: Dominik Kundel
For many web developers the world of hardware is very intimidating. There is no easy way to go back from a broken to a working project state. You break something, you replace it â€” there is no Ctrl/Cmd + z. However, getting a project to work is incredibly fun and rewarding.

From an API for your coffee machine to a porg that screams every time your webpack build fails to playing games with hundreds of people at the same time, the only limit is your imagination*.

You might not leave this talk with a degree in Electrical Engineering**, but you'll learn useful basics to help you enter the wonderful world of hardware. We'll look at different ways to combine JS and hardware, from APIs all the way to JS enabled microcontrollers. All tied up with some live demos. At the end you won't be able to wait to start your own hardware adventure!

*and maybe your patience
**unless you already have one
Captions: 
	00:00:00,030 --> 00:00:06,779
so welcome everyone to when pork scream

00:00:03,300 --> 00:00:08,550
a wet pack and other stories I want to

00:00:06,779 --> 00:00:10,500
start with a question how many of you

00:00:08,550 --> 00:00:12,690
have some sort of microcontroller at

00:00:10,500 --> 00:00:14,490
home or like a Raspberry Pi or jury no

00:00:12,690 --> 00:00:16,139
anything like that now keep your hand up

00:00:14,490 --> 00:00:19,380
if you ever actually used it for

00:00:16,139 --> 00:00:21,600
anything but a blinking LED alright

00:00:19,380 --> 00:00:23,699
that's that that's a few people but not

00:00:21,600 --> 00:00:27,750
too many and so over the next 30 minutes

00:00:23,699 --> 00:00:30,300
I want to you use the time to on the one

00:00:27,750 --> 00:00:32,279
hand hopefully inspire you to use the

00:00:30,300 --> 00:00:35,309
hardware you have at home or get some if

00:00:32,279 --> 00:00:37,710
you don't and also give you an idea of

00:00:35,309 --> 00:00:39,239
how you can approach this before we

00:00:37,710 --> 00:00:40,950
start I want to introduce myself my name

00:00:39,239 --> 00:00:43,379
is Dominic I work as a developer

00:00:40,950 --> 00:00:46,469
evangelist at Twilio how many of you

00:00:43,379 --> 00:00:48,570
have heard of Twilio all right cool most

00:00:46,469 --> 00:00:52,199
of them that means like most people stop

00:00:48,570 --> 00:00:54,239
by the booth if you don't know about

00:00:52,199 --> 00:00:56,489
Trulia where a developer where like a

00:00:54,239 --> 00:00:58,890
developer platform that gives you an epi

00:00:56,489 --> 00:01:00,930
s-- to send and receive SMS include

00:00:58,890 --> 00:01:03,870
phone calls email and you kind of

00:01:00,930 --> 00:01:05,280
communication into your apps and I'm a

00:01:03,870 --> 00:01:07,650
JavaScript developer I love writing

00:01:05,280 --> 00:01:09,810
JavaScript for things like from

00:01:07,650 --> 00:01:12,330
everything from servers to browsers to

00:01:09,810 --> 00:01:15,150
building sea-ice with it and so at one

00:01:12,330 --> 00:01:17,490
point I was thinking how can I use the

00:01:15,150 --> 00:01:20,189
same skills that I have and actually

00:01:17,490 --> 00:01:23,369
control Hardware within because similar

00:01:20,189 --> 00:01:25,259
to a lot of you I had a lot of hardware

00:01:23,369 --> 00:01:29,340
at home that was just gathering dust in

00:01:25,259 --> 00:01:31,350
a drawer and so or at most was used for

00:01:29,340 --> 00:01:34,380
an LED demo and I wanted to go further

00:01:31,350 --> 00:01:36,119
than this you know more than like going

00:01:34,380 --> 00:01:37,920
to the manufacturers website copy paste

00:01:36,119 --> 00:01:40,430
some code me like cool that worked I'll

00:01:37,920 --> 00:01:43,079
do something at one point with it

00:01:40,430 --> 00:01:45,149
but I don't know as much at least for me

00:01:43,079 --> 00:01:48,060
I always thought of like hardware

00:01:45,149 --> 00:01:50,460
hacking as being not as easy as say like

00:01:48,060 --> 00:01:52,170
just hacking together a new website um

00:01:50,460 --> 00:01:54,149
because there's a lot of things that

00:01:52,170 --> 00:01:56,399
kind of play and into it one of the

00:01:54,149 --> 00:01:57,990
things as preparation like if I want to

00:01:56,399 --> 00:01:59,490
build in your website like I can just

00:01:57,990 --> 00:01:59,969
grab everything from the internet I'm

00:01:59,490 --> 00:02:02,159
good

00:01:59,969 --> 00:02:03,990
but for hardware hacking you often need

00:02:02,159 --> 00:02:06,719
the right components and then you also

00:02:03,990 --> 00:02:08,849
need to buy them so it's gonna be often

00:02:06,719 --> 00:02:10,410
definitely more costly than all the free

00:02:08,849 --> 00:02:13,050
tiers there are a lot of cloud hosts

00:02:10,410 --> 00:02:13,860
these days have the thing that scared me

00:02:13,050 --> 00:02:15,780
the most though

00:02:13,860 --> 00:02:18,810
is the fact that there's no command-z or

00:02:15,780 --> 00:02:20,010
control-z right there's no get revert if

00:02:18,810 --> 00:02:21,450
you screw something ever you screw

00:02:20,010 --> 00:02:23,190
something up I was at a hackathon where

00:02:21,450 --> 00:02:25,920
someone burned through all of their

00:02:23,190 --> 00:02:28,050
resistors at 2:00 a.m. and and at that

00:02:25,920 --> 00:02:29,700
point they had to stop you know because

00:02:28,050 --> 00:02:32,400
there's no shop open at 2:00 a.m. they

00:02:29,700 --> 00:02:34,320
can sell you some resistors but I also

00:02:32,400 --> 00:02:36,450
found that even though it's very

00:02:34,320 --> 00:02:38,580
difficult to get started with a chem

00:02:36,450 --> 00:02:40,050
incredibly rewarding these days

00:02:38,580 --> 00:02:41,820
especially with things like hot module

00:02:40,050 --> 00:02:44,190
reloading and stuff like that I feel

00:02:41,820 --> 00:02:45,870
like we grew a bit numb to successes of

00:02:44,190 --> 00:02:47,520
the code that we're writing like I'm

00:02:45,870 --> 00:02:50,130
writing some code I'm like going into

00:02:47,520 --> 00:02:52,170
the brausen already executed um you know

00:02:50,130 --> 00:02:53,820
and so like being able to interact with

00:02:52,170 --> 00:02:56,040
the physical world and writing some code

00:02:53,820 --> 00:02:59,040
running it and then seeing it actually

00:02:56,040 --> 00:03:02,220
do something at least for me is

00:02:59,040 --> 00:03:04,290
incredibly rewarding however one of the

00:03:02,220 --> 00:03:07,010
things that always got me stuck is this

00:03:04,290 --> 00:03:09,330
IDE if you ever try to do anything with

00:03:07,010 --> 00:03:12,090
hardware it's likely that you interacted

00:03:09,330 --> 00:03:14,370
with the Arduino IDE I'll never pull

00:03:12,090 --> 00:03:17,190
them problem with it per se it's just

00:03:14,370 --> 00:03:20,670
the fact that most of it is written in C

00:03:17,190 --> 00:03:24,540
C++ and I don't really remember most C

00:03:20,670 --> 00:03:26,190
C++ from University and so I would just

00:03:24,540 --> 00:03:29,010
look there and have no idea what's

00:03:26,190 --> 00:03:30,900
happening so I want to show you three

00:03:29,010 --> 00:03:33,810
ways that you can combine your existing

00:03:30,900 --> 00:03:35,580
JavaScript skills with hardware and the

00:03:33,810 --> 00:03:38,070
first one is through API some protocols

00:03:35,580 --> 00:03:40,170
so at that point basically what's

00:03:38,070 --> 00:03:42,510
happening is all your major business

00:03:40,170 --> 00:03:45,600
logic is in JavaScript and then you use

00:03:42,510 --> 00:03:47,600
API s-- to interact with the hardware by

00:03:45,600 --> 00:03:50,549
kind of interfacing with a very simple

00:03:47,600 --> 00:03:52,410
piece of code in C++ that will just

00:03:50,549 --> 00:03:55,250
interact with the components and then

00:03:52,410 --> 00:03:58,200
send the data back by the same protocol

00:03:55,250 --> 00:04:01,620
one way is through to do this is through

00:03:58,200 --> 00:04:03,840
dedicated API so some some providers

00:04:01,620 --> 00:04:06,660
like particle actually provide you with

00:04:03,840 --> 00:04:08,010
it with an API that they have if you're

00:04:06,660 --> 00:04:11,220
not familiar with particle they're in

00:04:08,010 --> 00:04:13,440
IOT hardware manufacturer that kind of

00:04:11,220 --> 00:04:16,109
focuses on having a device management

00:04:13,440 --> 00:04:19,650
platform so meaning if you have your

00:04:16,109 --> 00:04:21,239
devices all deployed you can still have

00:04:19,650 --> 00:04:24,000
remote update them and you can control

00:04:21,239 --> 00:04:25,380
them give you using their API so the way

00:04:24,000 --> 00:04:28,350
that would work is like the bottom part

00:04:25,380 --> 00:04:30,660
is C++ code where you would

00:04:28,350 --> 00:04:32,220
you find a function like brew and then

00:04:30,660 --> 00:04:34,020
he can get some arguments and then you

00:04:32,220 --> 00:04:35,910
trigger a certain function and then you

00:04:34,020 --> 00:04:37,410
trigger it using an HTTP call so by a

00:04:35,910 --> 00:04:39,150
curl or JavaScript or whatever

00:04:37,410 --> 00:04:40,830
programming language you want and that

00:04:39,150 --> 00:04:43,920
means that you can have like very very

00:04:40,830 --> 00:04:46,740
simple hardware component interactions

00:04:43,920 --> 00:04:48,710
on the C++ side that often are like

00:04:46,740 --> 00:04:50,820
sufficient enough to just copy paste and

00:04:48,710 --> 00:04:53,400
then you can have all your business

00:04:50,820 --> 00:04:56,880
logic and everything in a language that

00:04:53,400 --> 00:04:59,010
you're familiar with in the cloud or the

00:04:56,880 --> 00:05:01,500
particle API is proprietary for their

00:04:59,010 --> 00:05:03,870
stuff but there's another way to do this

00:05:01,500 --> 00:05:04,560
in a very similar way that's called mqtt

00:05:03,870 --> 00:05:07,290
which is a lightweight

00:05:04,560 --> 00:05:08,720
machine-to-machine protocol and it works

00:05:07,290 --> 00:05:12,180
on publishing and subscribing so

00:05:08,720 --> 00:05:13,890
basically as you can you subscribe to

00:05:12,180 --> 00:05:18,000
certain topics which are basically

00:05:13,890 --> 00:05:21,030
channels on on a message broker and then

00:05:18,000 --> 00:05:23,040
any kind of device can publish to that

00:05:21,030 --> 00:05:25,770
message a message broker an event and

00:05:23,040 --> 00:05:29,280
everyone who subscribed to that type of

00:05:25,770 --> 00:05:30,540
event will then be notified about it the

00:05:29,280 --> 00:05:32,250
nice thing is that that means that you

00:05:30,540 --> 00:05:34,260
do not need to know the IP address of

00:05:32,250 --> 00:05:36,330
every single device you only need to

00:05:34,260 --> 00:05:38,670
have some way to identify the message

00:05:36,330 --> 00:05:40,560
broker so as long as you have a URL for

00:05:38,670 --> 00:05:42,300
that you don't can have as many devices

00:05:40,560 --> 00:05:43,980
as you want they can just talk to that

00:05:42,300 --> 00:05:45,720
message broker and that means it scales

00:05:43,980 --> 00:05:47,430
really well to multiple devices and

00:05:45,720 --> 00:05:49,050
because it's a protocol it's

00:05:47,430 --> 00:05:50,730
cross-platform and it's cross-language

00:05:49,050 --> 00:05:52,710
meaning you can use it in any language

00:05:50,730 --> 00:05:55,170
that you feel comfortable with so for

00:05:52,710 --> 00:05:56,700
example there's an MQTT library or in

00:05:55,170 --> 00:05:59,040
fact there's multiple ones but there is

00:05:56,700 --> 00:06:02,850
a one is literally just called MQTT so i

00:05:59,040 --> 00:06:04,470
picked that one that has all you have to

00:06:02,850 --> 00:06:06,810
do is you connect to your

00:06:04,470 --> 00:06:08,340
mqtt broker and once you're connected

00:06:06,810 --> 00:06:11,940
you can subscribe to topics you can

00:06:08,340 --> 00:06:13,410
publish to topics and then you get an

00:06:11,940 --> 00:06:15,060
event handler that is being triggered

00:06:13,410 --> 00:06:17,490
whenever there is a new message on that

00:06:15,060 --> 00:06:20,460
topic and then we can do things with it

00:06:17,490 --> 00:06:21,960
like logging it you can do the same

00:06:20,460 --> 00:06:24,330
thing in c++

00:06:21,960 --> 00:06:25,950
just looks a bit longer but ultimately

00:06:24,330 --> 00:06:29,310
it's the same thing you subscribe to

00:06:25,950 --> 00:06:31,800
topics when you set up your code or you

00:06:29,310 --> 00:06:33,960
connect to a server and then the only

00:06:31,800 --> 00:06:36,330
difference is you have to call this loop

00:06:33,960 --> 00:06:38,340
phone function on a regular basis which

00:06:36,330 --> 00:06:39,750
on our jury knows and stuff that's going

00:06:38,340 --> 00:06:41,040
to do it automatically for you as long

00:06:39,750 --> 00:06:41,550
as you put into this global loop

00:06:41,040 --> 00:06:44,190
function

00:06:41,550 --> 00:06:46,200
and then whenever something comes in you

00:06:44,190 --> 00:06:47,970
actually get a callback trigger that you

00:06:46,200 --> 00:06:49,350
can do stuff with again the only

00:06:47,970 --> 00:06:52,440
difference is you need to handle memory

00:06:49,350 --> 00:06:53,550
dealing with memory but ultimately it's

00:06:52,440 --> 00:06:56,640
very much the same thing

00:06:53,550 --> 00:06:59,220
and so I used that approach to build

00:06:56,640 --> 00:07:01,200
what I called at which life lab when I

00:06:59,220 --> 00:07:03,180
lived in Berlin my flatmate was

00:07:01,200 --> 00:07:05,370
streaming regularly on Twitch and I

00:07:03,180 --> 00:07:07,080
wanted to be aware of when he is online

00:07:05,370 --> 00:07:09,270
so I'm not bothering him when I'm coming

00:07:07,080 --> 00:07:10,830
home and stuff and so I built this

00:07:09,270 --> 00:07:13,230
little lamp that basically started

00:07:10,830 --> 00:07:16,160
glowing and pulsing whenever he was

00:07:13,230 --> 00:07:18,840
online and the way that worked was by be

00:07:16,160 --> 00:07:20,520
basically I had a small JavaScript code

00:07:18,840 --> 00:07:22,860
running in the cloud that regularly

00:07:20,520 --> 00:07:25,050
checked if he was online or offline and

00:07:22,860 --> 00:07:28,290
as soon as that changed it would emit an

00:07:25,050 --> 00:07:31,170
event to the MQTT message broker and

00:07:28,290 --> 00:07:32,820
then I had literally just a few lines

00:07:31,170 --> 00:07:33,780
that I copy-paste from like two blog

00:07:32,820 --> 00:07:35,880
posts together

00:07:33,780 --> 00:07:37,620
one was about controlling that LED

00:07:35,880 --> 00:07:41,100
matrix that I had flying around from a

00:07:37,620 --> 00:07:43,830
previous event and one was how to read

00:07:41,100 --> 00:07:45,450
from an MQTT broker oh and then based on

00:07:43,830 --> 00:07:47,010
these two I just kind of stitched them

00:07:45,450 --> 00:07:50,990
together and uploaded them on what is

00:07:47,010 --> 00:07:53,370
called an esp8266 which is a two dollar

00:07:50,990 --> 00:07:56,400
microcontroller super cheap to get has

00:07:53,370 --> 00:07:58,920
Wi-Fi on it so it's super convenient and

00:07:56,400 --> 00:08:02,460
you can like order them in bulk on like

00:07:58,920 --> 00:08:03,750
Alibaba if you want to and the nice

00:08:02,460 --> 00:08:05,970
thing about it is it's a very

00:08:03,750 --> 00:08:08,400
lightweight intuitive way to communicate

00:08:05,970 --> 00:08:10,350
between devices and it allows you to

00:08:08,400 --> 00:08:12,690
kind of like move all the heavy business

00:08:10,350 --> 00:08:15,060
logic away from having to write that and

00:08:12,690 --> 00:08:17,520
C++ you can use it in JavaScript you can

00:08:15,060 --> 00:08:20,310
reuse that code easily you can rely on

00:08:17,520 --> 00:08:21,540
your NPM ecosystem and its programming

00:08:20,310 --> 00:08:23,100
language independent so you don't even

00:08:21,540 --> 00:08:24,570
have to use node if you want to use like

00:08:23,100 --> 00:08:28,200
a different back-end like dotnet or

00:08:24,570 --> 00:08:31,590
something you can do that con you still

00:08:28,200 --> 00:08:33,300
have to write some C++ and if you're if

00:08:31,590 --> 00:08:37,340
you're using mqtt you either need to

00:08:33,300 --> 00:08:40,830
deploy or use like cloud message broker

00:08:37,340 --> 00:08:42,570
so the next version of this is tethered

00:08:40,830 --> 00:08:44,010
notepad so that basically what I mean

00:08:42,570 --> 00:08:45,960
with that is you have some node.js

00:08:44,010 --> 00:08:46,800
running on a computer that can run

00:08:45,960 --> 00:08:48,600
nodejs

00:08:46,800 --> 00:08:50,670
and then it's controlling hardware

00:08:48,600 --> 00:08:53,860
directly that is connected to your

00:08:50,670 --> 00:08:56,260
laptop and that's possible through a

00:08:53,860 --> 00:08:57,940
a library called serial port that

00:08:56,260 --> 00:08:59,740
ultimately is the foundation for another

00:08:57,940 --> 00:09:01,240
library called Johnny Five and Johnny

00:08:59,740 --> 00:09:03,700
Five allows you to talk to

00:09:01,240 --> 00:09:05,769
microcontrollers using no js' using a

00:09:03,700 --> 00:09:07,600
familiar syntax we'll see that we will

00:09:05,769 --> 00:09:09,220
see in a second and it allows you to

00:09:07,600 --> 00:09:11,079
leverage the entire NPM ecosystem

00:09:09,220 --> 00:09:14,740
because it's running on it on a machine

00:09:11,079 --> 00:09:17,079
with actual notes yes but you have to

00:09:14,740 --> 00:09:19,060
often have a tether to a host machine

00:09:17,079 --> 00:09:21,970
because if you have an Arduino for

00:09:19,060 --> 00:09:23,620
example that cannot run nodejs you have

00:09:21,970 --> 00:09:25,240
to have a machine connected to it that

00:09:23,620 --> 00:09:27,339
can run though yes if you're using

00:09:25,240 --> 00:09:30,579
something like a Raspberry Pi or a Tesla

00:09:27,339 --> 00:09:31,990
that I'll talk about later you on those

00:09:30,579 --> 00:09:34,839
ones you can actually just run

00:09:31,990 --> 00:09:36,279
johnny-five directly on it and don't

00:09:34,839 --> 00:09:37,870
have to have anything tether it but if

00:09:36,279 --> 00:09:40,000
you're using an Arduino like the demo

00:09:37,870 --> 00:09:43,990
I'm going to show you you will have to

00:09:40,000 --> 00:09:46,990
have a tether so the reason why I think

00:09:43,990 --> 00:09:50,829
this is a great solution is this is an

00:09:46,990 --> 00:09:52,690
example of a blinking demo in C++ and I

00:09:50,829 --> 00:09:55,750
think JavaScript is a natural fit for

00:09:52,690 --> 00:09:59,199
hardware because a lot of the things we

00:09:55,750 --> 00:10:01,060
do are event-driven and so one this is

00:09:59,199 --> 00:10:02,440
the same example of like doing a blink

00:10:01,060 --> 00:10:05,110
in johnny-five

00:10:02,440 --> 00:10:07,660
so we're initializing a board instance

00:10:05,110 --> 00:10:10,990
and then we create an LED sorry for the

00:10:07,660 --> 00:10:12,699
type with a capital C there but then we

00:10:10,990 --> 00:10:14,890
create this LED and we tell it to blink

00:10:12,699 --> 00:10:16,990
but the power comes really when it's

00:10:14,890 --> 00:10:19,480
event-driven so this is the code for a

00:10:16,990 --> 00:10:22,000
button but really all it does is a ended

00:10:19,480 --> 00:10:24,670
loop it regularly checks if a button is

00:10:22,000 --> 00:10:26,769
being pressed and if so well we'll turn

00:10:24,670 --> 00:10:29,380
the LED on and if it's not pressed we'll

00:10:26,769 --> 00:10:31,360
turn the LED off the same thing and

00:10:29,380 --> 00:10:35,800
johnny-five looks like this we have

00:10:31,360 --> 00:10:37,510
another event ready Handler and then we

00:10:35,800 --> 00:10:39,250
create a new button instance and there

00:10:37,510 --> 00:10:41,290
we have a press event and a release

00:10:39,250 --> 00:10:43,810
event and then we just call on or off on

00:10:41,290 --> 00:10:46,120
the LED and so I think that's much more

00:10:43,810 --> 00:10:49,600
readable at least for me and much more

00:10:46,120 --> 00:10:53,589
intuitive and so this gets me to the

00:10:49,600 --> 00:10:55,360
port part of this so basically the idea

00:10:53,589 --> 00:10:57,790
here was to build my own custom

00:10:55,360 --> 00:10:59,110
peripheral largely because I had a

00:10:57,790 --> 00:11:00,550
debate with a colleague who was like

00:10:59,110 --> 00:11:02,589
what's the point of like having to

00:11:00,550 --> 00:11:05,949
connect your like an Arduino to your

00:11:02,589 --> 00:11:06,920
laptop permanently if you like why would

00:11:05,949 --> 00:11:08,540
you do that

00:11:06,920 --> 00:11:10,010
in the first place and so my argument

00:11:08,540 --> 00:11:12,200
was like well you could build a custom

00:11:10,010 --> 00:11:13,580
peripheral that like works for your use

00:11:12,200 --> 00:11:15,650
case so in my case I wanted to have

00:11:13,580 --> 00:11:17,990
something that react on the events on my

00:11:15,650 --> 00:11:19,760
computer or more precisely I wanted to a

00:11:17,990 --> 00:11:24,320
hug a pork tire that screams whenever my

00:11:19,760 --> 00:11:26,600
build fails and so warning you will see

00:11:24,320 --> 00:11:27,610
the insides of a toy pork so it should

00:11:26,600 --> 00:11:29,720
be fine

00:11:27,610 --> 00:11:31,580
but this is the little fellow that I

00:11:29,720 --> 00:11:35,150
ordered off Amazon it's just like a

00:11:31,580 --> 00:11:37,220
Disney toy that had one characteristic

00:11:35,150 --> 00:11:40,150
which made me buy it which was it can

00:11:37,220 --> 00:11:43,370
already yell at you and waddle around

00:11:40,150 --> 00:11:45,560
bye-bye pushing its belly it has like a

00:11:43,370 --> 00:11:47,240
button there so what I did is I removed

00:11:45,560 --> 00:11:48,650
the first screw that I could found find

00:11:47,240 --> 00:11:51,740
which were at the battery compartment

00:11:48,650 --> 00:11:53,570
and then loosened the fur that was

00:11:51,740 --> 00:11:56,810
around it so I was able to like remove

00:11:53,570 --> 00:11:58,700
that and remove it further and then

00:11:56,810 --> 00:12:00,980
ultimately I got into the insides of a

00:11:58,700 --> 00:12:05,090
pork which I expected to be more

00:12:00,980 --> 00:12:07,220
interesting but then continued to take

00:12:05,090 --> 00:12:09,230
it apart ultimately it came down to this

00:12:07,220 --> 00:12:13,520
chip which is basically the entire brain

00:12:09,230 --> 00:12:16,300
of the pork toy and one thing that is in

00:12:13,520 --> 00:12:18,860
the bottom is where you see the s-1

00:12:16,300 --> 00:12:20,450
that's where the switch was basically

00:12:18,860 --> 00:12:22,790
whenever you press the belly basically

00:12:20,450 --> 00:12:24,710
that was what was executed and so what I

00:12:22,790 --> 00:12:29,000
did is like have followed the lines and

00:12:24,710 --> 00:12:31,340
I soldered in a really horrible job two

00:12:29,000 --> 00:12:33,080
cables on either end of that switch

00:12:31,340 --> 00:12:34,880
because the idea was like if I can

00:12:33,080 --> 00:12:37,480
bridge this switch then I could trigger

00:12:34,880 --> 00:12:41,540
it programmatically and then I had this

00:12:37,480 --> 00:12:43,880
one chip like basically I created this

00:12:41,540 --> 00:12:45,380
wiring which uses a chip called the opto

00:12:43,880 --> 00:12:48,010
coupler which is basically like a way

00:12:45,380 --> 00:12:50,600
for me to trigger a switch

00:12:48,010 --> 00:12:53,390
programmatically so this was the wire up

00:12:50,600 --> 00:12:55,490
it I put an LED in because I think LEDs

00:12:53,390 --> 00:12:57,860
are serve the console.log of hardware

00:12:55,490 --> 00:13:00,500
hacking so it's a good way for me to

00:12:57,860 --> 00:13:04,190
figure out if stuff is working um and so

00:13:00,500 --> 00:13:05,780
oh really then I just have this 4 + 3 5

00:13:04,190 --> 00:13:11,150
which is the opto coupler which will

00:13:05,780 --> 00:13:13,160
then trigger the button press I tore the

00:13:11,150 --> 00:13:15,890
wires back through the through the fur

00:13:13,160 --> 00:13:18,890
and like wrapped everything back up and

00:13:15,890 --> 00:13:21,050
then had this part ready to go

00:13:18,890 --> 00:13:23,210
and so I created this library called

00:13:21,050 --> 00:13:26,150
pork j/s and I figured I'm gonna rather

00:13:23,210 --> 00:13:33,650
show you then keep talking about it so

00:13:26,150 --> 00:13:39,110
I'm gonna jump out of my slides and so I

00:13:33,650 --> 00:13:41,980
have a basic web app here that uses web

00:13:39,110 --> 00:13:46,460
pack right now to compile and so if I

00:13:41,980 --> 00:13:51,530
open this weird it might turn up there

00:13:46,460 --> 00:13:54,020
we go and run web pack right now it

00:13:51,530 --> 00:13:57,470
builds cool um so I brought that little

00:13:54,020 --> 00:13:59,420
my little friend here um I'm gonna hold

00:13:57,470 --> 00:14:01,520
him up like to you so that it's part of

00:13:59,420 --> 00:14:03,200
the recording as well but if you want to

00:14:01,520 --> 00:14:03,560
see him wobble later I can do that as

00:14:03,200 --> 00:14:06,980
well

00:14:03,560 --> 00:14:10,250
so basically what I did is I created

00:14:06,980 --> 00:14:12,830
this CLI that can execute any arbitrary

00:14:10,250 --> 00:14:15,380
command and if it fails it will start

00:14:12,830 --> 00:14:17,060
yelling if it succeeds it won't so if I

00:14:15,380 --> 00:14:20,480
run it right now nothing will happen

00:14:17,060 --> 00:14:23,000
because it worked but if I screw up any

00:14:20,480 --> 00:14:24,830
of the imports for example and then

00:14:23,000 --> 00:14:31,240
execute this again I'm gonna hold him

00:14:24,830 --> 00:14:35,810
here you will see I'm yelling and

00:14:31,240 --> 00:14:38,570
waddling around see all right you might

00:14:35,810 --> 00:14:42,730
typically he screams once more let's see

00:14:38,570 --> 00:14:45,860
I know why they there we go

00:14:42,730 --> 00:14:49,160
cool all right here's your calm down now

00:14:45,860 --> 00:14:51,860
so you might talk all right there we go

00:14:49,160 --> 00:14:53,780
see alright so but the nice thing is the

00:14:51,860 --> 00:14:55,520
code for this is actually very easy like

00:14:53,780 --> 00:14:57,290
I'm doing a couple of things to check if

00:14:55,520 --> 00:14:59,540
a command failed or succeeded but

00:14:57,290 --> 00:15:02,210
ultimately all it comes down to is I

00:14:59,540 --> 00:15:03,860
have a board and I have a pin and I'm

00:15:02,210 --> 00:15:06,770
using the johnny-five library for that

00:15:03,860 --> 00:15:10,870
and then one thing that I'll need is a

00:15:06,770 --> 00:15:14,420
quick help or like help a function here

00:15:10,870 --> 00:15:19,850
probably my most written function and I

00:15:14,420 --> 00:15:21,860
know there is NPM modules for this cool

00:15:19,850 --> 00:15:23,420
and then basically what we do is we

00:15:21,860 --> 00:15:26,240
create in your board instance and

00:15:23,420 --> 00:15:27,740
because I'm using a using an Arduino by

00:15:26,240 --> 00:15:29,210
default I only need to pass anything in

00:15:27,740 --> 00:15:31,760
here but if I would want to use a

00:15:29,210 --> 00:15:32,420
different board there's a bunch of

00:15:31,760 --> 00:15:34,459
plugins

00:15:32,420 --> 00:15:36,410
you can use to communicate to different

00:15:34,459 --> 00:15:40,250
boards using johnny-five and then when

00:15:36,410 --> 00:15:44,149
the board is ready what I'll do is I'll

00:15:40,250 --> 00:15:48,649
need an async function here I'll create

00:15:44,149 --> 00:15:50,360
a new pin instance and what I want to do

00:15:48,649 --> 00:15:52,100
is I want to specify that this is on pin

00:15:50,360 --> 00:15:55,209
4 that's where I connected my up to

00:15:52,100 --> 00:15:59,480
coupler 2 and I need to set the mode to

00:15:55,209 --> 00:16:01,279
pin dot put and then all we have to do

00:15:59,480 --> 00:16:02,959
is we have to set the pin to high and

00:16:01,279 --> 00:16:06,769
because I'm simulating a button press

00:16:02,959 --> 00:16:09,699
you never press a any button within like

00:16:06,769 --> 00:16:12,829
1 millisecond so we're gonna sleep for

00:16:09,699 --> 00:16:16,220
like 500 milliseconds should be fine and

00:16:12,829 --> 00:16:17,990
then we'll set the pin back to low and

00:16:16,220 --> 00:16:24,380
that basically finishes pressing the

00:16:17,990 --> 00:16:29,000
button so now if I go and run that code

00:16:24,380 --> 00:16:30,860
should do yeah sometimes it's so because

00:16:29,000 --> 00:16:32,329
I'm simulating the button press like it

00:16:30,860 --> 00:16:34,220
literally does the same thing that it

00:16:32,329 --> 00:16:36,680
typically will do but you can see it's

00:16:34,220 --> 00:16:38,959
it it's interacting again it's a really

00:16:36,680 --> 00:16:40,760
the library that I wrote around it then

00:16:38,959 --> 00:16:42,320
just does like things like executing

00:16:40,760 --> 00:16:51,740
commands I'm parsing the result and

00:16:42,320 --> 00:16:55,519
stuff like that all right cool he has

00:16:51,740 --> 00:17:00,050
opinions all right let's get back into

00:16:55,519 --> 00:17:01,760
the slides cool all right so the pros of

00:17:00,050 --> 00:17:04,490
like having a tethered node bought is

00:17:01,760 --> 00:17:06,169
that it's Hardware independent code

00:17:04,490 --> 00:17:08,179
using johnny-five which means that we

00:17:06,169 --> 00:17:11,900
can swap this out with various different

00:17:08,179 --> 00:17:13,610
other microcontrollers later and reuse

00:17:11,900 --> 00:17:15,500
the existing ones which is nice you can

00:17:13,610 --> 00:17:17,660
use familiar tools I was using vias code

00:17:15,500 --> 00:17:20,150
I was using NPM I was just using normal

00:17:17,660 --> 00:17:22,640
things that I'm used to bring I can

00:17:20,150 --> 00:17:25,610
bring my own editor in IDE I can use the

00:17:22,640 --> 00:17:28,370
entire NPM ecosystem you can web pack it

00:17:25,610 --> 00:17:29,929
and roll-up it if you want to and the

00:17:28,370 --> 00:17:32,990
website of johnny-five is great for

00:17:29,929 --> 00:17:34,370
beginners as for cons you often have to

00:17:32,990 --> 00:17:36,679
be tethered to a host unless you use

00:17:34,370 --> 00:17:38,270
something like a Raspberry Pi and

00:17:36,679 --> 00:17:40,370
there's less examples than a classic

00:17:38,270 --> 00:17:41,929
Arduino project like there was no blog

00:17:40,370 --> 00:17:46,070
post I could read on how to control a

00:17:41,929 --> 00:17:47,960
port and then the third

00:17:46,070 --> 00:17:49,430
option is untethered node buds and that

00:17:47,960 --> 00:17:52,580
basically means we're running JavaScript

00:17:49,430 --> 00:17:54,350
on the microcontroller one of the ways

00:17:52,580 --> 00:17:56,420
to do that is using something like Jerry

00:17:54,350 --> 00:17:59,030
script which is a project from Samsung

00:17:56,420 --> 00:18:03,020
it's an open source lightweight engine

00:17:59,030 --> 00:18:06,020
that has a small memory footprint so it

00:18:03,020 --> 00:18:07,550
fits on things like in the esp8266 but

00:18:06,020 --> 00:18:09,380
not every JavaScript feature might be

00:18:07,550 --> 00:18:10,820
available there and the website is not

00:18:09,380 --> 00:18:12,530
really beginner-friendly considering

00:18:10,820 --> 00:18:14,780
that most of the documentation is still

00:18:12,530 --> 00:18:16,670
written in C++ and then you basically

00:18:14,780 --> 00:18:21,020
just just have a JavaScript string in it

00:18:16,670 --> 00:18:24,080
an alternative is yes purino for example

00:18:21,020 --> 00:18:26,270
which is a JavaScript interpreter for

00:18:24,080 --> 00:18:28,250
microcontrollers specifically designed

00:18:26,270 --> 00:18:32,330
for things like the esp8266 but they

00:18:28,250 --> 00:18:34,400
also have their own hardware and so that

00:18:32,330 --> 00:18:36,650
project is completely open source and

00:18:34,400 --> 00:18:39,110
open source code and open source

00:18:36,650 --> 00:18:41,960
hardware and it comes with its own IDE

00:18:39,110 --> 00:18:43,780
which is it does the job but it's much

00:18:41,960 --> 00:18:46,520
more in the realm of like an Arduino IDE

00:18:43,780 --> 00:18:48,740
it has limited NPM support because it

00:18:46,520 --> 00:18:50,660
doesn't actually implement all the api's

00:18:48,740 --> 00:18:54,050
that node has and therefore not every

00:18:50,660 --> 00:18:56,810
package might work and it does not work

00:18:54,050 --> 00:18:58,730
with johnny-five there is a project that

00:18:56,810 --> 00:18:59,930
I haven't tried myself yet but I do have

00:18:58,730 --> 00:19:01,430
the board flying around because they

00:18:59,930 --> 00:19:05,810
gave them out of J's company you 2 years

00:19:01,430 --> 00:19:07,730
ago called nyonyas and they have their

00:19:05,810 --> 00:19:10,370
own hardware but it can run on like an

00:19:07,730 --> 00:19:14,660
ESB 832 which is the follow up from the

00:19:10,370 --> 00:19:15,680
a 266 and it comes with its own IDE but

00:19:14,660 --> 00:19:17,420
the cool thing is that supports

00:19:15,680 --> 00:19:19,790
typescript I have the box and it

00:19:17,420 --> 00:19:21,470
actually has the full same API interface

00:19:19,790 --> 00:19:23,690
as no jazz which means that you can use

00:19:21,470 --> 00:19:25,190
the NPM ecosystem and it has built-in

00:19:23,690 --> 00:19:28,610
Ethernet and Wi-Fi so that's super

00:19:25,190 --> 00:19:31,940
useful and then the last one that I

00:19:28,610 --> 00:19:34,310
personally like a lot is the Tesla - the

00:19:31,940 --> 00:19:37,130
Tesla - actually looks like this and the

00:19:34,310 --> 00:19:39,080
nice thing is it has a USB a ports it

00:19:37,130 --> 00:19:41,180
has Ethernet and it has like sort of the

00:19:39,080 --> 00:19:44,480
common things you want like a what like

00:19:41,180 --> 00:19:46,550
Wi-Fi and analog and digital pins and

00:19:44,480 --> 00:19:48,200
the nice thing is it runs actual node.js

00:19:46,550 --> 00:19:51,200
which means you can use almost the

00:19:48,200 --> 00:19:53,840
entire NPM ecosystem except of some like

00:19:51,200 --> 00:19:55,760
native dependencies it's compatible with

00:19:53,840 --> 00:19:58,910
johnny-five and you can bring your own

00:19:55,760 --> 00:20:00,050
favorite tool chain and tools because

00:19:58,910 --> 00:20:02,660
all it all

00:20:00,050 --> 00:20:07,010
users to interact with the with the

00:20:02,660 --> 00:20:09,320
microcontroller is a CLI and it's open

00:20:07,010 --> 00:20:11,780
source and open source code and hardware

00:20:09,320 --> 00:20:13,400
which is nice unfortunately there's no

00:20:11,780 --> 00:20:16,160
company right now backing this anymore

00:20:13,400 --> 00:20:17,420
it's just a couple of folks you have

00:20:16,160 --> 00:20:20,660
maintaining this in their free time

00:20:17,420 --> 00:20:22,220
which means that it's unfortunately more

00:20:20,660 --> 00:20:24,290
expensive than the other components

00:20:22,220 --> 00:20:29,090
because there's no company behind it

00:20:24,290 --> 00:20:31,940
back in but I used to build this project

00:20:29,090 --> 00:20:34,640
called coffee Jas and basically the goal

00:20:31,940 --> 00:20:36,260
there was I I told you I work at at

00:20:34,640 --> 00:20:38,120
Twilio and everything we do our REST API

00:20:36,260 --> 00:20:39,620
so every time I look at something I'm

00:20:38,120 --> 00:20:42,200
like why is there no REST API for that

00:20:39,620 --> 00:20:44,060
um and so the idea was to control an

00:20:42,200 --> 00:20:46,460
existing device programmatically and

00:20:44,060 --> 00:20:47,960
build an arrest API and specifically I

00:20:46,460 --> 00:20:50,930
wanted to build a REST API that

00:20:47,960 --> 00:20:53,240
implements the IETF RFC to three to four

00:20:50,930 --> 00:20:54,200
there's one person nodding who knows

00:20:53,240 --> 00:20:55,700
what that is

00:20:54,200 --> 00:20:59,630
if you're not familiar with that that's

00:20:55,700 --> 00:21:01,940
the RFC - that suggests that the HGC PCP

00:20:59,630 --> 00:21:04,330
if you're not familiar with that that's

00:21:01,940 --> 00:21:08,570
the hypertext coffeepot control protocol

00:21:04,330 --> 00:21:11,300
that was announced on April 1st 1998 if

00:21:08,570 --> 00:21:13,660
you ever have seen the status code 418

00:21:11,300 --> 00:21:16,130
I'm a teapot that comes from that thing

00:21:13,660 --> 00:21:18,380
and it basically is just like an April

00:21:16,130 --> 00:21:20,810
Fool's joke explaining how a protocol

00:21:18,380 --> 00:21:22,730
for coffee should look like why did I

00:21:20,810 --> 00:21:24,110
use a tehsil one the coffee machine

00:21:22,730 --> 00:21:26,120
should work on tethered if I have to

00:21:24,110 --> 00:21:28,370
connect my laptop so that my roommate

00:21:26,120 --> 00:21:30,830
can get a coffee that's not really

00:21:28,370 --> 00:21:32,650
effective for anyone especially because

00:21:30,830 --> 00:21:36,440
that coffee machine was my roommates one

00:21:32,650 --> 00:21:38,330
and I wanted to use Johnny five so I can

00:21:36,440 --> 00:21:39,680
easily swap on micro controller so if I

00:21:38,330 --> 00:21:41,690
want to have to use the Tesla for

00:21:39,680 --> 00:21:45,260
something else because I told you it's

00:21:41,690 --> 00:21:48,260
not that inexpensive I am able to kind

00:21:45,260 --> 00:21:50,660
of swap it out it has to be internet

00:21:48,260 --> 00:21:51,890
connected because I wanted to build an

00:21:50,660 --> 00:21:54,770
API and if it doesn't have internet

00:21:51,890 --> 00:21:56,690
connection how does the API work it

00:21:54,770 --> 00:21:59,090
should have been quick and easy set up

00:21:56,690 --> 00:22:00,770
for development largely because I did

00:21:59,090 --> 00:22:02,930
this on a Friday night with a couple of

00:22:00,770 --> 00:22:04,970
beers and my roommates so I didn't want

00:22:02,930 --> 00:22:07,070
to spend an entire evening trying to set

00:22:04,970 --> 00:22:09,950
up raspbian on a Raspberry Pi and like

00:22:07,070 --> 00:22:13,740
SS aging and so the fact that Tesla had

00:22:09,950 --> 00:22:17,080
a-- has a CLI that just says like

00:22:13,740 --> 00:22:19,120
t-too upload and it just uploads the

00:22:17,080 --> 00:22:21,160
code to the device was super useful and

00:22:19,120 --> 00:22:24,100
we needed to build a server so NPM

00:22:21,160 --> 00:22:26,170
packages were really helpful for that so

00:22:24,100 --> 00:22:27,730
how did we build it well we took the

00:22:26,170 --> 00:22:29,470
coffee machine and we did what every

00:22:27,730 --> 00:22:32,170
person and it doesn't have an electrical

00:22:29,470 --> 00:22:34,870
engineering degree does and just rip

00:22:32,170 --> 00:22:37,000
everything apart and so that's the

00:22:34,870 --> 00:22:38,650
coffee machine without walls and that's

00:22:37,000 --> 00:22:40,780
the site that was interesting for us

00:22:38,650 --> 00:22:42,580
specifically the top-left corner was

00:22:40,780 --> 00:22:43,930
what was interesting for us because

00:22:42,580 --> 00:22:45,550
that's where the microcontroller was

00:22:43,930 --> 00:22:48,280
which is the brain of the entire

00:22:45,550 --> 00:22:49,690
operation the buttons were accessible on

00:22:48,280 --> 00:22:51,430
the outside and then there was this

00:22:49,690 --> 00:22:53,560
thing that labeled interesting cable

00:22:51,430 --> 00:22:55,420
largely because that cable wasn't

00:22:53,560 --> 00:22:56,920
soldered on either side it was

00:22:55,420 --> 00:22:58,930
completely pluggable which meant that I

00:22:56,920 --> 00:23:00,700
could take it out and I could take out

00:22:58,930 --> 00:23:02,890
the buttons so those were the buttons

00:23:00,700 --> 00:23:04,630
after I took off the casing and that was

00:23:02,890 --> 00:23:06,760
a control plate and the idea was that if

00:23:04,630 --> 00:23:09,820
we can simulate the protocol that is

00:23:06,760 --> 00:23:12,490
being sent on the bottom part of this we

00:23:09,820 --> 00:23:13,660
can simulate any button press and so

00:23:12,490 --> 00:23:16,240
what we did is we jammed a bunch of

00:23:13,660 --> 00:23:17,980
cables into the other end of that cable

00:23:16,240 --> 00:23:20,020
and we're just trying to figure out what

00:23:17,980 --> 00:23:22,060
happens if I like put power on one pin

00:23:20,020 --> 00:23:24,010
and then like press a button on the

00:23:22,060 --> 00:23:26,200
other and like can I measure that and

00:23:24,010 --> 00:23:28,270
our initial idea was like is this like a

00:23:26,200 --> 00:23:30,610
binary kind of protocol unfortunately it

00:23:28,270 --> 00:23:32,050
wasn't so at one moment I think it like

00:23:30,610 --> 00:23:34,720
two a.m. or something we started drawing

00:23:32,050 --> 00:23:39,100
diagrams you can see that that was at 2

00:23:34,720 --> 00:23:40,810
a.m. and so we were able to get a couple

00:23:39,100 --> 00:23:42,610
of ideas from this at least we managed

00:23:40,810 --> 00:23:44,710
to figure out all the LEDs and how to

00:23:42,610 --> 00:23:47,580
control those at least all of those that

00:23:44,710 --> 00:23:50,170
we didn't burn through yet and

00:23:47,580 --> 00:23:51,630
ultimately we cleaned this up a bit and

00:23:50,170 --> 00:23:54,850
noticed a couple of things that we have

00:23:51,630 --> 00:23:56,950
hadn't noticed like if you look at this

00:23:54,850 --> 00:24:00,280
and you actually understand something

00:23:56,950 --> 00:24:02,860
about hardware you would notice that the

00:24:00,280 --> 00:24:04,630
things that say d4 d3 and stuff like

00:24:02,860 --> 00:24:06,340
that on it we initially thought they

00:24:04,630 --> 00:24:08,410
were the same as like the black things

00:24:06,340 --> 00:24:10,180
with a silver edges which is resistors

00:24:08,410 --> 00:24:13,180
they are not their diets

00:24:10,180 --> 00:24:15,280
um diets work like LEDs in the sense

00:24:13,180 --> 00:24:17,890
that like they only let current flow in

00:24:15,280 --> 00:24:19,990
one direction and using that knowledge

00:24:17,890 --> 00:24:21,220
we're able to have clean up the diagram

00:24:19,990 --> 00:24:24,040
a bit and get a better idea of what

00:24:21,220 --> 00:24:26,470
happens since it wasn't in a binary

00:24:24,040 --> 00:24:27,070
protocol like I had hoped for we opted

00:24:26,470 --> 00:24:29,230
for a different

00:24:27,070 --> 00:24:32,110
version and that is using a relay switch

00:24:29,230 --> 00:24:34,960
are basically switches that you can

00:24:32,110 --> 00:24:38,789
programmatically control but they deal

00:24:34,960 --> 00:24:41,649
with higher current then and then a

00:24:38,789 --> 00:24:43,240
optocoupler would do for example these

00:24:41,649 --> 00:24:44,889
are also the things that if you ever are

00:24:43,240 --> 00:24:47,380
in an old car and like you are doing

00:24:44,889 --> 00:24:49,179
your like turn on your turning indicator

00:24:47,380 --> 00:24:50,950
and it's clicking that's because the

00:24:49,179 --> 00:24:54,190
relay is clicking because it basically

00:24:50,950 --> 00:24:58,570
just uses magnets and an insight and

00:24:54,190 --> 00:25:00,460
again LEDs for console logging and so

00:24:58,570 --> 00:25:03,279
based on that we kind of locked

00:25:00,460 --> 00:25:04,870
everything back up wired it out through

00:25:03,279 --> 00:25:07,990
the hole that was left because we took

00:25:04,870 --> 00:25:09,909
the buttons out stick a sticker on it we

00:25:07,990 --> 00:25:11,679
intentionally didn't put this inside the

00:25:09,909 --> 00:25:13,929
coffee machine because I don't trust

00:25:11,679 --> 00:25:16,059
myself and the device that handles water

00:25:13,929 --> 00:25:19,500
should not have my hacky hardware in it

00:25:16,059 --> 00:25:22,870
so we kind of wired that on the outside

00:25:19,500 --> 00:25:25,330
and then I wrote like an API around that

00:25:22,870 --> 00:25:26,470
um the code is very similar to what I

00:25:25,330 --> 00:25:28,990
showed you earlier because I'm using

00:25:26,470 --> 00:25:31,090
johnny-five so there's a blog post about

00:25:28,990 --> 00:25:32,679
this as well as the code is on github if

00:25:31,090 --> 00:25:34,509
you want to check that out I'll tweet

00:25:32,679 --> 00:25:35,620
all the resources afterwards as well if

00:25:34,509 --> 00:25:37,750
you want to check that out but

00:25:35,620 --> 00:25:40,750
effectively the code works very similar

00:25:37,750 --> 00:25:42,789
I set up an HTP server and then the code

00:25:40,750 --> 00:25:46,389
itself is again like setting pins to a

00:25:42,789 --> 00:25:48,340
high end low alright what are the pros

00:25:46,389 --> 00:25:50,139
and cons of this one you can have an

00:25:48,340 --> 00:25:50,799
untethered system running JavaScript so

00:25:50,139 --> 00:25:52,600
that's great

00:25:50,799 --> 00:25:56,409
and you can use again you're familiar

00:25:52,600 --> 00:25:58,929
programming tools and the editors and

00:25:56,409 --> 00:26:00,970
you could potentially use the entire NPM

00:25:58,929 --> 00:26:02,830
ecosystem as long as it's not either a

00:26:00,970 --> 00:26:06,519
library there's way too big to load by

00:26:02,830 --> 00:26:09,779
the tehsil or it's not or it's a native

00:26:06,519 --> 00:26:11,679
dependency that doesn't work on it

00:26:09,779 --> 00:26:13,059
problem is you're less flexible and

00:26:11,679 --> 00:26:15,029
hardware choice because you need to find

00:26:13,059 --> 00:26:18,490
something that can actually execute node

00:26:15,029 --> 00:26:20,080
and you might miss cutting edge language

00:26:18,490 --> 00:26:22,269
features because all of these different

00:26:20,080 --> 00:26:24,220
solutions often have an interpreter that

00:26:22,269 --> 00:26:26,950
lacks a couple of versions behind node

00:26:24,220 --> 00:26:29,620
or even behind JavaScript and some dogs

00:26:26,950 --> 00:26:31,929
are better than others I've figured out

00:26:29,620 --> 00:26:35,080
all right so how do you get started um

00:26:31,929 --> 00:26:36,850
the first thing is you should find a

00:26:35,080 --> 00:26:39,370
project that you want to do and I

00:26:36,850 --> 00:26:40,659
suggest to do use case driven learning

00:26:39,370 --> 00:26:42,429
don't try to

00:26:40,659 --> 00:26:44,979
your degree first in electrical

00:26:42,429 --> 00:26:46,809
engineering and then try to do this find

00:26:44,979 --> 00:26:49,149
a project that the small has a smaller

00:26:46,809 --> 00:26:51,609
scope and started learning so have the

00:26:49,149 --> 00:26:53,320
big the basics around that I like

00:26:51,609 --> 00:26:54,909
hacking existing projects what I mean by

00:26:53,320 --> 00:26:56,679
that is like as you can see both of

00:26:54,909 --> 00:26:58,659
these things I didn't design an entire

00:26:56,679 --> 00:27:00,789
circuit from scratch I took something

00:26:58,659 --> 00:27:02,799
that was existing and kind of started

00:27:00,789 --> 00:27:04,840
just fooling around with it by taking

00:27:02,799 --> 00:27:07,119
apart and like interest and intercepting

00:27:04,840 --> 00:27:09,220
signals and stuff you should learn the

00:27:07,119 --> 00:27:12,489
electronics basics though so like if

00:27:09,220 --> 00:27:15,070
things like resistance and amp amp is

00:27:12,489 --> 00:27:17,289
like current and voltage don't tell you

00:27:15,070 --> 00:27:18,700
anything I'd recommend reading up on

00:27:17,289 --> 00:27:21,249
those and getting an idea of like how

00:27:18,700 --> 00:27:23,859
they're interplaying just so you get a

00:27:21,249 --> 00:27:25,570
basic idea of like how circuits work um

00:27:23,859 --> 00:27:27,460
useful things that you should have at

00:27:25,570 --> 00:27:29,200
home before you get started or things

00:27:27,460 --> 00:27:32,769
like a digital multimeter so you can

00:27:29,200 --> 00:27:34,359
measure a volt amps and ohm a breadboard

00:27:32,769 --> 00:27:36,549
which is basically a way for you to

00:27:34,359 --> 00:27:38,649
create circuits without having to solder

00:27:36,549 --> 00:27:39,909
which is super useful jumper wires which

00:27:38,649 --> 00:27:42,639
are the wires that go into this

00:27:39,909 --> 00:27:44,710
breadboard a set of resistors you can

00:27:42,639 --> 00:27:46,840
get like a giant pack of various

00:27:44,710 --> 00:27:50,859
different ones for like $3.00 everywhere

00:27:46,840 --> 00:27:52,659
a few LEDs and in my opinion one thing

00:27:50,859 --> 00:27:55,869
that is helpful for a lot of project is

00:27:52,659 --> 00:27:57,549
the solid state relays which to emulate

00:27:55,869 --> 00:27:58,899
have button presses and stuff like that

00:27:57,549 --> 00:28:02,710
that's basically what I used in the

00:27:58,899 --> 00:28:05,529
project there's a Johnny Five inventors

00:28:02,710 --> 00:28:07,539
kit that's what I got that comes with

00:28:05,529 --> 00:28:09,309
the tehsil again it's a bit more

00:28:07,539 --> 00:28:12,070
expensive because it has a test linear

00:28:09,309 --> 00:28:15,849
there's these things called growth kids

00:28:12,070 --> 00:28:17,919
from seed studio the cool thing here is

00:28:15,849 --> 00:28:20,349
that they use like a some portrait

00:28:17,919 --> 00:28:22,359
proprietary like a proprietary plug

00:28:20,349 --> 00:28:24,720
thing but the nice thing is if you're

00:28:22,359 --> 00:28:28,179
like if you still feel unconfident about

00:28:24,720 --> 00:28:30,460
connecting different components they

00:28:28,179 --> 00:28:32,799
only allow you to put cables in in one

00:28:30,460 --> 00:28:34,509
way and no other way which means that

00:28:32,799 --> 00:28:35,799
it's very hard to kind of screw this up

00:28:34,509 --> 00:28:39,340
unfortunately you need to get their

00:28:35,799 --> 00:28:41,409
components so it's a bit more pricey but

00:28:39,340 --> 00:28:43,419
really you can get any generic Arduino

00:28:41,409 --> 00:28:44,859
starter kit and you can see they contain

00:28:43,419 --> 00:28:50,649
most of the components that I've been

00:28:44,859 --> 00:28:52,960
talking about as for resources so I put

00:28:50,649 --> 00:28:54,490
the slides I uploaded the slides already

00:28:52,960 --> 00:28:55,869
if you want to check those out

00:28:54,490 --> 00:28:58,570
I'm going to tweet the link out as well

00:28:55,869 --> 00:29:02,350
I recommend reading the blog post about

00:28:58,570 --> 00:29:04,690
the the coffee machine hack because it

00:29:02,350 --> 00:29:06,700
describes a bit more in depth of like

00:29:04,690 --> 00:29:09,399
the highs and lows of like that night of

00:29:06,700 --> 00:29:11,440
hacking I wrote a blog post off

00:29:09,399 --> 00:29:13,509
generally getting started with notepads

00:29:11,440 --> 00:29:15,070
so that's great if you just want to get

00:29:13,509 --> 00:29:17,889
like the very basic of like let's

00:29:15,070 --> 00:29:20,110
control an Arduino using johnny-five and

00:29:17,889 --> 00:29:21,820
then the documentation of notepads

00:29:20,110 --> 00:29:24,700
johnny-five and Tesla are all fantastic

00:29:21,820 --> 00:29:26,409
for beginners and with that I would like

00:29:24,700 --> 00:29:27,970
to thank you all for your attention and

00:29:26,409 --> 00:29:30,009
if you have any questions I'll be

00:29:27,970 --> 00:29:31,960
packing up my booth so feel free to drop

00:29:30,009 --> 00:29:34,029
by ask me any questions and then I

00:29:31,960 --> 00:29:35,110
appoint you have to head out thank you

00:29:34,029 --> 00:29:39,060
very much

00:29:35,110 --> 00:29:39,060

YouTube URL: https://www.youtube.com/watch?v=TnliIn09Zpg


