Title: Electron: Desktop Apps with JavaScript - Felix Rieseberg, Slack
Publication date: 2020-05-11
Playlist: Node + JS Interactive 2019
Description: 
	Electron: Desktop Apps with JavaScript - Felix Rieseberg, Slack
Speakers: Felix Rieseberg
Chances are high that you’re already using desktop software built with JavaScript and Node.js: Apps like Visual Studio Code, Slack, or WhatsApp use the framework Electron to combine native code with the conveniences of Node.js and web technologies.

In this talk, Felix will give a techical introduction to Electron. Building a small code editor live on stage, he’ll cover the basics and explain both benefits and challenges of using Node.js and JavaScript to build major desktop applications.
Captions: 
	00:00:00,020 --> 00:00:05,790
all right I think we might as well get

00:00:03,210 --> 00:00:07,080
started it's 11 training with 30 minutes

00:00:05,790 --> 00:00:09,929
but it's not a lot of time so I'm gonna

00:00:07,080 --> 00:00:12,360
get started my name is Felix I work at

00:00:09,929 --> 00:00:14,759
slack as a senior staffer on slacks run

00:00:12,360 --> 00:00:17,640
time team which is responsible for Co

00:00:14,759 --> 00:00:19,740
maintaining electron I mostly focus on

00:00:17,640 --> 00:00:22,380
outreach and education the actual

00:00:19,740 --> 00:00:23,820
engineers are sitting down here but I'm

00:00:22,380 --> 00:00:27,599
going to talk a little bit about what

00:00:23,820 --> 00:00:28,980
electron is why it is and will show a

00:00:27,599 --> 00:00:30,990
little bit of how you would build your

00:00:28,980 --> 00:00:32,880
first teeny-tiny app yeah we're gonna

00:00:30,990 --> 00:00:34,800
build a tiny code editor it's not gonna

00:00:32,880 --> 00:00:36,840
be anything advanced but just so you get

00:00:34,800 --> 00:00:39,329
a feeling for how someone would build

00:00:36,840 --> 00:00:41,670
something with the electron and before

00:00:39,329 --> 00:00:42,989
we get into this talk I usually want to

00:00:41,670 --> 00:00:44,460
motivate the whole thing a little bit

00:00:42,989 --> 00:00:46,739
because one of the biggest concerns I

00:00:44,460 --> 00:00:49,770
have today is that there is this notion

00:00:46,739 --> 00:00:51,570
of JavaScript being inherently slow or

00:00:49,770 --> 00:00:53,010
Electra maps being inherently slow and I

00:00:51,570 --> 00:00:55,469
have this feeling that JavaScript today

00:00:53,010 --> 00:00:58,109
works a little bit like CGI in the sense

00:00:55,469 --> 00:00:59,460
that it's bad when people notice it but

00:00:58,109 --> 00:01:01,440
I'm convinced that most people don't

00:00:59,460 --> 00:01:03,270
notice and how many places JavaScript

00:01:01,440 --> 00:01:06,030
can actually be found and I've brought

00:01:03,270 --> 00:01:07,799
just a few of my favorite examples this

00:01:06,030 --> 00:01:10,049
one is the one that surprises people the

00:01:07,799 --> 00:01:11,729
most but the user interface and

00:01:10,049 --> 00:01:13,560
battlefield one is a typescript and

00:01:11,729 --> 00:01:15,960
reactor application the little

00:01:13,560 --> 00:01:18,570
ammunition counter that whole thing it's

00:01:15,960 --> 00:01:20,130
all react it's actually backed by MA

00:01:18,570 --> 00:01:22,380
packs with about a thousand observables

00:01:20,130 --> 00:01:25,920
and the thing that I always like to

00:01:22,380 --> 00:01:27,330
point out here is that as someone who

00:01:25,920 --> 00:01:29,250
comes from native development I've been

00:01:27,330 --> 00:01:31,650
beating this we should do web

00:01:29,250 --> 00:01:34,650
technologies from for about 10-15 years

00:01:31,650 --> 00:01:36,540
now obviously a JavaScript conference

00:01:34,650 --> 00:01:38,310
but there's this like understanding that

00:01:36,540 --> 00:01:40,380
JavaScript is supposedly easier and

00:01:38,310 --> 00:01:42,570
maybe not as good as native technologies

00:01:40,380 --> 00:01:44,579
I can assure you that the people working

00:01:42,570 --> 00:01:46,170
at dice do know a thing or two about

00:01:44,579 --> 00:01:48,420
native development they're quite go to

00:01:46,170 --> 00:01:49,799
building complex native applications but

00:01:48,420 --> 00:01:51,810
there's a reason why they chose

00:01:49,799 --> 00:01:53,100
typescript and react to build a user

00:01:51,810 --> 00:01:54,780
interface and that is that the web

00:01:53,100 --> 00:01:57,060
really is one of the best technologies

00:01:54,780 --> 00:01:59,610
we have today for building user

00:01:57,060 --> 00:02:01,170
interfaces that contain information it's

00:01:59,610 --> 00:02:03,630
just really really good at it

00:02:01,170 --> 00:02:07,350
right it's that's a very important point

00:02:03,630 --> 00:02:10,170
and the other example I have is from a

00:02:07,350 --> 00:02:11,760
similar similar point of view it's the

00:02:10,170 --> 00:02:13,440
NVIDIA GeForce experience if you have a

00:02:11,760 --> 00:02:14,610
Windows device that has an

00:02:13,440 --> 00:02:16,260
a graphics card you have this

00:02:14,610 --> 00:02:17,910
application installed it comes with the

00:02:16,260 --> 00:02:20,250
drivers and the nvidia geforce

00:02:17,910 --> 00:02:22,560
experience comes with not only web

00:02:20,250 --> 00:02:24,510
components but also no js' every single

00:02:22,560 --> 00:02:27,060
nvidia driver contains a version of

00:02:24,510 --> 00:02:29,250
nodejs and it's used for communication

00:02:27,060 --> 00:02:32,730
between the GPU and applications and

00:02:29,250 --> 00:02:34,560
nvidia tools so things like the nvidia

00:02:32,730 --> 00:02:36,710
in-game experience where you can record

00:02:34,560 --> 00:02:39,540
things all of that is handled via nodejs

00:02:36,710 --> 00:02:40,710
and this is an interesting use case for

00:02:39,540 --> 00:02:42,480
me because we often talk about node.js

00:02:40,710 --> 00:02:44,220
as being cross-platform and JavaScript

00:02:42,480 --> 00:02:45,570
being cross-platform and video doesn't

00:02:44,220 --> 00:02:47,310
really necessarily care about all of

00:02:45,570 --> 00:02:49,680
that it's just a really convenient way

00:02:47,310 --> 00:02:51,930
to write this kind of stuff and again I

00:02:49,680 --> 00:02:54,510
love this Nvidia example because the

00:02:51,930 --> 00:02:56,850
Nvidia people to have a whole plethora

00:02:54,510 --> 00:02:57,930
of coding languages to choose from and

00:02:56,850 --> 00:02:59,940
it's not that there's a bunch of people

00:02:57,930 --> 00:03:01,800
sitting in a video and going oh we sadly

00:02:59,940 --> 00:03:04,020
only know JavaScript if only there was

00:03:01,800 --> 00:03:05,430
anything else we could use they've

00:03:04,020 --> 00:03:08,090
chosen this tool because it is really

00:03:05,430 --> 00:03:10,800
the best one for the application and

00:03:08,090 --> 00:03:13,200
then lastly the Adobe Creative Suite

00:03:10,800 --> 00:03:15,240
which is sort of and the way they

00:03:13,200 --> 00:03:16,980
designed that cross-platform solutions a

00:03:15,240 --> 00:03:18,930
little bit like the grandfather of

00:03:16,980 --> 00:03:20,360
electron because the Adobe Creative

00:03:18,930 --> 00:03:23,190
Suite was one of the first applications

00:03:20,360 --> 00:03:25,560
that shipped with the chrome content

00:03:23,190 --> 00:03:26,730
module and nodejs embedded so every

00:03:25,560 --> 00:03:29,160
single time you open up Photoshop

00:03:26,730 --> 00:03:31,260
Lightroom Premiere Pro any of those

00:03:29,160 --> 00:03:34,080
creative Adobe applications you're

00:03:31,260 --> 00:03:36,930
opening up nodejs and chrome it's not

00:03:34,080 --> 00:03:38,640
the whole application but they do power

00:03:36,930 --> 00:03:40,860
the plug-in experience with those two

00:03:38,640 --> 00:03:43,739
tools and the reason they did that is to

00:03:40,860 --> 00:03:45,390
allow plug-in developers including Adobe

00:03:43,739 --> 00:03:47,220
itself to build cross-platform

00:03:45,390 --> 00:03:49,620
experience that can hook into the native

00:03:47,220 --> 00:03:51,209
experience there was the idea right we

00:03:49,620 --> 00:03:54,480
didn't really have a solution for

00:03:51,209 --> 00:03:56,580
building semi native code they could

00:03:54,480 --> 00:03:58,170
hook into the operating system and also

00:03:56,580 --> 00:03:59,760
build some kind of user interface for

00:03:58,170 --> 00:04:03,630
plugin developers so they chose those

00:03:59,760 --> 00:04:05,820
two technologies and then lastly the

00:04:03,630 --> 00:04:06,860
fury latest a few latest came all the

00:04:05,820 --> 00:04:09,209
electronic ations

00:04:06,860 --> 00:04:10,980
there's a few famous examples that you

00:04:09,209 --> 00:04:13,470
may have heard of Visual Studio code is

00:04:10,980 --> 00:04:15,900
sort of our poster child slack is the

00:04:13,470 --> 00:04:18,690
one that I work on but there's also ones

00:04:15,900 --> 00:04:21,780
that I find personally more interesting

00:04:18,690 --> 00:04:23,729
as an X Microsoft person the installer

00:04:21,780 --> 00:04:25,050
for Visual Studio itself the big Visual

00:04:23,729 --> 00:04:26,290
Studio is written in an electron

00:04:25,050 --> 00:04:28,900
abdication

00:04:26,290 --> 00:04:32,070
which is one of my favorite stories but

00:04:28,900 --> 00:04:34,240
there's so many other ones right

00:04:32,070 --> 00:04:37,000
whatsapp I personally built a little

00:04:34,240 --> 00:04:39,720
windows 95 emulator and electron there's

00:04:37,000 --> 00:04:41,470
dozens of applications out there and

00:04:39,720 --> 00:04:43,060
chances that you're an electron

00:04:41,470 --> 00:04:45,460
implication on your notebook are pretty

00:04:43,060 --> 00:04:46,600
actually pretty high I just want to do

00:04:45,460 --> 00:04:48,900
this real quick how many of you are

00:04:46,600 --> 00:04:52,030
running either Visual Studio code slack

00:04:48,900 --> 00:04:56,290
Microsoft teams discord or Adam on your

00:04:52,030 --> 00:05:01,480
device nice cool see that makes us very

00:04:56,290 --> 00:05:02,890
happy isn't that exciting so whenever

00:05:01,480 --> 00:05:04,240
you give this talk and it's gotten

00:05:02,890 --> 00:05:06,670
better over the years but it's certainly

00:05:04,240 --> 00:05:10,770
at the beginning did I just lose the

00:05:06,670 --> 00:05:10,770
display nice

00:05:19,260 --> 00:05:24,560
all right that's got to be difficult

00:05:21,810 --> 00:05:24,560
what do we do

00:05:46,240 --> 00:06:02,060
any ideas do if any of you people here

00:05:55,270 --> 00:06:08,060
yeah that they are cool howdy

00:06:02,060 --> 00:06:08,930
we just lost our presentation okay cool

00:06:08,060 --> 00:06:14,780
enough that was easy

00:06:08,930 --> 00:06:17,060
literally just press one button er thank

00:06:14,780 --> 00:06:19,850
you okay so whenever I give that

00:06:17,060 --> 00:06:21,590
presentation the the reaction isn't

00:06:19,850 --> 00:06:23,620
great and it wasn't great before we

00:06:21,590 --> 00:06:26,570
started working this electron thing

00:06:23,620 --> 00:06:27,800
before that it was wind ray asked this

00:06:26,570 --> 00:06:32,780
notion of writing Windows applications

00:06:27,800 --> 00:06:34,820
and web technologies but there's a real

00:06:32,780 --> 00:06:36,470
reason why we're doing it right and the

00:06:34,820 --> 00:06:39,530
primary reason that I want to point out

00:06:36,470 --> 00:06:41,300
is that most of the people working on

00:06:39,530 --> 00:06:43,390
electron even the people using electron

00:06:41,300 --> 00:06:45,440
today would gladly choose something else

00:06:43,390 --> 00:06:47,990
on electron itself you have a bunch of

00:06:45,440 --> 00:06:49,610
native developers the slack runtime team

00:06:47,990 --> 00:06:51,890
is made up entirely by native developers

00:06:49,610 --> 00:06:53,540
who then learned JavaScript we chose

00:06:51,890 --> 00:06:55,070
this tool not because we didn't have

00:06:53,540 --> 00:06:56,420
anything else available but because we

00:06:55,070 --> 00:07:00,140
tried everything else and everything

00:06:56,420 --> 00:07:02,170
else is terrible this brilliant no other

00:07:00,140 --> 00:07:03,800
way to say that which pains me but

00:07:02,170 --> 00:07:05,180
especially if you want to build a

00:07:03,800 --> 00:07:07,070
cross-platform application that is

00:07:05,180 --> 00:07:09,650
supposed to run on Windows seven and up

00:07:07,070 --> 00:07:12,560
with a big one Windows 7 was released

00:07:09,650 --> 00:07:14,240
the same year as the iPhone 3 which by

00:07:12,560 --> 00:07:17,120
the way had the headline feature of copy

00:07:14,240 --> 00:07:18,920
and paste and sending pictures via text

00:07:17,120 --> 00:07:22,430
messages that's how old this operating

00:07:18,920 --> 00:07:23,720
system is so if you want to support that

00:07:22,430 --> 00:07:25,430
operating system together with the

00:07:23,720 --> 00:07:28,190
modern Windows systems and Mac OS and

00:07:25,430 --> 00:07:29,390
Linux there really isn't much and there

00:07:28,190 --> 00:07:31,340
certainly isn't much that doesn't

00:07:29,390 --> 00:07:34,760
require you to build a bunch of native

00:07:31,340 --> 00:07:36,380
applications for each platform so with

00:07:34,760 --> 00:07:38,360
that being said what is

00:07:36,380 --> 00:07:40,430
electron-electron is a combination of

00:07:38,360 --> 00:07:42,500
three major components the first one

00:07:40,430 --> 00:07:45,650
being the chrome content module this is

00:07:42,500 --> 00:07:47,240
in your head basically in an analog to

00:07:45,650 --> 00:07:49,550
chromium right

00:07:47,240 --> 00:07:52,280
it's the anything chrome deems necessary

00:07:49,550 --> 00:07:53,420
to build a browser - everything that is

00:07:52,280 --> 00:07:56,060
google-specific

00:07:53,420 --> 00:07:58,280
so no Google profiles but everything

00:07:56,060 --> 00:08:02,389
need to turn javascript HTML CSS into

00:07:58,280 --> 00:08:04,700
pixels and then we have no js' the v8

00:08:02,389 --> 00:08:06,830
runtime we all love dearly right and

00:08:04,700 --> 00:08:10,280
then we have a very thick layer of c++

00:08:06,830 --> 00:08:12,139
around it and this layer of c++

00:08:10,280 --> 00:08:14,389
implements a bunch of api's you might

00:08:12,139 --> 00:08:16,430
need to build a native application those

00:08:14,389 --> 00:08:18,830
are things like interacting with the

00:08:16,430 --> 00:08:21,110
native window object or sending native

00:08:18,830 --> 00:08:22,850
notifications or interacting with a

00:08:21,110 --> 00:08:25,220
touch bar whatever you might need

00:08:22,850 --> 00:08:27,530
and there's a pretty thick layer of c++

00:08:25,220 --> 00:08:29,150
and electron comes with that allows you

00:08:27,530 --> 00:08:32,150
to do that cross-platform

00:08:29,150 --> 00:08:35,330
so how do you actually use all of that

00:08:32,150 --> 00:08:36,890
right that's the demo part we're going

00:08:35,330 --> 00:08:39,320
to do this little little electron thing

00:08:36,890 --> 00:08:41,450
and because Visual Studio code is

00:08:39,320 --> 00:08:42,979
essentially a poster child what I want

00:08:41,450 --> 00:08:45,890
to do is I want to tell you about Monica

00:08:42,979 --> 00:08:49,430
editor which you might already know it's

00:08:45,890 --> 00:08:51,770
very possible but Monica editor is a

00:08:49,430 --> 00:08:53,660
thing implemented in Microsoft a bunch

00:08:51,770 --> 00:08:55,460
of years ago as Visual Studio online

00:08:53,660 --> 00:08:57,260
which didn't really work out and

00:08:55,460 --> 00:08:59,480
eventually became a part of era websites

00:08:57,260 --> 00:09:02,240
and it was sort of this notion that in

00:08:59,480 --> 00:09:03,320
Azure you had a little little pen and

00:09:02,240 --> 00:09:05,839
when you hit it you could edit your

00:09:03,320 --> 00:09:08,570
website as your website itself wasn't

00:09:05,839 --> 00:09:12,080
the biggest success but this little text

00:09:08,570 --> 00:09:14,089
editor was pretty damn good and at that

00:09:12,080 --> 00:09:15,530
time someone made this joke of oh if you

00:09:14,089 --> 00:09:17,450
put that in a window and I give it to

00:09:15,530 --> 00:09:19,700
people they're gonna use it which was a

00:09:17,450 --> 00:09:23,360
funny joke but you know then then they

00:09:19,700 --> 00:09:25,640
did it so that's how we have Visual

00:09:23,360 --> 00:09:27,500
Studio code today so we're gonna do the

00:09:25,640 --> 00:09:30,380
same thing right like this is how many

00:09:27,500 --> 00:09:31,880
electron applications begin they start

00:09:30,380 --> 00:09:33,920
as a website or a web application that

00:09:31,880 --> 00:09:35,450
is extremely powerful and then

00:09:33,920 --> 00:09:36,830
eventually someone goes oh this could be

00:09:35,450 --> 00:09:39,500
an amazing desktop application

00:09:36,830 --> 00:09:41,660
if only it could do X right and X could

00:09:39,500 --> 00:09:43,370
be whatever you want because no GS

00:09:41,660 --> 00:09:45,350
allows you to write in whatever you want

00:09:43,370 --> 00:09:46,970
if you want to write C or C++ or

00:09:45,350 --> 00:09:48,200
anything else we have a lot of

00:09:46,970 --> 00:09:50,870
objective-c and select desktop

00:09:48,200 --> 00:09:53,150
applications you can do that you have

00:09:50,870 --> 00:09:54,350
native know that ons but that's usually

00:09:53,150 --> 00:09:55,670
out begins and the case a Visual Studio

00:09:54,350 --> 00:09:57,920
code the most obvious thing that

00:09:55,670 --> 00:09:59,690
happened was this would be a great text

00:09:57,920 --> 00:10:01,820
editor if only could read and save files

00:09:59,690 --> 00:10:05,420
which is one of the basic features of a

00:10:01,820 --> 00:10:06,800
text editor which in 2019 you can

00:10:05,420 --> 00:10:08,209
actually do with a browser but certainly

00:10:06,800 --> 00:10:09,770
in Visual Studio code started you

00:10:08,209 --> 00:10:11,690
couldn't write and if you think about

00:10:09,770 --> 00:10:13,190
the editor today it has a native

00:10:11,690 --> 00:10:15,740
debugger right all kinds of features

00:10:13,190 --> 00:10:17,570
that you can't really do in a website so

00:10:15,740 --> 00:10:21,290
let's actually do that and go through

00:10:17,570 --> 00:10:25,910
the motion what I have here is the most

00:10:21,290 --> 00:10:27,770
simple of the most simple of index files

00:10:25,910 --> 00:10:31,180
indexed which is and we're going to

00:10:27,770 --> 00:10:33,590
start by turning it into a note package

00:10:31,180 --> 00:10:38,540
there we go so now we have a package

00:10:33,590 --> 00:10:39,980
Jason and in this package Jason what we

00:10:38,540 --> 00:10:41,420
would normally do if we were to build a

00:10:39,980 --> 00:10:42,920
note application it's that we defined a

00:10:41,420 --> 00:10:45,020
start script right and for most

00:10:42,920 --> 00:10:47,000
applications there will be no doubt

00:10:45,020 --> 00:10:50,300
noticed sort of the runtime that runs

00:10:47,000 --> 00:10:54,380
our JavaScript right so when we execute

00:10:50,300 --> 00:10:56,270
this application with an NPM start what

00:10:54,380 --> 00:10:57,980
happens is that note reads our index

00:10:56,270 --> 00:11:00,350
which is which right now and here's a

00:10:57,980 --> 00:11:01,030
console log and then eventually executes

00:11:00,350 --> 00:11:03,410
it

00:11:01,030 --> 00:11:05,690
so to turn this into an electron

00:11:03,410 --> 00:11:06,790
implication the first step we take is

00:11:05,690 --> 00:11:11,990
extremely simple

00:11:06,790 --> 00:11:14,660
we npm install electron which will

00:11:11,990 --> 00:11:16,160
install electron as a dependency it's a

00:11:14,660 --> 00:11:17,300
fairly straightforward process we

00:11:16,160 --> 00:11:20,330
download the electron for your current

00:11:17,300 --> 00:11:25,360
platform and then in the picture Jason

00:11:20,330 --> 00:11:25,360
will you replace our node with electron

00:11:27,190 --> 00:11:32,960
when we execute this application is that

00:11:30,260 --> 00:11:36,200
correct writing will start what happens

00:11:32,960 --> 00:11:38,000
now is that more or less the same thing

00:11:36,200 --> 00:11:39,740
happens when you boot up electron we

00:11:38,000 --> 00:11:41,990
start something called the main process

00:11:39,740 --> 00:11:44,750
which to you might look and feel a lot

00:11:41,990 --> 00:11:46,040
like a normal node process there's one

00:11:44,750 --> 00:11:48,380
important difference the first one is

00:11:46,040 --> 00:11:51,020
that you can now see electron down here

00:11:48,380 --> 00:11:52,790
we are an actual application and the

00:11:51,020 --> 00:11:55,780
other one is that this script doesn't

00:11:52,790 --> 00:11:58,580
immediate but otherwise this is

00:11:55,780 --> 00:12:03,980
basically node if you want to require s

00:11:58,580 --> 00:12:05,540
you can do that and you can use this any

00:12:03,980 --> 00:12:06,920
any given node script will be basically

00:12:05,540 --> 00:12:08,330
around here right you have everything

00:12:06,920 --> 00:12:11,450
else that you have normally available

00:12:08,330 --> 00:12:13,850
and this is our main process once we've

00:12:11,450 --> 00:12:16,220
started this main process we also boot

00:12:13,850 --> 00:12:17,630
up everything we need for Chrome so

00:12:16,220 --> 00:12:20,660
those are typical things like the GPU

00:12:17,630 --> 00:12:22,820
process and then eventually we can start

00:12:20,660 --> 00:12:23,540
additional renderer processes which for

00:12:22,820 --> 00:12:25,820
us our window

00:12:23,540 --> 00:12:27,139
so when you want to build a desktop

00:12:25,820 --> 00:12:29,630
application one of the most important

00:12:27,139 --> 00:12:31,190
pieces of primitives you have is the

00:12:29,630 --> 00:12:33,519
user interface the window that you're

00:12:31,190 --> 00:12:36,380
going to start painting things in and

00:12:33,519 --> 00:12:38,209
the way electron solves that is that it

00:12:36,380 --> 00:12:40,699
should feel very familiar to anyone

00:12:38,209 --> 00:12:44,089
who's used to note applications and that

00:12:40,699 --> 00:12:46,459
you already know the fs module you know

00:12:44,089 --> 00:12:49,790
the Utah module we have one additional

00:12:46,459 --> 00:12:56,839
one that is called electron right so you

00:12:49,790 --> 00:12:58,699
can can do this in electron itself

00:12:56,839 --> 00:13:01,250
contains a bunch of modules the first

00:12:58,699 --> 00:13:02,930
one being the app module and the second

00:13:01,250 --> 00:13:03,889
one being the browser window module and

00:13:02,930 --> 00:13:06,740
those are the ones we're going to use

00:13:03,889 --> 00:13:08,389
for a second so the application object

00:13:06,740 --> 00:13:11,779
allows us to interact with the

00:13:08,389 --> 00:13:13,940
applications lifecycle on your operating

00:13:11,779 --> 00:13:15,680
system what I mean by that is when you

00:13:13,940 --> 00:13:17,420
start an electron application this main

00:13:15,680 --> 00:13:19,399
process never has any user interface

00:13:17,420 --> 00:13:20,810
it's always invisible on windows who

00:13:19,399 --> 00:13:22,040
don't even have anything in your in your

00:13:20,810 --> 00:13:24,889
taskbar

00:13:22,040 --> 00:13:27,079
but we also boot up a GPU process and

00:13:24,889 --> 00:13:28,940
various services and eventually those

00:13:27,079 --> 00:13:31,069
services are going to be ready and ready

00:13:28,940 --> 00:13:35,240
for you to start doing UI stuff so we're

00:13:31,069 --> 00:13:36,980
gonna say application on ready and do

00:13:35,240 --> 00:13:44,300
things now and what we're gonna do is

00:13:36,980 --> 00:13:48,310
we're gonna make a window just like so

00:13:44,300 --> 00:13:51,290
and now when we start this application

00:13:48,310 --> 00:13:53,269
we get an empty window nothing super

00:13:51,290 --> 00:13:55,160
exciting here in fact if you open the

00:13:53,269 --> 00:13:57,079
developer tools they crash immediately

00:13:55,160 --> 00:13:59,079
because they do expect some kind of

00:13:57,079 --> 00:14:01,399
content which is currently not present

00:13:59,079 --> 00:14:03,620
but that's fundamentally I will open up

00:14:01,399 --> 00:14:05,360
a browser window and we're going to

00:14:03,620 --> 00:14:08,240
start doing we're gonna start doing user

00:14:05,360 --> 00:14:09,980
interfaces here but one cool thing about

00:14:08,240 --> 00:14:11,420
electron is that we can combine the

00:14:09,980 --> 00:14:12,050
powers of node with the power of

00:14:11,420 --> 00:14:15,050
chromium

00:14:12,050 --> 00:14:20,139
so as specification I can say web

00:14:15,050 --> 00:14:23,630
preferences don't integration true now

00:14:20,139 --> 00:14:28,579
it's the next step I'm going to make an

00:14:23,630 --> 00:14:31,490
HTML file something small prepared here

00:14:28,579 --> 00:14:35,720
right it's a little HTML file that

00:14:31,490 --> 00:14:37,910
contains some very bare-bones content

00:14:35,720 --> 00:14:45,200
and then my index J is I'm going to load

00:14:37,910 --> 00:14:47,240
set file okay so that brings us one step

00:14:45,200 --> 00:14:50,000
closer to an actual application in that

00:14:47,240 --> 00:14:52,150
we now have a window with the dock icon

00:14:50,000 --> 00:14:54,020
and in the window we have actual content

00:14:52,150 --> 00:14:56,780
but the thing that makes this very

00:14:54,020 --> 00:15:00,470
quickly very interesting is if i zoom in

00:14:56,780 --> 00:15:02,570
here is that we have all of node

00:15:00,470 --> 00:15:06,590
available here including native modules

00:15:02,570 --> 00:15:11,030
if you want to so if I want to read

00:15:06,590 --> 00:15:12,560
anything this works this is here in my

00:15:11,030 --> 00:15:14,330
window so that allows you to combine the

00:15:12,560 --> 00:15:17,330
powers that you know from the Dom CSS

00:15:14,330 --> 00:15:19,090
with everything you know from node right

00:15:17,330 --> 00:15:21,560
so if you have a piece of native code

00:15:19,090 --> 00:15:23,060
say sequel light or something you can

00:15:21,560 --> 00:15:24,200
load that here that actually works and

00:15:23,060 --> 00:15:27,740
you can combine those two things

00:15:24,200 --> 00:15:32,660
together and what I'm gonna do so I'm

00:15:27,740 --> 00:15:33,710
going to install Monaco loader and

00:15:32,660 --> 00:15:35,300
Monica editor

00:15:33,710 --> 00:15:37,010
these are modules that are normally

00:15:35,300 --> 00:15:39,440
consumed with web pack or some other

00:15:37,010 --> 00:15:44,740
common J's and port turn into web stuff

00:15:39,440 --> 00:15:49,700
kind of tools but I'm gonna go ahead and

00:15:44,740 --> 00:15:51,650
add a renderer ojs and because in here I

00:15:49,700 --> 00:15:55,190
already explained that we have no devale

00:15:51,650 --> 00:15:57,530
about speaking about miles Universal

00:15:55,190 --> 00:16:03,140
JavaScript I can just do common J's in

00:15:57,530 --> 00:16:04,820
my browser that works because it's just

00:16:03,140 --> 00:16:10,570
note right I'm just doing note things

00:16:04,820 --> 00:16:10,570
here so in here if I do a quick console

00:16:10,960 --> 00:16:18,350
also lock hello we run this again to

00:16:16,820 --> 00:16:21,020
open up the console you will see my

00:16:18,350 --> 00:16:22,790
little hello all right there so taking

00:16:21,020 --> 00:16:26,480
that one step further let's actually

00:16:22,790 --> 00:16:28,339
start building our editor a few things

00:16:26,480 --> 00:16:31,880
I'm going to do I'm going to start by

00:16:28,339 --> 00:16:34,610
actually including the loader itself and

00:16:31,880 --> 00:16:36,560
this is not electron specific this could

00:16:34,610 --> 00:16:38,210
be any node.js code it's just that this

00:16:36,560 --> 00:16:41,390
is fairly simple straightforward code

00:16:38,210 --> 00:16:46,839
therefore good for demonstration and now

00:16:41,390 --> 00:16:46,839
I'm going to get my Def Con staff

00:16:47,220 --> 00:16:53,470
document.getelementbyid e container and

00:16:50,860 --> 00:16:55,270
this is cool you know how you sometimes

00:16:53,470 --> 00:16:57,780
need to do some canvas stuff a node and

00:16:55,270 --> 00:16:59,830
then you install 50,000 modules because

00:16:57,780 --> 00:17:01,720
implementing a canvas Android javascript

00:16:59,830 --> 00:17:03,640
is kind of difficult we have to fold um

00:17:01,720 --> 00:17:07,089
available here all of it

00:17:03,640 --> 00:17:09,390
whatever you need so another we have our

00:17:07,089 --> 00:17:13,630
diff I'm going to create a little editor

00:17:09,390 --> 00:17:15,130
and this is molecule specific code but

00:17:13,630 --> 00:17:17,080
what I'm doing is I'm saying hey dear

00:17:15,130 --> 00:17:20,589
Monaco editor please create a new editor

00:17:17,080 --> 00:17:24,430
in the div language I want JavaScript

00:17:20,589 --> 00:17:26,650
and as theme I want vs dark when we

00:17:24,430 --> 00:17:28,000
start this is going to look terrible but

00:17:26,650 --> 00:17:33,330
I'm gonna do it anyway just so you see

00:17:28,000 --> 00:17:38,980
how terrible it looks looks like this

00:17:33,330 --> 00:17:40,510
little fin not to worry though you know

00:17:38,980 --> 00:17:45,850
like a like a good chef I've prepared

00:17:40,510 --> 00:17:47,470
some CSS probably complicated what I'm

00:17:45,850 --> 00:17:50,410
doing is I'm saying no marginal pairings

00:17:47,470 --> 00:17:53,260
no overflow make sure the editor itself

00:17:50,410 --> 00:17:56,980
has a 100% width and height and then I'm

00:17:53,260 --> 00:17:58,780
using I'm giving the container also full

00:17:56,980 --> 00:18:00,700
width and height of the viewport which

00:17:58,780 --> 00:18:02,890
it's an interesting point for me because

00:18:00,700 --> 00:18:04,360
depending on which browser you support

00:18:02,890 --> 00:18:05,950
that is a variable you couldn't use on

00:18:04,360 --> 00:18:08,470
your CSS right viewport height and width

00:18:05,950 --> 00:18:10,480
is not crazy new but if you consider

00:18:08,470 --> 00:18:12,690
supporting something as far back as ie8

00:18:10,480 --> 00:18:14,680
ie9 because you have an enterprise

00:18:12,690 --> 00:18:17,490
communication tool like slack and you

00:18:14,680 --> 00:18:20,800
need to support enterprise environments

00:18:17,490 --> 00:18:22,570
those values would not be okay right but

00:18:20,800 --> 00:18:23,800
since I'm shipping my own browser engine

00:18:22,570 --> 00:18:26,740
I don't really have to worry about that

00:18:23,800 --> 00:18:28,120
and getting a new browser engine into an

00:18:26,740 --> 00:18:33,100
enterprise environment it's a lot easier

00:18:28,120 --> 00:18:34,360
than convincing you know some super

00:18:33,100 --> 00:18:37,480
secure environment to install an

00:18:34,360 --> 00:18:40,630
entirely new browser so we've done that

00:18:37,480 --> 00:18:42,670
and we can start this application again

00:18:40,630 --> 00:18:43,930
and now we get something that looks a

00:18:42,670 --> 00:18:45,760
little bit like Visual Studio code

00:18:43,930 --> 00:18:48,580
itself let's move this over here and

00:18:45,760 --> 00:18:53,740
this over here and if I wanted to I can

00:18:48,580 --> 00:18:55,360
now load my actual app in here you can't

00:18:53,740 --> 00:18:58,480
zoom in yet I didn't we didn't build the

00:18:55,360 --> 00:18:59,710
whole zoom thing yet we can but I don't

00:18:58,480 --> 00:19:05,730
think it's actually gonna work

00:18:59,710 --> 00:19:10,299
just a key one to it yeah there we go

00:19:05,730 --> 00:19:11,440
and believe it or not this is pretty

00:19:10,299 --> 00:19:13,360
much the bad ones version of Visual

00:19:11,440 --> 00:19:14,559
Studio code right like most of the

00:19:13,360 --> 00:19:16,539
things we use in Visual Studio code

00:19:14,559 --> 00:19:18,490
every single day and are available in

00:19:16,539 --> 00:19:19,890
this teeny tiny application there isn't

00:19:18,490 --> 00:19:23,529
really that much more that people did

00:19:19,890 --> 00:19:25,870
the first version edit local loading and

00:19:23,529 --> 00:19:30,220
saving using the FS module I just read

00:19:25,870 --> 00:19:32,549
it in save it out and more or less

00:19:30,220 --> 00:19:35,200
that's everything that happened here

00:19:32,549 --> 00:19:36,490
which is an interesting point to talk a

00:19:35,200 --> 00:19:37,899
little bit about the challenges right I

00:19:36,490 --> 00:19:39,130
promise in the abstract that we would

00:19:37,899 --> 00:19:42,730
talk a little bit about what makes this

00:19:39,130 --> 00:19:44,730
difficult and there's one very common

00:19:42,730 --> 00:19:47,140
pitfall that many applications fall into

00:19:44,730 --> 00:19:49,120
right after realizing all these powers

00:19:47,140 --> 00:19:50,919
so what electron essentially does is

00:19:49,120 --> 00:19:53,080
that it takes web developers and gives

00:19:50,919 --> 00:19:54,490
them all the powers of node or it takes

00:19:53,080 --> 00:19:57,340
no developers and use them all the

00:19:54,490 --> 00:19:58,450
powers of user interfaces sooner or

00:19:57,340 --> 00:20:00,159
later someone is going to have the

00:19:58,450 --> 00:20:01,480
really clever idea of doing all of that

00:20:00,159 --> 00:20:04,450
and then loading something from the

00:20:01,480 --> 00:20:06,130
internet right that would be a very

00:20:04,450 --> 00:20:07,990
straightforward process would be like

00:20:06,130 --> 00:20:09,490
why do we even ship all our HTML we

00:20:07,990 --> 00:20:10,779
could just load it from the Internet and

00:20:09,490 --> 00:20:13,559
that is probably the biggest challenge

00:20:10,779 --> 00:20:16,000
because that is a terrible terrible idea

00:20:13,559 --> 00:20:17,470
and that's a terrible idea because again

00:20:16,000 --> 00:20:19,720
you have all of node available which has

00:20:17,470 --> 00:20:21,340
the same rights as you and it has a

00:20:19,720 --> 00:20:25,000
child process and if you want to spawn

00:20:21,340 --> 00:20:26,770
things you can do that so the way

00:20:25,000 --> 00:20:29,049
electron is used today by modern

00:20:26,770 --> 00:20:30,760
applications is one of two ways the

00:20:29,049 --> 00:20:33,039
first one is the visual studio code way

00:20:30,760 --> 00:20:34,809
where you do actually ship all your

00:20:33,039 --> 00:20:36,340
application code and you trust that code

00:20:34,809 --> 00:20:40,149
and you have node code that you trust

00:20:36,340 --> 00:20:41,470
right and then the alternative is model

00:20:40,149 --> 00:20:43,299
that slack is currently following where

00:20:41,470 --> 00:20:45,820
we do load web content but we don't

00:20:43,299 --> 00:20:48,309
really trust it web content we say ok

00:20:45,820 --> 00:20:51,429
this web content might have a right um

00:20:48,309 --> 00:20:53,500
to more than the actual then in a

00:20:51,429 --> 00:20:56,049
browser but we control very neatly and

00:20:53,500 --> 00:20:58,570
very very narrowly what kind of features

00:20:56,049 --> 00:21:00,610
are available there and the way that is

00:20:58,570 --> 00:21:02,140
usually managed is that the renderer

00:21:00,610 --> 00:21:03,880
process in the main process can

00:21:02,140 --> 00:21:07,029
communicate via something called the

00:21:03,880 --> 00:21:08,919
inter process communication module which

00:21:07,029 --> 00:21:10,360
is a little advanced and sometimes new

00:21:08,919 --> 00:21:12,100
for note developers and also that

00:21:10,360 --> 00:21:13,360
developers because most of us aren't

00:21:12,100 --> 00:21:15,940
actually used to multi

00:21:13,360 --> 00:21:19,690
process coding let alone multi-thread

00:21:15,940 --> 00:21:21,190
coding but fundamentally the idea here

00:21:19,690 --> 00:21:22,480
is that you sort of choose your you

00:21:21,190 --> 00:21:23,740
choose your poison I do either don't

00:21:22,480 --> 00:21:25,120
trust where you're loading and then you

00:21:23,740 --> 00:21:26,860
need to control what kind of things that

00:21:25,120 --> 00:21:28,270
application can do or you ship

00:21:26,860 --> 00:21:30,000
everything with your application and

00:21:28,270 --> 00:21:32,710
that is probably the biggest challenge

00:21:30,000 --> 00:21:36,460
and now that we've pulled this

00:21:32,710 --> 00:21:37,929
application the next typical step for

00:21:36,460 --> 00:21:39,730
people would be that you go ahead and

00:21:37,929 --> 00:21:42,309
try to turn that into an actual binary

00:21:39,730 --> 00:21:43,570
right and there's various solutions

00:21:42,309 --> 00:21:44,890
available for that one of the things

00:21:43,570 --> 00:21:46,780
that is great about electron is that

00:21:44,890 --> 00:21:48,400
tons of applications depend on it

00:21:46,780 --> 00:21:50,890
because tons of applications depend on

00:21:48,400 --> 00:21:52,240
it the ecosystem is extremely rich to

00:21:50,890 --> 00:21:54,460
date there is more than a thousand five

00:21:52,240 --> 00:21:56,710
hundred modules available NPM that do

00:21:54,460 --> 00:21:59,350
something electron specific and usually

00:21:56,710 --> 00:22:01,090
that thing is to an electron into a

00:21:59,350 --> 00:22:02,679
certain application package right if you

00:22:01,090 --> 00:22:04,150
want to ship your electron application

00:22:02,679 --> 00:22:05,919
to the snap craft store that is

00:22:04,150 --> 00:22:10,000
available if you want to notarize it

00:22:05,919 --> 00:22:11,620
with Mac OS that is available and one of

00:22:10,000 --> 00:22:14,200
the one of the tools that does it

00:22:11,620 --> 00:22:15,940
extremely well is electron forge as

00:22:14,200 --> 00:22:18,490
built by Sam who's sitting right there

00:22:15,940 --> 00:22:23,110
so if you don't like it please annoy him

00:22:18,490 --> 00:22:24,580
immediately but what electron Forge does

00:22:23,110 --> 00:22:27,549
is that it allows you to take your

00:22:24,580 --> 00:22:29,230
application and immediately turn that

00:22:27,549 --> 00:22:30,880
into a binary without having to worry

00:22:29,230 --> 00:22:32,620
about anything too much it's it's very

00:22:30,880 --> 00:22:35,470
straightforward and very quick so if we

00:22:32,620 --> 00:22:37,270
you know if you want to see that in

00:22:35,470 --> 00:22:40,929
action one of the applications I would

00:22:37,270 --> 00:22:43,390
recommend to look at is electrons own

00:22:40,929 --> 00:22:45,900
little application called fiddle which

00:22:43,390 --> 00:22:48,640
also lets you play with electron itself

00:22:45,900 --> 00:22:52,120
fiddle is sort of the thing that we just

00:22:48,640 --> 00:22:53,650
built except that we kept going fiddle

00:22:52,120 --> 00:22:55,840
is a little code editor that allows you

00:22:53,650 --> 00:22:57,309
to build little teeny tiny electron

00:22:55,840 --> 00:22:59,410
experiments and play with them and you

00:22:57,309 --> 00:23:00,610
can check out various tools in there so

00:22:59,410 --> 00:23:02,559
if you want to see something like the

00:23:00,610 --> 00:23:07,720
desktop capture which is a tool that

00:23:02,559 --> 00:23:10,540
lets you just install catallena

00:23:07,720 --> 00:23:14,470
shouldn't have done that there we go yes

00:23:10,540 --> 00:23:17,820
fine okay nothing is allowed anymore

00:23:14,470 --> 00:23:17,820
gotta ask for everything

00:23:20,740 --> 00:23:24,350
so anyway as I was saying if you want to

00:23:23,090 --> 00:23:26,090
see something like the desktop capture

00:23:24,350 --> 00:23:30,830
on action you can run this little

00:23:26,090 --> 00:23:35,540
application and the desert capture is

00:23:30,830 --> 00:23:36,920
broken which we will debug later but

00:23:35,540 --> 00:23:37,820
it's it's a little application that's

00:23:36,920 --> 00:23:39,770
not only open-source

00:23:37,820 --> 00:23:40,910
it's also using electron forge so you

00:23:39,770 --> 00:23:42,710
can sort of see how we turn this

00:23:40,910 --> 00:23:45,290
application into actual binaries we do

00:23:42,710 --> 00:23:46,370
all of that in CI building a complete

00:23:45,290 --> 00:23:47,630
new version of this doesn't really

00:23:46,370 --> 00:23:51,680
require for me anything else and a

00:23:47,630 --> 00:23:53,210
little iPad and it's also a little

00:23:51,680 --> 00:23:54,710
tighter and neater than visuals to do

00:23:53,210 --> 00:23:57,110
code itself which is also open source

00:23:54,710 --> 00:23:59,720
but might be a bit of a mouthful if you

00:23:57,110 --> 00:24:01,190
start there right because obviously that

00:23:59,720 --> 00:24:05,270
application has been in the works for a

00:24:01,190 --> 00:24:06,970
while alright we have about five minutes

00:24:05,270 --> 00:24:10,700
for Q&A if anyone has any questions

00:24:06,970 --> 00:24:12,080
while we do that I'm gonna leave this

00:24:10,700 --> 00:24:14,930
open if any of you want to get started

00:24:12,080 --> 00:24:18,020
with it and haven't yet recommend fiddle

00:24:14,930 --> 00:24:19,310
recommend electron j/s fiddle also

00:24:18,020 --> 00:24:21,860
allows you to export your little

00:24:19,310 --> 00:24:23,390
experiments as a forge project so you

00:24:21,860 --> 00:24:25,970
can build something tiny just export it

00:24:23,390 --> 00:24:28,940
as a desktop app send it to your parents

00:24:25,970 --> 00:24:30,650
right which is honestly one of the big

00:24:28,940 --> 00:24:32,210
benefits of any of you write NPM modules

00:24:30,650 --> 00:24:34,460
so you can send your little NPM modules

00:24:32,210 --> 00:24:36,710
to your grandma and she can run it which

00:24:34,460 --> 00:24:44,480
might be more difficult than NPM install

00:24:36,710 --> 00:24:46,700
instructions alright if there are no

00:24:44,480 --> 00:24:49,370
questions you can find me on Twitter you

00:24:46,700 --> 00:24:52,430
can find electron on Twitter you can

00:24:49,370 --> 00:24:53,690
also find many of us here today so if

00:24:52,430 --> 00:24:55,910
any of any questions that you don't want

00:24:53,690 --> 00:24:56,970
to ask here just find us later thanks

00:24:55,910 --> 00:25:02,789
you all for coming by

00:24:56,970 --> 00:25:02,789

YouTube URL: https://www.youtube.com/watch?v=xGYRr-vBv1c


