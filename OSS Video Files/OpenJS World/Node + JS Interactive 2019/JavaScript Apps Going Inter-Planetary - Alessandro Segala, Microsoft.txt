Title: JavaScript Apps Going Inter-Planetary - Alessandro Segala, Microsoft
Publication date: 2020-05-11
Playlist: Node + JS Interactive 2019
Description: 
	JavaScript Apps Going Inter-Planetary - Alessandro Segala, Microsoft
Speakers: Alessandro Segala
What if the JAMstack (JavaScript, APIs, Markup) could run on the distributed web? Meet IPFS, or the Inter-Planetary File System, a new way to serve static files and apps in a distributed way.

Come to this session and see how you can run your own static JavaScript apps on IPFS, and make them ready for primetime. Youâ€™ll learn how to ensure high availability for your app, making it accessible to anyone over HTTPS (thanks Cloudflare!), and how to enable Continuous Integration and Continuous Delivery (using Azure Pipelines).
Captions: 
	00:00:00,030 --> 00:00:06,930
okay hello can everyone hear me hi good

00:00:03,840 --> 00:00:08,910
afternoon thank you for coming my name

00:00:06,930 --> 00:00:11,580
is Alessandra Sagara I work for

00:00:08,910 --> 00:00:13,950
Microsoft during my full time job but I

00:00:11,580 --> 00:00:17,100
also enjoy hacking with some really cool

00:00:13,950 --> 00:00:19,770
stuff and today I'm here to talk to you

00:00:17,100 --> 00:00:21,449
about the interplanetary file system or

00:00:19,770 --> 00:00:23,609
AP FS

00:00:21,449 --> 00:00:25,380
this is a talk about the distributed web

00:00:23,609 --> 00:00:26,550
but I promise there will not be any

00:00:25,380 --> 00:00:30,269
blockchain in this talk

00:00:26,550 --> 00:00:33,690
so before we start can I see quick raise

00:00:30,269 --> 00:00:38,129
of hands who has heard or used the ipfs

00:00:33,690 --> 00:00:41,250
before so it seems like this is a new

00:00:38,129 --> 00:00:44,160
topic for most people so let's see how I

00:00:41,250 --> 00:00:45,989
can learn about this so what is ipfs so

00:00:44,160 --> 00:00:48,180
the definition that you see here this is

00:00:45,989 --> 00:00:51,120
actually my definition it's not exactly

00:00:48,180 --> 00:00:52,980
their their own but I describe it as a

00:00:51,120 --> 00:00:56,640
distributed peer-to-peer protocol and

00:00:52,980 --> 00:00:58,289
network for accessing documents there's

00:00:56,640 --> 00:01:01,260
a few things here but you can think

00:00:58,289 --> 00:01:03,390
about IP FSS as a sort of decentralizes

00:01:01,260 --> 00:01:08,580
decentralized replicated peer-to-peer

00:01:03,390 --> 00:01:10,049
CDN the concept of peer-to-peer is in

00:01:08,580 --> 00:01:12,299
opposition of the traditional

00:01:10,049 --> 00:01:13,950
client-server method as you can see here

00:01:12,299 --> 00:01:17,430
this is the full extent of my

00:01:13,950 --> 00:01:19,229
illustrator skills but in a traditional

00:01:17,430 --> 00:01:21,119
model like most of us have been building

00:01:19,229 --> 00:01:22,860
up forever there is a centralized server

00:01:21,119 --> 00:01:25,799
or a cluster of servers and all the

00:01:22,860 --> 00:01:27,600
clients connect to that server and the

00:01:25,799 --> 00:01:29,970
service serve the content do all the

00:01:27,600 --> 00:01:32,549
processing etc in a pure peer-to-peer

00:01:29,970 --> 00:01:33,990
model which is something that you might

00:01:32,549 --> 00:01:36,150
have heard before if you have used

00:01:33,990 --> 00:01:40,140
things like BitTorrent which I've never

00:01:36,150 --> 00:01:41,850
absolutely ever never heard but every

00:01:40,140 --> 00:01:43,979
node in the network has the same

00:01:41,850 --> 00:01:45,899
documents and every single node that is

00:01:43,979 --> 00:01:47,520
trying to access a document can request

00:01:45,899 --> 00:01:51,780
it from every other node in the network

00:01:47,520 --> 00:01:53,490
so it's essentially think of you acting

00:01:51,780 --> 00:01:56,430
as a client but also as a server at the

00:01:53,490 --> 00:01:58,860
same time keep in mind that peer-to-peer

00:01:56,430 --> 00:02:01,170
does not mean serverless in fact as you

00:01:58,860 --> 00:02:03,540
can see here in this graphic there is a

00:02:01,170 --> 00:02:05,759
server in here this is because nodes

00:02:03,540 --> 00:02:07,619
clients can come and go can join the

00:02:05,759 --> 00:02:09,330
network and disappear at any time they

00:02:07,619 --> 00:02:10,830
might or might not have the documents

00:02:09,330 --> 00:02:13,080
you're trying to share and so it's

00:02:10,830 --> 00:02:13,530
important to keep one server up and

00:02:13,080 --> 00:02:15,750
running

00:02:13,530 --> 00:02:18,270
4:7 as a sitter for your files that are

00:02:15,750 --> 00:02:20,970
in the peer-to-peer network one

00:02:18,270 --> 00:02:23,610
particular characteristic of ipfs is

00:02:20,970 --> 00:02:26,430
that every time a node accesses a file

00:02:23,610 --> 00:02:28,590
it also starts seeding it so this means

00:02:26,430 --> 00:02:30,840
that the more popular a file is the more

00:02:28,590 --> 00:02:32,430
people request that file the more spread

00:02:30,840 --> 00:02:34,319
out at throughout the network is and the

00:02:32,430 --> 00:02:35,970
more available it is which also means

00:02:34,319 --> 00:02:38,160
that it becomes faster and that it's

00:02:35,970 --> 00:02:41,370
really really really hard to do a DDoS

00:02:38,160 --> 00:02:43,230
on ipfs because has people try to attack

00:02:41,370 --> 00:02:44,819
the network they request the fires and

00:02:43,230 --> 00:02:47,160
they actually start seeding it too so

00:02:44,819 --> 00:02:49,650
it's literally the opposite of what

00:02:47,160 --> 00:02:51,420
people are trying to do before we get

00:02:49,650 --> 00:02:54,120
into the next part one important thing

00:02:51,420 --> 00:02:55,709
that I want to point out is that ipfs

00:02:54,120 --> 00:02:57,720
when you think of this you hear the name

00:02:55,709 --> 00:03:00,450
file system a lot of people think that

00:02:57,720 --> 00:03:02,700
is a sort of Nass it's not I actually

00:03:00,450 --> 00:03:05,220
think that that is the bad stuff about

00:03:02,700 --> 00:03:06,870
the name but ipfs is not enough you

00:03:05,220 --> 00:03:09,810
don't just upload your files into this

00:03:06,870 --> 00:03:11,459
network and then the and then the the

00:03:09,810 --> 00:03:13,440
network keeps your files forever it's

00:03:11,459 --> 00:03:15,660
more of a CDN literally you just use

00:03:13,440 --> 00:03:18,269
ipfs to distribute your content but you

00:03:15,660 --> 00:03:20,430
must always keep one node up with your

00:03:18,269 --> 00:03:21,959
data 24/7 if you want to make sure that

00:03:20,430 --> 00:03:25,799
there's always at least some one seed in

00:03:21,959 --> 00:03:27,420
your files I'm going to go in a demo in

00:03:25,799 --> 00:03:29,070
just a moment but before we get into

00:03:27,420 --> 00:03:31,350
that there's another concept that I need

00:03:29,070 --> 00:03:34,549
to explain which is the content IDs so

00:03:31,350 --> 00:03:36,660
inside the ipfs network files are

00:03:34,549 --> 00:03:39,290
addressed using their country ID

00:03:36,660 --> 00:03:42,480
it starts with slash ipfs slash

00:03:39,290 --> 00:03:44,450
something that's something is simply

00:03:42,480 --> 00:03:47,579
fine a little bit it's a sort of the

00:03:44,450 --> 00:03:49,590
sha-256 hash of the file and so each

00:03:47,579 --> 00:03:53,850
file in the network is addressed by its

00:03:49,590 --> 00:03:55,799
own hash I can also request a folder in

00:03:53,850 --> 00:03:57,600
this case as you can see in the second

00:03:55,799 --> 00:03:59,370
example down there in this case I'm

00:03:57,600 --> 00:04:00,989
requesting the readme file inside a

00:03:59,370 --> 00:04:02,880
folder and that is the hash of the

00:04:00,989 --> 00:04:04,500
folder the hash of the folder is

00:04:02,880 --> 00:04:08,640
calculated from the hash of every single

00:04:04,500 --> 00:04:09,810
file it's not extracted the sha-256 it's

00:04:08,640 --> 00:04:12,060
a little bit more complex than that but

00:04:09,810 --> 00:04:13,579
we don't have a lot of time today to get

00:04:12,060 --> 00:04:17,100
into the actual details of the network

00:04:13,579 --> 00:04:19,079
but these two addresses are Bob they

00:04:17,100 --> 00:04:20,489
actually point to the very same file so

00:04:19,079 --> 00:04:21,840
if you request the first one you're

00:04:20,489 --> 00:04:23,849
going to get the readme file by

00:04:21,840 --> 00:04:25,050
requesting the file directly if you

00:04:23,849 --> 00:04:26,730
request the second one you're going to

00:04:25,050 --> 00:04:30,030
get the readme file by requesting

00:04:26,730 --> 00:04:33,000
the file inside the folder the biggest

00:04:30,030 --> 00:04:35,400
benefit of addressing content by its

00:04:33,000 --> 00:04:37,530
hash is that the network is tamper proof

00:04:35,400 --> 00:04:39,960
so if one of the nodes in the spirit of

00:04:37,530 --> 00:04:42,600
pure Network were to send tampered

00:04:39,960 --> 00:04:44,120
content like media malicious actor wants

00:04:42,600 --> 00:04:47,190
to do a man-in-the-middle and serve you

00:04:44,120 --> 00:04:48,780
modified content then the client would

00:04:47,190 --> 00:04:50,580
be immediately able to understand that

00:04:48,780 --> 00:04:54,030
the file was tampered with and will

00:04:50,580 --> 00:04:56,190
reject that block the the other benefit

00:04:54,030 --> 00:04:58,320
of addressing content via the counter

00:04:56,190 --> 00:04:59,940
IDs or the hash and but which is also

00:04:58,320 --> 00:05:02,550
challenged is that the content is

00:04:59,940 --> 00:05:04,770
immutable so if you change as you know

00:05:02,550 --> 00:05:07,950
if you change over even a single bit in

00:05:04,770 --> 00:05:09,900
a fire the sha-256 hash of the file is

00:05:07,950 --> 00:05:14,160
completely different so we will need to

00:05:09,900 --> 00:05:15,930
look into ways that we can make make it

00:05:14,160 --> 00:05:18,110
possible to actually update a content

00:05:15,930 --> 00:05:21,330
that does require change in its hash

00:05:18,110 --> 00:05:24,480
let's get into the demo right away and

00:05:21,330 --> 00:05:26,520
let's see how ipfs works so have my

00:05:24,480 --> 00:05:28,320
machine here and I have ipfs installed

00:05:26,520 --> 00:05:30,510
and I can show that it's in store by

00:05:28,320 --> 00:05:32,580
running ipfs version and the very first

00:05:30,510 --> 00:05:35,430
thing i want to do is run in either PFS

00:05:32,580 --> 00:05:38,400
node into inside my machine so I'm

00:05:35,430 --> 00:05:40,290
starting it with ipfs daemon this should

00:05:38,400 --> 00:05:40,830
take just a second and it will start now

00:05:40,290 --> 00:05:43,890
it's ready

00:05:40,830 --> 00:05:46,740
let's open under terminal and let's

00:05:43,890 --> 00:05:49,470
request a file from the network most

00:05:46,740 --> 00:05:51,870
commands and ipfs are inspired by the

00:05:49,470 --> 00:05:53,520
standard unix commands so in order to

00:05:51,870 --> 00:05:56,280
request a file for example the command

00:05:53,520 --> 00:05:59,010
is ipfs cat and then the address of the

00:05:56,280 --> 00:06:06,360
file so let's request that with me fire

00:05:59,010 --> 00:06:08,100
I was talking about a moment ago and you

00:06:06,360 --> 00:06:09,660
can see that the file is loaded so this

00:06:08,100 --> 00:06:11,310
is me requested I'd read me and I

00:06:09,660 --> 00:06:13,430
requested it with a peer-to-peer network

00:06:11,310 --> 00:06:16,620
and some people somewhere in the world

00:06:13,430 --> 00:06:18,690
scientist fire to me I can also list the

00:06:16,620 --> 00:06:22,920
content of a folder so this file is

00:06:18,690 --> 00:06:31,680
inside a folder and again the command is

00:06:22,920 --> 00:06:32,970
ipfs LS s4 and you can see that this is

00:06:31,680 --> 00:06:35,400
a folder it contains a bunch of

00:06:32,970 --> 00:06:38,910
different files each file also has the

00:06:35,400 --> 00:06:40,260
hash of the individual file of course I

00:06:38,910 --> 00:06:43,860
can request a file inside the form

00:06:40,260 --> 00:06:45,570
so let's do I PFS cat inside the folder

00:06:43,860 --> 00:06:47,280
I want the readme file and you can see

00:06:45,570 --> 00:06:49,680
it's exactly the same file but this time

00:06:47,280 --> 00:06:52,140
I access it through the folder rather

00:06:49,680 --> 00:06:54,690
than the file itself we can publish

00:06:52,140 --> 00:06:58,530
documents on a PFS so I have a folder on

00:06:54,690 --> 00:07:00,080
my desktop called good boys you can

00:06:58,530 --> 00:07:02,720
probably imagine what's in here and

00:07:00,080 --> 00:07:05,520
there's a bunch of files so let's add

00:07:02,720 --> 00:07:08,340
ipfs had one of these files to the

00:07:05,520 --> 00:07:11,340
network with the ipfs add command you

00:07:08,340 --> 00:07:13,530
can see that my machine hash the file

00:07:11,340 --> 00:07:15,750
and then publish it in Ella PFS Network

00:07:13,530 --> 00:07:18,210
so now everyone in the world with this

00:07:15,750 --> 00:07:20,340
address can retrieve this file from my

00:07:18,210 --> 00:07:24,330
machine I can also publish entire

00:07:20,340 --> 00:07:27,540
folders with ipfs add dash R for

00:07:24,330 --> 00:07:29,910
recursive and the folder name and now

00:07:27,540 --> 00:07:31,950
I'm publish the entire folder so this is

00:07:29,910 --> 00:07:34,920
how you retrieve and add files from the

00:07:31,950 --> 00:07:37,200
AP FS Network some of these things that

00:07:34,920 --> 00:07:39,750
are published are documents like images

00:07:37,200 --> 00:07:41,250
that do not really work well inside the

00:07:39,750 --> 00:07:42,770
terminal I don't think you can really

00:07:41,250 --> 00:07:44,580
look at her images at a terminal

00:07:42,770 --> 00:07:47,460
thankfully there is a better way for

00:07:44,580 --> 00:07:49,440
that and every single ipfs node every

00:07:47,460 --> 00:07:51,960
time you start an app EFS demon inside

00:07:49,440 --> 00:07:53,880
your machine you also get a gateway that

00:07:51,960 --> 00:07:55,650
you can access through a web browser so

00:07:53,880 --> 00:07:59,730
the gateway is always available in

00:07:55,650 --> 00:08:01,350
localhost 8080 and I can type an address

00:07:59,730 --> 00:08:03,030
here to request it so I'm going to

00:08:01,350 --> 00:08:06,330
request this folder that I just

00:08:03,030 --> 00:08:09,840
published and you can see the list of

00:08:06,330 --> 00:08:14,130
files here some one good boy and there's

00:08:09,840 --> 00:08:15,930
more here I not only I can put publish

00:08:14,130 --> 00:08:18,930
files and documents and pictures but I

00:08:15,930 --> 00:08:20,940
can also publish a hierarchy of files so

00:08:18,930 --> 00:08:22,830
inside here I have a folder and I can

00:08:20,940 --> 00:08:24,780
click on the folder and oblique here

00:08:22,830 --> 00:08:28,470
it's that of lists in the files this

00:08:24,780 --> 00:08:30,930
folder had an index dot HTML file and I

00:08:28,470 --> 00:08:34,200
can use this to to publish more than

00:08:30,930 --> 00:08:39,300
just just lists of files if I look at

00:08:34,200 --> 00:08:42,270
the contents of the folder you will see

00:08:39,300 --> 00:08:44,820
that there is an index of HTML and this

00:08:42,270 --> 00:08:47,550
fire inside is linking to an image that

00:08:44,820 --> 00:08:50,670
was in the directory one level above so

00:08:47,550 --> 00:08:52,320
even though every file is identified by

00:08:50,670 --> 00:08:54,150
its hash when you put a file inside that

00:08:52,320 --> 00:08:56,670
folder you can also reference file

00:08:54,150 --> 00:08:58,800
but their name and every single path as

00:08:56,670 --> 00:09:00,330
long as it's relative can work when I

00:08:58,800 --> 00:09:02,640
say as long as it's relative I mean you

00:09:00,330 --> 00:09:04,650
cannot start with a slash but you can

00:09:02,640 --> 00:09:10,410
start with a period or just the path of

00:09:04,650 --> 00:09:17,340
the fire so okay let's go to the next

00:09:10,410 --> 00:09:19,290
step so if you're thinking like I'm

00:09:17,340 --> 00:09:20,910
thinking when you saw that I can run

00:09:19,290 --> 00:09:23,070
index dot HTML files and they're

00:09:20,910 --> 00:09:25,320
actually rendered the next thing your

00:09:23,070 --> 00:09:28,320
your mind is going to is jump stack

00:09:25,320 --> 00:09:30,120
applications I'm I think that John stack

00:09:28,320 --> 00:09:31,890
ups are quite familiar concept for many

00:09:30,120 --> 00:09:34,830
people in this room those are apps that

00:09:31,890 --> 00:09:36,870
are built with jump stack means Java

00:09:34,830 --> 00:09:38,700
Script API is and pre-rendered markups

00:09:36,870 --> 00:09:40,020
and they're very common right now when

00:09:38,700 --> 00:09:43,770
you're building an app for example we'd

00:09:40,020 --> 00:09:46,050
react views weld angular etc the app is

00:09:43,770 --> 00:09:48,240
completely static there is no

00:09:46,050 --> 00:09:51,000
server-side process in your app and the

00:09:48,240 --> 00:09:54,420
app is usually served through some sort

00:09:51,000 --> 00:09:56,340
of object storage like AWS s3 or a blob

00:09:54,420 --> 00:09:58,680
storage and then it's served to a CDN

00:09:56,340 --> 00:10:00,900
before that the app can communicate with

00:09:58,680 --> 00:10:04,770
back-end resources through normal rest

00:10:00,900 --> 00:10:07,770
call or graphical calls or G RPC calls

00:10:04,770 --> 00:10:09,900
if you want to really be fancy and and

00:10:07,770 --> 00:10:12,660
you can do a lot if you think of modern

00:10:09,900 --> 00:10:14,550
junkstock ups well Facebook is being

00:10:12,660 --> 00:10:16,590
rebuilt with react and it's going to be

00:10:14,550 --> 00:10:18,720
jump stack Twitter just republish their

00:10:16,590 --> 00:10:21,390
app as a jump stack up you think of

00:10:18,720 --> 00:10:24,240
Gmail outlook.com and a bunch of other

00:10:21,390 --> 00:10:27,570
apps it they're very very popular how is

00:10:24,240 --> 00:10:29,490
this relevant for us used in IP FS well

00:10:27,570 --> 00:10:31,410
we could obviously serve these apps

00:10:29,490 --> 00:10:32,970
through ipfs as well so rather than

00:10:31,410 --> 00:10:35,340
having the apps stored inside object

00:10:32,970 --> 00:10:39,120
storage and a CDN we use IP FS as a

00:10:35,340 --> 00:10:41,640
content distribution network the API is

00:10:39,120 --> 00:10:44,190
as you can see are still here these

00:10:41,640 --> 00:10:46,110
don't have to be your api's like you can

00:10:44,190 --> 00:10:49,080
for example interact with third-party

00:10:46,110 --> 00:10:50,490
api's to provide value to your users so

00:10:49,080 --> 00:10:55,800
you still do not have to manage the

00:10:50,490 --> 00:10:57,570
backend and this is exactly what I'm

00:10:55,800 --> 00:10:59,280
going to show you in the demo there is a

00:10:57,570 --> 00:11:02,310
demo application you can find on github

00:10:59,280 --> 00:11:03,970
if you're interested in in trying it

00:11:02,310 --> 00:11:15,970
yourself and URL is there

00:11:03,970 --> 00:11:19,779
so this demo app is a pretty normal

00:11:15,970 --> 00:11:21,549
application written in using the svelte

00:11:19,779 --> 00:11:23,649
framework you could use react you could

00:11:21,549 --> 00:11:28,449
use anything else and it's compiled with

00:11:23,649 --> 00:11:31,449
webpack this application is configured

00:11:28,449 --> 00:11:33,849
to interact with imagine this was an

00:11:31,449 --> 00:11:35,470
enterprise application and this income

00:11:33,849 --> 00:11:39,009
is configured to interact with the

00:11:35,470 --> 00:11:40,779
office 365 ap is and he can show what's

00:11:39,009 --> 00:11:43,419
next on my calendar there is absolutely

00:11:40,779 --> 00:11:46,599
no server-side processing that I manage

00:11:43,419 --> 00:11:50,949
no API that I manage but if I go to a

00:11:46,599 --> 00:11:52,479
local lost 3000 you will see that oops

00:11:50,949 --> 00:11:55,119
he didn't ask me to authenticate I

00:11:52,479 --> 00:11:56,439
forgot to sign out anyways if I had sign

00:11:55,119 --> 00:11:58,899
out he would ask me to authenticate

00:11:56,439 --> 00:12:00,249
using Azure Active Directory and then it

00:11:58,899 --> 00:12:03,419
will get permission to access my

00:12:00,249 --> 00:12:05,589
calendar which is stored on office 365

00:12:03,419 --> 00:12:07,329
this is showing the next appointment on

00:12:05,589 --> 00:12:09,279
my calendar tomorrow I'm going to get

00:12:07,329 --> 00:12:10,689
lunch this place is really good here in

00:12:09,279 --> 00:12:12,609
Montreal if you don't know that it's

00:12:10,689 --> 00:12:14,970
great in your key they're not paying me

00:12:12,609 --> 00:12:17,470
for saying this I really love this place

00:12:14,970 --> 00:12:20,559
and so this app is now running locally

00:12:17,470 --> 00:12:21,999
with just a normal and p.m. run dev so

00:12:20,559 --> 00:12:25,899
it's there's a web pack server it's a

00:12:21,999 --> 00:12:27,909
vides up the next thing we want to do is

00:12:25,899 --> 00:12:30,729
as you would normally do stop the server

00:12:27,909 --> 00:12:33,879
and actually run npm build to build the

00:12:30,729 --> 00:12:36,459
app and stage it this would take just a

00:12:33,879 --> 00:12:38,109
second and then my app will be inside

00:12:36,459 --> 00:12:40,119
this folder you will see here that we

00:12:38,109 --> 00:12:43,329
have the index of HTML and the

00:12:40,119 --> 00:12:46,539
JavaScript CSS I can now publish this up

00:12:43,329 --> 00:12:50,049
into ipfs as exactly as I did before so

00:12:46,539 --> 00:12:53,019
ipfs ad - air and the content of the

00:12:50,049 --> 00:12:55,779
dist folder this app is published and

00:12:53,019 --> 00:12:59,259
now everyone can everyone in the world

00:12:55,779 --> 00:13:04,389
can use this contr ID put it aside and

00:12:59,259 --> 00:13:07,689
ipfs gateway and look at my app the very

00:13:04,389 --> 00:13:09,849
same app served to ipfs again this up

00:13:07,689 --> 00:13:11,949
that's not a very back end but I am

00:13:09,849 --> 00:13:14,129
using third-party api's to do all the

00:13:11,949 --> 00:13:14,129
processing

00:13:20,570 --> 00:13:26,460
so this is really cool you're saying but

00:13:23,580 --> 00:13:29,520
what about normal users if I had to tell

00:13:26,460 --> 00:13:31,020
my business use if I had like if I was

00:13:29,520 --> 00:13:32,670
an enterprise developer building an app

00:13:31,020 --> 00:13:34,890
for my company and I had to tell

00:13:32,670 --> 00:13:36,600
everyone that in order to access the app

00:13:34,890 --> 00:13:39,270
they have to download the ipfs

00:13:36,600 --> 00:13:40,680
application run the daemon their machine

00:13:39,270 --> 00:13:43,440
which requires using a command line

00:13:40,680 --> 00:13:46,080
there is a GUI for that but still then

00:13:43,440 --> 00:13:47,850
instead of typing a URL like example.com

00:13:46,080 --> 00:13:51,270
that I would have to pay to type the URL

00:13:47,850 --> 00:13:54,150
gateway and that very long string which

00:13:51,270 --> 00:13:55,830
is the address so thankfully there is a

00:13:54,150 --> 00:13:58,560
solution for that the first thing is

00:13:55,830 --> 00:14:01,440
that your users don't necessarily need

00:13:58,560 --> 00:14:03,240
to run a PFS on their machine and they

00:14:01,440 --> 00:14:06,180
can use a third-party gateway there are

00:14:03,240 --> 00:14:07,980
a few public gateways here you see two

00:14:06,180 --> 00:14:10,380
examples gateway dot appear faster IO

00:14:07,980 --> 00:14:12,420
which is the quote unquote official one

00:14:10,380 --> 00:14:15,210
and a third one and a third party ones

00:14:12,420 --> 00:14:18,930
or by CloudFlare at CloudFlare - ipfs

00:14:15,210 --> 00:14:20,130
dot-com and I am highlighting cloud four

00:14:18,930 --> 00:14:22,650
in particular and we'll see that in a

00:14:20,130 --> 00:14:25,710
moment why so by using this rather than

00:14:22,650 --> 00:14:27,210
going to localhost 8080 you can go

00:14:25,710 --> 00:14:29,340
directly to the same to these addresses

00:14:27,210 --> 00:14:32,780
and you don't rip and you don't need to

00:14:29,340 --> 00:14:36,000
run a daemon locally the next thing is

00:14:32,780 --> 00:14:37,470
the URL is pretty complicated like

00:14:36,000 --> 00:14:39,450
imagine turning over someone over the

00:14:37,470 --> 00:14:43,050
phone that they have to go to cloud fair

00:14:39,450 --> 00:14:46,770
- ipfs dot-com / IP FS / q my etc etc

00:14:43,050 --> 00:14:49,320
this is absolutely not nice there is a

00:14:46,770 --> 00:14:52,230
solution of ever and that really relies

00:14:49,320 --> 00:14:54,960
on the IP NS on the inn or the

00:14:52,230 --> 00:14:58,380
interplanetary names name service and on

00:14:54,960 --> 00:15:01,140
DNS link so we can create a txt record

00:14:58,380 --> 00:15:04,020
on a domain and that txt record can

00:15:01,140 --> 00:15:07,050
contain the address of document aside

00:15:04,020 --> 00:15:09,960
ipfs so for example if I want my app to

00:15:07,050 --> 00:15:12,720
be available on next dot it a lapel dot

00:15:09,960 --> 00:15:15,660
me i will create the txt record on

00:15:12,720 --> 00:15:18,540
underscore DRS link dot the address and

00:15:15,660 --> 00:15:20,430
that txt record contains the content as

00:15:18,540 --> 00:15:22,740
you see here now that I've done that

00:15:20,430 --> 00:15:25,260
anyone even you right now on your

00:15:22,740 --> 00:15:28,589
laptops or phones you can go to cloud

00:15:25,260 --> 00:15:30,509
for ipfs comm / IP and as

00:15:28,589 --> 00:15:32,490
watch out for the end this time and type

00:15:30,509 --> 00:15:34,230
the domain next of Italy peridot me and

00:15:32,490 --> 00:15:41,160
that will load your app the very same

00:15:34,230 --> 00:15:43,019
app then very last step is how we can

00:15:41,160 --> 00:15:44,370
make this even easier so the reason why

00:15:43,019 --> 00:15:46,470
I was talking about the cloud fair

00:15:44,370 --> 00:15:48,269
gateway specifically is because they

00:15:46,470 --> 00:15:51,269
have a really cool feature which lets

00:15:48,269 --> 00:15:53,519
you map a domain name to the IPF to the

00:15:51,269 --> 00:15:55,800
cloud for a PFS gateway and it lets you

00:15:53,519 --> 00:15:59,939
visit the website directly without

00:15:55,800 --> 00:16:02,069
having to type CloudFlare - ipfs calm so

00:15:59,939 --> 00:16:03,870
let's look how you can actually bring

00:16:02,069 --> 00:16:05,879
the wrap into production and make it so

00:16:03,870 --> 00:16:12,449
your users can use that in a very simple

00:16:05,879 --> 00:16:14,850
way so like I was saying a moment ago

00:16:12,449 --> 00:16:20,819
this app is now available on cloud for

00:16:14,850 --> 00:16:25,550
ipfs calm / ipfs / the address but I can

00:16:20,819 --> 00:16:29,879
also change this to IP NS / next dot ETA

00:16:25,550 --> 00:16:33,329
pair here dot me and it's a very same

00:16:29,879 --> 00:16:36,059
app big because I mapped my domain to

00:16:33,329 --> 00:16:37,889
cloud 4 I can actually use next dot e 3

00:16:36,059 --> 00:16:39,779
parallel dot me you can see here there

00:16:37,889 --> 00:16:43,319
is the txt record with the address and

00:16:39,779 --> 00:16:45,959
then there is another cname that points

00:16:43,319 --> 00:16:47,040
next dot it repaired at me - Clara -

00:16:45,959 --> 00:16:49,589
ipfs dot-com

00:16:47,040 --> 00:16:54,089
so if I go to next dot ETA parallel that

00:16:49,589 --> 00:16:55,589
me again the very same app the other

00:16:54,089 --> 00:16:57,839
team that I wanted to show you is how

00:16:55,589 --> 00:17:01,410
you can actually move the next step

00:16:57,839 --> 00:17:03,629
which is you don't normally as I'm sure

00:17:01,410 --> 00:17:05,250
all of us know we don't really recommend

00:17:03,629 --> 00:17:07,829
doing things on the developer machine

00:17:05,250 --> 00:17:11,610
like running NPM build than ipfs adder

00:17:07,829 --> 00:17:13,409
and then you have to do distribute the

00:17:11,610 --> 00:17:14,699
harsh updated DNS etc we can use

00:17:13,409 --> 00:17:17,990
continuous integration and continuous

00:17:14,699 --> 00:17:17,990
delivery excuse me

00:17:22,439 --> 00:17:28,510
so in this get repo where my code is

00:17:26,949 --> 00:17:29,950
Austin which is public and you can take

00:17:28,510 --> 00:17:32,110
a look at that these are the code of the

00:17:29,950 --> 00:17:34,330
application I set up continuous

00:17:32,110 --> 00:17:36,850
integration using Azure pipelines I'm

00:17:34,330 --> 00:17:39,010
going to make a change and for example

00:17:36,850 --> 00:17:41,500
change the title of the page which is

00:17:39,010 --> 00:17:43,960
coming up on my calendar but it is the

00:17:41,500 --> 00:17:45,490
only way where I'm using that and I'm

00:17:43,960 --> 00:17:47,850
going to change it to next on my

00:17:45,490 --> 00:17:47,850
calendar

00:17:56,170 --> 00:17:59,540
committing the changes and this should

00:17:58,310 --> 00:18:02,990
trigger the continuous integration

00:17:59,540 --> 00:18:05,150
immediately using Azure pipe and the CI

00:18:02,990 --> 00:18:06,830
will take a minute so while the CI runs

00:18:05,150 --> 00:18:10,370
I'm going to show you exactly what is

00:18:06,830 --> 00:18:13,370
happening inside the CIA definition the

00:18:10,370 --> 00:18:17,230
first step on the CI is to run npm

00:18:13,370 --> 00:18:19,760
install it's good npm install and then

00:18:17,230 --> 00:18:21,380
run npm build this builds the

00:18:19,760 --> 00:18:23,870
application as if it were any other

00:18:21,380 --> 00:18:26,570
application then we can scroll down and

00:18:23,870 --> 00:18:29,870
this takes the application and copies it

00:18:26,570 --> 00:18:33,860
copies the compiled files to my IP FS

00:18:29,870 --> 00:18:37,970
server using SSH this IP FS server is

00:18:33,860 --> 00:18:39,980
something that I am running 24/7 and it

00:18:37,970 --> 00:18:42,050
is running the ipfs daemon using docker

00:18:39,980 --> 00:18:43,400
I'm not going to get into the detail of

00:18:42,050 --> 00:18:46,040
how you can set it up but these

00:18:43,400 --> 00:18:48,920
structures are in that git repo that you

00:18:46,040 --> 00:18:53,240
saw a moment ago so if I run docker PS a

00:18:48,920 --> 00:18:55,820
you can see sorry you can see that I

00:18:53,240 --> 00:19:05,510
have an IP FS note the resign go ipfs

00:18:55,820 --> 00:19:07,970
here this node is sudo it's currently

00:19:05,510 --> 00:19:10,820
pinning a bunch of different files so in

00:19:07,970 --> 00:19:13,100
the ipfs word pin-to-pin a file means

00:19:10,820 --> 00:19:16,280
that you're always serving that file so

00:19:13,100 --> 00:19:19,280
like I said a moment ago every node in

00:19:16,280 --> 00:19:20,960
ipfs not only can request files but can

00:19:19,280 --> 00:19:24,560
also see them to other users to other

00:19:20,960 --> 00:19:26,330
customers or secretarial clients because

00:19:24,560 --> 00:19:27,650
of that you might end up in a situation

00:19:26,330 --> 00:19:29,180
in which you're not is sitting the

00:19:27,650 --> 00:19:33,020
entire world or like a significant

00:19:29,180 --> 00:19:34,420
amount of data so the ipfs daemon can

00:19:33,020 --> 00:19:37,070
periodically do garbage collection

00:19:34,420 --> 00:19:39,770
instead when you add the file using IP

00:19:37,070 --> 00:19:42,380
FS ad or when you pin it using the IP FS

00:19:39,770 --> 00:19:43,880
pin command this file is pinned to your

00:19:42,380 --> 00:19:45,440
node and the garbage collection will

00:19:43,880 --> 00:19:46,940
never remove that this is quite

00:19:45,440 --> 00:19:48,260
important when you have a server and you

00:19:46,940 --> 00:19:51,380
want to make sure that your files are

00:19:48,260 --> 00:19:54,650
always served 24/7 so somewhere around

00:19:51,380 --> 00:19:58,370
here in this long list of caches there

00:19:54,650 --> 00:20:01,610
is also the the the app that I just

00:19:58,370 --> 00:20:04,240
built and that the CI has put the server

00:20:01,610 --> 00:20:04,240
and pinned it

00:20:05,480 --> 00:20:10,740
so the next step in the CI is actually

00:20:08,760 --> 00:20:12,720
the next relevant step is that it goes

00:20:10,740 --> 00:20:16,500
and automatically uses the cloud Ferrer

00:20:12,720 --> 00:20:18,390
API to modify the DNS that the value of

00:20:16,500 --> 00:20:20,910
the txt record and to automatically

00:20:18,390 --> 00:20:24,210
point my users to the latest version of

00:20:20,910 --> 00:20:25,950
the application for this my domain is

00:20:24,210 --> 00:20:27,390
Austin on cloud for that the dns is

00:20:25,950 --> 00:20:29,570
Austin on cloud 4 if you have another

00:20:27,390 --> 00:20:32,160
DNS provider you can do that as well so

00:20:29,570 --> 00:20:36,059
this guy let's see should have run by

00:20:32,160 --> 00:20:38,490
now and you can see here the CI was

00:20:36,059 --> 00:20:41,190
completed it has built application stage

00:20:38,490 --> 00:20:45,770
it and uploaded that DNS record and now

00:20:41,190 --> 00:20:48,390
if i refresh the page oops wrong page

00:20:45,770 --> 00:20:50,220
you will see that the title changed from

00:20:48,390 --> 00:20:53,970
coming up on my calendar tube next on my

00:20:50,220 --> 00:20:56,280
calendar one other thing that I wanted

00:20:53,970 --> 00:20:58,890
to say is that I've been showing how you

00:20:56,280 --> 00:21:01,200
can use your own server your own Linux

00:20:58,890 --> 00:21:02,640
VM to pin the files there are actually

00:21:01,200 --> 00:21:05,820
some third-party services that offer

00:21:02,640 --> 00:21:08,520
ipfs pinning as a service I'm not going

00:21:05,820 --> 00:21:10,980
to name names those are valid options at

00:21:08,520 --> 00:21:12,720
the moment they do not have any SLA so I

00:21:10,980 --> 00:21:14,880
would still prefer personally I still

00:21:12,720 --> 00:21:16,200
prefer having my own server maybe in

00:21:14,880 --> 00:21:20,550
addition to using those third-party

00:21:16,200 --> 00:21:23,190
services so now the application is live

00:21:20,550 --> 00:21:25,110
the CIC DEA's run it has uploaded a code

00:21:23,190 --> 00:21:26,970
and it's running on this domain and

00:21:25,110 --> 00:21:28,530
everyone in the world can just access it

00:21:26,970 --> 00:21:30,300
using the web browser

00:21:28,530 --> 00:21:31,950
and nothing else nothing more so you

00:21:30,300 --> 00:21:35,000
don't need to do anything spencey about

00:21:31,950 --> 00:21:35,000
APA festival it in particular

00:21:40,960 --> 00:21:44,870
so one of the question is why would I

00:21:43,789 --> 00:21:46,399
want to do that like what are the

00:21:44,870 --> 00:21:49,279
benefits I have highlighted some of the

00:21:46,399 --> 00:21:51,259
benefits before but one other important

00:21:49,279 --> 00:21:53,230
benefit that really impacted me also

00:21:51,259 --> 00:21:56,509
personally is that this can really scale

00:21:53,230 --> 00:21:59,570
so I had one up one static website that

00:21:56,509 --> 00:22:03,110
was deployed on deployed to ipfs and

00:21:59,570 --> 00:22:05,929
through Clara on March 13 2019 in one

00:22:03,110 --> 00:22:09,409
day that the app somehow got viral and

00:22:05,929 --> 00:22:11,659
the traffic spike 5060 percent that

00:22:09,409 --> 00:22:13,399
doesn't mean 5,000 requests but 5060

00:22:11,659 --> 00:22:16,669
percent requests compared to the

00:22:13,399 --> 00:22:18,830
previous day my server that was seed in

00:22:16,669 --> 00:22:21,169
those files had an impact on the CPU but

00:22:18,830 --> 00:22:24,500
if you want to see how much the impact

00:22:21,169 --> 00:22:26,870
was is around one percent so again

00:22:24,500 --> 00:22:29,059
serving 5,000 more requests the impact

00:22:26,870 --> 00:22:30,860
was essentially zero part of that sure

00:22:29,059 --> 00:22:33,740
it's thanks to the CDN that was doing

00:22:30,860 --> 00:22:35,690
caching but as you know a CDN also still

00:22:33,740 --> 00:22:38,840
needs to go and grab content from from

00:22:35,690 --> 00:22:40,070
an from no region and by using IP FS I

00:22:38,840 --> 00:22:45,710
was able to really distribute the

00:22:40,070 --> 00:22:49,580
traffic really effectively so what's

00:22:45,710 --> 00:22:52,940
next the first thing is I would invite

00:22:49,580 --> 00:22:54,379
you to be creative and think of ways of

00:22:52,940 --> 00:22:55,730
more and more things that you can do

00:22:54,379 --> 00:22:57,649
using a gem stack

00:22:55,730 --> 00:23:00,049
I'll show you before a moment ago this

00:22:57,649 --> 00:23:02,179
demo this demo had no back-end

00:23:00,049 --> 00:23:05,840
whatsoever and yet I was able to show my

00:23:02,179 --> 00:23:08,570
calendar as an example and make me up

00:23:05,840 --> 00:23:11,120
very interactive i authenticated using

00:23:08,570 --> 00:23:14,389
Azure ad most organizations that are

00:23:11,120 --> 00:23:16,669
using office 365 already excuse me

00:23:14,389 --> 00:23:19,100
already you are on Azure ad the other

00:23:16,669 --> 00:23:20,539
alternative is Google Apps or G suite so

00:23:19,100 --> 00:23:22,279
chances are that if you're building an

00:23:20,539 --> 00:23:24,580
enterprise app you can totally rely on

00:23:22,279 --> 00:23:27,980
authentication on one of those two and

00:23:24,580 --> 00:23:29,720
you can use those api's to do a lot you

00:23:27,980 --> 00:23:31,850
can still date you can store data on

00:23:29,720 --> 00:23:34,460
onedrive you can use third-party api's

00:23:31,850 --> 00:23:36,139
for generating thumbnails for sending

00:23:34,460 --> 00:23:41,210
emails and in text messages or whatever

00:23:36,139 --> 00:23:43,879
you want and I guess the next question

00:23:41,210 --> 00:23:46,340
is could we actually get away without

00:23:43,879 --> 00:23:48,799
any back-end API at all

00:23:46,340 --> 00:23:50,389
you remember that the image before the

00:23:48,799 --> 00:23:53,990
pristine API is even if we're using IP

00:23:50,389 --> 00:23:56,179
FS well I would say that not quite yet

00:23:53,990 --> 00:23:57,980
however we are working in a distributed

00:23:56,179 --> 00:23:59,960
web some people that are much much

00:23:57,980 --> 00:24:02,480
smarter than me are looking for solution

00:23:59,960 --> 00:24:03,799
into that however I promise at the

00:24:02,480 --> 00:24:05,210
beginning I would not be talking about

00:24:03,799 --> 00:24:08,809
blockchain and so I'm not going to say

00:24:05,210 --> 00:24:12,500
anything else about this and so thank

00:24:08,809 --> 00:24:14,840
you and you can find the sample code on

00:24:12,500 --> 00:24:16,880
github my username on Twitter and github

00:24:14,840 --> 00:24:19,399
is Italy pol it's like the beer but

00:24:16,880 --> 00:24:21,110
rather than India it says Italy and I'm

00:24:19,399 --> 00:24:22,730
available for question here for the next

00:24:21,110 --> 00:24:24,260
five minutes and then you will see me

00:24:22,730 --> 00:24:25,960
also the Microsoft both if you have a

00:24:24,260 --> 00:24:31,450
request

00:24:25,960 --> 00:24:31,450

YouTube URL: https://www.youtube.com/watch?v=zWk7aJXrLto


