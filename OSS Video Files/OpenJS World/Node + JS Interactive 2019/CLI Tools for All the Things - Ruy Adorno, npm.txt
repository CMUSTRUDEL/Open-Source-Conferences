Title: CLI Tools for All the Things - Ruy Adorno, npm
Publication date: 2020-05-11
Playlist: Node + JS Interactive 2019
Description: 
	CLI Tools for All the Things - Ruy Adorno, npm
Speakers: Ruy Adorno
Come learn how to build cli tools to enhance your day-to-workflows & change your life for the better.
Captions: 
	00:00:00,030 --> 00:00:07,200
all right I think I'm all set then let's

00:00:02,970 --> 00:00:10,790
start so welcome everyone my name is Rui

00:00:07,200 --> 00:00:10,790
adora whoa

00:00:11,360 --> 00:00:17,910
so I'm a local from Montreal I've been

00:00:15,480 --> 00:00:20,100
living here for 11 almost 11 years now

00:00:17,910 --> 00:00:22,350
so it's one of my greatest

00:00:20,100 --> 00:00:24,720
accomplishment all my life like become a

00:00:22,350 --> 00:00:27,570
Canadian citizen so yeah I really love

00:00:24,720 --> 00:00:29,640
the people here really love the country

00:00:27,570 --> 00:00:33,300
just the weather at this time of the

00:00:29,640 --> 00:00:35,850
year it starts it's not so great but

00:00:33,300 --> 00:00:39,629
yeah and I recently it's been three

00:00:35,850 --> 00:00:41,460
months now almost four I joined NPM so

00:00:39,629 --> 00:00:43,950
now I'm work at the open source team

00:00:41,460 --> 00:00:48,030
with Darcy you might have seen his talk

00:00:43,950 --> 00:00:50,940
yesterday yeah so you can find me at

00:00:48,030 --> 00:00:53,399
these places and I have before anything

00:00:50,940 --> 00:00:57,510
at all so thanks Joelle because I

00:00:53,399 --> 00:01:00,449
totally just stole his CLI slide that

00:00:57,510 --> 00:01:03,840
slide show so that little guy there is

00:01:00,449 --> 00:01:08,369
actually Joey over there thank you so

00:01:03,840 --> 00:01:12,119
much alright so we're here today to talk

00:01:08,369 --> 00:01:15,540
about CLA right I hope everyone here

00:01:12,119 --> 00:01:19,259
loves CLA right quick show of hands who

00:01:15,540 --> 00:01:20,610
who is a CLI on a day to day basis okay

00:01:19,259 --> 00:01:26,909
yeah okay

00:01:20,610 --> 00:01:29,189
it is the right crowd so yeah this is a

00:01:26,909 --> 00:01:32,369
quick talk and the goal here is just

00:01:29,189 --> 00:01:34,560
like for people to start people they're

00:01:32,369 --> 00:01:37,140
not doing yet start creating their own

00:01:34,560 --> 00:01:39,900
comment lines people who may be already

00:01:37,140 --> 00:01:45,119
doing maybe you learn about a thing or

00:01:39,900 --> 00:01:47,520
two so yeah let's get to it quick

00:01:45,119 --> 00:01:52,920
overview so we're gonna go through

00:01:47,520 --> 00:01:55,229
understanding CLI commands just a quick

00:01:52,920 --> 00:01:58,110
basic of how to define a reusable

00:01:55,229 --> 00:02:01,439
command how to compose commands using

00:01:58,110 --> 00:02:04,320
unix pipelines and then add

00:02:01,439 --> 00:02:07,489
interactivity like let's spring sprinkle

00:02:04,320 --> 00:02:11,300
a little magic on top of it and then go

00:02:07,489 --> 00:02:13,230
like of course that zooms nodejs with it

00:02:11,300 --> 00:02:16,200
so yes this

00:02:13,230 --> 00:02:18,510
disclaimer you're about to see a graphic

00:02:16,200 --> 00:02:21,810
designer by formation giving a talk

00:02:18,510 --> 00:02:25,080
about the command-line interface which

00:02:21,810 --> 00:02:28,409
yeah and I think it makes a lot of sense

00:02:25,080 --> 00:02:32,940
it is a great user interface and there

00:02:28,409 --> 00:02:35,670
is something that maybe sometimes people

00:02:32,940 --> 00:02:37,799
don't realize because our very

00:02:35,670 --> 00:02:41,310
communication like it's word base right

00:02:37,799 --> 00:02:45,560
we with think and word terms word they

00:02:41,310 --> 00:02:48,299
link into things in our minds right so

00:02:45,560 --> 00:02:50,760
and developers are always looking to

00:02:48,299 --> 00:02:52,680
reuse things right and words are really

00:02:50,760 --> 00:02:54,540
key words in our minds and we're gonna

00:02:52,680 --> 00:02:57,810
map them into things we want to do right

00:02:54,540 --> 00:02:59,609
so that's what makes the the CLI the

00:02:57,810 --> 00:03:02,430
command-line interface so powerful

00:02:59,609 --> 00:03:04,769
because basically the commands there

00:03:02,430 --> 00:03:07,739
they're reusable stuff right we love to

00:03:04,769 --> 00:03:10,290
redo stuff and basically we're storing

00:03:07,739 --> 00:03:12,120
commands we're doing our workflow and

00:03:10,290 --> 00:03:14,129
these commands is just something that

00:03:12,120 --> 00:03:16,950
okay oh yeah now I need to do this thing

00:03:14,129 --> 00:03:19,200
oh yeah so maybe it's maybe the command

00:03:16,950 --> 00:03:21,569
is run maybe the command is like run my

00:03:19,200 --> 00:03:23,130
project it's gonna map to something in

00:03:21,569 --> 00:03:26,480
your mind is gonna make sense to you and

00:03:23,130 --> 00:03:29,430
it's going to be reusable so alright

00:03:26,480 --> 00:03:32,609
we're gonna go through bunch of quick

00:03:29,430 --> 00:03:35,280
examples so very adventurous here gonna

00:03:32,609 --> 00:03:40,079
do a lot of live coding stuff but it's

00:03:35,280 --> 00:03:42,480
gonna be fun yeah it's fun stuff so not

00:03:40,079 --> 00:03:44,940
gonna jump into node yet so quick thing

00:03:42,480 --> 00:03:46,200
like basically here gonna use the cat

00:03:44,940 --> 00:03:48,690
command

00:03:46,200 --> 00:03:51,840
basically that prints out contents of a

00:03:48,690 --> 00:03:53,880
file right so here I'm just going to

00:03:51,840 --> 00:03:56,579
define like okay I want to create a new

00:03:53,880 --> 00:03:58,069
command it's gonna be food like for now

00:03:56,579 --> 00:04:00,359
it's only like it's only gonna be

00:03:58,069 --> 00:04:04,349
cutting things like good just like

00:04:00,359 --> 00:04:06,569
printing it out so that's like step like

00:04:04,349 --> 00:04:08,849
one the very most basic thing like

00:04:06,569 --> 00:04:11,310
defining analyze is one of the ways to

00:04:08,849 --> 00:04:13,019
create your own command in this case

00:04:11,310 --> 00:04:15,120
doesn't do much because well that's

00:04:13,019 --> 00:04:17,370
already a building thing so but

00:04:15,120 --> 00:04:19,680
sometimes you want to maybe use a

00:04:17,370 --> 00:04:21,630
variation of a command write command

00:04:19,680 --> 00:04:25,080
that takes a flag like okay like get

00:04:21,630 --> 00:04:26,790
status so like get status usually it's

00:04:25,080 --> 00:04:30,450
gonna print all this and for

00:04:26,790 --> 00:04:33,620
right and let's say you like the ass

00:04:30,450 --> 00:04:37,560
flag which turns into this more pretty

00:04:33,620 --> 00:04:40,350
printed things way of displaying your

00:04:37,560 --> 00:04:42,990
this status after get repo right now so

00:04:40,350 --> 00:04:44,490
yeah okay let's make okay status okay

00:04:42,990 --> 00:04:46,200
that's gonna be my new command okay

00:04:44,490 --> 00:04:48,660
I like that thing like I wanna be

00:04:46,200 --> 00:04:51,030
reusing that so from now on every time

00:04:48,660 --> 00:04:51,540
okay now I wanna do status but the way I

00:04:51,030 --> 00:04:54,840
like it

00:04:51,540 --> 00:04:57,270
so you basically like get status like

00:04:54,840 --> 00:05:02,370
you have you have that Elias is a new

00:04:57,270 --> 00:05:04,020
command you can use and reuse and you

00:05:02,370 --> 00:05:06,510
can also like making more versatile like

00:05:04,020 --> 00:05:08,820
the there is also the function batch

00:05:06,510 --> 00:05:11,910
function way of defining it so basically

00:05:08,820 --> 00:05:16,350
in this one over here I'm just going to

00:05:11,910 --> 00:05:18,990
hey it status and then just basically

00:05:16,350 --> 00:05:23,370
gonna be setting a parameter so now I

00:05:18,990 --> 00:05:30,090
can send down the ass flag or some other

00:05:23,370 --> 00:05:31,740
ones like not yeah so it's going to do

00:05:30,090 --> 00:05:34,290
the very same thing the other one did

00:05:31,740 --> 00:05:38,040
right but basically just to show

00:05:34,290 --> 00:05:40,920
showcase the batch functions to is also

00:05:38,040 --> 00:05:43,620
something we can do so yeah using note

00:05:40,920 --> 00:05:46,350
like something I did to like I just went

00:05:43,620 --> 00:05:50,100
on NPM real quick like let's find a

00:05:46,350 --> 00:05:51,150
useful library we could use this

00:05:50,100 --> 00:05:54,540
something fun right

00:05:51,150 --> 00:05:57,810
so based in this case I'm just using

00:05:54,540 --> 00:06:00,960
some load library and just invoking the

00:05:57,810 --> 00:06:03,330
node runner itself and I'm requiring

00:06:00,960 --> 00:06:06,030
right away right from bash that command

00:06:03,330 --> 00:06:07,710
and what it does is that okay if there

00:06:06,030 --> 00:06:10,110
is an offensive word there it returns

00:06:07,710 --> 00:06:12,240
true then it's gonna print block

00:06:10,110 --> 00:06:15,810
otherwise it's just gonna print whatever

00:06:12,240 --> 00:06:18,180
was it right so let's try it out that

00:06:15,810 --> 00:06:20,010
starts to be more fun right so I'm

00:06:18,180 --> 00:06:22,710
already for the sake of like making sure

00:06:20,010 --> 00:06:27,570
doesn't derail too much it's already npm

00:06:22,710 --> 00:06:30,060
install so let's just create this new

00:06:27,570 --> 00:06:32,480
command here so okay no they're gonna

00:06:30,060 --> 00:06:37,380
print that and it's gonna require

00:06:32,480 --> 00:06:39,570
offensive words filter thank you so much

00:06:37,380 --> 00:06:44,400
whoever did this

00:06:39,570 --> 00:06:47,190
and it's going to take the word as an

00:06:44,400 --> 00:06:50,490
argument I'm gonna use that and then if

00:06:47,190 --> 00:06:53,610
it's blocked which are it's true I'm

00:06:50,490 --> 00:06:58,080
gonna show anything and otherwise let's

00:06:53,610 --> 00:07:00,120
print whatever was that their end and I

00:06:58,080 --> 00:07:03,450
close this thing they're gonna close my

00:07:00,120 --> 00:07:07,860
function so let's print safe

00:07:03,450 --> 00:07:09,450
oh hi yay there's nothing offensive in

00:07:07,860 --> 00:07:15,800
this word it works well

00:07:09,450 --> 00:07:19,140
so let's print save oh oh yeah amazing

00:07:15,800 --> 00:07:21,780
so yeah basically just quick them on on

00:07:19,140 --> 00:07:27,570
how to use a node module like even

00:07:21,780 --> 00:07:28,860
within bash itself yes so movie now yeah

00:07:27,570 --> 00:07:30,480
that's the I think this is an

00:07:28,860 --> 00:07:33,450
interesting thing like took me a while

00:07:30,480 --> 00:07:36,120
to realize as a designer like I think

00:07:33,450 --> 00:07:38,790
we're learning these things myself on my

00:07:36,120 --> 00:07:41,070
own for a long time so basically yeah

00:07:38,790 --> 00:07:43,470
and you can also just define any file

00:07:41,070 --> 00:07:45,930
any file does it is your path

00:07:43,470 --> 00:07:47,550
environment variable it's going to be

00:07:45,930 --> 00:07:50,669
available as a command as long as that

00:07:47,550 --> 00:07:53,430
file is a cuticle so you can even like

00:07:50,669 --> 00:07:56,250
from the lookout installed modules like

00:07:53,430 --> 00:07:57,960
usually they're not available as comment

00:07:56,250 --> 00:08:01,100
lines right even if though even though

00:07:57,960 --> 00:08:05,040
if they provide command line interfaces

00:08:01,100 --> 00:08:08,310
let's say jewelz thing over there CLI

00:08:05,040 --> 00:08:11,370
slides it is a command line thing but

00:08:08,310 --> 00:08:15,510
right now is not available so if I go on

00:08:11,370 --> 00:08:17,400
and just like export my path and I'm

00:08:15,510 --> 00:08:19,320
gonna contact black this is here I'm not

00:08:17,400 --> 00:08:21,270
concatenating it with whatever was

00:08:19,320 --> 00:08:24,180
already there getting my current

00:08:21,270 --> 00:08:26,100
directory here and I like okay let's get

00:08:24,180 --> 00:08:28,890
everything that is in node modules bin

00:08:26,100 --> 00:08:32,669
and that's that'll be part of the path

00:08:28,890 --> 00:08:35,339
so now the commands lights thing that I

00:08:32,669 --> 00:08:37,080
have it's available it's not gonna work

00:08:35,339 --> 00:08:39,780
because it takes some other arguments

00:08:37,080 --> 00:08:43,469
it's not the point the point is that now

00:08:39,780 --> 00:08:45,390
the your internal node module been like

00:08:43,469 --> 00:08:47,490
whatever local modules we have installed

00:08:45,390 --> 00:08:50,270
they're available as a command for this

00:08:47,490 --> 00:08:50,270
prompt now like

00:08:51,350 --> 00:08:54,980
and it's very very useful to like you

00:08:53,120 --> 00:08:56,780
can't define your own path you can have

00:08:54,980 --> 00:08:58,820
your own being in your user local folder

00:08:56,780 --> 00:09:01,370
and be dropping your your real go

00:08:58,820 --> 00:09:02,750
commands there it's something I do a lot

00:09:01,370 --> 00:09:07,190
yeah

00:09:02,750 --> 00:09:08,870
yes also any yeah package.json script

00:09:07,190 --> 00:09:12,950
yeah this is super handy way of like

00:09:08,870 --> 00:09:15,110
just for project based I know here's the

00:09:12,950 --> 00:09:17,870
crowd is most no yeah so probably you

00:09:15,110 --> 00:09:20,000
all know this one already but it's the

00:09:17,870 --> 00:09:21,620
mandatory one I had to mention right so

00:09:20,000 --> 00:09:24,230
in your package JSON you can define

00:09:21,620 --> 00:09:29,030
scripts and those crypts they can be run

00:09:24,230 --> 00:09:31,700
anytime later so npm run you can npm run

00:09:29,030 --> 00:09:34,520
hello as long as hello is available as a

00:09:31,700 --> 00:09:36,950
script for that package jason it is

00:09:34,520 --> 00:09:39,320
going to is going to run you can reuse a

00:09:36,950 --> 00:09:42,650
handy thing is that this way you can

00:09:39,320 --> 00:09:43,490
even reuse CLI tools that are local to

00:09:42,650 --> 00:09:45,800
that project

00:09:43,490 --> 00:09:49,930
without having to do the pad thing like

00:09:45,800 --> 00:09:49,930
npm does it for yourself basically

00:09:50,320 --> 00:09:57,470
so package jason also supports the bin

00:09:54,650 --> 00:10:00,860
property so basically this allows use

00:09:57,470 --> 00:10:02,930
this is what we know the publisher the

00:10:00,860 --> 00:10:04,610
meta maintainer zuv module that's what

00:10:02,930 --> 00:10:07,340
we use when we want to distribute the

00:10:04,610 --> 00:10:09,590
comment line tools on NPM right then

00:10:07,340 --> 00:10:13,430
people can just npm install it and like

00:10:09,590 --> 00:10:15,800
conveniently reuse it so I tend to try

00:10:13,430 --> 00:10:18,170
to share how the things that I do when I

00:10:15,800 --> 00:10:20,870
find it like little bit useful I'm going

00:10:18,170 --> 00:10:23,360
to make it a quick note no module you

00:10:20,870 --> 00:10:24,890
know push to NPM then myself I'll be

00:10:23,360 --> 00:10:27,050
reinstalling that later whenever I

00:10:24,890 --> 00:10:28,610
switch computers whenever something

00:10:27,050 --> 00:10:30,140
happened and other people can reuse

00:10:28,610 --> 00:10:33,110
right you can share to your co-workers

00:10:30,140 --> 00:10:34,550
oh I have a have a script for that just

00:10:33,110 --> 00:10:40,340
MPM install this name it's going to do

00:10:34,550 --> 00:10:41,960
it so and here we get to the composing

00:10:40,340 --> 00:10:45,800
commands yeah which is the powerful

00:10:41,960 --> 00:10:48,320
thing about the UNIX like the idea UNIX

00:10:45,800 --> 00:10:51,700
has this idea where every command is its

00:10:48,320 --> 00:10:54,230
own thing and it tries to be like really

00:10:51,700 --> 00:10:57,290
specific some of them are really not

00:10:54,230 --> 00:10:59,240
like some of them get really busy we

00:10:57,290 --> 00:11:02,300
follow all the kinds of arguments and

00:10:59,240 --> 00:11:04,470
and powerful things it does but the idea

00:11:02,300 --> 00:11:05,940
is that you can are you gonna run

00:11:04,470 --> 00:11:07,860
alas it's going to list the files that

00:11:05,940 --> 00:11:10,710
are in that folder right you're gonna

00:11:07,860 --> 00:11:14,490
run cat it's it's going to like print

00:11:10,710 --> 00:11:16,800
the contents of that file you so you can

00:11:14,490 --> 00:11:19,380
do all can actually like combine those

00:11:16,800 --> 00:11:21,300
together and start creating like okay

00:11:19,380 --> 00:11:23,820
now I'm creating my own stuff I'm

00:11:21,300 --> 00:11:26,040
reusing the basic basic commands that

00:11:23,820 --> 00:11:27,630
are available you might be reusing some

00:11:26,040 --> 00:11:31,080
other commands that you installed from

00:11:27,630 --> 00:11:32,670
from some other open source projects and

00:11:31,080 --> 00:11:34,110
you can be combined and together and

00:11:32,670 --> 00:11:37,430
create your own workflow and you can

00:11:34,110 --> 00:11:40,590
share to people it's so basically yeah a

00:11:37,430 --> 00:11:42,510
couple more examples and this is where

00:11:40,590 --> 00:11:47,310
things start to get more risky because

00:11:42,510 --> 00:11:49,980
this might fail and you let me see yeah

00:11:47,310 --> 00:11:54,300
I think last time I had to do this so

00:11:49,980 --> 00:11:57,690
let's just say fine fine is a command

00:11:54,300 --> 00:11:59,430
that allows you to list all the file

00:11:57,690 --> 00:12:01,670
it's going to be like recursively

00:11:59,430 --> 00:12:03,990
traversing all the folders and like

00:12:01,670 --> 00:12:06,120
printing all the files and you can

00:12:03,990 --> 00:12:08,160
specify arguments to start filter it out

00:12:06,120 --> 00:12:11,190
like in this case I'm filtering okay

00:12:08,160 --> 00:12:14,250
just file that has the name that ends in

00:12:11,190 --> 00:12:16,320
a s so it's going to print all the files

00:12:14,250 --> 00:12:19,140
and no surprise there's a lot of J's

00:12:16,320 --> 00:12:24,390
files in my node modules so let's say

00:12:19,140 --> 00:12:26,910
okay I want to get word five I think I

00:12:24,390 --> 00:12:30,000
make sense of a command that I can reuse

00:12:26,910 --> 00:12:33,030
later where I could like oh let's get

00:12:30,000 --> 00:12:35,340
all these files and then I wanna grab

00:12:33,030 --> 00:12:38,100
rap is one very handy command that

00:12:35,340 --> 00:12:42,540
allows you to filter items so in this

00:12:38,100 --> 00:12:45,510
case yeah I wanna I want to be able to

00:12:42,540 --> 00:12:49,260
just like future out one one of these so

00:12:45,510 --> 00:12:51,750
get word file it's going to traverse all

00:12:49,260 --> 00:12:53,880
these files and I want to just like oh

00:12:51,750 --> 00:12:56,190
just give me the ones that has CLI on it

00:12:53,880 --> 00:12:59,100
so you see the other one is gone and if

00:12:56,190 --> 00:13:01,170
I just okay no actually just word so all

00:12:59,100 --> 00:13:04,140
the CLI stuff is gone it's just printed

00:13:01,170 --> 00:13:06,870
the one that has words word on it which

00:13:04,140 --> 00:13:11,310
which is offensive word filter there so

00:13:06,870 --> 00:13:14,100
this is like very basic first example of

00:13:11,310 --> 00:13:17,010
using the UNIX pipeline right so the

00:13:14,100 --> 00:13:18,240
idea here is basically like the

00:13:17,010 --> 00:13:20,130
pipeline's you

00:13:18,240 --> 00:13:23,700
combining the output coming from a

00:13:20,130 --> 00:13:26,940
command into the second command right so

00:13:23,700 --> 00:13:29,399
this is because it kinds of connecting

00:13:26,940 --> 00:13:31,440
pipelines and then the stream of

00:13:29,399 --> 00:13:33,839
information flows through them and this

00:13:31,440 --> 00:13:37,080
is like this is the origins of the

00:13:33,839 --> 00:13:40,339
stream library in a module we know Jas

00:13:37,080 --> 00:13:45,120
which I always had a hard time with and

00:13:40,339 --> 00:13:48,570
I wish I didn't miss the other talk from

00:13:45,120 --> 00:13:50,130
météo about it but anyways so all this

00:13:48,570 --> 00:13:51,570
complex comes all these concepts can

00:13:50,130 --> 00:13:52,920
actually come from the units pipelines

00:13:51,570 --> 00:13:57,360
where you can connect the commands

00:13:52,920 --> 00:14:00,450
together right so exerts is a handy

00:13:57,360 --> 00:14:01,950
utility that helps out because when

00:14:00,450 --> 00:14:04,500
you're connecting those pipelines you're

00:14:01,950 --> 00:14:07,050
connecting the standard output into the

00:14:04,500 --> 00:14:09,720
input of the next one so when you have a

00:14:07,050 --> 00:14:12,810
command like cat that wants to receive

00:14:09,720 --> 00:14:14,010
an argument X X Argos is going to help

00:14:12,810 --> 00:14:16,290
you out okay okay

00:14:14,010 --> 00:14:19,860
not not connecting the standard input

00:14:16,290 --> 00:14:24,570
I'm gonna read that thing as an argument

00:14:19,860 --> 00:14:28,589
so in this case let's make another handy

00:14:24,570 --> 00:14:30,959
command print file so again the same

00:14:28,589 --> 00:14:36,149
recepy had last time with the name and

00:14:30,959 --> 00:14:38,190
future in Jas then let's just select one

00:14:36,149 --> 00:14:40,079
so basically continue from the idea of

00:14:38,190 --> 00:14:42,089
the last command but this time let's

00:14:40,079 --> 00:14:45,810
print the contents of the file which we

00:14:42,089 --> 00:14:47,940
just select right so print file and okay

00:14:45,810 --> 00:14:56,130
I want that word file again but this

00:14:47,940 --> 00:15:00,120
time printed yeah

00:14:56,130 --> 00:15:03,029
not going to debug that one but let's

00:15:00,120 --> 00:15:05,459
just let's just do it this way I'm gonna

00:15:03,029 --> 00:15:07,470
do it manually because I probably just

00:15:05,459 --> 00:15:09,029
got something wrong here and I'm just

00:15:07,470 --> 00:15:10,950
gonna manually like instead of using the

00:15:09,029 --> 00:15:13,110
argument I'm just gonna hurt type the

00:15:10,950 --> 00:15:16,680
word here where the argument usually

00:15:13,110 --> 00:15:20,220
goes and let's cut that and there you go

00:15:16,680 --> 00:15:22,529
like my my word file like I can see that

00:15:20,220 --> 00:15:24,000
that that module is actually very simple

00:15:22,529 --> 00:15:26,370
very simple it's just like reading from

00:15:24,000 --> 00:15:27,870
a term to block Jason and I can it does

00:15:26,370 --> 00:15:29,579
the logic oh yeah should I

00:15:27,870 --> 00:15:31,670
does it match anything in there return

00:15:29,579 --> 00:15:52,200
true otherwise false

00:15:31,670 --> 00:15:55,800
what happened no oh is it rebooting it

00:15:52,200 --> 00:15:59,720
was going Wow okay

00:15:55,800 --> 00:16:04,980
oh good okay let me let me move up yes

00:15:59,720 --> 00:16:07,860
so continue yes you can also write down

00:16:04,980 --> 00:16:10,680
files from the the pipelines they have

00:16:07,860 --> 00:16:12,360
more operators and this is the only one

00:16:10,680 --> 00:16:16,200
I'm going to be showcasing like

00:16:12,360 --> 00:16:20,100
basically the greater than sign or

00:16:16,200 --> 00:16:23,400
smaller in anyways it's going to get

00:16:20,100 --> 00:16:26,850
that stream and dump it into a file so

00:16:23,400 --> 00:16:29,540
like very handy too in this case oh yeah

00:16:26,850 --> 00:16:36,180
this is this is a fun one yeah so let me

00:16:29,540 --> 00:16:40,260
get back my demo yes yeah so basically

00:16:36,180 --> 00:16:44,250
this one let's build a command that's

00:16:40,260 --> 00:16:46,920
going to okay printout from the fire I'm

00:16:44,250 --> 00:16:52,830
gonna send then and then it's going to

00:16:46,920 --> 00:16:54,990
replace anything like sad sed oh I call

00:16:52,830 --> 00:16:57,570
it said not sure probably not the right

00:16:54,990 --> 00:16:59,190
way to call it it is going to replace

00:16:57,570 --> 00:17:01,920
things like in place so it's basically

00:16:59,190 --> 00:17:05,730
just a string replacement right so I'm

00:17:01,920 --> 00:17:07,949
going to swap log for error in any any

00:17:05,730 --> 00:17:12,030
of the stream of data that's flowing

00:17:07,949 --> 00:17:13,350
through earlier right and number two is

00:17:12,030 --> 00:17:13,800
going to be the second argument of my

00:17:13,350 --> 00:17:16,920
command

00:17:13,800 --> 00:17:23,339
so I gonna save write it to a second

00:17:16,920 --> 00:17:23,850
file so let just quick show what's going

00:17:23,339 --> 00:17:26,130
on here

00:17:23,850 --> 00:17:28,890
Damodar Jas is basically doing the same

00:17:26,130 --> 00:17:30,770
thing that other command was doing using

00:17:28,890 --> 00:17:33,059
the library but this is this time is a

00:17:30,770 --> 00:17:35,370
JavaScript file itself so it's just

00:17:33,059 --> 00:17:37,440
console.log so what I want with this is

00:17:35,370 --> 00:17:40,350
just okay let's replace log with error

00:17:37,440 --> 00:17:43,650
for any file that that I sent into this

00:17:40,350 --> 00:17:44,680
thing so make error and I sent in demo

00:17:43,650 --> 00:17:47,470
Jas and

00:17:44,680 --> 00:17:50,800
and I want to save an error yes from

00:17:47,470 --> 00:17:53,230
that so I run it and now I can say I can

00:17:50,800 --> 00:17:56,190
see error Jas has the same thing but

00:17:53,230 --> 00:17:59,230
replays love with error so basically

00:17:56,190 --> 00:18:02,590
showcasing the the writing to a file

00:17:59,230 --> 00:18:05,950
operator using the greater than operator

00:18:02,590 --> 00:18:10,090
and multiple arguments with number two

00:18:05,950 --> 00:18:12,040
there so yes I hope we have seen the

00:18:10,090 --> 00:18:13,780
light like okay okay okay this is good

00:18:12,040 --> 00:18:17,530
this is good I can I can actually reuse

00:18:13,780 --> 00:18:22,180
this like it's not it's not rocket

00:18:17,530 --> 00:18:24,220
science right hopefully you're all good

00:18:22,180 --> 00:18:26,710
to go like composing news your work

00:18:24,220 --> 00:18:27,940
flows from the basic units comments that

00:18:26,710 --> 00:18:29,170
you already know and then you're

00:18:27,940 --> 00:18:31,180
probably gonna be interesting you learn

00:18:29,170 --> 00:18:32,590
about those some other more like because

00:18:31,180 --> 00:18:34,480
the more you know the more commands you

00:18:32,590 --> 00:18:35,680
start learning about the more ideas

00:18:34,480 --> 00:18:37,360
you're gonna have oh yeah this can

00:18:35,680 --> 00:18:40,150
actually be automated like that because

00:18:37,360 --> 00:18:43,270
is that the other tutor I just learned

00:18:40,150 --> 00:18:46,140
about yeah so and I like to introduce

00:18:43,270 --> 00:18:48,520
like a very very cool handy feature

00:18:46,140 --> 00:18:51,100
basically a unique Alaska UNIX command

00:18:48,520 --> 00:18:53,260
that just allows you to turn any of this

00:18:51,100 --> 00:18:56,560
stream input like into interactive

00:18:53,260 --> 00:18:58,480
interfaces so you can like just build

00:18:56,560 --> 00:19:01,270
things that you are going to turn into

00:18:58,480 --> 00:19:02,710
interactive lists and you can select one

00:19:01,270 --> 00:19:08,220
and you can do whatever you want with

00:19:02,710 --> 00:19:13,660
the output of that stream so yeah

00:19:08,220 --> 00:19:16,000
basically I I call it I pipe to the

00:19:13,660 --> 00:19:20,440
interactive pipe to thing but the

00:19:16,000 --> 00:19:23,140
command is IPT so given any list and in

00:19:20,440 --> 00:19:26,350
the shell you can like okay listen the

00:19:23,140 --> 00:19:30,130
files there so I can pipe that list of

00:19:26,350 --> 00:19:33,100
files into I pipe to and it's going to

00:19:30,130 --> 00:19:35,950
build a interactive interface oh nice

00:19:33,100 --> 00:19:38,160
and then I can just like select one and

00:19:35,950 --> 00:19:40,690
what it does is just just prints

00:19:38,160 --> 00:19:42,640
whatever you slept so it's going to

00:19:40,690 --> 00:19:44,530
allow you to connect that to some other

00:19:42,640 --> 00:19:47,890
stuff then you can start creating really

00:19:44,530 --> 00:19:51,460
handy workflows right with that so with

00:19:47,890 --> 00:19:56,710
this case yeah I've just just selecting

00:19:51,460 --> 00:19:58,240
oh yeah I have this other handy command

00:19:56,710 --> 00:20:04,480
here that okay

00:19:58,240 --> 00:20:11,890
let me just like interactively oh nice

00:20:04,480 --> 00:20:16,120
cool cosy move anyway so yeah you're

00:20:11,890 --> 00:20:17,770
used to like see do you like in order to

00:20:16,120 --> 00:20:19,840
navigate but it will be handy if you

00:20:17,770 --> 00:20:22,210
could just like oh yeah now I can see

00:20:19,840 --> 00:20:24,940
the list of files I can just like select

00:20:22,210 --> 00:20:26,190
a folder in it and like that's kind of

00:20:24,940 --> 00:20:29,080
cool

00:20:26,190 --> 00:20:33,790
very basically just just like showcase

00:20:29,080 --> 00:20:36,520
some examples another yeah not a very

00:20:33,790 --> 00:20:39,309
basic one you can have like a list of

00:20:36,520 --> 00:20:41,200
branch for a get get get also like

00:20:39,309 --> 00:20:43,350
because it has so many less ready has

00:20:41,200 --> 00:20:47,320
little branches list of comets this of

00:20:43,350 --> 00:20:49,990
remote repos you might pointing to so

00:20:47,320 --> 00:20:51,670
you can do all sorts of like crazy ideas

00:20:49,990 --> 00:20:53,890
okay I admit let me connect together the

00:20:51,670 --> 00:20:56,470
list of brands then I pipe that into the

00:20:53,890 --> 00:20:58,420
interactive thing and then I can like

00:20:56,470 --> 00:21:02,740
whoa why not they can check out into a

00:20:58,420 --> 00:21:04,510
different right right so yeah like hey

00:21:02,740 --> 00:21:06,370
let me check out but like in this case

00:21:04,510 --> 00:21:12,610
it failed because I had some modified

00:21:06,370 --> 00:21:14,590
files but you can get a idea and yeah

00:21:12,610 --> 00:21:17,380
and it has some handy options too like

00:21:14,590 --> 00:21:20,080
in this case I have this command for

00:21:17,380 --> 00:21:22,059
printing files and it's going to be a

00:21:20,080 --> 00:21:25,240
listening other files in the folder and

00:21:22,059 --> 00:21:27,370
I'm gonna use this multiple argument a

00:21:25,240 --> 00:21:29,470
dash M that is going to allow me to

00:21:27,370 --> 00:21:31,510
select multiple items on that list so

00:21:29,470 --> 00:21:33,040
instead of being just like selecting one

00:21:31,510 --> 00:21:36,400
is going to be like more like filtering

00:21:33,040 --> 00:21:38,080
out the unselected files so oh yeah let

00:21:36,400 --> 00:21:42,220
let's print out of the things that I

00:21:38,080 --> 00:21:44,770
selected in there so print files is

00:21:42,220 --> 00:21:47,800
going to show me your handle s there is

00:21:44,770 --> 00:21:49,929
now a checkbox or Duff and I can go and

00:21:47,800 --> 00:21:53,200
like oh yeah let's select the demo and

00:21:49,929 --> 00:21:55,960
the error and its gonna pipe that input

00:21:53,200 --> 00:21:57,640
into cap that is going to print both of

00:21:55,960 --> 00:22:03,160
them and we seen that earlier and you

00:21:57,640 --> 00:22:06,550
can see it is the same thing so handling

00:22:03,160 --> 00:22:08,320
file names basically it also has like

00:22:06,550 --> 00:22:11,180
this very handy thing when you're

00:22:08,320 --> 00:22:14,390
dealing with get that

00:22:11,180 --> 00:22:19,750
when you're doing like get status in

00:22:14,390 --> 00:22:21,830
this case that same fancy view with the

00:22:19,750 --> 00:22:24,040
notification in there like showing the

00:22:21,830 --> 00:22:29,270
showcases the status for each file right

00:22:24,040 --> 00:22:32,030
I'm gonna use this handy - P option that

00:22:29,270 --> 00:22:34,700
is going to just try to parse a file the

00:22:32,030 --> 00:22:36,770
file path out of the item itself so that

00:22:34,700 --> 00:22:38,840
I get rid of like the DS & M's and

00:22:36,770 --> 00:22:40,730
question marks so that I can actually

00:22:38,840 --> 00:22:42,980
reuse that path right away and I can

00:22:40,730 --> 00:22:45,050
like I can just print the info for that

00:22:42,980 --> 00:22:47,690
one so as you can see the list still has

00:22:45,050 --> 00:22:50,150
the metadata in the beginning but as

00:22:47,690 --> 00:22:53,300
soon as I sell that one the next command

00:22:50,150 --> 00:22:56,570
works because the - peak man like get

00:22:53,300 --> 00:23:00,250
rid of all the things that are not part

00:22:56,570 --> 00:23:04,520
of the file path they're a file name

00:23:00,250 --> 00:23:07,970
yeah and yeah last thing to showcase is

00:23:04,520 --> 00:23:10,730
the fuzzy finder out a complete mode so

00:23:07,970 --> 00:23:14,960
basically I can like you know I've also

00:23:10,730 --> 00:23:17,390
going to take the opportunity here to

00:23:14,960 --> 00:23:20,390
show that you can also send in as a file

00:23:17,390 --> 00:23:22,910
name so like I can like send him just

00:23:20,390 --> 00:23:24,860
IPT or like the package jason so it's

00:23:22,910 --> 00:23:26,600
going to explode like the file into mode

00:23:24,860 --> 00:23:30,440
like for each line is going to become an

00:23:26,600 --> 00:23:33,440
item and then the argument is actually a

00:23:30,440 --> 00:23:35,780
this is wrong in the slider sorry about

00:23:33,440 --> 00:23:38,150
it but then it's just like it's just

00:23:35,780 --> 00:23:40,100
going to filter out basic based on what

00:23:38,150 --> 00:23:41,870
you're typing like a 1 autocomplete kind

00:23:40,100 --> 00:23:43,460
of thing looking like Oh description so

00:23:41,870 --> 00:23:47,030
oh yeah so I think that line so we're

00:23:43,460 --> 00:23:52,070
gonna output it so yeah Oh crazy ways to

00:23:47,030 --> 00:23:55,400
like - cool commands like interactive

00:23:52,070 --> 00:23:58,340
commands with it just throwing out like

00:23:55,400 --> 00:24:02,210
a real quick thing I put together for

00:23:58,340 --> 00:24:05,600
the demo how many of you know about the

00:24:02,210 --> 00:24:08,600
Picacho CLI like it was recently

00:24:05,600 --> 00:24:10,940
released as a long CLI so basically it's

00:24:08,600 --> 00:24:13,910
one of the NPM internals so allows you

00:24:10,940 --> 00:24:17,180
to like get fetch metadata fetch maybe

00:24:13,910 --> 00:24:19,280
just like the tarball but not NPM

00:24:17,180 --> 00:24:22,970
installing everything that goes with it

00:24:19,280 --> 00:24:24,780
so basically I did like this NPM install

00:24:22,970 --> 00:24:27,470
version

00:24:24,780 --> 00:24:30,659
come in here that is going to use a

00:24:27,470 --> 00:24:32,549
metadata from the from the npm to

00:24:30,659 --> 00:24:35,250
basically build a list of all the

00:24:32,549 --> 00:24:37,650
versions list them and when you select

00:24:35,250 --> 00:24:42,330
one is going to npm install that exact

00:24:37,650 --> 00:24:46,799
version so real quick NIV and then I'm

00:24:42,330 --> 00:24:49,169
gonna npm install in this case over here

00:24:46,799 --> 00:24:51,630
i've kind of hard coding the name of the

00:24:49,169 --> 00:24:55,470
package but the idea is kind of argument

00:24:51,630 --> 00:24:58,020
and then gonna be sending into node

00:24:55,470 --> 00:25:01,919
because i want to be able to parse that

00:24:58,020 --> 00:25:08,100
metadata to retrieve just the result of

00:25:01,919 --> 00:25:11,190
that kochi call and that thing over

00:25:08,100 --> 00:25:16,530
there yes i'm gonna get only the

00:25:11,190 --> 00:25:23,220
versions and then i'm going to turn this

00:25:16,530 --> 00:25:49,710
into a string and then i'm going to type

00:25:23,220 --> 00:25:52,980
that into i bt this was too complicated

00:25:49,710 --> 00:25:54,809
I should have saved it for this but

00:25:52,980 --> 00:25:57,659
anyways let me show case like document

00:25:54,809 --> 00:25:59,159
the Picasa vacuum and what it's going to

00:25:57,659 --> 00:26:01,470
do then you're going to get the idea of

00:25:59,159 --> 00:26:04,350
it like so basically I'm fetching the

00:26:01,470 --> 00:26:07,740
metadata for I for a specific package in

00:26:04,350 --> 00:26:13,110
this case I Apep to itself then I can

00:26:07,740 --> 00:26:15,409
get like a list of versions didn't touch

00:26:13,110 --> 00:26:15,409
anything

00:26:18,519 --> 00:26:26,690
when I was about to demo the coup NPM

00:26:21,500 --> 00:26:35,059
stuff Oh what do I do

00:26:26,690 --> 00:26:37,850
oh it's coming yeah yeah okay you just

00:26:35,059 --> 00:26:39,940
need to walk in and it's yeah yeah thank

00:26:37,850 --> 00:26:39,940
you

00:26:42,700 --> 00:26:50,210
so yes so basically over here I'm going

00:26:46,880 --> 00:26:53,419
to filter just the diversions so what I

00:26:50,210 --> 00:26:56,419
was doing with it is that us I was going

00:26:53,419 --> 00:27:00,230
to use node here real quick to just like

00:26:56,419 --> 00:27:01,940
get the keys of the version names of the

00:27:00,230 --> 00:27:11,480
version there so that becomes more more

00:27:01,940 --> 00:27:14,360
useable yeah so I have a list of all the

00:27:11,480 --> 00:27:17,000
versions so this list what I was doing

00:27:14,360 --> 00:27:21,700
after that was like concatenating them

00:27:17,000 --> 00:27:24,500
like making them a string of like just

00:27:21,700 --> 00:27:26,870
like like we had the LS in other

00:27:24,500 --> 00:27:29,330
commands right and those I can like pipe

00:27:26,870 --> 00:27:31,970
into I pipe two and then we can select

00:27:29,330 --> 00:27:35,389
one and then with that selected one I

00:27:31,970 --> 00:27:38,960
can just like type that into NPM install

00:27:35,389 --> 00:27:41,450
and do like the name of the thing at

00:27:38,960 --> 00:27:43,789
that result that thing I don't think is

00:27:41,450 --> 00:27:55,789
gonna work I had to do that all that all

00:27:43,789 --> 00:27:58,779
that complex great crazy way and yes and

00:27:55,789 --> 00:28:02,539
then I could like npm install and then

00:27:58,779 --> 00:28:06,100
module name at specific version so I am

00:28:02,539 --> 00:28:06,100
p.m. install 1.0

00:28:10,350 --> 00:28:18,550
so yes interactive commands are fun and

00:28:14,500 --> 00:28:21,760
as the last one I wanted to showcase is

00:28:18,550 --> 00:28:23,650
the no test list is the is when I when I

00:28:21,760 --> 00:28:26,080
start digging into these like sometimes

00:28:23,650 --> 00:28:27,940
it gets out of hand so this one became

00:28:26,080 --> 00:28:29,170
like a kind of larger project like

00:28:27,940 --> 00:28:31,510
there's a lot of interest from the

00:28:29,170 --> 00:28:33,490
community people that just jump in and

00:28:31,510 --> 00:28:36,520
start contributing more so it became

00:28:33,490 --> 00:28:38,170
kind of like larger package because it

00:28:36,520 --> 00:28:40,390
has like many features around it it's

00:28:38,170 --> 00:28:42,550
just not the basic thing for my pipe to

00:28:40,390 --> 00:28:44,650
but it uses I pipe to to provide the

00:28:42,550 --> 00:28:47,320
same the same interface right so

00:28:44,650 --> 00:28:49,300
basically NGO is going to list all the

00:28:47,320 --> 00:28:51,880
scripts you have in that package Jason

00:28:49,300 --> 00:28:54,460
and once you select any of them you just

00:28:51,880 --> 00:28:56,320
hit enter it runs so that's the basic

00:28:54,460 --> 00:28:58,390
idea of it right at that point is just

00:28:56,320 --> 00:29:01,480
like the basic I pipe to kind of thing

00:28:58,390 --> 00:29:03,190
but then it it those are sort of things

00:29:01,480 --> 00:29:05,890
like in these comes from the community

00:29:03,190 --> 00:29:08,380
contributions like keep track of the

00:29:05,890 --> 00:29:10,480
last run command so then you run it

00:29:08,380 --> 00:29:12,520
again like it's already select right

00:29:10,480 --> 00:29:16,210
super handy if you like using it day to

00:29:12,520 --> 00:29:17,800
day basis like and also if you just like

00:29:16,210 --> 00:29:19,120
if you're just maybe it's a task you're

00:29:17,800 --> 00:29:21,790
running all the time then you can remove

00:29:19,120 --> 00:29:24,220
the L so it's not no task list it's just

00:29:21,790 --> 00:29:26,230
running no task like it just runs the

00:29:24,220 --> 00:29:27,940
latest one so you can just like be

00:29:26,230 --> 00:29:30,580
running them again and whatever you want

00:29:27,940 --> 00:29:32,920
to switch you can go back to the L you

00:29:30,580 --> 00:29:36,250
can select multiple items like okay

00:29:32,920 --> 00:29:37,660
let's run both of them like same thing

00:29:36,250 --> 00:29:38,980
with the multiple you still have them

00:29:37,660 --> 00:29:42,850
selected by default

00:29:38,980 --> 00:29:46,180
so yeah yeah it's also available on NPM

00:29:42,850 --> 00:29:51,100
you can npm install ntl at the end

00:29:46,180 --> 00:29:53,170
install i do yeah and i hope you all

00:29:51,100 --> 00:29:55,930
feel really confident about creating all

00:29:53,170 --> 00:29:57,430
these workflows I'm gonna make sure

00:29:55,930 --> 00:29:59,890
these lights are available so that you

00:29:57,430 --> 00:30:04,090
can use as a reference to start grading

00:29:59,890 --> 00:30:05,320
in our own right yeah so thank you very

00:30:04,090 --> 00:30:15,349
much

00:30:05,320 --> 00:30:15,349

YouTube URL: https://www.youtube.com/watch?v=fwKUsE_YbPg


