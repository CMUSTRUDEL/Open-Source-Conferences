Title: Workshop: How to Use Powerful Feature Flags and Controlled Rollouts - Asa Schachar & Justina Nguyen
Publication date: 2020-05-11
Playlist: Node + JS Interactive 2019
Description: 
	Workshop: How to Use Powerful Feature Flags and Controlled Rollouts - Asa Schachar & Justina Nguyen, Optimizely
Speakers: Justina Nguyen, Asa Schachar
We'll focus on the beginning of the product experimentation journey -- feature management and feature rollouts. When used strategically and thoughtfully, feature flags can be powerful tools in mitigating risk in your development cycle. Feature flags give us a high degree of control over the features we release â€” but what ensures we have a high degree of control over our feature flags?

In this hands-on technical workshop, attendees will learn how to strategically create feature flags in multiple development environments and roll them out to a subset of their customers. We'll talk briefly about the possibilities feature flags open up, and then describe how to use best practices of visibility and accountability to align those different flags into a cohesive feature flagging system.
Captions: 
	00:00:00,319 --> 00:00:05,910
I'm Justine anoon I'm a developer

00:00:03,179 --> 00:00:09,120
evangelist at Optimizely I'm joined by

00:00:05,910 --> 00:00:11,340
ASUS shocker our developer advocate um

00:00:09,120 --> 00:00:15,089
how many of you have heard of Optimizely

00:00:11,340 --> 00:00:17,400
before through show of hands cool

00:00:15,089 --> 00:00:20,189
we're a feature management and product

00:00:17,400 --> 00:00:21,930
experimentation platform and this is our

00:00:20,189 --> 00:00:25,410
developer relations team at Optimizely

00:00:21,930 --> 00:00:26,939
and what we focus on is the developer

00:00:25,410 --> 00:00:29,640
experience within the product and

00:00:26,939 --> 00:00:31,590
ultimately how engineers like yourselves

00:00:29,640 --> 00:00:34,309
use our products so going through things

00:00:31,590 --> 00:00:37,190
like our documentation tutorials

00:00:34,309 --> 00:00:39,899
presenting events just like this one and

00:00:37,190 --> 00:00:42,450
today we're going to be covering what

00:00:39,899 --> 00:00:44,399
future flags are how they fit into CI CD

00:00:42,450 --> 00:00:46,500
and then ultimately going into a

00:00:44,399 --> 00:00:48,600
hands-on workshop where you'll be

00:00:46,500 --> 00:00:51,570
creating a feature flag rolling out a

00:00:48,600 --> 00:00:53,039
feature to your audience and we'll dive

00:00:51,570 --> 00:00:56,520
into things like how you can target

00:00:53,039 --> 00:00:58,680
specific features to specific users um

00:00:56,520 --> 00:01:01,590
so how many of you are familiar with

00:00:58,680 --> 00:01:03,329
feature flags can raise your hands cool

00:01:01,590 --> 00:01:05,479
how many of you use feature flags at

00:01:03,329 --> 00:01:09,020
your current company

00:01:05,479 --> 00:01:11,540
okay I do okay okay it's all going down

00:01:09,020 --> 00:01:14,810
you can do that at scale in this

00:01:11,540 --> 00:01:17,390
workshop so feature flags enable you to

00:01:14,810 --> 00:01:19,670
turn things on and off if you think of

00:01:17,390 --> 00:01:22,430
it at a very simplistic level if this

00:01:19,670 --> 00:01:26,539
feature flag is on show this user X if

00:01:22,430 --> 00:01:28,729
this feature flag is off show user Y and

00:01:26,539 --> 00:01:31,670
it really just empowers you to really

00:01:28,729 --> 00:01:34,189
control when someone sees something and

00:01:31,670 --> 00:01:37,399
who and who it is that's seeing that

00:01:34,189 --> 00:01:39,500
feature and so another concept within

00:01:37,399 --> 00:01:41,210
feature Flags is this idea of controlled

00:01:39,500 --> 00:01:44,240
rollouts or some of you may know it as

00:01:41,210 --> 00:01:46,039
canary releases so maybe you're building

00:01:44,240 --> 00:01:48,409
this feature on your local development

00:01:46,039 --> 00:01:50,869
environment and you know maybe you want

00:01:48,409 --> 00:01:52,490
your PMS to test that feature now going

00:01:50,869 --> 00:01:55,280
through acceptance criteria so you move

00:01:52,490 --> 00:01:56,750
that to stage a then after you're

00:01:55,280 --> 00:01:59,390
feeling comfortable with its performance

00:01:56,750 --> 00:02:01,340
and how it's performing then you want to

00:01:59,390 --> 00:02:01,940
you know show the future to your beta

00:02:01,340 --> 00:02:04,310
users

00:02:01,940 --> 00:02:06,500
maybe it's your top customers who get

00:02:04,310 --> 00:02:08,479
early access to that feature so only a

00:02:06,500 --> 00:02:10,269
small subset of that you of your

00:02:08,479 --> 00:02:13,220
audience base is seeing that feature

00:02:10,269 --> 00:02:14,959
then finally you're feeling more and

00:02:13,220 --> 00:02:17,329
more confident over the weeks as you're

00:02:14,959 --> 00:02:21,260
releasing that feature out to say 30% of

00:02:17,329 --> 00:02:23,540
your audience 50% 75% then ultimately

00:02:21,260 --> 00:02:26,150
everyone sees that feature if that's

00:02:23,540 --> 00:02:28,010
what you want but we've gotten this

00:02:26,150 --> 00:02:30,440
question a few times of how do feature

00:02:28,010 --> 00:02:32,570
Flags fit into CI CD continuous

00:02:30,440 --> 00:02:36,100
integration or continuous delivery /

00:02:32,570 --> 00:02:38,810
deployment and so we kind of made this

00:02:36,100 --> 00:02:40,970
chart to show you where feature Flags

00:02:38,810 --> 00:02:43,430
fit into every part of the software

00:02:40,970 --> 00:02:45,650
development lifecycle and so starting

00:02:43,430 --> 00:02:48,410
with building and testing it really

00:02:45,650 --> 00:02:50,269
saves you time to PI things behind

00:02:48,410 --> 00:02:53,060
feature flags so that you can still

00:02:50,269 --> 00:02:54,850
continue working on them without getting

00:02:53,060 --> 00:02:57,560
into a messy you merge conflicts and

00:02:54,850 --> 00:02:59,630
then once you get into the deploy part

00:02:57,560 --> 00:03:01,489
you could actually de couple the

00:02:59,630 --> 00:03:03,709
deployment and release process by

00:03:01,489 --> 00:03:06,590
implementing a feature flag really

00:03:03,709 --> 00:03:08,959
saving you a lot of time and as most

00:03:06,590 --> 00:03:12,079
companies like maintaining track on the

00:03:08,959 --> 00:03:14,780
deployment schedule and then lastly but

00:03:12,079 --> 00:03:16,879
most importantly the release part you

00:03:14,780 --> 00:03:18,260
want to empower teams to manage their

00:03:16,879 --> 00:03:20,330
own releases and what

00:03:18,260 --> 00:03:22,340
means is we've heard engineers say we

00:03:20,330 --> 00:03:24,290
want to focus on shipping the code we

00:03:22,340 --> 00:03:26,569
don't want to worry about who sees that

00:03:24,290 --> 00:03:29,060
feature when they see it what feature is

00:03:26,569 --> 00:03:31,700
it we want to hand that off to maybe

00:03:29,060 --> 00:03:34,390
it's a PM maybe it's sales so that they

00:03:31,700 --> 00:03:37,069
can show the customer that new product

00:03:34,390 --> 00:03:38,989
so going and diving into each one of

00:03:37,069 --> 00:03:41,690
these kind of categories starting with

00:03:38,989 --> 00:03:44,480
build and test I'm a funny little joke

00:03:41,690 --> 00:03:46,280
there but with future flags you could

00:03:44,480 --> 00:03:48,379
actually make it so that there you know

00:03:46,280 --> 00:03:51,290
you're reducing them out of stale

00:03:48,379 --> 00:03:53,209
feature branches and so you're hiding

00:03:51,290 --> 00:03:55,870
things behind feature flags so you can

00:03:53,209 --> 00:03:58,310
develop in the safety of that and also

00:03:55,870 --> 00:04:01,190
most importantly you could actually

00:03:58,310 --> 00:04:04,040
continue to deploy kind of incomplete or

00:04:01,190 --> 00:04:07,010
parts of code without deploying

00:04:04,040 --> 00:04:09,319
everything the other thing I want to

00:04:07,010 --> 00:04:12,019
talk about is the delivery process here

00:04:09,319 --> 00:04:13,909
by decoupling deployment from release

00:04:12,019 --> 00:04:15,530
you can actually have more flexibility

00:04:13,909 --> 00:04:17,539
and control over your development

00:04:15,530 --> 00:04:20,150
process something that we just went

00:04:17,539 --> 00:04:22,280
through so Optimizely a lot of our

00:04:20,150 --> 00:04:25,099
retail customers saw a big surge in

00:04:22,280 --> 00:04:26,960
traffic during say Black Friday Cyber

00:04:25,099 --> 00:04:29,810
Monday which means a big surge in

00:04:26,960 --> 00:04:31,940
traffic for us so what we did was we

00:04:29,810 --> 00:04:34,760
issued a deployment freeze but that

00:04:31,940 --> 00:04:37,340
doesn't necessarily mean that we froze

00:04:34,760 --> 00:04:39,110
all development process you'd actually

00:04:37,340 --> 00:04:41,270
we still continued to pulling behind

00:04:39,110 --> 00:04:43,789
feature flags so we didn't actually

00:04:41,270 --> 00:04:45,860
cause any incidences because that's a

00:04:43,789 --> 00:04:47,060
pretty big prime time for us and our

00:04:45,860 --> 00:04:49,060
customer so we want to prevent

00:04:47,060 --> 00:04:52,580
incidences like that from occurring um

00:04:49,060 --> 00:04:54,860
and then when the release process here

00:04:52,580 --> 00:04:57,410
how we like to think about it is a

00:04:54,860 --> 00:04:59,960
deployment is a technical process and

00:04:57,410 --> 00:05:02,840
then our release is a business decision

00:04:59,960 --> 00:05:05,840
so when a customer sees that is up to

00:05:02,840 --> 00:05:07,849
like the product team or sales and the

00:05:05,840 --> 00:05:10,010
quality of the code and when it gets

00:05:07,849 --> 00:05:11,240
shipped is up to the technical side so

00:05:10,010 --> 00:05:13,159
you can actually control and have

00:05:11,240 --> 00:05:16,190
everyone be able to see that visibly

00:05:13,159 --> 00:05:18,349
with feature flags um and then the other

00:05:16,190 --> 00:05:20,330
thing to note here is with feature Flags

00:05:18,349 --> 00:05:22,639
you can test it out unlike smaller

00:05:20,330 --> 00:05:25,130
percentages at a time you can roll that

00:05:22,639 --> 00:05:27,200
back so something we do that Optimizely

00:05:25,130 --> 00:05:30,979
is we have something called a wall of

00:05:27,200 --> 00:05:31,969
work and every week if we're deploying

00:05:30,979 --> 00:05:34,249
any feature

00:05:31,969 --> 00:05:36,319
we make it to that the epic owner gets

00:05:34,249 --> 00:05:38,059
up and says oh we've deployed it to five

00:05:36,319 --> 00:05:40,069
percent of our audience ten percent of

00:05:38,059 --> 00:05:42,289
our audience week over week and then

00:05:40,069 --> 00:05:44,479
sometimes if we see that thirty percent

00:05:42,289 --> 00:05:46,369
of our audience we bump into a bug we

00:05:44,479 --> 00:05:48,049
actually roll that back so that 70

00:05:46,369 --> 00:05:51,199
percent of our audience never even saw

00:05:48,049 --> 00:05:53,449
that bug to begin with and then lastly I

00:05:51,199 --> 00:05:54,709
recently went to a DevOps conference and

00:05:53,449 --> 00:05:56,689
it was really interesting hearing

00:05:54,709 --> 00:05:58,579
everyone say different times that

00:05:56,689 --> 00:06:02,509
they've been paged like if it's like

00:05:58,579 --> 00:06:04,729
2:00 a.m. 3:00 a.m. 4:00 a.m. but here

00:06:02,509 --> 00:06:08,389
with future Flags you actually have much

00:06:04,729 --> 00:06:09,799
more control over these like the times

00:06:08,389 --> 00:06:12,339
that you're being paged you can actually

00:06:09,799 --> 00:06:14,599
prevent those incidences from occurring

00:06:12,339 --> 00:06:16,909
something that we have that Optimizely

00:06:14,599 --> 00:06:19,699
is within you can connect feature flags

00:06:16,909 --> 00:06:21,619
to JIRA tickets and we have actually a

00:06:19,699 --> 00:06:24,019
list of like what you can do with each

00:06:21,619 --> 00:06:25,939
flag and it specifically says like this

00:06:24,019 --> 00:06:28,729
feature can be rolled back do it this

00:06:25,939 --> 00:06:30,949
way and so it's pretty organized and you

00:06:28,729 --> 00:06:32,959
can see like what you should be doing

00:06:30,949 --> 00:06:35,029
with each feature flag and how you can

00:06:32,959 --> 00:06:37,669
address those issues and the other thing

00:06:35,029 --> 00:06:41,899
with roll backs is you're not dependent

00:06:37,669 --> 00:06:43,339
on someone else's downtime so if you

00:06:41,899 --> 00:06:45,199
know like you have some third-party

00:06:43,339 --> 00:06:47,119
JavaScript or some third-party vendor

00:06:45,199 --> 00:06:48,619
installed and they're having downtime

00:06:47,119 --> 00:06:50,899
that doesn't mean that you have to have

00:06:48,619 --> 00:06:53,689
that you can just roll everything that's

00:06:50,899 --> 00:06:55,969
attached to that feature flag back and

00:06:53,689 --> 00:06:57,889
then the last thing is I went to a talk

00:06:55,969 --> 00:07:00,139
yesterday where they talked about where

00:06:57,889 --> 00:07:01,549
the speaker mentioned they fixed

00:07:00,139 --> 00:07:03,019
something in production but they didn't

00:07:01,549 --> 00:07:04,489
realize they broke this other thing and

00:07:03,019 --> 00:07:06,289
then they fixed another thing and it

00:07:04,489 --> 00:07:08,479
broke three other things with feature

00:07:06,289 --> 00:07:10,610
flags you can actually prevent that from

00:07:08,479 --> 00:07:12,919
happening by tying each of those

00:07:10,610 --> 00:07:15,289
features behind a feature flag and

00:07:12,919 --> 00:07:18,799
fixing those things in isolation without

00:07:15,289 --> 00:07:20,929
making those dependencies so the next

00:07:18,799 --> 00:07:22,519
thing I want to have everyone do is an

00:07:20,929 --> 00:07:24,919
interactive demo so you can get an

00:07:22,519 --> 00:07:26,689
understanding of what a feature flag is

00:07:24,919 --> 00:07:29,779
and how you roll that out so you'll need

00:07:26,689 --> 00:07:33,319
your phones and you're going to scan the

00:07:29,779 --> 00:07:37,629
top QR code and ace is going to show you

00:07:33,319 --> 00:07:37,629
live in our UI how that works

00:07:51,940 --> 00:07:58,490
great so as you get your phone out some

00:07:56,600 --> 00:08:00,140
phones you can pull up the camera app

00:07:58,490 --> 00:08:01,970
and just point it at the QR code if

00:08:00,140 --> 00:08:04,250
you're not familiar with scanning and it

00:08:01,970 --> 00:08:07,040
should show the URL or you can type in

00:08:04,250 --> 00:08:09,440
the URL that's next to that code what

00:08:07,040 --> 00:08:14,480
you should see when you scan that QR

00:08:09,440 --> 00:08:16,940
code is right here you should see kind

00:08:14,480 --> 00:08:19,970
of an empty little moon raise your hand

00:08:16,940 --> 00:08:23,690
if you see the moon alright so people

00:08:19,970 --> 00:08:26,120
are seeing the moon so what we did was

00:08:23,690 --> 00:08:28,970
we actually put this little astronaut

00:08:26,120 --> 00:08:31,910
behind a feature flag to kind of show

00:08:28,970 --> 00:08:35,270
the power of launching a feature behind

00:08:31,910 --> 00:08:38,120
a feature flag so here in our UI we have

00:08:35,270 --> 00:08:40,340
this slider and we can just turn the

00:08:38,120 --> 00:08:43,070
feature on and raise your hand if you

00:08:40,340 --> 00:08:45,230
see the astronaut now nice so you see my

00:08:43,070 --> 00:08:48,110
astronaut - so everyone saw it so that's

00:08:45,230 --> 00:08:50,030
cool that's like a nice toggle but let's

00:08:48,110 --> 00:08:52,520
see what that controlled rollout might

00:08:50,030 --> 00:08:55,400
look like that Justyna was mentioning

00:08:52,520 --> 00:08:58,970
you know now I put it 2-0 percent so

00:08:55,400 --> 00:09:01,040
again keep your eyes on your phone and

00:08:58,970 --> 00:09:01,970
let them raise your hand if you see the

00:09:01,040 --> 00:09:06,380
astronaut

00:09:01,970 --> 00:09:09,460
so we'll do 25% and see who sees it any

00:09:06,380 --> 00:09:09,460
hands up

00:09:09,490 --> 00:09:14,230
no up there's one there's one over there

00:09:12,400 --> 00:09:17,290
okay couple Anza all right seeing some

00:09:14,230 --> 00:09:18,760
hands let's go to 50% you should keep

00:09:17,290 --> 00:09:20,950
your hands up if you're seeing master

00:09:18,760 --> 00:09:25,439
not I'm not seeing that shots over all

00:09:20,950 --> 00:09:27,899
right that's about half let's go to 75

00:09:25,439 --> 00:09:29,939
I'm still not saying all right this is

00:09:27,899 --> 00:09:32,489
the majority of hands are up and let's

00:09:29,939 --> 00:09:34,949
go to 100% everyone's hands should be up

00:09:32,489 --> 00:09:37,739
including Lian all right cool

00:09:34,949 --> 00:09:39,389
very neat so hopefully you saw a fun

00:09:37,739 --> 00:09:41,970
little demo with you know a simple

00:09:39,389 --> 00:09:45,629
controlled rollout but let's take it

00:09:41,970 --> 00:09:47,729
even a step further for this pull out

00:09:45,629 --> 00:09:51,720
your phone and scan the second QR code

00:09:47,729 --> 00:09:54,059
and in the second QR code what we're

00:09:51,720 --> 00:09:56,849
gonna show is more of a targeted rollout

00:09:54,059 --> 00:09:59,549
instead of doing random percentages

00:09:56,849 --> 00:10:03,799
let's be a little bit mindful about who

00:09:59,549 --> 00:10:07,409
we want to get this astronaut feature so

00:10:03,799 --> 00:10:09,899
everyone all set with QR code number two

00:10:07,409 --> 00:10:12,599
there should be nothing cool ever I'm

00:10:09,899 --> 00:10:15,649
seeing nods alright so what I'm gonna do

00:10:12,599 --> 00:10:19,379
is go into this astronaut feature and

00:10:15,649 --> 00:10:21,599
we've added this audience for special

00:10:19,379 --> 00:10:26,999
rows and we can see how I've defined

00:10:21,599 --> 00:10:28,889
this audience to be a row number matches

00:10:26,999 --> 00:10:30,809
the following conditions and right now

00:10:28,889 --> 00:10:33,779
it only matches the row zero and there

00:10:30,809 --> 00:10:35,850
are no rows that are zero so no one

00:10:33,779 --> 00:10:38,039
should be seeing the astronaut but who

00:10:35,850 --> 00:10:40,739
wants to see this feature any rows of

00:10:38,039 --> 00:10:45,749
interest of that row so that's the

00:10:40,739 --> 00:10:50,429
numbers are 1 2 3 so I'll do 3 & 4 5 6 3

00:10:45,749 --> 00:10:55,759
& 6 so I'll do a row number 3 oh that

00:10:50,429 --> 00:10:59,489
turned into negative for number equals 6

00:10:55,759 --> 00:11:02,399
we'll go ahead and save that and then

00:10:59,489 --> 00:11:05,369
save the feature and so keep your eye on

00:11:02,399 --> 00:11:07,649
your phone 3 & 6 and all the other rows

00:11:05,369 --> 00:11:10,229
can kind of just like weight and raise

00:11:07,649 --> 00:11:14,399
your hands did we get 3 & 6 looks like

00:11:10,229 --> 00:11:16,949
we got 3 & 6 very neat and we can kind

00:11:14,399 --> 00:11:19,559
of go back to the audience and you know

00:11:16,949 --> 00:11:21,479
remove that and you know if there was a

00:11:19,559 --> 00:11:24,389
bug and we realized those customers

00:11:21,479 --> 00:11:26,909
didn't actually want that feature we can

00:11:24,389 --> 00:11:30,119
save that change and have it propagate

00:11:26,909 --> 00:11:33,600
so that that bug is we've mitigated the

00:11:30,119 --> 00:11:35,459
risk of that rollout and bug awesome so

00:11:33,600 --> 00:11:38,850
hopefully you've seen kind of the power

00:11:35,459 --> 00:11:41,220
that this tool provides both with

00:11:38,850 --> 00:11:44,430
people kill switches on/off switches as

00:11:41,220 --> 00:11:46,680
well as targeted rollouts but this is a

00:11:44,430 --> 00:11:51,269
workshop that you came to so we're gonna

00:11:46,680 --> 00:11:53,430
actually do this live in Express so the

00:11:51,269 --> 00:11:56,940
first step we're gonna follow the

00:11:53,430 --> 00:12:01,740
checklist which should look something

00:11:56,940 --> 00:12:04,680
like this with a checklist of steps and

00:12:01,740 --> 00:12:06,959
the first step is to create a free

00:12:04,680 --> 00:12:09,990
rollouts account on the other side of

00:12:06,959 --> 00:12:12,810
the QR code there's a scan you can do it

00:12:09,990 --> 00:12:15,240
with your phone to get the URL and if

00:12:12,810 --> 00:12:17,459
you end up running into an error with

00:12:15,240 --> 00:12:19,529
creating account we do have a limit on

00:12:17,459 --> 00:12:22,079
the number of IP address of the number

00:12:19,529 --> 00:12:23,670
of new accounts from an IP and so if

00:12:22,079 --> 00:12:25,649
everyone's on the same IP sometimes we

00:12:23,670 --> 00:12:28,259
can see errors let me know if you run

00:12:25,649 --> 00:12:29,880
into that error but it seems like no one

00:12:28,259 --> 00:12:31,560
is running into that raise your hand if

00:12:29,880 --> 00:12:35,579
you're running into any errors of

00:12:31,560 --> 00:12:37,589
creating an account maybe one okay well

00:12:35,579 --> 00:12:41,220
maybe you can wait and create an account

00:12:37,589 --> 00:12:43,290
there so I'll just open this URL and

00:12:41,220 --> 00:12:46,079
show you what looks like to create an

00:12:43,290 --> 00:12:48,180
account with this free rollouts account

00:12:46,079 --> 00:12:50,509
you'll just sign in with your

00:12:48,180 --> 00:12:50,509
information

00:12:56,680 --> 00:12:58,740
you

00:13:01,290 --> 00:13:06,090
right so this is what it looks like when

00:13:03,930 --> 00:13:08,450
you're creating an optimized Li rollouts

00:13:06,090 --> 00:13:08,450
account

00:13:13,360 --> 00:13:18,470
you

00:13:15,199 --> 00:13:20,989
cool so that worked so maybe we're not

00:13:18,470 --> 00:13:25,609
running into this IP problem then I was

00:13:20,989 --> 00:13:29,040
hoping we would avoid and yeah let's

00:13:25,609 --> 00:13:31,160
just put in some information here

00:13:29,040 --> 00:13:31,160
and

00:13:32,630 --> 00:13:40,399
cool now we have our free rollouts

00:13:35,959 --> 00:13:41,660
account so the next step and let me know

00:13:40,399 --> 00:13:43,839
if anyone raised your hand up here

00:13:41,660 --> 00:13:47,000
having any troubles with setting it up

00:13:43,839 --> 00:13:50,600
cool so everyone's got an account let's

00:13:47,000 --> 00:13:52,459
go to the next step of the workshop

00:13:50,600 --> 00:13:55,130
which is to create an Express

00:13:52,459 --> 00:13:57,440
application how many people in the

00:13:55,130 --> 00:14:00,019
audience use Express for their work

00:13:57,440 --> 00:14:03,139
nice good amount anyone not using

00:14:00,019 --> 00:14:04,029
Express what what do you what are you

00:14:03,139 --> 00:14:07,399
using back there

00:14:04,029 --> 00:14:09,660
happy cool any other other frameworks

00:14:07,399 --> 00:14:12,750
people are using out there

00:14:09,660 --> 00:14:14,430
in house well very cool very cool maybe

00:14:12,750 --> 00:14:17,459
it'll open source one day and we can all

00:14:14,430 --> 00:14:18,360
use it based on that expression seems

00:14:17,459 --> 00:14:22,079
like no

00:14:18,360 --> 00:14:24,300
ok so we'll be creating an Express

00:14:22,079 --> 00:14:26,240
application the easiest way to do this

00:14:24,300 --> 00:14:29,790
is with this Express application

00:14:26,240 --> 00:14:31,319
generator and I wanted to ask the

00:14:29,790 --> 00:14:33,779
framework question because although this

00:14:31,319 --> 00:14:36,720
workshop is and Express you can use

00:14:33,779 --> 00:14:38,730
rollouts in any platform but we'll be

00:14:36,720 --> 00:14:43,290
using Express middleware to make it easy

00:14:38,730 --> 00:14:48,060
to install so in the Express generator

00:14:43,290 --> 00:14:49,709
you can use this command Express View

00:14:48,060 --> 00:14:52,829
pug and then the name of your

00:14:49,709 --> 00:14:55,819
application so go over to a terminal and

00:14:52,829 --> 00:15:00,660
I'll name this application no js'

00:14:55,819 --> 00:15:03,240
interactive and that was super fast and

00:15:00,660 --> 00:15:05,190
then the next steps to follow after

00:15:03,240 --> 00:15:08,459
creating it is just a change to that new

00:15:05,190 --> 00:15:11,970
directory that's created NPM install and

00:15:08,459 --> 00:15:14,420
then we will run the server and see it

00:15:11,970 --> 00:15:14,420
start up

00:15:16,810 --> 00:15:26,290
so let's take this command to MPN start

00:15:22,210 --> 00:15:29,230
and for those unfamiliar with this

00:15:26,290 --> 00:15:33,580
command hopefully I can there go this is

00:15:29,230 --> 00:15:36,970
saying just show me the logs from NJ si

00:15:33,580 --> 00:15:39,250
the application I just named so now

00:15:36,970 --> 00:15:42,580
we're seeing the logs

00:15:39,250 --> 00:15:45,820
and we can go over to our browser and go

00:15:42,580 --> 00:15:50,620
to localhost 3000 and see our Express

00:15:45,820 --> 00:15:54,420
app cool so I'll give people just a

00:15:50,620 --> 00:15:58,090
moment to follow those instructions for

00:15:54,420 --> 00:16:02,710
creating and installing and running the

00:15:58,090 --> 00:16:06,430
application people have an express app

00:16:02,710 --> 00:16:10,680
running hands raised see a couple cool

00:16:06,430 --> 00:16:10,680
anyone having problems with this so far

00:16:12,900 --> 00:16:18,480
creating an account error yeah so if

00:16:16,470 --> 00:16:21,990
you're getting an account creation error

00:16:18,480 --> 00:16:24,420
I would say you can either try if you

00:16:21,990 --> 00:16:26,040
have cellular service on your phone to

00:16:24,420 --> 00:16:29,820
try to create an account with your phone

00:16:26,040 --> 00:16:32,520
to avoid the IP problem that I mentioned

00:16:29,820 --> 00:16:34,080
we'll try to fix that later the other

00:16:32,520 --> 00:16:39,620
option is just to follow along with the

00:16:34,080 --> 00:16:39,620
rest of the workshop and get the account

00:16:39,880 --> 00:16:41,940
you

00:16:46,269 --> 00:16:52,430
okay so any other problems before we

00:16:50,180 --> 00:16:54,860
move on we want want to get everyone

00:16:52,430 --> 00:16:59,350
kind of working with us so we can get

00:16:54,860 --> 00:17:02,959
through through all the steps so now

00:16:59,350 --> 00:17:04,819
let's go back to our steps we created a

00:17:02,959 --> 00:17:09,079
free rollouts account created an Express

00:17:04,819 --> 00:17:13,480
application now we'll follow along this

00:17:09,079 --> 00:17:18,230
link on how to four Express where

00:17:13,480 --> 00:17:24,050
someone made this handy blog post on how

00:17:18,230 --> 00:17:25,670
to do Optimizely with Express and so it

00:17:24,050 --> 00:17:29,059
starts with creating the account so

00:17:25,670 --> 00:17:31,550
we'll go down to step two where we're

00:17:29,059 --> 00:17:35,360
gonna start installing Optimizely into

00:17:31,550 --> 00:17:38,260
this Express application and the first

00:17:35,360 --> 00:17:41,600
step to doing so is to install our SDK

00:17:38,260 --> 00:17:43,490
or Express middleware which is a wrapper

00:17:41,600 --> 00:17:47,929
around the jaw plain vanilla JavaScript

00:17:43,490 --> 00:17:54,309
SDK so we'll cut this server and do an

00:17:47,929 --> 00:17:54,309
NPM install save on Optimizely Express

00:18:01,850 --> 00:18:09,429
cool

00:18:04,679 --> 00:18:12,749
and that is installing Optimizely in the

00:18:09,429 --> 00:18:12,749
Express application

00:18:12,890 --> 00:18:17,090
the next step that we're gonna follow

00:18:15,110 --> 00:18:18,200
and let me know you know feel free to

00:18:17,090 --> 00:18:20,750
interrupt me if you're having problems

00:18:18,200 --> 00:18:24,020
or any questions the next step is to

00:18:20,750 --> 00:18:27,860
import that SDK that we just installed

00:18:24,020 --> 00:18:32,840
and start to initialize it so with that

00:18:27,860 --> 00:18:35,679
we'll pull up vs code and I'll open our

00:18:32,840 --> 00:18:35,679
nsj

00:18:36,870 --> 00:18:38,900
I

00:18:40,380 --> 00:18:51,480
cool and we'll go to our app j/s

00:18:46,410 --> 00:18:54,930
and towards the top we can require that

00:18:51,480 --> 00:18:57,680
Optimizely Express middleware that we

00:18:54,930 --> 00:18:57,680
installed

00:19:03,330 --> 00:19:05,390
you

00:19:05,400 --> 00:19:12,870
and then we'll want to initialize that

00:19:09,290 --> 00:19:15,420
SDK which as you can see from the blog

00:19:12,870 --> 00:19:17,250
post there's this initialize method that

00:19:15,420 --> 00:19:18,540
we'll call and I'll go through each of

00:19:17,250 --> 00:19:21,900
the different options that will be

00:19:18,540 --> 00:19:25,830
providing so we'll do our Optimizely

00:19:21,900 --> 00:19:30,510
equals Optimizely Express SDK dot

00:19:25,830 --> 00:19:33,270
initialize and provide some options the

00:19:30,510 --> 00:19:35,700
first and most important option to

00:19:33,270 --> 00:19:39,060
initializing is providing the SDK key

00:19:35,700 --> 00:19:42,900
and this is what connects your

00:19:39,060 --> 00:19:47,150
application with the Optimizely UI how

00:19:42,900 --> 00:19:49,950
do we find this sdk key we go to our

00:19:47,150 --> 00:19:53,790
newly create an account and for those

00:19:49,950 --> 00:19:59,160
who haven't it created an account you

00:19:53,790 --> 00:20:01,350
can use my asset k key i guess but when

00:19:59,160 --> 00:20:05,280
you go to settings in the rollouts

00:20:01,350 --> 00:20:07,490
account on the Left sidebar you'll see

00:20:05,280 --> 00:20:11,190
that there's an environments tab and

00:20:07,490 --> 00:20:13,020
under here you'll see the SDK key and

00:20:11,190 --> 00:20:17,940
we'll use for this workshop the

00:20:13,020 --> 00:20:24,050
development SDK key and we can copy and

00:20:17,940 --> 00:20:24,050
paste that into vs code here

00:20:25,600 --> 00:20:33,520
and the way that this sdk key connects

00:20:30,220 --> 00:20:38,710
to Optimizely is you can see this URL

00:20:33,520 --> 00:20:44,080
below is a JSON file where that sdk key

00:20:38,710 --> 00:20:46,419
points and this is where the data file

00:20:44,080 --> 00:20:48,370
gets generated which looks like it's not

00:20:46,419 --> 00:20:50,410
quite generating yet and that could be

00:20:48,370 --> 00:20:52,750
because it's a new lead create an

00:20:50,410 --> 00:20:54,900
account so we may have to come back to

00:20:52,750 --> 00:20:54,900
that

00:20:55,639 --> 00:21:00,679
I'll come back to that in a second okay

00:20:58,909 --> 00:21:04,789
so we'll move on to the different

00:21:00,679 --> 00:21:08,330
options that are passed to the SDK

00:21:04,789 --> 00:21:11,659
initialized method which is that data

00:21:08,330 --> 00:21:13,730
file I mentioned you get to control how

00:21:11,659 --> 00:21:15,860
frequently our application is going to

00:21:13,730 --> 00:21:18,379
pull for that JSON file which defines

00:21:15,860 --> 00:21:23,210
the feature flags that we create in this

00:21:18,379 --> 00:21:26,720
UI so our data file options will want

00:21:23,210 --> 00:21:30,129
them to have an auto update value of

00:21:26,720 --> 00:21:32,989
true meaning that we don't want just the

00:21:30,129 --> 00:21:34,369
existence state of the data file with

00:21:32,989 --> 00:21:37,100
the current state of the feature flags

00:21:34,369 --> 00:21:39,859
we want it to continuously update and

00:21:37,100 --> 00:21:43,309
then we want to give it an update

00:21:39,859 --> 00:21:46,129
interval and for these workshop purposes

00:21:43,309 --> 00:21:48,049
I recommend you know updating every

00:21:46,129 --> 00:21:50,239
second but obviously in a production

00:21:48,049 --> 00:21:52,789
application you may want you know a

00:21:50,239 --> 00:21:55,609
little bit longer of a time maybe five

00:21:52,789 --> 00:21:58,129
minutes we also this is a polling

00:21:55,609 --> 00:22:01,070
mechanism we also have pushed via web

00:21:58,129 --> 00:22:03,230
hooks to provide kind of real-time but

00:22:01,070 --> 00:22:04,820
this is kind of the easiest and simplest

00:22:03,230 --> 00:22:05,480
to set up in this workshop so we'll

00:22:04,820 --> 00:22:08,230
start there

00:22:05,480 --> 00:22:08,230
question

00:22:09,490 --> 00:22:16,870
yeah so unfortunately this URL wasn't

00:22:14,470 --> 00:22:20,649
working earlier but let me pull up

00:22:16,870 --> 00:22:24,760
another example of a data file to make

00:22:20,649 --> 00:22:28,929
it clear so a data file is just a JSON

00:22:24,760 --> 00:22:32,380
object and as we create new entities

00:22:28,929 --> 00:22:35,890
like features in the UI those entities

00:22:32,380 --> 00:22:37,929
will be reflected in this JSON format so

00:22:35,890 --> 00:22:40,000
you see these feature flags it's empty

00:22:37,929 --> 00:22:42,370
right now because there's nothing here

00:22:40,000 --> 00:22:47,320
but as we create feature flags it will

00:22:42,370 --> 00:22:48,669
get populated and and so what the

00:22:47,320 --> 00:22:53,649
application is doing with this

00:22:48,669 --> 00:22:55,990
auto-update is saying fetch the latest

00:22:53,649 --> 00:22:58,899
every try to fish and see if there's any

00:22:55,990 --> 00:23:02,850
changes every second you can think of it

00:22:58,899 --> 00:23:05,730
as a remote config file if that helps

00:23:02,850 --> 00:23:08,500
any other questions here

00:23:05,730 --> 00:23:12,909
the last option that I'll pass to this

00:23:08,500 --> 00:23:16,029
SDK is the log level our log larger kind

00:23:12,909 --> 00:23:18,850
of is noisy so I'm just gonna set it at

00:23:16,029 --> 00:23:21,360
the warned level in case something is

00:23:18,850 --> 00:23:26,200
going wrong

00:23:21,360 --> 00:23:28,779
cool so then the next step any any

00:23:26,200 --> 00:23:33,520
problems with initializing SDK any other

00:23:28,779 --> 00:23:35,590
questions cool the next step is to apply

00:23:33,520 --> 00:23:38,649
the middleware similar to other

00:23:35,590 --> 00:23:41,740
middlewares and Optimizely Express so

00:23:38,649 --> 00:23:45,789
we'll do app use Optimizely dot

00:23:41,740 --> 00:23:50,850
middleware which is the same kind of

00:23:45,789 --> 00:23:50,850
instruction you'll see in this blog post

00:23:52,600 --> 00:24:00,090
right here so you can copy-and-paste if

00:23:56,200 --> 00:24:05,970
you don't want to type

00:24:00,090 --> 00:24:08,280
cool so now is a good time to start our

00:24:05,970 --> 00:24:09,990
application after saving these changes

00:24:08,280 --> 00:24:14,880
and make sure we didn't break anything

00:24:09,990 --> 00:24:18,000
so let's start that seems to be working

00:24:14,880 --> 00:24:20,310
fine and we can go over to our Express

00:24:18,000 --> 00:24:21,500
application and everything is working

00:24:20,310 --> 00:24:26,280
great

00:24:21,500 --> 00:24:28,620
cool so what what we did at this step

00:24:26,280 --> 00:24:31,170
when we said optimize use Optimizely

00:24:28,620 --> 00:24:34,530
middleware we're now giving every single

00:24:31,170 --> 00:24:37,590
route in our Express application access

00:24:34,530 --> 00:24:40,950
to optimize the information so now we're

00:24:37,590 --> 00:24:43,770
ready to install a feature flag and to

00:24:40,950 --> 00:24:47,480
do that we'll go over to one of our

00:24:43,770 --> 00:24:49,710
routes so in the routes tab of this

00:24:47,480 --> 00:24:54,870
auto-generated Express application

00:24:49,710 --> 00:24:57,660
there's an index file in the index file

00:24:54,870 --> 00:24:59,760
you'll see the route which controls what

00:24:57,660 --> 00:25:02,370
we see in the homepage right now it's

00:24:59,760 --> 00:25:05,460
just rendering the title Express and we

00:25:02,370 --> 00:25:09,270
can see that here Express welcome to

00:25:05,460 --> 00:25:14,250
Express so what we'll do is we'll change

00:25:09,270 --> 00:25:17,280
that title and show a feature flag so as

00:25:14,250 --> 00:25:22,620
I mentioned and also is mentioned in the

00:25:17,280 --> 00:25:24,290
blog post is the each request object

00:25:22,620 --> 00:25:26,760
will get a new property

00:25:24,290 --> 00:25:29,370
Optimizely which will have the

00:25:26,760 --> 00:25:31,620
information like the SDK client which

00:25:29,370 --> 00:25:33,450
will provide API is like is feature

00:25:31,620 --> 00:25:36,450
enabled which controls whether or not

00:25:33,450 --> 00:25:40,140
the feature is on or off so let's go to

00:25:36,450 --> 00:25:43,260
the code and in the request there's

00:25:40,140 --> 00:25:46,050
going to be enough Optimizely property

00:25:43,260 --> 00:25:49,140
and in that Optimizely property there's

00:25:46,050 --> 00:25:53,720
a client which points to our API s and

00:25:49,140 --> 00:25:53,720
here we'll call is feature enabled

00:25:54,110 --> 00:26:00,019
in the first argument to is feature

00:25:57,110 --> 00:26:05,710
enabled is the key of the feature we'll

00:26:00,019 --> 00:26:08,590
call it hello world for now

00:26:05,710 --> 00:26:12,550
the second argument to is feature

00:26:08,590 --> 00:26:14,080
enabled is what we call a user ID in an

00:26:12,550 --> 00:26:16,240
application where you actually have

00:26:14,080 --> 00:26:19,120
users powering them it would be the

00:26:16,240 --> 00:26:22,090
identifier for that user in this case

00:26:19,120 --> 00:26:25,150
you know I don't have users in our

00:26:22,090 --> 00:26:27,160
back-end new to this plane Express app

00:26:25,150 --> 00:26:30,000
that doesn't have a server so we'll just

00:26:27,160 --> 00:26:32,020
hard code a user ID for now to simulate

00:26:30,000 --> 00:26:38,620
what it would be like in a production

00:26:32,020 --> 00:26:40,450
application once that call is made we

00:26:38,620 --> 00:26:43,990
can save this to a variable like is

00:26:40,450 --> 00:26:46,390
enabled so this is now a boolean that

00:26:43,990 --> 00:26:49,540
we'll get back from is feature enabled

00:26:46,390 --> 00:26:53,410
and what we'll do is we'll just change

00:26:49,540 --> 00:26:55,720
the message that's returned when the

00:26:53,410 --> 00:27:00,100
feature is enabled or not so I'll just

00:26:55,720 --> 00:27:03,400
do a little turnery here and say if the

00:27:00,100 --> 00:27:05,320
is enabled is true we'll do a feature on

00:27:03,400 --> 00:27:07,140
and we'll get excited with an

00:27:05,320 --> 00:27:12,070
exclamation point

00:27:07,140 --> 00:27:13,490
otherwise we'll say feature is off not

00:27:12,070 --> 00:27:18,650
excited

00:27:13,490 --> 00:27:21,170
and we can use you know cool new syntax

00:27:18,650 --> 00:27:23,770
from JavaScript to put that message in

00:27:21,170 --> 00:27:23,770
the title

00:27:24,740 --> 00:27:30,690
cool

00:27:27,090 --> 00:27:36,180
I'll pause here for a second for those

00:27:30,690 --> 00:27:38,580
who are coding along and any questions

00:27:36,180 --> 00:27:42,620
about this code as people are coding it

00:27:38,580 --> 00:27:42,620
out feel free to ask yes

00:27:47,840 --> 00:27:55,250
good great questions so that data file

00:27:52,030 --> 00:27:57,830
when you start the application the data

00:27:55,250 --> 00:28:01,040
file will get loaded as soon as possible

00:27:57,830 --> 00:28:03,440
and then is trying to keep up to date so

00:28:01,040 --> 00:28:05,510
then when you call so that data file is

00:28:03,440 --> 00:28:07,490
now in memory and application so when

00:28:05,510 --> 00:28:09,230
you call is feature enabled it's just

00:28:07,490 --> 00:28:11,540
going to that in memory file and

00:28:09,230 --> 00:28:13,370
determining whether it's on or off so

00:28:11,540 --> 00:28:15,170
it's not making any network requests and

00:28:13,370 --> 00:28:16,760
it's not blocking which is why we don't

00:28:15,170 --> 00:28:19,330
have to say like a weight or anything

00:28:16,760 --> 00:28:19,330
like that

00:28:19,680 --> 00:28:22,680
question

00:28:24,670 --> 00:28:30,290
yes great question so if Optimizely is

00:28:28,460 --> 00:28:34,040
down if the data file is not there is

00:28:30,290 --> 00:28:37,790
feature enabled will default to false so

00:28:34,040 --> 00:28:39,620
that is one default behavior but you can

00:28:37,790 --> 00:28:42,670
also if Optimizely

00:28:39,620 --> 00:28:45,590
we're down provide your own kind of own

00:28:42,670 --> 00:28:47,360
checked in data file to say we never

00:28:45,590 --> 00:28:49,280
want this feature to be off that's one

00:28:47,360 --> 00:28:51,830
way to say you know we're gonna have our

00:28:49,280 --> 00:28:53,450
own defaults and another way is to you

00:28:51,830 --> 00:28:55,700
know if you really don't trust optimize

00:28:53,450 --> 00:28:57,830
the CDN host the data file on your own

00:28:55,700 --> 00:28:59,600
services so every time the data file

00:28:57,830 --> 00:29:02,150
updates kind of upload it to your own

00:28:59,600 --> 00:29:06,160
CDNs and have kind of more control over

00:29:02,150 --> 00:29:06,160
when that file it gets update updated

00:29:07,780 --> 00:29:12,140
cool so now is an even better time to

00:29:11,030 --> 00:29:14,120
make sure I didn't break the

00:29:12,140 --> 00:29:19,130
applications so we're gonna restart it

00:29:14,120 --> 00:29:22,100
and go back to our Express app and we

00:29:19,130 --> 00:29:25,040
should see the features off and that is

00:29:22,100 --> 00:29:26,930
because we didn't turn it on and we

00:29:25,040 --> 00:29:31,940
actually also didn't create it yet in

00:29:26,930 --> 00:29:34,430
the UI so we called the feature hello

00:29:31,940 --> 00:29:39,320
world and so we'll have to remember that

00:29:34,430 --> 00:29:41,210
as we go to our rollouts project and

00:29:39,320 --> 00:29:44,870
since the data file didn't look like it

00:29:41,210 --> 00:29:49,490
was quite up yet I'm going to use an

00:29:44,870 --> 00:29:54,150
existing different project so bear with

00:29:49,490 --> 00:29:56,550
me while I change my project

00:29:54,150 --> 00:29:58,680
- one that I know will work for demo

00:29:56,550 --> 00:30:01,260
purposes or I hope we'll work up that

00:29:58,680 --> 00:30:03,500
might be wrong why I think I got signed

00:30:01,260 --> 00:30:03,500
out

00:30:10,700 --> 00:30:13,700
switching

00:30:13,929 --> 00:30:17,190
different account

00:30:20,540 --> 00:30:22,600
you

00:30:27,490 --> 00:30:34,280
cool so I switch the account so I'm

00:30:30,680 --> 00:30:40,060
gonna switch my SDK key to one that I

00:30:34,280 --> 00:30:40,060
know is working do the staging

00:30:45,400 --> 00:30:55,350
and we'll restart this application

00:30:53,040 --> 00:30:58,320
and here you can start to see the logs

00:30:55,350 --> 00:31:00,060
now that I'm using a data file that I

00:30:58,320 --> 00:31:01,770
know is valid you can see the

00:31:00,060 --> 00:31:06,330
application getting that data file and

00:31:01,770 --> 00:31:09,630
we can look at the URL here and see the

00:31:06,330 --> 00:31:12,770
data file with some content

00:31:09,630 --> 00:31:12,770
so now

00:31:13,250 --> 00:31:21,080
we want to create a new feature flag for

00:31:17,270 --> 00:31:24,280
our hello world feature so in the UI in

00:31:21,080 --> 00:31:28,060
the left sidebar you should see features

00:31:24,280 --> 00:31:31,010
click that and click create new feature

00:31:28,060 --> 00:31:35,410
will give the feature key the same one

00:31:31,010 --> 00:31:35,410
that we put in the code hello world

00:31:36,400 --> 00:31:41,250
and we can save that

00:31:44,130 --> 00:31:49,770
and we can see that the feature is off

00:31:46,680 --> 00:31:52,020
and so if we go back to our Express

00:31:49,770 --> 00:31:55,260
application and refresh it the feature

00:31:52,020 --> 00:31:58,920
is still off but now let's go and

00:31:55,260 --> 00:32:00,600
actually see this feature turn on so

00:31:58,920 --> 00:32:04,880
we'll turn it on for our staging

00:32:00,600 --> 00:32:08,630
environment and save that

00:32:04,880 --> 00:32:11,290
and we can at this point either see that

00:32:08,630 --> 00:32:15,290
change being reflected in the CDN file

00:32:11,290 --> 00:32:18,260
or we can go to our running application

00:32:15,290 --> 00:32:21,650
and we can see when that data file gets

00:32:18,260 --> 00:32:25,640
updated from the logs and hopefully

00:32:21,650 --> 00:32:29,060
we'll see that we can go now to our

00:32:25,640 --> 00:32:32,630
application and which I don't think it

00:32:29,060 --> 00:32:34,880
actually there now it's updated and we

00:32:32,630 --> 00:32:38,810
can go to our application and now see

00:32:34,880 --> 00:32:41,000
the feature on so now at this point

00:32:38,810 --> 00:32:43,880
we've implemented a simple on/off

00:32:41,000 --> 00:32:46,640
feature flag that we without any

00:32:43,880 --> 00:32:51,890
additional code deploys we can go back

00:32:46,640 --> 00:32:54,430
to our application turn this off save

00:32:51,890 --> 00:32:54,430
that change

00:32:54,930 --> 00:33:00,840
we can see we can wait as our

00:32:58,220 --> 00:33:04,650
application pulls for that change from

00:33:00,840 --> 00:33:07,200
our CDN to get that update there it is

00:33:04,650 --> 00:33:09,420
and we can go to our application and we

00:33:07,200 --> 00:33:11,400
can reload this without any additional

00:33:09,420 --> 00:33:15,450
code deploys and see now the feature is

00:33:11,400 --> 00:33:18,810
off so hopefully everyone followed with

00:33:15,450 --> 00:33:20,970
me did everyone did anyone get to the

00:33:18,810 --> 00:33:23,190
stage where they are able to toggle a

00:33:20,970 --> 00:33:26,880
feature flag on and off I see one oh wow

00:33:23,190 --> 00:33:29,660
lots of people awesome great any other

00:33:26,880 --> 00:33:29,660
questions

00:33:31,850 --> 00:33:38,960
what I will do now is ask myself a

00:33:35,840 --> 00:33:44,330
question which is how did we see that

00:33:38,960 --> 00:33:48,169
cool targeted demo piece so optionally

00:33:44,330 --> 00:33:51,320
to the is feature enabled API call you

00:33:48,169 --> 00:33:52,250
can pass in attributes and in those

00:33:51,320 --> 00:33:54,890
attributes

00:33:52,250 --> 00:33:56,840
you know I passed in maybe like a table

00:33:54,890 --> 00:33:58,520
attribute but we can do something like

00:33:56,840 --> 00:34:05,390
you know let's say you have certain

00:33:58,520 --> 00:34:07,700
users to our VIP users and right now

00:34:05,390 --> 00:34:11,090
again we don't have users backing our

00:34:07,700 --> 00:34:13,040
application but we can simulate this

00:34:11,090 --> 00:34:16,220
with something like query parameters so

00:34:13,040 --> 00:34:21,020
what what I'll do is say you know like

00:34:16,220 --> 00:34:24,639
let's say is VIP and if this is a true

00:34:21,020 --> 00:34:30,260
query parameter let's target that

00:34:24,639 --> 00:34:37,159
feature to be on and so now in the UI

00:34:30,260 --> 00:34:39,230
you can go to audiences to target people

00:34:37,159 --> 00:34:41,780
and you can see these special rows and

00:34:39,230 --> 00:34:44,240
special tables the first step is to

00:34:41,780 --> 00:34:47,780
define the attribute that I pass in to

00:34:44,240 --> 00:34:51,440
that API call so i pass an attribute

00:34:47,780 --> 00:34:54,820
called VIP so let's go and create a new

00:34:51,440 --> 00:34:54,820
attribute called VIP

00:34:56,500 --> 00:35:02,230
then we'll go to the audience creation

00:34:59,400 --> 00:35:06,660
create a new audience based on that

00:35:02,230 --> 00:35:06,660
attribute save the IP users

00:35:09,010 --> 00:35:17,770
and we'll just say the VIP property is a

00:35:12,580 --> 00:35:20,310
boolean that is true defines our VIP

00:35:17,770 --> 00:35:20,310
users

00:35:23,210 --> 00:35:29,180
so now let's go back to our feature

00:35:26,570 --> 00:35:30,470
hello world and we're going to add this

00:35:29,180 --> 00:35:31,940
audience so we're going to turn the

00:35:30,470 --> 00:35:36,470
feature on but we're going to add it

00:35:31,940 --> 00:35:39,220
only two VIP users and we'll save that

00:35:36,470 --> 00:35:39,220
change

00:35:42,780 --> 00:35:48,960
and we should then once the data file

00:35:45,870 --> 00:35:52,500
updates this feature flag is on but

00:35:48,960 --> 00:35:55,050
targeted to very specific people and so

00:35:52,500 --> 00:35:57,360
we can go to our Express application and

00:35:55,050 --> 00:36:01,410
when I reload this the feature should

00:35:57,360 --> 00:36:05,100
still be off so it's still off but if I

00:36:01,410 --> 00:36:10,700
add this query parameter did I label it

00:36:05,100 --> 00:36:10,700
VIP I labeled it is VIP is

00:36:11,230 --> 00:36:14,160
it's true

00:36:14,490 --> 00:36:23,240
No

00:36:17,010 --> 00:36:26,520
alright something didn't quite work I

00:36:23,240 --> 00:36:29,400
think through this so request query

00:36:26,520 --> 00:36:31,619
parameter is VI P equals to true

00:36:29,400 --> 00:36:37,040
that's a boolean true passed to the

00:36:31,619 --> 00:36:37,040
attribute VIP and it should be enabled

00:36:41,060 --> 00:36:49,390
I shouldn't have to because it should

00:36:44,750 --> 00:36:49,390
have gotten the latest data file so they

00:36:50,040 --> 00:36:57,830
oh good point yes changing the code so

00:36:55,410 --> 00:36:59,790
changes to Optimizely doesn't require

00:36:57,830 --> 00:37:02,100
restarting the server changing the code

00:36:59,790 --> 00:37:02,580
does require restarting the server thank

00:37:02,100 --> 00:37:05,250
you

00:37:02,580 --> 00:37:08,190
hard to demo and think at the same time

00:37:05,250 --> 00:37:10,980
so now when we were to load we see it's

00:37:08,190 --> 00:37:13,910
true and when we turn that to false it's

00:37:10,980 --> 00:37:18,510
off so I did do the coding right cool

00:37:13,910 --> 00:37:22,200
and that is the workshop so we're pretty

00:37:18,510 --> 00:37:26,210
early but thanks everyone for coming

00:37:22,200 --> 00:37:31,170
we'll be here afterward just as a

00:37:26,210 --> 00:37:34,620
summary let's go over you know summary

00:37:31,170 --> 00:37:36,780
of some things that we learned we

00:37:34,620 --> 00:37:40,170
created a an Express application

00:37:36,780 --> 00:37:42,980
installed Optimizely seen how we can

00:37:40,170 --> 00:37:45,630
roll out toggles on/off switches

00:37:42,980 --> 00:37:48,660
percentage rollouts and targeted feature

00:37:45,630 --> 00:37:50,880
flags this application is free to use

00:37:48,660 --> 00:37:54,750
unlimited feature Flags unlimited seats

00:37:50,880 --> 00:37:57,670
so yeah go have fun and good luck with

00:37:54,750 --> 00:38:04,209
better deploys thanks so much

00:37:57,670 --> 00:38:04,209
[Applause]

00:38:05,030 --> 00:38:08,030
yeah

00:38:10,820 --> 00:38:17,660
it's uh not open source but we can make

00:38:15,290 --> 00:38:20,590
it open source that's something I can

00:38:17,660 --> 00:38:20,590
yeah we can do

00:38:23,680 --> 00:38:32,010
yes definitely so a great question

00:38:26,830 --> 00:38:32,010
if you go to our Docs which are linked

00:38:33,000 --> 00:38:39,420
in the you are in the the page that

00:38:36,900 --> 00:38:42,390
you'll see you can see the the different

00:38:39,420 --> 00:38:43,829
platforms we support and so we do have

00:38:42,390 --> 00:38:45,569
like if you just wanted to do

00:38:43,829 --> 00:38:46,800
client-side browser or if you were and

00:38:45,569 --> 00:38:49,260
specifically react

00:38:46,800 --> 00:38:51,750
we have SDKs that are specific for those

00:38:49,260 --> 00:38:55,690
platforms but they all connect to the

00:38:51,750 --> 00:38:57,750
same data file in same type of way

00:38:55,690 --> 00:38:57,750
you

00:38:57,849 --> 00:39:09,910
oh yeah so I'll show another cool demo

00:39:06,180 --> 00:39:13,180
which is you may have wondered why my

00:39:09,910 --> 00:39:14,799
account has more stuff in a sidebar and

00:39:13,180 --> 00:39:18,369
you also might be wondering like

00:39:14,799 --> 00:39:20,289
Optimizely why you giving this product

00:39:18,369 --> 00:39:23,410
for free like either we're really stupid

00:39:20,289 --> 00:39:25,119
or we have you know there's a reason why

00:39:23,410 --> 00:39:27,430
we're doing it and the reason is because

00:39:25,119 --> 00:39:30,400
Optimizely is really an experimentation

00:39:27,430 --> 00:39:33,309
platform company so once you have the

00:39:30,400 --> 00:39:36,009
tools to give different experiences to

00:39:33,309 --> 00:39:38,410
different people now you know you start

00:39:36,009 --> 00:39:41,199
to question what is the best experience

00:39:38,410 --> 00:39:47,270
and here I'll show a demo to show the

00:39:41,199 --> 00:39:49,890
capabilities of what what we can do in

00:39:47,270 --> 00:39:53,220
[Music]

00:39:49,890 --> 00:39:56,100
in full sack which is our sort of

00:39:53,220 --> 00:39:58,170
flagship product so here's a demo let's

00:39:56,100 --> 00:40:01,860
say you're on the team building flappy

00:39:58,170 --> 00:40:04,410
bird and you know when you first built

00:40:01,860 --> 00:40:06,660
it you didn't build any pipes so you're

00:40:04,410 --> 00:40:09,180
just flapping along and it's kind of

00:40:06,660 --> 00:40:11,520
boring and so you're trying to figure

00:40:09,180 --> 00:40:13,350
out what to do with this game the next

00:40:11,520 --> 00:40:16,590
thing you can do is add a feature like

00:40:13,350 --> 00:40:19,590
we did just now in the workshop and so

00:40:16,590 --> 00:40:21,870
we can now play it with pipes and we can

00:40:19,590 --> 00:40:23,790
see you out like Optimizely gives us

00:40:21,870 --> 00:40:26,130
control of controlling whether the

00:40:23,790 --> 00:40:29,460
features are on and off but in addition

00:40:26,130 --> 00:40:31,890
to that in the paid version of our

00:40:29,460 --> 00:40:34,470
product we also have variables we can

00:40:31,890 --> 00:40:37,350
change variables like remote

00:40:34,470 --> 00:40:39,720
configurations so let's make the gravity

00:40:37,350 --> 00:40:42,240
like way heavier and you can see this

00:40:39,720 --> 00:40:44,610
game like changed quite a bit and it's

00:40:42,240 --> 00:40:47,040
kind of hard to do on this podium and or

00:40:44,610 --> 00:40:49,520
we can do like really low gravity and

00:40:47,040 --> 00:40:52,260
like see a super floaty flappy bird and

00:40:49,520 --> 00:40:54,060
the point of this is not just greater

00:40:52,260 --> 00:40:56,130
control but now you're starting to ask

00:40:54,060 --> 00:40:58,260
the question of like what is the best

00:40:56,130 --> 00:41:00,480
configuration part of what flappy bird

00:40:58,260 --> 00:41:02,880
success was was like finding that exact

00:41:00,480 --> 00:41:05,970
right configuration and so what we can

00:41:02,880 --> 00:41:08,880
do is add a variation and create an

00:41:05,970 --> 00:41:12,300
experiment to run on live traffic and

00:41:08,880 --> 00:41:13,830
see given a different variation some

00:41:12,300 --> 00:41:16,590
people will see one version of flappy

00:41:13,830 --> 00:41:18,660
bird and another will see another can we

00:41:16,590 --> 00:41:21,300
see the metrics coming back from that

00:41:18,660 --> 00:41:23,760
and actually run an experiment and see

00:41:21,300 --> 00:41:25,740
which got the most engagement this is

00:41:23,760 --> 00:41:28,200
showing kind of the results that you get

00:41:25,740 --> 00:41:30,030
out of our paid product we capture

00:41:28,200 --> 00:41:32,070
results from the different variations

00:41:30,030 --> 00:41:35,640
and show you which one is actually the

00:41:32,070 --> 00:41:38,850
winner to roll out and this account this

00:41:35,640 --> 00:41:42,000
product is a paid version so and this

00:41:38,850 --> 00:41:44,940
this demo is you can play with it it's a

00:41:42,000 --> 00:41:50,000
knot on your sheet but optimized at

00:41:44,940 --> 00:41:50,000
github do a slash aisa slash flappy bird

00:41:51,290 --> 00:41:54,970
hey I can't zoom in

00:41:58,230 --> 00:42:00,290
you

00:42:03,559 --> 00:42:05,619
you

00:42:07,460 --> 00:42:14,569
the UI is not open-source the SDKs are

00:42:11,970 --> 00:42:14,569
all open source

00:42:19,670 --> 00:42:21,730
you

00:42:35,569 --> 00:42:41,180
totally so you could respond to webhooks

00:42:39,380 --> 00:42:43,099
from our server and decide you know

00:42:41,180 --> 00:42:46,249
we're gonna save this file in our local

00:42:43,099 --> 00:42:48,549
system and control when when it gets

00:42:46,249 --> 00:42:48,549
updated

00:42:54,119 --> 00:42:56,180
you

00:43:00,890 --> 00:43:02,950
you

00:43:03,210 --> 00:43:07,200
yeah so the question about whether we

00:43:05,700 --> 00:43:09,660
can use this kind of free product in

00:43:07,200 --> 00:43:11,430
production the nice thing because it

00:43:09,660 --> 00:43:13,620
shares the same SDK the same

00:43:11,430 --> 00:43:16,260
infrastructure as our paid product which

00:43:13,620 --> 00:43:18,750
is relied on in production by very large

00:43:16,260 --> 00:43:21,900
customers you get the enterprise grade

00:43:18,750 --> 00:43:23,790
with the free product so I can stand

00:43:21,900 --> 00:43:25,890
confidently if you if you want we can

00:43:23,790 --> 00:43:29,880
provide kind of like our up times and

00:43:25,890 --> 00:43:32,430
SLA s separately for kind of the paid

00:43:29,880 --> 00:43:34,380
version to help gain confidence but

00:43:32,430 --> 00:43:36,180
again if you want kind of that control

00:43:34,380 --> 00:43:38,580
over the data file so you're you're not

00:43:36,180 --> 00:43:41,100
you're confident that you're not relying

00:43:38,580 --> 00:43:43,520
on a free product in production then you

00:43:41,100 --> 00:43:43,520
can do that

00:43:49,080 --> 00:43:51,140
you

00:44:02,460 --> 00:44:08,820
and the way those different environments

00:44:05,430 --> 00:44:11,220
show up is their different keys so

00:44:08,820 --> 00:44:12,839
different kind of files so your staging

00:44:11,220 --> 00:44:15,770
will connect to a certain file and your

00:44:12,839 --> 00:44:15,770
production will connect

00:44:19,350 --> 00:44:22,130
yeah

00:44:23,800 --> 00:44:25,860
you

00:44:30,360 --> 00:44:34,530
I can just say that the paid version is

00:44:32,580 --> 00:44:36,780
kind of an enterprise software sales

00:44:34,530 --> 00:44:38,670
cycle so oftentimes we really want to

00:44:36,780 --> 00:44:40,860
talk to the customers directly to see

00:44:38,670 --> 00:44:45,170
you know what are your use cases what

00:44:40,860 --> 00:44:45,170
will make sense yeah

00:44:50,609 --> 00:44:52,670
you

00:44:54,680 --> 00:44:56,740
you

00:45:00,359 --> 00:45:03,690
question in the back

00:45:05,809 --> 00:45:07,869
you

00:45:09,080 --> 00:45:13,160
you

00:45:11,099 --> 00:45:13,160
you

00:45:19,660 --> 00:45:21,720
you

00:45:26,200 --> 00:45:35,079
yeah great question so going to

00:45:29,230 --> 00:45:37,900
audiences you can you can do exclusion

00:45:35,079 --> 00:45:41,140
so matches or does not match you also

00:45:37,900 --> 00:45:45,279
have this kind of and/or ability to

00:45:41,140 --> 00:45:49,720
combine more than one attribute so it's

00:45:45,279 --> 00:45:52,390
either this or that or you know there in

00:45:49,720 --> 00:45:56,490
Montreal the location is in Montreal and

00:45:52,390 --> 00:45:59,109
their VIP the the thing to note is that

00:45:56,490 --> 00:46:01,180
you just have to make sure that any

00:45:59,109 --> 00:46:03,490
information you want to target off of

00:46:01,180 --> 00:46:06,010
you have to pass in as attributes to our

00:46:03,490 --> 00:46:09,160
SDK so that we can make the decision in

00:46:06,010 --> 00:46:12,420
memory without kind of going for other

00:46:09,160 --> 00:46:12,420
fetching other data

00:46:17,590 --> 00:46:20,610
yeah so

00:46:24,650 --> 00:46:30,770
yeah we would pass in a property

00:46:26,870 --> 00:46:33,920
user-agent get it from a request you

00:46:30,770 --> 00:46:36,110
know we we are you know thinking about

00:46:33,920 --> 00:46:40,010
how to make these SDKs better and easier

00:46:36,110 --> 00:46:41,840
so you know if if we find that it's it's

00:46:40,010 --> 00:46:45,290
there's a common attribute that

00:46:41,840 --> 00:46:48,610
everyone's targeting off of we can but

00:46:45,290 --> 00:46:48,610
this is the way to do it right now

00:46:50,270 --> 00:46:52,330
you

00:46:55,060 --> 00:46:57,120
you

00:47:24,800 --> 00:47:26,860
you

00:47:54,350 --> 00:47:56,410
you

00:48:11,109 --> 00:48:15,400
it's like whether they can edit things

00:48:13,210 --> 00:48:17,499
whatever they can just review things so

00:48:15,400 --> 00:48:20,849
that can be helpful to provide

00:48:17,499 --> 00:48:20,849
permissions around feature flags

00:48:25,840 --> 00:48:27,900
you

00:49:02,839 --> 00:49:09,349
yeah so I think there are different ways

00:49:05,299 --> 00:49:11,659
to do it one way we redid a site-wide

00:49:09,349 --> 00:49:13,429
redesign and we wanted to see what that

00:49:11,659 --> 00:49:14,869
redesign looked like and we kind of did

00:49:13,429 --> 00:49:17,179
the same thing I did with a query

00:49:14,869 --> 00:49:20,569
parameter of like if this query

00:49:17,179 --> 00:49:22,130
parameter is on yeah that being said if

00:49:20,569 --> 00:49:23,419
you don't want like a public query

00:49:22,130 --> 00:49:25,429
parameter maybe it's a query parameter

00:49:23,419 --> 00:49:26,719
that only applies if you're you know

00:49:25,429 --> 00:49:28,880
signed in with a certain level of

00:49:26,719 --> 00:49:33,109
permissions it's kind of you can control

00:49:28,880 --> 00:49:34,759
when these attributes get set and you

00:49:33,109 --> 00:49:37,609
can kind of control the mechanism by

00:49:34,759 --> 00:49:40,359
which when when that property is on or

00:49:37,609 --> 00:49:40,359
off does that make sense

00:49:46,270 --> 00:49:48,330
you

00:49:56,760 --> 00:50:00,859
question

00:49:58,799 --> 00:50:00,859
you

00:50:17,220 --> 00:50:26,640
yeah it's determined by the SDK so this

00:50:21,210 --> 00:50:30,599
user ID along the user ID is hashed into

00:50:26,640 --> 00:50:33,839
a range like 0 to 10,000 that maps to 0

00:50:30,599 --> 00:50:35,730
to 100% so where that hash ends up it

00:50:33,839 --> 00:50:37,920
determines whether it's not the feature

00:50:35,730 --> 00:50:41,839
is enabled and the attributes is more of

00:50:37,920 --> 00:50:41,839
like do they check all the boxes

00:50:45,740 --> 00:50:48,580
yeah

00:50:50,140 --> 00:50:52,200
you

00:50:52,730 --> 00:50:59,099
cool I think I'll wrap up and start

00:50:57,000 --> 00:51:00,420
closing things down but we are available

00:50:59,099 --> 00:51:03,990
around here if you want to ask any

00:51:00,420 --> 00:51:06,140
questions and yeah come find us thanks

00:51:03,990 --> 00:51:06,140
so much

00:51:07,490 --> 00:51:11,250

YouTube URL: https://www.youtube.com/watch?v=NXYUezhq2dk


