Title: Promises API in Node.js Core: Part "Do", the Update! - Joe Sepi, IBM
Publication date: 2020-05-11
Playlist: Node + JS Interactive 2019
Description: 
	Promises API in Node.js Core: Part "Do", the Update! - Joe Sepi, IBM
Speakers: Joe Sepi
Currently (Jun 1, 2019) there are only a handful of 'promisified' Node.js core APIs. But the great news is that there has been momentum building in tackling this effort and by the time of Node+JS Interactive, I expect that we will have made a lot of progress. I'd like to share with you all an update on: Where we are? What else needs to be done? And if more is needed, how can you help?
Captions: 
	00:00:00,210 --> 00:00:06,310
alright get things started

00:00:03,010 --> 00:00:08,769
ah good morning Bonjour you saw my

00:00:06,310 --> 00:00:13,530
keynote you know that my French it's not

00:00:08,769 --> 00:00:15,490
so good so I will keep it to a minimum

00:00:13,530 --> 00:00:18,849
merci thanks for coming

00:00:15,490 --> 00:00:22,410
this this this early in the morning to

00:00:18,849 --> 00:00:24,460
hear about promises in node core I

00:00:22,410 --> 00:00:26,110
haven't had the chance to have breakfast

00:00:24,460 --> 00:00:31,510
yet so I hope that's you all are doing

00:00:26,110 --> 00:00:34,420
all right and prepared to dive in I'll

00:00:31,510 --> 00:00:37,600
start off by saying happy birthday to

00:00:34,420 --> 00:00:43,890
note again this is ten years node was

00:00:37,600 --> 00:00:48,149
announced in 2009 excuse me

00:00:43,890 --> 00:00:54,449
Ryan Dahl talked about it at Jay s Kampf

00:00:48,149 --> 00:00:58,140
EU in 2009 it was pretty exciting I

00:00:54,449 --> 00:00:59,910
remember that those days if somebody can

00:00:58,140 --> 00:01:01,559
decipher that for me I think it says

00:00:59,910 --> 00:01:06,390
happy birthday or something along the

00:01:01,559 --> 00:01:08,229
lines you know I might take a while so

00:01:06,390 --> 00:01:12,729
we'll move on

00:01:08,229 --> 00:01:15,939
so yeah I'm here to talk to you about a

00:01:12,729 --> 00:01:19,380
core API is in node and what state

00:01:15,939 --> 00:01:22,710
they're in in terms of being Venable

00:01:19,380 --> 00:01:22,710
promised a fide

00:01:23,260 --> 00:01:29,240
so you can't have

00:01:26,060 --> 00:01:32,479
Merson online or in person about

00:01:29,240 --> 00:01:35,450
promises without puns but I'm going to

00:01:32,479 --> 00:01:38,090
do my best here to keep thumbs puns to

00:01:35,450 --> 00:01:41,960
an absolute minimum I realize that is a

00:01:38,090 --> 00:01:43,450
pun so let's let's mark it zero start

00:01:41,960 --> 00:01:45,430
from there

00:01:43,450 --> 00:01:48,130
I know some of you folks out there but

00:01:45,430 --> 00:01:53,530
for the people who I don't know my name

00:01:48,130 --> 00:02:00,479
is Joe sepi I am an open source engineer

00:01:53,530 --> 00:02:03,700
at a little startup called IBM and by

00:02:00,479 --> 00:02:05,020
weave as you can tell by the photo iBM

00:02:03,700 --> 00:02:09,280
has been around for a little bit of a

00:02:05,020 --> 00:02:13,000
while over a hundred years which always

00:02:09,280 --> 00:02:16,420
kind of shocks me when I realized that

00:02:13,000 --> 00:02:18,989
remember that you know Apple and

00:02:16,420 --> 00:02:26,080
Microsoft or what the 80s or something

00:02:18,989 --> 00:02:28,239
and we we were 1911 iBM has nothing to

00:02:26,080 --> 00:02:32,200
do with how people notice that it's one

00:02:28,239 --> 00:02:34,480
letter off IBM HAL that was just a

00:02:32,200 --> 00:02:39,940
coincidence just setting the record

00:02:34,480 --> 00:02:41,950
straight here so yeah anyway I wanted to

00:02:39,940 --> 00:02:43,709
bring my family cuz Montreal is awesome

00:02:41,950 --> 00:02:45,970
but they couldn't make it

00:02:43,709 --> 00:02:48,970
I'm just kidding that's not my family

00:02:45,970 --> 00:02:51,609
that's that's my family I'm just kidding

00:02:48,970 --> 00:02:54,970
that's my band I play in a couple of

00:02:51,609 --> 00:02:57,640
bands that's that's my punk band that's

00:02:54,970 --> 00:02:59,109
my improv metal band these are actually

00:02:57,640 --> 00:02:59,500
friends of mine and a band called Built

00:02:59,109 --> 00:03:01,870
to Spill

00:02:59,500 --> 00:03:03,640
that's not sam roberts down in the

00:03:01,870 --> 00:03:04,989
corner that's the drummer of built a

00:03:03,640 --> 00:03:09,790
spill but kind of looks a little bit

00:03:04,989 --> 00:03:12,340
like i'm right Sam's a node core

00:03:09,790 --> 00:03:15,220
collaborator so yeah

00:03:12,340 --> 00:03:17,140
I was also in a misfits cover band so I

00:03:15,220 --> 00:03:18,489
thought I'd wear my shirt today I

00:03:17,140 --> 00:03:19,750
realized when I was going through my

00:03:18,489 --> 00:03:23,950
slides that I actually brought this

00:03:19,750 --> 00:03:25,260
shirt with me so if you're into misfits

00:03:23,950 --> 00:03:28,150
come talk to me later

00:03:25,260 --> 00:03:31,209
speaking of talking to me later Oh wrong

00:03:28,150 --> 00:03:34,480
slide if there's that one's from Jaws

00:03:31,209 --> 00:03:38,620
confit you there if there's karaoke

00:03:34,480 --> 00:03:42,489
tonight definitely give me a holler it's

00:03:38,620 --> 00:03:46,930
it's it's kind of a tradition okay so

00:03:42,489 --> 00:03:48,549
enough of my digressions actually maybe

00:03:46,930 --> 00:03:51,040
this is kind of a little bit more of

00:03:48,549 --> 00:03:55,200
digressing as well so my personal

00:03:51,040 --> 00:03:55,200
context with with promises is

00:03:55,700 --> 00:04:03,110
when I used to work the New York Times a

00:03:58,040 --> 00:04:05,690
while ago back in 2012 I started doing a

00:04:03,110 --> 00:04:08,090
weekly JavaScript Lunch and Learn it was

00:04:05,690 --> 00:04:10,250
internal every Thursday we get together

00:04:08,090 --> 00:04:12,800
at noon and bring our lunches in a

00:04:10,250 --> 00:04:14,690
meeting room and usually be like 10 to

00:04:12,800 --> 00:04:18,260
20 people there that actually I did it

00:04:14,690 --> 00:04:22,190
weekly for over a year and only missed a

00:04:18,260 --> 00:04:24,230
couple of weeks and it was largely the

00:04:22,190 --> 00:04:27,320
the presenters were largely internal

00:04:24,230 --> 00:04:29,330
folks at the New York Times and it was a

00:04:27,320 --> 00:04:31,700
lot of fun so I suggest if you you know

00:04:29,330 --> 00:04:33,470
have a company that that you're able to

00:04:31,700 --> 00:04:36,670
do that it's it's a great way to get

00:04:33,470 --> 00:04:39,110
people together and and talk about tech

00:04:36,670 --> 00:04:41,900
we did have a couple of external folks

00:04:39,110 --> 00:04:44,030
come in we had Tom Hughes croucher came

00:04:41,900 --> 00:04:48,260
and and chatted with us

00:04:44,030 --> 00:04:51,290
Rebecca Murphy spike bream and Dominic D

00:04:48,260 --> 00:04:53,030
Nicola so Tom came and talked about

00:04:51,290 --> 00:04:56,660
sockets and streams and again this is in

00:04:53,030 --> 00:05:00,169
2012 so this is tom toms one of the

00:04:56,660 --> 00:05:02,390
original node collaborators in the early

00:05:00,169 --> 00:05:03,860
days so he came and talked to us about

00:05:02,390 --> 00:05:07,070
sockets and streams which was pretty

00:05:03,860 --> 00:05:08,630
exciting and Rebecca came and talked to

00:05:07,070 --> 00:05:10,940
us about a bunch of things including the

00:05:08,630 --> 00:05:15,770
a query has anybody here ever even heard

00:05:10,940 --> 00:05:18,950
of e a query no that's amazing so I

00:05:15,770 --> 00:05:19,790
recommend you google Y a query that's

00:05:18,950 --> 00:05:22,700
Paul Irish

00:05:19,790 --> 00:05:26,690
Rebecca Murphy Adam Sonntag and Alex

00:05:22,700 --> 00:05:28,430
Sexton they did a podcast on jQuery and

00:05:26,690 --> 00:05:30,800
and other related JavaScript

00:05:28,430 --> 00:05:34,370
technologies a while ago but it was a

00:05:30,800 --> 00:05:37,250
lot of fun spike came and talked to us

00:05:34,370 --> 00:05:39,979
about render which was and a way to

00:05:37,250 --> 00:05:43,400
build isomorphic JavaScript applications

00:05:39,979 --> 00:05:44,960
using backbone and node and it was

00:05:43,400 --> 00:05:47,000
pretty exciting at the time again this

00:05:44,960 --> 00:05:48,860
is 2012 Myles was talking about

00:05:47,000 --> 00:05:51,770
universal JavaScript yesterday morning

00:05:48,860 --> 00:05:53,510
and I think the joke was that he was

00:05:51,770 --> 00:05:56,270
like bringing back ten years ago or

00:05:53,510 --> 00:05:58,130
something and I really related to that

00:05:56,270 --> 00:06:02,090
because of you know these conversations

00:05:58,130 --> 00:06:04,910
were having them and Dominic was working

00:06:02,090 --> 00:06:07,970
on the promises a plus spec at the time

00:06:04,910 --> 00:06:12,010
which was the you know is the the the

00:06:07,970 --> 00:06:15,200
spec for how to implement promises and

00:06:12,010 --> 00:06:19,430
so it was it was it was pretty exciting

00:06:15,200 --> 00:06:22,370
times I even wrote on the New York Times

00:06:19,430 --> 00:06:24,169
website about Dominic coming in and

00:06:22,370 --> 00:06:27,099
talking to us and about the problems of

00:06:24,169 --> 00:06:29,990
the async nightmares the callback hell

00:06:27,099 --> 00:06:33,440
so I actually am a published New York

00:06:29,990 --> 00:06:36,860
Times writer that's all my resume not

00:06:33,440 --> 00:06:39,860
really so yeah we were we were fighting

00:06:36,860 --> 00:06:42,620
callback hell back then still still are

00:06:39,860 --> 00:06:45,380
sometimes and then I went and worked at

00:06:42,620 --> 00:06:48,500
Behance which was acquired by Adobe

00:06:45,380 --> 00:06:51,470
that's a Frankie the dog he looks cute

00:06:48,500 --> 00:06:55,310
but he's really serious about business

00:06:51,470 --> 00:06:56,780
you can tell by the tie Christian looks

00:06:55,310 --> 00:06:59,560
crazy but he's also serious about

00:06:56,780 --> 00:07:03,530
business but when I got to be ants

00:06:59,560 --> 00:07:05,950
everything was promised if I'd and that

00:07:03,530 --> 00:07:08,290
was kind of new for me like

00:07:05,950 --> 00:07:09,610
all in whole-hog everything we were

00:07:08,290 --> 00:07:13,990
writing was you know just about

00:07:09,610 --> 00:07:16,300
everything was what was Venable and so I

00:07:13,990 --> 00:07:20,260
had to you know really ramped up and and

00:07:16,300 --> 00:07:22,780
and and it was kind of like a mind shift

00:07:20,260 --> 00:07:24,450
you know but again this was this was a

00:07:22,780 --> 00:07:28,090
while ago

00:07:24,450 --> 00:07:32,290
recently Ryan went back to Jay s confit

00:07:28,090 --> 00:07:34,330
you last year and had this real click

00:07:32,290 --> 00:07:37,150
Beatty talked 10 things I regret about

00:07:34,330 --> 00:07:39,730
nodejs which was his way of introducing

00:07:37,150 --> 00:07:41,170
Dino but he brought up a lot of good

00:07:39,730 --> 00:07:45,390
points things that he had learned from

00:07:41,170 --> 00:07:48,490
from writing node and one of them was

00:07:45,390 --> 00:07:50,530
regretting taking promises out of node

00:07:48,490 --> 00:07:53,110
in the early days as you can see up

00:07:50,530 --> 00:07:56,320
there he says I added promises to note

00:07:53,110 --> 00:07:59,910
in June 2009 but foolishly removed them

00:07:56,320 --> 00:07:59,910
in February 2010

00:08:00,069 --> 00:08:04,960
he does go on to say that's perhaps

00:08:03,069 --> 00:08:08,289
moving removing them was a good idea

00:08:04,960 --> 00:08:10,629
because it allowed the community to work

00:08:08,289 --> 00:08:14,159
on the problem and flesh out something

00:08:10,629 --> 00:08:17,199
that worked better for for the community

00:08:14,159 --> 00:08:19,930
there are a number of libraries that

00:08:17,199 --> 00:08:22,949
would implement promises in different

00:08:19,930 --> 00:08:25,479
ways and and it kind of helped inform

00:08:22,949 --> 00:08:29,319
you know where where we ended up landing

00:08:25,479 --> 00:08:33,519
and where we are today but he also says

00:08:29,319 --> 00:08:36,849
nodes many async api's are ageing badly

00:08:33,519 --> 00:08:38,950
because of this and I'm not sure if this

00:08:36,849 --> 00:08:42,430
was I assumed this was out of the the

00:08:38,950 --> 00:08:45,519
talk but there was a bit of Twitter

00:08:42,430 --> 00:08:47,440
conversation going on after that you

00:08:45,519 --> 00:08:50,019
know lolly node.js core modules for

00:08:47,440 --> 00:08:53,589
still using the callback pattern there

00:08:50,019 --> 00:08:56,140
are lots of laws there but as usual

00:08:53,589 --> 00:08:58,240
miles comes to the rescue and points out

00:08:56,140 --> 00:09:02,380
that a couple of the core api's are

00:08:58,240 --> 00:09:05,490
actually promised a fied including in

00:09:02,380 --> 00:09:07,550
this example FS

00:09:05,490 --> 00:09:07,550
you

00:09:08,250 --> 00:09:14,880
and people were like huh what so he

00:09:12,120 --> 00:09:18,090
points out that FS and bns have an

00:09:14,880 --> 00:09:19,950
experimental promise API I don't think

00:09:18,090 --> 00:09:22,890
that's this was a little over a year ago

00:09:19,950 --> 00:09:27,870
so that's not that's that's fully in

00:09:22,890 --> 00:09:29,580
there and then of course you can see in

00:09:27,870 --> 00:09:32,610
the bottom there that the puns are

00:09:29,580 --> 00:09:37,920
raging you can't get away from them when

00:09:32,610 --> 00:09:40,620
you're talking about promises and then

00:09:37,920 --> 00:09:45,330
you know Sam points out that we have

00:09:40,620 --> 00:09:52,290
this promise of Phi utility that you can

00:09:45,330 --> 00:09:54,750
use to to wrap api's in you know then

00:09:52,290 --> 00:09:56,550
able if if it's possible it's not

00:09:54,750 --> 00:09:58,380
wouldn't recommend doing it on all of

00:09:56,550 --> 00:10:02,040
them

00:09:58,380 --> 00:10:04,860
so I was talking to Matteo about this a

00:10:02,040 --> 00:10:06,690
few months ago I didn't describe it this

00:10:04,860 --> 00:10:08,430
way that it's an insanely hard problem

00:10:06,690 --> 00:10:11,010
that's been there forever and that we've

00:10:08,430 --> 00:10:13,730
never been able to actually solve like

00:10:11,010 --> 00:10:16,620
fully solved we're working on it but

00:10:13,730 --> 00:10:20,970
it's taking time so the big problem is

00:10:16,620 --> 00:10:22,490
promises was designed for browsers the

00:10:20,970 --> 00:10:25,890
spec was designed for browsers and

00:10:22,490 --> 00:10:27,990
failing if you have a failing promise it

00:10:25,890 --> 00:10:32,580
only affects one person right you know

00:10:27,990 --> 00:10:35,190
in a browser you're unhandled rejection

00:10:32,580 --> 00:10:37,830
crashes your browser and you know it's

00:10:35,190 --> 00:10:41,070
just one person it's not a whole a whole

00:10:37,830 --> 00:10:42,690
web app so if if you have a failing

00:10:41,070 --> 00:10:45,360
promise a node it takes down the whole

00:10:42,690 --> 00:10:48,120
server and so that affects a lot more

00:10:45,360 --> 00:10:50,150
than one person and they're there their

00:10:48,120 --> 00:10:53,960
browser tab

00:10:50,150 --> 00:10:57,200
so if we look at an example of how this

00:10:53,960 --> 00:11:00,590
can happen we have a promise set up here

00:10:57,200 --> 00:11:04,010
and it's immediately immediately

00:11:00,590 --> 00:11:06,710
resolves but there's some JavaScript

00:11:04,010 --> 00:11:10,730
happening after that and we may never

00:11:06,710 --> 00:11:13,550
know you know if stuff fails in in some

00:11:10,730 --> 00:11:15,850
function call or what we don't really

00:11:13,550 --> 00:11:18,759
have access to that

00:11:15,850 --> 00:11:20,829
and in this example to the program ends

00:11:18,759 --> 00:11:22,959
and we have no way to get the the

00:11:20,829 --> 00:11:24,970
promises that have never settled so

00:11:22,959 --> 00:11:27,490
there are a couple of challenges there

00:11:24,970 --> 00:11:30,430
that really creates essentially a

00:11:27,490 --> 00:11:32,470
debugging nightmare there's been some

00:11:30,430 --> 00:11:35,529
progress so zero cost async stack traces

00:11:32,470 --> 00:11:39,130
shipped a little while ago in no.12 and

00:11:35,529 --> 00:11:42,399
that that's helpful and one of the big

00:11:39,130 --> 00:11:45,440
problems that were trying to work on is

00:11:42,399 --> 00:11:48,790
how to promise event emitters

00:11:45,440 --> 00:11:51,710
so promises are settled only once and

00:11:48,790 --> 00:11:57,320
event emitters give multiple responses

00:11:51,710 --> 00:12:02,200
and HTTP and net both use event emitter

00:11:57,320 --> 00:12:02,200
so that is kind of a big problem

00:12:02,490 --> 00:12:06,630
is events that once is done you know

00:12:04,830 --> 00:12:09,779
that that only you only get one response

00:12:06,630 --> 00:12:12,870
from that so you're good you can make

00:12:09,779 --> 00:12:17,149
that promise a bowl and events that on

00:12:12,870 --> 00:12:21,720
needs and a sink or iterator which as

00:12:17,149 --> 00:12:23,940
James points out here it's now possible

00:12:21,720 --> 00:12:26,510
to consume no Jess event emitter events

00:12:23,940 --> 00:12:29,520
using a sink iterators now if you saw

00:12:26,510 --> 00:12:31,800
milestone op mile some Mateos talk

00:12:29,520 --> 00:12:34,200
yesterday there are still some problems

00:12:31,800 --> 00:12:37,589
with with that that's we're working on

00:12:34,200 --> 00:12:39,860
but it is possible if you take the right

00:12:37,589 --> 00:12:39,860
steps

00:12:40,170 --> 00:12:45,750
think and off those chains or not but

00:12:42,389 --> 00:12:47,370
somebody was warning me about having

00:12:45,750 --> 00:12:48,450
these conversations and getting stuck

00:12:47,370 --> 00:12:50,670
down the rabbit hole of micro

00:12:48,450 --> 00:12:53,970
performance so I'm gonna skip this slide

00:12:50,670 --> 00:12:55,860
I guess that the point is don't don't

00:12:53,970 --> 00:12:57,990
obsess about micro performance if you're

00:12:55,860 --> 00:13:01,320
if you're looking to solve a larger

00:12:57,990 --> 00:13:05,060
problem so good news everyone

00:13:01,320 --> 00:13:06,829
let baguette things are getting better

00:13:05,060 --> 00:13:10,380
right

00:13:06,829 --> 00:13:12,180
some api's are already done as Myles

00:13:10,380 --> 00:13:14,760
pointed out earlier there's been some

00:13:12,180 --> 00:13:18,560
other work that's been happening some

00:13:14,760 --> 00:13:24,110
PRS are already opened there's progress

00:13:18,560 --> 00:13:27,690
things are happening in fact we met in

00:13:24,110 --> 00:13:29,910
Berlin at Jay s confit you the last one

00:13:27,690 --> 00:13:32,420
unfortunately for now it's the really

00:13:29,910 --> 00:13:32,420
the last one

00:13:34,670 --> 00:13:41,300
the collaborator summit after the event

00:13:36,820 --> 00:13:44,390
and we had a really great session on

00:13:41,300 --> 00:13:46,700
promises there's a lot of folks there

00:13:44,390 --> 00:13:48,320
and a lot of people interested and a lot

00:13:46,700 --> 00:13:52,880
of people raising hands for things that

00:13:48,320 --> 00:13:54,290
we're trying to get done and you know

00:13:52,880 --> 00:13:56,420
one of the discussions was default

00:13:54,290 --> 00:13:59,270
behavior from for unhandled rejections

00:13:56,420 --> 00:14:00,680
in nodejs which is you know a

00:13:59,270 --> 00:14:04,040
complicated topic

00:14:00,680 --> 00:14:05,240
that there was a survey going around and

00:14:04,040 --> 00:14:08,960
trying to figure out what's the best way

00:14:05,240 --> 00:14:11,540
to approach that we took some time to go

00:14:08,960 --> 00:14:14,540
through the core api's and and figure

00:14:11,540 --> 00:14:18,320
out what the status is for for for each

00:14:14,540 --> 00:14:21,200
of them I think that this spreadsheet is

00:14:18,320 --> 00:14:23,840
online somewhere and I think to go

00:14:21,200 --> 00:14:28,330
update it but like I said there's

00:14:23,840 --> 00:14:31,480
movement so there is matéo closed a PR

00:14:28,330 --> 00:14:36,290
not too long ago and this is around

00:14:31,480 --> 00:14:38,390
emitter and the hope is that some work

00:14:36,290 --> 00:14:42,190
that's going on at tc39 will will help

00:14:38,390 --> 00:14:44,510
with some of this and and again I think

00:14:42,190 --> 00:14:46,040
Mateos talk was yesterday so he talked a

00:14:44,510 --> 00:14:48,500
little bit about that if you get a

00:14:46,040 --> 00:14:52,210
chance to see the replay if you didn't

00:14:48,500 --> 00:14:56,540
see it yesterday that's a good talk and

00:14:52,210 --> 00:14:59,540
then again Matteo who who is the

00:14:56,540 --> 00:15:01,610
maintainer of streams so he's like

00:14:59,540 --> 00:15:06,950
really focused on a vent emitter and and

00:15:01,610 --> 00:15:08,900
this this work he landed a change nine

00:15:06,950 --> 00:15:12,410
days ago so it's actually not in a

00:15:08,900 --> 00:15:17,720
release yet but he landed a way to

00:15:12,410 --> 00:15:19,760
capture rejections for async handlers so

00:15:17,720 --> 00:15:22,220
this is really new right so I just

00:15:19,760 --> 00:15:25,580
thought I'd grab some some context from

00:15:22,220 --> 00:15:26,930
from the github well I say this is

00:15:25,580 --> 00:15:29,660
really new but he actually opened this

00:15:26,930 --> 00:15:31,550
PR as you can see and in May it had been

00:15:29,660 --> 00:15:33,740
around a while and there were lots of

00:15:31,550 --> 00:15:37,130
comments and updates and tweaks and

00:15:33,740 --> 00:15:39,950
stuff but it landed about a week ago so

00:15:37,130 --> 00:15:41,300
as he says here one of the biggest

00:15:39,950 --> 00:15:43,070
source of issues with unhandled

00:15:41,300 --> 00:15:46,060
rejection is the use of a vent emitter

00:15:43,070 --> 00:15:48,820
in combination with async functions

00:15:46,060 --> 00:15:50,620
and currently there's no safe way to to

00:15:48,820 --> 00:15:52,840
catch a rejection when it is submitted

00:15:50,620 --> 00:15:55,090
with an event handler causing hard to

00:15:52,840 --> 00:15:57,190
track bugs and memory leaks the basic

00:15:55,090 --> 00:16:00,520
practice right now is to wrap stuff in a

00:15:57,190 --> 00:16:02,680
try-catch and handle errors that way but

00:16:00,520 --> 00:16:08,680
you know that's problematic for a number

00:16:02,680 --> 00:16:10,150
of reasons so as he in landing this

00:16:08,680 --> 00:16:12,970
there are some updates to the docks as

00:16:10,150 --> 00:16:14,350
well and as he says here using async

00:16:12,970 --> 00:16:15,490
functions with event handlers is

00:16:14,350 --> 00:16:17,650
problematic because it can lead to

00:16:15,490 --> 00:16:19,600
unhandled rejection in a case of a throw

00:16:17,650 --> 00:16:22,110
and exception so this is similar to you

00:16:19,600 --> 00:16:24,970
know what we're looking at before where

00:16:22,110 --> 00:16:29,140
you know we things get swallowed up and

00:16:24,970 --> 00:16:33,190
you have no idea what had happened so

00:16:29,140 --> 00:16:35,620
this PR adds a flag to capture

00:16:33,190 --> 00:16:37,780
rejections an option for event emitter

00:16:35,620 --> 00:16:41,410
constructor and you can also set a

00:16:37,780 --> 00:16:44,320
global setting for a file to set it as

00:16:41,410 --> 00:16:46,750
well and then in doing that under the

00:16:44,320 --> 00:16:51,280
hood when the promise is created a dot

00:16:46,750 --> 00:16:55,420
then is hand is added to it to to be

00:16:51,280 --> 00:17:00,750
able to handle rejections and and

00:16:55,420 --> 00:17:02,150
surface them so that is good news right

00:17:00,750 --> 00:17:04,460
so like I

00:17:02,150 --> 00:17:06,490
there's movements I wanted to use this

00:17:04,460 --> 00:17:08,720
talk as a little bit of a call to action

00:17:06,490 --> 00:17:10,960
obviously if you're sitting here at 9:00

00:17:08,720 --> 00:17:15,980
a.m. then you're interested at in

00:17:10,960 --> 00:17:18,290
promises in node core so I want to point

00:17:15,980 --> 00:17:21,650
out that it is a strategic initiative at

00:17:18,290 --> 00:17:23,390
the TSC is actually a two year old

00:17:21,650 --> 00:17:26,450
strategic initiative but like I said

00:17:23,390 --> 00:17:28,460
there's there's been progress you know

00:17:26,450 --> 00:17:31,280
this this is not an easy problem to

00:17:28,460 --> 00:17:33,290
solve in in some of the areas where

00:17:31,280 --> 00:17:40,310
we're you know it would be most useful

00:17:33,290 --> 00:17:44,390
like like HTTP and DNS yeah and like I

00:17:40,310 --> 00:17:48,650
said we've got we're trying to manage

00:17:44,390 --> 00:17:50,960
the the the effort and so there are lots

00:17:48,650 --> 00:17:54,110
of places where people can get involved

00:17:50,960 --> 00:17:56,930
and start helping with it in fact I have

00:17:54,110 --> 00:18:00,860
a PR that I've been threatening to to

00:17:56,930 --> 00:18:04,370
submit for a while now to promise if I

00:18:00,860 --> 00:18:07,360
the crypto api's unfortunately I bought

00:18:04,370 --> 00:18:09,380
a house right around J's coffee you and

00:18:07,360 --> 00:18:13,970
will this actually play I don't know

00:18:09,380 --> 00:18:15,800
yeah well that's a bear in our yard and

00:18:13,970 --> 00:18:21,620
I haven't sold the old house yet so I'm

00:18:15,800 --> 00:18:24,560
like crazy busy but I have a new year's

00:18:21,620 --> 00:18:29,270
resolution to get back to promises so in

00:18:24,560 --> 00:18:31,190
January I'm gonna be back on the case we

00:18:29,270 --> 00:18:34,010
also have collaborator summits starting

00:18:31,190 --> 00:18:35,600
tomorrow so if anybody is gonna still be

00:18:34,010 --> 00:18:37,820
around please come and hang out we're

00:18:35,600 --> 00:18:41,450
gonna talk about promises in a number of

00:18:37,820 --> 00:18:46,010
contexts on Friday we have stream

00:18:41,450 --> 00:18:48,820
support for promises and the discussion

00:18:46,010 --> 00:18:51,910
on streams on Saturday as well which

00:18:48,820 --> 00:18:55,490
promises will will be a part of I'm sure

00:18:51,910 --> 00:18:57,560
I also want to call out actually think I

00:18:55,490 --> 00:18:59,320
have a slide later on but it makes sense

00:18:57,560 --> 00:19:02,420
here

00:18:59,320 --> 00:19:04,820
James Snell has a talk after me so stick

00:19:02,420 --> 00:19:08,390
around and that's about using promises

00:19:04,820 --> 00:19:11,330
and and some tooling to to help you with

00:19:08,390 --> 00:19:13,940
using those and surfacing challenges

00:19:11,330 --> 00:19:16,310
with promises but generally speaking you

00:19:13,940 --> 00:19:18,350
know come and talk with us and

00:19:16,310 --> 00:19:20,560
if you're interested we'd be happy to

00:19:18,350 --> 00:19:24,440
have you helping out on this problem

00:19:20,560 --> 00:19:26,510
because with your help I can promise you

00:19:24,440 --> 00:19:31,000
we will resolve this okay one that was

00:19:26,510 --> 00:19:35,720
just one punt at the end so yeah thanks

00:19:31,000 --> 00:19:35,720

YouTube URL: https://www.youtube.com/watch?v=nkoxZDqTxVU


