Title: Oh No! The Robots Have Taken Over! - Christopher Wilcox, Google
Publication date: 2020-05-11
Playlist: Node + JS Interactive 2019
Description: 
	Oh No! The Robots Have Taken Over! - Christopher Wilcox, Google
Speakers: Christopher Wilcox
As part of his work, Chris and his team at Google are responsible for managing libraries for 150 APIs across 7 languages. This results in a crushing amount of toil, making it hard at times to both make forward progress and maintain what has been created.

When you own over 70 node repositories you have to get creative. So the team decided to make an army of sorts. An army of screaming, free roaming robots.

Bots can have a freeing effect on your engineering team. Come to hear how embracing automation has let a team of engineers do what they do best and let the toil fall to the machines.
Captions: 
	00:00:00,000 --> 00:00:04,440
all right I think we can get started

00:00:02,210 --> 00:00:06,930
thanks everyone for showing up for the

00:00:04,440 --> 00:00:08,970
last talk of the day I expected it to be

00:00:06,930 --> 00:00:13,259
half empty in here and everyone to be

00:00:08,970 --> 00:00:14,509
tired so thanks for still coming so if

00:00:13,259 --> 00:00:17,490
your career in software development

00:00:14,509 --> 00:00:19,439
resembles mine in any way at all you've

00:00:17,490 --> 00:00:22,410
probably found one thing to be constant

00:00:19,439 --> 00:00:24,990
over everything else there's always more

00:00:22,410 --> 00:00:26,160
work to do no matter how much you try no

00:00:24,990 --> 00:00:28,019
matter how long you work there's always

00:00:26,160 --> 00:00:32,579
something else you can do today tomorrow

00:00:28,019 --> 00:00:34,710
next week and for me like I said this

00:00:32,579 --> 00:00:36,510
has definitely been the case I work on

00:00:34,710 --> 00:00:39,239
the Google cloud client libraries team

00:00:36,510 --> 00:00:41,579
and we maintain hundreds of different

00:00:39,239 --> 00:00:43,620
packages and to make this problem worse

00:00:41,579 --> 00:00:46,890
they aren't even all node packages we

00:00:43,620 --> 00:00:48,960
maintain eight different languages now

00:00:46,890 --> 00:00:51,719
luckily no one on the team is expected

00:00:48,960 --> 00:00:53,520
to know all eight of these languages but

00:00:51,719 --> 00:00:55,410
almost all of us know more than one and

00:00:53,520 --> 00:00:57,510
we still have to maintain all of these

00:00:55,410 --> 00:00:59,940
things so that only helps the problem a

00:00:57,510 --> 00:01:03,210
little bit and what we started to

00:00:59,940 --> 00:01:11,000
realize is that we needed help and

00:01:03,210 --> 00:01:14,700
that's when the bots came to save us and

00:01:11,000 --> 00:01:17,070
I say the bots came to save us but I'm

00:01:14,700 --> 00:01:18,869
obviously speaking poetically they

00:01:17,070 --> 00:01:20,340
didn't come to save us and our bots

00:01:18,869 --> 00:01:22,200
aren't all that smart so I wouldn't

00:01:20,340 --> 00:01:25,080
expect them to be our saviors I mean

00:01:22,200 --> 00:01:26,850
they're helpful but they tend to be good

00:01:25,080 --> 00:01:29,579
at just doing a single thing very well

00:01:26,850 --> 00:01:33,090
and before we get further into this talk

00:01:29,579 --> 00:01:34,829
I wanted to discuss what is a bot what

00:01:33,090 --> 00:01:39,090
does that mean in the terms of software

00:01:34,829 --> 00:01:41,759
development when I think about robots I

00:01:39,090 --> 00:01:44,340
immediately think of an automotive

00:01:41,759 --> 00:01:46,770
assembly line in these big arms that

00:01:44,340 --> 00:01:49,229
replace the job of humans from decades

00:01:46,770 --> 00:01:51,479
before but we really don't mean this

00:01:49,229 --> 00:01:52,829
when we say BOTS in technology we're not

00:01:51,479 --> 00:01:56,729
usually talking about a physical robot

00:01:52,829 --> 00:01:59,790
of of any kind and we're not even

00:01:56,729 --> 00:02:02,399
talking about a robots.txt robots that

00:01:59,790 --> 00:02:03,960
txt czar crawled by web crawlers and are

00:02:02,399 --> 00:02:05,729
fairly similar to the bots were

00:02:03,960 --> 00:02:08,390
referring to but they're a little

00:02:05,729 --> 00:02:08,390
different as well

00:02:08,479 --> 00:02:13,750
what I usually mean when I say the word

00:02:10,909 --> 00:02:17,390
BOTS is something that resembles this I

00:02:13,750 --> 00:02:20,420
mean a script that runs as a result of

00:02:17,390 --> 00:02:23,420
an action a trigger from something

00:02:20,420 --> 00:02:26,299
external that might be a timer that

00:02:23,420 --> 00:02:31,180
might be a pull request and as a

00:02:26,299 --> 00:02:31,180
response to this event some code runs

00:02:32,560 --> 00:02:37,250
bots aren't good at all things of course

00:02:34,940 --> 00:02:39,799
as I said they're usually good at

00:02:37,250 --> 00:02:42,379
repetitive work things that are scoped

00:02:39,799 --> 00:02:45,590
one single thing but they're very good

00:02:42,379 --> 00:02:46,370
at that one thing particularly they're

00:02:45,590 --> 00:02:49,640
good at things that don't require

00:02:46,370 --> 00:02:51,019
intuition or any sort of debugging so

00:02:49,640 --> 00:02:54,700
the sort of action that can be blindly

00:02:51,019 --> 00:02:57,859
followed with this strict process and

00:02:54,700 --> 00:02:59,750
this isn't necessarily a bad thing these

00:02:57,859 --> 00:03:02,390
it turns out humans are really bad at

00:02:59,750 --> 00:03:04,519
being robots multiple studies show that

00:03:02,390 --> 00:03:07,190
when humans and the counter repeated

00:03:04,519 --> 00:03:09,859
processes we fatigue we make mistakes we

00:03:07,190 --> 00:03:10,879
miss steps and so it's good if we can

00:03:09,859 --> 00:03:15,889
use something that's good at following

00:03:10,879 --> 00:03:17,299
rote rules instead of ourselves I think

00:03:15,889 --> 00:03:19,220
it should be our goal to eliminate it as

00:03:17,299 --> 00:03:20,450
many of those sorts of tasks as possible

00:03:19,220 --> 00:03:22,880
so we can focus on the work that

00:03:20,450 --> 00:03:26,030
requires human intuition and generally

00:03:22,880 --> 00:03:28,099
brings joy to developers and while most

00:03:26,030 --> 00:03:29,269
of us use BOTS I think it's true that

00:03:28,099 --> 00:03:31,310
the majority of software developers

00:03:29,269 --> 00:03:33,319
haven't written a bot and with any hope

00:03:31,310 --> 00:03:36,579
by the end of this talk they'll a lot of

00:03:33,319 --> 00:03:39,319
the mystery around that will be removed

00:03:36,579 --> 00:03:42,410
so to frame this I want to talk a bit

00:03:39,319 --> 00:03:44,959
about levels of automation the SAE

00:03:42,410 --> 00:03:47,180
society of automotive engineers has a

00:03:44,959 --> 00:03:49,010
standard for self-driving cars where

00:03:47,180 --> 00:03:51,079
they separate the levels that they are

00:03:49,010 --> 00:03:54,440
automated the the amount the system does

00:03:51,079 --> 00:03:55,549
work so they separate those out so we

00:03:54,440 --> 00:03:58,120
can have an understanding of the

00:03:55,549 --> 00:04:00,590
advancement and a sort of risk involved

00:03:58,120 --> 00:04:01,819
this all of us sort of understand things

00:04:00,590 --> 00:04:03,139
and it will allow us to start with

00:04:01,819 --> 00:04:06,560
simpler BOTS and get to more complex

00:04:03,139 --> 00:04:09,199
ones as I talk so this is the chart they

00:04:06,560 --> 00:04:11,540
use I'm not going to try to describe it

00:04:09,199 --> 00:04:13,190
exactly but at level zero it's your

00:04:11,540 --> 00:04:14,959
typical car the ones that have been

00:04:13,190 --> 00:04:17,269
around forever the human being does

00:04:14,959 --> 00:04:19,729
everything eventually you get to level

00:04:17,269 --> 00:04:21,829
five where the machine does everything

00:04:19,729 --> 00:04:24,319
in theory you don't

00:04:21,829 --> 00:04:26,449
human being it is entirely unscoped

00:04:24,319 --> 00:04:28,900
meaning it doesn't just have a list of

00:04:26,449 --> 00:04:32,240
tasks it can do it can do infinite tasks

00:04:28,900 --> 00:04:36,439
anything at all this is the the fully

00:04:32,240 --> 00:04:40,009
self-driving car so if we take that and

00:04:36,439 --> 00:04:42,069
apply it to BOTS we get this chart we're

00:04:40,009 --> 00:04:44,569
at level one we have things that are

00:04:42,069 --> 00:04:46,939
automated a little bit sort of the level

00:04:44,569 --> 00:04:48,530
of a script or a tool and eventually

00:04:46,939 --> 00:04:51,259
again we get to level five where the

00:04:48,530 --> 00:04:53,360
machine does everything you can see it

00:04:51,259 --> 00:04:55,069
each level of this chart one more thing

00:04:53,360 --> 00:04:57,259
is taken over by the system that's the

00:04:55,069 --> 00:04:58,909
bold admit I'm not going to try to

00:04:57,259 --> 00:05:01,960
describe this much further here I think

00:04:58,909 --> 00:05:05,210
it'll be easier as we go into examples

00:05:01,960 --> 00:05:08,000
so at level one puts simply our goal is

00:05:05,210 --> 00:05:09,830
to automate portions of our workflow not

00:05:08,000 --> 00:05:11,659
necessarily make a bot do all the work

00:05:09,830 --> 00:05:14,690
but take away the parts where it's easy

00:05:11,659 --> 00:05:16,069
to make small little mistakes as a human

00:05:14,690 --> 00:05:18,409
being you're going to discover the work

00:05:16,069 --> 00:05:20,900
you're going to kick off a task hit a

00:05:18,409 --> 00:05:24,169
button run a script but the work itself

00:05:20,900 --> 00:05:27,319
will be automated so let's put up an

00:05:24,169 --> 00:05:30,590
example we have a package and our goal

00:05:27,319 --> 00:05:32,750
is to release this but releasing takes

00:05:30,590 --> 00:05:34,520
multiple actions it might involve

00:05:32,750 --> 00:05:37,430
tagging a branch updating a release

00:05:34,520 --> 00:05:40,969
number publishing to NPM maybe deploying

00:05:37,430 --> 00:05:42,830
Docs etc so how do we fix that well we

00:05:40,969 --> 00:05:43,849
can write a script the script can do all

00:05:42,830 --> 00:05:46,729
of those things and we can click a

00:05:43,849 --> 00:05:49,339
button this might not sound entirely

00:05:46,729 --> 00:05:50,509
like a body yet bots we don't tend to

00:05:49,339 --> 00:05:52,339
think of as being a thing where we just

00:05:50,509 --> 00:05:54,289
actually get a script locally but this

00:05:52,339 --> 00:05:56,509
is the most basic bot the deployment

00:05:54,289 --> 00:05:58,669
environments your machine it does a task

00:05:56,509 --> 00:06:00,440
for you the only thing that's a bit odd

00:05:58,669 --> 00:06:02,240
is because at level one we're still

00:06:00,440 --> 00:06:06,259
triggering an assisting system it

00:06:02,240 --> 00:06:09,199
doesn't feel all that automated and then

00:06:06,259 --> 00:06:10,729
we move on to level two the best way to

00:06:09,199 --> 00:06:12,680
describe this is that we can automate

00:06:10,729 --> 00:06:14,569
the discovery now as well as the work

00:06:12,680 --> 00:06:15,979
but we're still as human beings going to

00:06:14,569 --> 00:06:17,839
be responsible for supervising the

00:06:15,979 --> 00:06:21,740
bottom we're not going to trust it to

00:06:17,839 --> 00:06:23,750
operate unmonitored a representative

00:06:21,740 --> 00:06:26,839
task for that would be that script we

00:06:23,750 --> 00:06:29,300
authored previously could be forgotten

00:06:26,839 --> 00:06:31,639
to be run and it would be good to know

00:06:29,300 --> 00:06:34,860
if that happens if we have some release

00:06:31,639 --> 00:06:37,789
ready to go let's say we've updated the

00:06:34,860 --> 00:06:40,199
release a number within package.json and

00:06:37,789 --> 00:06:41,400
we haven't published yet it would be

00:06:40,199 --> 00:06:42,780
cool if we had some sort of monitoring

00:06:41,400 --> 00:06:48,569
to let us know about that so we don't

00:06:42,780 --> 00:06:50,699
just let it sit stale forever and when

00:06:48,569 --> 00:06:52,199
we started into level 3 this is where I

00:06:50,699 --> 00:06:55,259
think you start to really see them as

00:06:52,199 --> 00:06:58,169
it's very useful pots this point we let

00:06:55,259 --> 00:06:59,460
the bots start doing work for us and we

00:06:58,169 --> 00:07:01,650
have to supervise it a little bit

00:06:59,460 --> 00:07:03,449
probably check in on it but for the most

00:07:01,650 --> 00:07:05,430
part it's fully starting to self monitor

00:07:03,449 --> 00:07:09,659
and we're not going to have to do a lot

00:07:05,430 --> 00:07:11,939
of intervention ourselves an example of

00:07:09,659 --> 00:07:15,270
how that might manifest is we have

00:07:11,939 --> 00:07:17,729
issues in a repository that go stale so

00:07:15,270 --> 00:07:19,289
we all have repositories that we have to

00:07:17,729 --> 00:07:21,120
work in and issues could assign the

00:07:19,289 --> 00:07:22,710
developers on the team but occasionally

00:07:21,120 --> 00:07:25,319
people on the team become overloaded or

00:07:22,710 --> 00:07:27,000
that individual and the team maybe isn't

00:07:25,319 --> 00:07:29,759
the subject matter expert for that so

00:07:27,000 --> 00:07:31,949
they're stalling out so we can implement

00:07:29,759 --> 00:07:33,689
something that juggled these issues

00:07:31,949 --> 00:07:35,759
around you could assign them to a

00:07:33,689 --> 00:07:38,460
different team member to see if that

00:07:35,759 --> 00:07:39,839
would help us get traction another

00:07:38,460 --> 00:07:42,599
example you might see here is something

00:07:39,839 --> 00:07:44,430
like a CL a bot maybe where you can

00:07:42,599 --> 00:07:46,770
notice that someone on your team doesn't

00:07:44,430 --> 00:07:49,080
have clas and you could sort of walk

00:07:46,770 --> 00:07:51,270
through that it's going to require very

00:07:49,080 --> 00:07:52,710
little limited monitoring the monitoring

00:07:51,270 --> 00:07:54,449
at that point is mostly in the fact that

00:07:52,710 --> 00:07:56,490
nothing's going to get merged without a

00:07:54,449 --> 00:07:57,719
human but the bot can still go through

00:07:56,490 --> 00:08:01,379
that entire interaction with a new

00:07:57,719 --> 00:08:03,839
contributor and then we get to level 4

00:08:01,379 --> 00:08:05,219
and things get a bit more advanced we

00:08:03,839 --> 00:08:07,620
don't really have to supervise anymore

00:08:05,219 --> 00:08:09,509
at all the system handles its own fall

00:08:07,620 --> 00:08:12,300
back when errors happen it knows how to

00:08:09,509 --> 00:08:16,889
self recover maybe it has an error can't

00:08:12,300 --> 00:08:18,089
recover from it opens a bug for you so

00:08:16,889 --> 00:08:20,789
what does an example like this start to

00:08:18,089 --> 00:08:22,860
look like sometimes it turns out that in

00:08:20,789 --> 00:08:25,529
our repositories we have branches that

00:08:22,860 --> 00:08:27,419
get created for PRS and contributors

00:08:25,529 --> 00:08:29,039
forget to delete them and this starts to

00:08:27,419 --> 00:08:30,930
make things get a bit below D and hard

00:08:29,039 --> 00:08:33,360
to see what's going on so maybe we could

00:08:30,930 --> 00:08:34,740
write a bot that deletes them and I feel

00:08:33,360 --> 00:08:37,320
like this is a point to mention that as

00:08:34,740 --> 00:08:39,419
you go through the levels risk starts to

00:08:37,320 --> 00:08:41,849
increase also this is this is a rather

00:08:39,419 --> 00:08:43,500
risky thing to do what if those those

00:08:41,849 --> 00:08:45,690
branches are needed and you made a

00:08:43,500 --> 00:08:47,190
mistake in this bot this is where I mean

00:08:45,690 --> 00:08:48,780
to say it's not really supervised

00:08:47,190 --> 00:08:51,720
anymore it starts to take action

00:08:48,780 --> 00:08:53,280
that would be hard to recover from so

00:08:51,720 --> 00:08:55,890
other buffs in this category are things

00:08:53,280 --> 00:08:58,350
that look like merging on green to

00:08:55,890 --> 00:09:00,120
master where maybe you reviewed it

00:08:58,350 --> 00:09:02,010
notated earlier but someone merged

00:09:00,120 --> 00:09:04,050
something else than the C I passed and

00:09:02,010 --> 00:09:06,060
it gets merged in and that could be

00:09:04,050 --> 00:09:07,680
rather risky there are a lot of bucks in

00:09:06,060 --> 00:09:11,280
this category and the example we'll use

00:09:07,680 --> 00:09:14,610
later falls into this level four and

00:09:11,280 --> 00:09:15,750
finally we get to level five and they

00:09:14,610 --> 00:09:17,730
get level five the easiest way to

00:09:15,750 --> 00:09:21,180
describe it as the boss the robot starts

00:09:17,730 --> 00:09:23,700
to become your own boss because unlike

00:09:21,180 --> 00:09:26,220
the previous one it's now unscoped it no

00:09:23,700 --> 00:09:28,410
longer has a question and a solution it

00:09:26,220 --> 00:09:31,440
just responds to all questions in all

00:09:28,410 --> 00:09:32,520
solutions and I think you'll find the

00:09:31,440 --> 00:09:33,870
science-fiction has taught us that

00:09:32,520 --> 00:09:39,240
unschooling BOTS could be a rather

00:09:33,870 --> 00:09:40,560
dangerous thing I don't know that I

00:09:39,240 --> 00:09:43,590
would really want this happening in my

00:09:40,560 --> 00:09:45,300
repository I would say we avoid doing

00:09:43,590 --> 00:09:47,010
this all together if at all possible and

00:09:45,300 --> 00:09:48,780
after all human beings are good at these

00:09:47,010 --> 00:09:50,700
sorts of tasks anyway and we usually

00:09:48,780 --> 00:09:53,280
want to intuition so this probably isn't

00:09:50,700 --> 00:09:55,080
where we want to look for BOTS to sort

00:09:53,280 --> 00:09:57,510
of tie back to automotive they're

00:09:55,080 --> 00:09:59,850
finding the same problem in automotive

00:09:57,510 --> 00:10:01,620
driverless cars getting to level five is

00:09:59,850 --> 00:10:04,470
going to be very difficult because it

00:10:01,620 --> 00:10:06,330
means the automation needs to understand

00:10:04,470 --> 00:10:08,790
new scenarios that hasn't seen before

00:10:06,330 --> 00:10:13,800
and that's that's a pretty giant jump

00:10:08,790 --> 00:10:15,570
from training on existing scenarios so

00:10:13,800 --> 00:10:17,400
at this point though I think we should

00:10:15,570 --> 00:10:21,630
talk about writing BOTS and not me just

00:10:17,400 --> 00:10:24,540
sort of giving you quick examples and

00:10:21,630 --> 00:10:27,930
you probably thought maybe we could just

00:10:24,540 --> 00:10:29,310
write a bot to write the bots let's go

00:10:27,930 --> 00:10:31,080
back to the previous step we probably

00:10:29,310 --> 00:10:32,550
don't want to do that right if we find a

00:10:31,080 --> 00:10:33,690
way to have BOTS write BOTS

00:10:32,550 --> 00:10:35,490
we've probably reached century 8

00:10:33,690 --> 00:10:37,670
computing and then you want them to this

00:10:35,490 --> 00:10:39,480
weird problem of who watches The Watcher

00:10:37,670 --> 00:10:41,370
eventually realized it's Turtles all the

00:10:39,480 --> 00:10:42,360
way down and you're probably just going

00:10:41,370 --> 00:10:46,830
to have to accept that we're doing this

00:10:42,360 --> 00:10:48,839
ourselves so while we can't use a buck

00:10:46,830 --> 00:10:51,300
to do this for us we can leverage a

00:10:48,839 --> 00:10:53,750
series of frameworks and our team found

00:10:51,300 --> 00:10:56,460
one that we liked a lot called pro bot

00:10:53,750 --> 00:10:59,160
this is good because most of us don't

00:10:56,460 --> 00:11:01,230
want to spend our time authoring BOTS

00:10:59,160 --> 00:11:03,300
the bots are means to an end they're not

00:11:01,230 --> 00:11:05,160
the solution itself to network marketing

00:11:03,300 --> 00:11:06,990
and so being able to leverage other

00:11:05,160 --> 00:11:09,329
open-source products I mean we can get

00:11:06,990 --> 00:11:12,870
back to our product and not just a bot

00:11:09,329 --> 00:11:14,910
authors Probot integrates really well to

00:11:12,870 --> 00:11:18,180
github as authored by a github engineer

00:11:14,910 --> 00:11:20,879
and allows us to trigger events in the

00:11:18,180 --> 00:11:22,529
form of small node apps based on a

00:11:20,879 --> 00:11:24,779
github context many different github

00:11:22,529 --> 00:11:26,730
events the nice thing too is they have a

00:11:24,779 --> 00:11:28,410
variety of samples we can use to sort of

00:11:26,730 --> 00:11:31,529
inspire ourselves and understand what to

00:11:28,410 --> 00:11:34,829
do the documentation is fairly good and

00:11:31,529 --> 00:11:35,910
so that's what we decided to go with so

00:11:34,829 --> 00:11:37,920
the first thing we're going to want to

00:11:35,910 --> 00:11:39,720
do is think about the scenario you want

00:11:37,920 --> 00:11:42,089
to solve and try to scope that to a

00:11:39,720 --> 00:11:45,540
problem that is solvable by a bot and no

00:11:42,089 --> 00:11:47,069
longer at bar as a human so a simple

00:11:45,540 --> 00:11:50,220
question that we might ask yourself is

00:11:47,069 --> 00:11:52,709
could we have renovate PRS pen appears

00:11:50,220 --> 00:11:54,990
from the renovate bot automatically runs

00:11:52,709 --> 00:11:56,730
CI for us and not wait for an engineer

00:11:54,990 --> 00:11:59,069
on the team to go tell the CI system to

00:11:56,730 --> 00:12:01,470
run the reason this is important to

00:11:59,069 --> 00:12:05,220
systems like travis circle and the

00:12:01,470 --> 00:12:08,009
internal CI we use they restrict which

00:12:05,220 --> 00:12:10,170
contributors can kick off builds and

00:12:08,009 --> 00:12:12,420
this is important most build systems

00:12:10,170 --> 00:12:14,880
have secrets and if any random person on

00:12:12,420 --> 00:12:16,500
the internet can run a build they can

00:12:14,880 --> 00:12:18,660
modify those files and they can expose

00:12:16,500 --> 00:12:20,399
secrets so we don't know allow that just

00:12:18,660 --> 00:12:23,069
happen it needs to be a trusted

00:12:20,399 --> 00:12:25,800
contributor of the of the repository of

00:12:23,069 --> 00:12:28,259
the project but renovate isn't really a

00:12:25,800 --> 00:12:30,149
contributor it's a thing we use it's the

00:12:28,259 --> 00:12:32,459
thing we trust but it's not part of the

00:12:30,149 --> 00:12:34,800
github org and so we could probably

00:12:32,459 --> 00:12:36,180
write about to do this and that seems

00:12:34,800 --> 00:12:39,660
like a small enough size and something

00:12:36,180 --> 00:12:43,579
direct when renovate creates a PR and we

00:12:39,660 --> 00:12:43,579
detect that it's the author we run CI

00:12:43,819 --> 00:12:48,149
the next thing we need to figure out is

00:12:46,139 --> 00:12:50,490
what sort of events do we need to

00:12:48,149 --> 00:12:52,319
trigger this on we could try to trigger

00:12:50,490 --> 00:12:53,509
on all possible events but that's

00:12:52,319 --> 00:12:55,649
probably going to mean it runs too much

00:12:53,509 --> 00:12:58,920
so we might want to trigger an initial

00:12:55,649 --> 00:13:00,959
PR maybe on updates to the PR maybe on

00:12:58,920 --> 00:13:02,579
the creation of an issue that's probably

00:13:00,959 --> 00:13:05,370
not relevant in this exact example but

00:13:02,579 --> 00:13:07,019
it's a common one there are dozens of

00:13:05,370 --> 00:13:08,939
different events you can trigger on but

00:13:07,019 --> 00:13:11,569
for me these four are most often the

00:13:08,939 --> 00:13:11,569
ones you end up using

00:13:12,140 --> 00:13:17,520
in the next decision you get to make is

00:13:14,640 --> 00:13:19,620
our bots going to alert or retrieve your

00:13:17,520 --> 00:13:22,440
system and this again goes back to risk

00:13:19,620 --> 00:13:25,890
if a system only ever alerts you a

00:13:22,440 --> 00:13:28,710
problem it's generally not that risky in

00:13:25,890 --> 00:13:30,990
the case of something like a CLA bot or

00:13:28,710 --> 00:13:34,170
maybe a linting bot it's likely to just

00:13:30,990 --> 00:13:35,910
leave a comment on the pr it's not going

00:13:34,170 --> 00:13:39,450
to merge your code not gonna run your

00:13:35,910 --> 00:13:41,070
build system relatively safe on the

00:13:39,450 --> 00:13:43,530
other hand if we make changes that run

00:13:41,070 --> 00:13:45,570
the build system merge publish they

00:13:43,530 --> 00:13:48,030
become more risky these are the sort of

00:13:45,570 --> 00:13:49,260
things that cause us incidents and so

00:13:48,030 --> 00:13:51,720
you need to decide how much risk you're

00:13:49,260 --> 00:13:54,780
willing to take on in this instance so

00:13:51,720 --> 00:13:56,310
for the case of this bot we're going to

00:13:54,780 --> 00:13:58,920
likely add a label to our repository

00:13:56,310 --> 00:14:00,290
that says it's safe to run CI and so

00:13:58,920 --> 00:14:02,820
this looks a little more like a change

00:14:00,290 --> 00:14:05,880
and so that's a little bit more risk but

00:14:02,820 --> 00:14:09,360
we can't get the value without that so

00:14:05,880 --> 00:14:11,190
let's get around to building it robot

00:14:09,360 --> 00:14:14,130
comes with this QuickStart we can run

00:14:11,190 --> 00:14:15,780
via npx and it's a pretty reasonable

00:14:14,130 --> 00:14:18,180
place to start if you've never written

00:14:15,780 --> 00:14:20,700
about before it's going to populate you

00:14:18,180 --> 00:14:22,260
a node project that has most of the

00:14:20,700 --> 00:14:25,530
templating after asking you some simple

00:14:22,260 --> 00:14:27,930
questions we didn't use this exactly

00:14:25,530 --> 00:14:30,810
because we found out that we wanted to

00:14:27,930 --> 00:14:33,240
do templating on top of robot and so we

00:14:30,810 --> 00:14:35,520
recently added our own bot generator

00:14:33,240 --> 00:14:37,710
that does basically the same thing

00:14:35,520 --> 00:14:39,270
there's a few less questions because we

00:14:37,710 --> 00:14:41,040
can make a lot of assumptions for

00:14:39,270 --> 00:14:42,630
instance all the authors are Google and

00:14:41,040 --> 00:14:45,090
so that makes that a little simpler but

00:14:42,630 --> 00:14:46,680
this also allowed us to do things like

00:14:45,090 --> 00:14:48,240
template or read amis and have

00:14:46,680 --> 00:14:51,150
consistent style across all our samples

00:14:48,240 --> 00:14:55,710
and have similar targets inside package

00:14:51,150 --> 00:14:57,300
at JSON like I said at the end of the

00:14:55,710 --> 00:15:00,660
day this is just another node package

00:14:57,300 --> 00:15:03,120
all the box system does is runs a method

00:15:00,660 --> 00:15:04,950
when an event happens it's a pretty

00:15:03,120 --> 00:15:05,910
straightforward application and looks

00:15:04,950 --> 00:15:09,300
like a lot of things you've used before

00:15:05,910 --> 00:15:10,920
and has a very bare minimum set of

00:15:09,300 --> 00:15:12,210
dependencies we're going to use

00:15:10,920 --> 00:15:14,970
something from octa kit to interact with

00:15:12,210 --> 00:15:16,650
git we're going to use Pro bot in our

00:15:14,970 --> 00:15:18,570
case we use the thing called GCF details

00:15:16,650 --> 00:15:20,460
because we leverage Google Cloud

00:15:18,570 --> 00:15:23,400
functions for this and we have a package

00:15:20,460 --> 00:15:25,330
called GS GCF details we wrote to let us

00:15:23,400 --> 00:15:27,920
do that

00:15:25,330 --> 00:15:29,870
so diving a bit deeper into source I

00:15:27,920 --> 00:15:31,880
wanted to look at the code that isn't

00:15:29,870 --> 00:15:34,790
just boilerplate most of this will be

00:15:31,880 --> 00:15:37,790
you'll probably never edit it but inside

00:15:34,790 --> 00:15:39,380
of one of the CSS files you're going to

00:15:37,790 --> 00:15:42,080
find a function that takes an

00:15:39,380 --> 00:15:44,450
application and on a list of events some

00:15:42,080 --> 00:15:45,350
action in this case we have a few

00:15:44,450 --> 00:15:47,780
different triggers that we're going to

00:15:45,350 --> 00:15:50,330
go on if a PR is open to reopen or

00:15:47,780 --> 00:15:52,700
synchronized that's a PR update we want

00:15:50,330 --> 00:15:56,030
to run an event this these are all

00:15:52,700 --> 00:15:59,060
possible options for for renovate when

00:15:56,030 --> 00:16:01,970
it comes through but the bot we write is

00:15:59,060 --> 00:16:04,550
pretty simple we check the pull request

00:16:01,970 --> 00:16:06,890
user login and if they user log and

00:16:04,550 --> 00:16:10,610
matches renovate we can add a label to

00:16:06,890 --> 00:16:12,500
the repository bots aren't necessarily

00:16:10,610 --> 00:16:14,390
all that complicated a lot of times

00:16:12,500 --> 00:16:15,590
they're simple actions but the the

00:16:14,390 --> 00:16:17,990
difficulty of this part of the bot

00:16:15,590 --> 00:16:20,570
doesn't really tell you the value this

00:16:17,990 --> 00:16:22,070
one bot has saved hundreds of hours for

00:16:20,570 --> 00:16:24,380
our development team for having to go

00:16:22,070 --> 00:16:28,550
into these issues and tell them to run

00:16:24,380 --> 00:16:30,770
CI so how do you set up your environment

00:16:28,550 --> 00:16:33,830
to do these BOTS to offer these boss

00:16:30,770 --> 00:16:35,480
locally this is a pretty good hub

00:16:33,830 --> 00:16:37,370
centric in the way I describe it but

00:16:35,480 --> 00:16:38,840
it's likely worth noting there's nothing

00:16:37,370 --> 00:16:41,270
github specific about what we're doing

00:16:38,840 --> 00:16:43,490
here you could change this events to not

00:16:41,270 --> 00:16:44,870
be github events you could use Pro bot

00:16:43,490 --> 00:16:49,340
and send it web hooks from somewhere

00:16:44,870 --> 00:16:51,140
else all possibilities so the first

00:16:49,340 --> 00:16:55,040
thing we do to support local development

00:16:51,140 --> 00:16:57,890
is start a proxy this is so that way we

00:16:55,040 --> 00:16:59,720
can use our local development system as

00:16:57,890 --> 00:17:01,640
the target of the web hook that github

00:16:59,720 --> 00:17:04,040
provides there's a service called Smee

00:17:01,640 --> 00:17:05,870
we can use all you have to do to use

00:17:04,040 --> 00:17:07,820
this particular proxy is go to smooth

00:17:05,870 --> 00:17:10,490
out i/o click a button and it will give

00:17:07,820 --> 00:17:12,470
you a slug Earl that you can then use to

00:17:10,490 --> 00:17:15,890
route your issues to your events from

00:17:12,470 --> 00:17:17,890
github too so we start by running our

00:17:15,890 --> 00:17:21,740
proxy once we get that slug Earl and

00:17:17,890 --> 00:17:23,209
this sets everything up for us I should

00:17:21,740 --> 00:17:24,650
mention as possible you don't even need

00:17:23,209 --> 00:17:27,140
to run this step but we found

00:17:24,650 --> 00:17:29,180
environments that if you skip this it

00:17:27,140 --> 00:17:30,920
might not properly configure and so you

00:17:29,180 --> 00:17:32,890
run it once you only ever run this the

00:17:30,920 --> 00:17:35,360
first time you set your machine up and

00:17:32,890 --> 00:17:37,730
the next thing you do is you're an NPM

00:17:35,360 --> 00:17:38,060
start like I said it's basically just a

00:17:37,730 --> 00:17:40,520
regular

00:17:38,060 --> 00:17:42,080
package once used Probot and it will

00:17:40,520 --> 00:17:44,990
direct you to go to port 3000 in your

00:17:42,080 --> 00:17:48,470
machine this is that way we can go ahead

00:17:44,990 --> 00:17:49,520
and set up the github app you'll be

00:17:48,470 --> 00:17:50,600
presented with the screen that looks

00:17:49,520 --> 00:17:52,430
like this where you have to register

00:17:50,600 --> 00:17:55,730
your github app you'll go through the

00:17:52,430 --> 00:17:58,660
github apps creation process we'll give

00:17:55,730 --> 00:18:00,500
it a name looking figure permissions

00:17:58,660 --> 00:18:02,540
once we get around to configuring

00:18:00,500 --> 00:18:04,670
permissions things start to get a little

00:18:02,540 --> 00:18:07,670
bit harder to do because we have to ask

00:18:04,670 --> 00:18:09,440
ourselves some real questions what does

00:18:07,670 --> 00:18:11,750
this bot really have to change about a

00:18:09,440 --> 00:18:13,550
repository and in theory we could give

00:18:11,750 --> 00:18:15,800
it all access but again back to risk we

00:18:13,550 --> 00:18:17,120
likely don't want to do that so we're

00:18:15,800 --> 00:18:18,770
going to have to start sort of thinking

00:18:17,120 --> 00:18:19,910
in the case of the spot we're going to

00:18:18,770 --> 00:18:22,610
need right access to the repository

00:18:19,910 --> 00:18:23,660
because we need to add labels we're

00:18:22,610 --> 00:18:25,580
gonna give it permission to mess with

00:18:23,660 --> 00:18:26,870
pull requests only and that will

00:18:25,580 --> 00:18:28,900
restrict it from doing anything too

00:18:26,870 --> 00:18:31,670
crazy

00:18:28,900 --> 00:18:33,820
and once we've done that we need to

00:18:31,670 --> 00:18:36,980
install the bot into the repository

00:18:33,820 --> 00:18:38,270
there's a install app button on the

00:18:36,980 --> 00:18:40,820
screen we're on for permissions and

00:18:38,270 --> 00:18:43,040
you'll be presented with a yellow box

00:18:40,820 --> 00:18:46,250
and where you'll have to review your

00:18:43,040 --> 00:18:47,900
permissions so the permissions here are

00:18:46,250 --> 00:18:50,480
being reviewed are from the previous

00:18:47,900 --> 00:18:51,980
step and I point this out because if you

00:18:50,480 --> 00:18:53,570
don't do this nothing interesting will

00:18:51,980 --> 00:18:55,790
happen just sit here a while it's an

00:18:53,570 --> 00:18:56,900
easy mistake to make because you think

00:18:55,790 --> 00:18:59,030
well I've made a bot and I've set

00:18:56,900 --> 00:19:01,220
permissions but you have to do this step

00:18:59,030 --> 00:19:03,410
you also might have to do this step

00:19:01,220 --> 00:19:05,180
again if you ever change the permissions

00:19:03,410 --> 00:19:06,680
and that that's a gotcha that's caught

00:19:05,180 --> 00:19:07,970
me I haven't given it all the

00:19:06,680 --> 00:19:10,070
permissions I needed the first time

00:19:07,970 --> 00:19:12,050
around and if you forget to do that

00:19:10,070 --> 00:19:14,600
again it won't trigger on those things

00:19:12,050 --> 00:19:17,390
until you come and do this so we click

00:19:14,600 --> 00:19:18,950
on that link we can say alright these

00:19:17,390 --> 00:19:21,170
permissions are safe I'm happy with that

00:19:18,950 --> 00:19:24,200
we can install it on any repository or

00:19:21,170 --> 00:19:26,420
all repositories in an org something

00:19:24,200 --> 00:19:29,270
that I do is I create a repository

00:19:26,420 --> 00:19:30,740
purely for testing it's not important

00:19:29,270 --> 00:19:33,290
I can make PRS against the branches

00:19:30,740 --> 00:19:35,540
whatever it'll be fine and I target this

00:19:33,290 --> 00:19:36,770
repository with new bots that way I can

00:19:35,540 --> 00:19:39,620
sort of test drive them before putting

00:19:36,770 --> 00:19:41,960
them against anything live so we set

00:19:39,620 --> 00:19:43,980
that permission up and we can move along

00:19:41,960 --> 00:19:46,139
to running the bot

00:19:43,980 --> 00:19:49,440
to do this we need to set a few

00:19:46,139 --> 00:19:51,630
environment variables every github app

00:19:49,440 --> 00:19:54,299
comes with an application ID it comes

00:19:51,630 --> 00:19:57,690
with the private key and it comes with a

00:19:54,299 --> 00:20:00,059
secret for web hooks these are pretty

00:19:57,690 --> 00:20:02,340
straightforward to get the app ID will

00:20:00,059 --> 00:20:05,850
be at the top of the app page we can

00:20:02,340 --> 00:20:08,399
export it to app ID the web hook secret

00:20:05,850 --> 00:20:10,019
is a string that you set so for

00:20:08,399 --> 00:20:13,169
demonstration purposes in this case it's

00:20:10,019 --> 00:20:15,510
a pro bot demo and then we need to

00:20:13,169 --> 00:20:17,250
configure private keys at the bottom of

00:20:15,510 --> 00:20:19,019
the page there's an area that you can

00:20:17,250 --> 00:20:20,940
generate new secrets it'll automatically

00:20:19,019 --> 00:20:22,320
download adjacent for you and as long as

00:20:20,940 --> 00:20:29,909
you put the path to that it'll be able

00:20:22,320 --> 00:20:32,850
to resolve this for you so here we show

00:20:29,909 --> 00:20:35,970
a sales running NPM start its forwarding

00:20:32,850 --> 00:20:37,230
to spin out to localhost 3000 and we're

00:20:35,970 --> 00:20:40,200
starting to get these post requests

00:20:37,230 --> 00:20:43,500
coming through the post requests are all

00:20:40,200 --> 00:20:45,090
the result of me opening this PR is that

00:20:43,500 --> 00:20:47,070
as a test repo so you can see that I've

00:20:45,090 --> 00:20:50,519
updated to read me a bunch and opened

00:20:47,070 --> 00:20:52,860
and reopened a whole request and then we

00:20:50,519 --> 00:20:55,440
can go over to Smee and start to look

00:20:52,860 --> 00:20:57,210
into what events we're getting if we

00:20:55,440 --> 00:20:58,590
expand one of those pull requests will

00:20:57,210 --> 00:21:01,139
see the JSON payload and what it looks

00:20:58,590 --> 00:21:03,360
like on a live repository you get a

00:21:01,139 --> 00:21:05,039
better idea of what information are bots

00:21:03,360 --> 00:21:08,779
receiving and how RIS how to respond to

00:21:05,039 --> 00:21:12,299
it so this is handy for live debugging

00:21:08,779 --> 00:21:13,860
and just ad hoc testing but it's also

00:21:12,299 --> 00:21:16,019
useful for them taking these payloads

00:21:13,860 --> 00:21:17,970
and turning them into unit tests that

00:21:16,019 --> 00:21:19,860
are repeatable and so that's that's

00:21:17,970 --> 00:21:21,690
where this tends to be most useful is

00:21:19,860 --> 00:21:22,950
you can add hoc test how it works and

00:21:21,690 --> 00:21:24,059
you can capture that and turn that into

00:21:22,950 --> 00:21:28,080
a test you can run over and over again

00:21:24,059 --> 00:21:29,490
and avoid regressing your BOTS so what

00:21:28,080 --> 00:21:31,320
is the deployment stack for that look

00:21:29,490 --> 00:21:33,299
like now that you can run it locally how

00:21:31,320 --> 00:21:36,059
do we get that into somewhere that's not

00:21:33,299 --> 00:21:38,130
running on our development machine we

00:21:36,059 --> 00:21:39,899
use a variety of services like I said we

00:21:38,130 --> 00:21:42,210
put this on Google cloud functions we

00:21:39,899 --> 00:21:45,840
ultimately use storage a thing called a

00:21:42,210 --> 00:21:48,750
KMS key management service so let's talk

00:21:45,840 --> 00:21:51,350
about a bit of those components the most

00:21:48,750 --> 00:21:53,820
important bit is Google cloud functions

00:21:51,350 --> 00:21:55,529
we started on this just as a call-out

00:21:53,820 --> 00:21:57,450
right away at the time we started this

00:21:55,529 --> 00:21:59,010
github actions didn't exist

00:21:57,450 --> 00:22:00,059
this time if we started this again that

00:21:59,010 --> 00:22:02,039
might have been an approach we looked

00:22:00,059 --> 00:22:03,630
into but we already started this for

00:22:02,039 --> 00:22:05,159
Google cloud functions and so it doesn't

00:22:03,630 --> 00:22:08,220
really make much sense at this point for

00:22:05,159 --> 00:22:11,760
us to go back Google cloud functions

00:22:08,220 --> 00:22:13,679
take a web event any sort of HTTP

00:22:11,760 --> 00:22:14,700
trigger and they can start executing and

00:22:13,679 --> 00:22:17,130
so there are these little on-demand

00:22:14,700 --> 00:22:19,169
actions which is a really good fit for a

00:22:17,130 --> 00:22:20,250
bot they tend to be a good fit for

00:22:19,169 --> 00:22:22,110
anything that doesn't have a lot of

00:22:20,250 --> 00:22:24,600
state management and that's not being

00:22:22,110 --> 00:22:26,159
called very frequently and most spots

00:22:24,600 --> 00:22:27,450
aren't you know they're intermittently

00:22:26,159 --> 00:22:29,789
called maybe just during business hours

00:22:27,450 --> 00:22:34,080
and so this is a good application for

00:22:29,789 --> 00:22:35,850
that and there's an existing Google

00:22:34,080 --> 00:22:38,399
cloud function handler that Probot

00:22:35,850 --> 00:22:41,429
provides if you'd like to use this you

00:22:38,399 --> 00:22:43,799
can install it from them we also wanted

00:22:41,429 --> 00:22:45,269
to use the thing called KMS key

00:22:43,799 --> 00:22:47,039
management system service and so the

00:22:45,269 --> 00:22:49,830
idea here was that we didn't want to

00:22:47,039 --> 00:22:52,740
store any of the secrets in the cloud

00:22:49,830 --> 00:22:54,090
function itself there's a potential

00:22:52,740 --> 00:22:56,250
security risk in using environment

00:22:54,090 --> 00:22:58,260
variables in the bot as well just like

00:22:56,250 --> 00:22:59,639
there would be for a CI system and so

00:22:58,260 --> 00:23:01,080
instead of using environment variables

00:22:59,639 --> 00:23:04,139
we can inject these things through the

00:23:01,080 --> 00:23:05,580
kms system which ultimately stores them

00:23:04,139 --> 00:23:07,710
on Google Cloud storage and then they're

00:23:05,580 --> 00:23:09,120
fetched as they're needed and then

00:23:07,710 --> 00:23:10,260
immediately piped into the command so

00:23:09,120 --> 00:23:12,179
they're never saw as an environment

00:23:10,260 --> 00:23:14,580
variable it would be more difficult for

00:23:12,179 --> 00:23:18,149
someone to capture those things and so

00:23:14,580 --> 00:23:20,039
the utility that's released by Probot

00:23:18,149 --> 00:23:22,649
doesn't support this so we ended up

00:23:20,039 --> 00:23:24,000
writing our own it is a rather simple a

00:23:22,649 --> 00:23:27,120
bootstrapper so that wasn't too much

00:23:24,000 --> 00:23:28,649
work but if this sounds interesting to

00:23:27,120 --> 00:23:29,880
you that you would want to use cloud

00:23:28,649 --> 00:23:32,580
functions and some of these advanced

00:23:29,880 --> 00:23:34,769
more advanced features feel free to

00:23:32,580 --> 00:23:36,210
reach out to me or come visit any what

00:23:34,769 --> 00:23:38,340
the Google booth I'd like to talk about

00:23:36,210 --> 00:23:40,440
it we haven't yet released this to

00:23:38,340 --> 00:23:42,149
people it's only in our repository but

00:23:40,440 --> 00:23:48,059
if there was a value that's something we

00:23:42,149 --> 00:23:49,980
could consider open sourcing further so

00:23:48,059 --> 00:23:51,179
this is the reason we use like I said

00:23:49,980 --> 00:23:53,669
it's a simple package in our repository

00:23:51,179 --> 00:23:55,289
it is under active development but if

00:23:53,669 --> 00:23:58,380
this interests you please talk to me

00:23:55,289 --> 00:24:00,929
further we also use a system called

00:23:58,380 --> 00:24:05,450
Google cloud build and this is what

00:24:00,929 --> 00:24:07,740
deploys our BOTS this allows us to use

00:24:05,450 --> 00:24:09,720
the secrets that we're storing as well

00:24:07,740 --> 00:24:10,800
as the deployment pipeline no developer

00:24:09,720 --> 00:24:13,980
needs to manage the publishing

00:24:10,800 --> 00:24:17,280
just self publishes as we need so that's

00:24:13,980 --> 00:24:19,230
that's good for us but let's step away

00:24:17,280 --> 00:24:20,970
from that a bit and get out of some of

00:24:19,230 --> 00:24:23,130
the google specifics and just talk about

00:24:20,970 --> 00:24:24,240
if you were to publish a single bot it's

00:24:23,130 --> 00:24:27,090
just something like loud functions what

00:24:24,240 --> 00:24:28,590
would that look like it's going to look

00:24:27,090 --> 00:24:30,420
again like a lot of note apps you've

00:24:28,590 --> 00:24:32,550
you've written before we're gonna have a

00:24:30,420 --> 00:24:34,440
compilation step all of our BOTS our

00:24:32,550 --> 00:24:36,780
typescript most of our code based in

00:24:34,440 --> 00:24:38,970
fact is we're going to make a target

00:24:36,780 --> 00:24:42,300
directory and copy some things over to

00:24:38,970 --> 00:24:45,210
it and that's the build step technically

00:24:42,300 --> 00:24:46,980
this target part isn't necessary but it

00:24:45,210 --> 00:24:48,360
is a bit of a safety it means that when

00:24:46,980 --> 00:24:50,010
we go to deploy we don't deploy anything

00:24:48,360 --> 00:24:52,410
unnecessary we're only going to deploy

00:24:50,010 --> 00:24:54,300
the things we most care about for the

00:24:52,410 --> 00:24:58,020
bot not random artifacts that happen to

00:24:54,300 --> 00:25:00,870
be in the repository for publishing we

00:24:58,020 --> 00:25:03,000
provide a function name and Google Cloud

00:25:00,870 --> 00:25:04,890
comes with a tool called tree cloud and

00:25:03,000 --> 00:25:07,920
we can use that to upload a function

00:25:04,890 --> 00:25:09,420
once we provide a directory through here

00:25:07,920 --> 00:25:11,400
we're going to provide it to use all the

00:25:09,420 --> 00:25:13,380
kms secrets for us it's going to go

00:25:11,400 --> 00:25:15,660
through and upload it for us through G

00:25:13,380 --> 00:25:17,550
Club and that that can be done with

00:25:15,660 --> 00:25:19,170
without cloud build the reason we use

00:25:17,550 --> 00:25:21,510
cloud build ultimately is we have more

00:25:19,170 --> 00:25:22,860
than one bot and so it's nice to have a

00:25:21,510 --> 00:25:28,710
centralized system for that and a

00:25:22,860 --> 00:25:30,540
pattern we can follow so I hope this has

00:25:28,710 --> 00:25:33,060
helped you understand a bit of how we do

00:25:30,540 --> 00:25:35,010
BOTS at least for Google cloud client

00:25:33,060 --> 00:25:37,590
libraries and has inspired you to

00:25:35,010 --> 00:25:39,570
embrace using Busta for your team from a

00:25:37,590 --> 00:25:42,120
lot of gardening and allow you to do

00:25:39,570 --> 00:25:43,830
more meaningful work I would say that

00:25:42,120 --> 00:25:46,080
any test that's repeated often is a good

00:25:43,830 --> 00:25:49,190
candidate for bots and virtually all

00:25:46,080 --> 00:25:51,630
projects can benefit from using them I

00:25:49,190 --> 00:25:53,550
also like to mention that all of our

00:25:51,630 --> 00:25:55,440
bots are open sourced they're on github

00:25:53,550 --> 00:25:57,990
but they can be looked at this is the

00:25:55,440 --> 00:26:01,050
repository they exist at there's a

00:25:57,990 --> 00:26:02,940
variety of instances of them and most

00:26:01,050 --> 00:26:06,230
all of the examples I talked about our

00:26:02,940 --> 00:26:08,400
bots that exist that we are using today

00:26:06,230 --> 00:26:09,930
and I also wanted to take a moment to

00:26:08,400 --> 00:26:12,630
thank the others that contributed to

00:26:09,930 --> 00:26:13,890
this I am certainly not the only one

00:26:12,630 --> 00:26:15,870
that has worked on this project a lot of

00:26:13,890 --> 00:26:17,460
people have I just wanted to take a

00:26:15,870 --> 00:26:18,170
moment to thank them all for their

00:26:17,460 --> 00:26:21,430
efforts

00:26:18,170 --> 00:26:28,849
so thank you all for having me

00:26:21,430 --> 00:26:28,849

YouTube URL: https://www.youtube.com/watch?v=5RRlDTPlO3Y


