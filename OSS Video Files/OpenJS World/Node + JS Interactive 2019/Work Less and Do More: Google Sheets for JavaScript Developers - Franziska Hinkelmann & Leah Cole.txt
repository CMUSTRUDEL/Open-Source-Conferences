Title: Work Less and Do More: Google Sheets for JavaScript Developers - Franziska Hinkelmann & Leah Cole
Publication date: 2020-05-11
Playlist: Node + JS Interactive 2019
Description: 
	Work Less and Do More: Google Sheets for JavaScript Developers - Franziska Hinkelmann & Leah Cole, Google
Speakers: Leah Cole, Franziska Hinkelmann
Say goodbye to the days of TPS reports, and come learn how to automate the tedious tasks in your work day. Thanks to the extensibility of Google Sheets (and a special JavaScript client library for Sheets), as well as Cloud Functions, thatâ€™s easy. You can have all kinds of data, for example GitHub, Jira, uptime health, and even sales data combined and imported into a Sheet, analyzed, and output as an email report or slide deck-without ever opening the Sheet.
Captions: 
	00:00:00,030 --> 00:00:06,779
good afternoon welcome back from lunch

00:00:04,220 --> 00:00:12,300
we hope you're having a great time at

00:00:06,779 --> 00:00:15,660
node and J is interactive so far okay

00:00:12,300 --> 00:00:17,820
good good good thank you for joining us

00:00:15,660 --> 00:00:20,600
we will show you some cool things that

00:00:17,820 --> 00:00:23,519
you can do with spreadsheets and nodejs

00:00:20,600 --> 00:00:26,670
you might know me from my talks about

00:00:23,519 --> 00:00:29,429
the aid of JavaScript compilers but I

00:00:26,670 --> 00:00:31,320
switch teams I work in the Google cloud

00:00:29,429 --> 00:00:33,360
org now so I want to talk about cloud

00:00:31,320 --> 00:00:35,309
stuff so this will be very different

00:00:33,360 --> 00:00:38,629
from any other talks you might have seen

00:00:35,309 --> 00:00:42,300
from me will give you sort of a basic

00:00:38,629 --> 00:00:45,660
introduction to some of the Google cloud

00:00:42,300 --> 00:00:47,910
platform products specifically service

00:00:45,660 --> 00:00:51,379
functions and we'll tie it all together

00:00:47,910 --> 00:00:54,420
using spreadsheets for prototyping

00:00:51,379 --> 00:00:57,329
conveniently sheets spreadsheets sheets

00:00:54,420 --> 00:01:00,859
is also part of Google cloud so all the

00:00:57,329 --> 00:01:04,199
api's work together really nicely

00:01:00,859 --> 00:01:06,810
my name is Francisca Hinkleman I'm at

00:01:04,199 --> 00:01:09,030
Google based in New York City and I'm a

00:01:06,810 --> 00:01:11,040
member of the nodejs technical steering

00:01:09,030 --> 00:01:14,340
committee and I'm co-presenting with Lea

00:01:11,040 --> 00:01:16,799
hi I'm Lea Cole I am beast out of

00:01:14,340 --> 00:01:19,500
Sunnyvale California and I typically use

00:01:16,799 --> 00:01:22,409
node to write samples for data analytics

00:01:19,500 --> 00:01:25,320
and ml products in cloud and I am by no

00:01:22,409 --> 00:01:27,840
means a node expert in fact Fonzie's my

00:01:25,320 --> 00:01:31,400
go-to node expert especially when I want

00:01:27,840 --> 00:01:34,320
advice on best policies for our samples

00:01:31,400 --> 00:01:36,630
and I'm also a super-duper G suite

00:01:34,320 --> 00:01:38,490
enthusiast I definitely use G suite

00:01:36,630 --> 00:01:40,530
before Google but once I started using

00:01:38,490 --> 00:01:42,810
it everyday for my work I found that I

00:01:40,530 --> 00:01:46,560
started using it outside of work too to

00:01:42,810 --> 00:01:49,290
like plan vacations and stuff alright so

00:01:46,560 --> 00:01:53,670
let's get started with work less and do

00:01:49,290 --> 00:01:55,909
more sheets for note developers why are

00:01:53,670 --> 00:01:58,229
we talking to you about spreadsheets

00:01:55,909 --> 00:02:00,329
well the great thing about spreadsheets

00:01:58,229 --> 00:02:03,320
is that they allow you to collaborate

00:02:00,329 --> 00:02:06,899
with anybody not just with developers

00:02:03,320 --> 00:02:09,119
spreadsheets they have this universal

00:02:06,899 --> 00:02:11,849
language you might say that pretty much

00:02:09,119 --> 00:02:13,390
anybody can pick up so anybody that you

00:02:11,849 --> 00:02:15,610
want to work with

00:02:13,390 --> 00:02:18,490
of their background they can edit the

00:02:15,610 --> 00:02:21,220
data it can read the data they can

00:02:18,490 --> 00:02:23,140
filter data sorted play around with it

00:02:21,220 --> 00:02:26,620
and draw their own conclusions which can

00:02:23,140 --> 00:02:30,730
sometimes be really useful I'm sorry my

00:02:26,620 --> 00:02:32,430
puppy is crying all right so sheets are

00:02:30,730 --> 00:02:39,040
good if you want to collaborate with

00:02:32,430 --> 00:02:41,140
non-engineers and not only can pretty

00:02:39,040 --> 00:02:43,480
much anybody work with the sheets sheets

00:02:41,140 --> 00:02:45,790
make it really easy to visualize data

00:02:43,480 --> 00:02:47,950
and so you can analyze your data by

00:02:45,790 --> 00:02:50,320
looking at the visuals you created

00:02:47,950 --> 00:02:55,750
obviously you can create all kinds of

00:02:50,320 --> 00:03:00,340
visuals punch pie charts bar bar charts

00:02:55,750 --> 00:03:02,470
line graphs whatever and yes as

00:03:00,340 --> 00:03:04,900
engineers we could write code we could

00:03:02,470 --> 00:03:07,630
use d3.js and generate really pretty

00:03:04,900 --> 00:03:09,580
graphs but it usually takes a lot longer

00:03:07,630 --> 00:03:12,070
than just using a sheet to visualize

00:03:09,580 --> 00:03:14,980
some data and when I need to iterate

00:03:12,070 --> 00:03:17,110
quickly then sheets allow me to focus on

00:03:14,980 --> 00:03:17,769
the trends and correlations instead of

00:03:17,110 --> 00:03:21,360
the code

00:03:17,769 --> 00:03:23,620
so lots of advantages to sheets and

00:03:21,360 --> 00:03:25,510
because of all those sheets are really

00:03:23,620 --> 00:03:27,400
useful when you want to prototype

00:03:25,510 --> 00:03:31,150
something with data and metrics so

00:03:27,400 --> 00:03:32,980
probably not for a full-fledged serious

00:03:31,150 --> 00:03:34,510
production product but if you're just

00:03:32,980 --> 00:03:36,760
prototyping and you want to iterate

00:03:34,510 --> 00:03:40,120
quickly sheets give you a lot of

00:03:36,760 --> 00:03:43,239
advantages I don't know about you though

00:03:40,120 --> 00:03:45,100
but I do not enjoy entering and

00:03:43,239 --> 00:03:46,600
manipulating data in spreadsheets but

00:03:45,100 --> 00:03:49,510
it's because it's not something that I

00:03:46,600 --> 00:03:51,280
do all the time I do think though that

00:03:49,510 --> 00:03:53,170
sheets are an awesome tool for the

00:03:51,280 --> 00:03:56,470
output and especially for beautiful

00:03:53,170 --> 00:03:58,470
visualizations like this one and so

00:03:56,470 --> 00:04:01,690
that's why we're going to use that today

00:03:58,470 --> 00:04:04,060
but because the manual parts aren't fun

00:04:01,690 --> 00:04:06,040
we're going to eliminate them and

00:04:04,060 --> 00:04:08,170
instead automate them and because we're

00:04:06,040 --> 00:04:10,510
at node and J is interactive and we love

00:04:08,170 --> 00:04:12,640
node we're going to use that I mean you

00:04:10,510 --> 00:04:14,170
heard Franz he's a node core contributor

00:04:12,640 --> 00:04:16,060
and on the technical steering committee

00:04:14,170 --> 00:04:18,760
and she talks about how awesome note is

00:04:16,060 --> 00:04:21,100
a lot and it's it's a good influence

00:04:18,760 --> 00:04:23,020
before I was working with her I

00:04:21,100 --> 00:04:24,580
definitely gravitated towards Python in

00:04:23,020 --> 00:04:26,830
Java because that was what I was more

00:04:24,580 --> 00:04:28,629
comfortable with but especially now that

00:04:26,830 --> 00:04:30,789
sink away it makes things more readable

00:04:28,629 --> 00:04:33,699
I definitely gravitate more towards node

00:04:30,789 --> 00:04:35,439
for that automating alright so we're

00:04:33,699 --> 00:04:37,569
gonna start by writing this node

00:04:35,439 --> 00:04:40,000
application to work with sheets we're

00:04:37,569 --> 00:04:41,590
going to install the Google API is

00:04:40,000 --> 00:04:44,439
client library from the NPM registry

00:04:41,590 --> 00:04:46,240
like so and it's a full-fledged

00:04:44,439 --> 00:04:48,580
API for talking to sheets that we're

00:04:46,240 --> 00:04:50,500
going to use but before we dive in I do

00:04:48,580 --> 00:04:52,629
want to give a quick shout out to the G

00:04:50,500 --> 00:04:54,490
suite api's as a whole if you're not

00:04:52,629 --> 00:04:56,860
sure we've been using this term G suite

00:04:54,490 --> 00:04:59,169
a lot it's our family of productivity

00:04:56,860 --> 00:05:00,669
tools so it's not just sheets which

00:04:59,169 --> 00:05:03,759
we're focusing on today but it's also

00:05:00,669 --> 00:05:05,530
Docs slides gmail calendar among other

00:05:03,759 --> 00:05:07,990
things and you can call all of those

00:05:05,530 --> 00:05:09,580
api's for free which is awesome cuz free

00:05:07,990 --> 00:05:12,039
stuff is great you don't have to have an

00:05:09,580 --> 00:05:14,530
enterprise account and as Fonzie said

00:05:12,039 --> 00:05:16,599
earlier G suite is part of Google Cloud

00:05:14,530 --> 00:05:19,389
which also encompasses Google cloud

00:05:16,599 --> 00:05:21,099
platform so if you've ever played around

00:05:19,389 --> 00:05:23,860
with Google cloud platform and use those

00:05:21,099 --> 00:05:26,169
api's using the G suite API is pretty

00:05:23,860 --> 00:05:28,150
much the same it's the same account same

00:05:26,169 --> 00:05:30,370
family they are generated the same way

00:05:28,150 --> 00:05:33,550
you turn those api's on the same way

00:05:30,370 --> 00:05:34,900
which is great and if you are at this

00:05:33,550 --> 00:05:36,729
conference and maybe aren't a node

00:05:34,900 --> 00:05:38,379
person or maybe you're new to node fee

00:05:36,729 --> 00:05:40,479
or not we do have these client libraries

00:05:38,379 --> 00:05:42,490
and other languages but because we're at

00:05:40,479 --> 00:05:45,550
node and JIS interactive we are going to

00:05:42,490 --> 00:05:47,800
focus on node today so let's take a look

00:05:45,550 --> 00:05:49,599
at hello world in sheets this could just

00:05:47,800 --> 00:05:51,460
be a script that's running locally on my

00:05:49,599 --> 00:05:53,259
machine and we'll start by requiring

00:05:51,460 --> 00:05:56,740
that package that we just got from the

00:05:53,259 --> 00:05:58,870
NPM registry so we'll start by

00:05:56,740 --> 00:06:00,849
initializing the sheets client and then

00:05:58,870 --> 00:06:03,339
above that we see this string that has

00:06:00,849 --> 00:06:05,110
our scopes and so that's the level of

00:06:03,339 --> 00:06:07,779
access that we want to grant this script

00:06:05,110 --> 00:06:10,210
we know that files live in Google Drive

00:06:07,779 --> 00:06:12,250
with other file types like Docs and

00:06:10,210 --> 00:06:14,620
slides but specifically we only want to

00:06:12,250 --> 00:06:16,029
write to spreadsheets today I don't know

00:06:14,620 --> 00:06:17,860
about you but I get really nervous when

00:06:16,029 --> 00:06:19,779
any kind of application asks for

00:06:17,860 --> 00:06:21,520
permissions that I think they shouldn't

00:06:19,779 --> 00:06:24,039
have like wanting to get into my Drive

00:06:21,520 --> 00:06:25,509
folders and see everything in my emails

00:06:24,039 --> 00:06:27,819
in my location history and my mother's

00:06:25,509 --> 00:06:30,430
maiden name like we don't want that best

00:06:27,819 --> 00:06:33,940
practice is definitely to restrict to

00:06:30,430 --> 00:06:36,430
only what we need so here we're going to

00:06:33,940 --> 00:06:38,889
make our hello world call and we're

00:06:36,430 --> 00:06:40,070
going to say which cell or cells we want

00:06:38,889 --> 00:06:42,200
to put

00:06:40,070 --> 00:06:44,000
into in sheets so in cheese we use

00:06:42,200 --> 00:06:46,700
what's called a1 notation and that's

00:06:44,000 --> 00:06:48,590
because a1 is that cell that's in the

00:06:46,700 --> 00:06:49,730
top left corner of the sheet and that is

00:06:48,590 --> 00:06:52,280
where we're going to be writing our

00:06:49,730 --> 00:06:54,710
hello world today and we're also using

00:06:52,280 --> 00:06:56,660
async/await because we love that but if

00:06:54,710 --> 00:06:58,070
you did want to use a previous version

00:06:56,660 --> 00:07:00,080
of node you could do that with the

00:06:58,070 --> 00:07:02,480
script too and don't worry about trying

00:07:00,080 --> 00:07:04,520
to memorize it we have all this code on

00:07:02,480 --> 00:07:07,370
github and we'll show this link again at

00:07:04,520 --> 00:07:09,410
the end all right so here's what the

00:07:07,370 --> 00:07:11,630
code looks like when we run super cool

00:07:09,410 --> 00:07:13,730
hello world and a1 just like where we

00:07:11,630 --> 00:07:15,470
said it was going to be and I'm not sure

00:07:13,730 --> 00:07:16,670
if you remember from the last cell there

00:07:15,470 --> 00:07:19,220
was this variable that was called

00:07:16,670 --> 00:07:21,770
spreadsheet ID and this spreadsheet

00:07:19,220 --> 00:07:24,530
ideas in that red box at the top that's

00:07:21,770 --> 00:07:26,120
the same ID that you'd find in the

00:07:24,530 --> 00:07:28,130
browser with any spreadsheet you'd have

00:07:26,120 --> 00:07:31,580
open so that's what tells us to write to

00:07:28,130 --> 00:07:33,050
this Google sheet in particular all

00:07:31,580 --> 00:07:34,730
right but let's be real most the time

00:07:33,050 --> 00:07:38,210
you need to do more than just write

00:07:34,730 --> 00:07:40,580
hello world to one single cell and the

00:07:38,210 --> 00:07:43,190
best way to make multiple modifications

00:07:40,580 --> 00:07:45,710
to one sheet is to batch your requests

00:07:43,190 --> 00:07:48,710
together in this method this batch

00:07:45,710 --> 00:07:52,160
update request is very common across all

00:07:48,710 --> 00:07:54,260
of the G suite api's so why should you

00:07:52,160 --> 00:07:56,870
group your requests there are two main

00:07:54,260 --> 00:07:58,160
reasons the first is that every call is

00:07:56,870 --> 00:07:59,660
going to have a little bit of network

00:07:58,160 --> 00:08:02,090
latency so if you group them together

00:07:59,660 --> 00:08:04,310
you can save yourself from that and the

00:08:02,090 --> 00:08:06,620
second is that while the api's are free

00:08:04,310 --> 00:08:08,390
there is a quota so if you back to your

00:08:06,620 --> 00:08:10,730
requests together they will count as one

00:08:08,390 --> 00:08:13,370
towards your quota instead of many so

00:08:10,730 --> 00:08:15,530
definitely want to optimize for that so

00:08:13,370 --> 00:08:17,360
each of these like mysterious tasks

00:08:15,530 --> 00:08:19,790
could be a different kind of request

00:08:17,360 --> 00:08:21,230
like it could be writing data like we

00:08:19,790 --> 00:08:23,060
did with hello world or it could be

00:08:21,230 --> 00:08:25,700
adding a chart or formatting a cell or

00:08:23,060 --> 00:08:28,820
deleting your sheet altogether filtering

00:08:25,700 --> 00:08:31,790
your data if you name it like if it's in

00:08:28,820 --> 00:08:33,950
the Google sheets UI you can do it in

00:08:31,790 --> 00:08:35,930
the API which is pretty great we say

00:08:33,950 --> 00:08:38,150
it's like a big hammer for all kinds of

00:08:35,930 --> 00:08:41,150
things you can do or insert your

00:08:38,150 --> 00:08:43,370
favorite tool I don't know so we have

00:08:41,150 --> 00:08:45,920
this basic toolkit for working with the

00:08:43,370 --> 00:08:47,900
sheets API and we're doing it in node so

00:08:45,920 --> 00:08:49,880
let's talk about a real-world problem I

00:08:47,900 --> 00:08:51,020
don't sit in the same offices from they

00:08:49,880 --> 00:08:52,980
were across the country from each other

00:08:51,020 --> 00:08:54,720
but one thing we do have in common

00:08:52,980 --> 00:08:57,180
is our love of open source and we also

00:08:54,720 --> 00:08:59,220
both really love the insights tab and

00:08:57,180 --> 00:09:01,560
github it tells you so much about your

00:08:59,220 --> 00:09:04,920
project and I know Franz II there's a

00:09:01,560 --> 00:09:07,709
lot of looking at open issues and PRS so

00:09:04,920 --> 00:09:10,860
we're looking at that nodejs node repo

00:09:07,709 --> 00:09:12,120
the node core node runtime right now and

00:09:10,860 --> 00:09:15,300
if you're to go there you could see all

00:09:12,120 --> 00:09:16,800
the changes going in for node 14 and

00:09:15,300 --> 00:09:18,930
Franti is really concerned with the

00:09:16,800 --> 00:09:22,139
health of the node runtime overall and

00:09:18,930 --> 00:09:23,820
is a very metrics oriented person but

00:09:22,139 --> 00:09:26,100
the thing about the insights tab is it

00:09:23,820 --> 00:09:27,839
really only tells you info about github

00:09:26,100 --> 00:09:29,250
they're just numbers like what is nine

00:09:27,839 --> 00:09:31,050
hundred and one issues mean without

00:09:29,250 --> 00:09:33,870
additional context do we know if that's

00:09:31,050 --> 00:09:35,910
healthy or not for node and like it's

00:09:33,870 --> 00:09:38,399
because a lot of other factors affect

00:09:35,910 --> 00:09:40,139
productivity like if a product team were

00:09:38,399 --> 00:09:41,730
to come in and change a ton of

00:09:40,139 --> 00:09:45,089
requirements that's gonna change your

00:09:41,730 --> 00:09:46,320
velocity who's ever been there or if you

00:09:45,089 --> 00:09:48,360
were to have a ton of technical debt

00:09:46,320 --> 00:09:49,410
that can slow you down but on the other

00:09:48,360 --> 00:09:51,540
hand if you have really good test

00:09:49,410 --> 00:09:54,089
coverage in continuous integration that

00:09:51,540 --> 00:09:56,850
can make things good or what if like

00:09:54,089 --> 00:09:59,880
people are hangry and that makes them

00:09:56,850 --> 00:10:01,589
not as productive like you get it for

00:09:59,880 --> 00:10:05,250
Anzhi with a holistic picture of what

00:10:01,589 --> 00:10:06,839
goes into making the node repo healthy

00:10:05,250 --> 00:10:10,230
and what helps folks be more productive

00:10:06,839 --> 00:10:11,550
so we're gonna focus on the question

00:10:10,230 --> 00:10:13,260
that I mentioned there that's hard to

00:10:11,550 --> 00:10:16,350
define we're gonna be a little bit silly

00:10:13,260 --> 00:10:19,290
and we want an experiment to find out if

00:10:16,350 --> 00:10:21,930
food satisfaction yields better github

00:10:19,290 --> 00:10:23,550
metrics so this is a hard problem not

00:10:21,930 --> 00:10:25,889
just from a technical perspective but

00:10:23,550 --> 00:10:27,660
because it's a real-world problem - we

00:10:25,889 --> 00:10:31,380
have our contributors at their machines

00:10:27,660 --> 00:10:33,029
we have github we have food and we want

00:10:31,380 --> 00:10:34,920
to write a prototype to automate

00:10:33,029 --> 00:10:36,000
gathering information about all of those

00:10:34,920 --> 00:10:37,860
and that's what we're going to use

00:10:36,000 --> 00:10:39,899
sheets for the prototyping to manipulate

00:10:37,860 --> 00:10:42,060
the data and of course we're going to do

00:10:39,899 --> 00:10:44,579
it in node so that we can use node to

00:10:42,060 --> 00:10:49,139
monitor the node repo so let's start by

00:10:44,579 --> 00:10:52,199
breaking down that problem so my

00:10:49,139 --> 00:10:55,019
intuition is that when we're well fed we

00:10:52,199 --> 00:10:58,519
write better code but we care about

00:10:55,019 --> 00:11:01,740
metrics so let's start with the data

00:10:58,519 --> 00:11:03,720
node core is a very active repo and we

00:11:01,740 --> 00:11:05,529
would like to know how many open Pro

00:11:03,720 --> 00:11:07,360
requests do we have how many issues

00:11:05,529 --> 00:11:10,769
and how many peers are we merging and

00:11:07,360 --> 00:11:13,990
how many issues are we are we closing

00:11:10,769 --> 00:11:16,749
luckily the github API provides all this

00:11:13,990 --> 00:11:19,810
data for us and using octa kit the

00:11:16,749 --> 00:11:21,730
github the client for JavaScript it's

00:11:19,810 --> 00:11:24,249
very easy to get this data it's just a

00:11:21,730 --> 00:11:26,350
few straight-up API calls and we know

00:11:24,249 --> 00:11:29,949
how many open issues we have instead of

00:11:26,350 --> 00:11:31,990
looking at the website so I'm collecting

00:11:29,949 --> 00:11:34,389
this data by doing a few calls to the

00:11:31,990 --> 00:11:36,339
github API and then just like in the

00:11:34,389 --> 00:11:37,899
hello world example that leah showed us

00:11:36,339 --> 00:11:39,939
I use a Sheetz

00:11:37,899 --> 00:11:42,309
API call to write this data into a

00:11:39,939 --> 00:11:44,529
spreadsheet now obviously when I'm

00:11:42,309 --> 00:11:46,870
getting the data from github I could

00:11:44,529 --> 00:11:48,819
just copy it and then paste it into a

00:11:46,870 --> 00:11:51,399
spreadsheet that would work instead of

00:11:48,819 --> 00:11:53,319
talking to the API but it's manual work

00:11:51,399 --> 00:11:56,019
I have to do this every time I want to

00:11:53,319 --> 00:11:58,059
update the data and it's error-prone so

00:11:56,019 --> 00:12:00,009
I'd rather add another two lines to my

00:11:58,059 --> 00:12:03,670
script that already pulls the data and

00:12:00,009 --> 00:12:08,019
then push it writer to the spreadsheet

00:12:03,670 --> 00:12:11,199
by using the sheets API alright so now

00:12:08,019 --> 00:12:13,480
for the food part um we left surveys so

00:12:11,199 --> 00:12:15,550
we just did a survey where we figured

00:12:13,480 --> 00:12:17,589
out how happy the node contributors in

00:12:15,550 --> 00:12:19,959
our office are with their food on a

00:12:17,589 --> 00:12:25,180
given day clearly this is very

00:12:19,959 --> 00:12:27,579
scientific we're using the the Google

00:12:25,180 --> 00:12:28,870
Form for Google survey if you've used it

00:12:27,579 --> 00:12:31,149
before the results are already

00:12:28,870 --> 00:12:33,670
automatically stored in a spreadsheet if

00:12:31,149 --> 00:12:36,160
you use anything else to gather gather

00:12:33,670 --> 00:12:38,019
your data just do another sheets API

00:12:36,160 --> 00:12:41,319
call to write a to the spreadsheet just

00:12:38,019 --> 00:12:43,899
like we did with the github data alright

00:12:41,319 --> 00:12:45,790
so now we have both the data for food

00:12:43,899 --> 00:12:48,129
and for github and we want to know are

00:12:45,790 --> 00:12:50,410
there any correlations what's a good way

00:12:48,129 --> 00:12:54,730
to find correlations well if we can

00:12:50,410 --> 00:12:57,309
visualize the data that would help us so

00:12:54,730 --> 00:12:59,410
here's the chart we'll look at the

00:12:57,309 --> 00:13:01,600
results in detail later for now we're

00:12:59,410 --> 00:13:03,699
interested in how did we generate this

00:13:01,600 --> 00:13:05,949
chart of course you can click in the UI

00:13:03,699 --> 00:13:07,540
to generate a chart but we don't want to

00:13:05,949 --> 00:13:09,610
use the browser we don't want to open

00:13:07,540 --> 00:13:11,949
sheets we want to script all of this so

00:13:09,610 --> 00:13:14,559
we don't make any mistakes that we don't

00:13:11,949 --> 00:13:17,620
do any manual labor

00:13:14,559 --> 00:13:18,460
and yes this you guys did an API call to

00:13:17,620 --> 00:13:22,060
generate

00:13:18,460 --> 00:13:24,820
chart so what does the code look like we

00:13:22,060 --> 00:13:26,230
create an ad chart request and we have

00:13:24,820 --> 00:13:29,770
to define the chart and its

00:13:26,230 --> 00:13:32,830
specifications so here we are defining

00:13:29,770 --> 00:13:35,140
the chart type we're picking a line

00:13:32,830 --> 00:13:38,020
chart and then we have to specify the

00:13:35,140 --> 00:13:40,240
domain so the x-axis of your chart in

00:13:38,020 --> 00:13:42,430
our case that's the different dates that

00:13:40,240 --> 00:13:44,350
were interested in and then we also have

00:13:42,430 --> 00:13:46,240
to enter this series two different data

00:13:44,350 --> 00:13:49,300
points we have from github and from the

00:13:46,240 --> 00:13:51,640
food survey and once we've defined the

00:13:49,300 --> 00:13:53,440
chart then we call this badge update

00:13:51,640 --> 00:13:58,620
method that can do pretty much anything

00:13:53,440 --> 00:14:01,480
for us and we send the add chart request

00:13:58,620 --> 00:14:03,070
all right so we started with these data

00:14:01,480 --> 00:14:05,350
so it says we have some data from the

00:14:03,070 --> 00:14:09,160
github API we have some data from a form

00:14:05,350 --> 00:14:11,080
and then we do a write API call to the

00:14:09,160 --> 00:14:13,960
sheets API to put this data into the

00:14:11,080 --> 00:14:18,790
sheet and we do another API call to

00:14:13,960 --> 00:14:21,370
generate a chart for us and if we do

00:14:18,790 --> 00:14:22,000
this we never have to open a sheet in a

00:14:21,370 --> 00:14:24,400
browser

00:14:22,000 --> 00:14:26,470
all our scripts run locally so we can

00:14:24,400 --> 00:14:28,450
decide what node version we want how to

00:14:26,470 --> 00:14:30,250
run it and all that it's just a little

00:14:28,450 --> 00:14:33,070
script that we run the talks to the

00:14:30,250 --> 00:14:39,700
sheet API but Lia is going to take this

00:14:33,070 --> 00:14:41,470
one step further now thanks franzine all

00:14:39,700 --> 00:14:44,290
right so at this point we're gathering

00:14:41,470 --> 00:14:46,840
data we're getting insights but it is

00:14:44,290 --> 00:14:48,160
only running locally on one machine for

00:14:46,840 --> 00:14:50,020
Anzhi knives and across the country from

00:14:48,160 --> 00:14:52,660
each other this is not going to be super

00:14:50,020 --> 00:14:54,520
great for collaborating if it is only on

00:14:52,660 --> 00:14:56,430
one machine locally so we should

00:14:54,520 --> 00:14:58,810
probably be hosting it as a service

00:14:56,430 --> 00:15:00,880
ideally it would be like a full-fledged

00:14:58,810 --> 00:15:03,400
application but we need a client and a

00:15:00,880 --> 00:15:05,440
server and I mean if we really want to

00:15:03,400 --> 00:15:07,720
be abiding by good cloud principles

00:15:05,440 --> 00:15:09,190
there would be high availability fault

00:15:07,720 --> 00:15:11,080
tolerance which would mean multiple

00:15:09,190 --> 00:15:12,790
servers and load balancing and a cache

00:15:11,080 --> 00:15:15,070
and that's a lot of pieces we said this

00:15:12,790 --> 00:15:17,080
was a prototype let's not we want to

00:15:15,070 --> 00:15:19,900
focus on our code not our infrastructure

00:15:17,080 --> 00:15:21,850
so instead we decided to go with a

00:15:19,900 --> 00:15:23,710
server list solution which in Google

00:15:21,850 --> 00:15:25,690
cloud platform is called Google cloud

00:15:23,710 --> 00:15:28,750
functions so you just upload those

00:15:25,690 --> 00:15:30,790
narrow focus bits of codes to GCP and

00:15:28,750 --> 00:15:31,720
the cloud provider figures out where to

00:15:30,790 --> 00:15:33,250
put it not ASCII

00:15:31,720 --> 00:15:35,230
on your behalf you don't have to know

00:15:33,250 --> 00:15:37,240
anything about the machines that it's

00:15:35,230 --> 00:15:38,860
running on and you only pay for one it's

00:15:37,240 --> 00:15:41,200
executing you don't have to manage your

00:15:38,860 --> 00:15:42,910
servers Security's taken care of you can

00:15:41,200 --> 00:15:44,950
use the languages tools and frameworks

00:15:42,910 --> 00:15:46,960
you're familiar with so if it's node

00:15:44,950 --> 00:15:49,920
you're doing it and Express python is

00:15:46,960 --> 00:15:53,130
flask there's also go in Java runtimes

00:15:49,920 --> 00:15:55,990
when they're triggered by various events

00:15:53,130 --> 00:15:59,680
so there are two types of events in

00:15:55,990 --> 00:16:01,450
cloud functions and we have there's like

00:15:59,680 --> 00:16:02,890
background functions that are triggered

00:16:01,450 --> 00:16:06,160
by events like if you upload something

00:16:02,890 --> 00:16:08,560
to a cloud storage bucket or send a

00:16:06,160 --> 00:16:10,900
pub/sub message or it can be triggered

00:16:08,560 --> 00:16:13,000
by an HTTP function which is what we're

00:16:10,900 --> 00:16:15,130
going to focus on today so those are

00:16:13,000 --> 00:16:17,140
great for processing data are calling

00:16:15,130 --> 00:16:19,060
external services I know in the real

00:16:17,140 --> 00:16:21,790
world folks use them to talk to things

00:16:19,060 --> 00:16:23,500
like stripe and Twilio so let's take a

00:16:21,790 --> 00:16:26,740
look at the hello world for functions

00:16:23,500 --> 00:16:29,260
for HTTP functions when I say function

00:16:26,740 --> 00:16:30,670
do I mean a function yeah it's only two

00:16:29,260 --> 00:16:33,370
lines of code and we have a fully

00:16:30,670 --> 00:16:35,650
functioning back-end which is super cool

00:16:33,370 --> 00:16:37,660
if you've used Express before those

00:16:35,650 --> 00:16:39,160
requests and response objects should

00:16:37,660 --> 00:16:41,980
look pretty familiar that's where

00:16:39,160 --> 00:16:44,470
they're from and so with all of this no

00:16:41,980 --> 00:16:47,020
additional configuration you end up with

00:16:44,470 --> 00:16:49,600
an HTTP endpoint at a fully qualified

00:16:47,020 --> 00:16:51,610
domain with dynamically generated SSL

00:16:49,600 --> 00:16:54,640
TLS certificates and that's what it

00:16:51,610 --> 00:16:55,900
would look like in the browser okay so

00:16:54,640 --> 00:16:57,370
now that we're familiar with cloud

00:16:55,900 --> 00:16:58,870
functions we're gonna wrap up the code

00:16:57,370 --> 00:17:00,670
we have in our local script and deploy

00:16:58,870 --> 00:17:02,710
it there so we have our service back-end

00:17:00,670 --> 00:17:04,480
it'll read that data from the sources

00:17:02,710 --> 00:17:06,130
and produce the chart while running in

00:17:04,480 --> 00:17:08,170
the data center so franzine I can

00:17:06,130 --> 00:17:11,439
actually be useful to each other sitting

00:17:08,170 --> 00:17:12,790
in our offices all right so what we're

00:17:11,439 --> 00:17:14,500
gonna do is we're gonna take the code we

00:17:12,790 --> 00:17:17,110
already have and wrap it up in an

00:17:14,500 --> 00:17:18,520
exported function called github chart to

00:17:17,110 --> 00:17:20,589
call our main logic and then when the

00:17:18,520 --> 00:17:22,270
processing is done we'll send that 200

00:17:20,589 --> 00:17:24,939
success just like we did in the hello

00:17:22,270 --> 00:17:27,420
world and we'll send also the ID of the

00:17:24,939 --> 00:17:29,560
spreadsheet that we've been working with

00:17:27,420 --> 00:17:32,590
okay so how do we actually do this

00:17:29,560 --> 00:17:35,290
deployment we did it using the G cloud

00:17:32,590 --> 00:17:37,480
CLI tool which is what you can use to

00:17:35,290 --> 00:17:39,070
manage all of your GCP tasks and for

00:17:37,480 --> 00:17:41,500
cloud functions you just pass the name

00:17:39,070 --> 00:17:43,150
of the function that you're going to use

00:17:41,500 --> 00:17:45,410
and then also we specified that it's an

00:17:43,150 --> 00:17:48,530
HTTP trigger

00:17:45,410 --> 00:17:50,870
and it uploads your code and it picks up

00:17:48,530 --> 00:17:53,270
the package.json which is great but not

00:17:50,870 --> 00:17:55,220
the modules because that would be a ton

00:17:53,270 --> 00:17:56,660
of stuff and so this is great for if

00:17:55,220 --> 00:17:58,490
your internet connection is not super

00:17:56,660 --> 00:18:01,340
duper and those dependencies are then

00:17:58,490 --> 00:18:03,830
downloaded in the cloud and used by it

00:18:01,340 --> 00:18:05,960
you could also edit the package.json and

00:18:03,830 --> 00:18:08,180
the function if you wanted to in this UI

00:18:05,960 --> 00:18:10,880
the cloud console which is nice for

00:18:08,180 --> 00:18:13,160
quick fixes I love a command-line but I

00:18:10,880 --> 00:18:16,040
do also love a useful UI especially for

00:18:13,160 --> 00:18:17,960
a quick fix all right so at this point

00:18:16,040 --> 00:18:19,760
our codes in the cloud which is sweet

00:18:17,960 --> 00:18:21,800
but it still needs to be triggered

00:18:19,760 --> 00:18:23,480
manually if you're doing something where

00:18:21,800 --> 00:18:25,130
you want to be pulling in data regularly

00:18:23,480 --> 00:18:26,840
you don't want it to be triggered

00:18:25,130 --> 00:18:29,090
manually that stinks that means you have

00:18:26,840 --> 00:18:31,430
to remember to do it so instead of

00:18:29,090 --> 00:18:34,670
needing a human we chose to use cloud

00:18:31,430 --> 00:18:37,910
scheduler to run our code it's basically

00:18:34,670 --> 00:18:39,770
a big fancy cron in the cloud you set up

00:18:37,910 --> 00:18:42,320
the cron job in the cloud console that's

00:18:39,770 --> 00:18:44,780
the same UI that you can use for cloud

00:18:42,320 --> 00:18:47,030
functions and you use the same syntax as

00:18:44,780 --> 00:18:49,040
if you're using normal cron our job runs

00:18:47,030 --> 00:18:51,950
every morning at 9:00 and we specified

00:18:49,040 --> 00:18:53,840
that HTTP URL to trigger that cloud

00:18:51,950 --> 00:18:56,720
function and so at this point we have

00:18:53,840 --> 00:18:57,860
the data collection job in the back end

00:18:56,720 --> 00:19:05,660
and Franzese gonna talk you through

00:18:57,860 --> 00:19:07,430
you're adding a client all right so we

00:19:05,660 --> 00:19:10,160
have two code in the cloud but we have

00:19:07,430 --> 00:19:12,170
to remember that we add URL for the HTTP

00:19:10,160 --> 00:19:16,480
endpoint and would be just a little more

00:19:12,170 --> 00:19:19,820
convenient if we had a UI client for it

00:19:16,480 --> 00:19:22,430
so we did that we added a client that

00:19:19,820 --> 00:19:24,890
shows you the chart and if you click on

00:19:22,430 --> 00:19:27,020
share analysis the data is updated once

00:19:24,890 --> 00:19:29,060
more and then the new chart is sent out

00:19:27,020 --> 00:19:30,800
to all your teammates so we have two

00:19:29,060 --> 00:19:32,630
data updating at 9:00 a.m. every morning

00:19:30,800 --> 00:19:34,880
anyways but we don't want to spam

00:19:32,630 --> 00:19:37,280
everybody daily so we're only sending

00:19:34,880 --> 00:19:39,290
out emails if somebody consciously

00:19:37,280 --> 00:19:41,030
clicks touche analysis button and a

00:19:39,290 --> 00:19:43,190
front-end that's that's why we have to

00:19:41,030 --> 00:19:45,560
front it and since we are sending out

00:19:43,190 --> 00:19:49,790
emails we're using a gmail API for this

00:19:45,560 --> 00:19:51,440
task just like in the service no js'

00:19:49,790 --> 00:19:54,080
code we have client libraries for

00:19:51,440 --> 00:19:56,210
front-end JavaScript as well and again

00:19:54,080 --> 00:19:57,830
those make it much easier to talk to the

00:19:56,210 --> 00:19:58,669
Google REST API than if you were to

00:19:57,830 --> 00:20:00,919
directly

00:19:58,669 --> 00:20:03,320
script against the rest interface so

00:20:00,919 --> 00:20:05,869
we're doing Gmail that users that

00:20:03,320 --> 00:20:08,509
messages that sent and we pass in as a

00:20:05,869 --> 00:20:13,009
resource to Raw email which can be HTML

00:20:08,509 --> 00:20:15,350
or plain text so now we have the

00:20:13,009 --> 00:20:17,690
front-end order crunch up the triggers

00:20:15,350 --> 00:20:21,379
our cloud function and then the cloud

00:20:17,690 --> 00:20:23,509
function pulls in the new data and the

00:20:21,379 --> 00:20:25,759
cloud function also generates a new

00:20:23,509 --> 00:20:28,850
chart and then the Gmail API and the

00:20:25,759 --> 00:20:31,399
front-end sends out the new charge of

00:20:28,850 --> 00:20:33,830
the team members all right pretty easy

00:20:31,399 --> 00:20:36,440
so far right start the whole story

00:20:33,830 --> 00:20:42,169
though what's the big thing that we left

00:20:36,440 --> 00:20:44,690
out we left out off we never mentioned

00:20:42,169 --> 00:20:46,909
that and we are we're sending emails

00:20:44,690 --> 00:20:48,649
pretending to be somebody and we're

00:20:46,909 --> 00:20:51,200
reading and writing spreadsheets and

00:20:48,649 --> 00:20:53,450
clearly I don't want people to be able

00:20:51,200 --> 00:20:55,070
to read my spreadsheets just because

00:20:53,450 --> 00:20:58,039
they figured out how to use the sheets

00:20:55,070 --> 00:21:01,190
API that's not a good security model so

00:20:58,039 --> 00:21:05,149
let's look at how authorization works in

00:21:01,190 --> 00:21:07,879
our app in the front end we actually

00:21:05,149 --> 00:21:10,940
have a little authorize or login button

00:21:07,879 --> 00:21:16,809
and when people click that then the

00:21:10,940 --> 00:21:19,759
Google sign-in flow is triggered and

00:21:16,809 --> 00:21:22,850
Google sign-in is a secure send occation

00:21:19,759 --> 00:21:25,070
system that allows you users to log in

00:21:22,850 --> 00:21:28,399
with their Google account that they

00:21:25,070 --> 00:21:30,999
already have and then they can authorize

00:21:28,399 --> 00:21:33,409
your apps in this case to send emails

00:21:30,999 --> 00:21:36,799
they can authorize your app to use

00:21:33,409 --> 00:21:39,080
Google services on behalf of these end

00:21:36,799 --> 00:21:41,769
users and all of this is happening in a

00:21:39,080 --> 00:21:41,769
secure manner

00:21:47,670 --> 00:21:53,760
all right so Google uses the OAuth 2

00:21:50,670 --> 00:21:55,740
protocol and the application needs user

00:21:53,760 --> 00:21:57,630
consent before it can access the data

00:21:55,740 --> 00:21:59,580
just like you saw the end user has to

00:21:57,630 --> 00:22:02,070
consent to send out emails on their

00:21:59,580 --> 00:22:04,680
behalf and the key point of OAuth 2 is

00:22:02,070 --> 00:22:06,930
that the application does not have to

00:22:04,680 --> 00:22:08,940
use as credentials the users locked in

00:22:06,930 --> 00:22:10,740
but they didn't login to your app they

00:22:08,940 --> 00:22:13,140
locked into the Google auth service and

00:22:10,740 --> 00:22:14,910
then they only gave consent so that's a

00:22:13,140 --> 00:22:16,890
big plus because you don't have to worry

00:22:14,910 --> 00:22:19,080
about storing these credential security

00:22:16,890 --> 00:22:21,540
securely because you don't get them

00:22:19,080 --> 00:22:23,460
always to relies on consent not on

00:22:21,540 --> 00:22:26,550
credentials let's look at how this

00:22:23,460 --> 00:22:29,040
protocol works in detail so more

00:22:26,550 --> 00:22:32,100
specifically the authorization flow is

00:22:29,040 --> 00:22:33,690
called three-legged OAuth it's three-leg

00:22:32,100 --> 00:22:36,600
because there are three entities

00:22:33,690 --> 00:22:38,820
so there's your application there the

00:22:36,600 --> 00:22:43,320
Google service and then there are the

00:22:38,820 --> 00:22:45,210
end users so when your application wants

00:22:43,320 --> 00:22:48,330
to make a request to the Google server

00:22:45,210 --> 00:22:51,030
then the user is prompted to login and

00:22:48,330 --> 00:22:53,070
to consent and if they do so

00:22:51,030 --> 00:22:55,980
successfully then your application

00:22:53,070 --> 00:22:58,110
receives a token and after validating

00:22:55,980 --> 00:23:00,510
the token the application can use this

00:22:58,110 --> 00:23:07,320
token to make API calls to the Google

00:23:00,510 --> 00:23:09,450
applet luckily the client libraries

00:23:07,320 --> 00:23:12,150
handle this somewhat complicated

00:23:09,450 --> 00:23:13,830
workflow for you one thing that Lea

00:23:12,150 --> 00:23:16,200
showed us earlier was that you have to

00:23:13,830 --> 00:23:18,060
specify the scope so just like in the

00:23:16,200 --> 00:23:20,640
back end and the front end we have to

00:23:18,060 --> 00:23:21,600
specify the scope before initializing

00:23:20,640 --> 00:23:24,180
the Google client

00:23:21,600 --> 00:23:26,460
so here the scope is for Gmail that sent

00:23:24,180 --> 00:23:28,770
and that's why the sign-in flow said do

00:23:26,460 --> 00:23:32,670
you consent to this application sending

00:23:28,770 --> 00:23:35,190
emails on your behalf now if the user

00:23:32,670 --> 00:23:37,710
agrees to that and then your app gets a

00:23:35,190 --> 00:23:39,780
token back and now you take this valid

00:23:37,710 --> 00:23:42,150
token and you try to read the user

00:23:39,780 --> 00:23:44,070
spreadsheets even though it's a valid

00:23:42,150 --> 00:23:47,280
token it's not valid for the spreadsheet

00:23:44,070 --> 00:23:49,320
scopes you get a 4:3 so only what the

00:23:47,280 --> 00:23:52,320
user consented to and that's specified

00:23:49,320 --> 00:23:56,910
by the scope that you pass in is makes

00:23:52,320 --> 00:23:58,830
the token valid for all right so in the

00:23:56,910 --> 00:24:00,630
front end we have an end user clicking

00:23:58,830 --> 00:24:01,530
the login button we use three-legged

00:24:00,630 --> 00:24:04,020
OAuth with and

00:24:01,530 --> 00:24:05,430
user consent how do we handle us in the

00:24:04,020 --> 00:24:07,890
backend where we just have a cloud

00:24:05,430 --> 00:24:09,990
function talking to the sheets API but

00:24:07,890 --> 00:24:12,890
no end users it's it's a server less

00:24:09,990 --> 00:24:16,770
cloud function no front and no nothing

00:24:12,890 --> 00:24:18,750
well we since end users are not directly

00:24:16,770 --> 00:24:22,110
involved we use server-to-server

00:24:18,750 --> 00:24:24,870
authentication and in this case the

00:24:22,110 --> 00:24:28,860
spreadsheet belongs to the application

00:24:24,870 --> 00:24:31,200
rather than to an end user heads-up

00:24:28,860 --> 00:24:33,600
though whenever you work on a production

00:24:31,200 --> 00:24:36,420
app not just a little prototype like we

00:24:33,600 --> 00:24:38,550
did you always want to use three Legos

00:24:36,420 --> 00:24:40,710
for anything involving G suite so when

00:24:38,550 --> 00:24:43,230
you work with with Docs or sheets or

00:24:40,710 --> 00:24:45,690
slides or the file drive you always want

00:24:43,230 --> 00:24:49,200
to use three leg hours and use end-user

00:24:45,690 --> 00:24:51,030
consent the reason is if this is a

00:24:49,200 --> 00:24:52,530
production app and you have millions of

00:24:51,030 --> 00:24:55,500
users and all of a sudden this

00:24:52,530 --> 00:24:57,570
application owns millions of documents

00:24:55,500 --> 00:25:00,420
and spreadsheets and that's way over the

00:24:57,570 --> 00:25:03,300
quota so your default is whenever you

00:25:00,420 --> 00:25:06,480
use Docs or access like that use

00:25:03,300 --> 00:25:08,310
three-legged OAuth in our little

00:25:06,480 --> 00:25:10,710
prototype though we don't worry about

00:25:08,310 --> 00:25:12,480
that we just have one team looking at

00:25:10,710 --> 00:25:13,830
this it's not a million files it's one

00:25:12,480 --> 00:25:16,380
spreadsheet so we can just do

00:25:13,830 --> 00:25:18,870
server-to-server earth this is also

00:25:16,380 --> 00:25:21,150
referred to as two-leggers can anybody

00:25:18,870 --> 00:25:22,740
guess why Wow

00:25:21,150 --> 00:25:24,600
there's only two entities involved

00:25:22,740 --> 00:25:26,370
obviously there's no end-user

00:25:24,600 --> 00:25:28,950
there's your application and there's the

00:25:26,370 --> 00:25:31,200
Google service and for server-to-server

00:25:28,950 --> 00:25:33,630
authentication you can make your

00:25:31,200 --> 00:25:36,210
authorized API calls using a JSON web

00:25:33,630 --> 00:25:39,390
token a JIT instead of an access token

00:25:36,210 --> 00:25:41,040
and again if you use the client

00:25:39,390 --> 00:25:42,450
libraries they handle all of this for

00:25:41,040 --> 00:25:47,010
you so you don't have to worry about

00:25:42,450 --> 00:25:50,100
creating or signing a JIT so comparing

00:25:47,010 --> 00:25:52,860
three-leg and to like OS ours three leg

00:25:50,100 --> 00:25:56,130
is on behalf of end users it requires

00:25:52,860 --> 00:25:58,740
users consent and it's the best practice

00:25:56,130 --> 00:26:00,060
when you work with a G sweet API to

00:25:58,740 --> 00:26:02,820
elect is for server-to-server

00:26:00,060 --> 00:26:04,950
authentication it's on behalf of the

00:26:02,820 --> 00:26:07,140
application and the resources the

00:26:04,950 --> 00:26:09,890
documents deep have to belong to the

00:26:07,140 --> 00:26:09,890
application

00:26:12,660 --> 00:26:18,640
Thank You Franz you for that deep dive

00:26:15,160 --> 00:26:20,560
into off so like Franz II said this is

00:26:18,640 --> 00:26:23,020
handled for you by the client libraries

00:26:20,560 --> 00:26:24,760
which is awesome and if you wanted to

00:26:23,020 --> 00:26:26,860
take a look at our quick starts in our

00:26:24,760 --> 00:26:28,990
documentation they will walk you through

00:26:26,860 --> 00:26:30,880
the authentication path in just a few

00:26:28,990 --> 00:26:32,740
steps and just remember we want to use

00:26:30,880 --> 00:26:34,780
OAuth because we want tokens not

00:26:32,740 --> 00:26:37,630
passwords we don't want those stored in

00:26:34,780 --> 00:26:39,460
plain text ever but let's get back to

00:26:37,630 --> 00:26:41,410
the whole point of building this app we

00:26:39,460 --> 00:26:42,970
want to know if food satisfaction

00:26:41,410 --> 00:26:46,210
affects github repo health and

00:26:42,970 --> 00:26:48,130
productivity so we made a lot of charts

00:26:46,210 --> 00:26:49,960
showing food satisfaction against github

00:26:48,130 --> 00:26:51,970
metrics on the left side we have open

00:26:49,960 --> 00:26:54,010
issues in PRS and on the right side we

00:26:51,970 --> 00:26:56,560
have the happiness scale and the

00:26:54,010 --> 00:26:58,870
original survey ran from 1 to 5 where 5

00:26:56,560 --> 00:27:00,970
was the most happy so let's actually

00:26:58,870 --> 00:27:04,600
look at a smaller easier to read chart

00:27:00,970 --> 00:27:06,730
so this is closed in issues and merged

00:27:04,600 --> 00:27:08,710
PRS against food happiness food

00:27:06,730 --> 00:27:10,000
happiness is the red thick line that

00:27:08,710 --> 00:27:13,210
goes across with the hump in the middle

00:27:10,000 --> 00:27:14,980
and if you blue is the closed issues

00:27:13,210 --> 00:27:16,720
green as the merged PRS if you're not

00:27:14,980 --> 00:27:18,940
sure which is which the most important

00:27:16,720 --> 00:27:21,700
thing to note is that they all have that

00:27:18,940 --> 00:27:24,610
hump around the same time which makes us

00:27:21,700 --> 00:27:27,790
think that food satisfaction does affect

00:27:24,610 --> 00:27:29,830
github metrics which is cool but know

00:27:27,790 --> 00:27:31,720
that you could also use these things for

00:27:29,830 --> 00:27:33,520
other internal systems or application

00:27:31,720 --> 00:27:36,220
monitoring that's maybe not as silly as

00:27:33,520 --> 00:27:38,020
this but we do want to show you that we

00:27:36,220 --> 00:27:41,410
have the proof that good food yields

00:27:38,020 --> 00:27:43,210
good code we do want to add one last

00:27:41,410 --> 00:27:45,040
thing onto our system though another

00:27:43,210 --> 00:27:46,810
workflow we see a lot is that folks have

00:27:45,040 --> 00:27:48,790
to create reports of data regularly

00:27:46,810 --> 00:27:51,220
either for their managers or for a

00:27:48,790 --> 00:27:53,020
broader team meeting and they often have

00:27:51,220 --> 00:27:55,600
to do it at a repeated time interval

00:27:53,020 --> 00:27:57,100
like weekly monthly quarterly or sales

00:27:55,600 --> 00:27:59,500
folks have to make customized reports

00:27:57,100 --> 00:28:01,510
for their clients if you don't have to

00:27:59,500 --> 00:28:04,060
do it someone you work with somewhere

00:28:01,510 --> 00:28:05,710
probably does so we're gonna pretend

00:28:04,060 --> 00:28:08,800
that we want to approve our good friend

00:28:05,710 --> 00:28:10,210
good food trend continues over time and

00:28:08,800 --> 00:28:12,610
we're going to share this with folks all

00:28:10,210 --> 00:28:14,500
across the company in our report and

00:28:12,610 --> 00:28:17,500
we're going to script it because doing

00:28:14,500 --> 00:28:18,880
it manually it sounds awful I don't know

00:28:17,500 --> 00:28:20,920
if you've ever had to update one of

00:28:18,880 --> 00:28:24,110
these reports but doing it manually like

00:28:20,920 --> 00:28:27,679
it works you can start by copying an old

00:28:24,110 --> 00:28:30,950
and like moving in the new data but I

00:28:27,679 --> 00:28:34,280
know I'm prone to copypasta errors paste

00:28:30,950 --> 00:28:35,900
errors and it's very tedious so instead

00:28:34,280 --> 00:28:37,460
we're gonna create a template with

00:28:35,900 --> 00:28:39,740
placeholders for the things that we know

00:28:37,460 --> 00:28:41,870
we're going to replace like the current

00:28:39,740 --> 00:28:44,480
date and we're going to completely

00:28:41,870 --> 00:28:46,850
automate it so we'll have first the

00:28:44,480 --> 00:28:49,460
Google Drive API create a copy of this

00:28:46,850 --> 00:28:51,770
template every time we need it and we'll

00:28:49,460 --> 00:28:53,510
use the slides API to tie it all

00:28:51,770 --> 00:28:54,799
together in this spreadsheet so we'll

00:28:53,510 --> 00:28:56,540
initialize that client to make

00:28:54,799 --> 00:28:58,669
modifications and this should look a lot

00:28:56,540 --> 00:29:02,090
like the other Google G suite api's

00:28:58,669 --> 00:29:03,500
we've been using and if you remember in

00:29:02,090 --> 00:29:05,059
that template I showed a couple slides

00:29:03,500 --> 00:29:06,620
ago where we had the placeholder for the

00:29:05,059 --> 00:29:08,120
date in curly brackets that's what we're

00:29:06,620 --> 00:29:10,070
highlighting here that's what we want to

00:29:08,120 --> 00:29:11,780
replace and we want to use a replace

00:29:10,070 --> 00:29:15,470
text call to replace it with today's

00:29:11,780 --> 00:29:17,450
date and if you weren't sure this is

00:29:15,470 --> 00:29:20,090
going to be a batch update we could also

00:29:17,450 --> 00:29:22,880
be making other replacements at the same

00:29:20,090 --> 00:29:24,919
time like if we wanted to submit the

00:29:22,880 --> 00:29:26,750
number of pull requests that were closed

00:29:24,919 --> 00:29:35,510
or issues at the same time we could do

00:29:26,750 --> 00:29:36,770
that in this call that is gross the good

00:29:35,510 --> 00:29:40,090
news is is we only have a few more

00:29:36,770 --> 00:29:40,090
slides hello

00:29:44,980 --> 00:29:47,400
it did

00:29:51,940 --> 00:29:54,630
okay

00:30:00,680 --> 00:30:03,950
it's okay

00:30:18,119 --> 00:30:20,809
okay

00:30:36,500 --> 00:30:42,710
sweet alright so now we're gonna figure

00:30:39,799 --> 00:30:44,780
out how to add our charts so it's nice

00:30:42,710 --> 00:30:46,400
about the api's is they're just as

00:30:44,780 --> 00:30:48,530
tightly coupled as the products

00:30:46,400 --> 00:30:50,809
themselves are so slides has an API

00:30:48,530 --> 00:30:54,470
called I can insert insert a Google

00:30:50,809 --> 00:30:55,909
sheets chart just by its chart ID so you

00:30:54,470 --> 00:30:58,340
can generate these reports with up to

00:30:55,909 --> 00:31:00,559
date data no human intervention either

00:30:58,340 --> 00:31:02,360
save yourself or your co-workers tons of

00:31:00,559 --> 00:31:03,830
time you could become that person who

00:31:02,360 --> 00:31:06,740
has to generate the reports new best

00:31:03,830 --> 00:31:09,350
friend by teaching them this so just a

00:31:06,740 --> 00:31:12,610
quick review we designed a basic

00:31:09,350 --> 00:31:16,400
reporting system using node that calls

00:31:12,610 --> 00:31:18,890
Google cloud function using those two

00:31:16,400 --> 00:31:21,230
suite api's and it fetches data from

00:31:18,890 --> 00:31:23,720
external sources and shares that back to

00:31:21,230 --> 00:31:26,330
the user either through the Gmail or

00:31:23,720 --> 00:31:28,220
through an automated report in slides

00:31:26,330 --> 00:31:29,860
and at its core we're using sheets for

00:31:28,220 --> 00:31:31,880
the data collection in the manipulation

00:31:29,860 --> 00:31:34,070
so we wanted to know if the food

00:31:31,880 --> 00:31:36,140
effective github productivity maybe you

00:31:34,070 --> 00:31:37,610
wanted to know that too or maybe you

00:31:36,140 --> 00:31:39,470
want to take the solution to make it fit

00:31:37,610 --> 00:31:41,750
your needs if so this is where the code

00:31:39,470 --> 00:31:44,419
lives in github and we would love to

00:31:41,750 --> 00:31:46,760
inspire you to either try this or try

00:31:44,419 --> 00:31:49,010
something similar like be creative take

00:31:46,760 --> 00:31:50,870
a non-technical problem and try to solve

00:31:49,010 --> 00:31:52,640
it with the tools you use everyday or a

00:31:50,870 --> 00:31:53,480
tool that you want to try out so you can

00:31:52,640 --> 00:31:55,850
get better at it

00:31:53,480 --> 00:31:57,919
we also want to do a quick shout-out to

00:31:55,850 --> 00:31:59,780
our friend and colleague Anoosh revoir

00:31:57,919 --> 00:32:02,539
stiva who helped write a lot of this

00:31:59,780 --> 00:32:03,919
code to make this awesome thank you to

00:32:02,539 --> 00:32:05,780
the conference for having us and for you

00:32:03,919 --> 00:32:07,340
for coming well answer your questions

00:32:05,780 --> 00:32:08,780
probably in the hallway or at the Google

00:32:07,340 --> 00:32:11,250
booth because I think we're running low

00:32:08,780 --> 00:32:17,589
on time so thank you

00:32:11,250 --> 00:32:17,589

YouTube URL: https://www.youtube.com/watch?v=RIyo6bJznq8


