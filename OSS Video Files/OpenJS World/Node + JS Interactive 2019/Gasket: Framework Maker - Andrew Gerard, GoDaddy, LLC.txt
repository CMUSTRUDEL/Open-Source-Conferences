Title: Gasket: Framework Maker - Andrew Gerard, GoDaddy, LLC
Publication date: 2020-05-11
Playlist: Node + JS Interactive 2019
Description: 
	Gasket: Framework Maker - Andrew Gerard, GoDaddy, LLC
Speakers: Andrew Gerard
There is no one-size-fits-all framework, but there is a way to assemble frameworks in a common fashion. All that's needed to seal the junction between multiple technologies is a gasket.

Gasket is the pluggable tooling that GoDaddy developed to create a standardized framework with robust plugin system for our own apps. Learn how we use Gasket to bridge together technologies such as Next.js, Express, and Redux along with our internal services. Get a first look at Gasket as we open source it for others to start composing and sharing their own pluggable frameworks.
Captions: 
	00:00:00,030 --> 00:00:06,509
um so welcome thanks for being here for

00:00:03,360 --> 00:00:08,880
my talk today my name is Andrew Gerard

00:00:06,509 --> 00:00:12,030
I'm a software engineer at GoDaddy I've

00:00:08,880 --> 00:00:15,150
been with GoDaddy about four years and

00:00:12,030 --> 00:00:17,430
today I'm going to talk about gasket the

00:00:15,150 --> 00:00:20,100
framework maker

00:00:17,430 --> 00:00:22,260
so before GoDaddy I was a technical

00:00:20,100 --> 00:00:23,970
artist in game development as a tech

00:00:22,260 --> 00:00:27,869
artist I would build tools and processes

00:00:23,970 --> 00:00:30,929
for artists to build the craft and

00:00:27,869 --> 00:00:32,910
integrate their assets in the games now

00:00:30,929 --> 00:00:35,880
as a software engineer at GoDaddy I have

00:00:32,910 --> 00:00:37,710
a similar role and that is to help build

00:00:35,880 --> 00:00:42,780
tools and processes for for web

00:00:37,710 --> 00:00:45,840
developers now good ideas vision is to

00:00:42,780 --> 00:00:47,850
empower everyday entrepreneurs to build

00:00:45,840 --> 00:00:51,270
up their own businesses and establish an

00:00:47,850 --> 00:00:52,590
online presence and Gotha is not just in

00:00:51,270 --> 00:00:55,949
the domains business we have several

00:00:52,590 --> 00:00:57,780
products and for customers to to build

00:00:55,949 --> 00:00:59,280
their businesses with many of these

00:00:57,780 --> 00:01:01,500
products are in the form of

00:00:59,280 --> 00:01:03,780
customer-facing Web Apps but we also

00:01:01,500 --> 00:01:07,680
have several internal facing web apps

00:01:03,780 --> 00:01:11,130
for help developers help our

00:01:07,680 --> 00:01:13,670
organization and our customer care

00:01:11,130 --> 00:01:16,740
agents variety of different use cases

00:01:13,670 --> 00:01:18,840
and so we built something to help us

00:01:16,740 --> 00:01:21,000
develop all these apps which is what I

00:01:18,840 --> 00:01:23,310
want to tell you about today it's a

00:01:21,000 --> 00:01:25,950
really cool project we're announcing and

00:01:23,310 --> 00:01:29,640
releasing today as open source which we

00:01:25,950 --> 00:01:32,400
call a gasket now before we get into the

00:01:29,640 --> 00:01:34,560
nuts and bolts of what gaskey is when I

00:01:32,400 --> 00:01:36,840
lay some some groundwork and for the

00:01:34,560 --> 00:01:40,049
structure of the talk I'm going to first

00:01:36,840 --> 00:01:42,600
describe the problem that we're going to

00:01:40,049 --> 00:01:44,220
answer with gasket today and then point

00:01:42,600 --> 00:01:46,680
you to some ways you can use gasket

00:01:44,220 --> 00:01:51,720
yourselves and get involved with this

00:01:46,680 --> 00:01:54,360
new open source project okay so what is

00:01:51,720 --> 00:01:58,350
a framework before we dive into this

00:01:54,360 --> 00:02:00,570
consider what a framework is according

00:01:58,350 --> 00:02:03,689
to merriam-webster it's a basic

00:02:00,570 --> 00:02:06,689
conceptual structure as of ideas or a

00:02:03,689 --> 00:02:09,750
skeletal open-open work or structural

00:02:06,689 --> 00:02:11,520
frame to summarize that for our purposes

00:02:09,750 --> 00:02:13,560
as software engineers that give you said

00:02:11,520 --> 00:02:15,360
frameworks provide

00:02:13,560 --> 00:02:19,610
foundation for software developers to

00:02:15,360 --> 00:02:24,450
build applications in a streamlined way

00:02:19,610 --> 00:02:27,150
okay so how are frameworks made to start

00:02:24,450 --> 00:02:29,040
with I just kind of want to see where

00:02:27,150 --> 00:02:31,920
you guys are at who has worked on

00:02:29,040 --> 00:02:35,850
frameworks before or actively builds on

00:02:31,920 --> 00:02:43,200
okay and what about just no js' apps web

00:02:35,850 --> 00:02:44,850
apps or otherwise okay so let me make an

00:02:43,200 --> 00:02:47,100
argument here and kind of prove a point

00:02:44,850 --> 00:02:49,500
if you built an app before have you

00:02:47,100 --> 00:02:51,840
taken that app and build another app

00:02:49,500 --> 00:02:55,920
from the same ideas or the same kind of

00:02:51,840 --> 00:02:57,840
codebase you've done before okay and in

00:02:55,920 --> 00:03:00,180
general you could consider basically

00:02:57,840 --> 00:03:01,980
you've made yourself a framework and let

00:03:00,180 --> 00:03:06,150
me let me walk you through kind of this

00:03:01,980 --> 00:03:08,160
process and just to kind of see where

00:03:06,150 --> 00:03:10,709
I'm coming from here okay so I'm a

00:03:08,160 --> 00:03:12,600
visual person I put together some some

00:03:10,709 --> 00:03:14,840
visuals to help illustrate the concepts

00:03:12,600 --> 00:03:17,489
I'm speaking about during this talk so

00:03:14,840 --> 00:03:20,700
to start with to see we have a box and

00:03:17,489 --> 00:03:22,829
this box represents our app okay now

00:03:20,700 --> 00:03:25,079
we're going to build a front front-end

00:03:22,829 --> 00:03:26,310
web app and let's pick out some

00:03:25,079 --> 00:03:29,130
libraries we want to use

00:03:26,310 --> 00:03:30,989
okay maybe reason react for our renderer

00:03:29,130 --> 00:03:35,489
maybe we're using webpack for our

00:03:30,989 --> 00:03:38,040
bundler express for our survey engine so

00:03:35,489 --> 00:03:40,860
on and so forth okay finally we need to

00:03:38,040 --> 00:03:42,750
get all these integrated together so we

00:03:40,860 --> 00:03:45,870
write some code tie them all together

00:03:42,750 --> 00:03:50,130
the implementer app and we'll say this

00:03:45,870 --> 00:03:53,519
is our app okay now we've been tasked to

00:03:50,130 --> 00:03:55,350
build another app okay instead of doing

00:03:53,519 --> 00:03:58,760
all this work again probably what we'll

00:03:55,350 --> 00:04:01,140
do is just make a copy of that app and

00:03:58,760 --> 00:04:05,070
change up some of the application code

00:04:01,140 --> 00:04:07,920
and bam we have another app okay so we

00:04:05,070 --> 00:04:10,230
repeat this project in this process

00:04:07,920 --> 00:04:13,920
because we are you know app making

00:04:10,230 --> 00:04:15,299
machines now and but let's look at some

00:04:13,920 --> 00:04:18,930
of the problems with this approach who's

00:04:15,299 --> 00:04:20,640
taken okay say we find a bug over in

00:04:18,930 --> 00:04:24,180
this application somewhere in the

00:04:20,640 --> 00:04:24,630
integration code and say we make that

00:04:24,180 --> 00:04:26,420
fix

00:04:24,630 --> 00:04:28,940
now I deal

00:04:26,420 --> 00:04:31,130
we make that same fix across our other

00:04:28,940 --> 00:04:34,490
different apps that we have created okay

00:04:31,130 --> 00:04:36,860
we go through and do that and now it's

00:04:34,490 --> 00:04:39,320
kind of hard to see in my visuals where

00:04:36,860 --> 00:04:41,990
the changes were made and if I've missed

00:04:39,320 --> 00:04:44,090
an app the same thing is true with our

00:04:41,990 --> 00:04:46,160
with our code in our real absence if

00:04:44,090 --> 00:04:49,220
this is the approach we take going in

00:04:46,160 --> 00:04:52,640
and touching loose code within our apps

00:04:49,220 --> 00:04:56,630
to to get these things work to to fix to

00:04:52,640 --> 00:04:59,120
make a bug fix another thing to kind of

00:04:56,630 --> 00:05:02,210
point out it's hard to tell integration

00:04:59,120 --> 00:05:04,310
code and framerate code from your

00:05:02,210 --> 00:05:06,590
application code it's all living there

00:05:04,310 --> 00:05:11,060
in the same the same pool the same mess

00:05:06,590 --> 00:05:14,510
okay so let's look at a problem or a way

00:05:11,060 --> 00:05:17,150
to kind of solve this problem what we

00:05:14,510 --> 00:05:20,750
can do is take our libraries that we've

00:05:17,150 --> 00:05:23,030
chosen and introduce a new framework

00:05:20,750 --> 00:05:25,070
package okay this would be like it you

00:05:23,030 --> 00:05:28,490
know just a standalone NPM module okay

00:05:25,070 --> 00:05:31,190
that our app depends on all our

00:05:28,490 --> 00:05:33,320
libraries are part of this package all

00:05:31,190 --> 00:05:34,880
their integration code lives in this

00:05:33,320 --> 00:05:37,060
package so now we have a clear

00:05:34,880 --> 00:05:40,960
separation of where application code

00:05:37,060 --> 00:05:44,480
ends and where our framework code begins

00:05:40,960 --> 00:05:45,590
okay and with this we can we can

00:05:44,480 --> 00:05:48,710
separate our framework from our

00:05:45,590 --> 00:05:50,960
application and it's much easier to spin

00:05:48,710 --> 00:05:53,840
out multiple applications using that

00:05:50,960 --> 00:05:56,900
same framework package this time if we

00:05:53,840 --> 00:05:59,690
find a bug in our integration code it's

00:05:56,900 --> 00:06:03,140
just in that framework package we make

00:05:59,690 --> 00:06:06,550
the fix and from there we simply update

00:06:03,140 --> 00:06:09,800
our apps with that framework change and

00:06:06,550 --> 00:06:12,130
it's very clear which apps are on which

00:06:09,800 --> 00:06:14,990
version of the framework

00:06:12,130 --> 00:06:19,130
okay so frameworks are useful in a

00:06:14,990 --> 00:06:20,930
variety of ways what we've been talking

00:06:19,130 --> 00:06:23,330
about is you know centralizing our

00:06:20,930 --> 00:06:27,740
common code so we don't have it

00:06:23,330 --> 00:06:29,870
scattered through all our apps and this

00:06:27,740 --> 00:06:31,910
it also allows us to standardize what

00:06:29,870 --> 00:06:34,100
features and libraries go into our app

00:06:31,910 --> 00:06:36,830
okay

00:06:34,100 --> 00:06:38,960
another benefit it gives us a uniform

00:06:36,830 --> 00:06:43,430
way to developer apps we have a

00:06:38,960 --> 00:06:46,880
common patterns in place that we can we

00:06:43,430 --> 00:06:50,360
can build from and this ties in to cross

00:06:46,880 --> 00:06:53,690
team collaboration see same team a is

00:06:50,360 --> 00:06:55,400
tied on a deadline and team b has some

00:06:53,690 --> 00:06:57,639
availability so they can send a

00:06:55,400 --> 00:07:00,020
developer over to help out with team a

00:06:57,639 --> 00:07:01,580
that the developer of team B already

00:07:00,020 --> 00:07:03,949
knows the framework already knows how

00:07:01,580 --> 00:07:05,750
the apps are built with a framework it's

00:07:03,949 --> 00:07:09,259
very easy for him to onboard and and

00:07:05,750 --> 00:07:11,389
help out with this other app and of

00:07:09,259 --> 00:07:13,490
course you can air it to the dry

00:07:11,389 --> 00:07:17,870
principal don't try to solve the same

00:07:13,490 --> 00:07:19,099
problem multiple times all right so let

00:07:17,870 --> 00:07:22,330
me let me tell you a little bit about

00:07:19,099 --> 00:07:26,150
how frameworks play a part at GoDaddy

00:07:22,330 --> 00:07:30,169
but before I do that let me let me start

00:07:26,150 --> 00:07:33,320
with back when I was a tech cart a set

00:07:30,169 --> 00:07:35,449
of games to do okay so as a educational

00:07:33,320 --> 00:07:38,030
game company we develop a pattern for

00:07:35,449 --> 00:07:40,910
assembling games quickly and to end and

00:07:38,030 --> 00:07:42,949
part of that which was my responsibility

00:07:40,910 --> 00:07:47,930
was to build a a framework for a

00:07:42,949 --> 00:07:49,520
web-based game editor which depending on

00:07:47,930 --> 00:07:54,530
the game different game features could

00:07:49,520 --> 00:07:56,150
be tied into so we had a web app and say

00:07:54,530 --> 00:07:59,210
the the blocks on the right represent

00:07:56,150 --> 00:08:01,550
different game features now depending on

00:07:59,210 --> 00:08:04,849
the game these features could be removed

00:08:01,550 --> 00:08:09,169
or replaced depending on the needs and

00:08:04,849 --> 00:08:12,970
we were able to iterate and build games

00:08:09,169 --> 00:08:12,970
much quicker this way okay

00:08:13,699 --> 00:08:20,630
besides besides the editor itself you

00:08:16,909 --> 00:08:23,180
know we had the game engine part and the

00:08:20,630 --> 00:08:26,539
server parts too they all kind of

00:08:23,180 --> 00:08:29,330
followed the same principle okay and so

00:08:26,539 --> 00:08:31,610
then one day my former manager who I had

00:08:29,330 --> 00:08:33,950
worked with on this game development

00:08:31,610 --> 00:08:36,399
pattern called me up he had left a while

00:08:33,950 --> 00:08:39,110
back and was now working at GoDaddy and

00:08:36,399 --> 00:08:42,229
what he wanted to do is bring me on to

00:08:39,110 --> 00:08:45,410
help build a web app framework to tie

00:08:42,229 --> 00:08:47,690
different hosting products into I think

00:08:45,410 --> 00:08:50,240
my first response to him was like what

00:08:47,690 --> 00:08:51,760
GoDaddy what I want to want to forego

00:08:50,240 --> 00:08:54,340
Daddy

00:08:51,760 --> 00:08:56,050
but after a while one thing led to

00:08:54,340 --> 00:08:59,920
another and I've been Charlie came

00:08:56,050 --> 00:09:03,210
around to the idea and GoDaddy's been

00:08:59,920 --> 00:09:05,230
great I'm not building games anymore but

00:09:03,210 --> 00:09:07,000
there's plenty of problems and

00:09:05,230 --> 00:09:09,460
challenges to solve which makes the work

00:09:07,000 --> 00:09:11,860
interesting and I get to work with a lot

00:09:09,460 --> 00:09:14,800
of really smart people some of them are

00:09:11,860 --> 00:09:16,750
in this room today and when I started

00:09:14,800 --> 00:09:19,870
there I was with my firmer boss now my

00:09:16,750 --> 00:09:22,570
new boss and we were in Go Daddy's

00:09:19,870 --> 00:09:26,560
hosting organization okay go dia has

00:09:22,570 --> 00:09:28,980
several hosting products and the Web

00:09:26,560 --> 00:09:31,180
Apps for these different products were

00:09:28,980 --> 00:09:32,500
scattered the experience was scattered

00:09:31,180 --> 00:09:35,950
they were built with different tech

00:09:32,500 --> 00:09:37,840
stacks you know teams weren't really

00:09:35,950 --> 00:09:41,820
communicating with each other so it's

00:09:37,840 --> 00:09:41,820
just a bad experience for customers

00:09:41,880 --> 00:09:46,990
basically they were all in different

00:09:44,740 --> 00:09:48,910
technology islands and so what we wanted

00:09:46,990 --> 00:09:52,030
to do is try to break those down and

00:09:48,910 --> 00:09:56,920
have one pattern in one process one

00:09:52,030 --> 00:10:01,690
framework to build our hosting web apps

00:09:56,920 --> 00:10:03,760
with so what we did is similar to what I

00:10:01,690 --> 00:10:07,390
described before we started with an app

00:10:03,760 --> 00:10:09,550
shell built our framework package

00:10:07,390 --> 00:10:11,860
Go Daddy was standardizing on react at

00:10:09,550 --> 00:10:15,280
this point so react was one of the

00:10:11,860 --> 00:10:18,030
libraries we chose and internally we

00:10:15,280 --> 00:10:21,820
also had a team working on yoicks

00:10:18,030 --> 00:10:24,430
components with react so we use that and

00:10:21,820 --> 00:10:26,770
help contribute to that as well we use

00:10:24,430 --> 00:10:29,050
web web pack for bundling and as part of

00:10:26,770 --> 00:10:31,180
this framework we had a way to tie in

00:10:29,050 --> 00:10:33,370
the different hosting products so they

00:10:31,180 --> 00:10:35,910
could develop their user experiences

00:10:33,370 --> 00:10:40,840
independently but still tie into this

00:10:35,910 --> 00:10:44,020
cohesive application all right so this

00:10:40,840 --> 00:10:46,800
worked well and we soon had other apps

00:10:44,020 --> 00:10:49,660
besides this hosting app using it

00:10:46,800 --> 00:10:51,400
somewhere somewhere internal facing we

00:10:49,660 --> 00:10:55,570
had a couple customer facing ones as

00:10:51,400 --> 00:10:57,310
well so eventually our small team was

00:10:55,570 --> 00:11:01,330
moved out of the hosting org and rolled

00:10:57,310 --> 00:11:03,769
into is called app services which was to

00:11:01,330 --> 00:11:08,179
provide services and support across

00:11:03,769 --> 00:11:10,459
daddy we were excited by this shift as

00:11:08,179 --> 00:11:12,800
our small team and eager to take our

00:11:10,459 --> 00:11:15,470
framework to other teams across GoDaddy

00:11:12,800 --> 00:11:17,959
to build their front-end web apps but

00:11:15,470 --> 00:11:19,759
what we found is that other groups had

00:11:17,959 --> 00:11:22,369
done some other things building their

00:11:19,759 --> 00:11:26,420
own frameworks for their own apps okay

00:11:22,369 --> 00:11:28,489
and this looks familiar right

00:11:26,420 --> 00:11:30,889
if you zoom out from just where we were

00:11:28,489 --> 00:11:32,119
at at hosting old GoDaddy was

00:11:30,889 --> 00:11:34,999
essentially on these different

00:11:32,119 --> 00:11:37,279
technology islands okay

00:11:34,999 --> 00:11:40,399
so clearly what I've been describing

00:11:37,279 --> 00:11:43,329
it's a real problem not just for GoDaddy

00:11:40,399 --> 00:11:45,910
you know manitous in the game industry

00:11:43,329 --> 00:11:49,639
imagine it's common to all companies

00:11:45,910 --> 00:11:53,329
anybody that builds multiple apps it has

00:11:49,639 --> 00:11:55,399
multiple teams okay you know teams need

00:11:53,329 --> 00:11:57,559
frameworks to build their apps okay and

00:11:55,399 --> 00:12:00,799
we just saw there's there's many

00:11:57,559 --> 00:12:02,779
benefits of doing so so how are we were

00:12:00,799 --> 00:12:07,249
gonna handle this ago daddy what did we

00:12:02,779 --> 00:12:10,610
do what we did is identified the three

00:12:07,249 --> 00:12:12,439
most commonly used frameworks and we

00:12:10,610 --> 00:12:14,990
took a few people from each of those

00:12:12,439 --> 00:12:19,749
teams and we formed a tiger team within

00:12:14,990 --> 00:12:21,949
GoDaddy cross organization just kind of

00:12:19,749 --> 00:12:25,519
try to bridge that bridge that gap

00:12:21,949 --> 00:12:28,670
across organizations this one we decided

00:12:25,519 --> 00:12:31,850
to name our project gasket because if

00:12:28,670 --> 00:12:34,160
you think about it gaskets are and you

00:12:31,850 --> 00:12:37,069
know I'm plumbing and mechanical engines

00:12:34,160 --> 00:12:39,019
they're what bridge the junctions or

00:12:37,069 --> 00:12:43,009
silly junctions between pipes and

00:12:39,019 --> 00:12:44,420
fittings and we thought as gasket is

00:12:43,009 --> 00:12:50,119
doing that for our libraries and our

00:12:44,420 --> 00:12:51,740
future code okay so we didn't just do

00:12:50,119 --> 00:12:53,649
this in isolation just in this Tiger

00:12:51,740 --> 00:12:56,119
team what we did is we started out with

00:12:53,649 --> 00:12:58,850
requests for comments process with

00:12:56,119 --> 00:13:01,910
proposals gathered questions gathered

00:12:58,850 --> 00:13:03,879
feedback from other developers who were

00:13:01,910 --> 00:13:06,739
going to be using this new framework and

00:13:03,879 --> 00:13:07,339
you know ideas and opinions or like

00:13:06,739 --> 00:13:08,779
armpits

00:13:07,339 --> 00:13:12,799
everybody has more than one they all

00:13:08,779 --> 00:13:14,809
stink right so we worked through that we

00:13:12,799 --> 00:13:16,819
started to sign which frameworks to keep

00:13:14,809 --> 00:13:17,520
which ones to not use what features to

00:13:16,819 --> 00:13:19,770
use

00:13:17,520 --> 00:13:21,500
and during this process is when we

00:13:19,770 --> 00:13:25,230
learned about next GS

00:13:21,500 --> 00:13:29,640
now next yes is great it it took care of

00:13:25,230 --> 00:13:31,920
a lot of wriggles tying reactant with

00:13:29,640 --> 00:13:36,270
server rendering with web pack bundling

00:13:31,920 --> 00:13:38,430
and gave us a routing solution and but

00:13:36,270 --> 00:13:39,779
it didn't solve it was one piece of the

00:13:38,430 --> 00:13:41,250
puzzle but it didn't solve the whole

00:13:39,779 --> 00:13:44,070
thing we still had to handle

00:13:41,250 --> 00:13:46,740
authentication particularly to GoDaddy

00:13:44,070 --> 00:13:48,570
we still had to tie in our UX platform

00:13:46,740 --> 00:13:50,670
the yokes component so I was talking

00:13:48,570 --> 00:13:53,190
about there was still several pieces

00:13:50,670 --> 00:13:54,660
that we needed so we still needed to

00:13:53,190 --> 00:13:57,899
have this one

00:13:54,660 --> 00:14:01,470
GoDaddy framework thing even if XJS was

00:13:57,899 --> 00:14:03,810
just part of that so once we once we

00:14:01,470 --> 00:14:05,450
decide all that we we started into into

00:14:03,810 --> 00:14:09,450
the building the framework

00:14:05,450 --> 00:14:13,250
now what gasket ended up being is not

00:14:09,450 --> 00:14:17,610
what you may have expected as the the

00:14:13,250 --> 00:14:19,950
the tool boxer or a green boxer as we

00:14:17,610 --> 00:14:21,660
got started some of our team wanted to

00:14:19,950 --> 00:14:24,450
implement a plug-in engine with a

00:14:21,660 --> 00:14:27,149
command line interface honestly I was

00:14:24,450 --> 00:14:28,680
hesitant with this notion of first we

00:14:27,149 --> 00:14:30,810
already had a pattern like I just

00:14:28,680 --> 00:14:32,550
demonstrated visually for for building

00:14:30,810 --> 00:14:34,500
frameworks why why do we need to do this

00:14:32,550 --> 00:14:37,620
different are we are we over at

00:14:34,500 --> 00:14:39,959
engineering this whole thing however as

00:14:37,620 --> 00:14:43,320
we continue to work on it with our new

00:14:39,959 --> 00:14:46,800
cross team request organization Tiger

00:14:43,320 --> 00:14:49,050
team it clicked we weren't just building

00:14:46,800 --> 00:14:53,100
another framework we were building the

00:14:49,050 --> 00:14:58,649
tools to actually build frameworks and I

00:14:53,100 --> 00:15:00,810
will illustrate that shortly so once we

00:14:58,649 --> 00:15:03,420
once we reach that and it just clicked

00:15:00,810 --> 00:15:04,829
we knew we had to get this out to open

00:15:03,420 --> 00:15:07,070
source this isn't this wasn't just

00:15:04,829 --> 00:15:10,380
solving a good at a problem this is a

00:15:07,070 --> 00:15:12,240
problem that other teams other companies

00:15:10,380 --> 00:15:15,920
can make use of if we get this out to

00:15:12,240 --> 00:15:18,240
the open source world so what is gasket

00:15:15,920 --> 00:15:20,070
so the project turned out to be not just

00:15:18,240 --> 00:15:23,970
another framework but a way to develop

00:15:20,070 --> 00:15:26,820
frameworks there are some essential

00:15:23,970 --> 00:15:30,760
elements used to compose frameworks and

00:15:26,820 --> 00:15:34,779
I will walk you through those next

00:15:30,760 --> 00:15:37,870
okay so there's six key elements the CLI

00:15:34,779 --> 00:15:40,209
which has the plug-in engine plugins

00:15:37,870 --> 00:15:44,170
themselves commands life cycles hooks

00:15:40,209 --> 00:15:46,750
and presets to start with let's look at

00:15:44,170 --> 00:15:49,420
the CLI this is the entry point into

00:15:46,750 --> 00:15:52,930
creating apps and interacting with apps

00:15:49,420 --> 00:15:56,949
okay so you type Gasquet the name of the

00:15:52,930 --> 00:16:00,070
the CLI and the first thing it does is

00:15:56,949 --> 00:16:01,810
loads plugins configure for the app or

00:16:00,070 --> 00:16:05,649
if it's a new app it has some some

00:16:01,810 --> 00:16:09,220
built-in ones built-in plugins okay

00:16:05,649 --> 00:16:11,050
plugins are the building blocks of an

00:16:09,220 --> 00:16:15,130
app framework okay they provide the

00:16:11,050 --> 00:16:20,019
scaffolding the circuitry they really

00:16:15,130 --> 00:16:22,000
use to integrate libraries and the

00:16:20,019 --> 00:16:24,519
communicate together which we will see

00:16:22,000 --> 00:16:27,760
in a little bit okay plugins also make

00:16:24,519 --> 00:16:29,740
the commands available to the CLI okay

00:16:27,760 --> 00:16:33,250
you can plug you can use plugins to add

00:16:29,740 --> 00:16:35,649
commands to your to your CLI in this

00:16:33,250 --> 00:16:37,980
case in this little example I'm going to

00:16:35,649 --> 00:16:40,510
show you what the create command

00:16:37,980 --> 00:16:44,050
okay so commands are the first argument

00:16:40,510 --> 00:16:47,290
to the CLI when you run create what it's

00:16:44,050 --> 00:16:50,949
going to do is fire off various life

00:16:47,290 --> 00:16:55,269
cycles okay life cycles you could think

00:16:50,949 --> 00:16:57,040
of as the nervous system of of your app

00:16:55,269 --> 00:17:00,250
it's how different layers different

00:16:57,040 --> 00:17:02,610
parts of your app communicate these

00:17:00,250 --> 00:17:07,329
aren't your typical event matters either

00:17:02,610 --> 00:17:11,010
these can be executed in various ways

00:17:07,329 --> 00:17:15,730
and they can be handled in order okay

00:17:11,010 --> 00:17:18,819
very very important and but what handles

00:17:15,730 --> 00:17:20,740
life cycles are hooks hooks also are

00:17:18,819 --> 00:17:24,270
made available by the plugins that you

00:17:20,740 --> 00:17:27,910
plug into your app and hooks can also

00:17:24,270 --> 00:17:30,040
execute additional life cycles hooks for

00:17:27,910 --> 00:17:32,710
where you implement your integration

00:17:30,040 --> 00:17:36,370
code and your feature code that you want

00:17:32,710 --> 00:17:38,320
to use a crust across your app okay so

00:17:36,370 --> 00:17:40,240
this kind of this kind of high-level let

00:17:38,320 --> 00:17:42,640
me give you some some concrete a little

00:17:40,240 --> 00:17:43,390
bit more concrete examples with the

00:17:42,640 --> 00:17:47,800
create

00:17:43,390 --> 00:17:51,550
command we have a prompt life cycle that

00:17:47,800 --> 00:17:53,560
gets executed prompt for example when

00:17:51,550 --> 00:17:56,320
you're running running creates it allows

00:17:53,560 --> 00:17:58,530
plugins to ask the user questions for

00:17:56,320 --> 00:18:01,210
example when you're creating your app

00:17:58,530 --> 00:18:05,680
what's the name of your app do you want

00:18:01,210 --> 00:18:07,090
a git repo initialize with your app do

00:18:05,680 --> 00:18:09,580
you want a test suite installed with

00:18:07,090 --> 00:18:13,270
your app do you want to use yarn or NPM

00:18:09,580 --> 00:18:15,310
things and things like that okay

00:18:13,270 --> 00:18:17,320
after the prompt lifecycle after that

00:18:15,310 --> 00:18:22,050
it's all gathered then we enter the

00:18:17,320 --> 00:18:22,050
create lifecycle this allows plug-ins to

00:18:22,170 --> 00:18:27,310
set what files are going to be generated

00:18:24,640 --> 00:18:28,630
for the app allows them to say what

00:18:27,310 --> 00:18:30,900
dependencies they want to add to the

00:18:28,630 --> 00:18:33,820
package.json file

00:18:30,900 --> 00:18:35,530
those are things along those lines and

00:18:33,820 --> 00:18:36,610
then at the end we have a post create

00:18:35,530 --> 00:18:38,740
lifecycle

00:18:36,610 --> 00:18:41,650
this gives the plugins the final layer

00:18:38,740 --> 00:18:45,780
to do any fine-tuning to the app that as

00:18:41,650 --> 00:18:49,300
it's being created for example with the

00:18:45,780 --> 00:18:51,340
lint plugin you can run es let fix it'll

00:18:49,300 --> 00:18:53,650
match up all the generative files to the

00:18:51,340 --> 00:18:59,530
to the lint code style that you've

00:18:53,650 --> 00:19:02,680
chosen with that plugin okay so the last

00:18:59,530 --> 00:19:05,890
element key element with gasket are

00:19:02,680 --> 00:19:08,560
p-sets so presets are basically

00:19:05,890 --> 00:19:13,210
collections of plugins some additional

00:19:08,560 --> 00:19:16,660
configuration as you need and these are

00:19:13,210 --> 00:19:21,160
loaded by the the CLI make plugins

00:19:16,660 --> 00:19:23,830
available and basically presets become

00:19:21,160 --> 00:19:26,800
your framework they're the chosen set of

00:19:23,830 --> 00:19:29,740
plugins or features that you want to

00:19:26,800 --> 00:19:31,690
have in your apps and you share presets

00:19:29,740 --> 00:19:37,510
across your apps which I'll point out a

00:19:31,690 --> 00:19:40,060
little bit better shortly okay so back

00:19:37,510 --> 00:19:41,980
to back to this example instead of now

00:19:40,060 --> 00:19:44,260
depending on this large framework

00:19:41,980 --> 00:19:45,730
package with our libraries integrated

00:19:44,260 --> 00:19:48,100
together what you're going to do with

00:19:45,730 --> 00:19:51,520
Gasquet instead is configure at your

00:19:48,100 --> 00:19:54,430
apps with plugins ok plugins layer

00:19:51,520 --> 00:19:56,600
together and they can have dependencies

00:19:54,430 --> 00:19:59,790
on other plugins and for

00:19:56,600 --> 00:20:02,640
here next depends on the web pack

00:19:59,790 --> 00:20:07,110
plug-in and I'll explain that a little

00:20:02,640 --> 00:20:09,540
bit later but let's say let's say for

00:20:07,110 --> 00:20:12,150
example we're not just building a web

00:20:09,540 --> 00:20:14,730
app here with with next yes say we want

00:20:12,150 --> 00:20:18,330
to build just micro-service or some kind

00:20:14,730 --> 00:20:20,580
of API REST API you know you can remove

00:20:18,330 --> 00:20:24,840
those other layers of plugins and just

00:20:20,580 --> 00:20:27,380
have HTTP weak with Express okay plugins

00:20:24,840 --> 00:20:29,820
are also decided to be interchangeable

00:20:27,380 --> 00:20:32,370
say I don't want to use Express say I

00:20:29,820 --> 00:20:34,920
want to use pacify you know which was

00:20:32,370 --> 00:20:37,890
recently announced as part of the open

00:20:34,920 --> 00:20:41,700
GS foundation you can do that

00:20:37,890 --> 00:20:44,190
you can swap these out and you know I

00:20:41,700 --> 00:20:46,230
could use fafsa phi back with next GS

00:20:44,190 --> 00:20:48,720
and my web pack plugins

00:20:46,230 --> 00:20:53,160
okay so plugins can be interchangeable

00:20:48,720 --> 00:20:57,720
and besides just that you know think

00:20:53,160 --> 00:20:59,760
about what if you know GoDaddy as a

00:20:57,720 --> 00:21:02,310
reaction shot that's fine that's great

00:20:59,760 --> 00:21:05,040
but as we open sources we expect to see

00:21:02,310 --> 00:21:07,530
things like maybe a svelte plugin maybe

00:21:05,040 --> 00:21:09,510
a rollup plugin we're not we're not tied

00:21:07,530 --> 00:21:12,930
into one particular bundle one

00:21:09,510 --> 00:21:15,590
particular renderer or you know compiler

00:21:12,930 --> 00:21:24,390
or whatever you want to refer to it as

00:21:15,590 --> 00:21:26,220
so besides uh plug-ins for well let me

00:21:24,390 --> 00:21:28,710
take a step back here's right let's

00:21:26,220 --> 00:21:31,290
let's let's let's go back to Go Daddy's

00:21:28,710 --> 00:21:34,740
current stack stack so we have Express

00:21:31,290 --> 00:21:36,960
next web pack redux this is what most of

00:21:34,740 --> 00:21:40,200
our apps are using right now

00:21:36,960 --> 00:21:43,110
these are library plugins you guys know

00:21:40,200 --> 00:21:46,080
these names but as I mentioned before we

00:21:43,110 --> 00:21:50,730
had internal needs as well our auth our

00:21:46,080 --> 00:21:54,270
our UX what we have is internal plugins

00:21:50,730 --> 00:21:57,480
for for those as well okay so plugins

00:21:54,270 --> 00:21:59,400
aren't necessarily just for tying in a

00:21:57,480 --> 00:22:01,170
library that you want to use you know

00:21:59,400 --> 00:22:02,820
from the open source world into your app

00:22:01,170 --> 00:22:04,980
you can you can build your own plugins

00:22:02,820 --> 00:22:08,880
for your teams for your companies and

00:22:04,980 --> 00:22:10,130
integrate them with the with the gaskets

00:22:08,880 --> 00:22:14,970
set up

00:22:10,130 --> 00:22:16,830
okay so when teams have settled on what

00:22:14,970 --> 00:22:20,220
features they want to have in their apps

00:22:16,830 --> 00:22:23,730
what you would do is stamp those into a

00:22:20,220 --> 00:22:26,010
preset so now whenever I go to create a

00:22:23,730 --> 00:22:28,530
new app I would say okay I want to do

00:22:26,010 --> 00:22:30,960
gasket create with the Go Daddy preset

00:22:28,530 --> 00:22:36,000
that's how we spin up apps at GoDaddy

00:22:30,960 --> 00:22:39,750
now with with that team presets can also

00:22:36,000 --> 00:22:42,420
represent smaller sets of plugins that

00:22:39,750 --> 00:22:46,020
make sense together so for example if

00:22:42,420 --> 00:22:48,330
there is an XJS preset which we have in

00:22:46,020 --> 00:22:50,360
our open source packages right now so

00:22:48,330 --> 00:22:56,130
you guys can kick the tires on it on

00:22:50,360 --> 00:22:58,860
gasket quickly and say we have a preset

00:22:56,130 --> 00:23:00,660
for just progressive web apps the

00:22:58,860 --> 00:23:04,650
different plugins we need for for that

00:23:00,660 --> 00:23:08,310
those are available apps can be composed

00:23:04,650 --> 00:23:12,210
of presets like I'm depending on to here

00:23:08,310 --> 00:23:14,910
and presets can also be extended so if

00:23:12,210 --> 00:23:17,460
your team wants to use the next preset

00:23:14,910 --> 00:23:19,770
they want to use the progressive web app

00:23:17,460 --> 00:23:21,630
preset you introduce some other plugins

00:23:19,770 --> 00:23:25,730
for your own teams your own companies

00:23:21,630 --> 00:23:33,780
you can do that and have a higher level

00:23:25,730 --> 00:23:37,590
grouping of presets okay and so as you

00:23:33,780 --> 00:23:41,010
can see here what was once a framework

00:23:37,590 --> 00:23:43,050
package that could not be changed could

00:23:41,010 --> 00:23:44,550
not be played around with experimented

00:23:43,050 --> 00:23:47,730
with you know trying out fast fly

00:23:44,550 --> 00:23:50,610
instead of Express you can now with

00:23:47,730 --> 00:23:52,890
gasket piecemeal these together and

00:23:50,610 --> 00:23:57,360
build your frameworks and the form of

00:23:52,890 --> 00:23:58,800
presets okay so this is probably

00:23:57,360 --> 00:24:01,140
question you're thinking right now is

00:23:58,800 --> 00:24:04,290
this just another app generator is this

00:24:01,140 --> 00:24:09,030
like you know besides is this more like

00:24:04,290 --> 00:24:12,270
llaman or something yeoman the answer is

00:24:09,030 --> 00:24:15,060
no gasket is also used for runtime

00:24:12,270 --> 00:24:16,110
integrations in your app as well I've

00:24:15,060 --> 00:24:18,150
been talking about you know how you

00:24:16,110 --> 00:24:20,400
create your app but let's look at some

00:24:18,150 --> 00:24:23,220
examples of how you use the gasket life

00:24:20,400 --> 00:24:26,280
cycles during your app or

00:24:23,220 --> 00:24:30,840
when your app starts so we're gonna look

00:24:26,280 --> 00:24:32,670
at the start command and let's just walk

00:24:30,840 --> 00:24:36,720
through this now so we we have the

00:24:32,670 --> 00:24:40,410
gasket CLI in a context where app is

00:24:36,720 --> 00:24:42,740
going to load plugins and we'll see the

00:24:40,410 --> 00:24:46,880
the start plugin is is made available

00:24:42,740 --> 00:24:49,830
start plugin gives us the start command

00:24:46,880 --> 00:24:52,740
when i execute the start command it's

00:24:49,830 --> 00:24:57,080
going to fire off the first life cycle

00:24:52,740 --> 00:25:03,060
which is the start life cycle okay

00:24:57,080 --> 00:25:09,480
next the HTTP plug-in hooks the start

00:25:03,060 --> 00:25:11,310
life cycle and it executes a create

00:25:09,480 --> 00:25:13,320
stirrers life cycle which allows

00:25:11,310 --> 00:25:16,650
plug-ins to say okay this is what i want

00:25:13,320 --> 00:25:20,070
to go into the the server that's created

00:25:16,650 --> 00:25:24,600
in our case here with that GoDaddy stack

00:25:20,070 --> 00:25:26,580
I showed you we have Express ok Express

00:25:24,600 --> 00:25:30,450
Hooksett Express says I want to be the

00:25:26,580 --> 00:25:33,780
handler for the server and as you know

00:25:30,450 --> 00:25:35,700
Express can be used with middleware and

00:25:33,780 --> 00:25:39,020
you know you can step your routes and

00:25:35,700 --> 00:25:41,340
one up for it so the express plug-in

00:25:39,020 --> 00:25:43,200
execute some middleware life cycle

00:25:41,340 --> 00:25:46,620
allowing other plugins to attach

00:25:43,200 --> 00:25:49,550
middleware and also execute an express

00:25:46,620 --> 00:25:52,130
life cycle allowing the instance to be

00:25:49,550 --> 00:25:58,740
manipulated and add your routes here

00:25:52,130 --> 00:26:03,240
things like that the next GS plugin then

00:25:58,740 --> 00:26:06,930
hooks the express lifecycle and it sets

00:26:03,240 --> 00:26:09,590
up the routes for the pages of your of

00:26:06,930 --> 00:26:15,440
your next step okay

00:26:09,590 --> 00:26:18,210
this plug-in then initializes web pack

00:26:15,440 --> 00:26:22,370
which is hooked by the web pack plugin

00:26:18,210 --> 00:26:26,460
ok when when you do that that allows

00:26:22,370 --> 00:26:29,640
that allows other plugins to either use

00:26:26,460 --> 00:26:31,650
the web pack chain lifecycle to assemble

00:26:29,640 --> 00:26:35,100
web pack chain or web pack in a channel

00:26:31,650 --> 00:26:36,390
way and there's also another web pack

00:26:35,100 --> 00:26:39,600
lifecycle

00:26:36,390 --> 00:26:43,260
plugins to return webpack partials that

00:26:39,600 --> 00:26:46,470
get merged in or you tape the web packet

00:26:43,260 --> 00:26:48,150
fig at that point and again again these

00:26:46,470 --> 00:26:51,030
these life sucks that were ordered I'm

00:26:48,150 --> 00:26:52,380
not showing all the the nuances of how

00:26:51,030 --> 00:26:53,940
you can make use of these we're just

00:26:52,380 --> 00:27:00,120
kind of going through the the initial

00:26:53,940 --> 00:27:03,470
parts here okay so once the next j/s

00:27:00,120 --> 00:27:06,990
plugin has gotten its whip pack and fig

00:27:03,470 --> 00:27:10,320
it then execute the next config

00:27:06,990 --> 00:27:13,500
lifecycle this allows you or your

00:27:10,320 --> 00:27:16,470
plugins to add you know manipulate the

00:27:13,500 --> 00:27:21,000
next config use some other configuration

00:27:16,470 --> 00:27:26,179
plugins like annex a sore necks s CSS

00:27:21,000 --> 00:27:29,640
that kind of stuff or CSS and so that's

00:27:26,179 --> 00:27:34,890
that's example of a flow with the the

00:27:29,640 --> 00:27:37,650
start command there's there's several

00:27:34,890 --> 00:27:40,860
more life cycles you can make Yousef epi

00:27:37,650 --> 00:27:44,070
in your apps as you add plugins you can

00:27:40,860 --> 00:27:46,169
add your own life cycles and you can

00:27:44,070 --> 00:27:47,669
create your own commands okay we've been

00:27:46,169 --> 00:27:49,799
talking about start there's other

00:27:47,669 --> 00:27:52,620
commands available and again you can

00:27:49,799 --> 00:27:55,799
build your own you can you can see what

00:27:52,620 --> 00:27:59,760
what's available today if you go to our

00:27:55,799 --> 00:28:04,980
our gasket devs dock site and speaking

00:27:59,760 --> 00:28:08,610
of docks let's let's talk about that so

00:28:04,980 --> 00:28:10,559
a key aspect of any good framework is

00:28:08,610 --> 00:28:13,169
this documentation you want you want

00:28:10,559 --> 00:28:16,350
developers to use your framework not get

00:28:13,169 --> 00:28:18,870
lost in the code trying to figure it out

00:28:16,350 --> 00:28:23,700
the your documentation should be clear

00:28:18,870 --> 00:28:25,440
and since gasket allows you to build

00:28:23,700 --> 00:28:27,150
your frameworks in the form of these

00:28:25,440 --> 00:28:29,850
plugins and from of these little

00:28:27,150 --> 00:28:31,530
individual components that you compose

00:28:29,850 --> 00:28:35,059
together how are you how are you going

00:28:31,530 --> 00:28:38,520
to present docs for your apps for this

00:28:35,059 --> 00:28:41,549
what we've introduced with with gasket

00:28:38,520 --> 00:28:45,030
is a Doc's plugin now the docs plugin

00:28:41,549 --> 00:28:47,630
makes available a Doc's command so when

00:28:45,030 --> 00:28:50,320
you run this command what it will do is

00:28:47,630 --> 00:28:52,720
collate all the

00:28:50,320 --> 00:28:55,240
files all the documentation files of the

00:28:52,720 --> 00:29:00,309
plugins installed for your app put those

00:28:55,240 --> 00:29:04,630
in a central place fix up the the links

00:29:00,309 --> 00:29:08,019
between read Me's and there's also a

00:29:04,630 --> 00:29:10,480
Doc's of 5 plugin which will then give

00:29:08,019 --> 00:29:12,850
you a nice web view of your

00:29:10,480 --> 00:29:14,889
documentation so this would be the

00:29:12,850 --> 00:29:16,779
documentation for only the plugins and

00:29:14,889 --> 00:29:21,549
presets and what's available in the app

00:29:16,779 --> 00:29:22,779
not just not the whole ecosystem so it's

00:29:21,549 --> 00:29:26,259
pretty cool if you if you guys have

00:29:22,779 --> 00:29:28,120
played around with rust it's against

00:29:26,259 --> 00:29:29,980
this is kind of like cargo cargo docks

00:29:28,120 --> 00:29:31,659
okay it just gives you the documentation

00:29:29,980 --> 00:29:37,379
for what's in that app that you're

00:29:31,659 --> 00:29:39,730
working on okay so who is gasket for I

00:29:37,379 --> 00:29:43,769
was saying it's for developers if you're

00:29:39,730 --> 00:29:46,389
an app developer you can use gasket to

00:29:43,769 --> 00:29:48,309
get at the life cycles integrating your

00:29:46,389 --> 00:29:51,600
own features tie in with other with

00:29:48,309 --> 00:29:53,850
other plugins it's also for for teams

00:29:51,600 --> 00:29:56,110
okay if you're building multiple apps

00:29:53,850 --> 00:30:00,309
you have multiple teams working on these

00:29:56,110 --> 00:30:03,429
apps coming down with a a tech stack

00:30:00,309 --> 00:30:05,529
you're happy with a pattern of

00:30:03,429 --> 00:30:07,450
development you're happy with put those

00:30:05,529 --> 00:30:11,009
into a preset share those across your

00:30:07,450 --> 00:30:14,409
team and you're good to go

00:30:11,009 --> 00:30:18,370
yeah it's also important for communities

00:30:14,409 --> 00:30:22,090
I mentioned you know next year sigh

00:30:18,370 --> 00:30:24,340
throughout it's felt you need any of

00:30:22,090 --> 00:30:26,350
this kind of communities that the build

00:30:24,340 --> 00:30:28,570
up libraries they want their libraries

00:30:26,350 --> 00:30:32,320
to be able to interact with with other

00:30:28,570 --> 00:30:34,419
libraries out there if they're in the

00:30:32,320 --> 00:30:38,019
form of a gasket plug-in it makes it

00:30:34,419 --> 00:30:40,870
easy for app developers for teams to try

00:30:38,019 --> 00:30:42,700
those libraries out in the context of

00:30:40,870 --> 00:30:48,669
their app and their context of what they

00:30:42,700 --> 00:30:51,580
want to use for a framework okay so next

00:30:48,669 --> 00:30:53,590
question how do I get started so to get

00:30:51,580 --> 00:30:55,840
familiar with gasket the gasket prize

00:30:53,590 --> 00:30:58,360
project and what's available today they

00:30:55,840 --> 00:31:03,190
might you to visit our website gasket

00:30:58,360 --> 00:31:03,460
dev this is a doc suffice site using get

00:31:03,190 --> 00:31:05,890
help

00:31:03,460 --> 00:31:07,510
ages generated with the gasket Doc's

00:31:05,890 --> 00:31:09,309
command okay so you can kind of get a

00:31:07,510 --> 00:31:11,409
feel of how that works we have a nice

00:31:09,309 --> 00:31:13,779
splash screen on the front but it will

00:31:11,409 --> 00:31:16,630
give you an idea there and the best way

00:31:13,779 --> 00:31:18,970
to get to try it out is the to kick the

00:31:16,630 --> 00:31:22,270
tires with it you can install the gasket

00:31:18,970 --> 00:31:26,320
CLI today we just push that to MPN last

00:31:22,270 --> 00:31:29,230
night so so give it a run the help

00:31:26,320 --> 00:31:32,770
command will show you what what you can

00:31:29,230 --> 00:31:35,710
do with the different commands and so

00:31:32,770 --> 00:31:38,890
just as a quick recap developers need

00:31:35,710 --> 00:31:41,169
frameworks to build our apps effectively

00:31:38,890 --> 00:31:43,600
and quickly right Gasca provides the

00:31:41,169 --> 00:31:47,260
tooling and fully to build fully

00:31:43,600 --> 00:31:51,549
featured frameworks Docs starting app

00:31:47,260 --> 00:31:54,640
not just creating nap ok and the gasket

00:31:51,549 --> 00:31:56,919
ecosystem is it's ready to grow with

00:31:54,640 --> 00:32:00,610
through contributions to the open source

00:31:56,919 --> 00:32:03,460
world help us out join it in to the fawn

00:32:00,610 --> 00:32:05,350
and let's this make gas get a real thing

00:32:03,460 --> 00:32:09,970
not just for for GoDaddy but for

00:32:05,350 --> 00:32:12,490
everybody out there and if you have any

00:32:09,970 --> 00:32:15,490
questions you can grab me on the

00:32:12,490 --> 00:32:19,120
hallways or or hit me up my name's on

00:32:15,490 --> 00:32:22,270
twitter is caneta fix and then put it on

00:32:19,120 --> 00:32:23,860
the slide but just just fire me or want

00:32:22,270 --> 00:32:24,340
to let er go daddy guys and we can get

00:32:23,860 --> 00:32:26,500
you going

00:32:24,340 --> 00:32:31,880
so thanks

00:32:26,500 --> 00:32:31,880

YouTube URL: https://www.youtube.com/watch?v=x6rwR577wdQ


