Title: Cloud Native Buildpacks: Containers for Everyone - Danielle Adams, Heroku
Publication date: 2020-05-11
Playlist: Node + JS Interactive 2019
Description: 
	Cloud Native Buildpacks: Containers for Everyone - Danielle Adams, Heroku
Speakers: Danielle Adams
Buildpacks are the core of Heroku - they lower the operational burden of creating and maintaining application environments. Cloud Native Buildpacks combine Herokuâ€™s seamless developer experience with modern container standards, making it easy to build Docker images from Node.js source code. In this talk, Node developers can learn how to perform both OS and application-level upgrades, create Docker images without Dockerfiles, and run containerized Node.js apps with little configuration. (Docker experience not required.)
Captions: 
	00:00:00,030 --> 00:00:04,500
thank you for coming to this

00:00:01,290 --> 00:00:06,629
presentation and good morning this is a

00:00:04,500 --> 00:00:08,490
sponsored talk but I'm not going to try

00:00:06,629 --> 00:00:10,980
to sell you anything I promise except

00:00:08,490 --> 00:00:13,349
for some new ideas and we're gonna learn

00:00:10,980 --> 00:00:16,230
a little bit about containerization and

00:00:13,349 --> 00:00:19,890
a easier way to create containers and to

00:00:16,230 --> 00:00:20,520
maintain them so my name is Danielle

00:00:19,890 --> 00:00:22,740
Adams

00:00:20,520 --> 00:00:25,320
I'm the node language owner at Heroku

00:00:22,740 --> 00:00:28,050
Heroku is a platform that runs hundreds

00:00:25,320 --> 00:00:30,390
of millions applications across multiple

00:00:28,050 --> 00:00:34,469
languages and database types including

00:00:30,390 --> 00:00:36,390
node Ruby Java Python Kafka and Postgres

00:00:34,469 --> 00:00:38,160
as a language owner it's my

00:00:36,390 --> 00:00:39,840
responsibility to make sure that our

00:00:38,160 --> 00:00:43,140
node users have a good developer

00:00:39,840 --> 00:00:45,809
experience which includes managing build

00:00:43,140 --> 00:00:49,559
environments runtimes documentation and

00:00:45,809 --> 00:00:51,360
more so like I said today we're gonna be

00:00:49,559 --> 00:00:55,320
talking about cloud native build packs

00:00:51,360 --> 00:00:57,809
and containerization so hopefully a more

00:00:55,320 --> 00:00:59,640
seasoned docker users will be able to

00:00:57,809 --> 00:01:01,559
learn something new and then also

00:00:59,640 --> 00:01:03,870
beginners will be able to get started

00:01:01,559 --> 00:01:05,790
today but first I'm going to talk about

00:01:03,870 --> 00:01:08,880
my own experience getting started with

00:01:05,790 --> 00:01:11,340
docker a couple years ago so at a

00:01:08,880 --> 00:01:13,740
previous job I was working on some

00:01:11,340 --> 00:01:15,360
software that was rapidly scaling the

00:01:13,740 --> 00:01:16,770
company was growing really quickly and

00:01:15,360 --> 00:01:20,130
there were a lot of teams that were kind

00:01:16,770 --> 00:01:21,840
of moving at a very fast pace so and

00:01:20,130 --> 00:01:23,640
because we were growing so quickly we

00:01:21,840 --> 00:01:25,590
had to cut costs to our infrastructure

00:01:23,640 --> 00:01:28,920
and so all these fancy platforms that

00:01:25,590 --> 00:01:30,659
would do what we would not configure and

00:01:28,920 --> 00:01:32,909
you just kind of do it automatically and

00:01:30,659 --> 00:01:36,030
magically we would have to manage that

00:01:32,909 --> 00:01:38,970
stuff and take it in-house so at the

00:01:36,030 --> 00:01:41,009
time all of the development teams were

00:01:38,970 --> 00:01:42,150
kind of siloed and they were working by

00:01:41,009 --> 00:01:45,570
themselves and they had their own

00:01:42,150 --> 00:01:48,450
processes and deployment pipelines for

00:01:45,570 --> 00:01:50,579
all of their respective services and

00:01:48,450 --> 00:01:53,040
then it looked something like this where

00:01:50,579 --> 00:01:55,409
everyone was kind of forced into new

00:01:53,040 --> 00:01:58,049
workflows and new processes because of

00:01:55,409 --> 00:02:00,119
the new tooling that we were had to use

00:01:58,049 --> 00:02:03,060
one of the things that we were doing was

00:02:00,119 --> 00:02:04,560
we had to take our own we were going to

00:02:03,060 --> 00:02:06,270
bring our own job in scheduling

00:02:04,560 --> 00:02:08,429
infrastructure in-house and so the

00:02:06,270 --> 00:02:11,430
developers would have to manage and

00:02:08,429 --> 00:02:13,110
maintain their own their own build

00:02:11,430 --> 00:02:13,350
environments and runtime environments

00:02:13,110 --> 00:02:17,850
with

00:02:13,350 --> 00:02:20,700
help from the DevOps team so this is

00:02:17,850 --> 00:02:23,100
where we all got kind of introduced to

00:02:20,700 --> 00:02:25,410
docker it wasn't a very positive

00:02:23,100 --> 00:02:27,870
experience because of the pace like most

00:02:25,410 --> 00:02:29,700
startups that we were going at it was a

00:02:27,870 --> 00:02:31,080
steep learning curve so we all had to

00:02:29,700 --> 00:02:32,580
configure our own docker files we

00:02:31,080 --> 00:02:34,350
already had hundreds of services and

00:02:32,580 --> 00:02:36,210
applications front-end apps and so we

00:02:34,350 --> 00:02:39,120
had to adapt docker to all of these

00:02:36,210 --> 00:02:41,930
there's a lot of copy and pasting things

00:02:39,120 --> 00:02:44,460
weren't working and it was a very

00:02:41,930 --> 00:02:49,740
hostile time in the environment in

00:02:44,460 --> 00:02:51,360
between teams so this is an example of a

00:02:49,740 --> 00:02:54,060
docker file as you could see it's not

00:02:51,360 --> 00:02:57,090
doing much this isn't something that any

00:02:54,060 --> 00:02:59,130
node application would doing installing

00:02:57,090 --> 00:03:02,640
node and yarn and then running a yarn

00:02:59,130 --> 00:03:04,380
install and the darker files have to go

00:03:02,640 --> 00:03:06,960
in every source code so what we were

00:03:04,380 --> 00:03:08,940
seeing like I said before was we had to

00:03:06,960 --> 00:03:11,010
have darker files for all of our

00:03:08,940 --> 00:03:13,350
JavaScript code bases and they were all

00:03:11,010 --> 00:03:14,700
pretty much doing the same thing but we

00:03:13,350 --> 00:03:17,190
didn't quite know how it was supposed to

00:03:14,700 --> 00:03:18,840
work and we also had to copy and paste

00:03:17,190 --> 00:03:22,440
all these darker files across all of our

00:03:18,840 --> 00:03:24,180
source codes so at the same time

00:03:22,440 --> 00:03:26,640
Heroku has been iterating over the

00:03:24,180 --> 00:03:29,310
concept of build packs build packs are a

00:03:26,640 --> 00:03:32,340
set of execution steps which will create

00:03:29,310 --> 00:03:36,360
a runtime environment for any executable

00:03:32,340 --> 00:03:38,670
code so add version to Heroku has two

00:03:36,360 --> 00:03:42,870
things kind of wrong with the way that

00:03:38,670 --> 00:03:45,230
build packs work so it version to build

00:03:42,870 --> 00:03:48,200
packs will create what is called a slug

00:03:45,230 --> 00:03:50,250
it takes all of the source code

00:03:48,200 --> 00:03:53,070
environment variables and then

00:03:50,250 --> 00:03:54,870
dependencies like node and yarn and it

00:03:53,070 --> 00:03:58,020
creates this slug but this is a

00:03:54,870 --> 00:03:59,910
proprietary piece that you can't take

00:03:58,020 --> 00:04:00,750
this out of Heroku and run it on any

00:03:59,910 --> 00:04:02,280
environment

00:04:00,750 --> 00:04:05,130
you actually can only run it on a Heroku

00:04:02,280 --> 00:04:07,170
dyno so it makes it really hard for our

00:04:05,130 --> 00:04:09,000
users to debug things if they see

00:04:07,170 --> 00:04:10,260
something running in production they

00:04:09,000 --> 00:04:12,150
have to debug it in a production

00:04:10,260 --> 00:04:14,700
environment because they're not able to

00:04:12,150 --> 00:04:16,770
duplicate that environment and then also

00:04:14,700 --> 00:04:18,750
because this is something that is built

00:04:16,770 --> 00:04:20,430
internally and lives in Heroku you're

00:04:18,750 --> 00:04:23,180
not able to run it on something like

00:04:20,430 --> 00:04:27,080
kubernetes which has a very open

00:04:23,180 --> 00:04:30,050
ecosystem of ways to run a

00:04:27,080 --> 00:04:31,849
and scripts and whatnot so this is where

00:04:30,050 --> 00:04:35,379
we meet cloud native bill packs which is

00:04:31,849 --> 00:04:35,379
a project that we've been working on

00:04:35,409 --> 00:04:41,930
yeah so cloud native build packs is

00:04:38,889 --> 00:04:45,110
really just math cloud native in this

00:04:41,930 --> 00:04:47,719
sense that term is kind of up for debate

00:04:45,110 --> 00:04:50,210
but for the purposes of this we'll just

00:04:47,719 --> 00:04:53,810
be talking about cloud native as a way

00:04:50,210 --> 00:04:57,439
to manage containers in an agile and a

00:04:53,810 --> 00:05:00,379
scalable way and then build packs which

00:04:57,439 --> 00:05:02,750
I've just described as set of execution

00:05:00,379 --> 00:05:05,090
steps to input source code and output

00:05:02,750 --> 00:05:09,310
something that's runnable you add source

00:05:05,090 --> 00:05:09,310
code and then it outputs a docker image

00:05:09,879 --> 00:05:15,169
so these are the steps that happen when

00:05:12,759 --> 00:05:17,180
source code is inputted into a cloud

00:05:15,169 --> 00:05:19,849
native build pack there's first digitech

00:05:17,180 --> 00:05:22,759
script so if you have a build pack you

00:05:19,849 --> 00:05:26,180
can pretty much put any piece of source

00:05:22,759 --> 00:05:28,129
code that is runnable but if it doesn't

00:05:26,180 --> 00:05:30,409
match the bill pack if the build will

00:05:28,129 --> 00:05:32,330
fail so for instance I can't put a PHP

00:05:30,409 --> 00:05:34,190
app through the node build pack because

00:05:32,330 --> 00:05:37,490
it's not gonna run because PHP does not

00:05:34,190 --> 00:05:40,340
run on a note environment so for

00:05:37,490 --> 00:05:41,840
instance on on a node build pack it's

00:05:40,340 --> 00:05:44,240
going to use detect to look for a

00:05:41,840 --> 00:05:48,800
package.json or some type of JavaScript

00:05:44,240 --> 00:05:52,789
file to run next is the build step the

00:05:48,800 --> 00:05:55,580
build is does most of the work so it

00:05:52,789 --> 00:05:59,060
will install node modules dependencies

00:05:55,580 --> 00:06:02,089
like typescript or any like scripts that

00:05:59,060 --> 00:06:05,539
needs to be run it will run and build

00:06:02,089 --> 00:06:07,580
and compile steps and then there's an

00:06:05,539 --> 00:06:08,930
export step this will take every all the

00:06:07,580 --> 00:06:12,969
artifacts that have been created and

00:06:08,930 --> 00:06:15,650
export it for a run time in image and

00:06:12,969 --> 00:06:17,750
then there's a caching step so this

00:06:15,650 --> 00:06:19,430
takes a lot of the reusable artifacts

00:06:17,750 --> 00:06:21,770
from the build and it makes it available

00:06:19,430 --> 00:06:24,770
for the next build or for other steps

00:06:21,770 --> 00:06:28,759
that need to be made after the build so

00:06:24,770 --> 00:06:32,029
I'll talk about a little later so it's

00:06:28,759 --> 00:06:34,370
really easy to get started using using

00:06:32,029 --> 00:06:36,909
cloud native build packs if you want to

00:06:34,370 --> 00:06:39,199
do it locally you have to install darker

00:06:36,909 --> 00:06:40,759
then you have to install the pack

00:06:39,199 --> 00:06:42,589
command-line tool

00:06:40,759 --> 00:06:44,689
this is something that came out of the

00:06:42,589 --> 00:06:50,210
cloud native bill PACs project which is

00:06:44,689 --> 00:06:52,159
a tool to both build build images from

00:06:50,210 --> 00:06:56,870
build packs but also to build build

00:06:52,159 --> 00:06:58,189
packs yeah which is cool and then sort

00:06:56,870 --> 00:07:00,559
you need some source code available on a

00:06:58,189 --> 00:07:02,719
local machine for node you would need a

00:07:00,559 --> 00:07:04,370
piece of source code that has package

00:07:02,719 --> 00:07:08,029
JSON because that's what we used to

00:07:04,370 --> 00:07:10,339
detect node source code so creating an

00:07:08,029 --> 00:07:13,610
image and running a container is also

00:07:10,339 --> 00:07:15,830
pretty easy it's only two steps so the

00:07:13,610 --> 00:07:18,469
first step is you have to create your

00:07:15,830 --> 00:07:21,409
image we have a flag that just passes in

00:07:18,469 --> 00:07:22,669
a build pack and then pack build my node

00:07:21,409 --> 00:07:28,490
server is the name of the image that

00:07:22,669 --> 00:07:30,620
will be the output image and then the

00:07:28,490 --> 00:07:31,909
next step is to run the image so this

00:07:30,620 --> 00:07:34,219
will just take the image that's already

00:07:31,909 --> 00:07:42,770
been created and it creates a container

00:07:34,219 --> 00:07:45,110
from the image so as node developers we

00:07:42,770 --> 00:07:47,479
know that not everything just comes out

00:07:45,110 --> 00:07:49,580
of node we might get a package well we

00:07:47,479 --> 00:07:51,560
do get a package manager but we have

00:07:49,580 --> 00:07:54,409
other package managers that we might

00:07:51,560 --> 00:07:57,259
want to install and use like yarn we

00:07:54,409 --> 00:07:58,879
also have tools for static typing there

00:07:57,259 --> 00:08:02,270
are too many front-end frameworks to

00:07:58,879 --> 00:08:05,270
really count and so we want to make sure

00:08:02,270 --> 00:08:07,669
that if we have a source code that also

00:08:05,270 --> 00:08:09,620
has kind of these extensions on node and

00:08:07,669 --> 00:08:11,449
JavaScript that were also catering to

00:08:09,620 --> 00:08:14,180
those so this is where multi dependency

00:08:11,449 --> 00:08:17,199
builds comes from so one of the ways

00:08:14,180 --> 00:08:20,029
there is one of the ways that we can

00:08:17,199 --> 00:08:23,809
cater to those environments is by using

00:08:20,029 --> 00:08:27,319
a builder and so a builder tamil is a

00:08:23,809 --> 00:08:30,289
file that will create a builder image

00:08:27,319 --> 00:08:32,779
and so this is kind of a step above a

00:08:30,289 --> 00:08:34,819
build pack or a build beyond that so a

00:08:32,779 --> 00:08:37,190
build pack it takes multiple build packs

00:08:34,819 --> 00:08:38,810
and creates an image to be run against

00:08:37,190 --> 00:08:41,089
source code so as you could see here

00:08:38,810 --> 00:08:42,829
these are a bunch of build packs that

00:08:41,089 --> 00:08:48,500
we've created at Heroku that we might

00:08:42,829 --> 00:08:51,560
need for a node source code node NPM and

00:08:48,500 --> 00:08:53,750
yarn and might is the really important

00:08:51,560 --> 00:08:55,850
word here

00:08:53,750 --> 00:08:59,209
because next so further down on a

00:08:55,850 --> 00:09:02,060
builder file you'll see that we have two

00:08:59,209 --> 00:09:03,920
different groupings so the thing with

00:09:02,060 --> 00:09:06,050
the build pack also is that if it fails

00:09:03,920 --> 00:09:09,529
the detection script it will fail the

00:09:06,050 --> 00:09:12,680
build but and for reasons that because

00:09:09,529 --> 00:09:15,649
it can't detect source code but if it's

00:09:12,680 --> 00:09:18,079
in builder grouping if it fails that

00:09:15,649 --> 00:09:21,199
group it will just move on to the next

00:09:18,079 --> 00:09:25,670
group so that it can use that grouping

00:09:21,199 --> 00:09:27,319
of sort of build packs so for instance

00:09:25,670 --> 00:09:31,310
our yarn filled pack looks for a yarn

00:09:27,319 --> 00:09:34,730
lock file this is how we prioritized it

00:09:31,310 --> 00:09:36,740
because usually people opt out of NPM to

00:09:34,730 --> 00:09:38,540
use yarn so we want to detect for yarn

00:09:36,740 --> 00:09:41,540
lock file and if they don't have a yarn

00:09:38,540 --> 00:09:44,000
lock file then it'll move to and use NPM

00:09:41,540 --> 00:09:46,279
because that's the default package

00:09:44,000 --> 00:09:53,000
manager that no developers would be

00:09:46,279 --> 00:09:56,180
using and so this is visual of a builder

00:09:53,000 --> 00:09:58,819
image so that builder dot Tamil file

00:09:56,180 --> 00:10:01,430
will when you run it through a build

00:09:58,819 --> 00:10:03,709
they will create this builder image so

00:10:01,430 --> 00:10:06,860
at the the base we have a Heroku stack

00:10:03,709 --> 00:10:09,019
image we're using Heroku 18 which is

00:10:06,860 --> 00:10:11,959
based off of a taboo to image and so

00:10:09,019 --> 00:10:13,730
this is the operating system that the

00:10:11,959 --> 00:10:15,350
code will run on and then we have all of

00:10:13,730 --> 00:10:23,120
the dependencies which kind of stack on

00:10:15,350 --> 00:10:25,819
it on to each other node yarn and NPM so

00:10:23,120 --> 00:10:29,600
it's just as easy to create a an image

00:10:25,819 --> 00:10:33,170
and run a container with a builder first

00:10:29,600 --> 00:10:38,449
is instead of passing in a build pack

00:10:33,170 --> 00:10:41,029
flag you can pass in a builder and then

00:10:38,449 --> 00:10:43,009
the next is that you just create the

00:10:41,029 --> 00:10:46,759
container from the image that you've

00:10:43,009 --> 00:10:48,709
created you'll see here that we have dr.

00:10:46,759 --> 00:10:54,019
run and then the image name but there's

00:10:48,709 --> 00:10:56,959
no actual executions script so the same

00:10:54,019 --> 00:10:58,879
way that build packs are smart enough to

00:10:56,959 --> 00:11:01,279
understand the environment that it's

00:10:58,879 --> 00:11:04,130
creating for node it's also smart enough

00:11:01,279 --> 00:11:06,920
to give the image a default run step

00:11:04,130 --> 00:11:09,529
because node and

00:11:06,920 --> 00:11:12,019
NPM and yarn applications only have so

00:11:09,529 --> 00:11:15,589
many execution steps that they're going

00:11:12,019 --> 00:11:18,500
to use so it assigns an execution script

00:11:15,589 --> 00:11:21,440
to the to the image so when it's run it

00:11:18,500 --> 00:11:23,510
just starts it so for instance this will

00:11:21,440 --> 00:11:27,320
just start a node server I think it's

00:11:23,510 --> 00:11:32,899
just node space index J s and so the

00:11:27,320 --> 00:11:34,550
image knows to run this step so I kind

00:11:32,899 --> 00:11:36,199
of said a lot of words that all sound

00:11:34,550 --> 00:11:39,889
the same so I wanted to recap some of

00:11:36,199 --> 00:11:41,870
these so first build pack is scripts

00:11:39,889 --> 00:11:46,339
that are run that will output a docker

00:11:41,870 --> 00:11:48,110
image builds take an input of build

00:11:46,339 --> 00:11:51,860
packs and source code and then they

00:11:48,110 --> 00:11:54,290
output an image builder dot Tamil and

00:11:51,860 --> 00:11:57,470
builders define multi build pack build

00:11:54,290 --> 00:12:01,910
environments pack is a command line tool

00:11:57,470 --> 00:12:03,829
for executing builds locally and then

00:12:01,910 --> 00:12:11,480
darker files are what we're trying to

00:12:03,829 --> 00:12:14,310
avoid here ok so I have a demo Lee I

00:12:11,480 --> 00:12:17,440
think that's big enough

00:12:14,310 --> 00:12:17,440
[Music]

00:12:22,640 --> 00:12:30,260
okay I recorded it because don't want to

00:12:28,010 --> 00:12:42,800
put you through the torture of having to

00:12:30,260 --> 00:12:44,720
watch me miss typing okay so first we

00:12:42,800 --> 00:12:46,160
are creating our Builder image here so

00:12:44,720 --> 00:12:49,910
that's what I talked about when we saw

00:12:46,160 --> 00:12:52,610
the stack of Heroku 18 node yarn it's

00:12:49,910 --> 00:12:54,950
taking a builder config file that's the

00:12:52,610 --> 00:12:56,870
Builder tamil and then it's running no

00:12:54,950 --> 00:12:59,120
pull so that means that it's not

00:12:56,870 --> 00:13:00,800
actually pulling from remote the Heroku

00:12:59,120 --> 00:13:02,329
stack image because I already have it

00:13:00,800 --> 00:13:04,190
locally and it just cuts down on

00:13:02,329 --> 00:13:05,510
production time if I don't have to take

00:13:04,190 --> 00:13:08,810
the stack image because it's most likely

00:13:05,510 --> 00:13:17,600
not going to be updated that often so

00:13:08,810 --> 00:13:19,820
I've created my image there we go okay

00:13:17,600 --> 00:13:23,720
and so now I'm gonna build my image from

00:13:19,820 --> 00:13:26,209
my source code and so I am building the

00:13:23,720 --> 00:13:29,269
node server I pass in the Builder and

00:13:26,209 --> 00:13:31,399
also read a node pull and then as you

00:13:29,269 --> 00:13:38,180
can see it's run the detect scripts it's

00:13:31,399 --> 00:13:39,890
gone through yarn and so there's a

00:13:38,180 --> 00:13:42,320
couple steps there from build as well

00:13:39,890 --> 00:13:44,209
you can see it's downloaded node it's

00:13:42,320 --> 00:13:47,269
downloaded yarn installed the node

00:13:44,209 --> 00:13:49,310
modules and then run the export and

00:13:47,269 --> 00:13:50,930
cache those layers so the layers that we

00:13:49,310 --> 00:13:54,290
have that we want to make sure that we

00:13:50,930 --> 00:13:55,579
remember our node yarn and our node

00:13:54,290 --> 00:14:00,769
modules because we will be looking at

00:13:55,579 --> 00:14:02,959
those later so the next step we could do

00:14:00,769 --> 00:14:04,910
is use pack to inspect our image we get

00:14:02,959 --> 00:14:07,880
some metadata here like what build packs

00:14:04,910 --> 00:14:14,029
we use the run images and then the stack

00:14:07,880 --> 00:14:16,130
that we're running on and we can see

00:14:14,029 --> 00:14:18,290
here that we have a list of images that

00:14:16,130 --> 00:14:20,480
we've just created so our node server

00:14:18,290 --> 00:14:22,040
which is from the Builder and then the

00:14:20,480 --> 00:14:28,880
Builder image what we just created from

00:14:22,040 --> 00:14:31,310
an art yeah yarn and PM and node so we

00:14:28,880 --> 00:14:33,589
can run a couple scripts against our

00:14:31,310 --> 00:14:35,890
docker image we can look at the node

00:14:33,589 --> 00:14:37,660
version that we've that it's using

00:14:35,890 --> 00:14:41,170
the image is using we can run a test

00:14:37,660 --> 00:14:51,970
script locally and then last but not

00:14:41,170 --> 00:14:54,700
least we can run our server so we kind

00:14:51,970 --> 00:14:56,560
of saw how the layers are built they run

00:14:54,700 --> 00:15:00,040
in the build and then they're exported

00:14:56,560 --> 00:15:03,160
and then they are cached at the very

00:15:00,040 --> 00:15:05,680
last step and so this is an example of

00:15:03,160 --> 00:15:08,170
the layers that are created from the

00:15:05,680 --> 00:15:10,120
docker image that we've created from

00:15:08,170 --> 00:15:13,390
this build pack so like I said we have

00:15:10,120 --> 00:15:15,339
the Heroku base image and then this

00:15:13,390 --> 00:15:18,459
multi build pack or that the Builder has

00:15:15,339 --> 00:15:20,800
created an image which has node yarn a

00:15:18,459 --> 00:15:25,019
layer four node modules and then source

00:15:20,800 --> 00:15:28,180
code on top and so the good thing about

00:15:25,019 --> 00:15:31,029
layers is that while it might seem like

00:15:28,180 --> 00:15:34,540
a stack it's actually layers that you

00:15:31,029 --> 00:15:37,329
can swap out so that they don't impact

00:15:34,540 --> 00:15:40,660
the lower layers and also the subsequent

00:15:37,329 --> 00:15:44,440
layers so for instance if I want to swap

00:15:40,660 --> 00:15:47,709
out no.12 for node 13 and not have to

00:15:44,440 --> 00:15:50,410
rebuild my node images or touch my

00:15:47,709 --> 00:15:53,170
source code or recompile let's top to

00:15:50,410 --> 00:15:57,010
recompile but um I could just update my

00:15:53,170 --> 00:16:00,339
package JSON with to say hey I want to

00:15:57,010 --> 00:16:02,230
use node 13 and then it'll three you

00:16:00,339 --> 00:16:07,000
could rebuild your image and then it'll

00:16:02,230 --> 00:16:08,860
replace that layer so it would be nice

00:16:07,000 --> 00:16:11,529
if we could just run our production

00:16:08,860 --> 00:16:16,360
servers on our local computers but that

00:16:11,529 --> 00:16:17,920
isn't saying nor practical so also the

00:16:16,360 --> 00:16:19,720
benefit of layers is that when you

00:16:17,920 --> 00:16:22,180
update them locally those are the only

00:16:19,720 --> 00:16:25,420
things that get pushed up so if I'm

00:16:22,180 --> 00:16:28,240
updating something like an image that I

00:16:25,420 --> 00:16:30,040
have on docker hub I can refill my image

00:16:28,240 --> 00:16:33,910
locally and then when I push up the

00:16:30,040 --> 00:16:35,680
layers to the registry they are there's

00:16:33,910 --> 00:16:37,990
a delta that's analyzed between what I

00:16:35,680 --> 00:16:40,779
have remotely and what I have what I

00:16:37,990 --> 00:16:45,910
have locally and it'll just push those

00:16:40,779 --> 00:16:49,620
updated layers up so another great thing

00:16:45,910 --> 00:16:52,779
about layers is that you don't have to

00:16:49,620 --> 00:16:54,580
the same way that you can use them for

00:16:52,779 --> 00:16:58,450
caching you also use them for subsequent

00:16:54,580 --> 00:17:00,459
build locally so in the first image

00:16:58,450 --> 00:17:01,990
everything's going to be slower because

00:17:00,459 --> 00:17:05,140
you're building everything for the first

00:17:01,990 --> 00:17:06,760
time but you have a cache that's

00:17:05,140 --> 00:17:08,380
available so when I'm running a build

00:17:06,760 --> 00:17:11,020
there's three directories that I have

00:17:08,380 --> 00:17:13,709
access to so the first one is my

00:17:11,020 --> 00:17:15,970
application code then I have the build

00:17:13,709 --> 00:17:17,949
directory or the build pack directory

00:17:15,970 --> 00:17:20,020
and then there's a third directory which

00:17:17,949 --> 00:17:23,110
is art layers and so the build pack

00:17:20,020 --> 00:17:24,760
takes out the stuff that the the

00:17:23,110 --> 00:17:29,200
dependencies that I might want to reuse

00:17:24,760 --> 00:17:31,390
node modules yarn node and it will put

00:17:29,200 --> 00:17:34,300
those in the it'll duplicate those over

00:17:31,390 --> 00:17:39,910
to the to the cache so that they could

00:17:34,300 --> 00:17:42,370
be used later so this is configured by

00:17:39,910 --> 00:17:45,309
using a Tamil font and again a Tamil

00:17:42,370 --> 00:17:48,309
file and so we make we configure it so

00:17:45,309 --> 00:17:50,650
that we let the builder know or the the

00:17:48,309 --> 00:17:52,720
build pack know that okay do I want to

00:17:50,650 --> 00:17:54,030
make this available for the cache do I

00:17:52,720 --> 00:17:57,340
want to make this available for

00:17:54,030 --> 00:17:59,530
subsequent build packs so for instance

00:17:57,340 --> 00:18:01,450
if I'm running node and then I'm running

00:17:59,530 --> 00:18:03,669
the yarn build pack do I want to make

00:18:01,450 --> 00:18:05,500
node available to yarn answer is yes

00:18:03,669 --> 00:18:07,630
because I need it and then also do I

00:18:05,500 --> 00:18:13,300
want these dependencies available for

00:18:07,630 --> 00:18:17,470
the runtime and so if it's a cache

00:18:13,300 --> 00:18:19,150
that's available for the next build we

00:18:17,470 --> 00:18:22,679
could take those from cache and then the

00:18:19,150 --> 00:18:26,490
second image will be built a lot faster

00:18:22,679 --> 00:18:26,490
here's my next demo

00:18:32,850 --> 00:18:37,660
okay

00:18:34,059 --> 00:18:40,690
so right now I am tacking tagging

00:18:37,660 --> 00:18:43,090
tagging the the note server image that I

00:18:40,690 --> 00:18:45,940
created and I'm pushing it up to Heroku

00:18:43,090 --> 00:18:48,880
container registry so that I can run it

00:18:45,940 --> 00:18:50,380
on Heroku this middle one it's gonna

00:18:48,880 --> 00:18:51,580
take forever so you can see this is

00:18:50,380 --> 00:18:53,170
really annoying we don't want to if

00:18:51,580 --> 00:18:55,090
we're testing something we don't want to

00:18:53,170 --> 00:18:56,860
push this every time I also sped up this

00:18:55,090 --> 00:19:01,210
video so this is actually twice as fast

00:18:56,860 --> 00:19:03,340
as when I was doing this so then we

00:19:01,210 --> 00:19:06,280
there we go so now we're gonna change

00:19:03,340 --> 00:19:12,460
the version of node which my videos off

00:19:06,280 --> 00:19:13,990
vibe so that got messed up but if anyone

00:19:12,460 --> 00:19:18,640
didn't see I changed the version of node

00:19:13,990 --> 00:19:22,900
from 12 to 13 and then I rebuild the

00:19:18,640 --> 00:19:26,350
image from the Builder so we could see

00:19:22,900 --> 00:19:28,600
here that we're downloading and we're

00:19:26,350 --> 00:19:36,610
redownload ik mode and using node 13 but

00:19:28,600 --> 00:19:38,169
we're reusing our node modules we're

00:19:36,610 --> 00:19:40,660
gonna retag the image that we just

00:19:38,169 --> 00:19:44,049
created and then we're gonna push it up

00:19:40,660 --> 00:19:46,360
to Heroku again so we can see here that

00:19:44,049 --> 00:19:48,610
there's only two layers being pushed and

00:19:46,360 --> 00:19:50,320
that's the new node emmitt the new node

00:19:48,610 --> 00:19:53,910
layer and then the layer of the source

00:19:50,320 --> 00:19:53,910
code that we changed in the package.json

00:19:56,070 --> 00:20:02,950
okay so also to just show you how easy

00:20:00,760 --> 00:20:08,260
this is I do have a gonna try to do a

00:20:02,950 --> 00:20:10,480
live demo and hopefully it works so this

00:20:08,260 --> 00:20:13,570
is the so this is assert the server that

00:20:10,480 --> 00:20:17,559
I've been using for the image that I've

00:20:13,570 --> 00:20:22,150
just created and I put it on Heroku so

00:20:17,559 --> 00:20:27,010
I'm going to change the color of the

00:20:22,150 --> 00:20:30,120
background of that well of that in that

00:20:27,010 --> 00:20:30,120
website the page

00:20:43,650 --> 00:20:45,680
ah

00:20:53,320 --> 00:20:59,980
there you okay alright well

00:21:05,190 --> 00:21:09,690
okay well it's getting messed up because

00:21:06,989 --> 00:21:10,919
I resized it so I think I'm just gonna

00:21:09,690 --> 00:21:12,330
skip that if you have any questions

00:21:10,919 --> 00:21:14,279
about that step I'll just need to tell

00:21:12,330 --> 00:21:16,499
you what I was gonna do so what I was

00:21:14,279 --> 00:21:18,950
doing was I was gonna change the

00:21:16,499 --> 00:21:22,729
background of the image and then of the

00:21:18,950 --> 00:21:26,190
this website that we have here and then

00:21:22,729 --> 00:21:27,929
and then I could push it up to Heroku

00:21:26,190 --> 00:21:29,669
and then release the container and then

00:21:27,929 --> 00:21:31,049
you could see that the only layer that

00:21:29,669 --> 00:21:33,269
would have changed so we saw those two

00:21:31,049 --> 00:21:34,259
layers that were changing and then so

00:21:33,269 --> 00:21:35,759
the only layer that would have changed

00:21:34,259 --> 00:21:37,200
would have been the top layer which

00:21:35,759 --> 00:21:38,789
would have been a really fast push and

00:21:37,200 --> 00:21:40,289
then it updates automatically and we

00:21:38,789 --> 00:21:47,729
released it on Heroku and then it would

00:21:40,289 --> 00:21:50,039
have been changed in seconds so so

00:21:47,729 --> 00:21:52,259
anyways so we have a couple benefits

00:21:50,039 --> 00:21:54,679
like I've talked through for building

00:21:52,259 --> 00:21:57,599
containers with cloud native build packs

00:21:54,679 --> 00:21:58,950
build packs are modular they take

00:21:57,599 --> 00:22:01,409
advantage of docker layers that

00:21:58,950 --> 00:22:04,169
logically map to source code components

00:22:01,409 --> 00:22:06,299
and dependencies you can also change

00:22:04,169 --> 00:22:09,509
build packs to suit the needs of any

00:22:06,299 --> 00:22:11,489
container its scalable so you can use

00:22:09,509 --> 00:22:14,789
them across projects that use the same

00:22:11,489 --> 00:22:17,039
technologies source code can remain free

00:22:14,789 --> 00:22:18,869
of container configuration and you don't

00:22:17,039 --> 00:22:21,049
have to maintain those over time as we

00:22:18,869 --> 00:22:24,690
saw in my story before that can get

00:22:21,049 --> 00:22:26,729
pretty overwhelming it's also efficient

00:22:24,690 --> 00:22:28,609
because you can use darker features to

00:22:26,729 --> 00:22:32,070
enable an agile and composable

00:22:28,609 --> 00:22:34,169
development workflow and then also build

00:22:32,070 --> 00:22:36,059
packs remove a learning curve for people

00:22:34,169 --> 00:22:38,700
that really just want to get started

00:22:36,059 --> 00:22:43,229
with containers easily and they don't

00:22:38,700 --> 00:22:46,919
have the knowledge to do that quickly so

00:22:43,229 --> 00:22:55,349
I have some resources here oops

00:22:46,919 --> 00:22:58,049
I clicked the link so first okay so if

00:22:55,349 --> 00:23:00,059
you go to bill paxton IL this is the

00:22:58,049 --> 00:23:02,669
site for cloud native build packs and

00:23:00,059 --> 00:23:04,169
that's where you can learn more about

00:23:02,669 --> 00:23:05,759
build packs how to use them the

00:23:04,169 --> 00:23:09,809
different options and also you can

00:23:05,759 --> 00:23:11,220
create your own build pack this is some

00:23:09,809 --> 00:23:14,039
more information about deploying with

00:23:11,220 --> 00:23:15,989
docker so everything on Heroku so

00:23:14,039 --> 00:23:18,810
everything that I was doing I was using

00:23:15,989 --> 00:23:21,090
containers on docker or on Heroku

00:23:18,810 --> 00:23:22,890
and so this has some documentation

00:23:21,090 --> 00:23:28,080
around that and then this is all the

00:23:22,890 --> 00:23:30,450
source code that I used for this demo so

00:23:28,080 --> 00:23:32,070
we have Heroku has a couple cloud native

00:23:30,450 --> 00:23:35,280
build packs that we've been creating and

00:23:32,070 --> 00:23:40,080
then our builder images are at our PAC

00:23:35,280 --> 00:23:43,710
images repo the demos that I just

00:23:40,080 --> 00:23:45,450
created and if you have more if you want

00:23:43,710 --> 00:23:55,100
to go over the slides again

00:23:45,450 --> 00:23:55,100
the slides are at this URL go back yeah

00:24:02,030 --> 00:24:11,130
okay alright and that's all I have thank

00:24:08,460 --> 00:24:12,930
you everyone for listening I'll be at

00:24:11,130 --> 00:24:15,720
the Heroku booth pretty much from noon

00:24:12,930 --> 00:24:17,250
until the end of the conference so I'd

00:24:15,720 --> 00:24:20,100
love to chat about cloud native build

00:24:17,250 --> 00:24:21,540
products or node or just come say hi

00:24:20,100 --> 00:24:25,830
we have build pack stickers and note

00:24:21,540 --> 00:24:27,900
stickers also I also have open

00:24:25,830 --> 00:24:30,270
collective gift cards where you can

00:24:27,900 --> 00:24:33,450
contribute to open source which I'd be

00:24:30,270 --> 00:24:36,430
happy to hand out after my talk and yeah

00:24:33,450 --> 00:24:39,470
that's all I have thank you very much

00:24:36,430 --> 00:24:42,210
[Applause]

00:24:39,470 --> 00:24:44,280
and I think I have a couple minutes for

00:24:42,210 --> 00:24:47,750
questions if anyone has any I know we

00:24:44,280 --> 00:24:47,750
ran three minutes for questions

00:24:48,470 --> 00:24:51,470
yes

00:24:56,300 --> 00:25:03,270
no that's a good time that's not a good

00:24:58,800 --> 00:25:06,690
time question No so Heroku is so first

00:25:03,270 --> 00:25:08,220
of all I will give you a form to you

00:25:06,690 --> 00:25:10,470
could try Heroku for free we have a free

00:25:08,220 --> 00:25:13,740
tier if you're curious but you can

00:25:10,470 --> 00:25:18,300
deploy with docker on Heroku but Heroku

00:25:13,740 --> 00:25:20,400
is actually how can I describe this so

00:25:18,300 --> 00:25:22,350
you don't need docker to deploy but

00:25:20,400 --> 00:25:23,970
because it does things a little bit

00:25:22,350 --> 00:25:25,980
differently if you have a piece of

00:25:23,970 --> 00:25:29,160
source code and you just push it up to

00:25:25,980 --> 00:25:31,830
Heroku whoever uses get to deploy code

00:25:29,160 --> 00:25:33,210
you can it will detect like the source

00:25:31,830 --> 00:25:34,800
code so the same way that build packs

00:25:33,210 --> 00:25:36,929
use it detects the source code that you

00:25:34,800 --> 00:25:41,970
have it detects the source code and then

00:25:36,929 --> 00:25:43,980
it'll it'll run it on Heroku for you I

00:25:41,970 --> 00:25:46,590
know that sounds really simple but

00:25:43,980 --> 00:25:48,390
that's pretty much how it works yeah and

00:25:46,590 --> 00:25:49,530
then I couldn't give you like if you

00:25:48,390 --> 00:25:51,870
wanna if you're interested in like

00:25:49,530 --> 00:25:53,910
seeing what how the different ways to

00:25:51,870 --> 00:26:00,809
deploy on Heroku I can show you how to

00:25:53,910 --> 00:26:02,940
do that yeah exactly yeah and then like

00:26:00,809 --> 00:26:06,300
so for Ruby it looks for a gem file for

00:26:02,940 --> 00:26:08,340
PHP looks for a composer file you know

00:26:06,300 --> 00:26:17,730
does other stuff for for the other

00:26:08,340 --> 00:26:21,350
languages so any other questions okay

00:26:17,730 --> 00:26:21,350
cool well thank you

00:26:21,940 --> 00:26:25,079

YouTube URL: https://www.youtube.com/watch?v=exYyUbMaeJg


