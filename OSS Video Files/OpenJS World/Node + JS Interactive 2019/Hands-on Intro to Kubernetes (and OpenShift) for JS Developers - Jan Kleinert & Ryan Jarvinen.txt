Title: Hands-on Intro to Kubernetes (and OpenShift) for JS Developers - Jan Kleinert & Ryan Jarvinen
Publication date: 2020-05-11
Playlist: Node + JS Interactive 2019
Description: 
	Hands-on Intro to Kubernetes (and OpenShift) for JS Developers - Jan Kleinert & Ryan Jarvinen, Red Hat (Limited Seating; First-come, First-Served Basis)
Speakers: Ryan Jarvinen, Jan Kleinert
Learn to build and deploy cloud-native Node.js applications on Kubernetes and OpenShift through a series of hands-on lab examples.

This interactive session involves using kubectl, oc, curl, and common command-line tools to interact with Kubernetes APIs. By the end of this lab, youâ€™ll be deploying, scaling, and automating JS-based distributed solutions using containers, Kubernetes, and other popular open source tools for distributed computing.

These examples are designed to show JS developers how to maintain speed and productivity with a container-based development workflow.
Captions: 
	00:00:00,030 --> 00:00:08,099
oh hello and welcome this is hands-on

00:00:05,190 --> 00:00:13,099
intro to kubernetes and openshift

00:00:08,099 --> 00:00:15,990
for Jas developers at nodejs interactive

00:00:13,099 --> 00:00:18,990
thank you all for joining us this

00:00:15,990 --> 00:00:21,150
morning I'm doing a overview for the for

00:00:18,990 --> 00:00:24,480
the cameras here because it looks like

00:00:21,150 --> 00:00:26,670
they're recording so looks like

00:00:24,480 --> 00:00:30,900
hopefully we're all in the right room

00:00:26,670 --> 00:00:36,120
and space you can find these slides at

00:00:30,900 --> 00:00:42,570
this URL bitly / k 8s

00:00:36,120 --> 00:00:47,370
- interact so if you open up that link

00:00:42,570 --> 00:00:55,379
you should see the same thing I have on

00:00:47,370 --> 00:00:58,770
my screen and good morning everyone I'm

00:00:55,379 --> 00:01:01,980
Ryan J Ryan jarvan and you can find me

00:00:58,770 --> 00:01:07,020
as Ryan J most places online I'll put

00:01:01,980 --> 00:01:10,150
this URL in our spreadsheet as well

00:01:07,020 --> 00:01:12,280
here is

00:01:10,150 --> 00:01:16,560
the spreadsheet we're gonna want to take

00:01:12,280 --> 00:01:16,560
a look at for signing in

00:01:22,770 --> 00:01:24,829
you

00:01:28,490 --> 00:01:30,549
you

00:01:41,460 --> 00:01:43,520
you

00:01:43,820 --> 00:01:53,910
okay I'm putting another copy of the

00:01:48,360 --> 00:01:56,010
bitly URL in the slides but if you are

00:01:53,910 --> 00:02:00,270
plan on following along get your laptop

00:01:56,010 --> 00:02:03,330
out and join us at this bitly address my

00:02:00,270 --> 00:02:07,710
slides are at the other bitly address

00:02:03,330 --> 00:02:11,390
k8s - interact and this is where we'll

00:02:07,710 --> 00:02:15,810
be picking user names i have claimed

00:02:11,390 --> 00:02:19,290
user 1 as my user ID you are all welcome

00:02:15,810 --> 00:02:23,430
to grab your own user ID out of this

00:02:19,290 --> 00:02:25,710
list you can mark your name if you like

00:02:23,430 --> 00:02:28,800
so folks don't uh don't claim your

00:02:25,710 --> 00:02:32,340
particular user ID but for the rest of

00:02:28,800 --> 00:02:35,940
the workshop as far as the computers are

00:02:32,340 --> 00:02:39,450
concerned you will be known as user and

00:02:35,940 --> 00:02:43,070
then some number right so copying this

00:02:39,450 --> 00:02:45,390
value whenever you see that user name

00:02:43,070 --> 00:02:47,370
and I think it says this in the

00:02:45,390 --> 00:02:48,959
spreadsheet but when you log in when

00:02:47,370 --> 00:02:50,130
you're prompted to log into OpenShift

00:02:48,959 --> 00:02:54,150
the password that you're gonna use is

00:02:50,130 --> 00:02:59,680
openshift yeah step 3 here

00:02:54,150 --> 00:03:07,099
password is OpenShift cool so

00:02:59,680 --> 00:03:11,769
everyone ready I will jump ahead so Ryan

00:03:07,099 --> 00:03:14,689
and Jan Kleinert here we are both

00:03:11,769 --> 00:03:20,030
developer advocates in Red Hat's

00:03:14,689 --> 00:03:24,579
openshift team we have been openshift

00:03:20,030 --> 00:03:28,639
is kind of Red Hat's distribution around

00:03:24,579 --> 00:03:31,639
kubernetes you have probably heard of

00:03:28,639 --> 00:03:35,659
Red Hat before as far as Red Hat Linux

00:03:31,639 --> 00:03:39,909
or many of the other Linux distros we

00:03:35,659 --> 00:03:44,599
maintain sentai West Linux Fedora Linux

00:03:39,909 --> 00:03:47,959
core OS Linux is one of them all of

00:03:44,599 --> 00:03:52,010
these distributions are attempts to help

00:03:47,959 --> 00:03:55,370
you all be productive with open source

00:03:52,010 --> 00:03:57,500
and particularly with Linux right and

00:03:55,370 --> 00:04:01,010
when we give you a distro we don't just

00:03:57,500 --> 00:04:02,989
give you the Linux kernel and say good

00:04:01,010 --> 00:04:05,389
luck you're on your own we give you a

00:04:02,989 --> 00:04:08,269
lot more support than that to help

00:04:05,389 --> 00:04:13,669
ensure your productivity there's things

00:04:08,269 --> 00:04:16,759
like security user access controls a way

00:04:13,669 --> 00:04:19,489
to source packages from the community a

00:04:16,759 --> 00:04:22,150
way to do system updates and we try to

00:04:19,489 --> 00:04:25,940
do all of that in our kubernetes

00:04:22,150 --> 00:04:27,820
distribution as well and that's what

00:04:25,940 --> 00:04:32,419
open shift is so we're gonna show you

00:04:27,820 --> 00:04:36,039
first hour is basically all intro to

00:04:32,419 --> 00:04:39,139
kubernetes so you understand kind of

00:04:36,039 --> 00:04:42,050
what's happening in the larger community

00:04:39,139 --> 00:04:45,289
and then second hour will flip into a

00:04:42,050 --> 00:04:49,460
little bit of what OpenShift

00:04:45,289 --> 00:04:53,479
adds to the experience to kind of really

00:04:49,460 --> 00:04:56,330
help you get some traction and get find

00:04:53,479 --> 00:04:58,460
some productivity hopefully so first I

00:04:56,330 --> 00:05:00,080
have a quick survey for the folks in the

00:04:58,460 --> 00:05:02,930
room here to get a little bit more

00:05:00,080 --> 00:05:05,539
information about who you are and your

00:05:02,930 --> 00:05:08,389
background so how many folks here have

00:05:05,539 --> 00:05:10,430
experience using containers docker or

00:05:08,389 --> 00:05:11,930
some other and that's cool almost

00:05:10,430 --> 00:05:12,950
everybody here looks like they're using

00:05:11,930 --> 00:05:15,110
container

00:05:12,950 --> 00:05:18,639
or have used containers how many folks

00:05:15,110 --> 00:05:22,240
here have experience using kubernetes

00:05:18,639 --> 00:05:25,870
looks like little half or or more about

00:05:22,240 --> 00:05:28,090
cool that's encouraging I've noticed a

00:05:25,870 --> 00:05:30,729
lot more hands going up at JavaScript

00:05:28,090 --> 00:05:34,960
events than than I've seen in in years

00:05:30,729 --> 00:05:36,879
past so that's really cool how many of

00:05:34,960 --> 00:05:38,919
those folks I'm kind of expecting

00:05:36,879 --> 00:05:43,139
decreasing numbers of hands with each of

00:05:38,919 --> 00:05:47,800
these how many consider yourselves to be

00:05:43,139 --> 00:05:52,690
basically proficient with either the OC

00:05:47,800 --> 00:05:55,300
or coop CTL command line tools anyone

00:05:52,690 --> 00:05:56,949
care to raise a hand on that cool cool

00:05:55,300 --> 00:06:00,340
some brave folks it looks like four or

00:05:56,949 --> 00:06:05,620
five folks and how many folks feel like

00:06:00,340 --> 00:06:09,000
they can name five kubernetes resource

00:06:05,620 --> 00:06:09,000
types or primitives

00:06:09,700 --> 00:06:13,780
not gonna call you on it but yeah - two

00:06:11,680 --> 00:06:15,670
or three people okay not not a whole lot

00:06:13,780 --> 00:06:17,110
of folks but a couple folks feel like

00:06:15,670 --> 00:06:21,130
they can name a couple of these things

00:06:17,110 --> 00:06:22,870
that's really cool and all right so out

00:06:21,130 --> 00:06:25,060
of you folks that are remaining how many

00:06:22,870 --> 00:06:28,150
of folks feel like you can confidently

00:06:25,060 --> 00:06:30,640
say you have a plan for iterative web

00:06:28,150 --> 00:06:33,520
development that involves kubernetes or

00:06:30,640 --> 00:06:36,100
are you still doing like hey awesome

00:06:33,520 --> 00:06:38,830
cool nice good to see all right well I

00:06:36,100 --> 00:06:39,820
would be very curious to chat with you

00:06:38,830 --> 00:06:42,610
afterwards

00:06:39,820 --> 00:06:45,160
to see what's working well for you and

00:06:42,610 --> 00:06:48,640
and what's not working usually I hear

00:06:45,160 --> 00:06:51,460
folks sometimes what they really need in

00:06:48,640 --> 00:06:53,860
their local development is to be able to

00:06:51,460 --> 00:06:56,650
make a small change and to reload their

00:06:53,860 --> 00:07:00,820
browser and see that change instantly

00:06:56,650 --> 00:07:02,910
and using docker or using kubernetes

00:07:00,820 --> 00:07:04,810
they don't always have a clear path for

00:07:02,910 --> 00:07:09,070
achieving that kind of real-time

00:07:04,810 --> 00:07:11,170
development speed on a container based

00:07:09,070 --> 00:07:14,380
platform so hopefully we have time to

00:07:11,170 --> 00:07:17,350
show you a little bit of that as well at

00:07:14,380 --> 00:07:19,690
the end so first off we've got an

00:07:17,350 --> 00:07:23,560
introduction we're already going through

00:07:19,690 --> 00:07:25,720
that part here environment setup and

00:07:23,560 --> 00:07:27,910
then like I said kubernetes basics and

00:07:25,720 --> 00:07:29,580
then we'll flip to hands-on with

00:07:27,910 --> 00:07:34,060
openshift

00:07:29,580 --> 00:07:35,770
so let's go for it so I'm gonna be

00:07:34,060 --> 00:07:37,780
floating around the room while Ryan does

00:07:35,770 --> 00:07:40,080
this first part so if as we start doing

00:07:37,780 --> 00:07:43,060
the interactive stuff question

00:07:40,080 --> 00:07:45,310
definitely yeah we have a small enough

00:07:43,060 --> 00:07:47,860
room here feel free to raise a hand at

00:07:45,310 --> 00:07:51,100
any point if you need clarification on

00:07:47,860 --> 00:07:54,460
anything that haven't been set or if you

00:07:51,100 --> 00:07:58,030
get stuck on any piece definitely feel

00:07:54,460 --> 00:08:01,150
free to raise a hand but I am gonna try

00:07:58,030 --> 00:08:02,880
to keep the pace moving along during

00:08:01,150 --> 00:08:07,120
this first hour because it's a

00:08:02,880 --> 00:08:12,070
kubernetes is a really deep concept to

00:08:07,120 --> 00:08:14,950
try to absorb and so it's a lot of info

00:08:12,070 --> 00:08:17,580
I'm gonna have to work expeditiously to

00:08:14,950 --> 00:08:20,560
get us through the first hour on time so

00:08:17,580 --> 00:08:22,960
at a high level if you're not already

00:08:20,560 --> 00:08:24,789
familiar it seems like half of you folks

00:08:22,960 --> 00:08:27,729
this already but for the other half

00:08:24,789 --> 00:08:31,419
kubernetes is designed to be an OPS tool

00:08:27,729 --> 00:08:33,430
it primarily for you folks being

00:08:31,419 --> 00:08:35,649
JavaScript developers are gonna

00:08:33,430 --> 00:08:39,039
recognize it as kind of a collection of

00:08:35,649 --> 00:08:39,940
api's for managing container based

00:08:39,039 --> 00:08:43,599
workloads

00:08:39,940 --> 00:08:45,940
it was started patterned after some kind

00:08:43,599 --> 00:08:48,550
of best practices that Google had

00:08:45,940 --> 00:08:51,459
developed internally for wrangling all

00:08:48,550 --> 00:08:54,120
of their services

00:08:51,459 --> 00:08:56,950
so everything that Google's been

00:08:54,120 --> 00:09:00,930
containerized for quite a while over ten

00:08:56,950 --> 00:09:03,670
years and Google search Gmail apps

00:09:00,930 --> 00:09:06,100
everything you touch in your web browser

00:09:03,670 --> 00:09:08,279
and just based on the number of browser

00:09:06,100 --> 00:09:11,410
tabs I have open right now I'm probably

00:09:08,279 --> 00:09:15,279
touching 20 different containers run by

00:09:11,410 --> 00:09:19,750
Google right now just as me a single

00:09:15,279 --> 00:09:22,930
user right so kubernetes and if you

00:09:19,750 --> 00:09:27,610
click on this link here there's a link

00:09:22,930 --> 00:09:28,360
to what kubernetes is and what

00:09:27,610 --> 00:09:30,850
kubernetes

00:09:28,360 --> 00:09:32,350
is not and this is really clearly called

00:09:30,850 --> 00:09:35,320
out in the upstream kubernetes

00:09:32,350 --> 00:09:37,630
documentation they're trying to narrow

00:09:35,320 --> 00:09:40,390
the scope of kubernetes so that it

00:09:37,630 --> 00:09:47,709
doesn't grow and expand into some huge

00:09:40,390 --> 00:09:52,420
overblown project that is kind of beyond

00:09:47,709 --> 00:09:54,750
its intended scope and is unwieldy some

00:09:52,420 --> 00:09:57,520
folks have kind of migrated from the

00:09:54,750 --> 00:10:00,279
OpenStack community where they faced

00:09:57,520 --> 00:10:02,709
certain organizational challenges and

00:10:00,279 --> 00:10:05,310
some of the kubernetes organization is

00:10:02,709 --> 00:10:10,240
kind of an attempt to overcome the

00:10:05,310 --> 00:10:15,730
difficulties that past open efforts have

00:10:10,240 --> 00:10:18,220
had and so this focus and scope is

00:10:15,730 --> 00:10:20,430
really intentional but kubernetes is

00:10:18,220 --> 00:10:23,470
designed not to be an all-inclusive

00:10:20,430 --> 00:10:26,370
platform as-a-service like you may have

00:10:23,470 --> 00:10:30,190
seen from Heroku where you can give it a

00:10:26,370 --> 00:10:31,379
repo address and I tell it what language

00:10:30,190 --> 00:10:35,279
you're working in

00:10:31,379 --> 00:10:38,729
and get a hostname as the response right

00:10:35,279 --> 00:10:42,559
this is really lower-level api's and

00:10:38,729 --> 00:10:47,999
tools there's a some dashboard available

00:10:42,559 --> 00:10:51,269
but generally it's a it's a platform for

00:10:47,999 --> 00:10:53,340
running containers more than more than

00:10:51,269 --> 00:10:55,200
it is a development platform

00:10:53,340 --> 00:10:58,500
[Music]

00:10:55,200 --> 00:11:00,840
on the other hand openshift which is a

00:10:58,500 --> 00:11:04,310
CNC F certified distribution of

00:11:00,840 --> 00:11:07,880
kubernetes does try to include

00:11:04,310 --> 00:11:11,970
platform-as-a-service style workflows

00:11:07,880 --> 00:11:15,930
multi-tenant security the container

00:11:11,970 --> 00:11:19,350
registry metrics logs other things you'd

00:11:15,930 --> 00:11:21,810
kind of need to have if you were going

00:11:19,350 --> 00:11:23,630
to run kubernetes on a bare metal

00:11:21,810 --> 00:11:27,750
environment we try to give you

00:11:23,630 --> 00:11:30,440
everything you need for a you know to

00:11:27,750 --> 00:11:32,970
run run the whole cluster on your own

00:11:30,440 --> 00:11:36,150
hardware without having to sign up for

00:11:32,970 --> 00:11:40,020
additional cloud services if you're in

00:11:36,150 --> 00:11:42,390
the case where you you can't for more

00:11:40,020 --> 00:11:43,860
information specifically on kubernetes

00:11:42,390 --> 00:11:47,340
definitely check out the upstream

00:11:43,860 --> 00:11:50,540
documentation it's available on github

00:11:47,340 --> 00:11:54,840
and there's a really nice Doc's site

00:11:50,540 --> 00:11:57,840
openshift has its own upstream source

00:11:54,840 --> 00:12:01,140
publicly available and some pretty

00:11:57,840 --> 00:12:04,350
decent documentation as well so feel

00:12:01,140 --> 00:12:06,210
free to take a look at those later for

00:12:04,350 --> 00:12:10,380
today's workshop all you need is a

00:12:06,210 --> 00:12:12,660
browser laptop and you should be ready

00:12:10,380 --> 00:12:18,780
to go hopefully you've already picked

00:12:12,660 --> 00:12:22,740
your username in the sheet so remember

00:12:18,780 --> 00:12:24,870
that for for use in this link right here

00:12:22,740 --> 00:12:27,960
so if you haven't already clicked

00:12:24,870 --> 00:12:32,700
through to the workshop go ahead and

00:12:27,960 --> 00:12:37,920
open that up in a second browser tab I'm

00:12:32,700 --> 00:12:40,460
going to put that one I do that one side

00:12:37,920 --> 00:12:40,460
by side

00:12:45,320 --> 00:12:47,380
you

00:12:47,630 --> 00:12:53,290
okay so I chose user 1

00:12:51,779 --> 00:12:56,569
and

00:12:53,290 --> 00:12:59,569
word of OpenShift

00:12:56,569 --> 00:12:59,569
login

00:12:59,640 --> 00:13:04,540
and you should

00:13:01,180 --> 00:13:08,880
something like this will be spawning up

00:13:04,540 --> 00:13:12,160
a user environment for you this is a

00:13:08,880 --> 00:13:14,450
kind of a homegrown

00:13:12,160 --> 00:13:18,410
project that some team members were

00:13:14,450 --> 00:13:22,709
working on that boots up a shell with

00:13:18,410 --> 00:13:24,440
some some usage and filling here

00:13:22,709 --> 00:13:25,940
okay so

00:13:24,440 --> 00:13:27,720
to me a couple terminals I'm going to

00:13:25,940 --> 00:13:31,040
switch the

00:13:27,720 --> 00:13:33,970
switch the order of is

00:13:31,040 --> 00:13:33,970
okay

00:13:38,590 --> 00:13:50,460
all right how are

00:13:42,810 --> 00:13:52,940
how many folks have a browser and a user

00:13:50,460 --> 00:13:52,940
account

00:13:53,530 --> 00:13:58,240
that's

00:13:55,570 --> 00:14:00,020
side how many folks are stuck anyone

00:13:58,240 --> 00:14:03,709
need help

00:14:00,020 --> 00:14:05,810
No all right cool all right so everyone

00:14:03,709 --> 00:14:08,140
sees generally what I'm saying here

00:14:05,810 --> 00:14:11,540
you've got two terminals at your

00:14:08,140 --> 00:14:14,930
disposal you can also choose to use one

00:14:11,540 --> 00:14:17,209
of your own terminals from your laptop

00:14:14,930 --> 00:14:21,500
but you would need a couple command line

00:14:17,209 --> 00:14:24,140
tools OC and coop CTL you can get those

00:14:21,500 --> 00:14:28,910
later and try to repeat all of these

00:14:24,140 --> 00:14:31,190
slides examples using many coop or we

00:14:28,910 --> 00:14:35,750
also have a downloadable OpenShift

00:14:31,190 --> 00:14:38,360
called code ready containers so either

00:14:35,750 --> 00:14:41,899
those can give you an environment where

00:14:38,360 --> 00:14:45,589
you can run all of this later from your

00:14:41,899 --> 00:14:49,040
own laptop so let's get started I'm

00:14:45,589 --> 00:14:51,830
going to paste in a couple variables to

00:14:49,040 --> 00:14:53,990
initialize my shell and just to make

00:14:51,830 --> 00:14:57,440
sure that everyone here is familiar with

00:14:53,990 --> 00:15:00,920
how to copy and paste with this virtual

00:14:57,440 --> 00:15:04,790
terminal so let's let's see if we all

00:15:00,920 --> 00:15:06,980
know how to use the our keyboards I'll

00:15:04,790 --> 00:15:09,589
do a quick check I'm gonna hit since I'm

00:15:06,980 --> 00:15:12,730
on Linux I'm gonna use control-c over

00:15:09,589 --> 00:15:15,350
here and then to paste into a terminal

00:15:12,730 --> 00:15:18,100
anyone know how I paste into a terminal

00:15:15,350 --> 00:15:22,430
on on Linux

00:15:18,100 --> 00:15:26,830
control shift V

00:15:22,430 --> 00:15:28,660
see if it works on your system

00:15:26,830 --> 00:15:31,420
or if Apple V

00:15:28,660 --> 00:15:34,709
works for you great but if not control

00:15:31,420 --> 00:15:37,420
shift V hopefully we'll get you to paste

00:15:34,709 --> 00:15:41,920
into the terminal I'm going to paste

00:15:37,420 --> 00:15:44,740
these shell variables into both both of

00:15:41,920 --> 00:15:47,949
these terminals so have everything ready

00:15:44,740 --> 00:15:50,199
and then I'm going to verify that I

00:15:47,949 --> 00:15:52,089
should already be logged in and one of

00:15:50,199 --> 00:15:55,120
these terminals since we logged in via

00:15:52,089 --> 00:16:00,040
the web prompt I'm going to run

00:15:55,120 --> 00:16:02,040
OC Who am I in order to verify my user

00:16:00,040 --> 00:16:04,740
ID

00:16:02,040 --> 00:16:06,980
I could bump this font a little bit for

00:16:04,740 --> 00:16:06,980
you

00:16:07,670 --> 00:16:12,769
and don't run this next one but there's

00:16:10,009 --> 00:16:16,519
an example if if you were not logged in

00:16:12,769 --> 00:16:20,360
for some reason you can run OSI login in

00:16:16,519 --> 00:16:22,639
order to generate some login credentials

00:16:20,360 --> 00:16:24,319
this is a pretty basic feature it's

00:16:22,639 --> 00:16:28,819
something that's not included in

00:16:24,319 --> 00:16:31,339
kubernetes by default generally your

00:16:28,819 --> 00:16:33,860
administrator will have a cube config

00:16:31,339 --> 00:16:37,009
file that is kind of the root

00:16:33,860 --> 00:16:38,420
credentials and hopefully they don't

00:16:37,009 --> 00:16:41,540
give out that file

00:16:38,420 --> 00:16:44,240
hopefully they lock the system down but

00:16:41,540 --> 00:16:46,100
worst case they're giving out admin

00:16:44,240 --> 00:16:50,540
credentials to everyone in the cluster

00:16:46,100 --> 00:16:52,899
so this has a nice open shift includes a

00:16:50,540 --> 00:16:56,540
nice log in command that'll help you

00:16:52,899 --> 00:16:59,259
initialize your access to the cluster

00:16:56,540 --> 00:17:03,620
with an appropriate level of resource

00:16:59,259 --> 00:17:06,140
controls and and permissions so

00:17:03,620 --> 00:17:10,280
hopefully you see the right username

00:17:06,140 --> 00:17:12,589
echoed back here let's also run Kubb CTL

00:17:10,280 --> 00:17:17,120
version and test that we have a

00:17:12,589 --> 00:17:19,010
connection to the cluster so here my

00:17:17,120 --> 00:17:21,620
response has we actually I'm seeing two

00:17:19,010 --> 00:17:24,470
responses from the from the command I'm

00:17:21,620 --> 00:17:27,890
seeing a one as the client version and

00:17:24,470 --> 00:17:29,929
one is the server version this kind of

00:17:27,890 --> 00:17:32,179
dual response is something we're gonna

00:17:29,929 --> 00:17:35,780
see pretty commonly from kubernetes so

00:17:32,179 --> 00:17:38,390
keep an eye out for sending a request

00:17:35,780 --> 00:17:40,100
and getting two responses back as your

00:17:38,390 --> 00:17:42,790
answer we'll see that kind of pattern

00:17:40,100 --> 00:17:44,830
coming up coming up soon

00:17:42,790 --> 00:17:46,659
[Music]

00:17:44,830 --> 00:17:50,730
okay if you have all of those responses

00:17:46,659 --> 00:17:53,500
hopefully any errors anyone need help

00:17:50,730 --> 00:17:56,529
Jan's got you covered on the on the late

00:17:53,500 --> 00:18:04,110
arrivals hopefully you can catch up no

00:17:56,529 --> 00:18:04,110
problem no good luck catching up cool

00:18:04,160 --> 00:18:08,930
I'll stall a little bit and give you all

00:18:06,800 --> 00:18:11,990
some background while we have one extra

00:18:08,930 --> 00:18:16,930
person logging in so one thing that

00:18:11,990 --> 00:18:21,160
you'll not be touching today there is a

00:18:16,930 --> 00:18:25,040
database within every kubernetes cluster

00:18:21,160 --> 00:18:27,200
called Etsy D it provides a it was

00:18:25,040 --> 00:18:30,470
developed at core OS it's been donated

00:18:27,200 --> 00:18:33,710
to the CN CF cloud native computing

00:18:30,470 --> 00:18:37,730
foundation it's a distributed key-value

00:18:33,710 --> 00:18:39,800
store with automatic leader election so

00:18:37,730 --> 00:18:44,240
if you'd like to see kind of what that

00:18:39,800 --> 00:18:46,730
looks like I've got a small small demo

00:18:44,240 --> 00:18:50,090
here we could say if this green node is

00:18:46,730 --> 00:18:55,070
our currently the leader in the cluster

00:18:50,090 --> 00:18:59,630
I can hit restart on that particular

00:18:55,070 --> 00:19:03,680
instance let's see or I could stop it do

00:18:59,630 --> 00:19:07,790
something like that and client but I got

00:19:03,680 --> 00:19:10,370
rate limited no 2 is already started

00:19:07,790 --> 00:19:15,620
anyway this ought to give me a way maybe

00:19:10,370 --> 00:19:19,070
the demos yeah still rate limited here

00:19:15,620 --> 00:19:22,550
it looks like ok node twos down the

00:19:19,070 --> 00:19:26,330
cluster elected a new leader and is now

00:19:22,550 --> 00:19:30,170
doing replication across and is able to

00:19:26,330 --> 00:19:33,350
do a consistent data store across these

00:19:30,170 --> 00:19:35,960
five nodes so this type of high

00:19:33,350 --> 00:19:38,090
availability for the all the

00:19:35,960 --> 00:19:42,770
statefulness of the whole platform is

00:19:38,090 --> 00:19:44,540
stored within this @ Ã§d database if you

00:19:42,770 --> 00:19:48,080
want to know a lot more about Etsy D

00:19:44,540 --> 00:19:50,540
take a look at these links here but

00:19:48,080 --> 00:19:52,820
that's kind of sitting behind the scenes

00:19:50,540 --> 00:19:55,930
in front of Etsy D we have the

00:19:52,820 --> 00:19:58,940
kubernetes api that's going to kind of

00:19:55,930 --> 00:20:01,480
check all of our access control make

00:19:58,940 --> 00:20:04,250
sure that the rights into that datastore

00:20:01,480 --> 00:20:07,370
that the correct people have right

00:20:04,250 --> 00:20:09,980
control if we allowed anyone to read

00:20:07,370 --> 00:20:12,230
from Etsy D or anyone to write from it

00:20:09,980 --> 00:20:14,210
then anyone can modify the state of our

00:20:12,230 --> 00:20:17,120
cluster they've essentially got root

00:20:14,210 --> 00:20:19,550
access to our cluster if they have

00:20:17,120 --> 00:20:22,970
access to that data store so the

00:20:19,550 --> 00:20:25,970
kubernetes api is going to be kind of an

00:20:22,970 --> 00:20:28,640
enforcement layer that protects that @cd

00:20:25,970 --> 00:20:31,880
database every time we have an

00:20:28,640 --> 00:20:33,950
interaction with the kubernetes api i

00:20:31,880 --> 00:20:36,800
want you to keep an eye out for these

00:20:33,950 --> 00:20:39,470
five attributes they're going to be

00:20:36,800 --> 00:20:43,580
available on almost every piece of data

00:20:39,470 --> 00:20:48,230
that we fetch from the API the two ones

00:20:43,580 --> 00:20:49,730
I want to point out most that these are

00:20:48,230 --> 00:20:53,600
the ones I want to emphasize the most

00:20:49,730 --> 00:20:55,700
critically is spec and Status I think if

00:20:53,600 --> 00:21:00,250
you don't remember anything else

00:20:55,700 --> 00:21:04,400
remember that kubernetes provides an API

00:21:00,250 --> 00:21:06,679
that's asynchronous and the two

00:21:04,400 --> 00:21:10,130
attributes you're going to be focused

00:21:06,679 --> 00:21:12,890
most closely on are going to be setting

00:21:10,130 --> 00:21:15,380
the spec and then reading from the

00:21:12,890 --> 00:21:17,960
status and so when I said kubernetes

00:21:15,380 --> 00:21:20,300
always gives you two responses it'll

00:21:17,960 --> 00:21:22,610
tell you well here's what you asked for

00:21:20,300 --> 00:21:25,429
you know you told me you wanted five

00:21:22,610 --> 00:21:28,730
containers you put you said five

00:21:25,429 --> 00:21:31,130
containers in your spec but currently

00:21:28,730 --> 00:21:33,410
I'm out of memory and I was only able to

00:21:31,130 --> 00:21:35,929
spin up two containers right and it'll

00:21:33,410 --> 00:21:37,700
give you the honest you know I wasn't

00:21:35,929 --> 00:21:38,630
able to do it you know we only got

00:21:37,700 --> 00:21:40,850
halfway there

00:21:38,630 --> 00:21:43,040
it'll give you a realistic answer about

00:21:40,850 --> 00:21:45,890
the state of the platform both in terms

00:21:43,040 --> 00:21:48,020
of what you requested and what's the

00:21:45,890 --> 00:21:51,260
actual state and so that's going to be

00:21:48,020 --> 00:21:53,690
the spec and status fields for a full

00:21:51,260 --> 00:21:58,910
reference check out this big link at the

00:21:53,690 --> 00:22:01,570
bottom to the kubernetes 1.17 api's for

00:21:58,910 --> 00:22:07,040
today we're gonna focus a little more

00:22:01,570 --> 00:22:10,070
tightly down on these five basic API

00:22:07,040 --> 00:22:13,970
resources so the first one that we're

00:22:10,070 --> 00:22:17,179
going to look into is called a node so

00:22:13,970 --> 00:22:20,150
everyone here at the node plus Jas

00:22:17,179 --> 00:22:22,780
interactive event knows exactly what I

00:22:20,150 --> 00:22:25,460
mean when I am talking about nodes right

00:22:22,780 --> 00:22:28,340
this is kind of a one of the

00:22:25,460 --> 00:22:30,950
difficulties I find with talking to

00:22:28,340 --> 00:22:33,799
folks especially JavaScript folk

00:22:30,950 --> 00:22:37,340
about kubernetes is there's a lot of

00:22:33,799 --> 00:22:40,669
terminology overlap and this is a prime

00:22:37,340 --> 00:22:44,799
example right here in kubernetes

00:22:40,669 --> 00:22:47,809
terminology a node is a host machine

00:22:44,799 --> 00:22:54,409
physical or virtual where your

00:22:47,809 --> 00:22:56,090
containerized processes are run so just

00:22:54,409 --> 00:22:58,070
keep in mind when you're talking to

00:22:56,090 --> 00:23:00,259
kubernetes folks they they may be

00:22:58,070 --> 00:23:02,899
talking about nodes in a slightly

00:23:00,259 --> 00:23:05,710
different way node activity is managed

00:23:02,899 --> 00:23:08,869
to be at one or more master instances

00:23:05,710 --> 00:23:14,720
and I'm going to try running this

00:23:08,869 --> 00:23:18,940
command right here and see what I get

00:23:14,720 --> 00:23:21,320
ah let's all try this out and see Oh

00:23:18,940 --> 00:23:24,169
forbidden that's exactly what we should

00:23:21,320 --> 00:23:28,029
see I'm gonna run an OC login really

00:23:24,169 --> 00:23:31,029
quickly and log in as an administrator

00:23:28,029 --> 00:23:31,029
here

00:23:31,860 --> 00:23:39,600
and run the same command and now I can

00:23:35,549 --> 00:23:42,120
see the list of nodes and it looks like

00:23:39,600 --> 00:23:46,440
for this particular command this

00:23:42,120 --> 00:23:49,980
particular cluster we've got 19 nodes in

00:23:46,440 --> 00:23:53,670
the cluster so since I'm logged in as an

00:23:49,980 --> 00:23:57,960
administrator I can I can run the query

00:23:53,670 --> 00:24:02,250
I can list nodes on the API using this

00:23:57,960 --> 00:24:05,850
command line tool coop CTL get nodes and

00:24:02,250 --> 00:24:08,880
apparently average users do not have

00:24:05,850 --> 00:24:12,360
access to retrieve that data from the

00:24:08,880 --> 00:24:15,720
API so hopefully you've learned there's

00:24:12,360 --> 00:24:21,020
a data store not everyone gets access to

00:24:15,720 --> 00:24:25,160
it and coops ETL get nodes is a way to

00:24:21,020 --> 00:24:25,160
list resources by type

00:24:25,270 --> 00:24:31,390
let's see Oh so here's my observations

00:24:28,450 --> 00:24:33,370
yeah basically everyone agreed to this

00:24:31,390 --> 00:24:35,020
list of observations from from this

00:24:33,370 --> 00:24:39,970
initial section I know we've only run

00:24:35,020 --> 00:24:45,730
one command but any questions about this

00:24:39,970 --> 00:24:49,470
first part no perfect is what I hoped

00:24:45,730 --> 00:24:51,610
alright so your j/s runs on nodes

00:24:49,470 --> 00:24:54,760
kubernetes is going to actively manage

00:24:51,610 --> 00:24:58,330
processes we'll see that in the next

00:24:54,760 --> 00:25:01,060
section and we're trying to run on a

00:24:58,330 --> 00:25:04,780
large cluster scale system where if

00:25:01,060 --> 00:25:08,380
individual nodes fail or individual

00:25:04,780 --> 00:25:10,930
processes across this we can always we

00:25:08,380 --> 00:25:13,630
always have sufficient capacity to route

00:25:10,930 --> 00:25:18,780
around these problems and have a highly

00:25:13,630 --> 00:25:23,710
available solution exposed to our users

00:25:18,780 --> 00:25:28,420
so next section pods here is a this is a

00:25:23,710 --> 00:25:31,690
quote from one of my team members Steve

00:25:28,420 --> 00:25:34,090
postie he used to say pods scaled

00:25:31,690 --> 00:25:36,160
together and they failed together this

00:25:34,090 --> 00:25:37,450
is one thing I like kind of thinking

00:25:36,160 --> 00:25:42,460
through in my mind when I'm trying to

00:25:37,450 --> 00:25:44,980
architect my solutions in kubernetes so

00:25:42,460 --> 00:25:48,010
I like to think of kubernetes in a way

00:25:44,980 --> 00:25:50,200
as kind of like a modeling language for

00:25:48,010 --> 00:25:52,420
my solutions and one of the most

00:25:50,200 --> 00:25:55,080
fundamental units other than a node

00:25:52,420 --> 00:25:58,090
which I kind of gave you a brief look at

00:25:55,080 --> 00:25:59,980
pod a pod is the first resource we're

00:25:58,090 --> 00:26:02,980
really going to look deeply into so a

00:25:59,980 --> 00:26:06,760
pod is a group in kubernetes terms it's

00:26:02,980 --> 00:26:09,940
a group of one or more co-located

00:26:06,760 --> 00:26:11,980
containers the folks at Google when they

00:26:09,940 --> 00:26:15,970
were scheduling containers across their

00:26:11,980 --> 00:26:19,030
cluster often found that sometimes they

00:26:15,970 --> 00:26:21,820
would need to schedule not just one but

00:26:19,030 --> 00:26:24,670
they'd need a sidecar of some sort

00:26:21,820 --> 00:26:27,310
attached to a container and if the

00:26:24,670 --> 00:26:30,970
sidecar ever failed they'd want to make

00:26:27,310 --> 00:26:35,370
sure to reboot both processes as a group

00:26:30,970 --> 00:26:40,390
right so this is kind of a multi process

00:26:35,370 --> 00:26:43,180
but all co-located so one example I try

00:26:40,390 --> 00:26:44,740
to get folks to volunteer well hey where

00:26:43,180 --> 00:26:47,230
would you want to have two things run

00:26:44,740 --> 00:26:51,490
together and I usually Trek try to trick

00:26:47,230 --> 00:26:54,390
someone into offering WordPress as an

00:26:51,490 --> 00:26:58,630
example of here's where you would have a

00:26:54,390 --> 00:27:01,630
front end and a database and a you know

00:26:58,630 --> 00:27:03,760
WordPress it's got a it's got PHP and

00:27:01,630 --> 00:27:06,340
it's got my sequel and and you want to

00:27:03,760 --> 00:27:09,910
run them together right that's actually

00:27:06,340 --> 00:27:13,210
not a good example for tying two

00:27:09,910 --> 00:27:16,420
containers together in a pod and the

00:27:13,210 --> 00:27:19,870
reason why is just this quote right here

00:27:16,420 --> 00:27:23,020
pods will scale together and they'll

00:27:19,870 --> 00:27:27,540
fail together so if I wanted to scale up

00:27:23,020 --> 00:27:31,450
my front my front end my PHP instances I

00:27:27,540 --> 00:27:33,850
don't want to add a database with every

00:27:31,450 --> 00:27:35,370
web instance that I add right I want to

00:27:33,850 --> 00:27:38,320
be able to scale those two tiers

00:27:35,370 --> 00:27:41,110
independently and since they need to be

00:27:38,320 --> 00:27:46,810
scaled independently they cannot be

00:27:41,110 --> 00:27:48,700
grouped together in a pod so for our

00:27:46,810 --> 00:27:51,820
purposes we're basically going to have

00:27:48,700 --> 00:27:54,010
one container per pod so you can almost

00:27:51,820 --> 00:27:57,000
think of a pod as a container but I just

00:27:54,010 --> 00:27:59,830
need to point out you can have multiple

00:27:57,000 --> 00:28:04,440
processes and the way to do that is

00:27:59,830 --> 00:28:08,520
multiple containers per pod cool

00:28:04,440 --> 00:28:10,800
so let's try to run a basic query this

00:28:08,520 --> 00:28:14,430
one I swear you will be able to execute

00:28:10,800 --> 00:28:16,500
this query successfully unfortunately

00:28:14,430 --> 00:28:20,250
it'll return an empty results because

00:28:16,500 --> 00:28:23,780
you have not provisioned any pods yet so

00:28:20,250 --> 00:28:28,170
let's take a look at what a basic pod

00:28:23,780 --> 00:28:32,460
spec would look like so I have up here

00:28:28,170 --> 00:28:36,180
on the screen hopefully you can see the

00:28:32,460 --> 00:28:38,970
result of this curl statement and inside

00:28:36,180 --> 00:28:41,280
I have the five attributes that I told

00:28:38,970 --> 00:28:44,730
you would be there there's a kind of

00:28:41,280 --> 00:28:47,970
data all this data is internally typed

00:28:44,730 --> 00:28:50,780
and versioned there's an API version

00:28:47,970 --> 00:28:53,310
there's a metadata section this section

00:28:50,780 --> 00:28:55,410
particularly we could see it hasn't been

00:28:53,310 --> 00:29:00,840
created yet so the timestamp isn't all

00:28:55,410 --> 00:29:04,320
it has a an ID or a name that will need

00:29:00,840 --> 00:29:07,440
to be unique within this namespace and

00:29:04,320 --> 00:29:09,660
then there's some labels that we'll

00:29:07,440 --> 00:29:11,760
learn more about labels in the next

00:29:09,660 --> 00:29:15,330
section and then like I said there's a

00:29:11,760 --> 00:29:17,670
spec and currently we don't have a

00:29:15,330 --> 00:29:20,070
status that's because we haven't created

00:29:17,670 --> 00:29:22,110
this yet and kubernetes will start

00:29:20,070 --> 00:29:25,890
filling in the status as it makes

00:29:22,110 --> 00:29:28,100
progress towards achieving the spec that

00:29:25,890 --> 00:29:32,090
we've requested does that make sense

00:29:28,100 --> 00:29:35,910
so I'm going to do a command to

00:29:32,090 --> 00:29:38,070
basically provision this container of

00:29:35,910 --> 00:29:40,200
Jan's Thank You Jan we're gonna

00:29:38,070 --> 00:29:44,730
provision nodejs

00:29:40,200 --> 00:29:46,770
int workshop from docker hub so feel

00:29:44,730 --> 00:29:51,150
free to follow along and copy and paste

00:29:46,770 --> 00:29:53,610
this Kubb CTL or Kubb huddle depending

00:29:51,150 --> 00:29:59,350
on how you like to pronounce it coop

00:29:53,610 --> 00:30:02,549
huddle create - F and paste that file in

00:29:59,350 --> 00:30:02,549
and that should

00:30:02,690 --> 00:30:09,600
essentially tell the API that you want

00:30:05,369 --> 00:30:12,990
to load that JSON and you would like to

00:30:09,600 --> 00:30:16,950
provision a new pod any questions about

00:30:12,990 --> 00:30:19,909
that piece kubernetes is an API you can

00:30:16,950 --> 00:30:24,179
manipulate these API endpoints to do

00:30:19,909 --> 00:30:26,159
work on the cluster so congratulations

00:30:24,179 --> 00:30:28,549
you have if you hadn't before

00:30:26,159 --> 00:30:32,490
you have now provisioned your first pod

00:30:28,549 --> 00:30:37,619
so if you wanted to access the API using

00:30:32,490 --> 00:30:40,139
curl not super advisable but here's just

00:30:37,619 --> 00:30:42,360
an example feel free to copy and paste

00:30:40,139 --> 00:30:47,869
if you're interested to show how you

00:30:42,360 --> 00:30:50,940
would do that same listing data by type

00:30:47,869 --> 00:30:54,769
just using a raw request and if you look

00:30:50,940 --> 00:31:02,970
into the path here you could see API v1

00:30:54,769 --> 00:31:09,749
v1 was in our spec let's see find it in

00:31:02,970 --> 00:31:13,080
here API version v1 and so that's also

00:31:09,749 --> 00:31:15,450
encoded here in the API and this API is

00:31:13,080 --> 00:31:19,559
actually going to be almost identical to

00:31:15,450 --> 00:31:22,980
the path that we were if we were able to

00:31:19,559 --> 00:31:25,980
access at CD the EDD CD storage path

00:31:22,980 --> 00:31:29,100
looks almost identical to this the

00:31:25,980 --> 00:31:31,289
kubernetes api is really just doing kind

00:31:29,100 --> 00:31:36,990
of enforcement and access control on top

00:31:31,289 --> 00:31:40,080
of the at CD api so let's go a little

00:31:36,990 --> 00:31:43,740
bit deeper instead of fetching all pods

00:31:40,080 --> 00:31:47,519
or all resources by type let's try to

00:31:43,740 --> 00:31:51,899
fetch an individual resource by type and

00:31:47,519 --> 00:31:55,850
ID you could either do type space ID or

00:31:51,899 --> 00:32:00,210
type slash ID either format works fine

00:31:55,850 --> 00:32:05,119
and we can output the result as JSON

00:32:00,210 --> 00:32:10,259
here's how I could do that with curl and

00:32:05,119 --> 00:32:12,960
the same thing with the command line so

00:32:10,259 --> 00:32:17,460
I did get pod

00:32:12,960 --> 00:32:21,270
to fetch the resource of type pod with

00:32:17,460 --> 00:32:23,910
the following name hello k8s we can all

00:32:21,270 --> 00:32:26,250
do this at the same time and we can all

00:32:23,910 --> 00:32:27,840
have the projects named the same thing

00:32:26,250 --> 00:32:31,440
because we're all in different

00:32:27,840 --> 00:32:35,580
namespaces so this hopefully is working

00:32:31,440 --> 00:32:39,180
for everyone any questions about this

00:32:35,580 --> 00:32:41,190
section makes sense so far one thing I

00:32:39,180 --> 00:32:47,520
would like to point out is the

00:32:41,190 --> 00:32:49,620
difference between our initial let's see

00:32:47,520 --> 00:32:51,330
we initially had this curl statement

00:32:49,620 --> 00:32:54,270
[Music]

00:32:51,330 --> 00:32:59,910
and if I count the number of lines in

00:32:54,270 --> 00:33:02,430
here we initially had 25 lines and if I

00:32:59,910 --> 00:33:05,640
do get pods

00:33:02,430 --> 00:33:09,600
hello JSON and count the number of lines

00:33:05,640 --> 00:33:12,980
in here after it hits the API Wow

00:33:09,600 --> 00:33:18,450
kubernetes filled in a hundred and

00:33:12,980 --> 00:33:21,950
thirty some-odd lines of additional

00:33:18,450 --> 00:33:25,910
information so we could take a look at

00:33:21,950 --> 00:33:25,910
you know what changed

00:33:26,040 --> 00:33:32,580
well now we have a status filled this

00:33:30,090 --> 00:33:34,620
didn't exist before and kubernetes has

00:33:32,580 --> 00:33:38,340
started filling in all of this

00:33:34,620 --> 00:33:41,160
information about you know is the is the

00:33:38,340 --> 00:33:43,080
container up and running how's it doing

00:33:41,160 --> 00:33:45,620
it's making a lot of reports into that

00:33:43,080 --> 00:33:49,740
status field

00:33:45,620 --> 00:33:52,020
it still has a spec field as well the

00:33:49,740 --> 00:33:56,220
spec field has also grown quite a bit

00:33:52,020 --> 00:33:59,100
we've added in some resource limits some

00:33:56,220 --> 00:34:02,540
default resource limits here there's now

00:33:59,100 --> 00:34:06,770
a creation timestamp

00:34:02,540 --> 00:34:09,480
that's been populated quite a bit more

00:34:06,770 --> 00:34:12,359
data in there

00:34:09,480 --> 00:34:15,000
so kubernetes will do a lot of work for

00:34:12,359 --> 00:34:17,010
you automatically but it's also really

00:34:15,000 --> 00:34:19,260
nice to have a clear starting point that

00:34:17,010 --> 00:34:22,590
you can hand off to other users in your

00:34:19,260 --> 00:34:26,190
team as the folks attending this section

00:34:22,590 --> 00:34:29,909
I would expect you will need to do a lot

00:34:26,190 --> 00:34:32,879
of work to serve up these JSON or yamo

00:34:29,909 --> 00:34:35,879
files to your team members so they don't

00:34:32,879 --> 00:34:39,810
need to learn what is a pod what is a

00:34:35,879 --> 00:34:42,409
deployment a lot of this you almost want

00:34:39,810 --> 00:34:44,940
to hide this as much as possible and

00:34:42,409 --> 00:34:48,619
OpenShift gives you some nice ways of

00:34:44,940 --> 00:34:51,679
providing you know real smooth has

00:34:48,619 --> 00:34:54,119
platform as-a-service Heroku style

00:34:51,679 --> 00:34:58,350
experience on top so we'll we'll see

00:34:54,119 --> 00:35:00,930
that coming up soon let's see let's take

00:34:58,350 --> 00:35:04,260
a look at the exact same data but I'm

00:35:00,930 --> 00:35:08,160
gonna add instead of - Oh JSON I'm gonna

00:35:04,260 --> 00:35:11,280
add - oh yeah Mille and if you had a

00:35:08,160 --> 00:35:13,050
team that was really keen on using yeah

00:35:11,280 --> 00:35:17,700
Mille instead of JSON for whatever

00:35:13,050 --> 00:35:20,900
reason maybe you like comments or you

00:35:17,700 --> 00:35:22,140
dislike curly braces while either one

00:35:20,900 --> 00:35:25,070
whoa

00:35:22,140 --> 00:35:25,070
lost my signal

00:35:31,440 --> 00:35:38,570
so did I lean into the leaned

00:35:36,260 --> 00:35:44,060
to the presenter too hard all right cool

00:35:38,570 --> 00:35:47,810
we're back all right so let's see one

00:35:44,060 --> 00:35:51,170
other thing you can try is the coop CTL

00:35:47,810 --> 00:35:54,580
describe command this is meant to be

00:35:51,170 --> 00:35:58,660
kind of a more human readable output

00:35:54,580 --> 00:36:03,710
assuming humans like tab-separated

00:35:58,660 --> 00:36:07,460
responses but yeah this is a coop cuddle

00:36:03,710 --> 00:36:13,730
describe is another kind of verb you

00:36:07,460 --> 00:36:16,430
could use in addition to the get and you

00:36:13,730 --> 00:36:20,260
know getting by type getting by type and

00:36:16,430 --> 00:36:23,480
ID you can also describe instead of get

00:36:20,260 --> 00:36:26,300
in order to get a slightly different

00:36:23,480 --> 00:36:30,040
formatted output that that's probably a

00:36:26,300 --> 00:36:30,040
little bit more human readable

00:36:30,250 --> 00:36:36,250
observations from this section API

00:36:33,200 --> 00:36:38,720
resources provide a declarative

00:36:36,250 --> 00:36:41,120
specification and asynchronous

00:36:38,720 --> 00:36:46,100
fulfillment we learned about spec and

00:36:41,120 --> 00:36:47,840
status if any of these processes since

00:36:46,100 --> 00:36:51,380
there's only one process per container

00:36:47,840 --> 00:36:53,330
it's very easy for kubernetes to judge

00:36:51,380 --> 00:36:56,210
whether that single process has failed

00:36:53,330 --> 00:37:00,020
or not and then restart the container as

00:36:56,210 --> 00:37:03,860
as a result pods are scheduled to be run

00:37:00,020 --> 00:37:09,070
on nodes we can actually see that if we

00:37:03,860 --> 00:37:12,770
look in the JSON I think there is a

00:37:09,070 --> 00:37:16,610
where does it get set there's some kind

00:37:12,770 --> 00:37:18,410
of label in here node name right here we

00:37:16,610 --> 00:37:23,630
can see the node that it got scheduled

00:37:18,410 --> 00:37:26,600
on to in our spec the API ambidextrious

00:37:23,630 --> 00:37:30,320
lis supports both JSON and Gamal any

00:37:26,600 --> 00:37:33,620
questions from this section welcome to

00:37:30,320 --> 00:37:36,890
pod town you you now know what pods are

00:37:33,620 --> 00:37:40,130
alright services services abbreviated

00:37:36,890 --> 00:37:44,150
SVC give you a single end point for a

00:37:40,130 --> 00:37:46,130
collection of replicated pods so I think

00:37:44,150 --> 00:37:47,720
this is a confusing term coming from

00:37:46,130 --> 00:37:50,060
like the web world

00:37:47,720 --> 00:37:52,400
I think of a service as a as a web

00:37:50,060 --> 00:37:54,800
service like that's my Apache server or

00:37:52,400 --> 00:37:56,780
something usually but this is more

00:37:54,800 --> 00:38:01,730
service from like a network endpoint

00:37:56,780 --> 00:38:08,270
perspective it's a single identifier for

00:38:01,730 --> 00:38:10,730
a group of web services and we can

00:38:08,270 --> 00:38:14,420
generate one using the coop cuddle

00:38:10,730 --> 00:38:19,510
expose command so I'm gonna run that off

00:38:14,420 --> 00:38:21,130
real quickly and then take a look at the

00:38:19,510 --> 00:38:25,220
result

00:38:21,130 --> 00:38:27,790
so I've generated a new we can see

00:38:25,220 --> 00:38:32,930
there's API version a kind of data

00:38:27,790 --> 00:38:35,329
metadata field we have a spec and a

00:38:32,930 --> 00:38:37,610
status all the things that I said we

00:38:35,329 --> 00:38:39,340
would we would find

00:38:37,610 --> 00:38:45,280
[Music]

00:38:39,340 --> 00:38:49,810
the spec selector out field happens to

00:38:45,280 --> 00:38:52,870
have something that says run hello k8s

00:38:49,810 --> 00:38:55,450
this will come in a little bit later but

00:38:52,870 --> 00:38:58,840
this is actually going to be running a

00:38:55,450 --> 00:39:01,990
query selector against the API searching

00:38:58,840 --> 00:39:06,670
for these two labels a key of run and a

00:39:01,990 --> 00:39:09,970
value of hello k8s and the load balancer

00:39:06,670 --> 00:39:13,090
will forward traffic to anything that

00:39:09,970 --> 00:39:15,610
matches that query any pods that match

00:39:13,090 --> 00:39:18,520
that query so we'll see a little bit

00:39:15,610 --> 00:39:21,910
more about that in a second but first I

00:39:18,520 --> 00:39:24,550
want to show you another nice feature of

00:39:21,910 --> 00:39:28,750
these services anytime you create a

00:39:24,550 --> 00:39:32,110
service in kubernetes Kubb dns will

00:39:28,750 --> 00:39:35,320
automatically start providing a name

00:39:32,110 --> 00:39:38,170
server resolution for this value so we

00:39:35,320 --> 00:39:42,640
can now do curl

00:39:38,170 --> 00:39:44,590
- hello k8s within our individual

00:39:42,640 --> 00:39:46,360
namespace and hopefully you'll see a

00:39:44,590 --> 00:39:49,600
response from the container that you

00:39:46,360 --> 00:39:51,940
provisioned everyone able to see that

00:39:49,600 --> 00:39:54,520
raise your hand if you don't all right

00:39:51,940 --> 00:39:58,540
aha we caught him everyone saw it

00:39:54,520 --> 00:40:02,350
hopefully all right cool congratulations

00:39:58,540 --> 00:40:05,650
hopefully that worked for you another

00:40:02,350 --> 00:40:09,370
nice tip if you wanted to slice specific

00:40:05,650 --> 00:40:13,810
values out of the JSON response you can

00:40:09,370 --> 00:40:17,650
use this get with a resource type and ID

00:40:13,810 --> 00:40:21,700
and then instead of - Oh JSON use - Oh

00:40:17,650 --> 00:40:25,090
JSON path to select out a particular

00:40:21,700 --> 00:40:28,330
field this particular field is the node

00:40:25,090 --> 00:40:31,000
port value if I wanted to try to access

00:40:28,330 --> 00:40:34,330
this container from outside the cluster

00:40:31,000 --> 00:40:36,400
I could try hitting an address like this

00:40:34,330 --> 00:40:40,210
unfortunately this is still an internal

00:40:36,400 --> 00:40:46,080
IP for Amazon but if I had an external

00:40:40,210 --> 00:40:46,080
IP I ought to be able to curl the

00:40:47,650 --> 00:40:53,620
this high numbered port on any node in

00:40:50,890 --> 00:40:57,880
the system and it'll get forwarded to

00:40:53,620 --> 00:40:59,920
the right service internally it still

00:40:57,880 --> 00:41:00,520
doesn't give you full like a doe name

00:40:59,920 --> 00:41:02,650
name

00:41:00,520 --> 00:41:05,890
servicing you'd still probably need load

00:41:02,650 --> 00:41:08,580
balancers in front of that but that's

00:41:05,890 --> 00:41:11,650
your shortest route to getting traffic

00:41:08,580 --> 00:41:16,120
into a cluster from the outside is this

00:41:11,650 --> 00:41:18,040
node port service that gives you a easy

00:41:16,120 --> 00:41:22,170
way to access these services on a high

00:41:18,040 --> 00:41:24,580
numbered port from outside the cluster

00:41:22,170 --> 00:41:29,920
communication inside the cluster is

00:41:24,580 --> 00:41:31,960
super easy as we have just proven we

00:41:29,920 --> 00:41:36,430
could see I've currently have one pod

00:41:31,960 --> 00:41:38,320
running serving those requests and you

00:41:36,430 --> 00:41:41,800
could see in this in this command I'm

00:41:38,320 --> 00:41:45,540
running get pods - L this is a new type

00:41:41,800 --> 00:41:50,650
of query where we're querying for

00:41:45,540 --> 00:41:54,040
resources by type doing get pods but we

00:41:50,650 --> 00:41:56,860
don't want all pods we want only the

00:41:54,040 --> 00:41:59,680
pods that match this particular label

00:41:56,860 --> 00:42:01,950
selector that's what - shell is label

00:41:59,680 --> 00:42:04,060
selector so we want to find all

00:42:01,950 --> 00:42:06,850
resources by type

00:42:04,060 --> 00:42:11,890
assuming they match this key and value

00:42:06,850 --> 00:42:14,440
in their labels section our service and

00:42:11,890 --> 00:42:16,510
our pods happen to have that match and

00:42:14,440 --> 00:42:19,900
that's how it does the mapping from the

00:42:16,510 --> 00:42:23,260
service to those pods so if we delete

00:42:19,900 --> 00:42:28,380
all of the pods that that the service is

00:42:23,260 --> 00:42:31,450
routing traffic to that should cause

00:42:28,380 --> 00:42:34,690
this to fail even though the service

00:42:31,450 --> 00:42:37,860
still exists the service is no longer

00:42:34,690 --> 00:42:40,870
able to pass the traffic onto the pod

00:42:37,860 --> 00:42:44,770
and so the only thing I'm trying to

00:42:40,870 --> 00:42:48,880
prove here is that the services and the

00:42:44,770 --> 00:42:52,300
pods can exist independently you can

00:42:48,880 --> 00:42:54,550
have a service that doesn't have any

00:42:52,300 --> 00:42:56,470
pods associated with it at all you can

00:42:54,550 --> 00:42:58,420
also have services there's a type of

00:42:56,470 --> 00:42:59,770
service called a headless service I

00:42:58,420 --> 00:43:01,270
don't know if I agree with the name but

00:42:59,770 --> 00:43:04,540
headless service you know

00:43:01,270 --> 00:43:07,990
something that is a service shows up

00:43:04,540 --> 00:43:11,770
within the cluster with a local DNS coop

00:43:07,990 --> 00:43:14,170
DNS resolution but the service is

00:43:11,770 --> 00:43:17,440
actually pointing back outside the

00:43:14,170 --> 00:43:21,430
cluster to a legacy data store right a

00:43:17,440 --> 00:43:24,070
big Oracle database or something so your

00:43:21,430 --> 00:43:28,300
micro services within the cluster still

00:43:24,070 --> 00:43:31,870
have discoverability as long as you're

00:43:28,300 --> 00:43:35,470
creating this service abstract for it to

00:43:31,870 --> 00:43:40,060
have something to resolve against but

00:43:35,470 --> 00:43:42,550
the service that you create can point to

00:43:40,060 --> 00:43:44,800
pods matching a label selector or it can

00:43:42,550 --> 00:43:46,450
point to back outside the cluster just

00:43:44,800 --> 00:43:49,810
something else

00:43:46,450 --> 00:43:52,270
so anyway service that's a kind of a

00:43:49,810 --> 00:43:56,710
load balancer or a network endpoint for

00:43:52,270 --> 00:44:00,010
a collection of processes

00:43:56,710 --> 00:44:02,710
so with this hopefully we have deleted

00:44:00,010 --> 00:44:05,020
our pods and deleted our services and

00:44:02,710 --> 00:44:10,150
gotten back to a clean State any

00:44:05,020 --> 00:44:12,160
questions from this section no nothin

00:44:10,150 --> 00:44:14,050
penny are a quiet group I should have

00:44:12,160 --> 00:44:16,330
brought coffee for you all all right

00:44:14,050 --> 00:44:19,600
service basically means load balancer

00:44:16,330 --> 00:44:21,940
hopefully that's that's clear label

00:44:19,600 --> 00:44:25,920
selectors can be used to organize

00:44:21,940 --> 00:44:29,350
workloads once we have a pod provisioned

00:44:25,920 --> 00:44:32,440
we can relay belit or change the labels

00:44:29,350 --> 00:44:36,250
in order to remove it from behind a load

00:44:32,440 --> 00:44:40,990
balancer or to put it to surface it

00:44:36,250 --> 00:44:46,000
behind a load balancer the service reef

00:44:40,990 --> 00:44:48,670
yeah uses label selectors that's it yeah

00:44:46,000 --> 00:44:52,020
and and they can be deleted and created

00:44:48,670 --> 00:44:56,010
independently there's no linkage

00:44:52,020 --> 00:44:56,010
lifecycle wise between the two

00:44:56,730 --> 00:45:02,839
deployments any questions before we move

00:45:00,340 --> 00:45:05,809
on to deployments

00:45:02,839 --> 00:45:10,749
Jan do you want to attempt jumping into

00:45:05,809 --> 00:45:10,749
this section all right all right

00:45:12,310 --> 00:45:16,540
okay well I'm gonna try to power through

00:45:14,980 --> 00:45:21,520
and we'll swap at the open shift then

00:45:16,540 --> 00:45:23,680
okay so we still have a lot to cover no

00:45:21,520 --> 00:45:25,960
one's asking any questions yet so I'm

00:45:23,680 --> 00:45:27,910
gonna try to pick up the speed and get a

00:45:25,960 --> 00:45:29,830
little you know we'll see if I lose any

00:45:27,910 --> 00:45:32,290
of you in this next section all right a

00:45:29,830 --> 00:45:36,070
deployment now that you have all created

00:45:32,290 --> 00:45:38,170
pods never ever do that again this is

00:45:36,070 --> 00:45:40,900
like math class where it's like oh now

00:45:38,170 --> 00:45:43,300
now I've introduced algebra to and now

00:45:40,900 --> 00:45:46,180
you don't have to do long division or

00:45:43,300 --> 00:45:49,000
you know it's all here's a calculator

00:45:46,180 --> 00:45:51,160
deployments just generally solve a lot

00:45:49,000 --> 00:45:54,670
of the stuff that we just did with pods

00:45:51,160 --> 00:45:56,080
pods were an earlier abstraction and

00:45:54,670 --> 00:45:58,690
good to learn because they're your

00:45:56,080 --> 00:46:02,530
fundamental unit of scale but

00:45:58,690 --> 00:46:05,800
deployments are how you scale up a

00:46:02,530 --> 00:46:08,680
collection of pods so this is a much

00:46:05,800 --> 00:46:11,620
more useful abstraction let's dig into

00:46:08,680 --> 00:46:14,290
deployments and learn how to really get

00:46:11,620 --> 00:46:16,780
work done so this is going to help you

00:46:14,290 --> 00:46:19,270
specify container runtime requirements

00:46:16,780 --> 00:46:22,660
in terms of pods now that we know what a

00:46:19,270 --> 00:46:24,370
pod is so we could have a shorter

00:46:22,660 --> 00:46:28,030
command here we could just run the top

00:46:24,370 --> 00:46:31,690
half of this in order to deploy Jannes

00:46:28,030 --> 00:46:35,080
image that we previously had deployed in

00:46:31,690 --> 00:46:37,390
that pod specification but I'm going to

00:46:35,080 --> 00:46:42,640
add an extra line I'm going to add these

00:46:37,390 --> 00:46:46,720
extra flags dry-run and - Oh JSON what

00:46:42,640 --> 00:46:50,230
those two flags allow me to do dry run

00:46:46,720 --> 00:46:53,890
says instead of immediately provisioning

00:46:50,230 --> 00:46:57,070
this deployment instead marshal up all

00:46:53,890 --> 00:47:00,580
the JSON or the yam all and throw it all

00:46:57,070 --> 00:47:02,740
to standard out that makes sense

00:47:00,580 --> 00:47:05,800
the reason why I like showing this extra

00:47:02,740 --> 00:47:08,260
step is that this gives you a clear way

00:47:05,800 --> 00:47:11,050
of generating your own deployment spec

00:47:08,260 --> 00:47:13,660
and then you can hand that off to other

00:47:11,050 --> 00:47:16,120
developers or you could put it in a

00:47:13,660 --> 00:47:19,180
helmet art or you can like you have a

00:47:16,120 --> 00:47:21,790
way of reproducing this and modifying it

00:47:19,180 --> 00:47:23,579
changing the labels changing the

00:47:21,790 --> 00:47:25,680
resource allocation

00:47:23,579 --> 00:47:28,799
you know you have hopefully a starting

00:47:25,680 --> 00:47:31,499
point that you can continue iterating on

00:47:28,799 --> 00:47:34,319
and something you can give to junior

00:47:31,499 --> 00:47:36,329
developers where you don't have to

00:47:34,319 --> 00:47:39,599
really explain what a deployment is or

00:47:36,329 --> 00:47:41,670
how to use coop cuttle in an advanced

00:47:39,599 --> 00:47:43,650
way hopefully they could coop cuddle

00:47:41,670 --> 00:47:46,200
create and then get back to developing

00:47:43,650 --> 00:47:48,769
so that's why I have the second half

00:47:46,200 --> 00:47:52,319
here so let's all create a deployment

00:47:48,769 --> 00:47:55,859
JSON file so we have something we can

00:47:52,319 --> 00:47:59,239
share with other users this is actually

00:47:55,859 --> 00:48:02,269
showing me some deprecation warnings

00:47:59,239 --> 00:48:05,160
good to know that there are changes

00:48:02,269 --> 00:48:07,529
upcoming in the API that I might want to

00:48:05,160 --> 00:48:13,319
know about I tried using this generator

00:48:07,529 --> 00:48:16,440
run pod v1 and this is actually if we

00:48:13,319 --> 00:48:20,670
wanted to make that pod dot JSON that we

00:48:16,440 --> 00:48:25,950
had earlier adding in that generator

00:48:20,670 --> 00:48:29,249
flag here essentially gives us exactly

00:48:25,950 --> 00:48:31,859
the pod JSON that we started with

00:48:29,249 --> 00:48:34,259
earlier so in case you wanted to

00:48:31,859 --> 00:48:36,150
generate that it looks like this

00:48:34,259 --> 00:48:39,209
deprecation warning we were just shown

00:48:36,150 --> 00:48:42,119
is actually giving us advice on this new

00:48:39,209 --> 00:48:43,410
feature that that's a newly been added

00:48:42,119 --> 00:48:46,019
and now we have a clean way of

00:48:43,410 --> 00:48:48,029
generating pod specs as well that's a

00:48:46,019 --> 00:48:50,940
last time I did this workshop that was

00:48:48,029 --> 00:48:54,920
not available so new new stuff coming

00:48:50,940 --> 00:48:58,949
down the down the pipe as as we work

00:48:54,920 --> 00:49:03,089
let's also take a look at our deployment

00:48:58,949 --> 00:49:06,199
JSON so does it have the five attributes

00:49:03,089 --> 00:49:09,959
that I mentioned it has a kind of data

00:49:06,199 --> 00:49:11,910
version of data and this I may need to

00:49:09,959 --> 00:49:15,119
update this if it's being deprecated

00:49:11,910 --> 00:49:18,690
soon it has some label selectors

00:49:15,119 --> 00:49:22,890
remember how we did that a selector that

00:49:18,690 --> 00:49:24,449
was set to run equals hello k8s this

00:49:22,890 --> 00:49:26,640
label selector is going to say our

00:49:24,449 --> 00:49:29,249
deployment should match that label

00:49:26,640 --> 00:49:31,949
anyone anytime someone does a label

00:49:29,249 --> 00:49:34,680
based query with resource type equals

00:49:31,949 --> 00:49:37,440
deployment this is going to match on

00:49:34,680 --> 00:49:39,530
those key value labels there's

00:49:37,440 --> 00:49:44,609
spec that says what our current

00:49:39,530 --> 00:49:48,089
replication level is and there's a

00:49:44,609 --> 00:49:50,970
template that is basically an embedded

00:49:48,089 --> 00:49:54,180
pod spec you can see inside this

00:49:50,970 --> 00:49:57,500
template there's a second spec this is

00:49:54,180 --> 00:50:00,210
the pod spec kind of dumped within the

00:49:57,500 --> 00:50:02,880
deployment spec and then here's the

00:50:00,210 --> 00:50:05,430
status for how far along we've made it

00:50:02,880 --> 00:50:09,690
in this particular deployment progress

00:50:05,430 --> 00:50:11,310
so let's launch that deployment now that

00:50:09,690 --> 00:50:14,069
you have that deployment file you should

00:50:11,310 --> 00:50:16,560
be able to store this on github or hand

00:50:14,069 --> 00:50:20,130
it off to anyone anyone should be able

00:50:16,560 --> 00:50:22,890
to coop cuddle create into their own

00:50:20,130 --> 00:50:26,220
cluster to deploy that particular

00:50:22,890 --> 00:50:29,460
container we're gonna run this coop

00:50:26,220 --> 00:50:32,430
cuddle expose command in order to make a

00:50:29,460 --> 00:50:34,530
service just like we did before except

00:50:32,430 --> 00:50:39,030
this time we're to exposing a deployment

00:50:34,530 --> 00:50:41,819
instead of a pod and we're adding on

00:50:39,030 --> 00:50:44,910
this dry run flag in order to create a

00:50:41,819 --> 00:50:48,990
service dot JSON this is just to show

00:50:44,910 --> 00:50:53,310
you that kubernetes is like a modeling

00:50:48,990 --> 00:50:56,700
language and you use these JSON files in

00:50:53,310 --> 00:50:59,550
order to kind of model the topology of

00:50:56,700 --> 00:51:01,710
your micro services solution so if you

00:50:59,550 --> 00:51:04,200
have lots of micro services you're

00:51:01,710 --> 00:51:08,150
probably going to have one service file

00:51:04,200 --> 00:51:14,510
per micro service and one deployment per

00:51:08,150 --> 00:51:14,510
replicated web tier essentially

00:51:14,640 --> 00:51:19,799
so you may end up having collections of

00:51:17,519 --> 00:51:23,549
these in a repo in which case you could

00:51:19,799 --> 00:51:26,489
do something like coop cuddle creates -

00:51:23,549 --> 00:51:30,749
F and then a directory folder so

00:51:26,489 --> 00:51:33,239
everything from staging dot star you

00:51:30,749 --> 00:51:35,190
know all the all the ammo files in that

00:51:33,239 --> 00:51:38,549
folder let's do launch them all you

00:51:35,190 --> 00:51:40,789
could give it a path as well as a file

00:51:38,549 --> 00:51:40,789
name

00:51:41,340 --> 00:51:47,730
any questions about that piece no I'm

00:51:45,480 --> 00:51:50,640
gonna create the service and we're gonna

00:51:47,730 --> 00:51:53,790
see what we get as a result of this

00:51:50,640 --> 00:51:58,260
query I'm running coop cuddle get Pio

00:51:53,790 --> 00:52:02,040
which is short for pod comma SVC short

00:51:58,260 --> 00:52:02,850
for service comma deploy short for

00:52:02,040 --> 00:52:05,430
deployment

00:52:02,850 --> 00:52:09,240
this is listing multiple resources by

00:52:05,430 --> 00:52:11,580
type using the command line nice to know

00:52:09,240 --> 00:52:15,150
that you can you can easily do that as

00:52:11,580 --> 00:52:18,420
well and now that we have a pod a

00:52:15,150 --> 00:52:22,050
deployment and a service I should be

00:52:18,420 --> 00:52:25,910
able to run curl and verify that we have

00:52:22,050 --> 00:52:25,910
access to the container

00:52:28,840 --> 00:52:34,190
cool

00:52:31,070 --> 00:52:36,650
next step is let's scale up that

00:52:34,190 --> 00:52:38,600
container and see if we can demo some of

00:52:36,650 --> 00:52:41,930
the high availability features of this

00:52:38,600 --> 00:52:48,050
cluster so I can use the coop cuddle

00:52:41,930 --> 00:52:52,370
scale command on the resource of type

00:52:48,050 --> 00:52:55,040
deploy ID equals hello or name is hello

00:52:52,370 --> 00:52:57,530
k8s and I want to update the spec with a

00:52:55,040 --> 00:53:03,500
new replica value and set the

00:52:57,530 --> 00:53:07,640
replication to 3 let's do let's list all

00:53:03,500 --> 00:53:11,180
pods by list all resources by type where

00:53:07,640 --> 00:53:14,170
type equals pod and it looks like I now

00:53:11,180 --> 00:53:16,790
have three containers up and running

00:53:14,170 --> 00:53:19,430
hopefully you have three up and running

00:53:16,790 --> 00:53:22,150
if not one it may still be you know

00:53:19,430 --> 00:53:24,280
working towards that goal

00:53:22,150 --> 00:53:28,030
and if it's not there hopefully it'll

00:53:24,280 --> 00:53:30,760
give you the truth about how much

00:53:28,030 --> 00:53:34,870
progress has been made here's another

00:53:30,760 --> 00:53:37,510
nice trick that will kind of use use

00:53:34,870 --> 00:53:41,680
whatever your default editor is so we

00:53:37,510 --> 00:53:44,380
saw a coop coop cuddle get getting

00:53:41,680 --> 00:53:45,640
resources all by type getting by type

00:53:44,380 --> 00:53:48,400
and ID

00:53:45,640 --> 00:53:51,100
what about Kubb cuddle edit what do you

00:53:48,400 --> 00:53:55,570
imagine that does it looks like I've

00:53:51,100 --> 00:53:59,980
opened this file in an editor I'm gonna

00:53:55,570 --> 00:54:02,950
find the replicas line and I'm gonna

00:53:59,980 --> 00:54:05,620
edit this to five feel free to follow

00:54:02,950 --> 00:54:08,080
along if you dare it looks like VI is

00:54:05,620 --> 00:54:11,770
the default editor so I went over to

00:54:08,080 --> 00:54:17,820
this line and hit s for substitute and

00:54:11,770 --> 00:54:24,430
then five and now I'm gonna hit escape :

00:54:17,820 --> 00:54:26,950
W Q for folks that aren't used to VI and

00:54:24,430 --> 00:54:29,380
what do you imagine this will do am I

00:54:26,950 --> 00:54:33,670
gonna write this file locally where's

00:54:29,380 --> 00:54:35,890
this gonna go this actually will send

00:54:33,670 --> 00:54:40,210
the file back across the network and

00:54:35,890 --> 00:54:45,330
save it back to our @zd database in the

00:54:40,210 --> 00:54:45,330
kubernetes api and now if I get pods

00:54:45,339 --> 00:54:52,150
I have five pods up and running so not

00:54:49,599 --> 00:54:56,319
that I would recommend live editing

00:54:52,150 --> 00:54:58,900
these resources in the API but if you're

00:54:56,319 --> 00:55:01,089
learning this may be a great way to

00:54:58,900 --> 00:55:04,029
tweak certain values or if you're just

00:55:01,089 --> 00:55:05,769
scaling up a web service this is a you

00:55:04,029 --> 00:55:09,369
probably want to use the scale command

00:55:05,769 --> 00:55:12,910
instead of a coop cuddle edit right but

00:55:09,369 --> 00:55:15,999
this commands kind of a medium smart

00:55:12,910 --> 00:55:20,440
like if I open this up and write it out

00:55:15,999 --> 00:55:22,450
without any changes it'll notice you're

00:55:20,440 --> 00:55:24,880
not actually shipping any changes to the

00:55:22,450 --> 00:55:28,599
API and it'll give me feedback to that

00:55:24,880 --> 00:55:32,039
effect so it's a it does a decent job of

00:55:28,599 --> 00:55:34,690
allowing you to quickly edit things

00:55:32,039 --> 00:55:37,769
while staying out of your way and I

00:55:34,690 --> 00:55:39,819
think if you customize the editor

00:55:37,769 --> 00:55:44,700
variable you can use something other

00:55:39,819 --> 00:55:44,700
than VI as your as your default

00:55:45,660 --> 00:55:54,960
so cool we've we have all scaled up I'm

00:55:49,440 --> 00:56:00,569
gonna run this get pods - - watch in

00:55:54,960 --> 00:56:02,640
this lower shell down here and I am NOT

00:56:00,569 --> 00:56:04,440
gonna background it I had this ampere

00:56:02,640 --> 00:56:06,750
stand on the end but I'm just gonna

00:56:04,440 --> 00:56:10,700
leave it running in the in the

00:56:06,750 --> 00:56:15,500
foreground so that's gonna continually

00:56:10,700 --> 00:56:18,180
keep an eye on my number of pods and

00:56:15,500 --> 00:56:21,869
leave the connection open this is like a

00:56:18,180 --> 00:56:25,020
streaming connection javascript folks as

00:56:21,869 --> 00:56:28,980
a JavaScript person I am always really

00:56:25,020 --> 00:56:31,910
excited when I see fully asynchronous

00:56:28,980 --> 00:56:36,210
api's but then in addition to that

00:56:31,910 --> 00:56:38,700
streaming api's where I can continually

00:56:36,210 --> 00:56:41,819
getting a streaming response as the as

00:56:38,700 --> 00:56:44,660
the updates come in so this is huge that

00:56:41,819 --> 00:56:48,119
the API supports this type of watch

00:56:44,660 --> 00:56:50,130
functionality in my opinion and that

00:56:48,119 --> 00:56:53,400
there's a nice way of accessing it from

00:56:50,130 --> 00:56:56,029
the command line as well so this

00:56:53,400 --> 00:57:00,480
embedded query here this is going to do

00:56:56,029 --> 00:57:05,160
basically a fetch from the API to get a

00:57:00,480 --> 00:57:07,890
series of pod names that are all random

00:57:05,160 --> 00:57:10,829
pod names that are spaced separated so

00:57:07,890 --> 00:57:14,430
that I can run coop cuddle delete pod

00:57:10,829 --> 00:57:16,020
and delete three resources by ID that's

00:57:14,430 --> 00:57:19,200
basically what this complicated

00:57:16,020 --> 00:57:21,450
complicated command is doing so feel

00:57:19,200 --> 00:57:23,039
free to copy and paste and what this

00:57:21,450 --> 00:57:26,250
ought to do is kind of like a shotgun

00:57:23,039 --> 00:57:29,099
blast of damage across your cluster and

00:57:26,250 --> 00:57:31,289
take out three random containers out of

00:57:29,099 --> 00:57:34,740
your group of five so let's see what

00:57:31,289 --> 00:57:37,770
happens when we sustained some damage it

00:57:34,740 --> 00:57:40,529
looks like right away in our watch down

00:57:37,770 --> 00:57:43,410
below the kubernetes api has recommend

00:57:40,529 --> 00:57:46,349
or recognized that these containers went

00:57:43,410 --> 00:57:49,890
missing it was our fault of course here

00:57:46,349 --> 00:57:53,309
but this could have easily been one node

00:57:49,890 --> 00:57:56,279
out of our cluster suddenly went offline

00:57:53,309 --> 00:57:59,340
and all of these processes are suddenly

00:57:56,279 --> 00:58:02,810
unaccounted for the API is going to

00:57:59,340 --> 00:58:05,670
recognize that a node has gone offline

00:58:02,810 --> 00:58:09,060
it's going to flag these containers as

00:58:05,670 --> 00:58:11,640
being down and it's going to provision

00:58:09,060 --> 00:58:14,360
new containers on other available nodes

00:58:11,640 --> 00:58:19,850
in order to get us back up to our

00:58:14,360 --> 00:58:24,210
expected allocation which was five

00:58:19,850 --> 00:58:26,730
running pods so hopefully you're back up

00:58:24,210 --> 00:58:29,820
to full health at this point

00:58:26,730 --> 00:58:33,750
another thing you could do is get deploy

00:58:29,820 --> 00:58:35,700
oops hold it wrong get deploy and that

00:58:33,750 --> 00:58:41,510
ought to show you how many are ready up

00:58:35,700 --> 00:58:41,510
to date available all those nice details

00:58:41,809 --> 00:58:45,979
so hopefully you all have five healthy

00:58:45,170 --> 00:58:49,519
pods

00:58:45,979 --> 00:58:51,739
feel free to rerun that shotgun blast of

00:58:49,519 --> 00:58:54,739
damage as many times as you like and

00:58:51,739 --> 00:58:57,920
hopefully it'll keep regenerating that's

00:58:54,739 --> 00:59:01,400
what deployments do is deployments kind

00:58:57,920 --> 00:59:04,670
of allow you to have a replication spec

00:59:01,400 --> 00:59:06,439
and then whatever happens throughout the

00:59:04,670 --> 00:59:08,809
life of the cluster it's going to

00:59:06,439 --> 00:59:11,539
continue working to achieve your spec

00:59:08,809 --> 00:59:13,849
even if you artificially knock it out of

00:59:11,539 --> 00:59:17,779
alignment it'll keep its like like your

00:59:13,849 --> 00:59:21,319
thermostat you set it to 72 degrees and

00:59:17,779 --> 00:59:23,509
even if you leave the refrigerator door

00:59:21,319 --> 00:59:25,489
open and the window open it's going to

00:59:23,509 --> 00:59:27,559
keep trying to heat the house or cool it

00:59:25,489 --> 00:59:31,789
depending on what the temperature is

00:59:27,559 --> 00:59:33,979
outside so yeah it'll keep working to

00:59:31,789 --> 00:59:36,680
achieve your goal and give you an honest

00:59:33,979 --> 00:59:39,499
answer in that status field so

00:59:36,680 --> 00:59:41,420
observations from this section dry run

00:59:39,499 --> 00:59:44,859
flag will help you generate a new

00:59:41,420 --> 00:59:47,959
resource specification a deployment spec

00:59:44,859 --> 00:59:55,309
contains a pod spec in its template

00:59:47,959 --> 00:59:58,400
field the API provides get edit get and

00:59:55,309 --> 01:00:03,799
edit or edit and watch operations in

00:59:58,400 --> 01:00:07,119
addition to the get set and list any

01:00:03,799 --> 01:00:07,119
other questions yeah

01:00:12,150 --> 01:00:14,210
you

01:00:19,830 --> 01:00:30,780
yeah yeah so in this first one if I want

01:00:26,130 --> 01:00:33,900
if I want to create a yamo file then I

01:00:30,780 --> 01:00:36,690
include dry run in order to create a

01:00:33,900 --> 01:00:41,760
file if I don't care about creating a

01:00:36,690 --> 01:00:44,730
file at all we can just do we can just

01:00:41,760 --> 01:00:48,240
do this command this will create the

01:00:44,730 --> 01:00:51,000
deployment immediately it will create

01:00:48,240 --> 01:00:54,480
the file and then post the file to the

01:00:51,000 --> 01:00:57,780
API it'll do two steps in one write

01:00:54,480 --> 01:00:59,730
create it post it to the API don't even

01:00:57,780 --> 01:01:02,040
write it to disk if you want an

01:00:59,730 --> 01:01:04,680
intermediary step where you create it

01:01:02,040 --> 01:01:06,990
write it to disk and don't touch the API

01:01:04,680 --> 01:01:10,830
and then you have a file that you can

01:01:06,990 --> 01:01:14,390
share that's why I added the extra flags

01:01:10,830 --> 01:01:18,690
but you can skip a step just with run

01:01:14,390 --> 01:01:22,380
and then running create this is also

01:01:18,690 --> 01:01:25,170
just one step but based on the file you

01:01:22,380 --> 01:01:28,860
have so it gives you an opportunity to

01:01:25,170 --> 01:01:31,950
edit the file change the labels change

01:01:28,860 --> 01:01:34,800
the default replication so that when

01:01:31,950 --> 01:01:40,350
they do the create the default replica

01:01:34,800 --> 01:01:42,840
is is five replicas right so I like

01:01:40,350 --> 01:01:45,060
having that extra step so when I share

01:01:42,840 --> 01:01:48,750
things I have something more customized

01:01:45,060 --> 01:01:52,680
that I share so it depends on what you

01:01:48,750 --> 01:01:55,710
need I do run this is how this is what I

01:01:52,680 --> 01:02:00,420
do on the command line is this but if I

01:01:55,710 --> 01:02:05,100
want to share it dry run yeah

01:02:00,420 --> 01:02:08,220
good question thank you so last section

01:02:05,100 --> 01:02:12,800
and then I will hand it over to Jan for

01:02:08,220 --> 01:02:15,900
the OpenShift pieces replica set a

01:02:12,800 --> 01:02:19,440
replica set provides replication and

01:02:15,900 --> 01:02:21,960
lifecycle management for a specific

01:02:19,440 --> 01:02:23,940
image release does anyone remember what

01:02:21,960 --> 01:02:27,240
my title was on that last section

01:02:23,940 --> 01:02:29,130
deployment helps you it's almost the

01:02:27,240 --> 01:02:30,930
exact same thing replication and

01:02:29,130 --> 01:02:32,910
lifecycle management for a specific

01:02:30,930 --> 01:02:35,430
image release let's see how it's

01:02:32,910 --> 01:02:39,330
different than deployments because this

01:02:35,430 --> 01:02:42,120
sounds very similar on the surface so

01:02:39,330 --> 01:02:44,370
let's take a look at the current state

01:02:42,120 --> 01:02:46,650
of our deployment

01:02:44,370 --> 01:02:50,400
it looks hopefully you are all able to

01:02:46,650 --> 01:02:52,920
fetch data you were able to fetch it

01:02:50,400 --> 01:02:55,740
when you had a single replica and you

01:02:52,920 --> 01:02:58,160
scaled up to five we had some damage but

01:02:55,740 --> 01:03:02,400
we recovered and it still looks healthy

01:02:58,160 --> 01:03:04,680
I'm watching I was watching the pods in

01:03:02,400 --> 01:03:09,630
this lower terminal I'm gonna do it

01:03:04,680 --> 01:03:12,570
control C and break out of that or for

01:03:09,630 --> 01:03:18,780
ground if if you need to for ground a

01:03:12,570 --> 01:03:24,600
job and I'm gonna run get deploy in this

01:03:18,780 --> 01:03:27,870
with it with a - W or - - - watch either

01:03:24,600 --> 01:03:29,700
one and we'll watch the deployment we'll

01:03:27,870 --> 01:03:32,309
make a deployment dashboard in this

01:03:29,700 --> 01:03:35,349
lower terminal

01:03:32,309 --> 01:03:39,609
and then in the upper terminal I'm going

01:03:35,349 --> 01:03:43,539
to run coop cuddle set image this

01:03:39,609 --> 01:03:46,029
command is basically just going to edit

01:03:43,539 --> 01:03:49,390
the it's going to pull down the

01:03:46,029 --> 01:03:54,549
deployment resource from the API open up

01:03:49,390 --> 01:03:57,489
the file find the spec and the pod

01:03:54,549 --> 01:04:01,809
within the deployment spec and then look

01:03:57,489 --> 01:04:03,789
at the identifier of the image within

01:04:01,809 --> 01:04:06,249
the container within the pod within the

01:04:03,789 --> 01:04:08,709
deployment it's kind of all nested in

01:04:06,249 --> 01:04:11,799
that JSON and it's going to update the

01:04:08,709 --> 01:04:16,119
image value and set a new tag now we're

01:04:11,799 --> 01:04:18,819
adding : v1 on our container so this is

01:04:16,119 --> 01:04:21,699
going to do a roll us forward to a new

01:04:18,819 --> 01:04:25,509
deployment let's assume our developers

01:04:21,699 --> 01:04:27,160
have already cut a release something's

01:04:25,509 --> 01:04:29,199
already made it past QA

01:04:27,160 --> 01:04:32,289
this is more release management than

01:04:29,199 --> 01:04:36,099
than a developer move but let's go ahead

01:04:32,289 --> 01:04:38,650
and roll forward and we should see in

01:04:36,099 --> 01:04:40,970
our dashboard below that some activity

01:04:38,650 --> 01:04:44,570
is happening

01:04:40,970 --> 01:04:46,000
we can get RS to look at the replica

01:04:44,570 --> 01:04:49,580
sets and it looks like there is

01:04:46,000 --> 01:04:52,700
currently some some action going on I'm

01:04:49,580 --> 01:04:57,260
going to run this we could already see

01:04:52,700 --> 01:05:00,340
the new value and if I get replica sets

01:04:57,260 --> 01:05:05,830
it looks like I'm fully rolled forward

01:05:00,340 --> 01:05:08,180
from this to this whatever that means

01:05:05,830 --> 01:05:09,170
let's see if we could find out some more

01:05:08,180 --> 01:05:15,200
info

01:05:09,170 --> 01:05:19,790
I get pods if we look at the names of

01:05:15,200 --> 01:05:21,650
the pods you can see Hello k8s this is

01:05:19,790 --> 01:05:24,440
named after the name of the deployment

01:05:21,650 --> 01:05:26,570
and then there's this middle identifier

01:05:24,440 --> 01:05:29,450
this is an identifier for the

01:05:26,570 --> 01:05:33,890
replication controller and then this is

01:05:29,450 --> 01:05:36,320
a random ID for the individual pod so

01:05:33,890 --> 01:05:38,630
all of these from the old replication

01:05:36,320 --> 01:05:41,660
controller are terminating oops

01:05:38,630 --> 01:05:45,170
scrolled up too far and the new

01:05:41,660 --> 01:05:49,670
replication controller is running and we

01:05:45,170 --> 01:05:52,010
have our new response good morning for

01:05:49,670 --> 01:05:55,310
the classroom it was everyone able to

01:05:52,010 --> 01:06:01,310
roll forward there ya know no problems

01:05:55,310 --> 01:06:02,750
anywhere perfect excellent let's try now

01:06:01,310 --> 01:06:07,910
let's take a look at our roll out

01:06:02,750 --> 01:06:10,609
history and looks like we have one to

01:06:07,910 --> 01:06:14,020
two revisions currently on that

01:06:10,609 --> 01:06:17,359
kubernetes has tracked relative to this

01:06:14,020 --> 01:06:21,760
deployment we've just created I can do a

01:06:17,359 --> 01:06:26,240
roll out undo in order to roll back and

01:06:21,760 --> 01:06:28,540
let's run some curl requests and we can

01:06:26,240 --> 01:06:28,540
watch

01:06:29,760 --> 01:06:39,480
let's watch as this changes oh that

01:06:36,300 --> 01:06:42,119
should be 8080 there we go yeah

01:06:39,480 --> 01:06:44,609
hopefully that was that was a typo on my

01:06:42,119 --> 01:06:47,940
part but you should have as long as

01:06:44,609 --> 01:06:49,710
these applications are stateless Web

01:06:47,940 --> 01:06:52,200
Apps and and if you're storing your

01:06:49,710 --> 01:06:55,290
session information in a distributed

01:06:52,200 --> 01:06:58,160
cache like memcache or Redis then you

01:06:55,290 --> 01:07:01,890
ought to be able to do zero downtime

01:06:58,160 --> 01:07:03,390
rolling rolling deployments if you are

01:07:01,890 --> 01:07:07,609
reasonably stateless in your

01:07:03,390 --> 01:07:11,119
architecture so kubernetes is great for

01:07:07,609 --> 01:07:15,200
high availability of your web resources

01:07:11,119 --> 01:07:18,450
zero downtime rollouts and rollbacks

01:07:15,200 --> 01:07:22,140
which sometimes is a whole lot of stuff

01:07:18,450 --> 01:07:25,800
that developers aren't always concerned

01:07:22,140 --> 01:07:29,430
with so I'm gonna do a clean up let's do

01:07:25,800 --> 01:07:31,460
coop cuddle delete service comma

01:07:29,430 --> 01:07:36,119
deployment we're gonna delete two

01:07:31,460 --> 01:07:39,990
resources by type as long as they have

01:07:36,119 --> 01:07:43,190
the same ID this is kind of like does

01:07:39,990 --> 01:07:46,490
that make sense let's go just back to

01:07:43,190 --> 01:07:46,490
Terminal three

01:07:47,560 --> 01:07:52,570
we've got a picture-in-picture enabled

01:07:50,120 --> 01:07:52,570
somehow

01:07:57,050 --> 01:07:59,110
you

01:08:02,910 --> 01:08:10,839
all right figured it out cool all right

01:08:08,219 --> 01:08:14,920
sorry for the technical difficulties

01:08:10,839 --> 01:08:20,199
let's see what happens and then I'll do

01:08:14,920 --> 01:08:22,750
get all and looks like there's a couple

01:08:20,199 --> 01:08:24,670
pods being cleaned up but otherwise we

01:08:22,750 --> 01:08:27,929
hopefully have cleaned up after

01:08:24,670 --> 01:08:29,230
ourselves any questions on that section

01:08:27,929 --> 01:08:30,819
No

01:08:29,230 --> 01:08:34,529
do you understand the difference between

01:08:30,819 --> 01:08:38,079
replica sets and deployments

01:08:34,529 --> 01:08:42,190
begley replica sets are if I have that

01:08:38,079 --> 01:08:44,650
initial image that's a : latest and I

01:08:42,190 --> 01:08:48,579
have five replicas and I want to roll

01:08:44,650 --> 01:08:52,210
forward to a v1 tag the replica set it's

01:08:48,579 --> 01:08:55,420
going to the deployment will create a

01:08:52,210 --> 01:08:58,389
new replica set and it will start

01:08:55,420 --> 01:09:02,319
scaling up the pods on this new replica

01:08:58,389 --> 01:09:04,900
with the v1 image and since we requested

01:09:02,319 --> 01:09:06,819
a speck of five we're gonna the

01:09:04,900 --> 01:09:09,429
deployment is going to try to keep us at

01:09:06,819 --> 01:09:11,559
a spec of five even though it's doing

01:09:09,429 --> 01:09:18,099
this rolling deployment from replica 1

01:09:11,559 --> 01:09:21,609
to replica 2 so as it scales replica v1

01:09:18,099 --> 01:09:24,210
up it'll scale this one down and try to

01:09:21,609 --> 01:09:27,219
roll us across and keep us at even five

01:09:24,210 --> 01:09:29,710
containers as it does the rolling

01:09:27,219 --> 01:09:32,799
deployment and so the deployment

01:09:29,710 --> 01:09:37,929
resource under the hood is actually

01:09:32,799 --> 01:09:41,940
using a replica resource to manage the

01:09:37,929 --> 01:09:45,480
pods right so the kubernetes api has

01:09:41,940 --> 01:09:48,759
higher order resources that leverage

01:09:45,480 --> 01:09:53,859
lower-level resources in order to do

01:09:48,759 --> 01:09:57,900
automated and a deployment is a higher

01:09:53,859 --> 01:10:02,650
order resource that takes advantage of

01:09:57,900 --> 01:10:07,750
replica sets primarily which then in

01:10:02,650 --> 01:10:11,159
turn take advantage of pods so it's all

01:10:07,750 --> 01:10:14,619
kind of stacked like a Russian doll and

01:10:11,159 --> 01:10:17,500
best thing I can recommend is use

01:10:14,619 --> 01:10:19,719
deployments when possible because that

01:10:17,500 --> 01:10:22,030
already takes advantage of all the

01:10:19,719 --> 01:10:23,889
lower-level pieces and then that'll keep

01:10:22,030 --> 01:10:26,139
things nice and simple for you but

01:10:23,889 --> 01:10:28,510
hopefully you understand that this is

01:10:26,139 --> 01:10:31,840
like a modeling language with building

01:10:28,510 --> 01:10:33,610
blocks and the more you learn about it

01:10:31,840 --> 01:10:37,329
the more you learn how to architect your

01:10:33,610 --> 01:10:41,020
solutions and then you have a giant pile

01:10:37,329 --> 01:10:43,270
of Yama land or JSON that hopefully you

01:10:41,020 --> 01:10:46,449
can share with junior developers to give

01:10:43,270 --> 01:10:48,050
them a clear starting point and to make

01:10:46,449 --> 01:10:50,420
things easier for them

01:10:48,050 --> 01:10:52,280
so I'm gonna do a check in on folks now

01:10:50,420 --> 01:10:54,230
that we're through the first half how

01:10:52,280 --> 01:10:56,840
many folks have experience using

01:10:54,230 --> 01:10:58,880
containers I already asked this one and

01:10:56,840 --> 01:11:00,770
it was a hundred percent right how many

01:10:58,880 --> 01:11:04,520
folks can say they have experience using

01:11:00,770 --> 01:11:06,349
kubernetes a hundred percent how many

01:11:04,520 --> 01:11:09,020
feel like you're maybe basically

01:11:06,349 --> 01:11:11,030
proficient with coop cuttle I think

01:11:09,020 --> 01:11:13,429
hopefully you've done enough command

01:11:11,030 --> 01:11:17,389
line interactions you can list resources

01:11:13,429 --> 01:11:20,780
by type and grab them by ID edit them if

01:11:17,389 --> 01:11:22,909
you need to how many people feel like

01:11:20,780 --> 01:11:25,849
they can name five basic kubernetes

01:11:22,909 --> 01:11:29,270
primitives anyone feel like they can't

01:11:25,849 --> 01:11:31,309
i'll single you out I shall wait now to

01:11:29,270 --> 01:11:35,599
make threats it folks all right so

01:11:31,309 --> 01:11:36,590
hopefully you are all ready to see what

01:11:35,599 --> 01:11:39,710
OpenShift

01:11:36,590 --> 01:11:45,679
adds on top of kubernetes we saw a lot

01:11:39,710 --> 01:11:48,280
of low-level ops focused use cases which

01:11:45,679 --> 01:11:50,809
are great to know if you're trying to

01:11:48,280 --> 01:11:54,559
replicate something as production

01:11:50,809 --> 01:11:58,190
quality as possible nailing these JSON

01:11:54,559 --> 01:12:01,760
templates allows you to reproduce things

01:11:58,190 --> 01:12:05,320
really easily but allowing for that

01:12:01,760 --> 01:12:09,260
real-time iterative web development is

01:12:05,320 --> 01:12:11,480
super important and being able to not

01:12:09,260 --> 01:12:13,699
overwhelm junior developers with

01:12:11,480 --> 01:12:15,170
terminology especially when you're

01:12:13,699 --> 01:12:17,030
trying to tell them that a node is

01:12:15,170 --> 01:12:19,909
something different or a service is

01:12:17,030 --> 01:12:22,699
something they're not used to this is

01:12:19,909 --> 01:12:23,800
where openshift comes in so Jan you

01:12:22,699 --> 01:12:27,440
ready to take it away

01:12:23,800 --> 01:12:30,860
cool yeah you bet

01:12:27,440 --> 01:12:33,309
and you prefer your own laptop or this

01:12:30,860 --> 01:12:33,309
is fine

01:12:40,300 --> 01:12:42,360
you

01:12:51,110 --> 01:12:59,620
here so for the wrist you trying to turn

01:12:57,530 --> 01:12:59,620
off

01:13:02,440 --> 01:13:08,560
I'm gonna press the picture-in-picture

01:13:04,389 --> 01:13:10,630
button oh okay I'm in the time a leaner

01:13:08,560 --> 01:13:16,989
too so we'll have to see how this goes

01:13:10,630 --> 01:13:20,440
so for the rest of the workshop oh man

01:13:16,989 --> 01:13:22,860
this is not my trackpad Ryan I just want

01:13:20,440 --> 01:13:26,690
to make it take a ball screen

01:13:22,860 --> 01:13:26,690
I have Aleph on the windows keyboard

01:13:27,660 --> 01:13:35,070
all right okay so for the rest of the

01:13:32,660 --> 01:13:37,560
workshop we're gonna be just focusing in

01:13:35,070 --> 01:13:38,820
this one window so you have this panel

01:13:37,560 --> 01:13:40,770
here on the left hand side where it says

01:13:38,820 --> 01:13:43,650
workshop overview that's going to be

01:13:40,770 --> 01:13:46,830
your instructions from now on if you

01:13:43,650 --> 01:13:48,950
scroll go ahead and click that blue

01:13:46,830 --> 01:13:51,140
continue button

01:13:48,950 --> 01:13:52,340
and I'll explain what we're doing here

01:13:51,140 --> 01:13:54,500
so we're still gonna be working in this

01:13:52,340 --> 01:13:56,290
web terminal let me get control see you

01:13:54,500 --> 01:14:00,230
down here

01:13:56,290 --> 01:14:02,780
but this has some just click click and

01:14:00,230 --> 01:14:04,310
run so this OC help this is just to make

01:14:02,780 --> 01:14:07,130
sure that these commands will actually

01:14:04,310 --> 01:14:08,720
run for you so we've been using cube CTL

01:14:07,130 --> 01:14:11,420
or cout cuddle whatever you prefer to

01:14:08,720 --> 01:14:14,690
call it we're gonna be using OC from

01:14:11,420 --> 01:14:17,330
here on out OC does everything coop

01:14:14,690 --> 01:14:20,710
cuddle can do but additionally has some

01:14:17,330 --> 01:14:24,050
of the features of open shift so it's o

01:14:20,710 --> 01:14:25,250
open shift command line tool that does

01:14:24,050 --> 01:14:26,690
everything that could cuddle can do but

01:14:25,250 --> 01:14:29,120
also some other things that we'll see in

01:14:26,690 --> 01:14:32,600
a moment and you can get the the help

01:14:29,120 --> 01:14:34,100
for that command right there so

01:14:32,600 --> 01:14:36,260
hopefully that worked for you

01:14:34,100 --> 01:14:37,910
we're gonna be using a project you've

01:14:36,260 --> 01:14:40,520
already been working in a project this

01:14:37,910 --> 01:14:42,770
user one project that you're in projects

01:14:40,520 --> 01:14:45,110
are somewhat analogous to namespaces in

01:14:42,770 --> 01:14:47,320
kubernetes but a project is an open

01:14:45,110 --> 01:14:49,610
shift construct that also kind of ties

01:14:47,320 --> 01:14:52,660
ties that role the role based access

01:14:49,610 --> 01:14:55,850
control to your namespace so you as user

01:14:52,660 --> 01:14:57,650
whatever number have access to the user

01:14:55,850 --> 01:14:59,660
whatever project but you don't have

01:14:57,650 --> 01:15:01,580
access to my project you don't have

01:14:59,660 --> 01:15:04,160
access to all the projects like the

01:15:01,580 --> 01:15:06,410
admin of the cluster does so you're

01:15:04,160 --> 01:15:09,260
you're working in a single project right

01:15:06,410 --> 01:15:10,940
now if you run this OC project command

01:15:09,260 --> 01:15:13,070
and you can type these or you can just

01:15:10,940 --> 01:15:14,630
click the button to execute them it

01:15:13,070 --> 01:15:18,620
should tell you what project you're you

01:15:14,630 --> 01:15:21,040
think I've done it here we go I'm gonna

01:15:18,620 --> 01:15:23,540
have to like do this at arm's length I

01:15:21,040 --> 01:15:24,830
do this on treadmills all the time where

01:15:23,540 --> 01:15:28,700
you like lean for it and then it turns

01:15:24,830 --> 01:15:32,270
off so if you click that you should see

01:15:28,700 --> 01:15:33,860
your own project come back there so we

01:15:32,270 --> 01:15:35,810
haven't looked at the openshift web

01:15:33,860 --> 01:15:38,630
console yet we're going to do that now

01:15:35,810 --> 01:15:40,370
so there's a link here you can click you

01:15:38,630 --> 01:15:43,370
also can just simply click on the word

01:15:40,370 --> 01:15:45,710
console up here and that's gonna drop

01:15:43,370 --> 01:15:48,050
you in you might have to log in you

01:15:45,710 --> 01:15:50,330
probably already logged in but so what

01:15:48,050 --> 01:15:52,280
this is and we've got tiny resolution

01:15:50,330 --> 01:15:53,810
here so there we go well pull it over so

01:15:52,280 --> 01:15:54,470
you can see the menu so this is the

01:15:53,810 --> 01:15:56,900
OpenShift

01:15:54,470 --> 01:16:00,590
web console if you don't want to use the

01:15:56,900 --> 01:16:02,300
command line ever or sometimes you can

01:16:00,590 --> 01:16:02,840
use the web console to get a lot of the

01:16:02,300 --> 01:16:04,909
same things

01:16:02,840 --> 01:16:06,889
done by default that's gonna drop you

01:16:04,909 --> 01:16:09,409
into this administrator view and you can

01:16:06,889 --> 01:16:11,540
tell that by this toggle up here so this

01:16:09,409 --> 01:16:13,909
is kind of like the default view if you

01:16:11,540 --> 01:16:19,159
need to do more ops related things in

01:16:13,909 --> 01:16:21,560
the cluster there is also a developer

01:16:19,159 --> 01:16:23,119
view and I didn't click my project first

01:16:21,560 --> 01:16:25,010
select your project I'll show you what

01:16:23,119 --> 01:16:26,360
I'm what I'm into click into your

01:16:25,010 --> 01:16:29,650
project here to make sure you've

01:16:26,360 --> 01:16:29,650
actually got a project selected

01:16:31,739 --> 01:16:40,469
left click this is again not my trackpad

01:16:36,920 --> 01:16:42,090
and then go in here toggle to developer

01:16:40,469 --> 01:16:43,710
and now you're in this developer view

01:16:42,090 --> 01:16:46,019
there is nothing to look at right now

01:16:43,710 --> 01:16:47,190
because we haven't got anything deployed

01:16:46,019 --> 01:16:50,130
because we cleaned up after ourselves

01:16:47,190 --> 01:16:53,610
after this last one but now we're going

01:16:50,130 --> 01:16:55,769
to look at using the web console and

01:16:53,610 --> 01:16:58,289
using a tool call or a project called

01:16:55,769 --> 01:17:01,590
source to image to actually go from

01:16:58,289 --> 01:17:03,690
source code to a container that's

01:17:01,590 --> 01:17:05,730
running on the platform without having

01:17:03,690 --> 01:17:07,110
to build the image manual and not having

01:17:05,730 --> 01:17:08,340
to create a docker file not having to

01:17:07,110 --> 01:17:10,050
like already have an image available

01:17:08,340 --> 01:17:13,429
we're going to use some of the features

01:17:10,050 --> 01:17:16,349
to of the platform to do that for us so

01:17:13,429 --> 01:17:18,179
source 2 image as I mentioned so this is

01:17:16,349 --> 01:17:19,980
a it's an open source project it's

01:17:18,179 --> 01:17:22,079
included with openshift but you can also

01:17:19,980 --> 01:17:25,909
use it outside of open chest it's

01:17:22,079 --> 01:17:29,429
available for use and what it does

01:17:25,909 --> 01:17:33,239
essentially is you give it a source code

01:17:29,429 --> 01:17:34,829
like a get URL github URL you can either

01:17:33,239 --> 01:17:37,499
tell it what kind of code it is you

01:17:34,829 --> 01:17:39,630
could say this is no js' or it can

01:17:37,499 --> 01:17:41,340
usually infer that based on information

01:17:39,630 --> 01:17:43,889
in the repository so like if there's a

01:17:41,340 --> 01:17:46,769
package.json file it's gonna say ok I'm

01:17:43,889 --> 01:17:49,949
going to use a no js' builder image to

01:17:46,769 --> 01:17:54,239
create this application image so that's

01:17:49,949 --> 01:17:55,860
what we're going to do now so if you're

01:17:54,239 --> 01:17:58,079
willing to and if you have a github

01:17:55,860 --> 01:18:02,599
account the best way to do this would be

01:17:58,079 --> 01:18:05,909
to fork this repository of Ryan's

01:18:02,599 --> 01:18:08,369
because that way you can set up actually

01:18:05,909 --> 01:18:10,860
what's our timing or see if we even have

01:18:08,369 --> 01:18:12,690
time to do the web hooks my phone's over

01:18:10,860 --> 01:18:16,500
there

01:18:12,690 --> 01:18:20,210
all right you can try it so if you if

01:18:16,500 --> 01:18:20,210
you want to go ahead and fork this

01:18:21,750 --> 01:18:26,580
I'm not gonna use yours I'm I'm signed

01:18:24,090 --> 01:18:27,390
in to mine so we'll all do my own but if

01:18:26,580 --> 01:18:31,310
you want a fork

01:18:27,390 --> 01:18:34,610
Ryan's repo here then you'll be able to

01:18:31,310 --> 01:18:36,960
do this with your own copy of the code

01:18:34,610 --> 01:18:40,350
but what we're going to do I'll give you

01:18:36,960 --> 01:18:42,060
a minute to do that but I'll go ahead

01:18:40,350 --> 01:18:43,500
and start walking you through through

01:18:42,060 --> 01:18:46,110
what we're gonna do next and I'll pause

01:18:43,500 --> 01:18:48,330
- to let everybody catch up but so over

01:18:46,110 --> 01:18:49,680
here this topology view is going to look

01:18:48,330 --> 01:18:51,750
cool in a minute once we have something

01:18:49,680 --> 01:18:54,060
deployed in the meantime when there's no

01:18:51,750 --> 01:18:56,900
workloads running it gives you this

01:18:54,060 --> 01:18:59,449
screen resolution is really

01:18:56,900 --> 01:19:02,510
odd there we go that's a little better

01:18:59,449 --> 01:19:04,100
like that so it's going to give you some

01:19:02,510 --> 01:19:06,080
options here of different ways that you

01:19:04,100 --> 01:19:07,670
can deploy things we're going to use

01:19:06,080 --> 01:19:09,230
from git but just to walk you through

01:19:07,670 --> 01:19:10,850
what else there is you can deploy an

01:19:09,230 --> 01:19:13,580
image which is what we were doing on the

01:19:10,850 --> 01:19:16,489
command line before you can deploy from

01:19:13,580 --> 01:19:18,199
a catalog this is going to give you a

01:19:16,489 --> 01:19:19,580
catalog of things on the cluster that

01:19:18,199 --> 01:19:21,199
are available that you can use to build

01:19:19,580 --> 01:19:23,690
off of so this is I'll just show you

01:19:21,199 --> 01:19:26,750
really quickly so in the developer

01:19:23,690 --> 01:19:28,820
catalog you'll see things like languages

01:19:26,750 --> 01:19:30,770
and runtimes so if you've got something

01:19:28,820 --> 01:19:33,050
that's PHP or whatever this gives you a

01:19:30,770 --> 01:19:37,670
starting point to build from there's

01:19:33,050 --> 01:19:39,409
also databases you can deploy CI CD

01:19:37,670 --> 01:19:41,150
solutions Jenkins whatever you want you

01:19:39,409 --> 01:19:44,620
can deploy all of those from that

01:19:41,150 --> 01:19:47,030
catalog let's go back over here though

01:19:44,620 --> 01:19:48,320
you can deploy from a docker file so if

01:19:47,030 --> 01:19:50,179
you just got a docker file out there

01:19:48,320 --> 01:19:51,949
somewhere you can deploy from that you

01:19:50,179 --> 01:19:55,040
can drop in yeah Malheur JSON so like

01:19:51,949 --> 01:19:56,480
the deployment dot JSON file that Ryan

01:19:55,040 --> 01:20:02,890
was creating when you did the dry run

01:19:56,480 --> 01:20:05,710
before you could just drop it in inches

01:20:02,890 --> 01:20:08,260
and just say click it paste it you're

01:20:05,710 --> 01:20:09,730
done or databases which again maps back

01:20:08,260 --> 01:20:11,200
to the databases we were looking at in

01:20:09,730 --> 01:20:14,230
the catalog before but it's just a

01:20:11,200 --> 01:20:16,510
easier view into that so all of that to

01:20:14,230 --> 01:20:20,710
say click from get you're going to put

01:20:16,510 --> 01:20:25,230
your your fork here I think I still have

01:20:20,710 --> 01:20:25,230
mindless let's find out I'll use my own

01:20:26,780 --> 01:20:32,120
well but the eye you're like I have all

01:20:31,310 --> 01:20:37,960
the power

01:20:32,120 --> 01:20:37,960
whoo all right let's do it you use yours

01:20:38,110 --> 01:20:41,400
I'll use Ryan

01:20:48,050 --> 01:20:50,110
you

01:20:56,889 --> 01:20:59,519
yeah

01:21:06,949 --> 01:21:12,110
yeah so hopefully we'll get to that in

01:21:09,290 --> 01:21:14,960
the next step um I think we'll have time

01:21:12,110 --> 01:21:18,620
so so drop your your git repo URL there

01:21:14,960 --> 01:21:20,239
scroll down click nodejs when we're

01:21:18,620 --> 01:21:22,280
doing in the web interface here it

01:21:20,239 --> 01:21:24,230
allows you to explicitly select which

01:21:22,280 --> 01:21:25,910
builder image you're using you can do

01:21:24,230 --> 01:21:29,120
this from the command line to with the

01:21:25,910 --> 01:21:30,800
OC new - app command and in that case

01:21:29,120 --> 01:21:32,000
you can just give it that get URL and

01:21:30,800 --> 01:21:34,160
you don't even need to tell it it's no

01:21:32,000 --> 01:21:36,530
js' it'll figure it out

01:21:34,160 --> 01:21:37,730
you can select what version of node you

01:21:36,530 --> 01:21:43,340
want to use I'm just going to leave it

01:21:37,730 --> 01:21:44,630
10 by default and then it's it's giving

01:21:43,340 --> 01:21:47,719
you these options here to create an

01:21:44,630 --> 01:21:51,140
application name so this is really just

01:21:47,719 --> 01:21:52,400
creating some labels on your deployment

01:21:51,140 --> 01:21:53,510
and you'll see what that means in a

01:21:52,400 --> 01:21:55,460
minute but it's allowing you to have

01:21:53,510 --> 01:21:57,170
like an application grouping it's just a

01:21:55,460 --> 01:22:00,170
logical grouping of components in an

01:21:57,170 --> 01:22:02,510
application to make it kind of easy to

01:22:00,170 --> 01:22:05,179
see and manage but it's using standard

01:22:02,510 --> 01:22:07,300
kubernetes naming labels to do that and

01:22:05,179 --> 01:22:09,650
then there's the name for your

01:22:07,300 --> 01:22:13,010
deployment which will just call it HTTP

01:22:09,650 --> 01:22:14,420
base that's fine by default hopefully

01:22:13,010 --> 01:22:15,890
you can see this in the Advanced Options

01:22:14,420 --> 01:22:19,820
by default when you create something

01:22:15,890 --> 01:22:21,920
this way in the web console it's going

01:22:19,820 --> 01:22:25,100
to create a route for you we didn't

01:22:21,920 --> 01:22:29,870
really get into routes before routes are

01:22:25,100 --> 01:22:31,310
a OpenShift construct they're like a an

01:22:29,870 --> 01:22:34,070
additional benefit and feature that

01:22:31,310 --> 01:22:35,870
OpenShift adds we talked before about

01:22:34,070 --> 01:22:37,699
how the services that you create we're

01:22:35,870 --> 01:22:40,910
accessible with cube DNS inside the

01:22:37,699 --> 01:22:42,890
cluster but not unless you use the crazy

01:22:40,910 --> 01:22:44,420
node port thing not accessible from

01:22:42,890 --> 01:22:46,070
outside the cluster not saying it was

01:22:44,420 --> 01:22:49,870
crazy but you know it's not normal it's

01:22:46,070 --> 01:22:49,870
not how you normally would yeah

01:22:51,329 --> 01:22:54,260
right

01:22:59,340 --> 01:23:02,000
yeah

01:23:02,700 --> 01:23:05,480
rowdy

01:23:06,210 --> 01:23:08,630
this

01:23:09,090 --> 01:23:11,150
you

01:23:52,099 --> 01:23:54,159
you

01:23:56,989 --> 01:24:03,170
so kubernetes has ingress here we're

01:23:59,929 --> 01:24:04,730
using routes I love it because it's all

01:24:03,170 --> 01:24:10,510
you do is check a box and it creates a

01:24:04,730 --> 01:24:10,510
URL for you so go ahead and click create

01:24:11,840 --> 01:24:16,520
table that way I can keep an eye on the

01:24:14,150 --> 01:24:18,080
time all right so what you see now this

01:24:16,520 --> 01:24:21,440
is that topology view we talked about

01:24:18,080 --> 01:24:23,300
before this light gray circle around it

01:24:21,440 --> 01:24:26,570
that's our application grouping that

01:24:23,300 --> 01:24:29,630
application name was HTTP base app if we

01:24:26,570 --> 01:24:31,220
had more than one app or component in

01:24:29,630 --> 01:24:33,380
this application grouping they'd all

01:24:31,220 --> 01:24:34,400
show up in this little bubble here we

01:24:33,380 --> 01:24:36,710
only have one because this is pretty

01:24:34,400 --> 01:24:38,180
simple you've got these decorators here

01:24:36,710 --> 01:24:41,060
this one this one that looks like a

01:24:38,180 --> 01:24:42,710
little circle thing that's the status of

01:24:41,060 --> 01:24:47,770
your build your build is running right

01:24:42,710 --> 01:24:47,770
now we can click on that this window

01:24:48,150 --> 01:24:51,710
yeah I'm gonna just

01:24:52,600 --> 01:24:58,280
that that helps alright there we go so

01:24:56,630 --> 01:25:00,140
our build is running right now and

01:24:58,280 --> 01:25:02,060
that's running that that build to image

01:25:00,140 --> 01:25:05,300
I'm sorry source to image process that

01:25:02,060 --> 01:25:06,770
we talked about I'll come back over here

01:25:05,300 --> 01:25:08,960
so we can see it as it completes it

01:25:06,770 --> 01:25:11,690
looked like it was almost done as that

01:25:08,960 --> 01:25:13,970
completes you whilst you'll see this

01:25:11,690 --> 01:25:15,530
turn to a green check mark and then so

01:25:13,970 --> 01:25:19,400
once the build completes then the

01:25:15,530 --> 01:25:21,350
deployment will start let me go back and

01:25:19,400 --> 01:25:23,780
check and make sure all is well that's

01:25:21,350 --> 01:25:25,010
running npm install it wasn't actually

01:25:23,780 --> 01:25:27,050
quite finished it was doing the first

01:25:25,010 --> 01:25:28,130
step now it's on the second step here so

01:25:27,050 --> 01:25:29,540
you can actually see everything that's

01:25:28,130 --> 01:25:31,790
going on so if something were to go

01:25:29,540 --> 01:25:35,690
wrong you've got the logs here for that

01:25:31,790 --> 01:25:36,650
build and you can see see what happened

01:25:35,690 --> 01:25:40,030
so sometimes if there's like a

01:25:36,650 --> 01:25:42,530
dependency issue and like the NPM

01:25:40,030 --> 01:25:44,120
install process or something fails you

01:25:42,530 --> 01:25:46,520
can go here and say okay I need to go

01:25:44,120 --> 01:25:48,980
fix something in my code and then come

01:25:46,520 --> 01:25:50,990
back okay so now we see push successful

01:25:48,980 --> 01:25:53,390
here come back over to apology view

01:25:50,990 --> 01:25:55,580
that's a green check now soon we'll

01:25:53,390 --> 01:25:58,010
start to see this ring around that

01:25:55,580 --> 01:26:01,090
change as the deployment there we go as

01:25:58,010 --> 01:26:04,130
the deployment starts rolling out so I

01:26:01,090 --> 01:26:05,900
clicked on that center circle there to

01:26:04,130 --> 01:26:08,630
get this little panel to show up this is

01:26:05,900 --> 01:26:10,100
information about our deployment you can

01:26:08,630 --> 01:26:12,440
see the pod here the container is

01:26:10,100 --> 01:26:14,570
creating right now you can view the logs

01:26:12,440 --> 01:26:17,000
for your pod from here as well by

01:26:14,570 --> 01:26:19,070
clicking into that it's still coming up

01:26:17,000 --> 01:26:21,260
so there's no logs just yet here we go

01:26:19,070 --> 01:26:22,610
oh okay so now it's listening that shows

01:26:21,260 --> 01:26:24,740
us the app is up and running

01:26:22,610 --> 01:26:26,750
if you click this this is going to give

01:26:24,740 --> 01:26:30,890
you that route that was created that URL

01:26:26,750 --> 01:26:32,240
and there is our very fancy web

01:26:30,890 --> 01:26:34,730
application right there

01:26:32,240 --> 01:26:39,080
so hopefully you all got to that same

01:26:34,730 --> 01:26:40,970
point if you were following along but so

01:26:39,080 --> 01:26:44,150
now it has deployed that we can get to

01:26:40,970 --> 01:26:46,430
it from this URL and it is running so

01:26:44,150 --> 01:26:48,290
you again you could have done all of

01:26:46,430 --> 01:26:49,910
that on the command line with OC new app

01:26:48,290 --> 01:26:52,070
as well you would have been had to have

01:26:49,910 --> 01:26:53,690
exposed the service to create a route

01:26:52,070 --> 01:26:55,400
you'd have to do that extra step if you

01:26:53,690 --> 01:26:57,110
did it through the command line and we

01:26:55,400 --> 01:26:58,850
talked whoo it's rolling the wrong way

01:26:57,110 --> 01:27:00,770
we talked a little bit about how you

01:26:58,850 --> 01:27:03,470
would do that here if you wanted to do

01:27:00,770 --> 01:27:04,119
that from the command line instead any

01:27:03,470 --> 01:27:06,360
questions of

01:27:04,119 --> 01:27:06,360
that

01:27:06,600 --> 01:27:13,050
No okay we'll move on so what Ryan was

01:27:11,730 --> 01:27:15,210
talking about before if we want to set

01:27:13,050 --> 01:27:17,850
up web hooks so that any time we make a

01:27:15,210 --> 01:27:19,950
change to the code and actually push it

01:27:17,850 --> 01:27:23,190
out it'll do a new build and deployment

01:27:19,950 --> 01:27:27,000
that's what we can set up now so if you

01:27:23,190 --> 01:27:29,400
created a fork go ahead and go back to

01:27:27,000 --> 01:27:31,380
your terminal how many folks are

01:27:29,400 --> 01:27:34,590
currently doing some type of like git

01:27:31,380 --> 01:27:37,350
push to deploy is it anyone using that

01:27:34,590 --> 01:27:42,120
currently not too many okay that was

01:27:37,350 --> 01:27:44,430
like a revolutionary five years ago but

01:27:42,120 --> 01:27:46,830
I'm like curious how many people are

01:27:44,430 --> 01:27:49,350
actually using that to kick off

01:27:46,830 --> 01:27:52,920
deployments today I think a lot of folks

01:27:49,350 --> 01:27:54,000
have kind of maybe decoupled how that

01:27:52,920 --> 01:27:58,670
works

01:27:54,000 --> 01:28:03,030
but it is definitely nice to know that

01:27:58,670 --> 01:28:05,400
you can wire up automation whether it's

01:28:03,030 --> 01:28:08,730
just deploying to your QA stage or

01:28:05,400 --> 01:28:11,460
earlier stages or kicking off various

01:28:08,730 --> 01:28:15,390
types of automation based on changes in

01:28:11,460 --> 01:28:18,990
a repo so if if there aren't a huge

01:28:15,390 --> 01:28:21,570
number of people super keen on this we

01:28:18,990 --> 01:28:24,440
could move forward to the rsync so you

01:28:21,570 --> 01:28:24,440
have a question about it

01:28:29,930 --> 01:28:36,600
kody containers um that one since the

01:28:34,380 --> 01:28:39,180
webhook is going to try to call back

01:28:36,600 --> 01:28:42,680
into the cluster the cluster would need

01:28:39,180 --> 01:28:45,390
to be addressable somehow so there's a

01:28:42,680 --> 01:28:49,080
some type of service

01:28:45,390 --> 01:28:52,260
relay service you can run and I forget

01:28:49,080 --> 01:28:54,920
the name of a whole truck that sounds

01:28:52,260 --> 01:28:59,090
right it mean it's that sounds like it's

01:28:54,920 --> 01:28:59,090
very well could be the answer

01:29:00,590 --> 01:29:06,680
okay yeah you used to win so now with

01:29:05,390 --> 01:29:09,410
open chat for we have code ready

01:29:06,680 --> 01:29:12,350
containers when you had mini shift for

01:29:09,410 --> 01:29:14,000
open shift 3 I'm pretty sure ultra hook

01:29:12,350 --> 01:29:16,490
is what we had in the slides back when

01:29:14,000 --> 01:29:18,920
we did that yeah so yeah we can I

01:29:16,490 --> 01:29:20,210
haven't actually done it with code ready

01:29:18,920 --> 01:29:22,760
containers but that should be the

01:29:20,210 --> 01:29:25,510
process I think usually for code ready

01:29:22,760 --> 01:29:28,670
containers if I have a local station

01:29:25,510 --> 01:29:33,110
rather than relying on a web hook I can

01:29:28,670 --> 01:29:35,030
just click on the build button in the

01:29:33,110 --> 01:29:39,500
dashboard to trigger a new build

01:29:35,030 --> 01:29:44,510
whenever I need to or what I like doing

01:29:39,500 --> 01:29:47,390
instead of doing builds based on

01:29:44,510 --> 01:29:50,510
whatever whatever's coming in that might

01:29:47,390 --> 01:29:53,990
be useful but I like testing my code

01:29:50,510 --> 01:29:57,320
before I make the commit and we can do

01:29:53,990 --> 01:30:00,170
that using some our sync features that

01:29:57,320 --> 01:30:02,650
that we have queued up next I think so

01:30:00,170 --> 01:30:06,800
that one's even more useful for local

01:30:02,650 --> 01:30:08,930
development purposes has anyone super

01:30:06,800 --> 01:30:11,660
excited to see the github webhook s'en

01:30:08,930 --> 01:30:13,640
is going to be sad if we skip it okay

01:30:11,660 --> 01:30:17,390
you can also do it yourself this cluster

01:30:13,640 --> 01:30:19,160
will be up for well yeah feel free the

01:30:17,390 --> 01:30:21,800
rest of the day feel free to try the web

01:30:19,160 --> 01:30:23,960
hooks on your own or stop by the Red Hat

01:30:21,800 --> 01:30:27,890
booth afterwards and we can give you a

01:30:23,960 --> 01:30:30,880
demo of the git push to deploy and show

01:30:27,890 --> 01:30:34,280
the automation from from github back in

01:30:30,880 --> 01:30:37,850
it's nice but if you're not currently

01:30:34,280 --> 01:30:41,870
using it just make a note that it does

01:30:37,850 --> 01:30:45,470
exist and I think this hopefully live

01:30:41,870 --> 01:30:49,310
development is really where I see a huge

01:30:45,470 --> 01:30:51,860
opportunity for front-end developers to

01:30:49,310 --> 01:30:54,680
get some traction with kubernetes

01:30:51,860 --> 01:30:56,720
because I think for me this is where you

01:30:54,680 --> 01:31:00,350
see a huge amount of value if you're

01:30:56,720 --> 01:31:04,220
doing lots of micro services you can

01:31:00,350 --> 01:31:07,640
have maybe 20 different containers

01:31:04,220 --> 01:31:10,160
deployed in a kubernetes environment do

01:31:07,640 --> 01:31:14,120
this live development against one of the

01:31:10,160 --> 01:31:17,030
containers and then do a

01:31:14,120 --> 01:31:20,030
test or integration test and get

01:31:17,030 --> 01:31:24,380
feedback from that testing before I make

01:31:20,030 --> 01:31:28,130
my commits on this container so to have

01:31:24,380 --> 01:31:30,800
that type of integration feedback or

01:31:28,130 --> 01:31:33,140
functional feedback as part of my local

01:31:30,800 --> 01:31:36,770
development loop I think is really

01:31:33,140 --> 01:31:39,200
powerful if you're doing a lot of micro

01:31:36,770 --> 01:31:41,240
service development especially when you

01:31:39,200 --> 01:31:44,890
start adding in things like caching

01:31:41,240 --> 01:31:47,510
layers between data between data tiers

01:31:44,890 --> 01:31:50,390
you can replicate all of that very

01:31:47,510 --> 01:31:52,580
easily with OpenShift and even in cases

01:31:50,390 --> 01:31:55,610
where you cannot replicate a hundred

01:31:52,580 --> 01:31:58,610
percent of the production work loads you

01:31:55,610 --> 01:32:00,440
can use the service to point to

01:31:58,610 --> 01:32:02,630
something outside the cluster and kind

01:32:00,440 --> 01:32:05,950
of fake it out for the for the

01:32:02,630 --> 01:32:08,870
development staff so hopefully this is a

01:32:05,950 --> 01:32:13,550
big takeaway and a way to show you how

01:32:08,870 --> 01:32:17,060
to enable your junior develop developers

01:32:13,550 --> 01:32:19,040
with a containerized workflow and and

01:32:17,060 --> 01:32:22,270
more visibility than they've had in the

01:32:19,040 --> 01:32:25,580
past for these more complicated problems

01:32:22,270 --> 01:32:27,770
without putting barriers in their

01:32:25,580 --> 01:32:31,760
workflow where they have to run a build

01:32:27,770 --> 01:32:33,920
as a prerequisite in order to get some

01:32:31,760 --> 01:32:37,120
feedback right we want to give you

01:32:33,920 --> 01:32:39,710
feedback during your real-time dev loop

01:32:37,120 --> 01:32:42,020
and that's what this is all about yeah

01:32:39,710 --> 01:32:45,760
so I just I feel like I have to say this

01:32:42,020 --> 01:32:48,650
so don't use OCR sync and production Oh

01:32:45,760 --> 01:32:50,870
it's pushing like a file into your

01:32:48,650 --> 01:32:52,940
running container so this would be

01:32:50,870 --> 01:32:55,880
definitely for doing your local

01:32:52,940 --> 01:32:58,100
development that inner loop stuff it's

01:32:55,880 --> 01:33:00,350
also only pushing it to one pod so like

01:32:58,100 --> 01:33:02,780
if you've got you know five pods like

01:33:00,350 --> 01:33:05,950
just only use this for for local

01:33:02,780 --> 01:33:05,950
development yes

01:33:06,090 --> 01:33:11,670
you you can use Jenkins with with

01:33:08,790 --> 01:33:12,599
openshift for sure yeah we do have

01:33:11,670 --> 01:33:16,260
Jenkins

01:33:12,599 --> 01:33:19,650
in the Service Catalog so if you want to

01:33:16,260 --> 01:33:21,900
look at the if you look in the Service

01:33:19,650 --> 01:33:23,699
Catalog there will be and I can point

01:33:21,900 --> 01:33:27,270
you to the Jenkins deployment but there

01:33:23,699 --> 01:33:30,239
will be a collection of JSON or yamo

01:33:27,270 --> 01:33:32,900
files that are deployments and services

01:33:30,239 --> 01:33:34,440
and other low-level things that

01:33:32,900 --> 01:33:38,130
altogether

01:33:34,440 --> 01:33:40,170
give you a Jenkins environment and so

01:33:38,130 --> 01:33:43,739
you can package up that full Jenkins

01:33:40,170 --> 01:33:46,260
pipeline as part of your dev stage and

01:33:43,739 --> 01:33:48,119
so when junior developers check out a

01:33:46,260 --> 01:33:51,420
development stage they have their own

01:33:48,119 --> 01:33:53,719
jenkins and their own CI tests as as

01:33:51,420 --> 01:33:56,489
part of their own kind of decentralized

01:33:53,719 --> 01:33:58,770
dev stage that they can run

01:33:56,489 --> 01:34:01,590
independently perhaps right and then you

01:33:58,770 --> 01:34:03,900
can have another jenkins in in a staging

01:34:01,590 --> 01:34:06,540
area that does a second round of checks

01:34:03,900 --> 01:34:09,389
but they could hopefully run get as much

01:34:06,540 --> 01:34:12,090
feedback as they need as part of their

01:34:09,389 --> 01:34:14,340
local dev loop if that's what you if

01:34:12,090 --> 01:34:16,770
that's the way you're doing CI then then

01:34:14,340 --> 01:34:20,280
yeah but you can also have a lot of

01:34:16,770 --> 01:34:24,630
other testing and feedback from you know

01:34:20,280 --> 01:34:27,869
other nodejs based build processes as

01:34:24,630 --> 01:34:31,130
well alright so I am going to go ahead

01:34:27,869 --> 01:34:34,290
and edit this index.html file from our

01:34:31,130 --> 01:34:37,040
repo I'm just going to change like the

01:34:34,290 --> 01:34:37,040
h1 tag

01:34:37,439 --> 01:34:40,249
say

01:34:40,949 --> 01:34:46,340
hello open chef

01:34:44,119 --> 01:34:50,380
all right so I've changed that file and

01:34:46,340 --> 01:34:50,380
then we are going to run this

01:34:51,650 --> 01:34:58,320
export here what this is going to do is

01:34:54,269 --> 01:35:02,050
get us the name of our pod basically

01:34:58,320 --> 01:35:06,250
that has the label app equals HTTP base

01:35:02,050 --> 01:35:08,650
and it's going to run the OCR Singh we

01:35:06,250 --> 01:35:10,230
get an error here because we're trying

01:35:08,650 --> 01:35:12,969
to upload I think too many things

01:35:10,230 --> 01:35:17,889
there's some permission thing however it

01:35:12,969 --> 01:35:21,159
did actually do it so if we go back to

01:35:17,889 --> 01:35:23,829
wherever it's running here and refresh

01:35:21,159 --> 01:35:25,809
it says hello open shift so it did send

01:35:23,829 --> 01:35:27,489
that file up there right in this I was

01:35:25,809 --> 01:35:28,840
telling you about we get this failed to

01:35:27,489 --> 01:35:33,119
set permissions think so it kills the

01:35:28,840 --> 01:35:33,119
watch that's a bug we'll figure that out

01:35:41,230 --> 01:35:44,230
yeah

01:35:46,510 --> 01:35:48,570
you

01:35:57,700 --> 01:35:59,760
you

01:36:01,430 --> 01:36:03,490
you

01:36:04,520 --> 01:36:06,580
you

01:36:16,870 --> 01:36:18,930
you

01:36:26,150 --> 01:36:29,300
excuse me

01:36:31,969 --> 01:36:34,030
you

01:36:43,990 --> 01:36:46,620
i watch

01:36:48,350 --> 01:36:50,500
yeah

01:36:51,649 --> 01:36:54,610
right first

01:36:56,450 --> 01:36:59,450
that's

01:36:59,989 --> 01:37:04,559
so that's what you should be having here

01:37:02,579 --> 01:37:06,770
except that we have this error that's

01:37:04,559 --> 01:37:08,800
killing the watch so

01:37:06,770 --> 01:37:08,800
Oh

01:37:13,620 --> 01:37:15,680
you

01:37:18,080 --> 01:37:20,140
you

01:37:34,249 --> 01:37:38,630
cool so there is we don't have time to

01:37:37,280 --> 01:37:39,769
get into this in this particular

01:37:38,630 --> 01:37:42,949
workshop but I want to at least

01:37:39,769 --> 01:37:44,539
introduce you to another tool it's a

01:37:42,949 --> 01:37:46,369
it's another command-line tool that you

01:37:44,539 --> 01:37:49,550
can use with open chef called odio or

01:37:46,369 --> 01:37:52,249
open chef do but I call it audio and

01:37:49,550 --> 01:37:54,889
what that is also intended for is to

01:37:52,249 --> 01:37:58,940
help with this inner loop this iterative

01:37:54,889 --> 01:38:01,729
development it's not just for no it's it

01:37:58,940 --> 01:38:03,829
supports you know Java PHP Python

01:38:01,729 --> 01:38:05,360
whatever whatever you're using and it's

01:38:03,829 --> 01:38:07,130
meant to help kind of first of all

01:38:05,360 --> 01:38:09,739
abstract away some of the kubernetes

01:38:07,130 --> 01:38:13,570
terminology so you're using more kind of

01:38:09,739 --> 01:38:13,570
like get style

01:38:14,250 --> 01:38:20,820
command syntax so if that's something

01:38:17,790 --> 01:38:23,820
that's interesting to you you can check

01:38:20,820 --> 01:38:26,100
that out here but it you know to create

01:38:23,820 --> 01:38:28,910
something in your development loop with

01:38:26,100 --> 01:38:32,130
OTO you would do like oh do create

01:38:28,910 --> 01:38:34,980
nodejs and you'd be deploying it from

01:38:32,130 --> 01:38:36,870
your local directory so here you saw we

01:38:34,980 --> 01:38:39,860
we were it's actually there is a public

01:38:36,870 --> 01:38:42,360
get remote URL that we're deploying from

01:38:39,860 --> 01:38:45,780
odio lets you do that local development

01:38:42,360 --> 01:38:48,360
from your actual laptop so that's kind

01:38:45,780 --> 01:38:51,060
of a difference there that can be really

01:38:48,360 --> 01:38:52,890
convenient it also can do this kind of

01:38:51,060 --> 01:38:56,670
watching loop so as you make changes it

01:38:52,890 --> 01:39:00,150
will sync those up for you it's not as

01:38:56,670 --> 01:39:02,230
instantaneous as OCR sync but it's a

01:39:00,150 --> 01:39:05,380
little more

01:39:02,230 --> 01:39:06,940
what's the right word robust or

01:39:05,380 --> 01:39:12,100
sophisticate

01:39:06,940 --> 01:39:14,850
do is it gives me a way to instead of

01:39:12,100 --> 01:39:18,480
relying on that webhook workflow to

01:39:14,850 --> 01:39:23,800
somehow call back into my local system

01:39:18,480 --> 01:39:28,660
and also coupling all the builds to a

01:39:23,800 --> 01:39:33,370
commit I can decouple those two and use

01:39:28,660 --> 01:39:36,370
odio and use and do a odo push and what

01:39:33,370 --> 01:39:39,640
that'll do is push whatever the call

01:39:36,370 --> 01:39:42,870
whatever the current contents of my repo

01:39:39,640 --> 01:39:46,660
is whether it's been committed or not

01:39:42,870 --> 01:39:49,420
push whatever's in my repo into a build

01:39:46,660 --> 01:39:51,670
pipeline run a build and stream the

01:39:49,420 --> 01:39:54,270
build results back into my console while

01:39:51,670 --> 01:39:57,520
it's building so it gives me a quick

01:39:54,270 --> 01:40:00,000
kind of evaluation of whether it will

01:39:57,520 --> 01:40:03,010
pass a build or not and it actually

01:40:00,000 --> 01:40:04,750
triggers a build in my local cluster or

01:40:03,010 --> 01:40:07,360
whatever cluster I'm pointed at and

01:40:04,750 --> 01:40:10,090
while decoupling the process so I could

01:40:07,360 --> 01:40:13,420
kind of test the code before I make my

01:40:10,090 --> 01:40:16,300
commit and then if it looks good great

01:40:13,420 --> 01:40:19,000
then I make my commit and my get push

01:40:16,300 --> 01:40:22,000
and maybe that'll trigger a build in

01:40:19,000 --> 01:40:25,739
some other pipeline for for my CI team

01:40:22,000 --> 01:40:29,949
you know but I can do just Auto push

01:40:25,739 --> 01:40:32,890
while I'm iterating or odo rsync if I'm

01:40:29,949 --> 01:40:35,170
doing real-time development oh yeah go

01:40:32,890 --> 01:40:38,650
to watch yeah that's right odo watch for

01:40:35,170 --> 01:40:40,870
real-time development and then after I

01:40:38,650 --> 01:40:43,390
am happy that everything is working and

01:40:40,870 --> 01:40:46,300
I'm confident that the integration tests

01:40:43,390 --> 01:40:49,780
pass then I make my commits with

01:40:46,300 --> 01:40:51,130
confidence right and without being

01:40:49,780 --> 01:40:55,390
worried I'm gonna muck up the pipeline

01:40:51,130 --> 01:40:57,040
further downstream for for folks yes so

01:40:55,390 --> 01:41:00,190
there's also something called node shift

01:40:57,040 --> 01:41:02,199
which if you went to Luke Holmquist lab

01:41:00,190 --> 01:41:05,020
yesterday I think he may have have

01:41:02,199 --> 01:41:07,210
talked about it there that is something

01:41:05,020 --> 01:41:09,280
it's you can like it's you can run it

01:41:07,210 --> 01:41:12,179
with like NP x noches blah blah it's

01:41:09,280 --> 01:41:14,890
just another way of helping you deploy

01:41:12,179 --> 01:41:15,860
nodejs applications on openshift easily

01:41:14,890 --> 01:41:18,159
we're

01:41:15,860 --> 01:41:20,449
again having time to get into it their

01:41:18,159 --> 01:41:21,949
code or any containers it sounds like at

01:41:20,449 --> 01:41:24,260
least one of you is using that already

01:41:21,949 --> 01:41:26,210
if you want to run and OpenShift a very

01:41:24,260 --> 01:41:28,389
minimal OpenShift cluster locally on

01:41:26,210 --> 01:41:30,770
your laptop to do local development

01:41:28,389 --> 01:41:33,440
that's what code ready containers can do

01:41:30,770 --> 01:41:35,119
for you takes a bit of memory so you

01:41:33,440 --> 01:41:36,920
need to have a fair amount of memory

01:41:35,119 --> 01:41:40,280
available in your laptop to run it but

01:41:36,920 --> 01:41:43,310
it's pretty easy to get set up and is

01:41:40,280 --> 01:41:51,380
nice for doing local local work with

01:41:43,310 --> 01:41:53,179
openshift and hopefully you can do

01:41:51,380 --> 01:41:55,969
something you can do a fair amount of

01:41:53,179 --> 01:42:00,110
stuff but it requires a bit of a bit of

01:41:55,969 --> 01:42:01,699
memory so that's code ready containers

01:42:00,110 --> 01:42:03,080
if you want to check that out if you

01:42:01,699 --> 01:42:05,270
haven't seen and learned at Open Chef

01:42:03,080 --> 01:42:07,699
comm I'm gonna open this up really

01:42:05,270 --> 01:42:09,560
quickly here just to give you a quick

01:42:07,699 --> 01:42:10,940
view there's a bunch of tutorials here

01:42:09,560 --> 01:42:12,679
but there's also if you just want to

01:42:10,940 --> 01:42:14,119
kick the tires or have access to a

01:42:12,679 --> 01:42:16,010
cluster for a little while to try

01:42:14,119 --> 01:42:17,989
something out these OpenShift

01:42:16,010 --> 01:42:19,369
playgrounds there's one for open shift

01:42:17,989 --> 01:42:21,500
for two which is the version we were

01:42:19,369 --> 01:42:23,270
just using if you go in here there's no

01:42:21,500 --> 01:42:25,880
login or anything you're gonna get a

01:42:23,270 --> 01:42:27,980
four to cluster for 60 minutes do

01:42:25,880 --> 01:42:29,389
whatever and then it goes away so if you

01:42:27,980 --> 01:42:30,830
just need to try something out and you

01:42:29,389 --> 01:42:32,960
don't want to install code ready

01:42:30,830 --> 01:42:35,480
containers you don't need to you're not

01:42:32,960 --> 01:42:37,340
ready to actually like do more than just

01:42:35,480 --> 01:42:39,139
try something out here you go it's

01:42:37,340 --> 01:42:41,989
similar environment to what we were

01:42:39,139 --> 01:42:44,510
using in the workshop but you can login

01:42:41,989 --> 01:42:49,130
as admin and have full admin access here

01:42:44,510 --> 01:42:51,290
to this you know time limited cluster so

01:42:49,130 --> 01:42:54,830
that's another another option if you

01:42:51,290 --> 01:42:55,940
want to try things out on your own yes

01:42:54,830 --> 01:42:57,590
so we do have some time for questions

01:42:55,940 --> 01:42:59,239
and I also just want to mention as Ryan

01:42:57,590 --> 01:43:01,670
said we'll be at the booth the rest of

01:42:59,239 --> 01:43:05,210
the day the the open shift booth out

01:43:01,670 --> 01:43:06,380
there in the sponsor showcase area so

01:43:05,210 --> 01:43:07,969
we'd be happy to talk to you if you have

01:43:06,380 --> 01:43:10,030
any questions that we can't answer right

01:43:07,969 --> 01:43:10,030
now

01:43:11,190 --> 01:43:17,949
I'm ready okay I got two two last things

01:43:15,670 --> 01:43:21,070
to shout out for you so Jan just

01:43:17,949 --> 01:43:23,139
mentioned this learned openshift comm I

01:43:21,070 --> 01:43:26,610
have some of these cards if anyone wants

01:43:23,139 --> 01:43:32,159
a reminder about learned OpenShift

01:43:26,610 --> 01:43:37,440
for like one-hour sessions without any

01:43:32,159 --> 01:43:40,630
signup or other expectations the other

01:43:37,440 --> 01:43:43,840
thing that I wanted to point out we have

01:43:40,630 --> 01:43:46,090
a link in the slides to this Oh Riley

01:43:43,840 --> 01:43:48,659
book if you're interested in a free

01:43:46,090 --> 01:43:51,639
Riley book on OpenShift

01:43:48,659 --> 01:43:55,510
click on that link and you'll get a PDF

01:43:51,639 --> 01:43:58,030
download I will say it's the content of

01:43:55,510 --> 01:43:59,739
the book is on OpenShift 3 so the web

01:43:58,030 --> 01:44:01,239
interface will be different than what

01:43:59,739 --> 01:44:04,090
you have but that most of the command

01:44:01,239 --> 01:44:07,000
line stuff is all the same it's both you

01:44:04,090 --> 01:44:11,079
know still kubernetes under the hood and

01:44:07,000 --> 01:44:15,130
trying to achieve a path style solution

01:44:11,079 --> 01:44:18,579
on top so we covered some of this

01:44:15,130 --> 01:44:21,400
kubernetes terminology we didn't really

01:44:18,579 --> 01:44:25,659
dig too deeply into all of these but we

01:44:21,400 --> 01:44:29,290
learned about routes and asked me about

01:44:25,659 --> 01:44:31,210
other details if you like last thing I

01:44:29,290 --> 01:44:34,389
wanted to give you a link to was tried

01:44:31,210 --> 01:44:37,980
OpenShift comm this is a good way to get

01:44:34,389 --> 01:44:41,290
started with new clusters if you are

01:44:37,980 --> 01:44:43,150
interested in trying openshift on any

01:44:41,290 --> 01:44:44,920
cloud you like you can deploy it you

01:44:43,150 --> 01:44:47,440
need a developer account right out

01:44:44,920 --> 01:44:49,869
developer account but you can set it up

01:44:47,440 --> 01:44:52,869
on your laptop set it up on Amazon and

01:44:49,869 --> 01:44:57,460
set it up on Google set it up on any

01:44:52,869 --> 01:44:59,949
cloud you like and be able to even on

01:44:57,460 --> 01:45:03,849
bare metal and once you have it up and

01:44:59,949 --> 01:45:06,400
running we try to bring in not just the

01:45:03,849 --> 01:45:09,760
support and expertise from the folks at

01:45:06,400 --> 01:45:13,000
Red Hat but help from kind of the whole

01:45:09,760 --> 01:45:15,130
rest of the industry as well so even if

01:45:13,000 --> 01:45:19,869
you're running on bare metal we want you

01:45:15,130 --> 01:45:21,530
to have really solid access to products

01:45:19,869 --> 01:45:24,740
like Retta

01:45:21,530 --> 01:45:27,340
backed by you know the actual maintainer

01:45:24,740 --> 01:45:32,510
zat Redis laps and if you're using

01:45:27,340 --> 01:45:36,740
MongoDB that we've got actual

01:45:32,510 --> 01:45:39,290
provided by MongoDB incorporated so we

01:45:36,740 --> 01:45:42,260
try to work with all the maintainer z--

01:45:39,290 --> 01:45:45,050
in the industry we have a shared support

01:45:42,260 --> 01:45:49,130
model with all these folks so if your

01:45:45,050 --> 01:45:51,650
enterprise company who's interested in

01:45:49,130 --> 01:45:54,880
picking up support and making sure that

01:45:51,650 --> 01:45:58,810
the support dollars are directed towards

01:45:54,880 --> 01:46:01,550
qualified folks who are involved in main

01:45:58,810 --> 01:46:05,060
maintaining the code upstream this is a

01:46:01,550 --> 01:46:09,470
great way to ensure that you're able to

01:46:05,060 --> 01:46:14,750
reproduce any of these data stores on

01:46:09,470 --> 01:46:16,370
any cloud even bare metal and support

01:46:14,750 --> 01:46:21,140
the right experts in the in the

01:46:16,370 --> 01:46:24,380
community right so each of these if you

01:46:21,140 --> 01:46:28,360
want to give this operator hub a try we

01:46:24,380 --> 01:46:33,650
have this operator hub embedded in the

01:46:28,360 --> 01:46:35,330
in the dashboard logged in as a standard

01:46:33,650 --> 01:46:38,000
user so you don't have access

01:46:35,330 --> 01:46:40,280
that's an admin only feature but you can

01:46:38,000 --> 01:46:43,190
try it out on your own with openshift

01:46:40,280 --> 01:46:45,650
four and so administrators can go in

01:46:43,190 --> 01:46:47,810
let's say CouchDB if they wanted to

01:46:45,650 --> 01:46:51,770
install this you can run this coop

01:46:47,810 --> 01:46:56,000
cuddle create on any cluster even a gke

01:46:51,770 --> 01:46:59,150
cluster or a amazon kubernetes anybodies

01:46:56,000 --> 01:47:02,240
kubernetes you ought to be able to use

01:46:59,150 --> 01:47:05,660
coop cuddle and standard tools when you

01:47:02,240 --> 01:47:08,870
run this command it will install a new

01:47:05,660 --> 01:47:12,650
custom resource on the api and then

01:47:08,870 --> 01:47:15,440
you'll be able to coop cuddle get couch

01:47:12,650 --> 01:47:17,660
basis or you know fetch some new

01:47:15,440 --> 01:47:21,790
resource type that kubernetes doesn't

01:47:17,660 --> 01:47:25,070
know about and so all of these operators

01:47:21,790 --> 01:47:29,060
provide ways of extending the kubernetes

01:47:25,070 --> 01:47:31,790
api to add new resource types while

01:47:29,060 --> 01:47:33,770
still maintaining the same kind of

01:47:31,790 --> 01:47:34,940
pattern that we've all learned hopefully

01:47:33,770 --> 01:47:37,550
through this workshop

01:47:34,940 --> 01:47:40,400
the API is gonna be asynchronous and

01:47:37,550 --> 01:47:42,260
it's gonna have a spec and a status

01:47:40,400 --> 01:47:45,200
right if you don't remember anything

01:47:42,260 --> 01:47:47,600
else it's asynchronous it's JSON you

01:47:45,200 --> 01:47:49,580
could do yeah Mille - but spec and

01:47:47,600 --> 01:47:51,890
status and you set the spec and you read

01:47:49,580 --> 01:47:55,040
from the status and that's how all of

01:47:51,890 --> 01:47:58,130
these data stores work on kubernetes

01:47:55,040 --> 01:48:00,640
they create a new resource type you set

01:47:58,130 --> 01:48:03,500
the spec you say what I need and

01:48:00,640 --> 01:48:06,680
kubernetes goes to work fulfilling your

01:48:03,500 --> 01:48:10,190
dependencies and so we're encouraging

01:48:06,680 --> 01:48:13,640
all the major data service and kind of

01:48:10,190 --> 01:48:16,790
soft infrastructure providers to jump in

01:48:13,640 --> 01:48:21,770
and develop their own extensions for

01:48:16,790 --> 01:48:24,170
kubernetes so hopefully you folks find a

01:48:21,770 --> 01:48:28,490
lot of success with the information we

01:48:24,170 --> 01:48:31,150
put out here definitely give us feedback

01:48:28,490 --> 01:48:35,330
if you have any thoughts on any of this

01:48:31,150 --> 01:48:37,820
and find us in the booth oh these are my

01:48:35,330 --> 01:48:39,770
old slides I tried to end I tried to add

01:48:37,820 --> 01:48:42,500
Jan there should be a picture of Jan on

01:48:39,770 --> 01:48:45,370
there as well but yeah thank you very

01:48:42,500 --> 01:48:49,330
much I'm Ryan Jay I've got Jan Kleinert

01:48:45,370 --> 01:48:53,590
thanks again we'll be in the booth

01:48:49,330 --> 01:48:53,590

YouTube URL: https://www.youtube.com/watch?v=2X9R4Ov7GkI


