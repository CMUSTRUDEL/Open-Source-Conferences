Title: A Chat with the Node.js Technical Steering Committee
Publication date: 2020-05-11
Playlist: Node + JS Interactive 2019
Description: 
	A Chat with the Node.js Technical Steering Committee - Michael Dawson, IBM; Anatoli Papirovski, Postmates; Gabriel Schulhof, Intel; Matteo Collina & Anna Henningsen, NearForm
Speakers: Matteo Collina, Michael Dawson, Gabriel Schulhof, Anna Henningsen, Anatoli Papirovski
The Node.js project is a vibrant and fast-moving place and it's sometimes hard to keep up with everything that's going on. Come listen to Technical Steering Committee members talk about how they keep up, their views on key strategic initiatives, what's up in the project and what they are most excited about going forward. We'll save time at the end for questions from the audience so think about what you might want to ask the TSC members and we hope to see you there so we can answer them.
Captions: 
	00:00:00,030 --> 00:00:05,069
okay so I guess it's nine o'clock so we

00:00:02,010 --> 00:00:07,319
might as well get started just want to

00:00:05,069 --> 00:00:10,080
say before we do get started that we

00:00:07,319 --> 00:00:11,400
will have time about two-thirds of the

00:00:10,080 --> 00:00:13,019
way through through questions so as

00:00:11,400 --> 00:00:14,820
we're talking you know think about what

00:00:13,019 --> 00:00:17,330
you'd like to ask and we'll pass around

00:00:14,820 --> 00:00:20,580
the mic and you know do our best answer

00:00:17,330 --> 00:00:23,330
and so at this point I'll ask Mateo to

00:00:20,580 --> 00:00:27,390
everybody to sort of introduce himself

00:00:23,330 --> 00:00:29,789
hi I'm Motoko Lena I am technical

00:00:27,390 --> 00:00:32,160
director at Mir firm and I'm a member of

00:00:29,789 --> 00:00:34,710
the strange working group and mostly

00:00:32,160 --> 00:00:39,059
involved in streams HTTP a GP to all

00:00:34,710 --> 00:00:43,730
things streaming really so hey hi I'm

00:00:39,059 --> 00:00:43,730
Anna I also work in your firm on node.js

00:00:44,030 --> 00:00:48,870
kind of been all over the place and

00:00:46,289 --> 00:00:51,300
currently working on quick and HTTP 3

00:00:48,870 --> 00:00:52,980
support and no just together with James

00:00:51,300 --> 00:00:58,079
Snell who I guess isn't in the room but

00:00:52,980 --> 00:01:01,140
yeah hi I'm Anatole I work at post mates

00:00:58,079 --> 00:01:03,840
as a staff software engineer on node I

00:01:01,140 --> 00:01:07,140
primarily contributed to timers and HTTP

00:01:03,840 --> 00:01:08,840
2 as well as some kind of more obscure

00:01:07,140 --> 00:01:12,960
internal stuff

00:01:08,840 --> 00:01:18,000
I'm Gabriel I work at Intel and I've

00:01:12,960 --> 00:01:21,780
been working mostly on an API and the

00:01:18,000 --> 00:01:23,430
C++ wrappers for an API and native

00:01:21,780 --> 00:01:26,369
add-ons in general making them work with

00:01:23,430 --> 00:01:28,200
workers that kind of thing and I'm

00:01:26,369 --> 00:01:30,869
Michael Dawson IBM's community lead for

00:01:28,200 --> 00:01:33,060
nodejs and I work with a number of the

00:01:30,869 --> 00:01:35,460
teams and projects sort of strategic

00:01:33,060 --> 00:01:40,590
initiatives across the project including

00:01:35,460 --> 00:01:42,299
things like napi and others as well so

00:01:40,590 --> 00:01:43,890
let's start out Matteo you know given

00:01:42,299 --> 00:01:46,130
what's gone on in the last year's

00:01:43,890 --> 00:01:49,740
you think note is still relevant

00:01:46,130 --> 00:01:52,110
absolutely Michael it's not yes I was

00:01:49,740 --> 00:01:54,360
hoping that with the answer so hopefully

00:01:52,110 --> 00:01:57,299
I don't know maybe maybe not you know

00:01:54,360 --> 00:02:00,360
nobody's done ok it's boiled it's cooked

00:01:57,299 --> 00:02:00,960
whatever no no man out I don't know why

00:02:00,360 --> 00:02:04,860
you're here

00:02:00,960 --> 00:02:10,610
really so no it's doing great

00:02:04,860 --> 00:02:13,440
I think nodejs is entering it's a it's

00:02:10,610 --> 00:02:17,130
it's a mature technology now

00:02:13,440 --> 00:02:20,760
extent and it's fully grown up as what

00:02:17,130 --> 00:02:22,890
as what I would say and it's it's

00:02:20,760 --> 00:02:25,020
basically like all like all great

00:02:22,890 --> 00:02:27,030
technologies is to some extent fading in

00:02:25,020 --> 00:02:28,980
a little bit in the background where

00:02:27,030 --> 00:02:30,990
it's not making the headlines of big

00:02:28,980 --> 00:02:34,230
company you Snowden ow or whatever is

00:02:30,990 --> 00:02:36,060
just it's just there and companies all

00:02:34,230 --> 00:02:37,500
over the world and developers all over

00:02:36,060 --> 00:02:41,100
the world are using it for building

00:02:37,500 --> 00:02:43,860
great things and I'm I'm not seeing

00:02:41,100 --> 00:02:47,340
growth like slowly slowing or anything

00:02:43,860 --> 00:02:48,780
but at this point it's it's a technology

00:02:47,340 --> 00:02:53,100
available for everybody like you

00:02:48,780 --> 00:02:54,870
consider things like you probably all of

00:02:53,100 --> 00:02:57,780
most of you will use Visual Studio code

00:02:54,870 --> 00:03:00,950
to develop in whatever language and this

00:02:57,780 --> 00:03:03,630
is built on electron and node and or

00:03:00,950 --> 00:03:05,790
other folks might just use server less

00:03:03,630 --> 00:03:08,670
and there's some note in there as well

00:03:05,790 --> 00:03:11,100
so not is basically just a technology

00:03:08,670 --> 00:03:12,870
that is you know available for

00:03:11,100 --> 00:03:15,000
developers to use and you know everybody

00:03:12,870 --> 00:03:16,470
can there are others of course is not

00:03:15,000 --> 00:03:17,520
that there is a mantra of you know we

00:03:16,470 --> 00:03:20,370
should just be do everything with note

00:03:17,520 --> 00:03:24,150
so it's just doing great it's it's

00:03:20,370 --> 00:03:27,030
evolving and it's a it's definitely

00:03:24,150 --> 00:03:28,830
different face though one of the things

00:03:27,030 --> 00:03:33,000
I really noticed is that we've had I

00:03:28,830 --> 00:03:34,530
don't at this conference and you know as

00:03:33,000 --> 00:03:35,940
opposed to the first one were a lot of

00:03:34,530 --> 00:03:37,410
people are experimenting now almost

00:03:35,940 --> 00:03:38,880
everybody I talked to it's like yeah

00:03:37,410 --> 00:03:40,650
we're using node and we're using it in

00:03:38,880 --> 00:03:44,790
production in some way so it's really a

00:03:40,650 --> 00:03:46,620
big change on that yep yeah I think the

00:03:44,790 --> 00:03:48,720
other part that's interesting is there's

00:03:46,620 --> 00:03:50,880
a whole community of developers now who

00:03:48,720 --> 00:03:53,070
are using it on the front end and for

00:03:50,880 --> 00:03:55,590
react and that whole ecosystem that

00:03:53,070 --> 00:03:58,050
doesn't even know that everything they

00:03:55,590 --> 00:04:00,090
do is powered by node all of the build

00:03:58,050 --> 00:04:01,350
tools everything and it's just kind of

00:04:00,090 --> 00:04:03,180
in the background right and I think

00:04:01,350 --> 00:04:08,340
that's that kind of speaks to the

00:04:03,180 --> 00:04:11,400
maturity part absolutely I just wanted

00:04:08,340 --> 00:04:14,220
to add one quick thing it's there is one

00:04:11,400 --> 00:04:17,340
of the greatest thing that I that I add

00:04:14,220 --> 00:04:22,320
that happened to me this year was I went

00:04:17,340 --> 00:04:23,760
to design design system training so I

00:04:22,320 --> 00:04:25,140
was in the room full of designers most

00:04:23,760 --> 00:04:26,400
of the time just completely like

00:04:25,140 --> 00:04:27,090
completely out of my comfort zone so

00:04:26,400 --> 00:04:32,190
what

00:04:27,090 --> 00:04:34,410
and I one of the things that happened

00:04:32,190 --> 00:04:37,440
was okay in order to do the one of the

00:04:34,410 --> 00:04:40,020
exercises of during during this day of

00:04:37,440 --> 00:04:42,419
training was well you need to use this

00:04:40,020 --> 00:04:43,500
software and in order to do that you

00:04:42,419 --> 00:04:46,770
need to install nodejs

00:04:43,500 --> 00:04:48,540
and they were just like ok now we have

00:04:46,770 --> 00:04:50,460
all this room full of designers that

00:04:48,540 --> 00:04:52,740
have no js' installed in their app they

00:04:50,460 --> 00:04:56,130
don't even have know what this is but

00:04:52,740 --> 00:04:57,810
they just use this tool to use node to

00:04:56,130 --> 00:05:00,210
use some tool on top of it and for them

00:04:57,810 --> 00:05:03,150
is basically just aster runtime just a

00:05:00,210 --> 00:05:05,790
dependency so it has been a fantastic

00:05:03,150 --> 00:05:09,240
feeling really like it's you know we

00:05:05,790 --> 00:05:11,760
have been we are helping other a lot of

00:05:09,240 --> 00:05:14,580
folks innovating and creating new things

00:05:11,760 --> 00:05:17,310
that are disrupting other industries

00:05:14,580 --> 00:05:19,919
that are not even you know we're not

00:05:17,310 --> 00:05:23,280
even our started starting targets you

00:05:19,919 --> 00:05:26,669
see ok so it sounds like you know we've

00:05:23,280 --> 00:05:28,680
seen a lot of on the business side node

00:05:26,669 --> 00:05:31,950
maturing and I told you how do you think

00:05:28,680 --> 00:05:34,380
the codebase is aging I think it depends

00:05:31,950 --> 00:05:36,450
right so it's it's interesting because

00:05:34,380 --> 00:05:38,160
there's a lot of a lot of parts in dough

00:05:36,450 --> 00:05:40,430
that they're moving really fast and are

00:05:38,160 --> 00:05:42,900
really progressing at a good pace and

00:05:40,430 --> 00:05:44,130
moving forward I mean you look at stuff

00:05:42,900 --> 00:05:47,460
like workers you look at stuff like

00:05:44,130 --> 00:05:50,490
modules and that stuff is really kind of

00:05:47,460 --> 00:05:51,360
the quote the code quality is really

00:05:50,490 --> 00:05:53,639
amazing

00:05:51,360 --> 00:05:55,470
but then you go back to some of the

00:05:53,639 --> 00:05:57,270
stuff that requires backwards

00:05:55,470 --> 00:06:00,690
compatibility if you think about streams

00:05:57,270 --> 00:06:02,910
and HTTP there's you know there's

00:06:00,690 --> 00:06:05,010
ecosystem modules like Express out there

00:06:02,910 --> 00:06:10,139
the support all the way back to zero

00:06:05,010 --> 00:06:13,320
point ten I think maybe yeah yeah so you

00:06:10,139 --> 00:06:16,260
have this tremendous range of versions

00:06:13,320 --> 00:06:17,430
they have to support and it creates a

00:06:16,260 --> 00:06:19,440
lot of difficulty in terms of

00:06:17,430 --> 00:06:21,240
maintaining you know you fix a bug or

00:06:19,440 --> 00:06:23,039
you think you're making something more

00:06:21,240 --> 00:06:24,960
consistent and in the process you break

00:06:23,039 --> 00:06:28,050
everybody that you didn't know you were

00:06:24,960 --> 00:06:30,660
gonna break and we have tools that help

00:06:28,050 --> 00:06:32,400
us help us deal with that there is

00:06:30,660 --> 00:06:35,340
obviously counter in the goldmine and

00:06:32,400 --> 00:06:37,140
that helps us test things but it's it

00:06:35,340 --> 00:06:38,600
still makes it tricky and you have to

00:06:37,140 --> 00:06:40,770
have a lot of kind of

00:06:38,600 --> 00:06:42,690
specialized knowledge to contribute to

00:06:40,770 --> 00:06:45,600
those modules and to keep them evolving

00:06:42,690 --> 00:06:46,919
which I think makes it really tricky so

00:06:45,600 --> 00:06:48,360
there any things you think we should be

00:06:46,919 --> 00:06:50,729
doing differently in the project to help

00:06:48,360 --> 00:06:54,599
you know help us manage the aging of the

00:06:50,729 --> 00:07:00,000
codebase or I don't know Mateo

00:06:54,599 --> 00:07:01,259
any thoughts we definitely need more we

00:07:00,000 --> 00:07:04,229
always need more people involved

00:07:01,259 --> 00:07:09,050
especially on those on those areas that

00:07:04,229 --> 00:07:09,050
are not most of the time or not you know

00:07:09,229 --> 00:07:16,050
there is no sparkles like he's

00:07:13,340 --> 00:07:20,669
maintaining that that that that those

00:07:16,050 --> 00:07:23,340
that code like you know it's a friend of

00:07:20,669 --> 00:07:26,340
mine Nadia's collaborator Matthias booth

00:07:23,340 --> 00:07:29,340
says you know every time we try to like

00:07:26,340 --> 00:07:31,830
maintaining node streams is like playing

00:07:29,340 --> 00:07:35,930
whack-a-mole every time if you cross a

00:07:31,830 --> 00:07:38,639
bug time more pops up and you know pop

00:07:35,930 --> 00:07:41,069
it's basically trying to you know keep

00:07:38,639 --> 00:07:45,270
them all down at the same time and this

00:07:41,069 --> 00:07:47,250
is not but it's that's it really it's no

00:07:45,270 --> 00:07:49,139
it it's hard because of backward

00:07:47,250 --> 00:07:51,030
compatibility needs and we are slowly

00:07:49,139 --> 00:07:53,880
making things a little bit more coherent

00:07:51,030 --> 00:07:56,639
everyone releases the time trying to

00:07:53,880 --> 00:07:58,919
break as as little as possible it at any

00:07:56,639 --> 00:08:01,169
single step and hopefully providing

00:07:58,919 --> 00:08:04,380
incremental improvements so it's just

00:08:01,169 --> 00:08:06,810
it's a long process and we are trying to

00:08:04,380 --> 00:08:08,820
work with you know modulo sorts and

00:08:06,810 --> 00:08:11,190
maintain errs to you know add them

00:08:08,820 --> 00:08:12,810
evolve their module and proactively fix

00:08:11,190 --> 00:08:14,729
them because we can detect with canary

00:08:12,810 --> 00:08:16,560
we can detect that for example your

00:08:14,729 --> 00:08:18,479
block express or some something like

00:08:16,560 --> 00:08:20,310
that so we can go ahead and hit look

00:08:18,479 --> 00:08:22,469
we're going to break this so I'm sending

00:08:20,310 --> 00:08:24,810
you pull requests right now so it will

00:08:22,469 --> 00:08:27,990
pass so it will pass when not been you

00:08:24,810 --> 00:08:30,259
know node version is coming out so and

00:08:27,990 --> 00:08:33,149
we've done this several times already so

00:08:30,259 --> 00:08:35,039
if you have a sir some oak poplar my

00:08:33,149 --> 00:08:37,140
open source modules that is not included

00:08:35,039 --> 00:08:38,459
in Canada in the gold mile please reach

00:08:37,140 --> 00:08:40,890
out if there is a model that we have

00:08:38,459 --> 00:08:42,899
broken for whatever reason that we are

00:08:40,890 --> 00:08:46,820
not it has not been patched when the new

00:08:42,899 --> 00:08:46,820
notary's comes out please contact us

00:08:46,960 --> 00:08:52,810
I think one other thing speaking to the

00:08:49,690 --> 00:08:54,460
workbook could we do better I think this

00:08:52,810 --> 00:08:57,900
has worked for some modules and notice

00:08:54,460 --> 00:09:00,400
just kind of code documentation and

00:08:57,900 --> 00:09:01,650
documenting each cases and and why

00:09:00,400 --> 00:09:04,510
certain things are done the way they are

00:09:01,650 --> 00:09:08,140
I think in HTTP and streams that

00:09:04,510 --> 00:09:10,870
sometimes isn't quite isn't quite the

00:09:08,140 --> 00:09:12,520
case so I think in general like if

00:09:10,870 --> 00:09:13,840
people are trying to contribute I mean

00:09:12,520 --> 00:09:15,610
if you're kind of browsing through code

00:09:13,840 --> 00:09:17,950
and you kind of understand why something

00:09:15,610 --> 00:09:20,470
is away there's documenting that I think

00:09:17,950 --> 00:09:21,910
Apr just add comments it's gonna be

00:09:20,470 --> 00:09:23,290
helpful for future people who are trying

00:09:21,910 --> 00:09:26,170
to understand that same code which is

00:09:23,290 --> 00:09:28,840
very confusing yeah it sounds like a

00:09:26,170 --> 00:09:30,280
great idea so Anna the table mentioned

00:09:28,840 --> 00:09:31,780
contributors and one thing we've noticed

00:09:30,280 --> 00:09:33,490
may be seen a little bit of a slowdown

00:09:31,780 --> 00:09:36,430
in the growth of contributors do you

00:09:33,490 --> 00:09:39,100
think that's an issue um no no it's not

00:09:36,430 --> 00:09:41,290
an issue I like I think that really just

00:09:39,100 --> 00:09:43,750
reflects what material said earlier to

00:09:41,290 --> 00:09:45,910
like I think your first question and

00:09:43,750 --> 00:09:50,170
that is that no just has become a lot

00:09:45,910 --> 00:09:51,670
more mature like I like I know our

00:09:50,170 --> 00:09:54,160
contribution rate and the rate at which

00:09:51,670 --> 00:09:57,850
we add new collaborators I think it's

00:09:54,160 --> 00:10:00,250
like maybe I don't know 70 80 percent of

00:09:57,850 --> 00:10:01,810
what was two years ago or so so it's

00:10:00,250 --> 00:10:04,660
slowed down a bit but that's really just

00:10:01,810 --> 00:10:06,850
a sign that ya notice mature and maybe

00:10:04,660 --> 00:10:11,110
there's fewer low-hanging fruit you know

00:10:06,850 --> 00:10:13,150
hanging around and and that it takes

00:10:11,110 --> 00:10:16,720
because of that it takes more commitment

00:10:13,150 --> 00:10:19,720
to contribute to note on a regular basis

00:10:16,720 --> 00:10:21,780
like and I totally said like some areas

00:10:19,720 --> 00:10:25,180
where we actually need folks the most

00:10:21,780 --> 00:10:28,870
require a lot of time working your way

00:10:25,180 --> 00:10:35,530
into it like HTTP our screams or TLS or

00:10:28,870 --> 00:10:37,750
stuff like that even old code say I yeah

00:10:35,530 --> 00:10:39,340
I don't see it as an issue and I think

00:10:37,750 --> 00:10:42,610
we're still helpfully growing like

00:10:39,340 --> 00:10:44,590
there's still I don't know like about a

00:10:42,610 --> 00:10:46,150
handful of people that you know are on

00:10:44,590 --> 00:10:48,970
the path to becoming collaborators I

00:10:46,150 --> 00:10:51,250
would say so yeah it's not a slowdown

00:10:48,970 --> 00:10:52,960
yeah I mean I when I look at and try and

00:10:51,250 --> 00:10:54,640
keep on top of the the github

00:10:52,960 --> 00:10:56,080
notifications it's really hard to

00:10:54,640 --> 00:10:58,540
believe that there's any sort of slow

00:10:56,080 --> 00:11:00,250
down there's so much going on and so

00:10:58,540 --> 00:11:02,140
much stuff coming in that I

00:11:00,250 --> 00:11:03,910
I agree 100% that it's it's really just

00:11:02,140 --> 00:11:07,000
you know we're reaching a certain point

00:11:03,910 --> 00:11:08,380
in our maturity and we need to continue

00:11:07,000 --> 00:11:10,510
to focus on making it as easy as

00:11:08,380 --> 00:11:12,550
possible for people to join but it is

00:11:10,510 --> 00:11:14,620
gonna get a little harder and just with

00:11:12,550 --> 00:11:16,960
so much going on it's not necessarily an

00:11:14,620 --> 00:11:20,620
issue yep

00:11:16,960 --> 00:11:22,570
so now that we've talked about the node

00:11:20,620 --> 00:11:24,160
that sort of node core ecosystem what do

00:11:22,570 --> 00:11:27,910
you Gabriel what do you think how is the

00:11:24,160 --> 00:11:30,640
the overall ecosystem do so the the

00:11:27,910 --> 00:11:32,020
other day I think the a person from NPM

00:11:30,640 --> 00:11:35,140
mentioned in their talk that there are

00:11:32,020 --> 00:11:40,930
what 58 billion downloads from NPM a

00:11:35,140 --> 00:11:46,570
month or so sorry 58 billion yeah with a

00:11:40,930 --> 00:11:49,540
B as in Bravo so so I given that I

00:11:46,570 --> 00:11:54,070
suspect that the ecosystem isn't exactly

00:11:49,540 --> 00:11:55,900
stagnating and given given that I work

00:11:54,070 --> 00:11:58,060
mostly with with native add-ons I can

00:11:55,900 --> 00:12:00,190
tell you that on the native add-on front

00:11:58,060 --> 00:12:02,770
we're also making great progress to to

00:12:00,190 --> 00:12:07,930
make it more like the JavaScript add-on

00:12:02,770 --> 00:12:11,020
so in the last year I think know that on

00:12:07,930 --> 00:12:14,920
API alone which is just the C++ inline

00:12:11,020 --> 00:12:19,000
wrapper library for for an API went up

00:12:14,920 --> 00:12:21,010
to like 300,000 downloads a week so and

00:12:19,000 --> 00:12:23,920
that's not entirely reflective of all

00:12:21,010 --> 00:12:25,900
the native add-ons out there because you

00:12:23,920 --> 00:12:28,210
know a lot of people they ship pre-built

00:12:25,900 --> 00:12:29,800
binaries and so you know they the

00:12:28,210 --> 00:12:31,300
developer downloads once and then the

00:12:29,800 --> 00:12:36,430
bynars get downloaded who knows how many

00:12:31,300 --> 00:12:40,050
times so we have rough figures the the

00:12:36,430 --> 00:12:42,070
maintainer of level down did a great job

00:12:40,050 --> 00:12:44,860
compiling all the native add-ons

00:12:42,070 --> 00:12:46,450
recently and and breaking them down by

00:12:44,860 --> 00:12:47,740
which ones are moved to an API and which

00:12:46,450 --> 00:12:50,950
ones are didn't that's that's a great

00:12:47,740 --> 00:12:53,650
help for us and and in the new year when

00:12:50,950 --> 00:12:56,610
when when node 8 goes out goes out of

00:12:53,650 --> 00:12:59,680
maintenance we have a lot more sort of

00:12:56,610 --> 00:13:02,380
we have like fairly big modules like I

00:12:59,680 --> 00:13:05,470
think note SAS is sort of poised to move

00:13:02,380 --> 00:13:07,570
to an API and they've just been waiting

00:13:05,470 --> 00:13:11,200
for no date to sort of drop off the map

00:13:07,570 --> 00:13:13,470
and so that's gonna add I suspect a few

00:13:11,200 --> 00:13:18,610
more downloads a week

00:13:13,470 --> 00:13:20,770
- to our tally and so so yeah an API

00:13:18,610 --> 00:13:23,290
adoption is going along well and I've

00:13:20,770 --> 00:13:25,870
actually heard from Mattel that in one

00:13:23,290 --> 00:13:27,190
case I forget which module yeah level

00:13:25,870 --> 00:13:28,990
down they did they actually had a

00:13:27,190 --> 00:13:32,110
performance boost by moving from from

00:13:28,990 --> 00:13:36,750
nan to an API so that's great to hear

00:13:32,110 --> 00:13:40,930
so I I have no worries I suspect about

00:13:36,750 --> 00:13:45,490
either the JavaScript ecosystem or the

00:13:40,930 --> 00:13:46,720
native one so I know that you know

00:13:45,490 --> 00:13:48,550
because of all the value that that

00:13:46,720 --> 00:13:50,410
because system is delivering there does

00:13:48,550 --> 00:13:51,820
seem to be some discussion about like

00:13:50,410 --> 00:13:53,290
how do we get funding how do we get

00:13:51,820 --> 00:13:54,790
support so I think we have a few things

00:13:53,290 --> 00:13:58,090
that like that we're working on through

00:13:54,790 --> 00:13:59,680
that PAC package maintenance effort in

00:13:58,090 --> 00:14:01,390
terms of like helping the ecosystem but

00:13:59,680 --> 00:14:06,480
it still seems to be pretty healthy and

00:14:01,390 --> 00:14:10,450
you know it's growing and doing well um

00:14:06,480 --> 00:14:11,800
so let's move on to you know new

00:14:10,450 --> 00:14:14,860
features because we're all interested in

00:14:11,800 --> 00:14:17,350
what's going on in node core so Anatoly

00:14:14,860 --> 00:14:20,860
what's your favorite new feature

00:14:17,350 --> 00:14:23,050
yes modules I mean I come from front and

00:14:20,860 --> 00:14:25,480
back around and don't really do that

00:14:23,050 --> 00:14:27,100
anymore but yes modules I've been around

00:14:25,480 --> 00:14:29,590
forever and tools like babel and

00:14:27,100 --> 00:14:31,120
typescript and I think a lot of people

00:14:29,590 --> 00:14:35,050
are familiar with them in some way but

00:14:31,120 --> 00:14:36,370
they're now I'm flag and note they're a

00:14:35,050 --> 00:14:38,530
little different than you might have

00:14:36,370 --> 00:14:41,140
been used to from kind of the previous

00:14:38,530 --> 00:14:43,030
implementations so I think it'd be fun

00:14:41,140 --> 00:14:44,860
if people played around with them give

00:14:43,030 --> 00:14:48,370
their feedback I know the modules team

00:14:44,860 --> 00:14:50,110
is always looking for feedback yeah I

00:14:48,370 --> 00:14:51,460
think we really should have a big shout

00:14:50,110 --> 00:14:53,770
out to the team who's worked on that

00:14:51,460 --> 00:14:55,900
because it's been a sort of a really big

00:14:53,770 --> 00:14:57,370
area with lots of different ideas and

00:14:55,900 --> 00:14:59,320
sort of to bring that into something

00:14:57,370 --> 00:15:01,680
that we actually got in is I think a

00:14:59,320 --> 00:15:04,680
pretty good pretty good accomplishment

00:15:01,680 --> 00:15:04,680
yeah

00:15:07,060 --> 00:15:14,330
so I know what's your favorite new

00:15:10,640 --> 00:15:15,800
feature I mean I'd like I don't think

00:15:14,330 --> 00:15:18,230
it's actually new at this point anymore

00:15:15,800 --> 00:15:20,420
but I I mean workers are still something

00:15:18,230 --> 00:15:22,640
that I'm excited about and proud of to

00:15:20,420 --> 00:15:24,590
be honest like I put a lot of work into

00:15:22,640 --> 00:15:27,380
that making that happen

00:15:24,590 --> 00:15:30,350
and I mean it's only been officially

00:15:27,380 --> 00:15:32,900
stable since like September or August I

00:15:30,350 --> 00:15:35,000
think something something like that yeah

00:15:32,900 --> 00:15:36,740
and I mean like it has like there

00:15:35,000 --> 00:15:38,930
haven't been many changes up until that

00:15:36,740 --> 00:15:41,810
point so it's almost been stable like

00:15:38,930 --> 00:15:43,850
the factor for a year or so and people

00:15:41,810 --> 00:15:45,200
are starting to use it and people are

00:15:43,850 --> 00:15:48,290
actually starting to use it what we

00:15:45,200 --> 00:15:50,210
intend to people to use it for like like

00:15:48,290 --> 00:15:51,230
we know when we started working workers

00:15:50,210 --> 00:15:53,480
who are kind of worried that people

00:15:51,230 --> 00:15:57,080
might use it like basically do the same

00:15:53,480 --> 00:15:58,940
as cluster like put IO onto multiple

00:15:57,080 --> 00:16:00,920
threats and try to do multi-threading

00:15:58,940 --> 00:16:04,400
like the classical way they you know you

00:16:00,920 --> 00:16:06,710
did before note I don't like people are

00:16:04,400 --> 00:16:08,810
actually using it for CPU intensive

00:16:06,710 --> 00:16:10,280
tasks that have to be moved off the main

00:16:08,810 --> 00:16:10,790
thread which is exactly what they are

00:16:10,280 --> 00:16:13,760
there for

00:16:10,790 --> 00:16:15,140
and there's NPM libraries evolving

00:16:13,760 --> 00:16:18,860
around the feature and that's just

00:16:15,140 --> 00:16:20,000
really cool to see happening yeah that

00:16:18,860 --> 00:16:21,860
was definitely one of the ones I'm

00:16:20,000 --> 00:16:23,390
really excited about and just to see all

00:16:21,860 --> 00:16:25,610
the different ways people are gonna use

00:16:23,390 --> 00:16:28,580
it and I think hopefully it gives nodes

00:16:25,610 --> 00:16:29,810
some of some other use cases that people

00:16:28,580 --> 00:16:33,010
are going to be able to use it for us

00:16:29,810 --> 00:16:34,760
though really important than that front

00:16:33,010 --> 00:16:38,630
Gabriel how about you what's your

00:16:34,760 --> 00:16:43,520
favorite I I will surprise you greatly

00:16:38,630 --> 00:16:45,530
it's an API but so so I mean an API

00:16:43,520 --> 00:16:48,140
isn't a new feature right I mean it's I

00:16:45,530 --> 00:16:48,980
think it's around in stable last year

00:16:48,140 --> 00:16:50,960
right

00:16:48,980 --> 00:16:53,480
this year though we we've added some

00:16:50,960 --> 00:16:55,660
stuff to it that that actually does a

00:16:53,480 --> 00:16:58,940
lot to to support the new workers

00:16:55,660 --> 00:17:00,770
because something really strange has

00:16:58,940 --> 00:17:04,400
happened because of worker threads right

00:17:00,770 --> 00:17:06,440
so so native add-ons and API are

00:17:04,400 --> 00:17:08,000
otherwise before worker threads were

00:17:06,440 --> 00:17:09,860
basically Singleton's right the know

00:17:08,000 --> 00:17:11,750
process starts sooner or later the

00:17:09,860 --> 00:17:14,030
application load some native add-ons and

00:17:11,750 --> 00:17:16,220
then the application runs quote-unquote

00:17:14,030 --> 00:17:17,150
forever and then the process quits right

00:17:16,220 --> 00:17:21,110
there at

00:17:17,150 --> 00:17:22,670
at forever it quits right but the the

00:17:21,110 --> 00:17:25,580
native add-ons they had absolutely no

00:17:22,670 --> 00:17:27,410
motivation to to to clean up right

00:17:25,580 --> 00:17:29,450
because you know the Colonel's gonna

00:17:27,410 --> 00:17:31,370
clean up the process anyway so why clean

00:17:29,450 --> 00:17:33,440
up right there's there's not that much

00:17:31,370 --> 00:17:34,850
reason I mean you know if you if you if

00:17:33,440 --> 00:17:36,320
you have things like you know database

00:17:34,850 --> 00:17:38,240
handles going in and out in and out you

00:17:36,320 --> 00:17:40,490
might want to clean those up but but

00:17:38,240 --> 00:17:43,070
there's a lot of like static module data

00:17:40,490 --> 00:17:44,930
that's just not necessary to clean up

00:17:43,070 --> 00:17:47,000
because you know it's like global static

00:17:44,930 --> 00:17:49,490
and call it a day right so all that

00:17:47,000 --> 00:17:52,850
changes with with with workers because

00:17:49,490 --> 00:17:55,610
now you essentially have node instances

00:17:52,850 --> 00:17:57,290
going on and off on and off on and off

00:17:55,610 --> 00:17:58,880
you know running what is potentially an

00:17:57,290 --> 00:18:01,220
entire application with who knows how

00:17:58,880 --> 00:18:03,020
many native add-ons and then this rent

00:18:01,220 --> 00:18:04,250
quits but the process is still there so

00:18:03,020 --> 00:18:07,550
there's nobody cleaning up that memory

00:18:04,250 --> 00:18:09,200
right the kernel is still waiting for

00:18:07,550 --> 00:18:11,960
the process to quit and that doesn't

00:18:09,200 --> 00:18:16,310
quit right so so what what became global

00:18:11,960 --> 00:18:18,500
Singleton's had to become essentially

00:18:16,310 --> 00:18:20,150
self-contained and properly lifecycle

00:18:18,500 --> 00:18:22,610
managed objects and that's that's a huge

00:18:20,150 --> 00:18:25,130
shift right because we're talking about

00:18:22,610 --> 00:18:27,380
like thirty percent of the of the of the

00:18:25,130 --> 00:18:30,170
ecosystem that has to now all of a

00:18:27,380 --> 00:18:32,600
sudden whoa Nelly now this thing's on

00:18:30,170 --> 00:18:34,190
this thing's static data now I all of a

00:18:32,600 --> 00:18:35,990
sudden got to move it because it has to

00:18:34,190 --> 00:18:38,090
be threat safe and and and it has to be

00:18:35,990 --> 00:18:39,770
cleaned up and all my reference is all

00:18:38,090 --> 00:18:41,390
my wrapped objects what happens if they

00:18:39,770 --> 00:18:44,870
don't get garbage collected before the

00:18:41,390 --> 00:18:47,030
environment quits right and and so so a

00:18:44,870 --> 00:18:49,520
lot of the features for an API four and

00:18:47,030 --> 00:18:52,880
five which we released since last year

00:18:49,520 --> 00:18:54,590
are about that so we added well and I

00:18:52,880 --> 00:18:56,660
added environment cleanup hooks

00:18:54,590 --> 00:19:00,740
first to node and then we expose them

00:18:56,660 --> 00:19:03,020
over an API then then we added something

00:19:00,740 --> 00:19:05,630
that's similar but not exactly the same

00:19:03,020 --> 00:19:07,730
which is the which is the instance data

00:19:05,630 --> 00:19:09,650
which makes it really easy for any

00:19:07,730 --> 00:19:11,360
native add-on to just say you know

00:19:09,650 --> 00:19:13,010
during in it you know allocate the

00:19:11,360 --> 00:19:14,690
status stick it there and here's the

00:19:13,010 --> 00:19:16,730
thing with which to free it and then

00:19:14,690 --> 00:19:19,670
when the environment quits it calls the

00:19:16,730 --> 00:19:20,930
freeing thing so and and at any point in

00:19:19,670 --> 00:19:22,880
the add-on you can just say give me that

00:19:20,930 --> 00:19:25,640
data right so you don't need to like

00:19:22,880 --> 00:19:27,950
like with with with hooks you need to

00:19:25,640 --> 00:19:29,660
sort of yes you have a pointer now no

00:19:27,950 --> 00:19:30,890
more static data yeh and you have a way

00:19:29,660 --> 00:19:32,240
to free it but you still have

00:19:30,890 --> 00:19:34,610
sort of thread it through through all

00:19:32,240 --> 00:19:37,520
your async workers and thread-safe

00:19:34,610 --> 00:19:39,440
functions and and all your bindings and

00:19:37,520 --> 00:19:40,730
stuff like that with with instance data

00:19:39,440 --> 00:19:42,920
you don't need to thread anything you

00:19:40,730 --> 00:19:45,470
can just get it very cheaply from from

00:19:42,920 --> 00:19:47,120
the environment and and it's gonna be

00:19:45,470 --> 00:19:49,130
unique to your module right to your

00:19:47,120 --> 00:19:51,530
module instance in fact so if you have

00:19:49,130 --> 00:19:54,440
3d instances of the module each of one

00:19:51,530 --> 00:19:56,870
get a different one so so these are some

00:19:54,440 --> 00:19:58,910
of the features for an API and then I

00:19:56,870 --> 00:20:00,380
mentioned threats a function in passing

00:19:58,910 --> 00:20:03,650
that's that's another one that that was

00:20:00,380 --> 00:20:06,919
that was really in demand because people

00:20:03,650 --> 00:20:07,760
had their own native libraries out there

00:20:06,919 --> 00:20:10,640
that were doing

00:20:07,760 --> 00:20:12,860
threading and so forth and they they

00:20:10,640 --> 00:20:15,049
tried to write bindings for no GS to

00:20:12,860 --> 00:20:17,690
expose all of this to to people who

00:20:15,049 --> 00:20:20,169
write JavaScript and and the first well

00:20:17,690 --> 00:20:22,940
no the second thing they encounter is

00:20:20,169 --> 00:20:26,030
you know I can't call into the engine

00:20:22,940 --> 00:20:27,320
from another thread right and so so how

00:20:26,030 --> 00:20:30,440
do I make that easy right

00:20:27,320 --> 00:20:33,730
and so basically threats a function sort

00:20:30,440 --> 00:20:36,410
of bundles a bunch of utilities

00:20:33,730 --> 00:20:40,309
threading utilities provided by libuv

00:20:36,410 --> 00:20:42,740
together to give you the the abstraction

00:20:40,309 --> 00:20:44,240
of just making a function call into

00:20:42,740 --> 00:20:45,679
JavaScript as if it were on the same

00:20:44,240 --> 00:20:47,929
thread but now it's okay because it's

00:20:45,679 --> 00:20:50,000
thread safe right so you call into

00:20:47,929 --> 00:20:51,380
JavaScript and and you can even receive

00:20:50,000 --> 00:20:54,140
a response back but of course it's all

00:20:51,380 --> 00:20:55,520
asynchronous because it has to be so so

00:20:54,140 --> 00:20:59,270
that's that's another very cool feature

00:20:55,520 --> 00:21:01,520
that I've found that people are using

00:20:59,270 --> 00:21:09,260
and filing lots of bugs about which is

00:21:01,520 --> 00:21:11,120
great well you probably know already to

00:21:09,260 --> 00:21:14,000
some extent it's not news to start

00:21:11,120 --> 00:21:17,660
something still not new still but it's

00:21:14,000 --> 00:21:19,790
it's sync iterators I did a big talk

00:21:17,660 --> 00:21:22,480
yesterday about that so I don't know

00:21:19,790 --> 00:21:28,880
maybe you watch that if not this YouTube

00:21:22,480 --> 00:21:31,850
and I think it's it's also many problems

00:21:28,880 --> 00:21:33,440
that people are facing with using

00:21:31,850 --> 00:21:35,200
streams and nodejs for a lot of cases

00:21:33,440 --> 00:21:38,150
and you should probably know more about

00:21:35,200 --> 00:21:41,179
this new primitive that is available in

00:21:38,150 --> 00:21:42,730
the language consider that from January

00:21:41,179 --> 00:21:45,550
all

00:21:42,730 --> 00:21:49,450
active LTS lines of not yes will ever

00:21:45,550 --> 00:21:51,220
sink iterators so essentially we you can

00:21:49,450 --> 00:21:52,720
actually ship a sink a traitor's you use

00:21:51,220 --> 00:21:54,940
a sink iterator so not supported lines

00:21:52,720 --> 00:21:57,190
so there's no real reason for not to use

00:21:54,940 --> 00:21:58,360
them everywhere to some extent so it's

00:21:57,190 --> 00:22:01,690
pretty cool

00:21:58,360 --> 00:22:04,630
another thing that a another thing that

00:22:01,690 --> 00:22:07,330
it has been happening in the last in the

00:22:04,630 --> 00:22:12,280
last while is we are making some

00:22:07,330 --> 00:22:14,620
progress on Minh handle rejection

00:22:12,280 --> 00:22:17,040
problems so I don't know how many of you

00:22:14,620 --> 00:22:23,230
are familiar with and handle rejections

00:22:17,040 --> 00:22:26,320
hopefully it's essentially the core part

00:22:23,230 --> 00:22:27,580
of this it's just summarized because

00:22:26,320 --> 00:22:29,200
it's a very long topic very long

00:22:27,580 --> 00:22:31,420
discussion like what I'm talking about a

00:22:29,200 --> 00:22:32,980
hundred plus comments on github issues

00:22:31,420 --> 00:22:39,490
every single time this thing has been

00:22:32,980 --> 00:22:42,010
open so or you know order of magnitude

00:22:39,490 --> 00:22:44,170
after that yeah it's like thousand

00:22:42,010 --> 00:22:46,990
comments yeah thousand comments like for

00:22:44,170 --> 00:22:50,440
every single github issues and the key

00:22:46,990 --> 00:22:52,480
part there is what happens when your

00:22:50,440 --> 00:22:54,760
prom is rejects and there is nobody

00:22:52,480 --> 00:22:56,080
listening for it no nobody are touching

00:22:54,760 --> 00:22:58,180
a calendar what should be the default

00:22:56,080 --> 00:23:00,130
behavior how node should behave and so

00:22:58,180 --> 00:23:01,810
on and so forth to be about in some

00:23:00,130 --> 00:23:03,010
flexi node to introduce a strict mode

00:23:01,810 --> 00:23:06,250
which will actually make node crash

00:23:03,010 --> 00:23:08,530
which I personally think it's the right

00:23:06,250 --> 00:23:11,560
thing to do and a lot of other people do

00:23:08,530 --> 00:23:14,710
but not everybody so you know long long

00:23:11,560 --> 00:23:17,710
story short says all of that has been

00:23:14,710 --> 00:23:19,510
making some progress I've recently

00:23:17,710 --> 00:23:20,800
landed that PR at I'd be working for six

00:23:19,510 --> 00:23:22,090
months you know when you want a PR

00:23:20,800 --> 00:23:26,920
working for six months you're actually

00:23:22,090 --> 00:23:29,950
quite happy and that basically allow you

00:23:26,920 --> 00:23:33,490
to capture the rejections that happen

00:23:29,950 --> 00:23:35,260
inside event emitters and you know have

00:23:33,490 --> 00:23:37,750
them actually do the right thing for

00:23:35,260 --> 00:23:39,730
example this try a stream or close an

00:23:37,750 --> 00:23:43,090
HTTP request or so on and so forth so

00:23:39,730 --> 00:23:47,980
it's a might be get a little bit safer

00:23:43,090 --> 00:23:49,990
to not crash on you know an hundred

00:23:47,980 --> 00:23:52,460
rejections by default but you should

00:23:49,990 --> 00:23:54,840
really you should

00:23:52,460 --> 00:23:56,820
now I just want to add in my two cents

00:23:54,840 --> 00:23:58,560
that landing the full

00:23:56,820 --> 00:24:00,600
internationalization support by default

00:23:58,560 --> 00:24:02,970
was a good one one of my favorites where

00:24:00,600 --> 00:24:04,860
now people you know across the world can

00:24:02,970 --> 00:24:07,740
working on their own languages a bit

00:24:04,860 --> 00:24:11,270
more easily so at this point we want to

00:24:07,740 --> 00:24:11,270
open it up to questions from the floor

00:24:12,800 --> 00:24:17,640
it includes I see full ICU so it

00:24:15,450 --> 00:24:20,850
includes the full ICU data by default so

00:24:17,640 --> 00:24:22,380
if you use the ICU api's before by

00:24:20,850 --> 00:24:24,480
default you would only get English and

00:24:22,380 --> 00:24:25,740
you would have to take extra steps to be

00:24:24,480 --> 00:24:28,980
able to get the data for those other

00:24:25,740 --> 00:24:30,450
languages now it comes bundled in and

00:24:28,980 --> 00:24:31,830
all the data for all the languages is

00:24:30,450 --> 00:24:34,110
there so if you're converting currencies

00:24:31,830 --> 00:24:35,460
or you know it's not you know you know

00:24:34,110 --> 00:24:37,890
you still got to internationalize your

00:24:35,460 --> 00:24:39,450
text but the support for the things that

00:24:37,890 --> 00:24:44,970
vary between languages is there by

00:24:39,450 --> 00:24:47,700
default for the dividend so cities so

00:24:44,970 --> 00:24:51,090
that this is the reason no such thing as

00:24:47,700 --> 00:24:53,610
done in software okay like it's there's

00:24:51,090 --> 00:24:55,920
always bugs always new feature the

00:24:53,610 --> 00:24:58,500
JavaScript language itself it's evolving

00:24:55,920 --> 00:25:01,440
its evolving rapidly so this new feature

00:24:58,500 --> 00:25:06,540
being added new paradigms and so on and

00:25:01,440 --> 00:25:07,950
so forth I think one of the key one of

00:25:06,540 --> 00:25:12,620
the key topics for the next few years

00:25:07,950 --> 00:25:16,040
would be to to some extent try to

00:25:12,620 --> 00:25:21,000
reconcile nodejs with the largest

00:25:16,040 --> 00:25:23,040
front-end and web community so there is

00:25:21,000 --> 00:25:25,980
some quirks in making code that can run

00:25:23,040 --> 00:25:28,110
on both node and the browser so that for

00:25:25,980 --> 00:25:32,070
me that is that is a challenge and this

00:25:28,110 --> 00:25:33,240
was a lot of focus will go and on top of

00:25:32,070 --> 00:25:36,000
that there is new things that are

00:25:33,240 --> 00:25:42,240
happening the ecosystem so for example

00:25:36,000 --> 00:25:44,340
there is the quick-quick and HTTP 3 is

00:25:42,240 --> 00:25:46,710
going to happen and it's happening

00:25:44,340 --> 00:25:48,950
already all over the in all over the

00:25:46,710 --> 00:25:51,870
industry so the big vendors are all

00:25:48,950 --> 00:25:54,890
implementing that so that is kind of

00:25:51,870 --> 00:26:01,770
that would be kind of the new thing and

00:25:54,890 --> 00:26:03,870
and so on overall no js' is doing well

00:26:01,770 --> 00:26:05,730
to some extent so it's there's a ton of

00:26:03,870 --> 00:26:08,910
work so if you want to get involved

00:26:05,730 --> 00:26:13,230
open issues so and 300 open protocol s

00:26:08,910 --> 00:26:15,540
so you know it's a however I think with

00:26:13,230 --> 00:26:17,040
the addition of off worker probably we

00:26:15,540 --> 00:26:20,940
have tackled most of the you know

00:26:17,040 --> 00:26:22,530
biggest challenges of bigger quadrants

00:26:20,940 --> 00:26:24,300
from note there's also lots of things

00:26:22,530 --> 00:26:27,570
that can be done for example to improve

00:26:24,300 --> 00:26:30,780
the performance of on on serverless

00:26:27,570 --> 00:26:32,340
environments so reducing cold start and

00:26:30,780 --> 00:26:35,130
other things it needs to be done inside

00:26:32,340 --> 00:26:39,240
the internals which might not be you

00:26:35,130 --> 00:26:41,400
know fancy like this is a lot of hard

00:26:39,240 --> 00:26:44,220
work to shelve off I don't know 50

00:26:41,400 --> 00:26:48,300
milliseconds or something but that is

00:26:44,220 --> 00:26:49,380
the cold start but you know we have ship

00:26:48,300 --> 00:26:57,270
we have done some of the work I don't

00:26:49,380 --> 00:26:58,470
know yeah like like so one thing that we

00:26:57,270 --> 00:27:00,150
always have to do is keep up with the

00:26:58,470 --> 00:27:02,370
language like mentor said it's not just

00:27:00,150 --> 00:27:04,500
that you know the language is evolving

00:27:02,370 --> 00:27:06,480
and we ship new v8 versions and we get

00:27:04,500 --> 00:27:08,900
new features but we also like we try to

00:27:06,480 --> 00:27:11,640
keep like integrating them with noches

00:27:08,900 --> 00:27:13,350
for example a single rater support and

00:27:11,640 --> 00:27:17,280
screams stuff like that that's gonna

00:27:13,350 --> 00:27:18,390
keep happening like like if there are

00:27:17,280 --> 00:27:20,910
some open questions like for example

00:27:18,390 --> 00:27:22,920
what exactly do we do with private

00:27:20,910 --> 00:27:24,870
properties when we're inspecting objects

00:27:22,920 --> 00:27:28,260
with consular log right

00:27:24,870 --> 00:27:29,700
these things get tricky and so yeah

00:27:28,260 --> 00:27:32,820
there's always a lot of work to also

00:27:29,700 --> 00:27:35,970
quick I mean that's a huge thing it's a

00:27:32,820 --> 00:27:37,410
huge addition to the code base too and

00:27:35,970 --> 00:27:39,450
it's cool to be working on that and it's

00:27:37,410 --> 00:27:40,950
cool to see that happen and these things

00:27:39,450 --> 00:27:43,100
are also gonna keep happening in the

00:27:40,950 --> 00:27:43,100
future

00:27:47,490 --> 00:27:54,390
so for coming from the hardware side

00:27:51,000 --> 00:27:56,880
what what I'm seeing is that we have

00:27:54,390 --> 00:27:59,220
nowadays like in in the whole industry

00:27:56,880 --> 00:28:01,350
we have like a couple of very

00:27:59,220 --> 00:28:04,529
well-established algorithms right like

00:28:01,350 --> 00:28:07,100
we have image processing we have AI we

00:28:04,529 --> 00:28:12,330
have compression encryption and hashing

00:28:07,100 --> 00:28:14,130
these kinds of things and the CPU is not

00:28:12,330 --> 00:28:16,320
always the only thing that they run on

00:28:14,130 --> 00:28:19,980
include increasingly there are all kinds

00:28:16,320 --> 00:28:21,419
of specialized hardware you know there's

00:28:19,980 --> 00:28:22,850
basically chips out there that do one

00:28:21,419 --> 00:28:25,740
thing and one thing well right I mean

00:28:22,850 --> 00:28:28,169
GPU is generic in the sense that it can

00:28:25,740 --> 00:28:29,940
do a few things not as many as a CPU but

00:28:28,169 --> 00:28:33,230
that's just an example right there there

00:28:29,940 --> 00:28:36,950
are FPGA is out there there are specific

00:28:33,230 --> 00:28:39,240
chips just for AI right and and

00:28:36,950 --> 00:28:41,610
especially for for these standard

00:28:39,240 --> 00:28:43,380
algorithms node has them all right like

00:28:41,610 --> 00:28:46,580
we have we have open SSL we have Zed

00:28:43,380 --> 00:28:49,169
live you know these things so you know

00:28:46,580 --> 00:28:51,029
integrating integrating I mean why

00:28:49,169 --> 00:28:53,490
wouldn't you want like you know

00:28:51,029 --> 00:28:55,380
compression that's five times as fast as

00:28:53,490 --> 00:28:58,169
what what Zed live can do right now we

00:28:55,380 --> 00:29:00,000
know J yes right you know if there is

00:28:58,169 --> 00:29:01,590
Hardware out there that can do it or or

00:29:00,000 --> 00:29:04,799
if there is a better implementation out

00:29:01,590 --> 00:29:06,899
there right so basically what I'm seeing

00:29:04,799 --> 00:29:10,070
is that there's this heterogeneous sort

00:29:06,899 --> 00:29:13,590
of computing environment slowly kind of

00:29:10,070 --> 00:29:17,669
making its way through different cloud

00:29:13,590 --> 00:29:20,220
service providers and so forth and the

00:29:17,669 --> 00:29:21,929
runtimes and and all the software that's

00:29:20,220 --> 00:29:25,020
running on them and no J's being a major

00:29:21,929 --> 00:29:26,909
one there could benefit from this right

00:29:25,020 --> 00:29:29,820
but it takes a lot of integration work

00:29:26,909 --> 00:29:32,760
and and and some of the some of the the

00:29:29,820 --> 00:29:34,770
ways in which these these capabilities

00:29:32,760 --> 00:29:36,539
can be accessed are fundamentally

00:29:34,770 --> 00:29:38,159
different from just you know you call

00:29:36,539 --> 00:29:40,830
the function and it it does its thing

00:29:38,159 --> 00:29:42,450
really well you know so some some of the

00:29:40,830 --> 00:29:44,190
things are asynchronous by default so

00:29:42,450 --> 00:29:45,690
you don't no longer need to shove them

00:29:44,190 --> 00:29:47,490
off on a thread to make them

00:29:45,690 --> 00:29:49,649
asynchronous but that's a completely

00:29:47,490 --> 00:29:52,200
different paradigm now and so so

00:29:49,649 --> 00:29:54,840
integration is not always it's not

00:29:52,200 --> 00:29:57,120
always easy and and and you know

00:29:54,840 --> 00:29:59,279
figuring out do can I do this do I have

00:29:57,120 --> 00:30:01,170
the hardware for it in this process you

00:29:59,279 --> 00:30:03,360
know if you wake up on a machine

00:30:01,170 --> 00:30:05,180
has it versus a machine that doesn't you

00:30:03,360 --> 00:30:07,620
know is it architecture specific is it

00:30:05,180 --> 00:30:09,090
platform specific what is it right and

00:30:07,620 --> 00:30:10,860
you got to do all this at runtime

00:30:09,090 --> 00:30:12,090
without making too many of statements

00:30:10,860 --> 00:30:14,070
which increase your startup performance

00:30:12,090 --> 00:30:16,680
right or decrease your startup

00:30:14,070 --> 00:30:18,870
performance so so I this is this is a

00:30:16,680 --> 00:30:20,700
little fuzzier than then specific

00:30:18,870 --> 00:30:22,500
features that that need to land and so

00:30:20,700 --> 00:30:27,180
forth but I think it's a it's a trend

00:30:22,500 --> 00:30:29,550
and and I I'm personally very interested

00:30:27,180 --> 00:30:32,400
in in how this is gonna play out and and

00:30:29,550 --> 00:30:34,890
how we're gonna you know always make the

00:30:32,400 --> 00:30:36,930
best of the hardware that that we run on

00:30:34,890 --> 00:30:38,550
you know and and find the features that

00:30:36,930 --> 00:30:40,020
are available it's I think about it it's

00:30:38,550 --> 00:30:41,790
like feature detection right there it's

00:30:40,020 --> 00:30:44,130
not just in the browser anymore and

00:30:41,790 --> 00:30:45,390
you're detecting you know not not

00:30:44,130 --> 00:30:46,830
browser features you're actually

00:30:45,390 --> 00:30:49,730
detecting Hardware feature so that's

00:30:46,830 --> 00:30:52,770
kind of a cool thing on the server side

00:30:49,730 --> 00:30:53,880
okay so we're we're at time but I might

00:30:52,770 --> 00:30:56,640
try and squeeze in just one more

00:30:53,880 --> 00:30:57,930
question since we only had one and so we

00:30:56,640 --> 00:30:59,520
won't feel bad if you have to sneak out

00:30:57,930 --> 00:31:02,190
for your next talk but we'll take one

00:30:59,520 --> 00:31:04,140
more I think we had one yeah hi guys I'm

00:31:02,190 --> 00:31:05,700
Jamie Michael talked yesterday about the

00:31:04,140 --> 00:31:07,320
new maintenance process that you're

00:31:05,700 --> 00:31:08,340
putting into place or the community's

00:31:07,320 --> 00:31:09,960
putting into place and I'm curious how

00:31:08,340 --> 00:31:11,580
does that change the TSC I mean if I

00:31:09,960 --> 00:31:12,690
mean maybe with all those new chips this

00:31:11,580 --> 00:31:14,550
isn't true but if there's some kind of

00:31:12,690 --> 00:31:16,350
asymptotic drop off after a while and

00:31:14,550 --> 00:31:17,880
things stabilize you have you know fewer

00:31:16,350 --> 00:31:20,180
feature requests and more people saying

00:31:17,880 --> 00:31:21,860
help help I thought I can't get up that

00:31:20,180 --> 00:31:24,240
prioritizes the maintenance process

00:31:21,860 --> 00:31:26,340
presumably and I'm just wondering I mean

00:31:24,240 --> 00:31:27,450
do we you oh it would always be at ESC

00:31:26,340 --> 00:31:29,040
and will always be different than

00:31:27,450 --> 00:31:31,380
maintenance people or does it change

00:31:29,040 --> 00:31:33,120
over time or who knows how do you deal

00:31:31,380 --> 00:31:40,140
with that maturity in terms of this

00:31:33,120 --> 00:31:42,720
process talking about is the work in the

00:31:40,140 --> 00:31:43,980
package maintenance group to try and oh

00:31:42,720 --> 00:31:46,200
yeah that's right I don't have the mic

00:31:43,980 --> 00:31:47,820
sorry the the maintenance process he's

00:31:46,200 --> 00:31:49,110
talking about is the work in the package

00:31:47,820 --> 00:31:52,110
maintenance group to try and figure out

00:31:49,110 --> 00:31:53,250
how we work with the the overall

00:31:52,110 --> 00:31:56,100
community to make things better for

00:31:53,250 --> 00:31:58,410
maintainer x' I personally see that as

00:31:56,100 --> 00:32:01,140
there's some good synergy with no but

00:31:58,410 --> 00:32:02,610
it's not it's it's kind of still its own

00:32:01,140 --> 00:32:04,110
its own thing like so I don't think

00:32:02,610 --> 00:32:06,390
personally that's gonna affect the TSC

00:32:04,110 --> 00:32:10,320
necessarily it's something that I think

00:32:06,390 --> 00:32:11,970
it's good to have the input and sort of

00:32:10,320 --> 00:32:13,320
the attention of the TC members to help

00:32:11,970 --> 00:32:14,880
me move it forward but I don't think

00:32:13,320 --> 00:32:20,030
there's going to be a direct impact in

00:32:14,880 --> 00:32:24,900
that front area other people the TSE is

00:32:20,030 --> 00:32:26,370
fairly focused on the you know node and

00:32:24,900 --> 00:32:29,130
the features that are related to that I

00:32:26,370 --> 00:32:30,630
mean obviously we think the the the rest

00:32:29,130 --> 00:32:34,980
of the ecosystem and those pieces are

00:32:30,630 --> 00:32:38,040
important but I don't think it needs to

00:32:34,980 --> 00:32:40,080
be a everything merges and is in one

00:32:38,040 --> 00:32:41,490
necessary one area it's we have

00:32:40,080 --> 00:32:43,050
strategic initiatives so it you know

00:32:41,490 --> 00:32:44,280
could fit into something like that where

00:32:43,050 --> 00:32:46,830
it's one of the areas we have a champion

00:32:44,280 --> 00:32:48,480
who pushes it forward but we have lots

00:32:46,830 --> 00:32:49,950
of those different things in this and as

00:32:48,480 --> 00:32:52,560
everybody on the panel mentioned there's

00:32:49,950 --> 00:32:54,540
lots going on and lots happening so you

00:32:52,560 --> 00:33:01,710
know I think we'll always have those

00:32:54,540 --> 00:33:05,760
different things and and I think so so

00:33:01,710 --> 00:33:07,860
you know we have we work very closely

00:33:05,760 --> 00:33:09,060
right with with with all the working

00:33:07,860 --> 00:33:12,780
groups that we have in our organization

00:33:09,060 --> 00:33:14,670
and I'm fairly certain that I don't

00:33:12,780 --> 00:33:17,880
think there is even one where we don't

00:33:14,670 --> 00:33:21,570
have at least one TSC member there so so

00:33:17,880 --> 00:33:23,460
you know between us we basically try to

00:33:21,570 --> 00:33:26,370
keep abreast of all the stuff that's

00:33:23,460 --> 00:33:29,310
going on right and and and it is it is

00:33:26,370 --> 00:33:31,440
of immediate impact to us you know so

00:33:29,310 --> 00:33:33,270
like I personally even even if I don't

00:33:31,440 --> 00:33:35,160
participate in all the discussions and

00:33:33,270 --> 00:33:38,490
stuff I read like most of the threads

00:33:35,160 --> 00:33:40,980
right so so it'll it'll set off alarm

00:33:38,490 --> 00:33:44,190
bells positive ones or negative ones if

00:33:40,980 --> 00:33:46,020
I see anything that that that catches my

00:33:44,190 --> 00:33:49,850
eye right and I think that's true for

00:33:46,020 --> 00:33:51,870
all of us right so so you know you know

00:33:49,850 --> 00:33:53,880
these these working groups they're

00:33:51,870 --> 00:33:56,460
they're not working in a vacuum right so

00:33:53,880 --> 00:33:58,470
it is all as far as I can tell a fairly

00:33:56,460 --> 00:34:01,050
cohesive project and and it is in our

00:33:58,470 --> 00:34:03,960
best interest to to to keep the

00:34:01,050 --> 00:34:06,930
ecosystem and the core aligned as much

00:34:03,960 --> 00:34:08,970
as possible especially now that we are

00:34:06,930 --> 00:34:13,590
such a mature project and and and that

00:34:08,970 --> 00:34:17,760
there is like you know real money right

00:34:13,590 --> 00:34:19,649
excuse me riding on us right so so you

00:34:17,760 --> 00:34:21,860
know we it's in our best interest to do

00:34:19,649 --> 00:34:21,860
this

00:34:23,619 --> 00:34:28,069
okay so thank you very much for coming

00:34:25,639 --> 00:34:29,480
we're we're and being patient as we went

00:34:28,069 --> 00:34:31,810
over a few minutes and also for getting

00:34:29,480 --> 00:34:33,719
up so early and coming to the first talk

00:34:31,810 --> 00:34:39,079
thank you very much

00:34:33,719 --> 00:34:39,079

YouTube URL: https://www.youtube.com/watch?v=SDZ4YMoxGH4


