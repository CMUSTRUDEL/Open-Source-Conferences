Title: The State of the Art in Localization - Eemeli Aro, Vincit
Publication date: 2020-05-11
Playlist: Node + JS Interactive 2019
Description: 
	The State of the Art in Localization - Eemeli Aro, Vincit
Speakers: Eemeli Aro
A review of the current tools, libraries and specifications available for localization and message formatting in JavaScript. Covering everything from framework-specific front-end libraries to server-side tools. What to take into account when selecting your own solutions, including integration with other languages and systems as well as the needs and expectations of translators. Noting in particular which early decisions are significant and hard to reverse later, and which are trivial to refactor later. Also briefly looking at where the current specification work is at, and where it might be going next.
Captions: 
	00:00:00,000 --> 00:00:10,250
hi everyone I'm Emily I work for a

00:00:05,910 --> 00:00:13,200
Finnish consulting company vincit and

00:00:10,250 --> 00:00:15,570
that gives me a little bit of our basis

00:00:13,200 --> 00:00:16,980
of why I'm a good guy to have talked

00:00:15,570 --> 00:00:19,199
about localization Finland is a

00:00:16,980 --> 00:00:21,779
bilingual country in case you didn't

00:00:19,199 --> 00:00:24,300
know and this means that we may be faced

00:00:21,779 --> 00:00:27,210
some localization issues a little bit

00:00:24,300 --> 00:00:33,120
quicker whenever we're doing anything

00:00:27,210 --> 00:00:35,070
then you might well on in most parts of

00:00:33,120 --> 00:00:38,780
the North American continent except here

00:00:35,070 --> 00:00:42,090
in Quebec won't bother policy yes yeah

00:00:38,780 --> 00:00:44,850
but yeah fundamentally the issue that I

00:00:42,090 --> 00:00:46,350
want to that that I that I end up

00:00:44,850 --> 00:00:49,440
spending a lot of the time that I work

00:00:46,350 --> 00:00:52,379
on open source everything is to try and

00:00:49,440 --> 00:00:57,420
find ways to make sure that this sort of

00:00:52,379 --> 00:00:59,399
thing doesn't happen this is something

00:00:57,420 --> 00:01:01,140
that I managed to dig up when actually

00:00:59,399 --> 00:01:02,760
putting the slides together for this and

00:01:01,140 --> 00:01:05,760
it is by far the best example I've been

00:01:02,760 --> 00:01:07,110
able to do fine I have no idea what

00:01:05,760 --> 00:01:10,229
might happen when you press the button

00:01:07,110 --> 00:01:14,850
that's not be ok button it's probably

00:01:10,229 --> 00:01:16,740
safe but you know just not sure this is

00:01:14,850 --> 00:01:19,259
a bit of an extreme and and you don't

00:01:16,740 --> 00:01:21,810
really have to actually go beyond any of

00:01:19,259 --> 00:01:24,900
the scope of English language in order

00:01:21,810 --> 00:01:27,420
to find the issues that really make

00:01:24,900 --> 00:01:30,000
localization and the tools in JavaScript

00:01:27,420 --> 00:01:33,240
to make localization important and

00:01:30,000 --> 00:01:35,970
effective and powerful so really I mean

00:01:33,240 --> 00:01:39,210
I'm gonna be talking mostly about marks

00:01:35,970 --> 00:01:40,140
photos mark is a photographer taking

00:01:39,210 --> 00:01:43,700
photos around here

00:01:40,140 --> 00:01:45,960
you might show up at some point here and

00:01:43,700 --> 00:01:50,700
he takes a lot of photos

00:01:45,960 --> 00:01:54,329
I'm sure actually that's not an exact

00:01:50,700 --> 00:01:55,770
count but photo photographers at

00:01:54,329 --> 00:01:58,799
conferences take a lot of photos and

00:01:55,770 --> 00:02:00,210
it's that it was a nice phrase to come

00:01:58,799 --> 00:02:02,520
up with in order to use as an example

00:02:00,210 --> 00:02:05,640
for for the kind of formatting that you

00:02:02,520 --> 00:02:08,879
might want to do with variables coming

00:02:05,640 --> 00:02:10,050
in localization in other words and the

00:02:08,879 --> 00:02:13,660
first thing you might notice is that

00:02:10,050 --> 00:02:17,620
when you say 1246 it

00:02:13,660 --> 00:02:19,000
nicer to use the convention for example

00:02:17,620 --> 00:02:21,220
be used in English to put a comment

00:02:19,000 --> 00:02:22,410
there as a thousand separator how do you

00:02:21,220 --> 00:02:25,420
do that

00:02:22,410 --> 00:02:27,850
how do you then if you're formatting

00:02:25,420 --> 00:02:29,530
this as the output of some application

00:02:27,850 --> 00:02:32,140
or whatever you're working with how do

00:02:29,530 --> 00:02:37,980
you then tell it that the date should be

00:02:32,140 --> 00:02:40,840
printed out say 11th of December 2019 so

00:02:37,980 --> 00:02:45,010
the first part of it many of these parts

00:02:40,840 --> 00:02:49,030
in fact are possible and you should be

00:02:45,010 --> 00:02:50,950
using the power of int'l this is a part

00:02:49,030 --> 00:02:53,260
of JavaScript it's um

00:02:50,950 --> 00:02:57,970
most of javascript is of course defined

00:02:53,260 --> 00:03:01,390
by a comma - 3 - echo 402 is the other

00:02:57,970 --> 00:03:02,590
major working group that works on

00:03:01,390 --> 00:03:05,170
JavaScript and what they are

00:03:02,590 --> 00:03:07,930
fundamentally working on is the int'l

00:03:05,170 --> 00:03:10,120
object number format is one of the best

00:03:07,930 --> 00:03:14,440
how many people here have used number

00:03:10,120 --> 00:03:16,630
format until that number format cool so

00:03:14,440 --> 00:03:18,640
yeah you can tell it you can create a

00:03:16,630 --> 00:03:21,700
formatter and then you can tell it to

00:03:18,640 --> 00:03:23,320
format a number and you get for English

00:03:21,700 --> 00:03:25,300
for instance it'll put a comment there

00:03:23,320 --> 00:03:28,630
for other locales it'll do something

00:03:25,300 --> 00:03:31,510
different for that number date time

00:03:28,630 --> 00:03:34,570
format is another really powerful part

00:03:31,510 --> 00:03:36,520
of int'l and it'll get you provided that

00:03:34,570 --> 00:03:41,110
you have a date object you'll then be

00:03:36,520 --> 00:03:45,430
able to format it as a string and this

00:03:41,110 --> 00:03:48,730
part yeah brings in in one of the issues

00:03:45,430 --> 00:03:52,209
of English there is no just one English

00:03:48,730 --> 00:03:55,900
this is what happens when you format a

00:03:52,209 --> 00:03:59,950
date with numbers

00:03:55,900 --> 00:04:04,180
numeric day long form a month and a

00:03:59,950 --> 00:04:08,800
numeric year in British English if you

00:04:04,180 --> 00:04:10,840
go for the default US American option

00:04:08,800 --> 00:04:13,090
the formatting is different so it

00:04:10,840 --> 00:04:17,320
matters even within the scope of English

00:04:13,090 --> 00:04:19,570
it buries English is in some ways

00:04:17,320 --> 00:04:21,729
because some of the rules of how English

00:04:19,570 --> 00:04:25,630
language works it's really good

00:04:21,729 --> 00:04:26,920
for these examples relative time format

00:04:25,630 --> 00:04:30,670
is another

00:04:26,920 --> 00:04:33,280
interesting more reason oh sorry going

00:04:30,670 --> 00:04:36,970
back date-time format who here has used

00:04:33,280 --> 00:04:37,390
that about the same house maybe a bit

00:04:36,970 --> 00:04:42,030
ball

00:04:37,390 --> 00:04:45,700
how about relative time format no I mean

00:04:42,030 --> 00:04:48,400
it hasn't been around even for that long

00:04:45,700 --> 00:04:51,340
in actual implementations but it gives

00:04:48,400 --> 00:04:54,520
you nice things when you trying to

00:04:51,340 --> 00:04:57,640
provide a nice user experience and and

00:04:54,520 --> 00:05:01,720
say that you know it's not this specific

00:04:57,640 --> 00:05:06,310
date that's two days ago somewhat

00:05:01,720 --> 00:05:10,090
there's no similar vain list format you

00:05:06,310 --> 00:05:12,250
give it a list an array of things array

00:05:10,090 --> 00:05:15,390
of strings sorry and what you can get

00:05:12,250 --> 00:05:19,300
out of it is a format a locale specific

00:05:15,390 --> 00:05:21,730
formatted way of expressing those as a

00:05:19,300 --> 00:05:25,930
string a motorcycle comma bus Oxford

00:05:21,730 --> 00:05:28,120
comma and car this one the Oxford comma

00:05:25,930 --> 00:05:29,640
does not vary between British and

00:05:28,120 --> 00:05:34,000
American English at least in this

00:05:29,640 --> 00:05:35,740
condition but how about when you want to

00:05:34,000 --> 00:05:39,730
put the whole message together

00:05:35,740 --> 00:05:43,980
mark took 1246 photos on 11 December to

00:05:39,730 --> 00:05:50,680
2019 this specific thing does not exist

00:05:43,980 --> 00:05:53,230
yet I'm a part of the ACMA for echo 402

00:05:50,680 --> 00:05:56,290
message format working group which is

00:05:53,230 --> 00:05:59,170
just starting now and we are just now

00:05:56,290 --> 00:06:02,020
starting to work of defining exactly how

00:05:59,170 --> 00:06:06,550
does this thing work and what else is

00:06:02,020 --> 00:06:08,170
really part of that and we do not have

00:06:06,550 --> 00:06:10,480
most of the answers for any of those

00:06:08,170 --> 00:06:13,030
questioners yet but we're working on it

00:06:10,480 --> 00:06:17,440
it'll be a thing in the future but not

00:06:13,030 --> 00:06:21,030
yet what is there is int'l doctoral

00:06:17,440 --> 00:06:25,030
rules anyone here use this for anything

00:06:21,030 --> 00:06:26,890
yeah not surprised what it does is that

00:06:25,030 --> 00:06:29,920
it gives you a little part of what

00:06:26,890 --> 00:06:31,390
messageformat does is that you can give

00:06:29,920 --> 00:06:33,910
it a number and it'll tell you what

00:06:31,390 --> 00:06:37,810
category of plurals that falls into

00:06:33,910 --> 00:06:40,390
English is kind of simple for for normal

00:06:37,810 --> 00:06:45,120
plurals you have either one photo

00:06:40,390 --> 00:06:48,760
or many photos but for the languages

00:06:45,120 --> 00:06:52,540
there are many complicated ways of doing

00:06:48,760 --> 00:06:54,040
this and in fact you don't as I

00:06:52,540 --> 00:06:56,140
mentioned before you don't even need to

00:06:54,040 --> 00:06:57,910
go beyond the scope of English itself in

00:06:56,140 --> 00:07:00,790
order to find some of the really

00:06:57,910 --> 00:07:03,550
interesting plural rules because there's

00:07:00,790 --> 00:07:05,200
the other category of plurals rather

00:07:03,550 --> 00:07:09,760
than the cardinal Provost they're the

00:07:05,200 --> 00:07:11,380
ordinal plurals hi mark this slide

00:07:09,760 --> 00:07:18,730
doesn't have your name on it but most of

00:07:11,380 --> 00:07:20,680
the others do yeah ordinal plurals in

00:07:18,730 --> 00:07:27,010
English or complicated first second

00:07:20,680 --> 00:07:29,620
third 1240 sixth it you know how it goes

00:07:27,010 --> 00:07:31,300
so this - you can get out of into a poor

00:07:29,620 --> 00:07:33,490
old rules but mostly this is useful for

00:07:31,300 --> 00:07:36,900
guys like me who have writing libraries

00:07:33,490 --> 00:07:41,920
that then others use by Yap it's there I

00:07:36,900 --> 00:07:45,640
mean fundamentally don't there are a

00:07:41,920 --> 00:07:47,620
number of these libraries that then

00:07:45,640 --> 00:07:50,350
provide the services of message

00:07:47,620 --> 00:07:52,480
formatting in JavaScript and most of

00:07:50,350 --> 00:07:54,340
these have been around for a while

00:07:52,480 --> 00:07:55,840
those are the years in which those

00:07:54,340 --> 00:07:58,450
projects have each of them started and

00:07:55,840 --> 00:08:03,370
this is the list of things that I would

00:07:58,450 --> 00:08:06,900
currently recommend to be used it is

00:08:03,370 --> 00:08:08,830
quite likely that if you're using

00:08:06,900 --> 00:08:11,680
localization that the tooling you're

00:08:08,830 --> 00:08:16,900
using is using one of these libraries at

00:08:11,680 --> 00:08:21,040
some fundamental level format Jas and I

00:08:16,900 --> 00:08:25,380
18 next are probably some of the biggest

00:08:21,040 --> 00:08:27,580
things biggest of these globalize and

00:08:25,380 --> 00:08:32,770
messageformat they're both open J's

00:08:27,580 --> 00:08:34,930
foundation projects I'm maintain message

00:08:32,770 --> 00:08:39,430
format so I'm kind of biased in that

00:08:34,930 --> 00:08:43,540
aspect a project fluent is a really

00:08:39,430 --> 00:08:46,150
interesting project started at Mozilla a

00:08:43,540 --> 00:08:48,010
couple years ago and is currently still

00:08:46,150 --> 00:08:49,330
very much in active development and

00:08:48,010 --> 00:08:52,510
active use

00:08:49,330 --> 00:08:54,220
they are currently Mozilla is currently

00:08:52,510 --> 00:08:58,079
putting all of fire floor

00:08:54,220 --> 00:09:05,230
and all of everything to be using fluent

00:08:58,079 --> 00:09:07,180
then when you go I mean when you're done

00:09:05,230 --> 00:09:09,160
using these you are most of the time not

00:09:07,180 --> 00:09:13,029
using any of these libraries directly

00:09:09,160 --> 00:09:15,129
you are most often using using something

00:09:13,029 --> 00:09:19,029
that depends on the environment that you

00:09:15,129 --> 00:09:21,759
are in for react angular you spelt all

00:09:19,029 --> 00:09:24,850
of these have a number of toolkits that

00:09:21,759 --> 00:09:26,199
provide that effectively use that the

00:09:24,850 --> 00:09:30,819
libraries that I mentioned before and

00:09:26,199 --> 00:09:32,769
the ecosystems in them then when you go

00:09:30,819 --> 00:09:36,639
really really deep down in a where do

00:09:32,769 --> 00:09:39,910
you get the strings that you want for

00:09:36,639 --> 00:09:44,589
all of these systems there are a number

00:09:39,910 --> 00:09:46,839
of translation services with these I

00:09:44,589 --> 00:09:49,000
don't have that much direct experience

00:09:46,839 --> 00:09:51,029
myself because most of the time in the

00:09:49,000 --> 00:09:53,560
projects that I end up working with a

00:09:51,029 --> 00:09:56,470
lot of the code is actually done by

00:09:53,560 --> 00:10:01,360
programmers who are writing it or nearby

00:09:56,470 --> 00:10:04,809
them but or then it gets localization is

00:10:01,360 --> 00:10:06,910
one of those fields of application

00:10:04,809 --> 00:10:08,649
development or parts of application

00:10:06,910 --> 00:10:12,699
development where it turns out that

00:10:08,649 --> 00:10:15,430
there is no one right tool for everyone

00:10:12,699 --> 00:10:18,009
it ends up varying and depending a lot

00:10:15,430 --> 00:10:20,019
on the exact specifics of what it is

00:10:18,009 --> 00:10:22,509
that you need and how it is that you're

00:10:20,019 --> 00:10:25,629
using it and what is your own history

00:10:22,509 --> 00:10:32,649
and and all of it so I can't really go

00:10:25,629 --> 00:10:35,139
that deeply into all of these but how do

00:10:32,649 --> 00:10:37,899
you then format these messages in

00:10:35,139 --> 00:10:43,149
particular when you have a string like

00:10:37,899 --> 00:10:45,689
mark took or variable of a name someone

00:10:43,149 --> 00:10:49,089
took some number of photos and then does

00:10:45,689 --> 00:10:51,939
you need to formalize whether it's zero

00:10:49,089 --> 00:10:57,189
for no photos one photo or many photos

00:10:51,939 --> 00:10:59,259
and then on on a specific date the

00:10:57,189 --> 00:11:01,449
format that I would by phone recommend

00:10:59,259 --> 00:11:04,360
is I see your message format at the

00:11:01,449 --> 00:11:05,829
moment and message format the JavaScript

00:11:04,360 --> 00:11:08,050
library is of course a JavaScript

00:11:05,829 --> 00:11:10,750
implementation of this

00:11:08,050 --> 00:11:14,110
and this is not the only only

00:11:10,750 --> 00:11:17,589
possibility to use as a as a formatting

00:11:14,110 --> 00:11:21,399
message format in my language but the

00:11:17,589 --> 00:11:24,250
other options are kind of challenging

00:11:21,399 --> 00:11:26,200
they end up being over complex and they

00:11:24,250 --> 00:11:29,620
end up feeling when you starting to work

00:11:26,200 --> 00:11:32,310
with messages that are complicated that

00:11:29,620 --> 00:11:36,250
have variables and plurals coming in

00:11:32,310 --> 00:11:38,050
that don't really they feel like they've

00:11:36,250 --> 00:11:39,640
been patched in order to support all of

00:11:38,050 --> 00:11:43,209
the features where a message format is

00:11:39,640 --> 00:11:44,560
more a solution for the whole thing

00:11:43,209 --> 00:11:48,190
rather than a solution that's been

00:11:44,560 --> 00:11:53,019
patched up as time goes on I 18 next has

00:11:48,190 --> 00:11:56,200
its native format for this case it looks

00:11:53,019 --> 00:12:00,990
kind of like this and one other polyglot

00:11:56,200 --> 00:12:03,820
is is another format used by a number of

00:12:00,990 --> 00:12:07,980
well not the number of a polyglot is

00:12:03,820 --> 00:12:10,779
itself it gets complicated so I would as

00:12:07,980 --> 00:12:13,480
a fundamental language for message

00:12:10,779 --> 00:12:15,579
formatting if it if it has any

00:12:13,480 --> 00:12:18,610
complexity ICU message format is

00:12:15,579 --> 00:12:22,959
currently a really good choice project

00:12:18,610 --> 00:12:26,230
fluent is a kind of an evolution of ICU

00:12:22,959 --> 00:12:29,470
message format and the people behind it

00:12:26,230 --> 00:12:31,720
are very much active in the in the ECMO

00:12:29,470 --> 00:12:33,520
4:02 work and are participating or

00:12:31,720 --> 00:12:35,890
figuring out what should the intel dot

00:12:33,520 --> 00:12:38,500
message format format look like should

00:12:35,890 --> 00:12:39,880
it be something more like what project

00:12:38,500 --> 00:12:43,180
fluence has done or more like what

00:12:39,880 --> 00:12:45,040
message ICU message format we're working

00:12:43,180 --> 00:12:46,839
on it one of the really interesting

00:12:45,040 --> 00:12:50,620
things that project fluent has done is

00:12:46,839 --> 00:12:54,100
that it's taken a lot of the issues that

00:12:50,620 --> 00:12:55,930
come up in the actual practice of using

00:12:54,100 --> 00:12:57,640
message format because you have

00:12:55,930 --> 00:12:59,980
translators working with the same files

00:12:57,640 --> 00:13:03,070
as you have programmers working with and

00:12:59,980 --> 00:13:04,600
and you hear is shoes and this has

00:13:03,070 --> 00:13:07,390
simplified some of the specifics there

00:13:04,600 --> 00:13:10,240
and a really interesting part is that

00:13:07,390 --> 00:13:12,040
project fluent is actually it's a file

00:13:10,240 --> 00:13:16,510
format even that they've just specified

00:13:12,040 --> 00:13:19,300
which allows you in fluent to refer from

00:13:16,510 --> 00:13:21,999
one message to another message and use

00:13:19,300 --> 00:13:24,299
them within the same file

00:13:21,999 --> 00:13:26,859
this is not really possible with

00:13:24,299 --> 00:13:31,119
messageformat because the message format

00:13:26,859 --> 00:13:32,979
is is formulated so that you're talking

00:13:31,119 --> 00:13:34,359
about the contents of a message whereas

00:13:32,979 --> 00:13:36,639
with fluent you're talking about the

00:13:34,359 --> 00:13:39,459
content of an entire file at a time and

00:13:36,639 --> 00:13:42,309
you can build really interesting things

00:13:39,459 --> 00:13:49,049
so definitely a thing to keep track of

00:13:42,309 --> 00:13:54,220
but still in development a little bit so

00:13:49,049 --> 00:13:57,309
coming back to ICU message format you

00:13:54,220 --> 00:14:01,409
have these messages and you need to keep

00:13:57,309 --> 00:14:01,409
them somewhere how does this work you

00:14:01,769 --> 00:14:07,629
could put them in an ex live file which

00:14:05,079 --> 00:14:10,689
is XML and this is the closest thing to

00:14:07,629 --> 00:14:14,849
a standard for localization stuff that

00:14:10,689 --> 00:14:17,769
we have currently I'm not a fan of XML

00:14:14,849 --> 00:14:20,739
I've never actually used an extra file

00:14:17,769 --> 00:14:26,109
for anything if you think this is a good

00:14:20,739 --> 00:14:28,709
choice for you great and the some of the

00:14:26,109 --> 00:14:31,389
origins of off message format itself are

00:14:28,709 --> 00:14:33,399
embedded in this sort of file format

00:14:31,389 --> 00:14:36,879
where you can see that using curly

00:14:33,399 --> 00:14:40,419
braces for variables and other aspects

00:14:36,879 --> 00:14:46,529
of this kind of fit in they don't

00:14:40,419 --> 00:14:52,720
conflict with the the angle with the XML

00:14:46,529 --> 00:14:56,499
syntax itself so this is one option dot

00:14:52,720 --> 00:14:59,379
properties files common in in Java is

00:14:56,499 --> 00:15:02,259
another entirely valid option and it

00:14:59,379 --> 00:15:03,879
kind of works you just need to you can

00:15:02,259 --> 00:15:07,629
you can have multi-line strings as well

00:15:03,879 --> 00:15:10,119
you just need to remember to escape all

00:15:07,629 --> 00:15:13,599
of them and it's a little bit tricky in

00:15:10,119 --> 00:15:18,699
some aspects or you could have your

00:15:13,599 --> 00:15:22,859
messages in JSON files and this is this

00:15:18,699 --> 00:15:25,899
is one point in which the the the

00:15:22,859 --> 00:15:27,639
non-human aspects of why jason is a good

00:15:25,899 --> 00:15:32,529
thing come into play because you can't

00:15:27,639 --> 00:15:34,989
have multi-line strings and you even

00:15:32,529 --> 00:15:35,890
this example it shall we say Scrolls

00:15:34,989 --> 00:15:38,320
quite a bit

00:15:35,890 --> 00:15:41,410
in order to show the whole message

00:15:38,320 --> 00:15:43,480
that's even possible there and and this

00:15:41,410 --> 00:15:49,420
is in fact why I went and broke my own

00:15:43,480 --> 00:15:51,550
yam all library and llamo Gemmill is

00:15:49,420 --> 00:15:53,800
actually a good use for this because it

00:15:51,550 --> 00:15:56,490
lets you escape the the curly bits

00:15:53,800 --> 00:16:00,310
better than most other configuration

00:15:56,490 --> 00:16:04,320
file formats but it still it's got some

00:16:00,310 --> 00:16:06,790
ugly bits to it hence why project fluent

00:16:04,320 --> 00:16:08,790
went with their own file format because

00:16:06,790 --> 00:16:10,750
then if you define it yourself you can

00:16:08,790 --> 00:16:13,780
define it in a way that you don't

00:16:10,750 --> 00:16:20,500
conflict with object notation that you

00:16:13,780 --> 00:16:24,520
have in other languages but yeah so you

00:16:20,500 --> 00:16:27,820
you have these messages and this is

00:16:24,520 --> 00:16:30,100
where we where I would actually disagree

00:16:27,820 --> 00:16:32,530
with what miles were saying in the in

00:16:30,100 --> 00:16:36,330
the keynote at the very start of the

00:16:32,530 --> 00:16:39,730
conference about translation because

00:16:36,330 --> 00:16:41,920
when you have a message in a message

00:16:39,730 --> 00:16:44,460
format and you need to get a string

00:16:41,920 --> 00:16:47,320
fundamentally at the end out of it I

00:16:44,460 --> 00:16:51,040
believe that translation is really the

00:16:47,320 --> 00:16:53,890
way of making this work and this is this

00:16:51,040 --> 00:16:56,080
is what I have done a lot with message

00:16:53,890 --> 00:16:59,400
form at the library which allows you to

00:16:56,080 --> 00:17:02,020
transpile the message format source code

00:16:59,400 --> 00:17:04,060
into JavaScript functions that are

00:17:02,020 --> 00:17:06,190
outputting strings and do all of that

00:17:04,060 --> 00:17:07,900
during your build time so that when you

00:17:06,190 --> 00:17:11,020
actually send the things that the bytes

00:17:07,900 --> 00:17:13,720
and everything to the client in the

00:17:11,020 --> 00:17:15,070
browser you don't need to do anything

00:17:13,720 --> 00:17:16,930
except just drum the function with the

00:17:15,070 --> 00:17:19,589
variables that you're passing in and you

00:17:16,930 --> 00:17:23,430
get the string out of it

00:17:19,589 --> 00:17:26,440
which i think is kind of cool and I

00:17:23,430 --> 00:17:32,290
don't think any other library except

00:17:26,440 --> 00:17:34,960
message format supports this so entirely

00:17:32,290 --> 00:17:38,910
possible thing to do message format that

00:17:34,960 --> 00:17:47,370
next is referring to the fact that the

00:17:38,910 --> 00:17:47,370
version 3 beta release is rolling

00:17:49,970 --> 00:17:55,710
but dysfunctionality effectively that

00:17:52,739 --> 00:17:57,690
I'm demoing here works also equally well

00:17:55,710 --> 00:17:59,909
with the message format - which is what

00:17:57,690 --> 00:18:03,149
you get if you drop that next from these

00:17:59,909 --> 00:18:08,129
so that's a web packed loader defining

00:18:03,149 --> 00:18:10,139
for it so that lets you import from a

00:18:08,129 --> 00:18:12,269
message tamil file for instance and this

00:18:10,139 --> 00:18:13,470
means that because you're doing it in a

00:18:12,269 --> 00:18:14,190
build time and because you're

00:18:13,470 --> 00:18:16,710
transpiling

00:18:14,190 --> 00:18:20,190
you don't have to worry about any of the

00:18:16,710 --> 00:18:22,710
cost of needing to in the runtime

00:18:20,190 --> 00:18:24,989
compile the message format source into a

00:18:22,710 --> 00:18:27,690
function and then actually get variables

00:18:24,989 --> 00:18:31,799
into it and and all of that that's

00:18:27,690 --> 00:18:42,149
happening in the build time rather than

00:18:31,799 --> 00:18:46,649
at runtime and it just works and it does

00:18:42,149 --> 00:18:51,299
this plugins also for for using using it

00:18:46,649 --> 00:18:53,220
in react for instance use message there

00:18:51,299 --> 00:18:58,549
is is getting you the message from a

00:18:53,220 --> 00:19:03,799
react context and working from there and

00:18:58,549 --> 00:19:07,049
i will need to write a node import

00:19:03,799 --> 00:19:12,690
loader in order to make all of this work

00:19:07,049 --> 00:19:15,080
in node as well because that's cool in

00:19:12,690 --> 00:19:15,080
the end

00:19:15,789 --> 00:19:24,100
when you're starting to work on all of

00:19:17,649 --> 00:19:27,549
this you really just have to realize

00:19:24,100 --> 00:19:34,029
early on enough that localization

00:19:27,549 --> 00:19:37,269
matters that the there might come a time

00:19:34,029 --> 00:19:40,570
later on when you do need to in fact

00:19:37,269 --> 00:19:42,369
make you're saying localized in a

00:19:40,570 --> 00:19:45,609
different language than what you start

00:19:42,369 --> 00:19:48,580
out with or to just be able to change

00:19:45,609 --> 00:19:52,720
the strings separately from from your

00:19:48,580 --> 00:19:56,379
codebase itself and the most important

00:19:52,720 --> 00:19:59,080
thing is that if you tag things early on

00:19:56,379 --> 00:20:01,779
enough with with something like a dumb

00:19:59,080 --> 00:20:03,580
function that doesn't do anything other

00:20:01,779 --> 00:20:05,970
than this message function here just

00:20:03,580 --> 00:20:10,179
effectively returns whatever you pass in

00:20:05,970 --> 00:20:13,869
even doing just this will let you later

00:20:10,179 --> 00:20:17,019
on find all of the strings and to hook

00:20:13,869 --> 00:20:19,659
into whatever the function is and make

00:20:17,019 --> 00:20:25,200
it work because in the end it doesn't

00:20:19,659 --> 00:20:28,269
matter what format your messages are in

00:20:25,200 --> 00:20:30,369
because you can always take them from

00:20:28,269 --> 00:20:33,399
one structured format and into another

00:20:30,369 --> 00:20:37,840
one and use them use them from there it

00:20:33,399 --> 00:20:41,729
doesn't really even matter what message

00:20:37,840 --> 00:20:44,019
formatting library you're using because

00:20:41,729 --> 00:20:47,499
provided if you've wrapped your things

00:20:44,019 --> 00:20:50,080
into some local function like this or

00:20:47,499 --> 00:20:52,629
something similar you can do the

00:20:50,080 --> 00:20:57,879
replacement switch from one system to

00:20:52,629 --> 00:21:01,149
another one relatively easily and this

00:20:57,879 --> 00:21:04,570
means that you can escape the horrible

00:21:01,149 --> 00:21:07,869
feeling at some much much later time

00:21:04,570 --> 00:21:10,330
when you're working on your code where

00:21:07,869 --> 00:21:12,700
you notice that yeah we need to go back

00:21:10,330 --> 00:21:17,889
and fix all of the literal strings

00:21:12,700 --> 00:21:21,460
everywhere in your app because yes I've

00:21:17,889 --> 00:21:23,649
done that I'm absolutely certain I'm not

00:21:21,460 --> 00:21:27,149
the only one in who here has done

00:21:23,649 --> 00:21:29,830
something like this need to plug in yeah

00:21:27,149 --> 00:21:33,850
just do something like this earlier

00:21:29,830 --> 00:21:39,190
and this is just for for just generic

00:21:33,850 --> 00:21:41,740
whatever function I mean got in react

00:21:39,190 --> 00:21:43,779
you can do something equally dumb to

00:21:41,740 --> 00:21:46,090
start with it doesn't have to be

00:21:43,779 --> 00:21:50,020
anything as long as you have a something

00:21:46,090 --> 00:21:51,760
that your your your code completion or

00:21:50,020 --> 00:21:56,610
whatever you can grab on to

00:21:51,760 --> 00:22:01,150
then later on modify if you need it but

00:21:56,610 --> 00:22:07,500
yeah this has been got toys Tammy said

00:22:01,150 --> 00:22:10,179
we people woke up I remain Emily and I

00:22:07,500 --> 00:22:12,250
care about localization I think you

00:22:10,179 --> 00:22:16,840
should care too and it's not a horrible

00:22:12,250 --> 00:22:21,490
beast and make it your friend and and be

00:22:16,840 --> 00:22:25,679
nice and start to think some think about

00:22:21,490 --> 00:22:29,110
things early and don't make decisions

00:22:25,679 --> 00:22:31,860
that you don't have to make and even if

00:22:29,110 --> 00:22:34,690
you've made the decisions realize that

00:22:31,860 --> 00:22:37,720
if you do have some structured content

00:22:34,690 --> 00:22:40,029
in how you're doing localization it will

00:22:37,720 --> 00:22:42,460
be relatively easy to switch to another

00:22:40,029 --> 00:22:44,890
solution from wherever you're starting

00:22:42,460 --> 00:22:47,260
with and if you're doing everything in

00:22:44,890 --> 00:22:49,600
built time then you don't have to worry

00:22:47,260 --> 00:22:53,320
about the cost of parsing file formats

00:22:49,600 --> 00:22:58,049
that are ugly into functions that you're

00:22:53,320 --> 00:22:58,049
using in your own time thank you

00:23:01,309 --> 00:23:07,070
I think we have a couple of like five

00:23:05,120 --> 00:23:11,710
minutes or so so if anyone has questions

00:23:07,070 --> 00:23:11,710
I'm happy to stay here and answer them I

00:23:15,220 --> 00:23:22,039
see you four I see a message for Matt

00:23:18,159 --> 00:23:29,149
fundamentally is supported by I see you

00:23:22,039 --> 00:23:30,529
for Java and C++ and I am NOT certain

00:23:29,149 --> 00:23:32,210
that there are other environments that

00:23:30,529 --> 00:23:42,889
are also supported but that's kind of

00:23:32,210 --> 00:23:44,570
yeah I am not willing to commit to any

00:23:42,889 --> 00:23:47,360
sort of a timeline that I'm gonna say

00:23:44,570 --> 00:23:48,999
because honestly this the the the

00:23:47,360 --> 00:23:52,929
message format working group has met

00:23:48,999 --> 00:23:56,470
once the next meeting is I is on Monday

00:23:52,929 --> 00:23:59,559
so it's very much getting started and

00:23:56,470 --> 00:24:02,990
figuring out where we are and really

00:23:59,559 --> 00:24:05,090
what is the expression is it really

00:24:02,990 --> 00:24:05,779
Intel dot message format or is it

00:24:05,090 --> 00:24:08,509
something else

00:24:05,779 --> 00:24:12,049
that is gonna be the implementation of

00:24:08,509 --> 00:24:14,570
it whether it's includes the Dom whether

00:24:12,049 --> 00:24:16,629
it's something entirely different don't

00:24:14,570 --> 00:24:16,629
know

00:24:24,790 --> 00:24:27,540
this one

00:24:46,639 --> 00:24:50,460
then you're entering the question of

00:24:48,629 --> 00:24:52,200
when you have a string and you're

00:24:50,460 --> 00:24:54,149
localizing it from one language to

00:24:52,200 --> 00:24:58,110
another one what do you use really as

00:24:54,149 --> 00:24:59,549
the key there and there are two schools

00:24:58,110 --> 00:25:02,850
of thought effectively on this one

00:24:59,549 --> 00:25:05,909
whether you use a full phrase in English

00:25:02,850 --> 00:25:08,879
for instance English makes sense because

00:25:05,909 --> 00:25:13,679
the code itself is effectively English

00:25:08,879 --> 00:25:16,740
and use the full phrase or use a key to

00:25:13,679 --> 00:25:19,369
look it up I'm proposing here to use a

00:25:16,740 --> 00:25:21,360
full phrase like this because that

00:25:19,369 --> 00:25:22,830
doesn't mean you have to actually make a

00:25:21,360 --> 00:25:25,559
decision you can figure out the answer

00:25:22,830 --> 00:25:26,879
later if you use a key here then that

00:25:25,559 --> 00:25:28,860
means that you have to have somewhere

00:25:26,879 --> 00:25:36,509
where you're looking up the value of

00:25:28,860 --> 00:25:37,980
that key and then working from there yes

00:25:36,509 --> 00:25:39,960
if that's how you decide to do it later

00:25:37,980 --> 00:25:42,860
but the key here is that you have the

00:25:39,960 --> 00:25:45,539
message call there and then if you're

00:25:42,860 --> 00:25:46,889
refactoring your code later you can find

00:25:45,539 --> 00:25:48,720
all of the places where you're calling

00:25:46,889 --> 00:25:50,639
because they're really I mean you're

00:25:48,720 --> 00:25:51,749
going to have the message in your import

00:25:50,639 --> 00:25:53,399
you're going to import the message from

00:25:51,749 --> 00:25:54,899
some other file and then you can track

00:25:53,399 --> 00:25:57,749
all of those impulses track all of those

00:25:54,899 --> 00:26:02,580
uses and then refactor those rather than

00:25:57,749 --> 00:26:05,730
having to chase down all of the all of

00:26:02,580 --> 00:26:14,299
the just strings that you have in your

00:26:05,730 --> 00:26:14,299
code cool thank you very much

00:26:14,420 --> 00:26:17,650

YouTube URL: https://www.youtube.com/watch?v=rq1ckTVyf74


