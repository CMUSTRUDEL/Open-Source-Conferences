Title: The Benefits of a “CLI First” Development Strategy - Corey Butler, Ecor Ventures
Publication date: 2020-06-17
Playlist: OpenJS World 2020
Description: 
	
Captions: 
	00:00:00,000 --> 00:00:06,299
hi I'm Cory Butler I'm going to be

00:00:02,220 --> 00:00:08,220
talking about CLI first development the

00:00:06,299 --> 00:00:09,929
CLI first strategy is a thought

00:00:08,220 --> 00:00:11,840
framework for managing development

00:00:09,929 --> 00:00:14,639
projects the main activity is

00:00:11,840 --> 00:00:16,500
prioritizing the design and evolution of

00:00:14,639 --> 00:00:18,439
a command-line interpreter throughout

00:00:16,500 --> 00:00:20,850
the software development lifecycle in

00:00:18,439 --> 00:00:23,279
simple terms I'm going to show you how

00:00:20,850 --> 00:00:25,380
to develop a CLI tool that serves as the

00:00:23,279 --> 00:00:29,970
core of your app both back-end and

00:00:25,380 --> 00:00:31,830
front-end and your workflow the CLI

00:00:29,970 --> 00:00:33,180
first strategy is similar to the

00:00:31,830 --> 00:00:35,880
traditional software development

00:00:33,180 --> 00:00:38,340
lifecycle it shares the same goals but

00:00:35,880 --> 00:00:40,290
differs and how they're achieved unlike

00:00:38,340 --> 00:00:43,410
the traditional approach CLI first

00:00:40,290 --> 00:00:45,510
encourages coding at every stage both

00:00:43,410 --> 00:00:47,329
strategies rely on a team's ability to

00:00:45,510 --> 00:00:50,010
agree about what is going to be made

00:00:47,329 --> 00:00:51,690
this means teams must convert intangible

00:00:50,010 --> 00:00:54,629
concepts and ideas into something

00:00:51,690 --> 00:00:56,610
tangible the CLI first strategy strikes

00:00:54,629 --> 00:00:58,680
a balance by replacing or augmenting the

00:00:56,610 --> 00:01:01,530
specification with a shared command-line

00:00:58,680 --> 00:01:03,270
utility I'll show you how to do this but

00:01:01,530 --> 00:01:06,119
first let's review the tools we're going

00:01:03,270 --> 00:01:08,189
to use I'll be demonstrating the

00:01:06,119 --> 00:01:10,530
strategy with the author shell library

00:01:08,189 --> 00:01:13,020
it's a lightweight shell framework for

00:01:10,530 --> 00:01:15,869
creating CLI experiences in any modern

00:01:13,020 --> 00:01:18,030
JavaScript runtime on the Left we have

00:01:15,869 --> 00:01:20,460
node.js and the right shows the browser

00:01:18,030 --> 00:01:22,920
code you can see the functional code is

00:01:20,460 --> 00:01:24,840
the same for both runtimes it only

00:01:22,920 --> 00:01:26,759
differs in the import source and how

00:01:24,840 --> 00:01:31,380
user input is collected and passed to

00:01:26,759 --> 00:01:33,240
the show I'll also be using a CLI dev

00:01:31,380 --> 00:01:35,280
tools extension for browsers which

00:01:33,240 --> 00:01:39,560
mimics a terminal experience with Auto

00:01:35,280 --> 00:01:39,560
completion hints suggestions and more

00:01:39,659 --> 00:01:44,920
to illustrate the planning stage of the

00:01:42,460 --> 00:01:47,560
CLI first strategy let's consider

00:01:44,920 --> 00:01:48,939
building a team communication app an

00:01:47,560 --> 00:01:51,159
application like this is going to have a

00:01:48,939 --> 00:01:53,200
couple of different core features may be

00:01:51,159 --> 00:01:55,420
a member directory wall or discussion

00:01:53,200 --> 00:01:58,060
feature profile management where you can

00:01:55,420 --> 00:02:00,159
manage your avatar email name so forth

00:01:58,060 --> 00:02:01,750
and some sort of notification feature

00:02:00,159 --> 00:02:03,340
that's going to notify you when you have

00:02:01,750 --> 00:02:06,729
a new message or when you've received a

00:02:03,340 --> 00:02:07,899
reply now like any system there's a

00:02:06,729 --> 00:02:09,099
number of different concerns or

00:02:07,899 --> 00:02:11,319
disciplines that are gonna be required

00:02:09,099 --> 00:02:13,810
to actually implement such a system like

00:02:11,319 --> 00:02:16,239
the user interface and API database or

00:02:13,810 --> 00:02:17,860
data store devops process Quality

00:02:16,239 --> 00:02:19,720
Assurance this is just a short list

00:02:17,860 --> 00:02:21,900
obviously there are more in most

00:02:19,720 --> 00:02:23,709
applications but you get the idea

00:02:21,900 --> 00:02:25,750
remember that in the traditional

00:02:23,709 --> 00:02:28,269
software development lifecycle the

00:02:25,750 --> 00:02:30,220
requirements gathering process ends with

00:02:28,269 --> 00:02:32,590
a specification whereas the CLI first

00:02:30,220 --> 00:02:34,630
approach ends with software and the

00:02:32,590 --> 00:02:36,340
reason this is important is because in

00:02:34,630 --> 00:02:38,410
the traditional approach it's a

00:02:36,340 --> 00:02:41,290
sequential process meaning that the

00:02:38,410 --> 00:02:43,060
features are defined first then you

00:02:41,290 --> 00:02:45,370
worry about the implementation concerns

00:02:43,060 --> 00:02:47,470
with the CLI first approach were

00:02:45,370 --> 00:02:50,700
combining those we're thinking about

00:02:47,470 --> 00:02:53,920
features and concerns at the same time

00:02:50,700 --> 00:02:56,319
now the way to address this is fairly

00:02:53,920 --> 00:02:59,139
simple we just need to align on what

00:02:56,319 --> 00:03:01,480
those features and concerns are to do

00:02:59,139 --> 00:03:02,470
this with a CLI tool it's actually

00:03:01,480 --> 00:03:04,480
pretty straightforward

00:03:02,470 --> 00:03:05,980
we need a dictionary of some sort and

00:03:04,480 --> 00:03:09,190
what better way to do that than with a

00:03:05,980 --> 00:03:11,980
help screen on the right side of the

00:03:09,190 --> 00:03:14,650
screen you can see a configuration for

00:03:11,980 --> 00:03:17,709
our shell this is designed specifically

00:03:14,650 --> 00:03:18,670
for the author shell library and we're

00:03:17,709 --> 00:03:20,680
providing a couple of configuration

00:03:18,670 --> 00:03:22,989
options first we're gonna call this

00:03:20,680 --> 00:03:25,299
application team got our description and

00:03:22,989 --> 00:03:27,609
a version and then we've identified a

00:03:25,299 --> 00:03:30,250
several different commands now you may

00:03:27,609 --> 00:03:32,560
notice that these commands are loosely

00:03:30,250 --> 00:03:34,560
related to the features that we have so

00:03:32,560 --> 00:03:37,480
there's the user directory wall

00:03:34,560 --> 00:03:41,010
notification with a small description of

00:03:37,480 --> 00:03:43,840
each of these now to implement this

00:03:41,010 --> 00:03:45,760
we're importing this configuration into

00:03:43,840 --> 00:03:48,519
our shell library and this happens to be

00:03:45,760 --> 00:03:51,310
the node version similarly we're doing

00:03:48,519 --> 00:03:52,600
the same thing in the browser let's take

00:03:51,310 --> 00:03:56,520
a look at the results of this

00:03:52,600 --> 00:04:00,090
and switch over to a terminal here and

00:03:56,520 --> 00:04:03,640
we immediately have a help environment

00:04:00,090 --> 00:04:06,390
with everything defined now let's take a

00:04:03,640 --> 00:04:09,310
look at this in the browser

00:04:06,390 --> 00:04:11,340
I'll open dev tools here and follow the

00:04:09,310 --> 00:04:15,520
instructions just tells us to type team

00:04:11,340 --> 00:04:18,489
help and you can see we have the exact

00:04:15,520 --> 00:04:21,250
same information accessible in both the

00:04:18,489 --> 00:04:22,810
browser and in terminal and I mentioned

00:04:21,250 --> 00:04:25,540
that we were going to be using the shell

00:04:22,810 --> 00:04:27,790
I'm sorry the command-line extension for

00:04:25,540 --> 00:04:29,380
this so let's take a look at that that's

00:04:27,790 --> 00:04:32,290
installed here I'm gonna clear this out

00:04:29,380 --> 00:04:35,770
so you can see the same thing this by

00:04:32,290 --> 00:04:36,700
default has the help feature you could

00:04:35,770 --> 00:04:40,480
type it in like that

00:04:36,700 --> 00:04:41,980
or you'd simply hit enter and it

00:04:40,480 --> 00:04:43,240
provides you the information the same

00:04:41,980 --> 00:04:44,710
way that you would do if you were

00:04:43,240 --> 00:04:47,980
executing this as a command through the

00:04:44,710 --> 00:04:50,080
console so this is a little bit easier

00:04:47,980 --> 00:04:52,750
and you'll see that more throughout the

00:04:50,080 --> 00:04:56,580
rest of this presentation but at this

00:04:52,750 --> 00:04:59,770
stage we have created a very simplistic

00:04:56,580 --> 00:05:02,200
command-line tool that documents our

00:04:59,770 --> 00:05:05,470
system and the features within it that

00:05:02,200 --> 00:05:09,610
is accessible on the desktop on a server

00:05:05,470 --> 00:05:11,770
and in the browser in a matter of

00:05:09,610 --> 00:05:14,650
minutes the project momentum just

00:05:11,770 --> 00:05:16,480
increased by creating a basic CLI help

00:05:14,650 --> 00:05:19,360
screen groups are forced to trim the fat

00:05:16,480 --> 00:05:21,370
in an almost surgical manner the

00:05:19,360 --> 00:05:23,760
incredibly direct nature of the command

00:05:21,370 --> 00:05:26,380
line enforces ruthless simplicity

00:05:23,760 --> 00:05:28,000
command service standard terminology to

00:05:26,380 --> 00:05:30,880
define the systems and applications

00:05:28,000 --> 00:05:32,440
being built my favorite benefit of this

00:05:30,880 --> 00:05:34,630
stage is the fact there is working

00:05:32,440 --> 00:05:36,610
software it software that doesn't do

00:05:34,630 --> 00:05:39,220
anything but the ideas are baked into

00:05:36,610 --> 00:05:42,280
the core this serves as inspiration and

00:05:39,220 --> 00:05:43,780
it's an excellent onboarding tool we

00:05:42,280 --> 00:05:47,070
also have a strong sense of competence

00:05:43,780 --> 00:05:47,070
in our project trajectory

00:05:47,330 --> 00:05:51,870
the prototyping stage is a proving

00:05:49,919 --> 00:05:53,910
ground it's kind of like the

00:05:51,870 --> 00:05:56,220
entrepreneurs equivalent of a proof of

00:05:53,910 --> 00:05:58,560
concept it's time to prove that each

00:05:56,220 --> 00:06:00,990
area of concern like the user interface

00:05:58,560 --> 00:06:02,940
and api's can work in an aligned manner

00:06:00,990 --> 00:06:04,650
while maintaining independence and how

00:06:02,940 --> 00:06:07,620
they each choose to implement their part

00:06:04,650 --> 00:06:08,610
of the project so at this stage we're

00:06:07,620 --> 00:06:10,590
pretty much just mocking up

00:06:08,610 --> 00:06:12,930
functionality at a finer level of detail

00:06:10,590 --> 00:06:14,430
I'm going to add a sub command to serve

00:06:12,930 --> 00:06:23,639
as a placeholder for authenticating a

00:06:14,430 --> 00:06:32,960
user so to do this we add command like

00:06:23,639 --> 00:06:35,310
this and let's give it a description

00:06:32,960 --> 00:06:41,550
this will just be retrieving an access

00:06:35,310 --> 00:06:45,210
code or access token and you know what

00:06:41,550 --> 00:06:48,630
let's make an alias for that I'll just

00:06:45,210 --> 00:06:53,610
call it a for now and then we need to

00:06:48,630 --> 00:06:55,639
actually handle this so in this case for

00:06:53,610 --> 00:06:59,490
the time being since this is just a

00:06:55,639 --> 00:07:02,810
prototype just a placeholder we're just

00:06:59,490 --> 00:07:05,810
gonna say console about log not

00:07:02,810 --> 00:07:09,360
implemented yet

00:07:05,810 --> 00:07:13,349
so let's save this but let's take a look

00:07:09,360 --> 00:07:15,630
at the team user and now you can see the

00:07:13,349 --> 00:07:21,180
new help has been updated let's go ahead

00:07:15,630 --> 00:07:23,820
and run that you can see here that it

00:07:21,180 --> 00:07:25,590
just says not implemented yet let's take

00:07:23,820 --> 00:07:33,000
a brief look at that in the browser as

00:07:25,590 --> 00:07:35,039
well okay so here we can see the exact

00:07:33,000 --> 00:07:40,680
same command provides the exact same

00:07:35,039 --> 00:07:42,930
output again if we put in user help

00:07:40,680 --> 00:07:45,090
we'll be able to see the same help

00:07:42,930 --> 00:07:47,250
command as well everything that we did

00:07:45,090 --> 00:07:49,919
in the planning stage immediately

00:07:47,250 --> 00:07:53,160
transfers into the prototyping stage and

00:07:49,919 --> 00:07:54,690
we also have just a small tiny bit of

00:07:53,160 --> 00:07:56,669
functionality again it doesn't really do

00:07:54,690 --> 00:07:58,229
much but it serves as a placeholder and

00:07:56,669 --> 00:07:59,090
this is something that we can use to

00:07:58,229 --> 00:08:01,669
build upon

00:07:59,090 --> 00:08:02,930
the future the beautiful part about this

00:08:01,669 --> 00:08:05,030
is that teams can still work

00:08:02,930 --> 00:08:07,010
independently regardless of the pace

00:08:05,030 --> 00:08:09,580
that you go at by providing some

00:08:07,010 --> 00:08:12,470
placeholders you're able to then start

00:08:09,580 --> 00:08:15,130
incrementally adding functionality into

00:08:12,470 --> 00:08:17,600
your application into your system

00:08:15,130 --> 00:08:19,580
hopefully it's obvious how rapid the

00:08:17,600 --> 00:08:22,130
transition is between the phases of the

00:08:19,580 --> 00:08:23,840
strategy by inheriting the progress of

00:08:22,130 --> 00:08:28,760
the planning phase prototyping can be

00:08:23,840 --> 00:08:30,919
very quick and super flexible so far the

00:08:28,760 --> 00:08:33,050
CLI tool has a user authenticate command

00:08:30,919 --> 00:08:35,300
I'd like to see this working from a

00:08:33,050 --> 00:08:37,279
terminal and the browser so I'm going to

00:08:35,300 --> 00:08:39,650
start by creating a basic working API

00:08:37,279 --> 00:08:44,029
then we'll build an API client into the

00:08:39,650 --> 00:08:46,910
CLI tool I pre built a simple node API

00:08:44,029 --> 00:08:49,790
skeleton using the common API library

00:08:46,910 --> 00:08:52,310
this library provides many features for

00:08:49,790 --> 00:08:54,110
rapidly creating backends I've added

00:08:52,310 --> 00:08:55,790
several endpoints representing the

00:08:54,110 --> 00:08:59,060
features of the application that we care

00:08:55,790 --> 00:09:00,440
about along with basic auth security you

00:08:59,060 --> 00:09:02,080
can also see I've launched the server in

00:09:00,440 --> 00:09:04,790
the top terminal

00:09:02,080 --> 00:09:07,160
I've also updated the CL eyes user

00:09:04,790 --> 00:09:12,140
authenticate command with an HTTP

00:09:07,160 --> 00:09:13,279
request for an access token you can see

00:09:12,140 --> 00:09:15,560
both runtimes

00:09:13,279 --> 00:09:21,770
retrieve the same token using the same

00:09:15,560 --> 00:09:24,950
command so as you can see this process

00:09:21,770 --> 00:09:27,320
is still inheriting the progress from

00:09:24,950 --> 00:09:30,170
the stages before it allows for us to

00:09:27,320 --> 00:09:34,670
work independently in our own area of

00:09:30,170 --> 00:09:39,680
expertise UI API data anywhere else yet

00:09:34,670 --> 00:09:42,260
we remain unified in our approach as

00:09:39,680 --> 00:09:44,089
software systems are always changing the

00:09:42,260 --> 00:09:45,830
CLI first approach can't prevent this

00:09:44,089 --> 00:09:47,930
from happening but it can provide a

00:09:45,830 --> 00:09:50,330
predictable way for responding to change

00:09:47,930 --> 00:09:53,089
think of it like having a go to battle

00:09:50,330 --> 00:09:54,860
plan for any situation to illustrate

00:09:53,089 --> 00:09:56,900
let's pretend the group communication

00:09:54,860 --> 00:09:58,250
system has been in use for a while and

00:09:56,900 --> 00:10:00,170
is proven to be a reliable way to

00:09:58,250 --> 00:10:02,570
communicate with the entire workforce in

00:10:00,170 --> 00:10:04,339
an effort to boost morale the system

00:10:02,570 --> 00:10:06,709
needs to provide a new inspirational

00:10:04,339 --> 00:10:08,990
quote of the day there are a few

00:10:06,709 --> 00:10:11,180
challenges with this first it involves a

00:10:08,990 --> 00:10:12,830
new unproven third-party service to

00:10:11,180 --> 00:10:14,930
provide quotes it

00:10:12,830 --> 00:10:16,790
also means the implementation of the

00:10:14,930 --> 00:10:17,980
user experience may differ between

00:10:16,790 --> 00:10:21,110
runtimes

00:10:17,980 --> 00:10:23,690
at this point we can restart the CLI

00:10:21,110 --> 00:10:26,420
first process for this portion of the

00:10:23,690 --> 00:10:28,550
system think about this in a real

00:10:26,420 --> 00:10:30,860
production system this can be a huge

00:10:28,550 --> 00:10:33,530
benefit because it reduces the price of

00:10:30,860 --> 00:10:35,990
fixing technical debt in other words it

00:10:33,530 --> 00:10:39,050
won't cost you as much time or stress to

00:10:35,990 --> 00:10:41,240
change your system since a command-line

00:10:39,050 --> 00:10:43,040
tool is flexible it can be introduced to

00:10:41,240 --> 00:10:44,870
the development workforce incrementally

00:10:43,040 --> 00:10:47,570
the same way the original features and

00:10:44,870 --> 00:10:49,520
functionality were introduced this buys

00:10:47,570 --> 00:10:52,640
time reduces stress and keeps the system

00:10:49,520 --> 00:10:54,890
clean instead of avoiding change people

00:10:52,640 --> 00:10:56,900
start to embrace it if this common

00:10:54,890 --> 00:10:58,550
challenge is when you face the CLI first

00:10:56,900 --> 00:11:01,280
strategy is likely to offer you

00:10:58,550 --> 00:11:05,840
significant relief so let's embrace this

00:11:01,280 --> 00:11:08,990
quote of the day change in our app at

00:11:05,840 --> 00:11:12,700
this point we have the user directory

00:11:08,990 --> 00:11:16,340
wall and notification now i've already

00:11:12,700 --> 00:11:19,280
pre-configured this to add a new command

00:11:16,340 --> 00:11:21,320
called quote we're using quotes dot rest

00:11:19,280 --> 00:11:22,310
here for our quote of the day so we

00:11:21,320 --> 00:11:24,530
don't actually know what we're gonna get

00:11:22,310 --> 00:11:26,960
back from this right now but what we do

00:11:24,530 --> 00:11:30,560
know is that their API documentation

00:11:26,960 --> 00:11:32,270
shows us that we get back contents with

00:11:30,560 --> 00:11:35,510
some quote it's basically a JSON object

00:11:32,270 --> 00:11:37,280
that comes back now we need to present

00:11:35,510 --> 00:11:39,710
this in different ways depending on the

00:11:37,280 --> 00:11:42,140
runtime that we're running in so you can

00:11:39,710 --> 00:11:44,000
see here that we're using we're

00:11:42,140 --> 00:11:48,470
leveraging the new global this feature

00:11:44,000 --> 00:11:50,810
of echo script to determine whether or

00:11:48,470 --> 00:11:52,910
not the window object exists that's

00:11:50,810 --> 00:11:54,980
unique to the browser so we know that if

00:11:52,910 --> 00:11:56,960
the window object exists we're in the

00:11:54,980 --> 00:11:59,870
browser otherwise we're assuming that

00:11:56,960 --> 00:12:02,330
we're in no js' or another runtime so

00:11:59,870 --> 00:12:04,460
all we're doing here is providing a

00:12:02,330 --> 00:12:07,820
block of text we're saying we're gonna

00:12:04,460 --> 00:12:10,700
insert this this block quote into the

00:12:07,820 --> 00:12:13,700
the web app with the quote and the

00:12:10,700 --> 00:12:15,020
author in node we're going to be doing

00:12:13,700 --> 00:12:18,560
the same thing but we're going to be

00:12:15,020 --> 00:12:20,180
logging this out to the standardout so

00:12:18,560 --> 00:12:22,820
we're providing the quote and then we're

00:12:20,180 --> 00:12:25,010
providing the author so let's take a

00:12:22,820 --> 00:12:26,450
look at this and actually run this

00:12:25,010 --> 00:12:28,640
command here now

00:12:26,450 --> 00:12:35,690
so I'm gonna say team I'll hear I'll

00:12:28,640 --> 00:12:39,470
clear this out team quote you can see

00:12:35,690 --> 00:12:41,210
the quote here let's go take this into

00:12:39,470 --> 00:12:46,490
the browser as well and run the same

00:12:41,210 --> 00:12:49,730
thing this time you'll notice that the

00:12:46,490 --> 00:12:52,430
browser changed so earlier we were

00:12:49,730 --> 00:12:54,830
talking about how we could emit an event

00:12:52,430 --> 00:12:57,770
or trigger some sort of action depending

00:12:54,830 --> 00:13:00,470
on which runtime were in in this case we

00:12:57,770 --> 00:13:02,240
simply made a change to the web page so

00:13:00,470 --> 00:13:05,180
you can see here a kind of interesting

00:13:02,240 --> 00:13:07,970
concept where you can come in to the CLI

00:13:05,180 --> 00:13:10,250
dev tools extension or into the console

00:13:07,970 --> 00:13:13,190
type in a command and it's going to

00:13:10,250 --> 00:13:14,810
update the UI now that doesn't work the

00:13:13,190 --> 00:13:17,810
same way in the terminal but think about

00:13:14,810 --> 00:13:20,900
the power behind this if you are an API

00:13:17,810 --> 00:13:22,970
developer and your UI developer comes to

00:13:20,900 --> 00:13:24,350
you and says I'm not getting the data

00:13:22,970 --> 00:13:27,350
back that you're saying I should be

00:13:24,350 --> 00:13:29,090
getting back as the API developer you

00:13:27,350 --> 00:13:31,490
can say well please provide me the

00:13:29,090 --> 00:13:34,040
command that you use to capture that

00:13:31,490 --> 00:13:36,770
data so the UI developer can provide

00:13:34,040 --> 00:13:39,260
that command the API developer can go in

00:13:36,770 --> 00:13:42,680
to the browser and run the exact same

00:13:39,260 --> 00:13:45,530
command see the error take that offline

00:13:42,680 --> 00:13:47,450
and use that in their own development

00:13:45,530 --> 00:13:50,120
environment however they see fit because

00:13:47,450 --> 00:13:52,430
they have the same command line tool so

00:13:50,120 --> 00:13:54,740
now you can start troubleshooting so not

00:13:52,430 --> 00:13:57,020
only is it troubleshooting that way but

00:13:54,740 --> 00:13:58,760
you can take this concept significantly

00:13:57,020 --> 00:14:01,400
further if you wanted to think about

00:13:58,760 --> 00:14:02,540
unit testing integration testing all

00:14:01,400 --> 00:14:04,580
kinds of things that you could

00:14:02,540 --> 00:14:07,160
potentially automate with a command line

00:14:04,580 --> 00:14:08,870
tool that's the same across runtimes or

00:14:07,160 --> 00:14:11,360
at least the input and output is the

00:14:08,870 --> 00:14:14,870
same even if the implementation is

00:14:11,360 --> 00:14:17,000
different as it is here if you need to

00:14:14,870 --> 00:14:19,910
integrate this with other things such as

00:14:17,000 --> 00:14:21,890
an approval process you could you don't

00:14:19,910 --> 00:14:23,420
have to release this quote command you

00:14:21,890 --> 00:14:25,220
don't even have to use this quote

00:14:23,420 --> 00:14:27,350
command in all runtimes

00:14:25,220 --> 00:14:30,170
until you're confident in it so it's a

00:14:27,350 --> 00:14:32,390
very light amount of overhead to give

00:14:30,170 --> 00:14:36,770
you a significant amount of flexibility

00:14:32,390 --> 00:14:39,160
in your development process as you can

00:14:36,770 --> 00:14:41,620
see the process of pivoting

00:14:39,160 --> 00:14:43,870
is very adaptable and it provides

00:14:41,620 --> 00:14:48,160
predictability in how you adapt to

00:14:43,870 --> 00:14:50,770
change a flexible approach like this has

00:14:48,160 --> 00:14:53,110
a wonderful effect on tech teams it

00:14:50,770 --> 00:14:55,780
enables behaviors that create organic

00:14:53,110 --> 00:14:58,960
growth which fundamentally change your

00:14:55,780 --> 00:15:00,910
development culture we've already seen

00:14:58,960 --> 00:15:03,250
how the tooling and the process can

00:15:00,910 --> 00:15:05,620
adapt to changing plans new features

00:15:03,250 --> 00:15:09,340
heavier development and complete pivots

00:15:05,620 --> 00:15:11,380
the final phase is maintenance the word

00:15:09,340 --> 00:15:13,060
maintenance is often thought of as work

00:15:11,380 --> 00:15:16,150
done in the aftermath of a new feature

00:15:13,060 --> 00:15:18,580
the CLI first way of thinking views it

00:15:16,150 --> 00:15:20,590
more as growth activities is both the

00:15:18,580 --> 00:15:24,430
end of a cycle and seeds of the next

00:15:20,590 --> 00:15:26,770
cycle for example pretend the

00:15:24,430 --> 00:15:28,930
organization introduces a new JavaScript

00:15:26,770 --> 00:15:31,450
runtime to your standard stack like

00:15:28,930 --> 00:15:33,250
denno perhaps the runtime has some

00:15:31,450 --> 00:15:36,340
characteristics that require some

00:15:33,250 --> 00:15:38,320
modification to your code in demo there

00:15:36,340 --> 00:15:40,930
is a global window object just like the

00:15:38,320 --> 00:15:43,300
browser with the existing command code

00:15:40,930 --> 00:15:45,730
for our quote of the day feature it'll

00:15:43,300 --> 00:15:48,550
misinterpret the runtime mistaking demo

00:15:45,730 --> 00:15:50,760
for the browser producing HTML when it

00:15:48,550 --> 00:15:53,860
should be writing to standard output

00:15:50,760 --> 00:15:59,890
this is a minor maintenance task will

00:15:53,860 --> 00:16:01,840
use optional chaining to solve this I'll

00:15:59,890 --> 00:16:06,540
be leveraging the navigator object which

00:16:01,840 --> 00:16:06,540
denno does not have on its window object

00:16:06,570 --> 00:16:11,970
also be mindful to update the version

00:16:13,800 --> 00:16:19,180
with the updates in place a new version

00:16:16,990 --> 00:16:21,880
of the CLI tool can be released with the

00:16:19,180 --> 00:16:24,090
modified functionality let's see how

00:16:21,880 --> 00:16:24,090
this looks

00:16:24,750 --> 00:16:35,560
first we'll refresh this page and notice

00:16:29,380 --> 00:16:39,310
that there is now a version 1.0.1 in our

00:16:35,560 --> 00:16:43,330
terminal do the same thing let's see

00:16:39,310 --> 00:16:50,300
we're also at version 1.0 point 1 when

00:16:43,330 --> 00:16:57,360
we run the quote command we get a quote

00:16:50,300 --> 00:16:59,100
likewise in the console now the

00:16:57,360 --> 00:17:02,340
important thing to note here is that the

00:16:59,100 --> 00:17:04,590
app didn't break despite the fact that

00:17:02,340 --> 00:17:06,690
we made some changes now if it had

00:17:04,590 --> 00:17:10,590
broken we could roll back to a prior

00:17:06,690 --> 00:17:12,330
version of the tool so you can see that

00:17:10,590 --> 00:17:15,000
the maintenance process is still

00:17:12,330 --> 00:17:18,060
inheriting progress from all of the

00:17:15,000 --> 00:17:21,150
phases before it you can also start to

00:17:18,060 --> 00:17:23,250
see that the process itself can be

00:17:21,150 --> 00:17:25,530
version control simply because you can

00:17:23,250 --> 00:17:28,800
maintain multiple versions of your COI

00:17:25,530 --> 00:17:31,680
such as a fork or another feature branch

00:17:28,800 --> 00:17:35,130
anything that you really want so you

00:17:31,680 --> 00:17:38,220
have point in time understanding of your

00:17:35,130 --> 00:17:40,530
process this whole project is a lot

00:17:38,220 --> 00:17:43,290
easier with the CLI tools simply because

00:17:40,530 --> 00:17:47,070
the help is documenting the system as we

00:17:43,290 --> 00:17:49,440
go so as we make changes we're only

00:17:47,070 --> 00:17:52,110
changing that documentation when

00:17:49,440 --> 00:17:54,390
something important changes such as a

00:17:52,110 --> 00:17:55,880
new feature or a change to the way that

00:17:54,390 --> 00:17:58,800
something is accomplished

00:17:55,880 --> 00:18:00,840
remember the CLI first strategy is

00:17:58,800 --> 00:18:05,310
ultimately a thought framework or best

00:18:00,840 --> 00:18:07,200
practice of sorts you can use it to ease

00:18:05,310 --> 00:18:10,620
into planning with a tool that provides

00:18:07,200 --> 00:18:12,450
help prove your stack works by wire

00:18:10,620 --> 00:18:15,720
framing placeholders together with

00:18:12,450 --> 00:18:17,970
actual code develop your part of a

00:18:15,720 --> 00:18:20,630
system with confidence knowing the work

00:18:17,970 --> 00:18:22,890
you do will be understood by others

00:18:20,630 --> 00:18:26,340
you'll be prepared with a battle plan

00:18:22,890 --> 00:18:28,710
for addressing change maintain your

00:18:26,340 --> 00:18:31,560
applications with repeatable practices

00:18:28,710 --> 00:18:36,330
all this can be done well with the

00:18:31,560 --> 00:18:38,700
assistant code at every stage this

00:18:36,330 --> 00:18:42,620
flexible strategy can be used for

00:18:38,700 --> 00:18:46,020
testing onboarding documentation DevOps

00:18:42,620 --> 00:18:47,940
applications and even tooling whether

00:18:46,020 --> 00:18:49,980
you choose to use it for one purpose or

00:18:47,940 --> 00:18:52,350
many you'll benefit from the speed

00:18:49,980 --> 00:18:54,990
simplicity and standardization a

00:18:52,350 --> 00:18:56,820
command-line utility provides for teams

00:18:54,990 --> 00:18:58,560
it provides a more streamlined approach

00:18:56,820 --> 00:19:01,990
for collaboration and automating

00:18:58,560 --> 00:19:04,120
workflows many organizations already

00:19:01,990 --> 00:19:06,670
have their own homegrown CLI tools if

00:19:04,120 --> 00:19:08,380
this describes your organization you

00:19:06,670 --> 00:19:12,790
already have a set of standards to build

00:19:08,380 --> 00:19:15,340
upon and integrate into your systems if

00:19:12,790 --> 00:19:17,020
you've never considered using a CLI

00:19:15,340 --> 00:19:19,960
concept in the browser before I

00:19:17,020 --> 00:19:22,120
recommend trying it out in my personal

00:19:19,960 --> 00:19:24,280
experience browser Co lies have

00:19:22,120 --> 00:19:27,070
increased our productivity by an order

00:19:24,280 --> 00:19:29,050
of magnitude testing and debugging alone

00:19:27,070 --> 00:19:30,580
is far simpler when we don't have to

00:19:29,050 --> 00:19:33,450
point-and-click through every user

00:19:30,580 --> 00:19:35,830
journey we just run a command

00:19:33,450 --> 00:19:38,470
troubleshooting Apps is often easier

00:19:35,830 --> 00:19:41,980
when an error can be recreated just by

00:19:38,470 --> 00:19:44,260
issuing a command when we first started

00:19:41,980 --> 00:19:47,200
using the CLI first strategy it was for

00:19:44,260 --> 00:19:49,150
speed today I find the documentation

00:19:47,200 --> 00:19:52,870
aspect to be just as if not more

00:19:49,150 --> 00:19:55,330
valuable CLI help menus act like a

00:19:52,870 --> 00:19:57,040
CliffsNotes guide giving all developers

00:19:55,330 --> 00:19:58,600
the ability to read about the parts of

00:19:57,040 --> 00:20:00,190
the system they care about without

00:19:58,600 --> 00:20:05,650
getting bogged down with too much

00:20:00,190 --> 00:20:07,929
unnecessary detail if you are interested

00:20:05,650 --> 00:20:09,570
in trying out the CLI first strategy you

00:20:07,929 --> 00:20:12,130
can use the same tools you've seen today

00:20:09,570 --> 00:20:14,170
I'll be posting more information about

00:20:12,130 --> 00:20:16,210
the CLI for strategy on the github repo

00:20:14,170 --> 00:20:17,950
listed here and I can be reached on

00:20:16,210 --> 00:20:19,960
Twitter and Cora if you have questions

00:20:17,950 --> 00:20:22,210
about it I will most likely make

00:20:19,960 --> 00:20:23,400
follow-up videos as well in the near

00:20:22,210 --> 00:20:25,840
future

00:20:23,400 --> 00:20:28,380
thanks for joining me today and have a

00:20:25,840 --> 00:20:28,380
great conference

00:20:34,520 --> 00:20:36,580

YouTube URL: https://www.youtube.com/watch?v=dw7ABwvFtdM


