Title: Kubernetes by Keytar - Jan Kleinert, Red Hat
Publication date: 2020-06-22
Playlist: OpenJS World 2020
Description: 
	
Captions: 
	00:00:00,680 --> 00:00:06,299
hi welcome to kubernetes bye keytar

00:00:03,990 --> 00:00:08,220
I'm Jam cleaner I'm a developer advocate

00:00:06,299 --> 00:00:11,790
at Red Hat and I focus on open shift

00:00:08,220 --> 00:00:13,049
which is a distribution of kubernetes in

00:00:11,790 --> 00:00:14,759
this talk we're going to cover four

00:00:13,049 --> 00:00:16,619
different sections we'll start by

00:00:14,759 --> 00:00:18,210
talking about what kubernetes is in the

00:00:16,619 --> 00:00:20,939
first place then we'll look at the

00:00:18,210 --> 00:00:23,010
kubernetes api and resource types third

00:00:20,939 --> 00:00:25,590
we'll have a demo where I use my keytar

00:00:23,010 --> 00:00:28,080
and the web MIDI API to interact with

00:00:25,590 --> 00:00:29,730
the kubernetes api to deploy and manage

00:00:28,080 --> 00:00:32,219
some resources on a kubernetes cluster

00:00:29,730 --> 00:00:34,469
and then finally I'll share some

00:00:32,219 --> 00:00:36,149
resources where you can learn more so

00:00:34,469 --> 00:00:38,370
I'll get out of the way now and we'll go

00:00:36,149 --> 00:00:40,410
on with the presentation so what is

00:00:38,370 --> 00:00:42,239
kubernetes kubernetes is an open-source

00:00:40,410 --> 00:00:44,460
platform for managing containerized

00:00:42,239 --> 00:00:46,230
workloads at scale as a container

00:00:44,460 --> 00:00:48,480
orchestration system it can help you

00:00:46,230 --> 00:00:50,520
automate application deployment scaling

00:00:48,480 --> 00:00:52,199
and management in other words you can

00:00:50,520 --> 00:00:54,360
cluster together groups of machines or

00:00:52,199 --> 00:00:55,649
hosts running containers and kubernetes

00:00:54,360 --> 00:00:58,260
will help you easily and efficiently

00:00:55,649 --> 00:01:00,149
manage those clusters the kubernetes

00:00:58,260 --> 00:01:02,430
cluster consists of different kubernetes

00:01:00,149 --> 00:01:04,049
objects things like pods services and

00:01:02,430 --> 00:01:04,939
deployments which we'll learn about

00:01:04,049 --> 00:01:07,890
later

00:01:04,939 --> 00:01:09,900
these kubernetes objects are persistent

00:01:07,890 --> 00:01:12,000
entities that represent the state of

00:01:09,900 --> 00:01:16,170
your cluster and you can manage them

00:01:12,000 --> 00:01:17,939
with the kubernetes api here's a list of

00:01:16,170 --> 00:01:19,290
some of the most common objects that

00:01:17,939 --> 00:01:22,229
kubernetes implements

00:01:19,290 --> 00:01:24,450
pods deployments namespaces services and

00:01:22,229 --> 00:01:27,420
so on and you work with each of these

00:01:24,450 --> 00:01:30,180
using the kubernetes api but you don't

00:01:27,420 --> 00:01:31,979
have to just use the raw api you can

00:01:30,180 --> 00:01:34,020
also use command line tools like cube

00:01:31,979 --> 00:01:36,119
CTL or cube cut' all depending on how

00:01:34,020 --> 00:01:39,119
you like to pronounce it which wrap the

00:01:36,119 --> 00:01:41,250
kubernetes api kubernetes distributions

00:01:39,119 --> 00:01:43,350
like open chests also have a web

00:01:41,250 --> 00:01:45,720
interface that you can use to simplify

00:01:43,350 --> 00:01:48,899
the management and deployment of

00:01:45,720 --> 00:01:51,780
applications on your cluster so when you

00:01:48,899 --> 00:01:53,880
create objects in kubernetes that works

00:01:51,780 --> 00:01:55,680
as a record of intent you're telling the

00:01:53,880 --> 00:01:58,649
kubernetes cluster what your desired

00:01:55,680 --> 00:02:01,860
state will be for example I could say

00:01:58,649 --> 00:02:04,649
that I want to deploy a pod running a

00:02:01,860 --> 00:02:06,450
certain image kubernetes will

00:02:04,649 --> 00:02:08,759
continually work to try to bring the

00:02:06,450 --> 00:02:12,170
actual state in line with the desired

00:02:08,759 --> 00:02:12,170
state that we have asked for

00:02:13,200 --> 00:02:18,750
the kubernetes api is a restful api and

00:02:16,500 --> 00:02:21,390
as I mentioned you can interact with a

00:02:18,750 --> 00:02:25,349
cluster directly using the API or using

00:02:21,390 --> 00:02:27,120
command-line tools like cube CTL there

00:02:25,349 --> 00:02:28,890
are also rest clients for many languages

00:02:27,120 --> 00:02:30,690
that you can use and our demo is going

00:02:28,890 --> 00:02:33,600
to use a node jsq Burnet ease rest

00:02:30,690 --> 00:02:35,459
client in kubernetes api object

00:02:33,600 --> 00:02:38,370
primitives include these fields that you

00:02:35,459 --> 00:02:40,290
see here kind telling you what kind of

00:02:38,370 --> 00:02:42,720
resource this is that's the object type

00:02:40,290 --> 00:02:45,060
pod deployment for example an API

00:02:42,720 --> 00:02:47,100
version metadata which can include

00:02:45,060 --> 00:02:50,040
fields like the name of the object a

00:02:47,100 --> 00:02:52,739
spec this is where you give your desired

00:02:50,040 --> 00:02:54,840
state and then a status which is what

00:02:52,739 --> 00:02:56,730
the kubernetes cluster reports back to

00:02:54,840 --> 00:02:59,310
you letting you know how close you've

00:02:56,730 --> 00:03:02,069
gotten to reaching that desired state in

00:02:59,310 --> 00:03:04,319
your spec many of the objects will have

00:03:02,069 --> 00:03:06,989
more fields than this but in almost

00:03:04,319 --> 00:03:12,660
every case an API object will at least

00:03:06,989 --> 00:03:14,670
have these five fields let's talk now

00:03:12,660 --> 00:03:18,120
about some of these basic resource types

00:03:14,670 --> 00:03:20,910
we'll start with a pod a pod is a group

00:03:18,120 --> 00:03:23,910
of one or more co-located containers in

00:03:20,910 --> 00:03:26,370
many cases a pod is just running one

00:03:23,910 --> 00:03:28,590
container but it is possible for a pod

00:03:26,370 --> 00:03:30,950
to have more than one container running

00:03:28,590 --> 00:03:33,720
for example in the case of a sidecar

00:03:30,950 --> 00:03:36,750
pods are also the minimum unit of scale

00:03:33,720 --> 00:03:38,959
in kubernetes you can scale up and down

00:03:36,750 --> 00:03:42,120
the number of pods that you have running

00:03:38,959 --> 00:03:44,790
here's an example of a pod spec on the

00:03:42,120 --> 00:03:46,859
right this example is using Hamel but

00:03:44,790 --> 00:03:49,370
it's interesting to note that you can

00:03:46,859 --> 00:03:51,120
also use JSON and you can use the two

00:03:49,370 --> 00:03:54,000
interchangeably when you're active

00:03:51,120 --> 00:03:56,040
interacting with kubernetes so in this

00:03:54,000 --> 00:03:59,459
example you can see that the kind is pod

00:03:56,040 --> 00:04:01,019
our API version is v1 in our metadata we

00:03:59,459 --> 00:04:04,019
have some information including the name

00:04:01,019 --> 00:04:06,299
of this pod which will be hello - k8s

00:04:04,019 --> 00:04:08,190
and then importantly let's notice that

00:04:06,299 --> 00:04:11,880
we have some labels we have a label

00:04:08,190 --> 00:04:14,430
which is just a key value pair where we

00:04:11,880 --> 00:04:16,530
have run and then a value of Hello k8s

00:04:14,430 --> 00:04:19,139
our demo is going to always be

00:04:16,530 --> 00:04:21,959
displaying resources that include this

00:04:19,139 --> 00:04:23,820
particular label and then we have our

00:04:21,959 --> 00:04:26,700
spec which is a container spec in this

00:04:23,820 --> 00:04:26,910
case it's going to specify the name for

00:04:26,700 --> 00:04:29,010
it

00:04:26,910 --> 00:04:31,890
Tanner what image we want to use and

00:04:29,010 --> 00:04:34,800
then some ports that the image uses when

00:04:31,890 --> 00:04:39,000
it's running so let's take a look at a

00:04:34,800 --> 00:04:40,590
demo now Before we jump into the demo

00:04:39,000 --> 00:04:42,930
let me explain a little bit about how

00:04:40,590 --> 00:04:45,720
this demo is going to work I have my

00:04:42,930 --> 00:04:48,990
keytar here it's connected to my laptop

00:04:45,720 --> 00:04:51,630
with this USB MIDI cable and so when I

00:04:48,990 --> 00:04:54,060
play notes on the keytar it's sending

00:04:51,630 --> 00:04:55,860
those MIDI messages to my computer and

00:04:54,060 --> 00:04:57,750
therefore to my browser which is

00:04:55,860 --> 00:05:00,030
listening for certain notes to be played

00:04:57,750 --> 00:05:01,860
depending on what note is played it's

00:05:00,030 --> 00:05:04,500
going to trigger a request the

00:05:01,860 --> 00:05:08,460
kubernetes api to do something on my

00:05:04,500 --> 00:05:10,290
cluster you should probably take a

00:05:08,460 --> 00:05:12,900
minute to talk about MIDI in the web

00:05:10,290 --> 00:05:15,030
MIDI API MIDI stands for musical

00:05:12,900 --> 00:05:16,350
instrument digital interface and it's a

00:05:15,030 --> 00:05:19,140
technical standard that's been around

00:05:16,350 --> 00:05:21,030
since the 1980s it's designed for

00:05:19,140 --> 00:05:23,660
communication between digital musical

00:05:21,030 --> 00:05:27,690
instruments like my keytar audio devices

00:05:23,660 --> 00:05:29,670
computers and so on communication and

00:05:27,690 --> 00:05:31,500
MIDI happens through MIDI messages in

00:05:29,670 --> 00:05:33,330
our demo app we're listening for a

00:05:31,500 --> 00:05:35,880
particular type of message called a

00:05:33,330 --> 00:05:38,010
channel voice message and it consists of

00:05:35,880 --> 00:05:40,110
three numeric values the first is the

00:05:38,010 --> 00:05:42,419
type of event it is we're listening for

00:05:40,110 --> 00:05:44,910
the note on event which is what happens

00:05:42,419 --> 00:05:48,810
when I press a key on the keytar the

00:05:44,910 --> 00:05:50,250
note on event has a value of 144 second

00:05:48,810 --> 00:05:53,400
piece of information is the note number

00:05:50,250 --> 00:05:55,590
so note number can range from 0 to 127

00:05:53,400 --> 00:05:59,550
and to give you a frame of reference

00:05:55,590 --> 00:06:01,620
middle C is 60 on that scale the third

00:05:59,550 --> 00:06:03,870
value is velocity which corresponds to

00:06:01,620 --> 00:06:07,169
how hard I'm pressing the key on the

00:06:03,870 --> 00:06:09,600
keytar very very softly would be towards

00:06:07,169 --> 00:06:12,750
the 0 end of the range and extremely

00:06:09,600 --> 00:06:16,440
hard extremely loud notes would be

00:06:12,750 --> 00:06:18,660
higher up in the range so every time I

00:06:16,440 --> 00:06:20,880
press a key on the keytar it's sending a

00:06:18,660 --> 00:06:24,419
channel voice message that includes all

00:06:20,880 --> 00:06:27,120
of these pieces of information to put it

00:06:24,419 --> 00:06:29,790
all together the web MIDI API allows us

00:06:27,120 --> 00:06:32,220
to interact with those MIDI messages in

00:06:29,790 --> 00:06:34,710
our browser you can see a code snippet

00:06:32,220 --> 00:06:37,050
here showing how you would check if web

00:06:34,710 --> 00:06:39,000
MIDI is supported in your browser this

00:06:37,050 --> 00:06:39,569
is important because web MIDI API is

00:06:39,000 --> 00:06:42,319
only

00:06:39,569 --> 00:06:44,699
supported currently in Chrome and opera

00:06:42,319 --> 00:06:46,649
then if you do have access you can

00:06:44,699 --> 00:06:48,929
request that access and listen for MIDI

00:06:46,649 --> 00:06:50,789
success and MIDI failure messages the

00:06:48,929 --> 00:06:53,550
web app that we're using for our demo is

00:06:50,789 --> 00:06:56,099
using the kubernetes api the web MIDI

00:06:53,550 --> 00:06:59,429
API and for the front-end visualizations

00:06:56,099 --> 00:07:00,899
it's using react and SVG so in this

00:06:59,429 --> 00:07:02,939
first case I'm gonna play a certain

00:07:00,899 --> 00:07:05,069
series of notes which will then trigger

00:07:02,939 --> 00:07:07,919
a pod to be created it's a little

00:07:05,069 --> 00:07:08,939
overkill but it's really fun so let's

00:07:07,919 --> 00:07:10,919
try it out

00:07:08,939 --> 00:07:13,349
it's over here vs code you can see I've

00:07:10,919 --> 00:07:15,629
got a pod spec in this case happens to

00:07:13,349 --> 00:07:17,699
be in JSON as I mentioned before these

00:07:15,629 --> 00:07:20,189
can be used interchangeably JSON and

00:07:17,699 --> 00:07:21,689
yamo this I believe is exactly the same

00:07:20,189 --> 00:07:24,529
pod spec as we showed in the

00:07:21,689 --> 00:07:27,240
presentation just in a different format

00:07:24,529 --> 00:07:30,629
so we're gonna play a certain riff on

00:07:27,240 --> 00:07:35,880
the keytar to deploy this pod on our

00:07:30,629 --> 00:07:42,589
cluster let's take a look alright

00:07:35,880 --> 00:07:45,599
[Music]

00:07:42,589 --> 00:07:48,360
alright so with that riff we have

00:07:45,599 --> 00:07:50,789
launched a pod on our cluster you can

00:07:48,360 --> 00:07:52,680
see that as the pod came up it turned

00:07:50,789 --> 00:07:54,869
from yellow to green and so what was

00:07:52,680 --> 00:07:56,789
happening there is yellow was in pending

00:07:54,869 --> 00:07:59,819
state as the container is being brought

00:07:56,789 --> 00:08:01,499
up and then once it was ready we turn it

00:07:59,819 --> 00:08:04,680
green so that you can visualize that

00:08:01,499 --> 00:08:06,119
that pot is ready and running okay so we

00:08:04,680 --> 00:08:08,369
have our pod up and running that's great

00:08:06,119 --> 00:08:10,110
but that's not very exciting next we're

00:08:08,369 --> 00:08:12,509
gonna take a look at services which give

00:08:10,110 --> 00:08:14,369
us a way to more easily interact with

00:08:12,509 --> 00:08:16,740
that pod from within the cluster all

00:08:14,369 --> 00:08:18,899
right let's move on to service so a

00:08:16,740 --> 00:08:21,749
service you can think of it like a load

00:08:18,899 --> 00:08:24,449
balancer it acts as a single endpoint

00:08:21,749 --> 00:08:26,610
for a collection of replicated pods in

00:08:24,449 --> 00:08:28,829
our previous example we just had a

00:08:26,610 --> 00:08:31,110
single pod imagine what would happen if

00:08:28,829 --> 00:08:33,300
we tried to access that pod but it had

00:08:31,110 --> 00:08:35,729
crashed and we brought up a new one

00:08:33,300 --> 00:08:38,130
which had a different IP address that

00:08:35,729 --> 00:08:40,380
would be a lot to manage or imagine if

00:08:38,130 --> 00:08:43,110
we had multiple pods running and we

00:08:40,380 --> 00:08:44,910
wanted to be able to balance load across

00:08:43,110 --> 00:08:47,579
those that's where a service can be

00:08:44,910 --> 00:08:50,250
helpful here's an example of what the

00:08:47,579 --> 00:08:53,430
spec first service looks like again we

00:08:50,250 --> 00:08:55,200
have our kind service our metadata

00:08:53,430 --> 00:08:57,270
we have a name for our service just like

00:08:55,200 --> 00:09:00,480
we did for the pod we also are including

00:08:57,270 --> 00:09:02,850
the same label run hello k8s and here

00:09:00,480 --> 00:09:05,370
the spec looks a little bit different so

00:09:02,850 --> 00:09:07,830
in respect we have the ports that we're

00:09:05,370 --> 00:09:09,540
using for this service and then we have

00:09:07,830 --> 00:09:11,880
a selector the selector is very

00:09:09,540 --> 00:09:14,190
important the selector is a label

00:09:11,880 --> 00:09:15,510
they're going to look for in the pods

00:09:14,190 --> 00:09:18,149
that are running and that's how we

00:09:15,510 --> 00:09:20,399
associate certain pods with our service

00:09:18,149 --> 00:09:21,390
our service will act on any pods that

00:09:20,399 --> 00:09:23,850
have this run

00:09:21,390 --> 00:09:25,290
hello k8s label let's take a look at a

00:09:23,850 --> 00:09:28,290
demo where we add a service to our

00:09:25,290 --> 00:09:31,760
cluster so looking at services now we

00:09:28,290 --> 00:09:35,700
are back in vs code we have our service

00:09:31,760 --> 00:09:39,060
spec here again just like we saw in the

00:09:35,700 --> 00:09:40,620
presentation but in JSON instead alright

00:09:39,060 --> 00:09:42,720
so now we're going to deploy that

00:09:40,620 --> 00:09:51,029
service on our cluster by playing part

00:09:42,720 --> 00:09:54,000
of take on me and there we go our

00:09:51,029 --> 00:09:56,250
service is now created you can see this

00:09:54,000 --> 00:09:59,550
line connecting the pod and the service

00:09:56,250 --> 00:10:01,830
and that's to represent that connection

00:09:59,550 --> 00:10:05,580
between the two which is established by

00:10:01,830 --> 00:10:08,070
that selector the label run hello k8s so

00:10:05,580 --> 00:10:11,100
if we had more than one pod running with

00:10:08,070 --> 00:10:13,170
that same label you would see that the

00:10:11,100 --> 00:10:15,209
service could direct traffic to either

00:10:13,170 --> 00:10:17,130
of those pods and you could have more

00:10:15,209 --> 00:10:19,350
than two so the service is effectively

00:10:17,130 --> 00:10:21,060
going to act as a load balancer if I

00:10:19,350 --> 00:10:24,089
were to get the IP address of that

00:10:21,060 --> 00:10:26,580
service from within the cluster I could

00:10:24,089 --> 00:10:29,670
contact that service and it will assign

00:10:26,580 --> 00:10:31,170
my request to any one of the pods that

00:10:29,670 --> 00:10:32,640
are associated with the service in this

00:10:31,170 --> 00:10:34,350
case there's just one pod so there's

00:10:32,640 --> 00:10:36,660
only one place for it to go but if we

00:10:34,350 --> 00:10:39,420
did have multiple pods it would handle

00:10:36,660 --> 00:10:40,860
that routing of requests before us now

00:10:39,420 --> 00:10:43,350
typically within a kubernetes cluster

00:10:40,860 --> 00:10:45,870
you're not just manually spending up

00:10:43,350 --> 00:10:48,209
pods part of the reason for that is if

00:10:45,870 --> 00:10:50,550
this pod were to crash that's it it

00:10:48,209 --> 00:10:53,820
wouldn't come back we would have nothing

00:10:50,550 --> 00:10:55,380
to access with our service one of the

00:10:53,820 --> 00:10:58,350
benefits of kubernetes is it's

00:10:55,380 --> 00:10:59,880
self-healing capabilities and to take

00:10:58,350 --> 00:11:02,370
advantage of those you need some of

00:10:59,880 --> 00:11:04,620
these different object types like

00:11:02,370 --> 00:11:06,029
deployments which we'll look at next so

00:11:04,620 --> 00:11:07,040
now you've seen what we can do with the

00:11:06,029 --> 00:11:09,870
pod and the sir

00:11:07,040 --> 00:11:12,990
but it's not really standard practice to

00:11:09,870 --> 00:11:14,760
just deploy pods on their own one of the

00:11:12,990 --> 00:11:16,350
wonderful things about kubernetes is

00:11:14,760 --> 00:11:18,960
that it has these kind of auto recovery

00:11:16,350 --> 00:11:20,910
auto healing capabilities but you don't

00:11:18,960 --> 00:11:22,620
get that when you deploy a pod on its

00:11:20,910 --> 00:11:24,210
own you start getting some of those

00:11:22,620 --> 00:11:26,640
benefits when you use things like a

00:11:24,210 --> 00:11:28,350
deployment but deployment is going to

00:11:26,640 --> 00:11:31,140
help you specify container runtime

00:11:28,350 --> 00:11:33,210
requirements in terms of pods so for

00:11:31,140 --> 00:11:35,850
example with the deployment we have here

00:11:33,210 --> 00:11:37,590
we're specifying a number of replicas we

00:11:35,850 --> 00:11:39,720
say we want one replicas that means one

00:11:37,590 --> 00:11:42,930
instance of this container running in a

00:11:39,720 --> 00:11:45,330
pod we're giving it some labels again

00:11:42,930 --> 00:11:47,520
run hello k8s we see just like we did

00:11:45,330 --> 00:11:48,930
with the pod in the service and then

00:11:47,520 --> 00:11:50,880
within this deployment we have a

00:11:48,930 --> 00:11:53,970
template which we didn't see before

00:11:50,880 --> 00:11:56,400
so this template includes some metadata

00:11:53,970 --> 00:11:59,040
like our labels and also has a container

00:11:56,400 --> 00:12:01,230
spec embedded within it so in this case

00:11:59,040 --> 00:12:04,410
the deployment we're going to want run

00:12:01,230 --> 00:12:06,330
one replica of our container that is

00:12:04,410 --> 00:12:09,620
running this image that we've specified

00:12:06,330 --> 00:12:12,330
here let's take a look at how that works

00:12:09,620 --> 00:12:14,130
but first before we move on let's clean

00:12:12,330 --> 00:12:15,750
up after myself by getting rid of this

00:12:14,130 --> 00:12:22,200
pod we're gonna keep the service there

00:12:15,750 --> 00:12:24,180
but we'll get rid of the pod you notice

00:12:22,200 --> 00:12:26,580
nothing quite happened right away when

00:12:24,180 --> 00:12:28,320
we mark a pod for deletion it takes a

00:12:26,580 --> 00:12:30,330
little while before those resources are

00:12:28,320 --> 00:12:31,890
cleaned up so you'll see the pod hang

00:12:30,330 --> 00:12:34,430
around for a little bit before it

00:12:31,890 --> 00:12:34,430
disappears

00:12:36,780 --> 00:12:44,370
all right let's move on to deployments

00:12:39,800 --> 00:12:47,930
so here is our deployment like we saw in

00:12:44,370 --> 00:12:50,810
the slides we are asking for one replica

00:12:47,930 --> 00:12:54,240
here's our container that we want to run

00:12:50,810 --> 00:12:55,470
so let's give it a shot okay so to get

00:12:54,240 --> 00:12:57,150
our deployment up and running on the

00:12:55,470 --> 00:12:59,070
cluster we're going to play a part of

00:12:57,150 --> 00:13:00,510
final countdown this is honestly the

00:12:59,070 --> 00:13:13,440
hardest part of the demo is playing

00:13:00,510 --> 00:13:16,620
these rifts correctly so I hope it be so

00:13:13,440 --> 00:13:18,960
when our deployment was created you can

00:13:16,620 --> 00:13:21,450
see it's it's visualized here and then

00:13:18,960 --> 00:13:23,640
that pod was also created with the

00:13:21,450 --> 00:13:25,920
deployment you can see that the pods

00:13:23,640 --> 00:13:28,320
name is a lot different now it's much

00:13:25,920 --> 00:13:30,900
longer and that pod name was auto

00:13:28,320 --> 00:13:32,880
generated by the deployment and you'll

00:13:30,900 --> 00:13:34,830
notice that it automatically got that

00:13:32,880 --> 00:13:36,510
line connecting it to the service and

00:13:34,830 --> 00:13:38,430
the reason this works is because we had

00:13:36,510 --> 00:13:42,150
all the proper labels and selectors set

00:13:38,430 --> 00:13:44,400
up in our deployment and service now

00:13:42,150 --> 00:13:46,140
this isn't very exciting right here's

00:13:44,400 --> 00:13:49,260
our deployment with just a single pod

00:13:46,140 --> 00:13:51,780
with our service what would this look

00:13:49,260 --> 00:13:54,300
like if instead of having one replica we

00:13:51,780 --> 00:13:57,300
wanted to have three let's try that now

00:13:54,300 --> 00:13:58,860
and this time instead of doing that with

00:13:57,300 --> 00:14:01,020
the keytar let me show you what it looks

00:13:58,860 --> 00:14:02,790
like if we use the cube CTL command line

00:14:01,020 --> 00:14:04,650
tool just to give you another view into

00:14:02,790 --> 00:14:08,400
how people can interact with kubernetes

00:14:04,650 --> 00:14:12,210
clusters okay so we're gonna go side by

00:14:08,400 --> 00:14:15,090
side with the demo app on one side and

00:14:12,210 --> 00:14:17,190
our terminal on the other and what we're

00:14:15,090 --> 00:14:20,430
going to do is use the cube CTL command

00:14:17,190 --> 00:14:22,920
line tool to scale up our deployment

00:14:20,430 --> 00:14:25,140
from one replica to three replicas and

00:14:22,920 --> 00:14:28,170
the way we would do that is this cube

00:14:25,140 --> 00:14:29,820
ztl scale we tell it the name of the

00:14:28,170 --> 00:14:30,710
deployment we want to scale so the

00:14:29,820 --> 00:14:36,300
deployment

00:14:30,710 --> 00:14:39,330
/hello hey s and then we call it - -

00:14:36,300 --> 00:14:41,010
replicas equals three so what that's

00:14:39,330 --> 00:14:43,200
going to do is say hey scale this

00:14:41,010 --> 00:14:44,880
deployment from one replica or from

00:14:43,200 --> 00:14:48,060
whatever number of replicas it currently

00:14:44,880 --> 00:14:50,400
is up to three three is our new desired

00:14:48,060 --> 00:14:52,710
State so as

00:14:50,400 --> 00:14:55,020
we do this what you should see is that

00:14:52,710 --> 00:14:57,090
almost immediately these two new pods

00:14:55,020 --> 00:14:59,790
are created they're in that yellow

00:14:57,090 --> 00:15:02,640
pending state until that container is up

00:14:59,790 --> 00:15:04,920
and running but now we have three pods

00:15:02,640 --> 00:15:06,570
running in our deployment that

00:15:04,920 --> 00:15:09,900
deployment is managing these three pods

00:15:06,570 --> 00:15:11,760
and our service is also associated with

00:15:09,900 --> 00:15:13,440
all three of those pods so if I were to

00:15:11,760 --> 00:15:15,570
make a request to this service within

00:15:13,440 --> 00:15:17,280
our cluster it would get routed to one

00:15:15,570 --> 00:15:20,010
of those pods but it doesn't matter to

00:15:17,280 --> 00:15:21,660
me as a user which one it is

00:15:20,010 --> 00:15:23,550
it also doesn't matter if one of these

00:15:21,660 --> 00:15:25,710
were to crash because one the service

00:15:23,550 --> 00:15:27,600
can route me to another pod and to

00:15:25,710 --> 00:15:29,520
kubernetes would work to bring up

00:15:27,600 --> 00:15:32,640
another pod so that would always have

00:15:29,520 --> 00:15:35,490
three running so for fun let's take a

00:15:32,640 --> 00:15:38,190
look at what that self-healing auto

00:15:35,490 --> 00:15:40,530
recovery process looks like you heard

00:15:38,190 --> 00:15:42,390
before when we played you know the intro

00:15:40,530 --> 00:15:44,760
to Beethoven's fifth to kill the pod

00:15:42,390 --> 00:15:47,160
before let's do the same thing now and

00:15:44,760 --> 00:15:49,260
remember it's going to mark that pod for

00:15:47,160 --> 00:15:50,790
deletion so while the pod will hang

00:15:49,260 --> 00:15:52,410
around for a little bit you'll see that

00:15:50,790 --> 00:15:54,390
communities will immediately take action

00:15:52,410 --> 00:16:01,890
to bring up another one to replace it

00:15:54,390 --> 00:16:04,110
even before it's all the way gone and

00:16:01,890 --> 00:16:07,110
there you go you can see this new one

00:16:04,110 --> 00:16:10,800
being created and then once the pod that

00:16:07,110 --> 00:16:12,870
we did delete is completely deleted and

00:16:10,800 --> 00:16:14,790
terminated and cleaned up after you'll

00:16:12,870 --> 00:16:17,610
see that that disappears and we're back

00:16:14,790 --> 00:16:20,790
to our desired state of three pods just

00:16:17,610 --> 00:16:23,040
like we asked for now with all of the

00:16:20,790 --> 00:16:25,740
kubernetes api commands that I issued

00:16:23,040 --> 00:16:27,690
using the keytar in the API we could

00:16:25,740 --> 00:16:30,510
have done all of these things via cube

00:16:27,690 --> 00:16:32,760
CTL as well or in the case of our

00:16:30,510 --> 00:16:35,040
openshift cluster we could use the web

00:16:32,760 --> 00:16:37,260
console to view and interact with these

00:16:35,040 --> 00:16:39,360
resources I'll give you a quick look

00:16:37,260 --> 00:16:41,280
here this is the topology view within

00:16:39,360 --> 00:16:43,770
the developer perspective of the web

00:16:41,280 --> 00:16:46,560
console you can see our deployment here

00:16:43,770 --> 00:16:48,890
if I click on to this you can see we've

00:16:46,560 --> 00:16:53,070
got three pods running I can also show

00:16:48,890 --> 00:16:54,900
pod count if that's helpful right there

00:16:53,070 --> 00:16:56,730
you can see our three pods that are

00:16:54,900 --> 00:17:01,350
running if I wanted to look at more

00:16:56,730 --> 00:17:03,750
details for example if I wanted to look

00:17:01,350 --> 00:17:07,140
at more details on the

00:17:03,750 --> 00:17:09,300
deployment itself I can always go in and

00:17:07,140 --> 00:17:11,010
look at the yeah mo for it here but a

00:17:09,300 --> 00:17:13,589
lot of the time I like to work in the

00:17:11,010 --> 00:17:15,150
topology view where I can get to most of

00:17:13,589 --> 00:17:17,699
the things that I need just with a

00:17:15,150 --> 00:17:18,870
couple clicks including pod logs if you

00:17:17,699 --> 00:17:21,240
wanted to see what was running there

00:17:18,870 --> 00:17:23,069
alright so that concludes our demo and

00:17:21,240 --> 00:17:25,260
we'll pop back over into the

00:17:23,069 --> 00:17:27,930
presentation now so we've only looked at

00:17:25,260 --> 00:17:30,630
a few examples of kubernetes objects

00:17:27,930 --> 00:17:32,520
pods services deployments and so on

00:17:30,630 --> 00:17:34,350
there's so much more that you can learn

00:17:32,520 --> 00:17:35,640
but hopefully this gives you a good

00:17:34,350 --> 00:17:38,520
starting point and helps you visualize

00:17:35,640 --> 00:17:40,860
how these objects work together on a

00:17:38,520 --> 00:17:43,080
cluster we've also talked a little bit

00:17:40,860 --> 00:17:45,450
about the kubernetes api and I've shown

00:17:43,080 --> 00:17:48,870
you how you can interact with the API to

00:17:45,450 --> 00:17:50,850
take actions on a cluster or how you can

00:17:48,870 --> 00:17:53,970
use cube CTL command line tool to

00:17:50,850 --> 00:17:55,320
interact as well at this point if you'd

00:17:53,970 --> 00:17:57,480
like to learn more we have a lot of

00:17:55,320 --> 00:17:59,940
resources available I've listed a few

00:17:57,480 --> 00:18:02,430
kubernetes and open ship resources here

00:17:59,940 --> 00:18:04,500
kubernetes i/o is the official

00:18:02,430 --> 00:18:06,650
kubernetes website has tons of great

00:18:04,500 --> 00:18:09,150
documentation examples and more

00:18:06,650 --> 00:18:11,250
kubernetes by example.com is a great

00:18:09,150 --> 00:18:13,290
resource with some practical examples of

00:18:11,250 --> 00:18:15,720
how you can use and interact with

00:18:13,290 --> 00:18:17,880
different object types learn dot

00:18:15,720 --> 00:18:20,340
OpenShift comm is a self-paced

00:18:17,880 --> 00:18:22,770
interactive learning platform where you

00:18:20,340 --> 00:18:24,720
can learn about kubernetes and OpenShift

00:18:22,770 --> 00:18:26,370
in a hands-on way you get quick access

00:18:24,720 --> 00:18:29,190
to and openshift kubernetes cluster

00:18:26,370 --> 00:18:30,930
where you can experiment and learn the

00:18:29,190 --> 00:18:32,760
final two links are to some more

00:18:30,930 --> 00:18:34,890
resources on developers debt Red Hat

00:18:32,760 --> 00:18:37,200
comm there's a page for kubernetes

00:18:34,890 --> 00:18:38,550
resources as well as one for openshift

00:18:37,200 --> 00:18:41,760
and there's a lot of great material in

00:18:38,550 --> 00:18:43,950
there to help you learn more next we

00:18:41,760 --> 00:18:46,530
have the github repos the first one here

00:18:43,950 --> 00:18:48,600
is the repo for the kubernetes by keytar

00:18:46,530 --> 00:18:51,030
demo app if you want to take a look at

00:18:48,600 --> 00:18:53,010
that below that we have the Go Daddy

00:18:51,030 --> 00:18:56,610
kubernetes client this is the node.js

00:18:53,010 --> 00:18:59,160
kubernetes client that I used in my demo

00:18:56,610 --> 00:19:00,540
there is also an open chef tress client

00:18:59,160 --> 00:19:02,490
if you want to interact with some of

00:19:00,540 --> 00:19:05,250
those openshift specific resources that

00:19:02,490 --> 00:19:07,890
are available on top of kubernetes so

00:19:05,250 --> 00:19:10,040
for example things like routes and

00:19:07,890 --> 00:19:11,910
projects and things like that

00:19:10,040 --> 00:19:14,310
finally if you'd like to get in touch

00:19:11,910 --> 00:19:16,269
with me I'd love to hear from you you

00:19:14,310 --> 00:19:19,209
can find a link to my Twitter and I get

00:19:16,269 --> 00:19:20,200
hub accounts here thank you for watching

00:19:19,209 --> 00:19:22,899
hope you learned something about

00:19:20,200 --> 00:19:24,609
kubernetes and the web MIDI API and had

00:19:22,899 --> 00:19:26,909
a little bit of fun thanks so much for

00:19:24,609 --> 00:19:26,909
your time

00:19:35,149 --> 00:19:37,210

YouTube URL: https://www.youtube.com/watch?v=ASkeTIqWdvQ


