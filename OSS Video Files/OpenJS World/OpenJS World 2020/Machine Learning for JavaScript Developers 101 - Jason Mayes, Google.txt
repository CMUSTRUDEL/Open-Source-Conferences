Title: Machine Learning for JavaScript Developers 101 - Jason Mayes, Google
Publication date: 2020-06-19
Playlist: OpenJS World 2020
Description: 
	
Captions: 
	00:00:05,509 --> 00:00:09,750
hello everyone my name is Jason Mays I'm

00:00:08,250 --> 00:00:12,090
the developer advocate for tensorflow

00:00:09,750 --> 00:00:13,500
ajs here at Google which basically means

00:00:12,090 --> 00:00:15,330
that if you're using machine learning in

00:00:13,500 --> 00:00:16,950
JavaScript in some shape or form out in

00:00:15,330 --> 00:00:19,439
the wild there's a good chance we'll

00:00:16,950 --> 00:00:20,760
cross paths at some point now if that's

00:00:19,439 --> 00:00:22,199
today I'm contort to you about using

00:00:20,760 --> 00:00:24,539
machine learning in JavaScript of course

00:00:22,199 --> 00:00:26,070
so let's get started now first up I want

00:00:24,539 --> 00:00:28,230
to talk about how machine learning has

00:00:26,070 --> 00:00:30,359
the potential to revolutionize every

00:00:28,230 --> 00:00:32,759
industry not just protect ones but all

00:00:30,359 --> 00:00:34,769
of them in fact we could be standing

00:00:32,759 --> 00:00:37,290
right here the beginning of a new age

00:00:34,769 --> 00:00:39,089
we've already been proved industrial and

00:00:37,290 --> 00:00:40,500
scientific revolutions but what about

00:00:39,089 --> 00:00:42,150
the future that could be a machine

00:00:40,500 --> 00:00:44,280
learning one too and we could be at the

00:00:42,150 --> 00:00:45,780
very beginning of that right now this is

00:00:44,280 --> 00:00:47,220
a really exciting time to start learning

00:00:45,780 --> 00:00:49,110
about machine learning as you can jump

00:00:47,220 --> 00:00:51,180
on the bandwagon early and really get

00:00:49,110 --> 00:00:53,250
involved and have impact of course

00:00:51,180 --> 00:00:54,960
before I get started on that what's the

00:00:53,250 --> 00:00:56,549
difference between artificial

00:00:54,960 --> 00:00:58,170
intelligence machine learning and deep

00:00:56,549 --> 00:01:00,119
learning I'm sure many of you today have

00:00:58,170 --> 00:01:02,309
very different backgrounds and it's

00:01:00,119 --> 00:01:03,720
important to understand what all this is

00:01:02,309 --> 00:01:05,880
all about then where it comes from

00:01:03,720 --> 00:01:06,900
and what all these key terms mean so we

00:01:05,880 --> 00:01:10,140
can understand what we're going to be

00:01:06,900 --> 00:01:12,179
making later on now first off I want to

00:01:10,140 --> 00:01:14,310
start with artificial intelligence also

00:01:12,179 --> 00:01:16,259
known as AI this is essentially the

00:01:14,310 --> 00:01:18,600
science of making things smart or more

00:01:16,259 --> 00:01:20,759
formally human intelligence exhibited by

00:01:18,600 --> 00:01:22,920
machines but this is a very broad term

00:01:20,759 --> 00:01:25,560
in fact and right now we're actually in

00:01:22,920 --> 00:01:27,240
a place of narrow AI this basically

00:01:25,560 --> 00:01:29,700
means that the system can do one or a

00:01:27,240 --> 00:01:31,469
few things just as well as a human

00:01:29,700 --> 00:01:34,200
counterpart gives you in that niche area

00:01:31,469 --> 00:01:36,899
such as recognizing objects and a great

00:01:34,200 --> 00:01:38,159
example of that is when people in the

00:01:36,899 --> 00:01:40,460
medical industry are trying to

00:01:38,159 --> 00:01:44,039
understand what brain tumors did like

00:01:40,460 --> 00:01:45,719
nowadays experts use machine learning to

00:01:44,039 --> 00:01:47,969
actually work alongside them to help

00:01:45,719 --> 00:01:50,069
point out what parts of an image may

00:01:47,969 --> 00:01:52,469
contain a brain tumor for example and

00:01:50,069 --> 00:01:54,479
this leads to better results because

00:01:52,469 --> 00:01:55,289
sometimes it's just too grainy for the

00:01:54,479 --> 00:01:56,969
human eye to see

00:01:55,289 --> 00:01:58,350
but ml can pick up on these fine

00:01:56,969 --> 00:02:00,509
differences which leads to better

00:01:58,350 --> 00:02:02,310
results for both the patients and of

00:02:00,509 --> 00:02:04,950
course for doctor now machine learning

00:02:02,310 --> 00:02:06,479
on the other hand or ml in short is an

00:02:04,950 --> 00:02:08,009
approach to achieve artificial

00:02:06,479 --> 00:02:09,000
intelligence that we just spoke about on

00:02:08,009 --> 00:02:10,950
the previous slide

00:02:09,000 --> 00:02:13,200
now the key part about these systems is

00:02:10,950 --> 00:02:14,760
that they can be reused and this is done

00:02:13,200 --> 00:02:16,770
by creating systems that can learn to

00:02:14,760 --> 00:02:18,390
find patterns in their data presented of

00:02:16,770 --> 00:02:20,400
them this is that the implement

00:02:18,390 --> 00:02:22,200
in level if you will so if you have an

00:02:20,400 --> 00:02:25,050
ml system that is trained to recognize

00:02:22,200 --> 00:02:26,940
cats you can use the same system to

00:02:25,050 --> 00:02:29,310
recognize dogs just by giving it

00:02:26,940 --> 00:02:31,230
different sample training data so if we

00:02:29,310 --> 00:02:32,700
just roll back to traditional

00:02:31,230 --> 00:02:34,709
programming as you can see on this slide

00:02:32,700 --> 00:02:36,000
here you can see that in the old days

00:02:34,709 --> 00:02:38,670
we'd use lots of conditional statements

00:02:36,000 --> 00:02:40,470
in order to find spam emails for example

00:02:38,670 --> 00:02:42,750
if the email contains a certain word

00:02:40,470 --> 00:02:44,610
market as spam now which is not very

00:02:42,750 --> 00:02:46,170
efficient because for a spammer can just

00:02:44,610 --> 00:02:49,050
change the word slightly and get around

00:02:46,170 --> 00:02:50,790
those conditional statements now

00:02:49,050 --> 00:02:53,340
fast-forward to today and machine

00:02:50,790 --> 00:02:55,530
learning programs essentially get tons

00:02:53,340 --> 00:02:58,019
of emails to classify which are marked

00:02:55,530 --> 00:03:00,000
as spam by you and it tries to find what

00:02:58,019 --> 00:03:02,519
attributes are those emails led to it

00:03:00,000 --> 00:03:04,200
being classified as spam or by itself so

00:03:02,519 --> 00:03:06,810
now there's no battle between programmer

00:03:04,200 --> 00:03:08,340
and spammer and instead the end user can

00:03:06,810 --> 00:03:10,590
concentrate on making great software

00:03:08,340 --> 00:03:12,570
instead so what come in use cases are

00:03:10,590 --> 00:03:14,640
Varon well actually there's quite a few

00:03:12,570 --> 00:03:16,080
these with typical use cases I see

00:03:14,640 --> 00:03:18,000
machine learning being useful about our

00:03:16,080 --> 00:03:19,350
arbors of course but we've got things

00:03:18,000 --> 00:03:21,000
like computer vision like the object

00:03:19,350 --> 00:03:22,769
detection example we just spoke about

00:03:21,000 --> 00:03:25,079
we've got numerical things like

00:03:22,769 --> 00:03:27,450
regression predicting a number natural

00:03:25,079 --> 00:03:30,630
language for example text toxicity or

00:03:27,450 --> 00:03:32,549
sentiment analysis we've got audio for

00:03:30,630 --> 00:03:34,709
speech commands for example and my

00:03:32,549 --> 00:03:36,209
personal favorite is generative which is

00:03:34,709 --> 00:03:38,190
essentially things like a style transfer

00:03:36,209 --> 00:03:40,470
and the creative kind of applications of

00:03:38,190 --> 00:03:43,530
ML and you can see on this slide example

00:03:40,470 --> 00:03:45,540
from Nvidia whereby they are generating

00:03:43,530 --> 00:03:47,579
human faces and these faces do not

00:03:45,540 --> 00:03:49,200
actually exist in the real world it's

00:03:47,579 --> 00:03:51,570
been trained on celebrities in this case

00:03:49,200 --> 00:03:54,110
and you can see how now this research

00:03:51,570 --> 00:03:57,060
can actually produce very cool imagery

00:03:54,110 --> 00:03:58,620
so what about deep learning essentially

00:03:57,060 --> 00:04:00,000
deep learning is a technique for

00:03:58,620 --> 00:04:01,590
implementing machine learning but we

00:04:00,000 --> 00:04:04,860
just spoke about on the previous slide

00:04:01,590 --> 00:04:07,500
and one such deepening technique is

00:04:04,860 --> 00:04:09,450
known as deep neural networks so you can

00:04:07,500 --> 00:04:10,920
think as deep learning as the algorithm

00:04:09,450 --> 00:04:13,950
you might choose to use in your machine

00:04:10,920 --> 00:04:15,420
learning program essentially so if you

00:04:13,950 --> 00:04:16,229
haven't heard of deep neural networks

00:04:15,420 --> 00:04:18,239
don't worry

00:04:16,229 --> 00:04:20,190
essentially eby's are just programming

00:04:18,239 --> 00:04:22,590
structures for are arranged in layers

00:04:20,190 --> 00:04:23,640
for our loosely trying to mimic how we

00:04:22,590 --> 00:04:25,410
believe the human brain to work

00:04:23,640 --> 00:04:26,669
essentially learning patterns of

00:04:25,410 --> 00:04:28,349
patterns and we get into that in more

00:04:26,669 --> 00:04:30,090
detail later in the talk

00:04:28,349 --> 00:04:31,400
so in summary here you can see how all

00:04:30,090 --> 00:04:33,290
these terms are actually in

00:04:31,400 --> 00:04:35,509
link's we have the deep learning that

00:04:33,290 --> 00:04:36,740
feeds into the machine learning so the

00:04:35,509 --> 00:04:38,660
algorithm that goes into the

00:04:36,740 --> 00:04:40,280
implementation and that machine learning

00:04:38,660 --> 00:04:41,570
gives us this grand illusion of

00:04:40,280 --> 00:04:43,460
artificial intelligence which is what

00:04:41,570 --> 00:04:45,410
we're trying to aim for longer-term and

00:04:43,460 --> 00:04:49,070
these terms actually go back to the

00:04:45,410 --> 00:04:51,770
1960s and 50s it's not anything new it's

00:04:49,070 --> 00:04:54,710
just that now we have the power with all

00:04:51,770 --> 00:04:56,030
the cheap processors and memory that we

00:04:54,710 --> 00:04:58,009
can actually make use of these

00:04:56,030 --> 00:05:00,169
techniques at scale with all the data

00:04:58,009 --> 00:05:02,810
that we now have this previously was

00:05:00,169 --> 00:05:04,160
impossible in the older days so how do

00:05:02,810 --> 00:05:06,860
we train machine learning systems and

00:05:04,160 --> 00:05:09,320
that's a great question essentially we

00:05:06,860 --> 00:05:10,520
need features and attributes and you can

00:05:09,320 --> 00:05:12,199
see here from this example if we just

00:05:10,520 --> 00:05:14,660
pretend to be farmers for a second

00:05:12,199 --> 00:05:16,610
trying to classify apples and oranges to

00:05:14,660 --> 00:05:18,650
features or attributes you might want to

00:05:16,610 --> 00:05:20,479
use would be weight and color these

00:05:18,650 --> 00:05:23,720
things are easy to measure digitally and

00:05:20,479 --> 00:05:25,190
can be accessed at scale so once you've

00:05:23,720 --> 00:05:27,139
got those if we go back to our high

00:05:25,190 --> 00:05:28,970
school maths we can try and plot those

00:05:27,139 --> 00:05:30,860
features and attributes on this 2d graph

00:05:28,970 --> 00:05:33,349
here and we got weight on the y-axis and

00:05:30,860 --> 00:05:35,720
color on the X and you can see how the

00:05:33,349 --> 00:05:37,490
green apples and red apples kind of

00:05:35,720 --> 00:05:39,349
clustered together there at the bottom

00:05:37,490 --> 00:05:41,330
in their respective color spectrums

00:05:39,349 --> 00:05:43,099
and in the oranges because they're juicy

00:05:41,330 --> 00:05:45,770
they actually slightly higher up on the

00:05:43,099 --> 00:05:47,780
weight axes there and we can draw a line

00:05:45,770 --> 00:05:50,180
to separate the apples and oranges apart

00:05:47,780 --> 00:05:52,250
and in a way this is actually a very

00:05:50,180 --> 00:05:54,020
naive form of machine learning if we

00:05:52,250 --> 00:05:56,539
could get a computer to figure out the

00:05:54,020 --> 00:05:58,880
equation of that line because if we now

00:05:56,539 --> 00:06:00,800
classify a new piece of fruit we take

00:05:58,880 --> 00:06:03,919
its weight and its color and we plot an

00:06:00,800 --> 00:06:05,690
onus graph if it falls above the line we

00:06:03,919 --> 00:06:07,699
can say with some level of confidence

00:06:05,690 --> 00:06:10,159
that that piece of fruit is an orange

00:06:07,699 --> 00:06:12,800
and if it falls below the line we can

00:06:10,159 --> 00:06:14,690
assume is probably an apple and that's

00:06:12,800 --> 00:06:16,220
kind of what is going on in all of these

00:06:14,690 --> 00:06:17,510
systems the machine learning is

00:06:16,220 --> 00:06:20,060
essentially just trying to figure out

00:06:17,510 --> 00:06:22,820
the best way to separate the data so

00:06:20,060 --> 00:06:24,650
that I can classify it later on what

00:06:22,820 --> 00:06:26,000
about bad features and attributes it's

00:06:24,650 --> 00:06:27,440
not always obvious what we should choose

00:06:26,000 --> 00:06:29,870
here and here is a great example

00:06:27,440 --> 00:06:32,120
rightness a number of seeds this could

00:06:29,870 --> 00:06:34,490
lead to a scatter plot as you see on the

00:06:32,120 --> 00:06:35,960
chart right now and there's no easy way

00:06:34,490 --> 00:06:37,460
to separate this data with a straight

00:06:35,960 --> 00:06:40,430
line or even a curved line for that

00:06:37,460 --> 00:06:42,200
matter and this is a good example of a

00:06:40,430 --> 00:06:43,940
bad choice of features match speeds and

00:06:42,200 --> 00:06:44,960
you might be like well why Jason would

00:06:43,940 --> 00:06:47,120
you choose such things

00:06:44,960 --> 00:06:48,889
and it's not always as simple as apples

00:06:47,120 --> 00:06:50,330
and oranges imagine those brain tumors

00:06:48,889 --> 00:06:52,430
we're talking about earlier on what

00:06:50,330 --> 00:06:54,770
features and attributes really use to be

00:06:52,430 --> 00:06:56,449
able to distinguish a positive from a

00:06:54,770 --> 00:06:58,789
negative result in that case it gets

00:06:56,449 --> 00:07:00,889
very hard very quickly and this is known

00:06:58,789 --> 00:07:02,090
as feature engineering to find the set

00:07:00,889 --> 00:07:03,979
of features and attributes that give you

00:07:02,090 --> 00:07:05,449
the best separation in data and that's

00:07:03,979 --> 00:07:07,069
what that get paid a lot of money to

00:07:05,449 --> 00:07:09,319
figure out properly but what about

00:07:07,069 --> 00:07:11,630
higher dimensions in our simple example

00:07:09,319 --> 00:07:14,210
we had just two dimensions let's assume

00:07:11,630 --> 00:07:15,860
we had three in that case we need to

00:07:14,210 --> 00:07:17,360
plot it on a three dimensional graph as

00:07:15,860 --> 00:07:20,750
you can see on the right-hand side and

00:07:17,360 --> 00:07:23,150
here we instead of using a line we need

00:07:20,750 --> 00:07:25,789
a plane or a rectangle in 3d space if

00:07:23,150 --> 00:07:29,150
you will to be able to separate the data

00:07:25,789 --> 00:07:31,250
in a meaningful way now it's actually

00:07:29,150 --> 00:07:32,930
interesting to note that most machine

00:07:31,250 --> 00:07:34,880
learning problems are actually using

00:07:32,930 --> 00:07:36,440
much higher dimensions from three now

00:07:34,880 --> 00:07:38,509
unfortunately our human brains just

00:07:36,440 --> 00:07:40,159
can't comprehend what that looks like

00:07:38,509 --> 00:07:41,990
but you have to trust me if the math is

00:07:40,159 --> 00:07:43,490
actually the same and instead of using a

00:07:41,990 --> 00:07:45,530
plane using something called a

00:07:43,490 --> 00:07:47,900
hyperplane and by just means is one

00:07:45,530 --> 00:07:49,340
dimension less than number of dimensions

00:07:47,900 --> 00:07:51,080
that you're working with but the math

00:07:49,340 --> 00:07:53,330
works out the same and using this high

00:07:51,080 --> 00:07:55,340
dimensional space and dividing up in

00:07:53,330 --> 00:07:57,289
much the same way so it should be easy

00:07:55,340 --> 00:08:01,159
right we've got a dog we've got a mop

00:07:57,289 --> 00:08:02,990
what could possibly go wrong well some

00:08:01,159 --> 00:08:05,000
dogs that like mops and vice versa and

00:08:02,990 --> 00:08:07,280
my point for bringing this up is that

00:08:05,000 --> 00:08:09,169
you've got to be aware of the bias in

00:08:07,280 --> 00:08:11,389
your training data one of the biggest

00:08:09,169 --> 00:08:13,550
challenges you're face is not finding

00:08:11,389 --> 00:08:14,960
enough training data that is unbiased

00:08:13,550 --> 00:08:17,870
for the situation's you want to use it

00:08:14,960 --> 00:08:19,729
in so in the case of recognizing a cat

00:08:17,870 --> 00:08:22,340
something as simple as the cat you might

00:08:19,729 --> 00:08:24,349
need to have ten thousand images of cats

00:08:22,340 --> 00:08:26,719
of different breeds different stages of

00:08:24,349 --> 00:08:28,400
a lifecycle different shapes sizes in

00:08:26,719 --> 00:08:29,840
different environments different

00:08:28,400 --> 00:08:32,300
lighting conditions taken on different

00:08:29,840 --> 00:08:33,950
cameras all this is required to have the

00:08:32,300 --> 00:08:36,349
best chance of understanding what cat

00:08:33,950 --> 00:08:38,209
pics laws actually are and without that

00:08:36,349 --> 00:08:39,620
you may end up having biases in your

00:08:38,209 --> 00:08:41,839
machine learning model which would be

00:08:39,620 --> 00:08:44,180
very bad the other point to note here is

00:08:41,839 --> 00:08:47,540
that data is not always imagery it could

00:08:44,180 --> 00:08:50,180
be tables of data with texts or sensor

00:08:47,540 --> 00:08:51,740
recordings sound samples and pretty much

00:08:50,180 --> 00:08:53,900
anything else you can think of as long

00:08:51,740 --> 00:08:56,029
as it can be represented numerically we

00:08:53,900 --> 00:08:58,339
can use it in an ml system so that

00:08:56,029 --> 00:08:59,629
brings us of course to JavaScript

00:08:58,339 --> 00:09:01,100
why would you want to do machine

00:08:59,629 --> 00:09:04,249
learning in JavaScript and that is a

00:09:01,100 --> 00:09:06,050
great question too in fact JavaScript

00:09:04,249 --> 00:09:08,749
can run pretty much everywhere in the

00:09:06,050 --> 00:09:11,990
web browser on the server-side desktop

00:09:08,749 --> 00:09:13,759
mobile and even internet or things and

00:09:11,990 --> 00:09:15,439
if we dive into each one of those you

00:09:13,759 --> 00:09:17,149
can see many of the technologies that

00:09:15,439 --> 00:09:18,529
you already know in love on the

00:09:17,149 --> 00:09:20,629
left-hand side they're popular web

00:09:18,529 --> 00:09:23,120
browsers you might use on server side we

00:09:20,629 --> 00:09:25,309
have no js' for mobile we can support

00:09:23,120 --> 00:09:26,749
react native and also other things that

00:09:25,309 --> 00:09:29,749
we chats and progressive web apps of

00:09:26,749 --> 00:09:31,249
course and for desktop electron can be

00:09:29,749 --> 00:09:33,499
used to write native desktop

00:09:31,249 --> 00:09:37,490
applications and of course Raspberry Pi

00:09:33,499 --> 00:09:39,019
for Internet of Things and javascript is

00:09:37,490 --> 00:09:41,300
the early language that can be used

00:09:39,019 --> 00:09:42,889
across all of these devices with ease

00:09:41,300 --> 00:09:45,079
without any extra add-ons and plugins

00:09:42,889 --> 00:09:46,519
and that is a very unique point about

00:09:45,079 --> 00:09:49,550
JavaScript on its own which I'm sure

00:09:46,519 --> 00:09:52,339
you're already aware of and of course

00:09:49,550 --> 00:09:54,589
with tensorflow j/s you can run you can

00:09:52,339 --> 00:09:56,569
retrain by a transfer learning and you

00:09:54,589 --> 00:09:58,160
can write your machine learning models

00:09:56,569 --> 00:10:00,290
completely from scratch if you so desire

00:09:58,160 --> 00:10:02,180
just like you could do in python if

00:10:00,290 --> 00:10:05,720
you're familiar with machine learning in

00:10:02,180 --> 00:10:08,179
python and that allows you to basically

00:10:05,720 --> 00:10:11,389
dream up anything you might want from

00:10:08,179 --> 00:10:13,579
augmented reality gesture sound

00:10:11,389 --> 00:10:14,990
recognition conversational AI whatever

00:10:13,579 --> 00:10:16,850
it might be you can do that in

00:10:14,990 --> 00:10:20,899
JavaScript now as well giving you

00:10:16,850 --> 00:10:22,309
superpowers in the browser and beyond so

00:10:20,899 --> 00:10:24,079
there's three ways you can talk about

00:10:22,309 --> 00:10:25,819
using machine learning in JavaScript I'm

00:10:24,079 --> 00:10:27,800
going to go through all of those now the

00:10:25,819 --> 00:10:29,449
first one is pre trained models these

00:10:27,800 --> 00:10:31,220
are essentially really easy to use

00:10:29,449 --> 00:10:34,220
JavaScript classes for common use cases

00:10:31,220 --> 00:10:36,319
and you can see we have many of these

00:10:34,220 --> 00:10:37,850
already from object detection body

00:10:36,319 --> 00:10:39,860
segmentation which allows you to find

00:10:37,850 --> 00:10:42,309
where the body is in an image pers

00:10:39,860 --> 00:10:45,199
estimation to detect the skeleton and

00:10:42,309 --> 00:10:45,499
we've got speech commands and much much

00:10:45,199 --> 00:10:47,059
more

00:10:45,499 --> 00:10:48,559
in fact some of our newer models on the

00:10:47,059 --> 00:10:50,620
right-hand side there you can see we now

00:10:48,559 --> 00:10:53,629
support face mesh which can recognize

00:10:50,620 --> 00:10:55,730
468 landmarks on the human face we've

00:10:53,629 --> 00:10:57,860
got hand pose that can detect similar

00:10:55,730 --> 00:11:00,439
things for your hand and also the Berk

00:10:57,860 --> 00:11:02,029
Q&A model that allows you to do question

00:11:00,439 --> 00:11:04,610
answer based natural language processing

00:11:02,029 --> 00:11:06,439
all in the web browser so let's see some

00:11:04,610 --> 00:11:09,920
of these in action and see how they

00:11:06,439 --> 00:11:11,480
perform so first up I want to talk about

00:11:09,920 --> 00:11:13,610
object recognition

00:11:11,480 --> 00:11:14,779
is using cocoa SSD which is the name of

00:11:13,610 --> 00:11:17,420
the machine learning model that we're

00:11:14,779 --> 00:11:20,209
using to power vests and that has been

00:11:17,420 --> 00:11:22,100
trained on 90 object classes such as

00:11:20,209 --> 00:11:23,750
these dogs on the right hand side so 90

00:11:22,100 --> 00:11:25,760
common objects can be recognized out of

00:11:23,750 --> 00:11:27,380
the box now as important is that you can

00:11:25,760 --> 00:11:29,240
see that this also gives back the

00:11:27,380 --> 00:11:31,279
bounding box data which allows you to

00:11:29,240 --> 00:11:32,690
localize it in the image and that's why

00:11:31,279 --> 00:11:34,579
we call this object recognition

00:11:32,690 --> 00:11:36,139
instead of image recognition image

00:11:34,579 --> 00:11:37,519
recognition is where you know about the

00:11:36,139 --> 00:11:39,290
thing exists but you don't know where it

00:11:37,519 --> 00:11:40,550
is so this is a pretty cool one to start

00:11:39,290 --> 00:11:42,620
with I'm going to show you how we can

00:11:40,550 --> 00:11:43,430
write code to make this actually work

00:11:42,620 --> 00:11:45,889
ourselves

00:11:43,430 --> 00:11:48,980
so there's dive into the code now so

00:11:45,889 --> 00:11:51,290
first up let's look at the HTML this is

00:11:48,980 --> 00:11:53,209
pretty boilerplate stuff very simply

00:11:51,290 --> 00:11:56,180
going to import a style sheet their

00:11:53,209 --> 00:11:57,980
style dot CSS and then in our main body

00:11:56,180 --> 00:11:59,329
we're gonna have a demo section that

00:11:57,980 --> 00:12:01,519
initially is going to be invisible so

00:11:59,329 --> 00:12:03,620
you can see a class invisible is set at

00:12:01,519 --> 00:12:05,329
the very beginning there and then we

00:12:03,620 --> 00:12:07,790
have some images that we want to be able

00:12:05,329 --> 00:12:10,010
to classify on click so these all have

00:12:07,790 --> 00:12:12,019
the class classify on kik and an image

00:12:10,010 --> 00:12:14,570
contained within that containing give

00:12:12,019 --> 00:12:15,920
there is to be any images you want and

00:12:14,570 --> 00:12:18,589
then at the end there you can see we

00:12:15,920 --> 00:12:20,930
simply have three Script imports the

00:12:18,589 --> 00:12:23,990
first one is essentially bringing in the

00:12:20,930 --> 00:12:26,420
tensor flow j/s bundle the second one is

00:12:23,990 --> 00:12:29,420
bringing in the cocoa SSD machine

00:12:26,420 --> 00:12:30,800
learning model and the third one is of

00:12:29,420 --> 00:12:34,250
course the JavaScript we're gonna rights

00:12:30,800 --> 00:12:36,290
to get all of this working so looking at

00:12:34,250 --> 00:12:37,370
the first lines of JavaScript first of

00:12:36,290 --> 00:12:40,100
all we're just going to define a

00:12:37,370 --> 00:12:41,510
constant called demos section and that's

00:12:40,100 --> 00:12:43,850
just going to get a reference to the

00:12:41,510 --> 00:12:45,949
demo area where all of our images are

00:12:43,850 --> 00:12:48,230
living we weren't going to set a

00:12:45,949 --> 00:12:51,800
variable model has loaded and set it to

00:12:48,230 --> 00:12:53,529
force and also define a variable for the

00:12:51,800 --> 00:12:55,730
model to store that once it has loaded

00:12:53,529 --> 00:12:58,010
next we need to load the model of course

00:12:55,730 --> 00:13:00,260
so all we need to do is call cocoa SSD

00:12:58,010 --> 00:13:02,420
load and because this is an async

00:13:00,260 --> 00:13:04,819
function we use the ven method to

00:13:02,420 --> 00:13:07,250
callback a anonymous function in this

00:13:04,819 --> 00:13:08,839
case with the results you can see that

00:13:07,250 --> 00:13:11,180
anonymous function simply takes the

00:13:08,839 --> 00:13:12,889
loaded model as a parameter and we can

00:13:11,180 --> 00:13:15,079
then assign that to our more global

00:13:12,889 --> 00:13:16,970
variable called model and when you set

00:13:15,079 --> 00:13:19,220
model has loaded to true so we know

00:13:16,970 --> 00:13:21,439
about things are ready to use finally we

00:13:19,220 --> 00:13:23,269
removed the invisible class from our

00:13:21,439 --> 00:13:24,630
demo section to make sure it's now

00:13:23,269 --> 00:13:26,610
visible and not grayed out

00:13:24,630 --> 00:13:28,890
like it was before so next we get a

00:13:26,610 --> 00:13:31,020
reference to the image containers ie all

00:13:28,890 --> 00:13:33,060
the divs that had that classify on click

00:13:31,020 --> 00:13:36,240
plus we can very loop through all of

00:13:33,060 --> 00:13:38,730
those and essentially add a click

00:13:36,240 --> 00:13:40,710
handler to each so that we can decide

00:13:38,730 --> 00:13:43,170
what to do when each image within it is

00:13:40,710 --> 00:13:45,450
clicked and here we go here's the handle

00:13:43,170 --> 00:13:47,370
click definition we simply check if the

00:13:45,450 --> 00:13:48,660
model has loaded if it hasn't we're

00:13:47,370 --> 00:13:50,040
going to return straight away because

00:13:48,660 --> 00:13:52,320
there's no point doing anything unless

00:13:50,040 --> 00:13:53,880
the model is available to use and if it

00:13:52,320 --> 00:13:56,550
is available to use we're gonna

00:13:53,880 --> 00:13:58,230
essentially call model dot detect and

00:13:56,550 --> 00:13:59,670
we're gonna pass it the image that was

00:13:58,230 --> 00:14:02,310
clicked so if you event target in this

00:13:59,670 --> 00:14:04,770
case and then again this is an async

00:14:02,310 --> 00:14:07,050
operations we use the ven to vend call

00:14:04,770 --> 00:14:09,390
our other function handle predictions

00:14:07,050 --> 00:14:11,130
once is ready and in handle predictions

00:14:09,390 --> 00:14:13,200
you can see we're now passed our

00:14:11,130 --> 00:14:15,660
predictions objects but simply we can

00:14:13,200 --> 00:14:17,580
lock if we wish to kind of inspect as we

00:14:15,660 --> 00:14:19,950
so desire but essentially this contains

00:14:17,580 --> 00:14:21,540
all the machines and in predictions that

00:14:19,950 --> 00:14:23,850
came back for that single image that we

00:14:21,540 --> 00:14:25,950
tried to classify so we can loop reverse

00:14:23,850 --> 00:14:28,560
predictions and we can create a new

00:14:25,950 --> 00:14:30,060
paragraph element for each and set what

00:14:28,560 --> 00:14:32,640
we've what we saw along with its

00:14:30,060 --> 00:14:34,470
confidence and then we can also set the

00:14:32,640 --> 00:14:36,750
margin of this paragraph so it sits

00:14:34,470 --> 00:14:39,630
nicely at the bottom of the bounding box

00:14:36,750 --> 00:14:41,250
and then of course this pincode

00:14:39,630 --> 00:14:44,670
highlighter is essentially the bounding

00:14:41,250 --> 00:14:46,850
box that i've created and we're just

00:14:44,670 --> 00:14:49,920
setting the X Y width and height

00:14:46,850 --> 00:14:51,990
coordinates of that element so that it

00:14:49,920 --> 00:14:54,810
sits in the right place in the context

00:14:51,990 --> 00:14:56,370
of its parent div and then of course we

00:14:54,810 --> 00:14:59,730
just add these two elements to Werdum

00:14:56,370 --> 00:15:01,230
and the fact should now be visible and

00:14:59,730 --> 00:15:03,030
finally the CSS is pretty

00:15:01,230 --> 00:15:05,850
self-explanatory for various moments

00:15:03,030 --> 00:15:08,670
when we're changing for GUI so if we put

00:15:05,850 --> 00:15:10,680
it all together this is what we get so

00:15:08,670 --> 00:15:13,020
as you can see this is the code running

00:15:10,680 --> 00:15:16,470
and I can now click on one of these

00:15:13,020 --> 00:15:18,270
images and you can see instantly I get

00:15:16,470 --> 00:15:20,100
results coming back with the bounding

00:15:18,270 --> 00:15:22,800
boxes showing but items that is found in

00:15:20,100 --> 00:15:24,270
each image i've actuated a little extra

00:15:22,800 --> 00:15:26,550
bit of code here to do the same thing

00:15:24,270 --> 00:15:29,130
but with the webcam and if I enable this

00:15:26,550 --> 00:15:31,800
you can see that I can now see myself

00:15:29,130 --> 00:15:33,270
too and notice how the performance is

00:15:31,800 --> 00:15:35,940
pretty cool it's running in a high

00:15:33,270 --> 00:15:37,420
frames per second and all of this is

00:15:35,940 --> 00:15:39,610
running live in the web

00:15:37,420 --> 00:15:41,410
which means of course that your privacy

00:15:39,610 --> 00:15:42,670
is also preserved because this data is

00:15:41,410 --> 00:15:44,589
not being sent to a server for

00:15:42,670 --> 00:15:46,720
classification so next thing I want to

00:15:44,589 --> 00:15:49,600
talk about is face mesh you can see here

00:15:46,720 --> 00:15:51,459
how it can recognize 468 unique points

00:15:49,600 --> 00:15:54,459
on the human face and it's just three

00:15:51,459 --> 00:15:55,720
megabytes in size in fact many people

00:15:54,459 --> 00:15:57,279
are starting to use this in creative

00:15:55,720 --> 00:15:59,139
ways such as muddy face which is part of

00:15:57,279 --> 00:16:01,420
a L'Oreal group who are using it for a

00:15:59,139 --> 00:16:03,009
our makeup Tryon as you can see from the

00:16:01,420 --> 00:16:04,779
image on the right this lady is not

00:16:03,009 --> 00:16:06,790
wearing any makeup on their lips in fact

00:16:04,779 --> 00:16:09,129
lipstick is being chosen dynamically at

00:16:06,790 --> 00:16:10,509
runtime in the browser and then we are

00:16:09,129 --> 00:16:13,449
applying it because we know where the

00:16:10,509 --> 00:16:15,309
lips are from face mesh pretty cool but

00:16:13,449 --> 00:16:16,839
let's see us running for real using my

00:16:15,309 --> 00:16:19,209
face so I can explain a little bit more

00:16:16,839 --> 00:16:21,699
okay so now you can see my face in the

00:16:19,209 --> 00:16:23,949
web browser and as I open and close my

00:16:21,699 --> 00:16:26,170
mouth you can see it reacts really well

00:16:23,949 --> 00:16:27,850
it's running a high frames per second

00:16:26,170 --> 00:16:30,309
but this is just running on the CPU

00:16:27,850 --> 00:16:31,540
I can t switch at the top right and we

00:16:30,309 --> 00:16:33,279
can get even better performance by

00:16:31,540 --> 00:16:34,329
running on my graphics card now in

00:16:33,279 --> 00:16:35,980
addition to doing the machine learning

00:16:34,329 --> 00:16:37,689
in real time because JavaScript is

00:16:35,980 --> 00:16:39,699
obviously great at graphics but whilst

00:16:37,689 --> 00:16:41,860
in rendering a 3d point cloud that we

00:16:39,699 --> 00:16:43,899
can also tinker with at the same time as

00:16:41,860 --> 00:16:47,410
you can see I can move my face around on

00:16:43,899 --> 00:16:48,610
the free viewpoint file - so you can use

00:16:47,410 --> 00:16:50,860
this to make pretty much anything you

00:16:48,610 --> 00:16:53,920
want so next up is body segmentation

00:16:50,860 --> 00:16:56,050
this model allows you to distinguish 24

00:16:53,920 --> 00:16:58,059
unique body areas across multiple bodies

00:16:56,050 --> 00:17:00,189
in real time as you can see from the

00:16:58,059 --> 00:17:02,050
animation on the bottom here but you can

00:17:00,189 --> 00:17:03,790
see however that segments and it even

00:17:02,050 --> 00:17:05,140
gives you an estimation for the pose of

00:17:03,790 --> 00:17:07,029
each body - are you aware that they

00:17:05,140 --> 00:17:09,010
think the skeleton is which can be used

00:17:07,029 --> 00:17:09,429
to do gesture recognition or much much

00:17:09,010 --> 00:17:11,890
more

00:17:09,429 --> 00:17:13,929
now models such as body pics can be used

00:17:11,890 --> 00:17:15,520
in really delightful ways - here's two

00:17:13,929 --> 00:17:17,319
examples that I created in just a couple

00:17:15,520 --> 00:17:19,149
of days but allow you to do some

00:17:17,319 --> 00:17:20,919
powerful things on the left hand side

00:17:19,149 --> 00:17:22,990
you can see how I remove myself from the

00:17:20,919 --> 00:17:24,819
webcam in real time rendering myself

00:17:22,990 --> 00:17:26,620
invisible much like a Harry Potter cloak

00:17:24,819 --> 00:17:28,299
or something like this and as I get on

00:17:26,620 --> 00:17:30,760
the bed you can see how the bed still

00:17:28,299 --> 00:17:33,370
deforms even though I am removed from

00:17:30,760 --> 00:17:35,559
the cam feed in real time now on the

00:17:33,370 --> 00:17:37,809
right hand side you can see another demo

00:17:35,559 --> 00:17:39,850
created that allows me to measure my

00:17:37,809 --> 00:17:41,559
body size in real time and I don't know

00:17:39,850 --> 00:17:43,690
about you whenever I'm Bank lobes I

00:17:41,559 --> 00:17:46,270
never know what size I am so I made this

00:17:43,690 --> 00:17:48,100
to help me out to find my size for

00:17:46,270 --> 00:17:49,500
different brands on the websites that I

00:17:48,100 --> 00:17:51,420
use and

00:17:49,500 --> 00:17:53,550
fifteen seconds I can get a result back

00:17:51,420 --> 00:17:55,890
for my chest measurements my inside leg

00:17:53,550 --> 00:17:58,830
and all that kind of fun stuff in a much

00:17:55,890 --> 00:18:00,600
more frictionless way and of course all

00:17:58,830 --> 00:18:01,830
of his runs in the web browser so my

00:18:00,600 --> 00:18:03,510
privacy is preserved

00:18:01,830 --> 00:18:06,510
none of these images are going to a

00:18:03,510 --> 00:18:08,580
server and of course all this can give

00:18:06,510 --> 00:18:10,500
you superpowers too what if you combine

00:18:08,580 --> 00:18:12,750
ten surfer chairs with something like

00:18:10,500 --> 00:18:14,760
web GL shaders in that case you can get

00:18:12,750 --> 00:18:16,500
an effect like this which is made by one

00:18:14,760 --> 00:18:18,750
of the guys on our community in the USA

00:18:16,500 --> 00:18:21,330
which can shoot lasers of your mouth and

00:18:18,750 --> 00:18:24,480
eyes all in real time and a buttery

00:18:21,330 --> 00:18:26,340
smooth 60 frames per second but let's

00:18:24,480 --> 00:18:29,400
not stop there if we combine it with

00:18:26,340 --> 00:18:31,320
WebEx are a very emerging web standards

00:18:29,400 --> 00:18:33,870
you can now even project people from

00:18:31,320 --> 00:18:36,450
magazines into your room in real time -

00:18:33,870 --> 00:18:37,980
and this guy is using this on his phone

00:18:36,450 --> 00:18:40,430
and then you can walk up to the person

00:18:37,980 --> 00:18:43,650
and and kind of meet them in real life

00:18:40,430 --> 00:18:47,220
virtually speaking so that's pretty cool

00:18:43,650 --> 00:18:48,960
and I thought well if I can do this then

00:18:47,220 --> 00:18:51,690
why not go one step further and combine

00:18:48,960 --> 00:18:53,640
it with WebRTC to teleport myself in

00:18:51,690 --> 00:18:55,680
real time you can see here how I can

00:18:53,640 --> 00:18:57,210
project myself from my bedroom into

00:18:55,680 --> 00:18:58,950
another living space it could be

00:18:57,210 --> 00:19:01,440
somewhere else in the world to meet my

00:18:58,950 --> 00:19:03,920
friends and family such that I can be

00:19:01,440 --> 00:19:06,150
closer to them even when I'm not and

00:19:03,920 --> 00:19:07,650
having tried this myself actually does

00:19:06,150 --> 00:19:08,970
feel better than a regular video cord

00:19:07,650 --> 00:19:10,470
because you can walk up to the person

00:19:08,970 --> 00:19:11,640
and move around them and all this kind

00:19:10,470 --> 00:19:13,950
of stuff which is just don't get with a

00:19:11,640 --> 00:19:15,990
regular video call now the next way you

00:19:13,950 --> 00:19:18,060
can use sense of ojs is by transferring

00:19:15,990 --> 00:19:19,470
this is where you train existing models

00:19:18,060 --> 00:19:21,660
to work with your own data and this

00:19:19,470 --> 00:19:23,220
happen next logical step after using our

00:19:21,660 --> 00:19:25,500
pre-trained models to make things more

00:19:23,220 --> 00:19:27,300
customized to your needs now if you are

00:19:25,500 --> 00:19:28,740
mr expert you can of course code all

00:19:27,300 --> 00:19:30,870
this stuff yourself but I want to show

00:19:28,740 --> 00:19:33,660
you two ways today on how to do this in

00:19:30,870 --> 00:19:35,610
a super simple fashion now the first one

00:19:33,660 --> 00:19:38,010
is teachable Machine this is a website

00:19:35,610 --> 00:19:40,920
created by Google that allows you to

00:19:38,010 --> 00:19:43,290
retrain data in the web browser for very

00:19:40,920 --> 00:19:45,960
common tasks like recognizing an object

00:19:43,290 --> 00:19:49,050
or speech recognition or pose estimation

00:19:45,960 --> 00:19:51,150
for example and in just a few clicks you

00:19:49,050 --> 00:19:53,220
can make your own ML model so let's try

00:19:51,150 --> 00:19:56,400
this out right now and see how easy is

00:19:53,220 --> 00:19:58,560
to use for something like a prototype so

00:19:56,400 --> 00:20:00,240
here's teachable machine we can take on

00:19:58,560 --> 00:20:01,500
the image project to start and I can

00:20:00,240 --> 00:20:03,960
check on webcam

00:20:01,500 --> 00:20:06,180
and you can see now that I'm just gonna

00:20:03,960 --> 00:20:10,650
take a few samples of my pet in front of

00:20:06,180 --> 00:20:13,200
the webcam and then I'm going to do the

00:20:10,650 --> 00:20:14,850
same thing for class two and we take a

00:20:13,200 --> 00:20:24,990
similar number of samples but this time

00:20:14,850 --> 00:20:26,490
I'm going to use this deck of cards and

00:20:24,990 --> 00:20:28,500
we've got a similar number of images as

00:20:26,490 --> 00:20:30,150
you can see I'm now going to click on

00:20:28,500 --> 00:20:31,770
train model and essentially that means

00:20:30,150 --> 00:20:34,410
it's retraining with top layers of the

00:20:31,770 --> 00:20:36,870
model that we're using so that we can

00:20:34,410 --> 00:20:39,090
classify new data using things it learnt

00:20:36,870 --> 00:20:41,310
from before so in just a few seconds

00:20:39,090 --> 00:20:43,200
this process will be complete and we can

00:20:41,310 --> 00:20:45,810
now see a live prediction coming from

00:20:43,200 --> 00:20:48,960
the webcam and hopefully we can see that

00:20:45,810 --> 00:20:50,490
class one is predicted right now and if

00:20:48,960 --> 00:20:53,120
I put the deck of cards in front it

00:20:50,490 --> 00:20:54,510
should now show you class 2 class 1

00:20:53,120 --> 00:20:57,060
class 2

00:20:54,510 --> 00:20:59,550
and look how responsive that is it's

00:20:57,060 --> 00:21:00,780
really really fast and you can get this

00:20:59,550 --> 00:21:03,120
great performance just a matter of

00:21:00,780 --> 00:21:06,000
seconds 30 seconds we've made a custom

00:21:03,120 --> 00:21:08,430
machine learning model so do you try

00:21:06,000 --> 00:21:10,110
that out in your spare time and you can

00:21:08,430 --> 00:21:11,490
use this in prototypes so you can simply

00:21:10,110 --> 00:21:13,800
here an export model at the top right

00:21:11,490 --> 00:21:15,990
there and you can save the JSON files

00:21:13,800 --> 00:21:17,760
that you need to vend load this model

00:21:15,990 --> 00:21:19,770
and your own custom website later on to

00:21:17,760 --> 00:21:21,360
do something more useful so maybe I can

00:21:19,770 --> 00:21:23,750
show a deck of cards and reveal a

00:21:21,360 --> 00:21:25,800
youtube video or whatever I want to do

00:21:23,750 --> 00:21:27,300
now the next method I want to show you

00:21:25,800 --> 00:21:28,980
is if you want to do something more for

00:21:27,300 --> 00:21:30,420
production use case which is more than

00:21:28,980 --> 00:21:32,310
just a prototype you might have a lot

00:21:30,420 --> 00:21:34,290
more data and of course in the web

00:21:32,310 --> 00:21:36,360
browser you limited by the RAM that you

00:21:34,290 --> 00:21:38,250
can use in a single tab in chrome of

00:21:36,360 --> 00:21:40,440
course so if you have like gigabytes of

00:21:38,250 --> 00:21:42,180
data you can use cloud auto ml and this

00:21:40,440 --> 00:21:44,280
allows you to Train custom vision models

00:21:42,180 --> 00:21:47,580
in the cloud which can plane export to

00:21:44,280 --> 00:21:49,410
tensorflow GS just like we did before so

00:21:47,580 --> 00:21:52,500
here you can see I've just uploaded lots

00:21:49,410 --> 00:21:53,580
of data of flowers in this case lots of

00:21:52,500 --> 00:21:56,040
different folders of different types of

00:21:53,580 --> 00:21:58,200
flowers and all you need to do is then

00:21:56,040 --> 00:22:00,840
specify if you want to train for higher

00:21:58,200 --> 00:22:02,100
accuracy or faster predictions and of

00:22:00,840 --> 00:22:03,390
course with machine learning there's

00:22:02,100 --> 00:22:05,010
always a trade-off between these two

00:22:03,390 --> 00:22:07,770
things but you can choose what you

00:22:05,010 --> 00:22:10,020
prefer you click Next and then after a

00:22:07,770 --> 00:22:12,300
few hours of training it will give you

00:22:10,020 --> 00:22:14,669
the option to export to tensorflow J's

00:22:12,300 --> 00:22:16,859
as you see on this slide

00:22:14,669 --> 00:22:19,529
and it's super simple to use this

00:22:16,859 --> 00:22:21,749
exported JSON file in fact here's the

00:22:19,529 --> 00:22:25,019
code all on one slide all we need to do

00:22:21,749 --> 00:22:27,090
is include pratense foj s library at the

00:22:25,019 --> 00:22:29,700
top here we've been include four author

00:22:27,090 --> 00:22:31,259
in our library as well and then below

00:22:29,700 --> 00:22:33,029
this we have a new image that we have

00:22:31,259 --> 00:22:35,700
never seen before this is just a daisy

00:22:33,029 --> 00:22:37,649
image I found on the Internet and we can

00:22:35,700 --> 00:22:39,509
then essentially use this as the image

00:22:37,649 --> 00:22:41,580
you want to classify and then in just

00:22:39,509 --> 00:22:43,320
three lines of JavaScript below we can

00:22:41,580 --> 00:22:45,480
now classify the image so the first

00:22:43,320 --> 00:22:48,539
thing we do is we wait for the model to

00:22:45,480 --> 00:22:50,580
load so you use TF the auto ml buttload

00:22:48,539 --> 00:22:52,529
image classification and we simply pass

00:22:50,580 --> 00:22:54,330
in a reference to the model dot JSON

00:22:52,529 --> 00:22:56,220
file but you would have downloaded from

00:22:54,330 --> 00:22:58,649
cloud Auto ml that can be hosted on your

00:22:56,220 --> 00:22:59,299
CDN or your website or wherever you so

00:22:58,649 --> 00:23:01,769
desire

00:22:59,299 --> 00:23:03,659
because this is an async operation we

00:23:01,769 --> 00:23:04,919
use the await keyword of course and then

00:23:03,659 --> 00:23:06,960
that gets us out the model when it's

00:23:04,919 --> 00:23:08,309
ready we've been getting reference to

00:23:06,960 --> 00:23:10,499
our Daisy image which is the new image

00:23:08,309 --> 00:23:12,840
you want to classify in this case and we

00:23:10,499 --> 00:23:14,789
simply use model dot classify and pass

00:23:12,840 --> 00:23:17,759
it the image and await the results to

00:23:14,789 --> 00:23:19,799
come back once this is allocated to the

00:23:17,759 --> 00:23:21,629
predictions object but it's just simply

00:23:19,799 --> 00:23:23,489
a JSON object we can pass through and

00:23:21,629 --> 00:23:25,169
see all the predictions that came back

00:23:23,489 --> 00:23:27,269
from the ML model for that single image

00:23:25,169 --> 00:23:29,369
and of course you can call model dot

00:23:27,269 --> 00:23:30,869
classify multiple times once the model

00:23:29,369 --> 00:23:32,669
is loaded so if you were to use this

00:23:30,869 --> 00:23:34,739
sort of a webcam you could then of

00:23:32,669 --> 00:23:36,710
course do that instead and have it

00:23:34,739 --> 00:23:39,119
running in real time on webcam data and

00:23:36,710 --> 00:23:40,470
third way of course use centerfudge es

00:23:39,119 --> 00:23:41,879
is to write your own coat and scratch

00:23:40,470 --> 00:23:43,470
now this is for the machine learning

00:23:41,879 --> 00:23:45,989
experts out there or people who want to

00:23:43,470 --> 00:23:47,850
go more hands-on low-level and of course

00:23:45,989 --> 00:23:49,679
going on that would be too much for a

00:23:47,850 --> 00:23:50,970
30-minute presentation today but there's

00:23:49,679 --> 00:23:52,679
plenty of tutorials on our website which

00:23:50,970 --> 00:23:54,480
I'll share with you later to get started

00:23:52,679 --> 00:23:56,070
with this but today I'm gonna give you

00:23:54,480 --> 00:23:58,499
two superpowers and performance benefits

00:23:56,070 --> 00:24:01,769
you can get by running in JavaScript and

00:23:58,499 --> 00:24:03,239
node for example so first up I want to

00:24:01,769 --> 00:24:05,549
talk about the different API is we have

00:24:03,239 --> 00:24:07,350
available there's two API is the first

00:24:05,549 --> 00:24:09,299
one is the layers API which is

00:24:07,350 --> 00:24:12,029
essentially like chaos if you're using

00:24:09,299 --> 00:24:15,480
Python in the past and that is a high

00:24:12,029 --> 00:24:17,940
level API but super easy to use now

00:24:15,480 --> 00:24:19,739
below infinite we have the ops API which

00:24:17,940 --> 00:24:21,179
is much more mathematical and if it's

00:24:19,739 --> 00:24:22,769
like the original tensorflow stuff if

00:24:21,179 --> 00:24:24,480
you will and that allows you to do or

00:24:22,769 --> 00:24:27,330
the funky linear algebra and all this

00:24:24,480 --> 00:24:28,470
kind of stuff so depending which way you

00:24:27,330 --> 00:24:30,659
wanna go is to

00:24:28,470 --> 00:24:32,309
waivers of tensorflow JSU can use here

00:24:30,659 --> 00:24:34,830
based on your experience and

00:24:32,309 --> 00:24:36,450
capabilities so you can see how this

00:24:34,830 --> 00:24:38,159
comes together essentially we've got our

00:24:36,450 --> 00:24:40,620
models at the top they're based it upon

00:24:38,159 --> 00:24:44,640
the layers API and then that sits upon

00:24:40,620 --> 00:24:47,010
the core or ops API just below that now

00:24:44,640 --> 00:24:48,780
that can talk to different environments

00:24:47,010 --> 00:24:49,919
such as the client site and within the

00:24:48,780 --> 00:24:52,260
client side you might have different

00:24:49,919 --> 00:24:54,600
environments as well like browser WeChat

00:24:52,260 --> 00:24:55,950
or react native for example and each one

00:24:54,600 --> 00:24:57,780
of these environments knows how to talk

00:24:55,950 --> 00:25:00,059
to different backends such as per CPU

00:24:57,780 --> 00:25:01,620
that's always available but also other

00:25:00,059 --> 00:25:03,480
things like WebGL if you want graphics

00:25:01,620 --> 00:25:06,299
card acceleration on the front end or

00:25:03,480 --> 00:25:08,669
wisdom web assembly if you want to have

00:25:06,299 --> 00:25:09,990
better CPU performance and there's a

00:25:08,669 --> 00:25:12,720
similar story of course for the back

00:25:09,990 --> 00:25:15,330
back-end on the server side we have no

00:25:12,720 --> 00:25:17,730
js' and here it's important to note that

00:25:15,330 --> 00:25:20,070
we have the same performance as Python

00:25:17,730 --> 00:25:22,590
land so here we actually calling the

00:25:20,070 --> 00:25:24,960
same tensorflow CPU and GPU bindings

00:25:22,590 --> 00:25:26,760
that python has to the C libraries that

00:25:24,960 --> 00:25:29,580
tend to throw itself is written in and

00:25:26,760 --> 00:25:31,230
that allows us to get the same CUDA

00:25:29,580 --> 00:25:33,900
acceleration and ABX

00:25:31,230 --> 00:25:36,200
support for the processor to make sure

00:25:33,900 --> 00:25:39,030
things are running as fast as possible

00:25:36,200 --> 00:25:40,770
and in fact if for some reason your

00:25:39,030 --> 00:25:43,710
machine learning team is still using

00:25:40,770 --> 00:25:45,990
Python then of course you can you load

00:25:43,710 --> 00:25:48,840
in save Python models from the layers

00:25:45,990 --> 00:25:50,970
API if they're using key RS and you can

00:25:48,840 --> 00:25:53,909
use the tensorflow saved model formats

00:25:50,970 --> 00:25:56,760
via our ops API to load back directly

00:25:53,909 --> 00:25:58,559
into nodejs without conversions you can

00:25:56,760 --> 00:26:01,409
just take a saved model and then use

00:25:58,559 --> 00:26:03,330
back in ojs now if you want to use and

00:26:01,409 --> 00:26:05,549
one of those saved models on the client

00:26:03,330 --> 00:26:07,679
side then you have to use our

00:26:05,549 --> 00:26:09,510
command-line tensorflow GS converter and

00:26:07,679 --> 00:26:11,640
that will convert the model into a JSON

00:26:09,510 --> 00:26:14,490
format we need to run in the web browser

00:26:11,640 --> 00:26:17,789
so let's look at performance then here

00:26:14,490 --> 00:26:19,710
is tensorflow GS vs. Python running

00:26:17,789 --> 00:26:22,710
mobile nets and these are the inference

00:26:19,710 --> 00:26:23,880
times how long it takes to classify the

00:26:22,710 --> 00:26:26,309
thing we're looking for in the image

00:26:23,880 --> 00:26:28,350
have a top there you can see running on

00:26:26,309 --> 00:26:30,390
the graphics card in Python seven point

00:26:28,350 --> 00:26:32,370
nine eight milliseconds and in nodejs

00:26:30,390 --> 00:26:34,470
just eight point eight one milliseconds

00:26:32,370 --> 00:26:36,390
so you know your bats within a certain

00:26:34,470 --> 00:26:37,679
margin of error anyways and it's pretty

00:26:36,390 --> 00:26:39,630
much the same for all intents and

00:26:37,679 --> 00:26:41,010
purposes now where gets interesting of

00:26:39,630 --> 00:26:42,230
course is but if you have a lot of pre

00:26:41,010 --> 00:26:43,940
and post-processing

00:26:42,230 --> 00:26:45,800
which basically a lot of female models

00:26:43,940 --> 00:26:48,020
do because in order for the model to

00:26:45,800 --> 00:26:50,270
digest for data you need to manipulate

00:26:48,020 --> 00:26:52,400
the original data into something that is

00:26:50,270 --> 00:26:53,870
usable in machine learning lands then

00:26:52,400 --> 00:26:55,370
you get to get further performance

00:26:53,870 --> 00:26:57,050
increases in nodejs

00:26:55,370 --> 00:26:59,180
because of a just-in-time compiler of

00:26:57,050 --> 00:27:00,890
JavaScript itself in fact we've seen

00:26:59,180 --> 00:27:02,780
with people at hugging face which are

00:27:00,890 --> 00:27:04,400
quite famous for making natural language

00:27:02,780 --> 00:27:06,320
processing models that they've seen a

00:27:04,400 --> 00:27:09,650
two times performance boost just by

00:27:06,320 --> 00:27:12,620
switching to no GS for their machine

00:27:09,650 --> 00:27:14,240
learning pre and post processing so now

00:27:12,620 --> 00:27:17,030
if we focus on the client side for just

00:27:14,240 --> 00:27:19,550
a second here are five superpowers you

00:27:17,030 --> 00:27:21,680
get which are hard or impossible to

00:27:19,550 --> 00:27:23,720
achieve on the server side now the first

00:27:21,680 --> 00:27:25,460
one is privacy as I kind of hinted at

00:27:23,720 --> 00:27:27,230
before all of these machine learning

00:27:25,460 --> 00:27:29,480
models are running in the web browser on

00:27:27,230 --> 00:27:31,760
the client machine that means and no

00:27:29,480 --> 00:27:33,230
point is any of a sensor data going to a

00:27:31,760 --> 00:27:34,910
third-party server for classification

00:27:33,230 --> 00:27:36,470
and that's really important in today's

00:27:34,910 --> 00:27:38,540
world where poverty is always top of

00:27:36,470 --> 00:27:40,790
mind and with sense of closure you can

00:27:38,540 --> 00:27:42,920
get that for free of course the link to

00:27:40,790 --> 00:27:44,390
this is lower latency because no server

00:27:42,920 --> 00:27:46,820
is involved when you're running on the

00:27:44,390 --> 00:27:48,800
client side then we don't have that

00:27:46,820 --> 00:27:50,900
round-trip time from the mobile device

00:27:48,800 --> 00:27:53,300
let's say to the server which could be

00:27:50,900 --> 00:27:56,210
over 100 milliseconds or more in a bad

00:27:53,300 --> 00:27:58,880
mobile network connection and of course

00:27:56,210 --> 00:28:01,010
that leads to lower cost if you have a

00:27:58,880 --> 00:28:02,630
reasonably popular websites you might be

00:28:01,010 --> 00:28:05,900
spending tens of thousands of dollars on

00:28:02,630 --> 00:28:08,300
graphics cards and beefy processors to

00:28:05,900 --> 00:28:10,070
run those machine learning models by

00:28:08,300 --> 00:28:11,960
running on the client side all of that

00:28:10,070 --> 00:28:13,760
hardware is no longer needed and of

00:28:11,960 --> 00:28:16,940
course you can just execute their @ly on

00:28:13,760 --> 00:28:18,950
the client machine as you'll know

00:28:16,940 --> 00:28:20,990
interactivity is a big thing for

00:28:18,950 --> 00:28:23,330
JavaScript is kind of being designed for

00:28:20,990 --> 00:28:26,540
that from day one so we have a much

00:28:23,330 --> 00:28:28,730
richer ecosystem for graphics and

00:28:26,540 --> 00:28:31,940
charting and all that kind of fun stuff

00:28:28,730 --> 00:28:33,590
and the final point reach in scale which

00:28:31,940 --> 00:28:37,250
we all know and love being web

00:28:33,590 --> 00:28:38,690
developers ourselves essentially anyone

00:28:37,250 --> 00:28:41,120
can click on the link in the web browser

00:28:38,690 --> 00:28:43,760
and have the machine running loaded for

00:28:41,120 --> 00:28:45,770
free versus trying to do this in other

00:28:43,760 --> 00:28:48,590
ways on the server side we could inquire

00:28:45,770 --> 00:28:50,480
to first of all understand Linux and

00:28:48,590 --> 00:28:52,670
install Linux then you need to install

00:28:50,480 --> 00:28:53,930
the tensorflow stuff and the drivers for

00:28:52,670 --> 00:28:55,280
CUDA from Nvidia

00:28:53,930 --> 00:28:55,850
then you need to install of a github

00:28:55,280 --> 00:28:57,590
repo

00:28:55,850 --> 00:28:59,570
and compile it and make sure it runs

00:28:57,590 --> 00:29:01,940
with the environment on the surface I

00:28:59,570 --> 00:29:03,230
see all of that hassle goes away when

00:29:01,940 --> 00:29:05,000
you're running on the client-side net

00:29:03,230 --> 00:29:07,250
kick if that can get you more eyes on

00:29:05,000 --> 00:29:08,330
your research in machine learning which

00:29:07,250 --> 00:29:10,340
could be very valuable if you're a

00:29:08,330 --> 00:29:12,200
researcher for example maybe that means

00:29:10,340 --> 00:29:13,669
10,000 people can try your model out

00:29:12,200 --> 00:29:16,640
instead of the five people in your lab

00:29:13,669 --> 00:29:18,410
that can maybe uncover bugs or biases in

00:29:16,640 --> 00:29:21,440
your model but it can then fix before

00:29:18,410 --> 00:29:23,179
you see primetime now flipping to the

00:29:21,440 --> 00:29:24,710
server side for just a second there's

00:29:23,179 --> 00:29:27,679
also some benefits there too of course

00:29:24,710 --> 00:29:29,210
if you choose to use nodejs so obviously

00:29:27,679 --> 00:29:31,909
we can use potential flow safe model

00:29:29,210 --> 00:29:33,500
without conversion as we spoke about we

00:29:31,909 --> 00:29:35,030
can also run larger models when we can

00:29:33,500 --> 00:29:37,760
do on the client side due to the memory

00:29:35,030 --> 00:29:39,230
limitations in chrome per tab and of

00:29:37,760 --> 00:29:40,640
course it allows you to write write code

00:29:39,230 --> 00:29:43,940
in just one language which is of course

00:29:40,640 --> 00:29:45,650
JavaScript which needless to say a lot

00:29:43,940 --> 00:29:48,950
of devs use javascript according to the

00:29:45,650 --> 00:29:51,289
Stack Overflow survey 2019 I believe 67%

00:29:48,950 --> 00:29:53,090
of people are now using javascript in

00:29:51,289 --> 00:29:55,520
some capacity which is pretty cool and

00:29:53,090 --> 00:29:57,559
then the performance benefits of course

00:29:55,520 --> 00:30:00,049
you can get by getting the just-in-time

00:29:57,559 --> 00:30:01,880
compiler boost in nodejs overusing

00:30:00,049 --> 00:30:05,330
machine learning in Python for example

00:30:01,880 --> 00:30:07,159
so with that I would like to talk to you

00:30:05,330 --> 00:30:08,679
a little bit about the resources you can

00:30:07,159 --> 00:30:11,570
use to get started if you're interested

00:30:08,679 --> 00:30:13,940
if there's one slide you want to

00:30:11,570 --> 00:30:16,280
bookmark today let it be this one and

00:30:13,940 --> 00:30:18,289
the next one actually so essentially

00:30:16,280 --> 00:30:20,840
here some tutorials you can use to get

00:30:18,289 --> 00:30:23,299
started these are code labs you can walk

00:30:20,840 --> 00:30:25,520
through them step by step and learn as

00:30:23,299 --> 00:30:27,409
you go but he's a really robust ways to

00:30:25,520 --> 00:30:29,450
learn some of the things with tensorflow

00:30:27,409 --> 00:30:31,850
GS and machine learning principles in

00:30:29,450 --> 00:30:33,860
general and then of course this slide

00:30:31,850 --> 00:30:36,380
has pretty much everything else on the

00:30:33,860 --> 00:30:37,970
slide here's our website to get started

00:30:36,380 --> 00:30:40,309
the models that you've seen in this

00:30:37,970 --> 00:30:42,830
demonstration and many more available on

00:30:40,309 --> 00:30:45,500
our github there and we have a Google

00:30:42,830 --> 00:30:47,150
group to answer any more technical

00:30:45,500 --> 00:30:49,490
questions that you may have or may be

00:30:47,150 --> 00:30:51,559
thinking about later on and then finally

00:30:49,490 --> 00:30:53,030
we have code and glitch which have

00:30:51,559 --> 00:30:55,760
boilerplate code you can use to get

00:30:53,030 --> 00:30:57,409
started now on the right-hand side is I

00:30:55,760 --> 00:30:59,990
recommended reading material this is a

00:30:57,409 --> 00:31:01,100
great book that covers everything even

00:30:59,990 --> 00:31:02,990
if you have no machine learning

00:31:01,100 --> 00:31:04,370
background at all that's completely fine

00:31:02,990 --> 00:31:05,840
there's only you know some basic Java

00:31:04,370 --> 00:31:07,320
scripts this book will take you through

00:31:05,840 --> 00:31:08,460
everything you need to know to

00:31:07,320 --> 00:31:11,490
your machine learning chops up the

00:31:08,460 --> 00:31:13,200
scratch and with that's please come join

00:31:11,490 --> 00:31:14,730
our community in fact here's just a few

00:31:13,200 --> 00:31:16,350
more examples of what people have been

00:31:14,730 --> 00:31:18,300
making just the last few weeks and this

00:31:16,350 --> 00:31:20,370
is growing every week if you check out

00:31:18,300 --> 00:31:22,740
the major of T FG s hashtag on Twitter

00:31:20,370 --> 00:31:24,660
or LinkedIn you can find what people are

00:31:22,740 --> 00:31:26,400
making right now and please do

00:31:24,660 --> 00:31:28,530
contribution for a chance to be featured

00:31:26,400 --> 00:31:31,860
at future show Intel sessions or even

00:31:28,530 --> 00:31:33,120
conferences and such in the future so

00:31:31,860 --> 00:31:35,310
the final thing I want to leave you with

00:31:33,120 --> 00:31:38,670
is this last demo from a guy in Tokyo

00:31:35,310 --> 00:31:40,980
Japan he is actually a kind of dancer

00:31:38,670 --> 00:31:43,230
and he's now used machine learning

00:31:40,980 --> 00:31:45,420
center fo GS to make his next hip-hop

00:31:43,230 --> 00:31:47,310
video as you can see here and it's

00:31:45,420 --> 00:31:48,960
really great to see creative folks

00:31:47,310 --> 00:31:50,850
starting to embrace machine learning as

00:31:48,960 --> 00:31:53,910
well it's no longer just for the one

00:31:50,850 --> 00:31:55,740
percent of people with PhDs it's now for

00:31:53,910 --> 00:31:57,930
everyone and hopefully tensorflow J's

00:31:55,740 --> 00:31:59,640
can make this even more accessible to

00:31:57,930 --> 00:32:01,620
all in the future and I'm really excited

00:31:59,640 --> 00:32:03,510
to see what you will make and please do

00:32:01,620 --> 00:32:05,100
you tag us with made of TF KS if you do

00:32:03,510 --> 00:32:07,260
make anything in the future say we can

00:32:05,100 --> 00:32:09,240
share at the team so--that's please t

00:32:07,260 --> 00:32:10,890
stay in touch happy to answer your

00:32:09,240 --> 00:32:12,330
questions after the talk

00:32:10,890 --> 00:32:15,510
or will it connect with me on LinkedIn

00:32:12,330 --> 00:32:17,700
or Twitter and happy to ask questions

00:32:15,510 --> 00:32:21,590
over there as well thank you very much

00:32:17,700 --> 00:32:21,590

YouTube URL: https://www.youtube.com/watch?v=khVnbRlr3qI


