Title: Workshop: The Nuts and Bolts of WebdriverIO - Christian Bromann, Sauce Labs
Publication date: 2020-06-26
Playlist: OpenJS World 2020
Description: 
	
Captions: 
	00:00:00,060 --> 00:00:09,240
alright hello everyone and welcome to

00:00:04,170 --> 00:00:13,500
the nuts and bolts of web developer this

00:00:09,240 --> 00:00:15,089
workshop and I'm really looking forward

00:00:13,500 --> 00:00:19,740
for the next two hours learning

00:00:15,089 --> 00:00:21,990
everything about Ricardo and how to use

00:00:19,740 --> 00:00:24,560
framework and how you you know build up

00:00:21,990 --> 00:00:28,890
your test automation framework from 0 to

00:00:24,560 --> 00:00:30,960
infinity before we get into the nuts and

00:00:28,890 --> 00:00:33,059
bolts let me introduce myself I'm

00:00:30,960 --> 00:00:34,860
Christian I am a software engineer in

00:00:33,059 --> 00:00:37,110
the open-source program office at sauce

00:00:34,860 --> 00:00:39,149
labs where work on various of

00:00:37,110 --> 00:00:41,910
open-source projects that are related to

00:00:39,149 --> 00:00:45,090
testing and test automation I'm also

00:00:41,910 --> 00:00:46,860
helping out in various of ways to help

00:00:45,090 --> 00:00:48,890
the company to be good open-source

00:00:46,860 --> 00:00:52,340
citizen externally as well as internally

00:00:48,890 --> 00:00:55,770
and I try to support and help out the

00:00:52,340 --> 00:01:00,270
w3c working group in creating the new

00:00:55,770 --> 00:01:02,850
stack for the web protocol our agenda

00:01:00,270 --> 00:01:05,100
for today looks as follows we have an

00:01:02,850 --> 00:01:08,549
introductory part which is going to be a

00:01:05,100 --> 00:01:10,950
presentation of me and that I give about

00:01:08,549 --> 00:01:14,340
on red level and there will be an hot

00:01:10,950 --> 00:01:15,720
hands-on workshop where you can already

00:01:14,340 --> 00:01:18,360
go on the web site

00:01:15,720 --> 00:01:22,070
get up at ComStat fisherman's pro man /

00:01:18,360 --> 00:01:24,540
reputable - hands on and where we have

00:01:22,070 --> 00:01:26,280
priority of tasks and that you can

00:01:24,540 --> 00:01:29,130
follow along and that help you to

00:01:26,280 --> 00:01:33,470
understand the framework and you know

00:01:29,130 --> 00:01:36,479
index and pace of it if you have already

00:01:33,470 --> 00:01:39,240
experienced with retro volume you can

00:01:36,479 --> 00:01:40,799
skip the presentation part and you know

00:01:39,240 --> 00:01:42,810
have it in the background it's already

00:01:40,799 --> 00:01:44,670
start working on the workshop I think

00:01:42,810 --> 00:01:46,350
there's enough material that you know

00:01:44,670 --> 00:01:49,049
kit can keep you busy for the next

00:01:46,350 --> 00:01:52,020
couple of hours and so if you're already

00:01:49,049 --> 00:01:53,220
familiar whatever if you already heard

00:01:52,020 --> 00:01:55,320
the presentation or seen the

00:01:53,220 --> 00:01:57,119
presentation free free to just skip and

00:01:55,320 --> 00:01:59,759
work on the workshop and we will come

00:01:57,119 --> 00:02:02,159
back to it after the presentation work

00:01:59,759 --> 00:02:05,040
and then help individual people out in

00:02:02,159 --> 00:02:07,200
the chat where we also have a couple of

00:02:05,040 --> 00:02:11,069
members of the wetterer project with

00:02:07,200 --> 00:02:12,900
questions and answers so let me get

00:02:11,069 --> 00:02:16,459
started with introducing repre

00:02:12,900 --> 00:02:19,440
for everyone who has not used so far and

00:02:16,459 --> 00:02:22,560
before we and if before we want to do

00:02:19,440 --> 00:02:25,140
that I want to step take a step take you

00:02:22,560 --> 00:02:27,540
take even one more step back I want to

00:02:25,140 --> 00:02:31,290
start with explaining the web part of

00:02:27,540 --> 00:02:33,690
protocol in general the word protocol is

00:02:31,290 --> 00:02:36,750
a remote control interface that enables

00:02:33,690 --> 00:02:39,680
introspection and control of user agents

00:02:36,750 --> 00:02:42,660
what does it mean and their civil and

00:02:39,680 --> 00:02:44,880
words that are important here first off

00:02:42,660 --> 00:02:48,390
it says it's a remote control interface

00:02:44,880 --> 00:02:51,209
that means that it is some sort of

00:02:48,390 --> 00:02:53,910
contract that allows you to you know do

00:02:51,209 --> 00:02:56,090
certain things with that protocol then

00:02:53,910 --> 00:02:59,940
this protocol enables an introspection

00:02:56,090 --> 00:03:02,190
and control which means this interface

00:02:59,940 --> 00:03:05,370
and that the web Trevor describes allows

00:03:02,190 --> 00:03:08,250
you to introspect and control that user

00:03:05,370 --> 00:03:10,349
and that's something and at the end it

00:03:08,250 --> 00:03:12,690
says the introspection control of an

00:03:10,349 --> 00:03:14,370
user nation and that means a user agent

00:03:12,690 --> 00:03:17,370
can be everything that has a display

00:03:14,370 --> 00:03:19,620
that can be used by a user that is not

00:03:17,370 --> 00:03:22,799
only a browser that you would normally

00:03:19,620 --> 00:03:26,549
use it can be everything from you know

00:03:22,799 --> 00:03:28,769
the console a Playstation the phone and

00:03:26,549 --> 00:03:34,410
tablet anything that can be used by a

00:03:28,769 --> 00:03:36,569
user can be controlled theoretically so

00:03:34,410 --> 00:03:38,730
the way how this parameter looks like is

00:03:36,569 --> 00:03:41,400
as follows we have a set of rest

00:03:38,730 --> 00:03:46,799
endpoints that allow you to control and

00:03:41,400 --> 00:03:48,239
introspect Abaza you have wesson points

00:03:46,799 --> 00:03:50,250
that allow you to create a browser

00:03:48,239 --> 00:03:53,340
session we have restaurant phones that

00:03:50,250 --> 00:03:57,630
allow you to visit a specific URL and to

00:03:53,340 --> 00:04:00,180
diversify other things to trigger this

00:03:57,630 --> 00:04:03,090
action in the browser you will have to

00:04:00,180 --> 00:04:05,549
call this URL and the reason why this

00:04:03,090 --> 00:04:07,260
was created this way is it allowed

00:04:05,549 --> 00:04:10,530
everyone with any programming language

00:04:07,260 --> 00:04:13,230
that you know supports the sending HTTP

00:04:10,530 --> 00:04:15,900
request to implement the work tunnel

00:04:13,230 --> 00:04:16,769
protocol and therefore we have these

00:04:15,900 --> 00:04:19,769
days

00:04:16,769 --> 00:04:24,469
selenium package and for almost all

00:04:19,769 --> 00:04:24,469
languages that they are also out there

00:04:24,840 --> 00:04:30,490
so the return caller call is w3c

00:04:28,270 --> 00:04:33,010
standards for bronze automation and this

00:04:30,490 --> 00:04:35,200
is really important all browser vendors

00:04:33,010 --> 00:04:37,240
are working together in building out the

00:04:35,200 --> 00:04:39,639
standard for automating your browser

00:04:37,240 --> 00:04:41,470
that means that every time you automate

00:04:39,639 --> 00:04:42,160
the browser you will have the same

00:04:41,470 --> 00:04:44,290
results

00:04:42,160 --> 00:04:46,630
running the click command on Chrome or

00:04:44,290 --> 00:04:49,690
running the click command on the fire it

00:04:46,630 --> 00:04:52,060
will be always the same you might have

00:04:49,690 --> 00:04:53,800
heard on you might have heard about the

00:04:52,060 --> 00:04:57,580
J's wire protocol before which was the

00:04:53,800 --> 00:04:59,970
predecessor then now since we have a w3c

00:04:57,580 --> 00:05:03,639
standard it's not valid anymore

00:04:59,970 --> 00:05:05,710
the rector protocols not selenium back

00:05:03,639 --> 00:05:07,840
in the days words the selenium project

00:05:05,710 --> 00:05:09,460
really contained all the drivers and all

00:05:07,840 --> 00:05:12,130
the implementations of these drivers

00:05:09,460 --> 00:05:14,200
pretty much selenium was all what is for

00:05:12,130 --> 00:05:16,720
browser nation but these things it is

00:05:14,200 --> 00:05:20,020
nicely abstracted into an external

00:05:16,720 --> 00:05:22,410
protocol that is developed by standard

00:05:20,020 --> 00:05:25,150
organization and then their variety of

00:05:22,410 --> 00:05:27,400
implementation implementers and that

00:05:25,150 --> 00:05:29,500
have implemented the framework on top of

00:05:27,400 --> 00:05:33,100
rectangle which is for instance selenium

00:05:29,500 --> 00:05:34,870
or what the Rio as I mentioned before it

00:05:33,100 --> 00:05:37,000
defines the rest of the face so you can

00:05:34,870 --> 00:05:39,640
use and implement this protocol for all

00:05:37,000 --> 00:05:41,500
languages and it's a common denominator

00:05:39,640 --> 00:05:44,470
currently for cross browser automation

00:05:41,500 --> 00:05:45,970
and you might have heard about IBM which

00:05:44,470 --> 00:05:48,490
extends the web that would call for

00:05:45,970 --> 00:05:50,410
allowing mobile commands but the record

00:05:48,490 --> 00:05:54,100
protocol itself as it is right now is

00:05:50,410 --> 00:05:57,389
focused on browser automation NS mention

00:05:54,100 --> 00:05:59,879
can be used with all languages

00:05:57,389 --> 00:06:01,530
the setup that you usually would have if

00:05:59,879 --> 00:06:05,340
you run the test with the record

00:06:01,530 --> 00:06:08,729
protocol is that you would have a simple

00:06:05,340 --> 00:06:11,310
test script or you know yeah a test

00:06:08,729 --> 00:06:12,930
script or an automation script that you

00:06:11,310 --> 00:06:15,210
have written with selenium or other

00:06:12,930 --> 00:06:18,719
webdriver compare webdriver based

00:06:15,210 --> 00:06:21,389
frameworks like birthday bell and this

00:06:18,719 --> 00:06:24,689
framework would then send HTTP requests

00:06:21,389 --> 00:06:27,389
to something called a driver this today

00:06:24,689 --> 00:06:29,729
almost for every browser a driver and

00:06:27,389 --> 00:06:32,969
that allows us to control and introspect

00:06:29,729 --> 00:06:35,280
a browser it works similarly for mobile

00:06:32,969 --> 00:06:37,430
where we have a QM that allows you and

00:06:35,280 --> 00:06:42,360
simplify the mobile automation across

00:06:37,430 --> 00:06:44,190
iOS and Android the drivers in itself

00:06:42,360 --> 00:06:46,139
who are which are developed by the

00:06:44,190 --> 00:06:50,150
browser vendors have all the knowledge

00:06:46,139 --> 00:06:54,000
to trigger an actual event in the

00:06:50,150 --> 00:06:56,460
browser which is different to tools like

00:06:54,000 --> 00:07:00,949
ciphers that only can emulate these

00:06:56,460 --> 00:07:04,529
events so as I mentioned you can

00:07:00,949 --> 00:07:07,440
literally you know ultimate every news

00:07:04,529 --> 00:07:09,750
agent one of my projects in the past was

00:07:07,440 --> 00:07:13,169
to automate and web application on a

00:07:09,750 --> 00:07:15,029
smart TV using action which you can see

00:07:13,169 --> 00:07:16,520
here in this video so you can

00:07:15,029 --> 00:07:18,750
technically if you have a driver

00:07:16,520 --> 00:07:21,569
implement that protocol for that

00:07:18,750 --> 00:07:27,000
specific you know IOT device and have

00:07:21,569 --> 00:07:29,550
web driver be able to automate it you

00:07:27,000 --> 00:07:32,129
know for cloud-based vendors like sauce

00:07:29,550 --> 00:07:34,860
labs their value proposition is easy

00:07:32,129 --> 00:07:37,680
right instead of you know having to set

00:07:34,860 --> 00:07:39,210
up all these browser drivers for you and

00:07:37,680 --> 00:07:41,909
having to keep up with the browser

00:07:39,210 --> 00:07:44,129
updates there's these browser vendors

00:07:41,909 --> 00:07:46,949
that just do this for you and they

00:07:44,129 --> 00:07:49,349
provide you one HTTP endpoint where you

00:07:46,949 --> 00:07:52,050
can just create a session for a mobile

00:07:49,349 --> 00:07:54,000
device or a browser as you wish and they

00:07:52,050 --> 00:07:56,370
provide you with useful additional

00:07:54,000 --> 00:08:00,449
information like screenshots lots and

00:07:56,370 --> 00:08:03,240
performance information let's get to

00:08:00,449 --> 00:08:05,370
whatever or in more detail and start

00:08:03,240 --> 00:08:08,159
with the really key features of the

00:08:05,370 --> 00:08:11,190
framework one of them I want to point

00:08:08,159 --> 00:08:13,139
out first is the easy test data web

00:08:11,190 --> 00:08:16,880
developer Mike's a configuration wizard

00:08:13,139 --> 00:08:20,419
that walks you through a common setup

00:08:16,880 --> 00:08:23,550
step to create your configuration file

00:08:20,419 --> 00:08:26,250
this allows you to simply get will just

00:08:23,550 --> 00:08:30,719
are up and running quickly with just a

00:08:26,250 --> 00:08:32,640
matter of seconds it also provides

00:08:30,719 --> 00:08:35,880
various of services that allow you to

00:08:32,640 --> 00:08:38,729
keep integrate into third-party vendors

00:08:35,880 --> 00:08:40,649
like app tools for visual testing where

00:08:38,729 --> 00:08:42,659
services enhance the browser

00:08:40,649 --> 00:08:45,120
functionality and the browser interface

00:08:42,659 --> 00:08:49,350
to just simply interact with a

00:08:45,120 --> 00:08:51,480
third-party vendor another example for

00:08:49,350 --> 00:08:54,630
that is sauce in the sauce and service

00:08:51,480 --> 00:08:57,390
it just simply allows you to start this

00:08:54,630 --> 00:09:01,370
job on sauce labs and we've just sent

00:08:57,390 --> 00:09:01,370
some configuration in your config file

00:09:02,560 --> 00:09:06,680
what's also great is that we have a lot

00:09:04,879 --> 00:09:08,779
of tutorials on learn material and

00:09:06,680 --> 00:09:10,879
there's website called learn the craft

00:09:08,779 --> 00:09:13,730
of arrow where you can currently find a

00:09:10,879 --> 00:09:18,290
lot of videos for free to watch and

00:09:13,730 --> 00:09:20,779
learn but there's also a channel built

00:09:18,290 --> 00:09:24,649
by one of our team members Kevin lamping

00:09:20,779 --> 00:09:27,860
who has created so many great videos on

00:09:24,649 --> 00:09:30,500
work Carell and there's others other

00:09:27,860 --> 00:09:35,329
contributors that have a lot of mercury

00:09:30,500 --> 00:09:37,430
and materials well well

00:09:35,329 --> 00:09:40,279
one additional really well awesome thing

00:09:37,430 --> 00:09:42,949
about repairs the community we've

00:09:40,279 --> 00:09:45,319
currently almost 6,000 people in our

00:09:42,949 --> 00:09:47,509
support set which help each other out on

00:09:45,319 --> 00:09:49,850
daily basis so if you have a problem

00:09:47,509 --> 00:09:54,170
using web demo if you run into a bug you

00:09:49,850 --> 00:09:56,509
can always find your help there and last

00:09:54,170 --> 00:09:58,579
but not least webdriver iOS of code

00:09:56,509 --> 00:10:00,829
check is not owned by a company it's

00:09:58,579 --> 00:10:04,220
owned by the OBJ's foundation that

00:10:00,829 --> 00:10:07,220
allows us to this foundation helps us to

00:10:04,220 --> 00:10:10,149
you know scale the project in a healthy

00:10:07,220 --> 00:10:13,009
manner if we get new Colorado

00:10:10,149 --> 00:10:15,040
collaborators on board and you know work

00:10:13,009 --> 00:10:19,399
together with projects like node.js

00:10:15,040 --> 00:10:22,610
web pack Express for amp and to commonly

00:10:19,399 --> 00:10:27,620
improve ourselves throughout the

00:10:22,610 --> 00:10:29,360
project's web double you can essentially

00:10:27,620 --> 00:10:31,819
be used in three different modes and

00:10:29,360 --> 00:10:34,790
there is the bare metal mode I would

00:10:31,819 --> 00:10:36,939
call it the standalone mode and the wao

00:10:34,790 --> 00:10:39,980
testrunner mode

00:10:36,939 --> 00:10:42,189
the reason behind these three different

00:10:39,980 --> 00:10:45,559
layers is because we wanted to make

00:10:42,189 --> 00:10:48,470
automating a browser or mobile device as

00:10:45,559 --> 00:10:51,860
modular as possible with the bare metal

00:10:48,470 --> 00:10:54,380
mode you that you can use with the

00:10:51,860 --> 00:10:56,809
webdriver NPM package you pretty much

00:10:54,380 --> 00:11:01,279
get direct access to the retro protocol

00:10:56,809 --> 00:11:04,699
it exposes all the all the methods that

00:11:01,279 --> 00:11:07,490
directorate protocol provides as an

00:11:04,699 --> 00:11:09,949
interface and allows you to just you

00:11:07,490 --> 00:11:11,580
know use the protocol in a programmable

00:11:09,949 --> 00:11:14,520
fashion

00:11:11,580 --> 00:11:17,400
the City Love Boat then enhances that

00:11:14,520 --> 00:11:20,160
functionality by creating a bunch of

00:11:17,400 --> 00:11:22,530
commands on top of it that help you to

00:11:20,160 --> 00:11:24,570
do simple interaction and common testing

00:11:22,530 --> 00:11:27,960
interactions with your application on

00:11:24,570 --> 00:11:30,210
the test and last but not least the wao

00:11:27,960 --> 00:11:32,970
test runner then provides you in tests

00:11:30,210 --> 00:11:35,790
and tests as fact to everything around

00:11:32,970 --> 00:11:37,980
kettle browser automation so you can run

00:11:35,790 --> 00:11:42,090
you can automate the browser in tests

00:11:37,980 --> 00:11:44,640
certain conditions in it this example

00:11:42,090 --> 00:11:47,520
gives an example using the bare metal of

00:11:44,640 --> 00:11:49,920
the webdriver package where you have a

00:11:47,520 --> 00:11:52,830
navigate to command a fine element

00:11:49,920 --> 00:11:54,840
command and you see there if if you find

00:11:52,830 --> 00:11:58,740
an element you need to know what the

00:11:54,840 --> 00:12:01,590
protocol returns in order to access for

00:11:58,740 --> 00:12:03,750
instance here the element ID and this is

00:12:01,590 --> 00:12:06,450
sometimes you know not useful if you

00:12:03,750 --> 00:12:09,480
might want to write extensive extensive

00:12:06,450 --> 00:12:12,000
test food because you want don't want to

00:12:09,480 --> 00:12:16,140
deal with low-level protocol primitives

00:12:12,000 --> 00:12:17,790
um but this rectangle protocol is this

00:12:16,140 --> 00:12:20,730
vector of a package definitely helps you

00:12:17,790 --> 00:12:22,620
if you one want to build a new framework

00:12:20,730 --> 00:12:27,660
that looks a little bit different than

00:12:22,620 --> 00:12:30,000
workable for your community there

00:12:27,660 --> 00:12:32,250
examples like spectrum who is the test

00:12:30,000 --> 00:12:36,900
framework for electron that has used

00:12:32,250 --> 00:12:38,550
this capability the web developer

00:12:36,900 --> 00:12:40,110
checked as I mention before makes

00:12:38,550 --> 00:12:43,020
interacting with the browser a little

00:12:40,110 --> 00:12:45,060
bit more easier as you can see here the

00:12:43,020 --> 00:12:47,310
commands are little more shorter and

00:12:45,060 --> 00:12:49,530
there is something like an element

00:12:47,310 --> 00:12:53,100
object where you have to fetch an

00:12:49,530 --> 00:12:57,720
element you explicitly call element

00:12:53,100 --> 00:12:59,520
specific commands on it and that last

00:12:57,720 --> 00:13:02,400
but not least there is a test one a mode

00:12:59,520 --> 00:13:05,670
where you can run web developer man's in

00:13:02,400 --> 00:13:08,040
a test concept context where you have an

00:13:05,670 --> 00:13:10,230
eight-block that allows you to assert

00:13:08,040 --> 00:13:12,690
the amount of elements that you find on

00:13:10,230 --> 00:13:14,940
the page or where you can receive a

00:13:12,690 --> 00:13:17,710
click we can receive a text of a certain

00:13:14,940 --> 00:13:20,620
element and assert against that

00:13:17,710 --> 00:13:22,330
since version 6 we now have an custom

00:13:20,620 --> 00:13:25,750
assertion library that is built on top

00:13:22,330 --> 00:13:28,480
of expect so you can so you can so you

00:13:25,750 --> 00:13:33,580
already have an assertion library

00:13:28,480 --> 00:13:34,990
integrated and ready to use to get

00:13:33,580 --> 00:13:38,500
started with the W your test Runner

00:13:34,990 --> 00:13:40,750
which i think is the common common usage

00:13:38,500 --> 00:13:43,270
of the whatever framework is by

00:13:40,750 --> 00:13:46,420
installing the anti video CLI package

00:13:43,270 --> 00:13:48,010
which brings you all the Althing

00:13:46,420 --> 00:13:52,030
capabilities in your command-line

00:13:48,010 --> 00:13:54,550
interface we have a config command that

00:13:52,030 --> 00:13:57,490
helps you to configure wao config file

00:13:54,550 --> 00:13:59,830
we allow you to install services and

00:13:57,490 --> 00:14:02,970
reporters into your config file

00:13:59,830 --> 00:14:05,800
automatically we have a rebel

00:14:02,970 --> 00:14:10,680
functionality and of course a run

00:14:05,800 --> 00:14:10,680
command that allows you to run tests you

00:14:12,150 --> 00:14:17,860
everything around the word W test runner

00:14:14,590 --> 00:14:19,680
goes along goes with the config file

00:14:17,860 --> 00:14:21,940
that you used to run your test specs

00:14:19,680 --> 00:14:24,550
this config file exposes all

00:14:21,940 --> 00:14:28,450
configurations and options for your

00:14:24,550 --> 00:14:30,460
specific test run these configuration

00:14:28,450 --> 00:14:32,950
can include things like the specs that

00:14:30,460 --> 00:14:36,370
you want to run which specs you want to

00:14:32,950 --> 00:14:38,740
include the you know concurrency that

00:14:36,370 --> 00:14:40,420
you run want to run your tests in the

00:14:38,740 --> 00:14:45,220
capabilities that you want to run your

00:14:40,420 --> 00:14:46,630
tests in and all these things it is

00:14:45,220 --> 00:14:48,400
really important that you build out

00:14:46,630 --> 00:14:50,110
allowed tests you'd that you have

00:14:48,400 --> 00:14:52,600
multiple configuration files for

00:14:50,110 --> 00:14:54,550
different environments for your

00:14:52,600 --> 00:14:56,770
development workflow you don't you want

00:14:54,550 --> 00:14:59,020
to specifically one just one browser

00:14:56,770 --> 00:15:01,450
like Chrome to make sure that you're in

00:14:59,020 --> 00:15:03,490
trenches pass but for staging or

00:15:01,450 --> 00:15:05,950
production tests you might want to tweak

00:15:03,490 --> 00:15:07,780
that configuration a little bit so you

00:15:05,950 --> 00:15:09,710
run it on more browser to create get

00:15:07,780 --> 00:15:12,529
more coverage

00:15:09,710 --> 00:15:14,750
and the really you know best face of

00:15:12,529 --> 00:15:17,089
Maui that you can do is you have you

00:15:14,750 --> 00:15:19,880
create a common WD or concrete file and

00:15:17,089 --> 00:15:22,850
to enhance that complete file in a new

00:15:19,880 --> 00:15:25,790
config file as you can see here I have a

00:15:22,850 --> 00:15:27,620
double yellow sauce config file which

00:15:25,790 --> 00:15:31,100
are used for my staging and production

00:15:27,620 --> 00:15:33,350
tests where you know run multiple

00:15:31,100 --> 00:15:35,240
capabilities and where I include the

00:15:33,350 --> 00:15:40,610
sauce service which I don't need for

00:15:35,240 --> 00:15:42,290
development purposes Testament works

00:15:40,610 --> 00:15:45,709
that are supported with WebP Aveiro a

00:15:42,290 --> 00:15:47,149
mocker cucumber jasmine and chest just

00:15:45,709 --> 00:15:50,209
has the little asterisks in there

00:15:47,149 --> 00:15:52,970
because we don't have just integrated

00:15:50,209 --> 00:15:57,470
itself but the tests that you run with

00:15:52,970 --> 00:16:03,830
jasmine and our assertion library look

00:15:57,470 --> 00:16:05,899
like just tests so next to the framework

00:16:03,830 --> 00:16:07,730
frameworks that we support we always

00:16:05,899 --> 00:16:09,890
have fires of reporters that you can use

00:16:07,730 --> 00:16:13,370
so expect dawn to lure j-unit in city

00:16:09,890 --> 00:16:15,170
tap moccasin with and we have a bunch of

00:16:13,370 --> 00:16:19,209
services that allow you to integrate

00:16:15,170 --> 00:16:23,180
with other server third party vendors or

00:16:19,209 --> 00:16:24,770
services like saws appium with a plugin

00:16:23,180 --> 00:16:30,200
that allows you to start the static

00:16:24,770 --> 00:16:33,110
server to to you know serve your web app

00:16:30,200 --> 00:16:36,410
we have services for drivers and

00:16:33,110 --> 00:16:39,230
selenium standalone server and a lot of

00:16:36,410 --> 00:16:41,690
more and you can with the reporters and

00:16:39,230 --> 00:16:43,940
services can create your test set up

00:16:41,690 --> 00:16:47,890
fully individually that is suited for

00:16:43,940 --> 00:16:51,500
your needs what services are doing

00:16:47,890 --> 00:16:53,720
essentially they are allowing you to you

00:16:51,500 --> 00:16:56,720
know introspect the lifecycle of a test

00:16:53,720 --> 00:17:00,320
and they allow you to create a bunch of

00:16:56,720 --> 00:17:02,510
hooks for specific scenarios so specific

00:17:00,320 --> 00:17:05,510
lifecycle events like before session

00:17:02,510 --> 00:17:08,630
starts before tests ads before suit

00:17:05,510 --> 00:17:11,540
starts or before your command starts as

00:17:08,630 --> 00:17:13,220
well as after all that and it allows you

00:17:11,540 --> 00:17:16,220
to do an asynchronous operation on top

00:17:13,220 --> 00:17:18,230
of it that allows us to start servers or

00:17:16,220 --> 00:17:22,620
start a MySQL database if we need to

00:17:18,230 --> 00:17:25,579
whenever we we need it and

00:17:22,620 --> 00:17:28,350
is really a nice way to encapsulate

00:17:25,579 --> 00:17:30,720
configurations and come set encapsulate

00:17:28,350 --> 00:17:32,750
complexity out of the configuration file

00:17:30,720 --> 00:17:36,720
which makes it really a plug-and-play

00:17:32,750 --> 00:17:38,940
tag and playable a lot of these servers

00:17:36,720 --> 00:17:41,340
already exist on NPM and there's a big

00:17:38,940 --> 00:17:43,380
community that creates services for you

00:17:41,340 --> 00:17:47,850
but you can also create your custom

00:17:43,380 --> 00:17:50,520
services along the way as an example I

00:17:47,850 --> 00:17:52,050
want to look into the WWF food service

00:17:50,520 --> 00:17:54,600
which I really like because it allows

00:17:52,050 --> 00:17:57,480
you to do to run chrome dev tools

00:17:54,600 --> 00:18:00,900
protocol commands while running tests on

00:17:57,480 --> 00:18:03,870
chrome and the way how it works is you

00:18:00,900 --> 00:18:07,980
have a webdriver session as normal using

00:18:03,870 --> 00:18:12,330
the Chrome browser by new ink and at the

00:18:07,980 --> 00:18:14,640
same times with that service you can run

00:18:12,330 --> 00:18:17,429
the CDP command and for instance listen

00:18:14,640 --> 00:18:18,450
to network locks or do various other

00:18:17,429 --> 00:18:21,360
things that the chrome dev tools

00:18:18,450 --> 00:18:26,250
protocol provides you and for that I

00:18:21,360 --> 00:18:31,500
want to show an example so you see here

00:18:26,250 --> 00:18:35,220
my IDE hopefully and I have an example

00:18:31,500 --> 00:18:39,179
in the directory where I have a test

00:18:35,220 --> 00:18:40,740
that you know enables the network and it

00:18:39,179 --> 00:18:42,929
wants to see the command to enable the

00:18:40,740 --> 00:18:46,500
network interface in combat boots and

00:18:42,929 --> 00:18:49,920
then literally little game just listens

00:18:46,500 --> 00:18:53,010
to events that is happening in quo so

00:18:49,920 --> 00:18:55,830
what I do here is I open the Google web

00:18:53,010 --> 00:18:58,429
site and at the same time I listen to

00:18:55,830 --> 00:19:01,320
whatever we press has been loaded and

00:18:58,429 --> 00:19:04,230
you can see a nicely the first two

00:19:01,320 --> 00:19:07,260
commands based on the chrome dev tools

00:19:04,230 --> 00:19:09,300
protocol while the second is ripped up

00:19:07,260 --> 00:19:16,620
our protocol and they can nicely work

00:19:09,300 --> 00:19:19,130
together so let me get up my console one

00:19:16,620 --> 00:19:19,130
second

00:19:21,910 --> 00:19:32,180
that's why we do it so now I'm having

00:19:29,360 --> 00:19:36,740
open my terminal I go into the example

00:19:32,180 --> 00:19:41,710
folder and for dev tools and I'm gonna

00:19:36,740 --> 00:19:44,900
run the service with that specific

00:19:41,710 --> 00:19:47,090
Network test so what's happening now is

00:19:44,900 --> 00:19:49,700
that there's a chrome driver running

00:19:47,090 --> 00:19:53,420
opening Chrome for me going on the

00:19:49,700 --> 00:19:55,130
chrome comm page and it just opens and

00:19:53,420 --> 00:19:57,230
closes immediately but you can see here

00:19:55,130 --> 00:19:59,060
in the console alerts you see all the

00:19:57,230 --> 00:20:02,030
network commands that have been

00:19:59,060 --> 00:20:04,880
intercepted and you know you can assume

00:20:02,030 --> 00:20:07,060
that you know have tests that check that

00:20:04,880 --> 00:20:10,160
if certain wells have been called if

00:20:07,060 --> 00:20:12,770
certain we trust has been made and a

00:20:10,160 --> 00:20:16,610
bunch of things more and that you can do

00:20:12,770 --> 00:20:20,690
with the contacts with for cockman going

00:20:16,610 --> 00:20:25,280
back to slides there of course more

00:20:20,690 --> 00:20:27,710
features we have a bunch of nice

00:20:25,280 --> 00:20:29,690
selector strategy expections

00:20:27,710 --> 00:20:33,620
that make it really simple to fetch

00:20:29,690 --> 00:20:37,490
elements you can of course use with the

00:20:33,620 --> 00:20:40,600
simple dollar sign command fetch CSS

00:20:37,490 --> 00:20:43,900
selectors you can by starting with two

00:20:40,600 --> 00:20:46,340
slashes you can start use next pass and

00:20:43,900 --> 00:20:48,560
we have ways if you start with an equal

00:20:46,340 --> 00:20:51,140
sign we look for a link with that

00:20:48,560 --> 00:20:54,110
specific text but you can also just look

00:20:51,140 --> 00:20:56,270
for any HTML element that has the

00:20:54,110 --> 00:20:58,490
specific test text or contains a

00:20:56,270 --> 00:21:00,890
specific text so that really makes it

00:20:58,490 --> 00:21:04,340
simple to you know find the element that

00:21:00,890 --> 00:21:06,320
you want to interact with we even go a

00:21:04,340 --> 00:21:09,500
little bit more deeper where we want to

00:21:06,320 --> 00:21:12,590
support native frameworks and as many of

00:21:09,500 --> 00:21:14,290
people you know use like we act where we

00:21:12,590 --> 00:21:17,000
currently have a react dollar sign

00:21:14,290 --> 00:21:20,240
command that allows you to fetch

00:21:17,000 --> 00:21:23,270
elements from an application based on

00:21:20,240 --> 00:21:25,070
their component name and their stage and

00:21:23,270 --> 00:21:29,870
their properties which is really useful

00:21:25,070 --> 00:21:32,090
and we've also enough selector

00:21:29,870 --> 00:21:33,350
strategies for mobile where you can you

00:21:32,090 --> 00:21:36,590
know select specific

00:21:33,350 --> 00:21:38,929
ius selectors or Android selectors using

00:21:36,590 --> 00:21:41,299
the UI Automator framework and as well

00:21:38,929 --> 00:21:45,340
as allowing you to simply access the

00:21:41,299 --> 00:21:45,340
accessibility ID with a tilde sign

00:21:45,669 --> 00:21:48,590
another nice feature is the custom

00:21:48,049 --> 00:21:51,620
commands

00:21:48,590 --> 00:21:53,870
webdiver is extendable you can create as

00:21:51,620 --> 00:21:57,140
much as new command as much new commands

00:21:53,870 --> 00:21:58,640
as you need so this is good examples

00:21:57,140 --> 00:22:01,910
actually from a wheeled project that I

00:21:58,640 --> 00:22:04,850
had it's also where I wanted to you know

00:22:01,910 --> 00:22:06,950
use or interact with the West interface

00:22:04,850 --> 00:22:09,860
without having to do anything with the

00:22:06,950 --> 00:22:13,250
browser so I created custom command that

00:22:09,860 --> 00:22:15,740
would do a post for me to delete a

00:22:13,250 --> 00:22:17,780
specific user and in my test I could

00:22:15,740 --> 00:22:20,570
just call this command in a synchronous

00:22:17,780 --> 00:22:23,000
fashion which makes it really which made

00:22:20,570 --> 00:22:26,270
really simple for me to stop users and

00:22:23,000 --> 00:22:29,140
you know just test there's a specific

00:22:26,270 --> 00:22:29,140
thing that I want you

00:22:30,290 --> 00:22:36,020
has a concept of multi remotes so

00:22:32,920 --> 00:22:39,200
usually you have one single browser in

00:22:36,020 --> 00:22:40,490
one test file where the browser just

00:22:39,200 --> 00:22:42,080
follows new instructions that are in

00:22:40,490 --> 00:22:44,180
your test file and you get the results

00:22:42,080 --> 00:22:47,450
but there are scenarios where you need

00:22:44,180 --> 00:22:50,210
multiple user agents to test a certain

00:22:47,450 --> 00:22:53,000
scenario if you have applications that

00:22:50,210 --> 00:22:55,000
have detected a chat application or if

00:22:53,000 --> 00:22:58,310
you want to test the web RTC a

00:22:55,000 --> 00:23:00,530
application where you need to parties to

00:22:58,310 --> 00:23:03,350
actually work with the app you can use

00:23:00,530 --> 00:23:05,720
the multi remote test and that allows

00:23:03,350 --> 00:23:09,460
you to control multiple environments at

00:23:05,720 --> 00:23:09,460
the same time in one single test

00:23:10,000 --> 00:23:16,280
before you go deep here let's go let's

00:23:13,300 --> 00:23:18,290
let's do a little theory about let's do

00:23:16,280 --> 00:23:19,610
a little bit about H object model you

00:23:18,290 --> 00:23:22,940
probably already have heard about it and

00:23:19,610 --> 00:23:25,310
it's a really popular framework that

00:23:22,940 --> 00:23:29,750
helps you through white scalable test

00:23:25,310 --> 00:23:31,580
shoes makeup tape modulus is itself a

00:23:29,750 --> 00:23:33,800
design pattern that became really

00:23:31,580 --> 00:23:36,020
popular it keeps your testing float

00:23:33,800 --> 00:23:38,150
clean and easy to maintain as you have

00:23:36,020 --> 00:23:40,670
stretched all the information about the

00:23:38,150 --> 00:23:44,230
specific tests away from the test itself

00:23:40,670 --> 00:23:47,690
and that makes it really easy to extend

00:23:44,230 --> 00:23:51,710
functionality to specific page and keep

00:23:47,690 --> 00:23:54,830
the test clean and reusable so in an

00:23:51,710 --> 00:23:57,230
ideal world where you let's say we

00:23:54,830 --> 00:24:00,620
design just we design the complete page

00:23:57,230 --> 00:24:03,620
all you need to do is to change these

00:24:00,620 --> 00:24:06,380
selectors and some methods of the page

00:24:03,620 --> 00:24:11,030
object model and your tests can stay the

00:24:06,380 --> 00:24:14,150
same this really helps you to scale out

00:24:11,030 --> 00:24:18,790
your test in your test files and you

00:24:14,150 --> 00:24:18,790
know make your test itself less brittle

00:24:18,850 --> 00:24:22,730
here's an example of how you can use the

00:24:21,860 --> 00:24:26,090
page of G :

00:24:22,730 --> 00:24:28,670
Rep darrell using javascript gator

00:24:26,090 --> 00:24:31,520
functionalities well which would then

00:24:28,670 --> 00:24:34,250
return an element and functions to do

00:24:31,520 --> 00:24:37,570
certain interactions of the page this

00:24:34,250 --> 00:24:41,330
results in a really clean test where you

00:24:37,570 --> 00:24:43,430
essentially just interact with the page

00:24:41,330 --> 00:24:47,080
object model instead of selectors or

00:24:43,430 --> 00:24:47,080
specific elements in itself

00:24:48,400 --> 00:24:53,600
right it did was worth more worth than

00:24:51,080 --> 00:24:54,890
top thousand words so let's jump into a

00:24:53,600 --> 00:24:57,050
couple of dinner demos that I've

00:24:54,890 --> 00:24:59,750
prepared that show what rep they're very

00:24:57,050 --> 00:25:04,340
was capable of and that's not one to

00:24:59,750 --> 00:25:07,070
remote going back in 20 I have an

00:25:04,340 --> 00:25:09,980
example for informal to emo where I want

00:25:07,070 --> 00:25:13,520
to test a chat application that is

00:25:09,980 --> 00:25:16,640
demonstrating socket IO and in this test

00:25:13,520 --> 00:25:20,210
and where I which I run with two chrome

00:25:16,640 --> 00:25:24,020
browsers um I get the I have the ability

00:25:20,210 --> 00:25:27,410
to call a certain command like opening

00:25:24,020 --> 00:25:30,740
the website with on browse browser at

00:25:27,410 --> 00:25:32,660
the same time or just run a command on

00:25:30,740 --> 00:25:37,010
one browser at a time as you can see

00:25:32,660 --> 00:25:41,000
here and this allows me to you know lock

00:25:37,010 --> 00:25:44,360
in both of the of the parties and enter

00:25:41,000 --> 00:25:45,950
the username and allow one browser to

00:25:44,360 --> 00:25:48,560
interact with the message of the other

00:25:45,950 --> 00:25:50,990
browsers so you'll see that we logging

00:25:48,560 --> 00:25:53,840
into the socket IO chat and someone will

00:25:50,990 --> 00:25:55,880
say hey my name is Hector and the other

00:25:53,840 --> 00:25:59,390
message tries to find out who that

00:25:55,880 --> 00:26:02,420
person is and we'll say hello or the

00:25:59,390 --> 00:26:11,120
person how are you today so if you want

00:26:02,420 --> 00:26:14,840
this then Tessa said we will see that

00:26:11,120 --> 00:26:17,390
their truth browser spinning I once was

00:26:14,840 --> 00:26:19,670
a ones for the be say say one what's up

00:26:17,390 --> 00:26:23,480
my name's ed K and it was B say hello

00:26:19,670 --> 00:26:25,520
right there how are you today another

00:26:23,480 --> 00:26:29,420
example as I mentioned is the web RTC

00:26:25,520 --> 00:26:32,810
example which I have here where I send

00:26:29,420 --> 00:26:36,080
in some Chrome options to fake the media

00:26:32,810 --> 00:26:39,730
stream and then I just open and web RTC

00:26:36,080 --> 00:26:42,920
channel and see how that looks

00:26:39,730 --> 00:26:42,920
[Music]

00:26:43,149 --> 00:26:50,320
we're going to browser spit up my test

00:26:46,509 --> 00:26:52,950
and they join a random channel

00:26:50,320 --> 00:26:52,950
and

00:26:53,650 --> 00:27:02,890
that's about it going back to the slides

00:27:01,240 --> 00:27:06,400
the next game was performance testing

00:27:02,890 --> 00:27:08,710
last year really worked into how we can

00:27:06,400 --> 00:27:11,850
integrate performance testing that you

00:27:08,710 --> 00:27:14,470
have for instance with lighthouse or

00:27:11,850 --> 00:27:18,360
webpagetest.org into an actual

00:27:14,470 --> 00:27:21,340
automation script and for that we have

00:27:18,360 --> 00:27:23,289
we have built a service the death toll

00:27:21,340 --> 00:27:25,870
servers as I mentioned before which has

00:27:23,289 --> 00:27:27,730
these capabilities now so you can call a

00:27:25,870 --> 00:27:29,710
command called enable page at

00:27:27,730 --> 00:27:32,740
performance audits and it will

00:27:29,710 --> 00:27:34,990
automatically flooded the city or end

00:27:32,740 --> 00:27:37,090
the network for you to kind of emulate

00:27:34,990 --> 00:27:40,929
the mobile device and with that you can

00:27:37,090 --> 00:27:42,730
create have you can receive performance

00:27:40,929 --> 00:27:45,100
metrics lies like first meaningful paint

00:27:42,730 --> 00:27:48,250
first interactive of the speed MX or

00:27:45,100 --> 00:27:50,140
test the overall performance for the

00:27:48,250 --> 00:27:52,120
depth of service here uses lighthouse

00:27:50,140 --> 00:27:56,429
under the hood to get you all these

00:27:52,120 --> 00:28:00,130
metrics so let's test out and actually

00:27:56,429 --> 00:28:02,049
we should open our test page it needs to

00:28:00,130 --> 00:28:07,809
be booted first oh it's already there

00:28:02,049 --> 00:28:10,600
perfect so we cannot just go and say so

00:28:07,809 --> 00:28:14,740
Deftones pull it back and run the check

00:28:10,600 --> 00:28:16,809
that we have with metrics so it's

00:28:14,740 --> 00:28:21,340
happens here now is that it opens a

00:28:16,809 --> 00:28:23,620
browser with mobile capabilities so the

00:28:21,340 --> 00:28:25,960
page load is much slower because it is

00:28:23,620 --> 00:28:29,110
it's one it's running on a regular 3G

00:28:25,960 --> 00:28:31,539
connection and now it takes it does a

00:28:29,110 --> 00:28:33,760
performance it captures the performance

00:28:31,539 --> 00:28:36,090
of that page and allows me to assert

00:28:33,760 --> 00:28:42,010
against it so as you can see here

00:28:36,090 --> 00:28:44,200
without me doing anything the first

00:28:42,010 --> 00:28:46,029
thing we for Payne was at 3.7 seconds

00:28:44,200 --> 00:28:48,730
and I expected it to be less than 3

00:28:46,029 --> 00:28:51,130
seconds this time was first interactive

00:28:48,730 --> 00:28:55,179
and this made my overall performance

00:28:51,130 --> 00:28:57,669
core to 78% which I expected to be at

00:28:55,179 --> 00:29:00,130
least above my attitude and so this

00:28:57,669 --> 00:29:02,980
allows you to integrate performance

00:29:00,130 --> 00:29:05,970
lighthouse performance course into your

00:29:02,980 --> 00:29:05,970
automation test

00:29:06,490 --> 00:29:08,550
you

00:29:09,830 --> 00:29:17,210
dissent next step is visual question

00:29:17,330 --> 00:29:23,700
therefore at this demo as I mentioned

00:29:20,490 --> 00:29:25,889
before you whatever provides an aptitude

00:29:23,700 --> 00:29:31,580
service that you can just integrate by

00:29:25,889 --> 00:29:35,309
installing the wao app literal service

00:29:31,580 --> 00:29:38,519
NPM package and then all you need to do

00:29:35,309 --> 00:29:41,610
is in your configuration which I feel

00:29:38,519 --> 00:29:43,799
say that I have an aptitude service

00:29:41,610 --> 00:29:47,129
installed and here's my aptitudes key

00:29:43,799 --> 00:29:49,379
and it knows everything what it needs to

00:29:47,129 --> 00:29:50,820
know about creating these screenshots

00:29:49,379 --> 00:29:53,850
and checking to it

00:29:50,820 --> 00:29:56,429
so the service creates a new command

00:29:53,850 --> 00:29:59,490
called take snapshot and it will take a

00:29:56,429 --> 00:30:05,119
snapshot of these two pages so for one

00:29:59,490 --> 00:30:05,119
this NPM one test local

00:30:05,800 --> 00:30:14,750
it will run the visual test and the

00:30:10,970 --> 00:30:19,250
service automatically formats the window

00:30:14,750 --> 00:30:22,430
size and then opens Google and takes the

00:30:19,250 --> 00:30:24,620
snapshot as well as it makes it domes

00:30:22,430 --> 00:30:28,760
nature

00:30:24,620 --> 00:30:32,570
and after entering it it takes another

00:30:28,760 --> 00:30:37,070
screenshot on the second page to see if

00:30:32,570 --> 00:30:39,559
the result afterwards is the same and I

00:30:37,070 --> 00:30:43,600
already see differences because I did

00:30:39,559 --> 00:30:43,600
not really clean up the baseline but

00:30:43,780 --> 00:30:49,280
what you can see is that you know

00:30:47,360 --> 00:30:52,640
without having to deal with the

00:30:49,280 --> 00:30:56,180
applitools api or anything I can you

00:30:52,640 --> 00:30:58,910
know push up my chest that I've just run

00:30:56,180 --> 00:31:04,570
qu applitools automatically without

00:30:58,910 --> 00:31:08,000
doing anything which is really great and

00:31:04,570 --> 00:31:11,900
last but not least is the watch mode and

00:31:08,000 --> 00:31:15,559
weather allows you to watch files as you

00:31:11,900 --> 00:31:17,720
work on them so what you can see here is

00:31:15,559 --> 00:31:19,850
what you can think of is like you go to

00:31:17,720 --> 00:31:22,250
the office in the morning and you yeah

00:31:19,850 --> 00:31:23,870
your first pass of the day is to start

00:31:22,250 --> 00:31:26,480
working on a trend test for your project

00:31:23,870 --> 00:31:28,850
and what you can do you have a test

00:31:26,480 --> 00:31:30,980
project with a variety of what with

00:31:28,850 --> 00:31:34,429
tests and so what we can do in your

00:31:30,980 --> 00:31:37,340
project is just say npm run npm run

00:31:34,429 --> 00:31:42,559
watch which once the run command with a

00:31:37,340 --> 00:31:44,780
- - watch parameter and this will create

00:31:42,559 --> 00:31:46,460
all the tests in this case it's these

00:31:44,780 --> 00:31:48,440
are headless tests in the sauce cloud

00:31:46,460 --> 00:31:51,050
and as i want to have these tests being

00:31:48,440 --> 00:31:54,050
really fast and return the results

00:31:51,050 --> 00:31:56,800
quickly and I have these running with

00:31:54,050 --> 00:32:01,850
high concurrency there and you can see

00:31:56,800 --> 00:32:04,220
that it fairly runs cry quickly and the

00:32:01,850 --> 00:32:07,040
nice part about the watch command is is

00:32:04,220 --> 00:32:08,870
that it doesn't close down the session

00:32:07,040 --> 00:32:11,929
it will keep the session open so

00:32:08,870 --> 00:32:17,370
whenever you do is change like a console

00:32:11,929 --> 00:32:21,030
a lock and you press save it

00:32:17,370 --> 00:32:22,770
should we run the tests essentially now

00:32:21,030 --> 00:32:29,130
let me see this test is actually not

00:32:22,770 --> 00:32:33,450
running if I do it here there we go

00:32:29,130 --> 00:32:35,400
it immediately runs the tests and gives

00:32:33,450 --> 00:32:38,000
you results in this style in in this

00:32:35,400 --> 00:32:41,490
case a failure because the test does fit

00:32:38,000 --> 00:32:43,560
you can also you know make a change in

00:32:41,490 --> 00:32:46,380
your overall application and then it

00:32:43,560 --> 00:32:50,340
automatically runs all the test files

00:32:46,380 --> 00:32:52,410
for you so you can see here without

00:32:50,340 --> 00:32:54,150
having to be spin the checkbox up and it

00:32:52,410 --> 00:32:58,370
immediately gives you feedback about all

00:32:54,150 --> 00:32:58,370
your tests in the second

00:32:58,630 --> 00:33:06,110
and that's almost voted with the demos

00:33:03,139 --> 00:33:08,179
and seismic recently heard we have

00:33:06,110 --> 00:33:11,539
released a new major version which is

00:33:08,179 --> 00:33:14,179
version six which is not that difficult

00:33:11,539 --> 00:33:16,880
to upgrade compared to version 5 if you

00:33:14,179 --> 00:33:19,669
had to go through that and the new

00:33:16,880 --> 00:33:22,070
version now comes with the contactors

00:33:19,669 --> 00:33:23,600
protocol and ballot we see that the

00:33:22,070 --> 00:33:25,490
puppeteer project is getting stronger

00:33:23,600 --> 00:33:27,529
and stronger and supports more and more

00:33:25,490 --> 00:33:29,720
browsers and so with that we want to

00:33:27,529 --> 00:33:31,070
leverage on that and with the version 6

00:33:29,720 --> 00:33:33,500
if you install web Carrel

00:33:31,070 --> 00:33:36,139
you don't need to have a browser driver

00:33:33,500 --> 00:33:39,080
anymore to start testing on Chrome or

00:33:36,139 --> 00:33:42,019
Firefox nightly by the way we also

00:33:39,080 --> 00:33:44,149
embedded a new session library into the

00:33:42,019 --> 00:33:44,899
test for net project call and expect -

00:33:44,149 --> 00:33:47,299
retrouvaille

00:33:44,899 --> 00:33:49,309
which gives you all the nice insertion

00:33:47,299 --> 00:33:54,559
measures that we have with frame would

00:33:49,309 --> 00:33:56,779
suggest in your hand for foreigner and

00:33:54,559 --> 00:33:59,090
testing purposes where you have liked it

00:33:56,779 --> 00:34:02,149
to be displayed from that assertion to

00:33:59,090 --> 00:34:05,169
make sure that the element is despite or

00:34:02,149 --> 00:34:08,179
not and the assertion itself also really

00:34:05,169 --> 00:34:10,819
smart because they have specific weights

00:34:08,179 --> 00:34:13,310
and automated specific automatic ways

00:34:10,819 --> 00:34:16,849
that help you reduce the flakiness in

00:34:13,310 --> 00:34:19,909
your tests we improve the performance of

00:34:16,849 --> 00:34:22,429
the core packages in general and we

00:34:19,909 --> 00:34:24,589
would use the we Christie speed how

00:34:22,429 --> 00:34:26,839
elements can be fetched we also reduce

00:34:24,589 --> 00:34:29,540
the bundle size and we want to prepare

00:34:26,839 --> 00:34:33,440
to allow web cover to run in the browser

00:34:29,540 --> 00:34:35,690
and the most important part about vs6

00:34:33,440 --> 00:34:37,909
releases that we dropped support for no

00:34:35,690 --> 00:34:41,629
first night and we announced that we

00:34:37,909 --> 00:34:43,940
want to keep version 5 long terms long

00:34:41,629 --> 00:34:46,040
term support version because we know

00:34:43,940 --> 00:34:47,780
that a lot of people had to struggle go

00:34:46,040 --> 00:34:52,510
through the upgrade and don't want to

00:34:47,780 --> 00:34:52,510
update it again right away

00:34:53,139 --> 00:34:58,970
what comes next so we have a big world

00:34:56,179 --> 00:35:00,740
map ahead of us and we're looking for

00:34:58,970 --> 00:35:02,930
anyone who is interested in helping us

00:35:00,740 --> 00:35:05,869
out here there's a bunch of things that

00:35:02,930 --> 00:35:08,780
you can harm us out and support the

00:35:05,869 --> 00:35:10,589
project with we are planning to build

00:35:08,780 --> 00:35:13,650
the fiddle applications

00:35:10,589 --> 00:35:16,650
where you can share your test snippets

00:35:13,650 --> 00:35:19,769
with other people and allow their to run

00:35:16,650 --> 00:35:21,630
in that federal education we could be

00:35:19,769 --> 00:35:24,650
working on a better support for net from

00:35:21,630 --> 00:35:28,469
stabbing and mocking and you find the

00:35:24,650 --> 00:35:31,319
proposals for these features on github

00:35:28,469 --> 00:35:32,700
and they are already really exciting one

00:35:31,319 --> 00:35:35,910
of the great things that we want to do

00:35:32,700 --> 00:35:38,219
is we want to allow to make snapshots of

00:35:35,910 --> 00:35:40,469
the network requests so you can easily

00:35:38,219 --> 00:35:43,079
check if the white networks request has

00:35:40,469 --> 00:35:45,210
been made or not then we want to

00:35:43,079 --> 00:35:46,710
simplify the bootstrap mechanism allow

00:35:45,210 --> 00:35:50,400
you to not only configure your

00:35:46,710 --> 00:35:52,319
configuration file but also create some

00:35:50,400 --> 00:35:54,539
sample test files for you to get started

00:35:52,319 --> 00:35:58,759
and of course we're always looking for

00:35:54,539 --> 00:36:01,499
better documentation and you know

00:35:58,759 --> 00:36:04,140
examples for everyone to easier get

00:36:01,499 --> 00:36:06,779
started with reptile and for you to the

00:36:04,140 --> 00:36:09,239
best way to get involved is to just join

00:36:06,779 --> 00:36:11,670
the github project page and look through

00:36:09,239 --> 00:36:14,930
the issue list and look for issues that

00:36:11,670 --> 00:36:17,849
are labeled with a good first pick or

00:36:14,930 --> 00:36:19,589
first time as only these are really made

00:36:17,849 --> 00:36:21,869
for people that's once you start working

00:36:19,589 --> 00:36:24,059
on whatever and they're really well

00:36:21,869 --> 00:36:26,729
explained and don't hesitate if you have

00:36:24,059 --> 00:36:28,559
questions around solving that issue we

00:36:26,729 --> 00:36:34,289
as collaborators would really like to

00:36:28,559 --> 00:36:36,479
help you help you help us out with that

00:36:34,289 --> 00:36:38,190
said this is the end of the first part

00:36:36,479 --> 00:36:41,369
of the workshop with the presentation

00:36:38,190 --> 00:36:43,499
and if you have any questions on the

00:36:41,369 --> 00:36:48,450
presentation itself and now's the time

00:36:43,499 --> 00:36:50,869
to ask these so I can go back into the

00:36:48,450 --> 00:36:53,670
slides or can show you specific examples

00:36:50,869 --> 00:36:58,229
and if there are no questions we would

00:36:53,670 --> 00:37:04,259
go forward to the actual workshop on the

00:36:58,229 --> 00:37:07,890
kita page so does anyone have questions

00:37:04,259 --> 00:37:09,660
on the presentation or already on some

00:37:07,890 --> 00:37:14,089
of the things he was were there that

00:37:09,660 --> 00:37:14,089
we're in the hands-on material

00:37:15,810 --> 00:37:17,870
you

00:37:20,320 --> 00:37:34,120
I see is so far no questions so if you

00:37:29,770 --> 00:37:36,220
have questions feel free to just just

00:37:34,120 --> 00:37:37,960
write them down in the chat and we have

00:37:36,220 --> 00:37:40,600
a bunch of people watching the chat and

00:37:37,960 --> 00:37:42,310
they can help you out and I can you know

00:37:40,600 --> 00:37:45,850
show some specific things that they are

00:37:42,310 --> 00:37:49,660
unclear and so for the second part of

00:37:45,850 --> 00:37:51,910
this workshop let's go into the events

00:37:49,660 --> 00:37:54,850
on material we have a bunch of chapters

00:37:51,910 --> 00:37:57,010
that kind of build on top of you up each

00:37:54,850 --> 00:37:58,630
other where you start setting up an

00:37:57,010 --> 00:38:01,270
environment then build your first

00:37:58,630 --> 00:38:03,550
automation script instead low mode then

00:38:01,270 --> 00:38:05,820
move on to the test runner include your

00:38:03,550 --> 00:38:08,800
own reporters and services and so on

00:38:05,820 --> 00:38:11,700
until some you know more expand stuff

00:38:08,800 --> 00:38:16,660
like using the Deaf routes package or

00:38:11,700 --> 00:38:20,650
doing visual regression testing so let's

00:38:16,660 --> 00:38:24,700
start with the first chapter subjective

00:38:20,650 --> 00:38:30,250
here is to get an environment running

00:38:24,700 --> 00:38:32,110
where you can use butter oil so for that

00:38:30,250 --> 00:38:35,650
of course you need no chairs installed

00:38:32,110 --> 00:38:39,610
and I would recommend to create a new

00:38:35,650 --> 00:38:51,760
repository that we can do let me make

00:38:39,610 --> 00:38:55,210
this bigger and move this over all right

00:38:51,760 --> 00:39:06,550
so you could let's just create a

00:38:55,210 --> 00:39:09,360
workshop folder so it's not existing so

00:39:06,550 --> 00:39:09,360
I created that

00:39:18,930 --> 00:39:26,440
so what do you need to do with the first

00:39:21,819 --> 00:39:28,690
chapter is to get a driver and from one

00:39:26,440 --> 00:39:31,150
of the document from the Chrome web page

00:39:28,690 --> 00:39:35,190
from the edge driver page where whatever

00:39:31,150 --> 00:39:39,970
browser you prefer stop the driver and

00:39:35,190 --> 00:39:43,630
run a reputable script so let me you

00:39:39,970 --> 00:39:45,279
know work through this and so we need

00:39:43,630 --> 00:39:48,400
the driver essentially in the first

00:39:45,279 --> 00:39:50,499
place because webdriver pretty much just

00:39:48,400 --> 00:39:53,890
defines certain mentor means that you

00:39:50,499 --> 00:39:55,029
can that you can call or certain

00:39:53,890 --> 00:39:57,910
commands that you can call with your

00:39:55,029 --> 00:40:00,039
framework and it leaves it up to the

00:39:57,910 --> 00:40:03,249
driver to actually execute that action

00:40:00,039 --> 00:40:04,779
in the browser and this driver which is

00:40:03,249 --> 00:40:08,079
you know developed by the browser

00:40:04,779 --> 00:40:09,730
vendors they the browser vendors itself

00:40:08,079 --> 00:40:16,059
they know exactly how to make the

00:40:09,730 --> 00:40:17,759
certain action happen so this way I we

00:40:16,059 --> 00:40:22,660
go to the download page of the

00:40:17,759 --> 00:40:24,190
chromedriver project and we load the

00:40:22,660 --> 00:40:26,759
latest Chrome browser version for

00:40:24,190 --> 00:40:31,029
whatever chrome you have installed and

00:40:26,759 --> 00:40:33,609
you just unpack it unzip it and you know

00:40:31,029 --> 00:40:36,609
you move it into your path if you have

00:40:33,609 --> 00:40:38,589
nag make it globally available so it's

00:40:36,609 --> 00:40:42,880
easy for you to run it from every

00:40:38,589 --> 00:40:45,730
browser for every and by dirty way so I

00:40:42,880 --> 00:40:51,400
have a chrome driver command available

00:40:45,730 --> 00:40:53,380
for me by just extracting Chrome Geiger

00:40:51,400 --> 00:40:57,549
and moving them in one of the

00:40:53,380 --> 00:41:01,150
directories where I keep all my custom

00:40:57,549 --> 00:41:03,759
binary files so I fear by new files for

00:41:01,150 --> 00:41:07,029
home for tech or driver for chiller and

00:41:03,759 --> 00:41:11,789
for Chrome browser so I've come to our

00:41:07,029 --> 00:41:16,920
version a six and so all I need to do is

00:41:11,789 --> 00:41:20,009
just i programmer with the cost support

00:41:16,920 --> 00:41:24,730
let's say standard on four four four

00:41:20,009 --> 00:41:28,329
which is not existing there we go oh

00:41:24,730 --> 00:41:31,710
this part is already used by something

00:41:28,329 --> 00:41:34,920
else which I will clear up

00:41:31,710 --> 00:41:34,920
there we go

00:41:35,910 --> 00:41:43,690
so now webdriver who's running a chrome

00:41:39,730 --> 00:41:50,380
gyrus running on port 4 4 4 4 and I

00:41:43,690 --> 00:41:54,359
create now a second console that I want

00:41:50,380 --> 00:41:54,359
to use to write my rep timer switch

00:41:59,109 --> 00:42:05,819
so I'm going to work my workshop again

00:42:01,569 --> 00:42:05,819
and I install webcam I own

00:42:11,490 --> 00:42:15,380
which should not take that much time

00:42:19,500 --> 00:42:23,340
and again always if you have questions

00:42:21,090 --> 00:42:26,040
through the workshop in other chapters

00:42:23,340 --> 00:42:29,280
so feel free to just put them in the

00:42:26,040 --> 00:42:31,380
chat and we can I can help you out so

00:42:29,280 --> 00:42:34,080
here we have a workshop we have in Sabra

00:42:31,380 --> 00:42:39,990
parallel let's write a simple script

00:42:34,080 --> 00:42:43,830
actually use my idea for so having new

00:42:39,990 --> 00:42:49,280
file called index or test objects where

00:42:43,830 --> 00:42:55,080
I import retroviral I say remote

00:42:49,280 --> 00:42:57,090
beginning the remote property you can

00:42:55,080 --> 00:42:59,220
create the same session with multi

00:42:57,090 --> 00:43:03,150
remote by just using the motor remote

00:42:59,220 --> 00:43:06,240
properties or function so then I use I

00:43:03,150 --> 00:43:09,359
write an asynchronous function because I

00:43:06,240 --> 00:43:12,000
want to itself invoking a some

00:43:09,359 --> 00:43:15,950
construction because I want to use a

00:43:12,000 --> 00:43:18,720
cigarette for creating all the

00:43:15,950 --> 00:43:23,420
torrenting all the commands so here I

00:43:18,720 --> 00:43:29,250
say my browser waits a remote session

00:43:23,420 --> 00:43:32,940
that's wrong waits the remote session

00:43:29,250 --> 00:43:35,970
and as you can see here we have type

00:43:32,940 --> 00:43:38,040
support and what we have general typing

00:43:35,970 --> 00:43:40,410
support if you use the S code and

00:43:38,040 --> 00:43:42,810
similarities but whatever also called

00:43:40,410 --> 00:43:46,680
some types of support definitions so we

00:43:42,810 --> 00:43:50,520
can use typescript if you want you so my

00:43:46,680 --> 00:43:52,160
capabilities are since i have chrome

00:43:50,520 --> 00:43:55,320
ever running it should be the chrome

00:43:52,160 --> 00:43:57,270
struct inside chrome and that's all i

00:43:55,320 --> 00:43:59,730
need to create a remote session on my

00:43:57,270 --> 00:44:03,150
local machine then i can go ahead and

00:43:59,730 --> 00:44:04,980
say browse i pluck you out and i always

00:44:03,150 --> 00:44:07,970
like to use the jason the fourth page

00:44:04,980 --> 00:44:14,550
it's like anything and then I can say

00:44:07,970 --> 00:44:21,530
lock me the title of that page and at

00:44:14,550 --> 00:44:21,530
the end we turn with each session

00:44:23,300 --> 00:44:29,130
there you go

00:44:25,310 --> 00:44:32,430
that should do the trick as you can see

00:44:29,130 --> 00:44:34,560
here this is a self invoking basic

00:44:32,430 --> 00:44:37,530
curves function so I initiated the

00:44:34,560 --> 00:44:39,600
function immediately call it and it's an

00:44:37,530 --> 00:44:42,870
asynchronous context so I can use the

00:44:39,600 --> 00:44:49,700
weight in it and everything goes right I

00:44:42,870 --> 00:44:49,700
can call the test J's file and it now

00:44:50,529 --> 00:44:58,749
uses Chrome bagger to open a store

00:44:55,160 --> 00:44:58,749
really quickly and close it again

00:44:59,510 --> 00:45:14,240
there we go yeah and just to show you

00:45:11,200 --> 00:45:19,090
one wing where I think I've still a

00:45:14,240 --> 00:45:21,890
chromedriver process your love or name

00:45:19,090 --> 00:45:24,530
so let me find that one No

00:45:21,890 --> 00:45:26,420
so I have closed all my Chrome browser

00:45:24,530 --> 00:45:28,940
sessions so we have no driver running

00:45:26,420 --> 00:45:33,290
now and I can still run recover without

00:45:28,940 --> 00:45:35,330
that driver because it now uses when up

00:45:33,290 --> 00:45:38,330
here under the load and the destitute

00:45:35,330 --> 00:45:42,290
package to run the same commands using

00:45:38,330 --> 00:45:45,650
the chrome dev tools protocol so you see

00:45:42,290 --> 00:45:48,109
that Chrome launches with something for

00:45:45,650 --> 00:45:50,359
flags and then it detects the chrome dev

00:45:48,109 --> 00:45:52,220
tools for it and uses puppeteer moving

00:45:50,359 --> 00:45:56,500
forward to just execute the same

00:45:52,220 --> 00:45:59,119
commands the same would also work with

00:45:56,500 --> 00:46:01,420
Firefox lightning and soon with the

00:45:59,119 --> 00:46:04,160
stable version of Firefox which is six I

00:46:01,420 --> 00:46:10,570
okay this is all I think we need to do

00:46:04,160 --> 00:46:10,570
for chapter 1 let's go to chapter 2

00:46:12,110 --> 00:46:15,680
this chapter is about writing an

00:46:13,910 --> 00:46:17,990
automation script that uses an actual

00:46:15,680 --> 00:46:24,800
application in this case the view to do

00:46:17,990 --> 00:46:28,450
MVC ad and what we want to do is to run

00:46:24,800 --> 00:46:28,450
from there as we've done before and

00:46:33,500 --> 00:46:42,200
do I think create three items yeah enter

00:46:39,650 --> 00:46:43,760
three items into the to do list market

00:46:42,200 --> 00:46:46,580
second item is complete and print out

00:46:43,760 --> 00:46:49,480
the amount of items left and so let's

00:46:46,580 --> 00:46:53,090
work on this we can reuse our existing

00:46:49,480 --> 00:47:00,220
or existing script here so what we do is

00:46:53,090 --> 00:47:03,460
we want to go to to do NBC app then

00:47:00,220 --> 00:47:05,470
let's do this

00:47:03,460 --> 00:47:10,200
there we go they're already three in

00:47:05,470 --> 00:47:14,110
there let's clear the mount clear

00:47:10,200 --> 00:47:16,510
actually what are the items I like to

00:47:14,110 --> 00:47:19,390
use the dev tools application to just

00:47:16,510 --> 00:47:22,480
find the items for me so in this case

00:47:19,390 --> 00:47:25,120
looks like we have a class to do this

00:47:22,480 --> 00:47:30,330
and it contains various of traduce so

00:47:25,120 --> 00:47:34,480
let's catch these khans items equals

00:47:30,330 --> 00:47:38,290
weight browser $1 dollar sign which

00:47:34,480 --> 00:47:40,180
fetches multiple elements the one dollar

00:47:38,290 --> 00:47:42,160
sign fetches one element the first one

00:47:40,180 --> 00:47:45,070
at times the dollar dollar sign fetches

00:47:42,160 --> 00:47:47,140
multiple elements so from the to-do list

00:47:45,070 --> 00:47:49,810
we want to find all the traduce that I'm

00:47:47,140 --> 00:47:54,430
there so this should give me an error

00:47:49,810 --> 00:47:56,500
array of three elements and one of the

00:47:54,430 --> 00:48:01,200
tasks was to click the second element so

00:47:56,500 --> 00:48:04,870
what we could do is we say weight items

00:48:01,200 --> 00:48:08,260
the first element so it's a second to do

00:48:04,870 --> 00:48:11,590
and then we want to click on it as you

00:48:08,260 --> 00:48:14,560
can see here items number one or the

00:48:11,590 --> 00:48:17,220
first entry of the items away contains

00:48:14,560 --> 00:48:20,170
an element object which in itself has

00:48:17,220 --> 00:48:22,390
things there commands registered that

00:48:20,170 --> 00:48:26,980
you can use to click to get the text or

00:48:22,390 --> 00:48:28,870
various other things so we have click on

00:48:26,980 --> 00:48:32,800
it and then we want to see how many

00:48:28,870 --> 00:48:38,050
items are left this is hidden here

00:48:32,800 --> 00:48:46,660
now let's find this element it's the

00:48:38,050 --> 00:48:51,130
list the first no we're okay to do count

00:48:46,660 --> 00:48:55,420
to do count strong so what we do is

00:48:51,130 --> 00:48:58,960
after we click on it we define a new

00:48:55,420 --> 00:49:05,050
element that says weight browser dot

00:48:58,960 --> 00:49:07,090
color sign to do count and in the strong

00:49:05,050 --> 00:49:08,230
element and then we just lock it out I

00:49:07,090 --> 00:49:13,280
think that was too fast

00:49:08,230 --> 00:49:16,810
turned out exactly so logout

00:49:13,280 --> 00:49:20,330
items left which is an element and

00:49:16,810 --> 00:49:24,410
annulment as you can see here in the

00:49:20,330 --> 00:49:26,120
documentation on their API you see all

00:49:24,410 --> 00:49:28,130
the comments are available for the

00:49:26,120 --> 00:49:30,440
browser and all the commands are

00:49:28,130 --> 00:49:32,840
available for an element and for to get

00:49:30,440 --> 00:49:35,120
the text of an element we use the get

00:49:32,840 --> 00:49:42,200
text command here and so we can just

00:49:35,120 --> 00:49:42,710
copy that so items left dot get text can

00:49:42,200 --> 00:49:45,650
you move that

00:49:42,710 --> 00:49:48,830
and this should almost do it yet let me

00:49:45,650 --> 00:49:52,060
add the pause and implicit pause in the

00:49:48,830 --> 00:49:54,830
middle for at the end so that we can see

00:49:52,060 --> 00:49:58,970
that actually everything is happening as

00:49:54,830 --> 00:50:04,490
expected and then looks so far good to

00:49:58,970 --> 00:50:06,940
me let's try this out surround the same

00:50:04,490 --> 00:50:06,940
script again

00:50:09,420 --> 00:50:15,299
it again runs on the dev tools package

00:50:12,270 --> 00:50:18,750
but like I said it's doesn't should not

00:50:15,299 --> 00:50:22,140
matter but it feels in this case so

00:50:18,750 --> 00:50:26,670
let's before we look into that it's just

00:50:22,140 --> 00:50:28,559
used chromedriver and - so I can use the

00:50:26,670 --> 00:50:32,190
repair protocol we expect everything to

00:50:28,559 --> 00:50:35,130
work no that never was intentionally

00:50:32,190 --> 00:50:37,079
okay I think I've seen the problem it

00:50:35,130 --> 00:50:40,890
says cannot wait click of undefined and

00:50:37,079 --> 00:50:44,390
so if you have such an error always

00:50:40,890 --> 00:50:49,589
check what you call it click on and here

00:50:44,390 --> 00:50:52,770
we see that items zero items number one

00:50:49,589 --> 00:50:55,049
is undefined and I assume that the

00:50:52,770 --> 00:50:57,390
reason for that is that the elements

00:50:55,049 --> 00:51:01,140
once I fetched them have not been on the

00:50:57,390 --> 00:51:04,470
page yet and that happens and to avoid

00:51:01,140 --> 00:51:06,569
that it's always good if you if your app

00:51:04,470 --> 00:51:08,579
is dynamic and loads things from the

00:51:06,569 --> 00:51:10,950
back end well you never know when the

00:51:08,579 --> 00:51:14,849
elements appear to have an excessive

00:51:10,950 --> 00:51:16,680
weight to it usually that happens

00:51:14,849 --> 00:51:18,510
automatically but if you if you're

00:51:16,680 --> 00:51:22,349
dealing with portable elements that's

00:51:18,510 --> 00:51:25,619
difficult - we - you know immediately

00:51:22,349 --> 00:51:29,130
immediate automatically so what you do

00:51:25,619 --> 00:51:31,500
is you say this first element I want to

00:51:29,130 --> 00:51:36,260
first wait for it to exist until before

00:51:31,500 --> 00:51:42,329
I click on so you can close this I think

00:51:36,260 --> 00:51:45,210
and this as well and this as well and so

00:51:42,329 --> 00:51:49,460
now we run this again and check if it

00:51:45,210 --> 00:51:53,849
works I can wait for kisses undefined

00:51:49,460 --> 00:51:56,869
this is a nice example so there's really

00:51:53,849 --> 00:51:56,869
nothing in here

00:51:57,020 --> 00:52:06,599
so let's apparently items zero will

00:52:02,819 --> 00:52:13,890
return nothing so what we can do is we

00:52:06,599 --> 00:52:16,680
wait for the first element we just

00:52:13,890 --> 00:52:24,150
fetched the first element of it so let's

00:52:16,680 --> 00:52:26,580
say first element browser dollar sign

00:52:24,150 --> 00:52:32,290
so let's wait for the first elementary

00:52:26,580 --> 00:52:33,580
exists and then we fetch all the

00:52:32,290 --> 00:52:36,790
elements and click on the first one

00:52:33,580 --> 00:52:40,870
there is how to present a more cleaner

00:52:36,790 --> 00:52:45,070
way to do this but this is my solution

00:52:40,870 --> 00:52:47,400
that I will use for now let's see if

00:52:45,070 --> 00:52:47,400
that works

00:52:47,670 --> 00:52:53,329
there we go

00:52:50,450 --> 00:52:54,770
okay it finds okay I of course cannot

00:52:53,329 --> 00:52:59,630
find I need to do because I don't have

00:52:54,770 --> 00:53:02,329
any I when once that bad because we

00:52:59,630 --> 00:53:05,119
first have to enter three ayats let's do

00:53:02,329 --> 00:53:07,790
that first LAN so we can remove this

00:53:05,119 --> 00:53:11,020
because once we entered items we should

00:53:07,790 --> 00:53:15,650
already see them and so I need to find

00:53:11,020 --> 00:53:19,970
the entered input element which is gonna

00:53:15,650 --> 00:53:28,430
be the new to do and let's define that

00:53:19,970 --> 00:53:32,839
Const new to do equal to wait you to do

00:53:28,430 --> 00:53:35,510
we wait for the new to do to appear so

00:53:32,839 --> 00:53:37,400
you know when we land we let the

00:53:35,510 --> 00:53:39,829
application you know do its thing and

00:53:37,400 --> 00:53:46,160
wait until the element is there so we

00:53:39,829 --> 00:53:49,070
say wait for test and then we add a new

00:53:46,160 --> 00:53:51,170
value to it and we can do two things we

00:53:49,070 --> 00:53:54,770
can either add a value to the element

00:53:51,170 --> 00:53:57,170
and cat enter or we can just use the

00:53:54,770 --> 00:53:59,599
keys element to just enter keys to the

00:53:57,170 --> 00:54:04,060
current focus element and but what I

00:53:59,599 --> 00:54:08,390
will do is I say wait new to do add

00:54:04,060 --> 00:54:11,930
value and I input two values and to do

00:54:08,390 --> 00:54:14,390
number one and the second one is entered

00:54:11,930 --> 00:54:20,900
and rectangle will recognize that this

00:54:14,390 --> 00:54:23,119
is a operation system input so enter so

00:54:20,900 --> 00:54:25,609
it will not write enter out into the

00:54:23,119 --> 00:54:30,740
input field well it will just hit enter

00:54:25,609 --> 00:54:33,020
s button and so let's try this to to do

00:54:30,740 --> 00:54:36,380
one two three and then I should have

00:54:33,020 --> 00:54:39,099
three to use click on first one and then

00:54:36,380 --> 00:54:39,099
we'll see what happens

00:54:41,200 --> 00:54:50,350
there we go we're results okay let's do

00:54:48,100 --> 00:54:53,920
another wait I don't sure why it did not

00:54:50,350 --> 00:54:56,830
wait because I did them in the past

00:54:53,920 --> 00:54:59,050
there and so it's always important every

00:54:56,830 --> 00:55:01,090
command is asynchronous so you have to

00:54:59,050 --> 00:55:03,580
deal with async await if you use the

00:55:01,090 --> 00:55:06,760
standalone mode if we later move to the

00:55:03,580 --> 00:55:08,890
web double support to the mental test

00:55:06,760 --> 00:55:10,270
runner we can all we move the async the

00:55:08,890 --> 00:55:12,850
weights because this is handled by the

00:55:10,270 --> 00:55:16,300
Tesla so let's run this again finally

00:55:12,850 --> 00:55:20,440
with the results heading three triggers

00:55:16,300 --> 00:55:25,720
clearing the second one up did not

00:55:20,440 --> 00:55:32,830
happen because I did not click on the on

00:55:25,720 --> 00:55:35,490
the bottom here on this check mark so in

00:55:32,830 --> 00:55:38,250
the to do we have an input called

00:55:35,490 --> 00:55:42,520
toggled which we need to click for that

00:55:38,250 --> 00:55:44,170
so we we accidentally clicked on the to

00:55:42,520 --> 00:55:47,380
do by clicking on the to do will not

00:55:44,170 --> 00:55:49,960
change will not mark it as complete what

00:55:47,380 --> 00:55:57,850
we need to do is we need to find the

00:55:49,960 --> 00:56:01,090
total so we say find me the total within

00:55:57,850 --> 00:56:07,450
the first to do and so we can chain

00:56:01,090 --> 00:56:10,120
element falls and like here so then we

00:56:07,450 --> 00:56:13,420
find elements then I would in that

00:56:10,120 --> 00:56:15,430
element so here I want to find a element

00:56:13,420 --> 00:56:21,730
with the class struggle within the first

00:56:15,430 --> 00:56:29,220
element of the tube and then toggle dot

00:56:21,730 --> 00:56:29,220
click should do the trick see

00:56:29,440 --> 00:56:36,280
there we go and finally results - and

00:56:33,040 --> 00:56:38,680
with that we completed the second

00:56:36,280 --> 00:56:40,980
chapter there are some additional things

00:56:38,680 --> 00:56:44,230
that you can do here

00:56:40,980 --> 00:56:48,220
for instance running the same using that

00:56:44,230 --> 00:56:52,960
foods package or even better modifying

00:56:48,220 --> 00:56:55,090
the local storage and to insert

00:56:52,960 --> 00:56:59,260
already-existing to juice into the

00:56:55,090 --> 00:57:01,330
application so with the conducted

00:56:59,260 --> 00:57:04,690
command yet exits to the local storage

00:57:01,330 --> 00:57:08,800
which is a reason why it when I reload I

00:57:04,690 --> 00:57:14,640
already have these items here I can look

00:57:08,800 --> 00:57:17,640
into the dev tools to remove memory

00:57:14,640 --> 00:57:17,640
application

00:57:18,090 --> 00:57:24,400
local storage to the a machine you see

00:57:21,280 --> 00:57:26,920
here my - dues that are stored in this

00:57:24,400 --> 00:57:29,890
local storage and you can imitate and

00:57:26,920 --> 00:57:32,380
mock the local storage with the

00:57:29,890 --> 00:57:33,820
difference protocol and use running on

00:57:32,380 --> 00:57:36,820
the dev tools or mesh protocol you have

00:57:33,820 --> 00:57:39,460
already access to these features so you

00:57:36,820 --> 00:57:43,480
can try to run this and try it out for

00:57:39,460 --> 00:57:45,790
yourself and see if you can get this

00:57:43,480 --> 00:57:50,320
running without having to entering all

00:57:45,790 --> 00:57:53,770
three to do is first but we will move

00:57:50,320 --> 00:57:56,650
ahead and we have one hour left half an

00:57:53,770 --> 00:57:59,680
hour left and in this session to go to

00:57:56,650 --> 00:58:03,720
chapter 3 does anyone has so far has

00:57:59,680 --> 00:58:07,690
questions I still see the Krait set

00:58:03,720 --> 00:58:10,440
anyone can report this purpose where you

00:58:07,690 --> 00:58:10,440
see Mia

00:58:14,160 --> 00:58:24,219
okay we will then move on to this third

00:58:21,579 --> 00:58:28,209
chapter where we introduce W at Esquire

00:58:24,219 --> 00:58:31,269
and for this chapter we want to create a

00:58:28,209 --> 00:58:34,029
config file test directory for into and

00:58:31,269 --> 00:58:38,739
test files and we want to port the test

00:58:34,029 --> 00:58:41,859
J's code that we have to run in the test

00:58:38,739 --> 00:58:44,319
Runner we want to make the code

00:58:41,859 --> 00:58:47,259
asynchronous and synchronous and remove

00:58:44,319 --> 00:58:47,949
all the async awaits and use our

00:58:47,259 --> 00:58:51,670
embedded

00:58:47,949 --> 00:58:57,009
search library and create a simple entry

00:58:51,670 --> 00:58:57,189
script for all NPM package so let's do

00:58:57,009 --> 00:58:59,529
that

00:58:57,189 --> 00:59:02,739
and to get started with the web the web

00:58:59,529 --> 00:59:04,989
test runner we need to install it so the

00:59:02,739 --> 00:59:13,119
first thing we want to do is say npm

00:59:04,989 --> 00:59:15,549
install @wo CLI and this installs the

00:59:13,119 --> 00:59:17,680
CLI locally to our project make sure

00:59:15,549 --> 00:59:21,549
that you always you should always

00:59:17,680 --> 00:59:24,039
install your such as Eli's locally to

00:59:21,549 --> 00:59:27,009
avoid confusions with the public global

00:59:24,039 --> 00:59:30,339
install installed CLI tool that has the

00:59:27,009 --> 00:59:35,709
same name so you can still access this

00:59:30,339 --> 00:59:38,890
wao command with 10px helper so if you

00:59:35,709 --> 00:59:41,319
call n PX n WL help we get the latest

00:59:38,890 --> 00:59:44,259
version of the CLI and some

00:59:41,319 --> 00:59:47,079
documentation around it so to create a

00:59:44,259 --> 00:59:47,589
config file now all we need to do is to

00:59:47,079 --> 00:59:54,369
called

00:59:47,589 --> 00:59:56,469
MPX wao and it will ask you hey and you

00:59:54,369 --> 00:59:59,829
don't have a config file yet do you want

00:59:56,469 --> 01:00:02,979
to create one and I say of course so for

00:59:59,829 --> 01:00:04,779
this chapter all we need to do is just

01:00:02,979 --> 01:00:06,759
you know testing everything on my local

01:00:04,779 --> 01:00:09,130
machine and running it on the cloud

01:00:06,759 --> 01:00:11,109
vendor will come in later chapter so we

01:00:09,130 --> 01:00:11,469
say I want you to test on my local

01:00:11,109 --> 01:00:14,229
machine

01:00:11,469 --> 01:00:15,969
I like Walker to run the test in I want

01:00:14,229 --> 01:00:18,849
to test I want to run my test to

01:00:15,969 --> 01:00:23,619
infamous my tests are located in test

01:00:18,849 --> 01:00:26,380
specs and so on I currently don't have

01:00:23,619 --> 01:00:29,080
panel or Tony don't you start good so we

01:00:26,380 --> 01:00:31,300
can skip the compiler

01:00:29,080 --> 01:00:33,550
I want to use the spec recorder but

01:00:31,300 --> 01:00:37,840
there as you can see various of other

01:00:33,550 --> 01:00:40,380
reports that you can use I want to use

01:00:37,840 --> 01:00:44,490
the chrome driver service and so I can

01:00:40,380 --> 01:00:47,350
get rid of this chrome driver and wo

01:00:44,490 --> 01:00:49,420
takes care on training the Chrome

01:00:47,350 --> 01:00:54,720
browser for me and start creating this

01:00:49,420 --> 01:01:00,340
Kodama instance for me so my base URL is

01:00:54,720 --> 01:01:02,830
still the same that to do indicia and it

01:01:00,340 --> 01:01:05,880
now installs all the packages that are

01:01:02,830 --> 01:01:09,190
necessary for this specific setup for me

01:01:05,880 --> 01:01:17,950
which is good and in automatic adds it

01:01:09,190 --> 01:01:22,600
to the package to chase that there we go

01:01:17,950 --> 01:01:25,750
now we can run essentially wdl already

01:01:22,600 --> 01:01:28,240
but before but before we do that let's

01:01:25,750 --> 01:01:33,630
create our test file or in export or a

01:01:28,240 --> 01:01:36,280
test file and as we have sat in the

01:01:33,630 --> 01:01:39,250
configuration wizard our tests are

01:01:36,280 --> 01:01:43,080
located in this directory so what we do

01:01:39,250 --> 01:01:46,270
is to create a new folder as state test

01:01:43,080 --> 01:01:50,050
in that folder we create a new one for

01:01:46,270 --> 01:01:51,720
specs and then we want to move our test

01:01:50,050 --> 01:01:56,080
forward

01:01:51,720 --> 01:01:59,110
so now we have a script that is supposed

01:01:56,080 --> 01:02:00,970
to be a test and so instead of importing

01:01:59,110 --> 01:02:01,480
what that out we don't need to do that

01:02:00,970 --> 01:02:03,250
anymore

01:02:01,480 --> 01:02:07,870
because the test Runner creates a

01:02:03,250 --> 01:02:10,000
session for it and what we do is we just

01:02:07,870 --> 01:02:15,120
write test files for Mallory and let me

01:02:10,000 --> 01:02:24,520
comment this out so describe to do NBC

01:02:15,120 --> 01:02:28,780
and this describe block has no the hook

01:02:24,520 --> 01:02:34,420
that opens for me the page where I want

01:02:28,780 --> 01:02:40,960
to go to so browser doc you out and then

01:02:34,420 --> 01:02:48,970
I have an it block that you know inserts

01:02:40,960 --> 01:02:58,300
three items and for that I will copy

01:02:48,970 --> 01:03:00,700
this part so the Vantage now is that the

01:02:58,300 --> 01:03:03,340
crumb test Runner by default runs the

01:03:00,700 --> 01:03:07,000
commands synchronous it uses the fibers

01:03:03,340 --> 01:03:10,000
package and to plug into the node

01:03:07,000 --> 01:03:12,270
internals to make this the profits calls

01:03:10,000 --> 01:03:14,980
of every command is synchronous call

01:03:12,270 --> 01:03:17,350
which you should not do for any other

01:03:14,980 --> 01:03:20,740
reason than that for testing it's not

01:03:17,350 --> 01:03:23,530
important that you know the event loop

01:03:20,740 --> 01:03:25,210
stay still for a while because you're

01:03:23,530 --> 01:03:29,050
essentially testing and don't have a lot

01:03:25,210 --> 01:03:32,230
of user load but you should not do that

01:03:29,050 --> 01:03:37,840
for you know serving web applications or

01:03:32,230 --> 01:03:40,480
any other noches applications so we can

01:03:37,840 --> 01:03:43,390
remove the ACN the wait for the commands

01:03:40,480 --> 01:03:44,950
we can also move the browser dot for

01:03:43,390 --> 01:03:47,320
every dollar command that we write

01:03:44,950 --> 01:03:50,380
because this dollar command is a global

01:03:47,320 --> 01:03:53,350
now as well and so this pixel test makes

01:03:50,380 --> 01:03:56,740
even loop simpler than before no is a no

01:03:53,350 --> 01:03:59,230
single rate and no long commands just a

01:03:56,740 --> 01:04:04,810
dollar function as we had a years ago or

01:03:59,230 --> 01:04:06,730
still have with chamber so with entering

01:04:04,810 --> 01:04:11,500
three items and now we want to let's

01:04:06,730 --> 01:04:16,300
check immediately the amount of items

01:04:11,500 --> 01:04:16,630
because I expect now that always that's

01:04:16,300 --> 01:04:20,290
it

01:04:16,630 --> 01:04:28,000
it's expect now that all items so alt

01:04:20,290 --> 01:04:29,950
reduce to have actually I don't know

01:04:28,000 --> 01:04:37,390
this one let's look into our search

01:04:29,950 --> 01:04:40,420
library okay to have children

01:04:37,390 --> 01:04:48,460
there we go here's the assertion for

01:04:40,420 --> 01:04:52,710
this and it would be this assertion our

01:04:48,460 --> 01:04:53,829
element is the two deuce

01:04:52,710 --> 01:04:56,469
[Music]

01:04:53,829 --> 01:05:03,039
and we expect them to have children

01:04:56,469 --> 01:05:07,989
equals three so let's write this part of

01:05:03,039 --> 01:05:13,269
the test we have our config file it has

01:05:07,989 --> 01:05:15,549
my capability Chrome it has my face well

01:05:13,269 --> 01:05:17,979
so it's by having a base well I don't

01:05:15,549 --> 01:05:21,999
need to write this rule this view hell

01:05:17,979 --> 01:05:24,130
anymore I can just say slash and it sets

01:05:21,999 --> 01:05:26,920
some timeout it has its chrome divert as

01:05:24,130 --> 01:05:30,640
a servant set up we use motor we have

01:05:26,920 --> 01:05:32,589
perspective so inspect important and a

01:05:30,640 --> 01:05:36,249
bunch of other hooks that we can also

01:05:32,589 --> 01:05:39,489
use as part of the config file all right

01:05:36,249 --> 01:05:42,369
I think we have all we need to give it a

01:05:39,489 --> 01:05:45,549
first spin so all we need to do now is

01:05:42,369 --> 01:05:47,950
calling mph W again and by default

01:05:45,549 --> 01:05:57,099
without any command to run suspect that

01:05:47,950 --> 01:05:58,520
you have and fails or okay let's just

01:05:57,099 --> 01:06:00,180
write this down

01:05:58,520 --> 01:06:04,090
[Music]

01:06:00,180 --> 01:06:09,600
interesting and that fails expected

01:06:04,090 --> 01:06:09,600
swing to see function and twisting

01:06:11,020 --> 01:06:15,359
kay it points to my tests

01:06:15,980 --> 01:06:24,360
here described before

01:06:20,150 --> 01:06:27,390
okay yeah that was I was always you know

01:06:24,360 --> 01:06:30,450
what's going on apparently my vs Co it

01:06:27,390 --> 01:06:30,900
has imported this describe which is not

01:06:30,450 --> 01:06:33,030
correct

01:06:30,900 --> 01:06:37,680
I'm I'm sorry about that so let's go

01:06:33,030 --> 01:06:40,980
ahead alright so it starts at today we

01:06:37,680 --> 01:06:43,710
see yet but not the right page and this

01:06:40,980 --> 01:06:45,660
is not the right page and you see it

01:06:43,710 --> 01:06:47,730
tries to find a new to-do item it

01:06:45,660 --> 01:06:49,830
doesn't find it but it still tries to

01:06:47,730 --> 01:06:52,710
try it multiple times before it

01:06:49,830 --> 01:06:56,400
ultimately ends up doing that failing on

01:06:52,710 --> 01:06:59,160
you so actually it you you just see one

01:06:56,400 --> 01:07:03,870
call command but what happens in reality

01:06:59,160 --> 01:07:06,960
is that if the command the element is

01:07:03,870 --> 01:07:07,650
not be found it tries to try some

01:07:06,960 --> 01:07:09,750
multiple times

01:07:07,650 --> 01:07:12,720
we also wait for it here in the second

01:07:09,750 --> 01:07:16,770
line so this happens anyway let's see I

01:07:12,720 --> 01:07:19,500
want our base URL s it's this one so

01:07:16,770 --> 01:07:24,830
essentially this should work I see it

01:07:19,500 --> 01:07:28,020
because it concatenates the the path is

01:07:24,830 --> 01:07:30,960
we should I think write it with a dot

01:07:28,020 --> 01:07:34,770
otherwise we will start with you should

01:07:30,960 --> 01:07:37,020
do any seat base page so let's

01:07:34,770 --> 01:07:39,200
concatenate it this way and try this

01:07:37,020 --> 01:07:39,200
again

01:07:39,340 --> 01:07:41,400
you

01:07:41,410 --> 01:07:44,070
we're out there

01:07:49,930 --> 01:07:57,370
thing that's

01:07:53,230 --> 01:07:59,650
it's failing because okay it waits for

01:07:57,370 --> 01:08:03,850
three

01:07:59,650 --> 01:08:07,350
Sirius is the same string okay let me

01:08:03,850 --> 01:08:11,920
see what we got back it could not find

01:08:07,350 --> 01:08:14,250
the elements so let's go back into the

01:08:11,920 --> 01:08:14,250
code

01:08:15,340 --> 01:08:22,540
so this should be cooked three the

01:08:18,670 --> 01:08:27,270
guests we just modify this and say the

01:08:22,540 --> 01:08:31,810
links of all these elements should be

01:08:27,270 --> 01:08:32,890
three yes this way of asserting or

01:08:31,810 --> 01:08:35,890
mentioning the amount of elements

01:08:32,890 --> 01:08:40,890
doesn't work so just say done legs to

01:08:35,890 --> 01:08:40,890
between and this should hopefully work

01:08:41,080 --> 01:08:47,980
there we go now can we want the rest of

01:08:44,589 --> 01:08:53,700
the steps and we can say our second test

01:08:47,980 --> 01:09:02,490
is to mark the second item as complete

01:08:53,700 --> 01:09:02,490
and here we just copy this code and

01:09:04,710 --> 01:09:24,550
command it so again we remove the

01:09:18,490 --> 01:09:27,370
weights from it and and so we have all

01:09:24,550 --> 01:09:30,000
items we find the first item and click

01:09:27,370 --> 01:09:33,370
on that item that still works like this

01:09:30,000 --> 01:09:35,859
we can remove this one as well as this

01:09:33,370 --> 01:09:39,040
one you can Staller dolla dolla sign our

01:09:35,859 --> 01:09:42,760
Global's and then we get the items left

01:09:39,040 --> 01:09:47,980
and from that cap text we should out of

01:09:42,760 --> 01:09:55,030
this we make an assertion so we say

01:09:47,980 --> 01:09:58,630
expect items to have text and it's

01:09:55,030 --> 01:10:03,210
double check this our search memory has

01:09:58,630 --> 01:10:03,210
a matcher that is called to have text

01:10:03,960 --> 01:10:10,750
it's right here so all you need to put

01:10:08,050 --> 01:10:14,200
into the expect as the element and just

01:10:10,750 --> 01:10:17,920
you call to expect on it and that's

01:10:14,200 --> 01:10:21,340
about it we can remove the rest of the

01:10:17,920 --> 01:10:22,930
code because we also not need to clean

01:10:21,340 --> 01:10:28,290
up the browser session that's happening

01:10:22,930 --> 01:10:28,290
by the test one as well let's run this

01:10:33,860 --> 01:10:45,780
okay that was my bad we have to expect

01:10:40,439 --> 01:10:48,119
items left to have text to because right

01:10:45,780 --> 01:10:51,019
before we checked if it has no text we

01:10:48,119 --> 01:10:54,959
want to make sure that the text says to

01:10:51,019 --> 01:10:58,110
there we go and there we go and as you

01:10:54,959 --> 01:11:03,019
can see before it tried to fetch the

01:10:58,110 --> 01:11:03,019
text of the elements go back

01:11:04,150 --> 01:11:10,690
try to fetch the where was it no one

01:11:08,450 --> 01:11:10,690
more

01:11:12,210 --> 01:11:17,890
yeah so we tried to fetch some text of

01:11:14,740 --> 01:11:20,260
them and multiple times and this is part

01:11:17,890 --> 01:11:24,130
of the advantage of using the antivirus

01:11:20,260 --> 01:11:27,540
assertion library it has these retries

01:11:24,130 --> 01:11:30,940
in the expected in the assertions so

01:11:27,540 --> 01:11:33,670
which will remove the flakiness of your

01:11:30,940 --> 01:11:35,920
test if your elements you know if your

01:11:33,670 --> 01:11:37,930
element shows up later or if the we

01:11:35,920 --> 01:11:42,670
rendering of the element takes a good

01:11:37,930 --> 01:11:46,630
time okay this with that we completed

01:11:42,670 --> 01:11:49,180
step section chapter 3 I think there's

01:11:46,630 --> 01:11:52,390
also an additional step for it but

01:11:49,180 --> 01:11:56,470
things so far it looks good and we can

01:11:52,390 --> 01:11:59,170
move on to chapter four before that I

01:11:56,470 --> 01:12:02,800
will have a look into the chat it seems

01:11:59,170 --> 01:12:04,820
it's still really very Krait there we

01:12:02,800 --> 01:12:10,880
have

01:12:04,820 --> 01:12:16,780
stop 35 minutes to go so let's just

01:12:10,880 --> 01:12:16,780
continue again if you have questions too

01:12:18,980 --> 01:12:23,780
so if you have questions working on one

01:12:21,740 --> 01:12:29,840
of the chapter please let me know in the

01:12:23,780 --> 01:12:32,930
chat let me wave to you so let me know

01:12:29,840 --> 01:12:36,130
and we can help you out there

01:12:32,930 --> 01:12:36,130
so I will move to chapter 4

01:12:37,460 --> 01:12:42,770
here we want to use with portals and

01:12:40,310 --> 01:12:44,660
services and the task is to run chrome

01:12:42,770 --> 01:12:47,180
reference service which we already do

01:12:44,660 --> 01:12:50,630
automatically we want to have the alert

01:12:47,180 --> 01:12:53,510
important to list to the list of

01:12:50,630 --> 01:12:56,980
importers and then we want to use the

01:12:53,510 --> 01:13:00,110
Aloha CLI to generate them completer and

01:12:56,980 --> 01:13:04,520
to report in their own capito and we

01:13:00,110 --> 01:13:06,590
want to report the chrome by verlox into

01:13:04,520 --> 01:13:08,750
the locks directory which is important

01:13:06,590 --> 01:13:12,680
if we want to figure out what's going on

01:13:08,750 --> 01:13:15,650
in chrome driver and see where congress

01:13:12,680 --> 01:13:16,300
struggled to you know fetch elements and

01:13:15,650 --> 01:13:20,570
so on

01:13:16,300 --> 01:13:24,470
so Kay let's first add the live reporter

01:13:20,570 --> 01:13:27,680
to our reporters list when we do for

01:13:24,470 --> 01:13:30,170
them when we need to do is as I

01:13:27,680 --> 01:13:34,220
mentioned before we have an install

01:13:30,170 --> 01:13:37,370
command that allows you to install all

01:13:34,220 --> 01:13:41,360
the reporters and one of them is the

01:13:37,370 --> 01:13:52,340
lure reporter so we can just copy this

01:13:41,360 --> 01:13:54,700
out oh and Peaks this will install at

01:13:52,340 --> 01:14:00,290
the video special reporter and

01:13:54,700 --> 01:14:05,330
automatically adds that lure reporter to

01:14:00,290 --> 01:14:10,520
our reporters list which is nice so here

01:14:05,330 --> 01:14:13,400
we go and we want to use a lucía light

01:14:10,520 --> 01:14:16,070
to generate the report on Indian

01:14:13,400 --> 01:14:18,830
completer so the other important just

01:14:16,070 --> 01:14:21,920
captures information from the test to

01:14:18,830 --> 01:14:25,160
get the actual allure HTML page we need

01:14:21,920 --> 01:14:29,270
to do a little bit more so for that we

01:14:25,160 --> 01:14:31,470
should look into the dogs and the dogs

01:14:29,270 --> 01:14:33,360
have

01:14:31,470 --> 01:14:40,880
some information about the output here

01:14:33,360 --> 01:14:45,180
which we can I just will take this one

01:14:40,880 --> 01:14:49,230
to set a specific output here so to

01:14:45,180 --> 01:14:51,720
apply properties to a reporter we wrap

01:14:49,230 --> 01:15:00,930
this into an airing and put in some

01:14:51,720 --> 01:15:04,050
options in there and then it should use

01:15:00,930 --> 01:15:07,580
the command line tool so we have the

01:15:04,050 --> 01:15:07,580
command line tool over here

01:15:07,700 --> 01:15:14,480
and we need to call the generate command

01:15:10,100 --> 01:15:17,690
on it as you can see here let's skip

01:15:14,480 --> 01:15:21,650
that for now let's skip that task for

01:15:17,690 --> 01:15:23,810
now and just oneness first what was the

01:15:21,650 --> 01:15:26,360
other tasks oh yeah the chrome timer

01:15:23,810 --> 01:15:29,500
logs into the locks directory so let's

01:15:26,360 --> 01:15:34,880
check into the chrome driver

01:15:29,500 --> 01:15:39,200
chromedriver documentation which we have

01:15:34,880 --> 01:15:43,360
here and for chrome driver

01:15:39,200 --> 01:15:43,360
we want to help our output here

01:15:44,050 --> 01:15:49,600
somewhere else so let's check these

01:15:46,910 --> 01:15:49,600
services

01:15:50,410 --> 01:16:02,180
he is chrome diamond defined and we want

01:15:53,210 --> 01:16:06,080
to apply configurations on it so the

01:16:02,180 --> 01:16:08,030
output here should be locks and I want

01:16:06,080 --> 01:16:09,560
to actually you run it we're both so I

01:16:08,030 --> 01:16:14,180
see everything else going on in the

01:16:09,560 --> 01:16:14,740
chrome driver makes it's nice there we

01:16:14,180 --> 01:16:17,390
go

01:16:14,740 --> 01:16:22,540
think we're good to go let's give it a

01:16:17,390 --> 01:16:22,540
try running the same commands

01:16:25,610 --> 01:16:31,290
you see the standardout is already much

01:16:29,400 --> 01:16:33,900
more as before we see all the webdriver

01:16:31,290 --> 01:16:35,580
commands as well as the chrome dev tools

01:16:33,900 --> 01:16:39,870
command that raghava and the chrome

01:16:35,580 --> 01:16:43,020
driver is sending to Crowe so let's see

01:16:39,870 --> 01:16:45,750
what we got we now have an honorary

01:16:43,020 --> 01:16:53,460
salts with all the information from the

01:16:45,750 --> 01:16:55,110
tests and to generate any locks we have

01:16:53,460 --> 01:16:57,630
also the chrome driver log so that we

01:16:55,110 --> 01:16:59,910
the figure we have we saw instantly and

01:16:57,630 --> 01:17:06,350
descended out we also have it now here

01:16:59,910 --> 01:17:10,110
so we can exactly see when for instance

01:17:06,350 --> 01:17:11,850
the chromedriver navigated to a specific

01:17:10,110 --> 01:17:15,900
page using the chrome deference command

01:17:11,850 --> 01:17:18,960
page navigate so in order to get the

01:17:15,900 --> 01:17:22,370
website for the recorder we should

01:17:18,960 --> 01:17:27,750
install if we go back to their politics

01:17:22,370 --> 01:17:34,890
we need to have the and there we go

01:17:27,750 --> 01:17:39,900
it's a CLI true so the CLI tool should

01:17:34,890 --> 01:17:42,140
be this we install it but without the -

01:17:39,900 --> 01:17:42,140
G

01:17:50,940 --> 01:17:59,890
to generate the website we can now call

01:17:54,640 --> 01:18:01,780
the inure command check if it's there

01:17:59,890 --> 01:18:07,470
there we go

01:18:01,780 --> 01:18:11,470
generate and what it wants to see is no

01:18:07,470 --> 01:18:15,310
let's go back in the ducts generate then

01:18:11,470 --> 01:18:25,150
the output here which is hardware

01:18:15,310 --> 01:18:27,440
results and say a lure token see what

01:18:25,150 --> 01:18:31,530
that does

01:18:27,440 --> 01:18:37,380
generates the lure results and serves

01:18:31,530 --> 01:18:39,980
the lure HTML report in my browser so

01:18:37,380 --> 01:18:44,130
here we can now go through the desserts

01:18:39,980 --> 01:18:46,199
we have before all hook the insert three

01:18:44,130 --> 01:18:48,949
items test and Demark second item is

01:18:46,199 --> 01:18:51,000
complete where we now see all the

01:18:48,949 --> 01:18:55,020
commands with their requests and

01:18:51,000 --> 01:18:58,640
responses and we also get screenshots if

01:18:55,020 --> 01:19:00,870
we want to the Lua documentation says

01:18:58,640 --> 01:19:04,560
where you can you know you can add

01:19:00,870 --> 01:19:06,929
custom things using the royal order you

01:19:04,560 --> 01:19:09,330
can also import it in your tests to do

01:19:06,929 --> 01:19:17,640
specific things and enhance your

01:19:09,330 --> 01:19:19,070
reporting to it okay let's move on to

01:19:17,640 --> 01:19:23,370
the next chapter

01:19:19,070 --> 01:19:25,980
again I'm not fully created all the

01:19:23,370 --> 01:19:28,260
steps here you can you know you don't

01:19:25,980 --> 01:19:30,900
want if you don't want to say NPSL or

01:19:28,260 --> 01:19:34,830
generate and if you want to may have

01:19:30,900 --> 01:19:41,310
this is out of your test run you can

01:19:34,830 --> 01:19:45,630
integrate this command here into the and

01:19:41,310 --> 01:19:47,130
into a hook into an on computer so

01:19:45,630 --> 01:19:49,500
whenever the test one completes an

01:19:47,130 --> 01:19:51,980
automatically generates the HTML page

01:19:49,500 --> 01:19:57,420
for you and you can serve it from your

01:19:51,980 --> 01:19:59,790
AWS space saw three bucket or wherever

01:19:57,420 --> 01:20:04,500
you want to store test we add the yellow

01:19:59,790 --> 01:20:10,080
of results let's before it and to the

01:20:04,500 --> 01:20:12,540
next chapter ship to five now we want to

01:20:10,080 --> 01:20:16,710
build a custom report in custom services

01:20:12,540 --> 01:20:21,300
and for that and I recommend to look

01:20:16,710 --> 01:20:26,489
into the documentation for the custom

01:20:21,300 --> 01:20:30,300
commands and custom report in there you

01:20:26,489 --> 01:20:33,120
will see how these have to look like and

01:20:30,300 --> 01:20:37,260
which is created a simple custom report

01:20:33,120 --> 01:20:40,620
it helps me to understand the commands

01:20:37,260 --> 01:20:41,160
that have been executed and to so I move

01:20:40,620 --> 01:20:43,890
away

01:20:41,160 --> 01:20:48,950
it from the hands-on workshop and just

01:20:43,890 --> 01:20:53,930
showing you how to integrate basic basic

01:20:48,950 --> 01:20:56,430
custom we bought it let me remove a lure

01:20:53,930 --> 01:20:56,880
again because I don't need to have that

01:20:56,430 --> 01:21:07,350
anymore

01:20:56,880 --> 01:21:10,080
and the service divers let's can say so

01:21:07,350 --> 01:21:12,750
I recommend if you want to build your

01:21:10,080 --> 01:21:14,550
customer bonus for your projects - you

01:21:12,750 --> 01:21:18,330
know we poured every information from

01:21:14,550 --> 01:21:21,600
the test to anywhere else literally and

01:21:18,330 --> 01:21:23,610
then a custom report is always good so

01:21:21,600 --> 01:21:28,680
let's say we create such a custom report

01:21:23,610 --> 01:21:31,890
and this custom report needs to be class

01:21:28,680 --> 01:21:37,350
as you see in the documentation this

01:21:31,890 --> 01:21:39,150
example uses the import statement which

01:21:37,350 --> 01:21:45,540
is only available with the latest note

01:21:39,150 --> 01:21:47,520
or if you use para table so to run

01:21:45,540 --> 01:21:50,820
without Babel which I don't have setup

01:21:47,520 --> 01:21:55,320
right now I have to say module exports

01:21:50,820 --> 01:21:57,300
equals class custom report you can name

01:21:55,320 --> 01:22:00,150
your opponent anywhere you want what's

01:21:57,300 --> 01:22:03,120
important here is that you extend from

01:22:00,150 --> 01:22:04,710
the WTO based report this is important

01:22:03,120 --> 01:22:06,540
because this based important ensures

01:22:04,710 --> 01:22:09,540
that you can listen to all the events

01:22:06,540 --> 01:22:13,740
that you can that you essentially want

01:22:09,540 --> 01:22:21,090
to listen to so you import that base

01:22:13,740 --> 01:22:23,670
reporter like this it should be already

01:22:21,090 --> 01:22:26,540
installed if you have a wao recorded

01:22:23,670 --> 01:22:29,670
somewhere in your dependencies and then

01:22:26,540 --> 01:22:34,230
you can extend from it and this gives

01:22:29,670 --> 01:22:38,400
you the ability to you know just listen

01:22:34,230 --> 01:22:40,650
immediately on on these events the way I

01:22:38,400 --> 01:22:43,230
will polish works is that they you know

01:22:40,650 --> 01:22:49,760
you can define various of reporter

01:22:43,230 --> 01:22:49,760
functions let's say on before command

01:22:50,900 --> 01:22:54,980
which will help you

01:22:55,449 --> 01:23:01,090
which want you to understand the command

01:22:58,929 --> 01:23:04,749
that is it is about to be executed and

01:23:01,090 --> 01:23:06,130
let's make let's say we want to find out

01:23:04,749 --> 01:23:08,289
how long every command

01:23:06,130 --> 01:23:11,530
well then let's let's let's just print

01:23:08,289 --> 01:23:16,059
out the map it's being executed so in

01:23:11,530 --> 01:23:19,479
order to find out what parameter so

01:23:16,059 --> 01:23:22,929
excited are expecting here because that

01:23:19,479 --> 01:23:31,030
seems to be not documented documented we

01:23:22,929 --> 01:23:34,840
just go into the into the project and be

01:23:31,030 --> 01:23:37,059
just search for it and I've made myself

01:23:34,840 --> 01:23:42,849
notes that this should be better

01:23:37,059 --> 01:23:44,739
documented we see the command here if

01:23:42,849 --> 01:23:46,780
you use typescript you will have already

01:23:44,739 --> 01:23:50,139
gotten this type support so I would not

01:23:46,780 --> 01:23:52,780
have to check but in this case the

01:23:50,139 --> 01:23:58,030
command contains method and endpoint

01:23:52,780 --> 01:24:04,690
body and the CID so I am just interested

01:23:58,030 --> 01:24:10,150
for the method which knowledge I mean to

01:24:04,690 --> 01:24:15,909
say in the body of the webcomic mat so

01:24:10,150 --> 01:24:20,110
to see what's being sent over tense

01:24:15,909 --> 01:24:23,650
being sent over to the web protocol to

01:24:20,110 --> 01:24:27,280
the rector to the driver so I know she

01:24:23,650 --> 01:24:29,789
it's weird that I don't get the command

01:24:27,280 --> 01:24:32,050
name itself but it's apparently that

01:24:29,789 --> 01:24:36,010
it's not working here

01:24:32,050 --> 01:24:39,999
so let's then just print out the body

01:24:36,010 --> 01:24:42,130
and integrate it to the spec so I just

01:24:39,999 --> 01:24:44,019
got a message in the shed can you use

01:24:42,130 --> 01:24:46,059
render our services in standalone mode

01:24:44,019 --> 01:24:49,449
that's unfortunately not possible

01:24:46,059 --> 01:24:52,659
because the test runner has all the

01:24:49,449 --> 01:24:55,389
logic to you know connect to reporters

01:24:52,659 --> 01:24:57,400
PVC vents and emit these events this is

01:24:55,389 --> 01:24:58,929
not totally not possible for whatever if

01:24:57,400 --> 01:25:02,050
you use it at seven OMA

01:24:58,929 --> 01:25:04,599
so if you write tests with reporters and

01:25:02,050 --> 01:25:07,929
services always use W ostendo and I

01:25:04,599 --> 01:25:11,500
never really never use

01:25:07,929 --> 01:25:14,800
and a framework and build you know your

01:25:11,500 --> 01:25:16,719
webdriver Io code around it because

01:25:14,800 --> 01:25:18,580
usually the rector of a test member

01:25:16,719 --> 01:25:22,780
takes a lot of things off from your

01:25:18,580 --> 01:25:25,270
shoulders so like for instance

01:25:22,780 --> 01:25:30,040
initiating the session creating reports

01:25:25,270 --> 01:25:32,860
for specific session IDs for specific

01:25:30,040 --> 01:25:35,170
browsers that run specific spec expect

01:25:32,860 --> 01:25:38,800
file which is really difficult to do if

01:25:35,170 --> 01:25:43,000
you you know use just marker to run your

01:25:38,800 --> 01:25:46,449
tests so here we can either not publish

01:25:43,000 --> 01:25:48,640
our package to NPM to provide this

01:25:46,449 --> 01:25:52,120
package to provide report to the

01:25:48,640 --> 01:25:57,790
community but what we do is we say

01:25:52,120 --> 01:26:00,760
custom reporter equals required and we

01:25:57,790 --> 01:26:03,310
would try our custom reporter and then

01:26:00,760 --> 01:26:09,100
all we need to do is to edit to the

01:26:03,310 --> 01:26:13,690
reporter list and this should be it so

01:26:09,100 --> 01:26:16,120
now it should print all the payload that

01:26:13,690 --> 01:26:20,100
has been sent to the chrome driver as a

01:26:16,120 --> 01:26:25,840
report so let's see let's do this

01:26:20,100 --> 01:26:30,489
calling MPX to be oregan is not a

01:26:25,840 --> 01:26:32,260
constructor okay so this usually means

01:26:30,489 --> 01:26:39,969
that I have to integrated this into one

01:26:32,260 --> 01:26:41,730
way let me see the dots okay you see

01:26:39,969 --> 01:26:45,219
when I get back

01:26:41,730 --> 01:26:49,719
custom reporter like supported module

01:26:45,219 --> 01:26:52,780
exports should be okay now this is a

01:26:49,719 --> 01:26:54,760
good thing about life coding and usually

01:26:52,780 --> 01:27:00,870
never works out so this should be the

01:26:54,760 --> 01:27:04,030
class there we go custom corner let's

01:27:00,870 --> 01:27:06,969
just for the sake of anticipation enough

01:27:04,030 --> 01:27:12,250
I don't have any options it should it

01:27:06,969 --> 01:27:14,469
should find that we can also just try

01:27:12,250 --> 01:27:16,679
something else a second let's just see

01:27:14,469 --> 01:27:22,500
what has to be put it is maybe I have

01:27:16,679 --> 01:27:22,500
exponent incorrectly let's see

01:27:23,330 --> 01:27:27,099
[Music]

01:27:24,659 --> 01:27:31,570
classic stance okay

01:27:27,099 --> 01:27:36,909
yeah I know what and so the WIA reporter

01:27:31,570 --> 01:27:40,809
is is exported as default so if I use

01:27:36,909 --> 01:27:46,139
require I need to set require aw order

01:27:40,809 --> 01:27:46,139
doctor taught so I can remove this and

01:27:47,070 --> 01:27:52,050
this about it now let's try it out

01:27:53,889 --> 01:28:02,590
okay we have a lot of rocks there that

01:27:56,050 --> 01:28:07,179
I've not good so let's say and we say

01:28:02,590 --> 01:28:11,860
here it's silent and you say that out of

01:28:07,179 --> 01:28:14,290
deer is it defined here we have an

01:28:11,860 --> 01:28:17,230
output here for for chromedriver

01:28:14,290 --> 01:28:22,360
but not for what gamma l so let's set

01:28:17,230 --> 01:28:24,159
this your name so output saying putting

01:28:22,360 --> 01:28:26,920
selling output here to the current

01:28:24,159 --> 01:28:31,960
directory will create wao lakhs instead

01:28:26,920 --> 01:28:36,010
of class or you know clustering your CLI

01:28:31,960 --> 01:28:38,889
your terminal so now it's all the

01:28:36,010 --> 01:28:43,510
cleaner and we see all the payloads that

01:28:38,889 --> 01:28:45,159
happen from the recorder and you see

01:28:43,510 --> 01:28:47,679
it's just a console a lock if we now

01:28:45,159 --> 01:28:52,780
want to connect this information to the

01:28:47,679 --> 01:28:59,260
reporter then we can modify and say this

01:28:52,780 --> 01:29:01,179
dot right instead of instead of

01:28:59,260 --> 01:29:03,940
controller lock this will connect the

01:29:01,179 --> 01:29:05,739
information to the report output instead

01:29:03,940 --> 01:29:08,980
of just printing it out to the terminal

01:29:05,739 --> 01:29:11,230
so if you want to have if you want to

01:29:08,980 --> 01:29:13,210
put all your locks into a file you can

01:29:11,230 --> 01:29:16,119
only do this by using the white command

01:29:13,210 --> 01:29:18,600
and so the reporting the main report

01:29:16,119 --> 01:29:22,380
knows how to deal with these information

01:29:18,600 --> 01:29:22,380
so now we have

01:29:23,790 --> 01:29:29,410
now with the speck important let's see

01:29:27,550 --> 01:29:32,380
there was no conflict on credit

01:29:29,410 --> 01:29:36,820
oh yeah we have one config file here the

01:29:32,380 --> 01:29:41,670
wao 0-0 custom Apollo reporter what a

01:29:36,820 --> 01:29:44,860
great name and we see all these objects

01:29:41,670 --> 01:29:54,130
here can make this a little bit nicer by

01:29:44,860 --> 01:30:05,110
saying and which this now it's better

01:29:54,130 --> 01:30:07,540
format so with this it is now better

01:30:05,110 --> 01:30:11,050
format and we see all the payload that

01:30:07,540 --> 01:30:15,070
has we used for the command to open ul

01:30:11,050 --> 01:30:20,160
to find we fed youth actually twice this

01:30:15,070 --> 01:30:23,170
selector how we entered the to do and

01:30:20,160 --> 01:30:25,930
yeah how we clicked on the toggle and so

01:30:23,170 --> 01:30:27,840
on you can do so much more with the

01:30:25,930 --> 01:30:30,280
reporter and building up your

01:30:27,840 --> 01:30:33,010
information and I would always you know

01:30:30,280 --> 01:30:35,440
recommend to extract all these

01:30:33,010 --> 01:30:39,610
information or extract all the reporters

01:30:35,440 --> 01:30:42,070
and all the report up code away from the

01:30:39,610 --> 01:30:44,650
wao config file so that you can just

01:30:42,070 --> 01:30:47,250
integrate you know your customer portal

01:30:44,650 --> 01:30:49,620
logic into a separated file and just

01:30:47,250 --> 01:30:54,640
integrate it by adding this to your

01:30:49,620 --> 01:30:57,310
reporters list give them we have with

01:30:54,640 --> 01:30:59,650
twenty minutes or even less than twenty

01:30:57,310 --> 01:31:02,160
minutes away from the end of the work of

01:30:59,650 --> 01:31:02,160
the session

01:31:02,340 --> 01:31:12,659
can we move on to the next chapter let's

01:31:07,380 --> 01:31:17,780
see where we at here this will move all

01:31:12,659 --> 01:31:20,310
this let's move to chapter 6

01:31:17,780 --> 01:31:22,139
again if you're you know if you're stuck

01:31:20,310 --> 01:31:24,540
with first chapter you always find the

01:31:22,139 --> 01:31:27,960
solution in the solution directory with

01:31:24,540 --> 01:31:31,949
all the results better than I have them

01:31:27,960 --> 01:31:36,900
done right now but let's move to chapter

01:31:31,949 --> 01:31:39,300
6 the sausage education and so in this

01:31:36,900 --> 01:31:42,690
chapter we want to run our test that is

01:31:39,300 --> 01:31:46,440
currently being run locally on their

01:31:42,690 --> 01:31:47,670
cloud vendor without doing much work so

01:31:46,440 --> 01:31:51,210
for that we want to add the sauce

01:31:47,670 --> 01:31:54,900
service to integrate better and add more

01:31:51,210 --> 01:31:57,630
capabilities to create a broader test

01:31:54,900 --> 01:31:59,520
coverage and as a bonus we want to run

01:31:57,630 --> 01:32:04,230
the test in the you data center instead

01:31:59,520 --> 01:32:06,389
of the yes so for that I create a new

01:32:04,230 --> 01:32:08,940
config file as I mentioned in my

01:32:06,389 --> 01:32:10,710
presentation it's important that you

01:32:08,940 --> 01:32:12,119
split up the config file based on the

01:32:10,710 --> 01:32:16,020
environments that you want to run your

01:32:12,119 --> 01:32:17,880
tests for if I want to you know for

01:32:16,020 --> 01:32:20,280
local testing all I need is the Chrome

01:32:17,880 --> 01:32:23,250
browser to see if my application works

01:32:20,280 --> 01:32:25,020
but in order to guarantee the test

01:32:23,250 --> 01:32:29,670
coverage on all the other browsers I

01:32:25,020 --> 01:32:31,710
want to run this on sauce labs and for

01:32:29,670 --> 01:32:38,130
that I create a custom configuration

01:32:31,710 --> 01:32:42,030
file here I require our current

01:32:38,130 --> 01:32:49,290
configuration file which is the ryokan

01:32:42,030 --> 01:32:53,250
and then export the config export a new

01:32:49,290 --> 01:32:56,190
config file that is based on the

01:32:53,250 --> 01:32:59,369
existing config file but I add new

01:32:56,190 --> 01:33:02,460
things to it one of the things is this

01:32:59,369 --> 01:33:04,110
or I modify the services so now I don't

01:33:02,460 --> 01:33:09,389
want to use Chrome browser anymore I

01:33:04,110 --> 01:33:11,520
want to use the saw service the nwo's

01:33:09,389 --> 01:33:14,030
sorceress let's install that package

01:33:11,520 --> 01:33:14,030
sweet quick

01:33:14,119 --> 01:33:22,550
and so nvme install @ws all service we

01:33:19,790 --> 01:33:25,540
have services for other vendors like

01:33:22,550 --> 01:33:28,610
browsers dec ably tools as well as

01:33:25,540 --> 01:33:36,739
testing test object and cross-browser

01:33:28,610 --> 01:33:40,520
testing I think so check Doc's here you

01:33:36,739 --> 01:33:42,020
have the list of all services the lambda

01:33:40,520 --> 01:33:47,000
tester is the thing is also to open

01:33:42,020 --> 01:33:52,070
their testing BOTS and cross-browser

01:33:47,000 --> 01:33:55,239
testing and process to alright so we

01:33:52,070 --> 01:33:58,159
have this saw service installed and now

01:33:55,239 --> 01:34:01,540
what we need to do is more capabilities

01:33:58,159 --> 01:34:07,010
we override that property and say

01:34:01,540 --> 01:34:12,409
capabilities we now want to run on the

01:34:07,010 --> 01:34:18,580
chrome janie on the chrome its platform

01:34:12,409 --> 01:34:23,540
version no platform name serine is

01:34:18,580 --> 01:34:30,130
Windows 10 and the browser version is

01:34:23,540 --> 01:34:30,130
latest and I want to have the same for

01:34:31,840 --> 01:34:46,449
Firefox Microsoft edge and Safari on Mac

01:34:46,989 --> 01:34:56,300
OS 10.30 okay and I don't need your over

01:34:52,369 --> 01:35:01,310
anything else let me see I think I will

01:34:56,300 --> 01:35:08,150
just keep the spec recorder for this use

01:35:01,310 --> 01:35:08,540
case so can we move this one and that's

01:35:08,150 --> 01:35:11,900
it

01:35:08,540 --> 01:35:15,110
there are they come the other properties

01:35:11,900 --> 01:35:16,610
and configuration stay the same and if

01:35:15,110 --> 01:35:18,860
you you know work like this where you

01:35:16,610 --> 01:35:22,449
have the base config it is also you know

01:35:18,860 --> 01:35:25,340
it would make sense to also copy out the

01:35:22,449 --> 01:35:28,030
the properties that you only want to use

01:35:25,340 --> 01:35:31,630
for local testing into a wao

01:35:28,030 --> 01:35:35,890
mobile.com studies so for now we use

01:35:31,630 --> 01:35:38,260
this sauce config and it would run the

01:35:35,890 --> 01:35:44,560
same test we have the service integrated

01:35:38,260 --> 01:35:48,430
and we're good to go so let me run this

01:35:44,560 --> 01:35:51,820
and instead of calling the default

01:35:48,430 --> 01:35:55,180
config file we now use this sauce config

01:35:51,820 --> 01:35:58,510
file there soon

01:35:55,180 --> 01:36:02,500
export yeah this is not right should be

01:35:58,510 --> 01:36:05,920
module exports no module no exports our

01:36:02,500 --> 01:36:09,060
country let me see um exports the topic

01:36:05,920 --> 01:36:09,060
say this year

01:36:11,450 --> 01:36:15,910
okay this okay

01:36:17,560 --> 01:36:26,240
so in the main config file we export

01:36:21,940 --> 01:36:28,640
conflict property so we also have to use

01:36:26,240 --> 01:36:30,850
the named import to get through this

01:36:28,640 --> 01:36:30,850
information

01:36:33,960 --> 01:36:38,489
there we go we get an error which is

01:36:35,850 --> 01:36:41,190
expected because a using key was not

01:36:38,489 --> 01:36:44,400
provided which is important if we want

01:36:41,190 --> 01:36:49,170
to use sources and so what we need to do

01:36:44,400 --> 01:36:51,390
is provide our username which we get

01:36:49,170 --> 01:36:53,340
from the which we should always should

01:36:51,390 --> 01:36:55,679
receive from the environment so in this

01:36:53,340 --> 01:36:58,949
case it's process environment sauce

01:36:55,679 --> 01:37:03,210
username and process environment sauce

01:36:58,949 --> 01:37:09,449
Texas key which I have in my environment

01:37:03,210 --> 01:37:13,860
already you can see here if you don't

01:37:09,449 --> 01:37:17,250
have it just exponent say sauce username

01:37:13,860 --> 01:37:20,460
and then write something but I already

01:37:17,250 --> 01:37:28,290
have it right there so this looks good

01:37:20,460 --> 01:37:30,949
if X is given using provide provided try

01:37:28,290 --> 01:37:30,949
one this again

01:37:31,300 --> 01:37:38,060
so it's at the same time for browser

01:37:36,080 --> 01:37:41,780
sessions are being started let's see if

01:37:38,060 --> 01:37:43,700
they in fact works in all browsers the

01:37:41,780 --> 01:37:47,810
same way so they all run in parallel

01:37:43,700 --> 01:37:49,949
right now Chrome passes Microsoft edge

01:37:47,810 --> 01:37:53,510
passes

01:37:49,949 --> 01:37:53,510
it's way to Firefox

01:37:58,800 --> 01:38:05,489
I honestly doubt the day will pass but

01:38:02,429 --> 01:38:07,500
we will see it take different language

01:38:05,489 --> 01:38:10,530
longer which is not a good sign we see

01:38:07,500 --> 01:38:14,280
now more log files here because we have

01:38:10,530 --> 01:38:18,030
now four workers so we see zero worker

01:38:14,280 --> 01:38:21,960
worker one two three and four

01:38:18,030 --> 01:38:25,070
worker one we can already see that the

01:38:21,960 --> 01:38:30,510
Firefox session is not being created and

01:38:25,070 --> 01:38:31,429
some reason Windows 10 and for the

01:38:30,510 --> 01:38:36,590
second

01:38:31,429 --> 01:38:39,179
we've also issues starting Safari on

01:38:36,590 --> 01:38:41,820
this machine on Mac OS maybe the

01:38:39,179 --> 01:38:46,199
environment is one so let's look into

01:38:41,820 --> 01:38:48,420
the platform configurator and get the

01:38:46,199 --> 01:38:51,360
right capabilities it's not always easy

01:38:48,420 --> 01:38:55,230
to get them right so that's why we have

01:38:51,360 --> 01:38:57,630
this configurator and let's see so we

01:38:55,230 --> 01:39:02,690
want to use webdriver on a PC for

01:38:57,630 --> 01:39:08,790
Firefox on Windows 10 let's see Firefox

01:39:02,690 --> 01:39:13,469
latest and use a node coach so we need

01:39:08,790 --> 01:39:17,270
to have browser version and Windows 10

01:39:13,469 --> 01:39:23,550
so 5 should look good and if we want to

01:39:17,270 --> 01:39:29,099
use Safari on Mac katalina 10 15 Safari

01:39:23,550 --> 01:39:33,420
latest I see a thing appeared problem

01:39:29,099 --> 01:39:38,280
now it's looking good I think this like

01:39:33,420 --> 01:39:41,040
this and we can write this small and so

01:39:38,280 --> 01:39:43,050
in order to stop sex curtly still and

01:39:41,040 --> 01:39:46,110
transitioning between the change Y

01:39:43,050 --> 01:39:49,260
protocol and the prepare protocol and to

01:39:46,110 --> 01:39:50,179
ensure that we use the weapon protocol

01:39:49,260 --> 01:39:55,590
at all times

01:39:50,179 --> 01:39:58,559
let's apply the sauce option which is so

01:39:55,590 --> 01:40:01,349
X the web graphics capability extension

01:39:58,559 --> 01:40:05,699
and just watch our sauce I use the

01:40:01,349 --> 01:40:10,699
background protocol please so it seemed

01:40:05,699 --> 01:40:10,699
to fail let's try this again

01:40:10,739 --> 01:40:27,350
I hope this will not work out if not I

01:40:21,330 --> 01:40:30,630
will wave my hands and leave it as is so

01:40:27,350 --> 01:40:35,580
Firefox is studying Chrome is already

01:40:30,630 --> 01:40:39,930
running and we have also safari now

01:40:35,580 --> 01:40:45,719
running which is good strip back with

01:40:39,930 --> 01:40:50,040
one failure and which is here in the

01:40:45,719 --> 01:40:53,280
tests just for Safari we can now you

01:40:50,040 --> 01:40:56,280
know have a look into the job and see

01:40:53,280 --> 01:40:58,710
why this has been failed thanks to you

01:40:56,280 --> 01:41:01,980
respect report automated text if you run

01:40:58,710 --> 01:41:05,130
your tests on saw steps and if you do so

01:41:01,980 --> 01:41:08,040
then you know it will print the job

01:41:05,130 --> 01:41:11,540
right there in the report so now we can

01:41:08,040 --> 01:41:14,300
check what happened actually and

01:41:11,540 --> 01:41:19,380
apparently there was no click happening

01:41:14,300 --> 01:41:21,469
which is unfortunate but something wrong

01:41:19,380 --> 01:41:23,730
with safari could be either that

01:41:21,469 --> 01:41:26,940
sapphire diamond did not probably kick

01:41:23,730 --> 01:41:29,640
on it or the application apparently does

01:41:26,940 --> 01:41:31,110
not work in Safari which I know but here

01:41:29,640 --> 01:41:33,390
we can check and see what's going on

01:41:31,110 --> 01:41:38,190
where the browser is located and with

01:41:33,390 --> 01:41:41,250
all the locks and our hands you know my

01:41:38,190 --> 01:41:43,580
thing nice thing is with the Cooper

01:41:41,250 --> 01:41:47,370
Tyrell and you can just switch the

01:41:43,580 --> 01:41:51,410
location of the data center by saying I

01:41:47,370 --> 01:41:54,570
want to reuse the region the EU region

01:41:51,410 --> 01:41:59,100
let's remove two of the cup abilities

01:41:54,570 --> 01:42:01,860
and so I say in region you the Ottoman

01:41:59,100 --> 01:42:07,550
lead now run the tests on the you data

01:42:01,860 --> 01:42:10,860
center we can also say to our service

01:42:07,550 --> 01:42:13,860
hey I want you run things on sauce

01:42:10,860 --> 01:42:17,880
connect so I say sauce connect are true

01:42:13,860 --> 01:42:21,050
and I want to my turn on identifier to

01:42:17,880 --> 01:42:23,940
be workshop

01:42:21,050 --> 01:42:26,130
so just by configurating this web

01:42:23,940 --> 01:42:28,680
developing the service will do

01:42:26,130 --> 01:42:30,930
everything for you and that needs to

01:42:28,680 --> 01:42:33,360
happen in order to download sauce

01:42:30,930 --> 01:42:36,510
connect now and to reply the tonal

01:42:33,360 --> 01:42:41,150
identifier to the tunnel as well as to

01:42:36,510 --> 01:42:41,150
all your capabilities to use so

01:42:43,000 --> 01:42:50,300
let's take a look at the chess but let's

01:42:47,570 --> 01:42:54,110
move on let's run these two capabilities

01:42:50,300 --> 01:42:59,770
and we can already see if we look into

01:42:54,110 --> 01:42:59,770
the logs now when I saw one

01:43:06,200 --> 01:43:11,760
it has not started these are the old

01:43:09,300 --> 01:43:14,760
looks it just started sauce Connect now

01:43:11,760 --> 01:43:17,000
it should be able to see that tunnel

01:43:14,760 --> 01:43:22,050
being opened

01:43:17,000 --> 01:43:26,880
so only tests already have been closed

01:43:22,050 --> 01:43:29,910
down but in my Lords I cannot see that

01:43:26,880 --> 01:43:32,220
the only material is now the new central

01:43:29,910 --> 01:43:35,430
one so automatically whatever was

01:43:32,220 --> 01:43:38,640
switched that on the manual for you to

01:43:35,430 --> 01:43:41,190
connect to the new data center and just

01:43:38,640 --> 01:43:44,250
to show you that it was actually running

01:43:41,190 --> 01:43:49,080
over tunnel it look into my thing she

01:43:44,250 --> 01:43:50,880
did not so these two now should have

01:43:49,080 --> 01:43:54,810
been run over the source connect tunnel

01:43:50,880 --> 01:43:57,210
which is important when you want to test

01:43:54,810 --> 01:44:02,610
when your applications behind your

01:43:57,210 --> 01:44:04,890
network your corporate network I think

01:44:02,610 --> 01:44:06,600
we're at the end of our time we have

01:44:04,890 --> 01:44:10,640
five minutes to go it's the last chance

01:44:06,600 --> 01:44:13,680
for you all to have a last question or

01:44:10,640 --> 01:44:17,360
just let me know if I you got a few you

01:44:13,680 --> 01:44:20,010
know I've just you know if you just

01:44:17,360 --> 01:44:22,950
participated and when I have time that's

01:44:20,010 --> 01:44:26,820
awesome as well because you can always

01:44:22,950 --> 01:44:29,190
go back it's on github didn't get up of

01:44:26,820 --> 01:44:32,100
comes - Christian - program - but the

01:44:29,190 --> 01:44:36,240
real hands-on you can always go there

01:44:32,100 --> 01:44:38,610
and run these XM or section and chapters

01:44:36,240 --> 01:44:41,130
for yourself if you have questions don't

01:44:38,610 --> 01:44:43,560
hesitate to raise an issue or come to

01:44:41,130 --> 01:44:48,000
the red devil support channel that you

01:44:43,560 --> 01:44:50,000
can find at the bottom of our page right

01:44:48,000 --> 01:44:52,560
there

01:44:50,000 --> 01:44:55,860
where we as contributor I can help you

01:44:52,560 --> 01:44:58,830
out and you know and help you to

01:44:55,860 --> 01:45:01,500
understand what's going on in your test

01:44:58,830 --> 01:45:03,870
and when you apply whatever to your

01:45:01,500 --> 01:45:07,890
project we also can help you out you

01:45:03,870 --> 01:45:10,160
know if you see any errors and similar

01:45:07,890 --> 01:45:10,160
things

01:45:10,659 --> 01:45:18,770
so again last opportunity to ask

01:45:15,679 --> 01:45:22,480
questions on the workshop before we

01:45:18,770 --> 01:45:25,590
close the session or on the presentation

01:45:22,480 --> 01:45:25,590
[Music]

01:45:30,280 --> 01:45:36,770
thanks for sharing yeah I think the next

01:45:34,730 --> 01:45:41,870
chapters will be much more interesting

01:45:36,770 --> 01:45:44,750
where you go and move your application

01:45:41,870 --> 01:45:47,320
to use the to do an edit to the page

01:45:44,750 --> 01:45:50,810
object pattern and so your tests look

01:45:47,320 --> 01:45:56,360
like this which looks much nicer than

01:45:50,810 --> 01:45:58,280
before and then you integrate visual

01:45:56,360 --> 01:46:02,870
regression testing using at the tools

01:45:58,280 --> 01:46:08,179
and the last chapter will be about hands

01:46:02,870 --> 01:46:11,120
testing I see can we see parallel

01:46:08,179 --> 01:46:13,969
execution as we were already running

01:46:11,120 --> 01:46:16,100
this in parallel while we were running

01:46:13,969 --> 01:46:20,420
our test once all set as well as I mean

01:46:16,100 --> 01:46:22,940
we can do it locally just to give you an

01:46:20,420 --> 01:46:25,909
idea so this is the our main competition

01:46:22,940 --> 01:46:29,780
configured to run locally and instead of

01:46:25,909 --> 01:46:38,600
one browser we define just two browsers

01:46:29,780 --> 01:46:41,409
just copy that and if we run this here

01:46:38,600 --> 01:46:42,890
we should see two browsers spinning up

01:46:41,409 --> 01:46:45,830
there we go

01:46:42,890 --> 01:46:48,170
webdiver automatically runs test pal for

01:46:45,830 --> 01:46:50,350
you so you don't need to worry about

01:46:48,170 --> 01:46:50,350
that

01:46:53,420 --> 01:47:00,600
the network marketer is I can go into

01:46:56,250 --> 01:47:04,350
that for the last two minutes and

01:47:00,600 --> 01:47:07,590
looking at the curly it's not that easy

01:47:04,350 --> 01:47:11,490
to be honest to use network modeling and

01:47:07,590 --> 01:47:14,190
stubbing there is an example for that in

01:47:11,490 --> 01:47:19,400
the example directory actually so let's

01:47:14,190 --> 01:47:24,530
go into directory and go into examples

01:47:19,400 --> 01:47:32,310
dev tools and here you have an intercept

01:47:24,530 --> 01:47:33,750
actually no this is not using that we

01:47:32,310 --> 01:47:35,880
have an intercept service that you can

01:47:33,750 --> 01:47:38,430
use I think with the current one it's

01:47:35,880 --> 01:47:42,990
not really possible to mark Network

01:47:38,430 --> 01:47:46,500
requests however there is a proposal in

01:47:42,990 --> 01:47:48,000
place to implement that and I'm super

01:47:46,500 --> 01:47:51,440
excited about this I will show you that

01:47:48,000 --> 01:47:56,970
from the second that allows you to

01:47:51,440 --> 01:47:59,910
network mocking go here it will allow

01:47:56,970 --> 01:48:01,800
you to mock network requests with this

01:47:59,910 --> 01:48:05,670
new interface with the network interface

01:48:01,800 --> 01:48:09,960
where you can define a URL with a glob

01:48:05,670 --> 01:48:11,910
pattern and you then just tell how it

01:48:09,960 --> 01:48:14,010
should return if it's returned the

01:48:11,910 --> 01:48:16,620
custom respond or if it should be

01:48:14,010 --> 01:48:19,620
redirect to something and if it you know

01:48:16,620 --> 01:48:22,410
we turn once this stuff and this object

01:48:19,620 --> 01:48:24,810
and then with the next week rest should

01:48:22,410 --> 01:48:27,510
return something else it is it will be

01:48:24,810 --> 01:48:29,550
really flexible for you to mark what

01:48:27,510 --> 01:48:32,040
network requests and it will be is

01:48:29,550 --> 01:48:35,360
supported in Chrome Firefox nightly

01:48:32,040 --> 01:48:39,660
Microsoft edge as well as testing

01:48:35,360 --> 01:48:42,240
running things on sauce maps so that

01:48:39,660 --> 01:48:44,880
will come up soon then what we can be

01:48:42,240 --> 01:48:47,910
working on and there's more just check

01:48:44,880 --> 01:48:50,070
out already this and you know if you

01:48:47,910 --> 01:48:53,160
want to help us contribute find

01:48:50,070 --> 01:48:57,170
something in the you know world map or I

01:48:53,160 --> 01:49:00,390
would recommend to just filter these the

01:48:57,170 --> 01:49:02,490
the issues to first time i solving and

01:49:00,390 --> 01:49:05,370
with that we are out of time and thank

01:49:02,490 --> 01:49:06,270
you so much for participating in the

01:49:05,370 --> 01:49:10,340
workshop

01:49:06,270 --> 01:49:10,340

YouTube URL: https://www.youtube.com/watch?v=H5Nw2mh7AmE


