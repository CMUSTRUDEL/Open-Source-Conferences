Title: Possible Tools: The Present & Future of Tooling in Node.js - Christopher Hiller, IBM
Publication date: 2020-06-22
Playlist: OpenJS World 2020
Description: 
	
Captions: 
	00:00:00,800 --> 00:00:06,810
hi I'm Chris Hiller this talk is

00:00:04,350 --> 00:00:12,139
possible tools the president and future

00:00:06,810 --> 00:00:12,139
of tooling and nodejs so let's get to it

00:00:13,219 --> 00:00:17,430
so again the title of this talk is

00:00:15,360 --> 00:00:21,720
possible tools the president and future

00:00:17,430 --> 00:00:23,670
of tooling and nodejs so my name is

00:00:21,720 --> 00:00:27,380
Chris Hiller I'm a developer advocate at

00:00:23,670 --> 00:00:31,650
IBM I go by bone skull on the Internet

00:00:27,380 --> 00:00:33,780
I'm a node.js core collaborator I help

00:00:31,650 --> 00:00:36,540
maintain MOCA which is a testing

00:00:33,780 --> 00:00:38,700
framework that some people use I'm also

00:00:36,540 --> 00:00:41,399
an open J's Foundation cross-project

00:00:38,700 --> 00:00:44,520
council voting member and finally I am

00:00:41,399 --> 00:00:49,680
often a panelist on a fun podcast called

00:00:44,520 --> 00:00:52,199
Jas party my avatar is displayed here

00:00:49,680 --> 00:00:56,899
it's a smirking orange skull within a

00:00:52,199 --> 00:01:00,270
black circle so I'd like to start by

00:00:56,899 --> 00:01:03,840
defining what what nodejs is I'm sure

00:01:00,270 --> 00:01:06,450
you're all familiar with it but let's

00:01:03,840 --> 00:01:09,960
get it from the horse's mouth so I went

00:01:06,450 --> 00:01:12,630
to the node.js org website and I click

00:01:09,960 --> 00:01:15,240
through to the about page and I read the

00:01:12,630 --> 00:01:17,670
text and it said blah blah blah node.js

00:01:15,240 --> 00:01:23,220
is designed to build scalable Network

00:01:17,670 --> 00:01:26,490
applications blah blah blah blah so you

00:01:23,220 --> 00:01:29,700
know that meme on Twitter the the

00:01:26,490 --> 00:01:31,020
narrator mean right where yeah you say

00:01:29,700 --> 00:01:33,450
you're doing something and then the

00:01:31,020 --> 00:01:36,560
narrator pops in and it says how it

00:01:33,450 --> 00:01:39,509
really is well here's the narrator mean

00:01:36,560 --> 00:01:43,680
it was mostly not used to build scalable

00:01:39,509 --> 00:01:45,329
Network applications so what do I the

00:01:43,680 --> 00:01:50,369
narrator what does the narrator mean by

00:01:45,329 --> 00:01:52,490
this well the narrator means nodejs

00:01:50,369 --> 00:01:54,479
builds the web

00:01:52,490 --> 00:01:57,689
this shouldn't be a controversial

00:01:54,479 --> 00:02:00,990
statement so we have data we know that

00:01:57,689 --> 00:02:04,350
people mostly use node to help build

00:02:00,990 --> 00:02:06,829
websites they use it for what developer

00:02:04,350 --> 00:02:11,869
tooling right they use it for bundling

00:02:06,829 --> 00:02:11,869
testing linting all sorts of things

00:02:12,019 --> 00:02:18,739
so here's the more controversial

00:02:15,060 --> 00:02:22,709
statement nodejs is a tooling framework

00:02:18,739 --> 00:02:25,680
now it may not have been designed to be

00:02:22,709 --> 00:02:30,150
a tooling framework but that's kind of

00:02:25,680 --> 00:02:33,719
where we're at so there's kind of a

00:02:30,150 --> 00:02:36,269
problem here I think and I've given you

00:02:33,719 --> 00:02:38,760
this problem in need now I may not make

00:02:36,269 --> 00:02:41,040
too much sense but it's a name call this

00:02:38,760 --> 00:02:44,879
the nodejs server tooling impedance

00:02:41,040 --> 00:02:48,469
mismatch and so you may have heard of a

00:02:44,879 --> 00:02:51,840
a similar term which is the

00:02:48,469 --> 00:02:55,139
object-relational impedance mismatch and

00:02:51,840 --> 00:02:56,549
so this term I just made up and so the

00:02:55,139 --> 00:02:58,590
deal behind the object really should

00:02:56,549 --> 00:03:01,560
only put in two mismatches it's

00:02:58,590 --> 00:03:03,900
difficult to map the concepts of a

00:03:01,560 --> 00:03:05,790
relational database to an

00:03:03,900 --> 00:03:10,730
object-oriented programming language and

00:03:05,790 --> 00:03:14,129
vice versa so if you've ever used an ORM

00:03:10,730 --> 00:03:18,479
you're probably you've probably have

00:03:14,129 --> 00:03:22,859
felt this problem you know we can think

00:03:18,479 --> 00:03:27,150
of objects in a programming language as

00:03:22,859 --> 00:03:30,139
a graph or a hierarchy well instead the

00:03:27,150 --> 00:03:33,299
data in a relational database is tabular

00:03:30,139 --> 00:03:35,819
so in a relational database there's no

00:03:33,299 --> 00:03:38,129
notion of a class there's no notion of

00:03:35,819 --> 00:03:41,129
encapsulation there's no concept of

00:03:38,129 --> 00:03:43,919
inheritance or polymorphism there's

00:03:41,129 --> 00:03:46,229
there's no pointer for example so you

00:03:43,919 --> 00:03:47,970
might have a foreign key but it's it's

00:03:46,229 --> 00:03:52,859
not like a real reference it's not a

00:03:47,970 --> 00:03:55,109
pointer so in the case of nodejs you

00:03:52,859 --> 00:03:57,060
have this core and this core was

00:03:55,109 --> 00:04:01,639
designed to serve Network applications

00:03:57,060 --> 00:04:04,949
that's what it was built to do but

00:04:01,639 --> 00:04:08,489
that's not what it turned out people

00:04:04,949 --> 00:04:11,189
were going to use it for and so because

00:04:08,489 --> 00:04:13,349
of this you know no it lacks this

00:04:11,189 --> 00:04:17,310
foundation it lacks some first-class

00:04:13,349 --> 00:04:19,440
support for building tools and happily

00:04:17,310 --> 00:04:22,990
people went and they started building

00:04:19,440 --> 00:04:25,810
tools anyway but

00:04:22,990 --> 00:04:27,550
you know that's kind of where we're at

00:04:25,810 --> 00:04:29,860
now

00:04:27,550 --> 00:04:32,590
unlike the object-relational impedance

00:04:29,860 --> 00:04:36,610
mismatch which is sort of a wicked

00:04:32,590 --> 00:04:40,500
problem if you will the node.js server

00:04:36,610 --> 00:04:44,949
towing impedance mismatch can be solved

00:04:40,500 --> 00:04:48,250
so if you were hoping for me to talk

00:04:44,949 --> 00:04:52,720
about you know why why it is the way it

00:04:48,250 --> 00:04:55,840
is like why it started as this this

00:04:52,720 --> 00:04:57,729
network this platform for billing

00:04:55,840 --> 00:05:00,490
network applications and ended up as it

00:04:57,729 --> 00:05:02,680
as a tooling platform well I'm not gonna

00:05:00,490 --> 00:05:06,750
I'm not going to go into or speculate

00:05:02,680 --> 00:05:10,240
why why it is the way it is why why node

00:05:06,750 --> 00:05:13,660
invested so much in the in the network

00:05:10,240 --> 00:05:15,310
allocation side of things but you know

00:05:13,660 --> 00:05:16,509
this is where we're at right now and

00:05:15,310 --> 00:05:18,460
that's what I want to talk about this

00:05:16,509 --> 00:05:20,770
the title of this talk does not say the

00:05:18,460 --> 00:05:25,360
past its present future and that's what

00:05:20,770 --> 00:05:29,889
I'm going to talk about so what can we

00:05:25,360 --> 00:05:32,020
do about this you may not have heard of

00:05:29,889 --> 00:05:33,699
the nodejs tooling group but there is a

00:05:32,020 --> 00:05:38,199
thing and it is called the node.js

00:05:33,699 --> 00:05:39,610
tooling group and it is a official group

00:05:38,199 --> 00:05:44,169
not not a working group but it's

00:05:39,610 --> 00:05:45,430
official in in the nodejs org to the

00:05:44,169 --> 00:05:48,340
right here you're going to see some art

00:05:45,430 --> 00:05:51,310
it's a Trojan horse and the joke here is

00:05:48,340 --> 00:05:55,830
that you know the tooling group wants to

00:05:51,310 --> 00:05:58,389
work with in node core to improve

00:05:55,830 --> 00:06:01,360
improve things for for tooling authors

00:05:58,389 --> 00:06:02,979
and consumers of tools and so we're

00:06:01,360 --> 00:06:05,169
going to get we're going to get in a

00:06:02,979 --> 00:06:07,650
node core and we're going to you know

00:06:05,169 --> 00:06:10,630
fix us from the inside out

00:06:07,650 --> 00:06:13,360
so not really a declaration of war but

00:06:10,630 --> 00:06:18,370
you know we we need to we need to change

00:06:13,360 --> 00:06:19,840
things at the node core level so let me

00:06:18,370 --> 00:06:22,680
talk a little bit about the node.js

00:06:19,840 --> 00:06:22,680
tooling group

00:06:22,960 --> 00:06:30,740
so this group was formed in 2018 myself

00:06:28,220 --> 00:06:32,870
and some others I had talked to some

00:06:30,740 --> 00:06:34,280
people in the community and we all

00:06:32,870 --> 00:06:36,680
shared a lot of the same frustrations

00:06:34,280 --> 00:06:40,490
and so we thought we should try to come

00:06:36,680 --> 00:06:44,140
together as one mind and and help solve

00:06:40,490 --> 00:06:47,720
this so some of the members in the group

00:06:44,140 --> 00:06:48,800
you we have maintained errs of NPM mocha

00:06:47,720 --> 00:06:52,030
that's me

00:06:48,800 --> 00:06:57,140
we have maintained errs of Istanbul NYC

00:06:52,030 --> 00:07:00,950
yards create react app these are popular

00:06:57,140 --> 00:07:05,450
tools and libraries some of us are known

00:07:00,950 --> 00:07:07,640
core collaborators it's an active group

00:07:05,450 --> 00:07:10,060
we've got features under our belt

00:07:07,640 --> 00:07:12,640
you know our members have have gotten

00:07:10,060 --> 00:07:14,930
gotten things in we have current

00:07:12,640 --> 00:07:16,970
initiatives we have ongoing initiatives

00:07:14,930 --> 00:07:20,740
and and some future pie in the sky stuff

00:07:16,970 --> 00:07:23,510
and we're gonna talk about these later

00:07:20,740 --> 00:07:28,070
we have a slack if you want to chat it's

00:07:23,510 --> 00:07:30,710
no - tooling slack calm go and sign up

00:07:28,070 --> 00:07:33,560
for that and pop in and there are

00:07:30,710 --> 00:07:36,050
channels for various tools like there's

00:07:33,560 --> 00:07:38,780
an NYC channel a yards channel and NPM

00:07:36,050 --> 00:07:40,370
channel etc so a lot of us gather in

00:07:38,780 --> 00:07:44,360
there and talk about building these

00:07:40,370 --> 00:07:47,150
tools we have open meetings every other

00:07:44,360 --> 00:07:48,560
week meaning that if you want to come

00:07:47,150 --> 00:07:52,040
and participate you can come and

00:07:48,560 --> 00:07:54,080
participate and so the those meetings

00:07:52,040 --> 00:07:57,560
will be there will be an issue in that

00:07:54,080 --> 00:08:01,610
github repository which is again nodejs

00:07:57,560 --> 00:08:05,600
ford slash - line also we stream these

00:08:01,610 --> 00:08:06,980
meetings on youtube so you know if you

00:08:05,600 --> 00:08:11,990
don't want to participate you just want

00:08:06,980 --> 00:08:14,360
to watch you can just watch there's

00:08:11,990 --> 00:08:16,700
actually going to be a meeting here at

00:08:14,360 --> 00:08:18,440
the open J's collaborators summit not

00:08:16,700 --> 00:08:20,660
not here here because this is open

00:08:18,440 --> 00:08:22,520
Jeff's world but after opening s World

00:08:20,660 --> 00:08:25,250
News this collaborator summit going on

00:08:22,520 --> 00:08:29,330
and we're gonna have a meeting there so

00:08:25,250 --> 00:08:31,220
might want to check out schedule and see

00:08:29,330 --> 00:08:33,880
what time zone that's in wherever you

00:08:31,220 --> 00:08:36,260
are and come check us out if you're

00:08:33,880 --> 00:08:40,250
interested in building tools or if

00:08:36,260 --> 00:08:41,750
or a consumer of tools and really have

00:08:40,250 --> 00:08:44,960
some ideas about how things could be

00:08:41,750 --> 00:08:46,400
better but whoever you are and if you're

00:08:44,960 --> 00:08:52,040
involved in building tools with node

00:08:46,400 --> 00:08:54,560
we'd love to hear from you so next I

00:08:52,040 --> 00:08:57,610
want to talk about a few things that we

00:08:54,560 --> 00:09:00,950
have done so far

00:08:57,610 --> 00:09:02,420
so these are some completed initiatives

00:09:00,950 --> 00:09:05,900
that are that our members have brought

00:09:02,420 --> 00:09:09,860
to to node we have recursive file system

00:09:05,900 --> 00:09:13,370
operations so make during render we have

00:09:09,860 --> 00:09:16,130
native source map support which is which

00:09:13,370 --> 00:09:20,140
is still experimental I think but maybe

00:09:16,130 --> 00:09:23,510
not soon native code coverage support

00:09:20,140 --> 00:09:25,370
that's that's improving again these

00:09:23,510 --> 00:09:26,840
these have landed but you know there's

00:09:25,370 --> 00:09:28,880
room for improvement some of these we

00:09:26,840 --> 00:09:32,330
have flag introspection which is useful

00:09:28,880 --> 00:09:35,750
if you want to if you're a tool that

00:09:32,330 --> 00:09:38,330
needs to spawn other node processes or

00:09:35,750 --> 00:09:43,400
you want to pass node flags through

00:09:38,330 --> 00:09:45,110
using your command line tool and now

00:09:43,400 --> 00:09:45,740
this is not known core but in my mind

00:09:45,110 --> 00:09:49,120
it's close enough

00:09:45,740 --> 00:09:52,580
NPM workspaces are landing soon which

00:09:49,120 --> 00:09:54,590
sounds pretty cool if you are familiar

00:09:52,580 --> 00:09:58,520
with yarn workspaces and p.m. workspaces

00:09:54,590 --> 00:10:02,300
are similar and I'm excited about that

00:09:58,520 --> 00:10:04,850
because I have a mono repo that I could

00:10:02,300 --> 00:10:07,940
really use some sort of workspace going

00:10:04,850 --> 00:10:09,470
on there so that should land I'm not

00:10:07,940 --> 00:10:14,120
sure when exactly maybe in the next

00:10:09,470 --> 00:10:18,530
major of NPM so that's what we've done

00:10:14,120 --> 00:10:20,770
again the way we work is we kind of come

00:10:18,530 --> 00:10:23,090
together and we just say hey you know I

00:10:20,770 --> 00:10:25,670
find this to be a problem what do you

00:10:23,090 --> 00:10:28,280
all think and other people agree yes

00:10:25,670 --> 00:10:30,080
this is a problem and how can we make

00:10:28,280 --> 00:10:32,600
this better and so we brainstorm we

00:10:30,080 --> 00:10:35,540
think about it ultimately it's up to the

00:10:32,600 --> 00:10:37,430
individual so somebody has to send a

00:10:35,540 --> 00:10:40,850
pull request somebody has to write the

00:10:37,430 --> 00:10:43,510
code and just get it done we don't have

00:10:40,850 --> 00:10:47,180
have a roadmap per se we have

00:10:43,510 --> 00:10:48,769
essentially a list of initiatives that

00:10:47,180 --> 00:10:50,749
we'd like to look at and whether

00:10:48,769 --> 00:10:54,100
anybody is working on any of these at

00:10:50,749 --> 00:10:57,499
any given time you know who knows but

00:10:54,100 --> 00:10:59,540
you know we don't we don't come in and

00:10:57,499 --> 00:11:01,759
say you there you in the stoolie group

00:10:59,540 --> 00:11:04,040
must spend time doing this particular

00:11:01,759 --> 00:11:08,029
initiative that's not how we work that's

00:11:04,040 --> 00:11:09,649
not how nodejs works no roadmap just you

00:11:08,029 --> 00:11:14,239
know whatever we all think is important

00:11:09,649 --> 00:11:15,920
that's what gets done so now let me talk

00:11:14,239 --> 00:11:21,579
a little bit about our current

00:11:15,920 --> 00:11:21,579
initiatives in the no js' tooling group

00:11:22,269 --> 00:11:29,569
first one is loadable modules maybe

00:11:26,569 --> 00:11:32,360
there's a better name for it but here's

00:11:29,569 --> 00:11:34,759
the deal with with that so you can't

00:11:32,360 --> 00:11:38,779
easily reload an es module like you

00:11:34,759 --> 00:11:41,449
would a common j/s module so you can't

00:11:38,779 --> 00:11:44,209
go in and mess with the required cash

00:11:41,449 --> 00:11:48,110
there's no API for it you just you can't

00:11:44,209 --> 00:11:51,529
really do it without without hacks so

00:11:48,110 --> 00:11:54,949
what this does is it inhibits tune it

00:11:51,529 --> 00:11:57,649
inhibits module level mocks so if you're

00:11:54,949 --> 00:12:00,319
using a library like proxy choir or

00:11:57,649 --> 00:12:01,339
rewire MOC you're gonna have trouble

00:12:00,319 --> 00:12:03,679
with those

00:12:01,339 --> 00:12:05,749
yes modules because I mean it's just

00:12:03,679 --> 00:12:10,910
it's not going to work because once the

00:12:05,749 --> 00:12:13,249
modules in you can't change it it

00:12:10,910 --> 00:12:16,610
inhibits tools that need to watch files

00:12:13,249 --> 00:12:20,990
and reload them so maybe that's a test

00:12:16,610 --> 00:12:22,819
runner or something and I think right

00:12:20,990 --> 00:12:27,350
now not a lot of people are really

00:12:22,819 --> 00:12:31,999
feeling this pain and as more developers

00:12:27,350 --> 00:12:34,639
start creating new packages using ESM

00:12:31,999 --> 00:12:37,100
and nodejs there this is going to start

00:12:34,639 --> 00:12:40,540
to come up a lot more so there is a

00:12:37,100 --> 00:12:43,040
little bit of urgency to to address this

00:12:40,540 --> 00:12:45,410
because it's just it's not going to work

00:12:43,040 --> 00:12:48,379
like you want it to it's not going to

00:12:45,410 --> 00:12:53,720
work like how it worked before was

00:12:48,379 --> 00:12:55,579
commonjs and so to solve this we need to

00:12:53,720 --> 00:13:00,399
collaborate with the node.js modules

00:12:55,579 --> 00:13:04,439
working group you know maybe even v8

00:13:00,399 --> 00:13:06,850
the v8 team at Google but yes so this is

00:13:04,439 --> 00:13:10,269
this is kind of going to be a bigger

00:13:06,850 --> 00:13:12,999
deal as more people start to adopt yes

00:13:10,269 --> 00:13:18,370
modules so we need to get this one

00:13:12,999 --> 00:13:22,089
solved next one is my favorite argument

00:13:18,370 --> 00:13:26,470
parsing so you know processed arc V dot

00:13:22,089 --> 00:13:28,420
slice - which is a really kind of ugly

00:13:26,470 --> 00:13:31,420
way to try to get at your your

00:13:28,420 --> 00:13:33,699
command-line arguments so I think node

00:13:31,420 --> 00:13:37,360
can do better and I think it can do

00:13:33,699 --> 00:13:41,470
better with a very minimal API and

00:13:37,360 --> 00:13:45,610
provide a lot of value so this would

00:13:41,470 --> 00:13:48,430
have a bare minimum of features so very

00:13:45,610 --> 00:13:51,339
very simple stuff maybe like one option

00:13:48,430 --> 00:13:55,360
or something the use cases here that

00:13:51,339 --> 00:13:59,740
we'd be focusing on we want this to be

00:13:55,360 --> 00:14:03,100
good for simple tools code examples you

00:13:59,740 --> 00:14:06,610
know learning materials or one-offs

00:14:03,100 --> 00:14:10,569
where you have a server or something and

00:14:06,610 --> 00:14:13,360
you need to just quickly add a flag or

00:14:10,569 --> 00:14:16,600
two now that quickly little snowball if

00:14:13,360 --> 00:14:19,319
if you've tried it trying to parse

00:14:16,600 --> 00:14:23,980
things and and and all sorts of stuff so

00:14:19,319 --> 00:14:28,089
I think a little nice straightforward

00:14:23,980 --> 00:14:31,029
API could could go a long way here so

00:14:28,089 --> 00:14:34,089
I'm looking to get this done right now

00:14:31,029 --> 00:14:36,009
we have some some pretty solid ideas

00:14:34,089 --> 00:14:39,579
about how this should look and and to

00:14:36,009 --> 00:14:44,559
the right here we see an example the

00:14:39,579 --> 00:14:46,329
array that you see foo bar Baz that that

00:14:44,559 --> 00:14:52,300
array is similar to what you would get

00:14:46,329 --> 00:14:54,189
in processed RV that slice - so by

00:14:52,300 --> 00:14:56,139
default maybe it'll just use that but

00:14:54,189 --> 00:14:59,740
you could you could give it your your

00:14:56,139 --> 00:15:02,589
own array of command-line options and

00:14:59,740 --> 00:15:04,899
it's going to return an object and

00:15:02,589 --> 00:15:07,990
object will have keys based on the the

00:15:04,899 --> 00:15:10,589
options and values as appropriate or

00:15:07,990 --> 00:15:13,350
maybe they're just flags and then that

00:15:10,589 --> 00:15:17,190
underscore there you see that

00:15:13,350 --> 00:15:19,170
is a positional argument so basically

00:15:17,190 --> 00:15:21,360
it's just an argument without dashes or

00:15:19,170 --> 00:15:23,400
anything in front and that's kind of a

00:15:21,360 --> 00:15:27,110
convention that other libraries have

00:15:23,400 --> 00:15:30,660
used now this is not expected to replace

00:15:27,110 --> 00:15:33,690
the user land libraries that were

00:15:30,660 --> 00:15:37,110
already using to parse arguments like

00:15:33,690 --> 00:15:40,620
yards or Commander those are much more

00:15:37,110 --> 00:15:43,500
full-featured and if you're reaching for

00:15:40,620 --> 00:15:44,970
those right now you know you might be

00:15:43,500 --> 00:15:49,020
able to get away with something like

00:15:44,970 --> 00:15:51,750
this but again those those are those are

00:15:49,020 --> 00:15:53,400
going to give you so much more than what

00:15:51,750 --> 00:15:56,280
we can do here so it's not really

00:15:53,400 --> 00:15:59,490
intended to be an API that you would

00:15:56,280 --> 00:16:02,070
want to build on top of but more

00:15:59,490 --> 00:16:05,160
something that a user can just just pull

00:16:02,070 --> 00:16:11,310
in and use directly without having to go

00:16:05,160 --> 00:16:14,910
and reach for a package on NPM the next

00:16:11,310 --> 00:16:18,540
one is is is a rather large kind of

00:16:14,910 --> 00:16:20,190
cross-cutting initiative I don't have a

00:16:18,540 --> 00:16:24,500
good name for it so I'm gonna call it

00:16:20,190 --> 00:16:28,140
ultimate mega hooks and so the idea is

00:16:24,500 --> 00:16:30,750
you don't want a monkey patch stuff in

00:16:28,140 --> 00:16:35,370
in node itself you don't want to go in

00:16:30,750 --> 00:16:39,120
and replace things in the FS module for

00:16:35,370 --> 00:16:41,250
example and there are Muse relay modules

00:16:39,120 --> 00:16:42,990
that do this and they do it by necessity

00:16:41,250 --> 00:16:45,380
because there's no other way to

00:16:42,990 --> 00:16:50,310
accomplish what they're trying to do and

00:16:45,380 --> 00:16:52,560
so the from several different areas

00:16:50,310 --> 00:16:55,590
several different teams within note have

00:16:52,560 --> 00:16:58,500
identified that look we need some way to

00:16:55,590 --> 00:17:04,530
hook in to built-ins we need some way to

00:16:58,500 --> 00:17:06,630
either you know change something that a

00:17:04,530 --> 00:17:09,080
function is returning we need some way

00:17:06,630 --> 00:17:12,000
to tell if a function has been called

00:17:09,080 --> 00:17:15,530
you know we want to spy on a function

00:17:12,000 --> 00:17:17,850
call that sort of thing and so there's

00:17:15,530 --> 00:17:21,000
because you know several different teams

00:17:17,850 --> 00:17:24,960
like diagnostic security and tooling we

00:17:21,000 --> 00:17:26,449
all recognized that this was a need for

00:17:24,960 --> 00:17:28,880
different reasons

00:17:26,449 --> 00:17:32,240
so if you're building a tool like a

00:17:28,880 --> 00:17:36,370
package manager like a yarn or an NPM

00:17:32,240 --> 00:17:39,919
you might want to do something I it's

00:17:36,370 --> 00:17:41,990
plug and play right so plug and play the

00:17:39,919 --> 00:17:44,389
idea is that it kind of downloads stuff

00:17:41,990 --> 00:17:48,110
on the fly for you but what it does to

00:17:44,389 --> 00:17:51,200
accomplish that is it it it MUX with

00:17:48,110 --> 00:17:54,169
nodes module resolution and sort of

00:17:51,200 --> 00:17:56,269
gives you this this phony file system

00:17:54,169 --> 00:17:57,710
and so right now to accomplish that you

00:17:56,269 --> 00:18:00,710
have to go in and you need to monkey

00:17:57,710 --> 00:18:02,210
patch built-ins and of course the reason

00:18:00,710 --> 00:18:05,690
you don't want to do that is because it

00:18:02,210 --> 00:18:07,880
can break stuff so you know if if we

00:18:05,690 --> 00:18:11,779
have something in here a hook where you

00:18:07,880 --> 00:18:13,789
could go in and attach this hook and you

00:18:11,779 --> 00:18:16,639
know do it in a way that is not going to

00:18:13,789 --> 00:18:18,980
leak out or impact other libraries you

00:18:16,639 --> 00:18:22,490
know that would be ideal another use

00:18:18,980 --> 00:18:25,549
case could be for application you know a

00:18:22,490 --> 00:18:28,159
PM Tools instrumentation if you're

00:18:25,549 --> 00:18:31,149
trying to go in and grab some

00:18:28,159 --> 00:18:33,679
diagnostics grab metrics on your apps

00:18:31,149 --> 00:18:37,340
this would be a great way for those

00:18:33,679 --> 00:18:39,769
tools to instrument your code sandboxing

00:18:37,340 --> 00:18:43,340
is another one I think this is the the

00:18:39,769 --> 00:18:45,260
security teams concerned with the

00:18:43,340 --> 00:18:49,389
sandboxing you may be able to lock down

00:18:45,260 --> 00:18:51,799
certain things if necessary and then

00:18:49,389 --> 00:18:54,830
again from the tooling side you know

00:18:51,799 --> 00:18:57,740
this could provide a great way to

00:18:54,830 --> 00:19:01,820
actually mock built-ins in nodes so

00:18:57,740 --> 00:19:03,260
maybe you have some tests that want to

00:19:01,820 --> 00:19:05,659
touch the filesystem

00:19:03,260 --> 00:19:08,120
you can write you know some sort of

00:19:05,659 --> 00:19:11,659
integration test that way and use these

00:19:08,120 --> 00:19:13,250
hooks so you're not you're not be

00:19:11,659 --> 00:19:16,610
fouling the filesystem with a whole

00:19:13,250 --> 00:19:20,510
bunch of files and yeah so there's a lot

00:19:16,610 --> 00:19:22,159
of different use cases now this is and

00:19:20,510 --> 00:19:25,039
this is going to touch a lot of places

00:19:22,159 --> 00:19:27,649
in node Court and so we are forming an

00:19:25,039 --> 00:19:32,809
ad hoc group somebody's actually gone

00:19:27,649 --> 00:19:35,870
and there is a meeting collaboration

00:19:32,809 --> 00:19:38,269
session at the open J's collaborators

00:19:35,870 --> 00:19:40,039
summit later this week so check out the

00:19:38,269 --> 00:19:40,640
schedule if this sounds like something

00:19:40,039 --> 00:19:44,300
you

00:19:40,640 --> 00:19:45,980
interested in maybe helping work out the

00:19:44,300 --> 00:19:49,430
requirements or maybe you're interested

00:19:45,980 --> 00:19:55,460
in implementation but yeah let's check

00:19:49,430 --> 00:20:00,590
that out and I'll be there this next one

00:19:55,460 --> 00:20:03,290
is kind of an ongoing concern more file

00:20:00,590 --> 00:20:05,450
system operations so when I started with

00:20:03,290 --> 00:20:08,680
nodejs and I think a lot of people may

00:20:05,450 --> 00:20:11,180
have had this experience it was

00:20:08,680 --> 00:20:14,540
essentially missing some api's to do

00:20:11,180 --> 00:20:18,200
things so you I came from the Python

00:20:14,540 --> 00:20:20,990
world and of course Python has it has

00:20:18,200 --> 00:20:26,090
everything in there and so I was missing

00:20:20,990 --> 00:20:28,130
a REM a rimmed or removed directory or

00:20:26,090 --> 00:20:31,970
Christopher move directory like a prune

00:20:28,130 --> 00:20:34,580
type of thing or a copy tree type coming

00:20:31,970 --> 00:20:37,850
and if you know the Shu tells module in

00:20:34,580 --> 00:20:40,730
Python so some of these are we have

00:20:37,850 --> 00:20:43,640
these these core file system operations

00:20:40,730 --> 00:20:46,700
but they're not they're not they can't

00:20:43,640 --> 00:20:51,140
be used in recursive mode so I mentioned

00:20:46,700 --> 00:20:54,770
make dur and render earlier where we had

00:20:51,140 --> 00:20:58,430
added recursive options to those methods

00:20:54,770 --> 00:21:00,410
and this would also be you maybe we

00:20:58,430 --> 00:21:02,990
should add file system operations for

00:21:00,410 --> 00:21:05,870
Sage Mode CH own CP file me but there's

00:21:02,990 --> 00:21:07,340
something else but that could be very

00:21:05,870 --> 00:21:09,500
helpful because these are these are

00:21:07,340 --> 00:21:12,560
really kind of I'm not going to say

00:21:09,500 --> 00:21:17,960
common but they are pretty fundamental

00:21:12,560 --> 00:21:20,660
tasks that tools need to do another one

00:21:17,960 --> 00:21:25,910
is glob support maybe further out on the

00:21:20,660 --> 00:21:28,790
horizon but the the glob user land

00:21:25,910 --> 00:21:31,250
package is kind of ubiquitous and you

00:21:28,790 --> 00:21:34,450
know why do we why do we pull it in well

00:21:31,250 --> 00:21:37,970
if you want your command line app to

00:21:34,450 --> 00:21:41,120
accept glob patterns and you want to do

00:21:37,970 --> 00:21:43,370
it in a platform-independent kind of way

00:21:41,120 --> 00:21:45,890
you're gonna need something like the

00:21:43,370 --> 00:21:48,520
glob package because you can't rely on

00:21:45,890 --> 00:21:52,100
the shell to to do it the same way

00:21:48,520 --> 00:21:54,590
across of course across shells or across

00:21:52,100 --> 00:21:57,710
operating systems and so

00:21:54,590 --> 00:22:00,620
adding something like glob support to to

00:21:57,710 --> 00:22:02,930
tecora would really kind of make it a

00:22:00,620 --> 00:22:06,440
lot easier for people just to to pull it

00:22:02,930 --> 00:22:08,180
in and deal with files this way and yeah

00:22:06,440 --> 00:22:11,920
I'd like to see it get done I'm probably

00:22:08,180 --> 00:22:15,890
further out but yeah that's a good one

00:22:11,920 --> 00:22:18,380
so next I want to talk a little bit

00:22:15,890 --> 00:22:20,930
about this is the possible part of the

00:22:18,380 --> 00:22:23,090
talk so let's talk about the future this

00:22:20,930 --> 00:22:24,650
is where the navel-gazing beginning I

00:22:23,090 --> 00:22:26,690
know you can't see me I'm not on camera

00:22:24,650 --> 00:22:29,770
but I am gazing up my navel right now

00:22:26,690 --> 00:22:33,320
and I want to start with Windows Paradis

00:22:29,770 --> 00:22:36,170
so Windows Paradis another casualty the

00:22:33,320 --> 00:22:38,630
server tooling impotence mismatch you

00:22:36,170 --> 00:22:40,640
know this has a lot to do with how node

00:22:38,630 --> 00:22:44,360
was designed what it was designed to do

00:22:40,640 --> 00:22:48,130
and especially you know where nodejs

00:22:44,360 --> 00:22:52,520
is intended to be run so if you are

00:22:48,130 --> 00:22:54,020
writing a network application where

00:22:52,520 --> 00:22:57,200
you're going to deploy it you're going

00:22:54,020 --> 00:22:59,030
to deploy it probably to linux and so

00:22:57,200 --> 00:23:01,730
because of this linux is really the

00:22:59,030 --> 00:23:05,300
first-class citizen and note the

00:23:01,730 --> 00:23:08,290
libraries that are that note is built

00:23:05,300 --> 00:23:10,640
upon or also linux centric and so

00:23:08,290 --> 00:23:13,730
windows support has kind of been bolted

00:23:10,640 --> 00:23:15,350
on and there's only really so much you

00:23:13,730 --> 00:23:16,910
can do because it is a different

00:23:15,350 --> 00:23:20,720
completely different different operating

00:23:16,910 --> 00:23:23,270
system but this is problematic of course

00:23:20,720 --> 00:23:24,860
because more developers are using node

00:23:23,270 --> 00:23:30,020
on windows and any other operating

00:23:24,860 --> 00:23:32,570
system but there's also kind of a bias

00:23:30,020 --> 00:23:34,400
so the node core developer is

00:23:32,570 --> 00:23:37,760
historically and probably even currently

00:23:34,400 --> 00:23:41,660
are using linux or mac as their daily

00:23:37,760 --> 00:23:44,480
development driver not Windows and so if

00:23:41,660 --> 00:23:48,680
we're not feeling this pain daily that

00:23:44,480 --> 00:23:51,620
the windows developer the developers on

00:23:48,680 --> 00:23:53,120
Windows might have when using node it's

00:23:51,620 --> 00:23:54,590
not gonna it's not going to be front and

00:23:53,120 --> 00:23:56,350
center it's so it's a little bit out of

00:23:54,590 --> 00:23:58,490
sight out of mind

00:23:56,350 --> 00:24:01,190
and we haven't we haven't heard from

00:23:58,490 --> 00:24:03,890
from either the two people that deploy

00:24:01,190 --> 00:24:05,780
node to Windows but you know if you

00:24:03,890 --> 00:24:06,840
would like to get in touch we'd love to

00:24:05,780 --> 00:24:09,760
hear from you

00:24:06,840 --> 00:24:14,500
otherwise if Windows is your daily

00:24:09,760 --> 00:24:17,290
driver if you write tools the node core

00:24:14,500 --> 00:24:21,160
really needs people that that develop on

00:24:17,290 --> 00:24:22,900
Windows develop tools on Windows you

00:24:21,160 --> 00:24:25,840
know core and the tooling group would

00:24:22,900 --> 00:24:28,680
love to hear from you the next one is

00:24:25,840 --> 00:24:32,170
also a bit of a cross-platform issue

00:24:28,680 --> 00:24:33,760
that's FS watch and FS watch file if

00:24:32,170 --> 00:24:35,710
you've tried to use them before they

00:24:33,760 --> 00:24:39,280
don't they simply just don't work very

00:24:35,710 --> 00:24:43,600
well outside of a few limited situations

00:24:39,280 --> 00:24:46,480
mostly on Linux and so what we have here

00:24:43,600 --> 00:24:50,200
is a little screen grab from NPM and

00:24:46,480 --> 00:24:51,820
there's a user land package called choco

00:24:50,200 --> 00:24:54,070
dark choke guitar I don't know how I'm

00:24:51,820 --> 00:24:57,720
saying that right but what that is it

00:24:54,070 --> 00:25:01,660
basically fixes file watching on

00:24:57,720 --> 00:25:04,540
different platforms and so this graphic

00:25:01,660 --> 00:25:07,660
is the weekly download count from last

00:25:04,540 --> 00:25:12,820
week so 23 point five million downloads

00:25:07,660 --> 00:25:16,360
of this package because FS watch and FS

00:25:12,820 --> 00:25:18,580
watch file don't work very well and so

00:25:16,360 --> 00:25:22,420
this graph is essentially up in to the

00:25:18,580 --> 00:25:23,770
right so you know FS watch the this is

00:25:22,420 --> 00:25:27,730
going to be kind of a tough nut to crack

00:25:23,770 --> 00:25:30,520
you know it may come down to to pulling

00:25:27,730 --> 00:25:34,720
ideas from from these user land packages

00:25:30,520 --> 00:25:37,750
and bringing them into node but as

00:25:34,720 --> 00:25:39,310
always if if you're interested in

00:25:37,750 --> 00:25:40,840
helping solve this please get involved

00:25:39,310 --> 00:25:43,450
with the tooling group please get

00:25:40,840 --> 00:25:46,210
involved with node core you know anybody

00:25:43,450 --> 00:25:49,090
can send a pull request but you know

00:25:46,210 --> 00:25:52,560
we'd also love to work with you in the

00:25:49,090 --> 00:25:52,560
tooling group to help get this solved

00:25:52,800 --> 00:25:57,910
the next one is self-contained

00:25:54,970 --> 00:26:01,150
distributable and so this would be no

00:25:57,910 --> 00:26:03,940
taps without the node so in short it's a

00:26:01,150 --> 00:26:08,080
way to package up your command line tool

00:26:03,940 --> 00:26:09,490
and distribute it to your users and they

00:26:08,080 --> 00:26:12,430
don't have to have node installed down

00:26:09,490 --> 00:26:15,940
if they have NPM installed so there's a

00:26:12,430 --> 00:26:18,390
user land package called pkg by site

00:26:15,940 --> 00:26:20,519
it's a ver cell now

00:26:18,390 --> 00:26:21,960
the description of this package is this

00:26:20,519 --> 00:26:24,090
command-line interface enables you to

00:26:21,960 --> 00:26:26,429
package your nodejs project into an

00:26:24,090 --> 00:26:29,549
executable that can be run even on

00:26:26,429 --> 00:26:31,559
devices without no GIS installed and so

00:26:29,549 --> 00:26:33,419
the way this this works is it basically

00:26:31,559 --> 00:26:36,690
has to compile mode and then compile

00:26:33,419 --> 00:26:39,990
your specific tooling into that package

00:26:36,690 --> 00:26:42,539
and then and then create a binary

00:26:39,990 --> 00:26:44,490
executable so there's definitely room

00:26:42,539 --> 00:26:47,190
for improvements here and I think those

00:26:44,490 --> 00:26:49,169
have to happen on the node core side so

00:26:47,190 --> 00:26:51,779
certainly if you're compiling node and

00:26:49,169 --> 00:26:54,659
you are adding some extra JavaScript to

00:26:51,779 --> 00:26:58,559
it it's gonna be a lot of stuff in there

00:26:54,659 --> 00:27:02,600
you're not using so maybe it's stuff in

00:26:58,559 --> 00:27:04,860
crypto maybe it's stuff in HTTP HTTPS

00:27:02,600 --> 00:27:06,659
maybe it's worker threads there's all

00:27:04,860 --> 00:27:08,340
sorts of things that you probably aren't

00:27:06,659 --> 00:27:10,200
using that are going to end up in that

00:27:08,340 --> 00:27:14,490
executive Bowl and that's essentially

00:27:10,200 --> 00:27:17,309
just dead code so you know we could get

00:27:14,490 --> 00:27:21,870
those binary sizes down we would need to

00:27:17,309 --> 00:27:25,080
find a way to to best do that building

00:27:21,870 --> 00:27:29,370
node is also not fast how can we how can

00:27:25,080 --> 00:27:31,440
we improve that situation the startup

00:27:29,370 --> 00:27:35,490
time of node can be going to be very

00:27:31,440 --> 00:27:40,049
very poor compared to you know obviously

00:27:35,490 --> 00:27:42,990
something compiled in you know with GCC

00:27:40,049 --> 00:27:45,840
or some arrests program compiled down

00:27:42,990 --> 00:27:47,429
that startup time is kind of rough you

00:27:45,840 --> 00:27:49,740
know maybe it'll make a difference maybe

00:27:47,429 --> 00:27:53,399
it won't it really depends what you're

00:27:49,740 --> 00:27:54,990
doing but if you are interested in this

00:27:53,399 --> 00:27:57,929
problem and I've heard this from several

00:27:54,990 --> 00:28:01,110
other people please come into the

00:27:57,929 --> 00:28:05,090
node.js tooling repo checkout issue 32

00:28:01,110 --> 00:28:07,350
and add your comments at your use case

00:28:05,090 --> 00:28:10,590
what we really need I think at this

00:28:07,350 --> 00:28:13,409
point is to kind of come up with a

00:28:10,590 --> 00:28:14,970
strategy to solve it there's certainly a

00:28:13,409 --> 00:28:18,899
lot of different ways we could tackle

00:28:14,970 --> 00:28:22,200
the problem which ways the the best ways

00:28:18,899 --> 00:28:25,590
is that's still on the table then we

00:28:22,200 --> 00:28:28,919
need to figure it out so I'd like to

00:28:25,590 --> 00:28:30,870
thank Benko for this idea built-in

00:28:28,919 --> 00:28:33,960
command line tools

00:28:30,870 --> 00:28:36,420
so the problem is this you have a

00:28:33,960 --> 00:28:38,160
package.json you have a script property

00:28:36,420 --> 00:28:41,580
in there and in that script property are

00:28:38,160 --> 00:28:45,330
some scripts and those scripts are in

00:28:41,580 --> 00:28:50,910
the shell the things that you can do in

00:28:45,330 --> 00:28:54,450
there are pretty limited because that

00:28:50,910 --> 00:28:56,040
that script may run in different shells

00:28:54,450 --> 00:28:58,110
we might run in command might run in

00:28:56,040 --> 00:29:01,410
PowerShell might run in zsh might run in

00:28:58,110 --> 00:29:04,770
bash you can't do there's not a lot of

00:29:01,410 --> 00:29:06,450
will ring in other words and so say you

00:29:04,770 --> 00:29:08,940
have a script and you want to remove a

00:29:06,450 --> 00:29:12,900
directory well how you gonna do that and

00:29:08,940 --> 00:29:15,170
you can't so you can't just expect a

00:29:12,900 --> 00:29:18,810
shell command to be there expect the

00:29:15,170 --> 00:29:20,460
flags to work the same so if you want to

00:29:18,810 --> 00:29:24,570
do that in a portable way you have to go

00:29:20,460 --> 00:29:28,710
right now and you need to you know

00:29:24,570 --> 00:29:31,740
either wrap nodes built-in rimmed ER in

00:29:28,710 --> 00:29:34,650
the FS module and expose that as a

00:29:31,740 --> 00:29:38,550
command-line tool or go and npm install

00:29:34,650 --> 00:29:40,350
rim wrath and so rib raf provides a a CA

00:29:38,550 --> 00:29:42,630
lot and that's what a lot of people do

00:29:40,350 --> 00:29:45,510
this go download rim raf and instead of

00:29:42,630 --> 00:29:47,310
calling RM RF you just call rim ref

00:29:45,510 --> 00:29:50,910
because it's in javascript and it just

00:29:47,310 --> 00:29:53,670
works so this is the problem because

00:29:50,910 --> 00:29:55,440
node runs in many environments it is

00:29:53,670 --> 00:30:00,270
more portable and that's why people

00:29:55,440 --> 00:30:02,400
reach for em wrath and one solution to

00:30:00,270 --> 00:30:06,290
this would be you know people have

00:30:02,400 --> 00:30:08,550
suggested that npm is the is the right

00:30:06,290 --> 00:30:09,900
the right tool to solve this and i don't

00:30:08,550 --> 00:30:12,480
think so i think this needs to happen in

00:30:09,900 --> 00:30:15,330
node core so nodejs perfect would

00:30:12,480 --> 00:30:18,360
provide a CLI based or a set of C lies

00:30:15,330 --> 00:30:21,450
based on its own built-in modules one of

00:30:18,360 --> 00:30:24,080
those could be like rim ref so say for

00:30:21,450 --> 00:30:26,100
example you needed to delete a directory

00:30:24,080 --> 00:30:27,930
and you wanted that in your package

00:30:26,100 --> 00:30:30,960
Jason scripts you could have a command

00:30:27,930 --> 00:30:33,030
like this below where it says no - -

00:30:30,960 --> 00:30:35,490
require built this doesn't exist this is

00:30:33,030 --> 00:30:37,760
just just brainstorming but no - -

00:30:35,490 --> 00:30:40,440
require built in and you give it the

00:30:37,760 --> 00:30:42,020
some identifier in this case rim derp

00:30:40,440 --> 00:30:45,559
and then you pass the the

00:30:42,020 --> 00:30:48,590
the flags to it and you know that would

00:30:45,559 --> 00:30:51,740
be that would be guaranteed to work in

00:30:48,590 --> 00:30:55,700
any shell and so that would be a great a

00:30:51,740 --> 00:30:58,520
great way to to you do this in a

00:30:55,700 --> 00:31:02,740
cross-platform way do it with without

00:30:58,520 --> 00:31:05,450
requiring more of userland modules

00:31:02,740 --> 00:31:09,020
there's some precedent for this Python

00:31:05,450 --> 00:31:11,510
ships with executive all modules so this

00:31:09,020 --> 00:31:13,190
command below Python um simple HTTP

00:31:11,510 --> 00:31:14,630
servers so what this will do if you run

00:31:13,190 --> 00:31:17,120
it if you all you have to do is install

00:31:14,630 --> 00:31:20,870
Python but if you run this command it

00:31:17,120 --> 00:31:23,090
will create an HTTP server and serve the

00:31:20,870 --> 00:31:26,960
files in whatever directory you ran this

00:31:23,090 --> 00:31:30,020
in and so it has these like built-in

00:31:26,960 --> 00:31:30,710
modules that you can just run and that's

00:31:30,020 --> 00:31:33,080
cool

00:31:30,710 --> 00:31:35,240
I think node could do something similar

00:31:33,080 --> 00:31:38,210
I think it would be really beneficial

00:31:35,240 --> 00:31:40,520
for tooling and it would provide kind of

00:31:38,210 --> 00:31:43,220
a standard way to solve some of the

00:31:40,520 --> 00:31:46,190
problems that people are encountering

00:31:43,220 --> 00:31:49,309
and again and again in their in their

00:31:46,190 --> 00:31:52,160
package Jason scripts finally the last

00:31:49,309 --> 00:31:53,690
place I think we should look for

00:31:52,160 --> 00:31:56,540
improving the tooling situation is

00:31:53,690 --> 00:32:00,410
JavaScript and itself and I would love

00:31:56,540 --> 00:32:02,960
it if people in the node tooling group

00:32:00,410 --> 00:32:05,630
and others who are interested in know

00:32:02,960 --> 00:32:07,760
tooling could participate in TC Zoe none

00:32:05,630 --> 00:32:09,830
and so if you don't know what tc39 is

00:32:07,760 --> 00:32:12,500
it's the team responsible for designing

00:32:09,830 --> 00:32:16,700
Ekman script javascript the language

00:32:12,500 --> 00:32:19,040
right and so you know if we are to have

00:32:16,700 --> 00:32:22,130
representation if we're gonna make sure

00:32:19,040 --> 00:32:25,309
that the language serves our use case we

00:32:22,130 --> 00:32:26,480
need to see you at the table and so we

00:32:25,309 --> 00:32:29,210
really we really need some

00:32:26,480 --> 00:32:31,309
representation if we if we can't you

00:32:29,210 --> 00:32:33,290
know send somebody the meeting certainly

00:32:31,309 --> 00:32:36,020
we should get in somebody's ear who's

00:32:33,290 --> 00:32:37,760
our who's going to be there there's a

00:32:36,020 --> 00:32:42,730
couple of proposals that that I

00:32:37,760 --> 00:32:45,470
identified as being ones that you are

00:32:42,730 --> 00:32:48,950
kind of interesting and I think could

00:32:45,470 --> 00:32:52,580
really be beneficial for tools that

00:32:48,950 --> 00:32:56,809
first one is the binary ST proposal and

00:32:52,580 --> 00:33:00,950
so the idea here is to

00:32:56,809 --> 00:33:03,610
make webpages faster we want to ship

00:33:00,950 --> 00:33:06,679
less bytes and to ship less bytes

00:33:03,610 --> 00:33:12,530
instead of shipping a text JavaScript

00:33:06,679 --> 00:33:15,440
file we can ship a binary ST and so this

00:33:12,530 --> 00:33:16,669
ast is an apps that abstract syntax tree

00:33:15,440 --> 00:33:19,850
if you're if you're not familiar with

00:33:16,669 --> 00:33:22,669
the with the acronym but to me that

00:33:19,850 --> 00:33:26,630
sounds like a standardized ast of some

00:33:22,669 --> 00:33:28,940
sort and so the current situation in in

00:33:26,630 --> 00:33:31,400
the JavaScript community is that there

00:33:28,940 --> 00:33:34,730
is no standardized ast there is a kind

00:33:31,400 --> 00:33:35,900
of community standard in the es tree I

00:33:34,730 --> 00:33:39,260
don't even know if that's a

00:33:35,900 --> 00:33:42,289
specification but so it would really

00:33:39,260 --> 00:33:47,870
help tool Interop and you know this this

00:33:42,289 --> 00:33:50,240
this AST format is binary format to be

00:33:47,870 --> 00:33:53,720
able to to have tools work with each

00:33:50,240 --> 00:33:56,990
other a little more smoothly so that one

00:33:53,720 --> 00:34:00,020
is probably a ways off but I think it

00:33:56,990 --> 00:34:01,400
has a lot of potential the next one

00:34:00,020 --> 00:34:05,330
people have been trying to solve for a

00:34:01,400 --> 00:34:10,869
long time and you may know of or have

00:34:05,330 --> 00:34:14,629
used the nodejs built-in domains which

00:34:10,869 --> 00:34:16,850
is deprecated but there was never

00:34:14,629 --> 00:34:21,740
anything really to replace it and so the

00:34:16,850 --> 00:34:24,679
idea there is a realm and a realm is a

00:34:21,740 --> 00:34:28,190
distinct global environment so I think

00:34:24,679 --> 00:34:29,960
the VM module where you say okay these

00:34:28,190 --> 00:34:32,720
are my Global's and this is a script I'm

00:34:29,960 --> 00:34:36,020
gonna run go the problem with the VM

00:34:32,720 --> 00:34:38,750
module is it leaks it when you give it

00:34:36,020 --> 00:34:40,129
Global's you're not giving it a new set

00:34:38,750 --> 00:34:43,970
of Global's you're giving it your

00:34:40,129 --> 00:34:46,730
Global's so the the code running in this

00:34:43,970 --> 00:34:48,409
the script running in the VM is using

00:34:46,730 --> 00:34:51,379
those same Global's that you have in

00:34:48,409 --> 00:34:53,929
your Global's and so this leaks and so

00:34:51,379 --> 00:34:56,960
people have solved this sort of

00:34:53,929 --> 00:35:00,920
sandboxing problem in other ways but the

00:34:56,960 --> 00:35:05,030
idea here is to to offer a better way to

00:35:00,920 --> 00:35:07,760
sandbox code maybe even replacing what

00:35:05,030 --> 00:35:09,680
people use iframes for now so back a

00:35:07,760 --> 00:35:11,450
long time ago we used to use like

00:35:09,680 --> 00:35:13,310
for something else entirely and nowadays

00:35:11,450 --> 00:35:16,550
we're still using iframes but for a

00:35:13,310 --> 00:35:18,440
different reason and so and there's a

00:35:16,550 --> 00:35:21,950
lot of use cases for tooling here

00:35:18,440 --> 00:35:24,050
including like you know test frameworks

00:35:21,950 --> 00:35:26,330
and so maybe a test framework wants to

00:35:24,050 --> 00:35:29,180
isolate some code under test and make

00:35:26,330 --> 00:35:31,280
sure that it's not that we're not

00:35:29,180 --> 00:35:34,190
sharing an environment or stepping on

00:35:31,280 --> 00:35:36,110
each other's toes and so I would love to

00:35:34,190 --> 00:35:39,110
see realms get soft also if you're

00:35:36,110 --> 00:35:41,390
familiar with angular and you know what

00:35:39,110 --> 00:35:46,610
a zone is realms are kind of similar to

00:35:41,390 --> 00:35:50,030
zones as well so that's kind of my feel

00:35:46,610 --> 00:35:53,810
about the president of future of tooling

00:35:50,030 --> 00:35:56,030
and node and again my name is Chris

00:35:53,810 --> 00:35:59,150
Hiller I'm a developer advocate at IBM

00:35:56,030 --> 00:36:02,600
and here are some links so you can hit

00:35:59,150 --> 00:36:06,140
me up via email I am bone skull bone

00:36:02,600 --> 00:36:08,660
skull calm I am bone skull and get up

00:36:06,140 --> 00:36:12,350
I'm bone skull with a zero on Twitter

00:36:08,660 --> 00:36:15,350
and that file link is a link to the Jas

00:36:12,350 --> 00:36:19,880
party podcast there actually will be a

00:36:15,350 --> 00:36:22,820
J's Party podcast at this here

00:36:19,880 --> 00:36:25,640
conference later today go and check out

00:36:22,820 --> 00:36:29,150
the schedule and check out Jas party

00:36:25,640 --> 00:36:31,790
it's pretty awesome again my name is

00:36:29,150 --> 00:36:34,370
Chris Hiller I'm happy to have had the

00:36:31,790 --> 00:36:38,450
chance to present here at open Jas world

00:36:34,370 --> 00:36:41,080
twenty20 thank you very much and I'll be

00:36:38,450 --> 00:36:41,080

YouTube URL: https://www.youtube.com/watch?v=1xfz2l6isqY


