Title: Cover your Projects with a Multi purpose Lightweight Node.js Registry - Juan Carlos Picado Herrer
Publication date: 2020-06-18
Playlist: OpenJS World 2020
Description: 
	Cover your Projects with a Multi purpose Lightweight Node.js Registry - Juan Carlos Picado Herrer, eBay
Captions: 
	00:00:03,500 --> 00:00:09,120
hi thanks for joining my talk I'm really

00:00:06,839 --> 00:00:12,570
really glad to meet you Brittany

00:00:09,120 --> 00:00:15,179
and today I will talk about uncover your

00:00:12,570 --> 00:00:17,660
projects with a multiples like with no

00:00:15,179 --> 00:00:20,120
J's mystery

00:00:17,660 --> 00:00:22,610
but the first start please allow me to

00:00:20,120 --> 00:00:26,510
enrich myself but let's run this common

00:00:22,610 --> 00:00:29,180
purse perfect name is one I'm from Spain

00:00:26,510 --> 00:00:32,119
but with strong roots from Nicaragua

00:00:29,180 --> 00:00:35,480
I'm a senior front-end engineer at eBay

00:00:32,119 --> 00:00:38,980
and I live since one year ago in Berlin

00:00:35,480 --> 00:00:41,840
and previously in Austria for few years

00:00:38,980 --> 00:00:44,360
the lead maintainer of the potential

00:00:41,840 --> 00:00:48,250
project mindfully laughs open source

00:00:44,360 --> 00:00:48,250
especially known yes

00:00:48,370 --> 00:00:53,480
so today I am going to talk about a

00:00:50,690 --> 00:00:56,510
topic I'm really passionate about using

00:00:53,480 --> 00:00:57,110
a registry with no yes so the end of

00:00:56,510 --> 00:00:59,660
this talk

00:00:57,110 --> 00:01:01,730
you have learned the role of the

00:00:59,660 --> 00:01:04,100
registry in your project a small

00:01:01,730 --> 00:01:06,440
introduction to production and all the

00:01:04,100 --> 00:01:09,880
benefits of having a pretty registry in

00:01:06,440 --> 00:01:09,880
combination with your project

00:01:10,570 --> 00:01:16,549
so before we go to the main topic and

00:01:13,880 --> 00:01:18,850
features I want to define one of the

00:01:16,549 --> 00:01:21,850
main ideas I'm going to mention today

00:01:18,850 --> 00:01:21,850
addressed

00:01:22,070 --> 00:01:26,640
so when we are installing our packages

00:01:24,900 --> 00:01:29,340
this is the picture we have the most of

00:01:26,640 --> 00:01:31,740
us in our mind and slow and heavy

00:01:29,340 --> 00:01:34,200
process we are forced to execute in

00:01:31,740 --> 00:01:36,840
order to achieve our goal to build role

00:01:34,200 --> 00:01:39,450
in a project but in the bonhomie of the

00:01:36,840 --> 00:01:41,550
package manager of your taste those are

00:01:39,450 --> 00:01:44,070
only one part of the effort will a

00:01:41,550 --> 00:01:47,000
project the other part falls into the

00:01:44,070 --> 00:01:50,070
responsibility of the registry

00:01:47,000 --> 00:01:53,370
so what what what she's a registry and

00:01:50,070 --> 00:01:55,230
why we should care about it and a simple

00:01:53,370 --> 00:01:57,750
definition of a registry is a repository

00:01:55,230 --> 00:02:01,650
of packages composite or tarballs

00:01:57,750 --> 00:02:03,930
metadata also known as Spock mint which

00:02:01,650 --> 00:02:08,100
stores and track the version of package

00:02:03,930 --> 00:02:09,330
and technically is more complex than

00:02:08,100 --> 00:02:12,830
this Phoenician but this is good enough

00:02:09,330 --> 00:02:12,830
for the purpose of this talk

00:02:13,160 --> 00:02:19,160
so what's the role of the registry in

00:02:16,160 --> 00:02:20,840
your app the package manager and it

00:02:19,160 --> 00:02:23,240
information to calculate the

00:02:20,840 --> 00:02:26,890
dependencies in your project this

00:02:23,240 --> 00:02:26,890
information comes from the registry

00:02:27,810 --> 00:02:32,819
a restream you decide the package

00:02:30,720 --> 00:02:35,849
manager it does not match to do by

00:02:32,819 --> 00:02:38,370
itself so the registry must have high

00:02:35,849 --> 00:02:40,730
reliability otherwise you are totally

00:02:38,370 --> 00:02:40,730
block

00:02:41,980 --> 00:02:47,330
Riis trees in the middle of the critical

00:02:44,569 --> 00:02:49,819
path of building your app so initial

00:02:47,330 --> 00:02:53,260
solution is having a cell registry in

00:02:49,819 --> 00:02:53,260
the middle the backdrop

00:02:53,720 --> 00:02:57,270
you

00:02:55,740 --> 00:02:59,760
well that she's a lightweight on this

00:02:57,270 --> 00:03:02,640
open-source proxy embedded registry

00:02:59,760 --> 00:03:06,920
built-in on yes and today we will add a

00:03:02,640 --> 00:03:06,920
new itit of multi proposed

00:03:08,459 --> 00:03:13,720
what this month proposed means um

00:03:11,370 --> 00:03:16,689
principal reason for each award I choose

00:03:13,720 --> 00:03:19,420
for hosting privet packages and but also

00:03:16,689 --> 00:03:23,470
it has the ability to fetch for multiple

00:03:19,420 --> 00:03:26,290
ministries um but while Prudential

00:03:23,470 --> 00:03:28,200
proxies to external registries also

00:03:26,290 --> 00:03:30,790
holds a copy of every package and

00:03:28,200 --> 00:03:35,890
persisting a copy of data for feature

00:03:30,790 --> 00:03:38,470
requests and also you can emulate real

00:03:35,890 --> 00:03:40,750
testing and this is the newest one and I

00:03:38,470 --> 00:03:44,040
want to have say here it's a complement

00:03:40,750 --> 00:03:44,040
rather a tool itself

00:03:44,290 --> 00:03:50,060
so before we delve into what philosophy

00:03:47,630 --> 00:03:52,790
is and how to use it and it worth

00:03:50,060 --> 00:03:55,790
learning more about the problem domain

00:03:52,790 --> 00:03:58,819
itself and the fact that our apps must

00:03:55,790 --> 00:04:02,390
rely on external services 100% is the

00:03:58,819 --> 00:04:05,030
main issue service might fails and if

00:04:02,390 --> 00:04:08,739
you need additional form additional

00:04:05,030 --> 00:04:08,739
features also you need to pay for it

00:04:08,960 --> 00:04:13,820
were actually able to run and deploy

00:04:11,390 --> 00:04:16,100
without external interference and reduce

00:04:13,820 --> 00:04:19,750
the scope of the failure to internal

00:04:16,100 --> 00:04:22,010
domain rather external reasons

00:04:19,750 --> 00:04:24,620
portability is also a big problem for

00:04:22,010 --> 00:04:28,010
other solutions and the lacerations mode

00:04:24,620 --> 00:04:31,490
is not enough to be a dependency and in

00:04:28,010 --> 00:04:32,990
any of your projects that which that

00:04:31,490 --> 00:04:34,820
provide an interest in set of

00:04:32,990 --> 00:04:37,060
opportunities like we are gonna see

00:04:34,820 --> 00:04:37,060
later

00:04:38,070 --> 00:04:42,400
it is something with virtue is really

00:04:40,600 --> 00:04:46,020
straightforward I just installed the

00:04:42,400 --> 00:04:48,730
package globally and run the - a comment

00:04:46,020 --> 00:04:52,570
abolitionists are small and that can be

00:04:48,730 --> 00:04:54,550
combined with MPX common and the default

00:04:52,570 --> 00:04:57,880
collaboration is more calm is more than

00:04:54,550 --> 00:05:01,090
enough but for the most of use cases but

00:04:57,880 --> 00:05:03,580
also is based in German I'm here I'm

00:05:01,090 --> 00:05:06,960
using IBM for simplicity but any other

00:05:03,580 --> 00:05:06,960
package manager walks fine

00:05:07,850 --> 00:05:14,280
religion has an official image and also

00:05:10,620 --> 00:05:16,680
a help official chart and this is the

00:05:14,280 --> 00:05:19,889
way that actually you can actually you

00:05:16,680 --> 00:05:23,190
can use Whitaker and the eunuch argument

00:05:19,889 --> 00:05:25,050
you need to use here is the port and but

00:05:23,190 --> 00:05:29,480
also you can extend it with token other

00:05:25,050 --> 00:05:29,480
toker features like volumes and so on

00:05:29,869 --> 00:05:36,019
the next step is configuration customer

00:05:33,629 --> 00:05:38,789
history and they're actually three ways

00:05:36,019 --> 00:05:41,159
the first one is the faster way which

00:05:38,789 --> 00:05:44,519
you can use the risky flag and this

00:05:41,159 --> 00:05:48,029
works for comment and the second one is

00:05:44,519 --> 00:05:51,019
a set registry property at the MPM RC

00:05:48,029 --> 00:05:53,509
file and this is the most common way and

00:05:51,019 --> 00:05:56,849
recognizes by other package managers and

00:05:53,509 --> 00:06:00,329
also you can host in your operating

00:05:56,849 --> 00:06:02,889
system home directory as a global or in

00:06:00,329 --> 00:06:05,600
the root of your project

00:06:02,889 --> 00:06:08,540
in the package.json also you can define

00:06:05,600 --> 00:06:10,220
the published config property and in

00:06:08,540 --> 00:06:12,919
this way you can ensure you are

00:06:10,220 --> 00:06:16,340
publishing to the specificity and and

00:06:12,919 --> 00:06:19,720
and this one cannot be a real overall by

00:06:16,340 --> 00:06:19,720
any of the previous options

00:06:20,020 --> 00:06:25,810
one personal recommendation is nrm this

00:06:24,430 --> 00:06:27,699
tool is really handy and naturally

00:06:25,810 --> 00:06:30,190
different works only globally but also

00:06:27,699 --> 00:06:34,229
it has a nice slice which you can switch

00:06:30,190 --> 00:06:34,229
within registry or the track

00:06:34,919 --> 00:06:42,250
host in our private package but registry

00:06:38,350 --> 00:06:45,980
is a must-have in combination with your

00:06:42,250 --> 00:06:49,110
product and there is many reasons for it

00:06:45,980 --> 00:06:52,500
security by far is the most important

00:06:49,110 --> 00:06:55,530
one and it acts as a firewall to about

00:06:52,500 --> 00:06:58,080
leaks to political histories and privacy

00:06:55,530 --> 00:07:01,140
perhaps emotionally one element one and

00:06:58,080 --> 00:07:03,960
the fact that nobody consider code its

00:07:01,140 --> 00:07:07,509
specialist

00:07:03,960 --> 00:07:09,789
also you can have phonics and awful

00:07:07,509 --> 00:07:12,879
offline experience for those who travel

00:07:09,789 --> 00:07:16,659
or work remotely in areas which network

00:07:12,879 --> 00:07:20,530
issues conferences airports coffees etc

00:07:16,659 --> 00:07:22,820
and the parade will feel even if any oth

00:07:20,530 --> 00:07:25,070
happens

00:07:22,820 --> 00:07:27,710
furniture history and it's open source

00:07:25,070 --> 00:07:30,170
so this is being translated to reduce

00:07:27,710 --> 00:07:33,290
cost if you are in a been a developer or

00:07:30,170 --> 00:07:35,300
smaller startup hosting a predicate a

00:07:33,290 --> 00:07:37,760
pretty registry never was so easy and

00:07:35,300 --> 00:07:42,640
cheap because I didn't have to pay any

00:07:37,760 --> 00:07:45,800
monthly fees for those already not yes

00:07:42,640 --> 00:07:49,460
it's not yes is hard if you cannot use a

00:07:45,800 --> 00:07:52,610
registry M PMDs is not made for that

00:07:49,460 --> 00:07:56,380
scenario for instance you cannot spam it

00:07:52,610 --> 00:07:59,500
with techniques or uses offline

00:07:56,380 --> 00:08:03,030
if the University is the best reason to

00:07:59,500 --> 00:08:05,980
host in one and because having a hosted

00:08:03,030 --> 00:08:08,530
hosted a stage in registry is maybe the

00:08:05,980 --> 00:08:11,340
best decisions you can take and to might

00:08:08,530 --> 00:08:14,620
have you might have the need to publish

00:08:11,340 --> 00:08:16,780
stop shot or Canada releases that need

00:08:14,620 --> 00:08:18,490
to be hosted somewhere and to be

00:08:16,780 --> 00:08:21,850
consumed about other parts of your app

00:08:18,490 --> 00:08:24,490
and private registry into sustained

00:08:21,850 --> 00:08:28,560
areas became crusher and and it's a huge

00:08:24,490 --> 00:08:33,550
advantage for several reasons um hope

00:08:28,560 --> 00:08:35,380
hosted with internet your network make

00:08:33,550 --> 00:08:38,830
tech it is a mighty sort of right and

00:08:35,380 --> 00:08:40,539
also products in development can make

00:08:38,830 --> 00:08:43,000
sensitive information if you are doing

00:08:40,539 --> 00:08:46,690
some snapchat publishing in parbat

00:08:43,000 --> 00:08:49,780
registries even if you're using private

00:08:46,690 --> 00:08:52,990
features so this picture we can observe

00:08:49,780 --> 00:08:54,730
how advertiser we use a stake in

00:08:52,990 --> 00:08:59,980
registry to deploy we can reverse your

00:08:54,730 --> 00:09:03,490
request and for instance I created a

00:08:59,980 --> 00:09:04,960
custom get up actions on that ad create

00:09:03,490 --> 00:09:08,330
a comment in the pull request after

00:09:04,960 --> 00:09:12,030
publish on my Steam server

00:09:08,330 --> 00:09:13,670
if we dive into the action I can extract

00:09:12,030 --> 00:09:17,370
relevant information from the github

00:09:13,670 --> 00:09:19,320
context API and invoke the NPM version

00:09:17,370 --> 00:09:22,230
with some specific special arguments

00:09:19,320 --> 00:09:25,320
like Naugatuck version which actually

00:09:22,230 --> 00:09:27,750
about to create a key tag and also crate

00:09:25,320 --> 00:09:31,010
which also allows you to define a

00:09:27,750 --> 00:09:33,320
specific ID for your release

00:09:31,010 --> 00:09:36,240
so the final result looks like this

00:09:33,320 --> 00:09:38,550
because having a stage in registry for

00:09:36,240 --> 00:09:41,250
my project makes much easier to anyone

00:09:38,550 --> 00:09:43,710
to try out right away a cannery version

00:09:41,250 --> 00:09:45,750
after the build finish and this is just

00:09:43,710 --> 00:09:49,230
an example how you can combine tooling

00:09:45,750 --> 00:09:50,600
which is your previously

00:09:49,230 --> 00:09:55,040
you

00:09:50,600 --> 00:09:57,590
when does a steady really make sense for

00:09:55,040 --> 00:10:00,650
instance if you are Dean continuing the

00:09:57,590 --> 00:10:02,780
degree which teams produce so far in

00:10:00,650 --> 00:10:05,150
short cycles and in apps it's video

00:10:02,780 --> 00:10:06,620
regularly and having the student

00:10:05,150 --> 00:10:09,650
registry will allow you to create fast

00:10:06,620 --> 00:10:13,240
stash of snapshots and also faster

00:10:09,650 --> 00:10:13,240
built-in you cash properly

00:10:14,570 --> 00:10:20,360
up to the UPS there are mana

00:10:16,790 --> 00:10:22,130
repositories can wrap rapidly growth and

00:10:20,360 --> 00:10:25,160
for several amount of models and

00:10:22,130 --> 00:10:26,990
relations between apps out for instance

00:10:25,160 --> 00:10:30,850
if you have a design system which is

00:10:26,990 --> 00:10:30,850
being used across of college orientation

00:10:32,759 --> 00:10:38,370
when you need to patch a library if any

00:10:35,600 --> 00:10:42,240
if one of your dependencies has a back

00:10:38,370 --> 00:10:44,670
and and and you know how to fix it on

00:10:42,240 --> 00:10:47,089
the official patch never arrives sounds

00:10:44,670 --> 00:10:51,480
familiar right let's see that sample

00:10:47,089 --> 00:10:54,899
instance you can publish batch batch

00:10:51,480 --> 00:10:57,959
version to do prepare industry and and

00:10:54,899 --> 00:10:59,850
use it while the real batch arrives but

00:10:57,959 --> 00:11:02,220
that should merge the remotes versions

00:10:59,850 --> 00:11:03,709
with the private versions and all you

00:11:02,220 --> 00:11:06,839
need to do is just change the version

00:11:03,709 --> 00:11:09,230
interpret or the real patch is being

00:11:06,839 --> 00:11:09,230
published

00:11:09,500 --> 00:11:15,290
and now let me give you an example how

00:11:12,440 --> 00:11:18,530
to how a small registry is handy to

00:11:15,290 --> 00:11:20,750
cover an app for teaching no yes or

00:11:18,530 --> 00:11:23,480
shopper is an organization built around

00:11:20,750 --> 00:11:26,180
the no GIS platform and has roots within

00:11:23,480 --> 00:11:28,190
our school this organization exists you

00:11:26,180 --> 00:11:31,610
need the effort of the creation of open

00:11:28,190 --> 00:11:34,670
source learning material and how 20m

00:11:31,610 --> 00:11:36,800
call it my attention when I noticed the

00:11:34,670 --> 00:11:40,220
world machina released before teaching

00:11:36,800 --> 00:11:43,520
proposes so you can learn how to use NPM

00:11:40,220 --> 00:11:46,480
and for few common actually requires a

00:11:43,520 --> 00:11:50,300
registry like MPM publish or NPM logging

00:11:46,480 --> 00:11:54,650
so why don't we treat a real a real one

00:11:50,300 --> 00:11:56,510
which can be used often anywhere so I

00:11:54,650 --> 00:11:58,760
decided to open a pro quest and it

00:11:56,510 --> 00:12:01,220
readable - you know the app can actually

00:11:58,760 --> 00:12:02,270
focus on teaching and let your - you to

00:12:01,220 --> 00:12:05,000
handle itself

00:12:02,270 --> 00:12:06,650
3 3 features so thankfully this idea was

00:12:05,000 --> 00:12:08,840
my welcome

00:12:06,650 --> 00:12:11,690
and this is just an idea how to you can

00:12:08,840 --> 00:12:15,740
use our app you twist it for for

00:12:11,690 --> 00:12:17,600
teaching so we know or we know the pedal

00:12:15,740 --> 00:12:19,460
the public registry is the Oracle of

00:12:17,600 --> 00:12:22,190
registries where all our favorite

00:12:19,460 --> 00:12:25,610
packages projects are hosted by the

00:12:22,190 --> 00:12:27,440
phone but there is not only one and you

00:12:25,610 --> 00:12:31,520
might have more than one inch

00:12:27,440 --> 00:12:34,070
organization and thus Arista should be

00:12:31,520 --> 00:12:36,860
able to access multiple registries with

00:12:34,070 --> 00:12:39,080
the best developer experience proxies

00:12:36,860 --> 00:12:41,300
are gateways between you and interact

00:12:39,080 --> 00:12:43,160
and but that you can proxy between a

00:12:41,300 --> 00:12:45,130
node package manager and any other

00:12:43,160 --> 00:12:48,680
registry with a seamless integration

00:12:45,130 --> 00:12:51,800
lets him so you might have seen before

00:12:48,680 --> 00:12:54,410
in a project and this is the way that

00:12:51,800 --> 00:12:58,250
MPM provides accessing to neutral

00:12:54,410 --> 00:13:00,800
registries appear NPM RC file but this

00:12:58,250 --> 00:13:03,740
comes with a few disadvantages like user

00:13:00,800 --> 00:13:08,450
experience or security so to keep this

00:13:03,740 --> 00:13:10,550
on to keep on thinkin scopes might be

00:13:08,450 --> 00:13:13,280
hard if your team has a considerable

00:13:10,550 --> 00:13:16,070
size and fear of the developers even

00:13:13,280 --> 00:13:17,900
might be tempted like accidentally

00:13:16,070 --> 00:13:21,320
password or tokens to the public

00:13:17,900 --> 00:13:24,290
repositories by mistake and also it

00:13:21,320 --> 00:13:27,150
looks pretty coptic

00:13:24,290 --> 00:13:29,160
so brother has a feature name it

00:13:27,150 --> 00:13:31,340
uplinked that allows you to centralize

00:13:29,160 --> 00:13:36,420
all the configuration in a config file

00:13:31,340 --> 00:13:38,790
so you can have yours set up security

00:13:36,420 --> 00:13:41,000
headers and release developers for

00:13:38,790 --> 00:13:44,160
responsibility to keep this 1 cent per

00:13:41,000 --> 00:13:46,950
Daschle supports multiple ways to set

00:13:44,160 --> 00:13:51,180
your tokens locations and any other

00:13:46,950 --> 00:13:54,250
nonzero industry can be home adhere

00:13:51,180 --> 00:13:57,520
so after defined the uplinks also you

00:13:54,250 --> 00:13:59,920
can define for each package pattern to

00:13:57,520 --> 00:14:03,850
be in fetch for specific remote or

00:13:59,920 --> 00:14:05,410
multiple ones and and and that's all and

00:14:03,850 --> 00:14:07,780
British will look out for the remote

00:14:05,410 --> 00:14:10,330
effortless for the developers if you

00:14:07,780 --> 00:14:12,460
combine these with another private host

00:14:10,330 --> 00:14:16,230
every street will have only one single

00:14:12,460 --> 00:14:16,230
endpoint for all your industries

00:14:17,180 --> 00:14:22,350
catching means placing something in

00:14:19,710 --> 00:14:25,650
storage on the chance it may be it might

00:14:22,350 --> 00:14:28,320
come in use of the letter and being able

00:14:25,650 --> 00:14:30,240
to catch packages it's something that

00:14:28,320 --> 00:14:33,750
the package manager does actually

00:14:30,240 --> 00:14:37,130
locally I really luckily but why don't

00:14:33,750 --> 00:14:37,130
do it at the lab on your app

00:14:37,360 --> 00:14:43,190
so I wish why we should care about cash

00:14:40,520 --> 00:14:45,800
and I will refresh this and why could

00:14:43,190 --> 00:14:47,450
not happen for instance I'm missing

00:14:45,800 --> 00:14:49,190
library broke in the internet like left

00:14:47,450 --> 00:14:52,550
path few years ago also this might

00:14:49,190 --> 00:14:54,410
happens also in your blog environment NP

00:14:52,550 --> 00:14:57,430
MD is having a tough day because you

00:14:54,410 --> 00:14:59,660
cannot you cannot instead packages or

00:14:57,430 --> 00:15:02,600
intermediary are working internet again

00:14:59,660 --> 00:15:04,640
like truthful and this year order the

00:15:02,600 --> 00:15:06,740
stock between your cable anything can

00:15:04,640 --> 00:15:10,880
happen and you must be cold for all the

00:15:06,740 --> 00:15:12,920
scenarios so catches the key and cash in

00:15:10,880 --> 00:15:15,529
dependencies will save to stop lob your

00:15:12,920 --> 00:15:17,060
work in your project and catch the

00:15:15,529 --> 00:15:19,160
dependencies local is not enough and

00:15:17,060 --> 00:15:21,589
they can be cured any time and they're

00:15:19,160 --> 00:15:24,350
gone so but that should catch by demand

00:15:21,589 --> 00:15:27,830
and keep the latest track of older

00:15:24,350 --> 00:15:31,850
versions private ones and from remote

00:15:27,830 --> 00:15:33,589
all the remote histories and the folder

00:15:31,850 --> 00:15:36,140
that contains a cast is just a folder

00:15:33,589 --> 00:15:39,050
and that in relocated or copy to another

00:15:36,140 --> 00:15:43,130
computer through the world the cache is

00:15:39,050 --> 00:15:45,190
backward compatible for you say updates

00:15:43,130 --> 00:15:45,190
you

00:15:45,450 --> 00:15:49,770
continuing tradition is part of the

00:15:47,280 --> 00:15:52,260
lifecycle of your app and all we want

00:15:49,770 --> 00:15:54,390
those to be green to maximize the

00:15:52,260 --> 00:15:56,520
chances of access are recommend to put

00:15:54,390 --> 00:16:00,270
up rapid realistic caching by demand or

00:15:56,520 --> 00:16:03,090
advances and which will avoid about

00:16:00,270 --> 00:16:06,360
false positive doer network service

00:16:03,090 --> 00:16:08,550
outages you will have better consistency

00:16:06,360 --> 00:16:10,320
in your app faster builds with the

00:16:08,550 --> 00:16:13,910
closed location within your ministry and

00:16:10,320 --> 00:16:13,910
your continues in the region server

00:16:14,310 --> 00:16:20,940
also you will I will ephesus here to use

00:16:17,130 --> 00:16:23,040
a log file and if you have an app it

00:16:20,940 --> 00:16:25,110
might need not require you in the case

00:16:23,040 --> 00:16:28,290
you are building models and you prefer

00:16:25,110 --> 00:16:30,690
your somatic personal taste but in any

00:16:28,290 --> 00:16:32,640
case i also recommend to paint your

00:16:30,690 --> 00:16:34,950
dependencies which will help to the

00:16:32,640 --> 00:16:38,540
package manager on request you updates

00:16:34,950 --> 00:16:38,540
three three so often

00:16:39,940 --> 00:16:45,020
you simmer - or you could apply an extra

00:16:42,800 --> 00:16:47,060
Timmy session for instance increase in

00:16:45,020 --> 00:16:49,160
the match edge of your cast and this

00:16:47,060 --> 00:16:51,200
will this will allow it to offer recurs

00:16:49,160 --> 00:16:53,380
to the more registries speeding up the

00:16:51,200 --> 00:16:53,380
build

00:16:54,470 --> 00:17:00,959
another aegis if H is immolating

00:16:57,540 --> 00:17:03,420
reinvesting in faux intestine is the

00:17:00,959 --> 00:17:06,000
technique used for tells whether the

00:17:03,420 --> 00:17:07,860
entire application the flow behaves as

00:17:06,000 --> 00:17:10,559
expected from start to finish

00:17:07,860 --> 00:17:13,589
speaking in OGS means that the package

00:17:10,559 --> 00:17:15,420
should be tested exactly as we expect to

00:17:13,589 --> 00:17:18,000
be consumed with real-life tooling

00:17:15,420 --> 00:17:18,900
without machina stuff with a real

00:17:18,000 --> 00:17:21,860
package manager

00:17:18,900 --> 00:17:24,439
are we unrealistic for instance many

00:17:21,860 --> 00:17:28,319
noisiest models are thin lives

00:17:24,439 --> 00:17:31,980
command-line interfaces like WebEx Li

00:17:28,319 --> 00:17:34,590
angular CLI and so on so those can be

00:17:31,980 --> 00:17:36,630
only tested via human interaction and

00:17:34,590 --> 00:17:41,850
only with Antoine testing you can have

00:17:36,630 --> 00:17:45,210
feeling of real testing so how to test a

00:17:41,850 --> 00:17:46,860
package with Barocci nutters runner at

00:17:45,210 --> 00:17:51,059
first first of all you need a real

00:17:46,860 --> 00:17:52,950
takács manager um any of them all and

00:17:51,059 --> 00:17:56,100
second steps you need to publish the

00:17:52,950 --> 00:17:57,570
package to registry and then in this

00:17:56,100 --> 00:17:59,760
case but watch it because dependence is

00:17:57,570 --> 00:18:01,410
quite easy to integrate and the first

00:17:59,760 --> 00:18:03,720
step is run the test in this case we're

00:18:01,410 --> 00:18:05,580
gonna use chess so here we have an

00:18:03,720 --> 00:18:08,370
example you can see the source code in

00:18:05,580 --> 00:18:10,410
the mud virtual organization i created

00:18:08,370 --> 00:18:12,090
it's a small july which actually only

00:18:10,410 --> 00:18:17,510
calculate the area and require two

00:18:12,090 --> 00:18:19,880
arguments wave and hank so

00:18:17,510 --> 00:18:22,309
first of all you need for previously

00:18:19,880 --> 00:18:24,020
using the model Chile process in

00:18:22,309 --> 00:18:25,400
combination with the required bird as

00:18:24,020 --> 00:18:27,500
sure as the pendency with a few

00:18:25,400 --> 00:18:31,669
arguments later location of your config

00:18:27,500 --> 00:18:33,440
file in the book mode and you only need

00:18:31,669 --> 00:18:35,480
to await

00:18:33,440 --> 00:18:37,880
jujin - you need to wait the message

00:18:35,480 --> 00:18:39,590
when the range 3 has a booted and then

00:18:37,880 --> 00:18:43,549
you can grab this in a promise and then

00:18:39,590 --> 00:18:47,380
await it and just do it in the before or

00:18:43,549 --> 00:18:47,380
the first section and just a simple

00:18:47,650 --> 00:18:53,390
second step will be published into

00:18:50,450 --> 00:18:56,720
package - potassium for this we can use

00:18:53,390 --> 00:18:59,480
except on from chill process again to

00:18:56,720 --> 00:19:03,050
execute an external application in this

00:18:59,480 --> 00:19:07,000
case NPM and hereafter using a registry

00:19:03,050 --> 00:19:07,000
flock always in - always

00:19:07,719 --> 00:19:13,129
the first step is install the CLI and a

00:19:10,700 --> 00:19:15,229
specific location using specific

00:19:13,129 --> 00:19:18,979
arguments like the registry that we want

00:19:15,229 --> 00:19:21,139
to fetch and the prefix where I decide

00:19:18,979 --> 00:19:23,089
where I want instant my package

00:19:21,139 --> 00:19:25,740
in this case I will read in the

00:19:23,089 --> 00:19:28,830
temporary folder

00:19:25,740 --> 00:19:32,590
the last step is running the CLI and

00:19:28,830 --> 00:19:34,960
even from my parish location and in I'm

00:19:32,590 --> 00:19:37,540
using excel file again but in this step

00:19:34,960 --> 00:19:40,180
I want to know the output so I did a to

00:19:37,540 --> 00:19:42,690
return STD out and I watched my

00:19:40,180 --> 00:19:45,730
expectations after ah after that and

00:19:42,690 --> 00:19:49,620
don't forget to kill the registry in

00:19:45,730 --> 00:19:49,620
after he freeze order death

00:19:50,419 --> 00:19:55,980
but as reports plugins and on this is

00:19:54,240 --> 00:19:59,159
Pacifica scenario a missile storage

00:19:55,980 --> 00:20:01,610
memory which the objective to run my

00:19:59,159 --> 00:20:04,399
disaster

00:20:01,610 --> 00:20:06,919
another level is authentication here I'm

00:20:04,399 --> 00:20:09,169
installing a second plugin and having or

00:20:06,919 --> 00:20:11,929
having all the rich all the expensive

00:20:09,169 --> 00:20:14,919
that's running in memory will help you

00:20:11,929 --> 00:20:14,919
to run the DES faster

00:20:14,970 --> 00:20:20,230
every product has a particular setup and

00:20:17,740 --> 00:20:21,250
in open-source you can find many useless

00:20:20,230 --> 00:20:24,100
labor that you

00:20:21,250 --> 00:20:26,260
for instance bubble yes I will totally

00:20:24,100 --> 00:20:28,810
recommend you check out is parade and

00:20:26,260 --> 00:20:33,060
see how there's their setup looks like

00:20:28,810 --> 00:20:33,060
is really simple and it's very -

00:20:33,409 --> 00:20:38,129
when we are near the end of the stock

00:20:36,149 --> 00:20:41,609
huh but two more things you're a poor

00:20:38,129 --> 00:20:44,279
finish I will highlight her from this

00:20:41,609 --> 00:20:46,859
quote a small part of the tweet or from

00:20:44,279 --> 00:20:48,509
material cleaner about this topic having

00:20:46,859 --> 00:20:51,210
a private registry should be installed

00:20:48,509 --> 00:20:53,220
and a view has seen a registry is an

00:20:51,210 --> 00:20:56,159
important piece of a critical path of

00:20:53,220 --> 00:20:57,720
building your app and I hope after this

00:20:56,159 --> 00:21:01,009
time you have a different vision of

00:20:57,720 --> 00:21:01,009
about it registries

00:21:01,330 --> 00:21:08,810
litter Sumari probably really give two

00:21:06,500 --> 00:21:11,150
more flexibility and being able to

00:21:08,810 --> 00:21:14,750
automate tasks and orders for the

00:21:11,150 --> 00:21:17,150
belonging purposes i keep all the

00:21:14,750 --> 00:21:20,240
confession in the server side don't put

00:21:17,150 --> 00:21:24,890
unnecessary waste in in in developers

00:21:20,240 --> 00:21:28,010
shoulders cache all the things with a

00:21:24,890 --> 00:21:30,880
priority and don't block the team from

00:21:28,010 --> 00:21:30,880
building their apps

00:21:30,920 --> 00:21:36,830
started s new packages shipped

00:21:33,240 --> 00:21:36,830
confidence before split

00:21:37,070 --> 00:21:42,150
so that's all thank you so much

00:21:39,900 --> 00:21:44,550
you can find more documentation in the

00:21:42,150 --> 00:21:47,190
fitness your website also you can reach

00:21:44,550 --> 00:21:50,360
me out via Twitter developer or just

00:21:47,190 --> 00:21:52,830
follow me on github under avocado

00:21:50,360 --> 00:21:55,130
looking forward for your questions thank

00:21:52,830 --> 00:21:55,130
you so much

00:21:55,900 --> 00:21:57,960
you

00:21:59,890 --> 00:22:01,950

YouTube URL: https://www.youtube.com/watch?v=oVCjDWeehAQ


