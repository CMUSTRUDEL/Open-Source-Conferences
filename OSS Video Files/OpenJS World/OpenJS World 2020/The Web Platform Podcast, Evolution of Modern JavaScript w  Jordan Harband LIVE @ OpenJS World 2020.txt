Title: The Web Platform Podcast, Evolution of Modern JavaScript w  Jordan Harband LIVE @ OpenJS World 2020
Publication date: 2020-06-24
Playlist: OpenJS World 2020
Description: 
	Evolution of Modern JavaScript with Jordan Harband LIVE @ OpenJS World 2020

To say the way we use and write JavaScript has evolved since the launch of ES2015 is an understatement. Atomics, TypedArrays, globalThis, and function generators are just a few ways JavaScript has grown up to meet the needs of a growing web platform. But it's not just language that has evolved, it's our entire toolchain as we have come to rely on compiled JavaScript as the "new normal".  Join for a very special episode of The Web Platform podcast as we discuss all this and more with our invited expert on all things ECMA - Jordan Harband at OpenJS World 2020.
Captions: 
	00:00:00,140 --> 00:00:05,819
yes we're live yes okay hi everyone

00:00:03,440 --> 00:00:06,150
we're so excited to be here with you

00:00:05,819 --> 00:00:08,220
today

00:00:06,150 --> 00:00:12,990
my name is a Malthusian I'm with my

00:00:08,220 --> 00:00:16,109
co-host Danny blue hey everybody and we

00:00:12,990 --> 00:00:18,330
are part of the web platform podcast and

00:00:16,109 --> 00:00:20,580
we're super excited today to be talking

00:00:18,330 --> 00:00:22,890
to y'all about all things JavaScript

00:00:20,580 --> 00:00:26,039
with mr. JavaScript himself

00:00:22,890 --> 00:00:27,420
Jordan Harve and it will get to Jordan

00:00:26,039 --> 00:00:29,609
in a bit but what we're gonna be talking

00:00:27,420 --> 00:00:32,040
about today is really how the language

00:00:29,609 --> 00:00:35,100
has changed in the past five years

00:00:32,040 --> 00:00:36,350
javascript has all grown up you know

00:00:35,100 --> 00:00:38,760
gone are the days of just you know

00:00:36,350 --> 00:00:42,540
inlining your JavaScript and a script

00:00:38,760 --> 00:00:45,149
tag and so we're gonna be exploring all

00:00:42,540 --> 00:00:48,239
the ways that the language has evolved

00:00:45,149 --> 00:00:53,039
and I'm just really how that's shifted

00:00:48,239 --> 00:00:55,230
our just the culture around how we build

00:00:53,039 --> 00:00:57,629
modern web applications so we have a lot

00:00:55,230 --> 00:01:01,320
to talk about in 40 minutes so it's a

00:00:57,629 --> 00:01:03,600
tall order Jordan no pressure but with

00:01:01,320 --> 00:01:05,339
that said let's let's let's get started

00:01:03,600 --> 00:01:08,930
so welcome Jordan hello tell us a little

00:01:05,339 --> 00:01:12,659
bit about yourself hi thank you yeah

00:01:08,930 --> 00:01:15,000
let's see I've been on tc39 the

00:01:12,659 --> 00:01:15,659
committee that writes the specification

00:01:15,000 --> 00:01:18,869
for JavaScript

00:01:15,659 --> 00:01:22,040
since 2014 it's been a while I've been

00:01:18,869 --> 00:01:24,840
an editor for two and a half years or so

00:01:22,040 --> 00:01:31,400
I maintain a lot of open source

00:01:24,840 --> 00:01:33,659
libraries yeah probably too many and

00:01:31,400 --> 00:01:35,490
yeah I've been doing JavaScript a very

00:01:33,659 --> 00:01:38,130
long time yeah and you're really

00:01:35,490 --> 00:01:41,280
involved with tc39 is that right yeah I

00:01:38,130 --> 00:01:44,250
spend we have six meetings a year that

00:01:41,280 --> 00:01:46,439
are about you know 20 plus hours each

00:01:44,250 --> 00:01:49,079
time and there's a bunch of in-between

00:01:46,439 --> 00:01:51,030
meeting work on it and I've had a bunch

00:01:49,079 --> 00:01:53,600
of proposals advanced as an editor I

00:01:51,030 --> 00:01:55,439
have to review everyone else's proposals

00:01:53,600 --> 00:01:58,290
it's definitely a lot of work but

00:01:55,439 --> 00:02:01,140
luckily Android yeah and so for those of

00:01:58,290 --> 00:02:03,630
you who aren't familiar tc39 is the

00:02:01,140 --> 00:02:06,210
committee that's in charge of its

00:02:03,630 --> 00:02:08,369
nearing the technical direction for the

00:02:06,210 --> 00:02:10,560
ACMA script language specification which

00:02:08,369 --> 00:02:13,380
is you know basically the JavaScript

00:02:10,560 --> 00:02:15,990
standard and Jordan has been

00:02:13,380 --> 00:02:19,170
one of the editors of the standard since

00:02:15,990 --> 00:02:21,840
2018 so you know we're really excited to

00:02:19,170 --> 00:02:23,550
have him here today and so I'm gonna

00:02:21,840 --> 00:02:27,420
start with my first question Jordan

00:02:23,550 --> 00:02:29,760
which is you know a lot of the new

00:02:27,420 --> 00:02:33,510
language features since 2015 I feel like

00:02:29,760 --> 00:02:36,720
are they fit into a gamut of things we

00:02:33,510 --> 00:02:41,210
have syntactic sugar you know for things

00:02:36,720 --> 00:02:43,320
like classes we have you know language

00:02:41,210 --> 00:02:45,090
extensions - you know arrays and strings

00:02:43,320 --> 00:02:46,380
and all these other cool things and we

00:02:45,090 --> 00:02:48,090
have a bunch of things that look like

00:02:46,380 --> 00:02:50,070
it's you know for JavaScript on the

00:02:48,090 --> 00:02:53,190
server and so um can you just talk a

00:02:50,070 --> 00:02:55,170
little bit about like how you know how

00:02:53,190 --> 00:02:57,510
that kind of has come to be you know do

00:02:55,170 --> 00:03:00,090
you think that node has really pushed

00:02:57,510 --> 00:03:04,320
the envelope with JavaScript the

00:03:00,090 --> 00:03:08,580
language and yeah well so things changed

00:03:04,320 --> 00:03:10,050
a lot after es2015 es6 right the process

00:03:08,580 --> 00:03:13,230
for getting changes into the language

00:03:10,050 --> 00:03:15,500
before that was essentially a bunch of

00:03:13,230 --> 00:03:17,550
smart people in the room who had

00:03:15,500 --> 00:03:20,970
overlapping and also conflicting

00:03:17,550 --> 00:03:22,680
priorities would just kind of talk about

00:03:20,970 --> 00:03:24,300
their ideas and and there's a lot of

00:03:22,680 --> 00:03:27,300
debate and you know arguing and bike

00:03:24,300 --> 00:03:29,280
shedding and it took many many years to

00:03:27,300 --> 00:03:34,200
get a standard together the previous

00:03:29,280 --> 00:03:37,670
version before yes 2015 was from 2011

00:03:34,200 --> 00:03:40,050
which was es 5.1 so that's four years

00:03:37,670 --> 00:03:42,720
between you know producing any

00:03:40,050 --> 00:03:45,630
specification but the process that that

00:03:42,720 --> 00:03:47,720
group came up with before I joined -

00:03:45,630 --> 00:03:50,670
which would take effect after es 2015

00:03:47,720 --> 00:03:54,560
has a bunch of concrete stages which

00:03:50,670 --> 00:03:56,550
include specific entrance criteria and

00:03:54,560 --> 00:03:59,100
explanations of what's expected during

00:03:56,550 --> 00:04:00,870
the eight stage and part of that is that

00:03:59,100 --> 00:04:02,940
there has to be shipping implementations

00:04:00,870 --> 00:04:05,640
before it lands in the standard which

00:04:02,940 --> 00:04:08,610
was not the case before hand so the

00:04:05,640 --> 00:04:10,740
there are things that from es 2015 that

00:04:08,610 --> 00:04:13,770
virtually no browser has ships for

00:04:10,740 --> 00:04:15,030
example and that is partially because in

00:04:13,770 --> 00:04:17,160
the old stage process that wasn't a

00:04:15,030 --> 00:04:19,859
requirement so I think that what that

00:04:17,160 --> 00:04:21,810
means is that in the current process the

00:04:19,859 --> 00:04:24,360
things that land in the language have

00:04:21,810 --> 00:04:26,760
been vetted to a much larger degree and

00:04:24,360 --> 00:04:29,330
with a lot more people and a lot more

00:04:26,760 --> 00:04:32,820
constituencies and that includes node

00:04:29,330 --> 00:04:35,070
node has always been considered in the

00:04:32,820 --> 00:04:37,040
committee but has not really ever had

00:04:35,070 --> 00:04:40,380
any official representation or even any

00:04:37,040 --> 00:04:42,690
you know a direct representation from

00:04:40,380 --> 00:04:44,970
people that have a voice in node until

00:04:42,690 --> 00:04:47,160
if you know a number of years ago and I

00:04:44,970 --> 00:04:49,730
think the posts es2015 process has

00:04:47,160 --> 00:04:53,100
helped a lot with that

00:04:49,730 --> 00:04:55,260
so Amol mentioned okay one

00:04:53,100 --> 00:04:56,970
I did not realize so I've known about

00:04:55,260 --> 00:04:59,540
the stages and things like that I did

00:04:56,970 --> 00:05:01,830
not realize that those were that new

00:04:59,540 --> 00:05:03,720
we're getting things into the language

00:05:01,830 --> 00:05:05,520
that's because we've talked about like

00:05:03,720 --> 00:05:08,640
specs and that kind of stuff on this

00:05:05,520 --> 00:05:10,170
show quite a bit uh and I guess I guess

00:05:08,640 --> 00:05:11,910
just at the point I started paying

00:05:10,170 --> 00:05:14,610
attention to that sort of thing they

00:05:11,910 --> 00:05:18,030
were always there so that I actually

00:05:14,610 --> 00:05:19,440
find that very very interesting um one

00:05:18,030 --> 00:05:21,390
question I have about I guess like the

00:05:19,440 --> 00:05:23,100
specs and you know like needing

00:05:21,390 --> 00:05:25,740
implementations and stuff like that it

00:05:23,100 --> 00:05:28,200
Amol mentioned that there are two

00:05:25,740 --> 00:05:29,420
different sorts of of things right there

00:05:28,200 --> 00:05:32,970
some things it seems to be largely

00:05:29,420 --> 00:05:35,280
largely syntactic sugar and then that

00:05:32,970 --> 00:05:37,680
might not be 100% accurate but things

00:05:35,280 --> 00:05:39,630
like but with things like classes and

00:05:37,680 --> 00:05:42,330
then there are other completely new

00:05:39,630 --> 00:05:45,150
things that aren't you like really

00:05:42,330 --> 00:05:47,610
weren't possible before is the proposal

00:05:45,150 --> 00:05:49,290
process different for those sorts of

00:05:47,610 --> 00:05:50,970
things like it's just one shoot like

00:05:49,290 --> 00:05:52,890
this one slide through not slide through

00:05:50,970 --> 00:05:54,690
but just one get through a good bit

00:05:52,890 --> 00:05:56,130
easier than the other so like it's like

00:05:54,690 --> 00:05:58,650
a major language extension or something

00:05:56,130 --> 00:06:01,800
like that more difficult to get through

00:05:58,650 --> 00:06:07,380
standards then then something that is

00:06:01,800 --> 00:06:08,370
more or less sugar so there there are

00:06:07,380 --> 00:06:11,250
definitely some things that slide

00:06:08,370 --> 00:06:13,260
through more easily right the one that

00:06:11,250 --> 00:06:16,230
was a real quick one was optional catch

00:06:13,260 --> 00:06:17,940
bindings because all of us in the room

00:06:16,230 --> 00:06:20,160
had had that problem where we had this

00:06:17,940 --> 00:06:22,170
exception variable that we didn't need

00:06:20,160 --> 00:06:25,140
and it was gross and ugly and you know

00:06:22,170 --> 00:06:28,020
we just kind of ignored it and removing

00:06:25,140 --> 00:06:29,310
a binding is like like it was just it

00:06:28,020 --> 00:06:30,450
was kind of a no brainer like it didn't

00:06:29,310 --> 00:06:31,980
it wasn't controversial that went

00:06:30,450 --> 00:06:33,870
through really quickly there were some

00:06:31,980 --> 00:06:35,520
API methods like object dot values and

00:06:33,870 --> 00:06:36,780
object ID entries that were able to get

00:06:35,520 --> 00:06:38,520
in pretty quickly because object that

00:06:36,780 --> 00:06:39,780
Keys was already there there are

00:06:38,520 --> 00:06:40,650
complements there was already a

00:06:39,780 --> 00:06:42,690
precedent of that

00:06:40,650 --> 00:06:43,979
triplet of methods from other things it

00:06:42,690 --> 00:06:48,000
just kind of moved through pretty

00:06:43,979 --> 00:06:51,229
quickly so but the the difficulty for

00:06:48,000 --> 00:06:53,970
adding new language capabilities is

00:06:51,229 --> 00:06:55,740
making sure it's impossible to implement

00:06:53,970 --> 00:06:57,090
it in a performant way right and the

00:06:55,740 --> 00:06:58,500
browser's all in representatives in the

00:06:57,090 --> 00:07:01,410
room as does node and so we have to make

00:06:58,500 --> 00:07:03,810
sure that that's the case there's also a

00:07:01,410 --> 00:07:06,090
kind of security and encapsulation level

00:07:03,810 --> 00:07:09,240
concerns no kind of Oh cap stuff and

00:07:06,090 --> 00:07:11,009
other things that you know where folks

00:07:09,240 --> 00:07:11,820
are trying to run untrusted JavaScript

00:07:11,009 --> 00:07:13,650
code and they want to be able to

00:07:11,820 --> 00:07:15,000
maintain the security of that like

00:07:13,650 --> 00:07:17,220
Salesforce has a whole platform where

00:07:15,000 --> 00:07:21,419
anyone can put JavaScript into it and

00:07:17,220 --> 00:07:22,919
run it on people's web pages so but like

00:07:21,419 --> 00:07:24,060
but with syntactic sugar people are

00:07:22,919 --> 00:07:26,880
still bike shedding about what it looks

00:07:24,060 --> 00:07:28,889
like so it's I wouldn't go as far as

00:07:26,880 --> 00:07:30,900
saying that sugar is easy just that it's

00:07:28,889 --> 00:07:35,490
a different kind of debate than

00:07:30,900 --> 00:07:37,500
low-level primitive features yeah that

00:07:35,490 --> 00:07:39,810
makes a lot of sense Jordan so I think

00:07:37,500 --> 00:07:41,880
promise all settled is another one that

00:07:39,810 --> 00:07:44,400
I can think of as I remember just

00:07:41,880 --> 00:07:46,199
learning about that a year ago as a

00:07:44,400 --> 00:07:48,270
proposal and it's already in the

00:07:46,199 --> 00:07:50,940
language now it's just I think that that

00:07:48,270 --> 00:07:52,410
went super fast and I think it's true it

00:07:50,940 --> 00:07:53,669
feels like you're right like some some

00:07:52,410 --> 00:07:56,159
language features are just like a common

00:07:53,669 --> 00:08:00,090
sense you know Brandon Ike forgot to do

00:07:56,159 --> 00:08:02,400
this or no like just like duh and there

00:08:00,090 --> 00:08:03,840
isn't much deliberation about that but I

00:08:02,400 --> 00:08:06,349
think I want to kind of get back to a

00:08:03,840 --> 00:08:10,050
point that you brought up earlier around

00:08:06,349 --> 00:08:11,940
just performance and implementation and

00:08:10,050 --> 00:08:15,900
you know what the consequences of that

00:08:11,940 --> 00:08:18,590
are kid like the committee is made up of

00:08:15,900 --> 00:08:20,940
implementers right so implementers being

00:08:18,590 --> 00:08:23,520
folks that are writing the compilers

00:08:20,940 --> 00:08:27,680
that JavaScript runs on so folks from

00:08:23,520 --> 00:08:31,590
the v8 team SpiderMonkey chakracore

00:08:27,680 --> 00:08:33,630
javascriptcore so there's implementers

00:08:31,590 --> 00:08:36,450
and then there's you know just like

00:08:33,630 --> 00:08:37,680
language nerds you know sorry to find a

00:08:36,450 --> 00:08:39,060
better better word

00:08:37,680 --> 00:08:41,039
you know the representatives from other

00:08:39,060 --> 00:08:43,440
you know lots of companies and then then

00:08:41,039 --> 00:08:44,970
you have kind of practitioners right so

00:08:43,440 --> 00:08:48,180
you have like a web developers you know

00:08:44,970 --> 00:08:49,350
these experts seasoned folks and so

00:08:48,180 --> 00:08:51,060
there's this interesting kind of like

00:08:49,350 --> 00:08:52,770
trifecta and like this little tension

00:08:51,060 --> 00:08:54,330
and push-pull between these three groups

00:08:52,770 --> 00:08:55,860
can you kind of speak to a

00:08:54,330 --> 00:08:58,140
to that a little bit before we move on

00:08:55,860 --> 00:09:01,200
from this

00:08:58,140 --> 00:09:03,029
so actually I think that the tensions

00:09:01,200 --> 00:09:06,180
you're describing is it's sort of a game

00:09:03,029 --> 00:09:08,370
theory right the browsers for the like

00:09:06,180 --> 00:09:10,940
the browsers don't have to follow the

00:09:08,370 --> 00:09:13,680
standard right I mean there's no like

00:09:10,940 --> 00:09:15,600
like use of force to make them do it

00:09:13,680 --> 00:09:16,740
they are choosing to do it they're

00:09:15,600 --> 00:09:18,029
choosing to do it because they think

00:09:16,740 --> 00:09:19,529
that it makes the web better for

00:09:18,029 --> 00:09:22,440
everyone and they think that it mean

00:09:19,529 --> 00:09:26,149
will make their users happier and it

00:09:22,440 --> 00:09:29,459
also I think frees them up to compete on

00:09:26,149 --> 00:09:31,529
you know other things then what's

00:09:29,459 --> 00:09:32,810
javascript right they can compete on

00:09:31,529 --> 00:09:35,040
performance they can compete on

00:09:32,810 --> 00:09:39,750
synchronization features and things like

00:09:35,040 --> 00:09:41,040
that but there's because they are

00:09:39,750 --> 00:09:43,680
choosing to comply with the

00:09:41,040 --> 00:09:46,050
specification that also means that folks

00:09:43,680 --> 00:09:47,910
that aren't browsers can't sail into the

00:09:46,050 --> 00:09:49,769
committee and be like screw you browsers

00:09:47,910 --> 00:09:51,300
this is what we want in the language so

00:09:49,769 --> 00:09:57,660
it's a it's kind of a delicate dance

00:09:51,300 --> 00:10:00,240
where the browser's don't want to for

00:09:57,660 --> 00:10:01,740
many reasons they don't want to say to

00:10:00,240 --> 00:10:05,640
kind of ignore opinions that aren't

00:10:01,740 --> 00:10:08,880
their own but neither can anyone ignore

00:10:05,640 --> 00:10:10,440
browser opinions and so everyone has to

00:10:08,880 --> 00:10:12,510
sort of convince everyone in the room

00:10:10,440 --> 00:10:14,180
browsers and community folks alike and

00:10:12,510 --> 00:10:17,459
there's often overlap between those

00:10:14,180 --> 00:10:21,209
between that the feature being proposed

00:10:17,459 --> 00:10:23,610
is good for JavaScript but also good for

00:10:21,209 --> 00:10:25,649
the web because javascript is larger

00:10:23,610 --> 00:10:29,430
than the web but the web is very very

00:10:25,649 --> 00:10:33,060
large so it's it's it's tough to find a

00:10:29,430 --> 00:10:35,130
sort of coexistence sometimes between

00:10:33,060 --> 00:10:38,240
those things and that's the that's a lot

00:10:35,130 --> 00:10:38,240
of the work that we have to do

00:10:40,539 --> 00:10:46,549
very cool

00:10:43,189 --> 00:10:48,379
yeah that is Internet I'll like I'm

00:10:46,549 --> 00:10:49,970
realizing a lot of things in this

00:10:48,379 --> 00:10:51,379
discussion already that I didn't really

00:10:49,970 --> 00:10:53,029
think about like the fact that you just

00:10:51,379 --> 00:10:57,199
said he's like the browser's don't have

00:10:53,029 --> 00:10:58,970
to do what we say to do and that makes

00:10:57,199 --> 00:11:01,489
sense but I never thought about that

00:10:58,970 --> 00:11:03,279
before but it's but it's absolutely true

00:11:01,489 --> 00:11:05,809
that's that's very very interesting

00:11:03,279 --> 00:11:09,369
pretty sure tail call optimization is

00:11:05,809 --> 00:11:11,779
still only valid in Safari are

00:11:09,369 --> 00:11:13,579
implemented in Safari I think it's

00:11:11,779 --> 00:11:15,109
implemented in chrome behind a flag if I

00:11:13,579 --> 00:11:16,699
remember correctly I think chrome is

00:11:15,109 --> 00:11:18,889
long since removed the implementation

00:11:16,699 --> 00:11:20,119
yeah I believe so far is the only

00:11:18,889 --> 00:11:21,919
browser that ships proper tail calls

00:11:20,119 --> 00:11:24,049
right now yeah which means technically

00:11:21,919 --> 00:11:25,909
people might get ready for your minds to

00:11:24,049 --> 00:11:30,379
be blown I think Safari is the only

00:11:25,909 --> 00:11:34,029
fully mustard 15 compliant browser am i

00:11:30,379 --> 00:11:39,529
right I believe that that is correct

00:11:34,029 --> 00:11:41,629
yeah actually another really interesting

00:11:39,529 --> 00:11:43,970
thing about Safari and please correct me

00:11:41,629 --> 00:11:46,939
if I'm wrong on this Jordan I think

00:11:43,970 --> 00:11:49,249
folks from the JavaScript core team if I

00:11:46,939 --> 00:11:50,809
remember correctly when when they're

00:11:49,249 --> 00:11:52,639
implementing new features they have

00:11:50,809 --> 00:11:54,379
really strict performance standards and

00:11:52,639 --> 00:11:55,909
so you know they can't implement

00:11:54,379 --> 00:11:58,069
something and have the engine be

00:11:55,909 --> 00:12:00,559
affected negatively at all and so

00:11:58,069 --> 00:12:02,059
they're really performance fanatics and

00:12:00,559 --> 00:12:03,649
that's really not the case and in v8 I

00:12:02,059 --> 00:12:08,749
think it's a little bit more at the Wild

00:12:03,649 --> 00:12:11,269
West there but is that true piece but I

00:12:08,749 --> 00:12:13,849
mean the the sense I've gotten from

00:12:11,269 --> 00:12:17,779
speaking to the implementers of JSC and

00:12:13,849 --> 00:12:19,549
v8 and so on is that they all have

00:12:17,779 --> 00:12:23,479
different tolerances for impacting

00:12:19,549 --> 00:12:26,689
performance but there are a lot of kind

00:12:23,479 --> 00:12:29,629
of scenarios or code paths where none of

00:12:26,689 --> 00:12:32,389
them will will work any slowdown of any

00:12:29,629 --> 00:12:35,389
kind I mean one of the big reasons that

00:12:32,389 --> 00:12:39,319
decorators didn't advance in its latest

00:12:35,389 --> 00:12:40,399
form was because a number of browser

00:12:39,319 --> 00:12:41,629
engines were concerned that they

00:12:40,399 --> 00:12:44,119
wouldn't be able to implement it in a

00:12:41,629 --> 00:12:46,850
way that would avoid slowing down non

00:12:44,119 --> 00:12:48,229
decorated classes right like they might

00:12:46,850 --> 00:12:50,059
have been willing to accept decorated

00:12:48,229 --> 00:12:52,670
classes being slow but not regular

00:12:50,059 --> 00:12:55,429
classes like getting slower

00:12:52,670 --> 00:12:56,720
so I think that the they're all pretty

00:12:55,429 --> 00:12:58,339
performance sensitive I mean this is

00:12:56,720 --> 00:12:59,540
like I was saying before it's a bit of a

00:12:58,339 --> 00:13:01,399
game theory right the browsers are all

00:12:59,540 --> 00:13:03,079
sort of competing with each other they

00:13:01,399 --> 00:13:04,579
all want people to use them and that

00:13:03,079 --> 00:13:06,559
means that they have to work the best on

00:13:04,579 --> 00:13:09,980
what on all the web pages somebody likes

00:13:06,559 --> 00:13:19,939
and the best is never going to be in

00:13:09,980 --> 00:13:20,929
slower for sure yeah I know I've said it

00:13:19,939 --> 00:13:24,049
a couple of times but I'm finding this

00:13:20,929 --> 00:13:25,759
into this entire conversation extremely

00:13:24,049 --> 00:13:27,319
fascinating for reasons that I thought

00:13:25,759 --> 00:13:29,749
it would be but not for reasons that

00:13:27,319 --> 00:13:33,949
it's that I am that I'm coming to

00:13:29,749 --> 00:13:39,589
realize so talking more about the the

00:13:33,949 --> 00:13:43,910
language itself so the language seems to

00:13:39,589 --> 00:13:48,319
be used maybe differently by save

00:13:43,910 --> 00:13:52,069
library authors and by end-users and

00:13:48,319 --> 00:13:55,549
there are certain features that seem

00:13:52,069 --> 00:13:59,119
like they are might not be used very

00:13:55,549 --> 00:14:01,220
often by me for example it just a just a

00:13:59,119 --> 00:14:03,079
just a lowly well web developer trying

00:14:01,220 --> 00:14:06,499
to build a website not used often by me

00:14:03,079 --> 00:14:07,999
but might be used by some of the big

00:14:06,499 --> 00:14:09,619
framework you know like some of the big

00:14:07,999 --> 00:14:12,769
frameworks or something like that um do

00:14:09,619 --> 00:14:14,839
you have any thoughts on kind of the way

00:14:12,769 --> 00:14:16,369
that those two egos I guess not to

00:14:14,839 --> 00:14:18,049
ecosystems but the way that those two

00:14:16,369 --> 00:14:20,389
groups kind of interact with the

00:14:18,049 --> 00:14:21,889
language and why it's different yeah I

00:14:20,389 --> 00:14:23,749
mean well I think even it's hard to

00:14:21,889 --> 00:14:25,129
predict in advance right like like fetch

00:14:23,749 --> 00:14:26,419
on the web that's design that was

00:14:25,129 --> 00:14:28,309
designed to be a low level primitive

00:14:26,419 --> 00:14:30,499
only for library authors but that is not

00:14:28,309 --> 00:14:32,239
how it's used everyone loves to use it

00:14:30,499 --> 00:14:35,269
directly but it was not never intended

00:14:32,239 --> 00:14:36,499
for that and so like like there's a lot

00:14:35,269 --> 00:14:40,220
of features like like symbols for

00:14:36,499 --> 00:14:46,529
example they're their primary value is

00:14:40,220 --> 00:14:48,180
in avoiding name collisions and the

00:14:46,529 --> 00:14:50,910
is particularly important for protocols

00:14:48,180 --> 00:14:52,410
like promises have dot then which means

00:14:50,910 --> 00:14:54,660
if you name a thing with a dot ven

00:14:52,410 --> 00:14:57,360
method you've just accidentally made a

00:14:54,660 --> 00:14:58,769
thing that's like a promise right but if

00:14:57,360 --> 00:15:00,540
you use it if you have a symbol for

00:14:58,769 --> 00:15:02,430
things like symbol dot iterator for the

00:15:00,540 --> 00:15:04,290
iterable protocol you can't accidentally

00:15:02,430 --> 00:15:05,069
make an iterable right you have to be

00:15:04,290 --> 00:15:08,160
doing it on purpose

00:15:05,069 --> 00:15:09,389
and so protocols work really well with

00:15:08,160 --> 00:15:14,160
symbols cuz they have to be intentional

00:15:09,389 --> 00:15:17,430
but protocols are often defined on a

00:15:14,160 --> 00:15:19,259
reusable piece of code and often those

00:15:17,430 --> 00:15:21,959
are libraries they may be inside an app

00:15:19,259 --> 00:15:24,660
right like you know the there's plenty

00:15:21,959 --> 00:15:26,910
of companies that have internal like

00:15:24,660 --> 00:15:28,499
reusable things but the number of

00:15:26,910 --> 00:15:30,569
developers in that company even that

00:15:28,499 --> 00:15:31,649
defines that code is very small whereas

00:15:30,569 --> 00:15:35,610
the number that consumes it would be

00:15:31,649 --> 00:15:37,680
very large so I think that there's just

00:15:35,610 --> 00:15:39,329
like there's tension between web folks

00:15:37,680 --> 00:15:43,620
and non web folks there's tension

00:15:39,329 --> 00:15:46,980
between you know library use cases and

00:15:43,620 --> 00:15:49,379
and user use cases where it's important

00:15:46,980 --> 00:15:51,750
to make we all want to make them both

00:15:49,379 --> 00:15:53,430
better but it's important to try to find

00:15:51,750 --> 00:15:55,709
a balance where you're not sacrificing

00:15:53,430 --> 00:15:57,480
the utility for one group in order to

00:15:55,709 --> 00:15:58,680
serve the other group and there's

00:15:57,480 --> 00:16:00,149
something the web has called the

00:15:58,680 --> 00:16:02,069
priority of constituency is this I think

00:16:00,149 --> 00:16:03,600
is really important that is brought up a

00:16:02,069 --> 00:16:05,910
lot in tc39 but isn't one of our like

00:16:03,600 --> 00:16:07,350
official principles or anything and I

00:16:05,910 --> 00:16:10,279
don't have it pulled up in front of me

00:16:07,350 --> 00:16:14,009
but it's something like users above

00:16:10,279 --> 00:16:16,470
authors above implementers above spec

00:16:14,009 --> 00:16:18,540
writers and it's it's basically saying

00:16:16,470 --> 00:16:20,610
like never make the spec easier to write

00:16:18,540 --> 00:16:22,559
at the cost of like making it harder to

00:16:20,610 --> 00:16:24,329
implement never make the implementation

00:16:22,559 --> 00:16:26,490
better at the cost of making it worse

00:16:24,329 --> 00:16:28,079
for people who write the code never make

00:16:26,490 --> 00:16:29,759
writing the code easier at the cost of

00:16:28,079 --> 00:16:31,949
making it worse for people who use the

00:16:29,759 --> 00:16:34,470
web right like it's I think that's my

00:16:31,949 --> 00:16:36,689
understanding of it anyway and I think

00:16:34,470 --> 00:16:39,809
thinking about problem about trade-offs

00:16:36,689 --> 00:16:42,360
in that context is really useful because

00:16:39,809 --> 00:16:45,689
it makes it clear when you are

00:16:42,360 --> 00:16:47,519
optimizing for the wrong thing the thing

00:16:45,689 --> 00:16:49,290
I say often is like don't optimize for

00:16:47,519 --> 00:16:50,459
writing code optimize for reading and

00:16:49,290 --> 00:16:52,139
understanding it because you write it

00:16:50,459 --> 00:16:54,870
once and you read it and maintain it a

00:16:52,139 --> 00:16:56,670
million times right and but it's really

00:16:54,870 --> 00:16:58,319
easy to make writing your code quicker

00:16:56,670 --> 00:17:00,209
and it makes it harder to understand

00:16:58,319 --> 00:17:04,079
later you know so it's the same

00:17:00,209 --> 00:17:07,289
challenged with language features well

00:17:04,079 --> 00:17:09,299
that was very deep very philosophical

00:17:07,289 --> 00:17:11,579
moment right now I feel like at mantra

00:17:09,299 --> 00:17:15,449
needs to be put on a t-shirt it should

00:17:11,579 --> 00:17:18,179
be like the tc39 slogan if you should

00:17:15,449 --> 00:17:20,760
make an acronym and I feel like that

00:17:18,179 --> 00:17:22,919
mantra is so powerful because I think I

00:17:20,760 --> 00:17:24,839
have personally actually always

00:17:22,919 --> 00:17:27,630
practiced that rule in the sense that

00:17:24,839 --> 00:17:30,029
you know I write code for other people

00:17:27,630 --> 00:17:32,340
to read and it's also for machines to

00:17:30,029 --> 00:17:34,760
process but people first right so I'm

00:17:32,340 --> 00:17:37,169
not gonna write the one-line fancy

00:17:34,760 --> 00:17:39,929
shortcuts if it makes it more difficult

00:17:37,169 --> 00:17:40,950
for me or others in the future to read

00:17:39,929 --> 00:17:42,330
and understand right

00:17:40,950 --> 00:17:44,429
so I all right Lebanon is an

00:17:42,330 --> 00:17:46,409
anti-pattern yeah exactly it can for you

00:17:44,429 --> 00:17:48,390
know don't be clever be verbose if you

00:17:46,409 --> 00:17:51,000
need to because it's a code is really a

00:17:48,390 --> 00:17:53,850
communication first right so I think

00:17:51,000 --> 00:17:55,860
that's super powerful but I've had this

00:17:53,850 --> 00:17:57,600
conversation with a couple people just

00:17:55,860 --> 00:17:59,580
in the past week where it's like if you

00:17:57,600 --> 00:18:02,130
do something and you think it's clever

00:17:59,580 --> 00:18:04,200
you probably shouldn't do it yeah

00:18:02,130 --> 00:18:05,940
because you're gonna forget it and then

00:18:04,200 --> 00:18:07,730
you're gonna shoot yourself in the foot

00:18:05,940 --> 00:18:11,100
first

00:18:07,730 --> 00:18:14,340
there's that other quote it's if if the

00:18:11,100 --> 00:18:16,200
code was as like when was it something

00:18:14,340 --> 00:18:17,970
like if it was it if it took all of your

00:18:16,200 --> 00:18:19,890
smarts to write it then you are bike

00:18:17,970 --> 00:18:25,529
like by definition not qualified to

00:18:19,890 --> 00:18:27,330
debug it yeah that's powerful but but

00:18:25,529 --> 00:18:29,700
but kind of getting to the you know

00:18:27,330 --> 00:18:31,620
Danny's earlier point around my language

00:18:29,700 --> 00:18:34,080
I mean things like symbols for me you

00:18:31,620 --> 00:18:35,520
know they they're they're it's just a

00:18:34,080 --> 00:18:38,130
lot of things I think that are either

00:18:35,520 --> 00:18:39,659
misunderstood or underutilized and

00:18:38,130 --> 00:18:41,279
perhaps that's okay because maybe that

00:18:39,659 --> 00:18:43,080
was the intention but you know for mass

00:18:41,279 --> 00:18:44,429
consumption but but if you feels like

00:18:43,080 --> 00:18:47,580
there are elements of the language which

00:18:44,429 --> 00:18:49,110
are certainly they feel very much

00:18:47,580 --> 00:18:51,029
oriented towards people that are

00:18:49,110 --> 00:18:53,399
creating libraries right so a pro

00:18:51,029 --> 00:18:58,559
proxies it's another good example of

00:18:53,399 --> 00:19:00,840
that and so you know any like not that I

00:18:58,559 --> 00:19:04,440
think there's analytics on this per se

00:19:00,840 --> 00:19:06,510
but you know I mean does it make sense

00:19:04,440 --> 00:19:09,690
that there's you know 80% of the people

00:19:06,510 --> 00:19:11,760
or most people are using like 20% of the

00:19:09,690 --> 00:19:13,649
language or what a perverse is you know

00:19:11,760 --> 00:19:14,460
I'm just just curious like if there if

00:19:13,649 --> 00:19:18,630
you have thoughts

00:19:14,460 --> 00:19:19,890
I mean I think that it's okay if there's

00:19:18,630 --> 00:19:21,810
features in the language that most

00:19:19,890 --> 00:19:24,120
people don't use right like proxy is is

00:19:21,810 --> 00:19:26,850
super in each one and you can do some

00:19:24,120 --> 00:19:29,190
really clever and hacky things with it

00:19:26,850 --> 00:19:31,130
but like its primary purpose as I

00:19:29,190 --> 00:19:34,410
understand it was adding some new

00:19:31,130 --> 00:19:37,290
previously impossible features to be

00:19:34,410 --> 00:19:38,340
used in concert with a concept called

00:19:37,290 --> 00:19:40,650
membranes that you have to build

00:19:38,340 --> 00:19:42,810
yourself and is really hard to build

00:19:40,650 --> 00:19:44,150
correctly so like anyone's interested go

00:19:42,810 --> 00:19:49,200
look up a library that does it already

00:19:44,150 --> 00:19:51,840
and but it's you can't really use proxy

00:19:49,200 --> 00:19:53,700
by itself for more than basic things

00:19:51,840 --> 00:19:56,880
unless you understand all those concepts

00:19:53,700 --> 00:19:57,960
which are beyond me so like I think it's

00:19:56,880 --> 00:19:59,790
fine because it's adding a new

00:19:57,960 --> 00:20:02,730
capability right like shared array

00:19:59,790 --> 00:20:04,260
buffers that's you know that's not a

00:20:02,730 --> 00:20:05,910
thing that most people are gonna run

00:20:04,260 --> 00:20:09,270
into but if it wasn't there

00:20:05,910 --> 00:20:11,160
or if it's then there's a lot of cross

00:20:09,270 --> 00:20:12,780
kind of cross threading speed ups that

00:20:11,160 --> 00:20:14,730
libraries won't be able to do in the

00:20:12,780 --> 00:20:15,960
future right like a shared array buffers

00:20:14,730 --> 00:20:17,520
are around for long enough then things

00:20:15,960 --> 00:20:19,650
like react or whatever will be able to

00:20:17,520 --> 00:20:21,570
speed up you know rendering and stuff

00:20:19,650 --> 00:20:23,880
like that I don't know so I think it's

00:20:21,570 --> 00:20:25,080
okay to do that because like the other

00:20:23,880 --> 00:20:27,900
thing on the web is we're working on a

00:20:25,080 --> 00:20:30,510
long time scale right like features that

00:20:27,900 --> 00:20:32,010
ship now websites unless they're fully

00:20:30,510 --> 00:20:35,250
trained spy level websites can't really

00:20:32,010 --> 00:20:37,770
ship them for many years there's still

00:20:35,250 --> 00:20:41,400
plenty of websites that have users on

00:20:37,770 --> 00:20:42,990
ie9 yeah yeah no no that's that's a

00:20:41,400 --> 00:20:44,550
really good point I mean I think we

00:20:42,990 --> 00:20:46,980
could talk for hours about like the

00:20:44,550 --> 00:20:49,170
bubble with modern web dev and like yeah

00:20:46,980 --> 00:20:51,000
I think it's I think someone has put up

00:20:49,170 --> 00:20:53,460
a photo recently where it's like you

00:20:51,000 --> 00:20:55,230
know here's the reality of the web most

00:20:53,460 --> 00:20:56,880
of its still on jQuery here's the

00:20:55,230 --> 00:20:58,220
reality of the jobs most of them want

00:20:56,880 --> 00:21:00,690
react developers you know

00:20:58,220 --> 00:21:01,830
so speaking of react developers you know

00:21:00,690 --> 00:21:03,570
I think you touched on a very

00:21:01,830 --> 00:21:05,250
controversial topic which is like this

00:21:03,570 --> 00:21:07,140
react rendering speed so I'm just gonna

00:21:05,250 --> 00:21:14,310
like backtrack out of there just X out

00:21:07,140 --> 00:21:16,470
real quick way into what Danny I wanted

00:21:14,310 --> 00:21:20,040
to talk about which is tooling right so

00:21:16,470 --> 00:21:22,230
we have all this like we have kind of

00:21:20,040 --> 00:21:24,390
made JavaScript impossible for newbies

00:21:22,230 --> 00:21:25,890
it's modern drama script what or the

00:21:24,390 --> 00:21:27,179
thing that we call modern JavaScript

00:21:25,890 --> 00:21:28,950
right so we

00:21:27,179 --> 00:21:31,139
it's like tooling it's not not even

00:21:28,950 --> 00:21:32,849
optional tooling required for the most

00:21:31,139 --> 00:21:35,279
part and there's certainly a movement

00:21:32,849 --> 00:21:37,080
and one that I wholeheartedly support

00:21:35,279 --> 00:21:39,719
and I'm excited about if people trying

00:21:37,080 --> 00:21:40,950
to kind of you know say you know I don't

00:21:39,719 --> 00:21:42,479
need it I want to try to build things

00:21:40,950 --> 00:21:44,399
without bundlers without transpilers

00:21:42,479 --> 00:21:46,529
like that's great right but but

00:21:44,399 --> 00:21:49,320
ultimately that's just not the reality

00:21:46,529 --> 00:21:50,489
that you see as mainstream adoption so

00:21:49,320 --> 00:21:53,399
like what are your thoughts on that I

00:21:50,489 --> 00:21:55,799
mean it's it's kind of scary and also

00:21:53,399 --> 00:21:59,429
awesome at the same time but also I

00:21:55,799 --> 00:22:02,940
can't Arab terribly terrifying for me I

00:21:59,429 --> 00:22:04,499
mean I grew up on B source right like

00:22:02,940 --> 00:22:08,549
that's part of the way I learned how to

00:22:04,499 --> 00:22:13,019
work on the web and I see a lot of folks

00:22:08,549 --> 00:22:15,389
who also did that and are saying like

00:22:13,019 --> 00:22:16,889
are kind of you know old man shaking

00:22:15,389 --> 00:22:18,179
fists at cloud about it and kind of like

00:22:16,889 --> 00:22:20,659
well things were better when I was young

00:22:18,179 --> 00:22:23,190
and like let's bring it back to that I

00:22:20,659 --> 00:22:25,649
liked that and that was approachable and

00:22:23,190 --> 00:22:27,389
that was great for new newcomers but at

00:22:25,649 --> 00:22:29,940
the same time it made it really hot like

00:22:27,389 --> 00:22:31,919
it was really hard back in the day to

00:22:29,940 --> 00:22:35,219
ship a website that worked on every web

00:22:31,919 --> 00:22:37,919
browser I mean I had a start-up ten

00:22:35,219 --> 00:22:41,309
years ago where we had to I wrote CSS

00:22:37,919 --> 00:22:44,519
hacks to target Firefox to 3.0 3.1 3.5

00:22:41,309 --> 00:22:45,570
like that's insane that's that's not I'm

00:22:44,519 --> 00:22:48,479
sorry that's that's not even the right

00:22:45,570 --> 00:22:50,309
turn that is a that is just an an

00:22:48,479 --> 00:22:52,799
inordinate amount of work in order to

00:22:50,309 --> 00:22:55,409
make sure that a webpage does not

00:22:52,799 --> 00:22:57,419
exclude users and I really think

00:22:55,409 --> 00:22:58,889
accessibility is the thing that people

00:22:57,419 --> 00:23:01,049
should focus on here and not to link

00:22:58,889 --> 00:23:03,389
complexity when you're making a website

00:23:01,049 --> 00:23:05,460
who are you excluding because it's

00:23:03,389 --> 00:23:06,899
always gonna be somebody right it's fine

00:23:05,460 --> 00:23:08,369
if the answer is people without

00:23:06,899 --> 00:23:09,869
computers right like maybe you can't do

00:23:08,369 --> 00:23:12,029
anything about that but like you know

00:23:09,869 --> 00:23:13,259
that you're never excluding nobody so

00:23:12,029 --> 00:23:16,200
you have to decide who you're

00:23:13,259 --> 00:23:18,659
comfortable excluding and there's a lot

00:23:16,200 --> 00:23:22,440
of people who have slow internet older

00:23:18,659 --> 00:23:24,659
machines cheap phones you know that just

00:23:22,440 --> 00:23:26,339
can't afford or don't know how to

00:23:24,659 --> 00:23:30,809
upgrade things their browser or their

00:23:26,339 --> 00:23:32,639
machine and the if you are handwriting

00:23:30,809 --> 00:23:35,070
all of your code and not using any

00:23:32,639 --> 00:23:36,719
tooling you are excluding a very large

00:23:35,070 --> 00:23:39,809
number of human beings off the internet

00:23:36,719 --> 00:23:40,890
it might be 2% of your analytics but

00:23:39,809 --> 00:23:43,170
that's like millions

00:23:40,890 --> 00:23:44,850
people potentially right and and so

00:23:43,170 --> 00:23:47,880
whenever these conversations happen at a

00:23:44,850 --> 00:23:48,900
in one of my jobs I try and change the

00:23:47,880 --> 00:23:50,160
discussion from talking about

00:23:48,900 --> 00:23:53,220
percentages to talking about a number of

00:23:50,160 --> 00:23:56,040
humans because you know 0.1% of the

00:23:53,220 --> 00:23:58,080
internet is like a very very large

00:23:56,040 --> 00:23:59,190
number of people and these people all

00:23:58,080 --> 00:24:00,450
are important and they're all

00:23:59,190 --> 00:24:03,000
individuals they all matter

00:24:00,450 --> 00:24:05,070
so like the thing that I think we really

00:24:03,000 --> 00:24:07,740
get about tooling and that's often often

00:24:05,070 --> 00:24:10,070
missed in these discussions of people

00:24:07,740 --> 00:24:13,470
trying to produce the complexity is

00:24:10,070 --> 00:24:16,370
build tooling allows you to not have to

00:24:13,470 --> 00:24:18,540
think about it and yet still support

00:24:16,370 --> 00:24:21,480
browsers that you aren't even capable of

00:24:18,540 --> 00:24:24,660
testing right it's fine if you don't

00:24:21,480 --> 00:24:26,580
want to support ie8 let's say but like

00:24:24,660 --> 00:24:29,660
the reason your site doesn't work in IE

00:24:26,580 --> 00:24:31,940
8 shouldn't be a trailing comma

00:24:29,660 --> 00:24:33,470
that is a completely ridiculous reason

00:24:31,940 --> 00:24:35,270
for your site to break there's lots of

00:24:33,470 --> 00:24:37,400
great reasons for your site to break let

00:24:35,270 --> 00:24:38,930
it be one of those right and a build

00:24:37,400 --> 00:24:40,370
tool and nothing you know nobody's

00:24:38,930 --> 00:24:42,320
really worried about i8 anymore but like

00:24:40,370 --> 00:24:46,160
a build tool that strips trailing commas

00:24:42,320 --> 00:24:48,890
was a pretty easy low-hanging fruit back

00:24:46,160 --> 00:24:50,120
at that time and similarly now like if

00:24:48,890 --> 00:24:51,290
you're just typing in arrow

00:24:50,120 --> 00:24:55,040
functions and you're shipping that to

00:24:51,290 --> 00:24:56,600
browsers I mean unless you need the very

00:24:55,040 --> 00:24:59,450
few parts of arrow functions that aren't

00:24:56,600 --> 00:25:00,860
syntactic sugar there's no like that

00:24:59,450 --> 00:25:03,470
shouldn't be the reason your website

00:25:00,860 --> 00:25:05,630
breaks just transpiler like just move on

00:25:03,470 --> 00:25:07,960
transpile them and like your site works

00:25:05,630 --> 00:25:10,520
for people can I play devil's advocate

00:25:07,960 --> 00:25:13,760
please actually Jenny do you want to go

00:25:10,520 --> 00:25:15,170
first no no no I want to get into more

00:25:13,760 --> 00:25:17,330
of the tooling stuff specific go ahead

00:25:15,170 --> 00:25:20,030
oh great phenomenal so I wanna put that

00:25:17,330 --> 00:25:22,520
with advocates oh so what if what if

00:25:20,030 --> 00:25:26,510
what if what if what if you could only

00:25:22,520 --> 00:25:28,760
use JavaScript in production that will

00:25:26,510 --> 00:25:30,560
not product I what if the JavaScript you

00:25:28,760 --> 00:25:33,530
write and the drama scripts to

00:25:30,560 --> 00:25:35,900
production matched in the sense that you

00:25:33,530 --> 00:25:38,420
you know you had to wait until browsers

00:25:35,900 --> 00:25:39,950
implemented things you know or you or

00:25:38,420 --> 00:25:42,530
you write your code in a way that's

00:25:39,950 --> 00:25:45,650
protective or whatever like but but you

00:25:42,530 --> 00:25:46,940
know like do we need to use the latest

00:25:45,650 --> 00:25:48,950
and greatest and greatest JavaScript

00:25:46,940 --> 00:25:51,590
like in web applications that to be

00:25:48,950 --> 00:25:53,060
quite frank like it's just you know

00:25:51,590 --> 00:25:54,260
you're making rest calls you know you're

00:25:53,060 --> 00:25:56,330
you're fetching data you're entering

00:25:54,260 --> 00:25:58,250
stuff like you know most people are not

00:25:56,330 --> 00:26:00,410
doing anything super fancy yeah we feel

00:25:58,250 --> 00:26:03,100
the need to use stage 0 features in

00:26:00,410 --> 00:26:05,090
production like I'm just you know I

00:26:03,100 --> 00:26:07,430
totally agree with actually with that

00:26:05,090 --> 00:26:09,560
actually I maintain over 250 NPM

00:26:07,430 --> 00:26:12,470
packages and I use Babylon two of them

00:26:09,560 --> 00:26:15,400
the rest of them I author in es3 they

00:26:12,470 --> 00:26:17,630
work in ie6 every single one of them and

00:26:15,400 --> 00:26:19,400
most of the time it takes no extra

00:26:17,630 --> 00:26:21,440
effort for me to do that when it does I

00:26:19,400 --> 00:26:24,170
may decide not to do it but like it's

00:26:21,440 --> 00:26:26,450
just easy and yes I don't get to use

00:26:24,170 --> 00:26:28,670
arrow functions and nice new syntax but

00:26:26,450 --> 00:26:31,400
I don't have to deal with any tooling

00:26:28,670 --> 00:26:33,290
complexity either now that said that's

00:26:31,400 --> 00:26:35,720
not a trade-off that most people seem

00:26:33,290 --> 00:26:38,390
willing to make everyone really likes

00:26:35,720 --> 00:26:40,550
the new shiny and they do not want to be

00:26:38,390 --> 00:26:43,070
forced to write what they see as

00:26:40,550 --> 00:26:45,409
outdated obsolete legacy code

00:26:43,070 --> 00:26:47,389
you know because of people who you know

00:26:45,409 --> 00:26:50,149
who should just upgrade their browser

00:26:47,389 --> 00:26:51,620
right and so that that's for me the

00:26:50,149 --> 00:26:55,899
tooling seems like a better compromise

00:26:51,620 --> 00:26:59,240
where the developers aren't forced to

00:26:55,899 --> 00:27:02,120
keep in their brains all of the quirks

00:26:59,240 --> 00:27:05,330
of the older engines but the users are

00:27:02,120 --> 00:27:07,820
not been punished yeah I know that and

00:27:05,330 --> 00:27:09,139
that makes sense that that's actually

00:27:07,820 --> 00:27:12,279
like I think the best argument that I've

00:27:09,139 --> 00:27:15,019
heard for tooling so thank you for that

00:27:12,279 --> 00:27:17,000
and to be really clear all of that

00:27:15,019 --> 00:27:18,980
should be easier right it should be

00:27:17,000 --> 00:27:21,049
easier to start I'm not saying that the

00:27:18,980 --> 00:27:21,799
current like learning curve is

00:27:21,049 --> 00:27:24,200
acceptable

00:27:21,799 --> 00:27:26,210
I'm only arguing for tooling yeah I'm

00:27:24,200 --> 00:27:29,330
gonna no no that that makes sense or I

00:27:26,210 --> 00:27:32,720
just a last joke that I want to say

00:27:29,330 --> 00:27:34,490
again I I'm like I always have to make

00:27:32,720 --> 00:27:37,879
really corny jokes on this show because

00:27:34,490 --> 00:27:39,409
you know you know because anyways but my

00:27:37,879 --> 00:27:41,539
corny joke is that you know web

00:27:39,409 --> 00:27:45,049
developers are a really self select

00:27:41,539 --> 00:27:47,629
group of people and they typically lean

00:27:45,049 --> 00:27:50,059
towards new bleeding edge you know so I

00:27:47,629 --> 00:27:51,950
think it's a lot to ask web developers

00:27:50,059 --> 00:27:55,070
you know people who live their life on

00:27:51,950 --> 00:27:57,230
the freaking edge of the world to wait

00:27:55,070 --> 00:27:59,720
you know so I think that's a text to

00:27:57,230 --> 00:28:03,470
keep in mind for like the dilemma of

00:27:59,720 --> 00:28:06,590
today you know Danny all you so what

00:28:03,470 --> 00:28:08,090
this leads in really well to the next

00:28:06,590 --> 00:28:11,539
thing that that I wanted to talk about

00:28:08,090 --> 00:28:13,399
which is about specific tools so

00:28:11,539 --> 00:28:17,899
specifically I want to talk about babble

00:28:13,399 --> 00:28:20,559
so transpilers have been around for a

00:28:17,899 --> 00:28:23,600
while I just had it on to my tongue

00:28:20,559 --> 00:28:26,690
tracer tracer was around before babble

00:28:23,600 --> 00:28:31,220
as like I don't know like that you know

00:28:26,690 --> 00:28:32,790
not a ton of people use but how kind of

00:28:31,220 --> 00:28:35,610
marring stuff we talk

00:28:32,790 --> 00:28:37,080
at the beginning respects and ease of

00:28:35,610 --> 00:28:39,980
use for developers that want to use

00:28:37,080 --> 00:28:41,160
shiny new things without impacting

00:28:39,980 --> 00:28:45,420
end-users

00:28:41,160 --> 00:28:48,870
how has Babel affected these standards

00:28:45,420 --> 00:28:50,400
process or has it affected it at all I'm

00:28:48,870 --> 00:28:51,840
asked her to say like before there were

00:28:50,400 --> 00:28:55,530
you know like there were no stages

00:28:51,840 --> 00:28:57,510
before now we now you can just go into

00:28:55,530 --> 00:29:00,090
babel presets and be like i want to use

00:28:57,510 --> 00:29:01,500
things that are at a stage zero or

00:29:00,090 --> 00:29:03,270
something like that if i want so can you

00:29:01,500 --> 00:29:05,460
just speak to that a little bit yeah

00:29:03,270 --> 00:29:09,420
Babel is I believe deprecated the stage

00:29:05,460 --> 00:29:10,890
presets thankfully because so I think

00:29:09,420 --> 00:29:14,430
Babel is massively affected it I think

00:29:10,890 --> 00:29:19,440
part of the reason is because folks have

00:29:14,430 --> 00:29:23,220
been very wanton in their usage of like

00:29:19,440 --> 00:29:25,470
early proposals I very strongly

00:29:23,220 --> 00:29:27,570
encourage everyone to never use anything

00:29:25,470 --> 00:29:31,590
in production until it's at least stage

00:29:27,570 --> 00:29:34,110
3 like you can play with some things

00:29:31,590 --> 00:29:36,360
before that but many things have changed

00:29:34,110 --> 00:29:39,060
drastically before then but as far as

00:29:36,360 --> 00:29:40,920
your question I think I mean back when

00:29:39,060 --> 00:29:41,910
when tracer was commonly used I don't

00:29:40,920 --> 00:29:44,940
even know if that's how you pronounce it

00:29:41,910 --> 00:29:47,250
but that's how I've always read it be I

00:29:44,940 --> 00:29:49,830
actually was vehemently opposed to

00:29:47,250 --> 00:29:54,030
transpilers that was my position for a

00:29:49,830 --> 00:29:55,260
long time I I did not like it I didn't

00:29:54,030 --> 00:29:56,070
like looking at the output and seeing

00:29:55,260 --> 00:29:58,410
that it was gross

00:29:56,070 --> 00:30:01,250
even when source maps came like it you

00:29:58,410 --> 00:30:06,440
know it isn't it doesn't totally fix it

00:30:01,250 --> 00:30:09,000
but I think that the the ability for

00:30:06,440 --> 00:30:11,310
syntactic features to get feedback

00:30:09,000 --> 00:30:15,000
before they actually land in the browser

00:30:11,310 --> 00:30:16,230
and are never able to be removed right

00:30:15,000 --> 00:30:18,510
because we can never break the web right

00:30:16,230 --> 00:30:20,220
then I the Space Jam website from 95 has

00:30:18,510 --> 00:30:24,080
to work forever like that is the mantra

00:30:20,220 --> 00:30:26,510
of the web right do not break the web so

00:30:24,080 --> 00:30:29,870
it's being able to get the sort of

00:30:26,510 --> 00:30:32,240
feedback on syntax before its final it's

00:30:29,870 --> 00:30:34,250
really critical it's not as big a deal

00:30:32,240 --> 00:30:35,779
for I mean Babel doesn't have only

00:30:34,250 --> 00:30:38,179
really transpiled syntax right the rest

00:30:35,779 --> 00:30:39,620
is you know shims and polyfills and you

00:30:38,179 --> 00:30:42,649
don't need Babel for that it just can

00:30:39,620 --> 00:30:44,299
also sometimes do it but simpson's

00:30:42,649 --> 00:30:45,890
polyfills have like are part of the

00:30:44,299 --> 00:30:49,159
stage process as well for some things

00:30:45,890 --> 00:30:53,600
they can count as implementations you

00:30:49,159 --> 00:30:55,519
know for stage three but I think that it

00:30:53,600 --> 00:30:58,309
would have been a real shame if we

00:30:55,519 --> 00:31:00,470
couldn't have had practice using class

00:30:58,309 --> 00:31:03,830
fields before it got to its current

00:31:00,470 --> 00:31:06,649
stage which is three that informed a lot

00:31:03,830 --> 00:31:10,100
of the discussions in some ways it also

00:31:06,649 --> 00:31:11,929
helped persuade detractors because a lot

00:31:10,100 --> 00:31:13,399
of people have intuitions about how

00:31:11,929 --> 00:31:15,950
confusing syntax is gonna be or how easy

00:31:13,399 --> 00:31:18,799
it's gonna be and often those intuitions

00:31:15,950 --> 00:31:21,559
can be wrong in both directions so for

00:31:18,799 --> 00:31:22,970
class fields we had five years of you

00:31:21,559 --> 00:31:24,950
know tens of thousands of developers

00:31:22,970 --> 00:31:27,309
using it putting it in documentation for

00:31:24,950 --> 00:31:29,899
public fields anyway right and and

00:31:27,309 --> 00:31:30,769
understanding how it worked and so when

00:31:29,899 --> 00:31:32,269
folks said well that's gonna be

00:31:30,769 --> 00:31:35,330
unintuitive because it violates this

00:31:32,269 --> 00:31:38,059
expectation we had a whole bunch of like

00:31:35,330 --> 00:31:40,340
use actual usage to show no it's not

00:31:38,059 --> 00:31:42,200
actually confusing maybe it confuses you

00:31:40,340 --> 00:31:45,159
but it doesn't confuse most people right

00:31:42,200 --> 00:31:48,590
and that ways into the discussion and

00:31:45,159 --> 00:31:52,580
you know without that that research

00:31:48,590 --> 00:31:53,809
right it's it's hard to know and like I

00:31:52,580 --> 00:31:56,059
mean we never really know right all

00:31:53,809 --> 00:31:57,559
these are guesses we're all trying to

00:31:56,059 --> 00:31:58,850
make the best guess as possible for

00:31:57,559 --> 00:32:00,919
what's good for the language and the

00:31:58,850 --> 00:32:02,120
more feedback and information we have

00:32:00,919 --> 00:32:03,710
the better decisions we can make

00:32:02,120 --> 00:32:06,350
and I think Babel helps with that so I'm

00:32:03,710 --> 00:32:08,360
like and Babel implementers or

00:32:06,350 --> 00:32:10,730
maintainer czar often in the tc39

00:32:08,360 --> 00:32:12,019
meetings so they're an active part of

00:32:10,730 --> 00:32:14,630
the process at this point which i think

00:32:12,019 --> 00:32:16,669
is very important so I want to clarify

00:32:14,630 --> 00:32:18,649
one thing that you said before we move

00:32:16,669 --> 00:32:20,539
on because I know we're I said we're

00:32:18,649 --> 00:32:23,149
also you're like her it feels like time

00:32:20,539 --> 00:32:26,179
is slipping away very quickly so so you

00:32:23,149 --> 00:32:28,700
said that polyfills can actually count

00:32:26,179 --> 00:32:32,539
as implementation in order to get to

00:32:28,700 --> 00:32:36,300
stage and work to get to switch four

00:32:32,539 --> 00:32:37,110
okay yeah so so

00:32:36,300 --> 00:32:39,330
because when I thought he said

00:32:37,110 --> 00:32:42,060
implementation and I had assumed that

00:32:39,330 --> 00:32:43,980
meant oh you need like a like a browser

00:32:42,060 --> 00:32:45,450
implement earth at a JavaScript engine

00:32:43,980 --> 00:32:47,460
implementation to do it but you're

00:32:45,450 --> 00:32:49,260
saying that is not the case this is the

00:32:47,460 --> 00:32:51,690
most contested part of the entire stage

00:32:49,260 --> 00:32:54,210
process it's defined vaguely in the

00:32:51,690 --> 00:32:55,800
process document on purpose because the

00:32:54,210 --> 00:32:58,610
group could not come to consensus and

00:32:55,800 --> 00:33:00,750
still can't about what it means

00:32:58,610 --> 00:33:03,750
essentially I think the exact wording is

00:33:00,750 --> 00:33:05,730
to shipping implementations such as a

00:33:03,750 --> 00:33:08,640
browser behind that it's not behind a

00:33:05,730 --> 00:33:11,340
flag right but it really depends on what

00:33:08,640 --> 00:33:12,990
the proposal is and I've tried

00:33:11,340 --> 00:33:14,820
suggesting things like defining risk

00:33:12,990 --> 00:33:16,380
areas and saying like these risk areas

00:33:14,820 --> 00:33:18,530
need these kinds of implementations and

00:33:16,380 --> 00:33:21,390
so on but it's really tough to get

00:33:18,530 --> 00:33:24,420
process changes in some times but

00:33:21,390 --> 00:33:26,490
essentially the lake for object that

00:33:24,420 --> 00:33:28,560
values an object that entries nobody was

00:33:26,490 --> 00:33:30,720
concerned about implementing those there

00:33:28,560 --> 00:33:33,000
wasn't like it was just kind of it's

00:33:30,720 --> 00:33:36,180
gonna be easy and fast to implement so

00:33:33,000 --> 00:33:37,650
the polyfills for it that i published

00:33:36,180 --> 00:33:39,240
were able to count as one of the

00:33:37,650 --> 00:33:41,490
implementations like one browser and the

00:33:39,240 --> 00:33:44,070
polyfill covered it but for like

00:33:41,490 --> 00:33:46,320
async/await Babel's implementation

00:33:44,070 --> 00:33:47,790
doesn't count right like in that in that

00:33:46,320 --> 00:33:49,620
regard right it helps you in form the

00:33:47,790 --> 00:33:51,450
design but it's not sufficient to say

00:33:49,620 --> 00:33:53,640
yes this can be implemented performant

00:33:51,450 --> 00:33:55,740
ly so I would say generally for

00:33:53,640 --> 00:33:58,530
syntactic features it does require to

00:33:55,740 --> 00:34:00,000
unflagged web browsers like not in a

00:33:58,530 --> 00:34:04,800
nightly build or anything but like ships

00:34:00,000 --> 00:34:06,540
to everyone so we've only got five

00:34:04,800 --> 00:34:07,770
minutes left there's so much to talk

00:34:06,540 --> 00:34:10,830
about we'll just have to have you back

00:34:07,770 --> 00:34:12,780
again and to talk about other pages but

00:34:10,830 --> 00:34:14,730
I'd love to dig into it's just one

00:34:12,780 --> 00:34:18,929
specific feature that I think is 20 yes

00:34:14,730 --> 00:34:20,640
20 20 global this so I think this it's

00:34:18,929 --> 00:34:21,780
kind of a fascinating I just was

00:34:20,640 --> 00:34:23,730
wondering if you could kind of give us

00:34:21,780 --> 00:34:25,860
an overview of what the context is

00:34:23,730 --> 00:34:29,760
and I think for me what's interesting is

00:34:25,860 --> 00:34:32,130
how I think the growth of JavaScript you

00:34:29,760 --> 00:34:33,690
know in the browser we're using more

00:34:32,130 --> 00:34:35,010
JavaScript so now we need to take things

00:34:33,690 --> 00:34:36,570
too off the main thread so now we're

00:34:35,010 --> 00:34:39,540
using web workers and service workers

00:34:36,570 --> 00:34:41,760
and you know we're caching things and in

00:34:39,540 --> 00:34:43,770
a strategic way you know that has kind

00:34:41,760 --> 00:34:45,840
of led to this need to kind of have like

00:34:43,770 --> 00:34:47,700
realms and you know I think these are

00:34:45,840 --> 00:34:49,629
things that I think the average web

00:34:47,700 --> 00:34:52,119
developer doesn't think about and

00:34:49,629 --> 00:34:53,859
you know I would really love to yeah

00:34:52,119 --> 00:34:56,529
just if you can kind of talk walk us

00:34:53,859 --> 00:34:58,180
through global this and sure I think it

00:34:56,529 --> 00:34:59,529
really hit the language a lot sooner

00:34:58,180 --> 00:35:02,470
than I thought it was like I thought it

00:34:59,529 --> 00:35:04,740
was going to take a much longer so I was

00:35:02,470 --> 00:35:07,119
surprised to see it go through that pass

00:35:04,740 --> 00:35:10,990
yeah I mean this one is a bit of a saga

00:35:07,119 --> 00:35:13,269
so there there has not before this there

00:35:10,990 --> 00:35:16,410
wasn't any wick thing in the language

00:35:13,269 --> 00:35:19,299
that referenced the global right like

00:35:16,410 --> 00:35:21,190
which in browsers you could get it with

00:35:19,299 --> 00:35:22,930
you could get at it with window and in

00:35:21,190 --> 00:35:25,960
node you could get it with uh with

00:35:22,930 --> 00:35:27,519
global and in like web workers and

00:35:25,960 --> 00:35:29,410
frames and stuff you could get it with

00:35:27,519 --> 00:35:30,849
self but there was never one consistent

00:35:29,410 --> 00:35:32,109
way so you always had to do a bunch of

00:35:30,849 --> 00:35:33,519
feature checking to figure out which

00:35:32,109 --> 00:35:36,819
environment you're in in order to get

00:35:33,519 --> 00:35:38,049
the global so it seemed like a pretty

00:35:36,819 --> 00:35:39,430
simple idea that everyone was on board

00:35:38,049 --> 00:35:42,160
with let's just put a thing in the

00:35:39,430 --> 00:35:44,170
standard that can do this and there was

00:35:42,160 --> 00:35:46,119
a bit of a churn trying to figure out

00:35:44,170 --> 00:35:48,210
some of those security concerns I had

00:35:46,119 --> 00:35:54,490
mentioned much earlier in the the

00:35:48,210 --> 00:35:59,049
podcast but the once those had been kind

00:35:54,490 --> 00:36:01,509
of overcome the the main concern was the

00:35:59,049 --> 00:36:03,039
name of it and unfortunately the name

00:36:01,509 --> 00:36:05,380
global which is the one everyone wanted

00:36:03,039 --> 00:36:06,819
and was the best was not web compatible

00:36:05,380 --> 00:36:09,609
it broke like Flickr or something

00:36:06,819 --> 00:36:12,819
because some old version of I don't know

00:36:09,609 --> 00:36:14,559
a moment je s like it was just there was

00:36:12,819 --> 00:36:16,359
some some craziness that just broke

00:36:14,559 --> 00:36:20,099
major websites so they couldn't ship it

00:36:16,359 --> 00:36:22,960
and so Russia yes I mean it was

00:36:20,099 --> 00:36:25,119
something like HTTP archive to do this

00:36:22,960 --> 00:36:27,700
analysis right and actually in this case

00:36:25,119 --> 00:36:30,400
I think Firefox shipped it and then got

00:36:27,700 --> 00:36:31,900
a bug report and unshipped I don't think

00:36:30,400 --> 00:36:33,519
they should did just I think it was just

00:36:31,900 --> 00:36:35,230
in like their developer channel or

00:36:33,519 --> 00:36:38,190
something but they very quickly got a

00:36:35,230 --> 00:36:40,299
report that it was broken okay um and so

00:36:38,190 --> 00:36:41,859
now I'd like at that point I had to

00:36:40,299 --> 00:36:45,670
figure out how do I name this what do I

00:36:41,859 --> 00:36:47,019
name it and so I came up with I meet but

00:36:45,670 --> 00:36:48,730
I wanted to get before I tried to ship

00:36:47,019 --> 00:36:50,049
it again I wanted to get data as to

00:36:48,730 --> 00:36:52,359
figure out what was actually compatible

00:36:50,049 --> 00:36:54,309
so I came up with a list of names by

00:36:52,359 --> 00:36:58,240
talking privately amongst the tc39

00:36:54,309 --> 00:36:59,500
delegates and some folks on the public

00:36:58,240 --> 00:37:01,359
github repo had thrown some names into

00:36:59,500 --> 00:37:02,890
that as well but the browser's didn't

00:37:01,359 --> 00:37:03,559
want to take my list of 20 names they

00:37:02,890 --> 00:37:06,319
wanted like

00:37:03,559 --> 00:37:08,869
four or something so I had to just

00:37:06,319 --> 00:37:10,999
arbitrarily choose which ones to gather

00:37:08,869 --> 00:37:12,739
data on and I got that data and then I

00:37:10,999 --> 00:37:14,809
presented it and we picked one of names

00:37:12,739 --> 00:37:18,709
and global this was the name that we

00:37:14,809 --> 00:37:22,759
went with like a few months after we

00:37:18,709 --> 00:37:26,299
decided on that some famous authors got

00:37:22,759 --> 00:37:28,939
wind of it and sort of not maliciously

00:37:26,299 --> 00:37:31,489
but six their Twitter follow followers

00:37:28,939 --> 00:37:33,079
onto a github thread and so there was a

00:37:31,489 --> 00:37:34,279
lot of comments and everyone was really

00:37:33,079 --> 00:37:36,259
angry with me and thought it was a

00:37:34,279 --> 00:37:38,180
terrible name and they you know the word

00:37:36,259 --> 00:37:39,499
this is confusing enough don't add it in

00:37:38,180 --> 00:37:42,499
more places right and they're alright

00:37:39,499 --> 00:37:44,809
right it's a terrible name but it was

00:37:42,499 --> 00:37:47,749
the least terrible one that I was aware

00:37:44,809 --> 00:37:51,829
of and so what I ended up doing was I

00:37:47,749 --> 00:37:53,359
met with another tc39 member who she

00:37:51,829 --> 00:37:55,279
helped me come up with this naming

00:37:53,359 --> 00:37:57,439
document which lists a bunch of

00:37:55,279 --> 00:37:59,239
constraints like this is a must this is

00:37:57,439 --> 00:38:02,589
a should right and all of these

00:37:59,239 --> 00:38:05,089
constraints suggest certain names and

00:38:02,589 --> 00:38:06,890
disqualify other names and when you're

00:38:05,089 --> 00:38:09,529
done reading this document it's kind of

00:38:06,890 --> 00:38:12,890
tough to be all rayji at me because like

00:38:09,529 --> 00:38:15,949
you understand hopefully why this was

00:38:12,890 --> 00:38:20,019
the option so I'm really glad I wrote

00:38:15,949 --> 00:38:20,019
that document yeah that's super reading

00:38:22,900 --> 00:38:28,880
tc39 and slash proposal - global and

00:38:26,179 --> 00:38:29,989
it's like naming dot MD in there oh yeah

00:38:28,880 --> 00:38:31,699
yeah link that

00:38:29,989 --> 00:38:33,410
yeah and that's an approach I want to

00:38:31,699 --> 00:38:34,459
make with controversial things in the

00:38:33,410 --> 00:38:36,799
future as well for the same reason

00:38:34,459 --> 00:38:40,219
because it seems to settle dissent sorry

00:38:36,799 --> 00:38:42,049
go ahead name no no I'm just say like

00:38:40,219 --> 00:38:43,429
that I did I'm impressed that you

00:38:42,049 --> 00:39:00,199
remembered the URL off the top of your

00:38:43,429 --> 00:39:03,589
head machine hundred percent well Jordan

00:39:00,199 --> 00:39:05,779
this has been an absolute delight we are

00:39:03,589 --> 00:39:08,900
really we're just about out of time now

00:39:05,779 --> 00:39:11,989
if if folks wanted to get in touch if

00:39:08,900 --> 00:39:14,900
they have questions about TCS 39 if they

00:39:11,989 --> 00:39:16,339
want if they wanted to get in touch with

00:39:14,900 --> 00:39:18,200
you want Twitter what is the best way

00:39:16,339 --> 00:39:20,930
for folks to get

00:39:18,200 --> 00:39:23,089
yeah I mean my twitter handle is ljh ARB

00:39:20,930 --> 00:39:25,609
and it's the same on github and

00:39:23,089 --> 00:39:28,490
virtually everywhere else um you can

00:39:25,609 --> 00:39:31,130
email me pick a site you can find me on

00:39:28,490 --> 00:39:32,869
I or C in the like there's a bunch of

00:39:31,130 --> 00:39:36,440
channels on freenode I'm in the node

00:39:32,869 --> 00:39:38,510
slack in the babble slack you know just

00:39:36,440 --> 00:39:40,990
kind of look for my handle anywhere and

00:39:38,510 --> 00:39:43,910
feel free to reach out my dams are open

00:39:40,990 --> 00:39:46,130
anything sorry we couldn't we couldn't

00:39:43,910 --> 00:39:48,770
talk for hours because we are live from

00:39:46,130 --> 00:39:52,400
open j/s today and we are under some

00:39:48,770 --> 00:39:53,780
time constraints I'm not judge so we I'm

00:39:52,400 --> 00:39:56,119
really really grateful for your time

00:39:53,780 --> 00:39:58,940
Jordan you know this was really a big

00:39:56,119 --> 00:40:01,309
hit so thanks so I'm talking to and

00:39:58,940 --> 00:40:04,430
we'll just have to head to back happy to

00:40:01,309 --> 00:40:06,140
be back let me know alright well thanks

00:40:04,430 --> 00:40:09,730
everybody for listening in and this has

00:40:06,140 --> 00:40:09,730

YouTube URL: https://www.youtube.com/watch?v=bpvp_bYnY2Q


