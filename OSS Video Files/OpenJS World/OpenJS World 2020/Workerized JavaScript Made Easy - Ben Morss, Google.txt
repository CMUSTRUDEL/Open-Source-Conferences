Title: Workerized JavaScript Made Easy - Ben Morss, Google
Publication date: 2020-06-23
Playlist: OpenJS World 2020
Description: 
	
Captions: 
	00:00:00,800 --> 00:00:08,760
hello welcome to work arise JavaScript

00:00:04,259 --> 00:00:10,920
made easy so my name is Ben Morse I'm a

00:00:08,760 --> 00:00:12,719
developer advocate at Google my job

00:00:10,920 --> 00:00:15,780
there has helped the web be more

00:00:12,719 --> 00:00:18,900
beautiful and faster and easier for both

00:00:15,780 --> 00:00:20,730
developers and for users really easier

00:00:18,900 --> 00:00:23,670
for developers to make good experiences

00:00:20,730 --> 00:00:25,890
for users and I used to be a musician

00:00:23,670 --> 00:00:28,080
which makes me especially a sad that I

00:00:25,890 --> 00:00:29,160
can't be here in Austin today I was

00:00:28,080 --> 00:00:31,080
looking forward very much to being in

00:00:29,160 --> 00:00:32,870
Austin it's a great city I used to go

00:00:31,080 --> 00:00:35,280
opera house by Southwest has great music

00:00:32,870 --> 00:00:37,829
barbeque and so on and so forth

00:00:35,280 --> 00:00:40,260
Here I am instead in New Jersey but hey

00:00:37,829 --> 00:00:43,100
let's travel my dog is over here it's

00:00:40,260 --> 00:00:45,450
comfortable so there's always that

00:00:43,100 --> 00:00:47,879
anyway if you heard this conference

00:00:45,450 --> 00:00:49,140
you're probably a big fan of JavaScript

00:00:47,879 --> 00:00:52,140
and why shouldn't you be

00:00:49,140 --> 00:00:54,090
I mean javascript is awesome it does

00:00:52,140 --> 00:00:56,129
what kinds of incredible things it's

00:00:54,090 --> 00:00:57,809
blossomed in the last year's from this

00:00:56,129 --> 00:01:00,570
little thing to make small button

00:00:57,809 --> 00:01:03,000
changes and little things on webpages

00:01:00,570 --> 00:01:05,339
- the full-featured programming language

00:01:03,000 --> 00:01:07,920
ecosystem environments with lots of

00:01:05,339 --> 00:01:11,580
wonderful libraries and frameworks and

00:01:07,920 --> 00:01:14,280
features that are great the thing is

00:01:11,580 --> 00:01:16,110
though it's possible to have too much of

00:01:14,280 --> 00:01:18,750
a good thing this actually is a

00:01:16,110 --> 00:01:20,909
screenshot from chrome dev tools of a

00:01:18,750 --> 00:01:23,880
site owned by Google if you have a lot

00:01:20,909 --> 00:01:27,060
of JavaScript your wonderful site may

00:01:23,880 --> 00:01:29,729
load slowly for many people and also may

00:01:27,060 --> 00:01:31,500
execute slowly so things on your page

00:01:29,729 --> 00:01:32,729
may not work sometimes because you've

00:01:31,500 --> 00:01:34,500
got lots of JavaScript running and

00:01:32,729 --> 00:01:37,560
things can happen in the browser if

00:01:34,500 --> 00:01:39,509
you've got a nice device and you're on a

00:01:37,560 --> 00:01:41,909
nice connection then it may not be quite

00:01:39,509 --> 00:01:44,009
as important but for a lot of people in

00:01:41,909 --> 00:01:45,270
the world this matters a lot I mean for

00:01:44,009 --> 00:01:47,640
me for example if I'm on a train

00:01:45,270 --> 00:01:48,899
somewhere trying to go somewhere some

00:01:47,640 --> 00:01:51,090
sites that you try to load up don't work

00:01:48,899 --> 00:01:53,700
at all some sites do work some sites

00:01:51,090 --> 00:01:56,280
don't and people across the world may

00:01:53,700 --> 00:01:59,790
not have like a nice new iPhone a nice

00:01:56,280 --> 00:02:01,350
new galaxy phone or a pixel or something

00:01:59,790 --> 00:02:03,210
they could have a lower powered phone

00:02:01,350 --> 00:02:05,909
which is quite likely they may be also

00:02:03,210 --> 00:02:09,300
on worse connections and in fact last

00:02:05,909 --> 00:02:12,480
time I saw actually 40% of connections

00:02:09,300 --> 00:02:13,620
worldwide mobile connections where 2g

00:02:12,480 --> 00:02:16,340
connections

00:02:13,620 --> 00:02:19,260
tooji is not how you can load a

00:02:16,340 --> 00:02:20,970
complicated JavaScript filled website I

00:02:19,260 --> 00:02:23,040
mean a lot of the problems are large

00:02:20,970 --> 00:02:25,470
images other kinds of things can be

00:02:23,040 --> 00:02:26,580
problems but we're going to discuss

00:02:25,470 --> 00:02:29,099
JavaScript today

00:02:26,580 --> 00:02:31,200
that's why certain people around the

00:02:29,099 --> 00:02:33,420
world are trying to look at your site

00:02:31,200 --> 00:02:36,659
and instead they're getting frustrated

00:02:33,420 --> 00:02:38,670
so this is not good let's focus on the

00:02:36,659 --> 00:02:40,739
JavaScript side of things what can we do

00:02:38,670 --> 00:02:43,440
as JavaScript developers to make these

00:02:40,739 --> 00:02:45,989
sites load faster and be functional more

00:02:43,440 --> 00:02:47,819
quickly one thing of course is ship less

00:02:45,989 --> 00:02:50,489
JavaScript okay great how do we do that

00:02:47,819 --> 00:02:52,049
well you can minify in gzip our code of

00:02:50,489 --> 00:02:53,970
course you're probably already doing

00:02:52,049 --> 00:02:56,280
both these things but people don't

00:02:53,970 --> 00:02:58,440
always minify don't always gzip it send

00:02:56,280 --> 00:03:00,109
less code over the wire at least it will

00:02:58,440 --> 00:03:02,700
load up more quickly

00:03:00,109 --> 00:03:05,310
also of course code that isn't being

00:03:02,700 --> 00:03:06,840
used shouldn't be on your page it

00:03:05,310 --> 00:03:08,579
happens a lot because you have code for

00:03:06,840 --> 00:03:10,650
all over your site what you put on all

00:03:08,579 --> 00:03:12,180
your pages on your site but in fact that

00:03:10,650 --> 00:03:14,909
makes things just slower for the user

00:03:12,180 --> 00:03:17,220
you can also go through the code

00:03:14,909 --> 00:03:19,230
coverage tool of chrome and realizing

00:03:17,220 --> 00:03:22,500
now I'm missing an S and I'm necessary

00:03:19,230 --> 00:03:25,620
yeah so that was necessary but it's not

00:03:22,500 --> 00:03:27,329
there anyway that wasn't necessary it

00:03:25,620 --> 00:03:29,489
should have been included but don't let

00:03:27,329 --> 00:03:33,000
the deter you if you have extra code

00:03:29,489 --> 00:03:35,280
don't include on your pages also if

00:03:33,000 --> 00:03:37,769
you're using frameworks or are using

00:03:35,280 --> 00:03:40,139
various kinds of ways to move code which

00:03:37,769 --> 00:03:42,239
merges together reduce your bundle sizes

00:03:40,139 --> 00:03:44,730
make those more efficient if there are

00:03:42,239 --> 00:03:47,849
dependencies that shouldn't be there get

00:03:44,730 --> 00:03:49,230
rid of those things that all helps it's

00:03:47,849 --> 00:03:51,299
also possible to load code when it's

00:03:49,230 --> 00:03:53,639
needed so right before an interaction is

00:03:51,299 --> 00:03:56,129
going to occur load the JavaScript then

00:03:53,639 --> 00:03:58,019
like lazy load it don't litter all at

00:03:56,129 --> 00:04:00,329
once and block rendering and tell

00:03:58,019 --> 00:04:02,579
everything loads or of course you can

00:04:00,329 --> 00:04:05,010
use amp which you know I talked about

00:04:02,579 --> 00:04:08,340
amp quite a bit amp is a way to use less

00:04:05,010 --> 00:04:11,699
JavaScript and make pages load faster in

00:04:08,340 --> 00:04:13,199
general so there's all those things none

00:04:11,699 --> 00:04:15,510
of those really deal with the problem

00:04:13,199 --> 00:04:17,820
though of making things making

00:04:15,510 --> 00:04:20,370
interactions happen more efficiently

00:04:17,820 --> 00:04:21,840
like JavaScript can be running and it

00:04:20,370 --> 00:04:24,630
can be blocking that would browser from

00:04:21,840 --> 00:04:26,580
doing things long tasks can make things

00:04:24,630 --> 00:04:27,389
not able to happen there's a way to get

00:04:26,580 --> 00:04:30,449
around this

00:04:27,389 --> 00:04:33,060
which is webworkers because the web is

00:04:30,449 --> 00:04:35,699
single-threaded the web brokers run in

00:04:33,060 --> 00:04:38,310
another thread so you can offload code

00:04:35,699 --> 00:04:41,729
that is gonna take a while to run into a

00:04:38,310 --> 00:04:43,499
different thread via web worker kind of

00:04:41,729 --> 00:04:45,389
neat right that way your code is running

00:04:43,499 --> 00:04:47,909
over here in a different thread and your

00:04:45,389 --> 00:04:50,460
other code keep on handling events the

00:04:47,909 --> 00:04:52,499
browser can keep on doing things but

00:04:50,460 --> 00:04:54,870
what is this about the thread thing why

00:04:52,499 --> 00:04:57,499
is the web single threaded I mean every

00:04:54,870 --> 00:04:59,930
modern OS is multi-threaded and

00:04:57,499 --> 00:05:02,219
multitasks why can't the web do this

00:04:59,930 --> 00:05:03,449
well part of it is that it's just how

00:05:02,219 --> 00:05:05,520
browsers and JavaScript

00:05:03,449 --> 00:05:07,800
we're created how they've always been

00:05:05,520 --> 00:05:10,110
now of course modern browsers multitask

00:05:07,800 --> 00:05:11,939
you can run various tabs they can be

00:05:10,110 --> 00:05:13,979
loading files while doing the various

00:05:11,939 --> 00:05:15,719
other kinds of things depending the

00:05:13,979 --> 00:05:18,509
screen but the thing is that each

00:05:15,719 --> 00:05:21,779
browser tab has a single thread for the

00:05:18,509 --> 00:05:23,969
UI which means only one process can make

00:05:21,779 --> 00:05:25,860
changes to the screen at a time so

00:05:23,969 --> 00:05:29,610
JavaScript can block the browser from

00:05:25,860 --> 00:05:31,349
doing things and vice versa imagine it

00:05:29,610 --> 00:05:33,020
wasn't that way much of users allow

00:05:31,349 --> 00:05:35,279
JavaScript tasks to run simultaneously

00:05:33,020 --> 00:05:37,169
they call a modified Dom at the same

00:05:35,279 --> 00:05:39,060
time and while the browser is laying out

00:05:37,169 --> 00:05:41,430
and paying the screen this task is

00:05:39,060 --> 00:05:43,770
modifying the Dom this task is modifying

00:05:41,430 --> 00:05:47,129
the Dom you'd have race conditions and

00:05:43,770 --> 00:05:48,300
general chaos it would not work it's

00:05:47,129 --> 00:05:50,669
confusing but because as we know

00:05:48,300 --> 00:05:53,129
javascript is asynchronous javascript

00:05:50,669 --> 00:05:55,139
depends on events getting fired as a

00:05:53,129 --> 00:05:57,149
sync so doesn't it isn't the kind of

00:05:55,139 --> 00:06:00,509
thing where as soon as an event fires

00:05:57,149 --> 00:06:01,649
code executes immediately well it's not

00:06:00,509 --> 00:06:04,020
actually how it really works

00:06:01,649 --> 00:06:06,509
remember that all the code on a single

00:06:04,020 --> 00:06:08,490
web page runs in a single thread this

00:06:06,509 --> 00:06:10,020
thing called the event loop let's look

00:06:08,490 --> 00:06:12,330
at this diagram here rather or not

00:06:10,020 --> 00:06:13,909
diagram animation if I take archibald

00:06:12,330 --> 00:06:16,379
I've borrowed for this case over here

00:06:13,909 --> 00:06:18,569
this shows the simplified simplified

00:06:16,379 --> 00:06:20,490
version of JavaScript you event loop so

00:06:18,569 --> 00:06:22,229
the browser fires an event right if

00:06:20,490 --> 00:06:24,689
there's event handler for that thing

00:06:22,229 --> 00:06:27,300
that could runs until it's done as other

00:06:24,689 --> 00:06:28,979
events fire they get added to a queue so

00:06:27,300 --> 00:06:31,080
we're gonna see over here these tasks

00:06:28,979 --> 00:06:31,800
move into the loop they're the arc gets

00:06:31,080 --> 00:06:33,569
handled

00:06:31,800 --> 00:06:35,759
another task is being queued up and

00:06:33,569 --> 00:06:38,159
event loop handles that one next all

00:06:35,759 --> 00:06:40,019
well and good so really if this works

00:06:38,159 --> 00:06:41,849
out nicely the browser was able to get

00:06:40,019 --> 00:06:46,979
the tasks pretty quickly and there

00:06:41,849 --> 00:06:48,929
delays however if a long task happens it

00:06:46,979 --> 00:06:51,449
has to wait for the task to finish

00:06:48,929 --> 00:06:53,580
nothing else can happen until that task

00:06:51,449 --> 00:06:55,919
completes so the next bit of code will

00:06:53,580 --> 00:06:57,509
be delayed it also means the browser may

00:06:55,919 --> 00:06:59,369
be blocked from doing things in the UI

00:06:57,509 --> 00:07:01,469
you may be blocking the browser from

00:06:59,369 --> 00:07:02,849
entering things into a form you can't be

00:07:01,469 --> 00:07:05,729
blocking scrolling from happening

00:07:02,849 --> 00:07:08,009
animations make a janky and of course if

00:07:05,729 --> 00:07:10,080
the person taps on something else while

00:07:08,009 --> 00:07:11,759
your code is still running that event

00:07:10,080 --> 00:07:13,949
can't get handled until your code

00:07:11,759 --> 00:07:16,860
finishes running because it's all one

00:07:13,949 --> 00:07:18,569
event loop it's all one thread so that

00:07:16,860 --> 00:07:21,089
can be a problem you can get this case

00:07:18,569 --> 00:07:24,419
where there's traffic holding up the

00:07:21,089 --> 00:07:27,089
entire thing happening in the Dom we

00:07:24,419 --> 00:07:29,069
want to avoid this happening not only

00:07:27,089 --> 00:07:31,349
you do have JavaScript causing pages to

00:07:29,069 --> 00:07:33,330
load slowly sometimes but it makes this

00:07:31,349 --> 00:07:35,969
unresponsive screen where you can't

00:07:33,330 --> 00:07:37,949
swipe you can't do things users don't

00:07:35,969 --> 00:07:41,819
like that sort of thing so one solution

00:07:37,949 --> 00:07:44,189
for this is to use web workers web

00:07:41,819 --> 00:07:46,079
workers are special because javascript

00:07:44,189 --> 00:07:48,809
and web worker runs in its own thread

00:07:46,079 --> 00:07:50,939
which is nice web Brook has been around

00:07:48,809 --> 00:07:54,300
for quite a long time actually about 10

00:07:50,939 --> 00:07:56,039
years so why don't they use more I think

00:07:54,300 --> 00:07:58,349
because their limits make them harder to

00:07:56,039 --> 00:08:00,059
use the thing is workers can't cause

00:07:58,349 --> 00:08:02,729
those race conditions in the DOM and

00:08:00,059 --> 00:08:04,769
can't get in the way of other you know

00:08:02,729 --> 00:08:07,139
kinds of things because they lack access

00:08:04,769 --> 00:08:09,389
to the Dom they also like access to the

00:08:07,139 --> 00:08:11,339
global scope they can't modify variables

00:08:09,389 --> 00:08:13,649
that are in the global scope so they're

00:08:11,339 --> 00:08:15,769
limited you can kind of pass them things

00:08:13,649 --> 00:08:18,119
and they can then send messages back

00:08:15,769 --> 00:08:20,789
that's how they work they work by

00:08:18,119 --> 00:08:22,379
passing messages back into force so web

00:08:20,789 --> 00:08:24,389
workers can pass messages to the native

00:08:22,379 --> 00:08:26,819
thread but you can pass messages back to

00:08:24,389 --> 00:08:28,829
the web workers that's about it now

00:08:26,819 --> 00:08:30,719
that's kind of complicated there are

00:08:28,829 --> 00:08:33,990
libraries that make this easier like

00:08:30,719 --> 00:08:36,479
comlink by Surma and worker eyes by

00:08:33,990 --> 00:08:39,000
Jason Miller but even with those

00:08:36,479 --> 00:08:41,550
libraries workers can't access the Dom

00:08:39,000 --> 00:08:43,439
they're stuck in this little Dom area

00:08:41,550 --> 00:08:46,740
over here where they can't get near the

00:08:43,439 --> 00:08:49,139
Dom that's a big obstacle fortunately

00:08:46,740 --> 00:08:51,449
there's a new library called wicker Dom

00:08:49,139 --> 00:08:54,209
this was released by the amp project a

00:08:51,449 --> 00:08:55,529
couple years ago wicker Dom works in the

00:08:54,209 --> 00:08:57,480
following way it

00:08:55,529 --> 00:09:00,449
the copy of the dom the worker can use

00:08:57,480 --> 00:09:03,149
and the worker dom also recreates in its

00:09:00,449 --> 00:09:05,579
own javascript a subset of the standard

00:09:03,149 --> 00:09:08,069
Dom API so the worker can manipulate the

00:09:05,579 --> 00:09:11,310
Dom and make changes on the page using

00:09:08,069 --> 00:09:13,529
standard Dom methods and properties it

00:09:11,310 --> 00:09:15,480
looks sort of like this there is a copy

00:09:13,529 --> 00:09:17,790
of the Dom if you will a virtual Dom

00:09:15,480 --> 00:09:20,370
which is worker Dom creates and there's

00:09:17,790 --> 00:09:22,379
a real Dom and the worker Dom creates

00:09:20,370 --> 00:09:25,439
the two Dom's a lot of Dom zero sorry

00:09:22,379 --> 00:09:28,110
worker Dom keeps the real DOM and the

00:09:25,439 --> 00:09:30,449
virtual Dom in sync so when a change is

00:09:28,110 --> 00:09:33,300
made in the real Dom worker Dom detects

00:09:30,449 --> 00:09:35,220
that it dips it and detects it and sends

00:09:33,300 --> 00:09:36,930
a message over to the worker telling it

00:09:35,220 --> 00:09:39,569
to go ahead make the same change in the

00:09:36,930 --> 00:09:42,089
copy if your workers code changes its

00:09:39,569 --> 00:09:44,129
copy worker Dom recognizes that mutation

00:09:42,089 --> 00:09:46,769
and sends a message over to the real Dom

00:09:44,129 --> 00:09:48,389
making the same change over there it's a

00:09:46,769 --> 00:09:50,939
little bit of overhead but it's actually

00:09:48,389 --> 00:09:53,999
pretty fast here's how it kind of looks

00:09:50,939 --> 00:09:55,829
weird on panels mutations in this way it

00:09:53,999 --> 00:09:57,329
does a dipping of the virtual Dom in the

00:09:55,829 --> 00:09:59,220
actual Dom which sounds kind of like

00:09:57,329 --> 00:10:01,050
other frameworks have used before and

00:09:59,220 --> 00:10:03,329
efficient different mechanism figures

00:10:01,050 --> 00:10:05,069
out what changes and then in a codes it

00:10:03,329 --> 00:10:07,740
encodes those changes into an array

00:10:05,069 --> 00:10:10,740
buffer a very compact way of sending a

00:10:07,740 --> 00:10:13,350
message over to the other thread that

00:10:10,740 --> 00:10:16,860
has to make the change and then passes

00:10:13,350 --> 00:10:18,059
it over here's an example of that so for

00:10:16,860 --> 00:10:20,910
example this kind of standard-looking

00:10:18,059 --> 00:10:23,459
thing here document.createelement 'div

00:10:20,910 --> 00:10:25,709
gets represented in the following way as

00:10:23,459 --> 00:10:27,779
this very compact looking series of

00:10:25,709 --> 00:10:31,290
numbers the first number that represents

00:10:27,779 --> 00:10:33,540
the reference to the node which this div

00:10:31,290 --> 00:10:35,759
here will be always indexed number 3 the

00:10:33,540 --> 00:10:37,500
second number tells the main thread

00:10:35,759 --> 00:10:40,379
what kind of Dom boat is being created

00:10:37,500 --> 00:10:43,500
element boat happens to be number 1 then

00:10:40,379 --> 00:10:46,439
the node name of div corresponds the six

00:10:43,500 --> 00:10:49,920
and so on and so forth so any kind of

00:10:46,439 --> 00:10:51,779
mutation gets encoded into a small bit

00:10:49,920 --> 00:10:53,670
of numbers that's why this message

00:10:51,779 --> 00:10:56,790
passing actually isn't that's slow I

00:10:53,670 --> 00:10:58,439
think the Cermak chily has a whole blog

00:10:56,790 --> 00:11:00,449
post about this where he discusses how

00:10:58,439 --> 00:11:01,410
it can be pretty fast he does some

00:11:00,449 --> 00:11:04,949
measurements about this

00:11:01,410 --> 00:11:06,689
so worker Dom does this for you but it's

00:11:04,949 --> 00:11:08,129
still a little complicated you might be

00:11:06,689 --> 00:11:09,529
telling yourself ok so I can try this

00:11:08,129 --> 00:11:11,839
thing out this worker is

00:11:09,529 --> 00:11:14,810
but how do I use it have to build this

00:11:11,839 --> 00:11:16,910
myself I don't use this whole worker Dom

00:11:14,810 --> 00:11:18,769
thing well the good thing is there's an

00:11:16,910 --> 00:11:20,389
easy way from the framework that wants

00:11:18,769 --> 00:11:22,639
to make things easy for developers and

00:11:20,389 --> 00:11:26,779
advanced web features accessible to all

00:11:22,639 --> 00:11:29,180
which of course is our friend amp amp as

00:11:26,779 --> 00:11:31,760
you probably already know was created by

00:11:29,180 --> 00:11:33,800
Google as an open source project the

00:11:31,760 --> 00:11:36,230
goal being to make the web faster and

00:11:33,800 --> 00:11:38,839
easier to use and just better in general

00:11:36,230 --> 00:11:40,339
amp is now part of the open Jazz family

00:11:38,839 --> 00:11:44,029
it's why I'm here today

00:11:40,339 --> 00:11:45,529
amp is now an open JSP earth project tu

00:11:44,029 --> 00:11:48,110
amp may just be a way to get into

00:11:45,529 --> 00:11:50,779
Google's top stories carousel which has

00:11:48,110 --> 00:11:51,920
a special place and if you do that you

00:11:50,779 --> 00:11:53,389
may also know that Google is just

00:11:51,920 --> 00:11:56,630
announced recently that in the near

00:11:53,389 --> 00:11:59,300
future any page that meets new standards

00:11:56,630 --> 00:12:01,250
for speed and for a stable layout which

00:11:59,300 --> 00:12:03,019
are called Web vitals any page that

00:12:01,250 --> 00:12:04,910
meets these standards will now be

00:12:03,019 --> 00:12:08,149
eligible to be at the top stories

00:12:04,910 --> 00:12:10,760
carousel not just amp pages in fact and

00:12:08,149 --> 00:12:12,470
pages that are slow or unstable won't

00:12:10,760 --> 00:12:14,660
get in there anymore this is not true

00:12:12,470 --> 00:12:17,930
now but this will be happening in the

00:12:14,660 --> 00:12:19,250
fairly near future so you may have

00:12:17,930 --> 00:12:21,320
thought of amp in various kinds of ways

00:12:19,250 --> 00:12:23,660
but probably not as a way to make

00:12:21,320 --> 00:12:25,070
developers lives easier that in fact is

00:12:23,660 --> 00:12:27,190
why I'm interested in amp because it

00:12:25,070 --> 00:12:31,220
makes things easier for developers for

00:12:27,190 --> 00:12:33,769
common and basic tasks what is amp it's

00:12:31,220 --> 00:12:36,529
basically a web components library so

00:12:33,769 --> 00:12:38,329
HTML was created about 30 years ago and

00:12:36,529 --> 00:12:40,850
it was a document description language

00:12:38,329 --> 00:12:41,449
so there's things like hey this is

00:12:40,850 --> 00:12:43,940
boldface

00:12:41,449 --> 00:12:46,040
and this is a paragraph there weren't

00:12:43,940 --> 00:12:48,740
things like hey this is the interactive

00:12:46,040 --> 00:12:52,010
menu hey this is image carousel because

00:12:48,740 --> 00:12:54,319
those things didn't exist yet as those

00:12:52,010 --> 00:12:56,329
things became part of the web javascript

00:12:54,319 --> 00:12:56,839
grew to the task to make these things

00:12:56,329 --> 00:12:59,390
happen

00:12:56,839 --> 00:13:01,010
to make interactions happen HTML

00:12:59,390 --> 00:13:02,540
couldn't do those things

00:13:01,010 --> 00:13:04,160
which means if people end up like adding

00:13:02,540 --> 00:13:07,310
a lot of code to their site which isn't

00:13:04,160 --> 00:13:09,889
always necessary so amp aims make this

00:13:07,310 --> 00:13:12,589
better by using web components to add

00:13:09,889 --> 00:13:15,529
new tags to HTML that do those kinds of

00:13:12,589 --> 00:13:17,269
things the HTML didn't do before you see

00:13:15,529 --> 00:13:20,060
some examples over here in this large

00:13:17,269 --> 00:13:22,640
list of colorful looking names things

00:13:20,060 --> 00:13:23,120
like a flying carpet effect Facebook

00:13:22,640 --> 00:13:25,850
common

00:13:23,120 --> 00:13:28,250
components the amp carousel component

00:13:25,850 --> 00:13:30,920
all kinds of things I think I see Hulu

00:13:28,250 --> 00:13:32,510
player over there all these tags here

00:13:30,920 --> 00:13:34,790
worked because the web components that

00:13:32,510 --> 00:13:38,930
are run by small bits of JavaScript that

00:13:34,790 --> 00:13:40,430
amp uses on the contrast amp discourages

00:13:38,930 --> 00:13:43,220
you from writing your own JavaScript

00:13:40,430 --> 00:13:45,200
because that can make things slow that

00:13:43,220 --> 00:13:46,730
was the idea of amp it's now allowing

00:13:45,200 --> 00:13:49,279
more JavaScript to be written as well

00:13:46,730 --> 00:13:51,230
soon see before we see that though

00:13:49,279 --> 00:13:53,200
here's our amp looks in practice this is

00:13:51,230 --> 00:13:56,089
simply how you know YouTube embed an amp

00:13:53,200 --> 00:13:58,070
instead of embedding youtubes on

00:13:56,089 --> 00:14:01,339
JavaScript use a component called amp

00:13:58,070 --> 00:14:03,140
YouTube specify a layout type and has

00:14:01,339 --> 00:14:04,760
various layouts including responsive

00:14:03,140 --> 00:14:07,190
which is its way of automatically making

00:14:04,760 --> 00:14:09,290
the YouTube video or any component

00:14:07,190 --> 00:14:12,320
shrink of its container shrinks or

00:14:09,290 --> 00:14:13,520
expanded the container expands and the

00:14:12,320 --> 00:14:14,089
width and height are specified in

00:14:13,520 --> 00:14:15,950
advance

00:14:14,089 --> 00:14:17,029
that's because amp wants to prevent

00:14:15,950 --> 00:14:18,920
things from shifting around on the

00:14:17,029 --> 00:14:20,990
screen and wants to prevent content

00:14:18,920 --> 00:14:23,180
layout shift so it creates a space for

00:14:20,990 --> 00:14:25,640
everything in advance and then as things

00:14:23,180 --> 00:14:27,770
load up develop into their space things

00:14:25,640 --> 00:14:29,300
that move around the browser wasn't

00:14:27,770 --> 00:14:31,070
repainting the screen recalculating the

00:14:29,300 --> 00:14:33,680
layout things are just faster and more

00:14:31,070 --> 00:14:36,800
stable and finally here we have

00:14:33,680 --> 00:14:39,050
data-video-id simply the ID of the video

00:14:36,800 --> 00:14:40,610
of the YouTube video and then you just

00:14:39,050 --> 00:14:45,709
do this and there's your YouTube video

00:14:40,610 --> 00:14:49,130
all done so I was saying before a worker

00:14:45,709 --> 00:14:51,800
DOM and makes this possible to use

00:14:49,130 --> 00:14:53,540
through a component called amp script an

00:14:51,800 --> 00:14:55,790
scrip is kind of a wrapper around worker

00:14:53,540 --> 00:14:58,190
Dom which brings it into amped makes it

00:14:55,790 --> 00:15:00,290
pretty easy to use how does this look

00:14:58,190 --> 00:15:05,089
let's try a simple hello world example

00:15:00,290 --> 00:15:06,470
over here so hello world let's see and

00:15:05,089 --> 00:15:08,930
the body we're going to insert this amp

00:15:06,470 --> 00:15:10,130
script component over here this is just

00:15:08,930 --> 00:15:11,810
another component in amp

00:15:10,130 --> 00:15:15,350
it's got layout type equals fixed

00:15:11,810 --> 00:15:17,510
because we'll see why later we give it

00:15:15,350 --> 00:15:19,550
the name of his scripts we give it the

00:15:17,510 --> 00:15:20,900
size of the components because as we

00:15:19,550 --> 00:15:23,390
know in app all things if they're size

00:15:20,900 --> 00:15:27,230
declared in advance and it consists of

00:15:23,390 --> 00:15:30,110
the word hello is that an h1 tag now

00:15:27,230 --> 00:15:31,880
what amp scripts will do is pass the

00:15:30,110 --> 00:15:34,880
stuff inside the amp script component

00:15:31,880 --> 00:15:36,950
the children to the worker as the entire

00:15:34,880 --> 00:15:39,950
Dom so the whole dom the

00:15:36,950 --> 00:15:42,170
worker sees is just the h1 tag then we

00:15:39,950 --> 00:15:45,740
have the script over here which simply

00:15:42,170 --> 00:15:48,670
grabs h1 tag and appends a comma a space

00:15:45,740 --> 00:15:51,290
in the word world and there you are

00:15:48,670 --> 00:15:54,140
notice that we have typed equals text

00:15:51,290 --> 00:15:55,580
plane instead of text JavaScript this is

00:15:54,140 --> 00:15:57,350
so the browser doesn't see this as a

00:15:55,580 --> 00:15:59,900
script executes it instead it's just

00:15:57,350 --> 00:16:03,170
plain text am script can grab it and

00:15:59,900 --> 00:16:04,880
give it to worker Dom to use there's

00:16:03,170 --> 00:16:06,500
that and let's see if we can get this

00:16:04,880 --> 00:16:08,000
thing to actually work I think that's

00:16:06,500 --> 00:16:10,160
the next thing over here all right I'm

00:16:08,000 --> 00:16:13,130
gonna make a new tab over here and I'm

00:16:10,160 --> 00:16:16,040
going to enter over here the URL of my

00:16:13,130 --> 00:16:20,020
little demo that's actually not what it

00:16:16,040 --> 00:16:23,060
is it's actually supposed to be this

00:16:20,020 --> 00:16:24,290
script getting closer now thank you all

00:16:23,060 --> 00:16:29,570
to completion for almost being there

00:16:24,290 --> 00:16:31,070
this is that hello world okay hey I'm

00:16:29,570 --> 00:16:33,650
coming for myself because no one else is

00:16:31,070 --> 00:16:36,290
here but me and my dog hello world so

00:16:33,650 --> 00:16:37,730
what does it actually do he see that

00:16:36,290 --> 00:16:39,560
actually it worked you can't tell what

00:16:37,730 --> 00:16:41,690
it actually did let's look here over

00:16:39,560 --> 00:16:44,360
here at the console rather at the

00:16:41,690 --> 00:16:46,400
sources we can see here at the bottom of

00:16:44,360 --> 00:16:48,680
the sources and dev tools this little

00:16:46,400 --> 00:16:51,860
extra thing this thing over here and

00:16:48,680 --> 00:16:54,110
there is this little bit of JavaScript

00:16:51,860 --> 00:16:56,630
and the top over here and let's make

00:16:54,110 --> 00:16:58,130
this a little bigger I said give it a

00:16:56,630 --> 00:17:00,230
little bigger thank you very much the

00:16:58,130 --> 00:17:03,140
top over here is worker Dom stuff in the

00:17:00,230 --> 00:17:05,150
bottom is our JavaScript so there it is

00:17:03,140 --> 00:17:07,750
we actually managed to inside a worker

00:17:05,150 --> 00:17:11,390
add this little world thing over here

00:17:07,750 --> 00:17:14,480
there you go that worked it wasn't that

00:17:11,390 --> 00:17:17,360
exciting so by the way this is a little

00:17:14,480 --> 00:17:18,980
more of the page that can go in so this

00:17:17,360 --> 00:17:21,079
is more of the app page this would be

00:17:18,980 --> 00:17:23,089
part of notice that the first thing we

00:17:21,079 --> 00:17:25,699
do over here is we load up amps own

00:17:23,089 --> 00:17:27,560
runtime which makes impossible

00:17:25,699 --> 00:17:29,720
I also load up the bit of JavaScript

00:17:27,560 --> 00:17:33,200
that encapsulates worker Dom that makes

00:17:29,720 --> 00:17:35,540
an EM script work so you can also put

00:17:33,200 --> 00:17:37,370
this JavaScript into different files of

00:17:35,540 --> 00:17:39,020
putting it in line in this case we've

00:17:37,370 --> 00:17:41,060
just stuck the JavaScript into a

00:17:39,020 --> 00:17:42,800
different file called hello world is and

00:17:41,060 --> 00:17:44,240
pointed the source attribute of am

00:17:42,800 --> 00:17:47,570
script to that file

00:17:44,240 --> 00:17:49,820
there we are a more glamorous example

00:17:47,570 --> 00:17:50,600
here is an event handler so we've added

00:17:49,820 --> 00:17:52,490
a button to

00:17:50,600 --> 00:17:54,799
HTML over here this button that says

00:17:52,490 --> 00:17:57,650
hello who and added some more JavaScript

00:17:54,799 --> 00:18:00,200
that adds an event listener to the

00:17:57,650 --> 00:18:03,080
button where if it's clicked it adds the

00:18:00,200 --> 00:18:05,090
famous comma and world let's try this

00:18:03,080 --> 00:18:07,910
out over here I think this is called

00:18:05,090 --> 00:18:11,419
hello button which I named very very

00:18:07,910 --> 00:18:13,549
cleverly and I think this little whoops

00:18:11,419 --> 00:18:16,160
that's not what dude there we go okay

00:18:13,549 --> 00:18:19,940
like that a little smaller and hello who

00:18:16,160 --> 00:18:23,600
look at this hello world and more worlds

00:18:19,940 --> 00:18:25,309
and more worlds now the document we use

00:18:23,600 --> 00:18:28,039
over there document object is not the

00:18:25,309 --> 00:18:30,799
same as the one usually we see let's add

00:18:28,039 --> 00:18:35,240
a breakpoint over here and run this

00:18:30,799 --> 00:18:38,539
thing again but again okay let's go to

00:18:35,240 --> 00:18:40,610
the button notice the document over here

00:18:38,539 --> 00:18:42,049
is not the usual document it contains

00:18:40,610 --> 00:18:43,909
the things you wouldn't usually see look

00:18:42,049 --> 00:18:46,880
at this seven and eight and nine some

00:18:43,909 --> 00:18:49,190
arrays at E some more things over here

00:18:46,880 --> 00:18:50,990
this is because this document object not

00:18:49,190 --> 00:18:53,360
the one that Dom provides the browser

00:18:50,990 --> 00:18:55,640
provides it's created by worker Dom and

00:18:53,360 --> 00:18:59,150
worker Dom gives you all these things to

00:18:55,640 --> 00:19:02,809
simulate a Dom kind of interesting kind

00:18:59,150 --> 00:19:05,120
of neat that's how it works so there's

00:19:02,809 --> 00:19:08,360
that there is that JavaScript over there

00:19:05,120 --> 00:19:11,049
okay and you can be more in a worker

00:19:08,360 --> 00:19:14,150
workers actually natively support fetch

00:19:11,049 --> 00:19:16,130
XML HTTP requests WebSockets

00:19:14,150 --> 00:19:19,370
canvas all kinds of features like that

00:19:16,130 --> 00:19:21,020
here's a fetch version let's try that

00:19:19,370 --> 00:19:22,940
one so again we just have a fetch

00:19:21,020 --> 00:19:25,070
instead of having the thing just stuck

00:19:22,940 --> 00:19:27,830
in there you click on the button and

00:19:25,070 --> 00:19:29,480
then you fetch it let's go over here and

00:19:27,830 --> 00:19:33,409
see how that works

00:19:29,480 --> 00:19:36,020
so here's hello fetch okay let's go over

00:19:33,409 --> 00:19:39,830
here to the network tab and see if we

00:19:36,020 --> 00:19:41,419
can watch this being added so there's

00:19:39,830 --> 00:19:44,960
what's additive there we're gonna click

00:19:41,419 --> 00:19:46,730
hello who and notice hello texts was

00:19:44,960 --> 00:19:50,330
grabbed over there and it contains the

00:19:46,730 --> 00:19:52,970
incredible payload of comma world there

00:19:50,330 --> 00:19:55,220
it is all these things are not so

00:19:52,970 --> 00:19:57,679
complicated and a way to get JavaScript

00:19:55,220 --> 00:19:59,570
into a worker which is kind of neat

00:19:57,679 --> 00:20:02,929
remember though this is actually not

00:19:59,570 --> 00:20:04,280
again the real document API remember

00:20:02,929 --> 00:20:06,080
that rooker Dom has

00:20:04,280 --> 00:20:08,210
and recreated these things with its own

00:20:06,080 --> 00:20:10,370
JavaScript here's an example over here

00:20:08,210 --> 00:20:12,620
I've get elements by name this is the

00:20:10,370 --> 00:20:16,910
code that worker Dom itself uses to get

00:20:12,620 --> 00:20:19,190
elements by name so all that is true the

00:20:16,910 --> 00:20:21,140
thing is that you can't really have

00:20:19,190 --> 00:20:25,030
worker Dom we produced the entire Dom

00:20:21,140 --> 00:20:27,140
API because it is absolutely enormous

00:20:25,030 --> 00:20:29,360
sorry about this cut here in the video

00:20:27,140 --> 00:20:32,030
my dog got bored and went downstairs and

00:20:29,360 --> 00:20:33,230
was stuck inside the downstairs area I

00:20:32,030 --> 00:20:35,540
couldn't get out and there was some

00:20:33,230 --> 00:20:37,460
general chaos for a little while but now

00:20:35,540 --> 00:20:39,500
we're back so I think I was talking

00:20:37,460 --> 00:20:41,090
about where we were here I think we were

00:20:39,500 --> 00:20:41,780
somewhere over here in the previous

00:20:41,090 --> 00:20:44,600
slide there we are

00:20:41,780 --> 00:20:46,700
that worker Dom recreates the api's with

00:20:44,600 --> 00:20:49,580
its own JavaScript doesn't recreate the

00:20:46,700 --> 00:20:51,980
own the whole dumb API because it just

00:20:49,580 --> 00:20:54,320
couldn't do that so there is this handy

00:20:51,980 --> 00:20:57,560
web compatibility table over here which

00:20:54,320 --> 00:21:00,260
you can find at go dev slash amp script

00:20:57,560 --> 00:21:02,960
API is this provides a list of API is

00:21:00,260 --> 00:21:04,700
that are and are not supported so you

00:21:02,960 --> 00:21:06,320
can go through your JavaScript and if

00:21:04,700 --> 00:21:08,150
things aren't supported replace them

00:21:06,320 --> 00:21:10,880
with the Quillen API is that are

00:21:08,150 --> 00:21:12,830
supported there also a couple of limits

00:21:10,880 --> 00:21:16,160
that AM script places in there so you

00:21:12,830 --> 00:21:18,350
don't violate web vitals principles and

00:21:16,160 --> 00:21:20,870
have things loading slowly then I've

00:21:18,350 --> 00:21:22,310
layout shifting around on the screen one

00:21:20,870 --> 00:21:24,740
of those things is M script doesn't

00:21:22,310 --> 00:21:27,140
allow more than 150 K total JavaScript

00:21:24,740 --> 00:21:28,880
per page if there are use cases that

00:21:27,140 --> 00:21:30,620
required more than that the team would

00:21:28,880 --> 00:21:32,330
consider raising the limit but so far no

00:21:30,620 --> 00:21:34,910
one's really complained about it because

00:21:32,330 --> 00:21:37,400
it's usually used for the tasks amp

00:21:34,910 --> 00:21:38,720
doesn't really do out of the box you

00:21:37,400 --> 00:21:40,570
just want to change something here and

00:21:38,720 --> 00:21:42,950
there to add some kind of functionality

00:21:40,570 --> 00:21:45,890
the other thing is that it wants to

00:21:42,950 --> 00:21:48,560
restrict intrusive mutations so if your

00:21:45,890 --> 00:21:50,450
M script tries to make changes before a

00:21:48,560 --> 00:21:52,910
user action that will make the screen

00:21:50,450 --> 00:21:55,340
move around too much it will try to

00:21:52,910 --> 00:21:57,590
block you from doing those things so you

00:21:55,340 --> 00:21:59,960
can get around or rather you can make

00:21:57,590 --> 00:22:02,240
your M scripts more capable by taking

00:21:59,960 --> 00:22:04,490
some simple precautions M script knows

00:22:02,240 --> 00:22:07,070
that if your layout is a fixed type then

00:22:04,490 --> 00:22:08,540
that can't move around too much like if

00:22:07,070 --> 00:22:10,670
the children of your M scripts area

00:22:08,540 --> 00:22:12,950
change size the whole container won't

00:22:10,670 --> 00:22:15,860
change size if the height and width are

00:22:12,950 --> 00:22:16,980
fixed in HTML it knows the hole M script

00:22:15,860 --> 00:22:19,380
area can't change

00:22:16,980 --> 00:22:21,000
so if those things are true if the app

00:22:19,380 --> 00:22:23,070
script area really is fixed to a certain

00:22:21,000 --> 00:22:25,260
part of the screen it says go ahead and

00:22:23,070 --> 00:22:27,360
make changes over here if it isn't fixed

00:22:25,260 --> 00:22:28,890
to a certain part of the screen it says

00:22:27,360 --> 00:22:30,630
you know what you can't change things

00:22:28,890 --> 00:22:32,370
all over the place tell users take an

00:22:30,630 --> 00:22:34,020
action to request to change because it

00:22:32,370 --> 00:22:35,940
would revolve a lot of things that would

00:22:34,020 --> 00:22:39,780
surprise the user in terms of layout

00:22:35,940 --> 00:22:42,360
shift it's kind of more elaborate topic

00:22:39,780 --> 00:22:44,520
so to hear more about it go to MF and

00:22:42,360 --> 00:22:48,360
meet about the actual ways that it keeps

00:22:44,520 --> 00:22:50,160
this safe for you so again I was saying

00:22:48,360 --> 00:22:52,260
before that worker Dom has certain api's

00:22:50,160 --> 00:22:53,460
you want to not worry about this too

00:22:52,260 --> 00:22:56,100
much and just go ahead and write your

00:22:53,460 --> 00:22:57,030
code have it work out of the box you may

00:22:56,100 --> 00:22:59,160
want to try one of your favorite

00:22:57,030 --> 00:23:01,680
frameworks the team that works on worker

00:22:59,160 --> 00:23:03,810
Dom also works on various frameworks and

00:23:01,680 --> 00:23:05,700
uses them frequently and they've tried

00:23:03,810 --> 00:23:10,410
using M script with things like view

00:23:05,700 --> 00:23:12,300
react angular that HTML aurélia the

00:23:10,410 --> 00:23:13,920
thing is that these frameworks use a

00:23:12,300 --> 00:23:16,860
certain specific subset of the Dom API

00:23:13,920 --> 00:23:18,600
to do their own changes they do a diff

00:23:16,860 --> 00:23:20,640
between the virtual Dom and the actual

00:23:18,600 --> 00:23:22,860
Dom and then they use certain api's

00:23:20,640 --> 00:23:25,310
consistently to make changes so worker

00:23:22,860 --> 00:23:27,420
Dom supports all of those things well

00:23:25,310 --> 00:23:28,950
however you may find yourself with

00:23:27,420 --> 00:23:31,200
larger bundle sizes with certain

00:23:28,950 --> 00:23:32,880
frameworks so to make your bundle sizes

00:23:31,200 --> 00:23:34,800
small and to really follow the

00:23:32,880 --> 00:23:37,260
principles of amp that yourselves less

00:23:34,800 --> 00:23:38,640
JavaScript no more than you need and

00:23:37,260 --> 00:23:41,580
keep things fast for the user

00:23:38,640 --> 00:23:43,440
I recommend that you use pre act and pre

00:23:41,580 --> 00:23:44,820
act actually one of the people that

00:23:43,440 --> 00:23:46,650
works on the worker Dom team as part of

00:23:44,820 --> 00:23:48,300
the pre act core team he was very

00:23:46,650 --> 00:23:50,820
careful to make sure that the API is a

00:23:48,300 --> 00:23:53,460
pre act users are well supported within

00:23:50,820 --> 00:23:55,560
worker Dom it's a pre act actually is

00:23:53,460 --> 00:23:57,990
like react very similar it's compatible

00:23:55,560 --> 00:23:58,980
in most ways you can always transform

00:23:57,990 --> 00:24:02,820
react and pre-act

00:23:58,980 --> 00:24:03,840
but it's only 3k minified in gzipped so

00:24:02,820 --> 00:24:06,630
out-of-the-box

00:24:03,840 --> 00:24:10,260
not much extra JavaScript being added to

00:24:06,630 --> 00:24:11,970
your project and actually amp itself is

00:24:10,260 --> 00:24:13,530
being rewritten with pre act amp is

00:24:11,970 --> 00:24:15,540
being recreated so that all the

00:24:13,530 --> 00:24:18,240
components will work reliably by

00:24:15,540 --> 00:24:21,270
themselves not be using the up runtime

00:24:18,240 --> 00:24:23,820
at all this is possible usually now but

00:24:21,270 --> 00:24:24,540
not guaranteed but to make amp more part

00:24:23,820 --> 00:24:26,820
of the web

00:24:24,540 --> 00:24:28,770
those efforts being undertaken as I've

00:24:26,820 --> 00:24:30,809
begun to take an amazing pre act so the

00:24:28,770 --> 00:24:33,389
app team is very invested in pre act

00:24:30,809 --> 00:24:35,370
so in the spirit of that I take my hello

00:24:33,389 --> 00:24:37,320
world example and we did it with pre-act

00:24:35,370 --> 00:24:39,749
it's not that much more complicated it's

00:24:37,320 --> 00:24:40,320
just a component and usual kind of JSX

00:24:39,749 --> 00:24:43,919
things

00:24:40,320 --> 00:24:47,779
let's now drag this terminal here into

00:24:43,919 --> 00:24:52,789
our visible window there it is let's

00:24:47,779 --> 00:24:58,379
build this suspense suspense suspense

00:24:52,789 --> 00:25:01,980
let's serve this now let's drag this out

00:24:58,379 --> 00:25:12,539
of the visible area and let's try this

00:25:01,980 --> 00:25:14,309
over here embarrassing moments I can't

00:25:12,539 --> 00:25:17,639
type anymore and that's a bit of a

00:25:14,309 --> 00:25:23,730
problem actually I think it's no wonder

00:25:17,639 --> 00:25:29,029
why it's there interesting there we go

00:25:23,730 --> 00:25:36,409
and hello whoo hello world there it is

00:25:29,029 --> 00:25:38,460
magical soap react works so that's my

00:25:36,409 --> 00:25:41,249
discussion here about work arise Java

00:25:38,460 --> 00:25:43,289
Script made easier by amp if you want to

00:25:41,249 --> 00:25:45,059
learn more and try this yourself we just

00:25:43,289 --> 00:25:47,999
updated this tutorial here it's quite

00:25:45,059 --> 00:25:50,610
nice now go to go dot amp dev slash

00:25:47,999 --> 00:25:53,789
learn script and you can make your own

00:25:50,610 --> 00:25:55,980
custom UI widget that does some form

00:25:53,789 --> 00:25:57,299
validation it guides you along and

00:25:55,980 --> 00:25:59,309
teaches you about the various things

00:25:57,299 --> 00:26:02,490
damn script then we're dumb do on the

00:25:59,309 --> 00:26:04,200
way so look at worker Dom's code to get

00:26:02,490 --> 00:26:07,350
involved in the project just go to

00:26:04,200 --> 00:26:11,460
github.com slash ant project slash

00:26:07,350 --> 00:26:12,629
worker down and yeah try it out we think

00:26:11,460 --> 00:26:15,600
that workers are a way to make

00:26:12,629 --> 00:26:18,059
javascript more friendly for the user

00:26:15,600 --> 00:26:20,369
and get me users way less often there

00:26:18,059 --> 00:26:22,080
was various ways to use workers and the

00:26:20,369 --> 00:26:24,450
way that amp provides makes it simple to

00:26:22,080 --> 00:26:27,860
get started try it out if you like it

00:26:24,450 --> 00:26:31,279
then go from there thanks a lot and have

00:26:27,860 --> 00:26:31,279

YouTube URL: https://www.youtube.com/watch?v=m5X29tof1ps


