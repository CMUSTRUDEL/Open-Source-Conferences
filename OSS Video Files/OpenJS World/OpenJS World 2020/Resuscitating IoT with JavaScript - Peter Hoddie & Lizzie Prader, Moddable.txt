Title: Resuscitating IoT with JavaScript - Peter Hoddie & Lizzie Prader, Moddable
Publication date: 2020-06-17
Playlist: OpenJS World 2020
Description: 
	
Captions: 
	00:00:05,570 --> 00:00:10,400
hi I'm Peter and I'm Lizzy and we're

00:00:08,780 --> 00:00:11,900
some of the cofounders of model the

00:00:10,400 --> 00:00:13,610
company that works on javascript

00:00:11,900 --> 00:00:16,309
fermented I have been working a dog

00:00:13,610 --> 00:00:17,840
script for betted my entire career and I

00:00:16,309 --> 00:00:20,840
shipped my personal many JavaScript

00:00:17,840 --> 00:00:23,119
project in 2005 before that I was

00:00:20,840 --> 00:00:24,919
working at Apple on digital video as

00:00:23,119 --> 00:00:27,770
part of that I helped create lead and

00:00:24,919 --> 00:00:31,480
think for a while for Mac comet ison I'm

00:00:27,770 --> 00:00:34,010
also currently a delegate to ECMO tc39

00:00:31,480 --> 00:00:36,170
both of us are also delegates to mecca

00:00:34,010 --> 00:00:38,080
mighty 253 a new standards committee

00:00:36,170 --> 00:00:40,490
that is focused on JavaScript for IOT

00:00:38,080 --> 00:00:41,840
before we get into what we do there we

00:00:40,490 --> 00:00:47,090
want to talk a little bit about IOT

00:00:41,840 --> 00:00:49,400
itself to put it simply IOT sucks we all

00:00:47,090 --> 00:00:52,040
kind of know this if you go on Twitter

00:00:49,400 --> 00:00:55,820
you can find many many tweets about IOT

00:00:52,040 --> 00:00:58,310
products this person's thermometer can't

00:00:55,820 --> 00:01:01,010
be used for cooking because it needs a

00:00:58,310 --> 00:01:02,989
software update this person sprinklers

00:01:01,010 --> 00:01:06,710
won't work because they aren't currently

00:01:02,989 --> 00:01:10,130
connected to their Wi-Fi network and my

00:01:06,710 --> 00:01:13,370
personal favorite is a BBQ offering to

00:01:10,130 --> 00:01:14,450
be this person's default browser you

00:01:13,370 --> 00:01:17,590
could spend all day looking at these

00:01:14,450 --> 00:01:20,240
they're very entertaining but they do

00:01:17,590 --> 00:01:23,120
reflect some of the very real problems

00:01:20,240 --> 00:01:26,630
that IOT products have and those are

00:01:23,120 --> 00:01:30,620
worth listing briefly privacy isn't

00:01:26,630 --> 00:01:32,750
respected companies orphan products we

00:01:30,620 --> 00:01:34,159
have to beg manufacturers for features

00:01:32,750 --> 00:01:37,040
rather than just writing the code

00:01:34,159 --> 00:01:39,320
ourselves manufacturers make choices

00:01:37,040 --> 00:01:41,510
about interoperability based on their

00:01:39,320 --> 00:01:44,330
strategic relationships rather than our

00:01:41,510 --> 00:01:47,630
needs for the product the s and IOT

00:01:44,330 --> 00:01:49,670
stands for security products are

00:01:47,630 --> 00:01:51,710
unreliable because companies under

00:01:49,670 --> 00:01:54,920
invest in testing especially their

00:01:51,710 --> 00:01:57,740
software we won't go into details this

00:01:54,920 --> 00:01:59,810
is already well established we aren't

00:01:57,740 --> 00:02:03,200
here to point fingers or complain about

00:01:59,810 --> 00:02:06,890
IOT we're here to invite you to help fix

00:02:03,200 --> 00:02:08,869
it we believe that web developers are in

00:02:06,890 --> 00:02:11,269
a unique position to help resuscitate

00:02:08,869 --> 00:02:13,159
IOT that's because they already have

00:02:11,269 --> 00:02:15,409
experience solving many of these

00:02:13,159 --> 00:02:17,659
problems on the web and it's also

00:02:15,409 --> 00:02:18,970
because some of the key technologies of

00:02:17,659 --> 00:02:21,250
the web

00:02:18,970 --> 00:02:24,220
we'll focus on JavaScript in this talk

00:02:21,250 --> 00:02:28,090
are now ready to use in the embedded

00:02:24,220 --> 00:02:29,950
software that powers IOT projects so who

00:02:28,090 --> 00:02:33,370
do we mean when we say web developers

00:02:29,950 --> 00:02:36,340
it's not us we're certainly not web

00:02:33,370 --> 00:02:38,560
developers but into that broad category

00:02:36,340 --> 00:02:41,380
we include both front-end and back-end

00:02:38,560 --> 00:02:43,900
developers so developers working in

00:02:41,380 --> 00:02:48,040
javascript in the browser and developers

00:02:43,900 --> 00:02:49,990
working in javascript with nodejs we

00:02:48,040 --> 00:02:52,480
should also define what we mean by

00:02:49,990 --> 00:02:54,910
embedded software there are lots of

00:02:52,480 --> 00:02:57,130
definitions around code that works with

00:02:54,910 --> 00:03:00,820
hardware code that runs in devices

00:02:57,130 --> 00:03:03,450
including IOT products code that runs on

00:03:00,820 --> 00:03:06,160
constrained or resource limited hardware

00:03:03,450 --> 00:03:08,830
often all of those are true but it isn't

00:03:06,160 --> 00:03:11,140
what we mean by embedded embedded

00:03:08,830 --> 00:03:13,720
software is software written for a set

00:03:11,140 --> 00:03:15,610
of known constraints you know the

00:03:13,720 --> 00:03:18,010
constraints before you start coding

00:03:15,610 --> 00:03:21,580
they can include Hardware constraints

00:03:18,010 --> 00:03:24,489
like memory storage space CPU power and

00:03:21,580 --> 00:03:26,530
energy or battery power they could also

00:03:24,489 --> 00:03:28,209
include other software constraints like

00:03:26,530 --> 00:03:30,640
knowing which JavaScript engine you are

00:03:28,209 --> 00:03:33,160
using which JavaScript features it

00:03:30,640 --> 00:03:36,610
supports and which modules are available

00:03:33,160 --> 00:03:39,280
a key part of embedded development is

00:03:36,610 --> 00:03:41,760
tailoring the implementation to deliver

00:03:39,280 --> 00:03:43,959
great results within the constraints

00:03:41,760 --> 00:03:47,380
fundamentally these are optimization

00:03:43,959 --> 00:03:49,209
problems of course there are many

00:03:47,380 --> 00:03:51,489
differences between programming in

00:03:49,209 --> 00:03:54,310
JavaScript for the web and programming

00:03:51,489 --> 00:03:56,680
in JavaScript for embedded systems let's

00:03:54,310 --> 00:03:59,320
look at one seemingly simple question to

00:03:56,680 --> 00:04:01,450
see how and that question is what

00:03:59,320 --> 00:04:05,950
happens when your JavaScript code runs

00:04:01,450 --> 00:04:07,959
out of memory no one really knows the

00:04:05,950 --> 00:04:10,930
JavaScript language specification has

00:04:07,959 --> 00:04:13,500
almost no text about that there isn't a

00:04:10,930 --> 00:04:16,000
memory full error objector or anything

00:04:13,500 --> 00:04:18,850
the one place that out of memory

00:04:16,000 --> 00:04:21,850
behavior comes up is in allocating array

00:04:18,850 --> 00:04:24,580
buffers some call this JavaScript

00:04:21,850 --> 00:04:27,760
infinite memory model that memory can be

00:04:24,580 --> 00:04:30,700
allocated forever and of course it isn't

00:04:27,760 --> 00:04:32,320
true but on the web platform it's

00:04:30,700 --> 00:04:35,890
close enough to true that web developers

00:04:32,320 --> 00:04:39,010
take it for granted on embedded devices

00:04:35,890 --> 00:04:41,380
memory is far from infinite one of our

00:04:39,010 --> 00:04:44,170
favorite trips has about 45 kilobytes of

00:04:41,380 --> 00:04:48,790
free memory prescribes not 45 megabytes

00:04:44,170 --> 00:04:50,560
not 4 gigabytes 45 kilobytes the

00:04:48,790 --> 00:04:53,260
JavaScript engines and web browsers

00:04:50,560 --> 00:04:56,260
can't even launch with 45 kilobytes of

00:04:53,260 --> 00:04:59,110
memory embedded JavaScript developers

00:04:56,260 --> 00:05:01,060
ship products with that memory maybe

00:04:59,110 --> 00:05:04,030
you're thinking why not just add more

00:05:01,060 --> 00:05:07,510
memory it isn't that expensive it is

00:05:04,030 --> 00:05:09,280
that expensive IOT products tend to be

00:05:07,510 --> 00:05:11,620
cost sensitive because their profit

00:05:09,280 --> 00:05:14,770
margins are thin and their markets are

00:05:11,620 --> 00:05:17,320
competitive that chip with 45 kilobytes

00:05:14,770 --> 00:05:19,570
of memory costs about a dollar adding

00:05:17,320 --> 00:05:22,450
memory can easily cost 50 cents or $1

00:05:19,570 --> 00:05:24,460
more and make the board bigger make it

00:05:22,450 --> 00:05:26,440
use more energy I had more high

00:05:24,460 --> 00:05:28,450
frequency traces to its board which

00:05:26,440 --> 00:05:31,860
makes RF certification more difficult

00:05:28,450 --> 00:05:34,000
and more all of that increases cost

00:05:31,860 --> 00:05:37,480
software that delivers within the

00:05:34,000 --> 00:05:39,820
constraints saves people money finally

00:05:37,480 --> 00:05:42,070
remember that IOT features are only part

00:05:39,820 --> 00:05:42,730
of a product the product exists to do

00:05:42,070 --> 00:05:45,400
something else

00:05:42,730 --> 00:05:48,640
be it a door lock a washing machine or a

00:05:45,400 --> 00:05:51,130
thermostat IOT just helps here's a

00:05:48,640 --> 00:05:54,040
sticker on an IOT dryer that we found at

00:05:51,130 --> 00:05:55,960
Home Depot notice that Wi-Fi is just

00:05:54,040 --> 00:05:58,060
another feature one that the

00:05:55,960 --> 00:06:00,910
manufacturer appears to see is less

00:05:58,060 --> 00:06:03,130
important than steam we mentioned

00:06:00,910 --> 00:06:05,590
JavaScript engines that are used on the

00:06:03,130 --> 00:06:07,930
web won't run on the hardware and IOT

00:06:05,590 --> 00:06:10,030
products but fortunately there are

00:06:07,930 --> 00:06:12,040
JavaScript engines dedicated to embedded

00:06:10,030 --> 00:06:15,220
devices and you may have heard of some

00:06:12,040 --> 00:06:18,480
of them there's s Perino duct tape

00:06:15,220 --> 00:06:21,340
gerri script v7 and several others and

00:06:18,480 --> 00:06:23,710
all of these exists because the detailed

00:06:21,340 --> 00:06:25,690
work to standardize JavaScript has made

00:06:23,710 --> 00:06:28,750
it practical to create engines optimized

00:06:25,690 --> 00:06:30,730
for specialized needs but all of these

00:06:28,750 --> 00:06:32,920
engines have in common is that they

00:06:30,730 --> 00:06:36,190
implement es5 the fifth edition of

00:06:32,920 --> 00:06:38,290
javascript from 2009 and while some

00:06:36,190 --> 00:06:40,210
implement a handful of more modern

00:06:38,290 --> 00:06:43,980
language features the fundamental

00:06:40,210 --> 00:06:43,980
programming experience is somewhat dated

00:06:44,230 --> 00:06:48,630
you may not have heard of the excess

00:06:46,450 --> 00:06:52,120
JavaScript engine that's models engine

00:06:48,630 --> 00:06:55,330
for most of its 15-year history excess

00:06:52,120 --> 00:06:57,820
has kept a pretty low profile but excess

00:06:55,330 --> 00:07:00,700
is the only modern JavaScript engine for

00:06:57,820 --> 00:07:02,920
embedded devices how modern look at the

00:07:00,700 --> 00:07:04,990
results from test two six to report the

00:07:02,920 --> 00:07:08,290
definitive test suite for JavaScript

00:07:04,990 --> 00:07:10,330
language conformance no other engine

00:07:08,290 --> 00:07:14,290
targeting resource-constrained devices

00:07:10,330 --> 00:07:16,210
is included not only is excess here it

00:07:14,290 --> 00:07:19,570
has better language conformance than the

00:07:16,210 --> 00:07:21,700
JavaScript engines and many browsers why

00:07:19,570 --> 00:07:24,340
doesn't everyone switch to XS if it has

00:07:21,700 --> 00:07:28,080
such amazing language support the answer

00:07:24,340 --> 00:07:31,000
is in its name XS stands for extra small

00:07:28,080 --> 00:07:34,450
XS focuses on being small small memory

00:07:31,000 --> 00:07:36,940
size small code size to run on an

00:07:34,450 --> 00:07:39,150
expensive Hardware the engines used on

00:07:36,940 --> 00:07:42,880
the web platform are optimized for speed

00:07:39,150 --> 00:07:44,940
still X s is more than fast enough for

00:07:42,880 --> 00:07:47,770
consumer and industrial IOT products

00:07:44,940 --> 00:07:50,050
let's take a quick look at examples of

00:07:47,770 --> 00:07:53,650
consumer and industrial IOT products

00:07:50,050 --> 00:07:55,330
built on X s this is a control panel I

00:07:53,650 --> 00:07:57,460
have a monitor for manufacturing

00:07:55,330 --> 00:08:00,760
equipment unlike the user interface of

00:07:57,460 --> 00:08:03,010
most industrial IOT this one has a color

00:08:00,760 --> 00:08:05,140
screen with a familiar touch user

00:08:03,010 --> 00:08:07,570
interface which makes it easier to set

00:08:05,140 --> 00:08:09,400
up and operate here you can see how it's

00:08:07,570 --> 00:08:12,370
configured with a type in search field

00:08:09,400 --> 00:08:14,140
similar to a smartphone and what's

00:08:12,370 --> 00:08:16,330
really surprising is that this product

00:08:14,140 --> 00:08:19,680
is completely controlled by a chip that

00:08:16,330 --> 00:08:22,570
costs two dollars and thirty five cents

00:08:19,680 --> 00:08:26,050
this is a sterilization system under

00:08:22,570 --> 00:08:28,390
development for ambulances it uses half

00:08:26,050 --> 00:08:30,070
a dozen sensors to determine when the

00:08:28,390 --> 00:08:32,380
inside of the ambulance needs to be

00:08:30,070 --> 00:08:35,470
sterilized and then when it detects that

00:08:32,380 --> 00:08:37,479
the ambulance is empty it activates UV

00:08:35,470 --> 00:08:40,000
lights to sterilize the inside for the

00:08:37,479 --> 00:08:41,800
next patient the system is entirely

00:08:40,000 --> 00:08:44,350
controlled by JavaScript including

00:08:41,800 --> 00:08:47,220
secure cloud communication to report the

00:08:44,350 --> 00:08:47,220
system status

00:08:47,960 --> 00:08:53,220
these are home laundry appliances the

00:08:50,820 --> 00:08:55,649
entire user experience is coded in

00:08:53,220 --> 00:08:57,899
modern JavaScript using the pew user

00:08:55,649 --> 00:09:00,240
interface framework but that's not all

00:08:57,899 --> 00:09:02,880
the logic to configure and control

00:09:00,240 --> 00:09:04,410
cycles is to so it's all the

00:09:02,880 --> 00:09:07,350
communication code to talk with the

00:09:04,410 --> 00:09:09,120
cloud for remote control the performance

00:09:07,350 --> 00:09:11,070
is great and the cost is low which

00:09:09,120 --> 00:09:13,020
allows the manufacturer to include these

00:09:11,070 --> 00:09:16,500
features in dozens of different models

00:09:13,020 --> 00:09:18,750
not just the premium ones if you as a

00:09:16,500 --> 00:09:20,880
web developer or to sit down and read

00:09:18,750 --> 00:09:22,290
the code of these products much of it

00:09:20,880 --> 00:09:25,440
would be familiar because you already

00:09:22,290 --> 00:09:27,660
know the programming language some api's

00:09:25,440 --> 00:09:30,510
would be familiar to web workers for

00:09:27,660 --> 00:09:32,490
example but many would be unfamiliar

00:09:30,510 --> 00:09:35,910
instead of Dom for the user interface

00:09:32,490 --> 00:09:40,140
they use pew instead of fetch they use a

00:09:35,910 --> 00:09:41,790
custom HTTP client class these classes

00:09:40,140 --> 00:09:43,290
are different from the web because

00:09:41,790 --> 00:09:46,500
they're designed to work with far fewer

00:09:43,290 --> 00:09:49,170
resources but they're also different

00:09:46,500 --> 00:09:50,640
between different embedded JavaScript

00:09:49,170 --> 00:09:52,760
engines because those embedded

00:09:50,640 --> 00:09:55,620
JavaScript engines evolved independently

00:09:52,760 --> 00:09:58,620
kind of like how JavaScript engines on

00:09:55,620 --> 00:10:01,730
the early web evolved before ECMO tc39

00:09:58,620 --> 00:10:03,779
began the work of standardization

00:10:01,730 --> 00:10:07,529
embedded javascript would be a lot

00:10:03,779 --> 00:10:09,360
easier with standard ap eyes so model in

00:10:07,529 --> 00:10:12,150
beaucoup worked with Ekman International

00:10:09,360 --> 00:10:15,959
to create a new Technical Committee TC

00:10:12,150 --> 00:10:17,880
53 to try to solve this problem boku is

00:10:15,959 --> 00:10:21,060
the driving force behind johnny-five

00:10:17,880 --> 00:10:23,839
the JavaScript robotics toolkit and has

00:10:21,060 --> 00:10:27,089
extensive experience and web standards

00:10:23,839 --> 00:10:30,410
the TC 53 contributors have a wide

00:10:27,089 --> 00:10:32,940
variety of interests and expertise

00:10:30,410 --> 00:10:34,980
representatives like us for multiple are

00:10:32,940 --> 00:10:38,040
interested in efficient scripting and

00:10:34,980 --> 00:10:39,990
touchscreen support there is a delegate

00:10:38,040 --> 00:10:42,209
from Michigan State University who

00:10:39,990 --> 00:10:45,120
focuses on data precision for big data

00:10:42,209 --> 00:10:47,100
analysis members from agora are

00:10:45,120 --> 00:10:49,529
interested in provably secure script

00:10:47,100 --> 00:10:51,750
execution beaucoup brings their

00:10:49,529 --> 00:10:52,550
expertise in sensors and robotics

00:10:51,750 --> 00:10:56,730
applications

00:10:52,550 --> 00:10:59,270
lightin focuses on portable drivers for

00:10:56,730 --> 00:11:00,780
sensors displays and energy harvesting

00:10:59,270 --> 00:11:03,060
monotype bring

00:11:00,780 --> 00:11:05,490
expertise in text handling fonts and

00:11:03,060 --> 00:11:07,590
text rendering and whirlpool for

00:11:05,490 --> 00:11:10,770
embedded system requirements and focus

00:11:07,590 --> 00:11:13,980
on safe operation the formal name of TC

00:11:10,770 --> 00:11:16,800
53 is Atma script modules for embedded

00:11:13,980 --> 00:11:19,350
systems so the name sort of explains the

00:11:16,800 --> 00:11:22,320
focus its defining standard modules for

00:11:19,350 --> 00:11:25,400
JavaScript there's no intention to

00:11:22,320 --> 00:11:28,470
extend JavaScript or to define a subset

00:11:25,400 --> 00:11:31,320
specifically for embedded the modules

00:11:28,470 --> 00:11:33,770
that TC 53 defines are intended for use

00:11:31,320 --> 00:11:36,840
in embedded systems and IOT products

00:11:33,770 --> 00:11:38,730
these api's are not destined for the web

00:11:36,840 --> 00:11:42,630
anymore than Dom is destined for a

00:11:38,730 --> 00:11:45,570
labeled TC 53 takes inspiration from the

00:11:42,630 --> 00:11:47,520
extensible web manifesto the idea that

00:11:45,570 --> 00:11:51,210
standards should focus on low-level

00:11:47,520 --> 00:11:53,430
api's for developers to build on TC 53

00:11:51,210 --> 00:11:56,220
is following that idea by starting at

00:11:53,430 --> 00:11:58,980
the lowest practical level a JavaScript

00:11:56,220 --> 00:12:00,960
hardware abstraction layer this allows a

00:11:58,980 --> 00:12:03,450
device to boot almost immediately to

00:12:00,960 --> 00:12:05,760
JavaScript the dryer you just saw it

00:12:03,450 --> 00:12:07,760
does that this gives scripts near

00:12:05,760 --> 00:12:10,080
complete control of the hardware

00:12:07,760 --> 00:12:11,850
developers build up from there with

00:12:10,080 --> 00:12:14,820
modules and frameworks to create

00:12:11,850 --> 00:12:16,110
products to give you an idea of what

00:12:14,820 --> 00:12:18,360
working with the hardware abstraction

00:12:16,110 --> 00:12:21,150
layer looks like let's look at a simple

00:12:18,360 --> 00:12:22,970
example if you experimented with Arduino

00:12:21,150 --> 00:12:25,950
this will look familiar

00:12:22,970 --> 00:12:30,590
blink uses a button to turn an LED on

00:12:25,950 --> 00:12:30,590
and off and here's how it looks in C

00:12:37,610 --> 00:12:48,500
in JavaScript using the TC 53 digital

00:12:41,330 --> 00:12:52,490
i/o it looks like this we're practical

00:12:48,500 --> 00:12:55,760
TC 53 API is use familiar API styles so

00:12:52,490 --> 00:12:58,340
notice that the digital class API uses a

00:12:55,760 --> 00:13:00,260
callback this is a very common way to

00:12:58,340 --> 00:13:03,830
deliver asynchronous events in

00:13:00,260 --> 00:13:05,750
JavaScript we recognize that many newer

00:13:03,830 --> 00:13:08,480
api's on the web use promises

00:13:05,750 --> 00:13:11,870
however for performance and simplicity

00:13:08,480 --> 00:13:14,030
TC 53 uses callbacks the callbacks can

00:13:11,870 --> 00:13:16,790
be used to implement promise based api's

00:13:14,030 --> 00:13:20,600
by libraries building up from the TC 53

00:13:16,790 --> 00:13:23,030
specified modules also notice that the

00:13:20,600 --> 00:13:25,490
Constructors are configured with an

00:13:23,030 --> 00:13:28,610
options object this is familiar and

00:13:25,490 --> 00:13:32,090
extensible extensibility is important

00:13:28,610 --> 00:13:34,010
the low-level TC 53 api's are a hardware

00:13:32,090 --> 00:13:36,890
abstraction layer not a least common

00:13:34,010 --> 00:13:39,740
denominator api so where hardware is the

00:13:36,890 --> 00:13:43,370
same TC 53 wants it to support the same

00:13:39,740 --> 00:13:45,140
api's but TC 53 also wants it to be

00:13:43,370 --> 00:13:47,540
possible to benefit from hardware

00:13:45,140 --> 00:13:50,110
differences extensibility provides

00:13:47,540 --> 00:13:53,210
scripts access to those unique features

00:13:50,110 --> 00:13:55,010
one of the coolest features of TC 53 s

00:13:53,210 --> 00:13:57,590
work is inspired by the Fermata

00:13:55,010 --> 00:14:00,440
communication protocol used by the

00:13:57,590 --> 00:14:02,000
chatty v robotics library a typical

00:14:00,440 --> 00:14:04,160
embedded system consists of the

00:14:02,000 --> 00:14:06,920
microcontroller and several peripheral

00:14:04,160 --> 00:14:10,760
chips some of those external chips add

00:14:06,920 --> 00:14:12,710
more i/o capabilities TC 53 has an i/o

00:14:10,760 --> 00:14:15,620
class called an expander to support

00:14:12,710 --> 00:14:18,440
these a common type of expander provides

00:14:15,620 --> 00:14:20,300
additional digital pins a script creates

00:14:18,440 --> 00:14:23,780
an expander using an options object

00:14:20,300 --> 00:14:25,940
based constructor you can access the

00:14:23,780 --> 00:14:27,740
digital pins of the expander exactly

00:14:25,940 --> 00:14:29,930
like the built in pins in the blink

00:14:27,740 --> 00:14:33,320
example here's the blink example

00:14:29,930 --> 00:14:35,000
modified to use the expander pins all

00:14:33,320 --> 00:14:37,280
that has changed is the name of the

00:14:35,000 --> 00:14:40,550
constructor from digital to expand or

00:14:37,280 --> 00:14:42,290
dot digital expanders are a powerful new

00:14:40,550 --> 00:14:44,390
concept for working with hardware in

00:14:42,290 --> 00:14:46,340
JavaScript and they aren't limited to

00:14:44,390 --> 00:14:48,680
hardware physically connected to the

00:14:46,340 --> 00:14:50,030
microcontroller we've built expanders

00:14:48,680 --> 00:14:51,020
that connect to wearables using

00:14:50,030 --> 00:14:53,690
bluetooth

00:14:51,020 --> 00:14:55,460
and to cloud services using Wi-Fi this

00:14:53,690 --> 00:14:58,190
makes controlling hardware with scripts

00:14:55,460 --> 00:15:02,690
simple and consistent no matter where in

00:14:58,190 --> 00:15:05,600
the world the hardware is located TC 53

00:15:02,690 --> 00:15:07,970
is also working on security I know and

00:15:05,600 --> 00:15:10,370
everyone in IOT says that but we're

00:15:07,970 --> 00:15:12,980
taking a different approach actually at

00:15:10,370 --> 00:15:15,350
our first meeting like everyone we

00:15:12,980 --> 00:15:18,290
agreed on the importance of security but

00:15:15,350 --> 00:15:21,710
we had no idea how to solve it so we set

00:15:18,290 --> 00:15:24,350
it aside later we learned about secure

00:15:21,710 --> 00:15:27,500
Atmos crypt sess a proposal to add

00:15:24,350 --> 00:15:29,510
secure execution to javascript sess is

00:15:27,500 --> 00:15:31,580
based on work by Mark Miller of a goreck

00:15:29,510 --> 00:15:34,730
to bring the proven object capabilities

00:15:31,580 --> 00:15:36,920
security model to JavaScript cess is

00:15:34,730 --> 00:15:39,320
great because it allows trusted and

00:15:36,920 --> 00:15:41,590
untrusted scripts to coexist even

00:15:39,320 --> 00:15:44,630
communicate directly while guaranteeing

00:15:41,590 --> 00:15:46,880
security boundaries are enforced it does

00:15:44,630 --> 00:15:49,220
this using lightweight sand boxes called

00:15:46,880 --> 00:15:51,140
compartments which allow code from

00:15:49,220 --> 00:15:54,440
different authors to be safely combined

00:15:51,140 --> 00:15:56,930
in a single system thus s approach

00:15:54,440 --> 00:16:00,170
elegantly meets the security needs of TC

00:15:56,930 --> 00:16:02,270
53 and importantly it can be efficiently

00:16:00,170 --> 00:16:06,860
implemented on embedded systems with

00:16:02,270 --> 00:16:09,250
limited resources we know this because

00:16:06,860 --> 00:16:12,140
we already implemented cess in excess

00:16:09,250 --> 00:16:16,700
last year we showed cess running on an

00:16:12,140 --> 00:16:19,160
$18 IOT light bulb TC 53 has decided to

00:16:16,700 --> 00:16:21,650
adopt cess as its execution security

00:16:19,160 --> 00:16:24,650
model we are working with the gorrik to

00:16:21,650 --> 00:16:26,450
advance this work in tc39 and hope it

00:16:24,650 --> 00:16:30,590
will one day be part of the javascript

00:16:26,450 --> 00:16:33,080
standard all of this is just some of the

00:16:30,590 --> 00:16:35,540
work that TC 53 is doing to standardize

00:16:33,080 --> 00:16:36,800
embedded javascript but you don't have

00:16:35,540 --> 00:16:38,300
to wait for the standards work to be

00:16:36,800 --> 00:16:40,160
finished to get started learning and

00:16:38,300 --> 00:16:41,840
developing some adventurous web

00:16:40,160 --> 00:16:44,750
developers are already starting to

00:16:41,840 --> 00:16:47,090
explore embedded javascript some like

00:16:44,750 --> 00:16:50,410
Shinya Ishikawa son are simultaneously

00:16:47,090 --> 00:16:50,410
learning and teaching others

00:16:53,749 --> 00:16:58,739
others like William Hilton with his

00:16:56,309 --> 00:17:00,239
isomorphic git project are pushing at

00:16:58,739 --> 00:17:02,279
the boundaries of what's possible on

00:17:00,239 --> 00:17:04,079
embedded systems and developing models

00:17:02,279 --> 00:17:07,019
for sharing code between web and

00:17:04,079 --> 00:17:09,269
embedded projects out there building the

00:17:07,019 --> 00:17:11,880
IOT products they wish already existed

00:17:09,269 --> 00:17:14,490
when the Cova 19 culture in place began

00:17:11,880 --> 00:17:16,860
Mike Edmund a web developer working from

00:17:14,490 --> 00:17:19,620
home had a difficult time balancing work

00:17:16,860 --> 00:17:21,419
meetings with family communication so he

00:17:19,620 --> 00:17:24,389
used his JavaScript skills to create a

00:17:21,419 --> 00:17:26,220
solution javascript in the browser gave

00:17:24,389 --> 00:17:28,169
access to his Outlook calendar to

00:17:26,220 --> 00:17:30,809
JavaScript on a model to development

00:17:28,169 --> 00:17:32,580
board the result allowed his family to

00:17:30,809 --> 00:17:34,320
know when he had a work meeting and even

00:17:32,580 --> 00:17:35,940
better he added buttons for each family

00:17:34,320 --> 00:17:39,389
member so they could signal for his

00:17:35,940 --> 00:17:41,309
attention this is the kind of useful

00:17:39,389 --> 00:17:43,649
project that large manufacturers aren't

00:17:41,309 --> 00:17:44,429
creating but to help real people solve

00:17:43,649 --> 00:17:46,710
real problems

00:17:44,429 --> 00:17:49,289
Mike published his code so anyone can

00:17:46,710 --> 00:17:51,269
replicate his setup improve it and adapt

00:17:49,289 --> 00:17:53,100
it to their needs that's the kind of

00:17:51,269 --> 00:17:54,809
people centric project that is possible

00:17:53,100 --> 00:18:00,600
when web developers bring their skills

00:17:54,809 --> 00:18:07,590
to IOT thank you we hope we've inspired

00:18:00,600 --> 00:18:09,630
you if you want to learn more about TC

00:18:07,590 --> 00:18:11,909
53 we're having our next meeting this

00:18:09,630 --> 00:18:14,279
Thursday and Friday you're welcome to

00:18:11,909 --> 00:18:16,919
sit in our first day agenda is an

00:18:14,279 --> 00:18:18,899
introduction to TC 53 so you'll hear

00:18:16,919 --> 00:18:20,750
from various contributors about our

00:18:18,899 --> 00:18:22,980
roadmap please join us

00:18:20,750 --> 00:18:24,570
we'd love to see more JavaScript

00:18:22,980 --> 00:18:28,200
developers getting excited about this

00:18:24,570 --> 00:18:29,159
and getting involved if you want to

00:18:28,200 --> 00:18:30,840
learn more about moddable

00:18:29,159 --> 00:18:33,149
check out our website and blog at

00:18:30,840 --> 00:18:35,610
marvel.com if you want to get started

00:18:33,149 --> 00:18:38,070
developing with excess the model SDK is

00:18:35,610 --> 00:18:39,779
available on github you can also follow

00:18:38,070 --> 00:18:41,519
us on Twitter to get frequent updates

00:18:39,779 --> 00:18:45,149
about what we're doing and see what

00:18:41,519 --> 00:18:47,190
other developers are working on we also

00:18:45,149 --> 00:18:51,179
just finished writing a book called IOT

00:18:47,190 --> 00:18:53,340
development for ESP 32 and esp8266 with

00:18:51,179 --> 00:18:55,169
JavaScript if you want a hands-on guide

00:18:53,340 --> 00:18:57,899
to building IOT products that can buy

00:18:55,169 --> 00:19:00,570
networking sensors actuators sound

00:18:57,899 --> 00:19:02,580
graphical user interfaces and more this

00:19:00,570 --> 00:19:03,720
will be a great resource for you it's

00:19:02,580 --> 00:19:06,840
expected to be published later this

00:19:03,720 --> 00:19:09,269
summer but you can pre-order it now

00:19:06,840 --> 00:19:10,230
if you have questions about TC 53

00:19:09,269 --> 00:19:12,240
moddable

00:19:10,230 --> 00:19:14,549
or javascript for embedded in general

00:19:12,240 --> 00:19:17,749
will be around for a Q&A session right

00:19:14,549 --> 00:19:17,749

YouTube URL: https://www.youtube.com/watch?v=MIS6zNPfSuA


