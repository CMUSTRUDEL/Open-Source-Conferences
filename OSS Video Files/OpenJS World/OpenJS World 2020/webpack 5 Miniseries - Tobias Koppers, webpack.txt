Title: webpack 5 Miniseries - Tobias Koppers, webpack
Publication date: 2020-06-22
Playlist: OpenJS World 2020
Description: 
	
Captions: 
	00:00:02,409 --> 00:00:07,389
hi welcome to this back five mini series

00:00:05,500 --> 00:00:09,519
this is the belly and you should talk

00:00:07,389 --> 00:00:11,440
for me I usually cover one topic in deep

00:00:09,519 --> 00:00:12,730
but here I want to cover multiple topics

00:00:11,440 --> 00:00:14,230
I want to give you a broader overview

00:00:12,730 --> 00:00:16,990
over this topic so this is a

00:00:14,230 --> 00:00:18,579
concatenation of multiple smaller talks

00:00:16,990 --> 00:00:20,499
which cover one aspect of the epic five

00:00:18,579 --> 00:00:22,779
it will cover how to get started with

00:00:20,499 --> 00:00:24,730
epic files but breaking changes you may

00:00:22,779 --> 00:00:26,949
expect bigger features like persistent

00:00:24,730 --> 00:00:29,409
caching of module affiliation but also

00:00:26,949 --> 00:00:32,349
smaller improvements like optimizations

00:00:29,409 --> 00:00:34,950
or other features I hope you enjoyed

00:00:32,349 --> 00:00:34,950
watching C's

00:00:36,170 --> 00:00:41,030
so how to get started using the pick

00:00:38,329 --> 00:00:43,940
five and so if you currently install

00:00:41,030 --> 00:00:45,800
that pick fire epic from NPM you will

00:00:43,940 --> 00:00:48,019
get the stable version and stable

00:00:45,800 --> 00:00:51,170
version of epic four and if you want to

00:00:48,019 --> 00:00:53,629
get the latest a replica version beta

00:00:51,170 --> 00:00:56,469
version you want to use the next tech on

00:00:53,629 --> 00:01:00,949
NPM and instead of via these commands

00:00:56,469 --> 00:01:04,009
from NPM to get started using that take

00:01:00,949 --> 00:01:08,090
five you may want to it's a migration

00:01:04,009 --> 00:01:09,530
guide about epics I've make migration it

00:01:08,090 --> 00:01:13,069
contains a lot of useful information

00:01:09,530 --> 00:01:16,850
what to do how to prepare and to upgrade

00:01:13,069 --> 00:01:20,119
and what you want to install and what

00:01:16,850 --> 00:01:21,799
major pinpoints like making changes or

00:01:20,119 --> 00:01:28,420
what configuration option you need to be

00:01:21,799 --> 00:01:28,420
changed and also some help in January

00:01:29,060 --> 00:01:35,150
if you want to know more than there's

00:01:32,270 --> 00:01:38,210
this changed work people which listen of

00:01:35,150 --> 00:01:40,759
useful information about details like

00:01:38,210 --> 00:01:43,220
what which just has been added what it

00:01:40,759 --> 00:01:44,990
just has been changed breaking change

00:01:43,220 --> 00:01:48,770
all the bacon changes or the details

00:01:44,990 --> 00:01:51,050
about little changes and changes to the

00:01:48,770 --> 00:01:54,830
defaults into configuration changes to

00:01:51,050 --> 00:01:58,250
creation and api's or internal changes

00:01:54,830 --> 00:02:01,130
for plugins and Ladas and much

00:01:58,250 --> 00:02:03,380
information in this vehicle and lady we

00:02:01,130 --> 00:02:05,360
want to move this change talk to the

00:02:03,380 --> 00:02:08,269
official documentation but for now it's

00:02:05,360 --> 00:02:11,300
in this temporary people will now ask to

00:02:08,269 --> 00:02:14,060
be iterate faster on this one major

00:02:11,300 --> 00:02:17,480
breaking change in epic 5 is that it

00:02:14,060 --> 00:02:20,030
moved duplicated things if you get

00:02:17,480 --> 00:02:21,890
interpretation messages in the pic for

00:02:20,030 --> 00:02:24,530
you may want to get rid of them before

00:02:21,890 --> 00:02:27,800
upgrading to the pic files we also

00:02:24,530 --> 00:02:31,430
removed and the default pulley filling

00:02:27,800 --> 00:02:34,840
of a notice native modules by default if

00:02:31,430 --> 00:02:39,640
you're using modules like m crypt or

00:02:34,840 --> 00:02:42,320
utility m or all these note internal

00:02:39,640 --> 00:02:45,920
modules which are usually not available

00:02:42,320 --> 00:02:48,500
in fondant on the web in general and we

00:02:45,920 --> 00:02:51,170
know no longer polyfills them by default

00:02:48,500 --> 00:02:54,640
you can opt into polythene manually but

00:02:51,170 --> 00:02:57,970
we recommend to use content first

00:02:54,640 --> 00:03:01,459
modules which focus on fondant

00:02:57,970 --> 00:03:04,670
technology and web standards and don't

00:03:01,459 --> 00:03:07,670
use don't rely on polyfills for not as

00:03:04,670 --> 00:03:10,670
models we want to get rid of this

00:03:07,670 --> 00:03:13,519
dependency on the content ecosystem

00:03:10,670 --> 00:03:16,579
tools the node ecosystem and deathly

00:03:13,519 --> 00:03:19,400
fountain and notes appeals more separate

00:03:16,579 --> 00:03:21,799
and if you want to push into this future

00:03:19,400 --> 00:03:25,640
in future this map pack 5 we also

00:03:21,799 --> 00:03:28,430
upgraded the generated code standard or

00:03:25,640 --> 00:03:30,530
syntax in the pig 5 to a higher standard

00:03:28,430 --> 00:03:33,590
and this means e

00:03:30,530 --> 00:03:37,909
11 is no longer supported by default and

00:03:33,590 --> 00:03:39,680
if you want to the support 11 you may

00:03:37,909 --> 00:03:41,360
want to use a contribution option to opt

00:03:39,680 --> 00:03:42,160
into the order standard of code

00:03:41,360 --> 00:03:45,370
collaboration

00:03:42,160 --> 00:03:48,190
which will support these and older

00:03:45,370 --> 00:03:50,710
browsers the idea is that repick five

00:03:48,190 --> 00:03:55,000
should live longer than since bowlers

00:03:50,710 --> 00:03:57,940
and so we am implementing defaults edge

00:03:55,000 --> 00:04:00,880
should be prepare for such a food future

00:03:57,940 --> 00:04:03,840
we are and I quote Assad is supported by

00:04:00,880 --> 00:04:07,420
all in a month on us there are few

00:04:03,840 --> 00:04:10,630
behavior changes in epic 5 regarding

00:04:07,420 --> 00:04:12,190
supporting new aspects from new web

00:04:10,630 --> 00:04:15,790
specs that has been released in the

00:04:12,190 --> 00:04:18,370
meantime for example chaste modules they

00:04:15,790 --> 00:04:21,489
are suspect now for it must repent

00:04:18,370 --> 00:04:24,730
equations chasing modules and if you

00:04:21,489 --> 00:04:27,820
used to using named export from Jason

00:04:24,730 --> 00:04:29,680
modules this is no longer supported in

00:04:27,820 --> 00:04:32,560
the news pack which only supports the

00:04:29,680 --> 00:04:34,810
default export in this case web page 5

00:04:32,560 --> 00:04:38,380
will now emitted warning if you're using

00:04:34,810 --> 00:04:43,330
the old spec and and make your way

00:04:38,380 --> 00:04:45,550
offset and also say webassembly accommo

00:04:43,330 --> 00:04:49,450
step integration spec has been updated

00:04:45,550 --> 00:04:50,920
or released which makes some behavior

00:04:49,450 --> 00:04:53,110
changes regarding the assembly

00:04:50,920 --> 00:04:55,870
integration into agnostic material

00:04:53,110 --> 00:04:58,630
standards topic 5 you are able to opt

00:04:55,870 --> 00:05:01,450
into the new spec or the odds back and

00:04:58,630 --> 00:05:04,210
we recommend to align the coat with a

00:05:01,450 --> 00:05:06,580
new spec which is which approve for

00:05:04,210 --> 00:05:08,890
plugins if you use applicants you want

00:05:06,580 --> 00:05:12,130
to make sure that all your plugins that

00:05:08,890 --> 00:05:14,230
pick 5 compatible and you may want to

00:05:12,130 --> 00:05:17,940
upgrade or plugins to the latest version

00:05:14,230 --> 00:05:17,940
to get its support

00:05:18,660 --> 00:05:21,690
first feature about to show off its

00:05:19,950 --> 00:05:24,750
persistent caching it's also one of the

00:05:21,690 --> 00:05:26,760
biggest feature in epic life just look

00:05:24,750 --> 00:05:28,860
quite a lot of internet changes and

00:05:26,760 --> 00:05:31,590
refactorings to make it work like it

00:05:28,860 --> 00:05:34,740
works so resistant caching is like

00:05:31,590 --> 00:05:38,070
normal cutting but it's stolen to disk

00:05:34,740 --> 00:05:41,570
instead of in so currently that take for

00:05:38,070 --> 00:05:44,340
only uses mmm occasion to make watching

00:05:41,570 --> 00:05:48,120
you meant a built-in watch more very

00:05:44,340 --> 00:05:51,690
fast and president caching brings a

00:05:48,120 --> 00:05:54,330
caching feature to to this end allows

00:05:51,690 --> 00:05:57,210
you to see we start back without a large

00:05:54,330 --> 00:06:00,440
 in you compilation time so to show

00:05:57,210 --> 00:06:04,110
it em I've prepared this little example

00:06:00,440 --> 00:06:08,520
it just uses a lot of libraries to make

00:06:04,110 --> 00:06:09,810
it's a bit slower and I for preparation

00:06:08,520 --> 00:06:11,460
I already did

00:06:09,810 --> 00:06:13,620
development and the protection build it

00:06:11,460 --> 00:06:17,010
before and today will help me build

00:06:13,620 --> 00:06:18,960
talking about the 40 year and seconds

00:06:17,010 --> 00:06:23,760
and the protection built to get load a

00:06:18,960 --> 00:06:27,320
TV seconds so now when I do the same

00:06:23,760 --> 00:06:31,740
again without any change like young

00:06:27,320 --> 00:06:34,169
built like a budget build will take only

00:06:31,740 --> 00:06:37,350
F factor off this time and it will

00:06:34,169 --> 00:06:40,500
restore everything from cache and build

00:06:37,350 --> 00:06:42,300
in about 4 seconds it still which takes

00:06:40,500 --> 00:06:45,360
all the files or the build dependencies

00:06:42,300 --> 00:06:49,200
and everything to be sure that nothing

00:06:45,360 --> 00:06:51,870
changed and then it also compare files

00:06:49,200 --> 00:06:53,640
differences if there are modifications

00:06:51,870 --> 00:06:57,030
to the output file was ever a deleted

00:06:53,640 --> 00:07:01,140
and we omit them everything so it should

00:06:57,030 --> 00:07:04,050
be safe that everything is fine and the

00:07:01,140 --> 00:07:07,169
development build is usually just the

00:07:04,050 --> 00:07:10,020
same with smaller bigger files because

00:07:07,169 --> 00:07:14,050
it's not minimized

00:07:10,020 --> 00:07:16,420
but a little faster maybe also notice

00:07:14,050 --> 00:07:18,700
that and we are innovating very cool

00:07:16,420 --> 00:07:20,380
names automatically for for your

00:07:18,700 --> 00:07:23,590
channels based on the modules they

00:07:20,380 --> 00:07:25,630
contain that's one part of the

00:07:23,590 --> 00:07:28,480
development experience improvements in

00:07:25,630 --> 00:07:32,380
their pixel in the production will be

00:07:28,480 --> 00:07:34,480
generate ideas it kind of hashes this is

00:07:32,380 --> 00:07:37,720
a limitation for long term clashing to

00:07:34,480 --> 00:07:41,860
make chunk finance change less often

00:07:37,720 --> 00:07:45,190
anyway back to persistent caching so and

00:07:41,860 --> 00:07:49,180
I also can I now can be able to start a

00:07:45,190 --> 00:07:50,920
development watch mode within few

00:07:49,180 --> 00:07:54,160
seconds compared to as a full build

00:07:50,920 --> 00:07:56,350
which would take it 40 seconds after

00:07:54,160 --> 00:07:59,350
starting in watch mode I will enter as a

00:07:56,350 --> 00:08:05,040
in the more cache mode so in I always

00:07:59,350 --> 00:08:08,740
change from now on done in the movie so

00:08:05,040 --> 00:08:10,330
this will be as fast as period then when

00:08:08,740 --> 00:08:12,970
we storm from the persistent cache we

00:08:10,330 --> 00:08:16,780
don't lord any lower initial days as any

00:08:12,970 --> 00:08:19,540
of these people set us you need for your

00:08:16,780 --> 00:08:22,390
build so if you do the change for the

00:08:19,540 --> 00:08:26,890
first time we need to put up like babel

00:08:22,390 --> 00:08:29,440
order in this example and give it did a

00:08:26,890 --> 00:08:33,339
few times to speed up and also need a

00:08:29,440 --> 00:08:36,130
few iterations to get to full speed

00:08:33,339 --> 00:08:39,880
minutes optimized by javascript engine

00:08:36,130 --> 00:08:43,839
so you see like few seconds before

00:08:39,880 --> 00:08:49,420
what's the first try and then it it

00:08:43,839 --> 00:08:52,650
usually gets as fast as usual i found

00:08:49,420 --> 00:08:56,140
that many pencils this example

00:08:52,650 --> 00:08:59,370
okay and you also see that we down store

00:08:56,140 --> 00:09:01,540
is a persistent cash em on watch mode

00:08:59,370 --> 00:09:03,850
video oh wait

00:09:01,540 --> 00:09:06,490
like a minute read like a minute idle

00:09:03,850 --> 00:09:09,010
time until the stores a business in cash

00:09:06,490 --> 00:09:11,470
- don't want to into it interact with

00:09:09,010 --> 00:09:13,540
your user flow and want to keep

00:09:11,470 --> 00:09:16,120
everything fast so if you do a

00:09:13,540 --> 00:09:18,520
production build it will have to be a

00:09:16,120 --> 00:09:20,860
production build with changes done in

00:09:18,520 --> 00:09:23,560
the meantime and it will boost all the

00:09:20,860 --> 00:09:26,470
cash updates a compilation with the

00:09:23,560 --> 00:09:29,290
changes and it takes a little bit longer

00:09:26,470 --> 00:09:31,690
than just doing build without change

00:09:29,290 --> 00:09:33,460
because we know have to run the lower us

00:09:31,690 --> 00:09:35,950
to the minimal occasion of the changed

00:09:33,460 --> 00:09:38,080
file but in the end there is a built

00:09:35,950 --> 00:09:43,210
after position caching even if I've

00:09:38,080 --> 00:09:45,400
changed and I'm missing will be very

00:09:43,210 --> 00:09:47,800
stable very safe and it will always

00:09:45,400 --> 00:09:50,950
gonna wait reddit with solid ice

00:09:47,800 --> 00:09:54,250
thank you sir here it probably takes a

00:09:50,950 --> 00:09:56,920
few more seconds to to build this like 6

00:09:54,250 --> 00:09:59,380
seconds compared to this suite or to

00:09:56,920 --> 00:10:01,270
four seconds and when I've done this

00:09:59,380 --> 00:10:03,550
this first time cause now and like this

00:10:01,270 --> 00:10:05,320
I have to be we minimized because I

00:10:03,550 --> 00:10:07,810
change this file present in the casting

00:10:05,320 --> 00:10:10,960
is an opt-in feature so you don't get it

00:10:07,810 --> 00:10:13,660
by default you need to enable it we have

00:10:10,960 --> 00:10:16,560
some configuration you see here so

00:10:13,660 --> 00:10:18,730
better it's a cash option which uses

00:10:16,560 --> 00:10:21,730
file system uses make file system cache

00:10:18,730 --> 00:10:23,620
and you have to give it and like build

00:10:21,730 --> 00:10:27,310
appearances my dependencies are things

00:10:23,620 --> 00:10:29,680
that and define how your your module or

00:10:27,310 --> 00:10:31,770
a complete completion is build so like

00:10:29,680 --> 00:10:34,870
web pack version and also a

00:10:31,770 --> 00:10:37,390
configuration epic itself to build

00:10:34,870 --> 00:10:40,690
appearances and but you have to add the

00:10:37,390 --> 00:10:43,270
config file manually in this case and so

00:10:40,690 --> 00:10:45,970
to give it a complication and third

00:10:43,270 --> 00:10:49,150
dependencies change every were to work a

00:10:45,970 --> 00:10:51,490
fresh build and clear the cache the form

00:10:49,150 --> 00:10:54,430
if you also use some additional logging

00:10:51,490 --> 00:10:57,130
usually you won't that won't get any of

00:10:54,430 --> 00:10:58,990
these messages life timing information

00:10:57,130 --> 00:11:00,700
about the persisting Cashion and so on

00:10:58,990 --> 00:11:02,860
it would be silent and transparent and

00:11:00,700 --> 00:11:07,660
to vote won't see it in

00:11:02,860 --> 00:11:09,610
if not from timing the system caching is

00:11:07,660 --> 00:11:12,040
all the user builder plug-in so plugins

00:11:09,610 --> 00:11:14,770
can use the persistent cache API to

00:11:12,040 --> 00:11:17,290
stores our own data own carry

00:11:14,770 --> 00:11:19,300
information like a zoom in - also a

00:11:17,290 --> 00:11:21,220
separate plugins it tells I mean epic

00:11:19,300 --> 00:11:25,150
plug-in and such as I left a plate in

00:11:21,220 --> 00:11:29,170
uses as a epic five cache API to store

00:11:25,150 --> 00:11:31,380
yeah minimized besides and caching

00:11:29,170 --> 00:11:31,380
information

00:11:32,270 --> 00:11:38,270
we reppin other and new optimizations

00:11:34,910 --> 00:11:40,940
for - shaking or other things so the

00:11:38,270 --> 00:11:43,880
first thing is one time lipstick is only

00:11:40,940 --> 00:11:47,180
injected when it's really needed so if

00:11:43,880 --> 00:11:50,240
you bundle empty file you would actually

00:11:47,180 --> 00:11:52,520
get an empty file as output file this is

00:11:50,240 --> 00:11:55,880
buddy useful if you don't use all the

00:11:52,520 --> 00:12:00,110
antibiotic but through shaking yes an

00:11:55,880 --> 00:12:01,880
example is basing to shaking on the top

00:12:00,110 --> 00:12:03,920
left top right and you would see the

00:12:01,880 --> 00:12:05,870
production version of the bundle and

00:12:03,920 --> 00:12:08,270
here we would say there is a development

00:12:05,870 --> 00:12:10,250
version of the pandal first thing you

00:12:08,270 --> 00:12:13,160
may notice is that we started to use

00:12:10,250 --> 00:12:15,800
ever function yes we can await a higher

00:12:13,160 --> 00:12:18,920
level i one-time quote by default but

00:12:15,800 --> 00:12:21,920
this is controllable by a second option

00:12:18,920 --> 00:12:25,040
so if you disable this it set it to M

00:12:21,920 --> 00:12:27,920
most version 5 we will he was function

00:12:25,040 --> 00:12:30,060
instead of function s but we give it in

00:12:27,920 --> 00:12:33,710
the more demised way

00:12:30,060 --> 00:12:36,570
so better to shaking works as a user and

00:12:33,710 --> 00:12:38,490
with this little past info options you

00:12:36,570 --> 00:12:41,640
were able to obtain more information

00:12:38,490 --> 00:12:43,320
about fishing so you this isn't in the

00:12:41,640 --> 00:12:45,480
development bundle they are all the

00:12:43,320 --> 00:12:49,050
exports understood and if they provided

00:12:45,480 --> 00:12:51,630
used and also renamed the renaming is a

00:12:49,050 --> 00:12:55,710
little bit changed for long term caching

00:12:51,630 --> 00:12:59,040
so we don't generate ABCD and by default

00:12:55,710 --> 00:13:01,500
instead we can await rehash the name and

00:12:59,040 --> 00:13:03,720
gonna write a shot down the fire this

00:13:01,500 --> 00:13:05,940
better for for don't I'm cashing because

00:13:03,720 --> 00:13:07,770
they don't change it so often the basic

00:13:05,940 --> 00:13:11,550
twittering still works at the import

00:13:07,770 --> 00:13:13,560
ever and only Apple is injected in is

00:13:11,550 --> 00:13:16,230
exported and all other things would be

00:13:13,560 --> 00:13:18,690
clocked by minimizer and you see it's

00:13:16,230 --> 00:13:23,120
when marilla concatenated would be

00:13:18,690 --> 00:13:27,330
really optimized abundant be enabled and

00:13:23,120 --> 00:13:30,210
deeper nesting of export so if you have

00:13:27,330 --> 00:13:33,450
an example they are Buicks we export the

00:13:30,210 --> 00:13:35,700
module and let me show that not the

00:13:33,450 --> 00:13:38,760
first it's like a green banana yellow is

00:13:35,700 --> 00:13:40,890
to operate exporting now if you really

00:13:38,760 --> 00:13:43,050
explore this module this in names but

00:13:40,890 --> 00:13:46,380
epic and V exports namespace abject and

00:13:43,050 --> 00:13:49,380
then use it was a deep pass to suspend

00:13:46,380 --> 00:13:51,750
on export and vector could be able to

00:13:49,380 --> 00:13:54,270
handle this denied exactly the same

00:13:51,750 --> 00:13:57,570
output code in production and

00:13:54,270 --> 00:14:00,630
development would be either who practice

00:13:57,570 --> 00:14:04,850
keep information from exports and autumn

00:14:00,630 --> 00:14:09,080
angle or all day as on this side so it's

00:14:04,850 --> 00:14:13,200
yeah so potted and the next example is

00:14:09,080 --> 00:14:16,280
in a graph optimization in this case we

00:14:13,200 --> 00:14:19,320
use some functions and import some

00:14:16,280 --> 00:14:21,510
exports and this exports I only used in

00:14:19,320 --> 00:14:23,700
some functions so in this case we

00:14:21,510 --> 00:14:26,160
exports a gate function just say F

00:14:23,700 --> 00:14:28,920
function and the f12 misses things well

00:14:26,160 --> 00:14:32,940
export but the test export doesn't use

00:14:28,920 --> 00:14:35,580
it at all so if you only use the test

00:14:32,940 --> 00:14:39,540
export that they will be able to analyze

00:14:35,580 --> 00:14:41,640
it and will be able to observe this 12v

00:14:39,540 --> 00:14:47,269
export from the Panda

00:14:41,640 --> 00:14:47,269
in disguise nothing is used for module

00:14:48,870 --> 00:14:56,740
if I use get instead it will be using

00:14:53,320 --> 00:14:59,339
sloppy the next thing we optimize is

00:14:56,740 --> 00:15:01,959
some kind of secret feature is life and

00:14:59,339 --> 00:15:04,839
it was like you know comments modes I

00:15:01,959 --> 00:15:07,930
have the same module as commands us here

00:15:04,839 --> 00:15:10,089
was like assign exports module exports

00:15:07,930 --> 00:15:11,589
or also defining property lenses we have

00:15:10,089 --> 00:15:13,510
support more complex of cases but not

00:15:11,589 --> 00:15:16,510
everything is to the poet the common

00:15:13,510 --> 00:15:19,240
chess is basely only supported in and

00:15:16,510 --> 00:15:21,370
off sometimes may so only if it's

00:15:19,240 --> 00:15:23,680
statically analyzable you basically

00:15:21,370 --> 00:15:26,350
support common chase tree second in this

00:15:23,680 --> 00:15:30,430
manner so here and you would see that

00:15:26,350 --> 00:15:33,430
and epic will drop all unused to exports

00:15:30,430 --> 00:15:37,690
in Comanche s2 and Mongol exports the

00:15:33,430 --> 00:15:43,380
same they ask like in my script modules

00:15:37,690 --> 00:15:43,380
and it's all just and available to

00:15:43,530 --> 00:15:49,990
require em some common traits modules

00:15:47,290 --> 00:15:53,200
and use exports from there in this case

00:15:49,990 --> 00:15:56,680
and it could also optimize it with

00:15:53,200 --> 00:15:59,700
detect which ones I used same is

00:15:56,680 --> 00:16:02,770
available for the interrupt logic if you

00:15:59,700 --> 00:16:05,230
require a equipped module and only use

00:16:02,770 --> 00:16:07,230
some exports of them this block as you

00:16:05,230 --> 00:16:11,530
sure

00:16:07,230 --> 00:16:14,410
we also edit to shaking for Jason

00:16:11,530 --> 00:16:16,150
modules to striking from this so if you

00:16:14,410 --> 00:16:17,590
only use some properties like version or

00:16:16,150 --> 00:16:20,710
some D properties like dev dependencies

00:16:17,590 --> 00:16:23,680
we're back on this pick up Jason Tata

00:16:20,710 --> 00:16:26,350
we will optimize Jason and drop all

00:16:23,680 --> 00:16:28,270
unused properties mangaloray properties

00:16:26,350 --> 00:16:31,470
if say only used in statically

00:16:28,270 --> 00:16:33,820
analyzable way and Betty only in

00:16:31,470 --> 00:16:36,760
injector values you are really using in

00:16:33,820 --> 00:16:38,680
the bundle we're also using adjacent

00:16:36,760 --> 00:16:41,990
path optimization for faster one-time

00:16:38,680 --> 00:16:44,060
execution of Jason Tata

00:16:41,990 --> 00:16:46,970
and recently we added another

00:16:44,060 --> 00:16:49,580
optimization of manually metric comment

00:16:46,970 --> 00:16:53,120
for with a generic important players can

00:16:49,580 --> 00:16:55,310
specify which exports I used from the

00:16:53,120 --> 00:16:58,340
dynamical imported or you'll if you're

00:16:55,310 --> 00:17:00,230
only using up export or the default

00:16:58,340 --> 00:17:03,560
export and it would be possible to

00:17:00,230 --> 00:17:07,130
specify such a thing and in at one time

00:17:03,560 --> 00:17:09,080
it will generate upon the compiler we

00:17:07,130 --> 00:17:12,440
can add a bundle which only it has

00:17:09,080 --> 00:17:16,930
seized but it's not able to mangle this

00:17:12,440 --> 00:17:16,930
export because they must be in specific

00:17:18,020 --> 00:17:22,610
the epic 5 and the progress feature and

00:17:20,450 --> 00:17:25,900
also focus profiling feature but some

00:17:22,610 --> 00:17:27,110
update and we now am show progress by

00:17:25,900 --> 00:17:30,860
plugin

00:17:27,110 --> 00:17:33,710
so if you would build present profile

00:17:30,860 --> 00:17:36,710
enabled it will show you life and the

00:17:33,710 --> 00:17:37,940
current plugin it's working on and those

00:17:36,710 --> 00:17:41,060
will give you some timing information

00:17:37,940 --> 00:17:43,700
about each step and it's been in and it

00:17:41,060 --> 00:17:46,850
will be very useful to investigate your

00:17:43,700 --> 00:17:49,370
builds and see what's taking a long time

00:17:46,850 --> 00:17:51,710
in a very basic way without anything I

00:17:49,370 --> 00:17:54,110
will profiler so here in this case we

00:17:51,710 --> 00:17:56,810
see tell the plugin takes a lot of time

00:17:54,110 --> 00:17:58,970
but it's expected but you can also see

00:17:56,810 --> 00:18:01,390
for details for some internet plugins

00:17:58,970 --> 00:18:01,390
and so on

00:18:01,610 --> 00:18:06,620
another barrier to get more insight into

00:18:03,860 --> 00:18:09,200
that big completion process is the

00:18:06,620 --> 00:18:11,870
locking system so we have a cool locking

00:18:09,200 --> 00:18:13,700
system which can be enabled or the

00:18:11,870 --> 00:18:15,740
output of the lock can be enabled with

00:18:13,700 --> 00:18:18,200
some states option like locking the boss

00:18:15,740 --> 00:18:21,110
and they could all repose information

00:18:18,200 --> 00:18:23,840
about them and reflect x5 we add a lot

00:18:21,110 --> 00:18:26,360
of interlocking timing information to

00:18:23,840 --> 00:18:28,340
the log output and so if you do

00:18:26,360 --> 00:18:31,100
something like that you will get a lot

00:18:28,340 --> 00:18:33,050
of timing information Froy that's within

00:18:31,100 --> 00:18:35,660
the compilation before different plugins

00:18:33,050 --> 00:18:38,660
and so on and you could even enable

00:18:35,660 --> 00:18:41,920
debug mode for logging forget even more

00:18:38,660 --> 00:18:41,920
nothing information

00:18:42,279 --> 00:18:46,359
the Big Five we know exposed tidings

00:18:44,169 --> 00:18:48,759
from their pack so we can await our own

00:18:46,359 --> 00:18:51,340
typing's from from our source code and

00:18:48,759 --> 00:18:53,469
expose them as typing technologies for

00:18:51,340 --> 00:18:55,419
typescript so if you isn't apps tip or

00:18:53,469 --> 00:18:57,759
just using our script or users to

00:18:55,419 --> 00:19:00,070
encoder any editors it supports

00:18:57,759 --> 00:19:01,989
typescript typings you could add some

00:19:00,070 --> 00:19:05,049
annotations to do that by configuration

00:19:01,989 --> 00:19:08,139
and like exists in in bacteria stocks

00:19:05,049 --> 00:19:10,779
and forever script and it really gives

00:19:08,139 --> 00:19:12,849
you cold completion and information and

00:19:10,779 --> 00:19:15,909
descriptions for all your configuration

00:19:12,849 --> 00:19:18,489
I have this allows me to write like

00:19:15,909 --> 00:19:20,729
experience and information about all the

00:19:18,489 --> 00:19:24,159
experiments like enable MDS

00:19:20,729 --> 00:19:26,619
whatever it also allows you to tap check

00:19:24,159 --> 00:19:27,879
your configuration and whole system also

00:19:26,619 --> 00:19:30,190
works for plugins if you apply to

00:19:27,879 --> 00:19:34,250
plug-in you get all API of their peg as

00:19:30,190 --> 00:19:36,630
good completion and validation

00:19:34,250 --> 00:19:39,659
the pick five supports advanced

00:19:36,630 --> 00:19:41,640
configuration for empty points here is

00:19:39,659 --> 00:19:45,059
your example where we have to enter

00:19:41,640 --> 00:19:47,640
points like chord at men and normal

00:19:45,059 --> 00:19:50,070
import of modules there any point should

00:19:47,640 --> 00:19:52,950
contain is yeah specified we are its

00:19:50,070 --> 00:19:54,990
import property and this object allows

00:19:52,950 --> 00:19:57,210
it once configuration like you can

00:19:54,990 --> 00:20:01,620
configure a separate file name of item

00:19:57,210 --> 00:20:07,380
template for this I like C core or C

00:20:01,620 --> 00:20:09,690
core content head or whatever and you

00:20:07,380 --> 00:20:13,830
also can specify a separate library

00:20:09,690 --> 00:20:16,049
option and say this is a problem s um

00:20:13,830 --> 00:20:20,610
teedle GUI and other ending points are

00:20:16,049 --> 00:20:23,510
exported as a library type name is

00:20:20,610 --> 00:20:26,250
useful to specify 20 points which

00:20:23,510 --> 00:20:30,720
exports separate libraries and another

00:20:26,250 --> 00:20:33,360
greater bigger future is a depend on

00:20:30,720 --> 00:20:36,059
feature it allows you to specify NT

00:20:33,360 --> 00:20:38,309
points which are loaded on the same page

00:20:36,059 --> 00:20:40,769
before the in the point the other

00:20:38,309 --> 00:20:43,409
example is and Cuarenta points which is

00:20:40,769 --> 00:20:46,230
not on every page which contains react

00:20:43,409 --> 00:20:49,679
and rectum like something basic and an

00:20:46,230 --> 00:20:51,419
admin and apart which is not in addition

00:20:49,679 --> 00:20:54,840
to the core and apart on the admin page

00:20:51,419 --> 00:20:57,809
and it could share some diversity like

00:20:54,840 --> 00:21:00,360
it also allows react an electron and in

00:20:57,809 --> 00:21:02,340
this case you don't want the admin

00:21:00,360 --> 00:21:05,399
output file to contain the react and

00:21:02,340 --> 00:21:07,110
other libraries which I usually already

00:21:05,399 --> 00:21:09,600
contained on the page via the core page

00:21:07,110 --> 00:21:11,580
so in this case we can use the depend on

00:21:09,600 --> 00:21:14,909
future and the Pequea quite a

00:21:11,580 --> 00:21:18,539
parent-child dependency between his NT

00:21:14,909 --> 00:21:20,669
points or this chance and in the end the

00:21:18,539 --> 00:21:23,340
core endpoint will contain us libraries

00:21:20,669 --> 00:21:26,100
and admin will only contain debuts of

00:21:23,340 --> 00:21:27,720
modules which are not already contained

00:21:26,100 --> 00:21:29,429
in the cross way in this case it would

00:21:27,720 --> 00:21:31,350
be really small and only contains the

00:21:29,429 --> 00:21:32,850
control dog statement because libraries

00:21:31,350 --> 00:21:35,360
are already on the page he has a

00:21:32,850 --> 00:21:35,360
qualified

00:21:36,120 --> 00:21:39,840
next example I was in his next feature

00:21:38,100 --> 00:21:42,990
we assume we have a large-scale

00:21:39,840 --> 00:21:44,970
application and we want to develop this

00:21:42,990 --> 00:21:47,340
application but a part of this

00:21:44,970 --> 00:21:49,200
application with separate teams and each

00:21:47,340 --> 00:21:52,020
team should the ability should have the

00:21:49,200 --> 00:21:54,750
ability to deploy their work separately

00:21:52,020 --> 00:21:57,030
from the other teams the idea is that at

00:21:54,750 --> 00:21:58,680
one time all the work of the teams comes

00:21:57,030 --> 00:22:01,380
together and they sleep together into a

00:21:58,680 --> 00:22:03,870
single monolithic application for this

00:22:01,380 --> 00:22:08,670
module Federation as new feature and

00:22:03,870 --> 00:22:12,540
epoch five is go to hell we see here we

00:22:08,670 --> 00:22:15,210
have three very possible we containers

00:22:12,540 --> 00:22:17,190
for each team and these three parts were

00:22:15,210 --> 00:22:19,250
to come together in a you know full

00:22:17,190 --> 00:22:21,630
application or Singapore application

00:22:19,250 --> 00:22:25,460
this could be a model papers could be

00:22:21,630 --> 00:22:28,950
separate or a post doesn't matter so

00:22:25,460 --> 00:22:30,390
what is to use this feature we would

00:22:28,950 --> 00:22:33,360
specify in their in the web

00:22:30,390 --> 00:22:36,840
configuration that we would like to use

00:22:33,360 --> 00:22:38,850
a model Federation feature and here we

00:22:36,840 --> 00:22:41,850
would in the application we want to

00:22:38,850 --> 00:22:45,270
consume component sleep from TB and

00:22:41,850 --> 00:22:48,480
another component yet from Team C and to

00:22:45,270 --> 00:22:51,720
use them we specify or Z the parent is

00:22:48,480 --> 00:22:53,430
in their moods and property and repick

00:22:51,720 --> 00:22:55,590
will make sure that every every time we

00:22:53,430 --> 00:22:57,720
request a module from component clip of

00:22:55,590 --> 00:23:01,050
another component but it will look it up

00:22:57,720 --> 00:23:03,480
at one time on in a script tag that is

00:23:01,050 --> 00:23:06,780
Laura at one time it's easier on the

00:23:03,480 --> 00:23:08,850
other hand and the other teams would use

00:23:06,780 --> 00:23:10,920
the same feature and would also use the

00:23:08,850 --> 00:23:13,940
module Federation back in but in this

00:23:10,920 --> 00:23:17,040
case a excuse exposed feature to expose

00:23:13,940 --> 00:23:20,610
modules to other teams so here we would

00:23:17,040 --> 00:23:21,990
expose component which it is a public

00:23:20,610 --> 00:23:24,630
name per component and if we would

00:23:21,990 --> 00:23:28,760
expose our source file component which

00:23:24,630 --> 00:23:28,760
is a basic react component in this case

00:23:29,059 --> 00:23:34,690
another team will do it the same way you

00:23:31,490 --> 00:23:37,850
could all expose more properties Mira

00:23:34,690 --> 00:23:40,070
the tricky part is and we want to share

00:23:37,850 --> 00:23:42,620
libraries in this case so if you don't

00:23:40,070 --> 00:23:44,960
want each of these separate bills to

00:23:42,620 --> 00:23:48,470
Lord act on it all and direct them and

00:23:44,960 --> 00:23:49,850
loaders and data functions for this we

00:23:48,470 --> 00:23:52,789
use the shared feature of motor

00:23:49,850 --> 00:23:55,100
Federation so each of these compression

00:23:52,789 --> 00:23:57,350
we can specify which libraries of the

00:23:55,100 --> 00:24:00,409
build should be shared in this case we

00:23:57,350 --> 00:24:02,509
want to share a react and the compare

00:24:00,409 --> 00:24:05,330
clip want to share react and want to

00:24:02,509 --> 00:24:07,700
share that tape functions

00:24:05,330 --> 00:24:09,110
and the another component lead here in

00:24:07,700 --> 00:24:12,750
this case all the want to share or

00:24:09,110 --> 00:24:15,570
inland really low - models

00:24:12,750 --> 00:24:18,540
now we compile each of the application I

00:24:15,570 --> 00:24:20,970
did it preparation for this a battery

00:24:18,540 --> 00:24:24,750
compiled each of them would can await a

00:24:20,970 --> 00:24:27,030
test folder which as all the files is

00:24:24,750 --> 00:24:31,760
gonna be the fun in it at one time we

00:24:27,030 --> 00:24:31,760
can now start loading this application

00:24:31,820 --> 00:24:38,430
and it could look like this everything

00:24:35,760 --> 00:24:40,710
comes together at one time and here a

00:24:38,430 --> 00:24:43,920
component phone company from companies

00:24:40,710 --> 00:24:47,130
lip another company and I could also if

00:24:43,920 --> 00:24:50,970
I use this toggle button take it over to

00:24:47,130 --> 00:24:53,790
the code toggle button would Lord some

00:24:50,970 --> 00:24:56,450
component yeah this react lazy and blot

00:24:53,790 --> 00:24:59,460
it on demand so you can also lord other

00:24:56,450 --> 00:25:01,290
components on demand like I usually do

00:24:59,460 --> 00:25:02,550
so basically everything behaves like

00:25:01,290 --> 00:25:06,570
these are normal

00:25:02,550 --> 00:25:09,500
NPM packages but it's two on one time

00:25:06,570 --> 00:25:09,500
it's linked together

00:25:11,460 --> 00:25:16,560
so here you see the application running

00:25:13,790 --> 00:25:19,320
it feels like a single page applications

00:25:16,560 --> 00:25:22,320
there's no special object here to like

00:25:19,320 --> 00:25:25,020
iPhones or whatever make it special

00:25:22,320 --> 00:25:26,820
anyway it's just getting more duels

00:25:25,020 --> 00:25:29,940
together in a single application at one

00:25:26,820 --> 00:25:32,100
time and of the framework unfamiliar it

00:25:29,940 --> 00:25:35,120
feels like every call is just a single

00:25:32,100 --> 00:25:38,520
application it's all possible to Lord

00:25:35,120 --> 00:25:40,260
motors on the on demand here I call it

00:25:38,520 --> 00:25:43,770
some more tools on the click on as a

00:25:40,260 --> 00:25:46,260
button say usually constraint with epic

00:25:43,770 --> 00:25:47,580
is that any on-demand learning should

00:25:46,260 --> 00:25:49,830
only take a single amount of total

00:25:47,580 --> 00:25:51,690
server and this is still true with model

00:25:49,830 --> 00:25:54,000
Federation it will only take a single

00:25:51,690 --> 00:25:57,900
one trip every files from separate

00:25:54,000 --> 00:25:59,820
modules will be run in parallel for

00:25:57,900 --> 00:26:02,910
Moodle Federation's initial page load

00:25:59,820 --> 00:26:04,890
needs an additional round trip to the

00:26:02,910 --> 00:26:07,710
server compared to number single build

00:26:04,890 --> 00:26:09,660
application because it has to get the

00:26:07,710 --> 00:26:12,440
information forms from the other

00:26:09,660 --> 00:26:16,050
separately builded application paths and

00:26:12,440 --> 00:26:18,630
website information how to lots and lots

00:26:16,050 --> 00:26:21,510
of files from from this these containers

00:26:18,630 --> 00:26:24,810
so let's reload these container files

00:26:21,510 --> 00:26:26,580
which are only manifests about where to

00:26:24,810 --> 00:26:29,160
got more dude from this container and

00:26:26,580 --> 00:26:32,270
then we'll be able to load modules from

00:26:29,160 --> 00:26:32,270
this container

00:26:33,960 --> 00:26:40,110
this example also shows a few edge cases

00:26:36,600 --> 00:26:42,960
you might run into so here like the

00:26:40,110 --> 00:26:46,649
application uses reg 16 and the

00:26:42,960 --> 00:26:48,720
component let users react 15 in May 2000

00:26:46,649 --> 00:26:51,629
so this is technically in capital and by

00:26:48,720 --> 00:26:54,240
default motor Federation would not bow

00:26:51,629 --> 00:26:57,389
Russian so it will download to X 16 and

00:26:54,240 --> 00:26:59,159
15 and each leopard build its

00:26:57,389 --> 00:27:02,759
application path with people provided

00:26:59,159 --> 00:27:04,679
its own version its competitiveness but

00:27:02,759 --> 00:27:07,529
for further components like react or

00:27:04,679 --> 00:27:10,019
angular other things it's not possible

00:27:07,529 --> 00:27:12,629
to load multiple versions of the

00:27:10,019 --> 00:27:14,129
framework because it it's not for

00:27:12,629 --> 00:27:16,499
technically reason it's not possible to

00:27:14,129 --> 00:27:20,009
make a react app on different react well

00:27:16,499 --> 00:27:21,509
that would get so in this case I can use

00:27:20,009 --> 00:27:25,259
the advanced configuration for the

00:27:21,509 --> 00:27:27,929
shared modules and specify that react is

00:27:25,259 --> 00:27:30,869
is a singleton and shared model

00:27:27,929 --> 00:27:33,119
singleton set model means it will only

00:27:30,869 --> 00:27:35,629
ever load a single version of this in

00:27:33,119 --> 00:27:38,490
this case the highest version and

00:27:35,629 --> 00:27:41,059
instead of getting its own version they

00:27:38,490 --> 00:27:43,110
will provide them in warning said

00:27:41,059 --> 00:27:44,519
technically incompletely and yet you

00:27:43,110 --> 00:27:47,179
should look into wearing you are

00:27:44,519 --> 00:27:47,179
comparative

00:27:48,110 --> 00:27:55,280
another edge of case is here that we

00:27:52,090 --> 00:27:57,290
both component lips using different

00:27:55,280 --> 00:28:01,050
versions of date date function so here

00:27:57,290 --> 00:28:08,070
it's version 2.6 and

00:28:01,050 --> 00:28:10,410
another company is using in 2.14 and in

00:28:08,070 --> 00:28:11,970
this case oil and builds or the

00:28:10,410 --> 00:28:14,220
gamepad's would agree on the highest

00:28:11,970 --> 00:28:17,520
version which is compatible basis in

00:28:14,220 --> 00:28:19,740
this case it will not date function from

00:28:17,520 --> 00:28:22,290
another company because it's providing

00:28:19,740 --> 00:28:26,300
the highest well thanks for watching

00:28:22,290 --> 00:28:26,300

YouTube URL: https://www.youtube.com/watch?v=3c-RFpaiUT8


