Title: Contributing to WebdriverIO Session at OpenJS Foundation Collaborator's Summit 2020
Publication date: 2020-07-03
Playlist: OpenJS World 2020
Description: 
	
Captions: 
	00:00:05,700 --> 00:00:12,970
all right we're recording and we are

00:00:09,250 --> 00:00:14,980
life and hello everyone welcome to the

00:00:12,970 --> 00:00:19,869
workshop contributing to repair

00:00:14,980 --> 00:00:21,880
I hope and that in this session we can

00:00:19,869 --> 00:00:23,499
explain you how you can start

00:00:21,880 --> 00:00:25,419
contributing to write the road to the

00:00:23,499 --> 00:00:28,089
project and to the community and we are

00:00:25,419 --> 00:00:29,980
all excited to have you if you're

00:00:28,089 --> 00:00:33,010
looking for more contributors to more

00:00:29,980 --> 00:00:35,920
people who want to get involved so who

00:00:33,010 --> 00:00:38,440
are we and so I want to say a big hello

00:00:35,920 --> 00:00:42,340
from the technical steering committee

00:00:38,440 --> 00:00:46,720
Africa Bell that is Adam me Evan Evan

00:00:42,340 --> 00:00:49,660
Nicola and we'll actually ravenous on

00:00:46,720 --> 00:00:52,510
the call and we'll introduce himself in

00:00:49,660 --> 00:00:54,970
a second and so I want to introduce

00:00:52,510 --> 00:00:57,340
myself first I'm Christian working as a

00:00:54,970 --> 00:00:59,860
software engineer in the open source

00:00:57,340 --> 00:01:03,160
program office at sauce labs and I've

00:00:59,860 --> 00:01:05,229
been working on whatever for almost I

00:01:03,160 --> 00:01:07,810
don't know seven eight years now it's

00:01:05,229 --> 00:01:10,600
like a site hobby project and now more

00:01:07,810 --> 00:01:14,980
more and more my job which is exciting

00:01:10,600 --> 00:01:19,690
and yeah and every she's introducing

00:01:14,980 --> 00:01:19,990
yourself everyone I'm Erin I'm in high

00:01:19,690 --> 00:01:23,140
school

00:01:19,990 --> 00:01:25,960
I'm working for the testers and I've

00:01:23,140 --> 00:01:29,080
ever oh I think for about four or five

00:01:25,960 --> 00:01:32,590
years now being using the tool before I

00:01:29,080 --> 00:01:36,689
started competing myself and later on

00:01:32,590 --> 00:01:41,340
developed myself to one of its members

00:01:36,689 --> 00:01:43,890
awesome so for this session we wanted to

00:01:41,340 --> 00:01:46,170
give you a little project overview and

00:01:43,890 --> 00:01:47,399
want to tell you what kind of packages

00:01:46,170 --> 00:01:49,259
the exes

00:01:47,399 --> 00:01:50,819
you know how the code is fractured and

00:01:49,259 --> 00:01:52,950
how the project is structured how

00:01:50,819 --> 00:01:56,099
webdiver is structured and in different

00:01:52,950 --> 00:01:58,939
packages and then we want to show you

00:01:56,099 --> 00:02:01,560
what's a typical development workflow of

00:01:58,939 --> 00:02:03,240
you know of the web project looks like

00:02:01,560 --> 00:02:05,399
like when you project when you want to

00:02:03,240 --> 00:02:07,289
contribute how you how you can do that

00:02:05,399 --> 00:02:08,789
how you get started or you run the test

00:02:07,289 --> 00:02:11,670
and how you check out the positive way

00:02:08,789 --> 00:02:13,349
and then we want to explain you the

00:02:11,670 --> 00:02:16,110
government's and how we run the daily

00:02:13,349 --> 00:02:18,180
business of the project and explain you

00:02:16,110 --> 00:02:20,549
what you know contributor is for the

00:02:18,180 --> 00:02:23,129
project emitter is and what we do is a

00:02:20,549 --> 00:02:25,799
technique you state committee and last

00:02:23,129 --> 00:02:27,450
but not least and I want to give you

00:02:25,799 --> 00:02:28,829
some information about how you can

00:02:27,450 --> 00:02:33,569
contribute to the project and what's

00:02:28,829 --> 00:02:35,940
your best time for us and for the last

00:02:33,569 --> 00:02:39,030
hour of this session we want to you know

00:02:35,940 --> 00:02:41,489
pick up some times and just start coding

00:02:39,030 --> 00:02:43,139
and start to contribute to any of the

00:02:41,489 --> 00:02:44,370
box that we have or - anything that you

00:02:43,139 --> 00:02:46,950
would like to contribute to the project

00:02:44,370 --> 00:02:49,829
and we are here for you and you know

00:02:46,950 --> 00:02:52,200
help you you know with questions and

00:02:49,829 --> 00:02:55,859
anything that you you know any

00:02:52,200 --> 00:02:58,380
confusions that you might have and so

00:02:55,859 --> 00:03:01,549
that should take two hours and I'm

00:02:58,380 --> 00:03:04,169
really excited for it and so we start

00:03:01,549 --> 00:03:10,139
the session with the project overview

00:03:04,169 --> 00:03:12,299
and they give it to you thank you very

00:03:10,139 --> 00:03:15,739
much I do think you need to update your

00:03:12,299 --> 00:03:15,739
slides because they haven't moved

00:03:18,940 --> 00:03:26,050
Christian where we are the slides now at

00:03:23,560 --> 00:03:29,340
the contributing board so we didn't see

00:03:26,050 --> 00:03:33,490
the updates I think how can we check I

00:03:29,340 --> 00:03:34,650
actually see project over for you oh you

00:03:33,490 --> 00:03:40,720
do

00:03:34,650 --> 00:03:44,650
alright then it's just me sorry alright

00:03:40,720 --> 00:03:47,970
so are you at the how does the browser

00:03:44,650 --> 00:03:47,970
automation screen works

00:03:48,849 --> 00:03:56,049
I know all right thank you so webdriver

00:03:53,349 --> 00:03:59,049
arrow is a tool that can be used to

00:03:56,049 --> 00:04:01,560
automate the browser and here you see an

00:03:59,049 --> 00:04:04,959
overview of how this actually works so

00:04:01,560 --> 00:04:08,140
in between the browser and web program

00:04:04,959 --> 00:04:10,720
can be a number of things you can put

00:04:08,140 --> 00:04:14,560
the driver there you can put a serve

00:04:10,720 --> 00:04:17,799
there like appium or a grid for example

00:04:14,560 --> 00:04:22,300
which then interns steers the drivers or

00:04:17,799 --> 00:04:27,610
a service like a p.m. the drivers are

00:04:22,300 --> 00:04:30,340
used to automate the browser and a peon

00:04:27,610 --> 00:04:34,289
and slinging growth for example they use

00:04:30,340 --> 00:04:41,289
are used to automate mobile applications

00:04:34,289 --> 00:04:43,210
there's also some some mobile and hybrid

00:04:41,289 --> 00:04:46,270
apps for example and there you have to

00:04:43,210 --> 00:04:48,789
switch contacts between the two and they

00:04:46,270 --> 00:04:52,360
will actually use a driver or an appium

00:04:48,789 --> 00:04:55,360
on the go on the right side you actually

00:04:52,360 --> 00:04:57,970
see two slide Cyprus and Tesfaye books

00:04:55,360 --> 00:05:00,909
here supply them they are increasingly

00:04:57,970 --> 00:05:03,449
popular I want to use this to go to the

00:05:00,909 --> 00:05:03,449
next line

00:05:03,460 --> 00:05:08,020
where we actually see a little bit

00:05:05,380 --> 00:05:11,080
different where we don't have the driver

00:05:08,020 --> 00:05:13,360
L anymore for the puppeteer example on

00:05:11,080 --> 00:05:16,570
the bottom but on the top you see that

00:05:13,360 --> 00:05:19,600
web driver the framer the protocol that

00:05:16,570 --> 00:05:21,789
we use overall actually needs to have

00:05:19,600 --> 00:05:24,930
this driver the chrome guard in this

00:05:21,789 --> 00:05:27,090
case as an example to talk to the Chrome

00:05:24,930 --> 00:05:30,220
browser

00:05:27,090 --> 00:05:32,919
so whenever on the left you see web

00:05:30,220 --> 00:05:35,770
driver ahem so when web driver is

00:05:32,919 --> 00:05:39,100
started and it will run your test you

00:05:35,770 --> 00:05:41,350
have a driver installed in this case for

00:05:39,100 --> 00:05:43,960
example the chrome driver they will use

00:05:41,350 --> 00:05:46,270
the web driver uncle to talk to this

00:05:43,960 --> 00:05:49,660
driver and the driver will communicate

00:05:46,270 --> 00:05:51,940
that back to the browser and there's

00:05:49,660 --> 00:05:54,160
different route drivers for every

00:05:51,940 --> 00:05:59,650
browser so we have the chrome driver

00:05:54,160 --> 00:06:02,020
gecko driver the edge driver and so on

00:05:59,650 --> 00:06:04,539
when you look at puppeteer okay

00:06:02,020 --> 00:06:06,849
currently sports chrome and I think

00:06:04,539 --> 00:06:08,470
there's a beta or something for Firefox

00:06:06,849 --> 00:06:12,370
as well

00:06:08,470 --> 00:06:14,080
this talks to the browser directly and

00:06:12,370 --> 00:06:17,199
it does this through a certain protocol

00:06:14,080 --> 00:06:20,199
and this is the same purpose actually

00:06:17,199 --> 00:06:25,539
used by the drivers

00:06:20,199 --> 00:06:27,999
can we go to the next line so when you

00:06:25,539 --> 00:06:29,800
look at the layers that we have a

00:06:27,999 --> 00:06:32,889
wet/dry rail on the left side we see

00:06:29,800 --> 00:06:36,129
political packages as an example we've

00:06:32,889 --> 00:06:37,900
put the back charge protocol here but

00:06:36,129 --> 00:06:40,509
there are many more particles we have

00:06:37,900 --> 00:06:44,710
the app pin protocol that the jayson

00:06:40,509 --> 00:06:47,889
werth protocol so this is just a wave

00:06:44,710 --> 00:06:50,620
communication you can take out a

00:06:47,889 --> 00:06:52,810
protocol replace it with another or you

00:06:50,620 --> 00:06:56,409
can easily add a new protocol if you

00:06:52,810 --> 00:06:59,139
would like to but drive it so itself can

00:06:56,409 --> 00:07:01,810
be added as a or used as a library and

00:06:59,139 --> 00:07:04,180
we call the standalone mode I'm not

00:07:01,810 --> 00:07:07,539
going to go into this but it's a way

00:07:04,180 --> 00:07:09,219
that bacteria can be used and on the

00:07:07,539 --> 00:07:12,159
right side we have but forever as a

00:07:09,219 --> 00:07:16,150
framework and whatever as a framework

00:07:12,159 --> 00:07:18,760
will be can be used to include the

00:07:16,150 --> 00:07:22,580
actual test wrong

00:07:18,760 --> 00:07:24,980
so to highlight the the way that the

00:07:22,580 --> 00:07:26,660
protocols actually are used on the next

00:07:24,980 --> 00:07:29,690
one

00:07:26,660 --> 00:07:32,950
here's an example of how webdriver can

00:07:29,690 --> 00:07:39,260
be used directly to create a session on

00:07:32,950 --> 00:07:42,110
Firefox and you highlight how important

00:07:39,260 --> 00:07:44,990
the the commands here are is that for

00:07:42,110 --> 00:07:48,680
example the hash that you see when you

00:07:44,990 --> 00:07:52,100
do descent keys elements and element

00:07:48,680 --> 00:07:55,100
keys and then the hash is actually

00:07:52,100 --> 00:07:58,700
static part but is used in in order to

00:07:55,100 --> 00:08:01,340
send these commands how this would look

00:07:58,700 --> 00:08:03,350
is like on the right left side we have

00:08:01,340 --> 00:08:05,390
the property which is the element hash

00:08:03,350 --> 00:08:08,270
on the right side you actually have the

00:08:05,390 --> 00:08:10,220
element ID that will be used in any of

00:08:08,270 --> 00:08:12,430
the requests that will be sent to the

00:08:10,220 --> 00:08:12,430
browser

00:08:12,589 --> 00:08:15,770
next slide please

00:08:16,490 --> 00:08:22,200
so when you look at pops here there's

00:08:19,500 --> 00:08:26,190
another example here where we use the

00:08:22,200 --> 00:08:28,290
dev tools dev tools is the another name

00:08:26,190 --> 00:08:32,760
for what puppeteer is using it it's

00:08:28,290 --> 00:08:34,560
using the dev tools protocol and the

00:08:32,760 --> 00:08:37,530
protocols we maps to the webdriver

00:08:34,560 --> 00:08:39,330
protocol in order to easily swap out the

00:08:37,530 --> 00:08:42,510
automation protocol for something else

00:08:39,330 --> 00:08:44,670
so the example that you see here is

00:08:42,510 --> 00:08:47,010
exactly like the or almost exactly

00:08:44,670 --> 00:08:48,810
likely but first protocol and that's

00:08:47,010 --> 00:08:51,210
because we have a mapping for this that

00:08:48,810 --> 00:08:58,580
we can use so we can easily swap out one

00:08:51,210 --> 00:08:58,580
or the other and next slide please

00:08:58,820 --> 00:09:07,480
so when we take a higher overview of

00:09:01,490 --> 00:09:10,490
webdriver l itself but very real use the

00:09:07,480 --> 00:09:13,480
protocols under the hood as you can see

00:09:10,490 --> 00:09:18,830
here for our girls input as a library

00:09:13,480 --> 00:09:22,400
and we'll then use the chrome and it

00:09:18,830 --> 00:09:25,610
will use different commands because all

00:09:22,400 --> 00:09:29,080
these commands are then on the hood next

00:09:25,610 --> 00:09:32,120
to the right protocol of your needs

00:09:29,080 --> 00:09:34,460
the protocol then contains the the

00:09:32,120 --> 00:09:36,290
mappings that it needs to know and it

00:09:34,460 --> 00:09:39,320
will automatically figure out what it

00:09:36,290 --> 00:09:41,930
needs to do based on that we also have

00:09:39,320 --> 00:09:44,690
some some cool things like we have a

00:09:41,930 --> 00:09:47,120
retrial Delaware where we automatically

00:09:44,690 --> 00:09:49,940
wait on elements where we execute the

00:09:47,120 --> 00:09:52,730
commands when there's a still element

00:09:49,940 --> 00:09:56,150
reference for example we try to reflect

00:09:52,730 --> 00:09:58,520
the element for a certain amount of time

00:09:56,150 --> 00:10:01,430
and if it succeeds it will just continue

00:09:58,520 --> 00:10:03,650
and if it will feel it will throw an

00:10:01,430 --> 00:10:07,370
error saying that well even if the

00:10:03,650 --> 00:10:09,470
retrying we could not find this for you

00:10:07,370 --> 00:10:11,810
it can also wait for element so we have

00:10:09,470 --> 00:10:16,970
a prefetch of the still elements we can

00:10:11,810 --> 00:10:20,720
also wait on elements that are that we

00:10:16,970 --> 00:10:23,720
want to do an action on and this only

00:10:20,720 --> 00:10:29,090
applies for actual actions like flake

00:10:23,720 --> 00:10:31,900
and input some people call this like

00:10:29,090 --> 00:10:34,960
support for lazy loading of elements

00:10:31,900 --> 00:10:37,760
next slide please

00:10:34,960 --> 00:10:41,240
so we also have the command-line

00:10:37,760 --> 00:10:42,920
interface on the left side you get on

00:10:41,240 --> 00:10:46,760
the top left you can see how you can

00:10:42,920 --> 00:10:48,410
actually install this and the common

00:10:46,760 --> 00:10:52,310
interface is just a really easy way to

00:10:48,410 --> 00:10:55,940
create setup that you like including all

00:10:52,310 --> 00:10:58,070
these services real portage browser

00:10:55,940 --> 00:11:00,200
drivers etc that you would like to

00:10:58,070 --> 00:11:01,130
install we also have some frameworks

00:11:00,200 --> 00:11:03,620
that we support

00:11:01,130 --> 00:11:07,310
like for example mocha cucumber

00:11:03,620 --> 00:11:12,800
adjustment and here it's very easy to

00:11:07,310 --> 00:11:14,450
trade it really nice easy if you

00:11:12,800 --> 00:11:19,940
way of installing everything that you

00:11:14,450 --> 00:11:21,620
need based you can also use the rebel

00:11:19,940 --> 00:11:24,290
and failures that we have which is a way

00:11:21,620 --> 00:11:26,610
to run web driver IO without installing

00:11:24,290 --> 00:11:29,540
an action

00:11:26,610 --> 00:11:29,540
next slide please

00:11:29,740 --> 00:11:35,230
so then what packages do we actually

00:11:31,750 --> 00:11:37,779
have so we look at the overview we have

00:11:35,230 --> 00:11:40,360
some core packages in which case this is

00:11:37,779 --> 00:11:44,830
for example a web driver and we have two

00:11:40,360 --> 00:11:47,380
protocols or packages in this case which

00:11:44,830 --> 00:11:50,560
we do need to trade the mapping that we

00:11:47,380 --> 00:11:52,420
just explained then we have the web

00:11:50,560 --> 00:11:55,540
purveyor package itself which can be

00:11:52,420 --> 00:12:00,670
used to run without the test runner

00:11:55,540 --> 00:12:03,089
itself so it's like programmatically you

00:12:00,670 --> 00:12:07,710
are like importing it as a library and

00:12:03,089 --> 00:12:08,970
then we also have the CLI which is a or

00:12:07,710 --> 00:12:11,260
[Music]

00:12:08,970 --> 00:12:15,610
package you need it for when you want to

00:12:11,260 --> 00:12:17,020
install on any of the other packages so

00:12:15,610 --> 00:12:19,330
then we have some helper packages that

00:12:17,020 --> 00:12:21,970
we use for example in conflict to trade

00:12:19,330 --> 00:12:25,020
the configuration inside of the command

00:12:21,970 --> 00:12:29,730
line interface we have the locker that

00:12:25,020 --> 00:12:32,529
used among many different packages and

00:12:29,730 --> 00:12:34,240
then we have the protocols the repple

00:12:32,529 --> 00:12:37,209
interface that I just talked about and

00:12:34,240 --> 00:12:40,830
so on then we have some reporters these

00:12:37,209 --> 00:12:44,260
reporters are used to translate the

00:12:40,830 --> 00:12:47,440
actual test results and all the actions

00:12:44,260 --> 00:12:50,440
that go that happen along the way to

00:12:47,440 --> 00:12:53,339
your terminal but it can also for

00:12:50,440 --> 00:12:56,620
example expand this functionality to

00:12:53,339 --> 00:12:59,230
output a file for example which contains

00:12:56,620 --> 00:13:02,150
all this information you can change the

00:12:59,230 --> 00:13:03,600
log levels you can add any kind of

00:13:02,150 --> 00:13:05,770
[Music]

00:13:03,600 --> 00:13:09,160
features that you would like basically

00:13:05,770 --> 00:13:14,200
people have created HTML websites with

00:13:09,160 --> 00:13:16,300
nice formatting and UI so it's basically

00:13:14,200 --> 00:13:19,060
if you want to have something that's

00:13:16,300 --> 00:13:23,230
material you can easily create your own

00:13:19,060 --> 00:13:26,079
Reaper order and add it to this list the

00:13:23,230 --> 00:13:27,910
surfaces are basically a way of

00:13:26,079 --> 00:13:31,660
expanding the current functionality

00:13:27,910 --> 00:13:37,089
other than the reports services are

00:13:31,660 --> 00:13:39,140
basically like a small small addition to

00:13:37,089 --> 00:13:41,199
webdriver

00:13:39,140 --> 00:13:43,359
[Music]

00:13:41,199 --> 00:13:47,170
I'm not really sure how to explain it

00:13:43,359 --> 00:13:48,489
anyway because like the the way that

00:13:47,170 --> 00:13:50,739
service work is a she

00:13:48,489 --> 00:13:54,040
you were pretty limitless basically

00:13:50,739 --> 00:13:57,489
their services for the the at new

00:13:54,040 --> 00:13:59,290
service we have for every tools for

00:13:57,489 --> 00:14:03,669
browser stack so all the service

00:13:59,290 --> 00:14:06,189
providers that we have seemed really

00:14:03,669 --> 00:14:08,829
really interesting features that people

00:14:06,189 --> 00:14:10,119
have added over the years and if you you

00:14:08,829 --> 00:14:12,279
think you have found something that's

00:14:10,119 --> 00:14:13,959
really useful you can always shoot the

00:14:12,279 --> 00:14:15,730
team and message like saying hey I've

00:14:13,959 --> 00:14:18,579
created this I think it's really awesome

00:14:15,730 --> 00:14:20,589
and I would like to put this forwards

00:14:18,579 --> 00:14:23,980
and then we can add it to the website if

00:14:20,589 --> 00:14:26,249
it's a really cool feature and next

00:14:23,980 --> 00:14:26,249
slide please

00:14:26,480 --> 00:14:33,890
so then we also have to rummage we had a

00:14:29,540 --> 00:14:36,950
local runner to to run your which is the

00:14:33,890 --> 00:14:39,770
main way of running Webber Rio but then

00:14:36,950 --> 00:14:42,260
we also have a lambda runner and this is

00:14:39,770 --> 00:14:45,980
to rom of a peripheral in Atlanta

00:14:42,260 --> 00:14:47,600
functions we have the framework adapters

00:14:45,980 --> 00:14:49,850
which are the framework that I talked

00:14:47,600 --> 00:14:53,000
about the cucumber jasmine and Mogra

00:14:49,850 --> 00:14:56,780
frameworks which are basically Testament

00:14:53,000 --> 00:14:59,900
which are used to brown butter rail and

00:14:56,780 --> 00:15:01,880
when you use vocaroo as a library it's a

00:14:59,900 --> 00:15:04,190
different story it will not process for

00:15:01,880 --> 00:15:08,260
example and then we have some other

00:15:04,190 --> 00:15:12,700
packages which you see a little list of

00:15:08,260 --> 00:15:12,700
and next slide please

00:15:13,089 --> 00:15:19,809
and then we have a small overview of the

00:15:16,899 --> 00:15:21,909
decatur project so on the top you see

00:15:19,809 --> 00:15:24,929
the get up templates we have some perm

00:15:21,909 --> 00:15:28,389
flows there for example we have the

00:15:24,929 --> 00:15:30,339
picket up actions there as well with

00:15:28,389 --> 00:15:34,779
some markdown files to generate the

00:15:30,339 --> 00:15:40,019
early documentation I think it's very

00:15:34,779 --> 00:15:42,629
very clear how we separate all the logic

00:15:40,019 --> 00:15:45,669
for example we have a end to end test to

00:15:42,629 --> 00:15:48,819
foliar as well there's some smoke tests

00:15:45,669 --> 00:15:50,699
there which we go on we'll get into a

00:15:48,819 --> 00:15:52,780
little bit later

00:15:50,699 --> 00:15:54,360
yeah if you

00:15:52,780 --> 00:15:55,529
[Music]

00:15:54,360 --> 00:15:57,329
if you have any question about this

00:15:55,529 --> 00:16:00,480
please let me know but I think that this

00:15:57,329 --> 00:16:04,589
is a very very clear overview of all the

00:16:00,480 --> 00:16:06,259
files that we have for the project next

00:16:04,589 --> 00:16:11,249
slide please

00:16:06,259 --> 00:16:13,170
so then we have some W WI L commands

00:16:11,249 --> 00:16:16,529
this is just an overview that I took

00:16:13,170 --> 00:16:18,749
from the website all the flow charts

00:16:16,529 --> 00:16:20,480
that we have available can be found on

00:16:18,749 --> 00:16:24,420
the link that you see on the top right

00:16:20,480 --> 00:16:26,670
bottom right so what we see here is that

00:16:24,420 --> 00:16:30,389
the Nama interface that we just

00:16:26,670 --> 00:16:33,420
discussed will tell you the arguments

00:16:30,389 --> 00:16:35,879
that you pass or if you pass any of

00:16:33,420 --> 00:16:38,339
these and then you see that you can run

00:16:35,879 --> 00:16:41,249
the WL command

00:16:38,339 --> 00:16:43,290
DX help for example and if there is

00:16:41,249 --> 00:16:46,649
commenting included it will take either

00:16:43,290 --> 00:16:50,189
one of the other rounds we have a

00:16:46,649 --> 00:16:52,649
conflict route where we can create a

00:16:50,189 --> 00:16:56,009
configuration file for you we have the

00:16:52,649 --> 00:16:58,459
rebel where we can run the defector for

00:16:56,009 --> 00:17:03,079
environment without installing anything

00:16:58,459 --> 00:17:05,039
we have to install and the wrong so

00:17:03,079 --> 00:17:06,929
whenever you're going to work on the

00:17:05,039 --> 00:17:10,649
project and you question yourself like

00:17:06,929 --> 00:17:12,870
how is this all connected then the flow

00:17:10,649 --> 00:17:16,279
charts are a really good way to get a

00:17:12,870 --> 00:17:18,529
grasp of how everything is intertwined

00:17:16,279 --> 00:17:23,850
next slide please

00:17:18,529 --> 00:17:26,760
so now we discussed the the important

00:17:23,850 --> 00:17:28,740
things that you need to know before we

00:17:26,760 --> 00:17:32,370
actually talk about the code like we

00:17:28,740 --> 00:17:34,200
know how the ticket up page looks how

00:17:32,370 --> 00:17:36,480
the project is structured a little bit

00:17:34,200 --> 00:17:40,110
where you can find more information how

00:17:36,480 --> 00:17:45,860
everything is connected and we also know

00:17:40,110 --> 00:17:48,720
how we the the to salt to the actual

00:17:45,860 --> 00:17:50,760
browser so let's talk a little bit of

00:17:48,720 --> 00:17:54,600
about code now so how can actually get

00:17:50,760 --> 00:17:57,240
started first you actually check out the

00:17:54,600 --> 00:18:00,299
codes so we clone the project to a local

00:17:57,240 --> 00:18:04,669
directory but we get clone and then we

00:18:00,299 --> 00:18:04,669
moved to the city directory

00:18:04,910 --> 00:18:11,240
and then of course we install all the

00:18:07,640 --> 00:18:13,940
dependencies that it means and in this

00:18:11,240 --> 00:18:17,870
case you can do a game install and then

00:18:13,940 --> 00:18:20,270
NPM drum setup - foo which will install

00:18:17,870 --> 00:18:24,559
any dependencies of the whole project

00:18:20,270 --> 00:18:26,620
that it it means or tell bitcoins

00:18:24,559 --> 00:18:26,620
you

00:18:27,470 --> 00:18:32,570
and then when once everything is

00:18:31,039 --> 00:18:35,480
installed of course you want to know

00:18:32,570 --> 00:18:37,940
like am i starting with a clean slate so

00:18:35,480 --> 00:18:43,700
you would like to run the unit test and

00:18:37,940 --> 00:18:49,429
spoke to us for that you can run the MPI

00:18:43,700 --> 00:18:52,700
run test top of the coverage you can

00:18:49,429 --> 00:18:54,860
also run these commands for just a

00:18:52,700 --> 00:18:59,059
single package if you'd like so we

00:18:54,860 --> 00:19:01,940
working on a small isolated area which

00:18:59,059 --> 00:19:03,980
does not connect in any way with the

00:19:01,940 --> 00:19:08,360
other packages that we have you can also

00:19:03,980 --> 00:19:11,840
find it in the in the readme or the

00:19:08,360 --> 00:19:14,389
company contribution markdown file that

00:19:11,840 --> 00:19:17,990
we have how you can actually run these

00:19:14,389 --> 00:19:20,360
files for just a single package and then

00:19:17,990 --> 00:19:26,360
the smoke tests can be wrong by doing a

00:19:20,360 --> 00:19:28,330
NPM from tough smoke on the next slide

00:19:26,360 --> 00:19:31,759
we see a little overview of all the

00:19:28,330 --> 00:19:33,679
guards that we so to speak have so we do

00:19:31,759 --> 00:19:36,049
some lensing we have some dependency

00:19:33,679 --> 00:19:39,620
checker we have some type things that we

00:19:36,049 --> 00:19:46,690
have which are based on the type type

00:19:39,620 --> 00:19:49,309
ins I think uses the chat talk notation

00:19:46,690 --> 00:19:51,320
obviously unit tests we have some focus

00:19:49,309 --> 00:19:53,950
and we have some end-to-end tests so

00:19:51,320 --> 00:19:58,610
depending on the change that you make

00:19:53,950 --> 00:20:03,980
you have to decide like what was

00:19:58,610 --> 00:20:05,899
applicable here to to run basically for

00:20:03,980 --> 00:20:07,909
example when you you just change a

00:20:05,899 --> 00:20:10,429
little isolated thing that it might be

00:20:07,909 --> 00:20:13,340
that you just want to run the unit test

00:20:10,429 --> 00:20:15,529
that you've added and of course all the

00:20:13,340 --> 00:20:17,059
other Union says that you did but

00:20:15,529 --> 00:20:20,389
sometimes you want to also run these

00:20:17,059 --> 00:20:23,809
protests and the advances as well these

00:20:20,389 --> 00:20:27,379
are all ran one when you push your code

00:20:23,809 --> 00:20:31,340
to D when you create your poll that's

00:20:27,379 --> 00:20:35,600
basically so the DCI CD environment will

00:20:31,340 --> 00:20:39,590
also run this for you so next slide we

00:20:35,600 --> 00:20:42,610
see the get ready for developments so I

00:20:39,590 --> 00:20:42,610
think now is that

00:20:42,919 --> 00:20:49,440
yeah all right so everybody likes to

00:20:48,149 --> 00:20:51,690
work differently but I believe that

00:20:49,440 --> 00:20:54,330
Christian uses this way of working where

00:20:51,690 --> 00:21:00,149
have you watched the files so he does a

00:20:54,330 --> 00:21:01,830
I'm wrong watch which twig is a it

00:21:00,149 --> 00:21:05,460
compiles a package for you when you make

00:21:01,830 --> 00:21:09,450
changes and then you can run the program

00:21:05,460 --> 00:21:11,690
over unless specific port and using for

00:21:09,450 --> 00:21:16,070
both so you see the get - for both -

00:21:11,690 --> 00:21:22,679
sinusoid or I think for both is actually

00:21:16,070 --> 00:21:24,360
booking more I'm not sure but yeah when

00:21:22,679 --> 00:21:27,419
you make changes you can also do this

00:21:24,360 --> 00:21:30,779
with the the performer I think where you

00:21:27,419 --> 00:21:32,429
watch for any test changes so when you

00:21:30,779 --> 00:21:34,679
combine this whenever you make some

00:21:32,429 --> 00:21:37,510
changes you will see if your tests are

00:21:34,679 --> 00:21:41,680
actually back soon or not

00:21:37,510 --> 00:21:43,630
and I think with them if we check the

00:21:41,680 --> 00:21:47,650
next slide I think we have one more

00:21:43,630 --> 00:21:51,130
example yeah we we're pretty much

00:21:47,650 --> 00:21:52,420
basically ready to start coding but

00:21:51,130 --> 00:21:55,360
there's one last slide where we have

00:21:52,420 --> 00:21:58,270
some test examples and these files can

00:21:55,360 --> 00:22:01,360
be found under the V examples directory

00:21:58,270 --> 00:22:04,600
and be it a project where we have a

00:22:01,360 --> 00:22:06,660
small overview of different kind of

00:22:04,600 --> 00:22:10,810
examples where we have mobile testing

00:22:06,660 --> 00:22:14,500
cloud connections how we use multi modes

00:22:10,810 --> 00:22:19,840
a GPX all that kind of stuff so if you

00:22:14,500 --> 00:22:21,640
have any questions um well we have some

00:22:19,840 --> 00:22:25,030
examples there as well or field to look

00:22:21,640 --> 00:22:26,140
at if you have any questions and I think

00:22:25,030 --> 00:22:33,850
that rocks

00:22:26,140 --> 00:22:36,790
wraps up the development part Thank You

00:22:33,850 --> 00:22:39,730
Herman and I would like to continue with

00:22:36,790 --> 00:22:41,770
the governance of the project as I

00:22:39,730 --> 00:22:44,650
mentioned before the project government

00:22:41,770 --> 00:22:46,420
pretty much codifies how we project

00:22:44,650 --> 00:22:49,030
maintainer handle the day-to-day

00:22:46,420 --> 00:22:51,180
business meaning how and to is allowed

00:22:49,030 --> 00:22:53,710
to merge for requests who is allowed to

00:22:51,180 --> 00:22:56,680
you know release your packages who's

00:22:53,710 --> 00:22:58,600
allowed to do something else and the

00:22:56,680 --> 00:23:01,210
governance really helps us here to

00:22:58,600 --> 00:23:04,150
codify that and make sure that we you

00:23:01,210 --> 00:23:07,300
know we treat everyone when we do this

00:23:04,150 --> 00:23:08,830
properly in a documented way so when you

00:23:07,300 --> 00:23:12,190
read the first sentence of the

00:23:08,830 --> 00:23:13,960
pentagon's and description that says the

00:23:12,190 --> 00:23:15,610
whatever project ones as much as

00:23:13,960 --> 00:23:17,410
possible to operate using procedures

00:23:15,610 --> 00:23:19,390
that are fair open inviting and

00:23:17,410 --> 00:23:21,040
ultimately good for the community for

00:23:19,390 --> 00:23:23,110
that reason we find valuable to codify

00:23:21,040 --> 00:23:25,450
some of the ways that the project goes

00:23:23,110 --> 00:23:27,670
about its day-to-day business we want to

00:23:25,450 --> 00:23:29,620
make sure that no matter who you are you

00:23:27,670 --> 00:23:31,540
have the opportunity to contribute to at

00:23:29,620 --> 00:23:34,270
the world we want to make sure that no

00:23:31,540 --> 00:23:36,430
corporation can exert undue influence on

00:23:34,270 --> 00:23:38,680
the community or hold the project

00:23:36,430 --> 00:23:40,390
hostage and likewise we want to make

00:23:38,680 --> 00:23:42,280
sure that corporations which benefit

00:23:40,390 --> 00:23:44,290
from a better role are also centralized

00:23:42,280 --> 00:23:45,700
to give back this document describes

00:23:44,290 --> 00:23:47,380
various types of contribution

00:23:45,700 --> 00:23:49,300
contributors work within but their

00:23:47,380 --> 00:23:53,080
approach

00:23:49,300 --> 00:23:55,420
so though the main reason why we have

00:23:53,080 --> 00:23:57,970
this governance is that we want to make

00:23:55,420 --> 00:23:59,890
the decision-making fair equal and

00:23:57,970 --> 00:24:02,410
democratic there's no one who should

00:23:59,890 --> 00:24:04,510
just own the wool project we want to

00:24:02,410 --> 00:24:06,600
avoid the best factor in effect which

00:24:04,510 --> 00:24:09,100
means that you know whenever someone

00:24:06,600 --> 00:24:10,750
decides to leave the project and doesn't

00:24:09,100 --> 00:24:12,700
want to contribute anymore there are

00:24:10,750 --> 00:24:15,450
other people that can take over that

00:24:12,700 --> 00:24:18,130
have access to code and to the packages

00:24:15,450 --> 00:24:19,930
we want to also allow that every the

00:24:18,130 --> 00:24:20,710
project direction can be influenced by

00:24:19,930 --> 00:24:23,500
anyone

00:24:20,710 --> 00:24:26,050
so whoever contributes to the project

00:24:23,500 --> 00:24:28,510
and invests into it and he should be

00:24:26,050 --> 00:24:31,360
able to enter to influence it as well

00:24:28,510 --> 00:24:33,880
and then we want that people again

00:24:31,360 --> 00:24:39,040
because people that are engaged also

00:24:33,880 --> 00:24:41,950
promote it and you know that you know

00:24:39,040 --> 00:24:45,580
get somewhat out of contributing to the

00:24:41,950 --> 00:24:47,500
project and we've defined for

00:24:45,580 --> 00:24:50,800
essentially four different kind of roles

00:24:47,500 --> 00:24:52,750
in the projects which are a user's there

00:24:50,800 --> 00:24:55,900
are people who use and advocate but

00:24:52,750 --> 00:24:57,430
about their contributors with someone

00:24:55,900 --> 00:25:01,150
who has contributed to the project in

00:24:57,430 --> 00:25:03,010
form of the code or request and their

00:25:01,150 --> 00:25:04,780
project committers and there are people

00:25:03,010 --> 00:25:06,850
that have shown a constant record of

00:25:04,780 --> 00:25:08,590
contributions and there's the technical

00:25:06,850 --> 00:25:12,940
steering committee which essentially

00:25:08,590 --> 00:25:15,490
leads the project well as a user you

00:25:12,940 --> 00:25:17,980
pretty much you know you use web Dario

00:25:15,490 --> 00:25:20,320
and anyone can become a user without

00:25:17,980 --> 00:25:23,500
even knowing it once you use whether

00:25:20,320 --> 00:25:25,570
your company once you you know tweet

00:25:23,500 --> 00:25:28,120
about it and say you know also what the

00:25:25,570 --> 00:25:32,890
ROI is you become essentially whatever

00:25:28,120 --> 00:25:35,470
user a part of the community as the next

00:25:32,890 --> 00:25:38,980
step you kind of like you slept over a

00:25:35,470 --> 00:25:40,780
lot and like me wanted to you know think

00:25:38,980 --> 00:25:42,450
about contributing something you know

00:25:40,780 --> 00:25:45,160
you found something missing the

00:25:42,450 --> 00:25:48,280
documentation and you want to change

00:25:45,160 --> 00:25:50,590
that and so with that you create a pull

00:25:48,280 --> 00:25:53,680
request and change something anywhere in

00:25:50,590 --> 00:25:59,050
the code and and that makes you automate

00:25:53,680 --> 00:26:01,150
the project the project contributor so

00:25:59,050 --> 00:26:04,500
anyone who's done one or multiple for

00:26:01,150 --> 00:26:04,500
oppressed becomes

00:26:04,630 --> 00:26:08,960
so once you showed a lot like a bit of

00:26:08,270 --> 00:26:11,870
engagement

00:26:08,960 --> 00:26:13,580
once you have helped other people's

00:26:11,870 --> 00:26:16,160
would issue yourself on the support

00:26:13,580 --> 00:26:18,830
channel and has have made a bunch of

00:26:16,160 --> 00:26:20,960
peers to the project you become a

00:26:18,830 --> 00:26:23,150
committer and with that we invite you to

00:26:20,960 --> 00:26:25,910
the webserver organization you will

00:26:23,150 --> 00:26:31,760
become right access to the repository

00:26:25,910 --> 00:26:32,090
and you can help us even more by you

00:26:31,760 --> 00:26:35,170
know

00:26:32,090 --> 00:26:39,350
closing issues if questions are answered

00:26:35,170 --> 00:26:42,590
by committing code and so on it's just

00:26:39,350 --> 00:26:45,700
one more level of engagement to the

00:26:42,590 --> 00:26:49,640
project that lets you become a project

00:26:45,700 --> 00:26:51,620
contributors parameter and that's not a

00:26:49,640 --> 00:26:53,570
lease there's a technical steering

00:26:51,620 --> 00:26:57,020
committee which are which consists of

00:26:53,570 --> 00:27:00,260
people that have you know shown high

00:26:57,020 --> 00:27:02,600
record of contribution with LED certain

00:27:00,260 --> 00:27:05,750
initiatives in the project and have an

00:27:02,600 --> 00:27:08,360
overall understanding of the church well

00:27:05,750 --> 00:27:11,810
you become a TAC member once you have

00:27:08,360 --> 00:27:14,180
roughly committed over twenty qualifying

00:27:11,810 --> 00:27:17,660
pull requests in whatever shape or form

00:27:14,180 --> 00:27:19,760
and you become you you get nominated by

00:27:17,660 --> 00:27:21,920
one of the existing technical student

00:27:19,760 --> 00:27:25,370
community members which is you know

00:27:21,920 --> 00:27:27,110
fairly easy so once you're part of the

00:27:25,370 --> 00:27:29,510
project commit of the technique state

00:27:27,110 --> 00:27:31,880
committee you can release packages of

00:27:29,510 --> 00:27:35,770
the project and and you help even more

00:27:31,880 --> 00:27:35,770
steer the right direction of

00:27:35,820 --> 00:27:41,170
so now that we know the code

00:27:38,530 --> 00:27:42,910
once we know now that we know how we can

00:27:41,170 --> 00:27:46,300
contribute to certain things so we can

00:27:42,910 --> 00:27:48,100
run how we can pull the code and how you

00:27:46,300 --> 00:27:50,980
know how my role in the project looks

00:27:48,100 --> 00:27:55,330
like let's let's find out how we can

00:27:50,980 --> 00:27:57,160
contribute actually before we go into

00:27:55,330 --> 00:27:58,840
the topic so we should answer you know

00:27:57,160 --> 00:28:01,830
why should I contribute to the project

00:27:58,840 --> 00:28:06,220
you know why should I spend my free time

00:28:01,830 --> 00:28:09,100
to contribute to your project then I use

00:28:06,220 --> 00:28:10,600
the pro so I there's you know there are

00:28:09,100 --> 00:28:13,720
a lot of incentive for different kind of

00:28:10,600 --> 00:28:16,990
people and I put some of mine

00:28:13,720 --> 00:28:18,370
in here where I would start with giving

00:28:16,990 --> 00:28:21,070
back to the community I think it's one

00:28:18,370 --> 00:28:24,130
of the biggest incentives for me to

00:28:21,070 --> 00:28:27,850
contribute to the project I know that I

00:28:24,130 --> 00:28:29,830
use almost everywhere an open-source

00:28:27,850 --> 00:28:31,900
project where people have invested their

00:28:29,830 --> 00:28:33,970
free time into it so I can use it for

00:28:31,900 --> 00:28:36,790
free and the thing it's just important

00:28:33,970 --> 00:28:39,180
to be a good citizen to just compare to

00:28:36,790 --> 00:28:43,810
just give back to the community and help

00:28:39,180 --> 00:28:45,280
out the project that I use the most it

00:28:43,810 --> 00:28:47,080
also helped me when I started working on

00:28:45,280 --> 00:28:50,890
web guru to understand the framework

00:28:47,080 --> 00:28:53,230
better and I as I my tests in my day to

00:28:50,890 --> 00:28:55,630
day business I helped me to understand

00:28:53,230 --> 00:28:59,350
where the errors my tests come from and

00:28:55,630 --> 00:29:01,330
how I can fix them but I just you know

00:28:59,350 --> 00:29:03,460
when you just use their whatever as a

00:29:01,330 --> 00:29:05,620
framer you sometimes you know and not

00:29:03,460 --> 00:29:07,870
I'm not aware how things work under the

00:29:05,620 --> 00:29:12,370
hood and this will really help you to

00:29:07,870 --> 00:29:13,960
understand that it also has things it

00:29:12,370 --> 00:29:15,910
also helps you to understand what are

00:29:13,960 --> 00:29:18,040
the limitation of certain automation

00:29:15,910 --> 00:29:19,750
practices that you do because as you get

00:29:18,040 --> 00:29:21,880
more familiar with the limitation of the

00:29:19,750 --> 00:29:25,210
framework you also understand better

00:29:21,880 --> 00:29:27,690
what you can do and how you can do how

00:29:25,210 --> 00:29:30,190
you can test certain things

00:29:27,690 --> 00:29:31,690
it's of course always good if you are

00:29:30,190 --> 00:29:33,400
able to influence approach check you

00:29:31,690 --> 00:29:35,710
know if you have a specific requirement

00:29:33,400 --> 00:29:38,170
in your day-to-day job where you want to

00:29:35,710 --> 00:29:39,040
country you want to have that it done by

00:29:38,170 --> 00:29:41,590
work tomorrow

00:29:39,040 --> 00:29:44,230
being a contributor or tecnu extreme

00:29:41,590 --> 00:29:47,460
committee we do you have suit you easier

00:29:44,230 --> 00:29:51,460
in AD or propose such features and

00:29:47,460 --> 00:29:53,350
implement them contributing to open

00:29:51,460 --> 00:29:55,990
source in general has you to improve

00:29:53,350 --> 00:29:57,640
your coding skills as well as build up

00:29:55,990 --> 00:30:00,670
your reputation that you can leverage

00:29:57,640 --> 00:30:02,530
for your own career and that's not at

00:30:00,670 --> 00:30:05,080
least you meet wonderful people on the

00:30:02,530 --> 00:30:10,180
way and as it is personally you will

00:30:05,080 --> 00:30:12,940
continue Christian sorry to interview I

00:30:10,180 --> 00:30:15,370
know we didn't discuss this but I just

00:30:12,940 --> 00:30:20,610
wanted to mention that actually all of

00:30:15,370 --> 00:30:23,200
this really applies to me like when I

00:30:20,610 --> 00:30:26,800
started contributing to my profile I

00:30:23,200 --> 00:30:29,050
actually got my current job as a as a

00:30:26,800 --> 00:30:31,950
result of all the hard work that I did

00:30:29,050 --> 00:30:34,410
because it it showed people saw this and

00:30:31,950 --> 00:30:37,600
someone who was also active in the

00:30:34,410 --> 00:30:40,300
pregnancy protractor and welfare project

00:30:37,600 --> 00:30:42,580
actually invited me to their company

00:30:40,300 --> 00:30:45,600
back then so this is like a perfect

00:30:42,580 --> 00:30:50,170
perfect example of how these things can

00:30:45,600 --> 00:30:56,940
and levitate you or that's right you up

00:30:50,170 --> 00:30:56,940
to better places absolutely

00:30:57,179 --> 00:31:02,190
so to get started there where is

00:31:00,049 --> 00:31:04,619
varieties of ways someone you can

00:31:02,190 --> 00:31:05,940
contribute to the project you know most

00:31:04,619 --> 00:31:07,559
of the people think of contributing to

00:31:05,940 --> 00:31:08,909
open source it's just you have to

00:31:07,559 --> 00:31:11,789
contribute code but that's not always

00:31:08,909 --> 00:31:14,070
true we are really looking every project

00:31:11,789 --> 00:31:16,919
looks in how they can improve the

00:31:14,070 --> 00:31:19,169
documentation and as you use that there

00:31:16,919 --> 00:31:20,669
were more important you find places in

00:31:19,169 --> 00:31:23,429
the documentation where you think this

00:31:20,669 --> 00:31:27,149
can be actually improved to help people

00:31:23,429 --> 00:31:28,710
understand this area better you can have

00:31:27,149 --> 00:31:32,700
a loud on the key to support channel

00:31:28,710 --> 00:31:35,669
where we have over we have over 5,000

00:31:32,700 --> 00:31:38,549
people I think asking questions every

00:31:35,669 --> 00:31:41,249
day and you know we are just a handful

00:31:38,549 --> 00:31:44,070
of people and we want to help everyone

00:31:41,249 --> 00:31:45,839
out there it's always good to create

00:31:44,070 --> 00:31:48,779
educational content that's how Kevin

00:31:45,839 --> 00:31:50,969
actually joined to join the project and

00:31:48,779 --> 00:31:55,559
became a technical student coming with a

00:31:50,969 --> 00:31:58,830
committee member I wrote the learner

00:31:55,559 --> 00:32:01,469
draft of a PDF course he prayed it back

00:31:58,830 --> 00:32:03,929
and he has a bunch of great YouTube

00:32:01,469 --> 00:32:08,309
content where he explains our clever

00:32:03,929 --> 00:32:09,719
works and so he's an awesome guy and you

00:32:08,309 --> 00:32:11,969
can also contribute by just spreading

00:32:09,719 --> 00:32:14,429
the good word ear Twitter or any other

00:32:11,969 --> 00:32:16,529
social media and you can help us

00:32:14,429 --> 00:32:18,989
discover box and create accurate words

00:32:16,529 --> 00:32:20,849
and you can make teacher requests if you

00:32:18,989 --> 00:32:23,070
think something could be added to the

00:32:20,849 --> 00:32:25,619
project and it's useful and you know

00:32:23,070 --> 00:32:27,599
just be creative and I know you you have

00:32:25,619 --> 00:32:29,940
all Thailand and you know you can just

00:32:27,599 --> 00:32:34,559
use apply your talent to the project and

00:32:29,940 --> 00:32:37,080
have it out to get started on the issues

00:32:34,559 --> 00:32:39,570
we have a labeling system that allows

00:32:37,080 --> 00:32:42,149
you to quickly find Paxton you can start

00:32:39,570 --> 00:32:45,749
working on we have we highlight our

00:32:42,149 --> 00:32:48,359
packs with the part label or enhancement

00:32:45,749 --> 00:32:51,739
label when this is something that is new

00:32:48,359 --> 00:32:53,940
and each two is a new feature and I

00:32:51,739 --> 00:32:57,299
really like to highlight the first time

00:32:53,940 --> 00:32:59,700
is only label which has like a good

00:32:57,299 --> 00:33:03,710
description on how this specific problem

00:32:59,700 --> 00:33:06,089
or feature has to be implemented and it

00:33:03,710 --> 00:33:08,299
invites you it gets you better

00:33:06,089 --> 00:33:10,110
understanding compared to some other

00:33:08,299 --> 00:33:13,320
issues that a point

00:33:10,110 --> 00:33:15,059
formation good first pick is similar to

00:33:13,320 --> 00:33:17,010
that where you know it's it's a good

00:33:15,059 --> 00:33:20,010
first plate it's good first issue that

00:33:17,010 --> 00:33:23,190
has a limited scope and helps you to you

00:33:20,010 --> 00:33:25,290
know skip your feets rep and every issue

00:33:23,190 --> 00:33:28,890
that you see that has a Help Wanted is

00:33:25,290 --> 00:33:30,990
something where we as a as a team don't

00:33:28,890 --> 00:33:32,670
have enough time to work on this so we

00:33:30,990 --> 00:33:37,920
actually actively looking for people

00:33:32,670 --> 00:33:39,720
that want to get involved in this if you

00:33:37,920 --> 00:33:41,640
create an issue there you know there's a

00:33:39,720 --> 00:33:44,850
couple of good practices that you know

00:33:41,640 --> 00:33:46,770
you should follow one of them for

00:33:44,850 --> 00:33:49,740
instance is that it's always good to

00:33:46,770 --> 00:33:51,809
follow the issue template where we ask

00:33:49,740 --> 00:33:54,690
you to provide the version number and

00:33:51,809 --> 00:33:57,299
enter good producible example which is

00:33:54,690 --> 00:33:59,780
really important for us to we could use

00:33:57,299 --> 00:34:02,549
the problem in the back on our site

00:33:59,780 --> 00:34:04,919
otherwise it is really difficult to

00:34:02,549 --> 00:34:07,770
understand how and where to fix the

00:34:04,919 --> 00:34:11,040
problem and with a mini mobile

00:34:07,770 --> 00:34:13,550
producible example that can really make

00:34:11,040 --> 00:34:16,740
a big difference

00:34:13,550 --> 00:34:18,929
think about that you know if if we

00:34:16,740 --> 00:34:21,300
should help you to fix a bug then we

00:34:18,929 --> 00:34:23,790
kind of need to understand where we need

00:34:21,300 --> 00:34:27,179
to fix it and like this reproduce

00:34:23,790 --> 00:34:29,369
example does that and you don't need to

00:34:27,179 --> 00:34:31,800
really like copy all the code that you

00:34:29,369 --> 00:34:34,560
are working on to like you get a

00:34:31,800 --> 00:34:36,480
repository it really just helps us to

00:34:34,560 --> 00:34:38,580
have like a simple file that can

00:34:36,480 --> 00:34:42,830
reproduce the issue or you have a simple

00:34:38,580 --> 00:34:45,869
test run a project that will produce

00:34:42,830 --> 00:34:47,970
another important part is providing

00:34:45,869 --> 00:34:50,669
error logs and dispatch logging is

00:34:47,970 --> 00:34:53,250
possible use the gist format for that or

00:34:50,669 --> 00:34:57,270
any other place where you can dump

00:34:53,250 --> 00:34:59,040
blocks and and especially if you import

00:34:57,270 --> 00:35:00,930
these locks interior the issue of thread

00:34:59,040 --> 00:35:04,380
make sure you use the proper mactown

00:35:00,930 --> 00:35:07,350
format with the suite ticks

00:35:04,380 --> 00:35:09,240
otherwise it will be really difficult to

00:35:07,350 --> 00:35:12,390
understand where the lot started and

00:35:09,240 --> 00:35:14,160
where they start of course always

00:35:12,390 --> 00:35:16,410
provide a descriptive title and

00:35:14,160 --> 00:35:18,450
description and there are none of issues

00:35:16,410 --> 00:35:21,030
that just say whatever doesn't work and

00:35:18,450 --> 00:35:22,140
this not really tells us what exactly is

00:35:21,030 --> 00:35:24,120
going on

00:35:22,140 --> 00:35:27,630
and at the end of the day and for

00:35:24,120 --> 00:35:29,820
questions we kind of like cancel the

00:35:27,630 --> 00:35:31,950
support for questions on github because

00:35:29,820 --> 00:35:34,500
we made the experience that on the key

00:35:31,950 --> 00:35:37,230
to support channel we can much easier

00:35:34,500 --> 00:35:39,540
interact with you through the chat and

00:35:37,230 --> 00:35:41,010
there's also a bunch of people that can

00:35:39,540 --> 00:35:44,700
help you out more than just to

00:35:41,010 --> 00:35:46,650
collaborate just on the project so let's

00:35:44,700 --> 00:35:48,810
say yeah simple example if you want to

00:35:46,650 --> 00:35:51,530
start working on any on the park or

00:35:48,810 --> 00:35:57,240
issue you go in the repository website

00:35:51,530 --> 00:35:59,040
you filter the root issues based on the

00:35:57,240 --> 00:36:01,640
good first pick or first timers only

00:35:59,040 --> 00:36:04,350
issue and you pick up one of them and

00:36:01,640 --> 00:36:07,310
really if you you know if you see

00:36:04,350 --> 00:36:09,570
something that is not well descriptive

00:36:07,310 --> 00:36:11,760
described enough where you need some

00:36:09,570 --> 00:36:13,320
more information to solve this you know

00:36:11,760 --> 00:36:16,920
always feel free to person the issue

00:36:13,320 --> 00:36:20,100
your questions and either the issue the

00:36:16,920 --> 00:36:25,410
person that has created issue or one of

00:36:20,100 --> 00:36:26,700
our contributors will help y'all there's

00:36:25,410 --> 00:36:28,260
also another way to contribute to the

00:36:26,700 --> 00:36:31,380
project which is looking at the world

00:36:28,260 --> 00:36:33,870
map and you know providing a new feature

00:36:31,380 --> 00:36:35,670
to the project even though we have a

00:36:33,870 --> 00:36:38,220
road map it doesn't necessarily say that

00:36:35,670 --> 00:36:40,530
we that we completely have focus on that

00:36:38,220 --> 00:36:42,690
it kind of like helps to steer into the

00:36:40,530 --> 00:36:44,850
right direction but if you come with an

00:36:42,690 --> 00:36:46,710
idea where you say yeah that definitely

00:36:44,850 --> 00:36:48,750
makes sense to add to the project and to

00:36:46,710 --> 00:36:50,400
the framework and then we definitely add

00:36:48,750 --> 00:36:53,370
this to the world map without question

00:36:50,400 --> 00:36:55,920
and but securing world map description

00:36:53,370 --> 00:36:57,690
or the current will work my place gives

00:36:55,920 --> 00:36:59,520
you kind of like a hint where you could

00:36:57,690 --> 00:37:05,010
get involved there are some interesting

00:36:59,520 --> 00:37:07,350
projects for instance and the the web

00:37:05,010 --> 00:37:09,720
camera fiddle platform where we want to

00:37:07,350 --> 00:37:11,760
build the website we can run whatever

00:37:09,720 --> 00:37:15,570
code in the browser

00:37:11,760 --> 00:37:19,140
connecting to jump from anger or to you

00:37:15,570 --> 00:37:20,970
know it doctor somewhere in the cloud to

00:37:19,140 --> 00:37:22,530
execute the test we already had

00:37:20,970 --> 00:37:25,590
something like this and we saw it really

00:37:22,530 --> 00:37:27,750
well Bo valuable and so if you're a

00:37:25,590 --> 00:37:30,210
front-end engineer the like stupid

00:37:27,750 --> 00:37:32,400
website and then you know help us out

00:37:30,210 --> 00:37:35,490
with the philipot form boy you know if

00:37:32,400 --> 00:37:37,920
you like to create these video

00:37:35,490 --> 00:37:40,170
then you know help us out build a video

00:37:37,920 --> 00:37:42,470
for certain command or for a certain

00:37:40,170 --> 00:37:44,880
section in the documentation page and

00:37:42,470 --> 00:37:47,160
they all like you know the direction

00:37:44,880 --> 00:37:50,000
where you you know can get involved with

00:37:47,160 --> 00:37:55,619
your own ideas and your own you know

00:37:50,000 --> 00:37:58,200
suggestions and making the PRS we as

00:37:55,619 --> 00:38:01,710
easy as you know making the poet press

00:37:58,200 --> 00:38:03,960
create a port pushing to your fork on

00:38:01,710 --> 00:38:05,369
github and then make a pull request to

00:38:03,960 --> 00:38:07,560
the master branch in the webdriver

00:38:05,369 --> 00:38:09,930
culture and we currently don't really

00:38:07,560 --> 00:38:11,880
have a format on how these for WordPress

00:38:09,930 --> 00:38:13,980
should look like the most important part

00:38:11,880 --> 00:38:16,830
for us is that you know the tests are

00:38:13,980 --> 00:38:19,140
passing and that it changed that you're

00:38:16,830 --> 00:38:22,020
proposing makes sense and then you know

00:38:19,140 --> 00:38:22,470
it goes as quickly as saying looks good

00:38:22,020 --> 00:38:24,540
to me

00:38:22,470 --> 00:38:29,460
we merge it and would be part of the

00:38:24,540 --> 00:38:31,920
next movies and you're not alone in this

00:38:29,460 --> 00:38:33,680
journey if you want to start

00:38:31,920 --> 00:38:36,750
contributing if you have you know issues

00:38:33,680 --> 00:38:38,760
with that you can always go come to the

00:38:36,750 --> 00:38:40,830
reader support channel and instead of

00:38:38,760 --> 00:38:44,010
asking question about on how to use

00:38:40,830 --> 00:38:46,109
whatever you can think that our the

00:38:44,010 --> 00:38:48,090
contributors directly if they if these

00:38:46,109 --> 00:38:50,880
questions are relating to contributing

00:38:48,090 --> 00:38:53,609
to contributing to the project we also

00:38:50,880 --> 00:38:56,840
have to select channel and again if you

00:38:53,609 --> 00:38:59,930
ever if you come to constant issue where

00:38:56,840 --> 00:39:02,730
the you know the issue doctor

00:38:59,930 --> 00:39:05,010
information is not complete and your

00:39:02,730 --> 00:39:08,720
questions will never hesitate you just

00:39:05,010 --> 00:39:11,340
asked for information in that issue and

00:39:08,720 --> 00:39:12,600
with that I want to also announce a new

00:39:11,340 --> 00:39:14,730
thing that we want to start it in the

00:39:12,600 --> 00:39:17,670
project which is the contribution office

00:39:14,730 --> 00:39:20,070
hours so if you have an issue that you

00:39:17,670 --> 00:39:24,480
want to work on you can schedule

00:39:20,070 --> 00:39:27,270
one-on-one PA session with me I have two

00:39:24,480 --> 00:39:30,359
hours a week for that and we have we can

00:39:27,270 --> 00:39:33,600
like block one hour a week to just

00:39:30,359 --> 00:39:35,730
actively work one-on-one on this

00:39:33,600 --> 00:39:37,740
particular part or feature or whenever

00:39:35,730 --> 00:39:41,119
you want to contribute and I'm happy to

00:39:37,740 --> 00:39:41,119
help you you know help you along

00:39:42,589 --> 00:39:50,869
that said let's get started so I hope

00:39:47,839 --> 00:39:52,999
that somehow explains how you can

00:39:50,869 --> 00:39:53,569
contribute to the project and how we can

00:39:52,999 --> 00:39:57,309
get started

00:39:53,569 --> 00:40:00,519
I would like to ask you to you know

00:39:57,309 --> 00:40:06,650
start looking into the repository and

00:40:00,519 --> 00:40:09,319
filter the issues for good first time as

00:40:06,650 --> 00:40:13,549
only I recently added a couple of good

00:40:09,319 --> 00:40:16,999
issues that you can start with we have

00:40:13,549 --> 00:40:19,519
for instance fixing the test that we can

00:40:16,999 --> 00:40:23,210
we have the record is skipping in our

00:40:19,519 --> 00:40:26,359
unit test there are some issues and

00:40:23,210 --> 00:40:29,960
parts that needs attention that I have a

00:40:26,359 --> 00:40:31,339
fairly limited scope and and there are

00:40:29,960 --> 00:40:34,369
some you know typescript

00:40:31,339 --> 00:40:36,140
issues that we can resolve or you can

00:40:34,369 --> 00:40:39,079
just think about any other contribution

00:40:36,140 --> 00:40:41,630
that you might want to do and we are

00:40:39,079 --> 00:40:43,190
happy to help you on the way here via

00:40:41,630 --> 00:40:46,910
chat or you can just on with yourself

00:40:43,190 --> 00:40:51,589
and ask questions if you have and and

00:40:46,910 --> 00:40:53,509
yeah we are here to help you out

00:40:51,589 --> 00:40:56,089
does anyone has questions to fire on the

00:40:53,509 --> 00:40:59,109
presentation or anything related to the

00:40:56,089 --> 00:40:59,109
contribution process

00:41:01,050 --> 00:41:03,110
you

00:41:03,420 --> 00:41:05,480
you

00:41:05,619 --> 00:41:11,600
you

00:41:07,390 --> 00:41:16,700
okay I do see that we have a question

00:41:11,600 --> 00:41:21,010
from Quinn in chasm is the development

00:41:16,700 --> 00:41:21,010
workflow I think is it still the case

00:41:21,430 --> 00:41:29,109
the development workflow yeah I can yeah

00:41:24,520 --> 00:41:37,180
I can actually showcase that in life let

00:41:29,109 --> 00:41:41,520
me share different screen so okay can

00:41:37,180 --> 00:41:41,520
you see my IDE and stuff like that

00:41:43,599 --> 00:41:50,199
and for me it says the use of screen

00:41:46,630 --> 00:41:52,319
sharing but I don't see the screen let

00:41:50,199 --> 00:41:56,469
me try that again

00:41:52,319 --> 00:42:00,180
desktop one share I think it's actually

00:41:56,469 --> 00:42:06,219
sharing it on the note in zoom but the

00:42:00,180 --> 00:42:12,459
key coach app maybe I think the others

00:42:06,219 --> 00:42:16,869
can see it but I don't see I don't see

00:42:12,459 --> 00:42:18,660
the we need to try something else but II

00:42:16,869 --> 00:42:24,430
just

00:42:18,660 --> 00:42:32,430
yeah it's visible for everyone but me do

00:42:24,430 --> 00:42:35,589
you see my ID now yep okay perfect so

00:42:32,430 --> 00:42:39,989
here on the I've checked out the web the

00:42:35,589 --> 00:42:43,930
real code and what you of course do is

00:42:39,989 --> 00:42:46,930
as Evan has explained before once you

00:42:43,930 --> 00:42:49,420
have checked out the code you can you

00:42:46,930 --> 00:42:52,900
should install the dependencies with NPM

00:42:49,420 --> 00:42:56,410
install and this should install the

00:42:52,900 --> 00:42:58,509
project dependencies that we use to to

00:42:56,410 --> 00:43:01,229
work on the project like yawn learner

00:42:58,509 --> 00:43:04,299
not young but learner and all the

00:43:01,229 --> 00:43:07,690
dependencies that we have to create all

00:43:04,299 --> 00:43:13,239
these packages once you then should do

00:43:07,690 --> 00:43:15,219
is run set up - full which with resolves

00:43:13,239 --> 00:43:19,059
all the dependencies of the subtitles

00:43:15,219 --> 00:43:21,910
that you see here reptile uses mono

00:43:19,059 --> 00:43:24,519
ecosystem based using the learner

00:43:21,910 --> 00:43:26,680
framework and so all the packages that

00:43:24,519 --> 00:43:28,569
we have in our mono repo and that we

00:43:26,680 --> 00:43:31,079
officially you know come from the

00:43:28,569 --> 00:43:33,519
whatever organization live in here

00:43:31,079 --> 00:43:35,979
everyone besides the assertion library

00:43:33,519 --> 00:43:40,269
actually but other than that everything

00:43:35,979 --> 00:43:42,339
lives here and you see that the format

00:43:40,269 --> 00:43:46,180
is pretty much the same as with NPM the

00:43:42,339 --> 00:43:49,569
wo- dot reporters then the at the video

00:43:46,180 --> 00:43:51,549
stop recorder on it here so once you

00:43:49,569 --> 00:43:53,920
have one that that actually can take up

00:43:51,549 --> 00:43:55,900
to a minute or two depending on how fast

00:43:53,920 --> 00:43:57,100
your system is because there's we

00:43:55,900 --> 00:44:00,040
already have we are

00:43:57,100 --> 00:44:01,810
like 36 packages now and resolving all

00:44:00,040 --> 00:44:09,730
the sub dependencies can take a while

00:44:01,810 --> 00:44:13,740
and once you have that you create it's

00:44:09,730 --> 00:44:13,740
difficult with the influx

00:44:17,150 --> 00:44:22,700
I cannot the team accession yeah that's

00:44:18,920 --> 00:44:25,339
great because then I can have multiple a

00:44:22,700 --> 00:44:30,230
multiple terminal sessions here which I

00:44:25,339 --> 00:44:32,720
need because I want to run the watch

00:44:30,230 --> 00:44:35,359
command which watches all these all the

00:44:32,720 --> 00:44:37,279
JavaScript files in the project or sub

00:44:35,359 --> 00:44:42,339
package so every one every time you make

00:44:37,279 --> 00:44:46,940
a change you payroll is triggered and

00:44:42,339 --> 00:44:50,750
compiles the files again so that you can

00:44:46,940 --> 00:44:53,210
you know have a really short cycle of

00:44:50,750 --> 00:44:56,450
making changes testing it making changes

00:44:53,210 --> 00:44:58,970
testing it so once that is run and

00:44:56,450 --> 00:45:01,630
continues watching the files and when I

00:44:58,970 --> 00:45:04,130
want to you know to changes on

00:45:01,630 --> 00:45:08,420
everything I usually sign up

00:45:04,130 --> 00:45:11,630
chromedriver because it's you know it's

00:45:08,420 --> 00:45:13,730
really fast to sign up long session and

00:45:11,630 --> 00:45:15,740
make changes with it so you can use

00:45:13,730 --> 00:45:20,869
Skype or drive as well and make test on

00:45:15,740 --> 00:45:23,420
Firefox and I usually stop and then we

00:45:20,869 --> 00:45:25,940
have the example section which ever

00:45:23,420 --> 00:45:28,609
mentioned before that is for us as

00:45:25,940 --> 00:45:33,500
contributors but only well good for

00:45:28,609 --> 00:45:35,569
documentation purposes but also to run

00:45:33,500 --> 00:45:37,819
certain scenarios where you want to

00:45:35,569 --> 00:45:39,920
change something and you want to make

00:45:37,819 --> 00:45:43,130
sure that it works and we don't want you

00:45:39,920 --> 00:45:44,599
to spend a lot of time creating that

00:45:43,130 --> 00:45:47,480
example for you we have a bunch of

00:45:44,599 --> 00:45:51,980
things already here we have a script

00:45:47,480 --> 00:45:54,109
that runs appium we have a bunch of

00:45:51,980 --> 00:45:56,029
scripts some other screens that connect

00:45:54,109 --> 00:46:01,039
to a different 12 vendor like browser

00:45:56,029 --> 00:46:04,099
stack sauce labs and comité on we have a

00:46:01,039 --> 00:46:09,799
script that runs the dev tool service

00:46:04,099 --> 00:46:13,010
and makes some performance tests we have

00:46:09,799 --> 00:46:15,890
a script for multiple modes where it's a

00:46:13,010 --> 00:46:18,950
little script that locks into a chat and

00:46:15,890 --> 00:46:22,760
make some interactions and connects to

00:46:18,950 --> 00:46:24,200
iPad to see it Channel and so you can

00:46:22,760 --> 00:46:27,710
use that if you have changes for

00:46:24,200 --> 00:46:30,349
multiple mode page object and if you

00:46:27,710 --> 00:46:31,280
want to test how page object work but I

00:46:30,349 --> 00:46:34,460
mostly

00:46:31,280 --> 00:46:37,490
go into the wao section which has an

00:46:34,460 --> 00:46:39,880
example for the test one huh and I

00:46:37,490 --> 00:46:43,250
usually use some Walker one because I

00:46:39,880 --> 00:46:47,300
usually write tests a mocker so I would

00:46:43,250 --> 00:46:52,520
go in my terminal I would go to the

00:46:47,300 --> 00:46:56,510
example directory to the wo wo directory

00:46:52,520 --> 00:47:01,310
and it has a package.json so if you if

00:46:56,510 --> 00:47:04,870
you look into the package jason of that

00:47:01,310 --> 00:47:09,680
specific directory it has all the

00:47:04,870 --> 00:47:12,830
prepared commands and there to one the

00:47:09,680 --> 00:47:14,660
scenario for specific framework for you

00:47:12,830 --> 00:47:20,090
for my maka example i just need to copy

00:47:14,660 --> 00:47:21,830
that and say npm run test mocker and if

00:47:20,090 --> 00:47:25,040
i wanted to see that foam driver now

00:47:21,830 --> 00:47:26,840
it's off and my chrome you don't see

00:47:25,040 --> 00:47:30,980
that probably yet but in the background

00:47:26,840 --> 00:47:34,150
my chrome stands and my test passes the

00:47:30,980 --> 00:47:37,400
test is really minimal it just

00:47:34,150 --> 00:47:42,320
essentially opens web dominate today oh

00:47:37,400 --> 00:47:45,890
and search the title of the page so this

00:47:42,320 --> 00:47:48,620
your basic setup this is all you need to

00:47:45,890 --> 00:47:50,270
get started let's say we want to change

00:47:48,620 --> 00:47:52,550
something in the spec reporter we have

00:47:50,270 --> 00:47:55,610
the spectrum folder here we can see it

00:47:52,550 --> 00:47:59,840
the output of it and it's saying we want

00:47:55,610 --> 00:48:03,140
to modify what's what's the prefix of

00:47:59,840 --> 00:48:07,600
every line of this reporter for that we

00:48:03,140 --> 00:48:10,990
look into the code of the spec reporter

00:48:07,600 --> 00:48:13,240
and into the source code and the source

00:48:10,990 --> 00:48:15,220
code once compiled moved the files of

00:48:13,240 --> 00:48:18,490
the belt and this is being used

00:48:15,220 --> 00:48:19,930
published also to NPM but we are working

00:48:18,490 --> 00:48:24,340
in the source code in the source

00:48:19,930 --> 00:48:27,490
directory the package has two files so

00:48:24,340 --> 00:48:30,760
we look into the index chess which is

00:48:27,490 --> 00:48:33,070
essentially the reporter and so here it

00:48:30,760 --> 00:48:33,790
is a function that is executed once to

00:48:33,070 --> 00:48:37,750
run an ends

00:48:33,790 --> 00:48:41,050
it's called print report and this we

00:48:37,750 --> 00:48:45,310
pour it's the header and then an empty

00:48:41,050 --> 00:48:47,860
line the results the the amount of test

00:48:45,310 --> 00:48:52,960
passes and the failure if something is

00:48:47,860 --> 00:48:55,060
welcome so then let's look into where

00:48:52,960 --> 00:48:58,300
the preface I see something here like a

00:48:55,060 --> 00:49:02,250
preface where does the preface comes

00:48:58,300 --> 00:49:04,270
from the preface is here and it gets the

00:49:02,250 --> 00:49:07,030
environment combo of based on

00:49:04,270 --> 00:49:10,330
capabilities and whether or not it's for

00:49:07,030 --> 00:49:13,990
the remote and the CID and so we can

00:49:10,330 --> 00:49:18,190
just go ahead and change something here

00:49:13,990 --> 00:49:20,020
saying hello world press safe you see

00:49:18,190 --> 00:49:24,300
that it was automatically we compiled

00:49:20,020 --> 00:49:24,300
and if we now run the test again

00:49:26,310 --> 00:49:32,310
the Chrome browser starts out small test

00:49:29,520 --> 00:49:35,240
goes and there we go we have changed the

00:49:32,310 --> 00:49:38,910
spec reporter to have in hello world

00:49:35,240 --> 00:49:42,060
output and this you can do with pretty

00:49:38,910 --> 00:49:44,910
much every reporter that we have every

00:49:42,060 --> 00:49:49,830
service that we have and every utility

00:49:44,910 --> 00:49:51,420
thing that we have and you just start

00:49:49,830 --> 00:49:54,360
your what you watch your files you start

00:49:51,420 --> 00:49:56,970
chromedriver I can even show an example

00:49:54,360 --> 00:50:01,580
without from driver as Evan mentioned

00:49:56,970 --> 00:50:01,580
red level and run with two protocols

00:50:02,150 --> 00:50:06,660
using puppeteer so if I close up Chrome

00:50:06,240 --> 00:50:08,730
driver

00:50:06,660 --> 00:50:11,520
there's no driver listening on reptile

00:50:08,730 --> 00:50:14,880
plants anymore and web double is smart

00:50:11,520 --> 00:50:20,400
enough to detect this and still actually

00:50:14,880 --> 00:50:22,560
not open the browser because it wants to

00:50:20,400 --> 00:50:25,380
connect to local host and port for

00:50:22,560 --> 00:50:27,150
perform so setting this essentially says

00:50:25,380 --> 00:50:29,850
reputable hey I want to connect to web

00:50:27,150 --> 00:50:32,910
driver server but since I don't have

00:50:29,850 --> 00:50:35,160
that I comment this out and now web

00:50:32,910 --> 00:50:38,130
turbo has no information to connect to

00:50:35,160 --> 00:50:43,500
and use this puppeteer and in the hood

00:50:38,130 --> 00:50:46,040
to run Chrome with puppeteer and this

00:50:43,500 --> 00:50:49,740
takes a little bit longer it just Chrome

00:50:46,040 --> 00:50:52,260
styling foam with puppeteer is not that

00:50:49,740 --> 00:50:55,290
fast but it does the same

00:50:52,260 --> 00:50:58,350
it runs Chrome with the same commands

00:50:55,290 --> 00:51:01,820
that we use of red tiger but using the

00:50:58,350 --> 00:51:01,820
contact was for a call

00:51:04,110 --> 00:51:30,270
that's essentially it

00:51:06,300 --> 00:51:30,270
any questions to that awesome and I can

00:51:31,510 --> 00:51:34,649
[Music]

00:51:36,180 --> 00:51:47,049
go back to the slides if we look if we

00:51:43,089 --> 00:51:49,299
take a look into the issues I think also

00:51:47,049 --> 00:51:51,339
as well if you if you want to start

00:51:49,299 --> 00:51:53,829
working on the issue make sure that you

00:51:51,339 --> 00:51:56,289
make a note that you know you are taking

00:51:53,829 --> 00:51:59,079
this on and I'm assigning that to you

00:51:56,289 --> 00:52:01,479
otherwise will be more than one person

00:51:59,079 --> 00:52:04,449
works from the same issue and this might

00:52:01,479 --> 00:52:07,329
be confusing and we you know someone's

00:52:04,449 --> 00:52:09,579
work would be for a reason so it's just

00:52:07,329 --> 00:52:11,859
a regular issue make sure you you

00:52:09,579 --> 00:52:14,949
comment on it and say hey I'm taking

00:52:11,859 --> 00:52:21,430
this on and working on it so I can sign

00:52:14,949 --> 00:52:25,209
it to you but essentially let's say look

00:52:21,430 --> 00:52:31,059
at you the first time is only something

00:52:25,209 --> 00:52:33,969
that is really well good to start is if

00:52:31,059 --> 00:52:35,829
you want to start with I guess I guess a

00:52:33,969 --> 00:52:37,569
really good way to start looking into

00:52:35,829 --> 00:52:40,569
the packages and I'm standing the code

00:52:37,569 --> 00:52:44,229
is and help with this specific ticket

00:52:40,569 --> 00:52:46,959
and we're we're looking into someone who

00:52:44,229 --> 00:52:50,410
helps us documenting the weekly files

00:52:46,959 --> 00:52:53,349
the weepies of every project some

00:52:50,410 --> 00:52:55,779
project that we have so if we're looking

00:52:53,349 --> 00:53:00,160
into these packages you will see that

00:52:55,779 --> 00:53:03,819
for instance wo- ela has almost no

00:53:00,160 --> 00:53:06,939
documentation to it it would be helpful

00:53:03,819 --> 00:53:09,729
for people for users to understand what

00:53:06,939 --> 00:53:10,929
this package is doing and so you it

00:53:09,729 --> 00:53:13,539
would be great if someone could write

00:53:10,929 --> 00:53:18,670
some external documentation how to run

00:53:13,539 --> 00:53:22,179
specific commands or how to what the

00:53:18,670 --> 00:53:27,429
commands are actually we could orient

00:53:22,179 --> 00:53:29,700
ourselves to pretty much copy and paste

00:53:27,429 --> 00:53:32,820
what we have here

00:53:29,700 --> 00:53:36,080
because I guess it makes sense to yeah

00:53:32,820 --> 00:53:39,000
we have all this documentation here and

00:53:36,080 --> 00:53:41,460
someone could just you know copy the

00:53:39,000 --> 00:53:44,970
content from here and move it into the

00:53:41,460 --> 00:53:50,940
readme of the CLI package so whenever

00:53:44,970 --> 00:53:53,610
someone looks on NPM and looks for the

00:53:50,940 --> 00:53:58,460
wao CLI package he has some more

00:53:53,610 --> 00:53:58,460
information than just this little note

00:54:01,370 --> 00:54:08,130
furthermore they're like the WI logger

00:54:05,120 --> 00:54:10,350
well it it has a will like a good

00:54:08,130 --> 00:54:13,440
description of how you use this internal

00:54:10,350 --> 00:54:15,180
tool and how you can work with it but

00:54:13,440 --> 00:54:17,640
they're like all the packages where this

00:54:15,180 --> 00:54:19,860
is not really well described I would say

00:54:17,640 --> 00:54:24,840
that we do have protocols is well spread

00:54:19,860 --> 00:54:27,870
could see all the services are usually

00:54:24,840 --> 00:54:30,480
well described because we we copy the

00:54:27,870 --> 00:54:32,820
content from the wheat meat into our

00:54:30,480 --> 00:54:34,620
documentation page so it this is this

00:54:32,820 --> 00:54:37,560
automatically will be released in the

00:54:34,620 --> 00:54:39,600
website but for packages that we use

00:54:37,560 --> 00:54:40,320
internally for instance the media

00:54:39,600 --> 00:54:43,710
conflict

00:54:40,320 --> 00:54:46,170
it has also almost no description and we

00:54:43,710 --> 00:54:50,130
don't have like that they're they're

00:54:46,170 --> 00:54:52,320
different way so you can document that I

00:54:50,130 --> 00:54:54,180
think the most important part is how is

00:54:52,320 --> 00:54:56,190
documenting the interfaces that this

00:54:54,180 --> 00:54:58,680
package provides so if someone wants to

00:54:56,190 --> 00:55:04,050
use it internally to build a feature he

00:54:58,680 --> 00:55:06,390
has some information cue to work on this

00:55:04,050 --> 00:55:08,220
would be bad so there are multiple you

00:55:06,390 --> 00:55:13,140
know independent contributions that are

00:55:08,220 --> 00:55:16,350
based on this ticket another one that is

00:55:13,140 --> 00:55:19,740
has a fairly high level scope a new

00:55:16,350 --> 00:55:23,700
level scope is the issue on how to move

00:55:19,740 --> 00:55:26,700
the docs to dr. sorrows the webdiver

00:55:23,700 --> 00:55:28,290
project uses tacos arrows io to build

00:55:26,700 --> 00:55:31,950
the documentation page and they have

00:55:28,290 --> 00:55:34,640
recently released the version two to it

00:55:31,950 --> 00:55:40,320
which I think might be already out of

00:55:34,640 --> 00:55:42,930
the beta state because it don't see any

00:55:40,320 --> 00:55:43,650
notification on that and here anymore so

00:55:42,930 --> 00:55:46,079
we want to

00:55:43,650 --> 00:55:48,779
also update all other communication to

00:55:46,079 --> 00:55:55,940
use docker service - so you can have us

00:55:48,779 --> 00:55:55,940
here on that what else

00:55:59,530 --> 00:56:04,610
there's another documentation on how to

00:56:02,270 --> 00:56:06,500
run tests in connections

00:56:04,610 --> 00:56:10,060
this is already well described because

00:56:06,500 --> 00:56:12,620
we have the Jasmine boilerplate that

00:56:10,060 --> 00:56:15,800
already uses github actions to run

00:56:12,620 --> 00:56:21,220
whatever tests if you have an example

00:56:15,800 --> 00:56:21,220
here checking out the code installing

00:56:22,240 --> 00:56:29,710
it's going puppeteer know installing IBM

00:56:25,310 --> 00:56:33,430
using NPM install the frigid project and

00:56:29,710 --> 00:56:33,430
then run the command

00:56:37,730 --> 00:56:47,990
well yeah there's a issue on the newer

00:56:44,300 --> 00:56:51,050
reporter that cannot it has a problem

00:56:47,990 --> 00:56:54,310
when the death tolls protocol is news it

00:56:51,050 --> 00:56:57,140
seems to not image certain information

00:56:54,310 --> 00:56:59,980
this could be also something that

00:56:57,140 --> 00:56:59,980
someone can work on

00:57:14,110 --> 00:57:21,170
feel free it does anyone have questions

00:57:17,240 --> 00:57:28,270
to one of the issues feel free to unmute

00:57:21,170 --> 00:57:28,270
yourself and and just say something

00:57:52,609 --> 00:58:09,720
think they're already creating the poll

00:57:55,190 --> 00:58:15,109
questions it's awesome oh yeah there's

00:58:09,720 --> 00:58:18,720
also we also have some other packages

00:58:15,109 --> 00:58:21,450
like the expectable their search library

00:58:18,720 --> 00:58:24,210
that we embed into the test runner since

00:58:21,450 --> 00:58:26,490
version 6 this is less than a different

00:58:24,210 --> 00:58:29,970
composite or EB cuz it has that many

00:58:26,490 --> 00:58:33,060
dependencies to other packages so here

00:58:29,970 --> 00:58:37,170
we have for instance the code coverage

00:58:33,060 --> 00:58:40,190
of 63% which is way below expectations

00:58:37,170 --> 00:58:43,440
the main repository I think has over 99%

00:58:40,190 --> 00:58:45,900
so having a good coverage to ski if we

00:58:43,440 --> 00:58:47,730
want to release with confidence so you

00:58:45,900 --> 00:58:50,550
can just you know click on this code

00:58:47,730 --> 00:58:53,579
cough button which will tell you the

00:58:50,550 --> 00:58:56,640
areas where we have not enough coverage

00:58:53,579 --> 00:58:59,490
to click you on sauce and then you can

00:58:56,640 --> 00:59:02,280
see how much percent is already covered

00:58:59,490 --> 00:59:05,690
and I think the mattress don't have a

00:59:02,280 --> 00:59:05,690
lot of coverage you see

00:59:05,720 --> 00:59:15,230
this function this function has no

00:59:10,549 --> 00:59:21,289
coverage at all so you can use you can

00:59:15,230 --> 00:59:23,119
use this to make to to have testing this

00:59:21,289 --> 00:59:25,700
part of the code because it's totally

00:59:23,119 --> 00:59:28,039
not test at all and every single you

00:59:25,700 --> 00:59:31,730
know contribution to code coverage is

00:59:28,039 --> 00:59:33,589
super important and helps us to release

00:59:31,730 --> 00:59:35,450
the package with much more confidence

00:59:33,589 --> 00:59:37,880
like I know with the amount of tests

00:59:35,450 --> 00:59:39,980
that we have in with the veil that it is

00:59:37,880 --> 00:59:42,650
very unlikely that we break anything if

00:59:39,980 --> 00:59:45,289
the tests are passing and if there if we

00:59:42,650 --> 00:59:47,960
still introduced a problem or if we

00:59:45,289 --> 00:59:49,789
still introduce a regression then it's

00:59:47,960 --> 00:59:52,240
it's our fault might not why I need the

00:59:49,789 --> 00:59:52,240
test point

00:59:53,420 --> 01:00:02,280
and maybe can also go a little into the

00:59:58,100 --> 01:00:15,390
specific tests in general and so let me

01:00:02,280 --> 01:00:18,150
switch back to my IDE structure so we

01:00:15,390 --> 01:00:20,850
have a bunch of test Asst Irvine has

01:00:18,150 --> 01:00:23,670
described that you can use to make sure

01:00:20,850 --> 01:00:26,190
that you know you can run certain types

01:00:23,670 --> 01:00:30,090
of the code or you can just test if your

01:00:26,190 --> 01:00:33,630
changes are working in general every sub

01:00:30,090 --> 01:00:36,410
package has the tests folder where you

01:00:33,630 --> 01:00:41,490
see tests for every specific file

01:00:36,410 --> 01:00:44,220
usually you see for every file a test to

01:00:41,490 --> 01:00:47,330
it in the test for fuller so for YouTube

01:00:44,220 --> 01:00:50,430
chairs there's YouTube's test chairs and

01:00:47,330 --> 01:00:54,300
in the stress value you see that we

01:00:50,430 --> 01:00:57,810
write tests using just as test remember

01:00:54,300 --> 01:01:01,200
and you can just go ahead and you know

01:00:57,810 --> 01:01:05,120
take some code and write essentially

01:01:01,200 --> 01:01:08,040
test boy those are the unit tests

01:01:05,120 --> 01:01:10,470
usually yes Lin test should if you

01:01:08,040 --> 01:01:12,540
should work out of the box if you use an

01:01:10,470 --> 01:01:15,900
IDE that supports it so if I add a

01:01:12,540 --> 01:01:17,730
semicolon which is against our coding

01:01:15,900 --> 01:01:20,280
standards or not coding somebody comes

01:01:17,730 --> 01:01:22,830
our way how we write the code in this

01:01:20,280 --> 01:01:26,160
project then it will tell you

01:01:22,830 --> 01:01:29,420
immediately the error and the problem in

01:01:26,160 --> 01:01:34,580
your IDE if and if not you can always

01:01:29,420 --> 01:01:43,170
run if I save this you can always run

01:01:34,580 --> 01:01:47,070
NPM run tests know this is one directory

01:01:43,170 --> 01:01:52,500
so I go back in the main NPM run tests

01:01:47,070 --> 01:01:54,960
and we use tests via switch so was this

01:01:52,500 --> 01:01:58,620
will run the linter for the whole

01:01:54,960 --> 01:02:02,150
project it should hopefully file my

01:01:58,620 --> 01:02:02,150
problem that I have introduced there

01:02:05,090 --> 01:02:14,160
there we go extra semicolon in this test

01:02:09,780 --> 01:02:16,490
file on line 79 if we move this we're

01:02:14,160 --> 01:02:16,490
good to go

01:02:16,610 --> 01:02:23,010
then you if you want to run the specific

01:02:19,980 --> 01:02:24,450
unit test let's write and say you want

01:02:23,010 --> 01:02:27,810
to add one specific test for your

01:02:24,450 --> 01:02:30,120
feature I always go ahead and say okay

01:02:27,810 --> 01:02:33,150
why to test that I only want to execute

01:02:30,120 --> 01:02:36,180
so I added with tested on me and then I

01:02:33,150 --> 01:02:42,510
write some some useful description of

01:02:36,180 --> 01:02:46,850
the test and say all right here's my

01:02:42,510 --> 01:02:54,660
tests and I just say from Zola look

01:02:46,850 --> 01:02:56,940
let's go and while I'm developing

01:02:54,660 --> 01:02:59,640
actually I never care about Iceland and

01:02:56,940 --> 01:03:02,070
other things I just write code and fix

01:02:59,640 --> 01:03:04,710
all these little issues at the end so we

01:03:02,070 --> 01:03:08,430
have one edit one single test in one of

01:03:04,710 --> 01:03:11,580
the stop packages and what you don't

01:03:08,430 --> 01:03:14,250
want is to run unit tests you to all

01:03:11,580 --> 01:03:16,710
packages at the same time because that

01:03:14,250 --> 01:03:18,510
will just take a minute and I want to

01:03:16,710 --> 01:03:21,030
make quick changes and see if I you in

01:03:18,510 --> 01:03:24,840
tests of that so what you can do is you

01:03:21,030 --> 01:03:27,960
you suggest CLI to exactly address your

01:03:24,840 --> 01:03:31,920
specific test and so what you can do is

01:03:27,960 --> 01:03:33,870
NP X so execute just which will

01:03:31,920 --> 01:03:37,610
automatically use the chest that you

01:03:33,870 --> 01:03:41,850
installed with red Camaro and you say

01:03:37,610 --> 01:03:46,350
execute the test of the dummy yo CLI

01:03:41,850 --> 01:03:49,080
package in the UTS fire and since I want

01:03:46,350 --> 01:03:51,750
to see how I progress in writing my test

01:03:49,080 --> 01:03:57,110
I want to watch my changes with the

01:03:51,750 --> 01:04:02,730
watch argument and since we always

01:03:57,110 --> 01:04:06,390
measure the coverage you can ignore that

01:04:02,730 --> 01:04:09,120
and just silent that by saying coverage

01:04:06,390 --> 01:04:13,220
report is air cough so this will not

01:04:09,120 --> 01:04:15,750
create a huge list of all the files that

01:04:13,220 --> 01:04:16,380
then it doesn't take the conference from

01:04:15,750 --> 01:04:18,660
all files

01:04:16,380 --> 01:04:19,860
it just takes it

01:04:18,660 --> 01:04:22,380
just say it doesn't take the coverage

01:04:19,860 --> 01:04:23,880
along edges for the reporting is really

01:04:22,380 --> 01:04:27,630
minimal so that you can see everything

01:04:23,880 --> 01:04:30,690
in one screen so everyone this it will

01:04:27,630 --> 01:04:32,550
only run this test that I have sent test

01:04:30,690 --> 01:04:34,500
on only everything that I have here

01:04:32,550 --> 01:04:38,090
everything else is will be skipped and

01:04:34,500 --> 01:04:38,090
we see this in here

01:04:40,840 --> 01:04:50,140
takes a bite while and then I see my

01:04:47,340 --> 01:04:53,050
some useful description and asses but I

01:04:50,140 --> 01:04:58,420
don't see my hello world let's see if I

01:04:53,050 --> 01:05:02,160
around us again okay in that sense I

01:04:58,420 --> 01:05:06,010
sometimes also just comment things out

01:05:02,160 --> 01:05:11,020
because they don't have enough display

01:05:06,010 --> 01:05:16,630
here so just doing commenting every

01:05:11,020 --> 01:05:19,450
other test out and I see everything that

01:05:16,630 --> 01:05:23,890
I have here so now I can write my tests

01:05:19,450 --> 01:05:30,850
and say use the gist assertion to say

01:05:23,890 --> 01:05:35,670
like expect one to be one that should

01:05:30,850 --> 01:05:35,670
pass but if I say one to be too

01:05:37,040 --> 01:05:46,550
it's a thing and yeah tix takes a long

01:05:43,580 --> 01:05:49,370
time with it because it creates coverage

01:05:46,550 --> 01:05:50,060
to finally move that your coverage

01:05:49,370 --> 01:05:59,300
directory

01:05:50,060 --> 01:06:01,850
I hope it's easier quicker yeah that's a

01:05:59,300 --> 01:06:05,330
that's a problem of having a lot of unit

01:06:01,850 --> 01:06:07,730
test files take so long to get the

01:06:05,330 --> 01:06:10,090
coverage but you get the idea that you

01:06:07,730 --> 01:06:12,920
know now you can work on your individual

01:06:10,090 --> 01:06:15,410
function that you're right and one of

01:06:12,920 --> 01:06:17,180
the things that I like to do is if we

01:06:15,410 --> 01:06:19,640
just take a random function out here of

01:06:17,180 --> 01:06:23,870
the class let's say something that's

01:06:19,640 --> 01:06:29,530
reasonable of size let's say this

01:06:23,870 --> 01:06:32,770
function I usually copy it into my test

01:06:29,530 --> 01:06:35,360
so I have the code that I want to test

01:06:32,770 --> 01:06:38,570
at the same time of writing the test so

01:06:35,360 --> 01:06:42,160
I can exactly do execute it in a way

01:06:38,570 --> 01:06:46,340
that it returns an expected value and

01:06:42,160 --> 01:06:50,930
then I can exactly see how I can cover

01:06:46,340 --> 01:06:52,700
every line it really helps me you know

01:06:50,930 --> 01:06:54,920
to not have to switch back and forth

01:06:52,700 --> 01:06:57,080
between files which takes a lot of time

01:06:54,920 --> 01:06:59,660
I want to see the code that I'm testing

01:06:57,080 --> 01:07:01,640
at the same time while on my tests which

01:06:59,660 --> 01:07:03,770
is perfectly personal preference but it

01:07:01,640 --> 01:07:08,660
might help you to you know Whiteley's

01:07:03,770 --> 01:07:12,080
tehsil bit faster so in at the end we

01:07:08,660 --> 01:07:14,570
enable all tests again run it and make

01:07:12,080 --> 01:07:19,840
sure that running these tests in a row

01:07:14,570 --> 01:07:19,840
also passes and there we go

01:07:20,650 --> 01:07:28,220
every do you know anything else I could

01:07:22,700 --> 01:07:34,450
look into no not right now because I'm

01:07:28,220 --> 01:07:34,450
still watching a black screen so okay

01:07:38,790 --> 01:07:43,860
but let me think of something in the

01:07:41,710 --> 01:07:43,860
meantime

01:07:45,980 --> 01:08:08,690
I think that for me personally the

01:08:03,920 --> 01:08:10,609
flowcharts are very helpful for when to

01:08:08,690 --> 01:08:16,400
get an idea of where you have to start

01:08:10,609 --> 01:08:19,370
or what you have to look those getting a

01:08:16,400 --> 01:08:21,170
grasp on the BT issued that your issue

01:08:19,370 --> 01:08:25,880
that you're looking at it's all

01:08:21,170 --> 01:08:27,830
sometimes the trickiest part then it's

01:08:25,880 --> 01:08:32,890
like deciphering all the little changes

01:08:27,830 --> 01:08:35,779
in the code and go along

01:08:32,890 --> 01:08:39,219
so I understanding the code how I was

01:08:35,779 --> 01:08:41,690
structured which we've already discussed

01:08:39,219 --> 01:08:43,450
alongside with the flow chart should

01:08:41,690 --> 01:08:45,940
give you a pretty good idea of how to

01:08:43,450 --> 01:08:48,859
wait to get started

01:08:45,940 --> 01:08:52,009
can you see my screen now maybe it works

01:08:48,859 --> 01:08:54,739
now no but it was working fine for the

01:08:52,009 --> 01:08:58,370
others so I think it's a Mme issuing

01:08:54,739 --> 01:09:02,080
okay you wish you can anyone confirm if

01:08:58,370 --> 01:09:02,080
the sharing screen works

01:09:03,380 --> 01:09:13,910
yep I can see your screen Oh perfect

01:09:09,490 --> 01:09:16,120
not currently okay all right then but

01:09:13,910 --> 01:09:18,980
maybe leaving for a little bit to see if

01:09:16,120 --> 01:09:23,630
we can just rejoin the chat session and

01:09:18,980 --> 01:09:26,540
might start working in alright okay so

01:09:23,630 --> 01:09:30,290
yeah I guess that was a good suggestion

01:09:26,540 --> 01:09:33,560
to go through the flow charts and

01:09:30,290 --> 01:09:35,380
someone actually contributed to the

01:09:33,560 --> 01:09:38,450
project which was was really awesome

01:09:35,380 --> 01:09:40,040
someone who liked the slag we and like

01:09:38,450 --> 01:09:41,900
to make the charts and he helped us to

01:09:40,040 --> 01:09:44,900
make these portraits and we were just

01:09:41,900 --> 01:09:48,980
happy to introduce them into our

01:09:44,900 --> 01:09:54,550
documentation page so it has flow charts

01:09:48,980 --> 01:09:59,750
for different kind of one for the CLI

01:09:54,550 --> 01:10:00,860
for the CLI tool where you see the

01:09:59,750 --> 01:10:04,430
different commands that can be executed

01:10:00,860 --> 01:10:13,430
and what this does and so let's say here

01:10:04,430 --> 01:10:15,890
you say wao run and you say weapons will

01:10:13,430 --> 01:10:19,160
one of these commands then there is

01:10:15,890 --> 01:10:21,590
another flow chart here but you can

01:10:19,160 --> 01:10:24,800
click and it shows you what happens if

01:10:21,590 --> 01:10:27,770
you for instance say install if you say

01:10:24,800 --> 01:10:29,980
that your install it asks you for the

01:10:27,770 --> 01:10:34,010
type and the name of the service and

01:10:29,980 --> 01:10:36,740
installs the package using NPM or yarn

01:10:34,010 --> 01:10:38,960
whatever you have installed and then

01:10:36,740 --> 01:10:42,170
tries to add it to your W your conflict

01:10:38,960 --> 01:10:46,010
this needs to be taken like this needs

01:10:42,170 --> 01:10:48,950
to be used carefully because however you

01:10:46,010 --> 01:10:52,460
have formatted the config we could make

01:10:48,950 --> 01:10:54,560
a long search and replace so always

01:10:52,460 --> 01:10:57,400
check if we have done the modification

01:10:54,560 --> 01:11:00,500
to your cupcake file properly but

01:10:57,400 --> 01:11:02,720
essentially it helps you to make to add

01:11:00,500 --> 01:11:04,790
a service without you know making

01:11:02,720 --> 01:11:08,240
changes in the code and we have the

01:11:04,790 --> 01:11:13,220
config command where you know you get a

01:11:08,240 --> 01:11:15,680
bunch of question asked and then based

01:11:13,220 --> 01:11:17,150
on you want to run in sync or not in

01:11:15,680 --> 01:11:21,230
saying it will install

01:11:17,150 --> 01:11:23,150
wo sing or not and if you use it with -

01:11:21,230 --> 01:11:25,159
this yarn that will use the iron to

01:11:23,150 --> 01:11:27,260
install it that you use that package

01:11:25,159 --> 01:11:29,679
venture to inside and then in the other

01:11:27,260 --> 01:11:32,239
place that we accompany and you can

01:11:29,679 --> 01:11:33,860
actually map that directly like the

01:11:32,239 --> 01:11:36,350
person who created that actually looked

01:11:33,860 --> 01:11:39,199
into the code what's happening behind it

01:11:36,350 --> 01:11:42,940
so we can basically see this as like a

01:11:39,199 --> 01:11:48,320
high-level overview about the code data

01:11:42,940 --> 01:11:51,760
on the test execution side we have so

01:11:48,320 --> 01:11:51,760
what's easier to start with

01:11:51,789 --> 01:11:59,150
okay yeah so when you kick off a test in

01:11:55,909 --> 01:12:04,280
repla Oh with the test one arm we have a

01:11:59,150 --> 01:12:07,369
launcher class in the CLI that starts an

01:12:04,280 --> 01:12:09,409
instance a worker instance and depending

01:12:07,369 --> 01:12:11,960
on what kind of runner you have and

01:12:09,409 --> 01:12:14,360
truly we only have two local runner and

01:12:11,960 --> 01:12:16,699
it uses that interface to start an

01:12:14,360 --> 01:12:20,389
instance for the local runner this is a

01:12:16,699 --> 01:12:22,519
process the normal process on your

01:12:20,389 --> 01:12:23,210
machine where a node script is being

01:12:22,519 --> 01:12:25,309
executed

01:12:23,210 --> 01:12:27,590
so think about of if you start with

01:12:25,309 --> 01:12:30,320
there is a test runner yeah and the wao

01:12:27,590 --> 01:12:32,510
process and then for every test that you

01:12:30,320 --> 01:12:35,510
run there's a separated process where

01:12:32,510 --> 01:12:38,679
the test being executed and the local

01:12:35,510 --> 01:12:41,690
runner is responsible for styling this

01:12:38,679 --> 01:12:45,530
for starting this local process and the

01:12:41,690 --> 01:12:48,260
worker and pretty much listens to

01:12:45,530 --> 01:12:50,840
messages that the test runner sense to

01:12:48,260 --> 01:12:53,749
stick to the process and for instance

01:12:50,840 --> 01:12:56,239
now run the test and now get me all the

01:12:53,749 --> 01:12:59,449
results so that we can get all the

01:12:56,239 --> 01:13:02,869
information from the worker and display

01:12:59,449 --> 01:13:05,139
them either in the standard out of the

01:13:02,869 --> 01:13:09,199
test runner or propagate them to the

01:13:05,139 --> 01:13:11,030
services and reporters so there are

01:13:09,199 --> 01:13:13,610
various of messages that you can see in

01:13:11,030 --> 01:13:17,150
the code and we you know the local

01:13:13,610 --> 01:13:22,090
runner posts sends a post message to the

01:13:17,150 --> 01:13:22,090
sub process to start the test run and

01:13:22,329 --> 01:13:28,190
some arguments are being passed into the

01:13:25,010 --> 01:13:30,829
sub process and so if you you know has a

01:13:28,190 --> 01:13:34,039
service that changes capabilities in

01:13:30,829 --> 01:13:35,749
beyond prepare or off your service these

01:13:34,039 --> 01:13:39,889
information are being propagated into

01:13:35,749 --> 01:13:42,469
the worker process so that you can

01:13:39,889 --> 01:13:47,360
change the for instance the connection

01:13:42,469 --> 01:13:49,639
details of a server of your test run

01:13:47,360 --> 01:13:52,849
let's say with the chrome driver service

01:13:49,639 --> 01:13:56,239
or with the atom service we change the

01:13:52,849 --> 01:14:01,159
port and the host man named to connect

01:13:56,239 --> 01:14:03,650
to appium or or prospect for instance or

01:14:01,159 --> 01:14:05,580
chrome chrome when you have that service

01:14:03,650 --> 01:14:09,310
installed

01:14:05,580 --> 01:14:11,530
and yeah then the everyone and put

01:14:09,310 --> 01:14:13,390
everyone ur plug in like a local runner

01:14:11,530 --> 01:14:16,060
or the lamda runner that still

01:14:13,390 --> 01:14:20,170
experimental and to me not usable they

01:14:16,060 --> 01:14:22,210
use the NW run a package to initialize

01:14:20,170 --> 01:14:25,810
the framework to initialize motor

01:14:22,210 --> 01:14:28,150
Jasmine or cucumber and kick off the

01:14:25,810 --> 01:14:30,070
process listening to every events

01:14:28,150 --> 01:14:34,180
propagate these events to the reporter

01:14:30,070 --> 01:14:38,830
and make sure that the process or the

01:14:34,180 --> 01:14:43,170
browser is shut down gracefully and all

01:14:38,830 --> 01:14:43,170
the information of us being properly

01:14:50,690 --> 01:14:58,350
yeah the test execution general either

01:14:53,880 --> 01:15:00,059
with thee this is for the chest one as

01:14:58,350 --> 01:15:03,709
well

01:15:00,059 --> 01:15:03,709
because there's no arc okay

01:15:07,220 --> 01:15:15,300
yeah this is what happens in the at the

01:15:10,020 --> 01:15:18,050
media arena so if the local runner has

01:15:15,300 --> 01:15:21,180
started a worker process and starts

01:15:18,050 --> 01:15:24,600
executing it starts executing the runner

01:15:21,180 --> 01:15:26,490
which essentially initial aides all the

01:15:24,600 --> 01:15:31,230
test reporters it

01:15:26,490 --> 01:15:33,420
it's the frameworks and the services so

01:15:31,230 --> 01:15:38,180
you know if you said a test framework

01:15:33,420 --> 01:15:41,670
it's marker and it loads the Wi-Fi map

01:15:38,180 --> 01:15:47,510
it issues all the services if before

01:15:41,670 --> 01:15:53,400
session as well as II before before and

01:15:47,510 --> 01:15:56,370
then it runs the test framework so the

01:15:53,400 --> 01:15:59,910
test River let's say the endometrium oka

01:15:56,370 --> 01:16:02,580
framework has a run function in it and

01:15:59,910 --> 01:16:08,550
this one function will initialize motor

01:16:02,580 --> 01:16:11,130
end and starts the browser and when we

01:16:08,550 --> 01:16:13,080
start the browser we check if there's

01:16:11,130 --> 01:16:15,570
any indication to style it with wreck

01:16:13,080 --> 01:16:17,610
diver if you have you know a host name

01:16:15,570 --> 01:16:20,250
and the port setup in your config file

01:16:17,610 --> 01:16:25,110
then we know we want to connect to a web

01:16:20,250 --> 01:16:27,720
driver a server and if there's no driver

01:16:25,110 --> 01:16:30,270
running and there's no indication for a

01:16:27,720 --> 01:16:32,260
driver then we started to run the

01:16:30,270 --> 01:16:35,530
session without you

01:16:32,260 --> 01:16:37,630
and we initialize the browser global

01:16:35,530 --> 01:16:40,090
with the browser variable to the global

01:16:37,630 --> 01:16:43,330
instance so you can just like browser

01:16:40,090 --> 01:16:45,670
command in your test you don't have to

01:16:43,330 --> 01:16:47,560
you know set up the session for yourself

01:16:45,670 --> 01:16:53,050
it's all done by the test runner I did

01:16:47,560 --> 01:16:55,840
wao run a package and then it checks if

01:16:53,050 --> 01:16:57,790
the tests have been run successfully it

01:16:55,840 --> 01:17:02,650
propagates the messages through the

01:16:57,790 --> 01:17:04,840
porters and back to the main process to

01:17:02,650 --> 01:17:07,110
show the information induced an adult

01:17:04,840 --> 01:17:07,110
and

01:17:08,540 --> 01:17:18,200
that's almost a princess Amory and kills

01:17:14,030 --> 01:17:24,080
the worker session at the end so it's

01:17:18,200 --> 01:17:26,600
the W the W day will CLI kicks off the

01:17:24,080 --> 01:17:29,480
local runner the local runner kicks off

01:17:26,600 --> 01:17:32,720
the runner and the runner keeps them off

01:17:29,480 --> 01:17:35,720
the framework it's it's it is

01:17:32,720 --> 01:17:39,140
complicated for sure but it it needs all

01:17:35,720 --> 01:17:41,570
these layers to properly have abstract

01:17:39,140 --> 01:17:44,350
the complexity away and has this every

01:17:41,570 --> 01:17:47,000
have to separate into multiple different

01:17:44,350 --> 01:17:49,010
packages that we can you know we place

01:17:47,000 --> 01:17:51,950
with each other so we can replace every

01:17:49,010 --> 01:17:55,330
framework from true comma to mater by

01:17:51,950 --> 01:17:58,760
just you know modifying conflict we can

01:17:55,330 --> 01:18:01,370
we want to be able to just allow you to

01:17:58,760 --> 01:18:03,830
run test locally or lambda function at

01:18:01,370 --> 01:18:05,240
some day where you can you know you

01:18:03,830 --> 01:18:08,090
should be essentially be able to run

01:18:05,240 --> 01:18:13,220
thousands s apparel without you're using

01:18:08,090 --> 01:18:15,590
your CPU on your machine so that's why

01:18:13,220 --> 01:18:17,780
it needs these layering and all this

01:18:15,590 --> 01:18:19,460
complex function but what you these

01:18:17,780 --> 01:18:22,370
aspired to do is just you know follow

01:18:19,460 --> 01:18:25,520
along the code it's like a idea about

01:18:22,370 --> 01:18:28,450
one every package string and then see

01:18:25,520 --> 01:18:30,350
where you can apply the changes to

01:18:28,450 --> 01:18:33,140
interesting point question because

01:18:30,350 --> 01:18:37,550
whenever you will pick up an issue

01:18:33,140 --> 01:18:41,000
there's it has to do with a ship we have

01:18:37,550 --> 01:18:43,370
or a servers that we have then you'll

01:18:41,000 --> 01:18:45,830
notice that everything package requires

01:18:43,370 --> 01:18:49,010
its own expertise for example somebody

01:18:45,830 --> 01:18:51,920
that's working on beef cue cover freight

01:18:49,010 --> 01:18:54,500
work has to have some cucumber knowledge

01:18:51,920 --> 01:18:55,910
if you are gonna working they're gonna

01:18:54,500 --> 01:18:58,760
be working on the reef border for

01:18:55,910 --> 01:19:01,060
example a little reporter then you will

01:18:58,760 --> 01:19:04,180
have to know a little bit about a lure

01:19:01,060 --> 01:19:07,520
and this is for all packages this way

01:19:04,180 --> 01:19:09,980
yeah good point yeah absolutely

01:19:07,520 --> 01:19:12,980
and like I don't I haven't when you go

01:19:09,980 --> 01:19:15,350
to the lure reporter and to cucumber a

01:19:12,980 --> 01:19:17,300
lot and I always need I always hope that

01:19:15,350 --> 01:19:19,490
someone else and you know champion that

01:19:17,300 --> 01:19:21,409
has more more knowledge about cucumber

01:19:19,490 --> 01:19:25,580
and the lower reporter than me

01:19:21,409 --> 01:19:27,380
yeah so you know you can if you like the

01:19:25,580 --> 01:19:28,969
lure butter you can just look into what

01:19:27,380 --> 01:19:31,070
they lure food is doing I was out with

01:19:28,969 --> 01:19:33,800
the box and he'll make you look for the

01:19:31,070 --> 01:19:37,100
better over time that would be awesome

01:19:33,800 --> 01:19:40,100
and here's again a general project

01:19:37,100 --> 01:19:42,679
overview which is really well described

01:19:40,100 --> 01:19:46,699
so you have the as I mention before the

01:19:42,679 --> 01:19:48,920
CI which kicks off the test if you say

01:19:46,699 --> 01:19:53,270
tell me here you go run and you apply a

01:19:48,920 --> 01:19:55,429
config file then it uses the longshot to

01:19:53,270 --> 01:19:58,520
get information from your config file

01:19:55,429 --> 01:20:01,969
and paste on your run information which

01:19:58,520 --> 01:20:05,270
is currently always local it starts WI

01:20:01,969 --> 01:20:07,100
runner and that one realises the

01:20:05,270 --> 01:20:09,710
services that you have in your country

01:20:07,100 --> 01:20:12,320
file the reporters that you have in your

01:20:09,710 --> 01:20:14,989
company file and the framework that you

01:20:12,320 --> 01:20:17,360
define to run your testing and then it

01:20:14,989 --> 01:20:19,790
uses initialize the session with

01:20:17,360 --> 01:20:22,610
Brattleboro and attaches the browser

01:20:19,790 --> 01:20:26,510
instance to the global scope so he can

01:20:22,610 --> 01:20:28,750
run use it in a test that's pretty much

01:20:26,510 --> 01:20:28,750
it

01:20:41,450 --> 01:20:43,510
you

01:20:49,820 --> 01:20:54,380
anyone with questions to specific area

01:20:53,190 --> 01:20:58,590
of reptile bio

01:20:54,380 --> 01:21:02,600
no matter if it's code or you know how

01:20:58,590 --> 01:21:06,980
we create the documentation or anything

01:21:02,600 --> 01:21:06,980
to the contribution process

01:21:13,450 --> 01:21:26,930
if not I would use a chance to to go

01:21:21,500 --> 01:21:29,330
back into the IDE and deploy or work on

01:21:26,930 --> 01:21:33,140
the documentation or say something about

01:21:29,330 --> 01:21:38,270
the documentation page so whatever has

01:21:33,140 --> 01:21:41,300
the documentation in the code we have in

01:21:38,270 --> 01:21:44,150
the Doc's directory all the

01:21:41,300 --> 01:21:49,660
documentation pages that you see in web

01:21:44,150 --> 01:21:49,660
Davos - guide I think that's it

01:21:49,960 --> 01:21:57,170
everything that you see in when you

01:21:54,110 --> 01:22:01,850
click on the docs link on the top so we

01:21:57,170 --> 01:22:04,010
have the ABI markdown the documentation

01:22:01,850 --> 01:22:07,580
for custom services it's all written in

01:22:04,010 --> 01:22:17,050
in markdown we have two flowcharts here

01:22:07,580 --> 01:22:20,900
and we have the ABI experimentation true

01:22:17,050 --> 01:22:24,200
and then that's pretty much it

01:22:20,900 --> 01:22:29,600
what there are we have scripts that then

01:22:24,200 --> 01:22:32,510
look into the web develop a coach for

01:22:29,600 --> 01:22:35,330
and looks scripts all the commands that

01:22:32,510 --> 01:22:37,460
we have defined and pretty much creates

01:22:35,330 --> 01:22:40,460
out of this information the

01:22:37,460 --> 01:22:43,400
documentation for specific amat so for

01:22:40,460 --> 01:22:48,920
instance here this is the implementation

01:22:43,400 --> 01:22:50,870
for the custom selectors ecology and on

01:22:48,920 --> 01:22:54,380
top of the file we have a comment block

01:22:50,870 --> 01:22:57,640
where we have the documentation another

01:22:54,380 --> 01:23:01,750
code example and some neat information

01:22:57,640 --> 01:23:04,910
for parameters and the return values and

01:23:01,750 --> 01:23:07,640
reptile uses all these information to

01:23:04,910 --> 01:23:15,770
generate the documentation as you can

01:23:07,640 --> 01:23:18,560
see it in the docs so you see so uses

01:23:15,770 --> 01:23:23,380
this it parses this example block and

01:23:18,560 --> 01:23:27,110
creates a nice section with highlighted

01:23:23,380 --> 01:23:30,140
code snippet and to show how to use the

01:23:27,110 --> 01:23:32,540
command and we use the parameter section

01:23:30,140 --> 01:23:35,300
here to create this little table that

01:23:32,540 --> 01:23:40,700
tells you what kind of parameters I

01:23:35,300 --> 01:23:45,230
expected and what they do so this is

01:23:40,700 --> 01:23:48,530
actually interesting we see we see here

01:23:45,230 --> 01:23:50,900
that there is no description for the

01:23:48,530 --> 01:23:54,500
strategy name and the strategy argument

01:23:50,900 --> 01:23:56,390
and so someone could you know take this

01:23:54,500 --> 01:24:00,410
and add the documentation to it by just

01:23:56,390 --> 01:24:03,230
modifying this file and adding the

01:24:00,410 --> 01:24:06,710
proper documentation through this

01:24:03,230 --> 01:24:12,620
parameter so it's a strategy name should

01:24:06,710 --> 01:24:17,570
be a strategy describe

01:24:12,620 --> 01:24:21,580
spreadsheet name for the custom the

01:24:17,570 --> 01:24:23,860
customs strategy flight

01:24:21,580 --> 01:24:26,890
I don't know something like that and for

01:24:23,860 --> 01:24:28,630
the stretchy argument as you can see

01:24:26,890 --> 01:24:33,460
here this is a function

01:24:28,630 --> 01:24:36,640
so actually we should know this is any

01:24:33,460 --> 01:24:40,090
argument because once we add a selector

01:24:36,640 --> 01:24:42,610
strategy give it a name we apply a

01:24:40,090 --> 01:24:46,180
custom function to it that will actually

01:24:42,610 --> 01:24:47,920
be executed in the browser so this can

01:24:46,180 --> 01:24:50,890
be any argument you can pass in the

01:24:47,920 --> 01:24:53,230
number to give you the third element of

01:24:50,890 --> 01:24:56,800
something depending on what your custom

01:24:53,230 --> 01:25:04,210
search is and then you can see here are

01:24:56,800 --> 01:25:09,730
the parameters that are applied to that

01:25:04,210 --> 01:25:18,400
applies to strategy right to the

01:25:09,730 --> 01:25:24,430
strategy to the strategy so we can save

01:25:18,400 --> 01:25:27,490
this and now if we build the docs and

01:25:24,430 --> 01:25:29,260
you can do this by going into the

01:25:27,490 --> 01:25:34,050
website directory where our website is

01:25:29,260 --> 01:25:34,050
located and just run NPM start

01:25:34,490 --> 01:25:42,710
it now compiles all the Mactan files it

01:25:40,060 --> 01:25:47,080
downloads the service witness from

01:25:42,710 --> 01:25:53,510
external services the compliance the SAS

01:25:47,080 --> 01:25:58,390
scripts or the SAS tiles and starts a

01:25:53,510 --> 01:26:03,440
website on localhost 3000 so I will

01:25:58,390 --> 01:26:07,610
change my screen to look into the

01:26:03,440 --> 01:26:10,490
browser so you should now see the

01:26:07,610 --> 01:26:14,780
browser and this is now the website

01:26:10,490 --> 01:26:16,850
running on local 3000 and if we now

01:26:14,780 --> 01:26:19,730
click on API

01:26:16,850 --> 01:26:22,690
and go into the custom dollar for

01:26:19,730 --> 01:26:25,400
function we see now that the

01:26:22,690 --> 01:26:28,790
documentation has been applied to this

01:26:25,400 --> 01:26:32,960
table we can compare to the current

01:26:28,790 --> 01:26:35,990
deployed websites on web developer

01:26:32,960 --> 01:26:38,930
custom dollar sign and we see that this

01:26:35,990 --> 01:26:40,550
table cells are empty and now with the

01:26:38,930 --> 01:26:43,490
change that we made to the specific

01:26:40,550 --> 01:26:47,630
command we have some information about

01:26:43,490 --> 01:26:50,090
the parameters so I don't want to do

01:26:47,630 --> 01:26:53,000
make this change for everyone on this

01:26:50,090 --> 01:26:55,760
car in the workshop they can you know

01:26:53,000 --> 01:26:58,040
make a suggestion of how this

01:26:55,760 --> 01:27:00,470
documentation can look like based on the

01:26:58,040 --> 01:27:03,440
you know example food also free to add

01:27:00,470 --> 01:27:05,830
dot here and some other documentation

01:27:03,440 --> 01:27:09,970
that can be useful for this command and

01:27:05,830 --> 01:27:13,090
make a change for this simple and

01:27:09,970 --> 01:27:22,070
documentation change we can just do this

01:27:13,090 --> 01:27:26,000
let's say we create your branch it check

01:27:22,070 --> 01:27:30,490
out - be to create a new branch and then

01:27:26,000 --> 01:27:31,610
say push my initials and then custom

01:27:30,490 --> 01:27:33,800
dollar

01:27:31,610 --> 01:27:37,910
I think branch name should not start

01:27:33,800 --> 01:27:41,750
with dollar just custom dot change any

01:27:37,910 --> 01:27:46,880
random branch then we'll do then you

01:27:41,750 --> 01:27:49,520
commit your changes that you do to the

01:27:46,880 --> 01:27:53,690
commands check what you have committed

01:27:49,520 --> 01:27:56,900
and then just say I have a descriptive

01:27:53,690 --> 01:27:58,900
message for your commit we don't have

01:27:56,900 --> 01:28:00,950
any rules here like an other project

01:27:58,900 --> 01:28:03,850
because there's we don't have any

01:28:00,950 --> 01:28:09,190
automations around commits messages yet

01:28:03,850 --> 01:28:12,760
so just feel free to say update dots

01:28:09,190 --> 01:28:16,220
we're not seeing these changes I think

01:28:12,760 --> 01:28:19,180
so they all right okay I should inspect

01:28:16,220 --> 01:28:25,460
my IDE thank you for mentioning that

01:28:19,180 --> 01:28:29,390
share screen back to that Ian so again I

01:28:25,460 --> 01:28:30,560
just checked what I want has changed

01:28:29,390 --> 01:28:35,360
then I added

01:28:30,560 --> 01:28:38,240
with get at the file and then now I make

01:28:35,360 --> 01:28:39,830
the commit I have like some shortcuts

01:28:38,240 --> 01:28:47,180
here but essentially it's the same you

01:28:39,830 --> 01:28:50,720
say git commit update dogs and then you

01:28:47,180 --> 01:28:54,680
can push it to your remote branch to you

01:28:50,720 --> 01:28:56,570
to your fork since you don't have excess

01:28:54,680 --> 01:28:58,610
lines to the repository yet if you're

01:28:56,570 --> 01:29:02,210
not the project committee you need to

01:28:58,610 --> 01:29:05,570
use your own for um so just say you know

01:29:02,210 --> 01:29:08,480
if you have you can check your Forks say

01:29:05,570 --> 01:29:12,230
git remote - B if you want to add a fork

01:29:08,480 --> 01:29:15,350
and your voice you can say kids Wii mode

01:29:12,230 --> 01:29:19,040
and then say up stream that's your

01:29:15,350 --> 01:29:21,470
fourth name and then hit enter your kid

01:29:19,040 --> 01:29:25,700
URL from your fork so it would be

01:29:21,470 --> 01:29:28,760
kidnapped um slash user name slash left

01:29:25,700 --> 01:29:29,500
our very own that's usually the URL for

01:29:28,760 --> 01:29:33,380
it

01:29:29,500 --> 01:29:40,070
in my case I'm and can use the main

01:29:33,380 --> 01:29:43,000
repository so I just say git push should

01:29:40,070 --> 01:29:47,800
do the trick oh there we go

01:29:43,000 --> 01:29:47,800
good push set upstream reaching

01:29:47,950 --> 01:29:57,050
Committee for so long before I always

01:29:54,680 --> 01:29:59,510
work in my own fork to be honest I mean

01:29:57,050 --> 01:30:03,680
yeah there's no reason why not you

01:29:59,510 --> 01:30:04,970
continue using your fork I just yeah

01:30:03,680 --> 01:30:09,080
yeah I know

01:30:04,970 --> 01:30:13,460
and then since recently github allows

01:30:09,080 --> 01:30:18,410
gives you the link that sends you to the

01:30:13,460 --> 01:30:25,010
page where you can make your for

01:30:18,410 --> 01:30:30,560
requests interesting me it has no

01:30:25,010 --> 01:30:32,840
changes just different branch CB I think

01:30:30,560 --> 01:30:36,530
for if if you want to show this then you

01:30:32,840 --> 01:30:40,120
have to switch again oh yeah a good

01:30:36,530 --> 01:30:40,120
point stop sharing

01:30:42,069 --> 01:30:44,819
share this

01:30:47,960 --> 01:30:56,150
but well okay didn't it didn't copy this

01:30:53,000 --> 01:31:03,520
properly there we go this is a problem

01:30:56,150 --> 01:31:06,920
on working with this show this is a

01:31:03,520 --> 01:31:13,330
thing that you usually get this is a

01:31:06,920 --> 01:31:18,130
full change so we say update dots to

01:31:13,330 --> 01:31:22,550
custom to the command custom dollar sign

01:31:18,130 --> 01:31:26,659
then make a short description about what

01:31:22,550 --> 01:31:28,489
you have changed say it's a

01:31:26,659 --> 01:31:29,840
documentation change or you have a back

01:31:28,489 --> 01:31:30,980
page so if you have something that

01:31:29,840 --> 01:31:34,909
doesn't apply to it

01:31:30,980 --> 01:31:39,800
just feel free to add a custom a custom

01:31:34,909 --> 01:31:42,080
check box whatever the checklist sends

01:31:39,800 --> 01:31:44,139
us to you know make sure that you've

01:31:42,080 --> 01:31:47,330
read the contributing marked guidelines

01:31:44,139 --> 01:31:50,659
the added tests if necessary for the

01:31:47,330 --> 01:31:53,570
limitation is you do not you have added

01:31:50,659 --> 01:31:55,610
necessary documentation and you have

01:31:53,570 --> 01:31:57,949
added proper tight description which is

01:31:55,610 --> 01:32:00,260
also about to appropriate for a bigger

01:31:57,949 --> 01:32:01,909
role for this type of change and then

01:32:00,260 --> 01:32:05,710
for the comments you can leave this out

01:32:01,909 --> 01:32:05,710
and then

01:32:10,430 --> 01:32:18,140
yeah thank you for joining us I agree I

01:32:14,840 --> 01:32:20,960
think we will you know I will not make

01:32:18,140 --> 01:32:23,090
this the spoiler dress because this is

01:32:20,960 --> 01:32:25,490
something that you could do adding this

01:32:23,090 --> 01:32:28,130
little documentation change which is a

01:32:25,490 --> 01:32:29,630
great first way to entry to contributing

01:32:28,130 --> 01:32:32,780
something to work them out there's a

01:32:29,630 --> 01:32:36,290
bunch of commands if I switch back to

01:32:32,780 --> 01:32:39,350
the IDE there are a bunch of commands

01:32:36,290 --> 01:32:43,600
where we could definitely use some

01:32:39,350 --> 01:32:49,900
better documentation and more examples

01:32:43,600 --> 01:32:54,110
let's say I don't know switch commands

01:32:49,900 --> 01:32:56,720
or in the element part you know we

01:32:54,110 --> 01:32:59,060
usually have one line of description

01:32:56,720 --> 01:33:02,210
that can be enhanced whatever you find

01:32:59,060 --> 01:33:06,650
useful but I hope this will kind of like

01:33:02,210 --> 01:33:08,420
show how you can you know write setup'

01:33:06,650 --> 01:33:11,180
you're the website and run the website

01:33:08,420 --> 01:33:13,510
and see how when your changes to the

01:33:11,180 --> 01:33:22,330
documentation will be apply it

01:33:13,510 --> 01:33:22,330
automatically alright sharing

01:33:22,570 --> 01:33:30,860
Christian yeah I'm not sure if Quinn

01:33:27,440 --> 01:33:32,420
still here I think he already lives but

01:33:30,860 --> 01:33:35,720
he was asking if the video will be

01:33:32,420 --> 01:33:39,050
posted somewhere exactly we will post

01:33:35,720 --> 01:33:40,190
the video on the contributing page on

01:33:39,050 --> 01:33:42,500
webdiver today Oh

01:33:40,190 --> 01:33:47,180
so on the top bar you see your

01:33:42,500 --> 01:33:50,000
contributes link and we well once we get

01:33:47,180 --> 01:33:52,700
the recording we will either upload it

01:33:50,000 --> 01:33:55,610
on YouTube or I think the foundation

01:33:52,700 --> 01:33:58,310
will man will host this video somewhere

01:33:55,610 --> 01:34:12,110
and you will embed that video on that

01:33:58,310 --> 01:34:16,270
contribution page all right so I'm

01:34:12,110 --> 01:34:16,270
guessing still no questions from anyone

01:34:25,810 --> 01:34:58,760
did anyone started to work on this

01:34:28,580 --> 01:35:00,980
specific issue or topic you know Justin

01:34:58,760 --> 01:35:04,100
this started it's going to start

01:35:00,980 --> 01:35:08,239
something will report back if you face

01:35:04,100 --> 01:35:11,680
any issues so that's great they know

01:35:08,239 --> 01:35:14,660
what you will try picking up purchasing

01:35:11,680 --> 01:35:18,739
I was just going through the issues that

01:35:14,660 --> 01:35:20,300
are raised to like I was like thinking I

01:35:18,739 --> 01:35:24,680
will pick up the dev tools well issue

01:35:20,300 --> 01:35:25,790
which is like recently raised like I

01:35:24,680 --> 01:35:32,600
think there was some issue with the

01:35:25,790 --> 01:35:36,170
nightly motion so yes yeah that's right

01:35:32,600 --> 01:35:40,160
any any arm on the step tools

01:35:36,170 --> 01:35:43,010
would be awesome and no and the best

01:35:40,160 --> 01:35:46,070
thing just diet is just write yourself a

01:35:43,010 --> 01:35:48,860
minimal squid that you know runs the dev

01:35:46,070 --> 01:35:49,430
tools package I couldn't let me share my

01:35:48,860 --> 01:35:54,170
screen

01:35:49,430 --> 01:35:56,239
well how my setup usually looks like so

01:35:54,170 --> 01:35:58,880
this might local check out and I you see

01:35:56,239 --> 01:36:02,390
here I filed a B and C which are random

01:35:58,880 --> 01:36:04,700
files that I create for myself and in a

01:36:02,390 --> 01:36:08,989
for instance I use the Deftones package

01:36:04,700 --> 01:36:12,260
to just run the simple script and you

01:36:08,989 --> 01:36:14,090
know if I want to test if detective

01:36:12,260 --> 01:36:16,610
package is able to connect to Firefox I

01:36:14,090 --> 01:36:18,650
can you know just work on this my

01:36:16,610 --> 01:36:20,900
example script and over time these

01:36:18,650 --> 01:36:23,150
scripts evolve and evolve and you know

01:36:20,900 --> 01:36:26,000
it helped me to debug to debug certain

01:36:23,150 --> 01:36:29,510
things it work on certain things I was

01:36:26,000 --> 01:36:33,050
like PJs that have a minimal example to

01:36:29,510 --> 01:36:37,880
connect to faucets I've seen ojs that

01:36:33,050 --> 01:36:41,239
have an example to run some things I

01:36:37,880 --> 01:36:43,790
guess Chrome or Firefox with some binary

01:36:41,239 --> 01:36:44,900
setup you know just as a simple script

01:36:43,790 --> 01:36:48,290
somewhere and they would I had to eat

01:36:44,900 --> 01:36:52,010
that you can always execute like here I

01:36:48,290 --> 01:36:55,250
could just say hey chase and it should

01:36:52,010 --> 01:36:57,920
try to launch Chrome and runs a specific

01:36:55,250 --> 01:37:03,620
scratch maybe it's a good idea to

01:36:57,920 --> 01:37:06,590
actually add these 2d to the project for

01:37:03,620 --> 01:37:07,460
people to just get started with yeah

01:37:06,590 --> 01:37:10,430
absolutely

01:37:07,460 --> 01:37:15,950
um I guess that could be cool to add

01:37:10,430 --> 01:37:18,860
them to the mother trend to the dev

01:37:15,950 --> 01:37:25,930
tools example or a Judy where which what

01:37:18,860 --> 01:37:29,060
would be the best way or a standalone

01:37:25,930 --> 01:37:31,880
folder where we just have some

01:37:29,060 --> 01:37:35,840
standalone scripts that here yeah maybe

01:37:31,880 --> 01:37:37,220
because if you put it separately then I

01:37:35,840 --> 01:37:41,570
think it's clear what they can be used

01:37:37,220 --> 01:37:45,080
for if you put them alongside the

01:37:41,570 --> 01:37:47,960
examples it's something an example it's

01:37:45,080 --> 01:37:48,860
a script that can be used to debug well

01:37:47,960 --> 01:37:57,220
your

01:37:48,860 --> 01:38:00,560
they're working on something hmm yeah

01:37:57,220 --> 01:38:03,440
well I've honestly never done this to

01:38:00,560 --> 01:38:08,540
and it's I think this is very useful to

01:38:03,440 --> 01:38:13,810
do like the simple script here or yeah

01:38:08,540 --> 01:38:17,030
yeah yeah me Mary you know if you

01:38:13,810 --> 01:38:20,990
usually if people like changes they

01:38:17,030 --> 01:38:23,450
sometimes also try to link the packages

01:38:20,990 --> 01:38:25,790
in here to their current projects where

01:38:23,450 --> 01:38:28,940
they're where they discover the problem

01:38:25,790 --> 01:38:32,390
that could get possible - I've never

01:38:28,940 --> 01:38:35,300
done this but there so I don't have a

01:38:32,390 --> 01:38:37,880
documentation for this so if you if you

01:38:35,300 --> 01:38:40,880
work like this and feel free to add the

01:38:37,880 --> 01:38:42,470
documentation to ask for just you know

01:38:40,880 --> 01:38:44,900
just file an issue in with the

01:38:42,470 --> 01:38:47,900
documentation and we can find out where

01:38:44,900 --> 01:38:50,230
it fits into it where where we can put

01:38:47,900 --> 01:38:53,570
it on the web there was an i/o website

01:38:50,230 --> 01:38:57,170
yeah I can I've tried to do that but

01:38:53,570 --> 01:39:03,050
honestly I've ran into some issues

01:38:57,170 --> 01:39:05,900
before Jack I can certainly do something

01:39:03,050 --> 01:39:08,420
about what I know so far that's fine

01:39:05,900 --> 01:39:10,310
yeah I find linking projects hard

01:39:08,420 --> 01:39:13,790
because sometimes your changes I

01:39:10,310 --> 01:39:15,560
multiple sub projects and this makes it

01:39:13,790 --> 01:39:18,440
difficult to have to link all the

01:39:15,560 --> 01:39:22,910
packages which is why we have the smoke

01:39:18,440 --> 01:39:30,160
test for instance in slash tests there's

01:39:22,910 --> 01:39:33,380
one run a file that uses the ill option

01:39:30,160 --> 01:39:36,740
to launch web that we would test run a

01:39:33,380 --> 01:39:39,580
test so you see here it launches this

01:39:36,740 --> 01:39:42,650
specific on file config file with this

01:39:39,580 --> 01:39:45,860
attached or modification to it so we

01:39:42,650 --> 01:39:47,900
want to run this his test files and in

01:39:45,860 --> 01:39:52,820
these directories you can check like the

01:39:47,900 --> 01:39:54,710
test ojs it pretty much you run say user

01:39:52,820 --> 01:39:58,970
test how would someone could have it in

01:39:54,710 --> 01:40:02,420
his in his project but instead of

01:39:58,970 --> 01:40:05,480
calling an actual driver it's

01:40:02,420 --> 01:40:08,990
uses an internal helper package they

01:40:05,480 --> 01:40:13,340
called material mock service to return

01:40:08,990 --> 01:40:14,560
that pre-created response and so can

01:40:13,340 --> 01:40:18,710
look into that

01:40:14,560 --> 01:40:20,930
so this web dollar a mock service it

01:40:18,710 --> 01:40:22,970
defines mocks for all the protocol

01:40:20,930 --> 01:40:26,480
comments that we have so you see here

01:40:22,970 --> 01:40:30,290
every time that what the world calls to

01:40:26,480 --> 01:40:35,120
get title command it always returns to

01:40:30,290 --> 01:40:39,340
accurate with this response and so if

01:40:35,120 --> 01:40:43,460
you if you run your mock test or your

01:40:39,340 --> 01:40:45,070
your smoke tests calling browser docket

01:40:43,460 --> 01:40:47,540
title will always return the same

01:40:45,070 --> 01:40:49,880
response and you don't need any driver

01:40:47,540 --> 01:40:52,340
or anything to run this test these are

01:40:49,880 --> 01:40:54,680
like unit tests but they run fully

01:40:52,340 --> 01:40:57,920
entrant without the networking part

01:40:54,680 --> 01:40:59,540
without making actual requests so this

01:40:57,920 --> 01:41:01,970
is really helpful if you want to test

01:40:59,540 --> 01:41:04,190
these interactions with services and

01:41:01,970 --> 01:41:06,320
reporters in if they work really well

01:41:04,190 --> 01:41:09,350
together like we have tests here that

01:41:06,320 --> 01:41:12,650
make sure that the commands are executed

01:41:09,350 --> 01:41:14,990
synchronously and or asynchronously

01:41:12,650 --> 01:41:18,620
as you can see here that you can choose

01:41:14,990 --> 01:41:23,720
a single well without problems we test

01:41:18,620 --> 01:41:28,370
our middleware where we set up specific

01:41:23,720 --> 01:41:30,590
set of responses and then we execute the

01:41:28,370 --> 01:41:33,050
commands and based on the set of

01:41:30,590 --> 01:41:36,410
responses that we expect to happen we

01:41:33,050 --> 01:41:39,950
see that for instance he still element

01:41:36,410 --> 01:41:41,780
is being fixed automatically right but

01:41:39,950 --> 01:41:43,880
it's for that one you can see this

01:41:41,780 --> 01:41:47,180
scenario is the custom command that's

01:41:43,880 --> 01:41:49,520
being added by the Box server and you

01:41:47,180 --> 01:41:52,100
can find it here it's headed in the

01:41:49,520 --> 01:41:54,620
before hook because this web got a mock

01:41:52,100 --> 01:41:56,810
service is like the stall service or any

01:41:54,620 --> 01:41:59,690
other services service that you can use

01:41:56,810 --> 01:42:01,820
to do certain things on special

01:41:59,690 --> 01:42:05,720
lifecycle events like before the test

01:42:01,820 --> 01:42:12,290
starts and here we have the scenario

01:42:05,720 --> 01:42:14,480
that he finds this set of responses like

01:42:12,290 --> 01:42:15,680
for here the first time that you try to

01:42:14,480 --> 01:42:18,130
fit

01:42:15,680 --> 01:42:21,740
element returned with a violent response

01:42:18,130 --> 01:42:25,370
the second time you do that say no such

01:42:21,740 --> 01:42:29,270
element so it means we found the element

01:42:25,370 --> 01:42:31,670
but once we click on it and it says we

01:42:29,270 --> 01:42:33,500
cannot find it anymore and this is

01:42:31,670 --> 01:42:37,070
usually happens when there's a steel

01:42:33,500 --> 01:42:41,140
element exception and then after that we

01:42:37,070 --> 01:42:44,300
find it again and for new element ID and

01:42:41,140 --> 01:42:47,060
allow to click on this specific element

01:42:44,300 --> 01:42:50,600
idea and make the clickable so this is

01:42:47,060 --> 01:42:56,770
all described this little scenario you

01:42:50,600 --> 01:42:56,770
which uses knock as stabbing framework

01:42:57,850 --> 01:43:05,210
so you can use these lock service to you

01:43:01,820 --> 01:43:08,300
know run the full test one aw8 s1 s2

01:43:05,210 --> 01:43:11,300
similar to what we have in the example

01:43:08,300 --> 01:43:15,080
sorry to me without having to set up

01:43:11,300 --> 01:43:17,930
like the driver and yeah without having

01:43:15,080 --> 01:43:23,110
to set up the violence and you can run

01:43:17,930 --> 01:43:28,850
this by saying npm run tests smoke and

01:43:23,110 --> 01:43:32,270
say to filter aids you can have as an

01:43:28,850 --> 01:43:35,540
argument the name of the function here

01:43:32,270 --> 01:43:38,030
so mark a test runner if we apply this

01:43:35,540 --> 01:43:42,590
it only wants a smoke test for the

01:43:38,030 --> 01:43:52,160
market test one hand so four files are

01:43:42,590 --> 01:43:54,920
being executed and they pass i think

01:43:52,160 --> 01:43:58,130
it's worth mentioning that what you see

01:43:54,920 --> 01:43:59,990
over here are not the webdriver commands

01:43:58,130 --> 01:44:04,820
but it's actually the webdriver commands

01:43:59,990 --> 01:44:07,280
are mocked right yes yes that's right so

01:44:04,820 --> 01:44:10,880
webdriver is actually executing all the

01:44:07,280 --> 01:44:13,250
commands and doing the requests but it's

01:44:10,880 --> 01:44:17,720
doing the request to webdriver and there

01:44:13,250 --> 01:44:19,220
it's stopping and I think the repress is

01:44:17,720 --> 01:44:23,150
not really actually happening because

01:44:19,220 --> 01:44:25,910
the rule actually and then the request

01:44:23,150 --> 01:44:29,280
module is like not so that the request

01:44:25,910 --> 01:44:31,740
has go out and knock

01:44:29,280 --> 01:44:36,030
like makes the market returns the

01:44:31,740 --> 01:44:38,670
expected response so you see that this

01:44:36,030 --> 01:44:41,490
thought commands dot the each session or

01:44:38,670 --> 01:44:43,740
get title these are all next to the

01:44:41,490 --> 01:44:52,050
protocol commands that we have defined

01:44:43,740 --> 01:44:55,590
in WD IO protocols for the web driver so

01:44:52,050 --> 01:45:00,960
here you see all the events let's say k

01:44:55,590 --> 01:45:04,350
title this is a critical command for

01:45:00,960 --> 01:45:11,540
this web driver endpoint and we can

01:45:04,350 --> 01:45:15,000
modify it by calling where's the service

01:45:11,540 --> 01:45:17,520
by calling sister command get title and

01:45:15,000 --> 01:45:21,360
then we get the doc instance where we

01:45:17,520 --> 01:45:24,470
can use their interfaces to say always

01:45:21,360 --> 01:45:29,220
we turn to hundreds with this response I

01:45:24,470 --> 01:45:33,810
think it's maybe worth showing me a get

01:45:29,220 --> 01:45:36,330
title w io Clemente and it is harder

01:45:33,810 --> 01:45:39,090
this is what a comment so there's no

01:45:36,330 --> 01:45:40,650
code behind it essentially no but what

01:45:39,090 --> 01:45:43,790
I'm trying to say is like if you show

01:45:40,650 --> 01:45:46,350
the web driver you get title command

01:45:43,790 --> 01:45:48,390
then you will see this get used in the

01:45:46,350 --> 01:45:52,560
command which might make it more visible

01:45:48,390 --> 01:45:59,700
oh yeah so in one of the smoke test we

01:45:52,560 --> 01:46:03,410
had essentially this which under the

01:45:59,700 --> 01:46:07,170
hood calls browser danke title yeah

01:46:03,410 --> 01:46:11,160
which is the web driver IO command

01:46:07,170 --> 01:46:14,310
yeah but then interns intern it uses the

01:46:11,160 --> 01:46:17,790
web driver gets idle commands

01:46:14,310 --> 01:46:21,600
yeah which is then mapped to a specific

01:46:17,790 --> 01:46:24,660
URL and what we showed in the protocol

01:46:21,600 --> 01:46:27,740
mapping that URL can actually be called

01:46:24,660 --> 01:46:30,360
with a tool for example postman as well

01:46:27,740 --> 01:46:35,820
so it's just calls that you're doing

01:46:30,360 --> 01:46:38,120
like requests it to be requests that's

01:46:35,820 --> 01:46:41,610
what every nice explained and the

01:46:38,120 --> 01:46:43,260
layering so the first initial layer when

01:46:41,610 --> 01:46:46,140
you use webdriver

01:46:43,260 --> 01:46:49,830
the package itself has just five or four

01:46:46,140 --> 01:46:51,960
files really and it just does it just

01:46:49,830 --> 01:46:55,950
runs a command based on the information

01:46:51,960 --> 01:46:58,380
it gets from the protocol that I just

01:46:55,950 --> 01:47:02,370
have shown from the web driver Jason

01:46:58,380 --> 01:47:04,980
where we have the command name and the

01:47:02,370 --> 01:47:08,580
parameters it expects so here where you

01:47:04,980 --> 01:47:12,960
have a parameter here we expect an X Y

01:47:08,580 --> 01:47:16,890
width height variable and based on that

01:47:12,960 --> 01:47:19,070
we can do some validation of the

01:47:16,890 --> 01:47:21,480
parameters that you have provided and

01:47:19,070 --> 01:47:23,310
essentially it just makes a request at

01:47:21,480 --> 01:47:26,160
the end this all what the weather

01:47:23,310 --> 01:47:28,470
package is doing it it helps you to it

01:47:26,160 --> 01:47:30,690
has it provides an interface and it

01:47:28,470 --> 01:47:34,410
gives you the bail response back where

01:47:30,690 --> 01:47:36,750
then webdiver okay go can wish then with

01:47:34,410 --> 01:47:40,740
the rookin used to make some more

01:47:36,750 --> 01:47:45,840
complex commands let's say the keys

01:47:40,740 --> 01:47:48,690
commands where we you know either use

01:47:45,840 --> 01:47:51,270
the same keys commands that still

01:47:48,690 --> 01:47:53,550
existed when the J's what protocol was

01:47:51,270 --> 01:47:57,300
the same and now it uses a perform

01:47:53,550 --> 01:48:01,080
actions command or the new window

01:47:57,300 --> 01:48:05,880
commands that does some fancy things to

01:48:01,080 --> 01:48:08,700
create a new window and switches to it

01:48:05,880 --> 01:48:11,370
automatically so it uses the execute

01:48:08,700 --> 01:48:13,880
command the catch window handles

01:48:11,370 --> 01:48:17,820
protocol command to switch to window

01:48:13,880 --> 01:48:20,760
protocol commands to actually this will

01:48:17,820 --> 01:48:25,220
command but the weapon recommend to open

01:48:20,760 --> 01:48:25,220
a new window and switch to that window

01:48:25,550 --> 01:48:36,030
switch windows similar wait yeah

01:48:33,480 --> 01:48:38,340
switches to the window uses a protocol

01:48:36,030 --> 01:48:40,200
command and then does some abstraction

01:48:38,340 --> 01:48:42,480
on top of it just like a lay on top

01:48:40,200 --> 01:48:44,160
protocol commands

01:48:42,480 --> 01:48:45,840
you

01:48:44,160 --> 01:48:50,760
you

01:48:45,840 --> 01:48:52,260
and protect rules to complete this we

01:48:50,760 --> 01:48:55,139
have implemented all the web browser

01:48:52,260 --> 01:48:58,770
commands but have put an puppeteered

01:48:55,139 --> 01:49:03,290
limitation behind it so four elements

01:48:58,770 --> 01:49:09,929
clear which clear sleep or element we

01:49:03,290 --> 01:49:12,000
just say oh we have specific command for

01:49:09,929 --> 01:49:14,670
that a specific JavaScript that we

01:49:12,000 --> 01:49:18,929
execute on this page to clear that input

01:49:14,670 --> 01:49:21,270
using some parameters click on that and

01:49:18,929 --> 01:49:25,949
is a little bit more complicated but it

01:49:21,270 --> 01:49:29,400
pretty much just clicks on the command

01:49:25,949 --> 01:49:30,530
oh no this is a let me click yeah it

01:49:29,400 --> 01:49:36,150
gets

01:49:30,530 --> 01:49:38,340
okay that's with tag name and if not it

01:49:36,150 --> 01:49:39,840
says element an alert click so it uses a

01:49:38,340 --> 01:49:43,800
puppeteer function to click on that

01:49:39,840 --> 01:49:47,360
element but it just wrapped around some

01:49:43,800 --> 01:49:51,020
mechanism that in case a dialog opens

01:49:47,360 --> 01:49:51,020
that will be handled

01:49:54,909 --> 01:49:59,880
so yeah I think we are almost on top of

01:49:57,250 --> 01:49:59,880
the hour and

01:50:01,260 --> 01:50:11,430
any questions before we close the

01:50:06,570 --> 01:50:14,850
session I hope this was somewhat

01:50:11,430 --> 01:50:17,460
somewhat useful for you if you have some

01:50:14,850 --> 01:50:20,010
time after the session I would like to

01:50:17,460 --> 01:50:23,760
ask you to give your feedback to the

01:50:20,010 --> 01:50:24,830
session in the document on the Kiko

01:50:23,760 --> 01:50:31,880
platform

01:50:24,830 --> 01:50:38,180
let me share I switch my screen again

01:50:31,880 --> 01:50:38,180
just up to so

01:50:38,250 --> 01:50:44,040
I think this one is shared now so here

01:50:42,000 --> 01:50:47,460
on the Kiko platform where you found the

01:50:44,040 --> 01:50:52,110
link to the workshop session you have a

01:50:47,460 --> 01:50:53,730
section on session feedback and please

01:50:52,110 --> 01:50:56,550
provide some information about how you

01:50:53,730 --> 01:50:58,110
like the session or some more

01:50:56,550 --> 01:51:02,840
information or we can improve next time

01:50:58,110 --> 01:51:08,000
when we give this workshop again I hope

01:51:02,840 --> 01:51:08,000
so feel free to add any feedback there

01:51:14,230 --> 01:51:17,310
[Music]

01:51:15,980 --> 01:51:19,110
yes

01:51:17,310 --> 01:51:24,060
besides that thank you all for

01:51:19,110 --> 01:51:26,540
participating and and ii think i will

01:51:24,060 --> 01:51:26,540

YouTube URL: https://www.youtube.com/watch?v=QaA5C1Y4BH0


