Title: Workshop: Test all the Things with Intern - Jason Cheatham, SitePen
Publication date: 2020-06-26
Playlist: OpenJS World 2020
Description: 
	
Captions: 
	00:00:00,030 --> 00:00:05,100
hello and welcome to test all the things

00:00:03,120 --> 00:00:08,069
within turn during this hour-long

00:00:05,100 --> 00:00:09,660
workshop I'm going to give you I'm going

00:00:08,069 --> 00:00:12,059
to introduce you to the intern testing

00:00:09,660 --> 00:00:14,670
tool describe some of its capabilities

00:00:12,059 --> 00:00:17,250
and show you how to use it to test a

00:00:14,670 --> 00:00:20,430
simple react application in a couple

00:00:17,250 --> 00:00:22,320
different ways this workshop doesn't

00:00:20,430 --> 00:00:24,949
assume that you have much experience

00:00:22,320 --> 00:00:27,359
writing tests or really any experience

00:00:24,949 --> 00:00:29,420
but you should be familiar with

00:00:27,359 --> 00:00:32,669
JavaScript or typescript

00:00:29,420 --> 00:00:34,620
if you'd like to follow along open a

00:00:32,669 --> 00:00:37,469
terminal and make sure that you have at

00:00:34,620 --> 00:00:39,480
least node and NPM in your path

00:00:37,469 --> 00:00:41,190
you'll also need Java installed if you

00:00:39,480 --> 00:00:43,440
want to run some of the test that we

00:00:41,190 --> 00:00:45,329
write later the tests aren't actually

00:00:43,440 --> 00:00:48,329
written in Java but one of the tools

00:00:45,329 --> 00:00:51,420
used by intern selenium is written in

00:00:48,329 --> 00:00:56,070
Java so you need that to actually run

00:00:51,420 --> 00:00:59,340
those so first off a little bit about

00:00:56,070 --> 00:01:02,340
myself and what I do I am a software

00:00:59,340 --> 00:01:05,040
engineer at site Penn at site Penn we

00:01:02,340 --> 00:01:08,250
are the co-creators and maintain errs of

00:01:05,040 --> 00:01:10,110
the dojo toolkit and we're also the

00:01:08,250 --> 00:01:12,630
developers of the new modern dojo

00:01:10,110 --> 00:01:16,380
framework along with several other

00:01:12,630 --> 00:01:20,460
open-source projects including intern we

00:01:16,380 --> 00:01:23,580
also run the first typescript focused

00:01:20,460 --> 00:01:28,650
conference ts Kampf which is on its

00:01:23,580 --> 00:01:32,189
third year this year I am also the lead

00:01:28,650 --> 00:01:34,979
maintainer of intern so you know I try

00:01:32,189 --> 00:01:37,140
to keep things up to date keep you know

00:01:34,979 --> 00:01:39,299
manage releases if you have feature

00:01:37,140 --> 00:01:42,420
requests or bugs those will likely

00:01:39,299 --> 00:01:46,500
eventually land with me so it keeps me

00:01:42,420 --> 00:01:48,780
busy and then in my spare time I really

00:01:46,500 --> 00:01:51,720
like to work with home automation like I

00:01:48,780 --> 00:01:53,610
have basically I have a couple of home

00:01:51,720 --> 00:01:55,950
automation hubs that I've set up and I

00:01:53,610 --> 00:01:59,790
wire up like all the lights in my house

00:01:55,950 --> 00:02:01,439
and electrical you know switches I have

00:01:59,790 --> 00:02:02,909
a variety of sensors for like

00:02:01,439 --> 00:02:05,790
temperature and humidity and pressure

00:02:02,909 --> 00:02:07,950
and all that just sort of scattered

00:02:05,790 --> 00:02:10,080
around and you know I come up with

00:02:07,950 --> 00:02:11,820
interesting ways to use that so

00:02:10,080 --> 00:02:13,550
like on a good day I don't have to touch

00:02:11,820 --> 00:02:16,350
any lights which is in the house

00:02:13,550 --> 00:02:19,140
it's it's a learning process though so

00:02:16,350 --> 00:02:20,850
you know that doesn't always work but

00:02:19,140 --> 00:02:23,970
but it's really awesome when it does

00:02:20,850 --> 00:02:29,700
it's it's neat to see code you know

00:02:23,970 --> 00:02:32,880
working with the physical world so what

00:02:29,700 --> 00:02:36,000
are we going to do today the goal here

00:02:32,880 --> 00:02:38,550
is to give an overview of in turn and

00:02:36,000 --> 00:02:40,260
kind of show you some of the things you

00:02:38,550 --> 00:02:42,330
can do within turn so we're gonna you

00:02:40,260 --> 00:02:44,400
know set it up right several kinds of

00:02:42,330 --> 00:02:47,070
tests but it's only an hour so we can't

00:02:44,400 --> 00:02:49,650
go into a lot of depth so I'm mostly

00:02:47,070 --> 00:02:51,930
just going to be giving quick flybys of

00:02:49,650 --> 00:02:55,500
how to write a few different kinds of

00:02:51,930 --> 00:02:58,290
tests and you know again just show you

00:02:55,500 --> 00:03:02,459
some of the things that you can do so

00:02:58,290 --> 00:03:07,860
first off let's get into what actually

00:03:02,459 --> 00:03:10,860
is in turn so obviously it's a testing

00:03:07,860 --> 00:03:14,310
tool it was originally created for the

00:03:10,860 --> 00:03:18,120
dojo toolkit several years ago when dojo

00:03:14,310 --> 00:03:20,400
was making its switch to AMD and heavier

00:03:18,120 --> 00:03:23,580
use of asynchronous code things like

00:03:20,400 --> 00:03:26,760
promises when you know back in the early

00:03:23,580 --> 00:03:29,459
days there and so they you know one of

00:03:26,760 --> 00:03:32,280
the site pen engineers then created in

00:03:29,459 --> 00:03:33,739
turn to be a more effective way to test

00:03:32,280 --> 00:03:35,910
that kind of code

00:03:33,739 --> 00:03:38,550
probably interns key differentiator

00:03:35,910 --> 00:03:41,910
right now is that it supports the full

00:03:38,550 --> 00:03:43,590
testing lifecycle so with intern out of

00:03:41,910 --> 00:03:46,709
the box you can write unit tests you can

00:03:43,590 --> 00:03:49,350
write function to functional tests and

00:03:46,709 --> 00:03:50,820
full psych integration tests and we'll

00:03:49,350 --> 00:03:53,540
go into the difference in those a little

00:03:50,820 --> 00:03:55,920
bit more in a couple of slides

00:03:53,540 --> 00:03:57,870
another differentiator is that intern

00:03:55,920 --> 00:04:01,470
really focuses on testing and real

00:03:57,870 --> 00:04:03,000
browsers so it can use I mean it can run

00:04:01,470 --> 00:04:04,950
tests in node and that's what it does by

00:04:03,000 --> 00:04:09,780
default but it also tries to make it

00:04:04,950 --> 00:04:12,780
easy to run your tests in browsers my

00:04:09,780 --> 00:04:15,360
intern can also collect code coverage so

00:04:12,780 --> 00:04:17,519
you know to help you know how well your

00:04:15,360 --> 00:04:20,789
unit test you're exercising

00:04:17,519 --> 00:04:22,440
your application code and it's it's

00:04:20,789 --> 00:04:24,449
extensible it's pretty easy to write

00:04:22,440 --> 00:04:26,430
plug-ins for and there are a couple of

00:04:24,449 --> 00:04:29,789
existing plugins it will look at later

00:04:26,430 --> 00:04:36,090
on today and it's pretty easy to plug in

00:04:29,789 --> 00:04:37,830
turn into CI systems as well so when we

00:04:36,090 --> 00:04:41,509
talk about unit tests and functional

00:04:37,830 --> 00:04:43,919
tests unit tests are the ones that

00:04:41,509 --> 00:04:47,810
probably most people who write tests are

00:04:43,919 --> 00:04:50,430
familiar with those are tests that load

00:04:47,810 --> 00:04:52,590
application code and just call functions

00:04:50,430 --> 00:04:55,560
in it directly you know instantiate

00:04:52,590 --> 00:04:58,940
classes work with them and look at the

00:04:55,560 --> 00:05:01,979
output again just directly from the code

00:04:58,940 --> 00:05:04,470
and we like to say those those test code

00:05:01,979 --> 00:05:08,220
from the developers perspective the

00:05:04,470 --> 00:05:10,949
other major kind of test is functional

00:05:08,220 --> 00:05:13,560
tests functional tests actually sort of

00:05:10,949 --> 00:05:15,599
sit outside the application they don't

00:05:13,560 --> 00:05:17,539
load application code directly they

00:05:15,599 --> 00:05:21,210
don't you know see it or touch it

00:05:17,539 --> 00:05:24,030
instead functional tests act a lot like

00:05:21,210 --> 00:05:25,080
a user and the access they exercise you

00:05:24,030 --> 00:05:28,620
know sort of the user level

00:05:25,080 --> 00:05:31,199
functionality of an application so a

00:05:28,620 --> 00:05:35,190
functional test might tell a browser to

00:05:31,199 --> 00:05:37,590
load an application page like I'm going

00:05:35,190 --> 00:05:40,620
to load some web page and then it might

00:05:37,590 --> 00:05:43,620
look on the page and find certain

00:05:40,620 --> 00:05:45,150
elements it might find a button and tell

00:05:43,620 --> 00:05:47,130
the browser to click that button and

00:05:45,150 --> 00:05:48,779
then look at some output or you know

00:05:47,130 --> 00:05:51,569
some text in a field to see if it

00:05:48,779 --> 00:05:54,449
changed so functional tests test code

00:05:51,569 --> 00:05:57,590
from a user's perspective instead of

00:05:54,449 --> 00:05:57,590
from a developer's perspective

00:06:00,030 --> 00:06:05,910
so when we talk about how we organize

00:06:03,360 --> 00:06:10,110
tests and in turn we have three sort of

00:06:05,910 --> 00:06:13,500
broad terms there at the top level our

00:06:10,110 --> 00:06:15,960
suite these are groups of tests that are

00:06:13,500 --> 00:06:20,010
you know it's a logical grouping so very

00:06:15,960 --> 00:06:23,760
frequently a suite is is created for a

00:06:20,010 --> 00:06:26,570
particular module let's say so you know

00:06:23,760 --> 00:06:29,100
you're testing the button module in your

00:06:26,570 --> 00:06:31,290
application so you would make a button

00:06:29,100 --> 00:06:35,070
suite and then put all the tests for

00:06:31,290 --> 00:06:36,810
button in there but you know you don't

00:06:35,070 --> 00:06:39,930
have to have just one suite for file

00:06:36,810 --> 00:06:41,760
that can be multiple and you can nest

00:06:39,930 --> 00:06:45,380
Suites so if you want to have finer

00:06:41,760 --> 00:06:47,580
grain groupings you can you can do that

00:06:45,380 --> 00:06:50,160
tests are the things that actually

00:06:47,580 --> 00:06:53,850
exercise code or maybe exercise the

00:06:50,160 --> 00:06:55,530
browser and make assertions so I mean

00:06:53,850 --> 00:06:59,460
the test is the thing that's actually

00:06:55,530 --> 00:07:01,620
doing the work and then test can be

00:06:59,460 --> 00:07:04,350
asynchronous so they can work with async

00:07:01,620 --> 00:07:07,040
code you just return a promise and in

00:07:04,350 --> 00:07:12,390
turn that's that's the basic async unit

00:07:07,040 --> 00:07:15,120
and within test the checks you're

00:07:12,390 --> 00:07:17,160
actually making are called assertions so

00:07:15,120 --> 00:07:19,110
when you do something like you know you

00:07:17,160 --> 00:07:20,340
you you call a function and look at its

00:07:19,110 --> 00:07:21,810
output you're gonna make an assertion

00:07:20,340 --> 00:07:25,350
about its output and you're going to

00:07:21,810 --> 00:07:27,720
check and see that something is true

00:07:25,350 --> 00:07:29,370
maybe maybe you call a function that's

00:07:27,720 --> 00:07:30,960
supposed to append something to an array

00:07:29,370 --> 00:07:32,850
you get back the array and you would

00:07:30,960 --> 00:07:36,630
assert that the length of the array was

00:07:32,850 --> 00:07:39,750
one bigger then it started out in turn

00:07:36,630 --> 00:07:42,090
provides the chili Brer II which is a

00:07:39,750 --> 00:07:43,710
popular third party assertion library

00:07:42,090 --> 00:07:46,110
and it gives you a lot of these high

00:07:43,710 --> 00:07:47,550
level assertions like asserting that the

00:07:46,110 --> 00:07:50,070
length of something is something you

00:07:47,550 --> 00:07:54,750
expect or asserting that a value is true

00:07:50,070 --> 00:07:57,240
or is null or things like that you can

00:07:54,750 --> 00:07:59,220
also just write your own assertions

00:07:57,240 --> 00:08:00,900
basically anything that you know the

00:07:59,220 --> 00:08:02,880
only thing an assertion has to do is

00:08:00,900 --> 00:08:05,700
throw an exception if there's a problem

00:08:02,880 --> 00:08:08,090
so if you if you check a condition and

00:08:05,700 --> 00:08:10,969
it's bad you would throw an exception

00:08:08,090 --> 00:08:13,069
otherwise you know you don't

00:08:10,969 --> 00:08:15,919
and when you use something like chai

00:08:13,069 --> 00:08:19,369
it's just it's making that process a

00:08:15,919 --> 00:08:21,469
little cleaner and easier to read so we

00:08:19,369 --> 00:08:24,409
provide that but in turn is very

00:08:21,469 --> 00:08:29,989
flexible about actually what you use

00:08:24,409 --> 00:08:32,089
there so let's kind of get started on

00:08:29,989 --> 00:08:35,029
this and jump right in here and take a

00:08:32,089 --> 00:08:36,589
look at what our test application is and

00:08:35,029 --> 00:08:38,209
you can see this down here we're going

00:08:36,589 --> 00:08:41,930
to be getting something from this intern

00:08:38,209 --> 00:08:47,379
tutorial repository so first off let's

00:08:41,930 --> 00:08:52,300
just clone that I'll go in there and

00:08:47,379 --> 00:08:55,490
we're checking out the open J's world

00:08:52,300 --> 00:08:57,920
tutorial branch so we have that and then

00:08:55,490 --> 00:09:00,079
we're just going to install our app it's

00:08:57,920 --> 00:09:02,629
a standard you know node application

00:09:00,079 --> 00:09:05,629
created with create react app well I

00:09:02,629 --> 00:09:07,759
guess it's a react application so we can

00:09:05,629 --> 00:09:14,149
just run npm install it should also work

00:09:07,759 --> 00:09:16,759
with yarn I just use NPM all the time so

00:09:14,149 --> 00:09:20,360
once that installs we will be able to

00:09:16,759 --> 00:09:23,480
run NPM start and that will start up the

00:09:20,360 --> 00:09:25,370
application in the development server

00:09:23,480 --> 00:09:27,319
and open it up in a browser here and

00:09:25,370 --> 00:09:33,199
then we'll be able to take a look at it

00:09:27,319 --> 00:09:36,439
and you know see what it does as soon as

00:09:33,199 --> 00:09:39,459
this finishes installing it's not NPM is

00:09:36,439 --> 00:09:39,459
never the fastest thing

00:09:39,730 --> 00:09:48,350
okay and we're good

00:09:44,740 --> 00:09:51,680
so we've cloned our repo installer thing

00:09:48,350 --> 00:09:56,290
we're running start and so here we go

00:09:51,680 --> 00:10:02,530
our application and all of its glory is

00:09:56,290 --> 00:10:05,410
a calculator it's you know a standard

00:10:02,530 --> 00:10:09,560
simple little multifunction calculator

00:10:05,410 --> 00:10:11,960
seven plus three equals ten hopefully

00:10:09,560 --> 00:10:14,060
it's good it's not a thoroughly tested

00:10:11,960 --> 00:10:19,040
calculator which you know is fine for

00:10:14,060 --> 00:10:21,110
our purposes but it makes a nice and

00:10:19,040 --> 00:10:26,180
it's nice and interactive and has easily

00:10:21,110 --> 00:10:28,280
extractable logic so let's take a little

00:10:26,180 --> 00:10:32,840
closer look at what's in our flashy

00:10:28,280 --> 00:10:35,200
calculator here real quick just because

00:10:32,840 --> 00:10:41,150
it makes testing a little bit easier

00:10:35,200 --> 00:10:42,800
okay so in here we have you know the

00:10:41,150 --> 00:10:45,620
standard react layout we have a public

00:10:42,800 --> 00:10:48,620
directory with our static assets we have

00:10:45,620 --> 00:10:53,050
a source directory that has all of our

00:10:48,620 --> 00:10:55,250
code in it and in our code here we have

00:10:53,050 --> 00:10:56,510
components and just a couple other

00:10:55,250 --> 00:10:58,430
things we don't have any further

00:10:56,510 --> 00:11:00,710
breakdown in our code because this is a

00:10:58,430 --> 00:11:03,760
very simple application we don't need a

00:11:00,710 --> 00:11:07,250
components directory and a you know etc

00:11:03,760 --> 00:11:10,160
so we have our capitalized components

00:11:07,250 --> 00:11:12,740
here we have two other modules we have

00:11:10,160 --> 00:11:15,560
common which is just some typescript

00:11:12,740 --> 00:11:19,100
types and I think one constant and then

00:11:15,560 --> 00:11:21,380
we have this logic module here which is

00:11:19,100 --> 00:11:23,690
where the the logic that actually you

00:11:21,380 --> 00:11:27,770
know handles things like plus and minus

00:11:23,690 --> 00:11:30,260
and equals lives let's take a quick look

00:11:27,770 --> 00:11:33,500
at our code so if we look at our

00:11:30,260 --> 00:11:36,260
calculator code here it is a react

00:11:33,500 --> 00:11:38,330
component it's a functional component so

00:11:36,260 --> 00:11:40,640
we just were exporting a function that

00:11:38,330 --> 00:11:44,660
is our component within that we're using

00:11:40,640 --> 00:11:46,280
some react hooks here to create some

00:11:44,660 --> 00:11:49,820
state variables and some things to

00:11:46,280 --> 00:11:51,930
update them so we have this you know

00:11:49,820 --> 00:11:54,750
value total and operation

00:11:51,930 --> 00:11:57,029
we have this button args thing that

00:11:54,750 --> 00:12:01,290
we've made down here and that is just

00:11:57,029 --> 00:12:03,540
all of these these six variables up here

00:12:01,290 --> 00:12:07,380
we're just sticking them in an object we

00:12:03,540 --> 00:12:11,670
will use these with the logic that

00:12:07,380 --> 00:12:14,670
actually manages our buttons this button

00:12:11,670 --> 00:12:17,040
handlers thing is just binding the names

00:12:14,670 --> 00:12:18,870
of keys on the keyboard to particular

00:12:17,040 --> 00:12:21,240
button handlers so that we can also use

00:12:18,870 --> 00:12:23,790
the keyboard to do things as well as

00:12:21,240 --> 00:12:26,250
click buttons the button handlers

00:12:23,790 --> 00:12:27,570
themselves come from this button

00:12:26,250 --> 00:12:30,390
handlers constant

00:12:27,570 --> 00:12:33,180
and there's just one per button so AC

00:12:30,390 --> 00:12:39,149
goes with the AC button divide goes with

00:12:33,180 --> 00:12:40,830
divide x goes with x etc we can see down

00:12:39,149 --> 00:12:45,390
here we have a couple of new event

00:12:40,830 --> 00:12:47,399
handlers we bind the the keyboard

00:12:45,390 --> 00:12:49,020
handler to the entire window which is

00:12:47,399 --> 00:12:53,550
not maybe what you do in the real world

00:12:49,020 --> 00:12:55,950
but for this tutorial app is fine and

00:12:53,550 --> 00:12:59,970
then we create our calculator component

00:12:55,950 --> 00:13:02,190
and you know it's just it just contains

00:12:59,970 --> 00:13:05,580
a simple you know a wrapper div and then

00:13:02,190 --> 00:13:07,589
within that the display and the grid of

00:13:05,580 --> 00:13:10,830
buttons and then you know the buttons

00:13:07,589 --> 00:13:14,700
get passed a callback and the current

00:13:10,830 --> 00:13:16,170
operation okay so we have the basic idea

00:13:14,700 --> 00:13:19,370
of our calculator here you know I mean

00:13:16,170 --> 00:13:22,529
this is what the component looks like

00:13:19,370 --> 00:13:25,110
the buttons and the display or similar

00:13:22,529 --> 00:13:30,120
kinds of things let's take a quick look

00:13:25,110 --> 00:13:33,029
at the logic module so this is where our

00:13:30,120 --> 00:13:35,010
button handlers live and basically in

00:13:33,029 --> 00:13:37,620
here we're importing a constant which is

00:13:35,010 --> 00:13:41,910
just a list of button names and then

00:13:37,620 --> 00:13:44,070
we're importing a couple of types and so

00:13:41,910 --> 00:13:47,610
we're just exporting from here our

00:13:44,070 --> 00:13:50,520
handlers and that's just an object that

00:13:47,610 --> 00:13:52,800
is basically binding the name of the

00:13:50,520 --> 00:13:55,440
button to its handler and so the

00:13:52,800 --> 00:14:00,150
handlers are all just functions that

00:13:55,440 --> 00:14:05,230
take a button args object and that we

00:14:00,150 --> 00:14:08,620
saw in the a calculator component

00:14:05,230 --> 00:14:11,110
the button args are this thing which is

00:14:08,620 --> 00:14:15,550
just all of these state variables and

00:14:11,110 --> 00:14:18,610
they're there updaters so each of these

00:14:15,550 --> 00:14:20,680
handlers takes a button args and then

00:14:18,610 --> 00:14:23,740
pulls out the properties that it cares

00:14:20,680 --> 00:14:25,210
about with destructuring here and then

00:14:23,740 --> 00:14:27,970
does whatever it needs to do to update

00:14:25,210 --> 00:14:30,910
the calculator state so all clear we'll

00:14:27,970 --> 00:14:33,970
set the displayed value to 0 and it will

00:14:30,910 --> 00:14:38,440
you know clear out any pending operation

00:14:33,970 --> 00:14:40,450
plus minus divide just mix that dot will

00:14:38,440 --> 00:14:43,060
look at the value and if it has a

00:14:40,450 --> 00:14:45,400
decimal in it I will do nothing if it

00:14:43,060 --> 00:14:47,890
doesn't have a decimal in it dot will

00:14:45,400 --> 00:14:51,400
add a decimal to the end of the number

00:14:47,890 --> 00:14:54,070
and you know the rest of our of our

00:14:51,400 --> 00:14:56,710
button functions are in here so this is

00:14:54,070 --> 00:14:58,480
what kind of what we're working with

00:14:56,710 --> 00:15:00,550
here and what we're going to test and so

00:14:58,480 --> 00:15:02,800
in our case we're just assuming you know

00:15:00,550 --> 00:15:04,510
we have an application you know nobody

00:15:02,800 --> 00:15:07,270
wrote test while it was being made but

00:15:04,510 --> 00:15:11,890
now we're gonna write some tests to you

00:15:07,270 --> 00:15:14,170
know prevent regressions all right so

00:15:11,890 --> 00:15:15,490
before we can write tests we got to get

00:15:14,170 --> 00:15:19,510
in turn in here and kind of make sure

00:15:15,490 --> 00:15:22,770
that that's working and so to get in

00:15:19,510 --> 00:15:27,130
turn we're just gonna npm install it

00:15:22,770 --> 00:15:28,870
let's save dev wow that's installing

00:15:27,130 --> 00:15:33,690
let's go ahead and edit our intern

00:15:28,870 --> 00:15:36,970
config file the intern config file is

00:15:33,690 --> 00:15:38,950
just a JSON file this you know it

00:15:36,970 --> 00:15:40,930
contains intern configuration options

00:15:38,950 --> 00:15:43,720
and we need one of these in our project

00:15:40,930 --> 00:15:46,959
to tell intern when we run it that hey

00:15:43,720 --> 00:15:49,990
this is an intern project and we're

00:15:46,959 --> 00:15:51,880
going to set it up right now to point to

00:15:49,990 --> 00:15:52,990
where we eventually plan to put some

00:15:51,880 --> 00:15:57,150
unit test Suites

00:15:52,990 --> 00:15:57,150
so we'll say test unit

00:15:57,390 --> 00:16:03,120
any TS file under there

00:16:00,390 --> 00:16:06,360
note that we can use globs here for the

00:16:03,120 --> 00:16:09,840
sweets list and also that we can put TS

00:16:06,360 --> 00:16:13,050
files directly in here because when we

00:16:09,840 --> 00:16:15,510
are running our tests in node in turn

00:16:13,050 --> 00:16:19,110
can take typescript directly you don't

00:16:15,510 --> 00:16:21,420
have to pre compile it so this is our

00:16:19,110 --> 00:16:24,300
simple config file we just finished

00:16:21,420 --> 00:16:26,460
installing in turn up here so let's

00:16:24,300 --> 00:16:29,880
actually check that it worked

00:16:26,460 --> 00:16:31,920
let's run NP x in turn when you install

00:16:29,880 --> 00:16:35,100
in turn you get an intern you know

00:16:31,920 --> 00:16:38,450
binary script and your node modules bin

00:16:35,100 --> 00:16:43,200
directory so we can just NP x in turn

00:16:38,450 --> 00:16:45,000
excuse me and it ran and so this is the

00:16:43,200 --> 00:16:47,640
expected output in this case because we

00:16:45,000 --> 00:16:51,380
have no test yet so it ran tested zero

00:16:47,640 --> 00:16:54,690
platforms nothing passed nothing failed

00:16:51,380 --> 00:16:57,360
so we have in turn the next thing to

00:16:54,690 --> 00:17:00,480
look at is in turns interfaces in turn

00:16:57,360 --> 00:17:02,520
provides three of them they're all

00:17:00,480 --> 00:17:04,709
functionally equivalent they just are

00:17:02,520 --> 00:17:07,530
different styles that you can use when

00:17:04,709 --> 00:17:10,910
writing your tests so the first one is

00:17:07,530 --> 00:17:13,860
the TDD style this one is just very

00:17:10,910 --> 00:17:15,750
straightforward you create a sweet with

00:17:13,860 --> 00:17:18,089
a sweet function you create a test with

00:17:15,750 --> 00:17:22,110
a test function and you make assertions

00:17:18,089 --> 00:17:26,190
in general with the assert syntax you

00:17:22,110 --> 00:17:29,040
know assertion yeah so that's that's

00:17:26,190 --> 00:17:32,370
basically the TDD interface and you can

00:17:29,040 --> 00:17:36,660
see at the bottom of the TDD section

00:17:32,370 --> 00:17:39,540
here that this contest equals internet

00:17:36,660 --> 00:17:43,220
plug-in business that is how you load an

00:17:39,540 --> 00:17:45,960
interface and a test you know that the

00:17:43,220 --> 00:17:48,420
interfaces exist as plugins and in turn

00:17:45,960 --> 00:17:52,770
and so you're just requesting this

00:17:48,420 --> 00:17:54,300
plugins exports from in turn so that's

00:17:52,770 --> 00:17:55,920
how you get that and the same thing with

00:17:54,300 --> 00:17:59,060
assertions in this case we're getting

00:17:55,920 --> 00:17:59,060
them from chai

00:17:59,680 --> 00:18:05,110
so the BDD interface is another one it's

00:18:03,340 --> 00:18:07,300
you know behavior driven development is

00:18:05,110 --> 00:18:11,050
what BDD is TD is test-driven

00:18:07,300 --> 00:18:13,420
development so the BDD interface is

00:18:11,050 --> 00:18:16,090
exactly the same as the TDD interface it

00:18:13,420 --> 00:18:19,180
just uses described and it instead of

00:18:16,090 --> 00:18:22,600
suite and test and the idea there is

00:18:19,180 --> 00:18:24,820
just more it encourages sort of an

00:18:22,600 --> 00:18:26,680
English or you know like a language flow

00:18:24,820 --> 00:18:30,010
when you talk about the Suites and test

00:18:26,680 --> 00:18:33,130
so you're describing you know a resource

00:18:30,010 --> 00:18:34,810
a module a suite and it should do

00:18:33,130 --> 00:18:37,120
something and it should do something

00:18:34,810 --> 00:18:40,090
else and you know that sort of thing and

00:18:37,120 --> 00:18:44,020
it is common with BDD to use the expect

00:18:40,090 --> 00:18:47,440
syntax for your assertions chai supports

00:18:44,020 --> 00:18:49,750
both of these it provides an assert and

00:18:47,440 --> 00:18:51,810
a set of assert functions basically and

00:18:49,750 --> 00:18:55,270
it also provides a set of expect

00:18:51,810 --> 00:18:57,490
functions and these again are

00:18:55,270 --> 00:19:00,820
functionally equivalent it's just one

00:18:57,490 --> 00:19:03,070
under different styles so with BDD it's

00:19:00,820 --> 00:19:05,590
normal to use expect you don't have to

00:19:03,070 --> 00:19:10,120
you can you can use assert with BDD and

00:19:05,590 --> 00:19:11,650
expect with TDD it's pre flexible and

00:19:10,120 --> 00:19:15,190
then the third interface is the object

00:19:11,650 --> 00:19:18,370
interface this one is kind of an intern

00:19:15,190 --> 00:19:21,220
unique one where you don't use describe

00:19:18,370 --> 00:19:23,620
an ad or Sweden test instead rather than

00:19:21,220 --> 00:19:27,340
using functions to make your Suites and

00:19:23,620 --> 00:19:29,140
tests you you create your entire suite

00:19:27,340 --> 00:19:31,990
and an object it's a very declarative

00:19:29,140 --> 00:19:33,610
interface so you make your suite and an

00:19:31,990 --> 00:19:36,190
object and when you've constructed this

00:19:33,610 --> 00:19:38,980
object you pass it to this register

00:19:36,190 --> 00:19:41,020
suite function and then that goes ahead

00:19:38,980 --> 00:19:44,890
and takes care of processing that into

00:19:41,020 --> 00:19:47,830
runnable Suites and tests and with

00:19:44,890 --> 00:19:50,320
object again the assertion syntax is

00:19:47,830 --> 00:19:52,120
pretty flexible usually I've seen people

00:19:50,320 --> 00:19:57,700
use assert with it you could again

00:19:52,120 --> 00:20:00,640
totally use expect with it all three of

00:19:57,700 --> 00:20:03,220
the tests syntaxes supports suite

00:20:00,640 --> 00:20:07,360
lifecycle functions so with all of them

00:20:03,220 --> 00:20:10,360
you can use before before each after and

00:20:07,360 --> 00:20:12,530
after each so before each and after each

00:20:10,360 --> 00:20:16,700
run before and after every

00:20:12,530 --> 00:20:19,490
test in a suite before and after run

00:20:16,700 --> 00:20:21,530
once at the you know before runs at the

00:20:19,490 --> 00:20:24,440
beginning of the suite before any tests

00:20:21,530 --> 00:20:26,990
have run and after runs at the end of

00:20:24,440 --> 00:20:28,850
the suite after all tests have run so

00:20:26,990 --> 00:20:31,820
these are functions you can use to do

00:20:28,850 --> 00:20:36,110
setup and cleanup for individual tests

00:20:31,820 --> 00:20:39,050
or entire Suites all three all three

00:20:36,110 --> 00:20:41,690
tests interfaces also support async

00:20:39,050 --> 00:20:45,290
functionality just return a promise from

00:20:41,690 --> 00:20:47,990
a test and your async you can also

00:20:45,290 --> 00:20:53,330
declare test to be async if you want to

00:20:47,990 --> 00:20:55,610
use async await for any of these so

00:20:53,330 --> 00:20:59,090
let's go on and actually write a unit

00:20:55,610 --> 00:21:04,070
test so when we're gonna write a unit

00:20:59,090 --> 00:21:07,670
tests the first thing we need to do is

00:21:04,070 --> 00:21:09,800
create a typescript config file and the

00:21:07,670 --> 00:21:11,810
first thing we're going to do is create

00:21:09,800 --> 00:21:14,480
a typescript config file in the test

00:21:11,810 --> 00:21:16,730
directory because the tests are going to

00:21:14,480 --> 00:21:19,970
need actually first we're going to make

00:21:16,730 --> 00:21:22,220
a test directory then we're going to may

00:21:19,970 --> 00:21:24,320
write a TS config file in there because

00:21:22,220 --> 00:21:26,450
the tests are going to use a slightly

00:21:24,320 --> 00:21:29,870
different set they're going to slightly

00:21:26,450 --> 00:21:34,550
different options and then the TS config

00:21:29,870 --> 00:21:36,680
file that the rest of the app uses we're

00:21:34,550 --> 00:21:38,030
going to inherit from the base one

00:21:36,680 --> 00:21:45,680
because most of the options would be the

00:21:38,030 --> 00:21:51,770
same alright so the options that we're

00:21:45,680 --> 00:21:57,230
going to change are we're going to set

00:21:51,770 --> 00:22:00,230
our module type to commonjs and we are

00:21:57,230 --> 00:22:04,220
going to disable this isolated module

00:22:00,230 --> 00:22:09,050
setting that that the react TS config

00:22:04,220 --> 00:22:11,210
uses and we're going to load the intern

00:22:09,050 --> 00:22:14,960
types because in turn declares one

00:22:11,210 --> 00:22:17,180
global that we want to have available so

00:22:14,960 --> 00:22:22,420
that we can do things like internet get

00:22:17,180 --> 00:22:26,870
plug-in types in turn

00:22:22,420 --> 00:22:29,060
all right the isolated modules basically

00:22:26,870 --> 00:22:30,950
we're disabling that so that we can

00:22:29,060 --> 00:22:32,690
write Suites that aren't technically

00:22:30,950 --> 00:22:34,100
modules I mean we might want to write a

00:22:32,690 --> 00:22:37,640
suite that doesn't import or export

00:22:34,100 --> 00:22:40,250
anything it's completely fine but if we

00:22:37,640 --> 00:22:43,850
don't disable that setting typescript

00:22:40,250 --> 00:22:46,970
will be sad about it all right and then

00:22:43,850 --> 00:22:48,920
we need to include our test files in you

00:22:46,970 --> 00:22:50,780
know with this TS config so we're just

00:22:48,920 --> 00:22:56,270
going to say anything under the test

00:22:50,780 --> 00:23:00,190
directory is handled by this TS config

00:22:56,270 --> 00:23:03,940
file iscope config room - there we go

00:23:00,190 --> 00:23:07,100
alright so we got our TS config file

00:23:03,940 --> 00:23:10,220
let's update our intern dot JSON file we

00:23:07,100 --> 00:23:14,200
need to get that ready to we're going to

00:23:10,220 --> 00:23:17,270
add the TS config that we just created

00:23:14,200 --> 00:23:19,490
to this node section and so what we're

00:23:17,270 --> 00:23:22,220
doing here is you know I said earlier

00:23:19,490 --> 00:23:26,210
intern can process typescript by default

00:23:22,220 --> 00:23:31,400
and it can and it uses the project

00:23:26,210 --> 00:23:32,690
default TS config by default and so but

00:23:31,400 --> 00:23:34,940
that's not the one we want to use we

00:23:32,690 --> 00:23:41,210
want to use our tests one so we're gonna

00:23:34,940 --> 00:23:44,660
say node TS config test TS config dot

00:23:41,210 --> 00:23:47,030
JSON TS config goes in this little node

00:23:44,660 --> 00:23:50,560
block to make it very explicit that it

00:23:47,030 --> 00:23:53,930
only applies to a node environment

00:23:50,560 --> 00:23:57,590
intern like I said can run in browsers

00:23:53,930 --> 00:23:59,630
and it can run in node you use the same

00:23:57,590 --> 00:24:02,930
config file for both I mean you don't

00:23:59,630 --> 00:24:07,630
have to but it's pretty common to and so

00:24:02,930 --> 00:24:10,760
within this config file you need to tell

00:24:07,630 --> 00:24:12,380
you know in turn needs to know which

00:24:10,760 --> 00:24:15,500
things apply to browsers in which things

00:24:12,380 --> 00:24:17,450
apply to node and in this case we just

00:24:15,500 --> 00:24:19,340
wanted to make it very clear that TS

00:24:17,450 --> 00:24:21,830
config is really only a node thing

00:24:19,340 --> 00:24:25,960
browsers there's no typescript

00:24:21,830 --> 00:24:25,960
processing functionality for browsers

00:24:26,130 --> 00:24:31,950
all right so we got that we've updated

00:24:29,220 --> 00:24:35,460
our config file now we should actually

00:24:31,950 --> 00:24:38,070
write the test so let's see we need to

00:24:35,460 --> 00:24:39,840
make the unit directory and test because

00:24:38,070 --> 00:24:43,620
we said we were going to put our test

00:24:39,840 --> 00:24:45,390
and test unit in turns pretty flexible

00:24:43,620 --> 00:24:47,730
about this you don't have to put your

00:24:45,390 --> 00:24:49,710
test in a test directory or in test unit

00:24:47,730 --> 00:24:51,600
you could put them in your application

00:24:49,710 --> 00:24:54,590
directory and call them you know dot

00:24:51,600 --> 00:24:56,910
spec files if you want it or something I

00:24:54,590 --> 00:24:58,559
normally just put them in a test

00:24:56,910 --> 00:25:01,020
directory because it seems cleaner to

00:24:58,559 --> 00:25:05,039
keep your test resources separate from

00:25:01,020 --> 00:25:06,750
your app but it's very you know it's

00:25:05,039 --> 00:25:11,299
very flexible about how you actually do

00:25:06,750 --> 00:25:16,470
that all right so let's edit test unit

00:25:11,299 --> 00:25:19,740
we're going to test the logic module so

00:25:16,470 --> 00:25:22,500
the eye test unit logic so let's go

00:25:19,740 --> 00:25:25,080
ahead and import our interfaces we're

00:25:22,500 --> 00:25:31,919
going to use the TDD interface so sweet

00:25:25,080 --> 00:25:36,330
and tests equals internet plug-in air

00:25:31,919 --> 00:25:41,669
phase TDD and then we're going to import

00:25:36,330 --> 00:25:46,140
the assert the assert interface from

00:25:41,669 --> 00:25:47,429
chai okay so we have these so now we're

00:25:46,140 --> 00:25:53,130
going to make it sweet and we're going

00:25:47,429 --> 00:25:57,470
to call it logic and we're going to

00:25:53,130 --> 00:26:02,240
write a test for the AC button handler

00:25:57,470 --> 00:26:02,240
so let's go ahead and call our test AC

00:26:02,390 --> 00:26:08,070
all right well the first thing that we

00:26:05,850 --> 00:26:10,789
notice is we're gonna have to import the

00:26:08,070 --> 00:26:14,990
AC button handler to be able to test it

00:26:10,789 --> 00:26:19,010
so let's import the button handlers from

00:26:14,990 --> 00:26:19,010
source logic

00:26:20,290 --> 00:26:30,370
okay so we have that a button handler

00:26:26,590 --> 00:26:33,370
Stacy just try to call that oh yeah

00:26:30,370 --> 00:26:36,490
ac takes an argument we saw earlier that

00:26:33,370 --> 00:26:40,390
it needs something of type button

00:26:36,490 --> 00:26:46,150
handler args oops let's just go ahead

00:26:40,390 --> 00:26:51,250
and import that interface to handler

00:26:46,150 --> 00:26:55,240
ours that's one of the things that's in

00:26:51,250 --> 00:26:57,820
that common module all right so let's

00:26:55,240 --> 00:27:02,620
make an arse that's of type button

00:26:57,820 --> 00:27:10,690
handler args and so button handler args

00:27:02,620 --> 00:27:17,840
take some value it takes set value and

00:27:10,690 --> 00:27:19,110
we'll just do this then it also takes

00:27:17,840 --> 00:27:23,830
[Music]

00:27:19,110 --> 00:27:30,520
total which can be null or a number and

00:27:23,830 --> 00:27:32,920
then we'll just have set total and then

00:27:30,520 --> 00:27:37,690
it takes an operation which can be an

00:27:32,920 --> 00:27:43,030
operation just a string or null and then

00:27:37,690 --> 00:27:46,720
we'll have set operation and it takes an

00:27:43,030 --> 00:27:49,530
operation which we should also import

00:27:46,720 --> 00:27:49,530
from up here

00:27:52,460 --> 00:27:59,789
so all we've done here is made basically

00:27:55,799 --> 00:28:02,850
a mock of our button handler args and we

00:27:59,789 --> 00:28:04,289
are just you know they they have the

00:28:02,850 --> 00:28:06,059
value of the total in the operation

00:28:04,289 --> 00:28:07,379
state variables we have the setters and

00:28:06,059 --> 00:28:09,059
they're just going to update those

00:28:07,379 --> 00:28:11,429
variables in the state so this will make

00:28:09,059 --> 00:28:14,610
it very easy for us to pass in something

00:28:11,429 --> 00:28:17,340
that you know that's under our control

00:28:14,610 --> 00:28:20,340
and then look at how it changed what

00:28:17,340 --> 00:28:23,399
after we've called the function so we're

00:28:20,340 --> 00:28:27,360
going to pass this in and now typescript

00:28:23,399 --> 00:28:29,220
is happy about it okay so now we can

00:28:27,360 --> 00:28:30,840
call our function and we're passing it

00:28:29,220 --> 00:28:32,999
something and we're you know we actually

00:28:30,840 --> 00:28:36,690
want to run a test so what is AC

00:28:32,999 --> 00:28:39,330
supposed to do and if we go look at it

00:28:36,690 --> 00:28:42,690
it's supposed to clear the value and

00:28:39,330 --> 00:28:46,080
clear the operation so let's check that

00:28:42,690 --> 00:28:49,139
that happens so first we're going to set

00:28:46,080 --> 00:28:53,100
the value to something and we're going

00:28:49,139 --> 00:28:54,450
to set the operation to something we're

00:28:53,100 --> 00:28:55,440
going to call this function and then

00:28:54,450 --> 00:28:59,340
we're going to look and see if they

00:28:55,440 --> 00:29:06,720
actually got a got cleared so we're

00:28:59,340 --> 00:29:12,659
going to assert that that our value is

00:29:06,720 --> 00:29:19,249
zero and we are going to assert that our

00:29:12,659 --> 00:29:21,990
operation is null and so if you notice

00:29:19,249 --> 00:29:24,029
well you know as it quickly popped up

00:29:21,990 --> 00:29:26,249
when I typed assert and hit period

00:29:24,029 --> 00:29:30,619
there's there are many many assertions

00:29:26,249 --> 00:29:33,690
that you can make using chai and again

00:29:30,619 --> 00:29:35,159
the the main value of all these I mean

00:29:33,690 --> 00:29:37,679
these are things you can do yourself

00:29:35,159 --> 00:29:39,210
with just code and if statements the

00:29:37,679 --> 00:29:43,139
value you get from using these

00:29:39,210 --> 00:29:46,049
assertions and chai is that it's more

00:29:43,139 --> 00:29:49,019
compact and easier to read and also chai

00:29:46,049 --> 00:29:53,369
will construct friendly or at least

00:29:49,019 --> 00:29:54,869
useful exception messages for you so

00:29:53,369 --> 00:29:57,720
we'll look at that in a second so we

00:29:54,869 --> 00:29:59,580
made this test alright we've made our

00:29:57,720 --> 00:30:02,480
assertions we call our function so let's

00:29:59,580 --> 00:30:05,059
actually go down here and run it

00:30:02,480 --> 00:30:07,370
so we'll just run in turn we've already

00:30:05,059 --> 00:30:10,940
pointed it our test so it should run our

00:30:07,370 --> 00:30:15,590
test and it did in the note environment

00:30:10,940 --> 00:30:20,179
we ran the logic suite the AC tests one

00:30:15,590 --> 00:30:23,929
test passed if we wanted to see what

00:30:20,179 --> 00:30:26,330
happens if it fails let's jump over to

00:30:23,929 --> 00:30:28,309
this AC code real quick and you know

00:30:26,330 --> 00:30:32,990
make it do something wrong so let's say

00:30:28,309 --> 00:30:38,630
it sets the value to negative one okay

00:30:32,990 --> 00:30:40,880
so if we run our tests now it's gonna

00:30:38,630 --> 00:30:42,799
run and it's gonna fail and the failure

00:30:40,880 --> 00:30:45,200
we get is au is an assertion error we

00:30:42,799 --> 00:30:48,620
expected negative one to equal zero so

00:30:45,200 --> 00:30:52,520
this is try constructing a nice sort of

00:30:48,620 --> 00:30:56,540
useful error message for us we can make

00:30:52,520 --> 00:30:58,130
that even more potentially contextual if

00:30:56,540 --> 00:31:04,880
we want we can add a message here at the

00:30:58,130 --> 00:31:09,710
end so maybe incorrect you know or we

00:31:04,880 --> 00:31:11,960
could say expected AC to clear value so

00:31:09,710 --> 00:31:14,330
now if we run the test I mean it's still

00:31:11,960 --> 00:31:16,640
gonna fail but now we get an even more

00:31:14,330 --> 00:31:18,380
contextual message here expected you

00:31:16,640 --> 00:31:22,880
know expect AC to clear value we

00:31:18,380 --> 00:31:25,520
expected negative 1 2 equals 0 so try

00:31:22,880 --> 00:31:28,760
let's you make you know meaningful

00:31:25,520 --> 00:31:30,710
meaningful assertion messages so let's

00:31:28,760 --> 00:31:35,540
just fix that and make sure that our

00:31:30,710 --> 00:31:38,030
test passes again and so this is our

00:31:35,540 --> 00:31:44,179
first unit test and it's running a node

00:31:38,030 --> 00:31:45,860
and there you go okay so we ran it in

00:31:44,179 --> 00:31:51,679
node but one of our big things is being

00:31:45,860 --> 00:31:53,210
able to run tests in the browser there's

00:31:51,679 --> 00:31:54,799
a problem though which is that we can't

00:31:53,210 --> 00:31:59,480
run typescript directly in the browser

00:31:54,799 --> 00:32:01,340
so what are we going to do for that we

00:31:59,480 --> 00:32:03,049
got a couple of different options when

00:32:01,340 --> 00:32:06,110
you're using a react app or something

00:32:03,049 --> 00:32:07,490
that's normally built with web pack web

00:32:06,110 --> 00:32:10,640
pack is probably the most

00:32:07,490 --> 00:32:13,250
straightforward way to go about that the

00:32:10,640 --> 00:32:14,990
goal there is just to bundle up your

00:32:13,250 --> 00:32:15,860
typescript and everything it needs for

00:32:14,990 --> 00:32:18,650
its test

00:32:15,860 --> 00:32:22,720
into a JavaScript bundle that we can

00:32:18,650 --> 00:32:25,520
load into the browser so to do that

00:32:22,720 --> 00:32:27,679
we're going to make a minimal web pack

00:32:25,520 --> 00:32:29,420
config and we're going to make a couple

00:32:27,679 --> 00:32:31,370
of a little updates to our project and

00:32:29,420 --> 00:32:34,940
then we're going to build that and run

00:32:31,370 --> 00:32:36,620
that so first let's we're going to need

00:32:34,940 --> 00:32:41,110
the TS loader since we're going to be

00:32:36,620 --> 00:32:43,670
web packing typescript code we need that

00:32:41,110 --> 00:32:48,020
we're also going to need the web pack

00:32:43,670 --> 00:32:51,799
CLI we've already got web pack from

00:32:48,020 --> 00:32:53,809
react scripts and you know normally you

00:32:51,799 --> 00:32:55,910
shouldn't normally rely too much on you

00:32:53,809 --> 00:32:57,440
know transitory or a transient package

00:32:55,910 --> 00:32:59,660
dependencies like we're doing like we're

00:32:57,440 --> 00:33:01,220
going to do but it's just a little

00:32:59,660 --> 00:33:04,669
simpler in this case so we're just going

00:33:01,220 --> 00:33:09,380
to install the CLI and it will work with

00:33:04,669 --> 00:33:12,140
the web pack that we already have so

00:33:09,380 --> 00:33:14,809
let's install the web pack CLI and TS

00:33:12,140 --> 00:33:18,440
loader and while those are going we're

00:33:14,809 --> 00:33:23,660
going to edit our web we're going to

00:33:18,440 --> 00:33:28,250
create actually a web pack config and in

00:33:23,660 --> 00:33:30,169
our web pack config we're going to

00:33:28,250 --> 00:33:36,799
import resolve because we're going to

00:33:30,169 --> 00:33:40,570
have to resolve a couple of paths we are

00:33:36,799 --> 00:33:40,570
going to export our config

00:33:43,930 --> 00:33:54,190
all right so load development because

00:33:50,440 --> 00:33:56,110
webpack needs that now for our entry for

00:33:54,190 --> 00:33:58,120
our test in general it's going to be

00:33:56,110 --> 00:34:00,880
most efficient to just build all of your

00:33:58,120 --> 00:34:03,700
unit tests that you plan to run into a

00:34:00,880 --> 00:34:05,200
single package there are other ways you

00:34:03,700 --> 00:34:07,150
could do this you could build them into

00:34:05,200 --> 00:34:08,730
separate packages and use you know like

00:34:07,150 --> 00:34:12,220
vendor chunking or somesuch

00:34:08,730 --> 00:34:14,560
for our case we only have one tests but

00:34:12,220 --> 00:34:16,450
if you do have you know even a moderate

00:34:14,560 --> 00:34:19,330
number of tests it's entirely possible

00:34:16,450 --> 00:34:23,409
to just build them into one bundle so

00:34:19,330 --> 00:34:26,770
that they'll run so we're gonna run test

00:34:23,409 --> 00:34:29,470
unit logic TS so this is going to be our

00:34:26,770 --> 00:34:31,090
entry point for you know what we're

00:34:29,470 --> 00:34:34,270
gonna do with it is we are going to

00:34:31,090 --> 00:34:36,159
compile it to a file name called unit J

00:34:34,270 --> 00:34:39,370
s because we're assuming this is just

00:34:36,159 --> 00:34:47,290
all of our unit tests the path is going

00:34:39,370 --> 00:34:52,380
to be I'm gonna put it in tests in the

00:34:47,290 --> 00:34:56,860
root and the project root directory okay

00:34:52,380 --> 00:34:59,670
we have to set up what we need to handle

00:34:56,860 --> 00:34:59,670
typescript

00:35:00,120 --> 00:35:08,310
so for this we're going to say all right

00:35:02,590 --> 00:35:15,640
if we have a TS file or a TS X file

00:35:08,310 --> 00:35:16,960
we're going to use the TS loader we're

00:35:15,640 --> 00:35:18,550
going to pass it a couple of options

00:35:16,960 --> 00:35:22,590
we're going to tell it most importantly

00:35:18,550 --> 00:35:27,420
that it needs to use this config file

00:35:22,590 --> 00:35:27,420
that is our test TS config file

00:35:30,230 --> 00:35:38,320
turning big Dutch cheese on we also want

00:35:35,750 --> 00:35:41,960
to change another compiler option

00:35:38,320 --> 00:35:46,820
specifically just for web pack and that

00:35:41,960 --> 00:35:49,450
one is no omit the react config which

00:35:46,820 --> 00:35:53,060
our test config is inheriting from

00:35:49,450 --> 00:35:54,770
enabled this no omit option for our own

00:35:53,060 --> 00:35:56,990
purposes we don't want that so we're

00:35:54,770 --> 00:35:59,270
going to turn that off here and this

00:35:56,990 --> 00:36:02,990
will just allow this simple web pack

00:35:59,270 --> 00:36:06,040
config to build our stuff so we close

00:36:02,990 --> 00:36:08,600
this we close this we close rules and

00:36:06,040 --> 00:36:12,770
then we just have to tell web pack that

00:36:08,600 --> 00:36:16,210
you can resolve typescript modules or

00:36:12,770 --> 00:36:21,080
typescript files yes

00:36:16,210 --> 00:36:24,080
ts XJS JSX

00:36:21,080 --> 00:36:28,970
so none of this is really so much in

00:36:24,080 --> 00:36:30,680
turn specific as it is it's web pack but

00:36:28,970 --> 00:36:33,920
yeah this is this is sort of the minimal

00:36:30,680 --> 00:36:37,910
minimal web pack config for our simple

00:36:33,920 --> 00:36:42,170
react example here alright so we got

00:36:37,910 --> 00:36:48,109
this we don't want that semicolon so now

00:36:42,170 --> 00:36:51,770
we have a web pack config we install TS

00:36:48,109 --> 00:36:56,660
loader installed web pack CLI let's make

00:36:51,770 --> 00:37:05,480
sure that our web pack build works Luffy

00:36:56,660 --> 00:37:08,090
X web panic okay tests gotcha yes so if

00:37:05,480 --> 00:37:10,670
we set things up right this will run and

00:37:08,090 --> 00:37:14,420
it will give us something in that test

00:37:10,670 --> 00:37:18,950
directory and it did so now we can build

00:37:14,420 --> 00:37:21,440
our unit tests ok now we need to tell

00:37:18,950 --> 00:37:24,560
intern that it should run our tests in a

00:37:21,440 --> 00:37:29,240
browser so we're going to edit our

00:37:24,560 --> 00:37:30,770
intern config again and then our intern

00:37:29,240 --> 00:37:34,790
can fit we're going to add a new browser

00:37:30,770 --> 00:37:38,000
section and in this browser section we

00:37:34,790 --> 00:37:40,910
are going to tell it which Suites we

00:37:38,000 --> 00:37:41,869
want to run in the browser and they will

00:37:40,910 --> 00:37:46,430
be

00:37:41,869 --> 00:37:50,449
tests unit Jas then we're gonna move

00:37:46,430 --> 00:37:53,779
this sweets declaration into the node

00:37:50,449 --> 00:37:56,660
object so the deal with that is when

00:37:53,779 --> 00:37:58,609
sweets is up here it applies to both the

00:37:56,660 --> 00:38:01,039
node and browser environment so when

00:37:58,609 --> 00:38:03,019
you're running a node you will get

00:38:01,039 --> 00:38:04,999
whatever sweets are here and any sweets

00:38:03,019 --> 00:38:07,099
in this node block if you're running in

00:38:04,999 --> 00:38:08,959
a browser you get whatever the base

00:38:07,099 --> 00:38:12,619
sweets are plus any other sweets in

00:38:08,959 --> 00:38:16,459
browser we're just gonna stick this in

00:38:12,619 --> 00:38:19,489
node this means that we are only going

00:38:16,459 --> 00:38:20,989
to run these sweets in node which is

00:38:19,489 --> 00:38:22,939
fine because nodes the only one that can

00:38:20,989 --> 00:38:25,900
process the typescript and we're only

00:38:22,939 --> 00:38:28,910
going to run these sweets in the browser

00:38:25,900 --> 00:38:30,829
so now we've told intern what we want to

00:38:28,910 --> 00:38:32,869
run in the browser now we need to tell

00:38:30,829 --> 00:38:35,329
it what browsers we want to run these

00:38:32,869 --> 00:38:38,420
things in for that we use an

00:38:35,329 --> 00:38:40,640
environments property the environments

00:38:38,420 --> 00:38:42,650
property just tells in turn what

00:38:40,640 --> 00:38:45,650
environments we want to run our tests in

00:38:42,650 --> 00:38:47,989
by default is one environment and it's

00:38:45,650 --> 00:38:49,759
node we're gonna keep doing that and

00:38:47,989 --> 00:38:56,049
we're also gonna add another environment

00:38:49,759 --> 00:39:00,140
chrome okay so we have two environments

00:38:56,049 --> 00:39:03,859
let's go ahead and run our test and get

00:39:00,140 --> 00:39:06,109
in turn so now what we should see happen

00:39:03,859 --> 00:39:08,449
is where we're seeing this listening on

00:39:06,109 --> 00:39:11,779
localhost that's in turn starting a test

00:39:08,449 --> 00:39:13,999
server for the browser to load the test

00:39:11,779 --> 00:39:16,209
from and then we see it's starting a

00:39:13,999 --> 00:39:20,959
browser and we saw this stuff happening

00:39:16,209 --> 00:39:24,439
this stuff that is happening is in turn

00:39:20,959 --> 00:39:30,019
running feature tests in the browser to

00:39:24,439 --> 00:39:31,699
try to see if there are any any bits of

00:39:30,019 --> 00:39:34,009
functionality in the browser that are

00:39:31,699 --> 00:39:36,499
maybe operating in a non-standard way or

00:39:34,009 --> 00:39:38,359
that are broken or something because

00:39:36,499 --> 00:39:42,469
different browsers don't always work

00:39:38,359 --> 00:39:44,650
exactly the same way in turn tries to

00:39:42,469 --> 00:39:47,989
look for some of those differences and

00:39:44,650 --> 00:39:49,969
deal with them behind the scenes so that

00:39:47,989 --> 00:39:52,650
you don't have to make a lot of fiddly

00:39:49,969 --> 00:39:54,390
adjustments to your tests

00:39:52,650 --> 00:39:58,380
that can be a little bit annoying

00:39:54,390 --> 00:40:00,089
sometimes though so if you want if

00:39:58,380 --> 00:40:02,880
you're sure that you're using a modern

00:40:00,089 --> 00:40:07,319
browser that's probably implementing you

00:40:02,880 --> 00:40:09,510
know current engine jeaious specs pretty

00:40:07,319 --> 00:40:13,289
closely you can disable those feature

00:40:09,510 --> 00:40:17,010
tests and for that we can just use a

00:40:13,289 --> 00:40:19,650
slightly more you know long longer

00:40:17,010 --> 00:40:22,460
syntax for specification specifying our

00:40:19,650 --> 00:40:28,170
environment and we can say browser

00:40:22,460 --> 00:40:33,119
chrome fixed session capabilities we can

00:40:28,170 --> 00:40:35,160
set it to true false or no detect either

00:40:33,119 --> 00:40:36,990
one of these well you know for our

00:40:35,160 --> 00:40:41,760
purposes should be fine we'll just set

00:40:36,990 --> 00:40:45,029
it to false no detect basically sets

00:40:41,760 --> 00:40:46,619
some some internal properties if it

00:40:45,029 --> 00:40:48,779
happens to know something about a

00:40:46,619 --> 00:40:51,720
browser that might be broken like you

00:40:48,779 --> 00:40:53,760
know ie ten doesn't support this feature

00:40:51,720 --> 00:40:55,470
in turn maybe doesn't even need to test

00:40:53,760 --> 00:40:57,510
for that it just it's like oh this is ie

00:40:55,470 --> 00:41:00,059
ten we know this is broken

00:40:57,510 --> 00:41:04,049
that's what know detect us but in

00:41:00,059 --> 00:41:05,460
general Chrome should be fine so we're

00:41:04,049 --> 00:41:07,770
just going to disable that and the whole

00:41:05,460 --> 00:41:11,309
purpose of disabling this right here is

00:41:07,770 --> 00:41:14,970
just it makes our test run a bit faster

00:41:11,309 --> 00:41:19,079
in the browser so now if we run our

00:41:14,970 --> 00:41:20,700
tests we will see them run in node here

00:41:19,079 --> 00:41:25,109
very quickly and we'll see our browser

00:41:20,700 --> 00:41:26,520
pop up it will run the tests and it was

00:41:25,109 --> 00:41:28,140
much quicker that time there was none of

00:41:26,520 --> 00:41:34,230
you know the feature test running

00:41:28,140 --> 00:41:36,150
beforehand all right so this is pretty

00:41:34,230 --> 00:41:39,470
cool now we're running our tests in node

00:41:36,150 --> 00:41:39,470
we're running our tests in the browser

00:41:39,680 --> 00:41:45,119
in turn tries to make it easy to run

00:41:42,180 --> 00:41:47,279
your test kind of everywhere so in

00:41:45,119 --> 00:41:50,750
addition to you know what we're doing

00:41:47,279 --> 00:41:57,380
now we could add other browsers so say

00:41:50,750 --> 00:41:57,380
we could on Firefox

00:41:57,780 --> 00:42:08,440
okay so now if we run our tests we will

00:42:02,799 --> 00:42:10,780
see the node test happen we will see

00:42:08,440 --> 00:42:15,069
Firefox pop up and our test will run in

00:42:10,780 --> 00:42:17,530
Firefox so that's pretty sweet so we can

00:42:15,069 --> 00:42:21,099
run in different browsers we can also

00:42:17,530 --> 00:42:24,869
run on cloud services so if we wanted to

00:42:21,099 --> 00:42:28,920
in this case we could say all right

00:42:24,869 --> 00:42:32,890
we're going to use this tunnel variable

00:42:28,920 --> 00:42:36,069
to use a different basically a different

00:42:32,890 --> 00:42:39,670
target so what the tunnel is tunnels are

00:42:36,069 --> 00:42:42,220
a thing provided by an intern support

00:42:39,670 --> 00:42:44,289
library called Dig Dug and tunnels are

00:42:42,220 --> 00:42:47,170
what intern uses to talk to remote

00:42:44,289 --> 00:42:49,359
browsers so by default we're using the

00:42:47,170 --> 00:42:52,329
selenium tunnel that uses a local copy

00:42:49,359 --> 00:42:54,460
of selenium to talk to Chrome and

00:42:52,329 --> 00:42:58,119
Firefox and you know the browsers you

00:42:54,460 --> 00:43:01,900
have installed locally we can also hook

00:42:58,119 --> 00:43:05,200
up to cloud testing services and we can

00:43:01,900 --> 00:43:08,109
use a null tonal which basically tells

00:43:05,200 --> 00:43:10,779
in turn don't don't do anything you know

00:43:08,109 --> 00:43:12,819
I've I'm running a webdriver server or

00:43:10,779 --> 00:43:15,250
selenium sort of externally on my own

00:43:12,819 --> 00:43:18,640
just talk to it don't try to start your

00:43:15,250 --> 00:43:21,730
own but let's try let's try using

00:43:18,640 --> 00:43:22,960
browser stack just to kind of show that

00:43:21,730 --> 00:43:24,549
you don't really you know it's pretty

00:43:22,960 --> 00:43:26,170
easy to do that so we're changing you

00:43:24,549 --> 00:43:28,299
know it's gonna one line of config here

00:43:26,170 --> 00:43:33,180
and we're saying we want to use browser

00:43:28,299 --> 00:43:35,289
stack we're also going to set up some

00:43:33,180 --> 00:43:38,079
capabilities here that our browser stack

00:43:35,289 --> 00:43:39,579
specific just to make it a little easier

00:43:38,079 --> 00:43:41,920
to see them I was going to show them in

00:43:39,579 --> 00:43:48,099
the the browser stack dashboard you

00:43:41,920 --> 00:43:51,250
don't have to do this but we can whoops

00:43:48,099 --> 00:43:57,059
I can look up exactly what those are

00:43:51,250 --> 00:44:01,150
again let's set our build name to let's

00:43:57,059 --> 00:44:03,809
set our build name to Oh jsw and let's

00:44:01,150 --> 00:44:06,809
set our project named

00:44:03,809 --> 00:44:10,660
internal tutorial and again these are

00:44:06,809 --> 00:44:14,290
browserstack specific properties that

00:44:10,660 --> 00:44:16,720
we're setting this capabilities property

00:44:14,290 --> 00:44:21,609
are like these are settings that get

00:44:16,720 --> 00:44:25,569
passed to whatever browser or remote

00:44:21,609 --> 00:44:27,339
session that we are starting so that's

00:44:25,569 --> 00:44:30,760
just what goes in capabilities it's kind

00:44:27,339 --> 00:44:32,619
of a random metadata grab-bag so here

00:44:30,760 --> 00:44:35,680
we're saying we're going to run tests on

00:44:32,619 --> 00:44:37,210
browser stack and this again entirely

00:44:35,680 --> 00:44:40,750
optional it just makes it a little

00:44:37,210 --> 00:44:45,040
easier for us to see what what's going

00:44:40,750 --> 00:44:46,450
on with browser stack another thing to

00:44:45,040 --> 00:44:48,400
keep in mind is when you use any of

00:44:46,450 --> 00:44:50,770
these cloud services you do need to have

00:44:48,400 --> 00:44:52,450
an account so you'll need your own

00:44:50,770 --> 00:44:54,130
credentials to do that this little

00:44:52,450 --> 00:44:57,670
Artest thing that i'm throwing in the

00:44:54,130 --> 00:44:59,530
beginning here is just a script that i

00:44:57,670 --> 00:45:02,520
have that loads up some of my

00:44:59,530 --> 00:45:05,880
credentials into environment variables

00:45:02,520 --> 00:45:08,349
so we're gonna go ahead and run this and

00:45:05,880 --> 00:45:09,700
we will see it you know it's tunnel

00:45:08,349 --> 00:45:12,069
downloading and downloading the browser

00:45:09,700 --> 00:45:14,410
stack tunnel executable it runs a node

00:45:12,069 --> 00:45:16,690
test and then startup is a little bit

00:45:14,410 --> 00:45:20,589
slower here than it was for the local

00:45:16,690 --> 00:45:22,839
test but you can see that popped up very

00:45:20,589 --> 00:45:24,790
quickly actually relatively quickly and

00:45:22,839 --> 00:45:27,609
so it was a remote session chrome 83 on

00:45:24,790 --> 00:45:30,540
Windows if we go over here and we

00:45:27,609 --> 00:45:34,530
refresh the dashboard that I have open

00:45:30,540 --> 00:45:34,530
we don't see any builds

00:45:37,220 --> 00:45:46,819
[Music]

00:45:38,650 --> 00:45:49,220
oh there we go okay so this is our test

00:45:46,819 --> 00:45:51,619
run that's running right now and we can

00:45:49,220 --> 00:45:54,049
see we had Chrome and it ran and we had

00:45:51,619 --> 00:45:57,650
Firefox and it's still running

00:45:54,049 --> 00:45:59,270
and so with browser stack just as an

00:45:57,650 --> 00:46:01,250
example and the other services work

00:45:59,270 --> 00:46:03,710
similarly you can give a browser name

00:46:01,250 --> 00:46:06,230
and it just picks the most recent

00:46:03,710 --> 00:46:09,289
version and usually on Windows you can

00:46:06,230 --> 00:46:10,579
also specify browser versions or ranges

00:46:09,289 --> 00:46:12,200
of versions if you want to run on

00:46:10,579 --> 00:46:14,599
multiple versions and you can also

00:46:12,200 --> 00:46:17,780
specify the OS that you want to run

00:46:14,599 --> 00:46:22,010
tests on so you can do all of that just

00:46:17,780 --> 00:46:24,020
you know within this intern config so

00:46:22,010 --> 00:46:27,920
this is us running tests on browser

00:46:24,020 --> 00:46:31,880
stack so that is pretty sweet

00:46:27,920 --> 00:46:36,710
that we can do that except for our

00:46:31,880 --> 00:46:39,980
Firefox test which finished but our

00:46:36,710 --> 00:46:42,260
session didn't quite end oh there it

00:46:39,980 --> 00:46:47,869
goes okay Firefox a little slow to

00:46:42,260 --> 00:46:50,029
finish there anyway so so as I said you

00:46:47,869 --> 00:46:52,789
know all of this this tunnel system is

00:46:50,029 --> 00:46:55,460
provided by by Dig Dug that's the name

00:46:52,789 --> 00:47:00,619
of the intern package that handles that

00:46:55,460 --> 00:47:02,510
and it has again several tunnels so

00:47:00,619 --> 00:47:08,329
there are a couple more tests we can do

00:47:02,510 --> 00:47:09,619
as well actually I mean there are

00:47:08,329 --> 00:47:14,750
functional tests we haven't done any of

00:47:09,619 --> 00:47:16,190
those yet so for functional tests you

00:47:14,750 --> 00:47:17,839
know I mentioned those before the big

00:47:16,190 --> 00:47:20,150
deal about those is they involve

00:47:17,839 --> 00:47:23,960
browsers but they don't run in browsers

00:47:20,150 --> 00:47:26,480
and so this is just sort of an overview

00:47:23,960 --> 00:47:30,020
of what our functional testing API looks

00:47:26,480 --> 00:47:34,270
like you can see here that we're getting

00:47:30,020 --> 00:47:34,270
this remote object passed into the tests

00:47:34,869 --> 00:47:39,950
all tests and in turn are passed

00:47:37,430 --> 00:47:42,910
something they're passed a test with a

00:47:39,950 --> 00:47:45,440
capital T object one an instance of test

00:47:42,910 --> 00:47:47,029
but usually you don't need anything on

00:47:45,440 --> 00:47:50,569
that so we don't you know it's not

00:47:47,029 --> 00:47:51,320
usually shown in this case though we do

00:47:50,569 --> 00:47:56,060
need this

00:47:51,320 --> 00:47:57,800
remote property from the test and so the

00:47:56,060 --> 00:48:01,520
remote is what's going to give us access

00:47:57,800 --> 00:48:03,890
to our functional testing API the

00:48:01,520 --> 00:48:07,460
functional testing API is provided by an

00:48:03,890 --> 00:48:08,540
intern package called Leadfoot it's

00:48:07,460 --> 00:48:10,310
called that because when it was

00:48:08,540 --> 00:48:14,000
originally created it was a lot faster

00:48:10,310 --> 00:48:16,670
than any other webdriver API it's not

00:48:14,000 --> 00:48:19,670
not much of a difference now but it's

00:48:16,670 --> 00:48:22,520
still called Leadfoot but so Leadfoot

00:48:19,670 --> 00:48:25,490
s-- api is an asynchronous fluent you

00:48:22,520 --> 00:48:27,470
know a chained api so basically from

00:48:25,490 --> 00:48:30,740
from remote you will call something like

00:48:27,470 --> 00:48:33,530
get to load a webpage once you have a

00:48:30,740 --> 00:48:36,650
page you might call like fine by CSS

00:48:33,530 --> 00:48:39,770
selector or fine by name there's a

00:48:36,650 --> 00:48:41,300
variety of fine functions to locate

00:48:39,770 --> 00:48:43,670
elements that's a thing you might want

00:48:41,300 --> 00:48:45,380
to do once you have an element you can

00:48:43,670 --> 00:48:50,540
interact with it with like you know

00:48:45,380 --> 00:48:52,490
clicking and then you might also I mean

00:48:50,540 --> 00:48:54,140
you can get information from elements

00:48:52,490 --> 00:48:59,540
like in this example we're getting

00:48:54,140 --> 00:49:02,270
visible text you'll also notice that

00:48:59,540 --> 00:49:05,540
there's this end thing sitting in the

00:49:02,270 --> 00:49:09,260
middle of the command chain what that is

00:49:05,540 --> 00:49:12,650
is because excuse me

00:49:09,260 --> 00:49:14,380
so in our command chain you need to find

00:49:12,650 --> 00:49:17,720
elements and interact with them right

00:49:14,380 --> 00:49:20,930
but all of these commands are in a

00:49:17,720 --> 00:49:25,340
single chain so how do you decide what

00:49:20,930 --> 00:49:28,550
you were interacting with in turn in a

00:49:25,340 --> 00:49:31,100
single chain maintains a context element

00:49:28,550 --> 00:49:34,220
and the context element is kind of the

00:49:31,100 --> 00:49:36,410
the basis for what any following

00:49:34,220 --> 00:49:39,080
commands are going to you know work from

00:49:36,410 --> 00:49:41,480
so if you want to interact with an

00:49:39,080 --> 00:49:43,910
element you you find it and then it

00:49:41,480 --> 00:49:45,650
becomes the context element and then you

00:49:43,910 --> 00:49:47,750
you know any actions you take that are

00:49:45,650 --> 00:49:52,640
element specific like clicking or

00:49:47,750 --> 00:49:56,600
getting text or something those are done

00:49:52,640 --> 00:49:58,850
on the context element the context so in

00:49:56,600 --> 00:50:00,230
turn can can manage multiple context

00:49:58,850 --> 00:50:03,020
elements and they're stored in a stack

00:50:00,230 --> 00:50:05,040
and so

00:50:03,020 --> 00:50:08,130
you know when you when you do something

00:50:05,040 --> 00:50:10,560
that's on the context element if you

00:50:08,130 --> 00:50:13,110
want to sort of back up and work on a

00:50:10,560 --> 00:50:14,820
previous context element or just get rid

00:50:13,110 --> 00:50:17,430
of the whole context and just do

00:50:14,820 --> 00:50:20,580
something with reference to the entire

00:50:17,430 --> 00:50:23,070
page you call end and end just pop

00:50:20,580 --> 00:50:25,080
something off the stack so that's kind

00:50:23,070 --> 00:50:27,150
of what's going on there is so we find

00:50:25,080 --> 00:50:29,550
an element we do something with it we

00:50:27,150 --> 00:50:32,700
call end to wipe that back off the stack

00:50:29,550 --> 00:50:34,100
and then we find a new element and we do

00:50:32,700 --> 00:50:37,740
something with it

00:50:34,100 --> 00:50:39,930
and then we can make assertions we don't

00:50:37,740 --> 00:50:42,180
need to have an end at the end of the

00:50:39,930 --> 00:50:45,270
command chain because that whole context

00:50:42,180 --> 00:50:48,390
business is specific to a single command

00:50:45,270 --> 00:50:51,620
chain so you know once once we return

00:50:48,390 --> 00:50:55,200
this thing we're done with that

00:50:51,620 --> 00:50:58,620
another thing to really keep in mind is

00:50:55,200 --> 00:51:00,510
that the command API is asynchronous so

00:50:58,620 --> 00:51:02,640
the end of that command chain I mean

00:51:00,510 --> 00:51:05,670
it's it's a promise chain basically or a

00:51:02,640 --> 00:51:07,560
promise like chain so for in turn to

00:51:05,670 --> 00:51:12,930
wait for that to finish you need to make

00:51:07,560 --> 00:51:15,600
sure to return that chain so yeah that's

00:51:12,930 --> 00:51:18,180
that's the thing that I've seen and done

00:51:15,600 --> 00:51:19,770
myself forgotten to do because then your

00:51:18,180 --> 00:51:21,660
test starts to look great it's like oh

00:51:19,770 --> 00:51:23,280
it passed and then you'll see weird

00:51:21,660 --> 00:51:25,350
errors popping up later on in the

00:51:23,280 --> 00:51:27,000
testing process because those promises

00:51:25,350 --> 00:51:28,680
started failing or something and it's

00:51:27,000 --> 00:51:33,480
it's not good so you always want to

00:51:28,680 --> 00:51:35,220
return a command chain but that whole

00:51:33,480 --> 00:51:38,670
thing can become a little bit easier if

00:51:35,220 --> 00:51:41,550
you use async await so here's the same

00:51:38,670 --> 00:51:43,470
set of commands using the functional

00:51:41,550 --> 00:51:45,660
test API but just using async await

00:51:43,470 --> 00:51:49,650
instead of the fluent command chaining

00:51:45,660 --> 00:51:52,020
stuff and for this you can see we we

00:51:49,650 --> 00:51:54,180
call a get to get a page and we just

00:51:52,020 --> 00:51:56,730
await it and like when we look for an

00:51:54,180 --> 00:51:59,130
element we you know the fine by CSS

00:51:56,730 --> 00:52:00,960
selector method returns that element and

00:51:59,130 --> 00:52:03,690
it always does here we're just awaiting

00:52:00,960 --> 00:52:05,580
it so you know when that asynchronous

00:52:03,690 --> 00:52:09,360
call resolves we get the element out of

00:52:05,580 --> 00:52:11,280
it then we can call a method directly on

00:52:09,360 --> 00:52:13,440
the element so here we can you know get

00:52:11,280 --> 00:52:15,450
the button and then call click on the

00:52:13,440 --> 00:52:17,760
button we don't have to deal with

00:52:15,450 --> 00:52:19,559
the contact stack or popping things off

00:52:17,760 --> 00:52:21,000
of it or whatever so it's a little more

00:52:19,559 --> 00:52:25,680
verbose because we have awaits

00:52:21,000 --> 00:52:28,470
everywhere but it is I think a good deal

00:52:25,680 --> 00:52:30,750
cleaner to see you know to deal with to

00:52:28,470 --> 00:52:32,640
see what's going on it's it's a little

00:52:30,750 --> 00:52:34,589
more straightforward to work with so

00:52:32,640 --> 00:52:37,559
this is just another way of using the

00:52:34,589 --> 00:52:40,079
functional API that can potentially be

00:52:37,559 --> 00:52:45,390
cleaner but you know either way does

00:52:40,079 --> 00:52:49,319
work okay so let's write a functional

00:52:45,390 --> 00:52:50,819
test so to write a functional test we

00:52:49,319 --> 00:52:54,690
are going to make a directory and test

00:52:50,819 --> 00:52:56,700
called functional and we're going to

00:52:54,690 --> 00:53:00,539
write a functional test just for our

00:52:56,700 --> 00:53:03,660
whole app so we're going to call test

00:53:00,539 --> 00:53:08,010
functional app dot TS and we're going to

00:53:03,660 --> 00:53:13,579
do the whole the whole importing of our

00:53:08,010 --> 00:53:15,599
suite and test fit again suite test from

00:53:13,579 --> 00:53:20,880
I'm gonna remember that one of these

00:53:15,599 --> 00:53:31,980
days plug-in interface on TDD assert

00:53:20,880 --> 00:53:39,930
equals okay all right and then we say

00:53:31,980 --> 00:53:42,240
suite app and we see a test we're going

00:53:39,930 --> 00:53:44,099
to test padding to numbers that's going

00:53:42,240 --> 00:53:47,279
to be our first test so that will

00:53:44,099 --> 00:53:52,829
involve some button clicking and looking

00:53:47,279 --> 00:53:58,349
at the output add two numbers okay so we

00:53:52,829 --> 00:54:00,089
got a remote object okay so in our test

00:53:58,349 --> 00:54:01,619
the thing we're going to need to do is

00:54:00,089 --> 00:54:04,740
well the first thing we're going to want

00:54:01,619 --> 00:54:06,450
to do is load our test page yeah we're

00:54:04,740 --> 00:54:08,970
going to call this a sink so we can use

00:54:06,450 --> 00:54:13,009
async/await and we're going to say

00:54:08,970 --> 00:54:13,009
remote that get our test page

00:54:14,799 --> 00:54:18,699
then we're going to want to get some

00:54:16,449 --> 00:54:20,439
buttons and click them so if we're going

00:54:18,699 --> 00:54:22,779
to add two numbers let's let's add one

00:54:20,439 --> 00:54:28,269
plus two and make sure that they equal

00:54:22,779 --> 00:54:34,359
three so let's say 1 equals remote find

00:54:28,269 --> 00:54:39,429
by CSS selector button is 1 so for this

00:54:34,359 --> 00:54:43,509
app if we just go over and inspect it if

00:54:39,429 --> 00:54:45,009
I can see where my inspector is here we

00:54:43,509 --> 00:54:46,989
can just go look at our buttons and they

00:54:45,009 --> 00:54:50,799
all have you know their class names our

00:54:46,989 --> 00:54:53,079
button - the name of the button ok so we

00:54:50,799 --> 00:54:58,779
got the 1 button let's go ahead and a

00:54:53,079 --> 00:55:01,089
weight 1 dot click alright and just

00:54:58,779 --> 00:55:02,829
because this will run really fast when

00:55:01,089 --> 00:55:07,299
we run it let's go ahead and throw in

00:55:02,829 --> 00:55:10,829
asleep in here just for us humans so

00:55:07,299 --> 00:55:15,699
that we can see what what's going on

00:55:10,829 --> 00:55:17,229
when we're clicking these buttons if we

00:55:15,699 --> 00:55:18,819
don't I mean we don't you you wouldn't

00:55:17,229 --> 00:55:20,920
normally put this sleep in here and

00:55:18,819 --> 00:55:23,469
generally sleeps and tests are not a

00:55:20,920 --> 00:55:25,569
thing you should do but in this case

00:55:23,469 --> 00:55:27,339
like I said it's just just for the

00:55:25,569 --> 00:55:29,650
humans to be able to see this happening

00:55:27,339 --> 00:55:31,979
because otherwise it just goes by very

00:55:29,650 --> 00:55:31,979
fast

00:55:32,219 --> 00:55:38,859
alright so oh and in between

00:55:35,019 --> 00:55:48,249
clicking 1 & 2 we need to need to click

00:55:38,859 --> 00:55:56,529
+ ok so we click 1 we click + we click -

00:55:48,249 --> 00:55:59,949
now we need to click equals ok and now

00:55:56,529 --> 00:56:03,299
we need to read the display and see if

00:55:59,949 --> 00:56:03,299
it has the value we expect

00:56:05,600 --> 00:56:15,900
and the display is just called it uses

00:56:10,140 --> 00:56:19,820
the class display value equals weight

00:56:15,900 --> 00:56:23,940
displayed get text oops

00:56:19,820 --> 00:56:28,310
okay visible text all right and now

00:56:23,940 --> 00:56:31,140
we're going to assert equal value and

00:56:28,310 --> 00:56:34,530
one plus two should hopefully equals

00:56:31,140 --> 00:56:38,180
three all right so we have a functional

00:56:34,530 --> 00:56:41,610
test now our functional test gets a page

00:56:38,180 --> 00:56:43,650
it clicks some buttons and then it reads

00:56:41,610 --> 00:56:45,720
the value from the display and again

00:56:43,650 --> 00:56:47,850
this is you know all sort of um a human

00:56:45,720 --> 00:56:50,190
centric perspective the way the things

00:56:47,850 --> 00:56:52,560
we have available to do are in general

00:56:50,190 --> 00:56:57,930
what a person looking at this web app

00:56:52,560 --> 00:57:00,480
would be able to do we also need to make

00:56:57,930 --> 00:57:04,110
I think one more change to our intern

00:57:00,480 --> 00:57:05,880
JSON file well we need to make two

00:57:04,110 --> 00:57:09,590
changes one we need to tell this thing

00:57:05,880 --> 00:57:17,220
that we have some functional Suites so

00:57:09,590 --> 00:57:19,830
those are functional even though

00:57:17,220 --> 00:57:21,980
functional Suites only applied a node we

00:57:19,830 --> 00:57:25,140
don't actually put them in the node

00:57:21,980 --> 00:57:28,380
object that's just kind of historical

00:57:25,140 --> 00:57:30,600
inconsistency at the moment but yeah

00:57:28,380 --> 00:57:32,730
functional Suites only applaud a node if

00:57:30,600 --> 00:57:35,640
you load this config in a browser the

00:57:32,730 --> 00:57:37,740
browser the the intern and the browser

00:57:35,640 --> 00:57:39,930
is smart enough to know that it can't

00:57:37,740 --> 00:57:44,100
run functional tests so it just ignores

00:57:39,930 --> 00:57:48,030
this we also want to specify a

00:57:44,100 --> 00:57:50,610
functional timeouts this is necessary

00:57:48,030 --> 00:57:53,250
because it didn't used to be necessary

00:57:50,610 --> 00:57:56,970
but it has become necessary and I just

00:57:53,250 --> 00:58:00,330
haven't put a default and intern yet but

00:57:56,970 --> 00:58:05,240
the idea is when you do these functional

00:58:00,330 --> 00:58:07,890
commands like gets and finds and such

00:58:05,240 --> 00:58:09,450
there are timeouts so that if you know

00:58:07,890 --> 00:58:10,860
you make one of these calls and it takes

00:58:09,450 --> 00:58:13,560
too long there's a timeout

00:58:10,860 --> 00:58:18,140
this is managed not by in turn but

00:58:13,560 --> 00:58:18,140
externally by selenium or webdriver

00:58:18,160 --> 00:58:24,490
and so they used to have reasonable

00:58:22,210 --> 00:58:28,090
defaults and for most browsers now

00:58:24,490 --> 00:58:29,980
there's zero and so with a zero time out

00:58:28,090 --> 00:58:32,710
most of your things will start to time

00:58:29,980 --> 00:58:34,480
out pretty quickly so it's good to set

00:58:32,710 --> 00:58:35,200
some defaults for these functional

00:58:34,480 --> 00:58:38,320
timeouts

00:58:35,200 --> 00:58:41,440
but again future version of in turn will

00:58:38,320 --> 00:58:44,410
do that this particular thing

00:58:41,440 --> 00:58:46,540
automatically all right so we have

00:58:44,410 --> 00:58:51,280
functional sweets we have functional

00:58:46,540 --> 00:58:52,420
timeouts we have our tests let's see if

00:58:51,280 --> 00:58:59,020
it actually works

00:58:52,420 --> 00:59:02,170
oh yeah let's also disable this browser

00:58:59,020 --> 00:59:05,680
stack but another interesting thing is

00:59:02,170 --> 00:59:07,570
in turns config file is JSON but it's

00:59:05,680 --> 00:59:09,880
sort of an extended JSON that supports

00:59:07,570 --> 00:59:14,500
comments so you can comment things out

00:59:09,880 --> 00:59:17,860
in an intern config let's also comment

00:59:14,500 --> 00:59:21,310
out one of our browsers here again just

00:59:17,860 --> 00:59:23,710
to make this a little bit faster so if

00:59:21,310 --> 00:59:26,650
we run our tests now we're gonna see our

00:59:23,710 --> 00:59:29,230
unit tests run in node we're gonna see

00:59:26,650 --> 00:59:30,910
Firefox pop up we'll see our unit test

00:59:29,230 --> 00:59:33,910
result happened and then we're seeing

00:59:30,910 --> 00:59:38,020
our buttons being clicked right now for

00:59:33,910 --> 00:59:39,100
our functional tests and so even with

00:59:38,020 --> 00:59:41,260
the one-second Waits

00:59:39,100 --> 00:59:43,960
that was a little snappy so if we open

00:59:41,260 --> 00:59:47,320
it up again just to kind of catch it

00:59:43,960 --> 00:59:50,950
again we see browser now we see it click

00:59:47,320 --> 00:59:51,880
one click plus click to click equals and

00:59:50,950 --> 00:59:57,720
we're done

00:59:51,880 --> 01:00:01,870
and so we see this test pass so that is

00:59:57,720 --> 01:00:04,330
a pretty simple functional test and just

01:00:01,870 --> 01:00:06,550
like our unit test we can run our

01:00:04,330 --> 01:00:08,380
functional test on browser stack or on

01:00:06,550 --> 01:00:10,360
sauce labs or whatever on different

01:00:08,380 --> 01:00:14,050
combinations of browsers and operating

01:00:10,360 --> 01:00:16,060
system so we can basically ensure that

01:00:14,050 --> 01:00:18,790
our application is behaving the way that

01:00:16,060 --> 01:00:22,950
we want in all the combinations of

01:00:18,790 --> 01:00:22,950
things that we needed to run in

01:00:23,970 --> 01:00:28,920
in addition to you know basic functional

01:00:27,030 --> 01:00:32,460
tests in turn has a couple of you know

01:00:28,920 --> 01:00:37,590
pre-built plugins to run other kinds of

01:00:32,460 --> 01:00:40,020
you know functional tests async excuse

01:00:37,590 --> 01:00:42,060
me accessibility and visual regression

01:00:40,020 --> 01:00:45,900
test and I mean these are pretty simple

01:00:42,060 --> 01:00:47,940
implementations of these tests but they

01:00:45,900 --> 01:00:49,740
are enough to handle simple cases and

01:00:47,940 --> 01:00:52,260
they again kind of work out of the box

01:00:49,740 --> 01:00:55,500
there so just to give you a quick taste

01:00:52,260 --> 01:00:57,630
for what those look like let's go ahead

01:00:55,500 --> 01:01:05,340
and install the packages we would need

01:00:57,630 --> 01:01:13,770
for those let's grab the intern Y and

01:01:05,340 --> 01:01:15,570
the intern plugin so again the

01:01:13,770 --> 01:01:18,410
accessibility one is looking for

01:01:15,570 --> 01:01:20,580
accessibility checks so like you know

01:01:18,410 --> 01:01:23,850
missing alt tags and an image element

01:01:20,580 --> 01:01:25,370
for example or things like that it uses

01:01:23,850 --> 01:01:28,290
you know there are a couple of different

01:01:25,370 --> 01:01:31,050
external tools in turn users to do that

01:01:28,290 --> 01:01:33,690
one is ax which is a local library one

01:01:31,050 --> 01:01:37,500
is tenon which is a cloud service that

01:01:33,690 --> 01:01:39,450
you need an account on the other you

01:01:37,500 --> 01:01:42,510
know our visual plug-in tests here does

01:01:39,450 --> 01:01:46,140
simple visual regression testing and so

01:01:42,510 --> 01:01:49,380
it will basically take a snapshot of

01:01:46,140 --> 01:01:51,630
your page and then later when you run

01:01:49,380 --> 01:01:54,450
tests it will compare a rendering of

01:01:51,630 --> 01:01:59,280
your page against that snapshot and if

01:01:54,450 --> 01:02:01,980
it differs that'll tell you so are you

01:01:59,280 --> 01:02:03,210
know quick and dirty test for these well

01:02:01,980 --> 01:02:06,060
look pretty much like what's on the

01:02:03,210 --> 01:02:11,810
slide there let's just call this one a

01:02:06,060 --> 01:02:11,810
1:1 why check mate

01:02:16,990 --> 01:02:24,170
wait stop check you need to pass it the

01:02:22,700 --> 01:02:27,500
remote and when you have to give up the

01:02:24,170 --> 01:02:29,270
source URL that we want to test which is

01:02:27,500 --> 01:02:34,000
the same thing we're using for our

01:02:29,270 --> 01:02:40,040
functional tests up there HTTP localhost

01:02:34,000 --> 01:02:42,740
3000 we do need to import that ax and

01:02:40,040 --> 01:02:45,560
deal so that we haven't actually I think

01:02:42,740 --> 01:02:56,630
the I think the import is called

01:02:45,560 --> 01:03:01,190
services from and then this is services

01:02:56,630 --> 01:03:03,200
X ok so this is an accessibility test

01:03:01,190 --> 01:03:10,580
and let's go ahead and throw in our

01:03:03,200 --> 01:03:12,170
visual regression test 2 and in this one

01:03:10,580 --> 01:03:15,170
this one's a little interesting because

01:03:12,170 --> 01:03:17,000
we have a helper function that actually

01:03:15,170 --> 01:03:18,590
just writes the whole test for us and

01:03:17,000 --> 01:03:19,510
you know that creates the test function

01:03:18,590 --> 01:03:22,700
for us

01:03:19,510 --> 01:03:32,720
so from this plug-in we are going to

01:03:22,700 --> 01:03:37,520
grab visual test ok and so here we're

01:03:32,720 --> 01:03:40,580
just going to call this visual test and

01:03:37,520 --> 01:03:47,359
it takes a URL which again same with

01:03:40,580 --> 01:03:49,190
this one and it takes this missing

01:03:47,359 --> 01:03:51,350
baseline property which is telling it

01:03:49,190 --> 01:03:53,630
what to do sort of in the initial case

01:03:51,350 --> 01:03:55,280
if there's no baseline should it you

01:03:53,630 --> 01:03:57,740
know whine about that or should it just

01:03:55,280 --> 01:04:02,900
take a new snapshot so we're telling it

01:03:57,740 --> 01:04:07,280
take a new snapshot parenthesis there ok

01:04:02,900 --> 01:04:09,200
so now we've added a 101 Y or

01:04:07,280 --> 01:04:12,140
accessibility and visual regression

01:04:09,200 --> 01:04:14,260
tests and again these are just very

01:04:12,140 --> 01:04:16,910
basic tests using these these two

01:04:14,260 --> 01:04:22,609
already existing plugins that exist for

01:04:16,910 --> 01:04:23,970
in turn so if we run these tests just go

01:04:22,609 --> 01:04:28,290
ahead and do that

01:04:23,970 --> 01:04:31,320
both of them actually the accessibility

01:04:28,290 --> 01:04:35,040
test will fail the visual test should

01:04:31,320 --> 01:04:36,750
pass by default the accessibility test

01:04:35,040 --> 01:04:38,340
is going to fail for the same reason

01:04:36,750 --> 01:04:43,830
that react has been whining about us

01:04:38,340 --> 01:04:46,710
this whole time this missing alt text so

01:04:43,830 --> 01:04:49,560
if we go look up here we see that our

01:04:46,710 --> 01:04:54,210
accessibility test failed a violation

01:04:49,560 --> 01:04:57,750
was logged but our visual test down here

01:04:54,210 --> 01:05:01,200
was fine so let's go take a quick look

01:04:57,750 --> 01:05:06,930
at our at what happened there so we have

01:05:01,200 --> 01:05:10,110
this accessibility report so if we go

01:05:06,930 --> 01:05:12,390
look in this accessibility report we see

01:05:10,110 --> 01:05:15,680
that there is an html5 this is our

01:05:12,390 --> 01:05:18,880
report if we open this

01:05:15,680 --> 01:05:18,880
[Music]

01:05:22,700 --> 01:05:30,440
Oh what did I do oh there we go

01:05:27,859 --> 01:05:32,869
sorry it was Firefox if we if we open

01:05:30,440 --> 01:05:36,740
our report here we see that it's telling

01:05:32,869 --> 01:05:42,650
us what was wrong that the app logo

01:05:36,740 --> 01:05:45,710
image doesn't have alt text so if we go

01:05:42,650 --> 01:05:47,660
into our app where we have our image

01:05:45,710 --> 01:05:51,470
sure enough there's no alt text and

01:05:47,660 --> 01:05:54,800
again es Lent was whining about this the

01:05:51,470 --> 01:05:56,480
entire time - so probably would have

01:05:54,800 --> 01:05:58,099
caught that with our current tooling but

01:05:56,480 --> 01:06:01,520
you can certainly imagine situations

01:05:58,099 --> 01:06:04,730
where wouldn't so if we just add an

01:06:01,520 --> 01:06:08,720
intern logo alt tag tag there and we run

01:06:04,730 --> 01:06:12,339
our test again we will see that our

01:06:08,720 --> 01:06:12,339
accessibility check passes

01:06:23,170 --> 01:06:30,460
all right so that passed as far as the

01:06:27,160 --> 01:06:33,190
visual test goes that's testing visual

01:06:30,460 --> 01:06:36,190
code so you know we haven't seen any

01:06:33,190 --> 01:06:39,360
violations with that yet if we go induce

01:06:36,190 --> 01:06:42,730
if we change some visual aspect of our

01:06:39,360 --> 01:06:45,130
application for example let's go change

01:06:42,730 --> 01:06:49,870
the size of our little intern logo down

01:06:45,130 --> 01:06:53,590
there and let's do that in actually

01:06:49,870 --> 01:06:56,620
let's just remove it ok so now the logo

01:06:53,590 --> 01:06:59,310
is gone so now let's run our tests and

01:06:56,620 --> 01:06:59,310
see what happens

01:07:05,330 --> 01:07:10,220
okay so we can see it doing the

01:07:08,000 --> 01:07:11,930
functional test the a11y test was fun

01:07:10,220 --> 01:07:17,750
but now our visual regression test

01:07:11,930 --> 01:07:19,490
failed okay so we have you know we can

01:07:17,750 --> 01:07:21,980
see up here error failed visual

01:07:19,490 --> 01:07:25,630
regression we have this visual test

01:07:21,980 --> 01:07:29,060
directory that gets generated by the

01:07:25,630 --> 01:07:34,870
dividual regression plug-in here and it

01:07:29,060 --> 01:07:37,700
has a report so we can open that report

01:07:34,870 --> 01:07:41,660
not the a11y report the visual test

01:07:37,700 --> 01:07:45,200
report and if we open that we see down

01:07:41,660 --> 01:07:48,170
here this red vertical you know line

01:07:45,200 --> 01:07:49,520
business that is what it looks like when

01:07:48,170 --> 01:07:52,310
the visual regression test is

01:07:49,520 --> 01:07:55,160
highlighting the problem and so the

01:07:52,310 --> 01:07:59,270
problem is right here and in this case

01:07:55,160 --> 01:08:01,970
it's that thing is gone so again it's a

01:07:59,270 --> 01:08:05,810
it's a simple visual regression test

01:08:01,970 --> 01:08:08,090
it's not you know you won't be able to

01:08:05,810 --> 01:08:10,490
use it for super complex situations but

01:08:08,090 --> 01:08:12,470
again it is sort of an example of what

01:08:10,490 --> 01:08:14,960
you can do with in turn just with

01:08:12,470 --> 01:08:21,560
writing fairly you know straightforward

01:08:14,960 --> 01:08:25,700
easy to use plugins so hopefully this

01:08:21,560 --> 01:08:27,230
has given you a reasonable overview and

01:08:25,700 --> 01:08:29,030
I know it wasn't it wasn't in great

01:08:27,230 --> 01:08:32,299
depth but hopefully you've gotten sort

01:08:29,030 --> 01:08:34,310
of a sense of what you can do an intern

01:08:32,299 --> 01:08:37,760
and at least how to get started with it

01:08:34,310 --> 01:08:40,460
and how to approach using intern and so

01:08:37,760 --> 01:08:43,640
here we have a number of resources we

01:08:40,460 --> 01:08:46,549
have links to various places where

01:08:43,640 --> 01:08:50,000
intern information is the intern is the

01:08:46,549 --> 01:08:52,100
main website with links to all of the

01:08:50,000 --> 01:08:55,760
sub projects and it has all the you know

01:08:52,100 --> 01:08:59,150
project and API documentation we have

01:08:55,760 --> 01:09:01,339
the intern is the main repo the intern

01:08:59,150 --> 01:09:05,180
visual plug-in and a11y or their own

01:09:01,339 --> 01:09:08,299
repos there choi jae s's api is what we

01:09:05,180 --> 01:09:11,150
use for assertions and you know we

01:09:08,299 --> 01:09:13,549
mentioned browser stack and so all of

01:09:11,150 --> 01:09:15,650
the web services have their own versions

01:09:13,549 --> 01:09:18,799
of this but this is where browser stack

01:09:15,650 --> 01:09:19,010
describes the different capabilities you

01:09:18,799 --> 01:09:21,380
can

01:09:19,010 --> 01:09:24,560
years like we passed in that that

01:09:21,380 --> 01:09:27,290
project name and build name there are a

01:09:24,560 --> 01:09:30,350
variety of other properties you can send

01:09:27,290 --> 01:09:33,350
into browser stack and they're described

01:09:30,350 --> 01:09:35,150
there if you have questions or you need

01:09:33,350 --> 01:09:37,700
help there are a couple of good

01:09:35,150 --> 01:09:41,870
resources there's the get er channel for

01:09:37,700 --> 01:09:44,690
the intern I am always on there so you

01:09:41,870 --> 01:09:46,880
can always ask questions there and you

01:09:44,690 --> 01:09:49,880
can also always ask questions on Stack

01:09:46,880 --> 01:09:53,150
Overflow using the tag intern so

01:09:49,880 --> 01:09:55,760
hopefully this has been an informative

01:09:53,150 --> 01:10:00,340
workshop and if you have any questions

01:09:55,760 --> 01:10:00,340

YouTube URL: https://www.youtube.com/watch?v=mCijRVgVOGI


