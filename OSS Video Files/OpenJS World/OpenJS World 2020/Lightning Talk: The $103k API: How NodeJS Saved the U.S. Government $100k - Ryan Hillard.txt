Title: Lightning Talk: The $103k API: How NodeJS Saved the U.S. Government $100k - Ryan Hillard
Publication date: 2020-06-18
Playlist: OpenJS World 2020
Description: 
	Lightning Talk: The $103k API: How NodeJS Saved the U.S. Government $100k - Ryan Hillard, U.S. Small Business Administration
Captions: 
	00:00:06,440 --> 00:00:10,710
good afternoon my name is Ryan Hillard

00:00:09,330 --> 00:00:13,290
and I work for the US Small Business

00:00:10,710 --> 00:00:16,350
Administration I'm here to share with

00:00:13,290 --> 00:00:17,720
you one of my misadventures so last year

00:00:16,350 --> 00:00:20,640
I got a call for help

00:00:17,720 --> 00:00:22,740
things were behind schedule people

00:00:20,640 --> 00:00:24,630
weren't cooperating and there were lots

00:00:22,740 --> 00:00:28,529
of technical issues happening with this

00:00:24,630 --> 00:00:31,260
project so I dug in I had a bunch of

00:00:28,529 --> 00:00:33,450
calls sent a bunch of emails did some

00:00:31,260 --> 00:00:36,780
meetings I figured out what was going on

00:00:33,450 --> 00:00:39,450
we had an old system that had external

00:00:36,780 --> 00:00:41,940
users and internal users that had been

00:00:39,450 --> 00:00:44,690
migrated to the cloud but the external

00:00:41,940 --> 00:00:47,640
users hadn't been taken into account

00:00:44,690 --> 00:00:50,370
this system is a case management system

00:00:47,640 --> 00:00:53,219
for the agency to receive feedback from

00:00:50,370 --> 00:00:56,460
the public and then process it well

00:00:53,219 --> 00:00:58,109
because of how our security works in our

00:00:56,460 --> 00:01:01,140
new system we weren't going to allow

00:00:58,109 --> 00:01:04,170
external users to access it so I sat

00:01:01,140 --> 00:01:06,600
back and I thought hmmm I wonder if the

00:01:04,170 --> 00:01:11,010
case management system could expose an

00:01:06,600 --> 00:01:15,119
API so people could open cases from a

00:01:11,010 --> 00:01:18,090
generic form well we asked the vendor to

00:01:15,119 --> 00:01:20,939
expose an API like that and they came

00:01:18,090 --> 00:01:23,520
back with an obscene quote a hundred and

00:01:20,939 --> 00:01:27,330
three thousand dollars this is how I

00:01:23,520 --> 00:01:30,659
felt and we took a little pause because

00:01:27,330 --> 00:01:32,009
we were pretty unhappy so we went back

00:01:30,659 --> 00:01:34,320
to the drawing board and we looked at

00:01:32,009 --> 00:01:37,079
the stated requirements we needed a form

00:01:34,320 --> 00:01:39,960
it's got to be interactive and it's got

00:01:37,079 --> 00:01:42,000
to move some data pretty simple but the

00:01:39,960 --> 00:01:44,130
situation isn't the unstated

00:01:42,000 --> 00:01:45,810
requirements are that that forms gonna

00:01:44,130 --> 00:01:48,240
live for a long time

00:01:45,810 --> 00:01:50,369
we have limited budget to do it with

00:01:48,240 --> 00:01:53,009
we're not gonna really be able to

00:01:50,369 --> 00:01:55,710
maintain it and so therefore it needs to

00:01:53,009 --> 00:01:58,860
be secure from the beginning so I

00:01:55,710 --> 00:02:01,110
immediately turned to s3 Amazon simple

00:01:58,860 --> 00:02:04,939
storage service to put this on the

00:02:01,110 --> 00:02:08,479
internet without the need of a server

00:02:04,939 --> 00:02:11,430
for the backend we looked at AWS lambda

00:02:08,479 --> 00:02:12,870
the function as a service offering and

00:02:11,430 --> 00:02:15,780
running our code

00:02:12,870 --> 00:02:17,790
using nodejs I wanted to use node

00:02:15,780 --> 00:02:20,190
because I wanted any web developer that

00:02:17,790 --> 00:02:23,640
comes along after me to be able to jump

00:02:20,190 --> 00:02:27,120
in and hit the ground running so looking

00:02:23,640 --> 00:02:28,739
at the requirements the client needs to

00:02:27,120 --> 00:02:30,629
be able to support this interaction

00:02:28,739 --> 00:02:33,239
where if someone wants to remain an

00:02:30,629 --> 00:02:37,049
anonymous we don't force them to fill

00:02:33,239 --> 00:02:38,610
out all of the contact information well

00:02:37,049 --> 00:02:40,680
we could do that with something fancy

00:02:38,610 --> 00:02:43,680
but after looking at the requirement it

00:02:40,680 --> 00:02:48,359
was clear that the normal get element by

00:02:43,680 --> 00:02:51,000
ID API in the Dom would get us there so

00:02:48,359 --> 00:02:53,370
we ended up leveraging that another

00:02:51,000 --> 00:02:56,730
requirement is this concept of an auto

00:02:53,370 --> 00:02:59,519
filling date so we looked at that as

00:02:56,730 --> 00:03:02,640
well and well you could grab a library

00:02:59,519 --> 00:03:04,859
like moment to do that it would be way

00:03:02,640 --> 00:03:08,790
overkill seven lines of vanilla

00:03:04,859 --> 00:03:11,040
JavaScript get us there so all in all we

00:03:08,790 --> 00:03:16,470
have about 300 lines of code making up

00:03:11,040 --> 00:03:20,010
our client and our server is using core

00:03:16,470 --> 00:03:22,709
features and node to prove out the

00:03:20,010 --> 00:03:24,959
concept so we're using query string to

00:03:22,709 --> 00:03:27,510
parse the event we're pulling out the

00:03:24,959 --> 00:03:30,000
data we need and to demonstrate that we

00:03:27,510 --> 00:03:32,609
have everything in terms of contact

00:03:30,000 --> 00:03:34,349
information in case management and then

00:03:32,609 --> 00:03:38,879
we're sending it back to the user as a

00:03:34,349 --> 00:03:42,209
proof of concept 21 lines of node code

00:03:38,879 --> 00:03:44,400
get us there so I want to stop here

00:03:42,209 --> 00:03:47,010
because during the pandemic I've been

00:03:44,400 --> 00:03:50,519
learning woodworking this is a wooden

00:03:47,010 --> 00:03:52,379
biscuit it's an interface much like

00:03:50,519 --> 00:03:54,480
software development woodworking has

00:03:52,379 --> 00:03:56,040
interfaces and the wooden biscuit

00:03:54,480 --> 00:03:59,370
pictured on screen and I'm holding up

00:03:56,040 --> 00:04:01,440
here it helps two pieces of wood fit

00:03:59,370 --> 00:04:03,989
well together but what's cool about it

00:04:01,440 --> 00:04:06,959
is that it can slide back and forth and

00:04:03,989 --> 00:04:07,680
be a little dynamic and fit in where it

00:04:06,959 --> 00:04:10,440
needs to

00:04:07,680 --> 00:04:11,459
well no js' is like that in the software

00:04:10,440 --> 00:04:14,129
development world

00:04:11,459 --> 00:04:18,359
I love node because of its versatility

00:04:14,129 --> 00:04:20,010
and its dynamism so once you combine

00:04:18,359 --> 00:04:23,039
node with the function as a service

00:04:20,010 --> 00:04:24,930
offering like lambda you can start to do

00:04:23,039 --> 00:04:26,100
really cool stuff like take these

00:04:24,930 --> 00:04:29,550
misaligned edges

00:04:26,100 --> 00:04:31,410
and start to piece them together so

00:04:29,550 --> 00:04:33,000
stepping back for a second

00:04:31,410 --> 00:04:35,760
what's the maintenance cycle look like

00:04:33,000 --> 00:04:38,580
for our solution well we don't actually

00:04:35,760 --> 00:04:40,950
have any external dependencies except

00:04:38,580 --> 00:04:44,940
for the managed services from Emma's

00:04:40,950 --> 00:04:46,440
from AWS and so what we really need to

00:04:44,940 --> 00:04:48,960
worry about is upgrading our lambda

00:04:46,440 --> 00:04:52,920
runtime every two to three years when a

00:04:48,960 --> 00:04:54,780
new LTS comes in to favor John King

00:04:52,920 --> 00:04:56,910
asked this great question what's the

00:04:54,780 --> 00:04:59,100
actual lifetime of the decision you're

00:04:56,910 --> 00:05:00,600
making are you taking four years to

00:04:59,100 --> 00:05:05,430
build a system that's only gonna live

00:05:00,600 --> 00:05:08,040
for five thinking about the incredible

00:05:05,430 --> 00:05:08,910
expansive nature of the JavaScript

00:05:08,040 --> 00:05:11,550
ecosystem

00:05:08,910 --> 00:05:13,410
I wonder if sometimes we're pulling in

00:05:11,550 --> 00:05:15,630
so much code that we can't really

00:05:13,410 --> 00:05:17,430
maintain it Jack Kinsella asked this

00:05:15,630 --> 00:05:19,650
question has someone written a book

00:05:17,430 --> 00:05:21,720
about one of your dependencies if they

00:05:19,650 --> 00:05:23,850
have there's probably so much complexity

00:05:21,720 --> 00:05:26,370
in that dependency that there's no way

00:05:23,850 --> 00:05:28,470
you're fully understanding it don't end

00:05:26,370 --> 00:05:31,230
up like me this is a real picture from

00:05:28,470 --> 00:05:34,980
one of my repositories with 52 open

00:05:31,230 --> 00:05:37,110
security alerts on it Dan McKinley

00:05:34,980 --> 00:05:39,060
finally rounds us out with this great

00:05:37,110 --> 00:05:41,100
question how would we solve the problem

00:05:39,060 --> 00:05:44,760
at hand without adding anything new I

00:05:41,100 --> 00:05:46,710
would upon that maybe our toolkit should

00:05:44,760 --> 00:05:49,160
look a little bit more like this and

00:05:46,710 --> 00:05:53,790
less like that giant expansive

00:05:49,160 --> 00:05:55,290
intimidating wall of 500 wrenches so

00:05:53,790 --> 00:05:57,780
I'll leave you with one final question

00:05:55,290 --> 00:06:00,720
which is what's the smallest tool for

00:05:57,780 --> 00:06:02,610
the job for us we spent about three

00:06:00,720 --> 00:06:05,090
thousand dollars in labor and we didn't

00:06:02,610 --> 00:06:10,220
use anything novel if we used node

00:06:05,090 --> 00:06:13,980
lambda and s3 to solve a problem for

00:06:10,220 --> 00:06:16,620
cheaper better faster thank you so much

00:06:13,980 --> 00:06:19,700
and enjoy your open j/s world have a

00:06:16,620 --> 00:06:19,700

YouTube URL: https://www.youtube.com/watch?v=2S_e5xz01mE


