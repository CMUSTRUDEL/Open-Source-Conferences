Title: Workshop: Dead-Simple Testing with Mocha - Christopher Hiller, IBM
Publication date: 2020-06-25
Playlist: OpenJS World 2020
Description: 
	
Captions: 
	00:00:00,160 --> 00:00:05,920
uh this is a workshop

00:00:03,360 --> 00:00:07,520
and the workshop is dead simple testing

00:00:05,920 --> 00:00:10,639
with mocha

00:00:07,520 --> 00:00:15,280
um my name's chris hiller

00:00:10,639 --> 00:00:17,039
and uh here we are at openjs world 2020.

00:00:15,280 --> 00:00:18,560
um let me tell you a little bit about

00:00:17,039 --> 00:00:22,640
myself

00:00:18,560 --> 00:00:25,680
i'm a developer advocate at ibm

00:00:22,640 --> 00:00:28,880
a node.js core collaborator

00:00:25,680 --> 00:00:30,560
a moca maintainer so maybe a subject

00:00:28,880 --> 00:00:33,360
matter expert

00:00:30,560 --> 00:00:35,760
and um an openjs foundation cross

00:00:33,360 --> 00:00:38,800
project council voting member

00:00:35,760 --> 00:00:40,879
on github i am bone skull

00:00:38,800 --> 00:00:42,960
and on twitter i'm bone skull with a

00:00:40,879 --> 00:00:45,680
zero instead of an o

00:00:42,960 --> 00:00:47,600
and to the right is my avatar which is

00:00:45,680 --> 00:00:51,840
like a smirking

00:00:47,600 --> 00:00:55,039
orange skull in a black circle

00:00:51,840 --> 00:00:59,520
and so uh before

00:00:55,039 --> 00:01:03,120
before i talk about this workshop um

00:00:59,520 --> 00:01:04,799
i need y'all to install some stuff

00:01:03,120 --> 00:01:06,560
you probably have most of this installed

00:01:04,799 --> 00:01:09,360
if not all of it but

00:01:06,560 --> 00:01:09,840
to do this workshop um you're going to

00:01:09,360 --> 00:01:13,040
need

00:01:09,840 --> 00:01:16,240
node version 12 or newer

00:01:13,040 --> 00:01:18,080
uh get version two point

00:01:16,240 --> 00:01:20,320
something i don't think it matters too

00:01:18,080 --> 00:01:23,040
much uh you're gonna want

00:01:20,320 --> 00:01:23,759
um actually you aren't gonna need a web

00:01:23,040 --> 00:01:26,720
browser

00:01:23,759 --> 00:01:28,000
um but you will need a command line

00:01:26,720 --> 00:01:31,119
terminal app

00:01:28,000 --> 00:01:35,360
and you're going to need a a text editor

00:01:31,119 --> 00:01:38,560
or an ide of your choice so while i'm

00:01:35,360 --> 00:01:40,799
um you know talking here

00:01:38,560 --> 00:01:42,960
please download those things get them

00:01:40,799 --> 00:01:46,240
installed

00:01:42,960 --> 00:01:46,240
so um

00:01:46,880 --> 00:01:52,960
all right this is the

00:01:50,320 --> 00:01:54,240
outline of this workshop i'm going to

00:01:52,960 --> 00:01:55,680
start by talking about some of the

00:01:54,240 --> 00:01:57,920
conventions

00:01:55,680 --> 00:01:59,439
um that we're going to use here and and

00:01:57,920 --> 00:02:02,320
how this is going to go

00:01:59,439 --> 00:02:03,280
uh next i'll i'll uh get you set up with

00:02:02,320 --> 00:02:06,320
the

00:02:03,280 --> 00:02:09,119
materials um then

00:02:06,320 --> 00:02:09,920
i'm going to talk about testing kind of

00:02:09,119 --> 00:02:13,280
just

00:02:09,920 --> 00:02:14,879
fun uh fundamentals of testing uh

00:02:13,280 --> 00:02:16,720
i'll walk you if you're writing some

00:02:14,879 --> 00:02:17,440
tests and then finally we'll take those

00:02:16,720 --> 00:02:21,120
tests

00:02:17,440 --> 00:02:21,120
and use them with mocha

00:02:21,520 --> 00:02:27,680
so things

00:02:24,800 --> 00:02:28,160
about this workshop so this is this is

00:02:27,680 --> 00:02:31,440
how

00:02:28,160 --> 00:02:33,440
how it's going to go and um what you can

00:02:31,440 --> 00:02:37,040
expect who this works up

00:02:33,440 --> 00:02:38,560
who this workshop's for so um

00:02:37,040 --> 00:02:40,400
you may be wondering if you should be

00:02:38,560 --> 00:02:44,160
here so

00:02:40,400 --> 00:02:46,480
yeah i would say probably but um

00:02:44,160 --> 00:02:47,760
i need to make some assumptions about

00:02:46,480 --> 00:02:51,440
where where people are

00:02:47,760 --> 00:02:53,840
at and those assumptions are here so you

00:02:51,440 --> 00:02:54,959
will need some javascript fundamentals

00:02:53,840 --> 00:02:58,480
i'm not going to teach

00:02:54,959 --> 00:03:00,959
javascript um you should be able to do

00:02:58,480 --> 00:03:02,879
some basic stuff on the command line

00:03:00,959 --> 00:03:04,720
uh you should be able to navigate

00:03:02,879 --> 00:03:06,400
directories you know

00:03:04,720 --> 00:03:08,080
move around through the file system you

00:03:06,400 --> 00:03:11,120
should be able to

00:03:08,080 --> 00:03:13,519
install packages through npm

00:03:11,120 --> 00:03:15,040
you should be able to run node on the

00:03:13,519 --> 00:03:17,920
command line

00:03:15,040 --> 00:03:20,239
you need some way of cloning a git

00:03:17,920 --> 00:03:21,920
repository you need to know how to clone

00:03:20,239 --> 00:03:24,319
a git repository

00:03:21,920 --> 00:03:25,200
but the one thing that you don't need to

00:03:24,319 --> 00:03:28,799
know

00:03:25,200 --> 00:03:34,720
is how to write a test or how to

00:03:28,799 --> 00:03:34,720
um excuse it or how to use mocha

00:03:35,440 --> 00:03:42,319
and so there's much formatting and stuff

00:03:39,280 --> 00:03:44,959
um in these slides and um

00:03:42,319 --> 00:03:47,760
i i will post post the slides after this

00:03:44,959 --> 00:03:49,760
workshop here

00:03:47,760 --> 00:03:50,799
unfortunately it looks like you may need

00:03:49,760 --> 00:03:55,120
to

00:03:50,799 --> 00:03:57,840
to type some things so

00:03:55,120 --> 00:03:58,560
these are the conventions so a keyword

00:03:57,840 --> 00:04:02,319
it will be

00:03:58,560 --> 00:04:04,480
displayed in bold and that is just

00:04:02,319 --> 00:04:05,920
some terminology that'll do my best to

00:04:04,480 --> 00:04:09,920
define

00:04:05,920 --> 00:04:13,439
uh inline code will be in a mono

00:04:09,920 --> 00:04:14,000
mono space font emphasis just means

00:04:13,439 --> 00:04:16,000
emphasis

00:04:14,000 --> 00:04:17,600
it doesn't really mean too much other

00:04:16,000 --> 00:04:20,720
than what it means

00:04:17,600 --> 00:04:22,240
a file name is displayed in a monospace

00:04:20,720 --> 00:04:26,160
but in black

00:04:22,240 --> 00:04:29,040
the name of a module so a module on npm

00:04:26,160 --> 00:04:30,240
a built-in module is going to be in

00:04:29,040 --> 00:04:32,960
italics

00:04:30,240 --> 00:04:33,280
uh a command that you are expected to

00:04:32,960 --> 00:04:36,720
run

00:04:33,280 --> 00:04:40,160
in a terminal or your uh shell is

00:04:36,720 --> 00:04:42,479
uh in green in a monospace font

00:04:40,160 --> 00:04:43,919
link is this kind of light blue and

00:04:42,479 --> 00:04:47,440
underlined

00:04:43,919 --> 00:04:48,160
and uh importantly so this this one in

00:04:47,440 --> 00:04:51,120
red

00:04:48,160 --> 00:04:52,639
it would be being red bold text these

00:04:51,120 --> 00:04:55,919
are instructions for you

00:04:52,639 --> 00:04:57,600
and so these instructions will say this

00:04:55,919 --> 00:04:59,040
is okay this is what you need to do to

00:04:57,600 --> 00:05:01,120
move forward in the

00:04:59,040 --> 00:05:02,479
in the workshops so they're going to be

00:05:01,120 --> 00:05:05,120
little exercises

00:05:02,479 --> 00:05:07,199
and everything that you need to do is in

00:05:05,120 --> 00:05:10,080
red

00:05:07,199 --> 00:05:11,520
source code will be on the screen and it

00:05:10,080 --> 00:05:15,199
will be in like this blue

00:05:11,520 --> 00:05:17,759
box and it will be syntax highlighted

00:05:15,199 --> 00:05:18,720
terminal output will be in this kind of

00:05:17,759 --> 00:05:22,080
retro green

00:05:18,720 --> 00:05:24,720
with a black background it's just

00:05:22,080 --> 00:05:25,759
for showing you expected output you're

00:05:24,720 --> 00:05:28,880
not expected to

00:05:25,759 --> 00:05:31,680
like copy it or anything all right so

00:05:28,880 --> 00:05:35,840
those are the conventions

00:05:31,680 --> 00:05:38,880
um so i want to talk about

00:05:35,840 --> 00:05:39,919
what what testing is so testing software

00:05:38,880 --> 00:05:42,800
testing is a

00:05:39,919 --> 00:05:45,919
very broad field there are many many

00:05:42,800 --> 00:05:49,680
many many ways to test software

00:05:45,919 --> 00:05:50,720
there are many reasons to do one over

00:05:49,680 --> 00:05:54,000
the other

00:05:50,720 --> 00:05:54,320
of types of testing and so what does it

00:05:54,000 --> 00:05:57,440
do

00:05:54,320 --> 00:06:00,000
it so software testing tells us about

00:05:57,440 --> 00:06:01,039
the quality of software for some

00:06:00,000 --> 00:06:03,440
definition of

00:06:01,039 --> 00:06:05,280
quality and so that's kind of that's

00:06:03,440 --> 00:06:07,840
kind of up to you and your team and

00:06:05,280 --> 00:06:07,840
in your project

00:06:08,319 --> 00:06:15,440
um a test written

00:06:12,639 --> 00:06:18,240
by tests are generally written by humans

00:06:15,440 --> 00:06:21,039
but a test executed by a human

00:06:18,240 --> 00:06:22,800
is a manual test so maybe that's sending

00:06:21,039 --> 00:06:24,880
things over to the qa team

00:06:22,800 --> 00:06:26,319
and they poke around your website and

00:06:24,880 --> 00:06:29,440
they try to break stuff

00:06:26,319 --> 00:06:30,400
that's manual test test executed by a

00:06:29,440 --> 00:06:34,319
computer

00:06:30,400 --> 00:06:37,120
these are automated tests and so

00:06:34,319 --> 00:06:38,880
automated tests they make assertions

00:06:37,120 --> 00:06:42,080
about software

00:06:38,880 --> 00:06:44,479
um and an assertion is

00:06:42,080 --> 00:06:45,120
i suppose the the dictionary definition

00:06:44,479 --> 00:06:48,240
is

00:06:45,120 --> 00:06:51,440
um you know you you are checking

00:06:48,240 --> 00:06:52,720
something and you will you will say yes

00:06:51,440 --> 00:06:55,759
or no if it if it

00:06:52,720 --> 00:06:56,639
uh passes that assertion and the way

00:06:55,759 --> 00:06:59,599
this is done

00:06:56,639 --> 00:07:01,680
is writing more software so you have

00:06:59,599 --> 00:07:02,400
your software and the automated tests

00:07:01,680 --> 00:07:05,360
are

00:07:02,400 --> 00:07:06,080
more software to test that software so

00:07:05,360 --> 00:07:08,400
this talk

00:07:06,080 --> 00:07:10,319
or this workshop is about automated

00:07:08,400 --> 00:07:17,039
tests

00:07:10,319 --> 00:07:20,400
not manual tests

00:07:17,039 --> 00:07:24,880
so why would you even want to do this

00:07:20,400 --> 00:07:28,479
so tests avoid bugs we want to

00:07:24,880 --> 00:07:30,800
test our code to assert it does

00:07:28,479 --> 00:07:32,560
what we think it should do we want to

00:07:30,800 --> 00:07:36,639
validate our assumptions

00:07:32,560 --> 00:07:39,120
we want to

00:07:36,639 --> 00:07:43,120
if you know your intent you want to make

00:07:39,120 --> 00:07:46,080
sure that the code reflects your intent

00:07:43,120 --> 00:07:47,039
when software is well tested at the

00:07:46,080 --> 00:07:50,879
right level of the

00:07:47,039 --> 00:07:52,879
abstraction it helps you refactor your

00:07:50,879 --> 00:07:55,199
software because

00:07:52,879 --> 00:07:56,960
um you'll know if you did something

00:07:55,199 --> 00:08:00,960
wrong and you'll know if you've

00:07:56,960 --> 00:08:00,960
broken an interface or a contract

00:08:01,360 --> 00:08:06,000
when software is well tested you can be

00:08:04,240 --> 00:08:09,120
confident about making

00:08:06,000 --> 00:08:12,639
changes and releases and pushing that

00:08:09,120 --> 00:08:16,240
code live when you have a green build

00:08:12,639 --> 00:08:19,520
um you feel better about it

00:08:16,240 --> 00:08:22,000
when uh you are uh

00:08:19,520 --> 00:08:23,039
writing well-tested software you're

00:08:22,000 --> 00:08:26,319
going to

00:08:23,039 --> 00:08:27,199
have a a better um velocity in the long

00:08:26,319 --> 00:08:30,560
term

00:08:27,199 --> 00:08:32,080
as it will reduce the time that you and

00:08:30,560 --> 00:08:34,800
your teams spend

00:08:32,080 --> 00:08:36,719
fixing bugs and you will have time to do

00:08:34,800 --> 00:08:39,680
other stuff like

00:08:36,719 --> 00:08:42,399
make more cool things instead of fix the

00:08:39,680 --> 00:08:42,399
broken things

00:08:43,360 --> 00:08:48,880
but it's not you know all

00:08:46,720 --> 00:08:50,640
you know it's not all roses right so

00:08:48,880 --> 00:08:54,640
there are reasons why you wouldn't

00:08:50,640 --> 00:08:56,720
want to write tests so um

00:08:54,640 --> 00:08:58,480
one thing can be and if you've ever been

00:08:56,720 --> 00:09:02,000
in this position you know

00:08:58,480 --> 00:09:04,880
so a legacy piece of software um

00:09:02,000 --> 00:09:06,399
an old older piece of software that

00:09:04,880 --> 00:09:08,399
maybe doesn't have tests

00:09:06,399 --> 00:09:09,839
may be exceedingly difficult and

00:09:08,399 --> 00:09:12,880
time-consuming to

00:09:09,839 --> 00:09:15,360
test and to write tests

00:09:12,880 --> 00:09:17,200
you know manual tests are probably going

00:09:15,360 --> 00:09:21,519
to be much easier for that

00:09:17,200 --> 00:09:24,480
and it may be you're very difficult to

00:09:21,519 --> 00:09:25,200
get to the right level of abstraction

00:09:24,480 --> 00:09:27,920
with

00:09:25,200 --> 00:09:29,120
with testing a legacy code base because

00:09:27,920 --> 00:09:30,399
you know there's such a thing as

00:09:29,120 --> 00:09:32,560
testable code

00:09:30,399 --> 00:09:34,880
and the legacy code base may not be

00:09:32,560 --> 00:09:37,839
testable

00:09:34,880 --> 00:09:39,920
adding more tests does not mean that you

00:09:37,839 --> 00:09:43,200
are adding more value it's not

00:09:39,920 --> 00:09:45,200
it's not like a linear it it's

00:09:43,200 --> 00:09:47,920
they're diminishing returns so at some

00:09:45,200 --> 00:09:49,200
point uh you're going to get to a point

00:09:47,920 --> 00:09:50,720
where

00:09:49,200 --> 00:09:53,360
you know adding more tests doesn't

00:09:50,720 --> 00:09:55,519
really help and instead it just

00:09:53,360 --> 00:09:58,640
introduces the third thing in this list

00:09:55,519 --> 00:10:01,920
which is maintenance overhead

00:09:58,640 --> 00:10:02,959
automated tests are code so they need to

00:10:01,920 --> 00:10:06,399
be maintained

00:10:02,959 --> 00:10:08,880
like code right so

00:10:06,399 --> 00:10:10,079
there may be a maintenance overhead

00:10:08,880 --> 00:10:12,880
especially during

00:10:10,079 --> 00:10:14,720
refactoring if your tests are not at

00:10:12,880 --> 00:10:15,760
that right level of abstraction maybe

00:10:14,720 --> 00:10:17,680
they're too

00:10:15,760 --> 00:10:19,440
closely bounded the implementation and

00:10:17,680 --> 00:10:22,320
i'm not going to get into

00:10:19,440 --> 00:10:22,720
you know the kind of nitty-gritty there

00:10:22,320 --> 00:10:25,760
but

00:10:22,720 --> 00:10:28,880
um the testing it it

00:10:25,760 --> 00:10:31,040
it also can decrease short-term velocity

00:10:28,880 --> 00:10:32,160
anybody that tells you that that you

00:10:31,040 --> 00:10:34,320
know writing tests

00:10:32,160 --> 00:10:35,600
is free is is lying to you and trying to

00:10:34,320 --> 00:10:38,079
sell something it

00:10:35,600 --> 00:10:40,240
there is there is an up uh upfront

00:10:38,079 --> 00:10:43,600
investment and it is a trade-off

00:10:40,240 --> 00:10:46,240
um and you know it it

00:10:43,600 --> 00:10:47,680
it tends to work pretty well but you

00:10:46,240 --> 00:10:50,399
know there are certainly reasons

00:10:47,680 --> 00:10:51,120
that you might want to skimp on it

00:10:50,399 --> 00:10:54,560
especially

00:10:51,120 --> 00:10:55,360
um you know if you're if you know you

00:10:54,560 --> 00:10:57,519
have a

00:10:55,360 --> 00:10:59,600
a startup that's struggling for cash or

00:10:57,519 --> 00:11:02,079
something like that

00:10:59,600 --> 00:11:03,680
maybe it's a good idea maybe it isn't

00:11:02,079 --> 00:11:05,360
maybe you like it maybe you don't

00:11:03,680 --> 00:11:07,040
but that's just kind of the way things

00:11:05,360 --> 00:11:09,519
are

00:11:07,040 --> 00:11:11,440
so this is why you shouldn't write tests

00:11:09,519 --> 00:11:13,040
but this workshop is not about not

00:11:11,440 --> 00:11:17,120
writing tests this workshop

00:11:13,040 --> 00:11:21,120
is about writing tests so we're going to

00:11:17,120 --> 00:11:25,839
go into the the the setup here

00:11:21,120 --> 00:11:29,360
um so

00:11:25,839 --> 00:11:30,079
there is a git repository and i would

00:11:29,360 --> 00:11:33,920
like you to

00:11:30,079 --> 00:11:37,600
clone it and so

00:11:33,920 --> 00:11:40,800
this is the url this is

00:11:37,600 --> 00:11:44,240
uh wrapped a bit but the

00:11:40,800 --> 00:11:46,959
um url is github.com forward slash

00:11:44,240 --> 00:11:48,720
bone skull forward slash dead dash

00:11:46,959 --> 00:11:52,079
simple dash testing dash with

00:11:48,720 --> 00:11:57,600
dash mocha and this contains

00:11:52,079 --> 00:11:59,279
example code for the repo um

00:11:57,600 --> 00:12:01,600
don't mind the readme the readme is a

00:11:59,279 --> 00:12:02,560
bit out of date but these instructions

00:12:01,600 --> 00:12:05,839
are not

00:12:02,560 --> 00:12:09,360
um and you can use a

00:12:05,839 --> 00:12:10,079
uh any sort of client you want to clone

00:12:09,360 --> 00:12:12,560
this is just

00:12:10,079 --> 00:12:13,839
the command line version if you want to

00:12:12,560 --> 00:12:15,440
do that

00:12:13,839 --> 00:12:17,360
so once you have that cloned you're

00:12:15,440 --> 00:12:18,320
going to want to navigate into the

00:12:17,360 --> 00:12:20,800
working copy

00:12:18,320 --> 00:12:22,399
which is the did simple testing with

00:12:20,800 --> 00:12:22,720
mocha directory you're going to want to

00:12:22,399 --> 00:12:26,320
run

00:12:22,720 --> 00:12:29,680
npm install and what this is going to do

00:12:26,320 --> 00:12:32,160
is it's going to

00:12:29,680 --> 00:12:33,440
reach into a bunch of yes it's a

00:12:32,160 --> 00:12:34,639
monorepo

00:12:33,440 --> 00:12:37,200
it's going to reach into a bunch of

00:12:34,639 --> 00:12:38,560
subdirectories and and run npm install

00:12:37,200 --> 00:12:42,079
on there it's

00:12:38,560 --> 00:12:45,600
it's not really a huge deal um but

00:12:42,079 --> 00:12:48,720
uh i'll wait uh a few minutes and uh

00:12:45,600 --> 00:12:50,720
let you do that

00:12:48,720 --> 00:12:53,839
and i'm gonna kill my camera i'm gonna

00:12:50,720 --> 00:12:53,839
give you about three minutes

00:15:03,519 --> 00:15:08,800
okay i think i'm going to move on um

00:15:06,560 --> 00:15:10,000
we kind of have a lot to cover so once

00:15:08,800 --> 00:15:12,320
you've run npm install

00:15:10,000 --> 00:15:15,920
of course you want to navigate into the

00:15:12,320 --> 00:15:15,920
zero one setup directory

00:15:16,639 --> 00:15:20,560
and we're going to take a look in there

00:15:19,440 --> 00:15:23,760
and so

00:15:20,560 --> 00:15:26,880
in this directory there is

00:15:23,760 --> 00:15:30,240
a directory called bargs

00:15:26,880 --> 00:15:33,279
bargs maybe that stands for

00:15:30,240 --> 00:15:35,759
bone skull args i don't know so

00:15:33,279 --> 00:15:36,720
what the bargs package is is it's a

00:15:35,759 --> 00:15:38,800
library

00:15:36,720 --> 00:15:41,120
and the library is a command line

00:15:38,800 --> 00:15:44,000
argument parser and so

00:15:41,120 --> 00:15:45,519
by command line arguments we have an

00:15:44,000 --> 00:15:47,920
example here

00:15:45,519 --> 00:15:49,519
we have dash dash foo dash dash bar

00:15:47,920 --> 00:15:50,639
equals bass these are command line

00:15:49,519 --> 00:15:53,120
arguments

00:15:50,639 --> 00:15:54,000
you would give things like these to any

00:15:53,120 --> 00:15:57,920
sort of command line

00:15:54,000 --> 00:16:00,320
tool and so the bargs package

00:15:57,920 --> 00:16:01,680
will accept something like this and

00:16:00,320 --> 00:16:04,800
return

00:16:01,680 --> 00:16:08,399
a nice object for you and

00:16:04,800 --> 00:16:11,040
uh let's take a look

00:16:08,399 --> 00:16:12,160
at uh this is the project structure

00:16:11,040 --> 00:16:14,720
there's

00:16:12,160 --> 00:16:15,920
you should see a package.json and src

00:16:14,720 --> 00:16:18,959
directory

00:16:15,920 --> 00:16:22,480
um and i would like you

00:16:18,959 --> 00:16:25,600
to open the bargs forward slash src

00:16:22,480 --> 00:16:28,079
forward slash index.js file in your

00:16:25,600 --> 00:16:28,079
editor

00:16:28,959 --> 00:16:35,519
and um if you cannot i will

00:16:32,160 --> 00:16:36,720
show the code here next but it's

00:16:35,519 --> 00:16:39,600
probably going to be easier for you to

00:16:36,720 --> 00:16:39,600
just take a look at it

00:16:47,120 --> 00:16:54,880
okay so this is the source of bargs

00:16:51,680 --> 00:16:55,920
bargs is a single function uh that

00:16:54,880 --> 00:16:59,360
function is called

00:16:55,920 --> 00:17:01,839
parse um parse accepts

00:16:59,360 --> 00:17:02,800
an array of arguments as the first

00:17:01,839 --> 00:17:05,520
option

00:17:02,800 --> 00:17:07,039
or the first parameter and it accepts an

00:17:05,520 --> 00:17:09,760
optional second parameter

00:17:07,039 --> 00:17:10,640
which is an options object and this is a

00:17:09,760 --> 00:17:14,000
pretty

00:17:10,640 --> 00:17:17,360
uh common way of of

00:17:14,000 --> 00:17:19,919
a a common function signature so

00:17:17,360 --> 00:17:22,319
it accepts an array again and an options

00:17:19,919 --> 00:17:22,319
object

00:17:22,480 --> 00:17:29,520
you will see some

00:17:26,079 --> 00:17:32,880
type defs here if you're familiar with

00:17:29,520 --> 00:17:35,679
um js stock dock strings

00:17:32,880 --> 00:17:36,240
uh these are actually like typescript

00:17:35,679 --> 00:17:39,280
style

00:17:36,240 --> 00:17:41,280
jstock things and so

00:17:39,280 --> 00:17:42,480
you can look and see you can get more

00:17:41,280 --> 00:17:47,200
information about

00:17:42,480 --> 00:17:49,679
um the the options allowed here

00:17:47,200 --> 00:17:50,880
and so uh what this does again it

00:17:49,679 --> 00:17:55,440
accepts an array

00:17:50,880 --> 00:17:57,840
it's going to um essentially

00:17:55,440 --> 00:18:00,640
walk through the array and start parsing

00:17:57,840 --> 00:18:03,760
arguments out of it

00:18:00,640 --> 00:18:05,360
an argument is something that starts

00:18:03,760 --> 00:18:09,280
with a dash

00:18:05,360 --> 00:18:12,480
it might start with two dashes

00:18:09,280 --> 00:18:15,760
it might start with three dashes

00:18:12,480 --> 00:18:17,679
but uh that is considered a a like an

00:18:15,760 --> 00:18:21,280
option style argument

00:18:17,679 --> 00:18:24,240
and then anything that does not

00:18:21,280 --> 00:18:24,559
uh start with some dashes is considered

00:18:24,240 --> 00:18:27,679
a

00:18:24,559 --> 00:18:29,840
positional argument and that winds up in

00:18:27,679 --> 00:18:29,840
a

00:18:30,160 --> 00:18:35,039
property which is the underscore and so

00:18:33,600 --> 00:18:38,720
this is

00:18:35,039 --> 00:18:42,240
a convention that other

00:18:38,720 --> 00:18:44,960
user land libraries like yards use

00:18:42,240 --> 00:18:46,720
um it's this underscore contains

00:18:44,960 --> 00:18:50,080
positional arguments

00:18:46,720 --> 00:18:53,440
and so um you know that's

00:18:50,080 --> 00:18:56,720
that's kind of the size of it uh there's

00:18:53,440 --> 00:18:59,360
you know some special cases here but

00:18:56,720 --> 00:19:01,120
we'll go into this in in more detail you

00:18:59,360 --> 00:19:04,240
know the intent

00:19:01,120 --> 00:19:06,160
what exactly it's supposed to do um

00:19:04,240 --> 00:19:08,480
but so this is this is the example

00:19:06,160 --> 00:19:11,679
project we're going to test

00:19:08,480 --> 00:19:12,480
but but not right away so we're going to

00:19:11,679 --> 00:19:13,679
talk about

00:19:12,480 --> 00:19:16,559
we're we're going to have you write it

00:19:13,679 --> 00:19:19,200
or write a test now but first we need to

00:19:16,559 --> 00:19:20,559
uh define some things maybe just one

00:19:19,200 --> 00:19:23,440
thing

00:19:20,559 --> 00:19:24,000
but it's the word assertion so an

00:19:23,440 --> 00:19:25,679
assertion

00:19:24,000 --> 00:19:27,600
when i talk about an assertion in

00:19:25,679 --> 00:19:30,480
javascript an assertion

00:19:27,600 --> 00:19:31,360
will check a condition so maybe that's

00:19:30,480 --> 00:19:34,400
something like

00:19:31,360 --> 00:19:35,919
a a you know if right

00:19:34,400 --> 00:19:37,679
and you give it your expression you want

00:19:35,919 --> 00:19:39,360
to test

00:19:37,679 --> 00:19:41,440
depending on the result of that

00:19:39,360 --> 00:19:42,240
conditional the the assertion can throw

00:19:41,440 --> 00:19:45,520
an exception

00:19:42,240 --> 00:19:47,760
and so this is key um

00:19:45,520 --> 00:19:49,280
the the code here below if some declared

00:19:47,760 --> 00:19:51,200
variable returning true

00:19:49,280 --> 00:19:52,960
if it's true and returning false if it's

00:19:51,200 --> 00:19:54,160
false that's not an assertion that's i

00:19:52,960 --> 00:19:56,559
don't know what that is but

00:19:54,160 --> 00:19:59,120
it's it doesn't throw an exception and

00:19:56,559 --> 00:19:59,120
that's key

00:19:59,440 --> 00:20:07,039
so um we want to navigate into this zero

00:20:02,960 --> 00:20:07,840
this this other uh lesson directory so

00:20:07,039 --> 00:20:09,440
or

00:20:07,840 --> 00:20:11,600
exercise directory whatever it's called

00:20:09,440 --> 00:20:13,760
we want to go back up to

00:20:11,600 --> 00:20:16,240
the root of dead simple testing with

00:20:13,760 --> 00:20:17,840
mocha we want to go into the zero to

00:20:16,240 --> 00:20:19,520
your first test

00:20:17,840 --> 00:20:20,880
directory we want to go into the bargas

00:20:19,520 --> 00:20:23,440
directory in there

00:20:20,880 --> 00:20:27,200
then i want you to make a test directory

00:20:23,440 --> 00:20:27,200
uh one may already exist

00:20:27,280 --> 00:20:31,280
so if it if it doesn't exist go ahead

00:20:29,760 --> 00:20:34,080
and create that

00:20:31,280 --> 00:20:34,480
that might want to be in make dirt p

00:20:34,080 --> 00:20:37,280
then

00:20:34,480 --> 00:20:38,640
i want you to create a new file in this

00:20:37,280 --> 00:20:43,120
test directory

00:20:38,640 --> 00:20:45,039
and call it bargs.spec.js you can call

00:20:43,120 --> 00:20:46,720
it really whatever you want

00:20:45,039 --> 00:20:49,200
but this is the file name i'm going to

00:20:46,720 --> 00:20:51,280
use here dot spec dot js

00:20:49,200 --> 00:20:53,200
is is just a convention you don't have

00:20:51,280 --> 00:20:55,520
to use it a lot of people don't

00:20:53,200 --> 00:20:56,720
maybe you want to call it.test.js it

00:20:55,520 --> 00:20:59,200
doesn't matter i don't care

00:20:56,720 --> 00:21:00,880
but go ahead and create this file it's

00:20:59,200 --> 00:21:02,400
going to be empty file open it in your

00:21:00,880 --> 00:21:04,720
editor

00:21:02,400 --> 00:21:05,600
and this the idea here is to get you

00:21:04,720 --> 00:21:08,080
comfortable with

00:21:05,600 --> 00:21:09,280
what a test is and you will find that it

00:21:08,080 --> 00:21:12,480
is

00:21:09,280 --> 00:21:15,039
not as complicated as as you may think

00:21:12,480 --> 00:21:16,000
it's actually extremely simple so i'll

00:21:15,039 --> 00:21:31,760
wait just a second

00:21:16,000 --> 00:21:34,320
for y'all to get that done

00:21:31,760 --> 00:21:35,280
so say we have this empty file i want

00:21:34,320 --> 00:21:38,880
you to put

00:21:35,280 --> 00:21:44,559
um this in it so if false

00:21:38,880 --> 00:21:46,480
throw new error that's it so um

00:21:44,559 --> 00:21:47,919
i guess i guess you can't very well copy

00:21:46,480 --> 00:21:51,520
and paste this but

00:21:47,919 --> 00:21:54,559
go ahead and type that out

00:21:51,520 --> 00:21:57,679
i can again after this i will

00:21:54,559 --> 00:21:58,000
try to export this this these slides in

00:21:57,679 --> 00:21:59,760
a

00:21:58,000 --> 00:22:01,280
form in which you can copy and paste but

00:21:59,760 --> 00:22:05,039
for now please just

00:22:01,280 --> 00:22:07,360
type that and what we have here is a

00:22:05,039 --> 00:22:07,360
test

00:22:08,159 --> 00:22:12,799
so um you know a test contains some sort

00:22:11,360 --> 00:22:16,000
of assertion

00:22:12,799 --> 00:22:18,320
and you know it's a it's it's

00:22:16,000 --> 00:22:20,320
a static assertion so false will always

00:22:18,320 --> 00:22:22,000
be false but we have made an assertion

00:22:20,320 --> 00:22:25,280
here now if false is true

00:22:22,000 --> 00:22:27,200
what would happen we would

00:22:25,280 --> 00:22:29,039
throw an error and and the test would

00:22:27,200 --> 00:22:30,480
fail but this is a test this is this is

00:22:29,039 --> 00:22:34,400
all it is

00:22:30,480 --> 00:22:36,640
so um

00:22:34,400 --> 00:22:38,240
now we want to run this code so i'm

00:22:36,640 --> 00:22:39,679
going to assume you've typed something

00:22:38,240 --> 00:22:44,000
out like this

00:22:39,679 --> 00:22:46,799
and we're going to go ahead and run it

00:22:44,000 --> 00:22:48,480
so you would run it this way you're

00:22:46,799 --> 00:22:49,440
going to go into your terminal you're

00:22:48,480 --> 00:22:53,520
going to run node

00:22:49,440 --> 00:22:56,799
and test forward slash bargs.spec.js if

00:22:53,520 --> 00:23:00,080
you are actually in the test directory

00:22:56,799 --> 00:23:00,880
just run bargs.spec.js and so what

00:23:00,080 --> 00:23:03,760
happens

00:23:00,880 --> 00:23:03,760
when you run this

00:23:05,840 --> 00:23:11,039
so i would really expect nothing to

00:23:08,720 --> 00:23:12,960
happen at all i would expect the code to

00:23:11,039 --> 00:23:16,080
be executed i would expect the

00:23:12,960 --> 00:23:18,400
process to just exit and

00:23:16,080 --> 00:23:19,919
that's it and that's that's that's what

00:23:18,400 --> 00:23:23,440
a passing test looks like

00:23:19,919 --> 00:23:25,600
looks like so your your mission

00:23:23,440 --> 00:23:27,760
then is to make this test fail however

00:23:25,600 --> 00:23:30,360
you see fit

00:23:27,760 --> 00:23:32,400
so you're going to go back into the

00:23:30,360 --> 00:23:33,760
barge.spec.js file and you're going to

00:23:32,400 --> 00:23:36,240
change

00:23:33,760 --> 00:23:37,280
maybe the conditional in there and

00:23:36,240 --> 00:23:38,880
you're going to

00:23:37,280 --> 00:23:40,559
make it fail and you're going to go and

00:23:38,880 --> 00:23:43,919
you're going to run it again

00:23:40,559 --> 00:23:43,919
and check your work

00:23:45,279 --> 00:23:48,480
and i'm going to wait a couple minutes

00:23:47,520 --> 00:23:52,240
but

00:23:48,480 --> 00:24:05,840
if if you've made it fail the result

00:23:52,240 --> 00:24:05,840
should look something like this

00:24:31,120 --> 00:24:36,159
okay so here here's

00:24:34,559 --> 00:24:37,679
here's what i would do i would change

00:24:36,159 --> 00:24:38,640
the false to true and that would that

00:24:37,679 --> 00:24:40,960
would exit it

00:24:38,640 --> 00:24:42,640
or that would throw the exception and

00:24:40,960 --> 00:24:45,120
and make the uh

00:24:42,640 --> 00:24:46,720
make the test fail uh and that's that's

00:24:45,120 --> 00:24:48,720
really it that there's there's your

00:24:46,720 --> 00:24:50,960
failing test so we've got a

00:24:48,720 --> 00:24:52,880
passing test and a failing test and it's

00:24:50,960 --> 00:24:55,919
extremely basic

00:24:52,880 --> 00:24:58,000
um and you could write tests this way if

00:24:55,919 --> 00:25:02,080
you wanted to

00:24:58,000 --> 00:25:04,559
but it's not so much fun so it works but

00:25:02,080 --> 00:25:06,080
it's it's too much boilerplate there's

00:25:04,559 --> 00:25:09,440
there's

00:25:06,080 --> 00:25:10,320
you know you're going to start finding

00:25:09,440 --> 00:25:12,480
that

00:25:10,320 --> 00:25:14,559
you're making the same checks over and

00:25:12,480 --> 00:25:16,080
over you will i don't know if there's a

00:25:14,559 --> 00:25:17,919
name for these but i'm going to call

00:25:16,080 --> 00:25:21,520
them assertion patterns

00:25:17,919 --> 00:25:23,200
and so you're going to find that you're

00:25:21,520 --> 00:25:24,559
making these checks again and again so

00:25:23,200 --> 00:25:27,279
we're going to check is

00:25:24,559 --> 00:25:28,559
this is this value true is the value

00:25:27,279 --> 00:25:31,919
false

00:25:28,559 --> 00:25:35,279
does uh value x equal value y

00:25:31,919 --> 00:25:38,000
does the function z throw under certain

00:25:35,279 --> 00:25:38,880
set of circumstances and if it does

00:25:38,000 --> 00:25:42,159
which exception

00:25:38,880 --> 00:25:43,600
so these are these are some examples of

00:25:42,159 --> 00:25:45,360
common assertions that you're going to

00:25:43,600 --> 00:25:48,559
see again and again

00:25:45,360 --> 00:25:52,080
and so that's why we get things

00:25:48,559 --> 00:25:54,960
like the assert module

00:25:52,080 --> 00:25:56,080
so the assert module is in node and

00:25:54,960 --> 00:26:00,320
you're probably going to want to

00:25:56,080 --> 00:26:03,279
go check out the docs right there

00:26:00,320 --> 00:26:06,080
that is nodejs.org forward slash api

00:26:03,279 --> 00:26:08,159
forward slash assert.html and this is

00:26:06,080 --> 00:26:11,360
the built-in assert module

00:26:08,159 --> 00:26:14,480
and what it provides is

00:26:11,360 --> 00:26:16,240
assertion patterns as functions and so

00:26:14,480 --> 00:26:17,039
we're going to use this instead of what

00:26:16,240 --> 00:26:20,480
we just did

00:26:17,039 --> 00:26:22,559
so i want you to add uh something like

00:26:20,480 --> 00:26:23,200
const assert equals require assert to

00:26:22,559 --> 00:26:27,760
the top

00:26:23,200 --> 00:26:27,760
of your barge.spec.js file

00:26:29,760 --> 00:26:36,240
and so the exercise then

00:26:32,799 --> 00:26:37,679
um well actually so the the

00:26:36,240 --> 00:26:39,600
so let me talk a little bit more about

00:26:37,679 --> 00:26:42,000
the assert module and so what that does

00:26:39,600 --> 00:26:44,000
is it provides all these assertion

00:26:42,000 --> 00:26:47,440
patterns all the assertion patterns

00:26:44,000 --> 00:26:50,240
throw if if for

00:26:47,440 --> 00:26:51,440
depending on the reason but depending on

00:26:50,240 --> 00:26:53,840
the function and why

00:26:51,440 --> 00:26:55,520
they will throw an insertion error which

00:26:53,840 --> 00:26:59,120
is an exception

00:26:55,520 --> 00:27:01,279
it's just a special subclass of error

00:26:59,120 --> 00:27:03,240
it's an assertion error it contains some

00:27:01,279 --> 00:27:04,840
extra metadata about the failed

00:27:03,240 --> 00:27:08,400
assertion

00:27:04,840 --> 00:27:11,360
um yeah it's it's handy so

00:27:08,400 --> 00:27:12,000
um please note that we are not talking

00:27:11,360 --> 00:27:15,760
about there's

00:27:12,000 --> 00:27:18,480
a module one npm called assert which

00:27:15,760 --> 00:27:19,360
may be roughly the same but we're

00:27:18,480 --> 00:27:21,520
talking about the

00:27:19,360 --> 00:27:23,360
built-in assert module in node so you

00:27:21,520 --> 00:27:27,120
shouldn't have to go in npm install and

00:27:23,360 --> 00:27:27,120
assert because it's already there

00:27:27,520 --> 00:27:31,600
so um i want you to replace your

00:27:30,399 --> 00:27:34,799
assertion

00:27:31,600 --> 00:27:38,559
on this you know if this uh

00:27:34,799 --> 00:27:41,919
where is it this here replace this

00:27:38,559 --> 00:27:44,640
with um a call to a single function

00:27:41,919 --> 00:27:45,600
in the assert module and so there's

00:27:44,640 --> 00:27:48,799
going to be

00:27:45,600 --> 00:27:51,520
probably more than one function you

00:27:48,799 --> 00:27:53,840
could use in there but

00:27:51,520 --> 00:27:54,799
yeah give it a shot see if you can

00:27:53,840 --> 00:27:59,360
replicate this

00:27:54,799 --> 00:28:03,840
except use the assert module to do so

00:27:59,360 --> 00:28:03,840
and i will wait a couple minutes

00:28:06,559 --> 00:28:12,799
and i will give you a hint

00:28:10,480 --> 00:28:12,799
here

00:28:13,679 --> 00:28:17,840
very soon

00:29:29,679 --> 00:29:36,480
okay so the hint is um use the

00:29:32,799 --> 00:29:39,200
okay function so it's cert.okay

00:29:36,480 --> 00:29:40,640
um again there are others you could use

00:29:39,200 --> 00:29:43,600
but

00:29:40,640 --> 00:29:55,840
i'm gonna go with that one and i'll give

00:29:43,600 --> 00:29:55,840
you another minute

00:30:21,440 --> 00:30:26,880
so if you've used if you've used

00:30:24,799 --> 00:30:31,200
assert.ok

00:30:26,880 --> 00:30:34,320
it should look like this when you run it

00:30:31,200 --> 00:30:36,080
so you'll see something like expression

00:30:34,320 --> 00:30:40,559
evaluated to a false value

00:30:36,080 --> 00:30:43,600
and it'll give you a little stack trace

00:30:40,559 --> 00:30:48,880
the assertion error object will have a

00:30:43,600 --> 00:30:52,240
code property actual and expected

00:30:48,880 --> 00:30:57,120
it will say okay so we expected true

00:30:52,240 --> 00:30:58,960
but what we were passed is false um

00:30:57,120 --> 00:31:01,440
operator must be the operator that it

00:30:58,960 --> 00:31:04,720
uses to to make the comparison

00:31:01,440 --> 00:31:07,440
so um the thing about assert okay is

00:31:04,720 --> 00:31:08,240
it does not do like a strict check it's

00:31:07,440 --> 00:31:11,440
a

00:31:08,240 --> 00:31:14,159
it's uh it uses

00:31:11,440 --> 00:31:15,360
coercion it uses the double dash uh so

00:31:14,159 --> 00:31:18,640
if you say

00:31:15,360 --> 00:31:21,760
um something like zero

00:31:18,640 --> 00:31:22,240
equals equals false that would be that

00:31:21,760 --> 00:31:24,159
would be

00:31:22,240 --> 00:31:25,440
the kind of truthiness we're talking

00:31:24,159 --> 00:31:28,880
about here

00:31:25,440 --> 00:31:32,159
so the what i came up with was this

00:31:28,880 --> 00:31:35,760
so um we've used the assert module

00:31:32,159 --> 00:31:39,200
here and again this is a not a strict

00:31:35,760 --> 00:31:42,159
uh a quality check um

00:31:39,200 --> 00:31:43,279
and we've used the okay function and

00:31:42,159 --> 00:31:45,120
we've given it false

00:31:43,279 --> 00:31:47,200
and it should fail every single time you

00:31:45,120 --> 00:31:50,559
run it so

00:31:47,200 --> 00:31:54,399
um now we can change this

00:31:50,559 --> 00:31:57,919
test we'll fix it and um

00:31:54,399 --> 00:32:01,120
so it passes and uh

00:31:57,919 --> 00:32:04,640
this should be pretty trivial um

00:32:01,120 --> 00:32:06,559
but when it passes what you should

00:32:04,640 --> 00:32:09,120
expect is that nothing happens

00:32:06,559 --> 00:32:09,679
and that's again that's often what often

00:32:09,120 --> 00:32:12,320
what

00:32:09,679 --> 00:32:15,840
passing things will look like but um

00:32:12,320 --> 00:32:15,840
i'll wait just a minute

00:32:38,399 --> 00:32:45,279
okay so any one of these things

00:32:42,159 --> 00:32:47,919
would work uh because of the it's okay

00:32:45,279 --> 00:32:49,840
does it doesn't check the strict true

00:32:47,919 --> 00:32:52,000
value it's a

00:32:49,840 --> 00:32:53,120
truthiness check and so you could use

00:32:52,000 --> 00:32:56,399
any of these

00:32:53,120 --> 00:32:58,480
and this is trivial um but it it it it

00:32:56,399 --> 00:32:59,760
illustrates the point so this file this

00:32:58,480 --> 00:33:02,799
barge.spec

00:32:59,760 --> 00:33:05,679
js it's a test we're testing

00:33:02,799 --> 00:33:06,240
i don't know the booleans i suppose but

00:33:05,679 --> 00:33:08,480
it's

00:33:06,240 --> 00:33:10,000
this these are really all tests are

00:33:08,480 --> 00:33:13,200
they're just assertions

00:33:10,000 --> 00:33:16,240
um anything else is um

00:33:13,200 --> 00:33:18,000
kind of decorations around that

00:33:16,240 --> 00:33:20,240
and you'll you'll have noticed that we

00:33:18,000 --> 00:33:22,799
haven't touched bargs

00:33:20,240 --> 00:33:24,240
so we're going to look at at bargs here

00:33:22,799 --> 00:33:27,120
in the next section

00:33:24,240 --> 00:33:27,840
um and uh believe it or not we're not

00:33:27,120 --> 00:33:31,120
even

00:33:27,840 --> 00:33:34,799
going to use mocha yet but um so

00:33:31,120 --> 00:33:35,760
yeah here we are this is what we've

00:33:34,799 --> 00:33:37,760
learned so far

00:33:35,760 --> 00:33:38,960
we've learned about assertions in

00:33:37,760 --> 00:33:41,600
javascript

00:33:38,960 --> 00:33:42,640
we've learned how to run a very basic

00:33:41,600 --> 00:33:44,720
test file

00:33:42,640 --> 00:33:47,360
and we've learned about the assert

00:33:44,720 --> 00:33:50,320
module built into node

00:33:47,360 --> 00:33:52,080
and now we're going to write some more

00:33:50,320 --> 00:33:53,840
real looking tests

00:33:52,080 --> 00:33:55,840
and so barge let me talk a little bit

00:33:53,840 --> 00:33:58,000
more about bargs so

00:33:55,840 --> 00:33:59,120
this is like the the motivation for

00:33:58,000 --> 00:34:00,960
barks so

00:33:59,120 --> 00:34:02,880
the command line arguments in a node app

00:34:00,960 --> 00:34:04,799
are provided as an array but

00:34:02,880 --> 00:34:06,000
parsing that array is tedious because

00:34:04,799 --> 00:34:08,639
you get all the dashes

00:34:06,000 --> 00:34:09,679
you get all sorts of garbage and and you

00:34:08,639 --> 00:34:12,159
need to

00:34:09,679 --> 00:34:13,280
go in there and figure out which of

00:34:12,159 --> 00:34:16,720
those mean what

00:34:13,280 --> 00:34:18,879
and maybe what you can ignore or not

00:34:16,720 --> 00:34:19,839
and so a solution to this would be a

00:34:18,879 --> 00:34:21,599
library to

00:34:19,839 --> 00:34:23,200
accept command line arguments as an

00:34:21,599 --> 00:34:25,520
array

00:34:23,200 --> 00:34:27,280
and return an object which can be more

00:34:25,520 --> 00:34:29,440
easily understood

00:34:27,280 --> 00:34:31,280
there are lots of packages out there

00:34:29,440 --> 00:34:34,960
that do this lots of them

00:34:31,280 --> 00:34:36,240
um yargs commander minimist and they do

00:34:34,960 --> 00:34:38,560
it much better than

00:34:36,240 --> 00:34:39,679
bargs does okay so they're they're good

00:34:38,560 --> 00:34:42,960
packages

00:34:39,679 --> 00:34:45,919
bargs is intended to just be like the

00:34:42,960 --> 00:34:47,760
minimum set of things that you would

00:34:45,919 --> 00:34:50,720
possibly want for

00:34:47,760 --> 00:34:52,720
for this sort of functionality and again

00:34:50,720 --> 00:34:56,800
it has a single exported function

00:34:52,720 --> 00:35:00,800
which is parse so

00:34:56,800 --> 00:35:02,560
um and this i'm going to show you a

00:35:00,800 --> 00:35:06,160
table next of

00:35:02,560 --> 00:35:08,320
examples so we're going to have

00:35:06,160 --> 00:35:09,760
this is what we give bargs the parse

00:35:08,320 --> 00:35:11,680
function this is what we pass to it and

00:35:09,760 --> 00:35:13,440
this is what we expect back

00:35:11,680 --> 00:35:15,119
and so this will kind of cover the use

00:35:13,440 --> 00:35:17,440
cases that we're talking about and

00:35:15,119 --> 00:35:19,920
command line argument parsing

00:35:17,440 --> 00:35:20,480
is there's a lot going on there but

00:35:19,920 --> 00:35:22,800
again

00:35:20,480 --> 00:35:23,680
um i'm trying to distill this down to

00:35:22,800 --> 00:35:26,800
the to

00:35:23,680 --> 00:35:30,160
the uh the very minimum

00:35:26,800 --> 00:35:32,480
that we need so

00:35:30,160 --> 00:35:32,480
um

00:35:33,359 --> 00:35:39,280
here we have a table and uh the first

00:35:37,040 --> 00:35:39,280
uh

00:35:40,880 --> 00:35:44,960
the first column here is the input array

00:35:42,880 --> 00:35:47,920
so this is what we would pass the

00:35:44,960 --> 00:35:50,560
the parse function and the second column

00:35:47,920 --> 00:35:53,680
the output is what we'd expect back

00:35:50,560 --> 00:35:56,000
um and so

00:35:53,680 --> 00:35:58,560
we have these different situations that

00:35:56,000 --> 00:36:01,040
we need to handle

00:35:58,560 --> 00:36:03,119
you'll notice that there are notes on

00:36:01,040 --> 00:36:07,359
some of these

00:36:03,119 --> 00:36:11,440
because it needs a little bit of a

00:36:07,359 --> 00:36:11,440
direction to do certain things so

00:36:11,520 --> 00:36:17,680
you will uh probably want to come maybe

00:36:15,680 --> 00:36:21,520
i should just come back to it but

00:36:17,680 --> 00:36:23,040
um this is

00:36:21,520 --> 00:36:24,800
uh this is something you're gonna want

00:36:23,040 --> 00:36:27,440
to look at again um

00:36:24,800 --> 00:36:29,680
i note that the that uh the output

00:36:27,440 --> 00:36:32,240
object will always have an underscore

00:36:29,680 --> 00:36:33,680
property and if there are no positional

00:36:32,240 --> 00:36:35,760
arguments it'll be

00:36:33,680 --> 00:36:37,359
an empty array so you don't you don't

00:36:35,760 --> 00:36:38,160
need to worry too too much about this

00:36:37,359 --> 00:36:40,560
right now

00:36:38,160 --> 00:36:42,240
but this is just showing okay this is

00:36:40,560 --> 00:36:45,520
this is the intent this is

00:36:42,240 --> 00:36:49,200
what uh we expect to happen um

00:36:45,520 --> 00:36:51,920
we you know we exp we expect um

00:36:49,200 --> 00:36:53,599
a a an option that does not have any

00:36:51,920 --> 00:36:55,040
sort of parameter after it that's

00:36:53,599 --> 00:36:57,680
supposed to be a boolean so there's a

00:36:55,040 --> 00:37:00,720
boolean flag yes no

00:36:57,680 --> 00:37:01,440
we expect that stuff that only has one

00:37:00,720 --> 00:37:04,320
dash is

00:37:01,440 --> 00:37:06,000
is also a boolean if it does not have

00:37:04,320 --> 00:37:08,720
any sort of parameter

00:37:06,000 --> 00:37:10,800
if we use an equals sign that means we

00:37:08,720 --> 00:37:14,240
have some sort of parameter

00:37:10,800 --> 00:37:17,599
um if we don't use an equal sign

00:37:14,240 --> 00:37:20,800
here on line one two three four five six

00:37:17,599 --> 00:37:22,640
we're gonna need some you know bargs is

00:37:20,800 --> 00:37:25,680
gonna need direction to figure out

00:37:22,640 --> 00:37:29,440
okay what is baz here is baz

00:37:25,680 --> 00:37:33,040
this the parameter to foo or is that a

00:37:29,440 --> 00:37:36,240
um a positional argument it needs

00:37:33,040 --> 00:37:38,079
it needs a hint if we you know

00:37:36,240 --> 00:37:40,400
do give it something that doesn't have

00:37:38,079 --> 00:37:43,280
any dashes that's just the positional

00:37:40,400 --> 00:37:44,640
and we can see that on the next line um

00:37:43,280 --> 00:37:48,560
but so these are just

00:37:44,640 --> 00:37:51,760
uh again examples another special case

00:37:48,560 --> 00:37:53,040
is this bare double dash and so if

00:37:51,760 --> 00:37:57,040
you've seen that before

00:37:53,040 --> 00:37:57,040
maybe in command line um

00:37:57,200 --> 00:38:01,839
command line scripts everything after

00:37:59,680 --> 00:38:04,640
that double dash is supposed to be

00:38:01,839 --> 00:38:06,720
a positional argument it's supposed to

00:38:04,640 --> 00:38:08,640
be kind of red as is

00:38:06,720 --> 00:38:10,480
and so that's how we're going to treat

00:38:08,640 --> 00:38:12,320
this um

00:38:10,480 --> 00:38:14,720
if we pass something with starting with

00:38:12,320 --> 00:38:16,400
dashes after that double dash

00:38:14,720 --> 00:38:17,839
that's still considered a positional and

00:38:16,400 --> 00:38:19,839
so

00:38:17,839 --> 00:38:21,680
it seems like a lot but it's like it

00:38:19,839 --> 00:38:23,599
really is kind of the bare minimum of

00:38:21,680 --> 00:38:27,040
what you need to do

00:38:23,599 --> 00:38:30,560
um another thing is that

00:38:27,040 --> 00:38:34,880
uh by default uh

00:38:30,560 --> 00:38:36,640
bargz works on process dot rv.slice2 and

00:38:34,880 --> 00:38:40,400
so process.rb

00:38:36,640 --> 00:38:42,880
dot slice 2 is uh essentially your

00:38:40,400 --> 00:38:45,359
your command line options the the first

00:38:42,880 --> 00:38:47,119
and second element of that process.org

00:38:45,359 --> 00:38:48,960
the array you don't usually need it's

00:38:47,119 --> 00:38:49,839
like the node executable and the script

00:38:48,960 --> 00:38:51,520
name

00:38:49,839 --> 00:38:53,520
you just care about the stuff after it

00:38:51,520 --> 00:38:54,960
and so it uses that by default but you

00:38:53,520 --> 00:38:58,480
can give it

00:38:54,960 --> 00:39:01,200
a an explicit array so um

00:38:58,480 --> 00:39:02,240
we want to pull bargs into our test file

00:39:01,200 --> 00:39:06,480
and so

00:39:02,240 --> 00:39:09,599
um i want to make sure let's see here

00:39:06,480 --> 00:39:13,040
um we should be

00:39:09,599 --> 00:39:17,040
actually in the

00:39:13,040 --> 00:39:17,040
uh i believe um

00:39:17,599 --> 00:39:23,599
uh whichever uh

00:39:21,680 --> 00:39:25,200
sorry i didn't add this one um but it's

00:39:23,599 --> 00:39:28,960
whichever directory

00:39:25,200 --> 00:39:29,440
uh where it says actual tests and so in

00:39:28,960 --> 00:39:31,440
the

00:39:29,440 --> 00:39:33,440
um dead simple testing with mocha

00:39:31,440 --> 00:39:36,800
there's going to be you know

00:39:33,440 --> 00:39:38,079
several uh directories with numbers

00:39:36,800 --> 00:39:40,240
you want the one that says i think it

00:39:38,079 --> 00:39:43,599
says zero three actual

00:39:40,240 --> 00:39:48,400
tests you want to go in there

00:39:43,599 --> 00:39:48,400
and we want to

00:39:49,680 --> 00:39:54,400
add this here to the top of

00:39:52,440 --> 00:39:56,000
bargs.spec.js

00:39:54,400 --> 00:39:57,760
i've confused myself a little bit but

00:39:56,000 --> 00:39:58,480
maybe we don't actually need to do that

00:39:57,760 --> 00:40:00,800
yet so

00:39:58,480 --> 00:40:00,800
um

00:40:03,599 --> 00:40:10,720
i think we want to let's just skip this

00:40:07,760 --> 00:40:12,640
one for now i want to make sure where

00:40:10,720 --> 00:40:15,280
where we are in the file system i'm

00:40:12,640 --> 00:40:18,400
going to talk about unit tests

00:40:15,280 --> 00:40:19,359
which is some some terminology that we

00:40:18,400 --> 00:40:21,440
need to understand

00:40:19,359 --> 00:40:24,079
so what we're going to do with bargs is

00:40:21,440 --> 00:40:27,520
we're going to write a unit test for it

00:40:24,079 --> 00:40:29,280
and a unit test is a test that makes

00:40:27,520 --> 00:40:30,800
again an assertion like in the other

00:40:29,280 --> 00:40:31,920
test and it's going to make an assertion

00:40:30,800 --> 00:40:34,079
about a unit

00:40:31,920 --> 00:40:35,520
but now we have to define unit what's a

00:40:34,079 --> 00:40:39,119
unit a unit

00:40:35,520 --> 00:40:42,880
is the smallest testable bit of code

00:40:39,119 --> 00:40:45,119
right so what is generally the smallest

00:40:42,880 --> 00:40:48,720
testable bit of code

00:40:45,119 --> 00:40:49,599
generally that is a function and for our

00:40:48,720 --> 00:40:52,960
purposes

00:40:49,599 --> 00:40:53,920
it's a function so a unit test is a test

00:40:52,960 --> 00:40:56,880
that makes an

00:40:53,920 --> 00:40:59,760
assertion about a unit a unit is in our

00:40:56,880 --> 00:40:59,760
case a function

00:41:01,520 --> 00:41:09,680
so what we want to do with a unit test

00:41:07,839 --> 00:41:12,880
is we want to try to test that function

00:41:09,680 --> 00:41:17,200
independently of other functions

00:41:12,880 --> 00:41:20,720
that's kind of a a broad topic as well

00:41:17,200 --> 00:41:24,319
how to achieve this independence or

00:41:20,720 --> 00:41:26,240
isolation when testing a function but

00:41:24,319 --> 00:41:28,000
i'm not going to go into it here so we

00:41:26,240 --> 00:41:28,880
have a single function parse and that's

00:41:28,000 --> 00:41:32,400
what we're going to test

00:41:28,880 --> 00:41:35,280
but where do we start testing

00:41:32,400 --> 00:41:35,920
let's look at bargs the source of barks

00:41:35,280 --> 00:41:38,240
and

00:41:35,920 --> 00:41:39,359
and see if we can find a good place to

00:41:38,240 --> 00:41:42,000
start

00:41:39,359 --> 00:41:43,200
and a lot of this has to do with kind of

00:41:42,000 --> 00:41:46,319
personal

00:41:43,200 --> 00:41:48,480
you know what you what you

00:41:46,319 --> 00:41:50,160
prefer to do i like to start testing

00:41:48,480 --> 00:41:53,760
exceptions so

00:41:50,160 --> 00:41:55,920
um here

00:41:53,760 --> 00:41:57,280
there's going to be this line

00:41:55,920 --> 00:42:01,359
highlighted in

00:41:57,280 --> 00:42:04,560
orange okay and so

00:42:01,359 --> 00:42:07,760
this expects value property

00:42:04,560 --> 00:42:10,640
this is how we tell barge that a an

00:42:07,760 --> 00:42:13,440
option say dash dash foo expects some

00:42:10,640 --> 00:42:17,359
sort of parameter after it so

00:42:13,440 --> 00:42:20,880
maybe we want to say dash dash require

00:42:17,359 --> 00:42:23,280
hypothetically uh dash dash require um

00:42:20,880 --> 00:42:25,359
baz right so we have a command and we

00:42:23,280 --> 00:42:26,160
want to we want to pass require baz to

00:42:25,359 --> 00:42:29,200
it

00:42:26,160 --> 00:42:30,160
um and we don't want to have that equal

00:42:29,200 --> 00:42:32,400
sign in there

00:42:30,160 --> 00:42:33,760
and the only way to do that is to give

00:42:32,400 --> 00:42:36,880
bargs a hint

00:42:33,760 --> 00:42:40,160
that hey we we are expecting

00:42:36,880 --> 00:42:43,280
um a value for this require option

00:42:40,160 --> 00:42:45,280
and so in that ops we would

00:42:43,280 --> 00:42:46,720
have this expect value array and in that

00:42:45,280 --> 00:42:49,839
array we would have require

00:42:46,720 --> 00:42:51,760
and that tells bargs hey require expect

00:42:49,839 --> 00:42:55,040
something after it

00:42:51,760 --> 00:42:56,720
and so um you know this this is

00:42:55,040 --> 00:43:00,720
javascript

00:42:56,720 --> 00:43:04,079
and uh it's kind of loosey-goosey so um

00:43:00,720 --> 00:43:07,119
we're doing a basic check uh to see if

00:43:04,079 --> 00:43:10,400
uh argv is an array um if

00:43:07,119 --> 00:43:11,440
it is not an array we assume that we've

00:43:10,400 --> 00:43:13,760
passed it

00:43:11,440 --> 00:43:15,920
an options object and we assume that we

00:43:13,760 --> 00:43:17,680
just want to

00:43:15,920 --> 00:43:19,839
use the default here actually i think

00:43:17,680 --> 00:43:23,839
that might not even be necessary

00:43:19,839 --> 00:43:27,200
um i think that's redundant but uh

00:43:23,839 --> 00:43:30,880
so yeah we want to actually no

00:43:27,200 --> 00:43:33,599
it's not it's fine so uh we want to uh

00:43:30,880 --> 00:43:35,520
allow a user to pass just an option

00:43:33,599 --> 00:43:37,680
options object and we'll use the default

00:43:35,520 --> 00:43:39,920
process rv slice too

00:43:37,680 --> 00:43:41,359
then we go and we want to get a unique

00:43:39,920 --> 00:43:44,640
set of everything

00:43:41,359 --> 00:43:46,720
in this expects value because we don't

00:43:44,640 --> 00:43:49,839
really need to duplicate

00:43:46,720 --> 00:43:49,839
things right so

00:43:50,000 --> 00:43:55,200
we want to and one way to do that anyway

00:43:52,720 --> 00:43:58,480
is to create a new set

00:43:55,200 --> 00:44:01,040
and so on this line

00:43:58,480 --> 00:44:03,280
we're making a new set from ops expects

00:44:01,040 --> 00:44:07,520
value but this function is written

00:44:03,280 --> 00:44:11,359
so that if you do not pass opts you

00:44:07,520 --> 00:44:14,079
will get a uh expects value

00:44:11,359 --> 00:44:16,000
of an empty array but if you do pass it

00:44:14,079 --> 00:44:19,119
and you give it an expects value

00:44:16,000 --> 00:44:22,160
and you give it something truthy

00:44:19,119 --> 00:44:22,800
that isn't an array parse will throw an

00:44:22,160 --> 00:44:24,720
exception

00:44:22,800 --> 00:44:27,200
because you cannot or something that's

00:44:24,720 --> 00:44:30,240
not iterable anyway you cannot just

00:44:27,200 --> 00:44:30,800
um instantiate a new set with like a

00:44:30,240 --> 00:44:34,160
number

00:44:30,800 --> 00:44:37,839
or something it has to be something that

00:44:34,160 --> 00:44:42,319
is uh iterable so

00:44:37,839 --> 00:44:45,520
what we're gonna do is make a um

00:44:42,319 --> 00:44:47,119
a uh expects

00:44:45,520 --> 00:44:48,720
uh let's see we're gonna make an

00:44:47,119 --> 00:44:52,640
assertion that

00:44:48,720 --> 00:44:56,240
checks are um parse function

00:44:52,640 --> 00:44:59,920
for this behavior and so

00:44:56,240 --> 00:45:02,000
let's go in here um

00:44:59,920 --> 00:45:03,839
so we want to check an exception but

00:45:02,000 --> 00:45:05,200
before we do that why we want to do that

00:45:03,839 --> 00:45:07,040
because

00:45:05,200 --> 00:45:08,480
bugs is a library you're going to have

00:45:07,040 --> 00:45:12,079
people using the library

00:45:08,480 --> 00:45:13,680
maybe and parse is a public api it's the

00:45:12,079 --> 00:45:15,839
interface of the function

00:45:13,680 --> 00:45:17,839
and so when people use your library they

00:45:15,839 --> 00:45:20,800
expect it to work

00:45:17,839 --> 00:45:21,440
and they expect it to fail in the same

00:45:20,800 --> 00:45:23,040
way

00:45:21,440 --> 00:45:25,200
so you might not think about it but it's

00:45:23,040 --> 00:45:25,520
like yeah that's that's another one of

00:45:25,200 --> 00:45:28,800
the

00:45:25,520 --> 00:45:29,520
the it might not be in the explicit api

00:45:28,800 --> 00:45:33,119
but

00:45:29,520 --> 00:45:36,560
people will expect your code to fail

00:45:33,119 --> 00:45:40,240
how it has always failed and if we um

00:45:36,560 --> 00:45:43,920
don't check our failure states we could

00:45:40,240 --> 00:45:46,960
break that and break users and

00:45:43,920 --> 00:45:52,960
and cause problems with consumers so

00:45:46,960 --> 00:45:56,079
um let's see here we want to

00:45:52,960 --> 00:45:59,599
i'd like to check

00:45:56,079 --> 00:46:02,960
if uh

00:45:59,599 --> 00:46:03,920
we are where we where i think we are

00:46:02,960 --> 00:46:07,520
here so

00:46:03,920 --> 00:46:09,839
let me pop out of here really quick and

00:46:07,520 --> 00:46:09,839
um

00:46:12,160 --> 00:46:32,000
i am just looking too

00:46:28,160 --> 00:46:35,440
all right um yeah so i had left

00:46:32,000 --> 00:46:38,560
i had left out directions here but um

00:46:35,440 --> 00:46:42,480
what we want to do is uh

00:46:38,560 --> 00:46:46,079
come on we want to go into the

00:46:42,480 --> 00:46:47,760
zero three uh actual test directory and

00:46:46,079 --> 00:46:48,400
that directory is again a barge

00:46:47,760 --> 00:46:50,839
directory

00:46:48,400 --> 00:46:52,319
there is a test directory and there is a

00:46:50,839 --> 00:46:57,440
bargas.spec.js file

00:46:52,319 --> 00:47:00,720
in there already and that file contains

00:46:57,440 --> 00:47:03,839
uh it contains this okay

00:47:00,720 --> 00:47:06,880
and so we want to change this and

00:47:03,839 --> 00:47:10,240
the first thing we want to do to it is

00:47:06,880 --> 00:47:14,000
we want to require this parse function

00:47:10,240 --> 00:47:16,880
so um at the top of this file

00:47:14,000 --> 00:47:19,119
which is in the zero three actual tests

00:47:16,880 --> 00:47:22,079
forward such bars forward slash test

00:47:19,119 --> 00:47:22,800
we want to add something like const

00:47:22,079 --> 00:47:25,200
parses

00:47:22,800 --> 00:47:26,960
require and so it'll it'll go and it'll

00:47:25,200 --> 00:47:29,040
grab the function out of barks

00:47:26,960 --> 00:47:31,359
there are other ways to do this but

00:47:29,040 --> 00:47:34,640
that's how we're doing it here

00:47:31,359 --> 00:47:37,119
um so uh

00:47:34,640 --> 00:47:39,440
what we want to do is we have all these

00:47:37,119 --> 00:47:42,720
assertions you can delete them all

00:47:39,440 --> 00:47:45,040
um and so you're gonna have

00:47:42,720 --> 00:47:46,880
your test file it will have require

00:47:45,040 --> 00:47:48,240
assert and it will have a require of

00:47:46,880 --> 00:47:50,319
bargs

00:47:48,240 --> 00:47:51,520
and so what we want to do is replace all

00:47:50,319 --> 00:47:54,640
this all this stuff

00:47:51,520 --> 00:47:55,760
with a call to assert.throws and again

00:47:54,640 --> 00:47:56,960
you're going to want to look at these

00:47:55,760 --> 00:47:59,839
docs

00:47:56,960 --> 00:48:03,119
and again it's the assert module

00:47:59,839 --> 00:48:04,119
nodejs.org forward slash api cert.html

00:48:03,119 --> 00:48:06,720
you're going to want to look at

00:48:04,119 --> 00:48:07,280
assert.throws and that is a function in

00:48:06,720 --> 00:48:09,760
there

00:48:07,280 --> 00:48:11,520
that's uh api in the cert module and

00:48:09,760 --> 00:48:13,200
what that function is going to do it

00:48:11,520 --> 00:48:15,119
accepts a function

00:48:13,200 --> 00:48:17,200
it accepts a function it does not accept

00:48:15,119 --> 00:48:20,319
a return value except a function

00:48:17,200 --> 00:48:21,520
to be clear about that and so we're

00:48:20,319 --> 00:48:24,480
going to pass it a function

00:48:21,520 --> 00:48:26,000
and we want to pass it a function which

00:48:24,480 --> 00:48:29,200
calls

00:48:26,000 --> 00:48:32,480
parse and we want to call parse

00:48:29,200 --> 00:48:35,280
with an ops parameter of expects value

00:48:32,480 --> 00:48:37,839
and we want to give it a

00:48:35,280 --> 00:48:39,920
like a empty object for the value of

00:48:37,839 --> 00:48:42,640
expects value

00:48:39,920 --> 00:48:43,839
okay and so what we want to do is we

00:48:42,640 --> 00:48:45,040
want to make sure

00:48:43,839 --> 00:48:48,000
what we're trying to do we want to make

00:48:45,040 --> 00:48:49,920
sure when we pass expects value

00:48:48,000 --> 00:48:51,599
with an empty object we want to make

00:48:49,920 --> 00:48:55,119
sure our tests are

00:48:51,599 --> 00:48:56,079
our tests are excuse me our parse

00:48:55,119 --> 00:48:59,280
function

00:48:56,079 --> 00:49:02,400
throws an exception so

00:48:59,280 --> 00:49:04,000
the test should pass but bargs should

00:49:02,400 --> 00:49:06,240
throw an exception

00:49:04,000 --> 00:49:17,839
and so i will wait a minute while you

00:49:06,240 --> 00:49:17,839
check this out

00:50:56,640 --> 00:51:03,920
okay so um again if you've

00:51:00,480 --> 00:51:06,800
done this correctly what should happen

00:51:03,920 --> 00:51:08,800
when you run it is nothing should happen

00:51:06,800 --> 00:51:09,680
and that is your that's your passing

00:51:08,800 --> 00:51:11,280
test

00:51:09,680 --> 00:51:12,960
if you did something wrong you're

00:51:11,280 --> 00:51:16,160
probably gonna get an exception

00:51:12,960 --> 00:51:19,440
but this is what i came up with so

00:51:16,160 --> 00:51:19,920
um your barge.spec.js should look like

00:51:19,440 --> 00:51:23,680
this

00:51:19,920 --> 00:51:28,400
now so

00:51:23,680 --> 00:51:30,800
we're calling the uh throws

00:51:28,400 --> 00:51:33,599
function in the assert module and we're

00:51:30,800 --> 00:51:33,599
giving it a

00:51:34,559 --> 00:51:38,480
lambda arrow function

00:51:38,960 --> 00:51:46,160
and we want to pass

00:51:42,559 --> 00:51:47,520
a call we want in this arrow function we

00:51:46,160 --> 00:51:50,559
want to call parse

00:51:47,520 --> 00:51:52,319
and we want to give it an expects value

00:51:50,559 --> 00:51:56,000
of an empty object

00:51:52,319 --> 00:51:57,839
and so this is the thing this is the

00:51:56,000 --> 00:51:58,960
subject of our assertion this is what

00:51:57,839 --> 00:52:03,040
we're testing this

00:51:58,960 --> 00:52:06,800
this this little arrow function and so

00:52:03,040 --> 00:52:09,920
when we do that we also give the assert

00:52:06,800 --> 00:52:11,680
throwstep function some some information

00:52:09,920 --> 00:52:14,800
about the

00:52:11,680 --> 00:52:16,720
assertion that we expect back and so

00:52:14,800 --> 00:52:18,240
what i would expect out of this is a

00:52:16,720 --> 00:52:22,079
type error

00:52:18,240 --> 00:52:25,520
and that will throw out of the call to

00:52:22,079 --> 00:52:26,960
new set again so we're calling new set

00:52:25,520 --> 00:52:28,720
and we're giving it something that's not

00:52:26,960 --> 00:52:29,040
iterable we're going to get something

00:52:28,720 --> 00:52:30,800
like

00:52:29,040 --> 00:52:32,559
object is not iterable that'll be the

00:52:30,800 --> 00:52:36,880
message and

00:52:32,559 --> 00:52:36,880
that error will be a type error

00:52:37,359 --> 00:52:44,480
um so what would happen if we

00:52:41,359 --> 00:52:46,640
modified this and i would

00:52:44,480 --> 00:52:49,520
actually i would suggest you copy what i

00:52:46,640 --> 00:52:52,559
have here but um

00:52:49,520 --> 00:52:55,680
what happens if we modify the name

00:52:52,559 --> 00:52:58,000
to read error instead of type error

00:52:55,680 --> 00:52:59,520
what would happen you think it would

00:52:58,000 --> 00:53:05,040
fail

00:52:59,520 --> 00:53:05,040
it matches the name exactly

00:53:05,119 --> 00:53:08,640
we are using a regular expression here

00:53:07,359 --> 00:53:12,640
to test the message

00:53:08,640 --> 00:53:13,839
and the message is going to be longer

00:53:12,640 --> 00:53:15,440
than

00:53:13,839 --> 00:53:17,280
object is not iterable i don't know

00:53:15,440 --> 00:53:19,440
exactly what it says

00:53:17,280 --> 00:53:21,040
but some portion of that message this

00:53:19,440 --> 00:53:22,559
this regular expression says some

00:53:21,040 --> 00:53:25,040
portion of the the message should look

00:53:22,559 --> 00:53:25,040
like this

00:53:25,760 --> 00:53:30,000
but it doesn't need to match the message

00:53:28,079 --> 00:53:33,200
exactly and so that's kind of handy

00:53:30,000 --> 00:53:36,800
um especially

00:53:33,200 --> 00:53:40,640
yeah messages and exceptions can change

00:53:36,800 --> 00:53:43,839
um it would be cool to

00:53:40,640 --> 00:53:45,920
uh sorry all the a bunch of errors

00:53:43,839 --> 00:53:48,319
thrown out of node now have this code

00:53:45,920 --> 00:53:49,359
property um which is a better thing to

00:53:48,319 --> 00:53:53,040
check um

00:53:49,359 --> 00:53:56,160
here we don't have that it's just a

00:53:53,040 --> 00:54:00,400
a error at a v8 it's it's a language

00:53:56,160 --> 00:54:02,720
error or a api error so um

00:54:00,400 --> 00:54:03,680
yeah that is our first exception

00:54:02,720 --> 00:54:06,079
assertion

00:54:03,680 --> 00:54:06,880
we want to add another assertion now and

00:54:06,079 --> 00:54:08,559
so

00:54:06,880 --> 00:54:10,240
i think we should probably do is so

00:54:08,559 --> 00:54:13,760
assuming your bard spec

00:54:10,240 --> 00:54:16,880
just looks like this copy the assertion

00:54:13,760 --> 00:54:20,800
and paste it again and then change

00:54:16,880 --> 00:54:23,280
the value to one instead of a

00:54:20,800 --> 00:54:24,000
empty object and we're going to use just

00:54:23,280 --> 00:54:27,119
we're going to write just

00:54:24,000 --> 00:54:30,400
another assertion to do this and

00:54:27,119 --> 00:54:33,280
um when you run it

00:54:30,400 --> 00:54:33,920
it should fail and i'm going to need you

00:54:33,280 --> 00:54:37,359
to go in

00:54:33,920 --> 00:54:38,559
and change the the options to

00:54:37,359 --> 00:54:41,520
assert.throws

00:54:38,559 --> 00:54:53,839
so that the test passes so i'm gonna

00:54:41,520 --> 00:54:53,839
wait just a minute

00:55:46,559 --> 00:55:50,799
okay so you have gone into here you've

00:55:49,680 --> 00:55:55,599
changed expect

00:55:50,799 --> 00:55:55,599
value to be one and then you've um

00:55:56,880 --> 00:56:01,599
updated it so uh it would look

00:55:59,920 --> 00:56:03,280
very similar to the last one that we

00:56:01,599 --> 00:56:05,440
wrote um

00:56:03,280 --> 00:56:07,040
except the message will say number one

00:56:05,440 --> 00:56:08,880
is not iterable it's not going to say

00:56:07,040 --> 00:56:10,559
object is not integral number one is not

00:56:08,880 --> 00:56:14,960
iterable

00:56:10,559 --> 00:56:18,880
and so um yeah so these are

00:56:14,960 --> 00:56:21,760
how to test exceptions coming out of our

00:56:18,880 --> 00:56:23,440
our function and and and the cool thing

00:56:21,760 --> 00:56:25,520
about writing tests this way is it makes

00:56:23,440 --> 00:56:27,359
you think a bit more about about the api

00:56:25,520 --> 00:56:29,040
the function api that you're writing so

00:56:27,359 --> 00:56:31,280
while i was doing this i was

00:56:29,040 --> 00:56:32,640
thinking well you know what that's not

00:56:31,280 --> 00:56:36,640
really helpful

00:56:32,640 --> 00:56:39,119
to somebody trying to use my code

00:56:36,640 --> 00:56:41,599
you know maybe instead of letting

00:56:39,119 --> 00:56:46,160
javascript through that error

00:56:41,599 --> 00:56:46,160
i should check and make sure that

00:56:46,400 --> 00:56:50,079
expects value is iterable and if it

00:56:49,359 --> 00:56:51,920
isn't then

00:56:50,079 --> 00:56:53,200
i'm going to throw a custom error that

00:56:51,920 --> 00:56:55,839
says something like

00:56:53,200 --> 00:56:56,839
expects value should be you know an

00:56:55,839 --> 00:56:59,920
array

00:56:56,839 --> 00:57:02,319
um and

00:56:59,920 --> 00:57:04,240
that would just be kind of more i think

00:57:02,319 --> 00:57:06,640
consumer friendly

00:57:04,240 --> 00:57:08,160
but just something to note that you know

00:57:06,640 --> 00:57:10,079
writing tests like this can help you

00:57:08,160 --> 00:57:13,359
really

00:57:10,079 --> 00:57:16,160
kind of dog food kind of feel how

00:57:13,359 --> 00:57:17,599
how it it feels to use an api that

00:57:16,160 --> 00:57:21,680
you're writing

00:57:17,599 --> 00:57:24,799
um and so we've done our uh exceptions

00:57:21,680 --> 00:57:25,359
and i want to move on to actually

00:57:24,799 --> 00:57:28,559
checking

00:57:25,359 --> 00:57:28,960
the what happens when parse does not

00:57:28,559 --> 00:57:32,319
throw

00:57:28,960 --> 00:57:35,760
right so this is the the

00:57:32,319 --> 00:57:38,319
usual usage of of parse um

00:57:35,760 --> 00:57:39,119
we're going to give parse valid input so

00:57:38,319 --> 00:57:41,200
an array of

00:57:39,119 --> 00:57:43,599
uh command line options and then we're

00:57:41,200 --> 00:57:46,240
going to check the return value

00:57:43,599 --> 00:57:46,799
and if you go into you probably still

00:57:46,240 --> 00:57:48,400
have the

00:57:46,799 --> 00:57:49,760
the documents open if you've looked at

00:57:48,400 --> 00:57:51,920
them at all but if you have the

00:57:49,760 --> 00:57:54,880
documentation open for the assert module

00:57:51,920 --> 00:57:56,960
you can poke around in there and you'll

00:57:54,880 --> 00:58:00,480
see that there's a does not throw

00:57:56,960 --> 00:58:03,599
function you don't want that for this

00:58:00,480 --> 00:58:07,040
so it's it's it's

00:58:03,599 --> 00:58:09,119
for like void functions right so

00:58:07,040 --> 00:58:10,799
if you have a function that has side

00:58:09,119 --> 00:58:12,160
effects for example

00:58:10,799 --> 00:58:13,839
maybe you just want to check that it

00:58:12,160 --> 00:58:14,720
that it doesn't throw because it's not

00:58:13,839 --> 00:58:18,319
going to ever

00:58:14,720 --> 00:58:19,760
return anything right um but in our case

00:58:18,319 --> 00:58:22,319
our function returns something

00:58:19,760 --> 00:58:23,040
it should return the same you know it

00:58:22,319 --> 00:58:24,720
should

00:58:23,040 --> 00:58:26,880
yeah we want to just test the return

00:58:24,720 --> 00:58:30,640
value because we can

00:58:26,880 --> 00:58:32,960
um so what we want to do is add a third

00:58:30,640 --> 00:58:34,079
assertion so your barge.spec.js should

00:58:32,960 --> 00:58:36,400
have these first two

00:58:34,079 --> 00:58:38,000
assertions about the exceptions it

00:58:36,400 --> 00:58:41,920
should have a third exertion

00:58:38,000 --> 00:58:45,280
assertion now now you want to pass

00:58:41,920 --> 00:58:48,400
this array right here it's just a

00:58:45,280 --> 00:58:50,160
array with one element and that element

00:58:48,400 --> 00:58:52,160
is dash dash foo

00:58:50,160 --> 00:58:53,440
and it's a string and when you want to

00:58:52,160 --> 00:58:56,640
pass that to parse

00:58:53,440 --> 00:59:00,000
and we don't want to pass options

00:58:56,640 --> 00:59:02,880
and so we want to make a call to

00:59:00,000 --> 00:59:06,240
assert dot deep strict equal that's what

00:59:02,880 --> 00:59:08,799
we want to use here and we want to

00:59:06,240 --> 00:59:10,720
assert that the return value of calling

00:59:08,799 --> 00:59:13,520
parse with this array

00:59:10,720 --> 00:59:16,400
is an object we expect and so here it

00:59:13,520 --> 00:59:21,119
says refer to table of expected behavior

00:59:16,400 --> 00:59:21,119
i'm going to wait just a second and um

00:59:22,079 --> 00:59:26,480
make sure we have the have the

00:59:24,559 --> 00:59:29,359
instructions here so

00:59:26,480 --> 00:59:30,160
we're going to add an assertion that a

00:59:29,359 --> 00:59:33,040
search

00:59:30,160 --> 00:59:33,680
asserts that passing valid arguments to

00:59:33,040 --> 00:59:36,799
parse

00:59:33,680 --> 00:59:39,040
returns an object of a certain shape and

00:59:36,799 --> 00:59:40,720
we're going to use assert.deepstrict

00:59:39,040 --> 00:59:43,280
equal to do that

00:59:40,720 --> 00:59:44,720
and here's my refer to table of expected

00:59:43,280 --> 00:59:47,760
behavior

00:59:44,720 --> 00:59:49,359
does this work yes okay so uh there it

00:59:47,760 --> 00:59:52,640
is

00:59:49,359 --> 00:59:57,520
um the input array

00:59:52,640 --> 00:59:57,520
again is uh actually this is kind of a

00:59:58,799 --> 01:00:04,000
yeah that's that's misdirection a bit so

01:00:01,760 --> 01:00:04,000
um

01:00:04,079 --> 01:00:07,119
what i would do is this instead i would

01:00:06,000 --> 01:00:09,040
go and we would

01:00:07,119 --> 01:00:11,839
we would check uh we would pass this

01:00:09,040 --> 01:00:14,799
parse to assert.deepstrict equal

01:00:11,839 --> 01:00:16,240
and we want to expect um just give it

01:00:14,799 --> 01:00:18,559
like an empty object

01:00:16,240 --> 01:00:19,359
right so that would be the second

01:00:18,559 --> 01:00:21,119
parameter

01:00:19,359 --> 01:00:23,040
and so you're going to run that code and

01:00:21,119 --> 01:00:25,280
it's going to fail and you're going to

01:00:23,040 --> 01:00:27,520
it's going to tell you why it's say oh

01:00:25,280 --> 01:00:29,280
well it doesn't match this empty object

01:00:27,520 --> 01:00:30,960
is not what parse returned it returns

01:00:29,280 --> 01:00:33,040
something else entirely

01:00:30,960 --> 01:00:34,640
and so you're going to want to look at

01:00:33,040 --> 01:00:37,839
that and see what it

01:00:34,640 --> 01:00:38,640
what it returned and update your assert

01:00:37,839 --> 01:00:41,680
accord

01:00:38,640 --> 01:00:42,000
assert call accordingly and so i'll give

01:00:41,680 --> 01:00:45,040
you

01:00:42,000 --> 01:00:47,440
a minute to look into that but uh

01:00:45,040 --> 01:00:49,760
another thing is do not use

01:00:47,440 --> 01:00:51,839
uh deep equal or equal those those

01:00:49,760 --> 01:00:53,760
functions are both deprecated

01:00:51,839 --> 01:00:55,599
uh you want deep strict equal or or

01:00:53,760 --> 01:00:57,440
strict equal and here especially you

01:00:55,599 --> 01:01:00,240
want deep strict equal this is

01:00:57,440 --> 01:01:01,280
deep strict equal is for comparing

01:01:00,240 --> 01:01:03,200
objects

01:01:01,280 --> 01:01:04,559
uh strict equal is for comparing

01:01:03,200 --> 01:01:05,760
primitive so that's why you want to use

01:01:04,559 --> 01:01:06,640
this function so i'm going to wait a

01:01:05,760 --> 01:01:11,839
minute and

01:01:06,640 --> 01:01:11,839
we're going to check that return value

01:03:17,039 --> 01:03:23,839
okay so this is what i came up with for

01:03:20,799 --> 01:03:25,359
for this one so um

01:03:23,839 --> 01:03:26,880
we're going to call assert deep strict

01:03:25,359 --> 01:03:30,160
equal and

01:03:26,880 --> 01:03:32,319
we're going to pass it um

01:03:30,160 --> 01:03:34,880
we're passing it the return value of

01:03:32,319 --> 01:03:37,520
parse we're not passing it a function

01:03:34,880 --> 01:03:38,960
um we're passing uh we're actually

01:03:37,520 --> 01:03:40,960
making a call to parse

01:03:38,960 --> 01:03:42,000
and we're giving it the arrays array we

01:03:40,960 --> 01:03:45,359
expected

01:03:42,000 --> 01:03:48,079
and uh we're going to get back um

01:03:45,359 --> 01:03:48,640
underscore empty array which again is

01:03:48,079 --> 01:03:50,640
these

01:03:48,640 --> 01:03:52,960
positional arguments and we're going to

01:03:50,640 --> 01:03:56,640
get foo

01:03:52,960 --> 01:03:59,839
foo is true the food pro the

01:03:56,640 --> 01:04:03,680
property is true

01:03:59,839 --> 01:04:05,119
so if we had used strict equal here this

01:04:03,680 --> 01:04:09,520
would not work

01:04:05,119 --> 01:04:12,480
because strict equal

01:04:09,520 --> 01:04:12,880
will expect the objects to be the very

01:04:12,480 --> 01:04:15,280
same

01:04:12,880 --> 01:04:17,680
objects and so that's not going to work

01:04:15,280 --> 01:04:18,240
because parse returns a completely new

01:04:17,680 --> 01:04:22,640
object

01:04:18,240 --> 01:04:25,599
every time deep strict equal instead

01:04:22,640 --> 01:04:27,119
checks primitives and there's actually

01:04:25,599 --> 01:04:28,559
does a whole lot of things and you can

01:04:27,119 --> 01:04:32,160
read the docs and see

01:04:28,559 --> 01:04:34,559
exactly what it what it means um

01:04:32,160 --> 01:04:36,880
but in our case this is this is probably

01:04:34,559 --> 01:04:40,160
the correct thing to test

01:04:36,880 --> 01:04:42,559
so uh great

01:04:40,160 --> 01:04:44,160
we've written some tests in a file it's

01:04:42,559 --> 01:04:48,559
just a bunch of assertions

01:04:44,160 --> 01:04:49,920
and so um there's this is

01:04:48,559 --> 01:04:54,319
yeah this is not good there are there

01:04:49,920 --> 01:04:56,480
are problems with with doing it this way

01:04:54,319 --> 01:04:57,520
they're not you know you can overcome

01:04:56,480 --> 01:05:00,720
them you know

01:04:57,520 --> 01:05:04,400
node node.js itself um

01:05:00,720 --> 01:05:08,079
tests itself essentially in this manner

01:05:04,400 --> 01:05:10,720
but um what happens

01:05:08,079 --> 01:05:12,160
if you run this file and it's got these

01:05:10,720 --> 01:05:16,079
three assertions in it

01:05:12,160 --> 01:05:16,079
and the second assertion fails

01:05:16,400 --> 01:05:21,920
an exception is thrown and your process

01:05:19,440 --> 01:05:23,440
exit exits and we never reach the third

01:05:21,920 --> 01:05:27,039
assertion

01:05:23,440 --> 01:05:29,200
um okay so if we want to make sure that

01:05:27,039 --> 01:05:34,000
all of our stuff gets executed

01:05:29,200 --> 01:05:38,079
we would maybe wrap things and try catch

01:05:34,000 --> 01:05:41,520
um but that's adding boilerplate right

01:05:38,079 --> 01:05:43,599
um so yeah you're gonna maybe write a

01:05:41,520 --> 01:05:45,200
function to do that for you

01:05:43,599 --> 01:05:47,440
then you've started writing a test

01:05:45,200 --> 01:05:50,000
framework but uh there are kind of

01:05:47,440 --> 01:05:53,200
limited options for organization here

01:05:50,000 --> 01:05:56,160
maybe you can come up with your own

01:05:53,200 --> 01:05:57,440
set of functions to help organize things

01:05:56,160 --> 01:06:00,240
otherwise you're

01:05:57,440 --> 01:06:00,720
you're kind of stuck adding you know

01:06:00,240 --> 01:06:02,640
using

01:06:00,720 --> 01:06:04,240
like a bunch of different files you

01:06:02,640 --> 01:06:06,559
can't put a whole bunch of stuff in one

01:06:04,240 --> 01:06:06,559
file

01:06:07,039 --> 01:06:10,559
you know that it's just going to be like

01:06:08,559 --> 01:06:11,680
a huge god test and it's going to be

01:06:10,559 --> 01:06:13,440
awful so

01:06:11,680 --> 01:06:15,680
there's limited options for organ

01:06:13,440 --> 01:06:17,520
organizing your code unless you

01:06:15,680 --> 01:06:19,680
essentially again write some sort of

01:06:17,520 --> 01:06:20,559
framework you can only run a single file

01:06:19,680 --> 01:06:23,920
at once

01:06:20,559 --> 01:06:27,920
maybe you have written a script to

01:06:23,920 --> 01:06:30,799
include all of your other test files

01:06:27,920 --> 01:06:31,760
but that seems like a pain in the butt

01:06:30,799 --> 01:06:33,839
or you know

01:06:31,760 --> 01:06:35,440
it's going to need a custom script if

01:06:33,839 --> 01:06:36,960
you want to run more than one file at

01:06:35,440 --> 01:06:39,280
once because you can't just

01:06:36,960 --> 01:06:40,960
give a whole bunch of files to node you

01:06:39,280 --> 01:06:44,079
give node one script

01:06:40,960 --> 01:06:46,880
and that's what it runs um

01:06:44,079 --> 01:06:47,280
and so limited reporting options right

01:06:46,880 --> 01:06:50,319
so

01:06:47,280 --> 01:06:52,079
uh we're throwing um if something fails

01:06:50,319 --> 01:06:54,160
but what happens on success again

01:06:52,079 --> 01:06:55,119
you're not seeing anything if all our

01:06:54,160 --> 01:06:58,240
assertions pass

01:06:55,119 --> 01:06:59,440
the the process will just exit with exit

01:06:58,240 --> 01:07:01,839
code 0 and

01:06:59,440 --> 01:07:04,000
it won't print anything and so if you

01:07:01,839 --> 01:07:05,680
want more information than that

01:07:04,000 --> 01:07:07,280
you're gonna have to code it up yourself

01:07:05,680 --> 01:07:07,920
and again that's like going down the

01:07:07,280 --> 01:07:09,599
path of

01:07:07,920 --> 01:07:11,119
the right a test framework and so this

01:07:09,599 --> 01:07:12,319
is where test frameworks that have

01:07:11,119 --> 01:07:14,880
already been written

01:07:12,319 --> 01:07:15,920
can help you and this is where milka can

01:07:14,880 --> 01:07:18,640
help you

01:07:15,920 --> 01:07:20,559
so um let's talk about what we've done

01:07:18,640 --> 01:07:21,599
in this actual testing section so we've

01:07:20,559 --> 01:07:23,760
talked about bargs

01:07:21,599 --> 01:07:25,280
which is a library for parsing command

01:07:23,760 --> 01:07:27,760
line arguments

01:07:25,280 --> 01:07:29,039
we've learned what a unit test is and

01:07:27,760 --> 01:07:32,160
we've learned what a unit

01:07:29,039 --> 01:07:35,839
is which is generally a function

01:07:32,160 --> 01:07:38,559
we've learned how to test a module so

01:07:35,839 --> 01:07:39,680
we have a test file we've pulled in our

01:07:38,559 --> 01:07:42,559
module bargs

01:07:39,680 --> 01:07:44,079
and we've run some tests against it

01:07:42,559 --> 01:07:46,880
we've learned how to use the assert

01:07:44,079 --> 01:07:48,079
module built into node to test

01:07:46,880 --> 01:07:52,000
exceptions

01:07:48,079 --> 01:07:53,839
the behavior of our parse function and

01:07:52,000 --> 01:07:56,319
how it throws some exceptions we've

01:07:53,839 --> 01:07:59,839
learned how to assert

01:07:56,319 --> 01:08:03,200
the return values for a given input from

01:07:59,839 --> 01:08:07,039
from parse and we've learned how

01:08:03,200 --> 01:08:08,960
this can kind of snowball a bit and

01:08:07,039 --> 01:08:10,559
and this is how something like mocha

01:08:08,960 --> 01:08:12,079
could help

01:08:10,559 --> 01:08:14,319
so now we're going to talk about

01:08:12,079 --> 01:08:16,000
actually mocha so here's mocha

01:08:14,319 --> 01:08:18,480
mocha is a testing framework for

01:08:16,000 --> 01:08:20,319
javascript

01:08:18,480 --> 01:08:22,880
it's a framework right so if you think

01:08:20,319 --> 01:08:26,000
of a framework maybe you think of

01:08:22,880 --> 01:08:27,120
i don't know react angular express stuff

01:08:26,000 --> 01:08:30,239
like that

01:08:27,120 --> 01:08:34,000
um and like other frameworks

01:08:30,239 --> 01:08:37,279
mocha the the aim here is to allow

01:08:34,000 --> 01:08:39,679
you the developer to focus on your

01:08:37,279 --> 01:08:42,000
specific application application

01:08:39,679 --> 01:08:45,600
specific details

01:08:42,000 --> 01:08:48,640
instead of calling into the library

01:08:45,600 --> 01:08:51,040
and and making functions that way

01:08:48,640 --> 01:08:52,239
like other frameworks you kind of fill

01:08:51,040 --> 01:08:55,279
in the blanks

01:08:52,239 --> 01:08:56,880
with um your your application

01:08:55,279 --> 01:08:58,480
specific code like you would write a

01:08:56,880 --> 01:09:03,279
react component uh

01:08:58,480 --> 01:09:06,400
react uh provides this um

01:09:03,279 --> 01:09:08,080
framework for uh four components and

01:09:06,400 --> 01:09:10,080
maybe you write write a component you

01:09:08,080 --> 01:09:12,239
kind of fill in the blank with with

01:09:10,080 --> 01:09:13,759
what's unique to your code and mocha

01:09:12,239 --> 01:09:16,319
works the same way

01:09:13,759 --> 01:09:18,000
it says okay you fill in the blanks with

01:09:16,319 --> 01:09:21,279
your tests and assertions

01:09:18,000 --> 01:09:24,719
and i'm going to give you some uh

01:09:21,279 --> 01:09:26,960
some functions to help you do that so

01:09:24,719 --> 01:09:27,759
and mocha again mocha's purpose much

01:09:26,960 --> 01:09:29,839
like

01:09:27,759 --> 01:09:31,279
the purpose of any framework is to make

01:09:29,839 --> 01:09:33,759
make make it easier

01:09:31,279 --> 01:09:35,040
um to do what you're trying to do and

01:09:33,759 --> 01:09:37,520
and focus on

01:09:35,040 --> 01:09:39,600
the the specific concerns that you have

01:09:37,520 --> 01:09:41,359
instead of needing to worry about these

01:09:39,600 --> 01:09:45,040
things that you always need to do

01:09:41,359 --> 01:09:48,000
like you always need to um

01:09:45,040 --> 01:09:49,359
you know maybe report on on failures you

01:09:48,000 --> 01:09:51,440
always always need to

01:09:49,359 --> 01:09:53,040
report successes maybe you don't always

01:09:51,440 --> 01:09:56,159
need to but

01:09:53,040 --> 01:09:58,080
you always need to uh

01:09:56,159 --> 01:10:00,320
you know have some some some way to

01:09:58,080 --> 01:10:02,960
organize things

01:10:00,320 --> 01:10:04,719
you know you always need to be able to

01:10:02,960 --> 01:10:07,520
run multiple files at once

01:10:04,719 --> 01:10:08,320
so you know mocha a framework a test

01:10:07,520 --> 01:10:12,159
framework

01:10:08,320 --> 01:10:16,159
um its purpose is to to make this easier

01:10:12,159 --> 01:10:18,480
um so now we're going to go into this

01:10:16,159 --> 01:10:20,719
zero four introducing mocha directory

01:10:18,480 --> 01:10:23,920
and so that's right off the working cup

01:10:20,719 --> 01:10:25,600
the main root in the dead simple testing

01:10:23,920 --> 01:10:30,080
with mocha

01:10:25,600 --> 01:10:31,920
want to go into the zero four um

01:10:30,080 --> 01:10:33,120
directory and in there there's another

01:10:31,920 --> 01:10:35,679
bargs

01:10:33,120 --> 01:10:37,280
and in this one and i hope i haven't

01:10:35,679 --> 01:10:40,400
done this already but

01:10:37,280 --> 01:10:41,600
um we want to install mocha in here okay

01:10:40,400 --> 01:10:43,120
so you're going to go into this

01:10:41,600 --> 01:10:46,239
directory and you're going to install

01:10:43,120 --> 01:10:48,560
mocha as a dev dependency

01:10:46,239 --> 01:10:50,080
typically if you're going to use mocha

01:10:48,560 --> 01:10:52,159
on an actual project you're going to

01:10:50,080 --> 01:10:53,120
want to install it as a dev dependency

01:10:52,159 --> 01:10:54,880
the only way

01:10:53,120 --> 01:10:56,880
time you would not want to do that is

01:10:54,880 --> 01:10:59,920
generally if you're trying to

01:10:56,880 --> 01:11:00,480
build a plug-in or something and even

01:10:59,920 --> 01:11:02,000
then

01:11:00,480 --> 01:11:04,080
yeah if you're trying to build on top of

01:11:02,000 --> 01:11:05,040
mocha you might not want to use a dev

01:11:04,080 --> 01:11:07,840
dependency but

01:11:05,040 --> 01:11:10,239
generally just do that so i'll wait a

01:11:07,840 --> 01:11:13,440
sec while you go into

01:11:10,239 --> 01:11:15,840
o4 introducing mocha and uh

01:11:13,440 --> 01:11:17,280
install npm install in bargs and again

01:11:15,840 --> 01:11:20,480
there should be a package json

01:11:17,280 --> 01:11:22,640
in there and it should update

01:11:20,480 --> 01:11:25,360
um your package json when you do that it

01:11:22,640 --> 01:11:28,800
might even make a lock file i don't know

01:11:25,360 --> 01:11:41,840
but yeah please install mocha and i'll

01:11:28,800 --> 01:11:41,840
give this a minute

01:11:56,960 --> 01:12:00,480
all right it shouldn't take that long i

01:11:59,920 --> 01:12:04,480
mean

01:12:00,480 --> 01:12:06,080
it's not that bad so um

01:12:04,480 --> 01:12:08,239
let's assume we have milk installed in

01:12:06,080 --> 01:12:11,600
this zero four introducing mocha

01:12:08,239 --> 01:12:15,199
bargs so yeah we got it in there and

01:12:11,600 --> 01:12:19,040
uh now we can open up our package.json

01:12:15,199 --> 01:12:22,800
and um in that package.json there should

01:12:19,040 --> 01:12:26,320
be there should not be a scripts

01:12:22,800 --> 01:12:28,960
uh property but we want to add one so

01:12:26,320 --> 01:12:29,360
we want to add a script called test and

01:12:28,960 --> 01:12:32,400
um

01:12:29,360 --> 01:12:34,840
what the value of that

01:12:32,400 --> 01:12:37,840
script should be is mocha test for

01:12:34,840 --> 01:12:37,840
slashbox.spec.js

01:12:40,320 --> 01:12:45,920
and so what this is going to do is this

01:12:42,159 --> 01:12:49,040
is going to allow us to run our tests

01:12:45,920 --> 01:12:51,520
with npm just by

01:12:49,040 --> 01:12:54,800
typing npm test on the command line and

01:12:51,520 --> 01:12:56,719
so once you've added this to pack.json

01:12:54,800 --> 01:12:57,840
and you may need a comma don't forget

01:12:56,719 --> 01:13:01,280
your comma somewhere

01:12:57,840 --> 01:13:04,320
but once you've added it

01:13:01,280 --> 01:13:07,120
exit and run npm test and

01:13:04,320 --> 01:13:07,679
what you should see is something like

01:13:07,120 --> 01:13:10,159
zero

01:13:07,679 --> 01:13:10,159
passing

01:13:10,880 --> 01:13:14,159
if you've done this correctly

01:13:16,800 --> 01:13:20,320
and the reason you will see zero passing

01:13:18,719 --> 01:13:23,679
is um

01:13:20,320 --> 01:13:24,159
so oh yeah that test barge.spec that has

01:13:23,679 --> 01:13:26,320
been

01:13:24,159 --> 01:13:27,760
that should be updated to include all

01:13:26,320 --> 01:13:32,159
the assertions we wrote

01:13:27,760 --> 01:13:33,920
in the last section um so um

01:13:32,159 --> 01:13:35,760
yeah so that does have the assertions in

01:13:33,920 --> 01:13:36,080
it but when you run npm tests you should

01:13:35,760 --> 01:13:38,960
see

01:13:36,080 --> 01:13:40,320
zero passing and that is because while

01:13:38,960 --> 01:13:44,000
the code in

01:13:40,320 --> 01:13:47,440
vargs.spec js is being run

01:13:44,000 --> 01:13:48,640
it is not running in a way that mocha

01:13:47,440 --> 01:13:50,159
knows about

01:13:48,640 --> 01:13:53,280
and so it's a framework and there are

01:13:50,159 --> 01:13:55,199
conventions and api calls and things and

01:13:53,280 --> 01:13:56,960
we're not using any of those yet so you

01:13:55,199 --> 01:14:01,840
should see zero passing when you're on

01:13:56,960 --> 01:14:01,840
npm test

01:14:10,400 --> 01:14:14,159
so i assume this works again what we

01:14:12,159 --> 01:14:16,239
want to do is add a test

01:14:14,159 --> 01:14:17,360
script to our package json and we want

01:14:16,239 --> 01:14:20,640
to run mocha

01:14:17,360 --> 01:14:22,800
on our test file so

01:14:20,640 --> 01:14:23,920
let's talk about tests in mocha what is

01:14:22,800 --> 01:14:26,320
a test in

01:14:23,920 --> 01:14:26,320
mocha

01:14:26,960 --> 01:14:33,920
so a test has a title

01:14:30,560 --> 01:14:37,040
and it has a body and

01:14:33,920 --> 01:14:37,600
a body is just a function and that

01:14:37,040 --> 01:14:41,199
function

01:14:37,600 --> 01:14:44,719
contains uh an assertion maybe it

01:14:41,199 --> 01:14:50,000
contains one or more assertions

01:14:44,719 --> 01:14:52,239
and the title describes the behavior

01:14:50,000 --> 01:14:52,239
so

01:14:54,320 --> 01:15:00,960
mocha's default api it it sort of mimics

01:14:57,920 --> 01:15:01,840
natural language and it you if you're

01:15:00,960 --> 01:15:04,960
coming from

01:15:01,840 --> 01:15:08,000
i don't know java or something

01:15:04,960 --> 01:15:08,719
and you see this this api you're gonna

01:15:08,000 --> 01:15:11,679
be like what

01:15:08,719 --> 01:15:12,560
so it's it's the name of the function to

01:15:11,679 --> 01:15:15,760
create a test

01:15:12,560 --> 01:15:19,040
um by default mocha is it i t

01:15:15,760 --> 01:15:21,199
it and uh that's a global api

01:15:19,040 --> 01:15:23,360
so when you write a test in mocha you

01:15:21,199 --> 01:15:24,480
don't need to require mocha or import

01:15:23,360 --> 01:15:26,400
mocha

01:15:24,480 --> 01:15:28,560
you can if you really really really want

01:15:26,400 --> 01:15:31,600
to but it's not necessary

01:15:28,560 --> 01:15:35,440
because it dumps this into the

01:15:31,600 --> 01:15:38,640
global context and so um

01:15:35,440 --> 01:15:41,760
it's called it it makes a test

01:15:38,640 --> 01:15:44,800
um the reason behind this is

01:15:41,760 --> 01:15:46,320
so uh mocha is actually pretty old

01:15:44,800 --> 01:15:47,920
i think it's about eight or nine years

01:15:46,320 --> 01:15:51,600
old now and it was

01:15:47,920 --> 01:15:55,199
inspired by a testing package for ruby

01:15:51,600 --> 01:15:58,239
and that testing package is r-spec

01:15:55,199 --> 01:16:01,120
and so our specs api looks a lot like

01:15:58,239 --> 01:16:01,120
mocha's api

01:16:01,199 --> 01:16:05,199
and so for whatever reason and i don't

01:16:03,520 --> 01:16:07,040
really know i don't really understand

01:16:05,199 --> 01:16:10,400
the spread of things but

01:16:07,040 --> 01:16:12,239
um now you know in

01:16:10,400 --> 01:16:14,000
mocha we have this kind of natural

01:16:12,239 --> 01:16:17,199
language api

01:16:14,000 --> 01:16:17,679
jasmine which is maybe just as old as

01:16:17,199 --> 01:16:20,960
mocha

01:16:17,679 --> 01:16:22,480
also uses the same type of api you're

01:16:20,960 --> 01:16:25,840
going to see

01:16:22,480 --> 01:16:28,560
it and jest is another one that that can

01:16:25,840 --> 01:16:30,719
also use this api

01:16:28,560 --> 01:16:33,760
it's kind of you know again it's

01:16:30,719 --> 01:16:36,480
mimicking natural language in that api

01:16:33,760 --> 01:16:36,880
this natural language thing it's based

01:16:36,480 --> 01:16:40,480
on

01:16:36,880 --> 01:16:42,719
something called bdd or behavior driven

01:16:40,480 --> 01:16:44,480
is it behavior driven design or behavior

01:16:42,719 --> 01:16:46,080
driven development

01:16:44,480 --> 01:16:48,719
if you're really interested you can look

01:16:46,080 --> 01:16:50,880
it up but it doesn't really matter

01:16:48,719 --> 01:16:52,480
because we're just talking about the api

01:16:50,880 --> 01:16:54,960
and it does

01:16:52,480 --> 01:16:56,560
yeah it's it's i'm not going to go into

01:16:54,960 --> 01:16:57,679
bdd

01:16:56,560 --> 01:17:00,000
but you don't really need to know

01:16:57,679 --> 01:17:01,760
anything about bdd to use mocha or

01:17:00,000 --> 01:17:03,520
any of these testing tools you just need

01:17:01,760 --> 01:17:05,920
to understand oh okay

01:17:03,520 --> 01:17:06,800
this is what the api looks like and and

01:17:05,920 --> 01:17:10,320
that's what it means

01:17:06,800 --> 01:17:12,320
so that's what a test is in mocha

01:17:10,320 --> 01:17:14,400
uh what we want to do is we want to open

01:17:12,320 --> 01:17:14,719
our bargs.spec.js which again should

01:17:14,400 --> 01:17:17,280
have

01:17:14,719 --> 01:17:18,159
all these assertions already in it it

01:17:17,280 --> 01:17:22,640
should have three

01:17:18,159 --> 01:17:25,679
assertions and we want to um emocify

01:17:22,640 --> 01:17:26,480
this test file and so how we're gonna do

01:17:25,679 --> 01:17:31,360
that

01:17:26,480 --> 01:17:33,840
is um oh

01:17:31,360 --> 01:17:33,840
monitor

01:17:35,840 --> 01:17:42,080
i'm not sure if we just lost

01:17:38,960 --> 01:17:45,440
that monitor um it's

01:17:42,080 --> 01:17:48,880
got a flaky power cord uh i don't know

01:17:45,440 --> 01:17:50,640
maybe we're still it's still up um

01:17:48,880 --> 01:17:52,560
if it's still if it's not up please

01:17:50,640 --> 01:17:56,239
somebody tell me anyway so

01:17:52,560 --> 01:17:59,120
um let's see here uh

01:17:56,239 --> 01:18:01,199
okay great uh so right we want to wrap

01:17:59,120 --> 01:18:03,040
uh the call to assert module in a test

01:18:01,199 --> 01:18:06,159
and so it's going to look like this

01:18:03,040 --> 01:18:06,719
so that very first uh assertion we made

01:18:06,159 --> 01:18:10,880
about

01:18:06,719 --> 01:18:13,760
the type error where we pass it a um

01:18:10,880 --> 01:18:15,120
bear object we're gonna we're gonna do

01:18:13,760 --> 01:18:16,239
something like this and i want you to

01:18:15,120 --> 01:18:18,960
type this out so it

01:18:16,239 --> 01:18:19,679
should throw a type error and uh this is

01:18:18,960 --> 01:18:21,120
the title

01:18:19,679 --> 01:18:24,000
should throw a type error and the body

01:18:21,120 --> 01:18:26,880
is this function and so in that function

01:18:24,000 --> 01:18:28,560
we need to put an assertion okay so you

01:18:26,880 --> 01:18:30,480
don't need to remember you don't need to

01:18:28,560 --> 01:18:31,920
require mocha or anything you just you

01:18:30,480 --> 01:18:35,199
just write it it's there

01:18:31,920 --> 01:18:38,840
when you run this with mocha okay so

01:18:35,199 --> 01:18:40,239
um for each of these three calls to

01:18:38,840 --> 01:18:43,120
assert

01:18:40,239 --> 01:18:44,000
we're going to wrap it in in a in a

01:18:43,120 --> 01:18:46,960
mocha test

01:18:44,000 --> 01:18:49,040
and we're going to give each a title and

01:18:46,960 --> 01:18:50,080
again the title describes the behavior

01:18:49,040 --> 01:18:53,679
we're testing

01:18:50,080 --> 01:18:55,280
okay so the first two

01:18:53,679 --> 01:18:57,040
would say something like throw a type

01:18:55,280 --> 01:18:59,280
error and the last one should be like it

01:18:57,040 --> 01:19:02,880
returns some sort of object

01:18:59,280 --> 01:19:03,600
um but yeah we want to wrap those

01:19:02,880 --> 01:19:06,560
assertions

01:19:03,600 --> 01:19:07,120
in a call to it and we want to put that

01:19:06,560 --> 01:19:10,080
assertion

01:19:07,120 --> 01:19:10,560
in the second parameter which is the the

01:19:10,080 --> 01:19:13,840
test

01:19:10,560 --> 01:19:14,480
uh body and i'll wait just a second for

01:19:13,840 --> 01:19:23,840
you to

01:19:14,480 --> 01:19:23,840
to wrap this up

01:21:18,639 --> 01:21:23,600
oh okay so if you did this right

01:21:21,679 --> 01:21:26,840
um what you're going to see when you run

01:21:23,600 --> 01:21:30,480
npm test is something like this

01:21:26,840 --> 01:21:32,480
um maybe it'll have even nicer colors

01:21:30,480 --> 01:21:34,239
but what this is it's the output of

01:21:32,480 --> 01:21:37,920
mocha's default reporter

01:21:34,239 --> 01:21:41,120
um and so you should see three lines

01:21:37,920 --> 01:21:44,000
each corresponding to one of the tests

01:21:41,120 --> 01:21:45,679
uh remember the the it each

01:21:44,000 --> 01:21:48,159
corresponding to one of the tests that

01:21:45,679 --> 01:21:48,159
you've written

01:21:48,400 --> 01:21:51,920
if you didn't get this working maybe

01:21:50,639 --> 01:21:54,719
you'll see something like this

01:21:51,920 --> 01:21:55,199
and i apologize for the um two columns

01:21:54,719 --> 01:21:58,560
here

01:21:55,199 --> 01:22:00,560
but uh so maybe

01:21:58,560 --> 01:22:01,679
the third one didn't work for whatever

01:22:00,560 --> 01:22:05,600
reason

01:22:01,679 --> 01:22:07,760
um you're gonna see something like this

01:22:05,600 --> 01:22:10,239
so we'll see the should throw a type

01:22:07,760 --> 01:22:13,520
error those two have passed

01:22:10,239 --> 01:22:15,120
and uh we'll see this the the third test

01:22:13,520 --> 01:22:16,639
is failing and this is what the output

01:22:15,120 --> 01:22:19,840
for mocha looks like

01:22:16,639 --> 01:22:19,840
if your tests are failing

01:22:21,360 --> 01:22:25,220
so the way i got this failure was i

01:22:23,679 --> 01:22:28,319
changed the assertion to

01:22:25,220 --> 01:22:28,319
[Applause]

01:22:28,320 --> 01:22:34,639
false instead of food true so um

01:22:32,480 --> 01:22:36,159
yeah but anyway we don't we don't want

01:22:34,639 --> 01:22:37,520
to we don't want to do that we want our

01:22:36,159 --> 01:22:39,120
tests to pass so

01:22:37,520 --> 01:22:41,280
this is what this is what i came up with

01:22:39,120 --> 01:22:42,080
for this um and that's how i got the

01:22:41,280 --> 01:22:45,840
success

01:22:42,080 --> 01:22:48,159
this is how i got this here it's um

01:22:45,840 --> 01:22:49,520
so we have three tests it should throw a

01:22:48,159 --> 01:22:52,239
type error and then there's

01:22:49,520 --> 01:22:53,520
this function which is the body and in

01:22:52,239 --> 01:22:56,639
that body is just

01:22:53,520 --> 01:23:00,080
the assertion we wrote before

01:22:56,639 --> 01:23:03,040
okay and um the second one is

01:23:00,080 --> 01:23:05,199
similar again the the title of a test

01:23:03,040 --> 01:23:10,000
should describe the behavior

01:23:05,199 --> 01:23:11,920
of the code under test so the third one

01:23:10,000 --> 01:23:13,440
should return an object having property

01:23:11,920 --> 01:23:15,360
foo true yes

01:23:13,440 --> 01:23:17,120
it does but it also has this other

01:23:15,360 --> 01:23:18,719
property and we'll get to that later but

01:23:17,120 --> 01:23:21,760
it's good enough for now

01:23:18,719 --> 01:23:25,520
so now we have three tests and um

01:23:21,760 --> 01:23:27,440
we run npm test npm tests uh runs mocha

01:23:25,520 --> 01:23:28,719
which loads this test file and we're

01:23:27,440 --> 01:23:30,400
using mochas api

01:23:28,719 --> 01:23:32,960
to create tests so we've created three

01:23:30,400 --> 01:23:36,159
tests here yay

01:23:32,960 --> 01:23:36,719
now i want to introduce sweets so what a

01:23:36,159 --> 01:23:39,920
sweet

01:23:36,719 --> 01:23:40,719
uh in mocha um does it it describes a

01:23:39,920 --> 01:23:43,679
scenario

01:23:40,719 --> 01:23:44,639
a situation a use case some sort of

01:23:43,679 --> 01:23:47,679
context

01:23:44,639 --> 01:23:50,639
um there are lots of words you could

01:23:47,679 --> 01:23:51,600
describe it it's also just kind of a

01:23:50,639 --> 01:23:53,600
logical

01:23:51,600 --> 01:23:56,320
grouping or collection of tests you

01:23:53,600 --> 01:23:59,600
could think of it that way

01:23:56,320 --> 01:24:02,159
but each suite much like a

01:23:59,600 --> 01:24:03,120
test has a title string and this is

01:24:02,159 --> 01:24:05,280
required

01:24:03,120 --> 01:24:07,360
and it has a body function which is also

01:24:05,280 --> 01:24:10,560
required

01:24:07,360 --> 01:24:12,560
the body of a suite can contain one or

01:24:10,560 --> 01:24:14,639
more tests

01:24:12,560 --> 01:24:17,360
it can contain other things too but

01:24:14,639 --> 01:24:20,400
we're not going to get into that today

01:24:17,360 --> 01:24:21,920
the title describes the suite describes

01:24:20,400 --> 01:24:26,159
the scenario

01:24:21,920 --> 01:24:29,520
and that api is called describe

01:24:26,159 --> 01:24:34,800
so we want to create a suite

01:24:29,520 --> 01:24:37,199
and give it a title and a body

01:24:34,800 --> 01:24:38,320
and presently in mocha body is always

01:24:37,199 --> 01:24:41,440
synchronous so i

01:24:38,320 --> 01:24:42,400
i failed to mention before but it was in

01:24:41,440 --> 01:24:45,280
the slide

01:24:42,400 --> 01:24:46,960
that a test in mocha can be asynchronous

01:24:45,280 --> 01:24:49,040
it can return a promise

01:24:46,960 --> 01:24:50,800
if you want to use node style error

01:24:49,040 --> 01:24:51,760
first callbacks i'm sorry you can do

01:24:50,800 --> 01:24:55,520
that too

01:24:51,760 --> 01:24:58,639
um but a suite

01:24:55,520 --> 01:25:00,000
used with describe for now and is always

01:24:58,639 --> 01:25:00,560
synchronous that might change in the

01:25:00,000 --> 01:25:03,040
future

01:25:00,560 --> 01:25:03,600
but um you can't return a promise from

01:25:03,040 --> 01:25:07,520
from

01:25:03,600 --> 01:25:09,679
a uh a described body

01:25:07,520 --> 01:25:10,560
so what we want to do is organize our

01:25:09,679 --> 01:25:13,600
tests

01:25:10,560 --> 01:25:15,840
using these suites and we want to wrap

01:25:13,600 --> 01:25:17,520
um the tests and suites described in

01:25:15,840 --> 01:25:20,480
this scenario

01:25:17,520 --> 01:25:22,000
so for example the first one might look

01:25:20,480 --> 01:25:25,280
like this

01:25:22,000 --> 01:25:28,560
our our scenario is when dot

01:25:25,280 --> 01:25:30,719
expects value is an object

01:25:28,560 --> 01:25:31,600
it should throw a type error and the

01:25:30,719 --> 01:25:35,440
assertion

01:25:31,600 --> 01:25:35,440
is the same absorption we used before

01:25:38,080 --> 01:25:44,880
and again the body um contains

01:25:41,920 --> 01:25:46,080
a test uh just we can just use the tests

01:25:44,880 --> 01:25:50,400
we used before so

01:25:46,080 --> 01:25:52,960
go ahead and edit um bargs.spec.js

01:25:50,400 --> 01:25:54,320
and you should have three sweets when

01:25:52,960 --> 01:25:58,960
you're done

01:25:54,320 --> 01:26:00,800
and run npm test to check your work

01:25:58,960 --> 01:26:02,800
and i'll leave this up for a second so

01:26:00,800 --> 01:26:09,840
you can so you can kind of copy it to

01:26:02,800 --> 01:26:09,840
get started

01:27:15,679 --> 01:27:22,000
okay i expect you have that copied

01:27:18,800 --> 01:27:24,800
um if you did it

01:27:22,000 --> 01:27:26,320
right uh it should look like this when

01:27:24,800 --> 01:27:28,400
you're on npm test

01:27:26,320 --> 01:27:30,800
maybe not exactly like this but similar

01:27:28,400 --> 01:27:30,800
to this

01:27:31,199 --> 01:27:37,280
the when blah blah is the title of the

01:27:35,040 --> 01:27:39,600
suite and under that will be any

01:27:37,280 --> 01:27:42,400
uh tests in that suite and it should be

01:27:39,600 --> 01:27:42,400
indented a bit

01:27:43,760 --> 01:27:47,840
and i'll wait just a minute

01:28:10,080 --> 01:28:16,800
all right um so

01:28:14,080 --> 01:28:17,760
this is how we would make something like

01:28:16,800 --> 01:28:21,520
that happen

01:28:17,760 --> 01:28:24,719
so this is this is adding sweets to our

01:28:21,520 --> 01:28:25,440
our tests uh our tests so in here you're

01:28:24,719 --> 01:28:28,960
gonna have

01:28:25,440 --> 01:28:32,639
um it's pretty simple you have

01:28:28,960 --> 01:28:35,920
describe in that describe body is

01:28:32,639 --> 01:28:39,920
um is your test that you had before

01:28:35,920 --> 01:28:39,920
and you have three of these things right

01:28:40,159 --> 01:28:47,440
so you may have noticed that when we

01:28:43,760 --> 01:28:49,120
did the tests the first time or is that

01:28:47,440 --> 01:28:51,920
so should there were a typo and that

01:28:49,120 --> 01:28:54,400
doesn't have that's not very helpful

01:28:51,920 --> 01:28:55,280
um what should throw a type error what

01:28:54,400 --> 01:28:58,239
should return an

01:28:55,280 --> 01:28:59,679
object having property foo and this is

01:28:58,239 --> 01:29:02,320
what sweets help you with

01:28:59,679 --> 01:29:03,199
because now we know what exactly we're

01:29:02,320 --> 01:29:06,080
talking about

01:29:03,199 --> 01:29:08,320
when when we when we uh execute those

01:29:06,080 --> 01:29:09,920
tests

01:29:08,320 --> 01:29:12,080
all right so that's so that gives us

01:29:09,920 --> 01:29:13,920
some more context that describes the

01:29:12,080 --> 01:29:16,960
situation or the scenario and that's why

01:29:13,920 --> 01:29:16,960
we want to use sweets

01:29:20,480 --> 01:29:24,560
so the next core concept and there are

01:29:22,639 --> 01:29:26,239
only really three

01:29:24,560 --> 01:29:28,560
three of these things you need to worry

01:29:26,239 --> 01:29:30,639
about there are three core concepts here

01:29:28,560 --> 01:29:32,320
in mocha there's the test the sweet and

01:29:30,639 --> 01:29:35,440
finally the hook

01:29:32,320 --> 01:29:37,600
so hook may be a term that is

01:29:35,440 --> 01:29:39,600
used to mean a lot of different things

01:29:37,600 --> 01:29:42,880
but in mocha

01:29:39,600 --> 01:29:44,239
a hook is a code that runs before all

01:29:42,880 --> 01:29:47,520
the tests

01:29:44,239 --> 01:29:51,360
after all the tests before every test or

01:29:47,520 --> 01:29:52,080
after every test and a hook runs in the

01:29:51,360 --> 01:29:55,679
context

01:29:52,080 --> 01:30:00,080
of uh sweet so um

01:29:55,679 --> 01:30:03,199
just like you can think of a hook um

01:30:00,080 --> 01:30:04,880
it's essentially just like a test uh you

01:30:03,199 --> 01:30:06,320
don't actually need to make the

01:30:04,880 --> 01:30:10,480
assertion in

01:30:06,320 --> 01:30:13,120
it but the api is the same so

01:30:10,480 --> 01:30:15,840
the title is optional though you don't

01:30:13,120 --> 01:30:15,840
need to give

01:30:16,000 --> 01:30:21,600
give these hook functions a title

01:30:19,440 --> 01:30:23,199
but they can be asynchronous they can

01:30:21,600 --> 01:30:27,199
return promises

01:30:23,199 --> 01:30:31,360
um and so you can think of these

01:30:27,199 --> 01:30:34,719
like setup or tear down functions

01:30:31,360 --> 01:30:37,360
maybe some other test framework uh

01:30:34,719 --> 01:30:38,639
or or in another language maybe has a

01:30:37,360 --> 01:30:40,719
notion of uh

01:30:38,639 --> 01:30:42,000
let's this is how we set up our tests

01:30:40,719 --> 01:30:44,320
this is the test harness

01:30:42,000 --> 01:30:47,040
or what have you and then we have a

01:30:44,320 --> 01:30:50,480
teardown to clean up afterwards

01:30:47,040 --> 01:30:53,600
um and so in this

01:30:50,480 --> 01:30:55,840
api which again it's a global api

01:30:53,600 --> 01:30:57,040
you don't need to require or import

01:30:55,840 --> 01:30:59,280
anything

01:30:57,040 --> 01:31:01,679
we have four functions before before

01:30:59,280 --> 01:31:05,840
each after and after each

01:31:01,679 --> 01:31:05,840
so the idea is that

01:31:06,960 --> 01:31:11,600
before will run once

01:31:11,920 --> 01:31:18,800
basically before any of the tests

01:31:15,280 --> 01:31:19,840
and before each will run once for every

01:31:18,800 --> 01:31:22,000
test

01:31:19,840 --> 01:31:23,920
and so the order in which things happen

01:31:22,000 --> 01:31:25,840
is uh is this

01:31:23,920 --> 01:31:27,040
and maybe i should have added a diagram

01:31:25,840 --> 01:31:30,400
or something but

01:31:27,040 --> 01:31:33,040
um when you have sweets in mocha

01:31:30,400 --> 01:31:34,800
like so the very first thing that

01:31:33,040 --> 01:31:37,040
happens when mocha runs this file

01:31:34,800 --> 01:31:38,719
is it goes and it finds all the sweets

01:31:37,040 --> 01:31:42,080
and that's like a depth first

01:31:38,719 --> 01:31:44,719
search so it looks for a describe

01:31:42,080 --> 01:31:46,320
and in there it's it says oh okay i have

01:31:44,719 --> 01:31:49,440
it called it's i have uh

01:31:46,320 --> 01:31:50,960
called a hook um you can nest uh sweets

01:31:49,440 --> 01:31:52,320
so maybe there's more described so it

01:31:50,960 --> 01:31:54,239
looks through all the describes now it

01:31:52,320 --> 01:31:55,520
doesn't run any tests yet it doesn't run

01:31:54,239 --> 01:31:58,560
any hooks yet

01:31:55,520 --> 01:32:00,000
it's just like mapping it out and and

01:31:58,560 --> 01:32:04,800
getting an understanding of

01:32:00,000 --> 01:32:04,800
where everything goes and so um

01:32:05,360 --> 01:32:09,520
that happens first and then within a

01:32:07,920 --> 01:32:12,800
suite

01:32:09,520 --> 01:32:14,239
before will run so this is the before

01:32:12,800 --> 01:32:17,440
all hook

01:32:14,239 --> 01:32:20,639
um after that so uh

01:32:17,440 --> 01:32:21,760
before each will run if these things

01:32:20,639 --> 01:32:24,239
exist

01:32:21,760 --> 01:32:25,600
then finally a test will run then after

01:32:24,239 --> 01:32:27,840
each will run

01:32:25,600 --> 01:32:29,360
okay and then after all the tests are

01:32:27,840 --> 01:32:33,040
done in the suite

01:32:29,360 --> 01:32:35,840
the after hook runs okay

01:32:33,040 --> 01:32:38,800
most of the time you're probably going

01:32:35,840 --> 01:32:42,960
to be using before each

01:32:38,800 --> 01:32:46,239
at least in my experience um before

01:32:42,960 --> 01:32:47,840
is useful maybe for uh if you've got

01:32:46,239 --> 01:32:49,840
something really slow that you won't

01:32:47,840 --> 01:32:51,600
don't want to do before every test

01:32:49,840 --> 01:32:53,520
maybe i don't know start a server i

01:32:51,600 --> 01:32:56,560
don't know um

01:32:53,520 --> 01:32:58,560
but uh before isn't used uh quite as

01:32:56,560 --> 01:33:00,239
often but before each is used often so

01:32:58,560 --> 01:33:03,679
what we want to do

01:33:00,239 --> 01:33:06,239
is um we want to use

01:33:03,679 --> 01:33:06,239
um

01:33:07,040 --> 01:33:10,800
um hooks to to make our tests a little

01:33:10,239 --> 01:33:14,239
more

01:33:10,800 --> 01:33:17,360
efficient so um

01:33:14,239 --> 01:33:19,920
that third one so the third

01:33:17,360 --> 01:33:21,040
suite went past a single argument foo as

01:33:19,920 --> 01:33:24,719
i mentioned before

01:33:21,040 --> 01:33:27,360
it's not um yes we're checking

01:33:24,719 --> 01:33:28,480
the value equals a thing but we only

01:33:27,360 --> 01:33:30,239
check a single

01:33:28,480 --> 01:33:32,560
we uh when we described it we only had a

01:33:30,239 --> 01:33:37,120
single property so what i want to do

01:33:32,560 --> 01:33:40,400
is split that up i want to split this

01:33:37,120 --> 01:33:42,960
the test and the suite into two tests so

01:33:40,400 --> 01:33:44,239
our third uh third suite when passed a

01:33:42,960 --> 01:33:46,239
single argument through it should have

01:33:44,239 --> 01:33:50,480
two functions in it or two

01:33:46,239 --> 01:33:51,040
tests and um we're going to test two

01:33:50,480 --> 01:33:54,400
separate

01:33:51,040 --> 01:33:54,719
properties of of the return value here

01:33:54,400 --> 01:33:57,199
so

01:33:54,719 --> 01:33:58,080
in both tests we're calling parse and

01:33:57,199 --> 01:34:00,719
we're giving it

01:33:58,080 --> 01:34:01,440
uh dash dash foo and an array in the

01:34:00,719 --> 01:34:03,679
first test

01:34:01,440 --> 01:34:06,000
we're making sure that the return value

01:34:03,679 --> 01:34:06,880
has a property foo and that foo is equal

01:34:06,000 --> 01:34:08,639
to true

01:34:06,880 --> 01:34:10,400
and then the second test we're making

01:34:08,639 --> 01:34:12,880
sure that it has a property of

01:34:10,400 --> 01:34:16,239
underscore and that's an empty array

01:34:12,880 --> 01:34:18,560
so you want to essentially copy this

01:34:16,239 --> 01:34:21,679
down

01:34:18,560 --> 01:34:23,040
and then we'll we'll use this and i'll

01:34:21,679 --> 01:34:26,159
show you how to use hooks so i'm going

01:34:23,040 --> 01:34:33,840
to wait a couple minutes for you to

01:34:26,159 --> 01:34:33,840
copy this down

01:35:25,840 --> 01:35:30,239
okay we're a little crunch for time here

01:35:28,239 --> 01:35:32,239
so we want to use a hook in this

01:35:30,239 --> 01:35:33,440
exercise so i assume we've copied that

01:35:32,239 --> 01:35:37,040
down so

01:35:33,440 --> 01:35:39,520
um we want to add a before each hook

01:35:37,040 --> 01:35:40,639
to the when past the single argument foo

01:35:39,520 --> 01:35:43,520
suite

01:35:40,639 --> 01:35:45,199
and it prepares it prepares the scenario

01:35:43,520 --> 01:35:48,560
it sets it up

01:35:45,199 --> 01:35:50,320
for the two tests in that suite and

01:35:48,560 --> 01:35:52,639
uh below you will see a link to the

01:35:50,320 --> 01:35:54,320
mocha docs on hooks and it talks about

01:35:52,639 --> 01:35:58,400
how to how to use them

01:35:54,320 --> 01:36:02,080
but you wanna before each hook and

01:35:58,400 --> 01:36:05,679
your test body so um

01:36:02,080 --> 01:36:10,800
that would be uh

01:36:05,679 --> 01:36:13,840
the stuff in

01:36:10,800 --> 01:36:16,719
so the stuff in um

01:36:13,840 --> 01:36:17,920
it so uh right here where we have a cert

01:36:16,719 --> 01:36:20,800
strict equal

01:36:17,920 --> 01:36:22,400
um the only function call in that test

01:36:20,800 --> 01:36:24,239
body should be the call to the

01:36:22,400 --> 01:36:26,960
to a cert we shouldn't need to call

01:36:24,239 --> 01:36:30,000
parse in the test body

01:36:26,960 --> 01:36:32,960
and uh the way i prefer to do this is to

01:36:30,000 --> 01:36:35,040
declare a variable in the sweet body

01:36:32,960 --> 01:36:36,800
and then in the hook define that

01:36:35,040 --> 01:36:37,119
variable and there are other ways to do

01:36:36,800 --> 01:36:39,840
this

01:36:37,119 --> 01:36:40,400
you may prefer one in the other but i

01:36:39,840 --> 01:36:42,560
prefer

01:36:40,400 --> 01:36:44,320
to use function scope and do it this way

01:36:42,560 --> 01:36:47,760
so

01:36:44,320 --> 01:36:51,040
i'll leave this here and yeah

01:36:47,760 --> 01:36:51,040
please create a

01:36:51,199 --> 01:36:57,280
a before each hook that we'll call parse

01:36:54,880 --> 01:36:58,239
and in those two functions we're going

01:36:57,280 --> 01:37:06,239
to check that

01:36:58,239 --> 01:37:08,400
that return value

01:37:06,239 --> 01:37:10,080
and i'll forward that in a second and

01:37:08,400 --> 01:37:21,840
you can see what the expected output

01:37:10,080 --> 01:37:21,840
will be

01:37:46,840 --> 01:37:49,840
do

01:37:50,000 --> 01:37:55,520
okay so if you did this

01:37:53,119 --> 01:37:56,719
you should see the same output you did

01:37:55,520 --> 01:37:59,639
before

01:37:56,719 --> 01:38:02,320
so we're essentially refactoring into

01:37:59,639 --> 01:38:05,280
hooks um

01:38:02,320 --> 01:38:08,639
but the test uh and suite output should

01:38:05,280 --> 01:38:08,639
be the same as we had before

01:38:13,119 --> 01:38:18,880
maybe not as we had before

01:38:16,400 --> 01:38:20,239
because we split that function into two

01:38:18,880 --> 01:38:22,560
um

01:38:20,239 --> 01:38:31,840
so yeah that third suite's gonna have

01:38:22,560 --> 01:38:31,840
gonna have two tests in it

01:39:22,080 --> 01:39:26,080
okay so we need to kind of wrap this up

01:39:25,280 --> 01:39:28,560
so

01:39:26,080 --> 01:39:30,080
this is what i would come up with to to

01:39:28,560 --> 01:39:33,280
to refactor

01:39:30,080 --> 01:39:36,880
um the sweet to use hooks so

01:39:33,280 --> 01:39:40,080
um in the in the in the sweet body

01:39:36,880 --> 01:39:42,880
i want to declare a variable i call it

01:39:40,080 --> 01:39:46,159
result you can call it whatever you want

01:39:42,880 --> 01:39:50,000
but i don't define it and so

01:39:46,159 --> 01:39:51,760
in before each i will define

01:39:50,000 --> 01:39:54,370
the variable and the variable is the

01:39:51,760 --> 01:39:56,480
return value of passing

01:39:54,370 --> 01:39:59,840
[Music]

01:39:56,480 --> 01:40:03,440
foo to parse

01:39:59,840 --> 01:40:06,960
and so we can use function scope here

01:40:03,440 --> 01:40:10,960
and because before each runs before

01:40:06,960 --> 01:40:14,320
those two tests uh result will be

01:40:10,960 --> 01:40:17,600
defined by the time we enter them and so

01:40:14,320 --> 01:40:20,400
uh below we can just check the result

01:40:17,600 --> 01:40:22,880
we can look at result.foo is this true

01:40:20,400 --> 01:40:25,040
and then finally we can look at

01:40:22,880 --> 01:40:27,119
the positional arguments again which is

01:40:25,040 --> 01:40:30,159
underscore and we can assert

01:40:27,119 --> 01:40:31,840
that it is an empty array now remember

01:40:30,159 --> 01:40:33,280
remember what i said about deep strict

01:40:31,840 --> 01:40:36,239
equal and strict equal

01:40:33,280 --> 01:40:37,119
so strict equal works on uh primitives

01:40:36,239 --> 01:40:39,360
and deep

01:40:37,119 --> 01:40:41,600
strict equal works on objects and an

01:40:39,360 --> 01:40:42,159
array an array is an array but an array

01:40:41,600 --> 01:40:44,239
is also an

01:40:42,159 --> 01:40:45,679
object and so you have to use deep

01:40:44,239 --> 01:40:48,080
strict equal if you want to compare

01:40:45,679 --> 01:40:48,080
arrays

01:40:49,280 --> 01:40:52,560
another way to do that maybe is we can

01:40:51,280 --> 01:40:55,440
look at the length

01:40:52,560 --> 01:40:57,360
of the underscore array and we could use

01:40:55,440 --> 01:41:00,119
strict equal there we could say assert

01:40:57,360 --> 01:41:01,280
strict equal give it

01:41:00,119 --> 01:41:06,239
result.underscore.length

01:41:01,280 --> 01:41:06,239
and then the expected value will be zero

01:41:13,119 --> 01:41:21,520
so that is how to use

01:41:18,239 --> 01:41:22,159
a hook in mocha and um you know before

01:41:21,520 --> 01:41:24,320
each

01:41:22,159 --> 01:41:26,159
again we'll run before every test after

01:41:24,320 --> 01:41:28,800
each one after every test

01:41:26,159 --> 01:41:32,159
there's before and and after and you can

01:41:28,800 --> 01:41:35,199
again check out the docs at mocha jsorg

01:41:32,159 --> 01:41:38,000
to get more information about

01:41:35,199 --> 01:41:38,480
about how to use them and so in this

01:41:38,000 --> 01:41:41,760
section

01:41:38,480 --> 01:41:42,400
i have covered how to install mocha how

01:41:41,760 --> 01:41:45,440
to

01:41:42,400 --> 01:41:48,639
run tests with mocha how to configure

01:41:45,440 --> 01:41:51,600
your package json uh to

01:41:48,639 --> 01:41:52,639
run mocha when we call npm test and

01:41:51,600 --> 01:41:55,840
finally how to

01:41:52,639 --> 01:41:59,040
create tests suites and hooks in mocha

01:41:55,840 --> 01:42:03,280
and the definitions thereof

01:41:59,040 --> 01:42:06,080
and i think that about does it so

01:42:03,280 --> 01:42:07,920
again my name is chris hiller i'm a

01:42:06,080 --> 01:42:09,760
developer advocate at ibm

01:42:07,920 --> 01:42:12,320
a node.js core collaborator a mocha

01:42:09,760 --> 01:42:15,520
maintainer openjs foundation

01:42:12,320 --> 01:42:17,280
cpc find me on github bone skull twitter

01:42:15,520 --> 01:42:19,520
bone skull of the xero

01:42:17,280 --> 01:42:20,480
um i also have another talk i think it

01:42:19,520 --> 01:42:23,119
might actually be

01:42:20,480 --> 01:42:24,880
right after this one about tooling and

01:42:23,119 --> 01:42:26,320
node.js it's called possible tools you

01:42:24,880 --> 01:42:29,520
might want to check that out

01:42:26,320 --> 01:42:29,760
also i'm a panelist on uh js party which

01:42:29,520 --> 01:42:33,040
is

01:42:29,760 --> 01:42:34,880
a fun javascript centric podcast

01:42:33,040 --> 01:42:36,080
and they are having some sort of live

01:42:34,880 --> 01:42:38,480
podcast

01:42:36,080 --> 01:42:39,760
uh here at opengs world check out the

01:42:38,480 --> 01:42:41,520
schedule for that

01:42:39,760 --> 01:42:43,600
i couldn't tell you when it is because i

01:42:41,520 --> 01:42:47,040
don't know where you live so

01:42:43,600 --> 01:42:49,840
yeah time zones are hard um but uh

01:42:47,040 --> 01:42:50,639
thank you for for attending attending

01:42:49,840 --> 01:42:53,280
this workshop

01:42:50,639 --> 01:42:56,159
and i will be around for a few minutes

01:42:53,280 --> 01:42:56,159

YouTube URL: https://www.youtube.com/watch?v=JhQ-PuwoWAE


