Title: Applying Advanced TypeScript Definition Patterns  - Ethan Arrowood, Microsoft
Publication date: 2020-06-18
Playlist: OpenJS World 2020
Description: 
	
Captions: 
	00:00:01,220 --> 00:00:06,810
hello open jeaious world my name is

00:00:05,100 --> 00:00:09,059
Ethan Arrowwood and welcome to my talk

00:00:06,810 --> 00:00:11,280
on applying advanced typescript

00:00:09,059 --> 00:00:12,840
definition patterns I'm a software

00:00:11,280 --> 00:00:14,730
engineer at Microsoft and my pronouns

00:00:12,840 --> 00:00:17,130
are he/him if you'd like to follow me on

00:00:14,730 --> 00:00:21,060
Twitter github you can find me under

00:00:17,130 --> 00:00:23,640
those handles so today's talk is going

00:00:21,060 --> 00:00:27,150
to be about pacify and its new type

00:00:23,640 --> 00:00:29,160
definitions pacify is a nodejs web

00:00:27,150 --> 00:00:31,460
server framework we are part of the open

00:00:29,160 --> 00:00:34,469
J's foundation and we are open sourced

00:00:31,460 --> 00:00:36,540
today we're going to be covering five

00:00:34,469 --> 00:00:39,120
patterns but we're going to be doing so

00:00:36,540 --> 00:00:40,890
in three parts so the first part is

00:00:39,120 --> 00:00:43,500
going to be covering discriminant unions

00:00:40,890 --> 00:00:45,510
and function overloading the second part

00:00:43,500 --> 00:00:47,550
is gonna cover name generic parameters

00:00:45,510 --> 00:00:49,379
and the third part is going to cover

00:00:47,550 --> 00:00:53,039
declaration merging and generic

00:00:49,379 --> 00:00:55,500
inference we're gonna be doing this

00:00:53,039 --> 00:00:57,600
through a sort of a code walkthrough

00:00:55,500 --> 00:01:01,460
we're gonna be building these type

00:00:57,600 --> 00:01:04,019
patterns from scratch over a simplified

00:01:01,460 --> 00:01:05,850
implementation of FASTA file you can

00:01:04,019 --> 00:01:08,490
check out the source code on github I'll

00:01:05,850 --> 00:01:10,979
have a master branch which will have all

00:01:08,490 --> 00:01:12,840
the completed code as well as an initial

00:01:10,979 --> 00:01:14,490
branch that'll have the you know where

00:01:12,840 --> 00:01:20,970
you know the starting point if you'd

00:01:14,490 --> 00:01:22,860
like to follow along as well alright and

00:01:20,970 --> 00:01:24,930
welcome to the coding portion with my

00:01:22,860 --> 00:01:27,570
presentation as I mentioned before

00:01:24,930 --> 00:01:28,890
there's going to be three parts the

00:01:27,570 --> 00:01:30,420
first one is going to be handling

00:01:28,890 --> 00:01:32,189
discriminating unions and function

00:01:30,420 --> 00:01:34,770
overloading the goal will be to

00:01:32,189 --> 00:01:38,310
implement the types that will help

00:01:34,770 --> 00:01:39,930
define the right options objects to

00:01:38,310 --> 00:01:42,479
determine which node server should be

00:01:39,930 --> 00:01:45,840
returned when calling in the fastest by

00:01:42,479 --> 00:01:48,149
function part two is gonna handle a

00:01:45,840 --> 00:01:49,649
named generic parameter and this is

00:01:48,149 --> 00:01:52,590
going to be all about how we decorate

00:01:49,649 --> 00:01:55,140
the request object with you know four

00:01:52,590 --> 00:01:57,390
different properties and only have to

00:01:55,140 --> 00:01:59,689
specify the ones that the user expects

00:01:57,390 --> 00:02:02,219
to be passed to the request object and

00:01:59,689 --> 00:02:04,469
finally for part three we're going to be

00:02:02,219 --> 00:02:07,320
covering declaration merging in this

00:02:04,469 --> 00:02:11,580
case we have two methods of modifying

00:02:07,320 --> 00:02:13,470
the local the local instance where this

00:02:11,580 --> 00:02:15,690
server this pacify server

00:02:13,470 --> 00:02:18,390
you can decorate with you know unique

00:02:15,690 --> 00:02:20,400
values you can also provide plugins that

00:02:18,390 --> 00:02:22,800
have access to that instance and can

00:02:20,400 --> 00:02:26,580
also do things like decorate the

00:02:22,800 --> 00:02:27,990
instance with custom properties so we're

00:02:26,580 --> 00:02:31,100
going to use declaration merging to

00:02:27,990 --> 00:02:33,270
implement a plug-in system of sorts

00:02:31,100 --> 00:02:34,920
we'll do it we'll take a quick peek at

00:02:33,270 --> 00:02:36,750
the types so this is going to be our

00:02:34,920 --> 00:02:39,150
goal today is going to be converting all

00:02:36,750 --> 00:02:40,260
the types to see what you see here but

00:02:39,150 --> 00:02:42,990
we're going to do it we're gonna take it

00:02:40,260 --> 00:02:45,030
line by line and explain as we go and

00:02:42,990 --> 00:02:49,080
we're gonna start here with the initial

00:02:45,030 --> 00:02:51,900
fast if I type file so you can see that

00:02:49,080 --> 00:02:53,970
the func the function down here takes in

00:02:51,900 --> 00:02:56,280
an options object that has you know

00:02:53,970 --> 00:02:58,980
three optional properties and it returns

00:02:56,280 --> 00:03:00,840
a fast if I instance this fast I

00:02:58,980 --> 00:03:03,000
instance has a single property server

00:03:00,840 --> 00:03:05,640
that returns you know one of the four

00:03:03,000 --> 00:03:07,740
nodejs server types we can take a quick

00:03:05,640 --> 00:03:09,240
peek at our implementation and you can

00:03:07,740 --> 00:03:11,730
see that the goal here you know using

00:03:09,240 --> 00:03:14,520
that final type doc we can see that we

00:03:11,730 --> 00:03:16,800
want the server to be unique based on

00:03:14,520 --> 00:03:20,310
how its instantiate it see how this is

00:03:16,800 --> 00:03:23,070
an HTT HTTP 2 server and this one is

00:03:20,310 --> 00:03:25,500
secure and this one is regular HTTP that

00:03:23,070 --> 00:03:27,630
is because when you you know call that

00:03:25,500 --> 00:03:30,120
fast Fi function we're passing in

00:03:27,630 --> 00:03:33,090
different sets of options and we want

00:03:30,120 --> 00:03:35,040
the the type system to be smart enough

00:03:33,090 --> 00:03:39,450
to determine which version of FASTA Phi

00:03:35,040 --> 00:03:42,570
to return here so going back over to the

00:03:39,450 --> 00:03:45,750
types we see that we don't currently get

00:03:42,570 --> 00:03:48,239
that let's quickly switch our on part

00:03:45,750 --> 00:03:50,970
one over to the different types and see

00:03:48,239 --> 00:03:54,720
what happens instead so we'll call this

00:03:50,970 --> 00:03:56,519
init and we'll see that now the FAFSA

00:03:54,720 --> 00:03:58,830
Phi instance is always the same it's

00:03:56,519 --> 00:04:01,440
always fast if I options and that server

00:03:58,830 --> 00:04:06,959
is always going to be server Union not

00:04:01,440 --> 00:04:08,880
ideal so let's fix this start by

00:04:06,959 --> 00:04:10,980
renaming that back go over to this file

00:04:08,880 --> 00:04:13,549
and we'll rename it as well just to fast

00:04:10,980 --> 00:04:13,549
if I types

00:04:15,930 --> 00:04:20,489
now we're going to start by implementing

00:04:18,479 --> 00:04:22,380
the discriminant Union over the FAFSA

00:04:20,489 --> 00:04:29,370
fly options we're going to need four

00:04:22,380 --> 00:04:35,970
types facet I HTTP options the FAFSA Phi

00:04:29,370 --> 00:04:42,270
H TPS options and then we're going to

00:04:35,970 --> 00:04:44,850
need the two and the two secure now for

00:04:42,270 --> 00:04:47,460
the HTTP options we're going to go ahead

00:04:44,850 --> 00:04:49,979
and we're going to copy over that secret

00:04:47,460 --> 00:04:52,740
property we're keep it as optional

00:04:49,979 --> 00:04:55,680
because any one of these four can have

00:04:52,740 --> 00:04:59,039
this property and then we're going to do

00:04:55,680 --> 00:05:01,830
that is by using a intersection we're

00:04:59,039 --> 00:05:08,880
going to intersect the other three types

00:05:01,830 --> 00:05:11,669
with that base type so this is a sort of

00:05:08,880 --> 00:05:13,560
inheritance model where all three of

00:05:11,669 --> 00:05:15,300
these other types are all going to

00:05:13,560 --> 00:05:17,789
include everything in this type and then

00:05:15,300 --> 00:05:19,440
whatever is specified on their own so

00:05:17,789 --> 00:05:21,539
let's start with HTTPS we're actually

00:05:19,440 --> 00:05:23,729
going to take this property here and

00:05:21,539 --> 00:05:26,820
we're going to use those base server

00:05:23,729 --> 00:05:30,330
options and we're gonna make it required

00:05:26,820 --> 00:05:33,180
now this means that this type will only

00:05:30,330 --> 00:05:36,479
ever be possible if the user defines

00:05:33,180 --> 00:05:38,220
this property and only this property

00:05:36,479 --> 00:05:40,320
that's the power of discriminative

00:05:38,220 --> 00:05:42,870
unions so let's take a look at how you

00:05:40,320 --> 00:05:45,090
know this feeds into the HTTP to instead

00:05:42,870 --> 00:05:48,960
of it being boolean we're actually gonna

00:05:45,090 --> 00:05:52,680
go ahead and use a type literal of true

00:05:48,960 --> 00:05:56,940
so now the user will get this options

00:05:52,680 --> 00:06:00,320
object if they've specified only HDB to

00:05:56,940 --> 00:06:03,150
option and only specified it as true and

00:06:00,320 --> 00:06:04,770
then for the secure version of the HDP

00:06:03,150 --> 00:06:06,720
to server we're going to use that true

00:06:04,770 --> 00:06:09,690
again and we're also going to use the

00:06:06,720 --> 00:06:11,639
HTTP options so it's sort of like an and

00:06:09,690 --> 00:06:13,590
operation where if it's both of these

00:06:11,639 --> 00:06:15,330
properties are defined we know we have a

00:06:13,590 --> 00:06:17,490
secure server and we're gonna go ahead

00:06:15,330 --> 00:06:19,320
and change this type to that HTTP two

00:06:17,490 --> 00:06:21,930
and we're going to make it the secure

00:06:19,320 --> 00:06:24,389
server options so let's go ahead and

00:06:21,930 --> 00:06:26,520
remove this interface and we're gonna

00:06:24,389 --> 00:06:28,050
have to update that down here so now in

00:06:26,520 --> 00:06:29,010
this function we're gonna copy it four

00:06:28,050 --> 00:06:31,320
times

00:06:29,010 --> 00:06:36,660
the one at the bottom here is going to

00:06:31,320 --> 00:06:39,540
use the HTTP options then for the three

00:06:36,660 --> 00:06:41,070
previous to it we're going to specify it

00:06:39,540 --> 00:06:42,840
for the three other ones we've defined

00:06:41,070 --> 00:06:45,870
here and we're going to make them non

00:06:42,840 --> 00:06:55,280
optional so we're going to start with

00:06:45,870 --> 00:06:59,760
HTTP then HTTP - and then HTTP - secure

00:06:55,280 --> 00:07:02,040
and now this FAFSA file check this

00:06:59,760 --> 00:07:03,750
function is currently already

00:07:02,040 --> 00:07:06,240
implementing a discriminant Union you

00:07:03,750 --> 00:07:07,920
can see that has those overloads on the

00:07:06,240 --> 00:07:10,230
right side of this code sense

00:07:07,920 --> 00:07:12,630
we're in there's multiple options when

00:07:10,230 --> 00:07:15,140
this can be type scripts is intelligent

00:07:12,630 --> 00:07:17,340
enough to say hey we have these four

00:07:15,140 --> 00:07:19,470
possibilities for what this options

00:07:17,340 --> 00:07:21,240
object can be so let's look at the

00:07:19,470 --> 00:07:23,580
difference between them all and if they

00:07:21,240 --> 00:07:24,720
have enough they differ if they have

00:07:23,580 --> 00:07:26,580
something that is you know

00:07:24,720 --> 00:07:28,650
discriminately different in this case

00:07:26,580 --> 00:07:31,290
you know the existence of certain

00:07:28,650 --> 00:07:33,570
properties over others then typescript

00:07:31,290 --> 00:07:35,730
is smart enough to you know return

00:07:33,570 --> 00:07:38,160
exactly what we want so now let's use

00:07:35,730 --> 00:07:40,890
that to our advantage to make sure that

00:07:38,160 --> 00:07:43,230
we specify the specific types you know

00:07:40,890 --> 00:07:45,180
that specific node server based on the

00:07:43,230 --> 00:07:49,260
different kind of options so we're gonna

00:07:45,180 --> 00:07:51,390
add a generic here called server it's

00:07:49,260 --> 00:07:53,640
going to extends from that server Union

00:07:51,390 --> 00:07:55,590
that we've already written and then

00:07:53,640 --> 00:07:57,570
instead of that server being defined as

00:07:55,590 --> 00:07:59,480
you know any one of these four it's

00:07:57,570 --> 00:08:01,530
going to be whichever this generic is

00:07:59,480 --> 00:08:04,500
while we're doing this we're also going

00:08:01,530 --> 00:08:06,600
to default it to the HTTP server type

00:08:04,500 --> 00:08:08,420
this will allow this you know this non

00:08:06,600 --> 00:08:11,370
optional one to work best

00:08:08,420 --> 00:08:14,520
so now down here we're going to pass

00:08:11,370 --> 00:08:17,370
that server but instead of specifying

00:08:14,520 --> 00:08:19,740
the Union we're gonna pass in the

00:08:17,370 --> 00:08:22,440
certain ojs server type that we want to

00:08:19,740 --> 00:08:24,960
correspond to the give an option set and

00:08:22,440 --> 00:08:27,140
type script will respect this generic

00:08:24,960 --> 00:08:30,960
parameter as a part of the overload and

00:08:27,140 --> 00:08:32,430
we'll return the FAFSA fee instance with

00:08:30,960 --> 00:08:39,290
the node server that we want

00:08:32,430 --> 00:08:39,290
specifically finally HTTP server

00:08:39,700 --> 00:08:45,320
great so now if we jump back over to

00:08:42,620 --> 00:08:47,810
part one you'll see that we're still

00:08:45,320 --> 00:08:49,580
using our new types and if we hover over

00:08:47,810 --> 00:08:52,250
these you'll see that not only are the

00:08:49,580 --> 00:08:54,680
options now you know specified based on

00:08:52,250 --> 00:08:57,260
what has been passed in but the server

00:08:54,680 --> 00:09:00,050
types are as well and now we've achieved

00:08:57,260 --> 00:09:03,200
part one discriminate unions and

00:09:00,050 --> 00:09:05,450
function overloading now on to part two

00:09:03,200 --> 00:09:08,990
so in part two we're going to talk about

00:09:05,450 --> 00:09:11,240
named generic parameters so see here we

00:09:08,990 --> 00:09:12,800
have our server and in the previous

00:09:11,240 --> 00:09:15,140
section we were able to make you know

00:09:12,800 --> 00:09:17,330
the server based to be a specific kind

00:09:15,140 --> 00:09:20,570
of FAFSA fie instance based on the

00:09:17,330 --> 00:09:23,090
options passed to it but now we want to

00:09:20,570 --> 00:09:26,780
make something unique out of this using

00:09:23,090 --> 00:09:29,810
this get property where it's gonna be a

00:09:26,780 --> 00:09:32,150
route handler common to many HTTP server

00:09:29,810 --> 00:09:34,160
to server frameworks where you pass in a

00:09:32,150 --> 00:09:36,590
path and then you pass in some set of

00:09:34,160 --> 00:09:38,570
handlers in our case we're gonna have

00:09:36,590 --> 00:09:41,390
two handlers we're gonna have an options

00:09:38,570 --> 00:09:43,400
object that allows you to specify a pre

00:09:41,390 --> 00:09:45,830
handler and then we're gonna have that

00:09:43,400 --> 00:09:48,410
third argument on our you know overall

00:09:45,830 --> 00:09:51,200
get function that lets you specify the

00:09:48,410 --> 00:09:52,880
route handler itself and the idea here

00:09:51,200 --> 00:09:57,350
is that if this pre handler doesn't

00:09:52,880 --> 00:09:59,180
return true then this one won't run but

00:09:57,350 --> 00:10:01,910
what's unique here is we want to

00:09:59,180 --> 00:10:05,390
consider that this request object we

00:10:01,910 --> 00:10:08,630
want it to inherit the the same headers

00:10:05,390 --> 00:10:12,650
in query that we specify in this object

00:10:08,630 --> 00:10:15,830
in this generic here but furthermore

00:10:12,650 --> 00:10:18,860
this generic needs to be sort of dynamic

00:10:15,830 --> 00:10:21,650
where if a route that is someone is

00:10:18,860 --> 00:10:23,870
creating only has headers we want them

00:10:21,650 --> 00:10:25,820
to be able to only specify the headers

00:10:23,870 --> 00:10:28,460
type and not have to deal with the other

00:10:25,820 --> 00:10:30,800
types in fact this one is going to be so

00:10:28,460 --> 00:10:33,590
powerful that it's going to contain the

00:10:30,800 --> 00:10:35,540
types for things like body as well which

00:10:33,590 --> 00:10:38,050
you know doesn't exist on a get request

00:10:35,540 --> 00:10:41,690
but if you were to go ahead and create a

00:10:38,050 --> 00:10:45,200
server dot post request you would want

00:10:41,690 --> 00:10:47,990
to have the body type on there as well

00:10:45,200 --> 00:10:50,840
so we'll go ahead and pretend that we're

00:10:47,990 --> 00:10:52,990
doing that as well so you can see here

00:10:50,840 --> 00:10:57,220
we will call our function

00:10:52,990 --> 00:11:02,720
put that object in pre handler

00:10:57,220 --> 00:11:04,970
request/response put the request stop

00:11:02,720 --> 00:11:06,500
body here and we're gonna go ahead and

00:11:04,970 --> 00:11:10,400
make sure we pass in that final function

00:11:06,500 --> 00:11:12,560
request response and we'll check out

00:11:10,400 --> 00:11:16,040
that request that body you can see here

00:11:12,560 --> 00:11:19,400
that body now contains that string so

00:11:16,040 --> 00:11:22,670
great how do we do this let's jump back

00:11:19,400 --> 00:11:24,500
into our definition definitions before

00:11:22,670 --> 00:11:27,040
we do that let's change this comment

00:11:24,500 --> 00:11:29,840
over so you can see things are failing

00:11:27,040 --> 00:11:32,270
but now over here let's take a look at

00:11:29,840 --> 00:11:34,370
the FAFSA Phi instance the FAFSA fire

00:11:32,270 --> 00:11:36,770
incidents is what contains that get and

00:11:34,370 --> 00:11:39,170
post function let's go ahead and write

00:11:36,770 --> 00:11:43,790
that get we're going to call this

00:11:39,170 --> 00:11:49,660
specify route handler then we'll do post

00:11:43,790 --> 00:11:49,660
say fast if I my mistake fast if I route

00:11:49,750 --> 00:11:54,980
so let's go above let's go above these

00:11:52,640 --> 00:11:59,960
types we're gonna go go ahead and write

00:11:54,980 --> 00:12:02,930
type classify route this is going to be

00:11:59,960 --> 00:12:06,490
a function that's going to take three

00:12:02,930 --> 00:12:08,630
properties the route which is the string

00:12:06,490 --> 00:12:12,050
the options which we're going to call

00:12:08,630 --> 00:12:14,180
FAFSA five out options and then the

00:12:12,050 --> 00:12:18,050
handler we're gonna call classify route

00:12:14,180 --> 00:12:20,480
handler and we know this is going to

00:12:18,050 --> 00:12:23,180
return the void so keep in mind so now

00:12:20,480 --> 00:12:25,520
let's let's take one step back we

00:12:23,180 --> 00:12:28,220
realize now that we're specifying things

00:12:25,520 --> 00:12:31,700
like the get in the post at this level

00:12:28,220 --> 00:12:33,770
and we talked about that generic before

00:12:31,700 --> 00:12:35,690
so how are we going to pass that generic

00:12:33,770 --> 00:12:37,610
through to these functions well instead

00:12:35,690 --> 00:12:39,170
of putting it on the type itself we're

00:12:37,610 --> 00:12:41,840
actually gonna put it on the function

00:12:39,170 --> 00:12:45,380
that that it corresponds to we're gonna

00:12:41,840 --> 00:12:48,370
call that R this is going to extend from

00:12:45,380 --> 00:12:53,210
something called the request generics

00:12:48,370 --> 00:12:58,460
generic it's also going to default to

00:12:53,210 --> 00:13:00,570
the request generic

00:12:58,460 --> 00:13:04,910
with that we're going to go ahead and

00:13:00,570 --> 00:13:06,900
define this type request generic equals

00:13:04,910 --> 00:13:09,180
and we're going to go ahead and specify

00:13:06,900 --> 00:13:11,600
the four properties that we have headers

00:13:09,180 --> 00:13:23,160
it's gonna be all for inner be unknown

00:13:11,600 --> 00:13:25,500
query parameter

00:13:23,160 --> 00:13:29,820
generic we're gonna pass it through both

00:13:25,500 --> 00:13:31,440
of these pieces so next we're gonna

00:13:29,820 --> 00:13:33,110
start with the FAFSA fire out options

00:13:31,440 --> 00:13:36,810
cuz it's an easy one

00:13:33,110 --> 00:13:39,120
obviously pacify route options we're

00:13:36,810 --> 00:13:42,780
gonna have that generic R and we're

00:13:39,120 --> 00:13:44,460
gonna copy over the same constraint as

00:13:42,780 --> 00:13:46,860
the previous one and you'll see here

00:13:44,460 --> 00:13:49,590
that the type now exists on the type

00:13:46,860 --> 00:13:51,720
itself and not on the inner piece and

00:13:49,590 --> 00:13:53,700
that's because the user won't

00:13:51,720 --> 00:13:56,030
necessarily have to pass us in

00:13:53,700 --> 00:13:58,800
themselves every time they use it

00:13:56,030 --> 00:14:00,930
here we're gonna have a pre handler

00:13:58,800 --> 00:14:03,420
method and we're going to have that

00:14:00,930 --> 00:14:05,220
refer to a pacifier out handler because

00:14:03,420 --> 00:14:09,420
it's about the same we're gonna give it

00:14:05,220 --> 00:14:12,990
our then finally we're gonna type the

00:14:09,420 --> 00:14:17,010
FAFSA five route handler which again is

00:14:12,990 --> 00:14:19,470
a function and we will consider that

00:14:17,010 --> 00:14:22,470
that function is going to have two types

00:14:19,470 --> 00:14:25,410
request which is going to be a facet by

00:14:22,470 --> 00:14:27,750
request and res we're gonna keep our as

00:14:25,410 --> 00:14:32,520
is unknown for simplicity sake because

00:14:27,750 --> 00:14:34,650
we it's about the same as the request

00:14:32,520 --> 00:14:37,230
type but we're only focusing on requests

00:14:34,650 --> 00:14:38,700
right now and we also need to use that

00:14:37,230 --> 00:14:40,590
generic here notice how we passed that

00:14:38,700 --> 00:14:43,050
so let's take that again let's take that

00:14:40,590 --> 00:14:46,310
piece put it here on the outside and

00:14:43,050 --> 00:14:49,830
pass it through to the request and for

00:14:46,310 --> 00:14:52,260
the final trick we're gonna find the

00:14:49,830 --> 00:14:54,300
FAFSA five request type so you can see

00:14:52,260 --> 00:14:56,970
how we really break this up so it makes

00:14:54,300 --> 00:14:59,360
it really extensible we're gonna pass in

00:14:56,970 --> 00:15:03,480
our here again so we'll copy that over

00:14:59,360 --> 00:15:06,720
and now we know that's that fast if I

00:15:03,480 --> 00:15:08,520
request is an object and now this object

00:15:06,720 --> 00:15:10,110
is going to have the corresponding for

00:15:08,520 --> 00:15:10,740
properties headers queries and

00:15:10,110 --> 00:15:12,630
parameters

00:15:10,740 --> 00:15:14,670
take a quick taking a quick look back at

00:15:12,630 --> 00:15:16,980
part two you see that we just call them

00:15:14,670 --> 00:15:18,600
the same thing but lower case but we

00:15:16,980 --> 00:15:20,940
want them to correspond to whatever's in

00:15:18,600 --> 00:15:23,880
the generic so here remember that the

00:15:20,940 --> 00:15:25,050
generic is referred to as our we're

00:15:23,880 --> 00:15:27,380
going to go ahead and call the headers

00:15:25,050 --> 00:15:33,360
property and it's going to be our

00:15:27,380 --> 00:15:38,339
headers then the query property it's

00:15:33,360 --> 00:15:43,800
gonna be our with the query string Rams

00:15:38,339 --> 00:15:49,589
is our and params and then finally body

00:15:43,800 --> 00:15:51,540
is our body so with all of that

00:15:49,589 --> 00:15:59,399
implemented we can go back to part two

00:15:51,540 --> 00:16:02,490
and see how it's how we've done we've

00:15:59,399 --> 00:16:04,589
made one one over site the properties in

00:16:02,490 --> 00:16:08,339
the generic all need to be optional and

00:16:04,589 --> 00:16:11,459
that enables that default operation to

00:16:08,339 --> 00:16:13,950
go into effect with the unknowns so what

00:16:11,459 --> 00:16:15,899
so the difference is is here we've made

00:16:13,950 --> 00:16:18,660
these all optional now and they'll

00:16:15,899 --> 00:16:21,120
default to unknown through this sort of

00:16:18,660 --> 00:16:24,600
you know generic constraining and

00:16:21,120 --> 00:16:27,180
defaulting so when R is specified as

00:16:24,600 --> 00:16:30,870
only you know an object containing that

00:16:27,180 --> 00:16:33,360
headers prop then it'll only set that

00:16:30,870 --> 00:16:34,980
one here it'll set the others but it'll

00:16:33,360 --> 00:16:37,260
default the others to whatever that

00:16:34,980 --> 00:16:40,860
default is here which again is just

00:16:37,260 --> 00:16:43,800
unknown it's a little bit of a like very

00:16:40,860 --> 00:16:45,870
much shared interface experience but it

00:16:43,800 --> 00:16:47,790
turns out to work really well and work

00:16:45,870 --> 00:16:50,190
out in our favor because as you can see

00:16:47,790 --> 00:16:54,329
the headers correspond to the type

00:16:50,190 --> 00:16:56,760
defined here and thus concluding part to

00:16:54,329 --> 00:17:00,420
implementing named generic parameters

00:16:56,760 --> 00:17:03,800
all right so here we are in part three

00:17:00,420 --> 00:17:06,360
and we are going to be covering

00:17:03,800 --> 00:17:08,970
declaration merging in implementing a

00:17:06,360 --> 00:17:11,130
plugin system for our fafsa phi instance

00:17:08,970 --> 00:17:14,069
so taking a look at the you know the

00:17:11,130 --> 00:17:15,689
fafsa phi javascript implementation you

00:17:14,069 --> 00:17:18,059
can see we have two functions there's

00:17:15,689 --> 00:17:21,120
decorate which given a key value pair

00:17:18,059 --> 00:17:23,550
will add that key value pair to the

00:17:21,120 --> 00:17:24,540
fafsa phi instance and then we have the

00:17:23,550 --> 00:17:27,329
register function

00:17:24,540 --> 00:17:31,070
which given a plugin in an options

00:17:27,329 --> 00:17:34,560
object we will apply the you know the

00:17:31,070 --> 00:17:39,110
local philosophy instance to that

00:17:34,560 --> 00:17:41,610
plug-in with its options this this

00:17:39,110 --> 00:17:43,770
methodology of a plug-in system will

00:17:41,610 --> 00:17:46,710
allow the plugins to call things like

00:17:43,770 --> 00:17:49,230
this dot daiquiri but from a typescript

00:17:46,710 --> 00:17:51,930
perspective you know plug the plug-in or

00:17:49,230 --> 00:17:54,360
not calling this dot daiquiri is gonna

00:17:51,930 --> 00:17:58,290
be you know a little difficult wow we

00:17:54,360 --> 00:18:01,650
could add a type to our server to say

00:17:58,290 --> 00:18:04,740
you know you know any additional

00:18:01,650 --> 00:18:07,560
property could be of type any it doesn't

00:18:04,740 --> 00:18:10,620
really solve much for us but instead if

00:18:07,560 --> 00:18:13,680
we had a you know a file like we do here

00:18:10,620 --> 00:18:16,820
or we're calling you know art dot

00:18:13,680 --> 00:18:19,470
decorate on our server in that same file

00:18:16,820 --> 00:18:22,020
we can actually write a declaration

00:18:19,470 --> 00:18:24,900
merging for our FAFSA fight instance

00:18:22,020 --> 00:18:28,770
with that's with that value and you can

00:18:24,900 --> 00:18:30,570
expect it to be here as string but as a

00:18:28,770 --> 00:18:32,340
part of this section I also want to show

00:18:30,570 --> 00:18:35,340
a little bit of the magic that we can do

00:18:32,340 --> 00:18:38,460
with plugins and a little bit of generic

00:18:35,340 --> 00:18:40,950
and inference so let's take a look at

00:18:38,460 --> 00:18:43,680
our whisper plugin first we'll say here

00:18:40,950 --> 00:18:46,200
in our implementation you can see that

00:18:43,680 --> 00:18:48,420
we're registering the whisper plugin and

00:18:46,200 --> 00:18:51,750
we're passing it the local secret that

00:18:48,420 --> 00:18:54,330
we've set on the line above so keep in

00:18:51,750 --> 00:18:57,420
mind that fast if I will take this

00:18:54,330 --> 00:19:00,270
plug-in function and will pass it the

00:18:57,420 --> 00:19:03,170
instance pacify server as well as this

00:19:00,270 --> 00:19:05,550
object here with the specified options

00:19:03,170 --> 00:19:08,280
so taking a look at our plugin we can

00:19:05,550 --> 00:19:10,860
see that all it does is call dot

00:19:08,280 --> 00:19:15,720
decorate on that instance and it and

00:19:10,860 --> 00:19:18,920
then it you know whispers the secret so

00:19:15,720 --> 00:19:21,630
we can take a look at the final

00:19:18,920 --> 00:19:22,860
typescript definition again before we

00:19:21,630 --> 00:19:24,840
write it ourselves and you can see that

00:19:22,860 --> 00:19:26,730
we have that fast if I plug in interface

00:19:24,840 --> 00:19:28,920
as well as those two methods

00:19:26,730 --> 00:19:34,440
so let's ran it ourselves and explain it

00:19:28,920 --> 00:19:35,760
as we go in fast if I type definition

00:19:34,440 --> 00:19:37,309
file we're going to start with that

00:19:35,760 --> 00:19:39,200
decorate

00:19:37,309 --> 00:19:42,799
method it's pretty easy to implement

00:19:39,200 --> 00:19:45,080
passage key it's a string and the value

00:19:42,799 --> 00:19:47,480
in our case we're just gonna use any you

00:19:45,080 --> 00:19:49,549
could probably use unknown here and make

00:19:47,480 --> 00:19:51,919
the user specify exactly what that value

00:19:49,549 --> 00:19:54,019
is during runtime to make it a little

00:19:51,919 --> 00:19:56,929
bit better but for all intensive

00:19:54,019 --> 00:19:58,549
purposes any should be okay here then

00:19:56,929 --> 00:20:01,940
we're gonna have that register function

00:19:58,549 --> 00:20:03,860
now remember that register function gets

00:20:01,940 --> 00:20:07,370
a plug-in and that plug-in we're gonna

00:20:03,860 --> 00:20:11,299
call fast if I plug in and any options

00:20:07,370 --> 00:20:12,499
it's going to be plug in options and

00:20:11,299 --> 00:20:15,440
we're gonna have this function just

00:20:12,499 --> 00:20:17,860
return void so we can see here that this

00:20:15,440 --> 00:20:20,570
you know the idea is this plug-in

00:20:17,860 --> 00:20:23,389
interface is probably going to also

00:20:20,570 --> 00:20:27,139
require that plug-in options so let's

00:20:23,389 --> 00:20:30,889
make plug-in options a generic for the

00:20:27,139 --> 00:20:35,090
register function and we're gonna pass

00:20:30,889 --> 00:20:37,549
it here so this is one of my favorite

00:20:35,090 --> 00:20:39,499
tricks in typescript where we have a

00:20:37,549 --> 00:20:42,320
generic defined for this function

00:20:39,499 --> 00:20:45,950
register but we've also specified it

00:20:42,320 --> 00:20:48,350
here as well as here so let's write the

00:20:45,950 --> 00:20:50,119
FAFSA fide plug-in interface we're gonna

00:20:48,350 --> 00:20:51,980
export this one as well because we're

00:20:50,119 --> 00:20:56,019
going to use it in our whisper plug-in

00:20:51,980 --> 00:20:58,009
definition file call facet 5 plug-in

00:20:56,019 --> 00:20:59,960
we're going to you know it's also gonna

00:20:58,009 --> 00:21:03,710
have that plug-in options in our face

00:20:59,960 --> 00:21:06,889
and this interface is going to just

00:21:03,710 --> 00:21:08,929
return a function that function is going

00:21:06,889 --> 00:21:15,919
to contain the instance the FASTA Phi

00:21:08,929 --> 00:21:18,799
and the options and it's going to return

00:21:15,919 --> 00:21:21,019
void you'll notice that we're not doing

00:21:18,799 --> 00:21:23,090
anything with the server generic for

00:21:21,019 --> 00:21:26,990
this specify instance and there's a

00:21:23,090 --> 00:21:30,230
reason for that it it's a there's a

00:21:26,990 --> 00:21:32,659
longer reason but the short version of

00:21:30,230 --> 00:21:36,679
it is when you when we have a plug-in

00:21:32,659 --> 00:21:39,799
system like here the plug-in author

00:21:36,679 --> 00:21:41,119
won't know what type of instance is

00:21:39,799 --> 00:21:45,970
going to get passed here it could be

00:21:41,119 --> 00:21:49,250
anything it could be HTTP HTTP to HPS if

00:21:45,970 --> 00:21:50,900
their plugin doesn't care what kind of

00:21:49,250 --> 00:21:53,420
instance it is

00:21:50,900 --> 00:21:55,790
and neither does its type and if its

00:21:53,420 --> 00:21:58,610
plug-in does care what kind of type the

00:21:55,790 --> 00:22:00,500
server is then we probably will have to

00:21:58,610 --> 00:22:03,740
handle that logic from within the plugin

00:22:00,500 --> 00:22:05,330
and there's a longer conversation that

00:22:03,740 --> 00:22:08,060
we're currently having on you know how

00:22:05,330 --> 00:22:13,550
can we improve this sort of type to

00:22:08,060 --> 00:22:17,030
enable that extensibility but going back

00:22:13,550 --> 00:22:19,340
to this plug-in options generic if we

00:22:17,030 --> 00:22:22,640
were to define an instance of this

00:22:19,340 --> 00:22:26,330
interface here and pass it this plug-in

00:22:22,640 --> 00:22:30,170
options generic it'll then pass that

00:22:26,330 --> 00:22:36,590
itself here as well from the perspective

00:22:30,170 --> 00:22:41,450
of the register function if we pass a a

00:22:36,590 --> 00:22:44,720
type implementation of this interface to

00:22:41,450 --> 00:22:48,080
this plug-in property typescript will

00:22:44,720 --> 00:22:51,140
actually figure out that the plug-in

00:22:48,080 --> 00:22:53,930
options generic that is defined in the

00:22:51,140 --> 00:22:55,850
instance of this interface is going to

00:22:53,930 --> 00:22:58,700
be the same as the one here and you

00:22:55,850 --> 00:23:01,790
don't need to write it twice so what

00:22:58,700 --> 00:23:04,970
does that all mean we go to this whisper

00:23:01,790 --> 00:23:06,680
plug-in definition file and just like

00:23:04,970 --> 00:23:10,580
the previous one we're going to export

00:23:06,680 --> 00:23:13,400
this constant variable whisper plug-in

00:23:10,580 --> 00:23:16,750
which refers to last if I plug in and

00:23:13,400 --> 00:23:18,950
we're passing in that you know our

00:23:16,750 --> 00:23:22,370
options object here in this case it's

00:23:18,950 --> 00:23:25,400
secret string taking a look at that

00:23:22,370 --> 00:23:27,980
implementation now when we import

00:23:25,400 --> 00:23:30,860
whisper plug-in you know whisper plugin

00:23:27,980 --> 00:23:33,650
is of type classify plug-in and if you

00:23:30,860 --> 00:23:37,700
remember register takes in you know that

00:23:33,650 --> 00:23:40,670
first option is a fast if I plug in so

00:23:37,700 --> 00:23:44,150
it's able to take in and infer the

00:23:40,670 --> 00:23:47,930
generic plug-in options based on the

00:23:44,150 --> 00:23:50,780
definition of our plug-in I know that

00:23:47,930 --> 00:23:55,580
can be a little confusing so I hope this

00:23:50,780 --> 00:23:58,730
code snippet showed that but the last

00:23:55,580 --> 00:24:01,730
point I want to make here is back to the

00:23:58,730 --> 00:24:03,680
whole declaration merging when you have

00:24:01,730 --> 00:24:04,850
something like the whisper plug-in that

00:24:03,680 --> 00:24:07,370
is

00:24:04,850 --> 00:24:09,770
you know adding a property too fast if I

00:24:07,370 --> 00:24:11,810
let's go ahead and you know while we're

00:24:09,770 --> 00:24:15,230
saying this change these comments over

00:24:11,810 --> 00:24:18,410
to the new implementation and we can see

00:24:15,230 --> 00:24:20,570
that we are extending that FAFSA fee

00:24:18,410 --> 00:24:23,500
instance interface with that whisper

00:24:20,570 --> 00:24:27,710
secret now it shouldn't be the

00:24:23,500 --> 00:24:30,230
implementations job to do it instead we

00:24:27,710 --> 00:24:32,870
can actually use the same declare block

00:24:30,230 --> 00:24:36,800
inside of the type of inside of the

00:24:32,870 --> 00:24:39,500
definition here and we can achieve the

00:24:36,800 --> 00:24:42,530
same thing where let's say we just want

00:24:39,500 --> 00:24:45,530
to add that whisper secret property from

00:24:42,530 --> 00:24:49,280
our plugin we go back over to our part

00:24:45,530 --> 00:24:51,590
three and we remove it from here you'll

00:24:49,280 --> 00:24:55,550
notice that whisper secret is still of

00:24:51,590 --> 00:24:59,150
type string because by importing that

00:24:55,550 --> 00:25:02,030
plug-in from you know from your module

00:24:59,150 --> 00:25:05,210
system the definition file with it as

00:25:02,030 --> 00:25:06,380
well will be included and because we're

00:25:05,210 --> 00:25:10,760
you know overwriting

00:25:06,380 --> 00:25:13,520
the or merging the that property over

00:25:10,760 --> 00:25:15,500
the FAFSA fight instance interface we

00:25:13,520 --> 00:25:18,470
get that same effect and inside of our

00:25:15,500 --> 00:25:20,870
implementation and with that you've

00:25:18,470 --> 00:25:26,090
implemented implemented the basic

00:25:20,870 --> 00:25:28,640
plug-in system for festivai welcome back

00:25:26,090 --> 00:25:32,270
I hope you enjoyed that code the code

00:25:28,640 --> 00:25:33,860
walkthrough that as a reminder the

00:25:32,270 --> 00:25:35,780
topics we covered today include

00:25:33,860 --> 00:25:38,420
discriminant unions function overloading

00:25:35,780 --> 00:25:41,330
name generic parameters declaration

00:25:38,420 --> 00:25:43,900
merging and generic inference all of

00:25:41,330 --> 00:25:46,700
these are actively in use over in the

00:25:43,900 --> 00:25:47,990
actual fafsa fight type definitions and

00:25:46,700 --> 00:25:50,690
there's plenty of more information

00:25:47,990 --> 00:25:53,570
available on type scripts documentation

00:25:50,690 --> 00:25:55,130
to learn more about it if you'd like to

00:25:53,570 --> 00:25:57,020
learn more about the types of

00:25:55,130 --> 00:25:58,910
definitions or even about FAFSA Phi

00:25:57,020 --> 00:26:01,370
itself come check us out and github

00:25:58,910 --> 00:26:03,800
we're always accepting of new

00:26:01,370 --> 00:26:05,660
contributors and contributions and we

00:26:03,800 --> 00:26:09,800
are happy to include you in our

00:26:05,660 --> 00:26:11,330
community once again my name is Ethan

00:26:09,800 --> 00:26:13,280
Arawa I'm a software engineer at

00:26:11,330 --> 00:26:15,320
Microsoft thank you very much for

00:26:13,280 --> 00:26:17,600
listening to my talk today you can find

00:26:15,320 --> 00:26:18,650
me on Twitter and github and be happy to

00:26:17,600 --> 00:26:22,450
chat further about

00:26:18,650 --> 00:26:22,450

YouTube URL: https://www.youtube.com/watch?v=WjJdJkkriyE


