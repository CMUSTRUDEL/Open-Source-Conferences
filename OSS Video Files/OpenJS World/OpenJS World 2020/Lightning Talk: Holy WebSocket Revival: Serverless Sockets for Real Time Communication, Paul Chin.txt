Title: Lightning Talk: Holy WebSocket Revival: Serverless Sockets for Real Time Communication, Paul Chin
Publication date: 2020-06-18
Playlist: OpenJS World 2020
Description: 
	
Captions: 
	00:00:08,030 --> 00:00:13,710
hello and welcome everybody to the holy

00:00:11,040 --> 00:00:15,540
WebSocket revival thank you all so much

00:00:13,710 --> 00:00:17,250
for taking the time to be here with me

00:00:15,540 --> 00:00:18,869
today thank you to the open jeaious

00:00:17,250 --> 00:00:21,240
world organisers for all their hard work

00:00:18,869 --> 00:00:23,039
to amplify my work and the diverse work

00:00:21,240 --> 00:00:24,900
of all the other presenters I've only

00:00:23,039 --> 00:00:27,449
got five minutes so let's get cracking

00:00:24,900 --> 00:00:30,150
my name is Paul chin jr. and I work at

00:00:27,449 --> 00:00:32,099
begin calm the fastest CI CD platform

00:00:30,150 --> 00:00:34,230
for service apps in addition to

00:00:32,099 --> 00:00:36,149
developer relations for begin I'm also

00:00:34,230 --> 00:00:38,040
the prophet of the one true god of the

00:00:36,149 --> 00:00:40,140
internet nicholas cage and today's

00:00:38,040 --> 00:00:42,270
presentation was inspired by him I was

00:00:40,140 --> 00:00:44,550
inspired to talk about the need for true

00:00:42,270 --> 00:00:46,920
human connection and how we as web

00:00:44,550 --> 00:00:49,250
developers can enable people around the

00:00:46,920 --> 00:00:51,750
world to collaborate like never before

00:00:49,250 --> 00:00:53,969
now WebSockets aren't new they've been

00:00:51,750 --> 00:00:55,770
around for a decade and if you aren't

00:00:53,969 --> 00:00:57,660
familiar with them they enable a

00:00:55,770 --> 00:00:59,489
persistent connection between the client

00:00:57,660 --> 00:01:01,050
and the server clients can push and

00:00:59,489 --> 00:01:03,030
receive data from the server in near

00:01:01,050 --> 00:01:06,180
real-time your favorite chat app

00:01:03,030 --> 00:01:08,430
probably uses WebSockets so what's so

00:01:06,180 --> 00:01:12,330
exciting about WebSockets today well now

00:01:08,430 --> 00:01:14,460
we can do it server lessly in 2018 AWS

00:01:12,330 --> 00:01:17,580
added the WebSocket protocol to HPI

00:01:14,460 --> 00:01:18,689
gateway now if you're new to service no

00:01:17,580 --> 00:01:20,369
problem it's an event-driven

00:01:18,689 --> 00:01:22,799
architecture that just uses cloud

00:01:20,369 --> 00:01:24,960
services to do the same things that

00:01:22,799 --> 00:01:27,180
we're already doing but with less direct

00:01:24,960 --> 00:01:28,110
management of the infrastructure so

00:01:27,180 --> 00:01:31,799
let's take a look at this awesome

00:01:28,110 --> 00:01:33,990
diagram there's always boxes for the

00:01:31,799 --> 00:01:35,520
full stack of this upcoming demo you

00:01:33,990 --> 00:01:38,280
notice that the data will flow up and

00:01:35,520 --> 00:01:40,799
down a client opens a socket connection

00:01:38,280 --> 00:01:42,180
sends data through the API gateway that

00:01:40,799 --> 00:01:44,970
goes a different lambda functions for

00:01:42,180 --> 00:01:47,340
processing this demo only has five

00:01:44,970 --> 00:01:50,430
lambda functions that will do everything

00:01:47,340 --> 00:01:51,960
it needs to we also use dynamo DB to

00:01:50,430 --> 00:01:53,960
persist the state of all the connections

00:01:51,960 --> 00:01:56,670
because lambda functions are stateless

00:01:53,960 --> 00:01:58,710
now it's really fine because dynamo DB

00:01:56,670 --> 00:02:00,090
is built for this kind of thing and I

00:01:58,710 --> 00:02:03,030
don't have to worry about managing

00:02:00,090 --> 00:02:05,310
connection pools or admin keys to a

00:02:03,030 --> 00:02:07,829
database because there's cloud security

00:02:05,310 --> 00:02:10,530
policies in place that are scoped to the

00:02:07,829 --> 00:02:12,239
individual functions let's take a quick

00:02:10,530 --> 00:02:14,950
peek at some

00:02:12,239 --> 00:02:17,050
on the client we open a web socket with

00:02:14,950 --> 00:02:18,849
the browser API send a message to the

00:02:17,050 --> 00:02:20,890
backend then the lambda function saves

00:02:18,849 --> 00:02:22,599
the message data iterates over all the

00:02:20,890 --> 00:02:24,910
connections and sends it back to the

00:02:22,599 --> 00:02:26,560
connected clients this way when someone

00:02:24,910 --> 00:02:28,209
joins they can get the latest state of

00:02:26,560 --> 00:02:29,980
all their connections then back on the

00:02:28,209 --> 00:02:31,959
client there's a click handler to send

00:02:29,980 --> 00:02:33,700
the new message to the server which is

00:02:31,959 --> 00:02:36,010
saved pushed out again to all the

00:02:33,700 --> 00:02:37,959
updated clients and then when someone

00:02:36,010 --> 00:02:40,000
disconnects their connection is removed

00:02:37,959 --> 00:02:42,819
in database and another state change is

00:02:40,000 --> 00:02:44,709
pushed out to the remaining clients for

00:02:42,819 --> 00:02:47,709
a single user it looks a lot like a rest

00:02:44,709 --> 00:02:49,840
request response pattern but the magic

00:02:47,709 --> 00:02:53,950
of sockets is that enables connections

00:02:49,840 --> 00:02:56,049
between clients see web sockets enable

00:02:53,950 --> 00:02:58,900
users to send their data to each other

00:02:56,049 --> 00:03:00,700
and a single connected experience and

00:02:58,900 --> 00:03:03,849
that's what's important and that's what

00:03:00,700 --> 00:03:06,489
I urge all of us to explore some more so

00:03:03,849 --> 00:03:09,760
now it is time to praise Kage go ahead

00:03:06,489 --> 00:03:13,360
and navigate your favorite mobile device

00:03:09,760 --> 00:03:17,530
to bitly slash open JS 2020 and now

00:03:13,360 --> 00:03:19,959
watch as we all become Kage and I know

00:03:17,530 --> 00:03:22,510
this is a pre-recorded you're watching

00:03:19,959 --> 00:03:25,510
her right now I'm also gonna be on this

00:03:22,510 --> 00:03:26,310
site and if I time this just right you

00:03:25,510 --> 00:03:29,530
still with me

00:03:26,310 --> 00:03:31,660
praise Kage believe in the power that

00:03:29,530 --> 00:03:34,959
everybody click on the Left button in 1

00:03:31,660 --> 00:03:37,480
2 3 click left great now one more time

00:03:34,959 --> 00:03:41,169
click on the right button in 1 2 3 click

00:03:37,480 --> 00:03:43,419
right hopefully sometime in the future I

00:03:41,169 --> 00:03:45,669
will see a dozen or more heads all

00:03:43,419 --> 00:03:47,889
synced in unison all together here with

00:03:45,669 --> 00:03:52,230
the power of Kage and web sockets and

00:03:47,889 --> 00:03:54,609
JavaScript now for the sermon

00:03:52,230 --> 00:03:56,620
connections are important it's the only

00:03:54,609 --> 00:03:58,569
way that we can grow we find out exactly

00:03:56,620 --> 00:04:01,180
who we are in the relationships that we

00:03:58,569 --> 00:04:04,359
make and as web developers we have an

00:04:01,180 --> 00:04:07,090
opportunity a responsibility and a gift

00:04:04,359 --> 00:04:09,190
to make the experiences and portals for

00:04:07,090 --> 00:04:11,889
every human on the planet to connect

00:04:09,190 --> 00:04:13,599
with each other we can enhance this

00:04:11,889 --> 00:04:15,849
much-needed connection that we are all

00:04:13,599 --> 00:04:17,889
striving for right now we have the

00:04:15,849 --> 00:04:20,680
privilege to use the Internet to make

00:04:17,889 --> 00:04:22,810
connections matter to build real

00:04:20,680 --> 00:04:24,640
connections in our lives in our

00:04:22,810 --> 00:04:25,300
organizations and our communities and

00:04:24,640 --> 00:04:29,050
our business

00:04:25,300 --> 00:04:31,539
so thank you all you are all my national

00:04:29,050 --> 00:04:34,660
treasure this has been an absolute

00:04:31,539 --> 00:04:36,819
pleasure there's a picture of me please

00:04:34,660 --> 00:04:38,590
check out begin com to spin up a service

00:04:36,819 --> 00:04:40,509
app in 30 seconds with only a github

00:04:38,590 --> 00:04:43,509
account that's right you'll be using

00:04:40,509 --> 00:04:45,699
real AWS services we're always looking

00:04:43,509 --> 00:04:47,500
for contributors to architect architect

00:04:45,699 --> 00:04:50,440
is the open source service framework

00:04:47,500 --> 00:04:51,849
that this demo was built on and special

00:04:50,440 --> 00:04:54,580
shout out to my hometown community

00:04:51,849 --> 00:04:57,250
Norfolk Jas I'm forever grateful for

00:04:54,580 --> 00:05:01,770
their guidance and mentorship thank you

00:04:57,250 --> 00:05:01,770

YouTube URL: https://www.youtube.com/watch?v=ZBuidvXnTKY


