Title: Import { modules } as esm from “nodejs”  - Tierney Cyren, Microsoft
Publication date: 2020-06-22
Playlist: OpenJS World 2020
Description: 
	
Captions: 
	00:00:00,399 --> 00:00:03,280
okay thanks everyone for coming to my

00:00:02,560 --> 00:00:07,040
talk on

00:00:03,280 --> 00:00:09,679
importing modules zsm from node.js

00:00:07,040 --> 00:00:11,599
quick who am i my name is tierney siren

00:00:09,679 --> 00:00:13,440
my pronouns are he and they

00:00:11,599 --> 00:00:14,719
i'm a senior cloud developer advocate at

00:00:13,440 --> 00:00:16,240
microsoft

00:00:14,719 --> 00:00:17,840
i'm a collaborator and a bunch of things

00:00:16,240 --> 00:00:20,240
in node.js including

00:00:17,840 --> 00:00:21,680
uh being chairperson of the node.js

00:00:20,240 --> 00:00:25,439
community committee

00:00:21,680 --> 00:00:28,840
and my twitter handle is at bittenbang

00:00:25,439 --> 00:00:30,320
so how do we use esm in node.js right

00:00:28,840 --> 00:00:32,000
now

00:00:30,320 --> 00:00:33,680
before we get into that i want to give a

00:00:32,000 --> 00:00:36,800
quick disclaimer

00:00:33,680 --> 00:00:39,520
uh esm and node is experimental

00:00:36,800 --> 00:00:40,640
it is unflagged in 12 and 14 but it is

00:00:39,520 --> 00:00:42,559
still experimental

00:00:40,640 --> 00:00:43,760
some things might change under the hood

00:00:42,559 --> 00:00:46,719
some things might change in

00:00:43,760 --> 00:00:47,920
the dx just want to keep that in mind

00:00:46,719 --> 00:00:49,039
you might not want to push it to

00:00:47,920 --> 00:00:50,399
production yet

00:00:49,039 --> 00:00:51,520
but you might want to start thinking

00:00:50,399 --> 00:00:52,879
about that if it's something you're

00:00:51,520 --> 00:00:55,120
interested in doing and if it suits your

00:00:52,879 --> 00:00:58,399
use case

00:00:55,120 --> 00:01:01,760
so there's two approaches to esm

00:00:58,399 --> 00:01:04,479
implicit and explicit implicit you

00:01:01,760 --> 00:01:04,960
add some metadata to your package.json

00:01:04,479 --> 00:01:09,040
and

00:01:04,960 --> 00:01:13,520
you change requires and module.exports

00:01:09,040 --> 00:01:16,799
to import and export as appropriate

00:01:13,520 --> 00:01:18,720
um in explicit esm

00:01:16,799 --> 00:01:19,840
that's literally just the file name so

00:01:18,720 --> 00:01:22,880
dot mjs and

00:01:19,840 --> 00:01:25,040
cjs you probably heard of mjs

00:01:22,880 --> 00:01:26,080
dot cjs is a newer edition that's going

00:01:25,040 --> 00:01:29,759
to come with the development

00:01:26,080 --> 00:01:34,159
of esm n.js that you know

00:01:29,759 --> 00:01:37,119
mjs indicates esm that the file is esm

00:01:34,159 --> 00:01:37,520
cjs indicates that the file is comma.js

00:01:37,119 --> 00:01:39,600
so

00:01:37,520 --> 00:01:43,119
those are kind of interesting approaches

00:01:39,600 --> 00:01:46,720
to taking that explicit

00:01:43,119 --> 00:01:48,079
cool so how do we use esm implicitly in

00:01:46,720 --> 00:01:50,799
ojs

00:01:48,079 --> 00:01:51,680
so there's three steps at least for this

00:01:50,799 --> 00:01:54,720
simple

00:01:51,680 --> 00:01:57,040
simplest example add type

00:01:54,720 --> 00:01:58,479
modules to your package.json so that's

00:01:57,040 --> 00:02:01,759
you know the property type

00:01:58,479 --> 00:02:03,759
with the value modules flip over to

00:02:01,759 --> 00:02:05,280
import and export instead of require and

00:02:03,759 --> 00:02:08,720
module that exports

00:02:05,280 --> 00:02:09,920
and run your code here's an example of

00:02:08,720 --> 00:02:13,520
what you need to add

00:02:09,920 --> 00:02:16,080
so literally just one property and that

00:02:13,520 --> 00:02:17,280
all files that are close to that will be

00:02:16,080 --> 00:02:21,599
resolved as esm

00:02:17,280 --> 00:02:24,319
so all js files will be resolved as esm

00:02:21,599 --> 00:02:24,720
until there is another package.json that

00:02:24,319 --> 00:02:28,720
has

00:02:24,720 --> 00:02:31,599
either no type or

00:02:28,720 --> 00:02:32,640
type comma.js so you know you can

00:02:31,599 --> 00:02:36,160
actually nest different

00:02:32,640 --> 00:02:37,760
different package.jsons

00:02:36,160 --> 00:02:40,160
with different code and they will be

00:02:37,760 --> 00:02:42,000
able to kind of resolve implicitly

00:02:40,160 --> 00:02:45,599
according to the nearest package json

00:02:42,000 --> 00:02:45,599
and what that package json defines

00:02:45,680 --> 00:02:53,840
so here's an example of a comma.js

00:02:49,599 --> 00:02:55,760
file so you can see it's index.js so

00:02:53,840 --> 00:02:56,959
we're implicitly assuming that it's

00:02:55,760 --> 00:03:00,000
going to be comma.js

00:02:56,959 --> 00:03:01,280
constdsm equals you know an object that

00:03:00,000 --> 00:03:05,200
has some properties

00:03:01,280 --> 00:03:08,800
and module.export.csm here is the

00:03:05,200 --> 00:03:10,159
uh esm version uh we're you know

00:03:08,800 --> 00:03:12,640
sprinkling in some asm

00:03:10,159 --> 00:03:13,200
so we're just going to do same con csm

00:03:12,640 --> 00:03:14,480
um

00:03:13,200 --> 00:03:16,319
and we're just going to be flipping our

00:03:14,480 --> 00:03:18,640
export to

00:03:16,319 --> 00:03:21,040
export default esm rather than a module

00:03:18,640 --> 00:03:23,680
that exports esm

00:03:21,040 --> 00:03:24,239
uh to run this previously for a bit

00:03:23,680 --> 00:03:26,480
there we were

00:03:24,239 --> 00:03:28,400
having to run node with a flag the

00:03:26,480 --> 00:03:29,840
experimental modules flag

00:03:28,400 --> 00:03:32,480
now we're just gonna be dropping that

00:03:29,840 --> 00:03:33,599
flag so this is just going to be to run

00:03:32,480 --> 00:03:37,200
this we're just going to run

00:03:33,599 --> 00:03:40,000
node file name so in our case

00:03:37,200 --> 00:03:43,680
we were naming that file index.js so

00:03:40,000 --> 00:03:43,680
we're going to do node index.js

00:03:43,760 --> 00:03:49,840
take a look at a quick example

00:03:47,440 --> 00:03:51,440
okay so let's get started with npm init

00:03:49,840 --> 00:03:54,480
and the dash y shortcut

00:03:51,440 --> 00:03:56,319
this auto pulls my presets

00:03:54,480 --> 00:03:58,000
for you know my config for

00:03:56,319 --> 00:03:59,760
initialization

00:03:58,000 --> 00:04:02,159
by default yours will be a bit different

00:03:59,760 --> 00:04:04,720
but you can go ahead and change it too

00:04:02,159 --> 00:04:05,840
and this goes ahead and sets up our

00:04:04,720 --> 00:04:08,000
package.json

00:04:05,840 --> 00:04:08,879
we're going to want to update our main

00:04:08,000 --> 00:04:12,720
to

00:04:08,879 --> 00:04:14,159
esm.js rather than index.js

00:04:12,720 --> 00:04:17,120
and then we're also going to want to

00:04:14,159 --> 00:04:17,120
update type

00:04:17,199 --> 00:04:24,320
uh to be module

00:04:22,079 --> 00:04:25,520
so this word this is going to be the

00:04:24,320 --> 00:04:28,560
file we're going to create so

00:04:25,520 --> 00:04:30,080
our our main file is going to be sm.js

00:04:28,560 --> 00:04:32,320
this is just the file name i chose to

00:04:30,080 --> 00:04:35,040
use and then type module

00:04:32,320 --> 00:04:35,680
is going to indicate to us or indicate

00:04:35,040 --> 00:04:38,880
to node

00:04:35,680 --> 00:04:41,759
how to process js files

00:04:38,880 --> 00:04:44,880
so for esm.js it's going to actually be

00:04:41,759 --> 00:04:48,639
processed as an echoscript module

00:04:44,880 --> 00:04:50,880
so let's go ahead and create that and

00:04:48,639 --> 00:04:52,400
for this our content is going to be the

00:04:50,880 --> 00:04:54,080
same so we're going to want to

00:04:52,400 --> 00:04:56,320
you know have a normal object as our

00:04:54,080 --> 00:04:57,759
output but how we actually

00:04:56,320 --> 00:04:59,840
import and export that is going to be

00:04:57,759 --> 00:05:03,199
different so

00:04:59,840 --> 00:05:05,759
for here i'm going to want to do const

00:05:03,199 --> 00:05:05,759
esm

00:05:06,400 --> 00:05:09,199
and then that's going to be an object so

00:05:08,080 --> 00:05:10,000
this is going to be the object we're

00:05:09,199 --> 00:05:11,919
exporting in this

00:05:10,000 --> 00:05:13,520
module this is going to have three

00:05:11,919 --> 00:05:18,400
properties

00:05:13,520 --> 00:05:18,400
runtime which is going to be process

00:05:19,600 --> 00:05:26,800
dot nope dot version

00:05:23,280 --> 00:05:29,680
dot node so this is going to be the node

00:05:26,800 --> 00:05:34,080
version that we're currently running

00:05:29,680 --> 00:05:34,080
uh the next one is going to be modules

00:05:34,240 --> 00:05:38,720
this is going to be

00:05:36,840 --> 00:05:42,479
process.versions.module

00:05:38,720 --> 00:05:45,919
so this number or this this property

00:05:42,479 --> 00:05:49,039
on the process.versions object is

00:05:45,919 --> 00:05:50,479
a single number that uh node increases

00:05:49,039 --> 00:05:53,520
every time the api

00:05:50,479 --> 00:05:54,639
or application binary interface for the

00:05:53,520 --> 00:05:57,120
modules system

00:05:54,639 --> 00:05:59,199
changes so every time there's an

00:05:57,120 --> 00:06:01,120
addition every time that um

00:05:59,199 --> 00:06:03,199
substantially changes that number gets

00:06:01,120 --> 00:06:05,680
increased by one

00:06:03,199 --> 00:06:08,880
and then we're also going to do have

00:06:05,680 --> 00:06:08,880
going to have a nice message here

00:06:12,560 --> 00:06:18,479
node loves esm

00:06:15,759 --> 00:06:18,800
cool so that's our object that's you

00:06:18,479 --> 00:06:20,720
know

00:06:18,800 --> 00:06:22,560
normal javascript how we do it no matter

00:06:20,720 --> 00:06:25,919
what and then we're going to have

00:06:22,560 --> 00:06:28,160
export default esm

00:06:25,919 --> 00:06:30,240
so our default export for this module

00:06:28,160 --> 00:06:32,080
module is going to be esm

00:06:30,240 --> 00:06:34,319
uh and this is just the name of the

00:06:32,080 --> 00:06:35,759
object not saying

00:06:34,319 --> 00:06:37,440
echo script modules is the default

00:06:35,759 --> 00:06:40,240
export but just we're exporting this

00:06:37,440 --> 00:06:42,800
specific object

00:06:40,240 --> 00:06:43,840
cool so we're going to want to log that

00:06:42,800 --> 00:06:46,000
though so we can actually want to

00:06:43,840 --> 00:06:47,840
consume this

00:06:46,000 --> 00:06:49,039
so how we're going to want to do this is

00:06:47,840 --> 00:06:50,639
with blog.js

00:06:49,039 --> 00:06:52,720
this is just again another file that i'm

00:06:50,639 --> 00:06:55,840
deciding to create we're going to do

00:06:52,720 --> 00:06:59,280
import esm from yes

00:06:55,840 --> 00:07:00,479
uh from quote esm.js

00:06:59,280 --> 00:07:03,520
we're going to want to make sure we have

00:07:00,479 --> 00:07:07,120
a path there so esm.js

00:07:03,520 --> 00:07:08,479
cool and then you know now that we have

00:07:07,120 --> 00:07:10,440
this object that we're importing

00:07:08,479 --> 00:07:11,919
we're going to want to log that so

00:07:10,440 --> 00:07:15,199
console.log

00:07:11,919 --> 00:07:19,120
esm and

00:07:15,199 --> 00:07:22,479
let's make sure we save our package json

00:07:19,120 --> 00:07:25,280
and then do node log js perfect

00:07:22,479 --> 00:07:26,000
so there we're seeing ecmascript modules

00:07:25,280 --> 00:07:28,880
powering

00:07:26,000 --> 00:07:31,039
a module inside of node that's output

00:07:28,880 --> 00:07:33,919
outputting the node runtime version

00:07:31,039 --> 00:07:36,160
the module api version and a sweet

00:07:33,919 --> 00:07:39,440
message

00:07:36,160 --> 00:07:43,520
let's talk about explicit esm now so

00:07:39,440 --> 00:07:46,639
how exactly can we use explicit dsm

00:07:43,520 --> 00:07:49,199
for access to esm we

00:07:46,639 --> 00:07:50,560
simply have to change the file name from

00:07:49,199 --> 00:07:54,520
index.js

00:07:50,560 --> 00:07:56,400
or whatever.js to index.mjs or

00:07:54,520 --> 00:08:00,160
whatever.mjs

00:07:56,400 --> 00:08:02,160
the dot mjs is the explicit part we're

00:08:00,160 --> 00:08:06,319
explicitly telling the runtime

00:08:02,160 --> 00:08:09,360
hey this file is in the case of mjs

00:08:06,319 --> 00:08:12,160
esm uh

00:08:09,360 --> 00:08:12,479
the same is true for common js so you

00:08:12,160 --> 00:08:14,400
know

00:08:12,479 --> 00:08:16,240
taking the case of index.js if we want

00:08:14,400 --> 00:08:19,599
to explicitly tell node

00:08:16,240 --> 00:08:20,960
that this file is comma.js and should

00:08:19,599 --> 00:08:23,039
always be run as comma.js

00:08:20,960 --> 00:08:24,080
we can just change the extension the

00:08:23,039 --> 00:08:28,960
file name

00:08:24,080 --> 00:08:28,960
to index.cjs

00:08:29,360 --> 00:08:33,120
previously we would have had to run this

00:08:30,800 --> 00:08:35,760
with node experimental modules

00:08:33,120 --> 00:08:37,360
but again now we're just going to run

00:08:35,760 --> 00:08:41,760
this with node

00:08:37,360 --> 00:08:44,880
and then in the case of mjs

00:08:41,760 --> 00:08:49,040
node m node index dot mjs

00:08:44,880 --> 00:08:51,920
and in the case of cjs node index.cjs

00:08:49,040 --> 00:08:53,200
this will tell node that hey you know

00:08:51,920 --> 00:08:56,640
we're running this with the

00:08:53,200 --> 00:08:58,560
or comma.js run it like that

00:08:56,640 --> 00:09:00,080
one thing to note here is that you don't

00:08:58,560 --> 00:09:03,600
have to explicitly

00:09:00,080 --> 00:09:06,959
run the file so anytime node encounters

00:09:03,600 --> 00:09:08,880
mjs or cjs it will run those files as if

00:09:06,959 --> 00:09:11,839
they were echo script modules

00:09:08,880 --> 00:09:11,839
or comma.js

00:09:12,000 --> 00:09:15,279
let's get into an example of that

00:09:15,360 --> 00:09:18,640
okay so to get started on moving from

00:09:17,680 --> 00:09:21,279
implicit esm

00:09:18,640 --> 00:09:22,240
to explicit dsm we're going to do a few

00:09:21,279 --> 00:09:25,600
things

00:09:22,240 --> 00:09:29,080
first we're going to update our main

00:09:25,600 --> 00:09:32,560
to use a explicit file extension so

00:09:29,080 --> 00:09:33,360
esm.mjs and we're also going to in this

00:09:32,560 --> 00:09:34,720
case

00:09:33,360 --> 00:09:36,399
you don't always have to do this but in

00:09:34,720 --> 00:09:39,920
this case i want to have

00:09:36,399 --> 00:09:41,279
js default to comma.js so in this case

00:09:39,920 --> 00:09:44,560
i'm going to remove

00:09:41,279 --> 00:09:47,839
type module from our package.json now

00:09:44,560 --> 00:09:51,040
our main export is going to be

00:09:47,839 --> 00:09:53,040
read as esm despite

00:09:51,040 --> 00:09:54,560
being dot mjs and despite there being

00:09:53,040 --> 00:09:57,360
nothing

00:09:54,560 --> 00:10:00,399
no type module in the package.json our

00:09:57,360 --> 00:10:03,360
expert will still be parsed as

00:10:00,399 --> 00:10:04,000
esm so we're also going to want to

00:10:03,360 --> 00:10:07,200
reflect the file

00:10:04,000 --> 00:10:08,240
to actually make that work uh so we're

00:10:07,200 --> 00:10:11,600
you know just going to update the file

00:10:08,240 --> 00:10:13,360
name to esm.mjs

00:10:11,600 --> 00:10:14,720
none of our code here actually changes

00:10:13,360 --> 00:10:17,680
this is still esm

00:10:14,720 --> 00:10:18,000
we're just updating the file where our

00:10:17,680 --> 00:10:21,120
code

00:10:18,000 --> 00:10:21,920
does change a bit is in log.mjs

00:10:21,120 --> 00:10:23,839
so we're actually going to want to

00:10:21,920 --> 00:10:24,320
update the log the name of this file too

00:10:23,839 --> 00:10:27,279
since

00:10:24,320 --> 00:10:28,079
we're intending to run this as esm uh

00:10:27,279 --> 00:10:30,480
we're going to want to

00:10:28,079 --> 00:10:31,200
update our import for that as well so

00:10:30,480 --> 00:10:33,519
all that takes

00:10:31,200 --> 00:10:34,880
is just updating the file name and we

00:10:33,519 --> 00:10:38,480
should be good to go

00:10:34,880 --> 00:10:38,480
so let's try that out node

00:10:38,959 --> 00:10:43,519
log dot mjs perfect

00:10:43,760 --> 00:10:46,959
let's talk about conditional exports

00:10:45,760 --> 00:10:48,800
specifically

00:10:46,959 --> 00:10:50,560
these are a tool that we have available

00:10:48,800 --> 00:10:53,600
to us that allow us to

00:10:50,560 --> 00:10:57,440
conditionally export esm

00:10:53,600 --> 00:11:01,839
and export common.js going line by line

00:10:57,440 --> 00:11:04,320
first we have main which is

00:11:01,839 --> 00:11:06,000
pointing to modules.cjs this is for

00:11:04,320 --> 00:11:08,399
older versions of node

00:11:06,000 --> 00:11:09,760
and it helps us kind of define an entry

00:11:08,399 --> 00:11:11,600
point for those versions

00:11:09,760 --> 00:11:13,440
that they will work with which in this

00:11:11,600 --> 00:11:17,200
case is the comma.js version

00:11:13,440 --> 00:11:20,720
the next line creates a experts property

00:11:17,200 --> 00:11:23,279
that has an object

00:11:20,720 --> 00:11:24,800
or that is equal to an object and that

00:11:23,279 --> 00:11:28,240
object has two properties

00:11:24,800 --> 00:11:30,720
import and require now this is the

00:11:28,240 --> 00:11:32,320
most bare bones example we can have of

00:11:30,720 --> 00:11:34,240
conditional exports

00:11:32,320 --> 00:11:35,440
um and for the sake of simplicity here

00:11:34,240 --> 00:11:36,959
that's what we're going to go with you

00:11:35,440 --> 00:11:39,120
there's a lot more granularity here that

00:11:36,959 --> 00:11:41,440
you can kind of use to control this

00:11:39,120 --> 00:11:42,320
um definitely take uh recommend taking a

00:11:41,440 --> 00:11:44,320
look at the docs

00:11:42,320 --> 00:11:45,920
if you're interested in kind of

00:11:44,320 --> 00:11:48,399
understanding that more in depth or

00:11:45,920 --> 00:11:50,480
feel free to ask in the q a or chat with

00:11:48,399 --> 00:11:51,440
me at some point

00:11:50,480 --> 00:11:54,560
feel free to reach out however you're

00:11:51,440 --> 00:11:58,240
comfortable but

00:11:54,560 --> 00:12:00,560
specifically the import is exporting

00:11:58,240 --> 00:12:01,920
so basically this is saying when someone

00:12:00,560 --> 00:12:05,120
is imports this

00:12:01,920 --> 00:12:08,160
export module.js and the same is true

00:12:05,120 --> 00:12:11,760
for require when someone requires this

00:12:08,160 --> 00:12:14,240
export module.cj

00:12:11,760 --> 00:12:16,320
and in the case of the import we're

00:12:14,240 --> 00:12:19,360
using module.js because

00:12:16,320 --> 00:12:21,120
of type module at the bottom there

00:12:19,360 --> 00:12:22,560
but this kind of allows us to

00:12:21,120 --> 00:12:25,120
[Music]

00:12:22,560 --> 00:12:26,560
change on demand what we are giving out

00:12:25,120 --> 00:12:28,000
so we've already pre-built these files

00:12:26,560 --> 00:12:28,720
we already have kind of done this work

00:12:28,000 --> 00:12:30,160
ourselves

00:12:28,720 --> 00:12:32,079
and we're making sure we're returning

00:12:30,160 --> 00:12:34,000
the right thing for the right use case

00:12:32,079 --> 00:12:35,519
which is a super useful feature for a

00:12:34,000 --> 00:12:38,720
variety of reasons

00:12:35,519 --> 00:12:40,240
um specifically it kind of helps us

00:12:38,720 --> 00:12:41,920
scope down what's delivered

00:12:40,240 --> 00:12:44,000
to who helps with things like tree

00:12:41,920 --> 00:12:47,279
shaking um

00:12:44,000 --> 00:12:48,959
and it helps teams deliver like

00:12:47,279 --> 00:12:50,399
a more seamless experience when they're

00:12:48,959 --> 00:12:51,839
trying to transition from something like

00:12:50,399 --> 00:12:54,800
common.js dsm

00:12:51,839 --> 00:12:56,240
if you want to slowly replace uh your

00:12:54,800 --> 00:12:57,279
you know parts of your code base one by

00:12:56,240 --> 00:13:00,000
one with

00:12:57,279 --> 00:13:01,760
comma.js and move them to esm um this

00:13:00,000 --> 00:13:04,480
kind of helps

00:13:01,760 --> 00:13:06,000
simplify that a bit and reduce the

00:13:04,480 --> 00:13:08,160
immediate need for change

00:13:06,000 --> 00:13:10,560
and allows you to flip flip the switch

00:13:08,160 --> 00:13:13,680
pretty pretty incrementally

00:13:10,560 --> 00:13:15,680
additionally it kind of helps provide a

00:13:13,680 --> 00:13:18,720
path for maintainers to provide

00:13:15,680 --> 00:13:21,200
options for user choice so you know

00:13:18,720 --> 00:13:21,839
i i personally have enjoyed comment.js

00:13:21,200 --> 00:13:23,440
for years

00:13:21,839 --> 00:13:25,120
and i'm probably going to be doing more

00:13:23,440 --> 00:13:27,279
esm but

00:13:25,120 --> 00:13:29,360
for now there's some cases where i just

00:13:27,279 --> 00:13:32,160
kind of want to be using common.js

00:13:29,360 --> 00:13:33,279
and that's okay you know if if i'm using

00:13:32,160 --> 00:13:35,360
a module

00:13:33,279 --> 00:13:37,120
that has this property that you know

00:13:35,360 --> 00:13:39,600
does conditionally export things

00:13:37,120 --> 00:13:41,440
i can kind of go from commonjs i can use

00:13:39,600 --> 00:13:43,839
it as comment.js and then eventually if

00:13:41,440 --> 00:13:44,959
if and when i want to upgrade i or

00:13:43,839 --> 00:13:47,680
change

00:13:44,959 --> 00:13:50,720
to esm i can go ahead and do that and

00:13:47,680 --> 00:13:50,720
kind of flip that switch

00:13:52,240 --> 00:13:56,959
so conditional escort exports as i

00:13:54,639 --> 00:13:57,440
mentioned earlier are a subset of the

00:13:56,959 --> 00:14:00,079
package

00:13:57,440 --> 00:14:01,360
entry points feature um i didn't really

00:14:00,079 --> 00:14:02,079
name that but that's kind of what this

00:14:01,360 --> 00:14:04,320
this

00:14:02,079 --> 00:14:05,760
is kind of a part of i would highly

00:14:04,320 --> 00:14:06,800
recommend going and taking more of a

00:14:05,760 --> 00:14:09,199
look at this

00:14:06,800 --> 00:14:10,560
um this is in the node docs in the

00:14:09,199 --> 00:14:13,920
ecmascript modules

00:14:10,560 --> 00:14:15,360
section uh it's a pretty complex feature

00:14:13,920 --> 00:14:17,120
that has a lot of

00:14:15,360 --> 00:14:18,639
granularity and something that you can

00:14:17,120 --> 00:14:20,399
it really allows you to control how you

00:14:18,639 --> 00:14:22,480
want to use it

00:14:20,399 --> 00:14:24,160
i've only shown a small bit of it here

00:14:22,480 --> 00:14:26,079
but i definitely encourage you to go

00:14:24,160 --> 00:14:28,320
take a peek at it since the rest of it

00:14:26,079 --> 00:14:30,639
is relatively concept comprehensive

00:14:28,320 --> 00:14:33,279
allows you you know to do what you want

00:14:30,639 --> 00:14:33,279
to do with this

00:14:33,360 --> 00:14:37,600
let's go quick take a look at a quick

00:14:35,120 --> 00:14:37,600
example

00:14:37,920 --> 00:14:43,519
so for conditional exports to

00:14:41,120 --> 00:14:44,800
kind of exemplify them to show them off

00:14:43,519 --> 00:14:45,440
we've gone ahead and done a little bit

00:14:44,800 --> 00:14:47,760
more work

00:14:45,440 --> 00:14:48,800
on simply asm the work we were doing

00:14:47,760 --> 00:14:50,720
before

00:14:48,800 --> 00:14:52,000
and expanded on it a teeny bit so we've

00:14:50,720 --> 00:14:54,000
gone ahead and created a new project

00:14:52,000 --> 00:14:56,079
called exports

00:14:54,000 --> 00:14:57,519
and we've moved that work that we were

00:14:56,079 --> 00:15:00,320
doing previously

00:14:57,519 --> 00:15:01,519
into the node modules directory so you

00:15:00,320 --> 00:15:04,880
can see here

00:15:01,519 --> 00:15:08,720
you know in our new project if we do

00:15:04,880 --> 00:15:11,760
cd node modules and then ls

00:15:08,720 --> 00:15:13,360
we have simple esm so if we go back up

00:15:11,760 --> 00:15:16,399
you know in our directory the only thing

00:15:13,360 --> 00:15:19,839
there right now is node modules

00:15:16,399 --> 00:15:21,839
and then to actually kind of uh

00:15:19,839 --> 00:15:23,120
expand on the work we've already done we

00:15:21,839 --> 00:15:27,360
moved uh

00:15:23,120 --> 00:15:29,279
esm back to dot js and

00:15:27,360 --> 00:15:31,440
set up type module in the package.json

00:15:29,279 --> 00:15:34,240
so esm.js is now going to be parsed to

00:15:31,440 --> 00:15:34,240
csm again

00:15:34,320 --> 00:15:38,839
and with that we can kind of take the

00:15:36,480 --> 00:15:40,399
next step of setting up conditional

00:15:38,839 --> 00:15:43,120
exports

00:15:40,399 --> 00:15:44,560
so let's go ahead and do that by setting

00:15:43,120 --> 00:15:46,079
up an export property in our

00:15:44,560 --> 00:15:48,639
package.json

00:15:46,079 --> 00:15:50,639
this is going to be an object and it's

00:15:48,639 --> 00:15:56,160
going to have two properties

00:15:50,639 --> 00:15:56,160
for now we're going to start with import

00:15:57,120 --> 00:16:03,120
and that value is going to be esm.js

00:16:00,480 --> 00:16:04,160
so anytime someone tries to import this

00:16:03,120 --> 00:16:07,279
module

00:16:04,160 --> 00:16:09,920
they're going to be getting esm.js

00:16:07,279 --> 00:16:10,560
which you know we've defined as type

00:16:09,920 --> 00:16:12,560
module

00:16:10,560 --> 00:16:14,959
which is so it's going to be parsed as

00:16:12,560 --> 00:16:18,320
uh esm

00:16:14,959 --> 00:16:19,920
now anytime someone tries to require

00:16:18,320 --> 00:16:21,600
this module we're going to want to give

00:16:19,920 --> 00:16:24,240
them a different file so we're actually

00:16:21,600 --> 00:16:24,240
going to set up

00:16:24,920 --> 00:16:29,839
commonjs.cjs so

00:16:26,880 --> 00:16:31,279
here we're using explicit esm or

00:16:29,839 --> 00:16:33,440
explicit file extensions

00:16:31,279 --> 00:16:36,560
to say hey this is going to be comma.js

00:16:33,440 --> 00:16:38,639
when someone's using this

00:16:36,560 --> 00:16:40,800
so with that we're going to want to go

00:16:38,639 --> 00:16:44,000
ahead and change

00:16:40,800 --> 00:16:46,800
or create rather commonjs.cjs

00:16:44,000 --> 00:16:47,440
which is going to be a basically a copy

00:16:46,800 --> 00:16:50,160
of

00:16:47,440 --> 00:16:51,600
esm.js so i'm going to go ahead and copy

00:16:50,160 --> 00:16:52,880
that file

00:16:51,600 --> 00:16:55,639
i'm going to rename it to what we want

00:16:52,880 --> 00:16:57,920
to rename it so it's going to be

00:16:55,639 --> 00:17:00,240
commonjs.cjs

00:16:57,920 --> 00:17:02,800
and we're going to change the property

00:17:00,240 --> 00:17:02,800
here to

00:17:02,839 --> 00:17:07,120
comma.js also going to change what we're

00:17:04,880 --> 00:17:08,319
exporting to common js

00:17:07,120 --> 00:17:10,079
and we're going to change how we're

00:17:08,319 --> 00:17:10,559
exporting it so this is going to end up

00:17:10,079 --> 00:17:14,160
being

00:17:10,559 --> 00:17:17,600
module exports

00:17:14,160 --> 00:17:21,120
comma.js cool so now our

00:17:17,600 --> 00:17:22,559
comma.js export is going to correctly

00:17:21,120 --> 00:17:25,280
run this comma.js

00:17:22,559 --> 00:17:27,760
when the user tries to actually require

00:17:25,280 --> 00:17:30,240
this module

00:17:27,760 --> 00:17:30,960
so let's go ahead and take a step up

00:17:30,240 --> 00:17:34,240
into

00:17:30,960 --> 00:17:34,240
our other project

00:17:35,120 --> 00:17:41,440
so in the cli we're going to run

00:17:38,400 --> 00:17:42,640
npm init dash y

00:17:41,440 --> 00:17:46,320
so this is going to create a

00:17:42,640 --> 00:17:48,160
package.json in our higher level project

00:17:46,320 --> 00:17:50,320
so if we go ahead and look in there this

00:17:48,160 --> 00:17:54,799
is going to default to index.js

00:17:50,320 --> 00:17:57,200
we're going to want to also add type

00:17:54,799 --> 00:17:57,200
module

00:17:58,320 --> 00:18:02,799
and then we're going to want to go ahead

00:18:00,559 --> 00:18:05,760
and actually create an index.js so

00:18:02,799 --> 00:18:07,520
since we've added type module index.js

00:18:05,760 --> 00:18:10,720
is going to be esm

00:18:07,520 --> 00:18:13,520
so let's go ahead and do index.js

00:18:10,720 --> 00:18:16,240
and in this index.js since it's going to

00:18:13,520 --> 00:18:18,480
be esm we're going to have to use import

00:18:16,240 --> 00:18:20,720
and i want to import the messages that

00:18:18,480 --> 00:18:23,039
are coming from

00:18:20,720 --> 00:18:24,160
our package in node modules so i'm going

00:18:23,039 --> 00:18:27,520
to import

00:18:24,160 --> 00:18:27,520
esm from

00:18:27,679 --> 00:18:33,840
simple esm so this is

00:18:30,960 --> 00:18:34,559
importing uh you know what that is going

00:18:33,840 --> 00:18:38,160
to export

00:18:34,559 --> 00:18:41,600
for uh the import case

00:18:38,160 --> 00:18:42,080
in uh in our package and then if we go

00:18:41,600 --> 00:18:44,960
ahead

00:18:42,080 --> 00:18:45,679
and try to set up logging for that so

00:18:44,960 --> 00:18:48,160
log

00:18:45,679 --> 00:18:48,160
esm

00:18:48,880 --> 00:18:52,160
we should be able to just go ahead and

00:18:50,480 --> 00:18:56,240
run this and have it work

00:18:52,160 --> 00:19:00,240
so we're gonna do node index.js

00:18:56,240 --> 00:19:05,440
boom there's our uh esm

00:19:00,240 --> 00:19:05,440
uh use case for conditional exports

00:19:05,520 --> 00:19:09,120
now let's get into how this would work

00:19:07,919 --> 00:19:11,840
for

00:19:09,120 --> 00:19:13,679
comma.js so we're going to do the same

00:19:11,840 --> 00:19:18,000
thing

00:19:13,679 --> 00:19:18,000
we're going to create an index.cjs

00:19:19,280 --> 00:19:25,039
so in index.cjs we're going to want to

00:19:22,840 --> 00:19:27,120
ce

00:19:25,039 --> 00:19:28,960
you know a require so we're going to do

00:19:27,120 --> 00:19:33,039
const common js

00:19:28,960 --> 00:19:36,240
equals require simple esm

00:19:33,039 --> 00:19:36,880
so this specific require is going to be

00:19:36,240 --> 00:19:39,840
hitting

00:19:36,880 --> 00:19:39,840
the

00:19:40,080 --> 00:19:44,640
the require export

00:19:43,600 --> 00:19:47,120
so we're actually going to end up

00:19:44,640 --> 00:19:50,960
getting comma.js.cjs

00:19:47,120 --> 00:19:54,960
and if we just do the same thing of

00:19:50,960 --> 00:19:58,080
const or console.log

00:19:54,960 --> 00:20:02,200
commonjs we're going to

00:19:58,080 --> 00:20:05,440
be able to see that node

00:20:02,200 --> 00:20:08,000
index.cjs should just work boom

00:20:05,440 --> 00:20:09,760
so you get the same same output for

00:20:08,000 --> 00:20:12,640
common js and esm

00:20:09,760 --> 00:20:14,159
uh with just a kind of minor change with

00:20:12,640 --> 00:20:16,559
conditional exports

00:20:14,159 --> 00:20:16,559
awesome

00:20:17,919 --> 00:20:20,960
and with that i just want to say thanks

00:20:19,200 --> 00:20:23,200
for joining me if you have any questions

00:20:20,960 --> 00:20:24,640
more than happy to answer them uh if you

00:20:23,200 --> 00:20:27,679
want to reach out to me you can

00:20:24,640 --> 00:20:30,960
absolutely i am at bit and bang

00:20:27,679 --> 00:20:33,120
on twitter you uh feel free to tweet me

00:20:30,960 --> 00:20:34,000
dm me anything like that also i'm on the

00:20:33,120 --> 00:20:36,000
open.js foundation

00:20:34,000 --> 00:20:37,640
slack if you'd like to reach me there

00:20:36,000 --> 00:20:40,640
end with that

00:20:37,640 --> 00:20:40,640

YouTube URL: https://www.youtube.com/watch?v=kZm1MMPaMpI


