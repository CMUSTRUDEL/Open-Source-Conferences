Title: Developer Fan Fiction: Modules Edition - Myles Borins & Guy Bedford
Publication date: 2020-06-23
Playlist: OpenJS World 2020
Description: 
	
Captions: 
	00:00:04,530 --> 00:00:08,799
[Music]

00:00:10,139 --> 00:00:17,009
hi I'm miles Lawrence I'm a product

00:00:14,129 --> 00:00:18,750
manager at github contributor to the

00:00:17,009 --> 00:00:20,570
nodejs project I said on the technical

00:00:18,750 --> 00:00:22,800
steering committee and have also helped

00:00:20,570 --> 00:00:25,079
extensively with our modules team I also

00:00:22,800 --> 00:00:28,169
do standards work with tc39 where you

00:00:25,079 --> 00:00:30,380
may know me from such proposals as top

00:00:28,169 --> 00:00:33,450
level of weight and import attributes

00:00:30,380 --> 00:00:35,059
I'm joined today by guy Bedford a guy

00:00:33,450 --> 00:00:37,140
would you like to introduce yourself

00:00:35,059 --> 00:00:40,350
thanks miles

00:00:37,140 --> 00:00:42,110
I I do a lot of open-source work the

00:00:40,350 --> 00:00:44,880
main projects I've been working on our

00:00:42,110 --> 00:00:46,890
assistant is in JSP m and I also do

00:00:44,880 --> 00:00:48,329
software consulting and have

00:00:46,890 --> 00:00:52,670
collaborated with miles quite a bit in

00:00:48,329 --> 00:00:57,770
the past from the J's to tc39 as well

00:00:52,670 --> 00:01:01,110
thanks guy um this session was titled a

00:00:57,770 --> 00:01:04,320
developer fanfiction modules edition

00:01:01,110 --> 00:01:06,259
which was heavily inspired by this kind

00:01:04,320 --> 00:01:08,729
of tongue-in-cheek phrase that I use

00:01:06,259 --> 00:01:11,310
sometimes called developer fanfiction

00:01:08,729 --> 00:01:13,500
which is where like you know either

00:01:11,310 --> 00:01:15,659
people are opening issues or they're

00:01:13,500 --> 00:01:18,540
there kind of like reading speculative

00:01:15,659 --> 00:01:19,770
fiction about what the what the future

00:01:18,540 --> 00:01:22,049
looks like or what they think things

00:01:19,770 --> 00:01:24,720
will be I mean sometimes these are also

00:01:22,049 --> 00:01:27,119
just called future requests but the guy

00:01:24,720 --> 00:01:30,780
and I have been actively working quite a

00:01:27,119 --> 00:01:34,799
lot on the module system in JavaScript

00:01:30,780 --> 00:01:37,680
both like the standards at TC 39 and

00:01:34,799 --> 00:01:39,450
making sure that like the you know the

00:01:37,680 --> 00:01:41,810
fundamental building blocks are there

00:01:39,450 --> 00:01:44,490
and work but also in the platform

00:01:41,810 --> 00:01:47,250
particularly of nodejs to make sure that

00:01:44,490 --> 00:01:49,170
the actual implementation of this is

00:01:47,250 --> 00:01:52,680
something that people can use and this

00:01:49,170 --> 00:01:54,390
ranges from everything from like just

00:01:52,680 --> 00:01:57,770
making sure that that a file can

00:01:54,390 --> 00:02:02,340
actually load based on a specifier to

00:01:57,770 --> 00:02:04,860
examining different formats and what we

00:02:02,340 --> 00:02:07,229
find ourselves rather often actually

00:02:04,860 --> 00:02:10,610
having to write developer fanfiction

00:02:07,229 --> 00:02:13,319
because we consistently run into

00:02:10,610 --> 00:02:17,400
problems that we can't solve the way

00:02:13,319 --> 00:02:19,800
that we expected them to in particular

00:02:17,400 --> 00:02:22,100
you know different runtimes have

00:02:19,800 --> 00:02:24,890
different require

00:02:22,100 --> 00:02:26,690
the browser and node have different

00:02:24,890 --> 00:02:29,120
security models and different

00:02:26,690 --> 00:02:31,580
fundamental infrastructures and even

00:02:29,120 --> 00:02:33,050
newer runtimes like denno have

00:02:31,580 --> 00:02:36,200
completely different requirements

00:02:33,050 --> 00:02:38,330
because for example they aren't bogged

00:02:36,200 --> 00:02:40,610
down by the legacy of node and they're

00:02:38,330 --> 00:02:43,340
able to do you know something like let's

00:02:40,610 --> 00:02:46,130
examine you are a URL based loaders

00:02:43,340 --> 00:02:50,390
rather than you know relying on package

00:02:46,130 --> 00:02:52,340
managers guy do you have any kind of

00:02:50,390 --> 00:02:55,100
insight into some of the places where

00:02:52,340 --> 00:03:01,040
you have found recently you're writing

00:02:55,100 --> 00:03:03,080
some developer fanfiction sure I mean I

00:03:01,040 --> 00:03:05,150
think when you're working in Arkansas

00:03:03,080 --> 00:03:08,390
half the joy of open sources that you

00:03:05,150 --> 00:03:10,160
get to to write this fanfiction so you

00:03:08,390 --> 00:03:12,470
know that's where the excitement is and

00:03:10,160 --> 00:03:14,600
the interest is because we all get to be

00:03:12,470 --> 00:03:16,700
a part of this fuel gets to to build

00:03:14,600 --> 00:03:18,740
these things I mean javascript is is

00:03:16,700 --> 00:03:21,020
quite unique in that way many languages

00:03:18,740 --> 00:03:22,730
they have a sort of a core team that

00:03:21,020 --> 00:03:25,640
decides what the experience of the

00:03:22,730 --> 00:03:28,880
languages or what the how it works in

00:03:25,640 --> 00:03:30,560
all these details and your user of it

00:03:28,880 --> 00:03:32,390
you're a consumer of it and you don't

00:03:30,560 --> 00:03:35,060
get much of a say I mean you can post

00:03:32,390 --> 00:03:36,650
those feature requests but with

00:03:35,060 --> 00:03:38,630
JavaScript there is the core team

00:03:36,650 --> 00:03:41,360
there's tc39 which decides the

00:03:38,630 --> 00:03:44,239
specifications of the language but tc39

00:03:41,360 --> 00:03:47,080
s responsibility doesn't encompass the

00:03:44,239 --> 00:03:49,640
entire usage of the language as you say

00:03:47,080 --> 00:03:51,830
tools like Dino get to decide how they

00:03:49,640 --> 00:03:55,010
want to do things browsers get to decide

00:03:51,830 --> 00:03:56,870
how they want to do things so all around

00:03:55,010 --> 00:03:59,930
as we're using the language we're

00:03:56,870 --> 00:04:01,459
writing this fanfiction and I mean that

00:03:59,930 --> 00:04:05,630
that's exactly you know we were talking

00:04:01,459 --> 00:04:08,450
about earlier today how tools like web

00:04:05,630 --> 00:04:10,959
pack have have led to this explosion of

00:04:08,450 --> 00:04:15,020
where we currently calling faux modules

00:04:10,959 --> 00:04:17,450
that in itself is as a form of fan

00:04:15,020 --> 00:04:20,060
fiction of how tools have been able to

00:04:17,450 --> 00:04:23,570
shape how we use JavaScript and and

00:04:20,060 --> 00:04:26,390
create create those working what it's

00:04:23,570 --> 00:04:27,860
for us was never decided from the top

00:04:26,390 --> 00:04:29,260
yeah it's it's sort of everyone's

00:04:27,860 --> 00:04:32,150
working together to build the language

00:04:29,260 --> 00:04:34,830
yeah faux modules are one of those

00:04:32,150 --> 00:04:36,870
things I find particularly interesting

00:04:34,830 --> 00:04:39,810
in that you know people have been

00:04:36,870 --> 00:04:44,159
writing ESM and I want to kind of say

00:04:39,810 --> 00:04:47,909
ESM for years and I don't mean this in

00:04:44,159 --> 00:04:49,259
like a derogatory way but what is really

00:04:47,909 --> 00:04:53,580
interesting when you're using a tool

00:04:49,259 --> 00:04:55,669
like Babel or a tool like webpack or or

00:04:53,580 --> 00:04:58,470
even typescript to a certain extent to

00:04:55,669 --> 00:05:00,830
write your modules they're going through

00:04:58,470 --> 00:05:04,379
a build phase and that build phase

00:05:00,830 --> 00:05:06,060
allows you to do some fancy things that

00:05:04,379 --> 00:05:07,860
you couldn't do otherwise

00:05:06,060 --> 00:05:10,440
one of the things I find particularly

00:05:07,860 --> 00:05:11,580
interesting is this is a theory of mine

00:05:10,440 --> 00:05:15,110
I don't know that it's true but I

00:05:11,580 --> 00:05:18,810
believe that a lot of people adopted DSM

00:05:15,110 --> 00:05:21,360
rather early simply for wanting

00:05:18,810 --> 00:05:24,509
destructuring which interestingly enough

00:05:21,360 --> 00:05:26,250
named imports is actually a completely

00:05:24,509 --> 00:05:29,940
different feature in the language from

00:05:26,250 --> 00:05:32,310
destructuring regarding how it works

00:05:29,940 --> 00:05:35,419
but looking at the text itself at the

00:05:32,310 --> 00:05:38,940
source text you know like import thing

00:05:35,419 --> 00:05:42,539
embraces from module looks very similar

00:05:38,940 --> 00:05:45,539
to like constant basis thing equals

00:05:42,539 --> 00:05:47,610
require thing that probably would work a

00:05:45,539 --> 00:05:49,080
lot better if I actually had some text

00:05:47,610 --> 00:05:51,870
and perhaps when we edit this all I'll

00:05:49,080 --> 00:05:55,310
add a little writing on top so it's not

00:05:51,870 --> 00:05:57,810
just me waving my hands but like

00:05:55,310 --> 00:05:59,639
obviously there's advantages to code

00:05:57,810 --> 00:06:04,319
splitting and tree shaking that you also

00:05:59,639 --> 00:06:07,199
get from named imports but realistically

00:06:04,319 --> 00:06:13,099
at least in very early versions of Babel

00:06:07,199 --> 00:06:16,409
it wasn't even using the proper

00:06:13,099 --> 00:06:17,639
execution model that ESM specifies it

00:06:16,409 --> 00:06:19,259
was more or less like taking those

00:06:17,639 --> 00:06:21,599
import statements and just converting

00:06:19,259 --> 00:06:23,759
them into require statements and there's

00:06:21,599 --> 00:06:27,330
all these like interesting ways under

00:06:23,759 --> 00:06:29,699
the hood that ESN is subtly different

00:06:27,330 --> 00:06:31,819
than common jeaious that actually has

00:06:29,699 --> 00:06:34,500
made the job in the node.js modules team

00:06:31,819 --> 00:06:36,000
just so much harder trying to figure out

00:06:34,500 --> 00:06:38,069
how to get these environments to play

00:06:36,000 --> 00:06:40,529
nicely because one of the goals that we

00:06:38,069 --> 00:06:43,589
had in node Quora was a ensuring that we

00:06:40,529 --> 00:06:47,520
had spec compliance and then be ensuring

00:06:43,589 --> 00:06:48,190
that you know we don't require any sort

00:06:47,520 --> 00:06:50,410
of transport

00:06:48,190 --> 00:06:52,420
were build step and so if you were using

00:06:50,410 --> 00:06:54,790
Babel or if you're using webpack or if

00:06:52,420 --> 00:06:56,950
you're using typescript um you can do

00:06:54,790 --> 00:06:59,020
something like make a named import from

00:06:56,950 --> 00:07:01,150
a common J's module because you have

00:06:59,020 --> 00:07:04,780
that whole pass where you're compiling

00:07:01,150 --> 00:07:06,970
where you can you know kind of sort all

00:07:04,780 --> 00:07:09,250
this stuff out this is why we call them

00:07:06,970 --> 00:07:10,990
faux modules which in a way and and

00:07:09,250 --> 00:07:12,250
honestly I wasn't thinking about it when

00:07:10,990 --> 00:07:14,560
I when I came up with the title but

00:07:12,250 --> 00:07:16,330
you're totally right is like a fun kind

00:07:14,560 --> 00:07:18,160
of like developer fanfiction from like

00:07:16,330 --> 00:07:19,600
three years ago when people were trying

00:07:18,160 --> 00:07:22,270
to speculate like what does it look like

00:07:19,600 --> 00:07:23,560
to write modules in three years we all

00:07:22,270 --> 00:07:26,320
know we still haven't totally figured

00:07:23,560 --> 00:07:29,230
that out but I think maybe that's like a

00:07:26,320 --> 00:07:31,420
really fun jump into kind of like

00:07:29,230 --> 00:07:34,300
loaders and module types right because

00:07:31,420 --> 00:07:35,980
the specifier when you import a

00:07:34,300 --> 00:07:37,650
specifier and the specifier is like the

00:07:35,980 --> 00:07:39,850
string that you're importing from

00:07:37,650 --> 00:07:42,750
there's so many things that we're used

00:07:39,850 --> 00:07:46,090
to doing but like none of it is actually

00:07:42,750 --> 00:07:48,930
standardized like the idea of like how

00:07:46,090 --> 00:07:52,900
you resolve a specifier into a resource

00:07:48,930 --> 00:07:55,900
yeah it's it's a huge gap and you know

00:07:52,900 --> 00:07:58,330
tc39 goes as far as saying it's a

00:07:55,900 --> 00:08:00,490
strength and then every implementation

00:07:58,330 --> 00:08:01,990
is just like okay well we'll do the

00:08:00,490 --> 00:08:05,020
thing that seemed natural to us to do

00:08:01,990 --> 00:08:07,510
with it but everyone maybe treats it

00:08:05,020 --> 00:08:10,780
slightly differently or nodejs uses file

00:08:07,510 --> 00:08:12,430
pods and browsers use URLs and then

00:08:10,780 --> 00:08:15,490
there's minor differences between those

00:08:12,430 --> 00:08:18,340
those systems and then of course that

00:08:15,490 --> 00:08:22,450
gets onto file extensions which for

00:08:18,340 --> 00:08:24,370
nodejs has been a I mean actually I full

00:08:22,450 --> 00:08:26,260
credit to you miles because I I never

00:08:24,370 --> 00:08:29,800
would have thought that it would have

00:08:26,260 --> 00:08:32,110
been possible to remove the automatic

00:08:29,800 --> 00:08:34,360
file extension adding in node.js and I

00:08:32,110 --> 00:08:35,890
thought that was something that we would

00:08:34,360 --> 00:08:38,620
possibly have to live with this huge

00:08:35,890 --> 00:08:41,050
difference between the platforms but

00:08:38,620 --> 00:08:44,680
somehow in this modules process we

00:08:41,050 --> 00:08:46,450
managed to create the same resolution

00:08:44,680 --> 00:08:49,330
behavior between the browser and digest

00:08:46,450 --> 00:08:53,470
and for when it comes to relative

00:08:49,330 --> 00:08:56,890
specifiers I think getting those kind of

00:08:53,470 --> 00:08:59,920
details rights was so crucial for us to

00:08:56,890 --> 00:09:01,480
try and set up a piece for the language

00:08:59,920 --> 00:09:04,389
where

00:09:01,480 --> 00:09:06,339
and use their code between these

00:09:04,389 --> 00:09:08,440
different environments and not suddenly

00:09:06,339 --> 00:09:11,019
run into a whole bunch of of bugs and

00:09:08,440 --> 00:09:14,320
issues when things don't work between

00:09:11,019 --> 00:09:17,079
these environments and yeah I thought

00:09:14,320 --> 00:09:19,540
that was very very cool we could get

00:09:17,079 --> 00:09:21,250
that out of that process I mean is is

00:09:19,540 --> 00:09:22,630
that something that that you were always

00:09:21,250 --> 00:09:25,320
thinking about in the back of your mind

00:09:22,630 --> 00:09:30,459
that these kind of universal use cases

00:09:25,320 --> 00:09:31,510
yeah yes and no Universal modules or you

00:09:30,459 --> 00:09:33,760
know as some people like to call it

00:09:31,510 --> 00:09:35,649
isomorphic but just the idea that you

00:09:33,760 --> 00:09:37,089
can share code between environments has

00:09:35,649 --> 00:09:39,910
always been like near and dear to my

00:09:37,089 --> 00:09:42,250
heart as someone who like kind of grew

00:09:39,910 --> 00:09:44,800
up in the like paste some JavaScript in

00:09:42,250 --> 00:09:47,139
a browser and it works world these

00:09:44,800 --> 00:09:48,519
specific like changes that we made to

00:09:47,139 --> 00:09:50,380
the node resolution algorithms

00:09:48,519 --> 00:09:52,899
specifically that in nodes eosin

00:09:50,380 --> 00:09:55,540
implementation if you import a module

00:09:52,899 --> 00:09:57,070
you need to have its full file path you

00:09:55,540 --> 00:09:58,990
can't like it will not automatically

00:09:57,070 --> 00:10:02,170
resolve the file extensions and you came

00:09:58,990 --> 00:10:07,660
to import directories that was actually

00:10:02,170 --> 00:10:11,050
inspired by Brad Farias was the one who

00:10:07,660 --> 00:10:13,810
kind of talked me into that and I would

00:10:11,050 --> 00:10:17,370
actually like to tip the hat to demo on

00:10:13,810 --> 00:10:20,980
this a little bit - Ryan's all and I had

00:10:17,370 --> 00:10:23,800
early conversations about this as we

00:10:20,980 --> 00:10:25,569
were designing this in node and Ryan

00:10:23,800 --> 00:10:27,790
pushed forward for you know not

00:10:25,569 --> 00:10:29,709
recreating the node file extension

00:10:27,790 --> 00:10:31,750
resolution and it was actually one of

00:10:29,709 --> 00:10:35,800
like to score points in that like Jas

00:10:31,750 --> 00:10:38,920
caught the Utah kiddo and you know III

00:10:35,800 --> 00:10:43,089
would argue that denno in doing this

00:10:38,920 --> 00:10:44,589
helped pave the path in that like I mean

00:10:43,089 --> 00:10:46,930
back to this kind of fanfiction thing

00:10:44,589 --> 00:10:49,810
not to like not to like drive the point

00:10:46,930 --> 00:10:51,339
home a little too hard but like there

00:10:49,810 --> 00:10:53,680
was a lot of conversation that we had

00:10:51,339 --> 00:10:56,079
about like how would developers respond

00:10:53,680 --> 00:10:58,389
to this like we have this future where

00:10:56,079 --> 00:11:00,839
we're removing this feature and there

00:10:58,389 --> 00:11:03,370
were members of the team who very much

00:11:00,839 --> 00:11:05,260
love that feature still love that whew

00:11:03,370 --> 00:11:08,889
right and think that the shame that we

00:11:05,260 --> 00:11:10,360
lost it and I think you know people come

00:11:08,889 --> 00:11:11,920
to me and they're like you know miles

00:11:10,360 --> 00:11:14,199
what do you think of denno you must hate

00:11:11,920 --> 00:11:15,430
it I'm like no I love JavaScript like

00:11:14,199 --> 00:11:18,190
the more places to play

00:11:15,430 --> 00:11:23,200
the merrier the more environments that

00:11:18,190 --> 00:11:25,750
we have that share similar kind of ethos

00:11:23,200 --> 00:11:28,450
to node in being like preside runtime as

00:11:25,750 --> 00:11:30,520
opposed to a browser first gives us more

00:11:28,450 --> 00:11:33,490
opportunity to think about like

00:11:30,520 --> 00:11:36,880
standardization and correlation across

00:11:33,490 --> 00:11:39,220
runtimes I love the fact that denno

00:11:36,880 --> 00:11:41,380
helped pave the path here and I think

00:11:39,220 --> 00:11:42,850
that there's a number of different

00:11:41,380 --> 00:11:45,100
examples

00:11:42,850 --> 00:11:47,410
we're like having another runtime like

00:11:45,100 --> 00:11:52,540
denno and again one isn't tied to the

00:11:47,410 --> 00:11:54,820
same degree of legacy actually allows us

00:11:52,540 --> 00:11:56,950
to move forward faster the fact that

00:11:54,820 --> 00:11:59,290
denno shipped this and that people were

00:11:56,950 --> 00:12:01,330
not like up in arms was actually

00:11:59,290 --> 00:12:03,160
something we could point to as a reason

00:12:01,330 --> 00:12:04,330
you do it a node and not just that it's

00:12:03,160 --> 00:12:07,450
like hey well like the browser's not

00:12:04,330 --> 00:12:09,040
going to do this and denno is not doing

00:12:07,450 --> 00:12:12,280
this I really think that we shouldn't

00:12:09,040 --> 00:12:13,180
and we were able to get it through one

00:12:12,280 --> 00:12:14,770
of the other ones that's really

00:12:13,180 --> 00:12:16,630
interesting and you started talking

00:12:14,770 --> 00:12:18,100
about it briefly was just kind of in the

00:12:16,630 --> 00:12:20,380
inconsistencies between these

00:12:18,100 --> 00:12:22,540
environments so like node for a long

00:12:20,380 --> 00:12:24,880
time has has had this thing called bear

00:12:22,540 --> 00:12:31,060
inputs and that's where the specifier is

00:12:24,880 --> 00:12:33,130
neither a URL nor a relative path or an

00:12:31,060 --> 00:12:35,320
absolute path it is just a string and

00:12:33,130 --> 00:12:37,230
node has a whole algorithm using

00:12:35,320 --> 00:12:40,600
package.json and the node modules folder

00:12:37,230 --> 00:12:44,020
to German to determine how you turn that

00:12:40,600 --> 00:12:48,490
specifier into a path on disk that you

00:12:44,020 --> 00:12:51,970
can load and you know a future I would

00:12:48,490 --> 00:12:57,300
love to see would be one where you can

00:12:51,970 --> 00:12:59,740
npm install something on your system and

00:12:57,300 --> 00:13:04,350
can you can you hear those sirens right

00:12:59,740 --> 00:13:08,050
now yeah welcome to New York City USA

00:13:04,350 --> 00:13:09,430
home of the sirens it was it was nice

00:13:08,050 --> 00:13:10,810
and dramatic as you were getting to a

00:13:09,430 --> 00:13:13,630
point there I mean I thought it thought

00:13:10,810 --> 00:13:17,050
it worked pretty well well I mean this

00:13:13,630 --> 00:13:18,130
is what happens when you do it live but

00:13:17,050 --> 00:13:21,640
so the point that I was getting at was

00:13:18,130 --> 00:13:24,430
you know browsers don't have any concept

00:13:21,640 --> 00:13:26,950
of bare specifiers at all and this has

00:13:24,430 --> 00:13:28,279
been a challenge like if you npm install

00:13:26,950 --> 00:13:29,749
some module and then you try to

00:13:28,279 --> 00:13:31,459
import it with the browser it's just

00:13:29,749 --> 00:13:33,350
like not gonna work you're gonna have to

00:13:31,459 --> 00:13:35,810
like import the node modules folder and

00:13:33,350 --> 00:13:37,430
if that if that dependency doesn't have

00:13:35,810 --> 00:13:38,600
any dependencies it might work but the

00:13:37,430 --> 00:13:41,329
second you refers to another

00:13:38,600 --> 00:13:44,209
dependencies by a bear import it breaks

00:13:41,329 --> 00:13:45,620
and so there's this technology that is

00:13:44,209 --> 00:13:48,709
in the process of being standardized

00:13:45,620 --> 00:13:49,819
called import maps and guide maybe you

00:13:48,709 --> 00:13:53,870
could tell us a little bit more about

00:13:49,819 --> 00:13:57,559
that yes sir input maps are I mean they

00:13:53,870 --> 00:14:00,470
have come out of like many years of spec

00:13:57,559 --> 00:14:03,259
work and discussion about how you you

00:14:00,470 --> 00:14:06,649
resolve modules in the browser because

00:14:03,259 --> 00:14:08,720
and again it sort of builds on top of

00:14:06,649 --> 00:14:11,720
that base node used case you just

00:14:08,720 --> 00:14:14,059
described where as as a user you just

00:14:11,720 --> 00:14:17,809
want to import the package of the code

00:14:14,059 --> 00:14:19,579
that you're loading and how do we do the

00:14:17,809 --> 00:14:21,319
same kind of thing in the browser how do

00:14:19,579 --> 00:14:24,379
how do we enable the browser to just

00:14:21,319 --> 00:14:26,329
load a package well you don't have to

00:14:24,379 --> 00:14:28,910
necessarily copy and paste a URL look up

00:14:26,329 --> 00:14:30,620
a URL somewhere and then also as you say

00:14:28,910 --> 00:14:32,660
that the dependencies also need to do

00:14:30,620 --> 00:14:34,160
that so this is kind of iterative

00:14:32,660 --> 00:14:38,720
process that I staff and if you want

00:14:34,160 --> 00:14:41,750
things to depend on each other so import

00:14:38,720 --> 00:14:43,129
Maps grew out of what was originally the

00:14:41,750 --> 00:14:44,899
idea that you would have be able to hook

00:14:43,129 --> 00:14:48,279
the result function in the browser and

00:14:44,899 --> 00:14:51,649
then it kind of simplified down into

00:14:48,279 --> 00:14:53,569
let's just have a map and the the

00:14:51,649 --> 00:14:56,110
closest we had to that in the past was

00:14:53,569 --> 00:14:59,000
probably something like the requirejs

00:14:56,110 --> 00:15:00,649
figuration which was an old loader for

00:14:59,000 --> 00:15:03,019
java scripts well you could write this

00:15:00,649 --> 00:15:08,750
map configuration and and point names to

00:15:03,019 --> 00:15:10,550
different target pods and it's in many

00:15:08,750 --> 00:15:12,800
ways quite similar to that in other ways

00:15:10,550 --> 00:15:14,389
it's quite different to that but the

00:15:12,800 --> 00:15:17,089
core principles are the same that you

00:15:14,389 --> 00:15:20,360
you write at this JSON object that has

00:15:17,089 --> 00:15:22,759
an imports field in it and then you can

00:15:20,360 --> 00:15:24,829
just write a dictionary of your packages

00:15:22,759 --> 00:15:27,559
and the URL so they can be found that

00:15:24,829 --> 00:15:29,420
and it also commits sub path mappings

00:15:27,559 --> 00:15:32,629
which is actually a very interesting use

00:15:29,420 --> 00:15:35,540
case as well and touches on on tree

00:15:32,629 --> 00:15:37,009
shaking and features like that but if

00:15:35,540 --> 00:15:40,579
import Maps have been under development

00:15:37,009 --> 00:15:42,110
actually quite a while and still there

00:15:40,579 --> 00:15:43,430
still seems to be a little

00:15:42,110 --> 00:15:45,709
to work out but they're shipping in

00:15:43,430 --> 00:15:49,220
chrome today under the experimental

00:15:45,709 --> 00:15:51,200
webform peaches flank and and I think

00:15:49,220 --> 00:15:53,450
there's there's been a lot of wider

00:15:51,200 --> 00:15:56,209
platform interest in it as well with

00:15:53,450 --> 00:15:58,490
projects like Dino also adopting import

00:15:56,209 --> 00:16:01,760
Maps is the way that they want to use

00:15:58,490 --> 00:16:03,170
their specifiers so just to touch on it

00:16:01,760 --> 00:16:06,140
briefly

00:16:03,170 --> 00:16:09,500
both Dino and Lou jeaious now use your

00:16:06,140 --> 00:16:12,079
ELLs in their module systems like the

00:16:09,500 --> 00:16:14,420
browser and so import Maps naturally

00:16:12,079 --> 00:16:15,740
will have the same semantics when when

00:16:14,420 --> 00:16:18,470
applied in all these environments which

00:16:15,740 --> 00:16:22,100
i think is very cool yeah and one of the

00:16:18,470 --> 00:16:24,890
things that we adopted in node and our

00:16:22,100 --> 00:16:26,690
ESM implementation and I believe that

00:16:24,890 --> 00:16:29,000
this started as a proposal from Yann

00:16:26,690 --> 00:16:30,500
cremes but you can correct me if I know

00:16:29,000 --> 00:16:31,730
you were actively involved some other

00:16:30,500 --> 00:16:35,120
people were actively involved but I

00:16:31,730 --> 00:16:37,070
think again yawns proposal and I mean

00:16:35,120 --> 00:16:41,300
but lots of discussion goes into these

00:16:37,070 --> 00:16:43,100
things of course so it's called package

00:16:41,300 --> 00:16:44,810
exports and it's a new field in the

00:16:43,100 --> 00:16:48,110
package.json called exports where you

00:16:44,810 --> 00:16:50,899
can define the external interface for

00:16:48,110 --> 00:16:53,959
your package so you know you're probably

00:16:50,899 --> 00:16:56,510
used to putting in a main or a browser

00:16:53,959 --> 00:16:58,459
field when you're writing a package

00:16:56,510 --> 00:17:00,110
that's going to be consumed the

00:16:58,459 --> 00:17:02,029
algorithm that node has when you like

00:17:00,110 --> 00:17:03,680
you know import lodash as it goes into

00:17:02,029 --> 00:17:06,380
the node module folder it looks for a

00:17:03,680 --> 00:17:07,910
folder with the name of the specifier it

00:17:06,380 --> 00:17:09,530
looks for its active JSON and then it

00:17:07,910 --> 00:17:12,290
looks for me this is something that's

00:17:09,530 --> 00:17:13,669
actually specified in our communication

00:17:12,290 --> 00:17:17,030
you could look it up and look at how the

00:17:13,669 --> 00:17:18,799
resolution algorithm works you know it's

00:17:17,030 --> 00:17:20,780
fun for me maybe not for you I don't

00:17:18,799 --> 00:17:23,839
know I like reading specs sometimes no

00:17:20,780 --> 00:17:25,549
package exports without them you can

00:17:23,839 --> 00:17:27,620
kind of like deeply traverse into a

00:17:25,549 --> 00:17:29,990
module and grab any file from anywhere

00:17:27,620 --> 00:17:33,169
in the module with package exports

00:17:29,990 --> 00:17:35,840
you're able to define that interface so

00:17:33,169 --> 00:17:38,870
you can say you know like slash dot

00:17:35,840 --> 00:17:40,309
slash deep module and have a path to it

00:17:38,870 --> 00:17:42,169
and when someone imports your module

00:17:40,309 --> 00:17:44,540
slash deep module like it will resolve

00:17:42,169 --> 00:17:47,870
into that the part of the reason why

00:17:44,540 --> 00:17:49,910
this is so powerful beyond just the fact

00:17:47,870 --> 00:17:51,590
that it's cool till I kind of have this

00:17:49,910 --> 00:17:53,630
public private interface for your

00:17:51,590 --> 00:17:55,789
package which is a great programming as

00:17:53,630 --> 00:17:58,159
well is that it makes every single

00:17:55,789 --> 00:18:00,259
specifier within a module assuming that

00:17:58,159 --> 00:18:03,379
you're writing it this way absolutely

00:18:00,259 --> 00:18:05,989
static and this is something that plays

00:18:03,379 --> 00:18:08,179
really nicely into import Maps so what

00:18:05,989 --> 00:18:11,929
it means is that anyone who's consuming

00:18:08,179 --> 00:18:14,749
your package and specifies something we

00:18:11,929 --> 00:18:16,879
can like completely statically resolved

00:18:14,749 --> 00:18:19,249
the path of all of those specifiers and

00:18:16,879 --> 00:18:20,840
internally in your module as well all of

00:18:19,249 --> 00:18:23,600
the specifiers that you write are also

00:18:20,840 --> 00:18:26,149
statically resolvable now now this is

00:18:23,600 --> 00:18:28,159
making the assumption of course that you

00:18:26,149 --> 00:18:30,859
are writing a tree that is all ESM were

00:18:28,159 --> 00:18:32,570
written in a like a sub a sub set of

00:18:30,859 --> 00:18:34,129
common j s this is something you

00:18:32,570 --> 00:18:36,229
probably can lint for and it's a way in

00:18:34,129 --> 00:18:38,539
which like npm or other package managers

00:18:36,229 --> 00:18:41,179
can likely give extra signal that

00:18:38,539 --> 00:18:43,609
packages are written this way but the

00:18:41,179 --> 00:18:45,440
magic of it is if you had a tree in the

00:18:43,609 --> 00:18:48,529
future so now I'm doing my speculative

00:18:45,440 --> 00:18:50,570
fiction and sound by the eviction yeah

00:18:48,529 --> 00:18:51,830
yeah but but in like five years let's

00:18:50,570 --> 00:18:53,389
say you have a tree where all the

00:18:51,830 --> 00:18:56,989
modules has the have this package

00:18:53,389 --> 00:18:59,470
exports field identified another tool at

00:18:56,989 --> 00:19:02,179
install time could go through and

00:18:59,470 --> 00:19:06,619
completely generate an import map for

00:19:02,179 --> 00:19:08,619
you from your node modules tree and the

00:19:06,619 --> 00:19:10,940
exports map also has this one called

00:19:08,619 --> 00:19:12,710
conditional exports where for each entry

00:19:10,940 --> 00:19:14,779
point you can specify an export for a

00:19:12,710 --> 00:19:17,749
particular run times so you could at

00:19:14,779 --> 00:19:19,940
install time generate like a browser

00:19:17,749 --> 00:19:22,190
import map or a node import map and then

00:19:19,940 --> 00:19:24,619
you could have the exact same generic

00:19:22,190 --> 00:19:26,539
node modules folder completely static no

00:19:24,619 --> 00:19:28,669
translation and have different code

00:19:26,539 --> 00:19:30,830
paths depending on the import map that

00:19:28,669 --> 00:19:32,570
you're using and this is something that

00:19:30,830 --> 00:19:34,460
there's an awesome tool out there right

00:19:32,570 --> 00:19:36,139
now called snow pack it's part of the

00:19:34,460 --> 00:19:39,320
picker project that's done by fred shot

00:19:36,139 --> 00:19:40,729
that is experimenting a lot with i mean

00:19:39,320 --> 00:19:42,440
they are doing translation and they're

00:19:40,729 --> 00:19:44,149
making a new folder called the browser

00:19:42,440 --> 00:19:45,440
folder and like they've gone in a

00:19:44,149 --> 00:19:47,029
slightly different direction but they

00:19:45,440 --> 00:19:49,039
are playing with tools that can generate

00:19:47,029 --> 00:19:50,960
import maps they are playing with import

00:19:49,039 --> 00:19:52,580
maps as a way of allowing for bear

00:19:50,960 --> 00:19:54,830
specifiers inside of the browser and

00:19:52,580 --> 00:19:58,340
it's really cool kind of seeing these

00:19:54,830 --> 00:19:59,779
kind of tools in a way writing kind of

00:19:58,340 --> 00:20:02,980
their fanfiction of what they'd like to

00:19:59,779 --> 00:20:06,859
see the future of web development be

00:20:02,980 --> 00:20:08,690
yeah it's it's it's a very very

00:20:06,859 --> 00:20:12,080
compelling use case

00:20:08,690 --> 00:20:14,090
to be able to see the style of package

00:20:12,080 --> 00:20:18,680
management for to the browser and I

00:20:14,090 --> 00:20:20,060
think it was it was amazing that so as

00:20:18,680 --> 00:20:21,770
we were working through some of these

00:20:20,060 --> 00:20:25,490
problems in the node.js modules group

00:20:21,770 --> 00:20:28,250
that we were able to look slightly wider

00:20:25,490 --> 00:20:29,690
than OGS again and and look at import

00:20:28,250 --> 00:20:31,520
Maps and see what was going on there

00:20:29,690 --> 00:20:34,940
because I mean when we were discussing

00:20:31,520 --> 00:20:38,990
this in the original phase of the

00:20:34,940 --> 00:20:40,820
modules meetings import maps were still

00:20:38,990 --> 00:20:41,840
relatively new I mean that they they're

00:20:40,820 --> 00:20:44,870
I think they're much more widely

00:20:41,840 --> 00:20:47,000
understood today but we were very much

00:20:44,870 --> 00:20:50,000
sort of having to keep an eye on on

00:20:47,000 --> 00:20:51,710
these new technologies and and then try

00:20:50,000 --> 00:20:53,420
and come up with with something that was

00:20:51,710 --> 00:20:56,180
compatible with it and what's very cool

00:20:53,420 --> 00:20:58,640
about exports is if we ended up

00:20:56,180 --> 00:21:02,150
designing it in a way that it works

00:20:58,640 --> 00:21:04,940
quite naturally with import Maps the way

00:21:02,150 --> 00:21:07,730
you define your package boundary in your

00:21:04,940 --> 00:21:10,970
package JSON with this export field very

00:21:07,730 --> 00:21:12,290
naturally works with the same way that

00:21:10,970 --> 00:21:14,720
you would want to define the input map

00:21:12,290 --> 00:21:17,210
for that package and sort of have the

00:21:14,720 --> 00:21:19,940
converse of import and export so one is

00:21:17,210 --> 00:21:22,160
the how the package defines itself to be

00:21:19,940 --> 00:21:24,260
consumed and then the informatic is how

00:21:22,160 --> 00:21:28,820
you as the consumer are consuming

00:21:24,260 --> 00:21:31,550
packages and the encapsulation was such

00:21:28,820 --> 00:21:33,290
a huge feature as well again I I'm I

00:21:31,550 --> 00:21:35,750
with these kinds of things I never quite

00:21:33,290 --> 00:21:37,820
know who to credit because these the

00:21:35,750 --> 00:21:40,730
ideas get dropped in and you never know

00:21:37,820 --> 00:21:42,320
quite who is is is behind them and I

00:21:40,730 --> 00:21:44,540
guess when you think these things

00:21:42,320 --> 00:21:46,370
through ice always to imagine it's one

00:21:44,540 --> 00:21:47,900
one's own idea but you know we were all

00:21:46,370 --> 00:21:51,380
discussing these things and things get

00:21:47,900 --> 00:21:53,930
really mixed up as far as I'm aware it

00:21:51,380 --> 00:21:56,960
was Rob Palma was was the original

00:21:53,930 --> 00:22:00,860
producer of the exports encapsulation in

00:21:56,960 --> 00:22:04,240
really yeah and one day they've been

00:22:00,860 --> 00:22:07,130
using something similar at Bloomberg and

00:22:04,240 --> 00:22:09,170
so that they they valued encapsulation

00:22:07,130 --> 00:22:12,200
and and valued in their internal

00:22:09,170 --> 00:22:13,760
workflows I mean certainly correct me if

00:22:12,200 --> 00:22:16,990
I'm wrong but this is as much as I've

00:22:13,760 --> 00:22:20,080
been able to glean from the process and

00:22:16,990 --> 00:22:22,090
that that encapsulation is huge because

00:22:20,080 --> 00:22:24,900
normally when you publish a package

00:22:22,090 --> 00:22:26,890
to OPM you change one internal module

00:22:24,900 --> 00:22:28,720
maybe you didn't realize that that a

00:22:26,890 --> 00:22:32,880
user was importing that module and

00:22:28,720 --> 00:22:35,140
relying on its interface so it really

00:22:32,880 --> 00:22:36,850
makes that package boundary very well

00:22:35,140 --> 00:22:39,400
defined and also that enables

00:22:36,850 --> 00:22:42,669
optimizations which is cool because now

00:22:39,400 --> 00:22:46,090
you could optimize that package and you

00:22:42,669 --> 00:22:48,520
can load your files you could you could

00:22:46,090 --> 00:22:50,620
be removing all the exports and doing

00:22:48,520 --> 00:22:53,710
tree shaking like optimizations to the

00:22:50,620 --> 00:22:55,000
package exports field and that's

00:22:53,710 --> 00:22:57,100
something that I've been exploring

00:22:55,000 --> 00:22:59,950
recently with with the latest release of

00:22:57,100 --> 00:23:03,309
JSP M is how we can how we can optimize

00:22:59,950 --> 00:23:04,480
this this exports field and and what it

00:23:03,309 --> 00:23:08,260
does at the moment is it actually

00:23:04,480 --> 00:23:10,600
automatically treats all of the

00:23:08,260 --> 00:23:12,070
definitions in the exports field as the

00:23:10,600 --> 00:23:14,350
entry points of the package in a rollup

00:23:12,070 --> 00:23:17,020
code splitting both as a code splitting

00:23:14,350 --> 00:23:18,610
world and then you get the chunking and

00:23:17,020 --> 00:23:22,179
the code sharing and the minimum number

00:23:18,610 --> 00:23:23,860
of modules but it's part of your actual

00:23:22,179 --> 00:23:27,309
package management process so it's sort

00:23:23,860 --> 00:23:28,899
of a host becomes an implicit build

00:23:27,309 --> 00:23:30,429
process it's no longer something you

00:23:28,899 --> 00:23:32,320
have to define that the configuration

00:23:30,429 --> 00:23:34,270
for the build yourself you don't have to

00:23:32,320 --> 00:23:36,490
roll up a web back and say I'm building

00:23:34,270 --> 00:23:38,260
these files you can automatically try

00:23:36,490 --> 00:23:38,950
and optimize those individual packages

00:23:38,260 --> 00:23:41,350
you rich

00:23:38,950 --> 00:23:44,049
I think another step as we try and get

00:23:41,350 --> 00:23:46,360
these individual package import Maps

00:23:44,049 --> 00:23:49,059
running in the browser very much like

00:23:46,360 --> 00:23:50,830
smart bundles yeah and doing it

00:23:49,059 --> 00:23:52,390
automatically based on the information

00:23:50,830 --> 00:23:54,520
because the exports is exactly the

00:23:52,390 --> 00:23:56,320
information you need to know to be able

00:23:54,520 --> 00:23:58,960
to optimize the interface of a package

00:23:56,320 --> 00:24:00,520
so there's this I mean there's lots of

00:23:58,960 --> 00:24:04,539
interesting tooling that can build on

00:24:00,520 --> 00:24:06,909
top of that field and this is yeah I

00:24:04,539 --> 00:24:08,169
think a great success of that process

00:24:06,909 --> 00:24:09,220
that field because I never would have

00:24:08,169 --> 00:24:10,870
imagined that it would have been

00:24:09,220 --> 00:24:12,309
possible to ship it all right I never

00:24:10,870 --> 00:24:15,820
would have imagined for posting it

00:24:12,309 --> 00:24:17,559
personally so very very nice to see that

00:24:15,820 --> 00:24:20,230
out of this process we could these

00:24:17,559 --> 00:24:21,970
things could emerge I guess like one of

00:24:20,230 --> 00:24:24,580
the biggest differences and I think

00:24:21,970 --> 00:24:26,080
we're getting close to time sure you

00:24:24,580 --> 00:24:27,190
have some closing thoughts but one of

00:24:26,080 --> 00:24:29,470
the things I think is rather interesting

00:24:27,190 --> 00:24:33,070
is that if you look at the way the

00:24:29,470 --> 00:24:35,170
people have been writing like kind of

00:24:33,070 --> 00:24:36,520
JavaScript module systems

00:24:35,170 --> 00:24:39,490
the last couple years they were all

00:24:36,520 --> 00:24:43,240
quite dynamic and one of the like real

00:24:39,490 --> 00:24:46,060
advantages that ESM has in my personal

00:24:43,240 --> 00:24:48,790
opinion over like you know commonjs

00:24:46,060 --> 00:24:51,340
is the fact that it is a static module

00:24:48,790 --> 00:24:53,200
system it has these phases you can do

00:24:51,340 --> 00:24:54,760
this kind of like introspection and

00:24:53,200 --> 00:24:57,190
smart things with it because of its

00:24:54,760 --> 00:24:58,570
static nature and I feel like these

00:24:57,190 --> 00:24:59,980
various technologies that we've been

00:24:58,570 --> 00:25:03,760
talking about have been kind of like

00:24:59,980 --> 00:25:05,950
leaning in to the fact that it's static

00:25:03,760 --> 00:25:11,500
we're talking about all the various like

00:25:05,950 --> 00:25:13,600
static like kind of like metadata to a

00:25:11,500 --> 00:25:17,080
certain extent but but you know like

00:25:13,600 --> 00:25:19,480
unlike node unlike browserify unlike

00:25:17,080 --> 00:25:21,880
babble which had all these kind of

00:25:19,480 --> 00:25:24,970
dynamic build steps which if you if you

00:25:21,880 --> 00:25:28,330
need a bundler like at the point I kind

00:25:24,970 --> 00:25:31,030
of I gave a talk last year and I talked

00:25:28,330 --> 00:25:32,830
about like nihilistic transformation and

00:25:31,030 --> 00:25:35,200
it's kind of like this idea that like

00:25:32,830 --> 00:25:37,480
once you have to have a transformation

00:25:35,200 --> 00:25:40,120
step it's already dynamic so you may as

00:25:37,480 --> 00:25:42,100
well just like just keep strapping

00:25:40,120 --> 00:25:44,100
things on to it but when we start from

00:25:42,100 --> 00:25:46,750
this like kind of static core and add

00:25:44,100 --> 00:25:50,890
you know kind of more static insight

00:25:46,750 --> 00:25:54,040
we're ending up with this like kind of

00:25:50,890 --> 00:25:57,250
really nice result as you're saying

00:25:54,040 --> 00:26:00,070
we're like we can implicitly determine

00:25:57,250 --> 00:26:02,200
all of these things because of the

00:26:00,070 --> 00:26:04,810
static nature of it and end up with

00:26:02,200 --> 00:26:06,400
something that is much more flexible and

00:26:04,810 --> 00:26:08,170
my personal one and I think what it

00:26:06,400 --> 00:26:11,590
comes down to as well as is making it

00:26:08,170 --> 00:26:15,220
well at least trying to and in this in

00:26:11,590 --> 00:26:17,980
this eventual goal you know we're trying

00:26:15,220 --> 00:26:19,780
to make it easier for users to so

00:26:17,980 --> 00:26:22,900
optimize their packages easier for users

00:26:19,780 --> 00:26:27,610
to configure their built systems and try

00:26:22,900 --> 00:26:29,470
and like in lots of ways the complexity

00:26:27,610 --> 00:26:32,430
around javascript tooling and stuff has

00:26:29,470 --> 00:26:34,900
been the sort of K Brehon explosion of

00:26:32,430 --> 00:26:38,980
you know methods and ways of doing

00:26:34,900 --> 00:26:40,750
things and they're they're both benefits

00:26:38,980 --> 00:26:42,370
and costs to that and and if the

00:26:40,750 --> 00:26:44,890
benefits have been huge and exploring

00:26:42,370 --> 00:26:46,480
all these different workflows but but

00:26:44,890 --> 00:26:47,530
maybe now we're moving into a phase

00:26:46,480 --> 00:26:48,970
where there's a little bit more

00:26:47,530 --> 00:26:50,320
consolidation between two

00:26:48,970 --> 00:26:53,049
I mean we've been having discussions

00:26:50,320 --> 00:26:54,610
with Tobias on webpack and we've been

00:26:53,049 --> 00:26:57,159
having discussions with rollup and we've

00:26:54,610 --> 00:26:59,110
kind of been bridging bridging a little

00:26:57,159 --> 00:27:01,929
bit more between tools and and trying to

00:26:59,110 --> 00:27:03,340
build conventions that can that can

00:27:01,929 --> 00:27:06,730
allow things to be a little bit more

00:27:03,340 --> 00:27:08,350
implicit and and put less overhead on

00:27:06,730 --> 00:27:10,090
the user to get every exact

00:27:08,350 --> 00:27:13,960
configuration right and I think that's

00:27:10,090 --> 00:27:16,840
the hope was that it's still a lot of

00:27:13,960 --> 00:27:20,110
work to go certainly yeah I guess a

00:27:16,840 --> 00:27:21,850
closing thought for me I used to work at

00:27:20,110 --> 00:27:23,980
this startup and and one of the the

00:27:21,850 --> 00:27:26,169
claims was this concept of a short time

00:27:23,980 --> 00:27:27,909
- Wow and when I think about like what I

00:27:26,169 --> 00:27:29,559
loved about web technologies I don't

00:27:27,909 --> 00:27:31,690
come from a traditional background the

00:27:29,559 --> 00:27:34,450
thing about the web and the browser and

00:27:31,690 --> 00:27:36,400
JavaScript in particular which like

00:27:34,450 --> 00:27:39,820
enabled and empowered me was just that

00:27:36,400 --> 00:27:42,880
like it was so intuitive and quick to

00:27:39,820 --> 00:27:45,940
get started and I feel like we as an

00:27:42,880 --> 00:27:48,580
ecosystem have had to layer on a lot of

00:27:45,940 --> 00:27:50,860
complexity to like allow for advance

00:27:48,580 --> 00:27:52,750
productivity but the result is that

00:27:50,860 --> 00:27:54,549
we've lost a lot of that short term -

00:27:52,750 --> 00:27:56,289
Wow and I know that we're talking here

00:27:54,549 --> 00:27:57,970
about a lot of like kind of you know

00:27:56,289 --> 00:27:59,289
it's not nothing all these extra

00:27:57,970 --> 00:28:02,080
technologies that we're talking about

00:27:59,289 --> 00:28:04,360
but I do really hope that in like three

00:28:02,080 --> 00:28:07,030
years in four years a lot of these can

00:28:04,360 --> 00:28:09,580
be baked and I'm kind of generated

00:28:07,030 --> 00:28:11,530
enough that we can get back to that kind

00:28:09,580 --> 00:28:15,220
of thing where it's like hey like here's

00:28:11,530 --> 00:28:17,500
a link and now I'm going again and and

00:28:15,220 --> 00:28:20,710
I'm personally just like really excited

00:28:17,500 --> 00:28:23,530
for that future so guys thank you so

00:28:20,710 --> 00:28:26,220
much for joining me today and

00:28:23,530 --> 00:28:29,500
participating in there thanks - yeah and

00:28:26,220 --> 00:28:31,059
to everyone who is tuned in thank you so

00:28:29,500 --> 00:28:35,210
much for watching and we'll be around

00:28:31,059 --> 00:28:37,270
for questions in a bit have a good one

00:28:35,210 --> 00:28:37,270

YouTube URL: https://www.youtube.com/watch?v=HHoMq2IZLxg


