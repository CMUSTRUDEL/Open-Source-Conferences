Title: Modern JavaScript Infrastructures - MaeÌˆl Nison, Datadog
Publication date: 2020-06-18
Playlist: OpenJS World 2020
Description: 
	
Captions: 
	00:00:01,580 --> 00:00:05,490
hi everyone I'm incredibly excited to be

00:00:04,680 --> 00:00:07,770
here

00:00:05,490 --> 00:00:09,630
my name is Mel and today we are going to

00:00:07,770 --> 00:00:11,790
talk a bit about fronting infrastructure

00:00:09,630 --> 00:00:14,160
which is something I've worked on on for

00:00:11,790 --> 00:00:15,809
the past few years more specifically

00:00:14,160 --> 00:00:18,600
we'll start by discussing what it

00:00:15,809 --> 00:00:20,520
actually is then go over its core parts

00:00:18,600 --> 00:00:22,590
and finally we'll get a more abstract

00:00:20,520 --> 00:00:23,730
discussion about how to be efficient

00:00:22,590 --> 00:00:25,470
when you're part of a frontal

00:00:23,730 --> 00:00:27,960
infrastructure team which can be

00:00:25,470 --> 00:00:29,609
surprisingly tricky my hope is that by

00:00:27,960 --> 00:00:31,740
the end of this talk we'll have a better

00:00:29,609 --> 00:00:35,280
idea of how to improve the heat tooling

00:00:31,740 --> 00:00:36,930
you actually use every day so the first

00:00:35,280 --> 00:00:38,250
question we should ask ourselves before

00:00:36,930 --> 00:00:40,770
going further is what is actually

00:00:38,250 --> 00:00:42,390
fronting in front we all have this

00:00:40,770 --> 00:00:44,760
picture of infrastructure being

00:00:42,390 --> 00:00:47,520
maintaining Network edges kubernetes

00:00:44,760 --> 00:00:49,610
clouds sometimes data centers so what

00:00:47,520 --> 00:00:51,570
does it mean in the context of firms up

00:00:49,610 --> 00:00:53,430
front an infrastructure is about

00:00:51,570 --> 00:00:55,590
building the platform that will leverage

00:00:53,430 --> 00:00:57,329
your developers strengths it's about

00:00:55,590 --> 00:01:00,420
giving them the tools to focus on the

00:00:57,329 --> 00:01:02,250
core proposition of your project rotten

00:01:00,420 --> 00:01:04,229
infra is made up of two equally

00:01:02,250 --> 00:01:05,939
important pieces they aren't even three

00:01:04,229 --> 00:01:08,760
but we'll come to that later in the

00:01:05,939 --> 00:01:11,070
abstract part the first piece is

00:01:08,760 --> 00:01:12,600
developer experience how do we make it

00:01:11,070 --> 00:01:14,430
so that on jaian ears don't have to

00:01:12,600 --> 00:01:16,830
spend their time tweaking the tooling

00:01:14,430 --> 00:01:19,170
that we use B to webpack yes lean Babel

00:01:16,830 --> 00:01:22,110
time strip jest or any other tool we

00:01:19,170 --> 00:01:24,689
fancy how can we let them fix bugs and

00:01:22,110 --> 00:01:27,240
develop new features as fast as they can

00:01:24,689 --> 00:01:29,520
so that's the first piece but it's not

00:01:27,240 --> 00:01:32,369
the whole story an equally important

00:01:29,520 --> 00:01:33,930
part lies in stability how can we make

00:01:32,369 --> 00:01:36,329
sure that front-end developers don't

00:01:33,930 --> 00:01:37,799
have to worry about their changes how

00:01:36,329 --> 00:01:39,450
can we be confident that the next

00:01:37,799 --> 00:01:41,460
deployment work just as well as the

00:01:39,450 --> 00:01:42,630
previous one you need to have strong

00:01:41,460 --> 00:01:44,850
answers to both of these questions

00:01:42,630 --> 00:01:46,770
because otherwise we'll eventually run

00:01:44,850 --> 00:01:49,680
into a wall which is never a great

00:01:46,770 --> 00:01:51,630
experience first let's talk about the

00:01:49,680 --> 00:01:53,159
developer experience there's a lot to

00:01:51,630 --> 00:01:56,579
say about it but today we are going to

00:01:53,159 --> 00:01:59,490
focus on three core axes automation

00:01:56,579 --> 00:02:04,049
something that I call crawling go and

00:01:59,490 --> 00:02:05,700
the iteration spinning automation is

00:02:04,049 --> 00:02:07,680
about decreasing the cognitive

00:02:05,700 --> 00:02:11,250
complexity of developers turn your

00:02:07,680 --> 00:02:12,930
project making it very approachable be

00:02:11,250 --> 00:02:13,950
it an open source project which often

00:02:12,930 --> 00:02:16,440
needs external

00:02:13,950 --> 00:02:18,540
users to survive or accompany product

00:02:16,440 --> 00:02:21,780
which on boards new developers every

00:02:18,540 --> 00:02:23,519
year Paris even month awakes automating

00:02:21,780 --> 00:02:25,620
processes decreases the amount of

00:02:23,519 --> 00:02:27,510
knowledge that one has to have before

00:02:25,620 --> 00:02:29,900
being productive and makes it much

00:02:27,510 --> 00:02:32,700
easier to evolve procedures on the time

00:02:29,900 --> 00:02:34,349
to reach this perfect onboarding state

00:02:32,700 --> 00:02:36,599
the first rule is to make sure that

00:02:34,349 --> 00:02:38,849
workflows only require an as few

00:02:36,599 --> 00:02:40,590
commands as possible if installing a

00:02:38,849 --> 00:02:42,599
repository requires to first setup the

00:02:40,590 --> 00:02:44,129
database important fixtures build the

00:02:42,599 --> 00:02:46,410
templates and finally stop the dev

00:02:44,129 --> 00:02:48,900
server then why not abstract it order a

00:02:46,410 --> 00:02:51,120
single image and start cutting you can

00:02:48,900 --> 00:02:52,620
even have a fee nice visual interface to

00:02:51,120 --> 00:02:54,810
see the very step that the script is

00:02:52,620 --> 00:02:56,160
playing at if you want to the point is

00:02:54,810 --> 00:02:59,640
it needs to be dead simple

00:02:56,160 --> 00:03:01,380
there's just no reason nowadays to gauge

00:02:59,640 --> 00:03:02,760
working on the product behind the

00:03:01,380 --> 00:03:05,040
technical implementation of your

00:03:02,760 --> 00:03:09,209
infrastructure you shouldn't assume that

00:03:05,040 --> 00:03:10,950
people will know how to use it the

00:03:09,209 --> 00:03:12,720
second rule of automation is that you're

00:03:10,950 --> 00:03:15,090
in front needs to be the source of truth

00:03:12,720 --> 00:03:18,389
we have so many great tools today we

00:03:15,090 --> 00:03:20,100
should use them we can enforce a common

00:03:18,389 --> 00:03:22,049
formatting with pressure we can validate

00:03:20,100 --> 00:03:23,760
the semantics of your code with

00:03:22,049 --> 00:03:26,280
transcripts we can check for dangerous

00:03:23,760 --> 00:03:28,530
patterns which yes fit my point is that

00:03:26,280 --> 00:03:30,590
we can and we should automate as much as

00:03:28,530 --> 00:03:33,150
possible the detection of most problems

00:03:30,590 --> 00:03:35,549
first it makes sure that whatever lens

00:03:33,150 --> 00:03:37,889
in master is right by your standards

00:03:35,549 --> 00:03:39,750
but it also makes it much easier for any

00:03:37,889 --> 00:03:41,730
new contributor to jump to the call

00:03:39,750 --> 00:03:45,600
knowing that if anything's wrong

00:03:41,730 --> 00:03:47,730
the system will catch it this slide is

00:03:45,600 --> 00:03:49,350
an example of what we do in Europe we

00:03:47,730 --> 00:03:51,480
have a dedicated get of action that

00:03:49,350 --> 00:03:54,359
simply runs all the sanity tests we can

00:03:51,480 --> 00:03:55,139
think of some are very basic some are

00:03:54,359 --> 00:03:57,420
more complex

00:03:55,139 --> 00:03:59,730
some are security checks some are

00:03:57,420 --> 00:04:01,709
linting not one of them run every time

00:03:59,730 --> 00:04:04,380
only if they are actually relevant to

00:04:01,709 --> 00:04:06,090
the changes but in general the idea is

00:04:04,380 --> 00:04:08,250
that they can catch a good deal of the

00:04:06,090 --> 00:04:10,709
problems you might head into while

00:04:08,250 --> 00:04:12,510
working on your pull requests and on top

00:04:10,709 --> 00:04:15,000
of that they also indicate to you how to

00:04:12,510 --> 00:04:17,280
fit them no that's only the first

00:04:15,000 --> 00:04:19,500
iteration and we are still working on it

00:04:17,280 --> 00:04:21,989
so the next evolution will be to

00:04:19,500 --> 00:04:24,360
automatically fix the problem as much as

00:04:21,989 --> 00:04:26,970
possible for example in case of

00:04:24,360 --> 00:04:27,750
conflicts it might be to run your cell

00:04:26,970 --> 00:04:30,060
in order to

00:04:27,750 --> 00:04:33,570
we merge them or do the magic a fix them

00:04:30,060 --> 00:04:38,190
or it can be to run es lien to apply the

00:04:33,570 --> 00:04:40,800
faces anyway let's continue with Claude

00:04:38,190 --> 00:04:42,450
and go so I use this term to explain

00:04:40,800 --> 00:04:45,030
that we want developers to be able to

00:04:42,450 --> 00:04:47,730
just jump to the project and be

00:04:45,030 --> 00:04:49,140
immediately productive as you can see

00:04:47,730 --> 00:04:51,330
it's a direct follow-up to what we

00:04:49,140 --> 00:04:52,410
discussed with automation but it a

00:04:51,330 --> 00:04:55,080
really good father

00:04:52,410 --> 00:04:57,660
where automation means that we want to

00:04:55,080 --> 00:04:59,880
execute card without user interaction

00:04:57,660 --> 00:05:03,000
Cronan go means that we don't actually

00:04:59,880 --> 00:05:04,650
want to execute god at home the ideal

00:05:03,000 --> 00:05:06,690
prototype should allow you to start

00:05:04,650 --> 00:05:09,540
running basic color like build on tests

00:05:06,690 --> 00:05:11,760
as soon as we sit into it and if as

00:05:09,540 --> 00:05:13,919
somebody's missing it should explicitly

00:05:11,760 --> 00:05:15,840
tell you how to fix it without you

00:05:13,919 --> 00:05:18,450
having to read the 10-foot load internal

00:05:15,840 --> 00:05:21,840
documentation that got outdated three

00:05:18,450 --> 00:05:24,630
weeks after being written interestingly

00:05:21,840 --> 00:05:26,669
trongo goes even farther than the card

00:05:24,630 --> 00:05:28,460
itself because the exact same thing can

00:05:26,669 --> 00:05:31,440
be said about the editor tooling of

00:05:28,460 --> 00:05:34,500
course everyone in your company as their

00:05:31,440 --> 00:05:36,690
favorite editor but usually you can find

00:05:34,500 --> 00:05:39,450
the top three and perhaps even the top

00:05:36,690 --> 00:05:41,610
one in certain cases most of those IDs

00:05:39,450 --> 00:05:43,110
now offer the ability to store project

00:05:41,610 --> 00:05:46,169
settings directly within the repository

00:05:43,110 --> 00:05:48,630
and by leveraging this you can be sure

00:05:46,169 --> 00:05:51,300
that everyone's on the same page whether

00:05:48,630 --> 00:05:53,430
use editor config crate your ears lint

00:05:51,300 --> 00:05:54,900
all those extensions critical to the

00:05:53,430 --> 00:05:57,060
developer experience can now be

00:05:54,900 --> 00:06:00,270
configured with the same for everyone of

00:05:57,060 --> 00:06:02,220
course you won't want to store a user

00:06:00,270 --> 00:06:04,830
settings here like the font of the

00:06:02,220 --> 00:06:07,050
editor theme but offer everything

00:06:04,830 --> 00:06:09,090
absolutely required for a good developer

00:06:07,050 --> 00:06:13,200
experience it really makes sense to ship

00:06:09,090 --> 00:06:14,520
it out of the box finally Cronan go is

00:06:13,200 --> 00:06:17,340
something we really took into account

00:06:14,520 --> 00:06:18,510
when designing yon two in the past the

00:06:17,340 --> 00:06:20,850
war flow when switching from a

00:06:18,510 --> 00:06:22,530
JavaScript project branch to another was

00:06:20,850 --> 00:06:25,169
to run yon in style to make sure the

00:06:22,530 --> 00:06:27,240
dependencies were up-to-date the problem

00:06:25,169 --> 00:06:28,800
is that this has a cognitive cost you

00:06:27,240 --> 00:06:31,200
don't really want the ingenious to have

00:06:28,800 --> 00:06:33,000
to remember to do this at the same time

00:06:31,200 --> 00:06:35,370
you can't really run it automatically

00:06:33,000 --> 00:06:37,890
because it's just too slow even the

00:06:35,370 --> 00:06:39,419
fastest installs of a few seconds will

00:06:37,890 --> 00:06:41,070
still make it a pain to work with

00:06:39,419 --> 00:06:43,770
reading anything but the zip

00:06:41,070 --> 00:06:46,910
workers you don't have a few seconds to

00:06:43,770 --> 00:06:50,010
spare when you're checking a new branch

00:06:46,910 --> 00:06:51,750
yawn - comes with a solution to this so

00:06:50,010 --> 00:06:54,000
I won't get too deep into the specifics

00:06:51,750 --> 00:06:55,680
here but the idea that by mirroring your

00:06:54,000 --> 00:06:57,870
dependencies archives into your

00:06:55,680 --> 00:07:00,480
repository you never have to worry about

00:06:57,870 --> 00:07:03,210
running yarn style ever again even when

00:07:00,480 --> 00:07:04,710
switching branches I expect this kind of

00:07:03,210 --> 00:07:07,230
integrations to become more and more

00:07:04,710 --> 00:07:08,730
important in the future because

00:07:07,230 --> 00:07:10,830
something we noticed in computer science

00:07:08,730 --> 00:07:12,210
is that to make things faster we

00:07:10,830 --> 00:07:14,670
sometimes had to make that run in

00:07:12,210 --> 00:07:17,010
parallel the same is actually true for

00:07:14,670 --> 00:07:18,660
developers working on features because

00:07:17,010 --> 00:07:20,730
by giving them the ability to jump

00:07:18,660 --> 00:07:23,250
between branches by removing the

00:07:20,730 --> 00:07:25,140
contacts which cost then your developers

00:07:23,250 --> 00:07:30,150
can capitalize their time efficiently

00:07:25,140 --> 00:07:31,860
and produce more finally good developer

00:07:30,150 --> 00:07:33,360
experience is a lot about the feedback

00:07:31,860 --> 00:07:36,240
loop when it comes to the development

00:07:33,360 --> 00:07:38,430
itself how can developers see if their

00:07:36,240 --> 00:07:40,410
challenges work you will often be

00:07:38,430 --> 00:07:42,870
tempted to use pre-commit hooks to run

00:07:40,410 --> 00:07:44,280
various sanity checks but if I can give

00:07:42,870 --> 00:07:46,260
you an advice do it sparingly

00:07:44,280 --> 00:07:48,030
we were something hard to design on

00:07:46,260 --> 00:07:49,980
tight ripped on pre-commit inside our

00:07:48,030 --> 00:07:52,260
own conveys because it was causing

00:07:49,980 --> 00:07:54,560
unnecessary slowdowns that prompted a

00:07:52,260 --> 00:07:57,240
genius to entirely disable procurements

00:07:54,560 --> 00:07:58,860
keeping it light makes it actually more

00:07:57,240 --> 00:07:59,460
likely that early mistakes will be

00:07:58,860 --> 00:08:02,250
spotted

00:07:59,460 --> 00:08:05,160
especially since IDs are now so good and

00:08:02,250 --> 00:08:07,260
surfacing type errors as far as the

00:08:05,160 --> 00:08:08,670
product development goes I found very

00:08:07,260 --> 00:08:11,400
important to make sure that the ultra

00:08:08,670 --> 00:08:13,260
node story works if product engineers

00:08:11,400 --> 00:08:15,180
have to refresh the page between each

00:08:13,260 --> 00:08:18,090
charge they will lose momentum

00:08:15,180 --> 00:08:20,640
retrieving the state speaking of this

00:08:18,090 --> 00:08:22,950
the react team unveiled a few months ago

00:08:20,640 --> 00:08:24,600
a project called react refresh which

00:08:22,950 --> 00:08:26,910
aims to fix most of the long-standing

00:08:24,600 --> 00:08:29,550
flows in previous incarnations of our

00:08:26,910 --> 00:08:31,200
tree node next year's integrated in

00:08:29,550 --> 00:08:33,360
their offering not too long ago or the

00:08:31,200 --> 00:08:35,880
generic web pack plug-in is now almost

00:08:33,360 --> 00:08:38,820
stable so now is probably a good time to

00:08:35,880 --> 00:08:41,099
start looking into that once the

00:08:38,820 --> 00:08:42,719
developer is done we want to see the

00:08:41,099 --> 00:08:44,940
churches in production before I show

00:08:42,719 --> 00:08:47,070
deploying them we want to share it with

00:08:44,940 --> 00:08:49,680
your project manager or designers or

00:08:47,070 --> 00:08:51,000
Corbin tailors to do that you will need

00:08:49,680 --> 00:08:53,910
a deployment service that supports

00:08:51,000 --> 00:08:56,400
deploying any brush repeatedly

00:08:53,910 --> 00:08:58,800
thankfully most providers like Virgil

00:08:56,400 --> 00:09:01,200
Ornette if I now support this kind of

00:08:58,800 --> 00:09:02,940
workflow out of the box but even if you

00:09:01,200 --> 00:09:04,980
have your own deployment pipeline you

00:09:02,940 --> 00:09:07,560
can still easily implement this kind of

00:09:04,980 --> 00:09:09,450
logic the only thing you really need is

00:09:07,560 --> 00:09:12,510
a way to tell your back-end to load the

00:09:09,450 --> 00:09:14,910
assets based on the branch name ashing

00:09:12,510 --> 00:09:17,040
the name and storing it into a static

00:09:14,910 --> 00:09:19,110
subdomain is more than enough in most

00:09:17,040 --> 00:09:22,740
cases without need for more complex

00:09:19,110 --> 00:09:25,050
stuff I think we'll stop there for the

00:09:22,740 --> 00:09:27,120
developer experience there are a lot of

00:09:25,050 --> 00:09:29,070
other areas of improvements we could

00:09:27,120 --> 00:09:31,170
list but my goal here was to highlight

00:09:29,070 --> 00:09:33,810
the main one and show you some easy wins

00:09:31,170 --> 00:09:35,910
that often go unnoticed before we move

00:09:33,810 --> 00:09:37,560
on to the next point one last thing I

00:09:35,910 --> 00:09:40,020
want you to note is that the principles

00:09:37,560 --> 00:09:42,330
with discus fear or as important for

00:09:40,020 --> 00:09:45,600
open source projects as they are for the

00:09:42,330 --> 00:09:47,490
company as mint a nurse our role isn't

00:09:45,600 --> 00:09:49,230
necessarily to write all the pull

00:09:47,490 --> 00:09:51,360
requests but rather to put our

00:09:49,230 --> 00:09:54,060
contributors which often includes

00:09:51,360 --> 00:09:56,730
ourselves in a position where they can

00:09:54,060 --> 00:09:59,540
be they can easily work on the projects

00:09:56,730 --> 00:10:02,640
without being burdened by all the

00:09:59,540 --> 00:10:04,830
maintenance aspects of things sometimes

00:10:02,640 --> 00:10:06,810
it can be as simple as just making sure

00:10:04,830 --> 00:10:11,220
that running on tests will actually run

00:10:06,810 --> 00:10:12,780
with us anyway let's keep going and

00:10:11,220 --> 00:10:15,390
discuss about the second pillar of

00:10:12,780 --> 00:10:18,660
front-end infrastructure stability

00:10:15,390 --> 00:10:20,970
stability is critical its goal is to

00:10:18,660 --> 00:10:23,070
make you confident it leads to faster

00:10:20,970 --> 00:10:25,640
bug fixing because you know that your

00:10:23,070 --> 00:10:28,530
infrastructure is responsible for them

00:10:25,640 --> 00:10:30,270
and it makes you sleep easier at night

00:10:28,530 --> 00:10:32,280
knowing that your fellow teams won't

00:10:30,270 --> 00:10:34,740
need to page you just because something

00:10:32,280 --> 00:10:37,140
unexpectedly broke and deploy is don't

00:10:34,740 --> 00:10:40,890
go through any more but how do we get

00:10:37,140 --> 00:10:43,080
there the first step for stable infra is

00:10:40,890 --> 00:10:45,870
a very simple one control your

00:10:43,080 --> 00:10:48,150
dependencies don't rely on external one

00:10:45,870 --> 00:10:50,160
that can change at any time but I don't

00:10:48,150 --> 00:10:53,100
only mean JavaScript dependencies

00:10:50,160 --> 00:10:54,960
take the network the network is a

00:10:53,100 --> 00:10:56,400
dependency like any other if you

00:10:54,960 --> 00:10:59,040
suddenly lose access to it your

00:10:56,400 --> 00:11:02,370
deployments we stop if your registry

00:10:59,040 --> 00:11:04,800
lose access to it same thing of course

00:11:02,370 --> 00:11:06,660
you can just stop relying on the network

00:11:04,800 --> 00:11:07,590
not when so many of our deployments

00:11:06,660 --> 00:11:09,420
occur in the cloud

00:11:07,590 --> 00:11:12,750
but we certainly can decrease its

00:11:09,420 --> 00:11:15,180
surface in particular don't install your

00:11:12,750 --> 00:11:17,430
packages from external registries

00:11:15,180 --> 00:11:19,410
that's about Eileen they often get out

00:11:17,430 --> 00:11:21,680
and when they do they completely block

00:11:19,410 --> 00:11:25,380
you unless you were prepared for it

00:11:21,680 --> 00:11:27,810
thankfully solutions exist Jana this

00:11:25,380 --> 00:11:30,150
concept of offline mirror to again

00:11:27,810 --> 00:11:31,860
basically cause of issues but even if

00:11:30,150 --> 00:11:33,420
you use something else you can still use

00:11:31,860 --> 00:11:35,880
the like of where that show to set up a

00:11:33,420 --> 00:11:37,560
local registry there's actually I'll

00:11:35,880 --> 00:11:40,260
talk about virtue and this very

00:11:37,560 --> 00:11:43,430
conference and I really recommend you to

00:11:40,260 --> 00:11:47,640
check it out so that's for the network

00:11:43,430 --> 00:11:49,740
but in stalls in general or tricky by

00:11:47,640 --> 00:11:51,870
Murphy's Law Erica that you need to run

00:11:49,740 --> 00:11:53,430
is a code that will eventually fail so

00:11:51,870 --> 00:11:56,310
to be really safe you need to cut down

00:11:53,430 --> 00:11:57,990
the amount of code that needs to cut it

00:11:56,310 --> 00:12:00,600
down in Stiles is a fairly new concept

00:11:57,990 --> 00:12:02,430
so there isn't a lot of support yet you

00:12:00,600 --> 00:12:04,110
want to course it with this zero in cell

00:12:02,430 --> 00:12:06,720
mode we talked about but that's pretty

00:12:04,110 --> 00:12:08,760
much it at the moment still it's really

00:12:06,720 --> 00:12:10,620
something you should consider for

00:12:08,760 --> 00:12:12,540
production settings where installs are

00:12:10,620 --> 00:12:15,390
responsible for so much of the CIA time

00:12:12,540 --> 00:12:18,180
removing insults altogether brings very

00:12:15,390 --> 00:12:21,980
significant improvements both in in

00:12:18,180 --> 00:12:24,450
terms of speed and user experience and

00:12:21,980 --> 00:12:27,480
finally one last piece of advice about

00:12:24,450 --> 00:12:29,490
dependencies don't use native Develin

00:12:27,480 --> 00:12:31,920
C's or any dependencies with personnel

00:12:29,490 --> 00:12:33,420
scripts really buzzing says scripts

00:12:31,920 --> 00:12:35,310
outside of the security aspect of

00:12:33,420 --> 00:12:37,530
running external car have a high

00:12:35,310 --> 00:12:39,900
tendency to fail sometimes it's a remote

00:12:37,530 --> 00:12:41,580
URL but gets rate limited that actually

00:12:39,900 --> 00:12:43,680
happened in one of my pipeline not too

00:12:41,580 --> 00:12:45,750
long ago sometimes it's a local library

00:12:43,680 --> 00:12:47,670
that isn't there sometimes it's

00:12:45,750 --> 00:12:49,470
literally just a Monday and the person's

00:12:47,670 --> 00:12:50,760
a script isn't made to work on Monday

00:12:49,470 --> 00:12:53,700
that's a true story

00:12:50,760 --> 00:12:55,950
I talked about our code that runs is the

00:12:53,700 --> 00:12:57,600
code that fails this is especially true

00:12:55,950 --> 00:13:00,180
for persons on screens that you don't

00:12:57,600 --> 00:13:02,880
control at all so be mindful of what you

00:13:00,180 --> 00:13:04,680
use try to prefer webassembly packages

00:13:02,880 --> 00:13:07,770
instead of native ones in their

00:13:04,680 --> 00:13:10,950
pre-compile and avoid packages with pass

00:13:07,770 --> 00:13:13,740
inside scripts stable infrastructure

00:13:10,950 --> 00:13:15,150
aren't only about deployment you also

00:13:13,740 --> 00:13:17,580
need to be sure that your tool chain

00:13:15,150 --> 00:13:19,430
works and writing it's in tight ship is

00:13:17,580 --> 00:13:21,360
a very good way to help in this regard

00:13:19,430 --> 00:13:22,679
it's funny because

00:13:21,360 --> 00:13:24,779
is often found in front-end

00:13:22,679 --> 00:13:25,799
cardinalities but I still find a lot of

00:13:24,779 --> 00:13:27,959
infrareds

00:13:25,799 --> 00:13:29,699
written in Gia's I don't know if it's

00:13:27,959 --> 00:13:31,949
because the scripts don't deserve the

00:13:29,699 --> 00:13:34,079
same level of attention but I found that

00:13:31,949 --> 00:13:35,850
too bad because they're quite critical

00:13:34,079 --> 00:13:39,449
to the cut that we are writing to the

00:13:35,850 --> 00:13:41,009
product something to realize is that you

00:13:39,449 --> 00:13:43,139
don't actually need to transfer to a

00:13:41,009 --> 00:13:45,509
trip into JavaScript before being able

00:13:43,139 --> 00:13:48,569
to run it you might have heard about

00:13:45,509 --> 00:13:50,549
Dino lately but even going as far we can

00:13:48,569 --> 00:13:53,309
already have pretty good solutions in

00:13:50,549 --> 00:13:55,230
that world Babel can add support for

00:13:53,309 --> 00:13:58,110
executing JavaScript files directly into

00:13:55,230 --> 00:14:00,269
not TS not can do that as well and

00:13:58,110 --> 00:14:02,129
together with the official touch field

00:14:00,269 --> 00:14:04,589
compiler that can type check without

00:14:02,129 --> 00:14:06,209
transpiling resources I think we have

00:14:04,589 --> 00:14:09,329
all we need to make sure the code we

00:14:06,209 --> 00:14:11,189
write for our tool chain doesn't suffer

00:14:09,329 --> 00:14:13,799
from typos wrong government types

00:14:11,189 --> 00:14:16,019
missing aways and all these class of

00:14:13,799 --> 00:14:20,309
errors that are already fixed for

00:14:16,019 --> 00:14:21,989
front-end code so we talked a lot about

00:14:20,309 --> 00:14:24,540
specific points we can improve in the

00:14:21,989 --> 00:14:25,739
infrastructure of many projects but now

00:14:24,540 --> 00:14:27,899
we are going to discuss something

00:14:25,739 --> 00:14:31,230
slightly different but just as important

00:14:27,899 --> 00:14:33,629
how do you know what matters how do you

00:14:31,230 --> 00:14:35,309
know what to prioritize I could go on

00:14:33,629 --> 00:14:36,899
and on and keep telling you particular

00:14:35,309 --> 00:14:39,269
pain points that are often true today

00:14:36,899 --> 00:14:41,369
but the fact is that the impact of those

00:14:39,269 --> 00:14:44,699
changes will vary from one project to

00:14:41,369 --> 00:14:47,129
another so I rather than keep inheriting

00:14:44,699 --> 00:14:49,649
a fixed list I think we should now check

00:14:47,129 --> 00:14:51,749
out how to find our own additional items

00:14:49,649 --> 00:14:54,959
and with that we'll turn a more abstract

00:14:51,749 --> 00:14:57,179
part of this talk called monetary the

00:14:54,959 --> 00:14:59,790
idea is simple there's only so much time

00:14:57,179 --> 00:15:01,949
in the day and only so many resources to

00:14:59,790 --> 00:15:03,540
spend of an infrastructure right so how

00:15:01,949 --> 00:15:06,449
do you pick the tasks that will have the

00:15:03,540 --> 00:15:08,790
most impact for your team you will also

00:15:06,449 --> 00:15:11,249
need to measure whether your project

00:15:08,790 --> 00:15:13,169
actually improved things so that you can

00:15:11,249 --> 00:15:17,249
iterate and refine your approach over

00:15:13,169 --> 00:15:20,429
time one problem is that infrastructure

00:15:17,249 --> 00:15:21,989
is how to measure really hard as we

00:15:20,429 --> 00:15:23,759
previously saw a good part of the

00:15:21,989 --> 00:15:25,410
throttle infrastructure is the developer

00:15:23,759 --> 00:15:27,660
experience at the developer experience

00:15:25,410 --> 00:15:29,549
is driven by a loose concept of

00:15:27,660 --> 00:15:32,189
happiness and how do you measure

00:15:29,549 --> 00:15:34,619
happiness there are a few tricks for

00:15:32,189 --> 00:15:35,340
that the first strategy is called

00:15:34,619 --> 00:15:37,470
passive

00:15:35,340 --> 00:15:40,260
because you're waiting to see the data

00:15:37,470 --> 00:15:42,540
you aggregate all kind of objective data

00:15:40,260 --> 00:15:45,270
points and look for trends that emerge

00:15:42,540 --> 00:15:47,940
to good tool for that or unit webpack

00:15:45,270 --> 00:15:50,130
which both offer looks allowing you to

00:15:47,940 --> 00:15:54,030
retrieve accurate usage metrics of a

00:15:50,130 --> 00:15:56,490
type the second strategy is active this

00:15:54,030 --> 00:15:59,730
time you directly go to your users and

00:15:56,490 --> 00:16:01,830
ask them what they think you can do this

00:15:59,730 --> 00:16:04,050
is am a sweep with company-wide phones

00:16:01,830 --> 00:16:05,880
or you can schedule one one with your

00:16:04,050 --> 00:16:10,770
colleague but the point is you need to

00:16:05,880 --> 00:16:13,320
go to them finally the first approach is

00:16:10,770 --> 00:16:15,780
to be reachable it won't be enough to

00:16:13,320 --> 00:16:17,550
get your peers feedback one every

00:16:15,780 --> 00:16:19,260
bloomin you will need to make sure they

00:16:17,550 --> 00:16:22,530
have the proper channels to share their

00:16:19,260 --> 00:16:25,190
own ideas by experience something that

00:16:22,530 --> 00:16:27,090
works quite well or github issues

00:16:25,190 --> 00:16:29,070
infrastructure tasks are often

00:16:27,090 --> 00:16:31,800
long-lived and it can become hard to

00:16:29,070 --> 00:16:33,600
track progress good old fashioned issues

00:16:31,800 --> 00:16:34,290
are a good way to let everyone share

00:16:33,600 --> 00:16:37,530
their problems

00:16:34,290 --> 00:16:40,400
avoid a recurring one and subscribe to

00:16:37,530 --> 00:16:42,870
progress on the one they are care about

00:16:40,400 --> 00:16:45,750
I'd like to go over the passive strategy

00:16:42,870 --> 00:16:48,810
a bit more what you can see on screen is

00:16:45,750 --> 00:16:50,880
the number a duration of the type check

00:16:48,810 --> 00:16:53,490
command runs in the type data log or

00:16:50,880 --> 00:16:55,050
everyday we have a young plugin that

00:16:53,490 --> 00:16:57,090
collects this kind of information and

00:16:55,050 --> 00:16:59,760
sends it straight to our dashboards

00:16:57,090 --> 00:17:02,310
through this we get a good sense of what

00:16:59,760 --> 00:17:05,370
programs the ajay nears may face quickly

00:17:02,310 --> 00:17:08,550
detect regressions and triage feedback

00:17:05,370 --> 00:17:10,560
we do this together many metrics which

00:17:08,550 --> 00:17:13,130
strips are used what's the size of the

00:17:10,560 --> 00:17:15,840
code base of any ESP disabled or their

00:17:13,130 --> 00:17:16,650
what's the size of the bill what's its

00:17:15,840 --> 00:17:18,270
duration

00:17:16,650 --> 00:17:21,360
all these automated information

00:17:18,270 --> 00:17:25,190
gathering helps paint a kind of real

00:17:21,360 --> 00:17:27,870
like real nighttime picture of our work

00:17:25,190 --> 00:17:30,240
so we have found ways to gather metrics

00:17:27,870 --> 00:17:33,030
but the others an important question we

00:17:30,240 --> 00:17:34,380
need to answer we shove that better and

00:17:33,030 --> 00:17:38,010
that's the question between you and your

00:17:34,380 --> 00:17:40,830
users see metrics are an insight they

00:17:38,010 --> 00:17:42,990
give you a snapshot of data but the way

00:17:40,830 --> 00:17:45,450
you will interpret them will be affected

00:17:42,990 --> 00:17:47,100
by your users perception of that for

00:17:45,450 --> 00:17:48,780
example you might think that let's say

00:17:47,100 --> 00:17:49,160
the deploy time is too high because it

00:17:48,780 --> 00:17:51,590
appear

00:17:49,160 --> 00:17:53,600
so when you look at the grass but when

00:17:51,590 --> 00:17:55,550
talking to the enjoyed ears you might

00:17:53,600 --> 00:17:57,530
find out that none of them really see a

00:17:55,550 --> 00:17:59,030
benefit to bring it down the runs

00:17:57,530 --> 00:18:01,280
because they are doing something else in

00:17:59,030 --> 00:18:02,900
parallel and since it first feature is

00:18:01,280 --> 00:18:04,880
about making your developer's dream come

00:18:02,900 --> 00:18:08,600
true you will have to take it into

00:18:04,880 --> 00:18:10,370
account to your plan that's actually

00:18:08,600 --> 00:18:13,340
what fertile infrastructure is a

00:18:10,370 --> 00:18:16,430
repeated cycle of interpret validate

00:18:13,340 --> 00:18:18,590
track first you find candidate problems

00:18:16,430 --> 00:18:21,080
then you validate them with your users

00:18:18,590 --> 00:18:23,390
and then you find a metric that will be

00:18:21,080 --> 00:18:25,490
impacted by the fix and you can finally

00:18:23,390 --> 00:18:27,830
track them the key is to validate

00:18:25,490 --> 00:18:29,870
because without it you run the risk of

00:18:27,830 --> 00:18:32,240
working on an idea that you will find

00:18:29,870 --> 00:18:34,460
useful but that won't be perceived as

00:18:32,240 --> 00:18:39,440
such for the people it was supposed to

00:18:34,460 --> 00:18:41,450
help which is good for anyone okay so I

00:18:39,440 --> 00:18:43,700
talked a lot and there are so many thing

00:18:41,450 --> 00:18:45,530
about front-end infrastructure I think

00:18:43,700 --> 00:18:48,830
this is only the first of many ties we

00:18:45,530 --> 00:18:50,390
could make it into subjects to recap by

00:18:48,830 --> 00:18:53,000
investing or developer experience of

00:18:50,390 --> 00:18:55,940
stability you get to have a multiplying

00:18:53,000 --> 00:18:57,740
effect of the team's you support to do

00:18:55,940 --> 00:19:00,140
that efficiently you will need to plan

00:18:57,740 --> 00:19:02,390
your work ahead really you will need to

00:19:00,140 --> 00:19:04,910
have a long term vision while still stay

00:19:02,390 --> 00:19:06,380
flexible enough to be able to add up for

00:19:04,910 --> 00:19:09,020
new okay or that will appear in your

00:19:06,380 --> 00:19:10,970
rudder finally you will need to make

00:19:09,020 --> 00:19:13,460
sure that everyone's aware of the value

00:19:10,970 --> 00:19:15,620
your work will bring what's completed if

00:19:13,460 --> 00:19:18,170
they aren't it will be the sign that you

00:19:15,620 --> 00:19:20,030
haven't communicated well enough or

00:19:18,170 --> 00:19:22,760
perhaps that the value just isn't there

00:19:20,030 --> 00:19:25,190
it happens and it's not a big deal the

00:19:22,760 --> 00:19:28,220
key is to use that to find out more

00:19:25,190 --> 00:19:32,750
about what you could do that would have

00:19:28,220 --> 00:19:34,700
more impact on your users I hope you

00:19:32,750 --> 00:19:36,590
like this talk I've experimented a new

00:19:34,700 --> 00:19:39,050
approach on first design the plan using

00:19:36,590 --> 00:19:40,610
ex cathedra a platform and a way to

00:19:39,050 --> 00:19:43,280
build graphs with an emphasis on the

00:19:40,610 --> 00:19:45,020
code rather than the visuals I mean sure

00:19:43,280 --> 00:19:46,160
to plan on Twitter after the talk so if

00:19:45,020 --> 00:19:50,060
you forgot to take notes

00:19:46,160 --> 00:19:51,860
feel free to join me there finally here

00:19:50,060 --> 00:19:53,450
are some links that you can look into to

00:19:51,860 --> 00:19:55,940
find more information about various

00:19:53,450 --> 00:19:58,040
topics we discussed I will leave it here

00:19:55,940 --> 00:19:59,990
from a few seconds that you can take a

00:19:58,040 --> 00:20:02,870
screenshot like right now for example

00:19:59,990 --> 00:20:05,150
yeah now is the time

00:20:02,870 --> 00:20:07,430
and I will join you for a Q&A right

00:20:05,150 --> 00:20:09,260
after so please feel free to share what

00:20:07,430 --> 00:20:11,540
you thought of this talk it's the first

00:20:09,260 --> 00:20:14,630
time I've done it so I'm kind of in

00:20:11,540 --> 00:20:16,960
uncharted territories there so I would

00:20:14,630 --> 00:20:19,420
really appreciate having your input

00:20:16,960 --> 00:20:22,900
thanks for everyone for listening and

00:20:19,420 --> 00:20:22,900

YouTube URL: https://www.youtube.com/watch?v=8gYkSM2QIek


