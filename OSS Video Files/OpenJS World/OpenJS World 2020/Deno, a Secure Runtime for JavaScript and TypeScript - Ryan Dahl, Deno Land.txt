Title: Deno, a Secure Runtime for JavaScript and TypeScript - Ryan Dahl, Deno Land
Publication date: 2020-06-22
Playlist: OpenJS World 2020
Description: 
	
Captions: 
	00:00:07,189 --> 00:00:18,660
hello hi I am feeling weird giving a

00:00:14,820 --> 00:00:22,260
virtual talk I guess I guess everybody's

00:00:18,660 --> 00:00:26,580
doing that these days though my name is

00:00:22,260 --> 00:00:30,539
Ryan I'm going to talk to you about this

00:00:26,580 --> 00:00:35,489
project adeno that i've been working on

00:00:30,539 --> 00:00:40,170
for the last two years now or so we have

00:00:35,489 --> 00:00:43,559
just released version 1.0 about a month

00:00:40,170 --> 00:00:46,230
ago and yeah I just thought I'd give you

00:00:43,559 --> 00:00:50,700
guys a bit of an overview about it and

00:00:46,230 --> 00:00:53,010
some demos and if I understand the

00:00:50,700 --> 00:00:56,460
program correctly hopefully you can ask

00:00:53,010 --> 00:00:59,219
me some questions at the end of it so

00:00:56,460 --> 00:01:05,990
first off just a just a bit of an

00:00:59,219 --> 00:01:09,630
overview so C++ and rust and go are

00:01:05,990 --> 00:01:12,030
really interesting developments in in

00:01:09,630 --> 00:01:19,049
computer infrastructure they're they're

00:01:12,030 --> 00:01:22,979
allowing us to more easily make machine

00:01:19,049 --> 00:01:27,030
code programs and it's getting better

00:01:22,979 --> 00:01:31,220
all of the time but the fact remains

00:01:27,030 --> 00:01:34,710
that most software is not CPU bound and

00:01:31,220 --> 00:01:36,869
it seems that most software is is done

00:01:34,710 --> 00:01:40,770
in dynamic languages like Python and

00:01:36,869 --> 00:01:44,490
Ruby and JavaScript these dynamic

00:01:40,770 --> 00:01:49,380
languages aka scripts are easy and

00:01:44,490 --> 00:01:51,689
succinct and they often are the most

00:01:49,380 --> 00:01:56,430
minimal way to describe certain

00:01:51,689 --> 00:02:00,770
algorithms and amongst these these

00:01:56,430 --> 00:02:03,780
dynamic languages Java Script is is

00:02:00,770 --> 00:02:06,899
arguably the fastest and has the largest

00:02:03,780 --> 00:02:14,000
community of programmers because it's

00:02:06,899 --> 00:02:19,730
the language of the web browser so

00:02:14,000 --> 00:02:23,510
with that in mind back in in 2009 I

00:02:19,730 --> 00:02:28,920
started the node project to bring

00:02:23,510 --> 00:02:31,920
JavaScript to to the server or out of

00:02:28,920 --> 00:02:34,099
the web browser that is and this turned

00:02:31,920 --> 00:02:37,409
out to be a really successful project

00:02:34,099 --> 00:02:42,689
it's essentially turned into the PHP s

00:02:37,409 --> 00:02:48,540
of the 2010 and has ubiquitous cloud

00:02:42,689 --> 00:02:54,629
support and is used by essentially all

00:02:48,540 --> 00:02:57,900
front-end frameworks and yeah I mean in

00:02:54,629 --> 00:03:05,340
in some way or another essentially every

00:02:57,900 --> 00:03:08,340
website is using node but since 2009 the

00:03:05,340 --> 00:03:14,370
JavaScript ecosystem has has improved

00:03:08,340 --> 00:03:18,290
very rapidly and has new features and

00:03:14,370 --> 00:03:22,919
systems that were not around back then

00:03:18,290 --> 00:03:27,090
so for example the array buffer is a

00:03:22,919 --> 00:03:29,790
system to allow accessing raw binary

00:03:27,090 --> 00:03:33,260
data and javascript that was not there

00:03:29,790 --> 00:03:38,819
when and we originally designed the the

00:03:33,260 --> 00:03:42,599
TCP system in node a single weight of

00:03:38,819 --> 00:03:44,549
course is is amazingly useful when

00:03:42,599 --> 00:03:48,209
you're dealing with asynchronous systems

00:03:44,549 --> 00:03:54,329
and most importantly the the es modules

00:03:48,209 --> 00:03:56,790
has has provided a way to provided a

00:03:54,329 --> 00:04:06,409
module system a standard module system

00:03:56,790 --> 00:04:09,629
in JavaScript and so Dino is is built

00:04:06,409 --> 00:04:15,569
trying to take take advantage of these

00:04:09,629 --> 00:04:18,359
new developments so in in many ways it's

00:04:15,569 --> 00:04:20,099
it's very similar to node you know it's

00:04:18,359 --> 00:04:23,310
it's a program for executing JavaScript

00:04:20,099 --> 00:04:27,030
outside of the web browser and it's a

00:04:23,310 --> 00:04:30,750
built on top of the v8 JavaScript VM and

00:04:27,030 --> 00:04:34,290
of Chrome and it's open source and MIT

00:04:30,750 --> 00:04:40,200
licensed but instead of C++ it's written

00:04:34,290 --> 00:04:42,720
in rust and yeah kind of the the a lot a

00:04:40,200 --> 00:04:45,419
lot of the utilities that provides are

00:04:42,720 --> 00:04:48,630
quite different so it has built in dev

00:04:45,419 --> 00:04:53,040
tools for testing and linting and

00:04:48,630 --> 00:04:56,220
formatting and Doc generation and it's

00:04:53,040 --> 00:05:00,810
been designed so that it can be embedded

00:04:56,220 --> 00:05:05,640
in other software and it tries to use

00:05:00,810 --> 00:05:07,800
web api's where it can with the idea

00:05:05,640 --> 00:05:11,160
that we want to we want this thing to be

00:05:07,800 --> 00:05:18,530
as broadly usable as possible so we

00:05:11,160 --> 00:05:22,500
really want to to kind of appeal to to

00:05:18,530 --> 00:05:24,720
developers you know I think the the web

00:05:22,500 --> 00:05:28,860
browser is kind of the largest developer

00:05:24,720 --> 00:05:32,250
base and by using those api's we we can

00:05:28,860 --> 00:05:37,470
appeal to the largest segment of the

00:05:32,250 --> 00:05:40,919
developer population so Dino is a bit

00:05:37,470 --> 00:05:44,970
different in that you know it's it's

00:05:40,919 --> 00:05:46,919
making use of these es modules and it

00:05:44,970 --> 00:05:52,490
has this this weird property where you

00:05:46,919 --> 00:05:57,110
can actually put a raw hgp URL into as

00:05:52,490 --> 00:06:00,090
give give give a raw HGP URL as the

00:05:57,110 --> 00:06:02,760
module specifier in import statements

00:06:00,090 --> 00:06:06,780
this is actually something that's that's

00:06:02,760 --> 00:06:12,229
possible in web browsers these days so

00:06:06,780 --> 00:06:14,460
it's it's a web compatible system and

00:06:12,229 --> 00:06:17,460
what this allows you to do is is

00:06:14,460 --> 00:06:22,370
basically import code directly from the

00:06:17,460 --> 00:06:26,450
internet and yeah this this has some

00:06:22,370 --> 00:06:28,950
some interesting properties so you know

00:06:26,450 --> 00:06:34,229
when you talk about importing code

00:06:28,950 --> 00:06:36,780
directly from the internet you quickly

00:06:34,229 --> 00:06:39,930
run into into I have some security

00:06:36,780 --> 00:06:41,910
questions right how do you know that

00:06:39,930 --> 00:06:45,180
you know you're just pulling from from a

00:06:41,910 --> 00:06:49,400
random URL I mean what what sort of

00:06:45,180 --> 00:06:51,449
trust can you have from that well I mean

00:06:49,400 --> 00:06:53,400
you know you're if you're if you're

00:06:51,449 --> 00:06:55,500
pulling from a random and p.m. package

00:06:53,400 --> 00:06:58,620
what sort of trust can you have from it

00:06:55,500 --> 00:07:00,690
either right not not much but you know

00:06:58,620 --> 00:07:02,610
this this kind of makes the the fact

00:07:00,690 --> 00:07:06,389
that you're pulling random code from the

00:07:02,610 --> 00:07:08,750
internet a bit more explicit not that

00:07:06,389 --> 00:07:12,030
you're not doing that already and with

00:07:08,750 --> 00:07:14,340
you know ruby gems or NPM packages

00:07:12,030 --> 00:07:17,370
you're certainly still pulling random

00:07:14,340 --> 00:07:19,949
code from the internet but because this

00:07:17,370 --> 00:07:26,580
makes it more explicit you know we we

00:07:19,949 --> 00:07:30,229
think that it's important to to make use

00:07:26,580 --> 00:07:34,770
of the fact that v8 is a secure sandbox

00:07:30,229 --> 00:07:41,160
and so so Dino by default also retains

00:07:34,770 --> 00:07:43,560
this security sandbox of v8 and so well

00:07:41,160 --> 00:07:45,720
let me let me jump into some demos and

00:07:43,560 --> 00:07:50,039
you'll see what I mean

00:07:45,720 --> 00:07:53,580
so first of all hoops I need to copy and

00:07:50,039 --> 00:07:59,449
paste this so I'm going to do first is

00:07:53,580 --> 00:08:04,020
show a gist program just is this github

00:07:59,449 --> 00:08:09,060
pasting server and essentially it's it's

00:08:04,020 --> 00:08:11,430
a way to paste code on the Internet

00:08:09,060 --> 00:08:14,880
and there's an API where you can you can

00:08:11,430 --> 00:08:17,220
basically post post a file and then send

00:08:14,880 --> 00:08:21,479
people get it get a URL and send it to

00:08:17,220 --> 00:08:25,530
people and so we've got this program and

00:08:21,479 --> 00:08:29,340
this program is a is a is a URL to a

00:08:25,530 --> 00:08:32,430
typescript file and if I enter it in my

00:08:29,340 --> 00:08:38,070
browser we've got this website where it

00:08:32,430 --> 00:08:39,959
displays the code and the interesting

00:08:38,070 --> 00:08:41,729
thing here is is that you know when you

00:08:39,959 --> 00:08:44,550
display it on get it through the web

00:08:41,729 --> 00:08:47,850
browser you get this this this website

00:08:44,550 --> 00:08:51,209
but if you curl it you actually get the

00:08:47,850 --> 00:08:53,779
raw raw text and the the way that we're

00:08:51,209 --> 00:08:56,880
doing this is is through

00:08:53,779 --> 00:08:59,730
the accept header right so so web

00:08:56,880 --> 00:09:03,110
browsers can send an accept header with

00:08:59,730 --> 00:09:06,930
with each request that says oh I want

00:09:03,110 --> 00:09:09,420
HTML and based on that we're we're able

00:09:06,930 --> 00:09:13,320
to either serve up the raw content the

00:09:09,420 --> 00:09:15,540
the raw text file or not anyway what

00:09:13,320 --> 00:09:18,500
we're going to do is dino has the

00:09:15,540 --> 00:09:24,720
ability to to download this program

00:09:18,500 --> 00:09:28,800
directly and run it and so what we that

00:09:24,720 --> 00:09:31,829
this program works if I just run it I'm

00:09:28,800 --> 00:09:33,870
going to get some permission error

00:09:31,829 --> 00:09:37,440
it says uncaught permission denied

00:09:33,870 --> 00:09:42,329
access to environmental variables run

00:09:37,440 --> 00:09:45,779
again with allow M flag so just in order

00:09:42,329 --> 00:09:47,390
to to paste a gist and if you look

00:09:45,779 --> 00:09:50,339
through the code you'll you'll see that

00:09:47,390 --> 00:09:53,070
that it's trying to get this

00:09:50,339 --> 00:09:56,430
environmental variable just token so

00:09:53,070 --> 00:10:02,459
that it knows how to which user to post

00:09:56,430 --> 00:10:04,769
ads on on just so you know we don't just

00:10:02,459 --> 00:10:06,600
allow anybody to have access to

00:10:04,769 --> 00:10:10,680
environmental variables we have to give

00:10:06,600 --> 00:10:13,230
it the allow M flag and you know it's

00:10:10,680 --> 00:10:16,079
it's going to also need to have a low

00:10:13,230 --> 00:10:18,149
net because it's going to be accessing

00:10:16,079 --> 00:10:24,029
some server but yeah let's let's just

00:10:18,149 --> 00:10:27,839
see that happen so right when we when we

00:10:24,029 --> 00:10:31,860
run it it's it's you know it's fetched

00:10:27,839 --> 00:10:34,079
my my secret just token environmental

00:10:31,860 --> 00:10:37,410
variable and now what we need to it's

00:10:34,079 --> 00:10:38,880
it's giving me this usage message

00:10:37,410 --> 00:10:42,120
because I haven't actually given it a

00:10:38,880 --> 00:10:45,000
file to to upload and so what I'm going

00:10:42,120 --> 00:10:47,370
to do is try to upload this this readme

00:10:45,000 --> 00:10:50,940
file that's in my current directory yeah

00:10:47,370 --> 00:10:52,560
to the gist server and when I run this I

00:10:50,940 --> 00:10:55,709
should get one more error which is that

00:10:52,560 --> 00:10:56,430
oh it doesn't have read access to the

00:10:55,709 --> 00:10:59,040
filesystem

00:10:56,430 --> 00:11:03,050
actually two more errors so we're going

00:10:59,040 --> 00:11:05,550
to have to give it - allow read and just

00:11:03,050 --> 00:11:06,250
skipping ahead we have to give it allow

00:11:05,550 --> 00:11:08,950
net as well

00:11:06,250 --> 00:11:14,140
because it's going to access just

00:11:08,950 --> 00:11:18,220
github.com and when I run this it says

00:11:14,140 --> 00:11:21,280
Oh success it's it's taken this file and

00:11:18,220 --> 00:11:24,970
it's given me some URL which if I go to

00:11:21,280 --> 00:11:29,770
it hopefully will contain this this Dino

00:11:24,970 --> 00:11:31,240
readme file right so this is kind of I I

00:11:29,770 --> 00:11:34,450
think the interesting thing about this

00:11:31,240 --> 00:11:36,370
is is that I didn't need to install

00:11:34,450 --> 00:11:40,090
anything right this is a command-line

00:11:36,370 --> 00:11:44,950
utility that you know previously you

00:11:40,090 --> 00:11:48,030
might have npm installed desk g to kind

00:11:44,950 --> 00:11:52,000
of get this this program but here i'm

00:11:48,030 --> 00:11:56,500
running it without without installing

00:11:52,000 --> 00:12:01,630
anything now we do have kind of an

00:11:56,500 --> 00:12:11,260
install version and the way this works

00:12:01,630 --> 00:12:15,310
is that if i I think if I so I'm taking

00:12:11,260 --> 00:12:17,410
out the the readme because ok so what

00:12:15,310 --> 00:12:19,210
I'm going to do is instead say dunno run

00:12:17,410 --> 00:12:20,980
I'm going say it's demo install and what

00:12:19,210 --> 00:12:24,960
this is going to do is it's basically

00:12:20,980 --> 00:12:27,339
going to create a little shell script oh

00:12:24,960 --> 00:12:29,110
it's it's airing out because I've

00:12:27,339 --> 00:12:32,170
already got it installed I'm going to

00:12:29,110 --> 00:12:36,640
have to do - - forced to overwrite my

00:12:32,170 --> 00:12:38,500
previous installation of Dino gist so

00:12:36,640 --> 00:12:40,810
it's created this little shell script

00:12:38,500 --> 00:12:42,490
and if I cap this shell script I mean

00:12:40,810 --> 00:12:44,950
essentially it's just copy and pasted

00:12:42,490 --> 00:12:48,520
this this command line into this shell

00:12:44,950 --> 00:12:53,260
script right and so so now I can do

00:12:48,520 --> 00:12:54,730
things like just read me and it will

00:12:53,260 --> 00:12:57,070
work like that so we have this very

00:12:54,730 --> 00:13:01,560
simple way to essentially create

00:12:57,070 --> 00:13:04,450
bookmarks - to command line scripts

00:13:01,560 --> 00:13:07,180
right so so this is kind of what I mean

00:13:04,450 --> 00:13:09,430
by it by a web browser for for command

00:13:07,180 --> 00:13:14,920
line utilities or even programs in

00:13:09,430 --> 00:13:19,050
general this next example is is a whole

00:13:14,920 --> 00:13:21,899
website actually so

00:13:19,050 --> 00:13:24,269
when I run this I think this is running

00:13:21,899 --> 00:13:26,580
a whole react website so you know

00:13:24,269 --> 00:13:29,130
obviously this is just program is pretty

00:13:26,580 --> 00:13:31,980
small but the claim here is that we can

00:13:29,130 --> 00:13:34,170
do kind of arbitrary complexity here and

00:13:31,980 --> 00:13:37,769
so what I'm going to do is Dino run

00:13:34,170 --> 00:13:40,220
allow net allow read and let's let's

00:13:37,769 --> 00:13:44,610
just take a look at what this what this

00:13:40,220 --> 00:13:47,399
program is you know it has some some

00:13:44,610 --> 00:13:52,260
relative includes it's it's including a

00:13:47,399 --> 00:13:57,540
or importing a TSX file starting some

00:13:52,260 --> 00:13:59,899
sort of server etc and it's I guess it's

00:13:57,540 --> 00:14:03,990
going to be listening on on port 3000

00:13:59,899 --> 00:14:07,560
when I run this hopefully it will work

00:14:03,990 --> 00:14:11,970
see listening on port 3000 seems to have

00:14:07,560 --> 00:14:16,350
done it and let's go there it says hello

00:14:11,970 --> 00:14:20,610
demo land Dino land and has kind of this

00:14:16,350 --> 00:14:22,620
example react server you might have

00:14:20,610 --> 00:14:24,920
noticed that this started up really fast

00:14:22,620 --> 00:14:27,990
and there wasn't any downloading or

00:14:24,920 --> 00:14:30,870
anything happening that's because this

00:14:27,990 --> 00:14:34,620
this file here is is cached to my local

00:14:30,870 --> 00:14:38,490
my local machine and you can find out

00:14:34,620 --> 00:14:41,250
more about the cache information if you

00:14:38,490 --> 00:14:44,279
type Dino info oops there's a lot of

00:14:41,250 --> 00:14:46,680
output so when I type Dino info with

00:14:44,279 --> 00:14:51,120
with kind of the the entry point script

00:14:46,680 --> 00:14:54,089
I I can find out that it has kind of a

00:14:51,120 --> 00:14:57,600
locally cached version in in this

00:14:54,089 --> 00:14:59,010
directory and this is a typescript

00:14:57,600 --> 00:15:01,320
program and so it's it's been

00:14:59,010 --> 00:15:04,800
automatically compiled to JavaScript and

00:15:01,320 --> 00:15:07,350
it exists in in this location here and

00:15:04,800 --> 00:15:10,770
here's a source map file and then it

00:15:07,350 --> 00:15:13,740
even gives us a dependency tree all with

00:15:10,770 --> 00:15:17,579
all with valid URLs and so so this entry

00:15:13,740 --> 00:15:21,570
point depends on mod tsx which in turn

00:15:17,579 --> 00:15:26,070
depends on depth es which in turn

00:15:21,570 --> 00:15:27,839
depends on react from JSP m and so on

00:15:26,070 --> 00:15:30,640
right there's there's a lot of

00:15:27,839 --> 00:15:34,240
dependencies in here

00:15:30,640 --> 00:15:40,089
so yeah just just kind of as an example

00:15:34,240 --> 00:15:43,089
of a more complicated program so where's

00:15:40,089 --> 00:15:45,160
my slides right so even something more

00:15:43,089 --> 00:15:49,630
complicated here

00:15:45,160 --> 00:15:53,380
is this program which is also given as a

00:15:49,630 --> 00:15:57,820
URL and and I might as well show you

00:15:53,380 --> 00:16:00,130
this source code first so this is also

00:15:57,820 --> 00:16:03,790
displaying a little website but it's

00:16:00,130 --> 00:16:05,950
using this this web view and as you'll

00:16:03,790 --> 00:16:09,760
see it's it's kind of a little mini GUI

00:16:05,950 --> 00:16:10,720
application and it's going to create two

00:16:09,760 --> 00:16:15,250
windows

00:16:10,720 --> 00:16:19,269
really really simple thing with two -

00:16:15,250 --> 00:16:22,510
native windows right and the way that it

00:16:19,269 --> 00:16:25,180
does this is with with Dino's plug-in

00:16:22,510 --> 00:16:27,269
interface which is still unstable but

00:16:25,180 --> 00:16:31,410
essentially allows you to plug in to

00:16:27,269 --> 00:16:34,149
essentially allows you to load a DLL of

00:16:31,410 --> 00:16:38,230
that kind of can contain arbitrary

00:16:34,149 --> 00:16:40,810
native code and yeah so that that's why

00:16:38,230 --> 00:16:44,079
we need this unstable and just FYI this

00:16:40,810 --> 00:16:46,750
- capital a just means opt out of all of

00:16:44,079 --> 00:16:48,970
this security sandbox nonsense let's

00:16:46,750 --> 00:16:51,880
just let's just run it let's let's let's

00:16:48,970 --> 00:16:55,660
be crazy by the way if you're loading a

00:16:51,880 --> 00:16:57,430
DLL a plug-in as we call them you know

00:16:55,660 --> 00:17:01,540
kind of all your security bets are off

00:16:57,430 --> 00:17:04,150
because we we don't have you know if

00:17:01,540 --> 00:17:06,910
you're going into some some random rust

00:17:04,150 --> 00:17:13,900
code we can't control what what you're

00:17:06,910 --> 00:17:16,720
doing at that point so you know the okay

00:17:13,900 --> 00:17:19,240
so anyway I'm going to run this and as

00:17:16,720 --> 00:17:23,410
you see it's it's created these these

00:17:19,240 --> 00:17:25,419
two windows here yeah so anyway I'll you

00:17:23,410 --> 00:17:27,699
know I'll I'll leave this for you to

00:17:25,419 --> 00:17:32,740
play around with but just just kind of a

00:17:27,699 --> 00:17:34,419
sampling of what Dino can do and yeah I

00:17:32,740 --> 00:17:38,020
mentioned earlier that we have a bunch

00:17:34,419 --> 00:17:39,820
of tooling so let me do Dino help and

00:17:38,020 --> 00:17:43,860
you'll see that we've got all these sub

00:17:39,820 --> 00:17:48,420
commands so we have like bundling

00:17:43,860 --> 00:17:50,520
dock and format and install and lint so

00:17:48,420 --> 00:17:54,049
you know let me let me just give you an

00:17:50,520 --> 00:17:57,450
example here of let's say that just file

00:17:54,049 --> 00:17:59,549
or let's let's take this this entry

00:17:57,450 --> 00:18:01,650
point TS hopefully this works and

00:17:59,549 --> 00:18:04,410
haven't tried this yet but let's let's

00:18:01,650 --> 00:18:05,640
just try to bundle bundle this guy right

00:18:04,410 --> 00:18:08,610
so what it's going to do is it's going

00:18:05,640 --> 00:18:11,309
to create a single javascript file with

00:18:08,610 --> 00:18:14,280
with all of the dependencies bundled up

00:18:11,309 --> 00:18:23,010
in in here really crossing my fingers

00:18:14,280 --> 00:18:27,120
now that this actually works maybe seam

00:18:23,010 --> 00:18:31,980
it outputs it to standard out so yeah

00:18:27,120 --> 00:18:34,650
seems it seems to have worked I'd rather

00:18:31,980 --> 00:18:37,980
show you these other tools since

00:18:34,650 --> 00:18:41,490
bundling exists let me let me show you

00:18:37,980 --> 00:18:43,500
format so so Dino format is is

00:18:41,490 --> 00:18:46,260
essentially our version of prettier but

00:18:43,500 --> 00:18:49,830
implemented and rust and so much faster

00:18:46,260 --> 00:18:52,860
and what I'm going to do is just format

00:18:49,830 --> 00:18:54,990
some files I've got this directory here

00:18:52,860 --> 00:18:57,600
I'm actually in the Dino directory and

00:18:54,990 --> 00:19:01,650
this is some code that's kind of built

00:18:57,600 --> 00:19:02,970
into Dino we in in Dino itself in art

00:19:01,650 --> 00:19:06,290
internal stuff we actually don't use

00:19:02,970 --> 00:19:09,000
this Dino format yeah we use prettier

00:19:06,290 --> 00:19:12,840
still although hopefully we'll be

00:19:09,000 --> 00:19:14,540
changing this this soon but I'm just

00:19:12,840 --> 00:19:18,799
going to use this as an example of

00:19:14,540 --> 00:19:21,270
formatting a bunch of code right and

00:19:18,799 --> 00:19:25,950
giving you a sense of of how long it

00:19:21,270 --> 00:19:28,650
runs this is this is runs like that

00:19:25,950 --> 00:19:31,140
I guess not not dissimilar to not

00:19:28,650 --> 00:19:34,950
dissimilar to to prettier if I do a get

00:19:31,140 --> 00:19:37,860
diff it's not exactly the same as

00:19:34,950 --> 00:19:40,890
prettier but it's pretty close

00:19:37,860 --> 00:19:44,580
seems seems like Dino format likes

00:19:40,890 --> 00:19:46,650
trailing commas right whereas whereas

00:19:44,580 --> 00:19:53,960
prettier are prettier current prettier

00:19:46,650 --> 00:19:53,960
situation does not so let me reset that

00:19:55,270 --> 00:20:04,940
Deno dock is too fast too fast

00:20:01,940 --> 00:20:08,750
Dino dock okay so first of all here's

00:20:04,940 --> 00:20:11,360
here's some some server and some some

00:20:08,750 --> 00:20:13,430
code this is our HTTP server so you can

00:20:11,360 --> 00:20:16,280
you can throw this in the web browser

00:20:13,430 --> 00:20:19,400
and see the code here what we have is a

00:20:16,280 --> 00:20:22,010
we're able to parse the ast and kind of

00:20:19,400 --> 00:20:25,070
display documentation and so if you type

00:20:22,010 --> 00:20:27,950
Dino dock and give a URL or a relative

00:20:25,070 --> 00:20:30,950
path to some local source code we will

00:20:27,950 --> 00:20:34,160
print out a bunch of documentation for

00:20:30,950 --> 00:20:37,610
this so we can parse out the the J s

00:20:34,160 --> 00:20:41,030
stock comments and the typescript types

00:20:37,610 --> 00:20:43,040
and kind of display them and you know

00:20:41,030 --> 00:20:44,960
you can kind of narrow in on some of

00:20:43,040 --> 00:20:47,120
this stuff so maybe if you want to learn

00:20:44,960 --> 00:20:49,280
more about server requests you you give

00:20:47,120 --> 00:20:52,100
that as another argument and you can you

00:20:49,280 --> 00:20:55,460
can kind of see see some more of it and

00:20:52,100 --> 00:20:57,550
of course we have JSON output so if you

00:20:55,460 --> 00:21:02,030
want to have kind of do a structured

00:20:57,550 --> 00:21:03,890
display of this and I think this doesn't

00:21:02,030 --> 00:21:06,230
work with the second argument so I think

00:21:03,890 --> 00:21:08,660
I need to do that right so if I if I

00:21:06,230 --> 00:21:12,230
give this JSON argument here then we get

00:21:08,660 --> 00:21:14,660
the same output that was displayed

00:21:12,230 --> 00:21:17,330
previously but but in kind of a computer

00:21:14,660 --> 00:21:20,390
readable form and what's cool about this

00:21:17,330 --> 00:21:23,140
is that we've actually taken this and

00:21:20,390 --> 00:21:28,010
built a website around it and so in the

00:21:23,140 --> 00:21:30,590
Dino website here if you go to one of

00:21:28,010 --> 00:21:34,250
these these source code links and click

00:21:30,590 --> 00:21:38,500
view documentation will actually render

00:21:34,250 --> 00:21:41,500
out that JSON into into a file into a

00:21:38,500 --> 00:21:45,290
documentation that you can view online

00:21:41,500 --> 00:21:48,440
so yeah I mean essentially any any URL

00:21:45,290 --> 00:21:50,960
yeah and by the way if you go to Dino

00:21:48,440 --> 00:21:53,870
doc and you can put in any any random

00:21:50,960 --> 00:21:56,120
URL here right including things that are

00:21:53,870 --> 00:22:01,060
not on Dino land and it should be able

00:21:56,120 --> 00:22:06,500
to generate documentation for for that

00:22:01,060 --> 00:22:08,090
for that URL so one more thing Dino lint

00:22:06,500 --> 00:22:11,809
this has just now

00:22:08,090 --> 00:22:17,299
come out and this is essentially our

00:22:11,809 --> 00:22:19,100
version of our version of eslint it's

00:22:17,299 --> 00:22:21,230
unstable still so you have to provide

00:22:19,100 --> 00:22:24,230
that unstable flag but if I give it a

00:22:21,230 --> 00:22:26,450
directory of source code which I'm going

00:22:24,230 --> 00:22:29,690
to give this CLI tests unit this is a

00:22:26,450 --> 00:22:33,260
bunch of source code that has not been

00:22:29,690 --> 00:22:37,880
Lintott yet you will see that it runs

00:22:33,260 --> 00:22:39,740
very fast our our Dino Lent program you

00:22:37,880 --> 00:22:43,010
know is is not feed does not yet have

00:22:39,740 --> 00:22:45,559
feature parity with with with yes lint

00:22:43,010 --> 00:22:50,600
but we're making fast progress with this

00:22:45,559 --> 00:22:54,649
and we've clocked it in about two orders

00:22:50,600 --> 00:22:56,840
of magnitude faster than yes lint so do

00:22:54,649 --> 00:23:01,309
check this out and I should mention that

00:22:56,840 --> 00:23:04,580
Dino lint is distributed as a standalone

00:23:01,309 --> 00:23:07,909
rust crate that is potentially usable

00:23:04,580 --> 00:23:11,980
inside outside of Dino itself and so

00:23:07,909 --> 00:23:16,940
potentially this could be used for other

00:23:11,980 --> 00:23:21,110
four node projects so not necessarily

00:23:16,940 --> 00:23:25,159
denote specific all right so I'm going

00:23:21,110 --> 00:23:28,010
quite slow here gotta speed it up right

00:23:25,159 --> 00:23:31,100
so I should mention that you know we've

00:23:28,010 --> 00:23:32,779
we've designed this this thing a bit

00:23:31,100 --> 00:23:35,500
differently than node note is kind of

00:23:32,779 --> 00:23:38,179
this monolithic command-line application

00:23:35,500 --> 00:23:41,029
Dino is not you know is a set of crates

00:23:38,179 --> 00:23:43,370
and we've built it this way because

00:23:41,029 --> 00:23:46,309
we've seen that there's there's certain

00:23:43,370 --> 00:23:48,260
use cases where you might want to

00:23:46,309 --> 00:23:51,380
execute some JavaScript but not

00:23:48,260 --> 00:23:53,630
necessarily spin up a whole node process

00:23:51,380 --> 00:23:56,539
right and and you know all of the things

00:23:53,630 --> 00:23:59,380
that come with that install NPM packages

00:23:56,539 --> 00:24:02,179
and whatnot so for example databases

00:23:59,380 --> 00:24:05,559
often use JavaScript for MapReduce

00:24:02,179 --> 00:24:08,750
functions or serverless products like

00:24:05,559 --> 00:24:10,460
CloudFlare workers might want to execute

00:24:08,750 --> 00:24:13,640
some JavaScript on every incoming

00:24:10,460 --> 00:24:17,390
request or say electron style GUI

00:24:13,640 --> 00:24:19,789
applications where we're like vs code

00:24:17,390 --> 00:24:21,620
where you just need to you need some

00:24:19,789 --> 00:24:25,460
program ability but you

00:24:21,620 --> 00:24:28,550
necessarily want the whole Dino

00:24:25,460 --> 00:24:31,130
executable so with that we've we've

00:24:28,550 --> 00:24:35,360
provided this Dino core cream which is a

00:24:31,130 --> 00:24:38,330
very much trimmed down API of the Dino

00:24:35,360 --> 00:24:39,080
executable and so I encourage you to

00:24:38,330 --> 00:24:41,540
look at that

00:24:39,080 --> 00:24:44,059
Dino core actually depends on an even

00:24:41,540 --> 00:24:48,370
lower level crate which is called rusty

00:24:44,059 --> 00:24:50,540
v8 this is our wrapper around v8 that is

00:24:48,370 --> 00:24:53,480
relatively safe

00:24:50,540 --> 00:24:55,550
I'm not going to it's it's not 1.0 yet

00:24:53,480 --> 00:25:00,650
so I'm not going to say that it's it's a

00:24:55,550 --> 00:25:03,860
completely safe API but it's a it's very

00:25:00,650 --> 00:25:08,179
close to being a completely safe way to

00:25:03,860 --> 00:25:10,130
interact with an extremely complex VM so

00:25:08,179 --> 00:25:13,490
please have a look if you're interested

00:25:10,130 --> 00:25:14,740
in that internal design of Dino I'm just

00:25:13,490 --> 00:25:17,570
going to speed through this really quick

00:25:14,740 --> 00:25:21,470
we have we designed this quite similarly

00:25:17,570 --> 00:25:23,780
to an operating system and so inside of

00:25:21,470 --> 00:25:26,720
Dino we as we have this idea of ops

00:25:23,780 --> 00:25:30,710
which are equivalent to syscalls that's

00:25:26,720 --> 00:25:31,940
how you reach out of the the VM and we

00:25:30,710 --> 00:25:34,429
have something called like file

00:25:31,940 --> 00:25:38,270
descriptors these are called resource

00:25:34,429 --> 00:25:40,160
IDs to not confuse things and processes

00:25:38,270 --> 00:25:41,990
are essentially equivalent to web

00:25:40,160 --> 00:25:44,660
workers in Dino by the way we use the

00:25:41,990 --> 00:25:47,570
standard web worker API that you get in

00:25:44,660 --> 00:25:50,090
the web browser and the way that we

00:25:47,570 --> 00:25:51,980
organize all of this is that basically

00:25:50,090 --> 00:25:55,940
the only way to call in and out of the

00:25:51,980 --> 00:25:58,730
VM is is using un8 arrays array buffers

00:25:55,940 --> 00:26:00,710
and you might think that that this sort

00:25:58,730 --> 00:26:03,620
of serialization is is quite slow but

00:26:00,710 --> 00:26:06,170
we've put a lot of effort into this and

00:26:03,620 --> 00:26:07,640
you know essentially there's these are

00:26:06,170 --> 00:26:11,780
zero copy operations

00:26:07,640 --> 00:26:13,429
there's we're essentially point passing

00:26:11,780 --> 00:26:17,900
pointers back and forth from from

00:26:13,429 --> 00:26:20,510
JavaScript to to rust and yeah I won't

00:26:17,900 --> 00:26:23,540
go into any any more details on that so

00:26:20,510 --> 00:26:28,640
as I mentioned earlier Dino is at one

00:26:23,540 --> 00:26:31,070
point O and the Dino API is stable for

00:26:28,640 --> 00:26:33,470
the foreseeable future we are fixing

00:26:31,070 --> 00:26:35,510
bugs fixing bugs and going to be fixing

00:26:33,470 --> 00:26:38,330
more bugs we will

00:26:35,510 --> 00:26:42,020
releasing minor releases one point X

00:26:38,330 --> 00:26:44,720
releases on a monthly cadence 13th of

00:26:42,020 --> 00:26:46,820
every month and yeah there's a lot of

00:26:44,720 --> 00:26:49,940
interesting future work like op crates

00:26:46,820 --> 00:26:53,780
which allows basically splits up the the

00:26:49,940 --> 00:26:56,810
CLI into into more useful bits we are

00:26:53,780 --> 00:26:59,420
thinking heavily about adding GPU

00:26:56,810 --> 00:27:01,430
support through through web GPU or WebGL

00:26:59,420 --> 00:27:03,830
API is to enable machine learning

00:27:01,430 --> 00:27:05,420
applications there's also this feature

00:27:03,830 --> 00:27:07,850
that people are pretty interested in

00:27:05,420 --> 00:27:10,310
which is you know compile which would

00:27:07,850 --> 00:27:13,640
take some JavaScript and compile it to a

00:27:10,310 --> 00:27:16,370
binary not really it would package up

00:27:13,640 --> 00:27:18,770
the JavaScript and it would take a v8

00:27:16,370 --> 00:27:20,210
and it would kind of bundle this all up

00:27:18,770 --> 00:27:24,200
but at the end of the day you would get

00:27:20,210 --> 00:27:27,320
in executable so that I think those

00:27:24,200 --> 00:27:31,820
things would be quite interesting please

00:27:27,320 --> 00:27:34,720
reach out if you want to get involved so

00:27:31,820 --> 00:27:34,720

YouTube URL: https://www.youtube.com/watch?v=doug6st5vAs


