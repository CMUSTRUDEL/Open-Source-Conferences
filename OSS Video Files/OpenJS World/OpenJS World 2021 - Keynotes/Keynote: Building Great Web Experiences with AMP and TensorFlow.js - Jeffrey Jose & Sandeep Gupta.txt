Title: Keynote: Building Great Web Experiences with AMP and TensorFlow.js - Jeffrey Jose & Sandeep Gupta
Publication date: 2021-06-01
Playlist: OpenJS World 2021 - Keynotes
Description: 
	Keynote: Building Great Web Experiences with AMP and TensorFlow.js - Jeffrey Jose, Product Manager, AMP, Google & Sandeep Gupta, Product Manager, TensorFlow, Google

Prioritizing user-experience isn't just for end user delight but it can also make great business sense. In this keynote, we will discuss two open source solutions from Google -- AMP and TensorFlow.js -- that helps you build great web experiences to innovate and stand out on the internet. In this talk, you will learn more about the upcoming Page experience update on Google Search, where user-experience as measured by Core Web Vitals are becoming a ranking factor. You will also learn about how machine learning and AI is transforming web experiences and how TensorFlow.js makes it easy for you to develop and use machine learning.
Captions: 
	00:00:00,080 --> 00:00:04,880
hi my name is jeffrey i'm a product

00:00:02,480 --> 00:00:06,319
manager at google working on amp

00:00:04,880 --> 00:00:08,480
and i'm joined by sandeep gupta a

00:00:06,319 --> 00:00:10,320
product manager on tensorflow.js at

00:00:08,480 --> 00:00:13,120
google

00:00:10,320 --> 00:00:14,880
our keynote is divided into two sections

00:00:13,120 --> 00:00:15,679
first we'll take a look at how the page

00:00:14,880 --> 00:00:18,320
experience

00:00:15,679 --> 00:00:19,840
and amp works together and then sandeep

00:00:18,320 --> 00:00:22,000
will walk us through

00:00:19,840 --> 00:00:23,199
using tensorflow.js to harness the power

00:00:22,000 --> 00:00:27,359
of machine learning

00:00:23,199 --> 00:00:27,359
to build novel experiences for the web

00:00:27,680 --> 00:00:31,199
speaking of the web web is the truly

00:00:30,720 --> 00:00:33,760
open

00:00:31,199 --> 00:00:35,200
and distributed system we have there are

00:00:33,760 --> 00:00:38,160
a few administrative things

00:00:35,200 --> 00:00:39,280
such as getting a domain name or hosting

00:00:38,160 --> 00:00:41,440
that you need to worry about

00:00:39,280 --> 00:00:44,000
but otherwise nobody stands between you

00:00:41,440 --> 00:00:45,840
and what you want to tell to the world

00:00:44,000 --> 00:00:47,680
from the early days of the internet web

00:00:45,840 --> 00:00:49,840
developers have used this open nature to

00:00:47,680 --> 00:00:51,840
build compelling web experiences

00:00:49,840 --> 00:00:53,600
sometimes of profit and sometimes just

00:00:51,840 --> 00:00:56,320
for fun

00:00:53,600 --> 00:00:57,920
as the user expectations have evolved we

00:00:56,320 --> 00:00:59,520
as web developers are tasked with a

00:00:57,920 --> 00:01:01,760
great responsibility to build

00:00:59,520 --> 00:01:03,520
truly unique web experiences that

00:01:01,760 --> 00:01:05,760
capture people's imaginations

00:01:03,520 --> 00:01:07,280
delight the users and ultimately

00:01:05,760 --> 00:01:09,520
persuade them to have an authentic

00:01:07,280 --> 00:01:11,680
connection with you

00:01:09,520 --> 00:01:13,760
this might be in the form of consuming

00:01:11,680 --> 00:01:16,560
content you produce or buying a service

00:01:13,760 --> 00:01:16,560
that you're providing

00:01:17,040 --> 00:01:20,320
a useful way to think about user

00:01:18,720 --> 00:01:23,439
experience is using the four

00:01:20,320 --> 00:01:25,600
pillars of ux they are loading

00:01:23,439 --> 00:01:27,439
which signifies how fast or slow the

00:01:25,600 --> 00:01:30,320
resources of the page is downloaded and

00:01:27,439 --> 00:01:32,479
displayed on the user's browser

00:01:30,320 --> 00:01:34,240
user annoyance an important pillar that

00:01:32,479 --> 00:01:35,600
quantifies some of the web page behavior

00:01:34,240 --> 00:01:38,240
that gets in the way of user

00:01:35,600 --> 00:01:41,200
accomplishing a task

00:01:38,240 --> 00:01:42,240
security and privacy a critical aspect

00:01:41,200 --> 00:01:46,000
of how safe

00:01:42,240 --> 00:01:48,720
secure and privacy friendly of web pages

00:01:46,000 --> 00:01:50,640
and accessibility the world health

00:01:48,720 --> 00:01:51,759
organization's disability health fact

00:01:50,640 --> 00:01:54,399
sheet finds that

00:01:51,759 --> 00:01:55,920
over a billion people about 15 percent

00:01:54,399 --> 00:01:58,799
of world's population

00:01:55,920 --> 00:02:00,960
have some form of disability we have a

00:01:58,799 --> 00:02:03,040
huge responsibility as web developers to

00:02:00,960 --> 00:02:06,079
build web pages that are inclusive

00:02:03,040 --> 00:02:06,079
to all users

00:02:06,159 --> 00:02:09,039
this framework nicely lines up with the

00:02:07,600 --> 00:02:11,360
page experience ranking update that

00:02:09,039 --> 00:02:13,680
google is launching mid-june

00:02:11,360 --> 00:02:15,520
page experience is a set of signals that

00:02:13,680 --> 00:02:17,040
measure how the users

00:02:15,520 --> 00:02:18,640
perceive while interacting with a web

00:02:17,040 --> 00:02:20,560
page that goes beyond just the

00:02:18,640 --> 00:02:22,239
informational value

00:02:20,560 --> 00:02:24,160
the page experience signal breaks apart

00:02:22,239 --> 00:02:25,599
into the four aforementioned pillars as

00:02:24,160 --> 00:02:28,000
follows

00:02:25,599 --> 00:02:30,480
for loading we have largest contentful

00:02:28,000 --> 00:02:32,879
paint and first input delay

00:02:30,480 --> 00:02:34,319
the largest contentful paint lcp for

00:02:32,879 --> 00:02:36,800
short is a metric that reports the

00:02:34,319 --> 00:02:37,519
render time of the largest image or text

00:02:36,800 --> 00:02:40,160
block

00:02:37,519 --> 00:02:40,959
visible within the viewport relative to

00:02:40,160 --> 00:02:44,480
when the page

00:02:40,959 --> 00:02:46,959
first started loading first input delay

00:02:44,480 --> 00:02:48,800
fid for short measures the time from

00:02:46,959 --> 00:02:49,519
when the user first interacts with the

00:02:48,800 --> 00:02:51,519
page

00:02:49,519 --> 00:02:53,680
that is when they click on a link tap on

00:02:51,519 --> 00:02:54,879
a button or use a custom javascript

00:02:53,680 --> 00:02:57,599
power control

00:02:54,879 --> 00:02:59,680
to the time when the browser is able to

00:02:57,599 --> 00:03:02,480
process the event handlers in response

00:02:59,680 --> 00:03:02,480
to that interaction

00:03:02,879 --> 00:03:06,000
for the user announce pillar we have

00:03:04,640 --> 00:03:09,760
cumulative layout shift

00:03:06,000 --> 00:03:11,519
cls for short cls measures the sum total

00:03:09,760 --> 00:03:14,080
of all the individual layout shift

00:03:11,519 --> 00:03:15,599
scores for every unexpected layout shift

00:03:14,080 --> 00:03:17,680
that occurs on a page

00:03:15,599 --> 00:03:19,440
a layout shift occurs when at any time a

00:03:17,680 --> 00:03:20,800
visible element changes its position

00:03:19,440 --> 00:03:24,080
from one rendered frame

00:03:20,800 --> 00:03:26,159
to next no

00:03:24,080 --> 00:03:28,080
intrusive interstitials is an existing

00:03:26,159 --> 00:03:28,560
search ranking policy and an associated

00:03:28,080 --> 00:03:30,879
signal

00:03:28,560 --> 00:03:32,640
used in search that detects the presence

00:03:30,879 --> 00:03:33,760
and use of interstitials that are user

00:03:32,640 --> 00:03:36,480
hostile

00:03:33,760 --> 00:03:37,280
such interstitials are often used to

00:03:36,480 --> 00:03:39,040
build

00:03:37,280 --> 00:03:41,280
to trick users to doing something that

00:03:39,040 --> 00:03:42,799
they do not want to preventing them from

00:03:41,280 --> 00:03:44,400
them from reading or interacting with

00:03:42,799 --> 00:03:45,280
the page they landed on from google

00:03:44,400 --> 00:03:47,040
search

00:03:45,280 --> 00:03:49,280
there are a lot of great uses of

00:03:47,040 --> 00:03:50,000
interstitials such as the ones required

00:03:49,280 --> 00:03:52,480
by the law

00:03:50,000 --> 00:03:53,120
gdpr for instance or an interstitial

00:03:52,480 --> 00:03:54,480
that provides

00:03:53,120 --> 00:03:56,239
updated business hours during the

00:03:54,480 --> 00:04:00,239
coronavirus pandemic

00:03:56,239 --> 00:04:01,920
these are not affected by the signal

00:04:00,239 --> 00:04:04,239
for security and privacy we have the

00:04:01,920 --> 00:04:05,760
https protocol signal

00:04:04,239 --> 00:04:07,200
users should be able to confidently

00:04:05,760 --> 00:04:08,799
browse the internet without having to

00:04:07,200 --> 00:04:12,159
worry about man in the middle attack or

00:04:08,799 --> 00:04:12,159
improper impersonations

00:04:12,319 --> 00:04:17,120
and lastly for the mobile friendliness

00:04:14,959 --> 00:04:18,880
signal covers the accessibility pillar

00:04:17,120 --> 00:04:20,160
which measures how effective the pages

00:04:18,880 --> 00:04:23,919
are on small screens

00:04:20,160 --> 00:04:23,919
often used by mobile phones

00:04:24,320 --> 00:04:28,000
the first three metrics largest

00:04:26,560 --> 00:04:29,840
contentful paint

00:04:28,000 --> 00:04:32,000
first input delay and cumulative layout

00:04:29,840 --> 00:04:33,840
shift are the core web vitals

00:04:32,000 --> 00:04:35,919
a set of metrics that apply to all web

00:04:33,840 --> 00:04:36,960
pages and should be measured by all site

00:04:35,919 --> 00:04:38,400
owners

00:04:36,960 --> 00:04:40,639
and that will be surfaced across all the

00:04:38,400 --> 00:04:42,720
google tools each of the core web vitals

00:04:40,639 --> 00:04:43,360
represents a distinct facet of user

00:04:42,720 --> 00:04:45,280
experience

00:04:43,360 --> 00:04:46,960
and is measurable in the field and

00:04:45,280 --> 00:04:48,080
reflects a real-world experience of a

00:04:46,960 --> 00:04:50,240
critical user-centric

00:04:48,080 --> 00:04:52,479
outcome they can be measured using

00:04:50,240 --> 00:04:53,680
javascript using these standard web apis

00:04:52,479 --> 00:04:55,440
in your browser

00:04:53,680 --> 00:04:59,360
and provides an excellent product

00:04:55,440 --> 00:04:59,360
agnostic path for instrumentation

00:04:59,680 --> 00:05:03,600
the core of vitals are not just a set of

00:05:01,840 --> 00:05:05,280
metrics but also a robust set of

00:05:03,600 --> 00:05:06,560
threshold guidance that map to user

00:05:05,280 --> 00:05:08,320
expectations

00:05:06,560 --> 00:05:09,759
the chrome team has done extensive

00:05:08,320 --> 00:05:11,840
research and come up with the guidance

00:05:09,759 --> 00:05:14,400
for what it means to be performing good

00:05:11,840 --> 00:05:16,240
poor or somewhere in between let's take

00:05:14,400 --> 00:05:17,680
an example of lcp

00:05:16,240 --> 00:05:19,440
lcp is where we measure the loading

00:05:17,680 --> 00:05:20,800
performance of the most meaningful

00:05:19,440 --> 00:05:22,400
content of the page

00:05:20,800 --> 00:05:24,240
values less than two and a half seconds

00:05:22,400 --> 00:05:25,600
means that the page is delivering a good

00:05:24,240 --> 00:05:28,080
page experience

00:05:25,600 --> 00:05:29,120
anything greater than four seconds means

00:05:28,080 --> 00:05:30,639
that the page is actually performing

00:05:29,120 --> 00:05:32,479
very very poorly

00:05:30,639 --> 00:05:34,400
similarly for first input delay 100

00:05:32,479 --> 00:05:35,840
milliseconds is the maximum delay users

00:05:34,400 --> 00:05:37,680
have to encounter during the initial

00:05:35,840 --> 00:05:39,360
input and its response

00:05:37,680 --> 00:05:40,960
anything greater than 300 milliseconds

00:05:39,360 --> 00:05:43,919
starts to feel like the page is frozen

00:05:40,960 --> 00:05:45,759
and leads to a bad user experience

00:05:43,919 --> 00:05:47,360
cumulative layout shift is a unit less

00:05:45,759 --> 00:05:51,280
metric

00:05:47,360 --> 00:05:53,360
anything less than 0.9 0.1 excuse me

00:05:51,280 --> 00:05:55,039
is considered to be good or anything

00:05:53,360 --> 00:05:57,919
greater than 0.25 is great

00:05:55,039 --> 00:05:57,919
is considered poor

00:05:58,960 --> 00:06:03,199
amp puts developers on a path to success

00:06:00,800 --> 00:06:04,720
not just by creating

00:06:03,199 --> 00:06:06,400
great pages but also helping you

00:06:04,720 --> 00:06:08,080
maintain that great page experience over

00:06:06,400 --> 00:06:10,160
a longer period of time

00:06:08,080 --> 00:06:11,600
this means the amp runtime provides

00:06:10,160 --> 00:06:13,520
developers with the constraints needed

00:06:11,600 --> 00:06:15,120
to create great performing pages

00:06:13,520 --> 00:06:16,560
and the use of amp cache further

00:06:15,120 --> 00:06:18,240
improves this because this

00:06:16,560 --> 00:06:21,120
allows you to have the pages experienced

00:06:18,240 --> 00:06:23,759
by your users near instantly

00:06:21,120 --> 00:06:24,240
however like many other frameworks are

00:06:23,759 --> 00:06:26,240
amp

00:06:24,240 --> 00:06:28,160
can't implement all the web development

00:06:26,240 --> 00:06:29,600
best practices into the runtime

00:06:28,160 --> 00:06:31,520
this is why in the run-up to the page

00:06:29,600 --> 00:06:33,280
experience ranking launch we've been

00:06:31,520 --> 00:06:35,039
encouraging developers to take a look at

00:06:33,280 --> 00:06:36,720
your amp pages to make sure your pages

00:06:35,039 --> 00:06:39,440
are performing very very well

00:06:36,720 --> 00:06:39,440
on your domain

00:06:40,400 --> 00:06:44,639
so the first step in starting to

00:06:42,000 --> 00:06:47,280
implement great page experience for your

00:06:44,639 --> 00:06:48,479
site starts at the amp core luckily the

00:06:47,280 --> 00:06:50,479
amp core which the amp

00:06:48,479 --> 00:06:52,400
project builds is comprised of

00:06:50,479 --> 00:06:54,880
extensions and the runtime

00:06:52,400 --> 00:06:56,639
have robust set of constraints

00:06:54,880 --> 00:06:58,160
implemented to make sure that the amp is

00:06:56,639 --> 00:06:59,599
performing very very well

00:06:58,160 --> 00:07:01,440
over the past several months we've

00:06:59,599 --> 00:07:03,680
invested heavily to making sure the core

00:07:01,440 --> 00:07:04,639
is super duper lightweight and extremely

00:07:03,680 --> 00:07:06,319
fast

00:07:04,639 --> 00:07:07,840
if you're using the amp framework you

00:07:06,319 --> 00:07:11,759
are taking advantage of this

00:07:07,840 --> 00:07:14,240
automatically the next building block

00:07:11,759 --> 00:07:15,759
is how the page is served code web

00:07:14,240 --> 00:07:17,599
vitals as i mentioned this

00:07:15,759 --> 00:07:19,680
is determined for the real world

00:07:17,599 --> 00:07:21,120
outcomes that means

00:07:19,680 --> 00:07:23,280
when the real users are interacting with

00:07:21,120 --> 00:07:23,840
the page that's the signal that is

00:07:23,280 --> 00:07:26,960
actually

00:07:23,840 --> 00:07:29,680
powering the page experience signal

00:07:26,960 --> 00:07:31,520
in case of amp this is uh this could

00:07:29,680 --> 00:07:34,080
pages could be served either from the

00:07:31,520 --> 00:07:35,759
publisher's domain or from amp cache and

00:07:34,080 --> 00:07:36,800
depending on how the users encounter the

00:07:35,759 --> 00:07:38,240
content

00:07:36,800 --> 00:07:39,599
many sites will see a significant

00:07:38,240 --> 00:07:42,319
portion of the amp visits actually

00:07:39,599 --> 00:07:44,400
happening on your own domain

00:07:42,319 --> 00:07:46,080
so to get the strong strongest possible

00:07:44,400 --> 00:07:47,919
user experience on amp pages we

00:07:46,080 --> 00:07:50,639
encourage you to take a look at

00:07:47,919 --> 00:07:52,639
how your pages are performing the best

00:07:50,639 --> 00:07:55,039
way to get started is to use the amp

00:07:52,639 --> 00:07:56,879
optimizer this is a set of tools that we

00:07:55,039 --> 00:07:58,720
use on amp cache

00:07:56,879 --> 00:08:01,120
and we believe this provides great

00:07:58,720 --> 00:08:03,599
optimizations to your amp pages

00:08:01,120 --> 00:08:04,160
you can learn more about amp optimizers

00:08:03,599 --> 00:08:05,520
on the

00:08:04,160 --> 00:08:07,680
link that you see on the screen right

00:08:05,520 --> 00:08:09,199
now

00:08:07,680 --> 00:08:11,280
and that's how amp project thinks about

00:08:09,199 --> 00:08:13,280
the page experience we want to make sure

00:08:11,280 --> 00:08:14,319
that amp allows you to create great page

00:08:13,280 --> 00:08:16,319
experience at the same time

00:08:14,319 --> 00:08:17,919
also continue to improve the page

00:08:16,319 --> 00:08:19,360
experience without you having to do a

00:08:17,919 --> 00:08:21,680
lot of work

00:08:19,360 --> 00:08:22,599
i'll now turn it over to sandeep to talk

00:08:21,680 --> 00:08:25,759
more about

00:08:22,599 --> 00:08:27,360
tensorflow.js thank you jeffrey my name

00:08:25,759 --> 00:08:30,000
is sandeep gupta and i'm the product

00:08:27,360 --> 00:08:31,440
manager for tensorflow.js at google

00:08:30,000 --> 00:08:33,440
so jeffrey talked about some key

00:08:31,440 --> 00:08:35,680
concepts in ux that are driving next

00:08:33,440 --> 00:08:38,000
generation web experiences

00:08:35,680 --> 00:08:39,760
i want to talk about another technology

00:08:38,000 --> 00:08:41,039
which has the ability to transform web

00:08:39,760 --> 00:08:44,159
experiences

00:08:41,039 --> 00:08:46,000
and that is machine learning machine

00:08:44,159 --> 00:08:48,160
learning touches our lives daily

00:08:46,000 --> 00:08:49,920
with applications across many fields

00:08:48,160 --> 00:08:52,839
such as healthcare education

00:08:49,920 --> 00:08:54,320
energy transportation sustainability and

00:08:52,839 --> 00:08:56,399
accessibility

00:08:54,320 --> 00:08:58,720
due to publicly available large data

00:08:56,399 --> 00:08:59,920
sets more powerful computing at our

00:08:58,720 --> 00:09:02,480
fingertips

00:08:59,920 --> 00:09:03,839
and research in new methods we are

00:09:02,480 --> 00:09:05,839
seeing improvements in

00:09:03,839 --> 00:09:07,440
all kinds of products and services

00:09:05,839 --> 00:09:09,680
powered by machine learning

00:09:07,440 --> 00:09:11,200
and you see some examples of that here

00:09:09,680 --> 00:09:13,120
on this slide

00:09:11,200 --> 00:09:15,519
such as being used to power platforms

00:09:13,120 --> 00:09:17,680
for education in classrooms

00:09:15,519 --> 00:09:19,440
helping detect diseases or predict

00:09:17,680 --> 00:09:21,279
natural disasters

00:09:19,440 --> 00:09:24,800
and giving people new ways of

00:09:21,279 --> 00:09:26,399
communicating and interacting

00:09:24,800 --> 00:09:27,839
and we're beginning to see how machine

00:09:26,399 --> 00:09:29,440
learning can help improve web

00:09:27,839 --> 00:09:31,040
experiences as well

00:09:29,440 --> 00:09:33,120
whether it is to interactively

00:09:31,040 --> 00:09:34,720
experience products such as this virtual

00:09:33,120 --> 00:09:37,680
makeup try on web app

00:09:34,720 --> 00:09:39,360
by l'oreal or accessibility tools such

00:09:37,680 --> 00:09:41,279
as the one shown here in the middle

00:09:39,360 --> 00:09:42,800
where a person is playing a keyboard by

00:09:41,279 --> 00:09:45,120
moving their head

00:09:42,800 --> 00:09:47,519
or apps that can detect body pose and

00:09:45,120 --> 00:09:49,680
use that in many useful ways

00:09:47,519 --> 00:09:51,279
machine learning has lot of uses for the

00:09:49,680 --> 00:09:52,720
web

00:09:51,279 --> 00:09:55,040
let's take a look at some specific

00:09:52,720 --> 00:09:58,480
examples of how web developers

00:09:55,040 --> 00:09:58,480
have been using machine learning

00:09:58,800 --> 00:10:02,560
in-space is a virtual learning and

00:10:00,880 --> 00:10:05,040
collaboration platform

00:10:02,560 --> 00:10:06,880
and they use real-time toxicity filters

00:10:05,040 --> 00:10:09,279
in their web conferencing app

00:10:06,880 --> 00:10:11,120
so when a user types something bad it's

00:10:09,279 --> 00:10:13,040
flagged before it's even sent to the

00:10:11,120 --> 00:10:14,959
server for processing

00:10:13,040 --> 00:10:17,279
it alerts the user that they may want to

00:10:14,959 --> 00:10:19,440
reconsider what they are about to send

00:10:17,279 --> 00:10:20,880
creating a more pleasant and a safer

00:10:19,440 --> 00:10:25,120
conversational experience

00:10:20,880 --> 00:10:26,079
on the platform another example is from

00:10:25,120 --> 00:10:28,240
include health

00:10:26,079 --> 00:10:29,680
which is a musculoskeletal care delivery

00:10:28,240 --> 00:10:31,600
tech company

00:10:29,680 --> 00:10:34,560
they're using body pose estimation

00:10:31,600 --> 00:10:37,600
models to deliver guided physiotherapy

00:10:34,560 --> 00:10:38,720
at scale with many people unable to

00:10:37,600 --> 00:10:41,279
leave their homes

00:10:38,720 --> 00:10:43,200
or travel these days this technology

00:10:41,279 --> 00:10:44,000
allows for a remote diagnosis and

00:10:43,200 --> 00:10:46,720
treatment

00:10:44,000 --> 00:10:48,000
from the comfort of their own home using

00:10:46,720 --> 00:10:50,160
just a web browser

00:10:48,000 --> 00:10:53,760
and a standard webcam that almost

00:10:50,160 --> 00:10:53,760
everyone has easy access to

00:10:54,079 --> 00:10:58,959
this is an example for creative design

00:10:57,040 --> 00:11:01,279
you can bring a character to life by

00:10:58,959 --> 00:11:03,440
using pre-made machine learning models

00:11:01,279 --> 00:11:05,040
that can estimate body pose and facial

00:11:03,440 --> 00:11:07,680
gestures

00:11:05,040 --> 00:11:09,839
this pose estimator tool was created by

00:11:07,680 --> 00:11:11,839
the partner innovation team at google

00:11:09,839 --> 00:11:13,200
and it allows you to draw any svg

00:11:11,839 --> 00:11:15,680
character you like

00:11:13,200 --> 00:11:16,720
and then use your body to control it in

00:11:15,680 --> 00:11:18,720
real time

00:11:16,720 --> 00:11:21,920
giving animators a motion capture

00:11:18,720 --> 00:11:24,800
solution to drive 2d character animation

00:11:21,920 --> 00:11:25,360
that anyone can use with just a webcam

00:11:24,800 --> 00:11:27,760
and yes

00:11:25,360 --> 00:11:29,839
all of this is running entirely in a web

00:11:27,760 --> 00:11:29,839
browser

00:11:30,480 --> 00:11:34,320
here's a core enterprise use case

00:11:34,800 --> 00:11:37,839
so page load time is a very important

00:11:37,279 --> 00:11:40,640
factor

00:11:37,839 --> 00:11:42,079
for user experience on a website and

00:11:40,640 --> 00:11:44,320
studies have shown that it can

00:11:42,079 --> 00:11:46,240
dramatically impact page views

00:11:44,320 --> 00:11:48,320
time spent on the site and even

00:11:46,240 --> 00:11:49,760
conversions and clicks on an ecommerce

00:11:48,320 --> 00:11:51,519
site

00:11:49,760 --> 00:11:53,519
machine learning can help predict user's

00:11:51,519 --> 00:11:55,760
navigation patterns on your site

00:11:53,519 --> 00:11:56,560
and by selectively pre-fetching the page

00:11:55,760 --> 00:12:00,079
assets

00:11:56,560 --> 00:12:01,680
can significantly improve page load time

00:12:00,079 --> 00:12:04,240
here you can see that the site on the

00:12:01,680 --> 00:12:06,800
right with predictive prefetching

00:12:04,240 --> 00:12:10,160
loads twice as fast as the unoptimized

00:12:06,800 --> 00:12:11,600
one on the left

00:12:10,160 --> 00:12:13,360
so hopefully i've convinced you that

00:12:11,600 --> 00:12:15,360
machine learning can be a very powerful

00:12:13,360 --> 00:12:17,120
and useful tool for you

00:12:15,360 --> 00:12:21,040
so now you may be wondering is it easy

00:12:17,120 --> 00:12:23,279
to use do i first need to learn python

00:12:21,040 --> 00:12:26,000
well the answer is no or i wouldn't be

00:12:23,279 --> 00:12:28,320
here speaking at the openjs world

00:12:26,000 --> 00:12:30,320
so tensorflow.js is a library for

00:12:28,320 --> 00:12:32,880
machine learning in javascript

00:12:30,320 --> 00:12:33,920
that can run in the browser or on the

00:12:32,880 --> 00:12:37,279
client side

00:12:33,920 --> 00:12:39,279
or on servers with node.js it provides

00:12:37,279 --> 00:12:40,480
an easy javascript api

00:12:39,279 --> 00:12:43,279
through which you can use machine

00:12:40,480 --> 00:12:45,600
learning with just a few lines of code

00:12:43,279 --> 00:12:47,440
by running in the browser it enables low

00:12:45,600 --> 00:12:50,079
latency execution

00:12:47,440 --> 00:12:52,160
lower server costs for your applications

00:12:50,079 --> 00:12:52,720
and by keeping user data on the client

00:12:52,160 --> 00:12:54,480
side

00:12:52,720 --> 00:12:56,079
it enables privacy sensitive

00:12:54,480 --> 00:12:58,959
applications

00:12:56,079 --> 00:13:01,920
lastly it is gpu accelerated so you get

00:12:58,959 --> 00:13:01,920
great performance

00:13:02,079 --> 00:13:05,600
with tensorflow.js you can write your

00:13:04,240 --> 00:13:08,399
application code once

00:13:05,600 --> 00:13:10,480
and use it anywhere and running ml in

00:13:08,399 --> 00:13:12,880
the web has some unique advantages

00:13:10,480 --> 00:13:13,600
over running it in native apps for

00:13:12,880 --> 00:13:15,920
example

00:13:13,600 --> 00:13:18,320
there is zero install needed you can

00:13:15,920 --> 00:13:21,680
reach an audience of billions of users

00:13:18,320 --> 00:13:24,079
instantly simply by sharing a url

00:13:21,680 --> 00:13:26,720
with no complex environment setup for

00:13:24,079 --> 00:13:26,720
your users

00:13:27,600 --> 00:13:30,720
since javascript is a very versatile

00:13:29,600 --> 00:13:33,120
language that can run

00:13:30,720 --> 00:13:34,800
on a wide variety of platforms there's a

00:13:33,120 --> 00:13:36,800
large list of environments where

00:13:34,800 --> 00:13:38,560
tensorflow.js can be used

00:13:36,800 --> 00:13:40,959
so you can use it client-side in all the

00:13:38,560 --> 00:13:44,000
popular web browsers as we mentioned

00:13:40,959 --> 00:13:45,279
or on server side via node.js taking

00:13:44,000 --> 00:13:48,639
advantage of the huge

00:13:45,279 --> 00:13:49,600
npm package ecosystem you can run it

00:13:48,639 --> 00:13:52,000
natively on

00:13:49,600 --> 00:13:54,240
mobile platforms via react native

00:13:52,000 --> 00:13:56,800
angular or pwas

00:13:54,240 --> 00:13:58,000
and even on iot devices such as

00:13:56,800 --> 00:14:02,399
raspberry pi

00:13:58,000 --> 00:14:04,000
via node with tensorflow.js you can run

00:14:02,399 --> 00:14:05,519
existing pre-trained machine learning

00:14:04,000 --> 00:14:07,440
models

00:14:05,519 --> 00:14:08,880
you can customize models for your use

00:14:07,440 --> 00:14:11,760
case by retraining them

00:14:08,880 --> 00:14:12,320
on your own data or write your own

00:14:11,760 --> 00:14:14,399
models

00:14:12,320 --> 00:14:16,160
completely from scratch just like you

00:14:14,399 --> 00:14:19,519
may already be doing in python

00:14:16,160 --> 00:14:19,519
but now in javascript

00:14:19,839 --> 00:14:23,920
we have released many pre-made models

00:14:22,079 --> 00:14:26,320
which are ready to use out of the box

00:14:23,920 --> 00:14:27,839
with an easy high-level api

00:14:26,320 --> 00:14:30,560
these models range across many

00:14:27,839 --> 00:14:33,519
categories such as vision body

00:14:30,560 --> 00:14:36,399
text and sound for you to use you can

00:14:33,519 --> 00:14:39,360
check them out on tensorflow.org

00:14:36,399 --> 00:14:40,399
js slash models and you see them and you

00:14:39,360 --> 00:14:41,440
can check out the demos and

00:14:40,399 --> 00:14:42,959
documentation

00:14:41,440 --> 00:14:45,839
and we are constantly adding to this

00:14:42,959 --> 00:14:45,839
collection

00:14:45,920 --> 00:14:49,760
so now let's take a quick look at what

00:14:47,680 --> 00:14:52,079
this looks like in practice

00:14:49,760 --> 00:14:55,760
we will look at a text example built

00:14:52,079 --> 00:14:57,920
with our question and answer model

00:14:55,760 --> 00:15:00,240
so let's say you want to build an app to

00:14:57,920 --> 00:15:02,720
help find the answer to a question

00:15:00,240 --> 00:15:04,240
in any piece of text that you present to

00:15:02,720 --> 00:15:06,000
it

00:15:04,240 --> 00:15:09,279
here we have a chrome extension that

00:15:06,000 --> 00:15:11,440
does this on the text on any web page

00:15:09,279 --> 00:15:12,720
just type your question and the model

00:15:11,440 --> 00:15:15,199
provides an answer

00:15:12,720 --> 00:15:18,240
and scrolls to the part of the page that

00:15:15,199 --> 00:15:20,560
most likely answers the question

00:15:18,240 --> 00:15:22,560
examples like this are now possible with

00:15:20,560 --> 00:15:23,360
the new birth based question and answer

00:15:22,560 --> 00:15:26,399
model

00:15:23,360 --> 00:15:28,480
in tensorflow.js and to do this

00:15:26,399 --> 00:15:30,720
you just need a few lines of code so

00:15:28,480 --> 00:15:32,560
let's take a look

00:15:30,720 --> 00:15:34,959
first we import the tensorflow.js

00:15:32,560 --> 00:15:38,000
library and the premode model

00:15:34,959 --> 00:15:39,680
q a model that we want to use these are

00:15:38,000 --> 00:15:41,120
conveniently loaded from our hosted

00:15:39,680 --> 00:15:42,560
scripts so you don't have to install

00:15:41,120 --> 00:15:44,720
anything

00:15:42,560 --> 00:15:46,480
next we can define the text we wish to

00:15:44,720 --> 00:15:47,199
search this could be some text on a

00:15:46,480 --> 00:15:50,320
website

00:15:47,199 --> 00:15:52,000
here we are just using a simple string

00:15:50,320 --> 00:15:53,360
we then also define the question the

00:15:52,000 --> 00:15:54,959
user wants to ask

00:15:53,360 --> 00:15:58,000
and this could come from some input

00:15:54,959 --> 00:15:58,000
query in a real app

00:15:58,560 --> 00:16:03,040
now we load the question and answer

00:16:00,079 --> 00:16:05,040
model itself with qna dot load method

00:16:03,040 --> 00:16:06,639
as this may take a few seconds to load

00:16:05,040 --> 00:16:07,440
it's performed as an asynchronous

00:16:06,639 --> 00:16:09,440
operation

00:16:07,440 --> 00:16:10,639
so we are using the then keyword here

00:16:09,440 --> 00:16:13,279
and to wait for it

00:16:10,639 --> 00:16:13,920
for it to be ready once the model is

00:16:13,279 --> 00:16:15,360
available

00:16:13,920 --> 00:16:18,560
our function will be called with the

00:16:15,360 --> 00:16:18,560
loaded model passed in

00:16:18,639 --> 00:16:23,360
finally we can call our model dot find

00:16:21,680 --> 00:16:25,279
answers method

00:16:23,360 --> 00:16:27,040
we pass to this function the question we

00:16:25,279 --> 00:16:27,839
want to answer along with our search

00:16:27,040 --> 00:16:30,240
text

00:16:27,839 --> 00:16:31,680
and when this completes it will return

00:16:30,240 --> 00:16:33,279
an answers object

00:16:31,680 --> 00:16:36,000
from which we can get the most likely

00:16:33,279 --> 00:16:38,160
answer from the given passage of text

00:16:36,000 --> 00:16:39,680
in this example the model predicted cats

00:16:38,160 --> 00:16:41,839
as the answer to our question

00:16:39,680 --> 00:16:44,399
which we proposed which is correct given

00:16:41,839 --> 00:16:45,920
the text we had to search

00:16:44,399 --> 00:16:48,959
and that's all there is to it pretty

00:16:45,920 --> 00:16:51,120
simple so give it a try

00:16:48,959 --> 00:16:53,120
the exact same workflow works for using

00:16:51,120 --> 00:16:55,680
any of our pre-trained models

00:16:53,120 --> 00:16:56,800
here are some of our most popular models

00:16:55,680 --> 00:16:59,040
coco ssd

00:16:56,800 --> 00:16:59,839
is an object detection model which can

00:16:59,040 --> 00:17:02,320
identify

00:16:59,839 --> 00:17:04,160
90 different object classes and show you

00:17:02,320 --> 00:17:07,600
the bounding boxes in the images

00:17:04,160 --> 00:17:07,600
where the detected objects are

00:17:07,839 --> 00:17:11,839
media pipe face mesh is a high

00:17:09,839 --> 00:17:14,480
resolution face tracking model

00:17:11,839 --> 00:17:15,520
which can recognize 468 key points on

00:17:14,480 --> 00:17:18,079
the face

00:17:15,520 --> 00:17:18,640
it's only 3 megabytes in size and it

00:17:18,079 --> 00:17:21,120
provides

00:17:18,640 --> 00:17:22,319
real-time face analysis for detecting

00:17:21,120 --> 00:17:24,799
facial gestures

00:17:22,319 --> 00:17:25,600
lips and eye movements this has many

00:17:24,799 --> 00:17:27,679
applications

00:17:25,600 --> 00:17:30,480
in retail entertainment and

00:17:27,679 --> 00:17:30,480
accessibility

00:17:31,120 --> 00:17:34,559
for human pose estimation we have a

00:17:32,720 --> 00:17:35,600
powerful and easy to use post detection

00:17:34,559 --> 00:17:37,039
api

00:17:35,600 --> 00:17:38,400
which supports three different models

00:17:37,039 --> 00:17:39,679
for a variety of performance and

00:17:38,400 --> 00:17:41,520
accuracy needs

00:17:39,679 --> 00:17:43,120
we recently added two powerful new

00:17:41,520 --> 00:17:45,039
models in this api

00:17:43,120 --> 00:17:48,000
movenet which is an ultra fast and

00:17:45,039 --> 00:17:49,919
accurate model that tracks 17 key points

00:17:48,000 --> 00:17:51,120
optimized for diverse poses and fast

00:17:49,919 --> 00:17:53,440
actions

00:17:51,120 --> 00:17:55,600
and the second media pipes blaze pose

00:17:53,440 --> 00:17:56,640
which gives 33 key points and this extra

00:17:55,600 --> 00:17:58,840
granularity

00:17:56,640 --> 00:18:00,799
may allow better tracking for certain

00:17:58,840 --> 00:18:02,320
applications

00:18:00,799 --> 00:18:04,160
so you can do a lot with our pre-trained

00:18:02,320 --> 00:18:04,799
models out of the box that i showed so

00:18:04,160 --> 00:18:06,720
far

00:18:04,799 --> 00:18:10,080
but sometimes you need to train a custom

00:18:06,720 --> 00:18:12,160
model for your use case

00:18:10,080 --> 00:18:14,160
google cloud's auto ml service lets you

00:18:12,160 --> 00:18:15,679
train powerful custom models on large

00:18:14,160 --> 00:18:18,799
amounts of data in the cloud

00:18:15,679 --> 00:18:20,720
no machine learning expertise necessary

00:18:18,799 --> 00:18:22,320
automl takes care of creating the best

00:18:20,720 --> 00:18:23,760
model for your training data

00:18:22,320 --> 00:18:25,520
and shows you how your model is

00:18:23,760 --> 00:18:26,559
performing on various evaluation

00:18:25,520 --> 00:18:28,080
criteria

00:18:26,559 --> 00:18:30,000
you can also choose whether you want a

00:18:28,080 --> 00:18:30,720
model with higher accuracy or faster

00:18:30,000 --> 00:18:33,919
prediction

00:18:30,720 --> 00:18:35,520
or a trade-off between the two and once

00:18:33,919 --> 00:18:37,039
your model has trained you can either

00:18:35,520 --> 00:18:39,120
create a cloud endpoint

00:18:37,039 --> 00:18:40,799
or you can conveniently export the model

00:18:39,120 --> 00:18:42,240
in tensorflow.js format

00:18:40,799 --> 00:18:44,720
and then deploy it in your web

00:18:42,240 --> 00:18:46,400
application

00:18:44,720 --> 00:18:47,919
another way to train a model easily in

00:18:46,400 --> 00:18:50,640
the browser interactively

00:18:47,919 --> 00:18:52,799
is by using teachable machine this lets

00:18:50,640 --> 00:18:53,760
you train some common ml models directly

00:18:52,799 --> 00:18:55,520
in the browser

00:18:53,760 --> 00:18:57,679
and then exporting the trained model for

00:18:55,520 --> 00:19:00,720
your use i highly recommend playing

00:18:57,679 --> 00:19:00,720
around with this tool

00:19:00,880 --> 00:19:04,799
so this was a quick introduction on how

00:19:03,120 --> 00:19:06,960
you can use machine learning to give

00:19:04,799 --> 00:19:08,960
your web app superpowers

00:19:06,960 --> 00:19:11,679
for more resources and getting started

00:19:08,960 --> 00:19:13,840
material visit our website shown here

00:19:11,679 --> 00:19:16,320
and join the community discussion group

00:19:13,840 --> 00:19:18,480
on discuss.tensorflow.org

00:19:16,320 --> 00:19:20,320
we are curious to see what you built

00:19:18,480 --> 00:19:23,360
check out other users creations

00:19:20,320 --> 00:19:26,559
and share your own work on made with

00:19:23,360 --> 00:19:28,240
tfjs on twitter

00:19:26,559 --> 00:19:34,160
thank you so much for listening and

00:19:28,240 --> 00:19:34,160

YouTube URL: https://www.youtube.com/watch?v=ehbvMjTJB2U


