Title: OpenJS Foundation AMA- ESLint
Publication date: 2020-09-02
Playlist: OpenJS AMAs
Description: 
	The OpenJS Foundation is a member-supported non-profit organization that provides a neutral home for some of the most important project in the JavaScript ecosystem.  
Learn more and join us at https://openjsf.org
Captions: 
	00:00:07,040 --> 00:00:12,080
great

00:00:08,240 --> 00:00:15,599
and we are live um welcome everybody

00:00:12,080 --> 00:00:17,199
to the openjs foundations monthly ama

00:00:15,599 --> 00:00:19,279
where we spotlight cool things and

00:00:17,199 --> 00:00:21,680
projects happening in the community

00:00:19,279 --> 00:00:22,400
and we get your questions answered um

00:00:21,680 --> 00:00:25,519
today

00:00:22,400 --> 00:00:29,519
we have kai cataldo and brandon mills

00:00:25,519 --> 00:00:32,880
from eslint um and before i hand it over

00:00:29,519 --> 00:00:34,559
to these fine folks i

00:00:32,880 --> 00:00:36,719
wanted to let you know how to

00:00:34,559 --> 00:00:40,719
participate in today's ama

00:00:36,719 --> 00:00:44,000
um you can either drop your question

00:00:40,719 --> 00:00:47,120
in the youtube chat or tag us

00:00:44,000 --> 00:00:48,160
on twitter at openjsf and ask us your

00:00:47,120 --> 00:00:51,440
questions

00:00:48,160 --> 00:00:55,680
and with that i'm going to hand it over

00:00:51,440 --> 00:00:55,680
to kai and brandon

00:00:57,120 --> 00:01:01,199
hi um i'm kai first of all thanks for

00:01:00,160 --> 00:01:03,359
having us today

00:01:01,199 --> 00:01:05,119
um we're really excited to be doing this

00:01:03,359 --> 00:01:08,320
um just a little background about

00:01:05,119 --> 00:01:11,439
myself um i am a former musician

00:01:08,320 --> 00:01:12,880
turned web developer who's been working

00:01:11,439 --> 00:01:15,200
on open source projects

00:01:12,880 --> 00:01:15,920
namely in in the javascript tooling

00:01:15,200 --> 00:01:19,200
space

00:01:15,920 --> 00:01:22,479
uh for about i think five years now

00:01:19,200 --> 00:01:25,600
four or five years um

00:01:22,479 --> 00:01:28,159
i got involved in open source uh

00:01:25,600 --> 00:01:28,799
at adobe where i worked on a team with

00:01:28,159 --> 00:01:33,119
henry

00:01:28,799 --> 00:01:36,400
joo who is a maintainer of babel

00:01:33,119 --> 00:01:38,479
he introduced me to to linting and to

00:01:36,400 --> 00:01:40,000
and help me actually land my first pr

00:01:38,479 --> 00:01:42,399
which is um

00:01:40,000 --> 00:01:43,759
what sparked my interest in all of this

00:01:42,399 --> 00:01:45,280
um

00:01:43,759 --> 00:01:47,119
and yeah i've been on the technical

00:01:45,280 --> 00:01:50,240
steering committee for eslid for

00:01:47,119 --> 00:01:53,759
past couple years um and as of last

00:01:50,240 --> 00:01:56,159
winter um i was hired as the first

00:01:53,759 --> 00:01:59,200
dedicated maintainer for eslint

00:01:56,159 --> 00:02:00,000
um and so i've been uh working part-time

00:01:59,200 --> 00:02:03,040
on the project

00:02:00,000 --> 00:02:06,399
for past seven or eight months i guess

00:02:03,040 --> 00:02:11,119
um and um

00:02:06,399 --> 00:02:11,119
i'm also a maintainer of babel as well

00:02:11,360 --> 00:02:15,360
uh yeah i guess that's that's all about

00:02:13,440 --> 00:02:18,720
me

00:02:15,360 --> 00:02:21,040
very cool well i'm brandon um i am also

00:02:18,720 --> 00:02:22,319
on the eslint technical steering

00:02:21,040 --> 00:02:25,520
committee i

00:02:22,319 --> 00:02:29,280
have been contributing since 2014

00:02:25,520 --> 00:02:32,000
i think i

00:02:29,280 --> 00:02:34,239
started contributing to open source when

00:02:32,000 --> 00:02:36,400
i found

00:02:34,239 --> 00:02:37,920
abstract syntax trees as part of a

00:02:36,400 --> 00:02:40,000
parser's class

00:02:37,920 --> 00:02:42,000
in school and thought it was pretty cool

00:02:40,000 --> 00:02:44,480
and realized there was a lot that

00:02:42,000 --> 00:02:45,120
i could do with abstract syntax trees

00:02:44,480 --> 00:02:47,360
and

00:02:45,120 --> 00:02:49,200
saw this really cool eslint project that

00:02:47,360 --> 00:02:51,280
was new for javascript

00:02:49,200 --> 00:02:53,040
and started playing around with it and

00:02:51,280 --> 00:02:55,599
writing rules and

00:02:53,040 --> 00:02:56,640
kept contributing and i remember my very

00:02:55,599 --> 00:02:59,200
first

00:02:56,640 --> 00:03:00,879
open source pull request i did not have

00:02:59,200 --> 00:03:01,680
somebody like henry to be a mentor for

00:03:00,879 --> 00:03:04,319
that

00:03:01,680 --> 00:03:05,519
it was just pushing some code out into

00:03:04,319 --> 00:03:07,680
the ether

00:03:05,519 --> 00:03:09,920
and all of a sudden it was merged and

00:03:07,680 --> 00:03:13,280
released which is a really cool feeling

00:03:09,920 --> 00:03:14,000
and i haven't lost that contributing to

00:03:13,280 --> 00:03:18,640
open source

00:03:14,000 --> 00:03:22,159
can be really cool like that

00:03:18,640 --> 00:03:26,560
so do we want to start off with

00:03:22,159 --> 00:03:31,680
just background on eslint and all that

00:03:26,560 --> 00:03:34,560
sounds good to me okay so the

00:03:31,680 --> 00:03:35,760
founder of eslint nicholas is not on the

00:03:34,560 --> 00:03:38,400
call today

00:03:35,760 --> 00:03:39,120
so what you'll be getting is the summary

00:03:38,400 --> 00:03:42,640
as best

00:03:39,120 --> 00:03:44,319
as kai and i can tell it um but earlier

00:03:42,640 --> 00:03:47,599
on in javascript there was

00:03:44,319 --> 00:03:50,799
jslint and js hint and

00:03:47,599 --> 00:03:52,720
as i understand it the biggest

00:03:50,799 --> 00:03:56,720
motivation for eslint

00:03:52,720 --> 00:03:59,599
was to be completely pluggable and so

00:03:56,720 --> 00:04:02,080
eslint will look at your code parse it

00:03:59,599 --> 00:04:05,840
turn it into an abstract syntax tree

00:04:02,080 --> 00:04:07,760
and through whatever configuration

00:04:05,840 --> 00:04:09,040
you provide and whatever plugins you

00:04:07,760 --> 00:04:12,480
provide

00:04:09,040 --> 00:04:13,040
it will say hey i found this problem

00:04:12,480 --> 00:04:14,480
here

00:04:13,040 --> 00:04:16,479
you're using this variable that you

00:04:14,480 --> 00:04:17,519
haven't defined and there's something

00:04:16,479 --> 00:04:20,000
over here that you might want to take a

00:04:17,519 --> 00:04:22,079
look at this doesn't seem right

00:04:20,000 --> 00:04:23,120
and that's all done through your plugins

00:04:22,079 --> 00:04:26,240
your rules

00:04:23,120 --> 00:04:30,160
your your configuration

00:04:26,240 --> 00:04:30,160
on that abstract syntax tree and

00:04:30,240 --> 00:04:34,800
when nicholas started it there was no

00:04:33,120 --> 00:04:37,840
ecosystem

00:04:34,800 --> 00:04:41,280
and all the rules were in core whereas

00:04:37,840 --> 00:04:42,639
now we've got a large ecosystem of a ton

00:04:41,280 --> 00:04:45,600
of plug-ins

00:04:42,639 --> 00:04:47,600
and a ton of third-party shareable

00:04:45,600 --> 00:04:49,199
configurations the airbnb

00:04:47,600 --> 00:04:53,120
configuration for example probably gets

00:04:49,199 --> 00:04:53,120
almost as many downloads as eslint

00:04:54,639 --> 00:04:58,720
kai can you fill in any color in the

00:04:56,560 --> 00:05:01,360
middle there maybe

00:04:58,720 --> 00:05:03,360
yeah so i i do think that esl's

00:05:01,360 --> 00:05:04,240
flexibility has really contributed to

00:05:03,360 --> 00:05:07,360
its success

00:05:04,240 --> 00:05:09,199
um the web development

00:05:07,360 --> 00:05:10,639
uh landscape has changed a lot over the

00:05:09,199 --> 00:05:13,440
past decade

00:05:10,639 --> 00:05:15,120
and you know there's all there's new

00:05:13,440 --> 00:05:16,560
syntax being added to javascript

00:05:15,120 --> 00:05:18,720
there are all these different runtimes

00:05:16,560 --> 00:05:20,880
for javascript um

00:05:18,720 --> 00:05:22,960
we have jsx we have view we have all

00:05:20,880 --> 00:05:25,360
these things and so

00:05:22,960 --> 00:05:26,160
having an extremely opinionated set of

00:05:25,360 --> 00:05:30,880
rules

00:05:26,160 --> 00:05:30,880
that only links javascript um

00:05:30,960 --> 00:05:34,560
would only uh serve a very small subset

00:05:33,520 --> 00:05:38,400
of the community

00:05:34,560 --> 00:05:40,080
um and yeah so anyway that flexibility i

00:05:38,400 --> 00:05:42,479
think is what has led to

00:05:40,080 --> 00:05:43,840
eslint being adopted so so widely last

00:05:42,479 --> 00:05:45,759
time i checked i thought it was

00:05:43,840 --> 00:05:47,360
something on npm something like 12

00:05:45,759 --> 00:05:50,560
million downloads a week or

00:05:47,360 --> 00:05:54,080
something something uh astronomical

00:05:50,560 --> 00:05:57,120
kind of mind-boggling um

00:05:54,080 --> 00:05:59,759
and uh yeah uh i guess

00:05:57,120 --> 00:06:00,720
do we wanna talk a little bit more about

00:05:59,759 --> 00:06:04,160
what a linter

00:06:00,720 --> 00:06:05,199
is for those who may not have used one

00:06:04,160 --> 00:06:08,880
before

00:06:05,199 --> 00:06:09,440
yeah um cool um i can i can do that if

00:06:08,880 --> 00:06:13,280
you want

00:06:09,440 --> 00:06:13,919
um so uh as brandon was saying a linter

00:06:13,280 --> 00:06:17,199
is

00:06:13,919 --> 00:06:20,240
a tool that's kind of like spell check

00:06:17,199 --> 00:06:21,280
for your code uh it lets you that's how

00:06:20,240 --> 00:06:24,479
i think of it anyway

00:06:21,280 --> 00:06:27,199
it lets you check for syntax errors

00:06:24,479 --> 00:06:28,400
um i think traditionally i don't know

00:06:27,199 --> 00:06:28,720
too much about the history so it could

00:06:28,400 --> 00:06:29,840
be

00:06:28,720 --> 00:06:32,880
could be a bit wrong about this but at

00:06:29,840 --> 00:06:34,560
least in the javascript landscape um

00:06:32,880 --> 00:06:36,319
linters have very opinionated rules

00:06:34,560 --> 00:06:39,440
where you didn't have control over

00:06:36,319 --> 00:06:40,639
what it was telling you uh was incorrect

00:06:39,440 --> 00:06:44,639
or correct

00:06:40,639 --> 00:06:47,759
um and so the the goal of eslint

00:06:44,639 --> 00:06:48,000
is not to tell you how to write code but

00:06:47,759 --> 00:06:51,039
to

00:06:48,000 --> 00:06:52,400
allow you to write the code that you

00:06:51,039 --> 00:06:55,680
want to write

00:06:52,400 --> 00:06:57,039
and enforce that we really don't want to

00:06:55,680 --> 00:07:00,400
be in the business of saying like

00:06:57,039 --> 00:07:01,759
hey you should write code this way

00:07:00,400 --> 00:07:03,520
we we think that you should make that

00:07:01,759 --> 00:07:07,360
decision for yourself uh

00:07:03,520 --> 00:07:10,319
but um leaving that to humans on

00:07:07,360 --> 00:07:11,360
pr's on pull request reviews is a lot of

00:07:10,319 --> 00:07:14,240
wasted energy and

00:07:11,360 --> 00:07:16,319
being able to automate that away is a

00:07:14,240 --> 00:07:18,639
big time saver for everyone

00:07:16,319 --> 00:07:20,319
um i guess one other thing i'll say

00:07:18,639 --> 00:07:22,080
about eslint is that

00:07:20,319 --> 00:07:23,759
uh one of the reasons i started

00:07:22,080 --> 00:07:25,919
contributing is that

00:07:23,759 --> 00:07:27,520
i'm a self-taught developer like like

00:07:25,919 --> 00:07:30,240
many of us um

00:07:27,520 --> 00:07:31,759
and uh using at this point uh this was

00:07:30,240 --> 00:07:35,360
earlier on so this was i think

00:07:31,759 --> 00:07:37,919
j s hint but finding js hint

00:07:35,360 --> 00:07:39,759
and having some kind of feedback on my

00:07:37,919 --> 00:07:41,520
code as i was writing it was actually

00:07:39,759 --> 00:07:43,759
really huge for me saved me a lot of

00:07:41,520 --> 00:07:45,840
time taught me a lot of things

00:07:43,759 --> 00:07:47,440
and that's one of the reasons why i love

00:07:45,840 --> 00:07:48,400
contributing to eslint actually is that

00:07:47,440 --> 00:07:51,759
i think it's

00:07:48,400 --> 00:07:52,479
it's a great way for um people who are

00:07:51,759 --> 00:07:57,120
maybe

00:07:52,479 --> 00:07:59,759
new to to coding or new to javascript to

00:07:57,120 --> 00:08:00,720
quickly pick up on some core concepts

00:07:59,759 --> 00:08:01,759
that um

00:08:00,720 --> 00:08:04,240
they might not otherwise and get

00:08:01,759 --> 00:08:05,440
feedback on their code

00:08:04,240 --> 00:08:07,520
yeah that was a lot of good stuff in

00:08:05,440 --> 00:08:09,120
there i think

00:08:07,520 --> 00:08:10,879
one of the key points is that we're not

00:08:09,120 --> 00:08:13,919
in the business of telling you what's

00:08:10,879 --> 00:08:16,720
good code or what's bad code we have our

00:08:13,919 --> 00:08:18,319
recommended configuration that people

00:08:16,720 --> 00:08:20,240
can extend from

00:08:18,319 --> 00:08:21,840
but we're very careful about what we

00:08:20,240 --> 00:08:24,000
include in there

00:08:21,840 --> 00:08:25,919
so if you extend eslint recommended

00:08:24,000 --> 00:08:27,199
you're only going to get the rules that

00:08:25,919 --> 00:08:30,080
we're pretty sure

00:08:27,199 --> 00:08:31,440
are actual bugs in your code like hey

00:08:30,080 --> 00:08:32,560
you referenced a variable here it

00:08:31,440 --> 00:08:34,640
doesn't exist it's probably going to

00:08:32,560 --> 00:08:36,800
throw an exception at runtime

00:08:34,640 --> 00:08:38,240
that would not include any of the

00:08:36,800 --> 00:08:40,880
opinionated rules like

00:08:38,240 --> 00:08:42,159
spacing or how you want to indent your

00:08:40,880 --> 00:08:45,839
code those would not be

00:08:42,159 --> 00:08:49,200
enabled through that we also

00:08:45,839 --> 00:08:50,080
i think see people thinking that eslint

00:08:49,200 --> 00:08:54,560
is just about

00:08:50,080 --> 00:08:58,480
style and formatting and to me

00:08:54,560 --> 00:09:01,519
at least the most value comes from

00:08:58,480 --> 00:09:02,800
the rules that look at how the code is

00:09:01,519 --> 00:09:05,760
structured rather than how it's

00:09:02,800 --> 00:09:08,880
formatted and do look and say hey

00:09:05,760 --> 00:09:09,680
you're comparing with a triple equals to

00:09:08,880 --> 00:09:12,240
null here

00:09:09,680 --> 00:09:13,760
but this might also be undefined and

00:09:12,240 --> 00:09:16,959
that's a case you aren't checking

00:09:13,760 --> 00:09:17,839
and it's it's the actual flow of the

00:09:16,959 --> 00:09:21,760
program

00:09:17,839 --> 00:09:24,000
that i find really valuable there are

00:09:21,760 --> 00:09:25,279
pretty prettier is a really popular

00:09:24,000 --> 00:09:27,760
formatter and

00:09:25,279 --> 00:09:29,279
that will normalize styling for a

00:09:27,760 --> 00:09:32,880
project and team

00:09:29,279 --> 00:09:34,720
and there's a prettier plug-in

00:09:32,880 --> 00:09:36,320
for eslint and i think there's an es1

00:09:34,720 --> 00:09:38,560
plug-in for prettier but you can

00:09:36,320 --> 00:09:40,800
integrate those tools and

00:09:38,560 --> 00:09:43,519
and so for example my team at work we

00:09:40,800 --> 00:09:46,560
use prettier for all the formatting

00:09:43,519 --> 00:09:50,320
and default to its rules there

00:09:46,560 --> 00:09:51,680
but then we also use eslint to look at

00:09:50,320 --> 00:09:53,920
how our code is written

00:09:51,680 --> 00:09:56,880
and tell us ways that we could refactor

00:09:53,920 --> 00:09:56,880
it and improve it

00:09:58,480 --> 00:10:01,839
yeah this this might be a bit of a

00:10:00,080 --> 00:10:04,000
controversial opinion but i actually

00:10:01,839 --> 00:10:06,000
after having spent a lot of time on this

00:10:04,000 --> 00:10:08,160
i've become a firm believer that

00:10:06,000 --> 00:10:09,200
styles should be uh handled by a

00:10:08,160 --> 00:10:11,040
formatter

00:10:09,200 --> 00:10:12,640
and not not the linter and that the

00:10:11,040 --> 00:10:14,320
linter

00:10:12,640 --> 00:10:16,000
should be used just as as brandon is

00:10:14,320 --> 00:10:18,720
describing

00:10:16,000 --> 00:10:19,279
because putting all of it in the linter

00:10:18,720 --> 00:10:22,480
makes

00:10:19,279 --> 00:10:24,399
the kind of puts them at the same level

00:10:22,480 --> 00:10:26,320
and i don't think like using single

00:10:24,399 --> 00:10:29,200
quotes instead of double quotes

00:10:26,320 --> 00:10:29,519
should be as high priority or should be

00:10:29,200 --> 00:10:32,079
like

00:10:29,519 --> 00:10:32,959
warned as high priority as like a syntax

00:10:32,079 --> 00:10:36,000
error or

00:10:32,959 --> 00:10:38,160
some very dangerous pattern in your code

00:10:36,000 --> 00:10:39,839
yeah there are two different things one

00:10:38,160 --> 00:10:40,560
is this code might not work like you

00:10:39,839 --> 00:10:44,160
expect

00:10:40,560 --> 00:10:47,600
and the other is normalizing consistency

00:10:44,160 --> 00:10:50,560
across a team

00:10:47,600 --> 00:10:51,440
i i really agree with agree with that

00:10:50,560 --> 00:10:54,160
and

00:10:51,440 --> 00:10:56,320
you'll often hear people say that if

00:10:54,160 --> 00:10:58,079
somebody's commenting with a knit about

00:10:56,320 --> 00:11:02,959
formatting or something like that

00:10:58,079 --> 00:11:02,959
in a pull request that doesn't really

00:11:03,120 --> 00:11:07,440
build value for the time it takes to

00:11:05,760 --> 00:11:08,079
comment on it and then fix it and then

00:11:07,440 --> 00:11:11,440
approve

00:11:08,079 --> 00:11:13,440
the comment and the change the

00:11:11,440 --> 00:11:14,959
real solution there is throw it in the

00:11:13,440 --> 00:11:16,320
linter and then you never have to think

00:11:14,959 --> 00:11:18,720
about it ever again

00:11:16,320 --> 00:11:21,120
and so a lot of those things around hey

00:11:18,720 --> 00:11:24,560
we try to do it this way on this team

00:11:21,120 --> 00:11:24,959
great linter and if it's a formatting

00:11:24,560 --> 00:11:27,760
thing

00:11:24,959 --> 00:11:29,040
maybe the answer is an eslint

00:11:27,760 --> 00:11:31,279
configuration

00:11:29,040 --> 00:11:32,399
that uses auto fixing for a lot of the

00:11:31,279 --> 00:11:34,320
formatting stuff

00:11:32,399 --> 00:11:36,320
or maybe the answer is hey we're just

00:11:34,320 --> 00:11:39,040
going to use the prettier rules

00:11:36,320 --> 00:11:40,800
and we'll use eslint for the the eslant

00:11:39,040 --> 00:11:41,839
recommended configuration and

00:11:40,800 --> 00:11:44,079
and the things that don't even care

00:11:41,839 --> 00:11:44,720
about styling and i think the other

00:11:44,079 --> 00:11:48,399
thing

00:11:44,720 --> 00:11:50,399
just from an implementation side the

00:11:48,399 --> 00:11:51,680
stylistic and formatting rules are a lot

00:11:50,399 --> 00:11:53,040
harder to work on

00:11:51,680 --> 00:11:55,600
this is getting a little down in the

00:11:53,040 --> 00:11:57,440
weeds on how things work but

00:11:55,600 --> 00:11:58,800
if you're just looking at code structure

00:11:57,440 --> 00:12:01,279
then that can be done

00:11:58,800 --> 00:12:02,320
entirely in the abstract syntax tree

00:12:01,279 --> 00:12:04,240
just looking at

00:12:02,320 --> 00:12:05,760
the nodes that were parsed out of the

00:12:04,240 --> 00:12:07,680
file

00:12:05,760 --> 00:12:09,600
whereas if we're doing a rule that's

00:12:07,680 --> 00:12:12,079
about formatting and styling

00:12:09,600 --> 00:12:13,440
we have to look at more of a concrete

00:12:12,079 --> 00:12:16,079
syntax tree

00:12:13,440 --> 00:12:17,760
that has all the nodes locations and the

00:12:16,079 --> 00:12:19,519
comments around them

00:12:17,760 --> 00:12:21,279
attached and that's a whole lot of extra

00:12:19,519 --> 00:12:24,560
information that

00:12:21,279 --> 00:12:27,200
the pure code structure rules don't have

00:12:24,560 --> 00:12:27,200
to think about

00:12:27,839 --> 00:12:35,440
so a lot of our our stylistic rules

00:12:32,639 --> 00:12:36,000
are among the most complex even though

00:12:35,440 --> 00:12:39,440
it might

00:12:36,000 --> 00:12:41,680
seem like the role they're playing

00:12:39,440 --> 00:12:43,360
is among the least complex on the

00:12:41,680 --> 00:12:46,240
surface

00:12:43,360 --> 00:12:47,360
and we actually this is jumping forward

00:12:46,240 --> 00:12:50,720
a little bit but we

00:12:47,360 --> 00:12:53,839
recently decided to de-prioritize making

00:12:50,720 --> 00:12:54,880
more changes to stylistic rules those

00:12:53,839 --> 00:12:57,519
were taking a lot of

00:12:54,880 --> 00:12:58,959
the team's development time because

00:12:57,519 --> 00:13:00,880
people are endlessly creative

00:12:58,959 --> 00:13:02,399
in how they want to write their code and

00:13:00,880 --> 00:13:04,160
we've accumulated

00:13:02,399 --> 00:13:06,320
dozens of options on a lot of these

00:13:04,160 --> 00:13:08,320
rules over the years

00:13:06,320 --> 00:13:10,399
and we still get requests for hey

00:13:08,320 --> 00:13:13,600
there's another way we could do this

00:13:10,399 --> 00:13:15,360
can we add an option and and the

00:13:13,600 --> 00:13:17,040
cumulative effect of those was taking a

00:13:15,360 --> 00:13:19,920
lot of our development time

00:13:17,040 --> 00:13:21,040
so we de-prioritize those intentionally

00:13:19,920 --> 00:13:24,079
so that

00:13:21,040 --> 00:13:26,639
we can work more

00:13:24,079 --> 00:13:27,600
effectively on the roadmap that we have

00:13:26,639 --> 00:13:31,279
coming up

00:13:27,600 --> 00:13:33,600
and this is shuffling a bit

00:13:31,279 --> 00:13:35,839
from the outline but do you want to go

00:13:33,600 --> 00:13:40,320
over the road map guys

00:13:35,839 --> 00:13:42,000
real quick you're muted

00:13:40,320 --> 00:13:44,079
sorry about that uh yeah let me pull it

00:13:42,000 --> 00:13:47,760
up really quick here

00:13:44,079 --> 00:13:49,760
i'm gonna do the same do not have this

00:13:47,760 --> 00:13:53,360
memorized maybe i should okay

00:13:49,760 --> 00:13:58,399
uh yeah so we

00:13:53,360 --> 00:14:01,440
recently um decided to

00:13:58,399 --> 00:14:03,839
um commit to a public roadmap

00:14:01,440 --> 00:14:05,839
we had a lot of internal discussions

00:14:03,839 --> 00:14:09,279
some public discussions on github

00:14:05,839 --> 00:14:09,839
and um yeah so we have a couple things

00:14:09,279 --> 00:14:11,519
that are

00:14:09,839 --> 00:14:13,440
that we have decided that we want to

00:14:11,519 --> 00:14:17,040
commit our resources to

00:14:13,440 --> 00:14:19,920
um over the coming months um

00:14:17,040 --> 00:14:21,279
and we're really excited about all of

00:14:19,920 --> 00:14:22,880
them so i'll start with the thing that i

00:14:21,279 --> 00:14:24,000
guess i'm most excited about because i'm

00:14:22,880 --> 00:14:27,040
working on it um

00:14:24,000 --> 00:14:29,360
maybe selfishly um we are participating

00:14:27,040 --> 00:14:33,120
in uh google season of docs

00:14:29,360 --> 00:14:36,000
which is a program run by google

00:14:33,120 --> 00:14:37,279
that matches technical writers with open

00:14:36,000 --> 00:14:40,079
source projects to improve their

00:14:37,279 --> 00:14:42,880
documentation

00:14:40,079 --> 00:14:44,639
and we're just starting that process now

00:14:42,880 --> 00:14:47,920
we have our technical writer

00:14:44,639 --> 00:14:49,519
uh selected and um and he and i

00:14:47,920 --> 00:14:51,760
are having meetings and and kind of

00:14:49,519 --> 00:14:53,519
figuring out where where we want to go

00:14:51,760 --> 00:14:55,040
with this but um we're going to be

00:14:53,519 --> 00:14:56,560
working on the configuration

00:14:55,040 --> 00:14:59,519
documentation

00:14:56,560 --> 00:15:00,600
which um your eslint has been around i

00:14:59,519 --> 00:15:03,760
think since

00:15:00,600 --> 00:15:07,279
2011 is that right 2012

00:15:03,760 --> 00:15:08,800
12 13 something like that yeah okay

00:15:07,279 --> 00:15:10,639
should have looked it up beforehand but

00:15:08,800 --> 00:15:14,480
uh anyway it's been around a long time

00:15:10,639 --> 00:15:16,560
uh and as a result the documentation

00:15:14,480 --> 00:15:17,839
has existed for a long time and has been

00:15:16,560 --> 00:15:20,399
iterated on

00:15:17,839 --> 00:15:20,959
for for very for a very long time now

00:15:20,399 --> 00:15:24,800
and

00:15:20,959 --> 00:15:27,199
in that process we've added a lot of

00:15:24,800 --> 00:15:27,920
new options and and you know as i said

00:15:27,199 --> 00:15:31,199
before

00:15:27,920 --> 00:15:33,120
um the javascript ecosystem um

00:15:31,199 --> 00:15:34,399
requires a lot of configuration just

00:15:33,120 --> 00:15:36,000
because of all the runtimes and

00:15:34,399 --> 00:15:39,120
different syntax

00:15:36,000 --> 00:15:41,440
and and so so on and so forth um

00:15:39,120 --> 00:15:43,199
and so the configuration documentation

00:15:41,440 --> 00:15:45,199
uh probably initially when it was

00:15:43,199 --> 00:15:46,639
written was very clear and concise as a

00:15:45,199 --> 00:15:49,680
one-page document

00:15:46,639 --> 00:15:51,680
um but has since grown to be this this

00:15:49,680 --> 00:15:54,959
giant one-page document that's

00:15:51,680 --> 00:15:55,440
uh pretty hard to navigate um and so our

00:15:54,959 --> 00:15:58,639
focus

00:15:55,440 --> 00:16:02,079
is going to be on um improving that

00:15:58,639 --> 00:16:03,680
so that that people can find um

00:16:02,079 --> 00:16:09,600
you know find the information that they

00:16:03,680 --> 00:16:12,880
need quicker and more easily

00:16:09,600 --> 00:16:17,600
um another thing we're doing is uh

00:16:12,880 --> 00:16:17,600
we're planning to move all of our

00:16:18,480 --> 00:16:21,680
all of our repositories branches from

00:16:21,279 --> 00:16:23,759
the

00:16:21,680 --> 00:16:25,440
from master to maine we're going to be

00:16:23,759 --> 00:16:26,800
doing that over

00:16:25,440 --> 00:16:28,800
we've started a little bit of work on i

00:16:26,800 --> 00:16:32,000
think nicholas has has

00:16:28,800 --> 00:16:35,040
started updating our tooling for it um

00:16:32,000 --> 00:16:37,519
but we've committed doing that and

00:16:35,040 --> 00:16:38,399
that will be ongoing over the next

00:16:37,519 --> 00:16:41,199
couple months i think

00:16:38,399 --> 00:16:42,399
github um is also planning to uh

00:16:41,199 --> 00:16:44,320
implement some

00:16:42,399 --> 00:16:46,480
some tooling on there and that'll make

00:16:44,320 --> 00:16:50,000
it easier for us as well

00:16:46,480 --> 00:16:53,199
um yeah so there are

00:16:50,000 --> 00:16:56,800
two other big projects so nicholas

00:16:53,199 --> 00:17:00,480
is working on a new way to configure

00:16:56,800 --> 00:17:01,839
eslint and if you go to our rfc's

00:17:00,480 --> 00:17:04,240
repository

00:17:01,839 --> 00:17:05,199
you can find the simple config proposal

00:17:04,240 --> 00:17:09,039
and see

00:17:05,199 --> 00:17:11,520
everything about it but

00:17:09,039 --> 00:17:13,039
similar to what i was saying about

00:17:11,520 --> 00:17:15,760
accumulating years worth of

00:17:13,039 --> 00:17:17,199
documentation all of those options also

00:17:15,760 --> 00:17:20,160
accumulated over years

00:17:17,199 --> 00:17:22,079
and so our existing configuration system

00:17:20,160 --> 00:17:24,160
we have what we call the cascade

00:17:22,079 --> 00:17:26,079
so if you have a parent directory you

00:17:24,160 --> 00:17:28,240
might have a config file in there and

00:17:26,079 --> 00:17:30,080
then you might have a couple different

00:17:28,240 --> 00:17:32,559
directories in there that each have

00:17:30,080 --> 00:17:34,160
their own configuration files and so we

00:17:32,559 --> 00:17:36,400
have to look

00:17:34,160 --> 00:17:37,919
when we see a file it has a

00:17:36,400 --> 00:17:39,120
configuration there and then there's a

00:17:37,919 --> 00:17:40,480
configuration in the parent directory

00:17:39,120 --> 00:17:41,200
and there's configuration it's parent

00:17:40,480 --> 00:17:43,919
directory and

00:17:41,200 --> 00:17:45,600
combining all of those is very complex

00:17:43,919 --> 00:17:47,440
and the rules for how that works have

00:17:45,600 --> 00:17:50,080
been developed over the years

00:17:47,440 --> 00:17:50,960
and the rules for how those apply to the

00:17:50,080 --> 00:17:52,559
new options

00:17:50,960 --> 00:17:54,559
have been developed over the years and

00:17:52,559 --> 00:17:56,640
there's not necessarily a ton of

00:17:54,559 --> 00:17:58,080
consistency there around what options

00:17:56,640 --> 00:18:01,360
can go where

00:17:58,080 --> 00:18:03,280
maybe they don't work with some other

00:18:01,360 --> 00:18:04,799
scenarios like some things do work in

00:18:03,280 --> 00:18:05,919
overrides some things don't work in

00:18:04,799 --> 00:18:08,240
overrides

00:18:05,919 --> 00:18:10,320
some things merge configurations in the

00:18:08,240 --> 00:18:13,440
cascade some things completely replace

00:18:10,320 --> 00:18:16,640
in the cascade and so what nicholas did

00:18:13,440 --> 00:18:18,320
is a clean sheet designed for

00:18:16,640 --> 00:18:21,360
configuration

00:18:18,320 --> 00:18:21,919
and the highlight is that it will be a

00:18:21,360 --> 00:18:24,880
single

00:18:21,919 --> 00:18:26,799
file and the root directory of your

00:18:24,880 --> 00:18:29,760
project that tells

00:18:26,799 --> 00:18:30,480
a single source of truth for eslint how

00:18:29,760 --> 00:18:33,440
it should

00:18:30,480 --> 00:18:34,160
approach your files one of the other big

00:18:33,440 --> 00:18:36,559
issues

00:18:34,160 --> 00:18:37,280
that we've encountered is all of these

00:18:36,559 --> 00:18:39,679
plugins

00:18:37,280 --> 00:18:41,039
and rules and shareable configurations

00:18:39,679 --> 00:18:42,960
that people are using that are really

00:18:41,039 --> 00:18:46,400
exciting and that make eslint

00:18:42,960 --> 00:18:48,640
as powerful as it is are hampered

00:18:46,400 --> 00:18:50,000
by the way things are configured

00:18:48,640 --> 00:18:52,960
currently because

00:18:50,000 --> 00:18:54,559
everything needs to be json serializable

00:18:52,960 --> 00:18:56,720
in the existing configuration

00:18:54,559 --> 00:18:57,679
so you need to be able to reference a

00:18:56,720 --> 00:19:01,120
plugin or

00:18:57,679 --> 00:19:02,720
a rule by a string and that can get

00:19:01,120 --> 00:19:04,320
really complicated if say

00:19:02,720 --> 00:19:06,400
one plugin wants to include another

00:19:04,320 --> 00:19:08,799
plugin or include a shareable config

00:19:06,400 --> 00:19:11,200
from somewhere else

00:19:08,799 --> 00:19:12,720
so the new configuration system that

00:19:11,200 --> 00:19:16,160
nicholas is working on

00:19:12,720 --> 00:19:17,440
will use imports or requires and you'll

00:19:16,160 --> 00:19:21,679
be able to resolve

00:19:17,440 --> 00:19:24,320
plugins that way and so that should fix

00:19:21,679 --> 00:19:25,440
a lot of weird edge cases that we

00:19:24,320 --> 00:19:28,559
currently have

00:19:25,440 --> 00:19:29,919
around how do you properly npm install

00:19:28,559 --> 00:19:32,400
the right plugin and all of its

00:19:29,919 --> 00:19:33,120
dependencies we'll just be building on

00:19:32,400 --> 00:19:36,320
top of

00:19:33,120 --> 00:19:39,360
the node module resolution algorithm and

00:19:36,320 --> 00:19:42,160
get that basically for free how do i use

00:19:39,360 --> 00:19:43,200
esl plug-in import well you import it

00:19:42,160 --> 00:19:45,120
and that's

00:19:43,200 --> 00:19:47,600
that's all there is to it with this new

00:19:45,120 --> 00:19:50,480
configuration so yeah check that out

00:19:47,600 --> 00:19:52,240
um the rfc is public and nicholas is

00:19:50,480 --> 00:19:54,240
working on that now

00:19:52,240 --> 00:19:56,000
then the other big project that we'll be

00:19:54,240 --> 00:19:57,360
tackling on the roadmap is something

00:19:56,000 --> 00:19:58,240
that we've been wanting to do for a few

00:19:57,360 --> 00:20:01,360
years

00:19:58,240 --> 00:20:03,600
and that's parallel linting where

00:20:01,360 --> 00:20:04,799
we don't have to lint everything

00:20:03,600 --> 00:20:07,440
serially anymore

00:20:04,799 --> 00:20:08,320
we've done some infrastructure work on

00:20:07,440 --> 00:20:11,520
that

00:20:08,320 --> 00:20:16,240
we recently introduced a

00:20:11,520 --> 00:20:20,240
new top level api for eslint

00:20:16,240 --> 00:20:24,080
we used to use a class called cli engine

00:20:20,240 --> 00:20:25,600
and that was all synchronous so before

00:20:24,080 --> 00:20:27,919
we could do anything with parallel

00:20:25,600 --> 00:20:31,200
linting we needed to introduce

00:20:27,919 --> 00:20:33,919
a new node.js api and so that's now

00:20:31,200 --> 00:20:36,400
asynchronous and it allows us to

00:20:33,919 --> 00:20:39,440
implement parallel linting

00:20:36,400 --> 00:20:41,280
underneath that api and so that one

00:20:39,440 --> 00:20:42,880
is still in the design stages there's an

00:20:41,280 --> 00:20:46,400
rfc if you have

00:20:42,880 --> 00:20:47,520
thoughts or requirements that

00:20:46,400 --> 00:20:49,600
we would need to address in that

00:20:47,520 --> 00:20:51,120
proposal feel free to chime in on the

00:20:49,600 --> 00:20:54,240
rfc

00:20:51,120 --> 00:20:56,559
um anything to add on that kai

00:20:54,240 --> 00:20:57,760
i was just there yeah no nothing to add

00:20:56,559 --> 00:20:59,200
to what you said i

00:20:57,760 --> 00:21:00,720
adding to what i said though i realized

00:20:59,200 --> 00:21:01,440
that i did not talk about the most

00:21:00,720 --> 00:21:02,960
important part

00:21:01,440 --> 00:21:05,360
about why we're switching from master

00:21:02,960 --> 00:21:09,520
domain uh for our

00:21:05,360 --> 00:21:11,600
our branches um and that is that uh

00:21:09,520 --> 00:21:12,559
we as a community want to be inclusive

00:21:11,600 --> 00:21:15,120
of everyone

00:21:12,559 --> 00:21:16,000
um and so we're we're following a lot of

00:21:15,120 --> 00:21:19,360
other projects

00:21:16,000 --> 00:21:22,000
in um moving from

00:21:19,360 --> 00:21:24,159
a language that can be exclusive to

00:21:22,000 --> 00:21:26,960
inclusive language

00:21:24,159 --> 00:21:28,799
we really want everyone to feel like

00:21:26,960 --> 00:21:29,520
they can contribute and be empowered and

00:21:28,799 --> 00:21:32,720
are welcome

00:21:29,520 --> 00:21:34,080
and safe in our community um and

00:21:32,720 --> 00:21:35,760
uh so yeah that's the reason we're doing

00:21:34,080 --> 00:21:38,159
that

00:21:35,760 --> 00:21:39,280
um looking at the time maybe we should

00:21:38,159 --> 00:21:42,640
move on to the

00:21:39,280 --> 00:21:43,039
questions we've talked a lot about eslip

00:21:42,640 --> 00:21:46,159
but

00:21:43,039 --> 00:21:49,280
i know that uh that people have

00:21:46,159 --> 00:21:51,760
have some questions for us yeah that

00:21:49,280 --> 00:21:51,760
sounds good

00:21:52,720 --> 00:21:56,559
so one of the ones that was really

00:21:55,679 --> 00:21:59,679
interesting to me

00:21:56,559 --> 00:22:03,760
was will you add html linting

00:21:59,679 --> 00:22:06,880
similar to html lint or html hint

00:22:03,760 --> 00:22:09,679
um so as kai

00:22:06,880 --> 00:22:10,240
said earlier when eosin was started it

00:22:09,679 --> 00:22:14,159
was

00:22:10,240 --> 00:22:17,039
just javascript that we need to lend and

00:22:14,159 --> 00:22:17,919
we've gradually expanded to lint view

00:22:17,039 --> 00:22:21,280
and

00:22:17,919 --> 00:22:22,480
react jsx and typescript is a really

00:22:21,280 --> 00:22:25,679
common use case and

00:22:22,480 --> 00:22:29,919
all of these syntax extensions

00:22:25,679 --> 00:22:33,919
we also added processor apis

00:22:29,919 --> 00:22:37,200
so that you could say lint

00:22:33,919 --> 00:22:41,039
javascript inside of script blocks

00:22:37,200 --> 00:22:42,960
inside of html and we have a markdown

00:22:41,039 --> 00:22:44,400
processor that will pull out javascript

00:22:42,960 --> 00:22:45,600
code blocks and link those from a

00:22:44,400 --> 00:22:47,440
markdown file

00:22:45,600 --> 00:22:49,440
and there are other examples of those

00:22:47,440 --> 00:22:52,840
sorts of things

00:22:49,440 --> 00:22:56,320
linting html directly

00:22:52,840 --> 00:22:59,840
is a new thing that we're kind of

00:22:56,320 --> 00:23:02,960
playing with um there was an

00:22:59,840 --> 00:23:06,640
rfc recently merged

00:23:02,960 --> 00:23:10,000
for generic ast support

00:23:06,640 --> 00:23:11,200
so eslint to date has been built with

00:23:10,000 --> 00:23:14,240
the assumption

00:23:11,200 --> 00:23:18,000
that it will receive a javascript ast

00:23:14,240 --> 00:23:18,559
of some sort that it will have certain

00:23:18,000 --> 00:23:21,360
properties

00:23:18,559 --> 00:23:23,440
that the root node will be named program

00:23:21,360 --> 00:23:25,679
that every node will have a type

00:23:23,440 --> 00:23:27,679
with a string in it that every node will

00:23:25,679 --> 00:23:29,120
have location information and how that's

00:23:27,679 --> 00:23:32,720
structured

00:23:29,120 --> 00:23:35,600
and so for example babel esling which is

00:23:32,720 --> 00:23:37,840
a really common parser that people use

00:23:35,600 --> 00:23:40,880
uses a slightly different ast structure

00:23:37,840 --> 00:23:43,360
than eslint's default parser

00:23:40,880 --> 00:23:44,000
typescript also uses a different ast

00:23:43,360 --> 00:23:48,000
structure

00:23:44,000 --> 00:23:51,440
than esl's default polisher parser

00:23:48,000 --> 00:23:54,559
so what this would allow

00:23:51,440 --> 00:23:58,559
is eslint processing asts that

00:23:54,559 --> 00:23:59,760
it wasn't originally designed to process

00:23:58,559 --> 00:24:03,279
because we've made certain things

00:23:59,760 --> 00:24:06,320
generic and a parser can now tell eslint

00:24:03,279 --> 00:24:08,640
here's how you figure out what variables

00:24:06,320 --> 00:24:09,360
are in scope wherever you are in this

00:24:08,640 --> 00:24:12,320
file

00:24:09,360 --> 00:24:14,559
on this node and other things like that

00:24:12,320 --> 00:24:14,559
so

00:24:14,799 --> 00:24:18,960
the translation process that babel

00:24:17,039 --> 00:24:22,320
eslint and typescript eslent

00:24:18,960 --> 00:24:25,039
and the processors do now

00:24:22,320 --> 00:24:26,000
we might be able to do even better than

00:24:25,039 --> 00:24:28,720
that

00:24:26,000 --> 00:24:31,279
and not even just for javascript and

00:24:28,720 --> 00:24:34,000
languages that compile to javascript

00:24:31,279 --> 00:24:35,039
so for example you might be able to do

00:24:34,000 --> 00:24:38,080
it with

00:24:35,039 --> 00:24:39,120
json you could perhaps pass in a json

00:24:38,080 --> 00:24:41,039
ast

00:24:39,120 --> 00:24:42,559
if you had the right parser and parser

00:24:41,039 --> 00:24:46,320
support and

00:24:42,559 --> 00:24:48,720
look for things in your package.json or

00:24:46,320 --> 00:24:52,000
another json configuration file

00:24:48,720 --> 00:24:53,520
or yaml if you want to lint a docker

00:24:52,000 --> 00:24:55,919
compose file

00:24:53,520 --> 00:24:56,720
that's something that we could do or as

00:24:55,919 --> 00:25:00,799
the question

00:24:56,720 --> 00:25:04,240
asks html yeah the

00:25:00,799 --> 00:25:07,360
api is there for that and we don't

00:25:04,240 --> 00:25:08,640
know what direction that'll take it's

00:25:07,360 --> 00:25:11,600
intentionally a

00:25:08,640 --> 00:25:12,799
minimally scoped change to the api just

00:25:11,600 --> 00:25:16,400
to see

00:25:12,799 --> 00:25:18,720
what people do with it because

00:25:16,400 --> 00:25:20,320
it's theoretically possible but somebody

00:25:18,720 --> 00:25:25,520
would have to build it first

00:25:20,320 --> 00:25:25,520
so i'm curious to see what happens there

00:25:27,039 --> 00:25:31,520
yeah that's definitely exciting um i do

00:25:30,159 --> 00:25:34,559
think that

00:25:31,520 --> 00:25:36,080
um that's

00:25:34,559 --> 00:25:37,679
that's something that's been discussed a

00:25:36,080 --> 00:25:41,039
long time within the team and

00:25:37,679 --> 00:25:42,960
and outside um and

00:25:41,039 --> 00:25:44,320
i do think that that would that could be

00:25:42,960 --> 00:25:46,720
a really big win

00:25:44,320 --> 00:25:48,159
um for the community as a whole um

00:25:46,720 --> 00:25:50,799
because i've looked for

00:25:48,159 --> 00:25:52,480
linters for other other languages that i

00:25:50,799 --> 00:25:53,120
you know use as a web developer day to

00:25:52,480 --> 00:25:56,159
day

00:25:53,120 --> 00:25:58,240
um and generally have found them

00:25:56,159 --> 00:26:00,000
to not be as configurable or you know

00:25:58,240 --> 00:26:03,679
not not quite as robust

00:26:00,000 --> 00:26:05,200
um and so yeah having one tool to do all

00:26:03,679 --> 00:26:06,720
that would be great

00:26:05,200 --> 00:26:09,679
yeah it would be nice to be able to

00:26:06,720 --> 00:26:13,039
integrate everything into a single stack

00:26:09,679 --> 00:26:16,240
there that is as configurable as

00:26:13,039 --> 00:26:18,559
yes lent is intentionally

00:26:16,240 --> 00:26:19,760
um one of the things we also wanted to

00:26:18,559 --> 00:26:22,840
talk about was just

00:26:19,760 --> 00:26:25,760
what's new in some of the latest

00:26:22,840 --> 00:26:28,880
releases oh yeah

00:26:25,760 --> 00:26:31,360
do you want to take that one yeah sure

00:26:28,880 --> 00:26:31,919
um let's see so we did a release this

00:26:31,360 --> 00:26:35,600
week

00:26:31,919 --> 00:26:36,640
um that i guess the the most exciting

00:26:35,600 --> 00:26:39,440
part about it is

00:26:36,640 --> 00:26:41,919
um adding support for es for some syntax

00:26:39,440 --> 00:26:44,880
for es2021

00:26:41,919 --> 00:26:45,840
and that is namely numeric separators

00:26:44,880 --> 00:26:49,279
and

00:26:45,840 --> 00:26:52,960
logical assignment operators so that

00:26:49,279 --> 00:26:56,080
as of 7.8.1 because we

00:26:52,960 --> 00:26:58,159
had to release a patch release um

00:26:56,080 --> 00:27:00,000
it is available to everyone um please

00:26:58,159 --> 00:27:01,360
check it out and let us know if you find

00:27:00,000 --> 00:27:06,799
any issues with it

00:27:01,360 --> 00:27:09,840
um so anything else that's been

00:27:06,799 --> 00:27:11,279
really exciting recently uh

00:27:09,840 --> 00:27:12,880
you've been the one writing the

00:27:11,279 --> 00:27:14,799
highlights

00:27:12,880 --> 00:27:16,480
one of the great things about having kai

00:27:14,799 --> 00:27:19,279
as a dedicated maintainer

00:27:16,480 --> 00:27:20,640
is that we have a default person to do

00:27:19,279 --> 00:27:22,240
the releases rather than trying to

00:27:20,640 --> 00:27:25,039
figure out

00:27:22,240 --> 00:27:27,279
who else on the team can find time at a

00:27:25,039 --> 00:27:29,520
specific

00:27:27,279 --> 00:27:31,279
on their schedule for it so it's been

00:27:29,520 --> 00:27:33,840
great having kai around

00:27:31,279 --> 00:27:35,600
to do that among many other things

00:27:33,840 --> 00:27:39,600
thanks

00:27:35,600 --> 00:27:42,320
um cool so here's another question

00:27:39,600 --> 00:27:44,559
which is miles asks what is the most

00:27:42,320 --> 00:27:47,760
controversial linting rule

00:27:44,559 --> 00:27:50,799
this is an easy answer for me

00:27:47,760 --> 00:27:54,399
that is the indent rule um

00:27:50,799 --> 00:27:57,840
it is so we get so many issues for it

00:27:54,399 --> 00:27:58,559
that we actually have a label just for

00:27:57,840 --> 00:28:02,399
that rule

00:27:58,559 --> 00:28:04,480
uh on github issues um and

00:28:02,399 --> 00:28:06,320
that is because you know indentation

00:28:04,480 --> 00:28:08,080
people have a lot of opinions about that

00:28:06,320 --> 00:28:11,200
and a lot of ideas about what

00:28:08,080 --> 00:28:13,279
how how that should be enforced um

00:28:11,200 --> 00:28:15,520
and at this point in this intent rule is

00:28:13,279 --> 00:28:17,039
so massive that we

00:28:15,520 --> 00:28:19,039
though we would like to accommodate

00:28:17,039 --> 00:28:21,840
everyone we we generally

00:28:19,039 --> 00:28:22,960
don't make changes to it um because

00:28:21,840 --> 00:28:23,840
there if you look at the the

00:28:22,960 --> 00:28:26,480
documentation

00:28:23,840 --> 00:28:28,080
page and configuration uh information

00:28:26,480 --> 00:28:30,559
there are so many

00:28:28,080 --> 00:28:31,600
so many different ways to configure it

00:28:30,559 --> 00:28:33,600
um

00:28:31,600 --> 00:28:35,679
yeah that's that's my my pick for most

00:28:33,600 --> 00:28:37,919
controversial

00:28:35,679 --> 00:28:39,440
i have to agree when i saw that question

00:28:37,919 --> 00:28:41,760
come in it was okay so it's obviously

00:28:39,440 --> 00:28:43,440
going to be a stylistic rule which one

00:28:41,760 --> 00:28:45,279
i can't think of anything that's more

00:28:43,440 --> 00:28:47,919
controversial than indent

00:28:45,279 --> 00:28:48,480
and it's there are like i said earlier

00:28:47,919 --> 00:28:50,559
people are

00:28:48,480 --> 00:28:52,159
endlessly creative and how they want to

00:28:50,559 --> 00:28:53,440
format their code and there's only so

00:28:52,159 --> 00:28:54,960
many different

00:28:53,440 --> 00:28:56,880
cohesive ways we could come up with a

00:28:54,960 --> 00:28:59,200
configuration that's even internally

00:28:56,880 --> 00:29:00,480
consistent for what people might want to

00:28:59,200 --> 00:29:04,720
do

00:29:00,480 --> 00:29:07,760
that rule it's enormously complex

00:29:04,720 --> 00:29:09,679
on the implementation side as well if if

00:29:07,760 --> 00:29:11,200
i were to try to make a change to it it

00:29:09,679 --> 00:29:13,279
would take me a couple hours just to

00:29:11,200 --> 00:29:16,960
remember how it works

00:29:13,279 --> 00:29:19,039
that's definitely one of them where

00:29:16,960 --> 00:29:20,240
prettier does a good enough job seems

00:29:19,039 --> 00:29:21,760
great

00:29:20,240 --> 00:29:23,440
yeah i think it's actually been

00:29:21,760 --> 00:29:24,000
rewritten like three or four times too

00:29:23,440 --> 00:29:27,039
over

00:29:24,000 --> 00:29:30,880
the course of its existence by

00:29:27,039 --> 00:29:30,880
brave souls yes

00:29:32,480 --> 00:29:37,360
um let's see are there any

00:29:39,520 --> 00:29:42,640
so we should probably talk about getting

00:29:41,840 --> 00:29:46,000
started

00:29:42,640 --> 00:29:49,120
as well yes um so

00:29:46,000 --> 00:29:52,480
our getting started docs um are

00:29:49,120 --> 00:29:55,520
linked on the website and

00:29:52,480 --> 00:29:58,799
step one install eslint

00:29:55,520 --> 00:30:01,360
npm install and then we also have

00:29:58,799 --> 00:30:03,600
an init tool so you don't have to set up

00:30:01,360 --> 00:30:06,960
a configuration for yourself initially

00:30:03,600 --> 00:30:09,840
you can run npx eslint

00:30:06,960 --> 00:30:10,880
dash dash in it and that will walk you

00:30:09,840 --> 00:30:14,960
through

00:30:10,880 --> 00:30:16,559
a wizard of sorts on the terminal

00:30:14,960 --> 00:30:19,200
that will ask you some questions about

00:30:16,559 --> 00:30:21,440
your code and help you get started with

00:30:19,200 --> 00:30:21,440
that

00:30:21,679 --> 00:30:25,600
and then there are all sorts of

00:30:24,480 --> 00:30:28,559
different

00:30:25,600 --> 00:30:30,320
tutorials and guides for whatever

00:30:28,559 --> 00:30:33,200
scenario that you might

00:30:30,320 --> 00:30:34,240
have that's not the standard plain

00:30:33,200 --> 00:30:35,840
javascript

00:30:34,240 --> 00:30:37,440
that we can address in our getting

00:30:35,840 --> 00:30:40,799
started if

00:30:37,440 --> 00:30:42,799
you have react code for example

00:30:40,799 --> 00:30:44,799
there are all sorts of guides for react

00:30:42,799 --> 00:30:48,159
i think in fact create react app

00:30:44,799 --> 00:30:50,880
includes eslint now i

00:30:48,159 --> 00:30:52,640
think so yeah last time i checked it out

00:30:50,880 --> 00:30:54,640
which was a while ago i think it was set

00:30:52,640 --> 00:30:57,840
up as part of the bundling step

00:30:54,640 --> 00:31:00,399
there um there are all sorts of

00:30:57,840 --> 00:31:01,360
of different configurations that you

00:31:00,399 --> 00:31:04,159
could come up with

00:31:01,360 --> 00:31:04,880
that would have their own how do you get

00:31:04,159 --> 00:31:06,880
this setup

00:31:04,880 --> 00:31:09,039
if you're using typescript for example

00:31:06,880 --> 00:31:10,399
the typescript eslint getting started is

00:31:09,039 --> 00:31:13,919
probably the way to go

00:31:10,399 --> 00:31:16,159
for that and

00:31:13,919 --> 00:31:18,640
when you're getting started when you've

00:31:16,159 --> 00:31:20,000
moved beyond just eslint init

00:31:18,640 --> 00:31:21,919
when you want to start customizing

00:31:20,000 --> 00:31:24,640
things i

00:31:21,919 --> 00:31:24,960
i think it helps to start with a lot of

00:31:24,640 --> 00:31:27,840
the

00:31:24,960 --> 00:31:29,519
plugins have recommended configurations

00:31:27,840 --> 00:31:31,039
so we have our own eslint recommended

00:31:29,519 --> 00:31:32,799
that's just hey we're pretty sure these

00:31:31,039 --> 00:31:34,559
are going to be errors and you wouldn't

00:31:32,799 --> 00:31:35,919
want to disable these

00:31:34,559 --> 00:31:37,679
many of the plugins have their own

00:31:35,919 --> 00:31:40,240
recommended configuration

00:31:37,679 --> 00:31:41,440
where you can have the eslint typescript

00:31:40,240 --> 00:31:43,279
recommended

00:31:41,440 --> 00:31:44,640
and that'll be we're pretty sure these

00:31:43,279 --> 00:31:48,399
are

00:31:44,640 --> 00:31:50,240
actual issues and so that's a great

00:31:48,399 --> 00:31:51,519
way to get started and then you can

00:31:50,240 --> 00:31:54,240
customize from there

00:31:51,519 --> 00:31:55,760
and because it's all open source if you

00:31:54,240 --> 00:31:57,360
want to see how what's in those

00:31:55,760 --> 00:31:58,080
recommended configurations and how they

00:31:57,360 --> 00:32:00,880
work

00:31:58,080 --> 00:32:02,880
you can go in and just look at the the

00:32:00,880 --> 00:32:06,960
source code for that and see

00:32:02,880 --> 00:32:08,480
that it's using the same configuration

00:32:06,960 --> 00:32:10,559
that you could and so if you didn't want

00:32:08,480 --> 00:32:12,960
to use the exact recommended

00:32:10,559 --> 00:32:15,519
configuration you could copy paste it

00:32:12,960 --> 00:32:19,600
into your own and customize it that way

00:32:15,519 --> 00:32:19,600
rather than extending and overriding it

00:32:21,279 --> 00:32:27,360
any other getting started tips

00:32:24,320 --> 00:32:29,919
i guess just to add to that one

00:32:27,360 --> 00:32:31,600
question that i've seen come up fairly

00:32:29,919 --> 00:32:35,200
regularly over the years is

00:32:31,600 --> 00:32:37,279
um you know why does eslint not have a

00:32:35,200 --> 00:32:39,039
default configuration why can't you just

00:32:37,279 --> 00:32:40,000
install eslint and then it just it just

00:32:39,039 --> 00:32:42,000
works

00:32:40,000 --> 00:32:43,919
which is a really fair question because

00:32:42,000 --> 00:32:45,840
uh configuration

00:32:43,919 --> 00:32:47,039
is always difficult and especially if

00:32:45,840 --> 00:32:48,640
you're

00:32:47,039 --> 00:32:51,279
you know less familiar with javascript

00:32:48,640 --> 00:32:52,720
um you might not actually even know like

00:32:51,279 --> 00:32:54,080
what the answers to some of these

00:32:52,720 --> 00:32:54,960
questions are like what environment

00:32:54,080 --> 00:32:57,679
things are running

00:32:54,960 --> 00:32:58,240
things like that um and the answer is

00:32:57,679 --> 00:33:00,720
twofold

00:32:58,240 --> 00:33:01,840
one is that like i said earlier we don't

00:33:00,720 --> 00:33:03,840
want to be in the business of telling

00:33:01,840 --> 00:33:05,919
people how to write code we want just to

00:33:03,840 --> 00:33:08,960
give them a tool to allow them to

00:33:05,919 --> 00:33:10,720
to enforce writing the the uh writing

00:33:08,960 --> 00:33:13,200
the kind of code that they want to write

00:33:10,720 --> 00:33:13,840
um and the other one is actually just an

00:33:13,200 --> 00:33:17,039
inherent

00:33:13,840 --> 00:33:18,720
uh difficulty in uh javascript itself

00:33:17,039 --> 00:33:21,039
which is that

00:33:18,720 --> 00:33:22,720
javascript in in javascript a lot of

00:33:21,039 --> 00:33:24,080
times we don't have control over the

00:33:22,720 --> 00:33:26,640
execution environment

00:33:24,080 --> 00:33:27,840
if you're running a node then you do but

00:33:26,640 --> 00:33:30,240
if it's running

00:33:27,840 --> 00:33:31,279
in the browser um you really have no

00:33:30,240 --> 00:33:33,440
idea

00:33:31,279 --> 00:33:35,519
you have to make your best guess as to

00:33:33,440 --> 00:33:36,640
what your users are using and the the

00:33:35,519 --> 00:33:38,320
environment

00:33:36,640 --> 00:33:40,399
that's running in and therefore like

00:33:38,320 --> 00:33:41,360
what syntax is supported and so on and

00:33:40,399 --> 00:33:44,240
so forth

00:33:41,360 --> 00:33:46,320
um and so it's actually a problem where

00:33:44,240 --> 00:33:47,840
we

00:33:46,320 --> 00:33:49,600
it would be great if we as a community i

00:33:47,840 --> 00:33:51,760
think came up with a solution

00:33:49,600 --> 00:33:52,880
that says like here are my here are my

00:33:51,760 --> 00:33:56,480
targets

00:33:52,880 --> 00:33:59,120
and then every all the tools um you know

00:33:56,480 --> 00:34:00,240
uh read that and then we're able to

00:33:59,120 --> 00:34:03,279
configure themselves

00:34:00,240 --> 00:34:05,039
accordingly but um without that

00:34:03,279 --> 00:34:06,559
we have to leave it up to the user

00:34:05,039 --> 00:34:10,399
because we don't want to make

00:34:06,559 --> 00:34:10,399
any guesses and be wrong about that

00:34:10,560 --> 00:34:13,919
yeah the trade-off there is should we by

00:34:13,200 --> 00:34:16,960
default

00:34:13,919 --> 00:34:19,919
allow the new es2021 syntax

00:34:16,960 --> 00:34:21,280
or should we by default say well if

00:34:19,919 --> 00:34:24,720
you're targeting

00:34:21,280 --> 00:34:26,480
this older version of edge or safari

00:34:24,720 --> 00:34:29,119
you aren't able to use these things so

00:34:26,480 --> 00:34:31,119
will would we default everybody to like

00:34:29,119 --> 00:34:35,119
ie 11 support i don't

00:34:31,119 --> 00:34:37,679
think that would be a popular choice um

00:34:35,119 --> 00:34:39,119
and and so kai is exactly right that we

00:34:37,679 --> 00:34:40,560
we don't want to put ourselves in a

00:34:39,119 --> 00:34:43,599
position of

00:34:40,560 --> 00:34:46,399
declaring here's what's default

00:34:43,599 --> 00:34:47,919
normal because there's there's very

00:34:46,399 --> 00:34:50,079
little agreement on what that even might

00:34:47,919 --> 00:34:50,079
be

00:34:51,040 --> 00:34:54,480
i also think that there are really two

00:34:53,679 --> 00:34:57,520
scenarios

00:34:54,480 --> 00:34:59,280
for getting started using eslint

00:34:57,520 --> 00:35:02,000
there's the i have a new project

00:34:59,280 --> 00:35:05,440
scenario and i want to set up eslint

00:35:02,000 --> 00:35:08,800
as part of my first few commits getting

00:35:05,440 --> 00:35:10,640
the project started and that is probably

00:35:08,800 --> 00:35:14,160
the easiest because it's the

00:35:10,640 --> 00:35:14,960
the smoothest path and you aren't going

00:35:14,160 --> 00:35:17,280
to have

00:35:14,960 --> 00:35:18,720
a ton of lint warnings when you first

00:35:17,280 --> 00:35:22,079
start out because there's

00:35:18,720 --> 00:35:23,440
no code to begin with the scenario where

00:35:22,079 --> 00:35:26,160
you're adding eslint

00:35:23,440 --> 00:35:27,680
to an existing project is a lot harder

00:35:26,160 --> 00:35:29,520
and

00:35:27,680 --> 00:35:31,040
there's no tried and true solution

00:35:29,520 --> 00:35:33,280
because every

00:35:31,040 --> 00:35:35,200
one is different but there are some

00:35:33,280 --> 00:35:38,400
tools around that

00:35:35,200 --> 00:35:40,960
there's a tool called eslint nibble that

00:35:38,400 --> 00:35:42,000
will help you add eslint to an existing

00:35:40,960 --> 00:35:44,480
project

00:35:42,000 --> 00:35:46,640
where it will say hey you have a bunch

00:35:44,480 --> 00:35:49,119
of errors on this rule

00:35:46,640 --> 00:35:49,839
do you want to just disable it for right

00:35:49,119 --> 00:35:52,560
now

00:35:49,839 --> 00:35:53,520
and you can come back later say it's a

00:35:52,560 --> 00:35:56,640
formatting rule

00:35:53,520 --> 00:35:59,599
that's just not important to have

00:35:56,640 --> 00:36:00,000
day one versus some of the other rules

00:35:59,599 --> 00:36:01,760
that

00:36:00,000 --> 00:36:03,839
might might actually be reporting hey

00:36:01,760 --> 00:36:06,079
this will be a runtime exception

00:36:03,839 --> 00:36:07,280
if you don't fix this and so it helps

00:36:06,079 --> 00:36:09,520
you prioritize

00:36:07,280 --> 00:36:11,599
here's what we want to fix first here's

00:36:09,520 --> 00:36:13,200
what we can save for later

00:36:11,599 --> 00:36:14,800
it can also say well this is a

00:36:13,200 --> 00:36:17,440
formatting rule

00:36:14,800 --> 00:36:20,000
do you want to autofix it we can do that

00:36:17,440 --> 00:36:21,520
and it might lead to a big diff

00:36:20,000 --> 00:36:23,040
so maybe you want to do it immediately

00:36:21,520 --> 00:36:26,240
or maybe you want to save it

00:36:23,040 --> 00:36:28,160
for its own pull request at a later date

00:36:26,240 --> 00:36:29,839
but a tool like eslint nibble is

00:36:28,160 --> 00:36:30,560
designed for exactly that scenario and

00:36:29,839 --> 00:36:33,680
you can check it out

00:36:30,560 --> 00:36:36,079
if you are adding eslint to an existing

00:36:33,680 --> 00:36:36,079
project

00:36:37,119 --> 00:36:40,400
yeah um so we're we're running out of

00:36:39,920 --> 00:36:44,000
time

00:36:40,400 --> 00:36:46,880
but i did want to touch on um

00:36:44,000 --> 00:36:47,920
we went over getting started as a user

00:36:46,880 --> 00:36:50,320
of eslint

00:36:47,920 --> 00:36:52,839
um but there's the other side of getting

00:36:50,320 --> 00:36:55,359
started as a contributor to eslint

00:36:52,839 --> 00:36:57,040
um we uh

00:36:55,359 --> 00:36:59,040
actually do have some documentation i'm

00:36:57,040 --> 00:37:01,599
gonna

00:36:59,040 --> 00:37:02,800
uh i i guess there's no place for me to

00:37:01,599 --> 00:37:05,440
share it easily here

00:37:02,800 --> 00:37:07,720
where everyone can see it but um it's on

00:37:05,440 --> 00:37:09,680
the eslint website uh if you go to

00:37:07,720 --> 00:37:12,000
eslint.org

00:37:09,680 --> 00:37:13,599
and then go to the developer guide and

00:37:12,000 --> 00:37:16,640
then click on contributing

00:37:13,599 --> 00:37:18,240
you'll get to our documentation um

00:37:16,640 --> 00:37:20,079
we one thing that eslint i think does

00:37:18,240 --> 00:37:21,839
really well is

00:37:20,079 --> 00:37:23,520
as for an open source project at least

00:37:21,839 --> 00:37:26,320
is try to document

00:37:23,520 --> 00:37:28,320
everything we do um and and make sure

00:37:26,320 --> 00:37:28,960
that expectations are clear on both

00:37:28,320 --> 00:37:30,160
sides

00:37:28,960 --> 00:37:32,000
and this is actually one of the reasons

00:37:30,160 --> 00:37:32,480
why i started contributing to eslint as

00:37:32,000 --> 00:37:34,079
um

00:37:32,480 --> 00:37:36,320
as someone new to open source and a

00:37:34,079 --> 00:37:39,440
fairly new developer at that time

00:37:36,320 --> 00:37:41,760
um it was it built a lot of trust

00:37:39,440 --> 00:37:43,200
um knowing what the team would expect of

00:37:41,760 --> 00:37:44,079
me the maintainers would expected me and

00:37:43,200 --> 00:37:47,440
what i could expect

00:37:44,079 --> 00:37:48,640
of the maintainers um

00:37:47,440 --> 00:37:51,440
we don't have a ton of time to go

00:37:48,640 --> 00:37:53,760
through it so i won't go through it but

00:37:51,440 --> 00:37:56,480
i am always available on twitter on

00:37:53,760 --> 00:38:00,720
github to help people contribute

00:37:56,480 --> 00:38:00,720
we also have a discord

00:38:01,280 --> 00:38:04,560
which i believe the link to that as

00:38:03,119 --> 00:38:07,680
eslint.org

00:38:04,560 --> 00:38:08,400
chat um to be to ask for an invitation

00:38:07,680 --> 00:38:10,320
or to the

00:38:08,400 --> 00:38:12,160
exact remember how that works but to be

00:38:10,320 --> 00:38:14,560
added to that um

00:38:12,160 --> 00:38:15,520
and we would really love uh to see you

00:38:14,560 --> 00:38:18,960
on github

00:38:15,520 --> 00:38:21,760
um open source projects like eslint

00:38:18,960 --> 00:38:23,119
um only thrive when when there's an

00:38:21,760 --> 00:38:26,800
active community around it

00:38:23,119 --> 00:38:28,560
um and yeah we would we would love to

00:38:26,800 --> 00:38:31,680
help you get your first prn

00:38:28,560 --> 00:38:32,960
get your 30th pr in um please please

00:38:31,680 --> 00:38:35,760
come join us

00:38:32,960 --> 00:38:37,599
yeah and i'll add to that i'll speak

00:38:35,760 --> 00:38:39,440
specifically about contributing dslint

00:38:37,599 --> 00:38:41,839
but a lot of this applies to

00:38:39,440 --> 00:38:43,200
any open source project if you want to

00:38:41,839 --> 00:38:46,079
start contributing

00:38:43,200 --> 00:38:47,440
you don't have to start by writing an

00:38:46,079 --> 00:38:49,200
enormous pull request to implement a

00:38:47,440 --> 00:38:51,119
court change

00:38:49,200 --> 00:38:52,800
in fact there are a lot of ways to

00:38:51,119 --> 00:38:56,640
contribute without writing

00:38:52,800 --> 00:38:58,839
any code at all that are really valuable

00:38:56,640 --> 00:39:00,880
for example if you are new to using

00:38:58,839 --> 00:39:04,000
eslint one of the best

00:39:00,880 --> 00:39:06,480
things that you can do is say

00:39:04,000 --> 00:39:07,359
hey this didn't make sense as i was

00:39:06,480 --> 00:39:10,480
getting started

00:39:07,359 --> 00:39:12,160
and that's whether that's as a user as

00:39:10,480 --> 00:39:14,400
maybe some of the rule documentation

00:39:12,160 --> 00:39:15,359
isn't clear or maybe an even worse hike

00:39:14,400 --> 00:39:17,200
is incorrect

00:39:15,359 --> 00:39:19,359
and you discover that please send a pull

00:39:17,200 --> 00:39:22,560
request that would be wonderful

00:39:19,359 --> 00:39:25,040
or as a developer you find some maybe

00:39:22,560 --> 00:39:26,320
api docs that could be improved please

00:39:25,040 --> 00:39:27,680
send a pull request that's a great way

00:39:26,320 --> 00:39:31,200
to do it

00:39:27,680 --> 00:39:34,160
another way is sitting in the issue

00:39:31,200 --> 00:39:35,839
tracker and seeing what people are

00:39:34,160 --> 00:39:39,119
talking about and

00:39:35,839 --> 00:39:43,280
we have some first good first issue

00:39:39,119 --> 00:39:45,200
labels that you might find and

00:39:43,280 --> 00:39:46,480
on all of those if you say hey i'd like

00:39:45,200 --> 00:39:48,800
to work on this

00:39:46,480 --> 00:39:49,520
um you can claim that and then ask any

00:39:48,800 --> 00:39:51,200
questions

00:39:49,520 --> 00:39:52,640
from the team and and we'll try to help

00:39:51,200 --> 00:39:55,520
you out with that

00:39:52,640 --> 00:39:56,720
to point you in the right direction um

00:39:55,520 --> 00:40:00,240
or

00:39:56,720 --> 00:40:00,800
another good way is to um look at a pull

00:40:00,240 --> 00:40:02,560
request

00:40:00,800 --> 00:40:04,000
especially from somebody who's been

00:40:02,560 --> 00:40:07,119
around the project

00:40:04,000 --> 00:40:10,000
a while and just ask why

00:40:07,119 --> 00:40:10,560
questions i really like when people ask

00:40:10,000 --> 00:40:13,760
why

00:40:10,560 --> 00:40:17,440
on code that i've written because

00:40:13,760 --> 00:40:18,800
it's a chance to confirm context or even

00:40:17,440 --> 00:40:20,480
more frequently

00:40:18,800 --> 00:40:21,760
as i'm writing out here's why i did it

00:40:20,480 --> 00:40:23,119
this way i realize that there's in fact

00:40:21,760 --> 00:40:24,880
a better way to do it

00:40:23,119 --> 00:40:27,920
and it's the process of going through

00:40:24,880 --> 00:40:30,960
and talking about all of that context

00:40:27,920 --> 00:40:34,400
that we both learn something from that

00:40:30,960 --> 00:40:39,119
and it improves the code in the process

00:40:34,400 --> 00:40:40,720
and so helping with issues commenting

00:40:39,119 --> 00:40:42,800
and helping the discussions there are

00:40:40,720 --> 00:40:45,200
another great way and then through

00:40:42,800 --> 00:40:46,400
osmosis of sorts you'll start to become

00:40:45,200 --> 00:40:48,160
more familiar with

00:40:46,400 --> 00:40:50,160
the code base and where things are and

00:40:48,160 --> 00:40:53,760
the way things work

00:40:50,160 --> 00:40:56,880
for eslint specifically um the core apis

00:40:53,760 --> 00:40:58,480
touch a lot of things but the rules

00:40:56,880 --> 00:41:00,000
are at the top level of the stack and

00:40:58,480 --> 00:41:03,920
nothing else calls

00:41:00,000 --> 00:41:06,400
the rules uh so you don't have to

00:41:03,920 --> 00:41:07,920
worry about other about a ton of

00:41:06,400 --> 00:41:09,760
additional context and so if you wanted

00:41:07,920 --> 00:41:11,440
to start by just writing some rules you

00:41:09,760 --> 00:41:13,359
don't even have to do it in core

00:41:11,440 --> 00:41:14,480
if you have a project and you say hey i

00:41:13,359 --> 00:41:18,079
wish

00:41:14,480 --> 00:41:21,520
i had a rule that did this build a rule

00:41:18,079 --> 00:41:24,319
and the apis around what rules can do

00:41:21,520 --> 00:41:26,319
are probably among our most thoroughly

00:41:24,319 --> 00:41:28,800
documented

00:41:26,319 --> 00:41:29,599
and we also have hundreds of examples of

00:41:28,800 --> 00:41:31,040
rules in

00:41:29,599 --> 00:41:33,599
core so you could find something that's

00:41:31,040 --> 00:41:35,040
similar and there's hundreds of examples

00:41:33,599 --> 00:41:36,480
of rules in plug-ins

00:41:35,040 --> 00:41:38,160
so if you don't see something similar in

00:41:36,480 --> 00:41:38,640
core there's probably an example of

00:41:38,160 --> 00:41:41,200
something

00:41:38,640 --> 00:41:43,040
related elsewhere that you could start

00:41:41,200 --> 00:41:45,760
from and that is a great way to get

00:41:43,040 --> 00:41:47,119
familiar with the way eslint works with

00:41:45,760 --> 00:41:49,760
syntax trees

00:41:47,119 --> 00:41:51,280
and reports warnings and all of that so

00:41:49,760 --> 00:41:52,079
that's a great way to get started

00:41:51,280 --> 00:41:54,400
contributing

00:41:52,079 --> 00:41:56,000
as well and like i said we would love to

00:41:54,400 --> 00:41:57,359
help you um there's a developer's

00:41:56,000 --> 00:41:59,119
channel in chat

00:41:57,359 --> 00:42:02,160
specifically for people working on rules

00:41:59,119 --> 00:42:04,560
and plugins and on the project itself

00:42:02,160 --> 00:42:07,359
i would love to help you uh get working

00:42:04,560 --> 00:42:07,359
on that for sure

00:42:08,480 --> 00:42:12,480
yeah awesome well i think we're out of

00:42:10,560 --> 00:42:14,480
time um

00:42:12,480 --> 00:42:17,839
rachel did you have any any last minute

00:42:14,480 --> 00:42:17,839
things you wanted to cover

00:42:18,000 --> 00:42:21,839
nope thank you so much both for uh for

00:42:20,720 --> 00:42:24,160
doing this ama

00:42:21,839 --> 00:42:25,680
and we really appreciate your time um

00:42:24,160 --> 00:42:27,599
and thanks for having us

00:42:25,680 --> 00:42:30,960
absolutely thanks for everybody thanks

00:42:27,599 --> 00:42:34,640
for watching everybody awesome

00:42:30,960 --> 00:42:37,599
thanks y'all i'm gonna take us off

00:42:34,640 --> 00:42:37,599

YouTube URL: https://www.youtube.com/watch?v=9BnJWfyZre4


