Title: OpenJS Foundation AMA Series: Node.js on HTTP, Streams
Publication date: 2020-08-27
Playlist: OpenJS AMAs
Description: 
	AMA on HTTP, Streams with Anatoli Papirovsk and Stephen Belanger
Captions: 
	00:00:00,030 --> 00:00:05,670
go hello my name is Eva ho and I work on

00:00:03,480 --> 00:00:07,980
community relations for the Linux

00:00:05,670 --> 00:00:11,190
Foundation and I want to welcome you to

00:00:07,980 --> 00:00:15,240
our first ask me anything on HTTP in

00:00:11,190 --> 00:00:17,940
streams today we have Anatoly and Steven

00:00:15,240 --> 00:00:20,880
to answer your questions a really good

00:00:17,940 --> 00:00:23,279
conversation about this I hope and so

00:00:20,880 --> 00:00:24,840
you guys everybody who has contributed a

00:00:23,279 --> 00:00:26,369
question we're gonna look that we're

00:00:24,840 --> 00:00:29,010
gonna work on this is we're gonna go

00:00:26,369 --> 00:00:31,890
through the questions in well and the

00:00:29,010 --> 00:00:34,290
order that makes sense to us

00:00:31,890 --> 00:00:37,739
and then we will take extra questions if

00:00:34,290 --> 00:00:38,850
you guys have them at the very end so I

00:00:37,739 --> 00:00:40,890
look forward to an interesting

00:00:38,850 --> 00:00:46,530
discussion well hand it over

00:00:40,890 --> 00:00:53,489
seamen and delete go ahead you may wanna

00:00:46,530 --> 00:00:56,670
go first sure I'm Steven I work at

00:00:53,489 --> 00:00:59,660
elastic of them doing Diagnostics

00:00:56,670 --> 00:00:59,660
working group stuff for years

00:01:02,940 --> 00:01:10,290
oh hey I'm Anatole

00:01:06,690 --> 00:01:12,630
I work at those mates and as a staff

00:01:10,290 --> 00:01:14,870
software engineer I'm also a member on

00:01:12,630 --> 00:01:17,490
the node.js technical steering committee

00:01:14,870 --> 00:01:19,890
I've been involved with node for quite a

00:01:17,490 --> 00:01:23,520
few years now but started contributing

00:01:19,890 --> 00:01:25,229
to chorus initially working on HTTP 2

00:01:23,520 --> 00:01:46,259
and then kind of branched out so a few

00:01:25,229 --> 00:01:49,020
other things but do you want to kind of

00:01:46,259 --> 00:01:51,090
pick up the questions and sure I'm a

00:01:49,020 --> 00:01:53,490
little bit concerned I'll admit that my

00:01:51,090 --> 00:01:54,990
technical skills are limited so but I

00:01:53,490 --> 00:01:56,250
will just start at the beginning and

00:01:54,990 --> 00:01:58,979
then if that doesn't make sense to talk

00:01:56,250 --> 00:02:00,300
about would you guys tell me yeah and we

00:01:58,979 --> 00:02:02,070
can also address any of the ones that

00:02:00,300 --> 00:02:05,070
don't make sense and try to help out as

00:02:02,070 --> 00:02:07,590
much as we can ok good so let's start at

00:02:05,070 --> 00:02:09,149
the beginning the first one says hello I

00:02:07,590 --> 00:02:10,619
don't have any questions now because I'm

00:02:09,149 --> 00:02:14,040
not going deep with nodejs

00:02:10,619 --> 00:02:15,750
but I just want to know more Oh other

00:02:14,040 --> 00:02:18,060
member questions sorry about that

00:02:15,750 --> 00:02:23,490
how'd it get started with HTTP in

00:02:18,060 --> 00:02:27,209
streams that's a broad question question

00:02:23,490 --> 00:02:28,740
maybe with the better question be how

00:02:27,209 --> 00:02:33,209
does somebody get started in

00:02:28,740 --> 00:02:35,120
contributing um GPM stream I mean I can

00:02:33,209 --> 00:02:38,700
I can speak to my personal experience

00:02:35,120 --> 00:02:40,980
and I let Stefan also jump in as much as

00:02:38,700 --> 00:02:43,860
he wants but I mean I've I personally

00:02:40,980 --> 00:02:48,569
when I was starting out with node awhile

00:02:43,860 --> 00:02:51,540
ago I used sub stats stream handbook and

00:02:48,569 --> 00:02:54,870
I found it quite helpful and pretty

00:02:51,540 --> 00:02:56,970
concise and easy to understand so if

00:02:54,870 --> 00:02:57,810
somebody's trying to learn HTTP in

00:02:56,970 --> 00:03:00,030
streams

00:02:57,810 --> 00:03:03,569
I think that's kind of a good good

00:03:00,030 --> 00:03:05,010
starting point from my perspective um if

00:03:03,569 --> 00:03:08,400
you're just trying to use HTTP I think

00:03:05,010 --> 00:03:10,800
something like festivai or Express our

00:03:08,400 --> 00:03:12,560
code libraries to just use HTTP you know

00:03:10,800 --> 00:03:16,709
need to know it's not about the actual

00:03:12,560 --> 00:03:21,090
underlying I'm transport layer

00:03:16,709 --> 00:03:23,510
so that's kind of I would say I don't

00:03:21,090 --> 00:03:23,510
have fun

00:03:23,849 --> 00:03:27,090
what was your experience and then I

00:03:25,709 --> 00:03:31,260
guess I'm actually curious did you guys

00:03:27,090 --> 00:03:33,299
start in maybe this is not the right

00:03:31,260 --> 00:03:36,000
question to ask but did you guys start

00:03:33,299 --> 00:03:38,280
with contributing in in this project or

00:03:36,000 --> 00:03:42,359
did you start at another one how did you

00:03:38,280 --> 00:03:44,519
guys get a little bit more into

00:03:42,359 --> 00:03:45,780
contributing to open source of note in

00:03:44,519 --> 00:03:50,939
general is probably another good

00:03:45,780 --> 00:03:54,230
question to start with - so in my case I

00:03:50,939 --> 00:03:58,709
had been doing open source stuff for

00:03:54,230 --> 00:04:03,450
video game industry stuff comes from

00:03:58,709 --> 00:04:05,129
game engines and things yes I actually

00:04:03,450 --> 00:04:08,609
started contributing to other projects

00:04:05,129 --> 00:04:10,260
before um I was I was always understand

00:04:08,609 --> 00:04:13,530
why buhdeuce so my first contributions

00:04:10,260 --> 00:04:16,769
were to WebKit um I can like I wasn't

00:04:13,530 --> 00:04:20,519
six maybe I don't know a while ago and

00:04:16,769 --> 00:04:22,199
then and I just traveled around tried to

00:04:20,519 --> 00:04:23,849
tried a few different projects and I

00:04:22,199 --> 00:04:25,919
know it was the the most kind of

00:04:23,849 --> 00:04:31,220
interesting and also the most applicable

00:04:25,919 --> 00:04:36,630
because I was actually using it and of

00:04:31,220 --> 00:04:37,800
necessity is it makes a lot of sense to

00:04:36,630 --> 00:04:40,830
contribute to something you're using

00:04:37,800 --> 00:04:43,889
right cuz there's a there's a definite

00:04:40,830 --> 00:04:45,570
immediate connection there yeah yeah if

00:04:43,889 --> 00:04:52,159
you fit doesn't have something that you

00:04:45,570 --> 00:04:55,500
need you just build it yeah yeah exactly

00:04:52,159 --> 00:04:57,449
all right next question

00:04:55,500 --> 00:04:59,970
stream load balancing what kind of

00:04:57,449 --> 00:05:01,380
techniques and patterns helped to

00:04:59,970 --> 00:05:09,180
develop high-performance streaming API

00:05:01,380 --> 00:05:12,419
is like Netflix etc so a month most of

00:05:09,180 --> 00:05:14,580
that is just like tweaking the high

00:05:12,419 --> 00:05:19,680
watermark stuff in it like making sure

00:05:14,580 --> 00:05:22,639
your views have like a good balance for

00:05:19,680 --> 00:05:28,320
the buffer size also some things to

00:05:22,639 --> 00:05:30,600
think about like I've often times seeing

00:05:28,320 --> 00:05:35,180
people who like chained together like

00:05:30,600 --> 00:05:37,620
ten different like transforms dreams

00:05:35,180 --> 00:05:40,200
there's a lot of machinery in streams so

00:05:37,620 --> 00:05:42,570
it can be a lot faster to just have like

00:05:40,200 --> 00:05:43,920
one stream that does all the things okay

00:05:42,570 --> 00:05:47,370
an example might be like if you have

00:05:43,920 --> 00:05:49,710
aligned Illumina JSON you might have

00:05:47,370 --> 00:05:52,440
like a line split stream and then like a

00:05:49,710 --> 00:06:00,210
json.parse stream and it'd be faster

00:05:52,440 --> 00:06:02,370
just do the two is one stream yeah I

00:06:00,210 --> 00:06:05,370
agree there I think the other thing that

00:06:02,370 --> 00:06:06,960
I've seen often is a people get button

00:06:05,370 --> 00:06:08,250
like not on the stream functionality

00:06:06,960 --> 00:06:13,830
itself but in the amount of processing

00:06:08,250 --> 00:06:15,630
video and the code that they write so I

00:06:13,830 --> 00:06:16,950
mean the fact that you know no there's

00:06:15,630 --> 00:06:20,610
obviously single threaded you have to

00:06:16,950 --> 00:06:24,600
keep in mind that you know CPU have the

00:06:20,610 --> 00:06:25,860
operations are gonna be blocking so if

00:06:24,600 --> 00:06:27,540
you're processing the data you have to

00:06:25,860 --> 00:06:29,700
be mindful about how how good your code

00:06:27,540 --> 00:06:35,700
is and kind of make sure that you're

00:06:29,700 --> 00:06:39,630
writing efficient JavaScript you know

00:06:35,700 --> 00:06:44,240
there's there's lots of cases where I've

00:06:39,630 --> 00:06:47,040
seen streams like they don't really like

00:06:44,240 --> 00:06:52,170
take advantage of the buffering features

00:06:47,040 --> 00:06:53,610
very well a lot of I've seen a lot of

00:06:52,170 --> 00:06:56,390
things - fela contradict streams that

00:06:53,610 --> 00:06:58,530
have no reason to the optic streams and

00:06:56,390 --> 00:07:05,670
the convict stream doesn't really have

00:06:58,530 --> 00:07:07,910
the offering its influenced quite

00:07:05,670 --> 00:07:07,910
quickly

00:07:13,050 --> 00:07:18,460
yeah I think I think that's kind of a

00:07:15,130 --> 00:07:19,900
good overview there with our more

00:07:18,460 --> 00:07:22,210
specific questions later from people

00:07:19,900 --> 00:07:23,680
around um specific issues that

00:07:22,210 --> 00:07:26,350
encountered with performance I think we

00:07:23,680 --> 00:07:27,750
can probably dive into those okay at a

00:07:26,350 --> 00:07:29,949
high level I think this is kind of a

00:07:27,750 --> 00:07:32,740
good summary okay

00:07:29,949 --> 00:07:39,490
all right next question compare streams

00:07:32,740 --> 00:07:44,169
in node with Java I don't write Java so

00:07:39,490 --> 00:07:48,130
I'm just gonna opt out here even what

00:07:44,169 --> 00:07:50,289
about you do you write Java uh I have

00:07:48,130 --> 00:07:52,449
written Java but it was like years

00:07:50,289 --> 00:07:57,780
before streams were really a thing there

00:07:52,449 --> 00:08:02,340
so yeah I don't really have much

00:07:57,780 --> 00:08:08,289
comments on that okay then next question

00:08:02,340 --> 00:08:10,389
I'd love I'd love an explanation I'm not

00:08:08,289 --> 00:08:12,550
like at 5 or high low or just high level

00:08:10,389 --> 00:08:13,690
understanding of HTTP and streams and

00:08:12,550 --> 00:08:15,610
why it's good to know about it

00:08:13,690 --> 00:08:17,639
what's the strengths and the example of

00:08:15,610 --> 00:08:20,560
when it's not a good idea to do streams

00:08:17,639 --> 00:08:22,630
that will really help and I am sure the

00:08:20,560 --> 00:08:24,940
other developers are in the same boat so

00:08:22,630 --> 00:08:28,510
a little bit Jarboe question but it

00:08:24,940 --> 00:08:31,389
sounds like basically why do people use

00:08:28,510 --> 00:08:34,830
streams and when it's a good idea to use

00:08:31,389 --> 00:08:34,830
it and when is good idea not to use it

00:08:37,169 --> 00:08:45,880
and so streams they're their main

00:08:42,150 --> 00:08:49,380
function really is to just get stuff

00:08:45,880 --> 00:08:51,820
like both into and out of memory quickly

00:08:49,380 --> 00:08:54,520
it's like the getting it out of memory

00:08:51,820 --> 00:08:57,910
that I think it's the important part of

00:08:54,520 --> 00:09:00,370
that I get it if you're processing like

00:08:57,910 --> 00:09:02,320
a giant like a couple gigabyte file or

00:09:00,370 --> 00:09:05,890
something like that you probably don't

00:09:02,320 --> 00:09:09,339
want to let all that into memory like if

00:09:05,890 --> 00:09:12,310
you're just processing like a couple of

00:09:09,339 --> 00:09:17,079
kilobytes or something and may or may

00:09:12,310 --> 00:09:20,500
not matter that much but if I was kind

00:09:17,079 --> 00:09:22,070
of a balance that's like the amount of

00:09:20,500 --> 00:09:29,630
time you spend like

00:09:22,070 --> 00:09:31,040
loading a file into memory like the kind

00:09:29,630 --> 00:09:33,980
of I'm like how this how the system is

00:09:31,040 --> 00:09:37,690
set up like that that could interfere

00:09:33,980 --> 00:09:37,690
with the application doing other things

00:09:38,529 --> 00:09:50,600
like file loading is generally fine but

00:09:41,360 --> 00:09:56,269
uh yeah it if you have to just like do a

00:09:50,600 --> 00:10:00,980
lot of like stuff on the CPU then it's

00:09:56,269 --> 00:10:02,810
better to stream it um trying to think

00:10:00,980 --> 00:10:07,550
of a good example of something a lot

00:10:02,810 --> 00:10:11,329
will actually block the process maybe

00:10:07,550 --> 00:10:13,759
like if you're trying to like request a

00:10:11,329 --> 00:10:16,730
route or something in the route house

00:10:13,759 --> 00:10:21,259
like a loop that it's doing a bunch of

00:10:16,730 --> 00:10:24,550
like you know computation like spitting

00:10:21,259 --> 00:10:24,550
out tons and tons of JSON

00:10:35,350 --> 00:10:40,730
usually what do you think I think that

00:10:38,210 --> 00:10:43,520
covered it honestly from the kind of you

00:10:40,730 --> 00:10:46,610
know if you're it's it's I mean for me

00:10:43,520 --> 00:10:47,960
streams are awaits you just take a big

00:10:46,610 --> 00:10:52,250
chunk of work and break a bit up right

00:10:47,960 --> 00:10:55,640
so its main use is like if you're trying

00:10:52,250 --> 00:10:57,500
to avoid um if you're working with big

00:10:55,640 --> 00:11:01,070
files working with anything that's it's

00:10:57,500 --> 00:11:03,890
using significant memory um kind of the

00:11:01,070 --> 00:11:06,590
main application or anything that's you

00:11:03,890 --> 00:11:09,500
know kind of broken up over time so like

00:11:06,590 --> 00:11:14,830
that's why you know HTTP obviously is

00:11:09,500 --> 00:11:14,830
naturally a streaming kind of interface

00:11:16,030 --> 00:11:22,730
the breaking it up over time they got it

00:11:19,190 --> 00:11:24,950
is a bit important to just give you your

00:11:22,730 --> 00:11:27,440
track you trying to like split stuff up

00:11:24,950 --> 00:11:29,390
so it fits in both like fits in memory

00:11:27,440 --> 00:11:31,140
but also fits unlike a time profile that

00:11:29,390 --> 00:11:34,240
is acceptable

00:11:31,140 --> 00:11:34,240
[Music]

00:11:34,510 --> 00:11:39,830
they're like loop example you're doing

00:11:37,730 --> 00:11:42,440
all bunch of stuff event arrives like if

00:11:39,830 --> 00:11:45,080
you're doing something synchronous the

00:11:42,440 --> 00:11:46,940
inside of the route that means the the

00:11:45,080 --> 00:11:48,980
server can't handle other requests at

00:11:46,940 --> 00:11:52,330
the same time

00:11:48,980 --> 00:11:56,810
yeah like breaking that up into chunks

00:11:52,330 --> 00:12:00,470
makes it easier for the system to do

00:11:56,810 --> 00:12:04,670
multiple things at the same time it does

00:12:00,470 --> 00:12:08,270
mean the extra machinery of streams that

00:12:04,670 --> 00:12:13,490
it's gonna technically take longer but

00:12:08,270 --> 00:12:15,530
it's it's a trade-off yeah I think that

00:12:13,490 --> 00:12:17,210
time component here is important

00:12:15,530 --> 00:12:20,030
obviously I think like a good example of

00:12:17,210 --> 00:12:22,550
delegation a PD and you know you're you

00:12:20,030 --> 00:12:24,410
have a third party that's sending you

00:12:22,550 --> 00:12:25,700
let's say ten files and they're all

00:12:24,410 --> 00:12:29,660
coming in over the course of like a

00:12:25,700 --> 00:12:31,580
minute if you feel I using streams

00:12:29,660 --> 00:12:33,530
you're just sitting there waiting for

00:12:31,580 --> 00:12:37,690
the full file to come in and then

00:12:33,530 --> 00:12:37,690
process each one in a minute

00:12:43,150 --> 00:12:46,260
[Music]

00:12:49,660 --> 00:12:55,970
Italy I think we lost seem to frozen a

00:12:53,210 --> 00:12:57,590
little bit even did you have anything

00:12:55,970 --> 00:12:59,650
else to say on this or should I move on

00:12:57,590 --> 00:13:04,910
to the next question

00:12:59,650 --> 00:13:06,680
no okay so the next question is what is

00:13:04,910 --> 00:13:08,780
the underlying protocol transferred

00:13:06,680 --> 00:13:18,500
implementation and what are the correct

00:13:08,780 --> 00:13:30,080
reliability expectations I'm not sure

00:13:18,500 --> 00:13:34,610
exactly what they're asking their next

00:13:30,080 --> 00:13:40,910
question see how can we stream live

00:13:34,610 --> 00:13:44,470
videos using Rona j s2 or Jace no

00:13:40,910 --> 00:13:52,550
third-party modules does that make sense

00:13:44,470 --> 00:13:55,100
or to third-party modules yeah I think

00:13:52,550 --> 00:14:03,170
they want to use node with that other

00:13:55,100 --> 00:14:06,200
modules not sure why okay yeah for for

00:14:03,170 --> 00:14:08,600
video streaming yeah I'd recommend just

00:14:06,200 --> 00:14:10,700
like pulling one of the existing things

00:14:08,600 --> 00:14:15,320
off the shelf because there's a bunch of

00:14:10,700 --> 00:14:21,530
like ffmpeg things like that that make

00:14:15,320 --> 00:14:23,950
it much much much easier hey what do you

00:14:21,530 --> 00:14:29,930
think I agree you're gonna be um

00:14:23,950 --> 00:14:33,500
reinventing the wheel then I think the

00:14:29,930 --> 00:14:36,320
streaming is complicated yeah I've had

00:14:33,500 --> 00:14:43,700
to do it before and there's a reason I

00:14:36,320 --> 00:14:46,220
haven't done it again all right what is

00:14:43,700 --> 00:14:48,020
the best resource and learning about HCP

00:14:46,220 --> 00:14:51,530
and streams for someone new to web

00:14:48,020 --> 00:14:52,400
development I think we as well you were

00:14:51,530 --> 00:14:55,040
already talking

00:14:52,400 --> 00:14:57,950
about some good resources dude keep it

00:14:55,040 --> 00:15:01,310
did you have anything to add or was do

00:14:57,950 --> 00:15:04,040
you feel like that was sufficient not to

00:15:01,310 --> 00:15:07,760
much as streams handbook he's pretty

00:15:04,040 --> 00:15:11,120
good there's a blog post streams for

00:15:07,760 --> 00:15:15,950
everyone but pretty good and that's like

00:15:11,120 --> 00:15:21,850
a nice little diagram just showing some

00:15:15,950 --> 00:15:27,470
state machine I guess of how all the

00:15:21,850 --> 00:15:29,450
functions of events get together yeah

00:15:27,470 --> 00:15:31,340
the one other thing I have to add is I

00:15:29,450 --> 00:15:35,330
believe note school used to have a nice

00:15:31,340 --> 00:15:40,250
interactive the Li tutorial that you can

00:15:35,330 --> 00:15:42,320
use to other streams adventure yeah I

00:15:40,250 --> 00:15:43,820
don't know if it still works if it

00:15:42,320 --> 00:15:47,110
doesn't work it's a good opportunity for

00:15:43,820 --> 00:15:47,110
someone to contribute to open source

00:15:47,620 --> 00:15:56,300
make it work again leave it still works

00:15:51,920 --> 00:15:58,430
but my target like streams to ideas or

00:15:56,300 --> 00:15:59,870
something like that yeah you know you

00:15:58,430 --> 00:16:02,180
might have to use it on an older node

00:15:59,870 --> 00:16:04,160
version as well so that's the only thing

00:16:02,180 --> 00:16:14,990
I've seen with these um some of them

00:16:04,160 --> 00:16:18,890
have broken own like tendons both about

00:16:14,990 --> 00:16:20,600
HTTP when client requests when client

00:16:18,890 --> 00:16:22,370
requests listens to events there is no

00:16:20,600 --> 00:16:25,940
event where we can be sure that it will

00:16:22,370 --> 00:16:28,460
be called at the end in node eight error

00:16:25,940 --> 00:16:30,530
event can be called after closed event

00:16:28,460 --> 00:16:32,000
in request and no twelve that's not

00:16:30,530 --> 00:16:33,980
possible anymore but you can have a

00:16:32,000 --> 00:16:35,240
closed event in response called after

00:16:33,980 --> 00:16:37,130
closed event for requests

00:16:35,240 --> 00:16:39,440
what are you possible to have one kind

00:16:37,130 --> 00:16:41,930
of flow event order I think it would be

00:16:39,440 --> 00:16:48,760
simpler and client won't mean to list

00:16:41,930 --> 00:16:53,300
multiple events for those cases yeah so

00:16:48,760 --> 00:16:54,680
streams are complicated and the things

00:16:53,300 --> 00:16:55,190
have changed a bunch of times over the

00:16:54,680 --> 00:16:58,720
years

00:16:55,190 --> 00:17:03,680
so almost no one knows how to actually

00:16:58,720 --> 00:17:10,670
do that properly there's

00:17:03,680 --> 00:17:12,740
a module end of stream but I can do that

00:17:10,670 --> 00:17:15,709
for you and handles all the weird

00:17:12,740 --> 00:17:25,880
education stuff because there's a bunch

00:17:15,709 --> 00:17:27,620
of them if you try and look at the code

00:17:25,880 --> 00:17:29,150
on github which is a bunch of stuff it

00:17:27,620 --> 00:17:32,950
does and there's like a bunch of

00:17:29,150 --> 00:17:35,330
different events complete and abort sum

00:17:32,950 --> 00:17:39,710
of all these different things that exist

00:17:35,330 --> 00:17:42,559
on like certain types of streams you

00:17:39,710 --> 00:17:44,000
just like close and finish event and all

00:17:42,559 --> 00:17:47,240
those sort of things which like tries to

00:17:44,000 --> 00:17:51,559
catch everything eventually be like yeah

00:17:47,240 --> 00:17:55,670
something happened it's done yeah it's

00:17:51,559 --> 00:17:57,679
here outside of the the HTTP side of it

00:17:55,670 --> 00:17:59,960
is even more complicated as a result of

00:17:57,679 --> 00:18:02,000
the number of streams they're involved

00:17:59,960 --> 00:18:04,100
so there's both the request and the

00:18:02,000 --> 00:18:08,809
response and there's also the underlying

00:18:04,100 --> 00:18:14,120
socket so the state machine gets all the

00:18:08,809 --> 00:18:18,050
more complicated as a result I think you

00:18:14,120 --> 00:18:23,740
can generally speaking use the finished

00:18:18,050 --> 00:18:34,610
utility in which is pound car kind of

00:18:23,740 --> 00:18:39,410
abstract sum it up yeah anything else

00:18:34,610 --> 00:18:43,840
dad no no I would I would recommend

00:18:39,410 --> 00:18:43,840
using finished in a in core okay

00:18:46,770 --> 00:18:52,200
basics of streams can it be used in IOT

00:18:49,980 --> 00:19:05,190
scenario to get data from devices in

00:18:52,200 --> 00:19:12,150
real time yeah I don't work with IOT but

00:19:05,190 --> 00:19:14,550
yes I'd see my op and I'm not sure if

00:19:12,150 --> 00:19:15,840
they're like referring to running node

00:19:14,550 --> 00:19:20,120
directly on the device and using that

00:19:15,840 --> 00:19:22,830
extreme stuff out or consuming streams

00:19:20,120 --> 00:19:25,290
there are some devices you can run

00:19:22,830 --> 00:19:28,309
directly on the device it's definitely

00:19:25,290 --> 00:19:30,840
possible to stream and a lot don't

00:19:28,309 --> 00:19:35,340
notice like a bigger runtime and depends

00:19:30,840 --> 00:19:37,170
on the operating system and stuff can

00:19:35,340 --> 00:19:42,480
you stream you're saying can you stream

00:19:37,170 --> 00:19:48,210
in - uh yeah you can stream into a note

00:19:42,480 --> 00:19:53,490
app easily as long as whatever device

00:19:48,210 --> 00:20:05,429
you're using is capable of streaming

00:19:53,490 --> 00:20:07,410
data should be generally alright I would

00:20:05,429 --> 00:20:10,080
like to know more about nodes native

00:20:07,410 --> 00:20:11,820
HTTP module and using streams from the

00:20:10,080 --> 00:20:14,940
perspective of someone with experience

00:20:11,820 --> 00:20:19,520
mainly using Express also how does data

00:20:14,940 --> 00:20:19,520
serialization relate to using streams

00:20:23,929 --> 00:20:31,610
um that's a vague question I guess I

00:20:27,440 --> 00:20:36,350
mean I think you know Express obviously

00:20:31,610 --> 00:20:38,649
uses HTTP under the hood so it's just

00:20:36,350 --> 00:20:44,059
they it's just a nicer wrapper around it

00:20:38,649 --> 00:20:48,409
with some conveniences it has some stuff

00:20:44,059 --> 00:20:54,200
built in like handling file uploads yeah

00:20:48,409 --> 00:20:56,240
like thing that's like if anyone uses

00:20:54,200 --> 00:20:58,999
that and doesn't know how it works like

00:20:56,240 --> 00:21:04,399
the body parser it's basically just

00:20:58,999 --> 00:21:08,690
going to read the request stream like it

00:21:04,399 --> 00:21:09,740
the like next function that like

00:21:08,690 --> 00:21:11,690
triggers the next thing in the

00:21:09,740 --> 00:21:13,399
middleware chain it's just not gonna

00:21:11,690 --> 00:21:19,100
call that until the request string those

00:21:13,399 --> 00:21:23,840
done doing it the body not actually too

00:21:19,100 --> 00:21:26,990
complicated internally I'll do the same

00:21:23,840 --> 00:21:29,269
thing yep you know and I would I would

00:21:26,990 --> 00:21:33,350
also add that HTTP in general and note

00:21:29,269 --> 00:21:38,360
is obviously basically a implementation

00:21:33,350 --> 00:21:40,309
of the of the spec with you know kind of

00:21:38,360 --> 00:21:44,210
a state machine there's not there's not

00:21:40,309 --> 00:21:46,129
a ton day that's like it's not really

00:21:44,210 --> 00:21:49,220
ready for use as is unless you're doing

00:21:46,129 --> 00:21:51,669
a very basic server which is why Express

00:21:49,220 --> 00:21:53,749
and festa Phi and everything else exists

00:21:51,669 --> 00:22:04,879
to make it actually easy to write a

00:21:53,749 --> 00:22:07,519
server okay next one how stable is HTTP

00:22:04,879 --> 00:22:11,749
to work currently a node also interested

00:22:07,519 --> 00:22:15,919
in hearing if there are benchmarks yeah

00:22:11,749 --> 00:22:20,119
it's very stable it's ready to use

00:22:15,919 --> 00:22:24,129
you can use it with most of the popular

00:22:20,119 --> 00:22:27,559
libraries I would call up fast affiant

00:22:24,129 --> 00:22:33,109
happy as the two that probably supported

00:22:27,559 --> 00:22:36,139
the best right now yeah it's very it's

00:22:33,109 --> 00:22:37,910
very stable the HTTP 2 is actually

00:22:36,139 --> 00:22:47,780
implemented on top

00:22:37,910 --> 00:22:49,310
a sea library ng http/2 which is ability

00:22:47,780 --> 00:22:53,720
of fully compliant with the spec and

00:22:49,310 --> 00:22:56,480
very performant there are benchmarks for

00:22:53,720 --> 00:22:57,530
the note kind of side of things I don't

00:22:56,480 --> 00:23:01,450
know if there are benchmarks that

00:22:57,530 --> 00:23:04,760
compare ACP to with in node with other

00:23:01,450 --> 00:23:07,840
implementations out there I also don't

00:23:04,760 --> 00:23:12,110
know how I carried those would be anyway

00:23:07,840 --> 00:23:13,730
but it's definitely like performance is

00:23:12,110 --> 00:23:16,220
something that was definitely considered

00:23:13,730 --> 00:23:17,750
and something that people carried about

00:23:16,220 --> 00:23:26,930
during the development of the HTTP to

00:23:17,750 --> 00:23:29,360
HTTPS you and node I do wonder thing I

00:23:26,930 --> 00:23:31,550
sorry I would call out is um so HTTP to

00:23:29,360 --> 00:23:33,860
and note has two different modes so

00:23:31,550 --> 00:23:38,860
there's the kind of a fully-featured

00:23:33,860 --> 00:23:42,350
core module which is the full HTTP to

00:23:38,860 --> 00:23:44,180
implementation including our streams and

00:23:42,350 --> 00:23:47,380
all of the other stuff that you kind of

00:23:44,180 --> 00:23:50,720
might want that and there's a

00:23:47,380 --> 00:23:53,210
compatibility mode which is basically

00:23:50,720 --> 00:23:56,480
just a wrapper around HTTP 2 to make it

00:23:53,210 --> 00:23:58,970
compatible with the HTTP 1 API that's

00:23:56,480 --> 00:24:03,310
what allows it to work with festa Phi

00:23:58,970 --> 00:24:03,310
and other frameworks out-of-the-box

00:24:06,520 --> 00:24:17,120
didn't do you have anything to okay

00:24:12,130 --> 00:24:20,780
first money used HTTP yeah really seen

00:24:17,120 --> 00:24:23,210
too many users using it yet yeah yeah so

00:24:20,780 --> 00:24:25,610
I think I think also note it's I mean

00:24:23,210 --> 00:24:27,320
it's worth calling out the must you know

00:24:25,610 --> 00:24:31,580
you're doing your connection

00:24:27,320 --> 00:24:34,700
terminations yourself or your I don't

00:24:31,580 --> 00:24:36,500
know using push streams I guess there's

00:24:34,700 --> 00:24:38,930
not necessarily a heavy use case for it

00:24:36,500 --> 00:24:40,460
I mean if you have most most

00:24:38,930 --> 00:24:43,360
server-to-server communication will

00:24:40,460 --> 00:24:46,360
still be not HTTP - in my experience

00:24:43,360 --> 00:24:46,360
yeah

00:24:47,029 --> 00:24:51,929
okay next question

00:24:49,529 --> 00:24:53,970
why are transposing streams and handling

00:24:51,929 --> 00:25:01,740
errors that might occur so difficult to

00:24:53,970 --> 00:25:07,440
write okay

00:25:01,740 --> 00:25:18,899
reasons I recommend my recommendation is

00:25:07,440 --> 00:25:20,399
just use the pump module yeah and I

00:25:18,899 --> 00:25:28,559
think I think Steven also covered the

00:25:20,399 --> 00:25:33,149
why it's so difficult earlier any

00:25:28,559 --> 00:25:36,169
webpack plugins to make this easier not

00:25:33,149 --> 00:25:38,279
sure what they're referring to by this

00:25:36,169 --> 00:25:41,820
does that make sense to you guys

00:25:38,279 --> 00:25:44,669
nope I think the lack of context some of

00:25:41,820 --> 00:25:46,679
the disses is uh is unfortunately gonna

00:25:44,669 --> 00:25:50,250
prevent us from answering this one okay

00:25:46,679 --> 00:25:54,690
I have two questions of how to use that

00:25:50,250 --> 00:25:58,580
use it anything you want to add from our

00:25:54,690 --> 00:26:00,630
kind of original foundational questions

00:25:58,580 --> 00:26:02,639
no I would recommend the guides that we

00:26:00,630 --> 00:26:05,850
that we kind of suggested earlier those

00:26:02,639 --> 00:26:07,679
are good good starting points and also I

00:26:05,850 --> 00:26:10,260
would say the no documentation itself is

00:26:07,679 --> 00:26:12,990
now pretty good stuff another come a

00:26:10,260 --> 00:26:16,559
long way over the years I think it's

00:26:12,990 --> 00:26:17,940
just like the strange documentation is

00:26:16,559 --> 00:26:19,769
not allowed the worst place to start

00:26:17,940 --> 00:26:22,559
actually where whereas it used to be

00:26:19,769 --> 00:26:27,419
completely confusing I think okay all

00:26:22,559 --> 00:26:29,820
right the next one is maybe I solve this

00:26:27,419 --> 00:26:31,919
by the time but what is the best way to

00:26:29,820 --> 00:26:41,389
download multiple large files at the

00:26:31,919 --> 00:26:43,380
same time I think it depends like what

00:26:41,389 --> 00:26:48,419
framework you're building honor if

00:26:43,380 --> 00:26:50,370
you're using a framework at all but each

00:26:48,419 --> 00:26:55,110
each frame work generally has its own

00:26:50,370 --> 00:26:58,100
body parts or thing is some sorts and a

00:26:55,110 --> 00:26:58,100
bunch of them is

00:26:59,400 --> 00:27:16,840
like a module in internally monitor and

00:27:13,120 --> 00:27:18,790
we're now yeah yeah I think robot is the

00:27:16,840 --> 00:27:25,900
one that like everything else uses

00:27:18,790 --> 00:27:30,550
internally look at that-air anything

00:27:25,900 --> 00:27:34,860
that uses that gives you some controls

00:27:30,550 --> 00:27:34,860
to accept limits and things like that

00:27:36,540 --> 00:27:46,480
okay absolutely anything dad nope not

00:27:41,140 --> 00:27:50,770
really not into this one hey let's see

00:27:46,480 --> 00:27:53,560
is hcp streams implemented by labove I

00:27:50,770 --> 00:28:06,640
like you've eaten or part of a different

00:27:53,560 --> 00:28:10,780
node J s dependency complicated Libby V

00:28:06,640 --> 00:28:15,730
has its own streams concept which is not

00:28:10,780 --> 00:28:19,480
really the same is this kind of a layer

00:28:15,730 --> 00:28:21,460
of like Libby V streams stuff happens in

00:28:19,480 --> 00:28:25,540
the sea layer and that kind of gets

00:28:21,460 --> 00:28:34,020
translated to some extent to like

00:28:25,540 --> 00:28:34,020
JavaScript concept of streams yeah

00:28:34,680 --> 00:28:40,140
there's kind of like two layers of

00:28:36,760 --> 00:28:44,110
different types of stream complicated to

00:28:40,140 --> 00:28:48,700
understand all of it yeah

00:28:44,110 --> 00:28:52,180
I think that kind of gets at it but yeah

00:28:48,700 --> 00:28:57,010
I so like there's also a difference

00:28:52,180 --> 00:28:59,500
between the strains itself and HTTP and

00:28:57,010 --> 00:29:04,300
there's many different layers of what

00:28:59,500 --> 00:29:08,740
the streams are like the you know the

00:29:04,300 --> 00:29:11,140
TCP socket is obviously at some point

00:29:08,740 --> 00:29:17,670
wrapped around a

00:29:11,140 --> 00:29:20,200
TCB handle which is a beauty stream but

00:29:17,670 --> 00:29:21,850
you know some of the higher level ups or

00:29:20,200 --> 00:29:23,830
abstractions but some of the high level

00:29:21,850 --> 00:29:26,020
stuff and note is not necessarily using

00:29:23,830 --> 00:29:30,880
the lib beauty stuff it just depends on

00:29:26,020 --> 00:29:33,820
it as a like every every io resource and

00:29:30,880 --> 00:29:35,670
node so what is H CP or FS or anything

00:29:33,820 --> 00:29:39,520
else depends on the concept with handles

00:29:35,670 --> 00:29:41,260
where the handles are the lip UV streams

00:29:39,520 --> 00:29:43,809
and there's a bunch of different ones

00:29:41,260 --> 00:29:57,130
there's the TCP one there's the UDP one

00:29:43,809 --> 00:29:59,650
there's FS ones streaming date now NH

00:29:57,130 --> 00:30:02,200
should be the correct way also buffer

00:29:59,650 --> 00:30:04,870
array I think what is the correct way

00:30:02,200 --> 00:30:15,160
also buffer array buffer our JSON type

00:30:04,870 --> 00:30:19,570
data or what does that make more sense

00:30:15,160 --> 00:30:20,669
to you guys and it does to me not really

00:30:19,570 --> 00:30:26,530
sure

00:30:20,669 --> 00:30:27,850
yeah I'm uncertain about this one but I

00:30:26,530 --> 00:30:29,919
think some of the advice we gave earlier

00:30:27,850 --> 00:30:36,090
might be useful to them hopefully

00:30:29,919 --> 00:30:36,090
okay what about streams error handling

00:30:37,470 --> 00:30:44,440
and we touched on that a bit before it's

00:30:40,809 --> 00:30:48,429
a complicated Beast yeah hey excuse the

00:30:44,440 --> 00:30:51,750
pump module alright how do I get my app

00:30:48,429 --> 00:30:51,750
done on nodejs

00:30:52,020 --> 00:31:11,420
that sounds like a rather broad question

00:30:55,750 --> 00:31:17,720
yep all right um see she may be on the

00:31:11,420 --> 00:31:19,250
call have any other questions all right

00:31:17,720 --> 00:31:24,230
well if nobody has any extra questions

00:31:19,250 --> 00:31:25,580
um I will intially Steven do you have

00:31:24,230 --> 00:31:27,799
anything else you want

00:31:25,580 --> 00:31:33,650
I don't know HCP and streams that hasn't

00:31:27,799 --> 00:31:35,450
been talked about yet I don't have

00:31:33,650 --> 00:31:39,200
anything to add to that topic I did want

00:31:35,450 --> 00:31:41,390
to talk about some just stuff about

00:31:39,200 --> 00:31:46,910
contributing to note but I like Steven

00:31:41,390 --> 00:31:49,240
that's her first if he has any all right

00:31:46,910 --> 00:31:51,799
then you want to talk about communion

00:31:49,240 --> 00:31:59,390
yeah I was gonna I was gonna plug a note

00:31:51,799 --> 00:32:00,650
here so yeah I was I I wanted to I mean

00:31:59,390 --> 00:32:02,840
if you're interested a note if you're

00:32:00,650 --> 00:32:04,190
you're getting started if you can

00:32:02,840 --> 00:32:06,710
contribute if you've been working with

00:32:04,190 --> 00:32:11,059
note for a while if you're interested in

00:32:06,710 --> 00:32:14,690
streams or HTTP you know node.js has a

00:32:11,059 --> 00:32:18,679
very broad ecosystem in a very accepting

00:32:14,690 --> 00:32:20,870
community there's never enough

00:32:18,679 --> 00:32:24,200
contributors to to do all the work

00:32:20,870 --> 00:32:26,750
that's required there's a variety of

00:32:24,200 --> 00:32:29,150
tasks no matter what your experience

00:32:26,750 --> 00:32:32,990
level is with node or with programming

00:32:29,150 --> 00:32:36,440
or with anything else ranges anywhere

00:32:32,990 --> 00:32:41,510
from maintaining build infrastructure to

00:32:36,440 --> 00:32:45,500
writing documentation to fixing bugs and

00:32:41,510 --> 00:32:46,910
writing test cases through so you know

00:32:45,500 --> 00:32:50,000
there's a ton of different things that

00:32:46,910 --> 00:32:52,820
you can contributes you there's a good

00:32:50,000 --> 00:32:55,070
amount of mentorship available

00:32:52,820 --> 00:32:56,870
lots of people regularly involved who

00:32:55,070 --> 00:33:00,260
are available to assist and help out

00:32:56,870 --> 00:33:04,970
with with PRS and documentation updates

00:33:00,260 --> 00:33:08,030
and other things there's also good there

00:33:04,970 --> 00:33:09,680
are issues in the nodejs repo at our tag

00:33:08,030 --> 00:33:13,040
there's good first issues

00:33:09,680 --> 00:33:16,190
they can kind of you know start with if

00:33:13,040 --> 00:33:19,850
you're there first time there's also the

00:33:16,190 --> 00:33:20,810
issues that have the dock label if

00:33:19,850 --> 00:33:24,850
you're interested in writing some

00:33:20,810 --> 00:33:31,460
documentation or helping out in that way

00:33:24,850 --> 00:33:37,000
there's also so rich or as you might

00:33:31,460 --> 00:33:40,130
know him trot maintains a note to do org

00:33:37,000 --> 00:33:43,550
it's a great resource if you're trying

00:33:40,130 --> 00:33:45,620
to get started with node email rich and

00:33:43,550 --> 00:33:48,140
he sends you a task and walks you

00:33:45,620 --> 00:33:50,980
through thinking it an actual PR and

00:33:48,140 --> 00:33:50,980
getting it ready

00:33:51,790 --> 00:33:55,250
yeh that's awesome I didn't even know

00:33:54,500 --> 00:33:59,330
that existed

00:33:55,250 --> 00:34:03,170
yeah so that's really cool okay you

00:33:59,330 --> 00:34:06,200
didn't do anything dad nope okay then

00:34:03,170 --> 00:34:07,850
well thank you to in Italy and Steven

00:34:06,200 --> 00:34:09,890
for looking at the questions ahead of

00:34:07,850 --> 00:34:11,990
time and being able to answer them and

00:34:09,890 --> 00:34:14,380
for being here and chatting about them

00:34:11,990 --> 00:34:17,330
and thanks everybody who's on the call I

00:34:14,380 --> 00:34:19,970
hope this was useful and we'll see you

00:34:17,330 --> 00:34:23,710
next month for our next one thanks so

00:34:19,970 --> 00:34:23,710

YouTube URL: https://www.youtube.com/watch?v=wz5ndI-4aQ8


