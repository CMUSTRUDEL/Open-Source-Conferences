Title: OpenJS Foundation AMA: Node.js TSC
Publication date: 2020-08-27
Playlist: OpenJS AMAs
Description: 
	The OpenJS Foundation is a member-supported non-profit organization that provides a neutral home for some of the most important project in the JavaScript ecosystem.  
Learn more and join us at https://openjsf.org
Captions: 
	00:00:12,320 --> 00:00:18,630
okay it looks like we are live um thank

00:00:16,860 --> 00:00:21,450
you so much everybody for joining us

00:00:18,630 --> 00:00:25,230
today you are watching the open J's

00:00:21,450 --> 00:00:28,650
foundation ask me anything this month we

00:00:25,230 --> 00:00:32,879
are with the no js' technical steering

00:00:28,650 --> 00:00:34,290
committee and we will be joined by reps

00:00:32,879 --> 00:00:36,480
from the technical steering committee

00:00:34,290 --> 00:00:39,120
and Michael Dawson who will be

00:00:36,480 --> 00:00:42,450
moderating the panel so I am going to

00:00:39,120 --> 00:00:43,920
hand it over to Michael in just a second

00:00:42,450 --> 00:00:45,210
but before I do

00:00:43,920 --> 00:00:47,010
you're probably wondering how you might

00:00:45,210 --> 00:00:50,430
want to ask some questions so these fine

00:00:47,010 --> 00:00:56,010
folks and there's a few ways so either

00:00:50,430 --> 00:00:58,469
you can either tag us on Twitter or you

00:00:56,010 --> 00:01:00,000
can go to the YouTube channel and you

00:00:58,469 --> 00:01:02,790
can use the chat function there to ask

00:01:00,000 --> 00:01:05,009
some questions so I'm gonna hand it on

00:01:02,790 --> 00:01:08,399
over to Michael to get things started

00:01:05,009 --> 00:01:10,619
okay Thank You Rachel we're just gonna

00:01:08,399 --> 00:01:12,810
start from with a few introductions

00:01:10,619 --> 00:01:15,299
I'm Michael Dawson ibm's community lead

00:01:12,810 --> 00:01:17,010
for nodejs and that means I get to spend

00:01:15,299 --> 00:01:19,409
quite a bit of time working with all the

00:01:17,010 --> 00:01:21,150
great people in the community including

00:01:19,409 --> 00:01:24,299
the technical steering committee the

00:01:21,150 --> 00:01:26,549
community committee and a bunch of the

00:01:24,299 --> 00:01:28,350
working groups and so forth um and one

00:01:26,549 --> 00:01:31,939
of the things I do get to do as part of

00:01:28,350 --> 00:01:34,890
that as I'm currently the TAC chair and

00:01:31,939 --> 00:01:37,070
I think at this point Colin do you want

00:01:34,890 --> 00:01:40,439
to give yourself a quick introduction I

00:01:37,070 --> 00:01:44,869
want so my name's Colin yard I'm

00:01:40,439 --> 00:01:48,180
currently a engineering manager at giant

00:01:44,869 --> 00:01:51,930
building fund cloud services with

00:01:48,180 --> 00:02:00,360
Samsung I've been involved with the node

00:01:51,930 --> 00:02:05,369
project since I think this panel thanks

00:02:00,360 --> 00:02:08,610
Bethany next yeah hi I'm Beth I work at

00:02:05,369 --> 00:02:10,950
IBM in then node.js runtime team I've

00:02:08,610 --> 00:02:12,690
been there for about four years and I'm

00:02:10,950 --> 00:02:14,790
mainly active within the know just

00:02:12,690 --> 00:02:21,670
released working group in the node

00:02:14,790 --> 00:02:25,630
community Thank You Matteo everyone

00:02:21,670 --> 00:02:28,420
I'm at oculina member of the TSC for I

00:02:25,630 --> 00:02:33,490
don't know from 2017 or something like

00:02:28,420 --> 00:02:37,600
that and I mainly focus on I've been

00:02:33,490 --> 00:02:40,870
using node since no 0.2 something around

00:02:37,600 --> 00:02:44,440
those lines and I've been contributing

00:02:40,870 --> 00:02:49,989
to node scenes is the first node

00:02:44,440 --> 00:02:53,410
interactive some time ago Thanks yeah no

00:02:49,989 --> 00:02:59,560
that's it okay the way a word for Nia

00:02:53,410 --> 00:03:02,080
from I am work for Nia from Hey hi my

00:02:59,560 --> 00:03:05,530
name is Chris I work for IBM been

00:03:02,080 --> 00:03:08,320
involved with node.js since 2013 started

00:03:05,530 --> 00:03:12,220
by contributing to porting of node.js on

00:03:08,320 --> 00:03:14,019
the AIX platforms and part of the TSC

00:03:12,220 --> 00:03:18,910
for the last 1 and 1/2 years

00:03:14,019 --> 00:03:22,410
my main focus areas diagnostics and I'm

00:03:18,910 --> 00:03:24,480
also active in the node.js help repo

00:03:22,410 --> 00:03:28,720
thanks miles

00:03:24,480 --> 00:03:31,720
alright I'm miles been on the new TSC i

00:03:28,720 --> 00:03:34,390
guess about four years maybe i got

00:03:31,720 --> 00:03:36,700
active in the project just after the

00:03:34,390 --> 00:03:38,920
merger of i/o jeaious and nib jeaious i

00:03:36,700 --> 00:03:41,440
currently work for google in the open

00:03:38,920 --> 00:03:42,940
source programs office and i'm quite

00:03:41,440 --> 00:03:48,390
active in the node project as well as

00:03:42,940 --> 00:03:53,320
tc39 thanks Gabriel

00:03:48,390 --> 00:03:58,840
hey I'm Gabriel I work at Intel and I've

00:03:53,320 --> 00:04:03,400
been working with node oh boy 2015 ish

00:03:58,840 --> 00:04:06,730
or so 1415 I'm I mostly work on on

00:04:03,400 --> 00:04:08,739
native add-ons helped bring an API to

00:04:06,730 --> 00:04:11,320
light which I'm really happy to see is

00:04:08,739 --> 00:04:14,200
working really well and most recently

00:04:11,320 --> 00:04:15,299
I've also been working on optimization

00:04:14,200 --> 00:04:19,419
of nodejs

00:04:15,299 --> 00:04:21,910
with runtime large pages flag so people

00:04:19,419 --> 00:04:25,960
can just add a flag and hopefully their

00:04:21,910 --> 00:04:27,970
stuff will run faster okay thanks and

00:04:25,960 --> 00:04:29,890
just a reminder for the viewers if you

00:04:27,970 --> 00:04:32,349
have any questions you can tag us on

00:04:29,890 --> 00:04:35,560
Twitter through the open G is a token

00:04:32,349 --> 00:04:37,750
gsfs F handle or you can use

00:04:35,560 --> 00:04:39,730
the comment function on YouTube as well

00:04:37,750 --> 00:04:43,150
so we'll start out with a few questions

00:04:39,730 --> 00:04:45,250
that we we had in advance and the first

00:04:43,150 --> 00:04:47,530
one is that you know nodejs has been

00:04:45,250 --> 00:04:49,870
really proactive about adding new people

00:04:47,530 --> 00:04:52,090
to its ranks of maintainer x' toc

00:04:49,870 --> 00:04:54,100
members you know why do we think that's

00:04:52,090 --> 00:04:56,080
important and what advice do we have for

00:04:54,100 --> 00:04:57,730
you know either for projects who need to

00:04:56,080 --> 00:04:59,919
add maintainer x' or contributors who

00:04:57,730 --> 00:05:02,590
may may want to become a maintainer one

00:04:59,919 --> 00:05:07,120
day maybe Gabriel can you start us out

00:05:02,590 --> 00:05:10,960
on that one sure so what i've what i've

00:05:07,120 --> 00:05:14,200
noticed in in nodejs is is that you know

00:05:10,960 --> 00:05:16,870
as we add new folks and as we notice

00:05:14,200 --> 00:05:19,930
their contributions and offer them a

00:05:16,870 --> 00:05:22,330
collaborator ship they bring a board not

00:05:19,930 --> 00:05:25,690
just with the project as it is but they

00:05:22,330 --> 00:05:28,540
they bring a board new perspectives and

00:05:25,690 --> 00:05:31,320
and they inform us of the direction it

00:05:28,540 --> 00:05:35,050
should be going ultimately so first it

00:05:31,320 --> 00:05:38,020
starts out small and and and eventually

00:05:35,050 --> 00:05:40,120
people become more and more involved and

00:05:38,020 --> 00:05:42,370
and there's there's this immediate

00:05:40,120 --> 00:05:44,590
feedback that we get you know because we

00:05:42,370 --> 00:05:46,590
understand we begin to understand the

00:05:44,590 --> 00:05:51,220
direction in which they are going and

00:05:46,590 --> 00:05:53,020
that how that jives with with where

00:05:51,220 --> 00:05:56,680
nodejs is going and so we have an

00:05:53,020 --> 00:05:58,090
opportunity here to to not only benefit

00:05:56,680 --> 00:06:01,000
from their contributions but to also

00:05:58,090 --> 00:06:04,169
stay abreast of of where the community

00:06:01,000 --> 00:06:06,910
is going that's that's very important so

00:06:04,169 --> 00:06:11,830
and and in terms of in terms of advice

00:06:06,910 --> 00:06:14,289
for for potential collaborators just you

00:06:11,830 --> 00:06:16,510
know stick with it and and it's gonna

00:06:14,289 --> 00:06:20,410
happen you know I mean obviously we're

00:06:16,510 --> 00:06:24,789
not perfect and and you know you know we

00:06:20,410 --> 00:06:29,080
cannot you know it's not gonna happen in

00:06:24,789 --> 00:06:31,180
a given timeframe but but that's that's

00:06:29,080 --> 00:06:33,130
been my experience sort of coming aboard

00:06:31,180 --> 00:06:34,900
no js' as well is that sooner or later

00:06:33,130 --> 00:06:36,990
people will notice your contributions

00:06:34,900 --> 00:06:41,260
and you'll become part of the community

00:06:36,990 --> 00:06:43,740
so that's that's as far as I can tell

00:06:41,260 --> 00:06:43,740
them my advice

00:06:45,760 --> 00:06:51,260
so I know Beth I think you've done some

00:06:48,560 --> 00:06:54,260
some specific mentoring and so forth on

00:06:51,260 --> 00:06:56,720
the release side you have any comments

00:06:54,260 --> 00:06:59,240
on that yeah it was something we started

00:06:56,720 --> 00:07:01,670
trolling out at the start of the year

00:06:59,240 --> 00:07:05,270
after the last collaborate summit in

00:07:01,670 --> 00:07:06,920
December and because the building of a

00:07:05,270 --> 00:07:10,370
release and auditing the commits it's

00:07:06,920 --> 00:07:12,530
kind of an art that you need to learn by

00:07:10,370 --> 00:07:15,680
kind of shadowing and mentoring what we

00:07:12,530 --> 00:07:18,380
we've done is we've set up a hour-long

00:07:15,680 --> 00:07:20,660
session every two weeks where anyone

00:07:18,380 --> 00:07:23,600
who's interested in getting involved in

00:07:20,660 --> 00:07:25,430
the release working group can join in

00:07:23,600 --> 00:07:28,010
and kind of just watch us go for it a

00:07:25,430 --> 00:07:29,870
process of preparing a release and also

00:07:28,010 --> 00:07:32,000
look at us follow us along auditing all

00:07:29,870 --> 00:07:33,560
of the commits ready for the release and

00:07:32,000 --> 00:07:35,990
we found quite a few participants and

00:07:33,560 --> 00:07:37,910
regularly attending that one and and

00:07:35,990 --> 00:07:39,830
that's in addition to the release

00:07:37,910 --> 00:07:41,720
working very cool so to release working

00:07:39,830 --> 00:07:43,370
group calls were open for everyone so

00:07:41,720 --> 00:07:45,620
it's kind of the approach we're kind of

00:07:43,370 --> 00:07:48,610
trying out and release and really see

00:07:45,620 --> 00:07:51,920
how it goes keep it going

00:07:48,610 --> 00:07:54,380
Thanks yes my thoughts on you know some

00:07:51,920 --> 00:07:57,140
advice to you know other maintainer ziz

00:07:54,380 --> 00:08:01,280
I think you know the node project is

00:07:57,140 --> 00:08:03,830
very much optimized for what I might

00:08:01,280 --> 00:08:05,720
call the big game is you know we expect

00:08:03,830 --> 00:08:08,210
people to act in a responsible manner

00:08:05,720 --> 00:08:11,030
and you know sort of given that trust

00:08:08,210 --> 00:08:12,890
they do so as opposed to optimizing to

00:08:11,030 --> 00:08:16,010
sort of protect for the absolute worst

00:08:12,890 --> 00:08:17,210
case we've sets them we set some set up

00:08:16,010 --> 00:08:20,330
things so that we try to be very

00:08:17,210 --> 00:08:21,920
receptive we try and you know give

00:08:20,330 --> 00:08:24,770
people access and make them

00:08:21,920 --> 00:08:27,230
collaborators you know earlier rather

00:08:24,770 --> 00:08:29,000
than later and you know I think we found

00:08:27,230 --> 00:08:31,520
that that that actually has worked

00:08:29,000 --> 00:08:33,890
pretty well in terms of things and it's

00:08:31,520 --> 00:08:36,440
a it's sort of a good approach versus

00:08:33,890 --> 00:08:38,270
you know being in a defensive mode or

00:08:36,440 --> 00:08:39,650
being in the haeth you know we think

00:08:38,270 --> 00:08:41,780
these new people are going to generally

00:08:39,650 --> 00:08:43,850
want to help and by doing that it gives

00:08:41,780 --> 00:08:48,920
them a you know a better opportunity to

00:08:43,850 --> 00:08:51,110
do that has anybody anybody else have

00:08:48,920 --> 00:08:53,160
any thoughts things they want to add on

00:08:51,110 --> 00:08:57,230
this this way

00:08:53,160 --> 00:08:59,940
a couple of messages for the potential

00:08:57,230 --> 00:09:02,070
collaborators or new contributors who

00:08:59,940 --> 00:09:06,900
want to become maintenance of the

00:09:02,070 --> 00:09:10,140
project probably look around for wider

00:09:06,900 --> 00:09:13,320
problems look around for some patterns

00:09:10,140 --> 00:09:16,710
of issues look at the backlog we always

00:09:13,320 --> 00:09:19,440
have a good amount of issues sitting in

00:09:16,710 --> 00:09:23,340
the backlog waiting for people to come

00:09:19,440 --> 00:09:27,660
in and you know fix or put their hands

00:09:23,340 --> 00:09:30,000
on then over the time you can actually

00:09:27,660 --> 00:09:33,150
find some sweet spot which is a

00:09:30,000 --> 00:09:37,460
combination of the requirement of the

00:09:33,150 --> 00:09:40,100
project plus your skills and interest

00:09:37,460 --> 00:09:42,570
because it's a project which has

00:09:40,100 --> 00:09:46,080
spanning in multiple languages and

00:09:42,570 --> 00:09:48,950
technologies like C C++ JavaScript and

00:09:46,080 --> 00:09:51,990
Python and things like that it's always

00:09:48,950 --> 00:09:55,350
you know good to find a sweet spot where

00:09:51,990 --> 00:09:57,470
you are productive and it matches the

00:09:55,350 --> 00:10:01,680
requirement of the project as well and

00:09:57,470 --> 00:10:04,560
then try to engage in a consistent as

00:10:01,680 --> 00:10:07,260
well as visible manner basically with

00:10:04,560 --> 00:10:10,560
the other collaborators and contributors

00:10:07,260 --> 00:10:12,900
to improve the overall efficiency and

00:10:10,560 --> 00:10:17,130
now you know meeting the need of the

00:10:12,900 --> 00:10:21,090
project so that's a proven path towards

00:10:17,130 --> 00:10:24,200
becoming collaborators and eventually

00:10:21,090 --> 00:10:24,200
TAC members

00:10:27,420 --> 00:10:34,290
miles I think you had something tad yeah

00:10:31,110 --> 00:10:36,720
just just a small thing getting involved

00:10:34,290 --> 00:10:38,700
in node is not always just getting

00:10:36,720 --> 00:10:41,430
involved in node core which is what we

00:10:38,700 --> 00:10:43,290
call the no js' slash net repo there's a

00:10:41,430 --> 00:10:45,269
lot of different places where people can

00:10:43,290 --> 00:10:48,540
get involved in things in which they can

00:10:45,269 --> 00:10:53,370
help out with so a really great place to

00:10:48,540 --> 00:10:57,329
get started is often the node.js or

00:10:53,370 --> 00:10:59,040
nodejs dev web sites which have you know

00:10:57,329 --> 00:11:00,779
a lot of places where people can jump in

00:10:59,040 --> 00:11:02,970
and help people who jumped in with

00:11:00,779 --> 00:11:05,640
internationalization as Guru said the

00:11:02,970 --> 00:11:07,290
help repo there's a number of different

00:11:05,640 --> 00:11:08,820
places where people can get involved in

00:11:07,290 --> 00:11:11,390
helpful projects so just wanted to

00:11:08,820 --> 00:11:14,880
encourage folks to kind of think broadly

00:11:11,390 --> 00:11:16,560
in general you know the best way to get

00:11:14,880 --> 00:11:19,250
involved is to fix things that are

00:11:16,560 --> 00:11:21,690
broken that you're aware of broken and

00:11:19,250 --> 00:11:24,209
and usually kind of getting started with

00:11:21,690 --> 00:11:26,070
like hey this is spelled wrong on the

00:11:24,209 --> 00:11:28,230
website is even like a really great

00:11:26,070 --> 00:11:30,980
place to to get involved and help out

00:11:28,230 --> 00:11:30,980
every little bit helps

00:11:32,370 --> 00:11:43,899
I'm a tail so yeah I would just want to

00:11:38,350 --> 00:11:47,889
add that it joining some of the more the

00:11:43,899 --> 00:11:51,639
harder some of joining note core can be

00:11:47,889 --> 00:11:53,649
daunting on certain subsystems and there

00:11:51,639 --> 00:11:56,860
are especially some system that requires

00:11:53,649 --> 00:11:58,510
a lot of knowledge and background a

00:11:56,860 --> 00:12:01,149
background knowledge a lot of

00:11:58,510 --> 00:12:03,790
understanding out that intro network to

00:12:01,149 --> 00:12:10,300
be able to be productive contributors

00:12:03,790 --> 00:12:14,560
and the only suggestion is to keep being

00:12:10,300 --> 00:12:18,579
consistent and you know make ask

00:12:14,560 --> 00:12:20,680
questions go improve the docs or just

00:12:18,579 --> 00:12:22,690
even you know fix a small bugs and try

00:12:20,680 --> 00:12:26,110
to fix those small bugs and it might

00:12:22,690 --> 00:12:28,600
take a month to land a change it might

00:12:26,110 --> 00:12:30,459
sound tiny but in fact this way harder I

00:12:28,600 --> 00:12:33,550
would note that there is several areas

00:12:30,459 --> 00:12:36,940
that are that needs a little bit more

00:12:33,550 --> 00:12:42,820
help some of which are the HTTP team

00:12:36,940 --> 00:12:45,459
HTTP to team streams are a critical part

00:12:42,820 --> 00:12:48,310
of the node.js of nodejs

00:12:45,459 --> 00:12:51,040
that are not that I have some maintainer

00:12:48,310 --> 00:12:53,470
but you know they always require new

00:12:51,040 --> 00:12:55,720
people to help and because also some of

00:12:53,470 --> 00:12:57,579
the issues are actually hard like is

00:12:55,720 --> 00:13:00,820
there's no good

00:12:57,579 --> 00:13:03,490
there's no good fix to some of them like

00:13:00,820 --> 00:13:05,410
you need to drill into to cast a

00:13:03,490 --> 00:13:09,850
trade-off between a lot of various

00:13:05,410 --> 00:13:11,680
opportunities so that's if you know I'll

00:13:09,850 --> 00:13:14,230
just close that with you know I think

00:13:11,680 --> 00:13:17,920
picking picking in areas is a really

00:13:14,230 --> 00:13:19,600
good suggestion from Therese and call it

00:13:17,920 --> 00:13:21,310
a few others is like you know there's

00:13:19,600 --> 00:13:24,850
there's the package maintenance team

00:13:21,310 --> 00:13:26,170
there's the napi team the modules team

00:13:24,850 --> 00:13:28,029
there's some you know so there's some

00:13:26,170 --> 00:13:29,829
good areas there's a list of strategic

00:13:28,029 --> 00:13:34,589
initiatives that are also good

00:13:29,829 --> 00:13:39,370
candidates on the off the TSC readme and

00:13:34,589 --> 00:13:42,620
I guess yeah that's just the last thing

00:13:39,370 --> 00:13:44,570
I want that so let's move on to that

00:13:42,620 --> 00:13:46,730
question so the the next question we

00:13:44,570 --> 00:13:48,410
have here is you know what's the no

00:13:46,730 --> 00:13:51,110
jeaious version that I should use and

00:13:48,410 --> 00:13:53,350
when should I update from what LTS to

00:13:51,110 --> 00:13:53,350
another

00:13:54,520 --> 00:14:05,530
I think Colin good some thoughts on that

00:13:59,970 --> 00:14:07,000
yeah so I think the short answer is if

00:14:05,530 --> 00:14:12,460
you're a company you should always be

00:14:07,000 --> 00:14:15,070
running the latest LCS version and you

00:14:12,460 --> 00:14:16,870
know usually the best time to upgrade is

00:14:15,070 --> 00:14:19,720
before whatever version you're on this

00:14:16,870 --> 00:14:20,620
and the place and then different

00:14:19,720 --> 00:14:23,320
companies will have different

00:14:20,620 --> 00:14:26,050
constraints on how they can do that but

00:14:23,320 --> 00:14:29,710
generally run be running a long-term

00:14:26,050 --> 00:14:31,540
support branch release and you want to

00:14:29,710 --> 00:14:33,850
upgrade to the latest cuz there's

00:14:31,540 --> 00:14:37,710
there's often an overlap but there will

00:14:33,850 --> 00:14:41,140
be two LTS releases at the same time

00:14:37,710 --> 00:14:44,560
that was my short answer the the longer

00:14:41,140 --> 00:14:49,290
answer is it kind of depends on how much

00:14:44,560 --> 00:14:51,880
risk you're going to tolerate and bugs

00:14:49,290 --> 00:14:54,310
so if it's very important to you that

00:14:51,880 --> 00:14:57,400
you have the latest and greatest

00:14:54,310 --> 00:14:58,900
features and it's okay if you encounter

00:14:57,400 --> 00:15:00,790
the occasional regression from time to

00:14:58,900 --> 00:15:04,090
time then you can run the current

00:15:00,790 --> 00:15:06,850
release branch but just be one that

00:15:04,090 --> 00:15:08,680
things do break there others if you just

00:15:06,850 --> 00:15:11,200
look back through all the release blog

00:15:08,680 --> 00:15:13,180
posts you'll see this a release and that

00:15:11,200 --> 00:15:16,150
a quick follow-up release and another

00:15:13,180 --> 00:15:17,440
day or two to fix the regression so

00:15:16,150 --> 00:15:19,030
that's something you have to kind of

00:15:17,440 --> 00:15:20,950
weigh the trade-offs with but if you're

00:15:19,030 --> 00:15:22,960
a company making money off of node I

00:15:20,950 --> 00:15:28,980
would definitely recommend sticking to

00:15:22,960 --> 00:15:28,980
us I'm a tail

00:15:30,160 --> 00:15:38,589
and so I from my point of view it's one

00:15:35,889 --> 00:15:42,100
of the things that's very it's very

00:15:38,589 --> 00:15:46,810
important it's if you are altering a

00:15:42,100 --> 00:15:49,389
module on and publish it on NPM I would

00:15:46,810 --> 00:15:54,459
highly recommend that you trade dropping

00:15:49,389 --> 00:15:58,870
support of uh no js' release line as a

00:15:54,459 --> 00:16:00,730
semi major change we do so energy as for

00:15:58,870 --> 00:16:04,209
our dependencies so if there is a

00:16:00,730 --> 00:16:06,579
breaking change we do we're in one of

00:16:04,209 --> 00:16:09,370
our libraries for example for an ABI

00:16:06,579 --> 00:16:13,800
change or something like that we do not

00:16:09,370 --> 00:16:15,880
break you so it will be a nice and

00:16:13,800 --> 00:16:21,130
conveyor that you can do to your own

00:16:15,880 --> 00:16:26,160
users to not break them in in a minor

00:16:21,130 --> 00:16:26,160
release if they are depending on an old

00:16:26,639 --> 00:16:30,240
Althea's line

00:16:36,280 --> 00:16:42,450
any other thoughts comments on that

00:16:39,160 --> 00:16:44,700
question from anybody else on the panel

00:16:42,450 --> 00:16:47,460
yeah just completely agree with module

00:16:44,700 --> 00:16:50,220
I've been working with lot of customers

00:16:47,460 --> 00:16:52,080
on production issues so I really know

00:16:50,220 --> 00:16:55,740
the pattern of the customers mindset

00:16:52,080 --> 00:16:58,410
about don't migrate as long as you don't

00:16:55,740 --> 00:17:01,830
have any issue probably that's not a

00:16:58,410 --> 00:17:04,560
good idea because if you don't migrate

00:17:01,830 --> 00:17:07,110
between LDS versions one of the

00:17:04,560 --> 00:17:10,079
challenge when it comes to you actually

00:17:07,110 --> 00:17:13,890
come for migration is a huge gap in

00:17:10,079 --> 00:17:17,490
terms of your code base and the current

00:17:13,890 --> 00:17:20,670
features that in the target so it's

00:17:17,490 --> 00:17:24,079
always recommended to reevaluate for the

00:17:20,670 --> 00:17:27,959
current LDS version and look at your

00:17:24,079 --> 00:17:30,300
products life cycle roadmap with respect

00:17:27,959 --> 00:17:35,120
to the feature implementation and find a

00:17:30,300 --> 00:17:37,440
suitable time to migrate from LDS to LDS

00:17:35,120 --> 00:17:39,690
yeah I think it's it's we definitely

00:17:37,440 --> 00:17:42,480
want people to try out the current and

00:17:39,690 --> 00:17:45,360
give us feedback so that when it does

00:17:42,480 --> 00:17:48,120
you know for example when the the the

00:17:45,360 --> 00:17:51,210
even currents become LTS we've already

00:17:48,120 --> 00:17:53,340
got some testing but you know running on

00:17:51,210 --> 00:17:55,140
the LTSs is what makes sense I guess the

00:17:53,340 --> 00:17:57,810
other thing to to Colin's point about if

00:17:55,140 --> 00:17:59,580
you if you can if you want to test the

00:17:57,810 --> 00:18:01,770
latest you could could use the current

00:17:59,580 --> 00:18:04,140
just be aware that you know those only

00:18:01,770 --> 00:18:05,970
have a six month lifecycle so if you do

00:18:04,140 --> 00:18:07,650
that you're gonna have to sign up top

00:18:05,970 --> 00:18:10,200
dating more often as well than you will

00:18:07,650 --> 00:18:13,140
with the LTS is that I get the 30 months

00:18:10,200 --> 00:18:16,530
I think I think one thing that I would

00:18:13,140 --> 00:18:19,770
add there as well is a pattern that I

00:18:16,530 --> 00:18:23,340
have seen people do that you know is not

00:18:19,770 --> 00:18:24,990
great is launching a product on our LTS

00:18:23,340 --> 00:18:27,960
release and then never even updating

00:18:24,990 --> 00:18:29,730
that LTS release so even within like the

00:18:27,960 --> 00:18:33,870
same release line if you're on v10 or

00:18:29,730 --> 00:18:36,060
v12 I think it's really important to be

00:18:33,870 --> 00:18:39,060
kind of you know monitoring the releases

00:18:36,060 --> 00:18:42,180
of node and you know following that and

00:18:39,060 --> 00:18:44,040
making sure that you are rolling out new

00:18:42,180 --> 00:18:46,860
updates to your services as we roll out

00:18:44,040 --> 00:18:48,930
releases for LTS we have about a monthly

00:18:46,860 --> 00:18:50,850
cadence so that like you could prepare

00:18:48,930 --> 00:18:53,670
for about like a release about once a

00:18:50,850 --> 00:18:55,620
month and updating your stack in general

00:18:53,670 --> 00:18:58,110
you know we try to

00:18:55,620 --> 00:19:00,720
make sure that what we land is stable if

00:18:58,110 --> 00:19:02,370
you wanted to play extra safe you could

00:19:00,720 --> 00:19:04,640
always delay by one release that's how I

00:19:02,370 --> 00:19:06,540
update my Mac OS operating system

00:19:04,640 --> 00:19:07,980
personally so I

00:19:06,540 --> 00:19:10,080
no hard feelings if you want to be off

00:19:07,980 --> 00:19:11,790
by one that's a great way to make sure

00:19:10,080 --> 00:19:13,800
that like if there are any regressions

00:19:11,790 --> 00:19:16,590
that are found you're not going to be

00:19:13,800 --> 00:19:19,200
hit by them generally if there are bugs

00:19:16,590 --> 00:19:21,540
that are found in LTS we tend to if they

00:19:19,200 --> 00:19:23,400
are like experienced breaking bugs get

00:19:21,540 --> 00:19:24,860
those fixed within a day or two we're

00:19:23,400 --> 00:19:27,690
really really quick about getting a

00:19:24,860 --> 00:19:29,160
patch release out when we break things

00:19:27,690 --> 00:19:31,559
on release lines so even if you just

00:19:29,160 --> 00:19:33,570
delayed by the two weeks you have a

00:19:31,559 --> 00:19:34,830
pretty high probability of making sure

00:19:33,570 --> 00:19:37,110
that you're not going to introduce new

00:19:34,830 --> 00:19:38,730
regressions I'm keeping up to date with

00:19:37,110 --> 00:19:40,410
kind of the tip the latest release on

00:19:38,730 --> 00:19:42,660
whatever release line that you're using

00:19:40,410 --> 00:19:46,170
is going to ensure that you're not going

00:19:42,660 --> 00:19:48,420
to have larger jumps to do especially if

00:19:46,170 --> 00:19:50,130
the security release comes out keeping

00:19:48,420 --> 00:19:52,470
up to date will kind of ensure that you

00:19:50,130 --> 00:19:54,090
you're slowly migrating so that if we

00:19:52,470 --> 00:19:56,340
ever do have to do a larger security

00:19:54,090 --> 00:19:58,260
release which could end up introducing

00:19:56,340 --> 00:20:00,720
several major changes in December minor

00:19:58,260 --> 00:20:02,190
release if we have to break kpi's in

00:20:00,720 --> 00:20:05,130
order to make them more secure which we

00:20:02,190 --> 00:20:06,840
have done before it would be the least

00:20:05,130 --> 00:20:09,240
amount of work for your team to have to

00:20:06,840 --> 00:20:11,670
be to be able to focus solely on that

00:20:09,240 --> 00:20:14,340
and be able to kind of slowly integrate

00:20:11,670 --> 00:20:16,020
things I won't get too much into like

00:20:14,340 --> 00:20:17,550
testing and deploy infrastructure but

00:20:16,020 --> 00:20:20,100
there's really great patterns you can

00:20:17,550 --> 00:20:22,679
use like blue green deploy you can do

00:20:20,100 --> 00:20:24,780
all sorts of staged rollouts tools like

00:20:22,679 --> 00:20:26,460
kubernetes or different clouds have all

00:20:24,780 --> 00:20:28,140
sorts of awesome tools so that you can

00:20:26,460 --> 00:20:30,510
kind of slowly roll things out and test

00:20:28,140 --> 00:20:31,950
them the way that we find bugs is by

00:20:30,510 --> 00:20:34,110
people rolling things out in production

00:20:31,950 --> 00:20:37,860
so you also don't need to roll this out

00:20:34,110 --> 00:20:40,110
all at once but I really do advise folks

00:20:37,860 --> 00:20:42,000
to try to stay up to date on the release

00:20:40,110 --> 00:20:44,940
lines that they are it will make such a

00:20:42,000 --> 00:20:47,640
huge difference and just kind of like

00:20:44,940 --> 00:20:48,929
feeling pain when eventually something

00:20:47,640 --> 00:20:51,929
there's an update that you absolutely

00:20:48,929 --> 00:20:53,670
need need yeah it's it's a good point

00:20:51,929 --> 00:20:56,370
because like in our security releases we

00:20:53,670 --> 00:20:58,230
work to making it such that the security

00:20:56,370 --> 00:21:00,510
release only includes the security fixes

00:20:58,230 --> 00:21:03,090
so that if you're at the latest point

00:21:00,510 --> 00:21:04,679
version before that you you know the

00:21:03,090 --> 00:21:07,650
only thing you're getting is the

00:21:04,679 --> 00:21:08,519
security fixes and to minimize your

00:21:07,650 --> 00:21:10,769
overall risk of

00:21:08,519 --> 00:21:12,389
quickly moving to that but that doesn't

00:21:10,769 --> 00:21:15,239
really help if you're like you know a

00:21:12,389 --> 00:21:16,529
couple of cember minor or patch releases

00:21:15,239 --> 00:21:18,690
behind because you're gonna have to move

00:21:16,529 --> 00:21:19,649
up across all of those so that's it's a

00:21:18,690 --> 00:21:21,690
very good point there

00:21:19,649 --> 00:21:24,179
yeah and I'll add to that we don't patch

00:21:21,690 --> 00:21:26,129
all the previous ember miners our LTS

00:21:24,179 --> 00:21:27,989
releases move forward we don't maintain

00:21:26,129 --> 00:21:29,669
multiple miners so if there is a

00:21:27,989 --> 00:21:31,169
security release and you're not kind of

00:21:29,669 --> 00:21:34,379
sitting at the tip of that of that

00:21:31,169 --> 00:21:35,669
release tree you're going to be forced

00:21:34,379 --> 00:21:38,099
to update for lack of a better way to

00:21:35,669 --> 00:21:42,359
put it one small thing that I will add

00:21:38,099 --> 00:21:44,639
is in general our semper patches tend to

00:21:42,359 --> 00:21:46,769
be much more kind of like stable and

00:21:44,639 --> 00:21:49,799
reliable in the sense that like the

00:21:46,769 --> 00:21:52,589
things that are landing are usually like

00:21:49,799 --> 00:21:54,029
fixes but you know when you're kind of

00:21:52,589 --> 00:21:55,799
thinking about the cadence and rolling

00:21:54,029 --> 00:21:57,659
things out maybe adding a little bit of

00:21:55,799 --> 00:22:00,479
extra time for testing and rolling out

00:21:57,659 --> 00:22:03,440
semver minor releases even on OTS is

00:22:00,479 --> 00:22:03,440
probably prudent

00:22:05,870 --> 00:22:13,760
I think Colin you had something you want

00:22:08,810 --> 00:22:16,880
to add um so it's more of a question to

00:22:13,760 --> 00:22:19,250
everyone else on the panel does does

00:22:16,880 --> 00:22:22,300
anyone have a take on tips and how

00:22:19,250 --> 00:22:24,890
that's impacting users I know I've seen

00:22:22,300 --> 00:22:26,720
customers who have been stuck on their

00:22:24,890 --> 00:22:27,710
date it's just an end of life sir for

00:22:26,720 --> 00:22:29,390
months now

00:22:27,710 --> 00:22:30,980
but they can't upgrade because they're

00:22:29,390 --> 00:22:34,550
required to support Phipps and there's

00:22:30,980 --> 00:22:38,300
no dip story and firmly supportive of

00:22:34,550 --> 00:22:41,150
these lines so one one approach I've

00:22:38,300 --> 00:22:43,520
seen customers take is the setup support

00:22:41,150 --> 00:22:45,410
contracts with the OpenSSL project I'm

00:22:43,520 --> 00:22:51,020
learning that I was just curious for

00:22:45,410 --> 00:22:53,150
anyone else so I'll you know I can

00:22:51,020 --> 00:22:56,090
answer on we're certainly watching that

00:22:53,150 --> 00:22:57,920
as a project Sam Roberts who works works

00:22:56,090 --> 00:23:00,890
with us you know what we're tracking

00:22:57,920 --> 00:23:03,050
what's going on with open SSL 3 I think

00:23:00,890 --> 00:23:06,320
is as you you know as you probably know

00:23:03,050 --> 00:23:08,630
it's end of this year is kind of like an

00:23:06,320 --> 00:23:11,840
optimistic best case of when something

00:23:08,630 --> 00:23:15,350
might come from the open SSL project so

00:23:11,840 --> 00:23:17,450
it's it's not a place we'd want to be in

00:23:15,350 --> 00:23:19,190
terms of the community release once we

00:23:17,450 --> 00:23:23,420
can move up to open SSL 3 will be

00:23:19,190 --> 00:23:25,480
looking to pull that in there are only a

00:23:23,420 --> 00:23:28,460
few alternatives I think some of the

00:23:25,480 --> 00:23:29,360
distributions offer their own Phipps

00:23:28,460 --> 00:23:32,240
certified version

00:23:29,360 --> 00:23:35,180
I know Red Hat one of our associated

00:23:32,240 --> 00:23:37,400
companies you know ships their own

00:23:35,180 --> 00:23:40,520
crypto module which they know that chips

00:23:37,400 --> 00:23:43,070
on Red Hat gives you fit so there's

00:23:40,520 --> 00:23:44,450
there's a way to get it but you're gonna

00:23:43,070 --> 00:23:46,580
have to be looking at the particular

00:23:44,450 --> 00:23:49,090
distros in some cases to be able to do

00:23:46,580 --> 00:23:49,090
that today

00:23:55,120 --> 00:23:59,140
I think if unless anybody has something

00:23:57,730 --> 00:24:01,320
to add on that we'll move on to the next

00:23:59,140 --> 00:24:01,320
question

00:24:02,010 --> 00:24:06,690
now okay so the next question that we

00:24:04,710 --> 00:24:09,059
had was you know what's being done to

00:24:06,690 --> 00:24:10,890
improve the use of CPU cores do you ever

00:24:09,059 --> 00:24:13,790
foresee golang like channels or go

00:24:10,890 --> 00:24:13,790
routines being used

00:24:17,559 --> 00:24:26,740
like Trish you had some thoughts on that

00:24:20,289 --> 00:24:26,740
yeah so it's an interesting topic Oh

00:24:26,830 --> 00:24:34,610
basically when you look at the CPU cores

00:24:31,429 --> 00:24:38,000
the basic premise of throughput and

00:24:34,610 --> 00:24:40,640
performance being a function of CPU core

00:24:38,000 --> 00:24:44,149
is the basic premise in most of the

00:24:40,640 --> 00:24:47,779
programming languages but when it comes

00:24:44,149 --> 00:24:50,059
to node.js being in JavaScript which

00:24:47,779 --> 00:24:53,120
follows in a synchronous and even driven

00:24:50,059 --> 00:24:56,360
architecture do not necessarily align

00:24:53,120 --> 00:24:58,970
with that chemische and instead it

00:24:56,360 --> 00:25:01,820
actually leverages the high level of

00:24:58,970 --> 00:25:05,299
concurrency inherent in the language and

00:25:01,820 --> 00:25:07,880
the platform to influence the throughput

00:25:05,299 --> 00:25:12,980
or the performance characteristics so

00:25:07,880 --> 00:25:15,380
the single answer is in most of the

00:25:12,980 --> 00:25:19,190
workloads and production systems which I

00:25:15,380 --> 00:25:23,450
looked at if you see around 100 percent

00:25:19,190 --> 00:25:27,409
of the CPU consumption from any other

00:25:23,450 --> 00:25:29,720
language it might be scary whereas if it

00:25:27,409 --> 00:25:33,409
is a node.js deployment it may be

00:25:29,720 --> 00:25:37,309
business as usual it would be as simple

00:25:33,409 --> 00:25:40,190
as the entire CPU load allotted to the

00:25:37,309 --> 00:25:42,559
process is being exploited because of

00:25:40,190 --> 00:25:46,399
the way the synchronous human-driven

00:25:42,559 --> 00:25:49,789
architecture is leveraged by the program

00:25:46,399 --> 00:25:52,220
however when the workload increases

00:25:49,789 --> 00:25:56,080
beyond proportions it's so possible that

00:25:52,220 --> 00:25:59,980
the single CPU overconsumption or

00:25:56,080 --> 00:26:03,380
utilization model is still not enough

00:25:59,980 --> 00:26:06,220
and you would look at a scalability

00:26:03,380 --> 00:26:10,909
aspect in both vertical and horizontal

00:26:06,220 --> 00:26:14,539
dimension so few options which are

00:26:10,909 --> 00:26:17,710
inbuilt in the core are one is child

00:26:14,539 --> 00:26:20,690
process which is a raw implementation of

00:26:17,710 --> 00:26:23,860
replicating your code into different

00:26:20,690 --> 00:26:26,630
child process and dealing with the

00:26:23,860 --> 00:26:30,990
communication synchronization and data

00:26:26,630 --> 00:26:33,690
sharing between sibling processes or

00:26:30,990 --> 00:26:36,800
and child processors by yourself so I

00:26:33,690 --> 00:26:39,690
would say child process is the primitive

00:26:36,800 --> 00:26:42,750
mechanism for exploitation of multi-core

00:26:39,690 --> 00:26:45,660
and then comes the clusters which is a

00:26:42,750 --> 00:26:50,090
sophisticated abstraction on top of the

00:26:45,660 --> 00:26:52,080
child process whereas the communication

00:26:50,090 --> 00:26:55,740
synchronization and load balancing

00:26:52,080 --> 00:27:00,780
between the cluster members are taken

00:26:55,740 --> 00:27:04,559
care by the API itself but then how the

00:27:00,780 --> 00:27:07,590
transaction has to be laid out in terms

00:27:04,559 --> 00:27:09,660
of the workflow Italy at the hand of the

00:27:07,590 --> 00:27:14,370
application for example how do you

00:27:09,660 --> 00:27:17,370
manage the session is not in the purview

00:27:14,370 --> 00:27:19,200
of the cluster and then you have the

00:27:17,370 --> 00:27:23,370
worker threads which is a new addition

00:27:19,200 --> 00:27:26,400
to this family which looks at running

00:27:23,370 --> 00:27:29,160
JavaScript workload in the same process

00:27:26,400 --> 00:27:31,880
but in a different thread by sharing the

00:27:29,160 --> 00:27:36,240
process order space but not sharing the

00:27:31,880 --> 00:27:39,900
isolate the unit of execution in the

00:27:36,240 --> 00:27:42,450
JavaScript core next none of these

00:27:39,900 --> 00:27:46,590
things are probably competitors to each

00:27:42,450 --> 00:27:49,020
other but basically look at different

00:27:46,590 --> 00:27:51,690
use cases and both load scenarios to see

00:27:49,020 --> 00:27:55,860
which one suits the perfect combinations

00:27:51,690 --> 00:28:00,210
so from that perspective co-routines

00:27:55,860 --> 00:28:02,790
and the other semantics of the golang

00:28:00,210 --> 00:28:04,830
which is channels I would say is another

00:28:02,790 --> 00:28:08,520
abstraction on top of the basic

00:28:04,830 --> 00:28:10,200
threading models so it's possible that

00:28:08,520 --> 00:28:14,030
may implement that as well but

00:28:10,200 --> 00:28:17,130
eventually the question is how that

00:28:14,030 --> 00:28:19,290
synchronization the sharing of the data

00:28:17,130 --> 00:28:21,420
and the communication between different

00:28:19,290 --> 00:28:23,670
threads how are you able to deal with

00:28:21,420 --> 00:28:25,830
that what is the sophistication you are

00:28:23,670 --> 00:28:29,100
able to bring to the table and how the

00:28:25,830 --> 00:28:32,150
users are able to cope with that so the

00:28:29,100 --> 00:28:32,150
answer lies in that

00:28:36,690 --> 00:28:41,950
matéo

00:28:38,940 --> 00:28:45,550
thank you Michael

00:28:41,950 --> 00:28:49,390
so from there is a couple of things to

00:28:45,550 --> 00:28:53,950
be to be said that I want to add one of

00:28:49,390 --> 00:28:57,820
the things that not Jes shines on is at

00:28:53,950 --> 00:29:00,640
building small small to some extent

00:28:57,820 --> 00:29:04,510
servers and scale them all is the on

00:29:00,640 --> 00:29:08,260
Terry so I would say that that should

00:29:04,510 --> 00:29:11,260
definitely be their normal the best way

00:29:08,260 --> 00:29:13,630
to scale a node.js process and versus

00:29:11,260 --> 00:29:18,310
using child processing or about other

00:29:13,630 --> 00:29:20,800
things and I'm recommending this because

00:29:18,310 --> 00:29:25,630
it's this has been proven to work for

00:29:20,800 --> 00:29:28,090
four years so I would I don't think why

00:29:25,630 --> 00:29:30,640
that that would any new API that will

00:29:28,090 --> 00:29:34,990
add will change in fact it creates a

00:29:30,640 --> 00:29:37,030
better it reduced cost and footprint on

00:29:34,990 --> 00:29:39,790
the cloud to have more multiple small

00:29:37,030 --> 00:29:44,140
servers versus massive servers with 32

00:29:39,790 --> 00:29:45,940
cores or something so from usability

00:29:44,140 --> 00:29:49,950
from a scalability perspective I think

00:29:45,940 --> 00:29:54,010
it's it's way better anyway related to

00:29:49,950 --> 00:29:55,780
what delicious add there is you can use

00:29:54,010 --> 00:29:58,870
right now there is a few modules to use

00:29:55,780 --> 00:30:01,630
worker threads as cue system so if you

00:29:58,870 --> 00:30:04,420
need to have some long-running CPU

00:30:01,630 --> 00:30:06,320
process you can actually offload it so

00:30:04,420 --> 00:30:07,620
you can keep your main thread

00:30:06,320 --> 00:30:10,150
[Music]

00:30:07,620 --> 00:30:16,090
lightweight and without blocking the

00:30:10,150 --> 00:30:17,680
event loop so that that's that's it and

00:30:16,090 --> 00:30:21,490
it works very well it's very stable and

00:30:17,680 --> 00:30:24,310
very performant so I I think with a

00:30:21,490 --> 00:30:29,230
combination of all of those it's

00:30:24,310 --> 00:30:32,410
actually very very good personally I do

00:30:29,230 --> 00:30:34,780
not recommend to use faster for exact

00:30:32,410 --> 00:30:38,260
lustre module for example and I think I

00:30:34,780 --> 00:30:42,010
prefer to rely on cloud providers or

00:30:38,260 --> 00:30:44,770
kubernetes and so on to scale my node my

00:30:42,010 --> 00:30:46,300
node processes up so I think this is

00:30:44,770 --> 00:30:47,710
infrastructure this is an

00:30:46,300 --> 00:30:50,860
infrastructural concern not an

00:30:47,710 --> 00:30:55,540
application concern at least from what

00:30:50,860 --> 00:30:58,300
for what I've seen yeah I can I can even

00:30:55,540 --> 00:30:59,650
add to that as well Matteo I think

00:30:58,300 --> 00:31:02,290
there's a lot of interesting questions

00:30:59,650 --> 00:31:05,290
about like at what layer some of these

00:31:02,290 --> 00:31:07,300
problems should be solved and I think

00:31:05,290 --> 00:31:08,350
there is a lot of strong evidence and it

00:31:07,300 --> 00:31:13,120
doesn't mean that this is the case for

00:31:08,350 --> 00:31:16,930
every deployment or implementation but

00:31:13,120 --> 00:31:18,790
that scale and load balancing is not an

00:31:16,930 --> 00:31:20,320
application layer concern and there's

00:31:18,790 --> 00:31:22,780
even some really cool stuff if you look

00:31:20,320 --> 00:31:26,770
at like the kubernetes and sto community

00:31:22,780 --> 00:31:30,160
around like policy and some things also

00:31:26,770 --> 00:31:32,440
around like TLS that arguably can be

00:31:30,160 --> 00:31:34,810
handled at a cluster level as opposed to

00:31:32,440 --> 00:31:36,880
EndNote itself so it doesn't mean that

00:31:34,810 --> 00:31:38,920
this is the only way to solve it and nor

00:31:36,880 --> 00:31:42,250
that like am i advocating that everyone

00:31:38,920 --> 00:31:44,620
should immediately jump on the

00:31:42,250 --> 00:31:46,240
kubernetes train but in general it's

00:31:44,620 --> 00:31:48,700
really interesting to kind of think

00:31:46,240 --> 00:31:52,000
about some of these problems as meta

00:31:48,700 --> 00:31:55,180
problems so that they get teased out of

00:31:52,000 --> 00:31:58,210
node itself so managing and terminating

00:31:55,180 --> 00:31:59,980
SSL as just one example as the kind of

00:31:58,210 --> 00:32:02,290
thing that can happen outside of your

00:31:59,980 --> 00:32:04,240
node application altogether removes a

00:32:02,290 --> 00:32:06,820
lot of logic and also potential for

00:32:04,240 --> 00:32:09,220
error so that's one of the things is to

00:32:06,820 --> 00:32:12,310
is really great at is managing policy

00:32:09,220 --> 00:32:13,510
across many many services and so if you

00:32:12,310 --> 00:32:15,340
have you know like one monolithic

00:32:13,510 --> 00:32:17,380
application then yeah maybe it makes

00:32:15,340 --> 00:32:19,210
sense for all these things to live but

00:32:17,380 --> 00:32:22,390
if you're thinking a lot more around the

00:32:19,210 --> 00:32:24,280
micro service approach to things you

00:32:22,390 --> 00:32:26,440
really can start teasing a lot of things

00:32:24,280 --> 00:32:29,310
out of your node application which I

00:32:26,440 --> 00:32:32,740
think allows for better auditability

00:32:29,310 --> 00:32:35,050
consistency and maintenance for your

00:32:32,740 --> 00:32:37,890
whole suite of applications not just a

00:32:35,050 --> 00:32:37,890
single application

00:32:39,080 --> 00:32:44,930
the kid saying you want dad oh yes so I

00:32:42,050 --> 00:32:47,270
can kind of echo that as far as the

00:32:44,930 --> 00:32:50,660
opponent you are using small single core

00:32:47,270 --> 00:32:52,940
servers that generally works really well

00:32:50,660 --> 00:32:55,990
I've I've had experience with it a very

00:32:52,940 --> 00:32:59,500
large companies for example in Walmart

00:32:55,990 --> 00:33:02,420
using a single scale out horizontally

00:32:59,500 --> 00:33:05,840
easily and then you're also about taking

00:33:02,420 --> 00:33:07,700
on the bugs of whatever you know is in

00:33:05,840 --> 00:33:09,170
the cluster module I've also worked at

00:33:07,700 --> 00:33:12,070
companies that try to use the question

00:33:09,170 --> 00:33:14,540
module and it didn't work very well I

00:33:12,070 --> 00:33:16,700
also used to be one of the maintainer of

00:33:14,540 --> 00:33:20,720
the question module so I can I can say

00:33:16,700 --> 00:33:21,740
you should not use it so that was

00:33:20,720 --> 00:33:23,960
speaking to the first part of the

00:33:21,740 --> 00:33:26,030
question the second part of the question

00:33:23,960 --> 00:33:29,480
is do you ever succeed going like

00:33:26,030 --> 00:33:31,010
channels and directions I think if it

00:33:29,480 --> 00:33:32,750
was gonna be syntax and part of the

00:33:31,010 --> 00:33:36,400
language that would that would be a

00:33:32,750 --> 00:33:38,510
question for tc39 and not not this group

00:33:36,400 --> 00:33:40,550
but I would imagine you could implement

00:33:38,510 --> 00:33:45,530
something similar to the routines now

00:33:40,550 --> 00:33:46,910
using work the threads and module so if

00:33:45,530 --> 00:33:51,160
that was something you were interested

00:33:46,910 --> 00:33:51,160
in I would encourage you to experiment

00:33:51,430 --> 00:33:56,300
yeah I guess just adding to the

00:33:53,540 --> 00:33:59,810
discussion of you know whether to use

00:33:56,300 --> 00:34:02,330
the like scale using the infrastructure

00:33:59,810 --> 00:34:04,880
I we had at least one fairly large node

00:34:02,330 --> 00:34:07,100
internal deployment where they'd started

00:34:04,880 --> 00:34:09,560
you know doing their own load balancing

00:34:07,100 --> 00:34:11,240
moved to kubernetes and we're wondering

00:34:09,560 --> 00:34:13,429
if they should you know continue to have

00:34:11,240 --> 00:34:15,050
that within the containers because you

00:34:13,429 --> 00:34:16,940
know for other other plots other

00:34:15,050 --> 00:34:19,159
languages and runtimes you can end up

00:34:16,940 --> 00:34:22,520
with with larger nodes than you would

00:34:19,159 --> 00:34:25,070
for node and you know we suggested that

00:34:22,520 --> 00:34:28,130
they just stick to a single node

00:34:25,070 --> 00:34:30,320
instance to per per node and and it

00:34:28,130 --> 00:34:32,330
turned out you know that ended up being

00:34:30,320 --> 00:34:33,890
the feed the end the feedback you man

00:34:32,330 --> 00:34:35,480
does that worked out better for them in

00:34:33,890 --> 00:34:38,330
terms of performance and so forth so

00:34:35,480 --> 00:34:41,110
just some some real life experience that

00:34:38,330 --> 00:34:41,110
confirms that too

00:34:41,750 --> 00:34:46,820
so let's move on to the next question

00:34:43,070 --> 00:34:48,110
the next question is is node you know

00:34:46,820 --> 00:34:50,960
will node be good for image processing

00:34:48,110 --> 00:34:52,580
applications used as a back-end

00:34:50,960 --> 00:34:56,060
Gabriel wondering if you have any

00:34:52,580 --> 00:34:58,880
thoughts on that this this is actually

00:34:56,060 --> 00:35:01,070
kind of a good segue because we were

00:34:58,880 --> 00:35:03,980
just talking about the various options

00:35:01,070 --> 00:35:07,130
people have for for scaling right and so

00:35:03,980 --> 00:35:12,290
so the picture that comes into my mind

00:35:07,130 --> 00:35:14,570
is that we have we've listed all these

00:35:12,290 --> 00:35:18,350
different solutions for for for

00:35:14,570 --> 00:35:20,800
basically scaling for a given

00:35:18,350 --> 00:35:23,990
application but ultimately I think what

00:35:20,800 --> 00:35:25,940
what is needed for any given use case is

00:35:23,990 --> 00:35:28,430
experimentation and I know it's it's

00:35:25,940 --> 00:35:31,310
it's an express to switch from one

00:35:28,430 --> 00:35:33,680
architecture to another but basically

00:35:31,310 --> 00:35:36,440
what I'm thinking is that you know if

00:35:33,680 --> 00:35:37,940
you need if you need scaling especially

00:35:36,440 --> 00:35:40,250
for for things like image processing

00:35:37,940 --> 00:35:42,860
right then then you have to decide for

00:35:40,250 --> 00:35:46,130
yourself where the bottleneck is right

00:35:42,860 --> 00:35:48,770
so so if if if you if you can solve it

00:35:46,130 --> 00:35:51,380
with a with a single process and and

00:35:48,770 --> 00:35:54,020
offload the image processing to a worker

00:35:51,380 --> 00:35:56,870
thread and and that gets you the highest

00:35:54,020 --> 00:35:58,160
throughput and so be it if if if it

00:35:56,870 --> 00:36:00,860
turns out that that the memory

00:35:58,160 --> 00:36:03,260
consumption is such that that that it's

00:36:00,860 --> 00:36:05,720
it's mostly the node process that and

00:36:03,260 --> 00:36:09,140
then then maybe you want now switch to

00:36:05,720 --> 00:36:12,890
to using a single process because then

00:36:09,140 --> 00:36:14,600
then the code can be shared so so it

00:36:12,890 --> 00:36:16,490
depends it depends a lot on your use

00:36:14,600 --> 00:36:20,030
case and and I think image processing is

00:36:16,490 --> 00:36:22,760
it is one of these use cases so III I

00:36:20,030 --> 00:36:24,530
cannot suggest the best case

00:36:22,760 --> 00:36:27,740
architecture off the top of my head for

00:36:24,530 --> 00:36:29,840
image processing but but basically we

00:36:27,740 --> 00:36:31,880
now have an additional tool pool with

00:36:29,840 --> 00:36:37,610
with worker thread beyond just cluster

00:36:31,880 --> 00:36:40,490
and and then child processes and and and

00:36:37,610 --> 00:36:44,600
you having the the orchestration perform

00:36:40,490 --> 00:36:50,660
the scaling so so if if it works then

00:36:44,600 --> 00:36:53,120
use it assume and of course it also adds

00:36:50,660 --> 00:36:55,820
a little bit to the experimentation so

00:36:53,120 --> 00:37:00,500
we need to be agile about that

00:36:55,820 --> 00:37:03,050
definitely definitely a sort of a an

00:37:00,500 --> 00:37:04,850
emerging possibility because JavaScript

00:37:03,050 --> 00:37:06,200
has been single-threaded for a very long

00:37:04,850 --> 00:37:08,720
time but that's not true for many

00:37:06,200 --> 00:37:10,940
programming languages right so a lot of

00:37:08,720 --> 00:37:13,070
them support threading right off the bat

00:37:10,940 --> 00:37:14,630
and JavaScript hasn't so if you're

00:37:13,070 --> 00:37:17,210
coming in from from from a different

00:37:14,630 --> 00:37:18,830
programming environment then then you

00:37:17,210 --> 00:37:20,630
you may be now breathing a sigh of

00:37:18,830 --> 00:37:23,210
relief though of course you always have

00:37:20,630 --> 00:37:24,740
to check and the performance of your

00:37:23,210 --> 00:37:27,890
solution always has to keep to keep you

00:37:24,740 --> 00:37:29,660
grounded so but at least at least now

00:37:27,890 --> 00:37:31,520
we're sort of joining the ranks of those

00:37:29,660 --> 00:37:33,770
languages which support threading blocks

00:37:31,520 --> 00:37:36,320
and we'll see what the implications are

00:37:33,770 --> 00:37:37,730
as as these things develop and as more

00:37:36,320 --> 00:37:39,470
and more applications that were

00:37:37,730 --> 00:37:43,310
previously threaded are now being

00:37:39,470 --> 00:37:45,610
attempted in in JavaScript so that's it

00:37:43,310 --> 00:37:45,610
on my

00:37:48,319 --> 00:38:00,509
matéo I think you had some thoughts too

00:37:52,619 --> 00:38:02,849
I just wanted to to add there are huge

00:38:00,509 --> 00:38:05,910
way so I've built this type of systems I

00:38:02,849 --> 00:38:11,339
think I built three type of those system

00:38:05,910 --> 00:38:17,900
with no js' for essentially image

00:38:11,339 --> 00:38:21,210
processing in the cloud I back in 2011

00:38:17,900 --> 00:38:25,019
dozen up maybe two turbos 2012

00:38:21,210 --> 00:38:28,140
I built a service to do live cropping of

00:38:25,019 --> 00:38:29,849
images similar to one that most like

00:38:28,140 --> 00:38:35,609
most service is now offered to some

00:38:29,849 --> 00:38:37,220
extent so that's actually pretty and

00:38:35,609 --> 00:38:40,349
that works pretty beautifully

00:38:37,220 --> 00:38:44,789
essentially using image processing tools

00:38:40,349 --> 00:38:46,619
that are of the shelf essentially image

00:38:44,789 --> 00:38:48,809
magic core graphics magic something like

00:38:46,619 --> 00:38:50,460
that and just put note on top of those

00:38:48,809 --> 00:38:54,450
even just putting it on top of the

00:38:50,460 --> 00:38:59,549
binaries themselves pretty great that

00:38:54,450 --> 00:39:03,180
works so so so well now very recently

00:38:59,549 --> 00:39:06,299
you can also use node for doing taking

00:39:03,180 --> 00:39:09,349
screenshots for example of web pages we

00:39:06,299 --> 00:39:13,009
have done these with I think was

00:39:09,349 --> 00:39:16,710
puppeteer or something like that even

00:39:13,009 --> 00:39:20,160
running something on headless Chrome on

00:39:16,710 --> 00:39:21,660
lambda something like completely that

00:39:20,160 --> 00:39:25,140
stuff that was completely unfeasible

00:39:21,660 --> 00:39:26,730
before and pretty pretty good like it

00:39:25,140 --> 00:39:28,289
was what it was well from my point of

00:39:26,730 --> 00:39:29,880
view it was well I was just reporting

00:39:28,289 --> 00:39:33,269
that we have used this in so many

00:39:29,880 --> 00:39:37,739
occasions and I never got any issue

00:39:33,269 --> 00:39:39,119
whatsoever yeah I guess what you were

00:39:37,739 --> 00:39:41,400
talking I was just thinking that yeah

00:39:39,119 --> 00:39:43,109
it's it's often that you're using node

00:39:41,400 --> 00:39:44,910
to bring together the overall solution

00:39:43,109 --> 00:39:49,079
even though the image processing itself

00:39:44,910 --> 00:39:50,339
is done in an existing like image magic

00:39:49,079 --> 00:39:54,420
or something that's written in another

00:39:50,339 --> 00:39:56,789
language I know that some of the the

00:39:54,420 --> 00:39:59,640
some of the the work that Gabriel has

00:39:56,789 --> 00:40:00,010
been doing to help threads and worker

00:39:59,640 --> 00:40:02,050
sorry

00:40:00,010 --> 00:40:03,820
workers work better with native modules

00:40:02,050 --> 00:40:06,280
is actually something that might help on

00:40:03,820 --> 00:40:08,950
that front to where you'd be able to use

00:40:06,280 --> 00:40:10,780
some of those native modules and image

00:40:08,950 --> 00:40:15,430
processing components from the worker

00:40:10,780 --> 00:40:21,070
threads themselves all right yes the

00:40:15,430 --> 00:40:22,660
threats a function right yes okay it's

00:40:21,070 --> 00:40:25,840
also just to just to elaborate a little

00:40:22,660 --> 00:40:28,300
bit on that the threat safe function is

00:40:25,840 --> 00:40:30,490
basically used when when when you have a

00:40:28,300 --> 00:40:34,330
module that is multi-threaded already

00:40:30,490 --> 00:40:36,010
and and you wish for it direct with with

00:40:34,330 --> 00:40:39,940
with nodejs

00:40:36,010 --> 00:40:42,340
so you you you can you can basically get

00:40:39,940 --> 00:40:44,260
to the point where you receive a

00:40:42,340 --> 00:40:48,550
function from nodejs which you can call

00:40:44,260 --> 00:40:50,380
and since you cannot normally call such

00:40:48,550 --> 00:40:52,830
a function from from any given thread

00:40:50,380 --> 00:40:55,660
but only from the budget as main thread

00:40:52,830 --> 00:40:57,340
this this particular construct will

00:40:55,660 --> 00:40:59,110
allow you to make an asynchronous call

00:40:57,340 --> 00:41:01,390
from any thread so you can use your

00:40:59,110 --> 00:41:03,700
existing threading implementation in on

00:41:01,390 --> 00:41:05,410
the native side and just and just pass

00:41:03,700 --> 00:41:08,320
in basically what is a JavaScript

00:41:05,410 --> 00:41:09,880
function that you can call so so you

00:41:08,320 --> 00:41:11,950
know if you have a multi-threaded image

00:41:09,880 --> 00:41:14,290
processing application already written

00:41:11,950 --> 00:41:18,300
in the native language then you can now

00:41:14,290 --> 00:41:18,300
integrate it far more easily with no js'

00:41:18,450 --> 00:41:23,740
okay sounds good Collin I think you want

00:41:21,070 --> 00:41:26,800
to add something just something very

00:41:23,740 --> 00:41:29,350
brief another alternative since we are

00:41:26,800 --> 00:41:32,260
using their Jas instead of using a

00:41:29,350 --> 00:41:34,750
native would be something like assembly

00:41:32,260 --> 00:41:37,780
so you could compile the web assembly

00:41:34,750 --> 00:41:39,730
ahead of time and then the image and

00:41:37,780 --> 00:41:42,460
signal processing applications tend to

00:41:39,730 --> 00:41:49,270
do a lot of like vector and rate based

00:41:42,460 --> 00:41:52,150
operations so that's something that okay

00:41:49,270 --> 00:41:56,470
thanks so I think we should move on to

00:41:52,150 --> 00:41:59,980
the next question you know I think

00:41:56,470 --> 00:42:02,880
people are curious about you know what

00:41:59,980 --> 00:42:06,070
the upcoming 4914 rx release which is

00:42:02,880 --> 00:42:08,820
later this month Bethany can you tell us

00:42:06,070 --> 00:42:08,820
a little bit about that

00:42:09,100 --> 00:42:14,800
yeah sure and say for the forty next

00:42:12,160 --> 00:42:18,160
release is due to go out and 21st of

00:42:14,800 --> 00:42:19,720
April and it will be going into LTS in

00:42:18,160 --> 00:42:21,130
October so that's when you should start

00:42:19,720 --> 00:42:24,250
thinking about maybe migrating your

00:42:21,130 --> 00:42:25,540
production applications up to 14 for the

00:42:24,250 --> 00:42:27,460
first six months it will be in the

00:42:25,540 --> 00:42:30,640
current state so it will pick up all new

00:42:27,460 --> 00:42:33,760
features that land on master and some of

00:42:30,640 --> 00:42:37,390
the new features going into 14 at the

00:42:33,760 --> 00:42:41,110
moment are the VA upgrades and there's a

00:42:37,390 --> 00:42:42,940
lot streams changes going into 14x and

00:42:41,110 --> 00:42:47,880
leaving some of the kind of long-term

00:42:42,940 --> 00:42:51,190
dock deprecated API to end-of-life and

00:42:47,880 --> 00:42:53,080
in terms of the release itself there are

00:42:51,190 --> 00:42:55,510
some release candidates out there so if

00:42:53,080 --> 00:42:58,360
you were really keen and wanted to kind

00:42:55,510 --> 00:43:00,570
of test out in advance you can navigate

00:42:58,360 --> 00:43:04,540
to the PR I can paste a link somewhere

00:43:00,570 --> 00:43:09,880
after this and you'd be able to and pick

00:43:04,540 --> 00:43:11,770
it up and try it out okay thanks sounds

00:43:09,880 --> 00:43:13,030
good anybody else wanna add something to

00:43:11,770 --> 00:43:15,240
that before we move on to the next

00:43:13,030 --> 00:43:15,240
question

00:43:17,520 --> 00:43:22,920
okay

00:43:18,760 --> 00:43:22,920
so the next question we have actually

00:43:23,520 --> 00:43:30,700
that we've made changes to the release

00:43:27,250 --> 00:43:38,050
policy for LTS how does that affect 14

00:43:30,700 --> 00:43:42,910
and 12 so we so previously a release

00:43:38,050 --> 00:43:45,400
would be in active LTS for 18 months and

00:43:42,910 --> 00:43:48,970
then switched to maintenance for 12

00:43:45,400 --> 00:43:52,780
months but recently we made the decision

00:43:48,970 --> 00:43:55,630
to swap that which means now a release

00:43:52,780 --> 00:43:58,270
so to both 12 and 14 will only be an

00:43:55,630 --> 00:44:01,420
active OTS for 12 months and they will

00:43:58,270 --> 00:44:03,070
be in maintenance 18 months so the whole

00:44:01,420 --> 00:44:05,050
lifetime of the release is still the

00:44:03,070 --> 00:44:07,140
same amount of time we've just flipped

00:44:05,050 --> 00:44:14,490
the active out yes and the maintenance

00:44:07,140 --> 00:44:18,010
timeframes okay that's good to know

00:44:14,490 --> 00:44:20,850
any other questions comments before we

00:44:18,010 --> 00:44:20,850
move on to the next question

00:44:22,640 --> 00:44:30,420
okay so the next question we've got is

00:44:25,230 --> 00:44:34,890
what do you think about Dino I love it I

00:44:30,420 --> 00:44:37,560
think the more runtimes the better it's

00:44:34,890 --> 00:44:41,010
definitely like a complicated question

00:44:37,560 --> 00:44:44,220
and I think that there's individuals who

00:44:41,010 --> 00:44:46,440
like to try to frame things as like

00:44:44,220 --> 00:44:50,420
mutually exclusive or one versus the

00:44:46,440 --> 00:44:53,670
other I'm a huge fan of the concept of

00:44:50,420 --> 00:44:55,800
abundance thinking you know the more the

00:44:53,670 --> 00:44:57,720
merrier the better I think about this

00:44:55,800 --> 00:45:01,650
especially in regards to some of the

00:44:57,720 --> 00:45:03,960
work that I do at CC 39 note has been

00:45:01,650 --> 00:45:06,240
one of the sole non browser based

00:45:03,960 --> 00:45:09,960
vendors that have been discussing

00:45:06,240 --> 00:45:14,310
changes to the language and with the

00:45:09,960 --> 00:45:17,040
introduction of demo and multiple and a

00:45:14,310 --> 00:45:18,360
number of other JavaScript runtimes that

00:45:17,040 --> 00:45:23,040
are not browsers CloudFlare hedge

00:45:18,360 --> 00:45:26,190
workers also falls into this place there

00:45:23,040 --> 00:45:29,910
is more voices for us at TC 39 for other

00:45:26,190 --> 00:45:31,590
use cases it also helps us as node in my

00:45:29,910 --> 00:45:33,840
personal opinion identify things that

00:45:31,590 --> 00:45:37,290
are not specific to our runtime but are

00:45:33,840 --> 00:45:39,690
a bit of kind of more specific to the

00:45:37,290 --> 00:45:41,340
server side or non browser use case

00:45:39,690 --> 00:45:43,200
which helps us identify things that

00:45:41,340 --> 00:45:46,140
shouldn't be standardized across

00:45:43,200 --> 00:45:47,850
multiple implementations a really great

00:45:46,140 --> 00:45:50,220
example of one of the things right now

00:45:47,850 --> 00:45:52,230
that's being discussed is import meta

00:45:50,220 --> 00:45:55,500
around all the different environments

00:45:52,230 --> 00:45:57,060
and an API such as import meta results

00:45:55,500 --> 00:45:59,100
folks who have maybe use something like

00:45:57,060 --> 00:46:01,620
require resolve for building paths and

00:45:59,100 --> 00:46:03,900
understanding like relative paths to

00:46:01,620 --> 00:46:06,210
your module you don't have access to

00:46:03,900 --> 00:46:08,070
such a feature in the SM and there's a

00:46:06,210 --> 00:46:10,050
lot of work going on and kind of finding

00:46:08,070 --> 00:46:13,950
use cases that make sense across

00:46:10,050 --> 00:46:15,780
multiple runtimes I think personally

00:46:13,950 --> 00:46:17,310
like denim is getting close to a 1.0

00:46:15,780 --> 00:46:18,540
release which is also exciting I've

00:46:17,310 --> 00:46:21,720
managed to pulled it off a lot faster

00:46:18,540 --> 00:46:24,210
than no did but numbers are cheap and my

00:46:21,720 --> 00:46:25,560
personal opinion is so getting to a 1.0

00:46:24,210 --> 00:46:27,210
release as soon as possible is really

00:46:25,560 --> 00:46:30,570
great for the growth of a project so you

00:46:27,210 --> 00:46:31,890
can actually have all of the all the

00:46:30,570 --> 00:46:34,350
different versions so you can really

00:46:31,890 --> 00:46:37,890
tell people what's

00:46:34,350 --> 00:46:39,600
I would personally prefer if people stop

00:46:37,890 --> 00:46:41,760
some of the rhetoric that one runtime

00:46:39,600 --> 00:46:44,280
will kill the other or that you know one

00:46:41,760 --> 00:46:45,780
runtime is better than the other these

00:46:44,280 --> 00:46:48,810
are all tools that have different use

00:46:45,780 --> 00:46:51,300
cases and reasons for using them and I

00:46:48,810 --> 00:46:53,310
think that it's a big benefit to our

00:46:51,300 --> 00:46:54,870
entire ecosystem I think the biggest

00:46:53,310 --> 00:46:56,820
challenge that we'll see moving forward

00:46:54,870 --> 00:46:59,220
is making sure that all these different

00:46:56,820 --> 00:47:01,920
runs sometimes work together and I have

00:46:59,220 --> 00:47:03,660
had ongoing conversations with Ryan Burt

00:47:01,920 --> 00:47:06,360
and other folks from the donor team

00:47:03,660 --> 00:47:08,520
especially around the ESM lamentation to

00:47:06,360 --> 00:47:10,320
ensure that like our ecosystem of

00:47:08,520 --> 00:47:12,390
modules that are sitting on top of us

00:47:10,320 --> 00:47:13,740
we'll be able to work between all of our

00:47:12,390 --> 00:47:19,950
different environments and not have to

00:47:13,740 --> 00:47:23,820
kind of pick a favorite Colin did you

00:47:19,950 --> 00:47:25,890
want to add to that uh so kind of to

00:47:23,820 --> 00:47:27,900
echo what mouth said I I would love it

00:47:25,890 --> 00:47:31,350
if people would stop kind of trying to

00:47:27,900 --> 00:47:33,420
pit me against dinner and then it's not

00:47:31,350 --> 00:47:35,430
really a fair comparison so for example

00:47:33,420 --> 00:47:38,820
I've seen numbers posted about how much

00:47:35,430 --> 00:47:41,160
faster then I can start up the node you

00:47:38,820 --> 00:47:42,600
know over the course of ten years a lot

00:47:41,160 --> 00:47:44,040
of people have a lot of feature requests

00:47:42,600 --> 00:47:46,830
adverse things start to pile up so

00:47:44,040 --> 00:47:49,260
eventually I would have imagined Bennett

00:47:46,830 --> 00:47:50,760
also start to slow down but on the

00:47:49,260 --> 00:47:52,290
positive side there are actually a lot

00:47:50,760 --> 00:47:55,320
of things from there that I would love

00:47:52,290 --> 00:47:58,830
to see may the doc I would love to have

00:47:55,320 --> 00:48:01,470
a built-in test runner I would love to

00:47:58,830 --> 00:48:03,960
have you know a built-in bundler things

00:48:01,470 --> 00:48:06,660
that when they were originally started

00:48:03,960 --> 00:48:09,000
it was kind of the minimal core approach

00:48:06,660 --> 00:48:11,850
it seems like demo even though it's from

00:48:09,000 --> 00:48:13,170
the same person has kind of flipped that

00:48:11,850 --> 00:48:16,200
a little bit and now is kind of more of

00:48:13,170 --> 00:48:19,290
a kitchen sink approach and I think a

00:48:16,200 --> 00:48:21,420
lot of people not just myself would

00:48:19,290 --> 00:48:25,250
really appreciate having access to those

00:48:21,420 --> 00:48:25,250
types of features built into the runtime

00:48:27,440 --> 00:48:35,130
matéo you think you want to that yeah I

00:48:30,720 --> 00:48:39,569
just wanted to play on one of the key

00:48:35,130 --> 00:48:43,410
difference between Dino and note

00:48:39,569 --> 00:48:47,160
and which is the difference in the

00:48:43,410 --> 00:48:49,559
module system which is very significant

00:48:47,160 --> 00:48:53,940
it seems out of scope for Dino to

00:48:49,559 --> 00:49:01,469
support the NPM ecosystem and they just

00:48:53,940 --> 00:49:04,349
rely on HTTP URLs and from my personal

00:49:01,469 --> 00:49:07,469
point of view is that it's the the NPM

00:49:04,349 --> 00:49:09,359
ecosystem and node modules has been one

00:49:07,469 --> 00:49:13,229
of the key success of nodejs

00:49:09,359 --> 00:49:15,660
so the technically is Fanta is a

00:49:13,229 --> 00:49:21,420
fantastic project but I'm not seeing I

00:49:15,660 --> 00:49:27,779
will at least pan out because of that of

00:49:21,420 --> 00:49:29,160
that lack of support essential okay

00:49:27,779 --> 00:49:32,670
thanks does anybody else have any

00:49:29,160 --> 00:49:37,249
thoughts on that question yeah I just

00:49:32,670 --> 00:49:40,589
want to add a couple of things one is a

00:49:37,249 --> 00:49:44,940
synchronous even driven programming we

00:49:40,589 --> 00:49:47,219
are the pioneers node.js that also comes

00:49:44,940 --> 00:49:51,959
with some kind of problems for example

00:49:47,219 --> 00:49:54,390
the some of the features some of the

00:49:51,959 --> 00:49:57,749
capabilities we don't have a

00:49:54,390 --> 00:50:00,930
specification the way the feature works

00:49:57,749 --> 00:50:04,949
itself becomes the standard for example

00:50:00,930 --> 00:50:07,170
the streams the HTTP protocols or the

00:50:04,949 --> 00:50:09,299
promises these are the kind of things

00:50:07,170 --> 00:50:12,119
which much got matured in the community

00:50:09,299 --> 00:50:14,910
over the time based on the use cases and

00:50:12,119 --> 00:50:17,400
the workload I don't know much about

00:50:14,910 --> 00:50:21,140
that they know other than the fact that

00:50:17,400 --> 00:50:26,369
it's a type script based back-end

00:50:21,140 --> 00:50:29,940
platform but having a similar platform

00:50:26,369 --> 00:50:34,249
with similar objective and capabilities

00:50:29,940 --> 00:50:37,430
is gonna definitely improve the overall

00:50:34,249 --> 00:50:39,359
you know features as well as help

00:50:37,430 --> 00:50:41,699
standardizing and building

00:50:39,359 --> 00:50:44,849
specifications around features and

00:50:41,699 --> 00:50:47,130
capabilities which are derived from even

00:50:44,849 --> 00:50:52,160
driven architecture which is good for

00:50:47,130 --> 00:50:52,160
the overall ecosystem in my opinion

00:50:57,380 --> 00:51:03,520
any other thoughts

00:51:01,500 --> 00:51:05,170
you

00:51:03,520 --> 00:51:06,339
okay if not let's

00:51:05,170 --> 00:51:09,819
on to the next question the next

00:51:06,339 --> 00:51:11,559
question was the yarn v2 module

00:51:09,819 --> 00:51:13,390
resolution looks promising and brings

00:51:11,559 --> 00:51:17,579
but brings massive change to the

00:51:13,390 --> 00:51:17,579
ecosystem you know thoughts about that

00:51:25,670 --> 00:51:31,170
it seems like nobody wants to jump in

00:51:29,190 --> 00:51:34,230
necessarily on that one

00:51:31,170 --> 00:51:36,720
I guess I've heard there's certainly

00:51:34,230 --> 00:51:38,850
concerns over the the impact it will

00:51:36,720 --> 00:51:41,130
have to the ecosystem but I I honestly

00:51:38,850 --> 00:51:46,200
haven't looked in enough details to have

00:51:41,130 --> 00:51:49,230
a really good opinion I can add just

00:51:46,200 --> 00:51:50,880
like a small bit here which is that like

00:51:49,230 --> 00:51:54,620
at least from the note Janice modules

00:51:50,880 --> 00:51:59,460
team's perspective we are not looking

00:51:54,620 --> 00:52:02,580
like outside of browsers and note itself

00:51:59,460 --> 00:52:05,370
as far as making decisions about our

00:52:02,580 --> 00:52:07,950
resolution algorithm the resolution oven

00:52:05,370 --> 00:52:11,420
we have four es modules is heavily based

00:52:07,950 --> 00:52:13,650
on capabilities that can be matched to

00:52:11,420 --> 00:52:18,900
specifically the import map proposal

00:52:13,650 --> 00:52:22,830
that's being done over in Wi CG the ycg

00:52:18,900 --> 00:52:25,980
which is a w3c incubator the plan and

00:52:22,830 --> 00:52:29,750
hope is to allow like what is written in

00:52:25,980 --> 00:52:32,250
know DSM modules to be more less

00:52:29,750 --> 00:52:34,560
compatible with the browser modules

00:52:32,250 --> 00:52:39,590
without requiring a build step simply

00:52:34,560 --> 00:52:42,500
through metadata we do we are working on

00:52:39,590 --> 00:52:45,270
making sure that our loaders

00:52:42,500 --> 00:52:47,130
implementation will allow various

00:52:45,270 --> 00:52:49,560
individuals within the ecosystem to

00:52:47,130 --> 00:52:50,540
build custom things so yarn

00:52:49,560 --> 00:52:55,470
plug-and-play

00:52:50,540 --> 00:52:57,930
tink web pack Babel these were all use

00:52:55,470 --> 00:53:00,300
cases that we looked at explored and

00:52:57,930 --> 00:53:02,880
thought about in designing and in the

00:53:00,300 --> 00:53:04,230
continued design of the loaders but as

00:53:02,880 --> 00:53:06,510
far as the node modules Tina's

00:53:04,230 --> 00:53:08,940
perspective is concerned the baseline

00:53:06,510 --> 00:53:11,340
resolution algorithm that we have is

00:53:08,940 --> 00:53:13,050
going to be absolutely minimal we've

00:53:11,340 --> 00:53:15,660
actually been removing things from the

00:53:13,050 --> 00:53:17,910
algorithm not adding things but we are

00:53:15,660 --> 00:53:21,030
trying to make first-class support for

00:53:17,910 --> 00:53:23,790
extents extensions in so that people can

00:53:21,030 --> 00:53:26,940
work you know more hand-in-hand with

00:53:23,790 --> 00:53:29,250
with node itself as opposed to some of

00:53:26,940 --> 00:53:32,840
the happier things that have been done

00:53:29,250 --> 00:53:32,840
in the past in the command

00:53:35,050 --> 00:53:39,140
Thanks

00:53:36,340 --> 00:53:44,570
okay sounds like you know that's what we

00:53:39,140 --> 00:53:46,280
have for that question we're down to you

00:53:44,570 --> 00:53:47,930
know the last five minutes

00:53:46,280 --> 00:53:51,050
and I guess you know I was thinking

00:53:47,930 --> 00:53:52,550
maybe we could use this to either let

00:53:51,050 --> 00:53:55,130
each of the panelists give you know a

00:53:52,550 --> 00:53:57,560
short if there's some one more topic

00:53:55,130 --> 00:53:59,720
they'd sort of like to to let people

00:53:57,560 --> 00:54:01,850
know about or spend if you know the

00:53:59,720 --> 00:54:04,670
couple of minutes in terms of like how

00:54:01,850 --> 00:54:07,370
you got involved a node and you know any

00:54:04,670 --> 00:54:08,840
suggestions for for people who might be

00:54:07,370 --> 00:54:11,720
what would be thinking hey I want to do

00:54:08,840 --> 00:54:15,320
that and possibly get you know work to

00:54:11,720 --> 00:54:20,900
become a TSC member so maybe Bethany you

00:54:15,320 --> 00:54:22,880
can start sure I start with and how I

00:54:20,900 --> 00:54:24,770
got involved with Nate so the way I got

00:54:22,880 --> 00:54:27,680
involved node is the team I like that

00:54:24,770 --> 00:54:31,970
IBM had maintains their own port of note

00:54:27,680 --> 00:54:34,490
and then by running over in belts I

00:54:31,970 --> 00:54:37,160
managed to weave rerun tests and then

00:54:34,490 --> 00:54:38,570
Mike triaging a test results I found out

00:54:37,160 --> 00:54:40,580
that some of the tests were a bit flaky

00:54:38,570 --> 00:54:45,470
and from there we started contributing

00:54:40,580 --> 00:54:47,780
and flaky test fixes etc a bit later on

00:54:45,470 --> 00:54:49,820
I think miles offered to help mentor me

00:54:47,780 --> 00:54:50,990
along with Gibson into the release

00:54:49,820 --> 00:54:53,840
working group that was kind of a

00:54:50,990 --> 00:54:55,630
one-to-one mentoring sessions every two

00:54:53,840 --> 00:54:58,010
weeks similar to what we're running now

00:54:55,630 --> 00:54:59,900
and that got me more up to scratch with

00:54:58,010 --> 00:55:01,970
like how to build a release and that's

00:54:59,900 --> 00:55:04,340
how I've continued to contribute there

00:55:01,970 --> 00:55:05,810
so again if anyone else wanted to get

00:55:04,340 --> 00:55:09,100
involved in some releases and

00:55:05,810 --> 00:55:11,330
interesting fruit and joining those

00:55:09,100 --> 00:55:14,630
bi-weekly meetings is a good way of

00:55:11,330 --> 00:55:27,080
getting involved I think so maybe keep

00:55:14,630 --> 00:55:31,010
you all we may have lost Gabriel was a

00:55:27,080 --> 00:55:33,410
gradual one I I first I started working

00:55:31,010 --> 00:55:36,470
with the jQuery Mobile and I was a

00:55:33,410 --> 00:55:40,610
contributor there and turns out they're

00:55:36,470 --> 00:55:42,310
built system runs nodejs and so sooner

00:55:40,610 --> 00:55:44,500
or later I went from writing

00:55:42,310 --> 00:55:46,780
for the browser to write JavaScript or

00:55:44,500 --> 00:55:51,580
the build system for her jQuery Mobile

00:55:46,780 --> 00:55:56,410
and and then we got involved with with

00:55:51,580 --> 00:55:58,150
IOT and so I kind of uh I kind of you

00:55:56,410 --> 00:56:00,310
know somebody walked up to me and said

00:55:58,150 --> 00:56:02,260
hey you know no J's right where we were

00:56:00,310 --> 00:56:07,930
doing this thing and it's using no Jas

00:56:02,260 --> 00:56:10,300
and yes but either way so that and so

00:56:07,930 --> 00:56:12,910
then I I got to working with no Diaz

00:56:10,300 --> 00:56:16,300
full-time writing writing bindings for

00:56:12,910 --> 00:56:21,090
for uh C library was used in an IOT

00:56:16,300 --> 00:56:26,290
stack like note stupidly node and and

00:56:21,090 --> 00:56:29,710
basically to do working on the naked on

00:56:26,290 --> 00:56:32,410
subsystem itself and so just at the same

00:56:29,710 --> 00:56:36,700
time we had we had an API sort of

00:56:32,410 --> 00:56:39,550
becoming a thing of both for supporting

00:56:36,700 --> 00:56:42,970
multiple engines that is JavaScript

00:56:39,550 --> 00:56:45,460
engines and for for providing stability

00:56:42,970 --> 00:56:47,680
for native add-ons so that you know you

00:56:45,460 --> 00:56:49,690
don't have to release your native add-on

00:56:47,680 --> 00:56:52,750
every time a new node person comes out

00:56:49,690 --> 00:56:55,510
and so that that was kind of a segue for

00:56:52,750 --> 00:56:59,950
me I ended up being a lot to to an API

00:56:55,510 --> 00:57:01,630
and that's what basically the other

00:56:59,950 --> 00:57:03,640
collaborators noticed and eventually

00:57:01,630 --> 00:57:05,770
took me on as a collaborator and then

00:57:03,640 --> 00:57:07,660
later on as other as a TSC member so

00:57:05,770 --> 00:57:09,850
that has been the path for me and I

00:57:07,660 --> 00:57:13,180
think for many of the people to is to

00:57:09,850 --> 00:57:17,640
start contributing by the way and then

00:57:13,180 --> 00:57:17,640
it becomes your major area of focus

00:57:18,300 --> 00:57:23,140
okay thanks I I think you know those are

00:57:21,340 --> 00:57:25,090
two good stories and that reinforce some

00:57:23,140 --> 00:57:27,100
of the the suggestion earlier of like

00:57:25,090 --> 00:57:30,250
finding a niche area and you know

00:57:27,100 --> 00:57:34,060
focusing on that but it seems like we're

00:57:30,250 --> 00:57:37,560
at the end of the hour so I I think we

00:57:34,060 --> 00:57:37,560
should probably close out at this point

00:57:37,869 --> 00:57:44,869
thank you to all the viewers and we hope

00:57:42,770 --> 00:57:47,780
you to see to help you hope to see you

00:57:44,869 --> 00:57:49,520
in the next a mas and I'm sure we'll do

00:57:47,780 --> 00:57:52,850
this as a TSE again sometime in the

00:57:49,520 --> 00:57:55,930
future thank you all

00:57:52,850 --> 00:57:55,930

YouTube URL: https://www.youtube.com/watch?v=aq4qW_y29h8


