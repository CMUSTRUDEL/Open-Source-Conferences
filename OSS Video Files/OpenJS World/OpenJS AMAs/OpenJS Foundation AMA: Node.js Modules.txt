Title: OpenJS Foundation AMA: Node.js Modules
Publication date: 2020-08-27
Playlist: OpenJS AMAs
Description: 
	The OpenJS Foundation is a member-supported non-profit organization that provides a neutral home for some of the most important project in the JavaScript ecosystem.  
Learn more and join us at https://openjsf.org
Captions: 
	00:00:03,940 --> 00:00:09,850
okay via life hello everyone welcome to

00:00:07,870 --> 00:00:14,200
the node.js ask me anything session on

00:00:09,850 --> 00:00:17,530
modules and thanks for joining us first

00:00:14,200 --> 00:00:21,160
of all I guess we should go over a quick

00:00:17,530 --> 00:00:24,330
round of introductions so in the order I

00:00:21,160 --> 00:00:28,449
see you badly

00:00:24,330 --> 00:00:32,349
sure so I'm Bradley Phidias work at

00:00:28,449 --> 00:00:36,460
GoDaddy and I think I was the first

00:00:32,349 --> 00:00:39,700
person to try to propose landing modules

00:00:36,460 --> 00:00:42,460
so I've been around a while but it's no

00:00:39,700 --> 00:00:44,710
longer just me we have a huge working

00:00:42,460 --> 00:00:46,120
group and I've actually uh started doing

00:00:44,710 --> 00:00:50,110
less than most the other working group

00:00:46,120 --> 00:00:56,829
these days that's awesome

00:00:50,110 --> 00:00:58,359
Jeffrey hi I'm Jeffrey booth I work at

00:00:56,829 --> 00:01:01,440
Walt Disney Imagineering

00:00:58,359 --> 00:01:06,700
I am the maintainer of CoffeeScript and

00:01:01,440 --> 00:01:09,640
I got involved in this when the current

00:01:06,700 --> 00:01:15,820
design started to affect how

00:01:09,640 --> 00:01:19,840
CoffeeScript is going to work and thank

00:01:15,820 --> 00:01:21,810
you so much Myles I am Myles boran's

00:01:19,840 --> 00:01:24,040
the developer advocate at Google

00:01:21,810 --> 00:01:27,310
specifically working on Google cloud

00:01:24,040 --> 00:01:29,650
platform I'm on the node.js technical

00:01:27,310 --> 00:01:32,980
steering committee and been helping with

00:01:29,650 --> 00:01:35,350
release team for a while I helped to

00:01:32,980 --> 00:01:39,040
spin up the node.js modules team which

00:01:35,350 --> 00:01:40,300
is you know currently overseeing the

00:01:39,040 --> 00:01:45,100
efforts

00:01:40,300 --> 00:01:49,570
Frias modules and no Jess perfect and

00:01:45,100 --> 00:01:52,810
yeah yeah hi I'm young I'm also working

00:01:49,570 --> 00:01:55,510
at Google like at Mars and I originally

00:01:52,810 --> 00:01:58,110
started working on modules a node kind

00:01:55,510 --> 00:02:00,460
of from the web compatibility

00:01:58,110 --> 00:02:02,260
compatibility perspective trying to make

00:02:00,460 --> 00:02:05,380
it work so you have the same code work

00:02:02,260 --> 00:02:08,129
in both and well not having modules and

00:02:05,380 --> 00:02:11,140
no it was kind of a blocker for that

00:02:08,129 --> 00:02:14,590
awesome thank you very much and lastly

00:02:11,140 --> 00:02:17,650
I'm Woodrow I'm the moderator for the

00:02:14,590 --> 00:02:22,209
evening I don't know it's evening for me

00:02:17,650 --> 00:02:24,670
bril dead zone yeah and I work as a

00:02:22,209 --> 00:02:29,200
composite attacker at agalya working on

00:02:24,670 --> 00:02:32,170
v8 stuff and PC 39 and I've been working

00:02:29,200 --> 00:02:35,260
on nodejs working a little on the common

00:02:32,170 --> 00:02:37,060
GS side of things and the embedding side

00:02:35,260 --> 00:02:39,609
of things when it comes to actually

00:02:37,060 --> 00:02:43,780
running code in v8 so it'll be really

00:02:39,609 --> 00:02:46,329
interesting thanks everyone again for

00:02:43,780 --> 00:02:49,049
the introductions just to kick this off

00:02:46,329 --> 00:02:53,549
actually I think you'll be really useful

00:02:49,049 --> 00:02:56,139
especially for the uninitiated to kinda

00:02:53,549 --> 00:02:59,680
for us to kind of go through the road

00:02:56,139 --> 00:03:01,690
map and talk about the timelines for

00:02:59,680 --> 00:03:03,970
release and perhaps some give some

00:03:01,690 --> 00:03:12,459
historical context about how we got

00:03:03,970 --> 00:03:13,840
where we are so for a road map stuff I

00:03:12,459 --> 00:03:15,970
guess we could talk a little bit about

00:03:13,840 --> 00:03:19,180
like what has landed and what could be

00:03:15,970 --> 00:03:21,280
expected and then maybe for historic

00:03:19,180 --> 00:03:24,190
Brad Brad can maybe kick that off but

00:03:21,280 --> 00:03:26,349
the the most straightforward stuff right

00:03:24,190 --> 00:03:28,750
now that's good to know is that es

00:03:26,349 --> 00:03:33,760
modules has been unflagged in nodejs

00:03:28,750 --> 00:03:36,040
as-as-as of 13.2 there's two two major

00:03:33,760 --> 00:03:39,730
features that are still flagged that are

00:03:36,040 --> 00:03:42,280
being worked on although and maybe you

00:03:39,730 --> 00:03:45,159
know Jeffrey or Dion knows a bit better

00:03:42,280 --> 00:03:48,069
I know conditional exports and self

00:03:45,159 --> 00:03:49,930
referential modules are in the process

00:03:48,069 --> 00:03:53,829
of being unflagged very soon have they

00:03:49,930 --> 00:03:56,260
been unflagged yet guys separate self

00:03:53,829 --> 00:03:59,159
referential imports have been unflagged

00:03:56,260 --> 00:04:01,750
but only on Massa I'm not sure that's a

00:03:59,159 --> 00:04:06,129
conditional exports is still pending to

00:04:01,750 --> 00:04:08,019
the elect the current timeline that we

00:04:06,129 --> 00:04:11,349
have those hoping to have those features

00:04:08,019 --> 00:04:14,709
unflagged this month we're hoping to

00:04:11,349 --> 00:04:17,079
back port as much of if not the entire

00:04:14,709 --> 00:04:20,409
implementation aside from the unflagging

00:04:17,079 --> 00:04:26,190
to new GS 12 and the next cember minor

00:04:20,409 --> 00:04:30,639
release with the intention of unflagging

00:04:26,190 --> 00:04:34,270
everything in nodejs 12 by April

00:04:30,639 --> 00:04:36,909
for the next cember minor release so you

00:04:34,270 --> 00:04:39,610
know we're kind of living in the future

00:04:36,909 --> 00:04:42,250
most of this stuff has already landed in

00:04:39,610 --> 00:04:45,550
a release of node and in less than six

00:04:42,250 --> 00:04:47,650
months will happen will hopefully be you

00:04:45,550 --> 00:04:52,169
know living in an LTS version of it as

00:04:47,650 --> 00:04:54,639
well that is super interesting uh

00:04:52,169 --> 00:04:58,800
Bradley would you like to expand a

00:04:54,639 --> 00:05:03,639
little on the historical context sure so

00:04:58,800 --> 00:05:05,680
the node project got involved in ES

00:05:03,639 --> 00:05:11,110
modules right before they landed in the

00:05:05,680 --> 00:05:16,690
spec so yes modules landed in 2015 and

00:05:11,110 --> 00:05:21,690
the first recording I have of trying to

00:05:16,690 --> 00:05:25,259
implement them in node is July of

00:05:21,690 --> 00:05:28,900
there's a recording on YouTube for that

00:05:25,259 --> 00:05:34,120
but basically from then onward it was

00:05:28,900 --> 00:05:37,289
kind of a back-and-forth tc39 the

00:05:34,120 --> 00:05:41,289
JavaScript language standards body

00:05:37,289 --> 00:05:45,849
landed es modules in 2015 but without a

00:05:41,289 --> 00:05:49,509
plan to actually ship them and browsers

00:05:45,849 --> 00:05:50,349
or a node things got really hairy for a

00:05:49,509 --> 00:05:54,879
while

00:05:50,349 --> 00:05:57,819
meaning that both browsers and node had

00:05:54,879 --> 00:06:00,039
to kind of take the spec and figure out

00:05:57,819 --> 00:06:03,129
how they were going to actually ship it

00:06:00,039 --> 00:06:05,740
so for the next few years

00:06:03,129 --> 00:06:08,169
node at least was trying to figure out

00:06:05,740 --> 00:06:10,839
how they were gonna do that and there's

00:06:08,169 --> 00:06:14,020
an older process that we'd no longer use

00:06:10,839 --> 00:06:18,060
called the EP process for enhancement

00:06:14,020 --> 00:06:22,500
proposals and so for a while we were

00:06:18,060 --> 00:06:25,000
using these node EPS to try to design a

00:06:22,500 --> 00:06:27,659
specification for how we were going to

00:06:25,000 --> 00:06:32,469
ship modules in mode and that was around

00:06:27,659 --> 00:06:34,690
a two-year long time span in which we

00:06:32,469 --> 00:06:37,330
were talking with different people and

00:06:34,690 --> 00:06:40,719
some people in the browsers

00:06:37,330 --> 00:06:44,529
it was a very different system from what

00:06:40,719 --> 00:06:47,709
we have today today we you

00:06:44,529 --> 00:06:49,959
whose working groups and we have much

00:06:47,709 --> 00:06:52,449
smaller iterations going on

00:06:49,959 --> 00:06:58,869
so we're landing PRS in node rather than

00:06:52,449 --> 00:07:01,869
making huge specs but after this EP

00:06:58,869 --> 00:07:03,849
process kind of started to wind down we

00:07:01,869 --> 00:07:07,419
enter kind of this next life cycle

00:07:03,849 --> 00:07:10,719
there's a period of time where we just

00:07:07,419 --> 00:07:15,969
kind of landed a implementation in node

00:07:10,719 --> 00:07:18,659
that is one that we'd no longer use and

00:07:15,969 --> 00:07:23,319
things got quiet for around a year and

00:07:18,659 --> 00:07:27,129
finally miles started up the modules

00:07:23,319 --> 00:07:29,469
working group as some contention came up

00:07:27,129 --> 00:07:31,959
on social media about the implementation

00:07:29,469 --> 00:07:34,449
that we did land and we spun up the

00:07:31,959 --> 00:07:39,189
modules working group this is around the

00:07:34,449 --> 00:07:42,749
time that MPM made a counterproposal to

00:07:39,189 --> 00:07:45,879
the node implementation of the time and

00:07:42,749 --> 00:07:47,619
there were other proposals starting to

00:07:45,879 --> 00:07:49,779
show up as kind of these counter

00:07:47,619 --> 00:07:53,469
proposals after we landed something in

00:07:49,779 --> 00:07:59,229
node and so from these counter proposals

00:07:53,469 --> 00:08:02,589
for around 2 years ago until now we've

00:07:59,229 --> 00:08:05,769
had this working group going and trying

00:08:02,589 --> 00:08:09,669
to agree on what we are going to ship

00:08:05,769 --> 00:08:14,019
instead and so like Miles said in 13.2

00:08:09,669 --> 00:08:16,419
we unflagged a new implementation it

00:08:14,019 --> 00:08:19,929
uses a decent amount of that older

00:08:16,419 --> 00:08:24,069
implementation but it has a different

00:08:19,929 --> 00:08:27,549
user experience and so that's how we got

00:08:24,069 --> 00:08:32,319
where we are today and now with the

00:08:27,549 --> 00:08:35,829
working group we have meetings quite

00:08:32,319 --> 00:08:38,589
often and we are landing pr's they're

00:08:35,829 --> 00:08:41,079
open on node right now we try to keep

00:08:38,589 --> 00:08:43,449
them somewhat contained and small so

00:08:41,079 --> 00:08:46,990
yeah if you want to participate it's

00:08:43,449 --> 00:08:49,620
much easier than it was in the past and

00:08:46,990 --> 00:08:52,829
just to add something that the

00:08:49,620 --> 00:08:58,360
implementation that was in flag and 13.2

00:08:52,829 --> 00:09:00,160
first landed in 1200 some of the like

00:08:58,360 --> 00:09:01,779
latest parts of like very newest

00:09:00,160 --> 00:09:05,260
additions to it I think are probably

00:09:01,779 --> 00:09:08,050
only in the 13 line but if you use node

00:09:05,260 --> 00:09:11,519
12 and up with the experimental modules

00:09:08,050 --> 00:09:13,750
flag that's essentially the same

00:09:11,519 --> 00:09:17,950
implementation as what eventually got

00:09:13,750 --> 00:09:21,610
flat unflagged in the current nodes that

00:09:17,950 --> 00:09:22,959
is awesome and thank you for sharing

00:09:21,610 --> 00:09:27,550
quite the journey with us

00:09:22,959 --> 00:09:31,269
Bradley digging into the questions now a

00:09:27,550 --> 00:09:36,459
really interesting group of questions

00:09:31,269 --> 00:09:41,170
that have been submitted deal with how

00:09:36,459 --> 00:09:43,360
to you know start getting dirty with yes

00:09:41,170 --> 00:09:45,010
modules right because now that it's

00:09:43,360 --> 00:09:49,300
unflagged as you mentioned people are

00:09:45,010 --> 00:09:55,149
adopting them more and more even in the

00:09:49,300 --> 00:09:57,610
more let me so okay coming out of the

00:09:55,149 --> 00:09:59,950
collapse amid i had opened an issue for

00:09:57,610 --> 00:10:01,930
discussion at the npm RFC github repo

00:09:59,950 --> 00:10:04,029
about the default settings for use in

00:10:01,930 --> 00:10:05,709
packaged or json files and what

00:10:04,029 --> 00:10:07,930
developers or authors should be

00:10:05,709 --> 00:10:10,810
considering when creating a package and

00:10:07,930 --> 00:10:17,440
setting the type properly so there is

00:10:10,810 --> 00:10:19,570
this is crc number 75 on npm which which

00:10:17,440 --> 00:10:23,190
is an RC for a feature that should come

00:10:19,570 --> 00:10:26,949
the user for a module type been

00:10:23,190 --> 00:10:31,000
initiating initializing sorry an NPM

00:10:26,949 --> 00:10:33,970
module so what what do you people think

00:10:31,000 --> 00:10:36,310
about what the what the expected

00:10:33,970 --> 00:10:38,380
workflow is here is there any

00:10:36,310 --> 00:10:40,510
interesting work going on in the two men

00:10:38,380 --> 00:10:43,350
side of things to make things easier as

00:10:40,510 --> 00:10:43,350
adoption growth

00:10:46,770 --> 00:10:52,260
I can kind of speak to this a little bit

00:10:49,440 --> 00:10:54,540
um so one of the key things that you

00:10:52,260 --> 00:10:59,339
mentioned here is it's about tooling

00:10:54,540 --> 00:11:00,930
support so node historically hasn't made

00:10:59,339 --> 00:11:03,750
any recommendations while we've had

00:11:00,930 --> 00:11:08,900
these flagged features but now that we

00:11:03,750 --> 00:11:13,560
have unflagged a that type field in

00:11:08,900 --> 00:11:17,910
package.json in the 13 line we're going

00:11:13,560 --> 00:11:19,890
to see a situation where different tools

00:11:17,910 --> 00:11:23,880
may have different opinions on what they

00:11:19,890 --> 00:11:27,089
want to do I I feel personally that in

00:11:23,880 --> 00:11:31,170
the future all tools should set the

00:11:27,089 --> 00:11:33,779
field to some value type the type field

00:11:31,170 --> 00:11:36,150
I think you mean yes the type field

00:11:33,779 --> 00:11:38,070
I feel the type field should pretty much

00:11:36,150 --> 00:11:39,990
always be populated in the future by

00:11:38,070 --> 00:11:42,390
tools but I don't have a strong

00:11:39,990 --> 00:11:44,580
preference on what the fields value

00:11:42,390 --> 00:11:48,660
should be I think that's up to an

00:11:44,580 --> 00:11:51,570
individual tool and if we ever add more

00:11:48,660 --> 00:11:56,550
values to that field it may change over

00:11:51,570 --> 00:11:57,600
time what we recommend that's it and and

00:11:56,550 --> 00:12:01,650
something that's probably worth pointing

00:11:57,600 --> 00:12:03,330
out I feel like the one of the things

00:12:01,650 --> 00:12:05,580
that people are confused about this so

00:12:03,330 --> 00:12:07,050
or why they're asking is because they're

00:12:05,580 --> 00:12:08,610
like well why should I set a type field

00:12:07,050 --> 00:12:10,589
if I'm gonna have multiple types in my

00:12:08,610 --> 00:12:12,300
package like I'm gonna ship in ESM

00:12:10,589 --> 00:12:16,110
version and I'm gonna ship a comedy

00:12:12,300 --> 00:12:18,690
version a package can contain multiple

00:12:16,110 --> 00:12:21,330
package that JSON files that's always

00:12:18,690 --> 00:12:23,820
been the case so if you are shipping

00:12:21,330 --> 00:12:26,280
multiple artifacts you could have like

00:12:23,820 --> 00:12:28,170
you know a top-level package of Jason

00:12:26,280 --> 00:12:30,180
that with a type field that controls

00:12:28,170 --> 00:12:31,380
whatever you want at the top level you

00:12:30,180 --> 00:12:33,540
know that the root folder of your

00:12:31,380 --> 00:12:35,220
package and then if you have a subfolder

00:12:33,540 --> 00:12:38,010
like comment yes another subfolder

00:12:35,220 --> 00:12:40,500
called yes model each of those folders

00:12:38,010 --> 00:12:44,130
can have a type of package a jason with

00:12:40,500 --> 00:12:48,480
the type field itself so you can be more

00:12:44,130 --> 00:12:51,620
specific in like describing the the

00:12:48,480 --> 00:12:51,620
things within your package

00:12:52,330 --> 00:13:00,270
that's great thank you so much I believe

00:12:56,160 --> 00:13:04,810
we're gonna see more and more people

00:13:00,270 --> 00:13:09,970
fiddling with doing in this area as we

00:13:04,810 --> 00:13:10,720
get more and more usage actually talking

00:13:09,970 --> 00:13:12,910
about usage

00:13:10,720 --> 00:13:16,150
now that modules and exports is

00:13:12,910 --> 00:13:19,060
unflagged we should be able to see the

00:13:16,150 --> 00:13:22,120
first relative first-time relative usage

00:13:19,060 --> 00:13:24,760
of type module that we're just talking

00:13:22,120 --> 00:13:28,510
about versus the infamous dot MJS

00:13:24,760 --> 00:13:29,680
extension so the question

00:13:28,510 --> 00:13:32,680
person who submitted the questionnaire

00:13:29,680 --> 00:13:35,020
asked do we have any relevant statistics

00:13:32,680 --> 00:13:36,880
here and if not will someone be

00:13:35,020 --> 00:13:39,970
collecting this information to inform

00:13:36,880 --> 00:13:43,500
future modules development if so how has

00:13:39,970 --> 00:13:46,330
it informed the working group through on

00:13:43,500 --> 00:13:46,750
tot the working groups thoughts on no

00:13:46,330 --> 00:13:51,640
choices

00:13:46,750 --> 00:13:57,130
yes implementation which also ok so this

00:13:51,640 --> 00:14:00,190
also deals a lot with doula and I'm not

00:13:57,130 --> 00:14:01,690
sure if there's any statistics they're

00:14:00,190 --> 00:14:07,270
being collected right now but I'd love

00:14:01,690 --> 00:14:11,170
to hear a point yeah I can take a stab

00:14:07,270 --> 00:14:13,780
at this one right so it is kind of

00:14:11,170 --> 00:14:15,040
real-time from the outside looking in to

00:14:13,780 --> 00:14:17,290
see that note basically has two

00:14:15,040 --> 00:14:20,650
different solutions to how do I tell

00:14:17,290 --> 00:14:24,400
note but this file isn't years module

00:14:20,650 --> 00:14:25,660
right so this you can use type module in

00:14:24,400 --> 00:14:28,060
penetration and then you have your

00:14:25,660 --> 00:14:29,950
adoption s files that belong to that

00:14:28,060 --> 00:14:33,820
package chasten be treated as an es

00:14:29,950 --> 00:14:36,250
module or you can call your individual

00:14:33,820 --> 00:14:38,530
files dot mgs and no matter what happens

00:14:36,250 --> 00:14:42,820
outside of those files they will always

00:14:38,530 --> 00:14:44,710
be treated as use modules the reason why

00:14:42,820 --> 00:14:47,020
we have those two solutions is because

00:14:44,710 --> 00:14:51,100
right now nobody knows which of those

00:14:47,020 --> 00:14:53,710
two will actually work out and it is

00:14:51,100 --> 00:14:55,540
very likely that depending on what kinds

00:14:53,710 --> 00:14:59,230
of tools somebody is using or what kind

00:14:55,540 --> 00:15:00,490
of existing code they have one of the

00:14:59,230 --> 00:15:05,880
solutions will work and the other will

00:15:00,490 --> 00:15:09,660
not or vice versa so

00:15:05,880 --> 00:15:11,820
I think the short answer is a yes we are

00:15:09,660 --> 00:15:13,650
definitely monitoring usage and try to

00:15:11,820 --> 00:15:16,580
keep a tab on what people are actually

00:15:13,650 --> 00:15:21,210
doing and what different tools support

00:15:16,580 --> 00:15:23,220
but realistically there are no no plans

00:15:21,210 --> 00:15:25,530
to get rid of one or the other and

00:15:23,220 --> 00:15:28,440
there's no I don't think that it's

00:15:25,530 --> 00:15:30,750
likely that one or the other will go

00:15:28,440 --> 00:15:33,690
away anytime soon so what will likely

00:15:30,750 --> 00:15:38,340
happen is that tools will add support

00:15:33,690 --> 00:15:41,460
for both and people will use what works

00:15:38,340 --> 00:15:44,070
for their projects and right now even

00:15:41,460 --> 00:15:45,270
though there is a handful of packages

00:15:44,070 --> 00:15:47,520
that might have tried it out

00:15:45,270 --> 00:15:49,350
we are definitely far away from any kind

00:15:47,520 --> 00:15:52,440
of significant numbers that we could

00:15:49,350 --> 00:15:54,870
look at it like if point zero zero one

00:15:52,440 --> 00:15:58,230
percent of the NPM registry downloads

00:15:54,870 --> 00:16:00,690
using one or the other and one is double

00:15:58,230 --> 00:16:02,580
the other it doesn't really mean

00:16:00,690 --> 00:16:04,500
anything right it's not statistically

00:16:02,580 --> 00:16:07,160
significant that there is a big

00:16:04,500 --> 00:16:09,120
difference if the numbers are very small

00:16:07,160 --> 00:16:10,740
but yeah I mean it will be interesting

00:16:09,120 --> 00:16:13,650
especially for documentation purposes

00:16:10,740 --> 00:16:18,330
and tutorials or care staff to see what

00:16:13,650 --> 00:16:21,920
might end up being the Prem the more

00:16:18,330 --> 00:16:21,920
prominent paddle in the ecosystem

00:16:27,730 --> 00:16:36,620
Bradlee yeah so kind of in the same vein

00:16:32,300 --> 00:16:39,320
um we we do monitor things we have

00:16:36,620 --> 00:16:44,720
different tools for crawling the NPM

00:16:39,320 --> 00:16:47,029
registry we try to get statistics but

00:16:44,720 --> 00:16:52,640
sometimes it's hard to get statistics on

00:16:47,029 --> 00:16:55,310
how things work so what we've been doing

00:16:52,640 --> 00:16:56,089
is using some source code tooling

00:16:55,310 --> 00:17:00,440
historically

00:16:56,089 --> 00:17:02,510
we've only really had MJS um as

00:17:00,440 --> 00:17:05,120
something that we've seen on the

00:17:02,510 --> 00:17:07,699
registry so we're starting to see type

00:17:05,120 --> 00:17:11,569
module stuff show up on the registry

00:17:07,699 --> 00:17:14,329
these days but there are other things to

00:17:11,569 --> 00:17:15,770
consider as well I don't think many

00:17:14,329 --> 00:17:20,589
people are going to be transitioning

00:17:15,770 --> 00:17:24,589
from the current bundler tool chains or

00:17:20,589 --> 00:17:28,250
compiling of typescript to JavaScript

00:17:24,589 --> 00:17:31,270
transpiling via babel all this and it's

00:17:28,250 --> 00:17:34,400
really going to be interesting as people

00:17:31,270 --> 00:17:39,830
migrate not just if they're going to be

00:17:34,400 --> 00:17:42,770
using MJS or type module but if they are

00:17:39,830 --> 00:17:46,370
going to move off their compiler tool

00:17:42,770 --> 00:17:48,110
chains as well so with compiler tool

00:17:46,370 --> 00:17:52,160
chains you get to an interesting

00:17:48,110 --> 00:17:54,770
scenario where what you publish may be

00:17:52,160 --> 00:17:59,390
something that's in a different format

00:17:54,770 --> 00:18:02,450
then what is actually run by node and

00:17:59,390 --> 00:18:05,660
what I mean is you may push some

00:18:02,450 --> 00:18:08,660
language up to the registry and it may

00:18:05,660 --> 00:18:11,540
be typescript but typescript could be

00:18:08,660 --> 00:18:15,020
compiled theoretically to either of

00:18:11,540 --> 00:18:18,350
these directions and so you get into a

00:18:15,020 --> 00:18:21,830
situation where we have to monitor not

00:18:18,350 --> 00:18:25,070
just which of these solutions is used

00:18:21,830 --> 00:18:29,059
but kind of what the ecosystems that

00:18:25,070 --> 00:18:31,309
generate them is so there's going to be

00:18:29,059 --> 00:18:34,429
kind of an ecosystem thing where we have

00:18:31,309 --> 00:18:36,860
to monitor not just what's out there but

00:18:34,429 --> 00:18:39,500
what people are using in their tool

00:18:36,860 --> 00:18:45,500
chains as well

00:18:39,500 --> 00:18:47,450
I'm excited about that yes it's a couple

00:18:45,500 --> 00:18:50,210
bits that that I want to add to this on

00:18:47,450 --> 00:18:51,890
the discussion is that just because

00:18:50,210 --> 00:18:54,080
there's different options that you can

00:18:51,890 --> 00:18:56,780
use such as type module doesn't mean

00:18:54,080 --> 00:18:59,539
that the value for a file extensions

00:18:56,780 --> 00:19:03,530
such as dot mjf doesn't exist

00:18:59,539 --> 00:19:07,700
independently dot MJS was come to as a

00:19:03,530 --> 00:19:10,520
way to have an unambiguous extension to

00:19:07,700 --> 00:19:12,559
reference es m and we actually have a

00:19:10,520 --> 00:19:15,169
new file extension because our team

00:19:12,559 --> 00:19:16,940
obviously loves them so much dot c j s

00:19:15,169 --> 00:19:19,400
and depending on the mode that you're

00:19:16,940 --> 00:19:21,500
using if you decide to use type module

00:19:19,400 --> 00:19:24,770
where the dot jeaious extension is now

00:19:21,500 --> 00:19:26,929
referring to an es m file how do you

00:19:24,770 --> 00:19:30,950
refer to common j s and that's where CJ

00:19:26,929 --> 00:19:33,740
s comes in you know personally I think

00:19:30,950 --> 00:19:36,770
that there's always value in in being

00:19:33,740 --> 00:19:40,010
explicit here so you know I don't see

00:19:36,770 --> 00:19:42,350
kind of either going anywhere an

00:19:40,010 --> 00:19:43,610
ecosystem support for MJS is getting

00:19:42,350 --> 00:19:45,440
better there's work that we've been

00:19:43,610 --> 00:19:49,010
ongoing work that we've been doing with

00:19:45,440 --> 00:19:51,169
the IETF to standardize it the extension

00:19:49,010 --> 00:19:53,110
is now supported in the Python mime type

00:19:51,169 --> 00:19:56,030
database

00:19:53,110 --> 00:19:57,650
you know the friction that people would

00:19:56,030 --> 00:20:04,090
have had when starting to use it a

00:19:57,650 --> 00:20:09,289
couple years ago no longer is as much of

00:20:04,090 --> 00:20:12,049
an issue now I understand that people

00:20:09,289 --> 00:20:13,909
have aesthetic concerns or personal

00:20:12,049 --> 00:20:16,250
concerns with it and we tried as much as

00:20:13,909 --> 00:20:19,250
possible in the new implementation to

00:20:16,250 --> 00:20:23,120
make it so that folks can make decisions

00:20:19,250 --> 00:20:25,789
based on what they want to have for

00:20:23,120 --> 00:20:27,919
myself you know like I still even in

00:20:25,789 --> 00:20:30,530
tight module like using dot MJS

00:20:27,919 --> 00:20:32,090
personally but you know I don't think

00:20:30,530 --> 00:20:36,049
it's a hill at this point any of us

00:20:32,090 --> 00:20:38,840
really want to die on but having the

00:20:36,049 --> 00:20:40,970
ability to be explicit about both and in

00:20:38,840 --> 00:20:42,830
a way that's supported in kind of you

00:20:40,970 --> 00:20:47,419
know all previous versions of node is

00:20:42,830 --> 00:20:48,770
something that we we did care about yeah

00:20:47,419 --> 00:20:52,130
and I would just add to that it's not

00:20:48,770 --> 00:20:53,210
either/or like you know that's kind of

00:20:52,130 --> 00:20:55,980
why we're all

00:20:53,210 --> 00:20:58,440
we're encouraging all users to add the

00:20:55,980 --> 00:21:00,240
type fields regardless of what their

00:20:58,440 --> 00:21:03,570
extension they use because you can have

00:21:00,240 --> 00:21:06,840
type module and use MJS extension in

00:21:03,570 --> 00:21:09,570
your files so that just provides two

00:21:06,840 --> 00:21:11,279
signals to tooling about what your

00:21:09,570 --> 00:21:14,720
intentions are and that you know can

00:21:11,279 --> 00:21:16,620
only be a good thing I think like in

00:21:14,720 --> 00:21:18,750
node will probably support both

00:21:16,620 --> 00:21:20,730
indefinitely and in terms of what

00:21:18,750 --> 00:21:23,279
becomes more prevalent I think it's

00:21:20,730 --> 00:21:26,009
gonna depend on how the landscape shakes

00:21:23,279 --> 00:21:28,950
out with tooling like I specifically

00:21:26,009 --> 00:21:30,480
joined the group because of the

00:21:28,950 --> 00:21:32,519
difficulty of supporting MDS for

00:21:30,480 --> 00:21:34,740
CoffeeScript in that it would have

00:21:32,519 --> 00:21:36,659
forced CoffeeScript to create its own

00:21:34,740 --> 00:21:39,330
new file extensions like dot M coffee

00:21:36,659 --> 00:21:41,580
and so on and that wouldn't mean

00:21:39,330 --> 00:21:42,990
updating hundreds of packages and around

00:21:41,580 --> 00:21:47,789
the CoffeeScript ecosystem which isn't

00:21:42,990 --> 00:21:49,169
realistic so likewise though like there

00:21:47,789 --> 00:21:51,629
are going to be tools that have trouble

00:21:49,169 --> 00:21:54,240
using the type field because they're not

00:21:51,629 --> 00:21:57,470
set up around looking for metadata in a

00:21:54,240 --> 00:21:59,730
separate file outside the file itself so

00:21:57,470 --> 00:22:00,840
these are the issues that we have I

00:21:59,730 --> 00:22:02,309
think it's going to depend on like

00:22:00,840 --> 00:22:04,620
whatever your tooling situation is

00:22:02,309 --> 00:22:06,389
whatever tools you're trying to use with

00:22:04,620 --> 00:22:08,190
your project they might have different

00:22:06,389 --> 00:22:10,980
needs in terms of what they're looking

00:22:08,190 --> 00:22:12,899
for and what they support and so from

00:22:10,980 --> 00:22:16,830
nodes perspective nodes will will want

00:22:12,899 --> 00:22:19,019
to provide you know the the broadest

00:22:16,830 --> 00:22:21,720
platform so that tools can do what they

00:22:19,019 --> 00:22:23,610
want to do and then you know users can

00:22:21,720 --> 00:22:28,310
figure it out and tools can figure it

00:22:23,610 --> 00:22:30,260
out is our hope perfect thank

00:22:28,310 --> 00:22:32,390
do so much everyone for sharing your

00:22:30,260 --> 00:22:35,690
thoughts and experiences on this I just

00:22:32,390 --> 00:22:38,320
like to remind our YouTube audience that

00:22:35,690 --> 00:22:42,260
please feel free to submit any questions

00:22:38,320 --> 00:22:44,660
this it's not usual for this group to

00:22:42,260 --> 00:22:46,460
take questions like this so it's really

00:22:44,660 --> 00:22:49,390
interesting to hear all these things and

00:22:46,460 --> 00:22:52,480
and give the concerns of the community

00:22:49,390 --> 00:22:54,770
now especially now as you mentioned that

00:22:52,480 --> 00:22:55,340
ESM isn't flat when you're using it

00:22:54,770 --> 00:22:59,320
everywhere

00:22:55,340 --> 00:23:01,130
so yeah we'd love to hear your questions

00:22:59,320 --> 00:23:07,130
to move on with the conversation

00:23:01,130 --> 00:23:08,780
actually this is super interesting this

00:23:07,130 --> 00:23:12,970
is something that just occurred to me so

00:23:08,780 --> 00:23:16,250
I just and aesthetically direct the

00:23:12,970 --> 00:23:18,620
specially directing this two miles of

00:23:16,250 --> 00:23:22,400
course each of you can chime in

00:23:18,620 --> 00:23:24,250
mazi if I'm not incorrect you're working

00:23:22,400 --> 00:23:28,520
on this you tc39

00:23:24,250 --> 00:23:34,250
proposal called module attributes which

00:23:28,520 --> 00:23:37,550
adds modular tickets to to deafness trip

00:23:34,250 --> 00:23:39,830
right and it allows people to import

00:23:37,550 --> 00:23:42,530
essentially JSON modules and HTML

00:23:39,830 --> 00:23:46,250
modules and stuff like that so I've I've

00:23:42,530 --> 00:23:50,920
been wondering what how can it correlate

00:23:46,250 --> 00:23:54,140
if it if at all with no GSM and does it

00:23:50,920 --> 00:23:58,670
have any interesting thing in store for

00:23:54,140 --> 00:24:05,450
how we approach you know this

00:23:58,670 --> 00:24:06,850
interoperability problem yeah so um bit

00:24:05,450 --> 00:24:10,280
of history here

00:24:06,850 --> 00:24:14,600
so last year I opened an issue over on

00:24:10,280 --> 00:24:18,110
the HTML spec about JSON modules so as

00:24:14,600 --> 00:24:20,270
mentioned earlier on in this

00:24:18,110 --> 00:24:23,240
conversation one of the one of the kind

00:24:20,270 --> 00:24:25,220
of driving goals of the ESM

00:24:23,240 --> 00:24:29,090
implementation and node with the current

00:24:25,220 --> 00:24:31,790
team is whether interoperability and so

00:24:29,090 --> 00:24:38,180
node historically has the ability of

00:24:31,790 --> 00:24:39,880
bringing in a whole bunch of different

00:24:38,180 --> 00:24:43,289
[Music]

00:24:39,880 --> 00:24:45,850
module types so you can require not only

00:24:43,289 --> 00:24:49,960
you know a common chance module but you

00:24:45,850 --> 00:24:56,080
can require JSON you can require doc

00:24:49,960 --> 00:24:58,120
node which are no native modules JSON is

00:24:56,080 --> 00:25:00,370
one in particular that is a really

00:24:58,120 --> 00:25:02,410
really great user experience and one of

00:25:00,370 --> 00:25:04,390
the amazing things that we've been

00:25:02,410 --> 00:25:08,320
seeing happen in the last little bit

00:25:04,390 --> 00:25:11,470
with the modules team is user experience

00:25:08,320 --> 00:25:12,909
from node affecting web standards this

00:25:11,470 --> 00:25:14,110
is what we're seeing with import Maps

00:25:12,909 --> 00:25:16,419
which is something that we can talk

00:25:14,110 --> 00:25:18,039
about later that allows bear imports in

00:25:16,419 --> 00:25:22,870
the browser so that's the ability like

00:25:18,039 --> 00:25:25,120
import low - excuse me and the

00:25:22,870 --> 00:25:28,030
environment then knows to find that a

00:25:25,120 --> 00:25:29,860
node modules folder this is kind of an

00:25:28,030 --> 00:25:32,799
invaluable user experience and and

00:25:29,860 --> 00:25:34,450
requiring JSON is one of those in the

00:25:32,799 --> 00:25:39,010
browser today if you want to take some

00:25:34,450 --> 00:25:40,929
JSON and get it into a module you need

00:25:39,010 --> 00:25:44,470
to use the fetch API you need to then

00:25:40,929 --> 00:25:46,000
fetch the resource you need to then wait

00:25:44,470 --> 00:25:49,030
to get the response then with the

00:25:46,000 --> 00:25:51,190
response you need to call dot JSON and

00:25:49,030 --> 00:25:53,950
then you get it and you've gone through

00:25:51,190 --> 00:25:57,610
two different promises and you only have

00:25:53,950 --> 00:26:02,320
the value asynchronously and you know

00:25:57,610 --> 00:26:04,390
that is less than desirable there is if

00:26:02,320 --> 00:26:06,309
you're fetching something that's based

00:26:04,390 --> 00:26:09,580
on like the route then you also need to

00:26:06,309 --> 00:26:10,900
use import meta to get the URL a there's

00:26:09,580 --> 00:26:15,330
a lot of steps that you need to go

00:26:10,900 --> 00:26:18,760
through as compared to import thing JSON

00:26:15,330 --> 00:26:21,159
so the feature was requested in the HTML

00:26:18,760 --> 00:26:24,340
spec they got specified it landed in the

00:26:21,159 --> 00:26:28,390
HTML spec and then a tea pack which is

00:26:24,340 --> 00:26:32,140
the conference for the w3c a number of

00:26:28,390 --> 00:26:34,950
browser vendors implementers noted some

00:26:32,140 --> 00:26:37,960
security concerns with this model

00:26:34,950 --> 00:26:42,730
specifically that if you imported thing

00:26:37,960 --> 00:26:44,650
dot JSON and a server or man in the

00:26:42,730 --> 00:26:47,320
middle to that server sent you back a

00:26:44,650 --> 00:26:50,590
response that was JavaScript with the

00:26:47,320 --> 00:26:52,930
mime type text/javascript that with the

00:26:50,590 --> 00:26:54,610
specification that we had done that

00:26:52,930 --> 00:26:58,330
that module would have just executed

00:26:54,610 --> 00:27:00,820
which is not what the expectation of the

00:26:58,330 --> 00:27:02,890
developer who imported the JSON wanted

00:27:00,820 --> 00:27:05,230
to have happen and this was identified

00:27:02,890 --> 00:27:09,600
specifically as a very strong security

00:27:05,230 --> 00:27:13,360
concern JSON modules in turn then were

00:27:09,600 --> 00:27:15,880
reverted from the HTML spec and the

00:27:13,360 --> 00:27:17,230
challenge was put to kind of the authors

00:27:15,880 --> 00:27:20,080
of that spec than those who are

00:27:17,230 --> 00:27:25,450
interested in seeing JSON modules and

00:27:20,080 --> 00:27:27,090
other module types to come up with a way

00:27:25,450 --> 00:27:29,380
of averting the security concern

00:27:27,090 --> 00:27:30,640
another thing with JSON modules in the

00:27:29,380 --> 00:27:32,560
reason it was pushed for is because

00:27:30,640 --> 00:27:34,930
there's a number of other module types

00:27:32,560 --> 00:27:38,410
that we'd love to see be able to be

00:27:34,930 --> 00:27:42,550
imported including CSS modules HTML

00:27:38,410 --> 00:27:44,620
modules web assembly modules and JSON

00:27:42,550 --> 00:27:47,500
modules were identified as a module type

00:27:44,620 --> 00:27:50,320
where the behavior was not very

00:27:47,500 --> 00:27:52,300
controversial so you know we could focus

00:27:50,320 --> 00:27:54,130
more on implementation details to figure

00:27:52,300 --> 00:27:56,890
out what like blockers would be for all

00:27:54,130 --> 00:28:01,450
these various module sites this security

00:27:56,890 --> 00:28:03,580
concern being one of them so the module

00:28:01,450 --> 00:28:07,810
attributes proposal which is currently

00:28:03,580 --> 00:28:10,450
stage one at TC 39 is one attempt to

00:28:07,810 --> 00:28:12,070
solve this it is a stage one proposal

00:28:10,450 --> 00:28:15,220
which means that the committee has

00:28:12,070 --> 00:28:17,410
agreed to exploring the problem space

00:28:15,220 --> 00:28:19,360
but has not agreed on the shape of the

00:28:17,410 --> 00:28:22,480
solution nor has agreed that this

00:28:19,360 --> 00:28:25,090
necessarily will land in the specs so

00:28:22,480 --> 00:28:27,940
this is still very much you know up in

00:28:25,090 --> 00:28:30,160
the air the module attributes proposal

00:28:27,940 --> 00:28:33,460
will allow you when importing a module

00:28:30,160 --> 00:28:36,790
to give additional metadata to what the

00:28:33,460 --> 00:28:40,600
module is so exact what that metadata

00:28:36,790 --> 00:28:43,810
exactly is and how it syntactically

00:28:40,600 --> 00:28:47,730
works has not been agreed upon one type

00:28:43,810 --> 00:28:52,570
syntax it'd be like import think JSON as

00:28:47,730 --> 00:28:54,670
JSON would be one potential syntax so an

00:28:52,570 --> 00:28:56,980
extra actually you have the end to let

00:28:54,670 --> 00:28:58,960
the environment know what type of module

00:28:56,980 --> 00:29:04,090
it is this would be considered in banned

00:28:58,960 --> 00:29:07,770
metadata to support you know some sort

00:29:04,090 --> 00:29:07,770
of enhanced validation

00:29:07,790 --> 00:29:13,130
[Music]

00:29:09,850 --> 00:29:16,010
and then you know inventors that would

00:29:13,130 --> 00:29:17,540
be node or chrome or environments that

00:29:16,010 --> 00:29:20,780
embed the JavaScript language would be

00:29:17,540 --> 00:29:23,320
able to pick any number of potential

00:29:20,780 --> 00:29:26,860
attributes that they may want to see

00:29:23,320 --> 00:29:29,270
verified or extra data that the module

00:29:26,860 --> 00:29:32,330
this is still one of the things that's

00:29:29,270 --> 00:29:35,240
being debated by the group now how this

00:29:32,330 --> 00:29:37,600
affects nodes ESM implementation is with

00:29:35,240 --> 00:29:40,910
our hope to have with interoperability

00:29:37,600 --> 00:29:43,700
we do not support by default importing

00:29:40,910 --> 00:29:46,309
JSON you need to actually give a flag

00:29:43,700 --> 00:29:47,600
for experimental JSON modules and the

00:29:46,309 --> 00:29:50,179
implementation that we have under

00:29:47,600 --> 00:29:55,790
experimental JSON modules is based on

00:29:50,179 --> 00:29:58,309
the now reverted HTML spec that had

00:29:55,790 --> 00:30:00,080
those security concerns now where this

00:29:58,309 --> 00:30:02,360
becomes interesting for node and I'm

00:30:00,080 --> 00:30:05,210
sure Brad who has their hand up could

00:30:02,360 --> 00:30:08,540
add to this would be that you know the

00:30:05,210 --> 00:30:10,730
concerns that we have right now security

00:30:08,540 --> 00:30:14,000
wise for the web platform doesn't

00:30:10,730 --> 00:30:15,679
necessarily apply to node and this is

00:30:14,000 --> 00:30:18,290
one of the ongoing challenges that we

00:30:15,679 --> 00:30:21,380
have in our module system which is like

00:30:18,290 --> 00:30:23,840
what user experience concerns or

00:30:21,380 --> 00:30:26,480
limitations should we have on the

00:30:23,840 --> 00:30:29,570
implementation in note that our browser

00:30:26,480 --> 00:30:31,460
specific concerns to better support

00:30:29,570 --> 00:30:33,440
interoperability between the

00:30:31,460 --> 00:30:38,090
environments on the flip side you know

00:30:33,440 --> 00:30:40,790
what concerns and changes should the

00:30:38,090 --> 00:30:42,710
browser side make you know because of

00:30:40,790 --> 00:30:45,340
server side concerns and we're always

00:30:42,710 --> 00:30:47,870
kind of blocking that line of

00:30:45,340 --> 00:30:50,540
interoperability and user experience and

00:30:47,870 --> 00:30:53,090
trying to find a balance at least for

00:30:50,540 --> 00:30:55,250
myself selfishly I would love to see the

00:30:53,090 --> 00:30:57,770
two environments as much as possible be

00:30:55,250 --> 00:31:00,040
interoperable and I am personally

00:30:57,770 --> 00:31:03,559
willing for to see a little bit of

00:31:00,040 --> 00:31:05,929
developer experience concessions in the

00:31:03,559 --> 00:31:07,760
name of interoperability but I know that

00:31:05,929 --> 00:31:11,390
we do not have complete consensus within

00:31:07,760 --> 00:31:14,530
the modules team around this Brad is

00:31:11,390 --> 00:31:14,530
there anything you'd like to add to that

00:31:14,710 --> 00:31:19,429
yeah

00:31:16,370 --> 00:31:23,109
[Laughter]

00:31:19,429 --> 00:31:27,070
but there's just a few key things here

00:31:23,109 --> 00:31:29,149
one is when we're talking about these

00:31:27,070 --> 00:31:31,309
security concerns

00:31:29,149 --> 00:31:33,710
we're not specifically talking about

00:31:31,309 --> 00:31:36,440
loading JavaScript being the only

00:31:33,710 --> 00:31:40,849
concern we're talking about executing

00:31:36,440 --> 00:31:44,479
code being a concern here so the way

00:31:40,849 --> 00:31:47,749
that es modules were specified they were

00:31:44,479 --> 00:31:51,649
never meant to only load JavaScript

00:31:47,749 --> 00:31:55,399
which is interesting way back in 2015

00:31:51,649 --> 00:31:57,409
when it landed every kind of es module

00:31:55,399 --> 00:32:02,239
actually inherits from an abstract

00:31:57,409 --> 00:32:04,460
module record these abstract module

00:32:02,239 --> 00:32:06,499
records were designed in a way so that

00:32:04,460 --> 00:32:07,669
it could support any number of languages

00:32:06,499 --> 00:32:12,759
and we're starting to see other

00:32:07,669 --> 00:32:16,389
languages uses so things like Wazza

00:32:12,759 --> 00:32:22,119
could potentially also have the same

00:32:16,389 --> 00:32:30,109
concern here where if a person returns a

00:32:22,119 --> 00:32:34,399
web assembly and that type is able to

00:32:30,109 --> 00:32:36,109
execute code when it is returned to the

00:32:34,399 --> 00:32:39,609
browser it would be the same kind of

00:32:36,109 --> 00:32:42,320
man-in-the-middle issue going on here so

00:32:39,609 --> 00:32:45,169
like miles was talking about these are

00:32:42,320 --> 00:32:49,219
gonna be things where it's kind of

00:32:45,169 --> 00:32:54,320
consensus with two conflicting points of

00:32:49,219 --> 00:32:56,379
view going on one thing to note here is

00:32:54,320 --> 00:33:00,769
although we've been talking about the

00:32:56,379 --> 00:33:03,019
potential for checking the type of a

00:33:00,769 --> 00:33:05,869
dependency that's not the only thing

00:33:03,019 --> 00:33:09,169
that the module attributes proposal is

00:33:05,869 --> 00:33:12,619
really able to do so there's a variety

00:33:09,169 --> 00:33:15,619
of other constraints that exist things

00:33:12,619 --> 00:33:19,609
like in the service worker world for the

00:33:15,619 --> 00:33:21,529
browser they're considering preventing

00:33:19,609 --> 00:33:23,989
people from using top level of weight

00:33:21,529 --> 00:33:25,879
when you first load a Service Worker

00:33:23,989 --> 00:33:31,009
because it's a problem for the browser

00:33:25,879 --> 00:33:33,050
there as well so you could see more

00:33:31,009 --> 00:33:35,360
attributes show up

00:33:33,050 --> 00:33:37,490
they do things like prevent top-level

00:33:35,360 --> 00:33:41,030
await from being used inside of a

00:33:37,490 --> 00:33:43,520
dependency there are different tools

00:33:41,030 --> 00:33:46,430
that are looking at how they could use

00:33:43,520 --> 00:33:48,320
things like Babel is looking at how they

00:33:46,430 --> 00:33:53,930
could use it for different kinds of

00:33:48,320 --> 00:33:56,690
transforms of dependencies excuse me

00:33:53,930 --> 00:34:01,240
basically what we've got here is a very

00:33:56,690 --> 00:34:04,370
generic proposal that isn't purely about

00:34:01,240 --> 00:34:07,820
any sort of conflict between the browser

00:34:04,370 --> 00:34:11,600
node but about how we can use all this

00:34:07,820 --> 00:34:13,429
metadata in different ways we've been

00:34:11,600 --> 00:34:16,790
talking about the module attributes

00:34:13,429 --> 00:34:19,399
proposal in tc39 as an end band way of

00:34:16,790 --> 00:34:22,250
doing all this there has also been some

00:34:19,399 --> 00:34:24,830
discussion of doing it out of band so

00:34:22,250 --> 00:34:28,850
their ups and downs of doing it either

00:34:24,830 --> 00:34:30,919
way maybe we'll do it both ways where

00:34:28,850 --> 00:34:33,140
you could have both in band and out of

00:34:30,919 --> 00:34:36,860
band metadata associated with your

00:34:33,140 --> 00:34:41,060
imports but right now it's a stage one

00:34:36,860 --> 00:34:44,750
proposal be prepared for very massive

00:34:41,060 --> 00:34:47,200
changes they may happen and that's it

00:34:44,750 --> 00:34:47,200
for me

00:34:50,020 --> 00:34:57,070
not sure who was forced miles in myself

00:34:52,500 --> 00:34:59,500
it was you alright so we'll quickly yeah

00:34:57,070 --> 00:35:02,619
why don't you

00:34:59,500 --> 00:35:06,310
also thinks yeah what I was quickly

00:35:02,619 --> 00:35:08,530
gonna say is when I'm always a little

00:35:06,310 --> 00:35:12,520
bit uncomfortable with is phrasing it as

00:35:08,530 --> 00:35:14,260
a conflict between browser and node in

00:35:12,520 --> 00:35:16,150
some cases this in some cases it

00:35:14,260 --> 00:35:17,680
generally is something it only applies

00:35:16,150 --> 00:35:19,510
to the browser and something at only

00:35:17,680 --> 00:35:21,910
applies to node and that he needs to be

00:35:19,510 --> 00:35:27,030
sub made some kind of trade-off but for

00:35:21,910 --> 00:35:30,640
example the browser idea of hey if you

00:35:27,030 --> 00:35:32,200
load a file from a remote URL and you

00:35:30,640 --> 00:35:35,319
expect it to be Jason but then it

00:35:32,200 --> 00:35:36,670
suddenly executes code could also apply

00:35:35,319 --> 00:35:39,099
to a future version of node that

00:35:36,670 --> 00:35:41,020
supports HTTP URLs so it's not

00:35:39,099 --> 00:35:44,950
necessarily a browser concern it's more

00:35:41,020 --> 00:35:47,940
a any kind of engine that fetches from a

00:35:44,950 --> 00:35:52,500
potentially untrusted third party

00:35:47,940 --> 00:35:56,619
concern and so and at the same time

00:35:52,500 --> 00:36:00,849
concerns around polyfill ability like

00:35:56,619 --> 00:36:03,819
the ability to support browsers that

00:36:00,849 --> 00:36:06,760
don't support what have not support

00:36:03,819 --> 00:36:08,230
added yet for new module types is

00:36:06,760 --> 00:36:11,890
something it applies through the browser

00:36:08,230 --> 00:36:13,720
and get also to some degree then applies

00:36:11,890 --> 00:36:17,170
to note that quotes are bought if you

00:36:13,720 --> 00:36:19,630
have an attribute as CSS you load that

00:36:17,170 --> 00:36:22,510
module in a browser doesn't have support

00:36:19,630 --> 00:36:25,540
for CSS modules yet the server cannot

00:36:22,510 --> 00:36:27,780
provide a polyfill as a JavaScript

00:36:25,540 --> 00:36:30,609
module because it would be rejected by

00:36:27,780 --> 00:36:32,470
another browser potentially or rather

00:36:30,609 --> 00:36:35,319
because most likely the browser's are

00:36:32,470 --> 00:36:40,990
not supporting s CSS which is completely

00:36:35,319 --> 00:36:43,000
reject the whole thing so I think that

00:36:40,990 --> 00:36:44,560
some of these concerns are more about

00:36:43,000 --> 00:36:47,050
capabilities of the engines and not

00:36:44,560 --> 00:36:48,670
necessarily the engines themselves being

00:36:47,050 --> 00:36:50,079
fundamentally at odds in what their

00:36:48,670 --> 00:36:53,530
goals are I think the goals of the

00:36:50,079 --> 00:36:56,790
browser and node much more aligned and

00:36:53,530 --> 00:36:56,790
many people do it fair for

00:36:59,570 --> 00:37:05,700
yeah I guess like a couple things I just

00:37:03,390 --> 00:37:09,300
want to add to that really quickly I'm

00:37:05,700 --> 00:37:11,460
gonna hand it back to Brad one of the

00:37:09,300 --> 00:37:13,380
concerns that is being discussed by the

00:37:11,460 --> 00:37:16,530
champion group working on the attributes

00:37:13,380 --> 00:37:19,410
proposal is about how much flexibility

00:37:16,530 --> 00:37:21,390
there should be in the proposal which I

00:37:19,410 --> 00:37:24,660
know even members on this call don't

00:37:21,390 --> 00:37:26,640
totally agree on yet but you know

00:37:24,660 --> 00:37:28,640
whether or not it's a single attribute

00:37:26,640 --> 00:37:30,780
to solve just this case of

00:37:28,640 --> 00:37:33,119
identification of the type of module

00:37:30,780 --> 00:37:35,490
versus like n number of infinite

00:37:33,119 --> 00:37:38,849
properties is a point of contention

00:37:35,490 --> 00:37:40,460
because this is a place where there

00:37:38,849 --> 00:37:43,290
could be massive divergence between

00:37:40,460 --> 00:37:46,320
environments so a great example of this

00:37:43,290 --> 00:37:48,690
is like sub resource integrity so sub

00:37:46,320 --> 00:37:52,109
resource integrity from for a module you

00:37:48,690 --> 00:37:54,359
can supply like an md5 or a shot to five

00:37:52,109 --> 00:37:56,970
of six of the source that you're

00:37:54,359 --> 00:37:59,730
importing and on the surface this would

00:37:56,970 --> 00:38:02,340
seem like a really great thing to be

00:37:59,730 --> 00:38:04,560
able to provide in line if you're

00:38:02,340 --> 00:38:05,940
importing especially you know like if

00:38:04,560 --> 00:38:08,510
you're on brow and a browser and

00:38:05,940 --> 00:38:11,369
importing a resource over the network

00:38:08,510 --> 00:38:14,220
now one of the challenges though there

00:38:11,369 --> 00:38:15,510
would be this isn't super scalable if

00:38:14,220 --> 00:38:17,940
you have a large graph and you're

00:38:15,510 --> 00:38:20,099
including resource integrity for every

00:38:17,940 --> 00:38:24,359
single module inside of your graph and

00:38:20,099 --> 00:38:27,180
then you have a single cycle you can't

00:38:24,359 --> 00:38:28,920
really resolve including inline subbers

00:38:27,180 --> 00:38:33,060
resource integrity with cycles and

00:38:28,920 --> 00:38:34,800
graphs you just it's not possible then

00:38:33,060 --> 00:38:36,900
further like the second that one thing

00:38:34,800 --> 00:38:39,510
in your graph changes that propagates

00:38:36,900 --> 00:38:41,369
through the whole graph so you know

00:38:39,510 --> 00:38:44,400
including sub resource integrity is

00:38:41,369 --> 00:38:46,680
something that had been discussed at the

00:38:44,400 --> 00:38:49,589
committee and you know chrome was not

00:38:46,680 --> 00:38:53,609
very in favor of it now we could see a

00:38:49,589 --> 00:38:55,800
world where one JavaScript runtime and

00:38:53,609 --> 00:38:57,660
this doesn't even mean a browser this

00:38:55,800 --> 00:39:00,450
could be denno this could be node this

00:38:57,660 --> 00:39:02,250
could be a new runtime decides to

00:39:00,450 --> 00:39:04,400
introduce a new attribute for sub

00:39:02,250 --> 00:39:08,010
resource integrity

00:39:04,400 --> 00:39:10,200
now what do other environments do do

00:39:08,010 --> 00:39:12,190
they throw on sub resource integrity

00:39:10,200 --> 00:39:15,130
existing if it's not an attribute

00:39:12,190 --> 00:39:16,869
that they support do they even need to

00:39:15,130 --> 00:39:18,789
know that it exists if people start

00:39:16,869 --> 00:39:21,849
publishing code that has sub resource

00:39:18,789 --> 00:39:24,730
integrity in line there you would expect

00:39:21,849 --> 00:39:26,079
that it's validated to some extent you

00:39:24,730 --> 00:39:28,119
don't want the code just running and

00:39:26,079 --> 00:39:31,030
ignoring it and so this creates like a

00:39:28,119 --> 00:39:33,390
just one example of a really weird

00:39:31,030 --> 00:39:37,839
mismatch that could exist between

00:39:33,390 --> 00:39:39,819
different environments so to myself this

00:39:37,839 --> 00:39:42,460
this is a concern that I have with the

00:39:39,819 --> 00:39:46,390
attributes proposal specifically that

00:39:42,460 --> 00:39:48,880
things could become inconsistent between

00:39:46,390 --> 00:39:53,099
environments and being consistent in a

00:39:48,880 --> 00:39:56,530
way that can either be wrong or at worst

00:39:53,099 --> 00:39:58,150
problematic don't have an answer to that

00:39:56,530 --> 00:40:00,730
don't know if this is even a concern

00:39:58,150 --> 00:40:02,020
that's large enough to stop that from

00:40:00,730 --> 00:40:04,750
happening

00:40:02,020 --> 00:40:07,559
but it is something that I think various

00:40:04,750 --> 00:40:12,339
and better is such as you know Chrome or

00:40:07,559 --> 00:40:14,289
WebKit or node need to actively be

00:40:12,339 --> 00:40:16,869
thinking about how coordination around

00:40:14,289 --> 00:40:18,039
these attributes would work if we kind

00:40:16,869 --> 00:40:21,039
of want to make attributes this

00:40:18,039 --> 00:40:26,400
infinitely extensible thing Brad you've

00:40:21,039 --> 00:40:30,010
got your hand up yeah so this is like

00:40:26,400 --> 00:40:32,950
step back - yawns point a little bit so

00:40:30,010 --> 00:40:34,660
we have actually discussed in case

00:40:32,950 --> 00:40:40,480
people are wondering what it would take

00:40:34,660 --> 00:40:43,420
to load HTTPS in node I think that leads

00:40:40,480 --> 00:40:46,839
into a another question but I just want

00:40:43,420 --> 00:40:49,240
to like try to table all the security

00:40:46,839 --> 00:40:52,119
discussion about doing so there are a

00:40:49,240 --> 00:40:55,180
few documents if people want to dig them

00:40:52,119 --> 00:40:59,079
up about security models for remote code

00:40:55,180 --> 00:41:00,640
loading for node but maybe that's better

00:40:59,079 --> 00:41:04,750
on a different call because that'll eat

00:41:00,640 --> 00:41:06,520
up a lot of our time so yeah thank you

00:41:04,750 --> 00:41:08,770
very so much for being considerate of

00:41:06,520 --> 00:41:11,859
our time Jeffrey

00:41:08,770 --> 00:41:13,619
you wanted to yeah just I was gonna

00:41:11,859 --> 00:41:19,240
comment on that other question about

00:41:13,619 --> 00:41:25,299
loading from HTTP URLs just a few days

00:41:19,240 --> 00:41:26,030
ago we landed a PR for support for the

00:41:25,299 --> 00:41:28,400
loaders

00:41:26,030 --> 00:41:30,140
in yes module which are still very much

00:41:28,400 --> 00:41:32,390
a work in progress and experimental and

00:41:30,140 --> 00:41:33,710
will changed significantly between where

00:41:32,390 --> 00:41:36,950
they are now and when they eventually

00:41:33,710 --> 00:41:39,020
get unflagging but one of the examples

00:41:36,950 --> 00:41:41,510
that we were playing with and that we

00:41:39,020 --> 00:41:44,570
put in the docs is a loader that just

00:41:41,510 --> 00:41:49,700
enables this of loading a module from an

00:41:44,570 --> 00:41:50,660
HCP URL and you know I wrote the docs

00:41:49,700 --> 00:41:52,820
for this and one of the things I wrote

00:41:50,660 --> 00:41:54,410
it was like well you know keeping you

00:41:52,820 --> 00:41:57,320
know there's a reason that this doesn't

00:41:54,410 --> 00:41:59,570
exist in node yet like I consider you

00:41:57,320 --> 00:42:01,310
know you have to figure out caching good

00:41:59,570 --> 00:42:05,540
figure out security and you know there's

00:42:01,310 --> 00:42:07,940
a lot of difficult pieces to to work out

00:42:05,540 --> 00:42:09,410
to like do this properly and do this in

00:42:07,940 --> 00:42:13,580
production like if node were to support

00:42:09,410 --> 00:42:17,240
it as a feature so yeah it's it's

00:42:13,580 --> 00:42:20,060
something that you know is doable

00:42:17,240 --> 00:42:22,970
through like custom user code at this

00:42:20,060 --> 00:42:24,440
point but it'll be a significant effort

00:42:22,970 --> 00:42:27,260
to make that like something in node

00:42:24,440 --> 00:42:29,900
proper and you can just see what's kind

00:42:27,260 --> 00:42:32,570
of involved that was it's one of the

00:42:29,900 --> 00:42:34,550
core features of denial and you can see

00:42:32,570 --> 00:42:37,190
how much work they put into it with with

00:42:34,550 --> 00:42:39,610
caching and resource integrity and all

00:42:37,190 --> 00:42:39,610
that kind of stuff

00:42:40,970 --> 00:42:49,430
yeah thank you very much and thanks

00:42:45,210 --> 00:42:52,920
everybody else also for this amazing

00:42:49,430 --> 00:42:55,849
discussion the only unfortunate problem

00:42:52,920 --> 00:42:57,450
is that you all used all the wrong words

00:42:55,849 --> 00:43:00,510
on tape

00:42:57,450 --> 00:43:01,950
and you talked about Dino insecurities

00:43:00,510 --> 00:43:04,380
and integrity and everything

00:43:01,950 --> 00:43:06,300
so moving on are there any plans for

00:43:04,380 --> 00:43:10,890
loading a module from a fully qualified

00:43:06,300 --> 00:43:15,330
URL as dean orders or as ESM does for

00:43:10,890 --> 00:43:19,010
example and adding on to that my own you

00:43:15,330 --> 00:43:25,200
know the second part is that now that

00:43:19,010 --> 00:43:30,810
Dino also supports so do you think the

00:43:25,200 --> 00:43:34,619
future for URL modules from URL as well

00:43:30,810 --> 00:43:36,680
as import Maps inside of no chest

00:43:34,619 --> 00:43:36,680
you

00:43:39,540 --> 00:43:48,850
okay yeah sorry yeah I mean the the the

00:43:46,690 --> 00:43:51,970
quick cop-out answer to the question as

00:43:48,850 --> 00:43:54,760
phrased is you can load from a fully

00:43:51,970 --> 00:43:59,500
qualified URL today it just happens to

00:43:54,760 --> 00:44:01,720
be a file here well file protocol URL so

00:43:59,500 --> 00:44:05,230
we definitely set up the whole module

00:44:01,720 --> 00:44:08,020
system in a way that it is based on your

00:44:05,230 --> 00:44:11,170
Al's and for people who are we're

00:44:08,020 --> 00:44:15,370
conscious is definitely not based on

00:44:11,170 --> 00:44:17,770
your else conscious is based on five

00:44:15,370 --> 00:44:20,280
pounds and platform-specific file paths

00:44:17,770 --> 00:44:22,690
and file names that can contain

00:44:20,280 --> 00:44:28,300
characters that make it look like URL

00:44:22,690 --> 00:44:30,840
even though it is a 5s so context was

00:44:28,300 --> 00:44:34,360
never designed to support an extension

00:44:30,840 --> 00:44:38,530
to note other kinds of urls other than

00:44:34,360 --> 00:44:40,960
files modules very explicitly is

00:44:38,530 --> 00:44:43,270
designed to support loading all kinds of

00:44:40,960 --> 00:44:44,830
urls so for example one thing at bradley

00:44:43,270 --> 00:44:48,250
implement in the past was slowly from

00:44:44,830 --> 00:44:50,080
data URLs you can actually import so if

00:44:48,250 --> 00:44:52,240
you need a flag or not but you can

00:44:50,080 --> 00:44:58,380
generally import from a data URL you can

00:44:52,240 --> 00:45:00,850
use data URL import that and it works so

00:44:58,380 --> 00:45:06,750
regretting it just confirms no flag

00:45:00,850 --> 00:45:11,890
needed for the data URLs anymore so we

00:45:06,750 --> 00:45:13,900
generally want it to enable other kinds

00:45:11,890 --> 00:45:16,870
of protocols for example HTTP in the

00:45:13,900 --> 00:45:20,200
future so the reason that it's not done

00:45:16,870 --> 00:45:25,920
yet is that as Brad he kind of hinted at

00:45:20,200 --> 00:45:25,920
the exact details of what it would do

00:45:26,730 --> 00:45:34,570
definitely uncertain just because nobody

00:45:32,680 --> 00:45:37,060
really knows what it could mean for node

00:45:34,570 --> 00:45:39,760
two out of the box allowing you to load

00:45:37,060 --> 00:45:43,120
code from random HTTP URLs and

00:45:39,760 --> 00:45:45,780
immediately execute it especially things

00:45:43,120 --> 00:45:50,020
like the Namek import make it

00:45:45,780 --> 00:45:51,090
interesting what happens in those cases

00:45:50,020 --> 00:45:55,470
because it's

00:45:51,090 --> 00:45:58,170
no never used to do and so people are

00:45:55,470 --> 00:46:02,880
rightfully curious what it would mean

00:45:58,170 --> 00:46:05,610
for node and but yeah generally speaking

00:46:02,880 --> 00:46:07,980
it's not ruled out that it might become

00:46:05,610 --> 00:46:11,520
a built-in capability at the future as

00:46:07,980 --> 00:46:14,930
far as I know at least and as Jeff drop

00:46:11,520 --> 00:46:18,390
really kind of hinted at it's definitely

00:46:14,930 --> 00:46:21,230
at least in the latest static status of

00:46:18,390 --> 00:46:25,050
the master branch something that can be

00:46:21,230 --> 00:46:27,260
done relatively easily using a user net

00:46:25,050 --> 00:46:27,260
loader

00:46:30,850 --> 00:46:40,990
yeah I just wanted to kind of second

00:46:33,940 --> 00:46:44,800
that so um like beyond was saying the

00:46:40,990 --> 00:46:48,190
new ESM based system for loading modules

00:46:44,800 --> 00:46:51,160
actually is fairly different under the

00:46:48,190 --> 00:46:55,990
hood and how its storing modules

00:46:51,160 --> 00:46:58,570
it is not reusing some of the features

00:46:55,990 --> 00:47:01,240
that people have historically seen like

00:46:58,570 --> 00:47:06,450
using required cache it actually has an

00:47:01,240 --> 00:47:14,230
entirely different store based upon the

00:47:06,450 --> 00:47:17,950
URL that a module is located at so there

00:47:14,230 --> 00:47:22,210
is in some way the ability for you to

00:47:17,950 --> 00:47:25,600
kind of fudge things with require doc

00:47:22,210 --> 00:47:31,260
cache right now in ways you can't for

00:47:25,600 --> 00:47:34,990
modules so what we're working on really

00:47:31,260 --> 00:47:37,750
recently is making new pr's adding

00:47:34,990 --> 00:47:40,420
features to these experimental loaders

00:47:37,750 --> 00:47:43,060
in order to get their usability and

00:47:40,420 --> 00:47:46,600
feature set up to the point where we are

00:47:43,060 --> 00:47:48,790
comfortable moving forward with them I

00:47:46,600 --> 00:47:52,620
think that's gonna be probably our

00:47:48,790 --> 00:47:56,670
priority over trying to make a massive

00:47:52,620 --> 00:48:02,770
push to get all the security aspects

00:47:56,670 --> 00:48:05,880
considered for loading HTTPS so we've

00:48:02,770 --> 00:48:13,690
had some discussions in the past about

00:48:05,880 --> 00:48:17,560
loading different HTTP or HTTPS modules

00:48:13,690 --> 00:48:19,330
off the network there's been a few

00:48:17,560 --> 00:48:22,660
things in the security working group a

00:48:19,330 --> 00:48:26,050
few documents about this but really the

00:48:22,660 --> 00:48:29,260
sense I've gotten from every discussion

00:48:26,050 --> 00:48:32,380
there is they would need to use some

00:48:29,260 --> 00:48:36,120
sort of policy feature in order to lock

00:48:32,380 --> 00:48:39,280
them down for you to use them by default

00:48:36,120 --> 00:48:40,630
people are very concerned with loading

00:48:39,280 --> 00:48:44,890
things off the network

00:48:40,630 --> 00:48:45,270
if you cannot verify what you're going

00:48:44,890 --> 00:48:49,440
to be

00:48:45,270 --> 00:48:51,090
od this is kind of in the same vein is

00:48:49,440 --> 00:48:54,300
what we were talking about with module

00:48:51,090 --> 00:48:56,370
attributes where if you load something

00:48:54,300 --> 00:48:59,280
off the network and it does something

00:48:56,370 --> 00:49:01,530
different from what you expect that can

00:48:59,280 --> 00:49:05,640
be problematic in particular this is

00:49:01,530 --> 00:49:10,140
really a concern for node node has a

00:49:05,640 --> 00:49:12,780
different architecture than Dino so node

00:49:10,140 --> 00:49:16,890
actually runs in a single process Dino

00:49:12,780 --> 00:49:21,630
does not so isolation is a big concern

00:49:16,890 --> 00:49:24,390
for node also the ability to load C++

00:49:21,630 --> 00:49:28,230
modules is something you can do a node

00:49:24,390 --> 00:49:30,870
as well as you know executing shell

00:49:28,230 --> 00:49:35,370
commands so we have to figure out how

00:49:30,870 --> 00:49:37,770
we're going to kind of make a story for

00:49:35,370 --> 00:49:41,850
how you can lock that down before we can

00:49:37,770 --> 00:49:48,600
really go into discussion about landing

00:49:41,850 --> 00:49:50,460
loading HTTP in core that said it's

00:49:48,600 --> 00:49:53,220
something I definitely would like to see

00:49:50,460 --> 00:49:57,180
in the future but it probably would

00:49:53,220 --> 00:49:58,830
require a bunch of extra steps for it to

00:49:57,180 --> 00:50:01,500
be enabled and it probably wouldn't be

00:49:58,830 --> 00:50:03,360
enabled for every URL you'd probably

00:50:01,500 --> 00:50:08,160
have to whitelist things from the

00:50:03,360 --> 00:50:10,590
discussions I've had so far that's

00:50:08,160 --> 00:50:14,130
yeah one small thing I'd love to add to

00:50:10,590 --> 00:50:17,940
this and I think it's you know a great

00:50:14,130 --> 00:50:20,430
example of why interoperability can help

00:50:17,940 --> 00:50:21,750
us in ways that are unexpected you know

00:50:20,430 --> 00:50:26,880
moving forward with the module

00:50:21,750 --> 00:50:29,250
attributes proposal and if node adopts

00:50:26,880 --> 00:50:32,700
it independent of whether or not no

00:50:29,250 --> 00:50:36,570
today you know me needs all the benefits

00:50:32,700 --> 00:50:40,500
that come from it you know standardizing

00:50:36,570 --> 00:50:43,830
around and implementing kind of these

00:50:40,500 --> 00:50:45,540
core features that think about all the

00:50:43,830 --> 00:50:49,260
use cases for all the different embedder

00:50:45,540 --> 00:50:51,210
x' leaves that design space open for us

00:50:49,260 --> 00:50:53,970
so something like module attributes for

00:50:51,210 --> 00:50:57,870
JSON modules as opposed to just landing

00:50:53,970 --> 00:51:00,060
JSON modules means that if you know node

00:50:57,870 --> 00:51:03,270
follows suit and this gets standardized

00:51:00,060 --> 00:51:05,250
that if we do eventually introduce HTTP

00:51:03,270 --> 00:51:08,340
or the ability to fetch resources over

00:51:05,250 --> 00:51:10,380
the network we've kind of built in some

00:51:08,340 --> 00:51:12,870
of that security model by it by adopting

00:51:10,380 --> 00:51:15,750
these features I think this is just a

00:51:12,870 --> 00:51:17,220
good thing to keep in mind when we're

00:51:15,750 --> 00:51:20,040
thinking about like hey you know does

00:51:17,220 --> 00:51:22,320
this or does this not benefit node it

00:51:20,040 --> 00:51:24,720
can you know future proof for some

00:51:22,320 --> 00:51:27,300
design space now whether or not it's

00:51:24,720 --> 00:51:29,130
always you know worthwhile to think

00:51:27,300 --> 00:51:30,750
about things that way is up in the air

00:51:29,130 --> 00:51:35,070
but it's just you know it can be a

00:51:30,750 --> 00:51:38,370
benefit Brad yeah just to clarify we're

00:51:35,070 --> 00:51:40,950
not talking about node and web browsers

00:51:38,370 --> 00:51:42,980
sharing the same security model because

00:51:40,950 --> 00:51:45,360
we pretty much know we can't do that

00:51:42,980 --> 00:51:49,020
we're talking about reusing the same

00:51:45,360 --> 00:51:51,210
infrastructure potentially the same kind

00:51:49,020 --> 00:51:54,900
of feature set to give that

00:51:51,210 --> 00:51:56,640
configuration the node may want or the

00:51:54,900 --> 00:52:00,390
browser's may want in different

00:51:56,640 --> 00:52:04,550
scenarios so yeah I totally agree we

00:52:00,390 --> 00:52:07,650
could come up with something that said

00:52:04,550 --> 00:52:10,470
module attributes a stage one let's not

00:52:07,650 --> 00:52:12,210
hop on any bandwagon until we get a

00:52:10,470 --> 00:52:15,360
little bit more design discussion on

00:52:12,210 --> 00:52:19,800
that one but yeah definitely feel like

00:52:15,360 --> 00:52:21,390
we have some room to agree on a central

00:52:19,800 --> 00:52:26,850
configuration mechanism

00:52:21,390 --> 00:52:31,620
so that's good Thank You Bradley and

00:52:26,850 --> 00:52:35,900
miles for the amazing insights actually

00:52:31,620 --> 00:52:39,180
now the beer nearing the end of the EMA

00:52:35,900 --> 00:52:42,090
I'd actually like to highlight it's

00:52:39,180 --> 00:52:43,800
really actually interesting and I

00:52:42,090 --> 00:52:46,800
actually take a lot of pride in this

00:52:43,800 --> 00:52:50,430
that we talked a lot about tc39 stuff

00:52:46,800 --> 00:52:54,000
today and also given the fact that out

00:52:50,430 --> 00:52:55,950
of five people in the panel today I'm

00:52:54,000 --> 00:52:57,810
not sure about Joffrey and yen but at

00:52:55,950 --> 00:53:00,090
least the three of us have been more

00:52:57,810 --> 00:53:05,610
heavily involved in DC 39 at least as a

00:53:00,090 --> 00:53:07,560
flake so I'd like to point out how you

00:53:05,610 --> 00:53:12,630
know things have consistently improved

00:53:07,560 --> 00:53:15,810
when it comes to the representation of

00:53:12,630 --> 00:53:19,980
no js' depot inside of tc39 and the

00:53:15,810 --> 00:53:22,430
amount of you know consideration that

00:53:19,980 --> 00:53:26,460
has been given you know Jess at one time

00:53:22,430 --> 00:53:28,370
in DC 39 and actually I'd like to hear

00:53:26,460 --> 00:53:30,630
everybody's thoughts on that and also

00:53:28,370 --> 00:53:33,990
discuss some of the issues that we have

00:53:30,630 --> 00:53:40,350
had in the past when dealing with

00:53:33,990 --> 00:53:43,410
especially the modules I just like to

00:53:40,350 --> 00:53:45,780
say I think tc39 is much better about

00:53:43,410 --> 00:53:51,320
getting feedback from its the ecosystem

00:53:45,780 --> 00:53:55,470
these days I know I joined tc39 and

00:53:51,320 --> 00:53:58,980
GoDaddy paid for it since its cost

00:53:55,470 --> 00:54:03,660
membership based upon modules I think

00:53:58,980 --> 00:54:06,390
the ecosystem feedback is so credible

00:54:03,660 --> 00:54:08,160
nowadays that we probably wouldn't

00:54:06,390 --> 00:54:11,250
encounter the same sort of scenario

00:54:08,160 --> 00:54:13,700
anymore especially with the stage system

00:54:11,250 --> 00:54:13,700
in place

00:54:17,019 --> 00:54:25,009
great miles do anything to after that I

00:54:22,599 --> 00:54:26,869
guess this is a parting note it's like

00:54:25,009 --> 00:54:29,670
been a long journey but we're almost

00:54:26,869 --> 00:54:31,859
there and it's pretty exciting

00:54:29,670 --> 00:54:35,170
but with that piece head there's always

00:54:31,859 --> 00:54:39,530
something showing up

00:54:35,170 --> 00:54:42,320
yeah indeed thank you all for your time

00:54:39,530 --> 00:54:46,390
and a special thank you to all our

00:54:42,320 --> 00:54:49,610
listeners for the amazing questions and

00:54:46,390 --> 00:54:51,830
also for being involved in the community

00:54:49,610 --> 00:54:53,710
I'd like to come to everybody to

00:54:51,830 --> 00:54:56,990
everybody who's interested especially in

00:54:53,710 --> 00:55:01,550
node.js and at my shop modules to help

00:54:56,990 --> 00:55:05,530
out in the modules working group the

00:55:01,550 --> 00:55:08,090
mock modules working group has been

00:55:05,530 --> 00:55:09,770
accepting new people as observers and

00:55:08,090 --> 00:55:12,230
eventually as members of the working

00:55:09,770 --> 00:55:16,010
group so that's a great thing to work on

00:55:12,230 --> 00:55:19,330
and and I'd imagine there's a lot of

00:55:16,010 --> 00:55:23,180
work that still needs to be done so

00:55:19,330 --> 00:55:25,240
that's it I think

00:55:23,180 --> 00:55:25,240
you

00:55:26,300 --> 00:55:32,990
thanks for tuning in everyone thank you

00:55:29,900 --> 00:55:32,990

YouTube URL: https://www.youtube.com/watch?v=runiahCa3dE


