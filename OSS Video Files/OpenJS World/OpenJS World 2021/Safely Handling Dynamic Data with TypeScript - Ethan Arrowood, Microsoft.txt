Title: Safely Handling Dynamic Data with TypeScript - Ethan Arrowood, Microsoft
Publication date: 2021-05-28
Playlist: OpenJS World 2021
Description: 
	TypeScript makes JavaScript safer by adding static type definitions. Static definitions are wonderful; they prevent developers from making trivial mistakes by ensuring every assignment and invocation is done correctly. A variable typed as a string cannot be assigned a number, and a function expecting three arguments cannot be called with only two. These definitions only exist at build time though; the code that is eventually executed is just JavaScript. But what about the response from an API request? In this talk by Ethan Arrowood, Software Engineer 2 @ Microsoft, he will cover various solutions for safely typing dynamic data in TypeScript applications. This talk features popular technologies such as Fastify, JSON Schema, Node.js, and more!
Captions: 
	00:00:00,000 --> 00:00:04,640
hello everybody my name is ethan airwood

00:00:02,879 --> 00:00:07,839
and welcome to

00:00:04,640 --> 00:00:10,080
openjs world 2021 today

00:00:07,839 --> 00:00:13,599
i'll be talking about safely handling

00:00:10,080 --> 00:00:13,599
dynamic data with typescript

00:00:14,160 --> 00:00:19,840
so what do i mean by handling data well

00:00:17,680 --> 00:00:20,880
everything we do on the web involves

00:00:19,840 --> 00:00:23,680
data

00:00:20,880 --> 00:00:24,960
simply loading of a page is loading data

00:00:23,680 --> 00:00:28,080
from a server

00:00:24,960 --> 00:00:29,119
but let's get a little bit more detailed

00:00:28,080 --> 00:00:31,279
with that

00:00:29,119 --> 00:00:32,559
think about the parts that make up your

00:00:31,279 --> 00:00:35,040
web application

00:00:32,559 --> 00:00:36,160
whether it be the api routes the forms

00:00:35,040 --> 00:00:38,000
in your front end

00:00:36,160 --> 00:00:39,360
the authentication between both the

00:00:38,000 --> 00:00:40,960
client and the server

00:00:39,360 --> 00:00:43,040
and even the environment variables

00:00:40,960 --> 00:00:46,079
you're using to deploy your

00:00:43,040 --> 00:00:48,559
apps to your users

00:00:46,079 --> 00:00:49,680
it's all data and it's all fairly

00:00:48,559 --> 00:00:54,079
dynamic

00:00:49,680 --> 00:00:56,559
especially user inputted information

00:00:54,079 --> 00:00:57,360
so let's consider a json object payload

00:00:56,559 --> 00:00:59,760
representing

00:00:57,360 --> 00:01:00,719
a user we have a bunch of different

00:00:59,760 --> 00:01:04,239
properties here

00:01:00,719 --> 00:01:06,320
the user's id the name are they employed

00:01:04,239 --> 00:01:08,400
what company do they work for how old

00:01:06,320 --> 00:01:10,880
are they and what projects have they

00:01:08,400 --> 00:01:10,880
worked on

00:01:11,119 --> 00:01:17,680
and now let's go ahead and define a

00:01:14,240 --> 00:01:19,759
fastify api route this api route will

00:01:17,680 --> 00:01:20,799
be writing this user to a to a fake

00:01:19,759 --> 00:01:22,720
database

00:01:20,799 --> 00:01:24,080
so we'll call it add user and we'll make

00:01:22,720 --> 00:01:26,799
it a post request

00:01:24,080 --> 00:01:28,240
so that there's a body so given the

00:01:26,799 --> 00:01:30,720
current code

00:01:28,240 --> 00:01:32,000
what type do you expect that body

00:01:30,720 --> 00:01:34,400
property to be

00:01:32,000 --> 00:01:36,880
from the request object of the request

00:01:34,400 --> 00:01:36,880
handler

00:01:38,079 --> 00:01:41,840
do you think it's going to be a record

00:01:39,759 --> 00:01:42,799
with a generic t

00:01:41,840 --> 00:01:46,560
or do you think it's going to be an

00:01:42,799 --> 00:01:46,560
object or any

00:01:47,920 --> 00:01:51,920
well i hate to break the news to you but

00:01:50,320 --> 00:01:55,040
it's unknown

00:01:51,920 --> 00:01:55,920
in fact it's unknown intentionally as

00:01:55,040 --> 00:01:57,520
well

00:01:55,920 --> 00:01:59,439
we want to make sure that that body

00:01:57,520 --> 00:02:02,000
property is not

00:01:59,439 --> 00:02:04,079
unsafely used and what i mean by that is

00:02:02,000 --> 00:02:06,560
imagine you know given our

00:02:04,079 --> 00:02:08,640
user data that we're going to pass this

00:02:06,560 --> 00:02:11,680
api route

00:02:08,640 --> 00:02:13,840
we know as the developer writing it what

00:02:11,680 --> 00:02:17,840
shape it's going to be in

00:02:13,840 --> 00:02:20,480
and however who's to say that

00:02:17,840 --> 00:02:21,360
another developer in your team knows

00:02:20,480 --> 00:02:25,200
that shape

00:02:21,360 --> 00:02:27,200
of that data and let's say

00:02:25,200 --> 00:02:29,040
you know you go ahead and you you're in

00:02:27,200 --> 00:02:32,239
this api route and you

00:02:29,040 --> 00:02:33,519
make a call to body.name you as a

00:02:32,239 --> 00:02:36,319
developer expect that

00:02:33,519 --> 00:02:37,599
it exists and then it's a string but

00:02:36,319 --> 00:02:41,680
what happens when someone

00:02:37,599 --> 00:02:43,599
only submits a user object with an id

00:02:41,680 --> 00:02:44,720
currently there's no validation and

00:02:43,599 --> 00:02:47,680
there's no checks

00:02:44,720 --> 00:02:49,840
if that does or doesn't exist so by

00:02:47,680 --> 00:02:52,000
setting the body property of the request

00:02:49,840 --> 00:02:55,040
object to unknown

00:02:52,000 --> 00:02:58,560
the call to body.name

00:02:55,040 --> 00:03:01,280
will actually not result in a string

00:02:58,560 --> 00:03:04,000
but in an error in fact typescript error

00:03:01,280 --> 00:03:05,200
so your code won't even compile

00:03:04,000 --> 00:03:07,120
in this case the area you're going to

00:03:05,200 --> 00:03:11,440
receive its object is of type

00:03:07,120 --> 00:03:14,480
unknown so how do we solve that

00:03:11,440 --> 00:03:17,200
well let's use json schema

00:03:14,480 --> 00:03:18,640
json schema is super powerful it looks a

00:03:17,200 --> 00:03:21,680
little bit like this

00:03:18,640 --> 00:03:23,360
essentially you describe the shape of

00:03:21,680 --> 00:03:25,760
your json object or your

00:03:23,360 --> 00:03:27,920
your data payload and you can use that

00:03:25,760 --> 00:03:31,440
schema to do things such as validation

00:03:27,920 --> 00:03:35,440
serialization parsing and more

00:03:31,440 --> 00:03:35,440
based on your schema

00:03:35,760 --> 00:03:41,360
and generally json schema is intended

00:03:38,799 --> 00:03:44,319
for validation

00:03:41,360 --> 00:03:45,599
so most of the time you're going to use

00:03:44,319 --> 00:03:49,040
it to say hey

00:03:45,599 --> 00:03:51,760
the this json blob that i've received

00:03:49,040 --> 00:03:52,959
from an unknown thing you know could be

00:03:51,760 --> 00:03:55,599
a client

00:03:52,959 --> 00:03:56,400
in our case i want to validate that it

00:03:55,599 --> 00:03:59,439
is the shape

00:03:56,400 --> 00:03:59,439
that i expect it to be

00:03:59,519 --> 00:04:06,640
but this is 2021. validation is not all

00:04:03,760 --> 00:04:09,439
that json schema is good for

00:04:06,640 --> 00:04:10,640
additionally there's new tools such as

00:04:09,439 --> 00:04:13,760
typebox

00:04:10,640 --> 00:04:14,400
which actually allows you to derive the

00:04:13,760 --> 00:04:17,680
types

00:04:14,400 --> 00:04:20,720
type definitions from your json schema

00:04:17,680 --> 00:04:22,079
and so the type box api is a very fluent

00:04:20,720 --> 00:04:23,520
like api

00:04:22,079 --> 00:04:25,520
where you can see here on the second

00:04:23,520 --> 00:04:28,240
line of the second code block

00:04:25,520 --> 00:04:29,240
we're defining a constant variable t

00:04:28,240 --> 00:04:32,080
that is the

00:04:29,240 --> 00:04:34,080
type.string method or a call to the

00:04:32,080 --> 00:04:37,680
type.string method

00:04:34,080 --> 00:04:40,800
this results in that t variable

00:04:37,680 --> 00:04:43,199
having the shape or having the um

00:04:40,800 --> 00:04:44,800
having you know being an object with a

00:04:43,199 --> 00:04:48,160
single property type

00:04:44,800 --> 00:04:50,800
assigned to the value string

00:04:48,160 --> 00:04:52,000
this is a json schema it's a very simple

00:04:50,800 --> 00:04:54,479
json schema

00:04:52,000 --> 00:04:55,040
and it's not very useful in this case

00:04:54,479 --> 00:04:57,919
but

00:04:55,040 --> 00:04:58,800
you can combine a large part of the type

00:04:57,919 --> 00:05:01,840
box api

00:04:58,800 --> 00:05:05,039
together to build your json schemas

00:05:01,840 --> 00:05:08,160
and then you can take that json schema

00:05:05,039 --> 00:05:09,520
and you can derive the type of it via

00:05:08,160 --> 00:05:11,520
the static method

00:05:09,520 --> 00:05:14,479
that is also provided to you from the

00:05:11,520 --> 00:05:14,479
typebox api

00:05:14,560 --> 00:05:18,639
so putting these two together here in

00:05:17,360 --> 00:05:21,600
our code sample

00:05:18,639 --> 00:05:22,479
we start with this body schema variable

00:05:21,600 --> 00:05:25,360
it's a

00:05:22,479 --> 00:05:26,639
call to the type box type dot object and

00:05:25,360 --> 00:05:28,320
then we define our six

00:05:26,639 --> 00:05:30,720
properties that we expect on our user

00:05:28,320 --> 00:05:32,160
object and then each for each of these

00:05:30,720 --> 00:05:34,560
properties we define

00:05:32,160 --> 00:05:37,360
what it is id is a string name is a

00:05:34,560 --> 00:05:41,759
string employed is an optional boolean

00:05:37,360 --> 00:05:44,960
companies an optional string etc etc

00:05:41,759 --> 00:05:48,000
then we define a type a matching type

00:05:44,960 --> 00:05:51,840
body schema is the result of the

00:05:48,000 --> 00:05:52,960
static generic function from typebox api

00:05:51,840 --> 00:05:56,160
and now

00:05:52,960 --> 00:05:58,400
inside of the fastify.post method not

00:05:56,160 --> 00:05:59,120
only are we passing that type body

00:05:58,400 --> 00:06:02,000
schema

00:05:59,120 --> 00:06:03,440
to the generic name generic parameter

00:06:02,000 --> 00:06:05,520
object

00:06:03,440 --> 00:06:07,680
on that first that first line of the

00:06:05,520 --> 00:06:10,160
facified declaration

00:06:07,680 --> 00:06:10,960
but then within the fastify.post method

00:06:10,160 --> 00:06:13,280
itself

00:06:10,960 --> 00:06:14,240
we are adding a second argument the

00:06:13,280 --> 00:06:16,880
second argument

00:06:14,240 --> 00:06:18,560
is a set of options in this case we're

00:06:16,880 --> 00:06:20,000
using the schema option and we're

00:06:18,560 --> 00:06:23,680
passing in that same body

00:06:20,000 --> 00:06:27,360
schema to the body property

00:06:23,680 --> 00:06:29,120
and now automatically fastify is going

00:06:27,360 --> 00:06:31,600
to do two things for us

00:06:29,120 --> 00:06:32,400
first is going to validate that that

00:06:31,600 --> 00:06:34,560
body

00:06:32,400 --> 00:06:37,680
is going to be the shape of that schema

00:06:34,560 --> 00:06:41,039
that is derived from the typebox api

00:06:37,680 --> 00:06:44,160
additionally inside of the function

00:06:41,039 --> 00:06:47,600
the body property on the request object

00:06:44,160 --> 00:06:50,880
is going to get the static type

00:06:47,600 --> 00:06:53,919
from that body schema type so

00:06:50,880 --> 00:06:55,840
now inside of our request handler you

00:06:53,919 --> 00:06:58,560
can see here we have some comments

00:06:55,840 --> 00:07:00,000
comments that type of body is going to

00:06:58,560 --> 00:07:03,039
be body schema

00:07:00,000 --> 00:07:03,759
and thus type of body dot name and type

00:07:03,039 --> 00:07:06,400
of body dot

00:07:03,759 --> 00:07:09,599
age are going to be string and number or

00:07:06,400 --> 00:07:09,599
undefined respectively

00:07:10,160 --> 00:07:13,360
so incredible by combining all three of

00:07:12,479 --> 00:07:16,479
these tools

00:07:13,360 --> 00:07:19,120
we're able to create a much much safer

00:07:16,479 --> 00:07:19,759
api developer experience now you can

00:07:19,120 --> 00:07:22,160
ensure

00:07:19,759 --> 00:07:24,160
that your fastify app and the data that

00:07:22,160 --> 00:07:25,840
it's receiving at any of your routes

00:07:24,160 --> 00:07:27,680
is going to be the shape that you expect

00:07:25,840 --> 00:07:31,440
it to be

00:07:27,680 --> 00:07:31,840
but wait it gets better let me introduce

00:07:31,440 --> 00:07:34,960
you

00:07:31,840 --> 00:07:35,680
to a similar approach but on the client

00:07:34,960 --> 00:07:37,199
side

00:07:35,680 --> 00:07:38,720
for this we're still going to be running

00:07:37,199 --> 00:07:39,680
in node.js so we're going to be using

00:07:38,720 --> 00:07:42,639
indici

00:07:39,680 --> 00:07:43,680
and ajv natively ajv is actually the

00:07:42,639 --> 00:07:45,919
library that is

00:07:43,680 --> 00:07:48,479
fastify is using underneath the hood it

00:07:45,919 --> 00:07:51,759
stands for another json validator

00:07:48,479 --> 00:07:54,160
and indici if you don't know is a brand

00:07:51,759 --> 00:07:54,479
new http client written from the ground

00:07:54,160 --> 00:07:57,039
up

00:07:54,479 --> 00:07:58,639
for node.js if you want to know more

00:07:57,039 --> 00:07:59,360
about it you should go check out mateo's

00:07:58,639 --> 00:08:02,960
talk too

00:07:59,360 --> 00:08:05,120
i believe he's speaking about it today

00:08:02,960 --> 00:08:06,560
so let's look at another code sample in

00:08:05,120 --> 00:08:08,800
this code sample we're going to start

00:08:06,560 --> 00:08:11,360
with a similar type box

00:08:08,800 --> 00:08:12,560
experience we're defining a schema type

00:08:11,360 --> 00:08:15,520
or a schema variable

00:08:12,560 --> 00:08:16,800
and a schema type then we're going to

00:08:15,520 --> 00:08:19,440
define a function

00:08:16,800 --> 00:08:20,639
this function is a type guard so what

00:08:19,440 --> 00:08:24,240
that means is that

00:08:20,639 --> 00:08:27,440
it returns a boolean and

00:08:24,240 --> 00:08:30,720
that boolean you know if it's true the

00:08:27,440 --> 00:08:34,159
argument response data is going to

00:08:30,720 --> 00:08:35,519
be given the type that we're specifying

00:08:34,159 --> 00:08:38,640
on that response data

00:08:35,519 --> 00:08:41,200
is add user response schema

00:08:38,640 --> 00:08:42,080
so to sort of rephrase that this

00:08:41,200 --> 00:08:44,320
function

00:08:42,080 --> 00:08:46,080
is going to be given an argument in our

00:08:44,320 --> 00:08:48,320
case response data

00:08:46,080 --> 00:08:50,480
that argument is going to be of type any

00:08:48,320 --> 00:08:54,080
or unknown

00:08:50,480 --> 00:08:57,200
then if this function returns true

00:08:54,080 --> 00:08:58,959
then that same argument reference that

00:08:57,200 --> 00:09:00,240
response data that you might pass into

00:08:58,959 --> 00:09:03,120
this function

00:09:00,240 --> 00:09:04,720
will be given the add user response

00:09:03,120 --> 00:09:06,880
schema type

00:09:04,720 --> 00:09:08,880
by the typescript compiler for the

00:09:06,880 --> 00:09:10,399
remainder of that context

00:09:08,880 --> 00:09:12,640
and we'll see that in use the end of

00:09:10,399 --> 00:09:13,279
this file but to continue working our

00:09:12,640 --> 00:09:15,440
way down

00:09:13,279 --> 00:09:17,600
you can see we're defining a user using

00:09:15,440 --> 00:09:19,120
that same user schema from the previous

00:09:17,600 --> 00:09:21,519
code sample

00:09:19,120 --> 00:09:22,240
and then we're defined where we're

00:09:21,519 --> 00:09:25,519
awaiting

00:09:22,240 --> 00:09:27,600
the udc.request call to our api

00:09:25,519 --> 00:09:30,160
and that add user route we're

00:09:27,600 --> 00:09:32,000
stringifying that user object

00:09:30,160 --> 00:09:34,399
and then the data we received back from

00:09:32,000 --> 00:09:35,360
mindichi we're going to collect it into

00:09:34,399 --> 00:09:38,080
the data

00:09:35,360 --> 00:09:40,880
variable we're going to parse that using

00:09:38,080 --> 00:09:44,480
just the default json parse method

00:09:40,880 --> 00:09:46,800
and then using that response that

00:09:44,480 --> 00:09:48,800
const add user response we're going to

00:09:46,800 --> 00:09:52,080
pass it to our function

00:09:48,800 --> 00:09:53,360
is add user response and if it and again

00:09:52,080 --> 00:09:56,399
if it validates

00:09:53,360 --> 00:09:58,320
then within that if block that add user

00:09:56,399 --> 00:09:59,040
response variable is going to have the

00:09:58,320 --> 00:10:02,320
type

00:09:59,040 --> 00:10:05,079
add user response schema and thus

00:10:02,320 --> 00:10:06,560
calling console.log add

00:10:05,079 --> 00:10:09,200
userresponse.message

00:10:06,560 --> 00:10:10,959
is safe we know that it exists because

00:10:09,200 --> 00:10:13,760
we're using ajv

00:10:10,959 --> 00:10:14,800
inside of the izad user response method

00:10:13,760 --> 00:10:16,640
to validate

00:10:14,800 --> 00:10:18,880
that that incoming argument that

00:10:16,640 --> 00:10:19,839
incoming data from indici the response

00:10:18,880 --> 00:10:22,720
data

00:10:19,839 --> 00:10:24,079
is the shape that we expect it to be in

00:10:22,720 --> 00:10:26,000
this case an object

00:10:24,079 --> 00:10:28,640
with a single property message that is

00:10:26,000 --> 00:10:32,480
of type string

00:10:28,640 --> 00:10:35,920
so now let's jump into it live

00:10:32,480 --> 00:10:37,600
all right fantastic welcome in so before

00:10:35,920 --> 00:10:41,279
we get started i'm going to kick off

00:10:37,600 --> 00:10:46,399
a build script so npm run

00:10:41,279 --> 00:10:50,720
build hyphen hyphen hyphen hyphen watch

00:10:46,399 --> 00:10:52,399
fantastic now let's jump into our server

00:10:50,720 --> 00:10:54,480
so we'll take a quick peek at the index

00:10:52,399 --> 00:10:57,120
file the index file

00:10:54,480 --> 00:10:57,600
simp has a single run function this run

00:10:57,120 --> 00:11:00,079
function

00:10:57,600 --> 00:11:02,320
is initializes the fastify app it

00:11:00,079 --> 00:11:04,560
registers our create server function

00:11:02,320 --> 00:11:06,399
which we'll jump into next and then it

00:11:04,560 --> 00:11:07,680
does a simple app.ready and then an

00:11:06,399 --> 00:11:09,279
app.listingcall

00:11:07,680 --> 00:11:11,200
if we have any errors we'll make sure to

00:11:09,279 --> 00:11:13,200
cache them and log it and then safely

00:11:11,200 --> 00:11:15,760
exit the process

00:11:13,200 --> 00:11:17,200
inside of our server file we have our

00:11:15,760 --> 00:11:19,839
create server plugin

00:11:17,200 --> 00:11:21,519
and inside this plugin we're copying and

00:11:19,839 --> 00:11:22,959
pasting that same code that we've seen

00:11:21,519 --> 00:11:25,600
previously

00:11:22,959 --> 00:11:27,600
so and here we're passing in that add

00:11:25,600 --> 00:11:29,920
user request schema type

00:11:27,600 --> 00:11:30,880
to our body generic name generic

00:11:29,920 --> 00:11:32,399
property

00:11:30,880 --> 00:11:34,480
remember that's going to get passed

00:11:32,399 --> 00:11:36,880
through to the body property in the

00:11:34,480 --> 00:11:39,600
request object

00:11:36,880 --> 00:11:41,600
additionally inside of the schema here

00:11:39,600 --> 00:11:44,640
we're passing that same

00:11:41,600 --> 00:11:45,279
schema reference to the body property so

00:11:44,640 --> 00:11:47,120
now

00:11:45,279 --> 00:11:49,120
not only is this body property going to

00:11:47,120 --> 00:11:51,920
receive the type that we define here

00:11:49,120 --> 00:11:52,880
in the name generic the named generic

00:11:51,920 --> 00:11:55,600
parameter

00:11:52,880 --> 00:11:56,480
but it's also going to be validated by

00:11:55,600 --> 00:11:59,600
ajv

00:11:56,480 --> 00:12:03,279
underneath the hood by fastify using

00:11:59,600 --> 00:12:03,600
this options arguments and now inside of

00:12:03,279 --> 00:12:06,399
our

00:12:03,600 --> 00:12:08,320
request handler we can be certain that

00:12:06,399 --> 00:12:11,120
this body property here

00:12:08,320 --> 00:12:12,160
is of this shape and thus the user

00:12:11,120 --> 00:12:13,920
object

00:12:12,160 --> 00:12:15,760
is going to have all of the properties

00:12:13,920 --> 00:12:19,519
we expect an id

00:12:15,760 --> 00:12:20,880
a name employed company age and projects

00:12:19,519 --> 00:12:22,880
you can see that it even takes in the

00:12:20,880 --> 00:12:24,959
optional ones and then it even has the

00:12:22,880 --> 00:12:27,680
definite ones

00:12:24,959 --> 00:12:28,160
then finally we're going to sort of

00:12:27,680 --> 00:12:30,320
mimic

00:12:28,160 --> 00:12:31,360
a database call and we're going to

00:12:30,320 --> 00:12:33,839
resolve that

00:12:31,360 --> 00:12:35,040
that object right that message that

00:12:33,839 --> 00:12:36,160
we're saying this is going to be our

00:12:35,040 --> 00:12:38,399
response

00:12:36,160 --> 00:12:40,399
for this api route so it's going to say

00:12:38,399 --> 00:12:42,880
user that user id

00:12:40,399 --> 00:12:45,120
added successfully then we're going to

00:12:42,880 --> 00:12:47,440
resend that response back to the to the

00:12:45,120 --> 00:12:50,959
client

00:12:47,440 --> 00:12:50,959
so let's jump over to our client code

00:12:51,040 --> 00:12:54,880
so inside the client code again you can

00:12:52,800 --> 00:12:57,920
see a lot of similarities to our to the

00:12:54,880 --> 00:13:00,639
to the presentation we have a

00:12:57,920 --> 00:13:01,920
type guard here is add user response

00:13:00,639 --> 00:13:03,440
that does the same thing you know we're

00:13:01,920 --> 00:13:07,279
validating that argument

00:13:03,440 --> 00:13:09,839
with our schema this response schema

00:13:07,279 --> 00:13:12,160
we're defining a user and then we're

00:13:09,839 --> 00:13:15,920
going to be executing the inde

00:13:12,160 --> 00:13:19,760
the indici request call

00:13:15,920 --> 00:13:21,120
with that user it's passed into the body

00:13:19,760 --> 00:13:23,440
we're going to collect the data from the

00:13:21,120 --> 00:13:25,920
response we're going to parse it

00:13:23,440 --> 00:13:27,360
and then we're going to check hey if add

00:13:25,920 --> 00:13:30,000
user response

00:13:27,360 --> 00:13:31,200
is add user response let's console.log

00:13:30,000 --> 00:13:33,279
the message

00:13:31,200 --> 00:13:35,440
and if it's not let's just let's just

00:13:33,279 --> 00:13:37,040
console.log the entire response

00:13:35,440 --> 00:13:38,880
because it probably isn't what we

00:13:37,040 --> 00:13:42,800
expected to be

00:13:38,880 --> 00:13:45,600
so let's go run this so here in another

00:13:42,800 --> 00:13:46,000
command line um prompt i'm gonna do npm

00:13:45,600 --> 00:13:49,279
run

00:13:46,000 --> 00:13:52,639
or sorry yeah npm run start

00:13:49,279 --> 00:13:54,720
server you can see here

00:13:52,639 --> 00:13:56,399
on my computer which is named venusaur

00:13:54,720 --> 00:13:57,920
we have a server listening on localhost

00:13:56,399 --> 00:14:02,639
00:13:57,920 --> 00:14:05,279
and then we can run npm run start client

00:14:02,639 --> 00:14:08,079
fantastic so everything worked correctly

00:14:05,279 --> 00:14:10,720
user 123 was added successfully

00:14:08,079 --> 00:14:12,560
fantastic we now know that we got that

00:14:10,720 --> 00:14:14,480
message here on line 32

00:14:12,560 --> 00:14:15,760
because the response that we received

00:14:14,480 --> 00:14:19,199
from our server

00:14:15,760 --> 00:14:22,800
matches the schema that we defined here

00:14:19,199 --> 00:14:22,800
so let's go check out those schemas

00:14:22,959 --> 00:14:26,639
so here in my schemas file i have a

00:14:25,360 --> 00:14:29,600
couple of schemas

00:14:26,639 --> 00:14:30,000
we have that user schema object and then

00:14:29,600 --> 00:14:32,399
we have

00:14:30,000 --> 00:14:33,199
an add user request schema so this is

00:14:32,399 --> 00:14:34,560
one of my really

00:14:33,199 --> 00:14:37,360
this is one of my favorite things about

00:14:34,560 --> 00:14:38,160
using the typebox api is i can reuse my

00:14:37,360 --> 00:14:40,959
schemas

00:14:38,160 --> 00:14:43,680
really easily so i can say okay my add

00:14:40,959 --> 00:14:46,720
user request schema is just going to be

00:14:43,680 --> 00:14:49,040
an object with a single user that is

00:14:46,720 --> 00:14:51,199
matching the user schema

00:14:49,040 --> 00:14:53,040
and then that type can derive all that

00:14:51,199 --> 00:14:56,399
information even with that

00:14:53,040 --> 00:14:58,000
reference and then here again we have

00:14:56,399 --> 00:15:00,720
that very simple messages of type

00:14:58,000 --> 00:15:01,519
string so jumping back over to the

00:15:00,720 --> 00:15:02,959
client

00:15:01,519 --> 00:15:04,639
let's see what happens when we break

00:15:02,959 --> 00:15:08,000
things let's

00:15:04,639 --> 00:15:12,320
rather than sending just user you know a

00:15:08,000 --> 00:15:15,519
body with the user property let's send a

00:15:12,320 --> 00:15:16,480
a response body with sorry a request

00:15:15,519 --> 00:15:19,680
body

00:15:16,480 --> 00:15:22,800
with a new user property remember

00:15:19,680 --> 00:15:24,720
that that new user doesn't match

00:15:22,800 --> 00:15:27,360
what we are expecting see this request

00:15:24,720 --> 00:15:29,680
schema we're expecting user

00:15:27,360 --> 00:15:32,720
but we're going to be passing new user

00:15:29,680 --> 00:15:32,720
so let's see what happens

00:15:33,839 --> 00:15:39,279
perfect our api not only responded with

00:15:37,279 --> 00:15:40,720
a 400 bad request there

00:15:39,279 --> 00:15:42,880
and that that body should have a

00:15:40,720 --> 00:15:46,480
required property user

00:15:42,880 --> 00:15:48,800
but our api here didn't fail

00:15:46,480 --> 00:15:49,839
didn't try to call responsedata.message

00:15:48,800 --> 00:15:53,519
instead it

00:15:49,839 --> 00:15:57,680
logged the entire response data

00:15:53,519 --> 00:15:59,360
perfect so this is everything in action

00:15:57,680 --> 00:16:01,680
all right welcome back to the

00:15:59,360 --> 00:16:02,399
presentation i hope you enjoyed that

00:16:01,680 --> 00:16:04,480
short

00:16:02,399 --> 00:16:05,680
live demo so i want to do a big shout

00:16:04,480 --> 00:16:08,320
out to undraw

00:16:05,680 --> 00:16:09,519
they are the original authors or

00:16:08,320 --> 00:16:11,440
graphical artists for

00:16:09,519 --> 00:16:12,639
all of the images you've seen in this

00:16:11,440 --> 00:16:15,120
presentation

00:16:12,639 --> 00:16:15,920
definitely i am not very artistic but

00:16:15,120 --> 00:16:19,040
because of them

00:16:15,920 --> 00:16:20,880
my presentations can be

00:16:19,040 --> 00:16:22,399
this whole thing was built with tools

00:16:20,880 --> 00:16:25,040
called highlight js

00:16:22,399 --> 00:16:26,399
and tmcw big check them out they're

00:16:25,040 --> 00:16:28,959
really useful

00:16:26,399 --> 00:16:31,120
for building presentations using html

00:16:28,959 --> 00:16:33,360
and css

00:16:31,120 --> 00:16:35,040
and finally a big thank you again

00:16:33,360 --> 00:16:36,000
reminder my name is ethan airwood you

00:16:35,040 --> 00:16:38,160
can find me on twitter

00:16:36,000 --> 00:16:39,519
and github please reach out if you have

00:16:38,160 --> 00:16:41,440
any questions or you want to

00:16:39,519 --> 00:16:42,959
talk about these topics further i'm

00:16:41,440 --> 00:16:44,399
really excited i got to show you not

00:16:42,959 --> 00:16:47,040
only fastify

00:16:44,399 --> 00:16:48,800
and udg today but we got to combine them

00:16:47,040 --> 00:16:52,480
with tools like typebox

00:16:48,800 --> 00:16:53,920
json schema typescript and ajv

00:16:52,480 --> 00:16:55,680
so i hope you can take all what you

00:16:53,920 --> 00:16:59,519
learned today and go and build

00:16:55,680 --> 00:17:04,160
typesafe full stack web applications

00:16:59,519 --> 00:17:04,160

YouTube URL: https://www.youtube.com/watch?v=y5W3Fm9dpZE


