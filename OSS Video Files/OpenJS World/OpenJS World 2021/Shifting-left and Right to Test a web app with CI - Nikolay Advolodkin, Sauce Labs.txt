Title: Shifting-left and Right to Test a web app with CI - Nikolay Advolodkin, Sauce Labs
Publication date: 2021-05-28
Playlist: OpenJS World 2021
Description: 
	Automated testing by a developer is still a topic that is heavily contested. Developers continue to struggle to understand how to test their apps, when to test, and how to put this all together into a continuous integration pipeline. This process can be surprisingly simple with the combination of the right tools. In this live-coding session developers will learn how to create a web-app using React. Afterward, we will shift-left by adding some automated unit tests using Jest. Next, we will shift-right by adding some functional tests using Cypress.io. Finally, the developers will learn how to continuously build and test the web app through a Github workflow. By the end of the session, the developers will: - Learn a bit about unit testing with Jest - Learn Cypress for functional testing - Put all of this together into a CI pipeline that builds and tests in a continuous manner
Captions: 
	00:00:00,719 --> 00:00:03,919
in this tutorial we will learn how to

00:00:02,560 --> 00:00:06,799
create a very simple

00:00:03,919 --> 00:00:08,800
react web app in under five minutes

00:00:06,799 --> 00:00:10,800
we'll learn how to code component tests

00:00:08,800 --> 00:00:13,440
by using react testing library

00:00:10,800 --> 00:00:14,400
how to shift right by adding automated

00:00:13,440 --> 00:00:16,720
visual testing

00:00:14,400 --> 00:00:17,680
using webdriver io and screener and

00:00:16,720 --> 00:00:20,640
finally we're going to

00:00:17,680 --> 00:00:21,840
put it all into a ci pipeline using

00:00:20,640 --> 00:00:24,160
github actions

00:00:21,840 --> 00:00:25,519
with station execution and true

00:00:24,160 --> 00:00:27,680
continuous integration

00:00:25,519 --> 00:00:29,760
my name is nikola advalatkin i'm a

00:00:27,680 --> 00:00:30,240
principal solutions architect at sauce

00:00:29,760 --> 00:00:33,040
labs

00:00:30,240 --> 00:00:35,680
and creator of ultimateqa.com let's go

00:00:33,040 --> 00:00:35,680
have some fun

00:00:37,520 --> 00:00:40,879
all right so let's go ahead and start

00:00:39,680 --> 00:00:44,079
creating our

00:00:40,879 --> 00:00:46,640
react app you can see that i'm here

00:00:44,079 --> 00:00:48,239
in a folder called react web app where

00:00:46,640 --> 00:00:51,360
i've only got a license

00:00:48,239 --> 00:00:52,640
and a readme so let's go ahead and do an

00:00:51,360 --> 00:00:57,280
npm init

00:00:52,640 --> 00:01:00,039
to uh set up this directory

00:00:57,280 --> 00:01:01,920
and so now we have added our

00:01:00,039 --> 00:01:03,760
package.json

00:01:01,920 --> 00:01:06,159
if you don't already have it installed

00:01:03,760 --> 00:01:06,880
we should install create react app it's

00:01:06,159 --> 00:01:10,240
a

00:01:06,880 --> 00:01:13,840
easy way to create react applications

00:01:10,240 --> 00:01:13,840
from facebook

00:01:14,640 --> 00:01:19,200
once you have create react app installed

00:01:16,560 --> 00:01:22,320
you can actually use create react app

00:01:19,200 --> 00:01:24,840
to create a uh new react

00:01:22,320 --> 00:01:26,080
application so let's go ahead and do

00:01:24,840 --> 00:01:30,159
that

00:01:26,080 --> 00:01:30,159
and we're calling this app my app

00:01:33,360 --> 00:01:38,240
wonderful so once uh that's

00:01:36,479 --> 00:01:40,400
done downloading and installing you can

00:01:38,240 --> 00:01:42,000
see a bunch of commands that create

00:01:40,400 --> 00:01:43,759
react app provides

00:01:42,000 --> 00:01:46,079
first get started and they tell us

00:01:43,759 --> 00:01:48,799
exactly what we can do is to cd

00:01:46,079 --> 00:01:48,799
to my app

00:01:49,119 --> 00:01:54,000
and then in my app you can see now if we

00:01:52,560 --> 00:01:57,280
open this up

00:01:54,000 --> 00:02:01,439
we now have a my app folder has its own

00:01:57,280 --> 00:02:04,320
node modules has a bunch of code here

00:02:01,439 --> 00:02:06,079
that we will explore in a moment so

00:02:04,320 --> 00:02:07,600
let's actually go ahead and start up our

00:02:06,079 --> 00:02:11,599
app

00:02:07,600 --> 00:02:11,599
and see what that looks like

00:02:14,319 --> 00:02:19,680
and here is the start of our

00:02:17,680 --> 00:02:21,360
wonderful little application running on

00:02:19,680 --> 00:02:24,480
localhost 3000

00:02:21,360 --> 00:02:26,800
that's also pointed out in the logs

00:02:24,480 --> 00:02:26,800
here

00:02:29,040 --> 00:02:32,800
so the really wonderful thing about

00:02:30,879 --> 00:02:33,840
create react app is not only does it

00:02:32,800 --> 00:02:36,640
build

00:02:33,840 --> 00:02:38,080
us an application that's ready to go and

00:02:36,640 --> 00:02:41,519
ready to be modified

00:02:38,080 --> 00:02:42,640
it even comes with a test that we can

00:02:41,519 --> 00:02:45,840
execute

00:02:42,640 --> 00:02:49,599
if we look at package.json

00:02:45,840 --> 00:02:52,879
we can see that if we run a

00:02:49,599 --> 00:02:55,760
npm test command it's going to run

00:02:52,879 --> 00:02:56,560
some tests and so what we can do is open

00:02:55,760 --> 00:03:00,000
up a new tab

00:02:56,560 --> 00:03:04,480
here and do npm

00:03:00,000 --> 00:03:07,920
test and that's going to execute

00:03:04,480 --> 00:03:09,519
a unit test here that we have an app

00:03:07,920 --> 00:03:13,519
that says.js

00:03:09,519 --> 00:03:16,319
and this test is actually using a react

00:03:13,519 --> 00:03:16,720
testing library but what you can see

00:03:16,319 --> 00:03:20,159
here

00:03:16,720 --> 00:03:23,519
is we have a test that will

00:03:20,159 --> 00:03:24,799
render the learn react link here we use

00:03:23,519 --> 00:03:28,319
a method called

00:03:24,799 --> 00:03:31,599
render and we are rendering our app

00:03:28,319 --> 00:03:34,159
component and next

00:03:31,599 --> 00:03:34,959
you can see that we are using the screen

00:03:34,159 --> 00:03:38,000
to get

00:03:34,959 --> 00:03:41,760
an element by text called learn

00:03:38,000 --> 00:03:44,799
react and then finally we are expecting

00:03:41,760 --> 00:03:48,560
that link element to be in the document

00:03:44,799 --> 00:03:50,959
um this is a just expect

00:03:48,560 --> 00:03:52,400
and to be in the document is the react

00:03:50,959 --> 00:03:54,799
testing library

00:03:52,400 --> 00:03:56,319
uh assertion that's fantastic because

00:03:54,799 --> 00:03:58,720
now we have a

00:03:56,319 --> 00:04:00,480
unit test that's already ready for us

00:03:58,720 --> 00:04:02,640
and it can run

00:04:00,480 --> 00:04:04,560
regardless of whether our application is

00:04:02,640 --> 00:04:07,599
up or not so if i close down

00:04:04,560 --> 00:04:10,400
our app and then come back here and

00:04:07,599 --> 00:04:12,080
rerun the tests

00:04:10,400 --> 00:04:14,400
they will still continue to work because

00:04:12,080 --> 00:04:16,479
they don't need a server

00:04:14,400 --> 00:04:20,079
we are actually gonna go ahead and push

00:04:16,479 --> 00:04:20,079
this up into ci

00:04:22,000 --> 00:04:25,199
so the easiest way to get started with

00:04:24,160 --> 00:04:28,080
github actions

00:04:25,199 --> 00:04:29,759
is to come over here to the actions tab

00:04:28,080 --> 00:04:32,479
in your github repo

00:04:29,759 --> 00:04:34,479
making sure that you have one created

00:04:32,479 --> 00:04:38,479
and then you can come and say

00:04:34,479 --> 00:04:39,520
a new workflow github actions will

00:04:38,479 --> 00:04:42,080
provide you

00:04:39,520 --> 00:04:44,320
some suggested workflows and then notice

00:04:42,080 --> 00:04:45,360
it notices that we are obviously using

00:04:44,320 --> 00:04:47,680
node.js

00:04:45,360 --> 00:04:49,360
and so then it can recommend us a

00:04:47,680 --> 00:04:52,080
potential workflow

00:04:49,360 --> 00:04:54,080
this one right here looks fantastic so

00:04:52,080 --> 00:04:56,560
let's go ahead and click it

00:04:54,080 --> 00:04:57,360
it already comes with a bunch of steps

00:04:56,560 --> 00:05:00,560
that have been

00:04:57,360 --> 00:05:03,840
configured for us and the other

00:05:00,560 --> 00:05:04,320
nice thing about creating your yaml file

00:05:03,840 --> 00:05:06,960
here

00:05:04,320 --> 00:05:08,240
is that you also get a little ide that

00:05:06,960 --> 00:05:11,840
you can use

00:05:08,240 --> 00:05:13,919
for example you can see that

00:05:11,840 --> 00:05:15,440
if we don't do something right like

00:05:13,919 --> 00:05:18,240
let's say we do

00:05:15,440 --> 00:05:19,280
something like this the ui automatically

00:05:18,240 --> 00:05:22,560
highlights

00:05:19,280 --> 00:05:24,000
anything that may go wrong and so it

00:05:22,560 --> 00:05:27,039
says that we're missing a

00:05:24,000 --> 00:05:27,840
runs on here and so then we can do runs

00:05:27,039 --> 00:05:29,759
on

00:05:27,840 --> 00:05:31,520
and then now it says that the value

00:05:29,759 --> 00:05:34,400
cannot be null and then that's where you

00:05:31,520 --> 00:05:34,400
supply the value

00:05:37,600 --> 00:05:42,240
so this is what our ci pipeline

00:05:40,720 --> 00:05:44,240
should look like and let's go over it

00:05:42,240 --> 00:05:46,400
step by step by the way you can see it's

00:05:44,240 --> 00:05:47,120
automatically gets created in a dot

00:05:46,400 --> 00:05:49,919
github

00:05:47,120 --> 00:05:50,400
slash workflows folder and then you give

00:05:49,919 --> 00:05:54,479
your

00:05:50,400 --> 00:05:56,479
file a name i'm calling our ci pipeline

00:05:54,479 --> 00:05:58,560
ci you can call it of course anything

00:05:56,479 --> 00:06:02,240
you want and then at the very top

00:05:58,560 --> 00:06:04,800
i am setting three environment variables

00:06:02,240 --> 00:06:06,160
these environment variables are the

00:06:04,800 --> 00:06:09,360
screener api key

00:06:06,160 --> 00:06:13,280
source username and source access key

00:06:09,360 --> 00:06:16,960
they are coming from secrets

00:06:13,280 --> 00:06:20,000
uh variable that is part of github

00:06:16,960 --> 00:06:22,560
actions and then coming from the key

00:06:20,000 --> 00:06:24,319
called screener api key here source

00:06:22,560 --> 00:06:26,080
username and source access key so the

00:06:24,319 --> 00:06:29,600
value from here is retrieved

00:06:26,080 --> 00:06:32,639
and stored in the environment

00:06:29,600 --> 00:06:35,600
variable on the left hand side so

00:06:32,639 --> 00:06:36,720
where are these values coming from let

00:06:35,600 --> 00:06:40,960
me show you that

00:06:36,720 --> 00:06:44,160
it's very intuitive in github actions

00:06:40,960 --> 00:06:46,479
you come to settings

00:06:44,160 --> 00:06:47,280
scroll down to secrets you can see i

00:06:46,479 --> 00:06:49,440
have

00:06:47,280 --> 00:06:50,639
three keys that have been created here

00:06:49,440 --> 00:06:52,240
and inside of them they have the

00:06:50,639 --> 00:06:55,759
corresponding values

00:06:52,240 --> 00:06:58,720
that will then be set in here okay next

00:06:55,759 --> 00:06:59,120
we are saying that we want this ci to

00:06:58,720 --> 00:07:01,599
run

00:06:59,120 --> 00:07:03,039
on push requests and pull requests

00:07:01,599 --> 00:07:07,199
whenever we do that

00:07:03,039 --> 00:07:09,039
to the master bra main branch

00:07:07,199 --> 00:07:10,240
next here we are defining the jobs that

00:07:09,039 --> 00:07:11,680
we want to execute

00:07:10,240 --> 00:07:14,400
we're saying we're going to run on

00:07:11,680 --> 00:07:16,479
ubuntu latest there are multiple types

00:07:14,400 --> 00:07:17,840
of different kind of vms available for

00:07:16,479 --> 00:07:19,919
you to execute on

00:07:17,840 --> 00:07:21,120
and i'm going to be running on node

00:07:19,919 --> 00:07:24,160
version 14.

00:07:21,120 --> 00:07:25,599
you can execute on other node versions

00:07:24,160 --> 00:07:28,800
if you want of course

00:07:25,599 --> 00:07:30,319
and then we are using the steps

00:07:28,800 --> 00:07:32,319
a lot of these steps were previously

00:07:30,319 --> 00:07:34,400
provided for us and i've made some

00:07:32,319 --> 00:07:37,280
modifications to help you get started

00:07:34,400 --> 00:07:38,479
faster with your ci pipeline so the very

00:07:37,280 --> 00:07:41,759
first thing we want to do

00:07:38,479 --> 00:07:44,800
is install dependencies um

00:07:41,759 --> 00:07:46,879
and here we are doing exactly what we

00:07:44,800 --> 00:07:47,840
were doing in our command line for our

00:07:46,879 --> 00:07:50,240
application

00:07:47,840 --> 00:07:52,400
and so we would have done cd my app

00:07:50,240 --> 00:07:54,960
right and then done an npm install

00:07:52,400 --> 00:07:55,440
however i'm simply using npmci which is

00:07:54,960 --> 00:07:58,400
actually

00:07:55,440 --> 00:07:59,599
faster in github actions because it ends

00:07:58,400 --> 00:08:01,599
up caching

00:07:59,599 --> 00:08:03,120
our dependencies so this is the

00:08:01,599 --> 00:08:06,319
recommended action to take

00:08:03,120 --> 00:08:08,160
in ci um next we're going to build the

00:08:06,319 --> 00:08:11,039
app right this was just

00:08:08,160 --> 00:08:13,440
um cd to my app and doing an npm run

00:08:11,039 --> 00:08:14,240
build to make sure we have a production

00:08:13,440 --> 00:08:19,520
version

00:08:14,240 --> 00:08:22,720
because whenever we do an npm start here

00:08:19,520 --> 00:08:24,960
and our application comes up here in

00:08:22,720 --> 00:08:28,240
localhost 3000

00:08:24,960 --> 00:08:30,960
and we take a look at our uh react

00:08:28,240 --> 00:08:32,479
developer tools we can see it's red and

00:08:30,960 --> 00:08:34,000
it says this page is using the

00:08:32,479 --> 00:08:35,760
development build of react

00:08:34,000 --> 00:08:37,919
which we obviously don't want to use for

00:08:35,760 --> 00:08:40,080
production we want to use the c uh

00:08:37,919 --> 00:08:40,959
we want to use the production build and

00:08:40,080 --> 00:08:44,480
so that's how

00:08:40,959 --> 00:08:48,160
you do with npm run build

00:08:44,480 --> 00:08:50,880
next we're executing our component tests

00:08:48,160 --> 00:08:52,240
after our app is built we simply do the

00:08:50,880 --> 00:08:53,279
same thing by navigating to that

00:08:52,240 --> 00:08:55,440
directory

00:08:53,279 --> 00:08:56,480
and of running the tests exactly as you

00:08:55,440 --> 00:08:59,600
saw before

00:08:56,480 --> 00:09:02,000
and then finally we are starting up our

00:08:59,600 --> 00:09:04,880
application actually starting the server

00:09:02,000 --> 00:09:07,440
by doing npm start and then we're doing

00:09:04,880 --> 00:09:11,200
a weight on command that will wait

00:09:07,440 --> 00:09:14,399
for the app to start up for up to

00:09:11,200 --> 00:09:17,200
60 seconds before erroring out

00:09:14,399 --> 00:09:17,760
and we will expand this pipeline as we

00:09:17,200 --> 00:09:22,240
expand

00:09:17,760 --> 00:09:24,320
our testing so once it's ready

00:09:22,240 --> 00:09:26,320
um the only reason i recommended to use

00:09:24,320 --> 00:09:27,440
the uh ui was to help you with the

00:09:26,320 --> 00:09:29,839
intellisense

00:09:27,440 --> 00:09:30,959
but ultimately the best way to do it is

00:09:29,839 --> 00:09:33,680
to come

00:09:30,959 --> 00:09:34,240
to my app and then make sure we're gonna

00:09:33,680 --> 00:09:37,920
add

00:09:34,240 --> 00:09:40,959
a uh github

00:09:37,920 --> 00:09:42,640
we're gonna do that github slash

00:09:40,959 --> 00:09:46,800
workflows

00:09:42,640 --> 00:09:47,440
oops and then we're gonna add a new file

00:09:46,800 --> 00:09:51,839
here

00:09:47,440 --> 00:09:51,839
let's call it ci.yamo

00:09:54,240 --> 00:09:59,120
it will look exactly as i showed you

00:09:56,720 --> 00:10:02,160
here i actually named it to ci2

00:09:59,120 --> 00:10:07,519
so that we can see let's quit

00:10:02,160 --> 00:10:07,519
our tests and do it and do a push

00:10:11,680 --> 00:10:17,760
and once we do a push that should start

00:10:14,720 --> 00:10:20,640
executing our ci pipeline let's come and

00:10:17,760 --> 00:10:20,640
take a look at that

00:10:21,040 --> 00:10:25,279
we'll see that i have this new branch

00:10:22,800 --> 00:10:33,839
open so let's go ahead and do a pr

00:10:25,279 --> 00:10:33,839
with this branch

00:10:35,120 --> 00:10:40,320
i made one mistake here i should have

00:10:37,519 --> 00:10:42,800
put github workflows in the very root

00:10:40,320 --> 00:10:45,440
not inside of my app so what you'll see

00:10:42,800 --> 00:10:47,040
is i moved that to the correct location

00:10:45,440 --> 00:10:50,480
did another push

00:10:47,040 --> 00:10:52,480
and so now we have a ci pipeline that

00:10:50,480 --> 00:10:54,800
started executing here's the name

00:10:52,480 --> 00:10:56,160
called ci2 exactly the name that we gave

00:10:54,800 --> 00:10:58,640
it in the gmo file

00:10:56,160 --> 00:11:00,160
and it did fail after nine seconds so

00:10:58,640 --> 00:11:03,279
let's go ahead and take a look

00:11:00,160 --> 00:11:03,279
at exactly what happened

00:11:04,720 --> 00:11:09,839
so the air says that we can only install

00:11:07,040 --> 00:11:13,200
packages with the package lock json

00:11:09,839 --> 00:11:16,720
or npm shrimp json so let's

00:11:13,200 --> 00:11:18,399
go ahead and fix that in order to do

00:11:16,720 --> 00:11:21,760
that what we need to do

00:11:18,399 --> 00:11:25,440
is come to my app

00:11:21,760 --> 00:11:25,440
and do an npm install

00:11:26,880 --> 00:11:43,040
which will create a packagelog.json

00:11:30,399 --> 00:11:46,880
and then let's go ahead and add it

00:11:43,040 --> 00:11:48,880
and we can watch our ci rerun

00:11:46,880 --> 00:11:50,480
here you can see we just committed 14

00:11:48,880 --> 00:11:52,639
seconds ago here's a little yellow

00:11:50,480 --> 00:11:53,440
circle that shows that rci pipeline is

00:11:52,639 --> 00:11:54,959
running

00:11:53,440 --> 00:11:57,839
let's go ahead and take a look at the

00:11:54,959 --> 00:11:57,839
details

00:12:05,440 --> 00:12:12,160
wonderful so there is our ci pipeline

00:12:08,800 --> 00:12:14,320
that is not only able to build our app

00:12:12,160 --> 00:12:15,839
and start it up it's also able to even

00:12:14,320 --> 00:12:18,959
run some component

00:12:15,839 --> 00:12:18,959
tests against it

00:12:20,800 --> 00:12:25,519
so if we take a look of where we are in

00:12:23,839 --> 00:12:27,839
our testing journey

00:12:25,519 --> 00:12:29,600
you can see based on this table that

00:12:27,839 --> 00:12:32,240
we've actually got a

00:12:29,600 --> 00:12:34,880
pretty long way to go before our app is

00:12:32,240 --> 00:12:38,000
fully tested it's a really tiny app

00:12:34,880 --> 00:12:40,800
that we haven't even made any functional

00:12:38,000 --> 00:12:41,680
changes to and so far the only thing

00:12:40,800 --> 00:12:43,519
that we know

00:12:41,680 --> 00:12:45,120
about this application without testing

00:12:43,519 --> 00:12:48,720
it manually is that

00:12:45,120 --> 00:12:51,839
a url with the correct text

00:12:48,720 --> 00:12:53,839
does exist in the dom of the application

00:12:51,839 --> 00:12:54,880
we've validated that with a component

00:12:53,839 --> 00:12:58,480
test

00:12:54,880 --> 00:13:00,959
which came with our app

00:12:58,480 --> 00:13:04,240
create react app and we did that using

00:13:00,959 --> 00:13:06,959
react testing library ingest

00:13:04,240 --> 00:13:09,920
how about actually knowing whether the

00:13:06,959 --> 00:13:12,320
url is correct right it may

00:13:09,920 --> 00:13:13,680
be there with the right text but does it

00:13:12,320 --> 00:13:16,560
go to the right

00:13:13,680 --> 00:13:21,680
location so let's go ahead and write up

00:13:16,560 --> 00:13:24,240
another test for that

00:13:21,680 --> 00:13:24,720
the very first thing that we want to do

00:13:24,240 --> 00:13:27,600
is

00:13:24,720 --> 00:13:29,040
make sure that we are running our test

00:13:27,600 --> 00:13:32,800
suites here

00:13:29,040 --> 00:13:33,680
in and then we can add a test that looks

00:13:32,800 --> 00:13:35,680
like this

00:13:33,680 --> 00:13:37,519
where we say where that we're testing

00:13:35,680 --> 00:13:40,000
that a url

00:13:37,519 --> 00:13:41,920
is correct rendering our component as

00:13:40,000 --> 00:13:42,639
before getting our link element as

00:13:41,920 --> 00:13:44,560
before

00:13:42,639 --> 00:13:46,320
however now we are going to validate

00:13:44,560 --> 00:13:49,480
that the href

00:13:46,320 --> 00:13:52,079
of the link element will contain

00:13:49,480 --> 00:13:56,240
ultimateqa.com because that's

00:13:52,079 --> 00:13:58,399
where we want our url to navigate to

00:13:56,240 --> 00:14:02,240
and then once we hit save watch this

00:13:58,399 --> 00:14:06,079
window in the bottom right

00:14:02,240 --> 00:14:09,040
it's going to execute all of the tests

00:14:06,079 --> 00:14:10,560
in this file here the first one passed

00:14:09,040 --> 00:14:13,760
which makes sense but the second one

00:14:10,560 --> 00:14:14,320
failed the url is correct um it's saying

00:14:13,760 --> 00:14:18,079
that we

00:14:14,320 --> 00:14:21,519
expected ultimateqa.com but we got

00:14:18,079 --> 00:14:22,079
react js.org and that's because we need

00:14:21,519 --> 00:14:23,880
to make an

00:14:22,079 --> 00:14:25,519
update to our application to go to

00:14:23,880 --> 00:14:30,240
ultimateqa.com

00:14:25,519 --> 00:14:31,440
so let's come here and go to app.js and

00:14:30,240 --> 00:14:37,040
we will change

00:14:31,440 --> 00:14:37,040
the url to ultimateqa.com

00:14:37,519 --> 00:14:41,279
we're going to hit save our tests are

00:14:39,920 --> 00:14:46,079
going to rerun

00:14:41,279 --> 00:14:49,360
and now both of them have succeeded

00:14:46,079 --> 00:14:49,920
also while we're here we this linked

00:14:49,360 --> 00:14:52,160
text

00:14:49,920 --> 00:14:53,839
is no longer correct because we're not

00:14:52,160 --> 00:14:55,120
going to learn react instead we are

00:14:53,839 --> 00:14:58,240
going to learn

00:14:55,120 --> 00:15:03,360
testing so let's put

00:14:58,240 --> 00:15:03,360
learn testing and dev

00:15:03,760 --> 00:15:10,720
and hit save now and

00:15:07,680 --> 00:15:13,199
our tests both have failed and

00:15:10,720 --> 00:15:14,560
the reason that they both have failed is

00:15:13,199 --> 00:15:16,720
we can take a look

00:15:14,560 --> 00:15:17,839
at our logs and it's saying that it's

00:15:16,720 --> 00:15:21,440
unable

00:15:17,839 --> 00:15:24,720
to find an element with the text learn

00:15:21,440 --> 00:15:28,000
react um and then it spits out

00:15:24,720 --> 00:15:28,320
the dom for us here showing everything

00:15:28,000 --> 00:15:31,440
that

00:15:28,320 --> 00:15:32,959
it is visible and of course this is the

00:15:31,440 --> 00:15:36,240
text that exists

00:15:32,959 --> 00:15:40,079
however the this exercise also showed us

00:15:36,240 --> 00:15:42,560
that having text as a check in our

00:15:40,079 --> 00:15:43,680
test is not really a good strategy

00:15:42,560 --> 00:15:46,959
because we can

00:15:43,680 --> 00:15:49,759
often change the text of our links

00:15:46,959 --> 00:15:50,720
and so we can instead use a better

00:15:49,759 --> 00:15:55,040
strategy

00:15:50,720 --> 00:15:59,519
such as supplying a data dash attribute

00:15:55,040 --> 00:16:03,839
and so here we can do a data test id

00:15:59,519 --> 00:16:06,839
and we can call it a learn link

00:16:03,839 --> 00:16:09,040
we'll hit save here we'll come back to

00:16:06,839 --> 00:16:12,880
app.test

00:16:09,040 --> 00:16:23,839
and now instead of getting by text

00:16:12,880 --> 00:16:23,839
we can get by id so let's go and do that

00:16:32,079 --> 00:16:37,839
let's give this a run

00:16:42,160 --> 00:16:47,120
and now everything passes because we are

00:16:44,880 --> 00:16:49,120
getting our element by test id

00:16:47,120 --> 00:16:51,839
and of course if we decide to change the

00:16:49,120 --> 00:16:51,839
text

00:16:53,360 --> 00:16:57,199
our tests continue to work

00:16:57,680 --> 00:17:05,839
let's go ahead and push this up into rci

00:17:17,039 --> 00:17:25,520
here's our commit and here is our check

00:17:20,400 --> 00:17:25,520
we can check on it back in a moment

00:17:28,640 --> 00:17:32,640
so our ci pipeline has executed

00:17:31,280 --> 00:17:36,000
successfully

00:17:32,640 --> 00:17:36,320
which is wonderful so let's see where we

00:17:36,000 --> 00:17:40,559
are

00:17:36,320 --> 00:17:43,919
in our testing journey so at this point

00:17:40,559 --> 00:17:46,960
we are we have now tested

00:17:43,919 --> 00:17:47,919
that the url is correct now how about

00:17:46,960 --> 00:17:50,559
making sure that

00:17:47,919 --> 00:17:51,679
our application actually renders

00:17:50,559 --> 00:17:55,039
correctly

00:17:51,679 --> 00:17:57,200
we can do a this test as well as making

00:17:55,039 --> 00:17:59,840
sure that our application looks

00:17:57,200 --> 00:18:01,120
correct on web and mobile using two

00:17:59,840 --> 00:18:03,600
different technologies

00:18:01,120 --> 00:18:04,640
we're going to use web driver io and

00:18:03,600 --> 00:18:07,679
shift right

00:18:04,640 --> 00:18:09,360
by testing our rendered application

00:18:07,679 --> 00:18:11,280
later in the stage of the development

00:18:09,360 --> 00:18:14,480
cycle and

00:18:11,280 --> 00:18:14,960
we're going to use a visual snapshots to

00:18:14,480 --> 00:18:18,559
check

00:18:14,960 --> 00:18:19,600
our application in different resolutions

00:18:18,559 --> 00:18:22,640
in the browser

00:18:19,600 --> 00:18:25,200
to make sure that our app is responsive

00:18:22,640 --> 00:18:26,000
and that it looks correct on different

00:18:25,200 --> 00:18:28,880
types of

00:18:26,000 --> 00:18:30,480
devices and for that we are going to use

00:18:28,880 --> 00:18:34,080
webdriver io

00:18:30,480 --> 00:18:34,080
let's install webdriverio

00:18:35,760 --> 00:18:40,080
let's configure webdriverio

00:18:40,240 --> 00:18:43,840
you're going to get a nice handy menu

00:18:42,960 --> 00:18:45,280
that allows it

00:18:43,840 --> 00:18:47,520
allows you to decide what you're going

00:18:45,280 --> 00:18:48,080
to do so we're going to execute in the

00:18:47,520 --> 00:18:51,120
cloud

00:18:48,080 --> 00:18:51,120
using sauce labs

00:18:51,679 --> 00:18:58,799
yes uh so this will be our username

00:18:55,600 --> 00:19:02,160
and this will be our access key no we

00:18:58,799 --> 00:19:02,160
don't want to do that which is the

00:19:08,840 --> 00:19:11,840
default

00:19:15,120 --> 00:19:20,480
once you've selected all the options uh

00:19:18,720 --> 00:19:25,840
now you're going to wait for webdriverio

00:19:20,480 --> 00:19:25,840
to install all the appropriate packages

00:19:26,080 --> 00:19:29,520
so once all the installation is done the

00:19:28,240 --> 00:19:30,480
only other thing that you'll need to

00:19:29,520 --> 00:19:34,000
install

00:19:30,480 --> 00:19:35,919
is the wdio sync service and so once you

00:19:34,000 --> 00:19:36,480
have everything installed this is what

00:19:35,919 --> 00:19:38,720
our

00:19:36,480 --> 00:19:40,000
package json looks like everything that

00:19:38,720 --> 00:19:42,720
we added

00:19:40,000 --> 00:19:43,200
if we look at the diff you can see we've

00:19:42,720 --> 00:19:47,360
got

00:19:43,200 --> 00:19:51,600
a few w d i o uh services

00:19:47,360 --> 00:19:54,640
added for our testing purposes

00:19:51,600 --> 00:19:56,320
um webdriver io tests by default go to

00:19:54,640 --> 00:20:01,039
test specs directory

00:19:56,320 --> 00:20:01,679
and in here i created a visual.spec.js

00:20:01,039 --> 00:20:03,600
file

00:20:01,679 --> 00:20:05,039
and in here we're going to have our

00:20:03,600 --> 00:20:06,799
visual test

00:20:05,039 --> 00:20:08,640
this visual test uses the standard

00:20:06,799 --> 00:20:10,480
describe it format

00:20:08,640 --> 00:20:12,960
and then the commands come from the

00:20:10,480 --> 00:20:14,640
browser object which is a global object

00:20:12,960 --> 00:20:18,000
from web drive io

00:20:14,640 --> 00:20:18,320
we navigate to a url and then we execute

00:20:18,000 --> 00:20:21,600
two

00:20:18,320 --> 00:20:25,039
important commands first we do

00:20:21,600 --> 00:20:27,280
an init which will provide a name

00:20:25,039 --> 00:20:28,640
for the app that we're testing so we can

00:20:27,280 --> 00:20:31,039
say um

00:20:28,640 --> 00:20:32,320
my react app for example and then the

00:20:31,039 --> 00:20:35,200
next one we're gonna do

00:20:32,320 --> 00:20:36,559
is a snapshot this is capturing a

00:20:35,200 --> 00:20:38,640
snapshot of

00:20:36,559 --> 00:20:40,880
the page that we want to test and so in

00:20:38,640 --> 00:20:45,600
this case it's our home page

00:20:40,880 --> 00:20:45,600
and so we are calling it home

00:20:46,840 --> 00:20:51,919
page

00:20:48,240 --> 00:20:55,440
so the config file for web drive io

00:20:51,919 --> 00:20:57,120
lives over here and there's a lot going

00:20:55,440 --> 00:20:59,280
on in here but that we can take a look

00:20:57,120 --> 00:21:01,840
at only the important components

00:20:59,280 --> 00:21:04,159
so here i've created two constants

00:21:01,840 --> 00:21:05,440
called visual options and source options

00:21:04,159 --> 00:21:08,159
where i am

00:21:05,440 --> 00:21:08,799
setting some api keys here i'm setting

00:21:08,159 --> 00:21:11,919
the

00:21:08,799 --> 00:21:14,000
screener api key i am providing

00:21:11,919 --> 00:21:16,000
a project name i'll show you how that

00:21:14,000 --> 00:21:18,400
correlates to the actual

00:21:16,000 --> 00:21:20,799
ui and then i'm saying to scroll stage

00:21:18,400 --> 00:21:23,200
screenshots to enable that to true

00:21:20,799 --> 00:21:25,200
so that uh when my apps are pulled up

00:21:23,200 --> 00:21:28,559
the entire page is scrolled and

00:21:25,200 --> 00:21:32,080
stitched together next i

00:21:28,559 --> 00:21:35,440
am enabling a source connect

00:21:32,080 --> 00:21:36,559
which is an https proxy that allows me a

00:21:35,440 --> 00:21:40,159
secure connection

00:21:36,559 --> 00:21:43,840
from localhost into the cloud execution

00:21:40,159 --> 00:21:47,600
environments for screener and sauce labs

00:21:43,840 --> 00:21:50,880
this is telling us where the specs are

00:21:47,600 --> 00:21:53,520
for our tests and then finally the most

00:21:50,880 --> 00:21:54,080
important part of this i would say is

00:21:53,520 --> 00:21:56,559
the

00:21:54,080 --> 00:21:57,200
configuration to run on multiple

00:21:56,559 --> 00:21:59,919
different

00:21:57,200 --> 00:22:00,960
browsers and operating systems so i'm

00:21:59,919 --> 00:22:03,120
running this on

00:22:00,960 --> 00:22:04,159
two of the most popular browser

00:22:03,120 --> 00:22:07,440
resolutions

00:22:04,159 --> 00:22:10,240
the very first one is

00:22:07,440 --> 00:22:10,240
this one here

00:22:10,480 --> 00:22:14,799
on this viewport size which is the most

00:22:12,480 --> 00:22:18,480
popular desktop and running on

00:22:14,799 --> 00:22:20,559
windows 10 and chrome and then the other

00:22:18,480 --> 00:22:22,240
type of browser that we're running on is

00:22:20,559 --> 00:22:25,760
mac os safari

00:22:22,240 --> 00:22:28,240
on this resolution which is an iphone x

00:22:25,760 --> 00:22:29,280
viewport size and of course we can have

00:22:28,240 --> 00:22:31,280
a lot more

00:22:29,280 --> 00:22:32,720
resolutions here and what's going to

00:22:31,280 --> 00:22:36,000
happen is

00:22:32,720 --> 00:22:39,520
our visual spec is going to run on

00:22:36,000 --> 00:22:43,360
both of these platforms at the same time

00:22:39,520 --> 00:22:43,360
we can of course run it

00:22:44,080 --> 00:22:48,400
we can run our tests using this command

00:22:47,360 --> 00:22:51,600
here

00:22:48,400 --> 00:22:55,039
but instead let's add a test script

00:22:51,600 --> 00:22:58,880
to our package json

00:22:55,039 --> 00:22:58,880
we can come here and add

00:23:01,679 --> 00:23:06,000
and then ensuring that in a separate

00:23:03,600 --> 00:23:07,679
terminal you have the application

00:23:06,000 --> 00:23:10,559
actually running on

00:23:07,679 --> 00:23:11,520
localhost 3000 because it has to be up

00:23:10,559 --> 00:23:14,240
for us to do

00:23:11,520 --> 00:23:14,720
end-to-end visual testing we can now run

00:23:14,240 --> 00:23:17,840
our

00:23:14,720 --> 00:23:17,840
visual testing command

00:23:19,600 --> 00:23:22,880
at this point we can see that it's

00:23:21,200 --> 00:23:24,880
executing two specs

00:23:22,880 --> 00:23:26,000
and of course that's our safari and

00:23:24,880 --> 00:23:27,840
chrome specs

00:23:26,000 --> 00:23:29,440
let's go take a look at the screener ui

00:23:27,840 --> 00:23:32,640
to see what's going on over there

00:23:29,440 --> 00:23:33,120
so we can see that uh here is our new

00:23:32,640 --> 00:23:35,919
app

00:23:33,120 --> 00:23:36,799
dash two that we started there are

00:23:35,919 --> 00:23:39,520
currently

00:23:36,799 --> 00:23:39,520
tests running

00:23:41,440 --> 00:23:44,960
the build has failed and the reason why

00:23:43,279 --> 00:23:47,600
it failed is because we have

00:23:44,960 --> 00:23:49,039
two brand new snapshots that we've never

00:23:47,600 --> 00:23:51,440
accepted before

00:23:49,039 --> 00:23:52,320
what screener is currently telling us is

00:23:51,440 --> 00:23:55,600
that hey

00:23:52,320 --> 00:23:58,000
i've got these two snapshots of

00:23:55,600 --> 00:23:59,360
these resolutions of this page here of

00:23:58,000 --> 00:24:01,760
the home page

00:23:59,360 --> 00:24:04,480
and i don't know whether they are

00:24:01,760 --> 00:24:06,960
acceptable to you or not so we can open

00:24:04,480 --> 00:24:09,760
each one up and take a look does this

00:24:06,960 --> 00:24:11,440
look good to us and correct yes it does

00:24:09,760 --> 00:24:13,440
we can come here and set this as a

00:24:11,440 --> 00:24:15,360
baseline from this point forward

00:24:13,440 --> 00:24:16,799
every single automated test will

00:24:15,360 --> 00:24:19,600
validate against

00:24:16,799 --> 00:24:21,760
this version of the baseline and this is

00:24:19,600 --> 00:24:24,240
the bigger resolution here

00:24:21,760 --> 00:24:24,799
and this one looks fantastic to us as

00:24:24,240 --> 00:24:28,799
well

00:24:24,799 --> 00:24:28,799
let's go ahead and accept it

00:24:29,200 --> 00:24:32,640
and so now from this point forward and

00:24:30,799 --> 00:24:33,760
new executions will run against those

00:24:32,640 --> 00:24:36,880
baselines

00:24:33,760 --> 00:24:39,679
let's also now add this visual step to

00:24:36,880 --> 00:24:42,320
our ci pipeline and see that execute

00:24:39,679 --> 00:24:45,520
here we are back in rci yaml

00:24:42,320 --> 00:24:48,400
we've added a brand new step our after

00:24:45,520 --> 00:24:49,200
application has rendered to run visual

00:24:48,400 --> 00:24:51,120
tests

00:24:49,200 --> 00:24:52,559
and performing the following commands

00:24:51,120 --> 00:24:55,760
let's go ahead and check all this into

00:24:52,559 --> 00:24:55,760
ci and see what happens

00:24:58,240 --> 00:25:01,520
we've got a new commit here for adding

00:25:00,559 --> 00:25:05,919
visual tests

00:25:01,520 --> 00:25:05,919
and here is our ci pipeline executing

00:25:06,559 --> 00:25:10,559
so here's our pipeline after execution

00:25:08,880 --> 00:25:13,039
we can see our visual tests have

00:25:10,559 --> 00:25:15,279
executed successfully with a check mark

00:25:13,039 --> 00:25:18,720
and if we scroll all the way down we can

00:25:15,279 --> 00:25:18,720
see that two tests have passed

00:25:20,400 --> 00:25:23,840
so the current version of our

00:25:21,679 --> 00:25:26,320
application it's a little boring right

00:25:23,840 --> 00:25:28,000
let's make it a little bit better and

00:25:26,320 --> 00:25:30,640
actually see the power of

00:25:28,000 --> 00:25:33,360
visual testing so we're going to replace

00:25:30,640 --> 00:25:37,919
this logo with another logo

00:25:33,360 --> 00:25:40,640
by coming into app.js

00:25:37,919 --> 00:25:41,679
and we can see that up here at the top

00:25:40,640 --> 00:25:45,600
we're pointing to an

00:25:41,679 --> 00:25:46,559
svg let's change this svg and instead

00:25:45,600 --> 00:25:51,120
we're gonna point

00:25:46,559 --> 00:25:54,240
to mia.jpg which is a

00:25:51,120 --> 00:25:56,000
nice file that i've uploaded so let's

00:25:54,240 --> 00:25:58,320
save that and watch our application

00:25:56,000 --> 00:25:59,200
render and here is the cutest little dog

00:25:58,320 --> 00:26:02,000
in the world

00:25:59,200 --> 00:26:03,440
her name is mia and of course we can

00:26:02,000 --> 00:26:05,840
also even

00:26:03,440 --> 00:26:05,840
change

00:26:06,559 --> 00:26:11,200
this link right here to chat be instead

00:26:09,039 --> 00:26:16,240
of learn testing we can change it to

00:26:11,200 --> 00:26:20,799
something else we can say learn testing

00:26:16,240 --> 00:26:24,720
with nikolai and mia

00:26:20,799 --> 00:26:27,919
fantastic our application rebuilt

00:26:24,720 --> 00:26:31,760
and this is what it looks like

00:26:27,919 --> 00:26:33,520
and we can even run our tests

00:26:31,760 --> 00:26:37,360
to make sure that everything is working

00:26:33,520 --> 00:26:37,360
as before our component tests

00:26:37,760 --> 00:26:42,159
both of them working successfully

00:26:39,760 --> 00:26:44,799
because remember we added that nice

00:26:42,159 --> 00:26:46,159
data test id attribute and now we can

00:26:44,799 --> 00:26:53,440
check in these changes and see what

00:26:46,159 --> 00:26:57,200
happens to our visual tests

00:26:53,440 --> 00:27:00,960
here's our change in github

00:26:57,200 --> 00:27:04,080
let's see what's going on

00:27:00,960 --> 00:27:05,200
so now if we look at the screener ui we

00:27:04,080 --> 00:27:08,400
can see that

00:27:05,200 --> 00:27:08,799
our new app 2 has two changes let's

00:27:08,400 --> 00:27:10,159
click

00:27:08,799 --> 00:27:12,240
take a look and see exactly what

00:27:10,159 --> 00:27:14,480
happened and so

00:27:12,240 --> 00:27:15,360
what screener shows is two visual

00:27:14,480 --> 00:27:18,159
changes that

00:27:15,360 --> 00:27:19,200
have occurred a screener uses a smart

00:27:18,159 --> 00:27:21,520
hybrid div

00:27:19,200 --> 00:27:23,200
meaning that it analyzes the dom and

00:27:21,520 --> 00:27:25,120
element shifts

00:27:23,200 --> 00:27:26,720
and it identifies exactly the two

00:27:25,120 --> 00:27:28,480
elements that we have changed

00:27:26,720 --> 00:27:30,640
and so now as far as to decide whether

00:27:28,480 --> 00:27:32,799
this is a valid change or not

00:27:30,640 --> 00:27:35,120
and yes this is a valid change and it

00:27:32,799 --> 00:27:37,039
looks fantastic and we want to use this

00:27:35,120 --> 00:27:39,279
as the new version of the baseline

00:27:37,039 --> 00:27:40,240
so we're going to accept this one

00:27:39,279 --> 00:27:42,880
looking at

00:27:40,240 --> 00:27:44,159
this page here we like all of the

00:27:42,880 --> 00:27:47,120
changes here as well

00:27:44,159 --> 00:27:48,159
and we can accept that as well and with

00:27:47,120 --> 00:27:51,760
all of that said we

00:27:48,159 --> 00:27:53,120
are pretty far down in our coding and

00:27:51,760 --> 00:27:55,440
the testing journey

00:27:53,120 --> 00:27:57,600
we validated pretty much everything

00:27:55,440 --> 00:28:00,720
about our application

00:27:57,600 --> 00:28:01,440
um we validated that the app renders

00:28:00,720 --> 00:28:06,240
correctly

00:28:01,440 --> 00:28:06,240
and that the app looks as expected

00:28:06,640 --> 00:28:10,880
on web and mobile using our visual dom

00:28:09,600 --> 00:28:13,120
to database tests

00:28:10,880 --> 00:28:15,279
also known as end-to-end tests and we

00:28:13,120 --> 00:28:18,320
did it with the following technologies

00:28:15,279 --> 00:28:21,360
there is still a lot further to go

00:28:18,320 --> 00:28:23,840
and a lot more to test however

00:28:21,360 --> 00:28:25,039
this is all the time that we have today

00:28:23,840 --> 00:28:27,919
and this is where

00:28:25,039 --> 00:28:29,520
we have to part ways so thank you so

00:28:27,919 --> 00:28:32,640
much for tuning in today

00:28:29,520 --> 00:28:35,039
to watch my tutorial in summary

00:28:32,640 --> 00:28:37,200
we learned how to create a simple react

00:28:35,039 --> 00:28:39,840
web app using create react app

00:28:37,200 --> 00:28:41,120
we added component tests using react

00:28:39,840 --> 00:28:44,399
testing library

00:28:41,120 --> 00:28:46,320
we shifted right by adding visual tests

00:28:44,399 --> 00:28:48,720
using webdriver io and screener

00:28:46,320 --> 00:28:49,440
and then we put it all into a ci

00:28:48,720 --> 00:28:51,679
pipeline

00:28:49,440 --> 00:28:52,960
using github actions that executes on

00:28:51,679 --> 00:28:55,919
push and

00:28:52,960 --> 00:28:57,120
pull requests it's been my pleasure if

00:28:55,919 --> 00:28:59,120
you want to

00:28:57,120 --> 00:29:00,960
learn more you can always reach out to

00:28:59,120 --> 00:29:03,440
me at ultimate2a.com

00:29:00,960 --> 00:29:04,159
or my social medias and i'd be happy to

00:29:03,440 --> 00:29:08,159
connect

00:29:04,159 --> 00:29:08,159

YouTube URL: https://www.youtube.com/watch?v=bJBDsLOpHHs


