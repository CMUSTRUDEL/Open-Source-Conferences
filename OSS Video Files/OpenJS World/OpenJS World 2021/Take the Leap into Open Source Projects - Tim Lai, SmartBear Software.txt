Title: Take the Leap into Open Source Projects - Tim Lai, SmartBear Software
Publication date: 2021-05-28
Playlist: OpenJS World 2021
Description: 
	Regardless of experience or expertise, many developers seem intimidated or hesitant to start working on open source projects. You might be a first-time contributor to open source, or a first-time contributor to a larger project, or perhaps you are a first-time maintainer or community manager. Remote work and asynchronous communication donâ€™t make this any easier. However, the steps you take to be a successful open source contributor is much like onboarding to a new job. Tim Lai, software engineer at SmartBear and maintainer of open source projects, SwaggerUI, SwaggerEditor, and SwaggerClient, discusses specific strategies that have proven successful to 1) alleviate developer angst, 2) produce meaningful pull requests that match your expertise, and 3) create a roadmap to becoming a frequent open source contributor.
Captions: 
	00:00:00,799 --> 00:00:06,399
hi welcome to openjs world 2021

00:00:04,240 --> 00:00:09,280
my name is tim lai and this is my talk

00:00:06,399 --> 00:00:11,120
on take the leap into open source

00:00:09,280 --> 00:00:12,880
this talk is pretty much for anyone

00:00:11,120 --> 00:00:15,360
since regardless of experience or

00:00:12,880 --> 00:00:18,240
expertise it can be intimidating to get

00:00:15,360 --> 00:00:20,720
started in a new open source project

00:00:18,240 --> 00:00:22,160
you might be the first time contributor

00:00:20,720 --> 00:00:25,359
or stepping into a much higher

00:00:22,160 --> 00:00:27,279
visibility project that you are used to

00:00:25,359 --> 00:00:29,279
whatever the reason you might not feel

00:00:27,279 --> 00:00:31,840
so qualified to contribute to open

00:00:29,279 --> 00:00:31,840
source

00:00:34,559 --> 00:00:38,480
first a little bit about me i spent most

00:00:37,120 --> 00:00:39,760
of my career helping people and

00:00:38,480 --> 00:00:42,879
companies grow

00:00:39,760 --> 00:00:46,800
in both technical and non-technical ways

00:00:42,879 --> 00:00:49,120
my current role is with smartbear

00:00:46,800 --> 00:00:51,039
and it's to help make it easier for

00:00:49,120 --> 00:00:54,239
developers to use swagger tools such as

00:00:51,039 --> 00:00:56,399
swagger ui and switcher editor

00:00:54,239 --> 00:00:58,800
previously i was a vp of engineering and

00:00:56,399 --> 00:01:00,640
lead engineer for notarycam

00:00:58,800 --> 00:01:02,960
and prior to that i spent many years at

00:01:00,640 --> 00:01:05,519
intel working with clients of all sizes

00:01:02,960 --> 00:01:06,640
to holistically grow their expertise

00:01:05,519 --> 00:01:10,159
whether it's technical

00:01:06,640 --> 00:01:13,840
marketing or any other business related

00:01:10,159 --> 00:01:13,840
activity that was needed to grow

00:01:18,000 --> 00:01:22,320
so that's why we're here today how do we

00:01:20,400 --> 00:01:24,320
get started and develop processes in a

00:01:22,320 --> 00:01:26,240
holistic manner

00:01:24,320 --> 00:01:28,000
over the next 20 minutes or so i'd like

00:01:26,240 --> 00:01:28,479
to share some of my experiences on how

00:01:28,000 --> 00:01:31,280
to

00:01:28,479 --> 00:01:32,640
get started make impactful contributions

00:01:31,280 --> 00:01:40,799
and pull requests

00:01:32,640 --> 00:01:42,560
and create a roadmap to success

00:01:40,799 --> 00:01:44,399
when you get into something new whether

00:01:42,560 --> 00:01:46,240
it is a new project or a new job

00:01:44,399 --> 00:01:47,840
there could be many new traits factors

00:01:46,240 --> 00:01:50,000
or changes consider

00:01:47,840 --> 00:01:52,560
like what you can see on the screen and

00:01:50,000 --> 00:01:55,680
i think what my head is hiding is

00:01:52,560 --> 00:01:58,399
single user versus enterprise

00:01:55,680 --> 00:01:59,840
so i can share a story about me when i

00:01:58,399 --> 00:02:01,520
joined smart bear

00:01:59,840 --> 00:02:04,479
i had to learn about the various swagger

00:02:01,520 --> 00:02:08,160
tools for build on release processes

00:02:04,479 --> 00:02:10,000
as well as the open api specification

00:02:08,160 --> 00:02:11,440
i was also joining an entirely

00:02:10,000 --> 00:02:12,959
distributed team

00:02:11,440 --> 00:02:14,720
although that was something i was very

00:02:12,959 --> 00:02:18,319
comfortable with and

00:02:14,720 --> 00:02:19,440
used to working with in addition

00:02:18,319 --> 00:02:22,400
although i was familiar with the

00:02:19,440 --> 00:02:25,840
technologies behind the swagger tools

00:02:22,400 --> 00:02:26,720
such as react and redux there are still

00:02:25,840 --> 00:02:28,720
many specific

00:02:26,720 --> 00:02:31,120
implementation details and nuances to

00:02:28,720 --> 00:02:33,040
get comfortable with

00:02:31,120 --> 00:02:34,879
so this might all sound familiar to you

00:02:33,040 --> 00:02:36,959
and that's why we are here today

00:02:34,879 --> 00:02:37,920
there's so many new things and it can't

00:02:36,959 --> 00:02:41,440
seem

00:02:37,920 --> 00:02:41,440
intimidating to get started

00:02:42,720 --> 00:02:47,040
so the first thing to do that i would

00:02:44,400 --> 00:02:48,640
advise is just to take a deep breath

00:02:47,040 --> 00:02:50,800
you know everyone here today has

00:02:48,640 --> 00:02:52,800
expertise to contribute

00:02:50,800 --> 00:02:54,879
we all know how to solve problems so

00:02:52,800 --> 00:02:58,400
this specifically how to break our

00:02:54,879 --> 00:03:00,080
problems into smaller bite-sized tasks

00:02:58,400 --> 00:03:02,239
it's like building a house bricked by a

00:03:00,080 --> 00:03:04,080
brick but like building a house you

00:03:02,239 --> 00:03:06,319
probably don't know how to do everything

00:03:04,080 --> 00:03:08,080
yourself you might be an expert at

00:03:06,319 --> 00:03:09,920
something like plumbing

00:03:08,080 --> 00:03:13,280
but unfamiliar with something else like

00:03:09,920 --> 00:03:14,640
roofing or putting up drywall

00:03:13,280 --> 00:03:17,280
even if you are a good general

00:03:14,640 --> 00:03:18,239
contractor where you probably can do all

00:03:17,280 --> 00:03:20,800
the basic

00:03:18,239 --> 00:03:22,319
things yourself but still most likely

00:03:20,800 --> 00:03:24,159
experts who can do specific things

00:03:22,319 --> 00:03:26,959
faster and better than you

00:03:24,159 --> 00:03:28,480
and that's okay there's always more to

00:03:26,959 --> 00:03:30,959
learn and improve and everybody has

00:03:28,480 --> 00:03:33,280
different skill sets

00:03:30,959 --> 00:03:36,159
with that said you can still go and

00:03:33,280 --> 00:03:36,159
build that house

00:03:38,720 --> 00:03:42,319
so now that we remember that we are all

00:03:40,480 --> 00:03:44,840
capable let's talk about what we can

00:03:42,319 --> 00:03:46,000
contribute and what contributions can be

00:03:44,840 --> 00:03:47,120
impactful

00:03:46,000 --> 00:03:50,400
the short answer is that all

00:03:47,120 --> 00:03:52,400
contributions can be impactful

00:03:50,400 --> 00:03:54,400
now most people probably look at their

00:03:52,400 --> 00:03:57,519
expertise and see what they match

00:03:54,400 --> 00:03:58,959
with what i call core features these are

00:03:57,519 --> 00:04:01,680
things that include like the front end

00:03:58,959 --> 00:04:02,959
like react and angular or the back end

00:04:01,680 --> 00:04:06,239
like node

00:04:02,959 --> 00:04:08,239
next.js spring boot or cola

00:04:06,239 --> 00:04:12,720
or even ui design with various design

00:04:08,239 --> 00:04:12,720
tools to help you implement your ui

00:04:13,680 --> 00:04:17,120
but there's a lot more than what i

00:04:15,120 --> 00:04:19,680
consider core features

00:04:17,120 --> 00:04:21,519
for example we have expanded tool sets

00:04:19,680 --> 00:04:22,479
because once we have an application we

00:04:21,519 --> 00:04:24,080
need to be able to

00:04:22,479 --> 00:04:26,880
bundle build and distribute the

00:04:24,080 --> 00:04:28,960
application and ideally we also have

00:04:26,880 --> 00:04:32,560
continuous integration and deployment as

00:04:28,960 --> 00:04:32,560
part of the rule release workflow

00:04:34,240 --> 00:04:38,080
the second major topic that people think

00:04:36,639 --> 00:04:39,280
of when they are trying to figure out if

00:04:38,080 --> 00:04:41,600
they can contribute

00:04:39,280 --> 00:04:42,720
is if they are a subject matter expert

00:04:41,600 --> 00:04:44,880
or

00:04:42,720 --> 00:04:47,199
some in-depth knowledge of a specific

00:04:44,880 --> 00:04:50,960
technology

00:04:47,199 --> 00:04:50,960
so i have to be a react expert

00:04:51,440 --> 00:04:55,360
or i have to be an express expert or i

00:04:54,720 --> 00:04:58,560
have to be an

00:04:55,360 --> 00:05:00,240
expert with open api and the fact of the

00:04:58,560 --> 00:05:02,080
matter is that it really depends on the

00:05:00,240 --> 00:05:04,160
project and the project needs

00:05:02,080 --> 00:05:05,840
of how quote unquote expert you really

00:05:04,160 --> 00:05:07,840
need to be

00:05:05,840 --> 00:05:09,680
in this case of swagger ui depending on

00:05:07,840 --> 00:05:10,479
what you're working on it might be very

00:05:09,680 --> 00:05:13,680
valuable to

00:05:10,479 --> 00:05:16,240
be an open api subject matter expert

00:05:13,680 --> 00:05:17,759
i can say that when i started though i

00:05:16,240 --> 00:05:20,639
was not a subject matter

00:05:17,759 --> 00:05:22,080
expert with this specification but there

00:05:20,639 --> 00:05:25,840
were definitely other areas that i could

00:05:22,080 --> 00:05:25,840
immediately contribute

00:05:26,080 --> 00:05:29,759
so next in terms of contributions there

00:05:28,560 --> 00:05:32,080
are tests

00:05:29,759 --> 00:05:34,000
so there's unit tests end-to-end tests

00:05:32,080 --> 00:05:36,320
and ideally continuous integration that

00:05:34,000 --> 00:05:37,919
integrates all those tests

00:05:36,320 --> 00:05:40,000
you might be using or working with a

00:05:37,919 --> 00:05:41,759
project when you realize that a project

00:05:40,000 --> 00:05:43,680
might be locking quality tests

00:05:41,759 --> 00:05:45,280
or coverage and tests or even a

00:05:43,680 --> 00:05:46,720
framework itself for different types of

00:05:45,280 --> 00:05:48,160
tests

00:05:46,720 --> 00:05:49,520
in this case you could start from the

00:05:48,160 --> 00:05:53,840
ground floor by building the test

00:05:49,520 --> 00:05:53,840
framework and infrastructure

00:05:54,800 --> 00:05:58,160
another area for contributions is code

00:05:57,120 --> 00:06:00,160
quality

00:05:58,160 --> 00:06:02,080
and this is not about delivering code

00:06:00,160 --> 00:06:05,120
necessarily but this is around

00:06:02,080 --> 00:06:06,639
revealing code or putting in tools

00:06:05,120 --> 00:06:09,120
to make sure style guides and other

00:06:06,639 --> 00:06:11,840
workflow checks are followed

00:06:09,120 --> 00:06:13,360
so like tests many projects could use

00:06:11,840 --> 00:06:14,240
helpful tool and infrastructure around

00:06:13,360 --> 00:06:16,240
code quality

00:06:14,240 --> 00:06:17,440
to make it easier and more efficient

00:06:16,240 --> 00:06:21,840
workflows

00:06:17,440 --> 00:06:21,840
for developers

00:06:22,400 --> 00:06:27,520
the next topic is around documentation

00:06:25,280 --> 00:06:29,360
and community management

00:06:27,520 --> 00:06:31,120
the reason i bundled these two together

00:06:29,360 --> 00:06:32,560
is because historically people think of

00:06:31,120 --> 00:06:34,720
documentation is about

00:06:32,560 --> 00:06:37,520
how do i start with a project or how do

00:06:34,720 --> 00:06:39,840
i build the application on my system

00:06:37,520 --> 00:06:41,919
but it can be a lot more than that in

00:06:39,840 --> 00:06:43,360
case of swagger dui

00:06:41,919 --> 00:06:44,960
there are documentation about the open

00:06:43,360 --> 00:06:46,720
api specification

00:06:44,960 --> 00:06:48,720
there's documentation on configuring and

00:06:46,720 --> 00:06:50,479
customizing the swagger ui experience

00:06:48,720 --> 00:06:52,240
for your end users

00:06:50,479 --> 00:06:54,319
and we have documentation on extended

00:06:52,240 --> 00:06:56,319
swagger ui itself to meet your specific

00:06:54,319 --> 00:06:58,319
needs

00:06:56,319 --> 00:06:59,520
and then again more generally there are

00:06:58,319 --> 00:07:02,560
contribution guides

00:06:59,520 --> 00:07:06,800
style guides as well as documentation

00:07:02,560 --> 00:07:06,800
around use cases and examples

00:07:08,080 --> 00:07:11,680
so with community management if you have

00:07:09,840 --> 00:07:13,840
custom something like customization

00:07:11,680 --> 00:07:15,680
features in your application

00:07:13,840 --> 00:07:17,520
you know and if you have documentation

00:07:15,680 --> 00:07:19,199
for it it might not be quickly found by

00:07:17,520 --> 00:07:21,440
some users

00:07:19,199 --> 00:07:22,880
so people might be asking and creating

00:07:21,440 --> 00:07:25,599
tickets asking

00:07:22,880 --> 00:07:27,039
how do i do xyz things to which you can

00:07:25,599 --> 00:07:29,280
contribute by saying

00:07:27,039 --> 00:07:30,240
hey you can go to this particular area

00:07:29,280 --> 00:07:33,120
of the application

00:07:30,240 --> 00:07:34,560
to do whatever you're trying to do so

00:07:33,120 --> 00:07:35,919
you as a power user

00:07:34,560 --> 00:07:38,160
can share your knowledge and help with

00:07:35,919 --> 00:07:40,800
the community

00:07:38,160 --> 00:07:41,280
another example is familiarity with past

00:07:40,800 --> 00:07:42,880
issues

00:07:41,280 --> 00:07:45,039
where you can help direct a person to

00:07:42,880 --> 00:07:47,199
know or resolve tickets

00:07:45,039 --> 00:07:49,199
and if a question is asked often enough

00:07:47,199 --> 00:07:50,639
perhaps it can be added to a fact or

00:07:49,199 --> 00:07:52,479
wiki

00:07:50,639 --> 00:07:54,960
so with these examples you can see

00:07:52,479 --> 00:07:57,120
documentation community management

00:07:54,960 --> 00:07:59,840
again depending on the situation can be

00:07:57,120 --> 00:07:59,840
very related

00:08:01,360 --> 00:08:04,960
and finally the last topic about

00:08:03,280 --> 00:08:08,160
contributions is that you don't

00:08:04,960 --> 00:08:08,720
actually have to write code i've alluded

00:08:08,160 --> 00:08:11,919
it

00:08:08,720 --> 00:08:13,199
alluded to it in documentation and tools

00:08:11,919 --> 00:08:16,400
and things like that

00:08:13,199 --> 00:08:18,560
which regarding tools you might have to

00:08:16,400 --> 00:08:20,720
do configuration or subscripts

00:08:18,560 --> 00:08:23,039
but they are not necessarily all code

00:08:20,720 --> 00:08:23,039
based

00:08:24,560 --> 00:08:28,000
so to recap about impactful

00:08:26,800 --> 00:08:29,759
contributions

00:08:28,000 --> 00:08:31,759
there are a lot of different areas to

00:08:29,759 --> 00:08:33,200
contribute and it really depends on the

00:08:31,759 --> 00:08:34,479
project

00:08:33,200 --> 00:08:36,159
and if you think about it from a

00:08:34,479 --> 00:08:37,839
software engineering perspective this

00:08:36,159 --> 00:08:39,680
slide pretty much covers anything that

00:08:37,839 --> 00:08:41,599
might be needed

00:08:39,680 --> 00:08:43,279
now there's always more always some

00:08:41,599 --> 00:08:45,040
specific expertise needed to make

00:08:43,279 --> 00:08:46,800
something better and more efficient

00:08:45,040 --> 00:08:55,440
but that's where you come in because you

00:08:46,800 --> 00:08:57,440
have a lot of expertise to contribute

00:08:55,440 --> 00:08:59,360
all right so let's talk about effective

00:08:57,440 --> 00:09:01,440
pull requests

00:08:59,360 --> 00:09:02,959
now anyone can open a pull request and

00:09:01,440 --> 00:09:07,120
the pull request can pretty much be

00:09:02,959 --> 00:09:10,720
for anything however the key point

00:09:07,120 --> 00:09:12,959
for me for an effective pull request is

00:09:10,720 --> 00:09:15,600
by asking the questions is this pull

00:09:12,959 --> 00:09:17,600
request easily understood

00:09:15,600 --> 00:09:19,360
is this pull request easily evaluated

00:09:17,600 --> 00:09:20,800
and reproduced

00:09:19,360 --> 00:09:23,519
so doing things like you're really

00:09:20,800 --> 00:09:26,160
focused on mentally

00:09:23,519 --> 00:09:27,760
sized pull requests is very helpful

00:09:26,160 --> 00:09:28,080
because you are limiting your scope to

00:09:27,760 --> 00:09:30,160
be

00:09:28,080 --> 00:09:32,959
what can be easily tested and validated

00:09:30,160 --> 00:09:35,600
against existing systems

00:09:32,959 --> 00:09:36,320
now this pull request also needs to be

00:09:35,600 --> 00:09:38,399
effective

00:09:36,320 --> 00:09:40,560
right so things that go into an

00:09:38,399 --> 00:09:42,959
effective pull request include

00:09:40,560 --> 00:09:45,120
follow the project style guide include

00:09:42,959 --> 00:09:47,040
the supporting tests that you are adding

00:09:45,120 --> 00:09:48,959
as a feature or fixing

00:09:47,040 --> 00:09:50,720
providing documentation to recreate its

00:09:48,959 --> 00:09:53,200
effectiveness

00:09:50,720 --> 00:09:55,920
and then ideally include before after

00:09:53,200 --> 00:09:55,920
screen shots

00:09:58,640 --> 00:10:02,399
so all of this work to create a pull

00:10:00,399 --> 00:10:04,320
request is done to make it as easy as

00:10:02,399 --> 00:10:07,279
possible for maintainers and reviewers

00:10:04,320 --> 00:10:08,640
to evaluate your proposed changes in

00:10:07,279 --> 00:10:09,680
general

00:10:08,640 --> 00:10:12,000
and definitely for the first time

00:10:09,680 --> 00:10:13,120
contributors expect to receive feedback

00:10:12,000 --> 00:10:16,000
on how to make your

00:10:13,120 --> 00:10:17,200
pull request even better it's not so

00:10:16,000 --> 00:10:20,000
much for all the grammar

00:10:17,200 --> 00:10:20,399
or required fields in a template but for

00:10:20,000 --> 00:10:22,079
the

00:10:20,399 --> 00:10:26,000
clarification and suggestions and for

00:10:22,079 --> 00:10:29,200
changes to be more durable and effective

00:10:26,000 --> 00:10:31,040
so an example of this is that you might

00:10:29,200 --> 00:10:32,399
make a change to render some data more

00:10:31,040 --> 00:10:34,240
accurately

00:10:32,399 --> 00:10:37,200
and you provide a test to demonstrate

00:10:34,240 --> 00:10:38,800
that the code change works

00:10:37,200 --> 00:10:40,480
but during testing a reviewer might

00:10:38,800 --> 00:10:42,240
discover a related problem

00:10:40,480 --> 00:10:44,880
that may or may not have been caused by

00:10:42,240 --> 00:10:46,720
a code change

00:10:44,880 --> 00:10:48,240
regardless the project itself might be

00:10:46,720 --> 00:10:50,560
missing related functional tests that

00:10:48,240 --> 00:10:52,720
you are not aware of

00:10:50,560 --> 00:10:54,399
so you might be requested to update your

00:10:52,720 --> 00:10:55,680
code and pull requests to also adjust

00:10:54,399 --> 00:10:56,800
the newly discovered gap of

00:10:55,680 --> 00:11:01,839
functionality

00:10:56,800 --> 00:11:01,839
and or tests

00:11:02,880 --> 00:11:06,640
another topic around pull requests to

00:11:05,600 --> 00:11:09,279
make them effective

00:11:06,640 --> 00:11:11,360
is say if you're a power user of a

00:11:09,279 --> 00:11:12,720
particular application or tool

00:11:11,360 --> 00:11:14,480
you can share your knowledge and other

00:11:12,720 --> 00:11:16,240
people's pull requests

00:11:14,480 --> 00:11:18,720
you can help clarify other people's pull

00:11:16,240 --> 00:11:20,720
requests with additional examples

00:11:18,720 --> 00:11:22,240
and these examples could be about how to

00:11:20,720 --> 00:11:25,279
reproduce something

00:11:22,240 --> 00:11:26,880
in a different manner or these examples

00:11:25,279 --> 00:11:29,440
could be also used as

00:11:26,880 --> 00:11:32,399
part of the proposed test suite to

00:11:29,440 --> 00:11:32,399
validate against

00:11:32,640 --> 00:11:36,720
you can also link to other issues and

00:11:34,480 --> 00:11:40,399
pull requests or work in progress

00:11:36,720 --> 00:11:42,640
or already resolved this might help with

00:11:40,399 --> 00:11:44,800
duplicative efforts

00:11:42,640 --> 00:11:46,720
and it might also help uh start a

00:11:44,800 --> 00:11:49,760
community conversation on making a pull

00:11:46,720 --> 00:11:51,839
request more effective

00:11:49,760 --> 00:11:53,600
and note that this type of contribution

00:11:51,839 --> 00:11:54,720
does not necessarily mean writing code

00:11:53,600 --> 00:11:56,959
yourself right maybe

00:11:54,720 --> 00:12:00,639
do some snippets but otherwise it's more

00:11:56,959 --> 00:12:00,639
of a collaboration process

00:12:03,680 --> 00:12:07,760
the last topic about pull requests is

00:12:06,160 --> 00:12:09,600
around awareness of

00:12:07,760 --> 00:12:10,880
impact to upstream and downstream

00:12:09,600 --> 00:12:13,279
projects

00:12:10,880 --> 00:12:14,560
now i think it is unrealistic that you

00:12:13,279 --> 00:12:16,720
should be expected to know every

00:12:14,560 --> 00:12:17,839
combination or permutation of how

00:12:16,720 --> 00:12:20,959
everyone else might be

00:12:17,839 --> 00:12:22,880
implementing the application

00:12:20,959 --> 00:12:24,079
but i think a good analogy here would be

00:12:22,880 --> 00:12:27,760
working with teams

00:12:24,079 --> 00:12:29,200
in your job you are a part of a team

00:12:27,760 --> 00:12:31,120
and there might be multiple teams in

00:12:29,200 --> 00:12:32,720
your organization and you might be also

00:12:31,120 --> 00:12:33,440
be working with partners from a third

00:12:32,720 --> 00:12:37,519
party

00:12:33,440 --> 00:12:39,839
company basically anything you could do

00:12:37,519 --> 00:12:42,880
or anything you could anything you do

00:12:39,839 --> 00:12:45,040
could have an impact on other teams

00:12:42,880 --> 00:12:46,880
so similarly here with pull requests

00:12:45,040 --> 00:12:47,839
your what could have an impact on other

00:12:46,880 --> 00:12:50,480
projects

00:12:47,839 --> 00:12:52,560
right so again this is where tests and

00:12:50,480 --> 00:12:54,399
test coverage really help

00:12:52,560 --> 00:12:56,079
but we also just talked about possible

00:12:54,399 --> 00:12:58,240
gaps in test coverage

00:12:56,079 --> 00:13:00,720
so despite any existing testing

00:12:58,240 --> 00:13:03,120
framework as well as your own work

00:13:00,720 --> 00:13:04,720
to provide tests problems might still

00:13:03,120 --> 00:13:07,279
arise

00:13:04,720 --> 00:13:09,200
and if this is a situation well clearly

00:13:07,279 --> 00:13:12,240
it's not your fault right

00:13:09,200 --> 00:13:13,839
um and as you get more experience with

00:13:12,240 --> 00:13:16,160
the project

00:13:13,839 --> 00:13:17,680
you might be able to be more proactive

00:13:16,160 --> 00:13:20,320
in identifying

00:13:17,680 --> 00:13:21,279
you know potential impact or issues but

00:13:20,320 --> 00:13:23,120
for now

00:13:21,279 --> 00:13:24,560
the key is just to be aware that this is

00:13:23,120 --> 00:13:27,760
a possibility

00:13:24,560 --> 00:13:29,200
and so in your pull requests if you've

00:13:27,760 --> 00:13:30,880
already done everything you can

00:13:29,200 --> 00:13:33,680
think of to alleviate some possible

00:13:30,880 --> 00:13:35,040
concerns this goes a long ways towards

00:13:33,680 --> 00:13:37,440
getting your pull request

00:13:35,040 --> 00:13:37,440
merged

00:13:41,839 --> 00:13:46,720
all right so let's talk about the last

00:13:44,560 --> 00:13:48,399
major topic here

00:13:46,720 --> 00:13:51,600
which is around creating a roadmap to

00:13:48,399 --> 00:13:53,040
success and

00:13:51,600 --> 00:13:55,680
there's a lot of different ways to

00:13:53,040 --> 00:13:58,959
become successful and become more

00:13:55,680 --> 00:13:59,519
successful and one commonality between

00:13:58,959 --> 00:14:00,959
all of us

00:13:59,519 --> 00:14:02,639
is that we are all here to solve

00:14:00,959 --> 00:14:04,880
problems

00:14:02,639 --> 00:14:06,639
and for many of you you are already

00:14:04,880 --> 00:14:08,480
working in an agile environment

00:14:06,639 --> 00:14:11,920
and used to the terms like sprints

00:14:08,480 --> 00:14:14,000
stories and ethics

00:14:11,920 --> 00:14:15,120
and for those who are less familiar with

00:14:14,000 --> 00:14:17,360
it

00:14:15,120 --> 00:14:18,480
in a nutshell stories are described the

00:14:17,360 --> 00:14:20,560
need that is result

00:14:18,480 --> 00:14:23,120
with the desired outcome they are the

00:14:20,560 --> 00:14:24,880
tasks that need to get done

00:14:23,120 --> 00:14:26,560
ethics are a collection of stories used

00:14:24,880 --> 00:14:29,600
to describe features and benefits

00:14:26,560 --> 00:14:31,360
to stakeholders and sprints our defined

00:14:29,600 --> 00:14:34,240
period at work time to get one or more

00:14:31,360 --> 00:14:35,839
stories completed

00:14:34,240 --> 00:14:37,279
and the general idea is that we can't

00:14:35,839 --> 00:14:39,760
see all the detailed

00:14:37,279 --> 00:14:41,120
tasks and stories ahead of us but we

00:14:39,760 --> 00:14:43,279
know enough to identify

00:14:41,120 --> 00:14:45,839
the important things to work on right

00:14:43,279 --> 00:14:45,839
now

00:14:47,519 --> 00:14:50,880
so going back to building a house

00:14:49,199 --> 00:14:52,880
example right there are many

00:14:50,880 --> 00:14:55,199
tasks to complete in order to build a

00:14:52,880 --> 00:14:55,199
house

00:14:55,440 --> 00:14:58,800
some tasks are also can be related to

00:14:58,160 --> 00:15:01,279
each other

00:14:58,800 --> 00:15:02,399
and some have dependencies on others

00:15:01,279 --> 00:15:04,000
right so

00:15:02,399 --> 00:15:05,760
if you start with plumbing you might not

00:15:04,000 --> 00:15:07,440
be able to complete the plenty of work

00:15:05,760 --> 00:15:09,519
because maybe you put in the pipes first

00:15:07,440 --> 00:15:12,480
and you have to wait for your

00:15:09,519 --> 00:15:13,199
cabinet guy person to build your sinks

00:15:12,480 --> 00:15:17,360
before you

00:15:13,199 --> 00:15:17,360
install like the faucets right

00:15:17,600 --> 00:15:21,040
so when you jump into open source

00:15:19,120 --> 00:15:22,560
project it's very similar

00:15:21,040 --> 00:15:24,959
you want to accomplish something like

00:15:22,560 --> 00:15:28,079
building a house it could be adding a

00:15:24,959 --> 00:15:30,639
new feature to your favorite application

00:15:28,079 --> 00:15:33,199
or it could be fixing a set of problems

00:15:30,639 --> 00:15:35,120
that causes your users issues

00:15:33,199 --> 00:15:36,560
or it could be just some technology that

00:15:35,120 --> 00:15:39,199
you're really interested in learning

00:15:36,560 --> 00:15:39,199
more about

00:15:39,680 --> 00:15:43,040
start with a small brick a story a

00:15:42,079 --> 00:15:45,279
single story

00:15:43,040 --> 00:15:46,160
and as you complete more and more

00:15:45,279 --> 00:15:47,920
stories

00:15:46,160 --> 00:15:50,560
you'll find that you're making progress

00:15:47,920 --> 00:15:50,560
on epics

00:15:52,720 --> 00:15:55,920
so just like there's different types and

00:15:54,160 --> 00:15:58,240
sizes of houses there are different

00:15:55,920 --> 00:16:00,399
approaches to jumping into a project

00:15:58,240 --> 00:16:02,160
in the case of swagger ui i can share a

00:16:00,399 --> 00:16:04,800
couple of stories

00:16:02,160 --> 00:16:07,040
um the first one is my story about

00:16:04,800 --> 00:16:09,440
onboarding with smart bear

00:16:07,040 --> 00:16:12,800
so i was less focused on learning about

00:16:09,440 --> 00:16:14,720
the open api specification right away

00:16:12,800 --> 00:16:16,800
instead i was more focused in learning

00:16:14,720 --> 00:16:18,480
about the swagger ui plugin system

00:16:16,800 --> 00:16:20,720
because i knew other people used it to

00:16:18,480 --> 00:16:21,199
customize the swag ui experience for

00:16:20,720 --> 00:16:25,040
their

00:16:21,199 --> 00:16:25,519
own end users so i wanted to get in

00:16:25,040 --> 00:16:27,759
depth

00:16:25,519 --> 00:16:30,320
and you know get my hands ready if you

00:16:27,759 --> 00:16:31,519
will to get working on a demo project to

00:16:30,320 --> 00:16:34,800
demonstrate and get

00:16:31,519 --> 00:16:37,839
gain understanding of the swagger ui

00:16:34,800 --> 00:16:40,240
plug-in system now over time

00:16:37,839 --> 00:16:42,320
i did you know gain knowledge about the

00:16:40,240 --> 00:16:43,759
open api specification

00:16:42,320 --> 00:16:45,839
started working on features and bug

00:16:43,759 --> 00:16:46,720
fixes and got involved with community

00:16:45,839 --> 00:16:48,399
management

00:16:46,720 --> 00:16:50,800
as well as took ownership of the release

00:16:48,399 --> 00:16:53,360
cycle although not necessarily all in

00:16:50,800 --> 00:16:53,360
that order

00:16:53,920 --> 00:16:57,120
i will say that all of this did occur my

00:16:55,680 --> 00:17:00,560
first three months so

00:16:57,120 --> 00:17:02,320
what started at small in my case a

00:17:00,560 --> 00:17:05,439
single epic

00:17:02,320 --> 00:17:06,480
to do a demo project grew into multiple

00:17:05,439 --> 00:17:09,199
epics

00:17:06,480 --> 00:17:09,199
very quickly

00:17:11,760 --> 00:17:15,439
in a different onboarding example a

00:17:13,760 --> 00:17:17,120
fellow swagger maintainer joined the

00:17:15,439 --> 00:17:20,240
team with expertise in tooling

00:17:17,120 --> 00:17:21,839
and algorithms so he decided he wanted

00:17:20,240 --> 00:17:23,280
to add value more quickly

00:17:21,839 --> 00:17:24,959
by improving the tooling to make them

00:17:23,280 --> 00:17:26,240
more efficient and more consistent

00:17:24,959 --> 00:17:29,679
across all the

00:17:26,240 --> 00:17:31,919
different swagger projects

00:17:29,679 --> 00:17:33,679
now his longer term focus was to become

00:17:31,919 --> 00:17:35,600
a subject matter expert with the open

00:17:33,679 --> 00:17:37,679
api specification

00:17:35,600 --> 00:17:38,720
so that he could go work on improving

00:17:37,679 --> 00:17:42,400
the performance

00:17:38,720 --> 00:17:44,480
of things like the swat ui uh parsers

00:17:42,400 --> 00:17:47,840
right we look um and just generally

00:17:44,480 --> 00:17:47,840
improving performance

00:17:49,360 --> 00:17:54,480
so there's one final story i can share

00:17:51,760 --> 00:17:57,200
now i'm going to use accessibility

00:17:54,480 --> 00:17:59,440
as a specific example but you can

00:17:57,200 --> 00:18:03,360
substitute any subject

00:17:59,440 --> 00:18:05,679
you like again it could be design

00:18:03,360 --> 00:18:07,679
it could be a piece of it could be like

00:18:05,679 --> 00:18:09,039
a react specialization whatever

00:18:07,679 --> 00:18:11,360
it needs to be but i'm going to use

00:18:09,039 --> 00:18:13,360
accessibility for now

00:18:11,360 --> 00:18:14,640
so suppose i'm a consumer of an

00:18:13,360 --> 00:18:16,559
application or tool

00:18:14,640 --> 00:18:19,120
and i discover a list of accessibility

00:18:16,559 --> 00:18:21,120
improvements that could be done

00:18:19,120 --> 00:18:22,320
now the application works well for me

00:18:21,120 --> 00:18:24,480
personally

00:18:22,320 --> 00:18:25,679
but it would make my users happier if i

00:18:24,480 --> 00:18:26,559
could make an impact on the

00:18:25,679 --> 00:18:30,640
application's

00:18:26,559 --> 00:18:33,280
accessibility features or lack thereof

00:18:30,640 --> 00:18:35,200
but from a pull request standpoint i can

00:18:33,280 --> 00:18:36,799
start small by focusing on just one

00:18:35,200 --> 00:18:40,720
element

00:18:36,799 --> 00:18:42,720
i create a pull request and

00:18:40,720 --> 00:18:43,840
following the the things that we just

00:18:42,720 --> 00:18:47,600
discussed in making a

00:18:43,840 --> 00:18:48,880
an effective pull request i you know

00:18:47,600 --> 00:18:50,480
go through that process and see if the

00:18:48,880 --> 00:18:51,679
maintainers are interested in such

00:18:50,480 --> 00:18:56,320
improvements

00:18:51,679 --> 00:18:58,559
and hopefully the answer is yes

00:18:56,320 --> 00:19:01,440
um now there may be some back and forth

00:18:58,559 --> 00:19:03,280
and collaboration to make sure

00:19:01,440 --> 00:19:05,440
everything meets the expectations of the

00:19:03,280 --> 00:19:07,039
maintainer or the project

00:19:05,440 --> 00:19:09,360
but eventually the pull request is

00:19:07,039 --> 00:19:11,840
accepted and merged

00:19:09,360 --> 00:19:14,160
so that's fantastic but i have a whole

00:19:11,840 --> 00:19:16,000
list of improvements

00:19:14,160 --> 00:19:18,240
so i start working on the next item

00:19:16,000 --> 00:19:20,320
create a podcast for that

00:19:18,240 --> 00:19:22,840
and then i work on the next item and

00:19:20,320 --> 00:19:25,120
pull a request make another podcast for

00:19:22,840 --> 00:19:26,880
that and eventually the maintainers

00:19:25,120 --> 00:19:29,919
might notice that i have a particular

00:19:26,880 --> 00:19:31,760
interest in accessibility

00:19:29,919 --> 00:19:33,520
so i might start getting paint on any

00:19:31,760 --> 00:19:36,720
accessibility related question or

00:19:33,520 --> 00:19:38,799
issue now

00:19:36,720 --> 00:19:40,720
while i don't have to answer every

00:19:38,799 --> 00:19:41,440
question or fix every new issue that

00:19:40,720 --> 00:19:43,120
comes about

00:19:41,440 --> 00:19:45,840
in this project right it's not

00:19:43,120 --> 00:19:47,840
necessarily my responsibility

00:19:45,840 --> 00:19:50,840
what is important is that i am being

00:19:47,840 --> 00:19:53,840
recognized as a subject matter

00:19:50,840 --> 00:19:55,840
expert so hypothetically

00:19:53,840 --> 00:19:57,760
eventually i might get invited to be

00:19:55,840 --> 00:19:59,600
part uh to have a bigger part

00:19:57,760 --> 00:20:01,600
a part of the team you know perhaps

00:19:59,600 --> 00:20:03,760
become a one of the official maintainers

00:20:01,600 --> 00:20:06,320
of the project

00:20:03,760 --> 00:20:08,480
alternatively or in addition to the

00:20:06,320 --> 00:20:10,400
another hypothetical example would be

00:20:08,480 --> 00:20:12,640
it might lead to a job opportunity

00:20:10,400 --> 00:20:14,080
either with the project owners

00:20:12,640 --> 00:20:16,159
or by another contributor who has

00:20:14,080 --> 00:20:20,480
noticed my work and could use my

00:20:16,159 --> 00:20:23,840
subject matter expertise

00:20:20,480 --> 00:20:25,600
um in any case the good thing is that

00:20:23,840 --> 00:20:27,760
there isn't any expectation that i need

00:20:25,600 --> 00:20:29,200
to stay and maintain my work forever

00:20:27,760 --> 00:20:31,760
right because i've already done a good

00:20:29,200 --> 00:20:32,840
job making effective contributions right

00:20:31,760 --> 00:20:37,120
i made it

00:20:32,840 --> 00:20:40,799
concise clear provided tests

00:20:37,120 --> 00:20:40,799
for other people to build on

00:20:40,880 --> 00:20:44,480
and i can still work on other features

00:20:42,480 --> 00:20:46,880
or projects that interest me

00:20:44,480 --> 00:20:48,480
so i'm not just limited to one specific

00:20:46,880 --> 00:20:49,840
project

00:20:48,480 --> 00:20:52,159
and that's the cool thing about open

00:20:49,840 --> 00:20:53,280
source you can work on as many projects

00:20:52,159 --> 00:20:55,440
that interest you

00:20:53,280 --> 00:20:56,559
they can be large or they can be small

00:20:55,440 --> 00:20:58,400
you can be a contra

00:20:56,559 --> 00:21:01,200
you can contribute frequently or on a

00:20:58,400 --> 00:21:01,200
one-time basis

00:21:01,360 --> 00:21:04,880
your work might lead to new roles and

00:21:03,120 --> 00:21:06,720
responsibilities

00:21:04,880 --> 00:21:09,600
you might learn about new technologies

00:21:06,720 --> 00:21:09,600
and solutions

00:21:10,080 --> 00:21:13,120
basically the opportunities are endless

00:21:12,240 --> 00:21:17,840
and it's really

00:21:13,120 --> 00:21:17,840
up to you

00:21:19,360 --> 00:21:25,039
so some clothing some closing thoughts

00:21:22,880 --> 00:21:27,360
um in open source everything is

00:21:25,039 --> 00:21:31,120
transparent for the world to see

00:21:27,360 --> 00:21:32,720
so be kind and be great to work with

00:21:31,120 --> 00:21:34,720
because it's a community that makes it

00:21:32,720 --> 00:21:35,600
open source great so the better we

00:21:34,720 --> 00:21:37,679
collaborate

00:21:35,600 --> 00:21:39,679
the better the tool application product

00:21:37,679 --> 00:21:41,280
it becomes

00:21:39,679 --> 00:21:43,280
and then from a direction or growth

00:21:41,280 --> 00:21:44,799
perspective it's helpful to understand

00:21:43,280 --> 00:21:46,159
what is important

00:21:44,799 --> 00:21:48,400
so that you have a goal that you can

00:21:46,159 --> 00:21:51,520
work towards and maximize your impact to

00:21:48,400 --> 00:21:51,520
the project or the team

00:21:51,760 --> 00:21:57,840
and finally technology moves fast

00:21:55,440 --> 00:21:59,520
now it's a common misperception that

00:21:57,840 --> 00:22:00,320
with new technologies you should just

00:21:59,520 --> 00:22:02,159
throw out

00:22:00,320 --> 00:22:04,720
old technologies but the truth of the

00:22:02,159 --> 00:22:07,440
matter is new technologies built on

00:22:04,720 --> 00:22:09,280
lessons learned from the past

00:22:07,440 --> 00:22:11,039
and so open source gives you a pathway

00:22:09,280 --> 00:22:12,960
to learn and keep up with interesting

00:22:11,039 --> 00:22:15,600
new technologies and interesting new

00:22:12,960 --> 00:22:15,600
solutions

00:22:19,280 --> 00:22:23,120
with that thank you very much for your

00:22:21,280 --> 00:22:25,280
time i hope that this talk has given you

00:22:23,120 --> 00:22:26,799
some useful tips and ideas

00:22:25,280 --> 00:22:32,400
and i encourage you to take the leap

00:22:26,799 --> 00:22:32,400

YouTube URL: https://www.youtube.com/watch?v=LJoIAktp88A


