Title: A "fast" Introduction to Fastify - Matteo Collina, NearForm
Publication date: 2021-05-28
Playlist: OpenJS World 2021
Description: 
	Fastify is a web framework for Node.js that has a great satisfaction across developers with a 89% rating in the last state of javascript. Fastify combines an amazing developer experience with top of the class performance, with minimal reduction on top of Node.js core. In this talk, we will go through the fundamentals of the framework as well as a live coded example.
Captions: 
	00:00:01,120 --> 00:00:05,040
hi everyone i am mateo kolina

00:00:03,120 --> 00:00:07,839
and today i'm going to talk to you about

00:00:05,040 --> 00:00:10,960
fastify you know fastify is a project

00:00:07,839 --> 00:00:14,400
that i started a few years back

00:00:10,960 --> 00:00:17,600
with with thomas and

00:00:14,400 --> 00:00:19,520
it has been one of the most uh amazing

00:00:17,600 --> 00:00:21,520
uh you know journey of my life to be

00:00:19,520 --> 00:00:25,039
honest so i hope you would like

00:00:21,520 --> 00:00:25,519
this uh this intro and you would you

00:00:25,039 --> 00:00:27,199
know

00:00:25,519 --> 00:00:28,880
give it a shot and try it out in your

00:00:27,199 --> 00:00:31,920
next project so

00:00:28,880 --> 00:00:33,760
let's start um first of all uh

00:00:31,920 --> 00:00:35,440
take a moment to follow me on twitter at

00:00:33,760 --> 00:00:35,920
mateo kolina i tweet about a lot of

00:00:35,440 --> 00:00:39,360
things

00:00:35,920 --> 00:00:41,600
so hey molly mainly javascript

00:00:39,360 --> 00:00:42,399
so i also work for a company called near

00:00:41,600 --> 00:00:44,399
form so

00:00:42,399 --> 00:00:45,600
if you are interested please check us

00:00:44,399 --> 00:00:46,480
out we are a professional services

00:00:45,600 --> 00:00:49,760
company based

00:00:46,480 --> 00:00:51,760
in ireland but working worldwide to

00:00:49,760 --> 00:00:53,520
uh that can help you in any sort of

00:00:51,760 --> 00:00:56,480
problems anyway

00:00:53,520 --> 00:00:58,160
let's get started on uh on fastify and

00:00:56,480 --> 00:01:01,199
why it matters

00:00:58,160 --> 00:01:03,520
so uh pestify is

00:01:01,199 --> 00:01:07,439
you can find everything for uh rated to

00:01:03,520 --> 00:01:11,119
falsify on www.fastify.org it's our main

00:01:07,439 --> 00:01:12,320
er it's our main domain you can find all

00:01:11,119 --> 00:01:16,400
the docs there

00:01:12,320 --> 00:01:18,880
it's pretty good and it's uh

00:01:16,400 --> 00:01:19,520
you know it should be a lot of docks as

00:01:18,880 --> 00:01:23,200
usual

00:01:19,520 --> 00:01:25,280
everything can be improved so please

00:01:23,200 --> 00:01:27,280
please please check it out and if you

00:01:25,280 --> 00:01:30,400
see something that it does not

00:01:27,280 --> 00:01:32,000
um you know that you don't find uh

00:01:30,400 --> 00:01:33,439
clear please open an issue and maybe

00:01:32,000 --> 00:01:36,560
send out a pr to

00:01:33,439 --> 00:01:41,600
improve it anyway uh

00:01:36,560 --> 00:01:44,159
and this is actually a good segue for

00:01:41,600 --> 00:01:44,960
the very first important part of this

00:01:44,159 --> 00:01:48,640
talk

00:01:44,960 --> 00:01:51,680
which is you know a genetic principle

00:01:48,640 --> 00:01:54,880
that is based that underpins

00:01:51,680 --> 00:01:57,360
all of opengs project but

00:01:54,880 --> 00:01:58,079
you know specifically fastified an open

00:01:57,360 --> 00:02:00,640
source project

00:01:58,079 --> 00:02:01,119
is as good as this community is this

00:02:00,640 --> 00:02:04,240
it's

00:02:01,119 --> 00:02:05,439
extremely important so um in fact

00:02:04,240 --> 00:02:07,520
festival we believe

00:02:05,439 --> 00:02:09,280
that you know building and maintaining a

00:02:07,520 --> 00:02:10,800
web framework for node.js is too much of

00:02:09,280 --> 00:02:13,280
a work for a single individual

00:02:10,800 --> 00:02:14,160
or even a single company to some extent

00:02:13,280 --> 00:02:16,640
and

00:02:14,160 --> 00:02:18,400
we you know we encourage everybody

00:02:16,640 --> 00:02:18,879
everybody that is using fastify that is

00:02:18,400 --> 00:02:22,239
finding

00:02:18,879 --> 00:02:25,440
values fastify to contribute back

00:02:22,239 --> 00:02:26,400
uh also first if i was born when i met

00:02:25,440 --> 00:02:29,040
thomas

00:02:26,400 --> 00:02:30,879
and i tried to convince him to to help

00:02:29,040 --> 00:02:31,519
me to convince somebody helping in this

00:02:30,879 --> 00:02:35,040
journey

00:02:31,519 --> 00:02:36,480
and you know i i found thomas and

00:02:35,040 --> 00:02:39,040
you know we started working on this

00:02:36,480 --> 00:02:40,480
together so it's quite a nice story

00:02:39,040 --> 00:02:42,239
i thought that i'll talk about it in the

00:02:40,480 --> 00:02:45,840
latest in

00:02:42,239 --> 00:02:49,440
last year open js so check it out

00:02:45,840 --> 00:02:51,519
uh anyway fastified firstify is one of

00:02:49,440 --> 00:02:54,000
the fastest web framework for node.js

00:02:51,519 --> 00:02:55,920
and you can you can just you know

00:02:54,000 --> 00:02:56,720
require it or import it does work both

00:02:55,920 --> 00:02:59,760
ways

00:02:56,720 --> 00:03:00,640
and you can call it with a logger or

00:02:59,760 --> 00:03:02,720
other options

00:03:00,640 --> 00:03:04,640
and then you can declare your routes and

00:03:02,720 --> 00:03:06,080
you know async await you can use a sync

00:03:04,640 --> 00:03:07,120
away to just return an object it will

00:03:06,080 --> 00:03:10,959
convert to a json

00:03:07,120 --> 00:03:13,120
very simple um now fastify has been

00:03:10,959 --> 00:03:14,720
under massive growth in the last year in

00:03:13,120 --> 00:03:15,360
the last few years it has now reached

00:03:14,720 --> 00:03:18,319
00:03:15,360 --> 00:03:20,000
000 downloads per month uh and it's

00:03:18,319 --> 00:03:22,000
probably on the track to reach

00:03:20,000 --> 00:03:23,280
a million downloads per month at the end

00:03:22,000 --> 00:03:26,799
of the year so

00:03:23,280 --> 00:03:28,400
finger crossed and it has now it has 15

00:03:26,799 --> 00:03:29,920
collaborators working on it and it has

00:03:28,400 --> 00:03:32,480
reached version 3.

00:03:29,920 --> 00:03:33,280
and it has a very big ecosystem of 185

00:03:32,480 --> 00:03:35,920
plugins

00:03:33,280 --> 00:03:36,640
uh we are going to ship v4 soon so we

00:03:35,920 --> 00:03:39,599
are going to

00:03:36,640 --> 00:03:40,480
to storm with a lot of uh with a lot of

00:03:39,599 --> 00:03:43,120
news about it

00:03:40,480 --> 00:03:43,680
as i said the core values as fastify are

00:03:43,120 --> 00:03:45,599
all about

00:03:43,680 --> 00:03:47,280
open collaboration and collaboration

00:03:45,599 --> 00:03:48,560
across multiple individuals

00:03:47,280 --> 00:03:51,120
we always welcome first-time

00:03:48,560 --> 00:03:53,360
contributors so if you're using fastify

00:03:51,120 --> 00:03:54,799
there's a very good chance that you are

00:03:53,360 --> 00:03:56,959
that we will be asked

00:03:54,799 --> 00:03:58,480
a very very simple question would you

00:03:56,959 --> 00:04:00,480
like to send up a request

00:03:58,480 --> 00:04:01,519
to fix your bug your issue or implement

00:04:00,480 --> 00:04:02,799
a new feature

00:04:01,519 --> 00:04:05,040
it's always important that you

00:04:02,799 --> 00:04:07,519
contribute back in this ecosystem

00:04:05,040 --> 00:04:09,280
we don't that's what we do here okay

00:04:07,519 --> 00:04:10,239
it's it's too complex to build this

00:04:09,280 --> 00:04:12,480
thing alone so

00:04:10,239 --> 00:04:14,000
we ask everybody to contribute back we

00:04:12,480 --> 00:04:15,920
also seek open government we also

00:04:14,000 --> 00:04:19,440
approach uh with an open governance

00:04:15,920 --> 00:04:21,600
uh in a fashion which means that

00:04:19,440 --> 00:04:22,800
uh we ask if people objects and if not

00:04:21,600 --> 00:04:25,120
we are lending them

00:04:22,800 --> 00:04:26,080
typically if there are ties or things

00:04:25,120 --> 00:04:29,280
that are

00:04:26,080 --> 00:04:31,440
too uh complex or that require that

00:04:29,280 --> 00:04:33,840
the community is unsure uh one of the

00:04:31,440 --> 00:04:37,280
lead maintainers or creators whatever uh

00:04:33,840 --> 00:04:40,160
uh step in and try to uh fix it

00:04:37,280 --> 00:04:41,680
okay and or maybe try to break the tie

00:04:40,160 --> 00:04:42,880
essentially and provide some guidance

00:04:41,680 --> 00:04:46,000
and this person is

00:04:42,880 --> 00:04:47,840
thomas and myself uh the

00:04:46,000 --> 00:04:49,360
the fund as i said the key part of

00:04:47,840 --> 00:04:51,440
fastify was built

00:04:49,360 --> 00:04:53,040
fastify was a community of two people

00:04:51,440 --> 00:04:53,919
before it was before any code was

00:04:53,040 --> 00:04:57,120
committed

00:04:53,919 --> 00:04:59,360
so uh you know the the fact that it's

00:04:57,120 --> 00:05:00,320
uh a meld of different companies

00:04:59,360 --> 00:05:02,160
different people

00:05:00,320 --> 00:05:04,160
different individuals working together

00:05:02,160 --> 00:05:04,639
it's it's a key a fundamental issue part

00:05:04,160 --> 00:05:08,960
of

00:05:04,639 --> 00:05:11,440
fastify um it's

00:05:08,960 --> 00:05:13,360
the problem that we have seen why is

00:05:11,440 --> 00:05:14,320
this well the reason is because we have

00:05:13,360 --> 00:05:16,560
seen that

00:05:14,320 --> 00:05:17,680
especially in other frameworks uh and

00:05:16,560 --> 00:05:20,880
other initiatives

00:05:17,680 --> 00:05:24,080
that uh it's very hard to

00:05:20,880 --> 00:05:24,800
for a single company or person justify

00:05:24,080 --> 00:05:27,840
the investment

00:05:24,800 --> 00:05:31,039
that is needed to build and maintain

00:05:27,840 --> 00:05:31,919
a web framework for node.js and what we

00:05:31,039 --> 00:05:34,320
have chosen

00:05:31,919 --> 00:05:36,000
is to the route that we have chosen is

00:05:34,320 --> 00:05:37,360
to spread this effort across the

00:05:36,000 --> 00:05:40,080
companies using it

00:05:37,360 --> 00:05:40,479
so um you know the typical request that

00:05:40,080 --> 00:05:43,039
i

00:05:40,479 --> 00:05:44,240
ask everybody that we ask everybody is

00:05:43,039 --> 00:05:45,199
when there is a bug i said would you

00:05:44,240 --> 00:05:49,120
like to send a pr

00:05:45,199 --> 00:05:51,039
and remember to add unit tests so

00:05:49,120 --> 00:05:52,639
fastify is pretty unique in that sense

00:05:51,039 --> 00:05:55,520
and we create this culture of

00:05:52,639 --> 00:05:57,280
ownership that is a key fundamental part

00:05:55,520 --> 00:05:59,600
of the fastify experience

00:05:57,280 --> 00:06:01,199
um you can check it out um

00:05:59,600 --> 00:06:03,120
[Music]

00:06:01,199 --> 00:06:05,039
we also have a nice governance document

00:06:03,120 --> 00:06:06,160
so please check it out to see how our

00:06:05,039 --> 00:06:09,039
community works

00:06:06,160 --> 00:06:10,400
uh by the way we just can make we if you

00:06:09,039 --> 00:06:12,000
contribute to if you contribute to

00:06:10,400 --> 00:06:13,199
fastify it's very likely that you will

00:06:12,000 --> 00:06:15,919
get the commitment

00:06:13,199 --> 00:06:18,160
so please you know if you do sustainable

00:06:15,919 --> 00:06:20,639
sustainable and valuable contributions

00:06:18,160 --> 00:06:22,240
uh let's go into tech because you know

00:06:20,639 --> 00:06:24,319
still fastify is a web framework right

00:06:22,240 --> 00:06:26,400
for node.js so it's it's attack

00:06:24,319 --> 00:06:28,160
we need to talk about tech uh the first

00:06:26,400 --> 00:06:29,039
principle is about overhead we don't

00:06:28,160 --> 00:06:31,600
want to add

00:06:29,039 --> 00:06:32,479
additional overhead in production why

00:06:31,600 --> 00:06:35,280
that is not

00:06:32,479 --> 00:06:36,319
truly possible so it's aspirational and

00:06:35,280 --> 00:06:39,680
we want to reduce

00:06:36,319 --> 00:06:41,199
the overhead that the web framework have

00:06:39,680 --> 00:06:43,280
we want to provide a good developer

00:06:41,199 --> 00:06:44,000
experience that's a key fundamental part

00:06:43,280 --> 00:06:46,880
of it

00:06:44,000 --> 00:06:48,479
and it needs to work great for both

00:06:46,880 --> 00:06:50,319
small and big projects so it needs to

00:06:48,479 --> 00:06:53,440
work for a very simple hello world

00:06:50,319 --> 00:06:55,120
but also should also work well for a

00:06:53,440 --> 00:06:56,880
company that is a hundred developers

00:06:55,120 --> 00:06:58,560
working on several microservices and

00:06:56,880 --> 00:06:59,360
some big distributor system and so on so

00:06:58,560 --> 00:07:01,840
forth

00:06:59,360 --> 00:07:03,360
it's not simple to build something to to

00:07:01,840 --> 00:07:05,919
design a web framework that can

00:07:03,360 --> 00:07:08,800
uh easily grow and an increasingly

00:07:05,919 --> 00:07:10,639
amount of complexity

00:07:08,800 --> 00:07:12,080
because of this we wanted to be able to

00:07:10,639 --> 00:07:14,800
migrate to microservices

00:07:12,080 --> 00:07:16,880
and serverless and and back uh it needs

00:07:14,800 --> 00:07:19,360
to have a very good security and

00:07:16,880 --> 00:07:20,800
more importantly data validation uh it

00:07:19,360 --> 00:07:23,199
has a plug-in system

00:07:20,800 --> 00:07:24,479
again we don't believe to scope creep so

00:07:23,199 --> 00:07:26,319
to avoid scope creep

00:07:24,479 --> 00:07:28,000
we created a plug-in system so if

00:07:26,319 --> 00:07:28,720
something could be a plug-in it likely

00:07:28,000 --> 00:07:31,280
should

00:07:28,720 --> 00:07:33,039
it needs to be testable and we do not

00:07:31,280 --> 00:07:34,720
want to monkey patch core

00:07:33,039 --> 00:07:36,720
to be honest this was one of the parts

00:07:34,720 --> 00:07:38,319
that one of the critical part the node

00:07:36,720 --> 00:07:39,680
core so this one a critical part that

00:07:38,319 --> 00:07:40,720
led me to create fastify in the first

00:07:39,680 --> 00:07:41,280
place because a lot of the other

00:07:40,720 --> 00:07:42,960
frameworks

00:07:41,280 --> 00:07:44,560
actually had a huge focus on monkey

00:07:42,960 --> 00:07:47,039
patching note core

00:07:44,560 --> 00:07:48,879
also we want to uh follow semantic

00:07:47,039 --> 00:07:51,360
versioning and long term support

00:07:48,879 --> 00:07:52,319
so more or less we ship one new major

00:07:51,360 --> 00:07:55,520
version per year

00:07:52,319 --> 00:07:57,520
and last but not least uh http 1.1 spec

00:07:55,520 --> 00:08:00,879
adherence so we want to follow

00:07:57,520 --> 00:08:03,120
http one so um one of the uh

00:08:00,879 --> 00:08:04,560
very nice bits and one nice thing to

00:08:03,120 --> 00:08:07,680
chat about is

00:08:04,560 --> 00:08:10,479
uh how fast is fastify because

00:08:07,680 --> 00:08:11,039
it's one of you know it's called in this

00:08:10,479 --> 00:08:14,800
way

00:08:11,039 --> 00:08:18,080
and it's uh uh i wanted to

00:08:14,800 --> 00:08:21,199
clarify that fastify is uh fast enough

00:08:18,080 --> 00:08:23,759
so it does not provide a significant

00:08:21,199 --> 00:08:25,680
slowdown compared to not core in certain

00:08:23,759 --> 00:08:26,160
cases actually slightly faster than not

00:08:25,680 --> 00:08:27,759
core

00:08:26,160 --> 00:08:29,440
because it can avoid certain you know

00:08:27,759 --> 00:08:31,280
paths that are not great

00:08:29,440 --> 00:08:32,640
uh it's probably faster than whatever

00:08:31,280 --> 00:08:34,560
you are using and

00:08:32,640 --> 00:08:36,080
at this level it's you know comparable

00:08:34,560 --> 00:08:38,080
to you just to use note core

00:08:36,080 --> 00:08:39,279
this is critical because we don't want a

00:08:38,080 --> 00:08:41,839
significant drop

00:08:39,279 --> 00:08:43,120
in throughput and performance so if

00:08:41,839 --> 00:08:44,320
there is a significant drop in

00:08:43,120 --> 00:08:46,959
throughput and performance

00:08:44,320 --> 00:08:48,480
we are you you know you you don't want

00:08:46,959 --> 00:08:51,839
your web framework

00:08:48,480 --> 00:08:54,560
should not be your main bottleneck right

00:08:51,839 --> 00:08:56,240
uh it i'll talk a little bit more about

00:08:54,560 --> 00:09:00,000
later on why this is fast

00:08:56,240 --> 00:09:02,640
why it's it's it's fast so

00:09:00,000 --> 00:09:04,880
fastify is also very much loved by devs

00:09:02,640 --> 00:09:08,399
and you know it was part of the latest

00:09:04,880 --> 00:09:09,920
uh uh state of js which might not be

00:09:08,399 --> 00:09:10,399
representative but it's still a good

00:09:09,920 --> 00:09:13,279
number

00:09:10,399 --> 00:09:14,240
that you know a few people are loving

00:09:13,279 --> 00:09:17,360
fastified

00:09:14,240 --> 00:09:20,720
so pretty good right i am

00:09:17,360 --> 00:09:23,920
pretty pretty happy about

00:09:20,720 --> 00:09:27,120
uh about this result so

00:09:23,920 --> 00:09:30,320
uh it's uh it's pretty good

00:09:27,120 --> 00:09:32,160
anyway uh and fastifies also have

00:09:30,320 --> 00:09:34,800
another library called mercurius

00:09:32,160 --> 00:09:36,000
that you can use on top it provides uh

00:09:34,800 --> 00:09:38,240
support for

00:09:36,000 --> 00:09:40,399
graphql on top of it and it's also as

00:09:38,240 --> 00:09:44,240
it's as well very fast

00:09:40,399 --> 00:09:47,360
as it said one of the key part of

00:09:44,240 --> 00:09:50,399
of fastify is its plugins and we have

00:09:47,360 --> 00:09:52,399
both core plugins and ecosystem plugins

00:09:50,399 --> 00:09:53,839
what is the difference well the

00:09:52,399 --> 00:09:56,000
difference is that core plugins are

00:09:53,839 --> 00:09:56,480
maintained by the fastify organization

00:09:56,000 --> 00:09:59,440
so

00:09:56,480 --> 00:10:01,279
we typically guarantee that they work on

00:09:59,440 --> 00:10:03,040
every new major so we typically update

00:10:01,279 --> 00:10:05,279
all of them

00:10:03,040 --> 00:10:06,720
uh when we do assembler major now

00:10:05,279 --> 00:10:08,399
consider it we are releasing

00:10:06,720 --> 00:10:11,040
essentially to december major fastify

00:10:08,399 --> 00:10:13,519
where probably this is 40 45

00:10:11,040 --> 00:10:15,279
uh modules so it's quite a big deal that

00:10:13,519 --> 00:10:15,920
typically spans across in a couple of

00:10:15,279 --> 00:10:17,440
days

00:10:15,920 --> 00:10:19,760
so when that happens it's a little bit

00:10:17,440 --> 00:10:23,360
of a shift uh in in virgin

00:10:19,760 --> 00:10:24,800
major versions anyway um they also tend

00:10:23,360 --> 00:10:27,040
to solve the problem in the most

00:10:24,800 --> 00:10:29,120
idiomatic way so there's a few examples

00:10:27,040 --> 00:10:30,880
like fastified to load fastify static

00:10:29,120 --> 00:10:33,200
and the under pressure module

00:10:30,880 --> 00:10:34,720
um the projects in the ecosystem are

00:10:33,200 --> 00:10:36,480
maintained by members of the community

00:10:34,720 --> 00:10:38,320
for example i wrote some of them that

00:10:36,480 --> 00:10:39,279
are very opinionated and things that i

00:10:38,320 --> 00:10:42,640
would not want

00:10:39,279 --> 00:10:45,519
to include in in in the org so

00:10:42,640 --> 00:10:46,240
um it's uh you know there are plenty so

00:10:45,519 --> 00:10:48,240
hey

00:10:46,240 --> 00:10:50,079
uh and we have a few we have 141 of

00:10:48,240 --> 00:10:50,800
those so you can just write one to be

00:10:50,079 --> 00:10:52,959
honest there is a

00:10:50,800 --> 00:10:54,720
good guide on the website so what is the

00:10:52,959 --> 00:10:55,519
target architecture of a fastify

00:10:54,720 --> 00:10:58,079
application

00:10:55,519 --> 00:10:59,200
well historically you have we have been

00:10:58,079 --> 00:11:03,040
deploying ojs

00:10:59,200 --> 00:11:05,920
in a with mvc pattern mvc however as a

00:11:03,040 --> 00:11:07,519
as a signal as a significant problem uh

00:11:05,920 --> 00:11:09,360
you know once the complexity or

00:11:07,519 --> 00:11:11,600
application grows over time

00:11:09,360 --> 00:11:14,240
you are either moving you're either

00:11:11,600 --> 00:11:16,399
putting the complexity in

00:11:14,240 --> 00:11:17,519
in the models the views or the

00:11:16,399 --> 00:11:21,680
controllers

00:11:17,519 --> 00:11:24,560
so that's quite of a big quite of a big

00:11:21,680 --> 00:11:24,880
problem for me at least because you know

00:11:24,560 --> 00:11:28,079
it's

00:11:24,880 --> 00:11:31,440
it's very hard to uh to scale so

00:11:28,079 --> 00:11:35,279
uh how can we improve this well um

00:11:31,440 --> 00:11:37,519
oh yay here we go so um

00:11:35,279 --> 00:11:39,200
how can we uh how can we improve this

00:11:37,519 --> 00:11:42,240
well what we can do

00:11:39,200 --> 00:11:43,680
is uh uh we can

00:11:42,240 --> 00:11:45,440
you know start structuring our

00:11:43,680 --> 00:11:48,880
application instead of using

00:11:45,440 --> 00:11:51,760
the mvc concept using just horizontal

00:11:48,880 --> 00:11:53,680
uh models that are you know aligned with

00:11:51,760 --> 00:11:56,160
the features of your app

00:11:53,680 --> 00:11:58,000
so instead of having like these big

00:11:56,160 --> 00:11:58,800
three boxes where you need to fit

00:11:58,000 --> 00:12:00,959
everything

00:11:58,800 --> 00:12:01,920
you can have just a few independent

00:12:00,959 --> 00:12:03,680
modules

00:12:01,920 --> 00:12:05,040
as many as the domain of your

00:12:03,680 --> 00:12:08,079
application are

00:12:05,040 --> 00:12:10,800
and this system actually scale very

00:12:08,079 --> 00:12:12,560
way better in complexity because the

00:12:10,800 --> 00:12:15,839
moment you start doing this

00:12:12,560 --> 00:12:18,079
you can you know you can have

00:12:15,839 --> 00:12:20,560
you have segregated the complexity into

00:12:18,079 --> 00:12:23,600
and tracking the pieces that you need to

00:12:20,560 --> 00:12:25,200
reuse in some other model etc so you you

00:12:23,600 --> 00:12:28,399
can now track what is

00:12:25,200 --> 00:12:31,200
the interrelationship between the things

00:12:28,399 --> 00:12:32,800
in fact it's also the stepping stone for

00:12:31,200 --> 00:12:34,560
moving into a microservice

00:12:32,800 --> 00:12:36,320
into a microservice architecture

00:12:34,560 --> 00:12:38,079
microservices are actually a fundamental

00:12:36,320 --> 00:12:38,720
part of how we develop system as well as

00:12:38,079 --> 00:12:41,760
lambdas

00:12:38,720 --> 00:12:43,040
and so on but the key part is that with

00:12:41,760 --> 00:12:46,639
fastify you could

00:12:43,040 --> 00:12:47,839
essentially move from a monolith to a

00:12:46,639 --> 00:12:49,760
micro service board

00:12:47,839 --> 00:12:50,959
very easily because it's all built on

00:12:49,760 --> 00:12:53,040
the console of plugins

00:12:50,959 --> 00:12:54,480
so you will see that in a moment but

00:12:53,040 --> 00:12:58,079
it's like super easy

00:12:54,480 --> 00:13:01,279
so uh

00:12:58,079 --> 00:13:04,639
so let's go a little bit in depth so

00:13:01,279 --> 00:13:06,399
fastify is built on uh on various levels

00:13:04,639 --> 00:13:08,480
so at the at the bottom of it we have

00:13:06,399 --> 00:13:10,800
two libraries avio which is

00:13:08,480 --> 00:13:13,279
the loader of fastify and provide also

00:13:10,800 --> 00:13:15,360
provide the plugin system

00:13:13,279 --> 00:13:16,399
and pino which is the fastest logger for

00:13:15,360 --> 00:13:18,480
node.js

00:13:16,399 --> 00:13:20,240
i'm not going to talk about pino so you

00:13:18,480 --> 00:13:21,680
know go google it up pinot logger

00:13:20,240 --> 00:13:22,160
node.js or something there's a lot of

00:13:21,680 --> 00:13:23,839
talks

00:13:22,160 --> 00:13:25,680
one of my favorite one is the cost of

00:13:23,839 --> 00:13:27,519
login it has been around for a while

00:13:25,680 --> 00:13:28,959
it has now reached version six and it's

00:13:27,519 --> 00:13:29,519
going to have version 7 we're talking a

00:13:28,959 --> 00:13:32,240
little bit

00:13:29,519 --> 00:13:32,880
about it later maybe anyway the avio

00:13:32,240 --> 00:13:35,279
which is

00:13:32,880 --> 00:13:36,560
the the loader it's what you know load

00:13:35,279 --> 00:13:39,760
the plug-in system

00:13:36,560 --> 00:13:40,720
and it provide the extensibility that is

00:13:39,760 --> 00:13:43,839
needed

00:13:40,720 --> 00:13:45,600
uh by by your app

00:13:43,839 --> 00:13:47,600
a vo guarantee us to have the plug-in

00:13:45,600 --> 00:13:50,240
system the hook system

00:13:47,600 --> 00:13:52,160
and the decorators so it's essentially

00:13:50,240 --> 00:13:53,680
provide the basics in which all these

00:13:52,160 --> 00:13:55,680
other features are built upon

00:13:53,680 --> 00:13:57,360
on top of that we have like uh the

00:13:55,680 --> 00:13:59,440
router which is find my way

00:13:57,360 --> 00:14:01,360
ajv which is the validation validator

00:13:59,440 --> 00:14:04,959
and fast json signify which is the

00:14:01,360 --> 00:14:05,440
serializer we'll talk about those in a

00:14:04,959 --> 00:14:08,160
second

00:14:05,440 --> 00:14:09,600
um so the plug-in system this is a key

00:14:08,160 --> 00:14:11,279
part of fastify

00:14:09,600 --> 00:14:14,079
with the plug-in system you have an

00:14:11,279 --> 00:14:17,199
entry point at the top at the very top

00:14:14,079 --> 00:14:18,320
and it's uh then the entry point can you

00:14:17,199 --> 00:14:20,320
know load plugins

00:14:18,320 --> 00:14:22,000
and plugins can load other plugins

00:14:20,320 --> 00:14:24,639
re-enter in a

00:14:22,000 --> 00:14:25,199
re-entrant way now each one of those

00:14:24,639 --> 00:14:28,639
plugins

00:14:25,199 --> 00:14:30,800
creates an encapsulation context so

00:14:28,639 --> 00:14:31,920
essentially whatever they do you want to

00:14:30,800 --> 00:14:34,240
influence it

00:14:31,920 --> 00:14:35,680
it won't influence like sibling plugins

00:14:34,240 --> 00:14:37,920
early descendants

00:14:35,680 --> 00:14:39,760
this is critical because then we can say

00:14:37,920 --> 00:14:41,440
for example we can pack an app and reuse

00:14:39,760 --> 00:14:44,160
it we'll see how to do that

00:14:41,440 --> 00:14:45,839
um in fact when if i want to expose a

00:14:44,160 --> 00:14:47,519
functionality from one plugin to the

00:14:45,839 --> 00:14:48,320
other i can use the concept of

00:14:47,519 --> 00:14:50,240
decoration

00:14:48,320 --> 00:14:52,560
so i can decorate the request response

00:14:50,240 --> 00:14:55,680
or the server to expose some

00:14:52,560 --> 00:14:58,079
things to the my the schenden plugins

00:14:55,680 --> 00:14:59,199
now this is really nice because you know

00:14:58,079 --> 00:15:02,399
it's a

00:14:59,199 --> 00:15:03,120
a simple way of providing dependence

00:15:02,399 --> 00:15:05,040
injection

00:15:03,120 --> 00:15:06,480
or i don't know inversion of control if

00:15:05,040 --> 00:15:09,839
you want to call it whatever

00:15:06,480 --> 00:15:09,839
so it's actually pretty nice

00:15:10,959 --> 00:15:15,519
sorry uh you can also break the

00:15:13,199 --> 00:15:16,560
encounter encapsulation if you want

00:15:15,519 --> 00:15:18,800
because you can use

00:15:16,560 --> 00:15:20,000
an utility called fastify plug-in so

00:15:18,800 --> 00:15:23,839
that you can actually

00:15:20,000 --> 00:15:25,440
may uh expose uh the declaration to your

00:15:23,839 --> 00:15:27,760
parent as well as the ending

00:15:25,440 --> 00:15:29,839
and your siblings this allows us to

00:15:27,760 --> 00:15:32,399
build i don't know reusable modules

00:15:29,839 --> 00:15:34,880
so we can use this utility to build

00:15:32,399 --> 00:15:37,279
reusable models

00:15:34,880 --> 00:15:38,079
the request lifecycle of a fastify is

00:15:37,279 --> 00:15:40,480
different

00:15:38,079 --> 00:15:42,560
than the one of express for example with

00:15:40,480 --> 00:15:44,320
the other stuff with other express or

00:15:42,560 --> 00:15:45,040
koa you have middlewares that are run

00:15:44,320 --> 00:15:47,199
everywhere

00:15:45,040 --> 00:15:48,240
with fastify you have a predefined

00:15:47,199 --> 00:15:50,079
lifecycle

00:15:48,240 --> 00:15:52,240
that clearly defines that you can

00:15:50,079 --> 00:15:55,519
clearly use to specify when things are

00:15:52,240 --> 00:15:56,560
run and this is key because in this way

00:15:55,519 --> 00:15:59,120
we can actually

00:15:56,560 --> 00:15:59,600
you know avoid monkey patching not core

00:15:59,120 --> 00:16:02,320
so

00:15:59,600 --> 00:16:04,160
um we have all sort of hooks so

00:16:02,320 --> 00:16:05,759
typically the most important ones are

00:16:04,160 --> 00:16:07,279
the request hook that's the first one

00:16:05,759 --> 00:16:09,600
that is executed

00:16:07,279 --> 00:16:10,880
we have pre-handler which is executed

00:16:09,600 --> 00:16:13,759
before the user handler

00:16:10,880 --> 00:16:14,639
and then we and we have onsend which is

00:16:13,759 --> 00:16:18,000
executed

00:16:14,639 --> 00:16:20,000
before uh sending the actual response

00:16:18,000 --> 00:16:21,839
out

00:16:20,000 --> 00:16:23,839
we also provide a recommended project

00:16:21,839 --> 00:16:25,199
structure which drive an app.js file

00:16:23,839 --> 00:16:27,920
that contains your app

00:16:25,199 --> 00:16:28,880
a plugins folder for reusable behavior a

00:16:27,920 --> 00:16:31,120
routes folder

00:16:28,880 --> 00:16:32,399
for all your routes with a nested

00:16:31,120 --> 00:16:35,680
pattern we'll see how to do that and

00:16:32,399 --> 00:16:37,440
then a test folder with your

00:16:35,680 --> 00:16:39,120
fastify provides this concept of

00:16:37,440 --> 00:16:41,120
encapsulation as we have seen now

00:16:39,120 --> 00:16:43,040
with fastify you've seen the target

00:16:41,120 --> 00:16:46,079
architecture on the left

00:16:43,040 --> 00:16:49,519
and you know it's uh um

00:16:46,079 --> 00:16:50,959
let me actually put it let me actually

00:16:49,519 --> 00:16:54,160
put it big here you go

00:16:50,959 --> 00:16:55,839
uh so it's uh with fastify

00:16:54,160 --> 00:16:57,360
you have you can see that you have your

00:16:55,839 --> 00:17:00,399
target architecture on the

00:16:57,360 --> 00:17:03,120
on the left and this architecture

00:17:00,399 --> 00:17:05,039
provides you you know you tells you to

00:17:03,120 --> 00:17:06,799
structure your systems in modules now

00:17:05,039 --> 00:17:07,760
you can actually part this to fastify

00:17:06,799 --> 00:17:09,760
very easily

00:17:07,760 --> 00:17:11,839
because you can have you know your major

00:17:09,760 --> 00:17:13,600
application that is composed

00:17:11,839 --> 00:17:15,520
your major app that is composed of three

00:17:13,600 --> 00:17:16,079
sub-apps or four or five or how many you

00:17:15,520 --> 00:17:17,600
want

00:17:16,079 --> 00:17:19,360
which have their own plugins and

00:17:17,600 --> 00:17:21,360
dependencies and everything so it's

00:17:19,360 --> 00:17:22,400
completely they are completely separated

00:17:21,360 --> 00:17:25,839
between themselves

00:17:22,400 --> 00:17:28,160
it's pretty neat um so

00:17:25,839 --> 00:17:29,760
uh on because of all this stuff you can

00:17:28,160 --> 00:17:30,880
also use fastify to fully embed an

00:17:29,760 --> 00:17:34,000
express app

00:17:30,880 --> 00:17:34,559
so you know it's pretty good as i said

00:17:34,000 --> 00:17:38,000
logging

00:17:34,559 --> 00:17:41,679
it's uh one of the

00:17:38,000 --> 00:17:43,679
key part of fastify and you can just use

00:17:41,679 --> 00:17:45,200
a pinot so it's probably the fastest

00:17:43,679 --> 00:17:47,440
logger for furnitures

00:17:45,200 --> 00:17:48,559
so take a look at the uh take a look at

00:17:47,440 --> 00:17:50,960
pino uh

00:17:48,559 --> 00:17:52,000
it is great so it's we're virtually on

00:17:50,960 --> 00:17:53,600
version seven

00:17:52,000 --> 00:17:55,520
how do you use it well you just call

00:17:53,600 --> 00:17:56,400
logger dot info pretty neat as

00:17:55,520 --> 00:17:59,200
everything you would

00:17:56,400 --> 00:18:00,000
you will use in the past um some more

00:17:59,200 --> 00:18:02,080
important bits

00:18:00,000 --> 00:18:03,360
uh fast if i provide out-of-the-box

00:18:02,080 --> 00:18:06,960
cellularization

00:18:03,360 --> 00:18:08,960
so it allows you to specify the type the

00:18:06,960 --> 00:18:10,960
schema of the object going out

00:18:08,960 --> 00:18:13,600
this is pretty important because then we

00:18:10,960 --> 00:18:14,000
can create a faster than json.stringify

00:18:13,600 --> 00:18:16,720
method

00:18:14,000 --> 00:18:18,240
function that you know can give you a

00:18:16,720 --> 00:18:20,559
nice speed bump

00:18:18,240 --> 00:18:22,480
uh we also written this utility called

00:18:20,559 --> 00:18:24,960
fluent.json schema to help you writing

00:18:22,480 --> 00:18:26,960
json schema in a nicer syntax

00:18:24,960 --> 00:18:28,080
i like it a lot i never use this schema

00:18:26,960 --> 00:18:31,280
by the way

00:18:28,080 --> 00:18:34,799
we also use ajv which is

00:18:31,280 --> 00:18:36,880
uh um and by the way this is the plugin

00:18:34,799 --> 00:18:38,000
system syntax so you need to export a

00:18:36,880 --> 00:18:41,280
function with

00:18:38,000 --> 00:18:43,840
app and ops and ajv is

00:18:41,280 --> 00:18:44,559
a the one of the fastest validator for

00:18:43,840 --> 00:18:47,520
node.js

00:18:44,559 --> 00:18:49,280
so uh it's pretty great also for

00:18:47,520 --> 00:18:53,600
embedding so that's why we use it

00:18:49,280 --> 00:18:57,600
and hey it's also another uh openjs

00:18:53,600 --> 00:19:00,720
project so

00:18:57,600 --> 00:19:02,559
uh testing uh fastify embed an inject

00:19:00,720 --> 00:19:03,679
method for fast testing it's really fast

00:19:02,559 --> 00:19:06,799
even this method

00:19:03,679 --> 00:19:08,400
and uh in fact that method is so fast

00:19:06,799 --> 00:19:11,600
that it at the basis of

00:19:08,400 --> 00:19:11,919
the integration for aws lambda so you

00:19:11,600 --> 00:19:14,400
can

00:19:11,919 --> 00:19:16,480
with this utility at ws lambda fastify

00:19:14,400 --> 00:19:17,280
you can just create a very simple proxy

00:19:16,480 --> 00:19:20,480
for your

00:19:17,280 --> 00:19:22,480
uh fastify app which is essentially just

00:19:20,480 --> 00:19:23,600
the app as you would normally use and it

00:19:22,480 --> 00:19:25,919
just works

00:19:23,600 --> 00:19:28,000
it's pretty neat and it's really fast

00:19:25,919 --> 00:19:30,400
like this is actually way better than

00:19:28,000 --> 00:19:32,240
embedding an express app inside lambda

00:19:30,400 --> 00:19:35,679
so you can check it out

00:19:32,240 --> 00:19:38,080
you can use the close method for a

00:19:35,679 --> 00:19:40,000
graceful shutdown in normal node app in

00:19:38,080 --> 00:19:42,720
case you want to do that

00:19:40,000 --> 00:19:43,679
uh okay um so i just want to thank you

00:19:42,720 --> 00:19:47,120
for your time

00:19:43,679 --> 00:19:49,120
before we go into the uh

00:19:47,120 --> 00:19:51,360
we do a little bit of a live coding

00:19:49,120 --> 00:19:54,559
example and see how it is

00:19:51,360 --> 00:19:57,760
so i'm going to switch to my um

00:19:54,559 --> 00:20:00,799
to my terminal that you can all see

00:19:57,760 --> 00:20:04,039
so um you know we can start developing

00:20:00,799 --> 00:20:07,520
things on fastify so we can do e

00:20:04,039 --> 00:20:10,640
app.js and we can do

00:20:07,520 --> 00:20:14,640
import fastify from

00:20:10,640 --> 00:20:15,120
fastify and what we do is that we do

00:20:14,640 --> 00:20:18,799
cost

00:20:15,120 --> 00:20:22,480
app we do fastify

00:20:18,799 --> 00:20:25,840
hey and then we do app.listen

00:20:22,480 --> 00:20:27,679
3000 here we go and

00:20:25,840 --> 00:20:29,600
you know because i am fancy i'm going to

00:20:27,679 --> 00:20:30,960
bring away here to demonstrate top level

00:20:29,600 --> 00:20:34,720
weight of node.js

00:20:30,960 --> 00:20:35,360
so we now do we can do node app and then

00:20:34,720 --> 00:20:37,840
i can

00:20:35,360 --> 00:20:37,840
curl it

00:20:38,799 --> 00:20:42,880
and we are calling it and you see it's

00:20:42,400 --> 00:20:46,480
it's

00:20:42,880 --> 00:20:50,080
not found um so hey not super nice right

00:20:46,480 --> 00:20:50,080
but we can add it out

00:20:50,880 --> 00:20:57,440
and we add a route and uh

00:20:54,480 --> 00:20:57,760
function wreck i don't need anything

00:20:57,440 --> 00:21:04,240
here

00:20:57,760 --> 00:21:04,240
so i'm just doing return hello world

00:21:05,039 --> 00:21:08,240
running my app as you see now it's

00:21:07,120 --> 00:21:10,640
returning a lowered

00:21:08,240 --> 00:21:12,720
cool oh i can also see that if there are

00:21:10,640 --> 00:21:13,919
all the http headers that i would expect

00:21:12,720 --> 00:21:17,120
and they are all there

00:21:13,919 --> 00:21:18,790
okay so pretty nice

00:21:17,120 --> 00:21:20,880
okay um

00:21:18,790 --> 00:21:23,520
[Music]

00:21:20,880 --> 00:21:25,280
what do we do next well this app is not

00:21:23,520 --> 00:21:28,720
really really reusable

00:21:25,280 --> 00:21:32,159
so what we want to do is uh

00:21:28,720 --> 00:21:35,360
we want to make uh well this is

00:21:32,159 --> 00:21:37,840
refresh okay let's

00:21:35,360 --> 00:21:39,520
let's do this okay so we want to create

00:21:37,840 --> 00:21:42,320
a another server

00:21:39,520 --> 00:21:43,520
another file called server.js now i want

00:21:42,320 --> 00:21:45,200
to split my app

00:21:43,520 --> 00:21:47,840
because for example i want to build them

00:21:45,200 --> 00:21:52,159
and reuse info for unit tests so

00:21:47,840 --> 00:21:57,360
what i do in app is that i do export

00:21:52,159 --> 00:21:57,360
a default a sync function

00:21:57,520 --> 00:22:02,320
and i typically do this

00:22:03,200 --> 00:22:09,600
and do return app

00:22:06,559 --> 00:22:14,960
then i move this into server

00:22:09,600 --> 00:22:14,960
and here i do import build from

00:22:16,080 --> 00:22:27,360
doctor yes and then i do const app

00:22:21,440 --> 00:22:30,400
await build

00:22:27,360 --> 00:22:31,200
okay so let's see if the node app does

00:22:30,400 --> 00:22:34,799
nothing now

00:22:31,200 --> 00:22:37,120
so if i do not server instead and then i

00:22:34,799 --> 00:22:37,120
curl

00:22:38,240 --> 00:22:42,000
it's still working as as expected cool

00:22:40,880 --> 00:22:44,480
okay

00:22:42,000 --> 00:22:45,280
pretty neat um so this is actually

00:22:44,480 --> 00:22:47,679
pretty nice

00:22:45,280 --> 00:22:49,520
um i can also use for example pass in

00:22:47,679 --> 00:22:53,760
some opts here

00:22:49,520 --> 00:22:57,440
and you know include them here

00:22:53,760 --> 00:23:00,799
and then in server i can say for example

00:22:57,440 --> 00:23:04,080
logger true so

00:23:00,799 --> 00:23:07,200
i can do node server

00:23:04,080 --> 00:23:10,240
and then i can curl oh

00:23:07,200 --> 00:23:13,919
i didn't do something here so we'll

00:23:10,240 --> 00:23:17,440
uh uh did i save this

00:23:13,919 --> 00:23:19,360
i probably didn't okay so now you see

00:23:17,440 --> 00:23:20,640
it's printed something and we see some

00:23:19,360 --> 00:23:22,960
stuff being printed out

00:23:20,640 --> 00:23:25,120
this is new light and limited json if i

00:23:22,960 --> 00:23:25,120
am

00:23:26,000 --> 00:23:30,720
in if if i want a some

00:23:29,039 --> 00:23:32,880
nicer output for development i can use

00:23:30,720 --> 00:23:35,440
pinopretty and as you can see

00:23:32,880 --> 00:23:36,080
i can see the request coming in and the

00:23:35,440 --> 00:23:39,120
request

00:23:36,080 --> 00:23:39,760
that is completed out and we can see

00:23:39,120 --> 00:23:41,520
some

00:23:39,760 --> 00:23:43,840
usual things about response time and so

00:23:41,520 --> 00:23:46,960
on and so forth so here we go

00:23:43,840 --> 00:23:49,679
pretty neat uh cool okay so this is

00:23:46,960 --> 00:23:52,080
uh some some good example however this

00:23:49,679 --> 00:23:54,559
is not really scalable as we saw so

00:23:52,080 --> 00:23:55,919
we can use the routes we can create a

00:23:54,559 --> 00:23:59,039
routes folder

00:23:55,919 --> 00:24:02,960
and in routes i can

00:23:59,039 --> 00:24:05,600
create a load.js in a load.js

00:24:02,960 --> 00:24:06,720
what i am doing is that i'm going to

00:24:05,600 --> 00:24:10,400
copy this

00:24:06,720 --> 00:24:14,559
and here i'm doing to export default

00:24:10,400 --> 00:24:19,840
uh async function

00:24:14,559 --> 00:24:19,840
app opts and

00:24:20,400 --> 00:24:28,720
and then i'm going to pass this in and

00:24:23,840 --> 00:24:32,640
then in my app.js i am just going to

00:24:28,720 --> 00:24:34,640
app dot register oh i need a tiny

00:24:32,640 --> 00:24:35,760
utility because otherwise it won't work

00:24:34,640 --> 00:24:38,880
on windows

00:24:35,760 --> 00:24:42,240
so this is for dealing with the sm

00:24:38,880 --> 00:24:44,400
so it's called dsm and i'm just going to

00:24:42,240 --> 00:24:44,400
do

00:24:45,120 --> 00:24:53,679
join um import

00:24:49,840 --> 00:24:54,320
well i want to import join informatica

00:24:53,679 --> 00:24:57,440
url

00:24:54,320 --> 00:24:59,600
the current file well i can

00:24:57,440 --> 00:25:00,880
i don't need this right now so i can

00:24:59,600 --> 00:25:06,080
just do

00:25:00,880 --> 00:25:11,200
routes and hello dot js

00:25:06,080 --> 00:25:11,200
okay then i cancel this and see if it

00:25:12,840 --> 00:25:19,520
works

00:25:14,640 --> 00:25:22,240
okay so it it did load

00:25:19,520 --> 00:25:22,880
and then it's it's still working cool

00:25:22,240 --> 00:25:25,039
okay

00:25:22,880 --> 00:25:27,279
so now uh one of the things that i want

00:25:25,039 --> 00:25:28,480
to use is instead i don't want to load

00:25:27,279 --> 00:25:30,400
all the files manually

00:25:28,480 --> 00:25:33,440
so what i'm going to do is i'm going to

00:25:30,400 --> 00:25:37,039
use autoload the autoload module

00:25:33,440 --> 00:25:38,720
so called fastify autoload

00:25:37,039 --> 00:25:40,720
and i'm going to use this with this

00:25:38,720 --> 00:25:44,559
utility called dsm

00:25:40,720 --> 00:25:48,640
and the reason for this it's because

00:25:44,559 --> 00:25:50,000
unfortunately uh uh you know in esm you

00:25:48,640 --> 00:25:51,520
don't have understand the score the name

00:25:50,000 --> 00:25:52,320
or the standard code file name so you

00:25:51,520 --> 00:25:54,320
need

00:25:52,320 --> 00:25:55,760
a little bit uh you need to work with

00:25:54,320 --> 00:25:57,919
file urls and

00:25:55,760 --> 00:25:59,440
that's a bit convoluted so i don't

00:25:57,919 --> 00:26:00,000
really i make mistakes all the time

00:25:59,440 --> 00:26:02,720
especially

00:26:00,000 --> 00:26:03,039
stuff that doesn't work on windows so uh

00:26:02,720 --> 00:26:05,200
i

00:26:03,039 --> 00:26:06,960
i tend to prefer to use my utility that

00:26:05,200 --> 00:26:08,559
has the thing called

00:26:06,960 --> 00:26:10,880
that so you do you specify your

00:26:08,559 --> 00:26:13,440
directory and then you say

00:26:10,880 --> 00:26:14,559
import meta url which is the current

00:26:13,440 --> 00:26:17,600
file

00:26:14,559 --> 00:26:20,320
and you put and then you say

00:26:17,600 --> 00:26:21,200
routes so you basically you tell load

00:26:20,320 --> 00:26:24,320
everything that

00:26:21,200 --> 00:26:24,720
is defined into that folder so you would

00:26:24,320 --> 00:26:28,320
then

00:26:24,720 --> 00:26:31,760
now run this and then i

00:26:28,320 --> 00:26:33,919
can curl it as you can see it still

00:26:31,760 --> 00:26:36,960
worked as expected as before

00:26:33,919 --> 00:26:38,000
pretty pretty nice pretty pretty nice

00:26:36,960 --> 00:26:40,880
indeed

00:26:38,000 --> 00:26:41,440
um cool folks oh one of the nicest

00:26:40,880 --> 00:26:43,520
things that

00:26:41,440 --> 00:26:45,360
i can actually create a folder nested

00:26:43,520 --> 00:26:49,400
structure so i can say

00:26:45,360 --> 00:26:52,799
a nested and then say

00:26:49,400 --> 00:26:56,640
route.yes and then i can

00:26:52,799 --> 00:27:00,320
copy this and put it in here

00:26:56,640 --> 00:27:02,640
and says alone nested note that i still

00:27:00,320 --> 00:27:04,240
use slash here to define this that the

00:27:02,640 --> 00:27:08,159
pattern is defined in the

00:27:04,240 --> 00:27:10,799
in the in the folder um and

00:27:08,159 --> 00:27:13,120
so let's see if if i can launch this

00:27:10,799 --> 00:27:13,120
stuff

00:27:15,360 --> 00:27:19,200
so this is still working okay cool and

00:27:18,000 --> 00:27:23,360
then if i do slash

00:27:19,200 --> 00:27:24,320
nested is still it goes into the nested

00:27:23,360 --> 00:27:28,880
folder

00:27:24,320 --> 00:27:33,440
um so yeah i just wanted to say

00:27:28,880 --> 00:27:36,320
to conclude to conclude this by uh

00:27:33,440 --> 00:27:38,080
by saying thank you and uh if you have

00:27:36,320 --> 00:27:40,640
any question please reach out to me

00:27:38,080 --> 00:27:42,200
at matocolina on twitter or via email

00:27:40,640 --> 00:27:45,120
there is also an

00:27:42,200 --> 00:27:48,399
addfastfijs account so

00:27:45,120 --> 00:27:54,799
um thank you uh thank you very much

00:27:48,399 --> 00:27:54,799

YouTube URL: https://www.youtube.com/watch?v=MOvLdfUhqrU


