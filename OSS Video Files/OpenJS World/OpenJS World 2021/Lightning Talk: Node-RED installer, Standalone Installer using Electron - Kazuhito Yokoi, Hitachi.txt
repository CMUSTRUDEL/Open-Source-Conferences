Title: Lightning Talk: Node-RED installer, Standalone Installer using Electron - Kazuhito Yokoi, Hitachi
Publication date: 2021-05-28
Playlist: OpenJS World 2021
Description: 
	Recently, the visual programming tool, Node-RED has been used in factories to control industrial hardware based on the sensor and image data. Because non-IT engineers can easily develop their original programs without coding, the Node-RED has become crucial to make factories modern. To adopt Node-RED to the real factories in the closed network, Hitachi encountered issues to place servers and update software components because almost JavaScript technologies tend to require the online environment to download the components from the Internet. To solve the problem, they have utilized Electron to create a single package that includes all components related to Node-RED. Furthermore, based on their experiences using Electron, they started the "Node-RED installer" project under the OpenJS Foundation. In this presentation, he explains the project and demonstration in factory use cases.
Captions: 
	00:00:01,599 --> 00:00:07,600
hello everyone thank you for attending

00:00:04,080 --> 00:00:10,960
my session my name is kazuki okoye

00:00:07,600 --> 00:00:13,920
i am a software engineer at starch

00:00:10,960 --> 00:00:14,880
today i will talk about node-red

00:00:13,920 --> 00:00:17,440
installer

00:00:14,880 --> 00:00:18,960
which is standalone installer using

00:00:17,440 --> 00:00:21,840
electron

00:00:18,960 --> 00:00:21,840
let me start

00:00:22,720 --> 00:00:27,920
the first slide is about the background

00:00:25,519 --> 00:00:31,119
of the factory modernization

00:00:27,920 --> 00:00:32,880
in modern factory local development is

00:00:31,119 --> 00:00:34,880
essential for non-ig

00:00:32,880 --> 00:00:36,399
engineers to create their original

00:00:34,880 --> 00:00:38,879
solutions

00:00:36,399 --> 00:00:42,559
these are examples of factory

00:00:38,879 --> 00:00:42,559
modernization use cases

00:00:42,640 --> 00:00:46,160
the bottom picture is a typical iot

00:00:45,520 --> 00:00:50,000
system

00:00:46,160 --> 00:00:52,399
to realize these use cases in the system

00:00:50,000 --> 00:00:53,039
the edge computer collects the sensor

00:00:52,399 --> 00:00:57,280
data

00:00:53,039 --> 00:01:00,239
or image data from the production lines

00:00:57,280 --> 00:01:01,199
the computer analyze the data and

00:01:00,239 --> 00:01:05,040
visualize them

00:01:01,199 --> 00:01:07,840
to the dashboard or lcd

00:01:05,040 --> 00:01:10,240
as needed it controls the robot in the

00:01:07,840 --> 00:01:13,280
production lines

00:01:10,240 --> 00:01:15,920
thanks to draw code tool non-id

00:01:13,280 --> 00:01:16,960
engineer can develop the system and

00:01:15,920 --> 00:01:20,080
improve them by

00:01:16,960 --> 00:01:23,680
themselves based on their knowledge

00:01:20,080 --> 00:01:23,680
about the production lines

00:01:24,479 --> 00:01:30,960
this slide introduces nodulet

00:01:27,680 --> 00:01:34,240
noderet is a local programming tool for

00:01:30,960 --> 00:01:37,200
iot and web applications

00:01:34,240 --> 00:01:38,000
it is a browser-based environment

00:01:37,200 --> 00:01:42,479
running on

00:01:38,000 --> 00:01:45,600
node.js and more than 3000 connectors

00:01:42,479 --> 00:01:48,479
exist in the node-red community

00:01:45,600 --> 00:01:50,799
for example there are connectors for

00:01:48,479 --> 00:01:55,520
industry iot protocols

00:01:50,799 --> 00:01:58,560
data visualization and image recognition

00:01:55,520 --> 00:02:00,000
node red can develop systems from chip

00:01:58,560 --> 00:02:02,880
to cloud

00:02:00,000 --> 00:02:05,680
therefore you can select the environment

00:02:02,880 --> 00:02:05,680
which you need

00:02:06,079 --> 00:02:09,200
if you visit the node-red offshore

00:02:08,399 --> 00:02:12,560
website

00:02:09,200 --> 00:02:15,280
you can understand who is using node-red

00:02:12,560 --> 00:02:16,560
as you can see here there are currently

00:02:15,280 --> 00:02:19,440
31 logos

00:02:16,560 --> 00:02:19,840
on the website out of companies have

00:02:19,440 --> 00:02:24,319
used

00:02:19,840 --> 00:02:24,319
nodelet in their production systems

00:02:24,800 --> 00:02:31,360
next i will explain our problem which we

00:02:28,000 --> 00:02:33,519
encountered in our production systems

00:02:31,360 --> 00:02:35,680
there are conflicting backgrounds

00:02:33,519 --> 00:02:39,200
between javascript technologies

00:02:35,680 --> 00:02:42,319
and industry iot fields first

00:02:39,200 --> 00:02:44,400
javascript technologies tend to require

00:02:42,319 --> 00:02:45,920
internet connections to download

00:02:44,400 --> 00:02:49,200
components

00:02:45,920 --> 00:02:51,840
for example as you know the npm command

00:02:49,200 --> 00:02:53,360
accesses the npm repository on the

00:02:51,840 --> 00:02:56,239
internet

00:02:53,360 --> 00:02:57,360
in another case tensorflow models are

00:02:56,239 --> 00:03:00,640
also available

00:02:57,360 --> 00:03:03,200
on the internet on the other hand

00:03:00,640 --> 00:03:04,000
mission critical iot systems inside

00:03:03,200 --> 00:03:06,959
factories

00:03:04,000 --> 00:03:09,280
are in the closed network to be as

00:03:06,959 --> 00:03:12,080
stable as possible

00:03:09,280 --> 00:03:12,879
due to this situation we encountered the

00:03:12,080 --> 00:03:18,080
problem

00:03:12,879 --> 00:03:20,959
when installing and upgrading node red

00:03:18,080 --> 00:03:21,680
to solve the problem we considered two

00:03:20,959 --> 00:03:25,599
solutions

00:03:21,680 --> 00:03:26,159
as follows the first is the container

00:03:25,599 --> 00:03:29,360
image

00:03:26,159 --> 00:03:32,480
which includes all of the components

00:03:29,360 --> 00:03:33,040
the advantage is that the moderate

00:03:32,480 --> 00:03:36,239
project

00:03:33,040 --> 00:03:39,360
has published the offshore image so

00:03:36,239 --> 00:03:40,159
we can easily create a custom container

00:03:39,360 --> 00:03:43,200
image

00:03:40,159 --> 00:03:46,480
from the offshore one but some

00:03:43,200 --> 00:03:50,480
ig knowledge is required to utilize

00:03:46,480 --> 00:03:53,760
docker environments the second one

00:03:50,480 --> 00:03:56,799
is the standalone installer

00:03:53,760 --> 00:04:00,000
it is easy for non-it engineers to

00:03:56,799 --> 00:04:02,959
install node-red but in terms of

00:04:00,000 --> 00:04:03,680
open source software development it is

00:04:02,959 --> 00:04:08,000
hard to

00:04:03,680 --> 00:04:11,360
support various operating systems

00:04:08,000 --> 00:04:14,799
to accomplish this disadvantage

00:04:11,360 --> 00:04:18,320
we used electron and started to develop

00:04:14,799 --> 00:04:18,320
the node red installer

00:04:18,959 --> 00:04:22,160
this slide explains about node red

00:04:21,359 --> 00:04:25,840
installer

00:04:22,160 --> 00:04:27,199
which we developed it is a standalone

00:04:25,840 --> 00:04:30,720
installer

00:04:27,199 --> 00:04:33,280
including node.js node.red connectors

00:04:30,720 --> 00:04:36,240
and node red as you can see on the

00:04:33,280 --> 00:04:38,960
bottom left diagram

00:04:36,240 --> 00:04:41,520
installers are available for three

00:04:38,960 --> 00:04:45,040
operating systems

00:04:41,520 --> 00:04:48,720
to be the same as the existing node red

00:04:45,040 --> 00:04:51,520
it behaves as a server therefore

00:04:48,720 --> 00:04:53,680
the browser engine in electron is not

00:04:51,520 --> 00:04:56,800
used currently

00:04:53,680 --> 00:04:57,280
instead of that external browsers are

00:04:56,800 --> 00:05:01,360
used

00:04:57,280 --> 00:05:01,360
to access the node.red flow editor

00:05:01,759 --> 00:05:05,759
this slide is about how to build the

00:05:04,320 --> 00:05:08,880
installers

00:05:05,759 --> 00:05:12,560
to generate native installers we used

00:05:08,880 --> 00:05:16,080
electron builder if additional npm

00:05:12,560 --> 00:05:20,320
modules or components are required

00:05:16,080 --> 00:05:23,039
we need to download them in advance

00:05:20,320 --> 00:05:24,000
for the environment to build we are

00:05:23,039 --> 00:05:27,600
currently using

00:05:24,000 --> 00:05:29,759
travis ci but according to the document

00:05:27,600 --> 00:05:31,600
it is early stage as a windows

00:05:29,759 --> 00:05:35,039
environment

00:05:31,600 --> 00:05:38,880
therefore i tried did have actions

00:05:35,039 --> 00:05:41,840
instead of travis ci

00:05:38,880 --> 00:05:42,960
build installers are msi file for

00:05:41,840 --> 00:05:46,240
windows

00:05:42,960 --> 00:05:51,919
dmz file for mac os dev

00:05:46,240 --> 00:05:54,560
and rpm file for the linux environment

00:05:51,919 --> 00:05:57,039
this is a demonstration to install node

00:05:54,560 --> 00:05:59,440
red to windows pc

00:05:57,039 --> 00:06:00,720
after clicking the installer file on the

00:05:59,440 --> 00:06:03,039
desktop

00:06:00,720 --> 00:06:05,680
the installer automatically sets up the

00:06:03,039 --> 00:06:08,639
node red environment

00:06:05,680 --> 00:06:09,520
on the task tray area the new icon

00:06:08,639 --> 00:06:12,560
emerged to

00:06:09,520 --> 00:06:16,800
select the open browser or exit

00:06:12,560 --> 00:06:17,360
node process after opening the node.flow

00:06:16,800 --> 00:06:20,639
editor

00:06:17,360 --> 00:06:22,800
on the browser you can create your role

00:06:20,639 --> 00:06:22,800
as

00:06:32,840 --> 00:06:38,319
usual

00:06:35,840 --> 00:06:40,000
this slide illustrates an advanced

00:06:38,319 --> 00:06:42,800
demonstration

00:06:40,000 --> 00:06:44,400
it is object detection in automated

00:06:42,800 --> 00:06:46,720
lines

00:06:44,400 --> 00:06:47,520
in this factory the cameras are

00:06:46,720 --> 00:06:50,720
capturing

00:06:47,520 --> 00:06:53,120
images in this production line

00:06:50,720 --> 00:06:53,919
using the captured image the edge

00:06:53,120 --> 00:06:56,319
computer

00:06:53,919 --> 00:06:59,280
categorizes the object using the

00:06:56,319 --> 00:07:02,400
tensorflow.js model

00:06:59,280 --> 00:07:03,360
when the target object is detected the

00:07:02,400 --> 00:07:07,919
robot arm

00:07:03,360 --> 00:07:07,919
moves the object to another line

00:07:08,560 --> 00:07:13,120
this is actual node-red flow after the

00:07:12,080 --> 00:07:16,400
camera connector

00:07:13,120 --> 00:07:17,199
details the image the tensorflow.js

00:07:16,400 --> 00:07:22,960
connector

00:07:17,199 --> 00:07:28,240
analyzes it when a bottle is detected

00:07:22,960 --> 00:07:28,240
the nodelet controls the arm immediately

00:07:28,720 --> 00:07:32,639
now i'm reaching the end of my

00:07:30,880 --> 00:07:35,280
presentation

00:07:32,639 --> 00:07:38,560
let me briefly summarize the main points

00:07:35,280 --> 00:07:41,840
which i talked about today

00:07:38,560 --> 00:07:43,440
first we found that the electron is

00:07:41,840 --> 00:07:47,360
suitable for packaging

00:07:43,440 --> 00:07:50,319
components for offline environments

00:07:47,360 --> 00:07:51,039
second the electron-based installer

00:07:50,319 --> 00:07:54,160
makes it

00:07:51,039 --> 00:07:54,960
easy for non-it engineers to install

00:07:54,160 --> 00:07:58,240
node-red

00:07:54,960 --> 00:08:01,360
inside factories

00:07:58,240 --> 00:08:04,080
as the next step we need to consider

00:08:01,360 --> 00:08:05,680
how to install third party connectors in

00:08:04,080 --> 00:08:08,080
node red

00:08:05,680 --> 00:08:09,599
additionally to use the electron

00:08:08,080 --> 00:08:12,639
functionality

00:08:09,599 --> 00:08:15,520
we are going to design desktop ui

00:08:12,639 --> 00:08:15,520
experiences

00:08:16,160 --> 00:08:19,280
in the last slide please allow me to

00:08:18,639 --> 00:08:22,560
introduce

00:08:19,280 --> 00:08:26,160
information about node red first

00:08:22,560 --> 00:08:27,319
there are online articles on the linux

00:08:26,160 --> 00:08:30,479
foundation blog

00:08:27,319 --> 00:08:33,680
linux.com you can read articles

00:08:30,479 --> 00:08:35,760
related to today's session

00:08:33,680 --> 00:08:37,039
the second one is the node red

00:08:35,760 --> 00:08:40,240
conference

00:08:37,039 --> 00:08:42,800
to share use cases in enterprise

00:08:40,240 --> 00:08:43,919
community members held annual nodal

00:08:42,800 --> 00:08:46,959
conferences

00:08:43,919 --> 00:08:49,839
two years in a row

00:08:46,959 --> 00:08:53,200
at the end of this year we are going to

00:08:49,839 --> 00:08:56,480
hold the conference online

00:08:53,200 --> 00:08:59,040
the third is the nodal book

00:08:56,480 --> 00:09:01,600
recently one of community members

00:08:59,040 --> 00:09:04,560
published a nodelet book

00:09:01,600 --> 00:09:07,040
i contributed to this book as one of the

00:09:04,560 --> 00:09:10,320
tech reviewers

00:09:07,040 --> 00:09:13,440
if you are interested in node red please

00:09:10,320 --> 00:09:13,440
check these contents

00:09:13,839 --> 00:09:23,839
that's all thank you for watching my

00:09:16,240 --> 00:09:23,839
session today

00:09:27,120 --> 00:09:29,200

YouTube URL: https://www.youtube.com/watch?v=1G-jEAf7dX4


