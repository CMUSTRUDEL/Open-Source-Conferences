Title: Webpackage is Probably One of the Greatest Opportunities to Make the Web... - Vladimir de Turckheim
Publication date: 2021-05-28
Playlist: OpenJS World 2021
Description: 
	Webpackage is Probably One of the Greatest Opportunities to Make the Web More Secure and Reliable - Vladimir de Turckheim, Datadog 

Webpackage (not Webpack!) as a specification has been discussed for a few years. It evolved a lot but the end goal is still the same: providing packaging for web resources.

What does that mean? Does Webpackage have an impact on web security (spoiler alert! yes)? How can you leverage it today and for what benefits?

Watch this talk to answer these questions and much more.
Captions: 
	00:00:01,520 --> 00:00:06,720
hello and welcome to my talk about

00:00:03,520 --> 00:00:08,639
web packages web packages is probably

00:00:06,720 --> 00:00:12,000
one of the greatest opportunities

00:00:08,639 --> 00:00:14,160
to make the web more secure and reliable

00:00:12,000 --> 00:00:15,440
i know this title is too long and i know

00:00:14,160 --> 00:00:17,920
this talk is not about

00:00:15,440 --> 00:00:18,880
webpack so javascript tool it's about

00:00:17,920 --> 00:00:21,520
web package

00:00:18,880 --> 00:00:23,920
an upcoming specification on how to

00:00:21,520 --> 00:00:26,800
build and distribute websites

00:00:23,920 --> 00:00:28,240
let's deep dive but before we go into

00:00:26,800 --> 00:00:30,240
web packages

00:00:28,240 --> 00:00:31,439
i have two things to do first of all

00:00:30,240 --> 00:00:34,320
introduce myself

00:00:31,439 --> 00:00:35,920
i'm vladimir turkem i joined datadog as

00:00:34,320 --> 00:00:38,320
a senior software engineer

00:00:35,920 --> 00:00:39,840
earlier this year uh with the

00:00:38,320 --> 00:00:41,840
acquisition of screen

00:00:39,840 --> 00:00:44,000
which was a startup i've been working at

00:00:41,840 --> 00:00:47,680
for five years

00:00:44,000 --> 00:00:51,199
screen is a cyber security absec

00:00:47,680 --> 00:00:52,239
oriented company and now at datadog i'm

00:00:51,199 --> 00:00:56,000
technical lead

00:00:52,239 --> 00:00:59,680
of the absec tracer division

00:00:56,000 --> 00:01:02,079
i'm also an core collaborator and an ogs

00:00:59,680 --> 00:01:05,280
security working group member

00:01:02,079 --> 00:01:08,479
also you can reach out to me at

00:01:05,280 --> 00:01:10,320
poldifet on twitter that's probably the

00:01:08,479 --> 00:01:13,680
easiest way to contact me

00:01:10,320 --> 00:01:16,640
and my dms are open

00:01:13,680 --> 00:01:18,479
okay quick disclaimer i don't work on

00:01:16,640 --> 00:01:21,680
the web package specification

00:01:18,479 --> 00:01:22,960
when neither for any organism whenever

00:01:21,680 --> 00:01:25,280
for datadog

00:01:22,960 --> 00:01:27,119
the content of this talk is about my own

00:01:25,280 --> 00:01:29,680
opinions about web packages

00:01:27,119 --> 00:01:30,400
in terms of security and i'm not

00:01:29,680 --> 00:01:33,280
involved

00:01:30,400 --> 00:01:34,479
with web package and i'm not involved

00:01:33,280 --> 00:01:36,880
with web package

00:01:34,479 --> 00:01:37,840
in the scope of the organization i am a

00:01:36,880 --> 00:01:41,040
member of

00:01:37,840 --> 00:01:43,360
whether this is no js or datadog so

00:01:41,040 --> 00:01:45,520
all of that is very personal and i am

00:01:43,360 --> 00:01:46,960
the sole responsible for the content of

00:01:45,520 --> 00:01:49,680
this talk

00:01:46,960 --> 00:01:50,240
what is web package and still it's not

00:01:49,680 --> 00:01:53,520
about

00:01:50,240 --> 00:01:56,079
webpack web package is

00:01:53,520 --> 00:01:56,880
actually a set of three specs that

00:01:56,079 --> 00:02:00,079
define

00:01:56,880 --> 00:02:04,719
how to bundle a web application in

00:02:00,079 --> 00:02:08,560
a single file how to distribute it

00:02:04,719 --> 00:02:12,879
with a signature and how to load

00:02:08,560 --> 00:02:15,920
it with a signature check so basically

00:02:12,879 --> 00:02:17,360
it's about building a website in a

00:02:15,920 --> 00:02:21,599
single file

00:02:17,360 --> 00:02:24,959
signing it and loading it in a browser

00:02:21,599 --> 00:02:25,599
web bundle well it's basically a single

00:02:24,959 --> 00:02:27,520
bundle

00:02:25,599 --> 00:02:29,840
a single file and we'll see that in the

00:02:27,520 --> 00:02:32,959
live demo which can contain

00:02:29,840 --> 00:02:36,640
anything you want as assets

00:02:32,959 --> 00:02:37,360
in a web application whether that's html

00:02:36,640 --> 00:02:40,480
pages

00:02:37,360 --> 00:02:44,160
javascript files images css

00:02:40,480 --> 00:02:47,280
or anything else all of that in a single

00:02:44,160 --> 00:02:50,319
standardized distributed distributable

00:02:47,280 --> 00:02:53,680
file you can distribute

00:02:50,319 --> 00:02:56,160
a full web application with that

00:02:53,680 --> 00:02:58,480
okay let's go for the demo and let's

00:02:56,160 --> 00:03:00,879
hope everything goes all right

00:02:58,480 --> 00:03:01,519
so on my screen you should be able to

00:03:00,879 --> 00:03:03,440
see

00:03:01,519 --> 00:03:05,120
a terminal i haven't cleared out

00:03:03,440 --> 00:03:08,400
properly we've got

00:03:05,120 --> 00:03:10,879
a small tic-tac-toe application

00:03:08,400 --> 00:03:13,360
that basically enables you to play

00:03:10,879 --> 00:03:15,519
tic-tac-toe and lose against yourself

00:03:13,360 --> 00:03:17,040
this is a really cool app and i found it

00:03:15,519 --> 00:03:20,319
directly on github

00:03:17,040 --> 00:03:21,920
by googling vania js tic-tac-toe so here

00:03:20,319 --> 00:03:25,280
is the original repo

00:03:21,920 --> 00:03:28,879
i took it from so the question

00:03:25,280 --> 00:03:32,560
is can we bundle this application

00:03:28,879 --> 00:03:35,519
and redistribute it hopefully yes so

00:03:32,560 --> 00:03:37,920
i will use a command named jane bundle

00:03:35,519 --> 00:03:40,400
and i will provide as a first argument

00:03:37,920 --> 00:03:43,680
directory which contains the source of

00:03:40,400 --> 00:03:46,159
our web application

00:03:43,680 --> 00:03:47,760
then i will say that i want as an output

00:03:46,159 --> 00:03:51,840
site.web bundle

00:03:47,760 --> 00:03:53,439
and i need to provide urls based urls

00:03:51,840 --> 00:03:56,480
and primary urls

00:03:53,439 --> 00:03:59,920
will still be used to

00:03:56,480 --> 00:04:01,439
identify the resources so here i say

00:03:59,920 --> 00:04:05,200
that my base url

00:04:01,439 --> 00:04:08,560
is localhost port 3000

00:04:05,200 --> 00:04:10,799
so i bundle it and here it tells me a

00:04:08,560 --> 00:04:12,959
lot of things that it has bundled it

00:04:10,799 --> 00:04:14,159
and you can see that it has generated

00:04:12,959 --> 00:04:17,560
urls for

00:04:14,159 --> 00:04:19,079
each of the entries game.js and

00:04:17,560 --> 00:04:22,720
index.html

00:04:19,079 --> 00:04:26,160
style.css if i refresh

00:04:22,720 --> 00:04:30,199
i see that there is a new file

00:04:26,160 --> 00:04:33,199
in my directory which is

00:04:30,199 --> 00:04:37,040
site.wbn so

00:04:33,199 --> 00:04:40,479
let's open that with our explorer

00:04:37,040 --> 00:04:40,960
and open a new window here and drag and

00:04:40,479 --> 00:04:44,240
drop

00:04:40,960 --> 00:04:46,960
the website to chrome okay

00:04:44,240 --> 00:04:47,840
so as you can see we've got the wall

00:04:46,960 --> 00:04:50,960
website

00:04:47,840 --> 00:04:53,600
working without actually

00:04:50,960 --> 00:04:55,440
loading it from the local host i don't

00:04:53,600 --> 00:04:56,560
have any local server outside of the one

00:04:55,440 --> 00:05:00,160
from my ide

00:04:56,560 --> 00:05:03,280
and this has been loaded only through

00:05:00,160 --> 00:05:06,560
the web bundle okay so

00:05:03,280 --> 00:05:07,199
to get there i had to enable flag on

00:05:06,560 --> 00:05:10,000
chrome

00:05:07,199 --> 00:05:12,160
so you can check the chrome page about

00:05:10,000 --> 00:05:15,199
web bundle if you want to do the same

00:05:12,160 --> 00:05:17,919
but basically yes

00:05:15,199 --> 00:05:19,520
that's still an experimental feature so

00:05:17,919 --> 00:05:22,639
you need to enable it

00:05:19,520 --> 00:05:26,800
yourself if we check

00:05:22,639 --> 00:05:29,199
what's in the network tab

00:05:26,800 --> 00:05:30,960
we can see that the first thing that has

00:05:29,199 --> 00:05:34,320
been loaded

00:05:30,960 --> 00:05:36,560
is actually the file with a query string

00:05:34,320 --> 00:05:37,960
pointing to the base url and the

00:05:36,560 --> 00:05:40,639
response is

00:05:37,960 --> 00:05:44,000
index.html because at the default

00:05:40,639 --> 00:05:47,759
entry of our web bundle

00:05:44,000 --> 00:05:50,800
then the css and the js file

00:05:47,759 --> 00:05:53,600
have been loaded exactly as

00:05:50,800 --> 00:05:55,440
the if they have been served by a web

00:05:53,600 --> 00:05:58,639
server

00:05:55,440 --> 00:05:59,680
that's actually pretty cool because all

00:05:58,639 --> 00:06:02,800
the assets

00:05:59,680 --> 00:06:06,080
of the web application have been loaded

00:06:02,800 --> 00:06:09,600
as if i had a running web server

00:06:06,080 --> 00:06:13,840
but only by dragging and dropping a file

00:06:09,600 --> 00:06:16,080
on my browser that's pretty exciting

00:06:13,840 --> 00:06:17,440
so the question you may have is what's

00:06:16,080 --> 00:06:20,080
inside this file

00:06:17,440 --> 00:06:21,120
and if i open it well we can see some

00:06:20,080 --> 00:06:24,400
stuff but it's

00:06:21,120 --> 00:06:25,919
unreadable properly by my id so i will

00:06:24,400 --> 00:06:29,280
use another comment

00:06:25,919 --> 00:06:32,240
that is called the bundle

00:06:29,280 --> 00:06:34,560
now i can see the content of the bundle

00:06:32,240 --> 00:06:38,140
in a human friendly way

00:06:34,560 --> 00:06:41,350
and at the top let me zoom in a bit

00:06:38,140 --> 00:06:41,350
[Music]

00:06:42,160 --> 00:06:46,880
no okay definitely not what i wanted to

00:06:44,560 --> 00:06:48,720
do so let's keep it this way sorry about

00:06:46,880 --> 00:06:51,440
this miss you have first

00:06:48,720 --> 00:06:51,919
version this is temporary where the spec

00:06:51,440 --> 00:06:54,560
is

00:06:51,919 --> 00:06:55,440
under building but then you've got

00:06:54,560 --> 00:06:58,319
details about

00:06:55,440 --> 00:07:00,240
manifest telling the base url and then

00:06:58,319 --> 00:07:04,400
for multiple urls

00:07:00,240 --> 00:07:07,840
you've got a url the statue code

00:07:04,400 --> 00:07:10,960
and the actual headers

00:07:07,840 --> 00:07:14,240
to use when serving the content

00:07:10,960 --> 00:07:17,840
this means that we can actually

00:07:14,240 --> 00:07:18,960
set the distribution header within the

00:07:17,840 --> 00:07:21,680
web bundle

00:07:18,960 --> 00:07:23,199
there's a comment for that and when your

00:07:21,680 --> 00:07:26,240
website will be loaded

00:07:23,199 --> 00:07:29,759
in the browser these headers

00:07:26,240 --> 00:07:32,639
will be added automatically

00:07:29,759 --> 00:07:34,160
when loaded in the browser so here we've

00:07:32,639 --> 00:07:37,280
got our

00:07:34,160 --> 00:07:40,880
main entry point with our index page

00:07:37,280 --> 00:07:42,840
or html code i probably have missed

00:07:40,880 --> 00:07:46,720
something here

00:07:42,840 --> 00:07:48,000
sorry so here we've got another page

00:07:46,720 --> 00:07:51,599
which is our js

00:07:48,000 --> 00:07:56,080
code here we've got the js code

00:07:51,599 --> 00:07:59,360
file that is also loadable properly

00:07:56,080 --> 00:08:03,120
if we go under we've got

00:07:59,360 --> 00:08:06,160
a redirection so if you ask for index

00:08:03,120 --> 00:08:08,400
dot html it will actually answer with a

00:08:06,160 --> 00:08:11,199
301 http code

00:08:08,400 --> 00:08:13,120
and redirect to slash that's actually

00:08:11,199 --> 00:08:16,160
really cool you can even have

00:08:13,120 --> 00:08:18,240
complex flows like redirections

00:08:16,160 --> 00:08:19,759
within a web bundle and the last phase

00:08:18,240 --> 00:08:23,039
we have is

00:08:19,759 --> 00:08:26,319
the style file so to get

00:08:23,039 --> 00:08:31,039
there i used actually the tools

00:08:26,319 --> 00:08:31,039
available in the web package github repo

00:08:31,919 --> 00:08:40,000
which are called gen bundle and

00:08:36,320 --> 00:08:43,279
dump pendle you can use

00:08:40,000 --> 00:08:46,399
also sign bundle to sign the bundle

00:08:43,279 --> 00:08:49,680
uh if you've got an https certificate

00:08:46,399 --> 00:08:52,959
uh available to sign it that's the

00:08:49,680 --> 00:08:53,519
up-to-date way of building web bundles

00:08:52,959 --> 00:08:55,760
now

00:08:53,519 --> 00:08:56,560
it's a go command so you have to install

00:08:55,760 --> 00:08:59,279
it

00:08:56,560 --> 00:09:00,640
using goget and you have to install go

00:08:59,279 --> 00:09:04,360
on your machine

00:09:00,640 --> 00:09:07,600
there's also a javascript

00:09:04,360 --> 00:09:11,360
implementation on npm

00:09:07,600 --> 00:09:11,920
named wbn but i haven't tested it so i

00:09:11,360 --> 00:09:14,560
can't

00:09:11,920 --> 00:09:16,880
recommend it right now that's you to

00:09:14,560 --> 00:09:20,080
test it

00:09:16,880 --> 00:09:21,519
okay so we have seen the demo

00:09:20,080 --> 00:09:23,600
and that's really cool because this

00:09:21,519 --> 00:09:26,640
blender you can distribute offline

00:09:23,600 --> 00:09:27,680
if uh you want to give this bundle to

00:09:26,640 --> 00:09:30,399
someone else

00:09:27,680 --> 00:09:31,200
from your mobile phone well that's as

00:09:30,399 --> 00:09:34,800
easy as

00:09:31,200 --> 00:09:37,680
sharing a whatsapp message or any other

00:09:34,800 --> 00:09:39,279
message library message service provider

00:09:37,680 --> 00:09:42,480
you use

00:09:39,279 --> 00:09:45,680
the headers used to serve the apps

00:09:42,480 --> 00:09:46,480
are part of the deliverable that's

00:09:45,680 --> 00:09:48,640
actually

00:09:46,480 --> 00:09:49,600
really important for the rest of this

00:09:48,640 --> 00:09:53,600
talk

00:09:49,600 --> 00:09:53,600
now a word about signed exchange

00:09:53,920 --> 00:10:00,880
signed exchange basically is about

00:09:57,040 --> 00:10:04,000
having the https signature

00:10:00,880 --> 00:10:09,120
in the bundle so as you have noticed

00:10:04,000 --> 00:10:13,440
every item in the bundle has

00:10:09,120 --> 00:10:16,880
an url so you can actually rely on https

00:10:13,440 --> 00:10:19,600
if you own the domain used for the url

00:10:16,880 --> 00:10:21,440
you just need to use the same

00:10:19,600 --> 00:10:24,399
certificate you would use

00:10:21,440 --> 00:10:25,519
on your domain so you need to own this

00:10:24,399 --> 00:10:29,040
and you can

00:10:25,519 --> 00:10:29,680
sign the bundle with that which means

00:10:29,040 --> 00:10:33,120
that

00:10:29,680 --> 00:10:36,640
from the url the web browser can

00:10:33,120 --> 00:10:39,920
check the certificate for the domain

00:10:36,640 --> 00:10:40,959
and check for integrity that means that

00:10:39,920 --> 00:10:44,000
your web bundle

00:10:40,959 --> 00:10:47,519
can be distributed offline

00:10:44,000 --> 00:10:50,959
but still has integrity check

00:10:47,519 --> 00:10:53,839
and that's actually pretty powerful

00:10:50,959 --> 00:10:55,120
so this was this is a talk about

00:10:53,839 --> 00:10:58,720
security

00:10:55,120 --> 00:11:02,399
so let me give you my opinions about

00:10:58,720 --> 00:11:03,839
the opportunities this brings to a more

00:11:02,399 --> 00:11:07,120
secure and reliable

00:11:03,839 --> 00:11:09,519
javascript world and web world there are

00:11:07,120 --> 00:11:12,640
multiple opportunities here

00:11:09,519 --> 00:11:15,680
some of them are for the web browser

00:11:12,640 --> 00:11:19,360
we have a standard way

00:11:15,680 --> 00:11:20,000
of adding security headers and before i

00:11:19,360 --> 00:11:22,079
explain

00:11:20,000 --> 00:11:24,480
why security editors are important i

00:11:22,079 --> 00:11:27,360
have to tell you a secret

00:11:24,480 --> 00:11:30,079
it's a secret about web browsers they

00:11:27,360 --> 00:11:32,560
don't instantiate web content

00:11:30,079 --> 00:11:34,959
they instantiate web content under

00:11:32,560 --> 00:11:37,519
certain constraints

00:11:34,959 --> 00:11:39,519
basically these constraints are defined

00:11:37,519 --> 00:11:42,320
by headers mostly

00:11:39,519 --> 00:11:43,279
and it's the equivalent of compiler

00:11:42,320 --> 00:11:47,360
flags

00:11:43,279 --> 00:11:47,360
for compiled languages

00:11:47,440 --> 00:11:50,720
so let's take an example of security

00:11:49,600 --> 00:11:52,399
headers

00:11:50,720 --> 00:11:53,839
if you haven't heard about content

00:11:52,399 --> 00:11:55,760
security policy

00:11:53,839 --> 00:11:57,200
you're missing out on something really

00:11:55,760 --> 00:12:00,560
exciting

00:11:57,200 --> 00:12:02,639
that's a header you can set when you

00:12:00,560 --> 00:12:06,079
distribute web content

00:12:02,639 --> 00:12:09,839
that actually defines the allowed

00:12:06,079 --> 00:12:13,519
origin for resource types

00:12:09,839 --> 00:12:16,880
in your csp you can say hey

00:12:13,519 --> 00:12:19,920
images can only be served by this

00:12:16,880 --> 00:12:23,399
hostname self or by

00:12:19,920 --> 00:12:26,079
this url this domain like

00:12:23,399 --> 00:12:28,880
imagehosting.com

00:12:26,079 --> 00:12:30,480
or you can say that javascript code

00:12:28,880 --> 00:12:34,079
cannot be loaded

00:12:30,480 --> 00:12:35,920
unless they are sent from your current

00:12:34,079 --> 00:12:38,079
domain and that's actually really

00:12:35,920 --> 00:12:41,279
powerful because it prevents

00:12:38,079 --> 00:12:41,839
people from saying from exploiting some

00:12:41,279 --> 00:12:45,680
kind of

00:12:41,839 --> 00:12:47,839
xss also

00:12:45,680 --> 00:12:48,800
that's what you use to enforce trusted

00:12:47,839 --> 00:12:52,000
types

00:12:48,800 --> 00:12:54,160
trusted types are not well known yet but

00:12:52,000 --> 00:12:55,680
they are one of the most excited

00:12:54,160 --> 00:12:58,320
exciting evolution

00:12:55,680 --> 00:13:00,079
of the frontend web security in term of

00:12:58,320 --> 00:13:03,120
xss protection

00:13:00,079 --> 00:13:06,320
the tldr for trustees type is that

00:13:03,120 --> 00:13:07,760
there won't be any eval injections that

00:13:06,320 --> 00:13:10,480
can't be prevented

00:13:07,760 --> 00:13:11,760
in the front end anymore that's the

00:13:10,480 --> 00:13:13,839
content for a whole

00:13:11,760 --> 00:13:14,959
totally different talk and i encourage

00:13:13,839 --> 00:13:18,079
you to check

00:13:14,959 --> 00:13:20,720
a talk that mike samuels

00:13:18,079 --> 00:13:21,120
gave at this conference two years ago

00:13:20,720 --> 00:13:24,320
it's

00:13:21,120 --> 00:13:27,920
actually really really really exciting

00:13:24,320 --> 00:13:31,920
a bit complex to handle but so exciting

00:13:27,920 --> 00:13:36,320
and both of them um

00:13:31,920 --> 00:13:38,079
origin integra origin definitions in csp

00:13:36,320 --> 00:13:41,199
interested types in csp

00:13:38,079 --> 00:13:43,920
are actually hard to handle because

00:13:41,199 --> 00:13:44,880
in a world where security is defined by

00:13:43,920 --> 00:13:48,000
headers

00:13:44,880 --> 00:13:51,040
well these headers have impact on what

00:13:48,000 --> 00:13:54,800
assets the browser can load so

00:13:51,040 --> 00:13:56,480
if you say hey i allow this cdn to serve

00:13:54,800 --> 00:13:59,519
javascript code

00:13:56,480 --> 00:14:02,720
well this is burnt uh this is set

00:13:59,519 --> 00:14:04,959
by the cdn level by the person that

00:14:02,720 --> 00:14:06,639
handles the apache or the nginx

00:14:04,959 --> 00:14:09,040
that serves your website not the

00:14:06,639 --> 00:14:12,480
developer the website developers

00:14:09,040 --> 00:14:15,600
know where to load the assets from

00:14:12,480 --> 00:14:17,040
the website hoster doesn't so there is

00:14:15,600 --> 00:14:20,240
always a gap here

00:14:17,040 --> 00:14:22,880
by bundling that into the web bundle

00:14:20,240 --> 00:14:25,600
by having that part of the deliverable

00:14:22,880 --> 00:14:28,160
the developer is also responsible

00:14:25,600 --> 00:14:29,040
of knowing where the assets come from

00:14:28,160 --> 00:14:31,360
and

00:14:29,040 --> 00:14:32,800
there is no lack of ownership because

00:14:31,360 --> 00:14:36,399
lack of ownership

00:14:32,800 --> 00:14:38,000
brings security issues another example

00:14:36,399 --> 00:14:41,040
of security header

00:14:38,000 --> 00:14:42,720
x fram options enable you to prevent

00:14:41,040 --> 00:14:45,519
your website from being loaded

00:14:42,720 --> 00:14:46,399
in a frame and avoid click jacking once

00:14:45,519 --> 00:14:48,880
again

00:14:46,399 --> 00:14:51,680
usually security editors are set by the

00:14:48,880 --> 00:14:55,440
people distributing the web content

00:14:51,680 --> 00:14:57,760
cd and sysadmins and not by developers

00:14:55,440 --> 00:14:58,560
in that case developers can have the

00:14:57,760 --> 00:15:03,279
control

00:14:58,560 --> 00:15:06,079
about the security headers configuration

00:15:03,279 --> 00:15:08,000
also no need to configure all cdns

00:15:06,079 --> 00:15:09,839
because festival is a way to configure

00:15:08,000 --> 00:15:13,279
cloudflare as a way to configure

00:15:09,839 --> 00:15:14,720
i don't think gita by the cdn allows a

00:15:13,279 --> 00:15:18,320
configuration of headers

00:15:14,720 --> 00:15:21,600
well now there will be a standard way to

00:15:18,320 --> 00:15:22,399
actually set security headers and

00:15:21,600 --> 00:15:27,279
headers

00:15:22,399 --> 00:15:30,560
at large in web applications

00:15:27,279 --> 00:15:33,600
then you can have things to signed

00:15:30,560 --> 00:15:37,680
exchange a way to

00:15:33,600 --> 00:15:40,720
provide integrity check not only

00:15:37,680 --> 00:15:41,440
for script links you can have real

00:15:40,720 --> 00:15:43,680
resource

00:15:41,440 --> 00:15:44,560
integrity checks for the wall

00:15:43,680 --> 00:15:48,079
application

00:15:44,560 --> 00:15:48,800
and that's great if you don't trust your

00:15:48,079 --> 00:15:52,160
cdns

00:15:48,800 --> 00:15:55,120
or the delivery chain like the isps

00:15:52,160 --> 00:15:56,399
well you are sure they can't tamper with

00:15:55,120 --> 00:16:00,160
the web content

00:15:56,399 --> 00:16:03,680
anymore there's also opportunities for

00:16:00,160 --> 00:16:03,680
node.js on the server side

00:16:04,240 --> 00:16:09,120
you probably know about supply chain

00:16:06,839 --> 00:16:12,240
attacks well

00:16:09,120 --> 00:16:16,160
if the author of a package can

00:16:12,240 --> 00:16:17,440
sign it and if their npm credentials get

00:16:16,160 --> 00:16:20,560
stolen

00:16:17,440 --> 00:16:22,800
well you can still check

00:16:20,560 --> 00:16:24,160
that they were the one who published a

00:16:22,800 --> 00:16:26,639
version of a package

00:16:24,160 --> 00:16:27,600
because they would sign it with a

00:16:26,639 --> 00:16:30,240
private key

00:16:27,600 --> 00:16:31,120
that hopefully is not stolen meaning

00:16:30,240 --> 00:16:35,519
that it gets

00:16:31,120 --> 00:16:37,600
way harder to actually

00:16:35,519 --> 00:16:40,320
do what happened with the eslint

00:16:37,600 --> 00:16:43,839
incident where the malicious

00:16:40,320 --> 00:16:47,040
actor actually published over stolen

00:16:43,839 --> 00:16:48,480
npm credential you are scared because of

00:16:47,040 --> 00:16:51,199
the key might be stolen

00:16:48,480 --> 00:16:52,160
but it's actually easier to steal a

00:16:51,199 --> 00:16:55,040
password

00:16:52,160 --> 00:16:55,600
and a username because some of them can

00:16:55,040 --> 00:16:59,120
leak

00:16:55,600 --> 00:17:02,399
rather than stealing a private key so

00:16:59,120 --> 00:17:05,600
package signing is a good thing

00:17:02,399 --> 00:17:09,679
to create trust in the

00:17:05,600 --> 00:17:12,319
supply chain of web application building

00:17:09,679 --> 00:17:14,799
this is promising but the question is

00:17:12,319 --> 00:17:18,720
about key management and distribution

00:17:14,799 --> 00:17:23,199
not everyone has a ssl certificate

00:17:18,720 --> 00:17:23,199
so how do you do that that's complicated

00:17:23,439 --> 00:17:27,839
the other thing i really like and that's

00:17:25,520 --> 00:17:31,760
an opportunity for the node.js side

00:17:27,839 --> 00:17:33,200
is that well we have a real concept of

00:17:31,760 --> 00:17:35,360
package

00:17:33,200 --> 00:17:37,520
because right now we don't have a

00:17:35,360 --> 00:17:41,200
concept of packaging node.js

00:17:37,520 --> 00:17:44,720
we have a table with a package.json file

00:17:41,200 --> 00:17:48,120
but how do you define the package

00:17:44,720 --> 00:17:49,520
is it something that relies on the

00:17:48,120 --> 00:17:51,679
package.json but

00:17:49,520 --> 00:17:53,919
how do you make sure this link is strong

00:17:51,679 --> 00:17:57,120
is it something in the same directory

00:17:53,919 --> 00:17:59,039
what about subdirectories it's complex

00:17:57,120 --> 00:18:00,480
we don't have a clear definition of what

00:17:59,039 --> 00:18:03,440
a package is

00:18:00,480 --> 00:18:04,799
we have definitions of what a module is

00:18:03,440 --> 00:18:07,520
what the script is

00:18:04,799 --> 00:18:07,919
and we even have policies in node.js

00:18:07,520 --> 00:18:10,640
that

00:18:07,919 --> 00:18:11,919
offers a way to check resource integrity

00:18:10,640 --> 00:18:15,440
at runtime

00:18:11,919 --> 00:18:18,240
but only pair file

00:18:15,440 --> 00:18:19,120
which is very powerful and really did an

00:18:18,240 --> 00:18:21,520
amazing work

00:18:19,120 --> 00:18:23,360
with this feature but it might be

00:18:21,520 --> 00:18:24,480
complicated in terms of user

00:18:23,360 --> 00:18:27,760
friendliness

00:18:24,480 --> 00:18:30,559
if we move that at a bundle there

00:18:27,760 --> 00:18:31,919
at a package level meaning that with the

00:18:30,559 --> 00:18:34,000
signature

00:18:31,919 --> 00:18:34,960
uh you are sure that there is no supply

00:18:34,000 --> 00:18:37,280
chain attacks

00:18:34,960 --> 00:18:39,200
but also a trend time you are sure that

00:18:37,280 --> 00:18:41,840
there have been no supply chain attacks

00:18:39,200 --> 00:18:43,200
and that the package you execute is the

00:18:41,840 --> 00:18:46,720
one that has been built

00:18:43,200 --> 00:18:49,039
by the package maintainer but it goes

00:18:46,720 --> 00:18:51,919
beyond the friendly way of doing

00:18:49,039 --> 00:18:51,919
integrity check

00:18:52,000 --> 00:18:58,640
what about per package authorization i

00:18:55,280 --> 00:19:01,200
everyone is asking about um

00:18:58,640 --> 00:19:02,880
os access policies cisco policies and

00:19:01,200 --> 00:19:06,080
there's a pr for that

00:19:02,880 --> 00:19:10,080
and probably i mean

00:19:06,080 --> 00:19:12,160
i might be outdated but

00:19:10,080 --> 00:19:13,520
you can do stronger things by relying on

00:19:12,160 --> 00:19:16,640
operating system

00:19:13,520 --> 00:19:19,840
features for that but we could still

00:19:16,640 --> 00:19:22,880
membrane and prevent packages

00:19:19,840 --> 00:19:27,039
from accessing certain parts of the code

00:19:22,880 --> 00:19:29,120
by package but that might be terrible in

00:19:27,039 --> 00:19:30,720
term of path because i will still need a

00:19:29,120 --> 00:19:31,840
bit of stack trace exploration

00:19:30,720 --> 00:19:33,520
introspection

00:19:31,840 --> 00:19:35,600
and i haven't tested anything so don't

00:19:33,520 --> 00:19:36,640
get too excited even dino does not

00:19:35,600 --> 00:19:40,000
provide this feature

00:19:36,640 --> 00:19:42,640
let's go to the next slide right now

00:19:40,000 --> 00:19:45,039
you could also imagine to resign package

00:19:42,640 --> 00:19:47,360
in enterprise context to have a list of

00:19:45,039 --> 00:19:49,200
audited and usable dependencies

00:19:47,360 --> 00:19:52,000
meaning that you are sure that as a

00:19:49,200 --> 00:19:54,559
security team developers don't use

00:19:52,000 --> 00:19:55,360
things that have not been validated and

00:19:54,559 --> 00:19:58,720
that's actually

00:19:55,360 --> 00:20:02,400
very powerful okay

00:19:58,720 --> 00:20:06,000
a few final thoughts i love web packages

00:20:02,400 --> 00:20:09,039
yes i do web package open multiple

00:20:06,000 --> 00:20:10,480
doors for the browser security header

00:20:09,039 --> 00:20:13,280
management is easier

00:20:10,480 --> 00:20:14,320
resource integrity once for all for

00:20:13,280 --> 00:20:17,440
node.js

00:20:14,320 --> 00:20:18,159
we can have resource integrity uh by the

00:20:17,440 --> 00:20:20,640
author

00:20:18,159 --> 00:20:22,880
and a standard concept of package which

00:20:20,640 --> 00:20:25,919
opens a lot of those

00:20:22,880 --> 00:20:28,799
i am i have a confession i am ambivalent

00:20:25,919 --> 00:20:29,919
regarding the signature part it brings

00:20:28,799 --> 00:20:34,000
cool goodies

00:20:29,919 --> 00:20:36,880
but it can break ad blockers

00:20:34,000 --> 00:20:38,799
but signature is optional probably it's

00:20:36,880 --> 00:20:40,559
okay then

00:20:38,799 --> 00:20:42,240
we could distribute code around the

00:20:40,559 --> 00:20:45,360
world in a better way

00:20:42,240 --> 00:20:48,559
with web package we can standardize

00:20:45,360 --> 00:20:50,080
web application delivery it's a vendor

00:20:48,559 --> 00:20:51,919
neutral package concept

00:20:50,080 --> 00:20:53,120
meaning that you are not tied to the

00:20:51,919 --> 00:20:56,320
configuration

00:20:53,120 --> 00:20:58,159
of a single cdn and

00:20:56,320 --> 00:21:00,000
all of that is still under active

00:20:58,159 --> 00:21:00,799
discussion so if you have strong

00:21:00,000 --> 00:21:03,440
opinions

00:21:00,799 --> 00:21:04,480
now is the right time to probably spam

00:21:03,440 --> 00:21:06,799
some people

00:21:04,480 --> 00:21:08,640
who should not be named in this talk

00:21:06,799 --> 00:21:10,240
because i don't want them to be mad at

00:21:08,640 --> 00:21:12,320
me

00:21:10,240 --> 00:21:13,280
thanks so much for your attention let's

00:21:12,320 --> 00:21:15,039
keep in touch

00:21:13,280 --> 00:21:17,440
once again twitter is the best way to

00:21:15,039 --> 00:21:18,320
contact me and the slides are already on

00:21:17,440 --> 00:21:20,640
icloud

00:21:18,320 --> 00:21:22,240
feel free to browse them thanks so much

00:21:20,640 --> 00:21:24,320
again for your attention

00:21:22,240 --> 00:21:26,000
i hope we will see each other soon in

00:21:24,320 --> 00:21:30,720
physical conferences

00:21:26,000 --> 00:21:30,720

YouTube URL: https://www.youtube.com/watch?v=v08MVFSP3LI


