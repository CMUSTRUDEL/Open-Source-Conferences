Title: Package Vulnerability Management & Reporting Collaboration Space for... - Darcy Clarke & Wes Todd
Publication date: 2021-05-31
Playlist: OpenJS World 2021 - Security
Description: 
	Package Vulnerability Management and Reporting Collaboration Space for OpenJS World - Darcy Clarke, Github & Wes Todd, Netflix
Captions: 
	00:00:01,520 --> 00:00:04,720
hey everybody i'm wes todd i'm a senior

00:00:03,840 --> 00:00:06,799
software engineer

00:00:04,720 --> 00:00:09,200
at netflix working on the node.js

00:00:06,799 --> 00:00:11,120
platform team

00:00:09,200 --> 00:00:13,040
uh hi everyone my name is darcy click

00:00:11,120 --> 00:00:17,039
i'm the senior engineering manager

00:00:13,040 --> 00:00:19,119
on the mpm clyde team uh here at github

00:00:17,039 --> 00:00:22,320
and we're here today to talk about the

00:00:19,119 --> 00:00:24,400
first ever openjs collaboration space

00:00:22,320 --> 00:00:27,840
which we will be focusing on the package

00:00:24,400 --> 00:00:31,119
vulnerability management and reporting

00:00:27,840 --> 00:00:32,719
take it away darcy yeah so we were

00:00:31,119 --> 00:00:34,640
hoping to kick out things off

00:00:32,719 --> 00:00:35,920
by talking a little bit about the state

00:00:34,640 --> 00:00:39,040
of the ecosystem

00:00:35,920 --> 00:00:42,239
and why this all sort of came out

00:00:39,040 --> 00:00:43,600
of uh and sort of spun out of the

00:00:42,239 --> 00:00:45,600
package maintenance working group

00:00:43,600 --> 00:00:48,079
actually um so

00:00:45,600 --> 00:00:48,719
uh there's been some recent data come

00:00:48,079 --> 00:00:50,399
out

00:00:48,719 --> 00:00:52,879
about sort of the state of the ecosystem

00:00:50,399 --> 00:00:53,680
in 2020 um what we continue to see in

00:00:52,879 --> 00:00:56,320
the javascript

00:00:53,680 --> 00:00:56,879
ecosystem is exponential growth there's

00:00:56,320 --> 00:00:59,920
one point

00:00:56,879 --> 00:01:01,359
over 1.6 million packages on the mpm

00:00:59,920 --> 00:01:04,000
public registry

00:01:01,359 --> 00:01:05,360
which is incredible um our community

00:01:04,000 --> 00:01:08,720
continues to publish new

00:01:05,360 --> 00:01:12,880
and exciting packages and we see

00:01:08,720 --> 00:01:15,280
over 123 billion downloads a month on

00:01:12,880 --> 00:01:18,400
the public registry which is just

00:01:15,280 --> 00:01:21,040
amazing uh recently uh

00:01:18,400 --> 00:01:23,680
it was npm's 11th birthday back in

00:01:21,040 --> 00:01:26,080
october and we hit the 100

00:01:23,680 --> 00:01:27,920
billion milestone for package downloads

00:01:26,080 --> 00:01:30,960
monthly package downloads

00:01:27,920 --> 00:01:32,320
so there's a lot a lot of downloads a

00:01:30,960 --> 00:01:35,600
lot of folks using

00:01:32,320 --> 00:01:36,320
javascript in the wild and we see that

00:01:35,600 --> 00:01:38,960
also

00:01:36,320 --> 00:01:39,360
with the data that we get from github

00:01:38,960 --> 00:01:41,040
that

00:01:39,360 --> 00:01:43,360
javascript is still the number one

00:01:41,040 --> 00:01:47,040
language on the platform today

00:01:43,360 --> 00:01:49,280
and coming up real quick is also

00:01:47,040 --> 00:01:51,280
typescript typescript has recently

00:01:49,280 --> 00:01:54,240
jumped a few spots in terms of

00:01:51,280 --> 00:01:56,159
a top language that we are seeing in the

00:01:54,240 --> 00:01:59,280
repositories that live on github

00:01:56,159 --> 00:02:02,640
and this just tells you how important

00:01:59,280 --> 00:02:03,600
our our ecosystem is and these languages

00:02:02,640 --> 00:02:07,280
are

00:02:03,600 --> 00:02:08,479
to programmers as a part of this data

00:02:07,280 --> 00:02:12,000
and part of this

00:02:08,479 --> 00:02:12,720
um sort of discovery work we notice that

00:02:12,000 --> 00:02:16,319
there's

00:02:12,720 --> 00:02:19,440
over 94 of the repositories that are

00:02:16,319 --> 00:02:20,959
uh you know utilizing javascript they

00:02:19,440 --> 00:02:25,120
rely on open source

00:02:20,959 --> 00:02:27,760
and our ju as a very

00:02:25,120 --> 00:02:28,400
healthy community we tend to want to

00:02:27,760 --> 00:02:30,720
consume

00:02:28,400 --> 00:02:32,400
lots and lots of javascript as well and

00:02:30,720 --> 00:02:35,280
we see that

00:02:32,400 --> 00:02:37,760
packages and projects uh in within our

00:02:35,280 --> 00:02:40,560
ecosystem specifically within javascript

00:02:37,760 --> 00:02:41,680
we have roughly 683 transitive

00:02:40,560 --> 00:02:44,800
dependencies

00:02:41,680 --> 00:02:45,840
php comes in around 70 and ruby comes in

00:02:44,800 --> 00:02:48,959
around 68

00:02:45,840 --> 00:02:50,080
transitive dependencies the depth of our

00:02:48,959 --> 00:02:52,080
dependency trees

00:02:50,080 --> 00:02:54,400
and the scale of this issue definitely

00:02:52,080 --> 00:02:57,280
put javascript in a unique place

00:02:54,400 --> 00:02:58,560
but i think julia said it best

00:02:57,280 --> 00:03:00,879
vulnerabilities in

00:02:58,560 --> 00:03:02,560
software they occur like regardless of

00:03:00,879 --> 00:03:06,080
language and framework

00:03:02,560 --> 00:03:07,280
and ecosystem um getting them fixed is

00:03:06,080 --> 00:03:10,239
really where i focus

00:03:07,280 --> 00:03:11,599
on uh from like the security side so

00:03:10,239 --> 00:03:13,920
getting things fixed

00:03:11,599 --> 00:03:15,120
kind of in any ecosystem is really

00:03:13,920 --> 00:03:16,159
difficult i think they call it

00:03:15,120 --> 00:03:19,360
dependency hell

00:03:16,159 --> 00:03:20,400
everywhere for a reason knowing that

00:03:19,360 --> 00:03:22,720
these problems

00:03:20,400 --> 00:03:24,319
exist and are difficult to solve in all

00:03:22,720 --> 00:03:26,239
language ecosystems

00:03:24,319 --> 00:03:28,239
we think that the javascript ecosystem

00:03:26,239 --> 00:03:28,720
presents a really unique opportunity for

00:03:28,239 --> 00:03:31,360
us

00:03:28,720 --> 00:03:32,080
to set a precedent and to try out new

00:03:31,360 --> 00:03:34,799
ideas

00:03:32,080 --> 00:03:36,640
for how to make managing reporting and

00:03:34,799 --> 00:03:39,599
dealing with these security issues

00:03:36,640 --> 00:03:41,680
better across the board we'll hear more

00:03:39,599 --> 00:03:44,640
from julia later

00:03:41,680 --> 00:03:46,000
so there's a huge surface area here in

00:03:44,640 --> 00:03:49,120
terms of projects

00:03:46,000 --> 00:03:51,120
um you know uh potential for

00:03:49,120 --> 00:03:53,120
you know uh vulnerabilities but also

00:03:51,120 --> 00:03:55,680
potential for for growth this is

00:03:53,120 --> 00:03:56,480
you know our strength here is also in in

00:03:55,680 --> 00:04:00,879
how we use

00:03:56,480 --> 00:04:02,799
open source um within our ecosystem

00:04:00,879 --> 00:04:04,080
so we also wanted to take some time to

00:04:02,799 --> 00:04:06,640
look at the state of the

00:04:04,080 --> 00:04:08,000
advisories that uh get flagged within

00:04:06,640 --> 00:04:10,319
our ecosystem as well

00:04:08,000 --> 00:04:11,280
and utilize some of that same data that

00:04:10,319 --> 00:04:15,040
we found

00:04:11,280 --> 00:04:17,680
uh within the octavers report from 2020.

00:04:15,040 --> 00:04:18,400
um first off we just want to take note

00:04:17,680 --> 00:04:20,799
that

00:04:18,400 --> 00:04:22,960
since uh you know october of 2015 the

00:04:20,799 --> 00:04:26,960
npm advisory db has filed

00:04:22,960 --> 00:04:27,440
over 1600 uh avayari advisories which is

00:04:26,960 --> 00:04:30,400
pretty

00:04:27,440 --> 00:04:31,600
uh amazing in terms of you know the

00:04:30,400 --> 00:04:33,120
folks flagging

00:04:31,600 --> 00:04:34,880
issues that are coming up within the

00:04:33,120 --> 00:04:37,680
software that we're consuming

00:04:34,880 --> 00:04:38,320
um and another really interesting fact

00:04:37,680 --> 00:04:41,680
is that

00:04:38,320 --> 00:04:44,880
59 or there's a 59 percent

00:04:41,680 --> 00:04:47,120
chance of uh you being flagged

00:04:44,880 --> 00:04:48,479
uh or they're a cve being filed against

00:04:47,120 --> 00:04:51,440
one of your dependencies

00:04:48,479 --> 00:04:52,880
uh based on you know those numbers that

00:04:51,440 --> 00:04:54,800
we were seeing before with how many

00:04:52,880 --> 00:04:57,680
transitive defenses we have

00:04:54,800 --> 00:04:58,000
it's pretty that's a pretty large number

00:04:57,680 --> 00:04:59,440
and

00:04:58,000 --> 00:05:01,039
and if you're working in javascript you

00:04:59,440 --> 00:05:02,160
know that for javascript projects that's

00:05:01,039 --> 00:05:03,840
really 100

00:05:02,160 --> 00:05:05,520
of projects will be flagged in the next

00:05:03,840 --> 00:05:07,520
year

00:05:05,520 --> 00:05:08,880
that's definitely right there's probably

00:05:07,520 --> 00:05:12,080
a lot of projects that get

00:05:08,880 --> 00:05:12,639
flagged a lot higher this is definitely

00:05:12,080 --> 00:05:16,160
a

00:05:12,639 --> 00:05:18,800
rounded average number for sure

00:05:16,160 --> 00:05:19,199
and looking at also the breakdown of

00:05:18,800 --> 00:05:22,720
what

00:05:19,199 --> 00:05:24,800
is contained in those advisories

00:05:22,720 --> 00:05:26,080
we've seen that at least from you know

00:05:24,800 --> 00:05:28,479
github side that

00:05:26,080 --> 00:05:30,400
there was only 70 of those that were

00:05:28,479 --> 00:05:31,360
sort of actively malicious that those

00:05:30,400 --> 00:05:34,240
cvs were

00:05:31,360 --> 00:05:36,000
you know uh potential worms or malware

00:05:34,240 --> 00:05:38,479
whereas there were the other 83

00:05:36,000 --> 00:05:39,680
of those seem to be results of mistakes

00:05:38,479 --> 00:05:42,880
um potential

00:05:39,680 --> 00:05:44,960
you know errors and vulnerabilities

00:05:42,880 --> 00:05:46,320
within our code that were being caught

00:05:44,960 --> 00:05:48,720
by by researchers and

00:05:46,320 --> 00:05:49,520
and and folks that were flagging these

00:05:48,720 --> 00:05:52,560
things to

00:05:49,520 --> 00:05:54,479
uh to maintainers and to the ecosystem

00:05:52,560 --> 00:05:56,479
so those are really interesting numbers

00:05:54,479 --> 00:05:56,960
and and really show you the scale and

00:05:56,479 --> 00:05:58,960
scope

00:05:56,960 --> 00:06:00,080
of the problems that were challenged

00:05:58,960 --> 00:06:03,199
with

00:06:00,080 --> 00:06:05,360
today one of the best parts about

00:06:03,199 --> 00:06:06,000
working in such a large ecosystem is all

00:06:05,360 --> 00:06:08,400
the amazing

00:06:06,000 --> 00:06:10,319
people we thought that to kick off the

00:06:08,400 --> 00:06:11,680
collaboration space it would be great if

00:06:10,319 --> 00:06:15,360
we could hear from some of them

00:06:11,680 --> 00:06:18,479
and how cve reporting and remediation

00:06:15,360 --> 00:06:20,880
affects their work great thanks

00:06:18,479 --> 00:06:22,560
so i'm nick o'leary i'm the project lead

00:06:20,880 --> 00:06:24,639
co-creator of node-red

00:06:22,560 --> 00:06:25,680
one of the other projects of the opengs

00:06:24,639 --> 00:06:29,919
foundation

00:06:25,680 --> 00:06:33,120
which is a low-code programming tool

00:06:29,919 --> 00:06:35,039
written in node.js and

00:06:33,120 --> 00:06:37,280
i think what's a bit different about

00:06:35,039 --> 00:06:39,360
some of node-red's interests is

00:06:37,280 --> 00:06:41,520
our users aren't necessarily node

00:06:39,360 --> 00:06:45,360
developers or javascript developers

00:06:41,520 --> 00:06:49,199
um we use npm and we use node to

00:06:45,360 --> 00:06:50,800
to ship node-red so users run npm to

00:06:49,199 --> 00:06:52,560
install it

00:06:50,800 --> 00:06:54,479
but they aren't necessarily node

00:06:52,560 --> 00:06:57,120
developers themselves

00:06:54,479 --> 00:06:58,479
we often focus so much on the developers

00:06:57,120 --> 00:07:00,160
of libraries the developers of

00:06:58,479 --> 00:07:02,160
applications but i think we really miss

00:07:00,160 --> 00:07:04,400
out on the perspective of

00:07:02,160 --> 00:07:05,759
the end users who often are just seeing

00:07:04,400 --> 00:07:08,000
reports in their cli

00:07:05,759 --> 00:07:08,960
and they don't really know you know what

00:07:08,000 --> 00:07:10,800
that means

00:07:08,960 --> 00:07:12,880
yeah um does that does that play a big

00:07:10,800 --> 00:07:13,759
role in in your users and the reports

00:07:12,880 --> 00:07:16,000
that you get

00:07:13,759 --> 00:07:17,680
absolutely um you know certainly for

00:07:16,000 --> 00:07:19,680
users who aren't familiar with

00:07:17,680 --> 00:07:21,520
with npm you know we we document the

00:07:19,680 --> 00:07:24,000
commands they should run

00:07:21,520 --> 00:07:25,039
we don't go overboard on all the flags

00:07:24,000 --> 00:07:27,360
you can give npm

00:07:25,039 --> 00:07:29,360
to quieting down the warnings because

00:07:27,360 --> 00:07:31,440
you know you don't want to suppress

00:07:29,360 --> 00:07:32,960
genuine warnings that users kind of

00:07:31,440 --> 00:07:34,479
should know about

00:07:32,960 --> 00:07:36,720
but there's always going to be stuff in

00:07:34,479 --> 00:07:39,840
there that we know

00:07:36,720 --> 00:07:42,560
doesn't matter but some users

00:07:39,840 --> 00:07:43,599
well lots of users ignore it but some

00:07:42,560 --> 00:07:48,080
users do get

00:07:43,599 --> 00:07:50,160
concerned by having even you know

00:07:48,080 --> 00:07:52,240
moderate severity audit warnings

00:07:50,160 --> 00:07:55,120
whatever it might be

00:07:52,240 --> 00:07:56,800
and again the nature of node-red is

00:07:55,120 --> 00:07:58,560
there's quite a large dependency chain

00:07:56,800 --> 00:08:00,240
of modules because

00:07:58,560 --> 00:08:01,599
it's a programming platform it can pull

00:08:00,240 --> 00:08:02,960
in all sorts of different modules

00:08:01,599 --> 00:08:06,080
depending what else

00:08:02,960 --> 00:08:09,199
you install into it to supplement it so

00:08:06,080 --> 00:08:11,599
um you know the scope of what

00:08:09,199 --> 00:08:13,199
warnings you might get is pretty pretty

00:08:11,599 --> 00:08:17,039
large depending on

00:08:13,199 --> 00:08:18,879
the modules being being installed

00:08:17,039 --> 00:08:20,800
now that we've heard from nick about how

00:08:18,879 --> 00:08:23,039
these things affect end users

00:08:20,800 --> 00:08:23,919
and authors of open source libraries and

00:08:23,039 --> 00:08:26,479
platforms like

00:08:23,919 --> 00:08:27,680
node-red let's bring back julia and hear

00:08:26,479 --> 00:08:29,520
a little bit about how

00:08:27,680 --> 00:08:31,039
larger companies deal with these kind of

00:08:29,520 --> 00:08:33,839
things and how

00:08:31,039 --> 00:08:35,599
engineers and security teams can better

00:08:33,839 --> 00:08:38,080
work together

00:08:35,599 --> 00:08:40,000
sure my name is julia connect i'm on the

00:08:38,080 --> 00:08:42,000
netflix application security team

00:08:40,000 --> 00:08:43,279
i'm a security partner to some of our

00:08:42,000 --> 00:08:46,399
developer productivity

00:08:43,279 --> 00:08:48,959
teams at netflix and my

00:08:46,399 --> 00:08:51,040
my pretty strong opinion is that uh

00:08:48,959 --> 00:08:52,320
developers shouldn't have to be security

00:08:51,040 --> 00:08:55,120
experts and i think it's

00:08:52,320 --> 00:08:56,320
security experts jobs to help developers

00:08:55,120 --> 00:08:59,200
get their job done

00:08:56,320 --> 00:09:01,200
and to help make you know kind of the

00:08:59,200 --> 00:09:04,880
right decision we have this

00:09:01,200 --> 00:09:07,200
um concept at netflix of

00:09:04,880 --> 00:09:08,640
freedom and responsibility and context

00:09:07,200 --> 00:09:12,320
not control

00:09:08,640 --> 00:09:15,279
um and i really see that as um

00:09:12,320 --> 00:09:16,640
the security person like our job we're

00:09:15,279 --> 00:09:18,320
employed to be these

00:09:16,640 --> 00:09:19,839
these security experts and to really

00:09:18,320 --> 00:09:22,560
help people understand

00:09:19,839 --> 00:09:24,000
but not to like go put a ton more

00:09:22,560 --> 00:09:25,600
context in your head and say

00:09:24,000 --> 00:09:27,120
also become a security expert and

00:09:25,600 --> 00:09:28,160
interpret this how i would interpret

00:09:27,120 --> 00:09:30,240
this right it's

00:09:28,160 --> 00:09:31,600
it's given all these inputs given my

00:09:30,240 --> 00:09:34,959
background given

00:09:31,600 --> 00:09:35,680
uh my security expertise uh this is what

00:09:34,959 --> 00:09:37,519
i think is

00:09:35,680 --> 00:09:39,360
you know kind of the most correct or the

00:09:37,519 --> 00:09:41,920
safest path forward

00:09:39,360 --> 00:09:42,959
um and let's you know work together on

00:09:41,920 --> 00:09:47,440
ways to address

00:09:42,959 --> 00:09:49,360
any um productivity issues or can we

00:09:47,440 --> 00:09:51,600
can we join those things right like can

00:09:49,360 --> 00:09:53,680
we say productivity and security

00:09:51,600 --> 00:09:56,080
get to hold hands and cross the finish

00:09:53,680 --> 00:09:58,080
line together right

00:09:56,080 --> 00:10:00,720
one of the best ways to tie together

00:09:58,080 --> 00:10:02,880
productivity and security concerns

00:10:00,720 --> 00:10:05,120
is through tooling we've got a lot of

00:10:02,880 --> 00:10:07,600
great engineers in the tooling space in

00:10:05,120 --> 00:10:10,160
the javascript ecosystem

00:10:07,600 --> 00:10:11,600
one of those is bishek or as he often

00:10:10,160 --> 00:10:12,320
introduces himself to us english

00:10:11,600 --> 00:10:15,519
speakers as

00:10:12,320 --> 00:10:16,880
xeb he has been instrumental in helping

00:10:15,519 --> 00:10:19,120
kick this group off

00:10:16,880 --> 00:10:21,120
and he also wrote a tool called npm

00:10:19,120 --> 00:10:24,959
audit resolver

00:10:21,120 --> 00:10:28,079
on the web i'm known as noctur

00:10:24,959 --> 00:10:29,760
but my real name is bisec if anyone

00:10:28,079 --> 00:10:33,120
wants to try to pronounce it

00:10:29,760 --> 00:10:35,200
and i've been uh

00:10:33,120 --> 00:10:37,680
i've been playing around with node.js

00:10:35,200 --> 00:10:41,600
since version 0.8

00:10:37,680 --> 00:10:45,120
and i've been uh growing a team

00:10:41,600 --> 00:10:46,399
of node.js developers for the last seven

00:10:45,120 --> 00:10:48,800
years

00:10:46,399 --> 00:10:49,839
at ignite meanwhile i'm also doing some

00:10:48,800 --> 00:10:53,040
open source

00:10:49,839 --> 00:10:55,920
and trying to lurk around the

00:10:53,040 --> 00:10:58,320
nodejs diagnostics working group and

00:10:55,920 --> 00:10:58,720
some other places and a bit of security

00:10:58,320 --> 00:11:01,839
so

00:10:58,720 --> 00:11:05,120
yeah so it all started when we had

00:11:01,839 --> 00:11:09,600
uh around 20 apps

00:11:05,120 --> 00:11:13,360
and you know security was important

00:11:09,600 --> 00:11:15,920
but we discovered

00:11:13,360 --> 00:11:17,040
that we can monitor dependencies for

00:11:15,920 --> 00:11:20,079
security

00:11:17,040 --> 00:11:23,360
uh a bit late in my opinion

00:11:20,079 --> 00:11:25,519
well uh npm audit didn't exist yet but

00:11:23,360 --> 00:11:26,959
node security project was already there

00:11:25,519 --> 00:11:30,240
so

00:11:26,959 --> 00:11:31,279
i installed the nsp command and run nsp

00:11:30,240 --> 00:11:33,040
check and thought

00:11:31,279 --> 00:11:34,560
well this is awesome it checks my

00:11:33,040 --> 00:11:37,200
dependencies and says

00:11:34,560 --> 00:11:38,240
i'm okay because that's mostly what it

00:11:37,200 --> 00:11:40,560
did at the time

00:11:38,240 --> 00:11:41,600
there were not a lot of vulnerabilities

00:11:40,560 --> 00:11:44,880
reported yet

00:11:41,600 --> 00:11:45,279
so i obviously took it and put it as a

00:11:44,880 --> 00:11:48,880
step

00:11:45,279 --> 00:11:54,000
in our ci so that the ci would get read

00:11:48,880 --> 00:11:57,120
when we get a vulnerability and then

00:11:54,000 --> 00:11:58,959
adam baldwin started working on finding

00:11:57,120 --> 00:12:02,399
more and more vulnerabilities

00:11:58,959 --> 00:12:04,560
uh so one day like two or three weeks

00:12:02,399 --> 00:12:07,360
after i put it in ci

00:12:04,560 --> 00:12:09,519
everything literally everything got red

00:12:07,360 --> 00:12:11,200
because there were like uh 10 or 20

00:12:09,519 --> 00:12:14,240
different dependencies

00:12:11,200 --> 00:12:17,519
uh that got us

00:12:14,240 --> 00:12:20,079
the bad status so first thing we did

00:12:17,519 --> 00:12:21,600
was spotting that most of those are

00:12:20,079 --> 00:12:24,320
death dependencies and

00:12:21,600 --> 00:12:26,800
most of the vulnerabilities are regular

00:12:24,320 --> 00:12:30,320
expression denial of service

00:12:26,800 --> 00:12:33,680
so yeah the one that everyone loves um

00:12:30,320 --> 00:12:35,120
so an sp check at the time would only

00:12:33,680 --> 00:12:38,880
allow

00:12:35,120 --> 00:12:42,560
um ignoring uh by

00:12:38,880 --> 00:12:44,720
the vulnerability advisory number so we

00:12:42,560 --> 00:12:46,240
ignored regular expression denial of

00:12:44,720 --> 00:12:48,160
service and

00:12:46,240 --> 00:12:50,000
fixed everything else and moved on but

00:12:48,160 --> 00:12:52,240
that didn't last long because

00:12:50,000 --> 00:12:53,519
then he started finding and they

00:12:52,240 --> 00:12:56,959
literally mean

00:12:53,519 --> 00:12:58,720
uh adam baldwin he did find most of

00:12:56,959 --> 00:13:02,000
these

00:12:58,720 --> 00:13:06,079
early on uh so we had to switch off

00:13:02,000 --> 00:13:09,760
the ci step and then npm audit came

00:13:06,079 --> 00:13:10,720
out so uh we switched to npm audit but

00:13:09,760 --> 00:13:14,720
it was still

00:13:10,720 --> 00:13:16,959
too much and that was the decision so

00:13:14,720 --> 00:13:18,160
i have to choose between not running

00:13:16,959 --> 00:13:20,720
this as a

00:13:18,160 --> 00:13:21,680
ai step which i still consider a good

00:13:20,720 --> 00:13:25,680
thing to run it

00:13:21,680 --> 00:13:27,200
in ci to build the um the culture of

00:13:25,680 --> 00:13:30,320
caring for security

00:13:27,200 --> 00:13:32,399
uh on any team and so the other choice

00:13:30,320 --> 00:13:36,560
was to make it

00:13:32,399 --> 00:13:38,959
reasonable to run npm audit as a ci step

00:13:36,560 --> 00:13:39,130
and that's where npm audit resolver came

00:13:38,959 --> 00:13:40,399
in

00:13:39,130 --> 00:13:41,760
[Music]

00:13:40,399 --> 00:13:44,320
one thing you said which i think is

00:13:41,760 --> 00:13:46,399
really interesting is building a

00:13:44,320 --> 00:13:48,079
culture of caring i was wondering if you

00:13:46,399 --> 00:13:48,480
could talk a little bit more about how

00:13:48,079 --> 00:13:51,600
you

00:13:48,480 --> 00:13:55,920
can do that on a team for a team

00:13:51,600 --> 00:13:58,160
of software developers security

00:13:55,920 --> 00:14:00,639
is gonna be like initially is gonna be

00:13:58,160 --> 00:14:03,680
the thing that gets in the way

00:14:00,639 --> 00:14:07,040
unless you build the right mindset so

00:14:03,680 --> 00:14:11,279
uh my goal as a

00:14:07,040 --> 00:14:14,480
leader of a team in terms of security

00:14:11,279 --> 00:14:15,120
is not to make sure that everything we

00:14:14,480 --> 00:14:18,560
build

00:14:15,120 --> 00:14:19,040
is perfectly secure instead is making

00:14:18,560 --> 00:14:22,160
people

00:14:19,040 --> 00:14:24,320
care about security and not consider it

00:14:22,160 --> 00:14:27,360
an annoyance so i wanted

00:14:24,320 --> 00:14:30,480
everyone to fill the mission to build

00:14:27,360 --> 00:14:33,120
something secure i want people to think

00:14:30,480 --> 00:14:36,399
about it every now and then

00:14:33,120 --> 00:14:39,760
and if you get a tool that tells you

00:14:36,399 --> 00:14:40,480
now this is insecure every single time

00:14:39,760 --> 00:14:44,000
you commit

00:14:40,480 --> 00:14:46,079
something that's not going to build

00:14:44,000 --> 00:14:47,680
this culture because people are going to

00:14:46,079 --> 00:14:51,040
treat it as an annoyance

00:14:47,680 --> 00:14:54,959
so you need a tool that lets you

00:14:51,040 --> 00:14:56,000
make decisions hopefully informed

00:14:54,959 --> 00:14:58,880
decisions

00:14:56,000 --> 00:14:59,199
on what to ignore because only when you

00:14:58,880 --> 00:15:02,320
can

00:14:59,199 --> 00:15:04,959
ignore some vulnerabilities

00:15:02,320 --> 00:15:07,600
you're going to be able to really care

00:15:04,959 --> 00:15:10,720
about the ones that are important

00:15:07,600 --> 00:15:12,800
where can we take decisions maybe away

00:15:10,720 --> 00:15:14,240
or obstruct them away but put in safe

00:15:12,800 --> 00:15:16,320
defaults right i think

00:15:14,240 --> 00:15:17,279
i think safe defaults with the option to

00:15:16,320 --> 00:15:18,880
undo

00:15:17,279 --> 00:15:20,639
with the understanding that like that's

00:15:18,880 --> 00:15:22,240
an action that a developer is

00:15:20,639 --> 00:15:24,160
taking so that they have to you know

00:15:22,240 --> 00:15:26,079
kind of understand what they're undoing

00:15:24,160 --> 00:15:27,839
rather than uh going in with the

00:15:26,079 --> 00:15:28,399
expectation that something's secure

00:15:27,839 --> 00:15:29,600
because

00:15:28,399 --> 00:15:31,440
why would they give me something

00:15:29,600 --> 00:15:33,600
insecure to start with um

00:15:31,440 --> 00:15:35,440
and i have to go like do all of the work

00:15:33,600 --> 00:15:39,360
to pop security onto it

00:15:35,440 --> 00:15:41,839
um yeah i i really like the idea of like

00:15:39,360 --> 00:15:43,839
security people and productivity folks

00:15:41,839 --> 00:15:46,000
like working together towards a common

00:15:43,839 --> 00:15:49,199
goal and saying like how can we make

00:15:46,000 --> 00:15:51,759
the right choice the securest choice

00:15:49,199 --> 00:15:55,519
also the easiest choice and also like

00:15:51,759 --> 00:15:58,000
the most correct choice

00:15:55,519 --> 00:15:59,199
making informed decisions is super

00:15:58,000 --> 00:16:01,519
important

00:15:59,199 --> 00:16:02,560
at netflix we call it context not

00:16:01,519 --> 00:16:04,399
control

00:16:02,560 --> 00:16:06,639
the reason we say that is because we

00:16:04,399 --> 00:16:07,600
want to give our engineers and our

00:16:06,639 --> 00:16:10,399
teammates

00:16:07,600 --> 00:16:12,160
as much context as we can so that they

00:16:10,399 --> 00:16:15,199
can make the right decisions

00:16:12,160 --> 00:16:16,079
when it's necessary oftentimes the

00:16:15,199 --> 00:16:18,800
information

00:16:16,079 --> 00:16:19,600
that is gathered on one end of the life

00:16:18,800 --> 00:16:22,639
cycle

00:16:19,600 --> 00:16:23,839
is not propagated all the way through to

00:16:22,639 --> 00:16:27,440
the other end

00:16:23,839 --> 00:16:30,160
i think in the case of cve remediation

00:16:27,440 --> 00:16:32,240
this is especially true to help

00:16:30,160 --> 00:16:33,440
understand this better i asked each of

00:16:32,240 --> 00:16:35,120
our interviewees

00:16:33,440 --> 00:16:37,839
a little bit about how they think we can

00:16:35,120 --> 00:16:40,880
improve this situation

00:16:37,839 --> 00:16:41,519
i i i suddenly see i think it's twofold

00:16:40,880 --> 00:16:44,480
one is

00:16:41,519 --> 00:16:45,440
certainly on the tooling side um so i

00:16:44,480 --> 00:16:48,560
think

00:16:45,440 --> 00:16:51,040
having some way for our module i mean

00:16:48,560 --> 00:16:52,959
don't get wrong it is good that that

00:16:51,040 --> 00:16:54,480
security vulnerabilities get floated up

00:16:52,959 --> 00:16:55,759
and we get notified

00:16:54,480 --> 00:16:57,600
you are depending on something that has

00:16:55,759 --> 00:17:00,480
a vulnerability that that is good and

00:16:57,600 --> 00:17:02,560
that is important to the ecosystem the

00:17:00,480 --> 00:17:04,319
bit that i feel is missing is a way for

00:17:02,560 --> 00:17:06,400
us to then say

00:17:04,319 --> 00:17:08,640
you know in a in some metadata somewhere

00:17:06,400 --> 00:17:12,880
in the module saying

00:17:08,640 --> 00:17:16,799
um you know this

00:17:12,880 --> 00:17:19,360
this vulnerability we have evaluated and

00:17:16,799 --> 00:17:21,280
um please you know suppress this from

00:17:19,360 --> 00:17:24,559
when you install

00:17:21,280 --> 00:17:26,559
when a end user installs us because

00:17:24,559 --> 00:17:28,559
um you know we have done the technical

00:17:26,559 --> 00:17:29,840
work to validate that that vulnerability

00:17:28,559 --> 00:17:33,440
does not apply

00:17:29,840 --> 00:17:35,919
to us and um

00:17:33,440 --> 00:17:37,039
please don't bother our users with that

00:17:35,919 --> 00:17:38,480
now

00:17:37,039 --> 00:17:40,960
i'm also well aware there's a lot of

00:17:38,480 --> 00:17:43,919
good will in a mechanism like that

00:17:40,960 --> 00:17:45,600
and um it would be right for abuse for

00:17:43,919 --> 00:17:47,679
people to

00:17:45,600 --> 00:17:49,840
not do the technical work to do that

00:17:47,679 --> 00:17:51,120
validation and just

00:17:49,840 --> 00:17:52,880
do whatever it takes to shut the

00:17:51,120 --> 00:17:56,000
warnings up but

00:17:52,880 --> 00:17:56,640
um you know i think there's going to be

00:17:56,000 --> 00:18:00,080
a trade-off

00:17:56,640 --> 00:18:03,440
between the user developer experience

00:18:00,080 --> 00:18:04,720
for end users of modules and maintainers

00:18:03,440 --> 00:18:06,080
of modules and i

00:18:04,720 --> 00:18:08,480
i do think there's got to be a better

00:18:06,080 --> 00:18:10,320
balance to what we have today

00:18:08,480 --> 00:18:11,919
the security game when you're not

00:18:10,320 --> 00:18:15,039
attacking when you're defending

00:18:11,919 --> 00:18:15,360
is about prioritizing so you always need

00:18:15,039 --> 00:18:18,480
to

00:18:15,360 --> 00:18:19,919
be able to say okay this is the last day

00:18:18,480 --> 00:18:23,919
of the sprint

00:18:19,919 --> 00:18:26,320
uh and i need my build green

00:18:23,919 --> 00:18:28,080
even if it means there's gonna be some

00:18:26,320 --> 00:18:29,280
vulnerable dependencies that i didn't

00:18:28,080 --> 00:18:32,000
have time to review

00:18:29,280 --> 00:18:33,039
what now so i literally built a feature

00:18:32,000 --> 00:18:37,280
for that

00:18:33,039 --> 00:18:41,039
which lets you quickly ignore

00:18:37,280 --> 00:18:43,919
a failed dependency scan for 24 hours

00:18:41,039 --> 00:18:44,720
this is enough for the sprint review and

00:18:43,919 --> 00:18:47,600
then

00:18:44,720 --> 00:18:48,160
your build is red on the next day again

00:18:47,600 --> 00:18:51,360
you're

00:18:48,160 --> 00:18:53,679
you're back to fixing it but

00:18:51,360 --> 00:18:54,880
you didn't have to break everything you

00:18:53,679 --> 00:18:58,160
didn't have to

00:18:54,880 --> 00:19:00,559
fail a sprint because

00:18:58,160 --> 00:19:02,880
there's a tool so it's no longer an

00:19:00,559 --> 00:19:04,480
annoyance it's something that helps you

00:19:02,880 --> 00:19:08,160
and it builds the culture

00:19:04,480 --> 00:19:11,919
in the team to well

00:19:08,160 --> 00:19:14,080
try to stay on the ball uh with

00:19:11,919 --> 00:19:14,960
making your dependencies secure and i

00:19:14,080 --> 00:19:16,400
think just to

00:19:14,960 --> 00:19:18,720
just to like dig into that a little bit

00:19:16,400 --> 00:19:20,960
more i do think that um

00:19:18,720 --> 00:19:22,640
that there there's been historical

00:19:20,960 --> 00:19:24,400
disconnect i've seen it getting better

00:19:22,640 --> 00:19:25,760
in the industry where like security

00:19:24,400 --> 00:19:27,360
people would just come in and say just

00:19:25,760 --> 00:19:27,679
update no matter what which is probably

00:19:27,360 --> 00:19:30,960
why

00:19:27,679 --> 00:19:33,600
npm audit says just update and

00:19:30,960 --> 00:19:34,320
um right like it's kind of like this

00:19:33,600 --> 00:19:37,360
this

00:19:34,320 --> 00:19:39,760
mandate rather than in uh nuanced

00:19:37,360 --> 00:19:41,440
like update if you use this library in

00:19:39,760 --> 00:19:42,240
this way right like it's vulnerable for

00:19:41,440 --> 00:19:44,080
these reasons

00:19:42,240 --> 00:19:45,440
um and i've actually talked to

00:19:44,080 --> 00:19:47,600
developers like

00:19:45,440 --> 00:19:49,280
everyone wants to like understand what's

00:19:47,600 --> 00:19:51,120
going on i just think it's also like it

00:19:49,280 --> 00:19:52,240
kind of is competing for resources right

00:19:51,120 --> 00:19:54,400
so if it's like

00:19:52,240 --> 00:19:55,679
tell me tell me the right path to get

00:19:54,400 --> 00:19:57,280
rid of this thing

00:19:55,679 --> 00:19:58,720
to answer your actual question that you

00:19:57,280 --> 00:20:01,120
asked i do see that there's

00:19:58,720 --> 00:20:02,159
opportunities to kind of pass through

00:20:01,120 --> 00:20:05,280
that guidance and i

00:20:02,159 --> 00:20:07,919
i like i wonder also if that's uh just

00:20:05,280 --> 00:20:08,640
a way of standardizing how that stuff

00:20:07,919 --> 00:20:10,559
kind of comes

00:20:08,640 --> 00:20:12,400
in doing these interviews was a great

00:20:10,559 --> 00:20:13,280
way to validate that there's room for

00:20:12,400 --> 00:20:16,480
improvement

00:20:13,280 --> 00:20:18,320
in cve reporting and remediation

00:20:16,480 --> 00:20:20,240
but at this point i'm sure you're asking

00:20:18,320 --> 00:20:21,039
yourself well what is a collaboration

00:20:20,240 --> 00:20:23,039
space

00:20:21,039 --> 00:20:24,640
why not talk about these things in some

00:20:23,039 --> 00:20:26,080
existing groups like the package

00:20:24,640 --> 00:20:28,960
maintenance working group

00:20:26,080 --> 00:20:29,440
or with folks directly at npm or sneak

00:20:28,960 --> 00:20:32,400
or

00:20:29,440 --> 00:20:34,240
one of the other parties involved since

00:20:32,400 --> 00:20:35,200
this is the very first one i

00:20:34,240 --> 00:20:37,360
you know we want to make sure that

00:20:35,200 --> 00:20:38,080
people understand what uh what we're

00:20:37,360 --> 00:20:41,120
doing here

00:20:38,080 --> 00:20:43,200
so the collab space is uh a

00:20:41,120 --> 00:20:45,280
new program set up by the opengs

00:20:43,200 --> 00:20:47,520
foundation uh it gives us

00:20:45,280 --> 00:20:48,720
a neutral ground to bring together

00:20:47,520 --> 00:20:50,799
parties from

00:20:48,720 --> 00:20:53,760
from different parts of this ecosystem

00:20:50,799 --> 00:20:56,960
uh different parts of the cve

00:20:53,760 --> 00:20:57,520
life cycle and and gives us a nice space

00:20:56,960 --> 00:21:00,400
with

00:20:57,520 --> 00:21:02,240
support from the foundation to to

00:21:00,400 --> 00:21:02,880
discuss these ideas and come out of it

00:21:02,240 --> 00:21:06,480
with

00:21:02,880 --> 00:21:08,159
uh you know solutions so so our goal in

00:21:06,480 --> 00:21:10,720
this group is to bring together

00:21:08,159 --> 00:21:11,600
folks from different parts of the cve

00:21:10,720 --> 00:21:13,360
life cycle

00:21:11,600 --> 00:21:15,360
and and hear from them and really

00:21:13,360 --> 00:21:17,120
understand the problem space

00:21:15,360 --> 00:21:20,000
because we don't think we have all the

00:21:17,120 --> 00:21:21,919
solutions uh and we think that the best

00:21:20,000 --> 00:21:25,200
end solution is going to be one where we

00:21:21,919 --> 00:21:26,559
hear from all the voices across the sdlc

00:21:25,200 --> 00:21:28,320
and we bring together something that's

00:21:26,559 --> 00:21:29,520
really going to work for everyone

00:21:28,320 --> 00:21:32,159
involved

00:21:29,520 --> 00:21:34,240
and so you know examples of some

00:21:32,159 --> 00:21:36,159
successful outcomes that we see from the

00:21:34,240 --> 00:21:38,960
collaboration space

00:21:36,159 --> 00:21:40,240
would be like even just defining better

00:21:38,960 --> 00:21:43,600
domains of control

00:21:40,240 --> 00:21:46,080
over the different parts of the sdlc

00:21:43,600 --> 00:21:46,880
something like improving communication

00:21:46,080 --> 00:21:48,640
lines between

00:21:46,880 --> 00:21:50,720
mainer maintainers of open source

00:21:48,640 --> 00:21:52,400
libraries end users

00:21:50,720 --> 00:21:54,799
and then also the other direction

00:21:52,400 --> 00:21:57,840
maintainers open source libraries and

00:21:54,799 --> 00:22:00,880
uh the full the security folks who file

00:21:57,840 --> 00:22:02,640
um and then there's the obvious

00:22:00,880 --> 00:22:04,080
space where we sit in the middle which

00:22:02,640 --> 00:22:05,280
is tooling

00:22:04,080 --> 00:22:07,360
we have a lot of tooling in the

00:22:05,280 --> 00:22:10,720
ecosystem but you know

00:22:07,360 --> 00:22:11,200
the the context that the security folks

00:22:10,720 --> 00:22:13,360
have

00:22:11,200 --> 00:22:14,240
it's not always reaching that that folks

00:22:13,360 --> 00:22:16,000
who have the

00:22:14,240 --> 00:22:17,360
the control in the end the application

00:22:16,000 --> 00:22:20,080
developers the open source

00:22:17,360 --> 00:22:21,120
library authors um so you know finding

00:22:20,080 --> 00:22:23,919
the ways that we can

00:22:21,120 --> 00:22:24,880
better tool around these so that the the

00:22:23,919 --> 00:22:27,200
people who are most

00:22:24,880 --> 00:22:30,000
impacted by these security incidents

00:22:27,200 --> 00:22:33,039
have the context they need to be able to

00:22:30,000 --> 00:22:33,360
remediate or ignore because we always

00:22:33,039 --> 00:22:35,200
know

00:22:33,360 --> 00:22:37,840
sometimes ignoring is the right answer

00:22:35,200 --> 00:22:40,960
when that particular cve doesn't apply

00:22:37,840 --> 00:22:42,480
to your project so the next obvious

00:22:40,960 --> 00:22:43,360
question is how can you get involved in

00:22:42,480 --> 00:22:44,799
this

00:22:43,360 --> 00:22:47,039
we're going to be starting regular

00:22:44,799 --> 00:22:48,799
meetings monthly to get kicked off

00:22:47,039 --> 00:22:50,960
we'll be scheduling them on the github

00:22:48,799 --> 00:22:54,000
repo our hope is to

00:22:50,960 --> 00:22:55,919
start next week so hopefully

00:22:54,000 --> 00:22:57,200
y'all can can hop over onto the github

00:22:55,919 --> 00:22:58,880
repo and and

00:22:57,200 --> 00:23:01,440
and join us for the meeting and we'll

00:22:58,880 --> 00:23:02,960
discuss so thanks everybody and we hope

00:23:01,440 --> 00:23:04,960
to see you in the github

00:23:02,960 --> 00:23:06,640
uh and the special thanks to our

00:23:04,960 --> 00:23:08,799
interviewees julia nick

00:23:06,640 --> 00:23:11,120
and zb uh we couldn't have done this

00:23:08,799 --> 00:23:13,600
without them and thank you so much for

00:23:11,120 --> 00:23:15,600
the uh conference organizers and for

00:23:13,600 --> 00:23:16,960
robin again for reaching out and making

00:23:15,600 --> 00:23:18,799
sure that we had this session

00:23:16,960 --> 00:23:20,400
um this was great conference and we

00:23:18,799 --> 00:23:22,320
appreciated being a part of it

00:23:20,400 --> 00:23:23,760
thanks everybody for your time we hope

00:23:22,320 --> 00:23:25,360
that you're as excited about this

00:23:23,760 --> 00:23:27,039
collaboration space as we are

00:23:25,360 --> 00:23:28,559
and we hope to see you in our upcoming

00:23:27,039 --> 00:23:29,919
meetings we're gonna send you out with a

00:23:28,559 --> 00:23:32,640
couple more clips from them that we

00:23:29,919 --> 00:23:34,400
thought were really great

00:23:32,640 --> 00:23:36,080
you know it's the open source echo

00:23:34,400 --> 00:23:38,400
system so

00:23:36,080 --> 00:23:39,360
everything you see in the open source

00:23:38,400 --> 00:23:43,760
ecosystem

00:23:39,360 --> 00:23:46,720
is more free information

00:23:43,760 --> 00:23:47,600
so every time i get an audit to me it's

00:23:46,720 --> 00:23:50,000
just

00:23:47,600 --> 00:23:51,600
free information these are things that i

00:23:50,000 --> 00:23:54,400
could have spent a lot of time

00:23:51,600 --> 00:23:55,520
figuring out for myself but i'm getting

00:23:54,400 --> 00:23:58,720
this for free

00:23:55,520 --> 00:23:59,919
and it's literally the same attitude uh

00:23:58,720 --> 00:24:01,919
when it's code

00:23:59,919 --> 00:24:02,960
and when it's information about the

00:24:01,919 --> 00:24:05,760
vulnerabilities

00:24:02,960 --> 00:24:06,799
so that's my point of view so this is

00:24:05,760 --> 00:24:09,600
free information

00:24:06,799 --> 00:24:11,360
and i decide what to do with it no the

00:24:09,600 --> 00:24:14,480
site is not the right word i'm

00:24:11,360 --> 00:24:15,039
responsible for figuring out what to do

00:24:14,480 --> 00:24:18,320
with it

00:24:15,039 --> 00:24:21,440
so if i pull in some code from npm

00:24:18,320 --> 00:24:21,760
that's my responsibility now if i pull

00:24:21,440 --> 00:24:23,760
in

00:24:21,760 --> 00:24:26,080
information about vulnerabilities it's

00:24:23,760 --> 00:24:26,720
also my responsibility i can decide to

00:24:26,080 --> 00:24:30,840
ignore it

00:24:26,720 --> 00:24:34,559
i can decide to trust it i can decide

00:24:30,840 --> 00:24:37,360
to postpone a release because

00:24:34,559 --> 00:24:38,400
this thing looks scary and i want to

00:24:37,360 --> 00:24:41,600
look into it

00:24:38,400 --> 00:24:44,320
like do you feel like that response uh

00:24:41,600 --> 00:24:44,880
has built trust in those users like do

00:24:44,320 --> 00:24:48,000
they

00:24:44,880 --> 00:24:51,279
do they um respond in a way that

00:24:48,000 --> 00:24:53,279
uh seems like they still trust either

00:24:51,279 --> 00:24:55,600
node red as a project or the node

00:24:53,279 --> 00:24:57,600
ecosystem more generally or or do you

00:24:55,600 --> 00:24:58,320
feel like that erodes their their trust

00:24:57,600 --> 00:25:00,880
in the

00:24:58,320 --> 00:25:01,840
system that's a good question i i don't

00:25:00,880 --> 00:25:05,440
think i

00:25:01,840 --> 00:25:08,960
necessarily get a a good sense on that

00:25:05,440 --> 00:25:11,520
certainly when it is someone who

00:25:08,960 --> 00:25:12,640
is emailing us rather than asking yeah

00:25:11,520 --> 00:25:14,799
when it's someone who's following our

00:25:12,640 --> 00:25:17,279
security policy to report a

00:25:14,799 --> 00:25:18,720
security issue you kind of immediately

00:25:17,279 --> 00:25:21,120
understand that this is someone who is

00:25:18,720 --> 00:25:24,640
perhaps a bit more switched on to

00:25:21,120 --> 00:25:26,320
these problems so um and in general

00:25:24,640 --> 00:25:28,000
you know the response when we explain

00:25:26,320 --> 00:25:30,400
the situation the response we get back

00:25:28,000 --> 00:25:31,679
is oh no problem then you know thanks

00:25:30,400 --> 00:25:35,600
for explaining it

00:25:31,679 --> 00:25:37,039
and you know it's uh um

00:25:35,600 --> 00:25:38,880
there's an understanding and

00:25:37,039 --> 00:25:40,400
appreciation that the fact that we've

00:25:38,880 --> 00:25:42,159
taken the time to respond and that we

00:25:40,400 --> 00:25:45,440
are able to explain

00:25:42,159 --> 00:25:50,799
it but you know

00:25:45,440 --> 00:25:52,799
having some way that npm audit could say

00:25:50,799 --> 00:25:55,760
yes there's a vulnerability but here's

00:25:52,799 --> 00:25:58,880
what the node-red project says about it

00:25:55,760 --> 00:26:01,840
and put that up front would just

00:25:58,880 --> 00:26:03,760
again put that put more confidence it

00:26:01,840 --> 00:26:05,760
would remove that period of doubt

00:26:03,760 --> 00:26:07,360
when someone has felt the need to report

00:26:05,760 --> 00:26:08,960
a security vulnerability

00:26:07,360 --> 00:26:11,200
to the time when they get a response

00:26:08,960 --> 00:26:12,720
from us you know if if the tooling could

00:26:11,200 --> 00:26:15,360
at least give

00:26:12,720 --> 00:26:17,279
give our assessment to that

00:26:15,360 --> 00:26:20,000
vulnerability up front even if

00:26:17,279 --> 00:26:20,400
you'd rather hide it you know just say

00:26:20,000 --> 00:26:22,640
you know

00:26:20,400 --> 00:26:24,559
and here's what node red says about this

00:26:22,640 --> 00:26:27,520
um which could be

00:26:24,559 --> 00:26:28,240
thank you we're aware fix coming in in a

00:26:27,520 --> 00:26:30,559
week's time

00:26:28,240 --> 00:26:32,000
in our next mentioned release or you

00:26:30,559 --> 00:26:34,240
know judged as

00:26:32,000 --> 00:26:35,760
not relevant to the node-red use case

00:26:34,240 --> 00:26:38,640
whatever it might be

00:26:35,760 --> 00:26:39,679
um i think that would just remove that

00:26:38,640 --> 00:26:41,520
period of doubt

00:26:39,679 --> 00:26:42,880
between someone seeing a vulnerability

00:26:41,520 --> 00:26:44,320
and then

00:26:42,880 --> 00:26:46,159
going through the process of getting a

00:26:44,320 --> 00:26:49,279
response from us yeah that's great

00:26:46,159 --> 00:26:50,480
um do you feel like you your team and

00:26:49,279 --> 00:26:52,480
other engineers in

00:26:50,480 --> 00:26:54,240
in your sphere are getting enough

00:26:52,480 --> 00:26:55,120
context around the vulnerabilities to be

00:26:54,240 --> 00:26:57,279
able to understand

00:26:55,120 --> 00:26:59,440
what they mean and do the right

00:26:57,279 --> 00:27:01,440
responsible actions

00:26:59,440 --> 00:27:03,120
well i want to say yes because

00:27:01,440 --> 00:27:06,640
theoretically

00:27:03,120 --> 00:27:10,000
there is a link to a write-up with a poc

00:27:06,640 --> 00:27:13,039
often but uh not really so i've seen it

00:27:10,000 --> 00:27:14,880
way too many times that uh that

00:27:13,039 --> 00:27:18,159
conversation on the team

00:27:14,880 --> 00:27:20,880
uh we're building a feature there's a

00:27:18,159 --> 00:27:22,399
there's a merger request uh it's getting

00:27:20,880 --> 00:27:25,760
reviewed meanwhile

00:27:22,399 --> 00:27:27,840
uh the build is red because of audit so

00:27:25,760 --> 00:27:30,480
hey what's happening oh i gotta fix the

00:27:27,840 --> 00:27:33,679
audit okay

00:27:30,480 --> 00:27:37,840
ten minutes later uh what did you do

00:27:33,679 --> 00:27:37,840
oh i i ignored a bunch of things

00:27:38,000 --> 00:27:46,000
uh and it took 10 minutes okay i i think

00:27:42,640 --> 00:27:48,000
i think i can trust most situations uh

00:27:46,000 --> 00:27:49,760
that these were really things that you

00:27:48,000 --> 00:27:52,159
just look at them and decide

00:27:49,760 --> 00:27:53,520
yeah this doesn't affect us but at the

00:27:52,159 --> 00:27:57,200
same time

00:27:53,520 --> 00:28:00,559
well it's a denial of service in the

00:27:57,200 --> 00:28:03,919
 client well that looks serious

00:28:00,559 --> 00:28:07,120
okay let's let's have a larger uh debate

00:28:03,919 --> 00:28:09,200
so we pull in more people and try to

00:28:07,120 --> 00:28:10,799
figure out what to do with it

00:28:09,200 --> 00:28:13,039
like frankly the way that we're doing it

00:28:10,799 --> 00:28:13,840
in every everywhere i've ever been has

00:28:13,039 --> 00:28:15,360
been like

00:28:13,840 --> 00:28:17,440
the only way that security feels they

00:28:15,360 --> 00:28:19,279
could scale is just say update

00:28:17,440 --> 00:28:21,200
right like we can't possibly triage all

00:28:19,279 --> 00:28:23,039
this stuff someone on your opsec team

00:28:21,200 --> 00:28:26,480
can't write tests for everything

00:28:23,039 --> 00:28:30,080
um honestly i think one of the most

00:28:26,480 --> 00:28:33,120
uh underappreciated items

00:28:30,080 --> 00:28:36,559
in the npm audit output

00:28:33,120 --> 00:28:40,960
is exploitability so i did

00:28:36,559 --> 00:28:44,880
take that into account uh a few times

00:28:40,960 --> 00:28:48,159
when deciding okay exploitability is

00:28:44,880 --> 00:28:52,159
very low so this looks serious but

00:28:48,159 --> 00:28:55,520
it's very unlikely to be exploited i can

00:28:52,159 --> 00:28:56,640
spare some time to research it now but

00:28:55,520 --> 00:28:59,120
we can

00:28:56,640 --> 00:29:01,120
move forward with the feature or

00:28:59,120 --> 00:29:04,080
exploitability is very high

00:29:01,120 --> 00:29:05,039
okay let's stop the work and look into

00:29:04,080 --> 00:29:08,080
it

00:29:05,039 --> 00:29:10,880
um so that seems to me

00:29:08,080 --> 00:29:12,559
like a very valuable thing but this is

00:29:10,880 --> 00:29:14,240
just a number and i don't know where

00:29:12,559 --> 00:29:18,399
it's coming from so

00:29:14,240 --> 00:29:21,440
i might just be very naive about it

00:29:18,399 --> 00:29:22,240
okay so um so the particular scenario

00:29:21,440 --> 00:29:27,039
with node-red

00:29:22,240 --> 00:29:30,320
was the fact we use b-crypt that's two

00:29:27,039 --> 00:29:31,039
in two places one for the user to

00:29:30,320 --> 00:29:32,159
encrypt

00:29:31,039 --> 00:29:34,080
their password to put into their

00:29:32,159 --> 00:29:37,120
settings file and

00:29:34,080 --> 00:29:40,240
then equally to decrypt when

00:29:37,120 --> 00:29:44,080
as part of the login to the tool

00:29:40,240 --> 00:29:45,679
um to to compare well not to d to

00:29:44,080 --> 00:29:46,960
encrypt the password that's been

00:29:45,679 --> 00:29:48,320
submitted to be able to do the

00:29:46,960 --> 00:29:49,200
comparison with what's in the settings

00:29:48,320 --> 00:29:52,399
file

00:29:49,200 --> 00:29:54,559
um and um

00:29:52,399 --> 00:29:56,000
for a variety of reasons we depend on

00:29:54,559 --> 00:29:58,880
both b crypt and b

00:29:56,000 --> 00:29:59,360
crypt j s so b j s is a pure javascript

00:29:58,880 --> 00:30:02,640
version

00:29:59,360 --> 00:30:05,919
b crypt is a binary module

00:30:02,640 --> 00:30:07,600
and the reason we do that is a b crypt

00:30:05,919 --> 00:30:09,200
historically hasn't always compiled

00:30:07,600 --> 00:30:12,399
cleanly on all the platforms that

00:30:09,200 --> 00:30:14,960
we need to run on and as a strategy to

00:30:12,399 --> 00:30:16,960
like on the low powered raspberry pi's

00:30:14,960 --> 00:30:18,080
where a lot of people run node-red

00:30:16,960 --> 00:30:20,720
they wouldn't necessarily have the right

00:30:18,080 --> 00:30:22,320
build tools so we actually have b-crypt

00:30:20,720 --> 00:30:26,159
as an optional dependency

00:30:22,320 --> 00:30:28,480
and bcrypt.js as a main dependency

00:30:26,159 --> 00:30:29,360
so that if whatever reason bcrypt fails

00:30:28,480 --> 00:30:31,440
to install

00:30:29,360 --> 00:30:33,120
we can fall back to the javascript

00:30:31,440 --> 00:30:36,159
version that's slightly slower

00:30:33,120 --> 00:30:36,720
but as it's only when you log in we can

00:30:36,159 --> 00:30:40,159
afford

00:30:36,720 --> 00:30:41,279
for it to take slightly longer so um

00:30:40,159 --> 00:30:42,799
so we were actually in this position

00:30:41,279 --> 00:30:44,480
where we had b crypt marked as an

00:30:42,799 --> 00:30:46,799
optional dependency

00:30:44,480 --> 00:30:47,840
and now that's another interesting

00:30:46,799 --> 00:30:51,039
factor because

00:30:47,840 --> 00:30:54,320
um tools like npm outdated ignore

00:30:51,039 --> 00:30:57,360
optional dependencies so there

00:30:54,320 --> 00:30:57,919
there was a period of time when our

00:30:57,360 --> 00:30:59,440
checks

00:30:57,919 --> 00:31:01,200
you know are there updates available for

00:30:59,440 --> 00:31:03,919
modules um

00:31:01,200 --> 00:31:04,320
we just completely overlooked b-crypt

00:31:03,919 --> 00:31:06,720
for

00:31:04,320 --> 00:31:08,240
for a time because again the tooling

00:31:06,720 --> 00:31:10,480
just didn't pay attention to it because

00:31:08,240 --> 00:31:13,760
it was marked as optional which is

00:31:10,480 --> 00:31:17,039
a separate issue um but then

00:31:13,760 --> 00:31:18,080
uh along came a an issue that someone

00:31:17,039 --> 00:31:21,440
pointed out that the b

00:31:18,080 --> 00:31:23,840
crypt we had installed was had a cve

00:31:21,440 --> 00:31:26,000
um that the the encryption it did in

00:31:23,840 --> 00:31:27,600
certain scenarios was not

00:31:26,000 --> 00:31:29,600
strong enough you know it had had

00:31:27,600 --> 00:31:33,360
vulnerabilities in its encryption

00:31:29,600 --> 00:31:36,399
um now uh

00:31:33,360 --> 00:31:39,039
because bcrypt is by well as

00:31:36,399 --> 00:31:41,200
from my understanding of it um because

00:31:39,039 --> 00:31:43,440
bcrypt has a binary component

00:31:41,200 --> 00:31:44,799
they have been quite they have a

00:31:43,440 --> 00:31:46,640
compatibility table

00:31:44,799 --> 00:31:48,320
of if you're using these versions of

00:31:46,640 --> 00:31:52,799
node this is the version of b

00:31:48,320 --> 00:31:54,640
crypt and it's actually quite a um

00:31:52,799 --> 00:31:56,399
you've got to try and get that right and

00:31:54,640 --> 00:31:57,840
thankfully that it's always the case

00:31:56,399 --> 00:32:01,279
their latest version

00:31:57,840 --> 00:32:03,760
supports everything and higher

00:32:01,279 --> 00:32:04,559
so it as long as long as you're on the

00:32:03,760 --> 00:32:08,880
latest version

00:32:04,559 --> 00:32:11,679
you should be golden however um

00:32:08,880 --> 00:32:15,440
just through through the timing of this

00:32:11,679 --> 00:32:16,880
at the time the cv came in the fix

00:32:15,440 --> 00:32:18,559
was on the version b crypt that no

00:32:16,880 --> 00:32:21,600
longer supported node 8

00:32:18,559 --> 00:32:25,360
i believe whereas within node-red we

00:32:21,600 --> 00:32:25,360
still supported node 8 and node 10.

00:32:25,600 --> 00:32:29,120
again reason being we know there are

00:32:27,200 --> 00:32:32,240
users running on embedded devices that

00:32:29,120 --> 00:32:35,919
can't change their runtime

00:32:32,240 --> 00:32:37,279
so yeah we were we had made a statement

00:32:35,919 --> 00:32:40,080
a couple years ago that

00:32:37,279 --> 00:32:41,519
we will keep supporting node 8 up until

00:32:40,080 --> 00:32:44,720
node-red 2.0

00:32:41,519 --> 00:32:46,159
which is due now to coincide with node

00:32:44,720 --> 00:32:49,519
10 going out the window at which point

00:32:46,159 --> 00:32:52,000
we drop support for node 8 and node 10.

00:32:49,519 --> 00:32:52,880
but it does mean since this one got

00:32:52,000 --> 00:32:55,120
reported

00:32:52,880 --> 00:32:57,200
we have been simply unable to upgrade

00:32:55,120 --> 00:32:59,120
crypt

00:32:57,200 --> 00:33:00,320
because that would force us to drop

00:32:59,120 --> 00:33:03,360
support for node 8

00:33:00,320 --> 00:33:03,679
and that would break our commitment to

00:33:03,360 --> 00:33:06,720
our

00:33:03,679 --> 00:33:07,919
user community so when we looked at the

00:33:06,720 --> 00:33:11,120
actual details

00:33:07,919 --> 00:33:14,000
of the vulnerability uh again

00:33:11,120 --> 00:33:15,919
i i can't remember the the specific

00:33:14,000 --> 00:33:18,480
parts of the internals of the module

00:33:15,919 --> 00:33:20,799
but our analysis of it showed the the

00:33:18,480 --> 00:33:23,519
very limited way we used group bcrypt

00:33:20,799 --> 00:33:25,039
purely just to encrypt the password

00:33:23,519 --> 00:33:27,440
which is stored on disk it's never

00:33:25,039 --> 00:33:28,880
transmitted anywhere

00:33:27,440 --> 00:33:31,440
and then to do the comparison of the

00:33:28,880 --> 00:33:34,720
password that's received um

00:33:31,440 --> 00:33:38,000
that didn't go near the um

00:33:34,720 --> 00:33:40,880
the vulnerable code so we were

00:33:38,000 --> 00:33:41,679
we were satisfied that the the risk was

00:33:40,880 --> 00:33:44,720
not

00:33:41,679 --> 00:33:48,880
present for for node red users i think

00:33:44,720 --> 00:33:50,960
um yeah we we fight this

00:33:48,880 --> 00:33:52,399
frequently right i think everywhere i've

00:33:50,960 --> 00:33:55,519
been just

00:33:52,399 --> 00:33:57,039
software supply chain is is hard and so

00:33:55,519 --> 00:34:00,559
a lot of times like

00:33:57,039 --> 00:34:02,240
uh the only way to scale it um has been

00:34:00,559 --> 00:34:05,519
you know let's let's have people update

00:34:02,240 --> 00:34:08,240
their libraries um even if it's not

00:34:05,519 --> 00:34:10,240
necessarily vulnerable but we but it has

00:34:08,240 --> 00:34:12,480
a vulnerability right like the easiest

00:34:10,240 --> 00:34:13,119
answer like the answer that gets to yes

00:34:12,480 --> 00:34:16,159
is

00:34:13,119 --> 00:34:18,800
um updating that thing and so i think

00:34:16,159 --> 00:34:20,240
there i think if we can make consistent

00:34:18,800 --> 00:34:23,040
the way that these vulnerabilities

00:34:20,240 --> 00:34:24,159
come in and have some requirements or

00:34:23,040 --> 00:34:25,839
even if we can

00:34:24,159 --> 00:34:27,280
if the security people maybe don't write

00:34:25,839 --> 00:34:28,240
the tests themselves but you know they

00:34:27,280 --> 00:34:30,159
can turn in

00:34:28,240 --> 00:34:31,520
uh their their vulnerability and their

00:34:30,159 --> 00:34:33,200
cve and

00:34:31,520 --> 00:34:35,119
uh you know if there's library

00:34:33,200 --> 00:34:36,079
maintainers or people like this who can

00:34:35,119 --> 00:34:37,679
help

00:34:36,079 --> 00:34:39,760
you know understand the vulnerability

00:34:37,679 --> 00:34:42,240
itself write the tests and then so then

00:34:39,760 --> 00:34:44,000
npm audit becomes a thing that's that's

00:34:42,240 --> 00:34:46,399
more customized to your code and your

00:34:44,000 --> 00:34:49,200
use cases rather than just

00:34:46,399 --> 00:34:50,079
we found a match for this library uh you

00:34:49,200 --> 00:34:53,520
know kind of

00:34:50,079 --> 00:34:56,079
somewhere in your uh dependencies okay

00:34:53,520 --> 00:34:57,119
all right so one last thing is the thing

00:34:56,079 --> 00:35:00,560
you care about

00:34:57,119 --> 00:35:03,680
the most in this topic and it's uh

00:35:00,560 --> 00:35:06,960
how it affects uh the

00:35:03,680 --> 00:35:10,800
the people who build the packages

00:35:06,960 --> 00:35:14,480
so from my point of view

00:35:10,800 --> 00:35:15,599
okay uh the other way around to me being

00:35:14,480 --> 00:35:19,200
the consumer of

00:35:15,599 --> 00:35:22,400
npm in this role

00:35:19,200 --> 00:35:26,240
i'm installing dependencies i'm checking

00:35:22,400 --> 00:35:29,760
the audit what

00:35:26,240 --> 00:35:34,560
what i would find useful is

00:35:29,760 --> 00:35:39,280
information in the audit or elsewhere

00:35:34,560 --> 00:35:43,760
about other people's choices

00:35:39,280 --> 00:35:46,400
so there is thousands of people like

00:35:43,760 --> 00:35:47,440
me checking the audit looking at it

00:35:46,400 --> 00:35:49,680
deciding

00:35:47,440 --> 00:35:50,480
like this regular expression denial of

00:35:49,680 --> 00:35:54,720
service

00:35:50,480 --> 00:35:56,560
in a fourth level dependency of express

00:35:54,720 --> 00:35:58,240
doesn't seem like it's affecting

00:35:56,560 --> 00:36:01,040
anything but

00:35:58,240 --> 00:36:02,160
what do i know so the question is are

00:36:01,040 --> 00:36:05,839
there any people

00:36:02,160 --> 00:36:09,520
who already researched it and made

00:36:05,839 --> 00:36:11,520
a informed choice

00:36:09,520 --> 00:36:13,920
that's probably much better than my

00:36:11,520 --> 00:36:17,520
educated guests

00:36:13,920 --> 00:36:20,880
and if so i wouldn't know what they did

00:36:17,520 --> 00:36:21,520
so uh one thing to look into one thing

00:36:20,880 --> 00:36:25,599
i'm

00:36:21,520 --> 00:36:27,440
hoping for the future is a system where

00:36:25,599 --> 00:36:29,920
the the file with decisions that i

00:36:27,440 --> 00:36:31,040
produce is something that i could

00:36:29,920 --> 00:36:33,359
potentially

00:36:31,040 --> 00:36:34,720
share with others and being in a

00:36:33,359 --> 00:36:37,599
position of

00:36:34,720 --> 00:36:39,760
someone who's informed to make those

00:36:37,599 --> 00:36:43,839
decisions

00:36:39,760 --> 00:36:45,680
i could be okay i'm a troll i'm gonna

00:36:43,839 --> 00:36:49,359
say influencer

00:36:45,680 --> 00:36:52,800
in this area so what i publish

00:36:49,359 --> 00:36:56,000
uh is gonna be a an informal

00:36:52,800 --> 00:36:56,560
guideline for some other teams for

00:36:56,000 --> 00:36:59,920
example

00:36:56,560 --> 00:37:02,880
if if i'm involved in a certain project

00:36:59,920 --> 00:37:03,520
i can publish information about what i

00:37:02,880 --> 00:37:06,320
consider

00:37:03,520 --> 00:37:07,200
safe to ignore and people could use that

00:37:06,320 --> 00:37:10,240
information

00:37:07,200 --> 00:37:11,760
as a factor not one by one so not

00:37:10,240 --> 00:37:14,800
importing my

00:37:11,760 --> 00:37:15,520
decisions but just reading up on them

00:37:14,800 --> 00:37:17,920
treating them

00:37:15,520 --> 00:37:23,839
as a suggestion where when making their

00:37:17,920 --> 00:37:23,839

YouTube URL: https://www.youtube.com/watch?v=X-0yb1Nfp_I


