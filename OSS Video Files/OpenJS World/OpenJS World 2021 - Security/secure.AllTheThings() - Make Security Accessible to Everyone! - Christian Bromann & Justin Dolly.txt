Title: secure.AllTheThings() - Make Security Accessible to Everyone! - Christian Bromann & Justin Dolly
Publication date: 2021-05-31
Playlist: OpenJS World 2021 - Security
Description: 
	Security signals are critically important to ensure the quality and stability of code, especially in production environments (or in CI/CD pipelines). A lack of visibility into security weaknesses in code can represent a significant threat. Wouldnâ€™t you want to know about potential security flaws in your code as early as possible?
While tooling in various areas flourishes, from static code analysis to unit and functional testing, security frameworks often have been limited to subject matter experts, rarely used by developer and QA teams and audits, if at all, run at the very end of the software development lifecycle. With the shift-left spirit we believe this has to change. Adding security checks early to your pipeline can save time and brings awareness and exposure of vulnerabilities to developers which ultimately is the silver bullet for security in your company.
In this session, Justin Dolly, Chief Security Officer, and Christian Bromann, Staff Software Engineer of the Open Source Program Office at Sauce Labs, will give exclusive insights on a new platform and a new set of tools designed to test the security of your applications in a simple, effective and very accessible way.
Captions: 
	00:00:00,480 --> 00:00:03,919
hi everybody uh good morning good

00:00:02,560 --> 00:00:04,640
afternoon good evening wherever in the

00:00:03,919 --> 00:00:07,120
world you are

00:00:04,640 --> 00:00:08,800
and welcome to openjs world my name is

00:00:07,120 --> 00:00:10,080
justin dawley and i'm the chief security

00:00:08,800 --> 00:00:11,599
officer at sauce labs

00:00:10,080 --> 00:00:13,599
and i'll be joined momentarily by

00:00:11,599 --> 00:00:16,400
christian broman

00:00:13,599 --> 00:00:18,000
we're here um it's a pleasure to be here

00:00:16,400 --> 00:00:20,160
and exciting to be sharing with you some

00:00:18,000 --> 00:00:22,000
of the innovations that we're working on

00:00:20,160 --> 00:00:23,600
um to be able to give you and our

00:00:22,000 --> 00:00:26,880
customers more insights and a deeper

00:00:23,600 --> 00:00:28,480
understanding of your software

00:00:26,880 --> 00:00:30,320
why am i standing in front of you as a

00:00:28,480 --> 00:00:32,239
security professional well

00:00:30,320 --> 00:00:33,840
i'm standing in front of you because i'm

00:00:32,239 --> 00:00:34,320
responsible for the security of sauce

00:00:33,840 --> 00:00:36,079
labs

00:00:34,320 --> 00:00:37,680
which includes not only our company and

00:00:36,079 --> 00:00:40,000
our users and our networks

00:00:37,680 --> 00:00:41,120
but also the platform and services that

00:00:40,000 --> 00:00:44,239
our customers use

00:00:41,120 --> 00:00:45,920
24 hours a day been

00:00:44,239 --> 00:00:47,680
leading security of public and private

00:00:45,920 --> 00:00:50,000
companies for more than 20 years

00:00:47,680 --> 00:00:51,120
but i have something to admit to you and

00:00:50,000 --> 00:00:53,520
that is

00:00:51,120 --> 00:00:55,920
i am a tester i've always regarded

00:00:53,520 --> 00:00:58,160
myself as a tester

00:00:55,920 --> 00:00:58,960
if you think about it the act of testing

00:00:58,160 --> 00:01:01,840
is a pretty big

00:00:58,960 --> 00:01:03,600
important part of any security program

00:01:01,840 --> 00:01:06,000
because it provides you with results

00:01:03,600 --> 00:01:07,760
and those results if they are treated in

00:01:06,000 --> 00:01:10,640
the right ways

00:01:07,760 --> 00:01:13,680
can provide deep insights to be able to

00:01:10,640 --> 00:01:15,119
allow you to make risk decisions

00:01:13,680 --> 00:01:17,200
these signals are pretty critically

00:01:15,119 --> 00:01:20,479
important and to date i think have been

00:01:17,200 --> 00:01:22,159
relatively speaking underserved

00:01:20,479 --> 00:01:23,680
we aim to change that situation by

00:01:22,159 --> 00:01:25,600
providing you with security signals

00:01:23,680 --> 00:01:26,240
alongside all of the rest of the signals

00:01:25,600 --> 00:01:28,080
that we

00:01:26,240 --> 00:01:29,439
provide as you go through your current

00:01:28,080 --> 00:01:31,200
testing routines

00:01:29,439 --> 00:01:33,360
so the quality of your software can be

00:01:31,200 --> 00:01:35,360
as good as it can possibly be

00:01:33,360 --> 00:01:36,479
after all security issues are just

00:01:35,360 --> 00:01:38,799
simply an outcome

00:01:36,479 --> 00:01:40,240
due to a lack of quality it just so

00:01:38,799 --> 00:01:41,920
happens that these days

00:01:40,240 --> 00:01:43,280
the security outcome is one of the

00:01:41,920 --> 00:01:46,560
greater outcomes

00:01:43,280 --> 00:01:48,479
given our current technology landscape

00:01:46,560 --> 00:01:49,840
and now i'd like to pass it over to

00:01:48,479 --> 00:01:51,520
christian brauman

00:01:49,840 --> 00:01:53,439
for more information on why we do these

00:01:51,520 --> 00:01:54,720
things and to give you a little bit more

00:01:53,439 --> 00:01:57,840
detail

00:01:54,720 --> 00:02:01,119
christian thanks justin

00:01:57,840 --> 00:02:03,520
and hello everyone as a devops engineer

00:02:01,119 --> 00:02:04,159
we are living by three very important

00:02:03,520 --> 00:02:07,360
mantras

00:02:04,159 --> 00:02:08,479
which are increase automation within the

00:02:07,360 --> 00:02:11,760
software development

00:02:08,479 --> 00:02:14,160
lifecycle um therefore allow faster

00:02:11,760 --> 00:02:16,560
delivery of features and software

00:02:14,160 --> 00:02:17,360
which is essentially shipped with high

00:02:16,560 --> 00:02:19,440
quality

00:02:17,360 --> 00:02:20,800
and therefore contains as less bugs as

00:02:19,440 --> 00:02:22,160
possible

00:02:20,800 --> 00:02:24,000
and we see that more and more

00:02:22,160 --> 00:02:24,959
responsibilities are moved towards the

00:02:24,000 --> 00:02:26,560
developer

00:02:24,959 --> 00:02:28,560
we see that in testing we see that in

00:02:26,560 --> 00:02:30,560
devops

00:02:28,560 --> 00:02:32,640
instead of having one team that builds a

00:02:30,560 --> 00:02:35,519
feature one that tests it

00:02:32,640 --> 00:02:37,440
and one that deploys them many orgs have

00:02:35,519 --> 00:02:38,080
moved towards a unique delivery team

00:02:37,440 --> 00:02:40,959
that

00:02:38,080 --> 00:02:41,760
develops tests and deploys at once and

00:02:40,959 --> 00:02:43,920
therefore

00:02:41,760 --> 00:02:44,959
um takes ownership of the complete

00:02:43,920 --> 00:02:47,840
pipeline

00:02:44,959 --> 00:02:49,120
the advantage of course less back and

00:02:47,840 --> 00:02:51,599
forth between

00:02:49,120 --> 00:02:53,280
teams which means less cross-department

00:02:51,599 --> 00:02:56,400
communication which results in

00:02:53,280 --> 00:02:59,360
faster time to delivery it not only

00:02:56,400 --> 00:03:01,920
saves time but also a lot of resources

00:02:59,360 --> 00:03:02,560
now we we see the same now the same

00:03:01,920 --> 00:03:05,440
desire

00:03:02,560 --> 00:03:06,080
now happen in the security space rather

00:03:05,440 --> 00:03:08,560
than

00:03:06,080 --> 00:03:10,400
having a dedicated dedicated security

00:03:08,560 --> 00:03:13,040
team auditing software

00:03:10,400 --> 00:03:14,319
fail favor at the end of the software

00:03:13,040 --> 00:03:16,959
development lifecycle

00:03:14,319 --> 00:03:18,480
we want the majority of that work done

00:03:16,959 --> 00:03:20,800
in an automated fashion

00:03:18,480 --> 00:03:22,239
early in the development it applies to

00:03:20,800 --> 00:03:24,799
the same difference

00:03:22,239 --> 00:03:26,799
shift left principle um as we see in

00:03:24,799 --> 00:03:29,440
other disciplines

00:03:26,799 --> 00:03:30,080
now as a developer the question is when

00:03:29,440 --> 00:03:32,640
and how

00:03:30,080 --> 00:03:35,200
do i have to test the security of my

00:03:32,640 --> 00:03:35,200
application

00:03:35,360 --> 00:03:39,599
as with all types of tests within

00:03:37,760 --> 00:03:41,440
security there are various approaches

00:03:39,599 --> 00:03:43,280
for different areas within the software

00:03:41,440 --> 00:03:46,560
development life cycle

00:03:43,280 --> 00:03:47,200
starting from threat modeling which is a

00:03:46,560 --> 00:03:49,519
process

00:03:47,200 --> 00:03:51,040
to identify potential threats such as

00:03:49,519 --> 00:03:53,360
structural vulnerabilities

00:03:51,040 --> 00:03:54,159
or the absence of appropriate safeguards

00:03:53,360 --> 00:03:56,799
way before

00:03:54,159 --> 00:03:57,920
the development even starts then we come

00:03:56,799 --> 00:04:00,879
into the

00:03:57,920 --> 00:04:01,360
cess area which is as which stands for

00:04:00,879 --> 00:04:04,159
static

00:04:01,360 --> 00:04:04,640
application security testing which is an

00:04:04,159 --> 00:04:08,080
approach

00:04:04,640 --> 00:04:11,280
similar to what we know as unit as code

00:04:08,080 --> 00:04:14,159
code linking where you scan your code

00:04:11,280 --> 00:04:16,560
to try discover problems in this case

00:04:14,159 --> 00:04:18,799
security problems

00:04:16,560 --> 00:04:20,720
like all indic tools this offers fast

00:04:18,799 --> 00:04:23,919
feedback and allows to detect

00:04:20,720 --> 00:04:24,880
a lot of issues but the value of those

00:04:23,919 --> 00:04:28,320
signals

00:04:24,880 --> 00:04:30,800
is often very low and

00:04:28,320 --> 00:04:33,440
you see do you get a lot of false

00:04:30,800 --> 00:04:33,440
positives

00:04:35,520 --> 00:04:42,320
lastly there's a security

00:04:39,120 --> 00:04:44,400
testing in the infrastructure of code

00:04:42,320 --> 00:04:46,320
and as well as security monitoring and

00:04:44,400 --> 00:04:48,880
detect attack detection

00:04:46,320 --> 00:04:50,720
which come with their own complexity and

00:04:48,880 --> 00:04:53,360
challenges

00:04:50,720 --> 00:04:54,479
so for all these stages which one would

00:04:53,360 --> 00:04:57,600
you think

00:04:54,479 --> 00:04:59,680
is part of the you know developer

00:04:57,600 --> 00:05:01,440
development life cycle but has not

00:04:59,680 --> 00:05:04,320
really much exploited

00:05:01,440 --> 00:05:04,639
when it comes to tooling um that's right

00:05:04,320 --> 00:05:07,360
uh

00:05:04,639 --> 00:05:08,400
it's the dust approach and there are

00:05:07,360 --> 00:05:11,199
plenty of

00:05:08,400 --> 00:05:12,880
well working tools in this uh static

00:05:11,199 --> 00:05:15,919
security analysis space

00:05:12,880 --> 00:05:17,280
um from you know starting looking at sas

00:05:15,919 --> 00:05:19,840
provider like snick

00:05:17,280 --> 00:05:20,880
or integrated tools in github for

00:05:19,840 --> 00:05:22,960
instance the

00:05:20,880 --> 00:05:24,240
dependency management tool they have

00:05:22,960 --> 00:05:26,960
there or

00:05:24,240 --> 00:05:28,479
saml which is a code analysis platform

00:05:26,960 --> 00:05:32,639
that was acquired by github in

00:05:28,479 --> 00:05:33,759
2019 and this however is just one way of

00:05:32,639 --> 00:05:36,400
testing security right

00:05:33,759 --> 00:05:37,280
um security in general there's no civil

00:05:36,400 --> 00:05:39,440
bullet to it

00:05:37,280 --> 00:05:40,400
there will be never one single tool that

00:05:39,440 --> 00:05:42,639
allows you

00:05:40,400 --> 00:05:44,720
that can guarantee you the security of

00:05:42,639 --> 00:05:47,680
your whole application

00:05:44,720 --> 00:05:48,160
this is why there are so many stages

00:05:47,680 --> 00:05:50,560
dust

00:05:48,160 --> 00:05:51,360
in this area is the security entrant

00:05:50,560 --> 00:05:54,720
approach

00:05:51,360 --> 00:05:56,160
that as opposed to provides much more

00:05:54,720 --> 00:06:00,080
valuable signals

00:05:56,160 --> 00:06:00,080
for us as developer to act on

00:06:00,479 --> 00:06:06,880
now why is this interesting for us um

00:06:03,919 --> 00:06:08,880
weird saws have been thinking about this

00:06:06,880 --> 00:06:12,319
over the last couple of months

00:06:08,880 --> 00:06:13,520
and and we we thought that it we see in

00:06:12,319 --> 00:06:15,680
this space that

00:06:13,520 --> 00:06:17,199
security testing is not really

00:06:15,680 --> 00:06:19,520
accessible to everyone

00:06:17,199 --> 00:06:20,880
um at sauces we're running over three

00:06:19,520 --> 00:06:24,000
million tests every day

00:06:20,880 --> 00:06:26,080
which is a very large number and this

00:06:24,000 --> 00:06:27,039
gives us a huge advantage compared to

00:06:26,080 --> 00:06:29,520
any other

00:06:27,039 --> 00:06:31,199
uh competitors in the market because we

00:06:29,520 --> 00:06:32,160
know your application from the in and

00:06:31,199 --> 00:06:34,639
out

00:06:32,160 --> 00:06:35,840
based on your functional tests we know

00:06:34,639 --> 00:06:38,400
where you log in

00:06:35,840 --> 00:06:39,120
and which credential you may use now we

00:06:38,400 --> 00:06:41,600
know

00:06:39,120 --> 00:06:42,240
the process of your checkout flow which

00:06:41,600 --> 00:06:44,319
steps

00:06:42,240 --> 00:06:46,240
and pages are involved and most

00:06:44,319 --> 00:06:48,080
importantly what data is being

00:06:46,240 --> 00:06:51,280
transmitted from one

00:06:48,080 --> 00:06:53,120
form to another all these information

00:06:51,280 --> 00:06:55,520
help us to properly analyze the

00:06:53,120 --> 00:06:58,639
application on the test to provide you

00:06:55,520 --> 00:07:01,039
insightful and meaningful signals

00:06:58,639 --> 00:07:02,000
that said this solution cannot only be

00:07:01,039 --> 00:07:05,919
it on sauce labs

00:07:02,000 --> 00:07:08,880
it can be deployed on all running tests

00:07:05,919 --> 00:07:10,639
across all vendors or even locally

00:07:08,880 --> 00:07:13,759
because one of the big problems

00:07:10,639 --> 00:07:16,000
we have here in the security space in

00:07:13,759 --> 00:07:17,199
general in the security tooling space is

00:07:16,000 --> 00:07:20,400
um that

00:07:17,199 --> 00:07:20,800
the people have to implement scanners to

00:07:20,400 --> 00:07:23,440
into

00:07:20,800 --> 00:07:25,039
to understand your application um those

00:07:23,440 --> 00:07:28,160
scanners need to be able to go

00:07:25,039 --> 00:07:31,520
through a login to access a secure area

00:07:28,160 --> 00:07:34,800
um running functional tests um

00:07:31,520 --> 00:07:38,240
already solves that problem for you uh

00:07:34,800 --> 00:07:41,280
by accessing that through functional

00:07:38,240 --> 00:07:44,800
uh commands uh through webdriver or

00:07:41,280 --> 00:07:45,520
newer tools like cyprus so with your

00:07:44,800 --> 00:07:47,199
functional test

00:07:45,520 --> 00:07:50,000
you can already prepare everything that

00:07:47,199 --> 00:07:53,120
you need to analyze the security of your

00:07:50,000 --> 00:07:53,120
application thoroughly

00:07:53,680 --> 00:07:57,280
the question now becomes you know what

00:07:55,919 --> 00:07:59,840
what kind of tool would be

00:07:57,280 --> 00:08:01,520
ideal to build on top of an existing

00:07:59,840 --> 00:08:03,919
testing infrastructure

00:08:01,520 --> 00:08:06,080
um sure we we could implement a new

00:08:03,919 --> 00:08:07,840
proprietary solution in our company

00:08:06,080 --> 00:08:10,800
however that would mean that we would

00:08:07,840 --> 00:08:13,840
need to reinvent the wheel

00:08:10,800 --> 00:08:16,319
um weird sawsteps found that um

00:08:13,840 --> 00:08:17,039
a perfect fit and that is also open

00:08:16,319 --> 00:08:18,560
source

00:08:17,039 --> 00:08:20,160
and can be used on top of your

00:08:18,560 --> 00:08:22,400
functional test this tool is called

00:08:20,160 --> 00:08:25,039
overslab

00:08:22,400 --> 00:08:25,440
oslab is not only open source and part

00:08:25,039 --> 00:08:28,800
of the

00:08:25,440 --> 00:08:30,479
os foundation it is a trusted tools by

00:08:28,800 --> 00:08:33,200
security experts

00:08:30,479 --> 00:08:35,120
with a long development history i think

00:08:33,200 --> 00:08:37,120
its first release was somewhere around

00:08:35,120 --> 00:08:38,880
00:08:37,120 --> 00:08:41,200
and it has been always developed in the

00:08:38,880 --> 00:08:43,039
open since then

00:08:41,200 --> 00:08:44,480
and there are also some very interesting

00:08:43,039 --> 00:08:46,959
similarity to

00:08:44,480 --> 00:08:48,080
to webdriver which is the protocol that

00:08:46,959 --> 00:08:50,959
you know is driving

00:08:48,080 --> 00:08:51,279
functional tests from the begin with uh

00:08:50,959 --> 00:08:54,000
which

00:08:51,279 --> 00:08:56,320
is it's built with an api first in mind

00:08:54,000 --> 00:08:58,080
this means that you can

00:08:56,320 --> 00:09:00,080
that all interactions with the

00:08:58,080 --> 00:09:01,680
application with the tool is abstracted

00:09:00,080 --> 00:09:04,000
into api endpoints

00:09:01,680 --> 00:09:05,120
that means that you can deploy that tool

00:09:04,000 --> 00:09:08,880
similar to

00:09:05,120 --> 00:09:13,519
deploy a driver anywhere in the cloud

00:09:08,880 --> 00:09:17,360
and operate to it through api clients

00:09:13,519 --> 00:09:20,640
the way zap works is that you can use it

00:09:17,360 --> 00:09:21,839
for for instance crawling your page to

00:09:20,640 --> 00:09:24,480
analyze

00:09:21,839 --> 00:09:26,160
what the browser is doing to analyze

00:09:24,480 --> 00:09:28,800
what the browser is requesting and

00:09:26,160 --> 00:09:31,279
receiving doing the exploration there

00:09:28,800 --> 00:09:35,120
are two types of scanners one is

00:09:31,279 --> 00:09:37,920
a headless approach where zap is doing

00:09:35,120 --> 00:09:40,480
requests on your behalf and scans the

00:09:37,920 --> 00:09:41,600
html response and you know pause those

00:09:40,480 --> 00:09:44,000
links and see what's

00:09:41,600 --> 00:09:45,760
what's pictures next to crawl and the

00:09:44,000 --> 00:09:48,959
second one is an ajax scanner

00:09:45,760 --> 00:09:50,080
which is designed to operate on top of a

00:09:48,959 --> 00:09:52,720
browser

00:09:50,080 --> 00:09:53,839
to allow you to inspect also single page

00:09:52,720 --> 00:09:56,560
application

00:09:53,839 --> 00:09:58,320
which are not rendered when not

00:09:56,560 --> 00:10:01,760
necessarily rendered when you

00:09:58,320 --> 00:10:04,480
request them from the browser

00:10:01,760 --> 00:10:07,120
another way to explore an application is

00:10:04,480 --> 00:10:10,320
also by using zap as a proxy which is a

00:10:07,120 --> 00:10:11,920
really fantastic future feature here by

00:10:10,320 --> 00:10:14,800
automating it through

00:10:11,920 --> 00:10:15,839
webdriver using selenium webdavio or

00:10:14,800 --> 00:10:18,959
other tools

00:10:15,839 --> 00:10:20,800
and you can use them to write automated

00:10:18,959 --> 00:10:22,880
tests automated functional tests

00:10:20,800 --> 00:10:25,519
to explore your application in an

00:10:22,880 --> 00:10:27,519
automated fashion

00:10:25,519 --> 00:10:29,360
so instead of you know your browser

00:10:27,519 --> 00:10:32,399
making requests to the internet

00:10:29,360 --> 00:10:35,839
it tunnels all the requests through the

00:10:32,399 --> 00:10:37,519
zap proxy and you can and those kind of

00:10:35,839 --> 00:10:40,720
information can be later used

00:10:37,519 --> 00:10:43,360
for scanning purposes now

00:10:40,720 --> 00:10:45,920
if we move zap into the cloud and

00:10:43,360 --> 00:10:48,720
connect our functional test tests

00:10:45,920 --> 00:10:49,200
with them this can be this can become a

00:10:48,720 --> 00:10:52,240
very

00:10:49,200 --> 00:10:53,600
powerful setup your functional tests can

00:10:52,240 --> 00:10:55,519
pull your application

00:10:53,600 --> 00:10:57,279
100 times more efficient than every

00:10:55,519 --> 00:10:59,519
scanning tool would do

00:10:57,279 --> 00:11:00,880
so that scanning vulnerabilities with

00:10:59,519 --> 00:11:02,720
zap in the cloud

00:11:00,880 --> 00:11:03,920
can be ten times faster because you can

00:11:02,720 --> 00:11:06,320
run them in parallel

00:11:03,920 --> 00:11:07,519
rather than executing that or scanning

00:11:06,320 --> 00:11:09,279
manually

00:11:07,519 --> 00:11:11,360
and so that eventually testing

00:11:09,279 --> 00:11:12,160
functionality and security becomes

00:11:11,360 --> 00:11:15,839
almost

00:11:12,160 --> 00:11:15,839
uh one single workflow

00:11:16,560 --> 00:11:20,800
so let me show you how this workflow

00:11:18,320 --> 00:11:23,760
might look like in your company

00:11:20,800 --> 00:11:25,760
let me introduce you to christine watson

00:11:23,760 --> 00:11:28,079
she's leading the qa team

00:11:25,760 --> 00:11:29,680
she's leading the qa team in her company

00:11:28,079 --> 00:11:32,160
she and her team have been

00:11:29,680 --> 00:11:32,800
running a lot of functional tests in

00:11:32,160 --> 00:11:34,959
their

00:11:32,800 --> 00:11:36,880
selenium grid that they have deployed in

00:11:34,959 --> 00:11:38,720
their ci system

00:11:36,880 --> 00:11:40,640
and they are now getting the requirement

00:11:38,720 --> 00:11:42,320
to ensure that they also add

00:11:40,640 --> 00:11:44,079
security tests to make sure that

00:11:42,320 --> 00:11:46,640
security bugs are caught early

00:11:44,079 --> 00:11:47,360
in development protests are written in

00:11:46,640 --> 00:11:49,920
nodejs

00:11:47,360 --> 00:11:50,560
and now she wonders how what she needs

00:11:49,920 --> 00:11:53,680
to

00:11:50,560 --> 00:11:55,440
to do to fulfill these new requirements

00:11:53,680 --> 00:11:59,200
she finds out about the capabilities

00:11:55,440 --> 00:11:59,200
that oslab provides them

00:12:00,079 --> 00:12:03,040
so she starts

00:12:03,360 --> 00:12:07,040
deploying over snap in the cloud or

00:12:05,600 --> 00:12:09,120
locally

00:12:07,040 --> 00:12:11,279
and starts tunnel all the browser

00:12:09,120 --> 00:12:14,720
traffic through that application

00:12:11,279 --> 00:12:15,440
um to do that you need to start zap as a

00:12:14,720 --> 00:12:18,320
daemon

00:12:15,440 --> 00:12:18,800
um to wherever your machine runs your

00:12:18,320 --> 00:12:22,079
test

00:12:18,800 --> 00:12:23,519
for instance your ci server then you

00:12:22,079 --> 00:12:27,360
apply the appropriate

00:12:23,519 --> 00:12:31,120
proxy capabilities in your webdriver

00:12:27,360 --> 00:12:31,760
setup so that the browser is started in

00:12:31,120 --> 00:12:33,600
a way

00:12:31,760 --> 00:12:34,880
that it automatically proxies the

00:12:33,600 --> 00:12:38,000
request through os

00:12:34,880 --> 00:12:40,000
lab the nice thing about

00:12:38,000 --> 00:12:41,200
this is that you can enable this for all

00:12:40,000 --> 00:12:42,959
browser tests um

00:12:41,200 --> 00:12:44,240
applying proxy settings is part of the

00:12:42,959 --> 00:12:46,000
webdriver protocol

00:12:44,240 --> 00:12:48,079
and therefore works across all the

00:12:46,000 --> 00:12:50,880
browsers

00:12:48,079 --> 00:12:52,000
so besides these small settings pristine

00:12:50,880 --> 00:12:53,760
can keep uh

00:12:52,000 --> 00:12:56,480
keep running the test the same way as

00:12:53,760 --> 00:12:59,200
she did before

00:12:56,480 --> 00:12:59,839
now while her tests are running now uh

00:12:59,200 --> 00:13:01,040
and

00:12:59,839 --> 00:13:02,639
christine is getting a coffee which

00:13:01,040 --> 00:13:04,160
gives me some time to explain the

00:13:02,639 --> 00:13:06,560
options that you have after your

00:13:04,160 --> 00:13:09,040
functional tests are done

00:13:06,560 --> 00:13:10,880
so many of you will have different kind

00:13:09,040 --> 00:13:13,680
of security requirements

00:13:10,880 --> 00:13:14,639
i had conversation with folks that said

00:13:13,680 --> 00:13:16,560
i would never

00:13:14,639 --> 00:13:17,920
fail my pipeline because of security

00:13:16,560 --> 00:13:20,079
reasons

00:13:17,920 --> 00:13:21,279
also said that they would be actually

00:13:20,079 --> 00:13:23,760
indeed interested

00:13:21,279 --> 00:13:24,480
doing that because they are running and

00:13:23,760 --> 00:13:27,680
testing

00:13:24,480 --> 00:13:29,839
a critical security related component in

00:13:27,680 --> 00:13:32,399
the infrastructure

00:13:29,839 --> 00:13:34,480
what you see here that it comes

00:13:32,399 --> 00:13:35,440
ultimately down to what your team's

00:13:34,480 --> 00:13:36,880
requirements are

00:13:35,440 --> 00:13:38,880
and every team's requirements can be

00:13:36,880 --> 00:13:41,120
different and adding

00:13:38,880 --> 00:13:42,880
security tests to your pipeline will

00:13:41,120 --> 00:13:44,160
have some implications to it for

00:13:42,880 --> 00:13:46,240
instance

00:13:44,160 --> 00:13:48,320
scanning for vulnerabilities will

00:13:46,240 --> 00:13:50,880
definitely add some additional time

00:13:48,320 --> 00:13:52,320
and therefore might be slow down your

00:13:50,880 --> 00:13:55,519
pipeline overall

00:13:52,320 --> 00:13:57,600
um and you know with that um you know

00:13:55,519 --> 00:14:00,839
slow down the time that you can

00:13:57,600 --> 00:14:02,399
you know test and deploy new features to

00:14:00,839 --> 00:14:04,079
production

00:14:02,399 --> 00:14:06,160
however when you run everything in the

00:14:04,079 --> 00:14:08,560
cloud you can start analyzing

00:14:06,160 --> 00:14:09,760
and scanning for vulnerabilities um

00:14:08,560 --> 00:14:12,480
while your functional

00:14:09,760 --> 00:14:12,959
tests are already run are still running

00:14:12,480 --> 00:14:16,320
um

00:14:12,959 --> 00:14:18,240
so our goal should be to to always

00:14:16,320 --> 00:14:19,680
opt in for security tests because

00:14:18,240 --> 00:14:23,360
because we can run them

00:14:19,680 --> 00:14:26,240
in an efficient manner uh in parallel um

00:14:23,360 --> 00:14:28,720
while some other checks are still being

00:14:26,240 --> 00:14:33,120
executed

00:14:28,720 --> 00:14:36,160
and um security in itself is um you know

00:14:33,120 --> 00:14:38,880
also very difficult to describe

00:14:36,160 --> 00:14:41,040
security does mean different things to

00:14:38,880 --> 00:14:42,399
different people right

00:14:41,040 --> 00:14:44,480
certain vulnerabilities that are

00:14:42,399 --> 00:14:45,040
critical for one person might not be for

00:14:44,480 --> 00:14:47,760
the other

00:14:45,040 --> 00:14:48,720
um and there will be again no tool no

00:14:47,760 --> 00:14:52,880
service

00:14:48,720 --> 00:14:55,360
uh that will give you uh a feature or

00:14:52,880 --> 00:14:56,880
the assurance that the whole application

00:14:55,360 --> 00:14:59,839
that you provide or that you want to

00:14:56,880 --> 00:14:59,839
deploy secure

00:15:00,000 --> 00:15:04,079
the fact here is that by detecting and

00:15:02,160 --> 00:15:05,760
mitigating common vulnerabilities early

00:15:04,079 --> 00:15:08,480
in the software development lifecycle

00:15:05,760 --> 00:15:10,480
cycle you give your security engineer

00:15:08,480 --> 00:15:14,320
more times to focus on the difficult

00:15:10,480 --> 00:15:14,320
aspects of your overall architecture

00:15:15,839 --> 00:15:20,000
in case of christine's teams their

00:15:18,399 --> 00:15:23,040
policy is it to

00:15:20,000 --> 00:15:26,000
you know to check that

00:15:23,040 --> 00:15:27,440
after every before every deployment how

00:15:26,000 --> 00:15:30,560
many security parks

00:15:27,440 --> 00:15:32,079
bugs exist in their recent tech version

00:15:30,560 --> 00:15:35,040
of their system

00:15:32,079 --> 00:15:36,639
um so if you store these up sessions

00:15:35,040 --> 00:15:39,040
that you haven't been opened

00:15:36,639 --> 00:15:40,399
doing a functional test and you put them

00:15:39,040 --> 00:15:42,320
into a cloud bucket

00:15:40,399 --> 00:15:44,399
you can always download them at all

00:15:42,320 --> 00:15:47,759
times and access them through

00:15:44,399 --> 00:15:50,880
that proxy and to use them for

00:15:47,759 --> 00:15:52,480
scanning security vulnerabilities

00:15:50,880 --> 00:15:54,639
so every functional test therefore can

00:15:52,480 --> 00:15:55,759
now store not only general logs like

00:15:54,639 --> 00:15:59,040
selenium logs or

00:15:55,759 --> 00:16:02,240
web develops it will now also store

00:15:59,040 --> 00:16:05,120
zap sessions um that include a lot of

00:16:02,240 --> 00:16:07,440
data on requests and responses that

00:16:05,120 --> 00:16:10,160
the browser has been made was making

00:16:07,440 --> 00:16:13,279
during the functional test

00:16:10,160 --> 00:16:15,360
and christine can trigger these scanning

00:16:13,279 --> 00:16:16,959
these vulnerability scans completely

00:16:15,360 --> 00:16:18,880
automatically by using

00:16:16,959 --> 00:16:21,519
by downloading this app session from the

00:16:18,880 --> 00:16:26,160
bucket and using the zap client

00:16:21,519 --> 00:16:28,000
to trigger these security scans

00:16:26,160 --> 00:16:29,600
zap as a tool comes with a lot of

00:16:28,000 --> 00:16:32,079
utilities equipped

00:16:29,600 --> 00:16:33,680
to give you a nice overview about all

00:16:32,079 --> 00:16:36,720
the vulnerabilities

00:16:33,680 --> 00:16:38,800
that i exist in your application

00:16:36,720 --> 00:16:39,920
now if you manage this of course within

00:16:38,800 --> 00:16:42,160
the cloud platform

00:16:39,920 --> 00:16:44,160
you can make this much more simpler by

00:16:42,160 --> 00:16:46,639
just having a click on a button or

00:16:44,160 --> 00:16:51,279
you know providing a cli client that

00:16:46,639 --> 00:16:53,920
does everything for you

00:16:51,279 --> 00:16:55,440
now for the last build christine found

00:16:53,920 --> 00:16:57,600
10 new vulnerabilities

00:16:55,440 --> 00:16:59,920
um some of them are related to things

00:16:57,600 --> 00:17:03,360
like missing security headers

00:16:59,920 --> 00:17:04,720
or a secret key in one of the javascript

00:17:03,360 --> 00:17:07,280
files or

00:17:04,720 --> 00:17:08,640
uh you know something really simple and

00:17:07,280 --> 00:17:11,120
common these things are

00:17:08,640 --> 00:17:12,799
really easy to fix christie knows her

00:17:11,120 --> 00:17:16,240
application and she knows how to

00:17:12,799 --> 00:17:17,199
fix how to apply patches to fix those

00:17:16,240 --> 00:17:20,799
issues

00:17:17,199 --> 00:17:23,919
however with she needs help with one

00:17:20,799 --> 00:17:24,880
critical bug that she has seen that she

00:17:23,919 --> 00:17:28,240
hasn't seen before

00:17:24,880 --> 00:17:30,559
nor anyone in her teeth

00:17:28,240 --> 00:17:31,520
with the help of a geo integration that

00:17:30,559 --> 00:17:33,440
she's using

00:17:31,520 --> 00:17:35,120
she is sending that security

00:17:33,440 --> 00:17:37,679
vulnerability to

00:17:35,120 --> 00:17:40,640
uh one of uh her security engineers

00:17:37,679 --> 00:17:40,640
working at her company

00:17:41,200 --> 00:17:44,320
um that security engineer can now

00:17:43,520 --> 00:17:47,200
download

00:17:44,320 --> 00:17:47,679
the same zap session and can use the zap

00:17:47,200 --> 00:17:50,080
gui

00:17:47,679 --> 00:17:51,840
to inspect what happened during the

00:17:50,080 --> 00:17:54,320
functional test

00:17:51,840 --> 00:17:55,679
so he downloads the session drags and

00:17:54,320 --> 00:17:57,679
drops it into the

00:17:55,679 --> 00:17:59,280
os app ui and introspect all the

00:17:57,679 --> 00:18:01,840
requests and responses

00:17:59,280 --> 00:18:03,440
finds the vulnerability and message

00:18:01,840 --> 00:18:04,799
christine's back with

00:18:03,440 --> 00:18:07,760
all the information she needs to

00:18:04,799 --> 00:18:09,919
mitigate that problem in the future

00:18:07,760 --> 00:18:11,919
um so with that christine and her deaf

00:18:09,919 --> 00:18:13,120
team are happy because

00:18:11,919 --> 00:18:15,840
they have shipped a more secure

00:18:13,120 --> 00:18:16,960
application and the security engineer is

00:18:15,840 --> 00:18:20,799
happy because

00:18:16,960 --> 00:18:20,799
he made the internet a little bit safer

00:18:21,039 --> 00:18:24,240
now i said in the beginning that there's

00:18:22,640 --> 00:18:26,880
no silver bullet for security

00:18:24,240 --> 00:18:27,280
and well the closest thing that gets to

00:18:26,880 --> 00:18:29,520
it

00:18:27,280 --> 00:18:30,320
is awareness within developer and qa

00:18:29,520 --> 00:18:32,559
teams

00:18:30,320 --> 00:18:34,320
so to sum up this little workflow

00:18:32,559 --> 00:18:36,880
example

00:18:34,320 --> 00:18:38,880
with overstep and and functional testing

00:18:36,880 --> 00:18:40,720
using web driver and selenium

00:18:38,880 --> 00:18:42,960
you'll be always you will be able you

00:18:40,720 --> 00:18:44,080
are able to analyze the vulnerabilities

00:18:42,960 --> 00:18:47,039
of your application

00:18:44,080 --> 00:18:48,559
by using your functional test with

00:18:47,039 --> 00:18:51,360
overslab under the hood

00:18:48,559 --> 00:18:52,160
you can create you can create some deep

00:18:51,360 --> 00:18:55,679
analysis

00:18:52,160 --> 00:18:56,400
on the most common vulnerabilities that

00:18:55,679 --> 00:18:58,160
exist

00:18:56,400 --> 00:18:59,520
uh things like you might have heard

00:18:58,160 --> 00:19:01,520
about the overstock pen

00:18:59,520 --> 00:19:03,120
which are which is an updated list about

00:19:01,520 --> 00:19:06,000
the most common threats of

00:19:03,120 --> 00:19:07,440
uh today's modern application that you

00:19:06,000 --> 00:19:10,480
find on the internet

00:19:07,440 --> 00:19:12,240
in addition to that um you can store

00:19:10,480 --> 00:19:16,160
that data and keep in the story

00:19:12,240 --> 00:19:17,360
um backlog of the information that or

00:19:16,160 --> 00:19:19,840
security packs that

00:19:17,360 --> 00:19:21,039
you know have occurred during your um

00:19:19,840 --> 00:19:22,799
have occurred when you have been

00:19:21,039 --> 00:19:24,880
developing on that application

00:19:22,799 --> 00:19:26,720
and and learn from the the mistakes that

00:19:24,880 --> 00:19:29,840
you have done in the past to

00:19:26,720 --> 00:19:32,559
start to mitigate this happening

00:19:29,840 --> 00:19:32,559
in the future

00:19:34,080 --> 00:19:39,280
now while this talk really doesn't

00:19:37,039 --> 00:19:41,280
provide you any step-by-step guide

00:19:39,280 --> 00:19:44,480
to install or deploy this in your

00:19:41,280 --> 00:19:46,799
application i hope it inspires you to

00:19:44,480 --> 00:19:48,000
that with just open source and open

00:19:46,799 --> 00:19:50,160
standards you can

00:19:48,000 --> 00:19:51,440
deploy such a system in your

00:19:50,160 --> 00:19:53,919
organization

00:19:51,440 --> 00:19:54,480
um we feel like with this approach you

00:19:53,919 --> 00:19:57,120
can make

00:19:54,480 --> 00:19:58,799
security really accessible um to

00:19:57,120 --> 00:20:00,960
everyone and to test it uh

00:19:58,799 --> 00:20:02,799
early in the development life cycle and

00:20:00,960 --> 00:20:03,679
again every organization does this

00:20:02,799 --> 00:20:05,280
differently

00:20:03,679 --> 00:20:07,039
we at thoughts we have a lot of ideas

00:20:05,280 --> 00:20:09,120
how testing security

00:20:07,039 --> 00:20:10,880
and testing the security of your

00:20:09,120 --> 00:20:13,440
application can look like

00:20:10,880 --> 00:20:14,480
um and we are interested to talk so

00:20:13,440 --> 00:20:16,240
reach out to us

00:20:14,480 --> 00:20:20,320
and with that i want to give it back to

00:20:16,240 --> 00:20:21,600
justin for the closing remarks thank you

00:20:20,320 --> 00:20:23,919
so much christian it's very

00:20:21,600 --> 00:20:25,760
very informative and very interesting um

00:20:23,919 --> 00:20:28,480
i think christian's point is a great one

00:20:25,760 --> 00:20:30,159
i can tell you having been in security

00:20:28,480 --> 00:20:31,679
for such a long time

00:20:30,159 --> 00:20:33,600
that the silver bullet that christian's

00:20:31,679 --> 00:20:35,440
referring to about the just the simple

00:20:33,600 --> 00:20:37,919
awareness a little bit of education

00:20:35,440 --> 00:20:39,039
inside of the areas of our companies

00:20:37,919 --> 00:20:41,600
where the development

00:20:39,039 --> 00:20:43,120
occurs and where the ideas are are

00:20:41,600 --> 00:20:43,919
spawning from where the ideas are

00:20:43,120 --> 00:20:45,919
spawning

00:20:43,919 --> 00:20:47,520
is is really the silver bullet is that

00:20:45,919 --> 00:20:49,039
that we're actually aware of some of the

00:20:47,520 --> 00:20:49,919
choices that we're making and some of

00:20:49,039 --> 00:20:53,360
the

00:20:49,919 --> 00:20:55,520
security implications to those choices

00:20:53,360 --> 00:20:57,440
i think with everything else one of the

00:20:55,520 --> 00:20:59,120
promises of open source in particular

00:20:57,440 --> 00:21:00,640
and the open source standards is that we

00:20:59,120 --> 00:21:02,080
can all adopt them and adopt them

00:21:00,640 --> 00:21:04,240
quickly and they're flexible enough to

00:21:02,080 --> 00:21:05,880
be able to support our businesses

00:21:04,240 --> 00:21:07,360
and any other initiatives we have

00:21:05,880 --> 00:21:09,039
non-non-commercial that may be

00:21:07,360 --> 00:21:10,480
non-commercial in nature

00:21:09,039 --> 00:21:12,559
but this is truly one of those

00:21:10,480 --> 00:21:13,600
opportunities where a rising tide lifts

00:21:12,559 --> 00:21:15,919
all boats

00:21:13,600 --> 00:21:17,919
that you know by leveraging these

00:21:15,919 --> 00:21:18,559
standards and these initiatives that we

00:21:17,919 --> 00:21:20,799
can

00:21:18,559 --> 00:21:21,600
increase the general security across the

00:21:20,799 --> 00:21:23,919
board of

00:21:21,600 --> 00:21:25,200
applications and websites and platforms

00:21:23,919 --> 00:21:25,840
and so on that are attached to the

00:21:25,200 --> 00:21:27,919
internet

00:21:25,840 --> 00:21:29,600
thereby protecting all users of those

00:21:27,919 --> 00:21:32,080
platforms and those sites

00:21:29,600 --> 00:21:33,120
so it truly is incredibly valuable and i

00:21:32,080 --> 00:21:35,280
would encourage you

00:21:33,120 --> 00:21:37,039
to um to investigate these things and

00:21:35,280 --> 00:21:38,720
and and see if they fit for you and your

00:21:37,039 --> 00:21:40,320
organization

00:21:38,720 --> 00:21:41,919
and with that i'd like to thank you all

00:21:40,320 --> 00:21:43,600
very very much for your attention

00:21:41,919 --> 00:21:44,960
thanks to christian for the expertise

00:21:43,600 --> 00:21:47,440
and the details

00:21:44,960 --> 00:21:48,159
and uh we hope you continue to enjoy the

00:21:47,440 --> 00:21:50,240
rest of

00:21:48,159 --> 00:21:53,120
the content at this wonderful conference

00:21:50,240 --> 00:21:57,200
at openjs world

00:21:53,120 --> 00:21:57,200

YouTube URL: https://www.youtube.com/watch?v=2bdYqCQdvDs


