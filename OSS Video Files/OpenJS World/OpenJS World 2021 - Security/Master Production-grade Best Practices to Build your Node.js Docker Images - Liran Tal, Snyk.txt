Title: Master Production-grade Best Practices to Build your Node.js Docker Images - Liran Tal, Snyk
Publication date: 2021-05-31
Playlist: OpenJS World 2021 - Security
Description: 
	Master Production-grade Best Practices to Build your Node.js Docker Images - Liran Tal, Snyk

You thought you figured out how to build your Node.js web applications with Docker? you're missing out on a lot. Many articles on this topic have been written, yet sadly, without thoughtful consideration of security and production best practices for building Node.js Docker images. In this session, we'll run through step-by-step production-grade guidelines for building optimized and secure Node.js Docker images by understanding the pitfalls and insecurities with every Dockerfile directive, and then fixing it. Join me and master the Node.js best practices for Docker-based applications.
Captions: 
	00:00:00,000 --> 00:00:04,319
hey everyone thank you for joining my

00:00:01,839 --> 00:00:06,720
talk on mastering production great best

00:00:04,319 --> 00:00:08,080
practices to building your node.js

00:00:06,720 --> 00:00:10,480
docker image

00:00:08,080 --> 00:00:12,639
hey glad to have you here my name is

00:00:10,480 --> 00:00:13,599
lerontal i'm also known as that guy with

00:00:12,639 --> 00:00:15,920
a yoda hat

00:00:13,599 --> 00:00:17,520
i'm a developer advocate at sneak or on

00:00:15,920 --> 00:00:20,080
a mission to help developers

00:00:17,520 --> 00:00:21,199
build applications securely using open

00:00:20,080 --> 00:00:23,439
source software

00:00:21,199 --> 00:00:25,680
i'm actively involved in the node.js

00:00:23,439 --> 00:00:27,039
security working group the oasp you know

00:00:25,680 --> 00:00:28,080
different research and security

00:00:27,039 --> 00:00:30,640
experiences

00:00:28,080 --> 00:00:31,439
and best practices so uh you know if you

00:00:30,640 --> 00:00:33,360
want to attach

00:00:31,439 --> 00:00:35,120
based on all of those or any of this or

00:00:33,360 --> 00:00:37,520
just ask any questions i'm on twitter

00:00:35,120 --> 00:00:40,879
just reach out at leron underscore tell

00:00:37,520 --> 00:00:42,079
and we can chat but today we are going

00:00:40,879 --> 00:00:45,520
to specifically

00:00:42,079 --> 00:00:46,320
dive into this uh building uh node.js

00:00:45,520 --> 00:00:49,760
applications we

00:00:46,320 --> 00:00:52,079
docker containers now most blog

00:00:49,760 --> 00:00:53,760
articles that i've seen i've come kind

00:00:52,079 --> 00:00:55,120
of like starting and finishing along the

00:00:53,760 --> 00:00:57,600
lines of

00:00:55,120 --> 00:00:58,239
following the best the the not the best

00:00:57,600 --> 00:01:00,320
really but

00:00:58,239 --> 00:01:01,280
i would say that the simplest right and

00:01:00,320 --> 00:01:03,039
simplistic

00:01:01,280 --> 00:01:05,199
maybe other simplistic sometimes

00:01:03,039 --> 00:01:06,080
sometimes uh docker file instructions

00:01:05,199 --> 00:01:08,560
for building

00:01:06,080 --> 00:01:10,479
uh node.js docker images and what i

00:01:08,560 --> 00:01:13,119
actually mean by that is you know it's

00:01:10,479 --> 00:01:14,400
simple and it works it's something as as

00:01:13,119 --> 00:01:16,720
simple as this like

00:01:14,400 --> 00:01:18,479
like this uh um this docker file which

00:01:16,720 --> 00:01:19,200
you can run docker build and then docker

00:01:18,479 --> 00:01:20,960
run and it's

00:01:19,200 --> 00:01:22,320
it's fine the application will run just

00:01:20,960 --> 00:01:25,119
fine

00:01:22,320 --> 00:01:26,000
the only problem is it is kind of full

00:01:25,119 --> 00:01:28,560
of mistakes and

00:01:26,000 --> 00:01:30,159
bad practices for building docker images

00:01:28,560 --> 00:01:32,479
definitely if you want to do this for

00:01:30,159 --> 00:01:34,560
production grade so you want to avoid

00:01:32,479 --> 00:01:37,040
anything that looks like this by all

00:01:34,560 --> 00:01:38,159
means now we're going to dissect what

00:01:37,040 --> 00:01:40,079
exactly it means

00:01:38,159 --> 00:01:42,079
every single line of them starting from

00:01:40,079 --> 00:01:44,320
the first one from node right

00:01:42,079 --> 00:01:45,600
that actually means no reproducible

00:01:44,320 --> 00:01:47,200
builds because you're pulling in the

00:01:45,600 --> 00:01:48,720
latest image and we're gonna drill into

00:01:47,200 --> 00:01:49,520
any of the all of this so don't worry

00:01:48,720 --> 00:01:51,200
we're gonna

00:01:49,520 --> 00:01:53,920
uh you know stay tuned on this the other

00:01:51,200 --> 00:01:55,759
thing here is you know you're copying

00:01:53,920 --> 00:01:56,479
potentially sensitive files because

00:01:55,759 --> 00:01:58,719
you're just

00:01:56,479 --> 00:02:00,479
copying everything you know maybe config

00:01:58,719 --> 00:02:01,280
files maybe environment files that you

00:02:00,479 --> 00:02:03,280
wouldn't need

00:02:01,280 --> 00:02:04,719
to have on the running environment on

00:02:03,280 --> 00:02:08,239
the docker

00:02:04,719 --> 00:02:09,520
js image what about you know unneeded

00:02:08,239 --> 00:02:11,680
dependencies in this

00:02:09,520 --> 00:02:12,800
npm install command you know who knows

00:02:11,680 --> 00:02:14,879
what you're pulling in there

00:02:12,800 --> 00:02:16,640
when you're running this during during

00:02:14,879 --> 00:02:18,800
the build time of the docker image

00:02:16,640 --> 00:02:21,120
and finally even this command to

00:02:18,800 --> 00:02:21,599
basically spawn the node.js runtime as

00:02:21,120 --> 00:02:23,920
well

00:02:21,599 --> 00:02:25,760
in the application itself is actually

00:02:23,920 --> 00:02:28,160
incorrect usage of doing so

00:02:25,760 --> 00:02:29,680
and it may end up in your application

00:02:28,160 --> 00:02:31,519
not having proper

00:02:29,680 --> 00:02:33,040
graceful shutdown definitely if you're

00:02:31,519 --> 00:02:34,959
using this in some

00:02:33,040 --> 00:02:36,080
you know mature and rich orchestration

00:02:34,959 --> 00:02:38,879
environment like kubernetes

00:02:36,080 --> 00:02:39,680
or swamp or others so let's start off

00:02:38,879 --> 00:02:41,680
with our first

00:02:39,680 --> 00:02:43,840
you know best practice this is using

00:02:41,680 --> 00:02:44,560
explicit and deterministic docker based

00:02:43,840 --> 00:02:46,400
image tags

00:02:44,560 --> 00:02:48,319
and what does it actually mean so if we

00:02:46,400 --> 00:02:49,440
look at this you know first line of code

00:02:48,319 --> 00:02:52,000
here in this docker file

00:02:49,440 --> 00:02:54,000
that says from node well what image are

00:02:52,000 --> 00:02:55,680
we actually pulling in it may seem at

00:02:54,000 --> 00:02:56,959
first you know kind of like an obvious

00:02:55,680 --> 00:02:59,519
choice to use this

00:02:56,959 --> 00:03:01,599
uh docker image uh you know from node

00:02:59,519 --> 00:03:04,319
but we're actually this is an alias to

00:03:01,599 --> 00:03:05,760
uh the latest docker image and of node

00:03:04,319 --> 00:03:06,879
and should we actually be pulling in

00:03:05,760 --> 00:03:09,120
that latest image

00:03:06,879 --> 00:03:10,200
because at the very least it means this

00:03:09,120 --> 00:03:12,480
is

00:03:10,200 --> 00:03:14,239
unreproducible builds right this is

00:03:12,480 --> 00:03:15,360
every time we install we create and

00:03:14,239 --> 00:03:17,680
build this image

00:03:15,360 --> 00:03:19,040
we're actually pulling in a new version

00:03:17,680 --> 00:03:20,959
potentially new version

00:03:19,040 --> 00:03:22,480
of the images you know from the last

00:03:20,959 --> 00:03:25,760
time that it was built

00:03:22,480 --> 00:03:28,879
and so several things here right just

00:03:25,760 --> 00:03:31,040
like we're using uh for example uh log

00:03:28,879 --> 00:03:32,319
files for npm and you know yarn or npn

00:03:31,040 --> 00:03:33,040
whatever you're using as a client

00:03:32,319 --> 00:03:35,760
manager

00:03:33,040 --> 00:03:37,280
uh still you are using log files because

00:03:35,760 --> 00:03:37,920
you want to pin the dependencies you

00:03:37,280 --> 00:03:39,920
want to have

00:03:37,920 --> 00:03:42,159
consistent builds not inconsistent

00:03:39,920 --> 00:03:44,239
builds not in deterministic builds

00:03:42,159 --> 00:03:47,040
same thing here you want to use a very

00:03:44,239 --> 00:03:48,560
specific uh you know node.js docker

00:03:47,040 --> 00:03:50,239
that you're gonna pull in the other

00:03:48,560 --> 00:03:51,519
thing is you know

00:03:50,239 --> 00:03:53,680
because you're pulling in and if you're

00:03:51,519 --> 00:03:55,840
pulling in images like that like from no

00:03:53,680 --> 00:03:57,840
latest you're actually taking the latest

00:03:55,840 --> 00:03:59,120
uh node image which is

00:03:57,840 --> 00:04:01,280
i don't know if you knew this but this

00:03:59,120 --> 00:04:02,239
is a full-fledged operating system with

00:04:01,280 --> 00:04:03,920
many libraries

00:04:02,239 --> 00:04:05,920
and you know binaries that you may not

00:04:03,920 --> 00:04:07,120
need for a running node application so

00:04:05,920 --> 00:04:09,280
why would you want that

00:04:07,120 --> 00:04:10,879
it's you know more software means you

00:04:09,280 --> 00:04:11,599
know you know down you know more

00:04:10,879 --> 00:04:14,720
downloads

00:04:11,599 --> 00:04:16,320
for a size you know more uh um more risk

00:04:14,720 --> 00:04:17,120
for you because there's no more software

00:04:16,320 --> 00:04:18,320
bundled

00:04:17,120 --> 00:04:19,919
and who knows what's going to happen

00:04:18,320 --> 00:04:21,440
from it i will tell you that we're going

00:04:19,919 --> 00:04:23,360
to see a live hacking demo here

00:04:21,440 --> 00:04:25,199
of what happens when you actually bundle

00:04:23,360 --> 00:04:26,000
a lot of dependencies in a darker image

00:04:25,199 --> 00:04:27,440
itself

00:04:26,000 --> 00:04:29,919
the container itself could be

00:04:27,440 --> 00:04:31,759
compromised and we'll see it but

00:04:29,919 --> 00:04:33,280
thinking about all of these images that

00:04:31,759 --> 00:04:33,919
you're pulling in you know from node

00:04:33,280 --> 00:04:36,080
latest

00:04:33,919 --> 00:04:37,280
is a full-fledged operating system and

00:04:36,080 --> 00:04:39,199
as we've seen you know in

00:04:37,280 --> 00:04:40,639
in previous research at sneakers you

00:04:39,199 --> 00:04:43,520
know

00:04:40,639 --> 00:04:45,360
taking that latest image even for other

00:04:43,520 --> 00:04:47,040
base images like you know the the couch

00:04:45,360 --> 00:04:49,040
based on mysql all of those other

00:04:47,040 --> 00:04:52,080
popular base images this is basically

00:04:49,040 --> 00:04:54,160
top 10 uh docker images on docker hub

00:04:52,080 --> 00:04:55,919
almost all of them you see from except

00:04:54,160 --> 00:04:56,400
for ubuntu in the last time we scanned

00:04:55,919 --> 00:04:58,880
it

00:04:56,400 --> 00:05:00,960
all of them have these uh

00:04:58,880 --> 00:05:03,440
vulnerabilities

00:05:00,960 --> 00:05:05,120
that that are by default on the docker

00:05:03,440 --> 00:05:07,680
image itself so why would you want to

00:05:05,120 --> 00:05:08,479
you know take that latest image probably

00:05:07,680 --> 00:05:11,520
not so

00:05:08,479 --> 00:05:13,280
let's fix it now this base image

00:05:11,520 --> 00:05:15,360
directive that we uh that we are now

00:05:13,280 --> 00:05:17,680
going to replace is going to use a new

00:05:15,360 --> 00:05:19,440
base tag and we can find that you know

00:05:17,680 --> 00:05:21,680
shot 256 hash

00:05:19,440 --> 00:05:23,440
for it uh on docker hub or maybe even

00:05:21,680 --> 00:05:24,479
just by running docker images minus

00:05:23,440 --> 00:05:26,479
minus digest

00:05:24,479 --> 00:05:29,120
and that will show you if you've pulled

00:05:26,479 --> 00:05:30,960
it in what is the image digest for it so

00:05:29,120 --> 00:05:32,400
you can find it whatever you know makes

00:05:30,960 --> 00:05:34,720
sense but you can use it the

00:05:32,400 --> 00:05:36,320
the downside here that it's a little bit

00:05:34,720 --> 00:05:37,919
uh you know unreadable so if you want to

00:05:36,320 --> 00:05:39,840
maintain

00:05:37,919 --> 00:05:41,600
node images over time or docker images

00:05:39,840 --> 00:05:43,120
in general you're not really sure

00:05:41,600 --> 00:05:43,600
exactly which base image are you

00:05:43,120 --> 00:05:45,680
actually

00:05:43,600 --> 00:05:47,680
referring here so hey look at this

00:05:45,680 --> 00:05:49,600
amazing we can just replace

00:05:47,680 --> 00:05:52,000
uh uh you know that that shutdown but

00:05:49,600 --> 00:05:54,800
not really replace it but prepend it

00:05:52,000 --> 00:05:56,080
with an alias to what this actual image

00:05:54,800 --> 00:05:58,880
is coming from and that is

00:05:56,080 --> 00:06:00,960
uh you see this is node lts alpine so

00:05:58,880 --> 00:06:02,160
i'm using that base image as a tag but

00:06:00,960 --> 00:06:04,960
specifically

00:06:02,160 --> 00:06:06,080
the image build of the node version at

00:06:04,960 --> 00:06:08,720
that time at that time

00:06:06,080 --> 00:06:09,520
of the shot and this is gonna uh uh

00:06:08,720 --> 00:06:11,840
provide me

00:06:09,520 --> 00:06:13,440
all the time deterministic builds of the

00:06:11,840 --> 00:06:15,280
docker image

00:06:13,440 --> 00:06:16,800
moving on are we going to install

00:06:15,280 --> 00:06:18,479
dependencies the right way are we gonna

00:06:16,800 --> 00:06:20,800
do it the bad way let's see

00:06:18,479 --> 00:06:22,560
well first of all we started we started

00:06:20,800 --> 00:06:24,560
with our docker file the simplistic one

00:06:22,560 --> 00:06:25,280
with npm install now as you probably

00:06:24,560 --> 00:06:27,120
know from

00:06:25,280 --> 00:06:29,199
being in a developer this is not the

00:06:27,120 --> 00:06:31,280
best way of doing it you know it adds

00:06:29,199 --> 00:06:32,319
unneeded dependencies and security risks

00:06:31,280 --> 00:06:33,840
because you're pulling in depth

00:06:32,319 --> 00:06:35,520
dependency and other things like that

00:06:33,840 --> 00:06:36,560
it's inflating the image side you know

00:06:35,520 --> 00:06:39,680
why would you want to do it

00:06:36,560 --> 00:06:40,800
not really don't do this variant other

00:06:39,680 --> 00:06:42,560
which is you know

00:06:40,800 --> 00:06:43,840
an npm install and then updating to the

00:06:42,560 --> 00:06:45,280
latest version because you

00:06:43,840 --> 00:06:47,680
have no idea what you're going to be

00:06:45,280 --> 00:06:49,599
pulling in like i'm saying here

00:06:47,680 --> 00:06:51,520
please do not do this this is not a best

00:06:49,599 --> 00:06:53,280
practice at all

00:06:51,520 --> 00:06:55,840
did not need those dev dependencies you

00:06:53,280 --> 00:06:58,639
do not need that indeterministic way

00:06:55,840 --> 00:07:00,479
of pulling in images in now the thing is

00:06:58,639 --> 00:07:02,080
you could try and add the minus minus

00:07:00,479 --> 00:07:04,639
sprout at the end to kind of like

00:07:02,080 --> 00:07:06,240
uh you know pull only prod dependencies

00:07:04,639 --> 00:07:07,199
but it may surprise you with the

00:07:06,240 --> 00:07:08,800
dependencies that you'll

00:07:07,199 --> 00:07:10,720
that you will pull in during a ci

00:07:08,800 --> 00:07:12,160
environment because you know

00:07:10,720 --> 00:07:13,919
many things that can happen if you're

00:07:12,160 --> 00:07:16,479
not using a log file so

00:07:13,919 --> 00:07:16,960
if you want to do it the most proper way

00:07:16,479 --> 00:07:18,319
is

00:07:16,960 --> 00:07:20,240
you're going to pull in only the

00:07:18,319 --> 00:07:21,520
production dependencies but you are

00:07:20,240 --> 00:07:24,400
going also to pulling

00:07:21,520 --> 00:07:26,639
the uh uh you know to uh sorry not to

00:07:24,400 --> 00:07:29,039
pull in but to pin the dependencies

00:07:26,639 --> 00:07:30,960
using npmci to what you have in the log

00:07:29,039 --> 00:07:31,840
file and get deterministic builds this

00:07:30,960 --> 00:07:33,919
is by the way also

00:07:31,840 --> 00:07:35,199
faster than the other way of installing

00:07:33,919 --> 00:07:37,440
dependencies so

00:07:35,199 --> 00:07:39,520
what we got gonna get through that one

00:07:37,440 --> 00:07:42,479
now

00:07:39,520 --> 00:07:44,400
something that is uh you know i've seen

00:07:42,479 --> 00:07:46,720
happening in different packages

00:07:44,400 --> 00:07:48,000
is where we are optimizing the libraries

00:07:46,720 --> 00:07:48,479
and the way that we're building the

00:07:48,000 --> 00:07:50,400
image

00:07:48,479 --> 00:07:51,759
to actually work for production and what

00:07:50,400 --> 00:07:53,599
it actually means is

00:07:51,759 --> 00:07:55,440
there are a lot of expectations that

00:07:53,599 --> 00:07:57,280
some libraries may have

00:07:55,440 --> 00:07:58,479
uh that you may not know about in order

00:07:57,280 --> 00:08:02,000
to like kind of like

00:07:58,479 --> 00:08:03,360
uh toggle on performance and security

00:08:02,000 --> 00:08:05,360
improvement and optimization

00:08:03,360 --> 00:08:06,479
now what exactly does does this mean

00:08:05,360 --> 00:08:08,960
well if you

00:08:06,479 --> 00:08:10,160
wanted to do no damn uh production to

00:08:08,960 --> 00:08:12,960
kind of like tell the

00:08:10,160 --> 00:08:14,639
um the npm package manager to install

00:08:12,960 --> 00:08:18,000
only production dependencies

00:08:14,639 --> 00:08:19,280
that will work but that node and

00:08:18,000 --> 00:08:21,680
production only

00:08:19,280 --> 00:08:22,800
only lasts for that states for that

00:08:21,680 --> 00:08:25,039
state in the layer

00:08:22,800 --> 00:08:26,479
and that step in the docker file to pull

00:08:25,039 --> 00:08:27,919
to uh created the production

00:08:26,479 --> 00:08:30,720
dependencies

00:08:27,919 --> 00:08:31,440
when you run npm starter starter at the

00:08:30,720 --> 00:08:33,519
end

00:08:31,440 --> 00:08:35,200
it will still run in like when node and

00:08:33,519 --> 00:08:36,479
uh when nodes uh envis

00:08:35,200 --> 00:08:38,320
is kind of like in dev it's not in

00:08:36,479 --> 00:08:40,000
production mode now why you want to

00:08:38,320 --> 00:08:42,080
enable node.production for

00:08:40,000 --> 00:08:43,680
running the application in general is

00:08:42,080 --> 00:08:45,440
things like express where you know

00:08:43,680 --> 00:08:48,080
express will only enable

00:08:45,440 --> 00:08:50,080
some uh some caching and less virus

00:08:48,080 --> 00:08:51,440
error messages and other capabilities

00:08:50,080 --> 00:08:53,920
that's kind of like optimized for

00:08:51,440 --> 00:08:55,279
production only if no denver's running

00:08:53,920 --> 00:08:58,320
uh with production

00:08:55,279 --> 00:09:00,240
so there's a blog on this from uh daniel

00:08:58,320 --> 00:09:02,160
khan you know dated way way back

00:09:00,240 --> 00:09:03,600
about why this is important and there's

00:09:02,160 --> 00:09:05,440
probably a lot more sense

00:09:03,600 --> 00:09:07,360
but basically what it actually means for

00:09:05,440 --> 00:09:10,240
us is we want to install

00:09:07,360 --> 00:09:11,200
production npm dependencies with npmci

00:09:10,240 --> 00:09:13,839
minus minus

00:09:11,200 --> 00:09:14,399
only production and you know move that

00:09:13,839 --> 00:09:16,399
node and

00:09:14,399 --> 00:09:18,399
outside of the node install process to

00:09:16,399 --> 00:09:20,560
be a generic way of basically building

00:09:18,399 --> 00:09:22,640
and running the application

00:09:20,560 --> 00:09:24,320
okay so once we've got this let's talk

00:09:22,640 --> 00:09:27,200
about this other principle

00:09:24,320 --> 00:09:29,360
of list privilege uh which is a long

00:09:27,200 --> 00:09:30,720
time security control from you know the

00:09:29,360 --> 00:09:32,800
early days of unix

00:09:30,720 --> 00:09:34,160
that we should always follow regardless

00:09:32,800 --> 00:09:35,279
of you know containerization and

00:09:34,160 --> 00:09:36,959
serverless and whatever

00:09:35,279 --> 00:09:39,200
this is the best practice now what do i

00:09:36,959 --> 00:09:40,800
mean by that so

00:09:39,200 --> 00:09:42,320
we've got into this state of the docker

00:09:40,800 --> 00:09:43,839
file which is already you know much

00:09:42,320 --> 00:09:45,680
better than the simplistic approach of

00:09:43,839 --> 00:09:46,800
it and we've probably already remediated

00:09:45,680 --> 00:09:48,800
some vulnerabilities

00:09:46,800 --> 00:09:50,000
and risks but the thing is do you know

00:09:48,800 --> 00:09:52,560
which process is

00:09:50,000 --> 00:09:53,760
actually used which uh owner of the of

00:09:52,560 --> 00:09:55,680
the the user owner

00:09:53,760 --> 00:09:57,360
of the process to run the runtime not

00:09:55,680 --> 00:09:58,399
really sure now why am i asking you this

00:09:57,360 --> 00:10:00,320
because

00:09:58,399 --> 00:10:01,680
let's see some examples of how this can

00:10:00,320 --> 00:10:04,560
turn really really bad

00:10:01,680 --> 00:10:05,360
so maybe you know a better way of uh

00:10:04,560 --> 00:10:07,760
using uh

00:10:05,360 --> 00:10:09,920
you know some insecure apis like this

00:10:07,760 --> 00:10:12,560
right like maybe there's a child process

00:10:09,920 --> 00:10:12,959
exec uh which uh uh who knows you know

00:10:12,560 --> 00:10:15,040
uh

00:10:12,959 --> 00:10:17,839
who owns this command once it's running

00:10:15,040 --> 00:10:19,839
off inside a container

00:10:17,839 --> 00:10:20,880
more than this you know let's say you

00:10:19,839 --> 00:10:24,000
have this uh

00:10:20,880 --> 00:10:25,839
worker node.js application image

00:10:24,000 --> 00:10:27,600
that listens on a cue and a message

00:10:25,839 --> 00:10:28,399
queue to basically do offline image

00:10:27,600 --> 00:10:29,839
processing

00:10:28,399 --> 00:10:32,160
and you use it you see i'm not even

00:10:29,839 --> 00:10:33,760
using child's process here i'm using pdf

00:10:32,160 --> 00:10:34,240
image it's an open source package that i

00:10:33,760 --> 00:10:35,839
found

00:10:34,240 --> 00:10:37,519
that allows me to do you know image

00:10:35,839 --> 00:10:39,600
manipulation so i'm using this one

00:10:37,519 --> 00:10:40,959
this is on my node worker containerized

00:10:39,600 --> 00:10:42,560
working off of a queue

00:10:40,959 --> 00:10:44,800
handling billions of messages that i

00:10:42,560 --> 00:10:47,440
need to like basically resize

00:10:44,800 --> 00:10:47,839
but you know what if uh this pdf file

00:10:47,440 --> 00:10:50,000
path

00:10:47,839 --> 00:10:51,440
is now user controlled right like

00:10:50,000 --> 00:10:52,399
something like this what if someone

00:10:51,440 --> 00:10:54,880
could actually

00:10:52,399 --> 00:10:55,839
uh uh you know add that as a payload

00:10:54,880 --> 00:10:58,800
that manifests

00:10:55,839 --> 00:10:59,600
into this uh into this uh uh uh you know

00:10:58,800 --> 00:11:02,000
uh

00:10:59,600 --> 00:11:02,880
library called to pdf image leave now

00:11:02,000 --> 00:11:06,880
the thing is

00:11:02,880 --> 00:11:08,959
that exactly this kind of um of a

00:11:06,880 --> 00:11:10,800
vulnerability really happened for pdf

00:11:08,959 --> 00:11:12,880
image and for other images now

00:11:10,800 --> 00:11:15,600
why is it happening because you may not

00:11:12,880 --> 00:11:17,279
know this but behind the scene pdf image

00:11:15,600 --> 00:11:18,640
you know for you it's an obstruction

00:11:17,279 --> 00:11:21,120
for what it does behind the scene the

00:11:18,640 --> 00:11:21,519
implementation detail is it's spawning

00:11:21,120 --> 00:11:23,680
that

00:11:21,519 --> 00:11:25,440
uh that exact you know insecure api

00:11:23,680 --> 00:11:27,600
child process exec

00:11:25,440 --> 00:11:29,200
command line to basically use the

00:11:27,600 --> 00:11:32,320
convert

00:11:29,200 --> 00:11:33,920
utility to make image manipulation so

00:11:32,320 --> 00:11:35,360
now that you know this you are kind of

00:11:33,920 --> 00:11:37,680
like a bit more worried of

00:11:35,360 --> 00:11:40,000
about these issues and you know what we

00:11:37,680 --> 00:11:42,079
want to do here is kind of like maintain

00:11:40,000 --> 00:11:43,839
and containerize this is a bit of a pun

00:11:42,079 --> 00:11:45,839
but containerized kind of like the the

00:11:43,839 --> 00:11:48,560
blast radius of what could go wrong so

00:11:45,839 --> 00:11:49,920
instead of running now that uh that

00:11:48,560 --> 00:11:51,920
command injection

00:11:49,920 --> 00:11:53,279
in of pdf image vulnerability if it

00:11:51,920 --> 00:11:55,839
happened running that

00:11:53,279 --> 00:11:56,959
as the root user which is what docker

00:11:55,839 --> 00:11:59,279
defaults so if you don't

00:11:56,959 --> 00:12:01,200
don't choose anything we now want to use

00:11:59,279 --> 00:12:03,040
user node which is less privilege and

00:12:01,200 --> 00:12:03,600
has less privileges and can do a lot of

00:12:03,040 --> 00:12:06,480
things

00:12:03,600 --> 00:12:08,079
inside the um inside the uh the

00:12:06,480 --> 00:12:09,920
container itself when it's running

00:12:08,079 --> 00:12:11,120
the thing is that copy command that i

00:12:09,920 --> 00:12:12,880
showed you that was

00:12:11,120 --> 00:12:14,320
you know kind of like bad before is a

00:12:12,880 --> 00:12:16,160
bad practice

00:12:14,320 --> 00:12:18,160
it's because maybe you're scoping

00:12:16,160 --> 00:12:19,519
sensitive files but now because we also

00:12:18,160 --> 00:12:21,760
want to be able to

00:12:19,519 --> 00:12:23,360
uh to run the user as a least privileged

00:12:21,760 --> 00:12:25,519
one we also make sure

00:12:23,360 --> 00:12:27,440
uh we need to make sure that all the

00:12:25,519 --> 00:12:30,160
files related to the application itself

00:12:27,440 --> 00:12:31,839
are not owned by root but actually owned

00:12:30,160 --> 00:12:33,839
by the user itself so

00:12:31,839 --> 00:12:34,880
now this is a much better state where

00:12:33,839 --> 00:12:37,040
both copy

00:12:34,880 --> 00:12:38,959
and the user directive are aligned and

00:12:37,040 --> 00:12:40,959
giving us you know least privileges for

00:12:38,959 --> 00:12:44,399
the user

00:12:40,959 --> 00:12:44,800
what about those other best practice or

00:12:44,399 --> 00:12:47,040
you know

00:12:44,800 --> 00:12:49,440
uh most common mistakes that i've seen

00:12:47,040 --> 00:12:50,399
that i see with blog articles about you

00:12:49,440 --> 00:12:52,160
know how

00:12:50,399 --> 00:12:54,320
they containerize node.js applications

00:12:52,160 --> 00:12:56,800
when running node containers

00:12:54,320 --> 00:12:58,880
is how they invoke the node process

00:12:56,800 --> 00:13:01,120
itself as a process inside the container

00:12:58,880 --> 00:13:02,880
itself so how many docker files have you

00:13:01,120 --> 00:13:03,839
seen in tutorials and blogs that

00:13:02,880 --> 00:13:06,639
recommend

00:13:03,839 --> 00:13:07,440
this way of of executing your node

00:13:06,639 --> 00:13:09,360
runtime right

00:13:07,440 --> 00:13:10,959
probably a lot a lot of tutorials do

00:13:09,360 --> 00:13:12,240
maybe you're even doing this today you

00:13:10,959 --> 00:13:13,120
know in your team in your production

00:13:12,240 --> 00:13:14,880
environment so

00:13:13,120 --> 00:13:16,399
here's why not to do it and what could

00:13:14,880 --> 00:13:19,200
go wrong the problem is

00:13:16,399 --> 00:13:20,160
that while this works and is okay to

00:13:19,200 --> 00:13:22,160
experiment with

00:13:20,160 --> 00:13:24,000
it's a bad choice for production node.js

00:13:22,160 --> 00:13:24,959
containers and this is a bad way of

00:13:24,000 --> 00:13:26,800
doing it

00:13:24,959 --> 00:13:28,320
this is you know might you might think

00:13:26,800 --> 00:13:29,920
this is a better way but it's also a bad

00:13:28,320 --> 00:13:32,399
way of doing it like that with

00:13:29,920 --> 00:13:34,000
you know with uh the square brackets you

00:13:32,399 --> 00:13:35,920
know you maybe think of you know

00:13:34,000 --> 00:13:37,040
invoking the note process directly like

00:13:35,920 --> 00:13:39,920
this right

00:13:37,040 --> 00:13:41,440
nope this is not helpful either and even

00:13:39,920 --> 00:13:43,839
if you're trying to wrap it up

00:13:41,440 --> 00:13:45,199
uh with a shell script unless you you

00:13:43,839 --> 00:13:46,720
knew what to do in that show script

00:13:45,199 --> 00:13:49,120
which i'll get you in a second

00:13:46,720 --> 00:13:51,040
uh this is also a bad way of running and

00:13:49,120 --> 00:13:53,519
spawning your node containers now why

00:13:51,040 --> 00:13:54,079
is it okay this is all bad to understand

00:13:53,519 --> 00:13:55,760
why this

00:13:54,079 --> 00:13:57,920
is uh you know why this is bad we need

00:13:55,760 --> 00:14:01,440
to understand the bigger picture of how

00:13:57,920 --> 00:14:02,800
node containers run in a in say like a

00:14:01,440 --> 00:14:03,440
bigger environment and what i mean by

00:14:02,800 --> 00:14:05,760
that is

00:14:03,440 --> 00:14:06,720
there's an orchestration engine such as

00:14:05,760 --> 00:14:08,800
um

00:14:06,720 --> 00:14:09,760
as you can see here docker swam or

00:14:08,800 --> 00:14:11,600
kubernetes

00:14:09,760 --> 00:14:13,600
or even just you know docker engine

00:14:11,600 --> 00:14:15,760
itself now it needs a way

00:14:13,600 --> 00:14:16,880
to you know you know generally speaking

00:14:15,760 --> 00:14:18,959
the environment right

00:14:16,880 --> 00:14:20,399
needs a way to send signals to the

00:14:18,959 --> 00:14:22,079
process in the container to let the

00:14:20,399 --> 00:14:22,480
container know that maybe it should die

00:14:22,079 --> 00:14:24,480
because

00:14:22,480 --> 00:14:26,079
hey we want to do some a b testing we

00:14:24,480 --> 00:14:28,240
want to you know roll

00:14:26,079 --> 00:14:30,000
it roll uh uh roll a new version in so

00:14:28,240 --> 00:14:31,760
we need to kill some containers maybe

00:14:30,000 --> 00:14:33,120
they're overcapacity whatever is the

00:14:31,760 --> 00:14:35,760
reason for it you know

00:14:33,120 --> 00:14:36,160
these orchestration engines need a way

00:14:35,760 --> 00:14:38,079
to

00:14:36,160 --> 00:14:39,440
signal right to applications to

00:14:38,079 --> 00:14:42,399
terminate them so they send

00:14:39,440 --> 00:14:44,880
signals like sig german cql and whatever

00:14:42,399 --> 00:14:47,600
and the caveat here is kind of twofold

00:14:44,880 --> 00:14:49,760
firstly we are indirectly running the

00:14:47,600 --> 00:14:51,120
node application by directly invoking

00:14:49,760 --> 00:14:53,040
the npm client so

00:14:51,120 --> 00:14:54,399
what it means is you know when we are

00:14:53,040 --> 00:14:56,320
running npm start

00:14:54,399 --> 00:14:58,399
npm itself as kind of like the packet

00:14:56,320 --> 00:15:00,959
manager the cli kind of like

00:14:58,399 --> 00:15:03,120
spawns a new a new child process for the

00:15:00,959 --> 00:15:04,959
node runtime for your application

00:15:03,120 --> 00:15:06,560
but who's to say that it's going to uh

00:15:04,959 --> 00:15:08,399
forward all the events that it's

00:15:06,560 --> 00:15:10,079
that it's getting into that application

00:15:08,399 --> 00:15:12,160
well actually it doesn't if you do not

00:15:10,079 --> 00:15:13,279
believe me let me show you how it's a

00:15:12,160 --> 00:15:16,399
very simple

00:15:13,279 --> 00:15:18,320
experiment to to set up add this process

00:15:16,399 --> 00:15:19,040
on you know sig up which is one of the

00:15:18,320 --> 00:15:21,440
signals

00:15:19,040 --> 00:15:23,279
uh that an application can receive add

00:15:21,440 --> 00:15:24,240
this code to your very simplistic you

00:15:23,279 --> 00:15:26,720
know node

00:15:24,240 --> 00:15:28,000
you know uh web web application then

00:15:26,720 --> 00:15:29,839
using docker kill

00:15:28,000 --> 00:15:31,440
you can actually the cli docker itself

00:15:29,839 --> 00:15:33,199
you can actually send minus minus signal

00:15:31,440 --> 00:15:34,880
and provide a specific signal to a

00:15:33,199 --> 00:15:36,720
running container if you do it

00:15:34,880 --> 00:15:38,639
you can see if you if you run that you

00:15:36,720 --> 00:15:41,040
can see that uh just like for

00:15:38,639 --> 00:15:42,480
in my in my screen here just like it's

00:15:41,040 --> 00:15:44,480
kind of like waiting for interaction

00:15:42,480 --> 00:15:46,480
that's exactly what's happening because

00:15:44,480 --> 00:15:48,480
what is happening the node runtime will

00:15:46,480 --> 00:15:50,320
not show you any console logs that

00:15:48,480 --> 00:15:52,079
that it received the event because the

00:15:50,320 --> 00:15:54,240
npm cli in that case

00:15:52,079 --> 00:15:55,680
swallows all of those events and that's

00:15:54,240 --> 00:15:59,120
not something we want

00:15:55,680 --> 00:16:00,160
so the previous example we had this npm

00:15:59,120 --> 00:16:02,480
wrapping you know

00:16:00,160 --> 00:16:03,199
the actual the actual node runtime and

00:16:02,480 --> 00:16:05,360
not for

00:16:03,199 --> 00:16:06,399
forwarding all the signals to it now we

00:16:05,360 --> 00:16:08,720
made a change and

00:16:06,399 --> 00:16:10,320
are we starting the process directly or

00:16:08,720 --> 00:16:12,160
do we what's happening here so

00:16:10,320 --> 00:16:13,920
let's open a shell in the in this

00:16:12,160 --> 00:16:14,240
running container and see what we have

00:16:13,920 --> 00:16:15,600
now

00:16:14,240 --> 00:16:17,360
it looks like we started the node

00:16:15,600 --> 00:16:20,160
runtime directly that

00:16:17,360 --> 00:16:20,720
cmd bracket notation actually tells you

00:16:20,160 --> 00:16:23,759
uh

00:16:20,720 --> 00:16:24,800
that uh docker to sorry tells docker to

00:16:23,759 --> 00:16:27,279
execute a process

00:16:24,800 --> 00:16:29,759
uh and wrapping it with a shell so does

00:16:27,279 --> 00:16:31,839
the shell actually forward this sight

00:16:29,759 --> 00:16:33,120
uh signal to it as you can see here in

00:16:31,839 --> 00:16:35,360
my screenshot even though that is

00:16:33,120 --> 00:16:37,040
process id one

00:16:35,360 --> 00:16:39,199
it's owned by root by the way which is

00:16:37,040 --> 00:16:39,759
as we talked before a bad one but this

00:16:39,199 --> 00:16:41,759
uh

00:16:39,759 --> 00:16:43,279
shell minus c running this and wrapping

00:16:41,759 --> 00:16:44,480
it is not really actually forwarding the

00:16:43,279 --> 00:16:46,079
event so

00:16:44,480 --> 00:16:48,320
let's try a different form this is

00:16:46,079 --> 00:16:51,040
called the exact form where we are using

00:16:48,320 --> 00:16:51,920
square bracket notation and trying now

00:16:51,040 --> 00:16:53,440
to run this

00:16:51,920 --> 00:16:55,680
uh to run this command and see what's

00:16:53,440 --> 00:16:56,240
happening well what's happening when you

00:16:55,680 --> 00:16:58,480
run it

00:16:56,240 --> 00:17:00,560
entirely like this directly it means

00:16:58,480 --> 00:17:02,720
that it is running as process id one

00:17:00,560 --> 00:17:04,640
that effectively take uh some of the

00:17:02,720 --> 00:17:06,000
responsibilities of an init system

00:17:04,640 --> 00:17:07,439
inside a running container

00:17:06,000 --> 00:17:08,799
what it typically means is that it

00:17:07,439 --> 00:17:10,559
should be responsible for like

00:17:08,799 --> 00:17:13,280
initializing operating system

00:17:10,559 --> 00:17:15,520
uh processes but the kernel the linux

00:17:13,280 --> 00:17:16,319
kernel treats process id1 in a very

00:17:15,520 --> 00:17:19,039
different way

00:17:16,319 --> 00:17:20,480
then sorry then it treats other process

00:17:19,039 --> 00:17:22,240
identifiers and so

00:17:20,480 --> 00:17:23,679
this special treatment for the car from

00:17:22,240 --> 00:17:26,240
the kernel means that

00:17:23,679 --> 00:17:26,959
uh the handling of things like subterm

00:17:26,240 --> 00:17:28,960
signals

00:17:26,959 --> 00:17:31,039
is is different then maybe it won't even

00:17:28,960 --> 00:17:33,360
invoke any fallback behavior

00:17:31,039 --> 00:17:35,280
that could kill the process so you know

00:17:33,360 --> 00:17:36,960
this is a recommendation from the node

00:17:35,280 --> 00:17:37,280
the official node.js docker working

00:17:36,960 --> 00:17:40,240
group

00:17:37,280 --> 00:17:42,400
to tell you not to run a node inside a

00:17:40,240 --> 00:17:45,360
container as process id1 so that's

00:17:42,400 --> 00:17:47,280
also why not to do it we're getting to

00:17:45,360 --> 00:17:49,039
what you should be doing

00:17:47,280 --> 00:17:51,200
and that is you need to use a

00:17:49,039 --> 00:17:51,919
lightweight process scheduler to handle

00:17:51,200 --> 00:17:53,679
the events

00:17:51,919 --> 00:17:55,760
something like dump init this is the

00:17:53,679 --> 00:17:57,520
name of a tool of a binary

00:17:55,760 --> 00:17:59,360
that is statically linked very uh you

00:17:57,520 --> 00:18:01,120
know very has a very small footprint

00:17:59,360 --> 00:18:03,120
you know very easy to work with and it's

00:18:01,120 --> 00:18:05,280
a good helper for this job so if you're

00:18:03,120 --> 00:18:06,960
spawning a node.js process like this

00:18:05,280 --> 00:18:09,520
you'll also notice that i i

00:18:06,960 --> 00:18:11,360
needed to install the dominated my um in

00:18:09,520 --> 00:18:12,720
my alpine container here and we're

00:18:11,360 --> 00:18:14,799
taking advantage of

00:18:12,720 --> 00:18:16,320
image layer caching here and what we're

00:18:14,799 --> 00:18:18,080
doing here is now

00:18:16,320 --> 00:18:20,000
making sure that dumping it is running

00:18:18,080 --> 00:18:21,760
and when it gets uh signals it actually

00:18:20,000 --> 00:18:23,600
forwards them to the node process so it

00:18:21,760 --> 00:18:26,080
actually treats them correctly

00:18:23,600 --> 00:18:28,480
and this also relates to the fact that

00:18:26,080 --> 00:18:30,640
we need the node.js application to

00:18:28,480 --> 00:18:32,480
receive interrupt signals like sigint

00:18:30,640 --> 00:18:34,880
and and control c like that

00:18:32,480 --> 00:18:36,640
and it will cause an up you know it will

00:18:34,880 --> 00:18:37,200
kill once it gets that it'll actually

00:18:36,640 --> 00:18:40,240
kill

00:18:37,200 --> 00:18:41,679
um the node running uh the container

00:18:40,240 --> 00:18:44,240
running the node application

00:18:41,679 --> 00:18:45,840
unless we've set some kind of graceful

00:18:44,240 --> 00:18:49,120
shutdown because we want

00:18:45,840 --> 00:18:49,600
all the uh current uh connectivity the

00:18:49,120 --> 00:18:51,360
the

00:18:49,600 --> 00:18:53,200
the requests you know coming in and you

00:18:51,360 --> 00:18:54,720
know in the container itself we actually

00:18:53,200 --> 00:18:56,640
want don't want to like enter into

00:18:54,720 --> 00:18:58,400
abruptly kill them actually let them

00:18:56,640 --> 00:18:58,960
finish you know stop new traffic from

00:18:58,400 --> 00:19:01,520
coming in

00:18:58,960 --> 00:19:02,240
how we're doing that is the ability of

00:19:01,520 --> 00:19:05,360
actually

00:19:02,240 --> 00:19:08,080
making sure that the container itself

00:19:05,360 --> 00:19:10,720
is able to gracefully shut down you know

00:19:08,080 --> 00:19:11,600
when it gets uh this uh you know sigint

00:19:10,720 --> 00:19:13,120
or whatever is

00:19:11,600 --> 00:19:14,799
sig term whatever is sent to it to like

00:19:13,120 --> 00:19:16,799
stop the container

00:19:14,799 --> 00:19:18,320
needs to clean up resources needs to

00:19:16,799 --> 00:19:19,440
free up memory needs to you know

00:19:18,320 --> 00:19:21,120
whatever it needs to do

00:19:19,440 --> 00:19:22,640
you know properly you know close

00:19:21,120 --> 00:19:24,720
database connections

00:19:22,640 --> 00:19:27,200
and at that time like until all the

00:19:24,720 --> 00:19:30,320
connections have been freed like stop

00:19:27,200 --> 00:19:32,480
finished all the interactions only then

00:19:30,320 --> 00:19:33,760
the container will will drop off and not

00:19:32,480 --> 00:19:36,799
abruptly kill some

00:19:33,760 --> 00:19:38,000
uh you know some uh some uh some

00:19:36,799 --> 00:19:39,760
connections for people

00:19:38,000 --> 00:19:41,120
uh uh you know in the middle of things

00:19:39,760 --> 00:19:43,600
so this is all about

00:19:41,120 --> 00:19:44,799
uh container handling and events and all

00:19:43,600 --> 00:19:45,760
of those best practices that we've

00:19:44,799 --> 00:19:47,440
talked so far

00:19:45,760 --> 00:19:49,760
and i'm getting into you know why are

00:19:47,440 --> 00:19:51,919
you not fixing the vulnerabilities

00:19:49,760 --> 00:19:52,880
in your docker images for uh you know

00:19:51,919 --> 00:19:54,880
for your containers

00:19:52,880 --> 00:19:56,880
and what i mean by that is now docker

00:19:54,880 --> 00:19:58,160
has this scan command which you could

00:19:56,880 --> 00:19:59,919
use it's built into it

00:19:58,160 --> 00:20:01,760
and you could use you know docker scan

00:19:59,919 --> 00:20:03,280
for example node 14 whatever

00:20:01,760 --> 00:20:04,400
if you want it and find what

00:20:03,280 --> 00:20:05,600
vulnerabilities you have in the

00:20:04,400 --> 00:20:07,360
container now

00:20:05,600 --> 00:20:09,360
granted some of finding some of these

00:20:07,360 --> 00:20:11,440
vulnerabilities is kind of hard and

00:20:09,360 --> 00:20:12,799
uh you know it might mean that we need

00:20:11,440 --> 00:20:15,440
to address them

00:20:12,799 --> 00:20:16,000
but if you know this gives you already

00:20:15,440 --> 00:20:17,600
some

00:20:16,000 --> 00:20:20,080
really interesting input for example it

00:20:17,600 --> 00:20:21,600
shows you you know where is it coming

00:20:20,080 --> 00:20:22,640
from this is a vulnerability that is

00:20:21,600 --> 00:20:25,120
coming from

00:20:22,640 --> 00:20:26,720
uh image magic so this is you know which

00:20:25,120 --> 00:20:28,400
library is actually introducing it

00:20:26,720 --> 00:20:30,240
furthermore it's telling you where in

00:20:28,400 --> 00:20:31,440
the docker image it is actually getting

00:20:30,240 --> 00:20:33,679
introduced did you do

00:20:31,440 --> 00:20:34,720
specifically upgrade install image magic

00:20:33,679 --> 00:20:37,679
if this was like a

00:20:34,720 --> 00:20:39,120
debian or ubuntu one or is it inside the

00:20:37,679 --> 00:20:40,559
base image that is now

00:20:39,120 --> 00:20:42,880
built with no that the fact that you're

00:20:40,559 --> 00:20:44,480
just using node 14 or node latest just

00:20:42,880 --> 00:20:46,960
introduces that base image

00:20:44,480 --> 00:20:48,480
and so you know this is very worrisome

00:20:46,960 --> 00:20:50,159
and you know when you when you scan

00:20:48,480 --> 00:20:51,919
docker images you may find

00:20:50,159 --> 00:20:53,679
hundreds as we've seen before

00:20:51,919 --> 00:20:54,480
vulnerabilities and i know what you're

00:20:53,679 --> 00:20:55,840
asking now like

00:20:54,480 --> 00:20:57,520
what is the worst that can happen

00:20:55,840 --> 00:20:59,760
because i have to you know accept

00:20:57,520 --> 00:21:01,280
maybe some risk and i can't handle you

00:20:59,760 --> 00:21:02,799
know mitigating maybe 600

00:21:01,280 --> 00:21:03,600
vulnerabilities or where do i start with

00:21:02,799 --> 00:21:05,280
doing that

00:21:03,600 --> 00:21:06,880
let's see what can happen first let's do

00:21:05,280 --> 00:21:07,760
let's do a bit of a demo and understand

00:21:06,880 --> 00:21:09,600
what is happening

00:21:07,760 --> 00:21:12,000
and what would happen so for that what

00:21:09,600 --> 00:21:15,200
i'm going to do next is

00:21:12,000 --> 00:21:16,960
let me go ahead and ensure my screen

00:21:15,200 --> 00:21:20,400
here and uh my terminal

00:21:16,960 --> 00:21:22,320
i'll make that a little bit uh

00:21:20,400 --> 00:21:23,520
yeah font size for you to see it so what

00:21:22,320 --> 00:21:26,880
i want to do first is

00:21:23,520 --> 00:21:28,720
run a container um docker on uh this

00:21:26,880 --> 00:21:29,600
container called rc now what that

00:21:28,720 --> 00:21:31,120
actually is

00:21:29,600 --> 00:21:33,760
you're going to move on to this code

00:21:31,120 --> 00:21:35,600
snippet here uh on vs code you can see

00:21:33,760 --> 00:21:37,760
this is a node container running on node

00:21:35,600 --> 00:21:39,280
six one zero wizzy right we've traveled

00:21:37,760 --> 00:21:39,840
back in time to node six so i can show

00:21:39,280 --> 00:21:41,120
you some

00:21:39,840 --> 00:21:42,960
some vulnerabilities and like some

00:21:41,120 --> 00:21:44,000
interesting one as well uh it's a very

00:21:42,960 --> 00:21:47,120
simplistic file like

00:21:44,000 --> 00:21:48,640
nothing here is uh uh is of issue and uh

00:21:47,120 --> 00:21:50,159
um i mean there's a lot of issues here

00:21:48,640 --> 00:21:51,760
you just talked about best practices but

00:21:50,159 --> 00:21:52,880
for us this is actually working for the

00:21:51,760 --> 00:21:54,880
container itself

00:21:52,880 --> 00:21:56,640
and uh you can see for example how i'm

00:21:54,880 --> 00:21:59,200
importing express and multer

00:21:56,640 --> 00:22:00,799
uh to be able to upload images so this

00:21:59,200 --> 00:22:02,960
application is going to be

00:22:00,799 --> 00:22:04,960
giving me the ability to upload images

00:22:02,960 --> 00:22:09,919
on port 3112

00:22:04,960 --> 00:22:12,080
and uh there's actually no uh i'd say no

00:22:09,919 --> 00:22:13,520
security in practices bad practices from

00:22:12,080 --> 00:22:15,840
my code this is just

00:22:13,520 --> 00:22:17,039
me using exec file which is a pretty

00:22:15,840 --> 00:22:18,880
secure api

00:22:17,039 --> 00:22:20,720
to basically pass the command itself and

00:22:18,880 --> 00:22:23,919
then any any sort of

00:22:20,720 --> 00:22:25,520
um arguments to it so once they do it

00:22:23,919 --> 00:22:27,200
um let's see if the app is actually

00:22:25,520 --> 00:22:29,760
running now

00:22:27,200 --> 00:22:31,200
three one one two it's on if i remember

00:22:29,760 --> 00:22:32,880
correctly on flash public yeah

00:22:31,200 --> 00:22:34,159
so this is it this is the application

00:22:32,880 --> 00:22:35,280
imagine this is you know not even

00:22:34,159 --> 00:22:37,200
interactive this is just

00:22:35,280 --> 00:22:39,200
some worker thread processing images

00:22:37,200 --> 00:22:40,400
what i want to do is now upload an image

00:22:39,200 --> 00:22:42,720
now before i upload an image i want to

00:22:40,400 --> 00:22:44,960
show you a little bit more uh inside it

00:22:42,720 --> 00:22:46,320
so i'm going to move into uh the

00:22:44,960 --> 00:22:47,679
container itself i'm going to actually

00:22:46,320 --> 00:22:49,600
uh kind of like ssh in

00:22:47,679 --> 00:22:50,880
and if so to say i'm opening a terminal

00:22:49,600 --> 00:22:52,240
and showing you what it looks like

00:22:50,880 --> 00:22:53,120
inside the container you can see that

00:22:52,240 --> 00:22:55,440
i'm already in the

00:22:53,120 --> 00:22:56,480
user src goof uh i'm in the goof

00:22:55,440 --> 00:22:59,600
application here

00:22:56,480 --> 00:23:01,440
um um um uh container

00:22:59,600 --> 00:23:03,520
running and i can run you know cut

00:23:01,440 --> 00:23:04,799
server.js so you could see the actual

00:23:03,520 --> 00:23:06,080
uh you know code it's you know very

00:23:04,799 --> 00:23:07,840
similar exactly what i showed you before

00:23:06,080 --> 00:23:09,200
right this is the application working so

00:23:07,840 --> 00:23:11,039
let me clear that up

00:23:09,200 --> 00:23:12,320
and uh show you the files again of what

00:23:11,039 --> 00:23:13,039
actually exists here what i'm going to

00:23:12,320 --> 00:23:14,480
do now

00:23:13,039 --> 00:23:16,400
is upload an image right like you would

00:23:14,480 --> 00:23:17,840
expect any application uh you know to

00:23:16,400 --> 00:23:20,799
allow you to upload images

00:23:17,840 --> 00:23:23,280
uh so rce1 let's see what's going on

00:23:20,799 --> 00:23:26,880
here rce1

00:23:23,280 --> 00:23:29,919
rc1 jpeg i'm gonna upload this one in

00:23:26,880 --> 00:23:29,919
let me resize it

00:23:30,000 --> 00:23:34,000
it looks like it was successful and i

00:23:32,400 --> 00:23:35,440
can go ahead and upload a new one that's

00:23:34,000 --> 00:23:37,520
great this is a great application it's

00:23:35,440 --> 00:23:39,520
it's resizing for me to make it

00:23:37,520 --> 00:23:41,520
you know thumbnail size that i want and

00:23:39,520 --> 00:23:44,480
so on but what's actually happening

00:23:41,520 --> 00:23:45,679
is let's see if if i'm looking at the

00:23:44,480 --> 00:23:47,039
list of files here

00:23:45,679 --> 00:23:48,320
is you could see there's a bit of a

00:23:47,039 --> 00:23:49,120
discrepancy i don't know if you caught

00:23:48,320 --> 00:23:52,240
it first but

00:23:49,120 --> 00:23:53,360
look at this may 16 rce1 i've now

00:23:52,240 --> 00:23:55,279
basically

00:23:53,360 --> 00:23:57,440
just uploading by uploading a file i

00:23:55,279 --> 00:23:59,200
created a new file i created i

00:23:57,440 --> 00:24:00,559
i spawned the command this is command

00:23:59,200 --> 00:24:02,960
injection

00:24:00,559 --> 00:24:04,799
running inside my container and creating

00:24:02,960 --> 00:24:05,520
a new file now why did it actually

00:24:04,799 --> 00:24:07,679
happen

00:24:05,520 --> 00:24:08,880
because i have this exploits here rce1

00:24:07,679 --> 00:24:10,400
and if i show you what's happening

00:24:08,880 --> 00:24:12,000
inside you can see that it's not really

00:24:10,400 --> 00:24:12,720
a regular jpeg image but it is

00:24:12,000 --> 00:24:15,760
acceptable

00:24:12,720 --> 00:24:17,360
to be manipulated uh by the convert

00:24:15,760 --> 00:24:19,360
application the image magic one that

00:24:17,360 --> 00:24:21,919
exists inside this node

00:24:19,360 --> 00:24:22,960
six one zero whatever wizzy container

00:24:21,919 --> 00:24:24,720
this base image

00:24:22,960 --> 00:24:26,320
and what i'm doing here i'm just giving

00:24:24,720 --> 00:24:29,200
it some uh some commands

00:24:26,320 --> 00:24:30,320
and i'm um sorry i'm concatenating this

00:24:29,200 --> 00:24:32,720
rce1

00:24:30,320 --> 00:24:34,000
to actually make it uh you know touch a

00:24:32,720 --> 00:24:35,279
new file create a new file

00:24:34,000 --> 00:24:37,440
the same way i could just you know

00:24:35,279 --> 00:24:38,960
create reverse shell you know do rmina

00:24:37,440 --> 00:24:40,480
sorry whatever i want to do on this

00:24:38,960 --> 00:24:42,960
on this container i can now do it

00:24:40,480 --> 00:24:46,640
because of the ability of running uh

00:24:42,960 --> 00:24:47,760
running uh container commands on this

00:24:46,640 --> 00:24:50,080
running container

00:24:47,760 --> 00:24:51,600
so this is pretty you know this is

00:24:50,080 --> 00:24:53,520
pretty significant and

00:24:51,600 --> 00:24:55,000
you know this is it like what do you do

00:24:53,520 --> 00:24:57,440
now right now you found

00:24:55,000 --> 00:24:59,440
624 vulnerabilities in the container

00:24:57,440 --> 00:25:01,679
what do you do this is kind of hard

00:24:59,440 --> 00:25:03,520
maybe maybe not let's see the actual

00:25:01,679 --> 00:25:05,440
full if you provide the docker scan with

00:25:03,520 --> 00:25:07,520
your docker file the actual full input

00:25:05,440 --> 00:25:10,080
that i've saved from you seeing before

00:25:07,520 --> 00:25:11,360
is this actually at the end of it after

00:25:10,080 --> 00:25:12,799
giving you all of the vulnerabilities

00:25:11,360 --> 00:25:13,679
and all of the accounts it actually

00:25:12,799 --> 00:25:15,919
tells you

00:25:13,679 --> 00:25:17,039
all of the uh i'd say the alternative

00:25:15,919 --> 00:25:18,880
based images

00:25:17,039 --> 00:25:20,720
that you could actually transition to

00:25:18,880 --> 00:25:21,279
and if you would transition to one of

00:25:20,720 --> 00:25:23,520
them

00:25:21,279 --> 00:25:25,440
it would actually give you uh some kind

00:25:23,520 --> 00:25:28,159
of uh i'd say

00:25:25,440 --> 00:25:29,679
um some kind of like a less

00:25:28,159 --> 00:25:32,640
vulnerability footprint

00:25:29,679 --> 00:25:34,480
if you move to them so if docker uh node

00:25:32,640 --> 00:25:37,679
uh my current image docker uh

00:25:34,480 --> 00:25:38,799
node 1410 has 624 vulnerabilities like

00:25:37,679 --> 00:25:42,080
i'm seeing here

00:25:38,799 --> 00:25:42,799
actually if i move to node 14 16 buster

00:25:42,080 --> 00:25:45,200
slim

00:25:42,799 --> 00:25:46,640
i'll be left with 58 only so i'm

00:25:45,200 --> 00:25:49,360
mitigating some like

00:25:46,640 --> 00:25:50,880
500 dependent vulnerabilities just by

00:25:49,360 --> 00:25:51,600
moving to a different base image if my

00:25:50,880 --> 00:25:54,159
application

00:25:51,600 --> 00:25:54,720
can function fine with that why not

00:25:54,159 --> 00:25:56,960
right

00:25:54,720 --> 00:25:57,840
so you can do it from seeing it with

00:25:56,960 --> 00:25:59,679
docker scan

00:25:57,840 --> 00:26:01,120
and mitigate those vulnerabilities and

00:25:59,679 --> 00:26:02,799
which we've seen right now

00:26:01,120 --> 00:26:04,159
how they actually impact the application

00:26:02,799 --> 00:26:06,240
itself and can cause

00:26:04,159 --> 00:26:07,200
uh command injection or if you're using

00:26:06,240 --> 00:26:09,360
uh you know the

00:26:07,200 --> 00:26:10,720
sneak app itself like to to scan your

00:26:09,360 --> 00:26:12,799
images we'll show you

00:26:10,720 --> 00:26:13,760
similar things we'll tell you hey we

00:26:12,799 --> 00:26:15,840
found this

00:26:13,760 --> 00:26:18,320
note 10 uh image that you're running

00:26:15,840 --> 00:26:20,799
right now but actually if you try to

00:26:18,320 --> 00:26:22,240
um if you want to move to if you you

00:26:20,799 --> 00:26:22,880
know want to fix those vulnerabilities

00:26:22,240 --> 00:26:26,000
you would actually

00:26:22,880 --> 00:26:26,480
try no note uh what is it dominion

00:26:26,000 --> 00:26:29,679
buster

00:26:26,480 --> 00:26:30,320
slim actually uh be found at a better

00:26:29,679 --> 00:26:31,919
state

00:26:30,320 --> 00:26:33,679
in terms of less vulnerabilities

00:26:31,919 --> 00:26:35,520
impacting you and less risk that you're

00:26:33,679 --> 00:26:38,559
having so

00:26:35,520 --> 00:26:40,320
this is about uh this was about uh um

00:26:38,559 --> 00:26:42,000
basically uh you know remediating

00:26:40,320 --> 00:26:43,520
vulnerabilities but our other

00:26:42,000 --> 00:26:45,760
interesting things that we can do for

00:26:43,520 --> 00:26:46,720
example multi-stage builds are really a

00:26:45,760 --> 00:26:49,440
great way

00:26:46,720 --> 00:26:50,960
to move from a simple uh and i'd say you

00:26:49,440 --> 00:26:52,159
know we had to kind of like potentially

00:26:50,960 --> 00:26:54,080
earn a stalker file

00:26:52,159 --> 00:26:55,679
into separated steps of building a

00:26:54,080 --> 00:26:57,200
docker image and what i mean by that and

00:26:55,679 --> 00:27:00,240
how it can help you basically

00:26:57,200 --> 00:27:01,520
uh avoid leaking sensitive files so if

00:27:00,240 --> 00:27:03,360
you do something like

00:27:01,520 --> 00:27:06,240
you know npmci production that's fine

00:27:03,360 --> 00:27:08,000
but if you need some private packages

00:27:06,240 --> 00:27:09,600
you probably need some token inside it

00:27:08,000 --> 00:27:11,840
so what you do you go you know

00:27:09,600 --> 00:27:13,039
add the token inside the docker file

00:27:11,840 --> 00:27:15,039
like you don't know one two three four

00:27:13,039 --> 00:27:15,840
here and do the npm install and it works

00:27:15,039 --> 00:27:17,120
but

00:27:15,840 --> 00:27:19,440
it's not really cool because that's

00:27:17,120 --> 00:27:21,039
hard-coded secrets in your docker file

00:27:19,440 --> 00:27:23,360
so maybe you try something else like

00:27:21,039 --> 00:27:25,120
maybe you try um providing it

00:27:23,360 --> 00:27:26,399
uh with a command line argument like you

00:27:25,120 --> 00:27:29,120
know npm token and then

00:27:26,399 --> 00:27:29,520
building the up uh the the docker image

00:27:29,120 --> 00:27:32,240
with

00:27:29,520 --> 00:27:33,679
uh this uh you know command with this uh

00:27:32,240 --> 00:27:35,120
argument that exists

00:27:33,679 --> 00:27:37,360
on the docker file which is you know a

00:27:35,120 --> 00:27:38,720
step better but if you look at the

00:27:37,360 --> 00:27:41,360
history of like uh

00:27:38,720 --> 00:27:41,760
the the host that built it you can see

00:27:41,360 --> 00:27:43,600
even

00:27:41,760 --> 00:27:45,360
the history of the image itself this

00:27:43,600 --> 00:27:45,760
kind of like npm token one two three

00:27:45,360 --> 00:27:47,360
four

00:27:45,760 --> 00:27:49,039
exposed so this is still a bad way of

00:27:47,360 --> 00:27:51,440
doing it now you'd think

00:27:49,039 --> 00:27:52,399
hey you know i've i've created it but i

00:27:51,440 --> 00:27:54,559
also need to

00:27:52,399 --> 00:27:56,399
um this is you know might be a good way

00:27:54,559 --> 00:27:58,080
of doing it but i want to remove it

00:27:56,399 --> 00:28:00,480
remove the um

00:27:58,080 --> 00:28:02,000
remove the uh the one two three four uh

00:28:00,480 --> 00:28:04,240
sensitive um

00:28:02,000 --> 00:28:06,000
token from the image itself so you know

00:28:04,240 --> 00:28:07,200
i don't want it in the running container

00:28:06,000 --> 00:28:09,200
so i'll do rm

00:28:07,200 --> 00:28:11,120
f the thing is this adds a new layer

00:28:09,200 --> 00:28:12,080
that deletes it but all of these layers

00:28:11,120 --> 00:28:14,320
and their history

00:28:12,080 --> 00:28:15,760
still exists as part of the docker image

00:28:14,320 --> 00:28:17,360
so when i do something like

00:28:15,760 --> 00:28:19,120
now if this is a public image that i'm

00:28:17,360 --> 00:28:20,960
doing docker push and i'm putting it

00:28:19,120 --> 00:28:22,399
on docker hub and even if it's private

00:28:20,960 --> 00:28:23,200
one because it might theoretically in

00:28:22,399 --> 00:28:25,200
the future be

00:28:23,200 --> 00:28:27,120
you know public and open source that's

00:28:25,200 --> 00:28:29,279
still a bad a bad thing because

00:28:27,120 --> 00:28:30,880
then that npm token you know one two

00:28:29,279 --> 00:28:33,679
three four still exists

00:28:30,880 --> 00:28:34,640
as part of the history of the docker

00:28:33,679 --> 00:28:36,640
image and this

00:28:34,640 --> 00:28:38,960
is really where you know it brings us

00:28:36,640 --> 00:28:42,320
into multi-stage builds the fact that

00:28:38,960 --> 00:28:45,200
uh uh i am able to now use one image

00:28:42,320 --> 00:28:46,960
for i know this top one for uh basically

00:28:45,200 --> 00:28:48,399
my uh uh you know even if it's like a

00:28:46,960 --> 00:28:50,720
big one no latest or whatever

00:28:48,399 --> 00:28:52,320
to do all the installs that i need but

00:28:50,720 --> 00:28:52,559
but you know when i'm done with it and

00:28:52,320 --> 00:28:54,080
i've

00:28:52,559 --> 00:28:55,760
installed whatever i needed from private

00:28:54,080 --> 00:28:57,520
packages i move you know

00:28:55,760 --> 00:28:59,840
to like a smaller image you know from

00:28:57,520 --> 00:29:01,679
node lts alpine they copy all of these

00:28:59,840 --> 00:29:03,200
artifacts from that bigger image into

00:29:01,679 --> 00:29:04,960
the smaller one the most per you know

00:29:03,200 --> 00:29:08,000
the purposeful for production

00:29:04,960 --> 00:29:09,600
and i can now basically uh

00:29:08,000 --> 00:29:10,880
mitigate two things first of all i'm

00:29:09,600 --> 00:29:11,600
having smaller base images for

00:29:10,880 --> 00:29:13,200
production

00:29:11,600 --> 00:29:15,440
less vulnerabilities less software you

00:29:13,200 --> 00:29:18,880
know less size also i'm preventing

00:29:15,440 --> 00:29:20,080
sensitive information leak now one thing

00:29:18,880 --> 00:29:22,240
that's super important

00:29:20,080 --> 00:29:24,080
and not well known is how do you mount

00:29:22,240 --> 00:29:25,840
secrets safely there's like a little bit

00:29:24,080 --> 00:29:26,240
of a better way of doing that npm token

00:29:25,840 --> 00:29:27,840
thing

00:29:26,240 --> 00:29:29,039
and that is you know sometimes you may

00:29:27,840 --> 00:29:31,120
even need a little bit more than the

00:29:29,039 --> 00:29:31,840
token itself like the dot and pmrc which

00:29:31,120 --> 00:29:33,919
has your

00:29:31,840 --> 00:29:35,120
registry and some other defaults so what

00:29:33,919 --> 00:29:37,120
do you do

00:29:35,120 --> 00:29:38,480
you don't really want to copy all of

00:29:37,120 --> 00:29:40,000
that into the running container

00:29:38,480 --> 00:29:41,520
just because uh you know maybe you have

00:29:40,000 --> 00:29:43,760
a docker ignore or something like that

00:29:41,520 --> 00:29:45,039
so what you could actually do is there's

00:29:43,760 --> 00:29:48,080
a new command

00:29:45,039 --> 00:29:49,600
available in docker it's called um with

00:29:48,080 --> 00:29:51,440
build kit which is the new uh kind of

00:29:49,600 --> 00:29:52,080
like the new uh capabilities into docker

00:29:51,440 --> 00:29:54,880
which is

00:29:52,080 --> 00:29:56,000
you know mount uh mount uh with a secret

00:29:54,880 --> 00:29:59,120
so i can actually

00:29:56,000 --> 00:30:02,080
mount a specific file into the container

00:29:59,120 --> 00:30:02,480
uh give it give it give it a name and so

00:30:02,080 --> 00:30:04,080
when i

00:30:02,480 --> 00:30:06,080
when i actually build it actually give

00:30:04,080 --> 00:30:08,159
it a reference id and the file

00:30:06,080 --> 00:30:10,559
and then what happens is it will only

00:30:08,159 --> 00:30:13,600
have uh that secret of

00:30:10,559 --> 00:30:15,200
as a file available on the container

00:30:13,600 --> 00:30:15,840
itself for that specific state and

00:30:15,200 --> 00:30:17,919
that's all

00:30:15,840 --> 00:30:19,679
that step at all and nothing else this

00:30:17,919 --> 00:30:20,320
is not you know retained in any

00:30:19,679 --> 00:30:22,799
container

00:30:20,320 --> 00:30:24,080
history or image layers or whatever this

00:30:22,799 --> 00:30:26,399
is the proper way

00:30:24,080 --> 00:30:27,520
of mounting secrets like files into the

00:30:26,399 --> 00:30:28,640
container itself

00:30:27,520 --> 00:30:30,799
now there are a lot of other best

00:30:28,640 --> 00:30:32,480
practices we haven't had time here to uh

00:30:30,799 --> 00:30:34,159
uh to show you how to build containers

00:30:32,480 --> 00:30:36,000
securely uh you can you know there's a

00:30:34,159 --> 00:30:38,399
lot of them on the sneak blog

00:30:36,000 --> 00:30:40,159
and you should probably scan and monitor

00:30:38,399 --> 00:30:41,200
your code repositories and docker images

00:30:40,159 --> 00:30:42,960
you know all the time

00:30:41,200 --> 00:30:45,039
because of all the vulnerabilities that

00:30:42,960 --> 00:30:47,440
can happen like we've seen in this demo

00:30:45,039 --> 00:30:48,559
so you know may the container guides

00:30:47,440 --> 00:30:50,480
keep you safe

00:30:48,559 --> 00:30:51,760
but until then thank you for joining my

00:30:50,480 --> 00:30:56,640
talk and

00:30:51,760 --> 00:30:56,640

YouTube URL: https://www.youtube.com/watch?v=OzU3rh0ROt8


