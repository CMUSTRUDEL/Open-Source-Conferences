Title: Integrating Containers in JavaScript - Lucas Santos, Microsoft
Publication date: 2021-05-31
Playlist: OpenJS World 2021 - Automation
Description: 
	Docker has become an increasingly important subject when we talk about containers. However, it's made to be used by humans. What if we needed containers to be controlled by other applications? Is it possible to do it by using JavaScript? In this talk, we'll build a container control application that will communicate with a container runtime through gRPC and will manage all our containers. Welcome to the new era of container management!
Captions: 
	00:00:01,439 --> 00:00:06,399
hello everyone my name is lucas

00:00:04,160 --> 00:00:09,040
and i'm thrilled to be here to be

00:00:06,399 --> 00:00:12,160
presenting you on this awesome event

00:00:09,040 --> 00:00:14,639
uh well let's get started to it uh so

00:00:12,160 --> 00:00:15,839
we don't lose any more time okay so

00:00:14,639 --> 00:00:18,160
today we're going to be talking about

00:00:15,839 --> 00:00:21,199
integrating containers into javascript

00:00:18,160 --> 00:00:24,320
in several ways i've been doing this uh

00:00:21,199 --> 00:00:27,760
and how did i get to this and

00:00:24,320 --> 00:00:30,080
how we can leverage this power okay

00:00:27,760 --> 00:00:31,519
so basically uh these are my social

00:00:30,080 --> 00:00:34,399
networks uh this

00:00:31,519 --> 00:00:36,559
is my email uh my name is lucas santos i

00:00:34,399 --> 00:00:37,520
am a developer advocate from sao paulo

00:00:36,559 --> 00:00:40,480
brazil here

00:00:37,520 --> 00:00:41,440
uh a microsoft uh and if you wanna get

00:00:40,480 --> 00:00:44,640
in touch with me

00:00:41,440 --> 00:00:48,239
in any way just put my social network

00:00:44,640 --> 00:00:49,920
dot l from lucas l centers dot dev

00:00:48,239 --> 00:00:51,920
okay so if you want to know anything

00:00:49,920 --> 00:00:55,879
about me at all if you want to know

00:00:51,920 --> 00:00:57,680
any other social networks just go to

00:00:55,879 --> 00:01:00,079
info.alsantos.dev okay

00:00:57,680 --> 00:01:02,079
then let's get started right so

00:01:00,079 --> 00:01:04,239
containers they are a thing now

00:01:02,079 --> 00:01:05,519
right they are containers containers are

00:01:04,239 --> 00:01:07,600
widely used for

00:01:05,519 --> 00:01:09,520
a lot of things they're used in several

00:01:07,600 --> 00:01:11,520
areas with several technologies

00:01:09,520 --> 00:01:12,640
kubernetes is here dockers docker's

00:01:11,520 --> 00:01:14,720
dockers here

00:01:12,640 --> 00:01:16,080
and there's like a lot of stuff that

00:01:14,720 --> 00:01:19,360
actually uses containers

00:01:16,080 --> 00:01:20,799
and uh it's something that's been really

00:01:19,360 --> 00:01:23,280
active and really hot

00:01:20,799 --> 00:01:24,080
in the technology area but containers in

00:01:23,280 --> 00:01:26,479
a new

00:01:24,080 --> 00:01:28,799
dx is like since the 80s or something

00:01:26,479 --> 00:01:30,640
like that they started in linux

00:01:28,799 --> 00:01:32,799
and we are not actually telling the

00:01:30,640 --> 00:01:35,680
whole story of containers here today

00:01:32,799 --> 00:01:36,560
uh what i'm going to show you is just

00:01:35,680 --> 00:01:38,640
how we can

00:01:36,560 --> 00:01:41,200
make this work with javascript and why

00:01:38,640 --> 00:01:43,600
did i choose to do that right

00:01:41,200 --> 00:01:45,680
it's easy to control containers right

00:01:43,600 --> 00:01:46,000
it's pretty easy docker is here to show

00:01:45,680 --> 00:01:48,799
you

00:01:46,000 --> 00:01:50,240
to show you that uh we can actually

00:01:48,799 --> 00:01:53,119
control the

00:01:50,240 --> 00:01:54,159
via like a cli or something and

00:01:53,119 --> 00:01:55,920
basically docker

00:01:54,159 --> 00:01:57,680
does most of the work for us you don't

00:01:55,920 --> 00:01:59,280
need to understand how the underlying

00:01:57,680 --> 00:02:03,920
infrastructure actually works

00:01:59,280 --> 00:02:06,960
because this is basically uh you know

00:02:03,920 --> 00:02:08,239
uh not important for you to uh get your

00:02:06,960 --> 00:02:09,920
work done so

00:02:08,239 --> 00:02:12,319
uh controlling containers mostly have

00:02:09,920 --> 00:02:14,160
been done by using clies or other

00:02:12,319 --> 00:02:15,680
uh graphical user interfaces or

00:02:14,160 --> 00:02:17,840
something like that but

00:02:15,680 --> 00:02:19,840
it's easy if you're human right most of

00:02:17,840 --> 00:02:22,640
the clies and most of

00:02:19,840 --> 00:02:25,040
everything we use now they're made for

00:02:22,640 --> 00:02:27,680
human beings they're made for people

00:02:25,040 --> 00:02:29,200
right so doctor cli is awesome it allows

00:02:27,680 --> 00:02:31,200
you to do a lot of things

00:02:29,200 --> 00:02:32,640
and there are other toolings that are

00:02:31,200 --> 00:02:34,800
actually pretty good

00:02:32,640 --> 00:02:36,560
uh in what they do to allow us to spin

00:02:34,800 --> 00:02:37,040
up containers kubernetes is here to show

00:02:36,560 --> 00:02:39,440
you that

00:02:37,040 --> 00:02:40,800
uh we can have a good cli with control

00:02:39,440 --> 00:02:44,400
and a lot of other things

00:02:40,800 --> 00:02:46,640
but the point of all that is that uh we

00:02:44,400 --> 00:02:47,920
we need to create things as if they

00:02:46,640 --> 00:02:50,959
didn't were

00:02:47,920 --> 00:02:51,519
uh they didn't were created for humans

00:02:50,959 --> 00:02:54,239
right

00:02:51,519 --> 00:02:55,840
so uh all this tooling has been created

00:02:54,239 --> 00:02:57,519
to be used by humans in the command line

00:02:55,840 --> 00:02:59,200
interfaces instead of programmatically

00:02:57,519 --> 00:03:01,280
through an api or something like that

00:02:59,200 --> 00:03:03,360
but what happens if you're not a human

00:03:01,280 --> 00:03:06,319
if you're like a program an api

00:03:03,360 --> 00:03:06,800
or an operator or something like that uh

00:03:06,319 --> 00:03:10,000
you

00:03:06,800 --> 00:03:10,480
might face a hard time by you know doing

00:03:10,000 --> 00:03:12,159
that

00:03:10,480 --> 00:03:13,599
for a lot of reasons that i'm going to

00:03:12,159 --> 00:03:16,159
show you and

00:03:13,599 --> 00:03:17,040
now we are going to just understand uh

00:03:16,159 --> 00:03:19,040
what is

00:03:17,040 --> 00:03:20,480
uh what we're actually working with

00:03:19,040 --> 00:03:22,319
right so to

00:03:20,480 --> 00:03:23,920
present this to you uh we're going to

00:03:22,319 --> 00:03:26,959
use a technology called container g

00:03:23,920 --> 00:03:29,840
it's actually a tool that was built by

00:03:26,959 --> 00:03:31,599
oci oci is a the open container

00:03:29,840 --> 00:03:34,000
initiative it's built up by

00:03:31,599 --> 00:03:35,360
like a lot of companies including docker

00:03:34,000 --> 00:03:36,080
and microsoft and a lot of other

00:03:35,360 --> 00:03:39,200
companies

00:03:36,080 --> 00:03:42,239
uh and the the basic

00:03:39,200 --> 00:03:44,400
idea the goal of the oci is to create a

00:03:42,239 --> 00:03:46,560
standard interface for all containers

00:03:44,400 --> 00:03:48,799
and all images that we use today

00:03:46,560 --> 00:03:50,239
so uh container d is a high level

00:03:48,799 --> 00:03:52,000
runtime actually it's

00:03:50,239 --> 00:03:53,599
more like a runtime manager because it

00:03:52,000 --> 00:03:57,280
controls something called

00:03:53,599 --> 00:03:59,439
called run c uh inside a linux machine

00:03:57,280 --> 00:04:01,200
so what we're gonna do today is that

00:03:59,439 --> 00:04:02,640
we're going to spin up a linux machine

00:04:01,200 --> 00:04:04,400
right so i'm going to use a linux

00:04:02,640 --> 00:04:06,959
machine with container

00:04:04,400 --> 00:04:09,280
installed and run c installed so we can

00:04:06,959 --> 00:04:11,360
run our demos and our examples here so

00:04:09,280 --> 00:04:13,519
basically this is why containers

00:04:11,360 --> 00:04:14,720
are actually widely used in linux and

00:04:13,519 --> 00:04:18,400
not so much

00:04:14,720 --> 00:04:19,759
in other os's right it powers docker so

00:04:18,400 --> 00:04:22,639
docker actually uses

00:04:19,759 --> 00:04:24,320
container d uh underlying uh its

00:04:22,639 --> 00:04:25,840
implementation infrastructure

00:04:24,320 --> 00:04:27,360
uh it was part of docker in the

00:04:25,840 --> 00:04:30,240
beginning and then was split up

00:04:27,360 --> 00:04:30,639
into several other stuff uh and continue

00:04:30,240 --> 00:04:33,120
d

00:04:30,639 --> 00:04:33,759
differently from docker or other

00:04:33,120 --> 00:04:36,320
building

00:04:33,759 --> 00:04:38,400
uh it was created to be manipulated

00:04:36,320 --> 00:04:39,199
through an api or an sdk client or

00:04:38,400 --> 00:04:42,800
whatever

00:04:39,199 --> 00:04:44,479
right despite container d also has a cli

00:04:42,800 --> 00:04:47,120
interface called ctr

00:04:44,479 --> 00:04:48,720
uh because it's actually pretty easy to

00:04:47,120 --> 00:04:51,360
manipulate containers using

00:04:48,720 --> 00:04:52,800
the cli and basically container d

00:04:51,360 --> 00:04:54,639
actually does that

00:04:52,800 --> 00:04:55,680
for you if you have like a cli or

00:04:54,639 --> 00:04:57,440
something you don't need docker

00:04:55,680 --> 00:04:58,560
installed in your machine

00:04:57,440 --> 00:05:00,479
and you don't need anything else

00:04:58,560 --> 00:05:02,800
installed so it has a cli have

00:05:00,479 --> 00:05:04,160
you know despite being created to be

00:05:02,800 --> 00:05:06,560
used programmatically

00:05:04,160 --> 00:05:07,600
uh but this is not important actually

00:05:06,560 --> 00:05:09,919
having the cli

00:05:07,600 --> 00:05:11,520
is one of the parts that will allow us

00:05:09,919 --> 00:05:14,080
to control it

00:05:11,520 --> 00:05:14,800
a bit better but that was one of the

00:05:14,080 --> 00:05:18,080
attempts

00:05:14,800 --> 00:05:18,639
but uh container d uh is actually widely

00:05:18,080 --> 00:05:20,400
used

00:05:18,639 --> 00:05:21,919
most of the container run times uses

00:05:20,400 --> 00:05:24,160
container d uh in

00:05:21,919 --> 00:05:25,039
underlying infrastructure or run c in

00:05:24,160 --> 00:05:28,800
some way

00:05:25,039 --> 00:05:29,759
but uh it's not so easy for javascript

00:05:28,800 --> 00:05:32,800
developers so

00:05:29,759 --> 00:05:35,280
if you go google or whatever

00:05:32,800 --> 00:05:36,400
search engine or whatever documentation

00:05:35,280 --> 00:05:38,080
you might find

00:05:36,400 --> 00:05:39,919
you're gonna see that most of the

00:05:38,080 --> 00:05:43,039
container things are done

00:05:39,919 --> 00:05:45,520
uh using go uh

00:05:43,039 --> 00:05:47,759
container d is actually built using gold

00:05:45,520 --> 00:05:49,919
uh docker is built using go

00:05:47,759 --> 00:05:51,199
run c is built using go and there's like

00:05:49,919 --> 00:05:54,960
a lot of other things

00:05:51,199 --> 00:05:58,319
that we can do but they are mostly

00:05:54,960 --> 00:06:00,479
uh you know aimed to golang developers

00:05:58,319 --> 00:06:01,840
uh this is one of the examples there are

00:06:00,479 --> 00:06:04,080
a lot of other examples

00:06:01,840 --> 00:06:05,199
uh but basically what we are seeing here

00:06:04,080 --> 00:06:07,520
today is that

00:06:05,199 --> 00:06:09,440
we need to import all the packages and

00:06:07,520 --> 00:06:12,720
you see that uh in this

00:06:09,440 --> 00:06:15,919
uh right hand most image here that uh

00:06:12,720 --> 00:06:16,479
we have a container d uh client that is

00:06:15,919 --> 00:06:18,800
actually

00:06:16,479 --> 00:06:20,160
well integrated into go and you can just

00:06:18,800 --> 00:06:22,080
import it and actually

00:06:20,160 --> 00:06:23,759
create containers and delete containers

00:06:22,080 --> 00:06:27,360
and pull images and so on

00:06:23,759 --> 00:06:28,479
just uh using the golang cli which is

00:06:27,360 --> 00:06:32,240
not actually present

00:06:28,479 --> 00:06:35,919
in javascript but then i actually

00:06:32,240 --> 00:06:38,160
came across a article that uh

00:06:35,919 --> 00:06:39,360
made me think of it this is actually not

00:06:38,160 --> 00:06:41,440
wrong right it's not

00:06:39,360 --> 00:06:43,520
actually wrong to be written in go uh

00:06:41,440 --> 00:06:45,440
it's programmatic and it's a great code

00:06:43,520 --> 00:06:48,160
uh but it's not intuitive it's not that

00:06:45,440 --> 00:06:51,039
intuitive for those who doesn't know

00:06:48,160 --> 00:06:52,720
goaling or whatever other language so i

00:06:51,039 --> 00:06:53,840
came across this awesome article by

00:06:52,720 --> 00:06:55,360
marcos

00:06:53,840 --> 00:06:57,680
how to get a browser to communicate with

00:06:55,360 --> 00:07:00,479
container d through grpc

00:06:57,680 --> 00:07:02,800
so i thought well if container d has a

00:07:00,479 --> 00:07:05,680
grpc interface maybe we can

00:07:02,800 --> 00:07:06,960
actually integrate things into

00:07:05,680 --> 00:07:09,680
javascript so

00:07:06,960 --> 00:07:10,880
i thought well what if i did this using

00:07:09,680 --> 00:07:13,680
node.js right

00:07:10,880 --> 00:07:14,880
i know how to integrate into grpc

00:07:13,680 --> 00:07:18,319
interfaces

00:07:14,880 --> 00:07:22,080
using node.js i know how to do this uh

00:07:18,319 --> 00:07:23,599
using uh the javascript command line and

00:07:22,080 --> 00:07:26,000
i know how to use this

00:07:23,599 --> 00:07:27,520
uh on javascript itself that we have

00:07:26,000 --> 00:07:31,039
like a lot of libs

00:07:27,520 --> 00:07:33,280
that allows us to create a javascript a

00:07:31,039 --> 00:07:36,240
plain javascript job pc interface

00:07:33,280 --> 00:07:36,800
and that are very actually good to do

00:07:36,240 --> 00:07:40,240
this

00:07:36,800 --> 00:07:43,039
so i tried a first attempt okay

00:07:40,240 --> 00:07:43,759
so the first attempt i did was sometimes

00:07:43,039 --> 00:07:46,800
good

00:07:43,759 --> 00:07:49,840
mostly bad but it kind of worked and

00:07:46,800 --> 00:07:51,680
it was ugly at all but the first thing

00:07:49,840 --> 00:07:53,039
uh this first attempt is just a proof of

00:07:51,680 --> 00:07:54,800
concept uh

00:07:53,039 --> 00:07:56,639
to show us that our two actually

00:07:54,800 --> 00:07:57,440
actually there are two ways or even more

00:07:56,639 --> 00:07:59,280
ways

00:07:57,440 --> 00:08:01,759
that we can integrate continuity into

00:07:59,280 --> 00:08:05,520
node it's actually a simple way

00:08:01,759 --> 00:08:08,720
to you know avoid being

00:08:05,520 --> 00:08:10,720
so uh you know verbose and

00:08:08,720 --> 00:08:12,000
trying actually not to know all the

00:08:10,720 --> 00:08:14,000
concepts you don't need to know all the

00:08:12,000 --> 00:08:14,560
concepts behind container d to make this

00:08:14,000 --> 00:08:16,800
work

00:08:14,560 --> 00:08:17,919
so the first attempt uh was to use chat

00:08:16,800 --> 00:08:20,000
process

00:08:17,919 --> 00:08:21,440
so basically what i did was that i

00:08:20,000 --> 00:08:24,000
created a child process

00:08:21,440 --> 00:08:25,120
and i spawned this chart process to

00:08:24,000 --> 00:08:27,919
actually create

00:08:25,120 --> 00:08:28,800
instances of the ctr uh container

00:08:27,919 --> 00:08:32,240
interface

00:08:28,800 --> 00:08:34,560
uh and well this worked very very well

00:08:32,240 --> 00:08:36,719
right so container d has this uh cli

00:08:34,560 --> 00:08:38,719
called ctr which i already told you

00:08:36,719 --> 00:08:40,560
and it's able to do like a lot of stuff

00:08:38,719 --> 00:08:41,200
maybe like everything that container d

00:08:40,560 --> 00:08:43,919
can do

00:08:41,200 --> 00:08:45,120
is able to do you were able to do via

00:08:43,919 --> 00:08:47,200
the ctr

00:08:45,120 --> 00:08:50,240
uh command line interface so what i did

00:08:47,200 --> 00:08:52,640
was just i put all these commands into a

00:08:50,240 --> 00:08:54,560
node.js process and try to build

00:08:52,640 --> 00:08:56,640
something out of it

00:08:54,560 --> 00:08:58,480
i'm going to show you the code but let's

00:08:56,640 --> 00:08:59,279
talk about the pros and cons of this

00:08:58,480 --> 00:09:00,640
first right

00:08:59,279 --> 00:09:02,320
so you might be thinking well this is

00:09:00,640 --> 00:09:03,920
easy i can do this at home of course you

00:09:02,320 --> 00:09:05,839
can do this at home

00:09:03,920 --> 00:09:07,839
and i encourage you to do so it's

00:09:05,839 --> 00:09:08,880
actually very very nice to see these

00:09:07,839 --> 00:09:11,120
things working

00:09:08,880 --> 00:09:13,600
but uh the pros of this is that it's

00:09:11,120 --> 00:09:17,360
super easy it's very easy to integrate

00:09:13,600 --> 00:09:20,000
using a command line interface and using

00:09:17,360 --> 00:09:21,920
ctr using chat process chat process is

00:09:20,000 --> 00:09:23,760
actually amazing to use

00:09:21,920 --> 00:09:25,120
and you have like a lot of tooling on

00:09:23,760 --> 00:09:28,560
top of that that you can

00:09:25,120 --> 00:09:29,440
indeed use uh and well this is one of

00:09:28,560 --> 00:09:30,640
the the pros

00:09:29,440 --> 00:09:32,480
the other thing is that it takes

00:09:30,640 --> 00:09:34,720
advantage of all the implementation

00:09:32,480 --> 00:09:39,200
that's already done in the ctr

00:09:34,720 --> 00:09:42,399
in the so you don't actually need to be

00:09:39,200 --> 00:09:43,120
so uh into containers or you don't need

00:09:42,399 --> 00:09:45,600
to know

00:09:43,120 --> 00:09:46,880
how container d actually works so you

00:09:45,600 --> 00:09:50,880
can

00:09:46,880 --> 00:09:52,640
make everything work inside javascript

00:09:50,880 --> 00:09:53,440
you just need to know how to call a

00:09:52,640 --> 00:09:55,680
process and you

00:09:53,440 --> 00:09:58,000
just need to know how to control that uh

00:09:55,680 --> 00:10:00,880
and well it's a faster implementation

00:09:58,000 --> 00:10:02,399
so basically uh you can do things very

00:10:00,880 --> 00:10:04,640
very fast i did this and

00:10:02,399 --> 00:10:05,760
i did this uh container decline in like

00:10:04,640 --> 00:10:08,160
one hour or so

00:10:05,760 --> 00:10:10,480
right uh and can be integrated into any

00:10:08,160 --> 00:10:12,560
api basically if you can uh

00:10:10,480 --> 00:10:14,720
manipulate this through the code you can

00:10:12,560 --> 00:10:17,279
integrate this using the apis

00:10:14,720 --> 00:10:18,399
uh so it's actually so simple that i did

00:10:17,279 --> 00:10:20,880
this i did

00:10:18,399 --> 00:10:22,000
uh this amazing container the api which

00:10:20,880 --> 00:10:25,680
is basically

00:10:22,000 --> 00:10:28,079
a uh you know vanilla javascript

00:10:25,680 --> 00:10:30,000
running es modules in the browser and it

00:10:28,079 --> 00:10:30,480
doesn't need anything else just some css

00:10:30,000 --> 00:10:33,279
and some

00:10:30,480 --> 00:10:35,040
html and it kind of works so as you can

00:10:33,279 --> 00:10:36,399
see i can create i can list images so

00:10:35,040 --> 00:10:39,360
let's jump to the code

00:10:36,399 --> 00:10:40,320
and i can show you this actually working

00:10:39,360 --> 00:10:43,920
uh

00:10:40,320 --> 00:10:45,519
so this is our code and basically what

00:10:43,920 --> 00:10:48,640
i'm going to show you is this

00:10:45,519 --> 00:10:49,680
small server it's built using coa so as

00:10:48,640 --> 00:10:53,040
you can see it's just

00:10:49,680 --> 00:10:54,880
a few routes a delete route a boot route

00:10:53,040 --> 00:10:56,640
and so on so we can create containers

00:10:54,880 --> 00:10:58,880
this is our course

00:10:56,640 --> 00:11:00,000
and we have a body parser and allowed

00:10:58,880 --> 00:11:02,640
methods and so on

00:11:00,000 --> 00:11:03,200
so this is a base kpi and this only

00:11:02,640 --> 00:11:05,920
calls

00:11:03,200 --> 00:11:07,440
the ctr okay so ctr is a container d

00:11:05,920 --> 00:11:09,120
client that i

00:11:07,440 --> 00:11:10,480
called container deep because of obvious

00:11:09,120 --> 00:11:12,079
reasons and this

00:11:10,480 --> 00:11:14,000
is actually everything that does the

00:11:12,079 --> 00:11:17,279
work uh so it's already

00:11:14,000 --> 00:11:18,959
running here i run both the api and the

00:11:17,279 --> 00:11:20,399
application so this is the static

00:11:18,959 --> 00:11:24,000
application that i'm running

00:11:20,399 --> 00:11:26,240
using the uh go static

00:11:24,000 --> 00:11:28,240
web server so this is all the same just

00:11:26,240 --> 00:11:30,480
to serve the html uh

00:11:28,240 --> 00:11:32,160
and basically what you can see here is

00:11:30,480 --> 00:11:34,320
that i have my implementation of

00:11:32,160 --> 00:11:35,040
continuity basically using just child

00:11:34,320 --> 00:11:38,079
process

00:11:35,040 --> 00:11:41,360
promises and uh this is actually it

00:11:38,079 --> 00:11:43,200
uh so we have these actions that i

00:11:41,360 --> 00:11:43,760
freeze we have the list name space

00:11:43,200 --> 00:11:46,800
action

00:11:43,760 --> 00:11:49,519
so i just exact a sync so i just run

00:11:46,800 --> 00:11:51,279
an execution a sync execution of ctr

00:11:49,519 --> 00:11:52,720
client this is really really just the

00:11:51,279 --> 00:11:54,480
proof of concept right

00:11:52,720 --> 00:11:56,000
so uh we have a list if we have a

00:11:54,480 --> 00:12:00,079
standard error then we

00:11:56,000 --> 00:12:01,519
just error out if we have a uh

00:12:00,079 --> 00:12:03,120
another thing that is not a standard

00:12:01,519 --> 00:12:06,399
error uh we can

00:12:03,120 --> 00:12:08,320
pause this string output so basically

00:12:06,399 --> 00:12:09,279
this is the idea so i can parse the

00:12:08,320 --> 00:12:12,560
string output

00:12:09,279 --> 00:12:15,200
i can run everything that i need

00:12:12,560 --> 00:12:15,680
into this thing so uh basically this is

00:12:15,200 --> 00:12:18,000
the

00:12:15,680 --> 00:12:20,240
uh amazing container api as you can see

00:12:18,000 --> 00:12:20,880
i'm a backend developer i don't have a

00:12:20,240 --> 00:12:23,839
lot

00:12:20,880 --> 00:12:24,399
of experience and i can't do good front

00:12:23,839 --> 00:12:26,720
ends

00:12:24,399 --> 00:12:28,639
uh so i can change the phone name space

00:12:26,720 --> 00:12:30,320
container is based on namespaces

00:12:28,639 --> 00:12:32,079
so i can change the phone name space but

00:12:30,320 --> 00:12:32,800
i won't do this i'm going to download i

00:12:32,079 --> 00:12:36,480
have this

00:12:32,800 --> 00:12:39,279
uh network manager here

00:12:36,480 --> 00:12:40,079
open on devtools so i'm just going to

00:12:39,279 --> 00:12:41,519
show you

00:12:40,079 --> 00:12:43,680
how these things are working but i'm

00:12:41,519 --> 00:12:45,760
going i'm going to pull this image

00:12:43,680 --> 00:12:47,120
so i'm going to pull the go volt api

00:12:45,760 --> 00:12:49,839
which is a simple image

00:12:47,120 --> 00:12:51,839
it looks like it weighs more like 5

00:12:49,839 --> 00:12:53,839
megabytes or something like that

00:12:51,839 --> 00:12:55,120
then i can create a container from this

00:12:53,839 --> 00:12:58,480
image and i have

00:12:55,120 --> 00:13:00,880
uh this website already open for for api

00:12:58,480 --> 00:13:02,480
this runs on 8080 so as you can see

00:13:00,880 --> 00:13:04,240
nothing actually happens here because

00:13:02,480 --> 00:13:07,519
the container is not running

00:13:04,240 --> 00:13:08,560
uh but i can actually run a task to run

00:13:07,519 --> 00:13:10,959
this container so

00:13:08,560 --> 00:13:12,160
once once i create this task uh my

00:13:10,959 --> 00:13:14,560
container is gonna run

00:13:12,160 --> 00:13:15,680
here and as you can see i can actually

00:13:14,560 --> 00:13:18,240
use my api

00:13:15,680 --> 00:13:18,720
and i didn't need to integrate anything

00:13:18,240 --> 00:13:21,200
into

00:13:18,720 --> 00:13:23,120
anywhere so i just can i can just kill

00:13:21,200 --> 00:13:23,760
my task delete my container delete my

00:13:23,120 --> 00:13:26,800
image

00:13:23,760 --> 00:13:27,839
and everything is gonna be back to what

00:13:26,800 --> 00:13:30,240
we had before

00:13:27,839 --> 00:13:30,959
okay so this was my first attempt of

00:13:30,240 --> 00:13:34,480
creating

00:13:30,959 --> 00:13:38,560
something that uh was going to be

00:13:34,480 --> 00:13:41,839
used as an integration for container d

00:13:38,560 --> 00:13:44,160
right so uh this is not

00:13:41,839 --> 00:13:45,120
it's pretty good but uh we have some

00:13:44,160 --> 00:13:48,160
cons as you

00:13:45,120 --> 00:13:49,680
may have seen on that uh the first thing

00:13:48,160 --> 00:13:51,440
we have is that it's heavily dependent

00:13:49,680 --> 00:13:54,880
on the environment you have so

00:13:51,440 --> 00:13:56,079
uh whatever you were doing uh you just

00:13:54,880 --> 00:13:58,959
need to you can just

00:13:56,079 --> 00:14:00,320
run this client if you have it installed

00:13:58,959 --> 00:14:03,920
in the same machine

00:14:00,320 --> 00:14:06,480
as your container d uh binary so

00:14:03,920 --> 00:14:07,600
uh if you have like on um you have a

00:14:06,480 --> 00:14:09,760
machine with container d

00:14:07,600 --> 00:14:10,800
inside it and uh you need to run this

00:14:09,760 --> 00:14:12,959
api in

00:14:10,800 --> 00:14:14,959
somewhere else uh basically you can do

00:14:12,959 --> 00:14:16,800
it because it needs to be installed in

00:14:14,959 --> 00:14:18,240
the same machine as the api

00:14:16,800 --> 00:14:20,000
of course you can actually run

00:14:18,240 --> 00:14:22,000
continuously around this api and then

00:14:20,000 --> 00:14:22,480
run a reverse proxy or something on top

00:14:22,000 --> 00:14:24,959
of it

00:14:22,480 --> 00:14:26,720
to communicate uh externally or remotely

00:14:24,959 --> 00:14:29,519
to this api this is uh

00:14:26,720 --> 00:14:29,839
completely feasible right but uh there

00:14:29,519 --> 00:14:33,120
are

00:14:29,839 --> 00:14:36,079
other cons on this uh basically we don't

00:14:33,120 --> 00:14:39,199
have any control over the process

00:14:36,079 --> 00:14:40,320
so if by any chance the ctr runs into a

00:14:39,199 --> 00:14:43,440
problem or something

00:14:40,320 --> 00:14:44,959
that we haven't anticipated and

00:14:43,440 --> 00:14:47,279
being honest it's really really

00:14:44,959 --> 00:14:50,399
difficult to anticipate any sort

00:14:47,279 --> 00:14:51,360
of uh errors that happen in a command

00:14:50,399 --> 00:14:54,160
line interface

00:14:51,360 --> 00:14:56,240
because it's not meant to be giving you

00:14:54,160 --> 00:14:58,320
all details of the error because it's

00:14:56,240 --> 00:14:59,839
basically built to be used by humans

00:14:58,320 --> 00:15:02,240
right not machines

00:14:59,839 --> 00:15:04,079
uh so you can control all the process

00:15:02,240 --> 00:15:06,720
you just control its inputs

00:15:04,079 --> 00:15:07,120
and you receive all these outputs and

00:15:06,720 --> 00:15:10,079
this

00:15:07,120 --> 00:15:10,720
is everything that uh it's bad about it

00:15:10,079 --> 00:15:13,839
because

00:15:10,720 --> 00:15:16,639
you receive a output that's basically

00:15:13,839 --> 00:15:17,920
uh a giant string uh and you need to

00:15:16,639 --> 00:15:19,760
parse this string to

00:15:17,920 --> 00:15:21,360
you know figure out whatever if you had

00:15:19,760 --> 00:15:23,600
any errors or something

00:15:21,360 --> 00:15:24,720
uh some of the clients like container

00:15:23,600 --> 00:15:26,480
decline ctr

00:15:24,720 --> 00:15:28,320
they have a quiet mode that doesn't

00:15:26,480 --> 00:15:31,600
output headers or something

00:15:28,320 --> 00:15:34,240
but uh it's you know poor i can't

00:15:31,600 --> 00:15:35,920
actually get the container status or the

00:15:34,240 --> 00:15:40,079
image status or

00:15:35,920 --> 00:15:43,440
task status because uh these uh

00:15:40,079 --> 00:15:46,560
these informations are actually hidden

00:15:43,440 --> 00:15:47,199
behind a parsing or a table like

00:15:46,560 --> 00:15:50,000
structure

00:15:47,199 --> 00:15:50,320
something like that and basically what

00:15:50,000 --> 00:15:52,160
you

00:15:50,320 --> 00:15:54,000
have to do what we have to do is to

00:15:52,160 --> 00:15:56,480
parse this giant string and use

00:15:54,000 --> 00:15:58,240
string parsers and so on so we can put

00:15:56,480 --> 00:15:59,360
this thing into data structures that we

00:15:58,240 --> 00:16:01,279
can manipulate

00:15:59,360 --> 00:16:02,880
okay so this is the first part but the

00:16:01,279 --> 00:16:04,800
second part is that uh

00:16:02,880 --> 00:16:06,560
this problem doesn't allow us to give a

00:16:04,800 --> 00:16:08,959
proper error handling because

00:16:06,560 --> 00:16:10,000
we just know that this is going to be an

00:16:08,959 --> 00:16:11,920
error when we

00:16:10,000 --> 00:16:13,360
haven't standard error output and the

00:16:11,920 --> 00:16:15,360
standard error output is

00:16:13,360 --> 00:16:16,480
meant to be used for humans so it's a

00:16:15,360 --> 00:16:19,839
human

00:16:16,480 --> 00:16:22,800
readable error and it's not a machine

00:16:19,839 --> 00:16:23,360
like error it's basically uh what we do

00:16:22,800 --> 00:16:25,120
is

00:16:23,360 --> 00:16:26,639
just receiving the error string the

00:16:25,120 --> 00:16:28,880
error message and we can't

00:16:26,639 --> 00:16:30,800
know for sure if that error can be

00:16:28,880 --> 00:16:31,920
corrected or not instead of like we can

00:16:30,800 --> 00:16:34,800
just parse it but

00:16:31,920 --> 00:16:36,959
you know we can parse it by rejects uh

00:16:34,800 --> 00:16:39,360
we can use uh whatever

00:16:36,959 --> 00:16:40,160
thing that we can but this uh is

00:16:39,360 --> 00:16:42,800
basically

00:16:40,160 --> 00:16:44,320
running all the errors in one place and

00:16:42,800 --> 00:16:45,120
trying to figure out how to parse

00:16:44,320 --> 00:16:48,079
everyone

00:16:45,120 --> 00:16:49,519
using regex and using uh you know every

00:16:48,079 --> 00:16:52,320
sort of hacking that we

00:16:49,519 --> 00:16:54,079
can do in strings so this is really

00:16:52,320 --> 00:16:54,720
really bad this is one of the reasons

00:16:54,079 --> 00:16:56,880
why

00:16:54,720 --> 00:16:58,560
this api and this front end doesn't

00:16:56,880 --> 00:17:01,759
actually return

00:16:58,560 --> 00:17:03,600
a good error handling sometimes when

00:17:01,759 --> 00:17:05,679
we run into an error like the image red

00:17:03,600 --> 00:17:07,760
exists or the image doesn't exist

00:17:05,679 --> 00:17:09,120
uh it returns like a chorus error or

00:17:07,760 --> 00:17:11,679
something like that

00:17:09,120 --> 00:17:13,280
and i can actually return this because

00:17:11,679 --> 00:17:16,240
i'm marrying this out and

00:17:13,280 --> 00:17:16,959
this doesn't return my error properly

00:17:16,240 --> 00:17:18,959
right

00:17:16,959 --> 00:17:20,480
you need sudo to be run although this is

00:17:18,959 --> 00:17:23,600
actually possible to

00:17:20,480 --> 00:17:25,439
be removed you can uh configure it uh

00:17:23,600 --> 00:17:29,360
you can configure its uh

00:17:25,439 --> 00:17:32,320
container d to run this uh in

00:17:29,360 --> 00:17:33,760
is as another user okay so there is a

00:17:32,320 --> 00:17:37,440
config file in

00:17:33,760 --> 00:17:40,799
i think it's slash cdc slash container d

00:17:37,440 --> 00:17:43,120
uh config.tamal that uh allows you to

00:17:40,799 --> 00:17:44,240
change the default user id and the file

00:17:43,120 --> 00:17:47,200
group id the container

00:17:44,240 --> 00:17:48,960
is going to create its uh sockets and

00:17:47,200 --> 00:17:50,559
it's going to create all this process so

00:17:48,960 --> 00:17:52,960
you can actually change this

00:17:50,559 --> 00:17:53,840
to allow you to run continuity without

00:17:52,960 --> 00:17:56,720
sudo but

00:17:53,840 --> 00:17:57,120
it requires extra configuration right uh

00:17:56,720 --> 00:17:59,679
and

00:17:57,120 --> 00:18:00,960
actually this is the most important part

00:17:59,679 --> 00:18:02,880
uh we had the

00:18:00,960 --> 00:18:04,559
the error strings we had all the output

00:18:02,880 --> 00:18:05,360
strings which is kind of boring it's

00:18:04,559 --> 00:18:07,760
kind of

00:18:05,360 --> 00:18:09,679
complicated to treat but it's doable but

00:18:07,760 --> 00:18:10,640
uh the only thing that we need to

00:18:09,679 --> 00:18:13,679
actually

00:18:10,640 --> 00:18:16,799
be uh a aware of is that

00:18:13,679 --> 00:18:20,320
this is a huge security failure because

00:18:16,799 --> 00:18:20,720
we can input anything into that so if we

00:18:20,320 --> 00:18:23,280
run

00:18:20,720 --> 00:18:24,480
into any attacks or if we run any into

00:18:23,280 --> 00:18:26,960
any hackers or something

00:18:24,480 --> 00:18:27,600
we need to sanitize all user inputs for

00:18:26,960 --> 00:18:30,799
api

00:18:27,600 --> 00:18:34,080
because this otherwise can be passed on

00:18:30,799 --> 00:18:36,160
to our container decline

00:18:34,080 --> 00:18:37,200
and this can run some things that we

00:18:36,160 --> 00:18:39,919
don't want to run

00:18:37,200 --> 00:18:42,320
inside our machine right so you actually

00:18:39,919 --> 00:18:45,120
have to be very careful on that

00:18:42,320 --> 00:18:46,960
so the conclusion is we can integrate

00:18:45,120 --> 00:18:48,640
containers into javascript

00:18:46,960 --> 00:18:50,080
this is the first way this was the proof

00:18:48,640 --> 00:18:52,480
of concept that i needed

00:18:50,080 --> 00:18:53,280
to make sure that this was actually

00:18:52,480 --> 00:18:56,000
possible

00:18:53,280 --> 00:18:58,000
uh but i wanted to do this a real

00:18:56,000 --> 00:18:58,880
integration like i wanted to integrate

00:18:58,000 --> 00:19:01,200
this

00:18:58,880 --> 00:19:02,320
without manipulating external stuff and

00:19:01,200 --> 00:19:03,919
manipulating

00:19:02,320 --> 00:19:05,919
things that are already there so i

00:19:03,919 --> 00:19:09,280
wanted to actually create something

00:19:05,919 --> 00:19:10,000
that was going to be native okay but not

00:19:09,280 --> 00:19:12,720
so native because

00:19:10,000 --> 00:19:14,240
it's just jrpc right so uh the second

00:19:12,720 --> 00:19:17,440
attempt i did was to

00:19:14,240 --> 00:19:18,960
read on to the container the jpc

00:19:17,440 --> 00:19:21,280
interface so continuity

00:19:18,960 --> 00:19:22,000
was meant to be extended you can extend

00:19:21,280 --> 00:19:24,080
continuity

00:19:22,000 --> 00:19:25,039
and it has a grpc interface that allows

00:19:24,080 --> 00:19:27,440
you to do so

00:19:25,039 --> 00:19:28,480
so uh if you have like this is these are

00:19:27,440 --> 00:19:30,160
all the proto files

00:19:28,480 --> 00:19:32,080
and you can see these are all the

00:19:30,160 --> 00:19:34,960
concepts that container d actually has

00:19:32,080 --> 00:19:35,200
uh containers content dips events images

00:19:34,960 --> 00:19:37,520
uh

00:19:35,200 --> 00:19:39,440
introspection leases and namespaces

00:19:37,520 --> 00:19:41,360
snapshots tasks and

00:19:39,440 --> 00:19:43,200
whatever thing else that you want to do

00:19:41,360 --> 00:19:44,960
and this is like the image service

00:19:43,200 --> 00:19:47,039
okay so we have a gather list to create

00:19:44,960 --> 00:19:48,960
an update image and so on

00:19:47,039 --> 00:19:51,520
the problem is you need to know how to

00:19:48,960 --> 00:19:53,840
do it because

00:19:51,520 --> 00:19:56,080
the interface needs you to control every

00:19:53,840 --> 00:19:58,400
aspect of a container creation pipeline

00:19:56,080 --> 00:19:59,679
from downloading images to uh

00:19:58,400 --> 00:20:02,320
downloading blobs

00:19:59,679 --> 00:20:04,000
reading manifests creating containers

00:20:02,320 --> 00:20:06,640
creating an oci spec for

00:20:04,000 --> 00:20:07,360
both the image and the container uh

00:20:06,640 --> 00:20:10,559
creating

00:20:07,360 --> 00:20:12,080
uh all the bindings you need from the

00:20:10,559 --> 00:20:14,080
file system to the container

00:20:12,080 --> 00:20:16,159
creating all the flags needed and

00:20:14,080 --> 00:20:18,880
everything else so basically

00:20:16,159 --> 00:20:19,280
if you have anything that you run run

00:20:18,880 --> 00:20:21,440
like

00:20:19,280 --> 00:20:22,799
uh you need a lease for researchers need

00:20:21,440 --> 00:20:23,600
to create a lease and you create a

00:20:22,799 --> 00:20:26,400
container and

00:20:23,600 --> 00:20:28,000
mix that up together and in other words

00:20:26,400 --> 00:20:29,360
you need to understand how container d

00:20:28,000 --> 00:20:31,760
works under the hood

00:20:29,360 --> 00:20:33,360
so in every aspect of the container

00:20:31,760 --> 00:20:36,080
creation and every

00:20:33,360 --> 00:20:37,919
aspect of how containers actually work

00:20:36,080 --> 00:20:40,960
uh for this you might need to

00:20:37,919 --> 00:20:43,520
you know read the oci specs for image

00:20:40,960 --> 00:20:45,360
uh the oc aspects for distribution or

00:20:43,520 --> 00:20:46,320
the oci specs for the artifacts or

00:20:45,360 --> 00:20:49,200
containers and

00:20:46,320 --> 00:20:50,159
whatever okay uh the run times back for

00:20:49,200 --> 00:20:53,840
instance

00:20:50,159 --> 00:20:54,559
so uh this is the the example i want to

00:20:53,840 --> 00:20:57,039
show you

00:20:54,559 --> 00:20:58,000
uh if you need to create an image like

00:20:57,039 --> 00:21:01,360
the list

00:20:58,000 --> 00:21:03,200
rpc here doesn't actually get any uh

00:21:01,360 --> 00:21:05,280
parameters it's just a filter a string

00:21:03,200 --> 00:21:08,080
filter to filter the images

00:21:05,280 --> 00:21:09,280
but the create one actually needs a

00:21:08,080 --> 00:21:12,640
image type

00:21:09,280 --> 00:21:14,480
so the image type is not just

00:21:12,640 --> 00:21:16,480
a full image you can just download an

00:21:14,480 --> 00:21:19,760
image and pass on that image

00:21:16,480 --> 00:21:21,200
uh to the grpc interface the image type

00:21:19,760 --> 00:21:23,039
is just a descriptor

00:21:21,200 --> 00:21:25,039
so basically the descriptor is just a

00:21:23,039 --> 00:21:28,000
name and some set of labels

00:21:25,039 --> 00:21:30,640
uh a descriptor a uci descriptor a

00:21:28,000 --> 00:21:33,039
timestamp for creation and update

00:21:30,640 --> 00:21:33,679
and basically the image is just a

00:21:33,039 --> 00:21:36,000
pointer

00:21:33,679 --> 00:21:37,520
to a set of blobs actually the blobs

00:21:36,000 --> 00:21:40,559
pointer to a set of images

00:21:37,520 --> 00:21:42,159
but uh the image interface itself i

00:21:40,559 --> 00:21:43,520
can't create an image without even

00:21:42,159 --> 00:21:45,760
downloading that

00:21:43,520 --> 00:21:47,039
so i can create this image it's going to

00:21:45,760 --> 00:21:49,280
be there but there's

00:21:47,039 --> 00:21:51,520
nothing behind it there is no root file

00:21:49,280 --> 00:21:53,120
system there is no file system at all

00:21:51,520 --> 00:21:54,559
so in order to fully create the image we

00:21:53,120 --> 00:21:56,640
need to download the content

00:21:54,559 --> 00:21:58,320
so this is the service for content that

00:21:56,640 --> 00:22:00,720
we need to download it and

00:21:58,320 --> 00:22:02,960
these downloads are blobs as you can see

00:22:00,720 --> 00:22:04,480
if i run like ctr content list

00:22:02,960 --> 00:22:06,159
we're gonna see that we have all the

00:22:04,480 --> 00:22:08,799
layers from our image

00:22:06,159 --> 00:22:09,679
like it's just three layers but those

00:22:08,799 --> 00:22:12,799
are the blobs

00:22:09,679 --> 00:22:13,600
that uh i downloaded when i pull the

00:22:12,799 --> 00:22:15,600
image

00:22:13,600 --> 00:22:18,159
and in other words you need to

00:22:15,600 --> 00:22:20,080
understand all the flux of how to

00:22:18,159 --> 00:22:22,000
download an image which is not that

00:22:20,080 --> 00:22:22,640
difficult but this is not very well

00:22:22,000 --> 00:22:24,559
documented

00:22:22,640 --> 00:22:26,480
the documentation is a sparse it's

00:22:24,559 --> 00:22:28,960
actually scattered everywhere

00:22:26,480 --> 00:22:29,600
right so it's possible to do it this is

00:22:28,960 --> 00:22:32,559
what i did

00:22:29,600 --> 00:22:32,960
i integrated with the gipps interface so

00:22:32,559 --> 00:22:35,600
let's

00:22:32,960 --> 00:22:36,000
jump into the code so you can actually

00:22:35,600 --> 00:22:39,039
see

00:22:36,000 --> 00:22:41,120
this working okay it's not that

00:22:39,039 --> 00:22:42,960
immense example or something that's

00:22:41,120 --> 00:22:46,159
gonna take your breath away

00:22:42,960 --> 00:22:48,480
but uh in other words uh it shows you

00:22:46,159 --> 00:22:50,480
that it's actually possible to do so so

00:22:48,480 --> 00:22:52,480
what i'm going to do here is just

00:22:50,480 --> 00:22:54,240
uh i'm loading the proto files so the

00:22:52,480 --> 00:22:57,200
profiles are here

00:22:54,240 --> 00:22:58,480
they are completely descripted and they

00:22:57,200 --> 00:23:01,280
are completely

00:22:58,480 --> 00:23:03,039
downloaded into this thing so basically

00:23:01,280 --> 00:23:04,559
this is the content protofile and it's

00:23:03,039 --> 00:23:07,440
very well commented it's very well

00:23:04,559 --> 00:23:10,640
documented here inside the profile

00:23:07,440 --> 00:23:12,480
but not the whole pipeline process

00:23:10,640 --> 00:23:14,000
basically what i'm doing i'm loading

00:23:12,480 --> 00:23:18,320
these proto files using

00:23:14,000 --> 00:23:21,760
the default jrpc module from node.js

00:23:18,320 --> 00:23:22,159
so this is it's a bit laggy because i'm

00:23:21,760 --> 00:23:26,080
using

00:23:22,159 --> 00:23:27,039
x to uh execute visual studio code

00:23:26,080 --> 00:23:29,120
outside of my

00:23:27,039 --> 00:23:30,320
uh linux vm so this is running inside

00:23:29,120 --> 00:23:32,640
the linux vm

00:23:30,320 --> 00:23:34,559
uh so it's a bit laggy but i'm using

00:23:32,640 --> 00:23:37,280
jpcgs in the product loader

00:23:34,559 --> 00:23:38,320
to load an image definition uh and the

00:23:37,280 --> 00:23:41,440
content definition

00:23:38,320 --> 00:23:44,080
here down below as you can see so i'm

00:23:41,440 --> 00:23:46,880
just loading the content.proto and i'm

00:23:44,080 --> 00:23:48,000
loading the images proto file i'm

00:23:46,880 --> 00:23:50,080
creating a client

00:23:48,000 --> 00:23:52,480
so i'm creating this image client from

00:23:50,080 --> 00:23:53,200
the container d services images v1

00:23:52,480 --> 00:23:56,400
images

00:23:53,200 --> 00:23:58,880
and i'm binding it to the unix

00:23:56,400 --> 00:24:00,880
socket so this is the address that we're

00:23:58,880 --> 00:24:03,120
going to bind to our jrpc server

00:24:00,880 --> 00:24:04,559
okay container d actually allows you to

00:24:03,120 --> 00:24:08,000
expose this as a tcp

00:24:04,559 --> 00:24:09,039
and over http server and i can't create

00:24:08,000 --> 00:24:12,400
this without any

00:24:09,039 --> 00:24:14,799
uh you know jpc requires you to have a

00:24:12,400 --> 00:24:17,360
certificate because it uses http 2

00:24:14,799 --> 00:24:18,880
uh under the hood so we can actually

00:24:17,360 --> 00:24:21,440
create an empty certificate

00:24:18,880 --> 00:24:23,360
using this uh and we can add this

00:24:21,440 --> 00:24:24,080
metadata it's just a header base

00:24:23,360 --> 00:24:26,799
basically

00:24:24,080 --> 00:24:28,320
so it's a header uh named container the

00:24:26,799 --> 00:24:29,919
namespace and we are going to use this

00:24:28,320 --> 00:24:32,240
namespace jsctr

00:24:29,919 --> 00:24:34,240
right so js continuity and this is the

00:24:32,240 --> 00:24:34,640
payload that i can use to create an

00:24:34,240 --> 00:24:36,559
image

00:24:34,640 --> 00:24:37,679
so it's the name of the image the target

00:24:36,559 --> 00:24:39,520
this is the descriptor

00:24:37,679 --> 00:24:41,919
uh the oci descriptor which is a

00:24:39,520 --> 00:24:42,640
basically a size a digest and a media

00:24:41,919 --> 00:24:44,960
type

00:24:42,640 --> 00:24:47,039
uh and the creation dates so i can

00:24:44,960 --> 00:24:48,000
create this image using this payload and

00:24:47,039 --> 00:24:50,159
that namespace

00:24:48,000 --> 00:24:52,960
and i can list all the images using a

00:24:50,159 --> 00:24:56,240
filter which i'm just not going to use

00:24:52,960 --> 00:24:56,799
uh for the creation i'm just going to

00:24:56,240 --> 00:24:59,039
use

00:24:56,799 --> 00:25:00,480
the content definition right so in order

00:24:59,039 --> 00:25:02,720
to do this

00:25:00,480 --> 00:25:05,200
first i'm gonna run this for you uh down

00:25:02,720 --> 00:25:08,799
below here npm

00:25:05,200 --> 00:25:11,520
start uh and as you can see i can

00:25:08,799 --> 00:25:11,919
uh download this image so i downloaded

00:25:11,520 --> 00:25:16,000
that

00:25:11,919 --> 00:25:17,919
so this image is now here and uh

00:25:16,000 --> 00:25:20,159
if i try to download it again i'm gonna

00:25:17,919 --> 00:25:22,480
have a error

00:25:20,159 --> 00:25:23,600
okay because the image is already there

00:25:22,480 --> 00:25:25,279
as you can see

00:25:23,600 --> 00:25:26,799
the image already exists as you can see

00:25:25,279 --> 00:25:29,120
this is a very good

00:25:26,799 --> 00:25:30,559
error details it's a very good error

00:25:29,120 --> 00:25:31,919
code so as you can see we have a code

00:25:30,559 --> 00:25:32,480
you have details you have a lot of other

00:25:31,919 --> 00:25:35,520
things

00:25:32,480 --> 00:25:36,559
and if i execute this on my amazing

00:25:35,520 --> 00:25:39,600
container api

00:25:36,559 --> 00:25:41,039
here but changing the namespace to jsctr

00:25:39,600 --> 00:25:44,960
we are going to see

00:25:41,039 --> 00:25:47,120
that this is actually what we just

00:25:44,960 --> 00:25:48,640
did but i cannot create a container from

00:25:47,120 --> 00:25:51,679
this image because uh

00:25:48,640 --> 00:25:54,320
it's just a pointer right so uh

00:25:51,679 --> 00:25:56,080
this is what i did right now this is

00:25:54,320 --> 00:25:58,799
what i had the time to create for

00:25:56,080 --> 00:25:59,919
this presentation because these two uh

00:25:58,799 --> 00:26:02,640
content definitions

00:25:59,919 --> 00:26:04,880
does not need actually any inputs so

00:26:02,640 --> 00:26:06,720
this is the output from the container uh

00:26:04,880 --> 00:26:09,039
as the content definition as you can see

00:26:06,720 --> 00:26:12,159
this is just a blob file that is

00:26:09,039 --> 00:26:12,720
put into json uh and basically this is

00:26:12,159 --> 00:26:15,840
what

00:26:12,720 --> 00:26:16,240
we have when we download images okay so

00:26:15,840 --> 00:26:19,279
now

00:26:16,240 --> 00:26:21,039
back to our presentation over here we're

00:26:19,279 --> 00:26:23,679
running out of time

00:26:21,039 --> 00:26:24,159
uh this is the pros oh every every of

00:26:23,679 --> 00:26:26,320
these

00:26:24,159 --> 00:26:27,279
every one of those two attempts have

00:26:26,320 --> 00:26:29,200
pros and cons

00:26:27,279 --> 00:26:30,720
okay so the first pro is actually we

00:26:29,200 --> 00:26:31,120
have proper error handling as you could

00:26:30,720 --> 00:26:34,480
see

00:26:31,120 --> 00:26:36,720
we have a basically uh a basic

00:26:34,480 --> 00:26:38,000
uh interface for errors and a basic

00:26:36,720 --> 00:26:40,880
interface for

00:26:38,000 --> 00:26:42,400
handling these images and these messages

00:26:40,880 --> 00:26:44,080
and everything else okay so we can

00:26:42,400 --> 00:26:44,799
actually return a proper error to the

00:26:44,080 --> 00:26:47,360
user

00:26:44,799 --> 00:26:48,000
uh we have proper return codes so we can

00:26:47,360 --> 00:26:50,559
actually return

00:26:48,000 --> 00:26:52,799
proper errors to the user and allows you

00:26:50,559 --> 00:26:54,799
to fully control all the aspects of the

00:26:52,799 --> 00:26:56,320
pipeline so if you have anything that

00:26:54,799 --> 00:26:58,880
you want to be

00:26:56,320 --> 00:27:00,400
better or optimized you have caching you

00:26:58,880 --> 00:27:01,760
can do whatever you want from this

00:27:00,400 --> 00:27:03,600
pipeline like you can

00:27:01,760 --> 00:27:04,960
download the manifest and put them into

00:27:03,600 --> 00:27:07,440
cache and then

00:27:04,960 --> 00:27:08,000
download this uh for further downloads

00:27:07,440 --> 00:27:09,840
you can just

00:27:08,000 --> 00:27:11,039
look into the cache and then download

00:27:09,840 --> 00:27:13,360
all the blobs again

00:27:11,039 --> 00:27:14,080
or whatever you can optimize it if you

00:27:13,360 --> 00:27:16,159
can like

00:27:14,080 --> 00:27:17,279
find blobs into different images that

00:27:16,159 --> 00:27:20,320
have the same

00:27:17,279 --> 00:27:22,159
uh digest you can just use them mutually

00:27:20,320 --> 00:27:24,960
or you can add whatever future

00:27:22,159 --> 00:27:25,600
whatever features you want okay so it's

00:27:24,960 --> 00:27:26,960
basically

00:27:25,600 --> 00:27:28,880
the whole control the best of the

00:27:26,960 --> 00:27:29,840
control you have and does not need to be

00:27:28,880 --> 00:27:33,120
in the same machine

00:27:29,840 --> 00:27:36,320
you can as i said uh config container g

00:27:33,120 --> 00:27:38,799
to output the jpc interface into

00:27:36,320 --> 00:27:39,840
a tcp port but it needs you to have a

00:27:38,799 --> 00:27:41,520
crt

00:27:39,840 --> 00:27:43,440
certificate so you need to have a

00:27:41,520 --> 00:27:45,679
certificate file both for

00:27:43,440 --> 00:27:47,600
the you have to actually have to have a

00:27:45,679 --> 00:27:50,640
certificate file in a private key file

00:27:47,600 --> 00:27:53,120
to be able to do that but once you has

00:27:50,640 --> 00:27:54,960
once you have this you can uh connect to

00:27:53,120 --> 00:27:57,039
your grpc api for

00:27:54,960 --> 00:27:59,120
from whatever uh external machine you

00:27:57,039 --> 00:28:00,559
have so it doesn't require sudo

00:27:59,120 --> 00:28:02,159
because you are actually connecting

00:28:00,559 --> 00:28:04,799
straight to continuity and

00:28:02,159 --> 00:28:06,559
it's practically native okay so you're

00:28:04,799 --> 00:28:08,559
just using a native module

00:28:06,559 --> 00:28:11,360
non-native module you're using a native

00:28:08,559 --> 00:28:13,600
protocol you can actually extend this

00:28:11,360 --> 00:28:14,799
uh this is the standard way to extend

00:28:13,600 --> 00:28:16,960
container d okay

00:28:14,799 --> 00:28:18,480
so the cons are that it requires a lot

00:28:16,960 --> 00:28:21,120
of knowledge uh

00:28:18,480 --> 00:28:23,360
i don't even know how to start

00:28:21,120 --> 00:28:25,679
describing this because i didn't even

00:28:23,360 --> 00:28:26,399
discovered how to actually execute this

00:28:25,679 --> 00:28:28,799
in a

00:28:26,399 --> 00:28:30,559
pipeline completely i'm doing this job

00:28:28,799 --> 00:28:32,480
i'm to tell you about this

00:28:30,559 --> 00:28:33,679
by the end of this talk which is already

00:28:32,480 --> 00:28:36,880
in

00:28:33,679 --> 00:28:39,039
hand uh the documentation is a sparse

00:28:36,880 --> 00:28:40,960
both for jrpc in javascript and

00:28:39,039 --> 00:28:41,760
container d so you don't find this very

00:28:40,960 --> 00:28:43,840
easily

00:28:41,760 --> 00:28:44,880
you need to actually read the source

00:28:43,840 --> 00:28:47,440
code for

00:28:44,880 --> 00:28:49,200
go or not for google but for continuity

00:28:47,440 --> 00:28:50,720
and ctr to actually learn how these

00:28:49,200 --> 00:28:54,320
things work and how to build

00:28:50,720 --> 00:28:55,600
the ocr spec it's way harder as you can

00:28:54,320 --> 00:28:56,799
see

00:28:55,600 --> 00:28:58,720
and might be a problem to connect

00:28:56,799 --> 00:29:02,000
external servers since you need

00:28:58,720 --> 00:29:04,480
these certificate files right uh and

00:29:02,000 --> 00:29:05,600
you need everything to actually connect

00:29:04,480 --> 00:29:07,360
to external servers so

00:29:05,600 --> 00:29:09,279
what are the next steps we can do to

00:29:07,360 --> 00:29:12,320
this uh actually

00:29:09,279 --> 00:29:14,320
this opens up a very good opportunity to

00:29:12,320 --> 00:29:16,799
integrate javascript into containers and

00:29:14,320 --> 00:29:18,480
make like ci interfaces or whatever

00:29:16,799 --> 00:29:20,320
actually you want to do

00:29:18,480 --> 00:29:22,000
using containers so what i did is that

00:29:20,320 --> 00:29:24,240
i'm starting a project

00:29:22,000 --> 00:29:26,000
as you can see you can actually go into

00:29:24,240 --> 00:29:28,320
my github account

00:29:26,000 --> 00:29:29,760
and you can help me do this because it's

00:29:28,320 --> 00:29:30,320
really really in the start of this

00:29:29,760 --> 00:29:32,720
project

00:29:30,320 --> 00:29:33,600
it's container djs it there isn't

00:29:32,720 --> 00:29:36,480
anything uh

00:29:33,600 --> 00:29:37,760
that is actually uh like it so i'm

00:29:36,480 --> 00:29:40,640
building this from scratch

00:29:37,760 --> 00:29:42,559
i'm going to use uh everything that i've

00:29:40,640 --> 00:29:42,960
been uh learning so far and everything

00:29:42,559 --> 00:29:46,399
that

00:29:42,960 --> 00:29:49,279
i can find on documentations to build a

00:29:46,399 --> 00:29:50,880
very uh native and very you know useful

00:29:49,279 --> 00:29:54,159
client for continuity so

00:29:50,880 --> 00:29:54,640
javascript folks can uh you know uh use

00:29:54,159 --> 00:29:57,120
this

00:29:54,640 --> 00:29:58,000
to build their own tooling and to build

00:29:57,120 --> 00:30:00,880
their own

00:29:58,000 --> 00:30:01,520
better version of containers docker and

00:30:00,880 --> 00:30:03,279
you know

00:30:01,520 --> 00:30:05,039
leverage all these incredible tooling

00:30:03,279 --> 00:30:05,440
that we have into other languages as

00:30:05,039 --> 00:30:08,559
well

00:30:05,440 --> 00:30:10,640
right so let's add more knowledge and

00:30:08,559 --> 00:30:12,480
actually create more documentation for

00:30:10,640 --> 00:30:15,039
this so if you know how to do it

00:30:12,480 --> 00:30:16,240
uh create more documentation post about

00:30:15,039 --> 00:30:19,760
it blog about it

00:30:16,240 --> 00:30:21,600
and actually share this knowledge so we

00:30:19,760 --> 00:30:22,559
can create a better ecosystem both for

00:30:21,600 --> 00:30:24,960
containers

00:30:22,559 --> 00:30:25,919
and both for the javascript folks and

00:30:24,960 --> 00:30:27,360
both for those who

00:30:25,919 --> 00:30:29,200
actually love containers and love

00:30:27,360 --> 00:30:32,640
javascript like me

00:30:29,200 --> 00:30:35,120
so uh basically this is what uh this is

00:30:32,640 --> 00:30:36,720
what my goal is uh to create more

00:30:35,120 --> 00:30:40,159
documentation into

00:30:36,720 --> 00:30:41,520
uh microsoft docs and whatever other uh

00:30:40,159 --> 00:30:44,399
platforms we have

00:30:41,520 --> 00:30:46,240
to make more people able to create

00:30:44,399 --> 00:30:48,320
containers and to understand containers

00:30:46,240 --> 00:30:48,880
and to show them that containers are not

00:30:48,320 --> 00:30:52,000
that

00:30:48,880 --> 00:30:54,559
hard as it seems to be right so uh

00:30:52,000 --> 00:30:55,679
these are the refs that uh i took so

00:30:54,559 --> 00:30:58,559
basically all the

00:30:55,679 --> 00:30:59,919
uh github files and all the repositories

00:30:58,559 --> 00:31:00,799
that you're gonna see here all the code

00:30:59,919 --> 00:31:03,519
that i showed you

00:31:00,799 --> 00:31:04,720
is in these repositories so uh this is

00:31:03,519 --> 00:31:07,360
the integration example

00:31:04,720 --> 00:31:08,000
using just golang and continuity uh with

00:31:07,360 --> 00:31:10,159
a client

00:31:08,000 --> 00:31:12,000
uh this is this is the js container the

00:31:10,159 --> 00:31:14,799
example that i showed you right here

00:31:12,000 --> 00:31:16,799
uh and this is the ongoing work to the

00:31:14,799 --> 00:31:18,080
container djs client right this is

00:31:16,799 --> 00:31:20,559
mark's article about

00:31:18,080 --> 00:31:22,240
uh jpc web interfaces and he has a lot

00:31:20,559 --> 00:31:24,000
of good articles in his medium

00:31:22,240 --> 00:31:26,000
i really suggest you to go there and

00:31:24,000 --> 00:31:27,840
read it uh it's amazing

00:31:26,000 --> 00:31:30,080
uh how he can integrate this into

00:31:27,840 --> 00:31:32,480
several other languages like java

00:31:30,080 --> 00:31:33,360
he can do this using grpc web it's

00:31:32,480 --> 00:31:36,480
amazing

00:31:33,360 --> 00:31:40,000
uh and well mark's actually one

00:31:36,480 --> 00:31:41,840
of the people that gave me this idea to

00:31:40,000 --> 00:31:43,679
try to integrate this into javascript

00:31:41,840 --> 00:31:44,480
and make it work so i can share these

00:31:43,679 --> 00:31:47,000
things with you

00:31:44,480 --> 00:31:48,240
if you want these slides uh it's on

00:31:47,000 --> 00:31:49,919
slides.also.dev

00:31:48,240 --> 00:31:51,919
uh slash integrating containers into

00:31:49,919 --> 00:31:52,399
javascript so i'm just gonna leave this

00:31:51,919 --> 00:31:55,440
here

00:31:52,399 --> 00:31:57,200
and uh thank you so much

00:31:55,440 --> 00:31:59,360
and it's a pleasure to be here if you

00:31:57,200 --> 00:32:00,320
wanna talk to me if you wanna ping me

00:31:59,360 --> 00:32:03,440
out on anything

00:32:00,320 --> 00:32:05,679
info dot l santos dot dev and well

00:32:03,440 --> 00:32:07,519
i'm always available on twitter into uh

00:32:05,679 --> 00:32:09,600
facebook or linkedin whatever

00:32:07,519 --> 00:32:11,200
in github so if you want to help just

00:32:09,600 --> 00:32:13,360
come on and ping me so

00:32:11,200 --> 00:32:15,840
thanks a lot and i hope you have a great

00:32:13,360 --> 00:32:15,840

YouTube URL: https://www.youtube.com/watch?v=y1D8UD5TX_I


