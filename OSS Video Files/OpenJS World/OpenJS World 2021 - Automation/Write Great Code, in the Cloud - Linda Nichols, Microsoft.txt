Title: Write Great Code, in the Cloud - Linda Nichols, Microsoft
Publication date: 2021-05-31
Playlist: OpenJS World 2021 - Automation
Description: 
	Developers love best practices and have strong opinions about our tools. We’re always improving our processes so we can write the most efficient and maintainable code. Our static code analysis tools are a requirement for development. All of our code is stored in revision control systems and we can’t accept updates that haven’t been unit tested. This is how we write great code. Let’s talk about writing code in a cloud environment. "Serverless" ecosystems can remove the complexity of environments, runtimes, and frameworks. Do our typical development processes change when most of our environment is abstracted away from us? I want to discuss how to maintain best practices in the cloud where there is more management and abstraction. I'll also show some new (and old) tools for development and DevOps to facilitate "serverless" development.
Captions: 
	00:00:01,199 --> 00:00:04,880
hey openjs world my name is linda

00:00:03,520 --> 00:00:07,759
nichols and today i'm going to

00:00:04,880 --> 00:00:09,519
talk about writing great code even in

00:00:07,759 --> 00:00:11,360
the cloud

00:00:09,519 --> 00:00:14,160
so i'm going to start out by going

00:00:11,360 --> 00:00:15,360
through some slides and kind of talking

00:00:14,160 --> 00:00:18,480
about maybe some

00:00:15,360 --> 00:00:21,039
bad process some good process and then

00:00:18,480 --> 00:00:25,199
having a little hands-on demo at the end

00:00:21,039 --> 00:00:27,199
so let's get started so

00:00:25,199 --> 00:00:28,400
again this is me linda nichols i work

00:00:27,199 --> 00:00:31,519
for microsoft i

00:00:28,400 --> 00:00:34,640
am a cloud native global black belt

00:00:31,519 --> 00:00:38,399
and um i like to focus really in

00:00:34,640 --> 00:00:41,200
serverless and um development and

00:00:38,399 --> 00:00:45,520
um really like developer process is

00:00:41,200 --> 00:00:47,680
something i'm really passionate about

00:00:45,520 --> 00:00:49,520
i'm from virginia and i live in norfolk

00:00:47,680 --> 00:00:52,719
virginia where i organize

00:00:49,520 --> 00:00:54,480
a couple developer events um norfolk.js

00:00:52,719 --> 00:00:57,199
is our javascript user

00:00:54,480 --> 00:00:58,000
group and revolution comp is our very

00:00:57,199 --> 00:01:01,280
own

00:00:58,000 --> 00:01:04,000
conference here in virginia beach um

00:01:01,280 --> 00:01:06,559
and i am a co-founder and organizer of

00:01:04,000 --> 00:01:06,559
both of these

00:01:07,760 --> 00:01:12,320
so um the first thing that you have to

00:01:10,560 --> 00:01:15,920
start with anytime you're talking about

00:01:12,320 --> 00:01:18,320
code that's in the cloud or um

00:01:15,920 --> 00:01:19,840
you know serverless um functions of the

00:01:18,320 --> 00:01:20,799
service no matter what cloud platform

00:01:19,840 --> 00:01:22,560
you're talking about you always have to

00:01:20,799 --> 00:01:24,799
have this what is a serverless slide

00:01:22,560 --> 00:01:26,960
and i like to to acknowledge when i do

00:01:24,799 --> 00:01:28,720
this that serverless is completely made

00:01:26,960 --> 00:01:29,920
up it's just like a really catchy

00:01:28,720 --> 00:01:33,119
marketing term

00:01:29,920 --> 00:01:33,119
kind of like cloud

00:01:33,360 --> 00:01:36,880
but when we talk about serverless what

00:01:35,360 --> 00:01:39,040
do we mean so

00:01:36,880 --> 00:01:40,000
serverless really means fully managed

00:01:39,040 --> 00:01:43,360
services

00:01:40,000 --> 00:01:47,439
um event-driven architectures

00:01:43,360 --> 00:01:50,240
different internal and external triggers

00:01:47,439 --> 00:01:51,360
that then execute perhaps functions as a

00:01:50,240 --> 00:01:54,079
service

00:01:51,360 --> 00:01:55,040
that is part of a greater event-driven

00:01:54,079 --> 00:01:56,880
architecture

00:01:55,040 --> 00:01:58,159
but also serverless tends to be very

00:01:56,880 --> 00:02:01,600
inexpensive

00:01:58,159 --> 00:02:03,200
um so it's very cheap essentially

00:02:01,600 --> 00:02:05,439
because you're only paying for what you

00:02:03,200 --> 00:02:05,840
use you don't have servers sitting out

00:02:05,439 --> 00:02:08,879
there

00:02:05,840 --> 00:02:09,599
forever idle holding your code that you

00:02:08,879 --> 00:02:12,000
pay for

00:02:09,599 --> 00:02:13,760
if you have thousands of apis you're

00:02:12,000 --> 00:02:15,280
only paying when those apis are actually

00:02:13,760 --> 00:02:17,440
executed

00:02:15,280 --> 00:02:18,480
also serverless is a focus on

00:02:17,440 --> 00:02:21,040
applications

00:02:18,480 --> 00:02:23,040
so it's more about your code making it

00:02:21,040 --> 00:02:24,640
to the cloud that code being executed

00:02:23,040 --> 00:02:27,520
and not so much about what's happening

00:02:24,640 --> 00:02:29,840
behind the scenes which is why we get to

00:02:27,520 --> 00:02:31,440
serverless which is essentially you know

00:02:29,840 --> 00:02:34,080
just fewer servers

00:02:31,440 --> 00:02:35,040
and you know not really no servers and

00:02:34,080 --> 00:02:37,280
it's essentially

00:02:35,040 --> 00:02:38,800
fear wasted resources because like i

00:02:37,280 --> 00:02:39,360
said you don't have servers just sitting

00:02:38,800 --> 00:02:43,280
out there

00:02:39,360 --> 00:02:46,400
title so serverless is

00:02:43,280 --> 00:02:47,840
for developers because we as developers

00:02:46,400 --> 00:02:49,680
don't really want to have to

00:02:47,840 --> 00:02:51,599
worry about infrastructure in most cases

00:02:49,680 --> 00:02:54,720
we really want to focus on development

00:02:51,599 --> 00:02:56,959
and our code and making our applications

00:02:54,720 --> 00:02:58,400
really you know be as streamlined and as

00:02:56,959 --> 00:03:01,920
fast as possible

00:02:58,400 --> 00:03:04,720
so really also within

00:03:01,920 --> 00:03:05,599
serverless or just code that's executed

00:03:04,720 --> 00:03:08,640
within a cloud

00:03:05,599 --> 00:03:10,640
platform you have like so many services

00:03:08,640 --> 00:03:12,239
that are out there at your disposal

00:03:10,640 --> 00:03:14,800
and a lot of these services really

00:03:12,239 --> 00:03:17,200
replace instances where we might have

00:03:14,800 --> 00:03:19,040
written a lot of code before you know

00:03:17,200 --> 00:03:20,400
javascript developers

00:03:19,040 --> 00:03:23,440
are kind of used to using something like

00:03:20,400 --> 00:03:25,519
happy or express for an http server

00:03:23,440 --> 00:03:26,799
um i don't tend to use those anymore

00:03:25,519 --> 00:03:29,599
because i'm using something

00:03:26,799 --> 00:03:30,400
like api management and azure api

00:03:29,599 --> 00:03:33,680
gateway

00:03:30,400 --> 00:03:34,640
in aws apogee you know all kinds of

00:03:33,680 --> 00:03:37,440
various

00:03:34,640 --> 00:03:39,760
api management you know platforms and

00:03:37,440 --> 00:03:42,480
services instead of writing that code

00:03:39,760 --> 00:03:44,080
and also there's not a lot of you know

00:03:42,480 --> 00:03:46,879
redundant code

00:03:44,080 --> 00:03:47,440
it's just naturally micro services or

00:03:46,879 --> 00:03:49,920
even like

00:03:47,440 --> 00:03:52,560
nano services because functions as a

00:03:49,920 --> 00:03:54,080
service tend to be so small

00:03:52,560 --> 00:03:55,439
and it's a faster time to production

00:03:54,080 --> 00:03:56,239
because you're not worrying about that

00:03:55,439 --> 00:03:58,239
infrastructure

00:03:56,239 --> 00:03:59,280
it's so easy to just deploy these

00:03:58,239 --> 00:04:02,879
functions

00:03:59,280 --> 00:04:02,879
have your architecture ready to go

00:04:04,720 --> 00:04:10,400
but there are actually servers

00:04:07,760 --> 00:04:11,840
so this is a little joke but you know

00:04:10,400 --> 00:04:13,040
apparently in alaska they're very

00:04:11,840 --> 00:04:16,239
concerned whether or not they're

00:04:13,040 --> 00:04:16,239
for servers and zeros

00:04:16,880 --> 00:04:21,199
so for the purpose of this talk i'm

00:04:19,440 --> 00:04:22,160
going to talk about serverless i'm going

00:04:21,199 --> 00:04:24,639
to talk about

00:04:22,160 --> 00:04:25,280
programming in the cloud so to speak in

00:04:24,639 --> 00:04:27,040
general

00:04:25,280 --> 00:04:29,360
but but mainly this is a talk about

00:04:27,040 --> 00:04:30,880
developers we as developers we as

00:04:29,360 --> 00:04:33,440
javascript developers

00:04:30,880 --> 00:04:34,880
and you know how our behavior might be

00:04:33,440 --> 00:04:37,919
the same or different when we're

00:04:34,880 --> 00:04:40,240
now focused on pushing our code to the

00:04:37,919 --> 00:04:43,120
cloud

00:04:40,240 --> 00:04:45,919
so we as javascript developers we have a

00:04:43,120 --> 00:04:45,919
lot of opinions

00:04:46,000 --> 00:04:49,600
and we love process and best practices

00:04:48,720 --> 00:04:51,280
if you know

00:04:49,600 --> 00:04:53,360
developers in general or especially

00:04:51,280 --> 00:04:54,000
javascript developers we love to discuss

00:04:53,360 --> 00:04:56,479
what's our

00:04:54,000 --> 00:04:57,840
what's our favorite everything and how

00:04:56,479 --> 00:05:00,320
to make everything

00:04:57,840 --> 00:05:02,639
you know faster and look better and be

00:05:00,320 --> 00:05:04,639
easier to use

00:05:02,639 --> 00:05:07,039
so we really we like to use our favorite

00:05:04,639 --> 00:05:09,759
editor our favorite languages

00:05:07,039 --> 00:05:11,440
we our favorite formatting tools we want

00:05:09,759 --> 00:05:11,919
our code to be a certain amount of

00:05:11,440 --> 00:05:14,479
pretty

00:05:11,919 --> 00:05:15,280
we want static code analysis rules and

00:05:14,479 --> 00:05:17,520
formatting

00:05:15,280 --> 00:05:19,199
no one will ever deny that they don't

00:05:17,520 --> 00:05:20,320
want these things they'll be arguments

00:05:19,199 --> 00:05:23,120
about

00:05:20,320 --> 00:05:24,240
when to execute these tools or which

00:05:23,120 --> 00:05:26,479
tool to use but

00:05:24,240 --> 00:05:28,400
almost never is anyone saying yeah i

00:05:26,479 --> 00:05:29,680
don't want to do any of this

00:05:28,400 --> 00:05:31,440
you know unless you're talking about a

00:05:29,680 --> 00:05:32,800
situation where you know you're just

00:05:31,440 --> 00:05:33,600
trying to push code to production

00:05:32,800 --> 00:05:36,800
quickly and

00:05:33,600 --> 00:05:38,320
in those cases no one's arguing for that

00:05:36,800 --> 00:05:40,639
it's just situations that sometimes

00:05:38,320 --> 00:05:40,639
happen

00:05:41,120 --> 00:05:45,039
and so these are like some examples

00:05:42,800 --> 00:05:45,680
maybe of all the various things that we

00:05:45,039 --> 00:05:48,880
love and

00:05:45,680 --> 00:05:50,800
may discuss and you know in

00:05:48,880 --> 00:05:52,639
in this perfect world where we're

00:05:50,800 --> 00:05:54,880
executing everything

00:05:52,639 --> 00:05:56,400
um the way that we want um you know

00:05:54,880 --> 00:05:56,880
we're testing the code we've written the

00:05:56,400 --> 00:05:58,720
code

00:05:56,880 --> 00:06:01,680
with all of our perfect tools that we

00:05:58,720 --> 00:06:04,240
love we're testing the code

00:06:01,680 --> 00:06:06,160
oh wait like we tested the code but

00:06:04,240 --> 00:06:09,280
should we have written them before

00:06:06,160 --> 00:06:11,199
do we do tdd maybe not that's another

00:06:09,280 --> 00:06:13,840
developer discussion

00:06:11,199 --> 00:06:16,000
and then we commit the code so now we

00:06:13,840 --> 00:06:18,319
commit the code to a revision control

00:06:16,000 --> 00:06:20,319
system and maybe that system is local

00:06:18,319 --> 00:06:21,840
maybe it's on a server

00:06:20,319 --> 00:06:23,440
you know somewhere within your building

00:06:21,840 --> 00:06:26,479
maybe it's in the cloud

00:06:23,440 --> 00:06:28,960
um you know and then now to get that

00:06:26,479 --> 00:06:31,360
code through development and testing and

00:06:28,960 --> 00:06:34,880
production we've got various

00:06:31,360 --> 00:06:38,319
branching strategies um

00:06:34,880 --> 00:06:41,840
do we squash commits we don't like

00:06:38,319 --> 00:06:44,560
do we um not squash them do we want to

00:06:41,840 --> 00:06:45,600
you know do we want to rebase um our

00:06:44,560 --> 00:06:48,880
commit messages

00:06:45,600 --> 00:06:49,360
is it okay to just you know looks good

00:06:48,880 --> 00:06:51,599
to me

00:06:49,360 --> 00:06:52,800
here's my code or do we need to include

00:06:51,599 --> 00:06:56,479
some sort of issue

00:06:52,800 --> 00:06:59,120
number you know for another um system

00:06:56,479 --> 00:07:00,800
you know the the branch names have to be

00:06:59,120 --> 00:07:02,720
some sort of specific format these are

00:07:00,800 --> 00:07:05,199
all things that developers care about

00:07:02,720 --> 00:07:07,919
and we focus on

00:07:05,199 --> 00:07:09,199
and again all kinds of choices here

00:07:07,919 --> 00:07:11,599
there's nothing

00:07:09,199 --> 00:07:13,680
that anybody has to know or shouldn't

00:07:11,599 --> 00:07:14,479
use it's all just very opinionated and

00:07:13,680 --> 00:07:16,639
most

00:07:14,479 --> 00:07:18,080
products are just you know doing the job

00:07:16,639 --> 00:07:19,919
for us

00:07:18,080 --> 00:07:22,080
you know we're merging our code then

00:07:19,919 --> 00:07:25,280
into master into production

00:07:22,080 --> 00:07:27,199
um do we use pre-commit hooks um do we

00:07:25,280 --> 00:07:29,199
push to a dev branch and then the dev

00:07:27,199 --> 00:07:31,840
branch goes to master do we

00:07:29,199 --> 00:07:33,199
have our individual dev branches we

00:07:31,840 --> 00:07:35,120
issue a pull request

00:07:33,199 --> 00:07:36,479
once we issue a pull request then what

00:07:35,120 --> 00:07:39,120
happens there

00:07:36,479 --> 00:07:42,000
um our code analysis does it happen in

00:07:39,120 --> 00:07:43,680
our editor does it happen in the cloud

00:07:42,000 --> 00:07:45,120
you know we ensure that if we've written

00:07:43,680 --> 00:07:46,160
all these unit tests we want them to

00:07:45,120 --> 00:07:48,560
pass

00:07:46,160 --> 00:07:50,000
um and then you know we request a code

00:07:48,560 --> 00:07:51,840
review because we're working on a team

00:07:50,000 --> 00:07:54,479
with other developers and we care about

00:07:51,840 --> 00:07:54,479
their opinions

00:07:55,039 --> 00:07:58,879
um we and sometimes these are their

00:07:57,919 --> 00:08:02,240
opinions

00:07:58,879 --> 00:08:02,240
you know and

00:08:02,319 --> 00:08:05,759
sometimes those reviewers can be tough

00:08:04,879 --> 00:08:08,720
but it's good

00:08:05,759 --> 00:08:09,680
because it makes us better to kind of

00:08:08,720 --> 00:08:11,360
understand what

00:08:09,680 --> 00:08:12,960
people within our team and external to

00:08:11,360 --> 00:08:14,960
our team might think about the code we

00:08:12,960 --> 00:08:17,440
just wrote

00:08:14,960 --> 00:08:19,199
okay so looks good the code is now

00:08:17,440 --> 00:08:22,400
merged

00:08:19,199 --> 00:08:26,800
and qrci cd tool again

00:08:22,400 --> 00:08:29,360
another very opinionated list

00:08:26,800 --> 00:08:29,360
of tools

00:08:30,400 --> 00:08:37,360
and there's all kinds of choices here

00:08:33,680 --> 00:08:38,479
of different tools that can you know run

00:08:37,360 --> 00:08:40,719
lots of

00:08:38,479 --> 00:08:41,760
smaller tools like code analysis and

00:08:40,719 --> 00:08:45,120
tests etc

00:08:41,760 --> 00:08:46,720
and you know what kind of ci

00:08:45,120 --> 00:08:48,640
you want to use where you want to run

00:08:46,720 --> 00:08:51,600
where you want to be hosted again

00:08:48,640 --> 00:08:52,399
all your choice as long as you are

00:08:51,600 --> 00:08:55,760
choosing

00:08:52,399 --> 00:08:56,720
at least one so now here's the topic of

00:08:55,760 --> 00:08:58,480
our talk

00:08:56,720 --> 00:09:01,440
because we're going to talk about what

00:08:58,480 --> 00:09:03,279
about code that's written for the cloud

00:09:01,440 --> 00:09:04,880
what about serverless code what about

00:09:03,279 --> 00:09:05,760
code that's going to go to a function as

00:09:04,880 --> 00:09:08,160
a service

00:09:05,760 --> 00:09:09,760
as opposed to maybe just application

00:09:08,160 --> 00:09:11,519
code that we're used to writing before

00:09:09,760 --> 00:09:13,040
where it gets packaged up and maybe

00:09:11,519 --> 00:09:15,360
containerized or something

00:09:13,040 --> 00:09:16,240
and it's you know maybe used on-prem or

00:09:15,360 --> 00:09:18,480
it's used in

00:09:16,240 --> 00:09:20,160
you know maybe some other cloud service

00:09:18,480 --> 00:09:23,440
but it's not quite

00:09:20,160 --> 00:09:26,080
functions as a service so i'm going to

00:09:23,440 --> 00:09:29,279
show a pre-recorded demo of kind of

00:09:26,080 --> 00:09:30,880
what i have seen as far as developers

00:09:29,279 --> 00:09:34,640
who are new to the cloud

00:09:30,880 --> 00:09:34,640
pushing their code to production

00:09:35,279 --> 00:09:40,160
and so this is our um dramatic

00:09:38,399 --> 00:09:42,399
reenactment here

00:09:40,160 --> 00:09:45,279
we've got our programmer he's in the aws

00:09:42,399 --> 00:09:48,480
console um this is aws lambda there's an

00:09:45,279 --> 00:09:51,760
editor um the editor you know does have

00:09:48,480 --> 00:09:54,160
like a little bit of um interesting

00:09:51,760 --> 00:09:56,959
features here as far as um

00:09:54,160 --> 00:09:59,200
you know auto complete and you know

00:09:56,959 --> 00:10:01,839
preventing bugs but as you can tell

00:09:59,200 --> 00:10:05,040
he made some choices there he made some

00:10:01,839 --> 00:10:08,720
changes and then he pushed to production

00:10:05,040 --> 00:10:11,920
so that seems a little dramatic

00:10:08,720 --> 00:10:15,040
however i have seen this happen before

00:10:11,920 --> 00:10:15,440
um that editor is available it looks

00:10:15,040 --> 00:10:18,800
like

00:10:15,440 --> 00:10:19,360
your id that you're used to and there is

00:10:18,800 --> 00:10:22,720
a

00:10:19,360 --> 00:10:22,720
button to deploy there

00:10:23,120 --> 00:10:28,320
but it's a little scary right because

00:10:26,480 --> 00:10:29,760
what if we think back to all we know we

00:10:28,320 --> 00:10:32,000
just went through all these tools that

00:10:29,760 --> 00:10:35,360
we love and we use and

00:10:32,000 --> 00:10:38,240
processes and linting and you know

00:10:35,360 --> 00:10:40,720
testing and where was all that no unit

00:10:38,240 --> 00:10:43,920
tests were run nothing was linted

00:10:40,720 --> 00:10:46,240
um it just went to production and

00:10:43,920 --> 00:10:48,320
and then basically testing then happens

00:10:46,240 --> 00:10:50,000
in production

00:10:48,320 --> 00:10:52,079
so let's kind of zoom in again and look

00:10:50,000 --> 00:10:53,279
at this code well already we're seeing

00:10:52,079 --> 00:10:55,839
that there's some

00:10:53,279 --> 00:10:57,920
kind of bugs in this code there's um

00:10:55,839 --> 00:10:59,360
even this editor here is flagging some

00:10:57,920 --> 00:11:01,839
errors but our developer

00:10:59,360 --> 00:11:03,040
is is essentially ignoring those and

00:11:01,839 --> 00:11:05,200
hitting publish

00:11:03,040 --> 00:11:06,959
because we said it was fast to get code

00:11:05,200 --> 00:11:09,600
to production using serverless and he's

00:11:06,959 --> 00:11:09,600
going to do that

00:11:11,360 --> 00:11:14,560
yeah but it doesn't make sense right

00:11:12,880 --> 00:11:17,360
like why would you push your

00:11:14,560 --> 00:11:18,160
code to production when we've talked

00:11:17,360 --> 00:11:22,079
about how

00:11:18,160 --> 00:11:22,079
developers have all these opinions

00:11:22,320 --> 00:11:26,399
and unfortunately no matter how fully

00:11:24,640 --> 00:11:30,320
managed a serverless or

00:11:26,399 --> 00:11:31,519
cloud service is it's not fully managed

00:11:30,320 --> 00:11:33,839
enough to format

00:11:31,519 --> 00:11:35,200
and debug and test your messy code

00:11:33,839 --> 00:11:37,920
garbage in

00:11:35,200 --> 00:11:37,920
garbage out

00:11:38,959 --> 00:11:45,360
so as developers we hold these

00:11:42,320 --> 00:11:46,160
processes so close to our heart and then

00:11:45,360 --> 00:11:47,920
we're willing to

00:11:46,160 --> 00:11:49,600
throw them away and you may say well

00:11:47,920 --> 00:11:54,320
that's not me i would never do that

00:11:49,600 --> 00:11:54,320
but i've seen it a lot because

00:11:54,720 --> 00:11:59,120
well the cloud is new and it's a little

00:11:56,560 --> 00:12:02,880
scary and you're given all these tools

00:11:59,120 --> 00:12:03,440
and it seems like a new way of doing

00:12:02,880 --> 00:12:05,680
things

00:12:03,440 --> 00:12:07,519
and so it's easy to kind of forget that

00:12:05,680 --> 00:12:09,200
it's still development

00:12:07,519 --> 00:12:11,279
that you still want to go through your

00:12:09,200 --> 00:12:13,200
software development life cycle

00:12:11,279 --> 00:12:15,040
that the things we've been doing for

00:12:13,200 --> 00:12:15,680
years the things we fight about on the

00:12:15,040 --> 00:12:17,760
internet

00:12:15,680 --> 00:12:18,800
these tools that we disagree with the

00:12:17,760 --> 00:12:21,040
reason they exist

00:12:18,800 --> 00:12:24,320
is because they're important because all

00:12:21,040 --> 00:12:28,000
of these checks and balances are how we

00:12:24,320 --> 00:12:30,560
create good software and we can still

00:12:28,000 --> 00:12:34,079
capitalize on the fact that

00:12:30,560 --> 00:12:35,279
serverless or you know cloud development

00:12:34,079 --> 00:12:38,959
platforms are

00:12:35,279 --> 00:12:42,000
fast reduction without sort of

00:12:38,959 --> 00:12:45,040
losing our soul so

00:12:42,000 --> 00:12:46,720
i'm going to talk about now how um

00:12:45,040 --> 00:12:49,040
all of the development practices that we

00:12:46,720 --> 00:12:51,120
love still apply in this environment

00:12:49,040 --> 00:12:52,880
that even though it's scary even though

00:12:51,120 --> 00:12:55,519
it's weird even though it's different

00:12:52,880 --> 00:12:57,680
it's still the same so you don't have to

00:12:55,519 --> 00:13:00,079
sacrifice all that you

00:12:57,680 --> 00:13:01,360
love like maybe some of the services

00:13:00,079 --> 00:13:03,600
that you love

00:13:01,360 --> 00:13:05,200
we will now get rid of because we don't

00:13:03,600 --> 00:13:06,000
need that code anymore we don't need

00:13:05,200 --> 00:13:08,480
those frameworks

00:13:06,000 --> 00:13:09,200
but as far as you know running through

00:13:08,480 --> 00:13:12,320
testing

00:13:09,200 --> 00:13:13,920
your code making sure that it's quality

00:13:12,320 --> 00:13:15,600
um all of those things are super

00:13:13,920 --> 00:13:18,000
important and i just always want to keep

00:13:15,600 --> 00:13:20,480
stressing that

00:13:18,000 --> 00:13:21,680
so here's my very highly opinionated

00:13:20,480 --> 00:13:23,839
tool set and

00:13:21,680 --> 00:13:24,880
and you know anyone could could sort of

00:13:23,839 --> 00:13:26,800
say that that

00:13:24,880 --> 00:13:28,160
any of these tools they would prefer

00:13:26,800 --> 00:13:29,839
something else and that's fine

00:13:28,160 --> 00:13:31,360
but this is what i'm going to kind of

00:13:29,839 --> 00:13:35,200
demonstrate today

00:13:31,360 --> 00:13:37,440
um so

00:13:35,200 --> 00:13:39,680
first of all eslint this is very

00:13:37,440 --> 00:13:41,360
important to me i love eslint i have

00:13:39,680 --> 00:13:44,480
eslint in my

00:13:41,360 --> 00:13:46,000
editor i have sometimes i'll use eslint

00:13:44,480 --> 00:13:49,199
as a pre-commit hook

00:13:46,000 --> 00:13:52,000
i always have it as some sort of

00:13:49,199 --> 00:13:53,680
like cicd process no matter what tool

00:13:52,000 --> 00:13:56,560
i'm using to run a linter

00:13:53,680 --> 00:13:57,120
because i've seen code that wasn't

00:13:56,560 --> 00:14:00,399
linted

00:13:57,120 --> 00:14:02,720
make it into a code base and

00:14:00,399 --> 00:14:04,000
sometimes it's just ugly sometimes it's

00:14:02,720 --> 00:14:07,279
just inconsistent

00:14:04,000 --> 00:14:09,680
but lint can also find errors um

00:14:07,279 --> 00:14:10,639
so if you're not familiar with eslint

00:14:09,680 --> 00:14:14,079
essentially it

00:14:10,639 --> 00:14:17,120
is a list of rules that you define

00:14:14,079 --> 00:14:18,560
and then you know if you have it so it

00:14:17,120 --> 00:14:21,680
is automatic in your brow

00:14:18,560 --> 00:14:24,480
like in your sorry in your editor

00:14:21,680 --> 00:14:25,600
then it will tell you as you're typing

00:14:24,480 --> 00:14:27,199
um

00:14:25,600 --> 00:14:29,120
that you're going against one of the

00:14:27,199 --> 00:14:32,480
rules and

00:14:29,120 --> 00:14:34,959
i really also like eslint as a

00:14:32,480 --> 00:14:36,160
team tool because you can create eslint

00:14:34,959 --> 00:14:38,639
configurations

00:14:36,160 --> 00:14:39,680
for your team if you all have the same

00:14:38,639 --> 00:14:43,040
highly

00:14:39,680 --> 00:14:44,639
opinionated opinion or your manager has

00:14:43,040 --> 00:14:46,639
a certain opinion

00:14:44,639 --> 00:14:48,000
then you can define that in the rules

00:14:46,639 --> 00:14:50,000
and then you're not always

00:14:48,000 --> 00:14:51,440
kind of arguing amongst each other

00:14:50,000 --> 00:14:52,399
whether or not those braces need to be

00:14:51,440 --> 00:14:55,839
at the end of the line

00:14:52,399 --> 00:14:56,800
or the next line um and so there's also

00:14:55,839 --> 00:14:58,880
configurations

00:14:56,800 --> 00:15:00,959
out there that sort of bigger companies

00:14:58,880 --> 00:15:03,760
have made like airbnb

00:15:00,959 --> 00:15:04,720
or spotify um or even the eslint

00:15:03,760 --> 00:15:06,399
recommended

00:15:04,720 --> 00:15:08,320
um that you can import and then you can

00:15:06,399 --> 00:15:09,440
kind of use their rules and then you can

00:15:08,320 --> 00:15:10,079
kind of overwrite the ones you don't

00:15:09,440 --> 00:15:13,839
agree with

00:15:10,079 --> 00:15:16,240
like as necessary editor config

00:15:13,839 --> 00:15:18,079
is a file that you can put in your code

00:15:16,240 --> 00:15:21,279
base that will also enforce

00:15:18,079 --> 00:15:21,680
style like tabs versus spaces for a code

00:15:21,279 --> 00:15:25,120
base

00:15:21,680 --> 00:15:26,480
so if you have um maybe like open source

00:15:25,120 --> 00:15:28,000
software that a lot of people are

00:15:26,480 --> 00:15:28,800
contributing to this is really helpful

00:15:28,000 --> 00:15:30,160
so that

00:15:28,800 --> 00:15:33,279
when you're looking at the code later

00:15:30,160 --> 00:15:36,800
the spacing it isn't really off

00:15:33,279 --> 00:15:39,519
um prettier is sort of similar um

00:15:36,800 --> 00:15:40,160
prettier just sort of builds upon eslint

00:15:39,519 --> 00:15:43,519
and

00:15:40,160 --> 00:15:46,720
i tend to use this as a pre-commit hook

00:15:43,519 --> 00:15:48,560
um because then it allows

00:15:46,720 --> 00:15:50,800
me to sort of code the way i'm

00:15:48,560 --> 00:15:52,639
comfortable coding

00:15:50,800 --> 00:15:54,480
but then prettier runs right before i

00:15:52,639 --> 00:15:57,759
commit and it formats everything

00:15:54,480 --> 00:15:58,959
in the way that the code base wants even

00:15:57,759 --> 00:16:01,199
if it's different

00:15:58,959 --> 00:16:02,560
from my personal development style

00:16:01,199 --> 00:16:04,320
because that's something you might not

00:16:02,560 --> 00:16:07,360
want to enforce as a team

00:16:04,320 --> 00:16:10,880
you might not if your developers can

00:16:07,360 --> 00:16:11,440
code faster using their methodology and

00:16:10,880 --> 00:16:13,600
then just

00:16:11,440 --> 00:16:15,440
have it automatically conform to what

00:16:13,600 --> 00:16:16,320
you want as let's say a manager or a

00:16:15,440 --> 00:16:18,000
team lead

00:16:16,320 --> 00:16:20,160
before it's committed then that makes

00:16:18,000 --> 00:16:22,079
things a lot easier

00:16:20,160 --> 00:16:23,440
for testing i like mocha i've also used

00:16:22,079 --> 00:16:25,920
just um

00:16:23,440 --> 00:16:27,040
there's lots of testing tools out there

00:16:25,920 --> 00:16:29,279
um this is

00:16:27,040 --> 00:16:31,680
unit testing i'm i'm talking about here

00:16:29,279 --> 00:16:34,959
more so for ci i like github actions

00:16:31,680 --> 00:16:36,000
i also like azure devops um i've used

00:16:34,959 --> 00:16:39,040
travis ci quite

00:16:36,000 --> 00:16:41,040
a bit also in the past um and today i'm

00:16:39,040 --> 00:16:43,600
going to show github actions

00:16:41,040 --> 00:16:44,720
and for an editor i really like vs code

00:16:43,600 --> 00:16:47,360
um

00:16:44,720 --> 00:16:48,240
and off language of course javascript

00:16:47,360 --> 00:16:50,800
node.js

00:16:48,240 --> 00:16:52,720
um and for cloud well i prefer azure

00:16:50,800 --> 00:16:55,040
because i work for microsoft

00:16:52,720 --> 00:16:56,480
um but i have a little asterisk there

00:16:55,040 --> 00:16:59,519
because today i'm going to

00:16:56,480 --> 00:17:02,880
show in my ci cd process how i would

00:16:59,519 --> 00:17:06,079
deploy to both azure and aws

00:17:02,880 --> 00:17:07,839
lambda um just as sort of

00:17:06,079 --> 00:17:10,400
proof that this is really kind of a

00:17:07,839 --> 00:17:12,079
cloud agnostic way of thinking

00:17:10,400 --> 00:17:13,439
even though some of my tools here with

00:17:12,079 --> 00:17:15,919
github and

00:17:13,439 --> 00:17:16,880
vs code seem to very be very microsoft

00:17:15,919 --> 00:17:19,919
specific

00:17:16,880 --> 00:17:23,039
it's actually the idea of using

00:17:19,919 --> 00:17:26,160
a tool set to ensure that your

00:17:23,039 --> 00:17:27,760
code is bug free and looks really great

00:17:26,160 --> 00:17:29,280
and is going to cause you no issues in

00:17:27,760 --> 00:17:33,840
production that's really

00:17:29,280 --> 00:17:33,840
a very agnostic idea

00:17:34,320 --> 00:17:38,799
so now i'm gonna go uh switch over to my

00:17:36,720 --> 00:17:42,640
editor and i'm going to

00:17:38,799 --> 00:17:45,520
work on this demo essentially it's

00:17:42,640 --> 00:17:46,080
an algorithm um we'll put an asterisk

00:17:45,520 --> 00:17:48,160
there

00:17:46,080 --> 00:17:50,080
uh to determine who is the best

00:17:48,160 --> 00:17:52,400
ghostbuster perhaps you've noticed

00:17:50,080 --> 00:17:53,200
that theme throughout this talk um

00:17:52,400 --> 00:17:56,080
there's my

00:17:53,200 --> 00:17:56,880
uh github repo there on no dana only

00:17:56,080 --> 00:17:59,440
zuul

00:17:56,880 --> 00:18:02,640
and um we're gonna go through just some

00:17:59,440 --> 00:18:04,880
a very simple process i mean this is not

00:18:02,640 --> 00:18:06,559
production code by any means but just

00:18:04,880 --> 00:18:10,000
demonstrating how

00:18:06,559 --> 00:18:13,280
if i'm developing services

00:18:10,000 --> 00:18:15,039
for a serverless system using a function

00:18:13,280 --> 00:18:17,120
as a service whether it's azure

00:18:15,039 --> 00:18:18,720
functions or aws lambda

00:18:17,120 --> 00:18:20,960
what does my development process look

00:18:18,720 --> 00:18:20,960
like

00:18:22,480 --> 00:18:26,720
all right so now i'm in vs code and i

00:18:25,760 --> 00:18:30,799
want to talk about

00:18:26,720 --> 00:18:33,919
just a couple things now with um

00:18:30,799 --> 00:18:36,480
my workflows so i have three workflows

00:18:33,919 --> 00:18:37,520
one is pull request and then i have two

00:18:36,480 --> 00:18:40,400
here that are essentially

00:18:37,520 --> 00:18:42,799
my production workflows my pull request

00:18:40,400 --> 00:18:47,200
workflow the idea for this

00:18:42,799 --> 00:18:50,160
is that this just runs my build

00:18:47,200 --> 00:18:50,960
my unit tests um and it does some

00:18:50,160 --> 00:18:54,320
linting

00:18:50,960 --> 00:18:56,000
and really this uh just this runs on

00:18:54,320 --> 00:18:58,559
both of my services so

00:18:56,000 --> 00:19:00,240
i have four services overall two are not

00:18:58,559 --> 00:19:01,120
implemented yet i've implemented

00:19:00,240 --> 00:19:03,360
spengler

00:19:01,120 --> 00:19:04,240
and venkman and this runs those two

00:19:03,360 --> 00:19:05,919
services

00:19:04,240 --> 00:19:07,679
and essentially what i want to do with

00:19:05,919 --> 00:19:11,840
this is i want to say

00:19:07,679 --> 00:19:13,360
when a user issues a pull request on my

00:19:11,840 --> 00:19:15,600
main branch

00:19:13,360 --> 00:19:16,640
that the linting and the tests have to

00:19:15,600 --> 00:19:18,880
pass

00:19:16,640 --> 00:19:20,400
before that pull request can ever be

00:19:18,880 --> 00:19:21,760
pulled in an admin can

00:19:20,400 --> 00:19:24,480
you know do it if they want to but at

00:19:21,760 --> 00:19:25,840
least that barrier is there that these

00:19:24,480 --> 00:19:28,559
initial checks have to

00:19:25,840 --> 00:19:30,320
have to run then also for each one of

00:19:28,559 --> 00:19:33,679
these services spangler is

00:19:30,320 --> 00:19:35,440
um azure functions

00:19:33,679 --> 00:19:36,720
it deploys to azure functions after it

00:19:35,440 --> 00:19:41,120
also runs some

00:19:36,720 --> 00:19:45,360
additional tests even and then vinkman

00:19:41,120 --> 00:19:46,880
deploys to aws lambda

00:19:45,360 --> 00:19:49,039
if you're not familiar with github

00:19:46,880 --> 00:19:49,840
actions um this is sort of the format

00:19:49,039 --> 00:19:53,200
here

00:19:49,840 --> 00:19:56,000
um this yaml form format and then

00:19:53,200 --> 00:19:56,799
at the top here it will talk about um

00:19:56,000 --> 00:19:58,880
the trigger

00:19:56,799 --> 00:20:00,880
so here it's whenever you push anything

00:19:58,880 --> 00:20:02,480
to the main branch it deploys

00:20:00,880 --> 00:20:04,720
and then i have some checks that people

00:20:02,480 --> 00:20:08,320
can't push directly to maine without

00:20:04,720 --> 00:20:08,320
first issuing a pull request

00:20:15,280 --> 00:20:21,120
all right um now i want to look at my

00:20:18,240 --> 00:20:21,919
eslint file so these are the rules i

00:20:21,120 --> 00:20:24,559
have

00:20:21,919 --> 00:20:26,240
my base configuration is the eslen

00:20:24,559 --> 00:20:28,400
recommended

00:20:26,240 --> 00:20:30,240
and then i override that a little bit

00:20:28,400 --> 00:20:31,600
and say like i want my intention to be

00:20:30,240 --> 00:20:33,440
more spaces

00:20:31,600 --> 00:20:34,880
i want my quotes to be single and i

00:20:33,440 --> 00:20:36,000
always want to have semicolons and

00:20:34,880 --> 00:20:38,559
that's very

00:20:36,000 --> 00:20:40,960
opinionated here and i also have my

00:20:38,559 --> 00:20:42,080
editor config file that indicates that i

00:20:40,960 --> 00:20:44,320
prefer

00:20:42,080 --> 00:20:46,159
spaces to tabs and you know

00:20:44,320 --> 00:20:49,120
automatically trimming the white space

00:20:46,159 --> 00:20:51,280
that's really nice too

00:20:49,120 --> 00:20:53,520
um so let's go into one of my services

00:20:51,280 --> 00:20:53,520
here

00:20:53,600 --> 00:20:57,200
now it might look like there's some

00:20:54,880 --> 00:20:59,039
really bad html in here but

00:20:57,200 --> 00:21:00,720
just push the i believe button because

00:20:59,039 --> 00:21:02,640
this is a very complicated

00:21:00,720 --> 00:21:04,559
algorithm to determine the best

00:21:02,640 --> 00:21:06,159
ghostbuster

00:21:04,559 --> 00:21:07,600
so you can see here in my editor that if

00:21:06,159 --> 00:21:09,600
i remove the semicolon i

00:21:07,600 --> 00:21:11,120
immediately get an indicator there so i

00:21:09,600 --> 00:21:16,799
know

00:21:11,120 --> 00:21:19,919
what i have done so

00:21:16,799 --> 00:21:22,640
let's he let's say let's make a couple

00:21:19,919 --> 00:21:22,640
little changes

00:21:24,960 --> 00:21:28,640
so that was in spangler now let's go to

00:21:27,440 --> 00:21:31,840
venkman

00:21:28,640 --> 00:21:31,840
which is very similar

00:21:41,120 --> 00:21:59,840
now i'm down in my

00:21:44,400 --> 00:21:59,840
terminal here i have modified two files

00:22:02,159 --> 00:22:07,280
you might notice too that i am on a

00:22:05,039 --> 00:22:09,280
different branch that's called openjs

00:22:07,280 --> 00:22:13,840
world this is my development branch

00:22:09,280 --> 00:22:13,840
it's a branch off of maine

00:22:18,640 --> 00:22:22,679
oh i don't want to send it to maine i

00:22:20,640 --> 00:22:26,159
want to send it to

00:22:22,679 --> 00:22:26,880
openjs world if i tried to send it to

00:22:26,159 --> 00:22:28,400
maine

00:22:26,880 --> 00:22:29,840
it would be very confused that it's on

00:22:28,400 --> 00:22:31,039
the wrong branch so that's just a nice

00:22:29,840 --> 00:22:33,840
little check of

00:22:31,039 --> 00:22:33,840
using git here

00:22:35,440 --> 00:22:42,799
all right so now my code has been pushed

00:22:38,559 --> 00:22:42,799
let's go back to github

00:22:45,520 --> 00:22:49,120
so now github uh this is my github repo

00:22:48,240 --> 00:22:52,000
github has

00:22:49,120 --> 00:22:54,720
seen that i've now pushed to this branch

00:22:52,000 --> 00:22:56,320
so now i'm gonna do a pull request

00:22:54,720 --> 00:22:58,640
um and i'm gonna say this message is

00:22:56,320 --> 00:22:59,360
okay i would normally leave some better

00:22:58,640 --> 00:23:01,600
comments

00:22:59,360 --> 00:23:02,880
i don't care at the moment i could set

00:23:01,600 --> 00:23:06,159
some reviewers

00:23:02,880 --> 00:23:07,919
um on my team um and i'm not gonna worry

00:23:06,159 --> 00:23:08,960
about that either but and then also some

00:23:07,919 --> 00:23:10,880
labels

00:23:08,960 --> 00:23:12,720
but for the sake of time we're just

00:23:10,880 --> 00:23:14,400
going to open a pull request

00:23:12,720 --> 00:23:16,320
and now we're going to see here that

00:23:14,400 --> 00:23:18,559
it's running

00:23:16,320 --> 00:23:20,080
these two checks essentially that is

00:23:18,559 --> 00:23:23,280
running my lint

00:23:20,080 --> 00:23:26,320
my unit test um all of this sort of

00:23:23,280 --> 00:23:29,360
um you know static code analysis

00:23:26,320 --> 00:23:32,559
here to make sure this poor request

00:23:29,360 --> 00:23:35,520
really makes sense um

00:23:32,559 --> 00:23:37,039
to pull into the code base while those

00:23:35,520 --> 00:23:39,919
are running

00:23:37,039 --> 00:23:42,559
i can also go here and look at all of my

00:23:39,919 --> 00:23:42,559
workflows

00:23:43,039 --> 00:23:48,799
not just past i had two jobs

00:23:46,720 --> 00:23:51,679
and then i can see what happened inside

00:23:48,799 --> 00:23:53,919
of each job so if something fails i can

00:23:51,679 --> 00:23:57,360
go in here

00:23:53,919 --> 00:23:58,159
and look and see what happened with my

00:23:57,360 --> 00:24:01,840
unit tests

00:23:58,159 --> 00:24:03,840
i have some very very simple unit tests

00:24:01,840 --> 00:24:08,559
that

00:24:03,840 --> 00:24:11,279
meant for passing currently

00:24:08,559 --> 00:24:12,640
okay so my pull request is now ready to

00:24:11,279 --> 00:24:14,320
to be pulled in so i'm going to pull it

00:24:12,640 --> 00:24:15,760
in and it's automatically going to

00:24:14,320 --> 00:24:20,000
deploy

00:24:15,760 --> 00:24:22,159
my brand new algorithms for finding the

00:24:20,000 --> 00:24:23,760
best ghostbuster there's a couple

00:24:22,159 --> 00:24:26,640
settings that i have here

00:24:23,760 --> 00:24:28,480
i have the settings so that it's a

00:24:26,640 --> 00:24:31,039
actually setting on the main branch

00:24:28,480 --> 00:24:32,880
that allows pull requests to not be

00:24:31,039 --> 00:24:35,200
pulled into main unless they pass

00:24:32,880 --> 00:24:36,240
those um certain ci checks that's an

00:24:35,200 --> 00:24:39,520
option within

00:24:36,240 --> 00:24:41,600
this repo also um i automatically

00:24:39,520 --> 00:24:42,640
delete branches after i pull in a pull

00:24:41,600 --> 00:24:43,919
request so it's just a little bit of

00:24:42,640 --> 00:24:47,200
housekeeping that

00:24:43,919 --> 00:24:49,679
i prefer

00:24:47,200 --> 00:24:50,720
so now we'll go up to our actions and

00:24:49,679 --> 00:25:01,840
they're both

00:24:50,720 --> 00:25:01,840
working on deploying

00:25:01,919 --> 00:25:05,919
all right so this one has already kind

00:25:03,840 --> 00:25:07,760
of

00:25:05,919 --> 00:25:09,360
gone through the environment now so

00:25:07,760 --> 00:25:13,039
right now i'm sort of

00:25:09,360 --> 00:25:16,960
you know banking everything on um

00:25:13,039 --> 00:25:19,200
node 14 but you can also specify

00:25:16,960 --> 00:25:20,720
other versions of node and you can run

00:25:19,200 --> 00:25:22,480
through all of them um there's

00:25:20,720 --> 00:25:24,880
there's similar capabilities in azure

00:25:22,480 --> 00:25:26,000
devops and travis ci and jenkins and

00:25:24,880 --> 00:25:28,000
other tools

00:25:26,000 --> 00:25:29,840
but i like the way the matrix works here

00:25:28,000 --> 00:25:31,840
where it just runs them all a separate

00:25:29,840 --> 00:25:36,559
jobs

00:25:31,840 --> 00:25:38,640
um and here's my lambda deploy option

00:25:36,559 --> 00:25:42,080
and then my post checkout so it looks

00:25:38,640 --> 00:25:44,880
like that

00:25:42,080 --> 00:25:44,880
still running here

00:25:53,679 --> 00:25:58,880
okay and it looks like this one has now

00:25:55,760 --> 00:25:58,880
passed also

00:25:58,960 --> 00:26:02,799
great one job completed

00:26:05,279 --> 00:26:09,440
okay and you can see here it gives me

00:26:07,600 --> 00:26:11,760
this deployment address

00:26:09,440 --> 00:26:12,960
okay so now we can look at our

00:26:11,760 --> 00:26:16,080
algorithms

00:26:12,960 --> 00:26:19,840
so you'll notice this

00:26:16,080 --> 00:26:20,720
url matches this url which has

00:26:19,840 --> 00:26:23,520
determined

00:26:20,720 --> 00:26:24,880
that the i'm going to refresh because

00:26:23,520 --> 00:26:27,919
this is old okay

00:26:24,880 --> 00:26:30,240
great it received my change

00:26:27,919 --> 00:26:31,039
and it still believes that the best

00:26:30,240 --> 00:26:35,600
ghostbuster

00:26:31,039 --> 00:26:39,360
is spankler thank you giphy for

00:26:35,600 --> 00:26:43,440
our gift now this is the azure functions

00:26:39,360 --> 00:26:44,799
um service now let's go to the aws

00:26:43,440 --> 00:26:46,960
lambda service

00:26:44,799 --> 00:26:48,640
i'm going to refresh so we receive our

00:26:46,960 --> 00:26:52,080
latest change

00:26:48,640 --> 00:26:54,559
for openjs world and aws

00:26:52,080 --> 00:26:56,720
prefers venkman and says that bankman is

00:26:54,559 --> 00:26:58,640
in fact the best ghostbuster

00:26:56,720 --> 00:27:00,960
but you know like a lot of developer

00:26:58,640 --> 00:27:07,840
opinions there's also a lot of opinions

00:27:00,960 --> 00:27:07,840
about who the best ghostbuster is

00:27:07,919 --> 00:27:12,559
so in conclusion

00:27:10,960 --> 00:27:14,159
um just a couple things that i want to

00:27:12,559 --> 00:27:16,400
drive home here

00:27:14,159 --> 00:27:17,520
no ops as in not worrying about

00:27:16,400 --> 00:27:19,600
infrastructure

00:27:17,520 --> 00:27:21,440
worrying more about code doesn't mean no

00:27:19,600 --> 00:27:23,120
devops that doesn't mean that you don't

00:27:21,440 --> 00:27:24,720
think about your development process you

00:27:23,120 --> 00:27:25,520
don't think about how you move through

00:27:24,720 --> 00:27:28,960
your stages

00:27:25,520 --> 00:27:31,039
it doesn't mean no devops no ci cd tool

00:27:28,960 --> 00:27:32,720
all those things still apply all those

00:27:31,039 --> 00:27:34,720
things you still care about

00:27:32,720 --> 00:27:36,080
almost everything you cared about before

00:27:34,720 --> 00:27:39,600
as far as process

00:27:36,080 --> 00:27:41,840
still exists um online editors are

00:27:39,600 --> 00:27:43,039
a lot better than they have been in the

00:27:41,840 --> 00:27:43,760
past and they're getting better and

00:27:43,039 --> 00:27:46,240
better

00:27:43,760 --> 00:27:48,240
but it's not the same as a true revision

00:27:46,240 --> 00:27:49,039
control system whether that's github

00:27:48,240 --> 00:27:52,320
that i prefer

00:27:49,039 --> 00:27:55,039
or svn or or whatever um

00:27:52,320 --> 00:27:56,000
it's just not the same and even saving

00:27:55,039 --> 00:27:58,960
revisions

00:27:56,000 --> 00:28:01,200
of software in the cloud isn't quite the

00:27:58,960 --> 00:28:04,159
same as a robust revision control

00:28:01,200 --> 00:28:04,720
tool so love your linter i love my

00:28:04,159 --> 00:28:06,559
linter

00:28:04,720 --> 00:28:08,320
you should always love your linter even

00:28:06,559 --> 00:28:09,600
if you have to run it multiple times at

00:28:08,320 --> 00:28:11,840
multiple stages

00:28:09,600 --> 00:28:13,440
it's really important it will save you

00:28:11,840 --> 00:28:16,480
from making bugs

00:28:13,440 --> 00:28:18,480
there's a rule for you know not allowing

00:28:16,480 --> 00:28:20,559
um variables that aren't being used that

00:28:18,480 --> 00:28:21,440
has saved me so many times from times

00:28:20,559 --> 00:28:24,320
where i've just

00:28:21,440 --> 00:28:25,039
misspelled something um put your editor

00:28:24,320 --> 00:28:27,279
to work

00:28:25,039 --> 00:28:29,120
make your editor do the formatting make

00:28:27,279 --> 00:28:32,159
your editor run prettier

00:28:29,120 --> 00:28:34,480
make your editor do the linting um

00:28:32,159 --> 00:28:36,559
and that really saves you a lot of work

00:28:34,480 --> 00:28:40,159
and it saves a lot of failures once

00:28:36,559 --> 00:28:43,279
your code makes it into the cloud

00:28:40,159 --> 00:28:44,240
um testing in prod is not testing and we

00:28:43,279 --> 00:28:47,840
saw our

00:28:44,240 --> 00:28:49,760
yolo developer video where our developer

00:28:47,840 --> 00:28:50,880
wrote some code and then pushed it to

00:28:49,760 --> 00:28:53,440
production and

00:28:50,880 --> 00:28:54,399
then of course that code was going to

00:28:53,440 --> 00:28:56,880
fail

00:28:54,399 --> 00:28:58,000
and then tested it that's not actual

00:28:56,880 --> 00:29:00,240
testing we need unit

00:28:58,000 --> 00:29:01,600
tests we need integration tests we need

00:29:00,240 --> 00:29:03,919
load tests

00:29:01,600 --> 00:29:05,840
um and it's all important i didn't go

00:29:03,919 --> 00:29:06,720
through all the testing options here in

00:29:05,840 --> 00:29:08,640
fact

00:29:06,720 --> 00:29:10,240
on in this particular algorithm the

00:29:08,640 --> 00:29:12,960
testing is light but

00:29:10,240 --> 00:29:14,480
it's to give you the idea um abstraction

00:29:12,960 --> 00:29:18,080
is not ci cd

00:29:14,480 --> 00:29:20,159
once you abstract away um all of the

00:29:18,080 --> 00:29:23,039
infrastructure concerns it's not the

00:29:20,159 --> 00:29:24,880
same as having a true cicd system

00:29:23,039 --> 00:29:26,960
where your code is pushed through many

00:29:24,880 --> 00:29:27,360
layers if you're writing code in the

00:29:26,960 --> 00:29:29,279
cloud

00:29:27,360 --> 00:29:30,640
you're not just just going to have

00:29:29,279 --> 00:29:32,320
necessarily one

00:29:30,640 --> 00:29:33,840
subscription or resource group or

00:29:32,320 --> 00:29:36,880
however

00:29:33,840 --> 00:29:38,480
your services are kind of logically

00:29:36,880 --> 00:29:40,159
organized within your cloud

00:29:38,480 --> 00:29:41,600
you're not just going to have one that's

00:29:40,159 --> 00:29:42,320
production you're going to have

00:29:41,600 --> 00:29:44,480
development

00:29:42,320 --> 00:29:45,919
testing production different layers and

00:29:44,480 --> 00:29:48,000
different ways to move your

00:29:45,919 --> 00:29:49,360
code across those platforms so it can be

00:29:48,000 --> 00:29:51,919
properly tested

00:29:49,360 --> 00:29:53,360
you don't have bugs in production and

00:29:51,919 --> 00:29:54,320
like most importantly don't abandon

00:29:53,360 --> 00:29:56,399
what's important

00:29:54,320 --> 00:29:58,080
if you have if you're doing something if

00:29:56,399 --> 00:29:59,440
you're if you're writing code no matter

00:29:58,080 --> 00:30:00,960
where you're writing it if you feel a

00:29:59,440 --> 00:30:03,840
little dirty if you feel

00:30:00,960 --> 00:30:04,799
bad if it's scary then think about it

00:30:03,840 --> 00:30:07,200
okay

00:30:04,799 --> 00:30:08,000
why did i lose that process why did i

00:30:07,200 --> 00:30:10,399
think it was okay

00:30:08,000 --> 00:30:12,240
to push directly to production why did i

00:30:10,399 --> 00:30:14,399
think it was okay to not

00:30:12,240 --> 00:30:17,279
really check through my code why did i

00:30:14,399 --> 00:30:20,320
expect things to magically become better

00:30:17,279 --> 00:30:20,320
once they went to the cloud

00:30:21,679 --> 00:30:25,120
and thank you thanks for coming to my

00:30:23,679 --> 00:30:29,120
talk and

00:30:25,120 --> 00:30:31,919
um i hope that you will continue to

00:30:29,120 --> 00:30:33,279
hold what's dear and fight for all the

00:30:31,919 --> 00:30:37,840
tools that are important to you

00:30:33,279 --> 00:30:37,840

YouTube URL: https://www.youtube.com/watch?v=_fb-Ra1KX4g


