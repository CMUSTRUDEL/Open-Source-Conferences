Title: Wrap WebdriverIO to Build your Test Framework - Soumya Mukherjee, APTY.IO
Publication date: 2021-05-31
Playlist: OpenJS World 2021 - Automation
Description: 
	Although WebdriverIO is an extremely powerful and simple tool to use, most of the folks find it extremely difficult to create test framework with WebdriverIO and eventually dropout using the same. Through this presentation and the demo's, Soumya will show quick cool tweaks that you can perform on the tool to successfully build a test framework with WebdriverIO. He will show how WebdriverIO is actually a very simple tool to use. He will also talk about how you can scale thousand's of your tests in no time and perform multiple browser testing with ease with centralised reporting with Allure where you can preserve the historical information of the runs.
Captions: 
	00:00:00,399 --> 00:00:08,800
hey there uh my name is sammy mukherjee

00:00:04,160 --> 00:00:11,519
and i head product at apt.io

00:00:08,800 --> 00:00:12,320
we are in a digital adoption space and

00:00:11,519 --> 00:00:14,559
uh

00:00:12,320 --> 00:00:15,519
i will talk about more of the things in

00:00:14,559 --> 00:00:17,520
in our

00:00:15,519 --> 00:00:19,039
in this particular session but first of

00:00:17,520 --> 00:00:21,600
all i would like to welcome all of you

00:00:19,039 --> 00:00:23,359
to the open gs world 201 conference and

00:00:21,600 --> 00:00:24,240
hope you all are doing fantastically

00:00:23,359 --> 00:00:26,080
well and

00:00:24,240 --> 00:00:27,359
hope your loved ones are healthy during

00:00:26,080 --> 00:00:29,359
this pandemic

00:00:27,359 --> 00:00:31,199
i hope you are having a great time

00:00:29,359 --> 00:00:32,800
listening to all these great speakers

00:00:31,199 --> 00:00:35,120
that we have today

00:00:32,800 --> 00:00:37,120
and uh and i'm sure that you know

00:00:35,120 --> 00:00:41,120
everyone is so fantastic

00:00:37,120 --> 00:00:45,039
uh all right so uh

00:00:41,120 --> 00:00:47,200
let's go ahead and see what i have

00:00:45,039 --> 00:00:48,879
first of all i would like the organizers

00:00:47,200 --> 00:00:51,199
to giving me the op for giving me the

00:00:48,879 --> 00:00:53,440
opportunity to speak in this conference

00:00:51,199 --> 00:00:54,719
uh today i'm going to speak on a topic

00:00:53,440 --> 00:00:56,800
uh which is how

00:00:54,719 --> 00:00:58,079
we can wrap webdriver io and create your

00:00:56,800 --> 00:00:59,920
own framework

00:00:58,079 --> 00:01:01,199
when i started with this tool i faced a

00:00:59,920 --> 00:01:03,039
lot of issues uh

00:01:01,199 --> 00:01:05,360
getting started with the poc as there

00:01:03,039 --> 00:01:07,119
are where there was less documentation

00:01:05,360 --> 00:01:09,439
mostly to customize things and write

00:01:07,119 --> 00:01:11,360
things over top of the framework

00:01:09,439 --> 00:01:13,439
another challenge was that nobody was

00:01:11,360 --> 00:01:15,600
discussing use case around this rule

00:01:13,439 --> 00:01:17,040
and everyone was only discussing their

00:01:15,600 --> 00:01:20,880
issues in the channel

00:01:17,040 --> 00:01:23,680
and of which only a handful will answer

00:01:20,880 --> 00:01:24,560
my queries another challenge was that

00:01:23,680 --> 00:01:26,799
anyone whom

00:01:24,560 --> 00:01:28,880
i have asked about using this tool

00:01:26,799 --> 00:01:30,000
everybody prefer to use either cypress

00:01:28,880 --> 00:01:33,360
or protractor

00:01:30,000 --> 00:01:34,159
and not webdriver io and uh yeah i got

00:01:33,360 --> 00:01:35,920
pumped up and

00:01:34,159 --> 00:01:37,439
and you know took it as a challenge as i

00:01:35,920 --> 00:01:38,799
know for sure that this is going to be

00:01:37,439 --> 00:01:41,840
very very simple

00:01:38,799 --> 00:01:43,920
but being portrayed as very complex

00:01:41,840 --> 00:01:45,439
and i'm sure that i will work with this

00:01:43,920 --> 00:01:47,520
tool and

00:01:45,439 --> 00:01:50,000
will also start contributing to the

00:01:47,520 --> 00:01:51,920
documentation in future on this tool

00:01:50,000 --> 00:01:53,439
and and and talk about various topics

00:01:51,920 --> 00:01:55,439
like how to create a framework

00:01:53,439 --> 00:01:57,040
uh you know how to do your framework

00:01:55,439 --> 00:01:58,600
development on this tool

00:01:57,040 --> 00:02:00,399
and talk about integrations

00:01:58,600 --> 00:02:03,360
customizations uh

00:02:00,399 --> 00:02:04,240
and what all and whatnot uh just to give

00:02:03,360 --> 00:02:07,600
you a background

00:02:04,240 --> 00:02:09,200
how i started with this poc that when i

00:02:07,600 --> 00:02:12,720
joined my organization

00:02:09,200 --> 00:02:15,599
uh we had a challenge uh because we had

00:02:12,720 --> 00:02:16,800
uh three set of applications one is on

00:02:15,599 --> 00:02:19,200
the electron

00:02:16,800 --> 00:02:21,200
uh it's an electron based app second one

00:02:19,200 --> 00:02:23,360
was the

00:02:21,200 --> 00:02:24,879
react web app and the other one was

00:02:23,360 --> 00:02:28,800
browser extensions

00:02:24,879 --> 00:02:29,760
now this is not this is not this is a

00:02:28,800 --> 00:02:33,280
unique

00:02:29,760 --> 00:02:36,239
composition that this company has

00:02:33,280 --> 00:02:37,440
and it was quite tedious and challenging

00:02:36,239 --> 00:02:40,400
for us to automate

00:02:37,440 --> 00:02:41,599
so i was looking at uh a simple

00:02:40,400 --> 00:02:44,239
alternative

00:02:41,599 --> 00:02:44,879
uh you know of this uh of a tool you

00:02:44,239 --> 00:02:47,760
know who can

00:02:44,879 --> 00:02:48,959
who i can leverage and and automate all

00:02:47,760 --> 00:02:51,280
the three sets

00:02:48,959 --> 00:02:52,800
anyways uh so let's go ahead and talk

00:02:51,280 --> 00:02:55,120
about the agenda

00:02:52,800 --> 00:02:56,879
uh we'll talk about i'll talk about you

00:02:55,120 --> 00:02:57,840
know why i chose webdriver over other

00:02:56,879 --> 00:02:59,920
tools

00:02:57,840 --> 00:03:02,159
uh this is because that people should

00:02:59,920 --> 00:03:02,879
know that what are the intentions behind

00:03:02,159 --> 00:03:05,200
this

00:03:02,879 --> 00:03:07,440
behind choosing this tool and why we

00:03:05,200 --> 00:03:09,360
should use this particular tool

00:03:07,440 --> 00:03:10,480
second i will talk about the shippable

00:03:09,360 --> 00:03:14,319
framework wrapper

00:03:10,480 --> 00:03:16,480
which i have created over webdriver io

00:03:14,319 --> 00:03:17,519
and you would see that how simple

00:03:16,480 --> 00:03:19,760
webdriver

00:03:17,519 --> 00:03:21,840
tool is that it gives us so much

00:03:19,760 --> 00:03:24,799
flexibility to work with

00:03:21,840 --> 00:03:25,920
and and how easily we could have built

00:03:24,799 --> 00:03:26,799
this particular framework for our

00:03:25,920 --> 00:03:29,599
company

00:03:26,799 --> 00:03:31,280
uh last but not the least i will will

00:03:29,599 --> 00:03:32,480
show a demo where i will go through some

00:03:31,280 --> 00:03:36,080
code snippets

00:03:32,480 --> 00:03:36,720
and we'll talk about uh i will run a use

00:03:36,080 --> 00:03:38,879
case

00:03:36,720 --> 00:03:40,879
and then it's in a live use case on my

00:03:38,879 --> 00:03:44,560
uh on my company's app

00:03:40,879 --> 00:03:47,599
as to how we are automating the things

00:03:44,560 --> 00:03:50,400
all right um okay

00:03:47,599 --> 00:03:51,360
so now let's see how why i have actually

00:03:50,400 --> 00:03:53,439
chosen this tool

00:03:51,360 --> 00:03:55,599
and why i'm saying that this tool is so

00:03:53,439 --> 00:03:57,599
flexible and easy to use and quite

00:03:55,599 --> 00:03:58,640
also quite flexible on customizations

00:03:57,599 --> 00:04:00,799
etc

00:03:58,640 --> 00:04:02,159
uh if you get a little guidance which

00:04:00,799 --> 00:04:03,840
you can get from the current

00:04:02,159 --> 00:04:09,280
documentation you will be able to

00:04:03,840 --> 00:04:09,280
easily uh work with this particular tool

00:04:10,560 --> 00:04:14,640
in this talk i will talk about things

00:04:12,879 --> 00:04:17,120
that we have done to make this tool

00:04:14,640 --> 00:04:19,280
flexible in the usage for us

00:04:17,120 --> 00:04:21,680
especially across browser extensions the

00:04:19,280 --> 00:04:23,520
react web app and also an electron js

00:04:21,680 --> 00:04:26,840
app

00:04:23,520 --> 00:04:28,560
i'll also talk about how a wrapper which

00:04:26,840 --> 00:04:31,600
is uh

00:04:28,560 --> 00:04:35,360
uh how is our wrapper structured

00:04:31,600 --> 00:04:39,280
uh how is our pipeline looks like uh

00:04:35,360 --> 00:04:41,600
we will also push uh we'll also push it

00:04:39,280 --> 00:04:44,400
to the standard documentation at the

00:04:41,600 --> 00:04:44,800
end of this particular conference uh so

00:04:44,400 --> 00:04:47,120
that

00:04:44,800 --> 00:04:48,639
people can go ahead and and look into

00:04:47,120 --> 00:04:49,840
the customizations that

00:04:48,639 --> 00:04:51,840
that we have done and we have

00:04:49,840 --> 00:04:55,280
contributed to web driver io

00:04:51,840 --> 00:04:57,040
and on june 2nd while you are listening

00:04:55,280 --> 00:05:00,479
to this particular

00:04:57,040 --> 00:05:03,520
cast you would basically also see that

00:05:00,479 --> 00:05:06,080
uh this this this is being uh

00:05:03,520 --> 00:05:07,280
open sourced as well so that people can

00:05:06,080 --> 00:05:09,840
go and try

00:05:07,280 --> 00:05:12,320
use to use this wrapper you know and and

00:05:09,840 --> 00:05:14,080
see how flexible it is to work with uh

00:05:12,320 --> 00:05:17,440
web driver io

00:05:14,080 --> 00:05:19,440
all right um all right so why

00:05:17,440 --> 00:05:20,800
why i chose vipre however the tools is

00:05:19,440 --> 00:05:23,280
one of the things

00:05:20,800 --> 00:05:24,400
that we had to look is is that our

00:05:23,280 --> 00:05:26,000
developers

00:05:24,400 --> 00:05:27,759
and our technology is based on

00:05:26,000 --> 00:05:29,600
javascript so native development

00:05:27,759 --> 00:05:31,199
technologies in javascript so we wanted

00:05:29,600 --> 00:05:33,199
a tool which can support

00:05:31,199 --> 00:05:34,560
this particular thing and as a best

00:05:33,199 --> 00:05:37,680
practice in automation

00:05:34,560 --> 00:05:41,039
uh you know we always need to merge our

00:05:37,680 --> 00:05:44,080
automation code in the dev branch uh

00:05:41,039 --> 00:05:45,199
you know so that you can build your code

00:05:44,080 --> 00:05:47,840
along with

00:05:45,199 --> 00:05:50,240
uh along with the test code and then

00:05:47,840 --> 00:05:53,039
those tests can be triggered

00:05:50,240 --> 00:05:53,840
most of the companies i've seen is that

00:05:53,039 --> 00:05:55,440
they will

00:05:53,840 --> 00:05:56,960
create their framework in some different

00:05:55,440 --> 00:05:58,080
technology and their basic launch is

00:05:56,960 --> 00:06:00,639
something different

00:05:58,080 --> 00:06:02,639
and then there it's not much flexibility

00:06:00,639 --> 00:06:03,840
that you can merge them together and run

00:06:02,639 --> 00:06:06,160
it as a package

00:06:03,840 --> 00:06:07,840
kind of thing but but we did do not want

00:06:06,160 --> 00:06:10,080
to make that mistake

00:06:07,840 --> 00:06:11,039
the second thing is that uh why we chose

00:06:10,080 --> 00:06:13,680
web driver i o

00:06:11,039 --> 00:06:14,720
is uh it's because that our main

00:06:13,680 --> 00:06:17,600
component

00:06:14,720 --> 00:06:19,600
are is is it the desktop app is based on

00:06:17,600 --> 00:06:22,880
electron js

00:06:19,600 --> 00:06:24,800
and uh we used a framework called a

00:06:22,880 --> 00:06:28,560
spectron which is written over

00:06:24,800 --> 00:06:31,520
web driver io and since these two

00:06:28,560 --> 00:06:33,120
goes hand in hand and with fantastic

00:06:31,520 --> 00:06:35,120
integrations in place

00:06:33,120 --> 00:06:37,199
we could basically achieve the electron

00:06:35,120 --> 00:06:40,479
js automation as well

00:06:37,199 --> 00:06:43,039
uh also uh

00:06:40,479 --> 00:06:44,639
we wanted our developers to write our

00:06:43,039 --> 00:06:49,840
tests in future

00:06:44,639 --> 00:06:49,840
and that is also a

00:06:50,080 --> 00:06:55,520
that is also a a requirement that we

00:06:54,000 --> 00:06:57,360
may have in the future wherein the

00:06:55,520 --> 00:06:58,720
developers can also write and contribute

00:06:57,360 --> 00:07:01,759
to this javascript

00:06:58,720 --> 00:07:02,960
since it is based on javascript uh third

00:07:01,759 --> 00:07:05,440
thing is that you know

00:07:02,960 --> 00:07:06,560
we extensively use react.js in angular 4

00:07:05,440 --> 00:07:09,680
libraries

00:07:06,560 --> 00:07:11,120
and that is where we would need some

00:07:09,680 --> 00:07:14,960
tool to basically

00:07:11,120 --> 00:07:17,199
help us uh one more thing which is

00:07:14,960 --> 00:07:18,639
which is important for us is to achieve

00:07:17,199 --> 00:07:20,800
end-to-end automation

00:07:18,639 --> 00:07:21,759
uh because as i said that we have

00:07:20,800 --> 00:07:25,120
electron js

00:07:21,759 --> 00:07:27,199
and react web and we also have browser

00:07:25,120 --> 00:07:30,880
extension so we want to run end-to-end

00:07:27,199 --> 00:07:33,199
uh test cases and we wanted one tool one

00:07:30,880 --> 00:07:37,199
single tool which can support all this

00:07:33,199 --> 00:07:38,319
uh so this is why we have chose web

00:07:37,199 --> 00:07:40,479
driver i o

00:07:38,319 --> 00:07:42,400
uh we majorly use course react and

00:07:40,479 --> 00:07:45,840
angular components as i already said

00:07:42,400 --> 00:07:49,360
and and that is why uh we

00:07:45,840 --> 00:07:51,599
we wanted to uh use the web driver i o

00:07:49,360 --> 00:07:51,599
um

00:07:52,960 --> 00:07:59,039
if we go next okay uh we want some tool

00:07:56,080 --> 00:08:00,560
which can seamlessly have integrations

00:07:59,039 --> 00:08:04,319
with the reporting tools

00:08:00,560 --> 00:08:06,319
cross browser on demand platforms and

00:08:04,319 --> 00:08:08,000
various others so if if you look at web

00:08:06,319 --> 00:08:10,400
driver ios architecture

00:08:08,000 --> 00:08:12,800
it is mostly service based or plugin

00:08:10,400 --> 00:08:14,639
based i would say uh when you can just

00:08:12,800 --> 00:08:18,160
hook in a plugin and you'll get

00:08:14,639 --> 00:08:21,360
get to go uh nothing uh

00:08:18,160 --> 00:08:22,639
fancy it's very easy to use and and and

00:08:21,360 --> 00:08:25,280
since that drivo

00:08:22,639 --> 00:08:26,800
is web driver io is based on plugins and

00:08:25,280 --> 00:08:28,720
each component is a plugin which makes

00:08:26,800 --> 00:08:32,399
it extremely flexible

00:08:28,720 --> 00:08:35,680
uh we also want a tool

00:08:32,399 --> 00:08:36,479
uh to basically uh which can run on web

00:08:35,680 --> 00:08:39,839
driver io

00:08:36,479 --> 00:08:42,880
web driver protocol uh why is that so

00:08:39,839 --> 00:08:45,519
because webdriver is evolving

00:08:42,880 --> 00:08:46,080
and we don't want to use a tool which

00:08:45,519 --> 00:08:49,760
can

00:08:46,080 --> 00:08:52,320
say after a new year that we are

00:08:49,760 --> 00:08:54,640
a we are end of life cycle like for an

00:08:52,320 --> 00:08:57,920
example protractor now whoever

00:08:54,640 --> 00:09:00,160
was using protractor has now may been

00:08:57,920 --> 00:09:02,800
fixed what to do and how we can

00:09:00,160 --> 00:09:05,120
migrate and what all and whatnot so we

00:09:02,800 --> 00:09:08,000
want to use a tool which can

00:09:05,120 --> 00:09:10,720
be driven on the webdriver protocol and

00:09:08,000 --> 00:09:10,720
supports it

00:09:11,440 --> 00:09:16,160
the final uh aspects that we have

00:09:14,800 --> 00:09:18,720
thought about is

00:09:16,160 --> 00:09:22,480
that the tool needs to be fast and we

00:09:18,720 --> 00:09:25,839
have seen this it's extremely fast

00:09:22,480 --> 00:09:27,760
it should be free to use it's not like

00:09:25,839 --> 00:09:29,440
any other tool in the market like cyprus

00:09:27,760 --> 00:09:32,240
who has got a

00:09:29,440 --> 00:09:33,279
licensing over the things and it needs

00:09:32,240 --> 00:09:36,880
to be

00:09:33,279 --> 00:09:38,880
truly truly uh open source

00:09:36,880 --> 00:09:40,640
you know and and that's our philosophy

00:09:38,880 --> 00:09:41,120
because we also work with open source

00:09:40,640 --> 00:09:44,240
and

00:09:41,120 --> 00:09:45,760
contribute open source and uh since

00:09:44,240 --> 00:09:47,920
the philosophy matches with creator of

00:09:45,760 --> 00:09:50,240
this tool you know we have chosen this

00:09:47,920 --> 00:09:53,680
the last not but not not least you know

00:09:50,240 --> 00:09:57,360
it's extremely customizable i would say

00:09:53,680 --> 00:09:59,519
okay um if you go next

00:09:57,360 --> 00:10:01,519
uh i'll talk about the shippable

00:09:59,519 --> 00:10:04,640
framework wrapper that we have

00:10:01,519 --> 00:10:06,560
um why do we say that you know

00:10:04,640 --> 00:10:08,079
uh we want to ship google wrapper most

00:10:06,560 --> 00:10:09,360
of the frameworks in the world are so

00:10:08,079 --> 00:10:11,519
tightly coupled

00:10:09,360 --> 00:10:12,640
that each team write their own framework

00:10:11,519 --> 00:10:15,200
for their project

00:10:12,640 --> 00:10:15,760
which makes it difficult to unify and

00:10:15,200 --> 00:10:18,640
run the

00:10:15,760 --> 00:10:21,360
end-to-end test and this has happened in

00:10:18,640 --> 00:10:23,360
in a lot of consulting that i have done

00:10:21,360 --> 00:10:24,399
is that you know every team has their

00:10:23,360 --> 00:10:26,880
own framework

00:10:24,399 --> 00:10:29,120
and at the end they have a common

00:10:26,880 --> 00:10:32,240
problem how to integrate and run it as

00:10:29,120 --> 00:10:33,680
end-to-end we also want consistency in

00:10:32,240 --> 00:10:35,920
what we do at apt

00:10:33,680 --> 00:10:37,440
and hence we splitted the framework into

00:10:35,920 --> 00:10:38,560
two components which is a shippable

00:10:37,440 --> 00:10:41,200
based framework

00:10:38,560 --> 00:10:43,040
that means any project that we start

00:10:41,200 --> 00:10:47,120
here

00:10:43,040 --> 00:10:49,680
can can can basically

00:10:47,120 --> 00:10:50,320
consume the shippable base uh based

00:10:49,680 --> 00:10:53,680
framework

00:10:50,320 --> 00:10:55,040
and then can implement uh their project

00:10:53,680 --> 00:10:59,519
related stuff

00:10:55,040 --> 00:11:01,279
uh so uh which can later be consumed by

00:10:59,519 --> 00:11:03,839
any implementation project

00:11:01,279 --> 00:11:05,440
and can there be only minimalistic

00:11:03,839 --> 00:11:07,519
changes that are required for that

00:11:05,440 --> 00:11:10,480
project implementation perspective

00:11:07,519 --> 00:11:11,920
we have a team who basically uh

00:11:10,480 --> 00:11:13,680
contribute to the shippable based

00:11:11,920 --> 00:11:15,519
framework so we keep on writing our

00:11:13,680 --> 00:11:17,279
libraries and everything so

00:11:15,519 --> 00:11:19,279
the shipper based framework consists of

00:11:17,279 --> 00:11:22,240
an engine so that engine

00:11:19,279 --> 00:11:23,680
is responsible to gather the

00:11:22,240 --> 00:11:25,440
configurations

00:11:23,680 --> 00:11:26,720
understand what spec to run which

00:11:25,440 --> 00:11:29,920
environment

00:11:26,720 --> 00:11:30,959
what browser versions what uh cloud

00:11:29,920 --> 00:11:33,120
platform

00:11:30,959 --> 00:11:35,120
uh whether it is device whether it is

00:11:33,120 --> 00:11:37,279
web so all sort of comp permutation

00:11:35,120 --> 00:11:40,560
combination that engine would decide

00:11:37,279 --> 00:11:42,560
so that's basically a runner secondly

00:11:40,560 --> 00:11:44,320
uh there are base configurations which

00:11:42,560 --> 00:11:48,000
are being stored in an enamel file

00:11:44,320 --> 00:11:51,519
uh that means like for an example

00:11:48,000 --> 00:11:51,519
a simple example would be

00:11:51,839 --> 00:11:56,800
would be delay right so

00:11:55,360 --> 00:11:58,399
across the framework how much is the

00:11:56,800 --> 00:12:00,320
deal and then you can override it in

00:11:58,399 --> 00:12:00,959
your implementation and you can you can

00:12:00,320 --> 00:12:04,079
see

00:12:00,959 --> 00:12:07,600
uh you know how much do you do you want

00:12:04,079 --> 00:12:09,680
um uh or the shippable based framework

00:12:07,600 --> 00:12:11,200
has got all the integrations in place

00:12:09,680 --> 00:12:13,040
that means it has integrations to

00:12:11,200 --> 00:12:14,560
central centralized logging which we do

00:12:13,040 --> 00:12:17,120
it in elasticsearch

00:12:14,560 --> 00:12:17,839
uh and then we have cus we have standard

00:12:17,120 --> 00:12:20,399
reporting

00:12:17,839 --> 00:12:21,279
uh which is also centralized and we

00:12:20,399 --> 00:12:23,680
basically

00:12:21,279 --> 00:12:27,680
sends all our data to kafka queue and

00:12:23,680 --> 00:12:30,000
then later on a beautiful uh

00:12:27,680 --> 00:12:30,800
you know report generates and and we

00:12:30,000 --> 00:12:32,880
keep

00:12:30,800 --> 00:12:35,040
centralizing our data each time because

00:12:32,880 --> 00:12:37,440
we run our ml models and so we'll

00:12:35,040 --> 00:12:39,760
in in in the future slides uh i'll show

00:12:37,440 --> 00:12:41,600
what we do

00:12:39,760 --> 00:12:43,360
and the finally uh in the space

00:12:41,600 --> 00:12:45,279
shippable framework what we have is the

00:12:43,360 --> 00:12:45,839
brace framework library which is nothing

00:12:45,279 --> 00:12:50,000
but

00:12:45,839 --> 00:12:51,839
your getter setters uh your selects your

00:12:50,000 --> 00:12:53,519
sets and everything so all those

00:12:51,839 --> 00:12:56,240
standard functions

00:12:53,519 --> 00:12:57,519
which are which always needs to be

00:12:56,240 --> 00:13:00,320
should be present

00:12:57,519 --> 00:13:01,200
in the shipbuild framework we also have

00:13:00,320 --> 00:13:04,399
a feature

00:13:01,200 --> 00:13:06,480
wherein we can do auto healing

00:13:04,399 --> 00:13:08,079
all those things also sits in the base

00:13:06,480 --> 00:13:09,839
framework library

00:13:08,079 --> 00:13:11,760
uh what goes into the project

00:13:09,839 --> 00:13:13,519
implementation is is the pro it's the

00:13:11,760 --> 00:13:14,240
team who is consuming the shipping waste

00:13:13,519 --> 00:13:18,000
framework

00:13:14,240 --> 00:13:20,480
they just have to create their tests

00:13:18,000 --> 00:13:22,320
uh they need to run they need to create

00:13:20,480 --> 00:13:24,800
their own business libraries

00:13:22,320 --> 00:13:25,519
and they need to also make those

00:13:24,800 --> 00:13:28,079
customize

00:13:25,519 --> 00:13:28,880
the custom configurations which is

00:13:28,079 --> 00:13:33,040
nothing but

00:13:28,880 --> 00:13:36,240
uh environment uh browsers versions

00:13:33,040 --> 00:13:40,079
uh specs and what all and

00:13:36,240 --> 00:13:40,079
and cloud platforms and etc

00:13:40,720 --> 00:13:44,079
let's talk about the framework wrapper

00:13:42,480 --> 00:13:47,120
stack uh

00:13:44,079 --> 00:13:48,480
and why is this important uh so engine

00:13:47,120 --> 00:13:49,519
is nothing but an integrator or an

00:13:48,480 --> 00:13:51,360
orchestrator

00:13:49,519 --> 00:13:53,360
uh the engine responsibility is to drive

00:13:51,360 --> 00:13:54,880
the test by looking into the base

00:13:53,360 --> 00:13:56,800
configurations and then go through the

00:13:54,880 --> 00:13:59,519
custom configurations

00:13:56,800 --> 00:14:01,920
and uh plug in the right set of plugins

00:13:59,519 --> 00:14:05,040
in the test execution process

00:14:01,920 --> 00:14:07,120
it is the one which will

00:14:05,040 --> 00:14:08,880
make sure whatever you have written in

00:14:07,120 --> 00:14:10,000
the custom configurations it will take

00:14:08,880 --> 00:14:11,680
care of

00:14:10,000 --> 00:14:13,279
uh it will initialize the web driver

00:14:11,680 --> 00:14:17,040
config file and then

00:14:13,279 --> 00:14:18,480
instruct it to execute this in turn runs

00:14:17,040 --> 00:14:20,320
the automation pack

00:14:18,480 --> 00:14:22,160
the spec then use the base framework

00:14:20,320 --> 00:14:24,320
libraries to call the reusable

00:14:22,160 --> 00:14:25,279
methods which are common throughout the

00:14:24,320 --> 00:14:27,279
framework

00:14:25,279 --> 00:14:30,079
and also call the business libraries

00:14:27,279 --> 00:14:31,839
which consist of the application flows

00:14:30,079 --> 00:14:33,360
uh and the logic pertaining to the

00:14:31,839 --> 00:14:34,160
application so we define different

00:14:33,360 --> 00:14:36,000
components

00:14:34,160 --> 00:14:37,440
uh in the business libraries and then we

00:14:36,000 --> 00:14:38,480
call those components into our

00:14:37,440 --> 00:14:41,760
automation script

00:14:38,480 --> 00:14:44,480
so all those dark ones here are all

00:14:41,760 --> 00:14:46,320
uh shippable uh framework components uh

00:14:44,480 --> 00:14:47,760
the blue ones are all the project

00:14:46,320 --> 00:14:50,800
implementations

00:14:47,760 --> 00:14:51,600
uh we used to test framework uh the

00:14:50,800 --> 00:14:54,880
favorites

00:14:51,600 --> 00:14:56,720
webdriver ion spectron and then uh

00:14:54,880 --> 00:14:58,959
application under test components are

00:14:56,720 --> 00:15:01,760
the browsers in the electron app

00:14:58,959 --> 00:15:04,079
but interestingly we have extensions and

00:15:01,760 --> 00:15:06,880
we have an injected script

00:15:04,079 --> 00:15:07,440
and you will see in my particular screen

00:15:06,880 --> 00:15:09,279
uh

00:15:07,440 --> 00:15:11,040
you know when the things would pop up

00:15:09,279 --> 00:15:12,000
that how the extensions are being loaded

00:15:11,040 --> 00:15:13,839
and all

00:15:12,000 --> 00:15:15,519
so web driver i o and spectron is

00:15:13,839 --> 00:15:17,040
underlying tool integrated in the same

00:15:15,519 --> 00:15:20,720
framework to support automation

00:15:17,040 --> 00:15:23,920
on browsers and electron app and

00:15:20,720 --> 00:15:25,199
here through web drawer extensions which

00:15:23,920 --> 00:15:28,880
are installed

00:15:25,199 --> 00:15:31,040
on the go and seamlessly as well

00:15:28,880 --> 00:15:31,920
javascript is injected in the

00:15:31,040 --> 00:15:36,160
application

00:15:31,920 --> 00:15:38,000
you know under test unfortunately i

00:15:36,160 --> 00:15:40,000
cannot show it running on the live

00:15:38,000 --> 00:15:41,600
environment but i will discuss about how

00:15:40,000 --> 00:15:42,800
the customizations are done with web

00:15:41,600 --> 00:15:44,720
driver io

00:15:42,800 --> 00:15:46,800
going forward in the demo and run

00:15:44,720 --> 00:15:49,440
through the sample report execution

00:15:46,800 --> 00:15:51,199
executed against the live product i will

00:15:49,440 --> 00:15:55,440
also execute the framework

00:15:51,199 --> 00:15:56,240
uh on the the live application that we

00:15:55,440 --> 00:15:57,680
have

00:15:56,240 --> 00:15:59,199
and to make you understand how the

00:15:57,680 --> 00:16:02,480
configurations can be made and the

00:15:59,199 --> 00:16:02,480
automations can be achieved

00:16:03,440 --> 00:16:09,680
okay now uh just wanted to go through

00:16:07,040 --> 00:16:11,360
our execution pipeline so that you

00:16:09,680 --> 00:16:13,839
have an understanding of what we do in

00:16:11,360 --> 00:16:15,120
apti uh

00:16:13,839 --> 00:16:16,880
let's quickly talk about how the

00:16:15,120 --> 00:16:20,160
execution pipeline looks like

00:16:16,880 --> 00:16:22,639
we have get github actions uh as a

00:16:20,160 --> 00:16:24,480
primary ci tool and

00:16:22,639 --> 00:16:27,440
you know as a pull request is machine

00:16:24,480 --> 00:16:28,959
master the pipeline guest record

00:16:27,440 --> 00:16:31,440
the code is then instrumented and

00:16:28,959 --> 00:16:33,759
deployed why we want to do this because

00:16:31,440 --> 00:16:34,720
we want to have code coverage at the end

00:16:33,759 --> 00:16:37,120
of each run

00:16:34,720 --> 00:16:40,320
because that goes into our ml models and

00:16:37,120 --> 00:16:42,880
and valuable information comes out

00:16:40,320 --> 00:16:46,480
we always make sure that uh when we run

00:16:42,880 --> 00:16:46,480
our test on a clean environment

00:16:46,560 --> 00:16:49,680
as always the data issues are really

00:16:48,480 --> 00:16:52,320
really painful

00:16:49,680 --> 00:16:54,160
to fix we wanted to have a clean

00:16:52,320 --> 00:16:57,040
environment so while we do deployment

00:16:54,160 --> 00:16:58,480
we the next step is that we if we load

00:16:57,040 --> 00:17:02,000
our master data

00:16:58,480 --> 00:17:03,519
and then uh you know attach and and

00:17:02,000 --> 00:17:05,760
and then the engine gets attached with

00:17:03,519 --> 00:17:07,919
the configurations and the specs

00:17:05,760 --> 00:17:09,600
uh the engine knows what's to pick up

00:17:07,919 --> 00:17:12,559
and where to put and what to run

00:17:09,600 --> 00:17:13,919
uh but key here is that we always run it

00:17:12,559 --> 00:17:16,079
on the clean environment

00:17:13,919 --> 00:17:17,679
so that we're absolutely sure that the

00:17:16,079 --> 00:17:20,640
issues that are coming

00:17:17,679 --> 00:17:22,720
are with respect to the scripts or with

00:17:20,640 --> 00:17:25,760
respect to the

00:17:22,720 --> 00:17:28,799
uh or with respect to to

00:17:25,760 --> 00:17:29,600
the environment and what all what ah the

00:17:28,799 --> 00:17:32,559
tests

00:17:29,600 --> 00:17:33,760
are then executed across various browser

00:17:32,559 --> 00:17:36,880
versions

00:17:33,760 --> 00:17:39,440
platforms multiple browser extensions

00:17:36,880 --> 00:17:40,960
we have auto healer which can understand

00:17:39,440 --> 00:17:43,760
about failures pertaining to the objects

00:17:40,960 --> 00:17:47,120
and auto heal description real time

00:17:43,760 --> 00:17:49,280
so that's a small caveat there and then

00:17:47,120 --> 00:17:51,520
the results are locked uh and then

00:17:49,280 --> 00:17:54,160
pushed into a centralized location

00:17:51,520 --> 00:17:55,360
and we basic extensively mine uh our

00:17:54,160 --> 00:17:57,760
results

00:17:55,360 --> 00:17:59,520
we specifically pick up the data of

00:17:57,760 --> 00:18:00,559
results and logs and pass it through the

00:17:59,520 --> 00:18:02,400
ml model

00:18:00,559 --> 00:18:04,080
to tag the most important tests that

00:18:02,400 --> 00:18:06,720
executed for the build

00:18:04,080 --> 00:18:08,480
uh do productive analytics to fetch and

00:18:06,720 --> 00:18:09,280
perform analysis on the runs and failure

00:18:08,480 --> 00:18:10,720
results

00:18:09,280 --> 00:18:12,400
we also determine if the builds are

00:18:10,720 --> 00:18:13,600
stable enough to continue testing on the

00:18:12,400 --> 00:18:17,200
same

00:18:13,600 --> 00:18:20,080
the logs from both environments and

00:18:17,200 --> 00:18:22,000
and the production is then correlated to

00:18:20,080 --> 00:18:25,760
identify new tests

00:18:22,000 --> 00:18:27,760
uh and on the basis of test runs the ci

00:18:25,760 --> 00:18:29,760
is then continued or being stopped

00:18:27,760 --> 00:18:31,039
to do further running of the pipeline so

00:18:29,760 --> 00:18:35,120
ml model has

00:18:31,039 --> 00:18:37,840
got huge influence of what we do and

00:18:35,120 --> 00:18:38,400
and and based on the decision being made

00:18:37,840 --> 00:18:41,200
by the

00:18:38,400 --> 00:18:42,720
the algorithm we basically mark or build

00:18:41,200 --> 00:18:46,520
green amber and red and

00:18:42,720 --> 00:18:49,520
and and and believe me uh we are

00:18:46,520 --> 00:18:51,200
96 percent accurate uh

00:18:49,520 --> 00:18:52,640
on what we do right now in our

00:18:51,200 --> 00:18:55,679
automation

00:18:52,640 --> 00:18:57,280
uh having said that uh we have very less

00:18:55,679 --> 00:19:00,640
time so let's quickly

00:18:57,280 --> 00:19:05,440
jump up to the demo uh

00:19:00,640 --> 00:19:05,440
let me quickly share my

00:19:06,799 --> 00:19:13,280
video studio

00:19:10,160 --> 00:19:14,880
let me quickly show you what we have so

00:19:13,280 --> 00:19:16,559
so this is the this is the framework

00:19:14,880 --> 00:19:18,080
project and if you look at it we have

00:19:16,559 --> 00:19:20,400
appd framework

00:19:18,080 --> 00:19:21,440
uh which is nothing but the the

00:19:20,400 --> 00:19:24,480
shippable wrapper

00:19:21,440 --> 00:19:26,480
that's that's what i was telling you

00:19:24,480 --> 00:19:28,160
uh you can see hello report here why is

00:19:26,480 --> 00:19:30,480
because i executed in local

00:19:28,160 --> 00:19:32,240
uh but but actually it's get centralized

00:19:30,480 --> 00:19:33,760
so we have library here which is a base

00:19:32,240 --> 00:19:37,760
library which is nothing but

00:19:33,760 --> 00:19:39,360
our the custom

00:19:37,760 --> 00:19:41,120
functions or the reusable functions

00:19:39,360 --> 00:19:44,799
which we can we call it

00:19:41,120 --> 00:19:48,400
in our in all in our scripts

00:19:44,799 --> 00:19:50,640
uh we have props uh which uh

00:19:48,400 --> 00:19:51,679
we are with which basically holds our

00:19:50,640 --> 00:19:54,960
credentials and

00:19:51,679 --> 00:19:59,120
and some framework related properties

00:19:54,960 --> 00:20:01,760
uh we have uh

00:19:59,120 --> 00:20:03,840
source so what we do is we basically

00:20:01,760 --> 00:20:07,120
define all our components

00:20:03,840 --> 00:20:11,440
uh in in in the separate file

00:20:07,120 --> 00:20:13,440
and then we have uh configurations now

00:20:11,440 --> 00:20:15,600
what we have done is we have split these

00:20:13,440 --> 00:20:19,600
configurations into two part

00:20:15,600 --> 00:20:20,880
uh one being uh the application level

00:20:19,600 --> 00:20:22,080
configurations

00:20:20,880 --> 00:20:24,720
and one is the framework level

00:20:22,080 --> 00:20:27,760
configuration these are uh project level

00:20:24,720 --> 00:20:30,960
if you look at it you would basically

00:20:27,760 --> 00:20:35,120
see that we have

00:20:30,960 --> 00:20:38,480
got the configurations

00:20:35,120 --> 00:20:41,200
and what we have seen is that we have

00:20:38,480 --> 00:20:42,400
we have basically defined different

00:20:41,200 --> 00:20:44,720
variables here

00:20:42,400 --> 00:20:45,679
so what our master script does master

00:20:44,720 --> 00:20:49,520
scripts

00:20:45,679 --> 00:20:52,320
uh looks into this particular file first

00:20:49,520 --> 00:20:53,120
and see whether they need to open up an

00:20:52,320 --> 00:20:55,520
extension

00:20:53,120 --> 00:20:57,280
whether what environment to run uh

00:20:55,520 --> 00:20:59,760
whether they need to run it on local

00:20:57,280 --> 00:21:02,240
or lambda test or browser stack or local

00:20:59,760 --> 00:21:07,120
or in any of the cloud platform

00:21:02,240 --> 00:21:07,120
um and then uh

00:21:08,240 --> 00:21:11,840
and then you know the run configurations

00:21:10,720 --> 00:21:16,080
which is nothing but

00:21:11,840 --> 00:21:18,080
uh what platform what version uh

00:21:16,080 --> 00:21:19,760
what browser you need to run and then

00:21:18,080 --> 00:21:22,880
what spec to run

00:21:19,760 --> 00:21:26,320
uh what are the base urls

00:21:22,880 --> 00:21:30,240
that we have and then the extensions

00:21:26,320 --> 00:21:32,080
that are being will be used okay uh

00:21:30,240 --> 00:21:34,000
uh we will not run it on lambda test

00:21:32,080 --> 00:21:36,400
right now or source labs

00:21:34,000 --> 00:21:37,600
uh but what this is just for the demo

00:21:36,400 --> 00:21:41,679
purpose

00:21:37,600 --> 00:21:42,000
um interesting so now we have extensions

00:21:41,679 --> 00:21:45,280
uh

00:21:42,000 --> 00:21:49,120
which holds extensions for us we have

00:21:45,280 --> 00:21:51,679
project library and this project library

00:21:49,120 --> 00:21:56,640
consists of our business functions

00:21:51,679 --> 00:21:59,679
we have pages which holds our objects

00:21:56,640 --> 00:22:03,120
and then we have specs uh which is

00:21:59,679 --> 00:22:04,000
our uh cases uh so what we do is we

00:22:03,120 --> 00:22:06,080
basically

00:22:04,000 --> 00:22:07,039
write our cases which basically calls

00:22:06,080 --> 00:22:09,280
our components

00:22:07,039 --> 00:22:11,280
and then which calls out the pages for

00:22:09,280 --> 00:22:13,600
the objects and and likewise

00:22:11,280 --> 00:22:15,440
so now anyone who is actually

00:22:13,600 --> 00:22:17,280
implementing our base

00:22:15,440 --> 00:22:19,039
uh shippable framework they just need to

00:22:17,280 --> 00:22:19,440
create a source directory and all those

00:22:19,039 --> 00:22:21,840
things

00:22:19,440 --> 00:22:23,520
and and that's about it and and then it

00:22:21,840 --> 00:22:24,400
seamlessly can connect with the updates

00:22:23,520 --> 00:22:27,440
framework

00:22:24,400 --> 00:22:28,559
or the shipping framework uh we have an

00:22:27,440 --> 00:22:30,799
apti master file

00:22:28,559 --> 00:22:32,799
uh this is what is the master file that

00:22:30,799 --> 00:22:35,919
i was talking about

00:22:32,799 --> 00:22:39,280
and this is uh basically uh

00:22:35,919 --> 00:22:43,600
that it will read through uh the

00:22:39,280 --> 00:22:46,559
config file here okay and uh

00:22:43,600 --> 00:22:49,039
create a configurations file which can

00:22:46,559 --> 00:22:52,240
later merge with the web driver

00:22:49,039 --> 00:22:54,559
js file so if i go to the apt

00:22:52,240 --> 00:22:56,159
master you would see that we have

00:22:54,559 --> 00:22:58,480
written a merge feature

00:22:56,159 --> 00:22:59,679
here which can basically take the web

00:22:58,480 --> 00:23:02,320
driver io

00:22:59,679 --> 00:23:04,559
config and then merge it with our

00:23:02,320 --> 00:23:09,280
configurations which we have set above

00:23:04,559 --> 00:23:10,640
and read through our config file um

00:23:09,280 --> 00:23:12,400
and obviously these are different

00:23:10,640 --> 00:23:14,559
runners that we have used and

00:23:12,400 --> 00:23:16,880
and likewise so we have browser stack

00:23:14,559 --> 00:23:20,000
lambda test and source labs

00:23:16,880 --> 00:23:21,600
um we also have uh

00:23:20,000 --> 00:23:24,240
this web drive i o config which is the

00:23:21,600 --> 00:23:27,360
base configurations we just have some

00:23:24,240 --> 00:23:30,480
hooks written here which is after test

00:23:27,360 --> 00:23:32,960
and and you know after sweet sweet uh

00:23:30,480 --> 00:23:34,720
wherein what we do is we basically picks

00:23:32,960 --> 00:23:39,039
up the results and push everything

00:23:34,720 --> 00:23:42,880
up in the in the in the back end

00:23:39,039 --> 00:23:44,720
for an analysis so this is very clean

00:23:42,880 --> 00:23:47,279
this is there is nothing in it

00:23:44,720 --> 00:23:49,520
but what we do is since web driver i o

00:23:47,279 --> 00:23:51,520
only understand this particular file

00:23:49,520 --> 00:23:54,000
we basically create our own

00:23:51,520 --> 00:23:55,600
configurations

00:23:54,000 --> 00:23:57,600
and then watch it with this particular

00:23:55,600 --> 00:24:00,640
file and then execute it so

00:23:57,600 --> 00:24:02,240
that's how we basically wrapped uh web

00:24:00,640 --> 00:24:03,520
driver io configurations with our

00:24:02,240 --> 00:24:05,919
configuration which are custom

00:24:03,520 --> 00:24:08,880
configurations so when you would

00:24:05,919 --> 00:24:09,840
start using this you can create your own

00:24:08,880 --> 00:24:11,840
set of

00:24:09,840 --> 00:24:13,520
attributes and the the master script

00:24:11,840 --> 00:24:17,039
will take it over from there

00:24:13,520 --> 00:24:21,200
okay so this is our project structure

00:24:17,039 --> 00:24:25,919
uh let me quickly run run run it for you

00:24:21,200 --> 00:24:30,840
okay so i'll just uh put a command here

00:24:25,919 --> 00:24:33,840
this side so it started executing

00:24:30,840 --> 00:24:33,840
uh

00:24:36,880 --> 00:24:40,400
and this would basically

00:24:43,520 --> 00:24:50,880
basically create this will open up

00:24:47,679 --> 00:24:50,880
the browser for us

00:24:53,200 --> 00:24:58,480
and you would see here there is a small

00:24:55,039 --> 00:24:58,480
icon here

00:24:58,640 --> 00:25:02,159
which is nothing but extension and here

00:25:00,400 --> 00:25:05,039
the extension is being loaded

00:25:02,159 --> 00:25:07,440
this is apt is exactly client and now it

00:25:05,039 --> 00:25:10,880
is running some tests

00:25:07,440 --> 00:25:15,840
so let's wait for some time

00:25:10,880 --> 00:25:18,480
to just take some few seconds now

00:25:15,840 --> 00:25:18,480
so it's done

00:25:19,840 --> 00:25:23,840
it's going for the second one second

00:25:26,840 --> 00:25:29,840
test

00:25:29,919 --> 00:25:34,480
so it's passed and now uh what what

00:25:33,120 --> 00:25:37,279
would have happened is

00:25:34,480 --> 00:25:38,640
it would have pushed in all our results

00:25:37,279 --> 00:25:42,480
into the back end

00:25:38,640 --> 00:25:45,919
uh but uh

00:25:42,480 --> 00:25:48,799
so it's generating the results

00:25:45,919 --> 00:25:51,039
and i'm i'm running this on local and

00:25:48,799 --> 00:25:56,720
that is the reason i can't uh

00:25:51,039 --> 00:25:57,450
show you the back end because of ip

00:25:56,720 --> 00:26:00,539
so so

00:25:57,450 --> 00:26:00,539
[Music]

00:26:00,720 --> 00:26:07,360
once uh the report is done uh

00:26:04,159 --> 00:26:08,960
we we then analyze and then

00:26:07,360 --> 00:26:11,279
our machine learning model takes care

00:26:08,960 --> 00:26:12,000
now coming back to the particular

00:26:11,279 --> 00:26:15,360
framework

00:26:12,000 --> 00:26:18,480
uh if you see it's quite clean uh

00:26:15,360 --> 00:26:20,559
it's easy uh to use and

00:26:18,480 --> 00:26:23,120
if i go to package.json and one of the

00:26:20,559 --> 00:26:24,720
things that i that i wanted to show is

00:26:23,120 --> 00:26:27,120
these are all the dependencies so what

00:26:24,720 --> 00:26:29,919
you do is you just need to do an npm

00:26:27,120 --> 00:26:32,480
install and install all the

00:26:29,919 --> 00:26:34,240
packages that are required and that's

00:26:32,480 --> 00:26:38,000
about it and if you look at it

00:26:34,240 --> 00:26:39,120
uh these are individual services that we

00:26:38,000 --> 00:26:42,480
are using

00:26:39,120 --> 00:26:44,640
and uh and how easy it is like you know

00:26:42,480 --> 00:26:47,679
if if i want to now use

00:26:44,640 --> 00:26:49,360
uh a service

00:26:47,679 --> 00:26:51,679
of web driver i would just need to hook

00:26:49,360 --> 00:26:54,880
into package.json that's about it

00:26:51,679 --> 00:26:56,240
and then and then put it into our onto

00:26:54,880 --> 00:26:59,279
our framework

00:26:56,240 --> 00:27:03,360
so this is what i have uh

00:26:59,279 --> 00:27:03,360
for today and uh

00:27:03,679 --> 00:27:07,919
thank you very much for giving me the

00:27:06,480 --> 00:27:10,960
opportunity

00:27:07,919 --> 00:27:14,080
to to speak in the open js uh con

00:27:10,960 --> 00:27:15,360
conference and and uh if you guys have

00:27:14,080 --> 00:27:18,960
any questions

00:27:15,360 --> 00:27:22,080
uh going forward please

00:27:18,960 --> 00:27:22,640
feel free to reach me on my twitter and

00:27:22,080 --> 00:27:26,000
linkedin

00:27:22,640 --> 00:27:26,880
and i'll be very happy to to to answer

00:27:26,000 --> 00:27:28,960
all your queries

00:27:26,880 --> 00:27:30,240
and and please try this particular

00:27:28,960 --> 00:27:33,360
shippable wrapper

00:27:30,240 --> 00:27:34,399
and do let us know your feedback thank

00:27:33,360 --> 00:27:38,480
you very much

00:27:34,399 --> 00:27:43,200
and please be safe in this pandemic

00:27:38,480 --> 00:27:43,200

YouTube URL: https://www.youtube.com/watch?v=wGMK45LLUoA


