Title: Modules
Publication date: 2019-06-04
Playlist: OpenJS Foundation Collaborator Summit, Berlin, May 2019
Description: 
	OpenJS Foundation Collaborator Summit, Berlin, 2019
Captions: 
	00:00:01,170 --> 00:00:06,960
so I want to just kind of maybe start

00:00:04,049 --> 00:00:10,740
with some questions you know maybe just

00:00:06,960 --> 00:00:16,190
like say some terms and then maybe just

00:00:10,740 --> 00:00:18,539
a razor they're familiar common jabs

00:00:16,190 --> 00:00:21,869
those who aren't familiar common chance

00:00:18,539 --> 00:00:23,900
is the module learning algorithm and

00:00:21,869 --> 00:00:27,779
implementation that the users right now

00:00:23,900 --> 00:00:30,090
ACMA script modules second script

00:00:27,779 --> 00:00:36,120
modules the version of module loading

00:00:30,090 --> 00:00:38,520
that's specified in x5 I say like

00:00:36,120 --> 00:00:40,649
specified in a weird way because parts

00:00:38,520 --> 00:00:44,450
of it are specified in parts like the

00:00:40,649 --> 00:00:49,879
loader itself fully specified

00:00:44,450 --> 00:00:52,890
complicated transparent interoperability

00:00:49,879 --> 00:00:56,719
so transparent interoperability is a

00:00:52,890 --> 00:00:56,719
word that we'd ever hit that I were to

00:00:56,930 --> 00:01:02,640
because it's confusing but when I say it

00:00:59,969 --> 00:01:05,729
I'm specifically referring to being able

00:01:02,640 --> 00:01:08,130
to require any SM module or important

00:01:05,729 --> 00:01:10,439
comment jams bottle and not have to know

00:01:08,130 --> 00:01:14,100
you know what the format is that it

00:01:10,439 --> 00:01:16,320
exposes we currently for example in our

00:01:14,100 --> 00:01:18,570
implementation have a transparent

00:01:16,320 --> 00:01:19,259
interrupt melody that only to import

00:01:18,570 --> 00:01:21,270
commonjs

00:01:19,259 --> 00:01:23,970
and only the defaults out there to kick

00:01:21,270 --> 00:01:26,340
it index works you can start to see how

00:01:23,970 --> 00:01:29,509
this goes really educate see so let me

00:01:26,340 --> 00:01:29,509
log in and get started

00:01:36,030 --> 00:01:41,280
I figure what would be like a good way

00:01:39,180 --> 00:01:44,360
to start before we kind of jumped into

00:01:41,280 --> 00:01:48,060
discussion is just like a quick history

00:01:44,360 --> 00:02:06,360
I'll save you all like a longer fuller

00:01:48,060 --> 00:02:13,190
slide very cool so right here what you

00:02:06,360 --> 00:02:13,190
can see is and modules

00:02:24,750 --> 00:02:27,909
[Music]

00:02:40,400 --> 00:02:47,040
oh then it's great you can even see what

00:02:45,239 --> 00:02:49,110
I'm doing for those of you are wondering

00:02:47,040 --> 00:02:51,360
what that has been a corner of a really

00:02:49,110 --> 00:02:52,830
beautiful water color painting of Calvin

00:02:51,360 --> 00:02:57,239
and Hobbes so you need to get the

00:02:52,830 --> 00:03:02,400
exciting where is alarm I mean I've been

00:02:57,239 --> 00:03:06,600
talking isn't it seem like scream um so

00:03:02,400 --> 00:03:09,860
to just I guess set the tone just stop

00:03:06,600 --> 00:03:09,860
me if I'm not making sense

00:03:11,030 --> 00:03:23,730
well this is what I was unique second

00:03:22,049 --> 00:03:27,420
mindful talking because of people like

00:03:23,730 --> 00:03:31,880
screaming and stuff so we are wiring

00:03:27,420 --> 00:03:31,880
this equation but I need to run before

00:03:37,130 --> 00:03:52,069
sharing my screen so it's

00:03:49,819 --> 00:04:05,959
I've been going through this document a

00:03:52,069 --> 00:04:07,639
little bit in history so I did that on

00:04:05,959 --> 00:04:21,889
purpose because I believe that that is

00:04:07,639 --> 00:04:23,090
set up the body up to the mic yeah okay

00:04:21,889 --> 00:04:27,139
whatever

00:04:23,090 --> 00:04:29,780
so a little bit over a year ago even

00:04:27,139 --> 00:04:34,430
closer to to at this point I don't know

00:04:29,780 --> 00:04:36,470
dates but we released yes em in note we

00:04:34,430 --> 00:04:39,310
did an initial implementation and if I

00:04:36,470 --> 00:04:45,710
hide a flag I believe that was in a

00:04:39,310 --> 00:04:48,139
version of no I don't know but so it

00:04:45,710 --> 00:04:50,289
landed in people were not super thrilled

00:04:48,139 --> 00:04:52,550
with some of the implementation details

00:04:50,289 --> 00:04:55,190
some of the sticker points for example

00:04:52,550 --> 00:04:59,479
were their environment at the dot NJ s

00:04:55,190 --> 00:05:01,099
extension for PS modules but you know

00:04:59,479 --> 00:05:06,860
there there are a number of different

00:05:01,099 --> 00:05:08,180
parties in response to this and this is

00:05:06,860 --> 00:05:10,820
actually kind of a cool thing if you're

00:05:08,180 --> 00:05:13,490
not familiar with it in general the TSE

00:05:10,820 --> 00:05:16,880
keeps we started doing this thing called

00:05:13,490 --> 00:05:18,380
strategic initiatives we could look at

00:05:16,880 --> 00:05:20,270
the history and see how well these are

00:05:18,380 --> 00:05:21,740
this is something that's talked about

00:05:20,270 --> 00:05:24,470
but kind of was picked off by Mike

00:05:21,740 --> 00:05:26,570
Dawson you know I'm covert of 2017 and

00:05:24,470 --> 00:05:27,889
the strategic initiatives and things

00:05:26,570 --> 00:05:31,669
that we've identified they're like

00:05:27,889 --> 00:05:34,870
really high level things that we should

00:05:31,669 --> 00:05:37,310
be focused on during the videos project

00:05:34,870 --> 00:05:40,520
he was a bit of a shift that we made

00:05:37,310 --> 00:05:43,099
them around the TST being much more

00:05:40,520 --> 00:05:44,270
forward thinking than being responsive

00:05:43,099 --> 00:05:46,280
so a lot of things

00:05:44,270 --> 00:05:47,990
CSU is focused on beforehand it was like

00:05:46,280 --> 00:05:50,479
oh there's a fire we've got a footnote

00:05:47,990 --> 00:05:52,039
we wanted to have a shift to be much

00:05:50,479 --> 00:05:55,159
more for thinking and thinking of the

00:05:52,039 --> 00:05:57,909
future and kind of dealing with

00:05:55,159 --> 00:06:01,219
existential threats to to know himself

00:05:57,909 --> 00:06:03,500
and so you can see one of the first ones

00:06:01,219 --> 00:06:06,050
on there was modules

00:06:03,500 --> 00:06:08,120
and I was the champion of it you should

00:06:06,050 --> 00:06:10,690
actually probably up those things but

00:06:08,120 --> 00:06:12,080
there's this originally yes that's from

00:06:10,690 --> 00:06:14,660
00:06:12,080 --> 00:06:18,230
this kind of was how the initial

00:06:14,660 --> 00:06:21,590
implementation was like spec down and

00:06:18,230 --> 00:06:23,450
then implement as I mentioned was not

00:06:21,590 --> 00:06:25,790
extremely well received

00:06:23,450 --> 00:06:28,580
I myself was glad that we had something

00:06:25,790 --> 00:06:31,790
as a starting point that people couldn't

00:06:28,580 --> 00:06:35,090
agree on this stuff so what we did is we

00:06:31,790 --> 00:06:37,010
spun up this modules team after about

00:06:35,090 --> 00:06:39,320
six months of just like yelling and like

00:06:37,010 --> 00:06:41,960
shedding we came up with the plan and

00:06:39,320 --> 00:06:46,310
the plan was this idea that we call the

00:06:41,960 --> 00:06:51,560
minimal oh so no 2.5 is where I landed

00:06:46,310 --> 00:06:54,860
great so the idea modules came did is we

00:06:51,560 --> 00:06:59,930
kind of permutated a whole bunch of use

00:06:54,860 --> 00:07:01,790
cases as well as different different

00:06:59,930 --> 00:07:04,490
needs that we had from the module loader

00:07:01,790 --> 00:07:07,240
so if you actually go here and go into

00:07:04,490 --> 00:07:11,270
the issues here and look at one of the

00:07:07,240 --> 00:07:13,430
213 closed issues you can see lots of

00:07:11,270 --> 00:07:16,160
different issues that were opened up for

00:07:13,430 --> 00:07:18,260
like you know well early ones around the

00:07:16,160 --> 00:07:20,720
governance later ones around stuff like

00:07:18,260 --> 00:07:25,400
you know import Maps proposal for their

00:07:20,720 --> 00:07:28,580
imports upstream changes to know if you

00:07:25,400 --> 00:07:30,290
go into the modules people itself liam a

00:07:28,580 --> 00:07:33,380
list of these different features that

00:07:30,290 --> 00:07:35,570
was based on number 55 which was the

00:07:33,380 --> 00:07:37,400
collection of kind of tracking all of

00:07:35,570 --> 00:07:40,310
those and so we have all these different

00:07:37,400 --> 00:07:42,440
use cases that we identified that he

00:07:40,310 --> 00:07:44,360
would need although it was also kind of

00:07:42,440 --> 00:07:48,560
identified earlier that hey some of

00:07:44,360 --> 00:07:50,870
these use cases don't aren't able to

00:07:48,560 --> 00:07:51,919
coexist so we can want everything but

00:07:50,870 --> 00:07:55,820
we're going to kind of have to figure

00:07:51,919 --> 00:07:58,160
out what works and what doesn't so we

00:07:55,820 --> 00:08:00,620
came up with was this plan with

00:07:58,160 --> 00:08:03,400
different phases so they 0 is what

00:08:00,620 --> 00:08:06,229
branching off of the implementation

00:08:03,400 --> 00:08:08,750
phase one was this concept of the middle

00:08:06,229 --> 00:08:11,419
hurdle so what we did is we just

00:08:08,750 --> 00:08:13,910
stripped back features from the current

00:08:11,419 --> 00:08:16,999
implementation until we had a baseline

00:08:13,910 --> 00:08:19,279
and that baseline was not really usable

00:08:16,999 --> 00:08:21,979
but that baseline was hey what are the

00:08:19,279 --> 00:08:23,689
common features that all the potential

00:08:21,979 --> 00:08:25,249
future iterations that we're talking

00:08:23,689 --> 00:08:27,199
about and all of the use cases that we

00:08:25,249 --> 00:08:30,379
like to see happen

00:08:27,199 --> 00:08:31,879
are possible with so what are what is a

00:08:30,379 --> 00:08:34,009
baseline that if we were all to go and

00:08:31,879 --> 00:08:36,379
forth known right now and try to make

00:08:34,009 --> 00:08:38,240
our perfect implementation of modules we

00:08:36,379 --> 00:08:41,000
can all work from the exact same point

00:08:38,240 --> 00:08:44,660
and at least build upon the same shared

00:08:41,000 --> 00:08:46,370
idea and then phase two is fleshing up

00:08:44,660 --> 00:08:48,529
that implementation with enough

00:08:46,370 --> 00:08:50,660
functionality that could actually be

00:08:48,529 --> 00:08:52,910
useful so the phase one minimal cradle

00:08:50,660 --> 00:08:54,889
was like absolutely useless let's make

00:08:52,910 --> 00:08:58,040
it it kind of useful and then we shipped

00:08:54,889 --> 00:09:00,500
phase two with nodes well and now we're

00:08:58,040 --> 00:09:03,279
in phase three which is extending that

00:09:00,500 --> 00:09:06,920
MVP with a head of user experience

00:09:03,279 --> 00:09:08,329
education that we've found and that's

00:09:06,920 --> 00:09:10,939
kind of where we are right now and

00:09:08,329 --> 00:09:12,379
through throughout the entire phase one

00:09:10,939 --> 00:09:15,410
of the things that we came up with as

00:09:12,379 --> 00:09:17,600
fruit was these kind of like goals

00:09:15,410 --> 00:09:18,649
guidelines and vision that everyone

00:09:17,600 --> 00:09:20,569
agreed to we've been at we couldn't

00:09:18,649 --> 00:09:22,490
agree about you know like specify our

00:09:20,569 --> 00:09:24,620
resolution or transparent Interop we

00:09:22,490 --> 00:09:26,899
could agree that we wanted more

00:09:24,620 --> 00:09:28,730
implementation to be spec compliant we

00:09:26,899 --> 00:09:31,939
wanted as much for it to be browser

00:09:28,730 --> 00:09:34,610
equivalent so we wanted the loader in

00:09:31,939 --> 00:09:37,250
knows but as much as possible that's

00:09:34,610 --> 00:09:39,019
either the browser work the direction of

00:09:37,250 --> 00:09:42,050
what the browser's capabilities may be

00:09:39,019 --> 00:09:44,000
in the near future and we also wanted to

00:09:42,050 --> 00:09:45,889
docto anything the brook common Janus

00:09:44,000 --> 00:09:48,410
so any of the changes that you were

00:09:45,889 --> 00:09:50,569
planning to do but just you know go

00:09:48,410 --> 00:09:55,250
under the hood and completely Raver

00:09:50,569 --> 00:09:56,629
currently existing system so with v-0

00:09:55,250 --> 00:09:58,129
starting from the current shipping no

00:09:56,629 --> 00:10:00,559
the following changes were made to strip

00:09:58,129 --> 00:10:02,809
out most of the eight point five point

00:10:00,559 --> 00:10:04,459
zero describing two modules so the first

00:10:02,809 --> 00:10:07,579
thing we did is remove support and the

00:10:04,459 --> 00:10:09,910
import statement for a command J of JSON

00:10:07,579 --> 00:10:13,490
in native modules so that was all of the

00:10:09,910 --> 00:10:15,920
transparent trough that existed we also

00:10:13,490 --> 00:10:19,250
removed dynamic path searching so that

00:10:15,920 --> 00:10:22,399
meant no automatic adding of extensions

00:10:19,250 --> 00:10:24,709
no directory resolution support support

00:10:22,399 --> 00:10:26,720
for like slash index and /p x dot m

00:10:24,709 --> 00:10:28,910
again just being able to import a

00:10:26,720 --> 00:10:30,580
directory and those important even for

00:10:28,910 --> 00:10:32,350
the main fields so there was

00:10:30,580 --> 00:10:34,690
there wasn't really a support for very

00:10:32,350 --> 00:10:41,530
important very important when you just

00:10:34,690 --> 00:10:44,350
give a specifier as a man and a

00:10:41,530 --> 00:10:48,430
specifier would be something like you

00:10:44,350 --> 00:10:51,520
know Marlo - that's an example of a bear

00:10:48,430 --> 00:10:57,550
specifier and in the package.json you're

00:10:51,520 --> 00:11:01,390
able to use the main field to specify

00:10:57,550 --> 00:11:04,240
like what that resolves to but we even

00:11:01,390 --> 00:11:08,800
stripped data from this kind of thing

00:11:04,240 --> 00:11:10,420
zero we completely removed the VM module

00:11:08,800 --> 00:11:13,990
implementation we also completely

00:11:10,420 --> 00:11:16,900
removed the loader implementation and

00:11:13,990 --> 00:11:20,380
these changes were implemented in this

00:11:16,900 --> 00:11:22,600
pull request over here no need to wait

00:11:20,380 --> 00:11:24,370
for it to load the next case that we did

00:11:22,600 --> 00:11:27,790
which was was called the minimum kernel

00:11:24,370 --> 00:11:29,260
was introducing a few more features into

00:11:27,790 --> 00:11:30,970
the implementation that were necessary

00:11:29,260 --> 00:11:32,470
to just kind of like they were the

00:11:30,970 --> 00:11:34,750
baseline features that are road agreed

00:11:32,470 --> 00:11:37,630
on so that included module and create

00:11:34,750 --> 00:11:38,770
require from path a now deprecated API

00:11:37,630 --> 00:11:43,210
because it turns out it's really

00:11:38,770 --> 00:11:44,740
annoying to use and we talked about

00:11:43,210 --> 00:11:46,930
things like important that are require

00:11:44,740 --> 00:11:50,650
or you have any important statements

00:11:46,930 --> 00:11:52,090
have transparent or raw but we decided

00:11:50,650 --> 00:11:56,680
that none of that would be in the middle

00:11:52,090 --> 00:11:58,690
of Perl consensus around it and each of

00:11:56,680 --> 00:12:00,460
those features actually wouldn't eat

00:11:58,690 --> 00:12:03,100
other potential features that people are

00:12:00,460 --> 00:12:05,110
thinking about we made the important

00:12:03,100 --> 00:12:05,860
statements only support the done MJS

00:12:05,110 --> 00:12:07,960
extension

00:12:05,860 --> 00:12:09,670
the idea being here that we were

00:12:07,960 --> 00:12:11,890
planning as a group that we would always

00:12:09,670 --> 00:12:15,850
work out of kids so even if we found a

00:12:11,890 --> 00:12:19,060
way to have not faced piles as ESM there

00:12:15,850 --> 00:12:23,740
will always be a need for completely

00:12:19,060 --> 00:12:26,560
unto us so we kept support for important

00:12:23,740 --> 00:12:29,320
ESM that only for in jazz files we

00:12:26,560 --> 00:12:31,330
included important meta URL this is

00:12:29,320 --> 00:12:34,840
something that exists in the browser as

00:12:31,330 --> 00:12:38,650
well it just gives you file URL to the

00:12:34,840 --> 00:12:40,990
file that you're in we kept dynamic

00:12:38,650 --> 00:12:43,720
important that was another feature we

00:12:40,990 --> 00:12:45,130
had pretty much large sets as this will

00:12:43,720 --> 00:12:48,700
always

00:12:45,130 --> 00:12:51,790
and we did still allow for support for

00:12:48,700 --> 00:12:56,560
built-in modules with named exports so

00:12:51,790 --> 00:13:03,640
that would be something like what it

00:12:56,560 --> 00:13:06,910
would be like import refit spell so

00:13:03,640 --> 00:13:07,540
stuff like this continue to learn we all

00:13:06,910 --> 00:13:09,220
agreed

00:13:07,540 --> 00:13:10,990
hey we're never gonna change that

00:13:09,220 --> 00:13:12,700
implementation we're always gonna want

00:13:10,990 --> 00:13:14,110
to be able to work the built-in

00:13:12,700 --> 00:13:17,740
libraries we're always gonna want named

00:13:14,110 --> 00:13:19,029
exports built-in libraries the biblical

00:13:17,740 --> 00:13:21,279
books and libraries and node even though

00:13:19,029 --> 00:13:23,800
they're implemented how much is it's all

00:13:21,279 --> 00:13:26,260
known to us compile time so we can do

00:13:23,800 --> 00:13:28,149
some fancy stuff with our buildings that

00:13:26,260 --> 00:13:30,339
can't be done with your system modules

00:13:28,149 --> 00:13:33,130
but we bring much hype consensus that

00:13:30,339 --> 00:13:36,070
than any implementation moving forward

00:13:33,130 --> 00:13:37,870
will have that featuring so the

00:13:36,070 --> 00:13:40,420
combination of all of those make the

00:13:37,870 --> 00:13:43,060
minimal kernel if you're wondering

00:13:40,420 --> 00:13:45,700
timeline here this is probably about

00:13:43,060 --> 00:13:48,220
like 15 months into discussion we

00:13:45,700 --> 00:13:50,199
managed to get there um but it would end

00:13:48,220 --> 00:13:52,180
up being really amazing was like by the

00:13:50,199 --> 00:13:54,160
time we came to this decision

00:13:52,180 --> 00:13:55,959
I actually just tripping things away

00:13:54,160 --> 00:13:59,500
instead of trying to add things and

00:13:55,959 --> 00:14:02,440
having that that shared understanding of

00:13:59,500 --> 00:14:04,990
the space it just unlocked a whole bunch

00:14:02,440 --> 00:14:06,940
of stuff because now we won we at least

00:14:04,990 --> 00:14:10,390
had a fundamental place that we were all

00:14:06,940 --> 00:14:12,010
on the same page about so the next bit

00:14:10,390 --> 00:14:13,959
was Phase two and there was a lot of

00:14:12,010 --> 00:14:15,790
debate to kind of pick the features that

00:14:13,959 --> 00:14:18,640
weddings are phase two and actually a

00:14:15,790 --> 00:14:20,110
lot of research to land on them but

00:14:18,640 --> 00:14:22,959
would eventually land it into phase 2

00:14:20,110 --> 00:14:24,459
was if one was defining that semantics

00:14:22,959 --> 00:14:26,980
for importing a package of entry point

00:14:24,459 --> 00:14:31,019
so that's like you know the main field

00:14:26,980 --> 00:14:35,529
and there was a specify resolution

00:14:31,019 --> 00:14:38,680
proposal that is referenced here and the

00:14:35,529 --> 00:14:40,540
floor request that I ended it and so

00:14:38,680 --> 00:14:41,980
this kind of went through how that would

00:14:40,540 --> 00:14:45,449
be implemented how this would be

00:14:41,980 --> 00:14:58,279
resolved and how that would work

00:14:45,449 --> 00:15:01,260
yes oh yeah

00:14:58,279 --> 00:15:06,420
so if you want to go to that MDM session

00:15:01,260 --> 00:15:08,100
two of us today thank you and please in

00:15:06,420 --> 00:15:10,019
general if you want to walk out for the

00:15:08,100 --> 00:15:10,920
bathroom personal grievances other

00:15:10,019 --> 00:15:15,170
session

00:15:10,920 --> 00:15:17,250
these imploring men alone

00:15:15,170 --> 00:15:21,060
that was seriously like if you need to

00:15:17,250 --> 00:15:22,769
get in the other session so we define

00:15:21,060 --> 00:15:24,779
the semantics for package entry points

00:15:22,769 --> 00:15:26,790
we define the semantics for determining

00:15:24,779 --> 00:15:28,829
when to load resources as either a

00:15:26,790 --> 00:15:33,000
chance with us models

00:15:28,829 --> 00:15:35,519
this is what is the introduction of the

00:15:33,000 --> 00:15:38,070
field in the package caissons you can

00:15:35,519 --> 00:15:41,160
our do tightened module if you do type

00:15:38,070 --> 00:15:45,180
module the package.json is no resolves

00:15:41,160 --> 00:15:47,279
to SM instead of CJ s and it did involve

00:15:45,180 --> 00:15:49,380
the creation of the new box CGS

00:15:47,279 --> 00:15:52,709
extension which I'm pretty excited about

00:15:49,380 --> 00:15:54,329
so like I actually now for me we've got

00:15:52,709 --> 00:16:00,290
three extensions and this is like

00:15:54,329 --> 00:16:03,870
obviously CJ s sequence works

00:16:00,290 --> 00:16:05,310
my only shorthand to expand to the

00:16:03,870 --> 00:16:09,990
sharni so just assume that that means

00:16:05,310 --> 00:16:11,579
rummy and that's yes now so I'm not

00:16:09,990 --> 00:16:13,470
saying to do this in your group today

00:16:11,579 --> 00:16:15,630
like this is actually a way in which you

00:16:13,470 --> 00:16:18,170
could organize your code that was like

00:16:15,630 --> 00:16:20,550
always work pretty much all environments

00:16:18,170 --> 00:16:22,170
but that was a big part of it because if

00:16:20,550 --> 00:16:25,649
we had importing of doc Janice

00:16:22,170 --> 00:16:27,589
hello and Janice is always ESM well how

00:16:25,649 --> 00:16:30,630
do you still import any common J's files

00:16:27,589 --> 00:16:33,449
the other thing is like these semantics

00:16:30,630 --> 00:16:34,740
are all down to the patch so if you make

00:16:33,449 --> 00:16:35,399
a folder and then folder hasn't

00:16:34,740 --> 00:16:37,890
package.json

00:16:35,399 --> 00:16:40,170
that will define the semantics from that

00:16:37,890 --> 00:16:42,390
folder down the folder hierarchy so you

00:16:40,170 --> 00:16:44,399
can kind of have jazz files throughout

00:16:42,390 --> 00:16:46,829
their project but as long as there's a

00:16:44,399 --> 00:16:49,410
package.json irritable use the nares

00:16:46,829 --> 00:16:52,260
match just not to resolve what type of

00:16:49,410 --> 00:16:55,860
file it is this is really great because

00:16:52,260 --> 00:16:58,980
it's purely static so you know build

00:16:55,860 --> 00:17:03,360
tools or any sort of tool can crawl the

00:16:58,980 --> 00:17:05,309
file source of a project and a whole

00:17:03,360 --> 00:17:08,880
bunch of nested projects and this is

00:17:05,309 --> 00:17:10,750
deterministic and static so it's pretty

00:17:08,880 --> 00:17:12,970
consistent it's

00:17:10,750 --> 00:17:15,100
very different than for example if we

00:17:12,970 --> 00:17:17,679
did something like hey if you have a

00:17:15,100 --> 00:17:19,839
doctrine it could be either yes F or CJ

00:17:17,679 --> 00:17:21,549
s and we do some sort of like three

00:17:19,839 --> 00:17:23,169
parts of the ast and then determine the

00:17:21,549 --> 00:17:25,089
type of the loaded that would have been

00:17:23,169 --> 00:17:27,610
completely dynamic and then there would

00:17:25,089 --> 00:17:29,590
be no way to like statically determine

00:17:27,610 --> 00:17:32,950
that without actually parsing all of the

00:17:29,590 --> 00:17:35,710
files so I don't know I prefer this just

00:17:32,950 --> 00:17:37,509
mean we defined this semantics for

00:17:35,710 --> 00:17:40,210
enabling ESM treating the source code

00:17:37,509 --> 00:17:42,909
for a vowel that was the entry types

00:17:40,210 --> 00:17:44,529
proposal it was originally you can see

00:17:42,909 --> 00:17:47,169
we renamed it a couple times that was

00:17:44,529 --> 00:17:48,580
actually amazingly one of the only bike

00:17:47,169 --> 00:17:51,039
sheds that we had when we made the

00:17:48,580 --> 00:17:54,100
upstream er what's the name of this one

00:17:51,039 --> 00:17:57,070
feature is functionality the other thing

00:17:54,100 --> 00:17:58,539
that we also did this is something I've

00:17:57,070 --> 00:18:00,909
actually loved to talk to the room a

00:17:58,539 --> 00:18:03,070
little bit more in a minute was we

00:18:00,909 --> 00:18:06,220
disabled file extension directory

00:18:03,070 --> 00:18:09,399
searching by people back on a witness

00:18:06,220 --> 00:18:14,049
flag but what that means is that you

00:18:09,399 --> 00:18:17,679
can't like import dot slash folder slash

00:18:14,049 --> 00:18:21,460
thing you need to include the file

00:18:17,679 --> 00:18:23,889
extension to do it and if you don't

00:18:21,460 --> 00:18:25,629
include the file extension you better

00:18:23,889 --> 00:18:28,809
not have a file extension we're not

00:18:25,629 --> 00:18:30,789
going to mind it for a big motivating

00:18:28,809 --> 00:18:33,820
factor for this what is browser

00:18:30,789 --> 00:18:36,220
equivalents there are things like import

00:18:33,820 --> 00:18:40,480
maps that are gonna allow for some fancy

00:18:36,220 --> 00:18:42,909
stuff that generally browsers are not

00:18:40,480 --> 00:18:44,350
oiling the server three or four times to

00:18:42,909 --> 00:18:47,230
determine the file extension of a

00:18:44,350 --> 00:18:51,009
resource and so by introducing this

00:18:47,230 --> 00:18:53,679
constraint into owner loader we're my

00:18:51,009 --> 00:18:58,299
personal opinion significantly improving

00:18:53,679 --> 00:18:59,100
the possibility that that we have

00:18:58,299 --> 00:19:01,360
equivalents

00:18:59,100 --> 00:19:03,759
another thing that later in phase 2 is

00:19:01,360 --> 00:19:06,399
not in here was experimental JSON

00:19:03,759 --> 00:19:08,830
modules which excitingly ended up I

00:19:06,399 --> 00:19:11,129
think Danny Ehrenberg is somewhere here

00:19:08,830 --> 00:19:14,889
[Music]

00:19:11,129 --> 00:19:16,690
we went over well Dan did the work with

00:19:14,889 --> 00:19:19,210
some people on inspect axed and JSON

00:19:16,690 --> 00:19:21,549
modules actually landed in the HTML spec

00:19:19,210 --> 00:19:23,110
just a couple weeks ago and has a vendor

00:19:21,549 --> 00:19:24,770
interest from every major browser to

00:19:23,110 --> 00:19:28,910
implement and we

00:19:24,770 --> 00:19:30,700
now in those experiments a loader a spec

00:19:28,910 --> 00:19:32,870
compliant json loaded with the first

00:19:30,700 --> 00:19:36,950
implementation of it I'm pretty excited

00:19:32,870 --> 00:19:39,350
about so we're in phase 3 right now and

00:19:36,950 --> 00:19:41,600
that's kind of removing the experimental

00:19:39,350 --> 00:19:45,410
modules there's a couple of things that

00:19:41,600 --> 00:19:47,080
we and you know kind of after reading

00:19:45,410 --> 00:19:50,420
this will be a really great place to

00:19:47,080 --> 00:19:52,280
start a conversation so the first is a

00:19:50,420 --> 00:19:54,830
learner's solution that supports all the

00:19:52,280 --> 00:19:57,530
items in the features list so there's a

00:19:54,830 --> 00:19:59,810
like custom loaders the ability to say

00:19:57,530 --> 00:20:01,640
hey when you import a file like run this

00:19:59,810 --> 00:20:03,920
dynamic toad first instead of just

00:20:01,640 --> 00:20:05,000
floating in that is something that we

00:20:03,920 --> 00:20:06,950
need to figure out we have an

00:20:05,000 --> 00:20:09,110
implementation of loaders and it exists

00:20:06,950 --> 00:20:10,520
the chain is not super happy with it we

00:20:09,110 --> 00:20:12,290
have the beginning of a new

00:20:10,520 --> 00:20:14,510
implementation it has all sorts of

00:20:12,290 --> 00:20:19,700
memory links it's also building on top

00:20:14,510 --> 00:20:21,590
of the worker print implementation then

00:20:19,700 --> 00:20:23,870
still needs some kind of tweaks to be

00:20:21,590 --> 00:20:25,550
are in an ergonomic together so if

00:20:23,870 --> 00:20:27,950
you're looking for somewhere to work and

00:20:25,550 --> 00:20:29,840
you have some really great C++ trucks

00:20:27,950 --> 00:20:32,990
that's somewhere we I'm going to help us

00:20:29,840 --> 00:20:35,000
today we need to map the path was the in

00:20:32,990 --> 00:20:37,540
modules we're finding a similar

00:20:35,000 --> 00:20:40,640
functionality as the browser supports

00:20:37,540 --> 00:20:43,130
proposal yarn over here you raise your

00:20:40,640 --> 00:20:45,020
hand really quickly Johanna has come up

00:20:43,130 --> 00:20:47,900
with a lot of those ideas package I for

00:20:45,020 --> 00:20:50,480
tonight I think is really really cool is

00:20:47,900 --> 00:20:52,220
the idea and main ending that you have

00:20:50,480 --> 00:20:55,490
made like an exports field and in the

00:20:52,220 --> 00:21:01,570
exports field here you can say like you

00:20:55,490 --> 00:21:04,790
know like deep import and specify a file

00:21:01,570 --> 00:21:13,040
that I'm gas and now you'll be able to

00:21:04,790 --> 00:21:15,290
let import like this without any file

00:21:13,040 --> 00:21:17,870
extensions and you can specify the

00:21:15,290 --> 00:21:19,970
specific deep imports party idea we have

00:21:17,870 --> 00:21:22,070
here that I'm pretty excited about would

00:21:19,970 --> 00:21:24,380
be actually locking down and not

00:21:22,070 --> 00:21:26,390
allowing just deep traversal inside of

00:21:24,380 --> 00:21:29,480
it it's possible that you could just do

00:21:26,390 --> 00:21:31,070
something like this the semantics are

00:21:29,480 --> 00:21:34,430
still up in the air that would allow it

00:21:31,070 --> 00:21:36,610
kind of infinite deep searching but the

00:21:34,430 --> 00:21:39,490
plan would be twofold one to

00:21:36,610 --> 00:21:41,769
kind of make more of public and private

00:21:39,490 --> 00:21:43,630
to kind of definition for modules to be

00:21:41,769 --> 00:21:46,630
really clear about what interface you're

00:21:43,630 --> 00:21:48,279
exposing to users as a module author

00:21:46,630 --> 00:21:49,929
myself I've definitely been surprised

00:21:48,279 --> 00:21:52,570
when they find out like that people are

00:21:49,929 --> 00:21:54,640
going in and like randomly importing or

00:21:52,570 --> 00:21:58,269
requiring a specific utility function

00:21:54,640 --> 00:22:00,399
that I did not design as a public facing

00:21:58,269 --> 00:22:02,169
API and now you're supporting Aang's

00:22:00,399 --> 00:22:04,360
bring that you're bringing people who

00:22:02,169 --> 00:22:06,730
are depending on you air water maps

00:22:04,360 --> 00:22:08,289
would make it far easier to define that

00:22:06,730 --> 00:22:11,950
interface the only thing that would be

00:22:08,289 --> 00:22:15,010
really cool import maps is a browser or

00:22:11,950 --> 00:22:16,440
respect that's I think in an origin

00:22:15,010 --> 00:22:18,909
trial right now but I could be mistaken

00:22:16,440 --> 00:22:21,429
but import maps are what are going to

00:22:18,909 --> 00:22:24,850
allow this kind of like their imports to

00:22:21,429 --> 00:22:28,500
exist in the browser until I turn that

00:22:24,850 --> 00:22:36,100
module into like know about the modules

00:22:28,500 --> 00:22:37,779
slash modules to entry point the same

00:22:36,100 --> 00:22:39,399
thing that we have a package.json a name

00:22:37,779 --> 00:22:41,260
import maps are going to be like a

00:22:39,399 --> 00:22:46,149
static file that's at the top level of

00:22:41,260 --> 00:22:49,840
your application it's loaded I believe

00:22:46,149 --> 00:22:52,419
as like a source tag or something I have

00:22:49,840 --> 00:22:56,470
to relook at the spec but when we really

00:22:52,419 --> 00:22:58,240
move with this exports is a tool it

00:22:56,470 --> 00:23:01,240
statically crawling while installing

00:22:58,240 --> 00:23:03,220
your module graph like actually specify

00:23:01,240 --> 00:23:05,470
all of those deep imports so we're

00:23:03,220 --> 00:23:08,769
talking about browser equivalents if you

00:23:05,470 --> 00:23:10,570
are being explicit about this tools

00:23:08,769 --> 00:23:12,429
would then be able to stack we generate

00:23:10,570 --> 00:23:16,000
all of this be able to have the exact

00:23:12,429 --> 00:23:19,720
same import interface for both the

00:23:16,000 --> 00:23:22,659
browser engine so this is a proposal

00:23:19,720 --> 00:23:26,919
that I think I bet might also be in the

00:23:22,659 --> 00:23:28,539
room dire you rock over there I think

00:23:26,919 --> 00:23:30,880
guy has an implementation of this

00:23:28,539 --> 00:23:34,000
somewhere but it's something that we

00:23:30,880 --> 00:23:36,549
definitely want swarthy back on we also

00:23:34,000 --> 00:23:38,409
are interested in having this be part of

00:23:36,549 --> 00:23:41,740
common case as well so we need to figure

00:23:38,409 --> 00:23:44,649
out hey people would use or there's a

00:23:41,740 --> 00:23:46,809
real break lera that's something I would

00:23:44,649 --> 00:23:49,330
love to bring into the audience as

00:23:46,809 --> 00:23:51,399
something that we can talk about

00:23:49,330 --> 00:23:52,989
there's a proposal that's still being

00:23:51,399 --> 00:23:54,820
debated whether or not we want to do it

00:23:52,989 --> 00:23:56,739
which is like having some sort of

00:23:54,820 --> 00:23:59,980
reference inside of the package to

00:23:56,739 --> 00:24:02,830
reference itself so you can import I

00:23:59,980 --> 00:24:04,600
mean here's some like really not used to

00:24:02,830 --> 00:24:07,149
tax I don't think that this would be it

00:24:04,600 --> 00:24:14,799
but if we have it in spaces and known we

00:24:07,149 --> 00:24:18,820
can have like something like so or this

00:24:14,799 --> 00:24:23,859
or me or like some sort of specifier

00:24:18,820 --> 00:24:25,659
there that means your own module because

00:24:23,859 --> 00:24:27,489
there's a lot of places where you've

00:24:25,659 --> 00:24:30,009
made work from your own modules then you

00:24:27,489 --> 00:24:32,049
have like feet paths and got docks and

00:24:30,009 --> 00:24:33,820
whatnot and it's not great it's like a

00:24:32,049 --> 00:24:35,889
bit of a refactoring hazard potentially

00:24:33,820 --> 00:24:38,830
so that's one thing that we're exploring

00:24:35,889 --> 00:24:41,440
this is another one that came up as a

00:24:38,830 --> 00:24:44,049
potential inconsistency how much ASM and

00:24:41,440 --> 00:24:46,299
that's a debate within the modules group

00:24:44,049 --> 00:24:50,289
as well like should we be introducing

00:24:46,299 --> 00:24:51,909
new features like this to ESM if we're

00:24:50,289 --> 00:24:53,769
not able to have the same capabilities

00:24:51,909 --> 00:24:55,859
and coverages with implementing

00:24:53,769 --> 00:24:58,840
something like this in common yes

00:24:55,859 --> 00:25:00,789
ringing I think I don't know hundred

00:24:58,840 --> 00:25:03,249
percent as we explore the in spaces as a

00:25:00,789 --> 00:25:05,259
possible thing that opens up the design

00:25:03,249 --> 00:25:06,700
space but doing it right now without in

00:25:05,259 --> 00:25:07,239
spaces I don't think would be possible

00:25:06,700 --> 00:25:11,789
with it

00:25:07,239 --> 00:25:16,649
major but love to hear anything goes bad

00:25:11,789 --> 00:25:16,649
limited module type declaration

00:25:18,460 --> 00:25:23,919
I'm not sure that what is that's oh

00:25:20,999 --> 00:25:26,019
that's the utility method for

00:25:23,919 --> 00:25:28,299
determining the type of a module there's

00:25:26,019 --> 00:25:30,460
an upstream PR for this right now so if

00:25:28,299 --> 00:25:32,710
you have feelings you can jump into this

00:25:30,460 --> 00:25:34,269
this is like util methods that you can

00:25:32,710 --> 00:25:37,480
run on source text and it can tell you

00:25:34,269 --> 00:25:39,309
as an SES M I think if there's yeah it's

00:25:37,480 --> 00:25:42,070
like contain module syntax is correct

00:25:39,309 --> 00:25:43,360
API it kind of looks like this I think

00:25:42,070 --> 00:25:45,340
there's some debates about whether or

00:25:43,360 --> 00:25:48,220
not this is the best API what they P I

00:25:45,340 --> 00:25:49,450
should look like that's part of phase

00:25:48,220 --> 00:25:51,850
three

00:25:49,450 --> 00:25:53,409
another one is provide a way to make SM

00:25:51,850 --> 00:25:55,450
the default in nodes that are common

00:25:53,409 --> 00:25:57,789
gasps so how do we move into that just

00:25:55,450 --> 00:26:01,509
like using the dead binary it's XE SM

00:25:57,789 --> 00:26:03,220
instead of common dual-mode modules is a

00:26:01,509 --> 00:26:05,799
really contentious topic right now so

00:26:03,220 --> 00:26:08,139
the ability of a module that you can

00:26:05,799 --> 00:26:10,269
import that could be either colleges or

00:26:08,139 --> 00:26:12,940
TSM so you can both require it and

00:26:10,269 --> 00:26:14,889
import it with the same specifier so

00:26:12,940 --> 00:26:16,840
like this is important for multiple

00:26:14,889 --> 00:26:18,749
authors if you are about to author and

00:26:16,840 --> 00:26:24,940
you want people to be able to like

00:26:18,749 --> 00:26:26,769
import low - and require low - and just

00:26:24,940 --> 00:26:29,379
kind of have that work that's what we

00:26:26,769 --> 00:26:31,990
would call dual mode I have some of my

00:26:29,379 --> 00:26:33,879
own opinions I don't exist but I want to

00:26:31,990 --> 00:26:35,529
get to it I don't want to poison you

00:26:33,879 --> 00:26:38,080
with my guidance too early in this

00:26:35,529 --> 00:26:41,619
discussion but that's something that we

00:26:38,080 --> 00:26:44,860
are actively evading how should this

00:26:41,619 --> 00:26:46,480
work should it even work the current

00:26:44,860 --> 00:26:49,360
implementation that we have and only the

00:26:46,480 --> 00:26:52,149
single entry point name that Sheriff KSM

00:26:49,360 --> 00:26:54,129
and with the file extension turned off

00:26:52,149 --> 00:26:56,019
it's actually possible anymore

00:26:54,129 --> 00:26:57,820
I think that's a feature people disagree

00:26:56,019 --> 00:26:59,799
so that's something that we're debating

00:26:57,820 --> 00:27:01,990
and we also need to finalize the

00:26:59,799 --> 00:27:04,659
behavior of an important comment yes so

00:27:01,990 --> 00:27:06,549
we want to be in work on anjaneyasana

00:27:04,659 --> 00:27:08,740
and have named exports but right now we

00:27:06,549 --> 00:27:10,629
can only do it default export that has

00:27:08,740 --> 00:27:15,490
something to do with the specification

00:27:10,629 --> 00:27:17,169
and client you can't have this is not

00:27:15,490 --> 00:27:19,539
possible we can dig into that more

00:27:17,169 --> 00:27:21,039
afterwards we're trying to go to a taste

00:27:19,539 --> 00:27:22,629
Ethernet a couple times with different

00:27:21,039 --> 00:27:25,149
approaches to how we can allow for

00:27:22,629 --> 00:27:27,970
dynamic modules where let me do exports

00:27:25,149 --> 00:27:31,020
the names of things and resolves those

00:27:27,970 --> 00:27:33,390
later but we've been unable to do that

00:27:31,020 --> 00:27:35,910
way back ingame census of the committee

00:27:33,390 --> 00:27:37,350
so there was debate about whether or not

00:27:35,910 --> 00:27:39,060
we usually even should have that

00:27:37,350 --> 00:27:41,670
transparent interoffice it's default

00:27:39,060 --> 00:27:44,280
only because you still even need to know

00:27:41,670 --> 00:27:46,860
that it's a common GSM module anyways

00:27:44,280 --> 00:27:48,810
that's a debate one of the things that

00:27:46,860 --> 00:27:52,080
done is done the only thing that we

00:27:48,810 --> 00:27:54,930
actually finished right now is we need a

00:27:52,080 --> 00:28:01,980
better mechanism for a wire with wire so

00:27:54,930 --> 00:28:07,050
you can narrow do import read require

00:28:01,980 --> 00:28:12,720
from module and then create require

00:28:07,050 --> 00:28:14,760
import meta URL I mean that literally

00:28:12,720 --> 00:28:18,920
gives you a require inside of the module

00:28:14,760 --> 00:28:22,440
that you could use this little den of

00:28:18,920 --> 00:28:25,590
ritual is not the best user experience

00:28:22,440 --> 00:28:27,720
but we haven't come up with a better way

00:28:25,590 --> 00:28:29,190
to do it having something available

00:28:27,720 --> 00:28:31,380
immediately on the import matter

00:28:29,190 --> 00:28:32,940
requires something that we discussed and

00:28:31,380 --> 00:28:34,820
the promise that it doesn't fail early

00:28:32,940 --> 00:28:37,530
and that doesn't exist so if you take

00:28:34,820 --> 00:28:40,410
something that is important to rewire

00:28:37,530 --> 00:28:42,120
and you bundle it into a browser module

00:28:40,410 --> 00:28:44,220
and then they're using require

00:28:42,120 --> 00:28:46,770
dynamically somewhere keeping of

00:28:44,220 --> 00:28:48,930
statement that's gonna blow up and

00:28:46,770 --> 00:28:50,070
really weird in unexpected ways which is

00:28:48,930 --> 00:28:51,900
one of the reasons why we didn't wanna

00:28:50,070 --> 00:28:53,850
introduce that API although that API

00:28:51,900 --> 00:28:57,360
would be like a million times better

00:28:53,850 --> 00:28:59,880
user experience standpoint and that kind

00:28:57,360 --> 00:29:01,710
of sums things up and I think that that

00:28:59,880 --> 00:29:03,390
last example I talked about is the

00:29:01,710 --> 00:29:05,130
perfect example of the struggles that

00:29:03,390 --> 00:29:07,320
we've had this whole time we're just

00:29:05,130 --> 00:29:10,140
finding the balance between like Flint

00:29:07,320 --> 00:29:13,770
guns Sal bill and user experience I

00:29:10,140 --> 00:29:15,840
guess with that thank you for letting me

00:29:13,770 --> 00:29:17,610
talk at you for like 30 minutes and I

00:29:15,840 --> 00:29:20,090
open it to the floor for questions and

00:29:17,610 --> 00:29:20,090
discussion

00:29:24,820 --> 00:29:31,100
and guess what I will ask but has there

00:29:29,600 --> 00:29:36,860
been any could you talk a little bit

00:29:31,100 --> 00:29:40,850
about how we as a cameras can look into

00:29:36,860 --> 00:29:42,920
the import features to get notified when

00:29:40,850 --> 00:29:46,130
things are imported and possibly modify

00:29:42,920 --> 00:29:49,309
things on the fly yes so that would be

00:29:46,130 --> 00:29:57,770
the loaders that I was talking about

00:29:49,309 --> 00:30:00,320
earlier so right now okay we do here

00:29:57,770 --> 00:30:02,690
this is - it's like the best thing ever

00:30:00,320 --> 00:30:04,400
if you haven't had it installed on your

00:30:02,690 --> 00:30:06,049
computer you should do it there are open

00:30:04,400 --> 00:30:08,600
source versions available for Linux and

00:30:06,049 --> 00:30:11,150
Windows as well that is just an offline

00:30:08,600 --> 00:30:13,220
document for your a really great fuzzy

00:30:11,150 --> 00:30:15,620
search so this is the experimental motor

00:30:13,220 --> 00:30:18,020
hooks that it exists right now and so

00:30:15,620 --> 00:30:20,690
you can make a result right now legit

00:30:18,020 --> 00:30:22,309
changes let's resolve the - your

00:30:20,690 --> 00:30:23,690
appointment doesn't really change it if

00:30:22,309 --> 00:30:25,910
we think about module loading there's a

00:30:23,690 --> 00:30:31,120
couple different phases so there's kind

00:30:25,910 --> 00:30:35,450
of like fetch resolve and transform and

00:30:31,120 --> 00:30:38,000
so like it's in this order so like

00:30:35,450 --> 00:30:39,799
resolve is what takes like a specifier

00:30:38,000 --> 00:30:44,360
and turns it into a path so that's what

00:30:39,799 --> 00:30:46,790
would turn like lodash into the modules

00:30:44,360 --> 00:30:49,910
it would be like a file like in the

00:30:46,790 --> 00:30:53,660
whole path to to node modules fetches

00:30:49,910 --> 00:30:58,450
one thing then take a path and turn it

00:30:53,660 --> 00:31:01,100
into like the actual source text and

00:30:58,450 --> 00:31:03,320
it's a little more complicated this is

00:31:01,100 --> 00:31:05,600
all happening with like source text

00:31:03,320 --> 00:31:06,919
module records like under the minute

00:31:05,600 --> 00:31:09,169
this is kind of the high level and then

00:31:06,919 --> 00:31:12,290
the transform is looking you know like

00:31:09,169 --> 00:31:15,260
take that source text and then turn that

00:31:12,290 --> 00:31:19,520
into like the actual object that is then

00:31:15,260 --> 00:31:21,200
inside of instead of in half so each of

00:31:19,520 --> 00:31:24,400
these phases are kind of like different

00:31:21,200 --> 00:31:29,390
phases that you may want to look into so

00:31:24,400 --> 00:31:32,450
you know this is specifier example with

00:31:29,390 --> 00:31:35,130
just a hook there you can implement the

00:31:32,450 --> 00:31:37,100
file extension resolution operator

00:31:35,130 --> 00:31:40,380
to look into any of these other things

00:31:37,100 --> 00:31:42,300
for fetching the source text that's how

00:31:40,380 --> 00:31:44,220
as an APM vendor for example you could

00:31:42,300 --> 00:31:47,130
set your own custom implementation of

00:31:44,220 --> 00:31:50,160
the FS instead of our implementation of

00:31:47,130 --> 00:31:51,870
that mass per transform source text you

00:31:50,160 --> 00:31:53,070
know combined with a result specifier

00:31:51,870 --> 00:31:55,200
that's how we could implement like

00:31:53,070 --> 00:31:57,450
built-in text message board by like

00:31:55,200 --> 00:32:03,710
transforming that source text before

00:31:57,450 --> 00:32:03,710
actually executing so the newer young

00:32:22,670 --> 00:32:29,610
create because it would be a name export

00:32:26,850 --> 00:32:32,370
on a core module and most like they

00:32:29,610 --> 00:32:34,530
would not be able to modify the core

00:32:32,370 --> 00:32:38,780
module saw stacks over they also be do

00:32:34,530 --> 00:32:41,430
that if you think the guy may have more

00:32:38,780 --> 00:32:44,160
incentive to the loaders right now but I

00:32:41,430 --> 00:32:46,650
may be wrong I believe them we would

00:32:44,160 --> 00:32:49,410
allow for intercepting of any modules

00:32:46,650 --> 00:32:52,260
that are being fetched sure so if it's a

00:32:49,410 --> 00:32:54,180
core module like HTTP what we've done

00:32:52,260 --> 00:32:57,120
right now and supporting named export

00:32:54,180 --> 00:33:00,600
some core modules is we've set those up

00:32:57,120 --> 00:33:03,090
as light bindings so if you if you have

00:33:00,600 --> 00:33:05,880
the common J's version of HTTP and you

00:33:03,090 --> 00:33:07,740
have a right for a server that's gonna

00:33:05,880 --> 00:33:10,980
update an ABS module I finding a small

00:33:07,740 --> 00:33:13,350
piece is pricey so we've got that one

00:33:10,980 --> 00:33:15,540
core but for third-party modules yes

00:33:13,350 --> 00:33:17,160
p.m. on the name banks well it's tricky

00:33:15,540 --> 00:33:19,470
because you actually need to inject into

00:33:17,160 --> 00:33:21,060
that source code and update those those

00:33:19,470 --> 00:33:23,370
module light bindings with all the

00:33:21,060 --> 00:33:25,710
exports like if you explore today for

00:33:23,370 --> 00:33:28,080
export function you know she wants to be

00:33:25,710 --> 00:33:29,820
updating that export and you can only do

00:33:28,080 --> 00:33:31,170
that from within the module you canto

00:33:29,820 --> 00:33:33,980
from outside of the module so that I

00:33:31,170 --> 00:33:33,980
will get a PM

00:33:38,670 --> 00:33:43,450
one thing that I've been thinking about

00:33:40,990 --> 00:33:45,550
this is by no means even close to

00:33:43,450 --> 00:33:46,990
solution we were playing around I

00:33:45,550 --> 00:33:49,960
actually didn't mention this in heroes

00:33:46,990 --> 00:33:51,430
webassembly modules so we shipped an

00:33:49,960 --> 00:33:54,610
experimental web assembly module

00:33:51,430 --> 00:33:57,970
implementation last week or two weeks

00:33:54,610 --> 00:33:59,350
ago but it landed it and I started

00:33:57,970 --> 00:34:01,300
playing with building stuff that it

00:33:59,350 --> 00:34:03,940
scripted one of the first things that I

00:34:01,300 --> 00:34:06,670
noticed was like when we build it out

00:34:03,940 --> 00:34:09,100
and we did the test for them we didn't

00:34:06,670 --> 00:34:14,610
actually like compile episode early with

00:34:09,100 --> 00:34:19,030
a description we took what's known as W

00:34:14,610 --> 00:34:23,320
avian what is it there's an intermediate

00:34:19,030 --> 00:34:26,620
representation of the ast so West and we

00:34:23,320 --> 00:34:29,130
me directly compiled last tourism so

00:34:26,620 --> 00:34:31,450
that it was like a pretty pretty clean

00:34:29,130 --> 00:34:33,010
translation and all of our tests and

00:34:31,450 --> 00:34:36,490
everything that we've implemented works

00:34:33,010 --> 00:34:39,460
with West hasn't but almost no one is

00:34:36,490 --> 00:34:40,990
like writing last bike and those people

00:34:39,460 --> 00:34:43,000
are taking like C code and then

00:34:40,990 --> 00:34:44,620
compiling back to web assembly if you

00:34:43,000 --> 00:34:47,770
use in scripting and scripting is

00:34:44,620 --> 00:34:49,540
embedding its own system and that

00:34:47,770 --> 00:34:51,490
includes like a whole implementation of

00:34:49,540 --> 00:34:53,380
just things like how do we convert

00:34:51,490 --> 00:34:54,640
printf or any is one of the system calls

00:34:53,380 --> 00:34:57,100
that exists into things that are

00:34:54,640 --> 00:34:58,780
actually in scripting does that right

00:34:57,100 --> 00:35:00,460
now I actually like wrapping all the

00:34:58,780 --> 00:35:02,680
code and with thousands of lines of

00:35:00,460 --> 00:35:04,840
JavaScript it's expecting to execute and

00:35:02,680 --> 00:35:07,290
have available and then it's expecting

00:35:04,840 --> 00:35:10,210
there to be like this source off parent

00:35:07,290 --> 00:35:13,930
that's available that just has specific

00:35:10,210 --> 00:35:17,470
things implemented in it there's no way

00:35:13,930 --> 00:35:20,290
for us today - like inject on a per

00:35:17,470 --> 00:35:22,900
module scope like things to say hey if

00:35:20,290 --> 00:35:26,020
you try to import source in only this

00:35:22,900 --> 00:35:27,580
module it will resolve to this thing now

00:35:26,020 --> 00:35:29,950
this is actually a thing that the import

00:35:27,580 --> 00:35:31,390
maps are are introducing so that's

00:35:29,950 --> 00:35:34,750
something that we could think about

00:35:31,390 --> 00:35:37,840
exploring but one of the things that may

00:35:34,750 --> 00:35:40,770
help with a PMS but I'm not 100% when we

00:35:37,840 --> 00:35:43,450
some sort of support for a kind of like

00:35:40,770 --> 00:35:46,390
injecting or changing the scope what

00:35:43,450 --> 00:35:47,109
happens when you import modules from the

00:35:46,390 --> 00:35:51,549
con

00:35:47,109 --> 00:35:54,999
step one module so we try to from inside

00:35:51,549 --> 00:35:57,640
of a web assembly module import

00:35:54,999 --> 00:36:00,640
something called source and it doesn't

00:35:57,640 --> 00:36:02,799
exist anywhere else can we inject like a

00:36:00,640 --> 00:36:04,450
particular thing for that in space I

00:36:02,799 --> 00:36:05,739
don't know if this is possible and I

00:36:04,450 --> 00:36:08,259
don't know if there's a way for us to do

00:36:05,739 --> 00:36:10,390
that with spectrum plants but because of

00:36:08,259 --> 00:36:12,459
like this edge case that I've seen with

00:36:10,390 --> 00:36:14,739
web assembly is something that I'm

00:36:12,459 --> 00:36:16,779
thinking about and that would be kind of

00:36:14,739 --> 00:36:18,759
similar I guess in a way to proxy wire

00:36:16,779 --> 00:36:20,770
but not exactly it would be a bit of a

00:36:18,759 --> 00:36:23,589
different

00:36:20,770 --> 00:36:27,180
do we have anybody in the modules right

00:36:23,589 --> 00:36:29,440
now representing APM

00:36:27,180 --> 00:36:32,080
there are people who are definitely

00:36:29,440 --> 00:36:34,420
thinking of those use cases as I had

00:36:32,080 --> 00:36:36,760
mentioned with the loaders we need more

00:36:34,420 --> 00:36:40,230
people who are kind of working on it I

00:36:36,760 --> 00:36:43,690
believe that we had initially wanted

00:36:40,230 --> 00:36:45,910
that to be kind of blocking things who

00:36:43,690 --> 00:36:48,040
are living the flag but I was gonna get

00:36:45,910 --> 00:36:49,750
closer to late October and as the rest

00:36:48,040 --> 00:36:51,849
of the implementation gets more stable

00:36:49,750 --> 00:36:53,650
we are actually getting closer to making

00:36:51,849 --> 00:36:56,170
a decision to just keep loaders behind

00:36:53,650 --> 00:36:58,060
an additional flag and potentially even

00:36:56,170 --> 00:36:59,830
flag without these capabilities and I

00:36:58,060 --> 00:37:02,080
understand where that would be really

00:36:59,830 --> 00:37:05,230
detrimental to a POS so we should likely

00:37:02,080 --> 00:37:22,359
sink on that and see about the right

00:37:05,230 --> 00:37:24,130
people and we in addition to actually

00:37:22,359 --> 00:37:26,020
doing all the great implementation we be

00:37:24,130 --> 00:37:27,760
publishing any kind of recommendation

00:37:26,020 --> 00:37:31,150
and sort of documentation for my boxers

00:37:27,760 --> 00:37:38,290
to understand what what they need to do

00:37:31,150 --> 00:37:40,839
in order to support the most things that

00:37:38,290 --> 00:37:44,530
are I guess maybe mutually exclusive you

00:37:40,839 --> 00:37:45,940
can't support yeah so sort of question

00:37:44,530 --> 00:37:48,839
to repeat for the people on the stream

00:37:45,940 --> 00:37:51,460
is how are we gonna do things to make

00:37:48,839 --> 00:37:56,740
urban our core module authors to support

00:37:51,460 --> 00:37:58,270
multiple versions of know them so that

00:37:56,740 --> 00:38:01,740
is like kind of was actively being

00:37:58,270 --> 00:38:04,180
debated with two little modules and so

00:38:01,740 --> 00:38:08,380
dual mode modules would be something

00:38:04,180 --> 00:38:10,359
like if we had like what I was just a

00:38:08,380 --> 00:38:16,869
really nice solution with me having a

00:38:10,359 --> 00:38:26,530
module field like this and then having a

00:38:16,869 --> 00:38:28,830
separate into the problem space for

00:38:26,530 --> 00:38:28,830
things like

00:38:35,640 --> 00:38:42,369
one of the things that my writer is that

00:38:39,490 --> 00:38:46,119
this does not mean the same thing you

00:38:42,369 --> 00:38:48,580
know that it means to babble it it means

00:38:46,119 --> 00:38:56,560
multiple entry points but generally when

00:38:48,580 --> 00:39:00,190
you're not multiple entry points so this

00:38:56,560 --> 00:39:01,750
is a huge hazard my personal opinion for

00:39:00,190 --> 00:39:03,100
module authors that are running to the

00:39:01,750 --> 00:39:07,359
note because what it would then mean

00:39:03,100 --> 00:39:09,940
would be like the specifier were my

00:39:07,359 --> 00:39:11,500
module would mean two different things

00:39:09,940 --> 00:39:14,310
depending on the loader that you're in

00:39:11,500 --> 00:39:18,820
and would potentially like create like

00:39:14,310 --> 00:39:21,369
weird cache duplication so like the

00:39:18,820 --> 00:39:24,940
common J's cash and the ESM caps are two

00:39:21,369 --> 00:39:26,770
separate caches and so when you import a

00:39:24,940 --> 00:39:31,720
common J's module today with the way

00:39:26,770 --> 00:39:33,700
that it trough works what we do is we we

00:39:31,720 --> 00:39:36,550
get the source text we instantiated we

00:39:33,700 --> 00:39:38,830
create it we create a reference to it in

00:39:36,550 --> 00:39:40,740
the comment AS cash and then we create a

00:39:38,830 --> 00:39:44,820
pointer and reference to it in the ESF

00:39:40,740 --> 00:39:47,980
both of the pointing to the same symbol

00:39:44,820 --> 00:39:51,369
where this inflate really weird would be

00:39:47,980 --> 00:39:53,710
like the comedy has cash has no

00:39:51,369 --> 00:39:55,330
reference to it gives own cash so if

00:39:53,710 --> 00:39:58,300
you're in a modulo graphic that started

00:39:55,330 --> 00:40:00,430
as ESM and you imported a module you

00:39:58,300 --> 00:40:02,530
would instantiate this source text you

00:40:00,430 --> 00:40:04,720
can create that record inside of the ESM

00:40:02,530 --> 00:40:07,119
patch and then if later on down in your

00:40:04,720 --> 00:40:09,550
tree someone required the exact same

00:40:07,119 --> 00:40:12,040
module in the exact same like general

00:40:09,550 --> 00:40:13,540
module context so obnoxiously people are

00:40:12,040 --> 00:40:15,580
it's a different thing it would actually

00:40:13,540 --> 00:40:17,560
create a new instance inside of a

00:40:15,580 --> 00:40:21,340
require patch with a completely

00:40:17,560 --> 00:40:24,400
different singleton and in many cases

00:40:21,340 --> 00:40:26,200
this may just kind of work but having

00:40:24,400 --> 00:40:28,119
worked on things that are expecting

00:40:26,200 --> 00:40:32,650
behavior in that single dinner strip

00:40:28,119 --> 00:40:35,770
state between your app that just creates

00:40:32,650 --> 00:40:36,670
these like really really weird he's

00:40:35,770 --> 00:40:39,580
really weird

00:40:36,670 --> 00:40:42,130
hard to track down an art to even know

00:40:39,580 --> 00:40:43,930
what's going on problems in the tree

00:40:42,130 --> 00:40:46,630
that sometimes don't

00:40:43,930 --> 00:40:48,400
manifest until production and sometimes

00:40:46,630 --> 00:40:51,940
without even totally you know two weeks

00:40:48,400 --> 00:40:56,110
and correction so so I mean it obviously

00:40:51,940 --> 00:40:58,360
sounds kind of tricky do you think that

00:40:56,110 --> 00:41:00,790
the the real recommendation would be for

00:40:58,360 --> 00:41:05,080
module authors to sort of cut over to

00:41:00,790 --> 00:41:09,370
the SM at some point and you know going

00:41:05,080 --> 00:41:11,650
forward on say no 12 or whatever yes and

00:41:09,370 --> 00:41:14,830
modules but prior to that it's all gjs

00:41:11,650 --> 00:41:16,810
or how that work so we're still debating

00:41:14,830 --> 00:41:19,240
them and if you have opinions and

00:41:16,810 --> 00:41:20,650
interests on that like one of the things

00:41:19,240 --> 00:41:21,790
I've been challenging people to think

00:41:20,650 --> 00:41:23,770
about is like come up with the user

00:41:21,790 --> 00:41:26,260
Church come up with the user journey of

00:41:23,770 --> 00:41:28,300
look I am a module author who he's - who

00:41:26,260 --> 00:41:30,670
wants to upgrade my module to BES now

00:41:28,300 --> 00:41:31,960
and once that transition happens so I'll

00:41:30,670 --> 00:41:34,810
show you an example of one that I've

00:41:31,960 --> 00:41:37,750
created I'm a module this module called

00:41:34,810 --> 00:41:38,890
no Thomas C no Noah C is a library for

00:41:37,750 --> 00:41:40,930
doing the open sound control

00:41:38,890 --> 00:41:43,840
primarily used by like artists and

00:41:40,930 --> 00:41:46,150
musicians so not people who necessarily

00:41:43,840 --> 00:41:48,030
have a really deep understanding of our

00:41:46,150 --> 00:41:51,970
ecosystem and all the subtleties that

00:41:48,030 --> 00:41:54,550
evidence here's an example of known of

00:41:51,970 --> 00:41:56,290
new experimental ESM implementation

00:41:54,550 --> 00:42:00,100
where and all I'm known as I've created

00:41:56,290 --> 00:42:02,350
a deep entry point I am gasps this can

00:42:00,100 --> 00:42:05,440
land an assembler minor you can see them

00:42:02,350 --> 00:42:08,710
all the es mas is doing is actually just

00:42:05,440 --> 00:42:11,080
importing all the common tests things

00:42:08,710 --> 00:42:14,290
and then exporting them as an equal but

00:42:11,080 --> 00:42:17,980
also exporting them as named exports so

00:42:14,290 --> 00:42:20,230
this creates any SM like interface into

00:42:17,980 --> 00:42:23,110
the common J's that will work will have

00:42:20,230 --> 00:42:24,670
named exports if we have that export

00:42:23,110 --> 00:42:27,910
that proposal that I'm talking about we

00:42:24,670 --> 00:42:30,070
be able to drop the dot ljs right then

00:42:27,910 --> 00:42:33,000
what I have is this branch called next

00:42:30,070 --> 00:42:36,060
where I'm in the process of slowly

00:42:33,000 --> 00:42:38,440
converting everything over to the SMTP

00:42:36,060 --> 00:42:40,690
it hasn't happened yet the idea would be

00:42:38,440 --> 00:42:44,230
that we would have legacy CJ s support

00:42:40,690 --> 00:42:46,840
and nodejs left CJ s and an assembler

00:42:44,230 --> 00:42:49,480
minor on the prior semi major you could

00:42:46,840 --> 00:42:51,970
still introduce that slash CJ s entry

00:42:49,480 --> 00:42:53,800
point as the same as the main and so

00:42:51,970 --> 00:42:57,250
this isn't perfect it's definitely not

00:42:53,800 --> 00:42:59,349
as economic as just having a shared name

00:42:57,250 --> 00:43:01,359
but I actually think that this is pretty

00:42:59,349 --> 00:43:04,119
reasonable it creates like explicit

00:43:01,359 --> 00:43:06,970
entry points if you're supporting it /

00:43:04,119 --> 00:43:09,160
PJs and / PSM could always work as

00:43:06,970 --> 00:43:11,710
explicit entry points and you can

00:43:09,160 --> 00:43:13,180
basically flip which one is the default

00:43:11,710 --> 00:43:16,119
in a separator

00:43:13,180 --> 00:43:17,020
this is we've documented this recently

00:43:16,119 --> 00:43:22,480
in a pull request

00:43:17,020 --> 00:43:27,670
I think Jeff over in the chat has

00:43:22,480 --> 00:43:29,859
pointed to it right here and this is

00:43:27,670 --> 00:43:31,630
like our current recommendation and that

00:43:29,859 --> 00:43:34,660
kind of documents the pattern that I was

00:43:31,630 --> 00:43:36,940
just talking about we're open to other

00:43:34,660 --> 00:43:37,990
patterns and other user journeys so you

00:43:36,940 --> 00:43:40,660
know the more people who have looked

00:43:37,990 --> 00:43:42,580
right power on this problem and think

00:43:40,660 --> 00:43:44,380
through it we're going to kind of talk

00:43:42,580 --> 00:43:46,420
through it and try to figure it out I

00:43:44,380 --> 00:43:47,650
recognize that this is one of the

00:43:46,420 --> 00:43:50,530
biggest problems that will have a

00:43:47,650 --> 00:43:52,119
speaker system and we get pretty fired

00:43:50,530 --> 00:43:55,390
up in our meetings when we talk to

00:43:52,119 --> 00:43:56,980
people - um they should be because we

00:43:55,390 --> 00:43:59,109
know that it's extremely important for

00:43:56,980 --> 00:44:00,880
the adoption of ESF but also be you

00:43:59,109 --> 00:44:04,150
really haven't worked for module authors

00:44:00,880 --> 00:44:05,500
we're gonna have to do this to continue

00:44:04,150 --> 00:44:07,530
to support all of the different people

00:44:05,500 --> 00:44:14,710
who are they use the box

00:44:07,530 --> 00:44:16,720
I think joining and to the people who

00:44:14,710 --> 00:44:19,420
are dialing in on the stream I'm no

00:44:16,720 --> 00:44:20,859
bigger comments on this degree we're

00:44:19,420 --> 00:44:25,500
sorry we don't have you connected to the

00:44:20,859 --> 00:44:25,500
money but if you have questions as well

00:44:41,880 --> 00:44:46,359
that's a really good question to be

00:44:44,170 --> 00:44:48,369
honest we haven't discussed the

00:44:46,359 --> 00:44:50,380
possibility of her living the flat still

00:44:48,369 --> 00:44:51,790
keeping an experimental I know that

00:44:50,380 --> 00:44:55,180
we've done that for some other

00:44:51,790 --> 00:44:57,820
implementations I think like Mike bet on

00:44:55,180 --> 00:44:59,740
it is that like people want VSM so badly

00:44:57,820 --> 00:45:02,290
at the moment that we've looked within

00:44:59,740 --> 00:45:05,680
the flag a lot of people are going to

00:45:02,290 --> 00:45:07,420
just start adopting it so I don't know

00:45:05,680 --> 00:45:09,460
it might be good to even keep an

00:45:07,420 --> 00:45:10,720
experimental like remove the flag before

00:45:09,460 --> 00:45:12,730
LTS and maybe

00:45:10,720 --> 00:45:15,609
the experimental flag with a simper

00:45:12,730 --> 00:45:17,200
minor remove the experimental status at

00:45:15,609 --> 00:45:20,349
some point I think the change is that

00:45:17,200 --> 00:45:22,599
what we did with it should be to remove

00:45:20,349 --> 00:45:25,810
the flag with an upgrade of later so

00:45:22,599 --> 00:45:27,490
that's definitely an option that we

00:45:25,810 --> 00:45:28,930
haven't really discussed another thing

00:45:27,490 --> 00:45:32,170
that we definitely want to try to do is

00:45:28,930 --> 00:45:34,210
back work to ten possible but we're kind

00:45:32,170 --> 00:45:37,030
of we're waiting to see where things

00:45:34,210 --> 00:45:39,250
land before we see what we can backward

00:45:37,030 --> 00:45:41,950
to ten it may also just be possible to

00:45:39,250 --> 00:45:43,390
backward to ten like the basic

00:45:41,950 --> 00:45:44,800
capabilities but just a different

00:45:43,390 --> 00:45:47,260
limitation with a lot of the same

00:45:44,800 --> 00:45:49,150
behaviors but we're waiting until we

00:45:47,260 --> 00:45:51,000
remove the flag before you can start

00:45:49,150 --> 00:45:59,470
with that

00:45:51,000 --> 00:46:03,670
thank you Michael Dossett just wondering

00:45:59,470 --> 00:46:06,069
about importing native through that yeah

00:46:03,670 --> 00:46:07,930
so native modules there's kind of two

00:46:06,069 --> 00:46:23,980
different things that are going on and I

00:46:07,930 --> 00:46:26,319
can actually show you some guy what's

00:46:23,980 --> 00:46:33,430
the one where we resolve the specifiers

00:46:26,319 --> 00:46:37,869
it's not translators with any other

00:46:33,430 --> 00:46:39,369
default resolve there we go so this is

00:46:37,869 --> 00:46:41,619
how we're actually doing the file

00:46:39,369 --> 00:46:43,180
extension resolution itself and you can

00:46:41,619 --> 00:46:45,880
see that we have two different format

00:46:43,180 --> 00:46:48,069
Maps so we have come the extension what

00:46:45,880 --> 00:46:50,829
about now in a legacy extension format

00:46:48,069 --> 00:46:53,410
and so basically when you're in the

00:46:50,829 --> 00:46:56,680
legacy bill which is essentially type

00:46:53,410 --> 00:46:59,770
module or you have type legacy inside of

00:46:56,680 --> 00:47:02,560
your package JSON this is what the file

00:46:59,770 --> 00:47:04,329
extensions will resolve to so CJ s and

00:47:02,560 --> 00:47:07,359
dr. hasn't resolved the kanji has

00:47:04,329 --> 00:47:09,000
translator and that's in translators

00:47:07,359 --> 00:47:11,650
gotcha is actually the implementation

00:47:09,000 --> 00:47:13,150
all of those different loaders so

00:47:11,650 --> 00:47:17,200
there's one letter there's the JSON

00:47:13,150 --> 00:47:19,210
loader there's a built in loader this is

00:47:17,200 --> 00:47:20,349
the comma J s loader and that's the name

00:47:19,210 --> 00:47:23,520
loader loader

00:47:20,349 --> 00:47:23,520
actually surprisingly

00:47:23,910 --> 00:47:28,079
but so when you're in the legacy mode

00:47:26,220 --> 00:47:30,000
these are what the extensions back to

00:47:28,079 --> 00:47:35,039
and you'll see dr. Bester coverage is

00:47:30,000 --> 00:47:38,519
when you do mode when you do type module

00:47:35,039 --> 00:47:40,980
we actually don't support anything out

00:47:38,519 --> 00:47:43,289
of the box right now that is not like

00:47:40,980 --> 00:47:46,529
browser equivalent so we don't support

00:47:43,289 --> 00:47:48,779
native modules but that's only within

00:47:46,529 --> 00:47:50,670
the boundary of your own package so the

00:47:48,779 --> 00:47:54,079
important package that's a native module

00:47:50,670 --> 00:47:56,130
it will still resolve and work the only

00:47:54,079 --> 00:47:58,230
limitation is the same limitations

00:47:56,130 --> 00:48:00,450
commonest you want named exports you'll

00:47:58,230 --> 00:48:02,819
only be able to import of the default

00:48:00,450 --> 00:48:04,259
namespace if you want something that

00:48:02,819 --> 00:48:05,940
feels a little bit more like named

00:48:04,259 --> 00:48:07,619
exports you can't use them create

00:48:05,940 --> 00:48:09,869
requirement create a require function

00:48:07,619 --> 00:48:11,910
and then require it and you structure

00:48:09,869 --> 00:48:14,160
the require or you can do structure that

00:48:11,910 --> 00:48:15,779
you fault export it's about the most

00:48:14,160 --> 00:48:18,539
economic but it's the only way that we

00:48:15,779 --> 00:48:23,039
could do it right now expect one of the

00:48:18,539 --> 00:48:25,619
things that we do have though is Lou a

00:48:23,039 --> 00:48:26,039
some stuff I'm confused that I'm not

00:48:25,619 --> 00:48:30,059
seeing

00:48:26,039 --> 00:48:33,269
Doug wiser than attention memo look into

00:48:30,059 --> 00:48:35,700
that afterwards but essentially we are

00:48:33,269 --> 00:48:37,829
we're actively exploring webassembly and

00:48:35,700 --> 00:48:39,690
specifically lousy and I think there's

00:48:37,829 --> 00:48:42,000
some members in this ability that works

00:48:39,690 --> 00:48:45,930
on what assembly in the room we've got

00:48:42,000 --> 00:48:49,769
until back there the LED assembly

00:48:45,930 --> 00:48:52,319
huazi stuff is system interface we're

00:48:49,769 --> 00:48:54,000
actively exploring the web assembly

00:48:52,319 --> 00:48:56,880
system interface as being kind of the

00:48:54,000 --> 00:48:59,519
next generation in our modules as an

00:48:56,880 --> 00:49:01,529
alternative approach and being one that

00:48:59,519 --> 00:49:05,339
like could intentionally have browser

00:49:01,529 --> 00:49:08,730
equivalents but you know these are still

00:49:05,339 --> 00:49:10,440
in the air we couldn't choose to change

00:49:08,730 --> 00:49:12,180
the way that this is supported that I

00:49:10,440 --> 00:49:14,369
think in general like you wouldn't be

00:49:12,180 --> 00:49:17,490
writing a TSM module that's using the

00:49:14,369 --> 00:49:19,470
legacy in a bottle system so as long as

00:49:17,490 --> 00:49:22,200
you have a package.json that doesn't

00:49:19,470 --> 00:49:25,109
have module in it in your module that's

00:49:22,200 --> 00:49:27,269
a NATO module anyone can import it they

00:49:25,109 --> 00:49:30,740
just can't do a named export so there's

00:49:27,269 --> 00:49:30,740
support there that is liberties

00:49:33,940 --> 00:49:39,520
we're 10:31 which i think is great time

00:49:37,260 --> 00:49:41,500
do people want to have any more

00:49:39,520 --> 00:49:43,750
questions or should we call it an exit

00:49:41,500 --> 00:50:09,400
coffee and wear shoes say hi to all our

00:49:43,750 --> 00:50:17,829
friends ok cool here's a you have any

00:50:09,400 --> 00:50:19,599
questions before we just pick three will

00:50:17,829 --> 00:50:21,930
there be modules after the break

00:50:19,599 --> 00:50:25,240
definitely there's a session later on

00:50:21,930 --> 00:50:31,560
modules and security but not like just

00:50:25,240 --> 00:50:31,560

YouTube URL: https://www.youtube.com/watch?v=p2YEJomXBzk


