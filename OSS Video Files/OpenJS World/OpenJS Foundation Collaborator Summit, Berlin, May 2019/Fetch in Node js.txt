Title: Fetch in Node js
Publication date: 2019-06-04
Playlist: OpenJS Foundation Collaborator Summit, Berlin, May 2019
Description: 
	OpenJS Foundation Collaborator Summit, Berlin, 2019

More details: https://github.com/nodejs/summit/issues/165
Captions: 
	00:00:00,060 --> 00:00:07,350
we don't have lights okay we have been

00:00:03,210 --> 00:00:10,230
lazy this is mainly brain down to some

00:00:07,350 --> 00:00:11,940
extent and as well as find people

00:00:10,230 --> 00:00:15,809
willing to put in the use of multiple

00:00:11,940 --> 00:00:19,140
shipping fechino to take so I'm just

00:00:15,809 --> 00:00:49,219
I hope somebody new we get excited and

00:00:19,140 --> 00:00:52,100
so on okay using the browser and it is a

00:00:49,219 --> 00:00:55,969
completely full pardon from watts is

00:00:52,100 --> 00:00:58,890
innards and it has a certain other

00:00:55,969 --> 00:01:01,350
limitation is also spat so there is a

00:00:58,890 --> 00:01:05,270
spec that you need to follow if you want

00:01:01,350 --> 00:01:05,270
to pull it such heat or something

00:01:08,689 --> 00:01:31,020
so I just want to talk about I just do a

00:01:14,340 --> 00:01:40,740
thing maybe we might want people for

00:01:31,020 --> 00:01:50,280
people joining the movie okay so there

00:01:40,740 --> 00:01:53,189
are a bunch of things about problems of

00:01:50,280 --> 00:01:55,250
fetch of bringing fetching earth and

00:01:53,189 --> 00:02:00,149
problems at the current HTTP client as

00:01:55,250 --> 00:02:04,469
in note so there are two levels of to

00:02:00,149 --> 00:02:07,020
probe two sets of problems so I'm

00:02:04,469 --> 00:02:09,869
racking it I'm sorry I threw me and wait

00:02:07,020 --> 00:02:10,649
- you're very far away so unless you're

00:02:09,869 --> 00:02:13,019
super super

00:02:10,649 --> 00:02:14,730
I sight you might not fit this so if you

00:02:13,019 --> 00:02:18,450
want to come closer whatever you might

00:02:14,730 --> 00:02:22,319
want to so problems have promised or

00:02:18,450 --> 00:02:24,569
fetch but is a complex pack that has a

00:02:22,319 --> 00:02:31,349
bunch of a bunch of nice properties for

00:02:24,569 --> 00:02:35,180
the web okay and first of all it's time

00:02:31,349 --> 00:02:40,709
integrate it into the caching model of

00:02:35,180 --> 00:02:43,079
the browser okay the fax pack it's it's

00:02:40,709 --> 00:02:48,510
as a food truck in fact dedicated well

00:02:43,079 --> 00:02:52,170
caching works so do you know any cache

00:02:48,510 --> 00:02:54,450
HTTP no and our currently typically do

00:02:52,170 --> 00:02:57,359
not perform any type of HTTP caching

00:02:54,450 --> 00:02:59,549
it's not an HTTP cache anywhere we are

00:02:57,359 --> 00:03:01,829
not writing stuff to this you're not

00:02:59,549 --> 00:03:06,239
doing anything related to caching at all

00:03:01,829 --> 00:03:07,950
you're leaving that to Draco system and

00:03:06,239 --> 00:03:13,489
the system turns out is not going it

00:03:07,950 --> 00:03:19,410
either so you know there is that

00:03:13,489 --> 00:03:21,870
security model okay right you know

00:03:19,410 --> 00:03:24,739
course all the you know fantastic stuff

00:03:21,870 --> 00:03:28,620
for the web doesn't make sense

00:03:24,739 --> 00:03:30,109
you know that's those are open questions

00:03:28,620 --> 00:03:39,209
okay

00:03:30,109 --> 00:03:40,190
there is the connection pool and you

00:03:39,209 --> 00:03:42,770
know you know

00:03:40,190 --> 00:03:45,910
browser you can make up to four requests

00:03:42,770 --> 00:03:50,180
down I don't know that even changes but

00:03:45,910 --> 00:03:53,870
for it for power a request down to your

00:03:50,180 --> 00:03:57,590
HTTP server okay and that he is a

00:03:53,870 --> 00:04:00,530
concept of HTTP keep a life and there is

00:03:57,590 --> 00:04:01,640
a lot of those things in the browser or

00:04:00,530 --> 00:04:06,440
this is managed for you

00:04:01,640 --> 00:04:09,860
nice is good right in no joy yes we have

00:04:06,440 --> 00:04:12,890
those through an agent now one of the

00:04:09,860 --> 00:04:14,750
greatest thing that knowed me as a

00:04:12,890 --> 00:04:16,160
change is disabling the global agent

00:04:14,750 --> 00:04:20,750
because everybody was having problem

00:04:16,160 --> 00:04:22,820
with it so turns out that having a

00:04:20,750 --> 00:04:25,940
global connection food and the global

00:04:22,820 --> 00:04:30,260
set of connections or polite it's

00:04:25,940 --> 00:04:33,220
probably a Panettiere for nutrients so

00:04:30,260 --> 00:04:34,820
those are you know more high-level

00:04:33,220 --> 00:04:38,150
topics okay

00:04:34,820 --> 00:04:40,520
just flag in my opinion if you are

00:04:38,150 --> 00:04:44,450
different opinion of those topics you

00:04:40,520 --> 00:04:47,930
know please let me know but I'm I think

00:04:44,450 --> 00:04:51,470
I keep going please me whatever you want

00:04:47,930 --> 00:04:53,900
so this is a high-level okay and on top

00:04:51,470 --> 00:05:01,880
of these I level search we have other

00:04:53,900 --> 00:05:08,500
things which is its global okay and this

00:05:01,880 --> 00:05:08,500
is problematic because all of these

00:05:09,719 --> 00:05:19,289
I'm tied to a global object okay so

00:05:14,429 --> 00:05:21,389
that's also a concern with not

00:05:19,289 --> 00:05:23,999
over-bright but is still if it's still a

00:05:21,389 --> 00:05:25,709
single function that has attached a

00:05:23,999 --> 00:05:31,459
single cashing and security and

00:05:25,709 --> 00:05:34,289
connection it's still problematic and

00:05:31,459 --> 00:05:36,599
it's implement what which is strange so

00:05:34,289 --> 00:05:43,319
which is currently not support okay

00:05:36,599 --> 00:05:46,379
it's we do not those it's not it's not

00:05:43,319 --> 00:05:48,569
simple it's just a lot of hard work okay

00:05:46,379 --> 00:05:51,449
so it's possible it's just a little

00:05:48,569 --> 00:05:53,909
forward I'm not working it's a lot of

00:05:51,449 --> 00:06:02,550
hard work making sure that everything is

00:05:53,909 --> 00:06:05,819
compatible so these are it and then

00:06:02,550 --> 00:06:07,349
there is another topic okay now because

00:06:05,819 --> 00:06:09,749
it's attorneys try to what with

00:06:07,349 --> 00:06:12,229
restraint okay we have an ecosystem

00:06:09,749 --> 00:06:12,229
problem

00:06:14,590 --> 00:06:22,530
you know now

00:06:46,450 --> 00:06:49,620
[Music]

00:07:31,670 --> 00:07:34,809
[Music]

00:08:14,010 --> 00:08:17,100
[Music]

00:08:17,360 --> 00:09:08,649
so I won't really talk and essentially

00:09:11,990 --> 00:09:15,059
[Music]

00:09:24,190 --> 00:09:39,320
means that you request and in a

00:09:31,190 --> 00:09:43,570
performant way it's hard or it's not you

00:09:39,320 --> 00:09:46,730
need to consider it easily is it with

00:09:43,570 --> 00:09:50,920
parameters so you are two things are you

00:09:46,730 --> 00:09:50,920
have the Max and Max sockets

00:09:51,240 --> 00:10:03,750
okay and you have tip alive

00:09:59,620 --> 00:10:09,340
and then you have a series of timeouts

00:10:03,750 --> 00:10:11,680
for all of those okay so it's it's gets

00:10:09,340 --> 00:10:12,670
complicated real quickly especially if

00:10:11,680 --> 00:10:15,280
you're building a microservices

00:10:12,670 --> 00:10:16,780
architecture built on top of HTTP you

00:10:15,280 --> 00:10:21,670
know these techniques might be burning

00:10:16,780 --> 00:10:32,890
down now more popular modules like north

00:10:21,670 --> 00:10:39,160
fashion use this and not fetch sorry

00:10:32,890 --> 00:10:43,600
have you put in not fetch have you put

00:10:39,160 --> 00:10:46,080
in passing an agent okay but now if you

00:10:43,600 --> 00:10:49,630
use fax as a polyfill for the browser

00:10:46,080 --> 00:10:54,850
you are also have a double agent sitting

00:10:49,630 --> 00:10:57,100
somewhere and same problem that we have

00:10:54,850 --> 00:10:58,840
a global agent and you might not really

00:10:57,100 --> 00:11:05,470
want to even have that in the first

00:10:58,840 --> 00:11:08,710
place because it's it goes into it goes

00:11:05,470 --> 00:11:10,720
into problems on its own okay now count

00:11:08,710 --> 00:11:13,300
that you know composition model meter to

00:11:10,720 --> 00:11:15,670
eight if you're wanting to do HTTP HTTP

00:11:13,300 --> 00:11:25,440
if you have true agents and it gets even

00:11:15,670 --> 00:11:25,440
more and then it's no it's fine too

00:11:29,760 --> 00:11:37,870
because you know we are going to have

00:11:33,760 --> 00:11:43,300
HTTP three in the future we the high

00:11:37,870 --> 00:11:44,890
level API for like this thing is going

00:11:43,300 --> 00:11:48,900
to is getting like a scenes getting all

00:11:44,890 --> 00:11:53,500
of that back and this is my theory okay

00:11:48,900 --> 00:11:56,530
does it make me is there any objection

00:11:53,500 --> 00:11:59,380
or any points to that somebody disagree

00:11:56,530 --> 00:12:00,790
somebody really like HTTP top request is

00:11:59,380 --> 00:12:11,680
really passionate about it please speak

00:12:00,790 --> 00:12:14,240
now okay yes and so this is the HTTP

00:12:11,680 --> 00:12:17,900
request I would like to have

00:12:14,240 --> 00:12:22,190
miles coming up you would like to speak

00:12:17,900 --> 00:12:26,690
for like two minutes about why why we

00:12:22,190 --> 00:12:29,090
need fetch in EndNote and as a thing

00:12:26,690 --> 00:12:31,940
like because I just leased a bunch of

00:12:29,090 --> 00:12:44,060
negative things reading once but you

00:12:31,940 --> 00:12:47,750
know to actually articulate that rather

00:12:44,060 --> 00:12:50,660
to an API for working with I think

00:12:47,750 --> 00:12:53,510
within the ecosystem it's become a

00:12:50,660 --> 00:12:56,600
fairly idiomatic way of writing code

00:12:53,510 --> 00:12:58,010
when I sit down and I want to make you

00:12:56,600 --> 00:13:00,470
know like some sort of request to get

00:12:58,010 --> 00:13:02,240
some sort of resource over the wire I

00:13:00,470 --> 00:13:04,940
reached for a mid fetch almost

00:13:02,240 --> 00:13:07,220
straightaway if we want to write code

00:13:04,940 --> 00:13:11,690
that can you know be

00:13:07,220 --> 00:13:13,670
platform-independent it's really to me I

00:13:11,690 --> 00:13:16,640
will go and write something like if not

00:13:13,670 --> 00:13:18,920
fetch then require no fetch and I think

00:13:16,640 --> 00:13:22,460
that especially as we move towards the

00:13:18,920 --> 00:13:25,430
SM we're like doing that kind of dynamic

00:13:22,460 --> 00:13:26,690
poly filling top level will make it a

00:13:25,430 --> 00:13:29,900
little easier but it's still not

00:13:26,690 --> 00:13:33,260
necessarily something that we're like

00:13:29,900 --> 00:13:35,690
jumping up and joy about a pattern to be

00:13:33,260 --> 00:13:38,540
following so it'd be really great to not

00:13:35,690 --> 00:13:42,020
have to polyfill it in the same way it

00:13:38,540 --> 00:13:43,760
would be you know good to have here and

00:13:42,020 --> 00:13:47,510
I think that like having that one

00:13:43,760 --> 00:13:49,730
interface for all the major javascript

00:13:47,510 --> 00:14:05,420
platforms will significantly simplify a

00:13:49,730 --> 00:14:07,490
lot of code people already so library

00:14:05,420 --> 00:14:10,370
out there I'd gone through and actually

00:14:07,490 --> 00:14:12,560
implemented fish quotes around that for

00:14:10,370 --> 00:14:14,480
nerdcore it didn't implement the

00:14:12,560 --> 00:14:19,190
security it didn't implement the caching

00:14:14,480 --> 00:14:21,320
you didn't eat you streams if I could

00:14:19,190 --> 00:14:22,580
didn't hit my muscles on that list so I

00:14:21,320 --> 00:14:24,950
didn't throw it out there because it

00:14:22,580 --> 00:14:27,250
wasn't actually fetched it had the name

00:14:24,950 --> 00:14:31,250
of the company was the

00:14:27,250 --> 00:14:33,740
the way that works so once there the

00:14:31,250 --> 00:14:36,649
couches we can only get part of wait

00:14:33,740 --> 00:14:43,790
there right now even if we did make sure

00:14:36,649 --> 00:14:48,230
you just to request matter work to do

00:14:43,790 --> 00:14:51,410
and then HP - we specifically did not do

00:14:48,230 --> 00:14:58,820
a compatibility an API on the client

00:14:51,410 --> 00:15:01,250
side because this is also the problem

00:14:58,820 --> 00:15:05,300
that the per our current agent model is

00:15:01,250 --> 00:15:08,120
based on the concept of a PCP shot or a

00:15:05,300 --> 00:15:31,810
TLS connection so each request gets a

00:15:08,120 --> 00:15:37,430
sign socket or a connection so that is

00:15:31,810 --> 00:15:40,520
more or less then the problem like I

00:15:37,430 --> 00:15:42,980
just wanted to state the problem and you

00:15:40,520 --> 00:15:44,270
know because question mark likes

00:15:42,980 --> 00:15:47,959
shipping this is going to be a journey

00:15:44,270 --> 00:15:51,200
but it's not going to be it is it's

00:15:47,959 --> 00:15:52,880
important that we need we ship some so

00:15:51,200 --> 00:15:56,600
it seemed we have two things we have two

00:15:52,880 --> 00:16:00,790
requirements and we need a better HTTP

00:15:56,600 --> 00:16:05,779
client for node ship within node itself

00:16:00,790 --> 00:16:11,630
and we need to support we will need some

00:16:05,779 --> 00:16:18,800
sort of fetch like thing for for the web

00:16:11,630 --> 00:16:21,110
and we also have promised lead the eyes

00:16:18,800 --> 00:16:23,029
for a bunch of things in core and we

00:16:21,110 --> 00:16:24,800
don't have the promise API in for HTTP

00:16:23,029 --> 00:16:28,160
request anyway so we might as well try

00:16:24,800 --> 00:16:35,089
to make it as close to web api yes we

00:16:28,160 --> 00:16:38,240
can yes so I just wanted to so I can't

00:16:35,089 --> 00:16:40,529
just framings a and I just want to do

00:16:38,240 --> 00:16:43,709
Frank so the first goal of the session

00:16:40,529 --> 00:16:53,220
framing the problem okay III don't want

00:16:43,709 --> 00:16:56,339
to I have some ideas okay and oh yeah so

00:16:53,220 --> 00:17:04,280
yeah that is that is actually quite nice

00:16:56,339 --> 00:17:06,560
so the titties so

00:17:04,280 --> 00:17:09,319
[Music]

00:17:06,560 --> 00:17:14,300
the one of the problem for API wise is

00:17:09,319 --> 00:17:15,680
what was his treats okay now at the

00:17:14,300 --> 00:17:19,699
beginning there was some thoughts off

00:17:15,680 --> 00:17:24,500
and some you know very bad blood being

00:17:19,699 --> 00:17:27,680
spilled whatever and about this there is

00:17:24,500 --> 00:17:30,040
I am of the opinion that because of the

00:17:27,680 --> 00:17:33,770
sheer amount of number of downloads and

00:17:30,040 --> 00:17:35,930
usage of notes traits we will never be

00:17:33,770 --> 00:17:39,260
able to replace not suing we work with

00:17:35,930 --> 00:17:40,700
districts okay and this is the we need

00:17:39,260 --> 00:17:43,720
to live with that mask that is not

00:17:40,700 --> 00:17:43,720
stressful okay

00:17:43,780 --> 00:17:49,220
it's we can't remove them okay it's not

00:17:48,020 --> 00:17:51,830
that we cannot have anything

00:17:49,220 --> 00:17:56,090
we cannot resume we cannot dictate those

00:17:51,830 --> 00:17:58,880
okay like photo if you don't know the

00:17:56,090 --> 00:18:01,580
userland implementation of notes trees

00:17:58,880 --> 00:18:04,570
which is readable that strings is that

00:18:01,580 --> 00:18:07,130
fourth most downloaded module out there

00:18:04,570 --> 00:18:11,540
okay that's so that you know that you

00:18:07,130 --> 00:18:14,840
are aware so it's the system relies on

00:18:11,540 --> 00:18:17,810
that thing to keep being better and

00:18:14,840 --> 00:18:20,090
working it's in very very some very deep

00:18:17,810 --> 00:18:23,350
dependency chain I don't care question

00:18:20,090 --> 00:18:26,360
but we might not release is there so

00:18:23,350 --> 00:18:27,830
that's what is you know it's it's it's

00:18:26,360 --> 00:18:31,600
somebody it's a river

00:18:27,830 --> 00:18:38,350
okay NPM uses it for example she sits in

00:18:31,600 --> 00:18:38,350
ships it's in in their bundle and so on

00:18:39,160 --> 00:18:44,050
so we need to some interrupt okay

00:18:48,760 --> 00:18:55,730
so my main idea for for interrupt with

00:18:53,180 --> 00:19:02,920
this and open and open for for a lot of

00:18:55,730 --> 00:19:02,920
feedbacks is using a single generators

00:19:06,580 --> 00:19:12,110
so essentially passing through language

00:19:10,100 --> 00:19:15,830
level constructs that they both support

00:19:12,110 --> 00:19:18,680
with the same semantics essential to

00:19:15,830 --> 00:19:22,220
actually be able to process to move this

00:19:18,680 --> 00:19:25,880
data right now this is not is not MDF

00:19:22,220 --> 00:19:28,160
challenges but it's it's something this

00:19:25,880 --> 00:19:30,920
is possibly should be possible as right

00:19:28,160 --> 00:19:32,360
now so essentially it's it's not

00:19:30,920 --> 00:19:35,540
possible because we don't have any plan

00:19:32,360 --> 00:19:37,640
edition of those around you know we you

00:19:35,540 --> 00:19:40,880
can't write a function that reads from a

00:19:37,640 --> 00:19:46,070
note stream and read from a wattages

00:19:40,880 --> 00:19:47,200
tree right now without with the exact

00:19:46,070 --> 00:19:56,240
same code

00:19:47,200 --> 00:20:01,390
alright so this is this is possible then

00:19:56,240 --> 00:20:05,150
one other way for shipping those is

00:20:01,390 --> 00:20:08,750
usually it's with the pipe line function

00:20:05,150 --> 00:20:11,660
that we have introduced so essentially

00:20:08,750 --> 00:20:19,419
make sure that you can use pipeline no

00:20:11,660 --> 00:20:23,649
stream what would you stream

00:20:19,419 --> 00:20:25,570
and vice-versa okay so you can combine

00:20:23,649 --> 00:20:30,219
those things and the logic for combining

00:20:25,570 --> 00:20:32,739
those things is built in into into the

00:20:30,219 --> 00:20:33,419
runtime so users don't have to deal with

00:20:32,739 --> 00:20:48,190
it

00:20:33,419 --> 00:20:50,499
is this a yes the reason is you want to

00:20:48,190 --> 00:20:55,209
read from a file and you want to pipe it

00:20:50,499 --> 00:20:59,289
and send it to fetch via post how do you

00:20:55,209 --> 00:21:04,059
mix those are you recommending implement

00:20:59,289 --> 00:21:06,759
the second we implement the phone on our

00:21:04,059 --> 00:21:11,039
API is create a new g string one other

00:21:06,759 --> 00:21:11,039
note stream one was about the system

00:21:11,729 --> 00:21:31,570
wait a second let me give you what WG

00:21:24,519 --> 00:21:43,269
stream in ojs yeah yeah so how is that

00:21:31,570 --> 00:21:46,419
different from just async iterable yes

00:21:43,269 --> 00:21:51,759
what what WG stream there is a signature

00:21:46,419 --> 00:21:56,379
yes yeah well it's in this pack so you

00:21:51,759 --> 00:21:59,950
know it's and now it's facing province

00:21:56,379 --> 00:22:02,649
to write so fetch

00:21:59,950 --> 00:22:06,429
we need to do get reader that returns

00:22:02,649 --> 00:22:10,559
the stream and then we get a sync

00:22:06,429 --> 00:22:10,559
iterator executed here before waiting

00:22:11,249 --> 00:22:16,570
just to insist like in a signatory to

00:22:14,320 --> 00:22:21,009
directly another what ability stream and

00:22:16,570 --> 00:22:24,389
then when they add that we can only

00:22:21,009 --> 00:22:24,389
expose that and not expose

00:22:26,900 --> 00:22:32,450
that is a possibility or for facts so we

00:22:30,470 --> 00:22:35,420
might not have to implement those in

00:22:32,450 --> 00:22:40,730
note great this is a question mark okay

00:22:35,420 --> 00:22:44,920
now it's a good idea I love it okay

00:22:40,730 --> 00:22:48,530
so essentially providing a way for not

00:22:44,920 --> 00:22:51,080
to provide that big question how we do

00:22:48,530 --> 00:23:02,270
this but it's still it's still open so

00:22:51,080 --> 00:23:16,040
you know it's there is this okay what

00:23:02,270 --> 00:23:20,140
else can we talk about one of the

00:23:16,040 --> 00:23:20,140
impossible options here is that we just

00:23:27,670 --> 00:23:37,060
so somebody couldn't what streams easier

00:23:32,710 --> 00:23:40,160
it doesn't solve the HP request API

00:23:37,060 --> 00:23:47,020
issue right now but if we do make it

00:23:40,160 --> 00:23:49,480
easier to to at least get the parts to

00:23:47,020 --> 00:23:57,430
implement room for experimentation

00:23:49,480 --> 00:24:03,350
around what should be yes absolutely

00:23:57,430 --> 00:24:06,410
so yeah the big question here for all of

00:24:03,350 --> 00:24:11,450
you that are here and eating on the

00:24:06,410 --> 00:24:13,730
livestream very hard is you know he

00:24:11,450 --> 00:24:17,200
needs people to work this is a complex

00:24:13,730 --> 00:24:20,960
complex problem but with it is not

00:24:17,200 --> 00:24:22,400
simple in any form so it needs a lots of

00:24:20,960 --> 00:24:24,580
people working there's a lot of people

00:24:22,400 --> 00:24:28,760
complaining that fetch is not there and

00:24:24,580 --> 00:24:29,660
not and not enough people say oh how can

00:24:28,760 --> 00:24:31,610
we have this

00:24:29,660 --> 00:24:33,530
how can we make this work how do you

00:24:31,610 --> 00:24:39,830
address the compatibility with the rest

00:24:33,530 --> 00:24:40,180
of the system and work on this so why

00:24:39,830 --> 00:24:41,740
not

00:24:40,180 --> 00:24:44,740
if there's a bunch of people that is

00:24:41,740 --> 00:24:49,300
willing to help and work on this is we

00:24:44,740 --> 00:24:53,800
can spin up a repository the

00:24:49,300 --> 00:24:57,070
organization where we can you know

00:24:53,800 --> 00:25:00,580
tinker with and experiment and then do a

00:24:57,070 --> 00:25:04,300
massive PR to know when we already this

00:25:00,580 --> 00:25:07,270
model has been used by http/2 and models

00:25:04,300 --> 00:25:09,610
to ship them so it's a proven module for

00:25:07,270 --> 00:25:11,920
you know managing very very big and

00:25:09,610 --> 00:25:15,100
complex changes we have a lot of

00:25:11,920 --> 00:25:18,750
ramifications so we might want to do

00:25:15,100 --> 00:25:24,490
that but as I said it requests people so

00:25:18,750 --> 00:25:36,720
there of their volunteers you know that

00:25:24,490 --> 00:25:45,250
was kind of aah I know things so it's

00:25:36,720 --> 00:25:47,470
it's very interesting it's also I have a

00:25:45,250 --> 00:25:48,100
proposal but I don't know if this makes

00:25:47,470 --> 00:26:00,280
any sense

00:25:48,100 --> 00:26:08,550
okay and for two meters or X or full

00:26:00,280 --> 00:26:08,550
bottles of wine no let's drink them so

00:26:11,220 --> 00:26:18,100
some of the problems of fetch the way

00:26:15,130 --> 00:26:22,060
note works and the way we compose

00:26:18,100 --> 00:26:26,710
node.js applications in the process in

00:26:22,060 --> 00:26:29,170
real life is that non je having it is a

00:26:26,710 --> 00:26:33,130
global with a global connection pool and

00:26:29,170 --> 00:26:37,090
so on all those things are potentially

00:26:33,130 --> 00:26:42,390
problematic for node itself so I have

00:26:37,090 --> 00:26:42,390
this idea of meet fetch API

00:26:45,520 --> 00:26:51,580
okay that is a possibility and just

00:26:49,930 --> 00:26:56,920
saying that we are not exposing fats as

00:26:51,580 --> 00:27:00,970
a thing we are exposing a factory and

00:26:56,920 --> 00:27:07,090
what you can't put in here is you know I

00:27:00,970 --> 00:27:13,690
want the connections the time outs

00:27:07,090 --> 00:27:17,140
I want the HTTP two three compatibility

00:27:13,690 --> 00:27:19,930
okay and so on and so forth

00:27:17,140 --> 00:27:23,050
so essentially you can actually define

00:27:19,930 --> 00:27:24,850
what is you can actually create your own

00:27:23,050 --> 00:27:27,280
equipment you can actually customize

00:27:24,850 --> 00:27:29,350
this and that it's specific to your

00:27:27,280 --> 00:27:34,270
means you might also want to maybe

00:27:29,350 --> 00:27:37,810
whitelist or placed some your else that

00:27:34,270 --> 00:27:43,540
you might watch okay so I don't know I

00:27:37,810 --> 00:27:52,030
have this is more or less my take as we

00:27:43,540 --> 00:27:55,840
said I'm not shipping no streets those

00:27:52,030 --> 00:27:58,210
things are there are there I'm just you

00:27:55,840 --> 00:28:03,480
know what we need because this is more

00:27:58,210 --> 00:28:07,000
of a call to action rather than a full

00:28:03,480 --> 00:28:09,160
full poem proposal from section is just

00:28:07,000 --> 00:28:13,150
a problems problem that you should be

00:28:09,160 --> 00:28:15,700
aware of and that provides something

00:28:13,150 --> 00:28:19,750
better for the position there is also

00:28:15,700 --> 00:28:22,450
one more thing for other folks it's me

00:28:19,750 --> 00:28:25,750
model is very hard to expect it's very

00:28:22,450 --> 00:28:28,510
hard to intercept calls and so on me

00:28:25,750 --> 00:28:31,210
twisting on services so this race

00:28:28,510 --> 00:28:37,150
ability in there just to complicate

00:28:31,210 --> 00:28:41,970
things I I don't know I I am more or

00:28:37,150 --> 00:28:46,650
less done I'm early so a answer I'm

00:28:41,970 --> 00:28:46,650
asking for questions and feedbacks here

00:28:53,970 --> 00:28:57,240
complex things

00:28:59,700 --> 00:29:12,669
Martines to fulfill promises is it not

00:29:06,879 --> 00:29:14,860
also an option not to do this and to use

00:29:12,669 --> 00:29:18,009
a motto visit outside because it's not

00:29:14,860 --> 00:29:23,259
bring it into court or is that not an

00:29:18,009 --> 00:29:28,409
option the use of milk fat and steal all

00:29:23,259 --> 00:29:28,409
the issues of our current 80db more

00:29:33,419 --> 00:29:38,470
so rather than bring this sprain into

00:29:35,919 --> 00:29:41,470
court which is like a huge rant perhaps

00:29:38,470 --> 00:29:43,179
an alternative the middle ground is to

00:29:41,470 --> 00:29:45,659
take a currently existing one and work

00:29:43,179 --> 00:29:48,940
on it to bringing those other features

00:29:45,659 --> 00:29:52,419
http/2 allowed people can use it at some

00:29:48,940 --> 00:29:54,249
future point bring it in in order to do

00:29:52,419 --> 00:29:57,960
that that will require significant

00:29:54,249 --> 00:29:57,960
changes to north Couric's aus yes

00:29:58,409 --> 00:30:05,440
so essentially you are essentially yes

00:30:02,139 --> 00:30:07,480
but in order to shift that meua ti4 not

00:30:05,440 --> 00:30:11,909
core for other things that will be need

00:30:07,480 --> 00:30:11,909
to be low level and that probably not

00:30:16,050 --> 00:30:23,889
[Music]

00:30:18,989 --> 00:30:29,109
it is the major problem is HTTP top

00:30:23,889 --> 00:30:39,580
agent model that we have essentially and

00:30:29,109 --> 00:30:42,489
if you miss so much time to figure out

00:30:39,580 --> 00:30:45,220
how things were moving around and so on

00:30:42,489 --> 00:30:49,539
it also makes edge cases about proxies

00:30:45,220 --> 00:30:51,249
so if you want to use a proxy node may

00:30:49,539 --> 00:30:54,789
have to be replaced or proxy to is a new

00:30:51,249 --> 00:31:02,049
system module that matches their own

00:30:54,789 --> 00:31:05,390
agents and ok it's there is a question

00:31:02,049 --> 00:31:12,020
from German

00:31:05,390 --> 00:31:16,400
I don't know if anyone's explored this

00:31:12,020 --> 00:31:19,670
at all but are we sure that we aren't

00:31:16,400 --> 00:31:24,080
going to want a lower level HCP to

00:31:19,670 --> 00:31:30,530
and/or htv3 quick whatever climate or

00:31:24,080 --> 00:31:31,100
client that's lower level so that in a

00:31:30,530 --> 00:31:34,880
sense

00:31:31,100 --> 00:31:38,530
so they some something that would also

00:31:34,880 --> 00:31:44,140
then let note fetch be implemented on

00:31:38,530 --> 00:31:47,270
top of for for those protocols in a more

00:31:44,140 --> 00:31:49,340
looks like compatible way obviously

00:31:47,270 --> 00:31:49,970
because currently they're kind of stuck

00:31:49,340 --> 00:31:53,630
with thee

00:31:49,970 --> 00:31:56,960
yeah ie plan that we have but James take

00:31:53,630 --> 00:32:00,200
that the answer is yes we're ups are

00:31:56,960 --> 00:32:02,059
going to need them fetch as a higher

00:32:00,200 --> 00:32:04,100
level abstraction does not expose enough

00:32:02,059 --> 00:32:06,380
detail to higher to actually make use

00:32:04,100 --> 00:32:09,830
for this specific features so basically

00:32:06,380 --> 00:32:11,660
to the missionary like push streams for

00:32:09,830 --> 00:32:13,309
instance there's nothing there that to

00:32:11,660 --> 00:32:18,890
do that so we actually need a little

00:32:13,309 --> 00:32:21,799
client or client side that exposes for

00:32:18,890 --> 00:32:24,620
HP three we're actually have two clients

00:32:21,799 --> 00:32:26,140
there's a quic protocol Minter's HP 3

00:32:24,620 --> 00:32:28,640
which is an application on top of quick

00:32:26,140 --> 00:32:36,040
and that API they're actually being just

00:32:28,640 --> 00:32:38,390
a little quick clients they're in HP API

00:32:36,040 --> 00:32:41,000
so there's there's multiple layers in

00:32:38,390 --> 00:32:42,559
clients their levels of detail and

00:32:41,000 --> 00:32:47,030
different features that need to expose

00:32:42,559 --> 00:32:50,990
each level a little bit confusing then

00:32:47,030 --> 00:32:53,299
again the need for such because I think

00:32:50,990 --> 00:32:58,910
those verticals would kind of be listed

00:32:53,299 --> 00:33:01,910
as a reason that we would want this even

00:32:58,910 --> 00:33:03,530
though we it will it seems we're never

00:33:01,910 --> 00:33:07,220
to believe a look at lower level clients

00:33:03,530 --> 00:33:12,080
many ways and there are a couple of

00:33:07,220 --> 00:33:15,520
reasons the first one it's it's numb

00:33:12,080 --> 00:33:18,980
probably close to number one complaint

00:33:15,520 --> 00:33:23,840
from the folks on the web platform

00:33:18,980 --> 00:33:27,080
so and currently using notes such as a

00:33:23,840 --> 00:33:31,340
certain series of you know compatibility

00:33:27,080 --> 00:33:33,919
issues around as I said connection

00:33:31,340 --> 00:33:36,320
pooling by default it has no connection

00:33:33,919 --> 00:33:39,440
pooling which means that if you're

00:33:36,320 --> 00:33:44,330
writing a react app server side run to

00:33:39,440 --> 00:33:47,330
react application or it me and from the

00:33:44,330 --> 00:33:49,639
global object it means that you are

00:33:47,330 --> 00:33:52,399
actually creating attentively at that

00:33:49,639 --> 00:33:55,970
TCP socket every time you make a request

00:33:52,399 --> 00:33:58,190
and if that's an HTTP connection you're

00:33:55,970 --> 00:34:00,019
actually accentuating a new TLS context

00:33:58,190 --> 00:34:04,700
every single time you making a

00:34:00,019 --> 00:34:07,450
connection which means that you're going

00:34:04,700 --> 00:34:12,349
to get very bad performance out of here

00:34:07,450 --> 00:34:13,940
so that those are names okay I'm not

00:34:12,349 --> 00:34:17,599
sure if they're enough for you but

00:34:13,940 --> 00:34:22,129
that's that's one of the first questions

00:34:17,599 --> 00:34:24,230
that'll be possible connection problem

00:34:22,129 --> 00:34:26,120
so you need none you need to pass on an

00:34:24,230 --> 00:34:29,150
agent

00:34:26,120 --> 00:34:31,580
so you basically need to move around an

00:34:29,150 --> 00:34:33,980
HTTP agent or second globalize the agent

00:34:31,580 --> 00:34:36,430
on top core causing both of those

00:34:33,980 --> 00:34:36,430
problems

00:34:46,059 --> 00:35:09,640
I'm just I'm just okay so it's a it's a

00:35:30,309 --> 00:35:43,000
blocks did you face me provides points

00:35:37,089 --> 00:35:46,240
hi so I have a branch and nothing works

00:35:43,000 --> 00:35:51,349
but I have like one or two commits and

00:35:46,240 --> 00:35:54,020
basically into the debts folder and I

00:35:51,349 --> 00:35:56,900
brought the wind platform tests because

00:35:54,020 --> 00:35:58,339
I don't have trees in here joy did

00:35:56,900 --> 00:36:00,020
something really an awesome work with

00:35:58,339 --> 00:36:03,170
documenting and automating the process

00:36:00,020 --> 00:36:06,309
of vendor in a web platform tests so

00:36:03,170 --> 00:36:13,069
there's a whole bunch of tests for fetch

00:36:06,309 --> 00:36:17,150
so I got the tests and then I was trying

00:36:13,069 --> 00:36:20,000
to wire up node fetch and he was like

00:36:17,150 --> 00:36:21,770
super naive just like instantiating and

00:36:20,000 --> 00:36:25,280
it says like putting it into the global

00:36:21,770 --> 00:36:27,980
and then putting it into the module but

00:36:25,280 --> 00:36:30,140
for some reason the way I was wiring it

00:36:27,980 --> 00:36:32,000
up it wasn't actually available on the

00:36:30,140 --> 00:36:33,680
global and it wasn't getting required

00:36:32,000 --> 00:36:36,380
and then it was 3:00 a.m. and there was

00:36:33,680 --> 00:36:38,480
a screw this and I shot my laptop and

00:36:36,380 --> 00:36:40,880
then I just have not motivated myself to

00:36:38,480 --> 00:36:44,630
ever open it again so I've mostly been a

00:36:40,880 --> 00:36:46,940
lot off for instance but yeah I guess

00:36:44,630 --> 00:36:48,240
like the biggest blocker there was that

00:36:46,940 --> 00:36:50,610
last little bit of like

00:36:48,240 --> 00:36:54,090
we had wired up there was just something

00:36:50,610 --> 00:36:56,180
I was doing wrong I bet you if we sat

00:36:54,090 --> 00:36:58,980
down and looked at it for two seconds

00:36:56,180 --> 00:37:00,570
joy your Hannah or someone who's more

00:36:58,980 --> 00:37:02,490
familiar with some of the internals of

00:37:00,570 --> 00:37:04,170
food would probably like you just need

00:37:02,490 --> 00:37:06,750
to do this one thing and then we would

00:37:04,170 --> 00:37:09,600
have liked that that it it fetch at

00:37:06,750 --> 00:37:12,420
least working experimental II so I think

00:37:09,600 --> 00:37:14,580
I'm pretty sure I have that branch on my

00:37:12,420 --> 00:37:16,500
computer I could just go rebase it and

00:37:14,580 --> 00:37:21,090
then someone can try to get it working

00:37:16,500 --> 00:37:23,820
and we could just play with that anyway

00:37:21,090 --> 00:37:27,260
I don't know if you expected something

00:37:23,820 --> 00:37:27,260
different from the session or anything

00:37:32,110 --> 00:37:46,040
I'll explain on the second day about

00:37:36,800 --> 00:37:52,220
when like where is she also like I think

00:37:46,040 --> 00:37:57,050
for testing that we need to like have a

00:37:52,220 --> 00:37:59,330
server because Kevin says you know what

00:37:57,050 --> 00:38:02,120
happens has they have this kind of

00:37:59,330 --> 00:38:06,350
server setup if you like actually roll

00:38:02,120 --> 00:38:09,140
in it it will like start a server so

00:38:06,350 --> 00:38:12,530
that you can test certainly guys like

00:38:09,140 --> 00:38:15,770
fetch against that sir in is that you're

00:38:12,530 --> 00:38:18,050
gonna just testing the interface without

00:38:15,770 --> 00:38:23,360
actually taking functionality I think we

00:38:18,050 --> 00:38:36,410
need little bit more like cooking up to

00:38:23,360 --> 00:38:38,810
do in order to actually runs tests the

00:38:36,410 --> 00:38:44,110
web platform tests so there's a pass

00:38:38,810 --> 00:38:44,110
from them that we're pulling in into

00:38:44,230 --> 00:38:52,190
notice into it so we can write our own

00:38:49,370 --> 00:38:58,850
tests we can't be not the server okay

00:38:52,190 --> 00:39:02,530
that's what HTTP thingy but with WPT we

00:38:58,850 --> 00:39:22,760
will be to do it in some other ways that

00:39:02,530 --> 00:39:27,050
is dedicated to things like CRS and you

00:39:22,760 --> 00:39:32,360
know caching like we would like if we

00:39:27,050 --> 00:39:34,850
want like England amendment minimum set

00:39:32,360 --> 00:39:43,400
of functionality exactly we have like a

00:39:34,850 --> 00:39:45,170
school all of those yet it's an

00:39:43,400 --> 00:39:50,900
important point it

00:39:45,170 --> 00:39:55,700
is in our implementation of fetch all

00:39:50,900 --> 00:39:57,380
right if we're not compliant with spec r

00:39:55,700 --> 00:39:59,539
we can we actually say we are

00:39:57,380 --> 00:40:04,190
implementing such we've had some

00:39:59,539 --> 00:40:07,849
arguments within the core around the

00:40:04,190 --> 00:40:09,740
platform api compatibility that it

00:40:07,849 --> 00:40:11,180
either it has to work the same exact

00:40:09,740 --> 00:40:14,420
same way that it is in the browser or

00:40:11,180 --> 00:40:18,410
it's not you know we're doing something

00:40:14,420 --> 00:40:21,920
wrong because it for the promises some

00:40:18,410 --> 00:40:25,460
other things so one of my concerns is if

00:40:21,920 --> 00:40:26,839
we do implement implement exactly what

00:40:25,460 --> 00:40:29,619
the API like we can make modifications

00:40:26,839 --> 00:40:32,900
to it so that it works better at a node

00:40:29,619 --> 00:40:35,470
right what kind of issues arenal run-ins

00:40:32,900 --> 00:40:39,200
with the differences there in brother so

00:40:35,470 --> 00:40:41,210
to avoid that we really should be

00:40:39,200 --> 00:40:44,269
looking at it going back to the web MIDI

00:40:41,210 --> 00:40:47,750
team and trying to propose some Chinese

00:40:44,269 --> 00:41:01,730
such as making make fish or whatever API

00:40:47,750 --> 00:41:03,380
here Oregon standards so so there's like

00:41:01,730 --> 00:41:06,680
one or two extra commits on this branch

00:41:03,380 --> 00:41:09,910
but I don't remember writing and it

00:41:06,680 --> 00:41:14,630
looks like it might work what I did is

00:41:09,910 --> 00:41:20,589
it's compiling right now we don't have

00:41:14,630 --> 00:41:20,589
to yeah let's I'll show you what I did

00:41:26,480 --> 00:41:32,900
usually before I do that it's quickly so

00:41:30,330 --> 00:41:34,710
I'm a just quick tip if you're using

00:41:32,900 --> 00:41:36,120
computers and you're putting it on a

00:41:34,710 --> 00:41:37,440
projector and that projectors on the

00:41:36,120 --> 00:41:38,130
strain and you don't look people to see

00:41:37,440 --> 00:41:43,070
what you're doing

00:41:38,130 --> 00:41:43,070
close all your messaging clients first

00:41:56,240 --> 00:42:10,490
there's the mac app called muscle so I

00:42:03,390 --> 00:42:13,700
made a new experimental such flag which

00:42:10,490 --> 00:42:17,460
if you ever want to make a flag and note

00:42:13,700 --> 00:42:20,700
essentially you want you have no toxins

00:42:17,460 --> 00:42:24,210
not CCNA options that age this used to

00:42:20,700 --> 00:42:28,110
be not nearly as nice did you do a lot

00:42:24,210 --> 00:42:35,520
of the refactoring for this for the node

00:42:28,110 --> 00:42:37,440
options like this stuff okay well thank

00:42:35,520 --> 00:42:45,230
you it's so much nicer he used to just

00:42:37,440 --> 00:42:54,090
all be and like no dot see Venetian is -

00:42:45,230 --> 00:42:55,560
yes no nope oh yeah this is a close

00:42:54,090 --> 00:43:01,710
reading and a riot a little look for

00:42:55,560 --> 00:43:02,370
patterns in the MIT license okay so get

00:43:01,710 --> 00:43:05,420
out

00:43:02,370 --> 00:43:05,420
[Music]

00:43:14,060 --> 00:43:19,010
we haven't even been DEA yet this can

00:43:16,650 --> 00:43:19,010
take a while

00:43:34,279 --> 00:43:46,140
okay so here's the bad code arrow you

00:43:42,809 --> 00:43:49,019
make an ad option the name of the option

00:43:46,140 --> 00:43:52,829
that's the like variable you declare the

00:43:49,019 --> 00:43:56,429
variable here so experimental fetch

00:43:52,829 --> 00:43:59,549
false by default then inside of each to

00:43:56,429 --> 00:44:02,309
be here you can just from internal

00:43:59,549 --> 00:44:05,489
options you can call get option value

00:44:02,309 --> 00:44:06,959
and then get option value of like the

00:44:05,489 --> 00:44:09,689
option itself will then give you these

00:44:06,959 --> 00:44:11,459
flat like the flag that you passed so

00:44:09,689 --> 00:44:12,929
that's kind of how do you make flags in

00:44:11,459 --> 00:44:16,439
note now which was fairly

00:44:12,929 --> 00:44:18,479
straightforward so you can see code

00:44:16,439 --> 00:44:20,579
spectacles require internal fetch and

00:44:18,479 --> 00:44:22,890
internal fetch distance module that

00:44:20,579 --> 00:44:25,709
exports equals require internal but

00:44:22,890 --> 00:44:39,569
Def's don't look fat fetch and if we go

00:44:25,709 --> 00:44:51,449
here to be live internal maybe that's

00:44:39,569 --> 00:44:54,959
what I did wrong just being dense maybe

00:44:51,449 --> 00:44:56,999
that's what I think doesn't internal

00:44:54,959 --> 00:44:58,799
slash steps then like go to the Dex

00:44:56,999 --> 00:45:00,839
folder yeah

00:44:58,799 --> 00:45:10,199
so that just works it has to look up why

00:45:00,839 --> 00:45:13,979
it just works we'll see in a second I

00:45:10,199 --> 00:45:15,509
don't even remember writing this so but

00:45:13,979 --> 00:45:19,079
then essentially all we do is like we

00:45:15,509 --> 00:45:21,029
check the option value if it's true then

00:45:19,079 --> 00:45:24,299
we require internal fetch which in turn

00:45:21,029 --> 00:45:26,279
that requires depth of fetch and then it

00:45:24,299 --> 00:45:29,039
just defines the property I defined it

00:45:26,279 --> 00:45:31,859
on HTTP so this was one way that I

00:45:29,039 --> 00:45:35,279
thought we could fix some of the

00:45:31,859 --> 00:45:38,609
problems of at least people and not

00:45:35,279 --> 00:45:41,969
being happy that it's called fetch

00:45:38,609 --> 00:45:44,159
because it would be HTTP dot fetch so it

00:45:41,969 --> 00:45:46,220
would be part of our HTTP API it

00:45:44,159 --> 00:45:49,670
wouldn't be on the global as just

00:45:46,220 --> 00:45:51,860
fetch my plan for this and I do this

00:45:49,670 --> 00:45:54,800
sometimes is right something really

00:45:51,860 --> 00:45:57,770
really bad that you know won't but

00:45:54,800 --> 00:46:00,860
it's some code and then a bit of PR and

00:45:57,770 --> 00:46:08,570
then people often then come in and swoop

00:46:00,860 --> 00:46:11,660
in and it's like you so this is still

00:46:08,570 --> 00:46:12,860
building we're at the beginning of the

00:46:11,660 --> 00:46:14,840
age so this is going to take a little

00:46:12,860 --> 00:46:19,130
while before we can actually test it I

00:46:14,840 --> 00:46:22,160
think we have what is going on here I

00:46:19,130 --> 00:46:27,250
think we have some time though Oh

00:46:22,160 --> 00:46:32,330
projector just Charles HDMI is sketchy

00:46:27,250 --> 00:46:34,640
so we're at four o'clock as it break

00:46:32,330 --> 00:46:36,410
time anyways right now so maybe we can

00:46:34,640 --> 00:46:39,470
take a break and by the time the break

00:46:36,410 --> 00:46:43,790
is done maybe this will be done

00:46:39,470 --> 00:46:46,030
compiling - thank you for looking in my

00:46:43,790 --> 00:46:46,030

YouTube URL: https://www.youtube.com/watch?v=S7DADtmKdqY


