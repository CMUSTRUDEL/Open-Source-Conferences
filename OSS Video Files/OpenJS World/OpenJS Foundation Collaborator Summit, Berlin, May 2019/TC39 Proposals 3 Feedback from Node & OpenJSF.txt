Title: TC39 Proposals 3 Feedback from Node & OpenJSF
Publication date: 2019-06-04
Playlist: OpenJS Foundation Collaborator Summit, Berlin, May 2019
Description: 
	OpenJS Foundation Collaborator Summit, Berlin, 2019

More details: https://github.com/nodejs/open-standards/issues/18#issuecomment-492309790
Captions: 
	00:00:02,990 --> 00:00:07,279
you don't get the the original object

00:00:05,029 --> 00:00:08,960
that was garbage collected fast into the

00:00:07,279 --> 00:00:14,809
finalizer because the object is already

00:00:08,960 --> 00:00:16,580
garbage collecting keeps you some other

00:00:14,809 --> 00:00:17,810
systems like Java give you that original

00:00:16,580 --> 00:00:21,769
object of this clusters and lock

00:00:17,810 --> 00:00:23,660
problems so at a high level both we

00:00:21,769 --> 00:00:25,550
preferences and finalize finalization

00:00:23,660 --> 00:00:26,449
groups by-elections are unreliable

00:00:25,550 --> 00:00:31,130
making sense

00:00:26,449 --> 00:01:02,540
the garbage collector might ever like

00:00:31,130 --> 00:02:16,470
eat objects or between or so interesting

00:01:02,540 --> 00:02:25,050
idea yeah

00:02:16,470 --> 00:02:28,440
oh I mean I think it's been cleared for

00:02:25,050 --> 00:02:30,950
many years that developers want this

00:02:28,440 --> 00:02:33,690
capability and it's been specifically

00:02:30,950 --> 00:02:36,990
denied because it was severe about it

00:02:33,690 --> 00:02:38,880
beating misuse the current calculation

00:02:36,990 --> 00:02:42,720
to add this features largely based on

00:02:38,880 --> 00:02:44,430
limits it if you have things that are in

00:02:42,720 --> 00:02:47,910
webassembly that you're trying to expose

00:02:44,430 --> 00:02:50,970
to JavaScript webassembly memories sort

00:02:47,910 --> 00:02:53,040
of like see memories this this theory

00:02:50,970 --> 00:02:56,220
basically you want to allocate chunks of

00:02:53,040 --> 00:02:57,900
it for a particular purpose and then you

00:02:56,220 --> 00:03:05,550
have to lead or explicitly freedom and

00:02:57,900 --> 00:03:07,080
we grips and finalization at the same

00:03:05,550 --> 00:03:08,450
time exclude it's going to be useful for

00:03:07,080 --> 00:03:18,600
a lot of different things javascript

00:03:08,450 --> 00:03:20,970
well so we're this is the work of Atilla

00:03:18,600 --> 00:03:23,239
right from mozilla it's actually gonna

00:03:20,970 --> 00:03:27,810
stick around through google as well as

00:03:23,239 --> 00:03:29,970
others from work and yeah so we're going

00:03:27,810 --> 00:03:32,220
to present it for stage 3 and this

00:03:29,970 --> 00:03:46,140
upcoming see they're not meeting its

00:03:32,220 --> 00:03:52,130
next week any other thoughts what don't

00:03:46,140 --> 00:03:52,130
you get is there anything like that

00:04:04,250 --> 00:04:13,230
Shalini why pick the job that's gonna be

00:04:07,530 --> 00:04:19,260
options you can say these were

00:04:13,230 --> 00:04:22,760
persistent things you know how well it

00:04:19,260 --> 00:04:26,310
works but I'm just curious

00:04:22,760 --> 00:04:29,160
yeah so the experience with Java is a

00:04:26,310 --> 00:04:30,009
big reason why we didn't have we

00:04:29,160 --> 00:04:33,279
preferences

00:04:30,009 --> 00:04:34,719
he4s in javascript for so long like a

00:04:33,279 --> 00:04:36,699
lot of control in than javascript

00:04:34,719 --> 00:04:39,520
appearance implemented community come

00:04:36,699 --> 00:04:43,839
from you know there's a lot of heritage

00:04:39,520 --> 00:04:47,080
in Illinois and my understanding is that

00:04:43,839 --> 00:04:48,849
a lot of large Java programs foot

00:04:47,080 --> 00:04:51,759
complex a lot to get there finalizing

00:04:48,849 --> 00:04:53,289
signals that are needed for the

00:04:51,759 --> 00:04:59,139
programming to sort of do its thing and

00:04:53,289 --> 00:05:00,430
proceed and we read I really want to

00:04:59,139 --> 00:05:02,620
figure out how to discourage that in

00:05:00,430 --> 00:05:03,580
JavaScript because if this pattern

00:05:02,620 --> 00:05:06,430
flickerings

00:05:03,580 --> 00:05:08,979
is going to make it harder for garbage

00:05:06,430 --> 00:05:10,839
collectors to to evolve over time

00:05:08,979 --> 00:05:16,649
it's going to be like really miserable

00:05:10,839 --> 00:05:19,360
for larger containers so I think making

00:05:16,649 --> 00:05:21,849
bridging things like finalizes never

00:05:19,360 --> 00:05:24,610
well I mean so one thing is Java has

00:05:21,849 --> 00:05:26,830
this thing where you can it passes an

00:05:24,610 --> 00:05:29,020
opportunity to the final answer and we

00:05:26,830 --> 00:05:32,349
specifically don't do that here I think

00:05:29,020 --> 00:05:35,289
we I think we should not include such as

00:05:32,349 --> 00:05:37,389
option takes it because that will give

00:05:35,289 --> 00:05:39,279
another kind of case where people will

00:05:37,389 --> 00:05:41,770
get this unreliability they'll be unable

00:05:39,279 --> 00:05:51,009
to basically program bucks with me mark

00:05:41,770 --> 00:05:52,899
knees I think I definitely agree both

00:05:51,009 --> 00:05:57,389
like possibly the object constants all

00:05:52,899 --> 00:05:57,389
sorts of crazy we animate

00:06:05,130 --> 00:06:16,260
ya mean do you think that it will cause

00:06:11,710 --> 00:06:19,090
big problems to not have this option - I

00:06:16,260 --> 00:06:28,950
don't like I don't have any fun every

00:06:19,090 --> 00:06:32,220
reason why it's trivial to have a VI and

00:06:28,950 --> 00:06:36,670
create something that does like

00:06:32,220 --> 00:06:37,750
secondary know it runs in code because

00:06:36,670 --> 00:06:40,950
of the very latest

00:06:37,750 --> 00:07:09,760
this is something you can do a problem

00:06:40,950 --> 00:07:13,530
great and I sold some issues with the

00:07:09,760 --> 00:07:16,990
old and deprecated remaining model

00:07:13,530 --> 00:07:42,160
that's what you know that we had some

00:07:16,990 --> 00:07:50,950
issues and that solved it and we context

00:07:42,160 --> 00:07:54,070
local storage things the same the main

00:07:50,950 --> 00:08:00,669
is essentially the exact same the exact

00:07:54,070 --> 00:08:04,900
same memory and thank you that in a

00:08:00,669 --> 00:08:08,500
solution that's so that you know if this

00:08:04,900 --> 00:08:09,669
feedback is now yeah so I'm curious did

00:08:08,500 --> 00:08:13,650
you get a chance a little bit bigger

00:08:09,669 --> 00:08:13,650
lately I think it's easy cases

00:08:17,360 --> 00:08:22,160
you know yeah I mean I thought there was

00:08:19,610 --> 00:08:31,760
some design for easy cooks where it was

00:08:22,160 --> 00:08:35,390
gonna maybe not need so those yes

00:08:31,760 --> 00:08:40,600
no no no we haven't that but it's the

00:08:35,390 --> 00:08:43,190
still the solution for domain as being

00:08:40,600 --> 00:08:48,800
super guidance provided by being

00:08:43,190 --> 00:08:50,930
because we're not like this so cool well

00:08:48,800 --> 00:08:55,490
you can experiment with this API today

00:08:50,930 --> 00:08:57,620
in Chrome or I don't know which is no

00:08:55,490 --> 00:09:03,440
originally planned it in but at least

00:08:57,620 --> 00:09:07,840
know the LTTE are Bluto with I think

00:09:03,440 --> 00:09:13,880
it's - - harmony - tweak - press ok and

00:09:07,840 --> 00:09:18,250
let me see and know that this manage

00:09:13,880 --> 00:09:18,250
will be subtly different but probably is

00:09:18,790 --> 00:09:23,810
different about the pain I mean this

00:09:22,130 --> 00:09:31,780
semantics are slightly different but the

00:09:23,810 --> 00:09:34,760
api's my my time is to work out those

00:09:31,780 --> 00:09:37,790
little details right up to the formal

00:09:34,760 --> 00:09:40,600
top the API majority works at before I

00:09:37,790 --> 00:09:40,600
met Colin

00:09:48,709 --> 00:09:55,200
so tuck a little leaf

00:09:51,110 --> 00:09:58,050
maybe maybe everyone will run out of the

00:09:55,200 --> 00:10:02,790
room to avoid the controversy but if you

00:09:58,050 --> 00:10:04,800
don't then anyway I think it's a really

00:10:02,790 --> 00:10:06,269
cool teacher which is good for script

00:10:04,800 --> 00:10:11,760
writing which is a big use for note

00:10:06,269 --> 00:10:14,459
where you just you know people use the

00:10:11,760 --> 00:10:16,709
noticing coyote is a lot because they're

00:10:14,459 --> 00:10:19,019
more convenient because you don't well

00:10:16,709 --> 00:10:20,519
historically you'd have to use callback

00:10:19,019 --> 00:10:22,950
so even with promises five things you

00:10:20,519 --> 00:10:24,329
just put everything in async function so

00:10:22,950 --> 00:10:26,490
if you just have a little script or you

00:10:24,329 --> 00:10:30,390
just want to be something you have to

00:10:26,490 --> 00:10:33,540
like break it in a main function and

00:10:30,390 --> 00:10:38,940
then like crawl it but instead what if

00:10:33,540 --> 00:10:43,829
you could just you just have a wait at

00:10:38,940 --> 00:10:46,410
the top level and with this proposal it

00:10:43,829 --> 00:10:49,980
works not just with modules is the main

00:10:46,410 --> 00:10:51,779
function but also modules and like the

00:10:49,980 --> 00:10:54,260
top-level module graph but it also works

00:10:51,779 --> 00:10:58,640
with modules that other things depend on

00:10:54,260 --> 00:11:01,100
so he's your module needs to do some

00:10:58,640 --> 00:11:04,970
initialization which might want to

00:11:01,100 --> 00:11:08,010
contact a database or meet some file

00:11:04,970 --> 00:11:10,230
then rather than you think I owe for

00:11:08,010 --> 00:11:13,920
that you could do anything I owe with

00:11:10,230 --> 00:11:16,730
promises using tough little weight and a

00:11:13,920 --> 00:11:19,290
really important feature is which ages

00:11:16,730 --> 00:11:21,329
as the potential to through startup time

00:11:19,290 --> 00:11:23,760
is then if you import multiple modules

00:11:21,329 --> 00:11:25,440
and they all have top-level await the

00:11:23,760 --> 00:11:29,970
their initialization code runs in

00:11:25,440 --> 00:11:32,100
parallel so if one module depends on

00:11:29,970 --> 00:11:33,209
another then that second one won't run

00:11:32,100 --> 00:11:34,770
until the first one is already

00:11:33,209 --> 00:11:36,390
initialized but if you view two

00:11:34,770 --> 00:11:38,520
different modules that each need to do

00:11:36,390 --> 00:11:40,949
their you know read their different

00:11:38,520 --> 00:11:42,720
files off of disks to configure on how

00:11:40,949 --> 00:11:47,160
to configure themselves or something

00:11:42,720 --> 00:11:50,399
then then those environments can proceed

00:11:47,160 --> 00:11:54,180
in parallel because it's based on a

00:11:50,399 --> 00:11:56,459
single ad and without that like there

00:11:54,180 --> 00:11:58,140
could be some conventions with promises

00:11:56,459 --> 00:11:59,880
like what each module returns a promise

00:11:58,140 --> 00:12:02,430
of the

00:11:59,880 --> 00:12:06,329
explored objects but that battle gets

00:12:02,430 --> 00:12:07,800
really messy and kind of unscalable if

00:12:06,329 --> 00:12:09,860
you have a big muggle graph that all

00:12:07,800 --> 00:12:13,019
depends on something that's easy

00:12:09,860 --> 00:12:21,899
so that's why this proposal is added to

00:12:13,019 --> 00:12:25,019
the core of the language yeah and so die

00:12:21,899 --> 00:12:29,550
guy Bedford and Myles and I collaborated

00:12:25,019 --> 00:12:37,620
on this sort of details of semantics and

00:12:29,550 --> 00:12:39,509
then also a bomb if a cube so here is

00:12:37,620 --> 00:13:24,290
any any thoughts on this proposal this

00:12:39,509 --> 00:13:45,449
promise face of that anybody he runs

00:13:24,290 --> 00:13:49,259
against it against are supposed to do a

00:13:45,449 --> 00:13:58,370
secret stuff and then the experts that

00:13:49,259 --> 00:14:05,130
might be using semantics you expecting I

00:13:58,370 --> 00:14:09,689
think particular hazard that you

00:14:05,130 --> 00:14:12,329
describe is present in this example here

00:14:09,689 --> 00:14:14,600
like in the absence of the way you can

00:14:12,329 --> 00:14:14,600
just

00:14:15,170 --> 00:14:59,519
yeah absence of capital away you can

00:14:17,760 --> 00:15:05,790
just you know this is obviously the way

00:14:59,519 --> 00:15:07,829
I would approach so I really I'm really

00:15:05,790 --> 00:15:09,980
happy to see this this positive response

00:15:07,829 --> 00:15:12,269
like working to use proposals been

00:15:09,980 --> 00:15:15,420
talking with with a lot of people who

00:15:12,269 --> 00:15:16,260
have these very different concerns and

00:15:15,420 --> 00:15:17,640
we're trying to work through the

00:15:16,260 --> 00:15:20,339
concerns that were seeing concerns about

00:15:17,640 --> 00:15:25,470
the execution order and I think you've

00:15:20,339 --> 00:15:28,110
landed on is well liked especially

00:15:25,470 --> 00:15:31,860
through guys where we've landed on a

00:15:28,110 --> 00:15:34,230
really I think that eatable and and my

00:15:31,860 --> 00:15:35,880
regular execution model that that just

00:15:34,230 --> 00:15:37,380
how long it was worth today there were

00:15:35,880 --> 00:15:40,230
some ideas for like a slightly more

00:15:37,380 --> 00:15:45,000
radical change that we decided not to go

00:15:40,230 --> 00:15:47,310
with and yeah I mean there's also like

00:15:45,000 --> 00:15:48,839
the CGS interoperability issue there's

00:15:47,310 --> 00:15:50,760
no way that you could require a module

00:15:48,839 --> 00:15:56,390
that has an awake in it because you

00:15:50,760 --> 00:15:56,390
can't like really execute JavaScript

00:16:00,980 --> 00:16:05,790
okay can people say a little more about

00:16:03,540 --> 00:16:08,600
all their positive feelings about this

00:16:05,790 --> 00:16:13,779
that I can pass them on

00:16:08,600 --> 00:16:19,160
I was very much used to the mid style

00:16:13,779 --> 00:16:21,259
and by that I mean yes I and as someone

00:16:19,160 --> 00:16:23,480
who's I began doing beginning to device

00:16:21,259 --> 00:16:26,060
posing at six I was seeing a lot of

00:16:23,480 --> 00:16:28,459
examples in the Internet of light weight

00:16:26,060 --> 00:16:30,170
and um all those examples did not

00:16:28,459 --> 00:16:33,680
include a sum function they're just like

00:16:30,170 --> 00:16:35,959
short and tiny close soon do you have an

00:16:33,680 --> 00:16:38,540
intubation function so from like a

00:16:35,959 --> 00:16:39,680
learner perspective it's nice because

00:16:38,540 --> 00:16:42,440
you're not going to get bitten by that

00:16:39,680 --> 00:16:44,029
of like what am I doing wrong

00:16:42,440 --> 00:16:46,940
I'm going to spend three hours figuring

00:16:44,029 --> 00:16:50,029
this out oh this doctor this is assuming

00:16:46,940 --> 00:16:53,360
validated and so from that was I think

00:16:50,029 --> 00:16:57,709
it's like you're making it easier for

00:16:53,360 --> 00:17:00,889
learners or beginners to use the

00:16:57,709 --> 00:17:03,769
platform and let other enemies

00:17:00,889 --> 00:17:05,630
yeah removing the weird barriers that's

00:17:03,769 --> 00:17:07,309
great I'm also I'm wondering also the

00:17:05,630 --> 00:17:09,470
people of running to use pieces where

00:17:07,309 --> 00:17:11,929
they have a module that's not at the top

00:17:09,470 --> 00:17:13,880
level of michael graph or wednesday one

00:17:11,929 --> 00:17:15,890
that is sort of deeper in the graph that

00:17:13,880 --> 00:17:19,600
other is depend on that would make sense

00:17:15,890 --> 00:17:22,579
to use this couple waiting for

00:17:19,600 --> 00:17:24,530
like I mentioned accessing configuration

00:17:22,579 --> 00:17:26,720
files or databases when starting up a

00:17:24,530 --> 00:17:28,640
mouthful but then other people say this

00:17:26,720 --> 00:17:30,140
is Angie hi you must not have it though

00:17:28,640 --> 00:17:41,150
because they're pretty people to be that

00:17:30,140 --> 00:17:43,159
sound yeah well no people who do it to

00:17:41,150 --> 00:17:48,860
some extent it will make claim code I

00:17:43,159 --> 00:17:50,240
need to be less essentially because so

00:17:48,860 --> 00:17:52,970
it's imposed a good thing and a bad

00:17:50,240 --> 00:17:54,890
thing at the same so it is kind of

00:17:52,970 --> 00:17:58,510
neutral in was saying what's the good

00:17:54,890 --> 00:18:01,190
part like the good part is that

00:17:58,510 --> 00:18:05,360
currently I see a lot of people creating

00:18:01,190 --> 00:18:08,270
boot LucasArts so essentially they they

00:18:05,360 --> 00:18:10,909
said they sign a module in denote thanks

00:18:08,270 --> 00:18:13,669
tiny amount of export within another

00:18:10,909 --> 00:18:15,760
function when while I guess they

00:18:13,669 --> 00:18:19,750
withhold it

00:18:15,760 --> 00:18:19,750
yeah don't look at me like that

00:18:19,820 --> 00:18:31,639
we award cousin Joseph level of weight

00:18:27,049 --> 00:18:34,070
on a module would solve that type of a

00:18:31,639 --> 00:18:38,299
card even though it's an anti-pattern

00:18:34,070 --> 00:18:40,700
anyway so they should be adding on a

00:18:38,299 --> 00:18:43,909
secret of a single bootstrap page for

00:18:40,700 --> 00:18:45,080
their application right okay that's what

00:18:43,909 --> 00:18:49,039
they should be doing

00:18:45,080 --> 00:18:51,979
however a synchronous is hard and people

00:18:49,039 --> 00:18:54,590
coming on no they don't have the

00:18:51,979 --> 00:18:58,849
knowledge of setting up the project in a

00:18:54,590 --> 00:19:01,369
way and that is the fetish arrival okay

00:18:58,849 --> 00:19:03,769
it's very easy set up the project in a

00:19:01,369 --> 00:19:07,519
way that makes you do like installation

00:19:03,769 --> 00:19:09,979
in the notes oh wait wait you think Papa

00:19:07,519 --> 00:19:12,169
boolie provides like acceptable defaults

00:19:09,979 --> 00:19:14,710
you have make it eventually migrated to

00:19:12,169 --> 00:19:18,559
yes yes thank you

00:19:14,710 --> 00:19:21,019
I can I can bring down a paragraph for

00:19:18,559 --> 00:19:22,970
you that makes really helpful is you can

00:19:21,019 --> 00:19:24,289
file an issue on the repository with

00:19:22,970 --> 00:19:28,009
that paragraph that would be the best

00:19:24,289 --> 00:19:31,729
way to get it out to people yeah yes you

00:19:28,009 --> 00:19:35,889
can't see but GC github.com sighs tc39

00:19:31,729 --> 00:19:35,889
slash proposal top-level away

00:19:46,809 --> 00:19:51,940
their implications for a palpable wave

00:19:52,360 --> 00:19:57,740
so that's it that's a really good

00:19:54,529 --> 00:20:00,710
question any rebels need to have more

00:19:57,740 --> 00:20:02,659
changes than just top local aid induce

00:20:00,710 --> 00:20:05,539
you to topically you also want to be

00:20:02,659 --> 00:20:09,890
able to like to redefine call security

00:20:05,539 --> 00:20:11,330
levels and you want like something in

00:20:09,890 --> 00:20:13,460
curly brackets if you want them to be

00:20:11,330 --> 00:20:17,600
treated as an object literal rather than

00:20:13,460 --> 00:20:23,179
just well with another times when you

00:20:17,600 --> 00:20:26,510
one who could use a block and there so

00:20:23,179 --> 00:20:31,279
there's there's a proposal for making

00:20:26,510 --> 00:20:33,440
different grammar for rebels yeah it

00:20:31,279 --> 00:20:37,570
probably obviously needs to be supported

00:20:33,440 --> 00:20:40,370
in this misconduct this proposal was

00:20:37,570 --> 00:20:42,799
started by and Bradley Faria so I can

00:20:40,370 --> 00:20:45,889
get a good job of it and they confuse a

00:20:42,799 --> 00:20:49,490
co-chair me if you want to get involved

00:20:45,889 --> 00:20:51,080
in pushing forward the state of the art

00:20:49,490 --> 00:20:52,970
what you can do in the new Breville and

00:20:51,080 --> 00:20:55,370
we concluded this was common across the

00:20:52,970 --> 00:20:56,809
ecosystem because everybody everyone

00:20:55,370 --> 00:20:58,460
I've talked to agrees make sense to be

00:20:56,809 --> 00:21:04,149
comment across the different places

00:20:58,460 --> 00:21:04,149
including JavaScript what the ripple is

00:21:04,720 --> 00:21:09,559
let's be in touch I wrote I wrote a

00:21:07,880 --> 00:21:11,570
summary of this whole thing that I could

00:21:09,559 --> 00:21:14,990
send to somebody who's interested in it

00:21:11,570 --> 00:21:21,220
be more involving so yeah we send it to

00:21:14,990 --> 00:21:21,220
you any other operations or thoughts

00:21:22,480 --> 00:21:34,669
yeah wondering like little like

00:21:29,539 --> 00:21:37,730
transforms like taking all of my you

00:21:34,669 --> 00:21:49,130
know like a scene can be separated too

00:21:37,730 --> 00:21:51,320
late any change because when you have a

00:21:49,130 --> 00:21:52,820
weight in the top level what that means

00:21:51,320 --> 00:21:56,600
is that things that depend on your

00:21:52,820 --> 00:21:58,730
modules will wait for them but if you

00:21:56,600 --> 00:21:59,000
have a nice and easy it's just going to

00:21:58,730 --> 00:22:00,800
go

00:21:59,000 --> 00:22:03,080
and basically like spun off another

00:22:00,800 --> 00:22:06,470
trade and run the background so you may

00:22:03,080 --> 00:22:08,810
want that I don't know if the grammar

00:22:06,470 --> 00:22:11,240
syntax is expressing this in a very

00:22:08,810 --> 00:22:12,710
clear way but that's that's like how it

00:22:11,240 --> 00:22:14,660
all works out in JavaScript like if you

00:22:12,710 --> 00:22:17,120
make a promise you just sort of drop it

00:22:14,660 --> 00:22:18,350
on the floor like okay great you've run

00:22:17,120 --> 00:22:20,600
something maybe it's going to have a

00:22:18,350 --> 00:22:23,600
side effect like in the background and

00:22:20,600 --> 00:22:26,690
if you await it then it's going to you

00:22:23,600 --> 00:22:31,070
know not let the outracing function

00:22:26,690 --> 00:22:54,470
resolved until until that happens so

00:22:31,070 --> 00:22:55,580
that's sort of what type of yeah that's

00:22:54,470 --> 00:22:58,850
a really good point

00:22:55,580 --> 00:22:59,300
can I convince you to take out the

00:22:58,850 --> 00:23:02,000
region

00:22:59,300 --> 00:23:03,440
yeah great thank you so much yeah if

00:23:02,000 --> 00:23:06,020
anybody wants to get involved to be

00:23:03,440 --> 00:23:07,340
helping out with educational materials

00:23:06,020 --> 00:23:11,930
for this I think this is going to be

00:23:07,340 --> 00:23:14,240
really important and helpful but also

00:23:11,930 --> 00:23:16,160
say with the other ones but I mean we

00:23:14,240 --> 00:23:19,840
press it's like an expert feature in top

00:23:16,160 --> 00:23:19,840
of the wait is like everyone feature

00:23:24,550 --> 00:23:27,710
[Music]

00:23:31,660 --> 00:23:42,860
probably well the temporal proposal this

00:23:40,130 --> 00:23:47,360
proposal has a mute date except one

00:23:42,860 --> 00:23:48,680
that's like good it's a little different

00:23:47,360 --> 00:23:51,920
from something like moment which is

00:23:48,680 --> 00:23:58,370
based around one big tape so it is

00:23:51,920 --> 00:24:00,980
beautiful which is different there's

00:23:58,370 --> 00:24:03,800
different types when you have different

00:24:00,980 --> 00:24:07,010
pieces of data so so you have just a

00:24:03,800 --> 00:24:10,750
gene but you don't have a time so we're

00:24:07,010 --> 00:24:12,300
talking about like May 29 to 2019

00:24:10,750 --> 00:24:14,120
talented

00:24:12,300 --> 00:24:17,130
sometimes in applications programming

00:24:14,120 --> 00:24:18,990
with date or with moment you could say

00:24:17,130 --> 00:24:21,480
like oh yeah like midnight I guess

00:24:18,990 --> 00:24:23,430
because I don't have a time with

00:24:21,480 --> 00:24:25,620
temporal it's all based on a data model

00:24:23,430 --> 00:24:27,780
where based on the information you have

00:24:25,620 --> 00:24:32,220
you choose the appropriate types so for

00:24:27,780 --> 00:24:39,780
that I'm going to choose activity and

00:24:32,220 --> 00:24:43,020
you have if you have a like a time that

00:24:39,780 --> 00:24:44,670
happened a point in in global time then

00:24:43,020 --> 00:24:48,390
you would use an instant sort of on the

00:24:44,670 --> 00:24:49,860
other end of the spectrum where instant

00:24:48,390 --> 00:24:51,000
doesn't have a time zone you can also

00:24:49,860 --> 00:24:52,740
have something that does have a time

00:24:51,000 --> 00:24:55,140
zone if you compare this with something

00:24:52,740 --> 00:24:56,940
like JavaScript JavaScript dates data

00:24:55,140 --> 00:24:59,040
model is just entirely grocery to the

00:24:56,940 --> 00:25:02,490
kids it doesn't have a time zone

00:24:59,040 --> 00:25:05,370
eating Rebennack has things that act on

00:25:02,490 --> 00:25:07,920
behalf of the do calculations based on

00:25:05,370 --> 00:25:12,780
Santa based on whatever these sort of

00:25:07,920 --> 00:25:13,380
local time zone is which is just just

00:25:12,780 --> 00:25:14,910
really weird

00:25:13,380 --> 00:25:16,320
and then Wilmington crews on that by

00:25:14,910 --> 00:25:19,020
having a data model that's basically

00:25:16,320 --> 00:25:20,990
like zones date time where you have time

00:25:19,020 --> 00:25:24,270
on the global time line and it times up

00:25:20,990 --> 00:25:27,060
but this still lets you fall into

00:25:24,270 --> 00:25:31,020
certain logic errors where you might

00:25:27,060 --> 00:25:36,330
found that by a day because you're

00:25:31,020 --> 00:25:37,440
looking at the wrong midnight anyway so

00:25:36,330 --> 00:25:45,450
in here you get to provide the

00:25:37,440 --> 00:25:48,510
information that you have it has we have

00:25:45,450 --> 00:25:51,840
a readme and a polyfill and it's it's

00:25:48,510 --> 00:25:54,420
each June we're looking supposing it as

00:25:51,840 --> 00:25:57,810
a built-in module we need to be like

00:25:54,420 --> 00:26:11,310
history go in jump world that would

00:25:57,810 --> 00:26:13,380
explore these different classes so

00:26:11,310 --> 00:26:16,470
here's really detailed documentation

00:26:13,380 --> 00:26:18,030
that field humble wrote up and be great

00:26:16,470 --> 00:26:22,410
to have your your feedback on this

00:26:18,030 --> 00:26:23,390
proposal yeah can't overlook more about

00:26:22,410 --> 00:26:27,290
do

00:26:23,390 --> 00:26:31,330
modules like is there any existing ones

00:26:27,290 --> 00:26:36,710
or like are there some rules

00:26:31,330 --> 00:26:41,000
thanks for you teachers what do you mean

00:26:36,710 --> 00:26:43,670
by rules like if you just introduce this

00:26:41,000 --> 00:26:48,520
as building modules then that I don't

00:26:43,670 --> 00:26:48,520
expect that other teachers in the future

00:26:50,559 --> 00:26:57,830
yeah so are there some kind lines of

00:26:54,080 --> 00:27:00,020
being discussed for look at building

00:26:57,830 --> 00:27:02,299
models would be and there are guidelines

00:27:00,020 --> 00:27:07,400
being discussed I don't think this is

00:27:02,299 --> 00:27:13,460
great right of about it right now and so

00:27:07,400 --> 00:27:15,470
this is the the home from many people is

00:27:13,460 --> 00:27:19,640
that rather than adding properties to

00:27:15,470 --> 00:27:22,760
the global objects like we just put

00:27:19,640 --> 00:27:24,880
saying okay so the instant some need

00:27:22,760 --> 00:27:27,559
time okay they're all properties roll up

00:27:24,880 --> 00:27:31,669
just like URL and text encoder and date

00:27:27,559 --> 00:27:33,770
and spring eventually we might write

00:27:31,669 --> 00:27:36,410
into problems due to that with

00:27:33,770 --> 00:27:41,030
compatibility because it overlaps with

00:27:36,410 --> 00:27:44,720
somebody else's usage it could be

00:27:41,030 --> 00:27:47,240
confusing but also it's you know

00:27:44,720 --> 00:27:49,400
JavaScript developers are importing

00:27:47,240 --> 00:27:51,049
things from you know India and they're

00:27:49,400 --> 00:27:53,270
they're requiring things and people are

00:27:51,049 --> 00:27:55,400
using this they're gonna make syntax of

00:27:53,270 --> 00:27:58,460
modules when we talk about building

00:27:55,400 --> 00:28:00,799
models in tc39 it's always something

00:27:58,460 --> 00:28:04,580
about yes yeah it's not about you know

00:28:00,799 --> 00:28:07,330
it's not about CGS were only meaning the

00:28:04,580 --> 00:28:13,190
native modules would be import statement

00:28:07,330 --> 00:28:15,140
and the hope from many of us is that new

00:28:13,190 --> 00:28:16,660
features would be additive modules this

00:28:15,140 --> 00:28:21,799
is something that might have been

00:28:16,660 --> 00:28:23,690
agitating for a while and we haven't

00:28:21,799 --> 00:28:25,280
even really made up the decision yeah so

00:28:23,690 --> 00:28:26,809
there are various different ideas being

00:28:25,280 --> 00:28:29,360
turn around about how building modules

00:28:26,809 --> 00:28:32,510
for work Apple has a proposal that they

00:28:29,360 --> 00:28:35,210
would all be they're frozen which is

00:28:32,510 --> 00:28:35,820
interesting to D product import Maps

00:28:35,210 --> 00:28:38,070
which is

00:28:35,820 --> 00:28:41,269
those will be discussed at the WIC key

00:28:38,070 --> 00:28:46,799
which is a pretty broad by amicus play

00:28:41,269 --> 00:28:49,739
for allowing Polly filling of built-in

00:28:46,799 --> 00:28:51,359
models and allowing sort of this extra

00:28:49,739 --> 00:28:53,909
layer in direction when we resolve in

00:28:51,359 --> 00:28:56,429
your module specifier resolving a model

00:28:53,909 --> 00:28:58,350
specifier what I mean by that is when

00:28:56,429 --> 00:29:00,539
you see important instance strain

00:28:58,350 --> 00:29:05,340
there's something that translates from

00:29:00,539 --> 00:29:09,799
that into like you know the filing or

00:29:05,340 --> 00:29:12,029
the web to figure out what you to fetch

00:29:09,799 --> 00:29:17,399
to figure out where to get the number

00:29:12,029 --> 00:29:19,320
from so import Maps lets you add for

00:29:17,399 --> 00:29:21,210
each one of those club a clicks so you

00:29:19,320 --> 00:29:23,309
can say for a built in mouth old in that

00:29:21,210 --> 00:29:25,440
building module doesn't exist actually

00:29:23,309 --> 00:29:28,529
resolve it to this other thing that has

00:29:25,440 --> 00:29:31,559
the or even dis exist actually we're

00:29:28,529 --> 00:29:36,479
talking to this thing that will replace

00:29:31,559 --> 00:29:40,849
it and take it as something else and to

00:29:36,479 --> 00:29:43,739
that later stories on top of JavaScript

00:29:40,849 --> 00:29:49,379
I'd like us to consider using live ideal

00:29:43,739 --> 00:29:58,710
for building models my heel where lady

00:29:49,379 --> 00:30:00,690
will also lacks a getting started a what

00:29:58,710 --> 00:30:04,320
my heel is a special language you need

00:30:00,690 --> 00:30:07,499
to use to describe interfaces most web

00:30:04,320 --> 00:30:10,529
api is not JavaScript API is use web

00:30:07,499 --> 00:30:13,379
ideal in this presentation this is for

00:30:10,529 --> 00:30:15,090
example text encoder and URL are in

00:30:13,379 --> 00:30:16,649
their specification they include it's

00:30:15,090 --> 00:30:21,359
sort of like a header file for women you

00:30:16,649 --> 00:30:23,039
so you could think of this as the DTS

00:30:21,359 --> 00:30:27,509
file but it's a little different from

00:30:23,039 --> 00:30:29,759
that because so here instead of classic

00:30:27,509 --> 00:30:35,039
says interface instead of extends it

00:30:29,759 --> 00:30:38,059
says colon and then when you have like a

00:30:35,039 --> 00:30:41,519
getter set up there it says attribute

00:30:38,059 --> 00:30:43,980
you need to have you know methods those

00:30:41,519 --> 00:30:49,519
are called operations anyway it's all

00:30:43,980 --> 00:30:53,519
comes from like core web its historical

00:30:49,519 --> 00:30:58,889
yeah oMG it's many when we fight score

00:30:53,519 --> 00:31:16,950
by what score but I don't know so I

00:30:58,889 --> 00:31:21,090
think they could be transcribed across

00:31:16,950 --> 00:31:23,309
computers and anyway we sort of walked

00:31:21,090 --> 00:31:26,250
back from that I think it's good to

00:31:23,309 --> 00:31:29,879
think about network boundary uses that

00:31:26,250 --> 00:31:31,230
was like one of the takeaways but anyway

00:31:29,879 --> 00:31:33,149
one thing that they had was this cool

00:31:31,230 --> 00:31:35,129
language to describe interfaces and so

00:31:33,149 --> 00:31:37,169
this could they said we have a class

00:31:35,129 --> 00:31:40,559
with these sort of methods and fields

00:31:37,169 --> 00:31:42,240
and it's really useful because when you

00:31:40,559 --> 00:31:45,629
have a method for example like this this

00:31:42,240 --> 00:31:46,919
draw rectangle it takes these doubles ok

00:31:45,629 --> 00:31:49,370
it's pretty weird that it says double it

00:31:46,919 --> 00:31:51,779
should really show you a number but

00:31:49,370 --> 00:31:54,139
double basically just means number it's

00:31:51,779 --> 00:31:57,720
just the funny way to what am i doing

00:31:54,139 --> 00:32:01,309
and so in JavaScript when we have a

00:31:57,720 --> 00:32:03,870
function in the Dom spectator libraries

00:32:01,309 --> 00:32:06,539
there's actually a version that happens

00:32:03,870 --> 00:32:09,509
so if you pass in a string where it says

00:32:06,539 --> 00:32:12,779
double it'll cast this string to a

00:32:09,509 --> 00:32:14,399
number so it'll call likes you as if

00:32:12,779 --> 00:32:18,570
you're calling the number constructor on

00:32:14,399 --> 00:32:21,059
the string so it'll like harstad cross

00:32:18,570 --> 00:32:26,250
the stream and in with my heels is these

00:32:21,059 --> 00:32:28,080
conversions are the semantics of the

00:32:26,250 --> 00:32:30,210
idea so it's responsible for adding

00:32:28,080 --> 00:32:32,669
these type text so giddy them for an

00:32:30,210 --> 00:32:35,490
exemption or if it convert one value to

00:32:32,669 --> 00:32:37,950
another value and this is really useful

00:32:35,490 --> 00:32:41,399
if you get to know the core there's a

00:32:37,950 --> 00:32:44,460
lot of checks and ghasts that happen and

00:32:41,399 --> 00:32:46,350
a tree points to functions and I think

00:32:44,460 --> 00:32:49,590
historically they're right in security

00:32:46,350 --> 00:32:52,080
issues based on Jake's not happening I

00:32:49,590 --> 00:32:54,149
don't know about the details anyway or

00:32:52,080 --> 00:32:58,230
at least the checks involve some

00:32:54,149 --> 00:33:00,269
overtime and so I think this is a nice

00:32:58,230 --> 00:33:02,490
rigorous way to specify eight guys and

00:33:00,269 --> 00:33:05,309
so I want to look at

00:33:02,490 --> 00:33:07,050
whether we use this or you know the new

00:33:05,309 --> 00:33:08,820
generation of the JavaScript standard

00:33:07,050 --> 00:33:12,450
why are you adding a lot more things to

00:33:08,820 --> 00:33:14,640
get good quality I'm wondering if it

00:33:12,450 --> 00:33:15,870
makes sense for node also and use their

00:33:14,640 --> 00:33:19,640
changes that we can because we're my

00:33:15,870 --> 00:33:19,640
heels make it more interesting

00:33:20,059 --> 00:33:28,290
poor verb open JSF projects and Emily so

00:33:25,590 --> 00:33:29,970
like Jase Tom is based on parsing these

00:33:28,290 --> 00:33:32,400
parts of the specification and

00:33:29,970 --> 00:33:40,770
automatically generating JavaScript code

00:33:32,400 --> 00:33:49,770
which does the same thing I nee have any

00:33:40,770 --> 00:33:53,450
comments or questions about using one

00:33:49,770 --> 00:33:57,929
idea in court and wondering if people

00:33:53,450 --> 00:34:01,880
always generate ad interfaces you know

00:33:57,929 --> 00:34:05,910
where's something for example dad like

00:34:01,880 --> 00:34:10,200
JSON or other reference emulation or

00:34:05,910 --> 00:34:16,919
extender uses they have a generator that

00:34:10,200 --> 00:34:19,740
like party with ideal you know files and

00:34:16,919 --> 00:34:24,030
then like generate a bunch of Java file

00:34:19,740 --> 00:34:28,050
that you know implement like generative

00:34:24,030 --> 00:34:30,929
interfaces well in the invitation for

00:34:28,050 --> 00:34:33,990
the implementer each like actually fill

00:34:30,929 --> 00:34:40,530
in I'm wondering if people would be

00:34:33,990 --> 00:34:46,440
comfortable with using this for new web

00:34:40,530 --> 00:34:50,879
api inclusion or like converted existing

00:34:46,440 --> 00:34:55,710
web api invitations to it for example

00:34:50,879 --> 00:34:59,010
like converting the URL in vision to use

00:34:55,710 --> 00:35:01,500
this generated thing instead of like

00:34:59,010 --> 00:35:05,580
curly one we are like him

00:35:01,500 --> 00:35:09,270
writing the classes in the you anyhow

00:35:05,580 --> 00:35:15,320
mr. fusion and it's nice there's some

00:35:09,270 --> 00:35:15,320
holes there so just

00:35:22,520 --> 00:35:30,299
yeah I'm really excited about this this

00:35:26,069 --> 00:35:31,559
effort from Joey you know browsers went

00:35:30,299 --> 00:35:34,559
through a similar evolution where they

00:35:31,559 --> 00:35:36,150
used to just have a hand written in C++

00:35:34,559 --> 00:35:38,760
thing that kind of corresponding to the

00:35:36,150 --> 00:35:41,069
specification and then everybody figured

00:35:38,760 --> 00:36:46,440
out I don't know maybe almost 10 years

00:35:41,069 --> 00:36:48,690
ago now it makes more sense to okay so

00:36:46,440 --> 00:36:51,809
I'm like in the future would people be

00:36:48,690 --> 00:36:53,760
interested in maybe remotely having a

00:36:51,809 --> 00:36:55,200
conversation like this because for me

00:36:53,760 --> 00:37:05,010
this was really interesting to hear all

00:36:55,200 --> 00:37:06,869
your all your thoughts yes okay cool I

00:37:05,010 --> 00:37:09,349
guess I guess one thing is worth

00:37:06,869 --> 00:37:15,540
clarifying came up in the discussion

00:37:09,349 --> 00:37:17,400
never hearing no Papa lovely really

00:37:15,540 --> 00:37:19,440
targeting the module goal it's not

00:37:17,400 --> 00:37:22,950
targeting instrumental so that means

00:37:19,440 --> 00:37:27,000
commonjs but not yet it would only be

00:37:22,950 --> 00:37:29,430
extra potholes that taco today it

00:37:27,000 --> 00:37:32,700
doesn't mean that app is

00:37:29,430 --> 00:37:33,900
tc39 we couldn't in the future tried to

00:37:32,700 --> 00:38:15,840
standardize it in script folder

00:37:33,900 --> 00:38:51,000
alternatively that engine could wait was

00:38:15,840 --> 00:38:54,180
anyone here like that are not capable of

00:38:51,000 --> 00:38:59,400
being recreated in Google today that

00:38:54,180 --> 00:39:02,100
you'll be able to do yeah I have this

00:38:59,400 --> 00:39:04,140
like asynchronous work but I want like

00:39:02,100 --> 00:39:07,020
levers that after that work exported as

00:39:04,140 --> 00:39:09,270
a simple but that is the pattern that it

00:39:07,020 --> 00:39:12,180
will you make it possible that is not

00:39:09,270 --> 00:39:14,160
currently possible and mono goal that we

00:39:12,180 --> 00:39:16,170
are used to encounter Deus and use that

00:39:14,160 --> 00:39:18,810
pattern a lot on the server-side

00:39:16,170 --> 00:39:21,600
JavaScript that we will lose as people

00:39:18,810 --> 00:39:25,230
transition to modules but visual of us

00:39:21,600 --> 00:39:29,340
routine a lot of those parts yeah I'm

00:39:25,230 --> 00:39:30,750
really excited about that aspect of it I

00:39:29,340 --> 00:39:32,940
want to encourage people whatever

00:39:30,750 --> 00:39:35,040
possible to still use the import

00:39:32,940 --> 00:39:36,870
statements and do not just switch

00:39:35,040 --> 00:39:40,440
everything using tableau deloitte with

00:39:36,870 --> 00:39:43,730
import if only because it's it's more

00:39:40,440 --> 00:39:46,760
federal parallelizable on start you can

00:39:43,730 --> 00:39:48,200
see further ahead in time the agent can

00:39:46,760 --> 00:39:50,119
see further any time which molecules

00:39:48,200 --> 00:39:53,540
you're using and it can initiate those

00:39:50,119 --> 00:39:57,200
like file reads and generation a bit

00:39:53,540 --> 00:40:00,190
earlier so and it's more safely

00:39:57,200 --> 00:40:02,270
analyzable by cools so please don't just

00:40:00,190 --> 00:40:06,680
start using couple of the wait for

00:40:02,270 --> 00:40:08,660
Waverly I don't know if anybody has

00:40:06,680 --> 00:40:11,240
suggestions for how to exacting at that

00:40:08,660 --> 00:40:14,450
because this is I are people gonna

00:40:11,240 --> 00:40:16,369
listen to battle pike I don't see why

00:40:14,450 --> 00:40:19,220
they should I don't know why they

00:40:16,369 --> 00:40:20,599
wouldn't want to do that but people have

00:40:19,220 --> 00:40:23,599
frequently get this misunderstanding

00:40:20,599 --> 00:41:01,700
about it like that means the lesions are

00:40:23,599 --> 00:41:05,450
clean I know everyone around the

00:41:01,700 --> 00:41:09,010
education around like you know if Y

00:41:05,450 --> 00:41:12,349
maybe should automatically just change

00:41:09,010 --> 00:41:14,270
so I think there's a lot of opportunity

00:41:12,349 --> 00:41:18,319
to do a lot of Education around modules

00:41:14,270 --> 00:41:21,109
and I mean if you guys want to

00:41:18,319 --> 00:41:25,150
collaborate on projects that's like I

00:41:21,109 --> 00:41:29,390
don't know modules dev like that like my

00:41:25,150 --> 00:41:39,650
like give it to us here now I want it

00:41:29,390 --> 00:41:43,250
first now so easy just having a simple

00:41:39,650 --> 00:41:46,420
sad like one page like that like like a

00:41:43,250 --> 00:41:49,819
like a fun explainer that's super low

00:41:46,420 --> 00:41:52,339
like most lawyers because I think

00:41:49,819 --> 00:41:54,920
there's a lot of misconceptions and I

00:41:52,339 --> 00:41:56,820
think like hearing like learning about

00:41:54,920 --> 00:41:59,940
this stuff in a way that

00:41:56,820 --> 00:42:04,050
it's kind of like no contributor of food

00:41:59,940 --> 00:42:05,520
right and I like folks on the PC or like

00:42:04,050 --> 00:42:07,830
the know community folks that are

00:42:05,520 --> 00:42:11,070
actually forcing on these things would

00:42:07,830 --> 00:42:12,890
be great like and very good for like the

00:42:11,070 --> 00:42:15,600
education and the ecosystem as a whole

00:42:12,890 --> 00:42:17,490
and you know having examples and you

00:42:15,600 --> 00:42:19,740
know and having a place to also funnel

00:42:17,490 --> 00:42:22,020
questions I'm home the community around

00:42:19,740 --> 00:42:24,390
like what's confusing and then like

00:42:22,020 --> 00:42:26,280
extending out the educational aspect of

00:42:24,390 --> 00:42:31,640
the homepage site with like videos

00:42:26,280 --> 00:42:31,640
and/or content my project

00:42:35,870 --> 00:42:45,330
let me say by that idea I knew you but

00:42:43,680 --> 00:42:47,240
yeah so I don't know maybe we can I

00:42:45,330 --> 00:42:49,380
guess what would be the best place to

00:42:47,240 --> 00:42:59,130
should just find that issue of the

00:42:49,380 --> 00:43:01,440
summit Rico on this and there you know

00:42:59,130 --> 00:43:04,820
thanks everybody for for this really

00:43:01,440 --> 00:43:04,820
interesting discussion and

00:43:05,240 --> 00:43:08,560

YouTube URL: https://www.youtube.com/watch?v=bJbEhOzaKvM


