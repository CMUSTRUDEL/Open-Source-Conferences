Title: AMA on Node js Core Subsystems
Publication date: 2019-06-04
Playlist: OpenJS Foundation Collaborator Summit, Berlin, May 2019
Description: 
	OpenJS Foundation Collaborator Summit, Berlin, 2019

More details: https://github.com/nodejs/summit/issues/154
Captions: 
	00:00:01,580 --> 00:00:10,170
books am a fork or subsystems but every

00:00:06,420 --> 00:00:16,470
now thank you joining for suggesting

00:00:10,170 --> 00:00:18,300
that we do this breathing productive so

00:00:16,470 --> 00:00:20,900
this is gonna be the format for it we

00:00:18,300 --> 00:00:24,090
hit up a bunch of folks a bunch of folks

00:00:20,900 --> 00:00:28,019
volunteered in the issue to introduce a

00:00:24,090 --> 00:00:34,140
sub system and then we'll open up to

00:00:28,019 --> 00:00:35,760
questions so Luna will get started I

00:00:34,140 --> 00:00:38,040
also want to say if you are familiar

00:00:35,760 --> 00:00:41,520
with the system or you've worked on it

00:00:38,040 --> 00:00:43,260
feel free to answer the question even if

00:00:41,520 --> 00:00:46,340
maybe that's subsystem is mentioned here

00:00:43,260 --> 00:00:46,340
attached to someone else okay

00:00:48,440 --> 00:00:54,570
you can see everything but there is to

00:00:51,260 --> 00:00:58,230
Anatoly would you like to introduce a

00:00:54,570 --> 00:01:08,119
couple everyone Anatoly

00:00:58,230 --> 00:01:10,830
i CSC primarily these systems so mostly

00:01:08,119 --> 00:01:14,820
able to answer questions related to HTTP

00:01:10,830 --> 00:01:17,700
to ability which is basically the layer

00:01:14,820 --> 00:01:20,600
that allows you to YouTube servers the

00:01:17,700 --> 00:01:28,979
same way you would run HTTP one servers

00:01:20,600 --> 00:01:30,750
also familiar with timers process really

00:01:28,979 --> 00:01:32,790
when I'm familiar with this task queues

00:01:30,750 --> 00:01:36,659
so if you didn't know that stick works

00:01:32,790 --> 00:01:38,250
if you're interested in how you might

00:01:36,659 --> 00:01:41,009
protest works if you're interested in

00:01:38,250 --> 00:01:43,590
any of those kind of finer details of

00:01:41,009 --> 00:01:46,829
how the new functions

00:01:43,590 --> 00:01:46,829
[Music]

00:02:15,560 --> 00:02:18,840
[Music]

00:02:45,600 --> 00:02:48,740
[Music]

00:03:35,580 --> 00:03:38,769
[Music]

00:03:58,500 --> 00:04:07,380
as you might know I am with some other

00:04:03,930 --> 00:04:15,570
folks no strings which is probably the

00:04:07,380 --> 00:04:22,430
most legacy piece very nice you know

00:04:15,570 --> 00:04:22,430
they yes quest of trying to make this

00:04:23,330 --> 00:04:38,750
you know you know so we are changing

00:04:40,170 --> 00:04:43,230
[Music]

00:04:45,680 --> 00:06:13,229
because of the so yeah so from stressing

00:06:07,159 --> 00:06:18,620
when from performance especially like

00:06:13,229 --> 00:06:18,620
which was like super slow when you are

00:06:18,650 --> 00:06:29,909
well that's not the case anymore and I'm

00:06:23,880 --> 00:06:32,800
trying to improve the output also when

00:06:29,909 --> 00:06:36,129
you put something weird in there so

00:06:32,800 --> 00:06:37,840
can pretty much reconstruct a lot of

00:06:36,129 --> 00:06:42,879
information no matter how you

00:06:37,840 --> 00:06:45,669
manipulated your objects and yeah buffer

00:06:42,879 --> 00:06:47,800
okay I don't know that Maeda site

00:06:45,669 --> 00:06:49,300
pretty much at all what they did is like

00:06:47,800 --> 00:06:53,050
all the beat right fractions at some

00:06:49,300 --> 00:06:55,210
point to replace them have like first

00:06:53,050 --> 00:07:00,240
implementation was super basic binary

00:06:55,210 --> 00:07:00,240
stuff you don't want to look at it and

00:07:03,889 --> 00:07:13,379
yeah then assert well I also pretty much

00:07:08,669 --> 00:07:15,090
rewrote that and it has a decent

00:07:13,379 --> 00:07:18,330
comparison function in there which

00:07:15,090 --> 00:07:20,939
became a util is deep strict equal so

00:07:18,330 --> 00:07:23,669
this the functionality to compared to

00:07:20,939 --> 00:07:31,050
different objects and works pretty well

00:07:23,669 --> 00:07:33,990
then yes nicer way twister throws better

00:07:31,050 --> 00:07:36,990
area at all stuff like that search was

00:07:33,990 --> 00:07:39,810
pretty horrible for a lot of time and

00:07:36,990 --> 00:07:41,580
was like don't use this stuff but since

00:07:39,810 --> 00:07:44,039
it's in milk or I stopped working that

00:07:41,580 --> 00:07:48,270
especially also be used for obviously

00:07:44,039 --> 00:07:50,460
for everything testing and and I think

00:07:48,270 --> 00:07:54,529
now it's pretty usable at least it's

00:07:50,460 --> 00:07:56,189
still it could still improve furna but

00:07:54,529 --> 00:07:57,810
that's a different story

00:07:56,189 --> 00:08:01,370
yeah Red Bull I would say there's

00:07:57,810 --> 00:08:06,300
probably the worst cook in whole milk or

00:08:01,370 --> 00:08:08,699
and the answer difficult to work with it

00:08:06,300 --> 00:08:25,020
at all you use it from blink while

00:08:08,699 --> 00:08:30,500
working on the park because pass so the

00:08:25,020 --> 00:08:30,500
pencil module is very basic code again

00:08:37,130 --> 00:08:44,550
you don't want to look at the code what

00:08:40,649 --> 00:08:46,410
time it's just it's fast and in this

00:08:44,550 --> 00:08:48,300
case the code is also written well it's

00:08:46,410 --> 00:08:51,649
just more complicated because it's very

00:08:48,300 --> 00:08:54,240
basic to be so fast

00:08:51,649 --> 00:08:55,920
again benchmarks anything that has to do

00:08:54,240 --> 00:08:59,420
is that a core I do a lot of performance

00:08:55,920 --> 00:08:59,420
optimizations so

00:09:00,880 --> 00:09:10,270
yes two beers two beers I am two Bs I

00:09:08,050 --> 00:09:12,840
must work on Krypton probably one of the

00:09:10,270 --> 00:09:16,470
least popular modules and not four but

00:09:12,840 --> 00:09:20,890
necessarily mostly because of

00:09:16,470 --> 00:09:23,860
electromagnets its libera salva no not

00:09:20,890 --> 00:09:29,950
really sure so we do the building

00:09:23,860 --> 00:09:34,930
through the model and it is your modules

00:09:29,950 --> 00:09:40,810
and we do try to support you everything

00:09:34,930 --> 00:09:42,430
on the table mr. which we depend on does

00:09:40,810 --> 00:09:48,220
not really support what I'm used to know

00:09:42,430 --> 00:09:57,280
so we have to try to so I did a lot of

00:09:48,220 --> 00:09:58,840
features to the years promise that so

00:09:57,280 --> 00:10:01,710
hopefully I can answer any questions you

00:09:58,840 --> 00:10:01,710
have about the crater water

00:10:03,480 --> 00:10:20,740
super no II understand hey there I

00:10:11,190 --> 00:10:27,190
worked in the question if you don't know

00:10:20,740 --> 00:10:29,320
cluster is don't use it not just it none

00:10:27,190 --> 00:10:32,770
better experiences come find me some

00:10:29,320 --> 00:10:35,950
time talk to and lay they have an organ

00:10:32,770 --> 00:10:38,830
tell us punch I had it was this week

00:10:35,950 --> 00:10:43,330
shigeki and much other people TLS one

00:10:38,830 --> 00:10:45,940
three support yeah and I have anything

00:10:43,330 --> 00:10:49,290
but an encyclopedic memory so you can

00:10:45,940 --> 00:10:49,290
ask me anything I don't see anything

00:10:50,710 --> 00:11:48,510
so we have to you because they don't

00:11:52,750 --> 00:11:55,889
[Music]

00:11:59,280 --> 00:12:08,080
features we try to keep it as

00:12:06,610 --> 00:12:11,470
comfortable as possible so we added a

00:12:08,080 --> 00:12:14,770
couple of plus first magic to make it

00:12:11,470 --> 00:12:17,200
work mostly but we don't so we are

00:12:14,770 --> 00:12:19,540
trying to make it possible to swim it

00:12:17,200 --> 00:12:29,920
out but we are not trying to replace it

00:12:19,540 --> 00:12:33,520
I don't do things to now whenever yeah

00:12:29,920 --> 00:12:35,770
they don't have an LPS so that's kind of

00:12:33,520 --> 00:12:37,960
a non-starter and they don't have tips

00:12:35,770 --> 00:12:40,210
which for people who don't care they

00:12:37,960 --> 00:12:45,970
don't care of it if you do care it's

00:12:40,210 --> 00:12:47,830
really important so it's not boy

00:12:45,970 --> 00:12:48,310
Mississauga's an expense Melissa laughs

00:12:47,830 --> 00:12:54,970
exactly

00:12:48,310 --> 00:12:57,490
yeah there's no fix apart I know does at

00:12:54,970 --> 00:13:00,970
this point but we won't past December

00:12:57,490 --> 00:13:03,379
until for a few months is gonna be at

00:13:00,970 --> 00:13:06,199
least a few months cap opener self

00:13:03,379 --> 00:13:08,599
still in flexing start looking at it

00:13:06,199 --> 00:13:10,429
soon but yeah broken this sucks up

00:13:08,599 --> 00:13:11,720
there's going to be a gap there which

00:13:10,429 --> 00:13:15,669
means have known without the cap with

00:13:11,720 --> 00:13:15,669
next enough it's it's unfortunate

00:13:18,340 --> 00:13:28,310
hi I have a question for you say you're

00:13:23,840 --> 00:13:29,960
interested in ASIC iterators yes and so

00:13:28,310 --> 00:13:32,570
I just want to deal with that you know

00:13:29,960 --> 00:13:36,620
it's like my colleague equals Valerie

00:13:32,570 --> 00:13:43,460
young right here they'll actually wrote

00:13:36,620 --> 00:13:50,360
a bunch a small number okay whatever

00:13:43,460 --> 00:13:55,580
she's a contributor to 62 but any

00:13:50,360 --> 00:14:03,200
questions along like like are you trying

00:13:55,580 --> 00:14:09,500
to couple of things first of all last

00:14:03,200 --> 00:14:13,520
year did a PR to see iterative support

00:14:09,500 --> 00:14:16,190
to streams and write like this main

00:14:13,520 --> 00:14:19,250
something like that we move remove that

00:14:16,190 --> 00:14:22,940
from experimental so right now not

00:14:19,250 --> 00:14:24,710
streams are see passing it over so you

00:14:22,940 --> 00:14:27,590
can iterate it you can consumers three

00:14:24,710 --> 00:14:33,170
fully using a secret raters with the

00:14:27,590 --> 00:14:38,620
full back pressure support on that we

00:14:33,170 --> 00:14:42,110
have recently adding readable dot from

00:14:38,620 --> 00:14:42,650
methods so that you can pass in a single

00:14:42,110 --> 00:14:45,110
traitor

00:14:42,650 --> 00:14:49,760
and get that stream a stream out of it

00:14:45,110 --> 00:14:52,030
and we are going to look into supporting

00:14:49,760 --> 00:14:55,700
a seeker in trouble for with

00:14:52,030 --> 00:14:59,360
accelerators in the pipeline in the

00:14:55,700 --> 00:15:02,990
stream function so that you can process

00:14:59,360 --> 00:15:06,910
a stream of data just using a secret

00:15:02,990 --> 00:15:11,270
raters you can take you know file and

00:15:06,910 --> 00:15:14,450
then you know combine it into a iterator

00:15:11,270 --> 00:15:16,970
and then write that into another file

00:15:14,450 --> 00:15:19,100
and all of these writing more or less

00:15:16,970 --> 00:15:22,310
you might expect without having to deal

00:15:19,100 --> 00:15:25,580
with legacy notes track elite legacies

00:15:22,310 --> 00:15:30,840
but that's my take on it they're not

00:15:25,580 --> 00:15:35,690
seen API that can really change so that

00:15:30,840 --> 00:15:38,130
my current working plan on top of this

00:15:35,690 --> 00:15:39,420
we are currently talking my start

00:15:38,130 --> 00:15:43,950
Benjamin and a bunch of other folks

00:15:39,420 --> 00:15:47,910
about adding some character support on

00:15:43,950 --> 00:15:54,630
top of the meter so you basically can

00:15:47,910 --> 00:15:56,730
get a stream flow and consume that using

00:15:54,630 --> 00:16:00,480
an assay a sink a traitor with the

00:15:56,730 --> 00:16:04,620
masticated so those are the main things

00:16:00,480 --> 00:16:06,540
that we are currently focusing on and if

00:16:04,620 --> 00:16:09,150
you want to know more I got some more

00:16:06,540 --> 00:16:12,180
questions and there's a lot of things to

00:16:09,150 --> 00:16:13,860
do these are the ten times this is a

00:16:12,180 --> 00:16:16,680
nice feature very very nice feature of

00:16:13,860 --> 00:16:19,560
the language also with node a sunsetting

00:16:16,680 --> 00:16:25,440
at the end of the year which means that

00:16:19,560 --> 00:16:28,200
in last six months time all LTS versions

00:16:25,440 --> 00:16:28,590
of node would have a sink a creative

00:16:28,200 --> 00:16:30,900
support

00:16:28,590 --> 00:16:34,130
so essentially will be my pass

00:16:30,900 --> 00:16:34,130
recommendation to persistence

00:16:36,670 --> 00:16:39,780
[Music]

00:16:41,750 --> 00:17:08,339
is there any question so I'm really

00:16:54,360 --> 00:17:10,250
curious this is like a very um so thank

00:17:08,339 --> 00:17:14,790
you for your service everybody here um

00:17:10,250 --> 00:17:17,339
but my question is specifically on what

00:17:14,790 --> 00:17:20,699
it means to I guess you have a sense of

00:17:17,339 --> 00:17:23,669
how how many folks that are running no

00:17:20,699 --> 00:17:29,730
days in the wild are transpiling their

00:17:23,669 --> 00:17:48,390
server code just like a wild estimate

00:17:29,730 --> 00:17:54,510
I'm just curious it's two goes into two

00:17:48,390 --> 00:18:01,290
camps there is the reactor site

00:17:54,510 --> 00:18:03,720
rendering and random camp and and this

00:18:01,290 --> 00:18:06,059
is dictated by react and distance so

00:18:03,720 --> 00:18:09,690
that is the main reason why they are

00:18:06,059 --> 00:18:13,650
prosper all the folks that are running

00:18:09,690 --> 00:18:18,450
node for micro services and api's most

00:18:13,650 --> 00:18:21,890
of the time they are not really or

00:18:18,450 --> 00:18:21,890
they're not just fighting that habit

00:18:22,850 --> 00:18:31,860
which counters transpiling and not in

00:18:28,799 --> 00:18:35,130
some cases okay so it depends on the

00:18:31,860 --> 00:18:42,570
definition of transpiring is the code

00:18:35,130 --> 00:18:46,860
modifications are not so heavy so I see

00:18:42,570 --> 00:18:49,890
a lot of code in my work so I see a lot

00:18:46,860 --> 00:18:53,900
of code in the world and you know my

00:18:49,890 --> 00:18:58,250
recommendation if your do not ship

00:18:53,900 --> 00:19:00,650
part of the language that is no state

00:18:58,250 --> 00:19:02,780
should not fetch whatever we serve

00:19:00,650 --> 00:19:07,610
people and stuff you are going to get

00:19:02,780 --> 00:19:09,110
badly badly hidden as far from this it's

00:19:07,610 --> 00:19:21,170
more or less

00:19:09,110 --> 00:19:23,600
I would say in more than 50% so so

00:19:21,170 --> 00:19:26,390
Laurie boss who is the chief data

00:19:23,600 --> 00:19:28,100
officer at MPM is giving a talk at J's

00:19:26,390 --> 00:19:30,350
come to you this weekend will probably

00:19:28,100 --> 00:19:31,370
actually answer the exact question I

00:19:30,350 --> 00:19:34,790
don't know if you're sticking around for

00:19:31,370 --> 00:19:36,890
his company yeah yeah but I searched on

00:19:34,790 --> 00:19:39,590
Twitter and the last time I might find

00:19:36,890 --> 00:19:44,360
in with a picture of a slide about just

00:19:39,590 --> 00:19:46,010
type script just script 46% of Indian

00:19:44,360 --> 00:19:48,260
users are using typescript so it's

00:19:46,010 --> 00:19:51,050
definitely that would definitely imply

00:19:48,260 --> 00:20:02,780
the reasonable conclusions that most

00:19:51,050 --> 00:20:05,570
people are transpile yeah so I'm not so

00:20:02,780 --> 00:20:10,300
much talking about dependency because we

00:20:05,570 --> 00:20:17,480
all know that right like 90 percent

00:20:10,300 --> 00:20:19,130
right so and so you know I was trying to

00:20:17,480 --> 00:20:21,320
understand how much of server

00:20:19,130 --> 00:20:23,510
application code is transpiled

00:20:21,320 --> 00:20:28,250
because if you're saying to me as is at

00:20:23,510 --> 00:20:30,170
least 50 percent likely more that you as

00:20:28,250 --> 00:20:33,080
implementers of these native modules

00:20:30,170 --> 00:20:34,790
right that means that your code is

00:20:33,080 --> 00:20:36,620
actually not getting tested right

00:20:34,790 --> 00:20:38,600
because um when you're using a

00:20:36,620 --> 00:20:40,790
transpiler probably are not using the

00:20:38,600 --> 00:20:56,390
native implementation which is really

00:20:40,790 --> 00:20:59,140
problematic right so this is a sorry

00:20:56,390 --> 00:20:59,140
misunderstood

00:21:07,710 --> 00:21:20,800
are you concerned that your like those

00:21:18,490 --> 00:21:37,090
are not actually you know using the

00:21:20,800 --> 00:21:54,809
native so for example yeah I've never

00:21:37,090 --> 00:21:54,809
actually been very concerned about so

00:22:01,970 --> 00:22:05,039
[Music]

00:22:05,280 --> 00:22:23,520
clear your books

00:22:26,240 --> 00:22:29,289
[Music]

00:23:22,640 --> 00:23:25,940
just before we take another question I

00:23:24,230 --> 00:23:28,430
was just gonna add that with Joe Sam and

00:23:25,940 --> 00:23:30,410
Chad that they can answer questions at

00:23:28,430 --> 00:23:33,410
the end of module 7 up there in case

00:23:30,410 --> 00:23:35,120
people are taking photos to DM people

00:23:33,410 --> 00:23:37,580
later or whatever you intend to do with

00:23:35,120 --> 00:23:41,030
it but we're not kidding out to actually

00:23:37,580 --> 00:23:43,430
put some audio into the speaker so

00:23:41,030 --> 00:23:48,070
unfortunately we had about the math

00:23:43,430 --> 00:23:48,070
actually answer questions like sorry Joe

00:23:48,340 --> 00:23:56,000
um again thanks for setting this up is

00:23:52,700 --> 00:23:58,820
really great to have people to ask all

00:23:56,000 --> 00:24:03,860
these hard questions I was going to ask

00:23:58,820 --> 00:24:08,920
about releases and especially the old

00:24:03,860 --> 00:24:10,540
ones I've seen numbers for over 1000

00:24:08,920 --> 00:24:14,300
[Music]

00:24:10,540 --> 00:24:17,000
numbers and it's really worrying I was

00:24:14,300 --> 00:24:21,230
wondering if there still if there are

00:24:17,000 --> 00:24:26,840
mushrooms that are being taken in

00:24:21,230 --> 00:24:30,740
account for encouraging maybe not those

00:24:26,840 --> 00:24:37,820
really old versions isn't brushing for

00:24:30,740 --> 00:24:42,950
his pain he's blocked sorry if it's

00:24:37,820 --> 00:24:44,570
really hard to answer not sure he's

00:24:42,950 --> 00:25:02,240
gonna ask you this question raise your

00:24:44,570 --> 00:25:09,470
hand like humans encourage people to use

00:25:02,240 --> 00:25:13,400
poppies maybe like sleep there but

00:25:09,470 --> 00:25:21,530
something but yeah like the numbers are

00:25:13,400 --> 00:25:24,620
in the thousands person for I want to

00:25:21,530 --> 00:25:27,800
there are things there we don't have the

00:25:24,620 --> 00:25:30,620
data to say that actually produces them

00:25:27,800 --> 00:25:34,520
there is zero plan and

00:25:30,620 --> 00:25:38,570
even the rotator are still in some adult

00:25:34,520 --> 00:25:40,640
rabies dot Yama file out there so it

00:25:38,570 --> 00:25:42,700
might just be parts and we don't have

00:25:40,640 --> 00:25:45,409
any data to distinguish between those

00:25:42,700 --> 00:25:50,029
you know if I don't know if you know

00:25:45,409 --> 00:25:52,220
this but Express still test just so that

00:25:50,029 --> 00:25:54,320
you know there's a package and all this

00:25:52,220 --> 00:26:01,070
process system still runs on period of

00:25:54,320 --> 00:26:03,230
time and that's you know the other bit

00:26:01,070 --> 00:26:07,490
is we cannot issue new releases for

00:26:03,230 --> 00:26:22,340
those things so that's that the second

00:26:07,490 --> 00:26:27,770
part we hunt because even if we add some

00:26:22,340 --> 00:26:29,210
kind of switch kill just won't use those

00:26:27,770 --> 00:26:34,909
versions and slow things down right

00:26:29,210 --> 00:26:40,909
it'll actually not just you know

00:26:34,909 --> 00:26:44,299
strongly encourage people to thank you

00:26:40,909 --> 00:26:47,630
this wraps are a MIDI thank you for

00:26:44,299 --> 00:26:49,399
elder mo folks who tuned in I think

00:26:47,630 --> 00:26:51,950
folks on the listserv pretty much over

00:26:49,399 --> 00:26:54,260
to ask your questions if you hit them up

00:26:51,950 --> 00:26:57,890
later we're moving on to the open J's

00:26:54,260 --> 00:26:59,799
foundation CPC session and before we get

00:26:57,890 --> 00:27:03,649
the kicked up I just wanted thank owner

00:26:59,799 --> 00:27:07,250
I can't see where there are no who's

00:27:03,649 --> 00:27:12,890
been helping us you know to there were

00:27:07,250 --> 00:27:14,539
folks so that's and thank you for all

00:27:12,890 --> 00:27:19,090
the people who have been answering

00:27:14,539 --> 00:27:19,090

YouTube URL: https://www.youtube.com/watch?v=BsDf8zzl3Iw


