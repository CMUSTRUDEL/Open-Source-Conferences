Title: Deprecations future
Publication date: 2019-05-31
Playlist: OpenJS Foundation Collaborator Summit, Berlin, May 2019
Description: 
	OpenJS Foundation Collaborator Summit, Berlin, 2019

More details: https://github.com/nodejs/summit/issues/153

So far our user experience was partially meh, when it comes to deprecation warnings. We often struggle with deprecations due to our very heterogeneous users. There is often a gap in the requirements for e.g., CLI users, big companies that want the most reliable and safe way doing things, individuals who e.g., write a small script and so on. Most important though: we mainly reach the wrong people when printing our deprecation warnings. In general there are lots of pros and cons with deprecations.

That's why I would like to brainstorm what we could do to:

* reach the right people
* improve the average experience for all users
* still have a good way to improve the Node.js code base

So far I already thought about e.g., using a Node.js survey to gather further data and to figure out what our users actually believe and also about add an option to opt-into providing data when it comes to deprecations or other usage data.

This is very likely not an easy task and I ask not only Node.js collaborators to join but people who e.g., have run into deprecation warnings before, who found them distracting, great, weird and people who have e.g., strict requirements in companies. I believe we need a lot more feedback on this topic! If anyone has a lot of experience in this field, great, please join this session!
Captions: 
	00:00:00,690 --> 00:00:05,310
thanks everybody for coming we are here

00:00:03,030 --> 00:00:08,160
to talk about the duplication to notice

00:00:05,310 --> 00:00:12,019
and how we're dealing with that in the

00:00:08,160 --> 00:00:14,690
future so currently we have a

00:00:12,019 --> 00:00:17,609
depreciation system some rules for that

00:00:14,690 --> 00:00:20,420
the typical no justification works like

00:00:17,609 --> 00:00:21,720
this so you have a teacher that is

00:00:20,420 --> 00:00:25,140
documented

00:00:21,720 --> 00:00:27,240
ideally maybe not if it's not a

00:00:25,140 --> 00:00:29,550
community probably skip the first step

00:00:27,240 --> 00:00:31,830
is the first that is to market is

00:00:29,550 --> 00:00:34,440
duplicated in the documentation we

00:00:31,830 --> 00:00:36,390
typically do then assembler major change

00:00:34,440 --> 00:00:40,879
sometimes several miners we feel that

00:00:36,390 --> 00:00:44,340
makes more sense but usually then it's

00:00:40,879 --> 00:00:46,890
marketed in the documentation at some

00:00:44,340 --> 00:00:49,039
point we may want to transition one step

00:00:46,890 --> 00:00:51,120
further we treat is the runtime

00:00:49,039 --> 00:00:56,059
duplications of prints of wiring on

00:00:51,120 --> 00:00:58,680
standard error when the feature is used

00:00:56,059 --> 00:01:01,260
well the final stage which we may also

00:00:58,680 --> 00:01:03,870
transition to its own pipe this actual

00:01:01,260 --> 00:01:14,880
full removal of the feature or breakage

00:01:03,870 --> 00:01:17,330
or whatever applies in that case and so

00:01:14,880 --> 00:01:19,259
that's how it works

00:01:17,330 --> 00:01:21,119
people have very different opinions

00:01:19,259 --> 00:01:27,509
about what kinds of things we should do

00:01:21,119 --> 00:01:30,869
placate what situations they apply to we

00:01:27,509 --> 00:01:33,479
also have because we didn't quite feel

00:01:30,869 --> 00:01:39,720
like the system was fluid

00:01:33,479 --> 00:01:42,000
yeni was fully sufficient to - and so we

00:01:39,720 --> 00:01:44,869
introduced intermediates and it reads

00:01:42,000 --> 00:01:49,490
the offending deprecation flag to note

00:01:44,869 --> 00:01:51,299
which prints runtime warnings for as

00:01:49,490 --> 00:01:53,880
things that are usually only

00:01:51,299 --> 00:01:59,030
documentation or we duplicated it's like

00:01:53,880 --> 00:01:59,030
you are tend to see multiplication work

00:02:00,979 --> 00:02:07,049
yeah so why did I actually want this

00:02:04,170 --> 00:02:10,229
session because as I already said is and

00:02:07,049 --> 00:02:13,290
then and we are often struggling with

00:02:10,229 --> 00:02:13,830
actually reaching the persons we want to

00:02:13,290 --> 00:02:16,890
reach

00:02:13,830 --> 00:02:18,690
and then they are often not efficient in

00:02:16,890 --> 00:02:20,730
a way that even if they are printed out

00:02:18,690 --> 00:02:23,400
to someone and people would not follow

00:02:20,730 --> 00:02:28,350
up on implementing the change that we

00:02:23,400 --> 00:02:31,170
recommend and we can't afford or we may

00:02:28,350 --> 00:02:33,600
not to break the ecosystem all the time

00:02:31,170 --> 00:02:37,170
so there is like a lot of things that we

00:02:33,600 --> 00:02:40,140
have to take into account while making

00:02:37,170 --> 00:02:43,260
duplications and I mean right now it's

00:02:40,140 --> 00:02:46,290
more than support we should definitely

00:02:43,260 --> 00:02:49,950
try to improve the experience and a lot

00:02:46,290 --> 00:02:56,990
of areas and this is hopefully what we

00:02:49,950 --> 00:03:01,740
can figure out in this session um so

00:02:56,990 --> 00:03:03,060
yeah like some people might profit from

00:03:01,740 --> 00:03:06,000
duplications more than others

00:03:03,060 --> 00:03:09,180
and that's also something that we have

00:03:06,000 --> 00:03:11,690
to figure out and in a way we want to

00:03:09,180 --> 00:03:15,540
also get input from every one of you and

00:03:11,690 --> 00:03:18,810
to know and what your experience with

00:03:15,540 --> 00:03:21,720
depreciations has been so far and I'm

00:03:18,810 --> 00:03:26,580
like bad good you know everything

00:03:21,720 --> 00:03:28,830
together to actually and see what we can

00:03:26,580 --> 00:03:32,360
do because right now I mean when you use

00:03:28,830 --> 00:03:35,700
node we have no data whatsoever and we

00:03:32,360 --> 00:03:39,180
don't know how often a feature is used

00:03:35,700 --> 00:03:42,300
we don't know how it is used if it is

00:03:39,180 --> 00:03:47,489
used we have some tooling for detecting

00:03:42,300 --> 00:03:50,130
that like this minute and said Jim which

00:03:47,489 --> 00:03:52,500
we used to like sitting as a tool for

00:03:50,130 --> 00:03:56,550
anyone who doesn't know it and that it

00:03:52,500 --> 00:03:59,520
runs Adam node modules new test Suites

00:03:56,550 --> 00:04:01,800
against occur in a specific node.js

00:03:59,520 --> 00:04:06,709
module and then we check if the test

00:04:01,800 --> 00:04:13,470
suite still passes with dead node model

00:04:06,709 --> 00:04:16,250
and adjustment it is a tool to pretty

00:04:13,470 --> 00:04:18,959
much run a regular expression over

00:04:16,250 --> 00:04:22,109
whatever one you want to choose we have

00:04:18,959 --> 00:04:25,350
like separate and dump step from the

00:04:22,109 --> 00:04:27,220
whole ecosystem and it's all node

00:04:25,350 --> 00:04:29,980
modules out there

00:04:27,220 --> 00:04:32,200
we have them sorted I hear by the top

00:04:29,980 --> 00:04:37,120
list pretty much so all modules that

00:04:32,200 --> 00:04:39,670
have a specific requirement of likes and

00:04:37,120 --> 00:04:42,040
it would be preferable so we explicitly

00:04:39,670 --> 00:04:45,190
trying to not break any of those and

00:04:42,040 --> 00:04:49,600
then we can just run it against a whole

00:04:45,190 --> 00:04:52,090
system to see if specific API is used in

00:04:49,600 --> 00:04:55,030
a while a lot but of course we do not

00:04:52,090 --> 00:04:59,740
know anything about private code and we

00:04:55,030 --> 00:05:01,780
also do not know anything and like then

00:04:59,740 --> 00:05:07,360
when you get the output from just minute

00:05:01,780 --> 00:05:09,280
it's also that you have to first look

00:05:07,360 --> 00:05:12,220
through every entry if it actually it

00:05:09,280 --> 00:05:15,430
finds a lot sometimes there is transpile

00:05:12,220 --> 00:05:19,270
code sometimes it's a different API

00:05:15,430 --> 00:05:22,630
which is and just has a similar name as

00:05:19,270 --> 00:05:26,820
a note for API and we have to first of

00:05:22,630 --> 00:05:29,710
all filter out all false positives and

00:05:26,820 --> 00:05:34,210
this is not easy like it's it's really

00:05:29,710 --> 00:05:37,390
really tough situation and sometimes we

00:05:34,210 --> 00:05:40,510
have duplications which make a lot of

00:05:37,390 --> 00:05:43,360
sense in a way for reason like they've

00:05:40,510 --> 00:05:45,850
guys broken but otherwise we just do it

00:05:43,360 --> 00:05:47,410
because that we have two versions of it

00:05:45,850 --> 00:05:50,230
with the same name and well I should

00:05:47,410 --> 00:05:52,480
only be one way but we still write the

00:05:50,230 --> 00:05:54,790
echo system ado and what should we do

00:05:52,480 --> 00:05:58,720
what should we focus on being like an

00:05:54,790 --> 00:06:00,520
input session in this case I mean maybe

00:05:58,720 --> 00:06:30,430
some one of you already has some fruit

00:06:00,520 --> 00:06:32,080
input and so I discovered it because I

00:06:30,430 --> 00:06:35,590
read my chest feed and then I saw oh

00:06:32,080 --> 00:06:37,510
there was the warning and I have to do

00:06:35,590 --> 00:06:39,689
this this maybe maybe I should know this

00:06:37,510 --> 00:06:42,209
already this is a way I could actually

00:06:39,689 --> 00:06:56,159
we just failed with magnification yes

00:06:42,209 --> 00:06:59,189
yes I I will I will make a big issue or

00:06:56,159 --> 00:07:00,419
something or yard work on giving the

00:06:59,189 --> 00:07:03,149
teachers that I'm actually using on the

00:07:00,419 --> 00:07:19,050
potatoes go into a proper public API

00:07:03,149 --> 00:07:20,159
later we're still trying to like see is

00:07:19,050 --> 00:07:24,239
actually possible

00:07:20,159 --> 00:07:26,819
we'll put it behind so if I run my

00:07:24,239 --> 00:07:28,800
Chesapeake with that on and the great

00:07:26,819 --> 00:07:31,589
thing as well I like to be notified or

00:07:28,800 --> 00:08:29,639
yes maybe by this method only use like

00:07:31,589 --> 00:08:31,319
for tourists we duplications tiny

00:08:29,639 --> 00:08:33,839
correction in case anybody's taking

00:08:31,319 --> 00:08:40,500
those genes I think you must focus -

00:08:33,839 --> 00:08:50,250
trace deprecations - - but I was taking

00:08:40,500 --> 00:08:52,980
notes kind of making an informed - are

00:08:50,250 --> 00:08:54,779
you tracking kind of like from like a

00:08:52,980 --> 00:08:56,670
analytics perspective like how many

00:08:54,779 --> 00:08:58,769
people are accessing the dachshund with

00:08:56,670 --> 00:09:00,839
respect to those features because like

00:08:58,769 --> 00:09:03,240
there's a lot of features of you photo

00:09:00,839 --> 00:09:05,670
deprecation flag on on the dollars of

00:09:03,240 --> 00:09:08,100
not gonna find because i don't open the

00:09:05,670 --> 00:09:11,639
box for that i mean yeah there's also

00:09:08,100 --> 00:09:40,820
all the docs like there's a view of all

00:09:11,639 --> 00:09:40,820
oh yeah i mean so like if somebody I

00:10:04,130 --> 00:10:15,389
think like would like it could be

00:10:10,290 --> 00:10:23,490
possible that we like do some tournament

00:10:15,389 --> 00:10:28,889
you get from this like it will send some

00:10:23,490 --> 00:10:32,269
requests to a controlled by us but like

00:10:28,889 --> 00:10:34,800
people may open to use it in their

00:10:32,269 --> 00:10:36,870
pipelines like what people would do with

00:10:34,800 --> 00:10:39,630
coverage of course they would you know

00:10:36,870 --> 00:10:42,690
after they run the test it will use a

00:10:39,630 --> 00:10:45,360
module that provided by some current

00:10:42,690 --> 00:10:47,699
service providers and send requests to

00:10:45,360 --> 00:10:50,160
the servers and plan coverage that I

00:10:47,699 --> 00:10:57,089
want I'm pondering whether we could do

00:10:50,160 --> 00:10:59,670
something sooner to attach and like not

00:10:57,089 --> 00:11:00,959
in production because people like that

00:10:59,670 --> 00:11:03,269
if you're in general because it would

00:11:00,959 --> 00:11:04,590
actually allow to collaborate pretty

00:11:03,269 --> 00:11:10,860
much because tools like

00:11:04,590 --> 00:11:21,360
New York City's um and then it could be

00:11:10,860 --> 00:11:23,040
an opt-in like there first of all we

00:11:21,360 --> 00:11:24,450
probably have to implement something

00:11:23,040 --> 00:11:26,520
like that in the corn that's a question

00:11:24,450 --> 00:11:29,160
how do we actually do that like how it

00:11:26,520 --> 00:11:41,370
could be even trashed in API user

00:11:29,160 --> 00:11:43,770
searches so those environments

00:11:41,370 --> 00:11:46,920
victus implement its rule 2 would be

00:11:43,770 --> 00:11:48,860
output in extract those things or use

00:11:46,920 --> 00:11:51,990
the redirect warnings to get those

00:11:48,860 --> 00:11:53,580
process yes that would be possible for

00:11:51,990 --> 00:11:56,040
the actual duplications but what I would

00:11:53,580 --> 00:11:58,290
actually also like to add and because

00:11:56,040 --> 00:12:00,839
but now we do duplications in the blight

00:11:58,290 --> 00:12:05,550
on this lease be yeah mid-cycle

00:12:00,839 --> 00:12:08,130
well this API could be it's not really

00:12:05,550 --> 00:12:10,740
doing what we want to have or we have it

00:12:08,130 --> 00:12:13,200
duplicated and then someone might come

00:12:10,740 --> 00:12:16,770
up with a PR and then we officially have

00:12:13,200 --> 00:12:19,050
the stree steps or documentation and

00:12:16,770 --> 00:12:22,320
duplication runtime duplication and then

00:12:19,050 --> 00:12:24,270
removal which is also like we have very

00:12:22,320 --> 00:12:27,450
like when does it happen

00:12:24,270 --> 00:12:30,500
does anyone really do it Juiz later on

00:12:27,450 --> 00:12:30,500
say this was a bad idea

00:12:40,520 --> 00:14:27,990
yes so that's one of the so that's why

00:12:49,290 --> 00:14:30,600
we that's why I think like actually

00:14:27,990 --> 00:14:32,130
involving NYC and CA then maybe some

00:14:30,600 --> 00:14:34,560
testing frameworks this really good idea

00:14:32,130 --> 00:14:38,370
because like a lot of people use them

00:14:34,560 --> 00:14:40,110
and if they do a cloud like they do that

00:14:38,370 --> 00:14:42,900
for us they were partying all the time

00:14:40,110 --> 00:14:49,110
it then we don't have to worry as much

00:14:42,900 --> 00:14:51,890
about that in those environments that

00:14:49,110 --> 00:14:51,890
are running the test

00:15:12,780 --> 00:15:35,670
yeah they are in this room I mean like

00:15:16,020 --> 00:15:47,340
Venice downstairs missus missus somehow

00:15:35,670 --> 00:15:50,730
in the just one nice to media things

00:15:47,340 --> 00:15:52,620
does anyone take notes because this

00:15:50,730 --> 00:15:57,050
actually like the session is meant to

00:15:52,620 --> 00:15:57,050
have input so we should take notes

00:16:05,650 --> 00:16:09,960
[Music]

00:16:07,550 --> 00:16:14,090
mm we should have like the link that we

00:16:09,960 --> 00:17:06,600
could share to to keep some notes there

00:16:14,090 --> 00:17:09,110
can you just tell us around Monaco

00:17:06,600 --> 00:17:09,110
metrics

00:17:09,589 --> 00:17:16,650
I'd like to why this beneficial and how

00:17:14,069 --> 00:17:18,230
it actually be able to do because these

00:17:16,650 --> 00:17:21,510
efforts me are very opposite in order

00:17:18,230 --> 00:17:26,199
the things I hear supports late nice to

00:17:21,510 --> 00:17:30,359
be here I went home for note

00:17:26,199 --> 00:17:32,889
and number two make music so like

00:17:30,359 --> 00:17:38,230
processes and they look how people are

00:17:32,889 --> 00:17:41,289
using the yeah the main theme that I'm

00:17:38,230 --> 00:17:43,960
coming from is we see a lot of data as

00:17:41,289 --> 00:17:46,899
the community log data in the open

00:17:43,960 --> 00:17:50,109
source space that help form on it and he

00:17:46,899 --> 00:17:53,950
is incisions but from my you know

00:17:50,109 --> 00:17:57,850
guesstimate that's what we less than 10

00:17:53,950 --> 00:18:00,970
percent of meters into actual the world

00:17:57,850 --> 00:18:02,950
most that is in private enterprise

00:18:00,970 --> 00:18:04,749
businesses teams of hundred of the

00:18:02,950 --> 00:18:08,200
offers don't think thousands of

00:18:04,749 --> 00:18:11,259
operations so how do we surface that

00:18:08,200 --> 00:18:13,149
that information from private businesses

00:18:11,259 --> 00:18:15,549
and companies were a security focus of a

00:18:13,149 --> 00:18:17,889
privacy focused not to indicate their

00:18:15,549 --> 00:18:19,600
business models or their customer

00:18:17,889 --> 00:18:21,249
information or anything about what

00:18:19,600 --> 00:18:25,269
they're doing but actually feed that

00:18:21,249 --> 00:18:28,210
information back to the project so and

00:18:25,269 --> 00:18:31,239
you just right now we were already and

00:18:28,210 --> 00:18:35,350
talking about implementing something in

00:18:31,239 --> 00:18:37,629
tools like NYC and when you round the

00:18:35,350 --> 00:18:40,210
cameras report you could automatically

00:18:37,629 --> 00:18:42,519
to a fire every indication warning and

00:18:40,210 --> 00:18:45,220
the duplication warning itself certainly

00:18:42,519 --> 00:18:47,230
even like what you should do probably in

00:18:45,220 --> 00:18:50,230
that case it's like a often also to have

00:18:47,230 --> 00:18:52,960
the tracing for what code land but we

00:18:50,230 --> 00:18:55,749
could remove every information there's

00:18:52,960 --> 00:19:00,129
actually really about the application

00:18:55,749 --> 00:19:02,759
you're running and and I mean do we need

00:19:00,129 --> 00:19:05,220
to trace in this case probably not yeah

00:19:02,759 --> 00:19:15,249
because unique we want to have anything

00:19:05,220 --> 00:19:17,080
probably simplest maybe best thing to do

00:19:15,249 --> 00:19:19,659
would just to increased characters for

00:19:17,080 --> 00:19:22,749
every duplication markup for every

00:19:19,659 --> 00:19:26,080
single one a different one but that just

00:19:22,749 --> 00:19:30,899
doesn't really provide any data that

00:19:26,080 --> 00:19:37,509
actually they're doing so I think

00:19:30,899 --> 00:19:38,830
perspective out there is any level of

00:19:37,509 --> 00:19:41,260
data that you know

00:19:38,830 --> 00:19:43,780
that we'd still development managers the

00:19:41,260 --> 00:19:45,970
architecture team whatever and get from

00:19:43,780 --> 00:19:48,310
these data tools without having to be

00:19:45,970 --> 00:19:49,930
scrubbed will be useful and then

00:19:48,310 --> 00:19:51,820
anything that maybe a second tier of

00:19:49,930 --> 00:19:53,290
that data or a second level but they can

00:19:51,820 --> 00:19:58,270
be scuffed to get back to the community

00:19:53,290 --> 00:20:00,190
and give them that option but even given

00:19:58,270 --> 00:20:03,300
the data the opportunity to understand

00:20:00,190 --> 00:20:03,300
what's happening in there because

00:20:03,480 --> 00:20:08,080
because we did we did we did a lot of

00:20:05,770 --> 00:20:09,550
data to tell us we actually scraped a

00:20:08,080 --> 00:20:11,170
lot of data of get out we skipped off

00:20:09,550 --> 00:20:13,870
with it off at the end did a lot of

00:20:11,170 --> 00:20:16,000
internal white charts and automation and

00:20:13,870 --> 00:20:18,100
like all sort of information for us to

00:20:16,000 --> 00:20:21,550
understand what's gone on our ecosystem

00:20:18,100 --> 00:20:22,930
because I have hundreds and hundreds and

00:20:21,550 --> 00:20:26,290
thousands of applications there's no way

00:20:22,930 --> 00:20:29,020
for me to do calculus I needed that ring

00:20:26,290 --> 00:20:30,880
question from Metis and I mean what do

00:20:29,020 --> 00:20:32,860
you think about our duplications in

00:20:30,880 --> 00:20:34,510
general do you think they useful do you

00:20:32,860 --> 00:20:38,920
think they make sense and did you

00:20:34,510 --> 00:20:48,400
struggle wisdom I'm a stupid at a good

00:20:38,920 --> 00:20:51,940
you know like you what duplications and

00:20:48,400 --> 00:20:55,650
did you run into and what was do what

00:20:51,940 --> 00:20:55,650
experience in general did you have this

00:21:03,330 --> 00:21:08,400
first of all knowing which apps are

00:21:06,010 --> 00:21:11,860
still be using

00:21:08,400 --> 00:21:15,100
monetarily and then actually why do you

00:21:11,860 --> 00:21:17,950
get all that that in itself is a big

00:21:15,100 --> 00:21:20,320
struggle so just jumping over that

00:21:17,950 --> 00:21:21,910
hurdle thank getting to the oh are we

00:21:20,320 --> 00:21:24,130
using very few guys everything most

00:21:21,910 --> 00:21:26,500
performant ones I'm using these uh you

00:21:24,130 --> 00:21:28,090
know most recent versions of them that's

00:21:26,500 --> 00:21:30,540
the second tier problems first your

00:21:28,090 --> 00:21:32,650
problem is even getting this structure

00:21:30,540 --> 00:21:35,980
business and pumping and keep it

00:21:32,650 --> 00:21:37,840
building perspective is just getting

00:21:35,980 --> 00:21:38,350
over all the riddles and things that was

00:21:37,840 --> 00:21:41,290
a struggle

00:21:38,350 --> 00:21:43,300
so people were able to do that the next

00:21:41,290 --> 00:21:47,920
year becomes the application challenge

00:21:43,300 --> 00:21:51,480
of is it worth our time right having

00:21:47,920 --> 00:21:51,480
done a lot of upfront work

00:21:52,000 --> 00:22:03,320
I'm getting on stage that Delta beverage

00:21:58,160 --> 00:22:04,940
can actually translate you have to make

00:22:03,320 --> 00:22:19,100
that conscious for as well you know what

00:22:04,940 --> 00:22:21,440
I mean was it like for you can you tell

00:22:19,100 --> 00:22:22,820
of a specific API and it was really bad

00:22:21,440 --> 00:22:27,620
or in do you think also some more

00:22:22,820 --> 00:22:33,370
positive like and and not a Christian

00:22:27,620 --> 00:22:37,160
like when do you consider an API broken

00:22:33,370 --> 00:22:41,570
I the most relevant examples I can

00:22:37,160 --> 00:22:57,260
remember it wasn't really defecation per

00:22:41,570 --> 00:22:59,990
se but just causing some performance

00:22:57,260 --> 00:23:02,990
issues in new that just did all the

00:22:59,990 --> 00:23:09,080
beverage of just getting over I can

00:23:02,990 --> 00:23:10,820
recall anything other than offer I was

00:23:09,080 --> 00:23:13,100
doing that dumps behind but that would

00:23:10,820 --> 00:23:18,110
be bad that was mostly actually in

00:23:13,100 --> 00:23:19,190
modules so we updated version and then

00:23:18,110 --> 00:23:38,720
that became a different tier of a

00:23:19,190 --> 00:23:41,090
problem like bumping like when we're

00:23:38,720 --> 00:23:43,130
gathering that data doesn't make sense

00:23:41,090 --> 00:23:45,220
to only focus on like things that were

00:23:43,130 --> 00:23:47,450
already decided to be deprecated or

00:23:45,220 --> 00:23:49,610
actually like get a better overview of

00:23:47,450 --> 00:23:51,890
like what are all like what's the user

00:23:49,610 --> 00:23:52,970
to all the different API side because

00:23:51,890 --> 00:23:56,179
like if you're already starting to

00:23:52,970 --> 00:23:58,340
gather that that way if you realize that

00:23:56,179 --> 00:23:59,000
something that you might be eyeing at to

00:23:58,340 --> 00:24:02,090
deprecate

00:23:59,000 --> 00:24:03,080
actually has a like way bigger usage

00:24:02,090 --> 00:24:05,240
then

00:24:03,080 --> 00:24:07,370
you expect it um it might be worth

00:24:05,240 --> 00:24:09,679
rather putting the effort in like to

00:24:07,370 --> 00:24:12,049
figure out how to how to solve that in a

00:24:09,679 --> 00:25:40,130
different way segregation rather than

00:24:12,049 --> 00:25:41,750
like I think that was like I think it's

00:25:40,130 --> 00:25:43,130
like trekking that we would want to

00:25:41,750 --> 00:25:53,330
implement it's actually to it have

00:25:43,130 --> 00:25:54,919
because I'd like to come right yeah this

00:25:53,330 --> 00:25:56,809
is done about the numbers definitely

00:25:54,919 --> 00:25:59,600
because you could hit something very

00:25:56,809 --> 00:26:02,570
different in the test opposed to your be

00:25:59,600 --> 00:26:04,730
excitation it's something if anyone like

00:26:02,570 --> 00:26:05,690
it's a very hard question you know like

00:26:04,730 --> 00:26:09,279
how do we solve this

00:26:05,690 --> 00:26:09,279
it's a question to everyone in the room

00:26:16,539 --> 00:26:21,649
recycle to collected eight and like even

00:26:19,909 --> 00:26:26,860
if you did that with only catch the

00:26:21,649 --> 00:26:31,090
people who and people who hold out and

00:26:26,860 --> 00:26:34,999
are still I mean I think they won't be

00:26:31,090 --> 00:26:36,320
well I mean that's a like you know if

00:26:34,999 --> 00:26:37,580
you want to Cirque like do you have to

00:26:36,320 --> 00:26:39,190
start at some point otherwise you will

00:26:37,580 --> 00:26:42,830
never get there and like that that that

00:26:39,190 --> 00:26:44,809
that approach is perpetually true I'm

00:26:42,830 --> 00:26:46,190
not until you look at it and then five

00:26:44,809 --> 00:26:59,509
years down the line then you can like

00:26:46,190 --> 00:27:02,869
always have that data source yes yeah

00:26:59,509 --> 00:27:05,570
well I believe we have a lot of

00:27:02,869 --> 00:27:08,480
api's which we could attract for example

00:27:05,570 --> 00:27:11,179
like we have a lot of agendas that are

00:27:08,480 --> 00:27:13,759
officially private but effectively all

00:27:11,179 --> 00:27:21,110
public that means every underscore and

00:27:13,759 --> 00:27:25,389
say in built for and as yeah like in

00:27:21,110 --> 00:27:25,389
people monkey catch them like crazy and

00:27:27,690 --> 00:27:33,220
[Laughter]

00:27:34,929 --> 00:28:04,840
we break it streams under bar

00:28:31,020 --> 00:28:34,099
[Music]

00:28:41,200 --> 00:28:44,309
[Music]

00:29:08,040 --> 00:29:11,140
[Music]

00:30:30,980 --> 00:30:40,370
then obviously I mean developers needs

00:30:35,250 --> 00:30:40,370
to take care of scanning

00:31:10,640 --> 00:31:13,859
[Music]

00:31:41,549 --> 00:32:05,289
like this are you suggesting that follow

00:31:51,700 --> 00:32:12,279
the cycle from Google to the end I don't

00:32:05,289 --> 00:32:14,049
see what's wrong with like great create

00:32:12,279 --> 00:32:17,799
because like when you do that kind of

00:32:14,049 --> 00:32:19,029
like it just it's hard the consumer

00:32:17,799 --> 00:32:21,009
choice now like which of these

00:32:19,029 --> 00:32:25,480
deprecations are going to be serious

00:32:21,009 --> 00:32:42,749
which ones are just like using if you

00:32:25,480 --> 00:32:42,749
have a clear process everybody knows you

00:33:00,690 --> 00:33:03,759
[Music]

00:33:59,920 --> 00:34:10,610
places like you know right now they

00:34:02,840 --> 00:34:19,460
would have otherwise if we would point

00:34:10,610 --> 00:34:22,730
where we really have yes I think we

00:34:19,460 --> 00:34:31,610
could get to a we can actually remove us

00:34:22,730 --> 00:34:38,570
then let me know that was that it was

00:34:31,610 --> 00:34:47,840
not necessarily possible so I can fix my

00:34:38,570 --> 00:34:53,210
code just that's just I think before we

00:34:47,840 --> 00:34:55,700
can talk about very clear process we

00:34:53,210 --> 00:34:59,440
have to start on the note side and then

00:34:55,700 --> 00:34:59,440
we can put on the ecosystem

00:35:22,000 --> 00:35:28,700
and I totally in this case and I see we

00:35:25,250 --> 00:35:31,520
also have here somewhere and then MIT

00:35:28,700 --> 00:35:34,010
the point argued vacations useful at all

00:35:31,520 --> 00:35:36,500
because should be sometimes just say

00:35:34,010 --> 00:35:38,799
okay let's break the APR is then what we

00:35:36,500 --> 00:35:41,420
want to do instead for some API is

00:35:38,799 --> 00:35:44,000
because if people don't follow up on two

00:35:41,420 --> 00:35:46,490
vacations if it's just noise so to speak

00:35:44,000 --> 00:35:51,079
on the terminal and just annoying to

00:35:46,490 --> 00:35:52,609
people is it really like this is just

00:35:51,079 --> 00:35:55,130
depression I don't say this is right or

00:35:52,609 --> 00:35:57,410
wrong you know but it's something I want

00:35:55,130 --> 00:35:59,990
to get some feedback on as well because

00:35:57,410 --> 00:36:02,270
having a strict policy about that makes

00:35:59,990 --> 00:36:05,930
it difficult depending on what API we

00:36:02,270 --> 00:36:08,960
use because sometimes it's rarely used

00:36:05,930 --> 00:36:11,000
API and if we duplicate that it's

00:36:08,960 --> 00:36:14,359
probably it doesn't hurt their system so

00:36:11,000 --> 00:36:19,220
bad but then we have other API is there

00:36:14,359 --> 00:36:21,020
he is so often and that removing it

00:36:19,220 --> 00:36:24,260
would break it always why would it

00:36:21,020 --> 00:36:26,779
always break because a lot of modules

00:36:24,260 --> 00:36:29,089
are not maintained and they are all used

00:36:26,779 --> 00:36:31,520
in production which is a big problem and

00:36:29,089 --> 00:36:33,440
probably something we should discuss at

00:36:31,520 --> 00:36:35,930
some point how can we overcome that well

00:36:33,440 --> 00:36:39,950
it's not only about updating the note

00:36:35,930 --> 00:36:55,210
version itself it's also how can we make

00:36:39,950 --> 00:36:55,210
sure to all right

00:37:11,900 --> 00:37:16,789
and then use the new API I would just

00:37:14,599 --> 00:37:51,740
like to remind everyone that still

00:37:16,789 --> 00:37:56,359
exists all right useful so so now on my

00:37:51,740 --> 00:37:59,150
radar and I actually prefer that we need

00:37:56,359 --> 00:38:04,130
to make sure that figure out what to do

00:37:59,150 --> 00:38:05,750
about that this by that is on you check

00:38:04,130 --> 00:38:08,839
that they also have a test the test note

00:38:05,750 --> 00:38:13,010
Knightley's you watch the boob would

00:38:08,839 --> 00:38:16,130
probably it's nice application there was

00:38:13,010 --> 00:38:18,950
the same thing is on the modules that

00:38:16,130 --> 00:38:25,640
already exist out there which also set

00:38:18,950 --> 00:38:28,039
and one thing that I think love to use

00:38:25,640 --> 00:38:32,270
is something similar to beekeeper where

00:38:28,039 --> 00:38:37,130
it would open issues saying oh you're

00:38:32,270 --> 00:38:38,990
using this API your code that is gonna

00:38:37,130 --> 00:38:41,420
be deprecated sooner we consider

00:38:38,990 --> 00:38:44,569
different date anymore something anyone

00:38:41,420 --> 00:38:46,400
the level it could be good or that would

00:38:44,569 --> 00:38:48,109
be really really awesome if we would

00:38:46,400 --> 00:38:51,039
consider building that as part of the

00:38:48,109 --> 00:38:51,039
project I'll work on that

00:39:18,609 --> 00:39:24,399
but above all right

00:39:21,300 --> 00:39:24,399
[Music]

00:39:37,009 --> 00:39:44,390
you found the underscore and now you're

00:39:41,509 --> 00:39:46,339
updating the problem is like initially

00:39:44,390 --> 00:39:48,529
when I counted my first like deprecation

00:39:46,339 --> 00:39:51,019
morning as a user I was alright I should

00:39:48,529 --> 00:39:54,200
like I should fix that because it's

00:39:51,019 --> 00:39:57,289
gonna be removed but like by our section

00:39:54,200 --> 00:39:58,789
on removing stuff you know like like as

00:39:57,289 --> 00:40:01,069
it usually you just get trained to like

00:39:58,789 --> 00:40:03,079
all right like what if I just like mute

00:40:01,069 --> 00:40:05,359
those you know because it's like it's

00:40:03,079 --> 00:40:06,920
not gonna do it right like there's like

00:40:05,359 --> 00:40:10,549
the stuff is gonna be around which means

00:40:06,920 --> 00:40:13,549
that like why would you have because

00:40:10,549 --> 00:40:15,380
like in other projects you know if I see

00:40:13,549 --> 00:40:17,119
something is deprecated I know I need to

00:40:15,380 --> 00:40:18,980
get back get my stuff together to

00:40:17,119 --> 00:40:21,230
actually fix that because it will

00:40:18,980 --> 00:40:23,119
disappear at one point and then I can't

00:40:21,230 --> 00:40:26,029
blame anyone because like I've been

00:40:23,119 --> 00:40:28,700
warned but if like no keeps on setting

00:40:26,029 --> 00:40:30,259
the precedence of like oh like we marked

00:40:28,700 --> 00:40:35,690
something as deprecated but we keep it

00:40:30,259 --> 00:40:38,509
because we can't break ecosystem rule

00:40:35,690 --> 00:40:39,980
changes one is I'm gonna start timeing

00:40:38,509 --> 00:40:41,690
not that anybody's going over but we are

00:40:39,980 --> 00:40:43,220
running out of time and - I'm gonna leap

00:40:41,690 --> 00:40:55,750
ahead to people who have not yet had a

00:40:43,220 --> 00:41:02,380
chance to talk so our task is to

00:40:55,750 --> 00:41:02,380
maintain those modules that are why

00:41:03,369 --> 00:41:10,150
usage but not maintaining for example so

00:41:07,069 --> 00:41:14,299
in our agenda there is also a tool for

00:41:10,150 --> 00:41:18,049
transpiling for example we built a demo

00:41:14,299 --> 00:41:24,910
that could convert new backward to

00:41:18,049 --> 00:41:29,210
background and open api so we are very

00:41:24,910 --> 00:41:30,230
good mmm yeah so we are in the green

00:41:29,210 --> 00:41:32,029
keeper circle

00:41:30,230 --> 00:41:33,890
I don't Nick it has done a lot of manual

00:41:32,029 --> 00:41:37,349
outreach working like for the buffer

00:41:33,890 --> 00:41:39,359
icon circular depreciation and

00:41:37,349 --> 00:41:42,420
like if it feels like that I wouldn't

00:41:39,359 --> 00:41:44,130
leave that to intrude kind of

00:41:42,420 --> 00:41:47,910
frustrating you have to interact a lot

00:41:44,130 --> 00:41:52,680
with the maintainer themselves yeah it'd

00:41:47,910 --> 00:41:56,279
be good for an opt-in solution and and

00:41:52,680 --> 00:41:58,259
preparing like like translation and

00:41:56,279 --> 00:42:01,319
purchase I mean like for those kids I

00:41:58,259 --> 00:42:04,099
would prefer to just duplicate any

00:42:01,319 --> 00:42:06,539
documentation duplicate the alias

00:42:04,099 --> 00:42:09,059
because if you can transfer you can also

00:42:06,539 --> 00:42:11,099
provide like an alias or a wrapper or

00:42:09,059 --> 00:42:16,109
something around like that and not have

00:42:11,099 --> 00:42:19,529
anybody that's ideal for me okay Reuben

00:42:16,109 --> 00:42:21,839
90 seconds go Derrick follow up on that

00:42:19,529 --> 00:42:24,119
one so I personally think in

00:42:21,839 --> 00:42:26,759
documentation duplications are normally

00:42:24,119 --> 00:42:29,699
completely useless mostly speak because

00:42:26,759 --> 00:42:32,279
and we already like and last week on a

00:42:29,699 --> 00:42:34,440
conference I've been at the main problem

00:42:32,279 --> 00:42:37,979
is no chance darts people don't look at

00:42:34,440 --> 00:42:39,869
it and if we document that it's

00:42:37,979 --> 00:42:41,789
duplicated no one will change anything

00:42:39,869 --> 00:42:44,209
they would even implement sometimes the

00:42:41,789 --> 00:42:46,829
documents apart and so if we did not

00:42:44,209 --> 00:42:49,140
document an API before and now have it

00:42:46,829 --> 00:42:50,849
in the dots where we say hey this API is

00:42:49,140 --> 00:42:52,769
duplicated then - some people might

00:42:50,849 --> 00:42:54,150
actually use it instead of not having

00:42:52,769 --> 00:42:54,569
used it before because they looked at

00:42:54,150 --> 00:42:56,369
the docks

00:42:54,569 --> 00:43:00,539
so it's like the opposite of what we

00:42:56,369 --> 00:43:05,690
actually want to achieve um and that's I

00:43:00,539 --> 00:43:09,150
really and I think we should not have

00:43:05,690 --> 00:43:11,309
documentation duplications in 90% of the

00:43:09,150 --> 00:43:13,709
cases most of the time they are not

00:43:11,309 --> 00:43:18,040
useful they do something else than we

00:43:13,709 --> 00:43:21,199
really think they could they would

00:43:18,040 --> 00:43:21,199
[Music]

00:45:07,949 --> 00:45:10,949
if

00:46:00,420 --> 00:46:03,469
[Music]

00:46:21,780 --> 00:46:27,700
additionally I mean not only

00:46:25,990 --> 00:46:30,820
conditioning like obviously lighting

00:46:27,700 --> 00:46:45,760
stuff but just when we deprecate things

00:46:30,820 --> 00:46:47,830
something visibly not not pending so I

00:46:45,760 --> 00:46:50,440
guess this comes in two types of

00:46:47,830 --> 00:46:52,450
duplications yeah we have different

00:46:50,440 --> 00:46:54,990
types and that's the problem because

00:46:52,450 --> 00:46:58,930
sometimes we have human facing ones

00:46:54,990 --> 00:47:00,790
which are consuming for example in the

00:46:58,930 --> 00:47:04,240
battle yeah you're using the repple

00:47:00,790 --> 00:47:06,010
you're in the actual end user and there

00:47:04,240 --> 00:47:08,710
is something whyever i don't know what

00:47:06,010 --> 00:47:10,420
in the repple duplicated and now you get

00:47:08,710 --> 00:47:11,770
to notification right away that's the

00:47:10,420 --> 00:47:14,800
user that should receive the

00:47:11,770 --> 00:47:17,860
notification awesome but then we have

00:47:14,800 --> 00:47:20,260
the buffer one and you know it's like in

00:47:17,860 --> 00:47:22,060
which is buffer who's actually the

00:47:20,260 --> 00:47:24,580
person who reaches it could dependent

00:47:22,060 --> 00:47:27,400
like it could reach anyone and it could

00:47:24,580 --> 00:47:30,310
be like a deep down dependency where you

00:47:27,400 --> 00:47:33,370
don't and have any influence on the

00:47:30,310 --> 00:47:34,780
maintainer you cannot change it and for

00:47:33,370 --> 00:47:37,960
whatever reason you are also bound to

00:47:34,780 --> 00:47:41,860
using their modules company pods and

00:47:37,960 --> 00:47:44,380
then we have api's and then i use the

00:47:41,860 --> 00:47:46,030
modules used by applications different

00:47:44,380 --> 00:47:47,920
frequencies of usages

00:47:46,030 --> 00:47:51,010
so all these implications i think we

00:47:47,920 --> 00:47:54,160
should start thinking not in the generic

00:47:51,010 --> 00:47:57,360
term for duplications but more about it

00:47:54,160 --> 00:48:01,870
for what api's are we actually

00:47:57,360 --> 00:48:03,880
recommending to always go to a runtime

00:48:01,870 --> 00:48:06,750
duplication which would be in your thing

00:48:03,880 --> 00:48:10,120
but other API is actually pretty bad as

00:48:06,750 --> 00:48:12,970
such so we have to determine while

00:48:10,120 --> 00:48:17,609
implicating things what type is it and

00:48:12,970 --> 00:48:30,660
by whom is abused and after

00:48:17,609 --> 00:48:32,279
we are able to identify and I have an

00:48:30,660 --> 00:49:15,249
announcement

00:48:32,279 --> 00:49:17,229
James yeah I mean the thing with buffer

00:49:15,249 --> 00:49:18,759
is that like it's twice it was a poem

00:49:17,229 --> 00:49:24,939
but it's totally possible use it in a

00:49:18,759 --> 00:49:27,159
safe way probably okay okay important

00:49:24,939 --> 00:49:29,769
lunch announcement is as follows

00:49:27,159 --> 00:49:32,409
lunch will be in the restaurant area

00:49:29,769 --> 00:49:35,499
downstairs so not where we had the

00:49:32,409 --> 00:49:37,269
breakfast but where if you are staying

00:49:35,499 --> 00:49:39,009
in the hotel you go in and you sign your

00:49:37,269 --> 00:49:42,339
room number and you have breakfast there

00:49:39,009 --> 00:49:43,809
that's where lunch will be so so if you

00:49:42,339 --> 00:49:45,390
come out here make a left to go down the

00:49:43,809 --> 00:49:50,529
stairs

00:49:45,390 --> 00:49:54,659
sure time's up but this this sounds

00:49:50,529 --> 00:49:54,659
really really right for some hallway

00:50:04,430 --> 00:50:07,560
[Music]

00:50:13,220 --> 00:50:18,240
[Laughter]

00:51:26,369 --> 00:51:42,490
you can see because we have a UI ensure

00:51:29,950 --> 00:51:46,470
the use of what I wouldn't mind I think

00:51:42,490 --> 00:51:46,470
that would be a good way to us to also

00:51:50,470 --> 00:52:02,080
[Music]

00:51:53,340 --> 00:52:04,510
because he know so well would it though

00:52:02,080 --> 00:52:07,030
no that's different

00:52:04,510 --> 00:52:14,040
what you're asking about is we users

00:52:07,030 --> 00:52:20,109
install the images we looking into if we

00:52:14,040 --> 00:52:22,210
don't do that currently it but I mean

00:52:20,109 --> 00:52:26,200
like for example when no cords and the

00:52:22,210 --> 00:52:28,570
flag to create the file you know with

00:52:26,200 --> 00:52:31,960
all the data and then you could just

00:52:28,570 --> 00:52:36,820
send it like once a day or so and to

00:52:31,960 --> 00:52:40,440
note anomalies when they opt into that

00:52:36,820 --> 00:52:40,440
is an option in the configuration yeah

00:52:51,780 --> 00:52:56,620
what about you can actually declare my

00:52:54,430 --> 00:52:59,050
cap tiny in which it would be tracked

00:52:56,620 --> 00:53:01,930
you know if you could define I want you

00:52:59,050 --> 00:53:04,540
to have this and tracking them for one

00:53:01,930 --> 00:53:05,680
day but then it would be deactivated

00:53:04,540 --> 00:53:07,720
automatically if you're doing that

00:53:05,680 --> 00:53:13,030
already right if you're building that

00:53:07,720 --> 00:53:14,440
into two for example by again agent you

00:53:13,030 --> 00:53:15,880
might as well difficult is of course is

00:53:14,440 --> 00:53:17,620
if this is something that usually to set

00:53:15,880 --> 00:53:19,930
up yes he did he might as well just set

00:53:17,620 --> 00:53:22,150
it up for his no process yes the problem

00:53:19,930 --> 00:53:25,320
is that how do we meet you keep Dennis

00:53:22,150 --> 00:53:27,730
name so it would be something on top to

00:53:25,320 --> 00:53:31,530
the feature itself is implemented in

00:53:27,730 --> 00:53:36,040
fourth but and to actually opt into it

00:53:31,530 --> 00:53:44,500
it's like but how do they opt into if it

00:53:36,040 --> 00:53:46,930
didn't if the agents covered yeah yeah

00:53:44,500 --> 00:53:50,560
yeah I think NYC's a better a better

00:53:46,930 --> 00:53:52,540
approach I think so what do you think

00:53:50,560 --> 00:54:06,610
about the time base like to because I

00:53:52,540 --> 00:54:09,790
mean for single day you know you could

00:54:06,610 --> 00:54:15,240
have like shake it for some days I

00:54:09,790 --> 00:54:17,290
honestly would just do it like an

00:54:15,240 --> 00:54:19,090
interim in the press company they have

00:54:17,290 --> 00:54:21,220
to deploy this like I get nothing from

00:54:19,090 --> 00:54:23,230
it other than being nice and there is a

00:54:21,220 --> 00:54:24,280
risk that like I will be interrupted in

00:54:23,230 --> 00:54:27,100
the middle of the night because there's

00:54:24,280 --> 00:54:35,160
a performance issue so it sounds like a

00:54:27,100 --> 00:54:39,070
hard sell but the coverage better it was

00:54:35,160 --> 00:54:41,080
saying render me like if you

00:54:39,070 --> 00:54:43,620
install a spike Lord stuff like I don't

00:54:41,080 --> 00:54:46,380
know there was something and even like

00:54:43,620 --> 00:54:50,170
think about this like from a code copy

00:54:46,380 --> 00:54:52,720
use foot cut and currently I mean we

00:54:50,170 --> 00:54:54,970
we can see like a nice with colors and

00:54:52,720 --> 00:54:56,560
grab and like a nice grass like where

00:54:54,970 --> 00:55:00,010
would we have this coverage and others

00:54:56,560 --> 00:55:02,140
in super nice apply to that kind of

00:55:00,010 --> 00:55:04,210
coverage is also about like which a guy

00:55:02,140 --> 00:55:05,980
who uses I guess like so it would

00:55:04,210 --> 00:55:07,660
actually be nice for me just for me as a

00:55:05,980 --> 00:55:12,220
user to have the same information

00:55:07,660 --> 00:55:13,900
hmm and and so it actually makes sense

00:55:12,220 --> 00:55:17,050
for for coming that codecop

00:55:13,900 --> 00:55:19,270
to kill that in yes because me as a user

00:55:17,050 --> 00:55:22,780
I would actually like that so how can we

00:55:19,270 --> 00:55:25,180
sell the actual implementation it's a

00:55:22,780 --> 00:55:27,270
problem so will you you have to build a

00:55:25,180 --> 00:55:39,540
dirty yeah it's basically just logging

00:55:27,270 --> 00:55:44,560
whatever this like similar to how NPM is

00:55:39,540 --> 00:55:46,720
constantly tweeting like download

00:55:44,560 --> 00:55:49,090
numbers and okay this is the top 10 most

00:55:46,720 --> 00:55:50,740
out of the things and people are using

00:55:49,090 --> 00:55:52,960
this video version of that node version

00:55:50,740 --> 00:55:55,900
and stuff like that is not directly

00:55:52,960 --> 00:55:57,610
accessible but but they have have access

00:55:55,900 --> 00:56:00,670
to right so they are aggregating a lot

00:55:57,610 --> 00:56:02,020
of data that is normally not accessible

00:56:00,670 --> 00:56:06,250
and then they they're tweeting about it

00:56:02,020 --> 00:56:07,780
so codecop could potentially there

00:56:06,250 --> 00:56:11,520
they're collecting all this data anyway

00:56:07,780 --> 00:56:15,730
they could aggregate it and they could

00:56:11,520 --> 00:56:17,830
send it to to the no foundation open

00:56:15,730 --> 00:56:19,240
gates foundation anonymously it doesn't

00:56:17,830 --> 00:56:23,190
have to say which project is using and

00:56:19,240 --> 00:56:25,750
just say there is ten percent of our

00:56:23,190 --> 00:56:28,060
users running on our system are using

00:56:25,750 --> 00:56:30,820
this API yes you know and I'm not even

00:56:28,060 --> 00:56:32,680
sure they would have to depending on

00:56:30,820 --> 00:56:36,460
their privacy policy but I'm sure they

00:56:32,680 --> 00:56:39,190
because him already have access they all

00:56:36,460 --> 00:56:40,930
would already have that right right yeah

00:56:39,190 --> 00:56:44,620
I say go probably try query on their

00:56:40,930 --> 00:56:48,130
system information so I think we just

00:56:44,620 --> 00:56:50,470
I'm not sure who code cut is yeah I

00:56:48,130 --> 00:56:52,900
assume that they're not know kiss only

00:56:50,470 --> 00:56:55,210
people people I think they probably all

00:56:52,900 --> 00:56:58,480
to do movie and stuff but if you could

00:56:55,210 --> 00:57:00,700
if you could get the code or similar

00:56:58,480 --> 00:57:03,610
there's other companies good coverage is

00:57:00,700 --> 00:57:06,100
well used within the know

00:57:03,610 --> 00:57:34,480
there will be an interesting discussion

00:57:06,100 --> 00:57:36,220
I think method of no opt-in is just like

00:57:34,480 --> 00:57:43,840
we have plenty of data about buffer

00:57:36,220 --> 00:57:46,300
usage it's great if so many underscores

00:57:43,840 --> 00:57:48,910
anything arts and we laugh too now we

00:57:46,300 --> 00:57:51,520
have private stuff we could start moving

00:57:48,910 --> 00:57:54,760
things you know to actually reduce

00:57:51,520 --> 00:57:57,190
burden for us as containers to sink

00:57:54,760 --> 00:57:59,290
about and in this case if you see that

00:57:57,190 --> 00:58:01,710
API is actually not used in the wild

00:57:59,290 --> 00:58:04,660
then you would be able to just change it

00:58:01,710 --> 00:58:06,880
would stop somebody said that this was

00:58:04,660 --> 00:58:09,010
just continuing to be a problem going

00:58:06,880 --> 00:58:25,660
forward and it's just not grow I don't

00:58:09,010 --> 00:58:27,490
think so because in the future I'm

00:58:25,660 --> 00:58:29,320
saying there is always gonna be

00:58:27,490 --> 00:58:32,560
deprecations like there's always gonna

00:58:29,320 --> 00:58:36,010
be things are gonna change this at some

00:58:32,560 --> 00:58:37,990
point I can see us deciding yeah okay

00:58:36,010 --> 00:58:41,110
but there's two ways to tackle it right

00:58:37,990 --> 00:58:42,940
there's anything so all the stuff

00:58:41,110 --> 00:58:45,340
underscore some there would be useful

00:58:42,940 --> 00:58:47,650
yeah I used there's not kind of be more

00:58:45,340 --> 00:58:49,900
those no agree that we're not doing

00:58:47,650 --> 00:58:51,820
anything like if you look at what front

00:58:49,900 --> 00:58:53,740
end is doing like what opponents are

00:58:51,820 --> 00:58:56,050
doing and they have like this problem

00:58:53,740 --> 00:58:57,580
thanks a hundred because the stuff a lot

00:58:56,050 --> 00:58:59,080
more often and if you look at some of

00:58:57,580 --> 00:59:00,520
the worst offenders like angular

00:58:59,080 --> 00:59:02,230
they have pretty decent tooling that

00:59:00,520 --> 00:59:07,050
will actually like migrate your projects

00:59:02,230 --> 00:59:09,280
from API a to AGA and use people and and

00:59:07,050 --> 00:59:12,480
it's easier for them because for example

00:59:09,280 --> 00:59:14,380
if we create like like a babel transform

00:59:12,480 --> 00:59:16,829
that would be awesome but if someone is

00:59:14,380 --> 00:59:19,950
for example using tax scripts

00:59:16,829 --> 00:59:21,420
and like which is yes or like like

00:59:19,950 --> 00:59:23,729
anything else that's one set they don't

00:59:21,420 --> 00:59:25,079
like parse the syntax then it sort of

00:59:23,729 --> 00:59:27,719
becomes problem I guess they're looking

00:59:25,079 --> 00:59:31,589
past I've script but like the next thing

00:59:27,719 --> 00:59:33,239
that's not like directly possible by the

00:59:31,589 --> 00:59:35,640
tool and the other thing they have is

00:59:33,239 --> 00:59:37,489
like compatibility packages like react

00:59:35,640 --> 00:59:41,219
on we have to UM compare and then like

00:59:37,489 --> 00:59:43,200
if you the promised dependencies like if

00:59:41,219 --> 00:59:44,579
you have for example if you want to ever

00:59:43,200 --> 00:59:46,469
definitely the next step you can say

00:59:44,579 --> 00:59:47,759
okay this API not develop anymore and

00:59:46,469 --> 00:59:49,349
then you have a million packages to

00:59:47,759 --> 00:59:50,819
choose next stick you want to make next

00:59:49,349 --> 00:59:53,219
thing available to those packages but

00:59:50,819 --> 00:59:58,219
not to your code it's all recorded by

00:59:53,219 --> 00:59:58,219
the way Oh should I switch it off for

01:00:07,339 --> 01:00:22,890
let's say for example using different

01:00:19,529 --> 01:00:23,999
versions like Bluebird 3.5 in even

01:00:22,890 --> 01:00:25,769
though we've been trying to get him to

01:00:23,999 --> 01:00:27,719
use it less they're using it more like

01:00:25,769 --> 01:00:29,339
the last year in the summit we added a

01:00:27,719 --> 01:00:31,079
big warning that says hey don't use

01:00:29,339 --> 01:00:32,940
Bluebird if you're you you can use any

01:00:31,079 --> 01:00:34,799
purposes and a bunch of that so it

01:00:32,940 --> 01:00:37,279
responds not then download numbers went

01:00:34,799 --> 01:00:43,499
up from like 7 million to 12 minute

01:00:37,279 --> 01:00:48,029
didn't work with wall so let's say you

01:00:43,499 --> 01:00:59,519
point which is two years old and control

01:00:48,029 --> 01:01:01,890
weekend so we need some way recording

01:00:59,519 --> 01:01:07,339
alright so I'm not sure how did I start

01:01:01,890 --> 01:01:07,339

YouTube URL: https://www.youtube.com/watch?v=qt6tisqFzQc


