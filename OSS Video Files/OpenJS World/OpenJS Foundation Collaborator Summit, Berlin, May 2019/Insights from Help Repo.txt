Title: Insights from Help Repo
Publication date: 2019-06-03
Playlist: OpenJS Foundation Collaborator Summit, Berlin, May 2019
Description: 
	OpenJS Foundation Collaborator Summit, Berlin, 2019
Captions: 
	00:00:00,030 --> 00:00:04,650
okay so good afternoon thanks for

00:00:02,429 --> 00:00:07,859
joining this session the whole idea of

00:00:04,650 --> 00:00:10,860
insight from Phil purple is to you know

00:00:07,859 --> 00:00:15,719
look at the usage Catalan as well as

00:00:10,860 --> 00:00:18,090
patterns on the problem which user are

00:00:15,719 --> 00:00:20,490
encountering when they make use of the

00:00:18,090 --> 00:00:24,000
audience and what are the type of

00:00:20,490 --> 00:00:27,990
problems which they owed me tetrapod and

00:00:24,000 --> 00:00:30,090
C are what we can do as a team to

00:00:27,990 --> 00:00:32,279
discuss those things at high level you

00:00:30,090 --> 00:00:35,399
can see there is a lip trend that is

00:00:32,279 --> 00:00:38,550
happening and if there is any things we

00:00:35,399 --> 00:00:41,399
can do at the design level at the code

00:00:38,550 --> 00:00:43,680
level or at the documentation level back

00:00:41,399 --> 00:00:46,530
in the cool so that the overall user

00:00:43,680 --> 00:00:48,719
experience is improved so that's the

00:00:46,530 --> 00:00:50,280
whole of ideas I've been spending some

00:00:48,719 --> 00:00:55,199
time on it and provoked for the last

00:00:50,280 --> 00:00:56,789
maybe one under fiercest so couple of

00:00:55,199 --> 00:00:58,219
caveats these are my personal

00:00:56,789 --> 00:01:00,329
observations not necessarily

00:00:58,219 --> 00:01:05,159
representing can you group for the

00:01:00,329 --> 00:01:07,770
project Aztec poll and then I propose is

00:01:05,159 --> 00:01:10,320
a running report that means all the

00:01:07,770 --> 00:01:12,960
years there have been hundreds of issues

00:01:10,320 --> 00:01:17,189
I'm not representing all the issues as

00:01:12,960 --> 00:01:19,229
such the ones which came across me once

00:01:17,189 --> 00:01:21,990
which I was part of you no problem

00:01:19,229 --> 00:01:26,360
declination etc are the one which are a

00:01:21,990 --> 00:01:28,110
person directly and then I

00:01:26,360 --> 00:01:30,240
recommendations against each of the

00:01:28,110 --> 00:01:32,579
issues for each for the problem patterns

00:01:30,240 --> 00:01:36,390
again those are not necessarily hard

00:01:32,579 --> 00:01:39,659
bound or final recommendations I just

00:01:36,390 --> 00:01:42,869
put some some observations as based on

00:01:39,659 --> 00:01:45,990
my understanding as a team my

00:01:42,869 --> 00:01:48,420
expectation was that we look at that as

00:01:45,990 --> 00:01:52,020
a baseline and then apply some

00:01:48,420 --> 00:01:53,810
collective intelligence and see what so

00:01:52,020 --> 00:01:59,070
that's the whole idea

00:01:53,810 --> 00:02:01,110
then let's look at the first one against

00:01:59,070 --> 00:02:04,229
each other problems I guess I have four

00:02:01,110 --> 00:02:06,090
of them at high level each of them I

00:02:04,229 --> 00:02:10,080
have the problem and the root cause and

00:02:06,090 --> 00:02:11,630
the combination so NPM and nor

00:02:10,080 --> 00:02:14,270
installation

00:02:11,630 --> 00:02:17,420
reinstallation and uninstallation or

00:02:14,270 --> 00:02:21,170
migration reinstallation of migration

00:02:17,420 --> 00:02:23,690
this is by far the most common issue

00:02:21,170 --> 00:02:26,180
which we see across the board without

00:02:23,690 --> 00:02:28,310
any exception so if you have 100 open

00:02:26,180 --> 00:02:31,070
issues you see around 40 of them

00:02:28,310 --> 00:02:34,370
belonging to this cattle that's it

00:02:31,070 --> 00:02:36,950
that's a very conclusive scenario so

00:02:34,370 --> 00:02:41,090
what is the problem problem means users

00:02:36,950 --> 00:02:46,130
are not able to install node.js probably

00:02:41,090 --> 00:02:49,220
the exceptions they get file not found

00:02:46,130 --> 00:02:50,050
or some weekly level crashes or things

00:02:49,220 --> 00:02:54,320
like that

00:02:50,050 --> 00:02:57,020
then the notable upgrade they had a

00:02:54,320 --> 00:02:59,840
valid healthy nor installation but when

00:02:57,020 --> 00:03:02,390
it comes for creation it breaks in very

00:02:59,840 --> 00:03:05,330
strange man and then uninstallation

00:03:02,390 --> 00:03:08,240
again either installation is not

00:03:05,330 --> 00:03:12,230
complete or it leaves some you know

00:03:08,240 --> 00:03:14,840
files in the filesystem exit and they

00:03:12,230 --> 00:03:17,360
get this sort of exceptions as well when

00:03:14,840 --> 00:03:20,030
it comes to NPM all the things which

00:03:17,360 --> 00:03:23,000
apply for the node.js installation apply

00:03:20,030 --> 00:03:26,420
as it is in addition to that a number of

00:03:23,000 --> 00:03:29,240
other issues like proxy failures network

00:03:26,420 --> 00:03:31,730
connectivity failures the mismatch of

00:03:29,240 --> 00:03:34,790
the version between Noren and PM and all

00:03:31,730 --> 00:03:39,610
sort of things so I would say Enfield

00:03:34,790 --> 00:03:45,140
installation issue is by far more

00:03:39,610 --> 00:03:48,380
problematic damages related issues so

00:03:45,140 --> 00:03:54,620
the root cause in my opinion is that you

00:03:48,380 --> 00:03:58,010
have a number of distributors at high

00:03:54,620 --> 00:04:01,370
level I will classified into one is the

00:03:58,010 --> 00:04:05,990
one which has a native installer

00:04:01,370 --> 00:04:09,770
something like that get or increase my

00:04:05,990 --> 00:04:11,720
voice the second classification is the

00:04:09,770 --> 00:04:14,530
distributor has a custom installer

00:04:11,720 --> 00:04:18,470
something like the one which official

00:04:14,530 --> 00:04:20,359
node.js community delivers which has an

00:04:18,470 --> 00:04:22,700
MSI installer something which is

00:04:20,359 --> 00:04:24,830
associated with that the native

00:04:22,700 --> 00:04:28,310
installer versus custom installer

00:04:24,830 --> 00:04:31,370
now if you install node.js say version

00:04:28,310 --> 00:04:33,949
10 using the native installer and then

00:04:31,370 --> 00:04:36,860
you want to install or upgrade node

00:04:33,949 --> 00:04:39,379
version to 11 of 12 using it another

00:04:36,860 --> 00:04:42,199
installer then there is no coordination

00:04:39,379 --> 00:04:44,960
between these installers about there are

00:04:42,199 --> 00:04:46,400
where you kept the cache file it's very

00:04:44,960 --> 00:04:48,530
capita click on files or the

00:04:46,400 --> 00:04:51,560
configuration files etc what are the

00:04:48,530 --> 00:04:54,050
shortcuts which you kept and when you

00:04:51,560 --> 00:04:56,210
upgrade which items you need to be a

00:04:54,050 --> 00:04:59,479
which items you need to replace and

00:04:56,210 --> 00:05:03,110
things like that that is by far the most

00:04:59,479 --> 00:05:06,020
common root cause in my opinion ee and

00:05:03,110 --> 00:05:07,940
then when it comes to NPM it's more

00:05:06,020 --> 00:05:10,520
tricky I haven't looked at the can be em

00:05:07,940 --> 00:05:14,389
client as such to understand what is the

00:05:10,520 --> 00:05:17,449
type of problems that comes in but in my

00:05:14,389 --> 00:05:20,240
opinion and be inclined which is NPM CLI

00:05:17,449 --> 00:05:22,960
gorgeous performance and the number of

00:05:20,240 --> 00:05:25,550
operations like to sorting the module

00:05:22,960 --> 00:05:27,530
inactive the network and then look at

00:05:25,550 --> 00:05:30,680
some of the cache files in your local

00:05:27,530 --> 00:05:32,360
file system and then try to make some

00:05:30,680 --> 00:05:35,569
meaning out of it and finally or

00:05:32,360 --> 00:05:37,490
downloads the movie and if there is a

00:05:35,569 --> 00:05:39,710
native component in that you build it

00:05:37,490 --> 00:05:43,310
using the build tool chain and then

00:05:39,710 --> 00:05:45,940
finally in in that in that sequence of

00:05:43,310 --> 00:05:49,690
operations there were the n number of

00:05:45,940 --> 00:05:53,629
expectations that could fail for example

00:05:49,690 --> 00:05:56,029
the version of node.js which the food

00:05:53,629 --> 00:05:57,800
figures out is not necessarily the mode

00:05:56,029 --> 00:06:00,800
that is prevalent in the system and

00:05:57,800 --> 00:06:04,159
things like at high level I will

00:06:00,800 --> 00:06:05,509
classify that in two one is resolution

00:06:04,159 --> 00:06:11,029
of the NPM

00:06:05,509 --> 00:06:14,680
script itself as we know NPM client is a

00:06:11,029 --> 00:06:17,330
Java Script it is NPM CLI torches and

00:06:14,680 --> 00:06:22,190
that is resolved through a number of

00:06:17,330 --> 00:06:24,830
magical steps and VM as could is

00:06:22,190 --> 00:06:27,289
available in the path and then that

00:06:24,830 --> 00:06:30,289
script basically redirects to another

00:06:27,289 --> 00:06:32,899
file called and BMC Li gorgeous so that

00:06:30,289 --> 00:06:35,839
resolution can fail based on what

00:06:32,899 --> 00:06:38,580
shortcut you kept in your file etc then

00:06:35,839 --> 00:06:41,970
the MU CLI dot J's

00:06:38,580 --> 00:06:46,050
in turn results the North executing

00:06:41,970 --> 00:06:50,009
itself because the first line in BNP MC

00:06:46,050 --> 00:06:53,580
Lyte of J's these she Bank and which

00:06:50,009 --> 00:06:58,590
means you are responding back and then

00:06:53,580 --> 00:07:02,129
this multi-level in solution can go for

00:06:58,590 --> 00:07:05,550
a toss like that would be one of the

00:07:02,129 --> 00:07:08,389
main cost my opinion about anything

00:07:05,550 --> 00:07:12,409
installation of insulation failure I

00:07:08,389 --> 00:07:15,259
absolutely no idea have no idea about

00:07:12,409 --> 00:07:18,419
what are the steps that are involved in

00:07:15,259 --> 00:07:21,690
the NPM CLI approaches to making you the

00:07:18,419 --> 00:07:23,520
combination but in my opinion the

00:07:21,690 --> 00:07:25,949
installation should be standardized

00:07:23,520 --> 00:07:28,650
across all the distributors we should

00:07:25,949 --> 00:07:31,440
have a conversation about with all the

00:07:28,650 --> 00:07:35,599
distributors how you want it installed

00:07:31,440 --> 00:07:39,090
or uninstalled it should we have a

00:07:35,599 --> 00:07:41,759
standard protocol for a steps that is

00:07:39,090 --> 00:07:44,810
you know agreed upon by all the suitors

00:07:41,759 --> 00:07:50,969
so using the shooter's do you mean by

00:07:44,810 --> 00:07:52,469
through the Debian registry clouds and

00:07:50,969 --> 00:07:54,750
like how they're doing it in their thing

00:07:52,469 --> 00:07:59,210
yeah so you talk about like anyone

00:07:54,750 --> 00:07:59,210
that's basically giving a developer yeah

00:07:59,490 --> 00:08:14,449
yeah so in my in my understanding is

00:08:03,900 --> 00:08:16,620
that had and so yes

00:08:14,449 --> 00:08:20,819
each of them have they want to sort of

00:08:16,620 --> 00:08:27,690
words they assume that it is the end

00:08:20,819 --> 00:08:33,240
user uses their own tools and then when

00:08:27,690 --> 00:08:36,810
it comes to the NPM installer i commonly

00:08:33,240 --> 00:08:40,169
look at the NPM debug node figure out

00:08:36,810 --> 00:08:42,479
what is so that's it that's okay

00:08:40,169 --> 00:08:45,270
it's one of bad tool at all it provides

00:08:42,479 --> 00:08:47,250
a step-by-step yoga about what is

00:08:45,270 --> 00:08:51,510
happening at what stage these things are

00:08:47,250 --> 00:08:52,490
failing etc but wanna be serviceability

00:08:51,510 --> 00:08:56,120
pitfall

00:08:52,490 --> 00:08:57,110
I would say Humalog is that the Lord the

00:08:56,120 --> 00:08:59,740
Lord provides

00:08:57,110 --> 00:09:02,690
too many information for a minor issue

00:08:59,740 --> 00:09:04,730
whereas for a very critical issue it

00:09:02,690 --> 00:09:08,420
doesn't provide any infusion so

00:09:04,730 --> 00:09:11,750
basically that the balancing of the low

00:09:08,420 --> 00:09:15,500
frequency or the normalization of the

00:09:11,750 --> 00:09:19,430
quality of the law is very very securely

00:09:15,500 --> 00:09:21,320
represented I mean to say if you are

00:09:19,430 --> 00:09:24,260
downloading if you are connecting the

00:09:21,320 --> 00:09:26,450
internet literally compiling following

00:09:24,260 --> 00:09:30,940
caching some information these are

00:09:26,450 --> 00:09:37,670
highly structured high level activities

00:09:30,940 --> 00:09:42,380
the log is not necessarily normalized or

00:09:37,670 --> 00:09:45,170
you know recorder in in proportion with

00:09:42,380 --> 00:09:47,029
the actual activity or its nature that

00:09:45,170 --> 00:09:51,830
is being answered so that's the key

00:09:47,029 --> 00:09:56,330
thing I wanted then I have no idea about

00:09:51,830 --> 00:09:58,970
who owns the NPM clients I believe there

00:09:56,330 --> 00:10:01,670
is not stream but I don't see anybody

00:09:58,970 --> 00:10:04,250
raising a PR or addressing an issue

00:10:01,670 --> 00:10:08,950
assets we always download the upstream

00:10:04,250 --> 00:10:11,720
and bundle images hasn't had a question

00:10:08,950 --> 00:10:13,790
is it in TN think the company that

00:10:11,720 --> 00:10:18,320
includes people that work on that as

00:10:13,790 --> 00:10:21,880
well so NPM there's NPM org right and

00:10:18,320 --> 00:10:24,440
there's in pink and regardless of who

00:10:21,880 --> 00:10:27,230
write whether it's in the org or the ink

00:10:24,440 --> 00:10:40,220
I believe Inc ultimately it will the IP

00:10:27,230 --> 00:10:44,660
for thanks it's so pretty really now

00:10:40,220 --> 00:10:48,560
yeah it's from okay I'm sorry do they

00:10:44,660 --> 00:10:52,040
control of the search yes yeah I don't

00:10:48,560 --> 00:10:53,630
think they well that said I am not sure

00:10:52,040 --> 00:10:56,300
whether they have granted

00:10:53,630 --> 00:10:57,980
merge right to anyone outside of the

00:10:56,300 --> 00:11:02,980
company I believe they were working

00:10:57,980 --> 00:11:02,980
towards that they were it did not end up

00:11:03,910 --> 00:11:07,329
yeah absolutely

00:11:08,020 --> 00:11:14,680
yeah then I guess good the most only

00:11:12,920 --> 00:11:17,750
thing that we should be looking at is

00:11:14,680 --> 00:11:20,660
NPM phones they can be inclined but the

00:11:17,750 --> 00:11:22,580
issues are the problems that's coming

00:11:20,660 --> 00:11:26,870
from the history Asian is always

00:11:22,580 --> 00:11:28,520
reporter against larges so either we

00:11:26,870 --> 00:11:30,140
should have a documentation on it as

00:11:28,520 --> 00:11:32,960
practice that says it should all

00:11:30,140 --> 00:11:35,360
gangrene director order or we should

00:11:32,960 --> 00:11:39,200
have a better scale a poem on ships will

00:11:35,360 --> 00:11:41,150
be implying Oh a reader like a direct

00:11:39,200 --> 00:11:43,910
like directing them to the NPM dot

00:11:41,150 --> 00:11:47,200
community for questions related to NPM

00:11:43,910 --> 00:11:47,200
we got a response

00:11:56,020 --> 00:12:01,340
oh I installed eight eighteen months ago

00:11:59,810 --> 00:12:03,380
and now I have to install ten that I

00:12:01,340 --> 00:12:07,870
forgot how I installed eight yeah we

00:12:03,380 --> 00:12:17,660
recommend we direct manipulative lean

00:12:07,870 --> 00:12:21,340
Linux and windows yeah I mean I guess I

00:12:17,660 --> 00:12:24,260
guess we can end in itself but early I'm

00:12:21,340 --> 00:12:26,810
more I I might get him what isn't she

00:12:24,260 --> 00:12:29,450
just that to you if it works they choose

00:12:26,810 --> 00:12:43,240
work but other than that like yeah for

00:12:29,450 --> 00:12:51,890
Windows yes exactly

00:12:43,240 --> 00:12:55,400
there's a package manager no it's a it's

00:12:51,890 --> 00:12:58,490
a Windows package manager it's basically

00:12:55,400 --> 00:13:06,830
run well I think they run with it it's

00:12:58,490 --> 00:13:08,510
also true first it's basically yeah I

00:13:06,830 --> 00:13:12,290
believe that is also sometimes I reckon

00:13:08,510 --> 00:13:14,690
they do down I've seen that interment

00:13:12,290 --> 00:13:16,730
myself okay I don't know if it's true or

00:13:14,690 --> 00:13:19,220
not it's good it's all right we totally

00:13:16,730 --> 00:13:23,690
get right over here yeah yeah

00:13:19,220 --> 00:13:26,270
yeah so it will be a good idea to look

00:13:23,690 --> 00:13:29,180
at tooling as an option to redirect the

00:13:26,270 --> 00:13:34,640
issues to NPM but then P my question

00:13:29,180 --> 00:13:37,280
would be if the open concept or the the

00:13:34,640 --> 00:13:40,310
whole process of addressing issues in

00:13:37,280 --> 00:13:42,890
the Indian community if it is totally

00:13:40,310 --> 00:13:46,340
different than the inclusiveness the

00:13:42,890 --> 00:13:49,820
openers and activity activeness of the

00:13:46,340 --> 00:13:52,310
newest and eventually there is a gap do

00:13:49,820 --> 00:13:54,680
you use experience in an ideal world

00:13:52,310 --> 00:13:59,480
work with the community with the

00:13:54,680 --> 00:13:59,660
interaction with let's say it because I

00:13:59,480 --> 00:14:03,560
know

00:13:59,660 --> 00:14:05,330
NPM actually closer issues on yeah if if

00:14:03,560 --> 00:14:07,370
they you know under that or like some

00:14:05,330 --> 00:14:09,080
other method to do that on github what

00:14:07,370 --> 00:14:12,680
would that look like to you to be able

00:14:09,080 --> 00:14:17,060
to work well with the help repo yeah so

00:14:12,680 --> 00:14:21,350
I'm curious about that I mean in my

00:14:17,060 --> 00:14:28,310
opinion with having better control of

00:14:21,350 --> 00:14:31,280
the NBN I got insulation if I were

00:14:28,310 --> 00:14:34,430
owning the NPM see what I will do is I

00:14:31,280 --> 00:14:36,530
will look at improving the logging

00:14:34,430 --> 00:14:40,370
process of the service VT process and

00:14:36,530 --> 00:14:43,910
better document if you remember we have

00:14:40,370 --> 00:14:46,790
a very clean documentation around module

00:14:43,910 --> 00:14:49,370
resolution I mean do you look at the

00:14:46,790 --> 00:14:51,470
node modules in the current folder then

00:14:49,370 --> 00:14:53,660
you look at the parent folder like that

00:14:51,470 --> 00:14:56,030
you recursively go up to the vertex of

00:14:53,660 --> 00:14:58,640
the file system and then you get the

00:14:56,030 --> 00:15:01,730
package tour Jason or there is a

00:14:58,640 --> 00:15:04,610
sequence of steps maybe some 20 25 steps

00:15:01,730 --> 00:15:07,760
that is what that is well known well

00:15:04,610 --> 00:15:10,000
documented and beneficial so if you have

00:15:07,760 --> 00:15:12,920
something of that sort for the

00:15:10,000 --> 00:15:16,580
installation process that will really

00:15:12,920 --> 00:15:24,320
help so but for that we might need them

00:15:16,580 --> 00:15:31,250
more than we should be we should secure

00:15:24,320 --> 00:15:32,840
the logs and then yeah so if NPM

00:15:31,250 --> 00:15:35,860
communities

00:15:32,840 --> 00:15:40,520
able to do that that is better otherwise

00:15:35,860 --> 00:15:43,490
somebody doing that I guess the

00:15:40,520 --> 00:15:44,660
situation which sorry you say you making

00:15:43,490 --> 00:15:47,590
the recommendation that we should have

00:15:44,660 --> 00:15:55,550
accent we should have connected to NPM

00:15:47,590 --> 00:15:58,160
that's what I mean to get the

00:15:55,550 --> 00:16:01,490
conversation starting somebody from the

00:15:58,160 --> 00:16:04,100
north community taking this ownership of

00:16:01,490 --> 00:16:06,230
championing this as an initiator I mean

00:16:04,100 --> 00:16:10,160
having a conversation with and then look

00:16:06,230 --> 00:16:14,120
at the base to improve the experience

00:16:10,160 --> 00:16:16,940
yeah I would say this is that has

00:16:14,120 --> 00:16:19,910
happened many times yes no it's not that

00:16:16,940 --> 00:16:21,730
we have not it's not for trying but it's

00:16:19,910 --> 00:16:24,920
sort of similar I think if we look at

00:16:21,730 --> 00:16:27,440
like being great other up screams and

00:16:24,920 --> 00:16:28,520
examples of that for node yeah I mean

00:16:27,440 --> 00:16:33,470
how we're affected by it

00:16:28,520 --> 00:16:36,020
we had to spend I think nearly a year in

00:16:33,470 --> 00:16:38,810
advocacy and talking people from our

00:16:36,020 --> 00:16:41,450
project talking with that team to get

00:16:38,810 --> 00:16:45,080
them to to work with us and they were

00:16:41,450 --> 00:16:46,970
already very they were amiable and very

00:16:45,080 --> 00:16:48,350
had relationships but we sort of

00:16:46,970 --> 00:16:51,590
codified it as we need to be

00:16:48,350 --> 00:16:53,180
communicating on a regular basis so that

00:16:51,590 --> 00:16:55,640
we're both benefiting from each other's

00:16:53,180 --> 00:16:58,580
work instead of sort of like feeling the

00:16:55,640 --> 00:17:00,500
effects of somebody's work whereas with

00:16:58,580 --> 00:17:06,920
NPM we have sort of the added

00:17:00,500 --> 00:17:10,010
complication have prior community poor

00:17:06,920 --> 00:17:12,020
community relations between and Damned

00:17:10,010 --> 00:17:15,740
folks and the rest of the project

00:17:12,020 --> 00:17:18,380
early on the new projects some of the

00:17:15,740 --> 00:17:21,710
contributors were much more forceful and

00:17:18,380 --> 00:17:24,440
sort of the demanding a little bit

00:17:21,710 --> 00:17:26,900
entitled in terms of we meet like of

00:17:24,440 --> 00:17:31,340
course we need to have access to be able

00:17:26,900 --> 00:17:32,660
to modify NPM but that that's like

00:17:31,340 --> 00:17:34,220
stepping into somebody else's project

00:17:32,660 --> 00:17:37,760
and telling them that like you're gonna

00:17:34,220 --> 00:17:41,780
take over and I think because of that

00:17:37,760 --> 00:17:45,970
this insensitivity then it sort of put

00:17:41,780 --> 00:17:45,970
us at a standstill and unfortunately

00:17:46,370 --> 00:17:51,059
fortunately the leadership and the

00:17:48,960 --> 00:17:53,039
people who worked on that and not it has

00:17:51,059 --> 00:17:55,110
not changed so they still have that

00:17:53,039 --> 00:17:57,659
memory in the history of not working

00:17:55,110 --> 00:18:01,140
well with us even if on our side of the

00:17:57,659 --> 00:18:02,640
group of people have changed so wouldn't

00:18:01,140 --> 00:18:05,010
it's not that we shouldn't have that

00:18:02,640 --> 00:18:09,779
conversation again because it's a new

00:18:05,010 --> 00:18:13,799
group but it's that's that's like a

00:18:09,779 --> 00:18:15,480
that's a project it's not because I

00:18:13,799 --> 00:18:25,649
think that's this is all ends up being

00:18:15,480 --> 00:18:27,840
side-effects rate our past choices and

00:18:25,649 --> 00:18:30,090
it's not even our estrus it's like in

00:18:27,840 --> 00:18:33,899
the videos in the projects yes the

00:18:30,090 --> 00:18:35,640
context passion but just to give you if

00:18:33,899 --> 00:18:37,860
you if you were to ever suggest that on

00:18:35,640 --> 00:18:39,840
github just to give you a heads up that

00:18:37,860 --> 00:18:42,140
would be some of the feedback you may

00:18:39,840 --> 00:18:42,140
end up seeing

00:18:47,480 --> 00:18:55,610
so next one is not being charged justice

00:18:50,600 --> 00:18:57,779
so this is not nice live a Copeland or a

00:18:55,610 --> 00:19:02,940
you know connected a set of problems

00:18:57,779 --> 00:19:05,460
with totally discrete and you know one

00:19:02,940 --> 00:19:07,679
of the kinds in many situations so we

00:19:05,460 --> 00:19:09,870
have an outstanding problem don't get

00:19:07,679 --> 00:19:11,610
excited up so what that essentially

00:19:09,870 --> 00:19:14,760
means that if your spawn your child

00:19:11,610 --> 00:19:18,179
process and then it says more learning

00:19:14,760 --> 00:19:20,720
process like a CLI or a tool that just

00:19:18,179 --> 00:19:24,120
brings a piece of information just exits

00:19:20,720 --> 00:19:26,909
so because the controller of log is a

00:19:24,120 --> 00:19:29,220
synchronous the main process the main

00:19:26,909 --> 00:19:30,990
child process do not really pay for the

00:19:29,220 --> 00:19:33,240
things going to be completely flushed

00:19:30,990 --> 00:19:35,970
out and it comes back to the parent

00:19:33,240 --> 00:19:41,490
essentially using the data so this has

00:19:35,970 --> 00:19:43,500
been ever since I can remember I joined

00:19:41,490 --> 00:19:45,720
the project by seeing this issue and on

00:19:43,500 --> 00:19:48,630
and off we we get people complaining

00:19:45,720 --> 00:19:52,049
about that we know the problem what it

00:19:48,630 --> 00:19:54,360
is we know how to solve it is but there

00:19:52,049 --> 00:19:58,290
are side effects there are known

00:19:54,360 --> 00:20:01,050
solutions which have more severe

00:19:58,290 --> 00:20:04,080
side effects then the advantage can

00:20:01,050 --> 00:20:06,930
bring about etc but there are one or two

00:20:04,080 --> 00:20:10,950
options which I believe is something

00:20:06,930 --> 00:20:15,000
which we can look at to solve this once

00:20:10,950 --> 00:20:19,010
and for all race conditions with spawn

00:20:15,000 --> 00:20:22,380
is basically again in design level issue

00:20:19,010 --> 00:20:26,520
when you spawn the child process up to

00:20:22,380 --> 00:20:29,430
some point in the protocol the child do

00:20:26,520 --> 00:20:31,650
not exist which essentially means all

00:20:29,430 --> 00:20:34,740
the issues that stunning all of these

00:20:31,650 --> 00:20:37,650
point sequence is thrown back to the

00:20:34,740 --> 00:20:40,680
border in a synchronous manner and the

00:20:37,650 --> 00:20:43,650
moment the child comes into life then

00:20:40,680 --> 00:20:47,310
any issues that is coming to the process

00:20:43,650 --> 00:20:48,750
which is just got on cannot be passed

00:20:47,310 --> 00:20:50,820
back to the caller in a synchronous

00:20:48,750 --> 00:20:52,440
manner because it's running as

00:20:50,820 --> 00:20:56,250
synchronously the child is completely

00:20:52,440 --> 00:20:57,990
independent so that means there has to

00:20:56,250 --> 00:21:01,140
be terrors of Thrones in a synchronous

00:20:57,990 --> 00:21:03,860
era back you the parent so what that

00:21:01,140 --> 00:21:07,620
essentially means is when you are

00:21:03,860 --> 00:21:10,230
spawning a process based on where that

00:21:07,620 --> 00:21:12,570
issue happens the caller should be

00:21:10,230 --> 00:21:15,660
prepared to catch the error either in a

00:21:12,570 --> 00:21:18,810
synchronous manner or in unison and if

00:21:15,660 --> 00:21:21,590
you don't have enough insight about what

00:21:18,810 --> 00:21:24,210
type of problems you are expecting

00:21:21,590 --> 00:21:27,960
unexpected issues can happen in the

00:21:24,210 --> 00:21:33,570
consumer side so that's a pretty tricky

00:21:27,960 --> 00:21:36,930
thing we don't have a complete solution

00:21:33,570 --> 00:21:39,510
for this yet other than documenting this

00:21:36,930 --> 00:21:42,540
fact which I just stated that is it's a

00:21:39,510 --> 00:21:44,880
it's a sequence of activities and up to

00:21:42,540 --> 00:21:48,330
some point the caller should expect to

00:21:44,880 --> 00:21:51,330
catch the synchronous and beyond that it

00:21:48,330 --> 00:21:56,910
should be no sleep no sir that should be

00:21:51,330 --> 00:22:04,430
stated and so that's what essentially I

00:21:56,910 --> 00:22:07,310
meant by normalizing and then

00:22:04,430 --> 00:22:11,010
performance and issues with this phone

00:22:07,310 --> 00:22:12,179
so the way this phone works is you

00:22:11,010 --> 00:22:15,600
replicate

00:22:12,179 --> 00:22:19,740
process in all its aspects by the fork

00:22:15,600 --> 00:22:23,879
system part and then try to be given the

00:22:19,740 --> 00:22:26,309
type as I've given before so depending

00:22:23,879 --> 00:22:30,980
on the nature of the child say the child

00:22:26,309 --> 00:22:33,480
is a small UNIX process like LS of PWD

00:22:30,980 --> 00:22:36,570
essentially what you're doing is just

00:22:33,480 --> 00:22:38,759
replicating the whole node.js process in

00:22:36,570 --> 00:22:41,190
the China at this pace and depending on

00:22:38,759 --> 00:22:43,980
how much memory the child the parent has

00:22:41,190 --> 00:22:46,409
been using say 2 GB or 3 to be for

00:22:43,980 --> 00:22:49,320
example you are allocating as much of

00:22:46,409 --> 00:22:52,320
memory for the child basically causing a

00:22:49,320 --> 00:22:54,419
more of Emmanuel important ratios there

00:22:52,320 --> 00:22:58,230
could be a better capability than the

00:22:54,419 --> 00:23:01,320
memory footprint replication and one

00:22:58,230 --> 00:23:04,590
class of customers can get affected

00:23:01,320 --> 00:23:06,749
because of this LS specially running

00:23:04,590 --> 00:23:10,889
things in cloud deployment for example

00:23:06,749 --> 00:23:12,990
Emily's charged and then this particular

00:23:10,889 --> 00:23:17,340
way of showing things can potentially

00:23:12,990 --> 00:23:19,980
cause issues for the consumer so the

00:23:17,340 --> 00:23:21,720
recommendation is look at ways to spawn

00:23:19,980 --> 00:23:23,879
the child in a customized manner

00:23:21,720 --> 00:23:26,759
depending on either the deployment

00:23:23,879 --> 00:23:34,190
scenario or the type of child is on any

00:23:26,759 --> 00:23:36,840
etc so fortunately the phone API has a

00:23:34,190 --> 00:23:39,869
parameter called options which can be

00:23:36,840 --> 00:23:41,669
all loaded with in or additional flags

00:23:39,869 --> 00:23:45,090
or additional input which you can pass

00:23:41,669 --> 00:23:47,639
so that means the API provides the

00:23:45,090 --> 00:23:48,899
capability or the opportunity just need

00:23:47,639 --> 00:23:53,429
to look at what is the right way to

00:23:48,899 --> 00:23:55,740
implement this if Shawn's process spawns

00:23:53,429 --> 00:23:58,320
in the memory of the parent is low but

00:23:55,740 --> 00:24:00,090
then the child process is hired well

00:23:58,320 --> 00:24:03,149
that was it earth as well or would act

00:24:00,090 --> 00:24:06,389
as an issue can you connect the road he

00:24:03,149 --> 00:24:07,679
can go okay so the child process but at

00:24:06,389 --> 00:24:11,460
the time of this fourth

00:24:07,679 --> 00:24:13,559
yeah does it require any memory yes I

00:24:11,460 --> 00:24:16,830
process the ROS organically based on its

00:24:13,559 --> 00:24:19,200
memory demand which we anyway need fresh

00:24:16,830 --> 00:24:21,929
piece of month it cannot make use of the

00:24:19,200 --> 00:24:25,499
parents only entities there for example

00:24:21,929 --> 00:24:26,070
the parent is 1gb and the child is going

00:24:25,499 --> 00:24:30,120
to be n

00:24:26,070 --> 00:24:32,490
the 1gb replicator into the child is of

00:24:30,120 --> 00:24:38,030
no use to the child it has anyway

00:24:32,490 --> 00:24:41,550
allocate new energies so essentially the

00:24:38,030 --> 00:24:43,320
1gb of patent memory becomes useless to

00:24:41,550 --> 00:24:49,380
the child and it becomes normal

00:24:43,320 --> 00:24:53,690
the closest is their reason where we've

00:24:49,380 --> 00:24:57,530
not addressed that oh we don't get it

00:24:53,690 --> 00:25:07,050
there are discussions yeah so it's about

00:24:57,530 --> 00:25:11,570
being able to non-breaking so child

00:25:07,050 --> 00:25:11,570
process has been good some tests

00:25:12,830 --> 00:25:28,320
yeah so the third one is embedding

00:25:20,730 --> 00:25:31,020
scenario everything basically means you

00:25:28,320 --> 00:25:34,790
know using more from an existing native

00:25:31,020 --> 00:25:38,670
application that means you don't use no

00:25:34,790 --> 00:25:42,690
THC or the nor finally as it is instead

00:25:38,670 --> 00:25:45,270
of having the your own native process

00:25:42,690 --> 00:25:47,580
which is learning a major chunk or a

00:25:45,270 --> 00:25:49,410
larger chunk of your work your and you

00:25:47,580 --> 00:25:52,590
just want to make use of node for a

00:25:49,410 --> 00:25:55,980
specific subset of your workload say for

00:25:52,590 --> 00:26:00,120
example an animal pound or a interactive

00:25:55,980 --> 00:26:04,830
work your message so the problem which

00:26:00,120 --> 00:26:08,010
we see is that the Emperor's do not know

00:26:04,830 --> 00:26:10,530
how do you consume though what is the

00:26:08,010 --> 00:26:12,900
entry point to and what are the things

00:26:10,530 --> 00:26:15,240
which you need to finish like what are

00:26:12,900 --> 00:26:17,580
the things which you as an embedded and

00:26:15,240 --> 00:26:19,620
customized and what are they control

00:26:17,580 --> 00:26:23,550
flow points what are the two novels

00:26:19,620 --> 00:26:27,480
Dexter so if you look at the main file

00:26:23,550 --> 00:26:30,870
that you're you Clemens for its amplifon

00:26:27,480 --> 00:26:33,990
which is more LCC or more named of CC

00:26:30,870 --> 00:26:39,900
you see at least three of the three

00:26:33,990 --> 00:26:43,320
start functions for elite functions

00:26:39,900 --> 00:26:46,620
one main function so basically these are

00:26:43,320 --> 00:26:50,250
entry points which have different types

00:26:46,620 --> 00:26:53,190
of abstractions one for example one

00:26:50,250 --> 00:26:56,790
start function takes the whole argument

00:26:53,190 --> 00:26:59,010
as it is for your input another init

00:26:56,790 --> 00:27:02,850
function rates or another start function

00:26:59,010 --> 00:27:05,130
takes as subset of that instead provide

00:27:02,850 --> 00:27:08,370
you with the flexibility of defining the

00:27:05,130 --> 00:27:10,740
inspector or defining the v8 engine or

00:27:08,370 --> 00:27:14,040
the isolate and things like that

00:27:10,740 --> 00:27:19,050
so essentially you have five or six

00:27:14,040 --> 00:27:22,920
discrete api's to call and control the

00:27:19,050 --> 00:27:25,410
sub-modules approaches this is good but

00:27:22,920 --> 00:27:27,929
if you can it confuses people you don't

00:27:25,410 --> 00:27:32,429
you don't necessarily have five or six

00:27:27,929 --> 00:27:35,040
discreet use cases for embedding you may

00:27:32,429 --> 00:27:38,520
have two or three and you may have maybe

00:27:35,040 --> 00:27:40,800
more than that but the whole idea is but

00:27:38,520 --> 00:27:43,020
do we have a documentation or do we have

00:27:40,800 --> 00:27:46,080
a you know high level of abstraction

00:27:43,020 --> 00:27:48,540
that any embedder and be able to relate

00:27:46,080 --> 00:27:50,580
for example and Umberto may not be

00:27:48,540 --> 00:27:53,820
interested in customizing an inspector

00:27:50,580 --> 00:27:57,600
it will just go by what a node.js is

00:27:53,820 --> 00:28:00,030
providing as it is capability and again

00:27:57,600 --> 00:28:02,700
if you are embedding node Z this you're

00:28:00,030 --> 00:28:07,309
going to necessarily need to control the

00:28:02,700 --> 00:28:11,300
v8 engine as it is so the whole idea is

00:28:07,309 --> 00:28:15,090
either talk to the embedding users or

00:28:11,300 --> 00:28:17,220
you know plugins feedbacks and then look

00:28:15,090 --> 00:28:21,059
at one of the two or three discrete way

00:28:17,220 --> 00:28:23,760
of embedding no J's you find it expose

00:28:21,059 --> 00:28:26,070
the entry points and then document at

00:28:23,760 --> 00:28:29,390
this point one of the main pain point is

00:28:26,070 --> 00:28:33,270
there is absolutely no documentation

00:28:29,390 --> 00:28:35,640
people look at the C++ API I mean look

00:28:33,270 --> 00:28:38,429
at the source code and then they open

00:28:35,640 --> 00:28:43,320
questions you will notice a shell Kapoor

00:28:38,429 --> 00:28:44,490
and then they just am so awkward so I

00:28:43,320 --> 00:28:47,550
know a lot written better

00:28:44,490 --> 00:28:50,070
are there any other examples and whether

00:28:47,550 --> 00:28:52,020
is existing like one more very literal

00:28:50,070 --> 00:28:56,220
things like that

00:28:52,020 --> 00:28:59,760
so I know IDM we have a product called I

00:28:56,220 --> 00:29:02,820
IV I gave information IBM integration

00:28:59,760 --> 00:29:06,600
bus so in that it's a messaging system

00:29:02,820 --> 00:29:09,630
we have Gulf legacy data is coming from

00:29:06,600 --> 00:29:12,630
the mainframe and we give me the cue and

00:29:09,630 --> 00:29:15,870
things like that so this is a very grain

00:29:12,630 --> 00:29:20,010
API is so I grind Tara flow that's

00:29:15,870 --> 00:29:22,530
happening and then based on the type of

00:29:20,010 --> 00:29:26,429
the message if it is a synchronous we

00:29:22,530 --> 00:29:29,370
passed on to load so there's a there is

00:29:26,429 --> 00:29:31,950
a way of embedding node we find this

00:29:29,370 --> 00:29:33,630
issue maybe two years back and then here

00:29:31,950 --> 00:29:37,170
we are trying to see what is the best

00:29:33,630 --> 00:29:39,750
way of abstracting best way of invoking

00:29:37,170 --> 00:29:42,720
the right abstraction within the nucleus

00:29:39,750 --> 00:29:45,540
so that's when we looked at each other

00:29:42,720 --> 00:29:47,100
and reforms other that are making sense

00:29:45,540 --> 00:29:50,610
yeah yeah

00:29:47,100 --> 00:29:53,309
one of the so I mean I actually or all

00:29:50,610 --> 00:29:57,420
the other chuckling a lot of this stuff

00:29:53,309 --> 00:29:59,670
I'd honest but would it be helpful for

00:29:57,420 --> 00:30:02,190
people to like he said through the

00:29:59,670 --> 00:30:04,890
recommendation would it be helpful to

00:30:02,190 --> 00:30:07,950
like as someone who doesn't understand

00:30:04,890 --> 00:30:10,020
C++ at all would it be helpful to kind

00:30:07,950 --> 00:30:13,020
of go build up the structure of that and

00:30:10,020 --> 00:30:14,970
allow people to go Oh or would it be or

00:30:13,020 --> 00:30:17,990
would that be kind of my list of like

00:30:14,970 --> 00:30:23,220
hey we have this but there's no content

00:30:17,990 --> 00:30:24,840
someone will maybe eventually yeah which

00:30:23,220 --> 00:30:27,150
way do you feel it would be would that

00:30:24,840 --> 00:30:31,650
be helpful I guess yeah so my way of

00:30:27,150 --> 00:30:34,590
thinking is if you document the existing

00:30:31,650 --> 00:30:37,260
state of the fact as it is it can cause

00:30:34,590 --> 00:30:43,650
problems because the current state may

00:30:37,260 --> 00:30:45,900
not be up to they want I'm going to roll

00:30:43,650 --> 00:30:49,170
in a particular way which is neither

00:30:45,900 --> 00:30:52,400
existing yard of so then we are breaking

00:30:49,170 --> 00:30:56,130
the situation ideal starting point is

00:30:52,400 --> 00:30:58,820
get a feedback yeah from the actual

00:30:56,130 --> 00:31:01,559
embedding usages and then look at

00:30:58,820 --> 00:31:03,840
holistically from a design perspective

00:31:01,559 --> 00:31:05,910
what are the different discreet way of

00:31:03,840 --> 00:31:15,930
embedding more and then three zone

00:31:05,910 --> 00:31:23,370
then document okay okay yeah I guess

00:31:15,930 --> 00:31:26,310
this is the last one yeah so streams

00:31:23,370 --> 00:31:30,170
I would say this is not a pattern assets

00:31:26,310 --> 00:31:37,230
from the health before but it's it's

00:31:30,170 --> 00:31:41,760
anybody who's working on ever recurring

00:31:37,230 --> 00:31:48,210
pattern of problem statement people

00:31:41,760 --> 00:31:50,550
complain that the event say X given is

00:31:48,210 --> 00:31:52,760
occurring after why even as I was

00:31:50,550 --> 00:31:57,270
expecting Y to be happy first and

00:31:52,760 --> 00:32:00,960
vice-versa and this one keeps keeps it

00:31:57,270 --> 00:32:04,140
we keep okay the x and y can be P and Q

00:32:00,960 --> 00:32:06,620
but every time we see the life cycle

00:32:04,140 --> 00:32:12,030
events or the screen are completely

00:32:06,620 --> 00:32:15,840
coming in between and then transform

00:32:12,030 --> 00:32:18,300
stream strings I see quite many users

00:32:15,840 --> 00:32:20,700
complaining about I want to transform

00:32:18,300 --> 00:32:22,650
the particular stream in the particular

00:32:20,700 --> 00:32:24,990
pattern but I don't see the data coming

00:32:22,650 --> 00:32:26,550
out I see the original data that's

00:32:24,990 --> 00:32:30,420
coming out the transformation is not

00:32:26,550 --> 00:32:33,630
happening or the particular data email

00:32:30,420 --> 00:32:37,230
is not triggering itself and multi-level

00:32:33,630 --> 00:32:39,510
piping.this like a pipe beep I see

00:32:37,230 --> 00:32:43,260
probably the most common use case that

00:32:39,510 --> 00:32:45,570
has a and B piping in the C or a piping

00:32:43,260 --> 00:32:49,980
unit B and C these are you know

00:32:45,570 --> 00:32:53,820
different scenarios of so not

00:32:49,980 --> 00:32:56,660
necessarily all combinations of energy

00:32:53,820 --> 00:32:59,730
said man it's not necessarily because

00:32:56,660 --> 00:33:02,910
there is a severe problem in the node.js

00:32:59,730 --> 00:33:07,110
but because these are not necessarily or

00:33:02,910 --> 00:33:09,660
you will define as valid use cases so as

00:33:07,110 --> 00:33:12,210
in when people various issues we look at

00:33:09,660 --> 00:33:14,760
that and see oh okay there is a there's

00:33:12,210 --> 00:33:17,790
a specific use case that is missing and

00:33:14,760 --> 00:33:19,140
we pipe in together you see is something

00:33:17,790 --> 00:33:22,799
which we more

00:33:19,140 --> 00:33:25,590
tima vote let's implement that and and

00:33:22,799 --> 00:33:28,169
the Caribbean versus well I am not sure

00:33:25,590 --> 00:33:31,409
about that but fundamental problem is

00:33:28,169 --> 00:33:35,700
that the stream API does not have a

00:33:31,409 --> 00:33:40,110
specification or not just like any API

00:33:35,700 --> 00:33:42,690
will have a well-defined input and a

00:33:40,110 --> 00:33:44,730
well-defined output document and the

00:33:42,690 --> 00:33:48,320
design follow the documentation all the

00:33:44,730 --> 00:33:51,570
documentation follow the design here the

00:33:48,320 --> 00:33:54,750
the fact is that how the stream works

00:33:51,570 --> 00:33:59,370
becomes the expectation or that becomes

00:33:54,750 --> 00:34:01,289
the document but assuming or you know

00:33:59,370 --> 00:34:03,750
keeping in mind that streams need to

00:34:01,289 --> 00:34:06,720
work with a number of other processes

00:34:03,750 --> 00:34:08,460
probably outside of node.js as well that

00:34:06,720 --> 00:34:11,010
could be child processors there could be

00:34:08,460 --> 00:34:13,470
other endpoints coming from the network

00:34:11,010 --> 00:34:15,720
which is feeding you with the data then

00:34:13,470 --> 00:34:17,550
you need to adhere to the protocol that

00:34:15,720 --> 00:34:19,440
is to find out the other end point or

00:34:17,550 --> 00:34:23,940
you need to align with that expectation

00:34:19,440 --> 00:34:26,940
so if those are not matching then the

00:34:23,940 --> 00:34:30,659
result is basically the toughest are our

00:34:26,940 --> 00:34:32,970
lifecycle events so here my clear

00:34:30,659 --> 00:34:36,960
recommendation is that we should have a

00:34:32,970 --> 00:34:40,320
specification by specification I mean a

00:34:36,960 --> 00:34:43,859
set of defined principles set of

00:34:40,320 --> 00:34:47,940
expectations about how the exposed API

00:34:43,859 --> 00:34:50,429
should work in any sort of implement the

00:34:47,940 --> 00:34:53,550
implementation can be customized but the

00:34:50,429 --> 00:34:56,399
expectation should be standard and that

00:34:53,550 --> 00:34:58,890
should work seamlessly across all

00:34:56,399 --> 00:35:02,460
endpoints of the child child process

00:34:58,890 --> 00:35:05,880
interactions just why am I saying

00:35:02,460 --> 00:35:07,369
clearly in the example of the rights

00:35:05,880 --> 00:35:15,030
after end

00:35:07,369 --> 00:35:21,810
specific from New Zealand or no no this

00:35:15,030 --> 00:35:24,660
is basically with HPP or any other API

00:35:21,810 --> 00:35:29,670
to the core which internally make use of

00:35:24,660 --> 00:35:31,950
scripts but the whole point is though

00:35:29,670 --> 00:35:32,730
you are making use of a core screen the

00:35:31,950 --> 00:35:36,540
data

00:35:32,730 --> 00:35:38,390
control is building the application the

00:35:36,540 --> 00:35:42,810
stream will not control the databases

00:35:38,390 --> 00:35:45,840
the velocity at which the data comes for

00:35:42,810 --> 00:35:47,730
the data type of the data and the

00:35:45,840 --> 00:35:49,859
endpoint from which the data coming

00:35:47,730 --> 00:35:52,200
these are completely in the control of

00:35:49,859 --> 00:36:00,180
the application the answers so someone

00:35:52,200 --> 00:36:01,890
somewhere yeah they're breaking they're

00:36:00,180 --> 00:36:03,980
the one that is particularly perhaps

00:36:01,890 --> 00:36:07,140
sending it right after the end of it so

00:36:03,980 --> 00:36:14,220
I'm hearing that's what I'm conservative

00:36:07,140 --> 00:36:15,960
user so they're not in using someone

00:36:14,220 --> 00:36:18,359
somewhere is not using streams in their

00:36:15,960 --> 00:36:21,660
dance properly because there's not a

00:36:18,359 --> 00:36:24,510
well-defined spectrum use them okay let

00:36:21,660 --> 00:36:27,750
me play once again so we have a stream

00:36:24,510 --> 00:36:31,080
which is same basically you are making

00:36:27,750 --> 00:36:33,660
us an HTTP capability and as an HTTP

00:36:31,080 --> 00:36:35,609
client you know that there were spawns

00:36:33,660 --> 00:36:39,090
coming from the server is actually a

00:36:35,609 --> 00:36:41,430
stream then we implement a callback for

00:36:39,090 --> 00:36:45,210
the data or even the for the ending end

00:36:41,430 --> 00:36:47,070
of the finish even itself so these are

00:36:45,210 --> 00:36:49,410
implemented in the user land the core

00:36:47,070 --> 00:36:51,810
bag belongs to the user whereas the

00:36:49,410 --> 00:36:56,460
Twitter of the raiment belongs to the

00:36:51,810 --> 00:36:58,859
Pope so use it as a user the expectation

00:36:56,460 --> 00:37:01,440
of these callbacks or that they get

00:36:58,859 --> 00:37:05,790
executed in a particular order say for

00:37:01,440 --> 00:37:09,330
example and write happen first and then

00:37:05,790 --> 00:37:11,520
end that expectation is not so

00:37:09,330 --> 00:37:20,880
definitely the responsibility or the

00:37:11,520 --> 00:37:23,850
break is happening in the code so that's

00:37:20,880 --> 00:37:26,700
pretty much I have so just to reiterate

00:37:23,850 --> 00:37:29,100
what I said in the beginning these are

00:37:26,700 --> 00:37:32,010
not necessarily the fault is in the

00:37:29,100 --> 00:37:34,109
DOJ's support report as important

00:37:32,010 --> 00:37:39,770
they're probably the ones which I

00:37:34,109 --> 00:37:43,410
believe is following a pattern and then

00:37:39,770 --> 00:37:46,200
we also looked at the root cause and

00:37:43,410 --> 00:37:50,070
what are the recommendations have me

00:37:46,200 --> 00:37:52,440
some of them as not necessarily will

00:37:50,070 --> 00:37:54,960
work as it is we need a better approach

00:37:52,440 --> 00:37:57,260
but some other things which we know what

00:37:54,960 --> 00:37:59,280
can be done in a systematic manner

00:37:57,260 --> 00:38:02,250
somebody who is interested take

00:37:59,280 --> 00:38:05,190
ownership champion it basically

00:38:02,250 --> 00:38:07,650
ownership not necessarily mean implement

00:38:05,190 --> 00:38:10,079
the end-to-end solution for that but

00:38:07,650 --> 00:38:15,619
just to kick start the conversation in

00:38:10,079 --> 00:38:18,450
in cases or define some milestones and

00:38:15,619 --> 00:38:21,270
see you can get engaged with the people

00:38:18,450 --> 00:38:31,920
and compelling it some part of the work

00:38:21,270 --> 00:38:32,280
then have that as a initiative come

00:38:31,920 --> 00:38:35,070
again

00:38:32,280 --> 00:38:38,820
do you have a link I don't have I can

00:38:35,070 --> 00:38:40,710
share it with you yeah I feel like

00:38:38,820 --> 00:38:44,760
something that hasn't already been done

00:38:40,710 --> 00:38:47,160
it's like the recommendation me as like

00:38:44,760 --> 00:38:49,650
an issue file in the relevant repo

00:38:47,160 --> 00:38:52,230
alongside with like the problem in root

00:38:49,650 --> 00:38:55,020
cause and like volume they've seen yeah

00:38:52,230 --> 00:38:58,170
it's such great user feedback if you

00:38:55,020 --> 00:38:59,670
haven't already done it oh yeah I mean

00:38:58,170 --> 00:39:02,670
kind of thinking you do it a lot either

00:38:59,670 --> 00:39:05,190
but I think it's just really good

00:39:02,670 --> 00:39:07,020
justifications for people considering

00:39:05,190 --> 00:39:09,660
how we're building things out moving

00:39:07,020 --> 00:39:12,180
forward or where we can devote time

00:39:09,660 --> 00:39:14,700
right like defining the node streams

00:39:12,180 --> 00:39:16,920
that actually yes sure Mateo would have

00:39:14,700 --> 00:39:18,900
very much agree with that

00:39:16,920 --> 00:39:32,310
but it's just about the time to find to

00:39:18,900 --> 00:39:34,829
do it or the people or it's always good

00:39:32,310 --> 00:39:36,650
to have breaking news cases to test

00:39:34,829 --> 00:39:42,060
against yeah this is great

00:39:36,650 --> 00:39:44,420
we've got so much brick okay thank you

00:39:42,060 --> 00:39:44,420

YouTube URL: https://www.youtube.com/watch?v=yICZo2x8NWU


