Title: Promises in Node core
Publication date: 2019-06-04
Playlist: OpenJS Foundation Collaborator Summit, Berlin, May 2019
Description: 
	OpenJS Foundation Collaborator Summit, Berlin, 2019
Captions: 
	00:00:04,190 --> 00:00:08,540
it's really cool thank you very much

00:00:08,719 --> 00:00:19,170
so yeah the Internet is also soon going

00:00:12,210 --> 00:00:22,410
to listen in and just to give you

00:00:19,170 --> 00:00:25,769
outline of the other topics that we want

00:00:22,410 --> 00:00:31,949
to discuss today so relatively recently

00:00:25,769 --> 00:00:34,890
I landed the PR to opt in to a specific

00:00:31,949 --> 00:00:41,790
behavior for I'm Himmel rejections in

00:00:34,890 --> 00:00:48,450
milk or no no screaming this was like

00:00:41,790 --> 00:00:49,740
here's of work years okay you have three

00:00:48,450 --> 00:00:52,680
different modes if you can choose of

00:00:49,740 --> 00:00:56,100
which means like all warnings are gone

00:00:52,680 --> 00:00:58,440
everything works and then you have

00:00:56,100 --> 00:01:01,560
Warren which is much the same as a

00:00:58,440 --> 00:01:03,150
default right now that you will get a

00:01:01,560 --> 00:01:05,820
warning in case of an animal rejection

00:01:03,150 --> 00:01:08,310
but you do not get an education warning

00:01:05,820 --> 00:01:11,160
and then there's this big mode which

00:01:08,310 --> 00:01:14,490
results in throwing in error instead of

00:01:11,160 --> 00:01:16,470
rejecting something in rejection which

00:01:14,490 --> 00:01:18,600
should normally cause the process to

00:01:16,470 --> 00:01:21,810
crash in case you don't have an uncaught

00:01:18,600 --> 00:01:25,200
exception handler now that the thing is

00:01:21,810 --> 00:01:29,520
we last time on the last summit we've

00:01:25,200 --> 00:01:33,120
discussed them and we would only want to

00:01:29,520 --> 00:01:37,080
implement that and later on decide on

00:01:33,120 --> 00:01:39,690
what should be the default in note 4 so

00:01:37,080 --> 00:01:42,780
now we are at the state to discuss what

00:01:39,690 --> 00:01:45,750
should be the default and for them I

00:01:42,780 --> 00:01:49,080
don't think it's actually our duty to

00:01:45,750 --> 00:01:51,030
really do that and instead let our users

00:01:49,080 --> 00:01:54,840
decide on that and that's why I would

00:01:51,030 --> 00:01:58,950
like to do a survey and we're gonna have

00:01:54,840 --> 00:02:03,479
the opportunity to gather some questions

00:01:58,950 --> 00:02:05,729
from you about it and and to provide the

00:02:03,479 --> 00:02:08,429
necessary information to actually then

00:02:05,729 --> 00:02:10,920
do this survey it should of course eat

00:02:08,429 --> 00:02:14,990
on - try to explain a couple of things

00:02:10,920 --> 00:02:14,990
have examples and so on

00:02:15,170 --> 00:02:21,800
then we have our multiple resource book

00:02:18,410 --> 00:02:25,250
which is great but it doesn't work as we

00:02:21,800 --> 00:02:27,470
had hoped for the problem is that I

00:02:25,250 --> 00:02:31,340
promise all I act like who's familiar

00:02:27,470 --> 00:02:33,550
without a rejection so alright that's

00:02:31,340 --> 00:02:40,190
pretty much everyone that's good

00:02:33,550 --> 00:02:44,780
and so the problem there is if you have

00:02:40,190 --> 00:02:47,690
a dog race or ball it would also end up

00:02:44,780 --> 00:02:51,140
in there and that's not cool because

00:02:47,690 --> 00:02:53,540
especially was raised you do not care if

00:02:51,140 --> 00:02:55,549
it resource what at once and it uses the

00:02:53,540 --> 00:03:01,310
underlying promise constructor which

00:02:55,549 --> 00:03:03,620
then ends up in the resources and we do

00:03:01,310 --> 00:03:05,540
not have the information to change that

00:03:03,620 --> 00:03:08,530
right now so this is an ongoing

00:03:05,540 --> 00:03:13,519
discussion with the a-team a little bit

00:03:08,530 --> 00:03:18,680
and there are too much tree solutions to

00:03:13,519 --> 00:03:23,329
either have extra type that could be

00:03:18,680 --> 00:03:24,560
implemented to know where the multiple

00:03:23,329 --> 00:03:26,630
resource is coming from

00:03:24,560 --> 00:03:31,370
it's a tricky part it's not easy to

00:03:26,630 --> 00:03:36,560
determine or it is just not learning it

00:03:31,370 --> 00:03:38,239
for promise all promise all settled and

00:03:36,560 --> 00:03:42,620
promise race and all the built in

00:03:38,239 --> 00:03:47,530
transcript potentially come hmm as the

00:03:42,620 --> 00:03:50,690
last point we discussed depth to large

00:03:47,530 --> 00:03:53,060
mountain resort promises on exit because

00:03:50,690 --> 00:03:55,880
it normally means like we get often

00:03:53,060 --> 00:03:59,989
issues on the nodejs issue tracker then

00:03:55,880 --> 00:04:01,850
hey I run my code and now I shall he saw

00:03:59,989 --> 00:04:04,459
the promise would keep and my process

00:04:01,850 --> 00:04:06,319
alive but my process accident what it

00:04:04,459 --> 00:04:08,450
means is that there was no high or

00:04:06,319 --> 00:04:10,790
anything going on anymore in the

00:04:08,450 --> 00:04:13,880
application and the event loop just

00:04:10,790 --> 00:04:15,380
ended so that means that promise

00:04:13,880 --> 00:04:16,760
actually never resolved because

00:04:15,380 --> 00:04:19,970
otherwise that would probably be some

00:04:16,760 --> 00:04:22,250
work afterwards and and therefore we can

00:04:19,970 --> 00:04:24,680
warn the user about it and tell these

00:04:22,250 --> 00:04:28,340
promises if these lines never resolved

00:04:24,680 --> 00:04:30,700
you should have look at yeah so there's

00:04:28,340 --> 00:04:30,700
a rope you

00:04:31,879 --> 00:04:41,039
so promised a tiara is are both I think

00:04:37,969 --> 00:04:45,059
very complicated but also someone on

00:04:41,039 --> 00:04:47,399
Rails mostly in the sense that like

00:04:45,059 --> 00:04:49,349
we're going through we have AP eyes that

00:04:47,399 --> 00:04:51,869
are already defined so look for the most

00:04:49,349 --> 00:04:53,699
part we're not going through and like my

00:04:51,869 --> 00:04:55,680
training I'm like what new API should be

00:04:53,699 --> 00:04:57,119
or not like at least the pattern that

00:04:55,680 --> 00:04:59,550
we've done right now is we're not like

00:04:57,119 --> 00:05:01,379
recreating all the API is from first

00:04:59,550 --> 00:05:03,120
principles and rethinking them we're

00:05:01,379 --> 00:05:05,009
taking something that already had a

00:05:03,120 --> 00:05:06,960
callback interface and giving it a

00:05:05,009 --> 00:05:08,669
promise interface and generally trying

00:05:06,960 --> 00:05:11,309
to do something that's a little bit

00:05:08,669 --> 00:05:12,599
better than the status quo so like if

00:05:11,309 --> 00:05:14,550
you think about what we have in the past

00:05:12,599 --> 00:05:19,050
and I think a good example would be like

00:05:14,550 --> 00:05:20,729
what happened with ffs is like the first

00:05:19,050 --> 00:05:23,610
off there were no promise

00:05:20,729 --> 00:05:27,779
implementations at all then util

00:05:23,610 --> 00:05:31,169
promises I thank you right ezel promise

00:05:27,779 --> 00:05:32,699
five is a really great utility and then

00:05:31,169 --> 00:05:35,699
just trimming when I get this wrong if I

00:05:32,699 --> 00:05:38,219
do it allows you to take a callback

00:05:35,699 --> 00:05:40,379
based API node and turn it into a

00:05:38,219 --> 00:05:42,629
promise returning API but it uses

00:05:40,379 --> 00:05:59,839
underlying the mechanisms to create that

00:05:42,629 --> 00:06:01,949
promise so no thank you for correcting

00:05:59,839 --> 00:06:08,159
does it not have the performance

00:06:01,949 --> 00:06:12,479
benefits anymore or so actually in doing

00:06:08,159 --> 00:06:14,669
that on and C++ layer prevented and the

00:06:12,479 --> 00:06:16,819
be a team from optimizing the promise

00:06:14,669 --> 00:06:19,789
instructor and more in this case because

00:06:16,819 --> 00:06:23,610
the C++ there could be optimized and

00:06:19,789 --> 00:06:24,919
having regular code could be optimized

00:06:23,610 --> 00:06:27,779
further at least that's what

00:06:24,919 --> 00:06:31,610
benedicto at some point and young might

00:06:27,779 --> 00:06:31,610
who's not looking or listening

00:06:34,180 --> 00:08:12,970
it was cool so yes like you know so I do

00:07:45,490 --> 00:08:12,970
which is the and we have

00:08:22,470 --> 00:08:25,599
[Music]

00:08:41,719 --> 00:08:49,550
I'm gonna that's fun we're going back in

00:08:47,170 --> 00:08:51,350
you told that promise five I was like

00:08:49,550 --> 00:08:54,649
our first major push to try to add

00:08:51,350 --> 00:08:58,430
promise for as many as possible James

00:08:54,649 --> 00:09:00,379
had worked on FS promises that was you

00:08:58,430 --> 00:09:03,829
know a more direct implementation that

00:09:00,379 --> 00:09:07,310
specific to those FS ap is that exposed

00:09:03,829 --> 00:09:11,540
promise based AP is for I believe just

00:09:07,310 --> 00:09:14,029
the asynchronous interfaces correct so I

00:09:11,540 --> 00:09:17,720
believe that was the first one and then

00:09:14,029 --> 00:09:20,689
yeah we DNS also has been done I think

00:09:17,720 --> 00:09:22,730
there's a I won't call it abandon but an

00:09:20,689 --> 00:09:27,410
unloved for requests from me for child

00:09:22,730 --> 00:09:29,600
process I think in general though it can

00:09:27,410 --> 00:09:31,759
be non-trivial you're touching a

00:09:29,600 --> 00:09:34,459
non-trivial America to do these reef

00:09:31,759 --> 00:09:36,319
actors and to make these new AP eyes but

00:09:34,459 --> 00:09:38,839
the API surface is defined there's

00:09:36,319 --> 00:09:42,319
examples of other AP eyes that have

00:09:38,839 --> 00:09:47,000
already been done and if we at least as

00:09:42,319 --> 00:09:48,860
a group agree that this is something we

00:09:47,000 --> 00:09:52,279
want done I think this can be a good way

00:09:48,860 --> 00:09:54,910
of leveling up new contributors by

00:09:52,279 --> 00:09:59,660
identifying the yes they can work on

00:09:54,910 --> 00:10:02,120
yeah a lot of folks have made

00:09:59,660 --> 00:10:05,059
suggestions that you know we take an

00:10:02,120 --> 00:10:07,699
existing function accepts a call back

00:10:05,059 --> 00:10:10,220
and if the call backs not pass then just

00:10:07,699 --> 00:10:12,410
return a promise we cannot do that

00:10:10,220 --> 00:10:14,300
consistently alright you know some of

00:10:12,410 --> 00:10:18,290
those functions already have return

00:10:14,300 --> 00:10:20,600
values if we change the return value so

00:10:18,290 --> 00:10:22,850
it's basically a sudden good December I

00:10:20,600 --> 00:10:25,850
made a breaking change the way that

00:10:22,850 --> 00:10:29,029
we've been doing this is to to make it

00:10:25,850 --> 00:10:31,550
the introduction of a new promise like

00:10:29,029 --> 00:10:33,230
version three summer minor so we're not

00:10:31,550 --> 00:10:35,059
breaking any is controller any

00:10:33,230 --> 00:10:37,879
assumptions on existing API service

00:10:35,059 --> 00:10:40,100
that's why we have a vest promise

00:10:37,879 --> 00:10:42,649
right Odie and I promise as a separate

00:10:40,100 --> 00:10:44,509
set of functions here and then the

00:10:42,649 --> 00:10:46,519
second point you're going to FS the

00:10:44,509 --> 00:10:49,490
reason that the reason at best has done

00:10:46,519 --> 00:10:53,569
the way it was is so that we could avoid

00:10:49,490 --> 00:10:55,060
duplicate code most of that of the async

00:10:53,569 --> 00:10:57,310
activity with the Napa

00:10:55,060 --> 00:11:00,340
actually happens down at the native

00:10:57,310 --> 00:11:02,320
layer not in the JavaScript layer so

00:11:00,340 --> 00:11:03,760
what we do is we create and promising on

00:11:02,320 --> 00:11:06,400
the JavaScript side but we've resolved

00:11:03,760 --> 00:11:10,180
it on the q plus plus layer there

00:11:06,400 --> 00:11:13,300
without duplicating the code to also do

00:11:10,180 --> 00:11:15,400
the callback version so on the Jas side

00:11:13,300 --> 00:11:16,840
there's you know it's a separate set of

00:11:15,400 --> 00:11:21,280
functions that are defined there but

00:11:16,840 --> 00:11:24,580
under the covers if mailer is same in

00:11:21,280 --> 00:11:26,440
either case DMS was gonna slightly in

00:11:24,580 --> 00:11:28,570
two different ways so in each one of

00:11:26,440 --> 00:11:31,090
these transitions we actually have to

00:11:28,570 --> 00:11:32,910
look at the specific way that the module

00:11:31,090 --> 00:11:34,630
of those eight guys were implemented and

00:11:32,910 --> 00:11:38,520
you know there's not going to be a

00:11:34,630 --> 00:11:38,520
single pattern that's going to apply

00:11:48,330 --> 00:11:52,180
like the reason why you have that

00:11:50,320 --> 00:11:54,790
difference where in the jobs are clear

00:11:52,180 --> 00:11:56,740
where multiple implementations but then

00:11:54,790 --> 00:11:59,650
they deploy they all utilizes a papist

00:11:56,740 --> 00:12:09,130
to kind of like to preserve the breaking

00:11:59,650 --> 00:12:11,230
to preserve the I or we preserve

00:12:09,130 --> 00:12:15,580
existing API eliminate duplication of

00:12:11,230 --> 00:12:17,020
code right and unless we can do it that

00:12:15,580 --> 00:12:21,700
code with your chance of bugs and

00:12:17,020 --> 00:12:24,160
differences of behavior it also offers

00:12:21,700 --> 00:12:26,740
like a good opportunity to abstract out

00:12:24,160 --> 00:12:28,570
in the figure lady heywhat within this

00:12:26,740 --> 00:12:32,440
module is like the core functionality

00:12:28,570 --> 00:12:34,480
versus what is more of the interface and

00:12:32,440 --> 00:12:36,610
at least four FS I think when I was

00:12:34,480 --> 00:12:39,250
reviewing that code a lot of kind of

00:12:36,610 --> 00:12:42,550
what was the core are like underlying

00:12:39,250 --> 00:12:44,830
plumbing of FS is kind of broken out and

00:12:42,550 --> 00:12:49,450
then what's really different is just the

00:12:44,830 --> 00:12:51,640
interface into that point but I I guess

00:12:49,450 --> 00:12:53,860
at a high level of what I think and

00:12:51,640 --> 00:12:56,550
maybe we need to identify people and

00:12:53,860 --> 00:12:58,750
pair them with the api's I think that

00:12:56,550 --> 00:13:02,340
these are really interesting

00:12:58,750 --> 00:13:05,570
opportunities to give bounded work

00:13:02,340 --> 00:13:08,160
that's more advanced than like change

00:13:05,570 --> 00:13:09,900
along in the test which is how we

00:13:08,160 --> 00:13:12,260
traditionally didn't like doing our

00:13:09,900 --> 00:13:15,360
onboarding through code and learned I

00:13:12,260 --> 00:13:17,730
would love to see if a we can make more

00:13:15,360 --> 00:13:20,520
of a concerted effort for moving these

00:13:17,730 --> 00:13:22,350
promised api's forward but also be if we

00:13:20,520 --> 00:13:25,920
could use this as a way to level up

00:13:22,350 --> 00:13:27,840
newer contributors create new code

00:13:25,920 --> 00:13:29,760
owners for parts of our code base have

00:13:27,840 --> 00:13:34,350
people be more familiar with expert code

00:13:29,760 --> 00:13:36,540
base but it will require you know like

00:13:34,350 --> 00:13:38,820
some mentorship and some oversight and

00:13:36,540 --> 00:13:42,990
some support and I also think just in

00:13:38,820 --> 00:13:46,710
general like I know for myself when I

00:13:42,990 --> 00:13:48,300
opened up the child process 1 there was

00:13:46,710 --> 00:13:49,740
like a handful of pushback about like

00:13:48,300 --> 00:13:51,630
how I should do it in some like shedding

00:13:49,740 --> 00:13:54,120
and honestly I just didn't have the

00:13:51,630 --> 00:13:56,280
energy to finishing I'm quite familiar

00:13:54,120 --> 00:14:00,720
with core so I can imagine someone who

00:13:56,280 --> 00:14:02,820
was not me also not getting it done but

00:14:00,720 --> 00:14:04,980
I just think if we really want to tackle

00:14:02,820 --> 00:14:06,510
this like perhaps we need a working

00:14:04,980 --> 00:14:08,460
group or perhaps we need a team or

00:14:06,510 --> 00:14:10,530
perhaps we need more of a concerted

00:14:08,460 --> 00:14:11,940
effort but we should be like fairly

00:14:10,530 --> 00:14:16,260
consistent in the way that we approach

00:14:11,940 --> 00:14:18,150
it and review these things and have at

00:14:16,260 --> 00:14:21,630
the very least maybe some resources and

00:14:18,150 --> 00:14:24,290
documenting like what do we need to make

00:14:21,630 --> 00:14:29,220
a promise to API so that we aren't like

00:14:24,290 --> 00:14:31,710
litigating what the what the bare what

00:14:29,220 --> 00:14:33,300
what like our own expectations are every

00:14:31,710 --> 00:14:35,610
single time one of these API system

00:14:33,300 --> 00:14:37,590
comes in we should be consistent and all

00:14:35,610 --> 00:14:39,420
the API should be held to the same kind

00:14:37,590 --> 00:14:41,490
of like Laura of expectation and

00:14:39,420 --> 00:14:43,170
consistency so I think for child process

00:14:41,490 --> 00:14:44,550
for example one of the things that was

00:14:43,170 --> 00:14:46,260
blocked is like what are you going to do

00:14:44,550 --> 00:14:48,600
with all the sync API should all think

00:14:46,260 --> 00:14:51,840
API is also be exposed in the same

00:14:48,600 --> 00:14:53,250
interface and I just didn't have time to

00:14:51,840 --> 00:14:56,400
like go through and litigate all that

00:14:53,250 --> 00:14:58,170
stuff but we should just have like maybe

00:14:56,400 --> 00:15:00,480
on how to guide your mess or you want to

00:14:58,170 --> 00:15:03,000
promise a fine maybe I here are what the

00:15:00,480 --> 00:15:05,010
expectations are and if we have a review

00:15:03,000 --> 00:15:07,530
and it's not an act like it should get

00:15:05,010 --> 00:15:10,460
out to that guide or it shouldn't it

00:15:07,530 --> 00:15:10,460
shouldn't be necessary

00:15:14,709 --> 00:15:22,610
so it's gonna take it's not going to be

00:15:19,250 --> 00:15:24,830
complete right take a first class based

00:15:22,610 --> 00:15:27,140
on what we've already done look that

00:15:24,830 --> 00:15:28,970
guide itself is going to take a few take

00:15:27,140 --> 00:15:30,890
some iteration because there are still

00:15:28,970 --> 00:15:34,490
some parts of the existing API that

00:15:30,890 --> 00:15:36,680
we're not quite sure how and like I said

00:15:34,490 --> 00:15:38,209
it's not something that currently we

00:15:36,680 --> 00:15:40,520
have a clear set of rules that will

00:15:38,209 --> 00:15:43,910
apply it consistently across we have to

00:15:40,520 --> 00:15:45,200
figure out what those are part yes and I

00:15:43,910 --> 00:15:47,000
think based on that we can think of this

00:15:45,200 --> 00:15:48,589
as like a living document then we

00:15:47,000 --> 00:15:51,589
iterate on that at least becomes this

00:15:48,589 --> 00:15:53,300
this source of truth for kind of the

00:15:51,589 --> 00:15:55,010
history of creating these api's and what

00:15:53,300 --> 00:15:57,260
the expectations are I would volunteer

00:15:55,010 --> 00:15:59,120
to help work on that is there anyone

00:15:57,260 --> 00:16:12,709
else who would help with creating this

00:15:59,120 --> 00:16:16,940
document James yeah just he promised to

00:16:12,709 --> 00:16:24,370
do it but it resolved late just want to

00:16:16,940 --> 00:16:24,370
make sure you didn't reject cool ribbon

00:16:24,730 --> 00:16:30,589
yeah so I'm not sure how much more we

00:16:29,089 --> 00:16:34,180
should look into this there is still a

00:16:30,589 --> 00:16:36,230
couple of questions around implementing

00:16:34,180 --> 00:16:39,380
native from support doing the different

00:16:36,230 --> 00:16:42,230
API is because our API actually looks

00:16:39,380 --> 00:16:44,660
very different and like for example

00:16:42,230 --> 00:16:48,589
events have very different requirements

00:16:44,660 --> 00:16:50,690
then like yes then we have promise of

00:16:48,589 --> 00:16:58,220
work of a search which have a different

00:16:50,690 --> 00:17:01,220
name to the throw to the similar

00:16:58,220 --> 00:17:05,390
functionality and like a search rose and

00:17:01,220 --> 00:17:07,040
desert rejects but that's different for

00:17:05,390 --> 00:17:11,150
example with with MS because we have

00:17:07,040 --> 00:17:13,939
reach file and we have promises dot read

00:17:11,150 --> 00:17:16,100
file and which is the same name for the

00:17:13,939 --> 00:17:18,110
function so it's not completely clear

00:17:16,100 --> 00:17:20,720
always been only looking at fractioning

00:17:18,110 --> 00:17:21,980
what it is about if it uses a callback

00:17:20,720 --> 00:17:23,530
or not

00:17:21,980 --> 00:17:26,320
and

00:17:23,530 --> 00:17:30,550
things I have to be decided while

00:17:26,320 --> 00:17:32,380
implementing the promise based guys for

00:17:30,550 --> 00:17:40,810
all the modules that we did not work at

00:17:32,380 --> 00:17:42,970
so far so one of the challenges are

00:17:40,810 --> 00:17:49,320
there are two challenges on some of

00:17:42,970 --> 00:17:53,620
those especially on HTTP and those are

00:17:49,320 --> 00:17:57,820
related to how we receive show new

00:17:53,620 --> 00:18:03,670
connections and because if you if you're

00:17:57,820 --> 00:18:06,460
using if you're using HTTP server or a

00:18:03,670 --> 00:18:10,300
net or you or you're building a protocol

00:18:06,460 --> 00:18:12,880
on the third or the matte or TLS you are

00:18:10,300 --> 00:18:15,070
essentially putting using them in an

00:18:12,880 --> 00:18:19,420
event emitter so we emit a new

00:18:15,070 --> 00:18:21,280
connection as a new event okay the hard

00:18:19,420 --> 00:18:25,600
challenge there if we need to decide

00:18:21,280 --> 00:18:28,480
which type of it behind do we want to to

00:18:25,600 --> 00:18:30,970
provide in a promise flag like what does

00:18:28,480 --> 00:18:34,560
it mean to promise if I to two to four

00:18:30,970 --> 00:18:39,220
promises in a world where we are

00:18:34,560 --> 00:18:43,090
emitting we are emitting an event okay

00:18:39,220 --> 00:18:45,010
if you are a gift when we so HTTP if you

00:18:43,090 --> 00:18:46,900
are creating an HTTP server you doing it

00:18:45,010 --> 00:18:49,390
is need of create server and you pass in

00:18:46,900 --> 00:18:52,720
an Android okay we take request response

00:18:49,390 --> 00:18:55,240
right that in fact is gets added as an

00:18:52,720 --> 00:18:58,090
event listener to the requested event

00:18:55,240 --> 00:19:05,580
now it means that the core functionality

00:18:58,090 --> 00:19:08,680
of our HTTP of HTTP server which is the

00:19:05,580 --> 00:19:11,410
important part of Melbourne relies on

00:19:08,680 --> 00:19:13,480
Aven commitment now what does it mean to

00:19:11,410 --> 00:19:16,810
provide us a promise API for that and

00:19:13,480 --> 00:19:19,600
this is one of the questions that we

00:19:16,810 --> 00:19:22,780
still at not answer there is certain

00:19:19,600 --> 00:19:26,950
type of discussions and 7050 eyes that

00:19:22,780 --> 00:19:29,530
are being circulated from there is Dino

00:19:26,950 --> 00:19:32,119
is implemented something on them of that

00:19:29,530 --> 00:19:34,609
area I personally don't like

00:19:32,119 --> 00:19:43,669
I don't think that's a great idea but

00:19:34,609 --> 00:19:48,769
that's my personal take yes whatever

00:19:43,669 --> 00:19:51,469
saying is it's putting down I go down

00:19:48,769 --> 00:19:54,080
you to that path in order to provide it

00:19:51,469 --> 00:19:57,320
and that is the first one so we have

00:19:54,080 --> 00:20:00,919
certain observers are avid meter so in

00:19:57,320 --> 00:20:03,109
order to provide an API promise version

00:20:00,919 --> 00:20:06,379
for those we need to figure out what is

00:20:03,109 --> 00:20:08,919
the pattern for those okay and the

00:20:06,379 --> 00:20:11,599
second one is what we do with streams

00:20:08,919 --> 00:20:14,419
again requester installs inherits from

00:20:11,599 --> 00:20:19,639
streams so what I mean what does it mean

00:20:14,419 --> 00:20:23,149
for having a promise version for these

00:20:19,639 --> 00:20:26,690
and in order to do crypto TLS an H&P and

00:20:23,149 --> 00:20:32,149
net we need to solve those two problems

00:20:26,690 --> 00:20:35,509
first to some extent because if we don't

00:20:32,149 --> 00:20:38,359
then we can yeah after we can cause if I

00:20:35,509 --> 00:20:40,849
don't listen okay but you know that's

00:20:38,359 --> 00:20:43,219
not that it's an API gets called once

00:20:40,849 --> 00:20:44,809
for process money yes so it's not really

00:20:43,219 --> 00:20:45,979
you know we're not gonna be providing

00:20:44,809 --> 00:20:50,659
effective user experience you're not

00:20:45,979 --> 00:20:53,479
improving on the day to day okay so you

00:20:50,659 --> 00:20:56,809
know that's I just wanted to say there

00:20:53,479 --> 00:20:58,879
is a kind of a blocker for this if we

00:20:56,809 --> 00:21:03,039
need to figure out what those means and

00:20:58,879 --> 00:21:03,039
if you're interested if users are less

00:21:03,580 --> 00:21:08,149
and they are but that's if you have some

00:21:06,349 --> 00:21:33,469
time at the end that will just show my

00:21:08,149 --> 00:21:35,719
dear so I'm just curious like so this is

00:21:33,469 --> 00:21:38,149
my like web application developer brain

00:21:35,719 --> 00:21:43,789
right like the way I could solve this

00:21:38,149 --> 00:21:46,009
problem manager like

00:21:43,789 --> 00:21:48,710
my events and so that and like all of

00:21:46,009 --> 00:21:50,869
the details of like you know you're

00:21:48,710 --> 00:21:53,059
using cues and snacks and like it's the

00:21:50,869 --> 00:21:56,059
comp you know and here and there's

00:21:53,059 --> 00:21:59,450
people division details are inside that

00:21:56,059 --> 00:22:02,419
classroom knowing how to deal with you

00:21:59,450 --> 00:22:05,119
know the different types of kind of

00:22:02,419 --> 00:22:06,559
handshakes you know so I just was

00:22:05,119 --> 00:22:21,679
curious if something like that would be

00:22:06,559 --> 00:22:23,869
an option so I that's my answer so what

00:22:21,679 --> 00:22:27,019
we what I think we need to provide is

00:22:23,869 --> 00:22:29,690
something that is very similar to what

00:22:27,019 --> 00:22:32,629
note does right now but with some

00:22:29,690 --> 00:22:35,019
additional functionality like every

00:22:32,629 --> 00:22:37,549
meter and streams are part of our

00:22:35,019 --> 00:22:41,570
inheritance change for a lot of things

00:22:37,549 --> 00:22:43,909
so essentially in order to replace those

00:22:41,570 --> 00:22:46,309
so we cannot do the challenge between

00:22:43,909 --> 00:22:48,919
these and promises for example if that

00:22:46,309 --> 00:22:52,399
as a side effect of primes it is a full

00:22:48,919 --> 00:22:54,679
new implementation okay with a

00:22:52,399 --> 00:22:59,389
magnetometer I meant a meter is as part

00:22:54,679 --> 00:23:03,619
of a as I inhale hierarchy so HTTP

00:22:59,389 --> 00:23:07,669
server inherit from an emitter so we

00:23:03,619 --> 00:23:12,200
probably can not follow the same

00:23:07,669 --> 00:23:14,299
approach or we need to think if we want

00:23:12,200 --> 00:23:16,970
to do to form a different approach but

00:23:14,299 --> 00:23:18,859
that you mean it might need to you know

00:23:16,970 --> 00:23:26,239
implement a significant significant

00:23:18,859 --> 00:23:29,299
chunk of no return all right sexx laws'

00:23:26,239 --> 00:23:32,690
all these good insights and I guess we

00:23:29,299 --> 00:23:35,179
so here in issue you will also find the

00:23:32,690 --> 00:23:37,789
link I just opened a new issue and the

00:23:35,179 --> 00:23:42,679
summit repository and pull up the

00:23:37,789 --> 00:23:45,739
session and you will find the link is

00:23:42,679 --> 00:23:48,349
the link for other all the modules and

00:23:45,739 --> 00:23:51,049
in case you want to go in there and make

00:23:48,349 --> 00:23:56,210
a comment or so and if you'd also find

00:23:51,049 --> 00:23:56,960
in document again I'm I would like to

00:23:56,210 --> 00:23:59,720
continue now

00:23:56,960 --> 00:24:02,720
with the anti-rejection server because i

00:23:59,720 --> 00:24:05,270
don't know how many of you would be

00:24:02,720 --> 00:24:08,810
comfortable of deciding what should be

00:24:05,270 --> 00:24:10,250
the default in milk or like would anyone

00:24:08,810 --> 00:24:13,570
say like yeah I don't have a strong

00:24:10,250 --> 00:24:15,050
opinion on what it should look like a

00:24:13,570 --> 00:24:19,310
couple of M's

00:24:15,050 --> 00:24:20,630
thank you all right like what and these

00:24:19,310 --> 00:24:22,850
people would have a strong opinion what

00:24:20,630 --> 00:24:39,550
do you think it should look like if I

00:24:22,850 --> 00:24:45,130
may ask the strict moment be beneficial

00:24:39,550 --> 00:24:45,130
having a default that shows information

00:24:56,170 --> 00:25:04,970
like friendship or the whining or

00:24:59,690 --> 00:25:06,800
whatever that should be there I want

00:25:04,970 --> 00:25:14,450
consistency with errors they're not

00:25:06,800 --> 00:25:16,400
encapsulated in the process engineering

00:25:14,450 --> 00:25:18,920
approaches these all nice things to

00:25:16,400 --> 00:25:21,890
watch but really good look at what known

00:25:18,920 --> 00:25:23,990
is customs music and should actually

00:25:21,890 --> 00:25:26,210
just speak about of reputation walls and

00:25:23,990 --> 00:25:30,650
network what's best for engineering is

00:25:26,210 --> 00:25:34,880
one of each other speech may not be the

00:25:30,650 --> 00:25:38,630
best it can you elaborate a mmm more

00:25:34,880 --> 00:25:41,420
sure was able to come okay so if we have

00:25:38,630 --> 00:25:43,400
an option a specific option unless we

00:25:41,420 --> 00:25:45,950
use it unless it's used wisely buddy

00:25:43,400 --> 00:25:49,690
uses any kind of trust users to use

00:25:45,950 --> 00:25:52,280
wisely you could damage your reputation

00:25:49,690 --> 00:25:54,620
people might see it come along

00:25:52,280 --> 00:25:58,250
unnecessarily and that something you

00:25:54,620 --> 00:26:01,220
don't want I've got I'll take every step

00:25:58,250 --> 00:26:07,550
not to alarm anybody even the talk the

00:26:01,220 --> 00:26:09,890
word execute I will throw phony

00:26:07,550 --> 00:26:13,700
do you know how it is implemented right

00:26:09,890 --> 00:26:25,309
now do you know how to implementation

00:26:13,700 --> 00:26:29,809
plan because it does not answer it just

00:26:25,309 --> 00:26:33,200
to give you an outline exactly work

00:26:29,809 --> 00:26:35,450
thank so none just suppresses any

00:26:33,200 --> 00:26:37,190
warnings that are currently large at the

00:26:35,450 --> 00:26:39,410
moment when you're running into our

00:26:37,190 --> 00:26:41,210
rejection using no chances but mark

00:26:39,410 --> 00:26:43,970
multiple states first of all it would

00:26:41,210 --> 00:26:47,240
block warning and that you would have an

00:26:43,970 --> 00:26:49,010
objection the second it would first like

00:26:47,240 --> 00:26:52,850
for the very first one that is longer

00:26:49,010 --> 00:26:56,090
but also tell you this is duplicated and

00:26:52,850 --> 00:26:58,120
please handle all your rejections and I

00:26:56,090 --> 00:27:01,370
do believe there's anything mister

00:26:58,120 --> 00:27:02,570
singing I don't have a mic right Hemi

00:27:01,370 --> 00:27:05,450
right now

00:27:02,570 --> 00:27:08,270
uma that gives you an additional context

00:27:05,450 --> 00:27:11,480
little bit how I would like where the

00:27:08,270 --> 00:27:13,670
error originated from so this is the

00:27:11,480 --> 00:27:16,490
current warning thing and if you opt

00:27:13,670 --> 00:27:18,590
into the warning mode it would still do

00:27:16,490 --> 00:27:20,210
the regular warning and give you the

00:27:18,590 --> 00:27:22,640
context where it came from without

00:27:20,210 --> 00:27:26,120
certification warning indicating and the

00:27:22,640 --> 00:27:28,640
strict mode would not accept with a non

00:27:26,120 --> 00:27:30,559
zero exit code by default what a dozens

00:27:28,640 --> 00:27:33,320
that is when you're running into an

00:27:30,559 --> 00:27:35,990
animal to rejection that would then turn

00:27:33,320 --> 00:27:39,200
that on an objection into an uncaught

00:27:35,990 --> 00:27:44,390
exception which then has by default of

00:27:39,200 --> 00:27:46,760
majeste the behavior of them exiting the

00:27:44,390 --> 00:27:50,120
process with a non zero exit code

00:27:46,760 --> 00:27:54,679
because that's the process for uncaught

00:27:50,120 --> 00:27:58,210
exceptions in general that's and so the

00:27:54,679 --> 00:28:02,150
you could still stop that by having an

00:27:58,210 --> 00:28:03,890
uncaught exception hook which would mean

00:28:02,150 --> 00:28:06,559
that the process could continue long

00:28:03,890 --> 00:28:11,059
staff or whatever the user would wish to

00:28:06,559 --> 00:28:16,580
have the default so that's how it works

00:28:11,059 --> 00:28:20,080
and please okay great so thank you very

00:28:16,580 --> 00:28:20,080
much for the feedback all right I missed

00:28:20,190 --> 00:28:23,850
I pretty much agree with everyone that

00:28:22,619 --> 00:28:27,480
we should do the same thing we do for

00:28:23,850 --> 00:28:28,259
regulars and they'll do the same thing

00:28:27,480 --> 00:28:30,539
on

00:28:28,259 --> 00:28:34,320
uncaught exceptions on uncut exceptions

00:28:30,539 --> 00:28:35,820
in AC functions and I just want to echo

00:28:34,320 --> 00:28:44,609
that it's something that the yield of

00:28:35,820 --> 00:28:47,700
complaints about so I think there's a

00:28:44,609 --> 00:28:52,100
lot of new developers coming to note

00:28:47,700 --> 00:28:55,350
people that don't know Java works and

00:28:52,100 --> 00:29:06,950
promises work and they're just focusing

00:28:55,350 --> 00:29:10,799
on shipping business features I think

00:29:06,950 --> 00:29:13,919
which article we choose needs to take

00:29:10,799 --> 00:29:15,809
into consideration the fact that we

00:29:13,919 --> 00:29:24,899
should try to make the most sensible

00:29:15,809 --> 00:29:32,970
things in production which is brief yes

00:29:24,899 --> 00:29:36,389
I'm gonna fish as safe in production as

00:29:32,970 --> 00:29:39,809
possible by default and the reason is

00:29:36,389 --> 00:29:43,739
again there's a lot of you know mix mix

00:29:39,809 --> 00:29:52,850
problems in the wild on some functions

00:29:43,739 --> 00:29:54,960
and promises and improvements so yeah I

00:29:52,850 --> 00:29:59,580
personally think that that is you know

00:29:54,960 --> 00:30:02,399
exiting but that's my my current that's

00:29:59,580 --> 00:30:04,409
my take but there are other things that

00:30:02,399 --> 00:30:08,570
we can do to mitigate those problems and

00:30:04,409 --> 00:30:11,309
those problems so we might even you know

00:30:08,570 --> 00:30:16,350
do something slightly different so

00:30:11,309 --> 00:30:19,679
essentially there are other options okay

00:30:16,350 --> 00:30:21,929
so I hope it's like from from hearing

00:30:19,679 --> 00:30:26,190
all these different opinions of it's

00:30:21,929 --> 00:30:29,320
fair to give like a hotline of what my

00:30:26,190 --> 00:30:32,769
feeling is I mean the this room

00:30:29,320 --> 00:30:35,350
would mainly wish as a default and that

00:30:32,769 --> 00:30:38,799
sounds like it would be this big boat

00:30:35,350 --> 00:30:43,600
probably there's someone strongly

00:30:38,799 --> 00:30:46,809
disagree with that I don't see any hands

00:30:43,600 --> 00:30:51,159
cool I think that's actually a pretty

00:30:46,809 --> 00:30:56,710
nice outcome just tuned for our as a

00:30:51,159 --> 00:30:57,940
recommendation and yeah definitely there

00:30:56,710 --> 00:30:59,769
are a lot of people that are not here

00:30:57,940 --> 00:31:01,750
and I don't want to decide anything in

00:30:59,769 --> 00:31:02,860
here but just to just to make it clear

00:31:01,750 --> 00:31:07,500
my deal

00:31:02,860 --> 00:31:13,059
here is nothing to decide here all right

00:31:07,500 --> 00:31:16,269
and so what I do want to oh I wish at

00:31:13,059 --> 00:31:20,620
least is I asked every single one of you

00:31:16,269 --> 00:31:23,529
to open up this issue and to go to the

00:31:20,620 --> 00:31:25,360
document there is a link there linked to

00:31:23,529 --> 00:31:28,870
disturbing questions because what I

00:31:25,360 --> 00:31:33,029
actually think is best to do is to make

00:31:28,870 --> 00:31:35,889
a survey and to work on that very well

00:31:33,029 --> 00:31:38,139
like when we get hurt enough question

00:31:35,889 --> 00:31:41,019
that should hopefully like please try to

00:31:38,139 --> 00:31:44,830
be very unbiased outline pros and cons

00:31:41,019 --> 00:31:46,480
for different things give examples all

00:31:44,830 --> 00:31:51,549
these things could be gathered in that

00:31:46,480 --> 00:31:53,019
document and then I'm going to go to the

00:31:51,549 --> 00:31:56,049
diagnostic working group who's that

00:31:53,019 --> 00:31:58,450
again we're iterating overt making the

00:31:56,049 --> 00:32:01,000
final questions giving that to the

00:31:58,450 --> 00:32:04,179
survey working group which we do have as

00:32:01,000 --> 00:32:08,080
well and then to send out them as a

00:32:04,179 --> 00:32:10,629
survey and if that results in a clear

00:32:08,080 --> 00:32:13,600
opinion I think it's significantly

00:32:10,629 --> 00:32:17,980
easier to follow up on whatever our

00:32:13,600 --> 00:32:21,190
users think is best a lot even though we

00:32:17,980 --> 00:32:23,070
personally already have an opinion in

00:32:21,190 --> 00:32:28,509
what direction it should hopefully go

00:32:23,070 --> 00:32:30,009
right is there anything else on this

00:32:28,509 --> 00:32:36,580
topic otherwise I would continue does

00:32:30,009 --> 00:32:39,490
anyone wanna have something no good I am

00:32:36,580 --> 00:32:43,360
does anyone disagree with it like with

00:32:39,490 --> 00:32:46,660
my suggestion No

00:32:43,360 --> 00:32:51,820
okay well I hope you think it's a good

00:32:46,660 --> 00:32:54,640
idea and let's go to the amount you know

00:32:51,820 --> 00:32:57,160
to the multiple resource book so this is

00:32:54,640 --> 00:32:59,860
bit tricky because it's moment it is not

00:32:57,160 --> 00:33:04,510
really a good use case because of the

00:32:59,860 --> 00:33:07,750
false positives in a way yeah it's a

00:33:04,510 --> 00:33:10,020
personal question to to Google do you

00:33:07,750 --> 00:33:14,290
think you could work on that to improve

00:33:10,020 --> 00:33:48,760
the output so we can actually tell users

00:33:14,290 --> 00:33:50,650
more which is cool I mean won't you add

00:33:48,760 --> 00:33:55,050
something to the topic because I guess

00:33:50,650 --> 00:33:55,050
there is like in Google

00:34:04,960 --> 00:34:09,700
be fair multiple results is a hook

00:34:07,179 --> 00:34:12,609
created for us after we asked for it in

00:34:09,700 --> 00:34:15,089
the last column summit and we didn't

00:34:12,609 --> 00:34:17,589
specify full enough and this is my cot

00:34:15,089 --> 00:34:19,720
and we didn't think about all those edge

00:34:17,589 --> 00:34:22,179
cases and I think the big challenge in

00:34:19,720 --> 00:34:25,569
multiple resolves right now is class I

00:34:22,179 --> 00:34:27,760
don't mind even like I probably won't go

00:34:25,569 --> 00:34:29,260
through the process that I don't mind

00:34:27,760 --> 00:34:30,760
reading the code in him someone from VA

00:34:29,260 --> 00:34:34,529
to go through the process I think it's

00:34:30,760 --> 00:34:37,510
mostly blocked and deciding what we want

00:34:34,529 --> 00:34:40,359
find the edge cases so example can write

00:34:37,510 --> 00:34:42,899
tests failing tests for what multiple

00:34:40,359 --> 00:34:47,919
results should do in all these cases

00:34:42,899 --> 00:34:50,260
like this one here's one right now yeah

00:34:47,919 --> 00:34:52,980
I think it's cool in here would anyone

00:34:50,260 --> 00:34:52,980
be up for it

00:34:53,159 --> 00:35:06,220
no all right let's hope we can move

00:35:03,069 --> 00:35:09,880
forward with their topic soon because I

00:35:06,220 --> 00:35:11,680
personally believe we should try to have

00:35:09,880 --> 00:35:13,420
the best of bargaining experience for

00:35:11,680 --> 00:35:16,119
our users when it comes to promises

00:35:13,420 --> 00:35:19,210
possible and that would be part of it

00:35:16,119 --> 00:35:20,770
and because and they might run into

00:35:19,210 --> 00:35:22,420
issues there and all the way off because

00:35:20,770 --> 00:35:25,390
the promise constructor is pretty much

00:35:22,420 --> 00:35:29,309
damsel you don't know what happens there

00:35:25,390 --> 00:35:31,299
if the promise is already settled

00:35:29,309 --> 00:35:32,950
because it cannot change the state

00:35:31,299 --> 00:35:35,109
afterwards anymore you can do it might

00:35:32,950 --> 00:35:39,339
result again or reject afterwards some

00:35:35,109 --> 00:35:43,420
like that and actually after talking

00:35:39,339 --> 00:35:45,750
about this moment you do know about the

00:35:43,420 --> 00:35:47,500
problem itself or and who does not

00:35:45,750 --> 00:35:57,220
understand the problem with multiple

00:35:47,500 --> 00:36:00,849
resources so the promise constructor

00:35:57,220 --> 00:36:02,950
that when when there is a synchronous

00:36:00,849 --> 00:36:06,760
arrow and a promise constructor it would

00:36:02,950 --> 00:36:10,000
be rejected right and that's good and if

00:36:06,760 --> 00:36:12,400
you call tiger the reject or the result

00:36:10,000 --> 00:36:14,349
function that would be settled like as

00:36:12,400 --> 00:36:17,119
soon as you have it rejected all

00:36:14,349 --> 00:36:20,509
resolved let's call sac

00:36:17,119 --> 00:36:22,519
and then it is in a new state and cannot

00:36:20,509 --> 00:36:25,309
change that stage afterwards anymore it

00:36:22,519 --> 00:36:28,249
will always say reject them only salt

00:36:25,309 --> 00:36:30,200
but the problem with that is that the

00:36:28,249 --> 00:36:32,140
promise constructor that does not

00:36:30,200 --> 00:36:36,170
prevent any further code to be executed

00:36:32,140 --> 00:36:39,200
in the constructor even though it is

00:36:36,170 --> 00:36:41,869
already sound now if there is a second

00:36:39,200 --> 00:36:43,880
arrow or a second

00:36:41,869 --> 00:36:46,249
Rhys or something like that in there it

00:36:43,880 --> 00:36:48,529
will still be executed and it could

00:36:46,249 --> 00:36:51,529
cause side effects and arrows that we

00:36:48,529 --> 00:36:54,529
don't understand in the output because

00:36:51,529 --> 00:36:59,019
you don't see that because just silent

00:36:54,529 --> 00:36:59,019
pretty much it's a damsel from the code

00:37:18,009 --> 00:37:31,069
no no it's not so Benjamin is going to

00:37:29,390 --> 00:37:33,380
show you a nice example it's only about

00:37:31,069 --> 00:37:36,440
the inspector the prompts construct a

00:37:33,380 --> 00:37:39,319
new promise and then the function

00:37:36,440 --> 00:37:41,390
receives up to two arguments which is

00:37:39,319 --> 00:37:44,599
the resolve and the reject right you

00:37:41,390 --> 00:37:48,559
then you can then call in the promise

00:37:44,599 --> 00:37:51,259
constructor to settle it but you can

00:37:48,559 --> 00:37:54,140
call this function or both functions

00:37:51,259 --> 00:37:56,569
multiple times which would cause the

00:37:54,140 --> 00:37:59,539
promise not to change the stage the

00:37:56,569 --> 00:38:03,140
second time you call it and it would

00:37:59,539 --> 00:38:04,910
also not take any value if we like let's

00:38:03,140 --> 00:38:07,099
say you resolve twice with different

00:38:04,910 --> 00:38:09,739
values it would only take the first

00:38:07,099 --> 00:38:23,239
value didn't receive and would not know

00:38:09,739 --> 00:38:24,140
anything about the same so if we resolve

00:38:23,239 --> 00:38:25,910
with some value

00:38:24,140 --> 00:38:27,890
and then we call some function or do

00:38:25,910 --> 00:38:32,030
something and it's in a very nasty bug

00:38:27,890 --> 00:38:34,430
I've seen some big copies companies then

00:38:32,030 --> 00:38:39,860
this second like the first constructor

00:38:34,430 --> 00:38:42,320
is using this pattern where we text the

00:38:39,860 --> 00:38:45,770
function and executed asynchronously and

00:38:42,320 --> 00:38:48,290
it converts in throw exceptions to

00:38:45,770 --> 00:38:49,040
rejections that second time that's a

00:38:48,290 --> 00:38:51,110
function call

00:38:49,040 --> 00:38:53,000
if death throws that exception gets

00:38:51,110 --> 00:38:56,140
swallowed and like no one knows about it

00:38:53,000 --> 00:38:58,840
and multiple resolves gives you a hook

00:38:56,140 --> 00:39:02,390
gives you access to that second

00:38:58,840 --> 00:39:05,720
exception and the like the bug I've seen

00:39:02,390 --> 00:39:08,210
is where that function call was clean up

00:39:05,720 --> 00:39:10,850
this resource and they had a typo in

00:39:08,210 --> 00:39:13,670
production clean up this resource didn't

00:39:10,850 --> 00:39:41,860
execute it and like no one saw there so

00:39:13,670 --> 00:39:41,860
this is close

00:39:45,020 --> 00:39:50,900
it's interesting to note that there was

00:39:47,060 --> 00:39:53,450
just recently on Twitter suppose we're

00:39:50,900 --> 00:39:55,370
debating with me about whether local

00:39:53,450 --> 00:39:57,440
resolve should be allowed and the

00:39:55,370 --> 00:39:58,580
argument was is that we should we

00:39:57,440 --> 00:40:00,260
shouldn't do anything here it's let him

00:39:58,580 --> 00:40:02,150
resolve multiple clients and the

00:40:00,260 --> 00:40:05,210
argument literally was that resource we

00:40:02,150 --> 00:40:07,490
can't happen with promises like you know

00:40:05,210 --> 00:40:09,380
there's this perception out there people

00:40:07,490 --> 00:40:12,080
are using this if you use the guidance

00:40:09,380 --> 00:40:14,630
or way that stuff cannot happen but

00:40:12,080 --> 00:40:17,470
practically speeding me you know in real

00:40:14,630 --> 00:40:19,850
world these things are happening and

00:40:17,470 --> 00:40:25,280
it's specifically even though because of

00:40:19,850 --> 00:40:30,010
things like the false records for as

00:40:25,280 --> 00:40:30,010
well I hope that

00:40:39,230 --> 00:40:49,819
yes yes no sir ma'am the problem is that

00:40:47,480 --> 00:40:53,119
promise and dot all and promised on

00:40:49,819 --> 00:40:55,250
raise and promise all samples I'm not

00:40:53,119 --> 00:40:58,190
Eric attempt sure about all people very

00:40:55,250 --> 00:41:00,109
new but it is a first I know they'd used

00:40:58,190 --> 00:41:05,950
to promise contract they're all enemies

00:41:00,109 --> 00:41:05,950
and because of that we are receiving

00:41:08,530 --> 00:42:15,560
because it can be hard to reliable way

00:42:08,300 --> 00:42:18,619
maybe it works because like if you match

00:42:15,560 --> 00:42:21,460
them to be a function which like this

00:42:18,619 --> 00:42:31,369
something else Nichols the original then

00:42:21,460 --> 00:42:34,310
notice it was exposing more debug

00:42:31,369 --> 00:42:36,530
information to people sounds free and I

00:42:34,310 --> 00:42:38,089
don't think we're gonna change these

00:42:36,530 --> 00:42:40,010
things in the JavaScript standard

00:42:38,089 --> 00:42:42,920
there's a lot of things about promises

00:42:40,010 --> 00:42:45,710
that I personally find very variable and

00:42:42,920 --> 00:42:47,390
I think you magnified like other things

00:42:45,710 --> 00:42:52,089
that I wouldn't have thought of it's

00:42:47,390 --> 00:42:52,089
like you know there's many dimensions of

00:42:52,410 --> 00:44:50,680
and at the same time you know like that

00:43:20,109 --> 00:44:52,869
and so yes and I want to be the promise

00:44:50,680 --> 00:45:00,490
of the firm does the yet approach it and

00:44:52,869 --> 00:45:06,030
this APA was supposed to be safer yeah

00:45:00,490 --> 00:45:06,030
something on keeping which word

00:45:07,720 --> 00:45:14,590
so anyway stuff happen there were

00:45:12,190 --> 00:45:18,250
rationales lots of rationales about

00:45:14,590 --> 00:45:21,730
every single little case and we ended up

00:45:18,250 --> 00:45:25,000
where we are and at this point I hope

00:45:21,730 --> 00:45:26,740
that no to remain compatible with the

00:45:25,000 --> 00:45:31,000
part of you versus women with any

00:45:26,740 --> 00:45:33,780
variation just just maybe create errors

00:45:31,000 --> 00:45:38,200
and help developers with that but not

00:45:33,780 --> 00:45:40,870
change anything we agree upon them like

00:45:38,200 --> 00:45:42,730
there is no point where we want to

00:45:40,870 --> 00:45:45,940
change some annotate specifically from

00:45:42,730 --> 00:45:54,310
objects it's only providing extra

00:45:45,940 --> 00:45:57,220
information arrows I'm super into es T's

00:45:54,310 --> 00:45:58,660
and actually just talk to Mitch and I

00:45:57,220 --> 00:46:00,160
were like like sure they got something

00:45:58,660 --> 00:46:02,050
and we're gonna collaborate on a project

00:46:00,160 --> 00:46:03,400
we're like he's basically just gonna

00:46:02,050 --> 00:46:05,440
give me his list of problems and I'm

00:46:03,400 --> 00:46:09,820
gonna use my like ast knowledge to build

00:46:05,440 --> 00:46:11,230
some linting tools on ACK patterns so

00:46:09,820 --> 00:46:16,450
I'm really excited about this maybe I'm

00:46:11,230 --> 00:46:18,520
gonna find this shoe but I'm curious if

00:46:16,450 --> 00:46:21,130
there's just pot like I think there's

00:46:18,520 --> 00:46:23,560
ago like the advocacy pieces for this

00:46:21,130 --> 00:46:25,690
could be like creating of like a winter

00:46:23,560 --> 00:46:27,550
fly Clinton rolls around like you're not

00:46:25,690 --> 00:46:29,200
do this because I should mean like I'm

00:46:27,550 --> 00:46:31,060
just there's a major separation of

00:46:29,200 --> 00:46:32,980
concerns that I'm seeing here like I'm

00:46:31,060 --> 00:46:35,710
like the platform like shouldn't have to

00:46:32,980 --> 00:46:37,000
like write a bunch of code to like stop

00:46:35,710 --> 00:46:38,830
developers from shooting themselves in

00:46:37,000 --> 00:46:40,210
the foot because the spec was bad you

00:46:38,830 --> 00:46:41,830
know like the real thing should be

00:46:40,210 --> 00:46:43,090
pitching the spec but I'm like I guess

00:46:41,830 --> 00:46:44,940
for whatever reason that's not possible

00:46:43,090 --> 00:46:47,830
not sure why but I don't want to get

00:46:44,940 --> 00:46:48,880
some you know I'm just but you know I'm

00:46:47,830 --> 00:46:50,320
just curious like wouldn't you guys

00:46:48,880 --> 00:46:52,870
think that would be useful to like have

00:46:50,320 --> 00:46:54,640
a link like like quinton plugins that we

00:46:52,870 --> 00:46:56,520
like are like oh so like widely

00:46:54,640 --> 00:47:00,310
recognized in flinching rules for note

00:46:56,520 --> 00:47:02,050
just like say hey community like there's

00:47:00,310 --> 00:47:04,540
you know stuff you can do that's gonna

00:47:02,050 --> 00:47:06,370
like hurt you and we really recommend

00:47:04,540 --> 00:47:08,840
you you know just because you can do it

00:47:06,370 --> 00:47:09,830
doesn't mean you should yeah so forth so

00:47:08,840 --> 00:47:14,210
that's just a way to kind of

00:47:09,830 --> 00:47:16,220
programmatically like like identify just

00:47:14,210 --> 00:47:18,050
very routine we don't have a lot of time

00:47:16,220 --> 00:47:19,760
anymore this will a little bit and

00:47:18,050 --> 00:47:24,680
something else that I would also like to

00:47:19,760 --> 00:47:29,660
discuss them and we like it is

00:47:24,680 --> 00:47:33,730
struggling I think one year ago we

00:47:29,660 --> 00:47:33,730
spoken about this actually in Berlin

00:47:34,360 --> 00:47:42,440
there is a lender there's an and that

00:47:40,070 --> 00:47:45,820
works it's not able to catch all the

00:47:42,440 --> 00:47:48,650
cases like in Newberg we have warnings

00:47:45,820 --> 00:47:50,180
that's not statically like you get a

00:47:48,650 --> 00:47:53,180
prompt your name you don't know that

00:47:50,180 --> 00:47:55,070
might be promise and then or for example

00:47:53,180 --> 00:47:57,230
one of the biggest issues people have is

00:47:55,070 --> 00:47:59,180
that they made promises in denim they

00:47:57,230 --> 00:48:01,340
don't return back and then he doesn't

00:47:59,180 --> 00:48:05,540
wait for the for them

00:48:01,340 --> 00:48:07,070
I feel like 80% or 85% of these cases

00:48:05,540 --> 00:48:10,340
can be called statically and then there

00:48:07,070 --> 00:48:14,440
is like 15 that can't but the problem

00:48:10,340 --> 00:48:17,240
business the 15 are the hardest first

00:48:14,440 --> 00:48:18,390
and actually know some good people that

00:48:17,240 --> 00:48:21,719
would love to collaborate with you on

00:48:18,390 --> 00:48:21,719
[Music]

00:48:33,790 --> 00:48:38,240
this is our documentation and Julian all

00:48:36,380 --> 00:48:39,650
seems really great and we should

00:48:38,240 --> 00:48:41,690
simultaneously acknowledge that it's

00:48:39,650 --> 00:48:42,980
going to be if we who work in this

00:48:41,690 --> 00:48:47,020
direction is going to be me maybe

00:48:42,980 --> 00:48:49,100
they're not happy these things are all

00:48:47,020 --> 00:48:52,070
political in some way whether you're

00:48:49,100 --> 00:48:53,990
documenting how the world works

00:48:52,070 --> 00:48:54,870
or how the world should work and we

00:48:53,990 --> 00:48:57,890
should be comfortable

00:48:54,870 --> 00:49:01,380
[Music]

00:48:57,890 --> 00:49:03,630
absolutely okay thank you very much I

00:49:01,380 --> 00:49:08,369
think it's great that year I'm looking

00:49:03,630 --> 00:49:17,640
forward to using those rules then so

00:49:08,369 --> 00:49:24,359
long and we saw promises on exit thanks

00:49:17,640 --> 00:49:27,569
a lot and so the problem there is as I

00:49:24,359 --> 00:49:30,390
said before on the nodejs issue tracker

00:49:27,569 --> 00:49:32,940
people representing frequently come in

00:49:30,390 --> 00:49:36,239
and have say like hey my program ended

00:49:32,940 --> 00:49:39,019
but my promise never resolved and my

00:49:36,239 --> 00:49:42,869
program should not M before my promises

00:49:39,019 --> 00:49:45,210
well it normally only resolves if there

00:49:42,869 --> 00:49:48,569
is nothing else going on in the program

00:49:45,210 --> 00:49:50,970
anymore because then the event loop is

00:49:48,569 --> 00:49:54,059
empty and no J's cannot detect anything

00:49:50,970 --> 00:49:57,539
anymore promise there's nothing that

00:49:54,059 --> 00:50:00,720
keeps the event global and so and as

00:49:57,539 --> 00:50:02,730
soon as we resolve and then it would be

00:50:00,720 --> 00:50:05,279
some work again Colonel James and the

00:50:02,730 --> 00:50:07,680
process would kept like but obviously

00:50:05,279 --> 00:50:11,029
the promise never resolved so this in

00:50:07,680 --> 00:50:14,489
fact in the program and because in the

00:50:11,029 --> 00:50:16,170
branch which normally it results in the

00:50:14,489 --> 00:50:20,539
promise to be resolved was not reached

00:50:16,170 --> 00:50:23,670
and this is confusing for users and

00:50:20,539 --> 00:50:26,339
would be great to actually notify

00:50:23,670 --> 00:50:29,369
everyone about it so I've spoken to be

00:50:26,339 --> 00:50:31,499
are aware and on access able to iterate

00:50:29,369 --> 00:50:36,499
over the heap which means the seasons

00:50:31,499 --> 00:50:40,529
which means we are able to detect what

00:50:36,499 --> 00:50:42,869
the objects are they're still alive and

00:50:40,529 --> 00:50:46,369
then we check is it actually a promise

00:50:42,869 --> 00:50:50,489
if it is a promise and it is unresolved

00:50:46,369 --> 00:50:53,489
I'm sorry unsettled then we could

00:50:50,489 --> 00:50:57,089
actually tell the user where this

00:50:53,489 --> 00:51:01,289
promise is currently at in the code and

00:50:57,089 --> 00:51:04,160
say hey this does not miss all please

00:51:01,289 --> 00:51:07,860
have a look at that it seems like about

00:51:04,160 --> 00:51:17,730
is that something everyone agrees on

00:51:07,860 --> 00:51:20,580
I think this is also like why is it my

00:51:17,730 --> 00:51:23,010
code running like it's running to debug

00:51:20,580 --> 00:51:25,140
errors it's even more frustrating at

00:51:23,010 --> 00:51:26,490
least for me to debug code where code

00:51:25,140 --> 00:51:29,280
doesn't want and I don't understand why

00:51:26,490 --> 00:51:31,890
and on results like unsettle purposes

00:51:29,280 --> 00:51:34,170
can be really frustrating to debug for

00:51:31,890 --> 00:51:36,000
some users included I think for the very

00:51:34,170 --> 00:51:38,370
reason should expose this somehow even

00:51:36,000 --> 00:51:40,950
if you don't want to lock box by default

00:51:38,370 --> 00:51:43,410
because there are cases where programs

00:51:40,950 --> 00:51:48,110
ending with the process which at least

00:51:43,410 --> 00:51:50,870
have some way to monitor this or device

00:51:48,110 --> 00:51:53,400
so my suggestion about it is to

00:51:50,870 --> 00:51:55,920
implemented similar to current on handle

00:51:53,400 --> 00:51:58,650
rejection swag so you have it there and

00:51:55,920 --> 00:52:03,350
then we can again at another summer

00:51:58,650 --> 00:52:03,350
discuss if we want to have them as equal

00:52:17,000 --> 00:52:21,260
pacifically like flag

00:52:44,770 --> 00:52:53,970
so this my my original proposal for

00:52:47,500 --> 00:52:58,750
doing various exit also included this

00:52:53,970 --> 00:53:03,940
and I mean I feel that they probably

00:52:58,750 --> 00:53:10,510
need added to like the selection of

00:53:03,940 --> 00:53:14,290
unhandled rejection rate like default

00:53:10,510 --> 00:53:21,220
options like in the default case we go

00:53:14,290 --> 00:53:23,770
along with how the other setting is the

00:53:21,220 --> 00:53:27,370
rejection events and so the default case

00:53:23,770 --> 00:53:32,830
right now would be to warn which would

00:53:27,370 --> 00:53:47,590
get anyways otherwise probably and then

00:53:32,830 --> 00:53:49,990
you could if we changed okay so this so

00:53:47,590 --> 00:53:52,720
you're saying actually would want to

00:53:49,990 --> 00:53:55,090
have it aligned with the current

00:53:52,720 --> 00:53:58,120
Antelope ejections back so if it was

00:53:55,090 --> 00:54:01,330
used and someone would opt in to either

00:53:58,120 --> 00:54:02,820
boring or the strict mode you would want

00:54:01,330 --> 00:54:19,210
to long those as well today

00:54:02,820 --> 00:54:25,170
summarizing right yes although but I

00:54:19,210 --> 00:54:25,170
would like the behavior to sort of align

00:54:26,490 --> 00:54:35,460
okay I guess we could have different and

00:54:31,240 --> 00:54:35,460
carriage of different possibilities one

00:54:36,510 --> 00:54:46,150
is memory but I think in your yard the

00:54:40,060 --> 00:54:49,640
promises like sorry so I think in your

00:54:46,150 --> 00:54:52,790
er it's long the like promises

00:54:49,640 --> 00:54:55,250
and not just any but they might be like

00:54:52,790 --> 00:54:57,020
mysterious because I think what you did

00:54:55,250 --> 00:54:58,310
is like when the process exits like

00:54:57,020 --> 00:55:04,430
clogged all the promises that are

00:54:58,310 --> 00:55:08,180
projected because I think there are use

00:55:04,430 --> 00:55:11,800
cases like especially in lots of servers

00:55:08,180 --> 00:55:15,470
but in the Comelec tools you know

00:55:11,800 --> 00:55:17,330
sometimes in the code when the process

00:55:15,470 --> 00:55:20,060
access like people who just put process

00:55:17,330 --> 00:55:25,280
of exit in other places you can see like

00:55:20,060 --> 00:55:28,910
those we could actually also and like

00:55:25,280 --> 00:55:30,550
that's very valid point as well so one

00:55:28,910 --> 00:55:34,700
question is should we

00:55:30,550 --> 00:55:37,540
mmm then warm in case someone call

00:55:34,700 --> 00:55:37,540
process exit

00:55:59,410 --> 00:56:06,740
yeah I think that's a good point

00:56:03,460 --> 00:56:09,020
all right I believe we're through the

00:56:06,740 --> 00:56:11,990
time is also over thank you very much

00:56:09,020 --> 00:56:14,530
then I guess we can continue with the

00:56:11,990 --> 00:56:14,530

YouTube URL: https://www.youtube.com/watch?v=wFokg6PRIfk


